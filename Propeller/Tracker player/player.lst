00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 18 F1 07 F1 | 	add	ptra, ##2328
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 00 87 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 08 97 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 10 81 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 58 80 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a A0 84 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio010_spin2_dat__
00830 10b BC 7D 01 00 | 	long	@_audio010_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 3C 82 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 34 48 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e 54 25 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 28 20 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 10 21 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 E8 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 C0 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 50 34 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 98 6C 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     3C 5A 05 F6 | 	mov	COUNT_, #60
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     44 56 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     28 56 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     0C 56 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     F0 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     8C 20 B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     50 54 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     20 57 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     18 19 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     E4 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     B8 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     C4 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     80 57 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     A4 18 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     41 00 00 FF 
00ac8     13 7C 06 F6 | 	mov	local10, ##@LR__0459
00acc     04 00 00 FF 
00ad0     D0 0E 06 F1 | 	add	objptr, ##2256
00ad4     07 7D 62 FC | 	wrlong	local10, objptr
00ad8     04 00 00 FF 
00adc     D0 0E 86 F1 | 	sub	objptr, ##2256
00ae0     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00ae4     3F 5D 02 F6 | 	mov	arg01, local11
00ae8     78 FD BF FD | 	call	#_addr
00aec     04 00 00 FF 
00af0     D4 0E 06 F1 | 	add	objptr, ##2260
00af4     07 2B 62 FC | 	wrlong	result1, objptr
00af8     15 5D 02 F6 | 	mov	arg01, result1
00afc     00 5E 06 F6 | 	mov	arg02, #0
00b00     01 00 00 FF 
00b04     A4 0F 86 F1 | 	sub	objptr, ##932
00b08     EC 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b0c     01 5E 06 F6 | 	mov	arg02, #1
00b10                 | ' 
00b10                 | ' ''---------- Set the (x,y) position of cursor
00b10                 | ' 
00b10                 | ' cursor_x:=x
00b10     02 00 00 FF 
00b14     FC 0E 86 F1 | 	sub	objptr, ##1276
00b18     07 03 48 FC | 	wrbyte	#1, objptr
00b1c                 | ' cursor_y:=y
00b1c     01 0E 06 F1 | 	add	objptr, #1
00b20     07 03 48 FC | 	wrbyte	#1, objptr
00b24                 | ' 
00b24                 | ' emptystr$="                      "
00b24                 | ' 
00b24                 | ' ma=addr(module)
00b24                 | ' tracker.initmodule(ma,0)
00b24                 | ' 
00b24                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b24     04 00 00 FF 
00b28     9F 0E 06 F1 | 	add	objptr, ##2207
00b2c     07 81 02 FB | 	rdlong	local12, objptr
00b30     40 83 02 F6 | 	mov	local13, local12
00b34     04 00 00 FF 
00b38     D4 0E 86 F1 | 	sub	objptr, ##2260
00b3c     14 82 06 F1 | 	add	local13, #20
00b40                 | LR__0001
00b40     41 81 5A F2 | 	cmps	local12, local13 wcz
00b44     44 00 90 3D |  if_ae	jmp	#LR__0002
00b48     00 5C 06 F6 | 	mov	arg01, #0
00b4c     90 6A B0 FD | 	call	#__system___getiolock_0145
00b50     15 5D 02 F6 | 	mov	arg01, result1
00b54     44 54 B0 FD | 	call	#__system___lockmem
00b58     00 84 06 F6 | 	mov	local14, #0
00b5c                 | ' asm
00b5c     40 2B C2 FA | 	rdbyte	result1, local12
00b60                 | ' return r
00b60     15 5F 02 F6 | 	mov	arg02, result1
00b64     07 5E 46 F7 | 	zerox	arg02, #7
00b68     00 5C 06 F6 | 	mov	arg01, #0
00b6c     00 60 06 F6 | 	mov	arg03, #0
00b70     74 57 B0 FD | 	call	#__system___basic_print_char
00b74     00 5C 06 F6 | 	mov	arg01, #0
00b78     64 6A B0 FD | 	call	#__system___getiolock_0145
00b7c     15 01 68 FC | 	wrlong	#0, result1
00b80     00 2A 06 F6 | 	mov	result1, #0
00b84     01 80 06 F1 | 	add	local12, #1
00b88     B4 FF 9F FD | 	jmp	#LR__0001
00b8c                 | LR__0002
00b8c     04 00 00 FF 
00b90     D8 0E 06 F1 | 	add	objptr, ##2264
00b94     07 1F 68 FC | 	wrlong	#15, objptr
00b98                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00b98     00 7C 06 F6 | 	mov	local10, #0
00b9c     04 0E 86 F1 | 	sub	objptr, #4
00ba0     07 5D 02 FB | 	rdlong	arg01, objptr
00ba4     02 00 00 FF 
00ba8     38 5C 06 F1 | 	add	arg01, ##1080
00bac                 | ' asm
00bac     2E 87 C2 FA | 	rdbyte	local15, arg01
00bb0                 | ' return r
00bb0     07 86 46 F7 | 	zerox	local15, #7
00bb4     4D 86 0E F2 | 	cmp	local15, #77 wz
00bb8     01 7C 66 A6 |  if_e	neg	local10, #1
00bbc     00 88 06 F6 | 	mov	local16, #0
00bc0     07 5D 02 FB | 	rdlong	arg01, objptr
00bc4     04 00 00 FF 
00bc8     D4 0E 86 F1 | 	sub	objptr, ##2260
00bcc     02 00 00 FF 
00bd0     3A 5C 06 F1 | 	add	arg01, ##1082
00bd4                 | ' asm
00bd4     2E 2B C2 FA | 	rdbyte	result1, arg01
00bd8                 | ' return r
00bd8     15 8B 02 F6 | 	mov	local17, result1
00bdc     07 8A 46 F7 | 	zerox	local17, #7
00be0     4B 8A 0E F2 | 	cmp	local17, #75 wz
00be4     01 88 66 A6 |  if_e	neg	local16, #1
00be8     44 7D CA F7 | 	test	local10, local16 wz
00bec     04 00 00 5F 
00bf0     D8 0E 06 51 |  if_ne	add	objptr, ##2264
00bf4     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00bf8     04 00 00 5F 
00bfc     D8 0E 86 51 |  if_ne	sub	objptr, ##2264
00c00     02 5E 06 F6 | 	mov	arg02, #2
00c04                 | ' 
00c04                 | ' ''---------- Set the (x,y) position of cursor
00c04                 | ' 
00c04                 | ' cursor_x:=x
00c04     34 0E 06 F1 | 	add	objptr, #52
00c08     07 03 48 FC | 	wrbyte	#1, objptr
00c0c                 | ' cursor_y:=y
00c0c     01 0E 06 F1 | 	add	objptr, #1
00c10     07 05 48 FC | 	wrbyte	#2, objptr
00c14     35 0E 86 F1 | 	sub	objptr, #53
00c18                 | ' position 1,2 : print samples;" ";"samples module"
00c18     00 5C 06 F6 | 	mov	arg01, #0
00c1c     C0 69 B0 FD | 	call	#__system___getiolock_0145
00c20     15 5D 02 F6 | 	mov	arg01, result1
00c24     74 53 B0 FD | 	call	#__system___lockmem
00c28     00 2A 06 F6 | 	mov	result1, #0
00c2c     04 00 00 FF 
00c30     D8 0E 06 F1 | 	add	objptr, ##2264
00c34     07 5F 02 FB | 	rdlong	arg02, objptr
00c38     04 00 00 FF 
00c3c     D8 0E 86 F1 | 	sub	objptr, ##2264
00c40     00 5C 06 F6 | 	mov	arg01, #0
00c44     00 60 06 F6 | 	mov	arg03, #0
00c48     0A 62 06 F6 | 	mov	arg04, #10
00c4c     2C 57 B0 FD | 	call	#__system___basic_print_integer
00c50     41 00 00 FF 
00c54     2A 5E 06 F6 | 	mov	arg02, ##@LR__0460
00c58     00 5C 06 F6 | 	mov	arg01, #0
00c5c     00 60 06 F6 | 	mov	arg03, #0
00c60     D0 56 B0 FD | 	call	#__system___basic_print_string
00c64     41 00 00 FF 
00c68     2C 5E 06 F6 | 	mov	arg02, ##@LR__0461
00c6c     00 5C 06 F6 | 	mov	arg01, #0
00c70     00 60 06 F6 | 	mov	arg03, #0
00c74     BC 56 B0 FD | 	call	#__system___basic_print_string
00c78     00 5C 06 F6 | 	mov	arg01, #0
00c7c     0A 5E 06 F6 | 	mov	arg02, #10
00c80     00 60 06 F6 | 	mov	arg03, #0
00c84     60 56 B0 FD | 	call	#__system___basic_print_char
00c88     01 2A 06 F6 | 	mov	result1, #1
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     4C 69 B0 FD | 	call	#__system___getiolock_0145
00c94     15 01 68 FC | 	wrlong	#0, result1
00c98     00 2A 06 F6 | 	mov	result1, #0
00c9c     04 00 00 FF 
00ca0     D4 0E 06 F1 | 	add	objptr, ##2260
00ca4     07 8D 02 FB | 	rdlong	local18, objptr
00ca8     04 0E 06 F1 | 	add	objptr, #4
00cac     07 8F 02 FB | 	rdlong	local19, objptr
00cb0     04 5E 06 F6 | 	mov	arg02, #4
00cb4                 | ' 
00cb4                 | ' ''---------- Set the (x,y) position of cursor
00cb4                 | ' 
00cb4                 | ' cursor_x:=x
00cb4     04 00 00 FF 
00cb8     A4 0E 86 F1 | 	sub	objptr, ##2212
00cbc     07 03 48 FC | 	wrbyte	#1, objptr
00cc0                 | ' cursor_y:=y
00cc0     01 0E 06 F1 | 	add	objptr, #1
00cc4     07 09 48 FC | 	wrbyte	#4, objptr
00cc8     35 0E 86 F1 | 	sub	objptr, #53
00ccc                 | ' 'v030. setwritecolors(170,147):
00ccc                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00ccc     00 5C 06 F6 | 	mov	arg01, #0
00cd0     0C 69 B0 FD | 	call	#__system___getiolock_0145
00cd4     15 5D 02 F6 | 	mov	arg01, result1
00cd8     C0 52 B0 FD | 	call	#__system___lockmem
00cdc     00 2A 06 F6 | 	mov	result1, #0
00ce0     40 00 00 FF 
00ce4     A8 5F 06 F6 | 	mov	arg02, ##@LR__0457
00ce8     00 5C 06 F6 | 	mov	arg01, #0
00cec     00 60 06 F6 | 	mov	arg03, #0
00cf0     40 56 B0 FD | 	call	#__system___basic_print_string
00cf4     00 5C 06 F6 | 	mov	arg01, #0
00cf8     0A 5E 06 F6 | 	mov	arg02, #10
00cfc     00 60 06 F6 | 	mov	arg03, #0
00d00     E4 55 B0 FD | 	call	#__system___basic_print_char
00d04     01 2A 06 F6 | 	mov	result1, #1
00d08     00 5C 06 F6 | 	mov	arg01, #0
00d0c     D0 68 B0 FD | 	call	#__system___getiolock_0145
00d10     15 01 68 FC | 	wrlong	#0, result1
00d14     00 2A 06 F6 | 	mov	result1, #0
00d18     04 00 00 FF 
00d1c     4C 0E 06 F1 | 	add	objptr, ##2124
00d20     07 91 02 F6 | 	mov	local20, objptr
00d24     00 92 06 F6 | 	mov	local21, #0
00d28     04 00 00 FF 
00d2c     4C 0E 86 F1 | 	sub	objptr, ##2124
00d30                 | LR__0003
00d30     41 00 00 FF 
00d34     11 94 06 F6 | 	mov	local22, ##@LR__0458
00d38     49 97 02 F6 | 	mov	local23, local21
00d3c     02 5E 06 F6 | 	mov	arg02, #2
00d40     0A 60 06 F6 | 	mov	arg03, #10
00d44     02 98 0E F6 | 	mov	local24, #2 wz
00d48     34 00 90 FD | 	jmp	#LR__0006
00d4c                 | LR__0004
00d4c     00 9A 06 F6 | 	mov	local25, #0
00d50     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d54     01 9A 66 E6 |  if_be	neg	local25, #1
00d58     00 9E 06 F6 | 	mov	local27, #0
00d5c     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d60     01 9E 66 C6 |  if_b	neg	local27, #1
00d64     4F 9B CA F7 | 	test	local25, local27 wz
00d68     14 00 90 AD |  if_e	jmp	#LR__0005
00d6c     4E A1 02 F6 | 	mov	local28, local26
00d70     0A 9C 06 FD | 	qmul	local26, #10
00d74     18 9C 62 FD | 	getqx	local26
00d78     01 98 06 F1 | 	add	local24, #1
00d7c     CC FF 9F FD | 	jmp	#LR__0004
00d80                 | LR__0005
00d80                 | LR__0006
00d80     20 98 3E F3 | 	fle	local24, #32 wcz
00d84     4C 5D 02 F6 | 	mov	arg01, local24
00d88     02 5C 06 F1 | 	add	arg01, #2
00d8c     40 5E B0 FD | 	call	#__system___gc_alloc_managed
00d90     15 A3 02 F6 | 	mov	local29, result1
00d94     4C A5 02 F6 | 	mov	local30, local24
00d98     51 A5 02 F1 | 	add	local30, local29
00d9c     52 01 48 FC | 	wrbyte	#0, local30
00da0     98 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00da4     93 00 A0 FD | 	call	#FCACHE_LOAD_
00da8                 | LR__0007
00da8     00 98 1E F2 | 	cmp	local24, #0 wcz
00dac     34 00 90 ED |  if_be	jmp	#LR__0009
00db0     01 98 86 F1 | 	sub	local24, #1
00db4     4B 0B 03 F6 | 	mov	muldiva_, local23
00db8     0A 0C 07 F6 | 	mov	muldivb_, #10
00dbc     CC 00 A0 FD | 	call	#unsdivide_
00dc0     85 A7 02 F6 | 	mov	local31, muldiva_
00dc4     86 97 02 F6 | 	mov	local23, muldivb_
00dc8     0A A6 1E F2 | 	cmp	local31, #10 wcz
00dcc     30 A6 06 C1 |  if_b	add	local31, #48
00dd0     37 A6 06 31 |  if_ae	add	local31, #55
00dd4     4C A9 02 F6 | 	mov	local32, local24
00dd8     51 A9 02 F1 | 	add	local32, local29
00ddc     54 A7 42 FC | 	wrbyte	local31, local32
00de0     C4 FF 9F FD | 	jmp	#LR__0007
00de4                 | LR__0008
00de4                 | LR__0009
00de4     51 2B 02 F6 | 	mov	result1, local29
00de8     15 5F 02 F6 | 	mov	arg02, result1
00dec     4A 5D 02 F6 | 	mov	arg01, local22
00df0     E0 51 B0 FD | 	call	#__system___string_concat
00df4     15 AB 02 F6 | 	mov	local33, result1
00df8     13 5C 06 F6 | 	mov	arg01, #19
00dfc     40 00 00 FF 
00e00     48 5F 06 F6 | 	mov	arg02, ##@LR__0450
00e04     38 5A B0 FD | 	call	#__system__String_S
00e08     15 5F 02 F6 | 	mov	arg02, result1
00e0c     55 5D 02 F6 | 	mov	arg01, local33
00e10     C0 51 B0 FD | 	call	#__system___string_concat
00e14     48 2B 62 FC | 	wrlong	result1, local20
00e18     01 92 06 F1 | 	add	local21, #1
00e1c     04 90 06 F1 | 	add	local20, #4
00e20     20 92 5E F2 | 	cmps	local21, #32 wcz
00e24     08 FF 9F CD |  if_b	jmp	#LR__0003
00e28                 | ' for i=1 to num
00e28     01 92 06 F6 | 	mov	local21, #1
00e2c     01 8E 06 F1 | 	add	local19, #1
00e30     46 AD 02 F6 | 	mov	local34, local18
00e34     14 AC 06 F1 | 	add	local34, #20
00e38     00 AE 06 F6 | 	mov	local35, #0
00e3c     04 00 00 FF 
00e40     50 0E 06 F1 | 	add	objptr, ##2128
00e44     07 B1 02 F6 | 	mov	local36, objptr
00e48     14 8C 06 F1 | 	add	local18, #20
00e4c     00 B2 06 F6 | 	mov	local37, #0
00e50     04 00 00 FF 
00e54     50 0E 86 F1 | 	sub	objptr, ##2128
00e58                 | LR__0010
00e58     47 93 5A F2 | 	cmps	local21, local19 wcz
00e5c     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e60     56 B5 02 F6 | 	mov	local38, local34
00e64     57 B5 02 F1 | 	add	local38, local35
00e68     00 B6 06 F6 | 	mov	local39, #0
00e6c                 | LR__0011
00e6c     58 5D 02 F6 | 	mov	arg01, local36
00e70     F0 F9 BF FD | 	call	#_addr
00e74                 | ' asm
00e74     15 B9 02 FB | 	rdlong	local40, result1
00e78                 | ' return r
00e78     04 00 00 FF 
00e7c     FC 0E 06 F1 | 	add	objptr, ##2300
00e80     07 B9 62 FC | 	wrlong	local40, objptr
00e84     5A 5D 02 F6 | 	mov	arg01, local38
00e88     5B 5D 02 F1 | 	add	arg01, local39
00e8c                 | ' asm
00e8c     2E 2B C2 FA | 	rdbyte	result1, arg01
00e90                 | ' return r
00e90     15 95 02 F6 | 	mov	local22, result1
00e94     07 94 46 F7 | 	zerox	local22, #7
00e98     04 0E 06 F1 | 	add	objptr, #4
00e9c     07 95 62 FC | 	wrlong	local22, objptr
00ea0                 | '     a=lpeek(addr(sn$(i)))
00ea0                 | '     b=(peek(ma+20+30*(i-1)+j))
00ea0                 | '     if b>=32 then poke a+j,b
00ea0     04 00 00 FF 
00ea4     00 0F 86 F1 | 	sub	objptr, ##2304
00ea8     20 94 5E F2 | 	cmps	local22, #32 wcz
00eac     24 00 90 CD |  if_b	jmp	#LR__0012
00eb0     04 00 00 FF 
00eb4     FC 0E 06 F1 | 	add	objptr, ##2300
00eb8     07 5D 02 FB | 	rdlong	arg01, objptr
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0     04 0E 06 F1 | 	add	objptr, #4
00ec4     07 5F 02 FB | 	rdlong	arg02, objptr
00ec8     04 00 00 FF 
00ecc     00 0F 86 F1 | 	sub	objptr, ##2304
00ed0                 | ' asm
00ed0     2E 5F 42 FC | 	wrbyte	arg02, arg01
00ed4                 | LR__0012
00ed4     01 B6 06 F1 | 	add	local39, #1
00ed8     16 B6 5E F2 | 	cmps	local39, #22 wcz
00edc     8C FF 9F CD |  if_b	jmp	#LR__0011
00ee0     46 BB 02 F6 | 	mov	local41, local18
00ee4     59 BB 02 F1 | 	add	local41, local37
00ee8     5D 5D 02 F6 | 	mov	arg01, local41
00eec     16 5C 06 F1 | 	add	arg01, #22
00ef0     5D BD 02 F6 | 	mov	local42, local41
00ef4     17 BC 06 F1 | 	add	local42, #23
00ef8                 | ' asm
00ef8     2E AB C2 FA | 	rdbyte	local33, arg01
00efc                 | ' return r
00efc     07 AA 46 F7 | 	zerox	local33, #7
00f00     08 AA 66 F0 | 	shl	local33, #8
00f04                 | ' asm
00f04     5E BF C2 FA | 	rdbyte	local43, local42
00f08                 | ' return r
00f08     07 BE 46 F7 | 	zerox	local43, #7
00f0c     5F AB 02 F1 | 	add	local33, local43
00f10     01 AA 66 F0 | 	shl	local33, #1
00f14     04 00 00 FF 
00f18     04 0F 06 F1 | 	add	objptr, ##2308
00f1c     07 AB 62 FC | 	wrlong	local33, objptr
00f20     5D 5D 02 F6 | 	mov	arg01, local41
00f24     1A 5C 06 F1 | 	add	arg01, #26
00f28     5D C1 02 F6 | 	mov	local44, local41
00f2c     1B C0 06 F1 | 	add	local44, #27
00f30                 | ' asm
00f30     2E AB C2 FA | 	rdbyte	local33, arg01
00f34                 | ' return r
00f34     07 AA 46 F7 | 	zerox	local33, #7
00f38     08 AA 66 F0 | 	shl	local33, #8
00f3c                 | ' asm
00f3c     60 BF C2 FA | 	rdbyte	local43, local44
00f40                 | ' return r
00f40     07 BE 46 F7 | 	zerox	local43, #7
00f44     5F AB 02 F1 | 	add	local33, local43
00f48     01 AA 66 F0 | 	shl	local33, #1
00f4c     04 0E 06 F1 | 	add	objptr, #4
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1C 5C 06 F1 | 	add	arg01, #28
00f5c     5D C3 02 F6 | 	mov	local45, local41
00f60     1D C2 06 F1 | 	add	local45, #29
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     61 BF C2 FA | 	rdbyte	local43, local45
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     18 5C 06 F1 | 	add	arg01, #24
00f90                 | ' asm
00f90     2E 95 C2 FA | 	rdbyte	local22, arg01
00f94                 | ' return r
00f94     07 94 46 F7 | 	zerox	local22, #7
00f98     04 0E 06 F1 | 	add	objptr, #4
00f9c     07 95 62 FC | 	wrlong	local22, objptr
00fa0     19 BA 06 F1 | 	add	local41, #25
00fa4                 | ' asm
00fa4     5D 2B C2 FA | 	rdbyte	result1, local41
00fa8                 | ' return r
00fa8     15 95 02 F6 | 	mov	local22, result1
00fac     07 94 46 F7 | 	zerox	local22, #7
00fb0     04 0E 06 F1 | 	add	objptr, #4
00fb4     07 95 62 FC | 	wrlong	local22, objptr
00fb8     04 00 00 FF 
00fbc     14 0F 86 F1 | 	sub	objptr, ##2324
00fc0                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00fc0                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00fc0                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00fc0                 | ' ft=peek(ma+20+30*(i-1)+24)
00fc0                 | ' vl=peek(ma+20+30*(i-1)+25)
00fc0                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00fc0     10 92 5E F2 | 	cmps	local21, #16 wcz
00fc4     C4 02 90 3D |  if_ae	jmp	#LR__0013
00fc8     05 C4 06 F6 | 	mov	local46, #5
00fcc     49 C5 02 F1 | 	add	local46, local21
00fd0     62 5F 02 F6 | 	mov	arg02, local46
00fd4                 | ' 
00fd4                 | ' ''---------- Set the (x,y) position of cursor
00fd4                 | ' 
00fd4                 | ' cursor_x:=x
00fd4     34 0E 06 F1 | 	add	objptr, #52
00fd8     07 03 48 FC | 	wrbyte	#1, objptr
00fdc                 | ' cursor_y:=y
00fdc     01 0E 06 F1 | 	add	objptr, #1
00fe0     07 5F 42 FC | 	wrbyte	arg02, objptr
00fe4     49 C7 02 F6 | 	mov	local47, local21
00fe8     02 C6 66 F0 | 	shl	local47, #2
00fec     04 00 00 FF 
00ff0     17 0E 06 F1 | 	add	objptr, ##2071
00ff4     07 C7 02 F1 | 	add	local47, objptr
00ff8     00 5C 06 F6 | 	mov	arg01, #0
00ffc     04 00 00 FF 
01000     4C 0E 86 F1 | 	sub	objptr, ##2124
01004     D8 65 B0 FD | 	call	#__system___getiolock_0145
01008     15 5D 02 F6 | 	mov	arg01, result1
0100c     8C 4F B0 FD | 	call	#__system___lockmem
01010     00 2A 06 F6 | 	mov	result1, #0
01014     63 5F 02 FB | 	rdlong	arg02, local47
01018     00 5C 06 F6 | 	mov	arg01, #0
0101c     00 60 06 F6 | 	mov	arg03, #0
01020     10 53 B0 FD | 	call	#__system___basic_print_string
01024     00 5C 06 F6 | 	mov	arg01, #0
01028     0A 5E 06 F6 | 	mov	arg02, #10
0102c     00 60 06 F6 | 	mov	arg03, #0
01030     B4 52 B0 FD | 	call	#__system___basic_print_char
01034     01 2A 06 F6 | 	mov	result1, #1
01038     00 5C 06 F6 | 	mov	arg01, #0
0103c     A0 65 B0 FD | 	call	#__system___getiolock_0145
01040     15 01 68 FC | 	wrlong	#0, result1
01044     00 2A 06 F6 | 	mov	result1, #0
01048     62 5F 02 F6 | 	mov	arg02, local46
0104c                 | ' 
0104c                 | ' ''---------- Set the (x,y) position of cursor
0104c                 | ' 
0104c                 | ' cursor_x:=x
0104c     34 0E 06 F1 | 	add	objptr, #52
01050     07 31 48 FC | 	wrbyte	#24, objptr
01054                 | ' cursor_y:=y
01054     01 0E 06 F1 | 	add	objptr, #1
01058     07 5F 42 FC | 	wrbyte	arg02, objptr
0105c     35 0E 86 F1 | 	sub	objptr, #53
01060     00 5C 06 F6 | 	mov	arg01, #0
01064     78 65 B0 FD | 	call	#__system___getiolock_0145
01068     15 5D 02 F6 | 	mov	arg01, result1
0106c     2C 4F B0 FD | 	call	#__system___lockmem
01070     00 2A 06 F6 | 	mov	result1, #0
01074     04 00 00 FF 
01078     04 0F 06 F1 | 	add	objptr, ##2308
0107c     07 5F 02 FB | 	rdlong	arg02, objptr
01080     04 00 00 FF 
01084     04 0F 86 F1 | 	sub	objptr, ##2308
01088     00 5C 06 F6 | 	mov	arg01, #0
0108c     00 60 06 F6 | 	mov	arg03, #0
01090     0A 62 06 F6 | 	mov	arg04, #10
01094     E4 52 B0 FD | 	call	#__system___basic_print_integer
01098     00 5C 06 F6 | 	mov	arg01, #0
0109c     0A 5E 06 F6 | 	mov	arg02, #10
010a0     00 60 06 F6 | 	mov	arg03, #0
010a4     40 52 B0 FD | 	call	#__system___basic_print_char
010a8     01 2A 06 F6 | 	mov	result1, #1
010ac     00 5C 06 F6 | 	mov	arg01, #0
010b0     2C 65 B0 FD | 	call	#__system___getiolock_0145
010b4     15 01 68 FC | 	wrlong	#0, result1
010b8     00 2A 06 F6 | 	mov	result1, #0
010bc     62 5F 02 F6 | 	mov	arg02, local46
010c0                 | ' 
010c0                 | ' ''---------- Set the (x,y) position of cursor
010c0                 | ' 
010c0                 | ' cursor_x:=x
010c0     34 0E 06 F1 | 	add	objptr, #52
010c4     07 3F 48 FC | 	wrbyte	#31, objptr
010c8                 | ' cursor_y:=y
010c8     01 0E 06 F1 | 	add	objptr, #1
010cc     07 5F 42 FC | 	wrbyte	arg02, objptr
010d0     35 0E 86 F1 | 	sub	objptr, #53
010d4     00 5C 06 F6 | 	mov	arg01, #0
010d8     04 65 B0 FD | 	call	#__system___getiolock_0145
010dc     15 5D 02 F6 | 	mov	arg01, result1
010e0     B8 4E B0 FD | 	call	#__system___lockmem
010e4     00 2A 06 F6 | 	mov	result1, #0
010e8     04 00 00 FF 
010ec     10 0F 06 F1 | 	add	objptr, ##2320
010f0     07 5F 02 FB | 	rdlong	arg02, objptr
010f4     04 00 00 FF 
010f8     10 0F 86 F1 | 	sub	objptr, ##2320
010fc     00 5C 06 F6 | 	mov	arg01, #0
01100     00 60 06 F6 | 	mov	arg03, #0
01104     0A 62 06 F6 | 	mov	arg04, #10
01108     70 52 B0 FD | 	call	#__system___basic_print_integer
0110c     00 5C 06 F6 | 	mov	arg01, #0
01110     0A 5E 06 F6 | 	mov	arg02, #10
01114     00 60 06 F6 | 	mov	arg03, #0
01118     CC 51 B0 FD | 	call	#__system___basic_print_char
0111c     01 2A 06 F6 | 	mov	result1, #1
01120     00 5C 06 F6 | 	mov	arg01, #0
01124     B8 64 B0 FD | 	call	#__system___getiolock_0145
01128     15 01 68 FC | 	wrlong	#0, result1
0112c     00 2A 06 F6 | 	mov	result1, #0
01130     62 5F 02 F6 | 	mov	arg02, local46
01134                 | ' 
01134                 | ' ''---------- Set the (x,y) position of cursor
01134                 | ' 
01134                 | ' cursor_x:=x
01134     34 0E 06 F1 | 	add	objptr, #52
01138     07 45 48 FC | 	wrbyte	#34, objptr
0113c                 | ' cursor_y:=y
0113c     01 0E 06 F1 | 	add	objptr, #1
01140     07 5F 42 FC | 	wrbyte	arg02, objptr
01144     35 0E 86 F1 | 	sub	objptr, #53
01148     00 5C 06 F6 | 	mov	arg01, #0
0114c     90 64 B0 FD | 	call	#__system___getiolock_0145
01150     15 5D 02 F6 | 	mov	arg01, result1
01154     44 4E B0 FD | 	call	#__system___lockmem
01158     00 2A 06 F6 | 	mov	result1, #0
0115c     04 00 00 FF 
01160     14 0F 06 F1 | 	add	objptr, ##2324
01164     07 5F 02 FB | 	rdlong	arg02, objptr
01168     04 00 00 FF 
0116c     14 0F 86 F1 | 	sub	objptr, ##2324
01170     00 5C 06 F6 | 	mov	arg01, #0
01174     00 60 06 F6 | 	mov	arg03, #0
01178     0A 62 06 F6 | 	mov	arg04, #10
0117c     FC 51 B0 FD | 	call	#__system___basic_print_integer
01180     00 5C 06 F6 | 	mov	arg01, #0
01184     0A 5E 06 F6 | 	mov	arg02, #10
01188     00 60 06 F6 | 	mov	arg03, #0
0118c     58 51 B0 FD | 	call	#__system___basic_print_char
01190     01 2A 06 F6 | 	mov	result1, #1
01194     00 5C 06 F6 | 	mov	arg01, #0
01198     44 64 B0 FD | 	call	#__system___getiolock_0145
0119c     15 01 68 FC | 	wrlong	#0, result1
011a0     00 2A 06 F6 | 	mov	result1, #0
011a4     62 5F 02 F6 | 	mov	arg02, local46
011a8                 | ' 
011a8                 | ' ''---------- Set the (x,y) position of cursor
011a8                 | ' 
011a8                 | ' cursor_x:=x
011a8     34 0E 06 F1 | 	add	objptr, #52
011ac     07 4B 48 FC | 	wrbyte	#37, objptr
011b0                 | ' cursor_y:=y
011b0     01 0E 06 F1 | 	add	objptr, #1
011b4     07 5F 42 FC | 	wrbyte	arg02, objptr
011b8     35 0E 86 F1 | 	sub	objptr, #53
011bc     00 5C 06 F6 | 	mov	arg01, #0
011c0     1C 64 B0 FD | 	call	#__system___getiolock_0145
011c4     15 5D 02 F6 | 	mov	arg01, result1
011c8     D0 4D B0 FD | 	call	#__system___lockmem
011cc     00 2A 06 F6 | 	mov	result1, #0
011d0     04 00 00 FF 
011d4     08 0F 06 F1 | 	add	objptr, ##2312
011d8     07 5F 02 FB | 	rdlong	arg02, objptr
011dc     04 00 00 FF 
011e0     08 0F 86 F1 | 	sub	objptr, ##2312
011e4     00 5C 06 F6 | 	mov	arg01, #0
011e8     00 60 06 F6 | 	mov	arg03, #0
011ec     0A 62 06 F6 | 	mov	arg04, #10
011f0     88 51 B0 FD | 	call	#__system___basic_print_integer
011f4     00 5C 06 F6 | 	mov	arg01, #0
011f8     0A 5E 06 F6 | 	mov	arg02, #10
011fc     00 60 06 F6 | 	mov	arg03, #0
01200     E4 50 B0 FD | 	call	#__system___basic_print_char
01204     01 2A 06 F6 | 	mov	result1, #1
01208     00 5C 06 F6 | 	mov	arg01, #0
0120c     D0 63 B0 FD | 	call	#__system___getiolock_0145
01210     15 01 68 FC | 	wrlong	#0, result1
01214     00 2A 06 F6 | 	mov	result1, #0
01218     62 5F 02 F6 | 	mov	arg02, local46
0121c                 | ' 
0121c                 | ' ''---------- Set the (x,y) position of cursor
0121c                 | ' 
0121c                 | ' cursor_x:=x
0121c     34 0E 06 F1 | 	add	objptr, #52
01220     07 57 48 FC | 	wrbyte	#43, objptr
01224                 | ' cursor_y:=y
01224     01 0E 06 F1 | 	add	objptr, #1
01228     07 5F 42 FC | 	wrbyte	arg02, objptr
0122c     35 0E 86 F1 | 	sub	objptr, #53
01230     00 5C 06 F6 | 	mov	arg01, #0
01234     A8 63 B0 FD | 	call	#__system___getiolock_0145
01238     15 5D 02 F6 | 	mov	arg01, result1
0123c     5C 4D B0 FD | 	call	#__system___lockmem
01240     00 2A 06 F6 | 	mov	result1, #0
01244     04 00 00 FF 
01248     0C 0F 06 F1 | 	add	objptr, ##2316
0124c     07 5F 02 FB | 	rdlong	arg02, objptr
01250     04 00 00 FF 
01254     0C 0F 86 F1 | 	sub	objptr, ##2316
01258     00 5C 06 F6 | 	mov	arg01, #0
0125c     00 60 06 F6 | 	mov	arg03, #0
01260     0A 62 06 F6 | 	mov	arg04, #10
01264     14 51 B0 FD | 	call	#__system___basic_print_integer
01268     00 5C 06 F6 | 	mov	arg01, #0
0126c     0A 5E 06 F6 | 	mov	arg02, #10
01270     00 60 06 F6 | 	mov	arg03, #0
01274     70 50 B0 FD | 	call	#__system___basic_print_char
01278     01 2A 06 F6 | 	mov	result1, #1
0127c     00 5C 06 F6 | 	mov	arg01, #0
01280     5C 63 B0 FD | 	call	#__system___getiolock_0145
01284     15 01 68 FC | 	wrlong	#0, result1
01288     00 2A 06 F6 | 	mov	result1, #0
0128c                 | LR__0013
0128c                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
0128c     10 92 5E F2 | 	cmps	local21, #16 wcz
01290     C4 02 90 CD |  if_b	jmp	#LR__0014
01294     49 C9 02 F6 | 	mov	local48, local21
01298     0B C8 86 F1 | 	sub	local48, #11
0129c     64 5F 02 F6 | 	mov	arg02, local48
012a0                 | ' 
012a0                 | ' ''---------- Set the (x,y) position of cursor
012a0                 | ' 
012a0                 | ' cursor_x:=x
012a0     34 0E 06 F1 | 	add	objptr, #52
012a4     07 73 48 FC | 	wrbyte	#57, objptr
012a8                 | ' cursor_y:=y
012a8     01 0E 06 F1 | 	add	objptr, #1
012ac     07 5F 42 FC | 	wrbyte	arg02, objptr
012b0     49 CB 02 F6 | 	mov	local49, local21
012b4     02 CA 66 F0 | 	shl	local49, #2
012b8     04 00 00 FF 
012bc     17 0E 06 F1 | 	add	objptr, ##2071
012c0     07 CB 02 F1 | 	add	local49, objptr
012c4     00 5C 06 F6 | 	mov	arg01, #0
012c8     04 00 00 FF 
012cc     4C 0E 86 F1 | 	sub	objptr, ##2124
012d0     0C 63 B0 FD | 	call	#__system___getiolock_0145
012d4     15 5D 02 F6 | 	mov	arg01, result1
012d8     C0 4C B0 FD | 	call	#__system___lockmem
012dc     00 2A 06 F6 | 	mov	result1, #0
012e0     65 5F 02 FB | 	rdlong	arg02, local49
012e4     00 5C 06 F6 | 	mov	arg01, #0
012e8     00 60 06 F6 | 	mov	arg03, #0
012ec     44 50 B0 FD | 	call	#__system___basic_print_string
012f0     00 5C 06 F6 | 	mov	arg01, #0
012f4     0A 5E 06 F6 | 	mov	arg02, #10
012f8     00 60 06 F6 | 	mov	arg03, #0
012fc     E8 4F B0 FD | 	call	#__system___basic_print_char
01300     01 2A 06 F6 | 	mov	result1, #1
01304     00 5C 06 F6 | 	mov	arg01, #0
01308     D4 62 B0 FD | 	call	#__system___getiolock_0145
0130c     15 01 68 FC | 	wrlong	#0, result1
01310     00 2A 06 F6 | 	mov	result1, #0
01314     64 5F 02 F6 | 	mov	arg02, local48
01318                 | ' 
01318                 | ' ''---------- Set the (x,y) position of cursor
01318                 | ' 
01318                 | ' cursor_x:=x
01318     34 0E 06 F1 | 	add	objptr, #52
0131c     07 A1 48 FC | 	wrbyte	#80, objptr
01320                 | ' cursor_y:=y
01320     01 0E 06 F1 | 	add	objptr, #1
01324     07 5F 42 FC | 	wrbyte	arg02, objptr
01328     35 0E 86 F1 | 	sub	objptr, #53
0132c     00 5C 06 F6 | 	mov	arg01, #0
01330     AC 62 B0 FD | 	call	#__system___getiolock_0145
01334     15 5D 02 F6 | 	mov	arg01, result1
01338     60 4C B0 FD | 	call	#__system___lockmem
0133c     00 2A 06 F6 | 	mov	result1, #0
01340     04 00 00 FF 
01344     04 0F 06 F1 | 	add	objptr, ##2308
01348     07 5F 02 FB | 	rdlong	arg02, objptr
0134c     04 00 00 FF 
01350     04 0F 86 F1 | 	sub	objptr, ##2308
01354     00 5C 06 F6 | 	mov	arg01, #0
01358     00 60 06 F6 | 	mov	arg03, #0
0135c     0A 62 06 F6 | 	mov	arg04, #10
01360     18 50 B0 FD | 	call	#__system___basic_print_integer
01364     00 5C 06 F6 | 	mov	arg01, #0
01368     0A 5E 06 F6 | 	mov	arg02, #10
0136c     00 60 06 F6 | 	mov	arg03, #0
01370     74 4F B0 FD | 	call	#__system___basic_print_char
01374     01 2A 06 F6 | 	mov	result1, #1
01378     00 5C 06 F6 | 	mov	arg01, #0
0137c     60 62 B0 FD | 	call	#__system___getiolock_0145
01380     15 01 68 FC | 	wrlong	#0, result1
01384     00 2A 06 F6 | 	mov	result1, #0
01388     64 5F 02 F6 | 	mov	arg02, local48
0138c                 | ' 
0138c                 | ' ''---------- Set the (x,y) position of cursor
0138c                 | ' 
0138c                 | ' cursor_x:=x
0138c     34 0E 06 F1 | 	add	objptr, #52
01390     07 AF 48 FC | 	wrbyte	#87, objptr
01394                 | ' cursor_y:=y
01394     01 0E 06 F1 | 	add	objptr, #1
01398     07 5F 42 FC | 	wrbyte	arg02, objptr
0139c     35 0E 86 F1 | 	sub	objptr, #53
013a0     00 5C 06 F6 | 	mov	arg01, #0
013a4     38 62 B0 FD | 	call	#__system___getiolock_0145
013a8     15 5D 02 F6 | 	mov	arg01, result1
013ac     EC 4B B0 FD | 	call	#__system___lockmem
013b0     00 2A 06 F6 | 	mov	result1, #0
013b4     04 00 00 FF 
013b8     10 0F 06 F1 | 	add	objptr, ##2320
013bc     07 5F 02 FB | 	rdlong	arg02, objptr
013c0     04 00 00 FF 
013c4     10 0F 86 F1 | 	sub	objptr, ##2320
013c8     00 5C 06 F6 | 	mov	arg01, #0
013cc     00 60 06 F6 | 	mov	arg03, #0
013d0     0A 62 06 F6 | 	mov	arg04, #10
013d4     A4 4F B0 FD | 	call	#__system___basic_print_integer
013d8     00 5C 06 F6 | 	mov	arg01, #0
013dc     0A 5E 06 F6 | 	mov	arg02, #10
013e0     00 60 06 F6 | 	mov	arg03, #0
013e4     00 4F B0 FD | 	call	#__system___basic_print_char
013e8     01 2A 06 F6 | 	mov	result1, #1
013ec     00 5C 06 F6 | 	mov	arg01, #0
013f0     EC 61 B0 FD | 	call	#__system___getiolock_0145
013f4     15 01 68 FC | 	wrlong	#0, result1
013f8     00 2A 06 F6 | 	mov	result1, #0
013fc     64 5F 02 F6 | 	mov	arg02, local48
01400                 | ' 
01400                 | ' ''---------- Set the (x,y) position of cursor
01400                 | ' 
01400                 | ' cursor_x:=x
01400     34 0E 06 F1 | 	add	objptr, #52
01404     07 B5 48 FC | 	wrbyte	#90, objptr
01408                 | ' cursor_y:=y
01408     01 0E 06 F1 | 	add	objptr, #1
0140c     07 5F 42 FC | 	wrbyte	arg02, objptr
01410     35 0E 86 F1 | 	sub	objptr, #53
01414     00 5C 06 F6 | 	mov	arg01, #0
01418     C4 61 B0 FD | 	call	#__system___getiolock_0145
0141c     15 5D 02 F6 | 	mov	arg01, result1
01420     78 4B B0 FD | 	call	#__system___lockmem
01424     00 2A 06 F6 | 	mov	result1, #0
01428     04 00 00 FF 
0142c     14 0F 06 F1 | 	add	objptr, ##2324
01430     07 5F 02 FB | 	rdlong	arg02, objptr
01434     04 00 00 FF 
01438     14 0F 86 F1 | 	sub	objptr, ##2324
0143c     00 5C 06 F6 | 	mov	arg01, #0
01440     00 60 06 F6 | 	mov	arg03, #0
01444     0A 62 06 F6 | 	mov	arg04, #10
01448     30 4F B0 FD | 	call	#__system___basic_print_integer
0144c     00 5C 06 F6 | 	mov	arg01, #0
01450     0A 5E 06 F6 | 	mov	arg02, #10
01454     00 60 06 F6 | 	mov	arg03, #0
01458     8C 4E B0 FD | 	call	#__system___basic_print_char
0145c     01 2A 06 F6 | 	mov	result1, #1
01460     00 5C 06 F6 | 	mov	arg01, #0
01464     78 61 B0 FD | 	call	#__system___getiolock_0145
01468     15 01 68 FC | 	wrlong	#0, result1
0146c     00 2A 06 F6 | 	mov	result1, #0
01470     64 5F 02 F6 | 	mov	arg02, local48
01474                 | ' 
01474                 | ' ''---------- Set the (x,y) position of cursor
01474                 | ' 
01474                 | ' cursor_x:=x
01474     34 0E 06 F1 | 	add	objptr, #52
01478     07 BB 48 FC | 	wrbyte	#93, objptr
0147c                 | ' cursor_y:=y
0147c     01 0E 06 F1 | 	add	objptr, #1
01480     07 5F 42 FC | 	wrbyte	arg02, objptr
01484     35 0E 86 F1 | 	sub	objptr, #53
01488     00 5C 06 F6 | 	mov	arg01, #0
0148c     50 61 B0 FD | 	call	#__system___getiolock_0145
01490     15 5D 02 F6 | 	mov	arg01, result1
01494     04 4B B0 FD | 	call	#__system___lockmem
01498     00 2A 06 F6 | 	mov	result1, #0
0149c     04 00 00 FF 
014a0     08 0F 06 F1 | 	add	objptr, ##2312
014a4     07 5F 02 FB | 	rdlong	arg02, objptr
014a8     04 00 00 FF 
014ac     08 0F 86 F1 | 	sub	objptr, ##2312
014b0     00 5C 06 F6 | 	mov	arg01, #0
014b4     00 60 06 F6 | 	mov	arg03, #0
014b8     0A 62 06 F6 | 	mov	arg04, #10
014bc     BC 4E B0 FD | 	call	#__system___basic_print_integer
014c0     00 5C 06 F6 | 	mov	arg01, #0
014c4     0A 5E 06 F6 | 	mov	arg02, #10
014c8     00 60 06 F6 | 	mov	arg03, #0
014cc     18 4E B0 FD | 	call	#__system___basic_print_char
014d0     01 2A 06 F6 | 	mov	result1, #1
014d4     00 5C 06 F6 | 	mov	arg01, #0
014d8     04 61 B0 FD | 	call	#__system___getiolock_0145
014dc     15 01 68 FC | 	wrlong	#0, result1
014e0     00 2A 06 F6 | 	mov	result1, #0
014e4     64 5F 02 F6 | 	mov	arg02, local48
014e8                 | ' 
014e8                 | ' ''---------- Set the (x,y) position of cursor
014e8                 | ' 
014e8                 | ' cursor_x:=x
014e8     34 0E 06 F1 | 	add	objptr, #52
014ec     07 C7 48 FC | 	wrbyte	#99, objptr
014f0                 | ' cursor_y:=y
014f0     01 0E 06 F1 | 	add	objptr, #1
014f4     07 5F 42 FC | 	wrbyte	arg02, objptr
014f8     35 0E 86 F1 | 	sub	objptr, #53
014fc     00 5C 06 F6 | 	mov	arg01, #0
01500     DC 60 B0 FD | 	call	#__system___getiolock_0145
01504     15 5D 02 F6 | 	mov	arg01, result1
01508     90 4A B0 FD | 	call	#__system___lockmem
0150c     00 2A 06 F6 | 	mov	result1, #0
01510     04 00 00 FF 
01514     0C 0F 06 F1 | 	add	objptr, ##2316
01518     07 5F 02 FB | 	rdlong	arg02, objptr
0151c     04 00 00 FF 
01520     0C 0F 86 F1 | 	sub	objptr, ##2316
01524     00 5C 06 F6 | 	mov	arg01, #0
01528     00 60 06 F6 | 	mov	arg03, #0
0152c     0A 62 06 F6 | 	mov	arg04, #10
01530     48 4E B0 FD | 	call	#__system___basic_print_integer
01534     00 5C 06 F6 | 	mov	arg01, #0
01538     0A 5E 06 F6 | 	mov	arg02, #10
0153c     00 60 06 F6 | 	mov	arg03, #0
01540     A4 4D B0 FD | 	call	#__system___basic_print_char
01544     01 2A 06 F6 | 	mov	result1, #1
01548     00 5C 06 F6 | 	mov	arg01, #0
0154c     90 60 B0 FD | 	call	#__system___getiolock_0145
01550     15 01 68 FC | 	wrlong	#0, result1
01554     00 2A 06 F6 | 	mov	result1, #0
01558                 | LR__0014
01558     01 92 06 F1 | 	add	local21, #1
0155c     1E AE 06 F1 | 	add	local35, #30
01560     04 B0 06 F1 | 	add	local36, #4
01564     1E B2 06 F1 | 	add	local37, #30
01568     EC F8 9F FD | 	jmp	#LR__0010
0156c                 | LR__0015
0156c                 | ' print
0156c     00 5C 06 F6 | 	mov	arg01, #0
01570     6C 60 B0 FD | 	call	#__system___getiolock_0145
01574     15 5D 02 F6 | 	mov	arg01, result1
01578     20 4A B0 FD | 	call	#__system___lockmem
0157c     00 2A 06 F6 | 	mov	result1, #0
01580     00 5C 06 F6 | 	mov	arg01, #0
01584     0A 5E 06 F6 | 	mov	arg02, #10
01588     00 60 06 F6 | 	mov	arg03, #0
0158c     58 4D B0 FD | 	call	#__system___basic_print_char
01590     01 2A 06 F6 | 	mov	result1, #1
01594     00 5C 06 F6 | 	mov	arg01, #0
01598     44 60 B0 FD | 	call	#__system___getiolock_0145
0159c     15 01 68 FC | 	wrlong	#0, result1
015a0     03 00 00 FF 
015a4     2C 0F 06 F1 | 	add	objptr, ##1836
015a8     03 00 00 FF 
015ac     DC 16 06 F1 | 	add	ptr__audio010_spin2_dat__, ##1756
015b0                 | ' 
015b0                 | ' 
015b0                 | ' channel1[0]:=@null
015b0     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
015b4                 | ' channel1[1]:=0
015b4     04 0E 06 F1 | 	add	objptr, #4
015b8     07 01 68 FC | 	wrlong	#0, objptr
015bc                 | ' channel1[2]:=0
015bc     04 0E 06 F1 | 	add	objptr, #4
015c0     07 01 68 FC | 	wrlong	#0, objptr
015c4                 | ' channel1[3]:=2
015c4     04 0E 06 F1 | 	add	objptr, #4
015c8     07 05 68 FC | 	wrlong	#2, objptr
015cc                 | ' channel1[4]:=0
015cc     04 0E 06 F1 | 	add	objptr, #4
015d0     07 01 68 FC | 	wrlong	#0, objptr
015d4                 | ' channel1[5]:=8192
015d4     04 0E 06 F1 | 	add	objptr, #4
015d8     10 00 80 FF 
015dc     07 01 68 FC | 	wrlong	##8192, objptr
015e0                 | ' channel1[6]:=101
015e0     04 0E 06 F1 | 	add	objptr, #4
015e4     07 CB 68 FC | 	wrlong	#101, objptr
015e8                 | ' channel1[7]:=2
015e8     04 0E 06 F1 | 	add	objptr, #4
015ec     07 05 68 FC | 	wrlong	#2, objptr
015f0                 | ' 
015f0                 | ' channel2[0]:=@null
015f0     08 0E 06 F1 | 	add	objptr, #8
015f4     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
015f8                 | ' channel2[1]:=0
015f8     04 0E 06 F1 | 	add	objptr, #4
015fc     07 01 68 FC | 	wrlong	#0, objptr
01600                 | ' channel2[2]:=0
01600     04 0E 06 F1 | 	add	objptr, #4
01604     07 01 68 FC | 	wrlong	#0, objptr
01608                 | ' channel2[3]:=2
01608     04 0E 06 F1 | 	add	objptr, #4
0160c     07 05 68 FC | 	wrlong	#2, objptr
01610                 | ' channel2[4]:=0
01610     04 0E 06 F1 | 	add	objptr, #4
01614     07 01 68 FC | 	wrlong	#0, objptr
01618                 | ' channel2[5]:=8192
01618     04 0E 06 F1 | 	add	objptr, #4
0161c     10 00 80 FF 
01620     07 01 68 FC | 	wrlong	##8192, objptr
01624                 | ' channel2[6]:=103
01624     04 0E 06 F1 | 	add	objptr, #4
01628     07 CF 68 FC | 	wrlong	#103, objptr
0162c                 | ' channel2[7]:=2
0162c     04 0E 06 F1 | 	add	objptr, #4
01630     07 05 68 FC | 	wrlong	#2, objptr
01634                 | ' 
01634                 | ' channel3[0]:=@null
01634     08 0E 06 F1 | 	add	objptr, #8
01638     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
0163c                 | ' channel3[1]:=0
0163c     04 0E 06 F1 | 	add	objptr, #4
01640     07 01 68 FC | 	wrlong	#0, objptr
01644                 | ' channel3[2]:=0
01644     04 0E 06 F1 | 	add	objptr, #4
01648     07 01 68 FC | 	wrlong	#0, objptr
0164c                 | ' channel3[3]:=2
0164c     04 0E 06 F1 | 	add	objptr, #4
01650     07 05 68 FC | 	wrlong	#2, objptr
01654                 | ' channel3[4]:=0
01654     04 0E 06 F1 | 	add	objptr, #4
01658     07 01 68 FC | 	wrlong	#0, objptr
0165c                 | ' channel3[5]:=8192
0165c     04 0E 06 F1 | 	add	objptr, #4
01660     10 00 80 FF 
01664     07 01 68 FC | 	wrlong	##8192, objptr
01668                 | ' channel3[6]:=107
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     07 D7 68 FC | 	wrlong	#107, objptr
01670                 | ' channel3[7]:=2
01670     04 0E 06 F1 | 	add	objptr, #4
01674     07 05 68 FC | 	wrlong	#2, objptr
01678                 | ' 
01678                 | ' channel4[0]:=@null
01678     08 0E 06 F1 | 	add	objptr, #8
0167c     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
01680                 | ' channel4[1]:=0
01680     04 0E 06 F1 | 	add	objptr, #4
01684     07 01 68 FC | 	wrlong	#0, objptr
01688                 | ' channel4[2]:=0
01688     04 0E 06 F1 | 	add	objptr, #4
0168c     07 01 68 FC | 	wrlong	#0, objptr
01690                 | ' channel4[3]:=2
01690     04 0E 06 F1 | 	add	objptr, #4
01694     07 05 68 FC | 	wrlong	#2, objptr
01698                 | ' channel4[4]:=0
01698     04 0E 06 F1 | 	add	objptr, #4
0169c     07 01 68 FC | 	wrlong	#0, objptr
016a0                 | ' channel4[5]:=8192
016a0     04 0E 06 F1 | 	add	objptr, #4
016a4     10 00 80 FF 
016a8     07 01 68 FC | 	wrlong	##8192, objptr
016ac                 | ' channel4[6]:=109
016ac     04 0E 06 F1 | 	add	objptr, #4
016b0     07 DB 68 FC | 	wrlong	#109, objptr
016b4                 | ' channel4[7]:=2
016b4     04 0E 06 F1 | 	add	objptr, #4
016b8     07 05 68 FC | 	wrlong	#2, objptr
016bc                 | ' channel4[8]:=1
016bc     04 0E 06 F1 | 	add	objptr, #4
016c0     07 03 68 FC | 	wrlong	#1, objptr
016c4                 | ' 
016c4                 | ' channel5[0]:=@null
016c4     04 0E 06 F1 | 	add	objptr, #4
016c8     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
016cc                 | ' channel5[1]:=0
016cc     04 0E 06 F1 | 	add	objptr, #4
016d0     07 01 68 FC | 	wrlong	#0, objptr
016d4                 | ' channel5[2]:=0
016d4     04 0E 06 F1 | 	add	objptr, #4
016d8     07 01 68 FC | 	wrlong	#0, objptr
016dc                 | ' channel5[3]:=2
016dc     04 0E 06 F1 | 	add	objptr, #4
016e0     07 05 68 FC | 	wrlong	#2, objptr
016e4                 | ' channel5[4]:=0
016e4     04 0E 06 F1 | 	add	objptr, #4
016e8     07 01 68 FC | 	wrlong	#0, objptr
016ec                 | ' channel5[5]:=8192
016ec     04 0E 06 F1 | 	add	objptr, #4
016f0     10 00 80 FF 
016f4     07 01 68 FC | 	wrlong	##8192, objptr
016f8                 | ' channel5[6]:=113
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     07 E3 68 FC | 	wrlong	#113, objptr
01700                 | ' channel5[7]:=2
01700     04 0E 06 F1 | 	add	objptr, #4
01704     07 05 68 FC | 	wrlong	#2, objptr
01708                 | ' 
01708                 | ' channel6[0]:=@null
01708     08 0E 06 F1 | 	add	objptr, #8
0170c     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
01710                 | ' channel6[1]:=0
01710     04 0E 06 F1 | 	add	objptr, #4
01714     07 01 68 FC | 	wrlong	#0, objptr
01718                 | ' channel6[2]:=0
01718     04 0E 06 F1 | 	add	objptr, #4
0171c     07 01 68 FC | 	wrlong	#0, objptr
01720                 | ' channel6[3]:=2
01720     04 0E 06 F1 | 	add	objptr, #4
01724     07 05 68 FC | 	wrlong	#2, objptr
01728                 | ' channel6[4]:=0
01728     04 0E 06 F1 | 	add	objptr, #4
0172c     07 01 68 FC | 	wrlong	#0, objptr
01730                 | ' channel6[5]:=8192
01730     04 0E 06 F1 | 	add	objptr, #4
01734     10 00 80 FF 
01738     07 01 68 FC | 	wrlong	##8192, objptr
0173c                 | ' channel6[6]:=127
0173c     04 0E 06 F1 | 	add	objptr, #4
01740     07 FF 68 FC | 	wrlong	#127, objptr
01744                 | ' channel6[7]:=2
01744     04 0E 06 F1 | 	add	objptr, #4
01748     07 05 68 FC | 	wrlong	#2, objptr
0174c                 | ' 
0174c                 | ' channel7[0]:=@null
0174c     08 0E 06 F1 | 	add	objptr, #8
01750     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
01754                 | ' channel7[1]:=0
01754     04 0E 06 F1 | 	add	objptr, #4
01758     07 01 68 FC | 	wrlong	#0, objptr
0175c                 | ' channel7[2]:=0
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 01 68 FC | 	wrlong	#0, objptr
01764                 | ' channel7[3]:=2
01764     04 0E 06 F1 | 	add	objptr, #4
01768     07 05 68 FC | 	wrlong	#2, objptr
0176c                 | ' channel7[4]:=0
0176c     04 0E 06 F1 | 	add	objptr, #4
01770     07 01 68 FC | 	wrlong	#0, objptr
01774                 | ' channel7[5]:=8192
01774     04 0E 06 F1 | 	add	objptr, #4
01778     10 00 80 FF 
0177c     07 01 68 FC | 	wrlong	##8192, objptr
01780                 | ' channel7[6]:=131
01780     04 0E 06 F1 | 	add	objptr, #4
01784     07 07 69 FC | 	wrlong	#131, objptr
01788                 | ' channel7[7]:=2
01788     04 0E 06 F1 | 	add	objptr, #4
0178c     07 05 68 FC | 	wrlong	#2, objptr
01790                 | ' 
01790                 | ' channel8[0]:=@null
01790     08 0E 06 F1 | 	add	objptr, #8
01794     07 17 62 FC | 	wrlong	ptr__audio010_spin2_dat__, objptr
01798                 | ' channel8[1]:=0
01798     04 0E 06 F1 | 	add	objptr, #4
0179c     07 01 68 FC | 	wrlong	#0, objptr
017a0                 | ' channel8[2]:=0
017a0     04 0E 06 F1 | 	add	objptr, #4
017a4     07 01 68 FC | 	wrlong	#0, objptr
017a8                 | ' channel8[3]:=2
017a8     04 0E 06 F1 | 	add	objptr, #4
017ac     07 05 68 FC | 	wrlong	#2, objptr
017b0                 | ' channel8[4]:=0
017b0     04 0E 06 F1 | 	add	objptr, #4
017b4     07 01 68 FC | 	wrlong	#0, objptr
017b8                 | ' channel8[5]:=8192
017b8     04 0E 06 F1 | 	add	objptr, #4
017bc     10 00 80 FF 
017c0     07 01 68 FC | 	wrlong	##8192, objptr
017c4                 | ' channel8[6]:=137
017c4     04 0E 06 F1 | 	add	objptr, #4
017c8     07 13 69 FC | 	wrlong	#137, objptr
017cc                 | ' channel8[7]:=2
017cc     04 0E 06 F1 | 	add	objptr, #4
017d0     07 05 68 FC | 	wrlong	#2, objptr
017d4                 | ' 
017d4                 | ' channel1[8]:=1
017d4     F8 0E 86 F1 | 	sub	objptr, #248
017d8     07 03 68 FC | 	wrlong	#1, objptr
017dc                 | ' channel2[8]:=1
017dc     24 0E 06 F1 | 	add	objptr, #36
017e0     07 03 68 FC | 	wrlong	#1, objptr
017e4                 | ' channel3[8]:=1
017e4     24 0E 06 F1 | 	add	objptr, #36
017e8     07 03 68 FC | 	wrlong	#1, objptr
017ec                 | ' channel4[8]:=1
017ec     24 0E 06 F1 | 	add	objptr, #36
017f0     07 03 68 FC | 	wrlong	#1, objptr
017f4                 | ' channel5[8]:=1
017f4     24 0E 06 F1 | 	add	objptr, #36
017f8     07 03 68 FC | 	wrlong	#1, objptr
017fc                 | ' channel6[8]:=1
017fc     24 0E 06 F1 | 	add	objptr, #36
01800     07 03 68 FC | 	wrlong	#1, objptr
01804                 | ' channel7[8]:=1
01804     24 0E 06 F1 | 	add	objptr, #36
01808     07 03 68 FC | 	wrlong	#1, objptr
0180c                 | ' channel8[8]:=1
0180c     24 0E 06 F1 | 	add	objptr, #36
01810     07 03 68 FC | 	wrlong	#1, objptr
01814     1C 0F 86 F1 | 	sub	objptr, #284
01818                 | ' 
01818                 | ' cog:=coginit(16,@audio,@channel1)
01818     03 00 00 FF 
0181c     DC 16 86 F1 | 	sub	ptr__audio010_spin2_dat__, ##1756
01820     0B 5F 02 F6 | 	mov	arg02, ptr__audio010_spin2_dat__
01824     07 61 02 F6 | 	mov	arg03, objptr
01828     10 5C 06 F6 | 	mov	arg01, #16
0182c     28 60 62 FD | 	setq	arg03
01830     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01834     01 5C 66 C6 |  if_b	neg	arg01, #1
01838     2E 2B 02 F6 | 	mov	result1, arg01
0183c                 | ' return cog
0183c     B0 0F 06 F1 | 	add	objptr, #432
01840     07 01 68 FC | 	wrlong	#0, objptr
01844     04 0E 06 F1 | 	add	objptr, #4
01848     07 01 68 FC | 	wrlong	#0, objptr
0184c     04 0E 06 F1 | 	add	objptr, #4
01850     07 01 68 FC | 	wrlong	#0, objptr
01854     04 0E 06 F1 | 	add	objptr, #4
01858     07 01 68 FC | 	wrlong	#0, objptr
0185c     04 00 00 FF 
01860     E8 0E 86 F1 | 	sub	objptr, ##2280
01864                 | ' getinfo(ma,samples)
01864                 | ' 
01864                 | ' paula.start
01864                 | ' 
01864                 | ' old1=0 : old2=0 :old3=0 : old4=0
01864                 | ' 
01864                 | ' do
01864                 | LR__0016
01864                 | ' 
01864                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01864                 | ' 
01864                 | ' repeat i from 1 to amount
01864     01 CC 06 F6 | 	mov	local50, #1
01868                 | LR__0017
01868                 | '   repeat until vblank==0
01868                 | LR__0018
01868     40 0E 06 F1 | 	add	objptr, #64
0186c     07 CF 0A FB | 	rdlong	local51, objptr wz
01870     40 0E 86 F1 | 	sub	objptr, #64
01874     0C 00 90 AD |  if_e	jmp	#LR__0019
01878                 | '     waitus(100)
01878     64 5C 06 F6 | 	mov	arg01, #100
0187c     60 49 B0 FD | 	call	#__system___waitus
01880     E4 FF 9F FD | 	jmp	#LR__0018
01884                 | LR__0019
01884                 | '   repeat until vblank==1
01884                 | LR__0020
01884     40 0E 06 F1 | 	add	objptr, #64
01888     07 CF 02 FB | 	rdlong	local51, objptr
0188c     40 0E 86 F1 | 	sub	objptr, #64
01890     01 CE 0E F2 | 	cmp	local51, #1 wz
01894     0C 00 90 AD |  if_e	jmp	#LR__0021
01898                 | '     waitus(100)
01898     64 5C 06 F6 | 	mov	arg01, #100
0189c     40 49 B0 FD | 	call	#__system___waitus
018a0     E0 FF 9F FD | 	jmp	#LR__0020
018a4                 | LR__0021
018a4     F0 CD 6E FB | 	djnz	local50, #LR__0017
018a8     02 00 00 FF 
018ac     30 0F 06 F1 | 	add	objptr, ##1328
018b0     20 29 B0 FD | 	call	#_trackerplayer_spin2_tick
018b4     A7 0E 06 F1 | 	add	objptr, #167
018b8     07 7D 02 FB | 	rdlong	local10, objptr
018bc     55 0F 06 F1 | 	add	objptr, #341
018c0     07 7D 62 FC | 	wrlong	local10, objptr
018c4     04 0E 06 F1 | 	add	objptr, #4
018c8     07 03 68 FC | 	wrlong	#1, objptr
018cc     45 0F 86 F1 | 	sub	objptr, #325
018d0     07 7D E2 FA | 	rdword	local10, objptr
018d4     08 0E 06 F1 | 	add	objptr, #8
018d8     07 D1 02 FB | 	rdlong	local52, objptr
018dc     68 7D 82 F1 | 	sub	local10, local52
018e0     41 0F 06 F1 | 	add	objptr, #321
018e4     07 7D 62 FC | 	wrlong	local10, objptr
018e8     49 0F 86 F1 | 	sub	objptr, #329
018ec     07 7D E2 FA | 	rdword	local10, objptr
018f0     4D 0F 06 F1 | 	add	objptr, #333
018f4     07 7D 62 FC | 	wrlong	local10, objptr
018f8     09 0F 86 F1 | 	sub	objptr, #265
018fc     07 D3 02 FB | 	rdlong	local53, objptr
01900     10 0E 06 F1 | 	add	objptr, #16
01904     07 D1 02 FB | 	rdlong	local52, objptr
01908     68 D3 02 F1 | 	add	local53, local52
0190c     07 D2 66 F0 | 	shl	local53, #7
01910     FD 0E 06 F1 | 	add	objptr, #253
01914     07 D3 62 FC | 	wrlong	local53, objptr
01918     04 0E 06 F1 | 	add	objptr, #4
0191c     0C 00 80 FF 
01920     07 01 68 FC | 	wrlong	##6144, objptr
01924     31 0F 86 F1 | 	sub	objptr, #305
01928     07 7D 02 FB | 	rdlong	local10, objptr
0192c     10 0E 06 F1 | 	add	objptr, #16
01930     07 D1 02 FB | 	rdlong	local52, objptr
01934     68 7D 02 F1 | 	add	local10, local52
01938     25 0F 06 F1 | 	add	objptr, #293
0193c     07 7D 62 FC | 	wrlong	local10, objptr
01940     04 0E 06 F1 | 	add	objptr, #4
01944     07 03 68 FC | 	wrlong	#1, objptr
01948                 | ' 
01948                 | '     waitvbl
01948                 | '     tracker.tick
01948                 | '     
01948                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01948                 | ' 	paula.channel1(1)=1
01948                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01948                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01948                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*128
01948                 | ' 	paula.channel1(5)=8192-2048
01948                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01948                 | ' 	paula.channel1(7)=1
01948                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus 10 : paula.channel1(8)=1 :old1=tracker.trigger(0)
01948     22 0E 86 F1 | 	sub	objptr, #34
0194c     07 7D C2 FA | 	rdbyte	local10, objptr
01950     B6 0F 06 F1 | 	add	objptr, #438
01954     07 D1 02 FB | 	rdlong	local52, objptr
01958     04 00 00 FF 
0195c     DC 0E 86 F1 | 	sub	objptr, ##2268
01960     68 7D 0A F2 | 	cmp	local10, local52 wz
01964     40 00 90 AD |  if_e	jmp	#LR__0022
01968     03 00 00 FF 
0196c     4C 0F 06 F1 | 	add	objptr, ##1868
01970     07 01 68 FC | 	wrlong	#0, objptr
01974     03 00 00 FF 
01978     4C 0F 86 F1 | 	sub	objptr, ##1868
0197c     0A 5C 06 F6 | 	mov	arg01, #10
01980     5C 48 B0 FD | 	call	#__system___waitus
01984     03 00 00 FF 
01988     4C 0F 06 F1 | 	add	objptr, ##1868
0198c     07 03 68 FC | 	wrlong	#1, objptr
01990     26 0E 86 F1 | 	sub	objptr, #38
01994     07 7D C2 FA | 	rdbyte	local10, objptr
01998     B6 0F 06 F1 | 	add	objptr, #438
0199c     07 7D 62 FC | 	wrlong	local10, objptr
019a0     04 00 00 FF 
019a4     DC 0E 86 F1 | 	sub	objptr, ##2268
019a8                 | LR__0022
019a8     03 00 00 FF 
019ac     50 0F 06 F1 | 	add	objptr, ##1872
019b0     07 7D 02 FB | 	rdlong	local10, objptr
019b4     9C 0F 06 F1 | 	add	objptr, #412
019b8     07 7D 62 FC | 	wrlong	local10, objptr
019bc     01 00 00 FF 
019c0     11 0F 86 F1 | 	sub	objptr, ##785
019c4     07 7D 02 FB | 	rdlong	local10, objptr
019c8     75 0F 06 F1 | 	add	objptr, #373
019cc     07 7D 62 FC | 	wrlong	local10, objptr
019d0     04 0E 06 F1 | 	add	objptr, #4
019d4     07 03 68 FC | 	wrlong	#1, objptr
019d8     67 0F 86 F1 | 	sub	objptr, #359
019dc     07 7D E2 FA | 	rdword	local10, objptr
019e0     0A 0E 06 F1 | 	add	objptr, #10
019e4     07 D1 02 FB | 	rdlong	local52, objptr
019e8     68 7D 82 F1 | 	sub	local10, local52
019ec     61 0F 06 F1 | 	add	objptr, #353
019f0     07 7D 62 FC | 	wrlong	local10, objptr
019f4     6B 0F 86 F1 | 	sub	objptr, #363
019f8     07 7D E2 FA | 	rdword	local10, objptr
019fc     6F 0F 06 F1 | 	add	objptr, #367
01a00     07 7D 62 FC | 	wrlong	local10, objptr
01a04     29 0F 86 F1 | 	sub	objptr, #297
01a08     07 D3 02 FB | 	rdlong	local53, objptr
01a0c     10 0E 06 F1 | 	add	objptr, #16
01a10     07 D1 02 FB | 	rdlong	local52, objptr
01a14     68 D3 02 F1 | 	add	local53, local52
01a18     07 D2 66 F0 | 	shl	local53, #7
01a1c     1D 0F 06 F1 | 	add	objptr, #285
01a20     07 D3 62 FC | 	wrlong	local53, objptr
01a24     04 0E 06 F1 | 	add	objptr, #4
01a28     14 00 80 FF 
01a2c     07 01 68 FC | 	wrlong	##10240, objptr
01a30     51 0F 86 F1 | 	sub	objptr, #337
01a34     07 7D 02 FB | 	rdlong	local10, objptr
01a38     10 0E 06 F1 | 	add	objptr, #16
01a3c     07 D1 02 FB | 	rdlong	local52, objptr
01a40     68 7D 02 F1 | 	add	local10, local52
01a44     45 0F 06 F1 | 	add	objptr, #325
01a48     07 7D 62 FC | 	wrlong	local10, objptr
01a4c     04 0E 06 F1 | 	add	objptr, #4
01a50     07 03 68 FC | 	wrlong	#1, objptr
01a54                 | ' 
01a54                 | '     old12=paula.channel2(0)
01a54                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01a54                 | ' 	paula.channel2(1)=1
01a54                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01a54                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01a54                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*128
01a54                 | ' 	paula.channel2(5)=8192+2048
01a54                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01a54                 | ' 	paula.channel2(7)=1
01a54                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus 10 : paula.channel2(8)=1 :old2=tracker.trigger(1)
01a54     45 0E 86 F1 | 	sub	objptr, #69
01a58     07 7D C2 FA | 	rdbyte	local10, objptr
01a5c     B9 0F 06 F1 | 	add	objptr, #441
01a60     07 D1 02 FB | 	rdlong	local52, objptr
01a64     04 00 00 FF 
01a68     E0 0E 86 F1 | 	sub	objptr, ##2272
01a6c     68 7D 0A F2 | 	cmp	local10, local52 wz
01a70     40 00 90 AD |  if_e	jmp	#LR__0023
01a74     03 00 00 FF 
01a78     70 0F 06 F1 | 	add	objptr, ##1904
01a7c     07 01 68 FC | 	wrlong	#0, objptr
01a80     03 00 00 FF 
01a84     70 0F 86 F1 | 	sub	objptr, ##1904
01a88     0A 5C 06 F6 | 	mov	arg01, #10
01a8c     50 47 B0 FD | 	call	#__system___waitus
01a90     03 00 00 FF 
01a94     70 0F 06 F1 | 	add	objptr, ##1904
01a98     07 03 68 FC | 	wrlong	#1, objptr
01a9c     49 0E 86 F1 | 	sub	objptr, #73
01aa0     07 7D C2 FA | 	rdbyte	local10, objptr
01aa4     B9 0F 06 F1 | 	add	objptr, #441
01aa8     07 7D 62 FC | 	wrlong	local10, objptr
01aac     04 00 00 FF 
01ab0     E0 0E 86 F1 | 	sub	objptr, ##2272
01ab4                 | LR__0023
01ab4     03 00 00 FF 
01ab8     74 0F 06 F1 | 	add	objptr, ##1908
01abc     07 7D 02 FB | 	rdlong	local10, objptr
01ac0     7C 0F 06 F1 | 	add	objptr, #380
01ac4     07 7D 62 FC | 	wrlong	local10, objptr
01ac8     01 00 00 FF 
01acc     11 0F 86 F1 | 	sub	objptr, ##785
01ad0     07 7D 02 FB | 	rdlong	local10, objptr
01ad4     95 0F 06 F1 | 	add	objptr, #405
01ad8     07 7D 62 FC | 	wrlong	local10, objptr
01adc     04 0E 06 F1 | 	add	objptr, #4
01ae0     07 03 68 FC | 	wrlong	#1, objptr
01ae4     89 0F 86 F1 | 	sub	objptr, #393
01ae8     07 7D E2 FA | 	rdword	local10, objptr
01aec     0C 0E 06 F1 | 	add	objptr, #12
01af0     07 D1 02 FB | 	rdlong	local52, objptr
01af4     68 7D 82 F1 | 	sub	local10, local52
01af8     81 0F 06 F1 | 	add	objptr, #385
01afc     07 7D 62 FC | 	wrlong	local10, objptr
01b00     8D 0F 86 F1 | 	sub	objptr, #397
01b04     07 7D E2 FA | 	rdword	local10, objptr
01b08     91 0F 06 F1 | 	add	objptr, #401
01b0c     07 7D 62 FC | 	wrlong	local10, objptr
01b10     49 0F 86 F1 | 	sub	objptr, #329
01b14     07 D3 02 FB | 	rdlong	local53, objptr
01b18     10 0E 06 F1 | 	add	objptr, #16
01b1c     07 D1 02 FB | 	rdlong	local52, objptr
01b20     68 D3 02 F1 | 	add	local53, local52
01b24     07 D2 66 F0 | 	shl	local53, #7
01b28     3D 0F 06 F1 | 	add	objptr, #317
01b2c     07 D3 62 FC | 	wrlong	local53, objptr
01b30     04 0E 06 F1 | 	add	objptr, #4
01b34     14 00 80 FF 
01b38     07 01 68 FC | 	wrlong	##10240, objptr
01b3c     71 0F 86 F1 | 	sub	objptr, #369
01b40     07 7D 02 FB | 	rdlong	local10, objptr
01b44     10 0E 06 F1 | 	add	objptr, #16
01b48     07 D1 02 FB | 	rdlong	local52, objptr
01b4c     68 7D 02 F1 | 	add	local10, local52
01b50     65 0F 06 F1 | 	add	objptr, #357
01b54     07 7D 62 FC | 	wrlong	local10, objptr
01b58     04 0E 06 F1 | 	add	objptr, #4
01b5c     07 03 68 FC | 	wrlong	#1, objptr
01b60                 | ' 
01b60                 | '     old13=paula.channel3(0)
01b60                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01b60                 | ' 	paula.channel3(1)=1
01b60                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01b60                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01b60                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*128
01b60                 | ' 	paula.channel3(5)=8192+2048
01b60                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01b60                 | ' 	paula.channel3(7)=1
01b60                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus 10 : paula.channel3(8)=1 :old3=tracker.trigger(2)
01b60     68 0E 86 F1 | 	sub	objptr, #104
01b64     07 7D C2 FA | 	rdbyte	local10, objptr
01b68     BC 0F 06 F1 | 	add	objptr, #444
01b6c     07 D1 02 FB | 	rdlong	local52, objptr
01b70     04 00 00 FF 
01b74     E4 0E 86 F1 | 	sub	objptr, ##2276
01b78     68 7D 0A F2 | 	cmp	local10, local52 wz
01b7c     40 00 90 AD |  if_e	jmp	#LR__0024
01b80     03 00 00 FF 
01b84     94 0F 06 F1 | 	add	objptr, ##1940
01b88     07 01 68 FC | 	wrlong	#0, objptr
01b8c     03 00 00 FF 
01b90     94 0F 86 F1 | 	sub	objptr, ##1940
01b94     0A 5C 06 F6 | 	mov	arg01, #10
01b98     44 46 B0 FD | 	call	#__system___waitus
01b9c     03 00 00 FF 
01ba0     94 0F 06 F1 | 	add	objptr, ##1940
01ba4     07 03 68 FC | 	wrlong	#1, objptr
01ba8     6C 0E 86 F1 | 	sub	objptr, #108
01bac     07 7D C2 FA | 	rdbyte	local10, objptr
01bb0     BC 0F 06 F1 | 	add	objptr, #444
01bb4     07 7D 62 FC | 	wrlong	local10, objptr
01bb8     04 00 00 FF 
01bbc     E4 0E 86 F1 | 	sub	objptr, ##2276
01bc0                 | LR__0024
01bc0     03 00 00 FF 
01bc4     98 0F 06 F1 | 	add	objptr, ##1944
01bc8     07 7D 02 FB | 	rdlong	local10, objptr
01bcc     5C 0F 06 F1 | 	add	objptr, #348
01bd0     07 7D 62 FC | 	wrlong	local10, objptr
01bd4     01 00 00 FF 
01bd8     11 0F 86 F1 | 	sub	objptr, ##785
01bdc     07 7D 02 FB | 	rdlong	local10, objptr
01be0     B5 0F 06 F1 | 	add	objptr, #437
01be4     07 7D 62 FC | 	wrlong	local10, objptr
01be8     04 0E 06 F1 | 	add	objptr, #4
01bec     07 03 68 FC | 	wrlong	#1, objptr
01bf0     AB 0F 86 F1 | 	sub	objptr, #427
01bf4     07 7D E2 FA | 	rdword	local10, objptr
01bf8     0E 0E 06 F1 | 	add	objptr, #14
01bfc     07 D1 02 FB | 	rdlong	local52, objptr
01c00     68 7D 82 F1 | 	sub	local10, local52
01c04     A1 0F 06 F1 | 	add	objptr, #417
01c08     07 7D 62 FC | 	wrlong	local10, objptr
01c0c     AF 0F 86 F1 | 	sub	objptr, #431
01c10     07 7D E2 FA | 	rdword	local10, objptr
01c14     B3 0F 06 F1 | 	add	objptr, #435
01c18     07 7D 62 FC | 	wrlong	local10, objptr
01c1c     69 0F 86 F1 | 	sub	objptr, #361
01c20     07 D3 02 FB | 	rdlong	local53, objptr
01c24     10 0E 06 F1 | 	add	objptr, #16
01c28     07 D1 02 FB | 	rdlong	local52, objptr
01c2c     68 D3 02 F1 | 	add	local53, local52
01c30     07 D2 66 F0 | 	shl	local53, #7
01c34     5D 0F 06 F1 | 	add	objptr, #349
01c38     07 D3 62 FC | 	wrlong	local53, objptr
01c3c     04 0E 06 F1 | 	add	objptr, #4
01c40     0C 00 80 FF 
01c44     07 01 68 FC | 	wrlong	##6144, objptr
01c48     91 0F 86 F1 | 	sub	objptr, #401
01c4c     07 7D 02 FB | 	rdlong	local10, objptr
01c50     10 0E 06 F1 | 	add	objptr, #16
01c54     07 D1 02 FB | 	rdlong	local52, objptr
01c58     68 7D 02 F1 | 	add	local10, local52
01c5c     85 0F 06 F1 | 	add	objptr, #389
01c60     07 7D 62 FC | 	wrlong	local10, objptr
01c64     04 0E 06 F1 | 	add	objptr, #4
01c68     07 03 68 FC | 	wrlong	#1, objptr
01c6c                 | ' 
01c6c                 | '     old14=paula.channel4(0)    
01c6c                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01c6c                 | ' 	paula.channel4(1)=1
01c6c                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01c6c                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01c6c                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*128
01c6c                 | ' 	paula.channel4(5)=8192-2048
01c6c                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01c6c                 | ' 	paula.channel4(7)=1
01c6c                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus 10 : paula.channel4(8)=1 :old4=tracker.trigger(3)
01c6c     8B 0E 86 F1 | 	sub	objptr, #139
01c70     07 7D C2 FA | 	rdbyte	local10, objptr
01c74     BF 0F 06 F1 | 	add	objptr, #447
01c78     07 D1 02 FB | 	rdlong	local52, objptr
01c7c     04 00 00 FF 
01c80     E8 0E 86 F1 | 	sub	objptr, ##2280
01c84     68 7D 0A F2 | 	cmp	local10, local52 wz
01c88     40 00 90 AD |  if_e	jmp	#LR__0025
01c8c     03 00 00 FF 
01c90     B8 0F 06 F1 | 	add	objptr, ##1976
01c94     07 01 68 FC | 	wrlong	#0, objptr
01c98     03 00 00 FF 
01c9c     B8 0F 86 F1 | 	sub	objptr, ##1976
01ca0     0A 5C 06 F6 | 	mov	arg01, #10
01ca4     38 45 B0 FD | 	call	#__system___waitus
01ca8     03 00 00 FF 
01cac     B8 0F 06 F1 | 	add	objptr, ##1976
01cb0     07 03 68 FC | 	wrlong	#1, objptr
01cb4     8F 0E 86 F1 | 	sub	objptr, #143
01cb8     07 7D C2 FA | 	rdbyte	local10, objptr
01cbc     BF 0F 06 F1 | 	add	objptr, #447
01cc0     07 7D 62 FC | 	wrlong	local10, objptr
01cc4     04 00 00 FF 
01cc8     E8 0E 86 F1 | 	sub	objptr, ##2280
01ccc                 | LR__0025
01ccc     1D 5E 06 F6 | 	mov	arg02, #29
01cd0                 | ' 
01cd0                 | ' ''---------- Set the (x,y) position of cursor
01cd0                 | ' 
01cd0                 | ' cursor_x:=x
01cd0     34 0E 06 F1 | 	add	objptr, #52
01cd4     07 0B 48 FC | 	wrbyte	#5, objptr
01cd8                 | ' cursor_y:=y
01cd8     01 0E 06 F1 | 	add	objptr, #1
01cdc     07 3B 48 FC | 	wrbyte	#29, objptr
01ce0     02 00 00 FF 
01ce4     B2 0F 06 F1 | 	add	objptr, ##1458
01ce8     07 D5 C2 FA | 	rdbyte	local54, objptr
01cec     02 D4 66 F0 | 	shl	local54, #2
01cf0     01 00 00 FF 
01cf4     65 0E 06 F1 | 	add	objptr, ##613
01cf8     07 D5 02 F1 | 	add	local54, objptr
01cfc     6A 5D 02 FB | 	rdlong	arg01, local54
01d00     04 00 00 FF 
01d04     4C 0E 86 F1 | 	sub	objptr, ##2124
01d08     D8 09 B0 FD | 	call	#_hng030rm_spin2_write
01d0c     04 00 00 FF 
01d10     D0 0E 06 F1 | 	add	objptr, ##2256
01d14     07 5D 02 FB | 	rdlong	arg01, objptr
01d18     04 00 00 FF 
01d1c     D0 0E 86 F1 | 	sub	objptr, ##2256
01d20     C0 09 B0 FD | 	call	#_hng030rm_spin2_write
01d24                 | ' 
01d24                 | ' ''---------- Set the (x,y) position of cursor
01d24                 | ' 
01d24                 | ' cursor_x:=x
01d24     34 0E 06 F1 | 	add	objptr, #52
01d28     07 03 48 FC | 	wrbyte	#1, objptr
01d2c                 | ' cursor_y:=y
01d2c     01 0E 06 F1 | 	add	objptr, #1
01d30     07 3B 48 FC | 	wrbyte	#29, objptr
01d34     02 00 00 FF 
01d38     DA 0F 06 F1 | 	add	objptr, ##1498
01d3c     07 5D 02 FB | 	rdlong	arg01, objptr
01d40     10 0E 06 F1 | 	add	objptr, #16
01d44     07 D5 02 FB | 	rdlong	local54, objptr
01d48     03 00 00 FF 
01d4c     1F 0E 86 F1 | 	sub	objptr, ##1567
01d50     6A 5D 02 F1 | 	add	arg01, local54
01d54     03 5E 06 F6 | 	mov	arg02, #3
01d58     04 0C B0 FD | 	call	#_hng030rm_spin2_inttostr2
01d5c     15 5D 02 F6 | 	mov	arg01, result1
01d60     80 09 B0 FD | 	call	#_hng030rm_spin2_write
01d64     1D 5E 06 F6 | 	mov	arg02, #29
01d68                 | ' 
01d68                 | ' ''---------- Set the (x,y) position of cursor
01d68                 | ' 
01d68                 | ' cursor_x:=x
01d68     34 0E 06 F1 | 	add	objptr, #52
01d6c     07 41 48 FC | 	wrbyte	#32, objptr
01d70                 | ' cursor_y:=y
01d70     01 0E 06 F1 | 	add	objptr, #1
01d74     07 3B 48 FC | 	wrbyte	#29, objptr
01d78     02 00 00 FF 
01d7c     B3 0F 06 F1 | 	add	objptr, ##1459
01d80     07 D5 C2 FA | 	rdbyte	local54, objptr
01d84     02 D4 66 F0 | 	shl	local54, #2
01d88     01 00 00 FF 
01d8c     64 0E 06 F1 | 	add	objptr, ##612
01d90     07 D5 02 F1 | 	add	local54, objptr
01d94     6A 5D 02 FB | 	rdlong	arg01, local54
01d98     04 00 00 FF 
01d9c     4C 0E 86 F1 | 	sub	objptr, ##2124
01da0     40 09 B0 FD | 	call	#_hng030rm_spin2_write
01da4     04 00 00 FF 
01da8     D0 0E 06 F1 | 	add	objptr, ##2256
01dac     07 5D 02 FB | 	rdlong	arg01, objptr
01db0     04 00 00 FF 
01db4     D0 0E 86 F1 | 	sub	objptr, ##2256
01db8     28 09 B0 FD | 	call	#_hng030rm_spin2_write
01dbc                 | ' 
01dbc                 | ' ''---------- Set the (x,y) position of cursor
01dbc                 | ' 
01dbc                 | ' cursor_x:=x
01dbc     34 0E 06 F1 | 	add	objptr, #52
01dc0     07 39 48 FC | 	wrbyte	#28, objptr
01dc4                 | ' cursor_y:=y
01dc4     01 0E 06 F1 | 	add	objptr, #1
01dc8     07 3B 48 FC | 	wrbyte	#29, objptr
01dcc     02 00 00 FF 
01dd0     DE 0F 06 F1 | 	add	objptr, ##1502
01dd4     07 5D 02 FB | 	rdlong	arg01, objptr
01dd8     10 0E 06 F1 | 	add	objptr, #16
01ddc     07 D5 02 FB | 	rdlong	local54, objptr
01de0     03 00 00 FF 
01de4     23 0E 86 F1 | 	sub	objptr, ##1571
01de8     6A 5D 02 F1 | 	add	arg01, local54
01dec     03 5E 06 F6 | 	mov	arg02, #3
01df0     6C 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01df4     15 5D 02 F6 | 	mov	arg01, result1
01df8     E8 08 B0 FD | 	call	#_hng030rm_spin2_write
01dfc     1D 5E 06 F6 | 	mov	arg02, #29
01e00                 | ' 
01e00                 | ' ''---------- Set the (x,y) position of cursor
01e00                 | ' 
01e00                 | ' cursor_x:=x
01e00     34 0E 06 F1 | 	add	objptr, #52
01e04     07 79 48 FC | 	wrbyte	#60, objptr
01e08                 | ' cursor_y:=y
01e08     01 0E 06 F1 | 	add	objptr, #1
01e0c     07 3B 48 FC | 	wrbyte	#29, objptr
01e10     02 00 00 FF 
01e14     B4 0F 06 F1 | 	add	objptr, ##1460
01e18     07 D5 C2 FA | 	rdbyte	local54, objptr
01e1c     02 D4 66 F0 | 	shl	local54, #2
01e20     01 00 00 FF 
01e24     63 0E 06 F1 | 	add	objptr, ##611
01e28     07 D5 02 F1 | 	add	local54, objptr
01e2c     6A 5D 02 FB | 	rdlong	arg01, local54
01e30     04 00 00 FF 
01e34     4C 0E 86 F1 | 	sub	objptr, ##2124
01e38     A8 08 B0 FD | 	call	#_hng030rm_spin2_write
01e3c     04 00 00 FF 
01e40     D0 0E 06 F1 | 	add	objptr, ##2256
01e44     07 5D 02 FB | 	rdlong	arg01, objptr
01e48     04 00 00 FF 
01e4c     D0 0E 86 F1 | 	sub	objptr, ##2256
01e50     90 08 B0 FD | 	call	#_hng030rm_spin2_write
01e54                 | ' 
01e54                 | ' ''---------- Set the (x,y) position of cursor
01e54                 | ' 
01e54                 | ' cursor_x:=x
01e54     34 0E 06 F1 | 	add	objptr, #52
01e58     07 71 48 FC | 	wrbyte	#56, objptr
01e5c                 | ' cursor_y:=y
01e5c     01 0E 06 F1 | 	add	objptr, #1
01e60     07 3B 48 FC | 	wrbyte	#29, objptr
01e64     02 00 00 FF 
01e68     E2 0F 06 F1 | 	add	objptr, ##1506
01e6c     07 5D 02 FB | 	rdlong	arg01, objptr
01e70     10 0E 06 F1 | 	add	objptr, #16
01e74     07 D5 02 FB | 	rdlong	local54, objptr
01e78     03 00 00 FF 
01e7c     27 0E 86 F1 | 	sub	objptr, ##1575
01e80     6A 5D 02 F1 | 	add	arg01, local54
01e84     03 5E 06 F6 | 	mov	arg02, #3
01e88     D4 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e8c     15 5D 02 F6 | 	mov	arg01, result1
01e90     50 08 B0 FD | 	call	#_hng030rm_spin2_write
01e94                 | ' 
01e94                 | ' ''---------- Set the (x,y) position of cursor
01e94                 | ' 
01e94                 | ' cursor_x:=x
01e94     34 0E 06 F1 | 	add	objptr, #52
01e98     07 A9 48 FC | 	wrbyte	#84, objptr
01e9c                 | ' cursor_y:=y
01e9c     01 0E 06 F1 | 	add	objptr, #1
01ea0     07 3B 48 FC | 	wrbyte	#29, objptr
01ea4     02 00 00 FF 
01ea8     E6 0F 06 F1 | 	add	objptr, ##1510
01eac     07 5D 02 FB | 	rdlong	arg01, objptr
01eb0     10 0E 06 F1 | 	add	objptr, #16
01eb4     07 D5 02 FB | 	rdlong	local54, objptr
01eb8     03 00 00 FF 
01ebc     2B 0E 86 F1 | 	sub	objptr, ##1579
01ec0     6A 5D 02 F1 | 	add	arg01, local54
01ec4     03 5E 06 F6 | 	mov	arg02, #3
01ec8     94 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ecc     15 5D 02 F6 | 	mov	arg01, result1
01ed0     10 08 B0 FD | 	call	#_hng030rm_spin2_write
01ed4     1D 5E 06 F6 | 	mov	arg02, #29
01ed8                 | ' 
01ed8                 | ' ''---------- Set the (x,y) position of cursor
01ed8                 | ' 
01ed8                 | ' cursor_x:=x
01ed8     34 0E 06 F1 | 	add	objptr, #52
01edc     07 B1 48 FC | 	wrbyte	#88, objptr
01ee0                 | ' cursor_y:=y
01ee0     01 0E 06 F1 | 	add	objptr, #1
01ee4     07 3B 48 FC | 	wrbyte	#29, objptr
01ee8     02 00 00 FF 
01eec     B5 0F 06 F1 | 	add	objptr, ##1461
01ef0     07 D5 C2 FA | 	rdbyte	local54, objptr
01ef4     02 D4 66 F0 | 	shl	local54, #2
01ef8     01 00 00 FF 
01efc     62 0E 06 F1 | 	add	objptr, ##610
01f00     07 D5 02 F1 | 	add	local54, objptr
01f04     6A 5D 02 FB | 	rdlong	arg01, local54
01f08     04 00 00 FF 
01f0c     4C 0E 86 F1 | 	sub	objptr, ##2124
01f10     D0 07 B0 FD | 	call	#_hng030rm_spin2_write
01f14     04 00 00 FF 
01f18     D0 0E 06 F1 | 	add	objptr, ##2256
01f1c     07 5D 02 FB | 	rdlong	arg01, objptr
01f20     04 00 00 FF 
01f24     D0 0E 86 F1 | 	sub	objptr, ##2256
01f28     B8 07 B0 FD | 	call	#_hng030rm_spin2_write
01f2c     01 5E 06 F6 | 	mov	arg02, #1
01f30                 | ' 
01f30                 | ' ''---------- Set the (x,y) position of cursor
01f30                 | ' 
01f30                 | ' cursor_x:=x
01f30     34 0E 06 F1 | 	add	objptr, #52
01f34     07 B5 48 FC | 	wrbyte	#90, objptr
01f38                 | ' cursor_y:=y
01f38     01 0E 06 F1 | 	add	objptr, #1
01f3c     07 03 48 FC | 	wrbyte	#1, objptr
01f40     35 0E 86 F1 | 	sub	objptr, #53
01f44     40 00 00 FF 
01f48     9E 5D 06 F6 | 	mov	arg01, ##@LR__0456
01f4c     94 07 B0 FD | 	call	#_hng030rm_spin2_write
01f50                 | ' asm
01f50     80 5C 06 FB | 	rdlong	arg01, #128
01f54                 | ' return r
01f54     08 5E 06 F6 | 	mov	arg02, #8
01f58                 | ' 
01f58                 | ' j:=i
01f58                 | ' pos:=d-1
01f58     07 D6 06 F6 | 	mov	local55, #7
01f5c                 | ' k:=0
01f5c     44 0E 06 F1 | 	add	objptr, #68
01f60     07 5F 02 F1 | 	add	arg02, objptr
01f64                 | ' n_string[d]:=0
01f64     2F 01 48 FC | 	wrbyte	#0, arg02
01f68                 | ' repeat k from 0 to d-1
01f68     00 D8 06 F6 | 	mov	local56, #0
01f6c     44 0E 86 F1 | 	sub	objptr, #68
01f70     AC E0 9F FE | 	loc	pa,	#(@LR__0027-@LR__0026)
01f74     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f78                 | LR__0026
01f78     6C DB 02 F6 | 	mov	local57, local56
01f7c     44 0E 06 F1 | 	add	objptr, #68
01f80     07 DB 02 F1 | 	add	local57, objptr
01f84                 | '   n_string[k]:=48
01f84     6D 61 48 FC | 	wrbyte	#48, local57
01f88     01 D8 06 F1 | 	add	local56, #1
01f8c     08 D8 0E F2 | 	cmp	local56, #8 wz
01f90     44 0E 86 F1 | 	sub	objptr, #68
01f94     E0 FF 9F 5D |  if_ne	jmp	#LR__0026
01f98                 | LR__0027
01f98                 | ' if (j<>0)
01f98     00 5C 0E F2 | 	cmp	arg01, #0 wz
01f9c     40 00 90 AD |  if_e	jmp	#LR__0030
01fa0                 | ' 
01fa0                 | '   repeat while (pos>-1)
01fa0                 | LR__0028
01fa0     FF FF 7F FF 
01fa4     FF D7 5E F2 | 	cmps	local55, ##-1 wcz
01fa8     34 00 90 ED |  if_be	jmp	#LR__0029
01fac     2E DD 02 F6 | 	mov	local58, arg01
01fb0     0F DC 06 F5 | 	and	local58, #15
01fb4                 | '     q:=j+//16
01fb4                 | '     if (q>9)
01fb4     09 DC 5E F2 | 	cmps	local58, #9 wcz
01fb8                 | '       q:=q+7
01fb8     07 DC 06 11 |  if_a	add	local58, #7
01fbc                 | '     q:=48+q
01fbc     30 DC 06 F1 | 	add	local58, #48
01fc0     6B DF 02 F6 | 	mov	local59, local55
01fc4     44 0E 06 F1 | 	add	objptr, #68
01fc8     07 DF 02 F1 | 	add	local59, objptr
01fcc                 | '     n_string[pos]:=q
01fcc     6F DD 42 FC | 	wrbyte	local58, local59
01fd0                 | '     j:=j+/16
01fd0     04 5C 46 F0 | 	shr	arg01, #4
01fd4                 | '     pos-=1
01fd4     01 D6 86 F1 | 	sub	local55, #1
01fd8     44 0E 86 F1 | 	sub	objptr, #68
01fdc     C0 FF 9F FD | 	jmp	#LR__0028
01fe0                 | LR__0029
01fe0                 | LR__0030
01fe0     44 0E 06 F1 | 	add	objptr, #68
01fe4     07 2B 02 F6 | 	mov	result1, objptr
01fe8     44 0E 86 F1 | 	sub	objptr, #68
01fec                 | ' 
01fec                 | ' q:=@n_string
01fec                 | ' return q
01fec     15 5D 02 F6 | 	mov	arg01, result1
01ff0     F0 06 B0 FD | 	call	#_hng030rm_spin2_write
01ff4     1A 2A 62 FD | 	getct	result1
01ff8     15 E1 02 F6 | 	mov	local60, result1
01ffc     04 00 00 FF 
02000     F8 0E 06 F1 | 	add	objptr, ##2296
02004     07 D5 02 FB | 	rdlong	local54, objptr
02008     6A E1 82 F1 | 	sub	local60, local54
0200c     07 E1 62 FC | 	wrlong	local60, objptr
02010     04 00 00 FF 
02014     F8 0E 86 F1 | 	sub	objptr, ##2296
02018     48 F8 9F FD | 	jmp	#LR__0016
0201c     AF F0 03 F6 | 	mov	ptra, fp
02020     BF 00 A0 FD | 	call	#popregs_
02024                 | _program_ret
02024     2D 00 64 FD | 	ret
02028                 | 
02028                 | ' 
02028                 | ' 
02028                 | ' ''---------- putpixel - put a pixel on the screen
02028                 | ' 
02028                 | ' pub putpixel1(x,y,c) |byte b
02028                 | _hng030rm_spin2_putpixel1
02028                 | ' 
02028                 | ' 
02028                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
02028     00 30 06 F6 | 	mov	_var01, #0
0202c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02030     01 30 66 36 |  if_ae	neg	_var01, #1
02034     00 32 06 F6 | 	mov	_var02, #0
02038     90 0E 06 F1 | 	add	objptr, #144
0203c     07 35 02 FB | 	rdlong	_var03, objptr
02040     05 34 66 F0 | 	shl	_var03, #5
02044     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02048     01 32 66 C6 |  if_b	neg	_var02, #1
0204c     19 31 02 F5 | 	and	_var01, _var02
02050     00 36 06 F6 | 	mov	_var04, #0
02054     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02058     01 36 66 36 |  if_ae	neg	_var04, #1
0205c     1B 31 02 F5 | 	and	_var01, _var04
02060     00 38 06 F6 | 	mov	_var05, #0
02064     04 0E 06 F1 | 	add	objptr, #4
02068     07 3B 02 FB | 	rdlong	_var06, objptr
0206c     94 0E 86 F1 | 	sub	objptr, #148
02070     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02074     01 38 66 C6 |  if_b	neg	_var05, #1
02078     1C 31 CA F7 | 	test	_var01, _var05 wz
0207c     8C 00 90 AD |  if_e	jmp	#LR__0033
02080     90 0E 06 F1 | 	add	objptr, #144
02084     07 3D 02 FB | 	rdlong	_var07, objptr
02088     90 0E 86 F1 | 	sub	objptr, #144
0208c     02 3C 66 F0 | 	shl	_var07, #2
02090     2F 3D 02 FD | 	qmul	_var07, arg02
02094     18 3E 62 FD | 	getqx	_var08
02098     07 41 02 FB | 	rdlong	_var09, objptr
0209c     1F 41 02 F1 | 	add	_var09, _var08
020a0     2E 43 02 F6 | 	mov	_var10, arg01
020a4     03 42 46 F0 | 	shr	_var10, #3
020a8     21 41 02 F1 | 	add	_var09, _var10
020ac                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
020ac     20 45 C2 FA | 	rdbyte	_var11, _var09
020b0                 | '     if (c==0)
020b0     00 60 0E F2 | 	cmp	arg03, #0 wz
020b4     18 00 90 5D |  if_ne	jmp	#LR__0031
020b8     2E 31 52 F6 | 	abs	_var01, arg01 wc
020bc     07 30 06 F5 | 	and	_var01, #7
020c0     18 31 62 C6 |  if_b	neg	_var01, _var01
020c4     18 47 C2 F9 | 	decod	_var12, _var01
020c8                 | '       b:=b & !(1<<(x//8))
020c8     23 45 22 F5 | 	andn	_var11, _var12
020cc                 | '     else
020cc     14 00 90 FD | 	jmp	#LR__0032
020d0                 | LR__0031
020d0     2E 31 52 F6 | 	abs	_var01, arg01 wc
020d4     07 30 06 F5 | 	and	_var01, #7
020d8     18 31 62 C6 |  if_b	neg	_var01, _var01
020dc     18 49 C2 F9 | 	decod	_var13, _var01
020e0                 | '       b:=b |(1<<(x//8))
020e0     24 45 42 F5 | 	or	_var11, _var13
020e4                 | LR__0032
020e4     90 0E 06 F1 | 	add	objptr, #144
020e8     07 4B 02 FB | 	rdlong	_var14, objptr
020ec     90 0E 86 F1 | 	sub	objptr, #144
020f0     02 4A 66 F0 | 	shl	_var14, #2
020f4     2F 4B 02 FD | 	qmul	_var14, arg02
020f8     18 4C 62 FD | 	getqx	_var15
020fc     07 4F 02 FB | 	rdlong	_var16, objptr
02100     26 4F 02 F1 | 	add	_var16, _var15
02104     21 4F 02 F1 | 	add	_var16, _var10
02108                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02108     27 45 42 FC | 	wrbyte	_var11, _var16
0210c                 | LR__0033
0210c                 | _hng030rm_spin2_putpixel1_ret
0210c     2D 00 64 FD | 	ret
02110                 | 
02110                 | ' 
02110                 | ' 
02110                 | ' pub putpixel2(x,y,c) |byte b
02110                 | _hng030rm_spin2_putpixel2
02110                 | ' 
02110                 | ' 
02110                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02110     00 30 06 F6 | 	mov	_var01, #0
02114     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02118     01 30 66 36 |  if_ae	neg	_var01, #1
0211c     00 32 06 F6 | 	mov	_var02, #0
02120     90 0E 06 F1 | 	add	objptr, #144
02124     07 35 02 FB | 	rdlong	_var03, objptr
02128     04 34 66 F0 | 	shl	_var03, #4
0212c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02130     01 32 66 C6 |  if_b	neg	_var02, #1
02134     19 31 02 F5 | 	and	_var01, _var02
02138     00 36 06 F6 | 	mov	_var04, #0
0213c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02140     01 36 66 36 |  if_ae	neg	_var04, #1
02144     1B 31 02 F5 | 	and	_var01, _var04
02148     00 38 06 F6 | 	mov	_var05, #0
0214c     04 0E 06 F1 | 	add	objptr, #4
02150     07 3B 02 FB | 	rdlong	_var06, objptr
02154     94 0E 86 F1 | 	sub	objptr, #148
02158     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
0215c     01 38 66 C6 |  if_b	neg	_var05, #1
02160     1C 31 CA F7 | 	test	_var01, _var05 wz
02164     7C 00 90 AD |  if_e	jmp	#LR__0034
02168     90 0E 06 F1 | 	add	objptr, #144
0216c     07 3D 02 FB | 	rdlong	_var07, objptr
02170     90 0E 86 F1 | 	sub	objptr, #144
02174     02 3C 66 F0 | 	shl	_var07, #2
02178     2F 3D 02 FD | 	qmul	_var07, arg02
0217c     18 3E 62 FD | 	getqx	_var08
02180     07 41 02 FB | 	rdlong	_var09, objptr
02184     1F 41 02 F1 | 	add	_var09, _var08
02188     2E 43 02 F6 | 	mov	_var10, arg01
0218c     02 42 46 F0 | 	shr	_var10, #2
02190     21 41 02 F1 | 	add	_var09, _var10
02194                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02194     20 45 C2 FA | 	rdbyte	_var11, _var09
02198     2E 31 52 F6 | 	abs	_var01, arg01 wc
0219c     03 30 06 F5 | 	and	_var01, #3
021a0     18 31 62 C6 |  if_b	neg	_var01, _var01
021a4     01 30 66 F0 | 	shl	_var01, #1
021a8     03 46 06 F6 | 	mov	_var12, #3
021ac     18 47 62 F0 | 	shl	_var12, _var01
021b0                 | '     b:=b & !(%11<<((x//4)<<1))
021b0     23 45 22 F5 | 	andn	_var11, _var12
021b4     18 61 62 F0 | 	shl	arg03, _var01
021b8                 | '     b:=b |(c<<((x//4)<<1))
021b8     30 45 42 F5 | 	or	_var11, arg03
021bc     90 0E 06 F1 | 	add	objptr, #144
021c0     07 49 02 FB | 	rdlong	_var13, objptr
021c4     90 0E 86 F1 | 	sub	objptr, #144
021c8     02 48 66 F0 | 	shl	_var13, #2
021cc     2F 49 02 FD | 	qmul	_var13, arg02
021d0     18 4A 62 FD | 	getqx	_var14
021d4     07 4D 02 FB | 	rdlong	_var15, objptr
021d8     25 4D 02 F1 | 	add	_var15, _var14
021dc     21 4D 02 F1 | 	add	_var15, _var10
021e0                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
021e0     26 45 42 FC | 	wrbyte	_var11, _var15
021e4                 | LR__0034
021e4                 | _hng030rm_spin2_putpixel2_ret
021e4     2D 00 64 FD | 	ret
021e8                 | 
021e8                 | ' 
021e8                 | ' 
021e8                 | ' pub putpixel4(x,y,c) |byte b
021e8                 | _hng030rm_spin2_putpixel4
021e8                 | ' 
021e8                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
021e8     00 30 06 F6 | 	mov	_var01, #0
021ec     00 5C 5E F2 | 	cmps	arg01, #0 wcz
021f0     01 30 66 36 |  if_ae	neg	_var01, #1
021f4     00 32 06 F6 | 	mov	_var02, #0
021f8     90 0E 06 F1 | 	add	objptr, #144
021fc     07 35 02 FB | 	rdlong	_var03, objptr
02200     04 34 66 F0 | 	shl	_var03, #4
02204     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02208     01 32 66 C6 |  if_b	neg	_var02, #1
0220c     19 31 02 F5 | 	and	_var01, _var02
02210     00 36 06 F6 | 	mov	_var04, #0
02214     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02218     01 36 66 36 |  if_ae	neg	_var04, #1
0221c     1B 31 02 F5 | 	and	_var01, _var04
02220     00 38 06 F6 | 	mov	_var05, #0
02224     04 0E 06 F1 | 	add	objptr, #4
02228     07 3B 02 FB | 	rdlong	_var06, objptr
0222c     94 0E 86 F1 | 	sub	objptr, #148
02230     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02234     01 38 66 C6 |  if_b	neg	_var05, #1
02238     1C 31 CA F7 | 	test	_var01, _var05 wz
0223c     7C 00 90 AD |  if_e	jmp	#LR__0035
02240     90 0E 06 F1 | 	add	objptr, #144
02244     07 3D 02 FB | 	rdlong	_var07, objptr
02248     90 0E 86 F1 | 	sub	objptr, #144
0224c     02 3C 66 F0 | 	shl	_var07, #2
02250     2F 3D 02 FD | 	qmul	_var07, arg02
02254     18 3E 62 FD | 	getqx	_var08
02258     07 41 02 FB | 	rdlong	_var09, objptr
0225c     1F 41 02 F1 | 	add	_var09, _var08
02260     2E 43 02 F6 | 	mov	_var10, arg01
02264     01 42 46 F0 | 	shr	_var10, #1
02268     21 41 02 F1 | 	add	_var09, _var10
0226c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
0226c     20 45 C2 FA | 	rdbyte	_var11, _var09
02270     2E 31 52 F6 | 	abs	_var01, arg01 wc
02274     01 30 06 F5 | 	and	_var01, #1
02278     18 31 62 C6 |  if_b	neg	_var01, _var01
0227c     02 30 66 F0 | 	shl	_var01, #2
02280     0F 46 06 F6 | 	mov	_var12, #15
02284     18 47 62 F0 | 	shl	_var12, _var01
02288                 | '     b:=b & !(%1111<<((x//2)<<2))
02288     23 45 22 F5 | 	andn	_var11, _var12
0228c     18 61 62 F0 | 	shl	arg03, _var01
02290                 | '     b:=b |(c<<((x//2)<<2))
02290     30 45 42 F5 | 	or	_var11, arg03
02294     90 0E 06 F1 | 	add	objptr, #144
02298     07 49 02 FB | 	rdlong	_var13, objptr
0229c     90 0E 86 F1 | 	sub	objptr, #144
022a0     02 48 66 F0 | 	shl	_var13, #2
022a4     2F 49 02 FD | 	qmul	_var13, arg02
022a8     18 4A 62 FD | 	getqx	_var14
022ac     07 4D 02 FB | 	rdlong	_var15, objptr
022b0     25 4D 02 F1 | 	add	_var15, _var14
022b4     21 4D 02 F1 | 	add	_var15, _var10
022b8                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
022b8     26 45 42 FC | 	wrbyte	_var11, _var15
022bc                 | LR__0035
022bc                 | _hng030rm_spin2_putpixel4_ret
022bc     2D 00 64 FD | 	ret
022c0                 | 
022c0                 | ' 
022c0                 | ' 
022c0                 | ' pub putpixel8(x,y,c)
022c0                 | _hng030rm_spin2_putpixel8
022c0                 | ' 
022c0                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
022c0     00 30 06 F6 | 	mov	_var01, #0
022c4     00 5C 5E F2 | 	cmps	arg01, #0 wcz
022c8     01 30 66 36 |  if_ae	neg	_var01, #1
022cc     00 32 06 F6 | 	mov	_var02, #0
022d0     90 0E 06 F1 | 	add	objptr, #144
022d4     07 35 02 FB | 	rdlong	_var03, objptr
022d8     02 34 66 F0 | 	shl	_var03, #2
022dc     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
022e0     01 32 66 C6 |  if_b	neg	_var02, #1
022e4     19 31 02 F5 | 	and	_var01, _var02
022e8     00 36 06 F6 | 	mov	_var04, #0
022ec     00 5E 5E F2 | 	cmps	arg02, #0 wcz
022f0     01 36 66 36 |  if_ae	neg	_var04, #1
022f4     1B 31 02 F5 | 	and	_var01, _var04
022f8     00 38 06 F6 | 	mov	_var05, #0
022fc     04 0E 06 F1 | 	add	objptr, #4
02300     07 3B 02 FB | 	rdlong	_var06, objptr
02304     94 0E 86 F1 | 	sub	objptr, #148
02308     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
0230c     01 38 66 C6 |  if_b	neg	_var05, #1
02310     1C 31 CA F7 | 	test	_var01, _var05 wz
02314     28 00 90 AD |  if_e	jmp	#LR__0036
02318     90 0E 06 F1 | 	add	objptr, #144
0231c     07 3D 02 FB | 	rdlong	_var07, objptr
02320     90 0E 86 F1 | 	sub	objptr, #144
02324     02 3C 66 F0 | 	shl	_var07, #2
02328     2F 3D 02 FD | 	qmul	_var07, arg02
0232c     18 3E 62 FD | 	getqx	_var08
02330     07 41 02 FB | 	rdlong	_var09, objptr
02334     1F 41 02 F1 | 	add	_var09, _var08
02338     2E 41 02 F1 | 	add	_var09, arg01
0233c                 | '     byte[buf_ptr+4*cpl*y+x]:=c
0233c     20 61 42 FC | 	wrbyte	arg03, _var09
02340                 | LR__0036
02340                 | _hng030rm_spin2_putpixel8_ret
02340     2D 00 64 FD | 	ret
02344                 | 
02344                 | ' 
02344                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02344                 | ' 
02344                 | ' pub setbordercolor(r,g,b) | color
02344                 | _hng030rm_spin2_setbordercolor
02344     18 5C 66 F0 | 	shl	arg01, #24
02348     10 5E 66 F0 | 	shl	arg02, #16
0234c     2F 5D 02 F1 | 	add	arg01, arg02
02350     08 60 66 F0 | 	shl	arg03, #8
02354     30 5D 02 F1 | 	add	arg01, arg03
02358                 | ' 
02358                 | ' color:=r<<24+g<<16+b<<8
02358                 | ' bordercolor:=color
02358     2C 0E 06 F1 | 	add	objptr, #44
0235c     07 5D 62 FC | 	wrlong	arg01, objptr
02360     2C 0E 86 F1 | 	sub	objptr, #44
02364                 | _hng030rm_spin2_setbordercolor_ret
02364     2D 00 64 FD | 	ret
02368                 | 
02368                 | ' 
02368                 | ' 
02368                 | ' '*************************************************************************
02368                 | ' '                                                                        *
02368                 | ' '  Text functions                                                        *
02368                 | ' '                                                                        *
02368                 | ' '*************************************************************************
02368                 | ' 
02368                 | ' ''---------- Clear the screen, set its foreground/background color
02368                 | ' 
02368                 | ' pub cls(fc,bc)   :c
02368                 | _hng030rm_spin2_cls
02368     07 5A 05 F6 | 	mov	COUNT_, #7
0236c     B0 00 A0 FD | 	call	#pushregs_
02370     2E 6B 02 F6 | 	mov	local01, arg01
02374     2F 6D 02 F6 | 	mov	local02, arg02
02378                 | ' 
02378                 | ' if (graphmode<512)
02378     C4 0E 06 F1 | 	add	objptr, #196
0237c     07 6F 02 FB | 	rdlong	local03, objptr
02380     C4 0E 86 F1 | 	sub	objptr, #196
02384     01 00 00 FF 
02388     00 6E 5E F2 | 	cmps	local03, ##512 wcz
0238c     34 00 90 3D |  if_ae	jmp	#LR__0037
02390     35 71 02 F6 | 	mov	local04, local01
02394     18 70 66 F0 | 	shl	local04, #24
02398     36 73 02 F6 | 	mov	local05, local02
0239c     10 72 66 F0 | 	shl	local05, #16
023a0     39 71 02 F1 | 	add	local04, local05
023a4     20 70 06 F1 | 	add	local04, #32
023a8                 | '   c:=fc<<24+bc<<16+$20
023a8                 | '   longfill(buf_ptr,c,buflen)
023a8     07 5D 02 FB | 	rdlong	arg01, objptr
023ac     30 0E 06 F1 | 	add	objptr, #48
023b0     07 61 02 FB | 	rdlong	arg03, objptr
023b4     30 0E 86 F1 | 	sub	objptr, #48
023b8     38 5F 02 F6 | 	mov	arg02, local04
023bc     A8 00 A0 FD | 	call	#\builtin_longfill_
023c0                 | ' else
023c0     AC 00 90 FD | 	jmp	#LR__0043
023c4                 | LR__0037
023c4                 | '   if (graphmode & 48) ==48
023c4     C4 0E 06 F1 | 	add	objptr, #196
023c8     07 6F 02 FB | 	rdlong	local03, objptr
023cc     C4 0E 86 F1 | 	sub	objptr, #196
023d0     30 6E 06 F5 | 	and	local03, #48
023d4     30 6E 0E F2 | 	cmp	local03, #48 wz
023d8                 | '     c:=bc
023d8     36 71 02 A6 |  if_e	mov	local04, local02
023dc     74 00 90 AD |  if_e	jmp	#LR__0042
023e0                 | '   elseif (graphmode & 48) ==32
023e0     C4 0E 06 F1 | 	add	objptr, #196
023e4     07 6F 02 FB | 	rdlong	local03, objptr
023e8     C4 0E 86 F1 | 	sub	objptr, #196
023ec     30 6E 06 F5 | 	and	local03, #48
023f0     20 6E 0E F2 | 	cmp	local03, #32 wz
023f4     10 00 90 5D |  if_ne	jmp	#LR__0038
023f8     36 71 02 F6 | 	mov	local04, local02
023fc     04 70 66 F0 | 	shl	local04, #4
02400     36 71 02 F1 | 	add	local04, local02
02404                 | '     c:=bc<<4+bc
02404     4C 00 90 FD | 	jmp	#LR__0041
02408                 | LR__0038
02408                 | '   elseif (graphmode & 48) ==16
02408     C4 0E 06 F1 | 	add	objptr, #196
0240c     07 6F 02 FB | 	rdlong	local03, objptr
02410     C4 0E 86 F1 | 	sub	objptr, #196
02414     30 6E 06 F5 | 	and	local03, #48
02418     10 6E 0E F2 | 	cmp	local03, #16 wz
0241c     28 00 90 5D |  if_ne	jmp	#LR__0039
02420     36 71 02 F6 | 	mov	local04, local02
02424     06 70 66 F0 | 	shl	local04, #6
02428     36 75 02 F6 | 	mov	local06, local02
0242c     04 74 66 F0 | 	shl	local06, #4
02430     3A 71 02 F1 | 	add	local04, local06
02434     36 77 02 F6 | 	mov	local07, local02
02438     02 76 66 F0 | 	shl	local07, #2
0243c     3B 71 02 F1 | 	add	local04, local07
02440     36 71 02 F1 | 	add	local04, local02
02444                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02444                 | '   else
02444     0C 00 90 FD | 	jmp	#LR__0040
02448                 | LR__0039
02448                 | '     if bc==1
02448     01 6C 0E F2 | 	cmp	local02, #1 wz
0244c                 | '       c:=255
0244c     FF 70 06 A6 |  if_e	mov	local04, #255
02450                 | '     else
02450                 | '       c:=0
02450     00 70 06 56 |  if_ne	mov	local04, #0
02454                 | LR__0040
02454                 | LR__0041
02454                 | LR__0042
02454     30 0E 06 F1 | 	add	objptr, #48
02458     07 61 02 FB | 	rdlong	arg03, objptr
0245c     30 0E 86 F1 | 	sub	objptr, #48
02460     02 60 66 F0 | 	shl	arg03, #2
02464                 | '   bytefill(buf_ptr,c,buflen*4)
02464     07 5D 02 FB | 	rdlong	arg01, objptr
02468     38 5F 02 F6 | 	mov	arg02, local04
0246c     A0 00 A0 FD | 	call	#\builtin_bytefill_
02470                 | LR__0043
02470                 | ' setwritecolors(fc,bc)
02470                 | ' 
02470                 | ' 
02470                 | ' write_color:=ff
02470     38 0E 06 F1 | 	add	objptr, #56
02474     07 6B 62 FC | 	wrlong	local01, objptr
02478                 | ' write_background:=bb
02478     04 0E 06 F1 | 	add	objptr, #4
0247c     07 6D 62 FC | 	wrlong	local02, objptr
02480                 | ' cursor_x:=0
02480     08 0E 86 F1 | 	sub	objptr, #8
02484     07 01 48 FC | 	wrbyte	#0, objptr
02488                 | ' cursor_y:=0
02488     01 0E 06 F1 | 	add	objptr, #1
0248c     07 01 48 FC | 	wrbyte	#0, objptr
02490     35 0E 86 F1 | 	sub	objptr, #53
02494     38 2B 02 F6 | 	mov	result1, local04
02498     AF F0 03 F6 | 	mov	ptra, fp
0249c     BF 00 A0 FD | 	call	#popregs_
024a0                 | _hng030rm_spin2_cls_ret
024a0     2D 00 64 FD | 	ret
024a4                 | 
024a4                 | ' 
024a4                 | ' ''--------- Output a string at position x,y without changing colors
024a4                 | ' 
024a4                 | ' pub outtextxy(x,y,text) | iii
024a4                 | _hng030rm_spin2_outtextxy
024a4     0B 5A 05 F6 | 	mov	COUNT_, #11
024a8     B0 00 A0 FD | 	call	#pushregs_
024ac     2E 6B 02 F6 | 	mov	local01, arg01
024b0                 | ' 
024b0                 | ' repeat iii from 0 to strsize(text)-1
024b0     00 6C 06 F6 | 	mov	local02, #0
024b4     30 5D 02 F6 | 	mov	arg01, arg03
024b8     00 6E 06 F6 | 	mov	local03, #0
024bc     50 DB 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
024c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
024c4                 | LR__0044
024c4     2E 71 CA FA | 	rdbyte	local04, arg01 wz
024c8     01 6E 06 51 |  if_ne	add	local03, #1
024cc     01 5C 06 51 |  if_ne	add	arg01, #1
024d0     F0 FF 9F 5D |  if_ne	jmp	#LR__0044
024d4                 | LR__0045
024d4     37 2B 02 F6 | 	mov	result1, local03
024d8     15 73 02 F6 | 	mov	local05, result1
024dc     01 72 86 F1 | 	sub	local05, #1
024e0     00 72 5E F2 | 	cmps	local05, #0 wcz
024e4     01 74 06 16 |  if_a	mov	local06, #1
024e8     01 74 66 E6 |  if_be	neg	local06, #1
024ec     3A 73 02 F1 | 	add	local05, local06
024f0     5C DB 9F FE | 	loc	pa,	#(@LR__0047-@LR__0046)
024f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
024f8                 | LR__0046
024f8     90 0E 06 F1 | 	add	objptr, #144
024fc     07 77 02 FB | 	rdlong	local07, objptr
02500     90 0E 86 F1 | 	sub	objptr, #144
02504     2F 77 02 FD | 	qmul	local07, arg02
02508     18 78 62 FD | 	getqx	local08
0250c     35 79 02 F1 | 	add	local08, local01
02510     36 79 02 F1 | 	add	local08, local02
02514     02 78 66 F0 | 	shl	local08, #2
02518     07 7B 02 FB | 	rdlong	local09, objptr
0251c     3C 7B 02 F1 | 	add	local09, local08
02520     3D 7D 02 FB | 	rdlong	local10, local09
02524     FF 7C 26 F5 | 	andn	local10, #255
02528     30 7F 02 F6 | 	mov	local11, arg03
0252c     36 7F 02 F1 | 	add	local11, local02
02530     3F 77 C2 FA | 	rdbyte	local07, local11
02534     3B 7D 42 F5 | 	or	local10, local07
02538                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02538     3D 7D 62 FC | 	wrlong	local10, local09
0253c     3A 6D 02 F1 | 	add	local02, local06
02540     39 6D 0A F2 | 	cmp	local02, local05 wz
02544     B0 FF 9F 5D |  if_ne	jmp	#LR__0046
02548                 | LR__0047
02548     AF F0 03 F6 | 	mov	ptra, fp
0254c     BF 00 A0 FD | 	call	#popregs_
02550                 | _hng030rm_spin2_outtextxy_ret
02550     2D 00 64 FD | 	ret
02554                 | 
02554                 | ' 
02554                 | ' ''---------- Output a char at the cursor position, move the cursor
02554                 | ' 
02554                 | ' pub putchar(achar) | c,x,y
02554                 | _hng030rm_spin2_putchar
02554     12 5A 05 F6 | 	mov	COUNT_, #18
02558     B0 00 A0 FD | 	call	#pushregs_
0255c     2E 6B 02 F6 | 	mov	local01, arg01
02560                 | ' 
02560                 | ' if achar==10
02560     0A 6A 0E F2 | 	cmp	local01, #10 wz
02564     58 00 90 5D |  if_ne	jmp	#LR__0048
02568                 | '   crlf()
02568                 | ' 
02568                 | ' cursor_x:=0
02568     34 0E 06 F1 | 	add	objptr, #52
0256c     07 01 48 FC | 	wrbyte	#0, objptr
02570                 | ' cursor_y+=1
02570     01 0E 06 F1 | 	add	objptr, #1
02574     07 6D C2 FA | 	rdbyte	local02, objptr
02578     01 6C 06 F1 | 	add	local02, #1
0257c     07 6D 42 FC | 	wrbyte	local02, objptr
02580                 | ' if cursor_y>lines-1
02580     5F 0E 06 F1 | 	add	objptr, #95
02584     07 6D 02 FB | 	rdlong	local02, objptr
02588     01 6C 86 F1 | 	sub	local02, #1
0258c     5F 0E 86 F1 | 	sub	objptr, #95
02590     07 6F C2 FA | 	rdbyte	local03, objptr
02594     35 0E 86 F1 | 	sub	objptr, #53
02598     36 6F 5A F2 | 	cmps	local03, local02 wcz
0259c     38 01 90 ED |  if_be	jmp	#LR__0051
025a0                 | '   scrollup()
025a0     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
025a4     94 0E 06 F1 | 	add	objptr, #148
025a8     07 71 02 FB | 	rdlong	local04, objptr
025ac     01 70 86 F1 | 	sub	local04, #1
025b0                 | '   cursor_y:=lines-1
025b0     5F 0E 86 F1 | 	sub	objptr, #95
025b4     07 71 42 FC | 	wrbyte	local04, objptr
025b8     35 0E 86 F1 | 	sub	objptr, #53
025bc                 | ' else  
025bc     18 01 90 FD | 	jmp	#LR__0051
025c0                 | LR__0048
025c0                 | '   x:=cursor_x
025c0     34 0E 06 F1 | 	add	objptr, #52
025c4     07 73 C2 FA | 	rdbyte	local05, objptr
025c8                 | '   y:=cursor_y
025c8     01 0E 06 F1 | 	add	objptr, #1
025cc     07 75 C2 FA | 	rdbyte	local06, objptr
025d0     03 0E 06 F1 | 	add	objptr, #3
025d4     07 77 02 FB | 	rdlong	local07, objptr
025d8     18 76 66 F0 | 	shl	local07, #24
025dc     04 0E 06 F1 | 	add	objptr, #4
025e0     07 79 02 FB | 	rdlong	local08, objptr
025e4     10 78 66 F0 | 	shl	local08, #16
025e8     3C 77 02 F1 | 	add	local07, local08
025ec                 | '   c:=write_color<<24+write_background<<16
025ec     54 0E 06 F1 | 	add	objptr, #84
025f0     07 7B 02 FB | 	rdlong	local09, objptr
025f4     90 0E 86 F1 | 	sub	objptr, #144
025f8     3A 7B 02 FD | 	qmul	local09, local06
025fc     18 7C 62 FD | 	getqx	local10
02600     39 7D 02 F1 | 	add	local10, local05
02604     02 7C 66 F0 | 	shl	local10, #2
02608     07 7F 02 FB | 	rdlong	local11, objptr
0260c     3E 7F 02 F1 | 	add	local11, local10
02610     3F 81 02 FB | 	rdlong	local12, local11
02614     7F 00 00 FF 
02618     FF 81 06 F5 | 	and	local12, ##65535
0261c     3B 81 42 F5 | 	or	local12, local07
02620                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02620     3F 81 62 FC | 	wrlong	local12, local11
02624     90 0E 06 F1 | 	add	objptr, #144
02628     07 7B 02 FB | 	rdlong	local09, objptr
0262c     90 0E 86 F1 | 	sub	objptr, #144
02630     3A 7B 02 FD | 	qmul	local09, local06
02634     18 82 62 FD | 	getqx	local13
02638     39 83 02 F1 | 	add	local13, local05
0263c     02 82 66 F0 | 	shl	local13, #2
02640     07 85 02 FB | 	rdlong	local14, objptr
02644     41 85 02 F1 | 	add	local14, local13
02648     42 87 02 FB | 	rdlong	local15, local14
0264c     FF 86 26 F5 | 	andn	local15, #255
02650     FF 6A 06 F5 | 	and	local01, #255
02654     35 87 42 F5 | 	or	local15, local01
02658                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
02658     42 87 62 FC | 	wrlong	local15, local14
0265c                 | '   cursor_x+=1
0265c     34 0E 06 F1 | 	add	objptr, #52
02660     07 89 C2 FA | 	rdbyte	local16, objptr
02664     01 88 06 F1 | 	add	local16, #1
02668     07 89 42 FC | 	wrbyte	local16, objptr
0266c                 | '   if cursor_x==cpl
0266c     07 89 C2 FA | 	rdbyte	local16, objptr
02670     5C 0E 06 F1 | 	add	objptr, #92
02674     07 8B 02 FB | 	rdlong	local17, objptr
02678     90 0E 86 F1 | 	sub	objptr, #144
0267c     45 89 0A F2 | 	cmp	local16, local17 wz
02680     54 00 90 5D |  if_ne	jmp	#LR__0050
02684                 | '     cursor_x:=0
02684     34 0E 06 F1 | 	add	objptr, #52
02688     07 01 48 FC | 	wrbyte	#0, objptr
0268c                 | '     cursor_y+=1
0268c     01 0E 06 F1 | 	add	objptr, #1
02690     07 89 C2 FA | 	rdbyte	local16, objptr
02694     01 88 06 F1 | 	add	local16, #1
02698     07 89 42 FC | 	wrbyte	local16, objptr
0269c                 | '     if cursor_y>lines-1
0269c     5F 0E 06 F1 | 	add	objptr, #95
026a0     07 89 02 FB | 	rdlong	local16, objptr
026a4     01 88 86 F1 | 	sub	local16, #1
026a8     5F 0E 86 F1 | 	sub	objptr, #95
026ac     07 8B C2 FA | 	rdbyte	local17, objptr
026b0     35 0E 86 F1 | 	sub	objptr, #53
026b4     44 8B 5A F2 | 	cmps	local17, local16 wcz
026b8     1C 00 90 ED |  if_be	jmp	#LR__0049
026bc                 | '       scrollup()
026bc     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
026c0     94 0E 06 F1 | 	add	objptr, #148
026c4     07 8D 02 FB | 	rdlong	local18, objptr
026c8     01 8C 86 F1 | 	sub	local18, #1
026cc                 | '       cursor_y:=lines-1
026cc     5F 0E 86 F1 | 	sub	objptr, #95
026d0     07 8D 42 FC | 	wrbyte	local18, objptr
026d4     35 0E 86 F1 | 	sub	objptr, #53
026d8                 | LR__0049
026d8                 | LR__0050
026d8                 | LR__0051
026d8     AF F0 03 F6 | 	mov	ptra, fp
026dc     BF 00 A0 FD | 	call	#popregs_
026e0                 | _hng030rm_spin2_putchar_ret
026e0     2D 00 64 FD | 	ret
026e4                 | 
026e4                 | ' 
026e4                 | ' ''--------- Output a string at the cursor position, move the cursor
026e4                 | ' 
026e4                 | ' pub write(text) | iii,c,ncx,ncy
026e4                 | _hng030rm_spin2_write
026e4     11 5A 05 F6 | 	mov	COUNT_, #17
026e8     B0 00 A0 FD | 	call	#pushregs_
026ec     2E 6B 02 F6 | 	mov	local01, arg01
026f0     38 0E 06 F1 | 	add	objptr, #56
026f4     07 6D 02 FB | 	rdlong	local02, objptr
026f8     18 6C 66 F0 | 	shl	local02, #24
026fc     04 0E 06 F1 | 	add	objptr, #4
02700     07 6F 02 FB | 	rdlong	local03, objptr
02704     10 6E 66 F0 | 	shl	local03, #16
02708     37 6D 02 F1 | 	add	local02, local03
0270c                 | ' 
0270c                 | ' c:=write_color<<24+write_background<<16
0270c                 | ' 'debug(uhex_long(write_color))
0270c                 | ' ncy:=cursor_y
0270c     07 0E 86 F1 | 	sub	objptr, #7
02710     07 71 C2 FA | 	rdbyte	local04, objptr
02714                 | ' ncx:=cursor_x+strsize(text)
02714     01 0E 86 F1 | 	sub	objptr, #1
02718     07 73 C2 FA | 	rdbyte	local05, objptr
0271c     34 0E 86 F1 | 	sub	objptr, #52
02720     35 5D 02 F6 | 	mov	arg01, local01
02724     00 74 06 F6 | 	mov	local06, #0
02728     E4 D8 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
0272c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02730                 | LR__0052
02730     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02734     01 74 06 51 |  if_ne	add	local06, #1
02738     01 5C 06 51 |  if_ne	add	arg01, #1
0273c     F0 FF 9F 5D |  if_ne	jmp	#LR__0052
02740                 | LR__0053
02740     3A 2B 02 F6 | 	mov	result1, local06
02744     3A 73 02 F1 | 	add	local05, local06
02748     39 79 02 F6 | 	mov	local08, local05
0274c     E0 D8 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
02750     93 00 A0 FD | 	call	#FCACHE_LOAD_
02754                 | ' repeat while ncx>cpl-1
02754                 | LR__0054
02754     90 0E 06 F1 | 	add	objptr, #144
02758     07 73 02 FB | 	rdlong	local05, objptr
0275c     90 0E 86 F1 | 	sub	objptr, #144
02760     01 72 86 F1 | 	sub	local05, #1
02764     39 79 5A F2 | 	cmps	local08, local05 wcz
02768     18 00 90 ED |  if_be	jmp	#LR__0056
0276c                 | '   ncx-=cpl
0276c     90 0E 06 F1 | 	add	objptr, #144
02770     07 7B 02 FB | 	rdlong	local09, objptr
02774     90 0E 86 F1 | 	sub	objptr, #144
02778     3D 79 82 F1 | 	sub	local08, local09
0277c                 | '   ncy+=1
0277c     01 70 06 F1 | 	add	local04, #1
02780     D0 FF 9F FD | 	jmp	#LR__0054
02784                 | LR__0055
02784                 | LR__0056
02784                 | ' repeat while ncy>lines-1
02784                 | LR__0057
02784     94 0E 06 F1 | 	add	objptr, #148
02788     07 73 02 FB | 	rdlong	local05, objptr
0278c     94 0E 86 F1 | 	sub	objptr, #148
02790     01 72 86 F1 | 	sub	local05, #1
02794     39 71 5A F2 | 	cmps	local04, local05 wcz
02798     20 00 90 ED |  if_be	jmp	#LR__0058
0279c                 | '   ncy-=1
0279c     01 70 86 F1 | 	sub	local04, #1
027a0                 | '   scrollup()
027a0     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
027a4                 | '   cursor_y-=1
027a4     35 0E 06 F1 | 	add	objptr, #53
027a8     07 73 C2 FA | 	rdbyte	local05, objptr
027ac     01 72 86 F1 | 	sub	local05, #1
027b0     07 73 42 FC | 	wrbyte	local05, objptr
027b4     35 0E 86 F1 | 	sub	objptr, #53
027b8     C8 FF 9F FD | 	jmp	#LR__0057
027bc                 | LR__0058
027bc                 | ' 
027bc                 | ' repeat iii from 0 to strsize(text)-1
027bc     00 7C 06 F6 | 	mov	local10, #0
027c0     35 5D 02 F6 | 	mov	arg01, local01
027c4     00 74 06 F6 | 	mov	local06, #0
027c8     44 D8 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
027cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
027d0                 | LR__0059
027d0     2E 77 CA FA | 	rdbyte	local07, arg01 wz
027d4     01 74 06 51 |  if_ne	add	local06, #1
027d8     01 5C 06 51 |  if_ne	add	arg01, #1
027dc     F0 FF 9F 5D |  if_ne	jmp	#LR__0059
027e0                 | LR__0060
027e0     3A 2B 02 F6 | 	mov	result1, local06
027e4     15 7F 02 F6 | 	mov	local11, result1
027e8     01 7E 86 F1 | 	sub	local11, #1
027ec     00 7E 5E F2 | 	cmps	local11, #0 wcz
027f0     01 80 06 16 |  if_a	mov	local12, #1
027f4     01 80 66 E6 |  if_be	neg	local12, #1
027f8     40 7F 02 F1 | 	add	local11, local12
027fc     58 D8 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
02800     93 00 A0 FD | 	call	#FCACHE_LOAD_
02804                 | LR__0061
02804     90 0E 06 F1 | 	add	objptr, #144
02808     07 83 02 FB | 	rdlong	local13, objptr
0280c     5B 0E 86 F1 | 	sub	objptr, #91
02810     07 85 C2 FA | 	rdbyte	local14, objptr
02814     42 83 02 FD | 	qmul	local13, local14
02818     18 86 62 FD | 	getqx	local15
0281c     01 0E 86 F1 | 	sub	objptr, #1
02820     07 83 C2 FA | 	rdbyte	local13, objptr
02824     34 0E 86 F1 | 	sub	objptr, #52
02828     41 87 02 F1 | 	add	local15, local13
0282c     3E 87 02 F1 | 	add	local15, local10
02830     02 86 66 F0 | 	shl	local15, #2
02834     07 89 02 FB | 	rdlong	local16, objptr
02838     43 89 02 F1 | 	add	local16, local15
0283c     44 8B 02 FB | 	rdlong	local17, local16
02840     7F 00 00 FF 
02844     FF 8B 06 F5 | 	and	local17, ##65535
02848     36 8B 42 F5 | 	or	local17, local02
0284c                 | ' 
0284c                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
0284c     44 8B 62 FC | 	wrlong	local17, local16
02850     40 7D 02 F1 | 	add	local10, local12
02854     3F 7D 0A F2 | 	cmp	local10, local11 wz
02858     A8 FF 9F 5D |  if_ne	jmp	#LR__0061
0285c                 | LR__0062
0285c                 | ' 
0285c                 | ' outtextxy(cursor_x,cursor_y,text)
0285c     34 0E 06 F1 | 	add	objptr, #52
02860     07 5D C2 FA | 	rdbyte	arg01, objptr
02864     01 0E 06 F1 | 	add	objptr, #1
02868     07 5F C2 FA | 	rdbyte	arg02, objptr
0286c     35 0E 86 F1 | 	sub	objptr, #53
02870     35 61 02 F6 | 	mov	arg03, local01
02874     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
02878                 | ' 
02878                 | ' cursor_x:=ncx
02878     34 0E 06 F1 | 	add	objptr, #52
0287c     07 79 42 FC | 	wrbyte	local08, objptr
02880                 | ' cursor_y:=ncy
02880     01 0E 06 F1 | 	add	objptr, #1
02884     07 71 42 FC | 	wrbyte	local04, objptr
02888     35 0E 86 F1 | 	sub	objptr, #53
0288c     AF F0 03 F6 | 	mov	ptra, fp
02890     BF 00 A0 FD | 	call	#popregs_
02894                 | _hng030rm_spin2_write_ret
02894     2D 00 64 FD | 	ret
02898                 | 
02898                 | ' 
02898                 | ' ''-----------  Scroll the screen one line up
02898                 | ' 
02898                 | ' pub scrollup() | i
02898                 | _hng030rm_spin2_scrollup
02898     0A 5A 05 F6 | 	mov	COUNT_, #10
0289c     B0 00 A0 FD | 	call	#pushregs_
028a0     90 0E 06 F1 | 	add	objptr, #144
028a4     07 6B 02 FB | 	rdlong	local01, objptr
028a8     90 0E 86 F1 | 	sub	objptr, #144
028ac     02 6A 66 F0 | 	shl	local01, #2
028b0     07 5F 02 FB | 	rdlong	arg02, objptr
028b4     35 5F 02 F1 | 	add	arg02, local01
028b8     30 0E 06 F1 | 	add	objptr, #48
028bc     07 61 02 FB | 	rdlong	arg03, objptr
028c0     60 0E 06 F1 | 	add	objptr, #96
028c4     07 6D 02 FB | 	rdlong	local02, objptr
028c8     90 0E 86 F1 | 	sub	objptr, #144
028cc     36 61 82 F1 | 	sub	arg03, local02
028d0                 | ' 
028d0                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
028d0     07 5D 02 FB | 	rdlong	arg01, objptr
028d4     EC 35 B0 FD | 	call	#__system__longmove
028d8                 | ' repeat i from buflen-cpl to buflen-1
028d8     30 0E 06 F1 | 	add	objptr, #48
028dc     07 6F 02 FB | 	rdlong	local03, objptr
028e0     60 0E 06 F1 | 	add	objptr, #96
028e4     07 6D 02 FB | 	rdlong	local02, objptr
028e8     36 6F 82 F1 | 	sub	local03, local02
028ec     60 0E 86 F1 | 	sub	objptr, #96
028f0     07 71 02 FB | 	rdlong	local04, objptr
028f4     01 70 86 F1 | 	sub	local04, #1
028f8     07 73 02 FB | 	rdlong	local05, objptr
028fc     60 0E 06 F1 | 	add	objptr, #96
02900     07 75 02 FB | 	rdlong	local06, objptr
02904     90 0E 86 F1 | 	sub	objptr, #144
02908     3A 73 82 F1 | 	sub	local05, local06
0290c     39 71 5A F2 | 	cmps	local04, local05 wcz
02910     01 76 06 16 |  if_a	mov	local07, #1
02914     01 76 66 E6 |  if_be	neg	local07, #1
02918     3B 71 02 F1 | 	add	local04, local07
0291c     10 D7 9F FE | 	loc	pa,	#(@LR__0064-@LR__0063)
02920     93 00 A0 FD | 	call	#FCACHE_LOAD_
02924                 | LR__0063
02924     37 79 02 F6 | 	mov	local08, local03
02928     02 78 66 F0 | 	shl	local08, #2
0292c     07 7B 02 FB | 	rdlong	local09, objptr
02930     3C 7B 02 F1 | 	add	local09, local08
02934     3D 7D 02 FB | 	rdlong	local10, local09
02938     80 FF 7F FF 
0293c     00 7C 06 F5 | 	and	local10, ##-65536
02940     20 7C 46 F5 | 	or	local10, #32
02944                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02944     3D 7D 62 FC | 	wrlong	local10, local09
02948     3B 6F 02 F1 | 	add	local03, local07
0294c     38 6F 0A F2 | 	cmp	local03, local04 wz
02950     D0 FF 9F 5D |  if_ne	jmp	#LR__0063
02954                 | LR__0064
02954     AF F0 03 F6 | 	mov	ptra, fp
02958     BF 00 A0 FD | 	call	#popregs_
0295c                 | _hng030rm_spin2_scrollup_ret
0295c     2D 00 64 FD | 	ret
02960                 | 
02960                 | ' 
02960                 | ' 
02960                 | ' 
02960                 | ' pub inttostr2(i,d):result |q,pos,k,j
02960                 | _hng030rm_spin2_inttostr2
02960                 | ' 
02960                 | ' j:=i
02960     2F 31 02 F6 | 	mov	_var01, arg02
02964     01 30 86 F1 | 	sub	_var01, #1
02968                 | ' pos:=d-1
02968     18 33 02 F6 | 	mov	_var02, _var01
0296c                 | ' k:=0
0296c     44 0E 06 F1 | 	add	objptr, #68
02970     07 5F 02 F1 | 	add	arg02, objptr
02974                 | ' 
02974                 | ' n_string[d]:=0
02974     2F 01 48 FC | 	wrbyte	#0, arg02
02978                 | ' repeat k from 0 to d-1
02978     00 34 06 F6 | 	mov	_var03, #0
0297c     00 30 5E F2 | 	cmps	_var01, #0 wcz
02980     44 0E 86 F1 | 	sub	objptr, #68
02984     01 36 06 16 |  if_a	mov	_var04, #1
02988     01 36 66 E6 |  if_be	neg	_var04, #1
0298c     1B 31 02 F1 | 	add	_var01, _var04
02990     8C D6 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
02994     93 00 A0 FD | 	call	#FCACHE_LOAD_
02998                 | LR__0065
02998     1A 39 02 F6 | 	mov	_var05, _var03
0299c     44 0E 06 F1 | 	add	objptr, #68
029a0     07 39 02 F1 | 	add	_var05, objptr
029a4                 | '   n_string[k]:=48
029a4     1C 61 48 FC | 	wrbyte	#48, _var05
029a8     1B 35 02 F1 | 	add	_var03, _var04
029ac     18 35 0A F2 | 	cmp	_var03, _var01 wz
029b0     44 0E 86 F1 | 	sub	objptr, #68
029b4     E0 FF 9F 5D |  if_ne	jmp	#LR__0065
029b8                 | LR__0066
029b8                 | ' 
029b8                 | ' if (j<>0)
029b8     00 5C 0E F2 | 	cmp	arg01, #0 wz
029bc     40 00 90 AD |  if_e	jmp	#LR__0069
029c0                 | ' 
029c0                 | '   repeat while (pos>-1)
029c0                 | LR__0067
029c0     FF FF 7F FF 
029c4     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
029c8     34 00 90 ED |  if_be	jmp	#LR__0068
029cc     2E 0B 03 F6 | 	mov	muldiva_, arg01
029d0     0A 0C 07 F6 | 	mov	muldivb_, #10
029d4     CC 00 A0 FD | 	call	#unsdivide_
029d8     85 3B 02 F6 | 	mov	_var06, muldiva_
029dc                 | '     q:=j+//10
029dc                 | '     q:=48+q
029dc     30 3A 06 F1 | 	add	_var06, #48
029e0     19 3D 02 F6 | 	mov	_var07, _var02
029e4     44 0E 06 F1 | 	add	objptr, #68
029e8     07 3D 02 F1 | 	add	_var07, objptr
029ec                 | '     n_string[pos]:=q
029ec     1E 3B 42 FC | 	wrbyte	_var06, _var07
029f0                 | '     j:=j+/10
029f0     86 5D 02 F6 | 	mov	arg01, muldivb_
029f4                 | '     pos-=1
029f4     01 32 86 F1 | 	sub	_var02, #1
029f8     44 0E 86 F1 | 	sub	objptr, #68
029fc     C0 FF 9F FD | 	jmp	#LR__0067
02a00                 | LR__0068
02a00                 | LR__0069
02a00     44 0E 06 F1 | 	add	objptr, #68
02a04     07 2B 02 F6 | 	mov	result1, objptr
02a08     44 0E 86 F1 | 	sub	objptr, #68
02a0c                 | ' 
02a0c                 | ' 
02a0c                 | ' q:=@n_string
02a0c                 | ' return q
02a0c                 | _hng030rm_spin2_inttostr2_ret
02a0c     2D 00 64 FD | 	ret
02a10                 | 
02a10                 | ' 
02a10                 | ' 
02a10                 | ' 
02a10                 | ' '*************************************************************************
02a10                 | ' '                                                                        *
02a10                 | ' '  Mode setting and driver start                                                          *
02a10                 | ' '                                                                        *
02a10                 | ' '*************************************************************************
02a10                 | ' 
02a10                 | ' ''---------  Set the graphics mode
02a10                 | ' 
02a10                 | ' 
02a10                 | ' 
02a10                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02a10                 | _hng030rm_spin2_setmode
02a10     50 5A 05 F6 | 	mov	COUNT_, #80
02a14     B0 00 A0 FD | 	call	#pushregs_
02a18     2E 6B 02 F6 | 	mov	local01, arg01
02a1c                 | ' 
02a1c                 | ' '' mode:tn_bb_cc_vv_hh
02a1c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02a1c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02a1c                 | ' 
02a1c                 | ' if mode==(512+192+48)
02a1c     01 00 00 FF 
02a20     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02a24                 | '   return 'no RAM
02a24     1C 0A 90 AD |  if_e	jmp	#LR__0110
02a28                 | ' 
02a28                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02a28     35 6D 02 F6 | 	mov	local02, local01
02a2c     06 6C 46 F0 | 	shr	local02, #6
02a30     07 6C 06 F5 | 	and	local02, #7
02a34     08 6C 26 F3 | 	fle	local02, #8
02a38     36 6F 02 F6 | 	mov	local03, local02
02a3c     30 6E 62 FD | 	jmprel	local03
02a40                 | LR__0070
02a40     20 00 90 FD | 	jmp	#LR__0071
02a44     58 00 90 FD | 	jmp	#LR__0072
02a48     90 00 90 FD | 	jmp	#LR__0073
02a4c     C8 00 90 FD | 	jmp	#LR__0074
02a50     00 01 90 FD | 	jmp	#LR__0075
02a54     38 01 90 FD | 	jmp	#LR__0076
02a58     70 01 90 FD | 	jmp	#LR__0077
02a5c     A8 01 90 FD | 	jmp	#LR__0078
02a60     E4 01 90 FD | 	jmp	#LR__0079
02a64                 | LR__0071
02a64                 | ' 
02a64                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02a64     50 0E 06 F1 | 	add	objptr, #80
02a68     07 5D 02 F6 | 	mov	arg01, objptr
02a6c     50 0E 86 F1 | 	sub	objptr, #80
02a70     0E 00 00 FF 
02a74     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02a78     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a7c     38 73 02 F6 | 	mov	local05, local04
02a80     10 74 06 F6 | 	mov	local06, #16
02a84     39 5F 02 F6 | 	mov	arg02, local05
02a88     10 60 06 F6 | 	mov	arg03, #16
02a8c     0E 00 00 FF 
02a90     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02a94     2C 34 B0 FD | 	call	#__system__longmove
02a98     15 77 02 F6 | 	mov	local07, result1
02a9c     A8 01 90 FD | 	jmp	#LR__0079
02aa0                 | LR__0072
02aa0                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02aa0     50 0E 06 F1 | 	add	objptr, #80
02aa4     07 5D 02 F6 | 	mov	arg01, objptr
02aa8     50 0E 86 F1 | 	sub	objptr, #80
02aac     0E 00 00 FF 
02ab0     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02ab4     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02ab8     38 73 02 F6 | 	mov	local05, local04
02abc     10 74 06 F6 | 	mov	local06, #16
02ac0     39 5F 02 F6 | 	mov	arg02, local05
02ac4     10 60 06 F6 | 	mov	arg03, #16
02ac8     0E 00 00 FF 
02acc     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02ad0     F0 33 B0 FD | 	call	#__system__longmove
02ad4     15 77 02 F6 | 	mov	local07, result1
02ad8     6C 01 90 FD | 	jmp	#LR__0079
02adc                 | LR__0073
02adc                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02adc     50 0E 06 F1 | 	add	objptr, #80
02ae0     07 5D 02 F6 | 	mov	arg01, objptr
02ae4     50 0E 86 F1 | 	sub	objptr, #80
02ae8     0E 00 00 FF 
02aec     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02af0     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02af4     38 73 02 F6 | 	mov	local05, local04
02af8     10 74 06 F6 | 	mov	local06, #16
02afc     39 5F 02 F6 | 	mov	arg02, local05
02b00     10 60 06 F6 | 	mov	arg03, #16
02b04     0E 00 00 FF 
02b08     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02b0c     B4 33 B0 FD | 	call	#__system__longmove
02b10     15 77 02 F6 | 	mov	local07, result1
02b14     30 01 90 FD | 	jmp	#LR__0079
02b18                 | LR__0074
02b18                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02b18     50 0E 06 F1 | 	add	objptr, #80
02b1c     07 5D 02 F6 | 	mov	arg01, objptr
02b20     50 0E 86 F1 | 	sub	objptr, #80
02b24     0E 00 00 FF 
02b28     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b2c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b30     38 73 02 F6 | 	mov	local05, local04
02b34     10 74 06 F6 | 	mov	local06, #16
02b38     39 5F 02 F6 | 	mov	arg02, local05
02b3c     10 60 06 F6 | 	mov	arg03, #16
02b40     0E 00 00 FF 
02b44     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b48     78 33 B0 FD | 	call	#__system__longmove
02b4c     15 77 02 F6 | 	mov	local07, result1
02b50     F4 00 90 FD | 	jmp	#LR__0079
02b54                 | LR__0075
02b54                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02b54     50 0E 06 F1 | 	add	objptr, #80
02b58     07 5D 02 F6 | 	mov	arg01, objptr
02b5c     50 0E 86 F1 | 	sub	objptr, #80
02b60     0E 00 00 FF 
02b64     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02b68     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b6c     38 73 02 F6 | 	mov	local05, local04
02b70     10 74 06 F6 | 	mov	local06, #16
02b74     39 5F 02 F6 | 	mov	arg02, local05
02b78     10 60 06 F6 | 	mov	arg03, #16
02b7c     0E 00 00 FF 
02b80     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02b84     3C 33 B0 FD | 	call	#__system__longmove
02b88     15 77 02 F6 | 	mov	local07, result1
02b8c     B8 00 90 FD | 	jmp	#LR__0079
02b90                 | LR__0076
02b90                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02b90     50 0E 06 F1 | 	add	objptr, #80
02b94     07 5D 02 F6 | 	mov	arg01, objptr
02b98     50 0E 86 F1 | 	sub	objptr, #80
02b9c     0E 00 00 FF 
02ba0     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02ba4     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02ba8     38 73 02 F6 | 	mov	local05, local04
02bac     10 74 06 F6 | 	mov	local06, #16
02bb0     39 5F 02 F6 | 	mov	arg02, local05
02bb4     10 60 06 F6 | 	mov	arg03, #16
02bb8     0E 00 00 FF 
02bbc     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02bc0     00 33 B0 FD | 	call	#__system__longmove
02bc4     15 77 02 F6 | 	mov	local07, result1
02bc8     7C 00 90 FD | 	jmp	#LR__0079
02bcc                 | LR__0077
02bcc                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02bcc     50 0E 06 F1 | 	add	objptr, #80
02bd0     07 5D 02 F6 | 	mov	arg01, objptr
02bd4     50 0E 86 F1 | 	sub	objptr, #80
02bd8     0E 00 00 FF 
02bdc     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02be0     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02be4     38 73 02 F6 | 	mov	local05, local04
02be8     10 74 06 F6 | 	mov	local06, #16
02bec     39 5F 02 F6 | 	mov	arg02, local05
02bf0     10 60 06 F6 | 	mov	arg03, #16
02bf4     0E 00 00 FF 
02bf8     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02bfc     C4 32 B0 FD | 	call	#__system__longmove
02c00     15 77 02 F6 | 	mov	local07, result1
02c04     40 00 90 FD | 	jmp	#LR__0079
02c08                 | LR__0078
02c08                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02c08     50 0E 06 F1 | 	add	objptr, #80
02c0c     07 79 02 F6 | 	mov	local08, objptr
02c10     3C 7B 02 F6 | 	mov	local09, local08
02c14     0F 00 00 FF 
02c18     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02c1c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02c20     38 73 02 F6 | 	mov	local05, local04
02c24     10 74 06 F6 | 	mov	local06, #16
02c28     3D 5D 02 F6 | 	mov	arg01, local09
02c2c     39 5F 02 F6 | 	mov	arg02, local05
02c30     10 60 06 F6 | 	mov	arg03, #16
02c34     50 0E 86 F1 | 	sub	objptr, #80
02c38     0F 00 00 FF 
02c3c     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02c40     80 32 B0 FD | 	call	#__system__longmove
02c44     15 77 02 F6 | 	mov	local07, result1
02c48                 | LR__0079
02c48                 | ' 
02c48                 | ' ' 4-bit graphics: do nothing with timings :)
02c48                 | ' if mode<512
02c48     01 00 00 FF 
02c4c     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02c50     20 00 90 3D |  if_ae	jmp	#LR__0080
02c54     0C 00 00 FF 
02c58     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c5c     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02c60                 | '   palette_ptr:=@ataripalette
02c60     18 0E 06 F1 | 	add	objptr, #24
02c64     07 7D 62 FC | 	wrlong	local10, objptr
02c68     18 0E 86 F1 | 	sub	objptr, #24
02c6c     0C 00 00 FF 
02c70     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c74                 | LR__0080
02c74                 | ' 
02c74                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c74     35 6D 02 F6 | 	mov	local02, local01
02c78     01 00 00 FF 
02c7c     30 6C 06 F5 | 	and	local02, ##560
02c80     01 00 00 FF 
02c84     30 6C 0E F2 | 	cmp	local02, ##560 wz
02c88     48 00 90 5D |  if_ne	jmp	#LR__0081
02c8c                 | '   timings[5]:=4
02c8c     64 0E 06 F1 | 	add	objptr, #100
02c90     07 09 68 FC | 	wrlong	#4, objptr
02c94     18 0E 06 F1 | 	add	objptr, #24
02c98     07 7F 02 FB | 	rdlong	local11, objptr
02c9c     01 7E 66 F0 | 	shl	local11, #1
02ca0                 | '   timings[11]:=timings[11]<<1
02ca0     07 7F 62 FC | 	wrlong	local11, objptr
02ca4                 | '   putpixel:=p8
02ca4     6C 0E 06 F1 | 	add	objptr, #108
02ca8     07 6D 02 FB | 	rdlong	local02, objptr
02cac     10 0E 86 F1 | 	sub	objptr, #16
02cb0     07 6D 62 FC | 	wrlong	local02, objptr
02cb4     0C 00 00 FF 
02cb8     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02cbc     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02cc0                 | '   palette_ptr:=@ataripalette
02cc0     C0 0E 86 F1 | 	sub	objptr, #192
02cc4     07 81 62 FC | 	wrlong	local12, objptr
02cc8     18 0E 86 F1 | 	sub	objptr, #24
02ccc     0C 00 00 FF 
02cd0     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02cd4                 | LR__0081
02cd4                 | ' 
02cd4                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02cd4     35 6D 02 F6 | 	mov	local02, local01
02cd8     01 00 00 FF 
02cdc     30 6C 06 F5 | 	and	local02, ##560
02ce0     01 00 00 FF 
02ce4     10 6C 0E F2 | 	cmp	local02, ##528 wz
02ce8     48 00 90 5D |  if_ne	jmp	#LR__0082
02cec                 | '   timings[5]:=16
02cec     64 0E 06 F1 | 	add	objptr, #100
02cf0     07 21 68 FC | 	wrlong	#16, objptr
02cf4     18 0E 06 F1 | 	add	objptr, #24
02cf8     07 83 02 FB | 	rdlong	local13, objptr
02cfc     01 82 46 F0 | 	shr	local13, #1
02d00                 | '   timings[11]:=timings[11]>>1
02d00     07 83 62 FC | 	wrlong	local13, objptr
02d04                 | '   putpixel:=p2
02d04     64 0E 06 F1 | 	add	objptr, #100
02d08     07 6D 02 FB | 	rdlong	local02, objptr
02d0c     08 0E 86 F1 | 	sub	objptr, #8
02d10     07 6D 62 FC | 	wrlong	local02, objptr
02d14     0C 00 00 FF 
02d18     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02d1c     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02d20                 | '   palette_ptr:=@fourcolors
02d20     C0 0E 86 F1 | 	sub	objptr, #192
02d24     07 85 62 FC | 	wrlong	local14, objptr
02d28     18 0E 86 F1 | 	sub	objptr, #24
02d2c     0C 00 00 FF 
02d30     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02d34                 | LR__0082
02d34                 | ' 
02d34                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02d34     35 6D 02 F6 | 	mov	local02, local01
02d38     01 00 00 FF 
02d3c     30 6C 06 F5 | 	and	local02, ##560
02d40     01 00 00 FF 
02d44     00 6C 0E F2 | 	cmp	local02, ##512 wz
02d48     48 00 90 5D |  if_ne	jmp	#LR__0083
02d4c                 | '   timings[5]:=32
02d4c     64 0E 06 F1 | 	add	objptr, #100
02d50     07 41 68 FC | 	wrlong	#32, objptr
02d54     18 0E 06 F1 | 	add	objptr, #24
02d58     07 87 02 FB | 	rdlong	local15, objptr
02d5c     02 86 46 F0 | 	shr	local15, #2
02d60                 | '   timings[11]:=timings[11]>>2
02d60     07 87 62 FC | 	wrlong	local15, objptr
02d64                 | '   putpixel:=p1
02d64     60 0E 06 F1 | 	add	objptr, #96
02d68     07 6D 02 FB | 	rdlong	local02, objptr
02d6c     04 0E 86 F1 | 	sub	objptr, #4
02d70     07 6D 62 FC | 	wrlong	local02, objptr
02d74     0C 00 00 FF 
02d78     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d7c     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02d80                 | '   palette_ptr:=@twocolors
02d80     C0 0E 86 F1 | 	sub	objptr, #192
02d84     07 89 62 FC | 	wrlong	local16, objptr
02d88     18 0E 86 F1 | 	sub	objptr, #24
02d8c     0C 00 00 FF 
02d90     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d94                 | LR__0083
02d94                 | ' 
02d94                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d94     35 6D 02 F6 | 	mov	local02, local01
02d98     01 00 00 FF 
02d9c     30 6C 06 F5 | 	and	local02, ##560
02da0     01 00 00 FF 
02da4     20 6C 0E F2 | 	cmp	local02, ##544 wz
02da8     30 00 90 5D |  if_ne	jmp	#LR__0084
02dac                 | '   putpixel:=p4
02dac     E4 0E 06 F1 | 	add	objptr, #228
02db0     07 6D 02 FB | 	rdlong	local02, objptr
02db4     0C 0E 86 F1 | 	sub	objptr, #12
02db8     07 6D 62 FC | 	wrlong	local02, objptr
02dbc     0C 00 00 FF 
02dc0     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02dc4     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02dc8                 | '   palette_ptr:=@vga16
02dc8     C0 0E 86 F1 | 	sub	objptr, #192
02dcc     07 8B 62 FC | 	wrlong	local17, objptr
02dd0     18 0E 86 F1 | 	sub	objptr, #24
02dd4     0C 00 00 FF 
02dd8     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02ddc                 | LR__0084
02ddc                 | ' 
02ddc                 | ' repeat i from 0 to 4
02ddc     00 8C 06 F6 | 	mov	local18, #0
02de0     60 D2 9F FE | 	loc	pa,	#(@LR__0086-@LR__0085)
02de4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02de8                 | LR__0085
02de8     46 8F 02 F6 | 	mov	local19, local18
02dec     02 8E 66 F0 | 	shl	local19, #2
02df0     50 0E 06 F1 | 	add	objptr, #80
02df4     07 8F 02 F1 | 	add	local19, objptr
02df8     2C 0E 86 F1 | 	sub	objptr, #44
02dfc     07 91 02 FB | 	rdlong	local20, objptr
02e00     24 0E 86 F1 | 	sub	objptr, #36
02e04     11 90 66 F0 | 	shl	local20, #17
02e08     47 93 02 FB | 	rdlong	local21, local19
02e0c     48 93 02 F1 | 	add	local21, local20
02e10     49 95 02 F6 | 	mov	local22, local21
02e14     80 40 38 FF 
02e18     00 94 06 F1 | 	add	local22, ##1887502336
02e1c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02e1c     47 95 62 FC | 	wrlong	local22, local19
02e20     01 8C 06 F1 | 	add	local18, #1
02e24     05 8C 5E F2 | 	cmps	local18, #5 wcz
02e28     BC FF 9F CD |  if_b	jmp	#LR__0085
02e2c                 | LR__0086
02e2c     24 0E 06 F1 | 	add	objptr, #36
02e30     07 97 02 FB | 	rdlong	local23, objptr
02e34     11 96 66 F0 | 	shl	local23, #17
02e38     40 0E 06 F1 | 	add	objptr, #64
02e3c     07 99 02 FB | 	rdlong	local24, objptr
02e40     4B 99 02 F1 | 	add	local24, local23
02e44                 | ' timings[5]:=timings[5]+hdmibase<<17
02e44     07 99 62 FC | 	wrlong	local24, objptr
02e48                 | ' clkfreq:=timings[13]
02e48     20 0E 06 F1 | 	add	objptr, #32
02e4c     07 6D 02 FB | 	rdlong	local02, objptr
02e50     14 6C 66 FC | 	wrlong	local02, #20
02e54                 | ' hubset(timings[14])
02e54     04 0E 06 F1 | 	add	objptr, #4
02e58     07 5D 02 FB | 	rdlong	arg01, objptr
02e5c     88 0E 86 F1 | 	sub	objptr, #136
02e60     00 5C 62 FD | 	hubset	arg01
02e64                 | ' waitms(1)
02e64     01 5C 06 F6 | 	mov	arg01, #1
02e68     F8 32 B0 FD | 	call	#__system___waitms
02e6c     35 9B 02 F6 | 	mov	local25, local01
02e70     03 9A 06 F5 | 	and	local25, #3
02e74     4D 9D C2 F9 | 	decod	local26, local25
02e78                 | ' 
02e78                 | ' 
02e78                 | ' xzoom:=1<<(mode & 3)
02e78     CC 0E 06 F1 | 	add	objptr, #204
02e7c     07 9D 62 FC | 	wrlong	local26, objptr
02e80                 | ' 
02e80                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02e80     4E 79 02 F6 | 	mov	local08, local26
02e84     CC 0E 86 F1 | 	sub	objptr, #204
02e88     08 78 0E F2 | 	cmp	local08, #8 wz
02e8c     24 00 90 5D |  if_ne	jmp	#LR__0087
02e90     35 7B 02 F6 | 	mov	local09, local01
02e94     04 7A 46 F0 | 	shr	local09, #4
02e98     03 7A 06 F5 | 	and	local09, #3
02e9c     03 7A 0E F2 | 	cmp	local09, #3 wz
02ea0     10 00 90 AD |  if_e	jmp	#LR__0087
02ea4                 | '   xzoom:=4
02ea4     04 6C 06 F6 | 	mov	local02, #4
02ea8     CC 0E 06 F1 | 	add	objptr, #204
02eac     07 09 68 FC | 	wrlong	#4, objptr
02eb0     CC 0E 86 F1 | 	sub	objptr, #204
02eb4                 | LR__0087
02eb4     35 9F 02 F6 | 	mov	local27, local01
02eb8     02 9E 46 F0 | 	shr	local27, #2
02ebc     03 9E 06 F5 | 	and	local27, #3
02ec0     4F A1 C2 F9 | 	decod	local28, local27
02ec4                 | ' 
02ec4                 | ' yzoom:=1<<((mode>>2) & 3)
02ec4     D0 0E 06 F1 | 	add	objptr, #208
02ec8     07 A1 62 FC | 	wrlong	local28, objptr
02ecc     04 0E 86 F1 | 	sub	objptr, #4
02ed0     07 79 02 FB | 	rdlong	local08, objptr
02ed4     04 0E 06 F1 | 	add	objptr, #4
02ed8     07 71 02 FB | 	rdlong	local04, objptr
02edc     38 79 02 FD | 	qmul	local08, local04
02ee0     18 A2 62 FD | 	getqx	local29
02ee4                 | ' azoom:=xzoom*yzoom
02ee4     04 0E 06 F1 | 	add	objptr, #4
02ee8     07 A3 62 FC | 	wrlong	local29, objptr
02eec                 | ' 
02eec                 | ' cpl:=timings[11]
02eec     58 0E 86 F1 | 	sub	objptr, #88
02ef0     07 6D 02 FB | 	rdlong	local02, objptr
02ef4     14 0E 06 F1 | 	add	objptr, #20
02ef8     07 6D 62 FC | 	wrlong	local02, objptr
02efc     90 0E 86 F1 | 	sub	objptr, #144
02f00                 | ' if (mode<512)
02f00     01 00 00 FF 
02f04     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02f08     60 00 90 3D |  if_ae	jmp	#LR__0088
02f0c     80 0E 06 F1 | 	add	objptr, #128
02f10     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f14     04 0A 47 F0 | 	shr	muldiva_, #4
02f18     50 0E 06 F1 | 	add	objptr, #80
02f1c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f20     D0 0E 86 F1 | 	sub	objptr, #208
02f24     CC 00 A0 FD | 	call	#unsdivide_
02f28                 | '   lines:=(timings[12]>>4)+/yzoom
02f28     94 0E 06 F1 | 	add	objptr, #148
02f2c     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f30                 | '   if ((timings[12]>>4)+//yzoom) <>0
02f30     14 0E 86 F1 | 	sub	objptr, #20
02f34     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f38     04 0A 47 F0 | 	shr	muldiva_, #4
02f3c     50 0E 06 F1 | 	add	objptr, #80
02f40     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f44     D0 0E 86 F1 | 	sub	objptr, #208
02f48     CC 00 A0 FD | 	call	#unsdivide_
02f4c     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f50     AC 00 90 AD |  if_e	jmp	#LR__0091
02f54                 | '     lines +=1
02f54     94 0E 06 F1 | 	add	objptr, #148
02f58     07 6D 02 FB | 	rdlong	local02, objptr
02f5c     01 6C 06 F1 | 	add	local02, #1
02f60     07 6D 62 FC | 	wrlong	local02, objptr
02f64     94 0E 86 F1 | 	sub	objptr, #148
02f68                 | ' 
02f68                 | ' else
02f68     94 00 90 FD | 	jmp	#LR__0091
02f6c                 | LR__0088
02f6c     80 0E 06 F1 | 	add	objptr, #128
02f70     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f74     50 0E 06 F1 | 	add	objptr, #80
02f78     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f7c     D0 0E 86 F1 | 	sub	objptr, #208
02f80     D0 00 A0 FD | 	call	#divide_
02f84                 | '   lines:=timings[12]/yzoom
02f84     94 0E 06 F1 | 	add	objptr, #148
02f88     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f8c                 | '   if cpl//xzoom==0
02f8c     04 0E 86 F1 | 	sub	objptr, #4
02f90     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f94     3C 0E 06 F1 | 	add	objptr, #60
02f98     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f9c     CC 0E 86 F1 | 	sub	objptr, #204
02fa0     D0 00 A0 FD | 	call	#divide_
02fa4     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02fa8     28 00 90 5D |  if_ne	jmp	#LR__0089
02fac                 | '     cpl:=cpl/xzoom
02fac     90 0E 06 F1 | 	add	objptr, #144
02fb0     07 0B 03 FB | 	rdlong	muldiva_, objptr
02fb4     3C 0E 06 F1 | 	add	objptr, #60
02fb8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02fbc     CC 0E 86 F1 | 	sub	objptr, #204
02fc0     D0 00 A0 FD | 	call	#divide_
02fc4     90 0E 06 F1 | 	add	objptr, #144
02fc8     07 0D 63 FC | 	wrlong	muldivb_, objptr
02fcc     90 0E 86 F1 | 	sub	objptr, #144
02fd0                 | '   else
02fd0     2C 00 90 FD | 	jmp	#LR__0090
02fd4                 | LR__0089
02fd4     90 0E 06 F1 | 	add	objptr, #144
02fd8     07 0B 03 FB | 	rdlong	muldiva_, objptr
02fdc     3C 0E 06 F1 | 	add	objptr, #60
02fe0     07 0D 03 FB | 	rdlong	muldivb_, objptr
02fe4     CC 0E 86 F1 | 	sub	objptr, #204
02fe8     D0 00 A0 FD | 	call	#divide_
02fec     86 A5 02 F6 | 	mov	local30, muldivb_
02ff0     01 A4 06 F1 | 	add	local30, #1
02ff4                 | '     cpl:=cpl/xzoom+1
02ff4     90 0E 06 F1 | 	add	objptr, #144
02ff8     07 A5 62 FC | 	wrlong	local30, objptr
02ffc     90 0E 86 F1 | 	sub	objptr, #144
03000                 | LR__0090
03000                 | LR__0091
03000     90 0E 06 F1 | 	add	objptr, #144
03004     07 79 02 FB | 	rdlong	local08, objptr
03008     04 0E 06 F1 | 	add	objptr, #4
0300c     07 71 02 FB | 	rdlong	local04, objptr
03010     38 79 02 FD | 	qmul	local08, local04
03014     18 A6 62 FD | 	getqx	local31
03018                 | ' 
03018                 | ' buflen:=(cpl*lines)
03018     64 0E 86 F1 | 	sub	objptr, #100
0301c     07 A7 62 FC | 	wrlong	local31, objptr
03020     30 0E 86 F1 | 	sub	objptr, #48
03024     02 A6 66 F0 | 	shl	local31, #2
03028     13 A8 C6 F9 | 	decod	local32, #19
0302c     53 A9 82 F1 | 	sub	local32, local31
03030                 | ' buf_ptr:=$80000-4*buflen
03030     07 A9 62 FC | 	wrlong	local32, objptr
03034     50 0E 06 F1 | 	add	objptr, #80
03038     07 AB 02 F6 | 	mov	local33, objptr
0303c                 | ' mode_ptr:=@timings
0303c     3C 0E 86 F1 | 	sub	objptr, #60
03040     07 AB 62 FC | 	wrlong	local33, objptr
03044                 | ' graphmode:=mode
03044     B0 0E 06 F1 | 	add	objptr, #176
03048     07 6B 62 FC | 	wrlong	local01, objptr
0304c     C4 0E 86 F1 | 	sub	objptr, #196
03050                 | ' makedl(mode)
03050     35 5D 02 F6 | 	mov	arg01, local01
03054                 | ' 
03054                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03054                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03054                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03054                 | ' 
03054                 | ' '   0 - display a up/down border line
03054                 | ' 
03054                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03054                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03054                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03054                 | ' '    nnnn - font line to display, 0..15
03054                 | ' '    llllll - character line, determines the cursor Y position
03054                 | ' 
03054                 | ' 
03054                 | ' if (mode &256==0)
03054     00 5D CE F7 | 	test	arg01, #256 wz
03058     1C 00 90 5D |  if_ne	jmp	#LR__0092
0305c     07 AD 02 FB | 	rdlong	local34, objptr
03060     04 00 00 FF 
03064     00 AD 86 F1 | 	sub	local34, ##2304
03068                 | '   dl_ptr:=buf_ptr-4*576
03068     1C 0E 06 F1 | 	add	objptr, #28
0306c     07 AD 62 FC | 	wrlong	local34, objptr
03070     1C 0E 86 F1 | 	sub	objptr, #28
03074                 | ' else
03074     18 00 90 FD | 	jmp	#LR__0093
03078                 | LR__0092
03078     07 AF 02 FB | 	rdlong	local35, objptr
0307c     03 00 00 FF 
03080     C0 AF 86 F1 | 	sub	local35, ##1984
03084                 | '   dl_ptr:=buf_ptr-4*496
03084     1C 0E 06 F1 | 	add	objptr, #28
03088     07 AF 62 FC | 	wrlong	local35, objptr
0308c     1C 0E 86 F1 | 	sub	objptr, #28
03090                 | LR__0093
03090     2E B1 02 F6 | 	mov	local36, arg01
03094     02 B0 46 F0 | 	shr	local36, #2
03098     03 B0 06 F5 | 	and	local36, #3
0309c                 | '  ' dl_ptr:=buf_ptr-4*540
0309c                 | ' 
0309c                 | ' vzoom:=((mode>>2) & 3)
0309c                 | ' 
0309c                 | ' 
0309c                 | ' if mode<512 '' text modes
0309c     01 00 00 FF 
030a0     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
030a4     E4 01 90 3D |  if_ae	jmp	#LR__0101
030a8                 | ' 
030a8                 | '   if timings[6]>0 'borders
030a8     68 0E 06 F1 | 	add	objptr, #104
030ac     07 B3 02 FB | 	rdlong	local37, objptr
030b0     68 0E 86 F1 | 	sub	objptr, #104
030b4     00 B2 5E F2 | 	cmps	local37, #0 wcz
030b8     D4 00 90 ED |  if_be	jmp	#LR__0098
030bc                 | '     repeat i from 0 to timings[6]-1 '0 to -1
030bc     00 B4 06 F6 | 	mov	local38, #0
030c0     68 0E 06 F1 | 	add	objptr, #104
030c4     07 B7 02 FB | 	rdlong	local39, objptr
030c8     68 0E 86 F1 | 	sub	objptr, #104
030cc     01 B6 86 F1 | 	sub	local39, #1
030d0     00 B6 5E F2 | 	cmps	local39, #0 wcz
030d4     01 B8 06 16 |  if_a	mov	local40, #1
030d8     01 B8 66 E6 |  if_be	neg	local40, #1
030dc     5C BB 02 F6 | 	mov	local41, local40
030e0     5C B7 02 F1 | 	add	local39, local40
030e4     40 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
030e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
030ec                 | LR__0094
030ec     5A BD 02 F6 | 	mov	local42, local38
030f0     02 BC 66 F0 | 	shl	local42, #2
030f4     1C 0E 06 F1 | 	add	objptr, #28
030f8     07 BF 02 FB | 	rdlong	local43, objptr
030fc     1C 0E 86 F1 | 	sub	objptr, #28
03100     5E BF 02 F1 | 	add	local43, local42
03104                 | '       long[dl_ptr+4*i]:=$0
03104     5F 01 68 FC | 	wrlong	#0, local43
03108     5D B5 02 F1 | 	add	local38, local41
0310c     5B B5 0A F2 | 	cmp	local38, local39 wz
03110     D8 FF 9F 5D |  if_ne	jmp	#LR__0094
03114                 | LR__0095
03114                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03114     68 0E 06 F1 | 	add	objptr, #104
03118     07 B5 02 FB | 	rdlong	local38, objptr
0311c     18 0E 06 F1 | 	add	objptr, #24
03120     07 B9 02 FB | 	rdlong	local40, objptr
03124     5C B5 02 F1 | 	add	local38, local40
03128     0C 0E 06 F1 | 	add	objptr, #12
0312c     07 C1 02 FB | 	rdlong	local44, objptr
03130     01 C0 86 F1 | 	sub	local44, #1
03134     24 0E 86 F1 | 	sub	objptr, #36
03138     07 C3 02 FB | 	rdlong	local45, objptr
0313c     18 0E 06 F1 | 	add	objptr, #24
03140     07 C5 02 FB | 	rdlong	local46, objptr
03144     80 0E 86 F1 | 	sub	objptr, #128
03148     62 C3 02 F1 | 	add	local45, local46
0314c     61 C1 5A F2 | 	cmps	local44, local45 wcz
03150     01 C6 06 16 |  if_a	mov	local47, #1
03154     01 C6 66 E6 |  if_be	neg	local47, #1
03158     63 C9 02 F6 | 	mov	local48, local47
0315c     63 C1 02 F1 | 	add	local44, local47
03160     C4 CE 9F FE | 	loc	pa,	#(@LR__0097-@LR__0096)
03164     93 00 A0 FD | 	call	#FCACHE_LOAD_
03168                 | LR__0096
03168     5A CB 02 F6 | 	mov	local49, local38
0316c     02 CA 66 F0 | 	shl	local49, #2
03170     1C 0E 06 F1 | 	add	objptr, #28
03174     07 CD 02 FB | 	rdlong	local50, objptr
03178     1C 0E 86 F1 | 	sub	objptr, #28
0317c     65 CD 02 F1 | 	add	local50, local49
03180                 | '       long[dl_ptr+4*i]:=$0
03180     66 01 68 FC | 	wrlong	#0, local50
03184     64 B5 02 F1 | 	add	local38, local48
03188     60 B5 0A F2 | 	cmp	local38, local44 wz
0318c     D8 FF 9F 5D |  if_ne	jmp	#LR__0096
03190                 | LR__0097
03190                 | LR__0098
03190     10 CE 06 F6 | 	mov	local51, #16
03194     58 CF 62 F0 | 	shl	local51, local36
03198                 | '   lpc:=16<<vzoom
03198                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03198     68 0E 06 F1 | 	add	objptr, #104
0319c     07 B5 02 FB | 	rdlong	local38, objptr
031a0     5A D1 02 F6 | 	mov	local52, local38
031a4     18 0E 06 F1 | 	add	objptr, #24
031a8     07 D3 02 FB | 	rdlong	local53, objptr
031ac     69 D1 02 F1 | 	add	local52, local53
031b0     01 D0 86 F1 | 	sub	local52, #1
031b4     18 0E 86 F1 | 	sub	objptr, #24
031b8     07 C7 02 FB | 	rdlong	local47, objptr
031bc     68 0E 86 F1 | 	sub	objptr, #104
031c0     63 D1 5A F2 | 	cmps	local52, local47 wcz
031c4     01 D4 06 16 |  if_a	mov	local54, #1
031c8     01 D4 66 E6 |  if_be	neg	local54, #1
031cc     6A D7 02 F6 | 	mov	local55, local54
031d0     6A D1 02 F1 | 	add	local52, local54
031d4     D8 CE 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
031d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
031dc                 | LR__0099
031dc     5A 0B 03 F6 | 	mov	muldiva_, local38
031e0     68 0E 06 F1 | 	add	objptr, #104
031e4     07 D9 02 FB | 	rdlong	local56, objptr
031e8     68 0E 86 F1 | 	sub	objptr, #104
031ec     6C 0B 83 F1 | 	sub	muldiva_, local56
031f0     67 0D 03 F6 | 	mov	muldivb_, local51
031f4     CC 00 A0 FD | 	call	#unsdivide_
031f8     58 0B 43 F0 | 	shr	muldiva_, local36
031fc                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
031fc     85 DB 02 F6 | 	mov	local57, muldiva_
03200     5A 0B 03 F6 | 	mov	muldiva_, local38
03204     68 0E 06 F1 | 	add	objptr, #104
03208     07 D9 02 FB | 	rdlong	local56, objptr
0320c     68 0E 86 F1 | 	sub	objptr, #104
03210     6C 0B 83 F1 | 	sub	muldiva_, local56
03214     67 0D 03 F6 | 	mov	muldivb_, local51
03218     CC 00 A0 FD | 	call	#unsdivide_
0321c     86 DD 02 F6 | 	mov	local58, muldivb_
03220                 | '     charline:=(i-timings[6])+/lpc
03220     90 0E 06 F1 | 	add	objptr, #144
03224     07 D9 02 FB | 	rdlong	local56, objptr
03228     90 0E 86 F1 | 	sub	objptr, #144
0322c     6E D9 02 FD | 	qmul	local56, local58
03230     18 DE 62 FD | 	getqx	local59
03234     02 DE 66 F0 | 	shl	local59, #2
03238     07 E1 02 FB | 	rdlong	local60, objptr
0323c     6F E1 02 F1 | 	add	local60, local59
03240     2E E3 02 F6 | 	mov	local61, arg01
03244     03 E2 06 F5 | 	and	local61, #3
03248     71 E1 02 F1 | 	add	local60, local61
0324c                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
0324c     0C E0 66 F0 | 	shl	local60, #12
03250     08 DA 66 F0 | 	shl	local57, #8
03254     6D E1 02 F1 | 	add	local60, local57
03258     02 DC 66 F0 | 	shl	local58, #2
0325c     6E E1 02 F1 | 	add	local60, local58
03260     01 E0 06 F1 | 	add	local60, #1
03264     5A E5 02 F6 | 	mov	local62, local38
03268     02 E4 66 F0 | 	shl	local62, #2
0326c     1C 0E 06 F1 | 	add	objptr, #28
03270     07 E7 02 FB | 	rdlong	local63, objptr
03274     1C 0E 86 F1 | 	sub	objptr, #28
03278     72 E7 02 F1 | 	add	local63, local62
0327c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
0327c     73 E1 62 FC | 	wrlong	local60, local63
03280     6B B5 02 F1 | 	add	local38, local55
03284     68 B5 0A F2 | 	cmp	local38, local52 wz
03288     50 FF 9F 5D |  if_ne	jmp	#LR__0099
0328c                 | LR__0100
0328c                 | LR__0101
0328c                 | ' 
0328c                 | ' 
0328c                 | ' 
0328c                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
0328c     01 00 00 FF 
03290     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03294     AC 01 90 CD |  if_b	jmp	#LR__0109
03298                 | ' 
03298                 | '   if timings[6]>0 'borders
03298     68 0E 06 F1 | 	add	objptr, #104
0329c     07 B3 02 FB | 	rdlong	local37, objptr
032a0     68 0E 86 F1 | 	sub	objptr, #104
032a4     00 B2 5E F2 | 	cmps	local37, #0 wcz
032a8     D4 00 90 ED |  if_be	jmp	#LR__0106
032ac                 | '     repeat i from 0 to timings[6]-1 '0 to -1
032ac     00 B4 06 F6 | 	mov	local38, #0
032b0     68 0E 06 F1 | 	add	objptr, #104
032b4     07 E9 02 FB | 	rdlong	local64, objptr
032b8     68 0E 86 F1 | 	sub	objptr, #104
032bc     01 E8 86 F1 | 	sub	local64, #1
032c0     00 E8 5E F2 | 	cmps	local64, #0 wcz
032c4     01 B8 06 16 |  if_a	mov	local40, #1
032c8     01 B8 66 E6 |  if_be	neg	local40, #1
032cc     5C EB 02 F6 | 	mov	local65, local40
032d0     5C E9 02 F1 | 	add	local64, local40
032d4     50 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
032d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
032dc                 | LR__0102
032dc     5A ED 02 F6 | 	mov	local66, local38
032e0     02 EC 66 F0 | 	shl	local66, #2
032e4     1C 0E 06 F1 | 	add	objptr, #28
032e8     07 EF 02 FB | 	rdlong	local67, objptr
032ec     1C 0E 86 F1 | 	sub	objptr, #28
032f0     76 EF 02 F1 | 	add	local67, local66
032f4                 | '       long[dl_ptr+4*i]:=$0
032f4     77 01 68 FC | 	wrlong	#0, local67
032f8     75 B5 02 F1 | 	add	local38, local65
032fc     74 B5 0A F2 | 	cmp	local38, local64 wz
03300     D8 FF 9F 5D |  if_ne	jmp	#LR__0102
03304                 | LR__0103
03304                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03304     68 0E 06 F1 | 	add	objptr, #104
03308     07 B5 02 FB | 	rdlong	local38, objptr
0330c     18 0E 06 F1 | 	add	objptr, #24
03310     07 B9 02 FB | 	rdlong	local40, objptr
03314     5C B5 02 F1 | 	add	local38, local40
03318     0C 0E 06 F1 | 	add	objptr, #12
0331c     07 F1 02 FB | 	rdlong	local68, objptr
03320     01 F0 86 F1 | 	sub	local68, #1
03324     24 0E 86 F1 | 	sub	objptr, #36
03328     07 C3 02 FB | 	rdlong	local45, objptr
0332c     18 0E 06 F1 | 	add	objptr, #24
03330     07 C5 02 FB | 	rdlong	local46, objptr
03334     80 0E 86 F1 | 	sub	objptr, #128
03338     62 C3 02 F1 | 	add	local45, local46
0333c     61 F1 5A F2 | 	cmps	local68, local45 wcz
03340     01 C6 06 16 |  if_a	mov	local47, #1
03344     01 C6 66 E6 |  if_be	neg	local47, #1
03348     63 F3 02 F6 | 	mov	local69, local47
0334c     63 F1 02 F1 | 	add	local68, local47
03350     D4 CC 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
03354     93 00 A0 FD | 	call	#FCACHE_LOAD_
03358                 | LR__0104
03358     5A F5 02 F6 | 	mov	local70, local38
0335c     02 F4 66 F0 | 	shl	local70, #2
03360     1C 0E 06 F1 | 	add	objptr, #28
03364     07 F7 02 FB | 	rdlong	local71, objptr
03368     1C 0E 86 F1 | 	sub	objptr, #28
0336c     7A F7 02 F1 | 	add	local71, local70
03370                 | '       long[dl_ptr+4*i]:=$0
03370     7B 01 68 FC | 	wrlong	#0, local71
03374     79 B5 02 F1 | 	add	local38, local69
03378     78 B5 0A F2 | 	cmp	local38, local68 wz
0337c     D8 FF 9F 5D |  if_ne	jmp	#LR__0104
03380                 | LR__0105
03380                 | LR__0106
03380                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03380     68 0E 06 F1 | 	add	objptr, #104
03384     07 B5 02 FB | 	rdlong	local38, objptr
03388     5A F9 02 F6 | 	mov	local72, local38
0338c     18 0E 06 F1 | 	add	objptr, #24
03390     07 D3 02 FB | 	rdlong	local53, objptr
03394     69 F9 02 F1 | 	add	local72, local53
03398     01 F8 86 F1 | 	sub	local72, #1
0339c     18 0E 86 F1 | 	sub	objptr, #24
033a0     07 C7 02 FB | 	rdlong	local47, objptr
033a4     68 0E 86 F1 | 	sub	objptr, #104
033a8     63 F9 5A F2 | 	cmps	local72, local47 wcz
033ac     01 D4 06 16 |  if_a	mov	local54, #1
033b0     01 D4 66 E6 |  if_be	neg	local54, #1
033b4     6A FB 02 F6 | 	mov	local73, local54
033b8     6A F9 02 F1 | 	add	local72, local54
033bc     C0 CC 9F FE | 	loc	pa,	#(@LR__0108-@LR__0107)
033c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
033c4                 | LR__0107
033c4     5A FD 02 F6 | 	mov	local74, local38
033c8     68 0E 06 F1 | 	add	objptr, #104
033cc     07 D9 02 FB | 	rdlong	local56, objptr
033d0     6C FD 82 F1 | 	sub	local74, local56
033d4     58 FD 42 F0 | 	shr	local74, local36
033d8     28 0E 06 F1 | 	add	objptr, #40
033dc     07 D9 02 FB | 	rdlong	local56, objptr
033e0     90 0E 86 F1 | 	sub	objptr, #144
033e4     7E D9 02 FD | 	qmul	local56, local74
033e8     18 FE 62 FD | 	getqx	local75
033ec     02 FE 66 F0 | 	shl	local75, #2
033f0     07 01 03 FB | 	rdlong	local76, objptr
033f4     7F 01 03 F1 | 	add	local76, local75
033f8     2E 03 03 F6 | 	mov	local77, arg01
033fc     03 02 07 F5 | 	and	local77, #3
03400     81 01 03 F1 | 	add	local76, local77
03404                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03404     0C 00 67 F0 | 	shl	local76, #12
03408     02 00 07 F1 | 	add	local76, #2
0340c     2E 05 03 F6 | 	mov	local78, arg01
03410     30 04 07 F5 | 	and	local78, #48
03414     02 04 47 F0 | 	shr	local78, #2
03418     82 01 03 F1 | 	add	local76, local78
0341c     5A 07 03 F6 | 	mov	local79, local38
03420     02 06 67 F0 | 	shl	local79, #2
03424     1C 0E 06 F1 | 	add	objptr, #28
03428     07 09 03 FB | 	rdlong	local80, objptr
0342c     1C 0E 86 F1 | 	sub	objptr, #28
03430     83 09 03 F1 | 	add	local80, local79
03434                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03434     84 01 63 FC | 	wrlong	local76, local80
03438     7D B5 02 F1 | 	add	local38, local73
0343c     7C B5 0A F2 | 	cmp	local38, local72 wz
03440     80 FF 9F 5D |  if_ne	jmp	#LR__0107
03444                 | LR__0108
03444                 | LR__0109
03444                 | LR__0110
03444     AF F0 03 F6 | 	mov	ptra, fp
03448     BF 00 A0 FD | 	call	#popregs_
0344c                 | _hng030rm_spin2_setmode_ret
0344c     2D 00 64 FD | 	ret
03450                 | 
03450                 | ' 
03450                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03450                 | _retrocog_spin2_serialcog
03450     1C 5A 05 F6 | 	mov	COUNT_, #28
03454     B0 00 A0 FD | 	call	#pushregs_
03458                 | ' 
03458                 | ' 'start serial and midi
03458                 | ' 
03458                 | ' serial_start(rxpin, txpin, baudrate)
03458     20 5C 06 F6 | 	mov	arg01, #32
0345c     21 5E 06 F6 | 	mov	arg02, #33
03460     A6 0E 00 FF 
03464     00 60 06 F6 | 	mov	arg03, ##1920000
03468     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0346c                 | ' serial_start(midiin,midiout,mbaudrate)
0346c     1D 5C 06 F6 | 	mov	arg01, #29
03470     1E 5E 06 F6 | 	mov	arg02, #30
03474     3D 00 00 FF 
03478     12 60 06 F6 | 	mov	arg03, ##31250
0347c     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03480                 | ' serial_start(srxpin,stxpin,sbaudrate)
03480     42 0F 00 FF 
03484     80 6A 06 F6 | 	mov	local01, ##2000000
03488     3F 5C 06 F6 | 	mov	arg01, #63
0348c     3E 5E 06 F6 | 	mov	arg02, #62
03490     42 0F 00 FF 
03494     80 60 06 F6 | 	mov	arg03, ##2000000
03498     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0349c                 | ' 
0349c                 | ' mb:=(-1)
0349c     01 6C 66 F6 | 	neg	local02, #1
034a0                 | ' b:=(-1)
034a0     01 6E 66 F6 | 	neg	local03, #1
034a4                 | ' 
034a4                 | ' mousefront:=0
034a4     00 70 06 F6 | 	mov	local04, #0
034a8     08 0E 06 F1 | 	add	objptr, #8
034ac     07 01 68 FC | 	wrlong	#0, objptr
034b0                 | ' mousetail:=0
034b0     04 0E 06 F1 | 	add	objptr, #4
034b4     07 01 68 FC | 	wrlong	#0, objptr
034b8     0C 0E 86 F1 | 	sub	objptr, #12
034bc                 | ' kbdfront:=0
034bc     07 01 68 FC | 	wrlong	#0, objptr
034c0                 | ' kbdtail:=0
034c0     04 0E 06 F1 | 	add	objptr, #4
034c4     07 01 68 FC | 	wrlong	#0, objptr
034c8                 | ' midifront:=0
034c8     0C 0E 06 F1 | 	add	objptr, #12
034cc     07 01 68 FC | 	wrlong	#0, objptr
034d0                 | ' miditail:=0
034d0     04 0E 06 F1 | 	add	objptr, #4
034d4     07 01 68 FC | 	wrlong	#0, objptr
034d8                 | ' serialfront:=0
034d8     04 0E 06 F1 | 	add	objptr, #4
034dc     07 01 68 FC | 	wrlong	#0, objptr
034e0                 | ' serialtail:=0
034e0     04 0E 06 F1 | 	add	objptr, #4
034e4     07 01 68 FC | 	wrlong	#0, objptr
034e8                 | ' long[$30]:=0
034e8     30 00 6C FC | 	wrlong	#0, #48
034ec                 | ' long[$34]:=0
034ec     34 00 6C FC | 	wrlong	#0, #52
034f0                 | ' long[$38]:=0
034f0     38 00 6C FC | 	wrlong	#0, #56
034f4     1C 0E 86 F1 | 	sub	objptr, #28
034f8                 | ' long[$3C]:=0
034f8     3C 00 6C FC | 	wrlong	#0, #60
034fc                 | ' 
034fc                 | ' repeat
034fc                 | LR__0111
034fc                 | ' 
034fc                 | ' '  repeat 
034fc                 | '   rr:=rxcheck(rxpin)
034fc     20 5C 06 F6 | 	mov	arg01, #32
03500     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03504     15 73 02 F6 | 	mov	local05, result1
03508                 | '   mrr:=rxcheck(midiin)
03508     1D 5C 06 F6 | 	mov	arg01, #29
0350c     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03510     15 75 02 F6 | 	mov	local06, result1
03514                 | '   srr:=rxcheck(srxpin)
03514     3F 70 06 F6 | 	mov	local04, #63
03518     3F 5C 06 F6 | 	mov	arg01, #63
0351c     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03520     15 77 02 F6 | 	mov	local07, result1
03524     3B 79 02 F6 | 	mov	local08, local07
03528                 | ' 
03528                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03528                 | ' 
03528                 | '   
03528                 | ' ' midi. Must be >= $80 for a command
03528                 | ' '$80-$8F - 3 bytes note off. note, velocity
03528                 | ' '$90-$9F - 3 bytes note on, note, velocity
03528                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03528                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03528                 | ' '$C0-$CF - 2 bytes program change
03528                 | ' '$D0-$DF - 2 bytes mono aftertouch
03528                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03528                 | ' '$F0-$FF - 1 byte
03528                 | '   
03528                 | '   if srr>=0
03528     00 78 5E F2 | 	cmps	local08, #0 wcz
0352c     7C 00 90 CD |  if_b	jmp	#LR__0113
03530                 | '   
03530                 | '     if serialfront<>((serialtail-1) //32)
03530     1C 0E 06 F1 | 	add	objptr, #28
03534     07 77 02 FB | 	rdlong	local07, objptr
03538     3B 71 02 F6 | 	mov	local04, local07
0353c     01 70 86 F1 | 	sub	local04, #1
03540     38 6B 52 F6 | 	abs	local01, local04 wc
03544     1F 6A 06 F5 | 	and	local01, #31
03548     35 6B 62 C6 |  if_b	neg	local01, local01
0354c     04 0E 86 F1 | 	sub	objptr, #4
03550     07 7B 02 FB | 	rdlong	local09, objptr
03554     18 0E 86 F1 | 	sub	objptr, #24
03558     3D 7D 02 F6 | 	mov	local10, local09
0355c     35 7D 0A F2 | 	cmp	local10, local01 wz
03560     48 00 90 AD |  if_e	jmp	#LR__0112
03564     18 0E 06 F1 | 	add	objptr, #24
03568     07 7D 02 FB | 	rdlong	local10, objptr
0356c     01 00 00 FF 
03570     08 0F 06 F1 | 	add	objptr, ##776
03574     07 7D 02 F1 | 	add	local10, objptr
03578     3E 7F 02 F6 | 	mov	local11, local10
0357c                 | '       serialbuf[serialfront]:=srr
0357c     3F 79 42 FC | 	wrbyte	local08, local11
03580                 | '       serialfront+=1
03580     01 00 00 FF 
03584     08 0F 86 F1 | 	sub	objptr, ##776
03588     07 6B 02 FB | 	rdlong	local01, objptr
0358c     01 6A 06 F1 | 	add	local01, #1
03590     07 6B 62 FC | 	wrlong	local01, objptr
03594                 | '       serialfront:=serialfront // 32
03594     35 77 02 F6 | 	mov	local07, local01
03598     3B 71 52 F6 | 	abs	local04, local07 wc
0359c     1F 70 06 F5 | 	and	local04, #31
035a0     38 71 62 C6 |  if_b	neg	local04, local04
035a4     07 71 62 FC | 	wrlong	local04, objptr
035a8     18 0E 86 F1 | 	sub	objptr, #24
035ac                 | LR__0112
035ac                 | LR__0113
035ac                 | '     
035ac                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
035ac     80 74 5E F2 | 	cmps	local06, #128 wcz
035b0     08 00 90 CD |  if_b	jmp	#LR__0114
035b4     BF 74 5E F2 | 	cmps	local06, #191 wcz
035b8     10 00 90 ED |  if_be	jmp	#LR__0115
035bc                 | LR__0114
035bc     E0 74 5E F2 | 	cmps	local06, #224 wcz
035c0     1C 00 90 CD |  if_b	jmp	#LR__0116
035c4     EF 74 5E F2 | 	cmps	local06, #239 wcz
035c8     14 00 90 1D |  if_a	jmp	#LR__0116
035cc                 | LR__0115
035cc                 | '     mb:=2
035cc     02 6C 06 F6 | 	mov	local02, #2
035d0     3A 71 02 F6 | 	mov	local04, local06
035d4     18 70 66 F0 | 	shl	local04, #24
035d8     38 81 02 F6 | 	mov	local12, local04
035dc                 | '     midireport:=mrr<<24
035dc     40 83 02 F6 | 	mov	local13, local12
035e0                 | LR__0116
035e0                 | ' 
035e0                 | '   if (mrr>=$C0) && (mrr<=$DF)
035e0     C0 74 5E F2 | 	cmps	local06, #192 wcz
035e4     1C 00 90 CD |  if_b	jmp	#LR__0117
035e8     DF 74 5E F2 | 	cmps	local06, #223 wcz
035ec     14 00 90 1D |  if_a	jmp	#LR__0117
035f0                 | '     mb:=1
035f0     01 6C 06 F6 | 	mov	local02, #1
035f4     3A 71 02 F6 | 	mov	local04, local06
035f8     18 70 66 F0 | 	shl	local04, #24
035fc     38 85 02 F6 | 	mov	local14, local04
03600                 | '     midireport:=mrr<<24
03600     42 83 02 F6 | 	mov	local13, local14
03604                 | LR__0117
03604                 | '   
03604                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03604     F0 74 5E F2 | 	cmps	local06, #240 wcz
03608     10 00 90 CD |  if_b	jmp	#LR__0118
0360c                 | '     mb:=4
0360c     04 6C 06 F6 | 	mov	local02, #4
03610     3A 87 02 F6 | 	mov	local15, local06
03614     18 86 66 F0 | 	shl	local15, #24
03618                 | '     midireport:=mrr<<24  
03618     43 83 02 F6 | 	mov	local13, local15
0361c                 | LR__0118
0361c                 | '   
0361c                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
0361c     80 74 5E F2 | 	cmps	local06, #128 wcz
03620     44 00 90 3D |  if_ae	jmp	#LR__0120
03624     00 6C 5E F2 | 	cmps	local02, #0 wcz
03628     3C 00 90 ED |  if_be	jmp	#LR__0120
0362c     00 74 5E F2 | 	cmps	local06, #0 wcz
03630     34 00 90 CD |  if_b	jmp	#LR__0120
03634                 | '     
03634                 | '     mb--
03634     36 71 02 F6 | 	mov	local04, local02
03638     36 77 02 F6 | 	mov	local07, local02
0363c     01 76 86 F1 | 	sub	local07, #1
03640     3B 6D 02 F6 | 	mov	local02, local07
03644                 | '     if mb<3
03644     03 6C 5E F2 | 	cmps	local02, #3 wcz
03648     1C 00 90 3D |  if_ae	jmp	#LR__0119
0364c     36 89 02 F6 | 	mov	local16, local02
03650     03 88 66 F0 | 	shl	local16, #3
03654     3A 8B 02 F6 | 	mov	local17, local06
03658     44 8B 62 F0 | 	shl	local17, local16
0365c                 | '       midireport+=mrr<<(mb<<3)
0365c     41 71 02 F6 | 	mov	local04, local13
03660     45 71 02 F1 | 	add	local04, local17
03664     38 83 02 F6 | 	mov	local13, local04
03668                 | LR__0119
03668                 | LR__0120
03668                 | '   
03668                 | '   if mb==0
03668     00 6C 0E F2 | 	cmp	local02, #0 wz
0366c     84 00 90 5D |  if_ne	jmp	#LR__0122
03670                 | '     
03670                 | '     if midifront<>((miditail-1) //32)
03670     14 0E 06 F1 | 	add	objptr, #20
03674     07 77 02 FB | 	rdlong	local07, objptr
03678     3B 71 02 F6 | 	mov	local04, local07
0367c     01 70 86 F1 | 	sub	local04, #1
03680     38 6B 52 F6 | 	abs	local01, local04 wc
03684     1F 6A 06 F5 | 	and	local01, #31
03688     35 6B 62 C6 |  if_b	neg	local01, local01
0368c     04 0E 86 F1 | 	sub	objptr, #4
03690     07 7B 02 FB | 	rdlong	local09, objptr
03694     10 0E 86 F1 | 	sub	objptr, #16
03698     3D 7D 02 F6 | 	mov	local10, local09
0369c     35 7D 0A F2 | 	cmp	local10, local01 wz
036a0     4C 00 90 AD |  if_e	jmp	#LR__0121
036a4     10 0E 06 F1 | 	add	objptr, #16
036a8     07 7D 02 FB | 	rdlong	local10, objptr
036ac     02 7C 66 F0 | 	shl	local10, #2
036b0     01 00 00 FF 
036b4     90 0E 06 F1 | 	add	objptr, ##656
036b8     07 7D 02 F1 | 	add	local10, objptr
036bc     3E 8D 02 F6 | 	mov	local18, local10
036c0                 | '       midibuf[midifront]:=midireport
036c0     46 83 62 FC | 	wrlong	local13, local18
036c4                 | '       midifront+=1
036c4     01 00 00 FF 
036c8     90 0E 86 F1 | 	sub	objptr, ##656
036cc     07 6B 02 FB | 	rdlong	local01, objptr
036d0     01 6A 06 F1 | 	add	local01, #1
036d4     07 6B 62 FC | 	wrlong	local01, objptr
036d8                 | '       midifront:=midifront // 32
036d8     35 77 02 F6 | 	mov	local07, local01
036dc     3B 71 52 F6 | 	abs	local04, local07 wc
036e0     1F 70 06 F5 | 	and	local04, #31
036e4     38 71 62 C6 |  if_b	neg	local04, local04
036e8     07 71 62 FC | 	wrlong	local04, objptr
036ec     10 0E 86 F1 | 	sub	objptr, #16
036f0                 | LR__0121
036f0                 | '     mb:=(-1)
036f0     01 6C 66 F6 | 	neg	local02, #1
036f4                 | LR__0122
036f4                 | ' 
036f4                 | ' 'Keyboard and mouse
036f4                 | ' 
036f4                 | '   if (rr>=$80) && (rr<>$FF)
036f4     80 72 5E F2 | 	cmps	local05, #128 wcz
036f8     1C 00 90 CD |  if_b	jmp	#LR__0123
036fc     FF 72 0E F2 | 	cmp	local05, #255 wz
03700     14 00 90 AD |  if_e	jmp	#LR__0123
03704                 | '     b:=3
03704     03 6E 06 F6 | 	mov	local03, #3
03708     39 71 02 F6 | 	mov	local04, local05
0370c     18 70 66 F0 | 	shl	local04, #24
03710     38 8F 02 F6 | 	mov	local19, local04
03714                 | '     kbmreport:=rr<<24
03714     47 91 02 F6 | 	mov	local20, local19
03718                 | LR__0123
03718                 | '   
03718                 | '   if (rr<$80) && (b>0) && (rr>=0)
03718     80 72 5E F2 | 	cmps	local05, #128 wcz
0371c     38 00 90 3D |  if_ae	jmp	#LR__0124
03720     00 6E 5E F2 | 	cmps	local03, #0 wcz
03724     30 00 90 ED |  if_be	jmp	#LR__0124
03728     00 72 5E F2 | 	cmps	local05, #0 wcz
0372c     28 00 90 CD |  if_b	jmp	#LR__0124
03730                 | '     b--
03730     37 77 02 F6 | 	mov	local07, local03
03734     01 76 86 F1 | 	sub	local07, #1
03738     3B 6F 02 F6 | 	mov	local03, local07
0373c     37 93 02 F6 | 	mov	local21, local03
03740     03 92 66 F0 | 	shl	local21, #3
03744     39 95 02 F6 | 	mov	local22, local05
03748     49 95 62 F0 | 	shl	local22, local21
0374c                 | '     kbmreport+=rr<<(b<<3)  
0374c     48 71 02 F6 | 	mov	local04, local20
03750     4A 71 02 F1 | 	add	local04, local22
03754     38 91 02 F6 | 	mov	local20, local04
03758                 | LR__0124
03758                 | '   
03758                 | '   if (rr==$FF)
03758     FF 72 0E F2 | 	cmp	local05, #255 wz
0375c                 | '     b:=0   
0375c     00 6E 06 A6 |  if_e	mov	local03, #0
03760                 | ' 
03760                 | '   if b==0  
03760     00 6E 0E F2 | 	cmp	local03, #0 wz
03764     14 01 90 5D |  if_ne	jmp	#LR__0129
03768                 | '  
03768                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03768     00 00 40 FF 
0376c     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
03770     84 00 90 CD |  if_b	jmp	#LR__0126
03774     00 80 43 FF 
03778     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
0377c     78 00 90 3D |  if_ae	jmp	#LR__0126
03780                 | '       if mousefront<>((mousetail-1) //128)
03780     0C 0E 06 F1 | 	add	objptr, #12
03784     07 77 02 FB | 	rdlong	local07, objptr
03788     3B 71 02 F6 | 	mov	local04, local07
0378c     01 70 86 F1 | 	sub	local04, #1
03790     38 6B 52 F6 | 	abs	local01, local04 wc
03794     7F 6A 06 F5 | 	and	local01, #127
03798     35 6B 62 C6 |  if_b	neg	local01, local01
0379c     04 0E 86 F1 | 	sub	objptr, #4
037a0     07 7B 02 FB | 	rdlong	local09, objptr
037a4     08 0E 86 F1 | 	sub	objptr, #8
037a8     3D 7D 02 F6 | 	mov	local10, local09
037ac     35 7D 0A F2 | 	cmp	local10, local01 wz
037b0     44 00 90 AD |  if_e	jmp	#LR__0125
037b4     08 0E 06 F1 | 	add	objptr, #8
037b8     07 7D 02 FB | 	rdlong	local10, objptr
037bc     02 7C 66 F0 | 	shl	local10, #2
037c0     98 0E 06 F1 | 	add	objptr, #152
037c4     07 7D 02 F1 | 	add	local10, objptr
037c8     3E 97 02 F6 | 	mov	local23, local10
037cc                 | '         mousebuf[mousefront]:=kbmreport
037cc     4B 91 62 FC | 	wrlong	local20, local23
037d0                 | '         mousefront+=1
037d0     98 0E 86 F1 | 	sub	objptr, #152
037d4     07 6B 02 FB | 	rdlong	local01, objptr
037d8     01 6A 06 F1 | 	add	local01, #1
037dc     07 6B 62 FC | 	wrlong	local01, objptr
037e0                 | '         mousefront:=mousefront // 128
037e0     35 77 02 F6 | 	mov	local07, local01
037e4     3B 71 52 F6 | 	abs	local04, local07 wc
037e8     7F 70 06 F5 | 	and	local04, #127
037ec     38 71 62 C6 |  if_b	neg	local04, local04
037f0     07 71 62 FC | 	wrlong	local04, objptr
037f4     08 0E 86 F1 | 	sub	objptr, #8
037f8                 | LR__0125
037f8                 | LR__0126
037f8                 | '     b:=(-1)
037f8     01 6E 66 F6 | 	neg	local03, #1
037fc                 | ' 
037fc                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
037fc     00 80 43 FF 
03800     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03804     70 00 90 CD |  if_b	jmp	#LR__0128
03808     00 00 45 FF 
0380c     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03810     64 00 90 3D |  if_ae	jmp	#LR__0128
03814                 | '       if kbdfront<>((kbdtail-1) //32)
03814     04 0E 06 F1 | 	add	objptr, #4
03818     07 77 02 FB | 	rdlong	local07, objptr
0381c     04 0E 86 F1 | 	sub	objptr, #4
03820     3B 71 02 F6 | 	mov	local04, local07
03824     01 70 86 F1 | 	sub	local04, #1
03828     38 6B 52 F6 | 	abs	local01, local04 wc
0382c     1F 6A 06 F5 | 	and	local01, #31
03830     35 6B 62 C6 |  if_b	neg	local01, local01
03834     07 7D 02 FB | 	rdlong	local10, objptr
03838     35 7D 0A F2 | 	cmp	local10, local01 wz
0383c     38 00 90 AD |  if_e	jmp	#LR__0127
03840     07 6B 02 FB | 	rdlong	local01, objptr
03844     02 6A 66 F0 | 	shl	local01, #2
03848     20 0E 06 F1 | 	add	objptr, #32
0384c     07 6B 02 F1 | 	add	local01, objptr
03850     35 99 02 F6 | 	mov	local24, local01
03854                 | '         kbdbuf[kbdfront]:=kbmreport
03854     4C 91 62 FC | 	wrlong	local20, local24
03858                 | '         kbdfront+=1
03858     20 0E 86 F1 | 	sub	objptr, #32
0385c     07 77 02 FB | 	rdlong	local07, objptr
03860     01 76 06 F1 | 	add	local07, #1
03864     07 77 62 FC | 	wrlong	local07, objptr
03868                 | '         kbdfront:=kbdfront // 32
03868     3B 71 52 F6 | 	abs	local04, local07 wc
0386c     1F 70 06 F5 | 	and	local04, #31
03870     38 71 62 C6 |  if_b	neg	local04, local04
03874     07 71 62 FC | 	wrlong	local04, objptr
03878                 | LR__0127
03878                 | LR__0128
03878                 | '     b:=(-1)
03878     01 6E 66 F6 | 	neg	local03, #1
0387c                 | LR__0129
0387c                 | ' 
0387c                 | ' 
0387c                 | '   if long[$30]==0
0387c     30 70 0E FB | 	rdlong	local04, #48 wz
03880     5C 00 90 5D |  if_ne	jmp	#LR__0131
03884                 | '     if kbdfront<>kbdtail
03884     07 71 02 FB | 	rdlong	local04, objptr
03888     04 0E 06 F1 | 	add	objptr, #4
0388c     07 6B 02 FB | 	rdlong	local01, objptr
03890     04 0E 86 F1 | 	sub	objptr, #4
03894     35 71 0A F2 | 	cmp	local04, local01 wz
03898     44 00 90 AD |  if_e	jmp	#LR__0130
0389c     04 0E 06 F1 | 	add	objptr, #4
038a0     07 9B 02 FB | 	rdlong	local25, objptr
038a4     02 9A 66 F0 | 	shl	local25, #2
038a8     1C 0E 06 F1 | 	add	objptr, #28
038ac     07 9B 02 F1 | 	add	local25, objptr
038b0                 | '       long[$30]:=kbdbuf[kbdtail]
038b0     4D 71 02 FB | 	rdlong	local04, local25
038b4     30 70 66 FC | 	wrlong	local04, #48
038b8                 | '       kbdtail++
038b8     1C 0E 86 F1 | 	sub	objptr, #28
038bc     07 7D 02 FB | 	rdlong	local10, objptr
038c0     3E 6B 02 F6 | 	mov	local01, local10
038c4     01 6A 06 F1 | 	add	local01, #1
038c8     07 6B 62 FC | 	wrlong	local01, objptr
038cc                 | '       kbdtail:= kbdtail // 32
038cc     35 71 52 F6 | 	abs	local04, local01 wc
038d0     1F 70 06 F5 | 	and	local04, #31
038d4     38 71 62 C6 |  if_b	neg	local04, local04
038d8     07 71 62 FC | 	wrlong	local04, objptr
038dc     04 0E 86 F1 | 	sub	objptr, #4
038e0                 | LR__0130
038e0                 | LR__0131
038e0                 | '       
038e0                 | '   if long[$34]==0
038e0     34 70 0E FB | 	rdlong	local04, #52 wz
038e4     64 00 90 5D |  if_ne	jmp	#LR__0133
038e8                 | '     if mousefront<>mousetail
038e8     08 0E 06 F1 | 	add	objptr, #8
038ec     07 71 02 FB | 	rdlong	local04, objptr
038f0     04 0E 06 F1 | 	add	objptr, #4
038f4     07 7D 02 FB | 	rdlong	local10, objptr
038f8     0C 0E 86 F1 | 	sub	objptr, #12
038fc     3E 6B 02 F6 | 	mov	local01, local10
03900     35 71 0A F2 | 	cmp	local04, local01 wz
03904     44 00 90 AD |  if_e	jmp	#LR__0132
03908     0C 0E 06 F1 | 	add	objptr, #12
0390c     07 9D 02 FB | 	rdlong	local26, objptr
03910     02 9C 66 F0 | 	shl	local26, #2
03914     94 0E 06 F1 | 	add	objptr, #148
03918     07 9D 02 F1 | 	add	local26, objptr
0391c                 | '       long[$34]:=mousebuf[mousetail]
0391c     4E 71 02 FB | 	rdlong	local04, local26
03920     34 70 66 FC | 	wrlong	local04, #52
03924                 | '       mousetail++
03924     94 0E 86 F1 | 	sub	objptr, #148
03928     07 7D 02 FB | 	rdlong	local10, objptr
0392c     3E 6B 02 F6 | 	mov	local01, local10
03930     01 6A 06 F1 | 	add	local01, #1
03934     07 6B 62 FC | 	wrlong	local01, objptr
03938                 | '       mousetail:= mousetail // 128
03938     35 71 52 F6 | 	abs	local04, local01 wc
0393c     7F 70 06 F5 | 	and	local04, #127
03940     38 71 62 C6 |  if_b	neg	local04, local04
03944     07 71 62 FC | 	wrlong	local04, objptr
03948     0C 0E 86 F1 | 	sub	objptr, #12
0394c                 | LR__0132
0394c                 | LR__0133
0394c                 | ' 
0394c                 | '       
0394c                 | '   if long[$38]==0
0394c     38 70 0E FB | 	rdlong	local04, #56 wz
03950     6C 00 90 5D |  if_ne	jmp	#LR__0135
03954                 | '     if midifront<>miditail
03954     10 0E 06 F1 | 	add	objptr, #16
03958     07 71 02 FB | 	rdlong	local04, objptr
0395c     04 0E 06 F1 | 	add	objptr, #4
03960     07 7D 02 FB | 	rdlong	local10, objptr
03964     14 0E 86 F1 | 	sub	objptr, #20
03968     3E 6B 02 F6 | 	mov	local01, local10
0396c     35 71 0A F2 | 	cmp	local04, local01 wz
03970     4C 00 90 AD |  if_e	jmp	#LR__0134
03974     14 0E 06 F1 | 	add	objptr, #20
03978     07 9F 02 FB | 	rdlong	local27, objptr
0397c     02 9E 66 F0 | 	shl	local27, #2
03980     01 00 00 FF 
03984     8C 0E 06 F1 | 	add	objptr, ##652
03988     07 9F 02 F1 | 	add	local27, objptr
0398c                 | '       long[$38]:=midibuf[miditail]
0398c     4F 71 02 FB | 	rdlong	local04, local27
03990     38 70 66 FC | 	wrlong	local04, #56
03994                 | '       miditail++
03994     01 00 00 FF 
03998     8C 0E 86 F1 | 	sub	objptr, ##652
0399c     07 7D 02 FB | 	rdlong	local10, objptr
039a0     3E 6B 02 F6 | 	mov	local01, local10
039a4     01 6A 06 F1 | 	add	local01, #1
039a8     07 6B 62 FC | 	wrlong	local01, objptr
039ac                 | '       miditail:= miditail // 32
039ac     35 71 52 F6 | 	abs	local04, local01 wc
039b0     1F 70 06 F5 | 	and	local04, #31
039b4     38 71 62 C6 |  if_b	neg	local04, local04
039b8     07 71 62 FC | 	wrlong	local04, objptr
039bc     14 0E 86 F1 | 	sub	objptr, #20
039c0                 | LR__0134
039c0                 | LR__0135
039c0                 | '       
039c0                 | '   if long[$3c]==0
039c0     3C 70 0E FB | 	rdlong	local04, #60 wz
039c4     34 FB 9F 5D |  if_ne	jmp	#LR__0111
039c8                 | '     if serialfront<>serialtail
039c8     18 0E 06 F1 | 	add	objptr, #24
039cc     07 71 02 FB | 	rdlong	local04, objptr
039d0     04 0E 06 F1 | 	add	objptr, #4
039d4     07 7D 02 FB | 	rdlong	local10, objptr
039d8     1C 0E 86 F1 | 	sub	objptr, #28
039dc     3E 6B 02 F6 | 	mov	local01, local10
039e0     35 71 0A F2 | 	cmp	local04, local01 wz
039e4     14 FB 9F AD |  if_e	jmp	#LR__0111
039e8                 | '       byte[$3c]:=255
039e8     3C FE 4D FC | 	wrbyte	#255, #60
039ec     1C 0E 06 F1 | 	add	objptr, #28
039f0     07 A1 02 FB | 	rdlong	local28, objptr
039f4     01 00 00 FF 
039f8     04 0F 06 F1 | 	add	objptr, ##772
039fc     07 A1 02 F1 | 	add	local28, objptr
03a00                 | '       byte[$3D]:=serialbuf[serialtail]
03a00     50 71 C2 FA | 	rdbyte	local04, local28
03a04     3D 70 46 FC | 	wrbyte	local04, #61
03a08                 | '       serialtail++
03a08     01 00 00 FF 
03a0c     04 0F 86 F1 | 	sub	objptr, ##772
03a10     07 7D 02 FB | 	rdlong	local10, objptr
03a14     3E 6B 02 F6 | 	mov	local01, local10
03a18     01 6A 06 F1 | 	add	local01, #1
03a1c     07 6B 62 FC | 	wrlong	local01, objptr
03a20                 | '       serialtail:= serialtail // 32
03a20     35 71 52 F6 | 	abs	local04, local01 wc
03a24     1F 70 06 F5 | 	and	local04, #31
03a28     38 71 62 C6 |  if_b	neg	local04, local04
03a2c     07 71 62 FC | 	wrlong	local04, objptr
03a30     1C 0E 86 F1 | 	sub	objptr, #28
03a34     C4 FA 9F FD | 	jmp	#LR__0111
03a38     AF F0 03 F6 | 	mov	ptra, fp
03a3c     BF 00 A0 FD | 	call	#popregs_
03a40                 | _retrocog_spin2_serialcog_ret
03a40     2D 00 64 FD | 	ret
03a44                 | 
03a44                 | '       
03a44                 | ' 
03a44                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03a44                 | ' 
03a44                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03a44                 | _retrocog_spin2_serial_start
03a44     04 5A 05 F6 | 	mov	COUNT_, #4
03a48     B0 00 A0 FD | 	call	#pushregs_
03a4c     2E 6B 02 F6 | 	mov	local01, arg01
03a50     2F 6D 02 F6 | 	mov	local02, arg02
03a54                 | ' 
03a54                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03a54     14 5C 06 FB | 	rdlong	arg01, #20
03a58     10 5E C6 F9 | 	decod	arg02, #16
03a5c     2F 5D 02 FD | 	qmul	arg01, arg02
03a60     19 6E 62 FD | 	getqy	local03
03a64     18 70 62 FD | 	getqx	local04
03a68     28 6E 62 FD | 	setq	local03
03a6c     30 71 12 FD | 	qdiv	local04, arg03
03a70     18 2A 62 FD | 	getqx	result1
03a74     15 61 02 F6 | 	mov	arg03, result1
03a78     FE FF 7F FF 
03a7c     00 60 06 F5 | 	and	arg03, ##-1024
03a80                 | ' bitmode |= 7                                                  ' set bits (8)
03a80     07 60 46 F5 | 	or	arg03, #7
03a84                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03a84     40 6A 62 FD | 	dirl	local01
03a88     08 00 80 FF 
03a8c     35 7D 08 FC | 	wrpin	##4158, local01
03a90     35 61 12 FC | 	wxpin	arg03, local01
03a94     35 01 28 FC | 	wypin	#0, local01
03a98     41 6A 62 FD | 	dirh	local01
03a9c                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03a9c     40 6C 62 FD | 	dirl	local02
03aa0     36 F9 08 FC | 	wrpin	#124, local02
03aa4     36 61 12 FC | 	wxpin	arg03, local02
03aa8     36 01 28 FC | 	wypin	#0, local02
03aac     41 6C 62 FD | 	dirh	local02
03ab0                 | ' pinhigh(rxpin)
03ab0     59 6A 62 FD | 	drvh	local01
03ab4     AF F0 03 F6 | 	mov	ptra, fp
03ab8     BF 00 A0 FD | 	call	#popregs_
03abc                 | _retrocog_spin2_serial_start_ret
03abc     2D 00 64 FD | 	ret
03ac0                 | 
03ac0                 | ' 
03ac0                 | ' pub rxcheck(pin) : rxbyte | check
03ac0                 | _retrocog_spin2_rxcheck
03ac0     03 5A 05 F6 | 	mov	COUNT_, #3
03ac4     B0 00 A0 FD | 	call	#pushregs_
03ac8     2E 6B 02 F6 | 	mov	local01, arg01
03acc                 | ' 
03acc                 | ' '' Check for serial input
03acc                 | ' '' -- returns -1 if nothing available
03acc                 | ' 
03acc                 | '   rxbyte := -1
03acc     01 6C 66 F6 | 	neg	local02, #1
03ad0                 | '   check := pinr(pin)
03ad0     35 5D 02 F6 | 	mov	arg01, local01
03ad4     6C 26 B0 FD | 	call	#__system___pinread
03ad8     15 6F 0A F6 | 	mov	local03, result1 wz
03adc                 | '   if (check)
03adc                 | '     rxbyte := rdpin(pin) >> 24
03adc     00 6C 06 56 |  if_ne	mov	local02, #0
03ae0     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03ae4     18 6C 46 50 |  if_ne	shr	local02, #24
03ae8     36 2B 02 F6 | 	mov	result1, local02
03aec     AF F0 03 F6 | 	mov	ptra, fp
03af0     BF 00 A0 FD | 	call	#popregs_
03af4                 | _retrocog_spin2_rxcheck_ret
03af4     2D 00 64 FD | 	ret
03af8                 | 
03af8                 | _trackerplayer_spin2_initModule
03af8     3E 5A 05 F6 | 	mov	COUNT_, #62
03afc     B0 00 A0 FD | 	call	#pushregs_
03b00     24 F1 07 F1 | 	add	ptra, #292
03b04     AF 5C 62 FC | 	wrlong	arg01, fp
03b08     04 5E 05 F1 | 	add	fp, #4
03b0c     AF 5E 62 FC | 	wrlong	arg02, fp
03b10     04 5E 85 F1 | 	sub	fp, #4
03b14     AF 6A 02 FB | 	rdlong	local01, fp
03b18     02 00 00 FF 
03b1c     38 6A 06 F1 | 	add	local01, ##1080
03b20                 | ' 
03b20                 | '   ' Set some data pointers
03b20                 | '   magicFour      := hubPtr + 1080
03b20     9D 0E 06 F1 | 	add	objptr, #157
03b24     07 6B 62 FC | 	wrlong	local01, objptr
03b28                 | '   nameStr        := hubPtr
03b28     AF 6C 02 FB | 	rdlong	local02, fp
03b2c     97 0E 86 F1 | 	sub	objptr, #151
03b30     07 6D 62 FC | 	wrlong	local02, objptr
03b34     AF 6E 02 FB | 	rdlong	local03, fp
03b38     14 6E 06 F1 | 	add	local03, #20
03b3c                 | '   samplesInfoLut := hubPtr + 20
03b3c     04 0E 06 F1 | 	add	objptr, #4
03b40     07 6F 62 FC | 	wrlong	local03, objptr
03b44                 | ' 
03b44                 | '   ' Is this a 31 sample module?
03b44                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03b44     93 0E 06 F1 | 	add	objptr, #147
03b48     07 6D 02 FB | 	rdlong	local02, objptr
03b4c     9D 0E 86 F1 | 	sub	objptr, #157
03b50     36 71 C2 FA | 	rdbyte	local04, local02
03b54     4D 70 0E F2 | 	cmp	local04, #77 wz
03b58     48 01 90 5D |  if_ne	jmp	#LR__0139
03b5c     9D 0E 06 F1 | 	add	objptr, #157
03b60     07 73 02 FB | 	rdlong	local05, objptr
03b64     9D 0E 86 F1 | 	sub	objptr, #157
03b68     02 72 06 F1 | 	add	local05, #2
03b6c     39 75 C2 FA | 	rdbyte	local06, local05
03b70     4B 74 0E F2 | 	cmp	local06, #75 wz
03b74     2C 01 90 5D |  if_ne	jmp	#LR__0139
03b78     AF 76 02 FB | 	rdlong	local07, fp
03b7c     01 00 00 FF 
03b80     B6 77 06 F1 | 	add	local07, ##950
03b84                 | '     songLength          := byte[hubPtr + 950]
03b84     3B 6D C2 FA | 	rdbyte	local02, local07
03b88     9A 0E 06 F1 | 	add	objptr, #154
03b8c     07 6D 42 FC | 	wrbyte	local02, objptr
03b90     AF 78 02 FB | 	rdlong	local08, fp
03b94     01 00 00 FF 
03b98     B7 79 06 F1 | 	add	local08, ##951
03b9c                 | '     unknown1            := byte[hubPtr + 951]
03b9c     3C 6D C2 FA | 	rdbyte	local02, local08
03ba0     02 0E 06 F1 | 	add	objptr, #2
03ba4     07 6D 42 FC | 	wrbyte	local02, objptr
03ba8     AF 7A 02 FB | 	rdlong	local09, fp
03bac     01 00 00 FF 
03bb0     B8 7B 06 F1 | 	add	local09, ##952
03bb4                 | '     songPositionsLut    :=      hubPtr + 952
03bb4     06 0E 86 F1 | 	sub	objptr, #6
03bb8     07 7B 62 FC | 	wrlong	local09, objptr
03bbc     AF 7C 02 FB | 	rdlong	local10, fp
03bc0     02 00 00 FF 
03bc4     3C 7C 06 F1 | 	add	local10, ##1084
03bc8                 | '     patternsData        :=      hubPtr + 1084
03bc8     04 0E 86 F1 | 	sub	objptr, #4
03bcc     07 7D 62 FC | 	wrlong	local10, objptr
03bd0                 | '     numberOfInstruments := 31
03bd0     14 0E 06 F1 | 	add	objptr, #20
03bd4     07 3F 48 FC | 	wrbyte	#31, objptr
03bd8                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03bd8     0B 0E 86 F1 | 	sub	objptr, #11
03bdc     07 01 48 FC | 	wrbyte	#0, objptr
03be0     9B 0E 86 F1 | 	sub	objptr, #155
03be4                 | '     repeat i from 952 to 1079
03be4     08 5E 05 F1 | 	add	fp, #8
03be8     01 00 80 FF 
03bec     AF 70 6B FC | 	wrlong	##952, fp
03bf0     08 5E 85 F1 | 	sub	fp, #8
03bf4     78 C4 9F FE | 	loc	pa,	#(@LR__0138-@LR__0136)
03bf8     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bfc                 | LR__0136
03bfc                 | '       if byte[hubPtr][i] > numberOfPatterns
03bfc     AF 7E 02 FB | 	rdlong	local11, fp
03c00     08 5E 05 F1 | 	add	fp, #8
03c04     AF 70 02 FB | 	rdlong	local04, fp
03c08     08 5E 85 F1 | 	sub	fp, #8
03c0c     3F 71 02 F1 | 	add	local04, local11
03c10     38 75 C2 FA | 	rdbyte	local06, local04
03c14     9B 0E 06 F1 | 	add	objptr, #155
03c18     07 81 C2 FA | 	rdbyte	local12, objptr
03c1c     9B 0E 86 F1 | 	sub	objptr, #155
03c20     40 75 5A F2 | 	cmps	local06, local12 wcz
03c24     24 00 90 ED |  if_be	jmp	#LR__0137
03c28     AF 7E 02 FB | 	rdlong	local11, fp
03c2c     08 5E 05 F1 | 	add	fp, #8
03c30     AF 82 02 FB | 	rdlong	local13, fp
03c34     08 5E 85 F1 | 	sub	fp, #8
03c38     3F 83 02 F1 | 	add	local13, local11
03c3c                 | '         numberOfPatterns := byte[hubPtr][i]
03c3c     41 85 C2 FA | 	rdbyte	local14, local13
03c40     9B 0E 06 F1 | 	add	objptr, #155
03c44     07 85 42 FC | 	wrbyte	local14, objptr
03c48     9B 0E 86 F1 | 	sub	objptr, #155
03c4c                 | LR__0137
03c4c     08 5E 05 F1 | 	add	fp, #8
03c50     AF 84 02 FB | 	rdlong	local14, fp
03c54     01 84 06 F1 | 	add	local14, #1
03c58     AF 84 62 FC | 	wrlong	local14, fp
03c5c     08 5E 85 F1 | 	sub	fp, #8
03c60     02 00 00 FF 
03c64     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03c68     90 FF 9F CD |  if_b	jmp	#LR__0136
03c6c                 | LR__0138
03c6c                 | '     numberOfPatterns++
03c6c     9B 0E 06 F1 | 	add	objptr, #155
03c70     07 85 C2 FA | 	rdbyte	local14, objptr
03c74     07 71 C2 FA | 	rdbyte	local04, objptr
03c78     01 70 06 F1 | 	add	local04, #1
03c7c     07 71 42 FC | 	wrbyte	local04, objptr
03c80     07 87 C2 FA | 	rdbyte	local15, objptr
03c84     0A 86 66 F0 | 	shl	local15, #10
03c88     09 0E 86 F1 | 	sub	objptr, #9
03c8c     07 89 02 FB | 	rdlong	local16, objptr
03c90     43 89 02 F1 | 	add	local16, local15
03c94                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03c94     84 0E 86 F1 | 	sub	objptr, #132
03c98     07 89 62 FC | 	wrlong	local16, objptr
03c9c     0E 0E 86 F1 | 	sub	objptr, #14
03ca0                 | ' 
03ca0                 | '   ' This must be an oldschool 15 sample soundtracker module
03ca0                 | '   else
03ca0     18 01 90 FD | 	jmp	#LR__0143
03ca4                 | LR__0139
03ca4     AF 8A 02 FB | 	rdlong	local17, fp
03ca8     D6 8B 06 F1 | 	add	local17, #470
03cac                 | '     songLength          := byte[hubPtr + 470]
03cac     45 6D C2 FA | 	rdbyte	local02, local17
03cb0     9A 0E 06 F1 | 	add	objptr, #154
03cb4     07 6D 42 FC | 	wrbyte	local02, objptr
03cb8     AF 8C 02 FB | 	rdlong	local18, fp
03cbc     D7 8D 06 F1 | 	add	local18, #471
03cc0                 | '     unknown1            := byte[hubPtr + 471]
03cc0     46 6D C2 FA | 	rdbyte	local02, local18
03cc4     02 0E 06 F1 | 	add	objptr, #2
03cc8     07 6D 42 FC | 	wrbyte	local02, objptr
03ccc     AF 8E 02 FB | 	rdlong	local19, fp
03cd0     D8 8F 06 F1 | 	add	local19, #472
03cd4                 | '     songPositionsLut    :=      hubPtr + 472
03cd4     06 0E 86 F1 | 	sub	objptr, #6
03cd8     07 8F 62 FC | 	wrlong	local19, objptr
03cdc     AF 90 02 FB | 	rdlong	local20, fp
03ce0     01 00 00 FF 
03ce4     58 90 06 F1 | 	add	local20, ##600
03ce8                 | '     patternsData        :=      hubPtr + 600
03ce8     04 0E 86 F1 | 	sub	objptr, #4
03cec     07 91 62 FC | 	wrlong	local20, objptr
03cf0                 | '     numberOfInstruments := 15
03cf0     14 0E 06 F1 | 	add	objptr, #20
03cf4     07 1F 48 FC | 	wrbyte	#15, objptr
03cf8                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03cf8     0B 0E 86 F1 | 	sub	objptr, #11
03cfc     07 01 48 FC | 	wrbyte	#0, objptr
03d00     9B 0E 86 F1 | 	sub	objptr, #155
03d04                 | '     repeat i from 472 to 599
03d04     08 5E 05 F1 | 	add	fp, #8
03d08     AF B0 6B FC | 	wrlong	#472, fp
03d0c     08 5E 85 F1 | 	sub	fp, #8
03d10     5C C3 9F FE | 	loc	pa,	#(@LR__0142-@LR__0140)
03d14     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d18                 | LR__0140
03d18                 | '       if byte[hubPtr][i] > numberOfPatterns
03d18     AF 7E 02 FB | 	rdlong	local11, fp
03d1c     08 5E 05 F1 | 	add	fp, #8
03d20     AF 70 02 FB | 	rdlong	local04, fp
03d24     08 5E 85 F1 | 	sub	fp, #8
03d28     3F 71 02 F1 | 	add	local04, local11
03d2c     38 75 C2 FA | 	rdbyte	local06, local04
03d30     9B 0E 06 F1 | 	add	objptr, #155
03d34     07 81 C2 FA | 	rdbyte	local12, objptr
03d38     9B 0E 86 F1 | 	sub	objptr, #155
03d3c     40 75 5A F2 | 	cmps	local06, local12 wcz
03d40     24 00 90 ED |  if_be	jmp	#LR__0141
03d44     AF 7E 02 FB | 	rdlong	local11, fp
03d48     08 5E 05 F1 | 	add	fp, #8
03d4c     AF 92 02 FB | 	rdlong	local21, fp
03d50     08 5E 85 F1 | 	sub	fp, #8
03d54     3F 93 02 F1 | 	add	local21, local11
03d58                 | '         numberOfPatterns := byte[hubPtr][i]
03d58     49 85 C2 FA | 	rdbyte	local14, local21
03d5c     9B 0E 06 F1 | 	add	objptr, #155
03d60     07 85 42 FC | 	wrbyte	local14, objptr
03d64     9B 0E 86 F1 | 	sub	objptr, #155
03d68                 | LR__0141
03d68     08 5E 05 F1 | 	add	fp, #8
03d6c     AF 84 02 FB | 	rdlong	local14, fp
03d70     01 84 06 F1 | 	add	local14, #1
03d74     AF 84 62 FC | 	wrlong	local14, fp
03d78     08 5E 85 F1 | 	sub	fp, #8
03d7c     01 00 00 FF 
03d80     58 84 5E F2 | 	cmps	local14, ##600 wcz
03d84     90 FF 9F CD |  if_b	jmp	#LR__0140
03d88                 | LR__0142
03d88                 | '     numberOfPatterns++
03d88     9B 0E 06 F1 | 	add	objptr, #155
03d8c     07 85 C2 FA | 	rdbyte	local14, objptr
03d90     07 71 C2 FA | 	rdbyte	local04, objptr
03d94     01 70 06 F1 | 	add	local04, #1
03d98     07 71 42 FC | 	wrbyte	local04, objptr
03d9c     07 95 C2 FA | 	rdbyte	local22, objptr
03da0     0A 94 66 F0 | 	shl	local22, #10
03da4     09 0E 86 F1 | 	sub	objptr, #9
03da8     07 97 02 FB | 	rdlong	local23, objptr
03dac     4A 97 02 F1 | 	add	local23, local22
03db0                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03db0     84 0E 86 F1 | 	sub	objptr, #132
03db4     07 97 62 FC | 	wrlong	local23, objptr
03db8     0E 0E 86 F1 | 	sub	objptr, #14
03dbc                 | LR__0143
03dbc                 | ' 
03dbc                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03dbc                 | '   tmpPtr := sampleDataPtr
03dbc     0E 0E 06 F1 | 	add	objptr, #14
03dc0     07 6D 02 FB | 	rdlong	local02, objptr
03dc4     0C 5E 05 F1 | 	add	fp, #12
03dc8     AF 6C 62 FC | 	wrlong	local02, fp
03dcc                 | '   repeat i from 1 to numberOfInstruments
03dcc     04 5E 85 F1 | 	sub	fp, #4
03dd0     AF 02 68 FC | 	wrlong	#1, fp
03dd4     08 5E 85 F1 | 	sub	fp, #8
03dd8     98 0E 06 F1 | 	add	objptr, #152
03ddc     07 71 C2 FA | 	rdbyte	local04, objptr
03de0     01 70 5E F2 | 	cmps	local04, #1 wcz
03de4     01 84 06 16 |  if_a	mov	local14, #1
03de8     01 84 66 E6 |  if_be	neg	local14, #1
03dec     42 99 02 F6 | 	mov	local24, local14
03df0     07 9B C2 FA | 	rdbyte	local25, objptr
03df4     A6 0E 86 F1 | 	sub	objptr, #166
03df8     4C 9B 02 F1 | 	add	local25, local24
03dfc                 | LR__0144
03dfc     08 5E 05 F1 | 	add	fp, #8
03e00     AF 9C 02 FB | 	rdlong	local26, fp
03e04     01 9C 86 F1 | 	sub	local26, #1
03e08     02 9C 66 F0 | 	shl	local26, #2
03e0c     12 0E 06 F1 | 	add	objptr, #18
03e10     07 9D 02 F1 | 	add	local26, objptr
03e14                 | '     samplesPtrLut[i-1] := tmpPtr
03e14     04 5E 05 F1 | 	add	fp, #4
03e18     AF 80 02 FB | 	rdlong	local12, fp
03e1c     4E 81 62 FC | 	wrlong	local12, local26
03e20     18 5E 05 F1 | 	add	fp, #24
03e24     AF 5E 02 F6 | 	mov	arg02, fp
03e28     14 5E 85 F1 | 	sub	fp, #20
03e2c     AF 60 02 F6 | 	mov	arg03, fp
03e30     04 5E 05 F1 | 	add	fp, #4
03e34     AF 62 02 F6 | 	mov	arg04, fp
03e38     04 5E 05 F1 | 	add	fp, #4
03e3c     AF 64 02 F6 | 	mov	arg05, fp
03e40     04 5E 05 F1 | 	add	fp, #4
03e44     AF 66 02 F6 | 	mov	arg06, fp
03e48     04 5E 05 F1 | 	add	fp, #4
03e4c     AF 68 02 F6 | 	mov	arg07, fp
03e50                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03e50     18 5E 85 F1 | 	sub	fp, #24
03e54     AF 5C 02 FB | 	rdlong	arg01, fp
03e58     08 5E 85 F1 | 	sub	fp, #8
03e5c     12 0E 86 F1 | 	sub	objptr, #18
03e60     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03e64                 | '     tmpPtr += samLength
03e64     0C 5E 05 F1 | 	add	fp, #12
03e68     AF 80 02 FB | 	rdlong	local12, fp
03e6c     04 5E 05 F1 | 	add	fp, #4
03e70     AF 9E 02 FB | 	rdlong	local27, fp
03e74     4F 81 02 F1 | 	add	local12, local27
03e78     04 5E 85 F1 | 	sub	fp, #4
03e7c     AF 80 62 FC | 	wrlong	local12, fp
03e80     04 5E 85 F1 | 	sub	fp, #4
03e84     AF 80 02 FB | 	rdlong	local12, fp
03e88     4C 81 02 F1 | 	add	local12, local24
03e8c     AF 80 62 FC | 	wrlong	local12, fp
03e90     08 5E 85 F1 | 	sub	fp, #8
03e94     4D 81 0A F2 | 	cmp	local12, local25 wz
03e98     60 FF 9F 5D |  if_ne	jmp	#LR__0144
03e9c                 | ' 
03e9c                 | '   ' Below this point, all play routine variables are resest to their default values
03e9c                 | '   tickCounter                 := 0
03e9c     A1 0E 06 F1 | 	add	objptr, #161
03ea0     07 01 48 FC | 	wrbyte	#0, objptr
03ea4                 | '   patternRow                  := 0
03ea4     01 0E 06 F1 | 	add	objptr, #1
03ea8     07 01 48 FC | 	wrbyte	#0, objptr
03eac                 | '   songPosition                := startPattern
03eac     04 5E 05 F1 | 	add	fp, #4
03eb0     AF 6C 02 FB | 	rdlong	local02, fp
03eb4     04 5E 85 F1 | 	sub	fp, #4
03eb8     01 0E 06 F1 | 	add	objptr, #1
03ebc     07 6D 42 FC | 	wrbyte	local02, objptr
03ec0                 | '   currentSongSpeed            := 6
03ec0     01 0E 06 F1 | 	add	objptr, #1
03ec4     07 0D 48 FC | 	wrbyte	#6, objptr
03ec8                 | '   patternDelay                := 0
03ec8     01 0E 06 F1 | 	add	objptr, #1
03ecc     07 01 48 FC | 	wrbyte	#0, objptr
03ed0                 | '   ticksPerMinute              := 50 * 60
03ed0     02 0F 06 F1 | 	add	objptr, #258
03ed4     05 00 80 FF 
03ed8     07 71 6B FC | 	wrlong	##3000, objptr
03edc     A7 0F 86 F1 | 	sub	objptr, #423
03ee0     07 0B 03 FB | 	rdlong	muldiva_, objptr
03ee4     32 0C 07 F6 | 	mov	muldivb_, #50
03ee8     D0 00 A0 FD | 	call	#divide_
03eec                 | '   cyclesToWait                := systemClock / 50
03eec     AB 0F 06 F1 | 	add	objptr, #427
03ef0     07 0D 63 FC | 	wrlong	muldivb_, objptr
03ef4                 | '   sampleNumber_memory         := 0
03ef4     35 0E 06 F1 | 	add	objptr, #53
03ef8     07 01 48 FC | 	wrbyte	#0, objptr
03efc                 | '   lpFilter                    := 0
03efc     25 0E 86 F1 | 	sub	objptr, #37
03f00     07 01 48 FC | 	wrbyte	#0, objptr
03f04                 | '   cmdD_memoryX                := 0
03f04     29 0E 06 F1 | 	add	objptr, #41
03f08     07 01 48 FC | 	wrbyte	#0, objptr
03f0c                 | '   cmdD_memoryY                := 0
03f0c     01 0E 06 F1 | 	add	objptr, #1
03f10     07 01 48 FC | 	wrbyte	#0, objptr
03f14                 | '   cmdD_updatePosition         := false
03f14     01 0E 06 F1 | 	add	objptr, #1
03f18     07 01 48 FC | 	wrbyte	#0, objptr
03f1c                 | '   cmdB_memoryZ                := 0
03f1c     01 0E 06 F1 | 	add	objptr, #1
03f20     07 01 48 FC | 	wrbyte	#0, objptr
03f24                 | '   cmdB_updatePosition         := false
03f24     01 0E 06 F1 | 	add	objptr, #1
03f28     07 01 48 FC | 	wrbyte	#0, objptr
03f2c                 | '   cmdE6_updatePositionCommon  := false
03f2c     0D 0E 06 F1 | 	add	objptr, #13
03f30     07 01 48 FC | 	wrbyte	#0, objptr
03f34     F5 0F 86 F1 | 	sub	objptr, #501
03f38                 | ' 
03f38                 | '   repeat i from 0 to LAST_CHANNEL
03f38     08 5E 05 F1 | 	add	fp, #8
03f3c     AF 00 68 FC | 	wrlong	#0, fp
03f40     08 5E 85 F1 | 	sub	fp, #8
03f44                 | LR__0145
03f44     08 5E 05 F1 | 	add	fp, #8
03f48     AF A0 02 FB | 	rdlong	local28, fp
03f4c     01 A0 66 F0 | 	shl	local28, #1
03f50     D7 0E 06 F1 | 	add	objptr, #215
03f54     07 A1 02 F1 | 	add	local28, objptr
03f58                 | ' 
03f58                 | '     currRepeatPoint[i]        := 0
03f58     50 01 58 FC | 	wrword	#0, local28
03f5c     AF A2 02 FB | 	rdlong	local29, fp
03f60     01 A2 66 F0 | 	shl	local29, #1
03f64     1C 0E 86 F1 | 	sub	objptr, #28
03f68     07 A3 02 F1 | 	add	local29, objptr
03f6c                 | '     currSampleLength[i]       := 4
03f6c     51 09 58 FC | 	wrword	#4, local29
03f70     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03f74     AF A6 02 FB | 	rdlong	local31, fp
03f78     02 A6 66 F0 | 	shl	local31, #2
03f7c     14 0E 86 F1 | 	sub	objptr, #20
03f80     07 A7 02 F1 | 	add	local31, objptr
03f84                 | '     currSamplePtr[i]          := @null
03f84     53 A5 62 FC | 	wrlong	local30, local31
03f88     AF A8 02 FB | 	rdlong	local32, fp
03f8c     10 0E 06 F1 | 	add	objptr, #16
03f90     07 A9 02 F1 | 	add	local32, objptr
03f94                 | '     currSampleNr[i]           := 0
03f94     54 01 48 FC | 	wrbyte	#0, local32
03f98     AF AA 02 FB | 	rdlong	local33, fp
03f9c     02 AA 66 F0 | 	shl	local33, #2
03fa0     0C 0E 06 F1 | 	add	objptr, #12
03fa4     07 AB 02 F1 | 	add	local33, objptr
03fa8                 | '     currRepeatLength[i]       := 1
03fa8     55 03 68 FC | 	wrlong	#1, local33
03fac     AF AC 02 FB | 	rdlong	local34, fp
03fb0     02 AC 66 F0 | 	shl	local34, #2
03fb4     1C 0E 06 F1 | 	add	objptr, #28
03fb8     07 AD 02 F1 | 	add	local34, objptr
03fbc                 | '     currPeriod[i]             := 400
03fbc     56 21 6B FC | 	wrlong	#400, local34
03fc0     AF AE 02 FB | 	rdlong	local35, fp
03fc4     02 AE 66 F0 | 	shl	local35, #2
03fc8     48 0E 06 F1 | 	add	objptr, #72
03fcc     07 AF 02 F1 | 	add	local35, objptr
03fd0                 | '     lastSetPeriod[i]          := 400
03fd0     57 21 6B FC | 	wrlong	#400, local35
03fd4     AF B0 02 FB | 	rdlong	local36, fp
03fd8     02 B0 66 F0 | 	shl	local36, #2
03fdc     10 0E 06 F1 | 	add	objptr, #16
03fe0     07 B1 02 F1 | 	add	local36, objptr
03fe4                 | '     lastSetSamplePtr[i]       := 0
03fe4     58 01 68 FC | 	wrlong	#0, local36
03fe8     AF B2 02 FB | 	rdlong	local37, fp
03fec     02 B2 66 F0 | 	shl	local37, #2
03ff0     10 0E 06 F1 | 	add	objptr, #16
03ff4     07 B3 02 F1 | 	add	local37, objptr
03ff8                 | '     lastSetSampleNr[i]        := 0
03ff8     59 01 68 FC | 	wrlong	#0, local37
03ffc     AF B4 02 FB | 	rdlong	local38, fp
04000     02 B4 66 F0 | 	shl	local38, #2
04004     10 0E 06 F1 | 	add	objptr, #16
04008     07 B5 02 F1 | 	add	local38, objptr
0400c                 | '     lastSetSampleLength[i]    := 0
0400c     5A 01 68 FC | 	wrlong	#0, local38
04010     AF B6 02 FB | 	rdlong	local39, fp
04014     02 B6 66 F0 | 	shl	local39, #2
04018     10 0E 06 F1 | 	add	objptr, #16
0401c     07 B7 02 F1 | 	add	local39, objptr
04020                 | '     lastSetRepeatLength[i]    := 0
04020     5B 01 68 FC | 	wrlong	#0, local39
04024     AF B8 02 FB | 	rdlong	local40, fp
04028     02 B8 66 F0 | 	shl	local40, #2
0402c     10 0E 06 F1 | 	add	objptr, #16
04030     07 B9 02 F1 | 	add	local40, objptr
04034                 | '     lastSetRepeatPoint[i]     := 0
04034     5C 01 68 FC | 	wrlong	#0, local40
04038     AF BA 02 FB | 	rdlong	local41, fp
0403c     02 BA 66 F0 | 	shl	local41, #2
04040     78 0E 86 F1 | 	sub	objptr, #120
04044     07 BB 02 F1 | 	add	local41, objptr
04048                 | '     currVolume[i]             := 0
04048     5D 01 68 FC | 	wrlong	#0, local41
0404c     AF BC 02 FB | 	rdlong	local42, fp
04050     01 BC 66 F0 | 	shl	local42, #1
04054     20 0E 06 F1 | 	add	objptr, #32
04058     07 BD 02 F1 | 	add	local42, objptr
0405c                 | '     currPanning[i]            := 0
0405c     5E 01 58 FC | 	wrword	#0, local42
04060     AF BE 02 FB | 	rdlong	local43, fp
04064     A9 0E 06 F1 | 	add	objptr, #169
04068     07 BF 02 F1 | 	add	local43, objptr
0406c                 | '     cmd3_memoryZ[i]           := 0
0406c     5F 01 48 FC | 	wrbyte	#0, local43
04070     AF C0 02 FB | 	rdlong	local44, fp
04074     04 0E 06 F1 | 	add	objptr, #4
04078     07 C1 02 F1 | 	add	local44, objptr
0407c                 | '     cmd4_memoryY[i]           := 0
0407c     60 01 48 FC | 	wrbyte	#0, local44
04080     AF C2 02 FB | 	rdlong	local45, fp
04084     04 0E 06 F1 | 	add	objptr, #4
04088     07 C3 02 F1 | 	add	local45, objptr
0408c                 | '     cmd4_memoryX[i]           := 0
0408c     61 01 48 FC | 	wrbyte	#0, local45
04090     AF C4 02 FB | 	rdlong	local46, fp
04094     04 0E 06 F1 | 	add	objptr, #4
04098     07 C5 02 F1 | 	add	local46, objptr
0409c                 | '     cmd7_memoryY[i]           := 0
0409c     62 01 48 FC | 	wrbyte	#0, local46
040a0     AF C6 02 FB | 	rdlong	local47, fp
040a4     04 0E 06 F1 | 	add	objptr, #4
040a8     07 C7 02 F1 | 	add	local47, objptr
040ac                 | '     cmd7_memoryX[i]           := 0
040ac     63 01 48 FC | 	wrbyte	#0, local47
040b0     AF C8 02 FB | 	rdlong	local48, fp
040b4     04 0E 06 F1 | 	add	objptr, #4
040b8     07 C9 02 F1 | 	add	local48, objptr
040bc                 | '     cmd9_memoryZ[i]           := 0
040bc     64 01 48 FC | 	wrbyte	#0, local48
040c0     AF CA 02 FB | 	rdlong	local49, fp
040c4     0D 0E 06 F1 | 	add	objptr, #13
040c8     07 CB 02 F1 | 	add	local49, objptr
040cc                 | '     cmdE6_memory[i]           := 0
040cc     65 01 48 FC | 	wrbyte	#0, local49
040d0     AF CC 02 FB | 	rdlong	local50, fp
040d4     04 0E 06 F1 | 	add	objptr, #4
040d8     07 CD 02 F1 | 	add	local50, objptr
040dc                 | '     cmdE6_counter[i]          := 0
040dc     66 01 48 FC | 	wrbyte	#0, local50
040e0     AF CE 02 FB | 	rdlong	local51, fp
040e4     04 0E 06 F1 | 	add	objptr, #4
040e8     07 CF 02 F1 | 	add	local51, objptr
040ec                 | '     cmdE6_updatePosition[i]   := false
040ec     67 01 48 FC | 	wrbyte	#0, local51
040f0     AF D0 02 FB | 	rdlong	local52, fp
040f4     11 0E 86 F1 | 	sub	objptr, #17
040f8     07 D1 02 F1 | 	add	local52, objptr
040fc                 | '     sampleNumber_memory[i]    := 0
040fc     68 01 48 FC | 	wrbyte	#0, local52
04100     AF D2 02 FB | 	rdlong	local53, fp
04104     59 0E 86 F1 | 	sub	objptr, #89
04108     07 D3 02 F1 | 	add	local53, objptr
0410c                 | '     vibratoPos[i]             := 0
0410c     69 01 48 FC | 	wrbyte	#0, local53
04110     AF D4 02 FB | 	rdlong	local54, fp
04114     02 D4 66 F0 | 	shl	local54, #2
04118     10 0E 06 F1 | 	add	objptr, #16
0411c     07 D5 02 F1 | 	add	local54, objptr
04120                 | '     portamentoPeriodMemory[i] := 0
04120     6A 01 68 FC | 	wrlong	#0, local54
04124     AF D6 02 FB | 	rdlong	local55, fp
04128     25 0E 06 F1 | 	add	objptr, #37
0412c     07 D7 02 F1 | 	add	local55, objptr
04130                 | '     portaGlissando[i]         := 0
04130     6B 01 48 FC | 	wrbyte	#0, local55
04134     AF D8 02 FB | 	rdlong	local56, fp
04138     04 0E 06 F1 | 	add	objptr, #4
0413c     07 D9 02 F1 | 	add	local56, objptr
04140                 | '     vibratoType[i]            := 0
04140     6C 01 48 FC | 	wrbyte	#0, local56
04144     AF DA 02 FB | 	rdlong	local57, fp
04148     04 0E 06 F1 | 	add	objptr, #4
0414c     07 DB 02 F1 | 	add	local57, objptr
04150                 | '     tremoloType[i]            := 0
04150     6D 01 48 FC | 	wrbyte	#0, local57
04154     AF DC 02 FB | 	rdlong	local58, fp
04158     39 0E 86 F1 | 	sub	objptr, #57
0415c     07 DD 02 F1 | 	add	local58, objptr
04160                 | '     tremoloPos[i]             := 0
04160     6E 01 48 FC | 	wrbyte	#0, local58
04164     AF DE 02 FB | 	rdlong	local59, fp
04168     02 DE 66 F0 | 	shl	local59, #2
0416c     7C 0E 86 F1 | 	sub	objptr, #124
04170     07 DF 02 F1 | 	add	local59, objptr
04174                 | '     deltaVolume[i]            := 0
04174     6F 01 68 FC | 	wrlong	#0, local59
04178     AF E0 02 FB | 	rdlong	local60, fp
0417c     02 E0 66 F0 | 	shl	local60, #2
04180     20 0E 86 F1 | 	sub	objptr, #32
04184     07 E1 02 F1 | 	add	local60, objptr
04188                 | '     deltaPeriod[i]            := 0
04188     70 01 68 FC | 	wrlong	#0, local60
0418c     AF E2 02 FB | 	rdlong	local61, fp
04190     A0 0E 06 F1 | 	add	objptr, #160
04194     07 E3 02 F1 | 	add	local61, objptr
04198                 | '     resetTremolo[i]           := 0
04198     71 01 48 FC | 	wrbyte	#0, local61
0419c     AF E4 02 FB | 	rdlong	local62, fp
041a0     04 0E 06 F1 | 	add	objptr, #4
041a4     07 E5 02 F1 | 	add	local62, objptr
041a8                 | '     resetVibrato[i]           := 0
041a8     72 01 48 FC | 	wrbyte	#0, local62
041ac     AF 84 02 FB | 	rdlong	local14, fp
041b0     01 84 06 F1 | 	add	local14, #1
041b4     AF 84 62 FC | 	wrlong	local14, fp
041b8     08 5E 85 F1 | 	sub	fp, #8
041bc     04 84 5E F2 | 	cmps	local14, #4 wcz
041c0     93 0F 86 F1 | 	sub	objptr, #403
041c4     7C FD 9F CD |  if_b	jmp	#LR__0145
041c8     AF F0 03 F6 | 	mov	ptra, fp
041cc     BF 00 A0 FD | 	call	#popregs_
041d0                 | _trackerplayer_spin2_initModule_ret
041d0     2D 00 64 FD | 	ret
041d4                 | 
041d4                 | ' 
041d4                 | ' 
041d4                 | ' ' This routine needs to be ticked X number of times per second
041d4                 | ' ' in order to advance the tracker play routine
041d4                 | ' '
041d4                 | ' PUB tick() | channel, sampleNumber, period, effect, i
041d4                 | _trackerplayer_spin2_tick
041d4     12 5A 05 F6 | 	mov	COUNT_, #18
041d8     B0 00 A0 FD | 	call	#pushregs_
041dc     30 F0 07 F1 | 	add	ptra, #48
041e0                 | ' 
041e0                 | '   if currentSongSpeed == 0
041e0     A4 0E 06 F1 | 	add	objptr, #164
041e4     07 6B CA FA | 	rdbyte	local01, objptr wz
041e8     A4 0E 86 F1 | 	sub	objptr, #164
041ec                 | '     return
041ec     34 03 90 AD |  if_e	jmp	#LR__0157
041f0                 | ' 
041f0                 | '   ' Iterate over the channels and process everything
041f0                 | '   repeat channel from 0 to LAST_CHANNEL
041f0     AF 00 68 FC | 	wrlong	#0, fp
041f4                 | LR__0146
041f4     04 5E 05 F1 | 	add	fp, #4
041f8     AF 62 02 F6 | 	mov	arg04, fp
041fc     04 5E 05 F1 | 	add	fp, #4
04200     AF 64 02 F6 | 	mov	arg05, fp
04204     04 5E 05 F1 | 	add	fp, #4
04208     AF 66 02 F6 | 	mov	arg06, fp
0420c     0C 5E 85 F1 | 	sub	fp, #12
04210                 | ' 
04210                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04210     AF 5C 02 FB | 	rdlong	arg01, fp
04214     A3 0E 06 F1 | 	add	objptr, #163
04218     07 5F C2 FA | 	rdbyte	arg02, objptr
0421c     01 0E 86 F1 | 	sub	objptr, #1
04220     07 61 C2 FA | 	rdbyte	arg03, objptr
04224     7F 5E 06 F5 | 	and	arg02, #127
04228     0C 0E 86 F1 | 	sub	objptr, #12
0422c     07 6D 02 FB | 	rdlong	local02, objptr
04230     36 5F 02 F1 | 	add	arg02, local02
04234                 | ' 
04234                 | '   ' Get the note data for a specific channel/song position/pattern row
04234                 | '   patternNumber := byte[songPositionsLut][position & 127]
04234     2F 6F C2 FA | 	rdbyte	local03, arg02
04238     0A 6E 66 F0 | 	shl	local03, #10
0423c     04 0E 86 F1 | 	sub	objptr, #4
04240     07 71 02 FB | 	rdlong	local04, objptr
04244     92 0E 86 F1 | 	sub	objptr, #146
04248     37 71 02 F1 | 	add	local04, local03
0424c                 | '   patternPtr    := patternsData + (patternNumber << 10)
0424c     3F 60 06 F5 | 	and	arg03, #63
04250     04 60 66 F0 | 	shl	arg03, #4
04254     30 71 02 F1 | 	add	local04, arg03
04258     03 5C 06 F5 | 	and	arg01, #3
0425c     02 5C 66 F0 | 	shl	arg01, #2
04260     2E 71 02 F1 | 	add	local04, arg01
04264                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04264     38 73 C2 FA | 	rdbyte	local05, local04
04268     18 72 66 F0 | 	shl	local05, #24
0426c     01 70 06 F1 | 	add	local04, #1
04270     38 75 C2 FA | 	rdbyte	local06, local04
04274     10 74 66 F0 | 	shl	local06, #16
04278     3A 73 42 F5 | 	or	local05, local06
0427c     01 70 06 F1 | 	add	local04, #1
04280     38 77 C2 FA | 	rdbyte	local07, local04
04284     08 76 66 F0 | 	shl	local07, #8
04288     3B 73 42 F5 | 	or	local05, local07
0428c     01 70 06 F1 | 	add	local04, #1
04290     38 79 C2 FA | 	rdbyte	local08, local04
04294     3C 73 42 F5 | 	or	local05, local08
04298                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04298     39 7B 02 F6 | 	mov	local09, local05
0429c     0C 7A 46 F0 | 	shr	local09, #12
042a0     0F 7A 06 F5 | 	and	local09, #15
042a4     39 7D 02 F6 | 	mov	local10, local05
042a8     18 7C 46 F0 | 	shr	local10, #24
042ac     F0 7C 06 F5 | 	and	local10, #240
042b0     3E 7B 42 F5 | 	or	local09, local10
042b4                 | ' 
042b4                 | '   ' Extract the different sub parts from the data
042b4                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
042b4     31 7B 62 FC | 	wrlong	local09, arg04
042b8     39 7F 02 F6 | 	mov	local11, local05
042bc     10 7E 46 F0 | 	shr	local11, #16
042c0     07 00 00 FF 
042c4     FF 7F 06 F5 | 	and	local11, ##4095
042c8                 | '   long[period]       :=  (data >> 16) & $FFF
042c8     32 7F 62 FC | 	wrlong	local11, arg05
042cc     07 00 00 FF 
042d0     FF 73 06 F5 | 	and	local05, ##4095
042d4                 | '   long[effect]       :=   data & $FFF
042d4     33 73 62 FC | 	wrlong	local05, arg06
042d8                 | '     processChannel(channel, sampleNumber, period, effect)
042d8     AF 5C 02 FB | 	rdlong	arg01, fp
042dc     04 5E 05 F1 | 	add	fp, #4
042e0     AF 5E 02 FB | 	rdlong	arg02, fp
042e4     04 5E 05 F1 | 	add	fp, #4
042e8     AF 60 02 FB | 	rdlong	arg03, fp
042ec     04 5E 05 F1 | 	add	fp, #4
042f0     AF 62 02 FB | 	rdlong	arg04, fp
042f4     0C 5E 85 F1 | 	sub	fp, #12
042f8     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
042fc     AF 80 02 FB | 	rdlong	local12, fp
04300     01 80 06 F1 | 	add	local12, #1
04304     AF 80 62 FC | 	wrlong	local12, fp
04308     04 80 5E F2 | 	cmps	local12, #4 wcz
0430c     E4 FE 9F CD |  if_b	jmp	#LR__0146
04310                 | ' 
04310                 | '   ' Incrementation the main counter that drives the whole play routine
04310                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04310     A1 0E 06 F1 | 	add	objptr, #161
04314     07 6B C2 FA | 	rdbyte	local01, objptr
04318     01 6A 06 F1 | 	add	local01, #1
0431c     07 6B 42 FC | 	wrbyte	local01, objptr
04320     03 0E 06 F1 | 	add	objptr, #3
04324     07 83 C2 FA | 	rdbyte	local13, objptr
04328     01 0E 06 F1 | 	add	objptr, #1
0432c     07 85 C2 FA | 	rdbyte	local14, objptr
04330     42 83 02 F1 | 	add	local13, local14
04334     04 0E 86 F1 | 	sub	objptr, #4
04338     07 87 C2 FA | 	rdbyte	local15, objptr
0433c     A1 0E 86 F1 | 	sub	objptr, #161
04340     41 87 5A F2 | 	cmps	local15, local13 wcz
04344                 | '     tickCounter := 0
04344     A1 0E 06 31 |  if_ae	add	objptr, #161
04348     07 01 48 3C |  if_ae	wrbyte	#0, objptr
0434c     A1 0E 86 31 |  if_ae	sub	objptr, #161
04350                 | ' 
04350                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04350                 | '   if tickCounter == 0
04350     A1 0E 06 F1 | 	add	objptr, #161
04354     07 6B CA FA | 	rdbyte	local01, objptr wz
04358     A1 0E 86 F1 | 	sub	objptr, #161
0435c     C4 01 90 5D |  if_ne	jmp	#LR__0156
04360                 | ' 
04360                 | '     ' Handle the "pattern repeat" command, "E6"
04360                 | '     if cmdE6_updatePositionCommon
04360     F5 0F 06 F1 | 	add	objptr, #501
04364     07 6B CA FA | 	rdbyte	local01, objptr wz
04368     F5 0F 86 F1 | 	sub	objptr, #501
0436c     8C 00 90 AD |  if_e	jmp	#LR__0150
04370                 | '       repeat i from 0 to LAST_CHANNEL
04370     10 5E 05 F1 | 	add	fp, #16
04374     AF 00 68 FC | 	wrlong	#0, fp
04378     10 5E 85 F1 | 	sub	fp, #16
0437c     F4 BC 9F FE | 	loc	pa,	#(@LR__0149-@LR__0147)
04380     93 00 A0 FD | 	call	#FCACHE_LOAD_
04384                 | LR__0147
04384                 | '         if cmdE6_updatePosition[i]
04384     10 5E 05 F1 | 	add	fp, #16
04388     AF 80 02 FB | 	rdlong	local12, fp
0438c     10 5E 85 F1 | 	sub	fp, #16
04390     F1 0F 06 F1 | 	add	objptr, #497
04394     07 81 02 F1 | 	add	local12, objptr
04398     40 85 CA FA | 	rdbyte	local14, local12 wz
0439c     F1 0F 86 F1 | 	sub	objptr, #497
043a0     24 00 90 AD |  if_e	jmp	#LR__0148
043a4     10 5E 05 F1 | 	add	fp, #16
043a8     AF 88 02 FB | 	rdlong	local16, fp
043ac     10 5E 85 F1 | 	sub	fp, #16
043b0     E9 0F 06 F1 | 	add	objptr, #489
043b4     07 89 02 F1 | 	add	local16, objptr
043b8                 | '           patternRow := cmdE6_memory[i]
043b8     44 81 C2 FA | 	rdbyte	local12, local16
043bc     47 0F 86 F1 | 	sub	objptr, #327
043c0     07 81 42 FC | 	wrbyte	local12, objptr
043c4     A2 0E 86 F1 | 	sub	objptr, #162
043c8                 | LR__0148
043c8     10 5E 05 F1 | 	add	fp, #16
043cc     AF 8A 02 FB | 	rdlong	local17, fp
043d0     F1 0F 06 F1 | 	add	objptr, #497
043d4     07 8B 02 F1 | 	add	local17, objptr
043d8                 | '         cmdE6_updatePosition[i] := false
043d8     45 01 48 FC | 	wrbyte	#0, local17
043dc     AF 80 02 FB | 	rdlong	local12, fp
043e0     01 80 06 F1 | 	add	local12, #1
043e4     AF 80 62 FC | 	wrlong	local12, fp
043e8     10 5E 85 F1 | 	sub	fp, #16
043ec     04 80 5E F2 | 	cmps	local12, #4 wcz
043f0     F1 0F 86 F1 | 	sub	objptr, #497
043f4     8C FF 9F CD |  if_b	jmp	#LR__0147
043f8                 | LR__0149
043f8     CC 00 90 FD | 	jmp	#LR__0154
043fc                 | LR__0150
043fc                 | ' 
043fc                 | '     ' Handle the "skip to next pattern with offset command", "D"
043fc                 | '     elseif cmdD_updatePosition
043fc     E6 0F 06 F1 | 	add	objptr, #486
04400     07 6B CA FA | 	rdbyte	local01, objptr wz
04404     E6 0F 86 F1 | 	sub	objptr, #486
04408     64 00 90 AD |  if_e	jmp	#LR__0151
0440c                 | '       if ++songPosition >= songLength
0440c     A3 0E 06 F1 | 	add	objptr, #163
04410     07 6B C2 FA | 	rdbyte	local01, objptr
04414     01 6A 06 F1 | 	add	local01, #1
04418     07 6B 42 FC | 	wrbyte	local01, objptr
0441c     07 83 C2 FA | 	rdbyte	local13, objptr
04420     09 0E 86 F1 | 	sub	objptr, #9
04424     07 85 C2 FA | 	rdbyte	local14, objptr
04428     9A 0E 86 F1 | 	sub	objptr, #154
0442c     42 83 5A F2 | 	cmps	local13, local14 wcz
04430                 | '         songPosition := 0
04430     A3 0E 06 31 |  if_ae	add	objptr, #163
04434     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04438     A3 0E 86 31 |  if_ae	sub	objptr, #163
0443c     E4 0F 06 F1 | 	add	objptr, #484
04440     07 81 C2 FA | 	rdbyte	local12, objptr
04444     40 8D 02 F6 | 	mov	local18, local12
04448     02 8C 66 F0 | 	shl	local18, #2
0444c     40 8D 02 F1 | 	add	local18, local12
04450     01 8C 66 F0 | 	shl	local18, #1
04454     01 0E 06 F1 | 	add	objptr, #1
04458     07 81 C2 FA | 	rdbyte	local12, objptr
0445c     40 8D 02 F1 | 	add	local18, local12
04460                 | ' 
04460                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04460     43 0F 86 F1 | 	sub	objptr, #323
04464     07 8D 42 FC | 	wrbyte	local18, objptr
04468     A2 0E 86 F1 | 	sub	objptr, #162
0446c                 | ' 
0446c                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
0446c                 | '     else
0446c     58 00 90 FD | 	jmp	#LR__0153
04470                 | LR__0151
04470                 | '       if ++patternRow >= PATTERN_LENGTH
04470     A2 0E 06 F1 | 	add	objptr, #162
04474     07 6B C2 FA | 	rdbyte	local01, objptr
04478     01 6A 06 F1 | 	add	local01, #1
0447c     07 6B 42 FC | 	wrbyte	local01, objptr
04480     07 83 C2 FA | 	rdbyte	local13, objptr
04484     A2 0E 86 F1 | 	sub	objptr, #162
04488     40 82 5E F2 | 	cmps	local13, #64 wcz
0448c     38 00 90 CD |  if_b	jmp	#LR__0152
04490                 | '         patternRow := 0
04490     A2 0E 06 F1 | 	add	objptr, #162
04494     07 01 48 FC | 	wrbyte	#0, objptr
04498                 | ' 
04498                 | '         if ++songPosition >= songLength
04498     01 0E 06 F1 | 	add	objptr, #1
0449c     07 6B C2 FA | 	rdbyte	local01, objptr
044a0     01 6A 06 F1 | 	add	local01, #1
044a4     07 6B 42 FC | 	wrbyte	local01, objptr
044a8     07 83 C2 FA | 	rdbyte	local13, objptr
044ac     09 0E 86 F1 | 	sub	objptr, #9
044b0     07 85 C2 FA | 	rdbyte	local14, objptr
044b4     9A 0E 86 F1 | 	sub	objptr, #154
044b8     42 83 5A F2 | 	cmps	local13, local14 wcz
044bc                 | '           songPosition := 0
044bc     A3 0E 06 31 |  if_ae	add	objptr, #163
044c0     07 01 48 3C |  if_ae	wrbyte	#0, objptr
044c4     A3 0E 86 31 |  if_ae	sub	objptr, #163
044c8                 | LR__0152
044c8                 | LR__0153
044c8                 | LR__0154
044c8                 | ' 
044c8                 | '     ' Handle "jump to song position" command, "B"
044c8                 | '     if cmdB_updatePosition
044c8     E8 0F 06 F1 | 	add	objptr, #488
044cc     07 6B CA FA | 	rdbyte	local01, objptr wz
044d0     E8 0F 86 F1 | 	sub	objptr, #488
044d4     28 00 90 AD |  if_e	jmp	#LR__0155
044d8                 | ' 
044d8                 | '       songPosition := cmdB_memoryZ
044d8     E7 0F 06 F1 | 	add	objptr, #487
044dc     07 6B C2 FA | 	rdbyte	local01, objptr
044e0     44 0F 86 F1 | 	sub	objptr, #324
044e4     07 6B 42 FC | 	wrbyte	local01, objptr
044e8                 | ' 
044e8                 | '       ifnot cmdD_updatePosition
044e8     43 0F 06 F1 | 	add	objptr, #323
044ec     07 6B CA FA | 	rdbyte	local01, objptr wz
044f0     E6 0F 86 F1 | 	sub	objptr, #486
044f4                 | '         patternRow := 0
044f4     A2 0E 06 A1 |  if_e	add	objptr, #162
044f8     07 01 48 AC |  if_e	wrbyte	#0, objptr
044fc     A2 0E 86 A1 |  if_e	sub	objptr, #162
04500                 | LR__0155
04500                 | ' 
04500                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04500                 | '     cmdE6_updatePositionCommon := false
04500     F5 0F 06 F1 | 	add	objptr, #501
04504     07 01 48 FC | 	wrbyte	#0, objptr
04508                 | '     cmdB_updatePosition := false
04508     0D 0E 86 F1 | 	sub	objptr, #13
0450c     07 01 48 FC | 	wrbyte	#0, objptr
04510                 | '     cmdD_updatePosition := false
04510     02 0E 86 F1 | 	sub	objptr, #2
04514     07 01 48 FC | 	wrbyte	#0, objptr
04518                 | '     patternDelay := 0
04518     41 0F 86 F1 | 	sub	objptr, #321
0451c     07 01 48 FC | 	wrbyte	#0, objptr
04520     A5 0E 86 F1 | 	sub	objptr, #165
04524                 | LR__0156
04524                 | LR__0157
04524     AF F0 03 F6 | 	mov	ptra, fp
04528     BF 00 A0 FD | 	call	#popregs_
0452c                 | _trackerplayer_spin2_tick_ret
0452c     2D 00 64 FD | 	ret
04530                 | 
04530                 | ' 
04530                 | ' 
04530                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04530                 | _trackerplayer_spin2_amigaPeriodToNote
04530                 | ' 
04530                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04530     00 30 06 F6 | 	mov	_var01, #0
04534     14 BB 9F FE | 	loc	pa,	#(@LR__0159-@LR__0158)
04538     93 00 A0 FD | 	call	#FCACHE_LOAD_
0453c                 | LR__0158
0453c                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
0453c     06 00 00 FF 
04540     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04544     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04548     2F 35 02 F6 | 	mov	_var03, arg02
0454c     03 34 66 F0 | 	shl	_var03, #3
04550     2F 35 02 F1 | 	add	_var03, arg02
04554     03 34 66 F0 | 	shl	_var03, #3
04558     1A 33 02 F1 | 	add	_var02, _var03
0455c     18 37 02 F6 | 	mov	_var04, _var01
04560     01 36 66 F0 | 	shl	_var04, #1
04564     19 37 02 F1 | 	add	_var04, _var02
04568     1B 39 E2 FA | 	rdword	_var05, _var04
0456c     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
04570                 | '       quit
04570     06 00 00 FF 
04574     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04578     0C 00 90 ED |  if_be	jmp	#LR__0160
0457c     01 30 06 F1 | 	add	_var01, #1
04580     24 30 5E F2 | 	cmps	_var01, #36 wcz
04584     B4 FF 9F CD |  if_b	jmp	#LR__0158
04588                 | LR__0159
04588                 | LR__0160
04588                 | ' 
04588                 | '   return i
04588     18 2B 02 F6 | 	mov	result1, _var01
0458c                 | _trackerplayer_spin2_amigaPeriodToNote_ret
0458c     2D 00 64 FD | 	ret
04590                 | 
04590                 | ' 
04590                 | ' 
04590                 | ' PRI retunePeriod(period, fTune) | noteNumber
04590                 | _trackerplayer_spin2_retunePeriod
04590     06 5A 05 F6 | 	mov	COUNT_, #6
04594     B0 00 A0 FD | 	call	#pushregs_
04598     2E 6B 02 F6 | 	mov	local01, arg01
0459c     2F 6D 02 F6 | 	mov	local02, arg02
045a0                 | ' 
045a0                 | '   if period > 0 and fTune < 16
045a0     00 6A 5E F2 | 	cmps	local01, #0 wcz
045a4     50 00 90 ED |  if_be	jmp	#LR__0161
045a8     10 6C 5E F2 | 	cmps	local02, #16 wcz
045ac     48 00 90 3D |  if_ae	jmp	#LR__0161
045b0                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
045b0     35 5D E2 FA | 	rdword	arg01, local01
045b4     00 5E 06 F6 | 	mov	arg02, #0
045b8     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
045bc     15 6F 02 F6 | 	mov	local03, result1
045c0     06 00 00 FF 
045c4     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
045c8     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
045cc     36 73 02 F6 | 	mov	local05, local02
045d0     03 72 66 F0 | 	shl	local05, #3
045d4     36 73 02 F1 | 	add	local05, local02
045d8     03 72 66 F0 | 	shl	local05, #3
045dc     39 71 02 F1 | 	add	local04, local05
045e0     01 6E 66 F0 | 	shl	local03, #1
045e4     38 6F 02 F1 | 	add	local03, local04
045e8                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
045e8     37 75 E2 FA | 	rdword	local06, local03
045ec     35 75 52 FC | 	wrword	local06, local01
045f0     06 00 00 FF 
045f4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
045f8                 | LR__0161
045f8     AF F0 03 F6 | 	mov	ptra, fp
045fc     BF 00 A0 FD | 	call	#popregs_
04600                 | _trackerplayer_spin2_retunePeriod_ret
04600     2D 00 64 FD | 	ret
04604                 | 
04604                 | ' 
04604                 | ' 
04604                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04604                 | _trackerplayer_spin2_getSampleInfo
04604     2E 31 0A F6 | 	mov	_var01, arg01 wz
04608                 | ' 
04608                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04608     08 00 90 AD |  if_e	jmp	#LR__0162
0460c     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04610     08 00 90 ED |  if_be	jmp	#LR__0163
04614                 | LR__0162
04614                 | '     long[samplePtr] := 0
04614     2F 01 68 FC | 	wrlong	#0, arg02
04618                 | '     return
04618     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0461c                 | LR__0163
0461c                 | ' 
0461c                 | '   sampleNumber--
0461c     01 30 86 F1 | 	sub	_var01, #1
04620     18 33 02 F6 | 	mov	_var02, _var01
04624     04 32 66 F0 | 	shl	_var02, #4
04628     18 33 82 F1 | 	sub	_var02, _var01
0462c     01 32 66 F0 | 	shl	_var02, #1
04630     0A 0E 06 F1 | 	add	objptr, #10
04634     07 35 02 FB | 	rdlong	_var03, objptr
04638     19 35 02 F1 | 	add	_var03, _var02
0463c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0463c     1A 37 02 F6 | 	mov	_var04, _var03
04640     16 36 06 F1 | 	add	_var04, #22
04644     1B 39 C2 FA | 	rdbyte	_var05, _var04
04648     08 38 66 F0 | 	shl	_var05, #8
0464c     1A 3B 02 F6 | 	mov	_var06, _var03
04650     17 3A 06 F1 | 	add	_var06, #23
04654     1D 3D C2 FA | 	rdbyte	_var07, _var06
04658     1E 39 42 F5 | 	or	_var05, _var07
0465c     01 38 66 F0 | 	shl	_var05, #1
04660                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04660     30 39 62 FC | 	wrlong	_var05, arg03
04664     1A 3F 02 F6 | 	mov	_var08, _var03
04668     18 3E 06 F1 | 	add	_var08, #24
0466c                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
0466c     1F 41 C2 FA | 	rdbyte	_var09, _var08
04670     31 41 62 FC | 	wrlong	_var09, arg04
04674     1A 43 02 F6 | 	mov	_var10, _var03
04678     19 42 06 F1 | 	add	_var10, #25
0467c                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
0467c     21 41 C2 FA | 	rdbyte	_var09, _var10
04680     32 41 62 FC | 	wrlong	_var09, arg05
04684     1A 45 02 F6 | 	mov	_var11, _var03
04688     1A 44 06 F1 | 	add	_var11, #26
0468c     22 47 C2 FA | 	rdbyte	_var12, _var11
04690     08 46 66 F0 | 	shl	_var12, #8
04694     1A 49 02 F6 | 	mov	_var13, _var03
04698     1B 48 06 F1 | 	add	_var13, #27
0469c     24 3D C2 FA | 	rdbyte	_var07, _var13
046a0     1E 47 42 F5 | 	or	_var12, _var07
046a4     01 46 66 F0 | 	shl	_var12, #1
046a8                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
046a8     33 47 62 FC | 	wrlong	_var12, arg06
046ac     1A 4B 02 F6 | 	mov	_var14, _var03
046b0     1C 4A 06 F1 | 	add	_var14, #28
046b4     25 4D C2 FA | 	rdbyte	_var15, _var14
046b8     08 4C 66 F0 | 	shl	_var15, #8
046bc     1D 34 06 F1 | 	add	_var03, #29
046c0     1A 3D C2 FA | 	rdbyte	_var07, _var03
046c4     1E 4D 42 F5 | 	or	_var15, _var07
046c8     01 4C 66 F0 | 	shl	_var15, #1
046cc                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
046cc     34 4D 62 FC | 	wrlong	_var15, arg07
046d0     02 30 66 F0 | 	shl	_var01, #2
046d4     08 0E 06 F1 | 	add	objptr, #8
046d8     07 31 02 F1 | 	add	_var01, objptr
046dc                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
046dc     18 41 02 FB | 	rdlong	_var09, _var01
046e0     2F 41 62 FC | 	wrlong	_var09, arg02
046e4                 | ' 
046e4                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
046e4     34 41 02 FB | 	rdlong	_var09, arg07
046e8     02 40 0E F2 | 	cmp	_var09, #2 wz
046ec     12 0E 86 F1 | 	sub	objptr, #18
046f0     08 00 90 5D |  if_ne	jmp	#LR__0164
046f4     33 3D 0A FB | 	rdlong	_var07, arg06 wz
046f8                 | '     long[repeatLength] := 1
046f8     34 03 68 AC |  if_e	wrlong	#1, arg07
046fc                 | LR__0164
046fc                 | _trackerplayer_spin2_getSampleInfo_ret
046fc     2D 00 64 FD | 	ret
04700                 | 
04700                 | ' 
04700                 | ' 
04700                 | ' PRI triggerNote(channel)
04700                 | _trackerplayer_spin2_triggerNote
04700     2E 31 02 F6 | 	mov	_var01, arg01
04704     02 30 66 F0 | 	shl	_var01, #2
04708     47 0F 06 F1 | 	add	objptr, #327
0470c     07 31 02 F1 | 	add	_var01, objptr
04710     2E 33 02 F6 | 	mov	_var02, arg01
04714     90 0E 86 F1 | 	sub	objptr, #144
04718                 | ' 
04718                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04718     18 35 02 FB | 	rdlong	_var03, _var01
0471c     07 33 02 F1 | 	add	_var02, objptr
04720     19 35 42 FC | 	wrbyte	_var03, _var02
04724     2E 37 02 F6 | 	mov	_var04, arg01
04728     02 36 66 F0 | 	shl	_var04, #2
0472c     80 0E 06 F1 | 	add	objptr, #128
04730     07 37 02 F1 | 	add	_var04, objptr
04734     2E 39 02 F6 | 	mov	_var05, arg01
04738     02 38 66 F0 | 	shl	_var05, #2
0473c     90 0E 86 F1 | 	sub	objptr, #144
04740                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
04740     1B 35 02 FB | 	rdlong	_var03, _var04
04744     07 39 02 F1 | 	add	_var05, objptr
04748     1C 35 62 FC | 	wrlong	_var03, _var05
0474c     2E 3B 02 F6 | 	mov	_var06, arg01
04750     02 3A 66 F0 | 	shl	_var06, #2
04754     80 0E 06 F1 | 	add	objptr, #128
04758     07 3B 02 F1 | 	add	_var06, objptr
0475c     2E 3D 02 F6 | 	mov	_var07, arg01
04760     02 3C 66 F0 | 	shl	_var07, #2
04764     48 0E 86 F1 | 	sub	objptr, #72
04768                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04768     1D 35 02 FB | 	rdlong	_var03, _var06
0476c     07 3D 02 F1 | 	add	_var07, objptr
04770     1E 35 62 FC | 	wrlong	_var03, _var07
04774     2E 3F 02 F6 | 	mov	_var08, arg01
04778     02 3E 66 F0 | 	shl	_var08, #2
0477c     78 0E 06 F1 | 	add	objptr, #120
04780     07 3F 02 F1 | 	add	_var08, objptr
04784     2E 41 02 F6 | 	mov	_var09, arg01
04788     01 40 66 F0 | 	shl	_var09, #1
0478c     9C 0E 86 F1 | 	sub	objptr, #156
04790                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04790     1F 35 02 FB | 	rdlong	_var03, _var08
04794     07 41 02 F1 | 	add	_var09, objptr
04798     20 35 52 FC | 	wrword	_var03, _var09
0479c     2E 43 02 F6 | 	mov	_var10, arg01
047a0     02 42 66 F0 | 	shl	_var10, #2
047a4     AC 0E 06 F1 | 	add	objptr, #172
047a8     07 43 02 F1 | 	add	_var10, objptr
047ac     2E 45 02 F6 | 	mov	_var11, arg01
047b0     02 44 66 F0 | 	shl	_var11, #2
047b4     A4 0E 86 F1 | 	sub	objptr, #164
047b8                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
047b8     21 35 02 FB | 	rdlong	_var03, _var10
047bc     07 45 02 F1 | 	add	_var11, objptr
047c0     22 35 62 FC | 	wrlong	_var03, _var11
047c4     2E 47 02 F6 | 	mov	_var12, arg01
047c8     02 46 66 F0 | 	shl	_var12, #2
047cc     B4 0E 06 F1 | 	add	objptr, #180
047d0     07 47 02 F1 | 	add	_var12, objptr
047d4     2E 49 02 F6 | 	mov	_var13, arg01
047d8     01 48 66 F0 | 	shl	_var13, #1
047dc     A0 0E 86 F1 | 	sub	objptr, #160
047e0                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
047e0     23 35 02 FB | 	rdlong	_var03, _var12
047e4     07 49 02 F1 | 	add	_var13, objptr
047e8     24 35 52 FC | 	wrword	_var03, _var13
047ec     1F 0F 06 F1 | 	add	objptr, #287
047f0     07 5D 02 F1 | 	add	arg01, objptr
047f4     2E 4B C2 FA | 	rdbyte	_var14, arg01
047f8     01 4A 06 F1 | 	add	_var14, #1
047fc                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
047fc     2E 4B 42 FC | 	wrbyte	_var14, arg01
04800     F6 0F 86 F1 | 	sub	objptr, #502
04804                 | _trackerplayer_spin2_triggerNote_ret
04804     2D 00 64 FD | 	ret
04808                 | 
04808                 | ' 
04808                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04808                 | _trackerplayer_spin2_processChannel
04808     31 5A 05 F6 | 	mov	COUNT_, #49
0480c     B0 00 A0 FD | 	call	#pushregs_
04810     D0 F0 07 F1 | 	add	ptra, #208
04814     AF 5C 62 FC | 	wrlong	arg01, fp
04818     04 5E 05 F1 | 	add	fp, #4
0481c     AF 5E 62 FC | 	wrlong	arg02, fp
04820     04 5E 05 F1 | 	add	fp, #4
04824     AF 60 62 FC | 	wrlong	arg03, fp
04828     04 5E 05 F1 | 	add	fp, #4
0482c     AF 62 62 FC | 	wrlong	arg04, fp
04830     0C 5E 85 F1 | 	sub	fp, #12
04834                 | ' 
04834                 | '   channel := channel & 3
04834     AF 6A 02 FB | 	rdlong	local01, fp
04838     03 6A 06 F5 | 	and	local01, #3
0483c     AF 6A 62 FC | 	wrlong	local01, fp
04840     0C 5E 05 F1 | 	add	fp, #12
04844     AF 6C 02 FB | 	rdlong	local02, fp
04848     08 6C 46 F0 | 	shr	local02, #8
0484c     36 6F 02 F6 | 	mov	local03, local02
04850     0F 6E 06 F5 | 	and	local03, #15
04854                 | '   cmd     := (effect >> 8) & $F
04854     BA 0F 06 F1 | 	add	objptr, #442
04858     07 6F 42 FC | 	wrbyte	local03, objptr
0485c     AF 70 02 FB | 	rdlong	local04, fp
04860     04 70 46 F0 | 	shr	local04, #4
04864     38 73 02 F6 | 	mov	local05, local04
04868     0F 72 06 F5 | 	and	local05, #15
0486c                 | '   x       := (effect >> 4) & $F
0486c     03 0E 86 F1 | 	sub	objptr, #3
04870     07 73 42 FC | 	wrbyte	local05, objptr
04874     AF 74 02 FB | 	rdlong	local06, fp
04878     0F 74 06 F5 | 	and	local06, #15
0487c                 | '   y       := (effect     ) & $F
0487c     01 0E 06 F1 | 	add	objptr, #1
04880     07 75 42 FC | 	wrbyte	local06, objptr
04884     AF 76 02 FB | 	rdlong	local07, fp
04888     0C 5E 85 F1 | 	sub	fp, #12
0488c     FF 76 06 F5 | 	and	local07, #255
04890                 | '   z       := (effect     ) & $FF
04890     01 0E 06 F1 | 	add	objptr, #1
04894     07 77 42 FC | 	wrbyte	local07, objptr
04898                 | ' 
04898                 | '   ' Handle everything that executes on "tick zero"
04898                 | '   if tickCounter == 0
04898     18 0F 86 F1 | 	sub	objptr, #280
0489c     07 6B CA FA | 	rdbyte	local01, objptr wz
048a0     A1 0E 86 F1 | 	sub	objptr, #161
048a4     F0 03 90 5D |  if_ne	jmp	#LR__0175
048a8     AF 78 02 FB | 	rdlong	local08, fp
048ac     02 78 66 F0 | 	shl	local08, #2
048b0     EF 0E 06 F1 | 	add	objptr, #239
048b4     07 79 02 F1 | 	add	local08, objptr
048b8                 | ' 
048b8                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
048b8                 | '     deltaPeriod[channel] := 0
048b8     3C 01 68 FC | 	wrlong	#0, local08
048bc     AF 7A 02 FB | 	rdlong	local09, fp
048c0     02 7A 66 F0 | 	shl	local09, #2
048c4     20 0E 06 F1 | 	add	objptr, #32
048c8     07 7B 02 F1 | 	add	local09, objptr
048cc                 | '     deltaVolume[channel] := 0
048cc     3D 01 68 FC | 	wrlong	#0, local09
048d0                 | ' 
048d0                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
048d0                 | '     if sampleNumber > 0
048d0     04 5E 05 F1 | 	add	fp, #4
048d4     AF 6A 02 FB | 	rdlong	local01, fp
048d8     04 5E 85 F1 | 	sub	fp, #4
048dc     00 6A 5E F2 | 	cmps	local01, #0 wcz
048e0     0F 0F 86 F1 | 	sub	objptr, #271
048e4     20 00 90 ED |  if_be	jmp	#LR__0165
048e8     AF 7C 02 FB | 	rdlong	local10, fp
048ec     E0 0F 06 F1 | 	add	objptr, #480
048f0     07 7D 02 F1 | 	add	local10, objptr
048f4                 | '       sampleNumber_memory[channel] := sampleNumber
048f4     04 5E 05 F1 | 	add	fp, #4
048f8     AF 6A 02 FB | 	rdlong	local01, fp
048fc     04 5E 85 F1 | 	sub	fp, #4
04900     3E 6B 42 FC | 	wrbyte	local01, local10
04904     E0 0F 86 F1 | 	sub	objptr, #480
04908                 | LR__0165
04908     AF 7E 02 FB | 	rdlong	local11, fp
0490c     E0 0F 06 F1 | 	add	objptr, #480
04910     07 7F 02 F1 | 	add	local11, objptr
04914     20 5E 05 F1 | 	add	fp, #32
04918     AF 80 02 F6 | 	mov	local12, fp
0491c     10 5E 85 F1 | 	sub	fp, #16
04920     AF 82 02 F6 | 	mov	local13, fp
04924     31 0E 86 F1 | 	sub	objptr, #49
04928     07 85 02 F6 | 	mov	local14, objptr
0492c     04 5E 05 F1 | 	add	fp, #4
04930     AF 86 02 F6 | 	mov	local15, fp
04934     04 5E 05 F1 | 	add	fp, #4
04938     AF 88 02 F6 | 	mov	local16, fp
0493c     04 5E 05 F1 | 	add	fp, #4
04940     AF 8A 02 F6 | 	mov	local17, fp
04944                 | ' 
04944                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04944                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04944     3F 5D C2 FA | 	rdbyte	arg01, local11
04948     42 63 02 F6 | 	mov	arg04, local14
0494c     43 8D 02 F6 | 	mov	local18, local15
04950     44 8F 02 F6 | 	mov	local19, local16
04954     45 91 02 F6 | 	mov	local20, local17
04958     40 5F 02 F6 | 	mov	arg02, local12
0495c     41 61 02 F6 | 	mov	arg03, local13
04960     46 65 02 F6 | 	mov	arg05, local18
04964     47 67 02 F6 | 	mov	arg06, local19
04968     48 69 02 F6 | 	mov	arg07, local20
0496c     AF 0F 86 F1 | 	sub	objptr, #431
04970     1C 5E 85 F1 | 	sub	fp, #28
04974     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04978                 | ' 
04978                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04978                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04978                 | '     if sampleNumber > 0
04978     04 5E 05 F1 | 	add	fp, #4
0497c     AF 6A 02 FB | 	rdlong	local01, fp
04980     04 5E 85 F1 | 	sub	fp, #4
04984     00 6A 5E F2 | 	cmps	local01, #0 wcz
04988     24 00 90 ED |  if_be	jmp	#LR__0166
0498c     AF 92 02 FB | 	rdlong	local21, fp
04990     02 92 66 F0 | 	shl	local21, #2
04994     FF 0E 06 F1 | 	add	objptr, #255
04998     07 93 02 F1 | 	add	local21, objptr
0499c                 | '       currVolume[channel] := volume
0499c     14 5E 05 F1 | 	add	fp, #20
049a0     AF 6A 02 FB | 	rdlong	local01, fp
049a4     14 5E 85 F1 | 	sub	fp, #20
049a8     49 6B 62 FC | 	wrlong	local01, local21
049ac     FF 0E 86 F1 | 	sub	objptr, #255
049b0                 | LR__0166
049b0                 | ' 
049b0                 | '     ' Handle all commands that executes on "zero tick"
049b0                 | '     sampleOffset := 0
049b0     B3 0F 06 F1 | 	add	objptr, #435
049b4     07 01 68 FC | 	wrlong	#0, objptr
049b8     B3 0F 86 F1 | 	sub	objptr, #435
049bc                 | '     handleZeroTickCommands(channel)
049bc     AF 5C 02 FB | 	rdlong	arg01, fp
049c0     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
049c4                 | ' 
049c4                 | '     ' Prepare sample data for triggering (now or later)
049c4                 | '     if period > 0
049c4     08 5E 05 F1 | 	add	fp, #8
049c8     AF 6A 02 FB | 	rdlong	local01, fp
049cc     08 5E 85 F1 | 	sub	fp, #8
049d0     00 6A 5E F2 | 	cmps	local01, #0 wcz
049d4     C8 02 90 ED |  if_be	jmp	#LR__0176
049d8     08 5E 05 F1 | 	add	fp, #8
049dc     AF 94 02 F6 | 	mov	local22, fp
049e0                 | ' 
049e0                 | '       retunePeriod(@period, fineTune)
049e0     AF 0F 06 F1 | 	add	objptr, #431
049e4     07 5F 02 FB | 	rdlong	arg02, objptr
049e8     AF 0F 86 F1 | 	sub	objptr, #431
049ec     4A 5D 02 F6 | 	mov	arg01, local22
049f0     08 5E 85 F1 | 	sub	fp, #8
049f4     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
049f8     AF 96 02 FB | 	rdlong	local23, fp
049fc     D3 0E 06 F1 | 	add	objptr, #211
04a00     07 97 02 F1 | 	add	local23, objptr
04a04                 | '       currFineTune[channel]        := fineTune
04a04     DC 0E 06 F1 | 	add	objptr, #220
04a08     07 6B 02 FB | 	rdlong	local01, objptr
04a0c     4B 6B 42 FC | 	wrbyte	local01, local23
04a10     AF 98 02 FB | 	rdlong	local24, fp
04a14     02 98 66 F0 | 	shl	local24, #2
04a18     88 0E 86 F1 | 	sub	objptr, #136
04a1c     07 99 02 F1 | 	add	local24, objptr
04a20                 | '       lastSetPeriod[channel]       := period
04a20     08 5E 05 F1 | 	add	fp, #8
04a24     AF 6A 02 FB | 	rdlong	local01, fp
04a28     4C 6B 62 FC | 	wrlong	local01, local24
04a2c     08 5E 85 F1 | 	sub	fp, #8
04a30     AF 9A 02 FB | 	rdlong	local25, fp
04a34     02 9A 66 F0 | 	shl	local25, #2
04a38     40 0E 06 F1 | 	add	objptr, #64
04a3c     07 9B 02 F1 | 	add	local25, objptr
04a40                 | '       lastSetRepeatLength[channel] := repeatLength
04a40     1C 5E 05 F1 | 	add	fp, #28
04a44     AF 6A 02 FB | 	rdlong	local01, fp
04a48     4D 6B 62 FC | 	wrlong	local01, local25
04a4c     1C 5E 85 F1 | 	sub	fp, #28
04a50     AF 9C 02 FB | 	rdlong	local26, fp
04a54     02 9C 66 F0 | 	shl	local26, #2
04a58     10 0E 06 F1 | 	add	objptr, #16
04a5c     07 9D 02 F1 | 	add	local26, objptr
04a60                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04a60     18 5E 05 F1 | 	add	fp, #24
04a64     AF 6A 02 FB | 	rdlong	local01, fp
04a68     4E 6B 62 FC | 	wrlong	local01, local26
04a6c     08 5E 05 F1 | 	add	fp, #8
04a70     AF 9E 02 FB | 	rdlong	local27, fp
04a74     20 5E 85 F1 | 	sub	fp, #32
04a78     3C 0E 06 F1 | 	add	objptr, #60
04a7c     07 A1 02 FB | 	rdlong	local28, objptr
04a80     50 9F 02 F1 | 	add	local27, local28
04a84     AF A2 02 FB | 	rdlong	local29, fp
04a88     02 A2 66 F0 | 	shl	local29, #2
04a8c     7C 0E 86 F1 | 	sub	objptr, #124
04a90     07 A3 02 F1 | 	add	local29, objptr
04a94                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04a94     51 9F 62 FC | 	wrlong	local27, local29
04a98     AF A4 02 FB | 	rdlong	local30, fp
04a9c     02 A4 66 F0 | 	shl	local30, #2
04aa0     10 0E 06 F1 | 	add	objptr, #16
04aa4     07 A5 02 F1 | 	add	local30, objptr
04aa8                 | '       lastSetSampleNr[channel]     := sampleNumber
04aa8     04 5E 05 F1 | 	add	fp, #4
04aac     AF 6A 02 FB | 	rdlong	local01, fp
04ab0     52 6B 62 FC | 	wrlong	local01, local30
04ab4                 | ' 
04ab4                 | '       ' This calculates the correct sample length in all situations
04ab4                 | '       if repeatLength > 2
04ab4     18 5E 05 F1 | 	add	fp, #24
04ab8     AF 6A 02 FB | 	rdlong	local01, fp
04abc     1C 5E 85 F1 | 	sub	fp, #28
04ac0     02 6A 5E F2 | 	cmps	local01, #2 wcz
04ac4     47 0F 86 F1 | 	sub	objptr, #327
04ac8     20 00 90 ED |  if_be	jmp	#LR__0167
04acc     18 5E 05 F1 | 	add	fp, #24
04ad0     AF A6 02 FB | 	rdlong	local31, fp
04ad4     04 5E 05 F1 | 	add	fp, #4
04ad8     AF A0 02 FB | 	rdlong	local28, fp
04adc     50 A7 02 F1 | 	add	local31, local28
04ae0                 | '         sampleLength := repeatPoint + repeatLength
04ae0     0C 5E 85 F1 | 	sub	fp, #12
04ae4     AF A6 62 FC | 	wrlong	local31, fp
04ae8     10 5E 85 F1 | 	sub	fp, #16
04aec                 | LR__0167
04aec                 | ' 
04aec                 | '       if sampleLength - sampleOffset < 1
04aec     10 5E 05 F1 | 	add	fp, #16
04af0     AF 6A 02 FB | 	rdlong	local01, fp
04af4     10 5E 85 F1 | 	sub	fp, #16
04af8     B3 0F 06 F1 | 	add	objptr, #435
04afc     07 A1 02 FB | 	rdlong	local28, objptr
04b00     B3 0F 86 F1 | 	sub	objptr, #435
04b04     50 6B 82 F1 | 	sub	local01, local28
04b08     01 6A 5E F2 | 	cmps	local01, #1 wcz
04b0c     1C 00 90 3D |  if_ae	jmp	#LR__0168
04b10     AF A8 02 FB | 	rdlong	local32, fp
04b14     02 A8 66 F0 | 	shl	local32, #2
04b18     57 0F 06 F1 | 	add	objptr, #343
04b1c     07 A9 02 F1 | 	add	local32, objptr
04b20                 | '         lastSetSampleLength[channel] := 1
04b20     54 03 68 FC | 	wrlong	#1, local32
04b24                 | '       else
04b24     57 0F 86 F1 | 	sub	objptr, #343
04b28     30 00 90 FD | 	jmp	#LR__0169
04b2c                 | LR__0168
04b2c     10 5E 05 F1 | 	add	fp, #16
04b30     AF AA 02 FB | 	rdlong	local33, fp
04b34     10 5E 85 F1 | 	sub	fp, #16
04b38     B3 0F 06 F1 | 	add	objptr, #435
04b3c     07 A1 02 FB | 	rdlong	local28, objptr
04b40     50 AB 82 F1 | 	sub	local33, local28
04b44     AF AC 02 FB | 	rdlong	local34, fp
04b48     02 AC 66 F0 | 	shl	local34, #2
04b4c     5C 0E 86 F1 | 	sub	objptr, #92
04b50     07 AD 02 F1 | 	add	local34, objptr
04b54                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04b54     56 AB 62 FC | 	wrlong	local33, local34
04b58     57 0F 86 F1 | 	sub	objptr, #343
04b5c                 | LR__0169
04b5c                 | ' 
04b5c                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04b5c                 | '       if sampleOffset > sampleLength
04b5c     B3 0F 06 F1 | 	add	objptr, #435
04b60     07 6B 02 FB | 	rdlong	local01, objptr
04b64     B3 0F 86 F1 | 	sub	objptr, #435
04b68     10 5E 05 F1 | 	add	fp, #16
04b6c     AF A0 02 FB | 	rdlong	local28, fp
04b70     10 5E 85 F1 | 	sub	fp, #16
04b74     50 6B 5A F2 | 	cmps	local01, local28 wcz
04b78     50 00 90 ED |  if_be	jmp	#LR__0170
04b7c     20 5E 05 F1 | 	add	fp, #32
04b80     AF AE 02 FB | 	rdlong	local35, fp
04b84     08 5E 85 F1 | 	sub	fp, #8
04b88     AF A0 02 FB | 	rdlong	local28, fp
04b8c     18 5E 85 F1 | 	sub	fp, #24
04b90     50 AF 02 F1 | 	add	local35, local28
04b94     AF B0 02 FB | 	rdlong	local36, fp
04b98     02 B0 66 F0 | 	shl	local36, #2
04b9c     37 0F 06 F1 | 	add	objptr, #311
04ba0     07 B1 02 F1 | 	add	local36, objptr
04ba4                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04ba4     58 AF 62 FC | 	wrlong	local35, local36
04ba8     AF B2 02 FB | 	rdlong	local37, fp
04bac     02 B2 66 F0 | 	shl	local37, #2
04bb0     20 0E 06 F1 | 	add	objptr, #32
04bb4     07 B3 02 F1 | 	add	local37, objptr
04bb8                 | '         lastSetSampleLength[channel] := repeatLength
04bb8     1C 5E 05 F1 | 	add	fp, #28
04bbc     AF 6A 02 FB | 	rdlong	local01, fp
04bc0     1C 5E 85 F1 | 	sub	fp, #28
04bc4     59 6B 62 FC | 	wrlong	local01, local37
04bc8     57 0F 86 F1 | 	sub	objptr, #343
04bcc                 | LR__0170
04bcc                 | ' 
04bcc                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04bcc                 | '       ifnot cmd == $3 || cmd == $5
04bcc     BA 0F 06 F1 | 	add	objptr, #442
04bd0     07 6B C2 FA | 	rdbyte	local01, objptr
04bd4     BA 0F 86 F1 | 	sub	objptr, #442
04bd8     03 6A 0E F2 | 	cmp	local01, #3 wz
04bdc     54 00 90 AD |  if_e	jmp	#LR__0173
04be0     BA 0F 06 F1 | 	add	objptr, #442
04be4     07 B5 C2 FA | 	rdbyte	local38, objptr
04be8     BA 0F 86 F1 | 	sub	objptr, #442
04bec     5A A1 02 F6 | 	mov	local28, local38
04bf0     05 A0 0E F2 | 	cmp	local28, #5 wz
04bf4     3C 00 90 AD |  if_e	jmp	#LR__0173
04bf8                 | '         ifnot cmd == $E && x == $D
04bf8     BA 0F 06 F1 | 	add	objptr, #442
04bfc     07 B7 C2 FA | 	rdbyte	local39, objptr
04c00     BA 0F 86 F1 | 	sub	objptr, #442
04c04     5B 6B 02 F6 | 	mov	local01, local39
04c08     0E 6A 0E F2 | 	cmp	local01, #14 wz
04c0c     18 00 90 5D |  if_ne	jmp	#LR__0171
04c10     B7 0F 06 F1 | 	add	objptr, #439
04c14     07 B5 C2 FA | 	rdbyte	local38, objptr
04c18     B7 0F 86 F1 | 	sub	objptr, #439
04c1c     5A A1 02 F6 | 	mov	local28, local38
04c20     0D A0 0E F2 | 	cmp	local28, #13 wz
04c24     0C 00 90 AD |  if_e	jmp	#LR__0172
04c28                 | LR__0171
04c28                 | '           triggerNote(channel)
04c28     AF 6A 02 FB | 	rdlong	local01, fp
04c2c     35 5D 02 F6 | 	mov	arg01, local01
04c30     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04c34                 | LR__0172
04c34                 | LR__0173
04c34                 | ' 
04c34                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04c34                 | '       if resetTremolo[channel] > 0
04c34     AF 6A 02 FB | 	rdlong	local01, fp
04c38     8F 0F 06 F1 | 	add	objptr, #399
04c3c     07 6B 02 F1 | 	add	local01, objptr
04c40     35 A1 C2 FA | 	rdbyte	local28, local01
04c44     00 A0 5E F2 | 	cmps	local28, #0 wcz
04c48     8F 0F 86 F1 | 	sub	objptr, #399
04c4c     14 00 90 ED |  if_be	jmp	#LR__0174
04c50     AF B8 02 FB | 	rdlong	local40, fp
04c54     8B 0F 06 F1 | 	add	objptr, #395
04c58     07 B9 02 F1 | 	add	local40, objptr
04c5c                 | '         tremoloPos[channel] := 0
04c5c     5C 01 48 FC | 	wrbyte	#0, local40
04c60     8B 0F 86 F1 | 	sub	objptr, #395
04c64                 | LR__0174
04c64                 | ' 
04c64                 | '       if resetVibrato[channel] > 0
04c64     AF 6A 02 FB | 	rdlong	local01, fp
04c68     93 0F 06 F1 | 	add	objptr, #403
04c6c     07 6B 02 F1 | 	add	local01, objptr
04c70     35 A1 C2 FA | 	rdbyte	local28, local01
04c74     00 A0 5E F2 | 	cmps	local28, #0 wcz
04c78     93 0F 86 F1 | 	sub	objptr, #403
04c7c     20 00 90 ED |  if_be	jmp	#LR__0176
04c80     AF BA 02 FB | 	rdlong	local41, fp
04c84     87 0F 06 F1 | 	add	objptr, #391
04c88     07 BB 02 F1 | 	add	local41, objptr
04c8c                 | '         vibratoPos[channel] := 0
04c8c     5D 01 48 FC | 	wrbyte	#0, local41
04c90     87 0F 86 F1 | 	sub	objptr, #391
04c94                 | ' 
04c94                 | '   else
04c94     08 00 90 FD | 	jmp	#LR__0176
04c98                 | LR__0175
04c98                 | '     ' Handle commands that executes on all "non zero ticks"
04c98                 | '     handleNonZeroTickCommands(channel)
04c98     AF 5C 02 FB | 	rdlong	arg01, fp
04c9c     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04ca0                 | LR__0176
04ca0                 | ' 
04ca0                 | '   ' Handle commands that executes on every tick
04ca0                 | '   handleEveryTickCommands(channel)
04ca0     AF 5C 02 FB | 	rdlong	arg01, fp
04ca4     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04ca8     AF BC 02 FB | 	rdlong	local42, fp
04cac     02 BC 66 F0 | 	shl	local42, #2
04cb0     DF 0E 06 F1 | 	add	objptr, #223
04cb4     07 BD 02 F1 | 	add	local42, objptr
04cb8     5E BF 02 FB | 	rdlong	local43, local42
04cbc     01 00 00 FF 
04cc0     58 BF 66 F3 | 	fles	local43, ##856
04cc4                 | ' 
04cc4                 | '   ' Handle boundaries that should be kept
04cc4                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04cc4     5E BF 62 FC | 	wrlong	local43, local42
04cc8     AF C0 02 FB | 	rdlong	local44, fp
04ccc     02 C0 66 F0 | 	shl	local44, #2
04cd0     07 C1 02 F1 | 	add	local44, objptr
04cd4     60 C3 02 FB | 	rdlong	local45, local44
04cd8     71 C2 46 F3 | 	fges	local45, #113
04cdc                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04cdc     60 C3 62 FC | 	wrlong	local45, local44
04ce0     AF C4 02 FB | 	rdlong	local46, fp
04ce4     02 C4 66 F0 | 	shl	local46, #2
04ce8     20 0E 06 F1 | 	add	objptr, #32
04cec     07 C5 02 F1 | 	add	local46, objptr
04cf0     62 C7 02 FB | 	rdlong	local47, local46
04cf4     40 C6 66 F3 | 	fles	local47, #64
04cf8                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04cf8     62 C7 62 FC | 	wrlong	local47, local46
04cfc     AF C8 02 FB | 	rdlong	local48, fp
04d00     02 C8 66 F0 | 	shl	local48, #2
04d04     07 C9 02 F1 | 	add	local48, objptr
04d08     64 CB 02 FB | 	rdlong	local49, local48
04d0c     00 CA 46 F3 | 	fges	local49, #0
04d10                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04d10     64 CB 62 FC | 	wrlong	local49, local48
04d14     FF 0E 86 F1 | 	sub	objptr, #255
04d18     AF F0 03 F6 | 	mov	ptra, fp
04d1c     BF 00 A0 FD | 	call	#popregs_
04d20                 | _trackerplayer_spin2_processChannel_ret
04d20     2D 00 64 FD | 	ret
04d24                 | 
04d24                 | ' 
04d24                 | ' 
04d24                 | ' ' Handle all commands that executes on tick zero
04d24                 | ' '
04d24                 | ' PRI handleZeroTickCommands(channel)
04d24                 | _trackerplayer_spin2_handleZeroTickCommands
04d24     2E 31 02 F6 | 	mov	_var01, arg01
04d28                 | ' 
04d28                 | '   CASE_FAST cmd
04d28     BA 0F 06 F1 | 	add	objptr, #442
04d2c     07 33 C2 FA | 	rdbyte	_var02, objptr
04d30     BA 0F 86 F1 | 	sub	objptr, #442
04d34     19 35 02 F6 | 	mov	_var03, _var02
04d38     09 34 86 F1 | 	sub	_var03, #9
04d3c     07 34 26 F3 | 	fle	_var03, #7
04d40     1A 37 02 F6 | 	mov	_var04, _var03
04d44     30 36 62 FD | 	jmprel	_var04
04d48                 | LR__0177
04d48     1C 00 90 FD | 	jmp	#LR__0178
04d4c     30 04 90 FD | 	jmp	#LR__0201
04d50     64 00 90 FD | 	jmp	#LR__0180
04d54     84 00 90 FD | 	jmp	#LR__0181
04d58     A0 00 90 FD | 	jmp	#LR__0182
04d5c     D0 00 90 FD | 	jmp	#LR__0183
04d60     9C 03 90 FD | 	jmp	#LR__0198
04d64     18 04 90 FD | 	jmp	#LR__0201
04d68                 | LR__0178
04d68                 | ' 
04d68                 | '     $9:                          ' Set sample offset
04d68                 | '       if z > 0
04d68     B9 0F 06 F1 | 	add	objptr, #441
04d6c     07 39 C2 FA | 	rdbyte	_var05, objptr
04d70     B9 0F 86 F1 | 	sub	objptr, #441
04d74     00 38 5E F2 | 	cmps	_var05, #0 wcz
04d78     1C 00 90 ED |  if_be	jmp	#LR__0179
04d7c                 | '         cmd9_memoryZ[channel] := z
04d7c     18 39 02 F6 | 	mov	_var05, _var01
04d80     DC 0F 06 F1 | 	add	objptr, #476
04d84     07 39 02 F1 | 	add	_var05, objptr
04d88     23 0E 86 F1 | 	sub	objptr, #35
04d8c     07 3B C2 FA | 	rdbyte	_var06, objptr
04d90     B9 0F 86 F1 | 	sub	objptr, #441
04d94     1C 3B 42 FC | 	wrbyte	_var06, _var05
04d98                 | LR__0179
04d98                 | ' 
04d98                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04d98     DC 0F 06 F1 | 	add	objptr, #476
04d9c     07 31 02 F1 | 	add	_var01, objptr
04da0     18 39 C2 FA | 	rdbyte	_var05, _var01
04da4     08 38 66 F0 | 	shl	_var05, #8
04da8     29 0E 86 F1 | 	sub	objptr, #41
04dac     07 39 62 FC | 	wrlong	_var05, objptr
04db0     B3 0F 86 F1 | 	sub	objptr, #435
04db4     C8 03 90 FD | 	jmp	#LR__0201
04db8                 | LR__0180
04db8                 | ' 
04db8                 | '     $B:                          ' Jump position
04db8                 | '       cmdB_memoryZ := z
04db8     B9 0F 06 F1 | 	add	objptr, #441
04dbc     07 39 C2 FA | 	rdbyte	_var05, objptr
04dc0     2E 0E 06 F1 | 	add	objptr, #46
04dc4     07 39 42 FC | 	wrbyte	_var05, objptr
04dc8                 | '       cmdB_updatePosition := true
04dc8     01 0E 06 F1 | 	add	objptr, #1
04dcc     FF FF FF FF 
04dd0     07 FF 4B FC | 	wrbyte	##-1, objptr
04dd4     E8 0F 86 F1 | 	sub	objptr, #488
04dd8     A4 03 90 FD | 	jmp	#LR__0201
04ddc                 | LR__0181
04ddc                 | ' 
04ddc                 | '     $C:                          ' Set volume
04ddc                 | '       currVolume[channel] := z
04ddc     02 30 66 F0 | 	shl	_var01, #2
04de0     FF 0E 06 F1 | 	add	objptr, #255
04de4     07 31 02 F1 | 	add	_var01, objptr
04de8     BA 0E 06 F1 | 	add	objptr, #186
04dec     07 3B C2 FA | 	rdbyte	_var06, objptr
04df0     B9 0F 86 F1 | 	sub	objptr, #441
04df4     18 3B 62 FC | 	wrlong	_var06, _var01
04df8     84 03 90 FD | 	jmp	#LR__0201
04dfc                 | LR__0182
04dfc                 | ' 
04dfc                 | '     $D:                          ' Pattern break
04dfc                 | '       cmdD_memoryX := x
04dfc     B7 0F 06 F1 | 	add	objptr, #439
04e00     07 39 C2 FA | 	rdbyte	_var05, objptr
04e04     2D 0E 06 F1 | 	add	objptr, #45
04e08     07 39 42 FC | 	wrbyte	_var05, objptr
04e0c                 | '       cmdD_memoryY := y
04e0c     2C 0E 86 F1 | 	sub	objptr, #44
04e10     07 39 C2 FA | 	rdbyte	_var05, objptr
04e14     2D 0E 06 F1 | 	add	objptr, #45
04e18     07 39 42 FC | 	wrbyte	_var05, objptr
04e1c                 | '       cmdD_updatePosition := true
04e1c     01 0E 06 F1 | 	add	objptr, #1
04e20     FF FF FF FF 
04e24     07 FF 4B FC | 	wrbyte	##-1, objptr
04e28     E6 0F 86 F1 | 	sub	objptr, #486
04e2c     50 03 90 FD | 	jmp	#LR__0201
04e30                 | LR__0183
04e30                 | ' 
04e30                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04e30                 | ' 
04e30                 | '       CASE_FAST x
04e30     B7 0F 06 F1 | 	add	objptr, #439
04e34     07 3D C2 FA | 	rdbyte	_var07, objptr
04e38     B7 0F 86 F1 | 	sub	objptr, #439
04e3c     1E 39 02 F6 | 	mov	_var05, _var07
04e40     0F 38 26 F3 | 	fle	_var05, #15
04e44     1C 3F 02 F6 | 	mov	_var08, _var05
04e48     30 3E 62 FD | 	jmprel	_var08
04e4c                 | LR__0184
04e4c     3C 00 90 FD | 	jmp	#LR__0185
04e50     58 00 90 FD | 	jmp	#LR__0186
04e54     8C 00 90 FD | 	jmp	#LR__0187
04e58     C0 00 90 FD | 	jmp	#LR__0188
04e5c     DC 00 90 FD | 	jmp	#LR__0189
04e60     14 01 90 FD | 	jmp	#LR__0190
04e64     28 01 90 FD | 	jmp	#LR__0191
04e68     C0 01 90 FD | 	jmp	#LR__0194
04e6c     10 03 90 FD | 	jmp	#LR__0201
04e70     0C 03 90 FD | 	jmp	#LR__0201
04e74     F0 01 90 FD | 	jmp	#LR__0195
04e78     24 02 90 FD | 	jmp	#LR__0196
04e7c     00 03 90 FD | 	jmp	#LR__0201
04e80     FC 02 90 FD | 	jmp	#LR__0201
04e84     50 02 90 FD | 	jmp	#LR__0197
04e88     F4 02 90 FD | 	jmp	#LR__0201
04e8c                 | LR__0185
04e8c                 | ' 
04e8c                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04e8c     B8 0F 06 F1 | 	add	objptr, #440
04e90     07 3B C2 FA | 	rdbyte	_var06, objptr
04e94     1D 3B 22 F6 | 	not	_var06, _var06
04e98     01 3A 06 F5 | 	and	_var06, #1
04e9c     03 0E 06 F1 | 	add	objptr, #3
04ea0     07 3B 42 FC | 	wrbyte	_var06, objptr
04ea4     BB 0F 86 F1 | 	sub	objptr, #443
04ea8     D4 02 90 FD | 	jmp	#LR__0201
04eac                 | LR__0186
04eac                 | ' 
04eac                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04eac     18 41 02 F6 | 	mov	_var09, _var01
04eb0     02 40 66 F0 | 	shl	_var09, #2
04eb4     DF 0E 06 F1 | 	add	objptr, #223
04eb8     07 41 02 F1 | 	add	_var09, objptr
04ebc     20 3B 02 FB | 	rdlong	_var06, _var09
04ec0     D9 0E 06 F1 | 	add	objptr, #217
04ec4     07 43 C2 FA | 	rdbyte	_var10, objptr
04ec8     21 3B 82 F1 | 	sub	_var06, _var10
04ecc     02 30 66 F0 | 	shl	_var01, #2
04ed0     D9 0E 86 F1 | 	sub	objptr, #217
04ed4     07 31 02 F1 | 	add	_var01, objptr
04ed8     18 3B 62 FC | 	wrlong	_var06, _var01
04edc     DF 0E 86 F1 | 	sub	objptr, #223
04ee0     9C 02 90 FD | 	jmp	#LR__0201
04ee4                 | LR__0187
04ee4                 | ' 
04ee4                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04ee4     18 41 02 F6 | 	mov	_var09, _var01
04ee8     02 40 66 F0 | 	shl	_var09, #2
04eec     DF 0E 06 F1 | 	add	objptr, #223
04ef0     07 41 02 F1 | 	add	_var09, objptr
04ef4     20 3B 02 FB | 	rdlong	_var06, _var09
04ef8     D9 0E 06 F1 | 	add	objptr, #217
04efc     07 43 C2 FA | 	rdbyte	_var10, objptr
04f00     21 3B 02 F1 | 	add	_var06, _var10
04f04     02 30 66 F0 | 	shl	_var01, #2
04f08     D9 0E 86 F1 | 	sub	objptr, #217
04f0c     07 31 02 F1 | 	add	_var01, objptr
04f10     18 3B 62 FC | 	wrlong	_var06, _var01
04f14     DF 0E 86 F1 | 	sub	objptr, #223
04f18     64 02 90 FD | 	jmp	#LR__0201
04f1c                 | LR__0188
04f1c                 | ' 
04f1c                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04f1c     B8 0F 06 F1 | 	add	objptr, #440
04f20     07 3B C2 FA | 	rdbyte	_var06, objptr
04f24     01 3A 06 F5 | 	and	_var06, #1
04f28     04 0E 06 F1 | 	add	objptr, #4
04f2c     07 31 02 F1 | 	add	_var01, objptr
04f30     18 3B 42 FC | 	wrbyte	_var06, _var01
04f34     BC 0F 86 F1 | 	sub	objptr, #444
04f38     44 02 90 FD | 	jmp	#LR__0201
04f3c                 | LR__0189
04f3c                 | ' 
04f3c                 | '         $4:                                      ' Set vibrato waveform type
04f3c                 | '           vibratoType[channel]  := y & 3
04f3c     B8 0F 06 F1 | 	add	objptr, #440
04f40     07 3B C2 FA | 	rdbyte	_var06, objptr
04f44     03 3A 06 F5 | 	and	_var06, #3
04f48     18 45 02 F6 | 	mov	_var11, _var01
04f4c     08 0E 06 F1 | 	add	objptr, #8
04f50     07 45 02 F1 | 	add	_var11, objptr
04f54     22 3B 42 FC | 	wrbyte	_var06, _var11
04f58                 | '           resetVibrato[channel] := y & 4
04f58     08 0E 86 F1 | 	sub	objptr, #8
04f5c     07 3B C2 FA | 	rdbyte	_var06, objptr
04f60     04 3A 06 F5 | 	and	_var06, #4
04f64     25 0E 86 F1 | 	sub	objptr, #37
04f68     07 31 02 F1 | 	add	_var01, objptr
04f6c     18 3B 42 FC | 	wrbyte	_var06, _var01
04f70     93 0F 86 F1 | 	sub	objptr, #403
04f74     08 02 90 FD | 	jmp	#LR__0201
04f78                 | LR__0190
04f78                 | ' 
04f78                 | '         $5: fineTune := y                        ' Set finetune
04f78     B8 0F 06 F1 | 	add	objptr, #440
04f7c     07 3B C2 FA | 	rdbyte	_var06, objptr
04f80     09 0E 86 F1 | 	sub	objptr, #9
04f84     07 3B 62 FC | 	wrlong	_var06, objptr
04f88     AF 0F 86 F1 | 	sub	objptr, #431
04f8c     F0 01 90 FD | 	jmp	#LR__0201
04f90                 | LR__0191
04f90                 | ' 
04f90                 | '         $6:                                      ' Pattern looping
04f90                 | '           if y == 0
04f90     B8 0F 06 F1 | 	add	objptr, #440
04f94     07 3B CA FA | 	rdbyte	_var06, objptr wz
04f98     B8 0F 86 F1 | 	sub	objptr, #440
04f9c     1C 00 90 5D |  if_ne	jmp	#LR__0192
04fa0                 | '             cmdE6_memory[channel] := patternRow
04fa0     E9 0F 06 F1 | 	add	objptr, #489
04fa4     07 31 02 F1 | 	add	_var01, objptr
04fa8     47 0F 86 F1 | 	sub	objptr, #327
04fac     07 45 C2 FA | 	rdbyte	_var11, objptr
04fb0     A2 0E 86 F1 | 	sub	objptr, #162
04fb4     18 45 42 FC | 	wrbyte	_var11, _var01
04fb8                 | '           else
04fb8     C4 01 90 FD | 	jmp	#LR__0201
04fbc                 | LR__0192
04fbc                 | '             if ++cmdE6_counter[channel] <= y
04fbc     18 41 02 F6 | 	mov	_var09, _var01
04fc0     ED 0F 06 F1 | 	add	objptr, #493
04fc4     07 41 02 F1 | 	add	_var09, objptr
04fc8     20 3B C2 FA | 	rdbyte	_var06, _var09
04fcc     01 3A 06 F1 | 	add	_var06, #1
04fd0     18 43 02 F6 | 	mov	_var10, _var01
04fd4     07 43 02 F1 | 	add	_var10, objptr
04fd8     21 3B 42 FC | 	wrbyte	_var06, _var10
04fdc     21 47 C2 FA | 	rdbyte	_var12, _var10
04fe0     35 0E 86 F1 | 	sub	objptr, #53
04fe4     07 49 C2 FA | 	rdbyte	_var13, objptr
04fe8     B8 0F 86 F1 | 	sub	objptr, #440
04fec     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04ff0     24 00 90 1D |  if_a	jmp	#LR__0193
04ff4                 | '               cmdE6_updatePosition[channel] := true
04ff4     F1 0F 06 F1 | 	add	objptr, #497
04ff8     07 31 02 F1 | 	add	_var01, objptr
04ffc     FF FF FF FF 
05000     18 FF 4B FC | 	wrbyte	##-1, _var01
05004                 | '               cmdE6_updatePositionCommon    := true
05004     04 0E 06 F1 | 	add	objptr, #4
05008     FF FF FF FF 
0500c     07 FF 4B FC | 	wrbyte	##-1, objptr
05010     F5 0F 86 F1 | 	sub	objptr, #501
05014                 | '             else
05014     68 01 90 FD | 	jmp	#LR__0201
05018                 | LR__0193
05018                 | '               cmdE6_counter[channel] := 0
05018     ED 0F 06 F1 | 	add	objptr, #493
0501c     07 31 02 F1 | 	add	_var01, objptr
05020     18 01 48 FC | 	wrbyte	#0, _var01
05024     ED 0F 86 F1 | 	sub	objptr, #493
05028     54 01 90 FD | 	jmp	#LR__0201
0502c                 | LR__0194
0502c                 | ' 
0502c                 | '         $7:                                      ' Set tremolo waveform type
0502c                 | '           tremoloType[channel] := y & 3
0502c     B8 0F 06 F1 | 	add	objptr, #440
05030     07 3B C2 FA | 	rdbyte	_var06, objptr
05034     03 3A 06 F5 | 	and	_var06, #3
05038     18 45 02 F6 | 	mov	_var11, _var01
0503c     0C 0E 06 F1 | 	add	objptr, #12
05040     07 45 02 F1 | 	add	_var11, objptr
05044     22 3B 42 FC | 	wrbyte	_var06, _var11
05048                 | '           resetTremolo[channel] := y & 4
05048     0C 0E 86 F1 | 	sub	objptr, #12
0504c     07 3B C2 FA | 	rdbyte	_var06, objptr
05050     04 3A 06 F5 | 	and	_var06, #4
05054     29 0E 86 F1 | 	sub	objptr, #41
05058     07 31 02 F1 | 	add	_var01, objptr
0505c     18 3B 42 FC | 	wrbyte	_var06, _var01
05060     8F 0F 86 F1 | 	sub	objptr, #399
05064     18 01 90 FD | 	jmp	#LR__0201
05068                 | LR__0195
05068                 | ' 
05068                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05068     18 41 02 F6 | 	mov	_var09, _var01
0506c     02 40 66 F0 | 	shl	_var09, #2
05070     FF 0E 06 F1 | 	add	objptr, #255
05074     07 41 02 F1 | 	add	_var09, objptr
05078     20 3B 02 FB | 	rdlong	_var06, _var09
0507c     B9 0E 06 F1 | 	add	objptr, #185
05080     07 43 C2 FA | 	rdbyte	_var10, objptr
05084     21 3B 02 F1 | 	add	_var06, _var10
05088     02 30 66 F0 | 	shl	_var01, #2
0508c     B9 0E 86 F1 | 	sub	objptr, #185
05090     07 31 02 F1 | 	add	_var01, objptr
05094     18 3B 62 FC | 	wrlong	_var06, _var01
05098     FF 0E 86 F1 | 	sub	objptr, #255
0509c     E0 00 90 FD | 	jmp	#LR__0201
050a0                 | LR__0196
050a0                 | ' 
050a0                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
050a0     18 41 02 F6 | 	mov	_var09, _var01
050a4     02 40 66 F0 | 	shl	_var09, #2
050a8     FF 0E 06 F1 | 	add	objptr, #255
050ac     07 41 02 F1 | 	add	_var09, objptr
050b0     20 3B 02 FB | 	rdlong	_var06, _var09
050b4     B9 0E 06 F1 | 	add	objptr, #185
050b8     07 43 C2 FA | 	rdbyte	_var10, objptr
050bc     21 3B 82 F1 | 	sub	_var06, _var10
050c0     02 30 66 F0 | 	shl	_var01, #2
050c4     B9 0E 86 F1 | 	sub	objptr, #185
050c8     07 31 02 F1 | 	add	_var01, objptr
050cc     18 3B 62 FC | 	wrlong	_var06, _var01
050d0     FF 0E 86 F1 | 	sub	objptr, #255
050d4     A8 00 90 FD | 	jmp	#LR__0201
050d8                 | LR__0197
050d8                 | ' 
050d8                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
050d8     B8 0F 06 F1 | 	add	objptr, #440
050dc     07 41 C2 FA | 	rdbyte	_var09, objptr
050e0     14 0F 86 F1 | 	sub	objptr, #276
050e4     07 43 C2 FA | 	rdbyte	_var10, objptr
050e8     21 41 02 FD | 	qmul	_var09, _var10
050ec     18 3A 62 FD | 	getqx	_var06
050f0     01 0E 06 F1 | 	add	objptr, #1
050f4     07 3B 42 FC | 	wrbyte	_var06, objptr
050f8     A5 0E 86 F1 | 	sub	objptr, #165
050fc     80 00 90 FD | 	jmp	#LR__0201
05100                 | LR__0198
05100                 | ' 
05100                 | '     $F:                          ' Set speed
05100                 | '       if z < 32
05100     B9 0F 06 F1 | 	add	objptr, #441
05104     07 39 C2 FA | 	rdbyte	_var05, objptr
05108     B9 0F 86 F1 | 	sub	objptr, #441
0510c     20 38 5E F2 | 	cmps	_var05, #32 wcz
05110     18 00 90 3D |  if_ae	jmp	#LR__0199
05114                 | '         currentSongSpeed := z
05114     B9 0F 06 F1 | 	add	objptr, #441
05118     07 39 C2 FA | 	rdbyte	_var05, objptr
0511c     15 0F 86 F1 | 	sub	objptr, #277
05120     07 39 42 FC | 	wrbyte	_var05, objptr
05124     A4 0E 86 F1 | 	sub	objptr, #164
05128                 | '       else
05128     54 00 90 FD | 	jmp	#LR__0200
0512c                 | LR__0199
0512c                 | '         ticksPerMinute := z * 24
0512c     B9 0F 06 F1 | 	add	objptr, #441
05130     07 3D C2 FA | 	rdbyte	_var07, objptr
05134     1E 39 02 F6 | 	mov	_var05, _var07
05138     01 38 66 F0 | 	shl	_var05, #1
0513c     1E 39 02 F1 | 	add	_var05, _var07
05140     03 38 66 F0 | 	shl	_var05, #3
05144     12 0E 86 F1 | 	sub	objptr, #18
05148     07 39 62 FC | 	wrlong	_var05, objptr
0514c     A7 0F 86 F1 | 	sub	objptr, #423
05150                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05150     07 0B 03 FB | 	rdlong	muldiva_, objptr
05154     A7 0F 06 F1 | 	add	objptr, #423
05158     07 0D 03 FB | 	rdlong	muldivb_, objptr
0515c     A7 0F 86 F1 | 	sub	objptr, #423
05160     D0 00 A0 FD | 	call	#divide_
05164     86 3B 02 F6 | 	mov	_var06, muldivb_
05168     04 3A 66 F0 | 	shl	_var06, #4
0516c     86 3B 82 F1 | 	sub	_var06, muldivb_
05170     02 3A 66 F0 | 	shl	_var06, #2
05174     AB 0F 06 F1 | 	add	objptr, #427
05178     07 3B 62 FC | 	wrlong	_var06, objptr
0517c     AB 0F 86 F1 | 	sub	objptr, #427
05180                 | LR__0200
05180                 | LR__0201
05180                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05180     2D 00 64 FD | 	ret
05184                 | 
05184                 | ' 
05184                 | ' 
05184                 | ' ' Handle all commands that executes on "non zero ticks"
05184                 | ' '
05184                 | ' PRI handleNonZeroTickCommands(channel)
05184                 | _trackerplayer_spin2_handleNonZeroTickCommands
05184     0A 5A 05 F6 | 	mov	COUNT_, #10
05188     B0 00 A0 FD | 	call	#pushregs_
0518c     2E 6B 02 F6 | 	mov	local01, arg01
05190                 | ' 
05190                 | '   CASE_FAST cmd
05190     BA 0F 06 F1 | 	add	objptr, #442
05194     07 6D C2 FA | 	rdbyte	local02, objptr
05198     BA 0F 86 F1 | 	sub	objptr, #442
0519c     36 6F 02 F6 | 	mov	local03, local02
051a0     01 6E 86 F1 | 	sub	local03, #1
051a4     0E 6E 26 F3 | 	fle	local03, #14
051a8     37 71 02 F6 | 	mov	local04, local03
051ac     30 70 62 FD | 	jmprel	local04
051b0                 | LR__0202
051b0     38 00 90 FD | 	jmp	#LR__0203
051b4     A0 00 90 FD | 	jmp	#LR__0204
051b8     D4 00 90 FD | 	jmp	#LR__0205
051bc     1C 02 90 FD | 	jmp	#LR__0215
051c0     20 01 90 FD | 	jmp	#LR__0207
051c4     48 01 90 FD | 	jmp	#LR__0208
051c8     50 01 90 FD | 	jmp	#LR__0209
051cc     0C 02 90 FD | 	jmp	#LR__0215
051d0     08 02 90 FD | 	jmp	#LR__0215
051d4     B0 01 90 FD | 	jmp	#LR__0212
051d8     00 02 90 FD | 	jmp	#LR__0215
051dc     FC 01 90 FD | 	jmp	#LR__0215
051e0     F8 01 90 FD | 	jmp	#LR__0215
051e4     AC 01 90 FD | 	jmp	#LR__0213
051e8     F0 01 90 FD | 	jmp	#LR__0215
051ec                 | LR__0203
051ec                 | ' 
051ec                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
051ec     35 73 02 F6 | 	mov	local05, local01
051f0     02 72 66 F0 | 	shl	local05, #2
051f4     DF 0E 06 F1 | 	add	objptr, #223
051f8     07 73 02 F1 | 	add	local05, objptr
051fc     39 75 02 FB | 	rdlong	local06, local05
05200     DA 0E 06 F1 | 	add	objptr, #218
05204     07 77 C2 FA | 	rdbyte	local07, objptr
05208     3B 75 82 F1 | 	sub	local06, local07
0520c     35 79 02 F6 | 	mov	local08, local01
05210     02 78 66 F0 | 	shl	local08, #2
05214     DA 0E 86 F1 | 	sub	objptr, #218
05218     07 79 02 F1 | 	add	local08, objptr
0521c     3C 75 62 FC | 	wrlong	local06, local08
05220                 | ' 
05220                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05220                 | '       if currPeriod[channel] < 0
05220     35 75 02 F6 | 	mov	local06, local01
05224     02 74 66 F0 | 	shl	local06, #2
05228     07 75 02 F1 | 	add	local06, objptr
0522c     3A 7B 02 FB | 	rdlong	local09, local06
05230     00 7A 5E F2 | 	cmps	local09, #0 wcz
05234     DF 0E 86 F1 | 	sub	objptr, #223
05238     A0 01 90 3D |  if_ae	jmp	#LR__0215
0523c                 | '         currPeriod[channel] := MAXIMUM_PERIOD
0523c     02 6A 66 F0 | 	shl	local01, #2
05240     DF 0E 06 F1 | 	add	objptr, #223
05244     07 6B 02 F1 | 	add	local01, objptr
05248     01 00 80 FF 
0524c     35 B1 6A FC | 	wrlong	##856, local01
05250     DF 0E 86 F1 | 	sub	objptr, #223
05254     84 01 90 FD | 	jmp	#LR__0215
05258                 | LR__0204
05258                 | ' 
05258                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05258     35 73 02 F6 | 	mov	local05, local01
0525c     02 72 66 F0 | 	shl	local05, #2
05260     DF 0E 06 F1 | 	add	objptr, #223
05264     07 73 02 F1 | 	add	local05, objptr
05268     39 75 02 FB | 	rdlong	local06, local05
0526c     DA 0E 06 F1 | 	add	objptr, #218
05270     07 77 C2 FA | 	rdbyte	local07, objptr
05274     3B 75 02 F1 | 	add	local06, local07
05278     02 6A 66 F0 | 	shl	local01, #2
0527c     DA 0E 86 F1 | 	sub	objptr, #218
05280     07 6B 02 F1 | 	add	local01, objptr
05284     35 75 62 FC | 	wrlong	local06, local01
05288     DF 0E 86 F1 | 	sub	objptr, #223
0528c     4C 01 90 FD | 	jmp	#LR__0215
05290                 | LR__0205
05290                 | ' 
05290                 | '     $3:                                 ' Slide to note (portamento)
05290                 | '       if z > 0
05290     B9 0F 06 F1 | 	add	objptr, #441
05294     07 75 C2 FA | 	rdbyte	local06, objptr
05298     B9 0F 86 F1 | 	sub	objptr, #441
0529c     00 74 5E F2 | 	cmps	local06, #0 wcz
052a0     1C 00 90 ED |  if_be	jmp	#LR__0206
052a4                 | '         cmd3_memoryZ[channel] := z
052a4     35 75 02 F6 | 	mov	local06, local01
052a8     C8 0F 06 F1 | 	add	objptr, #456
052ac     07 75 02 F1 | 	add	local06, objptr
052b0     0F 0E 86 F1 | 	sub	objptr, #15
052b4     07 7B C2 FA | 	rdbyte	local09, objptr
052b8     B9 0F 86 F1 | 	sub	objptr, #441
052bc     3A 7B 42 FC | 	wrbyte	local09, local06
052c0                 | LR__0206
052c0                 | ' 
052c0                 | '       doPortamento(channel, lastSetPeriod[channel])
052c0     35 73 02 F6 | 	mov	local05, local01
052c4     02 72 66 F0 | 	shl	local05, #2
052c8     27 0F 06 F1 | 	add	objptr, #295
052cc     07 73 02 F1 | 	add	local05, objptr
052d0     39 5F 02 FB | 	rdlong	arg02, local05
052d4     35 5D 02 F6 | 	mov	arg01, local01
052d8     27 0F 86 F1 | 	sub	objptr, #295
052dc     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
052e0     F8 00 90 FD | 	jmp	#LR__0215
052e4                 | LR__0207
052e4                 | ' 
052e4                 | '     $5:                                 ' Volume slide + portamento
052e4                 | '       doVolumeSlide(channel)
052e4     35 5D 02 F6 | 	mov	arg01, local01
052e8     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052ec                 | '       doPortamento(channel, lastSetPeriod[channel])
052ec     35 73 02 F6 | 	mov	local05, local01
052f0     02 72 66 F0 | 	shl	local05, #2
052f4     27 0F 06 F1 | 	add	objptr, #295
052f8     07 73 02 F1 | 	add	local05, objptr
052fc     39 5F 02 FB | 	rdlong	arg02, local05
05300     35 5D 02 F6 | 	mov	arg01, local01
05304     27 0F 86 F1 | 	sub	objptr, #295
05308     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0530c     CC 00 90 FD | 	jmp	#LR__0215
05310                 | LR__0208
05310                 | ' 
05310                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05310     35 5D 02 F6 | 	mov	arg01, local01
05314     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05318     C0 00 90 FD | 	jmp	#LR__0215
0531c                 | LR__0209
0531c                 | ' 
0531c                 | '     $7:                                 ' Tremolo
0531c                 | '       if x > 0
0531c     B7 0F 06 F1 | 	add	objptr, #439
05320     07 75 C2 FA | 	rdbyte	local06, objptr
05324     B7 0F 86 F1 | 	sub	objptr, #439
05328     00 74 5E F2 | 	cmps	local06, #0 wcz
0532c     1C 00 90 ED |  if_be	jmp	#LR__0210
05330                 | '         cmd7_memoryX[channel] := x
05330     35 75 02 F6 | 	mov	local06, local01
05334     D8 0F 06 F1 | 	add	objptr, #472
05338     07 75 02 F1 | 	add	local06, objptr
0533c     21 0E 86 F1 | 	sub	objptr, #33
05340     07 7B C2 FA | 	rdbyte	local09, objptr
05344     B7 0F 86 F1 | 	sub	objptr, #439
05348     3A 7B 42 FC | 	wrbyte	local09, local06
0534c                 | LR__0210
0534c                 | '       if y > 0
0534c     B8 0F 06 F1 | 	add	objptr, #440
05350     07 75 C2 FA | 	rdbyte	local06, objptr
05354     B8 0F 86 F1 | 	sub	objptr, #440
05358     00 74 5E F2 | 	cmps	local06, #0 wcz
0535c     1C 00 90 ED |  if_be	jmp	#LR__0211
05360                 | '         cmd7_memoryY[channel] := y
05360     35 75 02 F6 | 	mov	local06, local01
05364     D4 0F 06 F1 | 	add	objptr, #468
05368     07 75 02 F1 | 	add	local06, objptr
0536c     1C 0E 86 F1 | 	sub	objptr, #28
05370     07 7B C2 FA | 	rdbyte	local09, objptr
05374     B8 0F 86 F1 | 	sub	objptr, #440
05378     3A 7B 42 FC | 	wrbyte	local09, local06
0537c                 | LR__0211
0537c                 | ' 
0537c                 | '       doTremolo(channel)
0537c     35 5D 02 F6 | 	mov	arg01, local01
05380     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05384     54 00 90 FD | 	jmp	#LR__0215
05388                 | LR__0212
05388                 | ' 
05388                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05388     35 5D 02 F6 | 	mov	arg01, local01
0538c     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05390     48 00 90 FD | 	jmp	#LR__0215
05394                 | LR__0213
05394                 | ' 
05394                 | '     $E:                                 ' Retrig every Y ticks
05394                 | '       if (x == $9) && ((tickcounter // y) == 0)
05394     B7 0F 06 F1 | 	add	objptr, #439
05398     07 73 C2 FA | 	rdbyte	local05, objptr
0539c     B7 0F 86 F1 | 	sub	objptr, #439
053a0     09 72 0E F2 | 	cmp	local05, #9 wz
053a4     34 00 90 5D |  if_ne	jmp	#LR__0214
053a8     A1 0E 06 F1 | 	add	objptr, #161
053ac     07 77 C2 FA | 	rdbyte	local07, objptr
053b0     3B 0B 03 F6 | 	mov	muldiva_, local07
053b4     17 0F 06 F1 | 	add	objptr, #279
053b8     07 7D C2 FA | 	rdbyte	local10, objptr
053bc     B8 0F 86 F1 | 	sub	objptr, #440
053c0     3E 0D 03 F6 | 	mov	muldivb_, local10
053c4     D0 00 A0 FD | 	call	#divide_
053c8     85 7B 0A F6 | 	mov	local09, muldiva_ wz
053cc     0C 00 90 5D |  if_ne	jmp	#LR__0214
053d0                 | '         triggerNote(channel)
053d0     35 75 02 F6 | 	mov	local06, local01
053d4     3A 5D 02 F6 | 	mov	arg01, local06
053d8     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
053dc                 | LR__0214
053dc                 | LR__0215
053dc     AF F0 03 F6 | 	mov	ptra, fp
053e0     BF 00 A0 FD | 	call	#popregs_
053e4                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
053e4     2D 00 64 FD | 	ret
053e8                 | 
053e8                 | ' 
053e8                 | ' 
053e8                 | ' ' Handle all commands that executes on every tick
053e8                 | ' '
053e8                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
053e8                 | _trackerplayer_spin2_handleEveryTickCommands
053e8     12 5A 05 F6 | 	mov	COUNT_, #18
053ec     B0 00 A0 FD | 	call	#pushregs_
053f0     2E 6B 02 F6 | 	mov	local01, arg01
053f4                 | ' 
053f4                 | '   CASE_FAST cmd
053f4     BA 0F 06 F1 | 	add	objptr, #442
053f8     07 6D C2 FA | 	rdbyte	local02, objptr
053fc     BA 0F 86 F1 | 	sub	objptr, #442
05400     36 6F 02 F6 | 	mov	local03, local02
05404     0F 6E 26 F3 | 	fle	local03, #15
05408     37 71 02 F6 | 	mov	local04, local03
0540c     30 70 62 FD | 	jmprel	local04
05410                 | LR__0216
05410     3C 00 90 FD | 	jmp	#LR__0217
05414     68 03 90 FD | 	jmp	#LR__0231
05418     64 03 90 FD | 	jmp	#LR__0231
0541c     60 03 90 FD | 	jmp	#LR__0231
05420     E8 01 90 FD | 	jmp	#LR__0220
05424     58 03 90 FD | 	jmp	#LR__0231
05428     4C 02 90 FD | 	jmp	#LR__0223
0542c     50 03 90 FD | 	jmp	#LR__0231
05430     4C 03 90 FD | 	jmp	#LR__0231
05434     48 03 90 FD | 	jmp	#LR__0231
05438     44 03 90 FD | 	jmp	#LR__0231
0543c     40 03 90 FD | 	jmp	#LR__0231
05440     3C 03 90 FD | 	jmp	#LR__0231
05444     38 03 90 FD | 	jmp	#LR__0231
05448     38 02 90 FD | 	jmp	#LR__0224
0544c     30 03 90 FD | 	jmp	#LR__0231
05450                 | LR__0217
05450                 | ' 
05450                 | '     $0:                                 ' Arpeggio
05450                 | '       arpCounter := tickCounter // 3
05450     A1 0E 06 F1 | 	add	objptr, #161
05454     07 0B C3 FA | 	rdbyte	muldiva_, objptr
05458     A1 0E 86 F1 | 	sub	objptr, #161
0545c     03 0C 07 F6 | 	mov	muldivb_, #3
05460     D0 00 A0 FD | 	call	#divide_
05464     85 73 02 F6 | 	mov	local05, muldiva_
05468                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
05468     35 75 02 F6 | 	mov	local06, local01
0546c     02 74 66 F0 | 	shl	local06, #2
05470     DF 0E 06 F1 | 	add	objptr, #223
05474     07 75 02 F1 | 	add	local06, objptr
05478     3A 5D 02 FB | 	rdlong	arg01, local06
0547c     35 77 02 F6 | 	mov	local07, local01
05480     0C 0E 86 F1 | 	sub	objptr, #12
05484     07 77 02 F1 | 	add	local07, objptr
05488     3B 5F C2 FA | 	rdbyte	arg02, local07
0548c     D3 0E 86 F1 | 	sub	objptr, #211
05490     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05494     15 79 02 F6 | 	mov	local08, result1
05498     3C 7B 02 F6 | 	mov	local09, local08
0549c     24 78 5E F2 | 	cmps	local08, #36 wcz
054a0     DC 02 90 3D |  if_ae	jmp	#LR__0231
054a4                 | '         if arpCounter == 1 and x > 0
054a4     01 72 0E F2 | 	cmp	local05, #1 wz
054a8     8C 00 90 5D |  if_ne	jmp	#LR__0218
054ac     B7 0F 06 F1 | 	add	objptr, #439
054b0     07 75 C2 FA | 	rdbyte	local06, objptr
054b4     B7 0F 86 F1 | 	sub	objptr, #439
054b8     00 74 5E F2 | 	cmps	local06, #0 wcz
054bc     78 00 90 ED |  if_be	jmp	#LR__0218
054c0                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
054c0     3D 7D 02 F6 | 	mov	local10, local09
054c4     B7 0F 06 F1 | 	add	objptr, #439
054c8     07 77 C2 FA | 	rdbyte	local07, objptr
054cc     3B 7F 02 F6 | 	mov	local11, local07
054d0     3B 7D 02 F1 | 	add	local10, local07
054d4     3E 81 02 F6 | 	mov	local12, local10
054d8     40 5D 02 F6 | 	mov	arg01, local12
054dc     06 00 00 FF 
054e0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054e4     01 5C 66 F0 | 	shl	arg01, #1
054e8     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054ec                 | ' 
054ec                 | '   return word[@periodTable][noteNumber]
054ec     2E 2B E2 FA | 	rdword	result1, arg01
054f0     06 00 00 FF 
054f4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054f8     15 83 02 F6 | 	mov	local13, result1
054fc     35 85 02 F6 | 	mov	local14, local01
05500     02 84 66 F0 | 	shl	local14, #2
05504     D8 0E 86 F1 | 	sub	objptr, #216
05508     07 87 02 F6 | 	mov	local15, objptr
0550c     07 85 02 F1 | 	add	local14, objptr
05510     41 75 02 F6 | 	mov	local06, local13
05514     42 89 02 FB | 	rdlong	local16, local14
05518     44 75 82 F1 | 	sub	local06, local16
0551c     35 8B 02 F6 | 	mov	local17, local01
05520     02 8A 66 F0 | 	shl	local17, #2
05524     10 0E 06 F1 | 	add	objptr, #16
05528     07 8D 02 F6 | 	mov	local18, objptr
0552c     07 8B 02 F1 | 	add	local17, objptr
05530     45 75 62 FC | 	wrlong	local06, local17
05534     EF 0E 86 F1 | 	sub	objptr, #239
05538                 | LR__0218
05538                 | '         if arpCounter == 2 and y > 0
05538     02 72 0E F2 | 	cmp	local05, #2 wz
0553c     8C 00 90 5D |  if_ne	jmp	#LR__0219
05540     B8 0F 06 F1 | 	add	objptr, #440
05544     07 75 C2 FA | 	rdbyte	local06, objptr
05548     B8 0F 86 F1 | 	sub	objptr, #440
0554c     00 74 5E F2 | 	cmps	local06, #0 wcz
05550     78 00 90 ED |  if_be	jmp	#LR__0219
05554                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05554     3D 7D 02 F6 | 	mov	local10, local09
05558     B8 0F 06 F1 | 	add	objptr, #440
0555c     07 77 C2 FA | 	rdbyte	local07, objptr
05560     3B 7F 02 F6 | 	mov	local11, local07
05564     3B 7D 02 F1 | 	add	local10, local07
05568     3E 81 02 F6 | 	mov	local12, local10
0556c     40 5D 02 F6 | 	mov	arg01, local12
05570     06 00 00 FF 
05574     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05578     01 5C 66 F0 | 	shl	arg01, #1
0557c     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05580                 | ' 
05580                 | '   return word[@periodTable][noteNumber]
05580     2E 2B E2 FA | 	rdword	result1, arg01
05584     06 00 00 FF 
05588     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0558c     15 83 02 F6 | 	mov	local13, result1
05590     35 85 02 F6 | 	mov	local14, local01
05594     02 84 66 F0 | 	shl	local14, #2
05598     D9 0E 86 F1 | 	sub	objptr, #217
0559c     07 87 02 F6 | 	mov	local15, objptr
055a0     07 85 02 F1 | 	add	local14, objptr
055a4     41 75 02 F6 | 	mov	local06, local13
055a8     42 89 02 FB | 	rdlong	local16, local14
055ac     44 75 82 F1 | 	sub	local06, local16
055b0     35 8B 02 F6 | 	mov	local17, local01
055b4     02 8A 66 F0 | 	shl	local17, #2
055b8     10 0E 06 F1 | 	add	objptr, #16
055bc     07 8D 02 F6 | 	mov	local18, objptr
055c0     07 8B 02 F1 | 	add	local17, objptr
055c4     45 75 62 FC | 	wrlong	local06, local17
055c8     EF 0E 86 F1 | 	sub	objptr, #239
055cc                 | LR__0219
055cc                 | '         if arpCounter == 0 and (x + y) > 0
055cc     00 72 0E F2 | 	cmp	local05, #0 wz
055d0     AC 01 90 5D |  if_ne	jmp	#LR__0231
055d4     B7 0F 06 F1 | 	add	objptr, #439
055d8     07 75 C2 FA | 	rdbyte	local06, objptr
055dc     01 0E 06 F1 | 	add	objptr, #1
055e0     07 77 C2 FA | 	rdbyte	local07, objptr
055e4     B8 0F 86 F1 | 	sub	objptr, #440
055e8     3B 75 02 F1 | 	add	local06, local07
055ec     00 74 5E F2 | 	cmps	local06, #0 wcz
055f0     8C 01 90 ED |  if_be	jmp	#LR__0231
055f4                 | '           deltaPeriod[channel] := 0
055f4     02 6A 66 F0 | 	shl	local01, #2
055f8     EF 0E 06 F1 | 	add	objptr, #239
055fc     07 6B 02 F1 | 	add	local01, objptr
05600     35 01 68 FC | 	wrlong	#0, local01
05604     EF 0E 86 F1 | 	sub	objptr, #239
05608     74 01 90 FD | 	jmp	#LR__0231
0560c                 | LR__0220
0560c                 | ' 
0560c                 | '     $4:                                 ' Vibrato
0560c                 | '       if x > 0
0560c     B7 0F 06 F1 | 	add	objptr, #439
05610     07 75 C2 FA | 	rdbyte	local06, objptr
05614     B7 0F 86 F1 | 	sub	objptr, #439
05618     00 74 5E F2 | 	cmps	local06, #0 wcz
0561c     1C 00 90 ED |  if_be	jmp	#LR__0221
05620                 | '         cmd4_memoryX[channel] := x
05620     35 75 02 F6 | 	mov	local06, local01
05624     D0 0F 06 F1 | 	add	objptr, #464
05628     07 75 02 F1 | 	add	local06, objptr
0562c     19 0E 86 F1 | 	sub	objptr, #25
05630     07 7F C2 FA | 	rdbyte	local11, objptr
05634     B7 0F 86 F1 | 	sub	objptr, #439
05638     3A 7F 42 FC | 	wrbyte	local11, local06
0563c                 | LR__0221
0563c                 | '       if y > 0
0563c     B8 0F 06 F1 | 	add	objptr, #440
05640     07 75 C2 FA | 	rdbyte	local06, objptr
05644     B8 0F 86 F1 | 	sub	objptr, #440
05648     00 74 5E F2 | 	cmps	local06, #0 wcz
0564c     1C 00 90 ED |  if_be	jmp	#LR__0222
05650                 | '         cmd4_memoryY[channel] := y
05650     35 75 02 F6 | 	mov	local06, local01
05654     CC 0F 06 F1 | 	add	objptr, #460
05658     07 75 02 F1 | 	add	local06, objptr
0565c     14 0E 86 F1 | 	sub	objptr, #20
05660     07 7F C2 FA | 	rdbyte	local11, objptr
05664     B8 0F 86 F1 | 	sub	objptr, #440
05668     3A 7F 42 FC | 	wrbyte	local11, local06
0566c                 | LR__0222
0566c                 | ' 
0566c                 | '       doVibrato(channel)
0566c     35 5D 02 F6 | 	mov	arg01, local01
05670     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05674     08 01 90 FD | 	jmp	#LR__0231
05678                 | LR__0223
05678                 | ' 
05678                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05678     35 5D 02 F6 | 	mov	arg01, local01
0567c     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05680     FC 00 90 FD | 	jmp	#LR__0231
05684                 | LR__0224
05684                 | ' 
05684                 | '     $E:
05684                 | '       if x == $C                        ' Cut note after Y ticks
05684     B7 0F 06 F1 | 	add	objptr, #439
05688     07 75 C2 FA | 	rdbyte	local06, objptr
0568c     B7 0F 86 F1 | 	sub	objptr, #439
05690     0C 74 0E F2 | 	cmp	local06, #12 wz
05694     34 00 90 5D |  if_ne	jmp	#LR__0225
05698                 | '         if tickcounter == y
05698     A1 0E 06 F1 | 	add	objptr, #161
0569c     07 75 C2 FA | 	rdbyte	local06, objptr
056a0     17 0F 06 F1 | 	add	objptr, #279
056a4     07 7F C2 FA | 	rdbyte	local11, objptr
056a8     B8 0F 86 F1 | 	sub	objptr, #440
056ac     3F 75 0A F2 | 	cmp	local06, local11 wz
056b0     CC 00 90 5D |  if_ne	jmp	#LR__0230
056b4                 | '           currVolume[channel] := 0
056b4     02 6A 66 F0 | 	shl	local01, #2
056b8     FF 0E 06 F1 | 	add	objptr, #255
056bc     07 6B 02 F1 | 	add	local01, objptr
056c0     35 01 68 FC | 	wrlong	#0, local01
056c4     FF 0E 86 F1 | 	sub	objptr, #255
056c8     B4 00 90 FD | 	jmp	#LR__0230
056cc                 | LR__0225
056cc                 | ' 
056cc                 | '       elseif x == $D                    ' Delay note Y ticks
056cc     B7 0F 06 F1 | 	add	objptr, #439
056d0     07 75 C2 FA | 	rdbyte	local06, objptr
056d4     B7 0F 86 F1 | 	sub	objptr, #439
056d8     0D 74 0E F2 | 	cmp	local06, #13 wz
056dc     A0 00 90 5D |  if_ne	jmp	#LR__0229
056e0                 | '         if tickcounter == y
056e0     A1 0E 06 F1 | 	add	objptr, #161
056e4     07 75 C2 FA | 	rdbyte	local06, objptr
056e8     17 0F 06 F1 | 	add	objptr, #279
056ec     07 7F C2 FA | 	rdbyte	local11, objptr
056f0     B8 0F 86 F1 | 	sub	objptr, #440
056f4     3F 75 0A F2 | 	cmp	local06, local11 wz
056f8     0C 00 90 5D |  if_ne	jmp	#LR__0226
056fc                 | '           triggerNote(channel)
056fc     35 5D 02 F6 | 	mov	arg01, local01
05700     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05704     78 00 90 FD | 	jmp	#LR__0228
05708                 | LR__0226
05708                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05708                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05708     B8 0F 06 F1 | 	add	objptr, #440
0570c     07 75 C2 FA | 	rdbyte	local06, objptr
05710     14 0F 86 F1 | 	sub	objptr, #276
05714     07 7F C2 FA | 	rdbyte	local11, objptr
05718     A4 0E 86 F1 | 	sub	objptr, #164
0571c     3F 75 5A F2 | 	cmps	local06, local11 wcz
05720     5C 00 90 CD |  if_b	jmp	#LR__0227
05724     A4 0E 06 F1 | 	add	objptr, #164
05728     07 83 C2 FA | 	rdbyte	local13, objptr
0572c     41 81 02 F6 | 	mov	local12, local13
05730     01 80 86 F1 | 	sub	local12, #1
05734     03 0E 86 F1 | 	sub	objptr, #3
05738     07 87 C2 FA | 	rdbyte	local15, objptr
0573c     A1 0E 86 F1 | 	sub	objptr, #161
05740     43 85 02 F6 | 	mov	local14, local15
05744     40 85 0A F2 | 	cmp	local14, local12 wz
05748     34 00 90 5D |  if_ne	jmp	#LR__0227
0574c                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
0574c     35 75 02 F6 | 	mov	local06, local01
05750     02 74 66 F0 | 	shl	local06, #2
05754     27 0F 06 F1 | 	add	objptr, #295
05758     07 7D 02 F6 | 	mov	local10, objptr
0575c     07 75 02 F1 | 	add	local06, objptr
05760     35 7F 02 F6 | 	mov	local11, local01
05764     02 7E 66 F0 | 	shl	local11, #2
05768     48 0E 86 F1 | 	sub	objptr, #72
0576c     07 77 02 F6 | 	mov	local07, objptr
05770     3A 81 02 FB | 	rdlong	local12, local06
05774     3B 7F 02 F1 | 	add	local11, local07
05778     3F 81 62 FC | 	wrlong	local12, local11
0577c     DF 0E 86 F1 | 	sub	objptr, #223
05780                 | LR__0227
05780                 | LR__0228
05780                 | LR__0229
05780                 | LR__0230
05780                 | LR__0231
05780     AF F0 03 F6 | 	mov	ptra, fp
05784     BF 00 A0 FD | 	call	#popregs_
05788                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05788     2D 00 64 FD | 	ret
0578c                 | 
0578c                 | ' 
0578c                 | ' 
0578c                 | ' PRI doTremolo(channel) | depth, sineWave, speed
0578c                 | _trackerplayer_spin2_doTremolo
0578c     2E 31 02 F6 | 	mov	_var01, arg01
05790     18 33 02 F6 | 	mov	_var02, _var01
05794     8B 0F 06 F1 | 	add	objptr, #395
05798     07 33 02 F1 | 	add	_var02, objptr
0579c     05 00 00 FF 
057a0     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
057a4     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
057a8     19 37 C2 FA | 	rdbyte	_var04, _var02
057ac     02 36 66 F0 | 	shl	_var04, #2
057b0     1A 37 02 F1 | 	add	_var04, _var03
057b4                 | ' 
057b4                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
057b4     1B 39 02 FB | 	rdlong	_var05, _var04
057b8     18 3B 02 F6 | 	mov	_var06, _var01
057bc     49 0E 06 F1 | 	add	objptr, #73
057c0     07 3B 02 F1 | 	add	_var06, objptr
057c4                 | '   depth    := cmd7_memoryY[channel]
057c4     1D 3D C2 FA | 	rdbyte	_var07, _var06
057c8     18 3F 02 F6 | 	mov	_var08, _var01
057cc     04 0E 06 F1 | 	add	objptr, #4
057d0     07 3F 02 F1 | 	add	_var08, objptr
057d4                 | '   speed    := cmd7_memoryX[channel]
057d4     1F 41 C2 FA | 	rdbyte	_var09, _var08
057d8                 | ' 
057d8                 | '   CASE_FAST vibratoType[channel]
057d8     18 43 02 F6 | 	mov	_var10, _var01
057dc     18 0E 86 F1 | 	sub	objptr, #24
057e0     07 45 02 F6 | 	mov	_var11, objptr
057e4     07 43 02 F1 | 	add	_var10, objptr
057e8     21 47 C2 FA | 	rdbyte	_var12, _var10
057ec     03 46 26 F3 | 	fle	_var12, #3
057f0     23 49 02 F6 | 	mov	_var13, _var12
057f4     05 00 00 FF 
057f8     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
057fc     C0 0F 86 F1 | 	sub	objptr, #448
05800     30 48 62 FD | 	jmprel	_var13
05804                 | LR__0232
05804     0C 00 90 FD | 	jmp	#LR__0233
05808     30 00 90 FD | 	jmp	#LR__0234
0580c     6C 00 90 FD | 	jmp	#LR__0235
05810     B4 00 90 FD | 	jmp	#LR__0236
05814                 | LR__0233
05814                 | ' 
05814                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05814     1C 3D 02 FD | 	qmul	_var07, _var05
05818     18 4A 62 FD | 	getqx	_var14
0581c     06 4A C6 F0 | 	sar	_var14, #6
05820     18 4D 02 F6 | 	mov	_var15, _var01
05824     02 4C 66 F0 | 	shl	_var15, #2
05828     0F 0F 06 F1 | 	add	objptr, #271
0582c     07 4D 02 F1 | 	add	_var15, objptr
05830     26 4B 62 FC | 	wrlong	_var14, _var15
05834     0F 0F 86 F1 | 	sub	objptr, #271
05838     8C 00 90 FD | 	jmp	#LR__0236
0583c                 | LR__0234
0583c                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
0583c     18 4D 02 F6 | 	mov	_var15, _var01
05840     8B 0F 06 F1 | 	add	objptr, #395
05844     07 4D 02 F1 | 	add	_var15, objptr
05848     26 4F C2 FA | 	rdbyte	_var16, _var15
0584c     03 4E 66 F0 | 	shl	_var16, #3
05850     27 3D 02 FD | 	qmul	_var07, _var16
05854     18 4A 62 FD | 	getqx	_var14
05858     00 4B 86 F1 | 	sub	_var14, #256
0585c     06 4A C6 F0 | 	sar	_var14, #6
05860     18 51 02 F6 | 	mov	_var17, _var01
05864     02 50 66 F0 | 	shl	_var17, #2
05868     7C 0E 86 F1 | 	sub	objptr, #124
0586c     07 51 02 F1 | 	add	_var17, objptr
05870     28 4B 62 FC | 	wrlong	_var14, _var17
05874     0F 0F 86 F1 | 	sub	objptr, #271
05878     4C 00 90 FD | 	jmp	#LR__0236
0587c                 | LR__0235
0587c                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
0587c     18 4D 02 F6 | 	mov	_var15, _var01
05880     8B 0F 06 F1 | 	add	objptr, #395
05884     07 53 02 F6 | 	mov	_var18, objptr
05888     07 4D 02 F1 | 	add	_var15, objptr
0588c     26 4F C2 FA | 	rdbyte	_var16, _var15
05890     20 4E 06 F5 | 	and	_var16, #32
05894     04 4E 66 F0 | 	shl	_var16, #4
05898     27 3D 02 FD | 	qmul	_var07, _var16
0589c     18 54 62 FD | 	getqx	_var19
058a0     2A 4B 02 F6 | 	mov	_var14, _var19
058a4     00 4B 86 F1 | 	sub	_var14, #256
058a8     06 4A C6 F0 | 	sar	_var14, #6
058ac     18 51 02 F6 | 	mov	_var17, _var01
058b0     02 50 66 F0 | 	shl	_var17, #2
058b4     7C 0E 86 F1 | 	sub	objptr, #124
058b8     07 57 02 F6 | 	mov	_var20, objptr
058bc     07 51 02 F1 | 	add	_var17, objptr
058c0     28 4B 62 FC | 	wrlong	_var14, _var17
058c4     0F 0F 86 F1 | 	sub	objptr, #271
058c8                 | LR__0236
058c8     8B 0F 06 F1 | 	add	objptr, #395
058cc     07 31 02 F1 | 	add	_var01, objptr
058d0     18 59 C2 FA | 	rdbyte	_var21, _var01
058d4     20 59 02 F1 | 	add	_var21, _var09
058d8     3F 58 06 F5 | 	and	_var21, #63
058dc                 | ' 
058dc                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
058dc     18 59 42 FC | 	wrbyte	_var21, _var01
058e0     8B 0F 86 F1 | 	sub	objptr, #395
058e4                 | _trackerplayer_spin2_doTremolo_ret
058e4     2D 00 64 FD | 	ret
058e8                 | 
058e8                 | ' 
058e8                 | ' 
058e8                 | ' PRI doVibrato(channel) | depth, sineWave, speed
058e8                 | _trackerplayer_spin2_doVibrato
058e8     2E 31 02 F6 | 	mov	_var01, arg01
058ec     18 33 02 F6 | 	mov	_var02, _var01
058f0     87 0F 06 F1 | 	add	objptr, #391
058f4     07 33 02 F1 | 	add	_var02, objptr
058f8     05 00 00 FF 
058fc     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05900     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05904     19 37 C2 FA | 	rdbyte	_var04, _var02
05908     02 36 66 F0 | 	shl	_var04, #2
0590c     1A 37 02 F1 | 	add	_var04, _var03
05910                 | ' 
05910                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05910     1B 39 02 FB | 	rdlong	_var05, _var04
05914     18 3B 02 F6 | 	mov	_var06, _var01
05918     45 0E 06 F1 | 	add	objptr, #69
0591c     07 3B 02 F1 | 	add	_var06, objptr
05920                 | '   depth    := cmd4_memoryY[channel]
05920     1D 3D C2 FA | 	rdbyte	_var07, _var06
05924     18 3F 02 F6 | 	mov	_var08, _var01
05928     04 0E 06 F1 | 	add	objptr, #4
0592c     07 3F 02 F1 | 	add	_var08, objptr
05930                 | '   speed    := cmd4_memoryX[channel]
05930     1F 41 C2 FA | 	rdbyte	_var09, _var08
05934                 | ' 
05934                 | '   CASE_FAST vibratoType[channel]
05934     18 43 02 F6 | 	mov	_var10, _var01
05938     10 0E 86 F1 | 	sub	objptr, #16
0593c     07 45 02 F6 | 	mov	_var11, objptr
05940     07 43 02 F1 | 	add	_var10, objptr
05944     21 47 C2 FA | 	rdbyte	_var12, _var10
05948     03 46 26 F3 | 	fle	_var12, #3
0594c     23 49 02 F6 | 	mov	_var13, _var12
05950     05 00 00 FF 
05954     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05958     C0 0F 86 F1 | 	sub	objptr, #448
0595c     30 48 62 FD | 	jmprel	_var13
05960                 | LR__0237
05960     0C 00 90 FD | 	jmp	#LR__0238
05964     30 00 90 FD | 	jmp	#LR__0239
05968     6C 00 90 FD | 	jmp	#LR__0240
0596c     B4 00 90 FD | 	jmp	#LR__0241
05970                 | LR__0238
05970                 | ' 
05970                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05970     1C 3D 02 FD | 	qmul	_var07, _var05
05974     18 4A 62 FD | 	getqx	_var14
05978     07 4A C6 F0 | 	sar	_var14, #7
0597c     18 4D 02 F6 | 	mov	_var15, _var01
05980     02 4C 66 F0 | 	shl	_var15, #2
05984     EF 0E 06 F1 | 	add	objptr, #239
05988     07 4D 02 F1 | 	add	_var15, objptr
0598c     26 4B 62 FC | 	wrlong	_var14, _var15
05990     EF 0E 86 F1 | 	sub	objptr, #239
05994     8C 00 90 FD | 	jmp	#LR__0241
05998                 | LR__0239
05998                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05998     18 4D 02 F6 | 	mov	_var15, _var01
0599c     87 0F 06 F1 | 	add	objptr, #391
059a0     07 4D 02 F1 | 	add	_var15, objptr
059a4     26 4F C2 FA | 	rdbyte	_var16, _var15
059a8     03 4E 66 F0 | 	shl	_var16, #3
059ac     27 3D 02 FD | 	qmul	_var07, _var16
059b0     18 4A 62 FD | 	getqx	_var14
059b4     00 4B 86 F1 | 	sub	_var14, #256
059b8     07 4A C6 F0 | 	sar	_var14, #7
059bc     18 51 02 F6 | 	mov	_var17, _var01
059c0     02 50 66 F0 | 	shl	_var17, #2
059c4     98 0E 86 F1 | 	sub	objptr, #152
059c8     07 51 02 F1 | 	add	_var17, objptr
059cc     28 4B 62 FC | 	wrlong	_var14, _var17
059d0     EF 0E 86 F1 | 	sub	objptr, #239
059d4     4C 00 90 FD | 	jmp	#LR__0241
059d8                 | LR__0240
059d8                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
059d8     18 4D 02 F6 | 	mov	_var15, _var01
059dc     87 0F 06 F1 | 	add	objptr, #391
059e0     07 53 02 F6 | 	mov	_var18, objptr
059e4     07 4D 02 F1 | 	add	_var15, objptr
059e8     26 4F C2 FA | 	rdbyte	_var16, _var15
059ec     20 4E 06 F5 | 	and	_var16, #32
059f0     04 4E 66 F0 | 	shl	_var16, #4
059f4     27 3D 02 FD | 	qmul	_var07, _var16
059f8     18 54 62 FD | 	getqx	_var19
059fc     2A 4B 02 F6 | 	mov	_var14, _var19
05a00     00 4B 86 F1 | 	sub	_var14, #256
05a04     07 4A C6 F0 | 	sar	_var14, #7
05a08     18 51 02 F6 | 	mov	_var17, _var01
05a0c     02 50 66 F0 | 	shl	_var17, #2
05a10     98 0E 86 F1 | 	sub	objptr, #152
05a14     07 57 02 F6 | 	mov	_var20, objptr
05a18     07 51 02 F1 | 	add	_var17, objptr
05a1c     28 4B 62 FC | 	wrlong	_var14, _var17
05a20     EF 0E 86 F1 | 	sub	objptr, #239
05a24                 | LR__0241
05a24     87 0F 06 F1 | 	add	objptr, #391
05a28     07 31 02 F1 | 	add	_var01, objptr
05a2c     18 59 C2 FA | 	rdbyte	_var21, _var01
05a30     20 59 02 F1 | 	add	_var21, _var09
05a34     3F 58 06 F5 | 	and	_var21, #63
05a38                 | ' 
05a38                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05a38     18 59 42 FC | 	wrbyte	_var21, _var01
05a3c     87 0F 86 F1 | 	sub	objptr, #391
05a40                 | _trackerplayer_spin2_doVibrato_ret
05a40     2D 00 64 FD | 	ret
05a44                 | 
05a44                 | ' 
05a44                 | ' 
05a44                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05a44                 | _trackerplayer_spin2_doPortamento
05a44                 | ' 
05a44                 | '   if period == currPeriod[channel]
05a44     2E 31 02 F6 | 	mov	_var01, arg01
05a48     02 30 66 F0 | 	shl	_var01, #2
05a4c     DF 0E 06 F1 | 	add	objptr, #223
05a50     07 33 02 F6 | 	mov	_var02, objptr
05a54     07 31 02 F1 | 	add	_var01, objptr
05a58     18 35 02 FB | 	rdlong	_var03, _var01
05a5c     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
05a60                 | '     return
05a60     DF 0E 86 F1 | 	sub	objptr, #223
05a64     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05a68                 | ' 
05a68                 | '   if period > 0
05a68     00 5E 5E F2 | 	cmps	arg02, #0 wcz
05a6c     1C 00 90 ED |  if_be	jmp	#LR__0242
05a70     2E 37 02 F6 | 	mov	_var04, arg01
05a74     02 36 66 F0 | 	shl	_var04, #2
05a78     97 0F 06 F1 | 	add	objptr, #407
05a7c     07 37 02 F1 | 	add	_var04, objptr
05a80                 | '     portamentoPeriodMemory[channel] := period
05a80     1B 5F 62 FC | 	wrlong	arg02, _var04
05a84                 | '   else
05a84     97 0F 86 F1 | 	sub	objptr, #407
05a88     18 00 90 FD | 	jmp	#LR__0243
05a8c                 | LR__0242
05a8c     2E 39 02 F6 | 	mov	_var05, arg01
05a90     02 38 66 F0 | 	shl	_var05, #2
05a94     97 0F 06 F1 | 	add	objptr, #407
05a98     07 39 02 F1 | 	add	_var05, objptr
05a9c                 | '     period := portamentoPeriodMemory[channel]
05a9c     1C 5F 02 FB | 	rdlong	arg02, _var05
05aa0     97 0F 86 F1 | 	sub	objptr, #407
05aa4                 | LR__0243
05aa4                 | ' 
05aa4                 | '   if period > currPeriod[channel]
05aa4     2E 31 02 F6 | 	mov	_var01, arg01
05aa8     02 30 66 F0 | 	shl	_var01, #2
05aac     DF 0E 06 F1 | 	add	objptr, #223
05ab0     07 31 02 F1 | 	add	_var01, objptr
05ab4     18 35 02 FB | 	rdlong	_var03, _var01
05ab8     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05abc     DF 0E 86 F1 | 	sub	objptr, #223
05ac0     50 00 90 ED |  if_be	jmp	#LR__0244
05ac4     2E 3B 02 F6 | 	mov	_var06, arg01
05ac8     02 3A 66 F0 | 	shl	_var06, #2
05acc     DF 0E 06 F1 | 	add	objptr, #223
05ad0     07 3B 02 F1 | 	add	_var06, objptr
05ad4     2E 3D 02 F6 | 	mov	_var07, arg01
05ad8     E9 0E 06 F1 | 	add	objptr, #233
05adc     1D 3F 02 FB | 	rdlong	_var08, _var06
05ae0     07 3D 02 F1 | 	add	_var07, objptr
05ae4     1E 33 C2 FA | 	rdbyte	_var02, _var07
05ae8     19 3F 02 F1 | 	add	_var08, _var02
05aec                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05aec     1D 3F 62 FC | 	wrlong	_var08, _var06
05af0     2E 41 02 F6 | 	mov	_var09, arg01
05af4     02 40 66 F0 | 	shl	_var09, #2
05af8     E9 0E 86 F1 | 	sub	objptr, #233
05afc     07 41 02 F1 | 	add	_var09, objptr
05b00     20 43 02 FB | 	rdlong	_var10, _var09
05b04     2F 43 62 F3 | 	fles	_var10, arg02
05b08                 | '     currPeriod[channel] <#= period
05b08     20 43 62 FC | 	wrlong	_var10, _var09
05b0c     DF 0E 86 F1 | 	sub	objptr, #223
05b10     6C 00 90 FD | 	jmp	#LR__0246
05b14                 | LR__0244
05b14                 | ' 
05b14                 | '   elseif period < currPeriod[channel]
05b14     2E 31 02 F6 | 	mov	_var01, arg01
05b18     02 30 66 F0 | 	shl	_var01, #2
05b1c     DF 0E 06 F1 | 	add	objptr, #223
05b20     07 31 02 F1 | 	add	_var01, objptr
05b24     18 35 02 FB | 	rdlong	_var03, _var01
05b28     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05b2c     DF 0E 86 F1 | 	sub	objptr, #223
05b30     4C 00 90 3D |  if_ae	jmp	#LR__0245
05b34     2E 45 02 F6 | 	mov	_var11, arg01
05b38     02 44 66 F0 | 	shl	_var11, #2
05b3c     DF 0E 06 F1 | 	add	objptr, #223
05b40     07 45 02 F1 | 	add	_var11, objptr
05b44     2E 47 02 F6 | 	mov	_var12, arg01
05b48     E9 0E 06 F1 | 	add	objptr, #233
05b4c     22 49 02 FB | 	rdlong	_var13, _var11
05b50     07 47 02 F1 | 	add	_var12, objptr
05b54     23 33 C2 FA | 	rdbyte	_var02, _var12
05b58     19 49 82 F1 | 	sub	_var13, _var02
05b5c                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05b5c     22 49 62 FC | 	wrlong	_var13, _var11
05b60     2E 4B 02 F6 | 	mov	_var14, arg01
05b64     02 4A 66 F0 | 	shl	_var14, #2
05b68     E9 0E 86 F1 | 	sub	objptr, #233
05b6c     07 4B 02 F1 | 	add	_var14, objptr
05b70     25 4D 02 FB | 	rdlong	_var15, _var14
05b74     2F 4D 42 F3 | 	fges	_var15, arg02
05b78                 | '     currPeriod[channel] #>= period
05b78     25 4D 62 FC | 	wrlong	_var15, _var14
05b7c     DF 0E 86 F1 | 	sub	objptr, #223
05b80                 | LR__0245
05b80                 | LR__0246
05b80                 | ' 
05b80                 | '   ' Handle glissando if activated
05b80                 | '   if portaGlissando[channel] > 0
05b80     2E 31 02 F6 | 	mov	_var01, arg01
05b84     BC 0F 06 F1 | 	add	objptr, #444
05b88     07 31 02 F1 | 	add	_var01, objptr
05b8c     18 35 C2 FA | 	rdbyte	_var03, _var01
05b90     00 34 5E F2 | 	cmps	_var03, #0 wcz
05b94     BC 0F 86 F1 | 	sub	objptr, #444
05b98     A0 00 90 ED |  if_be	jmp	#LR__0249
05b9c     2E 4F 02 F6 | 	mov	_var16, arg01
05ba0     02 4E 66 F0 | 	shl	_var16, #2
05ba4     DF 0E 06 F1 | 	add	objptr, #223
05ba8     07 4F 02 F1 | 	add	_var16, objptr
05bac                 | ' 
05bac                 | '     tempPeriod := currPeriod[channel]
05bac     27 51 02 FB | 	rdlong	_var17, _var16
05bb0                 | ' 
05bb0                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05bb0     00 52 06 F6 | 	mov	_var18, #0
05bb4     DF 0E 86 F1 | 	sub	objptr, #223
05bb8     A8 A4 9F FE | 	loc	pa,	#(@LR__0248-@LR__0247)
05bbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05bc0                 | LR__0247
05bc0     06 00 00 FF 
05bc4     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05bc8     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05bcc     2E 55 02 F6 | 	mov	_var19, arg01
05bd0     D3 0E 06 F1 | 	add	objptr, #211
05bd4     07 55 02 F1 | 	add	_var19, objptr
05bd8     2A 33 C2 FA | 	rdbyte	_var02, _var19
05bdc     19 57 02 F6 | 	mov	_var20, _var02
05be0     03 56 66 F0 | 	shl	_var20, #3
05be4     19 57 02 F1 | 	add	_var20, _var02
05be8     03 56 66 F0 | 	shl	_var20, #3
05bec     2B 35 02 F1 | 	add	_var03, _var20
05bf0     29 59 02 F6 | 	mov	_var21, _var18
05bf4     01 58 66 F0 | 	shl	_var21, #1
05bf8     1A 59 02 F1 | 	add	_var21, _var03
05bfc                 | ' 
05bfc                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05bfc     2C 5B E2 FA | 	rdword	_var22, _var21
05c00                 | '       if tempPeriod >= periodStep
05c00     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05c04                 | '         i += 1000
05c04     06 00 00 FF 
05c08     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05c0c     D3 0E 86 F1 | 	sub	objptr, #211
05c10     01 00 00 3F 
05c14     E8 53 06 31 |  if_ae	add	_var18, ##1000
05c18     01 52 06 F1 | 	add	_var18, #1
05c1c     24 52 5E F2 | 	cmps	_var18, #36 wcz
05c20     9C FF 9F CD |  if_b	jmp	#LR__0247
05c24                 | LR__0248
05c24     28 5B 82 F1 | 	sub	_var22, _var17
05c28     02 5C 66 F0 | 	shl	arg01, #2
05c2c     EF 0E 06 F1 | 	add	objptr, #239
05c30     07 5D 02 F1 | 	add	arg01, objptr
05c34                 | ' 
05c34                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05c34     2E 5B 62 FC | 	wrlong	_var22, arg01
05c38     EF 0E 86 F1 | 	sub	objptr, #239
05c3c                 | LR__0249
05c3c                 | _trackerplayer_spin2_doPortamento_ret
05c3c     2D 00 64 FD | 	ret
05c40                 | 
05c40                 | ' 
05c40                 | ' 
05c40                 | ' PRI doVolumeSlide(channel)
05c40                 | _trackerplayer_spin2_doVolumeSlide
05c40                 | ' 
05c40                 | '   if x > 0
05c40     B7 0F 06 F1 | 	add	objptr, #439
05c44     07 31 C2 FA | 	rdbyte	_var01, objptr
05c48     B7 0F 86 F1 | 	sub	objptr, #439
05c4c     00 30 5E F2 | 	cmps	_var01, #0 wcz
05c50     28 00 90 ED |  if_be	jmp	#LR__0250
05c54     2E 33 02 F6 | 	mov	_var02, arg01
05c58     02 32 66 F0 | 	shl	_var02, #2
05c5c     FF 0E 06 F1 | 	add	objptr, #255
05c60     07 33 02 F1 | 	add	_var02, objptr
05c64     19 35 02 FB | 	rdlong	_var03, _var02
05c68     B8 0E 06 F1 | 	add	objptr, #184
05c6c     07 37 C2 FA | 	rdbyte	_var04, objptr
05c70     B7 0F 86 F1 | 	sub	objptr, #439
05c74     1B 35 02 F1 | 	add	_var03, _var04
05c78                 | '     currVolume[channel] += x
05c78     19 35 62 FC | 	wrlong	_var03, _var02
05c7c                 | LR__0250
05c7c                 | '   if y > 0
05c7c     B8 0F 06 F1 | 	add	objptr, #440
05c80     07 31 C2 FA | 	rdbyte	_var01, objptr
05c84     B8 0F 86 F1 | 	sub	objptr, #440
05c88     00 30 5E F2 | 	cmps	_var01, #0 wcz
05c8c     24 00 90 ED |  if_be	jmp	#LR__0251
05c90     02 5C 66 F0 | 	shl	arg01, #2
05c94     FF 0E 06 F1 | 	add	objptr, #255
05c98     07 5D 02 F1 | 	add	arg01, objptr
05c9c     2E 39 02 FB | 	rdlong	_var05, arg01
05ca0     B9 0E 06 F1 | 	add	objptr, #185
05ca4     07 37 C2 FA | 	rdbyte	_var04, objptr
05ca8     B8 0F 86 F1 | 	sub	objptr, #440
05cac     1B 39 82 F1 | 	sub	_var05, _var04
05cb0                 | '     currVolume[channel] -= y
05cb0     2E 39 62 FC | 	wrlong	_var05, arg01
05cb4                 | LR__0251
05cb4                 | _trackerplayer_spin2_doVolumeSlide_ret
05cb4     2D 00 64 FD | 	ret
05cb8                 | hubexit
05cb8     81 00 80 FD | 	jmp	#cogexit
05cbc                 | 
05cbc                 | __system___setbaud
05cbc     14 0A 07 FB | 	rdlong	muldiva_, #20
05cc0     2E 0D 03 F6 | 	mov	muldivb_, arg01
05cc4     D0 00 A0 FD | 	call	#divide_
05cc8     40 7C 64 FD | 	dirl	#62
05ccc     40 7E 64 FD | 	dirl	#63
05cd0     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05cd4     10 0C 67 F0 | 	shl	muldivb_, #16
05cd8     07 5E 06 F6 | 	mov	arg02, #7
05cdc     86 5F 02 F1 | 	add	arg02, muldivb_
05ce0     3E F8 0C FC | 	wrpin	#124, #62
05ce4     3E 5E 16 FC | 	wxpin	arg02, #62
05ce8     3F 7C 0C FC | 	wrpin	#62, #63
05cec     14 5E 06 F1 | 	add	arg02, #20
05cf0     3F 5E 16 FC | 	wxpin	arg02, #63
05cf4     41 7C 64 FD | 	dirh	#62
05cf8     41 7E 64 FD | 	dirh	#63
05cfc                 | __system___setbaud_ret
05cfc     2D 00 64 FD | 	ret
05d00                 | 
05d00                 | __system___txraw
05d00     02 5A 05 F6 | 	mov	COUNT_, #2
05d04     B0 00 A0 FD | 	call	#pushregs_
05d08     2E 6B 02 F6 | 	mov	local01, arg01
05d0c     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05d10     0C 00 90 5D |  if_ne	jmp	#LR__0252
05d14     E1 00 00 FF 
05d18     00 5C 06 F6 | 	mov	arg01, ##115200
05d1c     9C FF BF FD | 	call	#__system___setbaud
05d20                 | LR__0252
05d20     3E 6A 26 FC | 	wypin	local01, #62
05d24     1F 02 64 FD | 	waitx	#1
05d28     DC A2 9F FE | 	loc	pa,	#(@LR__0254-@LR__0253)
05d2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d30                 | LR__0253
05d30     40 7C 74 FD | 	testp	#62 wc
05d34     F8 FF 9F 3D |  if_nc	jmp	#LR__0253
05d38                 | LR__0254
05d38     01 2A 06 F6 | 	mov	result1, #1
05d3c     AF F0 03 F6 | 	mov	ptra, fp
05d40     BF 00 A0 FD | 	call	#popregs_
05d44                 | __system___txraw_ret
05d44     2D 00 64 FD | 	ret
05d48                 | 
05d48                 | __system___rxraw
05d48     0D 5A 05 F6 | 	mov	COUNT_, #13
05d4c     B0 00 A0 FD | 	call	#pushregs_
05d50     2E 6B 02 F6 | 	mov	local01, arg01
05d54     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05d58     0C 00 90 5D |  if_ne	jmp	#LR__0255
05d5c     E1 00 00 FF 
05d60     00 5C 06 F6 | 	mov	arg01, ##115200
05d64     54 FF BF FD | 	call	#__system___setbaud
05d68                 | LR__0255
05d68     00 6A 0E F2 | 	cmp	local01, #0 wz
05d6c     18 00 90 AD |  if_e	jmp	#LR__0256
05d70     14 6E 06 FB | 	rdlong	local03, #20
05d74     0A 6E 46 F0 | 	shr	local03, #10
05d78     37 6B 02 FD | 	qmul	local01, local03
05d7c     18 70 62 FD | 	getqx	local04
05d80     1A 72 62 FD | 	getct	local05
05d84     38 73 02 F1 | 	add	local05, local04
05d88                 | LR__0256
05d88     01 74 66 F6 | 	neg	local06, #1
05d8c     00 76 06 F6 | 	mov	local07, #0
05d90     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d94     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05d98     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d9c                 | LR__0257
05d9c     08 78 16 F4 | 	testb	local08, #8 wc
05da0     09 78 76 F4 | 	testbn	local08, #9 andc
05da4     0A 78 46 F0 | 	shr	local08, #10
05da8     01 76 06 C6 |  if_b	mov	local07, #1
05dac     10 00 90 CD |  if_b	jmp	#LR__0258
05db0     40 7E 6C FD | 	testp	#63 wz
05db4     01 76 06 A6 |  if_e	mov	local07, #1
05db8     3F 78 8E AA |  if_e	rdpin	local08, #63
05dbc     04 78 46 A0 |  if_e	shr	local08, #4
05dc0                 | LR__0258
05dc0     00 6C 06 F6 | 	mov	local02, #0
05dc4     00 76 0E F2 | 	cmp	local07, #0 wz
05dc8     01 6C 66 56 |  if_ne	neg	local02, #1
05dcc     00 7A 06 F6 | 	mov	local09, #0
05dd0     00 7C 06 F6 | 	mov	local10, #0
05dd4     00 6A 0E F2 | 	cmp	local01, #0 wz
05dd8     01 7C 66 56 |  if_ne	neg	local10, #1
05ddc     00 7E 06 F6 | 	mov	local11, #0
05de0     00 80 06 F6 | 	mov	local12, #0
05de4     1A 82 62 FD | 	getct	local13
05de8     39 83 82 F1 | 	sub	local13, local05
05dec     00 82 5E F2 | 	cmps	local13, #0 wcz
05df0     01 80 66 C6 |  if_b	neg	local12, #1
05df4     00 80 0E F2 | 	cmp	local12, #0 wz
05df8     01 7E 66 56 |  if_ne	neg	local11, #1
05dfc     3F 7D CA F7 | 	test	local10, local11 wz
05e00     01 7A 66 56 |  if_ne	neg	local09, #1
05e04     3D 6D 4A F5 | 	or	local02, local09 wz
05e08     90 FF 9F AD |  if_e	jmp	#LR__0257
05e0c     00 76 0E F2 | 	cmp	local07, #0 wz
05e10     3C 75 02 56 |  if_ne	mov	local06, local08
05e14     FF 74 06 55 |  if_ne	and	local06, #255
05e18     04 14 06 F1 | 	add	ptr___system__dat__, #4
05e1c     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05e20     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05e24     3A 2B 02 F6 | 	mov	result1, local06
05e28     AF F0 03 F6 | 	mov	ptra, fp
05e2c     BF 00 A0 FD | 	call	#popregs_
05e30                 | __system___rxraw_ret
05e30     2D 00 64 FD | 	ret
05e34                 | 
05e34                 | __system____builtin_memmove
05e34     2E 31 02 F6 | 	mov	_var01, arg01
05e38     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e3c     50 00 90 3D |  if_ae	jmp	#LR__0266
05e40     DC A1 9F FE | 	loc	pa,	#(@LR__0260-@LR__0259)
05e44     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e48                 | LR__0259
05e48     03 60 5E F2 | 	cmps	arg03, #3 wcz
05e4c     18 00 90 ED |  if_be	jmp	#LR__0261
05e50     2F 33 02 FB | 	rdlong	_var02, arg02
05e54     2E 33 62 FC | 	wrlong	_var02, arg01
05e58     04 5C 06 F1 | 	add	arg01, #4
05e5c     04 5E 06 F1 | 	add	arg02, #4
05e60     04 60 86 F1 | 	sub	arg03, #4
05e64     E0 FF 9F FD | 	jmp	#LR__0259
05e68                 | LR__0260
05e68                 | LR__0261
05e68     30 35 0A F6 | 	mov	_var03, arg03 wz
05e6c     4C 00 90 AD |  if_e	jmp	#LR__0272
05e70     A0 A1 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05e74     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e78                 | LR__0262
05e78     1A 09 D8 FC | 	rep	@LR__0265, _var03
05e7c                 | LR__0263
05e7c     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e80     2E 33 42 FC | 	wrbyte	_var02, arg01
05e84     01 5C 06 F1 | 	add	arg01, #1
05e88     01 5E 06 F1 | 	add	arg02, #1
05e8c                 | LR__0264
05e8c                 | LR__0265
05e8c     2C 00 90 FD | 	jmp	#LR__0272
05e90                 | LR__0266
05e90     30 5D 02 F1 | 	add	arg01, arg03
05e94     30 5F 02 F1 | 	add	arg02, arg03
05e98     30 37 0A F6 | 	mov	_var04, arg03 wz
05e9c     1C 00 90 AD |  if_e	jmp	#LR__0271
05ea0     70 A1 9F FE | 	loc	pa,	#(@LR__0269-@LR__0267)
05ea4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ea8                 | LR__0267
05ea8     1B 09 D8 FC | 	rep	@LR__0270, _var04
05eac                 | LR__0268
05eac     01 5C 86 F1 | 	sub	arg01, #1
05eb0     01 5E 86 F1 | 	sub	arg02, #1
05eb4     2F 33 C2 FA | 	rdbyte	_var02, arg02
05eb8     2E 33 42 FC | 	wrbyte	_var02, arg01
05ebc                 | LR__0269
05ebc                 | LR__0270
05ebc                 | LR__0271
05ebc                 | LR__0272
05ebc     18 2B 02 F6 | 	mov	result1, _var01
05ec0                 | __system____builtin_memmove_ret
05ec0     2D 00 64 FD | 	ret
05ec4                 | 
05ec4                 | __system__longmove
05ec4     2E 31 02 F6 | 	mov	_var01, arg01
05ec8     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05ecc     28 00 90 3D |  if_ae	jmp	#LR__0277
05ed0     30 33 0A F6 | 	mov	_var02, arg03 wz
05ed4     54 00 90 AD |  if_e	jmp	#LR__0283
05ed8     38 A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05edc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ee0                 | LR__0273
05ee0     19 09 D8 FC | 	rep	@LR__0276, _var02
05ee4                 | LR__0274
05ee4     2F 35 02 FB | 	rdlong	_var03, arg02
05ee8     2E 35 62 FC | 	wrlong	_var03, arg01
05eec     04 5C 06 F1 | 	add	arg01, #4
05ef0     04 5E 06 F1 | 	add	arg02, #4
05ef4                 | LR__0275
05ef4                 | LR__0276
05ef4     34 00 90 FD | 	jmp	#LR__0283
05ef8                 | LR__0277
05ef8     30 37 02 F6 | 	mov	_var04, arg03
05efc     02 36 66 F0 | 	shl	_var04, #2
05f00     1B 5D 02 F1 | 	add	arg01, _var04
05f04     1B 5F 02 F1 | 	add	arg02, _var04
05f08     30 39 0A F6 | 	mov	_var05, arg03 wz
05f0c     1C 00 90 AD |  if_e	jmp	#LR__0282
05f10     00 A1 9F FE | 	loc	pa,	#(@LR__0280-@LR__0278)
05f14     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f18                 | LR__0278
05f18     1C 09 D8 FC | 	rep	@LR__0281, _var05
05f1c                 | LR__0279
05f1c     04 5C 86 F1 | 	sub	arg01, #4
05f20     04 5E 86 F1 | 	sub	arg02, #4
05f24     2F 35 02 FB | 	rdlong	_var03, arg02
05f28     2E 35 62 FC | 	wrlong	_var03, arg01
05f2c                 | LR__0280
05f2c                 | LR__0281
05f2c                 | LR__0282
05f2c                 | LR__0283
05f2c     18 2B 02 F6 | 	mov	result1, _var01
05f30                 | __system__longmove_ret
05f30     2D 00 64 FD | 	ret
05f34                 | 
05f34                 | __system____topofstack
05f34     00 5A 05 F6 | 	mov	COUNT_, #0
05f38     B0 00 A0 FD | 	call	#pushregs_
05f3c     0C F0 07 F1 | 	add	ptra, #12
05f40     04 5E 05 F1 | 	add	fp, #4
05f44     AF 5C 62 FC | 	wrlong	arg01, fp
05f48     AF 2A 02 F6 | 	mov	result1, fp
05f4c     04 5E 85 F1 | 	sub	fp, #4
05f50     AF F0 03 F6 | 	mov	ptra, fp
05f54     BF 00 A0 FD | 	call	#popregs_
05f58                 | __system____topofstack_ret
05f58     2D 00 64 FD | 	ret
05f5c                 | 
05f5c                 | __system___make_methodptr
05f5c     04 5A 05 F6 | 	mov	COUNT_, #4
05f60     B0 00 A0 FD | 	call	#pushregs_
05f64     2E 6B 02 F6 | 	mov	local01, arg01
05f68     2F 6D 02 F6 | 	mov	local02, arg02
05f6c     08 5C 06 F6 | 	mov	arg01, #8
05f70     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05f74     15 6F 0A F6 | 	mov	local03, result1 wz
05f78     10 00 90 AD |  if_e	jmp	#LR__0284
05f7c     37 6B 62 FC | 	wrlong	local01, local03
05f80     37 71 02 F6 | 	mov	local04, local03
05f84     04 70 06 F1 | 	add	local04, #4
05f88     38 6D 62 FC | 	wrlong	local02, local04
05f8c                 | LR__0284
05f8c     37 2B 02 F6 | 	mov	result1, local03
05f90     AF F0 03 F6 | 	mov	ptra, fp
05f94     BF 00 A0 FD | 	call	#popregs_
05f98                 | __system___make_methodptr_ret
05f98     2D 00 64 FD | 	ret
05f9c                 | 
05f9c                 | __system___lockmem
05f9c     02 5A 05 F6 | 	mov	COUNT_, #2
05fa0     B0 00 A0 FD | 	call	#pushregs_
05fa4     01 2A 62 FD | 	cogid	result1
05fa8     15 6B 02 F6 | 	mov	local01, result1
05fac     00 6B 06 F1 | 	add	local01, #256
05fb0                 | LR__0285
05fb0     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05fb4     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05fb8     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05fbc     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05fc0     35 6D 0A F2 | 	cmp	local02, local01 wz
05fc4     E8 FF 9F 5D |  if_ne	jmp	#LR__0285
05fc8     AF F0 03 F6 | 	mov	ptra, fp
05fcc     BF 00 A0 FD | 	call	#popregs_
05fd0                 | __system___lockmem_ret
05fd0     2D 00 64 FD | 	ret
05fd4                 | 
05fd4                 | __system___string_concat
05fd4     07 5A 05 F6 | 	mov	COUNT_, #7
05fd8     B0 00 A0 FD | 	call	#pushregs_
05fdc     2E 6B 02 F6 | 	mov	local01, arg01
05fe0     2F 6D 02 F6 | 	mov	local02, arg02
05fe4     35 5D 02 F6 | 	mov	arg01, local01
05fe8     00 6E 06 F6 | 	mov	local03, #0
05fec     20 A0 9F FE | 	loc	pa,	#(@LR__0287-@LR__0286)
05ff0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ff4                 | LR__0286
05ff4     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05ff8     01 6E 06 51 |  if_ne	add	local03, #1
05ffc     01 5C 06 51 |  if_ne	add	arg01, #1
06000     F0 FF 9F 5D |  if_ne	jmp	#LR__0286
06004                 | LR__0287
06004     37 73 02 F6 | 	mov	local05, local03
06008     36 5D 02 F6 | 	mov	arg01, local02
0600c     00 6E 06 F6 | 	mov	local03, #0
06010     FC 9F 9F FE | 	loc	pa,	#(@LR__0289-@LR__0288)
06014     93 00 A0 FD | 	call	#FCACHE_LOAD_
06018                 | LR__0288
06018     2E 71 CA FA | 	rdbyte	local04, arg01 wz
0601c     01 6E 06 51 |  if_ne	add	local03, #1
06020     01 5C 06 51 |  if_ne	add	arg01, #1
06024     F0 FF 9F 5D |  if_ne	jmp	#LR__0288
06028                 | LR__0289
06028     37 2B 02 F6 | 	mov	result1, local03
0602c     15 75 02 F6 | 	mov	local06, result1
06030     39 5D 02 F6 | 	mov	arg01, local05
06034     3A 5D 02 F1 | 	add	arg01, local06
06038     01 5C 06 F1 | 	add	arg01, #1
0603c     90 0B B0 FD | 	call	#__system___gc_alloc_managed
06040     15 77 0A F6 | 	mov	local07, result1 wz
06044     28 00 90 AD |  if_e	jmp	#LR__0290
06048     3B 5D 02 F6 | 	mov	arg01, local07
0604c     35 5F 02 F6 | 	mov	arg02, local01
06050     39 61 02 F6 | 	mov	arg03, local05
06054     DC FD BF FD | 	call	#__system____builtin_memmove
06058     3B 5D 02 F6 | 	mov	arg01, local07
0605c     39 5D 02 F1 | 	add	arg01, local05
06060     01 74 06 F1 | 	add	local06, #1
06064     36 5F 02 F6 | 	mov	arg02, local02
06068     3A 61 02 F6 | 	mov	arg03, local06
0606c     C4 FD BF FD | 	call	#__system____builtin_memmove
06070                 | LR__0290
06070     3B 2B 02 F6 | 	mov	result1, local07
06074     AF F0 03 F6 | 	mov	ptra, fp
06078     BF 00 A0 FD | 	call	#popregs_
0607c                 | __system___string_concat_ret
0607c     2D 00 64 FD | 	ret
06080                 | 
06080                 | __system___tx
06080     02 5A 05 F6 | 	mov	COUNT_, #2
06084     B0 00 A0 FD | 	call	#pushregs_
06088     2E 6B 02 F6 | 	mov	local01, arg01
0608c     0A 6A 0E F2 | 	cmp	local01, #10 wz
06090     20 00 90 5D |  if_ne	jmp	#LR__0291
06094     08 14 06 F1 | 	add	ptr___system__dat__, #8
06098     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0609c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
060a0     02 6C CE F7 | 	test	local02, #2 wz
060a4     0C 00 90 AD |  if_e	jmp	#LR__0291
060a8     0D 6C 06 F6 | 	mov	local02, #13
060ac     0D 5C 06 F6 | 	mov	arg01, #13
060b0     4C FC BF FD | 	call	#__system___txraw
060b4                 | LR__0291
060b4     35 5D 02 F6 | 	mov	arg01, local01
060b8     44 FC BF FD | 	call	#__system___txraw
060bc     AF F0 03 F6 | 	mov	ptra, fp
060c0     BF 00 A0 FD | 	call	#popregs_
060c4                 | __system___tx_ret
060c4     2D 00 64 FD | 	ret
060c8                 | 
060c8                 | __system___rx
060c8     02 5A 05 F6 | 	mov	COUNT_, #2
060cc     B0 00 A0 FD | 	call	#pushregs_
060d0                 | LR__0292
060d0     00 5C 06 F6 | 	mov	arg01, #0
060d4     70 FC BF FD | 	call	#__system___rxraw
060d8     15 6B 02 F6 | 	mov	local01, result1
060dc     FF FF 7F FF 
060e0     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
060e4     E8 FF 9F AD |  if_e	jmp	#LR__0292
060e8     0D 6A 0E F2 | 	cmp	local01, #13 wz
060ec     14 00 90 5D |  if_ne	jmp	#LR__0293
060f0     08 14 06 F1 | 	add	ptr___system__dat__, #8
060f4     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
060f8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
060fc     02 6C CE F7 | 	test	local02, #2 wz
06100     0A 6A 06 56 |  if_ne	mov	local01, #10
06104                 | LR__0293
06104     08 14 06 F1 | 	add	ptr___system__dat__, #8
06108     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0610c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06110     01 6C CE F7 | 	test	local02, #1 wz
06114     1C 00 90 AD |  if_e	jmp	#LR__0296
06118     7F 6A 0E F2 | 	cmp	local01, #127 wz
0611c     0C 00 90 5D |  if_ne	jmp	#LR__0294
06120     08 5C 06 F6 | 	mov	arg01, #8
06124     58 FF BF FD | 	call	#__system___tx
06128     08 00 90 FD | 	jmp	#LR__0295
0612c                 | LR__0294
0612c     35 5D 02 F6 | 	mov	arg01, local01
06130     4C FF BF FD | 	call	#__system___tx
06134                 | LR__0295
06134                 | LR__0296
06134     35 2B 02 F6 | 	mov	result1, local01
06138     AF F0 03 F6 | 	mov	ptra, fp
0613c     BF 00 A0 FD | 	call	#popregs_
06140                 | __system___rx_ret
06140     2D 00 64 FD | 	ret
06144                 | 
06144                 | __system___pinread
06144     20 5C CE F7 | 	test	arg01, #32 wz
06148     FF 31 02 56 |  if_ne	mov	_var01, inb
0614c     FE 31 02 A6 |  if_e	mov	_var01, ina
06150     18 2B 02 F6 | 	mov	result1, _var01
06154     2E 2B 42 F0 | 	shr	result1, arg01
06158     06 5C 46 F0 | 	shr	arg01, #6
0615c     2E 2B 42 F7 | 	zerox	result1, arg01
06160                 | __system___pinread_ret
06160     2D 00 64 FD | 	ret
06164                 | 
06164                 | __system___waitms
06164     03 5A 05 F6 | 	mov	COUNT_, #3
06168     B0 00 A0 FD | 	call	#pushregs_
0616c     2E 6B 02 F6 | 	mov	local01, arg01
06170     14 6C 06 FB | 	rdlong	local02, #20
06174     A0 9E 9F FE | 	loc	pa,	#(@LR__0298-@LR__0297)
06178     93 00 A0 FD | 	call	#FCACHE_LOAD_
0617c                 | LR__0297
0617c     01 00 00 FF 
06180     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
06184     1F 6C 62 1D |  if_a	waitx	local02
06188     01 00 00 1F 
0618c     E8 6B 86 11 |  if_a	sub	local01, ##1000
06190     E8 FF 9F 1D |  if_a	jmp	#LR__0297
06194                 | LR__0298
06194     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06198     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
0619c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
061a0     20 00 90 5D |  if_ne	jmp	#LR__0299
061a4     36 0B 03 F6 | 	mov	muldiva_, local02
061a8     01 00 00 FF 
061ac     E8 0D 07 F6 | 	mov	muldivb_, ##1000
061b0     CC 00 A0 FD | 	call	#unsdivide_
061b4     86 6F 02 F6 | 	mov	local03, muldivb_
061b8     0C 14 06 F1 | 	add	ptr___system__dat__, #12
061bc     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
061c0     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
061c4                 | LR__0299
061c4     00 6A 5E F2 | 	cmps	local01, #0 wcz
061c8     37 6B 02 1D |  if_a	qmul	local01, local03
061cc     18 5C 62 1D |  if_a	getqx	arg01
061d0     1F 5C 62 1D |  if_a	waitx	arg01
061d4     AF F0 03 F6 | 	mov	ptra, fp
061d8     BF 00 A0 FD | 	call	#popregs_
061dc                 | __system___waitms_ret
061dc     2D 00 64 FD | 	ret
061e0                 | 
061e0                 | __system___waitus
061e0     02 5A 05 F6 | 	mov	COUNT_, #2
061e4     B0 00 A0 FD | 	call	#pushregs_
061e8     2E 6B 02 F6 | 	mov	local01, arg01
061ec     10 14 06 F1 | 	add	ptr___system__dat__, #16
061f0     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
061f4     10 14 86 F1 | 	sub	ptr___system__dat__, #16
061f8     20 00 90 5D |  if_ne	jmp	#LR__0300
061fc     14 0A 07 FB | 	rdlong	muldiva_, #20
06200     A1 07 00 FF 
06204     40 0C 07 F6 | 	mov	muldivb_, ##1000000
06208     CC 00 A0 FD | 	call	#unsdivide_
0620c     86 6D 02 F6 | 	mov	local02, muldivb_
06210     10 14 06 F1 | 	add	ptr___system__dat__, #16
06214     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06218     10 14 86 F1 | 	sub	ptr___system__dat__, #16
0621c                 | LR__0300
0621c     36 6B 02 FD | 	qmul	local01, local02
06220     18 5C 62 FD | 	getqx	arg01
06224     1F 5C 62 FD | 	waitx	arg01
06228     AF F0 03 F6 | 	mov	ptra, fp
0622c     BF 00 A0 FD | 	call	#popregs_
06230                 | __system___waitus_ret
06230     2D 00 64 FD | 	ret
06234                 | 
06234                 | __system___basic_open
06234     05 5A 05 F6 | 	mov	COUNT_, #5
06238     B0 00 A0 FD | 	call	#pushregs_
0623c     2F 6B 02 F6 | 	mov	local01, arg02
06240     30 6D 02 F6 | 	mov	local02, arg03
06244     31 6F 02 F6 | 	mov	local03, arg04
06248     88 11 B0 FD | 	call	#__system____getftab
0624c     15 71 0A F6 | 	mov	local04, result1 wz
06250     18 00 90 5D |  if_ne	jmp	#LR__0301
06254     03 5D 02 F6 | 	mov	arg01, abortchain
06258     0C 5E 06 F6 | 	mov	arg02, #12
0625c     01 60 06 F6 | 	mov	arg03, #1
06260     F0 00 A0 FD | 	call	#__longjmp
06264     01 2A 66 F6 | 	neg	result1, #1
06268     70 00 90 FD | 	jmp	#LR__0305
0626c                 | LR__0301
0626c     00 6A 0E F2 | 	cmp	local01, #0 wz
06270     48 00 90 AD |  if_e	jmp	#LR__0303
06274     04 5C 06 F6 | 	mov	arg01, #4
06278     54 09 B0 FD | 	call	#__system___gc_alloc_managed
0627c     15 73 0A F6 | 	mov	local05, result1 wz
06280     18 00 90 5D |  if_ne	jmp	#LR__0302
06284     03 5D 02 F6 | 	mov	arg01, abortchain
06288     07 5E 06 F6 | 	mov	arg02, #7
0628c     01 60 06 F6 | 	mov	arg03, #1
06290     F0 00 A0 FD | 	call	#__longjmp
06294     01 2A 66 F6 | 	neg	result1, #1
06298     40 00 90 FD | 	jmp	#LR__0305
0629c                 | LR__0302
0629c     39 6B 62 FC | 	wrlong	local01, local05
062a0     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
062a4     39 5D 02 F6 | 	mov	arg01, local05
062a8     B0 FC BF FD | 	call	#__system___make_methodptr
062ac     18 70 06 F1 | 	add	local04, #24
062b0     38 2B 62 FC | 	wrlong	result1, local04
062b4     18 70 86 F1 | 	sub	local04, #24
062b8     0C 00 90 FD | 	jmp	#LR__0304
062bc                 | LR__0303
062bc     18 70 06 F1 | 	add	local04, #24
062c0     38 6B 62 FC | 	wrlong	local01, local04
062c4     18 70 86 F1 | 	sub	local04, #24
062c8                 | LR__0304
062c8     1C 70 06 F1 | 	add	local04, #28
062cc     38 6D 62 FC | 	wrlong	local02, local04
062d0     04 70 06 F1 | 	add	local04, #4
062d4     38 6F 62 FC | 	wrlong	local03, local04
062d8     00 2A 06 F6 | 	mov	result1, #0
062dc                 | LR__0305
062dc     AF F0 03 F6 | 	mov	ptra, fp
062e0     BF 00 A0 FD | 	call	#popregs_
062e4                 | __system___basic_open_ret
062e4     2D 00 64 FD | 	ret
062e8                 | 
062e8                 | __system___basic_print_char
062e8     05 5A 05 F6 | 	mov	COUNT_, #5
062ec     B0 00 A0 FD | 	call	#pushregs_
062f0     2F 6B 02 F6 | 	mov	local01, arg02
062f4     A0 12 B0 FD | 	call	#__system___gettxfunc
062f8     15 6D 0A F6 | 	mov	local02, result1 wz
062fc     00 2A 06 A6 |  if_e	mov	result1, #0
06300     24 00 90 AD |  if_e	jmp	#LR__0306
06304     36 6F 02 FB | 	rdlong	local03, local02
06308     04 6C 06 F1 | 	add	local02, #4
0630c     36 71 02 FB | 	rdlong	local04, local02
06310     35 5D 02 F6 | 	mov	arg01, local01
06314     07 73 02 F6 | 	mov	local05, objptr
06318     37 0F 02 F6 | 	mov	objptr, local03
0631c     2D 70 62 FD | 	call	local04
06320     39 0F 02 F6 | 	mov	objptr, local05
06324     01 2A 06 F6 | 	mov	result1, #1
06328                 | LR__0306
06328     AF F0 03 F6 | 	mov	ptra, fp
0632c     BF 00 A0 FD | 	call	#popregs_
06330                 | __system___basic_print_char_ret
06330     2D 00 64 FD | 	ret
06334                 | 
06334                 | __system___basic_print_string
06334     03 5A 05 F6 | 	mov	COUNT_, #3
06338     B0 00 A0 FD | 	call	#pushregs_
0633c     2F 6B 02 F6 | 	mov	local01, arg02
06340     30 6D 02 F6 | 	mov	local02, arg03
06344     50 12 B0 FD | 	call	#__system___gettxfunc
06348     15 6F 0A F6 | 	mov	local03, result1 wz
0634c     00 2A 06 A6 |  if_e	mov	result1, #0
06350     1C 00 90 AD |  if_e	jmp	#LR__0307
06354     00 6A 0E F2 | 	cmp	local01, #0 wz
06358     00 2A 06 A6 |  if_e	mov	result1, #0
0635c     10 00 90 AD |  if_e	jmp	#LR__0307
06360     37 5D 02 F6 | 	mov	arg01, local03
06364     36 5F 02 F6 | 	mov	arg02, local02
06368     35 61 02 F6 | 	mov	arg03, local01
0636c     B0 00 B0 FD | 	call	#__system___fmtstr
06370                 | LR__0307
06370     AF F0 03 F6 | 	mov	ptra, fp
06374     BF 00 A0 FD | 	call	#popregs_
06378                 | __system___basic_print_string_ret
06378     2D 00 64 FD | 	ret
0637c                 | 
0637c                 | __system___basic_print_integer
0637c     04 5A 05 F6 | 	mov	COUNT_, #4
06380     B0 00 A0 FD | 	call	#pushregs_
06384     2F 6B 02 F6 | 	mov	local01, arg02
06388     30 6D 02 F6 | 	mov	local02, arg03
0638c     31 6F 02 F6 | 	mov	local03, arg04
06390     04 12 B0 FD | 	call	#__system___gettxfunc
06394     15 71 0A F6 | 	mov	local04, result1 wz
06398     00 2A 06 A6 |  if_e	mov	result1, #0
0639c     14 00 90 AD |  if_e	jmp	#LR__0308
063a0     38 5D 02 F6 | 	mov	arg01, local04
063a4     36 5F 02 F6 | 	mov	arg02, local02
063a8     35 61 02 F6 | 	mov	arg03, local01
063ac     37 63 02 F6 | 	mov	arg04, local03
063b0     60 01 B0 FD | 	call	#__system___fmtnum
063b4                 | LR__0308
063b4     AF F0 03 F6 | 	mov	ptra, fp
063b8     BF 00 A0 FD | 	call	#popregs_
063bc                 | __system___basic_print_integer_ret
063bc     2D 00 64 FD | 	ret
063c0                 | 
063c0                 | __system___fmtchar
063c0     00 5A 05 F6 | 	mov	COUNT_, #0
063c4     B0 00 A0 FD | 	call	#pushregs_
063c8     18 F0 07 F1 | 	add	ptra, #24
063cc     04 5E 05 F1 | 	add	fp, #4
063d0     AF 5C 62 FC | 	wrlong	arg01, fp
063d4     04 5E 05 F1 | 	add	fp, #4
063d8     AF 5E 62 FC | 	wrlong	arg02, fp
063dc     04 5E 05 F1 | 	add	fp, #4
063e0     AF 60 62 FC | 	wrlong	arg03, fp
063e4     04 5E 05 F1 | 	add	fp, #4
063e8     AF 60 42 FC | 	wrbyte	arg03, fp
063ec     01 5E 05 F1 | 	add	fp, #1
063f0     AF 00 48 FC | 	wrbyte	#0, fp
063f4     01 5E 85 F1 | 	sub	fp, #1
063f8     AF 60 02 F6 | 	mov	arg03, fp
063fc     0C 5E 85 F1 | 	sub	fp, #12
06400     AF 5C 02 FB | 	rdlong	arg01, fp
06404     04 5E 05 F1 | 	add	fp, #4
06408     AF 5E 02 FB | 	rdlong	arg02, fp
0640c     08 5E 85 F1 | 	sub	fp, #8
06410     0C 00 B0 FD | 	call	#__system___fmtstr
06414     AF F0 03 F6 | 	mov	ptra, fp
06418     BF 00 A0 FD | 	call	#popregs_
0641c                 | __system___fmtchar_ret
0641c     2D 00 64 FD | 	ret
06420                 | 
06420                 | __system___fmtstr
06420     0E 5A 05 F6 | 	mov	COUNT_, #14
06424     B0 00 A0 FD | 	call	#pushregs_
06428     2E 6B 02 F6 | 	mov	local01, arg01
0642c     2F 6D 02 F6 | 	mov	local02, arg02
06430     30 6F 02 F6 | 	mov	local03, arg03
06434     36 71 02 F6 | 	mov	local04, local02
06438     FF 70 06 F5 | 	and	local04, #255
0643c     37 5D 02 F6 | 	mov	arg01, local03
06440     00 72 06 F6 | 	mov	local05, #0
06444     C8 9B 9F FE | 	loc	pa,	#(@LR__0310-@LR__0309)
06448     93 00 A0 FD | 	call	#FCACHE_LOAD_
0644c                 | LR__0309
0644c     2E 75 CA FA | 	rdbyte	local06, arg01 wz
06450     01 72 06 51 |  if_ne	add	local05, #1
06454     01 5C 06 51 |  if_ne	add	arg01, #1
06458     F0 FF 9F 5D |  if_ne	jmp	#LR__0309
0645c                 | LR__0310
0645c     39 2B 02 F6 | 	mov	result1, local05
06460     15 77 02 F6 | 	mov	local07, result1
06464     00 70 0E F2 | 	cmp	local04, #0 wz
06468     04 00 90 AD |  if_e	jmp	#LR__0311
0646c     38 77 7A F3 | 	fles	local07, local04 wcz
06470                 | LR__0311
06470     35 5D 02 F6 | 	mov	arg01, local01
06474     36 5F 02 F6 | 	mov	arg02, local02
06478     3B 61 02 F6 | 	mov	arg03, local07
0647c     02 62 06 F6 | 	mov	arg04, #2
06480     C8 0F B0 FD | 	call	#__system___fmtpad
06484     15 79 02 F6 | 	mov	local08, result1
06488     00 78 5E F2 | 	cmps	local08, #0 wcz
0648c     3C 2B 02 C6 |  if_b	mov	result1, local08
06490     74 00 90 CD |  if_b	jmp	#LR__0314
06494     00 76 5E F2 | 	cmps	local07, #0 wcz
06498     44 00 90 ED |  if_be	jmp	#LR__0313
0649c     3B 7B 02 F6 | 	mov	local09, local07
064a0                 | LR__0312
064a0     35 7D 02 F6 | 	mov	local10, local01
064a4     3E 7F 02 FB | 	rdlong	local11, local10
064a8     04 7C 06 F1 | 	add	local10, #4
064ac     3E 81 02 FB | 	rdlong	local12, local10
064b0     37 5D C2 FA | 	rdbyte	arg01, local03
064b4     07 83 02 F6 | 	mov	local13, objptr
064b8     3F 0F 02 F6 | 	mov	objptr, local11
064bc     01 6E 06 F1 | 	add	local03, #1
064c0     2D 80 62 FD | 	call	local12
064c4     41 0F 02 F6 | 	mov	objptr, local13
064c8     15 85 02 F6 | 	mov	local14, result1
064cc     00 84 5E F2 | 	cmps	local14, #0 wcz
064d0     42 2B 02 C6 |  if_b	mov	result1, local14
064d4     30 00 90 CD |  if_b	jmp	#LR__0314
064d8     42 79 02 F1 | 	add	local08, local14
064dc     F0 7B 6E FB | 	djnz	local09, #LR__0312
064e0                 | LR__0313
064e0     35 5D 02 F6 | 	mov	arg01, local01
064e4     36 5F 02 F6 | 	mov	arg02, local02
064e8     3B 61 02 F6 | 	mov	arg03, local07
064ec     01 62 06 F6 | 	mov	arg04, #1
064f0     58 0F B0 FD | 	call	#__system___fmtpad
064f4     15 85 02 F6 | 	mov	local14, result1
064f8     00 84 5E F2 | 	cmps	local14, #0 wcz
064fc     42 2B 02 C6 |  if_b	mov	result1, local14
06500     42 79 02 31 |  if_ae	add	local08, local14
06504     3C 2B 02 36 |  if_ae	mov	result1, local08
06508                 | LR__0314
06508     AF F0 03 F6 | 	mov	ptra, fp
0650c     BF 00 A0 FD | 	call	#popregs_
06510                 | __system___fmtstr_ret
06510     2D 00 64 FD | 	ret
06514                 | 
06514                 | __system___fmtnum
06514     07 5A 05 F6 | 	mov	COUNT_, #7
06518     B0 00 A0 FD | 	call	#pushregs_
0651c     78 F0 07 F1 | 	add	ptra, #120
06520     04 5E 05 F1 | 	add	fp, #4
06524     AF 5C 62 FC | 	wrlong	arg01, fp
06528     04 5E 05 F1 | 	add	fp, #4
0652c     AF 5E 62 FC | 	wrlong	arg02, fp
06530     04 5E 05 F1 | 	add	fp, #4
06534     AF 60 62 FC | 	wrlong	arg03, fp
06538     04 5E 05 F1 | 	add	fp, #4
0653c     AF 62 62 FC | 	wrlong	arg04, fp
06540     04 5E 05 F1 | 	add	fp, #4
06544     AF 6A 02 F6 | 	mov	local01, fp
06548     44 5E 05 F1 | 	add	fp, #68
0654c     AF 6A 62 FC | 	wrlong	local01, fp
06550     04 5E 05 F1 | 	add	fp, #4
06554     AF 00 68 FC | 	wrlong	#0, fp
06558     54 5E 85 F1 | 	sub	fp, #84
0655c     AF 6A 02 FB | 	rdlong	local01, fp
06560     10 6A 46 F0 | 	shr	local01, #16
06564     3F 6A 06 F5 | 	and	local01, #63
06568     58 5E 05 F1 | 	add	fp, #88
0656c     AF 6A 62 FC | 	wrlong	local01, fp
06570     58 5E 85 F1 | 	sub	fp, #88
06574     AF 6A 02 FB | 	rdlong	local01, fp
06578     FF 6A 06 F5 | 	and	local01, #255
0657c     5C 5E 05 F1 | 	add	fp, #92
06580     AF 6A 62 FC | 	wrlong	local01, fp
06584     5C 5E 85 F1 | 	sub	fp, #92
06588     AF 6A 02 FB | 	rdlong	local01, fp
0658c     1A 6A 46 F0 | 	shr	local01, #26
06590     03 6A 06 F5 | 	and	local01, #3
06594     60 5E 05 F1 | 	add	fp, #96
06598     AF 6A 62 FC | 	wrlong	local01, fp
0659c     08 5E 85 F1 | 	sub	fp, #8
065a0     AF 6A 02 FB | 	rdlong	local01, fp
065a4     60 5E 85 F1 | 	sub	fp, #96
065a8     00 6A 5E F2 | 	cmps	local01, #0 wcz
065ac     14 00 90 ED |  if_be	jmp	#LR__0315
065b0     60 5E 05 F1 | 	add	fp, #96
065b4     AF 6A 02 FB | 	rdlong	local01, fp
065b8     01 6A 86 F1 | 	sub	local01, #1
065bc     AF 6A 62 FC | 	wrlong	local01, fp
065c0     60 5E 85 F1 | 	sub	fp, #96
065c4                 | LR__0315
065c4     64 5E 05 F1 | 	add	fp, #100
065c8     AF 6C 02 FB | 	rdlong	local02, fp
065cc     64 5E 85 F1 | 	sub	fp, #100
065d0     40 6C 5E F2 | 	cmps	local02, #64 wcz
065d4     14 00 90 1D |  if_a	jmp	#LR__0316
065d8     64 5E 05 F1 | 	add	fp, #100
065dc     AF 6E 02 FB | 	rdlong	local03, fp
065e0     64 5E 85 F1 | 	sub	fp, #100
065e4     37 71 0A F6 | 	mov	local04, local03 wz
065e8     0C 00 90 5D |  if_ne	jmp	#LR__0317
065ec                 | LR__0316
065ec     64 5E 05 F1 | 	add	fp, #100
065f0     AF 80 68 FC | 	wrlong	#64, fp
065f4     64 5E 85 F1 | 	sub	fp, #100
065f8                 | LR__0317
065f8     68 5E 05 F1 | 	add	fp, #104
065fc     AF 6A 02 FB | 	rdlong	local01, fp
06600     68 5E 85 F1 | 	sub	fp, #104
06604     03 6A 0E F2 | 	cmp	local01, #3 wz
06608     10 00 90 5D |  if_ne	jmp	#LR__0318
0660c     68 5E 05 F1 | 	add	fp, #104
06610     AF 00 68 FC | 	wrlong	#0, fp
06614     68 5E 85 F1 | 	sub	fp, #104
06618     30 00 90 FD | 	jmp	#LR__0320
0661c                 | LR__0318
0661c     0C 5E 05 F1 | 	add	fp, #12
06620     AF 6A 02 FB | 	rdlong	local01, fp
06624     0C 5E 85 F1 | 	sub	fp, #12
06628     00 6A 5E F2 | 	cmps	local01, #0 wcz
0662c     1C 00 90 3D |  if_ae	jmp	#LR__0319
06630     68 5E 05 F1 | 	add	fp, #104
06634     AF 08 68 FC | 	wrlong	#4, fp
06638     5C 5E 85 F1 | 	sub	fp, #92
0663c     AF 6A 02 FB | 	rdlong	local01, fp
06640     35 6B 62 F6 | 	neg	local01, local01
06644     AF 6A 62 FC | 	wrlong	local01, fp
06648     0C 5E 85 F1 | 	sub	fp, #12
0664c                 | LR__0319
0664c                 | LR__0320
0664c     68 5E 05 F1 | 	add	fp, #104
06650     AF 6A 0A FB | 	rdlong	local01, fp wz
06654     68 5E 85 F1 | 	sub	fp, #104
06658     EC 00 90 AD |  if_e	jmp	#LR__0327
0665c     5C 5E 05 F1 | 	add	fp, #92
06660     AF 70 02 FB | 	rdlong	local04, fp
06664     01 70 06 F1 | 	add	local04, #1
06668     AF 70 62 FC | 	wrlong	local04, fp
0666c     04 5E 05 F1 | 	add	fp, #4
06670     AF 6A 02 FB | 	rdlong	local01, fp
06674     04 5E 05 F1 | 	add	fp, #4
06678     AF 70 02 FB | 	rdlong	local04, fp
0667c     64 5E 85 F1 | 	sub	fp, #100
06680     38 6B 0A F2 | 	cmp	local01, local04 wz
06684     3C 00 90 5D |  if_ne	jmp	#LR__0322
06688     60 5E 05 F1 | 	add	fp, #96
0668c     AF 70 02 FB | 	rdlong	local04, fp
06690     01 70 86 F1 | 	sub	local04, #1
06694     AF 70 62 FC | 	wrlong	local04, fp
06698     AF 6A 0A FB | 	rdlong	local01, fp wz
0669c     60 5E 85 F1 | 	sub	fp, #96
066a0     20 00 90 5D |  if_ne	jmp	#LR__0321
066a4     04 5E 05 F1 | 	add	fp, #4
066a8     AF 5C 02 FB | 	rdlong	arg01, fp
066ac     04 5E 05 F1 | 	add	fp, #4
066b0     AF 5E 02 FB | 	rdlong	arg02, fp
066b4     08 5E 85 F1 | 	sub	fp, #8
066b8     23 60 06 F6 | 	mov	arg03, #35
066bc     00 FD BF FD | 	call	#__system___fmtchar
066c0     70 01 90 FD | 	jmp	#LR__0332
066c4                 | LR__0321
066c4                 | LR__0322
066c4     68 5E 05 F1 | 	add	fp, #104
066c8     AF 6A 02 FB | 	rdlong	local01, fp
066cc     68 5E 85 F1 | 	sub	fp, #104
066d0     02 6A 0E F2 | 	cmp	local01, #2 wz
066d4     20 00 90 5D |  if_ne	jmp	#LR__0323
066d8     58 5E 05 F1 | 	add	fp, #88
066dc     AF 6A 02 FB | 	rdlong	local01, fp
066e0     35 71 02 F6 | 	mov	local04, local01
066e4     01 70 06 F1 | 	add	local04, #1
066e8     AF 70 62 FC | 	wrlong	local04, fp
066ec     58 5E 85 F1 | 	sub	fp, #88
066f0     35 41 48 FC | 	wrbyte	#32, local01
066f4     50 00 90 FD | 	jmp	#LR__0326
066f8                 | LR__0323
066f8     68 5E 05 F1 | 	add	fp, #104
066fc     AF 6A 02 FB | 	rdlong	local01, fp
06700     68 5E 85 F1 | 	sub	fp, #104
06704     04 6A 0E F2 | 	cmp	local01, #4 wz
06708     20 00 90 5D |  if_ne	jmp	#LR__0324
0670c     58 5E 05 F1 | 	add	fp, #88
06710     AF 6A 02 FB | 	rdlong	local01, fp
06714     35 71 02 F6 | 	mov	local04, local01
06718     01 70 06 F1 | 	add	local04, #1
0671c     AF 70 62 FC | 	wrlong	local04, fp
06720     58 5E 85 F1 | 	sub	fp, #88
06724     35 5B 48 FC | 	wrbyte	#45, local01
06728     1C 00 90 FD | 	jmp	#LR__0325
0672c                 | LR__0324
0672c     58 5E 05 F1 | 	add	fp, #88
06730     AF 6A 02 FB | 	rdlong	local01, fp
06734     35 71 02 F6 | 	mov	local04, local01
06738     01 70 06 F1 | 	add	local04, #1
0673c     AF 70 62 FC | 	wrlong	local04, fp
06740     58 5E 85 F1 | 	sub	fp, #88
06744     35 57 48 FC | 	wrbyte	#43, local01
06748                 | LR__0325
06748                 | LR__0326
06748                 | LR__0327
06748     58 5E 05 F1 | 	add	fp, #88
0674c     AF 5C 02 FB | 	rdlong	arg01, fp
06750     4C 5E 85 F1 | 	sub	fp, #76
06754     AF 5E 02 FB | 	rdlong	arg02, fp
06758     04 5E 05 F1 | 	add	fp, #4
0675c     AF 60 02 FB | 	rdlong	arg03, fp
06760     50 5E 05 F1 | 	add	fp, #80
06764     AF 62 02 FB | 	rdlong	arg04, fp
06768     00 72 06 F6 | 	mov	local05, #0
0676c     58 5E 85 F1 | 	sub	fp, #88
06770     AF 74 02 FB | 	rdlong	local06, fp
06774     08 5E 85 F1 | 	sub	fp, #8
06778     1D 74 2E F4 | 	testbn	local06, #29 wz
0677c     01 72 06 56 |  if_ne	mov	local05, #1
06780     39 65 02 F6 | 	mov	arg05, local05
06784     84 0D B0 FD | 	call	#__system___uitoa
06788     15 77 02 F6 | 	mov	local07, result1
0678c     5C 5E 05 F1 | 	add	fp, #92
06790     AF 6A 02 FB | 	rdlong	local01, fp
06794     3B 6B 02 F1 | 	add	local01, local07
06798     AF 6A 62 FC | 	wrlong	local01, fp
0679c     08 5E 05 F1 | 	add	fp, #8
067a0     AF 70 02 FB | 	rdlong	local04, fp
067a4     64 5E 85 F1 | 	sub	fp, #100
067a8     38 6B 5A F2 | 	cmps	local01, local04 wcz
067ac     64 00 90 ED |  if_be	jmp	#LR__0331
067b0     8C 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
067b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
067b8                 | LR__0328
067b8     64 5E 05 F1 | 	add	fp, #100
067bc     AF 6A 02 FB | 	rdlong	local01, fp
067c0     35 71 02 F6 | 	mov	local04, local01
067c4     01 70 86 F1 | 	sub	local04, #1
067c8     AF 70 62 FC | 	wrlong	local04, fp
067cc     64 5E 85 F1 | 	sub	fp, #100
067d0     00 6A 5E F2 | 	cmps	local01, #0 wcz
067d4     20 00 90 ED |  if_be	jmp	#LR__0330
067d8     58 5E 05 F1 | 	add	fp, #88
067dc     AF 6A 02 FB | 	rdlong	local01, fp
067e0     35 71 02 F6 | 	mov	local04, local01
067e4     01 70 06 F1 | 	add	local04, #1
067e8     AF 70 62 FC | 	wrlong	local04, fp
067ec     58 5E 85 F1 | 	sub	fp, #88
067f0     35 47 48 FC | 	wrbyte	#35, local01
067f4     C0 FF 9F FD | 	jmp	#LR__0328
067f8                 | LR__0329
067f8                 | LR__0330
067f8     58 5E 05 F1 | 	add	fp, #88
067fc     AF 6A 02 FB | 	rdlong	local01, fp
06800     35 71 02 F6 | 	mov	local04, local01
06804     01 70 06 F1 | 	add	local04, #1
06808     AF 70 62 FC | 	wrlong	local04, fp
0680c     58 5E 85 F1 | 	sub	fp, #88
06810     35 01 48 FC | 	wrbyte	#0, local01
06814                 | LR__0331
06814     14 5E 05 F1 | 	add	fp, #20
06818     AF 60 02 F6 | 	mov	arg03, fp
0681c     10 5E 85 F1 | 	sub	fp, #16
06820     AF 5C 02 FB | 	rdlong	arg01, fp
06824     04 5E 05 F1 | 	add	fp, #4
06828     AF 5E 02 FB | 	rdlong	arg02, fp
0682c     08 5E 85 F1 | 	sub	fp, #8
06830     EC FB BF FD | 	call	#__system___fmtstr
06834                 | LR__0332
06834     AF F0 03 F6 | 	mov	ptra, fp
06838     BF 00 A0 FD | 	call	#popregs_
0683c                 | __system___fmtnum_ret
0683c     2D 00 64 FD | 	ret
06840                 | 
06840                 | __system__String_S
06840     06 5A 05 F6 | 	mov	COUNT_, #6
06844     B0 00 A0 FD | 	call	#pushregs_
06848     2E 6B 02 F6 | 	mov	local01, arg01
0684c     2F 6D 02 F6 | 	mov	local02, arg02
06850     36 5D 02 F6 | 	mov	arg01, local02
06854     00 6E 06 F6 | 	mov	local03, #0
06858     B4 97 9F FE | 	loc	pa,	#(@LR__0334-@LR__0333)
0685c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06860                 | LR__0333
06860     2E 71 CA FA | 	rdbyte	local04, arg01 wz
06864     01 6E 06 51 |  if_ne	add	local03, #1
06868     01 5C 06 51 |  if_ne	add	arg01, #1
0686c     F0 FF 9F 5D |  if_ne	jmp	#LR__0333
06870                 | LR__0334
06870     37 2B 0A F6 | 	mov	result1, local03 wz
06874     40 00 00 AF 
06878     4A 2B 06 A6 |  if_e	mov	result1, ##@LR__0451
0687c     50 00 90 AD |  if_e	jmp	#LR__0336
06880     00 6A 5E F2 | 	cmps	local01, #0 wcz
06884     40 00 00 EF 
06888     4B 2B 06 E6 |  if_be	mov	result1, ##@LR__0452
0688c     40 00 90 ED |  if_be	jmp	#LR__0336
06890     35 73 02 F6 | 	mov	local05, local01
06894     01 72 06 F1 | 	add	local05, #1
06898     39 5D 02 F6 | 	mov	arg01, local05
0689c     01 5C 06 F1 | 	add	arg01, #1
068a0     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
068a4     15 75 0A F6 | 	mov	local06, result1 wz
068a8     20 00 90 AD |  if_e	jmp	#LR__0335
068ac     36 5F C2 FA | 	rdbyte	arg02, local02
068b0     3A 5D 02 F6 | 	mov	arg01, local06
068b4     35 61 02 F6 | 	mov	arg03, local01
068b8     A0 00 A0 FD | 	call	#\builtin_bytefill_
068bc     3A 73 02 F1 | 	add	local05, local06
068c0     39 01 48 FC | 	wrbyte	#0, local05
068c4     3A 2B 02 F6 | 	mov	result1, local06
068c8     04 00 90 FD | 	jmp	#LR__0336
068cc                 | LR__0335
068cc     3A 2B 02 F6 | 	mov	result1, local06
068d0                 | LR__0336
068d0     AF F0 03 F6 | 	mov	ptra, fp
068d4     BF 00 A0 FD | 	call	#popregs_
068d8                 | __system__String_S_ret
068d8     2D 00 64 FD | 	ret
068dc                 | 
068dc                 | __system___gc_ptrs
068dc     0A 5A 05 F6 | 	mov	COUNT_, #10
068e0     B0 00 A0 FD | 	call	#pushregs_
068e4     02 6B 02 F6 | 	mov	local01, __heap_ptr
068e8     35 6D 02 F6 | 	mov	local02, local01
068ec     07 00 00 FF 
068f0     F8 6D 06 F1 | 	add	local02, ##4088
068f4     35 6F 0A FB | 	rdlong	local03, local01 wz
068f8     74 00 90 5D |  if_ne	jmp	#LR__0337
068fc     36 71 02 F6 | 	mov	local04, local02
06900     35 71 82 F1 | 	sub	local04, local01
06904     35 03 58 FC | 	wrword	#1, local01
06908     35 73 02 F6 | 	mov	local05, local01
0690c     02 72 06 F1 | 	add	local05, #2
06910     36 00 80 FF 
06914     39 21 59 FC | 	wrword	##27792, local05
06918     35 75 02 F6 | 	mov	local06, local01
0691c     04 74 06 F1 | 	add	local06, #4
06920     3A 01 58 FC | 	wrword	#0, local06
06924     35 77 02 F6 | 	mov	local07, local01
06928     06 76 06 F1 | 	add	local07, #6
0692c     3B 03 58 FC | 	wrword	#1, local07
06930     10 6A 06 F1 | 	add	local01, #16
06934     38 6F 52 F6 | 	abs	local03, local04 wc
06938     04 6E 46 F0 | 	shr	local03, #4
0693c     37 6F 62 C6 |  if_b	neg	local03, local03
06940     35 6F 52 FC | 	wrword	local03, local01
06944     35 79 02 F6 | 	mov	local08, local01
06948     02 78 06 F1 | 	add	local08, #2
0694c     36 00 80 FF 
06950     3C 1F 59 FC | 	wrword	##27791, local08
06954     35 7B 02 F6 | 	mov	local09, local01
06958     04 7A 06 F1 | 	add	local09, #4
0695c     3D 01 58 FC | 	wrword	#0, local09
06960     35 7D 02 F6 | 	mov	local10, local01
06964     06 7C 06 F1 | 	add	local10, #6
06968     3E 01 58 FC | 	wrword	#0, local10
0696c     10 6A 86 F1 | 	sub	local01, #16
06970                 | LR__0337
06970     36 2D 02 F6 | 	mov	result2, local02
06974     35 2B 02 F6 | 	mov	result1, local01
06978     AF F0 03 F6 | 	mov	ptra, fp
0697c     BF 00 A0 FD | 	call	#popregs_
06980                 | __system___gc_ptrs_ret
06980     2D 00 64 FD | 	ret
06984                 | 
06984                 | __system___gc_nextBlockPtr
06984     02 5A 05 F6 | 	mov	COUNT_, #2
06988     B0 00 A0 FD | 	call	#pushregs_
0698c     2E 6B 02 F6 | 	mov	local01, arg01
06990     35 6D EA FA | 	rdword	local02, local01 wz
06994     10 00 90 5D |  if_ne	jmp	#LR__0338
06998     40 00 00 FF 
0699c     4C 5D 06 F6 | 	mov	arg01, ##@LR__0453
069a0     F8 01 B0 FD | 	call	#__system___gc_errmsg
069a4     0C 00 90 FD | 	jmp	#LR__0339
069a8                 | LR__0338
069a8     04 6C 66 F0 | 	shl	local02, #4
069ac     35 2B 02 F6 | 	mov	result1, local01
069b0     36 2B 02 F1 | 	add	result1, local02
069b4                 | LR__0339
069b4     AF F0 03 F6 | 	mov	ptra, fp
069b8     BF 00 A0 FD | 	call	#popregs_
069bc                 | __system___gc_nextBlockPtr_ret
069bc     2D 00 64 FD | 	ret
069c0                 | 
069c0                 | __system___gc_tryalloc
069c0     1B 5A 05 F6 | 	mov	COUNT_, #27
069c4     B0 00 A0 FD | 	call	#pushregs_
069c8     2E 6B 02 F6 | 	mov	local01, arg01
069cc     2F 6D 02 F6 | 	mov	local02, arg02
069d0     08 FF BF FD | 	call	#__system___gc_ptrs
069d4     15 6F 02 F6 | 	mov	local03, result1
069d8     16 71 02 F6 | 	mov	local04, result2
069dc     37 73 02 F6 | 	mov	local05, local03
069e0     00 74 06 F6 | 	mov	local06, #0
069e4     70 96 9F FE | 	loc	pa,	#(@LR__0341-@LR__0340)
069e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
069ec                 | LR__0340
069ec     39 77 02 F6 | 	mov	local07, local05
069f0     06 72 06 F1 | 	add	local05, #6
069f4     39 79 02 F6 | 	mov	local08, local05
069f8     37 7B 02 F6 | 	mov	local09, local03
069fc     3C 7D E2 FA | 	rdword	local10, local08
06a00     3D 5D 02 F6 | 	mov	arg01, local09
06a04     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a08     00 2A 06 A6 |  if_e	mov	result1, #0
06a0c     04 5E 66 50 |  if_ne	shl	arg02, #4
06a10     2F 5D 02 51 |  if_ne	add	arg01, arg02
06a14     2E 2B 02 56 |  if_ne	mov	result1, arg01
06a18     15 7F 02 F6 | 	mov	local11, result1
06a1c     3F 73 0A F6 | 	mov	local05, local11 wz
06a20     39 7B 02 56 |  if_ne	mov	local09, local05
06a24     3D 81 02 56 |  if_ne	mov	local12, local09
06a28     40 75 E2 5A |  if_ne	rdword	local06, local12
06a2c     00 72 0E F2 | 	cmp	local05, #0 wz
06a30     10 00 90 AD |  if_e	jmp	#LR__0342
06a34     38 73 5A F2 | 	cmps	local05, local04 wcz
06a38     08 00 90 3D |  if_ae	jmp	#LR__0342
06a3c     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06a40     A8 FF 9F 1D |  if_a	jmp	#LR__0340
06a44                 | LR__0341
06a44                 | LR__0342
06a44     00 72 0E F2 | 	cmp	local05, #0 wz
06a48     39 2B 02 A6 |  if_e	mov	result1, local05
06a4c     40 01 90 AD |  if_e	jmp	#LR__0345
06a50     39 83 02 F6 | 	mov	local13, local05
06a54     06 82 06 F1 | 	add	local13, #6
06a58     41 85 E2 FA | 	rdword	local14, local13
06a5c     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06a60     CC 00 90 3D |  if_ae	jmp	#LR__0344
06a64     39 87 02 F6 | 	mov	local15, local05
06a68     43 6B 52 FC | 	wrword	local01, local15
06a6c     35 89 02 F6 | 	mov	local16, local01
06a70     04 88 66 F0 | 	shl	local16, #4
06a74     39 8B 02 F6 | 	mov	local17, local05
06a78     44 8B 02 F1 | 	add	local17, local16
06a7c     3A 8D 02 F6 | 	mov	local18, local06
06a80     35 8D 82 F1 | 	sub	local18, local01
06a84     45 8F 02 F6 | 	mov	local19, local17
06a88     47 8D 52 FC | 	wrword	local18, local19
06a8c     45 91 02 F6 | 	mov	local20, local17
06a90     02 90 06 F1 | 	add	local20, #2
06a94     36 00 80 FF 
06a98     48 1F 59 FC | 	wrword	##27791, local20
06a9c     45 93 02 F6 | 	mov	local21, local17
06aa0     04 92 06 F1 | 	add	local21, #4
06aa4     39 5F 0A F6 | 	mov	arg02, local05 wz
06aa8     00 2A 06 A6 |  if_e	mov	result1, #0
06aac     37 5F 82 51 |  if_ne	sub	arg02, local03
06ab0     04 5E 46 50 |  if_ne	shr	arg02, #4
06ab4     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ab8     49 2B 52 FC | 	wrword	result1, local21
06abc     45 95 02 F6 | 	mov	local22, local17
06ac0     41 7B E2 FA | 	rdword	local09, local13
06ac4     06 94 06 F1 | 	add	local22, #6
06ac8     4A 7B 52 FC | 	wrword	local09, local22
06acc     45 97 02 F6 | 	mov	local23, local17
06ad0     4B 5F 0A F6 | 	mov	arg02, local23 wz
06ad4     00 2A 06 A6 |  if_e	mov	result1, #0
06ad8     37 5F 82 51 |  if_ne	sub	arg02, local03
06adc     04 5E 46 50 |  if_ne	shr	arg02, #4
06ae0     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ae4     15 85 02 F6 | 	mov	local14, result1
06ae8     45 5D 02 F6 | 	mov	arg01, local17
06aec     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06af0     15 99 0A F6 | 	mov	local24, result1 wz
06af4     38 00 90 AD |  if_e	jmp	#LR__0343
06af8     38 99 5A F2 | 	cmps	local24, local04 wcz
06afc     30 00 90 3D |  if_ae	jmp	#LR__0343
06b00     4C 9B 02 F6 | 	mov	local25, local24
06b04     04 9A 06 F1 | 	add	local25, #4
06b08     37 7B 02 F6 | 	mov	local09, local03
06b0c     4B 7D 02 F6 | 	mov	local10, local23
06b10     3D 5D 02 F6 | 	mov	arg01, local09
06b14     3E 5F 0A F6 | 	mov	arg02, local10 wz
06b18     00 2A 06 A6 |  if_e	mov	result1, #0
06b1c     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06b20     04 5E 46 50 |  if_ne	shr	arg02, #4
06b24     2F 2B 02 56 |  if_ne	mov	result1, arg02
06b28     15 7F 02 F6 | 	mov	local11, result1
06b2c     4D 7F 52 FC | 	wrword	local11, local25
06b30                 | LR__0343
06b30                 | LR__0344
06b30     06 76 06 F1 | 	add	local07, #6
06b34     3B 85 52 FC | 	wrword	local14, local07
06b38     36 00 00 FF 
06b3c     80 7A 06 F6 | 	mov	local09, ##27776
06b40     36 7B 42 F5 | 	or	local09, local02
06b44     39 9D 02 F6 | 	mov	local26, local05
06b48     02 9C 06 F1 | 	add	local26, #2
06b4c     01 2A 62 FD | 	cogid	result1
06b50     15 7B 42 F5 | 	or	local09, result1
06b54     4E 7B 52 FC | 	wrword	local09, local26
06b58     37 9F 02 F6 | 	mov	local27, local03
06b5c     08 9E 06 F1 | 	add	local27, #8
06b60     4F 7B E2 FA | 	rdword	local09, local27
06b64     41 7B 52 FC | 	wrword	local09, local13
06b68     39 5F 0A F6 | 	mov	arg02, local05 wz
06b6c     00 2A 06 A6 |  if_e	mov	result1, #0
06b70     37 5F 82 51 |  if_ne	sub	arg02, local03
06b74     04 5E 46 50 |  if_ne	shr	arg02, #4
06b78     2F 2B 02 56 |  if_ne	mov	result1, arg02
06b7c     4F 2B 52 FC | 	wrword	result1, local27
06b80     08 72 06 F1 | 	add	local05, #8
06b84     39 2B 02 F6 | 	mov	result1, local05
06b88     00 C0 31 FF 
06b8c     00 2A 46 F5 | 	or	result1, ##1669332992
06b90                 | LR__0345
06b90     AF F0 03 F6 | 	mov	ptra, fp
06b94     BF 00 A0 FD | 	call	#popregs_
06b98                 | __system___gc_tryalloc_ret
06b98     2D 00 64 FD | 	ret
06b9c                 | 
06b9c                 | __system___gc_errmsg
06b9c     02 5A 05 F6 | 	mov	COUNT_, #2
06ba0     B0 00 A0 FD | 	call	#pushregs_
06ba4     2E 6B 02 F6 | 	mov	local01, arg01
06ba8                 | LR__0346
06ba8     35 6D CA FA | 	rdbyte	local02, local01 wz
06bac     01 6A 06 F1 | 	add	local01, #1
06bb0     0C 00 90 AD |  if_e	jmp	#LR__0347
06bb4     36 5D 02 F6 | 	mov	arg01, local02
06bb8     C4 F4 BF FD | 	call	#__system___tx
06bbc     E8 FF 9F FD | 	jmp	#LR__0346
06bc0                 | LR__0347
06bc0     00 2A 06 F6 | 	mov	result1, #0
06bc4     AF F0 03 F6 | 	mov	ptra, fp
06bc8     BF 00 A0 FD | 	call	#popregs_
06bcc                 | __system___gc_errmsg_ret
06bcc     2D 00 64 FD | 	ret
06bd0                 | 
06bd0                 | __system___gc_alloc_managed
06bd0     02 5A 05 F6 | 	mov	COUNT_, #2
06bd4     B0 00 A0 FD | 	call	#pushregs_
06bd8     2E 6B 02 F6 | 	mov	local01, arg01
06bdc     00 5E 06 F6 | 	mov	arg02, #0
06be0     30 00 B0 FD | 	call	#__system___gc_doalloc
06be4     15 6D 0A F6 | 	mov	local02, result1 wz
06be8     18 00 90 5D |  if_ne	jmp	#LR__0348
06bec     00 6A 5E F2 | 	cmps	local01, #0 wcz
06bf0     10 00 90 ED |  if_be	jmp	#LR__0348
06bf4     40 00 00 FF 
06bf8     68 5D 06 F6 | 	mov	arg01, ##@LR__0454
06bfc     9C FF BF FD | 	call	#__system___gc_errmsg
06c00     04 00 90 FD | 	jmp	#LR__0349
06c04                 | LR__0348
06c04     36 2B 02 F6 | 	mov	result1, local02
06c08                 | LR__0349
06c08     AF F0 03 F6 | 	mov	ptra, fp
06c0c     BF 00 A0 FD | 	call	#popregs_
06c10                 | __system___gc_alloc_managed_ret
06c10     2D 00 64 FD | 	ret
06c14                 | 
06c14                 | __system___gc_doalloc
06c14     07 5A 05 F6 | 	mov	COUNT_, #7
06c18     B0 00 A0 FD | 	call	#pushregs_
06c1c     2E 6B 0A F6 | 	mov	local01, arg01 wz
06c20     2F 6D 02 F6 | 	mov	local02, arg02
06c24     00 2A 06 A6 |  if_e	mov	result1, #0
06c28     8C 00 90 AD |  if_e	jmp	#LR__0357
06c2c     17 6A 06 F1 | 	add	local01, #23
06c30     0F 6A 26 F5 | 	andn	local01, #15
06c34     04 6A 46 F0 | 	shr	local01, #4
06c38     14 14 06 F1 | 	add	ptr___system__dat__, #20
06c3c     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06c40     37 5D 02 F6 | 	mov	arg01, local03
06c44     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06c48     50 F3 BF FD | 	call	#__system___lockmem
06c4c     35 5D 02 F6 | 	mov	arg01, local01
06c50     36 5F 02 F6 | 	mov	arg02, local02
06c54     68 FD BF FD | 	call	#__system___gc_tryalloc
06c58     15 71 0A F6 | 	mov	local04, result1 wz
06c5c     14 00 90 5D |  if_ne	jmp	#LR__0350
06c60     10 03 B0 FD | 	call	#__system___gc_docollect
06c64     35 5D 02 F6 | 	mov	arg01, local01
06c68     36 5F 02 F6 | 	mov	arg02, local02
06c6c     50 FD BF FD | 	call	#__system___gc_tryalloc
06c70     15 71 02 F6 | 	mov	local04, result1
06c74                 | LR__0350
06c74     37 01 68 FC | 	wrlong	#0, local03
06c78     00 70 0E F2 | 	cmp	local04, #0 wz
06c7c     34 00 90 AD |  if_e	jmp	#LR__0356
06c80     04 6A 66 F0 | 	shl	local01, #4
06c84     08 6A 86 F1 | 	sub	local01, #8
06c88     35 73 52 F6 | 	abs	local05, local01 wc
06c8c     02 72 46 F0 | 	shr	local05, #2
06c90     39 73 62 C6 |  if_b	neg	local05, local05
06c94     39 75 0A F6 | 	mov	local06, local05 wz
06c98     38 77 02 F6 | 	mov	local07, local04
06c9c     14 00 90 AD |  if_e	jmp	#LR__0355
06ca0     68 93 9F FE | 	loc	pa,	#(@LR__0353-@LR__0351)
06ca4     93 00 A0 FD | 	call	#FCACHE_LOAD_
06ca8                 | LR__0351
06ca8     3A 05 D8 FC | 	rep	@LR__0354, local06
06cac                 | LR__0352
06cac     3B 01 68 FC | 	wrlong	#0, local07
06cb0     04 76 06 F1 | 	add	local07, #4
06cb4                 | LR__0353
06cb4                 | LR__0354
06cb4                 | LR__0355
06cb4                 | LR__0356
06cb4     38 2B 02 F6 | 	mov	result1, local04
06cb8                 | LR__0357
06cb8     AF F0 03 F6 | 	mov	ptra, fp
06cbc     BF 00 A0 FD | 	call	#popregs_
06cc0                 | __system___gc_doalloc_ret
06cc0     2D 00 64 FD | 	ret
06cc4                 | 
06cc4                 | __system___gc_isvalidptr
06cc4     30 31 02 F6 | 	mov	_var01, arg03
06cc8     18 33 02 F6 | 	mov	_var02, _var01
06ccc     00 F8 7F FF 
06cd0     00 32 06 F5 | 	and	_var02, ##-1048576
06cd4     00 C0 31 FF 
06cd8     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06cdc     00 2A 06 56 |  if_ne	mov	result1, #0
06ce0     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06ce4     08 30 86 F1 | 	sub	_var01, #8
06ce8     18 35 02 F6 | 	mov	_var03, _var01
06cec     00 F8 7F FF 
06cf0     00 34 26 F5 | 	andn	_var03, ##-1048576
06cf4     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06cf8     08 00 90 CD |  if_b	jmp	#LR__0358
06cfc     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06d00     08 00 90 CD |  if_b	jmp	#LR__0359
06d04                 | LR__0358
06d04     00 2A 06 F6 | 	mov	result1, #0
06d08     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06d0c                 | LR__0359
06d0c     1A 33 02 F6 | 	mov	_var02, _var03
06d10     2E 33 62 F5 | 	xor	_var02, arg01
06d14     0F 32 0E F5 | 	and	_var02, #15 wz
06d18     00 2A 06 56 |  if_ne	mov	result1, #0
06d1c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06d20     1A 37 02 F6 | 	mov	_var04, _var03
06d24     02 36 06 F1 | 	add	_var04, #2
06d28     1B 33 E2 FA | 	rdword	_var02, _var04
06d2c     7F 00 00 FF 
06d30     C0 33 06 F5 | 	and	_var02, ##65472
06d34     36 00 00 FF 
06d38     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06d3c     00 2A 06 56 |  if_ne	mov	result1, #0
06d40     1A 2B 02 A6 |  if_e	mov	result1, _var03
06d44                 | __system___gc_isvalidptr_ret
06d44     2D 00 64 FD | 	ret
06d48                 | 
06d48                 | __system___gc_dofree
06d48     1A 5A 05 F6 | 	mov	COUNT_, #26
06d4c     B0 00 A0 FD | 	call	#pushregs_
06d50     2E 6B 02 F6 | 	mov	local01, arg01
06d54     84 FB BF FD | 	call	#__system___gc_ptrs
06d58     16 6D 02 F6 | 	mov	local02, result2
06d5c     15 6F 02 F6 | 	mov	local03, result1
06d60     35 71 02 F6 | 	mov	local04, local01
06d64     02 70 06 F1 | 	add	local04, #2
06d68     36 00 80 FF 
06d6c     38 1F 59 FC | 	wrword	##27791, local04
06d70     35 73 02 F6 | 	mov	local05, local01
06d74     35 5D 02 F6 | 	mov	arg01, local01
06d78     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06d7c     15 75 02 F6 | 	mov	local06, result1
06d80     CC 92 9F FE | 	loc	pa,	#(@LR__0361-@LR__0360)
06d84     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d88                 | LR__0360
06d88     04 72 06 F1 | 	add	local05, #4
06d8c     39 77 02 F6 | 	mov	local07, local05
06d90     3B 5F EA FA | 	rdword	arg02, local07 wz
06d94     37 5D 02 F6 | 	mov	arg01, local03
06d98     00 2A 06 A6 |  if_e	mov	result1, #0
06d9c     04 5E 66 50 |  if_ne	shl	arg02, #4
06da0     2F 5D 02 51 |  if_ne	add	arg01, arg02
06da4     2E 2B 02 56 |  if_ne	mov	result1, arg01
06da8     15 73 0A F6 | 	mov	local05, result1 wz
06dac     28 00 90 AD |  if_e	jmp	#LR__0362
06db0     39 5D 02 F6 | 	mov	arg01, local05
06db4     00 78 06 F6 | 	mov	local08, #0
06db8     02 5C 06 F1 | 	add	arg01, #2
06dbc     2E 7B E2 FA | 	rdword	local09, arg01
06dc0     36 00 00 FF 
06dc4     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06dc8     01 78 66 A6 |  if_e	neg	local08, #1
06dcc     3C 2B 02 F6 | 	mov	result1, local08
06dd0     15 7D 0A F6 | 	mov	local10, result1 wz
06dd4     B0 FF 9F AD |  if_e	jmp	#LR__0360
06dd8                 | LR__0361
06dd8                 | LR__0362
06dd8     00 72 0E F2 | 	cmp	local05, #0 wz
06ddc     37 73 02 A6 |  if_e	mov	local05, local03
06de0     39 7F 02 F6 | 	mov	local11, local05
06de4     06 7E 06 F1 | 	add	local11, #6
06de8     35 81 02 F6 | 	mov	local12, local01
06dec     3F 83 E2 FA | 	rdword	local13, local11
06df0     06 80 06 F1 | 	add	local12, #6
06df4     40 83 52 FC | 	wrword	local13, local12
06df8     35 5F 0A F6 | 	mov	arg02, local01 wz
06dfc     00 2A 06 A6 |  if_e	mov	result1, #0
06e00     37 5F 82 51 |  if_ne	sub	arg02, local03
06e04     04 5E 46 50 |  if_ne	shr	arg02, #4
06e08     2F 2B 02 56 |  if_ne	mov	result1, arg02
06e0c     15 85 02 F6 | 	mov	local14, result1
06e10     3F 85 52 FC | 	wrword	local14, local11
06e14     37 73 0A F2 | 	cmp	local05, local03 wz
06e18     74 00 90 AD |  if_e	jmp	#LR__0365
06e1c     39 5D 02 F6 | 	mov	arg01, local05
06e20     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06e24     35 2B 0A F2 | 	cmp	result1, local01 wz
06e28     64 00 90 5D |  if_ne	jmp	#LR__0364
06e2c     39 87 02 F6 | 	mov	local15, local05
06e30     43 89 E2 FA | 	rdword	local16, local15
06e34     35 8B 02 F6 | 	mov	local17, local01
06e38     45 7D E2 FA | 	rdword	local10, local17
06e3c     3E 89 02 F1 | 	add	local16, local10
06e40     43 89 52 FC | 	wrword	local16, local15
06e44     38 01 58 FC | 	wrword	#0, local04
06e48     35 5D 02 F6 | 	mov	arg01, local01
06e4c     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06e50     15 75 02 F6 | 	mov	local06, result1
06e54     36 75 5A F2 | 	cmps	local06, local02 wcz
06e58     24 00 90 3D |  if_ae	jmp	#LR__0363
06e5c     3A 8D 02 F6 | 	mov	local18, local06
06e60     04 8C 06 F1 | 	add	local18, #4
06e64     39 5F 0A F6 | 	mov	arg02, local05 wz
06e68     00 2A 06 A6 |  if_e	mov	result1, #0
06e6c     37 5F 82 51 |  if_ne	sub	arg02, local03
06e70     04 5E 46 50 |  if_ne	shr	arg02, #4
06e74     2F 2B 02 56 |  if_ne	mov	result1, arg02
06e78     15 85 02 F6 | 	mov	local14, result1
06e7c     46 85 52 FC | 	wrword	local14, local18
06e80                 | LR__0363
06e80     40 83 E2 FA | 	rdword	local13, local12
06e84     3F 83 52 FC | 	wrword	local13, local11
06e88     40 01 58 FC | 	wrword	#0, local12
06e8c     39 6B 02 F6 | 	mov	local01, local05
06e90                 | LR__0364
06e90                 | LR__0365
06e90     35 5D 02 F6 | 	mov	arg01, local01
06e94     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06e98     15 8F 0A F6 | 	mov	local19, result1 wz
06e9c     C4 00 90 AD |  if_e	jmp	#LR__0367
06ea0     36 8F 5A F2 | 	cmps	local19, local02 wcz
06ea4     BC 00 90 3D |  if_ae	jmp	#LR__0367
06ea8     47 5D 02 F6 | 	mov	arg01, local19
06eac     00 78 06 F6 | 	mov	local08, #0
06eb0     02 5C 06 F1 | 	add	arg01, #2
06eb4     2E 7B E2 FA | 	rdword	local09, arg01
06eb8     36 00 00 FF 
06ebc     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06ec0     01 78 66 A6 |  if_e	neg	local08, #1
06ec4     3C 2B 0A F6 | 	mov	result1, local08 wz
06ec8     98 00 90 AD |  if_e	jmp	#LR__0367
06ecc     35 73 02 F6 | 	mov	local05, local01
06ed0     47 6B 02 F6 | 	mov	local01, local19
06ed4     39 91 02 F6 | 	mov	local20, local05
06ed8     48 93 E2 FA | 	rdword	local21, local20
06edc     35 95 02 F6 | 	mov	local22, local01
06ee0     4A 7D E2 FA | 	rdword	local10, local22
06ee4     3E 93 02 F1 | 	add	local21, local10
06ee8     48 93 52 FC | 	wrword	local21, local20
06eec     35 97 02 F6 | 	mov	local23, local01
06ef0     06 96 06 F1 | 	add	local23, #6
06ef4     39 99 02 F6 | 	mov	local24, local05
06ef8     4B 83 E2 FA | 	rdword	local13, local23
06efc     06 98 06 F1 | 	add	local24, #6
06f00     4C 83 52 FC | 	wrword	local13, local24
06f04     35 9B 02 F6 | 	mov	local25, local01
06f08     02 9A 06 F1 | 	add	local25, #2
06f0c     4D 55 59 FC | 	wrword	#170, local25
06f10     4B 01 58 FC | 	wrword	#0, local23
06f14     35 83 02 F6 | 	mov	local13, local01
06f18     41 5D 02 F6 | 	mov	arg01, local13
06f1c     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06f20     15 7D 02 F6 | 	mov	local10, result1
06f24     3E 75 0A F6 | 	mov	local06, local10 wz
06f28     38 00 90 AD |  if_e	jmp	#LR__0366
06f2c     36 75 5A F2 | 	cmps	local06, local02 wcz
06f30     30 00 90 3D |  if_ae	jmp	#LR__0366
06f34     3A 9D 02 F6 | 	mov	local26, local06
06f38     04 9C 06 F1 | 	add	local26, #4
06f3c     37 83 02 F6 | 	mov	local13, local03
06f40     39 7D 02 F6 | 	mov	local10, local05
06f44     41 5D 02 F6 | 	mov	arg01, local13
06f48     3E 5F 0A F6 | 	mov	arg02, local10 wz
06f4c     00 2A 06 A6 |  if_e	mov	result1, #0
06f50     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06f54     04 5E 46 50 |  if_ne	shr	arg02, #4
06f58     2F 2B 02 56 |  if_ne	mov	result1, arg02
06f5c     15 85 02 F6 | 	mov	local14, result1
06f60     4E 85 52 FC | 	wrword	local14, local26
06f64                 | LR__0366
06f64                 | LR__0367
06f64     3A 2B 02 F6 | 	mov	result1, local06
06f68     AF F0 03 F6 | 	mov	ptra, fp
06f6c     BF 00 A0 FD | 	call	#popregs_
06f70                 | __system___gc_dofree_ret
06f70     2D 00 64 FD | 	ret
06f74                 | 
06f74                 | __system___gc_docollect
06f74     0C 5A 05 F6 | 	mov	COUNT_, #12
06f78     B0 00 A0 FD | 	call	#pushregs_
06f7c     5C F9 BF FD | 	call	#__system___gc_ptrs
06f80     16 6B 02 F6 | 	mov	local01, result2
06f84     15 6D 02 F6 | 	mov	local02, result1
06f88     36 5D 02 F6 | 	mov	arg01, local02
06f8c     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f90     15 6F 0A F6 | 	mov	local03, result1 wz
06f94     01 2A 62 FD | 	cogid	result1
06f98     15 71 02 F6 | 	mov	local04, result1
06f9c     2C 00 90 AD |  if_e	jmp	#LR__0369
06fa0                 | LR__0368
06fa0     35 6F 5A F2 | 	cmps	local03, local01 wcz
06fa4     24 00 90 3D |  if_ae	jmp	#LR__0369
06fa8     37 73 02 F6 | 	mov	local05, local03
06fac     02 72 06 F1 | 	add	local05, #2
06fb0     39 75 E2 FA | 	rdword	local06, local05
06fb4     20 74 26 F5 | 	andn	local06, #32
06fb8     39 75 52 FC | 	wrword	local06, local05
06fbc     37 5D 02 F6 | 	mov	arg01, local03
06fc0     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06fc4     15 6F 0A F6 | 	mov	local03, result1 wz
06fc8     D4 FF 9F 5D |  if_ne	jmp	#LR__0368
06fcc                 | LR__0369
06fcc     00 76 06 F6 | 	mov	local07, #0
06fd0     00 5C 06 F6 | 	mov	arg01, #0
06fd4     5C EF BF FD | 	call	#__system____topofstack
06fd8     15 79 02 F6 | 	mov	local08, result1
06fdc     3B 5D 02 F6 | 	mov	arg01, local07
06fe0     3C 5F 02 F6 | 	mov	arg02, local08
06fe4     A0 00 B0 FD | 	call	#__system___gc_markhub
06fe8     2C 01 B0 FD | 	call	#__system___gc_markcog
06fec     36 5D 02 F6 | 	mov	arg01, local02
06ff0     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ff4     15 7B 0A F6 | 	mov	local09, result1 wz
06ff8     10 00 90 5D |  if_ne	jmp	#LR__0370
06ffc     40 00 00 FF 
07000     85 5D 06 F6 | 	mov	arg01, ##@LR__0455
07004     94 FB BF FD | 	call	#__system___gc_errmsg
07008     70 00 90 FD | 	jmp	#LR__0376
0700c                 | LR__0370
0700c                 | LR__0371
0700c     3D 6F 02 F6 | 	mov	local03, local09
07010     37 5D 02 F6 | 	mov	arg01, local03
07014     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
07018     15 7B 02 F6 | 	mov	local09, result1
0701c     37 7D 02 F6 | 	mov	local10, local03
07020     02 7C 06 F1 | 	add	local10, #2
07024     3E 7F E2 FA | 	rdword	local11, local10
07028     20 7E CE F7 | 	test	local11, #32 wz
0702c     3C 00 90 5D |  if_ne	jmp	#LR__0374
07030     3F 81 02 F6 | 	mov	local12, local11
07034     10 80 0E F5 | 	and	local12, #16 wz
07038     30 00 90 5D |  if_ne	jmp	#LR__0374
0703c     3F 77 02 F6 | 	mov	local07, local11
07040     0F 76 06 F5 | 	and	local07, #15
07044     3B 7F 02 F6 | 	mov	local11, local07
07048     38 7F 0A F2 | 	cmp	local11, local04 wz
0704c     08 00 90 AD |  if_e	jmp	#LR__0372
07050     0E 7E 0E F2 | 	cmp	local11, #14 wz
07054     14 00 90 5D |  if_ne	jmp	#LR__0373
07058                 | LR__0372
07058     37 77 02 F6 | 	mov	local07, local03
0705c     3B 5D 02 F6 | 	mov	arg01, local07
07060     E4 FC BF FD | 	call	#__system___gc_dofree
07064     15 81 02 F6 | 	mov	local12, result1
07068     40 7B 02 F6 | 	mov	local09, local12
0706c                 | LR__0373
0706c                 | LR__0374
0706c     00 7A 0E F2 | 	cmp	local09, #0 wz
07070     08 00 90 AD |  if_e	jmp	#LR__0375
07074     35 7B 5A F2 | 	cmps	local09, local01 wcz
07078     90 FF 9F CD |  if_b	jmp	#LR__0371
0707c                 | LR__0375
0707c                 | LR__0376
0707c     AF F0 03 F6 | 	mov	ptra, fp
07080     BF 00 A0 FD | 	call	#popregs_
07084                 | __system___gc_docollect_ret
07084     2D 00 64 FD | 	ret
07088                 | 
07088                 | __system___gc_markhub
07088     0A 5A 05 F6 | 	mov	COUNT_, #10
0708c     B0 00 A0 FD | 	call	#pushregs_
07090     2E 6B 02 F6 | 	mov	local01, arg01
07094     2F 6D 02 F6 | 	mov	local02, arg02
07098     40 F8 BF FD | 	call	#__system___gc_ptrs
0709c     15 6F 02 F6 | 	mov	local03, result1
070a0     16 71 02 F6 | 	mov	local04, result2
070a4                 | LR__0377
070a4     36 6B 5A F2 | 	cmps	local01, local02 wcz
070a8     60 00 90 3D |  if_ae	jmp	#LR__0378
070ac     35 61 02 FB | 	rdlong	arg03, local01
070b0     04 6A 06 F1 | 	add	local01, #4
070b4     37 5D 02 F6 | 	mov	arg01, local03
070b8     38 5F 02 F6 | 	mov	arg02, local04
070bc     04 FC BF FD | 	call	#__system___gc_isvalidptr
070c0     15 73 0A F6 | 	mov	local05, result1 wz
070c4     DC FF 9F AD |  if_e	jmp	#LR__0377
070c8     39 5D 02 F6 | 	mov	arg01, local05
070cc     00 74 06 F6 | 	mov	local06, #0
070d0     02 5C 06 F1 | 	add	arg01, #2
070d4     2E 77 E2 FA | 	rdword	local07, arg01
070d8     36 00 00 FF 
070dc     8F 76 0E F2 | 	cmp	local07, ##27791 wz
070e0     01 74 66 A6 |  if_e	neg	local06, #1
070e4     3A 2B 02 F6 | 	mov	result1, local06
070e8     15 79 0A F6 | 	mov	local08, result1 wz
070ec     B4 FF 9F 5D |  if_ne	jmp	#LR__0377
070f0     39 7B 02 F6 | 	mov	local09, local05
070f4     02 7A 06 F1 | 	add	local09, #2
070f8     3D 7D E2 FA | 	rdword	local10, local09
070fc     0F 7C 26 F5 | 	andn	local10, #15
07100     2E 7C 46 F5 | 	or	local10, #46
07104     3D 7D 52 FC | 	wrword	local10, local09
07108     98 FF 9F FD | 	jmp	#LR__0377
0710c                 | LR__0378
0710c     AF F0 03 F6 | 	mov	ptra, fp
07110     BF 00 A0 FD | 	call	#popregs_
07114                 | __system___gc_markhub_ret
07114     2D 00 64 FD | 	ret
07118                 | 
07118                 | __system___gc_markcog
07118     06 5A 05 F6 | 	mov	COUNT_, #6
0711c     B0 00 A0 FD | 	call	#pushregs_
07120     B8 F7 BF FD | 	call	#__system___gc_ptrs
07124     15 6B 02 F6 | 	mov	local01, result1
07128     16 6D 02 F6 | 	mov	local02, result2
0712c     00 6E 06 F6 | 	mov	local03, #0
07130                 | LR__0379
07130     F0 71 06 F6 | 	mov	local04, #496
07134     37 71 82 F1 | 	sub	local04, local03
07138     F0 71 06 F1 | 	add	local04, #496
0713c                 | 	'.live	local04
0713c     00 70 96 F9 | 	alts	local04, #0
07140     38 73 02 F6 | 	mov	local05, local04
07144     36 5F 02 F6 | 	mov	arg02, local02
07148     35 5D 02 F6 | 	mov	arg01, local01
0714c     39 61 02 F6 | 	mov	arg03, local05
07150     70 FB BF FD | 	call	#__system___gc_isvalidptr
07154     15 73 0A F6 | 	mov	local05, result1 wz
07158     10 00 90 AD |  if_e	jmp	#LR__0380
0715c     02 72 06 F1 | 	add	local05, #2
07160     39 75 E2 FA | 	rdword	local06, local05
07164     20 74 46 F5 | 	or	local06, #32
07168     39 75 52 FC | 	wrword	local06, local05
0716c                 | LR__0380
0716c     01 6E 06 F1 | 	add	local03, #1
07170     F0 6F 5E F2 | 	cmps	local03, #496 wcz
07174     B8 FF 9F CD |  if_b	jmp	#LR__0379
07178     AF F0 03 F6 | 	mov	ptra, fp
0717c     BF 00 A0 FD | 	call	#popregs_
07180                 | __system___gc_markcog_ret
07180     2D 00 64 FD | 	ret
07184                 | 
07184                 | __system__write
07184     03 5A 05 F6 | 	mov	COUNT_, #3
07188     B0 00 A0 FD | 	call	#pushregs_
0718c     2E 6B 02 F6 | 	mov	local01, arg01
07190     2F 6D 02 F6 | 	mov	local02, arg02
07194     30 6F 02 F6 | 	mov	local03, arg03
07198     0A 6A 1E F2 | 	cmp	local01, #10 wcz
0719c     1C 00 90 CD |  if_b	jmp	#LR__0381
071a0     01 00 00 FF 
071a4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071a8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071ac     01 00 00 FF 
071b0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071b4     01 2A 66 F6 | 	neg	result1, #1
071b8     28 00 90 FD | 	jmp	#LR__0382
071bc                 | LR__0381
071bc     35 5D 02 F6 | 	mov	arg01, local01
071c0     01 5C 66 F0 | 	shl	arg01, #1
071c4     35 5D 02 F1 | 	add	arg01, local01
071c8     04 5C 66 F0 | 	shl	arg01, #4
071cc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071d0     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071d4     36 5F 02 F6 | 	mov	arg02, local02
071d8     37 61 02 F6 | 	mov	arg03, local03
071dc     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071e0     4C 09 B0 FD | 	call	#__system___vfswrite
071e4                 | LR__0382
071e4     AF F0 03 F6 | 	mov	ptra, fp
071e8     BF 00 A0 FD | 	call	#popregs_
071ec                 | __system__write_ret
071ec     2D 00 64 FD | 	ret
071f0                 | 
071f0                 | __system__read
071f0     03 5A 05 F6 | 	mov	COUNT_, #3
071f4     B0 00 A0 FD | 	call	#pushregs_
071f8     2E 6B 02 F6 | 	mov	local01, arg01
071fc     2F 6D 02 F6 | 	mov	local02, arg02
07200     30 6F 02 F6 | 	mov	local03, arg03
07204     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07208     1C 00 90 CD |  if_b	jmp	#LR__0383
0720c     01 00 00 FF 
07210     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07214     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07218     01 00 00 FF 
0721c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07220     01 2A 66 F6 | 	neg	result1, #1
07224     28 00 90 FD | 	jmp	#LR__0384
07228                 | LR__0383
07228     35 5D 02 F6 | 	mov	arg01, local01
0722c     01 5C 66 F0 | 	shl	arg01, #1
07230     35 5D 02 F1 | 	add	arg01, local01
07234     04 5C 66 F0 | 	shl	arg01, #4
07238     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0723c     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07240     36 5F 02 F6 | 	mov	arg02, local02
07244     37 61 02 F6 | 	mov	arg03, local03
07248     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
0724c     A4 0A B0 FD | 	call	#__system___vfsread
07250                 | LR__0384
07250     AF F0 03 F6 | 	mov	ptra, fp
07254     BF 00 A0 FD | 	call	#popregs_
07258                 | __system__read_ret
07258     2D 00 64 FD | 	ret
0725c                 | 
0725c                 | __system__close
0725c     01 5A 05 F6 | 	mov	COUNT_, #1
07260     B0 00 A0 FD | 	call	#pushregs_
07264     2E 6B 02 F6 | 	mov	local01, arg01
07268     0A 6A 1E F2 | 	cmp	local01, #10 wcz
0726c     1C 00 90 CD |  if_b	jmp	#LR__0385
07270     01 00 00 FF 
07274     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07278     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0727c     01 00 00 FF 
07280     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07284     01 2A 66 F6 | 	neg	result1, #1
07288     20 00 90 FD | 	jmp	#LR__0386
0728c                 | LR__0385
0728c     35 5D 02 F6 | 	mov	arg01, local01
07290     01 5C 66 F0 | 	shl	arg01, #1
07294     35 5D 02 F1 | 	add	arg01, local01
07298     04 5C 66 F0 | 	shl	arg01, #4
0729c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
072a0     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
072a4     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
072a8     80 03 B0 FD | 	call	#__system___closeraw
072ac                 | LR__0386
072ac     AF F0 03 F6 | 	mov	ptra, fp
072b0     BF 00 A0 FD | 	call	#popregs_
072b4                 | __system__close_ret
072b4     2D 00 64 FD | 	ret
072b8                 | 
072b8                 | __system__lseek
072b8     09 5A 05 F6 | 	mov	COUNT_, #9
072bc     B0 00 A0 FD | 	call	#pushregs_
072c0     2E 6B 02 F6 | 	mov	local01, arg01
072c4     2F 6D 02 F6 | 	mov	local02, arg02
072c8     30 6F 02 F6 | 	mov	local03, arg03
072cc     0A 6A 1E F2 | 	cmp	local01, #10 wcz
072d0     1C 00 90 CD |  if_b	jmp	#LR__0387
072d4     01 00 00 FF 
072d8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
072dc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
072e0     01 00 00 FF 
072e4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
072e8     01 2A 66 F6 | 	neg	result1, #1
072ec     D8 00 90 FD | 	jmp	#LR__0391
072f0                 | LR__0387
072f0     35 71 02 F6 | 	mov	local04, local01
072f4     01 70 66 F0 | 	shl	local04, #1
072f8     35 71 02 F1 | 	add	local04, local01
072fc     04 70 66 F0 | 	shl	local04, #4
07300     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07304     0A 71 02 F1 | 	add	local04, ptr___system__dat__
07308     2C 70 06 F1 | 	add	local04, #44
0730c     38 73 0A FB | 	rdlong	local05, local04 wz
07310     2C 70 86 F1 | 	sub	local04, #44
07314     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07318     1C 00 90 5D |  if_ne	jmp	#LR__0388
0731c     01 00 00 FF 
07320     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07324     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07328     01 00 00 FF 
0732c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07330     01 2A 66 F6 | 	neg	result1, #1
07334     90 00 90 FD | 	jmp	#LR__0391
07338                 | LR__0388
07338     08 70 06 F1 | 	add	local04, #8
0733c     38 73 02 FB | 	rdlong	local05, local04
07340     08 70 86 F1 | 	sub	local04, #8
07344     40 72 CE F7 | 	test	local05, #64 wz
07348     14 00 90 AD |  if_e	jmp	#LR__0389
0734c     08 70 06 F1 | 	add	local04, #8
07350     38 73 02 FB | 	rdlong	local05, local04
07354     80 72 46 F5 | 	or	local05, #128
07358     38 73 62 FC | 	wrlong	local05, local04
0735c     08 70 86 F1 | 	sub	local04, #8
07360                 | LR__0389
07360     2C 70 06 F1 | 	add	local04, #44
07364     38 73 02 FB | 	rdlong	local05, local04
07368     2C 70 86 F1 | 	sub	local04, #44
0736c     39 75 02 FB | 	rdlong	local06, local05
07370     04 72 06 F1 | 	add	local05, #4
07374     39 77 02 FB | 	rdlong	local07, local05
07378     38 5D 02 F6 | 	mov	arg01, local04
0737c     36 5F 02 F6 | 	mov	arg02, local02
07380     37 61 02 F6 | 	mov	arg03, local03
07384     07 79 02 F6 | 	mov	local08, objptr
07388     3A 0F 02 F6 | 	mov	objptr, local06
0738c     2D 76 62 FD | 	call	local07
07390     3C 0F 02 F6 | 	mov	objptr, local08
07394     15 7B 02 F6 | 	mov	local09, result1
07398     00 7A 5E F2 | 	cmps	local09, #0 wcz
0739c     24 00 90 3D |  if_ae	jmp	#LR__0390
073a0     3D 5D 6A F6 | 	neg	arg01, local09 wz
073a4     01 00 00 FF 
073a8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
073ac     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
073b0     01 00 00 FF 
073b4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
073b8     01 2A 66 56 |  if_ne	neg	result1, #1
073bc     00 2A 06 A6 |  if_e	mov	result1, #0
073c0     04 00 90 FD | 	jmp	#LR__0391
073c4                 | LR__0390
073c4     3D 2B 02 F6 | 	mov	result1, local09
073c8                 | LR__0391
073c8     AF F0 03 F6 | 	mov	ptra, fp
073cc     BF 00 A0 FD | 	call	#popregs_
073d0                 | __system__lseek_ret
073d0     2D 00 64 FD | 	ret
073d4                 | 
073d4                 | __system____getftab
073d4     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
073d8     00 2A 06 36 |  if_ae	mov	result1, #0
073dc     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
073e0     2E 2B 02 F6 | 	mov	result1, arg01
073e4     01 2A 66 F0 | 	shl	result1, #1
073e8     2E 2B 02 F1 | 	add	result1, arg01
073ec     04 2A 66 F0 | 	shl	result1, #4
073f0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
073f4     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
073f8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
073fc                 | __system____getftab_ret
073fc     2D 00 64 FD | 	ret
07400                 | 
07400                 | __system___strrev
07400     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
07404     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07408     2E 33 02 F6 | 	mov	_var02, arg01
0740c     FC 8B 9F FE | 	loc	pa,	#(@LR__0393-@LR__0392)
07410     93 00 A0 FD | 	call	#FCACHE_LOAD_
07414                 | LR__0392
07414     19 31 CA FA | 	rdbyte	_var01, _var02 wz
07418     01 32 06 51 |  if_ne	add	_var02, #1
0741c     F4 FF 9F 5D |  if_ne	jmp	#LR__0392
07420                 | LR__0393
07420     01 32 86 F1 | 	sub	_var02, #1
07424                 | LR__0394
07424     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07428     1C 00 90 ED |  if_be	jmp	#LR__0395
0742c     2E 35 C2 FA | 	rdbyte	_var03, arg01
07430     19 37 C2 FA | 	rdbyte	_var04, _var02
07434     2E 37 42 FC | 	wrbyte	_var04, arg01
07438     19 35 42 FC | 	wrbyte	_var03, _var02
0743c     01 5C 06 F1 | 	add	arg01, #1
07440     01 32 86 F1 | 	sub	_var02, #1
07444     DC FF 9F FD | 	jmp	#LR__0394
07448                 | LR__0395
07448                 | __system___strrev_ret
07448     2D 00 64 FD | 	ret
0744c                 | 
0744c                 | __system___fmtpad
0744c     0C 5A 05 F6 | 	mov	COUNT_, #12
07450     B0 00 A0 FD | 	call	#pushregs_
07454     2E 6B 02 F6 | 	mov	local01, arg01
07458     2F 6D 02 F6 | 	mov	local02, arg02
0745c     31 6F 02 F6 | 	mov	local03, arg04
07460     36 71 EA F8 | 	getbyte	local04, local02, #1
07464     16 6C 46 F0 | 	shr	local02, #22
07468     03 6C 0E F5 | 	and	local02, #3 wz
0746c     00 72 06 F6 | 	mov	local05, #0
07470     01 6C 06 A6 |  if_e	mov	local02, #1
07474     37 6D CA F7 | 	test	local02, local03 wz
07478     00 2A 06 A6 |  if_e	mov	result1, #0
0747c     80 00 90 AD |  if_e	jmp	#LR__0399
07480     30 71 82 F1 | 	sub	local04, arg03
07484     38 75 02 F6 | 	mov	local06, local04
07488     00 74 5E F2 | 	cmps	local06, #0 wcz
0748c     00 2A 06 E6 |  if_be	mov	result1, #0
07490     6C 00 90 ED |  if_be	jmp	#LR__0399
07494     03 6C 0E F2 | 	cmp	local02, #3 wz
07498     18 00 90 5D |  if_ne	jmp	#LR__0396
0749c     01 6E 0E F2 | 	cmp	local03, #1 wz
074a0     6E 76 62 FD | 	wrz	local07
074a4     3B 75 02 F1 | 	add	local06, local07
074a8     3A 75 52 F6 | 	abs	local06, local06 wc
074ac     01 74 46 F0 | 	shr	local06, #1
074b0     3A 75 62 C6 |  if_b	neg	local06, local06
074b4                 | LR__0396
074b4     00 74 5E F2 | 	cmps	local06, #0 wcz
074b8     40 00 90 ED |  if_be	jmp	#LR__0398
074bc     3A 79 02 F6 | 	mov	local08, local06
074c0                 | LR__0397
074c0     35 7B 02 F6 | 	mov	local09, local01
074c4     3D 77 02 FB | 	rdlong	local07, local09
074c8     04 7A 06 F1 | 	add	local09, #4
074cc     3D 7D 02 FB | 	rdlong	local10, local09
074d0     20 5C 06 F6 | 	mov	arg01, #32
074d4     07 7F 02 F6 | 	mov	local11, objptr
074d8     3B 0F 02 F6 | 	mov	objptr, local07
074dc     2D 7C 62 FD | 	call	local10
074e0     3F 0F 02 F6 | 	mov	objptr, local11
074e4     15 81 02 F6 | 	mov	local12, result1
074e8     00 80 5E F2 | 	cmps	local12, #0 wcz
074ec     40 2B 02 C6 |  if_b	mov	result1, local12
074f0     0C 00 90 CD |  if_b	jmp	#LR__0399
074f4     40 73 02 F1 | 	add	local05, local12
074f8     F1 79 6E FB | 	djnz	local08, #LR__0397
074fc                 | LR__0398
074fc     39 2B 02 F6 | 	mov	result1, local05
07500                 | LR__0399
07500     AF F0 03 F6 | 	mov	ptra, fp
07504     BF 00 A0 FD | 	call	#popregs_
07508                 | __system___fmtpad_ret
07508     2D 00 64 FD | 	ret
0750c                 | 
0750c                 | __system___uitoa
0750c     09 5A 05 F6 | 	mov	COUNT_, #9
07510     B0 00 A0 FD | 	call	#pushregs_
07514     2E 6B 02 F6 | 	mov	local01, arg01
07518     2F 6D 02 F6 | 	mov	local02, arg02
0751c     30 6F 02 F6 | 	mov	local03, arg03
07520     31 71 02 F6 | 	mov	local04, arg04
07524     32 73 0A F6 | 	mov	local05, arg05 wz
07528     35 75 02 F6 | 	mov	local06, local01
0752c     00 76 06 F6 | 	mov	local07, #0
07530     37 78 06 56 |  if_ne	mov	local08, #55
07534     57 78 06 A6 |  if_e	mov	local08, #87
07538                 | LR__0400
07538     36 0B 03 F6 | 	mov	muldiva_, local02
0753c     37 0D 03 F6 | 	mov	muldivb_, local03
07540     CC 00 A0 FD | 	call	#unsdivide_
07544     85 7B 02 F6 | 	mov	local09, muldiva_
07548     0A 7A 1E F2 | 	cmp	local09, #10 wcz
0754c     30 7A 06 C1 |  if_b	add	local09, #48
07550     3C 7B 02 31 |  if_ae	add	local09, local08
07554     3A 7B 42 FC | 	wrbyte	local09, local06
07558     36 0B 03 F6 | 	mov	muldiva_, local02
0755c     37 0D 03 F6 | 	mov	muldivb_, local03
07560     01 74 06 F1 | 	add	local06, #1
07564     CC 00 A0 FD | 	call	#unsdivide_
07568     86 6D 0A F6 | 	mov	local02, muldivb_ wz
0756c     01 76 06 F1 | 	add	local07, #1
07570     C4 FF 9F 5D |  if_ne	jmp	#LR__0400
07574     38 77 1A F2 | 	cmp	local07, local04 wcz
07578     BC FF 9F CD |  if_b	jmp	#LR__0400
0757c     3A 01 48 FC | 	wrbyte	#0, local06
07580     35 5D 02 F6 | 	mov	arg01, local01
07584     78 FE BF FD | 	call	#__system___strrev
07588     3B 2B 02 F6 | 	mov	result1, local07
0758c     AF F0 03 F6 | 	mov	ptra, fp
07590     BF 00 A0 FD | 	call	#popregs_
07594                 | __system___uitoa_ret
07594     2D 00 64 FD | 	ret
07598                 | 
07598                 | __system___gettxfunc
07598     03 5A 05 F6 | 	mov	COUNT_, #3
0759c     B0 00 A0 FD | 	call	#pushregs_
075a0     30 FE BF FD | 	call	#__system____getftab
075a4     15 6B 0A F6 | 	mov	local01, result1 wz
075a8     14 00 90 AD |  if_e	jmp	#LR__0401
075ac     08 6A 06 F1 | 	add	local01, #8
075b0     35 6D 02 FB | 	rdlong	local02, local01
075b4     08 6A 86 F1 | 	sub	local01, #8
075b8     36 6F 0A F6 | 	mov	local03, local02 wz
075bc     08 00 90 5D |  if_ne	jmp	#LR__0402
075c0                 | LR__0401
075c0     00 2A 06 F6 | 	mov	result1, #0
075c4     0C 00 90 FD | 	jmp	#LR__0403
075c8                 | LR__0402
075c8     35 5D 02 F6 | 	mov	arg01, local01
075cc     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
075d0     88 E9 BF FD | 	call	#__system___make_methodptr
075d4                 | LR__0403
075d4     AF F0 03 F6 | 	mov	ptra, fp
075d8     BF 00 A0 FD | 	call	#popregs_
075dc                 | __system___gettxfunc_ret
075dc     2D 00 64 FD | 	ret
075e0                 | 
075e0                 | __system___getiolock_0145
075e0     03 5A 05 F6 | 	mov	COUNT_, #3
075e4     B0 00 A0 FD | 	call	#pushregs_
075e8     E8 FD BF FD | 	call	#__system____getftab
075ec     15 6B 0A F6 | 	mov	local01, result1 wz
075f0     14 00 90 AD |  if_e	jmp	#LR__0404
075f4     08 6A 06 F1 | 	add	local01, #8
075f8     35 6D 02 FB | 	rdlong	local02, local01
075fc     08 6A 86 F1 | 	sub	local01, #8
07600     36 6F 0A F6 | 	mov	local03, local02 wz
07604     10 00 90 5D |  if_ne	jmp	#LR__0405
07608                 | LR__0404
07608     18 14 06 F1 | 	add	ptr___system__dat__, #24
0760c     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07610     18 14 86 F1 | 	sub	ptr___system__dat__, #24
07614     08 00 90 FD | 	jmp	#LR__0406
07618                 | LR__0405
07618     0C 6A 06 F1 | 	add	local01, #12
0761c     35 2B 02 F6 | 	mov	result1, local01
07620                 | LR__0406
07620     AF F0 03 F6 | 	mov	ptra, fp
07624     BF 00 A0 FD | 	call	#popregs_
07628                 | __system___getiolock_0145_ret
07628     2D 00 64 FD | 	ret
0762c                 | 
0762c                 | __system___closeraw
0762c     06 5A 05 F6 | 	mov	COUNT_, #6
07630     B0 00 A0 FD | 	call	#pushregs_
07634     2E 6B 02 F6 | 	mov	local01, arg01
07638     00 6C 06 F6 | 	mov	local02, #0
0763c     08 6A 06 F1 | 	add	local01, #8
07640     35 6F 0A FB | 	rdlong	local03, local01 wz
07644     08 6A 86 F1 | 	sub	local01, #8
07648     1C 00 90 5D |  if_ne	jmp	#LR__0407
0764c     01 00 00 FF 
07650     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07654     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07658     01 00 00 FF 
0765c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07660     01 2A 66 F6 | 	neg	result1, #1
07664     90 00 90 FD | 	jmp	#LR__0410
07668                 | LR__0407
07668     28 6A 06 F1 | 	add	local01, #40
0766c     35 6F 0A FB | 	rdlong	local03, local01 wz
07670     28 6A 86 F1 | 	sub	local01, #40
07674     2C 00 90 AD |  if_e	jmp	#LR__0408
07678     28 6A 06 F1 | 	add	local01, #40
0767c     35 6F 02 FB | 	rdlong	local03, local01
07680     28 6A 86 F1 | 	sub	local01, #40
07684     37 71 02 FB | 	rdlong	local04, local03
07688     04 6E 06 F1 | 	add	local03, #4
0768c     37 73 02 FB | 	rdlong	local05, local03
07690     35 5D 02 F6 | 	mov	arg01, local01
07694     07 75 02 F6 | 	mov	local06, objptr
07698     38 0F 02 F6 | 	mov	objptr, local04
0769c     2D 72 62 FD | 	call	local05
076a0     3A 0F 02 F6 | 	mov	objptr, local06
076a4                 | LR__0408
076a4     20 6A 06 F1 | 	add	local01, #32
076a8     35 6F 0A FB | 	rdlong	local03, local01 wz
076ac     20 6A 86 F1 | 	sub	local01, #32
076b0     30 00 90 AD |  if_e	jmp	#LR__0409
076b4     20 6A 06 F1 | 	add	local01, #32
076b8     35 6F 02 FB | 	rdlong	local03, local01
076bc     20 6A 86 F1 | 	sub	local01, #32
076c0     37 71 02 FB | 	rdlong	local04, local03
076c4     04 6E 06 F1 | 	add	local03, #4
076c8     37 73 02 FB | 	rdlong	local05, local03
076cc     35 5D 02 F6 | 	mov	arg01, local01
076d0     07 75 02 F6 | 	mov	local06, objptr
076d4     38 0F 02 F6 | 	mov	objptr, local04
076d8     2D 72 62 FD | 	call	local05
076dc     3A 0F 02 F6 | 	mov	objptr, local06
076e0     15 6D 02 F6 | 	mov	local02, result1
076e4                 | LR__0409
076e4     35 5D 02 F6 | 	mov	arg01, local01
076e8     00 5E 06 F6 | 	mov	arg02, #0
076ec     30 60 06 F6 | 	mov	arg03, #48
076f0     A0 00 A0 FD | 	call	#\builtin_bytefill_
076f4     36 2B 02 F6 | 	mov	result1, local02
076f8                 | LR__0410
076f8     AF F0 03 F6 | 	mov	ptra, fp
076fc     BF 00 A0 FD | 	call	#popregs_
07700                 | __system___closeraw_ret
07700     2D 00 64 FD | 	ret
07704                 | 
07704                 | __system____default_getc
07704     0C 5A 05 F6 | 	mov	COUNT_, #12
07708     B0 00 A0 FD | 	call	#pushregs_
0770c     2E 6B 02 F6 | 	mov	local01, arg01
07710     35 6D 02 FB | 	rdlong	local02, local01
07714     08 6C 06 F1 | 	add	local02, #8
07718     36 6F 02 FB | 	rdlong	local03, local02
0771c     08 6C 86 F1 | 	sub	local02, #8
07720     02 6E CE F7 | 	test	local03, #2 wz
07724     08 00 90 AD |  if_e	jmp	#LR__0411
07728     35 5D 02 F6 | 	mov	arg01, local01
0772c     FC 01 B0 FD | 	call	#__system____default_flush
07730                 | LR__0411
07730     08 6C 06 F1 | 	add	local02, #8
07734     36 6F 02 FB | 	rdlong	local03, local02
07738     01 6E 46 F5 | 	or	local03, #1
0773c     36 6F 62 FC | 	wrlong	local03, local02
07740     08 6C 86 F1 | 	sub	local02, #8
07744     36 71 0A FB | 	rdlong	local04, local02 wz
07748     7C 00 90 5D |  if_ne	jmp	#LR__0413
0774c     35 5D 02 F6 | 	mov	arg01, local01
07750     2E 73 02 FB | 	rdlong	local05, arg01
07754     0C 72 06 F1 | 	add	local05, #12
07758     39 5F 02 F6 | 	mov	arg02, local05
0775c     0C 72 86 F1 | 	sub	local05, #12
07760     10 5C 06 F1 | 	add	arg01, #16
07764     2E 75 02 FB | 	rdlong	local06, arg01
07768     10 5C 86 F1 | 	sub	arg01, #16
0776c     3A 77 02 FB | 	rdlong	local07, local06
07770     04 74 06 F1 | 	add	local06, #4
07774     3A 79 02 FB | 	rdlong	local08, local06
07778     0A 60 C6 F9 | 	decod	arg03, #10
0777c     07 7B 02 F6 | 	mov	local09, objptr
07780     3B 0F 02 F6 | 	mov	objptr, local07
07784     2D 78 62 FD | 	call	local08
07788     3D 0F 02 F6 | 	mov	objptr, local09
0778c     15 7D 02 F6 | 	mov	local10, result1
07790     00 7C 5E F2 | 	cmps	local10, #0 wcz
07794     01 2A 66 C6 |  if_b	neg	result1, #1
07798     28 00 90 CD |  if_b	jmp	#LR__0412
0779c     39 7D 62 FC | 	wrlong	local10, local05
077a0     0C 72 06 F1 | 	add	local05, #12
077a4     39 7F 02 F6 | 	mov	local11, local05
077a8     08 72 86 F1 | 	sub	local05, #8
077ac     39 7F 62 FC | 	wrlong	local11, local05
077b0     04 72 06 F1 | 	add	local05, #4
077b4     39 75 02 FB | 	rdlong	local06, local05
077b8     01 74 46 F5 | 	or	local06, #1
077bc     39 75 62 FC | 	wrlong	local06, local05
077c0     3E 2B 02 F6 | 	mov	result1, local10
077c4                 | LR__0412
077c4     15 71 02 F6 | 	mov	local04, result1
077c8                 | LR__0413
077c8     00 70 5E F2 | 	cmps	local04, #0 wcz
077cc     01 2A 66 E6 |  if_be	neg	result1, #1
077d0     1C 00 90 ED |  if_be	jmp	#LR__0414
077d4     01 70 86 F1 | 	sub	local04, #1
077d8     36 71 62 FC | 	wrlong	local04, local02
077dc     04 6C 06 F1 | 	add	local02, #4
077e0     36 81 02 FB | 	rdlong	local12, local02
077e4     40 2B C2 FA | 	rdbyte	result1, local12
077e8     01 80 06 F1 | 	add	local12, #1
077ec     36 81 62 FC | 	wrlong	local12, local02
077f0                 | LR__0414
077f0     AF F0 03 F6 | 	mov	ptra, fp
077f4     BF 00 A0 FD | 	call	#popregs_
077f8                 | __system____default_getc_ret
077f8     2D 00 64 FD | 	ret
077fc                 | 
077fc                 | __system____default_putc
077fc     06 5A 05 F6 | 	mov	COUNT_, #6
07800     B0 00 A0 FD | 	call	#pushregs_
07804     2E 6B 02 F6 | 	mov	local01, arg01
07808     2F 6D 02 F6 | 	mov	local02, arg02
0780c     36 6F 02 FB | 	rdlong	local03, local02
07810     08 6E 06 F1 | 	add	local03, #8
07814     37 71 02 FB | 	rdlong	local04, local03
07818     08 6E 86 F1 | 	sub	local03, #8
0781c     01 70 CE F7 | 	test	local04, #1 wz
07820     08 00 90 AD |  if_e	jmp	#LR__0415
07824     36 5D 02 F6 | 	mov	arg01, local02
07828     00 01 B0 FD | 	call	#__system____default_flush
0782c                 | LR__0415
0782c     08 6E 06 F1 | 	add	local03, #8
07830     37 71 02 FB | 	rdlong	local04, local03
07834     02 70 46 F5 | 	or	local04, #2
07838     37 71 62 FC | 	wrlong	local04, local03
0783c     08 6E 86 F1 | 	sub	local03, #8
07840     37 73 02 FB | 	rdlong	local05, local03
07844     39 75 02 F6 | 	mov	local06, local05
07848     0C 6E 06 F1 | 	add	local03, #12
0784c     37 75 02 F1 | 	add	local06, local03
07850     3A 6B 42 FC | 	wrbyte	local01, local06
07854     FF 6A 06 F5 | 	and	local01, #255
07858     01 72 06 F1 | 	add	local05, #1
0785c     0C 6E 86 F1 | 	sub	local03, #12
07860     37 73 62 FC | 	wrlong	local05, local03
07864     02 00 00 FF 
07868     00 72 0E F2 | 	cmp	local05, ##1024 wz
0786c     10 00 90 5D |  if_ne	jmp	#LR__0416
07870     36 5D 02 F6 | 	mov	arg01, local02
07874     B4 00 B0 FD | 	call	#__system____default_flush
07878     00 2A 0E F2 | 	cmp	result1, #0 wz
0787c     01 6A 66 56 |  if_ne	neg	local01, #1
07880                 | LR__0416
07880     35 2B 02 F6 | 	mov	result1, local01
07884     AF F0 03 F6 | 	mov	ptra, fp
07888     BF 00 A0 FD | 	call	#popregs_
0788c                 | __system____default_putc_ret
0788c     2D 00 64 FD | 	ret
07890                 | 
07890                 | __system____default_putc_terminal
07890     06 5A 05 F6 | 	mov	COUNT_, #6
07894     B0 00 A0 FD | 	call	#pushregs_
07898     2E 6B 02 F6 | 	mov	local01, arg01
0789c     2F 6D 02 F6 | 	mov	local02, arg02
078a0     36 6F 02 FB | 	rdlong	local03, local02
078a4     08 6E 06 F1 | 	add	local03, #8
078a8     37 71 02 FB | 	rdlong	local04, local03
078ac     08 6E 86 F1 | 	sub	local03, #8
078b0     01 70 CE F7 | 	test	local04, #1 wz
078b4     08 00 90 AD |  if_e	jmp	#LR__0417
078b8     36 5D 02 F6 | 	mov	arg01, local02
078bc     6C 00 B0 FD | 	call	#__system____default_flush
078c0                 | LR__0417
078c0     08 6E 06 F1 | 	add	local03, #8
078c4     37 71 02 FB | 	rdlong	local04, local03
078c8     02 70 46 F5 | 	or	local04, #2
078cc     37 71 62 FC | 	wrlong	local04, local03
078d0     08 6E 86 F1 | 	sub	local03, #8
078d4     37 73 02 FB | 	rdlong	local05, local03
078d8     39 75 02 F6 | 	mov	local06, local05
078dc     0C 6E 06 F1 | 	add	local03, #12
078e0     37 75 02 F1 | 	add	local06, local03
078e4     3A 6B 42 FC | 	wrbyte	local01, local06
078e8     FF 6A 06 F5 | 	and	local01, #255
078ec     0C 6E 86 F1 | 	sub	local03, #12
078f0     01 72 06 F1 | 	add	local05, #1
078f4     37 73 62 FC | 	wrlong	local05, local03
078f8     0A 6A 0E F2 | 	cmp	local01, #10 wz
078fc     0C 00 90 AD |  if_e	jmp	#LR__0418
07900     02 00 00 FF 
07904     00 72 0E F2 | 	cmp	local05, ##1024 wz
07908     10 00 90 5D |  if_ne	jmp	#LR__0419
0790c                 | LR__0418
0790c     36 5D 02 F6 | 	mov	arg01, local02
07910     18 00 B0 FD | 	call	#__system____default_flush
07914     00 2A 0E F2 | 	cmp	result1, #0 wz
07918     01 6A 66 56 |  if_ne	neg	local01, #1
0791c                 | LR__0419
0791c     35 2B 02 F6 | 	mov	result1, local01
07920     AF F0 03 F6 | 	mov	ptra, fp
07924     BF 00 A0 FD | 	call	#popregs_
07928                 | __system____default_putc_terminal_ret
07928     2D 00 64 FD | 	ret
0792c                 | 
0792c                 | __system____default_flush
0792c     0F 5A 05 F6 | 	mov	COUNT_, #15
07930     B0 00 A0 FD | 	call	#pushregs_
07934     2E 6B 02 F6 | 	mov	local01, arg01
07938     35 6D 02 FB | 	rdlong	local02, local01
0793c     36 6F 02 FB | 	rdlong	local03, local02
07940     08 6C 06 F1 | 	add	local02, #8
07944     36 71 02 FB | 	rdlong	local04, local02
07948     08 6C 86 F1 | 	sub	local02, #8
0794c     02 70 CE F7 | 	test	local04, #2 wz
07950     B8 00 90 AD |  if_e	jmp	#LR__0422
07954     00 6E 5E F2 | 	cmps	local03, #0 wcz
07958     30 01 90 ED |  if_be	jmp	#LR__0424
0795c     08 6A 06 F1 | 	add	local01, #8
07960     35 71 02 FB | 	rdlong	local04, local01
07964     08 6A 86 F1 | 	sub	local01, #8
07968     40 70 CE F7 | 	test	local04, #64 wz
0796c     5C 00 90 AD |  if_e	jmp	#LR__0421
07970     08 6A 06 F1 | 	add	local01, #8
07974     35 71 02 FB | 	rdlong	local04, local01
07978     08 6A 86 F1 | 	sub	local01, #8
0797c     80 70 CE F7 | 	test	local04, #128 wz
07980     48 00 90 AD |  if_e	jmp	#LR__0420
07984     2C 6A 06 F1 | 	add	local01, #44
07988     35 71 02 FB | 	rdlong	local04, local01
0798c     2C 6A 86 F1 | 	sub	local01, #44
07990     38 73 02 FB | 	rdlong	local05, local04
07994     04 70 06 F1 | 	add	local04, #4
07998     38 75 02 FB | 	rdlong	local06, local04
0799c     35 5D 02 F6 | 	mov	arg01, local01
079a0     00 5E 06 F6 | 	mov	arg02, #0
079a4     02 60 06 F6 | 	mov	arg03, #2
079a8     07 77 02 F6 | 	mov	local07, objptr
079ac     39 0F 02 F6 | 	mov	objptr, local05
079b0     2D 74 62 FD | 	call	local06
079b4     3B 0F 02 F6 | 	mov	objptr, local07
079b8     08 6A 06 F1 | 	add	local01, #8
079bc     35 71 02 FB | 	rdlong	local04, local01
079c0     80 70 26 F5 | 	andn	local04, #128
079c4     35 71 62 FC | 	wrlong	local04, local01
079c8     08 6A 86 F1 | 	sub	local01, #8
079cc                 | LR__0420
079cc                 | LR__0421
079cc     0C 6C 06 F1 | 	add	local02, #12
079d0     36 5F 02 F6 | 	mov	arg02, local02
079d4     0C 6C 86 F1 | 	sub	local02, #12
079d8     14 6A 06 F1 | 	add	local01, #20
079dc     35 71 02 FB | 	rdlong	local04, local01
079e0     14 6A 86 F1 | 	sub	local01, #20
079e4     38 73 02 FB | 	rdlong	local05, local04
079e8     04 70 06 F1 | 	add	local04, #4
079ec     38 75 02 FB | 	rdlong	local06, local04
079f0     35 5D 02 F6 | 	mov	arg01, local01
079f4     37 61 02 F6 | 	mov	arg03, local03
079f8     07 77 02 F6 | 	mov	local07, objptr
079fc     39 0F 02 F6 | 	mov	objptr, local05
07a00     2D 74 62 FD | 	call	local06
07a04     3B 0F 02 F6 | 	mov	objptr, local07
07a08     80 00 90 FD | 	jmp	#LR__0424
07a0c                 | LR__0422
07a0c     08 6C 06 F1 | 	add	local02, #8
07a10     36 71 02 FB | 	rdlong	local04, local02
07a14     08 6C 86 F1 | 	sub	local02, #8
07a18     01 70 CE F7 | 	test	local04, #1 wz
07a1c     6C 00 90 AD |  if_e	jmp	#LR__0423
07a20     00 6E 0E F2 | 	cmp	local03, #0 wz
07a24     64 00 90 AD |  if_e	jmp	#LR__0423
07a28     2C 6A 06 F1 | 	add	local01, #44
07a2c     35 79 02 FB | 	rdlong	local08, local01
07a30     2C 6A 86 F1 | 	sub	local01, #44
07a34     3C 71 02 F6 | 	mov	local04, local08
07a38     38 73 02 FB | 	rdlong	local05, local04
07a3c     04 70 06 F1 | 	add	local04, #4
07a40     38 7B 02 FB | 	rdlong	local09, local04
07a44     04 70 86 F1 | 	sub	local04, #4
07a48     3D 75 02 F6 | 	mov	local06, local09
07a4c     35 7D 02 F6 | 	mov	local10, local01
07a50     37 7F 02 F6 | 	mov	local11, local03
07a54     3F 7F 62 F6 | 	neg	local11, local11
07a58     3F 81 02 F6 | 	mov	local12, local11
07a5c     01 76 06 F6 | 	mov	local07, #1
07a60     3E 5D 02 F6 | 	mov	arg01, local10
07a64     40 5F 02 F6 | 	mov	arg02, local12
07a68     01 60 06 F6 | 	mov	arg03, #1
07a6c     07 83 02 F6 | 	mov	local13, objptr
07a70     39 0F 02 F6 | 	mov	objptr, local05
07a74     2D 74 62 FD | 	call	local06
07a78     41 0F 02 F6 | 	mov	objptr, local13
07a7c     15 85 02 F6 | 	mov	local14, result1
07a80     42 87 02 F6 | 	mov	local15, local14
07a84     00 86 5E F2 | 	cmps	local15, #0 wcz
07a88     37 87 02 36 |  if_ae	mov	local15, local03
07a8c                 | LR__0423
07a8c                 | LR__0424
07a8c     36 01 68 FC | 	wrlong	#0, local02
07a90     04 6C 06 F1 | 	add	local02, #4
07a94     36 01 68 FC | 	wrlong	#0, local02
07a98     04 6C 06 F1 | 	add	local02, #4
07a9c     36 01 68 FC | 	wrlong	#0, local02
07aa0     00 2A 06 F6 | 	mov	result1, #0
07aa4     AF F0 03 F6 | 	mov	ptra, fp
07aa8     BF 00 A0 FD | 	call	#popregs_
07aac                 | __system____default_flush_ret
07aac     2D 00 64 FD | 	ret
07ab0                 | 
07ab0                 | __system___rxtxioctl_0174
07ab0     02 5A 05 F6 | 	mov	COUNT_, #2
07ab4     B0 00 A0 FD | 	call	#pushregs_
07ab8     2F 6B 02 F6 | 	mov	local01, arg02
07abc     30 6D 02 F6 | 	mov	local02, arg03
07ac0     00 6B 0E F2 | 	cmp	local01, #256 wz
07ac4     0C 00 90 AD |  if_e	jmp	#LR__0425
07ac8     01 6B 0E F2 | 	cmp	local01, #257 wz
07acc     1C 00 90 AD |  if_e	jmp	#LR__0426
07ad0     30 00 90 FD | 	jmp	#LR__0427
07ad4                 | LR__0425
07ad4     08 14 06 F1 | 	add	ptr___system__dat__, #8
07ad8     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07adc     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07ae0     36 2B 62 FC | 	wrlong	result1, local02
07ae4     00 2A 06 F6 | 	mov	result1, #0
07ae8     30 00 90 FD | 	jmp	#LR__0428
07aec                 | LR__0426
07aec     36 5D 02 FB | 	rdlong	arg01, local02
07af0     08 14 06 F1 | 	add	ptr___system__dat__, #8
07af4     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07af8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07afc     00 2A 06 F6 | 	mov	result1, #0
07b00     18 00 90 FD | 	jmp	#LR__0428
07b04                 | LR__0427
07b04     01 00 00 FF 
07b08     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07b0c     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07b10     01 00 00 FF 
07b14     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07b18     01 2A 66 F6 | 	neg	result1, #1
07b1c                 | LR__0428
07b1c     AF F0 03 F6 | 	mov	ptra, fp
07b20     BF 00 A0 FD | 	call	#popregs_
07b24                 | __system___rxtxioctl_0174_ret
07b24     2D 00 64 FD | 	ret
07b28                 | 
07b28                 | __system____dummy_flush_0175
07b28     00 2A 06 F6 | 	mov	result1, #0
07b2c                 | __system____dummy_flush_0175_ret
07b2c     2D 00 64 FD | 	ret
07b30                 | 
07b30                 | __system___vfswrite
07b30     0B 5A 05 F6 | 	mov	COUNT_, #11
07b34     B0 00 A0 FD | 	call	#pushregs_
07b38     2E 6B 02 F6 | 	mov	local01, arg01
07b3c     2F 6D 02 F6 | 	mov	local02, arg02
07b40     30 6F 02 F6 | 	mov	local03, arg03
07b44     36 71 02 F6 | 	mov	local04, local02
07b48     08 6A 06 F1 | 	add	local01, #8
07b4c     35 73 02 FB | 	rdlong	local05, local01
07b50     08 6A 86 F1 | 	sub	local01, #8
07b54     02 72 CE F7 | 	test	local05, #2 wz
07b58     1C 00 90 5D |  if_ne	jmp	#LR__0429
07b5c     01 00 00 FF 
07b60     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07b64     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07b68     01 00 00 FF 
07b6c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07b70     01 2A 66 F6 | 	neg	result1, #1
07b74     70 01 90 FD | 	jmp	#LR__0437
07b78                 | LR__0429
07b78     08 6A 06 F1 | 	add	local01, #8
07b7c     35 73 02 FB | 	rdlong	local05, local01
07b80     08 6A 86 F1 | 	sub	local01, #8
07b84     40 72 CE F7 | 	test	local05, #64 wz
07b88     5C 00 90 AD |  if_e	jmp	#LR__0431
07b8c     08 6A 06 F1 | 	add	local01, #8
07b90     35 73 02 FB | 	rdlong	local05, local01
07b94     08 6A 86 F1 | 	sub	local01, #8
07b98     80 72 CE F7 | 	test	local05, #128 wz
07b9c     48 00 90 AD |  if_e	jmp	#LR__0430
07ba0     2C 6A 06 F1 | 	add	local01, #44
07ba4     35 73 02 FB | 	rdlong	local05, local01
07ba8     2C 6A 86 F1 | 	sub	local01, #44
07bac     39 75 02 FB | 	rdlong	local06, local05
07bb0     04 72 06 F1 | 	add	local05, #4
07bb4     39 77 02 FB | 	rdlong	local07, local05
07bb8     35 5D 02 F6 | 	mov	arg01, local01
07bbc     00 5E 06 F6 | 	mov	arg02, #0
07bc0     02 60 06 F6 | 	mov	arg03, #2
07bc4     07 79 02 F6 | 	mov	local08, objptr
07bc8     3A 0F 02 F6 | 	mov	objptr, local06
07bcc     2D 76 62 FD | 	call	local07
07bd0     3C 0F 02 F6 | 	mov	objptr, local08
07bd4     08 6A 06 F1 | 	add	local01, #8
07bd8     35 73 02 FB | 	rdlong	local05, local01
07bdc     80 72 26 F5 | 	andn	local05, #128
07be0     35 73 62 FC | 	wrlong	local05, local01
07be4     08 6A 86 F1 | 	sub	local01, #8
07be8                 | LR__0430
07be8                 | LR__0431
07be8     14 6A 06 F1 | 	add	local01, #20
07bec     35 73 0A FB | 	rdlong	local05, local01 wz
07bf0     14 6A 86 F1 | 	sub	local01, #20
07bf4     7C 00 90 AD |  if_e	jmp	#LR__0433
07bf8     14 6A 06 F1 | 	add	local01, #20
07bfc     35 73 02 FB | 	rdlong	local05, local01
07c00     14 6A 86 F1 | 	sub	local01, #20
07c04     39 75 02 FB | 	rdlong	local06, local05
07c08     04 72 06 F1 | 	add	local05, #4
07c0c     39 77 02 FB | 	rdlong	local07, local05
07c10     36 5F 02 F6 | 	mov	arg02, local02
07c14     37 61 02 F6 | 	mov	arg03, local03
07c18     35 5D 02 F6 | 	mov	arg01, local01
07c1c     07 79 02 F6 | 	mov	local08, objptr
07c20     3A 0F 02 F6 | 	mov	objptr, local06
07c24     2D 76 62 FD | 	call	local07
07c28     3C 0F 02 F6 | 	mov	objptr, local08
07c2c     15 7B 02 F6 | 	mov	local09, result1
07c30     00 7A 5E F2 | 	cmps	local09, #0 wcz
07c34     34 00 90 3D |  if_ae	jmp	#LR__0432
07c38     08 6A 06 F1 | 	add	local01, #8
07c3c     35 73 02 FB | 	rdlong	local05, local01
07c40     20 72 46 F5 | 	or	local05, #32
07c44     35 73 62 FC | 	wrlong	local05, local01
07c48     01 00 00 FF 
07c4c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c50     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07c54     01 00 00 FF 
07c58     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c5c     00 7A 0E F2 | 	cmp	local09, #0 wz
07c60     01 2A 66 56 |  if_ne	neg	result1, #1
07c64     00 2A 06 A6 |  if_e	mov	result1, #0
07c68     7C 00 90 FD | 	jmp	#LR__0437
07c6c                 | LR__0432
07c6c     3D 2B 02 F6 | 	mov	result1, local09
07c70     74 00 90 FD | 	jmp	#LR__0437
07c74                 | LR__0433
07c74     18 6A 06 F1 | 	add	local01, #24
07c78     35 7D 0A FB | 	rdlong	local10, local01 wz
07c7c     18 6A 86 F1 | 	sub	local01, #24
07c80     1C 00 90 5D |  if_ne	jmp	#LR__0434
07c84     01 00 00 FF 
07c88     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c8c     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07c90     01 00 00 FF 
07c94     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c98     01 2A 66 F6 | 	neg	result1, #1
07c9c     48 00 90 FD | 	jmp	#LR__0437
07ca0                 | LR__0434
07ca0     00 7A 06 F6 | 	mov	local09, #0
07ca4                 | LR__0435
07ca4     00 6E 1E F2 | 	cmp	local03, #0 wcz
07ca8     38 00 90 ED |  if_be	jmp	#LR__0436
07cac     3E 73 02 F6 | 	mov	local05, local10
07cb0     39 75 02 FB | 	rdlong	local06, local05
07cb4     04 72 06 F1 | 	add	local05, #4
07cb8     39 77 02 FB | 	rdlong	local07, local05
07cbc     38 5D C2 FA | 	rdbyte	arg01, local04
07cc0     35 5F 02 F6 | 	mov	arg02, local01
07cc4     07 7F 02 F6 | 	mov	local11, objptr
07cc8     3A 0F 02 F6 | 	mov	objptr, local06
07ccc     01 70 06 F1 | 	add	local04, #1
07cd0     2D 76 62 FD | 	call	local07
07cd4     3F 0F 02 F6 | 	mov	objptr, local11
07cd8     15 7B 02 F1 | 	add	local09, result1
07cdc     01 6E 86 F1 | 	sub	local03, #1
07ce0     C0 FF 9F FD | 	jmp	#LR__0435
07ce4                 | LR__0436
07ce4     3D 2B 02 F6 | 	mov	result1, local09
07ce8                 | LR__0437
07ce8     AF F0 03 F6 | 	mov	ptra, fp
07cec     BF 00 A0 FD | 	call	#popregs_
07cf0                 | __system___vfswrite_ret
07cf0     2D 00 64 FD | 	ret
07cf4                 | 
07cf4                 | __system___vfsread
07cf4     0F 5A 05 F6 | 	mov	COUNT_, #15
07cf8     B0 00 A0 FD | 	call	#pushregs_
07cfc     2C F0 07 F1 | 	add	ptra, #44
07d00     04 5E 05 F1 | 	add	fp, #4
07d04     AF 5C 62 FC | 	wrlong	arg01, fp
07d08     04 5E 05 F1 | 	add	fp, #4
07d0c     AF 5E 62 FC | 	wrlong	arg02, fp
07d10     04 5E 05 F1 | 	add	fp, #4
07d14     AF 60 62 FC | 	wrlong	arg03, fp
07d18     04 5E 85 F1 | 	sub	fp, #4
07d1c     AF 6A 02 FB | 	rdlong	local01, fp
07d20     14 5E 05 F1 | 	add	fp, #20
07d24     AF 6A 62 FC | 	wrlong	local01, fp
07d28     04 5E 05 F1 | 	add	fp, #4
07d2c     AF 00 68 FC | 	wrlong	#0, fp
07d30     1C 5E 85 F1 | 	sub	fp, #28
07d34     AF 6C 02 FB | 	rdlong	local02, fp
07d38     04 5E 85 F1 | 	sub	fp, #4
07d3c     08 6C 06 F1 | 	add	local02, #8
07d40     36 6B 02 FB | 	rdlong	local01, local02
07d44     01 6A CE F7 | 	test	local01, #1 wz
07d48     1C 00 90 5D |  if_ne	jmp	#LR__0438
07d4c     01 00 00 FF 
07d50     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d54     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07d58     01 00 00 FF 
07d5c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d60     01 2A 66 F6 | 	neg	result1, #1
07d64     9C 02 90 FD | 	jmp	#LR__0446
07d68                 | LR__0438
07d68     04 5E 05 F1 | 	add	fp, #4
07d6c     AF 6A 02 FB | 	rdlong	local01, fp
07d70     04 5E 85 F1 | 	sub	fp, #4
07d74     10 6A 06 F1 | 	add	local01, #16
07d78     35 6F 0A FB | 	rdlong	local03, local01 wz
07d7c     B4 00 90 AD |  if_e	jmp	#LR__0440
07d80     04 5E 05 F1 | 	add	fp, #4
07d84     AF 70 02 FB | 	rdlong	local04, fp
07d88     10 70 06 F1 | 	add	local04, #16
07d8c     38 6B 02 FB | 	rdlong	local01, local04
07d90     35 6D 02 FB | 	rdlong	local02, local01
07d94     04 6A 06 F1 | 	add	local01, #4
07d98     35 6F 02 FB | 	rdlong	local03, local01
07d9c     AF 5C 02 FB | 	rdlong	arg01, fp
07da0     04 5E 05 F1 | 	add	fp, #4
07da4     AF 5E 02 FB | 	rdlong	arg02, fp
07da8     04 5E 05 F1 | 	add	fp, #4
07dac     AF 60 02 FB | 	rdlong	arg03, fp
07db0     0C 5E 85 F1 | 	sub	fp, #12
07db4     07 73 02 F6 | 	mov	local05, objptr
07db8     36 0F 02 F6 | 	mov	objptr, local02
07dbc     2D 6E 62 FD | 	call	local03
07dc0     39 0F 02 F6 | 	mov	objptr, local05
07dc4     10 5E 05 F1 | 	add	fp, #16
07dc8     AF 2A 62 FC | 	wrlong	result1, fp
07dcc     10 5E 85 F1 | 	sub	fp, #16
07dd0     00 2A 5E F2 | 	cmps	result1, #0 wcz
07dd4     4C 00 90 3D |  if_ae	jmp	#LR__0439
07dd8     04 5E 05 F1 | 	add	fp, #4
07ddc     AF 6A 02 FB | 	rdlong	local01, fp
07de0     35 71 02 F6 | 	mov	local04, local01
07de4     08 70 06 F1 | 	add	local04, #8
07de8     38 6F 02 FB | 	rdlong	local03, local04
07dec     20 6E 46 F5 | 	or	local03, #32
07df0     08 6A 06 F1 | 	add	local01, #8
07df4     35 6F 62 FC | 	wrlong	local03, local01
07df8     0C 5E 05 F1 | 	add	fp, #12
07dfc     AF 5C 0A FB | 	rdlong	arg01, fp wz
07e00     10 5E 85 F1 | 	sub	fp, #16
07e04     01 00 00 FF 
07e08     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07e0c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07e10     01 00 00 FF 
07e14     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07e18     01 2A 66 56 |  if_ne	neg	result1, #1
07e1c     00 2A 06 A6 |  if_e	mov	result1, #0
07e20     E0 01 90 FD | 	jmp	#LR__0446
07e24                 | LR__0439
07e24     10 5E 05 F1 | 	add	fp, #16
07e28     AF 2A 02 FB | 	rdlong	result1, fp
07e2c     10 5E 85 F1 | 	sub	fp, #16
07e30     D0 01 90 FD | 	jmp	#LR__0446
07e34                 | LR__0440
07e34     04 5E 05 F1 | 	add	fp, #4
07e38     AF 6A 02 FB | 	rdlong	local01, fp
07e3c     1C 6A 06 F1 | 	add	local01, #28
07e40     35 6F 02 FB | 	rdlong	local03, local01
07e44     14 5E 05 F1 | 	add	fp, #20
07e48     AF 6E 62 FC | 	wrlong	local03, fp
07e4c     AF 6A 0A FB | 	rdlong	local01, fp wz
07e50     18 5E 85 F1 | 	sub	fp, #24
07e54     1C 00 90 5D |  if_ne	jmp	#LR__0441
07e58     01 00 00 FF 
07e5c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07e60     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07e64     01 00 00 FF 
07e68     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07e6c     01 2A 66 F6 | 	neg	result1, #1
07e70     90 01 90 FD | 	jmp	#LR__0446
07e74                 | LR__0441
07e74     04 5E 05 F1 | 	add	fp, #4
07e78     AF 6A 02 FB | 	rdlong	local01, fp
07e7c     04 5E 85 F1 | 	sub	fp, #4
07e80     24 6A 06 F1 | 	add	local01, #36
07e84     35 6F 0A FB | 	rdlong	local03, local01 wz
07e88     A0 00 90 AD |  if_e	jmp	#LR__0443
07e8c     24 5E 05 F1 | 	add	fp, #36
07e90     AF 74 02 F6 | 	mov	local06, fp
07e94     20 5E 85 F1 | 	sub	fp, #32
07e98     AF 76 02 FB | 	rdlong	local07, fp
07e9c     3B 71 02 F6 | 	mov	local04, local07
07ea0     24 70 06 F1 | 	add	local04, #36
07ea4     38 79 02 FB | 	rdlong	local08, local04
07ea8     3C 6B 02 F6 | 	mov	local01, local08
07eac     35 6D 02 FB | 	rdlong	local02, local01
07eb0     04 6A 06 F1 | 	add	local01, #4
07eb4     35 7B 02 FB | 	rdlong	local09, local01
07eb8     3D 6F 02 F6 | 	mov	local03, local09
07ebc     3B 7D 02 F6 | 	mov	local10, local07
07ec0     04 5E 85 F1 | 	sub	fp, #4
07ec4     3E 7F 02 F6 | 	mov	local11, local10
07ec8     00 81 06 F6 | 	mov	local12, #256
07ecc     3A 83 02 F6 | 	mov	local13, local06
07ed0     3F 5D 02 F6 | 	mov	arg01, local11
07ed4     00 5F 06 F6 | 	mov	arg02, #256
07ed8     41 61 02 F6 | 	mov	arg03, local13
07edc     07 85 02 F6 | 	mov	local14, objptr
07ee0     36 0F 02 F6 | 	mov	objptr, local02
07ee4     2D 6E 62 FD | 	call	local03
07ee8     42 0F 02 F6 | 	mov	objptr, local14
07eec     15 87 02 F6 | 	mov	local15, result1
07ef0     10 5E 05 F1 | 	add	fp, #16
07ef4     AF 86 62 FC | 	wrlong	local15, fp
07ef8     AF 6C 0A FB | 	rdlong	local02, fp wz
07efc     10 5E 85 F1 | 	sub	fp, #16
07f00     28 00 90 5D |  if_ne	jmp	#LR__0442
07f04     24 5E 05 F1 | 	add	fp, #36
07f08     AF 70 02 FB | 	rdlong	local04, fp
07f0c     24 5E 85 F1 | 	sub	fp, #36
07f10     38 6F 02 F6 | 	mov	local03, local04
07f14     02 6E 0E F5 | 	and	local03, #2 wz
07f18     10 00 90 AD |  if_e	jmp	#LR__0442
07f1c     01 6A 06 F6 | 	mov	local01, #1
07f20     20 5E 05 F1 | 	add	fp, #32
07f24     AF 02 68 FC | 	wrlong	#1, fp
07f28     20 5E 85 F1 | 	sub	fp, #32
07f2c                 | LR__0442
07f2c                 | LR__0443
07f2c     10 5E 05 F1 | 	add	fp, #16
07f30     AF 00 68 FC | 	wrlong	#0, fp
07f34     10 5E 85 F1 | 	sub	fp, #16
07f38                 | LR__0444
07f38     0C 5E 05 F1 | 	add	fp, #12
07f3c     AF 6A 02 FB | 	rdlong	local01, fp
07f40     0C 5E 85 F1 | 	sub	fp, #12
07f44     00 6A 1E F2 | 	cmp	local01, #0 wcz
07f48     AC 00 90 ED |  if_be	jmp	#LR__0445
07f4c     18 5E 05 F1 | 	add	fp, #24
07f50     AF 6A 02 FB | 	rdlong	local01, fp
07f54     35 6D 02 FB | 	rdlong	local02, local01
07f58     04 6A 06 F1 | 	add	local01, #4
07f5c     35 6F 02 FB | 	rdlong	local03, local01
07f60     14 5E 85 F1 | 	sub	fp, #20
07f64     AF 5C 02 FB | 	rdlong	arg01, fp
07f68     04 5E 85 F1 | 	sub	fp, #4
07f6c     07 7F 02 F6 | 	mov	local11, objptr
07f70     36 0F 02 F6 | 	mov	objptr, local02
07f74     2D 6E 62 FD | 	call	local03
07f78     3F 0F 02 F6 | 	mov	objptr, local11
07f7c     15 7D 02 F6 | 	mov	local10, result1
07f80     14 5E 05 F1 | 	add	fp, #20
07f84     AF 7C 62 FC | 	wrlong	local10, fp
07f88     14 5E 85 F1 | 	sub	fp, #20
07f8c     00 7C 5E F2 | 	cmps	local10, #0 wcz
07f90     64 00 90 CD |  if_b	jmp	#LR__0445
07f94     1C 5E 05 F1 | 	add	fp, #28
07f98     AF 6A 02 FB | 	rdlong	local01, fp
07f9c     35 6F 02 F6 | 	mov	local03, local01
07fa0     01 6E 06 F1 | 	add	local03, #1
07fa4     AF 6E 62 FC | 	wrlong	local03, fp
07fa8     08 5E 85 F1 | 	sub	fp, #8
07fac     AF 76 02 FB | 	rdlong	local07, fp
07fb0     35 77 42 FC | 	wrbyte	local07, local01
07fb4     04 5E 85 F1 | 	sub	fp, #4
07fb8     AF 6A 02 FB | 	rdlong	local01, fp
07fbc     01 6A 06 F1 | 	add	local01, #1
07fc0     AF 6A 62 FC | 	wrlong	local01, fp
07fc4     04 5E 85 F1 | 	sub	fp, #4
07fc8     AF 6A 02 FB | 	rdlong	local01, fp
07fcc     01 6A 86 F1 | 	sub	local01, #1
07fd0     AF 6A 62 FC | 	wrlong	local01, fp
07fd4     14 5E 05 F1 | 	add	fp, #20
07fd8     AF 6A 0A FB | 	rdlong	local01, fp wz
07fdc     20 5E 85 F1 | 	sub	fp, #32
07fe0     54 FF 9F AD |  if_e	jmp	#LR__0444
07fe4     14 5E 05 F1 | 	add	fp, #20
07fe8     AF 6E 02 FB | 	rdlong	local03, fp
07fec     14 5E 85 F1 | 	sub	fp, #20
07ff0     0A 6E 0E F2 | 	cmp	local03, #10 wz
07ff4     40 FF 9F 5D |  if_ne	jmp	#LR__0444
07ff8                 | LR__0445
07ff8     10 5E 05 F1 | 	add	fp, #16
07ffc     AF 2A 02 FB | 	rdlong	result1, fp
08000     10 5E 85 F1 | 	sub	fp, #16
08004                 | LR__0446
08004     AF F0 03 F6 | 	mov	ptra, fp
08008     BF 00 A0 FD | 	call	#popregs_
0800c                 | __system___vfsread_ret
0800c     2D 00 64 FD | 	ret
08010                 | 
08010                 | ' 	
08010                 | ' 	FUNCTION pfunc(c as integer) as integer
08010                 | ___strs_cl_pfunc
08010                 | ' 		if (i < 16) then
08010     04 0E 06 F1 | 	add	objptr, #4
08014     07 31 02 FB | 	rdlong	_var01, objptr
08018     04 0E 86 F1 | 	sub	objptr, #4
0801c     10 30 5E F2 | 	cmps	_var01, #16 wcz
08020     2C 00 90 3D |  if_ae	jmp	#LR__0447
08024     07 33 02 FB | 	rdlong	_var02, objptr
08028     04 0E 06 F1 | 	add	objptr, #4
0802c     07 35 02 FB | 	rdlong	_var03, objptr
08030     19 35 02 F1 | 	add	_var03, _var02
08034     1A 5D 42 FC | 	wrbyte	arg01, _var03
08038     07 31 02 FB | 	rdlong	_var01, objptr
0803c     01 30 06 F1 | 	add	_var01, #1
08040     07 31 62 FC | 	wrlong	_var01, objptr
08044     04 0E 86 F1 | 	sub	objptr, #4
08048                 | ' 			p(i) = c
08048                 | ' 			i = i+1
08048                 | ' 			return 1
08048     01 2A 06 F6 | 	mov	result1, #1
0804c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
08050                 | LR__0447
08050                 | ' 			return -1
08050     01 2A 66 F6 | 	neg	result1, #1
08054                 | ___strs_cl_pfunc_ret
08054     2D 00 64 FD | 	ret
08058                 | 
08058                 | __struct__s_vfs_file_t_putchar
08058     04 5A 05 F6 | 	mov	COUNT_, #4
0805c     B0 00 A0 FD | 	call	#pushregs_
08060     18 0E 06 F1 | 	add	objptr, #24
08064     07 6B 0A FB | 	rdlong	local01, objptr wz
08068     18 0E 86 F1 | 	sub	objptr, #24
0806c     00 2A 06 A6 |  if_e	mov	result1, #0
08070     3C 00 90 AD |  if_e	jmp	#LR__0448
08074     18 0E 06 F1 | 	add	objptr, #24
08078     07 6B 02 FB | 	rdlong	local01, objptr
0807c     18 0E 86 F1 | 	sub	objptr, #24
08080     35 6D 02 FB | 	rdlong	local02, local01
08084     04 6A 06 F1 | 	add	local01, #4
08088     35 6F 02 FB | 	rdlong	local03, local01
0808c     07 5F 02 F6 | 	mov	arg02, objptr
08090     07 71 02 F6 | 	mov	local04, objptr
08094     36 0F 02 F6 | 	mov	objptr, local02
08098     2D 6E 62 FD | 	call	local03
0809c     38 0F 02 F6 | 	mov	objptr, local04
080a0     00 2A 5E F2 | 	cmps	result1, #0 wcz
080a4     00 6A 06 C6 |  if_b	mov	local01, #0
080a8     01 6A 06 36 |  if_ae	mov	local01, #1
080ac     35 2B 02 F6 | 	mov	result1, local01
080b0                 | LR__0448
080b0     AF F0 03 F6 | 	mov	ptra, fp
080b4     BF 00 A0 FD | 	call	#popregs_
080b8                 | __struct__s_vfs_file_t_putchar_ret
080b8     2D 00 64 FD | 	ret
080bc                 | 
080bc                 | __struct__s_vfs_file_t_getchar
080bc     04 5A 05 F6 | 	mov	COUNT_, #4
080c0     B0 00 A0 FD | 	call	#pushregs_
080c4     1C 0E 06 F1 | 	add	objptr, #28
080c8     07 6B 0A FB | 	rdlong	local01, objptr wz
080cc     1C 0E 86 F1 | 	sub	objptr, #28
080d0     01 2A 66 A6 |  if_e	neg	result1, #1
080d4     2C 00 90 AD |  if_e	jmp	#LR__0449
080d8                 | '         return getcf(__this);
080d8     1C 0E 06 F1 | 	add	objptr, #28
080dc     07 6B 02 FB | 	rdlong	local01, objptr
080e0     1C 0E 86 F1 | 	sub	objptr, #28
080e4     35 6D 02 FB | 	rdlong	local02, local01
080e8     04 6A 06 F1 | 	add	local01, #4
080ec     35 6F 02 FB | 	rdlong	local03, local01
080f0     07 5D 02 F6 | 	mov	arg01, objptr
080f4     07 71 02 F6 | 	mov	local04, objptr
080f8     36 0F 02 F6 | 	mov	objptr, local02
080fc     2D 6E 62 FD | 	call	local03
08100     38 0F 02 F6 | 	mov	objptr, local04
08104                 | LR__0449
08104     AF F0 03 F6 | 	mov	ptra, fp
08108     BF 00 A0 FD | 	call	#popregs_
0810c                 | __struct__s_vfs_file_t_getchar_ret
0810c     2D 00 64 FD | 	ret
08110                 | 
08110                 | __struct___bas_wrap_sender_tx
08110     04 5A 05 F6 | 	mov	COUNT_, #4
08114     B0 00 A0 FD | 	call	#pushregs_
08118     07 6B 02 FB | 	rdlong	local01, objptr
0811c     35 6D 02 FB | 	rdlong	local02, local01
08120     04 6A 06 F1 | 	add	local01, #4
08124     35 6F 02 FB | 	rdlong	local03, local01
08128     07 71 02 F6 | 	mov	local04, objptr
0812c     36 0F 02 F6 | 	mov	objptr, local02
08130     2D 6E 62 FD | 	call	local03
08134     38 0F 02 F6 | 	mov	objptr, local04
08138     01 2A 06 F6 | 	mov	result1, #1
0813c     AF F0 03 F6 | 	mov	ptra, fp
08140     BF 00 A0 FD | 	call	#popregs_
08144                 | __struct___bas_wrap_sender_tx_ret
08144     2D 00 64 FD | 	ret
08148                 | 
08148                 | LR__0450
08148     20          | 	byte	" "
08149     00          | 	byte	0
0814a                 | LR__0451
0814a                 | 	byte	
0814a     00          | 	byte	0
0814b                 | LR__0452
0814b                 | 	byte	
0814b     00          | 	byte	0
0814c                 | LR__0453
0814c     20 21 21 21 
08150     20 63 6F 72 
08154     72 75 70 74 
08158     65 64 20 68 
0815c     65 61 70 3F 
08160     3F 3F 20 21 
08164     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
08167     00          | 	byte	0
08168                 | LR__0454
08168     20 21 21 21 
0816c     20 6F 75 74 
08170     20 6F 66 20 
08174     68 65 61 70 
08178     20 6D 65 6D 
0817c     6F 72 79 20 
08180     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
08184     00          | 	byte	0
08185                 | LR__0455
08185     20 21 21 21 
08189     20 63 6F 72 
0818d     72 75 70 74 
08191     65 64 20 68 
08195     65 61 70 20 
08199     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0819d     00          | 	byte	0
0819e                 | LR__0456
0819e     43 6F 75 6E 
081a2     74 65 72 3A 
081a6     20          | 	byte	"Counter: "
081a7     00          | 	byte	0
081a8                 | LR__0457
081a8     4E 61 6D 65 
081ac     20 20 20 20 
081b0     20 20 20 20 
081b4     20 20 20 20 
081b8     20 20 20 20 
081bc     20 20 20 6C 
081c0     65 6E 20 20 
081c4     20 66 74 20 
081c8     76 6F 6C 20 
081cc     72 65 70 20 
081d0     20 20 72 2E 
081d4     6C 65 6E 20 
081d8     20 20 20 20 
081dc     20 20 20 20 
081e0     4E 61 6D 65 
081e4     20 20 20 20 
081e8     20 20 20 20 
081ec     20 20 20 20 
081f0     20 20 20 20 
081f4     20 20 20 6C 
081f8     65 6E 20 20 
081fc     20 66 74 20 
08200     76 6F 6C 20 
08204     72 65 70 20 
08208     20 20 72 2E 
0820c     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
08210     00          | 	byte	0
08211                 | LR__0458
08211     53          | 	byte	"S"
08212     00          | 	byte	0
08213                 | LR__0459
08213     20 20 20 20 
08217     20 20 20 20 
0821b     20 20 20 20 
0821f     20 20 20 20 
08223     20 20 20 20 
08227     20 20       | 	byte	"                      "
08229     00          | 	byte	0
0822a                 | LR__0460
0822a     20          | 	byte	" "
0822b     00          | 	byte	0
0822c                 | LR__0461
0822c     73 61 6D 70 
08230     6C 65 73 20 
08234     6D 6F 64 75 
08238     6C 65       | 	byte	"samples module"
0823a     00          | 	byte	0
0823b     00          | 	alignl
0823c                 | _dat_
0823c     6C 75 63 6B 
08240     79 20 6C 75 
08244     6B 65 20 31 
08248     00 00 00 00 | module file "../../../mod/luckyluk.mod"
0824c     00 00 00 00 
08250     6C 65 64 73 
08254     79 6E 74 68 
08258     00 00 00 00 | 	byte	$00, $00, $00, $00, $6c, $65, $64, $73, $79, $6e, $74, $68, $00, $00, $00, $00
0825c     00 00 00 00 
08260     00 00 00 00 
08264     00 00       | 	byte	$00[10]
08266     0D 74 00 23 
0826a     07 6B 05 FC 
0826e     68 61 75 21 
08272     00 00 00 00 | 	byte	$0d, $74, $00, $23, $07, $6b, $05, $fc, $68, $61, $75, $21, $00, $00, $00, $00
08276     00 00 00 00 
0827a     00 00 00 00 
0827e     00 00 00 00 
08282     00 00       | 	byte	$00[14]
08284     06 21 00 40 
08288     00 00 00 01 
0828c     70 6C 79 74 
08290     61 00 00 00 | 	byte	$06, $21, $00, $40, $00, $00, $00, $01, $70, $6c, $79, $74, $61, $00, $00, $00
08294     00 00 00 00 
08298     00 00 00 00 
0829c     00 00 00 00 
082a0     00 00       | 	byte	$00[14]
082a2     05 61 00 40 
082a6     00 00 00 01 
082aa     72 65 64 62 
082ae     61 73 73 64 | 	byte	$05, $61, $00, $40, $00, $00, $00, $01, $72, $65, $64, $62, $61, $73, $73, $64
082b2     72 75 6D 00 
082b6     00 00 00 00 
082ba     00 00 00 00 
082be     00 00 01 E1 | 	byte	$72, $75, $6d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $e1
082c2     00 40 00 00 
082c6     00 01 72 65 
082ca     64 73 6E 61 
082ce     72 65 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $72, $65, $64, $73, $6e, $61, $72, $65, $00, $00
082d2     00 00 00 00 
082d6     00 00 00 00 
082da     00 00 00 00 | 	byte	$00[12]
082de     06 31 00 40 
082e2     00 00 00 01 
082e6     52 75 65 6C 
082ea     70 00 00 00 | 	byte	$06, $31, $00, $40, $00, $00, $00, $01, $52, $75, $65, $6c, $70, $00, $00, $00
082ee     00 00 00 00 
082f2     00 00 00 00 
082f6     00 00 00 00 
082fa     00 00       | 	byte	$00[14]
082fc     06 41 00 40 
08300     00 00 00 01 
08304     73 6D 69 65 
08308     63 68 00 00 | 	byte	$06, $41, $00, $40, $00, $00, $00, $01, $73, $6d, $69, $65, $63, $68, $00, $00
0830c     00 00 00 00 
08310     00 00 00 00 
08314     00 00 00 00 
08318     00 00       | 	byte	$00[14]
0831a     13 91 00 40 
0831e     00 00 00 01 
08322     61 61 61 61 
08326     68 68 68 68 | 	byte	$13, $91, $00, $40, $00, $00, $00, $01, $61, $61, $61, $61, $68, $68, $68, $68
0832a     00 00 00 00 
0832e     00 00 00 00 
08332     00 00 00 00 
08336     00 00       | 	byte	$00[14]
08338     0E 11 00 40 
0833c     09 1F 04 DA 
08340     62 61 73 73 
08344     35 00 00 00 | 	byte	$0e, $11, $00, $40, $09, $1f, $04, $da, $62, $61, $73, $73, $35, $00, $00, $00
08348     00 00 00 00 
0834c     00 00 00 00 
08350     00 00 00 00 
08354     00 00       | 	byte	$00[14]
08356     03 0B 00 1C 
0835a     02 CB 00 40 
0835e     69 6D 2E 68 
08362     69 68 61 74 | 	byte	$03, $0b, $00, $1c, $02, $cb, $00, $40, $69, $6d, $2e, $68, $69, $68, $61, $74
08366     00 00 00 00 
0836a     00 00 00 00 
0836e     00 00 00 00 
08372     00 00       | 	byte	$00[14]
08374     02 95 00 40 
08378     00 00 00 01 
0837c     66 61 74 6F 
08380     70 65 6E 68 | 	byte	$02, $95, $00, $40, $00, $00, $00, $01, $66, $61, $74, $6f, $70, $65, $6e, $68
08384     68 32 00 00 
08388     00 00 00 00 
0838c     00 00 00 00 
08390     00 00 08 51 | 	byte	$68, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $51
08394     00 40 00 00 
08398     00 01 00 00 
0839c     00 00 00 00 
083a0     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083a4     00 00 00 00 
083a8     00 00 00 00 
083ac     00 00 00 00 
083b0     00 00 00 00 
083b4     00 00 00    | 	byte	$00[19]
083b7     01 00 00 00 
083bb     00 00 00 00 
083bf     00 00 00 00 
083c3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083c7     00 00 00 00 
083cb     00 00 00 00 
083cf     00 00 00 00 
083d3     00 00       | 	byte	$00[14]
083d5     01 00 00 00 
083d9     00 00 00 00 
083dd     00 00 00 00 
083e1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083e5     00 00 00 00 
083e9     00 00 00 00 
083ed     00 00 00 00 
083f1     00 00       | 	byte	$00[14]
083f3     01 00 00 00 
083f7     00 00 00 00 
083fb     00 00 00 00 
083ff     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08403     00 00 00 00 
08407     00 00 00 00 
0840b     00 00 00 00 
0840f     00 00       | 	byte	$00[14]
08411     01 00 00 00 
08415     00 00 00 00 
08419     00 00 00 00 
0841d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08421     00 00 00 00 
08425     00 00 00 00 
08429     00 00 00 00 
0842d     00 00       | 	byte	$00[14]
0842f     01 00 00 00 
08433     00 00 00 00 
08437     00 00 00 00 
0843b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0843f     00 00 00 00 
08443     00 00 00 00 
08447     00 00 00 00 
0844b     00 00       | 	byte	$00[14]
0844d     01 00 00 00 
08451     00 00 00 00 
08455     00 00 00 00 
08459     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0845d     00 00 00 00 
08461     00 00 00 00 
08465     00 00 00 00 
08469     00 00       | 	byte	$00[14]
0846b     01 00 00 00 
0846f     00 00 00 00 
08473     00 00 00 00 
08477     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0847b     00 00 00 00 
0847f     00 00 00 00 
08483     00 00 00 00 
08487     00 00       | 	byte	$00[14]
08489     01 00 00 00 
0848d     00 00 00 00 
08491     00 00 00 00 
08495     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08499     00 00 00 00 
0849d     00 00 00 00 
084a1     00 00 00 00 
084a5     00 00       | 	byte	$00[14]
084a7     01 00 00 00 
084ab     00 00 00 00 
084af     00 00 00 00 
084b3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084b7     00 00 00 00 
084bb     00 00 00 00 
084bf     00 00 00 00 
084c3     00 00       | 	byte	$00[14]
084c5     01 00 00 00 
084c9     00 00 00 00 
084cd     00 00 00 00 
084d1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084d5     00 00 00 00 
084d9     00 00 00 00 
084dd     00 00 00 00 
084e1     00 00       | 	byte	$00[14]
084e3     01 00 00 00 
084e7     00 00 00 00 
084eb     00 00 00 00 
084ef     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084f3     00 00 00 00 
084f7     00 00 00 00 
084fb     00 00 00 00 
084ff     00 00       | 	byte	$00[14]
08501     01 00 00 00 
08505     00 00 00 00 
08509     00 00 00 00 
0850d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08511     00 00 00 00 
08515     00 00 00 00 
08519     00 00 00 00 
0851d     00 00       | 	byte	$00[14]
0851f     01 00 00 00 
08523     00 00 00 00 
08527     00 00 00 00 
0852b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0852f     00 00 00 00 
08533     00 00 00 00 
08537     00 00 00 00 
0853b     00 00       | 	byte	$00[14]
0853d     01 00 00 00 
08541     00 00 00 00 
08545     00 00 00 00 
08549     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0854d     00 00 00 00 
08551     00 00 00 00 
08555     00 00 00 00 
08559     00 00       | 	byte	$00[14]
0855b     01 00 00 00 
0855f     00 00 00 00 
08563     00 00 00 00 
08567     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0856b     00 00 00 00 
0856f     00 00 00 00 
08573     00 00 00 00 
08577     00 00       | 	byte	$00[14]
08579     01 00 00 00 
0857d     00 00 00 00 
08581     00 00 00 00 
08585     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08589     00 00 00 00 
0858d     00 00 00 00 
08591     00 00 00 00 
08595     00 00       | 	byte	$00[14]
08597     01 00 00 00 
0859b     00 00 00 00 
0859f     00 00 00 00 
085a3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085a7     00 00 00 00 
085ab     00 00 00 00 
085af     00 00 00 00 
085b3     00 00       | 	byte	$00[14]
085b5     01 00 00 00 
085b9     00 00 00 00 
085bd     00 00 00 00 
085c1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085c5     00 00 00 00 
085c9     00 00 00 00 
085cd     00 00 00 00 
085d1     00 00       | 	byte	$00[14]
085d3     01 00 00 00 
085d7     00 00 00 00 
085db     00 00 00 00 
085df     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085e3     00 00 00 00 
085e7     00 00 00 00 
085eb     00 00 00 00 
085ef     00 00       | 	byte	$00[14]
085f1     01 07 00 00 
085f5     01 02 01 02 
085f9     03 04 00 00 
085fd     00 00 00 00 | 	byte	$01, $07, $00, $00, $01, $02, $01, $02, $03, $04, $00, $00, $00, $00, $00, $00
08601     00 00 00 00 
      ...             
0866d     00 00 00 00 
08671     00 00 00    | 	byte	$00[115]
08674     4D 2E 4B 2E 
08678     01 AC 90 00 
0867c     00 00 0F 0A 
08680     01 53 20 00 | 	byte	$4d, $2e, $4b, $2e, $01, $ac, $90, $00, $00, $00, $0f, $0a, $01, $53, $20, $00
08684     00 00 00 00 
08688     00 00 00 00 
0868c     00 00       | 	byte	$00[10]
0868e     0A 01 00 00 
08692     00 00 00 00 
08696     00 00 01 1D 
0869a     90 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $00
0869e     0A 00 00 00 
086a2     00 00 00 00 
086a6     00 00 00 FE 
086aa     90 00 00 00 | 	byte	$0a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $90, $00, $00, $00
086ae     0A 01 01 53 
086b2     30 00 00 00 
086b6     00 00 00 00 
086ba     00 00 00 00 | 	byte	$0a, $01, $01, $53, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086be     0A 00 00 00 
086c2     00 00 00 00 
086c6     00 00 01 1D 
086ca     90 00 00 00 | 	byte	$0a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $00
086ce     0A 01 00 00 
086d2     00 00 00 00 
086d6     00 00 01 AC 
086da     90 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $00
086de     0A 01 01 53 
086e2     20 00 00 00 
086e6     00 00 00 00 
086ea     00 00 00 00 | 	byte	$0a, $01, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086ee     0A 00 00 00 
086f2     00 00 00 00 
086f6     00 00 01 1D 
086fa     90 00 00 00 | 	byte	$0a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $00
086fe     0A 01 00 00 
08702     00 00 00 00 
08706     00 00 00 FE 
0870a     90 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $90, $00, $00, $00
0870e     0A 01 01 53 
08712     30 00 00 00 
08716     00 00 00 00 
0871a     00 00 00 00 | 	byte	$0a, $01, $01, $53, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0871e     0A 01 00 00 
08722     00 00 00 00 
08726     00 00 01 1D 
0872a     90 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $00
0872e     00 00 00 00 
08732     00 00 00 00 
08736     00 00       | 	byte	$00[10]
08738     01 AC 90 00 
0873c     00 00 00 00 
08740     01 53 20 00 
08744     00 00 00 00 | 	byte	$01, $ac, $90, $00, $00, $00, $00, $00, $01, $53, $20, $00, $00, $00, $00, $00
08748     00 00 00 00 
0874c     00 00 00 00 
08750     00 00 00 00 
08754     00 00 00 00 | 	byte	$00[16]
08758     01 1D 90 00 
0875c     00 00 00 00 
08760     00 00 00 00 
08764     00 00 00 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08768     00 FE 90 00 
0876c     00 00 00 00 
08770     01 53 30 00 
08774     00 00 00 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $00, $00, $00
08778     00 00 00 00 
0877c     00 00 00 00 
08780     00 00 00 00 
08784     00 00 00 00 | 	byte	$00[16]
08788     01 1D 90 00 
0878c     00 00 00 00 
08790     00 00 00 00 
08794     00 00 00 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08798     01 AC 90 00 
0879c     00 00 00 00 
087a0     01 53 20 00 
087a4     00 00 00 00 | 	byte	$01, $ac, $90, $00, $00, $00, $00, $00, $01, $53, $20, $00, $00, $00, $00, $00
087a8     00 00 00 00 
087ac     00 00 00 00 
087b0     00 00 00 00 
087b4     00 00 00 00 | 	byte	$00[16]
087b8     01 1D 90 00 
087bc     00 00 00 00 
087c0     00 00 00 00 
087c4     00 00 00 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087c8     00 FE 90 00 
087cc     00 00 00 00 
087d0     01 53 30 00 
087d4     00 00 00 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $00, $00, $00
087d8     00 00 00 00 
087dc     00 00 00 00 
087e0     00 00 00 00 
087e4     00 00 00 00 | 	byte	$00[16]
087e8     01 1D 9D 00 
087ec     00 00 00 00 
087f0     00 00 00 00 
087f4     00 00 00 00 | 	byte	$01, $1d, $9d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087f8     00 00 00 00 
      ...             
08a70     00 00 00 00 
08a74     00 00 00 00 | 	byte	$00[640]
08a78     01 AC 90 00 
08a7c     01 53 10 00 
08a80     01 53 20 00 
08a84     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $01, $53, $10, $00, $01, $53, $20, $00, $00, $fe, $40, $00
08a88     00 00 00 00 
08a8c     00 00 00 00 
08a90     00 00 00 00 
08a94     00 00 00 00 | 	byte	$00[16]
08a98     01 1D 90 00 
08a9c     01 53 11 06 
08aa0     00 00 00 00 
08aa4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $53, $11, $06, $00, $00, $00, $00, $00, $fe, $40, $00
08aa8     00 FE 90 00 
08aac     00 00 01 00 
08ab0     01 53 30 00 
08ab4     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $01, $00, $01, $53, $30, $00, $00, $fe, $50, $00
08ab8     00 00 00 00 
08abc     00 00 00 00 
08ac0     00 00 00 00 
08ac4     00 00 00 00 | 	byte	$00[16]
08ac8     01 1D 90 00 
08acc     00 FE 10 00 
08ad0     00 00 00 00 
08ad4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08ad8     01 AC 90 00 
08adc     01 1D 10 00 
08ae0     01 53 60 00 
08ae4     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $01, $1d, $10, $00, $01, $53, $60, $00, $00, $fe, $40, $00
08ae8     00 00 00 00 
08aec     00 00 00 00 
08af0     00 00 00 00 
08af4     00 00 00 00 | 	byte	$00[16]
08af8     01 1D 90 00 
08afc     01 53 10 00 
08b00     00 00 00 00 
08b04     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $53, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08b08     00 FE 90 00 
08b0c     01 AC 10 00 
08b10     00 B4 82 02 
08b14     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $01, $ac, $10, $00, $00, $b4, $82, $02, $00, $fe, $50, $00
08b18     00 00 00 00 
08b1c     00 00 00 00 
08b20     00 00       | 	byte	$00[10]
08b22     02 02 00 00 
08b26     00 00 01 1D 
08b2a     90 00 01 7D 
08b2e     10 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $01, $1d, $90, $00, $01, $7d, $10, $00, $00, $00
08b32     02 02 00 FE 
08b36     40 00 01 AC 
08b3a     90 00 01 7D 
08b3e     11 05 01 53 | 	byte	$02, $02, $00, $fe, $40, $00, $01, $ac, $90, $00, $01, $7d, $11, $05, $01, $53
08b42     20 00 00 FE 
08b46     40 00 00 00 
08b4a     00 00 00 00 
08b4e     00 00 00 00 | 	byte	$20, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b52     00 00 00 00 
08b56     00 00       | 	byte	$00[6]
08b58     01 1D 90 00 
08b5c     01 AC 10 00 
08b60     00 00 00 00 
08b64     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08b68     00 FE 90 00 
08b6c     00 00 00 00 
08b70     01 53 30 00 
08b74     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $fe, $50, $00
08b78     00 00 00 00 
08b7c     00 00 00 00 
08b80     00 00 00 00 
08b84     00 00 00 00 | 	byte	$00[16]
08b88     01 1D 90 00 
08b8c     00 00 00 00 
08b90     00 00 00 00 
08b94     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08b98     01 AC 90 00 
08b9c     00 00 00 00 
08ba0     01 53 60 00 
08ba4     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00, $fe, $40, $00
08ba8     00 00 00 00 
08bac     00 00 00 00 
08bb0     00 00 00 00 
08bb4     00 00 00 00 | 	byte	$00[16]
08bb8     01 1D 90 00 
08bbc     00 00 00 00 
08bc0     00 00 00 00 
08bc4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08bc8     00 FE 90 00 
08bcc     00 00 00 00 
08bd0     01 AC 70 00 
08bd4     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $ac, $70, $00, $00, $fe, $50, $00
08bd8     00 00 00 00 
08bdc     00 00 00 00 
08be0     00 00 00 00 
08be4     00 00 00 00 | 	byte	$00[16]
08be8     01 1D 90 00 
08bec     00 00 00 00 
08bf0     00 00 00 00 
08bf4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08bf8     02 80 90 00 
08bfc     00 FE 10 00 
08c00     00 00 00 00 
08c04     00 FE 40 00 | 	byte	$02, $80, $90, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08c08     00 00 00 00 
08c0c     00 00 00 00 
08c10     00 00 00 00 
08c14     00 00 00 00 | 	byte	$00[16]
08c18     01 AC 90 00 
08c1c     00 FE 11 04 
08c20     00 00 00 00 
08c24     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $fe, $11, $04, $00, $00, $00, $00, $00, $fe, $40, $00
08c28     01 7D 90 00 
08c2c     00 D6 11 00 
08c30     01 53 30 00 
08c34     00 FE 50 00 | 	byte	$01, $7d, $90, $00, $00, $d6, $11, $00, $01, $53, $30, $00, $00, $fe, $50, $00
08c38     00 00 00 00 
08c3c     00 00 00 00 
08c40     00 00 00 00 
08c44     00 00 00 00 | 	byte	$00[16]
08c48     01 AC 90 00 
08c4c     00 BE 10 00 
08c50     00 00 00 00 
08c54     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08c58     02 80 90 00 
08c5c     00 D6 10 00 
08c60     01 53 20 00 
08c64     00 FE 40 00 | 	byte	$02, $80, $90, $00, $00, $d6, $10, $00, $01, $53, $20, $00, $00, $fe, $40, $00
08c68     00 00 00 00 
08c6c     00 00 00 00 
08c70     00 00 00 00 
08c74     00 00 00 00 | 	byte	$00[16]
08c78     01 AC 90 00 
08c7c     00 FE 10 00 
08c80     00 00 00 00 
08c84     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08c88     01 7D 90 00 
08c8c     00 BE 10 00 
08c90     00 A0 82 02 
08c94     00 FE 50 00 | 	byte	$01, $7d, $90, $00, $00, $be, $10, $00, $00, $a0, $82, $02, $00, $fe, $50, $00
08c98     00 00 00 00 
08c9c     00          | 	byte	$00[5]
08c9d     D6 10 00 00 
08ca1     00 02 02 00 
08ca5     00 00 00 01 
08ca9     AC 90 00 00 | 	byte	$d6, $10, $00, $00, $00, $02, $02, $00, $00, $00, $00, $01, $ac, $90, $00, $00
08cad     FE 10 00 00 
08cb1     00 02 02 00 
08cb5     FE 40 00 01 
08cb9     AC 90 00 01 | 	byte	$fe, $10, $00, $00, $00, $02, $02, $00, $fe, $40, $00, $01, $ac, $90, $00, $01
08cbd     1D 10 00 01 
08cc1     53 20 00 00 
08cc5     FE 40 00 00 
08cc9     00 00 00 00 | 	byte	$1d, $10, $00, $01, $53, $20, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00
08ccd     00 00 00 00 
08cd1     00 00 00 00 
08cd5     00 00 00    | 	byte	$00[11]
08cd8     01 1D 90 00 
08cdc     00 00 00 00 
08ce0     00 00 00 00 
08ce4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08ce8     00 FE 90 00 
08cec     00 00 00 00 
08cf0     01 53 30 00 
08cf4     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $fe, $50, $00
08cf8     00 00 00 00 
08cfc     00 00 00 00 
08d00     00 00 00 00 
08d04     00 00 00 00 | 	byte	$00[16]
08d08     01 1D 90 00 
08d0c     00 00 00 00 
08d10     00 00 00 00 
08d14     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08d18     01 AC 90 00 
08d1c     00 00 00 00 
08d20     01 53 60 00 
08d24     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00, $fe, $40, $00
08d28     00 00 00 00 
08d2c     00 00 00 00 
08d30     00 00 00 00 
08d34     00 00 00 00 | 	byte	$00[16]
08d38     01 1D 90 00 
08d3c     00 00 00 00 
08d40     00 00 00 00 
08d44     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08d48     00 FE 90 00 
08d4c     01 40 10 00 
08d50     01 53 70 00 
08d54     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $01, $40, $10, $00, $01, $53, $70, $00, $00, $fe, $50, $00
08d58     00 00 00 00 
08d5c     00 00 00 00 
08d60     00 00 00 00 
08d64     00          | 	byte	$00[13]
08d65     FE 50 00 01 
08d69     1D 9D 00 01 
08d6d     1D 10 00 00 
08d71     00 00 00 00 | 	byte	$fe, $50, $00, $01, $1d, $9d, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00
08d75     FE 50 00 00 
08d79     00 00 00 00 
08d7d     00 00 00 00 
08d81     00 00 00 00 | 	byte	$fe, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d85     00 00 00 00 
      ...             
08e71     00 00 00 00 
08e75     00 00 00    | 	byte	$00[243]
08e78     02 80 90 00 
08e7c     01 1D 11 04 
08e80     01 53 20 00 
08e84     00 FE 40 00 | 	byte	$02, $80, $90, $00, $01, $1d, $11, $04, $01, $53, $20, $00, $00, $fe, $40, $00
08e88     00 00 00 00 
08e8c     00 00 00 00 
08e90     00 00 00 00 
08e94     00 00 00 00 | 	byte	$00[16]
08e98     01 AC 90 00 
08e9c     00 D6 10 00 
08ea0     00 00 00 00 
08ea4     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08ea8     01 7D 90 00 
08eac     00 00 00 00 
08eb0     01 53 30 00 
08eb4     00 FE 50 00 | 	byte	$01, $7d, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $fe, $50, $00
08eb8     00 00 00 00 
08ebc     00 00 00 00 
08ec0     00 00 00 00 
08ec4     00 00 00 00 | 	byte	$00[16]
08ec8     01 AC 90 00 
08ecc     00 BE 10 00 
08ed0     00 00 00 00 
08ed4     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08ed8     02 80 90 00 
08edc     00 D6 10 00 
08ee0     01 53 60 00 
08ee4     00 FE 40 00 | 	byte	$02, $80, $90, $00, $00, $d6, $10, $00, $01, $53, $60, $00, $00, $fe, $40, $00
08ee8     00 00 00 00 
08eec     00 00 00 00 
08ef0     00 00 00 00 
08ef4     00 00 00 00 | 	byte	$00[16]
08ef8     01 AC 90 00 
08efc     00 FE 10 00 
08f00     00 00 00 00 
08f04     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08f08     01 7D 90 00 
08f0c     00 D6 10 00 
08f10     00 B4 82 02 
08f14     00 FE 50 00 | 	byte	$01, $7d, $90, $00, $00, $d6, $10, $00, $00, $b4, $82, $02, $00, $fe, $50, $00
08f18     00 00 00 00 
08f1c     00 00 00 00 
08f20     00 00       | 	byte	$00[10]
08f22     02 02 00 00 
08f26     00 00 01 AC 
08f2a     90 00 01 AC 
08f2e     10 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $01, $ac, $90, $00, $01, $ac, $10, $00, $00, $00
08f32     02 02 00 FE 
08f36     40 00 01 AC 
08f3a     90 00 01 7D 
08f3e     11 05 01 53 | 	byte	$02, $02, $00, $fe, $40, $00, $01, $ac, $90, $00, $01, $7d, $11, $05, $01, $53
08f42     20 00 00 FE 
08f46     40 00 00 00 
08f4a     00 00 00 00 
08f4e     00 00 00 00 | 	byte	$20, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f52     00 00 00 00 
08f56     00 00       | 	byte	$00[6]
08f58     01 1D 90 00 
08f5c     01 1D 10 00 
08f60     00 00 00 00 
08f64     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08f68     00 FE 90 00 
08f6c     00 00 00 00 
08f70     01 53 30 00 
08f74     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $fe, $50, $00
08f78     00 00 00 00 
08f7c     00 00 00 00 
08f80     00 00 00 00 
08f84     00 00 00 00 | 	byte	$00[16]
08f88     01 1D 90 00 
08f8c     00 00 00 00 
08f90     00 00 00 00 
08f94     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08f98     01 AC 90 00 
08f9c     00 00 00 00 
08fa0     01 53 60 00 
08fa4     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00, $fe, $40, $00
08fa8     00 00 00 00 
08fac     00 00 00 00 
08fb0     00 00 00 00 
08fb4     00 00 00 00 | 	byte	$00[16]
08fb8     01 1D 90 00 
08fbc     00 00 00 00 
08fc0     00 00 00 00 
08fc4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08fc8     00 FE 90 00 
08fcc     01 AC 10 00 
08fd0     01 AC 70 00 
08fd4     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $01, $ac, $10, $00, $01, $ac, $70, $00, $00, $fe, $50, $00
08fd8     00 00 00 00 
08fdc     00 00 00 00 
08fe0     00 00 00 00 
08fe4     00 00 00 00 | 	byte	$00[16]
08fe8     01 1D 90 00 
08fec     01 7D 10 00 
08ff0     00 00 00 00 
08ff4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
08ff8     01 AC 90 00 
08ffc     01 7D 11 05 
09000     00 00 00 00 
09004     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $01, $7d, $11, $05, $00, $00, $00, $00, $00, $fe, $40, $00
09008     00 00 00 00 
0900c     00 00 00 00 
09010     00 00 00 00 
09014     00 00 00 00 | 	byte	$00[16]
09018     01 1D 90 00 
0901c     01 1D 10 00 
09020     00 00 00 00 
09024     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
09028     00 FE 90 00 
0902c     00 00 00 00 
09030     01 53 30 00 
09034     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $fe, $50, $00
09038     00 00 00 00 
0903c     00 00 00 00 
09040     00 00 00 00 
09044     00 00 00 00 | 	byte	$00[16]
09048     01 1D 90 00 
0904c     01 53 10 00 
09050     00 00 00 00 
09054     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $01, $53, $10, $00, $00, $00, $00, $00, $00, $fe, $40, $00
09058     02 3A 90 00 
0905c     01 7D 10 00 
09060     01 53 20 00 
09064     00 FE 40 00 | 	byte	$02, $3a, $90, $00, $01, $7d, $10, $00, $01, $53, $20, $00, $00, $fe, $40, $00
09068     00 00 00 00 
0906c     00 00       | 	byte	$00[6]
0906e     02 02 00 00 
09072     00 00 00 00 
09076     00 00 01 7D 
0907a     90 00 01 AC | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $90, $00, $01, $ac
0907e     10 00 00 00 
09082     00 00 00 FE 
09086     40 00 01 53 
0908a     90 00 01 FC | 	byte	$10, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $01, $53, $90, $00, $01, $fc
0908e     10 00 00 A0 
09092     82 02 00 FE 
09096     50 00 00 00 
0909a     00 00 00 00 | 	byte	$10, $00, $00, $a0, $82, $02, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $00
0909e     02 02 00 00 
090a2     02 02 00 00 
090a6     00 00 02 3A 
090aa     90 00 02 3A | 	byte	$02, $02, $00, $00, $02, $02, $00, $00, $00, $00, $02, $3a, $90, $00, $02, $3a
090ae     10 00 00 00 
090b2     02 02 00 FE 
090b6     40 00 01 AC 
090ba     90 00 01 AC | 	byte	$10, $00, $00, $00, $02, $02, $00, $fe, $40, $00, $01, $ac, $90, $00, $01, $ac
090be     10 00 01 53 
090c2     20 00 00 FE 
090c6     40 00 00 00 
090ca     00 00 00 00 | 	byte	$10, $00, $01, $53, $20, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00, $00
090ce     00 00 00 00 
090d2     00 00 00 00 
090d6     00 00       | 	byte	$00[10]
090d8     01 1D 90 00 
090dc     00 00 00 00 
090e0     00 00 00 00 
090e4     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
090e8     00 FE 90 00 
090ec     00 00 00 00 
090f0     01 53 30 00 
090f4     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $30, $00, $00, $fe, $50, $00
090f8     00 00 00 00 
090fc     00 00 00 00 
09100     00 00 00 00 
09104     00 00 00 00 | 	byte	$00[16]
09108     01 1D 90 00 
0910c     00 00 00 00 
09110     00 00 00 00 
09114     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
09118     01 AC 90 00 
0911c     00 00 00 00 
09120     01 53 60 00 
09124     00 FE 40 00 | 	byte	$01, $ac, $90, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00, $fe, $40, $00
09128     00 00 00 00 
0912c     00 00 00 00 
09130     00 00 00 00 
09134     00 00 00 00 | 	byte	$00[16]
09138     01 1D 90 00 
0913c     00 00 00 00 
09140     00 00 00 00 
09144     00 FE 40 00 | 	byte	$01, $1d, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $40, $00
09148     00 FE 90 00 
0914c     00 00 00 00 
09150     01 53 70 00 
09154     00 FE 50 00 | 	byte	$00, $fe, $90, $00, $00, $00, $00, $00, $01, $53, $70, $00, $00, $fe, $50, $00
09158     00 00 00 00 
0915c     00 00 00 00 
09160     00 00 00 00 
09164     00          | 	byte	$00[13]
09165     FE 50 00 01 
09169     1D 9D 00 00 
0916d     00 00 00 00 
09171     00 00 00 00 | 	byte	$fe, $50, $00, $01, $1d, $9d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09175     FE 50 00 00 
09179     00 00 00 00 
0917d     00 00 00 00 
09181     00 00 00 00 | 	byte	$fe, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09185     00 00 00 00 
      ...             
09271     00 00 00 00 
09275     00 00 00    | 	byte	$00[243]
09278     02 80 90 00 
0927c     00 FE 10 00 
09280     00 8F A0 00 
09284     00 FE 40 00 | 	byte	$02, $80, $90, $00, $00, $fe, $10, $00, $00, $8f, $a0, $00, $00, $fe, $40, $00
09288     00 00 00 00 
0928c     00 00 00 00 
09290     00          | 	byte	$00[9]
09291     8F A0 00 00 
09295     00 00 00 01 
09299     AC 90 00 00 
0929d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $d6, $10, $00, $00
092a1     8F A0 00 00 
092a5     FE 40 00 01 
092a9     7D 90 00 00 
092ad     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $7d, $90, $00, $00, $00, $00, $00, $00
092b1     8F A0 00 00 
092b5     FE 50 00 00 
092b9     00 00 00 00 
092bd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092c1     8F A0 00 00 
092c5     00 00 00 01 
092c9     AC 90 00 00 
092cd     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $d6, $10, $00, $00
092d1     8F A0 00 00 
092d5     FE 40 00 02 
092d9     80 90 00 00 
092dd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $02, $80, $90, $00, $00, $00, $00, $00, $00
092e1     8F A0 00 00 
092e5     FE 40 00 00 
092e9     00 00 00 00 
092ed     FE 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00, $fe, $10, $00, $00
092f1     8F A0 00 00 
092f5     00 00 00 01 
092f9     AC 90 00 00 
092fd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $00, $00, $00, $00
09301     8F A0 00 00 
09305     FE 40 00 01 
09309     7D 90 00 00 
0930d     BE 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $7d, $90, $00, $00, $be, $10, $00, $00
09311     8F A0 00 00 
09315     FE 50 00 00 
09319     00 00 00 00 
0931d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00
09321     8F A0 00 00 
09325     00 00 00 01 
09329     AC 90 00 00 
0932d     FE 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $fe, $10, $00, $00
09331     8F A0 00 00 
09335     FE 40 00 01 
09339     AC 90 00 01 
0933d     1D 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $ac, $90, $00, $01, $1d, $10, $00, $00
09341     8F A0 00 00 
09345     FE 40 00 00 
09349     00 00 00 00 
0934d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09351     8F A0 00 00 
09355     00 00 00 01 
09359     1D 90 00 00 
0935d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $d6, $10, $00, $00
09361     8F A0 00 00 
09365     FE 40 00 00 
09369     FE 90 00 00 
0936d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $fe, $90, $00, $00, $00, $00, $00, $00
09371     8F A0 00 00 
09375     FE 50 00 00 
09379     00 00 00 00 
0937d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09381     8F A0 00 00 
09385     00 00 00 01 
09389     1D 90 00 00 
0938d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $d6, $10, $00, $00
09391     8F A0 00 00 
09395     FE 40 00 01 
09399     AC 90 00 00 
0939d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $ac, $90, $00, $00, $00, $00, $00, $00
093a1     8F A0 00 00 
093a5     FE 40 00 00 
093a9     00 00 00 01 
093ad     1D 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00
093b1     8F A0 00 00 
093b5     00 00 00 01 
093b9     1D 90 00 00 
093bd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $00, $00, $00, $00, $00
093c1     8F A0 00 00 
093c5     FE 40 00 00 
093c9     FE 90 00 00 
093cd     BE 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $fe, $90, $00, $00, $be, $10, $00, $00
093d1     8F A0 00 00 
093d5     FE 50 00 00 
093d9     00 00 00 00 
093dd     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00
093e1     8F A0 00 00 
093e5     00 00 00 01 
093e9     1D 90 00 01 
093ed     1D 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $1d, $90, $00, $01, $1d, $10, $00, $00
093f1     8F B0 00 00 
093f5     FE 40 00 02 
093f9     5C 90 00 01 
093fd     2E 10 00 00 | 	byte	$8f, $b0, $00, $00, $fe, $40, $00, $02, $5c, $90, $00, $01, $2e, $10, $00, $00
09401     8F A0 00 00 
09405     FE 40 00 00 
09409     00 00 00 00 
0940d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09411     8F A0 00 00 
09415     00 00 00 01 
09419     AC 90 00 00 
0941d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $d6, $10, $00, $00
09421     8F A0 00 00 
09425     FE 40 00 01 
09429     7D 90 00 00 
0942d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $7d, $90, $00, $00, $00, $00, $00, $00
09431     8F A0 00 00 
09435     FE 50 00 00 
09439     00 00 00 00 
0943d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09441     8F A0 00 00 
09445     00 00 00 01 
09449     AC 90 00 00 
0944d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $d6, $10, $00, $00
09451     8F A0 00 00 
09455     FE 40 00 02 
09459     5C 90 00 00 
0945d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00
09461     8F A0 00 00 
09465     FE 40 00 00 
09469     00 00 00 01 
0946d     2E 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $00, $00, $00, $00, $01, $2e, $10, $00, $00
09471     8F A0 00 00 
09475     00 00 00 01 
09479     AC 90 00 00 
0947d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $01, $ac, $90, $00, $00, $00, $00, $00, $00
09481     8F A0 00 00 
09485     FE 40 00 01 
09489     7D 90 00 00 
0948d     BE 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $7d, $90, $00, $00, $be, $10, $00, $00
09491     8F A0 00 00 
09495     FE 50 00 00 
09499     00 00 00 00 
0949d     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00
094a1     8F A0 00 00 
094a5     00 00 00 02 
094a9     5C 90 00 00 
094ad     FE 10 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $02, $5c, $90, $00, $00, $fe, $10, $00, $00
094b1     8F A0 00 00 
094b5     FE 40 00 01 
094b9     1D 90 00 00 
094bd     E2 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $1d, $90, $00, $00, $e2, $10, $00, $00
094c1     8F A0 00 00 
094c5     FE 40 00 02 
094c9     3A 90 00 00 
094cd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $02, $3a, $90, $00, $00, $00, $00, $00, $00
094d1     8F A0 00 00 
094d5     00 00 00 02 
094d9     3A 90 00 00 
094dd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $02, $3a, $90, $00, $00, $00, $00, $00, $00
094e1     8F A0 00 00 
094e5     FE 40 00 01 
094e9     40 90 00 00 
094ed     D6 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $40, $90, $00, $00, $d6, $10, $00, $00
094f1     8F A0 00 00 
094f5     FE 50 00 02 
094f9     80 90 00 00 
094fd     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $02, $80, $90, $00, $00, $00, $00, $00, $00
09501     8F A0 00 00 
09505     00 00 00 02 
09509     80 90 00 00 
0950d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $02, $80, $90, $00, $00, $00, $00, $00, $00
09511     8F A0 00 00 
09515     FE 40 00 01 
09519     53 90 00 00 
0951d     CA 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $53, $90, $00, $00, $ca, $10, $00, $00
09521     8F A0 00 00 
09525     FE 40 00 02 
09529     A6 90 00 00 
0952d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $02, $a6, $90, $00, $00, $00, $00, $00, $00
09531     8F A0 00 00 
09535     00 00 00 02 
09539     A6 90 00 00 
0953d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $02, $a6, $90, $00, $00, $00, $00, $00, $00
09541     8F A0 00 00 
09545     FE 40 00 01 
09549     7D 90 00 00 
0954d     BE 10 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $40, $00, $01, $7d, $90, $00, $00, $be, $10, $00, $00
09551     8F A0 00 00 
09555     FE 50 00 02 
09559     FA 90 00 00 
0955d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $02, $fa, $90, $00, $00, $00, $00, $00, $00
09561     8F A0 00 00 
09565     FE 50 00 02 
09569     FA 9D 00 00 
0956d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $fe, $50, $00, $02, $fa, $9d, $00, $00, $00, $00, $00, $00
09571     8F B0 00 00 
09575     FE 50 00 00 
09579     00 00 00 00 
0957d     00 00 00 00 | 	byte	$8f, $b0, $00, $00, $fe, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09581     8F A0 00 00 
09585     00 00 00 00 
09589     00 00 00 00 
0958d     00 00 00 00 | 	byte	$8f, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09591     00 00 00 00 
      ...             
09671     00 00 00 00 
09675     00 00 00    | 	byte	$00[231]
09678     01 AC 90 00 
0967c     01 FC 60 00 
09680     00 BE 50 00 
09684     00 FE 70 00 | 	byte	$01, $ac, $90, $00, $01, $fc, $60, $00, $00, $be, $50, $00, $00, $fe, $70, $00
09688     00 00 00 00 
0968c     00 00 00 00 
09690     00 00 00 00 | 	byte	$00[12]
09694     01 40 70 00 
09698     01 AC 90 00 
0969c     00 00 00 00 
096a0     00 E2 50 00 | 	byte	$01, $40, $70, $00, $01, $ac, $90, $00, $00, $00, $00, $00, $00, $e2, $50, $00
096a4     00 FE 70 00 
096a8     00 D6 90 00 
096ac     02 80 60 00 
096b0     00 00 00 00 | 	byte	$00, $fe, $70, $00, $00, $d6, $90, $00, $02, $80, $60, $00, $00, $00, $00, $00
096b4     00 D6 70 00 
096b8     00 00 00 00 
096bc     00 00 00 00 
096c0     00 FE 50 00 | 	byte	$00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $50, $00
096c4     00 FE 70 00 
096c8     01 AC 90 00 
096cc     01 C5 60 00 
096d0     00 FE 50 00 | 	byte	$00, $fe, $70, $00, $01, $ac, $90, $00, $01, $c5, $60, $00, $00, $fe, $50, $00
096d4     01 1D 70 00 
096d8     01 AC 90 00 
096dc     02 3A 60 00 
096e0     01 1D 50 00 | 	byte	$01, $1d, $70, $00, $01, $ac, $90, $00, $02, $3a, $60, $00, $01, $1d, $50, $00
096e4     01 53 70 00 
096e8     00 00 00 00 
096ec     00 00 00 00 
096f0     00 00 00 00 | 	byte	$01, $53, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096f4     01 7D 70 00 
096f8     03 58 90 00 
096fc     00 00 00 00 
09700     01 53 50 00 | 	byte	$01, $7d, $70, $00, $03, $58, $90, $00, $00, $00, $00, $00, $01, $53, $50, $00
09704     01 53 70 00 
09708     01 AC 90 00 
0970c     01 AC 60 00 
09710     00 00 00 00 | 	byte	$01, $53, $70, $00, $01, $ac, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00
09714     01 1D 70 00 
09718     03 58 90 00 
0971c     00 00 00 00 
09720     01 7D 50 00 | 	byte	$01, $1d, $70, $00, $03, $58, $90, $00, $00, $00, $00, $00, $01, $7d, $50, $00
09724     00 FE 70 00 
09728     01 AC 90 00 
0972c     00 00 00 00 
09730     01 7D 50 00 | 	byte	$00, $fe, $70, $00, $01, $ac, $90, $00, $00, $00, $00, $00, $01, $7d, $50, $00
09734     00 D6 70 00 
09738     03 58 90 00 
0973c     01 FC 60 00 
09740     01 AC 50 00 | 	byte	$00, $d6, $70, $00, $03, $58, $90, $00, $01, $fc, $60, $00, $01, $ac, $50, $00
09744     00 FE 70 00 
09748     00 00 00 00 
0974c     00 00 00 00 
09750     00 00 00 00 | 	byte	$00, $fe, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09754     00 00 00 00 
      ...             
0976c     00 00 00 00 
09770     00 00 00 00 | 	byte	$00[32]
09774     01 7D 70 00 
09778     00 00 00 00 
0977c     00 00 00 00 
09780     00 00 00 00 | 	byte	$01, $7d, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09784     00 00 00 00 
09788     00 00 00 00 
0978c     00 00 00 00 
09790     00 00 00 00 
09794     00 00 00 00 | 	byte	$00[20]
09798     01 FC 70 00 
0979c     00 00 00 00 
097a0     00 00 00 00 
097a4     00 00 0F 01 | 	byte	$01, $fc, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $01
097a8     00 00 00 00 
097ac     01 FC 70 00 
097b0     00 00 00 00 
097b4     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $fc, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
097b8     00 00 00 00 
097bc     00 00 00 00 | 	byte	$00[8]
097c0     01 FC 70 00 
097c4     00 00 00 00 
097c8     00 00 00 00 
097cc     00 00 00 00 | 	byte	$01, $fc, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097d0     00 00 00 00 
097d4     01 FC 7F 06 
097d8     00 00 00 00 
097dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $fc, $7f, $06, $00, $00, $00, $00, $00, $00, $00, $00
097e0     00 00 00 00 
      ...             
09a74     00 00 00 00 
09a78     00 00 00 00 | 	byte	$00[668]
09a7c     0F 18 18 F6 
09a80     EE 05 F8 09 
09a84     EB C1 F0 E9 
09a88     02 12 16 06 | 	byte	$0f, $18, $18, $f6, $ee, $05, $f8, $09, $eb, $c1, $f0, $e9, $02, $12, $16, $06
09a8c     0E 00 02 EF 
09a90     D6 10 F7 20 
09a94     17 12 07 DD 
09a98     02 FB 02 0C | 	byte	$0e, $00, $02, $ef, $d6, $10, $f7, $20, $17, $12, $07, $dd, $02, $fb, $02, $0c
09a9c     0C 1B 09 E5 
09aa0     FE FD FE 01 
09aa4     CA DD EB F7 
09aa8     0C 16 19 08 | 	byte	$0c, $1b, $09, $e5, $fe, $fd, $fe, $01, $ca, $dd, $eb, $f7, $0c, $16, $19, $08
09aac     13 F8 0C E4 
09ab0     E3 0D FA 20 
09ab4     02 1B 09 DE 
09ab8     06 F7 06 0C | 	byte	$13, $f8, $0c, $e4, $e3, $0d, $fa, $20, $02, $1b, $09, $de, $06, $f7, $06, $0c
09abc     10 16 E8 F2 
09ac0     FB F9 00 E2 
09ac4     C8 EC EE 05 
09ac8     11 1A 1C 0B | 	byte	$10, $16, $e8, $f2, $fb, $f9, $00, $e2, $c8, $ec, $ee, $05, $11, $1a, $1c, $0b
09acc     10 F9 16 E0 
09ad0     ED 06 02 0C 
09ad4     03 1A 0E E3 
09ad8     03 F9 06 0C | 	byte	$10, $f9, $16, $e0, $ed, $06, $02, $0c, $03, $1a, $0e, $e3, $03, $f9, $06, $0c
09adc     0E 08 DD 00 
09ae0     F2 00 E6 D6 
09ae4     D6 F4 F8 10 
09ae8     16 23 1E 10 | 	byte	$0e, $08, $dd, $00, $f2, $00, $e6, $d6, $d6, $f4, $f8, $10, $16, $23, $1e, $10
09aec     06 02 16 E3 
09af0     EC 08 F9 02 
09af4     0B 15 1A E4 
09af8     FE 00 01 0F | 	byte	$06, $02, $16, $e3, $ec, $08, $f9, $02, $0b, $15, $1a, $e4, $fe, $00, $01, $0f
09afc     0A EC E8 FD 
09b00     F0 F0 E2 C8 
09b04     EC F5 06 16 
09b08     1B 2D 1E 16 | 	byte	$0a, $ec, $e8, $fd, $f0, $f0, $e2, $c8, $ec, $f5, $06, $16, $1b, $2d, $1e, $16
09b0c     00 0D 14 EB 
09b10     E8 09 E2 0C 
09b14     04 19 1C EC 
09b18     F8 02 FD 0E | 	byte	$00, $0d, $14, $eb, $e8, $09, $e2, $0c, $04, $19, $1c, $ec, $f8, $02, $fd, $0e
09b1c     02 DA F4 EE 
09b20     EB E6 CC D8 
09b24     F7 F9 13 16 
09b28     29 2C 25 12 | 	byte	$02, $da, $f4, $ee, $eb, $e6, $cc, $d8, $f7, $f9, $13, $16, $29, $2c, $25, $12
09b2c     06 10 16 F2 
09b30     E8 F3 E8 06 
09b34     08 14 1E FC 
09b38     F1 03 FB 08 | 	byte	$06, $10, $16, $f2, $e8, $f3, $e8, $06, $08, $14, $1e, $fc, $f1, $03, $fb, $08
09b3c     F2 D8 F9 E0 
09b40     E5 E2 BE F2 
09b44     F3 06 17 1D 
09b48     31 2D 2C 10 | 	byte	$f2, $d8, $f9, $e0, $e5, $e2, $be, $f2, $f3, $06, $17, $1d, $31, $2d, $2c, $10
09b4c     0A 0E 18 00 
09b50     DB E8 EF FE 
09b54     0E 0E 20 12 
09b58     EA 02 FB 06 | 	byte	$0a, $0e, $18, $00, $db, $e8, $ef, $fe, $0e, $0e, $20, $12, $ea, $02, $fb, $06
09b5c     DE E0 F0 CD 
09b60     F4 BA DB F1 
09b64     FB 10 18 28 
09b68     31 32 30 12 | 	byte	$de, $e0, $f0, $cd, $f4, $ba, $db, $f1, $fb, $10, $18, $28, $31, $32, $30, $12
09b6c     0A 10 14 0E 
09b70     C2 EC EC FA 
09b74     0E 0A 20 20 
09b78     F1 F8 02 F8 | 	byte	$0a, $10, $14, $0e, $c2, $ec, $ec, $fa, $0e, $0a, $20, $20, $f1, $f8, $02, $f8
09b7c     D5 E3 D3 DB 
09b80     E7 B0 F2 E8 
09b84     0A 0E 20 2D 
09b88     33 37 37 13 | 	byte	$d5, $e3, $d3, $db, $e7, $b0, $f2, $e8, $0a, $0e, $20, $2d, $33, $37, $37, $13
09b8c     0A 13 12 12 
09b90     BE E9 EB F6 
09b94     0D 08 1C 20 
09b98     0C E7 09 E9 | 	byte	$0a, $13, $12, $12, $be, $e9, $eb, $f6, $0d, $08, $1c, $20, $0c, $e7, $09, $e9
09b9c     D2 E0 C3 ED 
09ba0     C3 C9 ED EF 
09ba4     10 10 23 2E 
09ba8     37 3A 3B 19 | 	byte	$d2, $e0, $c3, $ed, $c3, $c9, $ed, $ef, $10, $10, $23, $2e, $37, $3a, $3b, $19
09bac     04 17 0E 07 
09bb0     D7 D5 F0 F0 
09bb4     09 0A 15 21 
09bb8     23 EA 00 E4 | 	byte	$04, $17, $0e, $07, $d7, $d5, $f0, $f0, $09, $0a, $15, $21, $23, $ea, $00, $e4
09bbc     CA CF CB E6 
09bc0     B2 DE E4 FA 
09bc4     10 15 24 2E 
09bc8     3A 3A 3C 22 | 	byte	$ca, $cf, $cb, $e6, $b2, $de, $e4, $fa, $10, $15, $24, $2e, $3a, $3a, $3c, $22
09bcc     00 19 07 FD 
09bd0     FB BF F4 EA 
09bd4     04 08 10 20 
09bd8     26 07 E9 E4 | 	byte	$00, $19, $07, $fd, $fb, $bf, $f4, $ea, $04, $08, $10, $20, $26, $07, $e9, $e4
09bdc     BC CE D0 D5 
09be0     B6 E2 E3 FD 
09be4     12 18 27 2E 
09be8     3E 3B 40 2C | 	byte	$bc, $ce, $d0, $d5, $b6, $e2, $e3, $fd, $12, $18, $27, $2e, $3e, $3b, $40, $2c
09bec     01 15 01 F7 
09bf0     10 C2 E7 ED 
09bf4     FC 08 0C 18 
09bf8     27 21 EA D2 | 	byte	$01, $15, $01, $f7, $10, $c2, $e7, $ed, $fc, $08, $0c, $18, $27, $21, $ea, $d2
09bfc     B8 CD D2 C5 
09c00     C0 E2 E6 00 
09c04     12 18 28 2D 
09c08     40 3A 42 35 | 	byte	$b8, $cd, $d2, $c5, $c0, $e2, $e6, $00, $12, $18, $28, $2d, $40, $3a, $42, $35
09c0c     06 0E FC F6 
09c10     0E E7 CD F2 
09c14     F3 02 0B 12 
09c18     23 22 0A B2 | 	byte	$06, $0e, $fc, $f6, $0e, $e7, $cd, $f2, $f3, $02, $0b, $12, $23, $22, $0a, $b2
09c1c     C3 CB CE BC 
09c20     C2 E6 E3 03 
09c24     0F 1E 28 30 
09c28     3D 3E 42 3D | 	byte	$c3, $cb, $ce, $bc, $c2, $e6, $e3, $03, $0f, $1e, $28, $30, $3d, $3e, $42, $3d
09c2c     11 06 F7 F9 
09c30     06 02 CC E3 
09c34     F5 F7 0B 0D 
09c38     1C 22 22 AA | 	byte	$11, $06, $f7, $f9, $06, $02, $cc, $e3, $f5, $f7, $0b, $0d, $1c, $22, $22, $aa
09c3c     C0 D2 C4 BA 
09c40     BF EA E2 06 
09c44     0A 21 26 33 
09c48     38 42 40 42 | 	byte	$c0, $d2, $c4, $ba, $bf, $ea, $e2, $06, $0a, $21, $26, $33, $38, $42, $40, $42
09c4c     1A FE F8 FB 
09c50     00 07 F3 C9 
09c54     F8 F0 04 0B 
09c58     13 21 1C C6 | 	byte	$1a, $fe, $f8, $fb, $00, $07, $f3, $c9, $f8, $f0, $04, $0b, $13, $21, $1c, $c6
09c5c     AC DA C0 B4 
09c60     C2 E3 E8 02 
09c64     09 20 27 32 
09c68     37 41 43 41 | 	byte	$ac, $da, $c0, $b4, $c2, $e3, $e8, $02, $09, $20, $27, $32, $37, $41, $43, $41
09c6c     28 F8 F9 FA 
09c70     FC 06 08 CF 
09c74     E5 F7 F9 0B 
09c78     0C 1C 16 E8 | 	byte	$28, $f8, $f9, $fa, $fc, $06, $08, $cf, $e5, $f7, $f9, $0b, $0c, $1c, $16, $e8
09c7c     A4 D6 C9 A6 
09c80     CC DA F1 FD 
09c84     0C 1D 2B 2D 
09c88     38 3D 47 3E | 	byte	$a4, $d6, $c9, $a6, $cc, $da, $f1, $fd, $0c, $1d, $2b, $2d, $38, $3d, $47, $3e
09c8c     30 F7 F8 FA 
09c90     F9 05 09 F3 
09c94     CB FB F4 02 
09c98     0C 13 10 FC | 	byte	$30, $f7, $f8, $fa, $f9, $05, $09, $f3, $cb, $fb, $f4, $02, $0c, $13, $10, $fc
09c9c     AE C9 D5 9D 
09ca0     D0 D4 F1 FB 
09ca4     0A 1A 2B 2D 
09ca8     37 3E 47 40 | 	byte	$ae, $c9, $d5, $9d, $d0, $d4, $f1, $fb, $0a, $1a, $2b, $2d, $37, $3e, $47, $40
09cac     31 FD F3 FC 
09cb0     F6 06 08 07 
09cb4     CD EC FB F7 
09cb8     0E 0F 08 08 | 	byte	$31, $fd, $f3, $fc, $f6, $06, $08, $07, $cd, $ec, $fb, $f7, $0e, $0f, $08, $08
09cbc     BE BC DB 9E 
09cc0     C8 D6 EA FE 
09cc4     04 1B 26 2E 
09cc8     33 3E 44 41 | 	byte	$be, $bc, $db, $9e, $c8, $d6, $ea, $fe, $04, $1b, $26, $2e, $33, $3e, $44, $41
09ccc     30 03 EE 00 
09cd0     F3 08 07 0C 
09cd4     E8 D8 02 F0 
09cd8     0A 0D 00 11 | 	byte	$30, $03, $ee, $00, $f3, $08, $07, $0c, $e8, $d8, $02, $f0, $0a, $0d, $00, $11
09cdc     D0 B4 DC A6 
09ce0     BA DB E2 FE 
09ce4     00 1B 23 2C 
09ce8     31 3E 42 41 | 	byte	$d0, $b4, $dc, $a6, $ba, $db, $e2, $fe, $00, $1b, $23, $2c, $31, $3e, $42, $41
09cec     2F 06 EE 00 
09cf0     F3 08 07 0C 
09cf4     01 CE 00 F3 
09cf8     02 0F FA 13 | 	byte	$2f, $06, $ee, $00, $f3, $08, $07, $0c, $01, $ce, $00, $f3, $02, $0f, $fa, $13
09cfc     E0 B1 DC B3 
09d00     B0 DE DE FC 
09d04     00 17 23 2A 
09d08     30 3C 42 40 | 	byte	$e0, $b1, $dc, $b3, $b0, $de, $de, $fc, $00, $17, $23, $2a, $30, $3c, $42, $40
09d0c     2E 03 F0 FD 
09d10     F6 06 0A 0A 
09d14     0D D6 F4 F9 
09d18     FC 11 F6 13 | 	byte	$2e, $03, $f0, $fd, $f6, $06, $0a, $0a, $0d, $d6, $f4, $f9, $fc, $11, $f6, $13
09d1c     EE B0 DA BD 
09d20     A7 DE DC F6 
09d24     00 12 23 26 
09d28     32 39 43 3E | 	byte	$ee, $b0, $da, $bd, $a7, $de, $dc, $f6, $00, $12, $23, $26, $32, $39, $43, $3e
09d2c     2B 00 F4 FA 
09d30     FA 04 0C 0B 
09d34     12 E8 E7 00 
09d38     F9 0D F7 11 | 	byte	$2b, $00, $f4, $fa, $fa, $04, $0c, $0b, $12, $e8, $e7, $00, $f9, $0d, $f7, $11
09d3c     F4 B0 D8 C4 
09d40     A4 D8 DC F0 
09d44     03 0E 24 23 
09d48     33 38 43 3C | 	byte	$f4, $b0, $d8, $c4, $a4, $d8, $dc, $f0, $03, $0e, $24, $23, $33, $38, $43, $3c
09d4c     22 FE F6 F9 
09d50     FE 05 0E 0A 
09d54     15 FB E0 02 
09d58     F8 07 F8 0E | 	byte	$22, $fe, $f6, $f9, $fe, $05, $0e, $0a, $15, $fb, $e0, $02, $f8, $07, $f8, $0e
09d5c     F8 B2 D5 C7 
09d60     A8 D2 DE EB 
09d64     05 0C 22 22 
09d68     33 37 42 3A | 	byte	$f8, $b2, $d5, $c7, $a8, $d2, $de, $eb, $05, $0c, $22, $22, $33, $37, $42, $3a
09d6c     18 00 F4 FB 
09d70     00 06 10 0B 
09d74     18 07 DB 02 
09d78     FC 00 FD 0C | 	byte	$18, $00, $f4, $fb, $00, $06, $10, $0b, $18, $07, $db, $02, $fc, $00, $fd, $0c
09d7c     F6 B2 D3 CA 
09d80     AB CE E0 E8 
09d84     06 0B 21 22 
09d88     33 37 41 32 | 	byte	$f6, $b2, $d3, $ca, $ab, $ce, $e0, $e8, $06, $0b, $21, $22, $33, $37, $41, $32
09d8c     0F 00 F3 00 
09d90     02 09 10 0E 
09d94     1B 10 DA 01 
09d98     00 F9 01 0B | 	byte	$0f, $00, $f3, $00, $02, $09, $10, $0e, $1b, $10, $da, $01, $00, $f9, $01, $0b
09d9c     F3 B3 D3 CE 
09da0     B0 CC E0 E8 
09da4     06 0C 20 23 
09da8     34 37 40 24 | 	byte	$f3, $b3, $d3, $ce, $b0, $cc, $e0, $e8, $06, $0c, $20, $23, $34, $37, $40, $24
09dac     08 FC F3 04 
09db0     01 0E 10 14 
09db4     1B 16 DA 03 
09db8     00 F3 07 0A | 	byte	$08, $fc, $f3, $04, $01, $0e, $10, $14, $1b, $16, $da, $03, $00, $f3, $07, $0a
09dbc     EB B3 D6 CE 
09dc0     B4 CC E0 EB 
09dc4     06 0E 1E 26 
09dc8     32 38 3A 13 | 	byte	$eb, $b3, $d6, $ce, $b4, $cc, $e0, $eb, $06, $0e, $1e, $26, $32, $38, $3a, $13
09dcc     0B F3 FA 05 
09dd0     03 12 10 19 
09dd4     1C 18 DA 08 
09dd8     FC F0 0C 08 | 	byte	$0b, $f3, $fa, $05, $03, $12, $10, $19, $1c, $18, $da, $08, $fc, $f0, $0c, $08
09ddc     E0 B6 D9 D0 
09de0     B4 D0 E2 EE 
09de4     06 10 1E 28 
09de8     31 39 2A 05 | 	byte	$e0, $b6, $d9, $d0, $b4, $d0, $e2, $ee, $06, $10, $1e, $28, $31, $39, $2a, $05
09dec     0D EB 06 01 
09df0     0A 12 14 1B 
09df4     1E 17 DD 0B 
09df8     F3 F6 0F 04 | 	byte	$0d, $eb, $06, $01, $0a, $12, $14, $1b, $1e, $17, $dd, $0b, $f3, $f6, $0f, $04
09dfc     D0 BA DB D2 
09e00     B5 D3 E6 F2 
09e04     0A 10 22 27 
09e08     35 35 16 07 | 	byte	$d0, $ba, $db, $d2, $b5, $d3, $e6, $f2, $0a, $10, $22, $27, $35, $35, $16, $07
09e0c     02 ED 0C FE 
09e10     15 0F 1C 1B 
09e14     23 0F E3 0C 
09e18     E9 02 0E F8 | 	byte	$02, $ed, $0c, $fe, $15, $0f, $1c, $1b, $23, $0f, $e3, $0c, $e9, $02, $0e, $f8
09e1c     C6 C2 DD D0 
09e20     B8 D8 EA F2 
09e24     10 10 27 26 
09e28     39 25 06 0E | 	byte	$c6, $c2, $dd, $d0, $b8, $d8, $ea, $f2, $10, $10, $27, $26, $39, $25, $06, $0e
09e2c     F0 00 09 03 
09e30     19 10 22 1B 
09e34     2A 00 EE 06 
09e38     E8 0B 0B E9 | 	byte	$f0, $00, $09, $03, $19, $10, $22, $1b, $2a, $00, $ee, $06, $e8, $0b, $0b, $e9
09e3c     C0 CB DC CE 
09e40     BA E0 EA F8 
09e44     10 13 28 28 
09e48     38 0B 0B 02 | 	byte	$c0, $cb, $dc, $ce, $ba, $e0, $ea, $f8, $10, $13, $28, $28, $38, $0b, $0b, $02
09e4c     EE 0C 02 0F 
09e50     16 18 21 20 
09e54     28 F2 F8 F7 
09e58     F2 10 04 E1 | 	byte	$ee, $0c, $02, $0f, $16, $18, $21, $20, $28, $f2, $f8, $f7, $f2, $10, $04, $e1
09e5c     BF D4 D9 CA 
09e60     C0 EA E6 05 
09e64     0C 1C 24 2F 
09e68     28 FA 16 EB | 	byte	$bf, $d4, $d9, $ca, $c0, $ea, $e6, $05, $0c, $1c, $24, $2f, $28, $fa, $16, $eb
09e6c     01 07 06 18 
09e70     13 21 1D 28 
09e74     22 E9 FD EE 
09e78     00 0D F1 E6 | 	byte	$01, $07, $06, $18, $13, $21, $1d, $28, $22, $e9, $fd, $ee, $00, $0d, $f1, $e6
09e7c     BC D9 D8 BC 
09e80     CF E8 EC 0B 
09e84     0E 20 25 33 
09e88     04 08 05 EA | 	byte	$bc, $d9, $d8, $bc, $cf, $e8, $ec, $0b, $0e, $20, $25, $33, $04, $08, $05, $ea
09e8c     0E 00 13 16 
09e90     1B 21 22 29 
09e94     20 E3 F7 F3 
09e98     07 08 DE F1 | 	byte	$0e, $00, $13, $16, $1b, $21, $22, $29, $20, $e3, $f7, $f3, $07, $08, $de, $f1
09e9c     B8 E0 D7 B0 
09ea0     E4 E0 FD 08 
09ea4     16 20 2C 20 
09ea8     FA 12 EC 00 | 	byte	$b8, $e0, $d7, $b0, $e4, $e0, $fd, $08, $16, $20, $2c, $20, $fa, $12, $ec, $00
09eac     07 06 18 15 
09eb0     21 20 29 29 
09eb4     16 DB FA FA 
09eb8     07 F4 E6 F5 | 	byte	$07, $06, $18, $15, $21, $20, $29, $29, $16, $db, $fa, $fa, $07, $f4, $e6, $f5
09ebc     B5 EB C3 C0 
09ec0     EA E3 06 08 
09ec4     1A 21 25 0B 
09ec8     03 09 EA 09 | 	byte	$b5, $eb, $c3, $c0, $ea, $e3, $06, $08, $1a, $21, $25, $0b, $03, $09, $ea, $09
09ecc     00 11 17 1B 
09ed0     21 24 2A 29 
09ed4     07 CF 0A F2 
09ed8     0A D8 00 EC | 	byte	$00, $11, $17, $1b, $21, $24, $2a, $29, $07, $cf, $0a, $f2, $0a, $d8, $00, $ec
09edc     C0 EB AA DA 
09ee0     E2 F0 0A 0B 
09ee4     20 20 13 0C 
09ee8     02 FC F3 08 | 	byte	$c0, $eb, $aa, $da, $e2, $f0, $0a, $0b, $20, $20, $13, $0c, $02, $fc, $f3, $08
09eec     04 14 17 1B 
09ef0     23 24 2B 26 
09ef4     EB DE 09 F3 
09ef8     F5 E0 05 E9 | 	byte	$04, $14, $17, $1b, $23, $24, $2b, $26, $eb, $de, $09, $f3, $f5, $e0, $05, $e9
09efc     CC D4 B2 E3 
09f00     E3 FC 08 10 
09f04     22 0B 1D 04 
09f08     08 F1 FC 08 | 	byte	$cc, $d4, $b2, $e3, $e3, $fc, $08, $10, $22, $0b, $1d, $04, $08, $f1, $fc, $08
09f0c     09 15 16 1E 
09f10     24 26 28 17 
09f14     EA E9 02 F8 
09f18     DB F8 F7 FC | 	byte	$09, $15, $16, $1e, $24, $26, $28, $17, $ea, $e9, $02, $f8, $db, $f8, $f7, $fc
09f1c     C7 B6 CE DD 
09f20     EE 00 08 1A 
09f24     0E 11 1C 00 
09f28     0A EC 03 0A | 	byte	$c7, $b6, $ce, $dd, $ee, $00, $08, $1a, $0e, $11, $1c, $00, $0a, $ec, $03, $0a
09f2c     0C 17 16 23 
09f30     23 29 1C 12 
09f34     F5 E4 0A E0 
09f38     E6 F9 F6 0B | 	byte	$0c, $17, $16, $23, $23, $29, $1c, $12, $f5, $e4, $0a, $e0, $e6, $f9, $f6, $0b
09f3c     B0 C0 DB DA 
09f40     FB FD 11 13 
09f44     05 1B 19 03 
09f48     03 EF 09 07 | 	byte	$b0, $c0, $db, $da, $fb, $fd, $11, $13, $05, $1b, $19, $03, $03, $ef, $09, $07
09f4c     0E 17 1A 22 
09f50     23 23 09 21 
09f54     F2 E9 08 C8 
09f58     F7 F1 00 0A | 	byte	$0e, $17, $1a, $22, $23, $23, $09, $21, $f2, $e9, $08, $c8, $f7, $f1, $00, $0a
09f5c     A0 D5 D6 E4 
09f60     FD 01 12 00 
09f64     11 18 18 05 
09f68     FA F6 03 0A | 	byte	$a0, $d5, $d6, $e4, $fd, $01, $12, $00, $11, $18, $18, $05, $fa, $f6, $03, $0a
09f6c     0D 18 16 23 
09f70     20 0E 15 20 
09f74     FE EA F8 CB 
09f78     F8 F1 00 F0 | 	byte	$0d, $18, $16, $23, $20, $0e, $15, $20, $fe, $ea, $f8, $cb, $f8, $f1, $00, $f0
09f7c     BA D2 D7 F0 
09f80     F8 0C 00 08 
09f84     12 1A 1A 05 
09f88     F4 FB 01 0C | 	byte	$ba, $d2, $d7, $f0, $f8, $0c, $00, $08, $12, $1a, $1a, $05, $f4, $fb, $01, $0c
09f8c     0E 19 15 24 
09f90     0C 14 17 20 
09f94     10 E2 E3 D6 
09f98     F3 F4 FB D6 | 	byte	$0e, $19, $15, $24, $0c, $14, $17, $20, $10, $e2, $e3, $d6, $f3, $f4, $fb, $d6
09f9c     EB C0 E6 F0 
09fa0     FA 0D EE 14 
09fa4     0E 1D 1B 06 
09fa8     F3 FB 01 0A | 	byte	$eb, $c0, $e6, $f0, $fa, $0d, $ee, $14, $0e, $1d, $1b, $06, $f3, $fb, $01, $0a
09fac     11 16 17 1A 
09fb0     04 20 12 26 
09fb4     1A E0 D3 E3 
09fb8     EC F8 E7 DB | 	byte	$11, $16, $17, $1a, $04, $20, $12, $26, $1a, $e0, $d3, $e3, $ec, $f8, $e7, $db
09fbc     05 C3 E8 F3 
09fc0     FC 00 F2 12 
09fc4     0D 1C 1A 08 
09fc8     F0 FB 00 08 | 	byte	$05, $c3, $e8, $f3, $fc, $00, $f2, $12, $0d, $1c, $1a, $08, $f0, $fb, $00, $08
09fcc     12 13 17 03 
09fd0     16 16 1A 25 
09fd4     24 E2 C4 ED 
09fd8     E3 FA CE EB | 	byte	$12, $13, $17, $03, $16, $16, $1a, $25, $24, $e2, $c4, $ed, $e3, $fa, $ce, $eb
09fdc     03 E3 DE FA 
09fe0     FB EE 02 06 
09fe4     16 17 20 0B 
09fe8     F0 FA 01 03 | 	byte	$03, $e3, $de, $fa, $fb, $ee, $02, $06, $16, $17, $20, $0b, $f0, $fa, $01, $03
09fec     15 10 0B 00 
09ff0     1E 11 23 1C 
09ff4     2F F0 B9 F2 
09ff8     DE F4 C3 F2 | 	byte	$15, $10, $0b, $00, $1e, $11, $23, $1c, $2f, $f0, $b9, $f2, $de, $f4, $c3, $f2
09ffc     00 05 DD F2 
0a000     FC E4 0C FA 
0a004     1D 12 21 10 
0a008     F1 F6 02 FC | 	byte	$00, $05, $dd, $f2, $fc, $e4, $0c, $fa, $1d, $12, $21, $10, $f1, $f6, $02, $fc
0a00c     16 0A FC 0A 
0a010     17 17 23 1C 
0a014     2E 04 B0 EF 
0a018     E0 E2 C8 F1 | 	byte	$16, $0a, $fc, $0a, $17, $17, $23, $1c, $2e, $04, $b0, $ef, $e0, $e2, $c8, $f1
0a01c     FC 0E FA DE 
0a020     F9 E7 06 FA 
0a024     18 14 1C 18 
0a028     F3 F3 01 FB | 	byte	$fc, $0e, $fa, $de, $f9, $e7, $06, $fa, $18, $14, $1c, $18, $f3, $f3, $01, $fb
0a02c     13 00 00 0C 
0a030     13 20 1E 24 
0a034     2B 12 BC DE 
0a038     E7 CC D1 EE | 	byte	$13, $00, $00, $0c, $13, $20, $1e, $24, $2b, $12, $bc, $de, $e7, $cc, $d1, $ee
0a03c     FA 14 12 E0 
0a040     E8 F8 F5 05 
0a044     0D 1B 17 1D 
0a048     FB EE 01 F8 | 	byte	$fa, $14, $12, $e0, $e8, $f8, $f5, $05, $0d, $1b, $17, $1d, $fb, $ee, $01, $f8
0a04c     0C F5 06 08 
0a050     13 21 1B 24 
0a054     28 15 E1 C8 
0a058     E9 BC D3 EB | 	byte	$0c, $f5, $06, $08, $13, $21, $1b, $24, $28, $15, $e1, $c8, $e9, $bc, $d3, $eb
0a05c     F6 16 12 00 
0a060     D0 08 EB 08 
0a064     0B 18 18 1B 
0a068     0B E4 02 F6 | 	byte	$f6, $16, $12, $00, $d0, $08, $eb, $08, $0b, $18, $18, $1b, $0b, $e4, $02, $f6
0a06c     00 F4 08 05 
0a070     16 1C 1E 22 
0a074     2A 16 F3 D2 
0a078     D3 BE CE E8 | 	byte	$00, $f4, $08, $05, $16, $1c, $1e, $22, $2a, $16, $f3, $d2, $d3, $be, $ce, $e8
0a07c     F2 0F 14 10 
0a080     D2 FE F4 FD 
0a084     11 10 1B 18 
0a088     16 E2 FD F7 | 	byte	$f2, $0f, $14, $10, $d2, $fe, $f4, $fd, $11, $10, $1b, $18, $16, $e2, $fd, $f7
0a08c     EF FC 05 06 
0a090     18 1A 22 20 
0a094     2D 1B F5 FB 
0a098     BB BF CE E0 | 	byte	$ef, $fc, $05, $06, $18, $1a, $22, $20, $2d, $1b, $f5, $fb, $bb, $bf, $ce, $e0
0a09c     F5 05 13 0B 
0a0a0     ED E5 FC F6 
0a0a4     0D 0E 16 19 
0a0a8     18 EB F2 FA | 	byte	$f5, $05, $13, $0b, $ed, $e5, $fc, $f6, $0d, $0e, $16, $19, $18, $eb, $f2, $fa
0a0ac     E2 02 00 0D 
0a0b0     16 1B 23 25 
0a0b4     2B 24 F3 0E 
0a0b8     CA A8 DA D3 | 	byte	$e2, $02, $00, $0d, $16, $1b, $23, $25, $2b, $24, $f3, $0e, $ca, $a8, $da, $d3
0a0bc     F6 01 10 0B 
0a0c0     06 DD FA FB 
0a0c4     04 11 10 1D 
0a0c8     19 F5 EA F8 | 	byte	$f6, $01, $10, $0b, $06, $dd, $fa, $fb, $04, $11, $10, $1d, $19, $f5, $ea, $f8
0a0cc     DD 04 FB 10 
0a0d0     13 1C 22 27 
0a0d4     2A 2B F5 0E 
0a0d8     F1 8E DD CE | 	byte	$dd, $04, $fb, $10, $13, $1c, $22, $27, $2a, $2b, $f5, $0e, $f1, $8e, $dd, $ce
0a0dc     EC 00 09 0A 
0a0e0     0B E9 EC 04 
0a0e4     FB 12 0D 1D 
0a0e8     1B F9 E9 F0 | 	byte	$ec, $00, $09, $0a, $0b, $e9, $ec, $04, $fb, $12, $0d, $1d, $1b, $f9, $e9, $f0
0a0ec     E0 00 FC 0F 
0a0f0     13 1A 20 26 
0a0f4     2A 2B 00 06 
0a0f8     08 94 C8 D5 | 	byte	$e0, $00, $fc, $0f, $13, $1a, $20, $26, $2a, $2b, $00, $06, $08, $94, $c8, $d5
0a0fc     DE 00 03 04 
0a100     0B F9 E0 07 
0a104     FA 0E 10 18 
0a108     1D F8 EC E6 | 	byte	$de, $00, $03, $04, $0b, $f9, $e0, $07, $fa, $0e, $10, $18, $1d, $f8, $ec, $e6
0a10c     E7 F8 00 0B 
0a110     14 17 22 24 
0a114     2B 29 0F FC 
0a118     12 B7 AE E0 | 	byte	$e7, $f8, $00, $0b, $14, $17, $22, $24, $2b, $29, $0f, $fc, $12, $b7, $ae, $e0
0a11c     D4 FA 00 FC 
0a120     0D 05 DC 03 
0a124     FA 08 12 13 
0a128     20 F7 F0 E0 | 	byte	$d4, $fa, $00, $fc, $0d, $05, $dc, $03, $fa, $08, $12, $13, $20, $f7, $f0, $e0
0a12c     EC F5 01 0B 
0a130     15 18 22 26 
0a134     2B 2A 1B F7 
0a138     14 D9 9C E0 | 	byte	$ec, $f5, $01, $0b, $15, $18, $22, $26, $2b, $2a, $1b, $f7, $14, $d9, $9c, $e0
0a13c     D2 F1 00 F3 
0a140     0D 09 DC FE 
0a144     FD 04 12 13 
0a148     1C F8 F2 DB | 	byte	$d2, $f1, $00, $f3, $0d, $09, $dc, $fe, $fd, $04, $12, $13, $1c, $f8, $f2, $db
0a14c     EE F6 01 0E 
0a150     14 1C 21 29 
0a154     2B 2D 22 F8 
0a158     12 EF A0 D4 | 	byte	$ee, $f6, $01, $0e, $14, $1c, $21, $29, $2b, $2d, $22, $f8, $12, $ef, $a0, $d4
0a15c     D4 E8 FD EE 
0a160     0A 0B E0 F8 
0a164     FC 02 10 15 
0a168     16 F9 F2 DA | 	byte	$d4, $e8, $fd, $ee, $0a, $0b, $e0, $f8, $fc, $02, $10, $15, $16, $f9, $f2, $da
0a16c     EE F6 00 11 
0a170     12 1E 20 2C 
0a174     2A 30 27 FA 
0a178     10 FD AD C6 | 	byte	$ee, $f6, $00, $11, $12, $1e, $20, $2c, $2a, $30, $27, $fa, $10, $fd, $ad, $c6
0a17c     D9 E1 F7 EA 
0a180     06 0C E1 F4 
0a184     FB 01 0E 15 
0a188     0E FB F0 D9 | 	byte	$d9, $e1, $f7, $ea, $06, $0c, $e1, $f4, $fb, $01, $0e, $15, $0e, $fb, $f0, $d9
0a18c     F1 F6 02 13 
0a190     13 22 20 2F 
0a194     2B 32 28 FC 
0a198     0F 05 BA BA | 	byte	$f1, $f6, $02, $13, $13, $22, $20, $2f, $2b, $32, $28, $fc, $0f, $05, $ba, $ba
0a19c     DA DD EE EA 
0a1a0     02 0A E3 F1 
0a1a4     FC 00 0E 14 
0a1a8     05 00 EB D9 | 	byte	$da, $dd, $ee, $ea, $02, $0a, $e3, $f1, $fc, $00, $0e, $14, $05, $00, $eb, $d9
0a1ac     F3 F6 05 13 
0a1b0     14 23 22 30 
0a1b4     2A 32 2A FD 
0a1b8     0F 07 CA B2 | 	byte	$f3, $f6, $05, $13, $14, $23, $22, $30, $2a, $32, $2a, $fd, $0f, $07, $ca, $b2
0a1bc     DB DB E2 ED 
0a1c0     FE 0B E4 EE 
0a1c4     FD FE 10 13 
0a1c8     FC 03 E3 DD | 	byte	$db, $db, $e2, $ed, $fe, $0b, $e4, $ee, $fd, $fe, $10, $13, $fc, $03, $e3, $dd
0a1cc     F6 F7 0A 13 
0a1d0     18 23 26 30 
0a1d4     2E 33 2E FD 
0a1d8     10 08 D4 AE | 	byte	$f6, $f7, $0a, $13, $18, $23, $26, $30, $2e, $33, $2e, $fd, $10, $08, $d4, $ae
0a1dc     DB DA DA EF 
0a1e0     FB 0A E0 F0 
0a1e4     FC FD 12 0D 
0a1e8     F5 04 DA E5 | 	byte	$db, $da, $da, $ef, $fb, $0a, $e0, $f0, $fc, $fd, $12, $0d, $f5, $04, $da, $e5
0a1ec     F6 F9 10 13 
0a1f0     1D 23 2B 30 
0a1f4     31 32 33 00 
0a1f8     0E 0A D5 AC | 	byte	$f6, $f9, $10, $13, $1d, $23, $2b, $30, $31, $32, $33, $00, $0e, $0a, $d5, $ac
0a1fc     D9 D6 D8 F0 
0a200     F8 07 DA F2 
0a204     F9 FD 13 00 
0a208     FA FE D4 EE | 	byte	$d9, $d6, $d8, $f0, $f8, $07, $da, $f2, $f9, $fd, $13, $00, $fa, $fe, $d4, $ee
0a20c     F3 00 13 16 
0a210     21 26 2F 32 
0a214     32 33 38 07 
0a218     08 0C D2 AE | 	byte	$f3, $00, $13, $16, $21, $26, $2f, $32, $32, $33, $38, $07, $08, $0c, $d2, $ae
0a21c     D8 D3 D8 ED 
0a220     F7 01 D4 F5 
0a224     F4 00 11 F0 
0a228     04 EB D6 F6 | 	byte	$d8, $d3, $d8, $ed, $f7, $01, $d4, $f5, $f4, $00, $11, $f0, $04, $eb, $d6, $f6
0a22c     F3 07 14 1A 
0a230     23 27 33 32 
0a234     34 34 3B 16 
0a238     00 10 CB AE | 	byte	$f3, $07, $14, $1a, $23, $27, $33, $32, $34, $34, $3b, $16, $00, $10, $cb, $ae
0a23c     D8 D2 DA EA 
0a240     F7 F2 D3 F7 
0a244     F0 03 03 ED 
0a248     05 D7 E4 F3 | 	byte	$d8, $d2, $da, $ea, $f7, $f2, $d3, $f7, $f0, $03, $03, $ed, $05, $d7, $e4, $f3
0a24c     F8 0D 17 20 
0a250     26 2B 36 33 
0a254     37 38 3D 27 
0a258     F9 0E C2 AE | 	byte	$f8, $0d, $17, $20, $26, $2b, $36, $33, $37, $38, $3d, $27, $f9, $0e, $c2, $ae
0a25c     DA D2 DC E6 
0a260     F8 E0 D9 F3 
0a264     EF 06 EE F9 
0a268     F5 CE F2 F0 | 	byte	$da, $d2, $dc, $e6, $f8, $e0, $d9, $f3, $ef, $06, $ee, $f9, $f5, $ce, $f2, $f0
0a26c     02 10 1B 23 
0a270     29 30 37 36 
0a274     38 39 3C 33 
0a278     00 03 B8 B2 | 	byte	$02, $10, $1b, $23, $29, $30, $37, $36, $38, $39, $3c, $33, $00, $03, $b8, $b2
0a27c     DB D4 DE E5 
0a280     FA D1 E0 EF 
0a284     F2 FE E6 00 
0a288     DA D6 F5 F1 | 	byte	$db, $d4, $de, $e5, $fa, $d1, $e0, $ef, $f2, $fe, $e6, $00, $da, $d6, $f5, $f1
0a28c     0B 12 20 26 
0a290     2D 34 37 37 
0a294     3B 3C 3A 37 
0a298     10 EC AE BC | 	byte	$0b, $12, $20, $26, $2d, $34, $37, $37, $3b, $3c, $3a, $37, $10, $ec, $ae, $bc
0a29c     D7 DA DA E6 
0a2a0     FA C6 E6 EA 
0a2a4     F4 EB EB F6 
0a2a8     C8 EA EE FD | 	byte	$d7, $da, $da, $e6, $fa, $c6, $e6, $ea, $f4, $eb, $eb, $f6, $c8, $ea, $ee, $fd
0a2ac     0E 17 24 29 
0a2b0     32 35 38 3A 
0a2b4     3C 3E 39 38 
0a2b8     1E D0 AC C6 | 	byte	$0e, $17, $24, $29, $32, $35, $38, $3a, $3c, $3e, $39, $38, $1e, $d0, $ac, $c6
0a2bc     D2 E2 D5 EE 
0a2c0     F5 C1 EA E9 
0a2c4     F2 E0 F2 DB 
0a2c8     CB F2 EA 0A | 	byte	$d2, $e2, $d5, $ee, $f5, $c1, $ea, $e9, $f2, $e0, $f2, $db, $cb, $f2, $ea, $0a
0a2cc     0C 1E 22 30 
0a2d0     33 38 38 3F 
0a2d4     3C 3D 38 3B 
0a2d8     23 B8 B0 CE | 	byte	$0c, $1e, $22, $30, $33, $38, $38, $3f, $3c, $3d, $38, $3b, $23, $b8, $b0, $ce
0a2dc     CE E6 D1 F4 
0a2e0     ED C1 EB EA 
0a2e4     E6 E0 EC C2 
0a2e8     E0 EB F3 11 | 	byte	$ce, $e6, $d1, $f4, $ed, $c1, $eb, $ea, $e6, $e0, $ec, $c2, $e0, $eb, $f3, $11
0a2ec     0E 24 24 36 
0a2f0     32 3A 39 42 
0a2f4     3A 3D 38 3C 
0a2f8     18 B2 B6 D0 | 	byte	$0e, $24, $24, $36, $32, $3a, $39, $42, $3a, $3d, $38, $3c, $18, $b2, $b6, $d0
0a2fc     D0 E6 D2 F8 
0a300     E8 C2 EC E8 
0a304     DA E6 D2 C4 
0a308     EB E4 03 0C | 	byte	$d0, $e6, $d2, $f8, $e8, $c2, $ec, $e8, $da, $e6, $d2, $c4, $eb, $e4, $03, $0c
0a30c     16 23 2E 37 
0a310     36 3A 3F 40 
0a314     3B 3B 3B 37 
0a318     00 BC B6 D4 | 	byte	$16, $23, $2e, $37, $36, $3a, $3f, $40, $3b, $3b, $3b, $37, $00, $bc, $b6, $d4
0a31c     D0 E5 D9 F4 
0a320     EB C2 F3 E1 
0a324     D8 E2 B3 DE 
0a328     E4 EE 0B 0A | 	byte	$d0, $e5, $d9, $f4, $eb, $c2, $f3, $e1, $d8, $e2, $b3, $de, $e4, $ee, $0b, $0a
0a32c     20 22 35 31 
0a330     3A 39 43 3A 
0a334     3D 3A 3E 24 
0a338     F8 C9 AC E0 | 	byte	$20, $22, $35, $31, $3a, $39, $43, $3a, $3d, $3a, $3e, $24, $f8, $c9, $ac, $e0
0a33c     CD E8 DA F5 
0a340     F0 C4 F6 DB 
0a344     D7 C8 BC E1 
0a348     E1 FB 06 0F | 	byte	$cd, $e8, $da, $f5, $f0, $c4, $f6, $db, $d7, $c8, $bc, $e1, $e1, $fb, $06, $0f
0a34c     20 28 32 32 
0a350     3A 3C 40 3B 
0a354     3C 3B 38 00 
0a358     11 C8 AC E6 | 	byte	$20, $28, $32, $32, $3a, $3c, $40, $3b, $3c, $3b, $38, $00, $11, $c8, $ac, $e6
0a35c     CA EE D6 FA 
0a360     F3 C9 EE D8 
0a364     C3 C2 C4 DE 
0a368     E8 FD 05 13 | 	byte	$ca, $ee, $d6, $fa, $f3, $c9, $ee, $d8, $c3, $c2, $c4, $de, $e8, $fd, $05, $13
0a36c     20 29 2F 35 
0a370     3B 3C 3D 3A 
0a374     3C 39 23 FC 
0a378     22 CB B1 E6 | 	byte	$20, $29, $2f, $35, $3b, $3c, $3d, $3a, $3c, $39, $23, $fc, $22, $cb, $b1, $e6
0a37c     D2 EA DA FA 
0a380     FB CC EA CC 
0a384     B8 C5 C3 E4 
0a388     EA FF 0A 14 | 	byte	$d2, $ea, $da, $fa, $fb, $cc, $ea, $cc, $b8, $c5, $c3, $e4, $ea, $ff, $0a, $14
0a38c     22 27 32 33 
0a390     3D 39 3F 3B 
0a394     3E 35 02 14 
0a398     1A E6 AE E9 | 	byte	$22, $27, $32, $33, $3d, $39, $3f, $3b, $3e, $35, $02, $14, $1a, $e6, $ae, $e9
0a39c     D7 E4 E0 F6 
0a3a0     00 D0 E0 B9 
0a3a4     C6 B6 D0 E0 
0a3a8     F0 00 0C 16 | 	byte	$d7, $e4, $e0, $f6, $00, $d0, $e0, $b9, $c6, $b6, $d0, $e0, $f0, $00, $0c, $16
0a3ac     23 27 36 33 
0a3b0     3D 38 40 38 
0a3b4     3C 21 03 20 
0a3b8     16 00 AE E5 | 	byte	$23, $27, $36, $33, $3d, $38, $40, $38, $3c, $21, $03, $20, $16, $00, $ae, $e5
0a3bc     DC E0 E5 F0 
0a3c0     00 DE BE CB 
0a3c4     BA B6 D7 DA 
0a3c8     F4 FC 0F 14 | 	byte	$dc, $e0, $e5, $f0, $00, $de, $be, $cb, $ba, $b6, $d7, $da, $f4, $fc, $0f, $14
0a3cc     23 27 34 32 
0a3d0     3B 38 3F 38 
0a3d4     3A 01 19 16 
0a3d8     1A 12 BB DA | 	byte	$23, $27, $34, $32, $3b, $38, $3f, $38, $3a, $01, $19, $16, $1a, $12, $bb, $da
0a3dc     E1 E0 E2 EE 
0a3e0     FD E7 B6 D3 
0a3e4     B2 BB D3 D9 
0a3e8     F0 FE 0C 12 | 	byte	$e1, $e0, $e2, $ee, $fd, $e7, $b6, $d3, $b2, $bb, $d3, $d9, $f0, $fe, $0c, $12
0a3ec     20 29 2F 32 
0a3f0     38 3B 3A 38 
0a3f4     2B FE 23 12 
0a3f8     22 1E D4 CF | 	byte	$20, $29, $2f, $32, $38, $3b, $3a, $38, $2b, $fe, $23, $12, $22, $1e, $d4, $cf
0a3fc     E6 E5 DA F0 
0a400     F2 E8 C5 C6 
0a404     BA B4 D3 D6 
0a408     F0 FE 07 12 | 	byte	$e6, $e5, $da, $f0, $f2, $e8, $c5, $c6, $ba, $b4, $d3, $d6, $f0, $fe, $07, $12
0a40c     1D 2A 2C 32 
0a410     37 3C 38 38 
0a414     13 0D 20 15 
0a418     28 23 EA D1 | 	byte	$1d, $2a, $2c, $32, $37, $3c, $38, $38, $13, $0d, $20, $15, $28, $23, $ea, $d1
0a41c     E2 E9 D5 EC 
0a420     DE F0 DE BA 
0a424     C3 AA D3 D2 
0a428     F0 FA 04 10 | 	byte	$e2, $e9, $d5, $ec, $de, $f0, $de, $ba, $c3, $aa, $d3, $d2, $f0, $fa, $04, $10
0a42c     1C 27 2A 2F 
0a430     37 3A 38 33 
0a434     02 1B 1A 1C 
0a438     2A 26 06 E1 | 	byte	$1c, $27, $2a, $2f, $37, $3a, $38, $33, $02, $1b, $1a, $1c, $2a, $26, $06, $e1
0a43c     DD E9 DA D9 
0a440     DB F2 F6 C1 
0a444     BD AF CB D4 
0a448     E8 F7 01 0E | 	byte	$dd, $e9, $da, $d9, $db, $f2, $f6, $c1, $bd, $af, $cb, $d4, $e8, $f7, $01, $0e
0a44c     19 22 26 2D 
0a450     33 37 36 2B 
0a454     FB 24 13 24 
0a458     27 2C 21 E6 | 	byte	$19, $22, $26, $2d, $33, $37, $36, $2b, $fb, $24, $13, $24, $27, $2c, $21, $e6
0a45c     EB DB E6 BB 
0a460     E6 E9 F6 E5 
0a464     AA B6 C0 D4 
0a468     E0 F2 FC 0A | 	byte	$eb, $db, $e6, $bb, $e6, $e9, $f6, $e5, $aa, $b6, $c0, $d4, $e0, $f2, $fc, $0a
0a46c     12 1D 23 2C 
0a470     2F 35 33 20 
0a474     00 24 12 29 
0a478     25 2F 2E F9 | 	byte	$12, $1d, $23, $2c, $2f, $35, $33, $20, $00, $24, $12, $29, $25, $2f, $2e, $f9
0a47c     FC D9 E0 BB 
0a480     E0 E6 F3 00 
0a484     B3 AA C4 C6 
0a488     E0 EA FA 05 | 	byte	$fc, $d9, $e0, $bb, $e0, $e6, $f3, $00, $b3, $aa, $c4, $c6, $e0, $ea, $fa, $05
0a48c     0E 1A 22 27 
0a490     2E 32 35 10 
0a494     09 21 1A 28 
0a498     28 30 33 20 | 	byte	$0e, $1a, $22, $27, $2e, $32, $35, $10, $09, $21, $1a, $28, $28, $30, $33, $20
0a49c     EE 00 BE D2 
0a4a0     CF E6 F3 FA 
0a4a4     E1 92 CD BC 
0a4a8     DA E6 F5 00 | 	byte	$ee, $00, $be, $d2, $cf, $e6, $f3, $fa, $e1, $92, $cd, $bc, $da, $e6, $f5, $00
0a4ac     0A 17 20 23 
0a4b0     2A 2E 34 05 
0a4b4     0D 20 1C 29 
0a4b8     26 33 33 31 | 	byte	$0a, $17, $20, $23, $2a, $2e, $34, $05, $0d, $20, $1c, $29, $26, $33, $33, $31
0a4bc     F7 05 CA CC 
0a4c0     D0 DA F2 F0 
0a4c4     00 9D B5 C6 
0a4c8     C4 E9 E8 FE | 	byte	$f7, $05, $ca, $cc, $d0, $da, $f2, $f0, $00, $9d, $b5, $c6, $c4, $e9, $e8, $fe
0a4cc     01 14 1A 20 
0a4d0     24 30 2F 02 
0a4d4     0D 20 1B 2B 
0a4d8     24 37 33 35 | 	byte	$01, $14, $1a, $20, $24, $30, $2f, $02, $0d, $20, $1b, $2b, $24, $37, $33, $35
0a4dc     20 E9 FC C8 
0a4e0     CC DB E6 F1 
0a4e4     F8 C1 96 CB 
0a4e8     B6 E3 E5 F2 | 	byte	$20, $e9, $fc, $c8, $cc, $db, $e6, $f1, $f8, $c1, $96, $cb, $b6, $e3, $e5, $f2
0a4ec     00 0C 1A 1A 
0a4f0     23 2B 32 FE 
0a4f4     11 1E 20 28 
0a4f8     29 33 3A 32 | 	byte	$00, $0c, $1a, $1a, $23, $2b, $32, $fe, $11, $1e, $20, $28, $29, $33, $3a, $32
0a4fc     36 EA F6 00 
0a500     C0 DE E2 E8 
0a504     F8 DC 8E C0 
0a508     BA D1 E8 E6 | 	byte	$36, $ea, $f6, $00, $c0, $de, $e2, $e8, $f8, $dc, $8e, $c0, $ba, $d1, $e8, $e6
0a50c     00 04 19 15 
0a510     20 27 32 FE 
0a514     0D 1E 20 29 
0a518     27 33 39 34 | 	byte	$00, $04, $19, $15, $20, $27, $32, $fe, $0d, $1e, $20, $29, $27, $33, $39, $34
0a51c     35 0B E3 0E 
0a520     EC CB E3 E2 
0a524     EE E8 9A AB 
0a528     BE C2 E5 E0 | 	byte	$35, $0b, $e3, $0e, $ec, $cb, $e3, $e2, $ee, $e8, $9a, $ab, $be, $c2, $e5, $e0
0a52c     F9 00 12 13 
0a530     1D 24 2F 07 
0a534     05 20 1C 29 
0a538     27 33 3B 36 | 	byte	$f9, $00, $12, $13, $1d, $24, $2f, $07, $05, $20, $1c, $29, $27, $33, $3b, $36
0a53c     37 1B F0 00 
0a540     07 F6 CC E8 
0a544     E5 E2 B2 92 
0a548     C1 B4 DC DD | 	byte	$37, $1b, $f0, $00, $07, $f6, $cc, $e8, $e5, $e2, $b2, $92, $c1, $b4, $dc, $dd
0a54c     EF FE 0A 13 
0a550     18 25 29 15 
0a554     F9 24 16 2C 
0a558     26 35 36 3C | 	byte	$ef, $fe, $0a, $13, $18, $25, $29, $15, $f9, $24, $16, $2c, $26, $35, $36, $3c
0a55c     36 20 0C EE 
0a560     0F 0A F5 CB 
0a564     F0 D8 BE 8B 
0a568     B4 B8 CA E0 | 	byte	$36, $20, $0c, $ee, $0f, $0a, $f5, $cb, $f0, $d8, $be, $8b, $b4, $b8, $ca, $e0
0a56c     E2 FE 00 14 
0a570     12 24 24 20 
0a574     F0 24 13 2B 
0a578     26 33 35 3B | 	byte	$e2, $fe, $00, $14, $12, $24, $24, $20, $f0, $24, $13, $2b, $26, $33, $35, $3b
0a57c     35 1F 26 E5 
0a580     0D 0C 13 E6 
0a584     D2 E8 B9 8E 
0a588     AC B5 C5 D8 | 	byte	$35, $1f, $26, $e5, $0d, $0c, $13, $e6, $d2, $e8, $b9, $8e, $ac, $b5, $c5, $d8
0a58c     E1 F5 00 0A 
0a590     13 1E 26 23 
0a594     F2 1B 17 21 
0a598     2C 2E 38 36 | 	byte	$e1, $f5, $00, $0a, $13, $1e, $26, $23, $f2, $1b, $17, $21, $2c, $2e, $38, $36
0a59c     38 1C 30 EE 
0a5a0     03 13 0F 20 
0a5a4     CC DA C8 84 
0a5a8     AC AE BF D3 | 	byte	$38, $1c, $30, $ee, $03, $13, $0f, $20, $cc, $da, $c8, $84, $ac, $ae, $bf, $d3
0a5ac     DB F3 FA 08 
0a5b0     10 1E 22 27 
0a5b4     F6 15 19 1C 
0a5b8     2B 2F 37 38 | 	byte	$db, $f3, $fa, $08, $10, $1e, $22, $27, $f6, $15, $19, $1c, $2b, $2f, $37, $38
0a5bc     35 20 30 03 
0a5c0     F3 1C 09 24 
0a5c4     02 BB D3 84 
0a5c8     A0 B4 B2 D2 | 	byte	$35, $20, $30, $03, $f3, $1c, $09, $24, $02, $bb, $d3, $84, $a0, $b4, $b2, $d2
0a5cc     D2 F1 F6 05 
0a5d0     0C 1C 22 27 
0a5d4     00 0B 1E 16 
0a5d8     2A 2D 36 35 | 	byte	$d2, $f1, $f6, $05, $0c, $1c, $22, $27, $00, $0b, $1e, $16, $2a, $2d, $36, $35
0a5dc     33 20 32 13 
0a5e0     ED 1E 0C 20 
0a5e4     1A D5 C0 8C 
0a5e8     94 B3 B1 CA | 	byte	$33, $20, $32, $13, $ed, $1e, $0c, $20, $1a, $d5, $c0, $8c, $94, $b3, $b1, $ca
0a5ec     D2 EA F5 00 
0a5f0     0B 19 21 24 
0a5f4     09 02 20 13 
0a5f8     2A 2C 34 35 | 	byte	$d2, $ea, $f5, $00, $0b, $19, $21, $24, $09, $02, $20, $13, $2a, $2c, $34, $35
0a5fc     30 21 32 1D 
0a600     EB 1C 0E 20 
0a604     1A EC C8 84 
0a608     9E A8 B2 C6 | 	byte	$30, $21, $32, $1d, $eb, $1c, $0e, $20, $1a, $ec, $c8, $84, $9e, $a8, $b2, $c6
0a60c     CE EA F0 00 
0a610     06 19 1D 26 
0a614     0E 00 20 14 
0a618     28 2D 33 38 | 	byte	$ce, $ea, $f0, $00, $06, $19, $1d, $26, $0e, $00, $20, $14, $28, $2d, $33, $38
0a61c     28 25 32 25 
0a620     EB 18 11 1C 
0a624     11 FC E0 84 
0a628     9E A7 AE C8 | 	byte	$28, $25, $32, $25, $eb, $18, $11, $1c, $11, $fc, $e0, $84, $9e, $a7, $ae, $c8
0a62c     CA E6 ED FE 
0a630     08 15 1D 23 
0a634     13 FA 21 12 
0a638     29 2A 33 36 | 	byte	$ca, $e6, $ed, $fe, $08, $15, $1d, $23, $13, $fa, $21, $12, $29, $2a, $33, $36
0a63c     23 28 32 28 
0a640     F1 14 16 1A 
0a644     08 06 DA 96 
0a648     92 AB AD C3 | 	byte	$23, $28, $32, $28, $f1, $14, $16, $1a, $08, $06, $da, $96, $92, $ab, $ad, $c3
0a64c     D0 E0 F1 F9 
0a650     09 0F 20 21 
0a654     16 F5 22 11 
0a658     2A 27 35 34 | 	byte	$d0, $e0, $f1, $f9, $09, $0f, $20, $21, $16, $f5, $22, $11, $2a, $27, $35, $34
0a65c     20 2C 31 2B 
0a660     F3 13 17 12 
0a664     05 0B D3 AB 
0a668     98 A2 B7 BD | 	byte	$20, $2c, $31, $2b, $f3, $13, $17, $12, $05, $0b, $d3, $ab, $98, $a2, $b7, $bd
0a66c     D4 DB F0 FB 
0a670     06 10 1B 23 
0a674     15 F2 20 13 
0a678     28 27 32 33 | 	byte	$d4, $db, $f0, $fb, $06, $10, $1b, $23, $15, $f2, $20, $13, $28, $27, $32, $33
0a67c     1A 30 2C 2F 
0a680     F0 18 13 04 
0a684     0A 01 D3 B0 
0a688     B6 94 C0 BE | 	byte	$1a, $30, $2c, $2f, $f0, $18, $13, $04, $0a, $01, $d3, $b0, $b6, $94, $c0, $be
0a68c     D3 E0 EB 00 
0a690     03 12 16 23 
0a694     18 F1 1A 15 
0a698     23 2A 2D 33 | 	byte	$d3, $e0, $eb, $00, $03, $12, $16, $23, $18, $f1, $1a, $15, $23, $2a, $2d, $33
0a69c     16 33 28 2C 
0a6a0     EC 20 07 01 
0a6a4     10 EE D8 AE 
0a6a8     D2 94 C0 C7 | 	byte	$16, $33, $28, $2c, $ec, $20, $07, $01, $10, $ee, $d8, $ae, $d2, $94, $c0, $c7
0a6ac     CE E7 EA 02 
0a6b0     02 12 16 24 
0a6b4     20 F0 16 16 
0a6b8     20 2A 2A 2E | 	byte	$ce, $e7, $ea, $02, $02, $12, $16, $24, $20, $f0, $16, $16, $20, $2a, $2a, $2e
0a6bc     16 32 28 1E 
0a6c0     F1 20 F6 09 
0a6c4     09 E8 D9 AE 
0a6c8     E0 A6 BB CE | 	byte	$16, $32, $28, $1e, $f1, $20, $f6, $09, $09, $e8, $d9, $ae, $e0, $a6, $bb, $ce
0a6cc     D0 E8 ED 00 
0a6d0     07 10 1A 20 
0a6d4     26 F4 0D 18 
0a6d8     1B 28 29 28 | 	byte	$d0, $e8, $ed, $00, $07, $10, $1a, $20, $26, $f4, $0d, $18, $1b, $28, $29, $28
0a6dc     18 2C 2A 06 
0a6e0     00 16 EE 11 
0a6e4     F3 F7 CE B8 
0a6e8     E4 BC B8 D0 | 	byte	$18, $2c, $2a, $06, $00, $16, $ee, $11, $f3, $f7, $ce, $b8, $e4, $bc, $b8, $d0
0a6ec     D8 E5 F3 FA 
0a6f0     0E 0D 1C 1E 
0a6f4     2C 05 FE 1A 
0a6f8     18 23 29 23 | 	byte	$d8, $e5, $f3, $fa, $0e, $0d, $1c, $1e, $2c, $05, $fe, $1a, $18, $23, $29, $23
0a6fc     1B 26 28 F0 
0a700     0F FE F7 0D 
0a704     E8 06 C0 C8 
0a708     E1 CE B9 D0 | 	byte	$1b, $26, $28, $f0, $0f, $fe, $f7, $0d, $e8, $06, $c0, $c8, $e1, $ce, $b9, $d0
0a70c     E0 E3 F8 F8 
0a710     11 0D 1C 1D 
0a714     2B 1B F1 18 
0a718     16 1E 28 22 | 	byte	$e0, $e3, $f8, $f8, $11, $0d, $1c, $1d, $2b, $1b, $f1, $18, $16, $1e, $28, $22
0a71c     18 26 21 E6 
0a720     17 EB 02 F5 
0a724     F4 07 BB D7 
0a728     DD E0 BC D3 | 	byte	$18, $26, $21, $e6, $17, $eb, $02, $f5, $f4, $07, $bb, $d7, $dd, $e0, $bc, $d3
0a72c     E3 E4 F9 FC 
0a730     10 10 1A 20 
0a734     28 26 F0 12 
0a738     16 18 26 22 | 	byte	$e3, $e4, $f9, $fc, $10, $10, $1a, $20, $28, $26, $f0, $12, $16, $18, $26, $22
0a73c     13 25 14 E7 
0a740     13 E5 07 E6 
0a744     04 00 BE DE 
0a748     DD E8 C3 D6 | 	byte	$13, $25, $14, $e7, $13, $e5, $07, $e6, $04, $00, $be, $de, $dd, $e8, $c3, $d6
0a74c     E5 E6 F8 00 
0a750     0C 12 18 23 
0a754     26 29 FB 08 
0a758     19 13 24 20 | 	byte	$e5, $e6, $f8, $00, $0c, $12, $18, $23, $26, $29, $fb, $08, $19, $13, $24, $20
0a75c     10 26 08 EC 
0a760     07 E8 FE E8 
0a764     0C FB C1 DE 
0a768     E0 EA CC D1 | 	byte	$10, $26, $08, $ec, $07, $e8, $fe, $e8, $0c, $fb, $c1, $de, $e0, $ea, $cc, $d1
0a76c     E9 E6 FA 00 
0a770     0C 13 18 23 
0a774     25 29 0A FD 
0a778     1B 10 23 1C | 	byte	$e9, $e6, $fa, $00, $0c, $13, $18, $23, $25, $29, $0a, $fd, $1b, $10, $23, $1c
0a77c     0C 26 00 F1 
0a780     FC ED F0 F2 
0a784     0B 01 C3 E0 
0a788     E3 EA DA CA | 	byte	$0c, $26, $00, $f1, $fc, $ed, $f0, $f2, $0b, $01, $c3, $e0, $e3, $ea, $da, $ca
0a78c     ED E5 FA 00 
0a790     0C 12 17 22 
0a794     23 29 12 F6 
0a798     1B 0F 22 16 | 	byte	$ed, $e5, $fa, $00, $0c, $12, $17, $22, $23, $29, $12, $f6, $1b, $0f, $22, $16
0a79c     0C 26 FA F3 
0a7a0     F6 EE E7 FC 
0a7a4     08 0A C2 E0 
0a7a8     E7 EA E9 C5 | 	byte	$0c, $26, $fa, $f3, $f6, $ee, $e7, $fc, $08, $0a, $c2, $e0, $e7, $ea, $e9, $c5
0a7ac     EE E6 F9 01 
0a7b0     08 13 16 21 
0a7b4     22 28 19 F2 
0a7b8     1A 0E 20 12 | 	byte	$ee, $e6, $f9, $01, $08, $13, $16, $21, $22, $28, $19, $f2, $1a, $0e, $20, $12
0a7bc     0D 25 F8 F4 
0a7c0     F1 EA E7 00 
0a7c4     06 13 C6 E0 
0a7c8     EA E9 F4 C3 | 	byte	$0d, $25, $f8, $f4, $f1, $ea, $e7, $00, $06, $13, $c6, $e0, $ea, $e9, $f4, $c3
0a7cc     ED E8 F6 03 
0a7d0     05 13 15 20 
0a7d4     21 28 1D F1 
0a7d8     16 10 1A 0E | 	byte	$ed, $e8, $f6, $03, $05, $13, $15, $20, $21, $28, $1d, $f1, $16, $10, $1a, $0e
0a7dc     0E 25 F9 F1 
0a7e0     EF E4 E9 01 
0a7e4     05 18 D0 DA 
0a7e8     EF EA FC CA | 	byte	$0e, $25, $f9, $f1, $ef, $e4, $e9, $01, $05, $18, $d0, $da, $ef, $ea, $fc, $ca
0a7ec     E6 EE EF 05 
0a7f0     01 13 12 20 
0a7f4     20 28 20 F1 
0a7f8     0E 13 13 0C | 	byte	$e6, $ee, $ef, $05, $01, $13, $12, $20, $20, $28, $20, $f1, $0e, $13, $13, $0c
0a7fc     0B 23 00 EB 
0a800     EF DC EC 01 
0a804     05 1A E3 D1 
0a808     F3 E7 FE DB | 	byte	$0b, $23, $00, $eb, $ef, $dc, $ec, $01, $05, $1a, $e3, $d1, $f3, $e7, $fe, $db
0a80c     D8 F5 E9 03 
0a810     00 10 12 1B 
0a814     20 26 23 F8 
0a818     04 15 0E 0B | 	byte	$d8, $f5, $e9, $03, $00, $10, $12, $1b, $20, $26, $23, $f8, $04, $15, $0e, $0b
0a81c     0A 21 0A E4 
0a820     EE D6 EC FE 
0a824     05 1A FC CB 
0a828     F4 E8 FA F3 | 	byte	$0a, $21, $0a, $e4, $ee, $d6, $ec, $fe, $05, $1a, $fc, $cb, $f4, $e8, $fa, $f3
0a82c     CC F6 E8 FD 
0a830     02 0A 10 18 
0a834     1E 23 23 09 
0a838     F7 19 0A 08 | 	byte	$cc, $f6, $e8, $fd, $02, $0a, $10, $18, $1e, $23, $23, $09, $f7, $19, $0a, $08
0a83c     0B 1D 15 E2 
0a840     EC D3 EA FC 
0a844     05 18 0D D3 
0a848     EC EF F5 01 | 	byte	$0b, $1d, $15, $e2, $ec, $d3, $ea, $fc, $05, $18, $0d, $d3, $ec, $ef, $f5, $01
0a84c     D0 EA EE F3 
0a850     04 04 10 14 
0a854     1E 20 23 18 
0a858     EC 15 09 02 | 	byte	$d0, $ea, $ee, $f3, $04, $04, $10, $14, $1e, $20, $23, $18, $ec, $15, $09, $02
0a85c     0D 18 1C E9 
0a860     E5 D5 E6 FB 
0a864     05 16 13 ED 
0a868     DD F7 EF 02 | 	byte	$0d, $18, $1c, $e9, $e5, $d5, $e6, $fb, $05, $16, $13, $ed, $dd, $f7, $ef, $02
0a86c     EC D5 F6 EB 
0a870     02 02 0B 12 
0a874     19 1E 22 20 
0a878     F1 07 0F FC | 	byte	$ec, $d5, $f6, $eb, $02, $02, $0b, $12, $19, $1e, $22, $20, $f1, $07, $0f, $fc
0a87c     0D 14 1C FE 
0a880     DA D8 E0 F9 
0a884     01 13 17 06 
0a888     DB F0 F3 F9 | 	byte	$0d, $14, $1c, $fe, $da, $d8, $e0, $f9, $01, $13, $17, $06, $db, $f0, $f3, $f9
0a88c     04 D2 EC EF 
0a890     F7 03 04 10 
0a894     16 1B 1E 21 
0a898     09 F2 14 F8 | 	byte	$04, $d2, $ec, $ef, $f7, $03, $04, $10, $16, $1b, $1e, $21, $09, $f2, $14, $f8
0a89c     06 15 15 19 
0a8a0     D4 D8 DD F3 
0a8a4     00 0F 18 0A 
0a8a8     F7 DE FC F2 | 	byte	$06, $15, $15, $19, $d4, $d8, $dd, $f3, $00, $0f, $18, $0a, $f7, $de, $fc, $f2
0a8ac     04 F2 D4 F6 
0a8b0     EC 00 01 0A 
0a8b4     12 18 1C 1E 
0a8b8     1D EB 0D 01 | 	byte	$04, $f2, $d4, $f6, $ec, $00, $01, $0a, $12, $18, $1c, $1e, $1d, $eb, $0d, $01
0a8bc     F6 19 0E 22 
0a8c0     E8 C9 E0 E8 
0a8c4     00 0A 15 13 
0a8c8     0D E2 EF F8 | 	byte	$f6, $19, $0e, $22, $e8, $c9, $e0, $e8, $00, $0a, $15, $13, $0d, $e2, $ef, $f8
0a8cc     FA 0A D8 E7 
0a8d0     F4 F2 03 02 
0a8d4     10 14 18 1C 
0a8d8     21 02 F4 0E | 	byte	$fa, $0a, $d8, $e7, $f4, $f2, $03, $02, $10, $14, $18, $1c, $21, $02, $f4, $0e
0a8dc     EB 14 0F 1A 
0a8e0     13 BA E0 E3 
0a8e4     F6 09 10 1B 
0a8e8     0A 02 DC FD | 	byte	$eb, $14, $0f, $1a, $13, $ba, $e0, $e3, $f6, $09, $10, $1b, $0a, $02, $dc, $fd
0a8ec     F6 06 02 D0 
0a8f0     F8 EE FD 00 
0a8f4     09 11 17 17 
0a8f8     20 1C EB 06 | 	byte	$f6, $06, $02, $d0, $f8, $ee, $fd, $00, $09, $11, $17, $17, $20, $1c, $eb, $06
0a8fc     F3 00 17 0C 
0a900     26 CE C3 EC 
0a904     E4 08 0C 19 
0a908     14 11 E7 EF | 	byte	$f3, $00, $17, $0c, $26, $ce, $c3, $ec, $e4, $08, $0c, $19, $14, $11, $e7, $ef
0a90c     00 FA 0F EF 
0a910     E0 F8 F1 FD 
0a914     04 0B 16 12 
0a918     1B 1E 0D E9 | 	byte	$00, $fa, $0f, $ef, $e0, $f8, $f1, $fd, $04, $0b, $16, $12, $1b, $1e, $0d, $e9
0a91c     06 EC 15 0A 
0a920     1A 04 A3 EE 
0a924     DA 00 0C 12 
0a928     1E 0E 05 E0 | 	byte	$06, $ec, $15, $0a, $1a, $04, $a3, $ee, $da, $00, $0c, $12, $1e, $0e, $05, $e0
0a92c     00 F9 0A 0A 
0a930     E6 EB F8 F4 
0a934     00 09 10 15 
0a938     12 20 1E F3 | 	byte	$00, $f9, $0a, $0a, $e6, $eb, $f8, $f4, $00, $09, $10, $15, $12, $20, $1e, $f3
0a93c     F5 F3 FE 12 
0a940     0B 1B B3 CE 
0a944     E4 E9 0E 0B 
0a948     1E 18 14 E3 | 	byte	$f5, $f3, $fe, $12, $0b, $1b, $b3, $ce, $e4, $e9, $0e, $0b, $1e, $18, $14, $e3
0a94c     F6 FE 04 0D 
0a950     08 E7 F0 F9 
0a954     F3 06 0A 11 
0a958     11 18 20 18 | 	byte	$f6, $fe, $04, $0d, $08, $e7, $f0, $f9, $f3, $06, $0a, $11, $11, $18, $20, $18
0a95c     E2 F7 F3 08 
0a960     0A 11 E3 A9 
0a964     EB DA 06 0A 
0a968     16 24 16 F4 | 	byte	$e2, $f7, $f3, $08, $0a, $11, $e3, $a9, $eb, $da, $06, $0a, $16, $24, $16, $f4
0a96c     EB 00 02 0F 
0a970     0A 11 E4 F9 
0a974     F6 FB 0C 0C 
0a978     0F 15 1B 20 | 	byte	$eb, $00, $02, $0f, $0a, $11, $e4, $f9, $f6, $fb, $0c, $0c, $0f, $15, $1b, $20
0a97c     0B E2 F2 FD 
0a980     02 0C F0 AE 
0a984     D1 E0 F0 10 
0a988     0C 23 23 02 | 	byte	$0b, $e2, $f2, $fd, $02, $0c, $f0, $ae, $d1, $e0, $f0, $10, $0c, $23, $23, $02
0a98c     E4 00 FB 10 
0a990     0B 12 15 E6 
0a994     FC F6 03 0D 
0a998     0C 10 18 1B | 	byte	$e4, $00, $fb, $10, $0b, $12, $15, $e6, $fc, $f6, $03, $0d, $0c, $10, $18, $1b
0a99c     1B 00 E0 F6 
0a9a0     FC 00 F2 C1 
0a9a4     BC E0 E8 04 
0a9a8     10 16 31 13 | 	byte	$1b, $00, $e0, $f6, $fc, $00, $f2, $c1, $bc, $e0, $e8, $04, $10, $16, $31, $13
0a9ac     E2 FE FD 08 
0a9b0     11 08 20 10 
0a9b4     E9 FA 00 04 
0a9b8     10 06 18 15 | 	byte	$e2, $fe, $fd, $08, $11, $08, $20, $10, $e9, $fa, $00, $04, $10, $06, $18, $15
0a9bc     1D 15 FE D6 
0a9c0     01 EE E9 D4 
0a9c4     AA DB E0 FB 
0a9c8     0E 14 2A 2C | 	byte	$1d, $15, $fe, $d6, $01, $ee, $e9, $d4, $aa, $db, $e0, $fb, $0e, $14, $2a, $2c
0a9cc     E0 FE 00 02 
0a9d0     13 0B 1B 1C 
0a9d4     10 E6 07 FC 
0a9d8     0C 0A 10 16 | 	byte	$e0, $fe, $00, $02, $13, $0b, $1b, $1c, $10, $e6, $07, $fc, $0c, $0a, $10, $16
0a9dc     17 18 1B EE 
0a9e0     D9 FB D0 DC 
0a9e4     AD C8 E3 EA 
0a9e8     0E 0F 28 2D | 	byte	$17, $18, $1b, $ee, $d9, $fb, $d0, $dc, $ad, $c8, $e3, $ea, $0e, $0f, $28, $2d
0a9ec     F6 EE 0A FA 
0a9f0     15 0D 1B 1B 
0a9f4     23 04 F2 08 
0a9f8     00 0D 0C 12 | 	byte	$f6, $ee, $0a, $fa, $15, $0d, $1b, $1b, $23, $04, $f2, $08, $00, $0d, $0c, $12
0a9fc     15 16 1A 17 
0aa00     DA DA DA C3 
0aa04     BE B2 E1 E3 
0aa08     00 12 1E 31 | 	byte	$15, $16, $1a, $17, $da, $da, $da, $c3, $be, $b2, $e1, $e3, $00, $12, $1e, $31
0aa0c     02 ED 06 00 
0aa10     0C 14 17 21 
0aa14     1C 2A F6 00 
0aa18     04 06 0E 10 | 	byte	$02, $ed, $06, $00, $0c, $14, $17, $21, $1c, $2a, $f6, $00, $04, $06, $0e, $10
0aa1c     0F 1A 15 1B 
0aa20     0F BE CD C6 
0aa24     B3 B1 D2 E3 
0aa28     F3 10 1A 2D | 	byte	$0f, $1a, $15, $1b, $0f, $be, $cd, $c6, $b3, $b1, $d2, $e3, $f3, $10, $1a, $2d
0aa2c     05 F6 01 04 
0aa30     0A 13 19 1F 
0aa34     20 28 24 F3 
0aa38     06 06 0A 11 | 	byte	$05, $f6, $01, $04, $0a, $13, $19, $1f, $20, $28, $24, $f3, $06, $06, $0a, $11
0aa3c     0A 15 16 18 
0aa40     16 EC A7 C9 
0aa44     B6 9E D4 D7 
0aa48     F1 06 19 2A | 	byte	$0a, $15, $16, $18, $16, $ec, $a7, $c9, $b6, $9e, $d4, $d7, $f1, $06, $19, $2a
0aa4c     06 FD 00 03 
0aa50     0E 11 1D 20 
0aa54     22 26 2C 1A 
0aa58     EF 12 02 11 | 	byte	$06, $fd, $00, $03, $0e, $11, $1d, $20, $22, $26, $2c, $1a, $ef, $12, $02, $11
0aa5c     09 10 16 17 
0aa60     13 F6 CE 9B 
0aa64     CC 88 CC D7 
0aa68     E4 09 0E 30 | 	byte	$09, $10, $16, $17, $13, $f6, $ce, $9b, $cc, $88, $cc, $d7, $e4, $09, $0e, $30
0aa6c     FC 07 03 02 
0aa70     10 11 1E 24 
0aa74     21 2A 29 33 
0aa78     FC 06 0A 0A | 	byte	$fc, $07, $03, $02, $10, $11, $1e, $24, $21, $2a, $29, $33, $fc, $06, $0a, $0a
0aa7c     0B 0D 11 18 
0aa80     08 F3 EA 9E 
0aa84     BC 90 B7 DB 
0aa88     DA 05 08 2B | 	byte	$0b, $0d, $11, $18, $08, $f3, $ea, $9e, $bc, $90, $b7, $db, $da, $05, $08, $2b
0aa8c     F3 07 09 FD 
0aa90     16 0E 1E 26 
0aa94     23 2A 29 35 
0aa98     24 F6 0E 0A | 	byte	$f3, $07, $09, $fd, $16, $0e, $1e, $26, $23, $2a, $29, $35, $24, $f6, $0e, $0a
0aa9c     08 0E 0B 18 
0aaa0     F8 F8 EA BE 
0aaa4     AF 86 BA CC 
0aaa8     E0 FA 09 23 | 	byte	$08, $0e, $0b, $18, $f8, $f8, $ea, $be, $af, $86, $ba, $cc, $e0, $fa, $09, $23
0aaac     EB 0B 0C FE 
0aab0     17 0F 1F 28 
0aab4     27 2A 2B 35 
0aab8     31 09 00 14 | 	byte	$eb, $0b, $0c, $fe, $17, $0f, $1f, $28, $27, $2a, $2b, $35, $31, $09, $00, $14
0aabc     03 0E 0A 10 
0aac0     EF FB DB D6 
0aac4     C8 84 C2 BE 
0aac8     E3 F5 06 1A | 	byte	$03, $0e, $0a, $10, $ef, $fb, $db, $d6, $c8, $84, $c2, $be, $e3, $f5, $06, $1a
0aacc     E5 10 0B 02 
0aad0     14 13 20 27 
0aad4     2C 28 30 33 
0aad8     36 24 F8 13 | 	byte	$e5, $10, $0b, $02, $14, $13, $20, $27, $2c, $28, $30, $33, $36, $24, $f8, $13
0aadc     08 06 10 F8 
0aae0     F5 F2 D3 E9 
0aae4     C7 84 B2 C3 
0aae8     DA F4 03 07 | 	byte	$08, $06, $10, $f8, $f5, $f2, $d3, $e9, $c7, $84, $b2, $c3, $da, $f4, $03, $07
0aaec     E8 0E 0A 07 
0aaf0     11 17 20 27 
0aaf4     2F 2B 32 32 
0aaf8     3A 31 06 07 | 	byte	$e8, $0e, $0a, $07, $11, $17, $20, $27, $2f, $2b, $32, $32, $3a, $31, $06, $07
0aafc     10 02 0D E6 
0ab00     FC DE DC EF 
0ab04     BD A2 A0 C7 
0ab08     DB F0 07 F1 | 	byte	$10, $02, $0d, $e6, $fc, $de, $dc, $ef, $bd, $a2, $a0, $c7, $db, $f0, $07, $f1
0ab0c     EE 0D 07 10 
0ab10     0A 1E 1B 2B 
0ab14     2C 30 31 36 
0ab18     37 38 1D FC | 	byte	$ee, $0d, $07, $10, $0a, $1e, $1b, $2b, $2c, $30, $31, $36, $37, $38, $1d, $fc
0ab1c     13 04 F9 EA 
0ab20     F5 D2 E8 EA 
0ab24     B5 B5 AE B6 
0ab28     E6 EA 0A E0 | 	byte	$13, $04, $f9, $ea, $f5, $d2, $e8, $ea, $b5, $b5, $ae, $b6, $e6, $ea, $0a, $e0
0ab2c     F3 0E 06 16 
0ab30     05 26 19 2E 
0ab34     2A 35 30 38 
0ab38     36 3A 2C FA | 	byte	$f3, $0e, $06, $16, $05, $26, $19, $2e, $2a, $35, $30, $38, $36, $3a, $2c, $fa
0ab3c     0E 08 E3 F6 
0ab40     DC DA E8 E6 
0ab44     AE BA C7 A2 
0ab48     EE E6 07 D9 | 	byte	$0e, $08, $e3, $f6, $dc, $da, $e8, $e6, $ae, $ba, $c7, $a2, $ee, $e6, $07, $d9
0ab4c     F7 0B 08 15 
0ab50     06 27 1B 2E 
0ab54     2E 35 33 36 
0ab58     39 39 33 00 | 	byte	$f7, $0b, $08, $15, $06, $27, $1b, $2e, $2e, $35, $33, $36, $39, $39, $33, $00
0ab5c     0A 03 DC F7 
0ab60     C9 E7 E2 E7 
0ab64     A9 C1 D6 A3 
0ab68     E8 EA 00 D6 | 	byte	$0a, $03, $dc, $f7, $c9, $e7, $e2, $e7, $a9, $c1, $d6, $a3, $e8, $ea, $00, $d6
0ab6c     FB 06 0B 0E 
0ab70     0B 22 1D 2B 
0ab74     2F 34 35 34 
0ab78     3B 38 37 09 | 	byte	$fb, $06, $0b, $0e, $0b, $22, $1d, $2b, $2f, $34, $35, $34, $3b, $38, $37, $09
0ab7c     05 F7 E2 E7 
0ab80     CB EC E0 E7 
0ab84     A6 CA D7 B9 
0ab88     DA F3 F9 D4 | 	byte	$05, $f7, $e2, $e7, $cb, $ec, $e0, $e7, $a6, $ca, $d7, $b9, $da, $f3, $f9, $d4
0ab8c     FD 01 10 08 
0ab90     0E 20 20 2C 
0ab94     2F 33 36 36 
0ab98     3B 38 38 13 | 	byte	$fd, $01, $10, $08, $0e, $20, $20, $2c, $2f, $33, $36, $36, $3b, $38, $38, $13
0ab9c     00 F0 E8 D2 
0aba0     D9 E6 E6 E1 
0aba4     A7 D1 D7 D2 
0aba8     CC FA F6 D3 | 	byte	$00, $f0, $e8, $d2, $d9, $e6, $e6, $e1, $a7, $d1, $d7, $d2, $cc, $fa, $f6, $d3
0abac     00 FE 11 03 
0abb0     0F 20 20 2C 
0abb4     2E 33 36 37 
0abb8     3A 38 38 1C | 	byte	$00, $fe, $11, $03, $0f, $20, $20, $2c, $2e, $33, $36, $37, $3a, $38, $38, $1c
0abbc     F6 EB E4 CA 
0abc0     E3 E0 EC D8 
0abc4     AB D4 D6 E2 
0abc8     C6 FB FA D2 | 	byte	$f6, $eb, $e4, $ca, $e3, $e0, $ec, $d8, $ab, $d4, $d6, $e2, $c6, $fb, $fa, $d2
0abcc     FF FE 10 00 
0abd0     11 1C 20 2B 
0abd4     2D 33 36 38 
0abd8     39 38 38 25 | 	byte	$ff, $fe, $10, $00, $11, $1c, $20, $2b, $2d, $33, $36, $38, $39, $38, $38, $25
0abdc     ED EB DC CB 
0abe0     E7 DB F2 D0 
0abe4     AC D6 D8 E9 
0abe8     C6 F8 00 D2 | 	byte	$ed, $eb, $dc, $cb, $e7, $db, $f2, $d0, $ac, $d6, $d8, $e9, $c6, $f8, $00, $d2
0abec     FD FD 0E 00 
0abf0     11 1A 20 2A 
0abf4     2D 33 36 36 
0abf8     3A 37 39 2B | 	byte	$fd, $fd, $0e, $00, $11, $1a, $20, $2a, $2d, $33, $36, $36, $3a, $37, $39, $2b
0abfc     E9 E9 D2 CE 
0ac00     E7 DC F3 CD 
0ac04     AA D8 D8 EE 
0ac08     CA F2 06 D5 | 	byte	$e9, $e9, $d2, $ce, $e7, $dc, $f3, $cd, $aa, $d8, $d8, $ee, $ca, $f2, $06, $d5
0ac0c     FB 00 0B FD 
0ac10     12 18 22 27 
0ac14     2E 32 36 36 
0ac18     3A 36 39 30 | 	byte	$fb, $00, $0b, $fd, $12, $18, $22, $27, $2e, $32, $36, $36, $3a, $36, $39, $30
0ac1c     EB E2 D0 D0 
0ac20     E6 DD F3 D0 
0ac24     A6 DB D7 F0 
0ac28     D0 EC 0A DA | 	byte	$eb, $e2, $d0, $d0, $e6, $dd, $f3, $d0, $a6, $db, $d7, $f0, $d0, $ec, $0a, $da
0ac2c     F4 01 08 FC 
0ac30     12 16 20 26 
0ac34     2E 30 36 35 
0ac38     3A 36 38 32 | 	byte	$f4, $01, $08, $fc, $12, $16, $20, $26, $2e, $30, $36, $35, $3a, $36, $38, $32
0ac3c     F6 D6 D2 D0 
0ac40     E4 E0 F1 D7 
0ac44     A0 DD D5 F0 
0ac48     DA E2 0D EA | 	byte	$f6, $d6, $d2, $d0, $e4, $e0, $f1, $d7, $a0, $dd, $d5, $f0, $da, $e2, $0d, $ea
0ac4c     EA 03 04 FB 
0ac50     11 16 20 26 
0ac54     2C 30 34 34 
0ac58     39 36 38 32 | 	byte	$ea, $03, $04, $fb, $11, $16, $20, $26, $2c, $30, $34, $34, $39, $36, $38, $32
0ac5c     08 CA D5 D0 
0ac60     E0 E2 EC E2 
0ac64     98 DC D3 ED 
0ac68     E8 D5 0E FC | 	byte	$08, $ca, $d5, $d0, $e0, $e2, $ec, $e2, $98, $dc, $d3, $ed, $e8, $d5, $0e, $fc
0ac6c     E4 03 03 F8 
0ac70     10 13 1D 24 
0ac74     2A 2F 33 33 
0ac78     38 35 37 33 | 	byte	$e4, $03, $03, $f8, $10, $13, $1d, $24, $2a, $2f, $33, $33, $38, $35, $37, $33
0ac7c     1B C7 D2 D5 
0ac80     D8 E6 E7 EB 
0ac84     96 D8 D4 E8 
0ac88     F6 CB 0B 04 | 	byte	$1b, $c7, $d2, $d5, $d8, $e6, $e7, $eb, $96, $d8, $d4, $e8, $f6, $cb, $0b, $04
0ac8c     EA F9 08 F3 
0ac90     0D 12 19 23 
0ac94     27 2F 30 34 
0ac98     37 37 36 34 | 	byte	$ea, $f9, $08, $f3, $0d, $12, $19, $23, $27, $2f, $30, $34, $37, $37, $36, $34
0ac9c     24 D8 C4 E0 
0aca0     D1 E9 E3 EF 
0aca4     A2 C7 DA E0 
0aca8     00 CC FD 09 | 	byte	$24, $d8, $c4, $e0, $d1, $e9, $e3, $ef, $a2, $c7, $da, $e0, $00, $cc, $fd, $09
0acac     FE EC 0A F3 
0acb0     04 12 13 23 
0acb4     23 2E 2E 33 
0acb8     34 36 34 34 | 	byte	$fe, $ec, $0a, $f3, $04, $12, $13, $23, $23, $2e, $2e, $33, $34, $36, $34, $34
0acbc     2B F4 B8 E1 
0acc0     D0 E5 E6 EB 
0acc4     BA B1 E1 D5 
0acc8     FE E0 E7 0E | 	byte	$2b, $f4, $b8, $e1, $d0, $e5, $e6, $eb, $ba, $b1, $e1, $d5, $fe, $e0, $e7, $0e
0accc     0C ED 00 FE 
0acd0     F7 15 0D 20 
0acd4     22 2A 2E 2F 
0acd8     36 35 35 32 | 	byte	$0c, $ed, $00, $fe, $f7, $15, $0d, $20, $22, $2a, $2e, $2f, $36, $35, $35, $32
0acdc     32 04 C7 D3 
0ace0     D8 DB E9 E7 
0ace4     D4 A2 DE D3 
0ace8     F5 F6 D3 09 | 	byte	$32, $04, $c7, $d3, $d8, $db, $e9, $e7, $d4, $a2, $de, $d3, $f5, $f6, $d3, $09
0acec     0A 06 EC 07 
0acf0     EE 0F 10 16 
0acf4     23 24 2F 2B 
0acf8     36 34 36 32 | 	byte	$0a, $06, $ec, $07, $ee, $0f, $10, $16, $23, $24, $2f, $2b, $36, $34, $36, $32
0acfc     35 12 E3 C7 
0ad00     DA DA E3 E7 
0ad04     E0 AE C9 D8 
0ad08     E6 00 DB F1 | 	byte	$35, $12, $e3, $c7, $da, $da, $e3, $e7, $e0, $ae, $c9, $d8, $e6, $00, $db, $f1
0ad0c     10 12 F0 FC 
0ad10     F6 00 14 0C 
0ad14     21 22 2B 2B 
0ad18     31 34 36 32 | 	byte	$10, $12, $f0, $fc, $f6, $00, $14, $0c, $21, $22, $2b, $2b, $31, $34, $36, $32
0ad1c     33 21 EC E0 
0ad20     C8 E3 DC E7 
0ad24     E3 C9 B2 D9 
0ad28     DC F8 F8 D4 | 	byte	$33, $21, $ec, $e0, $c8, $e3, $dc, $e7, $e3, $c9, $b2, $d9, $dc, $f8, $f8, $d4
0ad2c     0E 0C 0B EA 
0ad30     00 F3 10 0B 
0ad34     19 23 26 2B 
0ad38     2C 35 35 33 | 	byte	$0e, $0c, $0b, $ea, $00, $f3, $10, $0b, $19, $23, $26, $2b, $2c, $35, $35, $33
0ad3c     31 2F F3 FC 
0ad40     C6 DA E3 DE 
0ad44     EA D2 BA C5 
0ad48     DD EA 00 E0 | 	byte	$31, $2f, $f3, $fc, $c6, $da, $e3, $de, $ea, $d2, $ba, $c5, $dd, $ea, $00, $e0
0ad4c     ED 14 10 F1 
0ad50     F9 F4 02 0F 
0ad54     0E 23 22 2B 
0ad58     27 35 34 35 | 	byte	$ed, $14, $10, $f1, $f9, $f4, $02, $0f, $0e, $23, $22, $2b, $27, $35, $34, $35
0ad5c     2E 34 01 F6 
0ad60     F4 C1 EB DB 
0ad64     E6 DA D4 B0 
0ad68     D9 E1 F8 01 | 	byte	$2e, $34, $01, $f6, $f4, $c1, $eb, $db, $e6, $da, $d4, $b0, $d9, $e1, $f8, $01
0ad6c     D1 0B 0F 02 
0ad70     EC FA F6 0E 
0ad74     09 1A 23 26 
0ad78     2A 2C 38 34 | 	byte	$d1, $0b, $0f, $02, $ec, $fa, $f6, $0e, $09, $1a, $23, $26, $2a, $2c, $38, $34
0ad7c     32 30 14 EF 
0ad80     06 DC D5 E7 
0ad84     DE E3 DA BC 
0ad88     C2 E1 EB 02 | 	byte	$32, $30, $14, $ef, $06, $dc, $d5, $e7, $de, $e3, $da, $bc, $c2, $e1, $eb, $02
0ad8c     EF E0 19 08 
0ad90     E6 FE F0 05 
0ad94     0A 0C 24 22 
0ad98     29 28 36 34 | 	byte	$ef, $e0, $19, $08, $e6, $fe, $f0, $05, $0a, $0c, $24, $22, $29, $28, $36, $34
0ad9c     34 30 1C F4 
0ada0     03 F9 E2 DA 
0ada4     E9 E0 DB DB 
0ada8     AA DD E1 FA | 	byte	$34, $30, $1c, $f4, $03, $f9, $e2, $da, $e9, $e0, $db, $db, $aa, $dd, $e1, $fa
0adac     03 E0 FB 18 
0adb0     E4 F3 FC F3 
0adb4     0E 03 1D 22 
0adb8     24 29 30 38 | 	byte	$03, $e0, $fb, $18, $e4, $f3, $fc, $f3, $0e, $03, $1d, $22, $24, $29, $30, $38
0adbc     33 32 1E FE 
0adc0     00 FE 04 E0 
0adc4     E0 EB DC E2 
0adc8     B6 C3 E4 EA | 	byte	$33, $32, $1e, $fe, $00, $fe, $04, $e0, $e0, $eb, $dc, $e2, $b6, $c3, $e4, $ea
0adcc     04 00 E2 0C 
0add0     FA D8 0A E7 
0add4     05 05 0E 24 
0add8     1E 28 29 38 | 	byte	$04, $00, $e2, $0c, $fa, $d8, $0a, $e7, $05, $05, $0e, $24, $1e, $28, $29, $38
0addc     33 35 1D 07 
0ade0     FD 05 00 11 
0ade4     D6 EB E9 DB 
0ade8     D2 AE DE E5 | 	byte	$33, $35, $1d, $07, $fd, $05, $00, $11, $d6, $eb, $e9, $db, $d2, $ae, $de, $e5
0adec     F7 06 02 EA 
0adf0     06 D0 F5 FE 
0adf4     EA 0D 00 20 
0adf8     1E 26 26 34 | 	byte	$f7, $06, $02, $ea, $06, $d0, $f5, $fe, $ea, $0d, $00, $20, $1e, $26, $26, $34
0adfc     34 36 1D 0B 
0ae00     FE 08 00 10 
0ae04     0B D9 EF EC 
0ae08     D3 B1 CE E0 | 	byte	$34, $36, $1d, $0b, $fe, $08, $00, $10, $0b, $d9, $ef, $ec, $d3, $b1, $ce, $e0
0ae0c     EF 00 07 0C 
0ae10     E8 D8 E4 FA 
0ae14     F1 F8 08 0E 
0ae18     21 20 2A 2D | 	byte	$ef, $00, $07, $0c, $e8, $d8, $e4, $fa, $f1, $f8, $08, $0e, $21, $20, $2a, $2d
0ae1c     36 35 20 0C 
0ae20     00 08 06 0D 
0ae24     13 0B DB FA 
0ae28     E0 B2 C6 D8 | 	byte	$36, $35, $20, $0c, $00, $08, $06, $0d, $13, $0b, $db, $fa, $e0, $b2, $c6, $d8
0ae2c     E6 FC 02 13 
0ae30     08 BB E7 EA 
0ae34     F5 F2 FE 0E 
0ae38     13 22 23 2E | 	byte	$e6, $fc, $02, $13, $08, $bb, $e7, $ea, $f5, $f2, $fe, $0e, $13, $22, $23, $2e
0ae3c     30 37 1B 11 
0ae40     FB 0D 09 0F 
0ae44     14 16 0A E0 
0ae48     00 B7 B8 DC | 	byte	$30, $37, $1b, $11, $fb, $0d, $09, $0f, $14, $16, $0a, $e0, $00, $b7, $b8, $dc
0ae4c     D6 F9 FE 0E 
0ae50     1A D7 C1 F4 
0ae54     E4 F7 F3 06 
0ae58     10 17 28 23 | 	byte	$d6, $f9, $fe, $0e, $1a, $d7, $c1, $f4, $e4, $f7, $f3, $06, $10, $17, $28, $23
0ae5c     33 2D 1D 0C 
0ae60     00 08 11 0C 
0ae64     1A 12 24 F6 
0ae68     F2 E0 9E E1 | 	byte	$33, $2d, $1d, $0c, $00, $08, $11, $0c, $1a, $12, $24, $f6, $f2, $e0, $9e, $e1
0ae6c     D0 EB 02 00 
0ae70     1B EE CC D5 
0ae74     EE EB F3 FC 
0ae78     0E 0D 26 21 | 	byte	$d0, $eb, $02, $00, $1b, $ee, $cc, $d5, $ee, $eb, $f3, $fc, $0e, $0d, $26, $21
0ae7c     30 27 18 10 
0ae80     FB 0E 10 13 
0ae84     19 17 25 1D 
0ae88     F2 EE A6 CD | 	byte	$30, $27, $18, $10, $fb, $0e, $10, $13, $19, $17, $25, $1d, $f2, $ee, $a6, $cd
0ae8c     D9 DB 01 FE 
0ae90     15 EC EA CF 
0ae94     D9 F5 E7 FA 
0ae98     05 0A 1D 21 | 	byte	$d9, $db, $01, $fe, $15, $ec, $ea, $cf, $d9, $f5, $e7, $fa, $05, $0a, $1d, $21
0ae9c     2B 1E 13 10 
0aea0     FC 11 0E 1B 
0aea4     1A 1B 24 24 
0aea8     1D E3 BE BF | 	byte	$2b, $1e, $13, $10, $fc, $11, $0e, $1b, $1a, $1b, $24, $24, $1d, $e3, $be, $bf
0aeac     DC D8 F6 FE 
0aeb0     0E E7 E6 FB 
0aeb4     BD F4 EC EA 
0aeb8     06 01 18 20 | 	byte	$dc, $d8, $f6, $fe, $0e, $e7, $e6, $fb, $bd, $f4, $ec, $ea, $06, $01, $18, $20
0aebc     2A 10 14 06 
0aec0     02 12 0D 21 
0aec4     1C 21 25 2A 
0aec8     2A 04 B3 CF | 	byte	$2a, $10, $14, $06, $02, $12, $0d, $21, $1c, $21, $25, $2a, $2a, $04, $b3, $cf
0aecc     CE E0 EC FD 
0aed0     0A DB E6 FC 
0aed4     E4 D0 F7 E2 
0aed8     FC 04 09 20 | 	byte	$ce, $e0, $ec, $fd, $0a, $db, $e6, $fc, $e4, $d0, $f7, $e2, $fc, $04, $09, $20
0aedc     20 08 16 F9 
0aee0     0E 0F 12 22 
0aee4     21 26 26 2D 
0aee8     2E 26 B2 D8 | 	byte	$20, $08, $16, $f9, $0e, $0f, $12, $22, $21, $26, $26, $2d, $2e, $26, $b2, $d8
0aeec     CA DB ED F5 
0aef0     0B CE EB F3 
0aef4     FA DE DD F4 
0aef8     E7 0A 00 1B | 	byte	$ca, $db, $ed, $f5, $0b, $ce, $eb, $f3, $fa, $de, $dd, $f4, $e7, $0a, $00, $1b
0aefc     0F 05 11 EF 
0af00     1A 0A 18 20 
0af04     28 29 28 2F 
0af08     32 2B CE D1 | 	byte	$0f, $05, $11, $ef, $1a, $0a, $18, $20, $28, $29, $28, $2f, $32, $2b, $ce, $d1
0af0c     D2 D3 EE F0 
0af10     03 C5 F0 EC 
0af14     FD 00 CB F6 
0af18     E3 00 03 0E | 	byte	$d2, $d3, $ee, $f0, $03, $c5, $f0, $ec, $fd, $00, $cb, $f6, $e3, $00, $03, $0e
0af1c     FE 0B FB F8 
0af20     16 0B 1D 20 
0af24     2B 2B 2B 31 
0af28     33 2B E4 D8 | 	byte	$fe, $0b, $fb, $f8, $16, $0b, $1d, $20, $2b, $2b, $2b, $31, $33, $2b, $e4, $d8
0af2c     D1 D7 EA F2 
0af30     F1 C6 EF E7 
0af34     00 02 ED DC 
0af38     EC F2 02 FB | 	byte	$d1, $d7, $ea, $f2, $f1, $c6, $ef, $e7, $00, $02, $ed, $dc, $ec, $f2, $02, $fb
0af3c     F8 0B E6 08 
0af40     0C 14 1F 22 
0af44     2E 2E 32 32 
0af48     35 26 EB F6 | 	byte	$f8, $0b, $e6, $08, $0c, $14, $1f, $22, $2e, $2e, $32, $32, $35, $26, $eb, $f6
0af4c     C9 DE E8 F2 
0af50     DE CA F0 E3 
0af54     00 00 09 D5 
0af58     E3 F4 F9 EA | 	byte	$c9, $de, $e8, $f2, $de, $ca, $f0, $e3, $00, $00, $09, $d5, $e3, $f4, $f9, $ea
0af5c     FB F8 EA 08 
0af60     09 19 20 26 
0af64     30 30 38 32 
0af68     38 19 F6 0D | 	byte	$fb, $f8, $ea, $08, $09, $19, $20, $26, $30, $30, $38, $32, $38, $19, $f6, $0d
0af6c     CA E0 EA EE 
0af70     D0 D1 EC E2 
0af74     00 FE 0F F0 
0af78     CE FA E8 E2 | 	byte	$ca, $e0, $ea, $ee, $d0, $d1, $ec, $e2, $00, $fe, $0f, $f0, $ce, $fa, $e8, $e2
0af7c     FD DC FD 00 
0af80     0E 1B 22 27 
0af84     31 34 39 35 
0af88     39 09 02 13 | 	byte	$fd, $dc, $fd, $00, $0e, $1b, $22, $27, $31, $34, $39, $35, $39, $09, $02, $13
0af8c     D6 DE ED ED 
0af90     C4 D9 E5 E4 
0af94     FC 00 0E 06 
0af98     C4 F3 DA E0 | 	byte	$d6, $de, $ed, $ed, $c4, $d9, $e5, $e4, $fc, $00, $0e, $06, $c4, $f3, $da, $e0
0af9c     F2 D4 06 F9 
0afa0     14 1B 26 2B 
0afa4     32 39 3A 3A 
0afa8     38 FD 10 13 | 	byte	$f2, $d4, $06, $f9, $14, $1b, $26, $2b, $32, $39, $3a, $3a, $38, $fd, $10, $13
0afac     EA D8 F0 EC 
0afb0     BE E0 E0 E9 
0afb4     FA 00 0C 0C 
0afb8     D1 E0 D7 DE | 	byte	$ea, $d8, $f0, $ec, $be, $e0, $e0, $e9, $fa, $00, $0c, $0c, $d1, $e0, $d7, $de
0afbc     DA E1 FC FC 
0afc0     13 1B 25 2B 
0afc4     33 3B 3A 3B 
0afc8     36 F6 18 10 | 	byte	$da, $e1, $fc, $fc, $13, $1b, $25, $2b, $33, $3b, $3a, $3b, $36, $f6, $18, $10
0afcc     FE D4 F0 EC 
0afd0     BA E4 DA EE 
0afd4     F7 02 0A 0D 
0afd8     E4 C8 D8 D7 | 	byte	$fe, $d4, $f0, $ec, $ba, $e4, $da, $ee, $f7, $02, $0a, $0d, $e4, $c8, $d8, $d7
0afdc     CC EF F1 06 
0afe0     10 1E 26 2C 
0afe4     35 3B 3C 3D 
0afe8     30 F6 1E 10 | 	byte	$cc, $ef, $f1, $06, $10, $1e, $26, $2c, $35, $3b, $3c, $3d, $30, $f6, $1e, $10
0afec     0A D2 F2 EE 
0aff0     B8 E7 D8 EE 
0aff4     F6 01 09 0C 
0aff8     EE B9 D6 C9 | 	byte	$0a, $d2, $f2, $ee, $b8, $e7, $d8, $ee, $f6, $01, $09, $0c, $ee, $b9, $d6, $c9
0affc     CB F2 EC 0B 
0b000     0D 22 24 30 
0b004     35 3D 3C 40 
0b008     29 F9 20 10 | 	byte	$cb, $f2, $ec, $0b, $0d, $22, $24, $30, $35, $3d, $3c, $40, $29, $f9, $20, $10
0b00c     12 CE F4 F2 
0b010     B8 E7 D8 EF 
0b014     F5 00 07 08 
0b018     F0 B6 D0 C0 | 	byte	$12, $ce, $f4, $f2, $b8, $e7, $d8, $ef, $f5, $00, $07, $08, $f0, $b6, $d0, $c0
0b01c     D0 EF ED 0E 
0b020     0B 24 23 33 
0b024     33 3E 3C 42 
0b028     22 FC 20 12 | 	byte	$d0, $ef, $ed, $0e, $0b, $24, $23, $33, $33, $3e, $3c, $42, $22, $fc, $20, $12
0b02c     13 CD F8 F4 
0b030     BC E4 DA EE 
0b034     F4 01 06 00 
0b038     F4 B7 C5 C1 | 	byte	$13, $cd, $f8, $f4, $bc, $e4, $da, $ee, $f4, $01, $06, $00, $f4, $b7, $c5, $c1
0b03c     D1 EE F0 0E 
0b040     0C 23 24 34 
0b044     33 3E 3D 43 
0b048     21 00 20 14 | 	byte	$d1, $ee, $f0, $0e, $0c, $23, $24, $34, $33, $3e, $3d, $43, $21, $00, $20, $14
0b04c     0B CE FB F6 
0b050     C4 E0 E0 EE 
0b054     F3 02 04 F6 
0b058     F8 BB BA C7 | 	byte	$0b, $ce, $fb, $f6, $c4, $e0, $e0, $ee, $f3, $02, $04, $f6, $f8, $bb, $ba, $c7
0b05c     D0 EE F2 0C 
0b060     0E 24 25 36 
0b064     32 40 3B 44 
0b068     23 00 20 15 | 	byte	$d0, $ee, $f2, $0c, $0e, $24, $25, $36, $32, $40, $3b, $44, $23, $00, $20, $15
0b06c     FE D3 FD F7 
0b070     D4 D7 E7 EC 
0b074     F4 02 FB F6 
0b078     FA C0 B2 CC | 	byte	$fe, $d3, $fd, $f7, $d4, $d7, $e7, $ec, $f4, $02, $fb, $f6, $fa, $c0, $b2, $cc
0b07c     CE EF F7 0C 
0b080     0F 24 28 35 
0b084     32 40 3C 43 
0b088     2A FC 21 13 | 	byte	$ce, $ef, $f7, $0c, $0f, $24, $28, $35, $32, $40, $3c, $43, $2a, $fc, $21, $13
0b08c     EA DC FB F6 
0b090     E8 CC EF E8 
0b094     F4 01 EB FB 
0b098     F6 CD A4 CF | 	byte	$ea, $dc, $fb, $f6, $e8, $cc, $ef, $e8, $f4, $01, $eb, $fb, $f6, $cd, $a4, $cf
0b09c     CD EC FA 08 
0b0a0     13 22 2C 32 
0b0a4     33 3F 40 40 
0b0a8     32 FA 20 0E | 	byte	$cd, $ec, $fa, $08, $13, $22, $2c, $32, $33, $3f, $40, $40, $32, $fa, $20, $0e
0b0ac     D9 E6 F4 F7 
0b0b0     FC CA EF E8 
0b0b4     F2 F7 E9 00 
0b0b8     F4 DC 9C CE | 	byte	$d9, $e6, $f4, $f7, $fc, $ca, $ef, $e8, $f2, $f7, $e9, $00, $f4, $dc, $9c, $ce
0b0bc     CD E9 FE 03 
0b0c0     16 21 2E 30 
0b0c4     36 3F 42 3E 
0b0c8     3A FE 1A 02 | 	byte	$cd, $e9, $fe, $03, $16, $21, $2e, $30, $36, $3f, $42, $3e, $3a, $fe, $1a, $02
0b0cc     D3 EE EF FB 
0b0d0     02 DC E3 F1 
0b0d4     EB E8 F2 F6 
0b0d8     FB E2 9E C6 | 	byte	$d3, $ee, $ef, $fb, $02, $dc, $e3, $f1, $eb, $e8, $f2, $f6, $fb, $e2, $9e, $c6
0b0dc     D0 E4 FE 01 
0b0e0     18 22 2D 2F 
0b0e4     38 3F 42 3D 
0b0e8     40 0B 0D EF | 	byte	$d0, $e4, $fe, $01, $18, $22, $2d, $2f, $38, $3f, $42, $3d, $40, $0b, $0d, $ef
0b0ec     DA EA EF FB 
0b0f0     03 FC D4 F6 
0b0f4     DB E8 F5 F1 
0b0f8     03 E6 AB B8 | 	byte	$da, $ea, $ef, $fb, $03, $fc, $d4, $f6, $db, $e8, $f5, $f1, $03, $e6, $ab, $b8
0b0fc     D8 DD FE 00 
0b100     17 21 2A 2E 
0b104     37 3D 40 40 
0b108     40 22 FA E6 | 	byte	$d8, $dd, $fe, $00, $17, $21, $2a, $2e, $37, $3d, $40, $40, $40, $22, $fa, $e6
0b10c     E2 DE F4 F7 
0b110     06 10 DA EB 
0b114     D6 E9 F2 F2 
0b118     02 F0 BD AD | 	byte	$e2, $de, $f4, $f7, $06, $10, $da, $eb, $d6, $e9, $f2, $f2, $02, $f0, $bd, $ad
0b11c     D9 D8 F8 00 
0b120     10 20 26 2E 
0b124     33 3C 3E 40 
0b128     3E 3A E9 E0 | 	byte	$d9, $d8, $f8, $00, $10, $20, $26, $2e, $33, $3c, $3e, $40, $3e, $3a, $e9, $e0
0b12c     EB D2 F7 F5 
0b130     04 12 FD CE 
0b134     E2 E6 EF FB 
0b138     FB 01 C7 B0 | 	byte	$eb, $d2, $f7, $f5, $04, $12, $fd, $ce, $e2, $e6, $ef, $fb, $fb, $01, $c7, $b0
0b13c     CB DC EB 02 
0b140     06 1D 22 2F 
0b144     2F 3B 3D 42 
0b148     3A 40 F2 D3 | 	byte	$cb, $dc, $eb, $02, $06, $1d, $22, $2f, $2f, $3b, $3d, $42, $3a, $40, $f2, $d3
0b14c     F7 C8 F8 F5 
0b150     00 12 12 CB 
0b154     DE EA E8 00 
0b158     F6 08 D2 C2 | 	byte	$f7, $c8, $f8, $f5, $00, $12, $12, $cb, $de, $ea, $e8, $00, $f6, $08, $d2, $c2
0b15c     B8 DD E5 FE 
0b160     05 15 22 2B 
0b164     2D 36 3C 40 
0b168     3B 3E 10 C2 | 	byte	$b8, $dd, $e5, $fe, $05, $15, $22, $2b, $2d, $36, $3c, $40, $3b, $3e, $10, $c2
0b16c     FB C8 EF F8 
0b170     FB 11 0A F0 
0b174     CE EE EA FC 
0b178     FB 04 E8 CD | 	byte	$fb, $c8, $ef, $f8, $fb, $11, $0a, $f0, $ce, $ee, $ea, $fc, $fb, $04, $e8, $cd
0b17c     B6 CE E9 F0 
0b180     05 0B 21 28 
0b184     2B 32 3B 3F 
0b188     3D 3C 1A D8 | 	byte	$b6, $ce, $e9, $f0, $05, $0b, $21, $28, $2b, $32, $3b, $3f, $3d, $3c, $1a, $d8
0b18c     E3 DD DD FD 
0b190     F5 0C 00 08 
0b194     D5 E2 F5 F2 
0b198     01 00 F8 CD | 	byte	$e3, $dd, $dd, $fd, $f5, $0c, $00, $08, $d5, $e2, $f5, $f2, $01, $00, $f8, $cd
0b19c     D3 B3 EC E8 
0b1a0     FE 0A 19 29 
0b1a4     27 32 38 40 
0b1a8     3B 3C 18 02 | 	byte	$d3, $b3, $ec, $e8, $fe, $0a, $19, $29, $27, $32, $38, $40, $3b, $3c, $18, $02
0b1ac     CE E9 D3 F6 
0b1b0     F6 02 F8 0A 
0b1b4     F0 D0 FC EF 
0b1b8     00 00 FE D4 | 	byte	$ce, $e9, $d3, $f6, $f6, $02, $f8, $0a, $f0, $d0, $fc, $ef, $00, $00, $fe, $d4
0b1bc     E1 B6 D6 F0 
0b1c0     ED 0C 10 27 
0b1c4     26 2E 38 3D 
0b1c8     3B 3B 1A 0E | 	byte	$e1, $b6, $d6, $f0, $ed, $0c, $10, $27, $26, $2e, $38, $3d, $3b, $3b, $1a, $0e
0b1cc     E3 D8 E2 E0 
0b1d0     FD F5 F3 0A 
0b1d4     04 D1 F2 F6 
0b1d8     F7 04 FD DF | 	byte	$e3, $d8, $e2, $e0, $fd, $f5, $f3, $0a, $04, $d1, $f2, $f6, $f7, $04, $fd, $df
0b1dc     DE E1 B4 F3 
0b1e0     E6 01 0E 1E 
0b1e4     27 2A 33 3C 
0b1e8     3B 3C 1D 0E | 	byte	$de, $e1, $b4, $f3, $e6, $01, $0e, $1e, $27, $2a, $33, $3c, $3b, $3c, $1d, $0e
0b1ec     0C C6 F1 D4 
0b1f0     F8 F0 E9 0B 
0b1f4     02 E7 DE 00 
0b1f8     F0 06 FD E7 | 	byte	$0c, $c6, $f1, $d4, $f8, $f0, $e9, $0b, $02, $e7, $de, $00, $f0, $06, $fd, $e7
0b1fc     D9 ED CE D1 
0b200     F4 F1 0B 19 
0b204     21 2A 2C 3D 
0b208     39 3D 26 08 | 	byte	$d9, $ed, $ce, $d1, $f4, $f1, $0b, $19, $21, $2a, $2c, $3d, $39, $3d, $26, $08
0b20c     1C D4 E7 DE 
0b210     E8 F2 E0 09 
0b214     01 FD D3 FE 
0b218     F4 00 03 E4 | 	byte	$1c, $d4, $e7, $de, $e8, $f2, $e0, $09, $01, $fd, $d3, $fe, $f4, $00, $03, $e4
0b21c     DD E8 EF CE 
0b220     E3 F7 FD 14 
0b224     1E 23 2E 32 
0b228     3E 37 34 00 | 	byte	$dd, $e8, $ef, $ce, $e3, $f7, $fd, $14, $1e, $23, $2e, $32, $3e, $37, $34, $00
0b22c     24 F2 D6 F0 
0b230     DA EC E1 FC 
0b234     07 04 D6 F4 
0b238     FA FA 06 E0 | 	byte	$24, $f2, $d6, $f0, $da, $ec, $e1, $fc, $07, $04, $d6, $f4, $fa, $fa, $06, $e0
0b23c     E3 E6 F3 F4 
0b240     D3 ED 00 03 
0b244     20 1C 2B 2E 
0b248     3B 3A 36 02 | 	byte	$e3, $e6, $f3, $f4, $d3, $ed, $00, $03, $20, $1c, $2b, $2e, $3b, $3a, $36, $02
0b24c     20 0E D1 F7 
0b250     DD DC E6 F3 
0b254     04 0C D6 F1 
0b258     F7 FD 02 E3 | 	byte	$20, $0e, $d1, $f7, $dd, $dc, $e6, $f3, $04, $0c, $d6, $f1, $f7, $fd, $02, $e3
0b25c     DE EA EF FB 
0b260     01 D4 FB 02 
0b264     0E 23 1E 32 
0b268     31 3D 35 05 | 	byte	$de, $ea, $ef, $fb, $01, $d4, $fb, $02, $0e, $23, $1e, $32, $31, $3d, $35, $05
0b26c     18 16 E0 E8 
0b270     F6 C4 EB ED 
0b274     FD 11 DB EB 
0b278     F9 FA 01 E2 | 	byte	$18, $16, $e0, $e8, $f6, $c4, $eb, $ed, $fd, $11, $db, $eb, $f9, $fa, $01, $e2
0b27c     E0 EA F2 F8 
0b280     07 05 D8 09 
0b284     03 1B 20 28 
0b288     30 37 37 07 | 	byte	$e0, $ea, $f2, $f8, $07, $05, $d8, $09, $03, $1b, $20, $28, $30, $37, $37, $07
0b28c     13 19 F5 DB 
0b290     FE CD DD F4 
0b294     F3 12 E1 E7 
0b298     F9 FA F9 E7 | 	byte	$13, $19, $f5, $db, $fe, $cd, $dd, $f4, $f3, $12, $e1, $e7, $f9, $fa, $f9, $e7
0b29c     DB EB F3 FD 
0b2a0     06 13 03 E7 
0b2a4     0E 10 1A 28 
0b2a8     27 39 30 0A | 	byte	$db, $eb, $f3, $fd, $06, $13, $03, $e7, $0e, $10, $1a, $28, $27, $39, $30, $0a
0b2ac     0C 1A 03 D8 
0b2b0     F6 DB D8 F0 
0b2b4     F4 0B E9 E0 
0b2b8     FA F8 F2 E9 | 	byte	$0c, $1a, $03, $d8, $f6, $db, $d8, $f0, $f4, $0b, $e9, $e0, $fa, $f8, $f2, $e9
0b2bc     D8 EB F5 FD 
0b2c0     09 11 17 06 
0b2c4     EE 1B 0C 26 
0b2c8     24 31 31 04 | 	byte	$d8, $eb, $f5, $fd, $09, $11, $17, $06, $ee, $1b, $0c, $26, $24, $31, $31, $04
0b2cc     10 15 0A D7 
0b2d0     EC E0 E8 E2 
0b2d4     FB 04 EA E0 
0b2d8     FB F6 E7 F0 | 	byte	$10, $15, $0a, $d7, $ec, $e0, $e8, $e2, $fb, $04, $ea, $e0, $fb, $f6, $e7, $f0
0b2dc     D5 F0 F3 01 
0b2e0     0B 13 19 23 
0b2e4     FE 02 16 17 
0b2e8     28 29 2B 02 | 	byte	$d5, $f0, $f3, $01, $0b, $13, $19, $23, $fe, $02, $16, $17, $28, $29, $2b, $02
0b2ec     0E 14 09 DB 
0b2f0     DB EA EA E8 
0b2f4     F3 09 E0 E4 
0b2f8     FA F2 E1 F0 | 	byte	$0e, $14, $09, $db, $db, $ea, $ea, $e8, $f3, $09, $e0, $e4, $fa, $f2, $e1, $f0
0b2fc     D4 F6 F2 06 
0b300     0F 17 1D 24 
0b304     29 F7 0E 1A 
0b308     1C 2A 22 FA | 	byte	$d4, $f6, $f2, $06, $0f, $17, $1d, $24, $29, $f7, $0e, $1a, $1c, $2a, $22, $fa
0b30c     12 0C 0E D5 
0b310     D6 EE E9 F8 
0b314     EC 0A D8 E2 
0b318     00 E0 EB E4 | 	byte	$12, $0c, $0e, $d5, $d6, $ee, $e9, $f8, $ec, $0a, $d8, $e2, $00, $e0, $eb, $e4
0b31c     DC F8 F6 06 
0b320     12 18 20 24 
0b324     30 23 F3 1A 
0b328     1A 20 20 EE | 	byte	$dc, $f8, $f6, $06, $12, $18, $20, $24, $30, $23, $f3, $1a, $1a, $20, $20, $ee
0b32c     16 05 0F C9 
0b330     D7 F0 E6 06 
0b334     EB 0A D0 E8 
0b338     FA D6 F0 D8 | 	byte	$16, $05, $0f, $c9, $d7, $f0, $e6, $06, $eb, $0a, $d0, $e8, $fa, $d6, $f0, $d8
0b33c     E5 FB F6 10 
0b340     10 20 1E 2D 
0b344     2D 33 10 02 
0b348     20 17 11 F0 | 	byte	$e5, $fb, $f6, $10, $10, $20, $1e, $2d, $2d, $33, $10, $02, $20, $17, $11, $f0
0b34c     0D 07 08 B9 
0b350     DE EC E7 0C 
0b354     F4 00 CA F2 
0b358     E3 DC EF D1 | 	byte	$0d, $07, $08, $b9, $de, $ec, $e7, $0c, $f4, $00, $ca, $f2, $e3, $dc, $ef, $d1
0b35c     F0 F9 FD 13 
0b360     12 25 20 31 
0b364     2E 36 2C 03 
0b368     11 20 F4 FA | 	byte	$f0, $f9, $fd, $13, $12, $25, $20, $31, $2e, $36, $2c, $03, $11, $20, $f4, $fa
0b36c     03 05 FB B0 
0b370     EB E3 F6 07 
0b374     06 EC CE F6 
0b378     CD EA E1 D4 | 	byte	$03, $05, $fb, $b0, $eb, $e3, $f6, $07, $06, $ec, $ce, $f6, $cd, $ea, $e1, $d4
0b37c     FA F4 0E 0F 
0b380     1D 23 2B 2F 
0b384     34 34 36 25 
0b388     FA 20 E2 FA | 	byte	$fa, $f4, $0e, $0f, $1d, $23, $2b, $2f, $34, $34, $36, $25, $fa, $20, $e2, $fa
0b38c     00 FD EA B1 
0b390     EE DE 00 02 
0b394     12 DD D7 EE 
0b398     C7 F3 CD E6 | 	byte	$00, $fd, $ea, $b1, $ee, $de, $00, $02, $12, $dd, $d7, $ee, $c7, $f3, $cd, $e6
0b39c     F7 FB 16 10 
0b3a0     22 24 32 30 
0b3a4     36 35 3A 34 
0b3a8     04 02 E4 F5 | 	byte	$f7, $fb, $16, $10, $22, $24, $32, $30, $36, $35, $3a, $34, $04, $02, $e4, $f5
0b3ac     FA EE DA BA 
0b3b0     E9 E3 02 04 
0b3b4     12 DA D9 DE 
0b3b8     CE EC C8 F7 | 	byte	$fa, $ee, $da, $ba, $e9, $e3, $02, $04, $12, $da, $d9, $de, $ce, $ec, $c8, $f7
0b3bc     EF 0B 12 19 
0b3c0     22 2B 32 35 
0b3c4     35 3A 38 36 
0b3c8     23 D9 ED F2 | 	byte	$ef, $0b, $12, $19, $22, $2b, $32, $35, $35, $3a, $38, $36, $23, $d9, $ed, $f2
0b3cc     EA E8 C4 C7 
0b3d0     E6 EA 02 0A 
0b3d4     13 DD D5 D7 
0b3d8     D8 D4 D7 F7 | 	byte	$ea, $e8, $c4, $c7, $e6, $ea, $02, $0a, $13, $dd, $d5, $d7, $d8, $d4, $d7, $f7
0b3dc     F2 11 0F 22 
0b3e0     22 30 32 38 
0b3e4     36 3B 36 38 
0b3e8     2B C8 EE EE | 	byte	$f2, $11, $0f, $22, $22, $30, $32, $38, $36, $3b, $36, $38, $2b, $c8, $ee, $ee
0b3ec     D2 F2 AE D7 
0b3f0     E2 EF 08 0B 
0b3f4     1A DD D0 D7 
0b3f8     D9 C8 EA ED | 	byte	$d2, $f2, $ae, $d7, $e2, $ef, $08, $0b, $1a, $dd, $d0, $d7, $d9, $c8, $ea, $ed
0b3fc     00 0E 16 23 
0b400     28 31 36 38 
0b404     39 39 39 38 
0b408     14 E0 E0 DC | 	byte	$00, $0e, $16, $23, $28, $31, $36, $38, $39, $39, $39, $38, $14, $e0, $e0, $dc
0b40c     D8 E7 AB E0 
0b410     E1 F2 0A 0D 
0b414     1D D9 CA DB 
0b418     CA D0 EF EE | 	byte	$d8, $e7, $ab, $e0, $e1, $f2, $0a, $0d, $1d, $d9, $ca, $db, $ca, $d0, $ef, $ee
0b41c     09 09 1E 22 
0b420     2D 30 3A 38 
0b424     3E 36 3C 2E 
0b428     FC 00 C2 D7 | 	byte	$09, $09, $1e, $22, $2d, $30, $3a, $38, $3e, $36, $3c, $2e, $fc, $00, $c2, $d7
0b42c     E2 D3 B8 DD 
0b430     E7 F3 10 0F 
0b434     21 D6 CA DB 
0b438     BD DE EC F4 | 	byte	$e2, $d3, $b8, $dd, $e7, $f3, $10, $0f, $21, $d6, $ca, $db, $bd, $de, $ec, $f4
0b43c     0B 0A 23 20 
0b440     31 2E 3F 37 
0b444     3E 36 3E 0B 
0b448     06 01 B3 E2 | 	byte	$0b, $0a, $23, $20, $31, $2e, $3f, $37, $3e, $36, $3e, $0b, $06, $01, $b3, $e2
0b44c     DB D4 B9 E2 
0b450     E6 FA 10 13 
0b454     22 D6 C9 D6 
0b458     BB E9 E8 FB | 	byte	$db, $d4, $b9, $e2, $e6, $fa, $10, $13, $22, $d6, $c9, $d6, $bb, $e9, $e8, $fb
0b45c     08 11 21 23 
0b460     2E 32 3A 38 
0b464     3B 39 2E FA 
0b468     11 E5 CF D2 | 	byte	$08, $11, $21, $23, $2e, $32, $3a, $38, $3b, $39, $2e, $fa, $11, $e5, $cf, $d2
0b46c     E6 D1 BA EA 
0b470     E5 05 0E 1A 
0b474     25 D6 C6 CF 
0b478     C3 EC E7 00 | 	byte	$e6, $d1, $ba, $ea, $e5, $05, $0e, $1a, $25, $d6, $c6, $cf, $c3, $ec, $e7, $00
0b47c     08 15 20 26 
0b480     2E 32 39 38 
0b484     3C 37 0B 07 
0b488     F5 EF DB CA | 	byte	$08, $15, $20, $26, $2e, $32, $39, $38, $3c, $37, $0b, $07, $f5, $ef, $db, $ca
0b48c     F3 CA C3 EA 
0b490     EB 05 11 1C 
0b494     2B D4 C6 CA 
0b498     CA E9 EB 00 | 	byte	$f3, $ca, $c3, $ea, $eb, $05, $11, $1c, $2b, $d4, $c6, $ca, $ca, $e9, $eb, $00
0b49c     0C 13 21 25 
0b4a0     30 30 39 36 
0b4a4     3C 28 FE 03 
0b4a8     EC FB DB D0 | 	byte	$0c, $13, $21, $25, $30, $30, $39, $36, $3c, $28, $fe, $03, $ec, $fb, $db, $d0
0b4ac     F3 D2 C5 EE 
0b4b0     ED 06 13 1E 
0b4b4     2C D8 C1 CD 
0b4b8     CC E9 ED 03 | 	byte	$f3, $d2, $c5, $ee, $ed, $06, $13, $1e, $2c, $d8, $c1, $cd, $cc, $e9, $ed, $03
0b4bc     0B 14 20 27 
0b4c0     2E 31 38 38 
0b4c4     38 0B 02 F2 
0b4c8     F7 FA E0 D5 | 	byte	$0b, $14, $20, $27, $2e, $31, $38, $38, $38, $0b, $02, $f2, $f7, $fa, $e0, $d5
0b4cc     F3 DE C3 F1 
0b4d0     ED 08 15 20 
0b4d4     29 E2 BE CE 
0b4d8     CE E8 F1 01 | 	byte	$f3, $de, $c3, $f1, $ed, $08, $15, $20, $29, $e2, $be, $ce, $ce, $e8, $f1, $01
0b4dc     0A 15 21 26 
0b4e0     2B 30 38 36 
0b4e4     30 FA FA F3 
0b4e8     F8 FB DE DA | 	byte	$0a, $15, $21, $26, $2b, $30, $38, $36, $30, $fa, $fa, $f3, $f8, $fb, $de, $da
0b4ec     F5 E8 C6 EE 
0b4f0     F2 06 18 1D 
0b4f4     24 F3 C0 C8 
0b4f8     D8 E2 F7 FC | 	byte	$f5, $e8, $c6, $ee, $f2, $06, $18, $1d, $24, $f3, $c0, $c8, $d8, $e2, $f7, $fc
0b4fc     0B 15 20 24 
0b500     2A 30 36 33 
0b504     1B F0 FB F3 
0b508     FA FE D5 E4 | 	byte	$0b, $15, $20, $24, $2a, $30, $36, $33, $1b, $f0, $fb, $f3, $fa, $fe, $d5, $e4
0b50c     F5 F5 CB EA 
0b510     F9 03 1B 1B 
0b514     18 06 C8 BE 
0b518     E5 DB FA F8 | 	byte	$f5, $f5, $cb, $ea, $f9, $03, $1b, $1b, $18, $06, $c8, $be, $e5, $db, $fa, $f8
0b51c     0C 14 1C 23 
0b520     29 30 33 33 
0b524     03 EB FD F0 
0b528     00 FA CC F1 | 	byte	$0c, $14, $1c, $23, $29, $30, $33, $33, $03, $eb, $fd, $f0, $00, $fa, $cc, $f1
0b52c     F2 00 D9 E0 
0b530     03 FE 1E 17 
0b534     0D 18 E0 B8 
0b538     EA D8 F6 FB | 	byte	$f2, $00, $d9, $e0, $03, $fe, $1e, $17, $0d, $18, $e0, $b8, $ea, $d8, $f6, $fb
0b53c     08 13 1A 22 
0b540     26 2C 2E 2E 
0b544     E7 F5 F6 F3 
0b548     00 ED D0 FA | 	byte	$08, $13, $1a, $22, $26, $2c, $2e, $2e, $e7, $f5, $f6, $f3, $00, $ed, $d0, $fa
0b54c     F1 06 F2 D8 
0b550     09 FB 1B 09 
0b554     14 20 F6 C4 
0b558     DE E2 ED 00 | 	byte	$f1, $06, $f2, $d8, $09, $fb, $1b, $09, $14, $20, $f6, $c4, $de, $e2, $ed, $00
0b55c     02 0F 17 20 
0b560     00 00 00 00 
0b564     05 05 00 FF 
0b568     00 00 00 00 | 	byte	$02, $0f, $17, $20, $00, $00, $00, $00, $05, $05, $00, $ff, $00, $00, $00, $00
0b56c     00 00 00 00 
      ...             
0b598     00 00 00 00 
0b59c     00 00       | 	byte	$00[50]
0b59e     F2 F9 FD FF 
0b5a2     FF FF FF FD 
0b5a6     FD 00 01 07 
0b5aa     0E 15 1F 25 | 	byte	$f2, $f9, $fd, $ff, $ff, $ff, $ff, $fd, $fd, $00, $01, $07, $0e, $15, $1f, $25
0b5ae     25 1F 15 08 
0b5b2     FD F6 F2 EF 
0b5b6     F1 EF F4 00 
0b5ba     13 21 25 1C | 	byte	$25, $1f, $15, $08, $fd, $f6, $f2, $ef, $f1, $ef, $f4, $00, $13, $21, $25, $1c
0b5be     0F 03 FB F4 
0b5c2     F2 F8 FD 00 
0b5c6     FD FB F6 F2 
0b5ca     EF E8 DF DA | 	byte	$0f, $03, $fb, $f4, $f2, $f8, $fd, $00, $fd, $fb, $f6, $f2, $ef, $e8, $df, $da
0b5ce     DD E8 F4 FD 
0b5d2     00 01 01 FF 
0b5d6     FD FF 01 07 
0b5da     0F 1A 25 2D | 	byte	$dd, $e8, $f4, $fd, $00, $01, $01, $ff, $fd, $ff, $01, $07, $0f, $1a, $25, $2d
0b5de     33 2C 1A 01 
0b5e2     EA DD DA DF 
0b5e6     E6 EB F2 07 
0b5ea     21 2D 28 18 | 	byte	$33, $2c, $1a, $01, $ea, $dd, $da, $df, $e6, $eb, $f2, $07, $21, $2d, $28, $18
0b5ee     0C 01 F4 EB 
0b5f2     EF FD 0C 11 
0b5f6     11 08 FF F6 
0b5fa     EA DA CD C8 | 	byte	$0c, $01, $f4, $eb, $ef, $fd, $0c, $11, $11, $08, $ff, $f6, $ea, $da, $cd, $c8
0b5fe     CF DB EA F4 
0b602     FD 05 0E 16 
0b606     1C 1C 1C 16 
0b60a     0E FF F9 F2 | 	byte	$cf, $db, $ea, $f4, $fd, $05, $0e, $16, $1c, $1c, $1c, $16, $0e, $ff, $f9, $f2
0b60e     EB E4 DF E1 
0b612     F2 1D 41 3F 
0b616     25 11 0A 00 
0b61a     F4 ED F6 00 | 	byte	$eb, $e4, $df, $e1, $f2, $1d, $41, $3f, $25, $11, $0a, $00, $f4, $ed, $f6, $00
0b61e     0A 0E 0E 0A 
0b622     05 FD EF D4 
0b626     C1 BD CD E4 
0b62a     F2 FD 05 0F | 	byte	$0a, $0e, $0e, $0a, $05, $fd, $ef, $d4, $c1, $bd, $cd, $e4, $f2, $fd, $05, $0f
0b62e     1C 21 1C 15 
0b632     0F 07 FB F1 
0b636     EB E4 E1 ED 
0b63a     18 3F 4A 38 | 	byte	$1c, $21, $1c, $15, $0f, $07, $fb, $f1, $eb, $e4, $e1, $ed, $18, $3f, $4a, $38
0b63e     23 13 03 EF 
0b642     DF E1 ED FB 
0b646     03 03 FB EF 
0b64a     E6 DB CC BC | 	byte	$23, $13, $03, $ef, $df, $e1, $ed, $fb, $03, $03, $fb, $ef, $e6, $db, $cc, $bc
0b64e     B6 C1 DF 07 
0b652     28 38 34 26 
0b656     0C F9 ED E4 
0b65a     E6 EB EB 07 | 	byte	$b6, $c1, $df, $07, $28, $38, $34, $26, $0c, $f9, $ed, $e4, $e6, $eb, $eb, $07
0b65e     2F 51 4F 34 
0b662     2A 2C 23 01 
0b666     E4 DF F2 03 
0b66a     0A 07 FB ED | 	byte	$2f, $51, $4f, $34, $2a, $2c, $23, $01, $e4, $df, $f2, $03, $0a, $07, $fb, $ed
0b66e     DD CF C8 C6 
0b672     CD DA ED FF 
0b676     01 07 07 F9 
0b67a     F1 ED EA FD | 	byte	$dd, $cf, $c8, $c6, $cd, $da, $ed, $ff, $01, $07, $07, $f9, $f1, $ed, $ea, $fd
0b67e     2A 56 61 4A 
0b682     2F 1C 07 ED 
0b686     E6 ED F2 F1 
0b68a     F2 F4 F4 F2 | 	byte	$2a, $56, $61, $4a, $2f, $1c, $07, $ed, $e6, $ed, $f2, $f1, $f2, $f4, $f4, $f2
0b68e     EA DD D3 CD 
0b692     D4 EA FB 11 
0b696     1A 0F 01 EF 
0b69a     E4 F2 1F 4D | 	byte	$ea, $dd, $d3, $cd, $d4, $ea, $fb, $11, $1a, $0f, $01, $ef, $e4, $f2, $1f, $4d
0b69e     69 51 2D 1C 
0b6a2     15 07 EB D1 
0b6a6     D1 E4 F9 03 
0b6aa     00 F9 F6 F6 | 	byte	$69, $51, $2d, $1c, $15, $07, $eb, $d1, $d1, $e4, $f9, $03, $00, $f9, $f6, $f6
0b6ae     EB DB D1 DB 
0b6b2     EF 05 15 0F 
0b6b6     03 F6 DB E3 
0b6ba     0A 36 5B 46 | 	byte	$eb, $db, $d1, $db, $ef, $05, $15, $0f, $03, $f6, $db, $e3, $0a, $36, $5b, $46
0b6be     18 08 11 16 
0b6c2     0A EA D3 E3 
0b6c6     00 11 03 EF 
0b6ca     EF 00 FF EB | 	byte	$18, $08, $11, $16, $0a, $ea, $d3, $e3, $00, $11, $03, $ef, $ef, $00, $ff, $eb
0b6ce     D6 CD DF F8 
0b6d2     01 07 03 F1 
0b6d6     FF 23 46 5B 
0b6da     46 1C 0C 0A | 	byte	$d6, $cd, $df, $f8, $01, $07, $03, $f1, $ff, $23, $46, $5b, $46, $1c, $0c, $0a
0b6de     07 F2 CF C1 
0b6e2     D4 F9 18 23 
0b6e6     03 DF D8 E3 
0b6ea     EF F9 F2 DF | 	byte	$07, $f2, $cf, $c1, $d4, $f9, $18, $23, $03, $df, $d8, $e3, $ef, $f9, $f2, $df
0b6ee     D6 D8 DF EA 
0b6f2     15 46 62 52 
0b6f6     2A 13 11 18 
0b6fa     1D 05 E3 C3 | 	byte	$d6, $d8, $df, $ea, $15, $46, $62, $52, $2a, $13, $11, $18, $1d, $05, $e3, $c3
0b6fe     C8 E6 05 1C 
0b702     1F F9 BC A8 
0b706     CF 00 00 F9 
0b70a     E8 DF 01 2C | 	byte	$c8, $e6, $05, $1c, $1f, $f9, $bc, $a8, $cf, $00, $00, $f9, $e8, $df, $01, $2c
0b70e     54 68 3D 0C 
0b712     08 11 1F 15 
0b716     EB C5 CC E8 
0b71a     0A 1C 08 EA | 	byte	$54, $68, $3d, $0c, $08, $11, $1f, $15, $eb, $c5, $cc, $e8, $0a, $1c, $08, $ea
0b71e     CC BF D4 FB 
0b722     03 08 FD 00 
0b726     25 46 5F 5D 
0b72a     34 23 15 13 | 	byte	$cc, $bf, $d4, $fb, $03, $08, $fd, $00, $25, $46, $5f, $5d, $34, $23, $15, $13
0b72e     0A F2 D6 BA 
0b732     A8 B6 E6 0E 
0b736     F9 DD CD CF 
0b73a     DA E6 EB 0E | 	byte	$0a, $f2, $d6, $ba, $a8, $b6, $e6, $0e, $f9, $dd, $cd, $cf, $da, $e6, $eb, $0e
0b73e     3B 5F 70 6B 
0b742     52 34 1D 15 
0b746     F2 C3 9C A3 
0b74a     D6 07 FB D8 | 	byte	$3b, $5f, $70, $6b, $52, $34, $1d, $15, $f2, $c3, $9c, $a3, $d6, $07, $fb, $d8
0b74e     B6 BF EF 1D 
0b752     15 FD E6 E3 
0b756     0E 3A 58 74 
0b75a     58 1F 18 1C | 	byte	$b6, $bf, $ef, $1d, $15, $fd, $e6, $e3, $0e, $3a, $58, $74, $58, $1f, $18, $1c
0b75e     26 08 DA BA 
0b762     A7 A1 AA B8 
0b766     C8 D3 E8 13 
0b76a     31 43 4D 4D | 	byte	$26, $08, $da, $ba, $a7, $a1, $aa, $b8, $c8, $d3, $e8, $13, $31, $43, $4d, $4d
0b76e     44 3F 36 0E 
0b772     E4 E6 ED F8 
0b776     D8 B5 A3 A3 
0b77a     AE BD CD E1 | 	byte	$44, $3f, $36, $0e, $e4, $e6, $ed, $f8, $d8, $b5, $a3, $a3, $ae, $bd, $cd, $e1
0b77e     F2 03 0F 0F 
0b782     1F 48 64 6D 
0b786     66 59 43 2C 
0b78a     16 0C EB B6 | 	byte	$f2, $03, $0f, $0f, $1f, $48, $64, $6d, $66, $59, $43, $2c, $16, $0c, $eb, $b6
0b78e     95 87 85 93 
0b792     A7 C1 D8 E8 
0b796     F9 1C 46 66 
0b79a     72 69 56 36 | 	byte	$95, $87, $85, $93, $a7, $c1, $d8, $e8, $f9, $1c, $46, $66, $72, $69, $56, $36
0b79e     0F 08 FF DB 
0b7a2     BA A8 A3 AF 
0b7a6     BF D6 EB F9 
0b7aa     FB 15 3F 5B | 	byte	$0f, $08, $ff, $db, $ba, $a8, $a3, $af, $bf, $d6, $eb, $f9, $fb, $15, $3f, $5b
0b7ae     69 61 4D 2D 
0b7b2     05 F2 F2 DD 
0b7b6     BA A5 A7 B3 
0b7ba     C6 EB 03 0E | 	byte	$69, $61, $4d, $2d, $05, $f2, $f2, $dd, $ba, $a5, $a7, $b3, $c6, $eb, $03, $0e
0b7be     03 21 46 54 
0b7c2     4D 34 11 F6 
0b7c6     EF F4 D4 AA 
0b7ca     A1 9E A7 D4 | 	byte	$03, $21, $46, $54, $4d, $34, $11, $f6, $ef, $f4, $d4, $aa, $a1, $9e, $a7, $d4
0b7ce     11 36 3D 4B 
0b7d2     51 36 05 EA 
0b7d6     FB 08 0A 07 
0b7da     05 F4 CA AC | 	byte	$11, $36, $3d, $4b, $51, $36, $05, $ea, $fb, $08, $0a, $07, $05, $f4, $ca, $ac
0b7de     A5 AF C1 CC 
0b7e2     F6 2D 54 69 
0b7e6     68 4F 31 1F 
0b7ea     0A FF E3 D1 | 	byte	$a5, $af, $c1, $cc, $f6, $2d, $54, $69, $68, $4f, $31, $1f, $0a, $ff, $e3, $d1
0b7ee     CC D4 CF B3 
0b7f2     A1 A1 B3 CD 
0b7f6     E8 F8 0F 3F 
0b7fa     68 7D 7B 66 | 	byte	$cc, $d4, $cf, $b3, $a1, $a1, $b3, $cd, $e8, $f8, $0f, $3f, $68, $7d, $7b, $66
0b7fe     4A 2A 0E 00 
0b802     F1 C3 9A 89 
0b806     8E 9F BA D6 
0b80a     E8 F8 25 54 | 	byte	$4a, $2a, $0e, $00, $f1, $c3, $9a, $89, $8e, $9f, $ba, $d6, $e8, $f8, $25, $54
0b80e     72 76 66 3F 
0b812     1D 0A 01 EB 
0b816     DD DD E6 DD 
0b81a     CA BF BC C5 | 	byte	$72, $76, $66, $3f, $1d, $0a, $01, $eb, $dd, $dd, $e6, $dd, $ca, $bf, $bc, $c5
0b81e     C8 D8 07 38 
0b822     58 5D 4D 31 
0b826     1A 0F 0F EF 
0b82a     C3 B5 D8 03 | 	byte	$c8, $d8, $07, $38, $58, $5d, $4d, $31, $1a, $0f, $0f, $ef, $c3, $b5, $d8, $03
0b82e     31 46 28 FF 
0b832     E1 DA C8 D4 
0b836     F8 05 FF FD 
0b83a     FD 03 05 EB | 	byte	$31, $46, $28, $ff, $e1, $da, $c8, $d4, $f8, $05, $ff, $fd, $fd, $03, $05, $eb
0b83e     CC DB FF 1D 
0b842     34 3B 3F 2D 
0b846     0E EB D6 CC 
0b84a     C8 C1 DA 05 | 	byte	$cc, $db, $ff, $1d, $34, $3b, $3f, $2d, $0e, $eb, $d6, $cc, $c8, $c1, $da, $05
0b84e     28 23 F9 DA 
0b852     C6 B6 CD 03 
0b856     2D 46 51 4D 
0b85a     43 3A 31 FF | 	byte	$28, $23, $f9, $da, $c6, $b6, $cd, $03, $2d, $46, $51, $4d, $43, $3a, $31, $ff
0b85e     CC AE 9E AE 
0b862     BF C8 D1 DA 
0b866     E3 E3 01 31 
0b86a     52 5F 5D 51 | 	byte	$cc, $ae, $9e, $ae, $bf, $c8, $d1, $da, $e3, $e3, $01, $31, $52, $5f, $5d, $51
0b86e     43 36 2D 2D 
0b872     11 D6 D1 F1 
0b876     E3 BD A7 A5 
0b87a     AE BF CA DA | 	byte	$43, $36, $2d, $2d, $11, $d6, $d1, $f1, $e3, $bd, $a7, $a5, $ae, $bf, $ca, $da
0b87e     08 38 56 61 
0b882     5D 4D 3D 2D 
0b886     23 21 1F FD 
0b88a     D3 C8 AF A1 | 	byte	$08, $38, $56, $61, $5d, $4d, $3d, $2d, $23, $21, $1f, $fd, $d3, $c8, $af, $a1
0b88e     A5 AF C1 CD 
0b892     D3 F9 2A 4D 
0b896     51 4A 36 25 
0b89a     15 07 01 FD | 	byte	$a5, $af, $c1, $cd, $d3, $f9, $2a, $4d, $51, $4a, $36, $25, $15, $07, $01, $fd
0b89e     F6 ED F4 F2 
0b8a2     C6 A7 9E AC 
0b8a6     C6 DA DF 00 
0b8aa     33 5B 43 0A | 	byte	$f6, $ed, $f4, $f2, $c6, $a7, $9e, $ac, $c6, $da, $df, $00, $33, $5b, $43, $0a
0b8ae     EB 05 23 34 
0b8b2     3B 3A 31 1F 
0b8b6     0F 0C EB AE 
0b8ba     93 8C 97 B1 | 	byte	$eb, $05, $23, $34, $3b, $3a, $31, $1f, $0f, $0c, $eb, $ae, $93, $8c, $97, $b1
0b8be     D3 E4 EB 08 
0b8c2     23 2F 2D 25 
0b8c6     18 0E 07 03 
0b8ca     07 08 05 08 | 	byte	$d3, $e4, $eb, $08, $23, $2f, $2d, $25, $18, $0e, $07, $03, $07, $08, $05, $08
0b8ce     07 E4 BF AE 
0b8d2     AC B5 BF CA 
0b8d6     CF D4 FF 2C 
0b8da     4A 58 58 51 | 	byte	$07, $e4, $bf, $ae, $ac, $b5, $bf, $ca, $cf, $d4, $ff, $2c, $4a, $58, $58, $51
0b8de     43 38 34 33 
0b8e2     25 0A E6 C8 
0b8e6     BA B6 BC C5 
0b8ea     CA CD D1 D6 | 	byte	$43, $38, $34, $33, $25, $0a, $e6, $c8, $ba, $b6, $bc, $c5, $ca, $cd, $d1, $d6
0b8ee     F9 26 3B 43 
0b8f2     3F 46 3B 11 
0b8f6     E4 DA F9 23 
0b8fa     44 38 0A E4 | 	byte	$f9, $26, $3b, $43, $3f, $46, $3b, $11, $e4, $da, $f9, $23, $44, $38, $0a, $e4
0b8fe     D3 CC CC CF 
0b902     D1 C6 CC F9 
0b906     31 2A 03 DF 
0b90a     F6 1C 34 41 | 	byte	$d3, $cc, $cc, $cf, $d1, $c6, $cc, $f9, $31, $2a, $03, $df, $f6, $1c, $34, $41
0b90e     44 3A 28 15 
0b912     0C FD CD A5 
0b916     8C 8E 9E BA 
0b91a     D8 EF F2 ED | 	byte	$44, $3a, $28, $15, $0c, $fd, $cd, $a5, $8c, $8e, $9e, $ba, $d8, $ef, $f2, $ed
0b91e     FB 1F 3F 4A 
0b922     46 3F 34 2A 
0b926     1D 0F 01 FD 
0b92a     F6 C3 A3 9C | 	byte	$fb, $1f, $3f, $4a, $46, $3f, $34, $2a, $1d, $0f, $01, $fd, $f6, $c3, $a3, $9c
0b92e     A1 B3 C1 CF 
0b932     D1 E6 15 3B 
0b936     51 58 52 4A 
0b93a     41 36 28 18 | 	byte	$a1, $b3, $c1, $cf, $d1, $e6, $15, $3b, $51, $58, $52, $4a, $41, $36, $28, $18
0b93e     07 FD 01 DB 
0b942     AC 9A 9F B6 
0b946     D6 EB F9 21 
0b94a     3F 4D 4A 44 | 	byte	$07, $fd, $01, $db, $ac, $9a, $9f, $b6, $d6, $eb, $f9, $21, $3f, $4d, $4a, $44
0b94e     48 33 F8 E8 
0b952     03 1C 28 2F 
0b956     2C F2 CD C1 
0b95a     BF CC D4 CF | 	byte	$48, $33, $f8, $e8, $03, $1c, $28, $2f, $2c, $f2, $cd, $c1, $bf, $cc, $d4, $cf
0b95e     DD 1C 25 0C 
0b962     ED EF 13 31 
0b966     41 43 3B 2F 
0b96a     25 23 2C 08 | 	byte	$dd, $1c, $25, $0c, $ed, $ef, $13, $31, $41, $43, $3b, $2f, $25, $23, $2c, $08
0b96e     D3 A7 B6 EF 
0b972     F2 D8 C5 BF 
0b976     C5 CC D3 F2 
0b97a     23 4A 5B 66 | 	byte	$d3, $a7, $b6, $ef, $f2, $d8, $c5, $bf, $c5, $cc, $d3, $f2, $23, $4a, $5b, $66
0b97e     69 3B 16 1C 
0b982     26 2D 3B 31 
0b986     11 F9 DA C6 
0b98a     BD BA AF BA | 	byte	$69, $3b, $16, $1c, $26, $2d, $3b, $31, $11, $f9, $da, $c6, $bd, $ba, $af, $ba
0b98e     ED 25 1C FB 
0b992     DA ED 1A 3A 
0b996     4A 4D 4B 3F 
0b99a     31 25 23 F9 | 	byte	$ed, $25, $1c, $fb, $da, $ed, $1a, $3a, $4a, $4d, $4b, $3f, $31, $25, $23, $f9
0b99e     C6 AA 9F A1 
0b9a2     AF C1 CA CC 
0b9a6     EB 13 2C 38 
0b9aa     3B 3A 3B 38 | 	byte	$c6, $aa, $9f, $a1, $af, $c1, $ca, $cc, $eb, $13, $2c, $38, $3b, $3a, $3b, $38
0b9ae     1F 01 0E 1D 
0b9b2     2A 31 38 0C 
0b9b6     DA BC B1 B3 
0b9ba     BA BF BF D3 | 	byte	$1f, $01, $0e, $1d, $2a, $31, $38, $0c, $da, $bc, $b1, $b3, $ba, $bf, $bf, $d3
0b9be     FD 1C 2D 3A 
0b9c2     38 23 23 25 
0b9c6     28 28 2A 1D 
0b9ca     1A 15 11 15 | 	byte	$fd, $1c, $2d, $3a, $38, $23, $23, $25, $28, $28, $2a, $1d, $1a, $15, $11, $15
0b9ce     FB CD AC A1 
0b9d2     AA B6 C5 D4 
0b9d6     05 3B 58 62 
0b9da     5F 58 58 3A | 	byte	$fb, $cd, $ac, $a1, $aa, $b6, $c5, $d4, $05, $3b, $58, $62, $5f, $58, $58, $3a
0b9de     0A DD C5 DD 
0b9e2     0C 2D 46 31 
0b9e6     F9 CC B3 A8 
0b9ea     A8 A3 AE DF | 	byte	$0a, $dd, $c5, $dd, $0c, $2d, $46, $31, $f9, $cc, $b3, $a8, $a8, $a3, $ae, $df
0b9ee     1C 23 F9 F6 
0b9f2     16 36 4D 52 
0b9f6     3A 0C F2 03 
0b9fa     1D 2A 34 25 | 	byte	$1c, $23, $f9, $f6, $16, $36, $4d, $52, $3a, $0c, $f2, $03, $1d, $2a, $34, $25
0b9fe     FB CD AF 9F 
0ba02     9C A3 AA B1 
0ba06     DD 11 36 4A 
0ba0a     4D 4D 4A 3D | 	byte	$fb, $cd, $af, $9f, $9c, $a3, $aa, $b1, $dd, $11, $36, $4a, $4d, $4d, $4a, $3d
0ba0e     15 EF D3 C5 
0ba12     DD 08 31 3B 
0ba16     0A DA B6 98 
0ba1a     95 B6 DF FD | 	byte	$15, $ef, $d3, $c5, $dd, $08, $31, $3b, $0a, $da, $b6, $98, $95, $b6, $df, $fd
0ba1e     0A 05 07 15 
0ba22     2D 3B 23 01 
0ba26     EB F6 1D 43 
0ba2a     4F 3A 0C E4 | 	byte	$0a, $05, $07, $15, $2d, $3b, $23, $01, $eb, $f6, $1d, $43, $4f, $3a, $0c, $e4
0ba2e     E1 F6 08 0F 
0ba32     EF C5 A8 AA 
0ba36     CA EF 03 1A 
0ba3a     2A 31 2D 3A | 	byte	$e1, $f6, $08, $0f, $ef, $c5, $a8, $aa, $ca, $ef, $03, $1a, $2a, $31, $2d, $3a
0ba3e     3B 43 23 F1 
0ba42     C6 AC B1 DB 
0ba46     0C 34 41 11 
0ba4a     CD BC CC DD | 	byte	$3b, $43, $23, $f1, $c6, $ac, $b1, $db, $0c, $34, $41, $11, $cd, $bc, $cc, $dd
0ba4e     EB FD FF EB 
0ba52     DB CC CC D8 
0ba56     EA FD 03 00 
0ba5a     18 3F 51 52 | 	byte	$eb, $fd, $ff, $eb, $db, $cc, $cc, $d8, $ea, $fd, $03, $00, $18, $3f, $51, $52
0ba5e     52 44 0E CC 
0ba62     9F AA CA E8 
0ba66     E4 C1 A8 A3 
0ba6a     A7 BD F8 2D | 	byte	$52, $44, $0e, $cc, $9f, $aa, $ca, $e8, $e4, $c1, $a8, $a3, $a7, $bd, $f8, $2d
0ba6e     4B 51 41 3F 
0ba72     23 F4 D6 C8 
0ba76     C5 DB 0E 2D 
0ba7a     33 2D 15 03 | 	byte	$4b, $51, $41, $3f, $23, $f4, $d6, $c8, $c5, $db, $0e, $2d, $33, $2d, $15, $03
0ba7e     FF 07 11 F9 
0ba82     DF E1 F4 F6 
0ba86     DA C3 BC C5 
0ba8a     CF DA 0A 3A | 	byte	$ff, $07, $11, $f9, $df, $e1, $f4, $f6, $da, $c3, $bc, $c5, $cf, $da, $0a, $3a
0ba8e     54 54 38 26 
0ba92     18 16 1C 03 
0ba96     DD C1 D6 F8 
0ba9a     0E 16 F6 CD | 	byte	$54, $54, $38, $26, $18, $16, $1c, $03, $dd, $c1, $d6, $f8, $0e, $16, $f6, $cd
0ba9e     BA BA C3 D1 
0baa2     FF 2F 46 43 
0baa6     33 2C 16 EF 
0baaa     CF BF BC D6 | 	byte	$ba, $ba, $c3, $d1, $ff, $2f, $46, $43, $33, $2c, $16, $ef, $cf, $bf, $bc, $d6
0baae     0F 41 5D 52 
0bab2     26 FB DB CD 
0bab6     CF DB F2 00 
0baba     11 23 21 11 | 	byte	$0f, $41, $5d, $52, $26, $fb, $db, $cd, $cf, $db, $f2, $00, $11, $23, $21, $11
0babe     01 00 E8 C5 
0bac2     AF AC B5 D6 
0bac6     03 25 3F 48 
0baca     2A 07 F2 EF | 	byte	$01, $00, $e8, $c5, $af, $ac, $b5, $d6, $03, $25, $3f, $48, $2a, $07, $f2, $ef
0bace     EF E4 E6 03 
0bad2     18 16 07 F9 
0bad6     F9 F1 D6 C1 
0bada     B1 AE D6 0A | 	byte	$ef, $e4, $e6, $03, $18, $16, $07, $f9, $f9, $f1, $d6, $c1, $b1, $ae, $d6, $0a
0bade     26 11 F9 EF 
0bae2     F2 FB 0A 16 
0bae6     15 18 34 46 
0baea     3F 2A 0F F9 | 	byte	$26, $11, $f9, $ef, $f2, $fb, $0a, $16, $15, $18, $34, $46, $3f, $2a, $0f, $f9
0baee     F1 DD B3 93 
0baf2     85 81 9A D1 
0baf6     08 31 54 5B 
0bafa     3D 23 18 11 | 	byte	$f1, $dd, $b3, $93, $85, $81, $9a, $d1, $08, $31, $54, $5b, $3d, $23, $18, $11
0bafe     07 18 3D 5B 
0bb02     52 23 ED CA 
0bb06     BF C5 C6 BA 
0bb0a     BF E3 03 18 | 	byte	$07, $18, $3d, $5b, $52, $23, $ed, $ca, $bf, $c5, $c6, $ba, $bf, $e3, $03, $18
0bb0e     25 2A 2C 2A 
0bb12     25 1F 15 01 
0bb16     F6 F2 F2 ED 
0bb1a     EA F9 0F 07 | 	byte	$25, $2a, $2c, $2a, $25, $1f, $15, $01, $f6, $f2, $f2, $ed, $ea, $f9, $0f, $07
0bb1e     F2 E3 D1 CD 
0bb22     E8 07 15 1C 
0bb26     1C 1F 28 23 
0bb2a     08 F8 F2 EB | 	byte	$f2, $e3, $d1, $cd, $e8, $07, $15, $1c, $1c, $1f, $28, $23, $08, $f8, $f2, $eb
0bb2e     EB 11 43 3D 
0bb32     0E EB D1 C1 
0bb36     C5 E4 05 15 
0bb3a     16 18 15 FD | 	byte	$eb, $11, $43, $3d, $0e, $eb, $d1, $c1, $c5, $e4, $05, $15, $16, $18, $15, $fd
0bb3e     E1 D1 D4 E4 
0bb42     00 25 4A 62 
0bb46     66 46 0A D3 
0bb4a     BD CD E8 FD | 	byte	$e1, $d1, $d4, $e4, $00, $25, $4a, $62, $66, $46, $0a, $d3, $bd, $cd, $e8, $fd
0bb4e     F9 DB C1 B3 
0bb52     B5 C1 CF DF 
0bb56     01 31 56 66 
0bb5a     58 3A 26 26 | 	byte	$f9, $db, $c1, $b3, $b5, $c1, $cf, $df, $01, $31, $56, $66, $58, $3a, $26, $26
0bb5e     2A 26 23 0E 
0bb62     E6 C6 AF 9F 
0bb66     9C A1 A8 AF 
0bb6a     D3 03 2F 4D | 	byte	$2a, $26, $23, $0e, $e6, $c6, $af, $9f, $9c, $a1, $a8, $af, $d3, $03, $2f, $4d
0bb6e     4A 31 26 33 
0bb72     41 38 1C 11 
0bb76     1F 2D 31 0F 
0bb7a     E4 C6 B6 AC | 	byte	$4a, $31, $26, $33, $41, $38, $1c, $11, $1f, $2d, $31, $0f, $e4, $c6, $b6, $ac
0bb7e     AC C8 E8 FF 
0bb82     0E 16 1F 26 
0bb86     2A 1F 18 1C 
0bb8a     23 2A 2D 33 | 	byte	$ac, $c8, $e8, $ff, $0e, $16, $1f, $26, $2a, $1f, $18, $1c, $23, $2a, $2d, $33
0bb8e     31 25 15 01 
0bb92     FB FD FB F4 
0bb96     E8 DA CC BD 
0bb9a     B1 B5 C5 E3 | 	byte	$31, $25, $15, $01, $fb, $fd, $fb, $f4, $e8, $da, $cc, $bd, $b1, $b5, $c5, $e3
0bb9e     07 1F 2A 26 
0bba2     23 2D 3F 43 
0bba6     3A 28 0F F6 
0bbaa     E1 CF C1 BA | 	byte	$07, $1f, $2a, $26, $23, $2d, $3f, $43, $3a, $28, $0f, $f6, $e1, $cf, $c1, $ba
0bbae     BC C6 CF CA 
0bbb2     B8 B1 B3 BA 
0bbb6     D6 0C 46 6F 
0bbba     77 61 3F 26 | 	byte	$bc, $c6, $cf, $ca, $b8, $b1, $b3, $ba, $d6, $0c, $46, $6f, $77, $61, $3f, $26
0bbbe     0E F4 E8 F2 
0bbc2     0E 28 34 26 
0bbc6     07 E6 D4 DF 
0bbca     EB F1 F1 F4 | 	byte	$0e, $f4, $e8, $f2, $0e, $28, $34, $26, $07, $e6, $d4, $df, $eb, $f1, $f1, $f4
0bbce     05 18 2D 38 
0bbd2     2D 0E F1 E4 
0bbd6     EB F8 03 0C 
0bbda     07 F4 E8 E6 | 	byte	$05, $18, $2d, $38, $2d, $0e, $f1, $e4, $eb, $f8, $03, $0c, $07, $f4, $e8, $e6
0bbde     E8 F1 00 11 
0bbe2     1F 25 28 2A 
0bbe6     2A 31 34 2D 
0bbea     15 E4 B8 AE | 	byte	$e8, $f1, $00, $11, $1f, $25, $28, $2a, $2a, $31, $34, $2d, $15, $e4, $b8, $ae
0bbee     BF DF F9 03 
0bbf2     F6 E8 DF DD 
0bbf6     E4 F1 03 16 
0bbfa     2A 3F 46 36 | 	byte	$bf, $df, $f9, $03, $f6, $e8, $df, $dd, $e4, $f1, $03, $16, $2a, $3f, $46, $36
0bbfe     18 FF FD 07 
0bc02     11 1F 25 15 
0bc06     F4 CF BA C1 
0bc0a     DB F2 F9 EF | 	byte	$18, $ff, $fd, $07, $11, $1f, $25, $15, $f4, $cf, $ba, $c1, $db, $f2, $f9, $ef
0bc0e     E3 DA DA E1 
0bc12     F2 FF 0C 0F 
0bc16     07 FD 0E 2D 
0bc1a     4A 4B 31 1A | 	byte	$e3, $da, $da, $e1, $f2, $ff, $0c, $0f, $07, $fd, $0e, $2d, $4a, $4b, $31, $1a
0bc1e     1D 2A 2C 15 
0bc22     F2 DD DD E3 
0bc26     E6 DF D3 CA 
0bc2a     CF DD ED F1 | 	byte	$1d, $2a, $2c, $15, $f2, $dd, $dd, $e3, $e6, $df, $d3, $ca, $cf, $dd, $ed, $f1
0bc2e     F2 FD 11 25 
0bc32     23 15 0E 0A 
0bc36     0E 1C 2A 1D 
0bc3a     03 EF ED F9 | 	byte	$f2, $fd, $11, $25, $23, $15, $0e, $0a, $0e, $1c, $2a, $1d, $03, $ef, $ed, $f9
0bc3e     05 05 FF F4 
0bc42     E6 E3 E8 F2 
0bc46     F8 F9 FB 01 
0bc4a     0F 1C 1C 18 | 	byte	$05, $05, $ff, $f4, $e6, $e3, $e8, $f2, $f8, $f9, $fb, $01, $0f, $1c, $1c, $18
0bc4e     11 0A 03 FB 
0bc52     EF E4 E1 E6 
0bc56     F2 03 15 18 
0bc5a     0A 07 0F 15 | 	byte	$11, $0a, $03, $fb, $ef, $e4, $e1, $e6, $f2, $03, $15, $18, $0a, $07, $0f, $15
0bc5e     15 15 18 1F 
0bc62     26 1F 07 EF 
0bc66     E1 DB DA DB 
0bc6a     E3 EB F4 FB | 	byte	$15, $15, $18, $1f, $26, $1f, $07, $ef, $e1, $db, $da, $db, $e3, $eb, $f4, $fb
0bc6e     FD F9 07 23 
0bc72     2D 2C 1F 0F 
0bc76     01 FD F6 E6 
0bc7a     DA DA EB 0E | 	byte	$fd, $f9, $07, $23, $2d, $2c, $1f, $0f, $01, $fd, $f6, $e6, $da, $da, $eb, $0e
0bc7e     2F 34 21 0A 
0bc82     F9 EB DB C8 
0bc86     C3 D6 EF 00 
0bc8a     07 FD E1 C3 | 	byte	$2f, $34, $21, $0a, $f9, $eb, $db, $c8, $c3, $d6, $ef, $00, $07, $fd, $e1, $c3
0bc8e     B8 C8 E8 0C 
0bc92     2A 38 2A 0F 
0bc96     FD F2 EB E3 
0bc9a     DB DF F8 18 | 	byte	$b8, $c8, $e8, $0c, $2a, $38, $2a, $0f, $fd, $f2, $eb, $e3, $db, $df, $f8, $18
0bc9e     2D 28 0A EB 
0bca2     E6 FF 18 26 
0bca6     2A 26 1F 15 
0bcaa     0A 03 F4 D4 | 	byte	$2d, $28, $0a, $eb, $e6, $ff, $18, $26, $2a, $26, $1f, $15, $0a, $03, $f4, $d4
0bcae     B6 A7 A7 B3 
0bcb2     C3 D6 E8 F4 
0bcb6     08 1F 2D 2A 
0bcba     23 31 4A 59 | 	byte	$b6, $a7, $a7, $b3, $c3, $d6, $e8, $f4, $08, $1f, $2d, $2a, $23, $31, $4a, $59
0bcbe     5F 5B 4A 23 
0bcc2     F9 E4 E1 DB 
0bcc6     C3 A7 98 97 
0bcca     A3 B6 C8 D4 | 	byte	$5f, $5b, $4a, $23, $f9, $e4, $e1, $db, $c3, $a7, $98, $97, $a3, $b6, $c8, $d4
0bcce     EA 0E 31 3F 
0bcd2     33 1F 0F 03 
0bcd6     03 0E 16 15 
0bcda     0E 07 00 E4 | 	byte	$ea, $0e, $31, $3f, $33, $1f, $0f, $03, $03, $0e, $16, $15, $0e, $07, $00, $e4
0bcde     C1 AA A5 AC 
0bce2     B8 C5 CD DB 
0bce6     F6 15 2A 36 
0bcea     3F 38 26 0E | 	byte	$c1, $aa, $a5, $ac, $b8, $c5, $cd, $db, $f6, $15, $2a, $36, $3f, $38, $26, $0e
0bcee     FB F6 F9 00 
0bcf2     07 0E 11 0C 
0bcf6     FB EB E3 DA 
0bcfa     D1 CA CC E1 | 	byte	$fb, $f6, $f9, $00, $07, $0e, $11, $0c, $fb, $eb, $e3, $da, $d1, $ca, $cc, $e1
0bcfe     FB 0A 11 16 
0bd02     07 E8 D1 C6 
0bd06     D3 F6 16 23 
0bd0a     1D 13 07 07 | 	byte	$fb, $0a, $11, $16, $07, $e8, $d1, $c6, $d3, $f6, $16, $23, $1d, $13, $07, $07
0bd0e     1A 2C 23 01 
0bd12     F2 F4 F6 F4 
0bd16     F2 ED E6 E4 
0bd1a     E8 E3 D6 D1 | 	byte	$1a, $2c, $23, $01, $f2, $f4, $f6, $f4, $f2, $ed, $e6, $e4, $e8, $e3, $d6, $d1
0bd1e     D1 DB EB 00 
0bd22     13 1F 1F 2A 
0bd26     3D 4A 44 36 
0bd2a     21 0F 07 00 | 	byte	$d1, $db, $eb, $00, $13, $1f, $1f, $2a, $3d, $4a, $44, $36, $21, $0f, $07, $00
0bd2e     FB E8 CC BA 
0bd32     AF AF BA D1 
0bd36     E3 E6 E6 EB 
0bd3a     F6 01 0A 15 | 	byte	$fb, $e8, $cc, $ba, $af, $af, $ba, $d1, $e3, $e6, $e6, $eb, $f6, $01, $0a, $15
0bd3e     2C 3F 3F 38 
0bd42     38 3A 36 2A 
0bd46     13 F9 E6 DA 
0bd4a     CD BD B1 A8 | 	byte	$2c, $3f, $3f, $38, $38, $3a, $36, $2a, $13, $f9, $e6, $da, $cd, $bd, $b1, $a8
0bd4e     AC BF DD F2 
0bd52     FB FF 00 00 
0bd56     05 16 31 43 
0bd5a     4A 4A 44 33 | 	byte	$ac, $bf, $dd, $f2, $fb, $ff, $00, $00, $05, $16, $31, $43, $4a, $4a, $44, $33
0bd5e     13 F1 D4 C8 
0bd62     CD D8 E1 EB 
0bd66     F1 EA DB D8 
0bd6a     E1 ED EF F2 | 	byte	$13, $f1, $d4, $c8, $cd, $d8, $e1, $eb, $f1, $ea, $db, $d8, $e1, $ed, $ef, $f2
0bd6e     F8 08 1F 2D 
0bd72     31 31 26 0F 
0bd76     F4 E6 E4 E3 
0bd7a     DD DD EA FF | 	byte	$f8, $08, $1f, $2d, $31, $31, $26, $0f, $f4, $e6, $e4, $e3, $dd, $dd, $ea, $ff
0bd7e     11 1A 16 0E 
0bd82     05 08 1C 2C 
0bd86     31 2A 1A 0A 
0bd8a     FD ED DA D1 | 	byte	$11, $1a, $16, $0e, $05, $08, $1c, $2c, $31, $2a, $1a, $0a, $fd, $ed, $da, $d1
0bd8e     CD D1 D6 DD 
0bd92     EA F9 0C 18 
0bd96     1F 2C 43 58 
0bd9a     5F 56 3A 15 | 	byte	$cd, $d1, $d6, $dd, $ea, $f9, $0c, $18, $1f, $2c, $43, $58, $5f, $56, $3a, $15
0bd9e     F4 E6 E6 F1 
0bda2     F4 EF DD C8 
0bda6     BF C1 CF DF 
0bdaa     EB F6 00 15 | 	byte	$f4, $e6, $e6, $f1, $f4, $ef, $dd, $c8, $bf, $c1, $cf, $df, $eb, $f6, $00, $15
0bdae     31 43 3B 26 
0bdb2     15 07 FD F9 
0bdb6     F6 F9 FF 0A 
0bdba     11 0E F9 DB | 	byte	$31, $43, $3b, $26, $15, $07, $fd, $f9, $f6, $f9, $ff, $0a, $11, $0e, $f9, $db
0bdbe     C3 BD CA E6 
0bdc2     FF 05 FB F2 
0bdc6     F8 0A 23 2F 
0bdca     26 1F 1D 23 | 	byte	$c3, $bd, $ca, $e6, $ff, $05, $fb, $f2, $f8, $0a, $23, $2f, $26, $1f, $1d, $23
0bdce     26 23 1A 15 
0bdd2     0A FB EF EB 
0bdd6     E8 E8 E1 DA 
0bdda     CF CA CC D6 | 	byte	$26, $23, $1a, $15, $0a, $fb, $ef, $eb, $e8, $e8, $e1, $da, $cf, $ca, $cc, $d6
0bdde     ED 0C 2A 43 
0bde2     52 5B 59 46 
0bde6     23 00 F1 F4 
0bdea     00 08 05 ED | 	byte	$ed, $0c, $2a, $43, $52, $5b, $59, $46, $23, $00, $f1, $f4, $00, $08, $05, $ed
0bdee     CF BC C1 CC 
0bdf2     D3 D6 DD F1 
0bdf6     11 38 4F 4D 
0bdfa     41 33 2A 23 | 	byte	$cf, $bc, $c1, $cc, $d3, $d6, $dd, $f1, $11, $38, $4f, $4d, $41, $33, $2a, $23
0bdfe     1A 00 E6 DA 
0be02     DD ED F9 F4 
0be06     E6 DB DF F4 
0be0a     0C 1F 28 25 | 	byte	$1a, $00, $e6, $da, $dd, $ed, $f9, $f4, $e6, $db, $df, $f4, $0c, $1f, $28, $25
0be0e     18 11 11 15 
0be12     18 0F F8 E3 
0be16     D4 CD CF E3 
0be1a     00 11 18 18 | 	byte	$18, $11, $11, $15, $18, $0f, $f8, $e3, $d4, $cd, $cf, $e3, $00, $11, $18, $18
0be1e     1F 2A 2C 26 
0be22     16 0A 01 FF 
0be26     FF FB F1 DF 
0be2a     CF C8 CA D8 | 	byte	$1f, $2a, $2c, $26, $16, $0a, $01, $ff, $ff, $fb, $f1, $df, $cf, $c8, $ca, $d8
0be2e     E8 F4 00 0A 
0be32     18 23 26 1D 
0be36     0E 01 FD FB 
0be3a     F6 F8 05 1A | 	byte	$e8, $f4, $00, $0a, $18, $23, $26, $1d, $0e, $01, $fd, $fb, $f6, $f8, $05, $1a
0be3e     2D 33 2A 1A 
0be42     0A FD F4 EA 
0be46     DB D1 D6 E4 
0be4a     F2 F8 EF D8 | 	byte	$2d, $33, $2a, $1a, $0a, $fd, $f4, $ea, $db, $d1, $d6, $e4, $f2, $f8, $ef, $d8
0be4e     C6 C5 D1 E8 
0be52     FB 08 1D 3F 
0be56     5D 6D 68 51 
0be5a     2D 0E F4 E1 | 	byte	$c6, $c5, $d1, $e8, $fb, $08, $1d, $3f, $5d, $6d, $68, $51, $2d, $0e, $f4, $e1
0be5e     D3 C8 C3 C3 
0be62     CC D4 DA DD 
0be66     E1 EB FB 0E 
0be6a     21 34 4B 5B | 	byte	$d3, $c8, $c3, $c3, $cc, $d4, $da, $dd, $e1, $eb, $fb, $0e, $21, $34, $4b, $5b
0be6e     62 61 4B 1F 
0be72     EF D4 CC D6 
0be76     E8 F2 F2 EF 
0be7a     EB E6 DB CF | 	byte	$62, $61, $4b, $1f, $ef, $d4, $cc, $d6, $e8, $f2, $f2, $ef, $eb, $e6, $db, $cf
0be7e     C8 D1 EF 0F 
0be82     26 2C 25 15 
0be86     0E 0A 07 03 
0be8a     00 03 08 0E | 	byte	$c8, $d1, $ef, $0f, $26, $2c, $25, $15, $0e, $0a, $07, $03, $00, $03, $08, $0e
0be8e     0F 0E 07 F6 
0be92     E4 D8 DA DF 
0be96     ED FB 0A 18 
0be9a     1F 15 FF EF | 	byte	$0f, $0e, $07, $f6, $e4, $d8, $da, $df, $ed, $fb, $0a, $18, $1f, $15, $ff, $ef
0be9e     E4 E4 EA EA 
0bea2     E8 EF 00 0F 
0bea6     18 15 0E 07 
0beaa     00 FF F9 F2 | 	byte	$e4, $e4, $ea, $ea, $e8, $ef, $00, $0f, $18, $15, $0e, $07, $00, $ff, $f9, $f2
0beae     EB F2 03 15 
0beb2     1A 0A EA CF 
0beb6     CC DA EF FF 
0beba     07 08 0C 11 | 	byte	$eb, $f2, $03, $15, $1a, $0a, $ea, $cf, $cc, $da, $ef, $ff, $07, $08, $0c, $11
0bebe     15 16 15 0A 
0bec2     03 03 03 08 
0bec6     0E 0F 0F 0A 
0beca     00 F6 ED E8 | 	byte	$15, $16, $15, $0a, $03, $03, $03, $08, $0e, $0f, $0f, $0a, $00, $f6, $ed, $e8
0bece     E6 E3 DD D8 
0bed2     D4 DB F2 0E 
0bed6     21 23 11 00 
0beda     FD 03 0A 0C | 	byte	$e6, $e3, $dd, $d8, $d4, $db, $f2, $0e, $21, $23, $11, $00, $fd, $03, $0a, $0c
0bede     0C 0A 07 FD 
0bee2     F2 EB EB EB 
0bee6     ED F2 F9 FF 
0beea     00 FF FB F4 | 	byte	$0c, $0a, $07, $fd, $f2, $eb, $eb, $eb, $ed, $f2, $f9, $ff, $00, $ff, $fb, $f4
0beee     F2 F4 FF 0E 
0bef2     1C 23 1C 07 
0bef6     F6 F1 F1 F1 
0befa     F2 F9 FD FD | 	byte	$f2, $f4, $ff, $0e, $1c, $23, $1c, $07, $f6, $f1, $f1, $f1, $f2, $f9, $fd, $fd
0befe     FB F8 F4 EF 
0bf02     EA E4 DF DB 
0bf06     DD EF 07 1D 
0bf0a     23 11 F9 EF | 	byte	$fb, $f8, $f4, $ef, $ea, $e4, $df, $db, $dd, $ef, $07, $1d, $23, $11, $f9, $ef
0bf0e     FF 16 26 25 
0bf12     16 0E 0A 07 
0bf16     FD E6 CF C1 
0bf1a     C8 DF F6 00 | 	byte	$ff, $16, $26, $25, $16, $0e, $0a, $07, $fd, $e6, $cf, $c1, $c8, $df, $f6, $00
0bf1e     F9 F1 EA F2 
0bf22     0A 1D 23 15 
0bf26     0A 08 0C 0C 
0bf2a     05 F8 EB E6 | 	byte	$f9, $f1, $ea, $f2, $0a, $1d, $23, $15, $0a, $08, $0c, $0c, $05, $f8, $eb, $e6
0bf2e     EB F8 03 0C 
0bf32     11 15 11 01 
0bf36     F1 E8 EA ED 
0bf3a     F2 F4 F2 E8 | 	byte	$eb, $f8, $03, $0c, $11, $15, $11, $01, $f1, $e8, $ea, $ed, $f2, $f4, $f2, $e8
0bf3e     E1 E1 E8 F2 
0bf42     00 0E 1C 28 
0bf46     2F 33 31 2A 
0bf4a     1A 05 EF E3 | 	byte	$e1, $e1, $e8, $f2, $00, $0e, $1c, $28, $2f, $33, $31, $2a, $1a, $05, $ef, $e3
0bf4e     DA D3 CC C8 
0bf52     CD DB F1 05 
0bf56     11 11 07 F9 
0bf5a     F2 F8 0C 26 | 	byte	$da, $d3, $cc, $c8, $cd, $db, $f1, $05, $11, $11, $07, $f9, $f2, $f8, $0c, $26
0bf5e     33 2C 1D 11 
0bf62     0A 03 FF ED 
0bf66     D3 C1 C6 DD 
0bf6a     F4 03 07 00 | 	byte	$33, $2c, $1d, $11, $0a, $03, $ff, $ed, $d3, $c1, $c6, $dd, $f4, $03, $07, $00
0bf6e     F4 EF F9 0E 
0bf72     26 2D 21 0C 
0bf76     00 FD FD F9 
0bf7a     FB F9 F6 F4 | 	byte	$f4, $ef, $f9, $0e, $26, $2d, $21, $0c, $00, $fd, $fd, $f9, $fb, $f9, $f6, $f4
0bf7e     F6 F6 EF E4 
0bf82     DD E1 ED F6 
0bf86     FF 07 0C 0F 
0bf8a     0E 0F 18 1D | 	byte	$f6, $f6, $ef, $e4, $dd, $e1, $ed, $f6, $ff, $07, $0c, $0f, $0e, $0f, $18, $1d
0bf8e     13 05 01 08 
0bf92     0E 0C 08 05 
0bf96     F9 E4 D1 CA 
0bf9a     CC DA EB FB | 	byte	$13, $05, $01, $08, $0e, $0c, $08, $05, $f9, $e4, $d1, $ca, $cc, $da, $eb, $fb
0bf9e     03 05 0A 15 
0bfa2     1F 26 23 1A 
0bfa6     11 0E 07 03 
0bfaa     FD F9 EF E1 | 	byte	$03, $05, $0a, $15, $1f, $26, $23, $1a, $11, $0e, $07, $03, $fd, $f9, $ef, $e1
0bfae     DA E1 EF F8 
0bfb2     EF E4 E1 ED 
0bfb6     01 16 26 2D 
0bfba     2C 23 18 08 | 	byte	$da, $e1, $ef, $f8, $ef, $e4, $e1, $ed, $01, $16, $26, $2d, $2c, $23, $18, $08
0bfbe     F2 E3 E1 EB 
0bfc2     F8 FD FD F9 
0bfc6     FB FF 00 00 
0bfca     01 01 03 0A | 	byte	$f2, $e3, $e1, $eb, $f8, $fd, $fd, $f9, $fb, $ff, $00, $00, $01, $01, $03, $0a
0bfce     1A 26 26 1D 
0bfd2     0E F9 E8 DD 
0bfd6     D8 DD EA F6 
0bfda     FB FD FF 00 | 	byte	$1a, $26, $26, $1d, $0e, $f9, $e8, $dd, $d8, $dd, $ea, $f6, $fb, $fd, $ff, $00
0bfde     00 00 03 05 
0bfe2     05 07 0A 0C 
0bfe6     07 FD EF EA 
0bfea     F1 FF 07 0A | 	byte	$00, $00, $03, $05, $05, $07, $0a, $0c, $07, $fd, $ef, $ea, $f1, $ff, $07, $0a
0bfee     0A 0E 0E 0E 
0bff2     0A 03 F9 F2 
0bff6     EF ED EF F4 
0bffa     F9 FD FB FB | 	byte	$0a, $0e, $0e, $0e, $0a, $03, $f9, $f2, $ef, $ed, $ef, $f4, $f9, $fd, $fb, $fb
0bffe     01 11 23 2C 
0c002     2A 25 1C 15 
0c006     0F 0E 08 01 
0c00a     FB F8 F6 F2 | 	byte	$01, $11, $23, $2c, $2a, $25, $1c, $15, $0f, $0e, $08, $01, $fb, $f8, $f6, $f2
0c00e     EA DD D6 D3 
0c012     D8 E8 FF 18 
0c016     2D 34 31 2D 
0c01a     2C 26 1D 13 | 	byte	$ea, $dd, $d6, $d3, $d8, $e8, $ff, $18, $2d, $34, $31, $2d, $2c, $26, $1d, $13
0c01e     0E 0A 07 FD 
0c022     EB DA D1 CF 
0c026     D4 DB E1 EA 
0c02a     F9 0E 1F 2C | 	byte	$0e, $0a, $07, $fd, $eb, $da, $d1, $cf, $d4, $db, $e1, $ea, $f9, $0e, $1f, $2c
0c02e     2A 18 07 FB 
0c032     FF 08 0E 08 
0c036     00 FB FD 00 
0c03a     FF F6 E6 DD | 	byte	$2a, $18, $07, $fb, $ff, $08, $0e, $08, $00, $fb, $fd, $00, $ff, $f6, $e6, $dd
0c03e     E8 FF 13 1A 
0c042     11 07 00 FB 
0c046     F8 F6 F4 F4 
0c04a     F9 01 0A 0E | 	byte	$e8, $ff, $13, $1a, $11, $07, $00, $fb, $f8, $f6, $f4, $f4, $f9, $01, $0a, $0e
0c04e     0A 05 00 F9 
0c052     EF EB EF F8 
0c056     03 0E 15 16 
0c05a     16 15 16 15 | 	byte	$0a, $05, $00, $f9, $ef, $eb, $ef, $f8, $03, $0e, $15, $16, $16, $15, $16, $15
0c05e     0E FF F2 E8 
0c062     E4 E6 EB F4 
0c066     FF 07 0A 0A 
0c06a     0A 07 FF F8 | 	byte	$0e, $ff, $f2, $e8, $e4, $e6, $eb, $f4, $ff, $07, $0a, $0a, $0a, $07, $ff, $f8
0c06e     F4 F6 F9 F9 
0c072     F6 F2 F6 FF 
0c076     0A 11 11 11 
0c07a     15 1C 1D 16 | 	byte	$f4, $f6, $f9, $f9, $f6, $f2, $f6, $ff, $0a, $11, $11, $11, $15, $1c, $1d, $16
0c07e     07 F2 DB CF 
0c082     CF DB E6 EB 
0c086     EA EB F6 01 
0c08a     0E 1C 23 23 | 	byte	$07, $f2, $db, $cf, $cf, $db, $e6, $eb, $ea, $eb, $f6, $01, $0e, $1c, $23, $23
0c08e     1C 18 18 15 
0c092     0A F9 EA E4 
0c096     E6 EB EF F1 
0c09a     F2 F2 F4 F6 | 	byte	$1c, $18, $18, $15, $0a, $f9, $ea, $e4, $e6, $eb, $ef, $f1, $f2, $f2, $f4, $f6
0c09e     F4 F1 EF F4 
0c0a2     03 13 1C 18 
0c0a6     11 07 07 0E 
0c0aa     15 15 0E FF | 	byte	$f4, $f1, $ef, $f4, $03, $13, $1c, $18, $11, $07, $07, $0e, $15, $15, $0e, $ff
0c0ae     EF E3 DF DF 
0c0b2     DD DA DA DF 
0c0b6     EB F8 01 07 
0c0ba     07 0A 0E 0F | 	byte	$ef, $e3, $df, $df, $dd, $da, $da, $df, $eb, $f8, $01, $07, $07, $0a, $0e, $0f
0c0be     0A 07 08 0E 
0c0c2     0E 05 F2 E4 
0c0c6     DF E6 F1 F6 
0c0ca     F2 EB E6 EA | 	byte	$0a, $07, $08, $0e, $0e, $05, $f2, $e4, $df, $e6, $f1, $f6, $f2, $eb, $e6, $ea
0c0ce     EF F1 ED EB 
0c0d2     F2 05 1C 25 
0c0d6     18 07 FF 01 
0c0da     0A 0E 08 00 | 	byte	$ef, $f1, $ed, $eb, $f2, $05, $1c, $25, $18, $07, $ff, $01, $0a, $0e, $08, $00
0c0de     FF 03 08 07 
0c0e2     FB EF E4 E8 
0c0e6     F2 FD FD F9 
0c0ea     F6 F9 00 01 | 	byte	$ff, $03, $08, $07, $fb, $ef, $e4, $e8, $f2, $fd, $fd, $f9, $f6, $f9, $00, $01
0c0ee     FD F9 FB 07 
0c0f2     16 1F 1F 18 
0c0f6     0E 03 FF F9 
0c0fa     EF EA EA ED | 	byte	$fd, $f9, $fb, $07, $16, $1f, $1f, $18, $0e, $03, $ff, $f9, $ef, $ea, $ea, $ed
0c0fe     F4 F9 F8 F1 
0c102     E8 E8 F1 FF 
0c106     0A 13 18 1A 
0c10a     18 0A FB EB | 	byte	$f4, $f9, $f8, $f1, $e8, $e8, $f1, $ff, $0a, $13, $18, $1a, $18, $0a, $fb, $eb
0c10e     E3 E3 EB F6 
0c112     00 07 0A 0E 
0c116     0C 01 F9 F8 
0c11a     FB 01 03 00 | 	byte	$e3, $e3, $eb, $f6, $00, $07, $0a, $0e, $0c, $01, $f9, $f8, $fb, $01, $03, $00
0c11e     FB F9 FD FD 
0c122     FD F9 F8 FB 
0c126     03 0A 0A 03 
0c12a     F9 F2 F6 01 | 	byte	$fb, $f9, $fd, $fd, $fd, $f9, $f8, $fb, $03, $0a, $0a, $03, $f9, $f2, $f6, $01
0c12e     0E 0E 03 FB 
0c132     FD 05 0A 07 
0c136     FD F2 EF F8 
0c13a     03 07 00 F6 | 	byte	$0e, $0e, $03, $fb, $fd, $05, $0a, $07, $fd, $f2, $ef, $f8, $03, $07, $00, $f6
0c13e     F4 F8 FB FB 
0c142     F9 F8 FD 03 
0c146     08 0E 0E 0A 
0c14a     03 FB F6 EF | 	byte	$f4, $f8, $fb, $fb, $f9, $f8, $fd, $03, $08, $0e, $0e, $0a, $03, $fb, $f6, $ef
0c14e     EB EB EF F6 
0c152     FD 03 03 01 
0c156     05 0E 15 18 
0c15a     15 0E 05 00 | 	byte	$eb, $eb, $ef, $f6, $fd, $03, $03, $01, $05, $0e, $15, $18, $15, $0e, $05, $00
0c15e     00 FD F6 F2 
0c162     F2 F9 00 01 
0c166     00 FB FB 01 
0c16a     0E 1A 1C 16 | 	byte	$00, $fd, $f6, $f2, $f2, $f9, $00, $01, $00, $fb, $fb, $01, $0e, $1a, $1c, $16
0c16e     0C 01 FD FD 
0c172     FF FF FD FB 
0c176     FB FB F6 F2 
0c17a     EF EF F2 F9 | 	byte	$0c, $01, $fd, $fd, $ff, $ff, $fd, $fb, $fb, $fb, $f6, $f2, $ef, $ef, $f2, $f9
0c17e     00 01 00 00 
0c182     07 0F 11 0C 
0c186     FF F1 E8 E8 
0c18a     EF FB 03 07 | 	byte	$00, $01, $00, $00, $07, $0f, $11, $0c, $ff, $f1, $e8, $e8, $ef, $fb, $03, $07
0c18e     03 00 FF 00 
0c192     FF FF FF FF 
0c196     00 FF FD F8 
0c19a     F4 F6 F8 F9 | 	byte	$03, $00, $ff, $00, $ff, $ff, $ff, $ff, $00, $ff, $fd, $f8, $f4, $f6, $f8, $f9
0c19e     00 00 00 00 
0c1a2     00 00 00 00 | 	byte	$00[8]
0c1a6     05 05 00 FF 
0c1aa     00 00 00 00 
0c1ae     00 00 00 00 
0c1b2     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1b6     00 00 00 00 
      ...             
0c1da     00 00 00 00 
0c1de     00 00       | 	byte	$00[42]
0c1e0     FE 00 FE 03 
0c1e4     05 0A 0D 0C 
0c1e8     0C 07 01 00 
0c1ec     F8 ED F0 ED | 	byte	$fe, $00, $fe, $03, $05, $0a, $0d, $0c, $0c, $07, $01, $00, $f8, $ed, $f0, $ed
0c1f0     E9 E9 ED F6 
0c1f4     FE 05 03 06 
0c1f8     09 0D 0E 05 
0c1fc     03 FF 06 04 | 	byte	$e9, $e9, $ed, $f6, $fe, $05, $03, $06, $09, $0d, $0e, $05, $03, $ff, $06, $04
0c200     08 0C 0B 07 
0c204     00 01 FF 07 
0c208     04 03 FD FA 
0c20c     F4 F7 FA 03 | 	byte	$08, $0c, $0b, $07, $00, $01, $ff, $07, $04, $03, $fd, $fa, $f4, $f7, $fa, $03
0c210     00 03 FD FC 
0c214     FB 02 FF 03 
0c218     01 03 00 FC 
0c21c     F6 F0 EE F1 | 	byte	$00, $03, $fd, $fc, $fb, $02, $ff, $03, $01, $03, $00, $fc, $f6, $f0, $ee, $f1
0c220     F0 F6 05 0F 
0c224     14 12 17 18 
0c228     22 18 0B F8 
0c22c     E2 D8 EC F6 | 	byte	$f0, $f6, $05, $0f, $14, $12, $17, $18, $22, $18, $0b, $f8, $e2, $d8, $ec, $f6
0c230     06 03 03 09 
0c234     06 0B FA F3 
0c238     FC FC FE F9 
0c23c     EB 02 03 13 | 	byte	$06, $03, $03, $09, $06, $0b, $fa, $f3, $fc, $fc, $fe, $f9, $eb, $02, $03, $13
0c240     17 10 0E 0C 
0c244     0A F8 EC E3 
0c248     E6 E8 F5 F5 
0c24c     FC 06 FA F1 | 	byte	$17, $10, $0e, $0c, $0a, $f8, $ec, $e3, $e6, $e8, $f5, $f5, $fc, $06, $fa, $f1
0c250     F8 06 05 F7 
0c254     FA 00 0E 10 
0c258     16 14 13 0A 
0c25c     14 09 05 10 | 	byte	$f8, $06, $05, $f7, $fa, $00, $0e, $10, $16, $14, $13, $0a, $14, $09, $05, $10
0c260     12 2E 3C 36 
0c264     22 00 F4 E0 
0c268     DF EC E7 F1 
0c26c     FB F7 17 15 | 	byte	$12, $2e, $3c, $36, $22, $00, $f4, $e0, $df, $ec, $e7, $f1, $fb, $f7, $17, $15
0c270     25 16 0D F6 
0c274     D0 A4 8A 80 
0c278     9E C7 EF 0A 
0c27c     1B 32 28 32 | 	byte	$25, $16, $0d, $f6, $d0, $a4, $8a, $80, $9e, $c7, $ef, $0a, $1b, $32, $28, $32
0c280     1D 17 19 12 
0c284     27 17 25 15 
0c288     15 15 04 F2 
0c28c     E4 D5 D7 DF | 	byte	$1d, $17, $19, $12, $27, $17, $25, $15, $15, $15, $04, $f2, $e4, $d5, $d7, $df
0c290     E6 FD FE F9 
0c294     E4 C8 C0 BF 
0c298     E7 17 46 73 
0c29c     7F 7F 7C 60 | 	byte	$e6, $fd, $fe, $f9, $e4, $c8, $c0, $bf, $e7, $17, $46, $73, $7f, $7f, $7c, $60
0c2a0     48 1A E8 A8 
0c2a4     80 80 8F B9 
0c2a8     EB 23 55 62 
0c2ac     56 34 10 E4 | 	byte	$48, $1a, $e8, $a8, $80, $80, $8f, $b9, $eb, $23, $55, $62, $56, $34, $10, $e4
0c2b0     C0 B4 AD B9 
0c2b4     CB DF F5 05 
0c2b8     00 08 FA F0 
0c2bc     DB D5 D7 DC | 	byte	$c0, $b4, $ad, $b9, $cb, $df, $f5, $05, $00, $08, $fa, $f0, $db, $d5, $d7, $dc
0c2c0     F3 0D 2A 5F 
0c2c4     75 7C 58 28 
0c2c8     F8 C8 C7 E7 
0c2cc     0F 3A 56 5A | 	byte	$f3, $0d, $2a, $5f, $75, $7c, $58, $28, $f8, $c8, $c7, $e7, $0f, $3a, $56, $5a
0c2d0     48 2A 0A E0 
0c2d4     B0 90 85 9F 
0c2d8     C5 FF 3F 69 
0c2dc     5A 28 E8 B0 | 	byte	$48, $2a, $0a, $e0, $b0, $90, $85, $9f, $c5, $ff, $3f, $69, $5a, $28, $e8, $b0
0c2e0     9D C5 EF 25 
0c2e4     49 5F 6E 59 
0c2e8     38 14 E4 C4 
0c2ec     A0 82 80 80 | 	byte	$9d, $c5, $ef, $25, $49, $5f, $6e, $59, $38, $14, $e4, $c4, $a0, $82, $80, $80
0c2f0     8F AF D5 07 
0c2f4     32 4E 45 30 
0c2f8     2C 20 14 08 
0c2fc     F2 D8 D1 D2 | 	byte	$8f, $af, $d5, $07, $32, $4e, $45, $30, $2c, $20, $14, $08, $f2, $d8, $d1, $d2
0c300     E9 06 2E 49 
0c304     52 4C 36 22 
0c308     18 05 0C 05 
0c30c     07 17 27 2F | 	byte	$e9, $06, $2e, $49, $52, $4c, $36, $22, $18, $05, $0c, $05, $07, $17, $27, $2f
0c310     19 01 E2 B0 
0c314     A3 A8 B7 DF 
0c318     0D 33 4E 58 
0c31c     40 16 E8 C0 | 	byte	$19, $01, $e2, $b0, $a3, $a8, $b7, $df, $0d, $33, $4e, $58, $40, $16, $e8, $c0
0c320     94 97 AF D3 
0c324     FF 25 33 21 
0c328     00 E0 CB C6 
0c32c     D4 E3 FF 0F | 	byte	$94, $97, $af, $d3, $ff, $25, $33, $21, $00, $e0, $cb, $c6, $d4, $e3, $ff, $0f
0c330     2D 45 44 46 
0c334     29 10 F0 DA 
0c338     CF E6 FE 1B 
0c33c     2F 30 26 16 | 	byte	$2d, $45, $44, $46, $29, $10, $f0, $da, $cf, $e6, $fe, $1b, $2f, $30, $26, $16
0c340     03 FE FE 0B 
0c344     2D 31 34 22 
0c348     06 EA D6 CE 
0c34c     D3 D0 DF F5 | 	byte	$03, $fe, $fe, $0b, $2d, $31, $34, $22, $06, $ea, $d6, $ce, $d3, $d0, $df, $f5
0c350     06 1F 30 34 
0c354     35 14 F8 DA 
0c358     BC B4 BF D9 
0c35c     F5 01 05 01 | 	byte	$06, $1f, $30, $34, $35, $14, $f8, $da, $bc, $b4, $bf, $d9, $f5, $01, $05, $01
0c360     EA DE C8 B8 
0c364     BD C7 E3 FF 
0c368     19 2B 37 35 
0c36c     32 26 18 0B | 	byte	$ea, $de, $c8, $b8, $bd, $c7, $e3, $ff, $19, $2b, $37, $35, $32, $26, $18, $0b
0c370     FC EC F1 FF 
0c374     25 3B 48 44 
0c378     36 1A 04 F3 
0c37c     F2 FB 11 29 | 	byte	$fc, $ec, $f1, $ff, $25, $3b, $48, $44, $36, $1a, $04, $f3, $f2, $fb, $11, $29
0c380     38 30 20 04 
0c384     F1 DA DA D7 
0c388     E1 EE F7 FF 
0c38c     0A 08 15 1A | 	byte	$38, $30, $20, $04, $f1, $da, $da, $d7, $e1, $ee, $f7, $ff, $0a, $08, $15, $1a
0c390     0F 0D FC F0 
0c394     E7 DE DB DF 
0c398     E2 EA F2 EC 
0c39c     E5 D2 BC B2 | 	byte	$0f, $0d, $fc, $f0, $e7, $de, $db, $df, $e2, $ea, $f2, $ec, $e5, $d2, $bc, $b2
0c3a0     AD B9 D5 F7 
0c3a4     1B 43 4C 44 
0c3a8     38 21 14 01 
0c3ac     0C F6 03 F8 | 	byte	$ad, $b9, $d5, $f7, $1b, $43, $4c, $44, $38, $21, $14, $01, $0c, $f6, $03, $f8
0c3b0     FB 00 0B 2A 
0c3b4     3F 50 47 42 
0c3b8     1C FA D4 C1 
0c3bc     CB D4 FD 19 | 	byte	$fb, $00, $0b, $2a, $3f, $50, $47, $42, $1c, $fa, $d4, $c1, $cb, $d4, $fd, $19
0c3c0     29 2A 16 02 
0c3c4     E6 D8 D5 E7 
0c3c8     FF 0F 27 21 
0c3cc     17 04 EE EF | 	byte	$29, $2a, $16, $02, $e6, $d8, $d5, $e7, $ff, $0f, $27, $21, $17, $04, $ee, $ef
0c3d0     E8 F1 FF 04 
0c3d4     07 F4 E0 CE 
0c3d8     C5 BA BF D5 
0c3dc     E9 F8 08 01 | 	byte	$e8, $f1, $ff, $04, $07, $f4, $e0, $ce, $c5, $ba, $bf, $d5, $e9, $f8, $08, $01
0c3e0     F8 E8 CE C8 
0c3e4     C0 CF DF F5 
0c3e8     1B 27 44 44 
0c3ec     38 3D 2A 37 | 	byte	$f8, $e8, $ce, $c8, $c0, $cf, $df, $f5, $1b, $27, $44, $44, $38, $3d, $2a, $37
0c3f0     43 3F 51 44 
0c3f4     3A 2A 0C F6 
0c3f8     E6 E4 ED 02 
0c3fc     0A 1B 23 17 | 	byte	$43, $3f, $51, $44, $3a, $2a, $0c, $f6, $e6, $e4, $ed, $02, $0a, $1b, $23, $17
0c400     10 FC E9 E7 
0c404     DD DB EF F0 
0c408     FE 12 00 02 
0c40c     F9 D8 DC D6 | 	byte	$10, $fc, $e9, $e7, $dd, $db, $ef, $f0, $fe, $12, $00, $02, $f9, $d8, $dc, $d6
0c410     CD E7 E5 F6 
0c414     1A 17 23 28 
0c418     11 0A 00 E1 
0c41c     DA D1 D1 E3 | 	byte	$cd, $e7, $e5, $f6, $1a, $17, $23, $28, $11, $0a, $00, $e1, $da, $d1, $d1, $e3
0c420     E9 F7 01 05 
0c424     03 04 00 F9 
0c428     F6 F3 F5 FA 
0c42c     F7 F7 F6 F0 | 	byte	$e9, $f7, $01, $05, $03, $04, $00, $f9, $f6, $f3, $f5, $fa, $f7, $f7, $f6, $f0
0c430     EC E5 E0 E2 
0c434     E4 E7 F9 05 
0c438     12 22 31 3D 
0c43c     4B 4C 4A 4C | 	byte	$ec, $e5, $e0, $e2, $e4, $e7, $f9, $05, $12, $22, $31, $3d, $4b, $4c, $4a, $4c
0c440     43 34 35 2D 
0c444     24 26 2B 28 
0c448     31 2E 1F 20 
0c44c     12 FE F2 E4 | 	byte	$43, $34, $35, $2d, $24, $26, $2b, $28, $31, $2e, $1f, $20, $12, $fe, $f2, $e4
0c450     D0 CB CA BC 
0c454     C6 CB C4 CB 
0c458     DE DC E5 F5 
0c45c     ED F2 FD F9 | 	byte	$d0, $cb, $ca, $bc, $c6, $cb, $c4, $cb, $de, $dc, $e5, $f5, $ed, $f2, $fd, $f9
0c460     FC 0B 15 11 
0c464     15 12 04 F3 
0c468     E8 D6 C2 B9 
0c46c     B4 B6 C5 D3 | 	byte	$fc, $0b, $15, $11, $15, $12, $04, $f3, $e8, $d6, $c2, $b9, $b4, $b6, $c5, $d3
0c470     E7 F6 05 14 
0c474     17 0E 0A 09 
0c478     FD F7 FA FB 
0c47c     FF 07 11 15 | 	byte	$e7, $f6, $05, $14, $17, $0e, $0a, $09, $fd, $f7, $fa, $fb, $ff, $07, $11, $15
0c480     1F 28 25 28 
0c484     24 20 18 09 
0c488     06 03 FB FD 
0c48c     01 FF 04 06 | 	byte	$1f, $28, $25, $28, $24, $20, $18, $09, $06, $03, $fb, $fd, $01, $ff, $04, $06
0c490     06 05 05 07 
0c494     05 00 01 04 
0c498     04 07 13 15 
0c49c     1B 2F 39 37 | 	byte	$06, $05, $05, $07, $05, $00, $01, $04, $04, $07, $13, $15, $1b, $2f, $39, $37
0c4a0     3D 40 3D 31 
0c4a4     28 24 14 04 
0c4a8     04 00 F8 ED 
0c4ac     EE EC E2 DF | 	byte	$3d, $40, $3d, $31, $28, $24, $14, $04, $04, $00, $f8, $ed, $ee, $ec, $e2, $df
0c4b0     DB DB DA D6 
0c4b4     D2 D0 CB C7 
0c4b8     C2 C0 BF C3 
0c4bc     C6 C9 CF D9 | 	byte	$db, $db, $da, $d6, $d2, $d0, $cb, $c7, $c2, $c0, $bf, $c3, $c6, $c9, $cf, $d9
0c4c0     E3 EB F1 FB 
0c4c4     0A 11 12 16 
0c4c8     1A 1D 22 21 
0c4cc     1C 1C 1F 22 | 	byte	$e3, $eb, $f1, $fb, $0a, $11, $12, $16, $1a, $1d, $22, $21, $1c, $1c, $1f, $22
0c4d0     1D 15 10 0E 
0c4d4     0D 07 FE FE 
0c4d8     03 06 00 FC 
0c4dc     FD 00 FC F7 | 	byte	$1d, $15, $10, $0e, $0d, $07, $fe, $fe, $03, $06, $00, $fc, $fd, $00, $fc, $f7
0c4e0     F2 F3 F4 F7 
0c4e4     FA FD FF 07 
0c4e8     12 17 19 1D 
0c4ec     21 28 30 36 | 	byte	$f2, $f3, $f4, $f7, $fa, $fd, $ff, $07, $12, $17, $19, $1d, $21, $28, $30, $36
0c4f0     35 32 30 2E 
0c4f4     2E 2C 27 21 
0c4f8     19 10 06 00 
0c4fc     FA F3 EC E4 | 	byte	$35, $32, $30, $2e, $2e, $2c, $27, $21, $19, $10, $06, $00, $fa, $f3, $ec, $e4
0c500     DD D5 CF CC 
0c504     CB CA C8 C3 
0c508     BF BF C2 C8 
0c50c     CD D1 D6 DB | 	byte	$dd, $d5, $cf, $cc, $cb, $ca, $c8, $c3, $bf, $bf, $c2, $c8, $cd, $d1, $d6, $db
0c510     DF E4 E8 ED 
0c514     F2 F6 FA FE 
0c518     01 04 07 0C 
0c51c     10 17 1B 1C | 	byte	$df, $e4, $e8, $ed, $f2, $f6, $fa, $fe, $01, $04, $07, $0c, $10, $17, $1b, $1c
0c520     1A 14 12 0F 
0c524     11 13 15 19 
0c528     1B 1C 1B 1A 
0c52c     18 14 14 14 | 	byte	$1a, $14, $12, $0f, $11, $13, $15, $19, $1b, $1c, $1b, $1a, $18, $14, $14, $14
0c530     14 16 16 15 
0c534     14 11 10 0C 
0c538     0B 0A 0A 09 
0c53c     08 06 03 02 | 	byte	$14, $16, $16, $15, $14, $11, $10, $0c, $0b, $0a, $0a, $09, $08, $06, $03, $02
0c540     FE FD FC FA 
0c544     F9 F8 F6 F5 
0c548     F3 F3 F2 F2 
0c54c     F0 EF EE EE | 	byte	$fe, $fd, $fc, $fa, $f9, $f8, $f6, $f5, $f3, $f3, $f2, $f2, $f0, $ef, $ee, $ee
0c550     EE EF F0 F1 
0c554     F2 F4 F5 F6 
0c558     F6 F5 F5 F4 
0c55c     F6 F8 FA FC | 	byte	$ee, $ef, $f0, $f1, $f2, $f4, $f5, $f6, $f6, $f5, $f5, $f4, $f6, $f8, $fa, $fc
0c560     FF 02 05 07 
0c564     07 07 07 06 
0c568     07 08 0A 0B 
0c56c     0E 10 12 12 | 	byte	$ff, $02, $05, $07, $07, $07, $07, $06, $07, $08, $0a, $0b, $0e, $10, $12, $12
0c570     11 0E 0C 0B 
0c574     0B 0B 0C 0E 
0c578     0F 10 0D 0C 
0c57c     09 06 05 02 | 	byte	$11, $0e, $0c, $0b, $0b, $0b, $0c, $0e, $0f, $10, $0d, $0c, $09, $06, $05, $02
0c580     03 02 00 00 
0c584     00 00 FE FC 
0c588     FB F9 F7 F5 
0c58c     F6 F6 F6 F8 | 	byte	$03, $02, $00, $00, $00, $00, $fe, $fc, $fb, $f9, $f7, $f5, $f6, $f6, $f6, $f8
0c590     F8 F8 F9 F6 
0c594     F5 F3 F1 EE 
0c598     EE ED EE EF 
0c59c     F0 F0 F1 F2 | 	byte	$f8, $f8, $f9, $f6, $f5, $f3, $f1, $ee, $ee, $ed, $ee, $ef, $f0, $f0, $f1, $f2
0c5a0     F2 F2 F2 F1 
0c5a4     F2 F3 F3 F5 
0c5a8     F4 F5 F5 F5 
0c5ac     F6 F5 F5 F5 | 	byte	$f2, $f2, $f2, $f1, $f2, $f3, $f3, $f5, $f4, $f5, $f5, $f5, $f6, $f5, $f5, $f5
0c5b0     F7 F8 FA FB 
0c5b4     FD FF 00 01 
0c5b8     04 04 05 05 
0c5bc     03 03 03 03 | 	byte	$f7, $f8, $fa, $fb, $fd, $ff, $00, $01, $04, $04, $05, $05, $03, $03, $03, $03
0c5c0     06 08 0B 0D 
0c5c4     0F 10 12 11 
0c5c8     11 10 0E 0D 
0c5cc     0D 0F 13 16 | 	byte	$06, $08, $0b, $0d, $0f, $10, $12, $11, $11, $10, $0e, $0d, $0d, $0f, $13, $16
0c5d0     19 18 18 16 
0c5d4     13 13 12 13 
0c5d8     14 14 15 13 
0c5dc     12 0F 0D 0C | 	byte	$19, $18, $18, $16, $13, $13, $12, $13, $14, $14, $15, $13, $12, $0f, $0d, $0c
0c5e0     0B 0B 09 07 
0c5e4     05 01 FD F9 
0c5e8     F9 FA FE 00 
0c5ec     01 FE FA F7 | 	byte	$0b, $0b, $09, $07, $05, $01, $fd, $f9, $f9, $fa, $fe, $00, $01, $fe, $fa, $f7
0c5f0     F5 F4 F5 F9 
0c5f4     FD FC FB FD 
0c5f8     FD FE FE FD 
0c5fc     FD FD FE FE | 	byte	$f5, $f4, $f5, $f9, $fd, $fc, $fb, $fd, $fd, $fe, $fe, $fd, $fd, $fd, $fe, $fe
0c600     FE FD FC F8 
0c604     F2 F0 EE EF 
0c608     E8 E1 DD DB 
0c60c     DC DC D9 D8 | 	byte	$fe, $fd, $fc, $f8, $f2, $f0, $ee, $ef, $e8, $e1, $dd, $db, $dc, $dc, $d9, $d8
0c610     D8 DB DF E7 
0c614     EB EF F1 F4 
0c618     FA 00 04 07 
0c61c     0A 0E 11 13 | 	byte	$d8, $db, $df, $e7, $eb, $ef, $f1, $f4, $fa, $00, $04, $07, $0a, $0e, $11, $13
0c620     19 1E 20 1E 
0c624     20 25 28 2A 
0c628     2A 29 27 28 
0c62c     29 27 25 25 | 	byte	$19, $1e, $20, $1e, $20, $25, $28, $2a, $2a, $29, $27, $28, $29, $27, $25, $25
0c630     25 24 23 21 
0c634     1D 1A 14 0F 
0c638     0C 03 FC F4 
0c63c     EA E4 E0 DB | 	byte	$25, $24, $23, $21, $1d, $1a, $14, $0f, $0c, $03, $fc, $f4, $ea, $e4, $e0, $db
0c640     D0 C8 C8 C6 
0c644     C6 BF BE C8 
0c648     CD CF CF D4 
0c64c     DB E1 E3 E1 | 	byte	$d0, $c8, $c8, $c6, $c6, $bf, $be, $c8, $cd, $cf, $cf, $d4, $db, $e1, $e3, $e1
0c650     E6 ED EE E6 
0c654     E3 EA EB E9 
0c658     EB F0 F7 FC 
0c65c     04 10 1E 27 | 	byte	$e6, $ed, $ee, $e6, $e3, $ea, $eb, $e9, $eb, $f0, $f7, $fc, $04, $10, $1e, $27
0c660     2D 34 38 39 
0c664     36 31 2C 26 
0c668     21 14 11 0E 
0c66c     07 05 0A 0E | 	byte	$2d, $34, $38, $39, $36, $31, $2c, $26, $21, $14, $11, $0e, $07, $05, $0a, $0e
0c670     11 15 17 17 
0c674     1C 16 0C 06 
0c678     00 F8 EE EC 
0c67c     EB EC ED F6 | 	byte	$11, $15, $17, $17, $1c, $16, $0c, $06, $00, $f8, $ee, $ec, $eb, $ec, $ed, $f6
0c680     03 0A 13 1F 
0c684     2D 34 33 31 
0c688     31 28 1B 0D 
0c68c     00 FB F9 F9 | 	byte	$03, $0a, $13, $1f, $2d, $34, $33, $31, $31, $28, $1b, $0d, $00, $fb, $f9, $f9
0c690     FF 0C 15 1D 
0c694     27 2F 31 28 
0c698     22 1C 0C F8 
0c69c     EC E1 D8 C6 | 	byte	$ff, $0c, $15, $1d, $27, $2f, $31, $28, $22, $1c, $0c, $f8, $ec, $e1, $d8, $c6
0c6a0     C7 C7 BA B7 
0c6a4     BE BA B1 BB 
0c6a8     C3 C3 C2 D1 
0c6ac     D7 D6 E7 F2 | 	byte	$c7, $c7, $ba, $b7, $be, $ba, $b1, $bb, $c3, $c3, $c2, $d1, $d7, $d6, $e7, $f2
0c6b0     F9 06 14 1B 
0c6b4     16 20 1E 12 
0c6b8     0A 00 EC E6 
0c6bc     E2 DC D9 E5 | 	byte	$f9, $06, $14, $1b, $16, $20, $1e, $12, $0a, $00, $ec, $e6, $e2, $dc, $d9, $e5
0c6c0     EC EF F7 FE 
0c6c4     00 FD FD F7 
0c6c8     F4 F5 F0 EF 
0c6cc     F5 FF 07 16 | 	byte	$ec, $ef, $f7, $fe, $00, $fd, $fd, $f7, $f4, $f5, $f0, $ef, $f5, $ff, $07, $16
0c6d0     25 33 3F 47 
0c6d4     47 49 46 3E 
0c6d8     3C 3A 37 35 
0c6dc     30 25 1D 10 | 	byte	$25, $33, $3f, $47, $47, $49, $46, $3e, $3c, $3a, $37, $35, $30, $25, $1d, $10
0c6e0     FC E8 DA C4 
0c6e4     B8 BB BC CD 
0c6e8     E3 EB 05 19 
0c6ec     14 17 1C FC | 	byte	$fc, $e8, $da, $c4, $b8, $bb, $bc, $cd, $e3, $eb, $05, $19, $14, $17, $1c, $fc
0c6f0     F6 F6 DD E3 
0c6f4     EA E4 FB 17 
0c6f8     15 2B 37 28 
0c6fc     27 20 08 05 | 	byte	$f6, $f6, $dd, $e3, $ea, $e4, $fb, $17, $15, $2b, $37, $28, $27, $20, $08, $05
0c700     03 F9 FF 08 
0c704     0A 0E 12 02 
0c708     F9 EE D8 C7 
0c70c     BE BC C4 D1 | 	byte	$03, $f9, $ff, $08, $0a, $0e, $12, $02, $f9, $ee, $d8, $c7, $be, $bc, $c4, $d1
0c710     E2 EC F7 FC 
0c714     F0 F6 F2 E3 
0c718     F4 F8 FD 0F 
0c71c     0A 00 01 E8 | 	byte	$e2, $ec, $f7, $fc, $f0, $f6, $f2, $e3, $f4, $f8, $fd, $0f, $0a, $00, $01, $e8
0c720     D8 D8 D0 DD 
0c724     EF FF 1F 3B 
0c728     4F 62 60 58 
0c72c     52 3C 28 23 | 	byte	$d8, $d8, $d0, $dd, $ef, $ff, $1f, $3b, $4f, $62, $60, $58, $52, $3c, $28, $23
0c730     1C 19 19 1D 
0c734     25 25 1C 16 
0c738     08 03 03 F9 
0c73c     02 0B 08 0F | 	byte	$1c, $19, $19, $1d, $25, $25, $1c, $16, $08, $03, $03, $f9, $02, $0b, $08, $0f
0c740     02 ED E4 D2 
0c744     C6 CD D6 EF 
0c748     0B 1F 37 3E 
0c74c     33 26 FC EB | 	byte	$02, $ed, $e4, $d2, $c6, $cd, $d6, $ef, $0b, $1f, $37, $3e, $33, $26, $fc, $eb
0c750     D8 CD DD F2 
0c754     0F 32 3A 41 
0c758     3C 20 10 E8 
0c75c     D6 C4 AF C2 | 	byte	$d8, $cd, $dd, $f2, $0f, $32, $3a, $41, $3c, $20, $10, $e8, $d6, $c4, $af, $c2
0c760     A8 BB B8 A9 
0c764     C5 BC D5 DC 
0c768     EB FB F2 E2 
0c76c     CE B4 A0 94 | 	byte	$a8, $bb, $b8, $a9, $c5, $bc, $d5, $dc, $eb, $fb, $f2, $e2, $ce, $b4, $a0, $94
0c770     9C A9 BF DB 
0c774     F2 05 16 18 
0c778     1B 25 1E 27 
0c77c     24 28 28 2C | 	byte	$9c, $a9, $bf, $db, $f2, $05, $16, $18, $1b, $25, $1e, $27, $24, $28, $28, $2c
0c780     32 2D 33 36 
0c784     18 1F 12 06 
0c788     05 FA F6 EE 
0c78c     F5 ED FB 0B | 	byte	$32, $2d, $33, $36, $18, $1f, $12, $06, $05, $fa, $f6, $ee, $f5, $ed, $fb, $0b
0c790     16 39 43 5B 
0c794     51 43 31 1E 
0c798     10 0D 19 2B 
0c79c     46 51 5B 50 | 	byte	$16, $39, $43, $5b, $51, $43, $31, $1e, $10, $0d, $19, $2b, $46, $51, $5b, $50
0c7a0     3E 18 F2 DE 
0c7a4     CB DE E8 FB 
0c7a8     09 15 18 13 
0c7ac     10 F8 EE D0 | 	byte	$3e, $18, $f2, $de, $cb, $de, $e8, $fb, $09, $15, $18, $13, $10, $f8, $ee, $d0
0c7b0     C0 9E 98 92 
0c7b4     96 B7 C4 D7 
0c7b8     F9 FC 05 02 
0c7bc     EC DA C2 BA | 	byte	$c0, $9e, $98, $92, $96, $b7, $c4, $d7, $f9, $fc, $05, $02, $ec, $da, $c2, $ba
0c7c0     BF D7 EB 0E 
0c7c4     36 3A 33 2C 
0c7c8     08 FA EA DD 
0c7cc     D7 E2 E0 DE | 	byte	$bf, $d7, $eb, $0e, $36, $3a, $33, $2c, $08, $fa, $ea, $dd, $d7, $e2, $e0, $de
0c7d0     EB F3 0D 21 
0c7d4     39 41 4E 3A 
0c7d8     33 39 2B 3F 
0c7dc     41 49 4F 4A | 	byte	$eb, $f3, $0d, $21, $39, $41, $4e, $3a, $33, $39, $2b, $3f, $41, $49, $4f, $4a
0c7e0     29 14 F0 DE 
0c7e4     D9 F7 0B 3B 
0c7e8     4B 5F 52 4B 
0c7ec     22 06 E6 D2 | 	byte	$29, $14, $f0, $de, $d9, $f7, $0b, $3b, $4b, $5f, $52, $4b, $22, $06, $e6, $d2
0c7f0     BC BC AB BF 
0c7f4     CE E7 FF 12 
0c7f8     0B FD DA B4 
0c7fc     96 82 89 A9 | 	byte	$bc, $bc, $ab, $bf, $ce, $e7, $ff, $12, $0b, $fd, $da, $b4, $96, $82, $89, $a9
0c800     CB FF 2F 4E 
0c804     48 38 12 EA 
0c808     C4 A4 9C 99 
0c80c     B3 DB F7 15 | 	byte	$cb, $ff, $2f, $4e, $48, $38, $12, $ea, $c4, $a4, $9c, $99, $b3, $db, $f7, $15
0c810     2F 24 1A 04 
0c814     FE 07 08 0A 
0c818     22 23 3D 50 
0c81c     59 5A 52 30 | 	byte	$2f, $24, $1a, $04, $fe, $07, $08, $0a, $22, $23, $3d, $50, $59, $5a, $52, $30
0c820     12 F0 CB CE 
0c824     CF ED FF 17 
0c828     1F 34 37 47 
0c82c     5E 5F 5C 45 | 	byte	$12, $f0, $cb, $ce, $cf, $ed, $ff, $17, $1f, $34, $37, $47, $5e, $5f, $5c, $45
0c830     28 F6 C0 80 
0c834     80 80 80 AB 
0c838     D7 07 33 4B 
0c83c     59 64 50 42 | 	byte	$28, $f6, $c0, $80, $80, $80, $80, $ab, $d7, $07, $33, $4b, $59, $64, $50, $42
0c840     2C 08 D8 A0 
0c844     80 80 92 BF 
0c848     EF 0D 0E E8 
0c84c     C4 AC A4 AA | 	byte	$2c, $08, $d8, $a0, $80, $80, $92, $bf, $ef, $0d, $0e, $e8, $c4, $ac, $a4, $aa
0c850     C9 ED 17 39 
0c854     56 69 70 65 
0c858     52 40 1C 02 
0c85c     E2 ED 06 29 | 	byte	$c9, $ed, $17, $39, $56, $69, $70, $65, $52, $40, $1c, $02, $e2, $ed, $06, $29
0c860     49 62 58 44 
0c864     1C FC E2 C3 
0c868     BF CC D6 EF 
0c86c     FF 14 1B 11 | 	byte	$49, $62, $58, $44, $1c, $fc, $e2, $c3, $bf, $cc, $d6, $ef, $ff, $14, $1b, $11
0c870     17 04 F2 E8 
0c874     D0 D0 CF D7 
0c878     DE F9 0F 2F 
0c87c     47 4F 49 30 | 	byte	$17, $04, $f2, $e8, $d0, $d0, $cf, $d7, $de, $f9, $0f, $2f, $47, $4f, $49, $30
0c880     06 E8 B4 96 
0c884     83 86 A3 C7 
0c888     E3 13 29 4F 
0c88c     59 58 58 3A | 	byte	$06, $e8, $b4, $96, $83, $86, $a3, $c7, $e3, $13, $29, $4f, $59, $58, $58, $3a
0c890     1A F8 CC AE 
0c894     A5 AB BF DA 
0c898     EA F6 07 FF 
0c89c     10 17 2C 3F | 	byte	$1a, $f8, $cc, $ae, $a5, $ab, $bf, $da, $ea, $f6, $07, $ff, $10, $17, $2c, $3f
0c8a0     4B 5D 61 50 
0c8a4     3A 32 1A 0F 
0c8a8     08 F3 00 ED 
0c8ac     00 F9 F8 F7 | 	byte	$4b, $5d, $61, $50, $3a, $32, $1a, $0f, $08, $f3, $00, $ed, $00, $f9, $f8, $f7
0c8b0     F6 E5 F2 D2 
0c8b4     BA 92 91 9B 
0c8b8     B0 CF F7 17 
0c8bc     33 45 28 37 | 	byte	$f6, $e5, $f2, $d2, $ba, $92, $91, $9b, $b0, $cf, $f7, $17, $33, $45, $28, $37
0c8c0     10 07 10 FF 
0c8c4     00 03 E2 F6 
0c8c8     F0 F5 15 1F 
0c8cc     23 24 0A 05 | 	byte	$10, $07, $10, $ff, $00, $03, $e2, $f6, $f0, $f5, $15, $1f, $23, $24, $0a, $05
0c8d0     08 F6 08 FD 
0c8d4     FB 15 02 0F 
0c8d8     00 FB E6 FA 
0c8dc     FB 17 11 17 | 	byte	$08, $f6, $08, $fd, $fb, $15, $02, $0f, $00, $fb, $e6, $fa, $fb, $17, $11, $17
0c8e0     11 17 20 21 
0c8e4     15 14 08 FF 
0c8e8     03 F4 07 08 
0c8ec     19 03 10 FF | 	byte	$11, $17, $20, $21, $15, $14, $08, $ff, $03, $f4, $07, $08, $19, $03, $10, $ff
0c8f0     1C F3 EE E2 
0c8f4     D0 C2 E4 CA 
0c8f8     E3 D2 D6 EC 
0c8fc     F2 EC FF E2 | 	byte	$1c, $f3, $ee, $e2, $d0, $c2, $e4, $ca, $e3, $d2, $d6, $ec, $f2, $ec, $ff, $e2
0c900     0B 04 0A F0 
0c904     EA D0 EF FD 
0c908     13 28 2F 24 
0c90c     2F 10 27 20 | 	byte	$0b, $04, $0a, $f0, $ea, $d0, $ef, $fd, $13, $28, $2f, $24, $2f, $10, $27, $20
0c910     16 0D FB 11 
0c914     FE F6 F9 06 
0c918     F6 0E 05 0F 
0c91c     0B 15 0C 0F | 	byte	$16, $0d, $fb, $11, $fe, $f6, $f9, $06, $f6, $0e, $05, $0f, $0b, $15, $0c, $0f
0c920     04 FF FC FB 
0c924     06 F2 02 E0 
0c928     EA D0 F1 EF 
0c92c     F5 06 12 0C | 	byte	$04, $ff, $fc, $fb, $06, $f2, $02, $e0, $ea, $d0, $f1, $ef, $f5, $06, $12, $0c
0c930     EF F3 F0 02 
0c934     F3 06 0B F5 
0c938     F6 F1 E3 F4 
0c93c     EB 0A FA 08 | 	byte	$ef, $f3, $f0, $02, $f3, $06, $0b, $f5, $f6, $f1, $e3, $f4, $eb, $0a, $fa, $08
0c940     EF 10 05 08 
0c944     FF F0 F4 F4 
0c948     F5 FB FC 04 
0c94c     05 0D 1E 0C | 	byte	$ef, $10, $05, $08, $ff, $f0, $f4, $f4, $f5, $fb, $fc, $04, $05, $0d, $1e, $0c
0c950     35 14 2B 16 
0c954     15 0C FF FC 
0c958     EF 00 E7 00 
0c95c     EB FA F1 01 | 	byte	$35, $14, $2b, $16, $15, $0c, $ff, $fc, $ef, $00, $e7, $00, $eb, $fa, $f1, $01
0c960     ED FD EC EF 
0c964     F6 F9 05 F6 
0c968     0F 05 27 26 
0c96c     0F 20 0B 10 | 	byte	$ed, $fd, $ec, $ef, $f6, $f9, $05, $f6, $0f, $05, $27, $26, $0f, $20, $0b, $10
0c970     FF 02 E5 F5 
0c974     DF E7 FB FF 
0c978     17 14 02 18 
0c97c     FF 0E 07 08 | 	byte	$ff, $02, $e5, $f5, $df, $e7, $fb, $ff, $17, $14, $02, $18, $ff, $0e, $07, $08
0c980     03 0A FC FB 
0c984     F8 FF FC 03 
0c988     06 09 02 FD 
0c98c     FC FE FC 01 | 	byte	$03, $0a, $fc, $fb, $f8, $ff, $fc, $03, $06, $09, $02, $fd, $fc, $fe, $fc, $01
0c990     00 04 04 03 
0c994     04 02 FF FE 
0c998     FC FF FD FE 
0c99c     FE 00 01 01 | 	byte	$00, $04, $04, $03, $04, $02, $ff, $fe, $fc, $ff, $fd, $fe, $fe, $00, $01, $01
0c9a0     00 FE FC FA 
0c9a4     F8 F8 FA FE 
0c9a8     00 05 06 09 
0c9ac     0B 09 07 06 | 	byte	$00, $fe, $fc, $fa, $f8, $f8, $fa, $fe, $00, $05, $06, $09, $0b, $09, $07, $06
0c9b0     02 FF FC F8 
0c9b4     F5 F2 F1 F1 
0c9b8     F3 F2 F2 F1 
0c9bc     F0 F1 F0 F2 | 	byte	$02, $ff, $fc, $f8, $f5, $f2, $f1, $f1, $f3, $f2, $f2, $f1, $f0, $f1, $f0, $f2
0c9c0     F0 F0 F1 EF 
0c9c4     F3 F4 F6 FA 
0c9c8     FD 01 05 08 
0c9cc     0A 0D 0F 0F | 	byte	$f0, $f0, $f1, $ef, $f3, $f4, $f6, $fa, $fd, $01, $05, $08, $0a, $0d, $0f, $0f
0c9d0     12 10 10 0F 
0c9d4     0F 10 11 14 
0c9d8     14 16 17 16 
0c9dc     16 16 14 13 | 	byte	$12, $10, $10, $0f, $0f, $10, $11, $14, $14, $16, $17, $16, $16, $16, $14, $13
0c9e0     11 0D 09 06 
0c9e4     03 02 01 01 
0c9e8     03 02 FF FF 
0c9ec     FA F9 F7 F5 | 	byte	$11, $0d, $09, $06, $03, $02, $01, $01, $03, $02, $ff, $ff, $fa, $f9, $f7, $f5
0c9f0     F5 F4 F5 F4 
0c9f4     F6 F7 F9 FB 
0c9f8     FB FA F9 F7 
0c9fc     F3 F1 ED EC | 	byte	$f5, $f4, $f5, $f4, $f6, $f7, $f9, $fb, $fb, $fa, $f9, $f7, $f3, $f1, $ed, $ec
0ca00     EA EA E9 EA 
0ca04     E8 E6 E5 E3 
0ca08     E3 E1 E2 E0 
0ca0c     E1 E2 E5 E8 | 	byte	$ea, $ea, $e9, $ea, $e8, $e6, $e5, $e3, $e3, $e1, $e2, $e0, $e1, $e2, $e5, $e8
0ca10     ED F2 F5 FA 
0ca14     FD FF 02 05 
0ca18     0A 0F 14 19 
0ca1c     1D 1E 21 20 | 	byte	$ed, $f2, $f5, $fa, $fd, $ff, $02, $05, $0a, $0f, $14, $19, $1d, $1e, $21, $20
0ca20     1F 1E 1B 19 
0ca24     17 15 13 14 
0ca28     16 19 1D 1E 
0ca2c     21 21 21 1F | 	byte	$1f, $1e, $1b, $19, $17, $15, $13, $14, $16, $19, $1d, $1e, $21, $21, $21, $1f
0ca30     1C 1A 19 16 
0ca34     16 16 14 14 
0ca38     12 12 11 0E 
0ca3c     0E 0D 0D 0B | 	byte	$1c, $1a, $19, $16, $16, $16, $14, $14, $12, $12, $11, $0e, $0e, $0d, $0d, $0b
0ca40     08 05 03 00 
0ca44     FD FA F9 F7 
0ca48     F6 F6 F4 F1 
0ca4c     EE EB E7 E6 | 	byte	$08, $05, $03, $00, $fd, $fa, $f9, $f7, $f6, $f6, $f4, $f1, $ee, $eb, $e7, $e6
0ca50     E2 E1 E1 E0 
0ca54     DF E0 DF E1 
0ca58     E1 E0 E0 DF 
0ca5c     DE DB DD DE | 	byte	$e2, $e1, $e1, $e0, $df, $e0, $df, $e1, $e1, $e0, $e0, $df, $de, $db, $dd, $de
0ca60     E2 E4 E8 E9 
0ca64     EC ED EE EF 
0ca68     F1 EF F4 F5 
0ca6c     F7 FD FD 00 | 	byte	$e2, $e4, $e8, $e9, $ec, $ed, $ee, $ef, $f1, $ef, $f4, $f5, $f7, $fd, $fd, $00
0ca70     01 03 02 03 
0ca74     01 01 01 03 
0ca78     04 07 08 0C 
0ca7c     0E 11 13 11 | 	byte	$01, $03, $02, $03, $01, $01, $01, $03, $04, $07, $08, $0c, $0e, $11, $13, $11
0ca80     10 0F 0F 11 
0ca84     11 12 12 12 
0ca88     12 12 14 16 
0ca8c     17 18 18 17 | 	byte	$10, $0f, $0f, $11, $11, $12, $12, $12, $12, $12, $14, $16, $17, $18, $18, $17
0ca90     16 16 13 14 
0ca94     13 13 12 11 
0ca98     10 0F 0F 0D 
0ca9c     0E 0D 0D 0C | 	byte	$16, $16, $13, $14, $13, $13, $12, $11, $10, $0f, $0f, $0d, $0e, $0d, $0d, $0c
0caa0     0B 0B 09 07 
0caa4     06 06 03 04 
0caa8     01 01 02 00 
0caac     01 01 00 00 | 	byte	$0b, $0b, $09, $07, $06, $06, $03, $04, $01, $01, $02, $00, $01, $01, $00, $00
0cab0     FD FB FA F8 
0cab4     F7 F7 F9 FA 
0cab8     FB FB FA F8 
0cabc     F9 F7 F8 F7 | 	byte	$fd, $fb, $fa, $f8, $f7, $f7, $f9, $fa, $fb, $fb, $fa, $f8, $f9, $f7, $f8, $f7
0cac0     F9 F9 FB F9 
0cac4     F9 F7 F7 F6 
0cac8     F5 F6 F6 F5 
0cacc     F4 F6 F5 F7 | 	byte	$f9, $f9, $fb, $f9, $f9, $f7, $f7, $f6, $f5, $f6, $f6, $f5, $f4, $f6, $f5, $f7
0cad0     FA F8 F9 F7 
0cad4     F5 F4 F2 F2 
0cad8     F3 F2 F5 F6 
0cadc     F5 F7 F5 F5 | 	byte	$fa, $f8, $f9, $f7, $f5, $f4, $f2, $f2, $f3, $f2, $f5, $f6, $f5, $f7, $f5, $f5
0cae0     F7 F8 F7 FA 
0cae4     FA FA FB F9 
0cae8     FA FA FA FD 
0caec     FD FD FE FE | 	byte	$f7, $f8, $f7, $fa, $fa, $fa, $fb, $f9, $fa, $fa, $fa, $fd, $fd, $fd, $fe, $fe
0caf0     FD FE FE FE 
0caf4     00 FF FE FE 
0caf8     FD FC FB FB 
0cafc     FC FD FF FF | 	byte	$fd, $fe, $fe, $fe, $00, $ff, $fe, $fe, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $ff
0cb00     01 01 01 02 
0cb04     02 03 02 04 
0cb08     05 06 08 07 
0cb0c     09 09 0A 0B | 	byte	$01, $01, $01, $02, $02, $03, $02, $04, $05, $06, $08, $07, $09, $09, $0a, $0b
0cb10     0A 0B 08 07 
0cb14     07 04 05 03 
0cb18     03 04 03 06 
0cb1c     06 07 07 09 | 	byte	$0a, $0b, $08, $07, $07, $04, $05, $03, $03, $04, $03, $06, $06, $07, $07, $09
0cb20     09 09 08 06 
0cb24     05 04 04 04 
0cb28     04 06 07 07 
0cb2c     08 07 06 06 | 	byte	$09, $09, $08, $06, $05, $04, $04, $04, $04, $06, $07, $07, $08, $07, $06, $06
0cb30     05 06 06 07 
0cb34     07 08 04 03 
0cb38     02 01 01 02 
0cb3c     02 03 02 03 | 	byte	$05, $06, $06, $07, $07, $08, $04, $03, $02, $01, $01, $02, $02, $03, $02, $03
0cb40     03 03 03 03 
0cb44     04 04 02 02 
0cb48     00 00 00 00 
0cb4c     00 FE FE FE | 	byte	$03, $03, $03, $03, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe
0cb50     FF FF FF 00 
0cb54     00 01 01 00 
0cb58     FE FE FE FE 
0cb5c     FE FF FE FF | 	byte	$ff, $ff, $ff, $00, $00, $01, $01, $00, $fe, $fe, $fe, $fe, $fe, $ff, $fe, $ff
0cb60     FD FF FE FE 
0cb64     FE FE FD FD 
0cb68     FB FA FB FB 
0cb6c     FC FE FE 01 | 	byte	$fd, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fb, $fa, $fb, $fb, $fc, $fe, $fe, $01
0cb70     02 00 02 FE 
0cb74     FC FB F9 F8 
0cb78     F9 F8 F9 F9 
0cb7c     F9 FB FA FB | 	byte	$02, $00, $02, $fe, $fc, $fb, $f9, $f8, $f9, $f8, $f9, $f9, $f9, $fb, $fa, $fb
0cb80     FA FB FA FA 
0cb84     F9 F9 FA FC 
0cb88     FD FF FF FF 
0cb8c     FE FD FA FB | 	byte	$fa, $fb, $fa, $fa, $f9, $f9, $fa, $fc, $fd, $ff, $ff, $ff, $fe, $fd, $fa, $fb
0cb90     F9 F8 F8 FA 
0cb94     FC FE 01 01 
0cb98     02 02 00 FF 
0cb9c     FD FC FB FB | 	byte	$f9, $f8, $f8, $fa, $fc, $fe, $01, $01, $02, $02, $00, $ff, $fd, $fc, $fb, $fb
0cba0     FD FE 01 01 
0cba4     03 02 00 00 
0cba8     FE FD FD FE 
0cbac     FF FF 01 01 | 	byte	$fd, $fe, $01, $01, $03, $02, $00, $00, $fe, $fd, $fd, $fe, $ff, $ff, $01, $01
0cbb0     01 01 01 01 
0cbb4     02 03 03 02 
0cbb8     03 03 03 03 
0cbbc     02 02 01 02 | 	byte	$01, $01, $01, $01, $02, $03, $03, $02, $03, $03, $03, $03, $02, $02, $01, $02
0cbc0     01 02 00 02 
0cbc4     03 03 02 03 
0cbc8     02 02 01 02 
0cbcc     01 01 02 02 | 	byte	$01, $02, $00, $02, $03, $03, $02, $03, $02, $02, $01, $02, $01, $01, $02, $02
0cbd0     03 02 04 04 
0cbd4     05 05 04 04 
0cbd8     03 03 02 01 
0cbdc     00 FF FE FD | 	byte	$03, $02, $04, $04, $05, $05, $04, $04, $03, $03, $02, $01, $00, $ff, $fe, $fd
0cbe0     FD FF FF 00 
0cbe4     01 02 03 04 
0cbe8     04 03 03 02 
0cbec     01 01 01 00 | 	byte	$fd, $ff, $ff, $00, $01, $02, $03, $04, $04, $03, $03, $02, $01, $01, $01, $00
0cbf0     00 00 01 01 
0cbf4     01 02 01 01 
0cbf8     02 02 02 02 
0cbfc     01 02 02 00 | 	byte	$00, $00, $01, $01, $01, $02, $01, $01, $02, $02, $02, $02, $01, $02, $02, $00
0cc00     00 FF FF FF 
0cc04     00 00 02 02 
0cc08     03 03 03 03 
0cc0c     03 01 02 00 | 	byte	$00, $ff, $ff, $ff, $00, $00, $02, $02, $03, $03, $03, $03, $03, $01, $02, $00
0cc10     FE FE FB FA 
0cc14     FB FB FC FD 
0cc18     FD FE FE FD 
0cc1c     FD FE FC FC | 	byte	$fe, $fe, $fb, $fa, $fb, $fb, $fc, $fd, $fd, $fe, $fe, $fd, $fd, $fe, $fc, $fc
0cc20     FA FA FB FC 
0cc24     FE FF 00 01 
0cc28     00 00 00 FF 
0cc2c     FE FD FD FD | 	byte	$fa, $fa, $fb, $fc, $fe, $ff, $00, $01, $00, $00, $00, $ff, $fe, $fd, $fd, $fd
0cc30     FE FF 00 03 
0cc34     02 04 03 03 
0cc38     02 02 00 00 
0cc3c     00 01 02 03 | 	byte	$fe, $ff, $00, $03, $02, $04, $03, $03, $02, $02, $00, $00, $00, $01, $02, $03
0cc40     03 03 03 01 
0cc44     01 00 00 FF 
0cc48     FF 00 FF 00 
0cc4c     00 FF FF 00 | 	byte	$03, $03, $03, $01, $01, $00, $00, $ff, $ff, $00, $ff, $00, $00, $ff, $ff, $00
0cc50     01 FF FF FE 
0cc54     FE FE FF 01 
0cc58     01 03 03 04 
0cc5c     05 03 00 00 | 	byte	$01, $ff, $ff, $fe, $fe, $fe, $ff, $01, $01, $03, $03, $04, $05, $03, $00, $00
0cc60     00 00 00 00 
0cc64     00 00 00 00 | 	byte	$00[8]
0cc68     05 05 00 FF 
0cc6c     00 00 00 00 
0cc70     00 00 00 00 
0cc74     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc78     00 00 00 00 
      ...             
0cc9c     00 00 00 00 
0cca0     00 00       | 	byte	$00[42]
0cca2     14 01 2F 08 
0cca6     B3 35 00 E7 
0ccaa     F2 DF 07 E0 
0ccae     EF E9 EB F8 | 	byte	$14, $01, $2f, $08, $b3, $35, $00, $e7, $f2, $df, $07, $e0, $ef, $e9, $eb, $f8
0ccb2     FB EE F3 00 
0ccb6     FB F8 1F 08 
0ccba     DF 5C 00 DF 
0ccbe     C8 80 9F 2F | 	byte	$fb, $ee, $f3, $00, $fb, $f8, $1f, $08, $df, $5c, $00, $df, $c8, $80, $9f, $2f
0ccc2     50 D4 F7 27 
0ccc6     32 15 23 25 
0ccca     3D 61 64 45 
0ccce     55 59 5F 5F | 	byte	$50, $d4, $f7, $27, $32, $15, $23, $25, $3d, $61, $64, $45, $55, $59, $5f, $5f
0ccd2     5E 5A 56 4E 
0ccd6     4E 3C 35 2B 
0ccda     24 1B 15 0C 
0ccde     04 F9 F1 E9 | 	byte	$5e, $5a, $56, $4e, $4e, $3c, $35, $2b, $24, $1b, $15, $0c, $04, $f9, $f1, $e9
0cce2     E3 E0 CD CC 
0cce6     CF C1 DF DA 
0ccea     B3 CD D0 A2 
0ccee     9D CF A4 80 | 	byte	$e3, $e0, $cd, $cc, $cf, $c1, $df, $da, $b3, $cd, $d0, $a2, $9d, $cf, $a4, $80
0ccf2     BB A8 8E 90 
0ccf6     92 8D 87 85 
0ccfa     86 87 8B 92 
0ccfe     9A 9F A7 B3 | 	byte	$bb, $a8, $8e, $90, $92, $8d, $87, $85, $86, $87, $8b, $92, $9a, $9f, $a7, $b3
0cd02     BB C7 D5 E4 
0cd06     EF FD 09 16 
0cd0a     22 2F 3F 4B 
0cd0e     57 62 66 68 | 	byte	$bb, $c7, $d5, $e4, $ef, $fd, $09, $16, $22, $2f, $3f, $4b, $57, $62, $66, $68
0cd12     69 67 6A 68 
0cd16     68 6A 67 6A 
0cd1a     68 68 68 65 
0cd1e     68 67 68 68 | 	byte	$69, $67, $6a, $68, $68, $6a, $67, $6a, $68, $68, $68, $65, $68, $67, $68, $68
0cd22     66 67 68 67 
0cd26     6A 66 69 68 
0cd2a     65 56 64 4A 
0cd2e     4E 50 44 32 | 	byte	$66, $67, $68, $67, $6a, $66, $69, $68, $65, $56, $64, $4a, $4e, $50, $44, $32
0cd32     25 25 26 12 
0cd36     02 01 EA DC 
0cd3a     D0 CD C6 C4 
0cd3e     C0 B0 AA A2 | 	byte	$25, $25, $26, $12, $02, $01, $ea, $dc, $d0, $cd, $c6, $c4, $c0, $b0, $aa, $a2
0cd42     90 8D 8B 80 
0cd46     80 80 80 80 
0cd4a     80 80 80 80 
0cd4e     80 80 80 80 | 	byte	$90, $8d, $8b, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
0cd52     80 80 80 80 
0cd56     80 80 80 80 
0cd5a     80 80 80 80 | 	byte	$80[12]
0cd5e     84 8D 97 97 
0cd62     9B AA AB B7 
0cd66     BA BB D1 D8 
0cd6a     DD EB F4 F2 | 	byte	$84, $8d, $97, $97, $9b, $aa, $ab, $b7, $ba, $bb, $d1, $d8, $dd, $eb, $f4, $f2
0cd6e     F9 06 12 16 
0cd72     16 27 2F 30 
0cd76     3B 42 3F 4A 
0cd7a     55 59 5B 63 | 	byte	$f9, $06, $12, $16, $16, $27, $2f, $30, $3b, $42, $3f, $4a, $55, $59, $5b, $63
0cd7e     60 63 68 67 
0cd82     67 6A 68 68 
0cd86     69 67 68 67 
0cd8a     68 6A 67 69 | 	byte	$60, $63, $68, $67, $67, $6a, $68, $68, $69, $67, $68, $67, $68, $6a, $67, $69
0cd8e     68 68 69 67 
0cd92     6A 68 67 69 
0cd96     67 68 68 68 
0cd9a     69 67 68 68 | 	byte	$68, $68, $69, $67, $6a, $68, $67, $69, $67, $68, $68, $68, $69, $67, $68, $68
0cd9e     66 68 66 68 
0cda2     68 67 68 60 
0cda6     5C 58 52 4A 
0cdaa     44 45 3C 37 | 	byte	$66, $68, $66, $68, $68, $67, $68, $60, $5c, $58, $52, $4a, $44, $45, $3c, $37
0cdae     31 29 28 20 
0cdb2     1F 18 10 0A 
0cdb6     01 FF FD F4 
0cdba     EF E9 E3 D8 | 	byte	$31, $29, $28, $20, $1f, $18, $10, $0a, $01, $ff, $fd, $f4, $ef, $e9, $e3, $d8
0cdbe     D6 D6 CD CE 
0cdc2     C9 C1 BC B6 
0cdc6     AE A9 A7 A0 
0cdca     96 97 98 95 | 	byte	$d6, $d6, $cd, $ce, $c9, $c1, $bc, $b6, $ae, $a9, $a7, $a0, $96, $97, $98, $95
0cdce     96 8D 8A 8B 
0cdd2     84 83 80 80 
0cdd6     80 80 80 80 
0cdda     80 80 80 80 | 	byte	$96, $8d, $8a, $8b, $84, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
0cdde     80 80 80 80 
0cde2     80 80 80 80 
0cde6     80 80       | 	byte	$80[10]
0cde8     88 86 82 85 
0cdec     86 80 85 8D 
0cdf0     8F 94 97 A1 
0cdf4     AD B8 B9 B6 | 	byte	$88, $86, $82, $85, $86, $80, $85, $8d, $8f, $94, $97, $a1, $ad, $b8, $b9, $b6
0cdf8     B6 BB BE C2 
0cdfc     C4 C8 D3 D9 
0ce00     DF E9 EA F2 
0ce04     FA FB FA FB | 	byte	$b6, $bb, $be, $c2, $c4, $c8, $d3, $d9, $df, $e9, $ea, $f2, $fa, $fb, $fa, $fb
0ce08     03 06 05 02 
0ce0c     04 0C 15 17 
0ce10     16 13 19 19 
0ce14     1C 25 2F 2F | 	byte	$03, $06, $05, $02, $04, $0c, $15, $17, $16, $13, $19, $19, $1c, $25, $2f, $2f
0ce18     32 3B 3F 3C 
0ce1c     3C 3D 43 48 
0ce20     49 47 4C 53 
0ce24     54 58 59 57 | 	byte	$32, $3b, $3f, $3c, $3c, $3d, $43, $48, $49, $47, $4c, $53, $54, $58, $59, $57
0ce28     5A 5D 5F 65 
0ce2c     69 64 67 69 
0ce30     67 69 67 68 
0ce34     69 67 68 68 | 	byte	$5a, $5d, $5f, $65, $69, $64, $67, $69, $67, $69, $67, $68, $69, $67, $68, $68
0ce38     69 69 67 68 
0ce3c     65 68 68 67 
0ce40     69 68 68 68 
0ce44     67 69 68 68 | 	byte	$69, $69, $67, $68, $65, $68, $68, $67, $69, $68, $68, $68, $67, $69, $68, $68
0ce48     68 67 63 61 
0ce4c     5D 5C 5C 5B 
0ce50     5C 56 4F 4B 
0ce54     4C 4C 4B 46 | 	byte	$68, $67, $63, $61, $5d, $5c, $5c, $5b, $5c, $56, $4f, $4b, $4c, $4c, $4b, $46
0ce58     41 40 3D 38 
0ce5c     35 33 2F 2A 
0ce60     25 21 1C 18 
0ce64     12 0E 0A 07 | 	byte	$41, $40, $3d, $38, $35, $33, $2f, $2a, $25, $21, $1c, $18, $12, $0e, $0a, $07
0ce68     0A 04 FE FE 
0ce6c     01 00 FA F6 
0ce70     EA E1 DF E0 
0ce74     E2 DD D6 D1 | 	byte	$0a, $04, $fe, $fe, $01, $00, $fa, $f6, $ea, $e1, $df, $e0, $e2, $dd, $d6, $d1
0ce78     CC CC C5 BF 
0ce7c     BE C0 BF BB 
0ce80     B6 AD A7 A8 
0ce84     AB A8 A1 9D | 	byte	$cc, $cc, $c5, $bf, $be, $c0, $bf, $bb, $b6, $ad, $a7, $a8, $ab, $a8, $a1, $9d
0ce88     9F 9E 9D 98 
0ce8c     91 91 90 8E 
0ce90     8C 8F 90 8A 
0ce94     88 89 8C 8B | 	byte	$9f, $9e, $9d, $98, $91, $91, $90, $8e, $8c, $8f, $90, $8a, $88, $89, $8c, $8b
0ce98     89 88 8C 89 
0ce9c     8A 89 86 85 
0cea0     85 87 88 8B 
0cea4     8F 8C 8C 96 | 	byte	$89, $88, $8c, $89, $8a, $89, $86, $85, $85, $87, $88, $8b, $8f, $8c, $8c, $96
0cea8     9A 9E 9E 9E 
0ceac     9B 9E A0 A5 
0ceb0     AC AE AF B0 
0ceb4     B4 B7 B9 B8 | 	byte	$9a, $9e, $9e, $9e, $9b, $9e, $a0, $a5, $ac, $ae, $af, $b0, $b4, $b7, $b9, $b8
0ceb8     BB BD C0 C6 
0cebc     C9 CC CF D3 
0cec0     D9 DB DD E3 
0cec4     E8 EC EF F2 | 	byte	$bb, $bd, $c0, $c6, $c9, $cc, $cf, $d3, $d9, $db, $dd, $e3, $e8, $ec, $ef, $f2
0cec8     F5 FB FD 00 
0cecc     03 09 0C 0D 
0ced0     13 16 1A 1D 
0ced4     1E 1E 23 26 | 	byte	$f5, $fb, $fd, $00, $03, $09, $0c, $0d, $13, $16, $1a, $1d, $1e, $1e, $23, $26
0ced8     2A 2D 30 35 
0cedc     38 3A 3A 3E 
0cee0     3F 42 44 49 
0cee4     50 54 54 57 | 	byte	$2a, $2d, $30, $35, $38, $3a, $3a, $3e, $3f, $42, $44, $49, $50, $54, $54, $57
0cee8     59 58 5B 5C 
0ceec     5B 5F 62 65 
0cef0     67 68 68 69 
0cef4     67 65 62 63 | 	byte	$59, $58, $5b, $5c, $5b, $5f, $62, $65, $67, $68, $68, $69, $67, $65, $62, $63
0cef8     60 64 66 63 
0cefc     63 66 67 68 
0cf00     63 61 5C 5C 
0cf04     5D 5A 5C 5A | 	byte	$60, $64, $66, $63, $63, $66, $67, $68, $63, $61, $5c, $5c, $5d, $5a, $5c, $5a
0cf08     57 58 57 5A 
0cf0c     56 54 50 4C 
0cf10     48 46 46 45 
0cf14     42 40 3F 3D | 	byte	$57, $58, $57, $5a, $56, $54, $50, $4c, $48, $46, $46, $45, $42, $40, $3f, $3d
0cf18     3B 39 32 30 
0cf1c     2E 2D 2A 26 
0cf20     22 21 1B 1A 
0cf24     16 15 14 10 | 	byte	$3b, $39, $32, $30, $2e, $2d, $2a, $26, $22, $21, $1b, $1a, $16, $15, $14, $10
0cf28     09 07 04 01 
0cf2c     00 00 FE FE 
0cf30     FB F4 EF EF 
0cf34     E9 E5 E6 E2 | 	byte	$09, $07, $04, $01, $00, $00, $fe, $fe, $fb, $f4, $ef, $ef, $e9, $e5, $e6, $e2
0cf38     DD DB D7 D4 
0cf3c     CE CE CC C8 
0cf40     C7 C5 C6 C7 
0cf44     C5 C1 C1 BF | 	byte	$dd, $db, $d7, $d4, $ce, $ce, $cc, $c8, $c7, $c5, $c6, $c7, $c5, $c1, $c1, $bf
0cf48     C0 BE BF BC 
0cf4c     BA BF BC BB 
0cf50     B9 B8 BB BA 
0cf54     BC BB BE C1 | 	byte	$c0, $be, $bf, $bc, $ba, $bf, $bc, $bb, $b9, $b8, $bb, $ba, $bc, $bb, $be, $c1
0cf58     C1 C2 C7 C5 
0cf5c     C6 C9 CC CB 
0cf60     CE CE CD CB 
0cf64     CD CD CE CE | 	byte	$c1, $c2, $c7, $c5, $c6, $c9, $cc, $cb, $ce, $ce, $cd, $cb, $cd, $cd, $ce, $ce
0cf68     CD D0 D6 D7 
0cf6c     DA D9 DB DA 
0cf70     DE DF E3 E2 
0cf74     E2 E5 E5 E7 | 	byte	$cd, $d0, $d6, $d7, $da, $d9, $db, $da, $de, $df, $e3, $e2, $e2, $e5, $e5, $e7
0cf78     E8 E9 EE EC 
0cf7c     EC EF EF F0 
0cf80     F3 F4 F6 F6 
0cf84     F9 F5 F8 FA | 	byte	$e8, $e9, $ee, $ec, $ec, $ef, $ef, $f0, $f3, $f4, $f6, $f6, $f9, $f5, $f8, $fa
0cf88     F6 FB FD FF 
0cf8c     00 02 02 02 
0cf90     05 04 03 05 
0cf94     05 05 08 0D | 	byte	$f6, $fb, $fd, $ff, $00, $02, $02, $02, $05, $04, $03, $05, $05, $05, $08, $0d
0cf98     08 0A 0E 0F 
0cf9c     10 0F 13 11 
0cfa0     10 12 13 15 
0cfa4     13 12 12 14 | 	byte	$08, $0a, $0e, $0f, $10, $0f, $13, $11, $10, $12, $13, $15, $13, $12, $12, $14
0cfa8     14 13 13 16 
0cfac     17 18 13 13 
0cfb0     15 15 14 17 
0cfb4     1B 14 11 10 | 	byte	$14, $13, $13, $16, $17, $18, $13, $13, $15, $15, $14, $17, $1b, $14, $11, $10
0cfb8     0F 0D 0C 0F 
0cfbc     0C 0A 0E 0C 
0cfc0     0F 0E 08 07 
0cfc4     07 0A 0A 09 | 	byte	$0f, $0d, $0c, $0f, $0c, $0a, $0e, $0c, $0f, $0e, $08, $07, $07, $0a, $0a, $09
0cfc8     06 07 09 09 
0cfcc     0A 0B 09 09 
0cfd0     0C 0B 0D 09 
0cfd4     0B 0C 09 0B | 	byte	$06, $07, $09, $09, $0a, $0b, $09, $09, $0c, $0b, $0d, $09, $0b, $0c, $09, $0b
0cfd8     0D 0C 0B 09 
0cfdc     07 08 09 0E 
0cfe0     0B 0B 0B 0D 
0cfe4     0C 0E 0D 0D | 	byte	$0d, $0c, $0b, $09, $07, $08, $09, $0e, $0b, $0b, $0b, $0d, $0c, $0e, $0d, $0d
0cfe8     0E 0C 0B 0A 
0cfec     0C 0E 0E 09 
0cff0     0A 0A 0A 0B 
0cff4     08 0C 06 04 | 	byte	$0e, $0c, $0b, $0a, $0c, $0e, $0e, $09, $0a, $0a, $0a, $0b, $08, $0c, $06, $04
0cff8     02 02 02 02 
0cffc     02          | 	byte	$02[5]
0cffd     00 02 02 03 
0d001     FD FF FF FF 
0d005     FE FB FC F8 
0d009     FB FC FE FC | 	byte	$00, $02, $02, $03, $fd, $ff, $ff, $ff, $fe, $fb, $fc, $f8, $fb, $fc, $fe, $fc
0d00d     FC FF FE FE 
0d011     00 00 00 04 
0d015     01 01 02 02 
0d019     03 04 03 00 | 	byte	$fc, $ff, $fe, $fe, $00, $00, $00, $04, $01, $01, $02, $02, $03, $04, $03, $00
0d01d     FF 02 02 FF 
0d021     FF 00 00 00 
0d025     00 00 00 00 
0d029     00 05 05 00 | 	byte	$ff, $02, $02, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $05, $05, $00
0d02d     FF 00 00 00 
0d031     00 00 00 00 
0d035     00 00 00 00 
0d039     00 00 00 00 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d03d     00 00 00 00 
      ...             
0d05d     00 00 00 00 
0d061     00 00 00    | 	byte	$00[39]
0d064     0B 08 04 E6 
0d068     FA 00 06 0E 
0d06c     F6 00 04 13 
0d070     FB FD F5 05 | 	byte	$0b, $08, $04, $e6, $fa, $00, $06, $0e, $f6, $00, $04, $13, $fb, $fd, $f5, $05
0d074     0A FA 03 0B 
0d078     01 03 08 16 
0d07c     20 21 25 21 
0d080     2A 1E 1E 19 | 	byte	$0a, $fa, $03, $0b, $01, $03, $08, $16, $20, $21, $25, $21, $2a, $1e, $1e, $19
0d084     12 2E E2 1D 
0d088     45 33 04 39 
0d08c     2B 13 30 25 
0d090     30 33 30 26 | 	byte	$12, $2e, $e2, $1d, $45, $33, $04, $39, $2b, $13, $30, $25, $30, $33, $30, $26
0d094     23 24 14 15 
0d098     0D F8 F9 03 
0d09c     F9 EE E7 F1 
0d0a0     E5 E0 DA D5 | 	byte	$23, $24, $14, $15, $0d, $f8, $f9, $03, $f9, $ee, $e7, $f1, $e5, $e0, $da, $d5
0d0a4     D6 D3 C7 C8 
0d0a8     C1 C0 BA C4 
0d0ac     BC C5 B5 AB 
0d0b0     B0 B7 B3 BB | 	byte	$d6, $d3, $c7, $c8, $c1, $c0, $ba, $c4, $bc, $c5, $b5, $ab, $b0, $b7, $b3, $bb
0d0b4     D6 C7 CB BB 
0d0b8     BF EA DC DA 
0d0bc     C6 D8 E2 E0 
0d0c0     E3 F0 F5 FC | 	byte	$d6, $c7, $cb, $bb, $bf, $ea, $dc, $da, $c6, $d8, $e2, $e0, $e3, $f0, $f5, $fc
0d0c4     03 01 06 08 
0d0c8     07 0C 09 0B 
0d0cc     13 20 16 26 
0d0d0     27 2A 23 26 | 	byte	$03, $01, $06, $08, $07, $0c, $09, $0b, $13, $20, $16, $26, $27, $2a, $23, $26
0d0d4     25 30 3C 3A 
0d0d8     39 4B 49 4A 
0d0dc     4B 45 4A 55 
0d0e0     45 51 48 4B | 	byte	$25, $30, $3c, $3a, $39, $4b, $49, $4a, $4b, $45, $4a, $55, $45, $51, $48, $4b
0d0e4     4E 39 34 2F 
0d0e8     5A 5C 16 49 
0d0ec     1D 2A 2D 2E 
0d0f0     1E 10 0E 46 | 	byte	$4e, $39, $34, $2f, $5a, $5c, $16, $49, $1d, $2a, $2d, $2e, $1e, $10, $0e, $46
0d0f4     12 9A 0E 04 
0d0f8     F1 F0 E8 E7 
0d0fc     E0 E4 D4 D3 
0d100     CE CE C2 B6 | 	byte	$12, $9a, $0e, $04, $f1, $f0, $e8, $e7, $e0, $e4, $d4, $d3, $ce, $ce, $c2, $b6
0d104     C2 BE B5 AE 
0d108     A8 A6 9E A0 
0d10c     A0 A4 A2 A0 
0d110     B0 A6 D0 82 | 	byte	$c2, $be, $b5, $ae, $a8, $a6, $9e, $a0, $a0, $a4, $a2, $a0, $b0, $a6, $d0, $82
0d114     BD B7 D2 96 
0d118     BC 08 88 D5 
0d11c     96 B3 09 A4 
0d120     E9 BD 8F E7 | 	byte	$bd, $b7, $d2, $96, $bc, $08, $88, $d5, $96, $b3, $09, $a4, $e9, $bd, $8f, $e7
0d124     BC D0 D3 E5 
0d128     E2 E6 ED F0 
0d12c     FC F9 05 13 
0d130     1B 20 2B 35 | 	byte	$bc, $d0, $d3, $e5, $e2, $e6, $ed, $f0, $fc, $f9, $05, $13, $1b, $20, $2b, $35
0d134     41 48 45 44 
0d138     54 58 5C 51 
0d13c     63 6A 5A 5B 
0d140     6D 65 68 69 | 	byte	$41, $48, $45, $44, $54, $58, $5c, $51, $63, $6a, $5a, $5b, $6d, $65, $68, $69
0d144     6B 78 45 61 
0d148     74 5A 5C 66 
0d14c     4B 53 59 32 
0d150     58 21 4E 4B | 	byte	$6b, $78, $45, $61, $74, $5a, $5c, $66, $4b, $53, $59, $32, $58, $21, $4e, $4b
0d154     24 20 32 30 
0d158     20 1A 10 14 
0d15c     05 F5 F2 F1 
0d160     F3 DE E0 E4 | 	byte	$24, $20, $32, $30, $20, $1a, $10, $14, $05, $f5, $f2, $f1, $f3, $de, $e0, $e4
0d164     D8 D0 BF B0 
0d168     BB AE 9C A2 
0d16c     A7 A8 A8 98 
0d170     A0 A5 A0 97 | 	byte	$d8, $d0, $bf, $b0, $bb, $ae, $9c, $a2, $a7, $a8, $a8, $98, $a0, $a5, $a0, $97
0d174     A2 84 BB B3 
0d178     BF 82 BD B9 
0d17c     97 90 FD BA 
0d180     A0 CC 04 9E | 	byte	$a2, $84, $bb, $b3, $bf, $82, $bd, $b9, $97, $90, $fd, $ba, $a0, $cc, $04, $9e
0d184     00 B2 DB D8 
0d188     DB 0E DB 1E 
0d18c     DD 00 F4 0F 
0d190     FD 32 0C 0E | 	byte	$00, $b2, $db, $d8, $db, $0e, $db, $1e, $dd, $00, $f4, $0f, $fd, $32, $0c, $0e
0d194     32 27 41 39 
0d198     41 49 5A 54 
0d19c     4A 4E 30 7F 
0d1a0     53 32 7F 7F | 	byte	$32, $27, $41, $39, $41, $49, $5a, $54, $4a, $4e, $30, $7f, $53, $32, $7f, $7f
0d1a4     47 30 7F 35 
0d1a8     67 70 F6 7A 
0d1ac     7F 20 48 60 
0d1b0     FB 7F 7F D5 | 	byte	$47, $30, $7f, $35, $67, $70, $f6, $7a, $7f, $20, $48, $60, $fb, $7f, $7f, $d5
0d1b4     38 F8 26 DB 
0d1b8     50 37 D8 0A 
0d1bc     2C CC FD E3 
0d1c0     C0 FD DD 0A | 	byte	$38, $f8, $26, $db, $50, $37, $d8, $0a, $2c, $cc, $fd, $e3, $c0, $fd, $dd, $0a
0d1c4     D4 8E E7 FD 
0d1c8     92 EA BE DD 
0d1cc     C7 82 AD 86 
0d1d0     EF 82 A3 84 | 	byte	$d4, $8e, $e7, $fd, $92, $ea, $be, $dd, $c7, $82, $ad, $86, $ef, $82, $a3, $84
0d1d4     D9 B7 85 CE 
0d1d8     84 C4 BB B1 
0d1dc     FA 83 B4 BA 
0d1e0     CA E3 80 38 | 	byte	$d9, $b7, $85, $ce, $84, $c4, $bb, $b1, $fa, $83, $b4, $ba, $ca, $e3, $80, $38
0d1e4     D7 0A F3 B1 
0d1e8     E7 96 58 A2 
0d1ec     0F E8 F1 E0 
0d1f0     7F 36 E8 7F | 	byte	$d7, $0a, $f3, $b1, $e7, $96, $58, $a2, $0f, $e8, $f1, $e0, $7f, $36, $e8, $7f
0d1f4     E8 20 2C 56 
0d1f8     F9 70 5B DB 
0d1fc     6C 7F 11 09 
0d200     5E 47 4D 00 | 	byte	$e8, $20, $2c, $56, $f9, $70, $5b, $db, $6c, $7f, $11, $09, $5e, $47, $4d, $00
0d204     4F 70 73 46 
0d208     51 0E 28 5A 
0d20c     45 60 0B 45 
0d210     2C 22 33 2C | 	byte	$4f, $70, $73, $46, $51, $0e, $28, $5a, $45, $60, $0b, $45, $2c, $22, $33, $2c
0d214     52 65 28 BB 
0d218     60 7A 88 58 
0d21c     46 FA DF D6 
0d220     2E 00 CB FB | 	byte	$52, $65, $28, $bb, $60, $7a, $88, $58, $46, $fa, $df, $d6, $2e, $00, $cb, $fb
0d224     04 0F EE D9 
0d228     02 BE A8 53 
0d22c     9C 08 9A F0 
0d230     58 91 F2 E6 | 	byte	$04, $0f, $ee, $d9, $02, $be, $a8, $53, $9c, $08, $9a, $f0, $58, $91, $f2, $e6
0d234     30 90 00 C9 
0d238     1E 82 21 2D 
0d23c     D4 CB E0 E2 
0d240     CC 3E B2 33 | 	byte	$30, $90, $00, $c9, $1e, $82, $21, $2d, $d4, $cb, $e0, $e2, $cc, $3e, $b2, $33
0d244     30 B9 ED 90 
0d248     FB C3 B0 09 
0d24c     EF EE B6 D3 
0d250     D0 FB FE A0 | 	byte	$30, $b9, $ed, $90, $fb, $c3, $b0, $09, $ef, $ee, $b6, $d3, $d0, $fb, $fe, $a0
0d254     B9 CD 4E B6 
0d258     02 0F B0 06 
0d25c     86 81 4B FD 
0d260     8F D6 49 12 | 	byte	$b9, $cd, $4e, $b6, $02, $0f, $b0, $06, $86, $81, $4b, $fd, $8f, $d6, $49, $12
0d264     AA 80 53 07 
0d268     C6 00 A9 1B 
0d26c     EE F8 EE F5 
0d270     FC 10 2F D7 | 	byte	$aa, $80, $53, $07, $c6, $00, $a9, $1b, $ee, $f8, $ee, $f5, $fc, $10, $2f, $d7
0d274     30 E4 2E 21 
0d278     09 2A 59 21 
0d27c     08 00 73 69 
0d280     3D 28 F1 7F | 	byte	$30, $e4, $2e, $21, $09, $2a, $59, $21, $08, $00, $73, $69, $3d, $28, $f1, $7f
0d284     7F F8 6C 43 
0d288     39 4B 0C 73 
0d28c     7F ED 37 48 
0d290     79 F5 1E 6E | 	byte	$7f, $f8, $6c, $43, $39, $4b, $0c, $73, $7f, $ed, $37, $48, $79, $f5, $1e, $6e
0d294     FC 0F 5A F3 
0d298     1E 1D 1B 15 
0d29c     2D E6 3C E1 
0d2a0     17 09 EE DC | 	byte	$fc, $0f, $5a, $f3, $1e, $1d, $1b, $15, $2d, $e6, $3c, $e1, $17, $09, $ee, $dc
0d2a4     23 E6 C2 E5 
0d2a8     FC DB C0 E2 
0d2ac     FC A6 BD C8 
0d2b0     CB DE 82 C4 | 	byte	$23, $e6, $c2, $e5, $fc, $db, $c0, $e2, $fc, $a6, $bd, $c8, $cb, $de, $82, $c4
0d2b4     D2 8A B6 AB 
0d2b8     B0 AC B3 86 
0d2bc     AA BF D9 A5 
0d2c0     B0 D7 A0 A6 | 	byte	$d2, $8a, $b6, $ab, $b0, $ac, $b3, $86, $aa, $bf, $d9, $a5, $b0, $d7, $a0, $a6
0d2c4     ED B2 C5 D9 
0d2c8     CB CF D5 10 
0d2cc     BA E2 DB D9 
0d2d0     1C E0 F7 D5 | 	byte	$ed, $b2, $c5, $d9, $cb, $cf, $d5, $10, $ba, $e2, $db, $d9, $1c, $e0, $f7, $d5
0d2d4     27 EE FB E3 
0d2d8     56 F3 F6 60 
0d2dc     06 21 23 47 
0d2e0     1C 3E 1E 65 | 	byte	$27, $ee, $fb, $e3, $56, $f3, $f6, $60, $06, $21, $23, $47, $1c, $3e, $1e, $65
0d2e4     20 60 3F 43 
0d2e8     30 6B 53 38 
0d2ec     6D 42 4C 47 
0d2f0     5C 2B 74 30 | 	byte	$20, $60, $3f, $43, $30, $6b, $53, $38, $6d, $42, $4c, $47, $5c, $2b, $74, $30
0d2f4     54 4B 22 7F 
0d2f8     40 4C 12 48 
0d2fc     46 0B 58 ED 
0d300     29 36 27 FA | 	byte	$54, $4b, $22, $7f, $40, $4c, $12, $48, $46, $0b, $58, $ed, $29, $36, $27, $fa
0d304     13 0E 16 FB 
0d308     12 D4 CC 37 
0d30c     B9 D5 E3 EF 
0d310     B0 E0 C9 A6 | 	byte	$13, $0e, $16, $fb, $12, $d4, $cc, $37, $b9, $d5, $e3, $ef, $b0, $e0, $c9, $a6
0d314     F7 B9 A9 AF 
0d318     EA A4 06 84 
0d31c     BB BD A0 83 
0d320     B7 D1 84 BB | 	byte	$f7, $b9, $a9, $af, $ea, $a4, $06, $84, $bb, $bd, $a0, $83, $b7, $d1, $84, $bb
0d324     CA 80 CF 82 
0d328     D2 B8 8B 94 
0d32c     AE 19 94 C2 
0d330     D0 9A 00 9A | 	byte	$ca, $80, $cf, $82, $d2, $b8, $8b, $94, $ae, $19, $94, $c2, $d0, $9a, $00, $9a
0d334     F0 EF BC 20 
0d338     D0 0A B0 24 
0d33c     EE EF FD 3F 
0d340     03 E8 67 52 | 	byte	$f0, $ef, $bc, $20, $d0, $0a, $b0, $24, $ee, $ef, $fd, $3f, $03, $e8, $67, $52
0d344     C6 32 59 F1 
0d348     1D 59 35 44 
0d34c     17 3C 7F 32 
0d350     56 4D 41 5A | 	byte	$c6, $32, $59, $f1, $1d, $59, $35, $44, $17, $3c, $7f, $32, $56, $4d, $41, $5a
0d354     68 49 52 48 
0d358     41 7F 2A 4E 
0d35c     14 70 33 1C 
0d360     68 43 11 47 | 	byte	$68, $49, $52, $48, $41, $7f, $2a, $4e, $14, $70, $33, $1c, $68, $43, $11, $47
0d364     46 05 57 0B 
0d368     20 26 2E F1 
0d36c     DA 4E 3A CE 
0d370     F0 F8 1F 91 | 	byte	$46, $05, $57, $0b, $20, $26, $2e, $f1, $da, $4e, $3a, $ce, $f0, $f8, $1f, $91
0d374     3C B0 F3 09 
0d378     A4 1A B6 BB 
0d37c     DC A4 F8 D7 
0d380     C8 D6 B6 96 | 	byte	$3c, $b0, $f3, $09, $a4, $1a, $b6, $bb, $dc, $a4, $f8, $d7, $c8, $d6, $b6, $96
0d384     EC F9 82 D0 
0d388     CD BF D5 CB 
0d38c     AA C4 C6 E7 
0d390     CB D0 C2 C2 | 	byte	$ec, $f9, $82, $d0, $cd, $bf, $d5, $cb, $aa, $c4, $c6, $e7, $cb, $d0, $c2, $c2
0d394     F5 C0 CF 9C 
0d398     43 AE CB F6 
0d39c     3D BE CA 42 
0d3a0     D7 CC FD 24 | 	byte	$f5, $c0, $cf, $9c, $43, $ae, $cb, $f6, $3d, $be, $ca, $42, $d7, $cc, $fd, $24
0d3a4     DA 1E 39 A2 
0d3a8     00 F6 44 20 
0d3ac     02 2A 20 04 
0d3b0     4E 10 00 38 | 	byte	$da, $1e, $39, $a2, $00, $f6, $44, $20, $02, $2a, $20, $04, $4e, $10, $00, $38
0d3b4     3D 00 2B 45 
0d3b8     20 00 58 2C 
0d3bc     31 31 50 06 
0d3c0     43 2E 30 20 | 	byte	$3d, $00, $2b, $45, $20, $00, $58, $2c, $31, $31, $50, $06, $43, $2e, $30, $20
0d3c4     6B F8 4A 1A 
0d3c8     04 2A 22 55 
0d3cc     DE 5C E6 18 
0d3d0     23 1E 1B 11 | 	byte	$6b, $f8, $4a, $1a, $04, $2a, $22, $55, $de, $5c, $e6, $18, $23, $1e, $1b, $11
0d3d4     00 38 D8 3C 
0d3d8     03 D2 22 09 
0d3dc     F9 D8 21 C8 
0d3e0     EF 05 FA CB | 	byte	$00, $38, $d8, $3c, $03, $d2, $22, $09, $f9, $d8, $21, $c8, $ef, $05, $fa, $cb
0d3e4     02 20 C8 E6 
0d3e8     39 BB D4 FE 
0d3ec     E5 A6 44 04 
0d3f0     B0 FE E0 FC | 	byte	$02, $20, $c8, $e6, $39, $bb, $d4, $fe, $e5, $a6, $44, $04, $b0, $fe, $e0, $fc
0d3f4     B8 22 FD AA 
0d3f8     F0 E0 0D 3A 
0d3fc     E3 B3 0C 00 
0d400     18 C0 02 2A | 	byte	$b8, $22, $fd, $aa, $f0, $e0, $0d, $3a, $e3, $b3, $0c, $00, $18, $c0, $02, $2a
0d404     E0 F2 FD 19 
0d408     F7 1D EB BF 
0d40c     3A F9 0B 02 
0d410     33 F7 A9 3C | 	byte	$e0, $f2, $fd, $19, $f7, $1d, $eb, $bf, $3a, $f9, $0b, $02, $33, $f7, $a9, $3c
0d414     18 E0 3A F4 
0d418     F3 26 E9 EE 
0d41c     0E 55 F0 E6 
0d420     F3 48 D3 E2 | 	byte	$18, $e0, $3a, $f4, $f3, $26, $e9, $ee, $0e, $55, $f0, $e6, $f3, $48, $d3, $e2
0d424     42 09 F9 10 
0d428     0D 0B 06 E9 
0d42c     13 E0 0F EB 
0d430     11 1A C0 0A | 	byte	$42, $09, $f9, $10, $0d, $0b, $06, $e9, $13, $e0, $0f, $eb, $11, $1a, $c0, $0a
0d434     01 B4 28 C2 
0d438     10 FA D3 F3 
0d43c     BF 34 BA F2 
0d440     0A E6 1D D0 | 	byte	$01, $b4, $28, $c2, $10, $fa, $d3, $f3, $bf, $34, $ba, $f2, $0a, $e6, $1d, $d0
0d444     09 E1 F6 E3 
0d448     EB 04 1B B9 
0d44c     3B 1C D5 1E 
0d450     02 EC 0E 1C | 	byte	$09, $e1, $f6, $e3, $eb, $04, $1b, $b9, $3b, $1c, $d5, $1e, $02, $ec, $0e, $1c
0d454     BF 0B 67 F1 
0d458     D1 27 F9 F8 
0d45c     01 17 00 07 
0d460     02 0C 10 20 | 	byte	$bf, $0b, $67, $f1, $d1, $27, $f9, $f8, $01, $17, $00, $07, $02, $0c, $10, $20
0d464     D5 24 45 B0 
0d468     27 10 06 00 
0d46c     0E 14 22 0D 
0d470     DC 40 48 D7 | 	byte	$d5, $24, $45, $b0, $27, $10, $06, $00, $0e, $14, $22, $0d, $dc, $40, $48, $d7
0d474     06 30 E0 0D 
0d478     F6 27 05 C8 
0d47c     D5 FA 49 DD 
0d480     EF 33 A6 0D | 	byte	$06, $30, $e0, $0d, $f6, $27, $05, $c8, $d5, $fa, $49, $dd, $ef, $33, $a6, $0d
0d484     EF 4A 9B F0 
0d488     20 E0 BE 3E 
0d48c     D7 DE 15 D3 
0d490     1C DE DC 06 | 	byte	$ef, $4a, $9b, $f0, $20, $e0, $be, $3e, $d7, $de, $15, $d3, $1c, $de, $dc, $06
0d494     F3 D8 C5 39 
0d498     A3 FD 05 1C 
0d49c     B5 C5 38 C8 
0d4a0     E2 E2 28 D8 | 	byte	$f3, $d8, $c5, $39, $a3, $fd, $05, $1c, $b5, $c5, $38, $c8, $e2, $e2, $28, $d8
0d4a4     04 15 D5 04 
0d4a8     FB 03 13 D4 
0d4ac     14 06 0D D7 
0d4b0     38 FA 0A 18 | 	byte	$04, $15, $d5, $04, $fb, $03, $13, $d4, $14, $06, $0d, $d7, $38, $fa, $0a, $18
0d4b4     E7 20 4C E6 
0d4b8     DC 4B 06 F2 
0d4bc     29 00 2D 01 
0d4c0     37 C5 44 0F | 	byte	$e7, $20, $4c, $e6, $dc, $4b, $06, $f2, $29, $00, $2d, $01, $37, $c5, $44, $0f
0d4c4     2C C5 18 39 
0d4c8     01 02 2E 14 
0d4cc     20 EA 14 20 
0d4d0     E4 22 F5 11 | 	byte	$2c, $c5, $18, $39, $01, $02, $2e, $14, $20, $ea, $14, $20, $e4, $22, $f5, $11
0d4d4     FB 0C 16 13 
0d4d8     D1 27 E7 FB 
0d4dc     FA FE 10 D1 
0d4e0     2E F1 E1 01 | 	byte	$fb, $0c, $16, $13, $d1, $27, $e7, $fb, $fa, $fe, $10, $d1, $2e, $f1, $e1, $01
0d4e4     40 B7 D0 32 
0d4e8     E6 F6 DA F6 
0d4ec     F5 CD FC ED 
0d4f0     0C B2 20 C7 | 	byte	$40, $b7, $d0, $32, $e6, $f6, $da, $f6, $f5, $cd, $fc, $ed, $0c, $b2, $20, $c7
0d4f4     FA 2F 96 10 
0d4f8     01 BC 34 D7 
0d4fc     D6 31 C2 04 
0d500     EE 0A FC E5 | 	byte	$fa, $2f, $96, $10, $01, $bc, $34, $d7, $d6, $31, $c2, $04, $ee, $0a, $fc, $e5
0d504     06 28 CB E8 
0d508     21 14 EB F1 
0d50c     2B F3 F2 2E 
0d510     E5 3D D8 3C | 	byte	$06, $28, $cb, $e8, $21, $14, $eb, $f1, $2b, $f3, $f2, $2e, $e5, $3d, $d8, $3c
0d514     D0 52 18 E0 
0d518     20 33 F8 0B 
0d51c     29 12 10 05 
0d520     1A 00 15 FD | 	byte	$d0, $52, $18, $e0, $20, $33, $f8, $0b, $29, $12, $10, $05, $1a, $00, $15, $fd
0d524     20 36 E6 39 
0d528     1F ED 50 FD 
0d52c     FC 43 ED E0 
0d530     64 A4 0A FB | 	byte	$20, $36, $e6, $39, $1f, $ed, $50, $fd, $fc, $43, $ed, $e0, $64, $a4, $0a, $fb
0d534     44 98 26 0E 
0d538     E8 E0 1A EF 
0d53c     CA 3A BF F6 
0d540     34 90 1D D0 | 	byte	$44, $98, $26, $0e, $e8, $e0, $1a, $ef, $ca, $3a, $bf, $f6, $34, $90, $1d, $d0
0d544     EA 15 A4 22 
0d548     EB C2 E7 F7 
0d54c     F8 E5 E0 C1 
0d550     D9 F8 0A C0 | 	byte	$ea, $15, $a4, $22, $eb, $c2, $e7, $f7, $f8, $e5, $e0, $c1, $d9, $f8, $0a, $c0
0d554     0C F0 FA B0 
0d558     30 0A B0 F1 
0d55c     03 DE 0E 00 
0d560     D4 23 CC 22 | 	byte	$0c, $f0, $fa, $b0, $30, $0a, $b0, $f1, $03, $de, $0e, $00, $d4, $23, $cc, $22
0d564     07 CE 02 0E 
0d568     1B E0 0B 03 
0d56c     10 23 E8 22 
0d570     23 AA 40 2C | 	byte	$07, $ce, $02, $0e, $1b, $e0, $0b, $03, $10, $23, $e8, $22, $23, $aa, $40, $2c
0d574     E3 18 09 19 
0d578     18 DE 20 20 
0d57c     00 FA 1A 34 
0d580     D8 1B FB 25 | 	byte	$e3, $18, $09, $19, $18, $de, $20, $20, $00, $fa, $1a, $34, $d8, $1b, $fb, $25
0d584     14 09 EA E9 
0d588     2E F4 F7 06 
0d58c     EC 18 01 05 
0d590     FD FB 08 AC | 	byte	$14, $09, $ea, $e9, $2e, $f4, $f7, $06, $ec, $18, $01, $05, $fd, $fb, $08, $ac
0d594     56 E2 10 E8 
0d598     F8 17 F0 A2 
0d59c     2C 3B 90 2D 
0d5a0     E0 FE CC F6 | 	byte	$56, $e2, $10, $e8, $f8, $17, $f0, $a2, $2c, $3b, $90, $2d, $e0, $fe, $cc, $f6
0d5a4     D0 10 D3 FD 
0d5a8     14 90 18 F5 
0d5ac     DE E6 09 EB 
0d5b0     E6 D3 E3 4E | 	byte	$d0, $10, $d3, $fd, $14, $90, $18, $f5, $de, $e6, $09, $eb, $e6, $d3, $e3, $4e
0d5b4     A2 F9 14 B8 
0d5b8     1E F3 D6 1A 
0d5bc     EC DE 20 17 
0d5c0     E2 28 D0 0D | 	byte	$a2, $f9, $14, $b8, $1e, $f3, $d6, $1a, $ec, $de, $20, $17, $e2, $28, $d0, $0d
0d5c4     1B F2 FE F8 
0d5c8     27 00 00 36 
0d5cc     FD 06 EA 24 
0d5d0     E7 12 22 FC | 	byte	$1b, $f2, $fe, $f8, $27, $00, $00, $36, $fd, $06, $ea, $24, $e7, $12, $22, $fc
0d5d4     0A 22 F3 25 
0d5d8     F7 1D 25 F1 
0d5dc     10 16 12 FA 
0d5e0     20 00 27 DD | 	byte	$0a, $22, $f3, $25, $f7, $1d, $25, $f1, $10, $16, $12, $fa, $20, $00, $27, $dd
0d5e4     25 02 ED 18 
0d5e8     11 00 02 20 
0d5ec     E0 F5 3D DE 
0d5f0     35 E3 F6 3C | 	byte	$25, $02, $ed, $18, $11, $00, $02, $20, $e0, $f5, $3d, $de, $35, $e3, $f6, $3c
0d5f4     AD 11 0A EE 
0d5f8     33 C1 F1 2D 
0d5fc     ED F8 11 D4 
0d600     26 D7 04 12 | 	byte	$ad, $11, $0a, $ee, $33, $c1, $f1, $2d, $ed, $f8, $11, $d4, $26, $d7, $04, $12
0d604     F0 12 CC 10 
0d608     0D E7 E5 F6 
0d60c     20 D3 ED 08 
0d610     F2 DE 10 E4 | 	byte	$f0, $12, $cc, $10, $0d, $e7, $e5, $f6, $20, $d3, $ed, $08, $f2, $de, $10, $e4
0d614     E9 34 E0 F0 
0d618     02 12 E3 13 
0d61c     0E 00 F5 15 
0d620     F1 FD F5 15 | 	byte	$e9, $34, $e0, $f0, $02, $12, $e3, $13, $0e, $00, $f5, $15, $f1, $fd, $f5, $15
0d624     08 D4 29 E2 
0d628     06 02 2E E8 
0d62c     1D D5 0E 0D 
0d630     02 FB 03 2D | 	byte	$08, $d4, $29, $e2, $06, $02, $2e, $e8, $1d, $d5, $0e, $0d, $02, $fb, $03, $2d
0d634     0A F2 14 FA 
0d638     FC 28 F4 F4 
0d63c     09 17 E9 11 
0d640     0B 12 E7 24 | 	byte	$0a, $f2, $14, $fa, $fc, $28, $f4, $f4, $09, $17, $e9, $11, $0b, $12, $e7, $24
0d644     15 FC 12 E1 
0d648     0E F1 29 C6 
0d64c     18 08 F9 F8 
0d650     F9 15 EF DC | 	byte	$15, $fc, $12, $e1, $0e, $f1, $29, $c6, $18, $08, $f9, $f8, $f9, $15, $ef, $dc
0d654     11 F8 03 E4 
0d658     0B F7 F7 DD 
0d65c     FA EC 05 08 
0d660     E4 F4 F8 FE | 	byte	$11, $f8, $03, $e4, $0b, $f7, $f7, $dd, $fa, $ec, $05, $08, $e4, $f4, $f8, $fe
0d664     F9 F2 EB 02 
0d668     E8 E3 27 09 
0d66c     BA 18 F0 11 
0d670     DA 02 EF 09 | 	byte	$f9, $f2, $eb, $02, $e8, $e3, $27, $09, $ba, $18, $f0, $11, $da, $02, $ef, $09
0d674     EF ED 04 FB 
0d678     F0 09 FB ED 
0d67c     FA F0 F8 09 
0d680     F6 00 E7 18 | 	byte	$ef, $ed, $04, $fb, $f0, $09, $fb, $ed, $fa, $f0, $f8, $09, $f6, $00, $e7, $18
0d684     05 EE 01 EF 
0d688     FB 1A E0 08 
0d68c     FE FC 0B FA 
0d690     05 0D 03 18 | 	byte	$05, $ee, $01, $ef, $fb, $1a, $e0, $08, $fe, $fc, $0b, $fa, $05, $0d, $03, $18
0d694     F3 03 08 EB 
0d698     17 F9 FD F1 
0d69c     00 10 E7 12 
0d6a0     EF 14 F9 05 | 	byte	$f3, $03, $08, $eb, $17, $f9, $fd, $f1, $00, $10, $e7, $12, $ef, $14, $f9, $05
0d6a4     02 E9 1A F6 
0d6a8     03 F5 01 06 
0d6ac     E8 0B 03 F6 
0d6b0     F6 0C F1 FE | 	byte	$02, $e9, $1a, $f6, $03, $f5, $01, $06, $e8, $0b, $03, $f6, $f6, $0c, $f1, $fe
0d6b4     F8 00 F9 F5 
0d6b8     16 ED DD 26 
0d6bc     E2 00 FC F2 
0d6c0     03 F2 D5 05 | 	byte	$f8, $00, $f9, $f5, $16, $ed, $dd, $26, $e2, $00, $fc, $f2, $03, $f2, $d5, $05
0d6c4     1C E9 FC F1 
0d6c8     F4 07 E7 FB 
0d6cc     08 F6 FC FE 
0d6d0     E4 19 F8 FB | 	byte	$1c, $e9, $fc, $f1, $f4, $07, $e7, $fb, $08, $f6, $fc, $fe, $e4, $19, $f8, $fb
0d6d4     0C F7 08 09 
0d6d8     E7 07 00 F0 
0d6dc     05 15 0A EF 
0d6e0     0A FB 00 22 | 	byte	$0c, $f7, $08, $09, $e7, $07, $00, $f0, $05, $15, $0a, $ef, $0a, $fb, $00, $22
0d6e4     E1 06 20 FC 
0d6e8     00 18 02 00 
0d6ec     0F 06 F8 1C 
0d6f0     16 00 FA 26 | 	byte	$e1, $06, $20, $fc, $00, $18, $02, $00, $0f, $06, $f8, $1c, $16, $00, $fa, $26
0d6f4     F8 F5 0B 09 
0d6f8     02 21 D2 1D 
0d6fc     14 F0 15 FC 
0d700     FD 0C 0F E5 | 	byte	$f8, $f5, $0b, $09, $02, $21, $d2, $1d, $14, $f0, $15, $fc, $fd, $0c, $0f, $e5
0d704     06 12 08 EE 
0d708     0E 00 F5 03 
0d70c     07 EC 10 FA 
0d710     F0 11 F3 F6 | 	byte	$06, $12, $08, $ee, $0e, $00, $f5, $03, $07, $ec, $10, $fa, $f0, $11, $f3, $f6
0d714     F8 09 E7 07 
0d718     DB 16 0D E9 
0d71c     02 E4 2E D7 
0d720     F0 F8 FE FC | 	byte	$f8, $09, $e7, $07, $db, $16, $0d, $e9, $02, $e4, $2e, $d7, $f0, $f8, $fe, $fc
0d724     02 00 00 12 
0d728     E8 08 FA FA 
0d72c     00 F7 FB 03 
0d730     02 00 E6 18 | 	byte	$02, $00, $00, $12, $e8, $08, $fa, $fa, $00, $f7, $fb, $03, $02, $00, $e6, $18
0d734     02 FD 15 FA 
0d738     FA FE 08 0D 
0d73c     F8 09 10 01 
0d740     05 14 FA 00 | 	byte	$02, $fd, $15, $fa, $fa, $fe, $08, $0d, $f8, $09, $10, $01, $05, $14, $fa, $00
0d744     1E E8 1A 0B 
0d748     F7 12 F3 25 
0d74c     FA 10 05 00 
0d750     12 06 F7 1B | 	byte	$1e, $e8, $1a, $0b, $f7, $12, $f3, $25, $fa, $10, $05, $00, $12, $06, $f7, $1b
0d754     08 F2 1B FC 
0d758     FC 19 EE 14 
0d75c     00 DC 26 00 
0d760     F1 04 19 F2 | 	byte	$08, $f2, $1b, $fc, $fc, $19, $ee, $14, $00, $dc, $26, $00, $f1, $04, $19, $f2
0d764     00 03 F9 0A 
0d768     0B EA 0D 03 
0d76c     F1 05 E0 18 
0d770     F0 F5 F9 F8 | 	byte	$00, $03, $f9, $0a, $0b, $ea, $0d, $03, $f1, $05, $e0, $18, $f0, $f5, $f9, $f8
0d774     FA 06 E8 06 
0d778     EF F9 F7 FB 
0d77c     F7 ED F2 FB 
0d780     03 FA FB FD | 	byte	$fa, $06, $e8, $06, $ef, $f9, $f7, $fb, $f7, $ed, $f2, $fb, $03, $fa, $fb, $fd
0d784     F2 00 00 EE 
0d788     FB 00 F2 F3 
0d78c     00 08 E2 08 
0d790     FC F6 00 EE | 	byte	$f2, $00, $00, $ee, $fb, $00, $f2, $f3, $00, $08, $e2, $08, $fc, $f6, $00, $ee
0d794     0D 08 F0 00 
0d798     02 EE 06 04 
0d79c     E8 07 04 0B 
0d7a0     F1 11 E8 00 | 	byte	$0d, $08, $f0, $00, $02, $ee, $06, $04, $e8, $07, $04, $0b, $f1, $11, $e8, $00
0d7a4     13 ED 0E 08 
0d7a8     08 E6 10 06 
0d7ac     E9 10 0D F9 
0d7b0     04 09 F2 09 | 	byte	$13, $ed, $0e, $08, $08, $e6, $10, $06, $e9, $10, $0d, $f9, $04, $09, $f2, $09
0d7b4     07 00 F6 FA 
0d7b8     17 02 E5 0D 
0d7bc     F2 02 F6 00 
0d7c0     16 EE 10 E7 | 	byte	$07, $00, $f6, $fa, $17, $02, $e5, $0d, $f2, $02, $f6, $00, $16, $ee, $10, $e7
0d7c4     F9 00 FB F0 
0d7c8     01 04 FB EE 
0d7cc     FE FC F0 02 
0d7d0     EE 03 04 F0 | 	byte	$f9, $00, $fb, $f0, $01, $04, $fb, $ee, $fe, $fc, $f0, $02, $ee, $03, $04, $f0
0d7d4     FA FC 08 E0 
0d7d8     07 F7 F4 09 
0d7dc     ED 00 F8 FB 
0d7e0     00 EE 0A F0 | 	byte	$fa, $fc, $08, $e0, $07, $f7, $f4, $09, $ed, $00, $f8, $fb, $00, $ee, $0a, $f0
0d7e4     08 EA 04 F7 
0d7e8     F8 01 F6 00 
0d7ec     FD FB 04 F7 
0d7f0     08 FB F1 00 | 	byte	$08, $ea, $04, $f7, $f8, $01, $f6, $00, $fd, $fb, $04, $f7, $08, $fb, $f1, $00
0d7f4     0A 08 ED 0D 
0d7f8     05 F4 0C F6 
0d7fc     0B 06 05 03 
0d800     01 02 0A 01 | 	byte	$0a, $08, $ed, $0d, $05, $f4, $0c, $f6, $0b, $06, $05, $03, $01, $02, $0a, $01
0d804     08 06 0E F6 
0d808     14 FB 03 0A 
0d80c     00 15 00 06 
0d810     0B 08 03 05 | 	byte	$08, $06, $0e, $f6, $14, $fb, $03, $0a, $00, $15, $00, $06, $0b, $08, $03, $05
0d814     FE 0E 0A F8 
0d818     07 05 00 0A 
0d81c     FE 0A F4 16 
0d820     00 FA 0E 03 | 	byte	$fe, $0e, $0a, $f8, $07, $05, $00, $0a, $fe, $0a, $f4, $16, $00, $fa, $0e, $03
0d824     FC 00 06 F9 
0d828     05 09 F2 00 
0d82c     05 00 F8 02 
0d830     0C F1 00 04 | 	byte	$fc, $00, $06, $f9, $05, $09, $f2, $00, $05, $00, $f8, $02, $0c, $f1, $00, $04
0d834     01 FE 08 F4 
0d838     0A FC F8 06 
0d83c     F9 0A 00 FE 
0d840     00 0E FD F4 | 	byte	$01, $fe, $08, $f4, $0a, $fc, $f8, $06, $f9, $0a, $00, $fe, $00, $0e, $fd, $f4
0d844     0C FD FD 05 
0d848     04 FE 04 00 
0d84c     06 00 05 01 
0d850     F9 01 0E FA | 	byte	$0c, $fd, $fd, $05, $04, $fe, $04, $00, $06, $00, $05, $01, $f9, $01, $0e, $fa
0d854     07 01 0C 01 
0d858     00 06 FB 09 
0d85c     03 01 02 0A 
0d860     00 09 00 F9 | 	byte	$07, $01, $0c, $01, $00, $06, $fb, $09, $03, $01, $02, $0a, $00, $09, $00, $f9
0d864     10 FA 01 0A 
0d868     09 FD FB 05 
0d86c     07 00 00 06 
0d870     01 FB 0B F4 | 	byte	$10, $fa, $01, $0a, $09, $fd, $fb, $05, $07, $00, $00, $06, $01, $fb, $0b, $f4
0d874     0B 04 00 F8 
0d878     0E F8 F7 04 
0d87c     FA FA 06 F4 
0d880     02 02 00 F4 | 	byte	$0b, $04, $00, $f8, $0e, $f8, $f7, $04, $fa, $fa, $06, $f4, $02, $02, $00, $f4
0d884     FA 05 FD F6 
0d888     F7 03 00 FC 
0d88c     F4 00 00 FB 
0d890     F8 FA 02 FA | 	byte	$fa, $05, $fd, $f6, $f7, $03, $00, $fc, $f4, $00, $00, $fb, $f8, $fa, $02, $fa
0d894     FC FC FC F8 
0d898     02 F8 FC 00 
0d89c     00 F8 F6 07 
0d8a0     F6 00 FA 05 | 	byte	$fc, $fc, $fc, $f8, $02, $f8, $fc, $00, $00, $f8, $f6, $07, $f6, $00, $fa, $05
0d8a4     FB FC 09 F4 
0d8a8     02 FC 02 00 
0d8ac     FA 06 FC FD 
0d8b0     02 06 FB 01 | 	byte	$fb, $fc, $09, $f4, $02, $fc, $02, $00, $fa, $06, $fc, $fd, $02, $06, $fb, $01
0d8b4     09 FD 02 F6 
0d8b8     0B 07 FA 06 
0d8bc     FC 0F F5 05 
0d8c0     00 0A 00 FE | 	byte	$09, $fd, $02, $f6, $0b, $07, $fa, $06, $fc, $0f, $f5, $05, $00, $0a, $00, $fe
0d8c4     05 FD 00 00 
0d8c8     00 FE 04 FE 
0d8cc     FC 07 00 FE 
0d8d0     F8 02 03 F7 | 	byte	$05, $fd, $00, $00, $00, $fe, $04, $fe, $fc, $07, $00, $fe, $f8, $02, $03, $f7
0d8d4     FC 03 FC 00 
0d8d8     F9 00 FA FD 
0d8dc     F5 04 F8 FE 
0d8e0     FE F6 FB FC | 	byte	$fc, $03, $fc, $00, $f9, $00, $fa, $fd, $f5, $04, $f8, $fe, $fe, $f6, $fb, $fc
0d8e4     FC F6 FC FA 
0d8e8     F8 F8 FD FE 
0d8ec     F4 00 F8 FC 
0d8f0     FC FB FE F8 | 	byte	$fc, $f6, $fc, $fa, $f8, $f8, $fd, $fe, $f4, $00, $f8, $fc, $fc, $fb, $fe, $f8
0d8f4     02 F7 03 F4 
0d8f8     02 00 F7 FC 
0d8fc     02 F9 00 FC 
0d900     FC 01 01 FA | 	byte	$02, $f7, $03, $f4, $02, $00, $f7, $fc, $02, $f9, $00, $fc, $fc, $01, $01, $fa
0d904     FE FC 02 FB 
0d908     00 03 01 04 
0d90c     FE 04 01 00 
0d910     00 06 03 02 | 	byte	$fe, $fc, $02, $fb, $00, $03, $01, $04, $fe, $04, $01, $00, $00, $06, $03, $02
0d914     FB 03 03 00 
0d918     02 00 04 07 
0d91c     00 02 06 06 
0d920     FD 03 06 00 | 	byte	$fb, $03, $03, $00, $02, $00, $04, $07, $00, $02, $06, $06, $fd, $03, $06, $00
0d924     07 00 07 02 
0d928     05 02 04 04 
0d92c     06 0A FC 03 
0d930     02 03 02 FB | 	byte	$07, $00, $07, $02, $05, $02, $04, $04, $06, $0a, $fc, $03, $02, $03, $02, $fb
0d934     08 FF 02 03 
0d938     02 FE FD 02 
0d93c     03 FB 03 FE 
0d940     FB 0C 00 F9 | 	byte	$08, $ff, $02, $03, $02, $fe, $fd, $02, $03, $fb, $03, $fe, $fb, $0c, $00, $f9
0d944     01 FD 06 FB 
0d948     00 00 00 00 
0d94c     00 0A FC 00 
0d950     00 02 01 00 | 	byte	$01, $fd, $06, $fb, $00, $00, $00, $00, $00, $0a, $fc, $00, $00, $02, $01, $00
0d954     02 00 03 FE 
0d958     FF 03 FA 08 
0d95c     01 FE 08 07 
0d960     00 FD 06 00 | 	byte	$02, $00, $03, $fe, $ff, $03, $fa, $08, $01, $fe, $08, $07, $00, $fd, $06, $00
0d964     02 00 04 04 
0d968     02 00 07 06 
0d96c     F9 0A 00 04 
0d970     03 03 04 00 | 	byte	$02, $00, $04, $04, $02, $00, $07, $06, $f9, $0a, $00, $04, $03, $03, $04, $00
0d974     02 06 02 02 
0d978     05 07 02 03 
0d97c     03 02 06 FD 
0d980     00 08 05 03 | 	byte	$02, $06, $02, $02, $05, $07, $02, $03, $03, $02, $06, $fd, $00, $08, $05, $03
0d984     FE 04 00 08 
0d988     FB 00 02 01 
0d98c     01 02 FB 03 
0d990     01 FE 00 02 | 	byte	$fe, $04, $00, $08, $fb, $00, $02, $01, $01, $02, $fb, $03, $01, $fe, $00, $02
0d994     FE 00 08 FA 
0d998     FD F9 03 00 
0d99c     FA F7 06 FA 
0d9a0     FA FD FD 01 | 	byte	$fe, $00, $08, $fa, $fd, $f9, $03, $00, $fa, $f7, $06, $fa, $fa, $fd, $fd, $01
0d9a4     00 FD F7 00 
0d9a8     02 F7 FC FA 
0d9ac     00 FC FD FE 
0d9b0     01 F9 FB 00 | 	byte	$00, $fd, $f7, $00, $02, $f7, $fc, $fa, $00, $fc, $fd, $fe, $01, $f9, $fb, $00
0d9b4     00 F6 FD FC 
0d9b8     FA 00 F9 00 
0d9bc     00 F9 FB 01 
0d9c0     00 FA 00 00 | 	byte	$00, $f6, $fd, $fc, $fa, $00, $f9, $00, $00, $f9, $fb, $01, $00, $fa, $00, $00
0d9c4     FC 00 FE FC 
0d9c8     FD 02 F5 02 
0d9cc     00 00 FC FC 
0d9d0     01 FB 00 FD | 	byte	$fc, $00, $fe, $fc, $fd, $02, $f5, $02, $00, $00, $fc, $fc, $01, $fb, $00, $fd
0d9d4     00 F8 00 FE 
0d9d8     FD FE 00 02 
0d9dc     FB F9 FE 00 
0d9e0     00 FB 00 00 | 	byte	$00, $f8, $00, $fe, $fd, $fe, $00, $02, $fb, $f9, $fe, $00, $00, $fb, $00, $00
0d9e4     02 FC 00 00 
0d9e8     F9 00 00 F8 
0d9ec     02 01 F9 FD 
0d9f0     01 FC FB FE | 	byte	$02, $fc, $00, $00, $f9, $00, $00, $f8, $02, $01, $f9, $fd, $01, $fc, $fb, $fe
0d9f4     01 FC FB FE 
0d9f8     FD FE FA FB 
0d9fc     FE F8 00 FE 
0da00     FC FC FA FC | 	byte	$01, $fc, $fb, $fe, $fd, $fe, $fa, $fb, $fe, $f8, $00, $fe, $fc, $fc, $fa, $fc
0da04     F9 FB FD F9 
0da08     FD FB FC FB 
0da0c     F9 00 02 FA 
0da10     FE 01 FC F9 | 	byte	$f9, $fb, $fd, $f9, $fd, $fb, $fc, $fb, $f9, $00, $02, $fa, $fe, $01, $fc, $f9
0da14     FD FC F9 00 
0da18     F9 00 02 F8 
0da1c     00 FD FE 00 
0da20     00 FC 00 06 | 	byte	$fd, $fc, $f9, $00, $f9, $00, $02, $f8, $00, $fd, $fe, $00, $00, $fc, $00, $06
0da24     00 FD 00 00 
0da28     02 00 00 03 
0da2c     FE FD 08 00 
0da30     00 02 02 00 | 	byte	$00, $fd, $00, $00, $02, $00, $00, $03, $fe, $fd, $08, $00, $00, $02, $02, $00
0da34     FE 01 01 00 
0da38     00 03 03 00 
0da3c     00 02 00 06 
0da40     FA 00 02 02 | 	byte	$fe, $01, $01, $00, $00, $03, $03, $00, $00, $02, $00, $06, $fa, $00, $02, $02
0da44     01 FE 01 01 
0da48     00 FE 00 05 
0da4c     00 00 00 03 
0da50     01 FD FE 01 | 	byte	$01, $fe, $01, $01, $00, $fe, $00, $05, $00, $00, $00, $03, $01, $fd, $fe, $01
0da54     00 02 00 04 
0da58     00 00 03 01 
0da5c     FE 00 00 00 
0da60     00 02 FE 01 | 	byte	$00, $02, $00, $04, $00, $00, $03, $01, $fe, $00, $00, $00, $00, $02, $fe, $01
0da64     FE 02 02 00 
0da68     FD 06 01 00 
0da6c     01 00 01 00 
0da70     02 04 00 00 | 	byte	$fe, $02, $02, $00, $fd, $06, $01, $00, $01, $00, $01, $00, $02, $04, $00, $00
0da74     04 00 02 00 
0da78     02 00 01 01 
0da7c     02 02 02 07 
0da80     01 01 05 02 | 	byte	$04, $00, $02, $00, $02, $00, $01, $01, $02, $02, $02, $07, $01, $01, $05, $02
0da84     02 00 03 00 
0da88     01 03 05 02 
0da8c     07 06 02 04 
0da90     03 05 03 03 | 	byte	$02, $00, $03, $00, $01, $03, $05, $02, $07, $06, $02, $04, $03, $05, $03, $03
0da94     02 03 00 03 
0da98     07 03 00 08 
0da9c     06 03 02 06 
0daa0     05 00 04 03 | 	byte	$02, $03, $00, $03, $07, $03, $00, $08, $06, $03, $02, $06, $05, $00, $04, $03
0daa4     00 05 03 03 
0daa8     02 01 05 03 
0daac     01 02 03 03 
0dab0     02 00 03 01 | 	byte	$00, $05, $03, $03, $02, $01, $05, $03, $01, $02, $03, $03, $02, $00, $03, $01
0dab4     02 00 00 00 
0dab8     04 04 00 00 
0dabc     01 00 00 FD 
0dac0     01 FD 00 00 | 	byte	$02, $00, $00, $00, $04, $04, $00, $00, $01, $00, $00, $fd, $01, $fd, $00, $00
0dac4     00 02 00 00 
0dac8     00 00 FD 01 
0dacc     FC FE 00 FE 
0dad0     00 FC FD 00 | 	byte	$00, $02, $00, $00, $00, $00, $fd, $01, $fc, $fe, $00, $fe, $00, $fc, $fd, $00
0dad4     FE FE FD 00 
0dad8     FC FE 01 00 
0dadc     00 00 00 FC 
0dae0     FD 00 FC 00 | 	byte	$fe, $fe, $fd, $00, $fc, $fe, $01, $00, $00, $00, $00, $fc, $fd, $00, $fc, $00
0dae4     00 FA FC 00 
0dae8     FC 01 00 FC 
0daec     00 FE 00 FE 
0daf0     FD FE 00 00 | 	byte	$00, $fa, $fc, $00, $fc, $01, $00, $fc, $00, $fe, $00, $fe, $fd, $fe, $00, $00
0daf4     FD 01 00 FA 
0daf8     00 00 00 FD 
0dafc     FC 00 FD F9 
0db00     00 FE FE FB | 	byte	$fd, $01, $00, $fa, $00, $00, $00, $fd, $fc, $00, $fd, $f9, $00, $fe, $fe, $fb
0db04     FE FD FC FE 
0db08     00 FC FB 00 
0db0c     FD FB FC FC 
0db10     00 FA FB FD | 	byte	$fe, $fd, $fc, $fe, $00, $fc, $fb, $00, $fd, $fb, $fc, $fc, $00, $fa, $fb, $fd
0db14     FC 00 F8 FD 
0db18     F9 FA FB F9 
0db1c     F8 FD FB FC 
0db20     FA FC FD F7 | 	byte	$fc, $00, $f8, $fd, $f9, $fa, $fb, $f9, $f8, $fd, $fb, $fc, $fa, $fc, $fd, $f7
0db24     F9 FA FB F9 
0db28     FA FA FB FA 
0db2c     FB FB FA FB 
0db30     FA F9 F9 FA | 	byte	$f9, $fa, $fb, $f9, $fa, $fa, $fb, $fa, $fb, $fb, $fa, $fb, $fa, $f9, $f9, $fa
0db34     00 FB FA FE 
0db38     FC FC 00 FC 
0db3c     FB FC 00 FE 
0db40     FD FD 01 FE | 	byte	$00, $fb, $fa, $fe, $fc, $fc, $00, $fc, $fb, $fc, $00, $fe, $fd, $fd, $01, $fe
0db44     FD 00 01 FD 
0db48     00 02 00 FD 
0db4c     03 00 FE 03 
0db50     00 01 00 01 | 	byte	$fd, $00, $01, $fd, $00, $02, $00, $fd, $03, $00, $fe, $03, $00, $01, $00, $01
0db54     00 02 00 02 
0db58     00 00 02 02 
0db5c     02 03 01 01 
0db60     03 00 02 00 | 	byte	$00, $02, $00, $02, $00, $00, $02, $02, $02, $03, $01, $01, $03, $00, $02, $00
0db64     04 02 00 02 
0db68     00 00 02 03 
0db6c     06 02 01 04 
0db70     05 06 00 03 | 	byte	$04, $02, $00, $02, $00, $00, $02, $03, $06, $02, $01, $04, $05, $06, $00, $03
0db74     02 00 03 00 
0db78     00 02 00 00 
0db7c     02 05 00 00 
0db80     02 00 00 00 | 	byte	$02, $00, $03, $00, $00, $02, $00, $00, $02, $05, $00, $00, $02, $00, $00, $00
0db84     00 00 01 00 
0db88     FE FD 00 01 
0db8c     00 00 00 02 
0db90     00 01 01 00 | 	byte	$00, $00, $01, $00, $fe, $fd, $00, $01, $00, $00, $00, $02, $00, $01, $01, $00
0db94     00 00 02 01 
0db98     00 04 02 02 
0db9c     01 03 03 01 
0dba0     03 02 04 03 | 	byte	$00, $00, $02, $01, $00, $04, $02, $02, $01, $03, $03, $01, $03, $02, $04, $03
0dba4     05 02 02 04 
0dba8     01 00 03 01 
0dbac     02 02 03 04 
0dbb0     02 03 02 02 | 	byte	$05, $02, $02, $04, $01, $00, $03, $01, $02, $02, $03, $04, $02, $03, $02, $02
0dbb4     04 02 01 04 
0dbb8     01 00 04 02 
0dbbc     00 00 03 02 
0dbc0     00 06 FE 01 | 	byte	$04, $02, $01, $04, $01, $00, $04, $02, $00, $00, $03, $02, $00, $06, $fe, $01
0dbc4     00 00 02 00 
0dbc8     02 03 00 03 
0dbcc     00 03 00 00 
0dbd0     03 02 00 00 | 	byte	$00, $00, $02, $00, $02, $03, $00, $03, $00, $03, $00, $00, $03, $02, $00, $00
0dbd4     01 00 01 FE 
0dbd8     00 00 01 01 
0dbdc     01 00 00 02 
0dbe0     FE FE 01 00 | 	byte	$01, $00, $01, $fe, $00, $00, $01, $01, $01, $00, $00, $02, $fe, $fe, $01, $00
0dbe4     FE 00 FE 00 
0dbe8     00 FD 00 00 
0dbec     00 00 00 00 
0dbf0     00 FE FD 00 | 	byte	$fe, $00, $fe, $00, $00, $fd, $00, $00, $00, $00, $00, $00, $00, $fe, $fd, $00
0dbf4     FE 00 FD 00 
0dbf8     FC 00 FD FB 
0dbfc     FE 00 FD 00 
0dc00     FC FD 00 FC | 	byte	$fe, $00, $fd, $00, $fc, $00, $fd, $fb, $fe, $00, $fd, $00, $fc, $fd, $00, $fc
0dc04     FB FE FD 01 
0dc08     FE FE FC 00 
0dc0c     00 00 02 00 
0dc10     00 00 00 FC | 	byte	$fb, $fe, $fd, $01, $fe, $fe, $fc, $00, $00, $00, $02, $00, $00, $00, $00, $fc
0dc14     00 00 FE 01 
0dc18     FD FD FC FE 
0dc1c     FE FC 00 FB 
0dc20     FD FC FC FC | 	byte	$00, $00, $fe, $01, $fd, $fd, $fc, $fe, $fe, $fc, $00, $fb, $fd, $fc, $fc, $fc
0dc24     FE FC FC FD 
0dc28     FD FC FC FC 
0dc2c     FA FC FE FC 
0dc30     FB FC FD FC | 	byte	$fe, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fa, $fc, $fe, $fc, $fb, $fc, $fd, $fc
0dc34     FC FC FB FB 
0dc38     FB FC F8 FA 
0dc3c     FB FA FD FC 
0dc40     FB FD FD FD | 	byte	$fc, $fc, $fb, $fb, $fb, $fc, $f8, $fa, $fb, $fa, $fd, $fc, $fb, $fd, $fd, $fd
0dc44     FC FA FB FE 
0dc48     00 FE FD FD 
0dc4c     FD FE 00 FE 
0dc50     FD FD FC 00 | 	byte	$fc, $fa, $fb, $fe, $00, $fe, $fd, $fd, $fd, $fe, $00, $fe, $fd, $fd, $fc, $00
0dc54     FE 00 FC FE 
0dc58     FE FD 00 00 
0dc5c     02 FD FE 02 
0dc60     FE FE 00 00 | 	byte	$fe, $00, $fc, $fe, $fe, $fd, $00, $00, $02, $fd, $fe, $02, $fe, $fe, $00, $00
0dc64     00 00 00 FE 
0dc68     00 00 02 FE 
0dc6c     FD 00 00 00 
0dc70     00 00 00 01 | 	byte	$00, $00, $00, $fe, $00, $00, $02, $fe, $fd, $00, $00, $00, $00, $00, $00, $01
0dc74     00 00 01 FE 
0dc78     FD 01 00 FE 
0dc7c     00 03 00 00 
0dc80     00 00 00 FE | 	byte	$00, $00, $01, $fe, $fd, $01, $00, $fe, $00, $03, $00, $00, $00, $00, $00, $fe
0dc84     00 00 00 00 
0dc88     00 00 00 00 | 	byte	$00[8]
0dc8c     05 05 00 FF 
0dc90     00 00 00 00 
0dc94     00 00 00 00 
0dc98     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc9c     00 00 00 00 
      ...             
0dcc0     00 00 00 00 
0dcc4     00 00       | 	byte	$00[42]
0dcc6     FF 01 FF FA 
0dcca     00 FD FD 05 
0dcce     02 04 08 01 
0dcd2     03 00 FA FC | 	byte	$ff, $01, $ff, $fa, $00, $fd, $fd, $05, $02, $04, $08, $01, $03, $00, $fa, $fc
0dcd6     FB FB 00 FE 
0dcda     FF 01 FE 00 
0dcde     FF FD FC FE 
0dce2     FC FF FE 00 | 	byte	$fb, $fb, $00, $fe, $ff, $01, $fe, $00, $ff, $fd, $fc, $fe, $fc, $ff, $fe, $00
0dce6     00 00 FE 01 
0dcea     00 00 05 03 
0dcee     01 04 02 FF 
0dcf2     04 FC FF 01 | 	byte	$00, $00, $fe, $01, $00, $00, $05, $03, $01, $04, $02, $ff, $04, $fc, $ff, $01
0dcf6     FC 03 01 FD 
0dcfa     01 FD FD 00 
0dcfe     FB FB FE FB 
0dd02     00 01 FE 03 | 	byte	$fc, $03, $01, $fd, $01, $fd, $fd, $00, $fb, $fb, $fe, $fb, $00, $01, $fe, $03
0dd06     00 FF 01 FD 
0dd0a     FC FF FD FD 
0dd0e     03 FE 02 02 
0dd12     00 01 00 FF | 	byte	$00, $ff, $01, $fd, $fc, $ff, $fd, $fd, $03, $fe, $02, $02, $00, $01, $00, $ff
0dd16     00 02 F2 F4 
0dd1a     F5 F6 F6 F7 
0dd1e     F8 F8 F9 F9 
0dd22     FA FA FB FB | 	byte	$00, $02, $f2, $f4, $f5, $f6, $f6, $f7, $f8, $f8, $f9, $f9, $fa, $fa, $fb, $fb
0dd26     FB FC FC FD 
0dd2a     FD FD FE FE 
0dd2e     FE FE FF FF 
0dd32     FF 00 00 00 | 	byte	$fb, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $00, $00, $00
0dd36     00 01 01 01 
0dd3a     01 01 02 02 
0dd3e     02 02 02 02 
0dd42     03 02 03 03 | 	byte	$00, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $03, $02, $03, $03
0dd46     03 FF FE FE 
0dd4a     FD FD FE FE 
0dd4e     FE FE FF FF 
0dd52     FF 00 00 01 | 	byte	$03, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $00, $00, $01
0dd56     01 02 03 04 
0dd5a     08 0A 0E 11 
0dd5e     11 0C 02 F8 
0dd62     F1 F0 F4 FC | 	byte	$01, $02, $03, $04, $08, $0a, $0e, $11, $11, $0c, $02, $f8, $f1, $f0, $f4, $fc
0dd66     01 FF F6 ED 
0dd6a     E8 EC F8 05 
0dd6e     0E 10 0C 08 
0dd72     04 00 FF 05 | 	byte	$01, $ff, $f6, $ed, $e8, $ec, $f8, $05, $0e, $10, $0c, $08, $04, $00, $ff, $05
0dd76     0F 13 0A FE 
0dd7a     F8 F6 EE EB 
0dd7e     F9 07 03 F8 
0dd82     FB FD F3 F1 | 	byte	$0f, $13, $0a, $fe, $f8, $f6, $ee, $eb, $f9, $07, $03, $f8, $fb, $fd, $f3, $f1
0dd86     02 10 0E 03 
0dd8a     0C 05 FB EA 
0dd8e     FF 00 07 FD 
0dd92     02 FB EF E5 | 	byte	$02, $10, $0e, $03, $0c, $05, $fb, $ea, $ff, $00, $07, $fd, $02, $fb, $ef, $e5
0dd96     F7 07 0D 12 
0dd9a     1D 1F 17 0B 
0dd9e     06 17 08 10 
0dda2     08 0E FF ED | 	byte	$f7, $07, $0d, $12, $1d, $1f, $17, $0b, $06, $17, $08, $10, $08, $0e, $ff, $ed
0dda6     E5 DF E5 E7 
0ddaa     ED F1 F8 EF 
0ddae     F4 F6 FE 02 
0ddb2     10 15 19 11 | 	byte	$e5, $df, $e5, $e7, $ed, $f1, $f8, $ef, $f4, $f6, $fe, $02, $10, $15, $19, $11
0ddb6     0A 0A 06 FF 
0ddba     00 07 02 FA 
0ddbe     F1 EF EC E9 
0ddc2     E9 FA FE 01 | 	byte	$0a, $0a, $06, $ff, $00, $07, $02, $fa, $f1, $ef, $ec, $e9, $e9, $fa, $fe, $01
0ddc6     01 04 06 04 
0ddca     06 0E 17 12 
0ddce     10 0A 01 F6 
0ddd2     EE F0 F4 F5 | 	byte	$01, $04, $06, $04, $06, $0e, $17, $12, $10, $0a, $01, $f6, $ee, $f0, $f4, $f5
0ddd6     F5 F6 F6 ED 
0ddda     EE F5 FD 07 
0ddde     05 06 09 03 
0dde2     01 07 0A 00 | 	byte	$f5, $f6, $f6, $ed, $ee, $f5, $fd, $07, $05, $06, $09, $03, $01, $07, $0a, $00
0dde6     F9 FA 03 01 
0ddea     F3 E8 F1 FF 
0ddee     FA FA 19 2E 
0ddf2     2D 21 18 20 | 	byte	$f9, $fa, $03, $01, $f3, $e8, $f1, $ff, $fa, $fa, $19, $2e, $2d, $21, $18, $20
0ddf6     1F 04 03 17 
0ddfa     11 EF E2 E9 
0ddfe     E1 CB CB E1 
0de02     F2 F4 DE 03 | 	byte	$1f, $04, $03, $17, $11, $ef, $e2, $e9, $e1, $cb, $cb, $e1, $f2, $f4, $de, $03
0de06     ED FC ED F6 
0de0a     0C 12 02 15 
0de0e     1B 0A 06 08 
0de12     1B 19 17 11 | 	byte	$ed, $fc, $ed, $f6, $0c, $12, $02, $15, $1b, $0a, $06, $08, $1b, $19, $17, $11
0de16     1F 20 F6 16 
0de1a     0D 27 F8 1A 
0de1e     07 F1 00 C0 
0de22     02 DB ED E3 | 	byte	$1f, $20, $f6, $16, $0d, $27, $f8, $1a, $07, $f1, $00, $c0, $02, $db, $ed, $e3
0de26     F6 F4 D8 F7 
0de2a     DB 0D F9 06 
0de2e     1A 1A 09 FD 
0de32     0D FE 0C F9 | 	byte	$f6, $f4, $d8, $f7, $db, $0d, $f9, $06, $1a, $1a, $09, $fd, $0d, $fe, $0c, $f9
0de36     0B 0D F8 EC 
0de3a     E8 F3 E3 EE 
0de3e     FB FC 08 F1 
0de42     FB 04 FF FE | 	byte	$0b, $0d, $f8, $ec, $e8, $f3, $e3, $ee, $fb, $fc, $08, $f1, $fb, $04, $ff, $fe
0de46     12 19 17 18 
0de4a     08 14 05 00 
0de4e     FB 0D 03 F9 
0de52     FF F1 F5 E8 | 	byte	$12, $19, $17, $18, $08, $14, $05, $00, $fb, $0d, $03, $f9, $ff, $f1, $f5, $e8
0de56     E9 FA FE FE 
0de5a     FF 0B 04 FF 
0de5e     05 05 16 0B 
0de62     0F 12 0D 00 | 	byte	$e9, $fa, $fe, $fe, $ff, $0b, $04, $ff, $05, $05, $16, $0b, $0f, $12, $0d, $00
0de66     FA 00 FD FC 
0de6a     FC FC FE F5 
0de6e     EC F4 F7 F7 
0de72     FD 06 07 0A | 	byte	$fa, $00, $fd, $fc, $fc, $fc, $fe, $f5, $ec, $f4, $f7, $f7, $fd, $06, $07, $0a
0de76     01 06 08 05 
0de7a     FC E4 01 F1 
0de7e     C2 13 C1 1B 
0de82     C5 2D F9 28 | 	byte	$01, $06, $08, $05, $fc, $e4, $01, $f1, $c2, $13, $c1, $1b, $c5, $2d, $f9, $28
0de86     14 0A 68 1C 
0de8a     62 56 5F 4F 
0de8e     43 1F F9 00 
0de92     F5 D6 BF CC | 	byte	$14, $0a, $68, $1c, $62, $56, $5f, $4f, $43, $1f, $f9, $00, $f5, $d6, $bf, $cc
0de96     B1 A5 85 BB 
0de9a     B3 B5 CE 02 
0de9e     21 10 23 30 
0dea2     2B 3B 1A 4A | 	byte	$b1, $a5, $85, $bb, $b3, $b5, $ce, $02, $21, $10, $23, $30, $2b, $3b, $1a, $4a
0dea6     2E 30 FA 00 
0deaa     EB C0 BC B6 
0deae     D1 BB AB D5 
0deb2     D5 DA CF 02 | 	byte	$2e, $30, $fa, $00, $eb, $c0, $bc, $b6, $d1, $bb, $ab, $d5, $d5, $da, $cf, $02
0deb6     12 30 31 42 
0deba     4C 3C 32 2E 
0debe     32 2A 26 14 
0dec2     25 EE EC C5 | 	byte	$12, $30, $31, $42, $4c, $3c, $32, $2e, $32, $2a, $26, $14, $25, $ee, $ec, $c5
0dec6     E2 C4 DD D4 
0deca     13 D6 08 D8 
0dece     03 E4 0C 04 
0ded2     35 33 12 25 | 	byte	$e2, $c4, $dd, $d4, $13, $d6, $08, $d8, $03, $e4, $0c, $04, $35, $33, $12, $25
0ded6     06 0C F0 FD 
0deda     00 13 E9 FD 
0dede     E0 DF C5 DA 
0dee2     EA FE 04 06 | 	byte	$06, $0c, $f0, $fd, $00, $13, $e9, $fd, $e0, $df, $c5, $da, $ea, $fe, $04, $06
0dee6     17 04 09 FD 
0deea     1D 1B 26 24 
0deee     2C 18 03 F0 
0def2     E8 C7 F9 DB | 	byte	$17, $04, $09, $fd, $1d, $1b, $26, $24, $2c, $18, $03, $f0, $e8, $c7, $f9, $db
0def6     F8 CA FF C0 
0defa     FE E5 08 21 
0defe     41 2B 58 36 
0df02     5B 40 57 40 | 	byte	$f8, $ca, $ff, $c0, $fe, $e5, $08, $21, $41, $2b, $58, $36, $5b, $40, $57, $40
0df06     76 2A 23 FF 
0df0a     F7 B4 A0 A1 
0df0e     BD B4 95 B9 
0df12     AE B9 B3 D9 | 	byte	$76, $2a, $23, $ff, $f7, $b4, $a0, $a1, $bd, $b4, $95, $b9, $ae, $b9, $b3, $d9
0df16     04 1D 2F 3E 
0df1a     6C 4C 37 31 
0df1e     3B 20 1C 04 
0df22     0B E8 BB A0 | 	byte	$04, $1d, $2f, $3e, $6c, $4c, $37, $31, $3b, $20, $1c, $04, $0b, $e8, $bb, $a0
0df26     B4 A3 A6 BF 
0df2a     DE E5 EE E7 
0df2e     00 1F 19 3C 
0df32     58 66 52 4E | 	byte	$b4, $a3, $a6, $bf, $de, $e5, $ee, $e7, $00, $1f, $19, $3c, $58, $66, $52, $4e
0df36     3D 36 1F 08 
0df3a     15 0E EE DA 
0df3e     D5 D7 DA BD 
0df42     CD DE DB D3 | 	byte	$3d, $36, $1f, $08, $15, $0e, $ee, $da, $d5, $d7, $da, $bd, $cd, $de, $db, $d3
0df46     FD 0F 10 0A 
0df4a     0C 2C 25 0B 
0df4e     11 2C 11 FD 
0df52     F6 F4 EC D1 | 	byte	$fd, $0f, $10, $0a, $0c, $2c, $25, $0b, $11, $2c, $11, $fd, $f6, $f4, $ec, $d1
0df56     CE E9 E8 D3 
0df5a     E4 F1 F2 EC 
0df5e     F4 0C 1E 19 
0df62     16 32 27 13 | 	byte	$ce, $e9, $e8, $d3, $e4, $f1, $f2, $ec, $f4, $0c, $1e, $19, $16, $32, $27, $13
0df66     0F 1A 16 0B 
0df6a     FA 0C 00 EA 
0df6e     D9 ED EA E1 
0df72     EC F6 05 ED | 	byte	$0f, $1a, $16, $0b, $fa, $0c, $00, $ea, $d9, $ed, $ea, $e1, $ec, $f6, $05, $ed
0df76     CF E8 08 E8 
0df7a     FD 2F 3D 1C 
0df7e     29 20 33 23 
0df82     1B 4C 59 3E | 	byte	$cf, $e8, $08, $e8, $fd, $2f, $3d, $1c, $29, $20, $33, $23, $1b, $4c, $59, $3e
0df86     46 20 19 E9 
0df8a     E6 AA D9 C7 
0df8e     B9 BD C2 A5 
0df92     A9 B3 D6 ED | 	byte	$46, $20, $19, $e9, $e6, $aa, $d9, $c7, $b9, $bd, $c2, $a5, $a9, $b3, $d6, $ed
0df96     00 1B 35 31 
0df9a     22 38 37 3C 
0df9e     33 35 29 1F 
0dfa2     E7 D9 C9 BE | 	byte	$00, $1b, $35, $31, $22, $38, $37, $3c, $33, $35, $29, $1f, $e7, $d9, $c9, $be
0dfa6     AE BD C7 D6 
0dfaa     BF C9 DB EA 
0dfae     EF 10 36 3E 
0dfb2     42 36 53 30 | 	byte	$ae, $bd, $c7, $d6, $bf, $c9, $db, $ea, $ef, $10, $36, $3e, $42, $36, $53, $30
0dfb6     39 25 33 3D 
0dfba     1A 03 0E EA 
0dfbe     D7 CC C9 E7 
0dfc2     EB D2 EF EC | 	byte	$39, $25, $33, $3d, $1a, $03, $0e, $ea, $d7, $cc, $c9, $e7, $eb, $d2, $ef, $ec
0dfc6     D5 E3 F9 03 
0dfca     23 20 2C 3A 
0dfce     0D 05 FE 05 
0dfd2     FD 00 FC FF | 	byte	$d5, $e3, $f9, $03, $23, $20, $2c, $3a, $0d, $05, $fe, $05, $fd, $00, $fc, $ff
0dfd6     ED C8 CD CF 
0dfda     D4 DE F2 07 
0dfde     08 F5 06 03 
0dfe2     12 0E 28 36 | 	byte	$ed, $c8, $cd, $cf, $d4, $de, $f2, $07, $08, $f5, $06, $03, $12, $0e, $28, $36
0dfe6     31 1F 18 0D 
0dfea     FA F3 F1 01 
0dfee     FE F1 EB F0 
0dff2     DE E0 EA FD | 	byte	$31, $1f, $18, $0d, $fa, $f3, $f1, $01, $fe, $f1, $eb, $f0, $de, $e0, $ea, $fd
0dff6     13 0F 16 10 
0dffa     19 F6 07 FA 
0dffe     1D 14 0A 17 
0e002     09 05 F0 0A | 	byte	$13, $0f, $16, $10, $19, $f6, $07, $fa, $1d, $14, $0a, $17, $09, $05, $f0, $0a
0e006     02 22 1D 31 
0e00a     37 2A 1A 15 
0e00e     F2 E2 F9 E7 
0e012     EB D7 DB CC | 	byte	$02, $22, $1d, $31, $37, $2a, $1a, $15, $f2, $e2, $f9, $e7, $eb, $d7, $db, $cc
0e016     C9 B1 C9 E4 
0e01a     E8 FA 0E 18 
0e01e     17 04 18 2A 
0e022     2D 27 39 30 | 	byte	$c9, $b1, $c9, $e4, $e8, $fa, $0e, $18, $17, $04, $18, $2a, $2d, $27, $39, $30
0e026     17 FD EC EB 
0e02a     D8 D4 D7 F3 
0e02e     D3 D3 CE D8 
0e032     DB EC 03 1F | 	byte	$17, $fd, $ec, $eb, $d8, $d4, $d7, $f3, $d3, $d3, $ce, $d8, $db, $ec, $03, $1f
0e036     2F 21 29 30 
0e03a     1E 1D 28 29 
0e03e     26 18 0F FF 
0e042     F1 CE E8 E6 | 	byte	$2f, $21, $29, $30, $1e, $1d, $28, $29, $26, $18, $0f, $ff, $f1, $ce, $e8, $e6
0e046     E7 F4 F2 07 
0e04a     F6 03 E3 1C 
0e04e     00 11 12 1D 
0e052     16 18 00 00 | 	byte	$e7, $f4, $f2, $07, $f6, $03, $e3, $1c, $00, $11, $12, $1d, $16, $18, $00, $00
0e056     03 E3 F5 EB 
0e05a     EA DE E5 D5 
0e05e     F0 D7 E8 F2 
0e062     00 FF 07 10 | 	byte	$03, $e3, $f5, $eb, $ea, $de, $e5, $d5, $f0, $d7, $e8, $f2, $00, $ff, $07, $10
0e066     0F 16 0C 1B 
0e06a     18 19 0E 18 
0e06e     09 00 F2 F3 
0e072     F0 EB F2 EE | 	byte	$0f, $16, $0c, $1b, $18, $19, $0e, $18, $09, $00, $f2, $f3, $f0, $eb, $f2, $ee
0e076     FD F2 F4 FD 
0e07a     03 01 10 14 
0e07e     1D 1C 16 18 
0e082     14 0D 06 06 | 	byte	$fd, $f2, $f4, $fd, $03, $01, $10, $14, $1d, $1c, $16, $18, $14, $0d, $06, $06
0e086     00 F4 F6 E1 
0e08a     FC E6 F9 FB 
0e08e     14 1D 1A 0E 
0e092     08 04 F7 FC | 	byte	$00, $f4, $f6, $e1, $fc, $e6, $f9, $fb, $14, $1d, $1a, $0e, $08, $04, $f7, $fc
0e096     03 0F 00 01 
0e09a     ED F0 D8 DC 
0e09e     ED F0 05 00 
0e0a2     09 0E 0E 03 | 	byte	$03, $0f, $00, $01, $ed, $f0, $d8, $dc, $ed, $f0, $05, $00, $09, $0e, $0e, $03
0e0a6     02 1C 09 15 
0e0aa     0D 08 04 F2 
0e0ae     DE F1 EB E0 
0e0b2     EF F8 E7 FA | 	byte	$02, $1c, $09, $15, $0d, $08, $04, $f2, $de, $f1, $eb, $e0, $ef, $f8, $e7, $fa
0e0b6     DC 03 05 12 
0e0ba     11 2C 2F 24 
0e0be     32 20 34 38 
0e0c2     2D 41 3C 1A | 	byte	$dc, $03, $05, $12, $11, $2c, $2f, $24, $32, $20, $34, $38, $2d, $41, $3c, $1a
0e0c6     EE DE D2 CC 
0e0ca     B7 BA C9 C9 
0e0ce     BA BE CA C7 
0e0d2     E6 FB 17 2B | 	byte	$ee, $de, $d2, $cc, $b7, $ba, $c9, $c9, $ba, $be, $ca, $c7, $e6, $fb, $17, $2b
0e0d6     25 35 27 2F 
0e0da     1A 1D 27 17 
0e0de     14 F8 EB DF 
0e0e2     C2 C5 CB D9 | 	byte	$25, $35, $27, $2f, $1a, $1d, $27, $17, $14, $f8, $eb, $df, $c2, $c5, $cb, $d9
0e0e6     D6 E7 F3 EF 
0e0ea     FB FE 10 23 
0e0ee     27 3A 3D 39 
0e0f2     22 1F 0E 0D | 	byte	$d6, $e7, $f3, $ef, $fb, $fe, $10, $23, $27, $3a, $3d, $39, $22, $1f, $0e, $0d
0e0f6     00 FD F9 F5 
0e0fa     DD D5 D4 CD 
0e0fe     D6 E2 F5 04 
0e102     07 0C 17 16 | 	byte	$00, $fd, $f9, $f5, $dd, $d5, $d4, $cd, $d6, $e2, $f5, $04, $07, $0c, $17, $16
0e106     18 1D 28 29 
0e10a     28 1E 14 09 
0e10e     F4 EC EC EA 
0e112     E8 E6 E8 E6 | 	byte	$18, $1d, $28, $29, $28, $1e, $14, $09, $f4, $ec, $ec, $ea, $e8, $e6, $e8, $e6
0e116     E2 E3 EF FD 
0e11a     06 13 1F 20 
0e11e     1E 18 1A 17 
0e122     16 14 14 0D | 	byte	$e2, $e3, $ef, $fd, $06, $13, $1f, $20, $1e, $18, $1a, $17, $16, $14, $14, $0d
0e126     FD F2 E8 E1 
0e12a     DF E2 EB F2 
0e12e     F2 F6 F8 FB 
0e132     FD 08 12 18 | 	byte	$fd, $f2, $e8, $e1, $df, $e2, $eb, $f2, $f2, $f6, $f8, $fb, $fd, $08, $12, $18
0e136     19 1C 21 25 
0e13a     28 36 40 31 
0e13e     1B 14 05 E5 
0e142     CE D0 D9 D0 | 	byte	$19, $1c, $21, $25, $28, $36, $40, $31, $1b, $14, $05, $e5, $ce, $d0, $d9, $d0
0e146     C3 C8 CA C0 
0e14a     CF E3 E7 03 
0e14e     1B 13 22 27 
0e152     1F 21 1D 17 | 	byte	$c3, $c8, $ca, $c0, $cf, $e3, $e7, $03, $1b, $13, $22, $27, $1f, $21, $1d, $17
0e156     17 08 F6 F4 
0e15a     DF CB D6 CF 
0e15e     CF E5 E5 EE 
0e162     FD 0A 0A 31 | 	byte	$17, $08, $f6, $f4, $df, $cb, $d6, $cf, $cf, $e5, $e5, $ee, $fd, $0a, $0a, $31
0e166     2C 4A 4E 61 
0e16a     6A 73 23 54 
0e16e     0F 12 C2 EF 
0e172     AD D1 A8 A7 | 	byte	$2c, $4a, $4e, $61, $6a, $73, $23, $54, $0f, $12, $c2, $ef, $ad, $d1, $a8, $a7
0e176     A9 A8 92 BF 
0e17a     DE DE 24 15 
0e17e     38 41 2D 34 
0e182     4F 38 39 38 | 	byte	$a9, $a8, $92, $bf, $de, $de, $24, $15, $38, $41, $2d, $34, $4f, $38, $39, $38
0e186     25 0A F0 CA 
0e18a     C9 C4 AC CB 
0e18e     CC CD CD DA 
0e192     E2 F9 0E 1B | 	byte	$25, $0a, $f0, $ca, $c9, $c4, $ac, $cb, $cc, $cd, $cd, $da, $e2, $f9, $0e, $1b
0e196     47 45 43 48 
0e19a     37 2F 24 18 
0e19e     1B 11 F7 E6 
0e1a2     DB C2 BA BB | 	byte	$47, $45, $43, $48, $37, $2f, $24, $18, $1b, $11, $f7, $e6, $db, $c2, $ba, $bb
0e1a6     CC D4 E6 EF 
0e1aa     00 07 06 19 
0e1ae     27 32 3A 40 
0e1b2     3C 31 1E 0B | 	byte	$cc, $d4, $e6, $ef, $00, $07, $06, $19, $27, $32, $3a, $40, $3c, $31, $1e, $0b
0e1b6     04 F9 E5 E7 
0e1ba     E3 D8 CD C9 
0e1be     CD D4 DC F0 
0e1c2     06 11 18 22 | 	byte	$04, $f9, $e5, $e7, $e3, $d8, $cd, $c9, $cd, $d4, $dc, $f0, $06, $11, $18, $22
0e1c6     27 26 28 29 
0e1ca     2C 28 1C 10 
0e1ce     06 EF E3 DB 
0e1d2     DB DA DD DC | 	byte	$27, $26, $28, $29, $2c, $28, $1c, $10, $06, $ef, $e3, $db, $db, $da, $dd, $dc
0e1d6     E7 E4 E6 F3 
0e1da     03 0D 1B 25 
0e1de     2C 2A 21 1D 
0e1e2     18 01 1F 33 | 	byte	$e7, $e4, $e6, $f3, $03, $0d, $1b, $25, $2c, $2a, $21, $1d, $18, $01, $1f, $33
0e1e6     1E 1A 0C FB 
0e1ea     D9 A7 D1 EA 
0e1ee     C4 E1 F4 EA 
0e1f2     D8 D0 E3 0C | 	byte	$1e, $1a, $0c, $fb, $d9, $a7, $d1, $ea, $c4, $e1, $f4, $ea, $d8, $d0, $e3, $0c
0e1f6     0C 06 40 38 
0e1fa     10 0B 0E 07 
0e1fe     06 F2 0C 11 
0e202     E7 C9 DE D0 | 	byte	$0c, $06, $40, $38, $10, $0b, $0e, $07, $06, $f2, $0c, $11, $e7, $c9, $de, $d0
0e206     C4 D7 F3 0D 
0e20a     0E F8 19 20 
0e20e     0A 20 3E 46 
0e212     43 3A 3F 56 | 	byte	$c4, $d7, $f3, $0d, $0e, $f8, $19, $20, $0a, $20, $3e, $46, $43, $3a, $3f, $56
0e216     27 09 1D 09 
0e21a     D1 D3 C9 CA 
0e21e     B0 AF AE E0 
0e222     AF CD F6 01 | 	byte	$27, $09, $1d, $09, $d1, $d3, $c9, $ca, $b0, $af, $ae, $e0, $af, $cd, $f6, $01
0e226     FC 1D 26 34 
0e22a     3A 16 3B 3C 
0e22e     0F 0F 16 F6 
0e232     E9 C9 D4 D8 | 	byte	$fc, $1d, $26, $34, $3a, $16, $3b, $3c, $0f, $0f, $16, $f6, $e9, $c9, $d4, $d8
0e236     C3 BD E6 E8 
0e23a     D6 F3 FF 0F 
0e23e     17 17 38 43 
0e242     2E 2C 36 20 | 	byte	$c3, $bd, $e6, $e8, $d6, $f3, $ff, $0f, $17, $17, $38, $43, $2e, $2c, $36, $20
0e246     12 07 04 02 
0e24a     E9 D5 E4 DD 
0e24e     C3 D9 E3 F0 
0e252     F4 F8 0F 1A | 	byte	$12, $07, $04, $02, $e9, $d5, $e4, $dd, $c3, $d9, $e3, $f0, $f4, $f8, $0f, $1a
0e256     0E 18 2E 2D 
0e25a     23 28 27 1D 
0e25e     09 F5 FE F2 
0e262     DD DF E6 DF | 	byte	$0e, $18, $2e, $2d, $23, $28, $27, $1d, $09, $f5, $fe, $f2, $dd, $df, $e6, $df
0e266     D6 DB EA F3 
0e26a     F3 FF 18 1D 
0e26e     15 22 2A 25 
0e272     1C 18 1D 11 | 	byte	$d6, $db, $ea, $f3, $f3, $ff, $18, $1d, $15, $22, $2a, $25, $1c, $18, $1d, $11
0e276     FD F6 F7 E7 
0e27a     D9 DE E4 E1 
0e27e     E2 E8 F9 FB 
0e282     FA 0A 19 19 | 	byte	$fd, $f6, $f7, $e7, $d9, $de, $e4, $e1, $e2, $e8, $f9, $fb, $fa, $0a, $19, $19
0e286     1B 22 1D 0E 
0e28a     0B 0D 02 03 
0e28e     0A 18 23 1F 
0e292     18 21 FC DB | 	byte	$1b, $22, $1d, $0e, $0b, $0d, $02, $03, $0a, $18, $23, $1f, $18, $21, $fc, $db
0e296     F9 E4 DB 04 
0e29a     DE E8 F5 BB 
0e29e     D4 EA DB 03 
0e2a2     08 0B 1D 0A | 	byte	$f9, $e4, $db, $04, $de, $e8, $f5, $bb, $d4, $ea, $db, $03, $08, $0b, $1d, $0a
0e2a6     00 08 14 FD 
0e2aa     13 16 02 00 
0e2ae     EA DD ED DC 
0e2b2     E6 FF FF F9 | 	byte	$00, $08, $14, $fd, $13, $16, $02, $00, $ea, $dd, $ed, $dc, $e6, $ff, $ff, $f9
0e2b6     FC FB ED 03 
0e2ba     01 11 2C 15 
0e2be     20 23 0D 19 
0e2c2     17 17 2D 36 | 	byte	$fc, $fb, $ed, $03, $01, $11, $2c, $15, $20, $23, $0d, $19, $17, $17, $2d, $36
0e2c6     57 06 4A D9 
0e2ca     05 C6 D1 D8 
0e2ce     E6 CF CE E5 
0e2d2     A1 D7 B9 EA | 	byte	$57, $06, $4a, $d9, $05, $c6, $d1, $d8, $e6, $cf, $ce, $e5, $a1, $d7, $b9, $ea
0e2d6     08 16 20 3B 
0e2da     23 0E 1E 09 
0e2de     17 1A 17 10 
0e2e2     10 D5 E0 CB | 	byte	$08, $16, $20, $3b, $23, $0e, $1e, $09, $17, $1a, $17, $10, $10, $d5, $e0, $cb
0e2e6     CB D0 EE F0 
0e2ea     FB FE EC F9 
0e2ee     FE 00 1D 2D 
0e2f2     32 33 2A 17 | 	byte	$cb, $d0, $ee, $f0, $fb, $fe, $ec, $f9, $fe, $00, $1d, $2d, $32, $33, $2a, $17
0e2f6     0C FE F5 07 
0e2fa     01 FE F7 ED 
0e2fe     DA D5 D5 E4 
0e302     F3 07 07 1D | 	byte	$0c, $fe, $f5, $07, $01, $fe, $f7, $ed, $da, $d5, $d5, $e4, $f3, $07, $07, $1d
0e306     0D 12 0E 16 
0e30a     18 23 23 23 
0e30e     17 02 F5 EC 
0e312     E4 E4 EE EE | 	byte	$0d, $12, $0e, $16, $18, $23, $23, $23, $17, $02, $f5, $ec, $e4, $e4, $ee, $ee
0e316     F4 EC E9 EC 
0e31a     EE F4 0A 15 
0e31e     1D 21 1E 17 
0e322     12 0A 0B 11 | 	byte	$f4, $ec, $e9, $ec, $ee, $f4, $0a, $15, $1d, $21, $1e, $17, $12, $0a, $0b, $11
0e326     0B 08 06 F3 
0e32a     E8 E0 DD E6 
0e32e     EF F4 02 02 
0e332     FF 01 07 09 | 	byte	$0b, $08, $06, $f3, $e8, $e0, $dd, $e6, $ef, $f4, $02, $02, $ff, $01, $07, $09
0e336     15 14 12 1E 
0e33a     10 14 29 27 
0e33e     20 1D 16 F5 
0e342     E3 E1 DA E0 | 	byte	$15, $14, $12, $1e, $10, $14, $29, $27, $20, $1d, $16, $f5, $e3, $e1, $da, $e0
0e346     DA DA E3 D7 
0e34a     CF D8 EE F5 
0e34e     FE 1E 1F 20 
0e352     1B 15 16 18 | 	byte	$da, $da, $e3, $d7, $cf, $d8, $ee, $f5, $fe, $1e, $1f, $20, $1b, $15, $16, $18
0e356     08 0F 14 FB 
0e35a     EC E7 E1 D7 
0e35e     DC E1 F4 EB 
0e362     EB F1 FB F6 | 	byte	$08, $0f, $14, $fb, $ec, $e7, $e1, $d7, $dc, $e1, $f4, $eb, $eb, $f1, $fb, $f6
0e366     0C 17 30 20 
0e36a     36 2F 31 25 
0e36e     25 3D 4D 36 
0e372     1F 1B E2 CD | 	byte	$0c, $17, $30, $20, $36, $2f, $31, $25, $25, $3d, $4d, $36, $1f, $1b, $e2, $cd
0e376     B2 C2 C5 CD 
0e37a     C3 D7 CF BF 
0e37e     C5 E6 FA 14 
0e382     27 38 44 27 | 	byte	$b2, $c2, $c5, $cd, $c3, $d7, $cf, $bf, $c5, $e6, $fa, $14, $27, $38, $44, $27
0e386     20 1E 1A 0F 
0e38a     10 12 03 E6 
0e38e     C9 C8 C0 BB 
0e392     CE EC F4 FC | 	byte	$20, $1e, $1a, $0f, $10, $12, $03, $e6, $c9, $c8, $c0, $bb, $ce, $ec, $f4, $fc
0e396     FF 06 14 05 
0e39a     1B 35 3A 30 
0e39e     3B 27 17 FF 
0e3a2     F0 F6 F5 E6 | 	byte	$ff, $06, $14, $05, $1b, $35, $3a, $30, $3b, $27, $17, $ff, $f0, $f6, $f5, $e6
0e3a6     EC ED D8 D3 
0e3aa     D5 DF F0 FB 
0e3ae     0D 23 20 18 
0e3b2     22 1D 1A 20 | 	byte	$ec, $ed, $d8, $d3, $d5, $df, $f0, $fb, $0d, $23, $20, $18, $22, $1d, $1a, $20
0e3b6     20 20 1C 00 
0e3ba     F9 EC D9 D5 
0e3be     DD E6 E8 ED 
0e3c2     ED F4 F2 F5 | 	byte	$20, $20, $1c, $00, $f9, $ec, $d9, $d5, $dd, $e6, $e8, $ed, $ed, $f4, $f2, $f5
0e3c6     08 1A 1E 29 
0e3ca     2C 25 1C 0F 
0e3ce     0A 09 02 FD 
0e3d2     00 F5 E3 DD | 	byte	$08, $1a, $1e, $29, $2c, $25, $1c, $0f, $0a, $09, $02, $fd, $00, $f5, $e3, $dd
0e3d6     D8 DC E2 EE 
0e3da     FF 08 06 0B 
0e3de     0E 0E 13 1B 
0e3e2     22 25 1C 14 | 	byte	$d8, $dc, $e2, $ee, $ff, $08, $06, $0b, $0e, $0e, $13, $1b, $22, $25, $1c, $14
0e3e6     0D FB F0 F0 
0e3ea     EF EE EE DB 
0e3ee     F0 FF 0B 2E 
0e3f2     20 F8 0E 12 | 	byte	$0d, $fb, $f0, $f0, $ef, $ee, $ee, $db, $f0, $ff, $0b, $2e, $20, $f8, $0e, $12
0e3f6     F1 DF 07 25 
0e3fa     00 E0 02 F7 
0e3fe     BB C2 F9 FB 
0e402     F3 FD 16 1F | 	byte	$f1, $df, $07, $25, $00, $e0, $02, $f7, $bb, $c2, $f9, $fb, $f3, $fd, $16, $1f
0e406     EB F4 19 16 
0e40a     07 12 24 1C 
0e40e     FA E1 F9 FA 
0e412     DA E1 10 FA | 	byte	$eb, $f4, $19, $16, $07, $12, $24, $1c, $fa, $e1, $f9, $fa, $da, $e1, $10, $fa
0e416     ED E6 F7 F9 
0e41a     DE F9 1B 23 
0e41e     FB 28 1F 15 
0e422     0F 11 23 29 | 	byte	$ed, $e6, $f7, $f9, $de, $f9, $1b, $23, $fb, $28, $1f, $15, $0f, $11, $23, $29
0e426     0F 26 46 1E 
0e42a     10 E6 00 D2 
0e42e     DF C3 F4 E1 
0e432     D2 D0 D3 D7 | 	byte	$0f, $26, $46, $1e, $10, $e6, $00, $d2, $df, $c3, $f4, $e1, $d2, $d0, $d3, $d7
0e436     CD F1 0E 17 
0e43a     23 1E 2D 1B 
0e43e     05 0E 16 14 
0e442     0D FE 08 E4 | 	byte	$cd, $f1, $0e, $17, $23, $1e, $2d, $1b, $05, $0e, $16, $14, $0d, $fe, $08, $e4
0e446     C4 D4 DF D3 
0e44a     EA FF FD 06 
0e44e     F3 F7 12 05 
0e452     13 35 2C 26 | 	byte	$c4, $d4, $df, $d3, $ea, $ff, $fd, $06, $f3, $f7, $12, $05, $13, $35, $2c, $26
0e456     1A 0D 04 FD 
0e45a     F0 04 07 F5 
0e45e     F5 F0 DF E0 
0e462     E2 EE 09 07 | 	byte	$1a, $0d, $04, $fd, $f0, $04, $07, $f5, $f5, $f0, $df, $e0, $e2, $ee, $09, $07
0e466     0A 1A 0D 06 
0e46a     08 10 14 19 
0e46e     11 16 0E F3 
0e472     EF F0 E9 ED | 	byte	$0a, $1a, $0d, $06, $08, $10, $14, $19, $11, $16, $0e, $f3, $ef, $f0, $e9, $ed
0e476     F5 F8 FB F0 
0e47a     EE F9 FA FC 
0e47e     10 17 18 18 
0e482     10 0E 0B 00 | 	byte	$f5, $f8, $fb, $f0, $ee, $f9, $fa, $fc, $10, $17, $18, $18, $10, $0e, $0b, $00
0e486     05 0C 03 FF 
0e48a     FB F1 EB E6 
0e48e     E8 F8 FD FF 
0e492     0E 0A F4 04 | 	byte	$05, $0c, $03, $ff, $fb, $f1, $eb, $e6, $e8, $f8, $fd, $ff, $0e, $0a, $f4, $04
0e496     07 16 31 53 
0e49a     4F 1B 0E 16 
0e49e     E2 BB EB 04 
0e4a2     DB E0 E8 CE | 	byte	$07, $16, $31, $53, $4f, $1b, $0e, $16, $e2, $bb, $eb, $04, $db, $e0, $e8, $ce
0e4a6     BC AC CC 0B 
0e4aa     FC 13 36 26 
0e4ae     0C 01 14 1D 
0e4b2     21 20 2C 26 | 	byte	$bc, $ac, $cc, $0b, $fc, $13, $36, $26, $0c, $01, $14, $1d, $21, $20, $2c, $26
0e4b6     F3 CD D8 CD 
0e4ba     D2 CC 06 00 
0e4be     E9 EB F6 E8 
0e4c2     F6 02 32 3B | 	byte	$f3, $cd, $d8, $cd, $d2, $cc, $06, $00, $e9, $eb, $f6, $e8, $f6, $02, $32, $3b
0e4c6     29 2C 2C 11 
0e4ca     F3 11 10 17 
0e4ce     0D 05 07 EE 
0e4d2     E4 E0 09 FA | 	byte	$29, $2c, $2c, $11, $f3, $11, $10, $17, $0d, $05, $07, $ee, $e4, $e0, $09, $fa
0e4d6     19 18 14 02 
0e4da     EA DD EE F2 
0e4de     F8 12 0B F9 
0e4e2     E8 DD DD E4 | 	byte	$19, $18, $14, $02, $ea, $dd, $ee, $f2, $f8, $12, $0b, $f9, $e8, $dd, $dd, $e4
0e4e6     F1 0A 1B 0B 
0e4ea     FC FE EF E8 
0e4ee     F1 04 11 13 
0e4f2     06 05 F7 E4 | 	byte	$f1, $0a, $1b, $0b, $fc, $fe, $ef, $e8, $f1, $04, $11, $13, $06, $05, $f7, $e4
0e4f6     E4 FF 04 0C 
0e4fa     11 10 03 F3 
0e4fe     F2 FD 09 0F 
0e502     1B 21 13 03 | 	byte	$e4, $ff, $04, $0c, $11, $10, $03, $f3, $f2, $fd, $09, $0f, $1b, $21, $13, $03
0e506     FE FD FE 01 
0e50a     0A 0C 04 F5 
0e50e     EE EF ED EE 
0e512     F8 07 01 FB | 	byte	$fe, $fd, $fe, $01, $0a, $0c, $04, $f5, $ee, $ef, $ed, $ee, $f8, $07, $01, $fb
0e516     09 FF 00 F9 
0e51a     03 0F 10 0E 
0e51e     0E 08 F9 FC 
0e522     FA F3 00 06 | 	byte	$09, $ff, $00, $f9, $03, $0f, $10, $0e, $0e, $08, $f9, $fc, $fa, $f3, $00, $06
0e526     FB FA 00 F0 
0e52a     F7 F1 0A FD 
0e52e     14 F1 1B F7 
0e532     F1 FA 05 00 | 	byte	$fb, $fa, $00, $f0, $f7, $f1, $0a, $fd, $14, $f1, $1b, $f7, $f1, $fa, $05, $00
0e536     08 09 08 21 
0e53a     09 1E FC 13 
0e53e     FC 0B F2 03 
0e542     FC EE F9 E7 | 	byte	$08, $09, $08, $21, $09, $1e, $fc, $13, $fc, $0b, $f2, $03, $fc, $ee, $f9, $e7
0e546     F3 DE FB EE 
0e54a     02 FD 05 0B 
0e54e     FD 06 0E 0B 
0e552     0B 12 0A 0E | 	byte	$f3, $de, $fb, $ee, $02, $fd, $05, $0b, $fd, $06, $0e, $0b, $0b, $12, $0a, $0e
0e556     F9 FE F8 F9 
0e55a     F7 F5 00 F7 
0e55e     F7 F6 F4 00 
0e562     FA 08 0C 0F | 	byte	$f9, $fe, $f8, $f9, $f7, $f5, $00, $f7, $f7, $f6, $f4, $00, $fa, $08, $0c, $0f
0e566     0A 10 0A 07 
0e56a     EF 02 22 1E 
0e56e     35 3B 1F 18 
0e572     F1 CA EB E3 | 	byte	$0a, $10, $0a, $07, $ef, $02, $22, $1e, $35, $3b, $1f, $18, $f1, $ca, $eb, $e3
0e576     D7 F6 F2 E7 
0e57a     CB B9 D0 E6 
0e57e     E6 0E 34 27 
0e582     15 17 0E 09 | 	byte	$d7, $f6, $f2, $e7, $cb, $b9, $d0, $e6, $e6, $0e, $34, $27, $15, $17, $0e, $09
0e586     01 0F 24 13 
0e58a     F8 F5 E1 CB 
0e58e     C5 D8 EE FA 
0e592     F4 09 06 FF | 	byte	$01, $0f, $24, $13, $f8, $f5, $e1, $cb, $c5, $d8, $ee, $fa, $f4, $09, $06, $ff
0e596     EF 11 12 23 
0e59a     2C 30 2F 16 
0e59e     08 13 03 F8 
0e5a2     0B 03 08 F0 | 	byte	$ef, $11, $12, $23, $2c, $30, $2f, $16, $08, $13, $03, $f8, $0b, $03, $08, $f0
0e5a6     E7 E3 F1 DC 
0e5aa     F2 18 10 1D 
0e5ae     21 26 10 01 
0e5b2     00 0F 04 F3 | 	byte	$e7, $e3, $f1, $dc, $f2, $18, $10, $1d, $21, $26, $10, $01, $00, $0f, $04, $f3
0e5b6     00 F3 DB CE 
0e5ba     D2 CE D4 DD 
0e5be     F1 FE FB FA 
0e5c2     09 09 09 19 | 	byte	$00, $f3, $db, $ce, $d2, $ce, $d4, $dd, $f1, $fe, $fb, $fa, $09, $09, $09, $19
0e5c6     27 2C 25 1B 
0e5ca     14 01 F1 EA 
0e5ce     F8 F5 EF F5 
0e5d2     EE E7 E0 E7 | 	byte	$27, $2c, $25, $1b, $14, $01, $f1, $ea, $f8, $f5, $ef, $f5, $ee, $e7, $e0, $e7
0e5d6     F7 04 0E 1F 
0e5da     22 1C 15 15 
0e5de     16 15 15 1A 
0e5e2     13 FC F3 E3 | 	byte	$f7, $04, $0e, $1f, $22, $1c, $15, $15, $16, $15, $15, $1a, $13, $fc, $f3, $e3
0e5e6     DE D7 DE EA 
0e5ea     EF ED EF F6 
0e5ee     F1 F7 F5 23 
0e5f2     0E 2A 17 2F | 	byte	$de, $d7, $de, $ea, $ef, $ed, $ef, $f6, $f1, $f7, $f5, $23, $0e, $2a, $17, $2f
0e5f6     11 12 1B 1A 
0e5fa     4A 24 41 1F 
0e5fe     F1 DB CB C7 
0e602     BA F2 D4 F9 | 	byte	$11, $12, $1b, $1a, $4a, $24, $41, $1f, $f1, $db, $cb, $c7, $ba, $f2, $d4, $f9
0e606     DC C8 DA D5 
0e60a     E2 18 2F 34 
0e60e     39 2E 18 0C 
0e612     F2 05 06 0F | 	byte	$dc, $c8, $da, $d5, $e2, $18, $2f, $34, $39, $2e, $18, $0c, $f2, $05, $06, $0f
0e616     F9 02 E1 C9 
0e61a     C1 C5 E4 F2 
0e61e     06 1B 1A 0D 
0e622     03 0C 10 15 | 	byte	$f9, $02, $e1, $c9, $c1, $c5, $e4, $f2, $06, $1b, $1a, $0d, $03, $0c, $10, $15
0e626     28 3C 32 14 
0e62a     10 01 EE D8 
0e62e     FE FD 17 FB 
0e632     13 0C FD EB | 	byte	$28, $3c, $32, $14, $10, $01, $ee, $d8, $fe, $fd, $17, $fb, $13, $0c, $fd, $eb
0e636     10 E7 21 EA 
0e63a     26 E6 0F CF 
0e63e     EF F1 D2 0E 
0e642     DD 1A EA 04 | 	byte	$10, $e7, $21, $ea, $26, $e6, $0f, $cf, $ef, $f1, $d2, $0e, $dd, $1a, $ea, $04
0e646     EB 03 F1 FD 
0e64a     0D 10 08 0A 
0e64e     05 F1 06 D9 
0e652     12 F9 04 FF | 	byte	$eb, $03, $f1, $fd, $0d, $10, $08, $0a, $05, $f1, $06, $d9, $12, $f9, $04, $ff
0e656     04 F8 EA F0 
0e65a     F4 01 02 05 
0e65e     16 0A F9 05 
0e662     02 06 07 10 | 	byte	$04, $f8, $ea, $f0, $f4, $01, $02, $05, $16, $0a, $f9, $05, $02, $06, $07, $10
0e666     14 0E FD FD 
0e66a     FE F4 F3 07 
0e66e     02 07 FD FD 
0e672     FE F5 F8 05 | 	byte	$14, $0e, $fd, $fd, $fe, $f4, $f3, $07, $02, $07, $fd, $fd, $fe, $f5, $f8, $05
0e676     07 02 07 06 
0e67a     01 FD FE 00 
0e67e     07 FF 05 08 
0e682     FE FB F9 FF | 	byte	$07, $02, $07, $06, $01, $fd, $fe, $00, $07, $ff, $05, $08, $fe, $fb, $f9, $ff
0e686     FC 01 02 0A 
0e68a     02 FE 00 02 
0e68e     FE 03 08 08 
0e692     07 00 02 FE | 	byte	$fc, $01, $02, $0a, $02, $fe, $00, $02, $fe, $03, $08, $08, $07, $00, $02, $fe
0e696     FB FB 04 02 
0e69a     01 02 01 00 
0e69e     FD 00 06 0B 
0e6a2     0C 14 17 16 | 	byte	$fb, $fb, $04, $02, $01, $02, $01, $00, $fd, $00, $06, $0b, $0c, $14, $17, $16
0e6a6     27 09 E8 D5 
0e6aa     03 00 C3 DE 
0e6ae     2A E6 B7 F5 
0e6b2     04 E2 EE 05 | 	byte	$27, $09, $e8, $d5, $03, $00, $c3, $de, $2a, $e6, $b7, $f5, $04, $e2, $ee, $05
0e6b6     2B 1F E4 1A 
0e6ba     2A EB F6 17 
0e6be     1B 03 F0 FA 
0e6c2     07 DC C9 02 | 	byte	$2b, $1f, $e4, $1a, $2a, $eb, $f6, $17, $1b, $03, $f0, $fa, $07, $dc, $c9, $02
0e6c6     12 E6 FC 12 
0e6ca     0D ED E9 1A 
0e6ce     1B FC 18 33 
0e6d2     18 F5 FE 10 | 	byte	$12, $e6, $fc, $12, $0d, $ed, $e9, $1a, $1b, $fc, $18, $33, $18, $f5, $fe, $10
0e6d6     FC EC FB 1E 
0e6da     F9 E5 FD 09 
0e6de     EE F6 02 25 
0e6e2     08 ED 13 0A | 	byte	$fc, $ec, $fb, $1e, $f9, $e5, $fd, $09, $ee, $f6, $02, $25, $08, $ed, $13, $0a
0e6e6     E7 E9 0A 03 
0e6ea     F2 F1 FD FD 
0e6ee     D9 E0 06 01 
0e6f2     EF 0A 10 0C | 	byte	$e7, $e9, $0a, $03, $f2, $f1, $fd, $fd, $d9, $e0, $06, $01, $ef, $0a, $10, $0c
0e6f6     F2 FA 17 03 
0e6fa     F6 0D 18 FD 
0e6fe     F6 00 FC 01 
0e702     E4 06 0E F3 | 	byte	$f2, $fa, $17, $03, $f6, $0d, $18, $fd, $f6, $00, $fc, $01, $e4, $06, $0e, $f3
0e706     F6 02 03 F1 
0e70a     FB 0F 0F 09 
0e70e     01 13 13 EE 
0e712     05 11 07 FF | 	byte	$f6, $02, $03, $f1, $fb, $0f, $0f, $09, $01, $13, $13, $ee, $05, $11, $07, $ff
0e716     01 12 FD F2 
0e71a     00 07 FF ED 
0e71e     03 FF E9 E9 
0e722     F5 FD F1 F3 | 	byte	$01, $12, $fd, $f2, $00, $07, $ff, $ed, $03, $ff, $e9, $e9, $f5, $fd, $f1, $f3
0e726     06 FF EA FD 
0e72a     04 01 0C 19 
0e72e     20 2E 33 36 
0e732     0C 16 1E E4 | 	byte	$06, $ff, $ea, $fd, $04, $01, $0c, $19, $20, $2e, $33, $36, $0c, $16, $1e, $e4
0e736     F1 09 DC E9 
0e73a     DD CC E4 C9 
0e73e     CA F9 F9 F3 
0e742     1A 19 11 1E | 	byte	$f1, $09, $dc, $e9, $dd, $cc, $e4, $c9, $ca, $f9, $f9, $f3, $1a, $19, $11, $1e
0e746     11 1E 24 15 
0e74a     10 21 FF E6 
0e74e     F2 DC E5 DC 
0e752     E6 F5 EF E3 | 	byte	$11, $1e, $24, $15, $10, $21, $ff, $e6, $f2, $dc, $e5, $dc, $e6, $f5, $ef, $e3
0e756     F6 00 F8 08 
0e75a     1D 22 20 1C 
0e75e     1E 17 02 02 
0e762     0D 01 FB F7 | 	byte	$f6, $00, $f8, $08, $1d, $22, $20, $1c, $1e, $17, $02, $02, $0d, $01, $fb, $f7
0e766     F3 E7 E0 DF 
0e76a     F2 F1 F7 08 
0e76e     0A 07 07 0E 
0e772     13 15 11 1D | 	byte	$f3, $e7, $e0, $df, $f2, $f1, $f7, $08, $0a, $07, $07, $0e, $13, $15, $11, $1d
0e776     1B 07 03 FF 
0e77a     F4 EF EC F0 
0e77e     F7 EA EB F7 
0e782     EE F1 03 07 | 	byte	$1b, $07, $03, $ff, $f4, $ef, $ec, $f0, $f7, $ea, $eb, $f7, $ee, $f1, $03, $07
0e786     0E 15 11 17 
0e78a     13 06 0C 0F 
0e78e     01 03 01 F7 
0e792     F3 EA E7 F1 | 	byte	$0e, $15, $11, $17, $13, $06, $0c, $0f, $01, $03, $01, $f7, $f3, $ea, $e7, $f1
0e796     EF EF 00 01 
0e79a     FD 03 06 09 
0e79e     0D 0F 14 17 
0e7a2     0B 0A 0A FE | 	byte	$ef, $ef, $00, $01, $fd, $03, $06, $09, $0d, $0f, $14, $17, $0b, $0a, $0a, $fe
0e7a6     F9 FD FC F9 
0e7aa     F5 F4 F6 F0 
0e7ae     F0 FA 00 01 
0e7b2     08 0D 0D 0B | 	byte	$f9, $fd, $fc, $f9, $f5, $f4, $f6, $f0, $f0, $fa, $00, $01, $08, $0d, $0d, $0b
0e7b6     0A 0F 0F 0B 
0e7ba     0B 0B 02 F8 
0e7be     F4 EF E8 D6 
0e7c2     F2 DF F4 DF | 	byte	$0a, $0f, $0f, $0b, $0b, $0b, $02, $f8, $f4, $ef, $e8, $d6, $f2, $df, $f4, $df
0e7c6     00 F1 FC 02 
0e7ca     01 18 07 23 
0e7ce     24 26 34 3F 
0e7d2     1E 01 13 03 | 	byte	$00, $f1, $fc, $02, $01, $18, $07, $23, $24, $26, $34, $3f, $1e, $01, $13, $03
0e7d6     E7 D2 F5 EE 
0e7da     CD C7 E5 D8 
0e7de     CA E4 02 12 
0e7e2     04 13 31 1E | 	byte	$e7, $d2, $f5, $ee, $cd, $c7, $e5, $d8, $ca, $e4, $02, $12, $04, $13, $31, $1e
0e7e6     0A 20 24 1E 
0e7ea     06 0C 09 F5 
0e7ee     D0 E0 E9 DC 
0e7f2     D3 F5 FA F0 | 	byte	$0a, $20, $24, $1e, $06, $0c, $09, $f5, $d0, $e0, $e9, $dc, $d3, $f5, $fa, $f0
0e7f6     EC 01 13 07 
0e7fa     10 2F 2D 1A 
0e7fe     17 1E 10 FA 
0e802     F9 05 FC E5 | 	byte	$ec, $01, $13, $07, $10, $2f, $2d, $1a, $17, $1e, $10, $fa, $f9, $05, $fc, $e5
0e806     E9 F0 E0 D7 
0e80a     E8 FC FB FD 
0e80e     0D 1B 0E 0A 
0e812     1B 1F 13 11 | 	byte	$e9, $f0, $e0, $d7, $e8, $fc, $fb, $fd, $0d, $1b, $0e, $0a, $1b, $1f, $13, $11
0e816     18 13 FE F0 
0e81a     F8 EF E1 E3 
0e81e     F5 EF E8 EF 
0e822     FC FE FB 09 | 	byte	$18, $13, $fe, $f0, $f8, $ef, $e1, $e3, $f5, $ef, $e8, $ef, $fc, $fe, $fb, $09
0e826     1B 16 12 1A 
0e82a     1A 10 05 08 
0e82e     0A FE F2 F8 
0e832     F6 E5 E3 EC | 	byte	$1b, $16, $12, $1a, $1a, $10, $05, $08, $0a, $fe, $f2, $f8, $f6, $e5, $e3, $ec
0e836     F1 F0 F5 03 
0e83a     0A 03 06 15 
0e83e     14 0D 14 19 
0e842     11 06 03 03 | 	byte	$f1, $f0, $f5, $03, $0a, $03, $06, $15, $14, $0d, $14, $19, $11, $06, $03, $03
0e846     F9 EF F5 F9 
0e84a     F0 ED F5 F3 
0e84e     EA F7 02 05 
0e852     0F 13 1E 16 | 	byte	$f9, $ef, $f5, $f9, $f0, $ed, $f5, $f3, $ea, $f7, $02, $05, $0f, $13, $1e, $16
0e856     0F 13 12 0A 
0e85a     00 03 FC F6 
0e85e     E1 E6 E4 E1 
0e862     DB E9 F8 F6 | 	byte	$0f, $13, $12, $0a, $00, $03, $fc, $f6, $e1, $e6, $e4, $e1, $db, $e9, $f8, $f6
0e866     F8 08 0C 0D 
0e86a     0A 1E 19 1D 
0e86e     14 1C 17 0F 
0e872     0F 1D 01 FD | 	byte	$f8, $08, $0c, $0d, $0a, $1e, $19, $1d, $14, $1c, $17, $0f, $0f, $1d, $01, $fd
0e876     F2 F6 DE EB 
0e87a     EB EE F4 E9 
0e87e     F5 FA F5 F8 
0e882     07 0F 0F 11 | 	byte	$f2, $f6, $de, $eb, $eb, $ee, $f4, $e9, $f5, $fa, $f5, $f8, $07, $0f, $0f, $11
0e886     13 08 10 F0 
0e88a     12 F5 01 F1 
0e88e     FE F0 EA E7 
0e892     F3 F2 F5 FF | 	byte	$13, $08, $10, $f0, $12, $f5, $01, $f1, $fe, $f0, $ea, $e7, $f3, $f2, $f5, $ff
0e896     06 08 00 0F 
0e89a     09 13 0C 0C 
0e89e     1C 04 05 06 
0e8a2     FB F3 F1 F8 | 	byte	$06, $08, $00, $0f, $09, $13, $0c, $0c, $1c, $04, $05, $06, $fb, $f3, $f1, $f8
0e8a6     F4 F9 EC FC 
0e8aa     FB F2 FD 06 
0e8ae     09 0A 0F 11 
0e8b2     10 06 08 0B | 	byte	$f4, $f9, $ec, $fc, $fb, $f2, $fd, $06, $09, $0a, $0f, $11, $10, $06, $08, $0b
0e8b6     05 FE 05 00 
0e8ba     F5 F5 F0 F6 
0e8be     F1 F2 FF 00 
0e8c2     FD 01 08 05 | 	byte	$05, $fe, $05, $00, $f5, $f5, $f0, $f6, $f1, $f2, $ff, $00, $fd, $01, $08, $05
0e8c6     07 0A 10 0E 
0e8ca     0A 07 0A 00 
0e8ce     FA FD FC F8 
0e8d2     F6 F8 FA F7 | 	byte	$07, $0a, $10, $0e, $0a, $07, $0a, $00, $fa, $fd, $fc, $f8, $f6, $f8, $fa, $f7
0e8d6     F4 FE 00 00 
0e8da     04 0A 0C 08 
0e8de     08 0B 08 03 
0e8e2     02 05 FF F9 | 	byte	$f4, $fe, $00, $00, $04, $0a, $0c, $08, $08, $0b, $08, $03, $02, $05, $ff, $f9
0e8e6     F9 F3 F0 F0 
0e8ea     F3 F6 FB FB 
0e8ee     01 05 02 0B 
0e8f2     0C 0C 10 0A | 	byte	$f9, $f3, $f0, $f0, $f3, $f6, $fb, $fb, $01, $05, $02, $0b, $0c, $0c, $10, $0a
0e8f6     0B 07 04 FE 
0e8fa     FF FC FA F9 
0e8fe     F8 F9 FC FA 
0e902     00 F8 00 00 | 	byte	$0b, $07, $04, $fe, $ff, $fc, $fa, $f9, $f8, $f9, $fc, $fa, $00, $f8, $00, $00
0e906     00 00 00 00 
0e90a     00 00 00 00 | 	byte	$00[8]
0e90e     05 05 00 FF 
0e912     00 00 00 00 
0e916     00 00 00 00 
0e91a     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e91e     00 00 00 00 
      ...             
0e942     00 00 00 00 
0e946     00 00       | 	byte	$00[42]
0e948     FF FF FF FF 
0e94c     FF FF FF FF 
0e950     FF FF FF FF 
0e954     FF          | 	byte	$ff[13]
0e955     00 00 00 00 
0e959     04 05 02 FD 
0e95d     F8 F8 FB FF 
0e961     02 02 01 03 | 	byte	$00, $00, $00, $00, $04, $05, $02, $fd, $f8, $f8, $fb, $ff, $02, $02, $01, $03
0e965     05 01 FC F9 
0e969     FC FF 03 02 
0e96d     FE 00 04 03 
0e971     FE FA F9 FB | 	byte	$05, $01, $fc, $f9, $fc, $ff, $03, $02, $fe, $00, $04, $03, $fe, $fa, $f9, $fb
0e975     00 04 04 01 
0e979     01 01 00 FD 
0e97d     FB FB FC 00 
0e981     03 02 FF FE | 	byte	$00, $04, $04, $01, $01, $01, $00, $fd, $fb, $fb, $fc, $00, $03, $02, $ff, $fe
0e985     FE FD FD FE 
0e989     FD FE 01 02 
0e98d     01 FF FD FD 
0e991     FD FE FF FF | 	byte	$fe, $fd, $fd, $fe, $fd, $fe, $01, $02, $01, $ff, $fd, $fd, $fd, $fe, $ff, $ff
0e995     FF 00 01 00 
0e999     FF FE FD FE 
0e99d     00 00 00 FF 
0e9a1     00 00 FF FE | 	byte	$ff, $00, $01, $00, $ff, $fe, $fd, $fe, $00, $00, $00, $ff, $00, $00, $ff, $fe
0e9a5     FE FE FF 00 
0e9a9     00 00 FF FE 
0e9ad     FE FF FE FF 
0e9b1     FF FF 00 00 | 	byte	$fe, $fe, $ff, $00, $00, $00, $ff, $fe, $fe, $ff, $fe, $ff, $ff, $ff, $00, $00
0e9b5     FF FE FE FF 
0e9b9     FF FF FF FF 
0e9bd     FF FF 00 00 
0e9c1     FF 00 02 02 | 	byte	$ff, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $ff, $00, $02, $02
0e9c5     02 FF FD FD 
0e9c9     FD FF FF FD 
0e9cd     FC FF 06 07 
0e9d1     01 FA FA FD | 	byte	$02, $ff, $fd, $fd, $fd, $ff, $ff, $fd, $fc, $ff, $06, $07, $01, $fa, $fa, $fd
0e9d5     02 01 FE FD 
0e9d9     02 04 03 00 
0e9dd     FB FA FE 03 
0e9e1     03 01 01 02 | 	byte	$02, $01, $fe, $fd, $02, $04, $03, $00, $fb, $fa, $fe, $03, $03, $01, $01, $02
0e9e5     04 03 FF FD 
0e9e9     FE 00 03 04 
0e9ed     03 01 00 01 
0e9f1     00 FF FE FE | 	byte	$04, $03, $ff, $fd, $fe, $00, $03, $04, $03, $01, $00, $01, $00, $ff, $fe, $fe
0e9f5     00 02 03 01 
0e9f9     FF FE FE FF 
0e9fd     FF 00 00 00 
0ea01     01 02 01 FF | 	byte	$00, $02, $03, $01, $ff, $fe, $fe, $ff, $ff, $00, $00, $00, $01, $02, $01, $ff
0ea05     FE FF 01 01 
0ea09     01 01 01 01 
0ea0d     01 00 00 FF 
0ea11     01 03 05 05 | 	byte	$fe, $ff, $01, $01, $01, $01, $01, $01, $01, $00, $00, $ff, $01, $03, $05, $05
0ea15     01 FD FA FA 
0ea19     FA FB FB FF 
0ea1d     0D 12 08 F8 
0ea21     F2 F6 FD 02 | 	byte	$01, $fd, $fa, $fa, $fa, $fb, $fb, $ff, $0d, $12, $08, $f8, $f2, $f6, $fd, $02
0ea25     06 04 01 02 
0ea29     06 03 FC F6 
0ea2d     F9 00 04 05 
0ea31     05 05 04 03 | 	byte	$06, $04, $01, $02, $06, $03, $fc, $f6, $f9, $00, $04, $05, $05, $05, $04, $03
0ea35     00 FB F9 FB 
0ea39     02 06 07 05 
0ea3d     01 FE FE FE 
0ea41     FD FC FF 04 | 	byte	$00, $fb, $f9, $fb, $02, $06, $07, $05, $01, $fe, $fe, $fe, $fd, $fc, $ff, $04
0ea45     06 05 02 FE 
0ea49     FB FC FF 01 
0ea4d     02 01 01 02 
0ea51     01 FE FC FD | 	byte	$06, $05, $02, $fe, $fb, $fc, $ff, $01, $02, $01, $01, $02, $01, $fe, $fc, $fd
0ea55     FF 02 03 06 
0ea59     08 01 FE FA 
0ea5d     FD FC FB F7 
0ea61     F5 F8 09 1D | 	byte	$ff, $02, $03, $06, $08, $01, $fe, $fa, $fd, $fc, $fb, $f7, $f5, $f8, $09, $1d
0ea65     15 FA E6 EC 
0ea69     FA 07 0B 08 
0ea6d     02 00 03 04 
0ea71     FE F5 F3 FC | 	byte	$15, $fa, $e6, $ec, $fa, $07, $0b, $08, $02, $00, $03, $04, $fe, $f5, $f3, $fc
0ea75     07 09 05 03 
0ea79     04 03 FF FB 
0ea7d     F8 F9 FF 06 
0ea81     07 04 01 FF | 	byte	$07, $09, $05, $03, $04, $03, $ff, $fb, $f8, $f9, $ff, $06, $07, $04, $01, $ff
0ea85     FD FD FD FB 
0ea89     FC 02 07 07 
0ea8d     02 FC FA FA 
0ea91     FD 01 03 02 | 	byte	$fd, $fd, $fd, $fb, $fc, $02, $07, $07, $02, $fc, $fa, $fa, $fd, $01, $03, $02
0ea95     02 07 07 02 
0ea99     FC F9 FB FD 
0ea9d     FC F9 F6 F0 
0eaa1     02 22 21 FE | 	byte	$02, $07, $07, $02, $fc, $f9, $fb, $fd, $fc, $f9, $f6, $f0, $02, $22, $21, $fe
0eaa5     DF E5 F9 08 
0eaa9     0C 09 02 FC 
0eaad     FF 03 02 F8 
0eab1     F2 F7 05 0D | 	byte	$df, $e5, $f9, $08, $0c, $09, $02, $fc, $ff, $03, $02, $f8, $f2, $f7, $05, $0d
0eab5     07 FF 02 06 
0eab9     03 FB F7 F8 
0eabd     FF 07 0B 06 
0eac1     FE FD FF 00 | 	byte	$07, $ff, $02, $06, $03, $fb, $f7, $f8, $ff, $07, $0b, $06, $fe, $fd, $ff, $00
0eac5     FF FC FA FE 
0eac9     07 0B 06 FD 
0eacd     F7 F7 02 0A 
0ead1     08 05 FB F8 | 	byte	$ff, $fc, $fa, $fe, $07, $0b, $06, $fd, $f7, $f7, $02, $0a, $08, $05, $fb, $f8
0ead5     F6 F5 EF EA 
0ead9     F3 21 36 18 
0eadd     E6 D6 E9 FE 
0eae1     0C 0F 0A 02 | 	byte	$f6, $f5, $ef, $ea, $f3, $21, $36, $18, $e6, $d6, $e9, $fe, $0c, $0f, $0a, $02
0eae5     01 07 07 FC 
0eae9     F0 ED F8 0A 
0eaed     13 0B 01 03 
0eaf1     07 00 F4 F1 | 	byte	$01, $07, $07, $fc, $f0, $ed, $f8, $0a, $13, $0b, $01, $03, $07, $00, $f4, $f1
0eaf5     FA 05 0B 0B 
0eaf9     06 FF FC FC 
0eafd     FD FB FA FE 
0eb01     07 0E 0D 03 | 	byte	$fa, $05, $0b, $0b, $06, $ff, $fc, $fc, $fd, $fb, $fa, $fe, $07, $0e, $0d, $03
0eb05     F7 FF 02 FE 
0eb09     07 F4 F2 EC 
0eb0d     F0 F6 16 37 
0eb11     1C EA CF EB | 	byte	$f7, $ff, $02, $fe, $07, $f4, $f2, $ec, $f0, $f6, $16, $37, $1c, $ea, $cf, $eb
0eb15     05 0F 09 09 
0eb19     06 00 FF 00 
0eb1d     FE F7 F4 FA 
0eb21     03 0D 0B 03 | 	byte	$05, $0f, $09, $09, $06, $00, $ff, $00, $fe, $f7, $f4, $fa, $03, $0d, $0b, $03
0eb25     FD 02 06 FE 
0eb29     F5 F7 02 09 
0eb2d     07 04 FF FD 
0eb31     FC FE FC FB | 	byte	$fd, $02, $06, $fe, $f5, $f7, $02, $09, $07, $04, $ff, $fd, $fc, $fe, $fc, $fb
0eb35     FF 06 07 06 
0eb39     03 07 09 F2 
0eb3d     FF F6 FD F4 
0eb41     EE EC EB 10 | 	byte	$ff, $06, $07, $06, $03, $07, $09, $f2, $ff, $f6, $fd, $f4, $ee, $ec, $eb, $10
0eb45     3F 2F F1 C2 
0eb49     DA 03 15 0F 
0eb4d     0C 05 FE FB 
0eb51     00 02 F4 EE | 	byte	$3f, $2f, $f1, $c2, $da, $03, $15, $0f, $0c, $05, $fe, $fb, $00, $02, $f4, $ee
0eb55     F5 05 10 10 
0eb59     09 FB F9 01 
0eb5d     04 FA F0 FC 
0eb61     0E 10 06 FD | 	byte	$f5, $05, $10, $10, $09, $fb, $f9, $01, $04, $fa, $f0, $fc, $0e, $10, $06, $fd
0eb65     FB FC FF FD 
0eb69     FB FD 04 0C 
0eb6d     0C 12 06 F2 
0eb71     F4 EE FC FC | 	byte	$fb, $fc, $ff, $fd, $fb, $fd, $04, $0c, $0c, $12, $06, $f2, $f4, $ee, $fc, $fc
0eb75     F9 EF E5 F8 
0eb79     3A 49 0A BD 
0eb7d     BD F6 1B 19 
0eb81     0D 0B 04 F6 | 	byte	$f9, $ef, $e5, $f8, $3a, $49, $0a, $bd, $bd, $f6, $1b, $19, $0d, $0b, $04, $f6
0eb85     F6 01 FC F0 
0eb89     F3 04 12 11 
0eb8d     0C 03 F8 F6 
0eb91     FF 05 FB F5 | 	byte	$f6, $01, $fc, $f0, $f3, $04, $12, $11, $0c, $03, $f8, $f6, $ff, $05, $fb, $f5
0eb95     04 15 0F FD 
0eb99     F6 FC 01 FF 
0eb9d     05 04 01 04 
0eba1     05 08 03 FA | 	byte	$04, $15, $0f, $fd, $f6, $fc, $01, $ff, $05, $04, $01, $04, $05, $08, $03, $fa
0eba5     ED E4 E4 E3 
0eba9     EB 37 61 33 
0ebad     CC A6 D6 10 
0ebb1     1D 0F 12 12 | 	byte	$ed, $e4, $e4, $e3, $eb, $37, $61, $33, $cc, $a6, $d6, $10, $1d, $0f, $12, $12
0ebb5     01 F3 F9 F9 
0ebb9     E9 E7 FF 17 
0ebbd     17 0D 0B 02 
0ebc1     F1 EE FF 06 | 	byte	$01, $f3, $f9, $f9, $e9, $e7, $ff, $17, $17, $0d, $0b, $02, $f1, $ee, $ff, $06
0ebc5     F9 F7 0C 1B 
0ebc9     0B F1 EF 09 
0ebcd     13 06 F2 ED 
0ebd1     02 08 0E 0A | 	byte	$f9, $f7, $0c, $1b, $0b, $f1, $ef, $09, $13, $06, $f2, $ed, $02, $08, $0e, $0a
0ebd5     F7 DE CF D4 
0ebd9     F1 46 62 27 
0ebdd     C2 A9 E0 15 
0ebe1     18 06 0D 14 | 	byte	$f7, $de, $cf, $d4, $f1, $46, $62, $27, $c2, $a9, $e0, $15, $18, $06, $0d, $14
0ebe5     07 FB FA F2 
0ebe9     DF E8 09 1F 
0ebed     13 06 0D 0C 
0ebf1     F6 E5 F3 04 | 	byte	$07, $fb, $fa, $f2, $df, $e8, $09, $1f, $13, $06, $0d, $0c, $f6, $e5, $f3, $04
0ebf5     00 FF 0F 1C 
0ebf9     0A F0 F9 06 
0ebfd     10 02 E3 E4 
0ec01     FE 1C 1D 02 | 	byte	$00, $ff, $0f, $1c, $0a, $f0, $f9, $06, $10, $02, $e3, $e4, $fe, $1c, $1d, $02
0ec05     DC C1 BA E7 
0ec09     50 6C 28 B7 
0ec0d     A8 EF 23 0F 
0ec11     F9 0D 1C 06 | 	byte	$dc, $c1, $ba, $e7, $50, $6c, $28, $b7, $a8, $ef, $23, $0f, $f9, $0d, $1c, $06
0ec15     F9 0B 08 DE 
0ec19     CF FB 29 1F 
0ec1d     02 07 16 02 
0ec21     E2 EB 06 05 | 	byte	$f9, $0b, $08, $de, $cf, $fb, $29, $1f, $02, $07, $16, $02, $e2, $eb, $06, $05
0ec25     F2 FE 21 23 
0ec29     0B F5 FF 06 
0ec2d     E5 DB EE 1A 
0ec31     25 0A F3 D6 | 	byte	$f2, $fe, $21, $23, $0b, $f5, $ff, $06, $e5, $db, $ee, $1a, $25, $0a, $f3, $d6
0ec35     C7 C4 25 68 
0ec39     50 D7 A4 DD 
0ec3d     30 27 EE F0 
0ec41     18 15 F2 F8 | 	byte	$c7, $c4, $25, $68, $50, $d7, $a4, $dd, $30, $27, $ee, $f0, $18, $15, $f2, $f8
0ec45     16 04 D7 DD 
0ec49     16 2B 04 F2 
0ec4d     0F 1C F5 DB 
0ec51     F9 16 04 E8 | 	byte	$16, $04, $d7, $dd, $16, $2b, $04, $f2, $0f, $1c, $f5, $db, $f9, $16, $04, $e8
0ec55     FC 23 33 0B 
0ec59     ED E7 E8 E8 
0ec5d     F0 11 1B 11 
0ec61     EF D6 CB D5 | 	byte	$fc, $23, $33, $0b, $ed, $e7, $e8, $e8, $f0, $11, $1b, $11, $ef, $d6, $cb, $d5
0ec65     32 68 43 CC 
0ec69     A4 E3 34 26 
0ec6d     E9 E9 19 1C 
0ec71     F2 EC 0E 0D | 	byte	$32, $68, $43, $cc, $a4, $e3, $34, $26, $e9, $e9, $19, $1c, $f2, $ec, $0e, $0d
0ec75     E5 DE 11 2B 
0ec79     06 EA 06 25 
0ec7d     04 D5 E2 15 
0ec81     1D F5 EB 1E | 	byte	$e5, $de, $11, $2b, $06, $ea, $06, $25, $04, $d5, $e2, $15, $1d, $f5, $eb, $1e
0ec85     39 0E DD DA 
0ec89     F0 F6 F7 04 
0ec8d     15 06 E9 D6 
0ec91     CE 12 5B 56 | 	byte	$39, $0e, $dd, $da, $f0, $f6, $f7, $04, $15, $06, $e9, $d6, $ce, $12, $5b, $56
0ec95     ED A5 C0 24 
0ec99     49 0D D9 F0 
0ec9d     14 03 EA FD 
0eca1     17 FE D9 F4 | 	byte	$ed, $a5, $c0, $24, $49, $0d, $d9, $f0, $14, $03, $ea, $fd, $17, $fe, $d9, $f4
0eca5     2D 29 EA D4 
0eca9     09 2B 03 D3 
0ecad     E7 1B 17 F6 
0ecb1     00 27 18 E8 | 	byte	$2d, $29, $ea, $d4, $09, $2b, $03, $d3, $e7, $1b, $17, $f6, $00, $27, $18, $e8
0ecb5     D2 E9 06 FD 
0ecb9     F2 06 08 F6 
0ecbd     D3 C8 1A 61 
0ecc1     58 E5 A3 BA | 	byte	$d2, $e9, $06, $fd, $f2, $06, $08, $f6, $d3, $c8, $1a, $61, $58, $e5, $a3, $ba
0ecc5     1B 48 18 E7 
0ecc9     F4 0F 00 E8 
0eccd     F8 1A 09 D9 
0ecd1     E0 24 42 0C | 	byte	$1b, $48, $18, $e7, $f4, $0f, $00, $e8, $f8, $1a, $09, $d9, $e0, $24, $42, $0c
0ecd5     D0 E3 1A 19 
0ecd9     E4 D8 08 26 
0ecdd     17 08 08 08 
0ece1     F4 D5 E5 02 | 	byte	$d0, $e3, $1a, $19, $e4, $d8, $08, $26, $17, $08, $08, $08, $f4, $d5, $e5, $02
0ece5     0A 00 FD FC 
0ece9     F5 CD D6 33 
0eced     69 3D C5 A2 
0ecf1     DF 3A 3B FB | 	byte	$0a, $00, $fd, $fc, $f5, $cd, $d6, $33, $69, $3d, $c5, $a2, $df, $3a, $3b, $fb
0ecf5     E1 01 11 F8 
0ecf9     EA 07 1F 02 
0ecfd     D8 E7 23 36 
0ed01     09 E0 F0 17 | 	byte	$e1, $01, $11, $f8, $ea, $07, $1f, $02, $d8, $e7, $23, $36, $09, $e0, $f0, $17
0ed05     11 E6 DE 02 
0ed09     27 27 0D F3 
0ed0d     F9 F1 E8 EE 
0ed11     FB 06 07 F7 | 	byte	$11, $e6, $de, $02, $27, $27, $0d, $f3, $f9, $f1, $e8, $ee, $fb, $06, $07, $f7
0ed15     F5 DD D5 1A 
0ed19     5F 55 E2 A3 
0ed1d     C1 25 4A 13 
0ed21     E5 F7 0E F7 | 	byte	$f5, $dd, $d5, $1a, $5f, $55, $e2, $a3, $c1, $25, $4a, $13, $e5, $f7, $0e, $f7
0ed25     E2 FE 24 13 
0ed29     E2 DE 16 36 
0ed2d     14 E1 E1 0A 
0ed31     1C 02 E8 ED | 	byte	$e2, $fe, $24, $13, $e2, $de, $16, $36, $14, $e1, $e1, $0a, $1c, $02, $e8, $ed
0ed35     10 2C 17 F1 
0ed39     EC EC F3 F9 
0ed3d     FD FC 02 F0 
0ed41     EB D9 DE 2F | 	byte	$10, $2c, $17, $f1, $ec, $ec, $f3, $f9, $fd, $fc, $02, $f0, $eb, $d9, $de, $2f
0ed45     65 46 CE A0 
0ed49     CF 33 46 07 
0ed4d     E1 FE 15 F0 
0ed51     D4 F8 2E 21 | 	byte	$65, $46, $ce, $a0, $cf, $33, $46, $07, $e1, $fe, $15, $f0, $d4, $f8, $2e, $21
0ed55     DF CF 0A 3E 
0ed59     25 E9 D9 FB 
0ed5d     14 03 F2 F7 
0ed61     12 25 05 F4 | 	byte	$df, $cf, $0a, $3e, $25, $e9, $d9, $fb, $14, $03, $f2, $f7, $12, $25, $05, $f4
0ed65     F3 EC E7 ED 
0ed69     FD 0F 04 F5 
0ed6d     E6 CD EC 40 
0ed71     66 22 B6 A2 | 	byte	$f3, $ec, $e7, $ed, $fd, $0f, $04, $f5, $e6, $cd, $ec, $40, $66, $22, $b6, $a2
0ed75     EF 48 35 F3 
0ed79     E7 10 14 DF 
0ed7d     CB 02 3C 24 
0ed81     DC D1 11 3E | 	byte	$ef, $48, $35, $f3, $e7, $10, $14, $df, $cb, $02, $3c, $24, $dc, $d1, $11, $3e
0ed85     19 DE DC 08 
0ed89     16 FC EC 08 
0ed8d     2D 0A E1 ED 
0ed91     01 02 E7 E1 | 	byte	$19, $de, $dc, $08, $16, $fc, $ec, $08, $2d, $0a, $e1, $ed, $01, $02, $e7, $e1
0ed95     FB 14 FE EC 
0ed99     CF EB 35 62 
0ed9d     2E C2 A1 DA 
0eda1     38 42 02 E3 | 	byte	$fb, $14, $fe, $ec, $cf, $eb, $35, $62, $2e, $c2, $a1, $da, $38, $42, $02, $e3
0eda5     05 1D F5 C8 
0eda9     E1 26 38 00 
0edad     D3 F3 2D 2C 
0edb1     F5 D5 F5 18 | 	byte	$05, $1d, $f5, $c8, $e1, $26, $38, $00, $d3, $f3, $2d, $2c, $f5, $d5, $f5, $18
0edb5     10 F3 FE 27 
0edb9     10 DD E0 00 
0edbd     14 F8 DD F2 
0edc1     09 02 E4 CF | 	byte	$10, $f3, $fe, $27, $10, $dd, $e0, $00, $14, $f8, $dd, $f2, $09, $02, $e4, $cf
0edc5     01 4E 5D 0B 
0edc9     AE A9 F9 44 
0edcd     2F EF E9 16 
0edd1     1E E7 C5 EE | 	byte	$01, $4e, $5d, $0b, $ae, $a9, $f9, $44, $2f, $ef, $e9, $16, $1e, $e7, $c5, $ee
0edd5     2E 2E F5 DC 
0edd9     08 2D 14 E4 
0eddd     E3 0C 19 FD 
0ede1     ED 12 37 FF | 	byte	$2e, $2e, $f5, $dc, $08, $2d, $14, $e4, $e3, $0c, $19, $fd, $ed, $12, $37, $ff
0ede5     D4 DD 02 0D 
0ede9     F1 E7 02 06 
0eded     F8 D2 DA 2A 
0edf1     62 42 D2 A2 | 	byte	$d4, $dd, $02, $0d, $f1, $e7, $02, $06, $f8, $d2, $da, $2a, $62, $42, $d2, $a2
0edf5     CF 32 49 02 
0edf9     D7 02 2F 09 
0edfd     C2 C8 19 43 
0ee01     16 DA E9 25 | 	byte	$cf, $32, $49, $02, $d7, $02, $2f, $09, $c2, $c8, $19, $43, $16, $da, $e9, $25
0ee05     2D F7 D4 F1 
0ee09     1F 1A F2 F8 
0ee0d     2B 1B DF CF 
0ee11     EA 1A 0A E5 | 	byte	$2d, $f7, $d4, $f1, $1f, $1a, $f2, $f8, $2b, $1b, $df, $cf, $ea, $1a, $0a, $e5
0ee15     E4 FF 03 E2 
0ee19     CB 20 66 54 
0ee1d     D7 A1 C7 32 
0ee21     53 09 D0 F6 | 	byte	$e4, $ff, $03, $e2, $cb, $20, $66, $54, $d7, $a1, $c7, $32, $53, $09, $d0, $f6
0ee25     2F 17 D0 C0 
0ee29     01 36 1E ED 
0ee2d     EE 1A 28 02 
0ee31     DA E4 0B 1A | 	byte	$2f, $17, $d0, $c0, $01, $36, $1e, $ed, $ee, $1a, $28, $02, $da, $e4, $0b, $1a
0ee35     06 0B 20 03 
0ee39     E4 DA EF 08 
0ee3d     FE F3 F6 FB 
0ee41     F2 CC E9 4A | 	byte	$06, $0b, $20, $03, $e4, $da, $ef, $08, $fe, $f3, $f6, $fb, $f2, $cc, $e9, $4a
0ee45     6A 1F B1 A1 
0ee49     F7 53 3B E9 
0ee4d     DB 17 2A EC 
0ee51     B9 DB 24 2E | 	byte	$6a, $1f, $b1, $a1, $f7, $53, $3b, $e9, $db, $17, $2a, $ec, $b9, $db, $24, $2e
0ee55     FB E3 11 33 
0ee59     14 DC D6 03 
0ee5d     20 07 F2 1C 
0ee61     2B F7 D6 D9 | 	byte	$fb, $e3, $11, $33, $14, $dc, $d6, $03, $20, $07, $f2, $1c, $2b, $f7, $d6, $d9
0ee65     07 0D F1 EA 
0ee69     F4 09 E8 C8 
0ee6d     09 5E 5F E6 
0ee71     A2 BC 2E 56 | 	byte	$07, $0d, $f1, $ea, $f4, $09, $e8, $c8, $09, $5e, $5f, $e6, $a2, $bc, $2e, $56
0ee75     0B CF F7 33 
0ee79     17 CA BD 05 
0ee7d     39 13 DA EA 
0ee81     2D 38 FB CA | 	byte	$0b, $cf, $f7, $33, $17, $ca, $bd, $05, $39, $13, $da, $ea, $2d, $38, $fb, $ca
0ee85     E3 19 1F F7 
0ee89     FC 29 13 E5 
0ee8d     CB ED 17 0A 
0ee91     E8 E6 FC 00 | 	byte	$e3, $19, $1f, $f7, $fc, $29, $13, $e5, $cb, $ed, $17, $0a, $e8, $e6, $fc, $00
0ee95     D0 E2 49 6A 
0ee99     1A AE A2 07 
0ee9d     5D 30 D0 D0 
0eea1     24 39 EA AF | 	byte	$d0, $e2, $49, $6a, $1a, $ae, $a2, $07, $5d, $30, $d0, $d0, $24, $39, $ea, $af
0eea5     DB 31 33 EB 
0eea9     D0 0E 44 21 
0eead     D7 C8 FF 2B 
0eeb1     0D F3 11 17 | 	byte	$db, $31, $33, $eb, $d0, $0e, $44, $21, $d7, $c8, $ff, $2b, $0d, $f3, $11, $17
0eeb5     FD DB DC 03 
0eeb9     0E FC ED F3 
0eebd     F6 DC E3 3D 
0eec1     68 2D B8 9E | 	byte	$fd, $db, $dc, $03, $0e, $fc, $ed, $f3, $f6, $dc, $e3, $3d, $68, $2d, $b8, $9e
0eec5     EA 53 44 E9 
0eec9     CF 0D 31 FA 
0eecd     BE D5 21 32 
0eed1     F8 D4 FE 3A | 	byte	$ea, $53, $44, $e9, $cf, $0d, $31, $fa, $be, $d5, $21, $32, $f8, $d4, $fe, $3a
0eed5     2D ED CE EF 
0eed9     1E 14 FD 0F 
0eedd     13 FB E2 DF 
0eee1     FF 0D F8 ED | 	byte	$2d, $ed, $ce, $ef, $1e, $14, $fd, $0f, $13, $fb, $e2, $df, $ff, $0d, $f8, $ed
0eee5     F3 FE E4 DE 
0eee9     33 67 3B BD 
0eeed     9E DE 50 4C 
0eef1     E8 C3 09 3E | 	byte	$f3, $fe, $e4, $de, $33, $67, $3b, $bd, $9e, $de, $50, $4c, $e8, $c3, $09, $3e
0eef5     05 B8 C8 20 
0eef9     40 00 C9 ED 
0eefd     3B 3D F4 C6 
0ef01     E7 23 1C F9 | 	byte	$05, $b8, $c8, $20, $40, $00, $c9, $ed, $3b, $3d, $f4, $c6, $e7, $23, $1c, $f9
0ef05     06 12 06 EA 
0ef09     DC F7 0D FF 
0ef0d     ED EB FB E7 
0ef11     E1 2F 66 41 | 	byte	$06, $12, $06, $ea, $dc, $f7, $0d, $ff, $ed, $eb, $fb, $e7, $e1, $2f, $66, $41
0ef15     C3 9E D5 4A 
0ef19     52 F0 C1 FD 
0ef1d     3A 0E C1 C5 
0ef21     17 3F 08 CD | 	byte	$c3, $9e, $d5, $4a, $52, $f0, $c1, $fd, $3a, $0e, $c1, $c5, $17, $3f, $08, $cd
0ef25     E5 2F 3E 03 
0ef29     D0 E0 13 19 
0ef2d     01 0C 13 FE 
0ef31     E9 E0 FF 0D | 	byte	$e5, $2f, $3e, $03, $d0, $e0, $13, $19, $01, $0c, $13, $fe, $e9, $e0, $ff, $0d
0ef35     FD EB ED F7 
0ef39     E7 E2 32 67 
0ef3d     3F C3 9E D7 
0ef41     4A 51 ED BF | 	byte	$fd, $eb, $ed, $f7, $e7, $e2, $32, $67, $3f, $c3, $9e, $d7, $4a, $51, $ed, $bf
0ef45     FE 3D 0F BF 
0ef49     C4 19 40 07 
0ef4d     CA E2 2F 41 
0ef51     04 D0 E1 15 | 	byte	$fe, $3d, $0f, $bf, $c4, $19, $40, $07, $ca, $e2, $2f, $41, $04, $d0, $e1, $15
0ef55     16 F9 06 19 
0ef59     04 EC DB FA 
0ef5d     0E FD EB EC 
0ef61     FE EF DE 26 | 	byte	$16, $f9, $06, $19, $04, $ec, $db, $fa, $0e, $fd, $eb, $ec, $fe, $ef, $de, $26
0ef65     62 46 C8 9E 
0ef69     D1 48 55 F2 
0ef6d     BC F7 3B 13 
0ef71     C1 C1 17 44 | 	byte	$62, $46, $c8, $9e, $d1, $48, $55, $f2, $bc, $f7, $3b, $13, $c1, $c1, $17, $44
0ef75     09 C8 DC 2D 
0ef79     42 08 D3 E2 
0ef7d     15 15 F5 03 
0ef81     1A 08 F0 DC | 	byte	$09, $c8, $dc, $2d, $42, $08, $d3, $e2, $15, $15, $f5, $03, $1a, $08, $f0, $dc
0ef85     FA 0C FF E7 
0ef89     EB FF ED E2 
0ef8d     28 63 40 C4 
0ef91     9E D6 4A 53 | 	byte	$fa, $0c, $ff, $e7, $eb, $ff, $ed, $e2, $28, $63, $40, $c4, $9e, $d6, $4a, $53
0ef95     EE BC FA 3C 
0ef99     11 C1 C5 1A 
0ef9d     43 07 C6 DD 
0efa1     2C 40 06 D4 | 	byte	$ee, $bc, $fa, $3c, $11, $c1, $c5, $1a, $43, $07, $c6, $dd, $2c, $40, $06, $d4
0efa5     E6 1A 15 F4 
0efa9     01 13 09 F2 
0efad     E0 F9 0B FE 
0efb1     EA EB FA EB | 	byte	$e6, $1a, $15, $f4, $01, $13, $09, $f2, $e0, $f9, $0b, $fe, $ea, $eb, $fa, $eb
0efb5     E9 33 64 32 
0efb9     BC 9F E3 51 
0efbd     4C E7 BF 02 
0efc1     3A 08 BE CC | 	byte	$e9, $33, $64, $32, $bc, $9f, $e3, $51, $4c, $e7, $bf, $02, $3a, $08, $be, $cc
0efc5     22 41 01 C5 
0efc9     E3 2E 3C 03 
0efcd     D6 EA 17 11 
0efd1     F8 07 0E 04 | 	byte	$22, $41, $01, $c5, $e3, $2e, $3c, $03, $d6, $ea, $17, $11, $f8, $07, $0e, $04
0efd5     EF E3 FF 09 
0efd9     FB E8 E8 F7 
0efdd     E5 FE 49 65 
0efe1     13 AD A2 00 | 	byte	$ef, $e3, $ff, $09, $fb, $e8, $e8, $f7, $e5, $fe, $49, $65, $13, $ad, $a2, $00
0efe5     5C 3A D3 C5 
0efe9     13 38 F5 B6 
0efed     DB 33 3B EE 
0eff1     C1 F2 3B 35 | 	byte	$5c, $3a, $d3, $c5, $13, $38, $f5, $b6, $db, $33, $3b, $ee, $c1, $f2, $3b, $35
0eff5     F3 D1 F7 1C 
0eff9     0C F6 0A 0B 
0effd     02 E9 E7 05 
0f001     07 F8 DF EC | 	byte	$f3, $d1, $f7, $1c, $0c, $f6, $0a, $0b, $02, $e9, $e7, $05, $07, $f8, $df, $ec
0f005     F8 E6 17 57 
0f009     5B EB A4 B2 
0f00d     24 61 1C C5 
0f011     D9 28 2B DA | 	byte	$f8, $e6, $17, $57, $5b, $eb, $a4, $b2, $24, $61, $1c, $c5, $d9, $28, $2b, $da
0f015     B3 F4 44 30 
0f019     DB C1 04 43 
0f01d     2A E6 D1 03 
0f021     1D 09 FC 0C | 	byte	$b3, $f4, $44, $30, $db, $c1, $04, $43, $2a, $e6, $d1, $03, $1d, $09, $fc, $0c
0f025     07 FD E4 EB 
0f029     07 07 F6 E2 
0f02d     E9 ED ED 34 
0f031     64 43 C9 9F | 	byte	$07, $fd, $e4, $eb, $07, $07, $f6, $e2, $e9, $ed, $ed, $34, $64, $43, $c9, $9f
0f035     CC 40 58 01 
0f039     C3 EF 31 17 
0f03d     C7 BC 0C 48 
0f041     1A CC CD 1D | 	byte	$cc, $40, $58, $01, $c3, $ef, $31, $17, $c7, $bc, $0c, $48, $1a, $cc, $cd, $1d
0f045     47 17 D5 D6 
0f049     11 1E 04 01 
0f04d     0F 05 F4 DE 
0f051     F2 0C 08 F3 | 	byte	$47, $17, $d5, $d6, $11, $1e, $04, $01, $0f, $05, $f4, $de, $f2, $0c, $08, $f3
0f055     DC ED E5 F3 
0f059     3F 68 36 BC 
0f05d     9D DB 4D 52 
0f061     F1 C2 FB 36 | 	byte	$dc, $ed, $e5, $f3, $3f, $68, $36, $bc, $9d, $db, $4d, $52, $f1, $c2, $fb, $36
0f065     0C BF C3 1B 
0f069     46 09 C4 DA 
0f06d     2E 47 09 CB 
0f071     DA 17 1D 05 | 	byte	$0c, $bf, $c3, $1b, $46, $09, $c4, $da, $2e, $47, $09, $cb, $da, $17, $1d, $05
0f075     03 0B 02 EE 
0f079     DF F6 0E 05 
0f07d     EF E1 E9 DD 
0f081     F1 49 6B 2D | 	byte	$03, $0b, $02, $ee, $df, $f6, $0e, $05, $ef, $e1, $e9, $dd, $f1, $49, $6b, $2d
0f085     B5 9D EA 55 
0f089     47 E0 C3 0B 
0f08d     3D 00 B6 CC 
0f091     27 40 F7 BF | 	byte	$b5, $9d, $ea, $55, $47, $e0, $c3, $0b, $3d, $00, $b6, $cc, $27, $40, $f7, $bf
0f095     EA 3F 44 FA 
0f099     C4 E1 1C 19 
0f09d     03 06 0F 00 
0f0a1     E8 DB FA 10 | 	byte	$ea, $3f, $44, $fa, $c4, $e1, $1c, $19, $03, $06, $0f, $00, $e8, $db, $fa, $10
0f0a5     05 EB E4 ED 
0f0a9     E0 E3 3F 6B 
0f0ad     3F BE 9E DF 
0f0b1     51 4E E4 BD | 	byte	$05, $eb, $e4, $ed, $e0, $e3, $3f, $6b, $3f, $be, $9e, $df, $51, $4e, $e4, $bd
0f0b5     07 42 0B B9 
0f0b9     C7 20 3F F8 
0f0bd     C0 ED 43 48 
0f0c1     F9 C1 DE 1D | 	byte	$07, $42, $0b, $b9, $c7, $20, $3f, $f8, $c0, $ed, $43, $48, $f9, $c1, $de, $1d
0f0c5     1C 02 07 16 
0f0c9     02 E5 D7 FC 
0f0cd     13 07 EC E5 
0f0d1     F6 E9 CC 10 | 	byte	$1c, $02, $07, $16, $02, $e5, $d7, $fc, $13, $07, $ec, $e5, $f6, $e9, $cc, $10
0f0d5     63 65 E7 A3 
0f0d9     B7 32 5F 06 
0f0dd     B9 E8 3E 2C 
0f0e1     D1 B8 FF 39 | 	byte	$63, $65, $e7, $a3, $b7, $32, $5f, $06, $b9, $e8, $3e, $2c, $d1, $b8, $ff, $39
0f0e5     0D CB DE 34 
0f0e9     51 10 C8 CE 
0f0ed     0B 24 05 00 
0f0f1     1A 13 F0 D7 | 	byte	$0d, $cb, $de, $34, $51, $10, $c8, $ce, $0b, $24, $05, $00, $1a, $13, $f0, $d7
0f0f5     E8 13 0D F8 
0f0f9     E4 F9 FA D9 
0f0fd     C7 30 6B 4F 
0f101     C7 A0 DC 4F | 	byte	$e8, $13, $0d, $f8, $e4, $f9, $fa, $d9, $c7, $30, $6b, $4f, $c7, $a0, $dc, $4f
0f105     4B E1 BE 0D 
0f109     48 13 C5 CB 
0f10d     0F 24 F2 D7 
0f111     08 45 36 F0 | 	byte	$4b, $e1, $be, $0d, $48, $13, $c5, $cb, $0f, $24, $f2, $d7, $08, $45, $36, $f0
0f115     C9 E4 14 17 
0f119     FB 09 25 0D 
0f11d     E6 DA F4 10 
0f121     00 F2 F1 07 | 	byte	$c9, $e4, $14, $17, $fb, $09, $25, $0d, $e6, $da, $f4, $10, $00, $f2, $f1, $07
0f125     FB D2 BE 11 
0f129     65 60 E3 A3 
0f12d     C4 30 4C F8 
0f131     C6 FF 43 2C | 	byte	$fb, $d2, $be, $11, $65, $60, $e3, $a3, $c4, $30, $4c, $f8, $c6, $ff, $43, $2c
0f135     DD C4 EE 15 
0f139     05 EE 06 30 
0f13d     33 05 D8 DE 
0f141     FE 11 00 03 | 	byte	$dd, $c4, $ee, $15, $05, $ee, $06, $30, $33, $05, $d8, $de, $fe, $11, $00, $03
0f145     29 2A F7 DC 
0f149     DA FA 03 00 
0f14d     01 08 02 E1 
0f151     CB CE 07 5F | 	byte	$29, $2a, $f7, $dc, $da, $fa, $03, $00, $01, $08, $02, $e1, $cb, $ce, $07, $5f
0f155     66 0C AD AB 
0f159     03 43 15 D4 
0f15d     EE 39 3F F0 
0f161     B9 D3 11 1E | 	byte	$66, $0c, $ad, $ab, $03, $43, $15, $d4, $ee, $39, $3f, $f0, $b9, $d3, $11, $1e
0f165     FB F4 1E 3C 
0f169     1C DE CD EA 
0f16d     0C 0B 09 2C 
0f171     34 F2 CB D4 | 	byte	$fb, $f4, $1e, $3c, $1c, $de, $cd, $ea, $0c, $0b, $09, $2c, $34, $f2, $cb, $d4
0f175     00 13 FB F9 
0f179     FF 0E F1 DE 
0f17d     CE BB F8 5D 
0f181     6F 17 AF A5 | 	byte	$00, $13, $fb, $f9, $ff, $0e, $f1, $de, $ce, $bb, $f8, $5d, $6f, $17, $af, $a5
0f185     01 43 10 D7 
0f189     01 47 32 D9 
0f18d     B9 EF 25 0A 
0f191     DF F9 3D 47 | 	byte	$01, $43, $10, $d7, $01, $47, $32, $d9, $b9, $ef, $25, $0a, $df, $f9, $3d, $47
0f195     02 C7 D2 07 
0f199     19 02 F6 23 
0f19d     38 FA D9 E0 
0f1a1     F2 05 F9 07 | 	byte	$02, $c7, $d2, $07, $19, $02, $f6, $23, $38, $fa, $d9, $e0, $f2, $05, $f9, $07
0f1a5     07 05 F5 E9 
0f1a9     E2 C7 AF F9 
0f1ad     62 71 18 AF 
0f1b1     A6 01 46 1A | 	byte	$07, $05, $f5, $e9, $e2, $c7, $af, $f9, $62, $71, $18, $af, $a6, $01, $46, $1a
0f1b5     DE F8 33 2F 
0f1b9     F7 DD F0 FB 
0f1bd     ED F2 1A 36 
0f1c1     1F FA F4 02 | 	byte	$de, $f8, $33, $2f, $f7, $dd, $f0, $fb, $ed, $f2, $1a, $36, $1f, $fa, $f4, $02
0f1c5     FA E3 E1 0B 
0f1c9     39 3F F9 DC 
0f1cd     ED F8 FE F1 
0f1d1     FD 0A 00 FD | 	byte	$fa, $e3, $e1, $0b, $39, $3f, $f9, $dc, $ed, $f8, $fe, $f1, $fd, $0a, $00, $fd
0f1d5     F2 FF EB D0 
0f1d9     B6 DA 53 72 
0f1dd     3D BF A2 E9 
0f1e1     3A 1B DA ED | 	byte	$f2, $ff, $eb, $d0, $b6, $da, $53, $72, $3d, $bf, $a2, $e9, $3a, $1b, $da, $ed
0f1e5     3A 4C 11 DE 
0f1e9     DC EA E9 F2 
0f1ed     19 2F 1C 05 
0f1f1     0C 16 F4 C1 | 	byte	$3a, $4c, $11, $de, $dc, $ea, $e9, $f2, $19, $2f, $1c, $05, $0c, $16, $f4, $c1
0f1f5     C7 0C 41 35 
0f1f9     18 FD FB E7 
0f1fd     D1 E5 07 19 
0f201     0B F5 04 04 | 	byte	$c7, $0c, $41, $35, $18, $fd, $fb, $e7, $d1, $e5, $07, $19, $0b, $f5, $04, $04
0f205     FE D7 CD CB 
0f209     D0 01 60 71 
0f20d     2B B5 A0 E4 
0f211     24 14 FB 17 | 	byte	$fe, $d7, $cd, $cb, $d0, $01, $60, $71, $2b, $b5, $a0, $e4, $24, $14, $fb, $17
0f215     40 35 04 D8 
0f219     CC DB F4 0F 
0f21d     18 16 21 32 
0f221     1E E2 B8 CE | 	byte	$40, $35, $04, $d8, $cc, $db, $f4, $0f, $18, $16, $21, $32, $1e, $e2, $b8, $ce
0f225     07 20 0D 10 
0f229     3E 30 EB BF 
0f22d     C8 FA 0F 08 
0f231     08 14 14 F6 | 	byte	$07, $20, $0d, $10, $3e, $30, $eb, $bf, $c8, $fa, $0f, $08, $08, $14, $14, $f6
0f235     E6 E3 E5 E7 
0f239     E6 EE D9 F6 
0f23d     5A 70 2E B4 
0f241     9D E7 50 3C | 	byte	$e6, $e3, $e5, $e7, $e6, $ee, $d9, $f6, $5a, $70, $2e, $b4, $9d, $e7, $50, $3c
0f245     E7 DD 2C 4E 
0f249     10 BD AE E6 
0f24d     1B 1B 01 FC 
0f251     1F 36 18 D7 | 	byte	$e7, $dd, $2c, $4e, $10, $bd, $ae, $e6, $1b, $1b, $01, $fc, $1f, $36, $18, $d7
0f255     B9 D1 08 27 
0f259     1D 12 1D 14 
0f25d     EC DC DF F0 
0f261     07 0D 11 09 | 	byte	$b9, $d1, $08, $27, $1d, $12, $1d, $14, $ec, $dc, $df, $f0, $07, $0d, $11, $09
0f265     09 FF F2 DC 
0f269     D9 F5 0D 14 
0f26d     F7 DE CC D0 
0f271     27 6A 5E DF | 	byte	$09, $ff, $f2, $dc, $d9, $f5, $0d, $14, $f7, $de, $cc, $d0, $27, $6a, $5e, $df
0f275     A3 D3 3E 3E 
0f279     EE D8 03 2B 
0f27d     1F F6 CE D8 
0f281     0B 1E 02 F1 | 	byte	$a3, $d3, $3e, $3e, $ee, $d8, $03, $2b, $1f, $f6, $ce, $d8, $0b, $1e, $02, $f1
0f285     0A 25 1A 05 
0f289     F7 EA DB FA 
0f28d     1A 1E 09 03 
0f291     02 01 F8 F5 | 	byte	$0a, $25, $1a, $05, $f7, $ea, $db, $fa, $1a, $1e, $09, $03, $02, $01, $f8, $f5
0f295     FD FA F7 FF 
0f299     0F 08 FB EF 
0f29d     F5 FB FB FB 
0f2a1     FD FA F9 F6 | 	byte	$fd, $fa, $f7, $ff, $0f, $08, $fb, $ef, $f5, $fb, $fb, $fb, $fd, $fa, $f9, $f6
0f2a5     FE F4 E5 E6 
0f2a9     26 30 19 F3 
0f2ad     DF F2 07 0E 
0f2b1     FC 01 19 0C | 	byte	$fe, $f4, $e5, $e6, $26, $30, $19, $f3, $df, $f2, $07, $0e, $fc, $01, $19, $0c
0f2b5     00 F4 F8 01 
0f2b9     0B 07 FE FB 
0f2bd     02 0C 12 19 
0f2c1     0C FA E3 F3 | 	byte	$00, $f4, $f8, $01, $0b, $07, $fe, $fb, $02, $0c, $12, $19, $0c, $fa, $e3, $f3
0f2c5     13 19 0D F8 
0f2c9     FC 0A 04 FA 
0f2cd     F2 FC 09 02 
0f2d1     FF FF 02 FE | 	byte	$13, $19, $0d, $f8, $fc, $0a, $04, $fa, $f2, $fc, $09, $02, $ff, $ff, $02, $fe
0f2d5     ED F2 F9 07 
0f2d9     FF EE EF F8 
0f2dd     FA E4 D4 D4 
0f2e1     D7 23 57 5E | 	byte	$ed, $f2, $f9, $07, $ff, $ee, $ef, $f8, $fa, $e4, $d4, $d4, $d7, $23, $57, $5e
0f2e5     0C D2 B8 F8 
0f2e9     1B 1B 00 FE 
0f2ed     09 0F 18 04 
0f2f1     F8 F4 FC FF | 	byte	$0c, $d2, $b8, $f8, $1b, $1b, $00, $fe, $09, $0f, $18, $04, $f8, $f4, $fc, $ff
0f2f5     03 09 26 30 
0f2f9     12 F9 E1 F9 
0f2fd     00 FE F9 F9 
0f301     07 07 08 03 | 	byte	$03, $09, $26, $30, $12, $f9, $e1, $f9, $00, $fe, $f9, $f9, $07, $07, $08, $03
0f305     00 FE F6 EE 
0f309     F6 07 0B 07 
0f30d     FC F1 EF F3 
0f311     FC F5 F2 EF | 	byte	$00, $fe, $f6, $ee, $f6, $07, $0b, $07, $fc, $f1, $ef, $f3, $fc, $f5, $f2, $ef
0f315     FE 0D FD F8 
0f319     ED E8 E7 F9 
0f31d     19 25 17 FB 
0f321     EE 02 0F 0F | 	byte	$fe, $0d, $fd, $f8, $ed, $e8, $e7, $f9, $19, $25, $17, $fb, $ee, $02, $0f, $0f
0f325     FE F2 01 12 
0f329     13 10 08 01 
0f32d     FA FD 00 0D 
0f331     17 11 03 FD | 	byte	$fe, $f2, $01, $12, $13, $10, $08, $01, $fa, $fd, $00, $0d, $17, $11, $03, $fd
0f335     FE 0C 08 FA 
0f339     F6 F9 01 04 
0f33d     05 09 00 F5 
0f341     F0 F3 07 08 | 	byte	$fe, $0c, $08, $fa, $f6, $f9, $01, $04, $05, $09, $00, $f5, $f0, $f3, $07, $08
0f345     01 F4 F5 FB 
0f349     FB F9 F5 FC 
0f34d     F7 FB FA 01 
0f351     05 F9 FC 05 | 	byte	$01, $f4, $f5, $fb, $fb, $f9, $f5, $fc, $f7, $fb, $fa, $01, $05, $f9, $fc, $05
0f355     0C 07 F9 F0 
0f359     F9 09 0B FD 
0f35d     F9 FC 10 0B 
0f361     04 F7 02 03 | 	byte	$0c, $07, $f9, $f0, $f9, $09, $0b, $fd, $f9, $fc, $10, $0b, $04, $f7, $02, $03
0f365     05 FD 03 08 
0f369     0C 07 FB F9 
0f36d     FB 07 03 01 
0f371     01 02 06 FE | 	byte	$05, $fd, $03, $08, $0c, $07, $fb, $f9, $fb, $07, $03, $01, $01, $02, $06, $fe
0f375     03 02 05 03 
0f379     FB 01 FA 04 
0f37d     07 09 FE F4 
0f381     F7 04 0A 01 | 	byte	$03, $02, $05, $03, $fb, $01, $fa, $04, $07, $09, $fe, $f4, $f7, $04, $0a, $01
0f385     F6 F8 FE 05 
0f389     01 FB FC F8 
0f38d     FD FA FB FA 
0f391     FB FD F9 00 | 	byte	$f6, $f8, $fe, $05, $01, $fb, $fc, $f8, $fd, $fa, $fb, $fa, $fb, $fd, $f9, $00
0f395     FE FF F9 FA 
0f399     FC FD 02 02 
0f39d     01 02 FF FD 
0f3a1     F7 FE 01 04 | 	byte	$fe, $ff, $f9, $fa, $fc, $fd, $02, $02, $01, $02, $ff, $fd, $f7, $fe, $01, $04
0f3a5     FF FC 02 07 
0f3a9     03 FF FC FF 
0f3ad     08 06 FE FC 
0f3b1     00 05 04 06 | 	byte	$ff, $fc, $02, $07, $03, $ff, $fc, $ff, $08, $06, $fe, $fc, $00, $05, $04, $06
0f3b5     03 06 05 01 
0f3b9     00 04 09 0B 
0f3bd     03 05 0B 04 
0f3c1     02 FF 03 01 | 	byte	$03, $06, $05, $01, $00, $04, $09, $0b, $03, $05, $0b, $04, $02, $ff, $03, $01
0f3c5     00 02 05 08 
0f3c9     08 05 00 F9 
0f3cd     F7 FB 01 06 
0f3d1     04 00 FD FA | 	byte	$00, $02, $05, $08, $08, $05, $00, $f9, $f7, $fb, $01, $06, $04, $00, $fd, $fa
0f3d5     F8 F8 FB FF 
0f3d9     00 FB FA FE 
0f3dd     00 FB F5 F3 
0f3e1     F5 FE 02 FE | 	byte	$f8, $f8, $fb, $ff, $00, $fb, $fa, $fe, $00, $fb, $f5, $f3, $f5, $fe, $02, $fe
0f3e5     FA FD 00 FF 
0f3e9     01 FF FF FE 
0f3ed     FB FF 02 07 
0f3f1     03 FE FA FF | 	byte	$fa, $fd, $00, $ff, $01, $ff, $ff, $fe, $fb, $ff, $02, $07, $03, $fe, $fa, $ff
0f3f5     08 06 FD FD 
0f3f9     03 09 07 FC 
0f3fd     F8 F9 08 0A 
0f401     0A 07 05 01 | 	byte	$08, $06, $fd, $fd, $03, $09, $07, $fc, $f8, $f9, $08, $0a, $0a, $07, $05, $01
0f405     FF 02 02 00 
0f409     03 06 08 07 
0f40d     04 00 FE 00 
0f411     00 01 FF 02 | 	byte	$ff, $02, $02, $00, $03, $06, $08, $07, $04, $00, $fe, $00, $00, $01, $ff, $02
0f415     04 05 04 01 
0f419     FA F5 F8 FD 
0f41d     03 06 02 FC 
0f421     FA FE FE FE | 	byte	$04, $05, $04, $01, $fa, $f5, $f8, $fd, $03, $06, $02, $fc, $fa, $fe, $fe, $fe
0f425     FB FB FD 01 
0f429     03 00 FC FB 
0f42d     F9 FA FD 01 
0f431     01 00 FF FD | 	byte	$fb, $fb, $fd, $01, $03, $00, $fc, $fb, $f9, $fa, $fd, $01, $01, $00, $ff, $fd
0f435     F9 FA FC FE 
0f439     00 01 02 00 
0f43d     00 00 FD FC 
0f441     FE 03 01 02 | 	byte	$f9, $fa, $fc, $fe, $00, $01, $02, $00, $00, $00, $fd, $fc, $fe, $03, $01, $02
0f445     00 FF 00 FF 
0f449     FF FE 02 06 
0f44d     05 01 FD FE 
0f451     01 06 04 FE | 	byte	$00, $ff, $00, $ff, $ff, $fe, $02, $06, $05, $01, $fd, $fe, $01, $06, $04, $fe
0f455     FB FC 02 05 
0f459     05 01 FF 02 
0f45d     03 01 FF 01 
0f461     05 05 03 FC | 	byte	$fb, $fc, $02, $05, $05, $01, $ff, $02, $03, $01, $ff, $01, $05, $05, $03, $fc
0f465     FC FE 04 05 
0f469     01 FD FE 01 
0f46d     01 FD FC FE 
0f471     01 04 03 01 | 	byte	$fc, $fe, $04, $05, $01, $fd, $fe, $01, $01, $fd, $fc, $fe, $01, $04, $03, $01
0f475     00 FF FD FB 
0f479     FC 01 03 04 
0f47d     01 FD FC FD 
0f481     FD FB FE 02 | 	byte	$00, $ff, $fd, $fb, $fc, $01, $03, $04, $01, $fd, $fc, $fd, $fd, $fb, $fe, $02
0f485     02 00 FD FC 
0f489     FD FD FC FE 
0f48d     01 01 00 FF 
0f491     FE FE FE 01 | 	byte	$02, $00, $fd, $fc, $fd, $fd, $fc, $fe, $01, $01, $00, $ff, $fe, $fe, $fe, $01
0f495     04 02 FE FF 
0f499     01 01 FF FF 
0f49d     FF FF 00 02 
0f4a1     03 00 FD FE | 	byte	$04, $02, $fe, $ff, $01, $01, $ff, $ff, $ff, $ff, $00, $02, $03, $00, $fd, $fe
0f4a5     02 03 02 00 
0f4a9     00 01 01 FF 
0f4ad     FF 00 00 01 
0f4b1     02 04 03 00 | 	byte	$02, $03, $02, $00, $00, $01, $01, $ff, $ff, $00, $00, $01, $02, $04, $03, $00
0f4b5     FE FF 01 02 
0f4b9     01 00 01 02 
0f4bd     02 01 FE FD 
0f4c1     FD 01 03 03 | 	byte	$fe, $ff, $01, $02, $01, $00, $01, $02, $02, $01, $fe, $fd, $fd, $01, $03, $03
0f4c5     01 00 00 FF 
0f4c9     FE FE FF FF 
0f4cd     00 00 FF 00 
0f4d1     FE FE FF FF | 	byte	$01, $00, $00, $ff, $fe, $fe, $ff, $ff, $00, $00, $ff, $00, $fe, $fe, $ff, $ff
0f4d5     FF FE FF FF 
0f4d9     FF FF FF FF 
0f4dd     FE FE FD FF 
0f4e1     FF FF FE 01 | 	byte	$ff, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fd, $ff, $ff, $ff, $fe, $01
0f4e5     01 00 FD FD 
0f4e9     FE 00 01 02 
0f4ed     00 01 01 00 
0f4f1     FE FD FE 00 | 	byte	$01, $00, $fd, $fd, $fe, $00, $01, $02, $00, $01, $01, $00, $fe, $fd, $fe, $00
0f4f5     02 02 01 00 
0f4f9     00 01 01 00 
0f4fd     FF FF 00 01 
0f501     01 01 01 00 | 	byte	$02, $02, $01, $00, $00, $01, $01, $00, $ff, $ff, $00, $01, $01, $01, $01, $00
0f505     FF FF 00 01 
0f509     00 FF FF 00 
0f50d     00 00 01 02 
0f511     01 FF FE FF | 	byte	$ff, $ff, $00, $01, $00, $ff, $ff, $00, $00, $00, $01, $02, $01, $ff, $fe, $ff
0f515     00 00 00 01 
0f519     01 01 00 FF 
0f51d     FF 00 00 00 
0f521     FE FF 00 02 | 	byte	$00, $00, $00, $01, $01, $01, $00, $ff, $ff, $00, $00, $00, $fe, $ff, $00, $02
0f525     01 FF FD FE 
0f529     00 01 FF FD 
0f52d     FE 01 01 FF 
0f531     FE FF 00 FF | 	byte	$01, $ff, $fd, $fe, $00, $01, $ff, $fd, $fe, $01, $01, $ff, $fe, $ff, $00, $ff
0f535     FF FF 00 01 
0f539     01 00 FF FF 
0f53d     FE FF FF FF 
0f541     00 01 01 FF | 	byte	$ff, $ff, $00, $01, $01, $00, $ff, $ff, $fe, $ff, $ff, $ff, $00, $01, $01, $ff
0f545     FE FE FF FF 
0f549     FF 01 03 02 
0f54d     00 FF FF FF 
0f551     FF FF FF 00 | 	byte	$fe, $fe, $ff, $ff, $ff, $01, $03, $02, $00, $ff, $ff, $ff, $ff, $ff, $ff, $00
0f555     FF 00 01 02 
0f559     00 FD FC FF 
0f55d     02 02 00 FF 
0f561     01 01 01 00 | 	byte	$ff, $00, $01, $02, $00, $fd, $fc, $ff, $02, $02, $00, $ff, $01, $01, $01, $00
0f565     00 FF FF FF 
0f569     00 01 02 01 
0f56d     00 00 00 FF 
0f571     FF 00 00 FF | 	byte	$00, $ff, $ff, $ff, $00, $01, $02, $01, $00, $00, $00, $ff, $ff, $00, $00, $ff
0f575     00 02 03 02 
0f579     00 FE FE 00 
0f57d     00 00 01 02 
0f581     02 01 FE FE | 	byte	$00, $02, $03, $02, $00, $fe, $fe, $00, $00, $00, $01, $02, $02, $01, $fe, $fe
0f585     00 02 01 FF 
0f589     FF 00 01 00 
0f58d     FF FE FF 00 
0f591     00 01 01 01 | 	byte	$00, $02, $01, $ff, $ff, $00, $01, $00, $ff, $fe, $ff, $00, $00, $01, $01, $01
0f595     00 FF FF FF 
0f599     FF FF FF 00 
0f59d     00 01 00 FF 
0f5a1     FE FE FE FD | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $01, $00, $ff, $fe, $fe, $fe, $fd
0f5a5     FE FF FF FF 
0f5a9     FF 01 01 01 
0f5ad     FF FD FD 00 
0f5b1     03 02 01 00 | 	byte	$fe, $ff, $ff, $ff, $ff, $01, $01, $01, $ff, $fd, $fd, $00, $03, $02, $01, $00
0f5b5     00 00 00 FF 
0f5b9     FF 00 00 01 
0f5bd     01 01 01 01 
0f5c1     01 00 FF 00 | 	byte	$00, $00, $00, $ff, $ff, $00, $00, $01, $01, $01, $01, $01, $01, $00, $ff, $00
0f5c5     00 01 00 00 
0f5c9     01 01 00 FF 
0f5cd     FE FF 01 01 
0f5d1     FF FF FF 01 | 	byte	$00, $01, $00, $00, $01, $01, $00, $ff, $fe, $ff, $01, $01, $ff, $ff, $ff, $01
0f5d5     01 00 FF FF 
0f5d9     01 02 01 00 
0f5dd     FF 00 00 00 
0f5e1     FF FF FF 00 | 	byte	$01, $00, $ff, $ff, $01, $02, $01, $00, $ff, $00, $00, $00, $ff, $ff, $ff, $00
0f5e5     00 FF FE FF 
0f5e9     00 01 01 FF 
0f5ed     FE FF 01 01 
0f5f1     FF FE FF 00 | 	byte	$00, $ff, $fe, $ff, $00, $01, $01, $ff, $fe, $ff, $01, $01, $ff, $fe, $ff, $00
0f5f5     00 00 00 00 
0f5f9     00          | 	byte	$00[5]
0f5fa     FF FE FE 00 
0f5fe     02 01 00 FF 
0f602     FF FF 00 00 
0f606     05 FF 00 FB | 	byte	$ff, $fe, $fe, $00, $02, $01, $00, $ff, $ff, $ff, $00, $00, $05, $ff, $00, $fb
0f60a     FE FE 02 04 
0f60e     04 FF FB FA 
0f612     01 05 03 FD 
0f616     F9 FC 00 02 | 	byte	$fe, $fe, $02, $04, $04, $ff, $fb, $fa, $01, $05, $03, $fd, $f9, $fc, $00, $02
0f61a     00 FC FC FE 
0f61e     00 00 FD FE 
0f622     FF 05 06 03 
0f626     00 00 00 00 | 	byte	$00, $fc, $fc, $fe, $00, $00, $fd, $fe, $ff, $05, $06, $03, $00, $00, $00, $00
0f62a     FF 00 01 02 
0f62e     02 03 02 00 
0f632     FE FF 00 FC 
0f636     FC 00 01 00 | 	byte	$ff, $00, $01, $02, $02, $03, $02, $00, $fe, $ff, $00, $fc, $fc, $00, $01, $00
0f63a     FE FD FF 00 
0f63e     01 00 FD FD 
0f642     FE FF FF FE 
0f646     FF FF FE FC | 	byte	$fe, $fd, $ff, $00, $01, $00, $fd, $fd, $fe, $ff, $ff, $fe, $ff, $ff, $fe, $fc
0f64a     FB FC FE FE 
0f64e     FC FC FF 04 
0f652     07 05 FF FB 
0f656     FC 00 03 02 | 	byte	$fb, $fc, $fe, $fe, $fc, $fc, $ff, $04, $07, $05, $ff, $fb, $fc, $00, $03, $02
0f65a     01 01 01 00 
0f65e     FF 00 01 01 
0f662     00 FF 01 03 
0f666     04 02 00 FF | 	byte	$01, $01, $01, $00, $ff, $00, $01, $01, $00, $ff, $01, $03, $04, $02, $00, $ff
0f66a     FF FF FF FF 
0f66e     00 01 02 02 
0f672     00 FE FE FF 
0f676     01 01 00 00 | 	byte	$ff, $ff, $ff, $ff, $00, $01, $02, $02, $00, $fe, $fe, $ff, $01, $01, $00, $00
0f67a     00 01 00 FF 
0f67e     FE FF 00 01 
0f682     00 FF FF 01 
0f686     01 FF FE FE | 	byte	$00, $01, $00, $ff, $fe, $ff, $00, $01, $00, $ff, $ff, $01, $01, $ff, $fe, $fe
0f68a     00 01 01 00 
0f68e     FF FF FF FF 
0f692     FF FF 00 01 
0f696     01 00 FF FF | 	byte	$00, $01, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $00, $01, $01, $00, $ff, $ff
0f69a     FF FF FF FF 
0f69e     00 01 01 00 
0f6a2     FE FE 00 00 
0f6a6     00 00 00 01 | 	byte	$ff, $ff, $ff, $ff, $00, $01, $01, $00, $fe, $fe, $00, $00, $00, $00, $00, $01
0f6aa     01 01 00 FF 
0f6ae     FF 00 01 01 
0f6b2     00 00 00 01 
0f6b6     00 00 FF 00 | 	byte	$01, $01, $00, $ff, $ff, $00, $01, $01, $00, $00, $00, $01, $00, $00, $ff, $00
0f6ba     00 01 00 00 
0f6be     00 00 00 FF 
0f6c2     00 04 0D 02 
0f6c6     F8 F3 FC 08 | 	byte	$00, $01, $00, $00, $00, $00, $00, $ff, $00, $04, $0d, $02, $f8, $f3, $fc, $08
0f6ca     09 FF F7 FA 
0f6ce     FF 03 01 FD 
0f6d2     F8 FB FE 02 
0f6d6     01 07 0C 07 | 	byte	$09, $ff, $f7, $fa, $ff, $03, $01, $fd, $f8, $fb, $fe, $02, $01, $07, $0c, $07
0f6da     F7 EC FA 0B 
0f6de     0E FD F5 FC 
0f6e2     0A 0A 02 FA 
0f6e6     F8 FB 02 07 | 	byte	$f7, $ec, $fa, $0b, $0e, $fd, $f5, $fc, $0a, $0a, $02, $fa, $f8, $fb, $02, $07
0f6ea     06 01 FE 01 
0f6ee     03 00 FB FA 
0f6f2     FE 04 03 01 
0f6f6     01 02 00 FD | 	byte	$06, $01, $fe, $01, $03, $00, $fb, $fa, $fe, $04, $03, $01, $01, $02, $00, $fd
0f6fa     FD FF 00 00 
0f6fe     00 01 02 00 
0f702     FE FE FE FE 
0f706     00 02 01 00 | 	byte	$fd, $ff, $00, $00, $00, $01, $02, $00, $fe, $fe, $fe, $fe, $00, $02, $01, $00
0f70a     FF 01 00 FE 
0f70e     FC 00 03 02 
0f712     FF FE FF 00 
0f716     00 00 FF FF | 	byte	$ff, $01, $00, $fe, $fc, $00, $03, $02, $ff, $fe, $ff, $00, $00, $00, $ff, $ff
0f71a     FE 00 01 01 
0f71e     FF FE FE FF 
0f722     FF 00 01 01 
0f726     FF FE FF 00 | 	byte	$fe, $00, $01, $01, $ff, $fe, $fe, $ff, $ff, $00, $01, $01, $ff, $fe, $ff, $00
0f72a     00 FF FF FF 
0f72e     00 00 01 00 
0f732     FF FE FF 01 
0f736     01 00 00 FF | 	byte	$00, $ff, $ff, $ff, $00, $00, $01, $00, $ff, $fe, $ff, $01, $01, $00, $00, $ff
0f73a     FF FF 00 01 
0f73e     00 FF FF 00 
0f742     01 00 FE FE 
0f746     00 00 00 00 | 	byte	$ff, $ff, $00, $01, $00, $ff, $ff, $00, $01, $00, $fe, $fe, $00, $00, $00, $00
0f74a     00 FF FE FF 
0f74e     01 01 FF FE 
0f752     FF 01 01 01 
0f756     00 FF FF 02 | 	byte	$00, $ff, $fe, $ff, $01, $01, $ff, $fe, $ff, $01, $01, $01, $00, $ff, $ff, $02
0f75a     0A 03 FB F7 
0f75e     FF 03 01 FA 
0f762     FA FE FF FB 
0f766     F9 FA 07 15 | 	byte	$0a, $03, $fb, $f7, $ff, $03, $01, $fa, $fa, $fe, $ff, $fb, $f9, $fa, $07, $15
0f76a     0E F5 E8 F9 
0f76e     0F 0A F4 F2 
0f772     07 12 04 F4 
0f776     F5 01 04 FF | 	byte	$0e, $f5, $e8, $f9, $0f, $0a, $f4, $f2, $07, $12, $04, $f4, $f5, $01, $04, $ff
0f77a     FD 01 05 06 
0f77e     04 01 FD FB 
0f782     FC FF 00 00 
0f786     00 04 05 02 | 	byte	$fd, $01, $05, $06, $04, $01, $fd, $fb, $fc, $ff, $00, $00, $00, $04, $05, $02
0f78a     FD FD FF FF 
0f78e     FE FF 02 04 
0f792     02 FF FE FE 
0f796     FD FE FF 00 | 	byte	$fd, $fd, $ff, $ff, $fe, $ff, $02, $04, $02, $ff, $fe, $fe, $fd, $fe, $ff, $00
0f79a     00 02 03 01 
0f79e     FC FB 00 03 
0f7a2     00 FC FE 02 
0f7a6     02 FF FE FF | 	byte	$00, $02, $03, $01, $fc, $fb, $00, $03, $00, $fc, $fe, $02, $02, $ff, $fe, $ff
0f7aa     00 FE FE 00 
0f7ae     02 01 FF FF 
0f7b2     FF FF FF 01 
0f7b6     07 07 00 FA | 	byte	$00, $fe, $fe, $00, $02, $01, $ff, $ff, $ff, $ff, $ff, $01, $07, $07, $00, $fa
0f7ba     F9 FF 02 FF 
0f7be     F9 F8 FA FB 
0f7c2     F9 FC 0B 1A 
0f7c6     0F F0 E3 FC | 	byte	$f9, $ff, $02, $ff, $f9, $f8, $fa, $fb, $f9, $fc, $0b, $1a, $0f, $f0, $e3, $fc
0f7ca     12 06 EF F6 
0f7ce     11 15 FF F1 
0f7d2     F9 01 FE FB 
0f7d6     00 06 07 07 | 	byte	$12, $06, $ef, $f6, $11, $15, $ff, $f1, $f9, $01, $fe, $fb, $00, $06, $07, $07
0f7da     06 00 F9 F8 
0f7de     FD 01 01 00 
0f7e2     03 05 04 00 
0f7e6     FD FE FE FC | 	byte	$06, $00, $f9, $f8, $fd, $01, $01, $00, $03, $05, $04, $00, $fd, $fe, $fe, $fc
0f7ea     FD 02 05 03 
0f7ee     01 00 FF FC 
0f7f2     FB FE 01 00 
0f7f6     FF 03 05 00 | 	byte	$fd, $02, $05, $03, $01, $00, $ff, $fc, $fb, $fe, $01, $00, $ff, $03, $05, $00
0f7fa     FB FB 01 02 
0f7fe     FF FE 02 07 
0f802     07 02 FE FD 
0f806     FC FE FF FF | 	byte	$fb, $fb, $01, $02, $ff, $fe, $02, $07, $07, $02, $fe, $fd, $fc, $fe, $ff, $ff
0f80a     FC F9 F9 F9 
0f80e     F5 F6 0C 24 
0f812     16 EC DB FC 
0f816     18 06 E9 F5 | 	byte	$fc, $f9, $f9, $f9, $f5, $f6, $0c, $24, $16, $ec, $db, $fc, $18, $06, $e9, $f5
0f81a     15 16 FC F2 
0f81e     FC 02 FB FA 
0f822     01 06 08 0B 
0f826     09 FE F6 F8 | 	byte	$15, $16, $fc, $f2, $fc, $02, $fb, $fa, $01, $06, $08, $0b, $09, $fe, $f6, $f8
0f82a     FF FF FD 01 
0f82e     07 08 02 FD 
0f832     FE FF FD F9 
0f836     FC 04 06 03 | 	byte	$ff, $ff, $fd, $01, $07, $08, $02, $fd, $fe, $ff, $fd, $f9, $fc, $04, $06, $03
0f83a     00 01 FF FA 
0f83e     FA FF 02 00 
0f842     FF 05 0B 07 
0f846     FF F9 FB FB | 	byte	$00, $01, $ff, $fa, $fa, $ff, $02, $00, $ff, $05, $0b, $07, $ff, $f9, $fb, $fb
0f84a     FD FD 01 FF 
0f84e     FB F6 F3 F1 
0f852     01 20 23 FC 
0f856     D7 EC 18 15 | 	byte	$fd, $fd, $01, $ff, $fb, $f6, $f3, $f1, $01, $20, $23, $fc, $d7, $ec, $18, $15
0f85a     EA E2 0C 23 
0f85e     09 ED F4 05 
0f862     01 F6 FA 05 
0f866     06 06 0A 08 | 	byte	$ea, $e2, $0c, $23, $09, $ed, $f4, $05, $01, $f6, $fa, $05, $06, $06, $0a, $08
0f86a     FB F4 FA 01 
0f86e     FE FB 02 0B 
0f872     07 FD FA 01 
0f876     03 FC F8 FE | 	byte	$fb, $f4, $fa, $01, $fe, $fb, $02, $0b, $07, $fd, $fa, $01, $03, $fc, $f8, $fe
0f87a     07 07 01 FE 
0f87e     FF FF FE 03 
0f882     08 03 FA FD 
0f886     00 03 F7 F4 | 	byte	$07, $07, $01, $fe, $ff, $ff, $fe, $03, $08, $03, $fa, $fd, $00, $03, $f7, $f4
0f88a     FA 01 FA F0 
0f88e     EE 09 2A 26 
0f892     F3 CD E7 1A 
0f896     1B EE E0 0B | 	byte	$fa, $01, $fa, $f0, $ee, $09, $2a, $26, $f3, $cd, $e7, $1a, $1b, $ee, $e0, $0b
0f89a     28 0E E8 E7 
0f89e     FE 05 FD FB 
0f8a2     05 0D 0E 09 
0f8a6     01 F7 F3 F8 | 	byte	$28, $0e, $e8, $e7, $fe, $05, $fd, $fb, $05, $0d, $0e, $09, $01, $f7, $f3, $f8
0f8aa     01 05 03 02 
0f8ae     07 08 01 F8 
0f8b2     FA 02 01 FA 
0f8b6     FC 06 0C 08 | 	byte	$01, $05, $03, $02, $07, $08, $01, $f8, $fa, $02, $01, $fa, $fc, $06, $0c, $08
0f8ba     03 05 FE FA 
0f8be     F5 FA 01 FC 
0f8c2     FE FB FE F4 
0f8c6     EE EA 05 2E | 	byte	$03, $05, $fe, $fa, $f5, $fa, $01, $fc, $fe, $fb, $fe, $f4, $ee, $ea, $05, $2e
0f8ca     31 F9 C8 E0 
0f8ce     20 26 ED D1 
0f8d2     FF 2C 1A EF 
0f8d6     E7 FD 06 FC | 	byte	$31, $f9, $c8, $e0, $20, $26, $ed, $d1, $ff, $2c, $1a, $ef, $e7, $fd, $06, $fc
0f8da     F8 02 0B 0E 
0f8de     0B 04 FA F3 
0f8e2     F7 FF 01 FC 
0f8e6     FE 09 0E 04 | 	byte	$f8, $02, $0b, $0e, $0b, $04, $fa, $f3, $f7, $ff, $01, $fc, $fe, $09, $0e, $04
0f8ea     F7 F8 01 FF 
0f8ee     F8 FE 0C 18 
0f8f2     0F FE F1 ED 
0f8f6     F4 FD FC FB | 	byte	$f7, $f8, $01, $ff, $f8, $fe, $0c, $18, $0f, $fe, $f1, $ed, $f4, $fd, $fc, $fb
0f8fa     F9 FF FB F0 
0f8fe     ED 11 3A 26 
0f902     DB B6 F4 3F 
0f906     2A D6 C9 13 | 	byte	$f9, $ff, $fb, $f0, $ed, $11, $3a, $26, $db, $b6, $f4, $3f, $2a, $d6, $c9, $13
0f90a     3D 0B D4 E2 
0f90e     0F 0F F5 F3 
0f912     0C 14 0A 01 
0f916     FF F9 F3 FA | 	byte	$3d, $0b, $d4, $e2, $0f, $0f, $f5, $f3, $0c, $14, $0a, $01, $ff, $f9, $f3, $fa
0f91a     05 04 FC FD 
0f91e     07 08 FF FB 
0f922     FF 01 FD FD 
0f926     0C 15 0A FC | 	byte	$05, $04, $fc, $fd, $07, $08, $ff, $fb, $ff, $01, $fd, $fd, $0c, $15, $0a, $fc
0f92a     EF F6 FA FE 
0f92e     FF FB F6 F3 
0f932     FC FE F1 F0 
0f936     1F 42 1E C9 | 	byte	$ef, $f6, $fa, $fe, $ff, $fb, $f6, $f3, $fc, $fe, $f1, $f0, $1f, $42, $1e, $c9
0f93a     B9 0A 45 12 
0f93e     C1 D2 28 40 
0f942     01 CF E7 10 
0f946     0E F6 F4 06 | 	byte	$b9, $0a, $45, $12, $c1, $d2, $28, $40, $01, $cf, $e7, $10, $0e, $f6, $f4, $06
0f94a     12 11 0A FD 
0f94e     EF F0 FF 06 
0f952     FE F9 04 0E 
0f956     08 FB FC 02 | 	byte	$12, $11, $0a, $fd, $ef, $f0, $ff, $06, $fe, $f9, $04, $0e, $08, $fb, $fc, $02
0f95a     FE F6 FF 14 
0f95e     17 09 F7 EF 
0f962     F3 F6 00 03 
0f966     FB F1 F8 02 | 	byte	$fe, $f6, $ff, $14, $17, $09, $f7, $ef, $f3, $f6, $00, $03, $fb, $f1, $f8, $02
0f96a     FE E7 F1 2C 
0f96e     48 0E B7 BF 
0f972     20 50 06 B5 
0f976     D5 33 40 F6 | 	byte	$fe, $e7, $f1, $2c, $48, $0e, $b7, $bf, $20, $50, $06, $b5, $d5, $33, $40, $f6
0f97a     C9 ED 1A 12 
0f97e     F2 EF 06 13 
0f982     10 07 FB F0 
0f986     F2 01 0A 01 | 	byte	$c9, $ed, $1a, $12, $f2, $ef, $06, $13, $10, $07, $fb, $f0, $f2, $01, $0a, $01
0f98a     F6 FA 07 0B 
0f98e     03 FD FC FE 
0f992     00 0D 13 06 
0f996     F6 F3 FB 00 | 	byte	$f6, $fa, $07, $0b, $03, $fd, $fc, $fe, $00, $0d, $13, $06, $f6, $f3, $fb, $00
0f99a     F6 FA FD 02 
0f99e     F5 F5 FC F7 
0f9a2     E9 FF 3F 47 
0f9a6     F6 AA C9 34 | 	byte	$f6, $fa, $fd, $02, $f5, $f5, $fc, $f7, $e9, $ff, $3f, $47, $f6, $aa, $c9, $34
0f9aa     52 F2 B0 E5 
0f9ae     41 39 E9 C8 
0f9b2     F6 1F 0E EC 
0f9b6     ED 08 18 15 | 	byte	$52, $f2, $b0, $e5, $41, $39, $e9, $c8, $f6, $1f, $0e, $ec, $ed, $08, $18, $15
0f9ba     06 F5 EA F1 
0f9be     04 0B FF F6 
0f9c2     02 0F 09 FB 
0f9c6     F8 FE 00 FF | 	byte	$06, $f5, $ea, $f1, $04, $0b, $ff, $f6, $02, $0f, $09, $fb, $f8, $fe, $00, $ff
0f9ca     0C 15 09 F8 
0f9ce     ED F9 FC FF 
0f9d2     FD FC FC F6 
0f9d6     FE 03 F3 DC | 	byte	$0c, $15, $09, $f8, $ed, $f9, $fc, $ff, $fd, $fc, $fc, $f6, $fe, $03, $f3, $dc
0f9da     E4 32 5F 2C 
0f9de     BF A6 FD 55 
0f9e2     2E C9 BC 10 
0f9e6     46 14 D2 D6 | 	byte	$e4, $32, $5f, $2c, $bf, $a6, $fd, $55, $2e, $c9, $bc, $10, $46, $14, $d2, $d6
0f9ea     0F 24 03 E2 
0f9ee     ED 0F 20 11 
0f9f2     FB EF F1 FB 
0f9f6     03 03 FC FA | 	byte	$0f, $24, $03, $e2, $ed, $0f, $20, $11, $fb, $ef, $f1, $fb, $03, $03, $fc, $fa
0f9fa     03 0C 08 FC 
0f9fe     F8 FC FE 01 
0fa02     0B 14 0E F6 
0fa06     E6 ED 01 10 | 	byte	$03, $0c, $08, $fc, $f8, $fc, $fe, $01, $0b, $14, $0e, $f6, $e6, $ed, $01, $10
0fa0a     08 F3 EB F9 
0fa0e     0C 08 EB DB 
0fa12     E1 03 3A 51 
0fa16     20 C1 A6 ED | 	byte	$08, $f3, $eb, $f9, $0c, $08, $eb, $db, $e1, $03, $3a, $51, $20, $c1, $a6, $ed
0fa1a     47 36 E1 C6 
0fa1e     05 38 18 DC 
0fa22     D6 04 1B 08 
0fa26     F1 F9 0C 11 | 	byte	$47, $36, $e1, $c6, $05, $38, $18, $dc, $d6, $04, $1b, $08, $f1, $f9, $0c, $11
0fa2a     09 01 F8 ED 
0fa2e     F0 06 12 03 
0fa32     F2 FA 0E 0E 
0fa36     FE F6 F9 FA | 	byte	$09, $01, $f8, $ed, $f0, $06, $12, $03, $f2, $fa, $0e, $0e, $fe, $f6, $f9, $fa
0fa3a     FB 0E 23 16 
0fa3e     F3 DB E9 09 
0fa42     10 08 F7 F5 
0fa46     F9 03 05 FB | 	byte	$fb, $0e, $23, $16, $f3, $db, $e9, $09, $10, $08, $f7, $f5, $f9, $03, $05, $fb
0fa4a     E7 E7 F0 FC 
0fa4e     02 30 4B 21 
0fa52     C0 A2 EC 4E 
0fa56     3D E1 CC 11 | 	byte	$e7, $e7, $f0, $fc, $02, $30, $4b, $21, $c0, $a2, $ec, $4e, $3d, $e1, $cc, $11
0fa5a     3A 03 C3 D1 
0fa5e     13 2B 0A F0 
0fa62     00 13 09 F4 
0fa66     F0 F9 FD FF | 	byte	$3a, $03, $c3, $d1, $13, $2b, $0a, $f0, $00, $13, $09, $f4, $f0, $f9, $fd, $ff
0fa6a     06 08 FE F9 
0fa6e     01 07 00 F6 
0fa72     FA 02 03 03 
0fa76     09 13 11 00 | 	byte	$06, $08, $fe, $f9, $01, $07, $00, $f6, $fa, $02, $03, $03, $09, $13, $11, $00
0fa7a     F2 EB F1 01 
0fa7e     0D 10 03 F4 
0fa82     F3 FB FA F2 
0fa86     F6 04 07 EE | 	byte	$f2, $eb, $f1, $01, $0d, $10, $03, $f4, $f3, $fb, $fa, $f2, $f6, $04, $07, $ee
0fa8a     DC EE 3A 5E 
0fa8e     27 BB A0 EA 
0fa92     52 4C E8 C0 
0fa96     FD 3A 16 CF | 	byte	$dc, $ee, $3a, $5e, $27, $bb, $a0, $ea, $52, $4c, $e8, $c0, $fd, $3a, $16, $cf
0fa9a     C8 05 2E 19 
0fa9e     F2 F0 04 09 
0faa2     FD F7 FA F9 
0faa6     FC 09 10 01 | 	byte	$c8, $05, $2e, $19, $f2, $f0, $04, $09, $fd, $f7, $fa, $f9, $fc, $09, $10, $01
0faaa     EF F3 06 0C 
0faae     04 00 03 FE 
0fab2     F6 FA 09 12 
0fab6     19 FE EF E6 | 	byte	$ef, $f3, $06, $0c, $04, $00, $03, $fe, $f6, $fa, $09, $12, $19, $fe, $ef, $e6
0faba     FE 0F 0C FA 
0fabe     F5 FE 03 FF 
0fac2     F2 F0 FB 10 
0fac6     0D F4 E8 E6 | 	byte	$fe, $0f, $0c, $fa, $f5, $fe, $03, $ff, $f2, $f0, $fb, $10, $0d, $f4, $e8, $e6
0faca     F3 ED 19 4F 
0face     4C E4 A3 C4 
0fad2     37 58 03 C3 
0fad6     EA 31 27 E5 | 	byte	$f3, $ed, $19, $4f, $4c, $e4, $a3, $c4, $37, $58, $03, $c3, $ea, $31, $27, $e5
0fada     C4 EB 1A 1E 
0fade     02 F8 00 07 
0fae2     01 FE FE F8 
0fae6     F5 01 11 0A | 	byte	$c4, $eb, $1a, $1e, $02, $f8, $00, $07, $01, $fe, $fe, $f8, $f5, $01, $11, $0a
0faea     F7 F4 05 0F 
0faee     05 F7 F3 F9 
0faf2     04 0C 09 00 
0faf6     FA 09 08 FB | 	byte	$f7, $f4, $05, $0f, $05, $f7, $f3, $f9, $04, $0c, $09, $00, $fa, $09, $08, $fb
0fafa     F2 F9 0B 08 
0fafe     02 FE FF F9 
0fb02     F1 F9 08 09 
0fb06     04 F2 F7 FF | 	byte	$f2, $f9, $0b, $08, $02, $fe, $ff, $f9, $f1, $f9, $08, $09, $04, $f2, $f7, $ff
0fb0a     05 F9 ED ED 
0fb0e     F1 F0 0D 47 
0fb12     48 F4 A7 BA 
0fb16     22 55 11 D0 | 	byte	$05, $f9, $ed, $ed, $f1, $f0, $0d, $47, $48, $f4, $a7, $ba, $22, $55, $11, $d0
0fb1a     EC 2B 22 E4 
0fb1e     C4 ED 24 27 
0fb22     03 EA F8 0C 
0fb26     10 04 F5 EC | 	byte	$ec, $2b, $22, $e4, $c4, $ed, $24, $27, $03, $ea, $f8, $0c, $10, $04, $f5, $ec
0fb2a     F6 0D 16 02 
0fb2e     EC F0 03 0B 
0fb32     06 03 FF F9 
0fb36     F8 FF 06 03 | 	byte	$f6, $0d, $16, $02, $ec, $f0, $03, $0b, $06, $03, $ff, $f9, $f8, $ff, $06, $03
0fb3a     FF 01 01 02 
0fb3e     0A 07 01 F7 
0fb42     FB 0B 09 FF 
0fb46     ED F3 05 13 | 	byte	$ff, $01, $01, $02, $0a, $07, $01, $f7, $fb, $0b, $09, $ff, $ed, $f3, $05, $13
0fb4a     0B F7 EC F6 
0fb4e     F6 FE FD 0A 
0fb52     08 FA F3 F1 
0fb56     F4 EA E8 1F | 	byte	$0b, $f7, $ec, $f6, $f6, $fe, $fd, $0a, $08, $fa, $f3, $f1, $f4, $ea, $e8, $1f
0fb5a     52 3A D4 A5 
0fb5e     E2 44 42 EC 
0fb62     CF 0F 33 01 
0fb66     C6 D6 17 2E | 	byte	$52, $3a, $d4, $a5, $e2, $44, $42, $ec, $cf, $0f, $33, $01, $c6, $d6, $17, $2e
0fb6a     0C ED F4 0A 
0fb6e     0B 00 FD 05 
0fb72     0D FB EB EE 
0fb76     07 16 0A F7 | 	byte	$0c, $ed, $f4, $0a, $0b, $00, $fd, $05, $0d, $fb, $eb, $ee, $07, $16, $0a, $f7
0fb7a     F8 02 06 FB 
0fb7e     F2 F7 07 14 
0fb82     0E FD EF F0 
0fb86     FA 04 09 09 | 	byte	$f8, $02, $06, $fb, $f2, $f7, $07, $14, $0e, $fd, $ef, $f0, $fa, $04, $09, $09
0fb8a     08 07 07 00 
0fb8e     F2 EE FC 13 
0fb92     15 02 EB F2 
0fb96     01 07 FF F9 | 	byte	$08, $07, $07, $00, $f2, $ee, $fc, $13, $15, $02, $eb, $f2, $01, $07, $ff, $f9
0fb9a     FD FC FE FE 
0fb9e     03 02 FC F9 
0fba2     F5 FA FD FF 
0fba6     FA F5 F7 0E | 	byte	$fd, $fc, $fe, $fe, $03, $02, $fc, $f9, $f5, $fa, $fd, $ff, $fa, $f5, $f7, $0e
0fbaa     2A 1C F1 D6 
0fbae     F1 13 15 01 
0fbb2     FD 06 07 FE 
0fbb6     FB FB 01 08 | 	byte	$2a, $1c, $f1, $d6, $f1, $13, $15, $01, $fd, $06, $07, $fe, $fb, $fb, $01, $08
0fbba     09 00 F8 FB 
0fbbe     07 0E 08 FC 
0fbc2     F4 FA 01 04 
0fbc6     03 02 00 FD | 	byte	$09, $00, $f8, $fb, $07, $0e, $08, $fc, $f4, $fa, $01, $04, $03, $02, $00, $fd
0fbca     FB 00 04 02 
0fbce     FB FD 05 09 
0fbd2     05 F6 F2 FA 
0fbd6     08 0C 04 FF | 	byte	$fb, $00, $04, $02, $fb, $fd, $05, $09, $05, $f6, $f2, $fa, $08, $0c, $04, $ff
0fbda     FD FE FE FE 
0fbde     FE FE 02 03 
0fbe2     FD FA FC 06 
0fbe6     02 FA F8 FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $02, $03, $fd, $fa, $fc, $06, $02, $fa, $f8, $ff
0fbea     00 FE FD 00 
0fbee     04 02 FE F5 
0fbf2     F8 FA 06 02 
0fbf6     01 FA FD F9 | 	byte	$00, $fe, $fd, $00, $04, $02, $fe, $f5, $f8, $fa, $06, $02, $01, $fa, $fd, $f9
0fbfa     FA 04 0F 0C 
0fbfe     FE F4 F6 02 
0fc02     09 08 FF FC 
0fc06     FE 03 03 04 | 	byte	$fa, $04, $0f, $0c, $fe, $f4, $f6, $02, $09, $08, $ff, $fc, $fe, $03, $03, $04
0fc0a     05 03 FC FA 
0fc0e     FF 04 08 06 
0fc12     03 FD FB FD 
0fc16     FF 02 02 00 | 	byte	$05, $03, $fc, $fa, $ff, $04, $08, $06, $03, $fd, $fb, $fd, $ff, $02, $02, $00
0fc1a     FC FB 00 06 
0fc1e     05 00 F9 F9 
0fc22     FE 04 05 FF 
0fc26     FB FF 04 01 | 	byte	$fc, $fb, $00, $06, $05, $00, $f9, $f9, $fe, $04, $05, $ff, $fb, $ff, $04, $01
0fc2a     FE FC 00 FF 
0fc2e     02 04 05 00 
0fc32     FE FE 02 03 
0fc36     00 FD FF 04 | 	byte	$fe, $fc, $00, $ff, $02, $04, $05, $00, $fe, $fe, $02, $03, $00, $fd, $ff, $04
0fc3a     05 FF FA FB 
0fc3e     01 04 02 FC 
0fc42     FA FE 03 02 
0fc46     FE FD FC FE | 	byte	$05, $ff, $fa, $fb, $01, $04, $02, $fc, $fa, $fe, $03, $02, $fe, $fd, $fc, $fe
0fc4a     FD FD FD 01 
0fc4e     02 00 FE FD 
0fc52     FF FF FF 01 
0fc56     01 00 FC FC | 	byte	$fd, $fd, $fd, $01, $02, $00, $fe, $fd, $ff, $ff, $ff, $01, $01, $00, $fc, $fc
0fc5a     00 05 02 FD 
0fc5e     FE 04 06 02 
0fc62     FD FF 02 04 
0fc66     02 01 01 01 | 	byte	$00, $05, $02, $fd, $fe, $04, $06, $02, $fd, $ff, $02, $04, $02, $01, $01, $01
0fc6a     FF FF FF 01 
0fc6e     03 03 00 FE 
0fc72     FF 02 01 FF 
0fc76     FE 01 02 00 | 	byte	$ff, $ff, $ff, $01, $03, $03, $00, $fe, $ff, $02, $01, $ff, $fe, $01, $02, $00
0fc7a     FE 00 01 00 
0fc7e     FD FE 02 04 
0fc82     01 FD FC FF 
0fc86     01 01 FE FE | 	byte	$fe, $00, $01, $00, $fd, $fe, $02, $04, $01, $fd, $fc, $ff, $01, $01, $fe, $fe
0fc8a     FF 01 01 FF 
0fc8e     FE 00 03 02 
0fc92     FC F9 FE 04 
0fc96     05 01 FF FF | 	byte	$ff, $01, $01, $ff, $fe, $00, $03, $02, $fc, $f9, $fe, $04, $05, $01, $ff, $ff
0fc9a     01 FE FC FE 
0fc9e     03 04 01 FF 
0fca2     00 02 FE FB 
0fca6     FC 02 06 03 | 	byte	$01, $fe, $fc, $fe, $03, $04, $01, $ff, $00, $02, $fe, $fb, $fc, $02, $06, $03
0fcaa     FF FD 01 02 
0fcae     01 FE FF 03 
0fcb2     04 01 FD FB 
0fcb6     00 05 06 02 | 	byte	$ff, $fd, $01, $02, $01, $fe, $ff, $03, $04, $01, $fd, $fb, $00, $05, $06, $02
0fcba     FE FE 02 FF 
0fcbe     FF FE 04 04 
0fcc2     02 FE FC FD 
0fcc6     FF 00 01 00 | 	byte	$fe, $fe, $02, $ff, $ff, $fe, $04, $04, $02, $fe, $fc, $fd, $ff, $00, $01, $00
0fcca     00 00 FE FD 
0fcce     FE 01 01 00 
0fcd2     FE FF 00 00 
0fcd6     FE FE 01 03 | 	byte	$00, $00, $fe, $fd, $fe, $01, $01, $00, $fe, $ff, $00, $00, $fe, $fe, $01, $03
0fcda     00 FB FC 02 
0fcde     04 01 FE 01 
0fce2     03 01 FC FB 
0fce6     00 04 02 00 | 	byte	$00, $fb, $fc, $02, $04, $01, $fe, $01, $03, $01, $fc, $fb, $00, $04, $02, $00
0fcea     00 01 FF FC 
0fcee     FB FF 04 04 
0fcf2     01 FF FF 00 
0fcf6     FF FD FF 01 | 	byte	$00, $01, $ff, $fc, $fb, $ff, $04, $04, $01, $ff, $ff, $00, $ff, $fd, $ff, $01
0fcfa     02 01 FF FD 
0fcfe     FC FF 02 04 
0fd02     03 FF FC FE 
0fd06     01 04 02 FF | 	byte	$02, $01, $ff, $fd, $fc, $ff, $02, $04, $03, $ff, $fc, $fe, $01, $04, $02, $ff
0fd0a     FE FF 01 00 
0fd0e     FF FF 00 01 
0fd12     FF FE FE FF 
0fd16     FF FF 00 00 | 	byte	$fe, $ff, $01, $00, $ff, $ff, $00, $01, $ff, $fe, $fe, $ff, $ff, $ff, $00, $00
0fd1a     00 FF FF FE 
0fd1e     FE FE FF 01 
0fd22     01 00 FF FF 
0fd26     00 FF FF 00 | 	byte	$00, $ff, $ff, $fe, $fe, $fe, $ff, $01, $01, $00, $ff, $ff, $00, $ff, $ff, $00
0fd2a     01 01 00 FF 
0fd2e     FF 00 00 FF 
0fd32     00 00 01 00 
0fd36     FF FF FF 01 | 	byte	$01, $01, $00, $ff, $ff, $00, $00, $ff, $00, $00, $01, $00, $ff, $ff, $ff, $01
0fd3a     01 01 00 00 
0fd3e     00 00 00 00 
0fd42     00 00 00 00 
0fd46     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fd4a     00 00 FF FE 
0fd4e     FF 00 00 00 
0fd52     01 01 01 FF 
0fd56     FE FD 00 01 | 	byte	$00, $00, $ff, $fe, $ff, $00, $00, $00, $01, $01, $01, $ff, $fe, $fd, $00, $01
0fd5a     01 FF FF FF 
0fd5e     00 00 FF FF 
0fd62     00 01 01 FF 
0fd66     FD FE 00 02 | 	byte	$01, $ff, $ff, $ff, $00, $00, $ff, $ff, $00, $01, $01, $ff, $fd, $fe, $00, $02
0fd6a     01 FF FF 00 
0fd6e     00 FF FE FD 
0fd72     FF 02 02 00 
0fd76     FE FE 01 02 | 	byte	$01, $ff, $ff, $00, $00, $ff, $fe, $fd, $ff, $02, $02, $00, $fe, $fe, $01, $02
0fd7a     00 FD FE 00 
0fd7e     01 00 FF FF 
0fd82     00 00 00 00 
0fd86     00 FE FE 00 | 	byte	$00, $fd, $fe, $00, $01, $00, $ff, $ff, $00, $00, $00, $00, $00, $fe, $fe, $00
0fd8a     02 01 00 FF 
0fd8e     00 00 FF 00 
0fd92     01 01 00 00 
0fd96     00 00 FE FE | 	byte	$02, $01, $00, $ff, $00, $00, $ff, $00, $01, $01, $00, $00, $00, $00, $fe, $fe
0fd9a     00 03 02 FF 
0fd9e     FD FF 02 02 
0fda2     00 FE FE 01 
0fda6     02 01 FF FE | 	byte	$00, $03, $02, $ff, $fd, $ff, $02, $02, $00, $fe, $fe, $01, $02, $01, $ff, $fe
0fdaa     00 01 01 FF 
0fdae     FE FF 01 01 
0fdb2     01 FF FF FF 
0fdb6     FF FF FF 00 | 	byte	$00, $01, $01, $ff, $fe, $ff, $01, $01, $01, $ff, $ff, $ff, $ff, $ff, $ff, $00
0fdba     00 00 01 01 
0fdbe     00 FE FE 00 
0fdc2     01 01 00 00 
0fdc6     FF 00 00 00 | 	byte	$00, $00, $01, $01, $00, $fe, $fe, $00, $01, $01, $00, $00, $ff, $00, $00, $00
0fdca     00 00 01 01 
0fdce     00 FF FE FF 
0fdd2     00 00 FF FF 
0fdd6     01 01 FF FE | 	byte	$00, $00, $01, $01, $00, $ff, $fe, $ff, $00, $00, $ff, $ff, $01, $01, $ff, $fe
0fdda     FF 01 01 FF 
0fdde     FF FF 01 01 
0fde2     00 00 FF FF 
0fde6     00 FF FF FF | 	byte	$ff, $01, $01, $ff, $ff, $ff, $01, $01, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
0fdea     00 02 02 01 
0fdee     FF 00 00 00 
0fdf2     FF FF 00 01 
0fdf6     00 FF FF 00 | 	byte	$00, $02, $02, $01, $ff, $00, $00, $00, $ff, $ff, $00, $01, $00, $ff, $ff, $00
0fdfa     00 FF FF 00 
0fdfe     00 00 FF FF 
0fe02     00 00 FF FF 
0fe06     00 00 00 FF | 	byte	$00, $ff, $ff, $00, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $00, $ff
0fe0a     FF 00 00 00 
0fe0e     FF 00 00 01 
0fe12     00 FF FF 01 
0fe16     00 FF FE 00 | 	byte	$ff, $00, $00, $00, $ff, $00, $00, $01, $00, $ff, $ff, $01, $00, $ff, $fe, $00
0fe1a     01 01 FE FE 
0fe1e     00 02 00 FD 
0fe22     FD 01 02 01 
0fe26     FF 00 00 00 | 	byte	$01, $01, $fe, $fe, $00, $02, $00, $fd, $fd, $01, $02, $01, $ff, $00, $00, $00
0fe2a     00 FF 00 00 
0fe2e     01 01 00 FF 
0fe32     FF 00 00 00 
0fe36     01 01 00 00 | 	byte	$00, $ff, $00, $00, $01, $01, $00, $ff, $ff, $00, $00, $00, $01, $01, $00, $00
0fe3a     00 FF FF FF 
0fe3e     00 01 01 FF 
0fe42     FF FF 00 00 
0fe46     00 00 00 00 | 	byte	$00, $ff, $ff, $ff, $00, $01, $01, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00
0fe4a     00 00 FF FF 
0fe4e     00 00 00 00 
0fe52     FF FF 00 00 
0fe56     FF FF 00 00 | 	byte	$00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00
0fe5a     00 FF FE FF 
0fe5e     01 01 00 FE 
0fe62     FF 00 00 00 
0fe66     FF 00 01 01 | 	byte	$00, $ff, $fe, $ff, $01, $01, $00, $fe, $ff, $00, $00, $00, $ff, $00, $01, $01
0fe6a     FF FE FF 01 
0fe6e     01 00 FF 00 
0fe72     01 01 FF FF 
0fe76     00 01 01 00 | 	byte	$ff, $fe, $ff, $01, $01, $00, $ff, $00, $01, $01, $ff, $ff, $00, $01, $01, $00
0fe7a     00 00 00 00 
0fe7e     01 01 00 FF 
0fe82     FF 00 00 00 
0fe86     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $01, $00, $ff, $ff, $00, $00, $00, $00, $00, $00, $00
0fe8a     00 FE FE FF 
0fe8e     00 01 00 FF 
0fe92     FF 00 FF FF 
0fe96     FF 00 01 00 | 	byte	$00, $fe, $fe, $ff, $00, $01, $00, $ff, $ff, $00, $ff, $ff, $ff, $00, $01, $00
0fe9a     FF FF 00 00 
0fe9e     FF FF FF 00 
0fea2     01 00 FF FF 
0fea6     FF 00 00 FF | 	byte	$ff, $ff, $00, $00, $ff, $ff, $ff, $00, $01, $00, $ff, $ff, $ff, $00, $00, $ff
0feaa     FF FF FF FF 
0feae     00 00 00 FF 
0feb2     FF FF FF 00 
0feb6     00 01 00 FF | 	byte	$ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $01, $00, $ff
0feba     FF FF FF 00 
0febe     00 00 00 00 
0fec2     FF 00 00 00 
0fec6     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $00, $00, $00, $00, $ff, $00, $00, $00, $ff, $ff, $00, $00
0feca     00 FF FF FF 
0fece     00 00 00 00 
0fed2     00 FF FF FF 
0fed6     FF 00 00 00 | 	byte	$00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00
0feda     FF FF 00 00 
0fede     FF FF 00 00 
0fee2     FF FE FF 00 
0fee6     01 00 FE FF | 	byte	$ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $fe, $ff, $00, $01, $00, $fe, $ff
0feea     00 01 00 FF 
0feee     FF 00 00 00 
0fef2     FF FF FF 00 
0fef6     00 00 00 00 | 	byte	$00, $01, $00, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $00, $00, $00, $00, $00
0fefa     00 00 FF FF 
0fefe     FF 00 01 00 
0ff02     00 FF FF 00 
0ff06     00 00 00 00 | 	byte	$00, $00, $ff, $ff, $ff, $00, $01, $00, $00, $ff, $ff, $00, $00, $00, $00, $00
0ff0a     00 00 00 00 
0ff0e     00 00 00 00 | 	byte	$00[8]
0ff12     FF 00 00 00 
0ff16     00 00 00 00 
0ff1a     00 00 00 00 
0ff1e     FF FF 00 01 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $00, $01
0ff22     00 00 FF 00 
0ff26     00 00 00 00 
0ff2a     00 00 FF FF 
0ff2e     00 00 00 FF | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $00, $00, $00, $ff
0ff32     00 00 00 FF 
0ff36     FF FF 00 00 
0ff3a     00 00 00 00 
0ff3e     00 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ff42     00 00 00 00 
0ff46     00 00 00 00 
0ff4a     00 00 00 00 
0ff4e     00 00 00 00 
0ff52     00 00 00 00 
0ff56     00          | 	byte	$00[21]
0ff57     FF 00 00 00 
0ff5b     00 00 00 00 
0ff5f     FF FF FF 00 
0ff63     00 00 00 FF | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $00, $00, $00, $00, $ff
0ff67     FF FF 00 00 
0ff6b     00 00 00 00 
0ff6f     FF FF 00 00 
0ff73     00 FF FF 00 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $ff, $ff, $00, $00, $00, $ff, $ff, $00
0ff77     00 00 00 FF 
0ff7b     FF 01 01 00 
0ff7f     FF FF 00 00 
0ff83     00 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $01, $01, $00, $ff, $ff, $00, $00, $00, $00, $00, $00
0ff87     00 FF FF 00 
0ff8b     01 01 00 FF 
0ff8f     FF 01 01 01 
0ff93     00 00 00 00 | 	byte	$00, $ff, $ff, $00, $01, $01, $00, $ff, $ff, $01, $01, $01, $00, $00, $00, $00
0ff97     FF FF FF 00 
0ff9b     00 00 00 FF 
0ff9f     FF FF FF FF 
0ffa3     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
0ffa7     FF FF FF FF 
0ffab     FF FF FF FF 
0ffaf     FF FF       | 	byte	$ff[10]
0ffb1     00 00 FF 00 
0ffb5     00 00 00 00 
0ffb9     00 00 FF FF 
0ffbd     FF FF 00 FF | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $00, $ff
0ffc1     FF 00 00 00 
0ffc5     FF FF 00 00 
0ffc9     00 00 00 00 
0ffcd     00 00 FF FF | 	byte	$ff, $00, $00, $00, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
0ffd1     FF 00 00 00 
0ffd5     00 FF FF FF 
0ffd9     FF FF 00 00 
0ffdd     00 FF FF FF | 	byte	$ff, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff
0ffe1     00 00 FF FF 
0ffe5     FF 00 00 FF 
0ffe9     00 00 01 00 
0ffed     FF FF 00 01 | 	byte	$00, $00, $ff, $ff, $ff, $00, $00, $ff, $00, $00, $01, $00, $ff, $ff, $00, $01
0fff1     00 FF FF FF 
0fff5     01 00 FF FE 
0fff9     FE FF 01 01 
0fffd     01 FF FE FF | 	byte	$00, $ff, $ff, $ff, $01, $00, $ff, $fe, $fe, $ff, $01, $01, $01, $ff, $fe, $ff
10001     00 00 00 00 
10005     01 00 FE FF 
10009     00 00 00 00 
1000d     00 00 00 FF | 	byte	$00, $00, $00, $00, $01, $00, $fe, $ff, $00, $00, $00, $00, $00, $00, $00, $ff
10011     00 00 00 00 
10015     00 00       | 	byte	$00[6]
10017     01 01 07 07 
1001b     FC FA F6 01 
1001f     03 01 FE FD 
10023     FF FD FB F8 | 	byte	$01, $01, $07, $07, $fc, $fa, $f6, $01, $03, $01, $fe, $fd, $ff, $fd, $fb, $f8
10027     F8 FE 0F 15 
1002b     07 EB E6 00 
1002f     13 0A F6 F8 
10033     07 08 FA F5 | 	byte	$f8, $fe, $0f, $15, $07, $eb, $e6, $00, $13, $0a, $f6, $f8, $07, $08, $fa, $f5
10037     FF 09 05 FF 
1003b     FD 00 01 01 
1003f     02 03 00 FD 
10043     FD FF 00 FF | 	byte	$ff, $09, $05, $ff, $fd, $00, $01, $01, $02, $03, $00, $fd, $fd, $ff, $00, $ff
10047     00 03 04 00 
1004b     FE FE FF FE 
1004f     FE 02 05 02 
10053     FE FD FD FE | 	byte	$00, $03, $04, $00, $fe, $fe, $ff, $fe, $fe, $02, $05, $02, $fe, $fd, $fd, $fe
10057     FE 01 03 02 
1005b     FF 00 01 FF 
1005f     FD FE 02 04 
10063     01 FE FF 01 | 	byte	$fe, $01, $03, $02, $ff, $00, $01, $ff, $fd, $fe, $02, $04, $01, $fe, $ff, $01
10067     00 FE FF 01 
1006b     01 FF FF 00 
1006f     00 FF FF 00 
10073     00 FF FF 00 | 	byte	$00, $fe, $ff, $01, $01, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00
10077     01 00 00 01 
1007b     00 FF FF 00 
1007f     00 00 00 01 
10083     01 00 03 03 | 	byte	$01, $00, $00, $01, $00, $ff, $ff, $00, $00, $00, $00, $01, $01, $00, $03, $03
10087     01 FD FF 02 
1008b     04 01 FE FF 
1008f     01 00 FE FD 
10093     FE FF FF FD | 	byte	$01, $fd, $ff, $02, $04, $01, $fe, $ff, $01, $00, $fe, $fd, $fe, $ff, $ff, $fd
10097     F9 F7 F4 F9 
1009b     16 2A 10 DB 
1009f     CF 00 25 11 
100a3     EB F5 14 11 | 	byte	$f9, $f7, $f4, $f9, $16, $2a, $10, $db, $cf, $00, $25, $11, $eb, $f5, $14, $11
100a7     F2 E8 FC 0D 
100ab     09 FF FF 03 
100af     02 01 01 01 
100b3     FE FD FF 03 | 	byte	$f2, $e8, $fc, $0d, $09, $ff, $ff, $03, $02, $01, $01, $01, $fe, $fd, $ff, $03
100b7     01 FC FD 03 
100bb     05 01 FE 00 
100bf     FF FC FC 03 
100c3     07 03 FE FD | 	byte	$01, $fc, $fd, $03, $05, $01, $fe, $00, $ff, $fc, $fc, $03, $07, $03, $fe, $fd
100c7     FD FC FC 01 
100cb     05 02 FF 01 
100cf     02 FE F8 FB 
100d3     04 07 01 FC | 	byte	$fd, $fc, $fc, $01, $05, $02, $ff, $01, $02, $fe, $f8, $fb, $04, $07, $01, $fc
100d7     FF 02 01 02 
100db     FF 01 FF FF 
100df     03 04 FF FB 
100e3     FA FE FF FC | 	byte	$ff, $02, $01, $02, $ff, $01, $ff, $ff, $03, $04, $ff, $fb, $fa, $fe, $ff, $fc
100e7     FE FE 00 FB 
100eb     F6 F3 F2 F4 
100ef     15 36 20 DC 
100f3     BB F0 2D 22 | 	byte	$fe, $fe, $00, $fb, $f6, $f3, $f2, $f4, $15, $36, $20, $dc, $bb, $f0, $2d, $22
100f7     E9 E5 13 21 
100fb     FB DD EF 0D 
100ff     10 01 FD 05 
10103     07 00 FD 00 | 	byte	$e9, $e5, $13, $21, $fb, $dd, $ef, $0d, $10, $01, $fd, $05, $07, $00, $fd, $00
10107     01 FC FD 04 
1010b     06 FD F9 01 
1010f     07 03 FD FF 
10113     03 FE F9 FF | 	byte	$01, $fc, $fd, $04, $06, $fd, $f9, $01, $07, $03, $fd, $ff, $03, $fe, $f9, $ff
10117     07 07 01 FD 
1011b     FC FA FB 01 
1011f     05 02 FF 01 
10123     05 00 F6 F7 | 	byte	$07, $07, $01, $fd, $fc, $fa, $fb, $01, $05, $02, $ff, $01, $05, $00, $f6, $f7
10127     05 0F 0B FF 
1012b     FB FE FB FA 
1012f     FB 03 03 FE 
10133     FB FC FE FB | 	byte	$05, $0f, $0b, $ff, $fb, $fe, $fb, $fa, $fb, $03, $03, $fe, $fb, $fc, $fe, $fb
10137     FA F8 F4 EE 
1013b     ED 16 41 2F 
1013f     DD AD DF 30 
10143     31 EE D9 0D | 	byte	$fa, $f8, $f4, $ee, $ed, $16, $41, $2f, $dd, $ad, $df, $30, $31, $ee, $d9, $0d
10147     2E 06 D4 DD 
1014b     0D 1E 04 F3 
1014f     00 13 0C F7 
10153     F2 FC 03 02 | 	byte	$2e, $06, $d4, $dd, $0d, $1e, $04, $f3, $00, $13, $0c, $f7, $f2, $fc, $03, $02
10157     03 05 01 FB 
1015b     FE 03 00 FC 
1015f     00 05 01 FA 
10163     FC 04 06 00 | 	byte	$03, $05, $01, $fb, $fe, $03, $00, $fc, $00, $05, $01, $fa, $fc, $04, $06, $00
10167     FB FB FC FE 
1016b     01 03 02 03 
1016f     07 0D 02 F2 
10173     ED FB 0D 0A | 	byte	$fb, $fb, $fc, $fe, $01, $03, $02, $03, $07, $0d, $02, $f2, $ed, $fb, $0d, $0a
10177     FF F9 FE 00 
1017b     F5 F2 F6 03 
1017f     03 F9 ED E6 
10183     FD 39 49 05 | 	byte	$ff, $f9, $fe, $00, $f5, $f2, $f6, $03, $03, $f9, $ed, $e6, $fd, $39, $49, $05
10187     AF B5 1A 52 
1018b     13 C9 E6 2E 
1018f     29 E2 C6 F2 
10193     22 1A F9 F3 | 	byte	$af, $b5, $1a, $52, $13, $c9, $e6, $2e, $29, $e2, $c6, $f2, $22, $1a, $f9, $f3
10197     07 10 00 F4 
1019b     F6 FE 02 06 
1019f     08 00 F6 FA 
101a3     06 08 FD FB | 	byte	$07, $10, $00, $f4, $f6, $fe, $02, $06, $08, $00, $f6, $fa, $06, $08, $fd, $fb
101a7     05 07 FC F7 
101ab     00 07 03 FE 
101af     FF 00 F9 FC 
101b3     10 19 00 EC | 	byte	$05, $07, $fc, $f7, $00, $07, $03, $fe, $ff, $00, $f9, $fc, $10, $19, $00, $ec
101b7     EF 08 0A FA 
101bb     F7 04 0A FD 
101bf     F3 F8 00 FD 
101c3     F9 F8 F4 F3 | 	byte	$ef, $08, $0a, $fa, $f7, $04, $0a, $fd, $f3, $f8, $00, $fd, $f9, $f8, $f4, $f3
101c7     E9 F7 2C 50 
101cb     23 BF A3 F0 
101cf     4D 38 E1 D2 
101d3     16 38 00 C2 | 	byte	$e9, $f7, $2c, $50, $23, $bf, $a3, $f0, $4d, $38, $e1, $d2, $16, $38, $00, $c2
101d7     D2 15 2D 09 
101db     EB FE 18 0C 
101df     F0 EB FC 04 
101e3     04 0B 0F FE | 	byte	$d2, $15, $2d, $09, $eb, $fe, $18, $0c, $f0, $eb, $fc, $04, $04, $0b, $0f, $fe
101e7     EC F2 07 0E 
101eb     03 FB FE 02 
101ef     FF FC 00 04 
101f3     03 FD FC 02 | 	byte	$ec, $f2, $07, $0e, $03, $fb, $fe, $02, $ff, $fc, $00, $04, $03, $fd, $fc, $02
101f7     18 0B F9 E7 
101fb     F7 10 11 FD 
101ff     EC F5 0B 0D 
10203     04 EA F3 07 | 	byte	$18, $0b, $f9, $e7, $f7, $10, $11, $fd, $ec, $f5, $0b, $0d, $04, $ea, $f3, $07
10207     0A F5 E8 F7 
1020b     FD EC E7 2F 
1020f     60 30 BB A0 
10213     F0 57 3F D6 | 	byte	$0a, $f5, $e8, $f7, $fd, $ec, $e7, $2f, $60, $30, $bb, $a0, $f0, $57, $3f, $d6
10217     C5 1A 47 01 
1021b     B2 C3 17 39 
1021f     0F E6 F7 17 
10223     11 F2 E5 F2 | 	byte	$c5, $1a, $47, $01, $b2, $c3, $17, $39, $0f, $e6, $f7, $17, $11, $f2, $e5, $f2
10227     FF 09 13 10 
1022b     FA E9 F0 05 
1022f     0A 04 00 02 
10233     00 FC FF 03 | 	byte	$ff, $09, $13, $10, $fa, $e9, $f0, $05, $0a, $04, $00, $02, $00, $fc, $ff, $03
10237     03 FC FD 03 
1023b     16 07 FC EE 
1023f     F5 05 0A 0B 
10243     00 F2 F0 FE | 	byte	$03, $fc, $fd, $03, $16, $07, $fc, $ee, $f5, $05, $0a, $0b, $00, $f2, $f0, $fe
10247     0C 05 F8 F8 
1024b     01 01 F8 F3 
1024f     FB FA EC DB 
10253     00 50 63 05 | 	byte	$0c, $05, $f8, $f8, $01, $01, $f8, $f3, $fb, $fa, $ec, $db, $00, $50, $63, $05
10257     A9 A7 17 61 
1025b     28 C6 D2 2F 
1025f     3E E7 A8 D3 
10263     2D 3D 02 DE | 	byte	$a9, $a7, $17, $61, $28, $c6, $d2, $2f, $3e, $e7, $a8, $d3, $2d, $3d, $02, $de
10267     F7 19 0E F0 
1026b     E6 F2 03 12 
1026f     19 04 E5 E4 
10273     01 16 09 F6 | 	byte	$f7, $19, $0e, $f0, $e6, $f2, $03, $12, $19, $04, $e5, $e4, $01, $16, $09, $f6
10277     F9 06 05 F8 
1027b     F5 03 0D 08 
1027f     FB 05 0D 01 
10283     F4 EC 02 0F | 	byte	$f9, $06, $05, $f8, $f5, $03, $0d, $08, $fb, $05, $0d, $01, $f4, $ec, $02, $0f
10287     0F 04 F7 EB 
1028b     F3 04 0C 05 
1028f     F6 FD 02 04 
10293     F3 F1 FF 00 | 	byte	$0f, $04, $f7, $eb, $f3, $04, $0c, $05, $f6, $fd, $02, $04, $f3, $f1, $ff, $00
10297     FA E4 E0 F5 
1029b     43 60 20 B4 
1029f     A1 FC 5C 43 
102a3     D5 BA 0F 47 | 	byte	$fa, $e4, $e0, $f5, $43, $60, $20, $b4, $a1, $fc, $5c, $43, $d5, $ba, $0f, $47
102a7     0C B9 C3 16 
102ab     3C 11 E1 EF 
102af     13 14 F7 EA 
102b3     F4 05 0D 0C | 	byte	$0c, $b9, $c3, $16, $3c, $11, $e1, $ef, $13, $14, $f7, $ea, $f4, $05, $0d, $0c
102b7     FE ED F3 08 
102bb     11 00 F5 FE 
102bf     09 FF F4 FC 
102c3     0C 0E 01 F8 | 	byte	$fe, $ed, $f3, $08, $11, $00, $f5, $fe, $09, $ff, $f4, $fc, $0c, $0e, $01, $f8
102c7     FF 0F 02 FE 
102cb     F6 FF 08 0A 
102cf     07 F5 EB F3 
102d3     0E 0E FB EE | 	byte	$ff, $0f, $02, $fe, $f6, $ff, $08, $0a, $07, $f5, $eb, $f3, $0e, $0e, $fb, $ee
102d7     FD 09 00 F2 
102db     F7 06 0A FD 
102df     F4 F3 EB DD 
102e3     D7 28 66 57 | 	byte	$fd, $09, $00, $f2, $f7, $06, $0a, $fd, $f4, $f3, $eb, $dd, $d7, $28, $66, $57
102e7     D9 A0 C8 44 
102eb     5B F6 B2 ED 
102ef     4B 39 D5 A7 
102f3     E6 38 33 F1 | 	byte	$d9, $a0, $c8, $44, $5b, $f6, $b2, $ed, $4b, $39, $d5, $a7, $e6, $38, $33, $f1
102f7     D8 FE 21 14 
102fb     F7 E9 EC FB 
102ff     0A 0E FF F4 
10303     FB 08 08 FE | 	byte	$d8, $fe, $21, $14, $f7, $e9, $ec, $fb, $0a, $0e, $ff, $f4, $fb, $08, $08, $fe
10307     FB FD FD FC 
1030b     01 07 0A 05 
1030f     FE F6 03 0E 
10313     08 FE EF FD | 	byte	$fb, $fd, $fd, $fc, $01, $07, $0a, $05, $fe, $f6, $03, $0e, $08, $fe, $ef, $fd
10317     0B 15 03 E8 
1031b     DF F9 18 14 
1031f     F3 EB FD 0D 
10323     FF EE F4 0A | 	byte	$0b, $15, $03, $e8, $df, $f9, $18, $14, $f3, $eb, $fd, $0d, $ff, $ee, $f4, $0a
10327     0C FE F1 F6 
1032b     FF FB E9 D6 
1032f     E9 3F 69 34 
10333     BE A1 EB 51 | 	byte	$0c, $fe, $f1, $f6, $ff, $fb, $e9, $d6, $e9, $3f, $69, $34, $be, $a1, $eb, $51
10337     3F E9 D4 0C 
1033b     29 FF CE D9 
1033f     0D 25 0D EE 
10343     F1 0A 18 09 | 	byte	$3f, $e9, $d4, $0c, $29, $ff, $ce, $d9, $0d, $25, $0d, $ee, $f1, $0a, $18, $09
10347     EF E8 F8 0A 
1034b     0B FD F6 00 
1034f     0B 07 FD F8 
10353     FC FC FB FF | 	byte	$ef, $e8, $f8, $0a, $0b, $fd, $f6, $00, $0b, $07, $fd, $f8, $fc, $fc, $fb, $ff
10357     0A 0E 06 FC 
1035b     FA FA F8 FE 
1035f     19 18 09 E9 
10363     EF 02 07 FE | 	byte	$0a, $0e, $06, $fc, $fa, $fa, $f8, $fe, $19, $18, $09, $e9, $ef, $02, $07, $fe
10367     F6 00 05 02 
1036b     FC FA 00 FE 
1036f     F7 F9 03 01 
10373     03 FE 0B 00 | 	byte	$f6, $00, $05, $02, $fc, $fa, $00, $fe, $f7, $f9, $03, $01, $03, $fe, $0b, $00
10377     FA ED F6 FC 
1037b     FF F9 EC E0 
1037f     18 51 46 E2 
10383     A8 D4 2C 39 | 	byte	$fa, $ed, $f6, $fc, $ff, $f9, $ec, $e0, $18, $51, $46, $e2, $a8, $d4, $2c, $39
10387     05 F5 15 0C 
1038b     EA D9 F4 17 
1038f     1D 0A F3 EC 
10393     FB 0D 15 0D | 	byte	$05, $f5, $15, $0c, $ea, $d9, $f4, $17, $1d, $0a, $f3, $ec, $fb, $0d, $15, $0d
10397     00 F4 EE F9 
1039b     0A 08 FF FB 
1039f     03 03 00 FC 
103a3     06 06 F1 F1 | 	byte	$00, $f4, $ee, $f9, $0a, $08, $ff, $fb, $03, $03, $00, $fc, $06, $06, $f1, $f1
103a7     F9 11 17 07 
103ab     F2 ED 00 12 
103af     12 FB EE F4 
103b3     08 04 FC 00 | 	byte	$f9, $11, $17, $07, $f2, $ed, $00, $12, $12, $fb, $ee, $f4, $08, $04, $fc, $00
103b7     0A 0A F5 ED 
103bb     FB 07 07 F6 
103bf     F9 FF 03 FB 
103c3     F4 FF 03 04 | 	byte	$0a, $0a, $f5, $ed, $fb, $07, $07, $f6, $f9, $ff, $03, $fb, $f4, $ff, $03, $04
103c7     F6 F6 FC 02 
103cb     09 07 FC F3 
103cf     F7 FC F3 F8 
103d3     1E 23 0D E6 | 	byte	$f6, $f6, $fc, $02, $09, $07, $fc, $f3, $f7, $fc, $f3, $f8, $1e, $23, $0d, $e6
103d7     E8 FD 10 0D 
103db     07 00 03 01 
103df     06 02 FC 02 
103e3     FE 01 FF 09 | 	byte	$e8, $fd, $10, $0d, $07, $00, $03, $01, $06, $02, $fc, $02, $fe, $01, $ff, $09
103e7     05 03 00 04 
103eb     FD F9 F8 03 
103ef     09 00 FA FA 
103f3     01 04 01 FE | 	byte	$05, $03, $00, $04, $fd, $f9, $f8, $03, $09, $00, $fa, $fa, $01, $04, $01, $fe
103f7     FB FF 01 04 
103fb     FF 01 04 09 
103ff     FF F6 F7 06 
10403     09 06 FD 02 | 	byte	$fb, $ff, $01, $04, $ff, $01, $04, $09, $ff, $f6, $f7, $06, $09, $06, $fd, $02
10407     02 FC F5 FA 
1040b     05 07 FC F7 
1040f     F6 FC 03 00 
10413     F8 F8 FE 02 | 	byte	$02, $fc, $f5, $fa, $05, $07, $fc, $f7, $f6, $fc, $03, $00, $f8, $f8, $fe, $02
10417     00 FC FB 00 
1041b     FB FA F8 03 
1041f     04 06 FC FA 
10423     FB 01 08 01 | 	byte	$00, $fc, $fb, $00, $fb, $fa, $f8, $03, $04, $06, $fc, $fa, $fb, $01, $08, $01
10427     FC F6 01 01 
1042b     10 09 08 FF 
1042f     01 F9 03 06 
10433     0D 0A 06 FB | 	byte	$fc, $f6, $01, $01, $10, $09, $08, $ff, $01, $f9, $03, $06, $0d, $0a, $06, $fb
10437     FA FC 06 09 
1043b     03 FE FD 06 
1043f     02 FE FA FD 
10443     05 07 00 FD | 	byte	$fa, $fc, $06, $09, $03, $fe, $fd, $06, $02, $fe, $fa, $fd, $05, $07, $00, $fd
10447     FD 01 FE FE 
1044b     FD 00 03 FF 
1044f     FE FD 03 01 
10453     FE FA FD 01 | 	byte	$fd, $01, $fe, $fe, $fd, $00, $03, $ff, $fe, $fd, $03, $01, $fe, $fa, $fd, $01
10457     06 01 02 FF 
1045b     FD 00 FE 05 
1045f     04 FF F8 F9 
10463     00 03 04 01 | 	byte	$06, $01, $02, $ff, $fd, $00, $fe, $05, $04, $ff, $f8, $f9, $00, $03, $04, $01
10467     FC F9 F7 FC 
1046b     03 04 FD F9 
1046f     F2 FE 00 08 
10473     F8 F9 F9 02 | 	byte	$fc, $f9, $f7, $fc, $03, $04, $fd, $f9, $f2, $fe, $00, $08, $f8, $f9, $f9, $02
10477     00 FD FC 01 
1047b     01 FE FD 04 
1047f     01 03 FA FA 
10483     FB 01 02 02 | 	byte	$00, $fd, $fc, $01, $01, $fe, $fd, $04, $01, $03, $fa, $fa, $fb, $01, $02, $02
10487     05 0D 09 01 
1048b     F6 FF 06 0C 
1048f     05 00 FF 02 
10493     03 04 00 FC | 	byte	$05, $0d, $09, $01, $f6, $ff, $06, $0c, $05, $00, $ff, $02, $03, $04, $00, $fc
10497     05 06 00 FB 
1049b     FE 07 07 02 
1049f     F9 FA 01 05 
104a3     01 F8 FD 03 | 	byte	$05, $06, $00, $fb, $fe, $07, $07, $02, $f9, $fa, $01, $05, $01, $f8, $fd, $03
104a7     09 02 FB FC 
104ab     FE 03 00 01 
104af     FE 04 03 FF 
104b3     F9 FB 04 06 | 	byte	$09, $02, $fb, $fc, $fe, $03, $00, $01, $fe, $04, $03, $ff, $f9, $fb, $04, $06
104b7     04 FC 01 00 
104bb     01 FA FD 01 
104bf     03 03 FC FA 
104c3     FB FF 00 FE | 	byte	$04, $fc, $01, $00, $01, $fa, $fd, $01, $03, $03, $fc, $fa, $fb, $ff, $00, $fe
104c7     FC FE FF FF 
104cb     FD FA F9 00 
104cf     04 04 F9 F9 
104d3     FA 03 00 05 | 	byte	$fc, $fe, $ff, $ff, $fd, $fa, $f9, $00, $04, $04, $f9, $f9, $fa, $03, $00, $05
104d7     00 FD FB FD 
104db     06 04 01 FA 
104df     FA 02 02 05 
104e3     FF FD F6 FA | 	byte	$00, $fd, $fb, $fd, $06, $04, $01, $fa, $fa, $02, $02, $05, $ff, $fd, $f6, $fa
104e7     09 0F 05 FB 
104eb     F8 01 06 04 
104ef     00 02 FF 01 
104f3     FD 03 02 05 | 	byte	$09, $0f, $05, $fb, $f8, $01, $06, $04, $00, $02, $ff, $01, $fd, $03, $02, $05
104f7     FF FF 00 01 
104fb     01 00 03 03 
104ff     00 FF 00 00 
10503     01 01 00 FF | 	byte	$ff, $ff, $00, $01, $01, $00, $03, $03, $00, $ff, $00, $00, $01, $01, $00, $ff
10507     00 02 02 01 
1050b     FF FE 00 FE 
1050f     00 01 03 02 
10513     FD 00 FF 02 | 	byte	$00, $02, $02, $01, $ff, $fe, $00, $fe, $00, $01, $03, $02, $fd, $00, $ff, $02
10517     FD FF 00 03 
1051b     00 FC FD 00 
1051f     02 FF FF FF 
10523     FE FD FC 01 | 	byte	$fd, $ff, $00, $03, $00, $fc, $fd, $00, $02, $ff, $ff, $ff, $fe, $fd, $fc, $01
10527     01 FF FE FE 
1052b     FF FD FD FF 
1052f     02 01 02 FE 
10533     FE FD FF 03 | 	byte	$01, $ff, $fe, $fe, $ff, $fd, $fd, $ff, $02, $01, $02, $fe, $fe, $fd, $ff, $03
10537     02 FF FA FE 
1053b     05 05 00 FA 
1053f     FA FD 01 02 
10543     05 05 03 FD | 	byte	$02, $ff, $fa, $fe, $05, $05, $00, $fa, $fa, $fd, $01, $02, $05, $05, $03, $fd
10547     FB FF 04 03 
1054b     00 00 02 02 
1054f     03 01 00 01 
10553     FE FF FF 01 | 	byte	$fb, $ff, $04, $03, $00, $00, $02, $02, $03, $01, $00, $01, $fe, $ff, $ff, $01
10557     01 04 03 01 
1055b     FD FC FD 01 
1055f     05 03 01 FF 
10563     FF 01 03 01 | 	byte	$01, $04, $03, $01, $fd, $fc, $fd, $01, $05, $03, $01, $ff, $ff, $01, $03, $01
10567     FE FE 00 02 
1056b     01 00 00 00 
1056f     FE FF 00 03 
10573     00 FF FD 00 | 	byte	$fe, $fe, $00, $02, $01, $00, $00, $00, $fe, $ff, $00, $03, $00, $ff, $fd, $00
10577     00 01 FE FF 
1057b     FF 01 FF FE 
1057f     FF 02 00 01 
10583     FF 03 FE FE | 	byte	$00, $01, $fe, $ff, $ff, $01, $ff, $fe, $ff, $02, $00, $01, $ff, $03, $fe, $fe
10587     FD FF 01 00 
1058b     00 FE FE FD 
1058f     FE 00 FE FF 
10593     FF 00 FE FE | 	byte	$fd, $ff, $01, $00, $00, $fe, $fe, $fd, $fe, $00, $fe, $ff, $ff, $00, $fe, $fe
10597     FD FF 00 FF 
1059b     FE FC FD FE 
1059f     00 01 00 FD 
105a3     FB FE 02 04 | 	byte	$fd, $ff, $00, $ff, $fe, $fc, $fd, $fe, $00, $01, $00, $fd, $fb, $fe, $02, $04
105a7     FE FB FC 00 
105ab     02 01 05 04 
105af     03 FE FD 01 
105b3     05 05 02 FF | 	byte	$fe, $fb, $fc, $00, $02, $01, $05, $04, $03, $fe, $fd, $01, $05, $05, $02, $ff
105b7     FF 01 03 02 
105bb     02 01 00 FF 
105bf     FF 00 03 04 
105c3     02 FF FD FF | 	byte	$ff, $01, $03, $02, $02, $01, $00, $ff, $ff, $00, $03, $04, $02, $ff, $fd, $ff
105c7     01 01 00 00 
105cb     01 00 FE FE 
105cf     FF 01 FF FE 
105d3     FE 00 00 01 | 	byte	$01, $01, $00, $00, $01, $00, $fe, $fe, $ff, $01, $ff, $fe, $fe, $00, $00, $01
105d7     FF FD FD FF 
105db     01 02 00 00 
105df     FF FF FF 00 
105e3     00 00 FE FE | 	byte	$ff, $fd, $fd, $ff, $01, $02, $00, $00, $ff, $ff, $ff, $00, $00, $00, $fe, $fe
105e7     FF 01 02 00 
105eb     FE FD FE 00 
105ef     01 00 00 FF 
105f3     00 01 00 FE | 	byte	$ff, $01, $02, $00, $fe, $fd, $fe, $00, $01, $00, $00, $ff, $00, $01, $00, $fe
105f7     FE 00 02 00 
105fb     FF 01 03 01 
105ff     FF FC 01 01 
10603     02 FF FF FF | 	byte	$fe, $00, $02, $00, $ff, $01, $03, $01, $ff, $fc, $01, $01, $02, $ff, $ff, $ff
10607     00 01 00 FE 
1060b     FF FF 01 01 
1060f     00 FF FF FE 
10613     FF FF 02 02 | 	byte	$00, $01, $00, $fe, $ff, $ff, $01, $01, $00, $ff, $ff, $fe, $ff, $ff, $02, $02
10617     FF FD FE 00 
1061b     00 FF 00 FF 
1061f     01 FF FF FF 
10623     00 FF FF FF | 	byte	$ff, $fd, $fe, $00, $00, $ff, $00, $ff, $01, $ff, $ff, $ff, $00, $ff, $ff, $ff
10627     00 01 01 FF 
1062b     FE FF 01 01 
1062f     FF FF FF 00 
10633     00 00 FF 00 | 	byte	$00, $01, $01, $ff, $fe, $ff, $01, $01, $ff, $ff, $ff, $00, $00, $00, $ff, $00
10637     00 FF 00 01 
1063b     02 01 01 00 
1063f     00 FF FF 00 
10643     01 01 01 00 | 	byte	$00, $ff, $00, $01, $02, $01, $01, $00, $00, $ff, $ff, $00, $01, $01, $01, $00
10647     00 01 00 00 
1064b     FF 00 01 01 
1064f     00 00 01 00 
10653     FF FF 00 01 | 	byte	$00, $01, $00, $00, $ff, $00, $01, $01, $00, $00, $01, $00, $ff, $ff, $00, $01
10657     00 FF FE FF 
1065b     00 01 00 FF 
1065f     FF 01 01 00 
10663     FE FF FF 01 | 	byte	$00, $ff, $fe, $ff, $00, $01, $00, $ff, $ff, $01, $01, $00, $fe, $ff, $ff, $01
10667     01 00 FF FE 
1066b     FF 00 01 00 
1066f     FF 00 00 00 
10673     FF FF 00 01 | 	byte	$01, $00, $ff, $fe, $ff, $00, $01, $00, $ff, $00, $00, $00, $ff, $ff, $00, $01
10677     00 FF FE FE 
1067b     FF 00 00 FF 
1067f     FF FE FF FE 
10683     FF FE FF FF | 	byte	$00, $ff, $fe, $fe, $ff, $00, $00, $ff, $ff, $fe, $ff, $fe, $ff, $fe, $ff, $ff
10687     01 04 04 01 
1068b     FE FE FF 01 
1068f     00 01 01 02 
10693     02 01 FF FF | 	byte	$01, $04, $04, $01, $fe, $fe, $ff, $01, $00, $01, $01, $02, $02, $01, $ff, $ff
10697     00 01 01 00 
1069b     00 02 02 01 
1069f     00 FF FE FE 
106a3     FE FF 01 02 | 	byte	$00, $01, $01, $00, $00, $02, $02, $01, $00, $ff, $fe, $fe, $fe, $ff, $01, $02
106a7     00 FF FE FF 
106ab     FF FF FF 00 
106af     00 00 FF FE 
106b3     FE FF FF FF | 	byte	$00, $ff, $fe, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $fe, $fe, $ff, $ff, $ff
106b7     FF FF 00 00 
106bb     00 FF FF 00 
106bf     00 00 FF FF 
106c3     00 00 00 FF | 	byte	$ff, $ff, $00, $00, $00, $ff, $ff, $00, $00, $00, $ff, $ff, $00, $00, $00, $ff
106c7     FF 00 00 00 
106cb     FF FF 00 01 
106cf     00 FF FE FE 
106d3     00 00 00 00 | 	byte	$ff, $00, $00, $00, $ff, $ff, $00, $01, $00, $ff, $fe, $fe, $00, $00, $00, $00
106d7     01 01 00 FE 
106db     FE FF 00 01 
106df     00 FF 00 01 
106e3     00 00 FE FF | 	byte	$01, $01, $00, $fe, $fe, $ff, $00, $01, $00, $ff, $00, $01, $00, $00, $fe, $ff
106e7     01 01 00 FF 
106eb     FF 00 00 00 
106ef     00 00 00 00 
106f3     00 FF FF 00 | 	byte	$01, $01, $00, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $00
106f7     00 00 FF FF 
106fb     FF 00 00 00 
106ff     FF FF FF 00 
10703     FF FF FF 00 | 	byte	$00, $00, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $00
10707     01 01 FF FF 
1070b     FF 00 00 00 
1070f     00 00 00 01 
10713     00 00 03 04 | 	byte	$01, $01, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $01, $00, $00, $03, $04
10717     FF FB FC 02 
1071b     05 04 FE FC 
1071f     FD FF 00 00 
10723     01 00 FF FE | 	byte	$ff, $fb, $fc, $02, $05, $04, $fe, $fc, $fd, $ff, $00, $00, $01, $00, $ff, $fe
10727     FE FF 00 00 
1072b     FE FD FD FC 
1072f     FE 00 01 FE 
10733     FD 00 0C 0D | 	byte	$fe, $ff, $00, $00, $fe, $fd, $fd, $fc, $fe, $00, $01, $fe, $fd, $00, $0c, $0d
10737     00 EF F2 06 
1073b     11 06 F7 F9 
1073f     06 08 FE F7 
10743     FE 07 07 FF | 	byte	$00, $ef, $f2, $06, $11, $06, $f7, $f9, $06, $08, $fe, $f7, $fe, $07, $07, $ff
10747     FC FF 04 04 
1074b     00 FE FE FF 
1074f     FF FF 00 00 
10753     00 00 01 00 | 	byte	$fc, $ff, $04, $04, $00, $fe, $fe, $ff, $ff, $ff, $00, $00, $00, $00, $01, $00
10757     FD FD FF 01 
1075b     02 00 FF 00 
1075f     FF FE FE FF 
10763     01 02 01 FF | 	byte	$fd, $fd, $ff, $01, $02, $00, $ff, $00, $ff, $fe, $fe, $ff, $01, $02, $01, $ff
10767     FE 00 01 00 
1076b     FE FF 02 03 
1076f     00 FE FE 00 
10773     00 FF FF 01 | 	byte	$fe, $00, $01, $00, $fe, $ff, $02, $03, $00, $fe, $fe, $00, $00, $ff, $ff, $01
10777     00 FF FE FF 
1077b     00 00 FF FE 
1077f     FF 00 00 00 
10783     FF FF 00 FF | 	byte	$00, $ff, $fe, $ff, $00, $00, $ff, $fe, $ff, $00, $00, $00, $ff, $ff, $00, $ff
10787     FF FF 00 00 
1078b     FF FF 00 01 
1078f     00 00 FF FF 
10793     00 00 00 00 | 	byte	$ff, $ff, $00, $00, $ff, $ff, $00, $01, $00, $00, $ff, $ff, $00, $00, $00, $00
10797     FF FF FF 00 
1079b     00 00 FF FF 
1079f     00 01 00 FF 
107a3     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $00, $00, $ff, $ff, $00, $01, $00, $ff, $ff, $ff, $00, $00
107a7     FF 00 06 09 
107ab     02 F6 F5 FA 
107af     04 05 01 FE 
107b3     FF FE FB FB | 	byte	$ff, $00, $06, $09, $02, $f6, $f5, $fa, $04, $05, $01, $fe, $ff, $fe, $fb, $fb
107b7     FC FE FD FB 
107bb     F9 01 13 19 
107bf     05 E5 E1 FF 
107c3     18 0E F6 F6 | 	byte	$fc, $fe, $fd, $fb, $f9, $01, $13, $19, $05, $e5, $e1, $ff, $18, $0e, $f6, $f6
107c7     0B 10 FC ED 
107cb     F7 0A 0C 00 
107cf     FA 01 08 05 
107d3     FD FA FC FF | 	byte	$0b, $10, $fc, $ed, $f7, $0a, $0c, $00, $fa, $01, $08, $05, $fd, $fa, $fc, $ff
107d7     00 01 02 01 
107db     FE FE 01 02 
107df     FF FC FD 00 
107e3     01 01 01 01 | 	byte	$00, $01, $02, $01, $fe, $fe, $01, $02, $ff, $fc, $fd, $00, $01, $01, $01, $01
107e7     00 FE FD FD 
107eb     00 02 02 00 
107ef     FF 01 01 FE 
107f3     FB FD 03 05 | 	byte	$00, $fe, $fd, $fd, $00, $02, $02, $00, $ff, $01, $01, $fe, $fb, $fd, $03, $05
107f7     01 FD FF 02 
107fb     FF FB FC 01 
107ff     03 01 FF 00 
10803     01 FF FD FD | 	byte	$01, $fd, $ff, $02, $ff, $fb, $fc, $01, $03, $01, $ff, $00, $01, $ff, $fd, $fd
10807     FF 01 02 01 
1080b     00 FF FF FF 
1080f     FF FF 00 00 
10813     FF FF 00 01 | 	byte	$ff, $01, $02, $01, $00, $ff, $ff, $ff, $ff, $ff, $00, $00, $ff, $ff, $00, $01
10817     00 FE FE 00 
1081b     01 01 01 01 
1081f     FF FE FF 02 
10823     09 09 02 FB | 	byte	$00, $fe, $fe, $00, $01, $01, $01, $01, $ff, $fe, $ff, $02, $09, $09, $02, $fb
10827     F7 FB 00 01 
1082b     02 01 00 FE 
1082f     FD FC FB FA 
10833     FA FA FA 04 | 	byte	$f7, $fb, $00, $01, $02, $01, $00, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $04
10837     1B 1F FF D9 
1083b     DE 0A 20 08 
1083f     EC FA 16 11 
10843     F1 E6 FC 11 | 	byte	$1b, $1f, $ff, $d9, $de, $0a, $20, $08, $ec, $fa, $16, $11, $f1, $e6, $fc, $11
10847     0B FC FB 04 
1084b     07 02 FC FD 
1084f     FE FF 01 04 
10853     03 FF FC FF | 	byte	$0b, $fc, $fb, $04, $07, $02, $fc, $fd, $fe, $ff, $01, $04, $03, $ff, $fc, $ff
10857     04 04 FF FC 
1085b     FF 02 01 FF 
1085f     00 02 01 FE 
10863     FD FE 00 02 | 	byte	$04, $04, $ff, $fc, $ff, $02, $01, $ff, $00, $02, $01, $fe, $fd, $fe, $00, $02
10867     02 00 00 02 
1086b     03 FF FA FC 
1086f     04 06 02 FE 
10873     01 02 FF FB | 	byte	$02, $00, $00, $02, $03, $ff, $fa, $fc, $04, $06, $02, $fe, $01, $02, $ff, $fb
10877     FD 01 02 01 
1087b     01 03 01 FD 
1087f     FB FD 04 08 
10883     04 05 FE FC | 	byte	$fd, $01, $02, $01, $01, $03, $01, $fd, $fb, $fd, $04, $08, $04, $05, $fe, $fc
10887     F8 F9 FE 03 
1088b     05 01 FE FA 
1088f     FA FB FC F8 
10893     F7 F5 FA 18 | 	byte	$f8, $f9, $fe, $03, $05, $01, $fe, $fa, $fa, $fb, $fc, $f8, $f7, $f5, $fa, $18
10897     2E 1A DE C2 
1089b     ED 28 25 F1 
1089f     E2 0C 25 05 
108a3     DB E2 0A 17 | 	byte	$2e, $1a, $de, $c2, $ed, $28, $25, $f1, $e2, $0c, $25, $05, $db, $e2, $0a, $17
108a7     04 F6 01 0E 
108ab     09 F9 F3 FA 
108af     01 02 02 04 
108b3     04 FE FB FD | 	byte	$04, $f6, $01, $0e, $09, $f9, $f3, $fa, $01, $02, $02, $04, $04, $fe, $fb, $fd
108b7     02 02 FD FD 
108bb     01 03 01 FF 
108bf     00 00 FF FE 
108c3     FD FE 00 03 | 	byte	$02, $02, $fd, $fd, $01, $03, $01, $ff, $00, $00, $ff, $fe, $fd, $fe, $00, $03
108c7     02 FF FF 03 
108cb     03 FC F8 FE 
108cf     06 05 FF FE 
108d3     02 02 FC FD | 	byte	$02, $ff, $ff, $03, $03, $fc, $f8, $fe, $06, $05, $ff, $fe, $02, $02, $fc, $fd
108d7     03 08 04 FB 
108db     FA FD FF FE 
108df     FF FF FE FB 
108e3     FB FD FE FC | 	byte	$03, $08, $04, $fb, $fa, $fd, $ff, $fe, $ff, $ff, $fe, $fb, $fb, $fd, $fe, $fc
108e7     F8 F5 F0 F5 
108eb     17 35 22 E2 
108ef     BD E5 28 2B 
108f3     F5 DC 07 2E | 	byte	$f8, $f5, $f0, $f5, $17, $35, $22, $e2, $bd, $e5, $28, $2b, $f5, $dc, $07, $2e
108f7     13 DA D2 00 
108fb     22 13 F8 F7 
108ff     0B 10 00 F1 
10903     F2 FE 06 07 | 	byte	$13, $da, $d2, $00, $22, $13, $f8, $f7, $0b, $10, $00, $f1, $f2, $fe, $06, $07
10907     05 02 FE FB 
1090b     FB 00 04 03 
1090f     FF FE 01 02 
10913     00 FF 00 00 | 	byte	$05, $02, $fe, $fb, $fb, $00, $04, $03, $ff, $fe, $01, $02, $00, $ff, $00, $00
10917     FE FC FE 03 
1091b     03 FF FF 02 
1091f     05 01 FA F9 
10923     FF 06 09 08 | 	byte	$fe, $fc, $fe, $03, $03, $ff, $ff, $02, $05, $01, $fa, $f9, $ff, $06, $09, $08
10927     08 06 F8 EE 
1092b     F3 FE 0B 05 
1092f     00 FE FE FC 
10933     F5 F4 F9 FB | 	byte	$08, $06, $f8, $ee, $f3, $fe, $0b, $05, $00, $fe, $fe, $fc, $f5, $f4, $f9, $fb
10937     F9 EF FC 28 
1093b     3E 14 C4 B0 
1093f     F7 41 2E E3 
10943     D5 14 35 04 | 	byte	$f9, $ef, $fc, $28, $3e, $14, $c4, $b0, $f7, $41, $2e, $e3, $d5, $14, $35, $04
10947     C7 D4 15 2E 
1094b     0E EE F7 0F 
1094f     0D F8 EE F7 
10953     06 0A 09 04 | 	byte	$c7, $d4, $15, $2e, $0e, $ee, $f7, $0f, $0d, $f8, $ee, $f7, $06, $0a, $09, $04
10957     FE F8 F6 FE 
1095b     07 07 00 FC 
1095f     00 03 00 FB 
10963     FD 02 03 FE | 	byte	$fe, $f8, $f6, $fe, $07, $07, $00, $fc, $00, $03, $00, $fb, $fd, $02, $03, $fe
10967     FC 00 06 03 
1096b     FB F9 03 0B 
1096f     04 F9 FF 0F 
10973     0C F5 EB F6 | 	byte	$fc, $00, $06, $03, $fb, $f9, $03, $0b, $04, $f9, $ff, $0f, $0c, $f5, $eb, $f6
10977     10 0B FA F1 
1097b     FE 09 FF F7 
1097f     F6 02 00 F2 
10983     E5 EC 22 49 | 	byte	$10, $0b, $fa, $f1, $fe, $09, $ff, $f7, $f6, $02, $00, $f2, $e5, $ec, $22, $49
10987     2F D5 A6 DA 
1098b     36 41 F5 CB 
1098f     FB 39 1E D4 
10993     C2 FB 2E 1B | 	byte	$2f, $d5, $a6, $da, $36, $41, $f5, $cb, $fb, $39, $1e, $d4, $c2, $fb, $2e, $1b
10997     F1 EB 0B 1D 
1099b     08 E9 E3 FB 
1099f     12 15 06 F8 
109a3     F7 FE 02 02 | 	byte	$f1, $eb, $0b, $1d, $08, $e9, $e3, $fb, $12, $15, $06, $f8, $f7, $fe, $02, $02
109a7     FF FF 01 02 
109ab     04 02 FE FC 
109af     FF 03 01 FC 
109b3     FC 02 07 02 | 	byte	$ff, $ff, $01, $02, $04, $02, $fe, $fc, $ff, $03, $01, $fc, $fc, $02, $07, $02
109b7     FC FF 0F 11 
109bb     FB E9 ED 03 
109bf     0E 08 FE FF 
109c3     01 FA F2 F4 | 	byte	$fc, $ff, $0f, $11, $fb, $e9, $ed, $03, $0e, $08, $fe, $ff, $01, $fa, $f2, $f4
109c7     FE 03 02 FB 
109cb     F4 E9 F1 25 
109cf     44 21 C8 A8 
109d3     EB 45 42 EB | 	byte	$fe, $03, $02, $fb, $f4, $e9, $f1, $25, $44, $21, $c8, $a8, $eb, $45, $42, $eb
109d7     C5 FB 38 1C 
109db     D2 C2 FF 33 
109df     20 F0 E3 02 
109e3     16 08 F0 ED | 	byte	$c5, $fb, $38, $1c, $d2, $c2, $ff, $33, $20, $f0, $e3, $02, $16, $08, $f0, $ed
109e7     FE 0B 09 FF 
109eb     FB FD FF 00 
109ef     03 05 02 FB 
109f3     FA 00 06 03 | 	byte	$fe, $0b, $09, $ff, $fb, $fd, $ff, $00, $03, $05, $02, $fb, $fa, $00, $06, $03
109f7     FF 00 05 01 
109fb     F7 F5 02 0D 
109ff     08 FD 08 10 
10a03     09 ED E0 F6 | 	byte	$ff, $00, $05, $01, $f7, $f5, $02, $0d, $08, $fd, $08, $10, $09, $ed, $e0, $f6
10a07     14 18 02 F3 
10a0b     F9 03 FD F1 
10a0f     F3 01 0B 00 
10a13     EB E1 F4 32 | 	byte	$14, $18, $02, $f3, $f9, $03, $fd, $f1, $f3, $01, $0b, $00, $eb, $e1, $f4, $32
10a17     4A 1C BF A7 
10a1b     F1 4D 44 E8 
10a1f     C3 FD 3D 1D 
10a23     CE BD FF 39 | 	byte	$4a, $1c, $bf, $a7, $f1, $4d, $44, $e8, $c3, $fd, $3d, $1d, $ce, $bd, $ff, $39
10a27     26 F0 DE 01 
10a2b     1B 0C EC E8 
10a2f     04 17 0E F8 
10a33     F2 FF 08 03 | 	byte	$26, $f0, $de, $01, $1b, $0c, $ec, $e8, $04, $17, $0e, $f8, $f2, $ff, $08, $03
10a37     FC 00 06 05 
10a3b     FD FA FE 03 
10a3f     03 02 01 FE 
10a43     FC FE 06 08 | 	byte	$fc, $00, $06, $05, $fd, $fa, $fe, $03, $03, $02, $01, $fe, $fc, $fe, $06, $08
10a47     01 FC 05 0E 
10a4b     05 F2 EC FD 
10a4f     12 0C FB F2 
10a53     FC 05 FE F5 | 	byte	$01, $fc, $05, $0e, $05, $f2, $ec, $fd, $12, $0c, $fb, $f2, $fc, $05, $fe, $f5
10a57     F7 02 02 F9 
10a5b     EB E3 F5 2F 
10a5f     49 1C BE A4 
10a63     ED 4E 47 E9 | 	byte	$f7, $02, $02, $f9, $eb, $e3, $f5, $2f, $49, $1c, $be, $a4, $ed, $4e, $47, $e9
10a67     BE F7 3A 1F 
10a6b     D2 BE FC 34 
10a6f     24 F0 DE FE 
10a73     17 0C F0 EB | 	byte	$be, $f7, $3a, $1f, $d2, $be, $fc, $34, $24, $f0, $de, $fe, $17, $0c, $f0, $eb
10a77     00 10 0A FA 
10a7b     F4 FC 04 05 
10a7f     02 03 01 FC 
10a83     F9 FE 04 04 | 	byte	$00, $10, $0a, $fa, $f4, $fc, $04, $05, $02, $03, $01, $fc, $f9, $fe, $04, $04
10a87     00 FF 03 00 
10a8b     F9 F7 03 0D 
10a8f     09 FB FC 09 
10a93     09 F8 EA F6 | 	byte	$00, $ff, $03, $00, $f9, $f7, $03, $0d, $09, $fb, $fc, $09, $09, $f8, $ea, $f6
10a97     0F 13 02 F1 
10a9b     F6 02 02 FB 
10a9f     F7 FE 01 FE 
10aa3     F0 E3 E9 22 | 	byte	$0f, $13, $02, $f1, $f6, $02, $02, $fb, $f7, $fe, $01, $fe, $f0, $e3, $e9, $22
10aa7     50 33 D1 A2 
10aab     D4 41 59 FF 
10aaf     BA E2 35 33 
10ab3     E1 B5 E6 31 | 	byte	$50, $33, $d1, $a2, $d4, $41, $59, $ff, $ba, $e2, $35, $33, $e1, $b5, $e6, $31
10ab7     33 FB D8 F2 
10abb     18 15 F4 E5 
10abf     F9 11 0F FC 
10ac3     F2 FA 04 06 | 	byte	$33, $fb, $d8, $f2, $18, $15, $f4, $e5, $f9, $11, $0f, $fc, $f2, $fa, $04, $06
10ac7     02 03 03 FF 
10acb     FA FD 03 03 
10acf     01 02 06 01 
10ad3     F7 F7 04 0D | 	byte	$02, $03, $03, $ff, $fa, $fd, $03, $03, $01, $02, $06, $01, $f7, $f7, $04, $0d
10ad7     05 F9 06 14 
10adb     0A F0 DE F6 
10adf     16 19 04 F0 
10ae3     F7 01 01 F8 | 	byte	$05, $f9, $06, $14, $0a, $f0, $de, $f6, $16, $19, $04, $f0, $f7, $01, $01, $f8
10ae7     F9 03 07 FF 
10aeb     F5 EE ED F1 
10aef     1E 44 32 DB 
10af3     A5 CF 38 5A | 	byte	$f9, $03, $07, $ff, $f5, $ee, $ed, $f1, $1e, $44, $32, $db, $a5, $cf, $38, $5a
10af7     08 BD DA 32 
10afb     3B EA B4 DE 
10aff     30 3A 02 D7 
10b03     ED 18 1A FB | 	byte	$08, $bd, $da, $32, $3b, $ea, $b4, $de, $30, $3a, $02, $d7, $ed, $18, $1a, $fb
10b07     E7 F5 0C 10 
10b0b     05 FB F9 FD 
10b0f     02 09 0A 04 
10b13     FA F8 00 06 | 	byte	$e7, $f5, $0c, $10, $05, $fb, $f9, $fd, $02, $09, $0a, $04, $fa, $f8, $00, $06
10b17     04 01 02 04 
10b1b     FF F8 FB 07 
10b1f     0B 03 FA 00 
10b23     11 0F F6 E5 | 	byte	$04, $01, $02, $04, $ff, $f8, $fb, $07, $0b, $03, $fa, $00, $11, $0f, $f6, $e5
10b27     F2 10 19 01 
10b2b     EF F5 09 08 
10b2f     F9 F3 FE 09 
10b33     02 F7 F5 F8 | 	byte	$f2, $10, $19, $01, $ef, $f5, $09, $08, $f9, $f3, $fe, $09, $02, $f7, $f5, $f8
10b37     EF E7 0E 44 
10b3b     40 EA A5 C1 
10b3f     2D 5C 11 BF 
10b43     D5 2D 3B EC | 	byte	$ef, $e7, $0e, $44, $40, $ea, $a5, $c1, $2d, $5c, $11, $bf, $d5, $2d, $3b, $ec
10b47     B3 DA 2D 3A 
10b4b     02 D5 EA 17 
10b4f     1D FC E1 EB 
10b53     08 15 0B FA | 	byte	$b3, $da, $2d, $3a, $02, $d5, $ea, $17, $1d, $fc, $e1, $eb, $08, $15, $0b, $fa
10b57     F4 F8 00 07 
10b5b     07 01 F7 F5 
10b5f     FE 09 09 FF 
10b63     F8 FC 02 01 | 	byte	$f4, $f8, $00, $07, $07, $01, $f7, $f5, $fe, $09, $09, $ff, $f8, $fc, $02, $01
10b67     FB FA FF 03 
10b6b     05 09 09 03 
10b6f     F6 EB FA 07 
10b73     0D 02 FA 00 | 	byte	$fb, $fa, $ff, $03, $05, $09, $09, $03, $f6, $eb, $fa, $07, $0d, $02, $fa, $00
10b77     03 FF F2 F4 
10b7b     01 09 05 FC 
10b7f     F9 FC F7 EA 
10b83     DF FA 3B 51 | 	byte	$03, $ff, $f2, $f4, $01, $09, $05, $fc, $f9, $fc, $f7, $ea, $df, $fa, $3b, $51
10b87     14 B5 A6 FB 
10b8b     57 3E DC BF 
10b8f     03 3E 13 C7 
10b93     C1 0A 3C 1F | 	byte	$14, $b5, $a6, $fb, $57, $3e, $dc, $bf, $03, $3e, $13, $c7, $c1, $0a, $3c, $1f
10b97     E5 D9 03 22 
10b9b     10 EA E0 FD 
10b9f     1B 18 FA E6 
10ba3     F2 0B 14 08 | 	byte	$e5, $d9, $03, $22, $10, $ea, $e0, $fd, $1b, $18, $fa, $e6, $f2, $0b, $14, $08
10ba7     F8 F4 FD 03 
10bab     03 01 01 06 
10baf     07 02 F5 F0 
10bb3     FB 0C 0F 03 | 	byte	$f8, $f4, $fd, $03, $03, $01, $01, $06, $07, $02, $f5, $f0, $fb, $0c, $0f, $03
10bb7     F9 05 0F 04 
10bbb     ED EF 03 15 
10bbf     0D F9 F8 FC 
10bc3     03 FC FC 01 | 	byte	$f9, $05, $0f, $04, $ed, $ef, $03, $15, $0d, $f9, $f8, $fc, $03, $fc, $fc, $01
10bc7     04 03 FF FF 
10bcb     FD F9 F7 FA 
10bcf     F9 EF EB 1C 
10bd3     48 32 D7 A4 | 	byte	$04, $03, $ff, $ff, $fd, $f9, $f7, $fa, $f9, $ef, $eb, $1c, $48, $32, $d7, $a4
10bd7     D3 3E 5A 05 
10bdb     BC D9 2C 34 
10bdf     ED BF E7 2C 
10be3     30 FD DB F2 | 	byte	$d3, $3e, $5a, $05, $bc, $d9, $2c, $34, $ed, $bf, $e7, $2c, $30, $fd, $db, $f2
10be7     18 18 FB E9 
10beb     F8 0E 0E FD 
10bef     F4 FC 08 08 
10bf3     01 FD FE FE | 	byte	$18, $18, $fb, $e9, $f8, $0e, $0e, $fd, $f4, $fc, $08, $08, $01, $fd, $fe, $fe
10bf7     FD 02 09 07 
10bfb     FE F8 FF 05 
10bff     01 F9 FD 0A 
10c03     0E 02 F6 F9 | 	byte	$fd, $02, $09, $07, $fe, $f8, $ff, $05, $01, $f9, $fd, $0a, $0e, $02, $f6, $f9
10c07     04 07 0A 07 
10c0b     00 FD F0 F9 
10c0f     06 0E 06 F8 
10c13     F5 FA 02 03 | 	byte	$04, $07, $0a, $07, $00, $fd, $f0, $f9, $06, $0e, $06, $f8, $f5, $fa, $02, $03
10c17     00 FF 00 FF 
10c1b     FB F5 F4 F7 
10c1f     F6 F3 0E 39 
10c23     35 EF A9 BF | 	byte	$00, $ff, $00, $ff, $fb, $f5, $f4, $f7, $f6, $f3, $0e, $39, $35, $ef, $a9, $bf
10c27     21 59 1E CC 
10c2b     D2 1A 32 F4 
10c2f     C2 DE 25 38 
10c33     0B DD E1 05 | 	byte	$21, $59, $1e, $cc, $d2, $1a, $32, $f4, $c2, $de, $25, $38, $0b, $dd, $e1, $05
10c37     17 0C F7 F2 
10c3b     FD 07 05 FC 
10c3f     F8 FC 05 09 
10c43     07 FF F5 F2 | 	byte	$17, $0c, $f7, $f2, $fd, $07, $05, $fc, $f8, $fc, $05, $09, $07, $ff, $f5, $f2
10c47     F9 07 0E 0A 
10c4b     FF F8 F8 FC 
10c4f     FF 04 06 03 
10c53     FD FB 03 04 | 	byte	$f9, $07, $0e, $0a, $ff, $f8, $f8, $fc, $ff, $04, $06, $03, $fd, $fb, $03, $04
10c57     FF FA 00 0B 
10c5b     0C FF F2 F7 
10c5f     FC 04 02 00 
10c63     01 FE FE FB | 	byte	$ff, $fa, $00, $0b, $0c, $ff, $f2, $f7, $fc, $04, $02, $00, $01, $fe, $fe, $fb
10c67     FD FF FF FF 
10c6b     FD FB FA FB 
10c6f     FA F5 EA F2 
10c73     26 3F 1C C5 | 	byte	$fd, $ff, $ff, $ff, $fd, $fb, $fa, $fb, $fa, $f5, $ea, $f2, $26, $3f, $1c, $c5
10c77     AA ED 48 47 
10c7b     F0 C2 EF 31 
10c7f     21 DE CA FF 
10c83     32 1E EA D9 | 	byte	$aa, $ed, $48, $47, $f0, $c2, $ef, $31, $21, $de, $ca, $ff, $32, $1e, $ea, $d9
10c87     01 23 19 F3 
10c8b     E3 F8 10 0F 
10c8f     FB F0 FB 0D 
10c93     0F 02 F5 F6 | 	byte	$01, $23, $19, $f3, $e3, $f8, $10, $0f, $fb, $f0, $fb, $0d, $0f, $02, $f5, $f6
10c97     FF 06 06 03 
10c9b     03 04 03 FE 
10c9f     F8 F8 FF 09 
10ca3     0A 03 FB FD | 	byte	$ff, $06, $06, $03, $03, $04, $03, $fe, $f8, $f8, $ff, $09, $0a, $03, $fb, $fd
10ca7     04 03 FA F6 
10cab     02 0F 17 04 
10caf     EC EF F7 0D 
10cb3     09 FF FB FE | 	byte	$04, $03, $fa, $f6, $02, $0f, $17, $04, $ec, $ef, $f7, $0d, $09, $ff, $fb, $fe
10cb7     07 00 FA F7 
10cbb     FE 05 04 FC 
10cbf     FB FC 01 FF 
10cc3     F7 EF E8 01 | 	byte	$07, $00, $fa, $f7, $fe, $05, $04, $fc, $fb, $fc, $01, $ff, $f7, $ef, $e8, $01
10cc7     36 3F 07 B7 
10ccb     B8 0D 53 30 
10ccf     D8 C5 05 38 
10cd3     17 D8 D1 08 | 	byte	$36, $3f, $07, $b7, $b8, $0d, $53, $30, $d8, $c5, $05, $38, $17, $d8, $d1, $08
10cd7     2B 16 ED E5 
10cdb     05 1A 11 F6 
10cdf     EC FB 0D 0A 
10ce3     FA F1 FD 0F | 	byte	$2b, $16, $ed, $e5, $05, $1a, $11, $f6, $ec, $fb, $0d, $0a, $fa, $f1, $fd, $0f
10ce7     11 03 F5 F4 
10ceb     FC 05 07 03 
10cef     01 02 05 02 
10cf3     F9 F5 FC 08 | 	byte	$11, $03, $f5, $f4, $fc, $05, $07, $03, $01, $02, $05, $02, $f9, $f5, $fc, $08
10cf7     09 01 FE 03 
10cfb     07 FF F5 F9 
10cff     07 0F 05 F9 
10d03     FA 04 05 FA | 	byte	$09, $01, $fe, $03, $07, $ff, $f5, $f9, $07, $0f, $05, $f9, $fa, $04, $05, $fa
10d07     F8 FD 0A 05 
10d0b     FB F8 01 08 
10d0f     02 F9 F5 FF 
10d13     06 04 FB F7 | 	byte	$f8, $fd, $0a, $05, $fb, $f8, $01, $08, $02, $f9, $f5, $ff, $06, $04, $fb, $f7
10d17     FF 00 FB EF 
10d1b     EF F6 1D 34 
10d1f     1F DD B7 E1 
10d23     30 44 02 CD | 	byte	$ff, $00, $fb, $ef, $ef, $f6, $1d, $34, $1f, $dd, $b7, $e1, $30, $44, $02, $cd
10d27     E7 25 27 EA 
10d2b     CA EF 29 29 
10d2f     FB DD F1 16 
10d33     1A FF E6 EE | 	byte	$e7, $25, $27, $ea, $ca, $ef, $29, $29, $fb, $dd, $f1, $16, $1a, $ff, $e6, $ee
10d37     08 14 06 F2 
10d3b     F1 00 0D 09 
10d3f     FE F5 F6 FC 
10d43     04 08 06 FE | 	byte	$08, $14, $06, $f2, $f1, $00, $0d, $09, $fe, $f5, $f6, $fc, $04, $08, $06, $fe
10d47     F8 FA 00 00 
10d4b     FB FC 04 09 
10d4f     03 FB FA 00 
10d53     00 FB FB 03 | 	byte	$f8, $fa, $00, $00, $fb, $fc, $04, $09, $03, $fb, $fa, $00, $00, $fb, $fb, $03
10d57     0A 06 FE 01 
10d5b     0A FC F5 EC 
10d5f     FD 0E 0C 05 
10d63     F9 FC F9 F8 | 	byte	$0a, $06, $fe, $01, $0a, $fc, $f5, $ec, $fd, $0e, $0c, $05, $f9, $fc, $f9, $f8
10d67     FB FF 06 03 
10d6b     00 FE 00 FC 
10d6f     FA F7 FB FE 
10d73     F8 F0 EF 1C | 	byte	$fb, $ff, $06, $03, $00, $fe, $00, $fc, $fa, $f7, $fb, $fe, $f8, $f0, $ef, $1c
10d77     39 23 D9 B4 
10d7b     E6 37 43 FB 
10d7f     C8 E7 2A 29 
10d83     F0 CF F1 25 | 	byte	$39, $23, $d9, $b4, $e6, $37, $43, $fb, $c8, $e7, $2a, $29, $f0, $cf, $f1, $25
10d87     22 F8 DF F8 
10d8b     1A 1A FC E6 
10d8f     F3 0C 11 FF 
10d93     F1 F6 09 0E | 	byte	$22, $f8, $df, $f8, $1a, $1a, $fc, $e6, $f3, $0c, $11, $ff, $f1, $f6, $09, $0e
10d97     04 F9 F8 FF 
10d9b     03 02 01 02 
10d9f     05 03 FF FA 
10da3     FA FF 05 07 | 	byte	$04, $f9, $f8, $ff, $03, $02, $01, $02, $05, $03, $ff, $fa, $fa, $ff, $05, $07
10da7     03 FE FF 02 
10dab     FF FA FB 05 
10daf     0A 03 F8 FB 
10db3     09 16 03 F0 | 	byte	$03, $fe, $ff, $02, $ff, $fa, $fb, $05, $0a, $03, $f8, $fb, $09, $16, $03, $f0
10db7     EB FA 0F 0A 
10dbb     01 F9 FF 02 
10dbf     F9 F8 FC 07 
10dc3     07 FE F6 FA | 	byte	$eb, $fa, $0f, $0a, $01, $f9, $ff, $02, $f9, $f8, $fc, $07, $07, $fe, $f6, $fa
10dc7     02 02 FF F9 
10dcb     FC FE FA F3 
10dcf     F0 F9 1A 31 
10dd3     1D E2 C1 E5 | 	byte	$02, $02, $ff, $f9, $fc, $fe, $fa, $f3, $f0, $f9, $1a, $31, $1d, $e2, $c1, $e5
10dd7     28 35 FD D3 
10ddb     EE 26 27 EE 
10ddf     CB EA 21 28 
10de3     01 E1 F1 12 | 	byte	$28, $35, $fd, $d3, $ee, $26, $27, $ee, $cb, $ea, $21, $28, $01, $e1, $f1, $12
10de7     18 00 EA F0 
10deb     04 0D 03 F8 
10def     F9 01 05 04 
10df3     01 00 FB F8 | 	byte	$18, $00, $ea, $f0, $04, $0d, $03, $f8, $f9, $01, $05, $04, $01, $00, $fb, $f8
10df7     FA 04 0A 06 
10dfb     FC F9 FE 00 
10dff     FD FC 01 08 
10e03     06 FF FB FC | 	byte	$fa, $04, $0a, $06, $fc, $f9, $fe, $00, $fd, $fc, $01, $08, $06, $ff, $fb, $fc
10e07     FF FE 00 03 
10e0b     05 02 FF FF 
10e0f     FF 06 01 FF 
10e13     FD F9 00 02 | 	byte	$ff, $fe, $00, $03, $05, $02, $ff, $ff, $ff, $06, $01, $ff, $fd, $f9, $00, $02
10e17     05 01 FC FB 
10e1b     FD 00 01 FF 
10e1f     01 FF 02 FF 
10e23     FC FE 00 04 | 	byte	$05, $01, $fc, $fb, $fd, $00, $01, $ff, $01, $ff, $02, $ff, $fc, $fe, $00, $04
10e27     00 FB F9 FF 
10e2b     01 FE F7 F2 
10e2f     FB 15 2C 1B 
10e33     E9 C8 E5 21 | 	byte	$00, $fb, $f9, $ff, $01, $fe, $f7, $f2, $fb, $15, $2c, $1b, $e9, $c8, $e5, $21
10e37     31 02 D9 EC 
10e3b     1E 25 F8 D7 
10e3f     EC 18 1E FE 
10e43     E8 F9 15 17 | 	byte	$31, $02, $d9, $ec, $1e, $25, $f8, $d7, $ec, $18, $1e, $fe, $e8, $f9, $15, $17
10e47     FD EC F5 07 
10e4b     09 FE F9 02 
10e4f     0B 07 FE F9 
10e53     FE 02 01 FE | 	byte	$fd, $ec, $f5, $07, $09, $fe, $f9, $02, $0b, $07, $fe, $f9, $fe, $02, $01, $fe
10e57     01 06 07 01 
10e5b     FB FC 01 02 
10e5f     00 FE 01 04 
10e63     06 02 FE FC | 	byte	$01, $06, $07, $01, $fb, $fc, $01, $02, $00, $fe, $01, $04, $06, $02, $fe, $fc
10e67     FD 01 04 02 
10e6b     FE FF 03 04 
10e6f     04 08 00 FB 
10e73     F4 F7 03 09 | 	byte	$fd, $01, $04, $02, $fe, $ff, $03, $04, $04, $08, $00, $fb, $f4, $f7, $03, $09
10e77     07 00 FB FC 
10e7b     FE FF FE FF 
10e7f     03 04 02 FA 
10e83     FA 01 06 03 | 	byte	$07, $00, $fb, $fc, $fe, $ff, $fe, $ff, $03, $04, $02, $fa, $fa, $01, $06, $03
10e87     F9 F9 FE 05 
10e8b     00 FC FA FE 
10e8f     00 FD F9 F7 
10e93     FC 0C 1D 17 | 	byte	$f9, $f9, $fe, $05, $00, $fc, $fa, $fe, $00, $fd, $f9, $f7, $fc, $0c, $1d, $17
10e97     F8 DC E9 0E 
10e9b     1F 07 EB F1 
10e9f     0F 16 FF EA 
10ea3     F3 0B 12 09 | 	byte	$f8, $dc, $e9, $0e, $1f, $07, $eb, $f1, $0f, $16, $ff, $ea, $f3, $0b, $12, $09
10ea7     F7 F5 FD 08 
10eab     09 00 F9 FA 
10eaf     00 01 FD FC 
10eb3     02 05 03 00 | 	byte	$f7, $f5, $fd, $08, $09, $00, $f9, $fa, $00, $01, $fd, $fc, $02, $05, $03, $00
10eb7     FF FD FB FB 
10ebb     01 06 03 FB 
10ebf     F7 FC 03 02 
10ec3     FC FB 00 05 | 	byte	$ff, $fd, $fb, $fb, $01, $06, $03, $fb, $f7, $fc, $03, $02, $fc, $fb, $00, $05
10ec7     02 FB F7 FC 
10ecb     03 05 02 FC 
10ecf     FB FE 00 FF 
10ed3     FD FD 01 06 | 	byte	$02, $fb, $f7, $fc, $03, $05, $02, $fc, $fb, $fe, $00, $ff, $fd, $fd, $01, $06
10ed7     03 00 FB FC 
10edb     FD FF 01 00 
10edf     00 FC FE FF 
10ee3     00 01 FF 00 | 	byte	$03, $00, $fb, $fc, $fd, $ff, $01, $00, $00, $fc, $fe, $ff, $00, $01, $ff, $00
10ee7     FD FE FC FF 
10eeb     01 00 00 FF 
10eef     00 FE FC FD 
10ef3     00 04 02 00 | 	byte	$fd, $fe, $fc, $ff, $01, $00, $00, $ff, $00, $fe, $fc, $fd, $00, $04, $02, $00
10ef7     FA FB FF 04 
10efb     02 FE FB FF 
10eff     03 02 FC FB 
10f03     FE 03 01 01 | 	byte	$fa, $fb, $ff, $04, $02, $fe, $fb, $ff, $03, $02, $fc, $fb, $fe, $03, $01, $01
10f07     01 02 01 FD 
10f0b     FF 02 05 01 
10f0f     FE FD 02 07 
10f13     04 FF FC 01 | 	byte	$01, $02, $01, $fd, $ff, $02, $05, $01, $fe, $fd, $02, $07, $04, $ff, $fc, $01
10f17     04 03 FE FD 
10f1b     02 07 04 FD 
10f1f     FC 01 04 01 
10f23     FB FD 03 04 | 	byte	$04, $03, $fe, $fd, $02, $07, $04, $fd, $fc, $01, $04, $01, $fb, $fd, $03, $04
10f27     00 FD FF 05 
10f2b     04 FC FB FD 
10f2f     07 04 FE FB 
10f33     00 05 02 FF | 	byte	$00, $fd, $ff, $05, $04, $fc, $fb, $fd, $07, $04, $fe, $fb, $00, $05, $02, $ff
10f37     FB 00 04 05 
10f3b     FF FE FD 03 
10f3f     01 01 00 02 
10f43     02 01 FD FC | 	byte	$fb, $00, $04, $05, $ff, $fe, $fd, $03, $01, $01, $00, $02, $02, $01, $fd, $fc
10f47     00 05 06 00 
10f4b     FC FB FF 02 
10f4f     02 02 02 00 
10f53     FF FD FE 00 | 	byte	$00, $05, $06, $00, $fc, $fb, $ff, $02, $02, $02, $02, $00, $ff, $fd, $fe, $00
10f57     00 02 FF 01 
10f5b     FF FF 00 01 
10f5f     01 00 FE 00 
10f63     01 02 01 00 | 	byte	$00, $02, $ff, $01, $ff, $ff, $00, $01, $01, $00, $fe, $00, $01, $02, $01, $00
10f67     FE FF FF 00 
10f6b     02 00 01 FD 
10f6f     FF FF 03 00 
10f73     FF FE 00 00 | 	byte	$fe, $ff, $ff, $00, $02, $00, $01, $fd, $ff, $ff, $03, $00, $ff, $fe, $00, $00
10f77     00 FD 00 01 
10f7b     01 FF FC FC 
10f7f     FE 02 02 FF 
10f83     FB F9 FA FA | 	byte	$00, $fd, $00, $01, $01, $ff, $fc, $fc, $fe, $02, $02, $ff, $fb, $f9, $fa, $fa
10f87     FA FA FB FB 
10f8b     FB FB FC FC 
10f8f     FC FC FD FD 
10f93     FD FD FD FD | 	byte	$fa, $fa, $fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fd
10f97     FD FE FE FE 
10f9b     FE FE FE FE 
10f9f     FE FF FF FF 
10fa3     FF FF FF FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff
10fa7     FF FF FF FF 
10fab     00 00 00 00 
10faf     00 00 00 00 
10fb3     00 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10fb7     00 01 00 00 
10fbb     01 01 01 01 
10fbf     01 01 01 01 
10fc3     01 01 01 01 | 	byte	$00, $01, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
10fc7     01 01 01 01 
10fcb     01 01 01 01 
10fcf     01 01 01 01 
10fd3     01 01 01 01 
10fd7     01 01 01 01 
10fdb     01 01 01 01 
10fdf     01 01       | 	byte	$01[26]
10fe1     02 01 01 01 
10fe5     01 01 01 01 
10fe9     01 01 01 01 
10fed     02 01 01 01 | 	byte	$02, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $01, $01, $01
10ff1     01 01 01 01 
      ...             
11021     01 01 01 01 
11025     01 01 01    | 	byte	$01[55]
11028     00 00 00 00 
1102c     00 00 00 00 | 	byte	$00[8]
11030     05 05 00 FF 
11034     00 00 00 00 
11038     00 00 00 00 
1103c     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11040     00 00 00 00 
      ...             
11064     00 00 00 00 
11068     00 00       | 	byte	$00[42]
1106a     FD FD FD FE 
1106e     FD FD FD FC 
11072     FC FD FD FF 
11076     FE FD FD FE | 	byte	$fd, $fd, $fd, $fe, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $ff, $fe, $fd, $fd, $fe
1107a     FD FE FE FE 
1107e     FE FE FE FD 
11082     FD FD FE FC 
11086     FE FD FC FC | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fc, $fe, $fd, $fc, $fc
1108a     FC FE FD FE 
1108e     FD FD FD FE 
11092     FE FE FD FD 
11096     00 FC 00 FF | 	byte	$fc, $fe, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fd, $00, $fc, $00, $ff
1109a     00 FE 00 00 
1109e     FE FF 00 00 
110a2     00 00 03 06 
110a6     0B 06 FD F6 | 	byte	$00, $fe, $00, $00, $fe, $ff, $00, $00, $00, $00, $03, $06, $0b, $06, $fd, $f6
110aa     EF F0 EF F2 
110ae     FB 09 1D 2C 
110b2     32 22 0D F4 
110b6     DF D1 D3 DD | 	byte	$ef, $f0, $ef, $f2, $fb, $09, $1d, $2c, $32, $22, $0d, $f4, $df, $d1, $d3, $dd
110ba     F1 08 18 22 
110be     22 1B 0E FF 
110c2     F5 F0 F0 F3 
110c6     FA FF 05 09 | 	byte	$f1, $08, $18, $22, $22, $1b, $0e, $ff, $f5, $f0, $f0, $f3, $fa, $ff, $05, $09
110ca     08 04 FC FB 
110ce     F9 02 09 15 
110d2     1F 1A 10 04 
110d6     EB DE D0 CF | 	byte	$08, $04, $fc, $fb, $f9, $02, $09, $15, $1f, $1a, $10, $04, $eb, $de, $d0, $cf
110da     DA EE 05 14 
110de     25 28 21 1A 
110e2     0A F8 F0 E1 
110e6     E9 F8 0E 21 | 	byte	$da, $ee, $05, $14, $25, $28, $21, $1a, $0a, $f8, $f0, $e1, $e9, $f8, $0e, $21
110ea     28 25 16 08 
110ee     F8 EE E8 E1 
110f2     E8 F4 02 0E 
110f6     11 0E 04 FD | 	byte	$28, $25, $16, $08, $f8, $ee, $e8, $e1, $e8, $f4, $02, $0e, $11, $0e, $04, $fd
110fa     F3 F1 F0 F5 
110fe     FB 02 08 0A 
11102     09 03 FD F7 
11106     F6 F5 FE 05 | 	byte	$f3, $f1, $f0, $f5, $fb, $02, $08, $0a, $09, $03, $fd, $f7, $f6, $f5, $fe, $05
1110a     0C 0A 08 01 
1110e     FA F4 EF F1 
11112     F9 FF 09 0C 
11116     0D 0B 02 FE | 	byte	$0c, $0a, $08, $01, $fa, $f4, $ef, $f1, $f9, $ff, $09, $0c, $0d, $0b, $02, $fe
1111a     FC FA FA F7 
1111e     FE 01 06 01 
11122     F7 F5 F4 05 
11126     18 2A 2D 25 | 	byte	$fc, $fa, $fa, $f7, $fe, $01, $06, $01, $f7, $f5, $f4, $05, $18, $2a, $2d, $25
1112a     08 ED D5 CF 
1112e     D3 E6 F8 06 
11132     10 12 15 14 
11136     12 09 FF F4 | 	byte	$08, $ed, $d5, $cf, $d3, $e6, $f8, $06, $10, $12, $15, $14, $12, $09, $ff, $f4
1113a     F1 F5 FA 02 
1113e     02 FE FC FB 
11142     FD 0C 0E 11 
11146     10 0C 11 0A | 	byte	$f1, $f5, $fa, $02, $02, $fe, $fc, $fb, $fd, $0c, $0e, $11, $10, $0c, $11, $0a
1114a     04 F2 E3 D6 
1114e     D1 D9 E7 F9 
11152     14 20 30 2D 
11156     26 1A 08 EE | 	byte	$04, $f2, $e3, $d6, $d1, $d9, $e7, $f9, $14, $20, $30, $2d, $26, $1a, $08, $ee
1115a     D9 C1 D4 F0 
1115e     1E 48 58 4E 
11162     2A 06 E1 D0 
11166     CA C4 D5 E7 | 	byte	$d9, $c1, $d4, $f0, $1e, $48, $58, $4e, $2a, $06, $e1, $d0, $ca, $c4, $d5, $e7
1116a     FC 1C 2E 22 
1116e     19 FE ED EB 
11172     EE F5 FB 03 
11176     05 0C 0E F9 | 	byte	$fc, $1c, $2e, $22, $19, $fe, $ed, $eb, $ee, $f5, $fb, $03, $05, $0c, $0e, $f9
1117a     F6 EE F2 03 
1117e     00 04 02 F8 
11182     EB E9 EA F0 
11186     02 14 1E 28 | 	byte	$f6, $ee, $f2, $03, $00, $04, $02, $f8, $eb, $e9, $ea, $f0, $02, $14, $1e, $28
1118a     1E 18 0F FE 
1118e     EF E4 E2 E5 
11192     F0 FD 0A 1D 
11196     25 2F 26 10 | 	byte	$1e, $18, $0f, $fe, $ef, $e4, $e2, $e5, $f0, $fd, $0a, $1d, $25, $2f, $26, $10
1119a     F6 E2 D5 D6 
1119e     DE EC FC 08 
111a2     09 0E 0E 0D 
111a6     07 00 FC FD | 	byte	$f6, $e2, $d5, $d6, $de, $ec, $fc, $08, $09, $0e, $0e, $0d, $07, $00, $fc, $fd
111aa     01 05 0C 1D 
111ae     16 0E F7 E6 
111b2     D9 D5 D6 E2 
111b6     FC 14 26 30 | 	byte	$01, $05, $0c, $1d, $16, $0e, $f7, $e6, $d9, $d5, $d6, $e2, $fc, $14, $26, $30
111ba     26 16 06 ED 
111be     E1 DA DC E7 
111c2     FC 16 31 4F 
111c6     56 4D 2E FE | 	byte	$26, $16, $06, $ed, $e1, $da, $dc, $e7, $fc, $16, $31, $4f, $56, $4d, $2e, $fe
111ca     CD AD A4 BA 
111ce     DE 04 1C 27 
111d2     29 20 1B 0E 
111d6     00 EE E3 E3 | 	byte	$cd, $ad, $a4, $ba, $de, $04, $1c, $27, $29, $20, $1b, $0e, $00, $ee, $e3, $e3
111da     EF 03 09 0D 
111de     0A FF F5 EB 
111e2     E3 E3 E6 EB 
111e6     F6 06 14 1D | 	byte	$ef, $03, $09, $0d, $0a, $ff, $f5, $eb, $e3, $e3, $e6, $eb, $f6, $06, $14, $1d
111ea     24 18 08 F0 
111ee     E0 E4 F3 15 
111f2     39 48 44 2E 
111f6     0A E9 D0 C3 | 	byte	$24, $18, $08, $f0, $e0, $e4, $f3, $15, $39, $48, $44, $2e, $0a, $e9, $d0, $c3
111fa     C6 D8 EA 06 
111fe     1F 2A 2C 20 
11202     08 F3 E8 E9 
11206     F9 00 02 FA | 	byte	$c6, $d8, $ea, $06, $1f, $2a, $2c, $20, $08, $f3, $e8, $e9, $f9, $00, $02, $fa
1120a     F1 E5 DA D2 
1120e     DB EF 11 35 
11212     4E 51 38 1E 
11216     FA D8 BA A7 | 	byte	$f1, $e5, $da, $d2, $db, $ef, $11, $35, $4e, $51, $38, $1e, $fa, $d8, $ba, $a7
1121a     AF CE FF 31 
1121e     51 5B 4C 2A 
11222     05 DE C1 B6 
11226     C4 DC FE 16 | 	byte	$af, $ce, $ff, $31, $51, $5b, $4c, $2a, $05, $de, $c1, $b6, $c4, $dc, $fe, $16
1122a     22 21 12 FA 
1122e     F1 EE F8 10 
11232     36 46 47 21 
11236     EB BD 97 85 | 	byte	$22, $21, $12, $fa, $f1, $ee, $f8, $10, $36, $46, $47, $21, $eb, $bd, $97, $85
1123a     98 C2 F8 30 
1123e     5B 5F 54 3E 
11242     25 22 19 11 
11246     FE E1 C3 B4 | 	byte	$98, $c2, $f8, $30, $5b, $5f, $54, $3e, $25, $22, $19, $11, $fe, $e1, $c3, $b4
1124a     B7 CD EE 0A 
1124e     1D 2E 34 35 
11252     38 30 1B 02 
11256     E7 D0 C7 C9 | 	byte	$b7, $cd, $ee, $0a, $1d, $2e, $34, $35, $38, $30, $1b, $02, $e7, $d0, $c7, $c9
1125a     D7 E6 F0 F8 
1125e     FB FD F9 FC 
11262     09 18 26 2A 
11266     24 0E E1 C3 | 	byte	$d7, $e6, $f0, $f8, $fb, $fd, $f9, $fc, $09, $18, $26, $2a, $24, $0e, $e1, $c3
1126a     C8 F0 20 4C 
1126e     52 3A 0E EB 
11272     D8 D8 E0 E3 
11276     F0 FC 04 16 | 	byte	$c8, $f0, $20, $4c, $52, $3a, $0e, $eb, $d8, $d8, $e0, $e3, $f0, $fc, $04, $16
1127a     24 1E 12 FC 
1127e     EB E4 F5 FC 
11282     FE FC F2 EA 
11286     E5 E1 E4 EE | 	byte	$24, $1e, $12, $fc, $eb, $e4, $f5, $fc, $fe, $fc, $f2, $ea, $e5, $e1, $e4, $ee
1128a     03 1C 2F 3C 
1128e     32 20 F8 D9 
11292     C3 CA E5 0D 
11296     2B 37 2A 12 | 	byte	$03, $1c, $2f, $3c, $32, $20, $f8, $d9, $c3, $ca, $e5, $0d, $2b, $37, $2a, $12
1129a     F4 DB D1 DA 
1129e     EB 01 14 1E 
112a2     20 19 09 F3 
112a6     E3 DA E1 F4 | 	byte	$f4, $db, $d1, $da, $eb, $01, $14, $1e, $20, $19, $09, $f3, $e3, $da, $e1, $f4
112aa     14 37 44 35 
112ae     0E ED C8 AB 
112b2     A4 B3 D0 F8 
112b6     20 36 34 28 | 	byte	$14, $37, $44, $35, $0e, $ed, $c8, $ab, $a4, $b3, $d0, $f8, $20, $36, $34, $28
112ba     1E 1F 34 48 
112be     4D 37 07 D1 
112c2     A2 8D 97 B8 
112c6     E4 13 3B 4E | 	byte	$1e, $1f, $34, $48, $4d, $37, $07, $d1, $a2, $8d, $97, $b8, $e4, $13, $3b, $4e
112ca     55 52 3F 25 
112ce     01 DC C4 C2 
112d2     CB DA EA EC 
112d6     F3 F4 F1 F1 | 	byte	$55, $52, $3f, $25, $01, $dc, $c4, $c2, $cb, $da, $ea, $ec, $f3, $f4, $f1, $f1
112da     F8 05 18 2C 
112de     35 30 19 F3 
112e2     D5 C0 CE FF 
112e6     28 48 47 27 | 	byte	$f8, $05, $18, $2c, $35, $30, $19, $f3, $d5, $c0, $ce, $ff, $28, $48, $47, $27
112ea     00 DD D3 DC 
112ee     EE FD 05 0C 
112f2     04 05 0F 09 
112f6     04 F3 F3 FD | 	byte	$00, $dd, $d3, $dc, $ee, $fd, $05, $0c, $04, $05, $0f, $09, $04, $f3, $f3, $fd
112fa     02 0C 06 FB 
112fe     E9 D8 C8 C5 
11302     D6 E9 09 2C 
11306     38 36 2C 25 | 	byte	$02, $0c, $06, $fb, $e9, $d8, $c8, $c5, $d6, $e9, $09, $2c, $38, $36, $2c, $25
1130a     2E 30 28 0E 
1130e     EA C4 A5 98 
11312     AF DE 14 49 
11316     5F 4F 34 12 | 	byte	$2e, $30, $28, $0e, $ea, $c4, $a5, $98, $af, $de, $14, $49, $5f, $4f, $34, $12
1131a     F7 EB DE CD 
1131e     D0 E3 00 12 
11322     1A 0A FF F4 
11326     E1 D2 CD D4 | 	byte	$f7, $eb, $de, $cd, $d0, $e3, $00, $12, $1a, $0a, $ff, $f4, $e1, $d2, $cd, $d4
1132a     E5 00 1B 28 
1132e     2E 34 3A 3F 
11332     3F 2A 01 D8 
11336     B6 A4 AF CD | 	byte	$e5, $00, $1b, $28, $2e, $34, $3a, $3f, $3f, $2a, $01, $d8, $b6, $a4, $af, $cd
1133a     F5 1F 3E 4A 
1133e     42 2A 04 E5 
11342     D5 D0 DA ED 
11346     FC 16 22 19 | 	byte	$f5, $1f, $3e, $4a, $42, $2a, $04, $e5, $d5, $d0, $da, $ed, $fc, $16, $22, $19
1134a     06 EE D6 C6 
1134e     C2 CB E5 05 
11352     1A 21 16 06 
11356     0C 26 51 6E | 	byte	$06, $ee, $d6, $c6, $c2, $cb, $e5, $05, $1a, $21, $16, $06, $0c, $26, $51, $6e
1135a     62 2F E7 A1 
1135e     85 85 92 DA 
11362     19 4E 69 6B 
11366     55 31 0C EB | 	byte	$62, $2f, $e7, $a1, $85, $85, $92, $da, $19, $4e, $69, $6b, $55, $31, $0c, $eb
1136a     D0 C5 CB D3 
1136e     DF F1 F9 FB 
11372     FC F6 F2 F7 
11376     FC 05 15 1B | 	byte	$d0, $c5, $cb, $d3, $df, $f1, $f9, $fb, $fc, $f6, $f2, $f7, $fc, $05, $15, $1b
1137a     10 FC EB E5 
1137e     0A 38 55 59 
11382     2E EE B6 9E 
11386     AB D2 02 20 | 	byte	$10, $fc, $eb, $e5, $0a, $38, $55, $59, $2e, $ee, $b6, $9e, $ab, $d2, $02, $20
1138a     2F 32 2C 28 
1138e     1A 06 F0 DA 
11392     DC E0 EB F2 
11396     EF EA E4 D6 | 	byte	$2f, $32, $2c, $28, $1a, $06, $f0, $da, $dc, $e0, $eb, $f2, $ef, $ea, $e4, $d6
1139a     D6 EF 06 24 
1139e     44 49 3A 17 
113a2     F6 F0 F9 03 
113a6     0F 0A F8 E2 | 	byte	$d6, $ef, $06, $24, $44, $49, $3a, $17, $f6, $f0, $f9, $03, $0f, $0a, $f8, $e2
113aa     CA BC CF F8 
113ae     24 4E 53 37 
113b2     16 F7 DF D7 
113b6     D5 CE DF FF | 	byte	$ca, $bc, $cf, $f8, $24, $4e, $53, $37, $16, $f7, $df, $d7, $d5, $ce, $df, $ff
113ba     11 28 2A 12 
113be     FF EA CF BE 
113c2     C2 D2 E6 FC 
113c6     0A 16 33 5C | 	byte	$11, $28, $2a, $12, $ff, $ea, $cf, $be, $c2, $d2, $e6, $fc, $0a, $16, $33, $5c
113ca     7F 7F 6B 1C 
113ce     C2 86 85 85 
113d2     85 E4 28 5B 
113d6     77 73 4F 26 | 	byte	$7f, $7f, $6b, $1c, $c2, $86, $85, $85, $85, $e4, $28, $5b, $77, $73, $4f, $26
113da     F8 CE C4 D6 
113de     ED 05 05 EF 
113e2     DA C5 B7 BB 
113e6     D2 F2 1D 3F | 	byte	$f8, $ce, $c4, $d6, $ed, $05, $05, $ef, $da, $c5, $b7, $bb, $d2, $f2, $1d, $3f
113ea     47 37 1B 13 
113ee     2E 50 5F 45 
113f2     FE B2 85 85 
113f6     85 C4 0A 49 | 	byte	$47, $37, $1b, $13, $2e, $50, $5f, $45, $fe, $b2, $85, $85, $85, $c4, $0a, $49
113fa     6F 79 6F 4F 
113fe     24 F6 CD B3 
11402     B9 C8 D3 E3 
11406     EB EC F4 F3 | 	byte	$6f, $79, $6f, $4f, $24, $f6, $cd, $b3, $b9, $c8, $d3, $e3, $eb, $ec, $f4, $f3
1140a     F1 F8 FD 08 
1140e     1C 30 32 28 
11412     18 08 0E 15 
11416     10 04 E9 D2 | 	byte	$f1, $f8, $fd, $08, $1c, $30, $32, $28, $18, $08, $0e, $15, $10, $04, $e9, $d2
1141a     C8 CC E2 06 
1141e     23 35 3B 2A 
11422     0F F8 E7 DE 
11426     DF E3 F3 0D | 	byte	$c8, $cc, $e2, $06, $23, $35, $3b, $2a, $0f, $f8, $e7, $de, $df, $e3, $f3, $0d
1142a     1A 1A 0E F8 
1142e     E1 CB BF BE 
11432     D3 EE 05 1A 
11436     1E 22 3F 66 | 	byte	$1a, $1a, $0e, $f8, $e1, $cb, $bf, $be, $d3, $ee, $05, $1a, $1e, $22, $3f, $66
1143a     7F 7F 4C F6 
1143e     A4 85 85 85 
11442     AA F0 40 7D 
11446     7F 7E 4D 13 | 	byte	$7f, $7f, $4c, $f6, $a4, $85, $85, $85, $aa, $f0, $40, $7d, $7f, $7e, $4d, $13
1144a     E3 CE C9 CB 
1144e     DD EE FA FB 
11452     E9 D2 CD D2 
11456     DD F4 10 24 | 	byte	$e3, $ce, $c9, $cb, $dd, $ee, $fa, $fb, $e9, $d2, $cd, $d2, $dd, $f4, $10, $24
1145a     2D 28 09 06 
1145e     2A 50 75 67 
11462     24 D2 8B 85 
11466     85 A4 F8 4E | 	byte	$2d, $28, $09, $06, $2a, $50, $75, $67, $24, $d2, $8b, $85, $85, $a4, $f8, $4e
1146a     7D 79 69 4A 
1146e     18 F6 D5 AF 
11472     B5 C4 D2 E9 
11476     F8 F7 F5 F2 | 	byte	$7d, $79, $69, $4a, $18, $f6, $d5, $af, $b5, $c4, $d2, $e9, $f8, $f7, $f5, $f2
1147a     EB ED FE 0D 
1147e     21 35 2A 1C 
11482     10 14 20 27 
11486     1A FE DC BD | 	byte	$eb, $ed, $fe, $0d, $21, $35, $2a, $1c, $10, $14, $20, $27, $1a, $fe, $dc, $bd
1148a     AB BA DF 08 
1148e     3D 58 57 3B 
11492     19 F1 D4 C4 
11496     C5 D9 F9 10 | 	byte	$ab, $ba, $df, $08, $3d, $58, $57, $3b, $19, $f1, $d4, $c4, $c5, $d9, $f9, $10
1149a     18 18 02 E9 
1149e     D1 C3 B9 CC 
114a2     EC 0A 2B 3A 
114a6     41 51 5C 5F | 	byte	$18, $18, $02, $e9, $d1, $c3, $b9, $cc, $ec, $0a, $2b, $3a, $41, $51, $5c, $5f
114aa     4F 1E D9 98 
114ae     85 85 A5 E1 
114b2     25 5E 7A 77 
114b6     5A 25 E4 B4 | 	byte	$4f, $1e, $d9, $98, $85, $85, $a5, $e1, $25, $5e, $7a, $77, $5a, $25, $e4, $b4
114ba     9F B3 DF 09 
114be     21 21 0A E8 
114c2     CA BB C1 DE 
114c6     01 22 2F 1E | 	byte	$9f, $b3, $df, $09, $21, $21, $0a, $e8, $ca, $bb, $c1, $de, $01, $22, $2f, $1e
114ca     05 F8 11 4A 
114ce     7D 7F 55 FF 
114d2     A0 85 85 85 
114d6     CB 1F 5E 77 | 	byte	$05, $f8, $11, $4a, $7d, $7f, $55, $ff, $a0, $85, $85, $85, $cb, $1f, $5e, $77
114da     77 5B 30 08 
114de     E5 CA D6 E7 
114e2     F1 F0 DD C4 
114e6     B6 AC B2 D4 | 	byte	$77, $5b, $30, $08, $e5, $ca, $d6, $e7, $f1, $f0, $dd, $c4, $b6, $ac, $b2, $d4
114ea     FD 27 46 3F 
114ee     34 44 67 7F 
114f2     7F 51 ED 8F 
114f6     86 86 85 B3 | 	byte	$fd, $27, $46, $3f, $34, $44, $67, $7f, $7f, $51, $ed, $8f, $86, $86, $85, $b3
114fa     12 71 7F 7F 
114fe     7F 66 25 F1 
11502     B9 9A A4 A9 
11506     B5 C7 CC D1 | 	byte	$12, $71, $7f, $7f, $7f, $66, $25, $f1, $b9, $9a, $a4, $a9, $b5, $c7, $cc, $d1
1150a     DD E5 FC 1A 
1150e     34 4B 57 52 
11512     38 1E 0D 05 
11516     FC E7 CC B3 | 	byte	$dd, $e5, $fc, $1a, $34, $4b, $57, $52, $38, $1e, $0d, $05, $fc, $e7, $cc, $b3
1151a     A6 B8 DC 0C 
1151e     38 56 63 59 
11522     3C 15 F1 C9 
11526     AB 9F AD CB | 	byte	$a6, $b8, $dc, $0c, $38, $56, $63, $59, $3c, $15, $f1, $c9, $ab, $9f, $ad, $cb
1152a     EE 08 10 12 
1152e     11 11 0D 0A 
11532     06 05 FC E9 
11536     D4 CE E6 18 | 	byte	$ee, $08, $10, $12, $11, $11, $0d, $0a, $06, $05, $fc, $e9, $d4, $ce, $e6, $18
1153a     4F 71 6F 43 
1153e     F9 B0 89 88 
11542     B5 F3 33 5B 
11546     66 53 23 EA | 	byte	$4f, $71, $6f, $43, $f9, $b0, $89, $88, $b5, $f3, $33, $5b, $66, $53, $23, $ea
1154a     C8 BF CD E8 
1154e     F3 FA FB F7 
11552     EE E6 DE E0 
11556     EE F5 FC 09 | 	byte	$c8, $bf, $cd, $e8, $f3, $fa, $fb, $f7, $ee, $e6, $de, $e0, $ee, $f5, $fc, $09
1155a     1E 44 75 7F 
1155e     7F 4A EF 94 
11562     85 85 85 9C 
11566     09 5F 7F 7F | 	byte	$1e, $44, $75, $7f, $7f, $4a, $ef, $94, $85, $85, $85, $9c, $09, $5f, $7f, $7f
1156a     7F 62 26 EA 
1156e     B8 94 85 85 
11572     93 A8 C7 EA 
11576     0F 30 47 4F | 	byte	$7f, $62, $26, $ea, $b8, $94, $85, $85, $93, $a8, $c7, $ea, $0f, $30, $47, $4f
1157a     4A 2A 10 08 
1157e     22 3F 52 40 
11582     05 BC 85 85 
11586     85 B3 03 57 | 	byte	$4a, $2a, $10, $08, $22, $3f, $52, $40, $05, $bc, $85, $85, $85, $b3, $03, $57
1158a     7F 7F 7F 62 
1158e     2C FE D1 B4 
11592     A4 97 91 9A 
11596     A7 B7 D5 F7 | 	byte	$7f, $7f, $7f, $62, $2c, $fe, $d1, $b4, $a4, $97, $91, $9a, $a7, $b7, $d5, $f7
1159a     20 4B 5E 4F 
1159e     43 3E 5F 77 
115a2     77 39 E0 85 
115a6     86 86 85 85 | 	byte	$20, $4b, $5e, $4f, $43, $3e, $5f, $77, $77, $39, $e0, $85, $86, $86, $85, $85
115aa     29 7F 7F 7F 
115ae     7F 7B 47 08 
115b2     B6 85 85 86 
115b6     85 85 B2 F2 | 	byte	$29, $7f, $7f, $7f, $7f, $7b, $47, $08, $b6, $85, $85, $86, $85, $85, $b2, $f2
115ba     28 57 77 7F 
115be     71 44 1F 17 
115c2     24 29 16 EC 
115c6     AE 85 85 85 | 	byte	$28, $57, $77, $7f, $71, $44, $1f, $17, $24, $29, $16, $ec, $ae, $85, $85, $85
115ca     85 FA 4B 7F 
115ce     7F 7F 7F 57 
115d2     08 AD 85 85 
115d6     85 85 B1 E8 | 	byte	$85, $fa, $4b, $7f, $7f, $7f, $7f, $57, $08, $ad, $85, $85, $85, $85, $b1, $e8
115da     18 3C 54 5F 
115de     4E 27 F6 DE 
115e2     E6 18 46 64 
115e6     4D 0F B8 85 | 	byte	$18, $3c, $54, $5f, $4e, $27, $f6, $de, $e6, $18, $46, $64, $4d, $0f, $b8, $85
115ea     85 85 BB 0E 
115ee     52 7D 7F 7F 
115f2     65 22 D4 9B 
115f6     85 85 85 AD | 	byte	$85, $85, $bb, $0e, $52, $7d, $7f, $7f, $65, $22, $d4, $9b, $85, $85, $85, $ad
115fa     D1 EC 07 1C 
115fe     2B 3A 38 28 
11602     05 FC 08 36 
11606     5C 6F 47 00 | 	byte	$d1, $ec, $07, $1c, $2b, $3a, $38, $28, $05, $fc, $08, $36, $5c, $6f, $47, $00
1160a     A8 85 85 85 
1160e     C4 17 5E 7F 
11612     7F 7F 5E 27 
11616     DA 95 85 85 | 	byte	$a8, $85, $85, $85, $c4, $17, $5e, $7f, $7f, $7f, $5e, $27, $da, $95, $85, $85
1161a     85 A7 CD ED 
1161e     07 1A 26 2A 
11622     20 0E 14 39 
11626     7D 7F 7F 4D | 	byte	$85, $a7, $cd, $ed, $07, $1a, $26, $2a, $20, $0e, $14, $39, $7d, $7f, $7f, $4d
1162a     E7 85 86 86 
1162e     85 85 14 72 
11632     7F 7F 7F 76 
11636     2E E4 9C 85 | 	byte	$e7, $85, $86, $86, $85, $85, $14, $72, $7f, $7f, $7f, $76, $2e, $e4, $9c, $85
1163a     85 85 85 9E 
1163e     BC E0 0C 30 
11642     51 63 5A 4E 
11646     4E 5F 69 5F | 	byte	$85, $85, $85, $9e, $bc, $e0, $0c, $30, $51, $63, $5a, $4e, $4e, $5f, $69, $5f
1164a     19 C6 85 86 
1164e     86 85 9C 18 
11652     77 7F 7F 7F 
11656     7F 44 E7 94 | 	byte	$19, $c6, $85, $86, $86, $85, $9c, $18, $77, $7f, $7f, $7f, $7f, $44, $e7, $94
1165a     85 85 85 85 
1165e     85          | 	byte	$85[5]
1165f     CB 04 34 5A 
11663     6F 73 5F 39 
11667     21 14 1C 1F 
1166b     0E E2 AA 85 | 	byte	$cb, $04, $34, $5a, $6f, $73, $5f, $39, $21, $14, $1c, $1f, $0e, $e2, $aa, $85
1166f     85 85 C0 10 
11673     58 7F 7F 7F 
11677     73 38 E8 93 
1167b     85 86 85 85 | 	byte	$85, $85, $c0, $10, $58, $7f, $7f, $7f, $73, $38, $e8, $93, $85, $86, $85, $85
1167f     C4 04 3C 57 
11683     65 4F 2C F8 
11687     DC DC 0C 49 
1168b     76 6F 37 D7 | 	byte	$c4, $04, $3c, $57, $65, $4f, $2c, $f8, $dc, $dc, $0c, $49, $76, $6f, $37, $d7
1168f     87 85 85 85 
11693     DE 32 7E 7F 
11697     7F 7C 3E F2 
1169b     AD 87 85 85 | 	byte	$87, $85, $85, $85, $de, $32, $7e, $7f, $7f, $7c, $3e, $f2, $ad, $87, $85, $85
1169f     85 AA CC E9 
116a3     05 21 3B 4B 
116a7     4D 2C 20 24 
116ab     34 55 47 20 | 	byte	$85, $aa, $cc, $e9, $05, $21, $3b, $4b, $4d, $2c, $20, $24, $34, $55, $47, $20
116af     D8 99 85 85 
116b3     85 C7 15 50 
116b7     73 7F 73 4B 
116bb     22 F8 D6 BE | 	byte	$d8, $99, $85, $85, $85, $c7, $15, $50, $73, $7f, $73, $4b, $22, $f8, $d6, $be
116bf     A8 91 8B 8E 
116c3     9D BA DE 0A 
116c7     37 54 5B 46 
116cb     2C 22 3E 4F | 	byte	$a8, $91, $8b, $8e, $9d, $ba, $de, $0a, $37, $54, $5b, $46, $2c, $22, $3e, $4f
116cf     4C 25 E5 9B 
116d3     85 85 85 B7 
116d7     FE 4A 7B 7F 
116db     7F 67 2C FC | 	byte	$4c, $25, $e5, $9b, $85, $85, $85, $b7, $fe, $4a, $7b, $7f, $7f, $67, $2c, $fc
116df     CB B4 9A 8C 
116e3     89 99 B0 CB 
116e7     EA 08 22 2C 
116eb     1B 08 18 4C | 	byte	$cb, $b4, $9a, $8c, $89, $99, $b0, $cb, $ea, $08, $22, $2c, $1b, $08, $18, $4c
116ef     7F 7F 7F 55 
116f3     BE 86 86 86 
116f7     86 85 2D 7F 
116fb     7F 7F 7F 7F | 	byte	$7f, $7f, $7f, $55, $be, $86, $86, $86, $86, $85, $2d, $7f, $7f, $7f, $7f, $7f
116ff     45 F0 96 85 
11703     86 86 85 85 
11707     87 E6 2D 65 
1170b     7B 6E 65 72 | 	byte	$45, $f0, $96, $85, $86, $86, $85, $85, $87, $e6, $2d, $65, $7b, $6e, $65, $72
1170f     7F 7F 7F 1A 
11713     AB 86 86 86 
11717     85 85 0D 6E 
1171b     7F 7F 7F 7F | 	byte	$7f, $7f, $7f, $1a, $ab, $86, $86, $86, $85, $85, $0d, $6e, $7f, $7f, $7f, $7f
1171f     7B 1A A5 85 
11723     86 86 86 85 
11727     85 FE 49 7F 
1172b     7F 7F 51 36 | 	byte	$7b, $1a, $a5, $85, $86, $86, $86, $85, $85, $fe, $49, $7f, $7f, $7f, $51, $36
1172f     2D 58 56 53 
11733     EE 92 86 86 
11737     86 85 CB 32 
1173b     7F 7F 7F 7F | 	byte	$2d, $58, $56, $53, $ee, $92, $86, $86, $86, $85, $cb, $32, $7f, $7f, $7f, $7f
1173f     7F 2F B3 86 
11743     86 86 86 85 
11747     B5 1A 67 7F 
1174b     7F 6F 32 12 | 	byte	$7f, $2f, $b3, $86, $86, $86, $86, $85, $b5, $1a, $67, $7f, $7f, $6f, $32, $12
1174f     22 4A 5D 4E 
11753     02 A3 85 86 
11757     86 85 BB 16 
1175b     6F 7F 7F 7F | 	byte	$22, $4a, $5d, $4e, $02, $a3, $85, $86, $86, $85, $bb, $16, $6f, $7f, $7f, $7f
1175f     7F 1C AA 85 
11763     86 86 86 85 
11767     B0 F3 2C 50 
1176b     64 61 44 17 | 	byte	$7f, $1c, $aa, $85, $86, $86, $86, $85, $b0, $f3, $2c, $50, $64, $61, $44, $17
1176f     F5 08 30 5B 
11773     5F 20 C6 85 
11777     85 85 85 C0 
1177b     1B 69 7F 7F | 	byte	$f5, $08, $30, $5b, $5f, $20, $c6, $85, $85, $85, $85, $c0, $1b, $69, $7f, $7f
1177f     7F 7F 28 B5 
11783     85 86 86 86 
11787     85 C3 15 56 
1178b     76 76 5D 3A | 	byte	$7f, $7f, $28, $b5, $85, $86, $86, $86, $85, $c3, $15, $56, $76, $76, $5d, $3a
1178f     19 18 29 38 
11793     2A 00 BF 87 
11797     85 85 85 BF 
1179b     0B 57 7F 7F | 	byte	$19, $18, $29, $38, $2a, $00, $bf, $87, $85, $85, $85, $bf, $0b, $57, $7f, $7f
1179f     7F 7F 27 BC 
117a3     85 86 86 85 
117a7     85 AD F2 2C 
117ab     56 65 5F 41 | 	byte	$7f, $7f, $27, $bc, $85, $86, $86, $85, $85, $ad, $f2, $2c, $56, $65, $5f, $41
117af     1B EE E4 F7 
117b3     1F 38 36 04 
117b7     C0 87 85 85 
117bb     AE EE 2E 65 | 	byte	$1b, $ee, $e4, $f7, $1f, $38, $36, $04, $c0, $87, $85, $85, $ae, $ee, $2e, $65
117bf     7F 7F 7B 47 
117c3     F7 A6 85 85 
117c7     85 85 88 D8 
117cb     10 34 48 3D | 	byte	$7f, $7f, $7b, $47, $f7, $a6, $85, $85, $85, $85, $88, $d8, $10, $34, $48, $3d
117cf     1D F6 ED FB 
117d3     2D 5B 6C 54 
117d7     15 C4 86 85 
117db     85 85 C7 0E | 	byte	$1d, $f6, $ed, $fb, $2d, $5b, $6c, $54, $15, $c4, $86, $85, $85, $85, $c7, $0e
117df     53 7F 7F 7F 
117e3     5A 17 D3 A4 
117e7     85 85 85 85 
117eb     A1 C3 E9 09 | 	byte	$53, $7f, $7f, $7f, $5a, $17, $d3, $a4, $85, $85, $85, $85, $a1, $c3, $e9, $09
117ef     28 3A 39 1C 
117f3     29 3D 7D 7F 
117f7     7F 1E AE 85 
117fb     86 86 85 B3 | 	byte	$28, $3a, $39, $1c, $29, $3d, $7d, $7f, $7f, $1e, $ae, $85, $86, $86, $85, $b3
117ff     17 6E 7F 7F 
11803     7F 7B 33 E5 
11807     87 86 86 86 
1180b     86 85 E7 47 | 	byte	$17, $6e, $7f, $7f, $7f, $7b, $33, $e5, $87, $86, $86, $86, $86, $85, $e7, $47
1180f     7F 7F 7F 7F 
11813     5B 15 D2 A5 
11817     93 92 94 AC 
1181b     BE DB F9 15 | 	byte	$7f, $7f, $7f, $7f, $5b, $15, $d2, $a5, $93, $92, $94, $ac, $be, $db, $f9, $15
1181f     2B 3D 46 44 
11823     37 18 EC C7 
11827     A7 9B A1 B2 
1182b     DE 0C 2C 31 | 	byte	$2b, $3d, $46, $44, $37, $18, $ec, $c7, $a7, $9b, $a1, $b2, $de, $0c, $2c, $31
1182f     22 05 E0 C8 
11833     AE A7 A8 B4 
11837     DC 26 7E 7F 
1183b     7F 7F 3D B5 | 	byte	$22, $05, $e0, $c8, $ae, $a7, $a8, $b4, $dc, $26, $7e, $7f, $7f, $7f, $3d, $b5
1183f     85 86 86 85 
11843     C3 1C 62 7F 
11847     7F 7F 63 1A 
1184b     CE 8C 85 85 | 	byte	$85, $86, $86, $85, $c3, $1c, $62, $7f, $7f, $7f, $63, $1a, $ce, $8c, $85, $85
1184f     85 85 85 D2 
11853     0E 36 46 3E 
11857     3F 75 7F 7F 
1185b     7F 37 BE 86 | 	byte	$85, $85, $85, $d2, $0e, $36, $46, $3e, $3f, $75, $7f, $7f, $7f, $37, $be, $86
1185f     86 86 86 85 
11863     F6 62 7F 7F 
11867     7F 7F 44 EA 
1186b     A0 85 85 85 | 	byte	$86, $86, $86, $85, $f6, $62, $7f, $7f, $7f, $7f, $44, $ea, $a0, $85, $85, $85
1186f     85 85 AE D6 
11873     FE 18 32 46 
11877     57 54 3E 1E 
1187b     00 02 FC 08 | 	byte	$85, $85, $ae, $d6, $fe, $18, $32, $46, $57, $54, $3e, $1e, $00, $02, $fc, $08
1187f     ED D4 A8 9D 
11883     A7 CC FB 2A 
11887     48 55 4B 34 
1188b     0D F0 D2 BF | 	byte	$ed, $d4, $a8, $9d, $a7, $cc, $fb, $2a, $48, $55, $4b, $34, $0d, $f0, $d2, $bf
1188f     C3 C2 CB CF 
11893     CC D1 D0 D8 
11897     E6 FB 0A 17 
1189b     14 13 2B 5A | 	byte	$c3, $c2, $cb, $cf, $cc, $d1, $d0, $d8, $e6, $fb, $0a, $17, $14, $13, $2b, $5a
1189f     7F 7F 4D E7 
118a3     88 86 86 85 
118a7     BA 0D 53 7F 
118ab     7F 7F 67 29 | 	byte	$7f, $7f, $4d, $e7, $88, $86, $86, $85, $ba, $0d, $53, $7f, $7f, $7f, $67, $29
118af     E1 A4 85 85 
118b3     85 85 A1 D4 
118b7     0A 3A 54 4E 
118bb     30 15 17 39 | 	byte	$e1, $a4, $85, $85, $85, $85, $a1, $d4, $0a, $3a, $54, $4e, $30, $15, $17, $39
118bf     67 7F 57 03 
118c3     99 85 86 85 
118c7     85 EC 41 7F 
118cb     7F 7F 7F 56 | 	byte	$67, $7f, $57, $03, $99, $85, $86, $85, $85, $ec, $41, $7f, $7f, $7f, $7f, $56
118cf     FC A8 85 85 
118d3     85 85 85 B2 
118d7     E7 1D 48 66 
118db     6B 58 2C 0A | 	byte	$fc, $a8, $85, $85, $85, $85, $85, $b2, $e7, $1d, $48, $66, $6b, $58, $2c, $0a
118df     FE 12 26 38 
118e3     1B E3 9B 85 
118e7     85 85 D5 1A 
118eb     52 71 76 63 | 	byte	$fe, $12, $26, $38, $1b, $e3, $9b, $85, $85, $85, $d5, $1a, $52, $71, $76, $63
118ef     4A 21 F3 C7 
118f3     A7 9B 95 99 
118f7     A0 AE C2 DB 
118fb     FB 13 22 28 | 	byte	$4a, $21, $f3, $c7, $a7, $9b, $95, $99, $a0, $ae, $c2, $db, $fb, $13, $22, $28
118ff     2F 52 7D 7F 
11903     7F 67 F0 85 
11907     86 86 86 85 
1190b     F2 4D 7F 7F | 	byte	$2f, $52, $7d, $7f, $7f, $67, $f0, $85, $86, $86, $86, $85, $f2, $4d, $7f, $7f
1190f     7F 7F 7F 02 
11913     87 86 86 86 
11917     86 85 DA 2D 
1191b     6D 7F 75 4B | 	byte	$7f, $7f, $7f, $02, $87, $86, $86, $86, $86, $85, $da, $2d, $6d, $7f, $75, $4b
1191f     22 1A 36 56 
11923     58 37 EF A4 
11927     85 85 85 85 
1192b     CF 21 6C 7F | 	byte	$22, $1a, $36, $56, $58, $37, $ef, $a4, $85, $85, $85, $85, $cf, $21, $6c, $7f
1192f     7F 7F 7F 20 
11933     A1 86 86 86 
11937     86 85 D9 3B 
1193b     7F 7F 7F 7F | 	byte	$7f, $7f, $7f, $20, $a1, $86, $86, $86, $86, $85, $d9, $3b, $7f, $7f, $7f, $7f
1193f     3A F6 D3 CF 
11943     E0 F4 F5 E3 
11947     C8 B4 AB BD 
1194b     DC 07 31 54 | 	byte	$3a, $f6, $d3, $cf, $e0, $f4, $f5, $e3, $c8, $b4, $ab, $bd, $dc, $07, $31, $54
1194f     63 5C 4D 35 
11953     06 C3 88 85 
11957     85 85 AF D5 
1195b     F8 1A 33 39 | 	byte	$63, $5c, $4d, $35, $06, $c3, $88, $85, $85, $85, $af, $d5, $f8, $1a, $33, $39
1195f     26 05 05 1B 
11963     4B 71 63 33 
11967     E4 A4 85 85 
1196b     85 B2 EA 21 | 	byte	$26, $05, $05, $1b, $4b, $71, $63, $33, $e4, $a4, $85, $85, $85, $b2, $ea, $21
1196f     59 7F 7F 7F 
11973     63 1A D3 94 
11977     85 85 85 85 
1197b     85 CC 00 2A | 	byte	$59, $7f, $7f, $7f, $63, $1a, $d3, $94, $85, $85, $85, $85, $85, $cc, $00, $2a
1197f     52 6C 6F 45 
11983     2A 23 33 42 
11987     36 F0 A1 85 
1198b     85 85 B2 FE | 	byte	$52, $6c, $6f, $45, $2a, $23, $33, $42, $36, $f0, $a1, $85, $85, $85, $b2, $fe
1198f     39 6F 7F 7F 
11993     73 4C 0A CE 
11997     94 85 85 85 
1199b     85 90 CF 0A | 	byte	$39, $6f, $7f, $7f, $73, $4c, $0a, $ce, $94, $85, $85, $85, $85, $90, $cf, $0a
1199f     40 67 7E 7B 
119a3     67 36 00 CC 
119a7     B8 BA C2 C9 
119ab     CB D3 DE FA | 	byte	$40, $67, $7e, $7b, $67, $36, $00, $cc, $b8, $ba, $c2, $c9, $cb, $d3, $de, $fa
119af     14 2D 38 3E 
119b3     38 26 06 E0 
119b7     C2 BA CC E1 
119bb     EB F1 EE F3 | 	byte	$14, $2d, $38, $3e, $38, $26, $06, $e0, $c2, $ba, $cc, $e1, $eb, $f1, $ee, $f3
119bf     E8 DA CD C8 
119c3     D0 DE F1 10 
119c7     38 6C 7F 7F 
119cb     79 1E B6 85 | 	byte	$e8, $da, $cd, $c8, $d0, $de, $f1, $10, $38, $6c, $7f, $7f, $79, $1e, $b6, $85
119cf     85 85 85 C5 
119d3     13 5E 7F 7F 
119d7     7F 5E 21 E2 
119db     AC 86 85 85 | 	byte	$85, $85, $85, $c5, $13, $5e, $7f, $7f, $7f, $5e, $21, $e2, $ac, $86, $85, $85
119df     85 85 B2 EF 
119e3     28 5E 7D 73 
119e7     5F 66 72 6F 
119eb     53 EF 94 86 | 	byte	$85, $85, $b2, $ef, $28, $5e, $7d, $73, $5f, $66, $72, $6f, $53, $ef, $94, $86
119ef     86 85 85 DD 
119f3     2A 6F 7F 7F 
119f7     7F 67 22 EC 
119fb     B1 88 85 85 | 	byte	$86, $85, $85, $dd, $2a, $6f, $7f, $7f, $7f, $67, $22, $ec, $b1, $88, $85, $85
119ff     85 85 B3 E1 
11a03     0B 35 58 73 
11a07     7F 6F 53 2F 
11a0b     16 F4 D9 A6 | 	byte	$85, $85, $b3, $e1, $0b, $35, $58, $73, $7f, $6f, $53, $2f, $16, $f4, $d9, $a6
11a0f     89 85 85 B1 
11a13     EC 27 56 77 
11a17     7D 6D 3E 0B 
11a1b     D8 B2 97 9D | 	byte	$89, $85, $85, $b1, $ec, $27, $56, $77, $7d, $6d, $3e, $0b, $d8, $b2, $97, $9d
11a1f     A8 CB DA ED 
11a23     F2 F0 F1 F2 
11a27     F8 F9 F6 F0 
11a2b     04 48 7F 7F | 	byte	$a8, $cb, $da, $ed, $f2, $f0, $f1, $f2, $f8, $f9, $f6, $f0, $04, $48, $7f, $7f
11a2f     7F 42 BC 85 
11a33     86 85 85 C9 
11a37     1A 63 7F 7F 
11a3b     7F 7F 2C C3 | 	byte	$7f, $42, $bc, $85, $86, $85, $85, $c9, $1a, $63, $7f, $7f, $7f, $7f, $2c, $c3
11a3f     85 86 86 86 
11a43     85 85 F3 36 
11a47     64 6B 51 4C 
11a4b     6F 7F 7F 7F | 	byte	$85, $86, $86, $86, $85, $85, $f3, $36, $64, $6b, $51, $4c, $6f, $7f, $7f, $7f
11a4f     0A 8F 86 86 
11a53     86 85 BC 0F 
11a57     63 7F 7F 7F 
11a5b     7F 34 D9 8E | 	byte	$0a, $8f, $86, $86, $86, $85, $bc, $0f, $63, $7f, $7f, $7f, $7f, $34, $d9, $8e
11a5f     85 85 85 85 
11a63     85          | 	byte	$85[5]
11a64     C5 EF 0B 1A 
11a68     2C 42 57 57 
11a6c     47 22 10 11 
11a70     1A 04 DF 9F | 	byte	$c5, $ef, $0b, $1a, $2c, $42, $57, $57, $47, $22, $10, $11, $1a, $04, $df, $9f
11a74     86 85 AF F2 
11a78     28 54 63 62 
11a7c     4F 2F 0E E4 
11a80     C3 B5 AE B0 | 	byte	$86, $85, $af, $f2, $28, $54, $63, $62, $4f, $2f, $0e, $e4, $c3, $b5, $ae, $b0
11a84     AF B5 BE D7 
11a88     E8 04 1C 2D 
11a8c     2A 18 08 0C 
11a90     38 5C 72 4B | 	byte	$af, $b5, $be, $d7, $e8, $04, $1c, $2d, $2a, $18, $08, $0c, $38, $5c, $72, $4b
11a94     FA 9C 85 85 
11a98     85 C4 06 42 
11a9c     6F 7F 7F 7F 
11aa0     44 EB 8F 85 | 	byte	$fa, $9c, $85, $85, $85, $c4, $06, $42, $6f, $7f, $7f, $7f, $44, $eb, $8f, $85
11aa4     85 85 85 85 
11aa8     DF 23 52 5B 
11aac     4A 32 40 6D 
11ab0     7F 7F 5C E2 | 	byte	$85, $85, $85, $85, $df, $23, $52, $5b, $4a, $32, $40, $6d, $7f, $7f, $5c, $e2
11ab4     85 86 86 85 
11ab8     85 E4 2E 7B 
11abc     7F 7F 7F 67 
11ac0     0F BA 89 85 | 	byte	$85, $86, $86, $85, $85, $e4, $2e, $7b, $7f, $7f, $7f, $67, $0f, $ba, $89, $85
11ac4     85 85 85 A1 
11ac8     D4 FA 15 22 
11acc     35 40 3D 31 
11ad0     3B 52 79 6F | 	byte	$85, $85, $85, $a1, $d4, $fa, $15, $22, $35, $40, $3d, $31, $3b, $52, $79, $6f
11ad4     3D C8 85 86 
11ad8     86 85 CA 1E 
11adc     65 7F 7F 7F 
11ae0     77 37 F0 B8 | 	byte	$3d, $c8, $85, $86, $86, $85, $ca, $1e, $65, $7f, $7f, $7f, $77, $37, $f0, $b8
11ae4     8B 85 85 85 
11ae8     85 AB E5 1D 
11aec     45 65 6F 6B 
11af0     50 28 14 11 | 	byte	$8b, $85, $85, $85, $85, $ab, $e5, $1d, $45, $65, $6f, $6b, $50, $28, $14, $11
11af4     11 01 D1 A0 
11af8     85 85 A2 DB 
11afc     15 4A 6B 7F 
11b00     75 56 24 FE | 	byte	$11, $01, $d1, $a0, $85, $85, $a2, $db, $15, $4a, $6b, $7f, $75, $56, $24, $fe
11b04     D7 B2 8A 85 
11b08     85 85 BA EE 
11b0c     1D 34 42 3C 
11b10     31 30 48 63 | 	byte	$d7, $b2, $8a, $85, $85, $85, $ba, $ee, $1d, $34, $42, $3c, $31, $30, $48, $63
11b14     74 57 10 B7 
11b18     85 85 85 85 
11b1c     CA 1A 64 7F 
11b20     7F 7F 7E 31 | 	byte	$74, $57, $10, $b7, $85, $85, $85, $85, $ca, $1a, $64, $7f, $7f, $7f, $7e, $31
11b24     D2 88 85 86 
11b28     85 85 AB F2 
11b2c     36 64 73 55 
11b30     1D 03 10 5B | 	byte	$d2, $88, $85, $86, $85, $85, $ab, $f2, $36, $64, $73, $55, $1d, $03, $10, $5b
11b34     7F 7F 51 D4 
11b38     85 86 86 85 
11b3c     9D FF 54 7F 
11b40     7F 7F 7F 3C | 	byte	$7f, $7f, $51, $d4, $85, $86, $86, $85, $9d, $ff, $54, $7f, $7f, $7f, $7f, $3c
11b44     EA AC 85 85 
11b48     85 85 85 BA 
11b4c     E5 00 14 22 
11b50     38 48 32 22 | 	byte	$ea, $ac, $85, $85, $85, $85, $85, $ba, $e5, $00, $14, $22, $38, $48, $32, $22
11b54     37 5C 7F 7F 
11b58     2F BF 85 86 
11b5c     86 85 CC 2A 
11b60     74 7F 7F 7F | 	byte	$37, $5c, $7f, $7f, $2f, $bf, $85, $86, $86, $85, $cc, $2a, $74, $7f, $7f, $7f
11b64     77 26 DF 99 
11b68     85 85 85 85 
11b6c     85 B4 F2 2C 
11b70     67 7F 7F 7F | 	byte	$77, $26, $df, $99, $85, $85, $85, $85, $85, $b4, $f2, $2c, $67, $7f, $7f, $7f
11b74     4F 25 01 FC 
11b78     EA D1 9F 85 
11b7c     85 85 CC 0C 
11b80     46 6F 7F 7F | 	byte	$4f, $25, $01, $fc, $ea, $d1, $9f, $85, $85, $85, $cc, $0c, $46, $6f, $7f, $7f
11b84     5F 24 EE C9 
11b88     AC A2 91 93 
11b8c     9E B6 D5 EA 
11b90     FB 06 0C 0A | 	byte	$5f, $24, $ee, $c9, $ac, $a2, $91, $93, $9e, $b6, $d5, $ea, $fb, $06, $0c, $0a
11b94     22 4E 7F 7F 
11b98     7F 73 DA 85 
11b9c     86 86 86 85 
11ba0     03 6A 7F 7F | 	byte	$22, $4e, $7f, $7f, $7f, $73, $da, $85, $86, $86, $86, $85, $03, $6a, $7f, $7f
11ba4     7F 7F 66 F9 
11ba8     92 85 86 86 
11bac     86 85 B6 08 
11bb0     4C 6F 75 57 | 	byte	$7f, $7f, $66, $f9, $92, $85, $86, $86, $86, $85, $b6, $08, $4c, $6f, $75, $57
11bb4     4A 5D 7F 7F 
11bb8     7C 07 8E 86 
11bbc     86 86 85 BE 
11bc0     1B 7A 7F 7F | 	byte	$4a, $5d, $7f, $7f, $7c, $07, $8e, $86, $86, $86, $85, $be, $1b, $7a, $7f, $7f
11bc4     7F 7F 36 EC 
11bc8     A2 85 85 86 
11bcc     85 85 A9 E5 
11bd0     18 47 73 7F | 	byte	$7f, $7f, $36, $ec, $a2, $85, $85, $86, $85, $85, $a9, $e5, $18, $47, $73, $7f
11bd4     7F 7F 5F 1E 
11bd8     E8 BC 9C 87 
11bdc     85 85 9C D4 
11be0     10 4E 7B 7F | 	byte	$7f, $7f, $5f, $1e, $e8, $bc, $9c, $87, $85, $85, $9c, $d4, $10, $4e, $7b, $7f
11be4     7F 5B 1C D9 
11be8     A4 87 85 85 
11bec     B8 E9 08 1A 
11bf0     1C 0A F1 D6 | 	byte	$7f, $5b, $1c, $d9, $a4, $87, $85, $85, $b8, $e9, $08, $1a, $1c, $0a, $f1, $d6
11bf4     C2 B1 A7 C4 
11bf8     16 7F 7F 7F 
11bfc     7F 2A 8A 86 
11c00     86 86 85 D4 | 	byte	$c2, $b1, $a7, $c4, $16, $7f, $7f, $7f, $7f, $2a, $8a, $86, $86, $86, $85, $d4
11c04     3A 7F 7F 7F 
11c08     7F 7B FD 89 
11c0c     86 86 86 86 
11c10     85 C3 19 5E | 	byte	$3a, $7f, $7f, $7f, $7f, $7b, $fd, $89, $86, $86, $86, $86, $85, $c3, $19, $5e
11c14     77 6D 62 7F 
11c18     7F 7F 7F 10 
11c1c     8A 86 86 86 
11c20     85 B6 0F 6E | 	byte	$77, $6d, $62, $7f, $7f, $7f, $7f, $10, $8a, $86, $86, $86, $85, $b6, $0f, $6e
11c24     7F 7F 7F 7F 
11c28     39 DA 8F 85 
11c2c     85 85 85 85 
11c30     B2 E4 11 2E | 	byte	$7f, $7f, $7f, $7f, $39, $da, $8f, $85, $85, $85, $85, $85, $b2, $e4, $11, $2e
11c34     47 5B 71 5F 
11c38     3B 0E FD FC 
11c3c     09 F7 CD 9C 
11c40     85 85 B7 F9 | 	byte	$47, $5b, $71, $5f, $3b, $0e, $fd, $fc, $09, $f7, $cd, $9c, $85, $85, $b7, $f9
11c44     33 60 75 6F 
11c48     4F 27 F8 CA 
11c4c     B1 99 9F A1 
11c50     B0 BF D0 E7 | 	byte	$33, $60, $75, $6f, $4f, $27, $f8, $ca, $b1, $99, $9f, $a1, $b0, $bf, $d0, $e7
11c54     F8 09 10 14 
11c58     00 FE 1F 66 
11c5c     7F 7F 67 EE 
11c60     85 86 86 85 | 	byte	$f8, $09, $10, $14, $00, $fe, $1f, $66, $7f, $7f, $67, $ee, $85, $86, $86, $85
11c64     85 FE 4F 7F 
11c68     7F 7F 7F 7F 
11c6c     09 88 86 86 
11c70     86 86 85 C1 | 	byte	$85, $fe, $4f, $7f, $7f, $7f, $7f, $7f, $09, $88, $86, $86, $86, $86, $85, $c1
11c74     22 6C 7F 7F 
11c78     7F 7F 7F 7F 
11c7c     65 DC 85 86 
11c80     86 86 85 D4 | 	byte	$22, $6c, $7f, $7f, $7f, $7f, $7f, $7f, $65, $dc, $85, $86, $86, $86, $85, $d4
11c84     34 7F 7F 7F 
11c88     7F 7F 27 BC 
11c8c     85 85 86 86 
11c90     85 85 CB 06 | 	byte	$34, $7f, $7f, $7f, $7f, $7f, $27, $bc, $85, $85, $86, $86, $85, $85, $cb, $06
11c94     31 46 4F 4F 
11c98     3A 22 2B 5E 
11c9c     65 67 09 A4 
11ca0     85 86 85 85 | 	byte	$31, $46, $4f, $4f, $3a, $22, $2b, $5e, $65, $67, $09, $a4, $85, $86, $85, $85
11ca4     DB 2E 7D 7F 
11ca8     7F 7F 6A 11 
11cac     C2 87 85 85 
11cb0     85 85 85 DB | 	byte	$db, $2e, $7d, $7f, $7f, $7f, $6a, $11, $c2, $87, $85, $85, $85, $85, $85, $db
11cb4     12 3A 50 5E 
11cb8     47 30 04 08 
11cbc     18 47 42 1E 
11cc0     C7 86 85 85 | 	byte	$12, $3a, $50, $5e, $47, $30, $04, $08, $18, $47, $42, $1e, $c7, $86, $85, $85
11cc4     85 E9 32 63 
11cc8     7F 7F 7F 6B 
11ccc     38 F1 9A 85 
11cd0     86 86 85 85 | 	byte	$85, $e9, $32, $63, $7f, $7f, $7f, $6b, $38, $f1, $9a, $85, $86, $86, $85, $85
11cd4     D3 19 50 69 
11cd8     71 69 71 7F 
11cdc     7F 67 02 8B 
11ce0     86 86 86 85 | 	byte	$d3, $19, $50, $69, $71, $69, $71, $7f, $7f, $67, $02, $8b, $86, $86, $86, $85
11ce4     D1 36 7F 7F 
11ce8     7F 7F 7F 16 
11cec     9D 85 86 86 
11cf0     85 85 BE 04 | 	byte	$d1, $36, $7f, $7f, $7f, $7f, $7f, $16, $9d, $85, $86, $86, $85, $85, $be, $04
11cf4     3D 67 69 4C 
11cf8     14 D8 EB 21 
11cfc     7B 7F 6A F7 
11d00     87 85 86 85 | 	byte	$3d, $67, $69, $4c, $14, $d8, $eb, $21, $7b, $7f, $6a, $f7, $87, $85, $86, $85
11d04     85 04 54 7F 
11d08     7F 7F 7D 34 
11d0c     E4 AD 89 85 
11d10     85 85 85 B2 | 	byte	$85, $04, $54, $7f, $7f, $7f, $7d, $34, $e4, $ad, $89, $85, $85, $85, $85, $b2
11d14     DC F8 16 28 
11d18     31 1E 20 5B 
11d1c     7F 7F 7F 23 
11d20     94 86 86 86 | 	byte	$dc, $f8, $16, $28, $31, $1e, $20, $5b, $7f, $7f, $7f, $23, $94, $86, $86, $86
11d24     85 CF 43 7F 
11d28     7F 7F 7F 74 
11d2c     00 B6 85 85 
11d30     85 85 85 85 | 	byte	$85, $cf, $43, $7f, $7f, $7f, $7f, $74, $00, $b6, $85, $85, $85, $85, $85, $85
11d34     BF F8 30 61 
11d38     7F 7F 72 3E 
11d3c     28 10 08 EB 
11d40     B3 85 85 85 | 	byte	$bf, $f8, $30, $61, $7f, $7f, $72, $3e, $28, $10, $08, $eb, $b3, $85, $85, $85
11d44     85 E4 3C 7F 
11d48     7F 7F 7F 49 
11d4c     05 D5 A8 85 
11d50     85 85 85 85 | 	byte	$85, $e4, $3c, $7f, $7f, $7f, $7f, $49, $05, $d5, $a8, $85, $85, $85, $85, $85
11d54     CF 04 24 38 
11d58     30 19 1F 3B 
11d5c     76 7F 7F 54 
11d60     BD 86 86 86 | 	byte	$cf, $04, $24, $38, $30, $19, $1f, $3b, $76, $7f, $7f, $54, $bd, $86, $86, $86
11d64     86 85 1F 7F 
11d68     7F 7F 7F 7F 
11d6c     3E AF 86 86 
11d70     86 86 85 85 | 	byte	$86, $85, $1f, $7f, $7f, $7f, $7f, $7f, $3e, $af, $86, $86, $86, $86, $85, $85
11d74     0B 64 7F 7F 
11d78     6F 30 22 39 
11d7c     66 59 1C AA 
11d80     85 86 86 85 | 	byte	$0b, $64, $7f, $7f, $6f, $30, $22, $39, $66, $59, $1c, $aa, $85, $86, $86, $85
11d84     C5 1E 75 7F 
11d88     7F 7F 67 18 
11d8c     C4 94 85 85 
11d90     85 85 85 B5 | 	byte	$c5, $1e, $75, $7f, $7f, $7f, $67, $18, $c4, $94, $85, $85, $85, $85, $85, $b5
11d94     E7 07 24 34 
11d98     3F 39 2B 28 
11d9c     39 55 50 2D 
11da0     CB 86 86 85 | 	byte	$e7, $07, $24, $34, $3f, $39, $2b, $28, $39, $55, $50, $2d, $cb, $86, $86, $85
11da4     85 CD 20 6F 
11da8     7F 7F 7F 4E 
11dac     06 BB 92 85 
11db0     8A 90 A1 AD | 	byte	$85, $cd, $20, $6f, $7f, $7f, $7f, $4e, $06, $bb, $92, $85, $8a, $90, $a1, $ad
11db4     C4 DE F3 09 
11db8     18 1D 0B 0C 
11dbc     2C 6A 7F 7F 
11dc0     54 D1 85 86 | 	byte	$c4, $de, $f3, $09, $18, $1d, $0b, $0c, $2c, $6a, $7f, $7f, $54, $d1, $85, $86
11dc4     86 85 B8 2A 
11dc8     7F 7F 7F 7F 
11dcc     7F 37 EC 8D 
11dd0     85 86 86 86 | 	byte	$86, $85, $b8, $2a, $7f, $7f, $7f, $7f, $7f, $37, $ec, $8d, $85, $86, $86, $86
11dd4     85 C2 09 45 
11dd8     5E 4E 4D 71 
11ddc     7F 7F 7F 29 
11de0     87 86 87 86 | 	byte	$85, $c2, $09, $45, $5e, $4e, $4d, $71, $7f, $7f, $7f, $29, $87, $86, $87, $86
11de4     85 A9 35 7F 
11de8     7F 7F 7F 7F 
11dec     16 B9 85 85 
11df0     86 86 85 85 | 	byte	$85, $a9, $35, $7f, $7f, $7f, $7f, $7f, $16, $b9, $85, $85, $86, $86, $85, $85
11df4     BC FF 37 5C 
11df8     73 6C 44 2F 
11dfc     38 56 4B 24 
11e00     A6 85 86 86 | 	byte	$bc, $ff, $37, $5c, $73, $6c, $44, $2f, $38, $56, $4b, $24, $a6, $85, $86, $86
11e04     85 D6 35 7F 
11e08     7F 7F 7F 5D 
11e0c     06 A8 85 85 
11e10     85 85 85 85 | 	byte	$85, $d6, $35, $7f, $7f, $7f, $7f, $5d, $06, $a8, $85, $85, $85, $85, $85, $85
11e14     CA 00 2F 4C 
11e18     5B 57 33 06 
11e1c     EC F7 13 19 
11e20     0C D3 9C 85 | 	byte	$ca, $00, $2f, $4c, $5b, $57, $33, $06, $ec, $f7, $13, $19, $0c, $d3, $9c, $85
11e24     85 B4 FA 36 
11e28     65 77 67 4B 
11e2c     0F EB CE C7 
11e30     AD 95 85 85 | 	byte	$85, $b4, $fa, $36, $65, $77, $67, $4b, $0f, $eb, $ce, $c7, $ad, $95, $85, $85
11e34     A2 C0 DE F5 
11e38     01 FB 08 34 
11e3c     7F 7F 7F 7F 
11e40     ED 85 86 87 | 	byte	$a2, $c0, $de, $f5, $01, $fb, $08, $34, $7f, $7f, $7f, $7f, $ed, $85, $86, $87
11e44     86 85 05 7E 
11e48     7F 7F 7F 7F 
11e4c     27 BB 85 86 
11e50     86 86 85 85 | 	byte	$86, $85, $05, $7e, $7f, $7f, $7f, $7f, $27, $bb, $85, $86, $86, $86, $85, $85
11e54     C2 FD 38 5E 
11e58     6F 5E 38 4B 
11e5c     65 7A 57 E8 
11e60     85 86 86 86 | 	byte	$c2, $fd, $38, $5e, $6f, $5e, $38, $4b, $65, $7a, $57, $e8, $85, $86, $86, $86
11e64     85 09 69 7F 
11e68     7F 7F 7E 30 
11e6c     DA A5 85 85 
11e70     85 85 85 A5 | 	byte	$85, $09, $69, $7f, $7f, $7f, $7e, $30, $da, $a5, $85, $85, $85, $85, $85, $a5
11e74     DE 1B 4C 6F 
11e78     7B 67 38 02 
11e7c     F1 F4 F6 E5 
11e80     B8 93 85 97 | 	byte	$de, $1b, $4c, $6f, $7b, $67, $38, $02, $f1, $f4, $f6, $e5, $b8, $93, $85, $97
11e84     C8 08 41 6C 
11e88     79 6A 41 08 
11e8c     CE A4 99 AB 
11e90     CB D4 D8 CF | 	byte	$c8, $08, $41, $6c, $79, $6a, $41, $08, $ce, $a4, $99, $ab, $cb, $d4, $d8, $cf
11e94     D7 E0 E3 E8 
11e98     E2 D8 D3 FB 
11e9c     59 7F 7F 7F 
11ea0     37 91 86 86 | 	byte	$d7, $e0, $e3, $e8, $e2, $d8, $d3, $fb, $59, $7f, $7f, $7f, $37, $91, $86, $86
11ea4     86 85 E0 56 
11ea8     7F 7F 7F 7F 
11eac     73 00 8C 86 
11eb0     86 86 86 85 | 	byte	$86, $85, $e0, $56, $7f, $7f, $7f, $7f, $73, $00, $8c, $86, $86, $86, $86, $85
11eb4     BC 0B 4A 69 
11eb8     63 4B 77 7F 
11ebc     7F 7F 1A 85 
11ec0     86 87 86 85 | 	byte	$bc, $0b, $4a, $69, $63, $4b, $77, $7f, $7f, $7f, $1a, $85, $86, $87, $86, $85
11ec4     CF 53 7F 7F 
11ec8     7F 7F 61 EE 
11ecc     9C 85 85 85 
11ed0     85 85 85 B7 | 	byte	$cf, $53, $7f, $7f, $7f, $7f, $61, $ee, $9c, $85, $85, $85, $85, $85, $85, $b7
11ed4     EB 16 3F 5F 
11ed8     7B 7F 6B 3A 
11edc     FE D1 A2 98 
11ee0     86 89 9D C6 | 	byte	$eb, $16, $3f, $5f, $7b, $7f, $6b, $3a, $fe, $d1, $a2, $98, $86, $89, $9d, $c6
11ee4     00 3A 67 7C 
11ee8     73 53 23 E5 
11eec     AF 89 85 85 
11ef0     C2 F6 1C 2C | 	byte	$00, $3a, $67, $7c, $73, $53, $23, $e5, $af, $89, $85, $85, $c2, $f6, $1c, $2c
11ef4     1C 0C F0 D5 
11ef8     BE A7 9B 96 
11efc     C7 37 7F 7F 
11f00     7F 7F DC 85 | 	byte	$1c, $0c, $f0, $d5, $be, $a7, $9b, $96, $c7, $37, $7f, $7f, $7f, $7f, $dc, $85
11f04     86 86 85 8B 
11f08     1E 75 7F 7F 
11f0c     7F 56 30 00 
11f10     C8 88 85 86 | 	byte	$86, $86, $85, $8b, $1e, $75, $7f, $7f, $7f, $56, $30, $00, $c8, $88, $85, $86
11f14     86 85 85 EB 
11f18     24 52 54 5C 
11f1c     7F 7F 7F 7F 
11f20     06 85 87 87 | 	byte	$86, $85, $85, $eb, $24, $52, $54, $5c, $7f, $7f, $7f, $7f, $06, $85, $87, $87
11f24     86 85 EF 6F 
11f28     7F 7F 7F 7F 
11f2c     4B E4 A1 85 
11f30     85 85 85 85 | 	byte	$86, $85, $ef, $6f, $7f, $7f, $7f, $7f, $4b, $e4, $a1, $85, $85, $85, $85, $85
11f34     85 BB FB 38 
11f38     5F 7F 7F 7F 
11f3c     63 2E EA B9 
11f40     90 85 85 85 | 	byte	$85, $bb, $fb, $38, $5f, $7f, $7f, $7f, $63, $2e, $ea, $b9, $90, $85, $85, $85
11f44     AA DB 19 52 
11f48     7A 7F 73 4A 
11f4c     11 D4 98 85 
11f50     85 85 C5 FF | 	byte	$aa, $db, $19, $52, $7a, $7f, $73, $4a, $11, $d4, $98, $85, $85, $85, $c5, $ff
11f54     25 34 26 1A 
11f58     03 E7 CD B3 
11f5c     A0 96 AE 04 
11f60     6F 7F 7F 7F | 	byte	$25, $34, $26, $1a, $03, $e7, $cd, $b3, $a0, $96, $ae, $04, $6f, $7f, $7f, $7f
11f64     25 9E 85 86 
11f68     85 85 F4 3D 
11f6c     6C 7D 6E 4C 
11f70     28 1A 06 D9 | 	byte	$25, $9e, $85, $86, $85, $85, $f4, $3d, $6c, $7d, $6e, $4c, $28, $1a, $06, $d9
11f74     96 85 85 85 
11f78     85 B7 F5 1E 
11f7c     2E 2E 66 7F 
11f80     7F 7F 7F ED | 	byte	$96, $85, $85, $85, $85, $b7, $f5, $1e, $2e, $2e, $66, $7f, $7f, $7f, $7f, $ed
11f84     86 87 87 86 
11f88     85 1B 7F 7F 
11f8c     7F 7F 7F 31 
11f90     E1 97 85 85 | 	byte	$86, $87, $87, $86, $85, $1b, $7f, $7f, $7f, $7f, $7f, $31, $e1, $97, $85, $85
11f94     86 86 85 85 
11f98     D8 2A 7A 7F 
11f9c     7F 7F 32 F8 
11fa0     DC F5 FF ED | 	byte	$86, $86, $85, $85, $d8, $2a, $7a, $7f, $7f, $7f, $32, $f8, $dc, $f5, $ff, $ed
11fa4     AC 85 85 85 
11fa8     BD 0B 54 7F 
11fac     7F 7F 5C 24 
11fb0     DF A7 8C 85 | 	byte	$ac, $85, $85, $85, $bd, $0b, $54, $7f, $7f, $7f, $5c, $24, $df, $a7, $8c, $85
11fb4     85 85 85 B0 
11fb8     DC 0C 37 4F 
11fbc     5B 48 17 F5 
11fc0     03 1B 36 2A | 	byte	$85, $85, $85, $b0, $dc, $0c, $37, $4f, $5b, $48, $17, $f5, $03, $1b, $36, $2a
11fc4     EA 9F 85 85 
11fc8     85 D3 1F 5B 
11fcc     7D 7D 6A 33 
11fd0     F3 BA A8 B5 | 	byte	$ea, $9f, $85, $85, $85, $d3, $1f, $5b, $7d, $7d, $6a, $33, $f3, $ba, $a8, $b5
11fd4     C7 BF AD 9D 
11fd8     AB C3 DB F0 
11fdc     F5 F1 E9 25 
11fe0     7F 7F 7F 7F | 	byte	$c7, $bf, $ad, $9d, $ab, $c3, $db, $f0, $f5, $f1, $e9, $25, $7f, $7f, $7f, $7f
11fe4     08 85 87 87 
11fe8     86 85 01 79 
11fec     7F 7F 7F 7F 
11ff0     67 FF 95 86 | 	byte	$08, $85, $87, $87, $86, $85, $01, $79, $7f, $7f, $7f, $7f, $67, $ff, $95, $86
11ff4     86 86 86 85 
11ff8     86 F9 46 7E 
11ffc     7F 77 5F 7F 
12000     7F 7F 4F 9D | 	byte	$86, $86, $86, $85, $86, $f9, $46, $7e, $7f, $77, $5f, $7f, $7f, $7f, $4f, $9d
12004     86 87 86 86 
12008     BB 33 7F 7F 
1200c     7F 7F 7F 13 
12010     AA 85 85 85 | 	byte	$86, $87, $86, $86, $bb, $33, $7f, $7f, $7f, $7f, $7f, $13, $aa, $85, $85, $85
12014     85 85 85 B1 
12018     E7 19 3D 66 
1201c     73 6F 41 0E 
12020     01 FF 00 E6 | 	byte	$85, $85, $85, $b1, $e7, $19, $3d, $66, $73, $6f, $41, $0e, $01, $ff, $00, $e6
12024     B2 86 85 85 
12028     C7 10 4B 73 
1202c     7E 6F 46 0A 
12030     CA 9D 8D AC | 	byte	$b2, $86, $85, $85, $c7, $10, $4b, $73, $7e, $6f, $46, $0a, $ca, $9d, $8d, $ac
12034     C4 D7 D4 D4 
12038     DF E9 F0 F2 
1203c     F3 E4 CB D1 
12040     25 7F 7F 7F | 	byte	$c4, $d7, $d4, $d4, $df, $e9, $f0, $f2, $f3, $e4, $cb, $d1, $25, $7f, $7f, $7f
12044     77 DD 85 86 
12048     86 85 85 1E 
1204c     6F 7F 7F 7F 
12050     5F 18 F2 C9 | 	byte	$77, $dd, $85, $86, $86, $85, $85, $1e, $6f, $7f, $7f, $7f, $5f, $18, $f2, $c9
12054     9C 85 85 86 
12058     85 85 E5 27 
1205c     4A 58 2E 2D 
12060     68 7F 7F 7F | 	byte	$9c, $85, $85, $86, $85, $85, $e5, $27, $4a, $58, $2e, $2d, $68, $7f, $7f, $7f
12064     02 85 86 87 
12068     86 85 EE 62 
1206c     7F 7F 7F 7F 
12070     57 FD C3 8A | 	byte	$02, $85, $86, $87, $86, $85, $ee, $62, $7f, $7f, $7f, $7f, $57, $fd, $c3, $8a
12074     85 85 86 85 
12078     85 CA 14 3D 
1207c     67 7B 75 59 
12080     2E 28 22 11 | 	byte	$85, $85, $86, $85, $85, $ca, $14, $3d, $67, $7b, $75, $59, $2e, $28, $22, $11
12084     EB 9F 85 85 
12088     85 AF 02 44 
1208c     7F 7F 7F 6B 
12090     24 D4 95 85 | 	byte	$eb, $9f, $85, $85, $85, $af, $02, $44, $7f, $7f, $7f, $6b, $24, $d4, $95, $85
12094     85 9F C1 CF 
12098     E2 F2 02 0D 
1209c     10 0A F5 D8 
120a0     B7 DD 29 7F | 	byte	$85, $9f, $c1, $cf, $e2, $f2, $02, $0d, $10, $0a, $f5, $d8, $b7, $dd, $29, $7f
120a4     7F 7F 39 B7 
120a8     85 86 85 85 
120ac     E7 3A 77 7F 
120b0     7F 5D 2D F6 | 	byte	$7f, $7f, $39, $b7, $85, $86, $85, $85, $e7, $3a, $77, $7f, $7f, $5d, $2d, $f6
120b4     E0 C8 AB 88 
120b8     85 85 85 BD 
120bc     F1 21 1E 0C 
120c0     FD 45 7F 7F | 	byte	$e0, $c8, $ab, $88, $85, $85, $85, $bd, $f1, $21, $1e, $0c, $fd, $45, $7f, $7f
120c4     7F 7F DA 86 
120c8     87 87 86 85 
120cc     17 7C 7F 7F 
120d0     7F 7F 41 E9 | 	byte	$7f, $7f, $da, $86, $87, $87, $86, $85, $17, $7c, $7f, $7f, $7f, $7f, $41, $e9
120d4     AE 85 85 86 
120d8     86 85 86 F2 
120dc     2C 57 62 5C 
120e0     2F 1D 44 6E | 	byte	$ae, $85, $85, $86, $86, $85, $86, $f2, $2c, $57, $62, $5c, $2f, $1d, $44, $6e
120e4     7F 59 DC 85 
120e8     86 86 85 B8 
120ec     19 6C 7F 7F 
120f0     7F 73 1F CD | 	byte	$7f, $59, $dc, $85, $86, $86, $85, $b8, $19, $6c, $7f, $7f, $7f, $73, $1f, $cd
120f4     93 87 85 85 
120f8     85 85 B9 E8 
120fc     1E 3E 52 49 
12100     30 05 11 28 | 	byte	$93, $87, $85, $85, $85, $85, $b9, $e8, $1e, $3e, $52, $49, $30, $05, $11, $28
12104     5C 51 27 C2 
12108     85 85 85 85 
1210c     E9 2E 6C 7F 
12110     7F 6F 2C EC | 	byte	$5c, $51, $27, $c2, $85, $85, $85, $85, $e9, $2e, $6c, $7f, $7f, $6f, $2c, $ec
12114     B8 AA AE A8 
12118     97 9A A5 D4 
1211c     E9 03 0C FD 
12120     DB DB 3A 7F | 	byte	$b8, $aa, $ae, $a8, $97, $9a, $a5, $d4, $e9, $03, $0c, $fd, $db, $db, $3a, $7f
12124     7F 7F 7F CB 
12128     86 86 86 86 
1212c     85 26 7F 7F 
12130     7F 7F 7F 25 | 	byte	$7f, $7f, $7f, $cb, $86, $86, $86, $86, $85, $26, $7f, $7f, $7f, $7f, $7f, $25
12134     CF 97 85 85 
12138     85 85 85 B8 
1213c     FA 2D 4A 52 
12140     43 12 20 57 | 	byte	$cf, $97, $85, $85, $85, $85, $85, $b8, $fa, $2d, $4a, $52, $43, $12, $20, $57
12144     7F 7F 5E C1 
12148     85 86 86 85 
1214c     CA 28 76 7F 
12150     7F 7F 63 19 | 	byte	$7f, $7f, $5e, $c1, $85, $86, $86, $85, $ca, $28, $76, $7f, $7f, $7f, $63, $19
12154     D0 AC 89 85 
12158     85 85 85 C0 
1215c     EE 1B 34 48 
12160     4A 2F 27 4C | 	byte	$d0, $ac, $89, $85, $85, $85, $85, $c0, $ee, $1b, $34, $48, $4a, $2f, $27, $4c
12164     67 71 45 D6 
12168     85 86 86 85 
1216c     C3 18 63 7F 
12170     7F 7F 5F 0E | 	byte	$67, $71, $45, $d6, $85, $86, $86, $85, $c3, $18, $63, $7f, $7f, $7f, $5f, $0e
12174     C5 99 9A 92 
12178     92 8C 9D C5 
1217c     EB 0D 23 26 
12180     0B D9 E6 3D | 	byte	$c5, $99, $9a, $92, $92, $8c, $9d, $c5, $eb, $0d, $23, $26, $0b, $d9, $e6, $3d
12184     7F 7F 7F 33 
12188     90 86 86 86 
1218c     85 DE 50 7F 
12190     7F 7F 7F 57 | 	byte	$7f, $7f, $7f, $33, $90, $86, $86, $86, $85, $de, $50, $7f, $7f, $7f, $7f, $57
12194     F4 A9 86 85 
12198     85 85 85 AC 
1219c     E2 18 3D 46 
121a0     3A 01 16 59 | 	byte	$f4, $a9, $86, $85, $85, $85, $85, $ac, $e2, $18, $3d, $46, $3a, $01, $16, $59
121a4     7F 7F 7F E1 
121a8     85 86 86 85 
121ac     85 15 71 7F 
121b0     7F 7F 7F 32 | 	byte	$7f, $7f, $7f, $e1, $85, $86, $86, $85, $85, $15, $71, $7f, $7f, $7f, $7f, $32
121b4     DA A7 85 85 
121b8     85 85 85 B8 
121bc     EB 1F 3B 4F 
121c0     53 32 1D 34 | 	byte	$da, $a7, $85, $85, $85, $85, $85, $b8, $eb, $1f, $3b, $4f, $53, $32, $1d, $34
121c4     52 79 54 F1 
121c8     89 86 86 85 
121cc     B7 0F 55 7F 
121d0     7F 7F 6F 1E | 	byte	$52, $79, $54, $f1, $89, $86, $86, $85, $b7, $0f, $55, $7f, $7f, $7f, $6f, $1e
121d4     CD 94 85 8A 
121d8     92 9A AF D1 
121dc     F6 18 24 30 
121e0     20 FE CE DC | 	byte	$cd, $94, $85, $8a, $92, $9a, $af, $d1, $f6, $18, $24, $30, $20, $fe, $ce, $dc
121e4     13 6E 7F 7F 
121e8     26 B0 85 86 
121ec     85 85 EE 35 
121f0     7D 7F 7F 67 | 	byte	$13, $6e, $7f, $7f, $26, $b0, $85, $86, $85, $85, $ee, $35, $7d, $7f, $7f, $67
121f4     2F EE C8 B5 
121f8     93 88 85 85 
121fc     B1 D4 FA 1A 
12200     1E 0E E2 18 | 	byte	$2f, $ee, $c8, $b5, $93, $88, $85, $85, $b1, $d4, $fa, $1a, $1e, $0e, $e2, $18
12204     5C 7F 7F 7F 
12208     19 86 86 86 
1220c     86 85 F1 54 
12210     7F 7F 7F 7F | 	byte	$5c, $7f, $7f, $7f, $19, $86, $86, $86, $86, $85, $f1, $54, $7f, $7f, $7f, $7f
12214     5C 09 BE 87 
12218     85 85 85 85 
1221c     8B E3 24 4F 
12220     5F 61 3B 0B | 	byte	$5c, $09, $be, $87, $85, $85, $85, $85, $8b, $e3, $24, $4f, $5f, $61, $3b, $0b
12224     21 37 73 5F 
12228     1E B1 85 86 
1222c     85 85 EF 3F 
12230     7B 7F 7F 7F | 	byte	$21, $37, $73, $5f, $1e, $b1, $85, $86, $85, $85, $ef, $3f, $7b, $7f, $7f, $7f
12234     41 FA BC 9D 
12238     85 85 85 85 
1223c     AF DC 06 28 
12240     36 34 28 0F | 	byte	$41, $fa, $bc, $9d, $85, $85, $85, $85, $af, $dc, $06, $28, $36, $34, $28, $0f
12244     19 3E 6C 6D 
12248     4F DE 89 85 
1224c     85 85 BF 11 
12250     57 7F 7F 7F | 	byte	$19, $3e, $6c, $6d, $4f, $de, $89, $85, $85, $85, $bf, $11, $57, $7f, $7f, $7f
12254     5A 19 D3 A8 
12258     9E 8A 88 85 
1225c     9C C8 E9 0A 
12260     1C 1D FF D2 | 	byte	$5a, $19, $d3, $a8, $9e, $8a, $88, $85, $9c, $c8, $e9, $0a, $1c, $1d, $ff, $d2
12264     05 56 7F 7F 
12268     7F 1A 86 86 
1226c     86 86 85 F2 
12270     56 7F 7F 7F | 	byte	$05, $56, $7f, $7f, $7f, $1a, $86, $86, $86, $86, $85, $f2, $56, $7f, $7f, $7f
12274     7F 54 F5 A4 
12278     85 85 85 85 
1227c     85 B5 F2 24 
12280     4D 57 56 24 | 	byte	$7f, $54, $f5, $a4, $85, $85, $85, $85, $85, $b5, $f2, $24, $4d, $57, $56, $24
12284     F9 25 4E 7F 
12288     7F 12 A1 85 
1228c     86 85 85 EE 
12290     4B 7F 7F 7F | 	byte	$f9, $25, $4e, $7f, $7f, $12, $a1, $85, $86, $85, $85, $ee, $4b, $7f, $7f, $7f
12294     7F 45 F6 BE 
12298     97 85 85 85 
1229c     85 B7 DF 10 
122a0     26 3C 3F 27 | 	byte	$7f, $45, $f6, $be, $97, $85, $85, $85, $85, $b7, $df, $10, $26, $3c, $3f, $27
122a4     05 2C 58 7F 
122a8     7F 2C A7 85 
122ac     86 85 85 E3 
122b0     3C 7D 7F 7F | 	byte	$05, $2c, $58, $7f, $7f, $2c, $a7, $85, $86, $85, $85, $e3, $3c, $7d, $7f, $7f
122b4     7F 46 F0 AC 
122b8     91 85 85 85 
122bc     85 A5 D6 FF 
122c0     27 47 4C 46 | 	byte	$7f, $46, $f0, $ac, $91, $85, $85, $85, $85, $a5, $d6, $ff, $27, $47, $4c, $46
122c4     16 1C 29 66 
122c8     5E 39 C8 85 
122cc     85 85 85 D5 
122d0     27 65 7F 7F | 	byte	$16, $1c, $29, $66, $5e, $39, $c8, $85, $85, $85, $85, $d5, $27, $65, $7f, $7f
122d4     7F 46 F4 B1 
122d8     89 85 94 9C 
122dc     B5 CC EA 0E 
122e0     22 2F 2D 15 | 	byte	$7f, $46, $f4, $b1, $89, $85, $94, $9c, $b5, $cc, $ea, $0e, $22, $2f, $2d, $15
122e4     E9 B0 CB FC 
122e8     5F 7F 7F 35 
122ec     CC 85 85 85 
122f0     85 E9 28 6A | 	byte	$e9, $b0, $cb, $fc, $5f, $7f, $7f, $35, $cc, $85, $85, $85, $85, $e9, $28, $6a
122f4     7F 7F 5F 2A 
122f8     F1 C7 BC A7 
122fc     A3 94 9E B0 
12300     CF EC 09 18 | 	byte	$7f, $7f, $5f, $2a, $f1, $c7, $bc, $a7, $a3, $94, $9e, $b0, $cf, $ec, $09, $18
12304     10 E7 EA 44 
12308     7F 7F 7F 57 
1230c     BE 86 86 86 
12310     85 C0 37 7F | 	byte	$10, $e7, $ea, $44, $7f, $7f, $7f, $57, $be, $86, $86, $86, $85, $c0, $37, $7f
12314     7F 7F 7F 77 
12318     1A D0 95 85 
1231c     85 86 85 85 
12320     C7 16 41 5F | 	byte	$7f, $7f, $7f, $77, $1a, $d0, $95, $85, $85, $86, $85, $85, $c7, $16, $41, $5f
12324     6D 5F 33 19 
12328     31 4A 51 27 
1232c     C1 85 86 85 
12330     85 E6 36 79 | 	byte	$6d, $5f, $33, $19, $31, $4a, $51, $27, $c1, $85, $86, $85, $85, $e6, $36, $79
12334     7F 7F 7F 4F 
12338     FE AF 85 85 
1233c     85 85 9E B8 
12340     E6 09 35 4A | 	byte	$7f, $7f, $7f, $4f, $fe, $af, $85, $85, $85, $85, $9e, $b8, $e6, $09, $35, $4a
12344     52 3E 19 E2 
12348     CF E5 1B 3A 
1234c     41 08 CD 9A 
12350     92 A8 D8 0C | 	byte	$52, $3e, $19, $e2, $cf, $e5, $1b, $3a, $41, $08, $cd, $9a, $92, $a8, $d8, $0c
12354     36 5D 6C 5F 
12358     32 F9 C6 B0 
1235c     BF C7 CB C3 
12360     C2 CC D7 DE | 	byte	$36, $5d, $6c, $5f, $32, $f9, $c6, $b0, $bf, $c7, $cb, $c3, $c2, $cc, $d7, $de
12364     ED EE E1 C4 
12368     02 65 7F 7F 
1236c     7F 3C 8D 86 
12370     87 86 85 D9 | 	byte	$ed, $ee, $e1, $c4, $02, $65, $7f, $7f, $7f, $3c, $8d, $86, $87, $86, $85, $d9
12374     44 7F 7F 7F 
12378     7F 64 08 B2 
1237c     85 85 85 85 
12380     85 A4 DD 1C | 	byte	$44, $7f, $7f, $7f, $7f, $64, $08, $b2, $85, $85, $85, $85, $85, $a4, $dd, $1c
12384     48 61 64 52 
12388     1F F5 07 2A 
1238c     4C 3E FA A1 
12390     85 85 85 DA | 	byte	$48, $61, $64, $52, $1f, $f5, $07, $2a, $4c, $3e, $fa, $a1, $85, $85, $85, $da
12394     20 59 7C 7F 
12398     7F 55 0F C7 
1239c     9B 90 8E 8D 
123a0     9A AF D3 F5 | 	byte	$20, $59, $7c, $7f, $7f, $55, $0f, $c7, $9b, $90, $8e, $8d, $9a, $af, $d3, $f5
123a4     18 30 40 43 
123a8     28 FC F9 0F 
123ac     3A 46 38 E7 
123b0     A4 85 85 A6 | 	byte	$18, $30, $40, $43, $28, $fc, $f9, $0f, $3a, $46, $38, $e7, $a4, $85, $85, $a6
123b4     E4 21 53 7D 
123b8     7F 6F 31 EE 
123bc     B4 98 A8 B1 
123c0     BF C3 CD E1 | 	byte	$e4, $21, $53, $7d, $7f, $6f, $31, $ee, $b4, $98, $a8, $b1, $bf, $c3, $cd, $e1
123c4     F0 F9 FF FD 
123c8     EB C9 EC 4B 
123cc     7F 7F 7F 40 
123d0     97 86 86 86 | 	byte	$f0, $f9, $ff, $fd, $eb, $c9, $ec, $4b, $7f, $7f, $7f, $40, $97, $86, $86, $86
123d4     85 DE 44 7F 
123d8     7F 7F 7F 5B 
123dc     F5 A0 85 85 
123e0     85 85 85 B9 | 	byte	$85, $de, $44, $7f, $7f, $7f, $7f, $5b, $f5, $a0, $85, $85, $85, $85, $85, $b9
123e4     EF 21 46 51 
123e8     52 3A 06 EE 
123ec     19 47 65 5E 
123f0     F0 9D 85 85 | 	byte	$ef, $21, $46, $51, $52, $3a, $06, $ee, $19, $47, $65, $5e, $f0, $9d, $85, $85
123f4     85 D4 1C 5E 
123f8     7F 7F 7F 57 
123fc     14 C4 9D 8A 
12400     86 86 99 B0 | 	byte	$85, $d4, $1c, $5e, $7f, $7f, $7f, $57, $14, $c4, $9d, $8a, $86, $86, $99, $b0
12404     DC FC 19 2A 
12408     38 42 2E 0D 
1240c     11 25 4A 42 
12410     23 CA 8B 85 | 	byte	$dc, $fc, $19, $2a, $38, $42, $2e, $0d, $11, $25, $4a, $42, $23, $ca, $8b, $85
12414     85 B2 F5 34 
12418     66 7F 7F 6E 
1241c     26 DA 9F 8C 
12420     A2 B1 C5 CC | 	byte	$85, $b2, $f5, $34, $66, $7f, $7f, $6e, $26, $da, $9f, $8c, $a2, $b1, $c5, $cc
12424     D8 EC F7 03 
12428     09 08 F8 D1 
1242c     E7 3A 7F 7F 
12430     7F 3B AB 86 | 	byte	$d8, $ec, $f7, $03, $09, $08, $f8, $d1, $e7, $3a, $7f, $7f, $7f, $3b, $ab, $86
12434     86 86 85 E1 
12438     3E 7F 7F 7F 
1243c     7F 4F EE A0 
12440     85 85 85 85 | 	byte	$86, $86, $85, $e1, $3e, $7f, $7f, $7f, $7f, $4f, $ee, $a0, $85, $85, $85, $85
12444     86 BF EC 16 
12448     36 42 44 27 
1244c     F2 0E 3C 7F 
12450     7F 5F D3 85 | 	byte	$86, $bf, $ec, $16, $36, $42, $44, $27, $f2, $0e, $3c, $7f, $7f, $5f, $d3, $85
12454     86 86 85 D3 
12458     33 75 7F 7F 
1245c     7F 63 0C BD 
12460     90 85 85 85 | 	byte	$86, $86, $85, $d3, $33, $75, $7f, $7f, $7f, $63, $0c, $bd, $90, $85, $85, $85
12464     85 B2 DF 0A 
12468     32 4D 5B 5E 
1246c     35 10 16 24 
12470     3C 2A E2 9B | 	byte	$85, $b2, $df, $0a, $32, $4d, $5b, $5e, $35, $10, $16, $24, $3c, $2a, $e2, $9b
12474     85 85 85 DF 
12478     22 5D 7F 7F 
1247c     7F 52 F9 A9 
12480     85 85 85 A1 | 	byte	$85, $85, $85, $df, $22, $5d, $7f, $7f, $7f, $52, $f9, $a9, $85, $85, $85, $a1
12484     C6 E8 0E 2C 
12488     3C 39 2C 13 
1248c     F4 C9 B4 D4 
12490     0D 4A 79 4F | 	byte	$c6, $e8, $0e, $2c, $3c, $39, $2c, $13, $f4, $c9, $b4, $d4, $0d, $4a, $79, $4f
12494     17 C6 9B 90 
12498     AB D3 05 3A 
1249c     5E 6E 4F 1E 
124a0     E3 C3 B6 DA | 	byte	$17, $c6, $9b, $90, $ab, $d3, $05, $3a, $5e, $6e, $4f, $1e, $e3, $c3, $b6, $da
124a4     DF E7 D5 CD 
124a8     C6 D2 DE F4 
124ac     02 F6 DD FA 
124b0     44 7F 7F 7F | 	byte	$df, $e7, $d5, $cd, $c6, $d2, $de, $f4, $02, $f6, $dd, $fa, $44, $7f, $7f, $7f
124b4     53 C0 85 86 
124b8     86 85 CB 2D 
124bc     7F 7F 7F 7F 
124c0     61 0E C6 9A | 	byte	$53, $c0, $85, $86, $86, $85, $cb, $2d, $7f, $7f, $7f, $7f, $61, $0e, $c6, $9a
124c4     85 85 85 85 
124c8     A9 D7 0F 34 
124cc     4D 4F 3E 02 
124d0     F4 2A 62 7F | 	byte	$85, $85, $85, $85, $a9, $d7, $0f, $34, $4d, $4f, $3e, $02, $f4, $2a, $62, $7f
124d4     7F 02 9C 85 
124d8     86 85 B3 09 
124dc     63 7F 7F 7F 
124e0     79 2E CF 9C | 	byte	$7f, $02, $9c, $85, $86, $85, $b3, $09, $63, $7f, $7f, $7f, $79, $2e, $cf, $9c
124e4     85 85 85 85 
124e8     85          | 	byte	$85[5]
124e9     D9 0C 36 50 
124ed     5E 6C 57 31 
124f1     0E F8 FB E7 
124f5     DD B2 A0 9C | 	byte	$d9, $0c, $36, $50, $5e, $6c, $57, $31, $0e, $f8, $fb, $e7, $dd, $b2, $a0, $9c
124f9     BA E8 1F 47 
124fd     67 7A 6B 46 
12501     00 B5 88 85 
12505     AC D2 EE F5 | 	byte	$ba, $e8, $1f, $47, $67, $7a, $6b, $46, $00, $b5, $88, $85, $ac, $d2, $ee, $f5
12509     F5 FD FC 00 
1250d     F9 EE DB C4 
12511     DA 2E 7F 7F 
12515     7F 57 D3 85 | 	byte	$f5, $fd, $fc, $00, $f9, $ee, $db, $c4, $da, $2e, $7f, $7f, $7f, $57, $d3, $85
12519     86 86 85 C8 
1251d     27 72 7F 7F 
12521     7F 55 03 BF 
12525     A1 86 85 85 | 	byte	$86, $86, $85, $c8, $27, $72, $7f, $7f, $7f, $55, $03, $bf, $a1, $86, $85, $85
12529     85 AC D5 FF 
1252d     25 37 3E 22 
12531     ED 2E 5A 7F 
12535     7F 59 BD 85 | 	byte	$85, $ac, $d5, $ff, $25, $37, $3e, $22, $ed, $2e, $5a, $7f, $7f, $59, $bd, $85
12539     86 86 85 CE 
1253d     3B 7F 7F 7F 
12541     7F 65 0B B0 
12545     89 85 85 85 | 	byte	$86, $86, $85, $ce, $3b, $7f, $7f, $7f, $7f, $65, $0b, $b0, $89, $85, $85, $85
12549     85 B1 DC 12 
1254d     38 55 5F 5D 
12551     44 12 0D 0C 
12555     1C 04 E0 A6 | 	byte	$85, $b1, $dc, $12, $38, $55, $5f, $5d, $44, $12, $0d, $0c, $1c, $04, $e0, $a6
12559     8A 85 AE F1 
1255d     29 5C 77 7F 
12561     73 3B EE AA 
12565     88 86 A8 C0 | 	byte	$8a, $85, $ae, $f1, $29, $5c, $77, $7f, $73, $3b, $ee, $aa, $88, $86, $a8, $c0
12569     D0 DE F0 09 
1256d     16 21 18 02 
12571     DE AC D2 1F 
12575     7F 7F 7F 32 | 	byte	$d0, $de, $f0, $09, $16, $21, $18, $02, $de, $ac, $d2, $1f, $7f, $7f, $7f, $32
12579     B2 85 86 85 
1257d     85 F7 3B 7F 
12581     7F 7F 6F 21 
12585     D8 AD 9B 8B | 	byte	$b2, $85, $86, $85, $85, $f7, $3b, $7f, $7f, $7f, $6f, $21, $d8, $ad, $9b, $8b
12589     87 90 A2 C4 
1258d     DC 05 26 32 
12591     1C EC 1C 61 
12595     7F 7F 7F F8 | 	byte	$87, $90, $a2, $c4, $dc, $05, $26, $32, $1c, $ec, $1c, $61, $7f, $7f, $7f, $f8
12599     85 86 86 85 
1259d     85 1A 6B 7F 
125a1     7F 7F 7F 2D 
125a5     CC 88 85 85 | 	byte	$85, $86, $86, $85, $85, $1a, $6b, $7f, $7f, $7f, $7f, $2d, $cc, $88, $85, $85
125a9     85 85 A5 D9 
125ad     08 3D 5E 6B 
125b1     62 43 0A EE 
125b5     ED 03 10 10 | 	byte	$85, $85, $a5, $d9, $08, $3d, $5e, $6b, $62, $43, $0a, $ee, $ed, $03, $10, $10
125b9     DC B6 97 A3 
125bd     CC 00 30 5A 
125c1     77 75 56 15 
125c5     D0 9E 92 A9 | 	byte	$dc, $b6, $97, $a3, $cc, $00, $30, $5a, $77, $75, $56, $15, $d0, $9e, $92, $a9
125c9     BE D0 DB E4 
125cd     F7 03 12 17 
125d1     16 02 DA B8 
125d5     EC 23 7E 7F | 	byte	$be, $d0, $db, $e4, $f7, $03, $12, $17, $16, $02, $da, $b8, $ec, $23, $7e, $7f
125d9     7E 1C A6 85 
125dd     85 85 AC 05 
125e1     49 7F 7F 7F 
125e5     5E 1A DC BE | 	byte	$7e, $1c, $a6, $85, $85, $85, $ac, $05, $49, $7f, $7f, $7f, $5e, $1a, $dc, $be
125e9     95 91 85 87 
125ed     A7 C3 E8 08 
125f1     25 33 20 F9 
125f5     36 6B 7F 7F | 	byte	$95, $91, $85, $87, $a7, $c3, $e8, $08, $25, $33, $20, $f9, $36, $6b, $7f, $7f
125f9     63 CE 85 86 
125fd     86 85 C6 36 
12601     7F 7F 7F 7F 
12605     6B 0B C0 8B | 	byte	$63, $ce, $85, $86, $86, $85, $c6, $36, $7f, $7f, $7f, $7f, $6b, $0b, $c0, $8b
12609     85 85 85 85 
1260d     AC DA 0E 33 
12611     54 63 61 42 
12615     06 F4 F5 15 | 	byte	$85, $85, $85, $85, $ac, $da, $0e, $33, $54, $63, $61, $42, $06, $f4, $f5, $15
12619     18 10 D5 A9 
1261d     8E 99 CE 03 
12621     39 5F 7E 76 
12625     53 11 D1 A4 | 	byte	$18, $10, $d5, $a9, $8e, $99, $ce, $03, $39, $5f, $7e, $76, $53, $11, $d1, $a4
12629     A6 A8 BA BA 
1262d     CB DA EC FC 
12631     07 14 0D 01 
12635     DB FE 32 7F | 	byte	$a6, $a8, $ba, $ba, $cb, $da, $ec, $fc, $07, $14, $0d, $01, $db, $fe, $32, $7f
12639     7F 7F 20 A3 
1263d     85 86 85 8E 
12641     06 4A 7F 7F 
12645     7F 6F 26 D9 | 	byte	$7f, $7f, $20, $a3, $85, $86, $85, $8e, $06, $4a, $7f, $7f, $7f, $6f, $26, $d9
12649     AD 8B 85 85 
1264d     85 A2 CC EF 
12651     19 3F 42 35 
12655     FA 03 2C 76 | 	byte	$ad, $8b, $85, $85, $85, $a2, $cc, $ef, $19, $3f, $42, $35, $fa, $03, $2c, $76
12659     7F 7F 10 9A 
1265d     86 86 85 99 
12661     0E 59 7F 7F 
12665     7F 71 1F CE | 	byte	$7f, $7f, $10, $9a, $86, $86, $85, $99, $0e, $59, $7f, $7f, $7f, $71, $1f, $ce
12669     9D 87 85 85 
1266d     85 B3 D7 F8 
12671     14 2C 36 38 
12675     1C EE 04 22 | 	byte	$9d, $87, $85, $85, $85, $b3, $d7, $f8, $14, $2c, $36, $38, $1c, $ee, $04, $22
12679     64 6F 5B FA 
1267d     9B 85 85 85 
12681     CF 26 5D 7F 
12685     7F 7F 47 FC | 	byte	$64, $6f, $5b, $fa, $9b, $85, $85, $85, $cf, $26, $5d, $7f, $7f, $7f, $47, $fc
12689     BD A0 8B 87 
1268d     8E A6 C7 E0 
12691     FF 18 39 4A 
12695     43 06 E8 F2 | 	byte	$bd, $a0, $8b, $87, $8e, $a6, $c7, $e0, $ff, $18, $39, $4a, $43, $06, $e8, $f2
12699     1D 48 77 3F 
1269d     F3 94 85 85 
126a1     85 E3 27 67 
126a5     7F 7F 67 34 | 	byte	$1d, $48, $77, $3f, $f3, $94, $85, $85, $85, $e3, $27, $67, $7f, $7f, $67, $34
126a9     F1 C7 B1 9C 
126ad     95 96 A5 C2 
126b1     DA F8 14 24 
126b5     3E 2F 0C 14 | 	byte	$f1, $c7, $b1, $9c, $95, $96, $a5, $c2, $da, $f8, $14, $24, $3e, $2f, $0c, $14
126b9     2D 67 7F 5F 
126bd     F6 90 85 85 
126c1     85 C5 1A 5A 
126c5     7F 7F 7F 57 | 	byte	$2d, $67, $7f, $5f, $f6, $90, $85, $85, $85, $c5, $1a, $5a, $7f, $7f, $7f, $57
126c9     17 D9 B6 8F 
126cd     85 85 85 A6 
126d1     DB 13 48 6F 
126d5     71 61 1A C4 | 	byte	$17, $d9, $b6, $8f, $85, $85, $85, $a6, $db, $13, $48, $6f, $71, $61, $1a, $c4
126d9     A8 B4 F8 39 
126dd     65 45 08 CB 
126e1     AB 9E B5 E1 
126e5     0A 39 59 5F | 	byte	$a8, $b4, $f8, $39, $65, $45, $08, $cb, $ab, $9e, $b5, $e1, $0a, $39, $59, $5f
126e9     4C 27 00 F1 
126ed     DD C8 AD A4 
126f1     9F B1 B5 C9 
126f5     DE 02 0D F8 | 	byte	$4c, $27, $00, $f1, $dd, $c8, $ad, $a4, $9f, $b1, $b5, $c9, $de, $02, $0d, $f8
126f9     41 7F 7F 7F 
126fd     7F EC 85 86 
12701     86 86 85 FE 
12705     5B 7F 7F 7F | 	byte	$41, $7f, $7f, $7f, $7f, $ec, $85, $86, $86, $86, $85, $fe, $5b, $7f, $7f, $7f
12709     7F 4D E0 A2 
1270d     85 85 86 85 
12711     85 C2 00 35 
12715     62 6E 7B 53 | 	byte	$7f, $4d, $e0, $a2, $85, $85, $86, $85, $85, $c2, $00, $35, $62, $6e, $7b, $53
12719     2E 3B 34 3D 
1271d     0C D1 85 85 
12721     85 85 E0 3D 
12725     7B 7F 7F 7F | 	byte	$2e, $3b, $34, $3d, $0c, $d1, $85, $85, $85, $85, $e0, $3d, $7b, $7f, $7f, $7f
12729     56 FE AC 85 
1272d     85 85 85 A5 
12731     D7 01 15 27 
12735     2E 35 16 F1 | 	byte	$56, $fe, $ac, $85, $85, $85, $85, $a5, $d7, $01, $15, $27, $2e, $35, $16, $f1
12739     BE E7 23 6E 
1273d     76 73 0D B8 
12741     85 85 85 C2 
12745     15 50 7F 7F | 	byte	$be, $e7, $23, $6e, $76, $73, $0d, $b8, $85, $85, $85, $c2, $15, $50, $7f, $7f
12749     7F 57 16 D4 
1274d     BE A2 9A 89 
12751     9F B0 D1 DA 
12755     FD 1A 22 0A | 	byte	$7f, $57, $16, $d4, $be, $a2, $9a, $89, $9f, $b0, $d1, $da, $fd, $1a, $22, $0a
12759     DE 2A 7F 7F 
1275d     7F 7D D9 85 
12761     86 86 85 85 
12765     2A 7F 7F 7F | 	byte	$de, $2a, $7f, $7f, $7f, $7d, $d9, $85, $86, $86, $85, $85, $2a, $7f, $7f, $7f
12769     7F 7F 2B CA 
1276d     93 85 85 85 
12771     85 85 D7 0F 
12775     3A 67 76 71 | 	byte	$7f, $7f, $2b, $ca, $93, $85, $85, $85, $85, $85, $d7, $0f, $3a, $67, $76, $71
12779     42 06 F2 EF 
1277d     0C 08 00 D1 
12781     B8 9D A3 C7 
12785     01 45 6B 7E | 	byte	$42, $06, $f2, $ef, $0c, $08, $00, $d1, $b8, $9d, $a3, $c7, $01, $45, $6b, $7e
12789     6B 48 0C D4 
1278d     A5 9E AF BE 
12791     CF DD EE FC 
12795     00 FF 02 03 | 	byte	$6b, $48, $0c, $d4, $a5, $9e, $af, $be, $cf, $dd, $ee, $fc, $00, $ff, $02, $03
12799     F1 D4 BE 19 
1279d     5E 7F 7F 71 
127a1     0C 99 85 86 
127a5     85 B7 18 56 | 	byte	$f1, $d4, $be, $19, $5e, $7f, $7f, $71, $0c, $99, $85, $86, $85, $b7, $18, $56
127a9     7F 7F 7F 6E 
127ad     28 ED CA 8F 
127b1     85 85 85 97 
127b5     C6 FB 21 44 | 	byte	$7f, $7f, $7f, $6e, $28, $ed, $ca, $8f, $85, $85, $85, $97, $c6, $fb, $21, $44
127b9     47 25 EA 22 
127bd     52 7F 7F 7B 
127c1     FC 86 86 86 
127c5     85 B8 20 6F | 	byte	$47, $25, $ea, $22, $52, $7f, $7f, $7b, $fc, $86, $86, $86, $85, $b8, $20, $6f
127c9     7F 7F 7F 7F 
127cd     31 E3 A6 85 
127d1     85 85 85 85 
127d5     D0 12 47 6B | 	byte	$7f, $7f, $7f, $7f, $31, $e3, $a6, $85, $85, $85, $85, $85, $d0, $12, $47, $6b
127d9     73 67 45 FC 
127dd     ED E8 0F 1C 
127e1     22 E4 BA 92 
127e5     94 BF FA 31 | 	byte	$73, $67, $45, $fc, $ed, $e8, $0f, $1c, $22, $e4, $ba, $92, $94, $bf, $fa, $31
127e9     59 6F 71 57 
127ed     26 EA B9 B5 
127f1     AE B3 AF C2 
127f5     D5 E8 F8 09 | 	byte	$59, $6f, $71, $57, $26, $ea, $b9, $b5, $ae, $b3, $af, $c2, $d5, $e8, $f8, $09
127f9     1A 1D 0D E4 
127fd     DE 25 62 7F 
12801     7F 40 F3 87 
12805     85 86 85 D7 | 	byte	$1a, $1d, $0d, $e4, $de, $25, $62, $7f, $7f, $40, $f3, $87, $85, $86, $85, $d7
12809     2C 6C 7F 7F 
1280d     7F 61 16 DE 
12811     AF 8A 85 85 
12815     85 B3 D1 06 | 	byte	$2c, $6c, $7f, $7f, $7f, $61, $16, $de, $af, $8a, $85, $85, $85, $b3, $d1, $06
12819     2C 4F 4C 16 
1281d     F4 23 63 7F 
12821     7F 36 E2 86 
12825     86 86 85 AD | 	byte	$2c, $4f, $4c, $16, $f4, $23, $63, $7f, $7f, $36, $e2, $86, $86, $86, $85, $ad
12829     23 7F 7F 7F 
1282d     7F 6E 2A E8 
12831     A9 85 85 85 
12835     85 A7 D5 0E | 	byte	$23, $7f, $7f, $7f, $7f, $6e, $2a, $e8, $a9, $85, $85, $85, $85, $a7, $d5, $0e
12839     49 6B 7A 5C 
1283d     1F DE E6 01 
12841     2E 42 20 F5 
12845     BA 95 85 9F | 	byte	$49, $6b, $7a, $5c, $1f, $de, $e6, $01, $2e, $42, $20, $f5, $ba, $95, $85, $9f
12849     D5 24 5C 7F 
1284d     7F 63 36 06 
12851     DE C0 9D 87 
12855     85 95 BF DC | 	byte	$d5, $24, $5c, $7f, $7f, $63, $36, $06, $de, $c0, $9d, $87, $85, $95, $bf, $dc
12859     03 23 44 4F 
1285d     38 04 F0 0F 
12861     42 5E 5E 1B 
12865     D2 88 85 85 | 	byte	$03, $23, $44, $4f, $38, $04, $f0, $0f, $42, $5e, $5e, $1b, $d2, $88, $85, $85
12869     85 F8 48 7C 
1286d     7F 7F 65 22 
12871     DD A4 95 8E 
12875     96 CB F6 1B | 	byte	$85, $f8, $48, $7c, $7f, $7f, $65, $22, $dd, $a4, $95, $8e, $96, $cb, $f6, $1b
12879     08 02 08 11 
1287d     09 F0 BC C4 
12881     F6 40 7F 7F 
12885     7D 13 AB 85 | 	byte	$08, $02, $08, $11, $09, $f0, $bc, $c4, $f6, $40, $7f, $7f, $7d, $13, $ab, $85
12889     85 85 85 E8 
1288d     34 6D 7F 7F 
12891     77 55 26 FC 
12895     B8 89 85 85 | 	byte	$85, $85, $85, $e8, $34, $6d, $7f, $7f, $77, $55, $26, $fc, $b8, $89, $85, $85
12899     85 9B CA F2 
1289d     1E 34 34 0E 
128a1     6A 7F 7F 7F 
128a5     73 A1 86 87 | 	byte	$85, $9b, $ca, $f2, $1e, $34, $34, $0e, $6a, $7f, $7f, $7f, $73, $a1, $86, $87
128a9     86 85 85 0D 
128ad     6F 7F 7F 7F 
128b1     7F 57 FB 8A 
128b5     86 86 86 86 | 	byte	$86, $85, $85, $0d, $6f, $7f, $7f, $7f, $7f, $57, $fb, $8a, $86, $86, $86, $86
128b9     85 D1 21 67 
128bd     7F 7F 7F 7F 
128c1     2B 06 F4 EF 
128c5     CC A8 85 85 | 	byte	$85, $d1, $21, $67, $7f, $7f, $7f, $7f, $2b, $06, $f4, $ef, $cc, $a8, $85, $85
128c9     85 BD 0E 48 
128cd     75 7F 7F 7A 
128d1     4F FB A0 85 
128d5     85 85 96 AE | 	byte	$85, $bd, $0e, $48, $75, $7f, $7f, $7a, $4f, $fb, $a0, $85, $85, $85, $96, $ae
128d9     E2 0E 30 3B 
128dd     44 38 17 E6 
128e1     BD AE E9 14 
128e5     60 7D 57 FF | 	byte	$e2, $0e, $30, $3b, $44, $38, $17, $e6, $bd, $ae, $e9, $14, $60, $7d, $57, $ff
128e9     A7 85 85 B5 
128ed     DE 0D 3C 67 
128f1     72 5A 30 FF 
128f5     D7 D6 B7 AE | 	byte	$a7, $85, $85, $b5, $de, $0d, $3c, $67, $72, $5a, $30, $ff, $d7, $d6, $b7, $ae
128f9     9A A7 B6 CD 
128fd     E3 FA 10 01 
12901     DD EC 62 7F 
12905     7F 7F 47 AE | 	byte	$9a, $a7, $b6, $cd, $e3, $fa, $10, $01, $dd, $ec, $62, $7f, $7f, $7f, $47, $ae
12909     86 86 86 85 
1290d     D3 3C 7F 7F 
12911     7F 7F 7B 13 
12915     C1 8B 85 86 | 	byte	$86, $86, $86, $85, $d3, $3c, $7f, $7f, $7f, $7f, $7b, $13, $c1, $8b, $85, $86
12919     85 85 B5 E2 
1291d     25 55 6B 69 
12921     56 2C F5 E0 
12925     F1 18 27 18 | 	byte	$85, $85, $b5, $e2, $25, $55, $6b, $69, $56, $2c, $f5, $e0, $f1, $18, $27, $18
12929     E4 AC 91 9C 
1292d     CF 0C 39 52 
12931     62 64 4E 1C 
12935     E4 B7 B4 A5 | 	byte	$e4, $ac, $91, $9c, $cf, $0c, $39, $52, $62, $64, $4e, $1c, $e4, $b7, $b4, $a5
12939     A8 A6 B7 D2 
1293d     EE 0D 29 3C 
12941     3A 2D 05 D6 
12945     D9 E8 21 3B | 	byte	$a8, $a6, $b7, $d2, $ee, $0d, $29, $3c, $3a, $2d, $05, $d6, $d9, $e8, $21, $3b
12949     54 1E E1 A8 
1294d     95 A7 D3 F9 
12951     22 4E 5E 5E 
12955     3B 0A DE CF | 	byte	$54, $1e, $e1, $a8, $95, $a7, $d3, $f9, $22, $4e, $5e, $5e, $3b, $0a, $de, $cf
12959     D2 CA BE BE 
1295d     BC CC CE E2 
12961     F2 01 FE DF 
12965     F4 55 7F 7F | 	byte	$d2, $ca, $be, $be, $bc, $cc, $ce, $e2, $f2, $01, $fe, $df, $f4, $55, $7f, $7f
12969     7F 4F BC 86 
1296d     86 86 85 D6 
12971     2E 7C 7F 7F 
12975     7F 6F 20 D4 | 	byte	$7f, $4f, $bc, $86, $86, $86, $85, $d6, $2e, $7c, $7f, $7f, $7f, $6f, $20, $d4
12979     96 85 85 85 
1297d     85 AF E1 1E 
12981     4B 67 6A 63 
12985     36 EF E6 DD | 	byte	$96, $85, $85, $85, $85, $af, $e1, $1e, $4b, $67, $6a, $63, $36, $ef, $e6, $dd
12989     11 27 24 EC 
1298d     BB 96 9E CD 
12991     F6 28 48 63 
12995     5F 4D 19 E8 | 	byte	$11, $27, $24, $ec, $bb, $96, $9e, $cd, $f6, $28, $48, $63, $5f, $4d, $19, $e8
12999     C9 C1 B2 AE 
1299d     A7 B9 D8 F9 
129a1     1A 1E 1A 09 
129a5     F9 D4 B4 EF | 	byte	$c9, $c1, $b2, $ae, $a7, $b9, $d8, $f9, $1a, $1e, $1a, $09, $f9, $d4, $b4, $ef
129a9     21 7F 7F 7F 
129ad     27 B3 85 85 
129b1     85 9D EA 20 
129b5     65 7F 7F 6B | 	byte	$21, $7f, $7f, $7f, $27, $b3, $85, $85, $85, $9d, $ea, $20, $65, $7f, $7f, $6b
129b9     41 0C E9 BF 
129bd     94 85 85 85 
129c1     9D D2 01 39 
129c5     52 5A 2C 1D | 	byte	$41, $0c, $e9, $bf, $94, $85, $85, $85, $9d, $d2, $01, $39, $52, $5a, $2c, $1d
129c9     34 5D 7B 73 
129cd     11 AD 85 86 
129d1     85 85 E9 34 
129d5     73 7F 7F 7F | 	byte	$34, $5d, $7b, $73, $11, $ad, $85, $86, $85, $85, $e9, $34, $73, $7f, $7f, $7f
129d9     57 16 DF B2 
129dd     87 85 85 85 
129e1     A9 DE 14 2D 
129e5     3A 41 37 0C | 	byte	$57, $16, $df, $b2, $87, $85, $85, $85, $a9, $de, $14, $2d, $3a, $41, $37, $0c
129e9     08 3E 6E 7F 
129ed     77 01 8C 85 
129f1     86 85 B2 FD 
129f5     48 7F 7F 7F | 	byte	$08, $3e, $6e, $7f, $77, $01, $8c, $85, $86, $85, $b2, $fd, $48, $7f, $7f, $7f
129f9     7F 47 FA BF 
129fd     88 85 85 85 
12a01     85 CC 04 3F 
12a05     59 67 5E 2C | 	byte	$7f, $47, $fa, $bf, $88, $85, $85, $85, $85, $cc, $04, $3f, $59, $67, $5e, $2c
12a09     D7 B7 F3 34 
12a0d     6F 79 1E AD 
12a11     85 85 85 C0 
12a15     F2 28 5F 7F | 	byte	$d7, $b7, $f3, $34, $6f, $79, $1e, $ad, $85, $85, $85, $c0, $f2, $28, $5f, $7f
12a19     7F 75 38 F7 
12a1d     D7 A6 89 85 
12a21     85 85 BB DA 
12a25     FC 11 2B 3C | 	byte	$7f, $75, $38, $f7, $d7, $a6, $89, $85, $85, $85, $bb, $da, $fc, $11, $2b, $3c
12a29     16 24 7F 7F 
12a2d     7F 7D D1 85 
12a31     86 86 85 BA 
12a35     09 56 7F 7F | 	byte	$16, $24, $7f, $7f, $7f, $7d, $d1, $85, $86, $86, $85, $ba, $09, $56, $7f, $7f
12a39     7F 7F 24 C7 
12a3d     90 85 85 85 
12a41     85 85 DD 1A 
12a45     67 7F 7D 61 | 	byte	$7f, $7f, $24, $c7, $90, $85, $85, $85, $85, $85, $dd, $1a, $67, $7f, $7d, $61
12a49     32 E1 95 B6 
12a4d     D7 26 3B 24 
12a51     E9 BC B4 BD 
12a55     DC FC 19 32 | 	byte	$32, $e1, $95, $b6, $d7, $26, $3b, $24, $e9, $bc, $b4, $bd, $dc, $fc, $19, $32
12a59     57 63 43 10 
12a5d     D0 AC B2 D1 
12a61     D6 DC DC D8 
12a65     DE E2 DF DF | 	byte	$57, $63, $43, $10, $d0, $ac, $b2, $d1, $d6, $dc, $dc, $d8, $de, $e2, $df, $df
12a69     DF DB C2 F8 
12a6d     6B 7F 7F 7F 
12a71     27 8B 86 86 
12a75     86 85 DE 36 | 	byte	$df, $db, $c2, $f8, $6b, $7f, $7f, $7f, $27, $8b, $86, $86, $86, $85, $de, $36
12a79     7F 7F 7F 7F 
12a7d     65 10 CC 9B 
12a81     85 85 85 85 
12a85     9F DD 1E 3A | 	byte	$7f, $7f, $7f, $7f, $65, $10, $cc, $9b, $85, $85, $85, $85, $9f, $dd, $1e, $3a
12a89     49 5C 51 18 
12a8d     F2 23 42 7A 
12a91     63 F2 87 86 
12a95     86 85 DB 25 | 	byte	$49, $5c, $51, $18, $f2, $23, $42, $7a, $63, $f2, $87, $86, $86, $85, $db, $25
12a99     5F 7F 7F 7F 
12a9d     5D 1B D8 B4 
12aa1     89 85 85 85 
12aa5     85 D7 16 4C | 	byte	$5f, $7f, $7f, $7f, $5d, $1b, $d8, $b4, $89, $85, $85, $85, $85, $d7, $16, $4c
12aa9     6C 7B 79 55 
12aad     12 C4 A9 A1 
12ab1     CB EE 04 FB 
12ab5     EC EE F9 0A | 	byte	$6c, $7b, $79, $55, $12, $c4, $a9, $a1, $cb, $ee, $04, $fb, $ec, $ee, $f9, $0a
12ab9     0D 18 1A 20 
12abd     20 12 FB DB 
12ac1     C5 C1 E7 F4 
12ac5     03 F1 E7 DB | 	byte	$0d, $18, $1a, $20, $20, $12, $fb, $db, $c5, $c1, $e7, $f4, $03, $f1, $e7, $db
12ac9     D4 CC C9 D1 
12acd     D1 D4 DD 42 
12ad1     7F 7F 7F 7F 
12ad5     E8 85 86 86 | 	byte	$d4, $cc, $c9, $d1, $d1, $d4, $dd, $42, $7f, $7f, $7f, $7f, $e8, $85, $86, $86
12ad9     85 85 07 54 
12add     7F 7F 7F 7F 
12ae1     43 FD CB 94 
12ae5     85 85 85 85 | 	byte	$85, $85, $07, $54, $7f, $7f, $7f, $7f, $43, $fd, $cb, $94, $85, $85, $85, $85
12ae9     B3 E9 1E 3E 
12aed     57 61 4A 0E 
12af1     0C 34 5D 75 
12af5     49 BE 85 86 | 	byte	$b3, $e9, $1e, $3e, $57, $61, $4a, $0e, $0c, $34, $5d, $75, $49, $be, $85, $86
12af9     85 85 F3 36 
12afd     71 7F 7F 7F 
12b01     4F 14 E0 B8 
12b05     88 85 85 85 | 	byte	$85, $85, $f3, $36, $71, $7f, $7f, $7f, $4f, $14, $e0, $b8, $88, $85, $85, $85
12b09     85 DC 10 3E 
12b0d     5A 6B 73 5F 
12b11     2B EF D6 C8 
12b15     D9 E6 D5 CC | 	byte	$85, $dc, $10, $3e, $5a, $6b, $73, $5f, $2b, $ef, $d6, $c8, $d9, $e6, $d5, $cc
12b19     BF D4 F6 10 
12b1d     28 38 3A 3E 
12b21     34 16 F0 C4 
12b25     AA BB D0 DF | 	byte	$bf, $d4, $f6, $10, $28, $38, $3a, $3e, $34, $16, $f0, $c4, $aa, $bb, $d0, $df
12b29     E0 DE DD E7 
12b2d     EF F6 F8 FD 
12b31     F3 DD CF 12 
12b35     52 7F 7F 7C | 	byte	$e0, $de, $dd, $e7, $ef, $f6, $f8, $fd, $f3, $dd, $cf, $12, $52, $7f, $7f, $7c
12b39     03 87 86 86 
12b3d     85 B1 0E 46 
12b41     7E 7F 7F 6A 
12b45     36 06 DF A4 | 	byte	$03, $87, $86, $86, $85, $b1, $0e, $46, $7e, $7f, $7f, $6a, $36, $06, $df, $a4
12b49     85 85 85 85 
12b4d     B3 F4 20 4A 
12b51     59 53 13 FC 
12b55     1B 63 7F 7F | 	byte	$85, $85, $85, $85, $b3, $f4, $20, $4a, $59, $53, $13, $fc, $1b, $63, $7f, $7f
12b59     21 B8 85 86 
12b5d     86 85 E7 37 
12b61     7F 7F 7F 7F 
12b65     61 24 EA A5 | 	byte	$21, $b8, $85, $86, $86, $85, $e7, $37, $7f, $7f, $7f, $7f, $61, $24, $ea, $a5
12b69     85 86 86 85 
12b6d     85 E7 24 54 
12b71     6D 7B 63 2C 
12b75     E4 E5 F3 2C | 	byte	$85, $86, $86, $85, $85, $e7, $24, $54, $6d, $7b, $63, $2c, $e4, $e5, $f3, $2c
12b79     45 27 DA 97 
12b7d     85 85 B7 ED 
12b81     24 55 76 7D 
12b85     6D 3E 08 DD | 	byte	$45, $27, $da, $97, $85, $85, $b7, $ed, $24, $55, $76, $7d, $6d, $3e, $08, $dd
12b89     B5 8B 85 85 
12b8d     85 B6 F2 22 
12b91     3B 4B 4E 3F 
12b95     12 DF F1 0F | 	byte	$b5, $8b, $85, $85, $85, $b6, $f2, $22, $3b, $4b, $4e, $3f, $12, $df, $f1, $0f
12b99     47 4E 36 DA 
12b9d     93 85 85 B4 
12ba1     EB 1E 4C 73 
12ba5     7E 6D 3C 08 | 	byte	$47, $4e, $36, $da, $93, $85, $85, $b4, $eb, $1e, $4c, $73, $7e, $6d, $3c, $08
12ba9     DF C5 9E 87 
12bad     85 85 A7 D5 
12bb1     FE 19 29 2C 
12bb5     1A EA 04 63 | 	byte	$df, $c5, $9e, $87, $85, $85, $a7, $d5, $fe, $19, $29, $2c, $1a, $ea, $04, $63
12bb9     7F 7F 7F 02 
12bbd     85 86 86 85 
12bc1     85 FD 4F 7F 
12bc5     7F 7F 7F 6A | 	byte	$7f, $7f, $7f, $02, $85, $86, $86, $85, $85, $fd, $4f, $7f, $7f, $7f, $7f, $6a
12bc9     03 BC 85 86 
12bcd     86 86 85 B1 
12bd1     FC 41 64 6F 
12bd5     79 57 07 16 | 	byte	$03, $bc, $85, $86, $86, $86, $85, $b1, $fc, $41, $64, $6f, $79, $57, $07, $16
12bd9     3F 75 54 19 
12bdd     89 86 86 85 
12be1     BD 1F 5B 7F 
12be5     7F 7F 7F 43 | 	byte	$3f, $75, $54, $19, $89, $86, $86, $85, $bd, $1f, $5b, $7f, $7f, $7f, $7f, $43
12be9     E4 B6 85 85 
12bed     86 85 85 B4 
12bf1     FB 35 66 67 
12bf5     61 40 10 F8 | 	byte	$e4, $b6, $85, $85, $86, $85, $85, $b4, $fb, $35, $66, $67, $61, $40, $10, $f8
12bf9     18 2D 3E 17 
12bfd     C9 85 85 85 
12c01     B7 08 42 67 
12c05     7F 7F 73 37 | 	byte	$18, $2d, $3e, $17, $c9, $85, $85, $85, $b7, $08, $42, $67, $7f, $7f, $73, $37
12c09     ED AD A1 94 
12c0d     86 85 8C B0 
12c11     D9 FD 23 3B 
12c15     3A 33 22 0A | 	byte	$ed, $ad, $a1, $94, $86, $85, $8c, $b0, $d9, $fd, $23, $3b, $3a, $33, $22, $0a
12c19     08 27 43 4E 
12c1d     27 D1 87 85 
12c21     85 B9 F7 2C 
12c25     5C 7A 79 5F | 	byte	$08, $27, $43, $4e, $27, $d1, $87, $85, $85, $b9, $f7, $2c, $5c, $7a, $79, $5f
12c29     29 F0 BC 9A 
12c2d     97 AF B1 BD 
12c31     D3 E8 00 10 
12c35     1C 1D 18 05 | 	byte	$29, $f0, $bc, $9a, $97, $af, $b1, $bd, $d3, $e8, $00, $10, $1c, $1d, $18, $05
12c39     DA A1 B8 00 
12c3d     5A 7F 7F 63 
12c41     E8 87 85 85 
12c45     85 CE 0C 54 | 	byte	$da, $a1, $b8, $00, $5a, $7f, $7f, $63, $e8, $87, $85, $85, $85, $ce, $0c, $54
12c49     79 00 00 00 
12c4d     00 00 00 00 
12c51     00 F4 F5 F5 
12c55     F5 F6 F7 F6 | 	byte	$79, $00, $00, $00, $00, $00, $00, $00, $00, $f4, $f5, $f5, $f5, $f6, $f7, $f6
12c59     FB 0F 2F 5F 
12c5d     7F 7F 7F 7F 
12c61     7F 7F 7F 7F 
12c65     7F 7F 7F 7F | 	byte	$fb, $0f, $2f, $5f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12c69     7D 72 65 58 
12c6d     4D 45 40 42 
12c71     4F 65 7B 7F 
12c75     7F 7F 7F 78 | 	byte	$7d, $72, $65, $58, $4d, $45, $40, $42, $4f, $65, $7b, $7f, $7f, $7f, $7f, $78
12c79     6E 60 50 40 
12c7d     35 2D 28 25 
12c81     23 21 1F 18 
12c85     10 09 04 00 | 	byte	$6e, $60, $50, $40, $35, $2d, $28, $25, $23, $21, $1f, $18, $10, $09, $04, $00
12c89     F9 EC DE D2 
12c8d     CE C2 C0 C0 
12c91     C0 C0 BF BB 
12c95     B3 AE AB AA | 	byte	$f9, $ec, $de, $d2, $ce, $c2, $c0, $c0, $c0, $c0, $bf, $bb, $b3, $ae, $ab, $aa
12c99     A5 9A 91 8B 
12c9d     88 89 8B 8D 
12ca1     8F 91 92 8F 
12ca5     89 87 87 88 | 	byte	$a5, $9a, $91, $8b, $88, $89, $8b, $8d, $8f, $91, $92, $8f, $89, $87, $87, $88
12ca9     81 80 80 80 
12cad     80 80 80 80 
12cb1     80 80 80 80 
12cb5     80 80 80 80 | 	byte	$81, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
12cb9     80 80 80 80 
      ...             
12cd1     80 80 80 80 
12cd5     80 80 80 80 | 	byte	$80[32]
12cd9     D0 3F 7F 7F 
12cdd     7F 7F 7F 7F 
12ce1     7F 7F 7F 7F 
12ce5     7F 7F 7F 7F | 	byte	$d0, $3f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12ce9     7F 7F 76 68 
12ced     5B 50 49 44 
12cf1     3E 38 32 28 
12cf5     18 0F 09 01 | 	byte	$7f, $7f, $76, $68, $5b, $50, $49, $44, $3e, $38, $32, $28, $18, $0f, $09, $01
12cf9     EE DC D3 CD 
12cfd     C2 BE BB B9 
12d01     B8 B6 B4 AC 
12d05     A2 9C 9A 95 | 	byte	$ee, $dc, $d3, $cd, $c2, $be, $bb, $b9, $b8, $b6, $b4, $ac, $a2, $9c, $9a, $95
12d09     84 80 80 80 
12d0d     80 80 80 80 
12d11     80 80 80 80 
12d15     80 80 80 80 | 	byte	$84, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
12d19     80 80 80 80 
      ...             
12d51     80 80 80 80 
12d55     80 80 80    | 	byte	$80[63]
12d58     AB 1F 77 7F 
12d5c     7F 7F 7F 7F 
12d60     7F 7F 7F 7F 
12d64     7F 7F 7F 7F | 	byte	$ab, $1f, $77, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12d68     7F 7F 7F 7F 
12d6c     7F          | 	byte	$7f[5]
12d6d     79 6C 62 5C 
12d71     57 51 4C 44 
12d75     38 2B 22 14 
12d79     02 F4 ED E8 | 	byte	$79, $6c, $62, $5c, $57, $51, $4c, $44, $38, $2b, $22, $14, $02, $f4, $ed, $e8
12d7d     E1 D9 D4 D1 
12d81     D0 CF CE CD 
12d85     C2 B9 B3 A8 
12d89     98 8E 8A 8A | 	byte	$e1, $d9, $d4, $d1, $d0, $cf, $ce, $cd, $c2, $b9, $b3, $a8, $98, $8e, $8a, $8a
12d8d     85 80 80 80 
12d91     80 80 81 82 
12d95     80 80 80 80 
12d99     80 80 80 80 | 	byte	$85, $80, $80, $80, $80, $80, $81, $82, $80, $80, $80, $80, $80, $80, $80, $80
12d9d     80 80 80 80 
      ...             
12dd1     80 80 80 80 
12dd5     80 80 80    | 	byte	$80[59]
12dd8     B7 0F 57 7F 
12ddc     7F 7F 7F 7F 
12de0     7F 7F 7F 7F 
12de4     7F 7F 7F 7F | 	byte	$b7, $0f, $57, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12de8     7F 7F 7F 7F 
12dec     7F 7F 7F    | 	byte	$7f[7]
12def     76 6C 64 5E 
12df3     58 52 4C 41 
12df7     34 24 11 02 
12dfb     F9 F4 F0 EA | 	byte	$76, $6c, $64, $5e, $58, $52, $4c, $41, $34, $24, $11, $02, $f9, $f4, $f0, $ea
12dff     E4 DF DB D8 
12e03     D6 D5 D2 CD 
12e07     C2 B6 A6 9B 
12e0b     94 92 91 8E | 	byte	$e4, $df, $db, $d8, $d6, $d5, $d2, $cd, $c2, $b6, $a6, $9b, $94, $92, $91, $8e
12e0f     8A 88 87 86 
12e13     87 89 88 85 
12e17     80 80 80 80 
12e1b     80 80 80 80 | 	byte	$8a, $88, $87, $86, $87, $89, $88, $85, $80, $80, $80, $80, $80, $80, $80, $80
12e1f     80 80 80 80 
      ...             
12e4f     80 80 80 80 
12e53     80 80 80 80 | 	byte	$80[56]
12e57     87 AF DF 27 
12e5b     57 77 7F 7F 
12e5f     7F 7F 7F 7F 
12e63     7F 7F 7F 7F | 	byte	$87, $af, $df, $27, $57, $77, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12e67     7F 7F 7F 7F 
12e6b     7F 7F 7F 7F 
12e6f     7F          | 	byte	$7f[9]
12e70     78 6E 66 5F 
12e74     58 52 4A 40 
12e78     30 20 10 04 
12e7c     FB F5 F0 EA | 	byte	$78, $6e, $66, $5f, $58, $52, $4a, $40, $30, $20, $10, $04, $fb, $f5, $f0, $ea
12e80     E5 E0 DD DA 
12e84     D7 D5 D2 CD 
12e88     C0 B2 A6 9C 
12e8c     97 93 91 8E | 	byte	$e5, $e0, $dd, $da, $d7, $d5, $d2, $cd, $c0, $b2, $a6, $9c, $97, $93, $91, $8e
12e90     8C 8A 89 88 
12e94     88 89 88 85 
12e98     80 80 80 80 
12e9c     80 80 80 80 | 	byte	$8c, $8a, $89, $88, $88, $89, $88, $85, $80, $80, $80, $80, $80, $80, $80, $80
12ea0     80 80 80 80 
      ...             
12ed0     80 80 80 80 
12ed4     80 80 80    | 	byte	$80[55]
12ed7     8A AB CF 0B 
12edb     37 5B 6F 7F 
12edf     7F 7F 7F 7F 
12ee3     7F 7F 7F 7F | 	byte	$8a, $ab, $cf, $0b, $37, $5b, $6f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12ee7     7F 7F 7F 7F 
12eeb     7F 7F 7F 7F 
12eef     7F          | 	byte	$7f[9]
12ef0     7A 70 68 61 
12ef4     5A 54 4E 44 
12ef8     38 28 19 0C 
12efc     00 F8 F2 EE | 	byte	$7a, $70, $68, $61, $5a, $54, $4e, $44, $38, $28, $19, $0c, $00, $f8, $f2, $ee
12f00     E8 E3 DF DB 
12f04     D8 D5 D3 CE 
12f08     C3 B8 AC A2 
12f0c     9B 96 92 90 | 	byte	$e8, $e3, $df, $db, $d8, $d5, $d3, $ce, $c3, $b8, $ac, $a2, $9b, $96, $92, $90
12f10     8E 8C 8A 89 
12f14     88 88 88 85 
12f18     80 80 80 80 
12f1c     80 80 80 80 | 	byte	$8e, $8c, $8a, $89, $88, $88, $88, $85, $80, $80, $80, $80, $80, $80, $80, $80
12f20     80 80 80 80 
      ...             
12f50     80 80 80 80 
12f54     80 80 80    | 	byte	$80[55]
12f57     8F B7 D3 0F 
12f5b     37 55 69 76 
12f5f     7F 7F 7F 7F 
12f63     7F 7F 7F 7F | 	byte	$8f, $b7, $d3, $0f, $37, $55, $69, $76, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
12f67     7F 7F 7F 7F 
12f6b     7F 7F 7F 7F 
12f6f     7F          | 	byte	$7f[9]
12f70     7A 70 69 60 
12f74     59 52 4C 42 
12f78     36 28 1A 0D 
12f7c     02 F9 F3 EE | 	byte	$7a, $70, $69, $60, $59, $52, $4c, $42, $36, $28, $1a, $0d, $02, $f9, $f3, $ee
12f80     E9 E4 E0 DD 
12f84     D9 D6 D2 CE 
12f88     C2 B8 AD A4 
12f8c     9D 97 93 91 | 	byte	$e9, $e4, $e0, $dd, $d9, $d6, $d2, $ce, $c2, $b8, $ad, $a4, $9d, $97, $93, $91
12f90     8F 8E 8C 8B 
12f94     8A 8A 89 85 
12f98     80 80 80 80 
12f9c     80 80 80 80 | 	byte	$8f, $8e, $8c, $8b, $8a, $8a, $89, $85, $80, $80, $80, $80, $80, $80, $80, $80
12fa0     80 80 80 80 
      ...             
12fd0     80 80 80 80 
12fd4     80 80       | 	byte	$80[54]
12fd6     83 9D BF EB 
12fda     0F 33 4B 5D 
12fde     65 6E 7E 7F 
12fe2     7F 7F 7F 7F | 	byte	$83, $9d, $bf, $eb, $0f, $33, $4b, $5d, $65, $6e, $7e, $7f, $7f, $7f, $7f, $7f
12fe6     7F 7F 7F 7F 
12fea     7F 7F 7F 7F 
12fee     7F          | 	byte	$7f[9]
12fef     77 6C 62 5A 
12ff3     51 4A 44 3E 
12ff7     34 2A 1E 12 
12ffb     06 FD F4 EE | 	byte	$77, $6c, $62, $5a, $51, $4a, $44, $3e, $34, $2a, $1e, $12, $06, $fd, $f4, $ee
12fff     E9 E4 DF DB 
13003     D7 D3 D1 CD 
13007     C6 C0 B8 AF 
1300b     A7 A0 9B 97 | 	byte	$e9, $e4, $df, $db, $d7, $d3, $d1, $cd, $c6, $c0, $b8, $af, $a7, $a0, $9b, $97
1300f     95 94 93 90 
13013     8F 8F 8E 8D 
13017     8B 88 83 80 
1301b     80 80 80 80 | 	byte	$95, $94, $93, $90, $8f, $8f, $8e, $8d, $8b, $88, $83, $80, $80, $80, $80, $80
1301f     80 80 80 80 
      ...             
1304f     80 80 80 80 
13053     80          | 	byte	$80[53]
13054     83 87 92 A5 
13058     BB CF F5 0F 
1305c     27 3B 47 52 
13060     5D 67 77 7F | 	byte	$83, $87, $92, $a5, $bb, $cf, $f5, $0f, $27, $3b, $47, $52, $5d, $67, $77, $7f
13064     7F 7F 7F 7F 
13068     7F 7F 7F 7F 
1306c     7F 7F 7F 7F | 	byte	$7f[12]
13070     75 6C 62 58 
13074     50 47 40 38 
13078     30 28 1E 16 
1307c     0E 06 00 FA | 	byte	$75, $6c, $62, $58, $50, $47, $40, $38, $30, $28, $1e, $16, $0e, $06, $00, $fa
13080     F5 F0 EC E9 
13084     E5 E2 DF DA 
13088     D5 D1 CE C5 
1308c     C0 BB B7 B4 | 	byte	$f5, $f0, $ec, $e9, $e5, $e2, $df, $da, $d5, $d1, $ce, $c5, $c0, $bb, $b7, $b4
13090     B1 AF AD AB 
13094     AA AA A8 A6 
13098     A4 A2 9F 9D 
1309c     9A 98 97 95 | 	byte	$b1, $af, $ad, $ab, $aa, $aa, $a8, $a6, $a4, $a2, $9f, $9d, $9a, $98, $97, $95
130a0     94 94 94 95 
130a4     96 97 98 98 
130a8     97 96 95 93 
130ac     92 90 90 8F | 	byte	$94, $94, $94, $95, $96, $97, $98, $98, $97, $96, $95, $93, $92, $90, $90, $8f
130b0     8F 8E 8F 8F 
130b4     90 91 92 93 
130b8     93 93 91 90 
130bc     8F 8F 8E 8E | 	byte	$8f, $8e, $8f, $8f, $90, $91, $92, $93, $93, $93, $91, $90, $8f, $8f, $8e, $8e
130c0     8F 8F 91 92 
130c4     93 95 96 97 
130c8     98 98 98 97 
130cc     97 97 96 97 | 	byte	$8f, $8f, $91, $92, $93, $95, $96, $97, $98, $98, $98, $97, $97, $97, $96, $97
130d0     97 98 99 9B 
130d4     9C 9F A5 AD 
130d8     BA C7 CF EB 
130dc     FD 0D 1D 2A | 	byte	$97, $98, $99, $9b, $9c, $9f, $a5, $ad, $ba, $c7, $cf, $eb, $fd, $0d, $1d, $2a
130e0     35 3F 4B 57 
130e4     62 6D 77 7F 
130e8     7F 7F 7F 7F 
130ec     7F 7F 7F 7F | 	byte	$35, $3f, $4b, $57, $62, $6d, $77, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
130f0     7E 77 70 68 
130f4     60 59 52 49 
130f8     41 39 31 29 
130fc     21 1A 14 0E | 	byte	$7e, $77, $70, $68, $60, $59, $52, $49, $41, $39, $31, $29, $21, $1a, $14, $0e
13100     08 03 FE FA 
13104     F6 F2 F0 EC 
13108     E8 E4 E0 DD 
1310c     D9 D5 D2 D0 | 	byte	$08, $03, $fe, $fa, $f6, $f2, $f0, $ec, $e8, $e4, $e0, $dd, $d9, $d5, $d2, $d0
13110     CE CA C7 C5 
13114     C3 C1 C0 BF 
13118     BD BC BB B8 
1311c     B7 B5 B3 B2 | 	byte	$ce, $ca, $c7, $c5, $c3, $c1, $c0, $bf, $bd, $bc, $bb, $b8, $b7, $b5, $b3, $b2
13120     B1 B0 B0 AF 
13124     AF AF AF AF 
13128     AF AE AE AE 
1312c     AD AC AB AB | 	byte	$b1, $b0, $b0, $af, $af, $af, $af, $af, $af, $ae, $ae, $ae, $ad, $ac, $ab, $ab
13130     AB AA AA AA 
13134     AB AB AB AB 
13138     AB AB AB AA 
1313c     AA AB AA A9 | 	byte	$ab, $aa, $aa, $aa, $ab, $ab, $ab, $ab, $ab, $ab, $ab, $aa, $aa, $ab, $aa, $a9
13140     AA AA AA AB 
13144     AB AC AD AD 
13148     AE AE AF AF 
1314c     AF AF AF AF | 	byte	$aa, $aa, $aa, $ab, $ab, $ac, $ad, $ad, $ae, $ae, $af, $af, $af, $af, $af, $af
13150     AF AF B1 B1 
13154     B2 B3 B6 BB 
13158     BF C6 CE D2 
1315c     DF EB F6 FF | 	byte	$af, $af, $b1, $b1, $b2, $b3, $b6, $bb, $bf, $c6, $ce, $d2, $df, $eb, $f6, $ff
13160     0A 13 1D 26 
13164     2F 37 3F 47 
13168     4F 56 5B 5F 
1316c     63 67 68 69 | 	byte	$0a, $13, $1d, $26, $2f, $37, $3f, $47, $4f, $56, $5b, $5f, $63, $67, $68, $69
13170     69 68 67 64 
13174     61 5D 59 55 
13178     50 4A 44 3F 
1317c     39 33 2C 26 | 	byte	$69, $68, $67, $64, $61, $5d, $59, $55, $50, $4a, $44, $3f, $39, $33, $2c, $26
13180     20 1B 16 10 
13184     0C 07 02 FE 
13188     FA F6 F2 EE 
1318c     EC E8 E4 E1 | 	byte	$20, $1b, $16, $10, $0c, $07, $02, $fe, $fa, $f6, $f2, $ee, $ec, $e8, $e4, $e1
13190     DF DC DA D8 
13194     D6 D4 D2 D1 
13198     CF CF CC CB 
1319c     C9 C8 C7 C6 | 	byte	$df, $dc, $da, $d8, $d6, $d4, $d2, $d1, $cf, $cf, $cc, $cb, $c9, $c8, $c7, $c6
131a0     C5 C4 C3 C3 
131a4     C2 C2 C2 C2 
131a8     C1 C1 C0 C0 
131ac     BF BF BF BF | 	byte	$c5, $c4, $c3, $c3, $c2, $c2, $c2, $c2, $c1, $c1, $c0, $c0, $bf, $bf, $bf, $bf
131b0     BF BF BE BE 
131b4     BE BE BE BE 
131b8     BE BF BE BE 
131bc     BE BE BE BE | 	byte	$bf, $bf, $be, $be, $be, $be, $be, $be, $be, $bf, $be, $be, $be, $be, $be, $be
131c0     BE BE BE BE 
131c4     BE          | 	byte	$be[5]
131c5     BF BF BF BF 
131c9     BF BF BF BF 
131cd     BF BF       | 	byte	$bf[10]
131cf     C0 C1 C1 C1 
131d3     C2 C3 C3 C5 
131d7     C7 CA CD D0 
131db     D7 DD E3 E9 | 	byte	$c0, $c1, $c1, $c1, $c2, $c3, $c3, $c5, $c7, $ca, $cd, $d0, $d7, $dd, $e3, $e9
131df     EF F7 FE 05 
131e3     0B 12 19 1F 
131e7     25 2B 2F 35 
131eb     3A 3E 41 43 | 	byte	$ef, $f7, $fe, $05, $0b, $12, $19, $1f, $25, $2b, $2f, $35, $3a, $3e, $41, $43
131ef     46 48 49 4A 
131f3     4A 49 49 48 
131f7     46 43 40 3E 
131fb     3A 37 33 2F | 	byte	$46, $48, $49, $4a, $4a, $49, $49, $48, $46, $43, $40, $3e, $3a, $37, $33, $2f
131ff     2B 27 22 1E 
13203     1A 16 11 0E 
13207     0A 07 03 FF 
1320b     FB F8 F4 F1 | 	byte	$2b, $27, $22, $1e, $1a, $16, $11, $0e, $0a, $07, $03, $ff, $fb, $f8, $f4, $f1
1320f     EF EC EA E7 
13213     E4 E2 E0 DF 
13217     DD DC DA D9 
1321b     D7 D6 D5 D4 | 	byte	$ef, $ec, $ea, $e7, $e4, $e2, $e0, $df, $dd, $dc, $da, $d9, $d7, $d6, $d5, $d4
1321f     D4 D3 D2 D2 
13223     D1 D1 D0 D0 
13227     D0 D0 CF CF 
1322b     D0 CF CE CE | 	byte	$d4, $d3, $d2, $d2, $d1, $d1, $d0, $d0, $d0, $d0, $cf, $cf, $d0, $cf, $ce, $ce
1322f     CE CE CE CE 
13233     CE CE CE    | 	byte	$ce[7]
13236     CD CE CD CD 
1323a     CD CD CE CE 
1323e     CD CD CD CD 
13242     CD CD CE CE | 	byte	$cd, $ce, $cd, $cd, $cd, $cd, $ce, $ce, $cd, $cd, $cd, $cd, $cd, $cd, $ce, $ce
13246     CF CE CE CF 
1324a     CF CF CF CF 
1324e     D0 D0 D0 D0 
13252     D0 D0 D1 D2 | 	byte	$cf, $ce, $ce, $cf, $cf, $cf, $cf, $cf, $d0, $d0, $d0, $d0, $d0, $d0, $d1, $d2
13256     D3 D5 D7 DB 
1325a     DE E2 E6 EB 
1325e     EF F5 FA FF 
13262     03 09 00 00 | 	byte	$d3, $d5, $d7, $db, $de, $e2, $e6, $eb, $ef, $f5, $fa, $ff, $03, $09, $00, $00
13266     00 00 AB 5E 
1326a     9C 4F D0 33 
1326e     D4 4D A0 61 
13272     BD 2D DC 34 | 	byte	$00, $00, $ab, $5e, $9c, $4f, $d0, $33, $d4, $4d, $a0, $61, $bd, $2d, $dc, $34
13276     C0 1A E5 38 
1327a     D5 FD 0F D3 
1327e     2A C3 37 CC 
13282     49 B0 28 F2 | 	byte	$c0, $1a, $e5, $38, $d5, $fd, $0f, $d3, $2a, $c3, $37, $cc, $49, $b0, $28, $f2
13286     E5 34 C8 3E 
1328a     DB F3 0D 30 
1328e     B2 40 D9 15 
13292     0B FE FE DF | 	byte	$e5, $34, $c8, $3e, $db, $f3, $0d, $30, $b2, $40, $d9, $15, $0b, $fe, $fe, $df
13296     1B AD 3E C4 
1329a     0B 0E FD 37 
1329e     B3 5E AD 4D 
132a2     CA 38 CB 3C | 	byte	$1b, $ad, $3e, $c4, $0b, $0e, $fd, $37, $b3, $5e, $ad, $4d, $ca, $38, $cb, $3c
132a6     DF 01 20 F8 
132aa     DD 42 D5 2F 
132ae     CB 47 B2 5D 
132b2     9C 48 C9 0D | 	byte	$df, $01, $20, $f8, $dd, $42, $d5, $2f, $cb, $47, $b2, $5d, $9c, $48, $c9, $0d
132b6     FB E5 29 D0 
132ba     36 D3 30 B0 
132be     49 C7 28 D0 
132c2     23 D5 22 F0 | 	byte	$fb, $e5, $29, $d0, $36, $d3, $30, $b0, $49, $c7, $28, $d0, $23, $d5, $22, $f0
132c6     EB 29 D8 1B 
132ca     05 DD 2C CC 
132ce     39 D3 2B D9 
132d2     41 A2 64 AB | 	byte	$eb, $29, $d8, $1b, $05, $dd, $2c, $cc, $39, $d3, $2b, $d9, $41, $a2, $64, $ab
132d6     2C FB D8 23 
132da     E0 11 F5 17 
132de     09 E1 2C E1 
132e2     0B FD EF 17 | 	byte	$2c, $fb, $d8, $23, $e0, $11, $f5, $17, $09, $e1, $2c, $e1, $0b, $fd, $ef, $17
132e6     B6 44 E3 F7 
132ea     20 D8 1B 0B 
132ee     EC 03 13 DF 
132f2     25 CB 38 BE | 	byte	$b6, $44, $e3, $f7, $20, $d8, $1b, $0b, $ec, $03, $13, $df, $25, $cb, $38, $be
132f6     40 B5 3D C5 
132fa     52 C3 29 D6 
132fe     2F C2 43 D2 
13302     1A F2 10 F0 | 	byte	$40, $b5, $3d, $c5, $52, $c3, $29, $d6, $2f, $c2, $43, $d2, $1a, $f2, $10, $f0
13306     08 0A 09 F0 
1330a     FF 23 C8 45 
1330e     BD 42 D7 2A 
13312     D1 41 DE 06 | 	byte	$08, $0a, $09, $f0, $ff, $23, $c8, $45, $bd, $42, $d7, $2a, $d1, $41, $de, $06
13316     0B F6 13 F8 
1331a     14 EB 25 DD 
1331e     23 EF 09 E1 
13322     22 DC 30 CD | 	byte	$0b, $f6, $13, $f8, $14, $eb, $25, $dd, $23, $ef, $09, $e1, $22, $dc, $30, $cd
13326     31 F7 F5 07 
1332a     1A DB 12 07 
1332e     F5 10 F3 12 
13332     F1 1F FD EC | 	byte	$31, $f7, $f5, $07, $1a, $db, $12, $07, $f5, $10, $f3, $12, $f1, $1f, $fd, $ec
13336     34 CF 2A E4 
1333a     2F CF 2E F2 
1333e     FF 06 16 F8 
13342     0E FB 07 25 | 	byte	$34, $cf, $2a, $e4, $2f, $cf, $2e, $f2, $ff, $06, $16, $f8, $0e, $fb, $07, $25
13346     D8 25 E8 12 
1334a     FA 0B E6 25 
1334e     D0 3C C4 2E 
13352     E0 1B EC 0B | 	byte	$d8, $25, $e8, $12, $fa, $0b, $e6, $25, $d0, $3c, $c4, $2e, $e0, $1b, $ec, $0b
13356     05 F9 1A D7 
1335a     20 FD 01 04 
1335e     DC 35 DF 16 
13362     E5 2C BE 3C | 	byte	$05, $f9, $1a, $d7, $20, $fd, $01, $04, $dc, $35, $df, $16, $e5, $2c, $be, $3c
13366     DF 1E EE 10 
1336a     04 06 FD 0F 
1336e     F1 0B F2 17 
13372     D8 2C F3 F5 | 	byte	$df, $1e, $ee, $10, $04, $06, $fd, $0f, $f1, $0b, $f2, $17, $d8, $2c, $f3, $f5
13376     1A DF 28 E9 
1337a     FD 16 EA 02 
1337e     08 00 FB 02 
13382     01 10 E2 20 | 	byte	$1a, $df, $28, $e9, $fd, $16, $ea, $02, $08, $00, $fb, $02, $01, $10, $e2, $20
13386     D8 36 DE 17 
1338a     F1 0D FE 04 
1338e     FC 18 E9 17 
13392     EE 09 1B E8 | 	byte	$d8, $36, $de, $17, $f1, $0d, $fe, $04, $fc, $18, $e9, $17, $ee, $09, $1b, $e8
13396     21 E0 29 F2 
1339a     23 D9 2C CC 
1339e     46 C0 35 E8 
133a2     0B 0B EB 2A | 	byte	$21, $e0, $29, $f2, $23, $d9, $2c, $cc, $46, $c0, $35, $e8, $0b, $0b, $eb, $2a
133a6     E5 17 F2 FD 
133aa     22 E3 14 09 
133ae     E6 FF 04 FC 
133b2     0B 0D D6 46 | 	byte	$e5, $17, $f2, $fd, $22, $e3, $14, $09, $e6, $ff, $04, $fc, $0b, $0d, $d6, $46
133b6     C8 1C 08 0D 
133ba     E0 46 C8 22 
133be     E2 F7 2A D8 
133c2     2F DD 27 ED | 	byte	$c8, $1c, $08, $0d, $e0, $46, $c8, $22, $e2, $f7, $2a, $d8, $2f, $dd, $27, $ed
133c6     24 C9 3B DF 
133ca     F6 25 E3 17 
133ce     E8 1F E9 07 
133d2     F3 08 FD F0 | 	byte	$24, $c9, $3b, $df, $f6, $25, $e3, $17, $e8, $1f, $e9, $07, $f3, $08, $fd, $f0
133d6     1E D4 28 E5 
133da     1F E5 11 F8 
133de     F0 2D C0 44 
133e2     C4 35 DC 2A | 	byte	$1e, $d4, $28, $e5, $1f, $e5, $11, $f8, $f0, $2d, $c0, $44, $c4, $35, $dc, $2a
133e6     D4 36 D0 2B 
133ea     DE FD 12 FB 
133ee     F3 02 F5 11 
133f2     FB E9 20 D8 | 	byte	$d4, $36, $d0, $2b, $de, $fd, $12, $fb, $f3, $02, $f5, $11, $fb, $e9, $20, $d8
133f6     34 D3 2A DC 
133fa     29 E6 10 FA 
133fe     F7 0B 13 D3 
13402     36 D1 16 FD | 	byte	$34, $d3, $2a, $dc, $29, $e6, $10, $fa, $f7, $0b, $13, $d3, $36, $d1, $16, $fd
13406     F1 16 11 C4 
1340a     4B C2 43 AF 
1340e     5A BD 20 06 
13412     E3 23 E6 07 | 	byte	$f1, $16, $11, $c4, $4b, $c2, $43, $af, $5a, $bd, $20, $06, $e3, $23, $e6, $07
13416     FA 02 FC 10 
1341a     F6 F8 1B D6 
1341e     38 CF 18 FD 
13422     02 18 D0 40 | 	byte	$fa, $02, $fc, $10, $f6, $f8, $1b, $d6, $38, $cf, $18, $fd, $02, $18, $d0, $40
13426     CC 21 F3 02 
1342a     FF 1A F0 00 
1342e     10 E8 21 EB 
13432     20 E0 29 D3 | 	byte	$cc, $21, $f3, $02, $ff, $1a, $f0, $00, $10, $e8, $21, $eb, $20, $e0, $29, $d3
13436     25 E5 0F FB 
1343a     10 E9 27 D2 
1343e     1F DD 1F F5 
13442     01 FB 1B EC | 	byte	$25, $e5, $0f, $fb, $10, $e9, $27, $d2, $1f, $dd, $1f, $f5, $01, $fb, $1b, $ec
13446     FA 1E E6 09 
1344a     FD 0B F1 0E 
1344e     F7 0D EE 1C 
13452     F1 0E 05 F5 | 	byte	$fa, $1e, $e6, $09, $fd, $0b, $f1, $0e, $f7, $0d, $ee, $1c, $f1, $0e, $05, $f5
13456     20 E3 21 E8 
1345a     08 06 01 EA 
1345e     20 F0 04 0D 
13462     F9 09 E6 2C | 	byte	$20, $e3, $21, $e8, $08, $06, $01, $ea, $20, $f0, $04, $0d, $f9, $09, $e6, $2c
13466     D7 20 EF 0D 
1346a     05 F3 07 FC 
1346e     17 D4 3B C8 
13472     14 0A F0 0A | 	byte	$d7, $20, $ef, $0d, $05, $f3, $07, $fc, $17, $d4, $3b, $c8, $14, $0a, $f0, $0a
13476     00 00 01 06 
1347a     F1 22 DC 18 
1347e     FE 04 F1 27 
13482     CA 3E D0 25 | 	byte	$00, $00, $01, $06, $f1, $22, $dc, $18, $fe, $04, $f1, $27, $ca, $3e, $d0, $25
13486     E2 27 DC 21 
1348a     E9 1C DE 2B 
1348e     E3 09 07 F2 
13492     17 F0 1C D9 | 	byte	$e2, $27, $dc, $21, $e9, $1c, $de, $2b, $e3, $09, $07, $f2, $17, $f0, $1c, $d9
13496     2D E3 11 FD 
1349a     09 F9 16 DF 
1349e     2C E0 1C FC 
134a2     06 0A F1 05 | 	byte	$2d, $e3, $11, $fd, $09, $f9, $16, $df, $2c, $e0, $1c, $fc, $06, $0a, $f1, $05
134a6     04 06 F5 18 
134aa     F6 08 FC 10 
134ae     F1 21 E3 15 
134b2     F9 00 09 FD | 	byte	$04, $06, $f5, $18, $f6, $08, $fc, $10, $f1, $21, $e3, $15, $f9, $00, $09, $fd
134b6     FF 09 ED 1A 
134ba     E8 1E E4 21 
134be     E1 0E FE F1 
134c2     14 07 E6 25 | 	byte	$ff, $09, $ed, $1a, $e8, $1e, $e4, $21, $e1, $0e, $fe, $f1, $14, $07, $e6, $25
134c6     EA 06 09 00 
134ca     FC 05 00 F2 
134ce     1D EE 18 E8 
134d2     27 DE 1A EF | 	byte	$ea, $06, $09, $00, $fc, $05, $00, $f2, $1d, $ee, $18, $e8, $27, $de, $1a, $ef
134d6     17 DC 29 E0 
134da     10 FD FA 10 
134de     EF 17 EF 12 
134e2     EF 1A D9 30 | 	byte	$17, $dc, $29, $e0, $10, $fd, $fa, $10, $ef, $17, $ef, $12, $ef, $1a, $d9, $30
134e6     DC 13 EB 2B 
134ea     C7 43 D2 1C 
134ee     EE 13 E5 17 
134f2     E9 18 F0 07 | 	byte	$dc, $13, $eb, $2b, $c7, $43, $d2, $1c, $ee, $13, $e5, $17, $e9, $18, $f0, $07
134f6     02 01 F3 13 
134fa     F8 04 0D ED 
134fe     14 ED 0A E5 
13502     27 DF 0F FB | 	byte	$02, $01, $f3, $13, $f8, $04, $0d, $ed, $14, $ed, $0a, $e5, $27, $df, $0f, $fb
13506     08 F7 1C E5 
1350a     17 F1 FA 11 
1350e     EE 17 FD F3 
13512     20 DF 24 DF | 	byte	$08, $f7, $1c, $e5, $17, $f1, $fa, $11, $ee, $17, $fd, $f3, $20, $df, $24, $df
13516     20 ED FC 17 
1351a     EE 16 E4 17 
1351e     E4 21 E9 07 
13522     06 FE FA 11 | 	byte	$20, $ed, $fc, $17, $ee, $16, $e4, $17, $e4, $21, $e9, $07, $06, $fe, $fa, $11
13526     E9 11 01 F8 
1352a     09 01 FD 0D 
1352e     07 ED 15 ED 
13532     1B E1 28 DD | 	byte	$e9, $11, $01, $f8, $09, $01, $fd, $0d, $07, $ed, $15, $ed, $1b, $e1, $28, $dd
13536     25 D5 31 DC 
1353a     1C EC 18 E9 
1353e     18 EB 12 FA 
13542     05 07 F5 10 | 	byte	$25, $d5, $31, $dc, $1c, $ec, $18, $e9, $18, $eb, $12, $fa, $05, $07, $f5, $10
13546     E9 1B F0 FB 
1354a     17 DD 2B D3 
1354e     28 E3 16 F9 
13552     FC 08 01 00 | 	byte	$e9, $1b, $f0, $fb, $17, $dd, $2b, $d3, $28, $e3, $16, $f9, $fc, $08, $01, $00
13556     F9 13 EF 0F 
1355a     F2 04 FD 02 
1355e     03 FC 0D EF 
13562     1C E4 21 E5 | 	byte	$f9, $13, $ef, $0f, $f2, $04, $fd, $02, $03, $fc, $0d, $ef, $1c, $e4, $21, $e5
13566     15 F0 17 E9 
1356a     15 F5 01 0B 
1356e     EF 13 F7 00 
13572     0A E5 24 D9 | 	byte	$15, $f0, $17, $e9, $15, $f5, $01, $0b, $ef, $13, $f7, $00, $0a, $e5, $24, $d9
13576     20 FD F6 08 
1357a     FA 0E EE 16 
1357e     EA 1C E8 1E 
13582     E4 22 DD 2B | 	byte	$20, $fd, $f6, $08, $fa, $0e, $ee, $16, $ea, $1c, $e8, $1e, $e4, $22, $dd, $2b
13586     CF 37 CB 2C 
1358a     E4 11 FB F5 
1358e     1F D1 30 DC 
13592     27 DD 22 E9 | 	byte	$cf, $37, $cb, $2c, $e4, $11, $fb, $f5, $1f, $d1, $30, $dc, $27, $dd, $22, $e9
13596     06 0F E6 1C 
1359a     E8 17 F2 04 
1359e     FE 04 FC 09 
135a2     FF F7 16 EA | 	byte	$06, $0f, $e6, $1c, $e8, $17, $f2, $04, $fe, $04, $fc, $09, $ff, $f7, $16, $ea
135a6     17 F1 0A 02 
135aa     FD 01 05 04 
135ae     F1 22 D7 30 
135b2     D7 22 F0 0F | 	byte	$17, $f1, $0a, $02, $fd, $01, $05, $04, $f1, $22, $d7, $30, $d7, $22, $f0, $0f
135b6     F6 12 ED 14 
135ba     F3 07 04 00 
135be     F9 16 E1 27 
135c2     DF 22 E3 0E | 	byte	$f6, $12, $ed, $14, $f3, $07, $04, $00, $f9, $16, $e1, $27, $df, $22, $e3, $0e
135c6     FE F7 14 EF 
135ca     15 ED 1A F1 
135ce     FE 0D F8 FE 
135d2     08 F2 10 F8 | 	byte	$fe, $f7, $14, $ef, $15, $ed, $1a, $f1, $fe, $0d, $f8, $fe, $08, $f2, $10, $f8
135d6     02 0D EE 15 
135da     F0 0D F9 01 
135de     02 06 00 06 
135e2     F9 10 F6 15 | 	byte	$02, $0d, $ee, $15, $f0, $0d, $f9, $01, $02, $06, $00, $06, $f9, $10, $f6, $15
135e6     F3 0B FE FD 
135ea     00 03 03 EE 
135ee     18 E9 18 EA 
135f2     15 F1 09 F8 | 	byte	$f3, $0b, $fe, $fd, $00, $03, $03, $ee, $18, $e9, $18, $ea, $15, $f1, $09, $f8
135f6     0E F2 08 01 
135fa     02 01 03 FC 
135fe     06 FC 02 01 
13602     00 01 FF 00 | 	byte	$0e, $f2, $08, $01, $02, $01, $03, $fc, $06, $fc, $02, $01, $00, $01, $ff, $00
13606     00 01 00 FC 
1360a     06 F6 12 EB 
1360e     11 F8 05 F9 
13612     0A F6 07 FC | 	byte	$00, $01, $00, $fc, $06, $f6, $12, $eb, $11, $f8, $05, $f9, $0a, $f6, $07, $fc
13616     07 FA 03 06 
1361a     FD FE 07 FC 
1361e     FC 0D F1 0F 
13622     F2 10 F1 10 | 	byte	$07, $fa, $03, $06, $fd, $fe, $07, $fc, $fc, $0d, $f1, $0f, $f2, $10, $f1, $10
13626     F6 00 06 F8 
1362a     06 FD 00 F8 
1362e     09 FC 05 F8 
13632     08 F8 05 00 | 	byte	$f6, $00, $06, $f8, $06, $fd, $00, $f8, $09, $fc, $05, $f8, $08, $f8, $05, $00
13636     FC 09 F1 12 
1363a     EB 15 F3 04 
1363e     04 F9 13 E9 
13642     18 ED 0F F8 | 	byte	$fc, $09, $f1, $12, $eb, $15, $f3, $04, $04, $f9, $13, $e9, $18, $ed, $0f, $f8
13646     07 FC 07 FF 
1364a     F8 0D F9 04 
1364e     FF 04 F7 0F 
13652     F6 05 FF 03 | 	byte	$07, $fc, $07, $ff, $f8, $0d, $f9, $04, $ff, $04, $f7, $0f, $f6, $05, $ff, $03
13656     01 00 FE 04 
1365a     FE 01 FD 05 
1365e     FF 00 04 F9 
13662     10 F1 0E F2 | 	byte	$01, $00, $fe, $04, $fe, $01, $fd, $05, $ff, $00, $04, $f9, $10, $f1, $0e, $f2
13666     15 EA 13 ED 
1366a     13 ED 0B F6 
1366e     0D EF 0E F3 
13672     0E EF 03 03 | 	byte	$15, $ea, $13, $ed, $13, $ed, $0b, $f6, $0d, $ef, $0e, $f3, $0e, $ef, $03, $03
13676     FA 06 FC 01 
1367a     00 03 F8 09 
1367e     FB 04 F2 15 
13682     EF 0B F9 02 | 	byte	$fa, $06, $fc, $01, $00, $03, $f8, $09, $fb, $04, $f2, $15, $ef, $0b, $f9, $02
13686     07 F3 11 F2 
1368a     0A FF F8 09 
1368e     F9 FF 0A F5 
13692     09 F1 12 EC | 	byte	$07, $f3, $11, $f2, $0a, $ff, $f8, $09, $f9, $ff, $0a, $f5, $09, $f1, $12, $ec
13696     0E FC 05 F5 
1369a     0D F8 FF 02 
1369e     01 FF FD 0E 
136a2     EF 0F F3 08 | 	byte	$0e, $fc, $05, $f5, $0d, $f8, $ff, $02, $01, $ff, $fd, $0e, $ef, $0f, $f3, $08
136a6     FC 02 FF 00 
136aa     01 03 FA 03 
136ae     01 07 F6 0D 
136b2     F9 04 FF 03 | 	byte	$fc, $02, $ff, $00, $01, $03, $fa, $03, $01, $07, $f6, $0d, $f9, $04, $ff, $03
136b6     FB 06 FA FC 
136ba     03 FD 09 FB 
136be     05 FB 07 FA 
136c2     06 06 F5 11 | 	byte	$fb, $06, $fa, $fc, $03, $fd, $09, $fb, $05, $fb, $07, $fa, $06, $06, $f5, $11
136c6     EF 11 EF 14 
136ca     EE 12 F5 09 
136ce     FD FC 00 0D 
136d2     F1 13 EE 11 | 	byte	$ef, $11, $ef, $14, $ee, $12, $f5, $09, $fd, $fc, $00, $0d, $f1, $13, $ee, $11
136d6     F1 13 F1 0B 
136da     F5 0D EB 18 
136de     E0 16 F0 03 
136e2     01 FA 0A F6 | 	byte	$f1, $13, $f1, $0b, $f5, $0d, $eb, $18, $e0, $16, $f0, $03, $01, $fa, $0a, $f6
136e6     07 F7 0A F8 
136ea     06 02 FD 05 
136ee     FC 04 FC 05 
136f2     FC 04 FE FF | 	byte	$07, $f7, $0a, $f8, $06, $02, $fd, $05, $fc, $04, $fc, $05, $fc, $04, $fe, $ff
136f6     03 FC 07 F5 
136fa     0E F3 09 FB 
136fe     02 01 03 FC 
13702     08 F9 08 FD | 	byte	$03, $fc, $07, $f5, $0e, $f3, $09, $fb, $02, $01, $03, $fc, $08, $f9, $08, $fd
13706     FD 09 FA 06 
1370a     FC 00 03 01 
1370e     FE 07 FD 01 
13712     0A F5 06 FF | 	byte	$fd, $09, $fa, $06, $fc, $00, $03, $01, $fe, $07, $fd, $01, $0a, $f5, $06, $ff
13716     04 FD 03 FE 
1371a     06 F8 0D FB 
1371e     05 01 00 FC 
13722     0F F2 0D F8 | 	byte	$04, $fd, $03, $fe, $06, $f8, $0d, $fb, $05, $01, $00, $fc, $0f, $f2, $0d, $f8
13726     11 EF 14 EF 
1372a     0E EE 16 EF 
1372e     02 06 F8 0A 
13732     F6 06 FA 0E | 	byte	$11, $ef, $14, $ef, $0e, $ee, $16, $ef, $02, $06, $f8, $0a, $f6, $06, $fa, $0e
13736     F1 09 FE 01 
1373a     04 F7 0A F9 
1373e     03 FF FF 09 
13742     F3 0E F5 0A | 	byte	$f1, $09, $fe, $01, $04, $f7, $0a, $f9, $03, $ff, $ff, $09, $f3, $0e, $f5, $0a
13746     F7 05 FC 03 
1374a     FA 0A F8 05 
1374e     FD 0B F5 0B 
13752     F7 08 F9 06 | 	byte	$f7, $05, $fc, $03, $fa, $0a, $f8, $05, $fd, $0b, $f5, $0b, $f7, $08, $f9, $06
13756     00 FC 07 F8 
1375a     08 F7 10 EA 
1375e     1A EC 14 F5 
13762     07 FD FD 03 | 	byte	$00, $fc, $07, $f8, $08, $f7, $10, $ea, $1a, $ec, $14, $f5, $07, $fd, $fd, $03
13766     FF 03 FB 0B 
1376a     F6 08 F8 09 
1376e     FA 04 FD 08 
13772     F5 0D F6 0B | 	byte	$ff, $03, $fb, $0b, $f6, $08, $f8, $09, $fa, $04, $fd, $08, $f5, $0d, $f6, $0b
13776     F8 07 F7 0A 
1377a     FA 04 FF 03 
1377e     02 FB 07 F7 
13782     08 FB 04 FD | 	byte	$f8, $07, $f7, $0a, $fa, $04, $ff, $03, $02, $fb, $07, $f7, $08, $fb, $04, $fd
13786     02 01 FD 07 
1378a     FB 05 01 FF 
1378e     00 00 00 00 
13792     05 05 00 FF | 	byte	$02, $01, $fd, $07, $fb, $05, $01, $ff, $00, $00, $00, $00, $05, $05, $00, $ff
13796     00 00 00 00 
      ...             
137c6     00 00 00 00 
137ca     00 00       | 	byte	$00[54]
137cc     07 0A 0D 0C 
137d0     09 09 08 0C 
137d4     0B 0C 0C 09 
137d8     09 0A 0B 0B | 	byte	$07, $0a, $0d, $0c, $09, $09, $08, $0c, $0b, $0c, $0c, $09, $09, $0a, $0b, $0b
137dc     0C 0A 0C F8 
137e0     17 10 FF 10 
137e4     DF 20 38 C0 
137e8     0F 47 E2 10 | 	byte	$0c, $0a, $0c, $f8, $17, $10, $ff, $10, $df, $20, $38, $c0, $0f, $47, $e2, $10
137ec     DF 24 3F E0 
137f0     CF 4F 40 EB 
137f4     B0 3F 38 F0 
137f8     EB 32 FF 00 | 	byte	$df, $24, $3f, $e0, $cf, $4f, $40, $eb, $b0, $3f, $38, $f0, $eb, $32, $ff, $00
137fc     F7 FF 2B 28 
13800     F0 D7 3B 10 
13804     F4 EF 1C 47 
13808     E8 EF 00 17 | 	byte	$f7, $ff, $2b, $28, $f0, $d7, $3b, $10, $f4, $ef, $1c, $47, $e8, $ef, $00, $17
1380c     15 30 00 DF 
13810     04 FF 48 DF 
13814     00 DF 58 F0 
13818     EA 1F E8 3F | 	byte	$15, $30, $00, $df, $04, $ff, $48, $df, $00, $df, $58, $f0, $ea, $1f, $e8, $3f
1381c     F0 F0 1F 00 
13820     1F E0 2F 00 
13824     FF 00 37 10 
13828     CF F8 3F 28 | 	byte	$f0, $f0, $1f, $00, $1f, $e0, $2f, $00, $ff, $00, $37, $10, $cf, $f8, $3f, $28
1382c     D3 0E FF 18 
13830     1E E3 1F 20 
13834     02 EB 04 3F 
13838     00 EC FB 2B | 	byte	$d3, $0e, $ff, $18, $1e, $e3, $1f, $20, $02, $eb, $04, $3f, $00, $ec, $fb, $2b
1383c     2F E8 FF 00 
13840     1F 00 1F 20 
13844     08 CF 2F 40 
13848     F0 E0 F7 10 | 	byte	$2f, $e8, $ff, $00, $1f, $00, $1f, $20, $08, $cf, $2f, $40, $f0, $e0, $f7, $10
1384c     68 C0 FF 40 
13850     25 D0 DF 4B 
13854     20 C7 1F 38 
13858     03 00 D7 FF | 	byte	$68, $c0, $ff, $40, $25, $d0, $df, $4b, $20, $c7, $1f, $38, $03, $00, $d7, $ff
1385c     4F 40 C8 D7 
13860     30 28 C8 FF 
13864     30 2A CF 20 
13868     DF 08 3B 28 | 	byte	$4f, $40, $c8, $d7, $30, $28, $c8, $ff, $30, $2a, $cf, $20, $df, $08, $3b, $28
1386c     F0 DF 00 1F 
13870     20 1F E0 FF 
13874     38 E4 0F 1F 
13878     E0 5F C8 EF | 	byte	$f0, $df, $00, $1f, $20, $1f, $e0, $ff, $38, $e4, $0f, $1f, $e0, $5f, $c8, $ef
1387c     20 19 0F F1 
13880     18 DF 40 DF 
13884     50 B7 10 DF 
13888     7F C0 E0 F7 | 	byte	$20, $19, $0f, $f1, $18, $df, $40, $df, $50, $b7, $10, $df, $7f, $c0, $e0, $f7
1388c     4A 00 FF C3 
13890     77 00 E4 CF 
13894     1D 24 1F 20 
13898     B7 28 3F E0 | 	byte	$4a, $00, $ff, $c3, $77, $00, $e4, $cf, $1d, $24, $1f, $20, $b7, $28, $3f, $e0
1389c     FA FF 40 C8 
138a0     27 F6 E4 7F 
138a4     00 E0 FF DC 
138a8     4F 00 18 BF | 	byte	$fa, $ff, $40, $c8, $27, $f6, $e4, $7f, $00, $e0, $ff, $dc, $4f, $00, $18, $bf
138ac     58 D4 F8 FF 
138b0     60 CF 08 DF 
138b4     60 EB 00 0F 
138b8     C0 5F 07 10 | 	byte	$58, $d4, $f8, $ff, $60, $cf, $08, $df, $60, $eb, $00, $0f, $c0, $5f, $07, $10
138bc     F7 D0 3F 00 
138c0     FF 28 20 DF 
138c4     10 EF 30 FF 
138c8     28 FF D0 DF | 	byte	$f7, $d0, $3f, $00, $ff, $28, $20, $df, $10, $ef, $30, $ff, $28, $ff, $d0, $df
138cc     78 C0 FF 3A 
138d0     00 10 CF 20 
138d4     34 D7 F1 57 
138d8     E0 1F C0 3F | 	byte	$78, $c0, $ff, $3a, $00, $10, $cf, $20, $34, $d7, $f1, $57, $e0, $1f, $c0, $3f
138dc     00 1F E0 2F 
138e0     00 1F 00 FF 
138e4     E0 57 20 E7 
138e8     D8 1F 00 F2 | 	byte	$00, $1f, $e0, $2f, $00, $1f, $00, $ff, $e0, $57, $20, $e7, $d8, $1f, $00, $f2
138ec     37 D0 5F C0 
138f0     37 C0 33 E3 
138f4     5F 00 BF 1C 
138f8     3C CF 28 FF | 	byte	$37, $d0, $5f, $c0, $37, $c0, $33, $e3, $5f, $00, $bf, $1c, $3c, $cf, $28, $ff
138fc     10 BF 3A EF 
13900     FB 78 A9 F0 
13904     FF 10 3F DA 
13908     CF 5F E4 0F | 	byte	$10, $bf, $3a, $ef, $fb, $78, $a9, $f0, $ff, $10, $3f, $da, $cf, $5f, $e4, $0f
1390c     CB 48 EF 0F 
13910     04 1F E0 DF 
13914     44 20 CB 48 
13918     B7 0C 3F B9 | 	byte	$cb, $48, $ef, $0f, $04, $1f, $e0, $df, $44, $20, $cb, $48, $b7, $0c, $3f, $b9
1391c     64 9F 70 DB 
13920     E0 3F C0 3F 
13924     10 10 EF 10 
13928     DF 40 EF E5 | 	byte	$64, $9f, $70, $db, $e0, $3f, $c0, $3f, $10, $10, $ef, $10, $df, $40, $ef, $e5
1392c     17 40 C7 40 
13930     EF E0 20 BF 
13934     7F C3 28 CF 
13938     E8 7F C0 F7 | 	byte	$17, $40, $c7, $40, $ef, $e0, $20, $bf, $7f, $c3, $28, $cf, $e8, $7f, $c0, $f7
1393c     28 00 FF C0 
13940     7F C0 1F D0 
13944     3F 00 FF 40 
13948     BF 30 EF 10 | 	byte	$28, $00, $ff, $c0, $7f, $c0, $1f, $d0, $3f, $00, $ff, $40, $bf, $30, $ef, $10
1394c     28 A7 7C 92 
13950     3F 07 00 EF 
13954     17 00 FF ED 
13958     72 00 81 3F | 	byte	$28, $a7, $7c, $92, $3f, $07, $00, $ef, $17, $00, $ff, $ed, $72, $00, $81, $3f
1395c     50 CF F8 3F 
13960     B1 20 3C D7 
13964     60 AF 00 2F 
13968     00 3F D0 C7 | 	byte	$50, $cf, $f8, $3f, $b1, $20, $3c, $d7, $60, $af, $00, $2f, $00, $3f, $d0, $c7
1396c     77 D8 58 88 
13970     1F 0F 40 DF 
13974     17 00 CF 10 
13978     2C EF 40 BF | 	byte	$77, $d8, $58, $88, $1f, $0f, $40, $df, $17, $00, $cf, $10, $2c, $ef, $40, $bf
1397c     20 FF 00 FF 
13980     20 DF 48 BF 
13984     20 BF 7C A0 
13988     3F C8 5E A0 | 	byte	$20, $ff, $00, $ff, $20, $df, $48, $bf, $20, $bf, $7c, $a0, $3f, $c8, $5e, $a0
1398c     3F 00 FF EA 
13990     0C FF 60 D7 
13994     D8 08 F7 7E 
13998     C0 CF 3F D0 | 	byte	$3f, $00, $ff, $ea, $0c, $ff, $60, $d7, $d8, $08, $f7, $7e, $c0, $cf, $3f, $d0
1399c     3F C2 44 E9 
139a0     0F E0 FF 00 
139a4     3F 00 EF 20 
139a8     DF 40 EF DF | 	byte	$3f, $c2, $44, $e9, $0f, $e0, $ff, $00, $3f, $00, $ef, $20, $df, $40, $ef, $df
139ac     68 BF 00 FF 
139b0     E0 4F E8 C0 
139b4     5F 00 1F CC 
139b8     00 3F 00 FF | 	byte	$68, $bf, $00, $ff, $e0, $4f, $e8, $c0, $5f, $00, $1f, $cc, $00, $3f, $00, $ff
139bc     00 1F E0 25 
139c0     00 FF 20 CF 
139c4     1B 30 CF 34 
139c8     EF D2 68 D7 | 	byte	$00, $1f, $e0, $25, $00, $ff, $20, $cf, $1b, $30, $cf, $34, $ef, $d2, $68, $d7
139cc     28 D7 00 1B 
139d0     00 EF 4F D0 
139d4     3F 00 AF 1F 
139d8     20 FF 40 BF | 	byte	$28, $d7, $00, $1b, $00, $ef, $4f, $d0, $3f, $00, $af, $1f, $20, $ff, $40, $bf
139dc     50 BF 50 DF 
139e0     08 03 F7 07 
139e4     3F D0 1F 00 
139e8     FF 0D 10 DF | 	byte	$50, $bf, $50, $df, $08, $03, $f7, $07, $3f, $d0, $1f, $00, $ff, $0d, $10, $df
139ec     40 EF D7 30 
139f0     BF 70 8F 74 
139f4     C0 4F C0 08 
139f8     FF 40 CE 1F | 	byte	$40, $ef, $d7, $30, $bf, $70, $8f, $74, $c0, $4f, $c0, $08, $ff, $40, $ce, $1f
139fc     10 EF 40 F7 
13a00     CB 40 CF 60 
13a04     9F 7F B0 E7 
13a08     3B C0 7F E0 | 	byte	$10, $ef, $40, $f7, $cb, $40, $cf, $60, $9f, $7f, $b0, $e7, $3b, $c0, $7f, $e0
13a0c     E0 3F C0 2F 
13a10     D0 3B 37 00 
13a14     CF E8 5F 20 
13a18     DF 08 16 C0 | 	byte	$e0, $3f, $c0, $2f, $d0, $3b, $37, $00, $cf, $e8, $5f, $20, $df, $08, $16, $c0
13a1c     58 FF 10 1F 
13a20     C0 1F 08 2F 
13a24     00 D3 3B 10 
13a28     DF 08 07 3F | 	byte	$58, $ff, $10, $1f, $c0, $1f, $08, $2f, $00, $d3, $3b, $10, $df, $08, $07, $3f
13a2c     00 BF 10 0F 
13a30     07 40 BF 74 
13a34     C0 BF 5B 00 
13a38     3F 00 CF 47 | 	byte	$00, $bf, $10, $0f, $07, $40, $bf, $74, $c0, $bf, $5b, $00, $3f, $00, $cf, $47
13a3c     F0 EB 42 00 
13a40     EF 00 DF 70 
13a44     CF 38 D4 DF 
13a48     44 D8 57 D0 | 	byte	$f0, $eb, $42, $00, $ef, $00, $df, $70, $cf, $38, $d4, $df, $44, $d8, $57, $d0
13a4c     1F C0 5F C0 
13a50     30 D7 78 B0 
13a54     FF D2 3F 10 
13a58     00 BF 60 AF | 	byte	$1f, $c0, $5f, $c0, $30, $d7, $78, $b0, $ff, $d2, $3f, $10, $00, $bf, $60, $af
13a5c     70 AF 60 A7 
13a60     38 DF 20 1F 
13a64     00 EF E0 47 
13a68     AB 7F E0 DF | 	byte	$70, $af, $60, $a7, $38, $df, $20, $1f, $00, $ef, $e0, $47, $ab, $7f, $e0, $df
13a6c     50 A8 EF 70 
13a70     14 DF E0 DF 
13a74     00 7F E0 1F 
13a78     A0 5F A0 5F | 	byte	$50, $a8, $ef, $70, $14, $df, $e0, $df, $00, $7f, $e0, $1f, $a0, $5f, $a0, $5f
13a7c     10 F8 BF 20 
13a80     FF 60 BF D4 
13a84     2F 20 00 BB 
13a88     2F 40 20 A8 | 	byte	$10, $f8, $bf, $20, $ff, $60, $bf, $d4, $2f, $20, $00, $bb, $2f, $40, $20, $a8
13a8c     FF 06 10 FF 
13a90     40 E8 17 C0 
13a94     EF 70 10 BF 
13a98     00 BF 70 EE | 	byte	$ff, $06, $10, $ff, $40, $e8, $17, $c0, $ef, $70, $10, $bf, $00, $bf, $70, $ee
13a9c     D5 28 F0 FF 
13aa0     0C FB 58 B1 
13aa4     32 B0 2F 28 
13aa8     00 FF E0 EF | 	byte	$d5, $28, $f0, $ff, $0c, $fb, $58, $b1, $32, $b0, $2f, $28, $00, $ff, $e0, $ef
13aac     0F 40 DF 50 
13ab0     BF 40 9F 50 
13ab4     B7 7C C0 18 
13ab8     D9 1C 17 E0 | 	byte	$0f, $40, $df, $50, $bf, $40, $9f, $50, $b7, $7c, $c0, $18, $d9, $1c, $17, $e0
13abc     1F E0 FF 20 
13ac0     DF 40 E7 FF 
13ac4     00 BF 60 DF 
13ac8     6C C0 FF DB | 	byte	$1f, $e0, $ff, $20, $df, $40, $e7, $ff, $00, $bf, $60, $df, $6c, $c0, $ff, $db
13acc     F0 3F 08 00 
13ad0     DF 20 BF 60 
13ad4     FD 07 C0 1F 
13ad8     00 FF 7C C8 | 	byte	$f0, $3f, $08, $00, $df, $20, $bf, $60, $fd, $07, $c0, $1f, $00, $ff, $7c, $c8
13adc     CF 0B F0 5F 
13ae0     00 04 9F 60 
13ae4     0B E0 FE 3F 
13ae8     00 EB DB 58 | 	byte	$cf, $0b, $f0, $5f, $00, $04, $9f, $60, $0b, $e0, $fe, $3f, $00, $eb, $db, $58
13aec     FF 00 1F 40 
13af0     DF 00 BF 2F 
13af4     44 E0 FF D0 
13af8     3F 10 F0 FF | 	byte	$ff, $00, $1f, $40, $df, $00, $bf, $2f, $44, $e0, $ff, $d0, $3f, $10, $f0, $ff
13afc     04 E5 3F 14 
13b00     F8 08 F7 00 
13b04     FF 20 1F 00 
13b08     FF D0 5F E3 | 	byte	$04, $e5, $3f, $14, $f8, $08, $f7, $00, $ff, $20, $1f, $00, $ff, $d0, $5f, $e3
13b0c     00 EF 40 30 
13b10     BF F0 EF 68 
13b14     10 E5 FF E0 
13b18     3F 00 D4 FF | 	byte	$00, $ef, $40, $30, $bf, $f0, $ef, $68, $10, $e5, $ff, $e0, $3f, $00, $d4, $ff
13b1c     40 10 E1 1F 
13b20     14 E8 2F C0 
13b24     3F 17 00 FF 
13b28     0F 18 CF 2A | 	byte	$40, $10, $e1, $1f, $14, $e8, $2f, $c0, $3f, $17, $00, $ff, $0f, $18, $cf, $2a
13b2c     ED 3F 30 B9 
13b30     0A FF 40 DF 
13b34     40 ED E8 FF 
13b38     00 3F 30 EB | 	byte	$ed, $3f, $30, $b9, $0a, $ff, $40, $df, $40, $ed, $e8, $ff, $00, $3f, $30, $eb
13b3c     F0 D7 5F 20 
13b40     E0 EF 00 38 
13b44     CF 48 03 D0 
13b48     3F CF 4C D8 | 	byte	$f0, $d7, $5f, $20, $e0, $ef, $00, $38, $cf, $48, $03, $d0, $3f, $cf, $4c, $d8
13b4c     FF 57 10 D7 
13b50     D7 2F 06 1F 
13b54     20 EF 00 1F 
13b58     E0 2F DB 3C | 	byte	$ff, $57, $10, $d7, $d7, $2f, $06, $1f, $20, $ef, $00, $1f, $e0, $2f, $db, $3c
13b5c     D7 38 2F E8 
13b60     F2 B7 3F 58 
13b64     C0 3F 00 EF 
13b68     28 1F 08 C0 | 	byte	$d7, $38, $2f, $e8, $f2, $b7, $3f, $58, $c0, $3f, $00, $ef, $28, $1f, $08, $c0
13b6c     2F 3F 30 C0 
13b70     DB 17 60 1A 
13b74     E3 08 EF 20 
13b78     EF F0 4F 00 | 	byte	$2f, $3f, $30, $c0, $db, $17, $60, $1a, $e3, $08, $ef, $20, $ef, $f0, $4f, $00
13b7c     1A EB 20 1D 
13b80     E7 D0 1F 50 
13b84     E0 EF 34 F2 
13b88     FC 1F 00 17 | 	byte	$1a, $eb, $20, $1d, $e7, $d0, $1f, $50, $e0, $ef, $34, $f2, $fc, $1f, $00, $17
13b8c     10 FF C0 5F 
13b90     20 E8 FF 00 
13b94     FF 09 0A FF 
13b98     3F D4 1F D0 | 	byte	$10, $ff, $c0, $5f, $20, $e8, $ff, $00, $ff, $09, $0a, $ff, $3f, $d4, $1f, $d0
13b9c     2F 40 C9 13 
13ba0     F2 2F 20 EC 
13ba4     CC 1F 20 32 
13ba8     A2 3F 2C D0 | 	byte	$2f, $40, $c9, $13, $f2, $2f, $20, $ec, $cc, $1f, $20, $32, $a2, $3f, $2c, $d0
13bac     FF 48 CF E8 
13bb0     1F 20 EC 5B 
13bb4     CD 00 FF C8 
13bb8     7F C0 FF E0 | 	byte	$ff, $48, $cf, $e8, $1f, $20, $ec, $5b, $cd, $00, $ff, $c8, $7f, $c0, $ff, $e0
13bbc     5F D9 0C 10 
13bc0     AF 37 4C 0F 
13bc4     00 EF 01 08 
13bc8     2F 00 3F D0 | 	byte	$5f, $d9, $0c, $10, $af, $37, $4c, $0f, $00, $ef, $01, $08, $2f, $00, $3f, $d0
13bcc     1F 18 20 BF 
13bd0     28 20 FF 10 
13bd4     08 1F E0 DF 
13bd8     60 E8 DF 6F | 	byte	$1f, $18, $20, $bf, $28, $20, $ff, $10, $08, $1f, $e0, $df, $60, $e8, $df, $6f
13bdc     E0 CB 3F 20 
13be0     EC FF 20 DF 
13be4     00 1F 30 08 
13be8     D1 08 FF 20 | 	byte	$e0, $cb, $3f, $20, $ec, $ff, $20, $df, $00, $1f, $30, $08, $d1, $08, $ff, $20
13bec     27 F0 D4 17 
13bf0     2B 24 0F A0 
13bf4     57 E0 FF 40 
13bf8     20 AF E0 3F | 	byte	$27, $f0, $d4, $17, $2b, $24, $0f, $a0, $57, $e0, $ff, $40, $20, $af, $e0, $3f
13bfc     40 00 DF 10 
13c00     F7 40 DF 40 
13c04     C0 1F 1B E0 
13c08     FF 33 20 D7 | 	byte	$40, $00, $df, $10, $f7, $40, $df, $40, $c0, $1f, $1b, $e0, $ff, $33, $20, $d7
13c0c     F9 44 EF E0 
13c10     1F 56 00 FF 
13c14     20 B9 18 FF 
13c18     68 C8 1F E9 | 	byte	$f9, $44, $ef, $e0, $1f, $56, $00, $ff, $20, $b9, $18, $ff, $68, $c8, $1f, $e9
13c1c     50 A7 2F 10 
13c20     EF FF 50 FF 
13c24     00 0E AF 3C 
13c28     20 DF 70 AB | 	byte	$50, $a7, $2f, $10, $ef, $ff, $50, $ff, $00, $0e, $af, $3c, $20, $df, $70, $ab
13c2c     5C AF 20 FF 
13c30     E4 6F D0 EF 
13c34     14 30 DF 00 
13c38     1F 00 EF 60 | 	byte	$5c, $af, $20, $ff, $e4, $6f, $d0, $ef, $14, $30, $df, $00, $1f, $00, $ef, $60
13c3c     CF 20 EF 00 
13c40     1D 20 C0 5F 
13c44     C0 2B FF 40 
13c48     BF 1F E8 FF | 	byte	$cf, $20, $ef, $00, $1d, $20, $c0, $5f, $c0, $2b, $ff, $40, $bf, $1f, $e8, $ff
13c4c     2B 00 EF 20 
13c50     FF 20 FF C7 
13c54     28 DF 76 00 
13c58     08 CF 00 1F | 	byte	$2b, $00, $ef, $20, $ff, $20, $ff, $c7, $28, $df, $76, $00, $08, $cf, $00, $1f
13c5c     18 F1 EB 3F 
13c60     00 FF F0 1F 
13c64     FF 20 EF 20 
13c68     1F 20 DB 10 | 	byte	$18, $f1, $eb, $3f, $00, $ff, $f0, $1f, $ff, $20, $ef, $20, $1f, $20, $db, $10
13c6c     EF 18 09 F0 
13c70     0F 64 00 BB 
13c74     1B E4 37 40 
13c78     E7 E7 2A EF | 	byte	$ef, $18, $09, $f0, $0f, $64, $00, $bb, $1b, $e4, $37, $40, $e7, $e7, $2a, $ef
13c7c     20 EF E7 28 
13c80     0F 40 E0 1B 
13c84     D3 08 3F C0 
13c88     5F 00 20 DF | 	byte	$20, $ef, $e7, $28, $0f, $40, $e0, $1b, $d3, $08, $3f, $c0, $5f, $00, $20, $df
13c8c     00 FF E4 1F 
13c90     F7 48 DD 10 
13c94     F7 10 1F D0 
13c98     2D C7 58 DF | 	byte	$00, $ff, $e4, $1f, $f7, $48, $dd, $10, $f7, $10, $1f, $d0, $2d, $c7, $58, $df
13c9c     68 C0 D7 4F 
13ca0     D0 3F 10 E0 
13ca4     2F 00 1F 00 
13ca8     2F 20 AC FF | 	byte	$68, $c0, $d7, $4f, $d0, $3f, $10, $e0, $2f, $00, $1f, $00, $2f, $20, $ac, $ff
13cac     20 FF 7E B0 
13cb0     EF 08 DA 1F 
13cb4     3B 00 5A B4 
13cb8     E8 3F 00 1F | 	byte	$20, $ff, $7e, $b0, $ef, $08, $da, $1f, $3b, $00, $5a, $b4, $e8, $3f, $00, $1f
13cbc     00 F7 27 48 
13cc0     C7 24 B9 3F 
13cc4     30 DF 34 F5 
13cc8     FC E7 2E F3 | 	byte	$00, $f7, $27, $48, $c7, $24, $b9, $3f, $30, $df, $34, $f5, $fc, $e7, $2e, $f3
13ccc     10 EF 58 F0 
13cd0     13 F0 DA F7 
13cd4     40 17 40 B8 
13cd8     2F E0 FF 34 | 	byte	$10, $ef, $58, $f0, $13, $f0, $da, $f7, $40, $17, $40, $b8, $2f, $e0, $ff, $34
13cdc     FB D9 27 20 
13ce0     10 E0 1F E0 
13ce4     3F ED 20 DF 
13ce8     10 3F EF 00 | 	byte	$fb, $d9, $27, $20, $10, $e0, $1f, $e0, $3f, $ed, $20, $df, $10, $3f, $ef, $00
13cec     EF 00 1F 20 
13cf0     FF 00 DF 07 
13cf4     54 C3 5C A4 
13cf8     2F 20 03 27 | 	byte	$ef, $00, $1f, $20, $ff, $00, $df, $07, $54, $c3, $5c, $a4, $2f, $20, $03, $27
13cfc     E0 DF 27 10 
13d00     FF 20 BF 60 
13d04     C8 FF 10 15 
13d08     00 E7 18 0D | 	byte	$e0, $df, $27, $10, $ff, $20, $bf, $60, $c8, $ff, $10, $15, $00, $e7, $18, $0d
13d0c     1F 20 FF E2 
13d10     F0 BF 65 47 
13d14     C0 3F 00 BF 
13d18     27 40 DF 20 | 	byte	$1f, $20, $ff, $e2, $f0, $bf, $65, $47, $c0, $3f, $00, $bf, $27, $40, $df, $20
13d1c     FF 10 17 B0 
13d20     3F 00 FF 60 
13d24     BF 48 F0 E0 
13d28     DA 37 3B 00 | 	byte	$ff, $10, $17, $b0, $3f, $00, $ff, $60, $bf, $48, $f0, $e0, $da, $37, $3b, $00
13d2c     BF 44 00 FF 
13d30     E0 FF DB 5F 
13d34     08 32 C0 2F 
13d38     00 DF 30 DF | 	byte	$bf, $44, $00, $ff, $e0, $ff, $db, $5f, $08, $32, $c0, $2f, $00, $df, $30, $df
13d3c     60 E3 00 BF 
13d40     78 AD 2E D7 
13d44     14 3F 00 EF 
13d48     0F 28 FF E0 | 	byte	$60, $e3, $00, $bf, $78, $ad, $2e, $d7, $14, $3f, $00, $ef, $0f, $28, $ff, $e0
13d4c     1F 07 48 F0 
13d50     BF 37 F4 4F 
13d54     10 AF 18 DF 
13d58     78 E3 D0 17 | 	byte	$1f, $07, $48, $f0, $bf, $37, $f4, $4f, $10, $af, $18, $df, $78, $e3, $d0, $17
13d5c     E8 3F 18 00 
13d60     DF D0 7E E0 
13d64     DF 1F 40 9F 
13d68     26 3F 10 00 | 	byte	$e8, $3f, $18, $00, $df, $d0, $7e, $e0, $df, $1f, $40, $9f, $26, $3f, $10, $00
13d6c     BF 1B 30 00 
13d70     DF 00 2F 28 
13d74     E0 27 D0 FF 
13d78     0B 00 3F 00 | 	byte	$bf, $1b, $30, $00, $df, $00, $2f, $28, $e0, $27, $d0, $ff, $0b, $00, $3f, $00
13d7c     20 AF 08 3F 
13d80     20 00 B7 50 
13d84     DF 60 AF 20 
13d88     EF 2A 13 00 | 	byte	$20, $af, $08, $3f, $20, $00, $b7, $50, $df, $60, $af, $20, $ef, $2a, $13, $00
13d8c     04 FF D4 3F 
13d90     F1 28 DF DF 
13d94     5E 00 D7 30 
13d98     EF EB 13 3F | 	byte	$04, $ff, $d4, $3f, $f1, $28, $df, $df, $5e, $00, $d7, $30, $ef, $eb, $13, $3f
13d9c     00 FF E8 07 
13da0     1F D0 3F 00 
13da4     2F D4 F7 40 
13da8     15 E4 E0 FF | 	byte	$00, $ff, $e8, $07, $1f, $d0, $3f, $00, $2f, $d4, $f7, $40, $15, $e4, $e0, $ff
13dac     40 EF 68 8B 
13db0     1F 31 D1 5F 
13db4     D7 10 DF 10 
13db8     4B 08 E8 C5 | 	byte	$40, $ef, $68, $8b, $1f, $31, $d1, $5f, $d7, $10, $df, $10, $4b, $08, $e8, $c5
13dbc     3B 30 F7 20 
13dc0     D7 DF 28 1F 
13dc4     00 EF 50 AF 
13dc8     50 DF 10 1D | 	byte	$3b, $30, $f7, $20, $d7, $df, $28, $1f, $00, $ef, $50, $af, $50, $df, $10, $1d
13dcc     AF 5F F0 E8 
13dd0     3F 00 2F C0 
13dd4     5F E8 07 EA 
13dd8     E0 3F 40 D7 | 	byte	$af, $5f, $f0, $e8, $3f, $00, $2f, $c0, $5f, $e8, $07, $ea, $e0, $3f, $40, $d7
13ddc     10 BF 30 FF 
13de0     58 D4 D0 FF 
13de4     30 28 F7 E8 
13de8     15 0B F4 2F | 	byte	$10, $bf, $30, $ff, $58, $d4, $d0, $ff, $30, $28, $f7, $e8, $15, $0b, $f4, $2f
13dec     10 CF 20 FF 
13df0     10 27 10 E0 
13df4     DF 2F 06 20 
13df8     FF 00 CF 67 | 	byte	$10, $cf, $20, $ff, $10, $27, $10, $e0, $df, $2f, $06, $20, $ff, $00, $cf, $67
13dfc     00 FF E0 14 
13e00     EF 08 2F 08 
13e04     1F 00 BF 20 
13e08     1F 20 FB FA | 	byte	$00, $ff, $e0, $14, $ef, $08, $2f, $08, $1f, $00, $bf, $20, $1f, $20, $fb, $fa
13e0c     E7 FF 5F C0 
13e10     1F E3 40 FB 
13e14     D0 3F 20 FF 
13e18     E0 FF 1F 50 | 	byte	$e7, $ff, $5f, $c0, $1f, $e3, $40, $fb, $d0, $3f, $20, $ff, $e0, $ff, $1f, $50
13e1c     CF 00 D7 40 
13e20     44 C0 FF 18 
13e24     28 CF 2F 00 
13e28     3F 00 EE FF | 	byte	$cf, $00, $d7, $40, $44, $c0, $ff, $18, $28, $cf, $2f, $00, $3f, $00, $ee, $ff
13e2c     40 DF 22 08 
13e30     BF 70 F3 E4 
13e34     E5 3F E4 1F 
13e38     07 D8 5F 00 | 	byte	$40, $df, $22, $08, $bf, $70, $f3, $e4, $e5, $3f, $e4, $1f, $07, $d8, $5f, $00
13e3c     F0 FF 00 FF 
13e40     27 40 CF 00 
13e44     1F 28 FC E0 
13e48     FF 28 EF 40 | 	byte	$f0, $ff, $00, $ff, $27, $40, $cf, $00, $1f, $28, $fc, $e0, $ff, $28, $ef, $40
13e4c     BF 50 1B C0 
13e50     2F 00 27 15 
13e54     C0 FF 14 14 
13e58     17 20 BF 40 | 	byte	$bf, $50, $1b, $c0, $2f, $00, $27, $15, $c0, $ff, $14, $14, $17, $20, $bf, $40
13e5c     FF E0 F7 50 
13e60     C0 4C D9 F3 
13e64     5E C8 36 A5 
13e68     19 37 40 BF | 	byte	$ff, $e0, $f7, $50, $c0, $4c, $d9, $f3, $5e, $c8, $36, $a5, $19, $37, $40, $bf
13e6c     F0 FF 20 57 
13e70     C0 FF FF 40 
13e74     D7 ED 38 DF 
13e78     50 9F 18 5F | 	byte	$f0, $ff, $20, $57, $c0, $ff, $ff, $40, $d7, $ed, $38, $df, $50, $9f, $18, $5f
13e7c     00 D0 EF 2A 
13e80     5C A0 DF 5F 
13e84     00 1F E0 00 
13e88     FF 20 14 DF | 	byte	$00, $d0, $ef, $2a, $5c, $a0, $df, $5f, $00, $1f, $e0, $00, $ff, $20, $14, $df
13e8c     10 EF 30 04 
13e90     DF 08 3F C0 
13e94     4D E7 10 DF 
13e98     60 AF 20 EF | 	byte	$10, $ef, $30, $04, $df, $08, $3f, $c0, $4d, $e7, $10, $df, $60, $af, $20, $ef
13e9c     5A 08 A0 FF 
13ea0     60 E0 2F C0 
13ea4     FF 44 28 D0 
13ea8     CF 3F 00 2F | 	byte	$5a, $08, $a0, $ff, $60, $e0, $2f, $c0, $ff, $44, $28, $d0, $cf, $3f, $00, $2f
13eac     CB 7F D0 F4 
13eb0     BF 3F 1C F7 
13eb4     20 FF E0 1F 
13eb8     10 1C AF 4F | 	byte	$cb, $7f, $d0, $f4, $bf, $3f, $1c, $f7, $20, $ff, $e0, $1f, $10, $1c, $af, $4f
13ebc     08 DF 38 F7 
13ec0     40 DF DF 08 
13ec4     2F 20 FF 00 
13ec8     0F BF 7C D0 | 	byte	$08, $df, $38, $f7, $40, $df, $df, $08, $2f, $20, $ff, $00, $0f, $bf, $7c, $d0
13ecc     DF 10 37 EF 
13ed0     20 DF 40 E5 
13ed4     FF 30 CB 2F 
13ed8     30 C0 1F 0D | 	byte	$df, $10, $37, $ef, $20, $df, $40, $e5, $ff, $30, $cb, $2f, $30, $c0, $1f, $0d
13edc     08 FF E0 28 
13ee0     1F D0 1F 20 
13ee4     E0 3F 00 CF 
13ee8     3A 14 FF 10 | 	byte	$08, $ff, $e0, $28, $1f, $d0, $1f, $20, $e0, $3f, $00, $cf, $3a, $14, $ff, $10
13eec     CF 24 EF 50 
13ef0     BF 78 B3 E0 
13ef4     1F 10 12 CF 
13ef8     50 DF 10 BF | 	byte	$cf, $24, $ef, $50, $bf, $78, $b3, $e0, $1f, $10, $12, $cf, $50, $df, $10, $bf
13efc     58 40 85 1F 
13f00     48 CF 5A E0 
13f04     BF 34 37 D3 
13f08     28 B7 60 AF | 	byte	$58, $40, $85, $1f, $48, $cf, $5a, $e0, $bf, $34, $37, $d3, $28, $b7, $60, $af
13f0c     7C D1 08 DF 
13f10     1F E0 3F 00 
13f14     3F 00 CE FF 
13f18     40 30 C3 08 | 	byte	$7c, $d1, $08, $df, $1f, $e0, $3f, $00, $3f, $00, $ce, $ff, $40, $30, $c3, $08
13f1c     DF 60 E7 22 
13f20     11 A0 1F 32 
13f24     FF 40 BF 60 
13f28     C4 DF 2F 01 | 	byte	$df, $60, $e7, $22, $11, $a0, $1f, $32, $ff, $40, $bf, $60, $c4, $df, $2f, $01
13f2c     10 1F E8 00 
13f30     FF 1A 30 A1 
13f34     3F 10 04 FF 
13f38     20 FF F0 08 | 	byte	$10, $1f, $e8, $00, $ff, $1a, $30, $a1, $3f, $10, $04, $ff, $20, $ff, $f0, $08
13f3c     0F 0F 2B 10 
13f40     B7 30 F7 00 
13f44     4F D2 28 B7 
13f48     34 27 E0 1F | 	byte	$0f, $0f, $2b, $10, $b7, $30, $f7, $00, $4f, $d2, $28, $b7, $34, $27, $e0, $1f
13f4c     D0 2C EF 34 
13f50     EC 2F E0 BF 
13f54     40 48 CF 20 
13f58     DF 15 20 06 | 	byte	$d0, $2c, $ef, $34, $ec, $2f, $e0, $bf, $40, $48, $cf, $20, $df, $15, $20, $06
13f5c     0B 24 CF 0C 
13f60     FD FF 60 D7 
13f64     00 CF 3D 15 
13f68     32 E0 E7 FF | 	byte	$0b, $24, $cf, $0c, $fd, $ff, $60, $d7, $00, $cf, $3d, $15, $32, $e0, $e7, $ff
13f6c     5C C8 1F E0 
13f70     3F C0 2F 10 
13f74     FF 08 08 BF 
13f78     58 28 D1 10 | 	byte	$5c, $c8, $1f, $e0, $3f, $c0, $2f, $10, $ff, $08, $08, $bf, $58, $28, $d1, $10
13f7c     DF 60 12 C2 
13f80     FF EF 20 3F 
13f84     E0 E7 36 00 
13f88     EF 0F 00 3F | 	byte	$df, $60, $12, $c2, $ff, $ef, $20, $3f, $e0, $e7, $36, $00, $ef, $0f, $00, $3f
13f8c     C2 2F 00 0F 
13f90     D9 57 10 BF 
13f94     00 5F E0 EF 
13f98     50 CF 30 10 | 	byte	$c2, $2f, $00, $0f, $d9, $57, $10, $bf, $00, $5f, $e0, $ef, $50, $cf, $30, $10
13f9c     AF 7E E0 F0 
13fa0     FF D3 3C BF 
13fa4     77 00 DF F0 
13fa8     48 F1 F6 FB | 	byte	$af, $7e, $e0, $f0, $ff, $d3, $3c, $bf, $77, $00, $df, $f0, $48, $f1, $f6, $fb
13fac     42 AB 17 60 
13fb0     EF 20 BF D7 
13fb4     50 17 40 DB 
13fb8     D0 2F F3 3C | 	byte	$42, $ab, $17, $60, $ef, $20, $bf, $d7, $50, $17, $40, $db, $d0, $2f, $f3, $3c
13fbc     EE 24 BD 3E 
13fc0     E7 38 16 AA 
13fc4     3F 00 FF 40 
13fc8     40 9F DC FF | 	byte	$ee, $24, $bd, $3e, $e7, $38, $16, $aa, $3f, $00, $ff, $40, $40, $9f, $dc, $ff
13fcc     75 00 BF 40 
13fd0     E4 FF 50 C7 
13fd4     E8 2F 27 00 
13fd8     EF 4C 08 D7 | 	byte	$75, $00, $bf, $40, $e4, $ff, $50, $c7, $e8, $2f, $27, $00, $ef, $4c, $08, $d7
13fdc     CD 4F 51 E0 
13fe0     BF 04 5F 02 
13fe4     00 AF 38 3C 
13fe8     B0 3F 30 C0 | 	byte	$cd, $4f, $51, $e0, $bf, $04, $5f, $02, $00, $af, $38, $3c, $b0, $3f, $30, $c0
13fec     3A DF 0D 30 
13ff0     D1 FF 50 C0 
13ff4     4F D0 1B 10 
13ff8     BF 7F C8 EF | 	byte	$3a, $df, $0d, $30, $d1, $ff, $50, $c0, $4f, $d0, $1b, $10, $bf, $7f, $c8, $ef
13ffc     E8 FF 78 EA 
14000     BA 3B C0 3F 
14004     28 20 AF 0F 
14008     0F 20 CF 6F | 	byte	$e8, $ff, $78, $ea, $ba, $3b, $c0, $3f, $28, $20, $af, $0f, $0f, $20, $cf, $6f
1400c     00 D0 DF 30 
14010     46 E0 08 AF 
14014     62 FB 40 F0 
14018     AF 10 3F 20 | 	byte	$00, $d0, $df, $30, $46, $e0, $08, $af, $62, $fb, $40, $f0, $af, $10, $3f, $20
1401c     FF EB 20 9F 
14020     5F 3C 10 D5 
14024     DF F9 0F 70 
14028     F9 E0 AF 37 | 	byte	$ff, $eb, $20, $9f, $5f, $3c, $10, $d5, $df, $f9, $0f, $70, $f9, $e0, $af, $37
1402c     40 3C A0 2F 
14030     E9 20 FF 50 
14034     BB FF 30 DF 
14038     20 1F 40 B3 | 	byte	$40, $3c, $a0, $2f, $e9, $20, $ff, $50, $bb, $ff, $30, $df, $20, $1f, $40, $b3
1403c     04 EF 68 00 
14040     D7 07 00 5F 
14044     00 B7 30 FF 
14048     00 34 DB 30 | 	byte	$04, $ef, $68, $00, $d7, $07, $00, $5f, $00, $b7, $30, $ff, $00, $34, $db, $30
1404c     CF 30 EF 17 
14050     40 CD FF 0A 
14054     22 00 FF 00 
14058     2F D0 5F DB | 	byte	$cf, $30, $ef, $17, $40, $cd, $ff, $0a, $22, $00, $ff, $00, $2f, $d0, $5f, $db
1405c     10 BF 08 3F 
14060     10 E0 FF 00 
14064     FF 60 BF 00 
14068     FF 10 D7 4F | 	byte	$10, $bf, $08, $3f, $10, $e0, $ff, $00, $ff, $60, $bf, $00, $ff, $10, $d7, $4f
1406c     18 10 B0 DF 
14070     5F 28 D2 FF 
14074     C0 5F 00 30 
14078     B7 D0 FF 70 | 	byte	$18, $10, $b0, $df, $5f, $28, $d2, $ff, $c0, $5f, $00, $30, $b7, $d0, $ff, $70
1407c     E8 EF 24 C6 
14080     DF 5F 20 00 
14084     D7 F5 18 0F 
14088     48 E5 C0 FF | 	byte	$e8, $ef, $24, $c6, $df, $5f, $20, $00, $d7, $f5, $18, $0f, $48, $e5, $c0, $ff
1408c     13 64 E0 9F 
14090     3F 00 3F 00 
14094     08 EF 20 EF 
14098     00 FF 50 10 | 	byte	$13, $64, $e0, $9f, $3f, $00, $3f, $00, $08, $ef, $20, $ef, $00, $ff, $50, $10
1409c     A0 FF 5D 08 
140a0     00 AF 3A 2B 
140a4     00 1A AF 7F 
140a8     C0 1F F7 F0 | 	byte	$a0, $ff, $5d, $08, $00, $af, $3a, $2b, $00, $1a, $af, $7f, $c0, $1f, $f7, $f0
140ac     FF 00 3C C7 
140b0     3F 08 D3 F7 
140b4     28 1F 20 DF 
140b8     F7 00 F7 70 | 	byte	$ff, $00, $3c, $c7, $3f, $08, $d3, $f7, $28, $1f, $20, $df, $f7, $00, $f7, $70
140bc     DF 00 DB EF 
140c0     7E D0 FF F0 
140c4     28 EE 2F E0 
140c8     3F C0 FF 2F | 	byte	$df, $00, $db, $ef, $7e, $d0, $ff, $f0, $28, $ee, $2f, $e0, $3f, $c0, $ff, $2f
140cc     48 ED D0 FF 
140d0     08 FF 50 0F 
140d4     B0 17 FF 50 
140d8     08 C8 E7 3F | 	byte	$48, $ed, $d0, $ff, $08, $ff, $50, $0f, $b0, $17, $ff, $50, $08, $c8, $e7, $3f
140dc     50 C2 17 FB 
140e0     08 FF 03 60 
140e4     F0 BB F7 5B 
140e8     30 DB 10 CF | 	byte	$50, $c2, $17, $fb, $08, $ff, $03, $60, $f0, $bb, $f7, $5b, $30, $db, $10, $cf
140ec     F7 58 1F 00 
140f0     9F 19 4F 00 
140f4     38 8F 32 44 
140f8     C8 3F C0 5A | 	byte	$f7, $58, $1f, $00, $9f, $19, $4f, $00, $38, $8f, $32, $44, $c8, $3f, $c0, $5a
140fc     CF 40 B0 3F 
14100     24 11 C0 FF 
14104     4F 20 D0 FB 
14108     FF 40 EF 40 | 	byte	$cf, $40, $b0, $3f, $24, $11, $c0, $ff, $4f, $20, $d0, $fb, $ff, $40, $ef, $40
1410c     9F 50 2F D0 
14110     F7 1F 50 00 
14114     AF 37 00 FF 
14118     10 08 FF E0 | 	byte	$9f, $50, $2f, $d0, $f7, $1f, $50, $00, $af, $37, $00, $ff, $10, $08, $ff, $e0
1411c     3F 00 DF 0C 
14120     2C FF 00 FF 
14124     20 FF 20 DF 
14128     20 FF 70 9A | 	byte	$3f, $00, $df, $0c, $2c, $ff, $00, $ff, $20, $ff, $20, $df, $20, $ff, $70, $9a
1412c     EF 4F 00 39 
14130     A6 3F F0 2F 
14134     00 1F E0 3F 
14138     E0 00 2E D0 | 	byte	$ef, $4f, $00, $39, $a6, $3f, $f0, $2f, $00, $1f, $e0, $3f, $e0, $00, $2e, $d0
1413c     3F 20 C6 0F 
14140     2F E0 0F 1F 
14144     E4 5E A9 24 
14148     EF 40 1F E0 | 	byte	$3f, $20, $c6, $0f, $2f, $e0, $0f, $1f, $e4, $5e, $a9, $24, $ef, $40, $1f, $e0
1414c     10 BF 48 30 
14150     E7 00 BF 58 
14154     2F 00 FF E4 
14158     3F 00 FF 10 | 	byte	$10, $bf, $48, $30, $e7, $00, $bf, $58, $2f, $00, $ff, $e4, $3f, $00, $ff, $10
1415c     17 10 DF 40 
14160     D7 1C 0B 00 
14164     17 10 FF 10 
14168     0B E9 52 AB | 	byte	$17, $10, $df, $40, $d7, $1c, $0b, $00, $17, $10, $ff, $10, $0b, $e9, $52, $ab
1416c     49 C8 3F 60 
14170     D6 CF 00 1F 
14174     40 0C CD 10 
14178     EF 2C 20 DF | 	byte	$49, $c8, $3f, $60, $d6, $cf, $00, $1f, $40, $0c, $cd, $10, $ef, $2c, $20, $df
1417c     40 EF 08 E0 
14180     2F 40 00 BF 
14184     38 F4 3F E0 
14188     1B DF 40 FF | 	byte	$40, $ef, $08, $e0, $2f, $40, $00, $bf, $38, $f4, $3f, $e0, $1b, $df, $40, $ff
1418c     20 C9 13 EF 
14190     1B 50 DF D0 
14194     FF 40 CF 3C 
14198     00 DF 30 04 | 	byte	$20, $c9, $13, $ef, $1b, $50, $df, $d0, $ff, $40, $cf, $3c, $00, $df, $30, $04
1419c     CF 58 F5 00 
141a0     DF 40 3F CC 
141a4     F8 DF 58 DD 
141a8     FD 3B E0 FF | 	byte	$cf, $58, $f5, $00, $df, $40, $3f, $cc, $f8, $df, $58, $dd, $fd, $3b, $e0, $ff
141ac     01 40 D7 20 
141b0     DF 08 44 C7 
141b4     50 AF 70 A9 
141b8     17 47 00 EF | 	byte	$01, $40, $d7, $20, $df, $08, $44, $c7, $50, $af, $70, $a9, $17, $47, $00, $ef
141bc     EF 50 FF 00 
141c0     DF 17 30 DF 
141c4     20 FF 20 DF 
141c8     20 F7 00 37 | 	byte	$ef, $50, $ff, $00, $df, $17, $30, $df, $20, $ff, $20, $df, $20, $f7, $00, $37
141cc     D1 50 BF 20 
141d0     DF 70 E0 DF 
141d4     10 DB 5F 20 
141d8     CF 14 FF 20 | 	byte	$d1, $50, $bf, $20, $df, $70, $e0, $df, $10, $db, $5f, $20, $cf, $14, $ff, $20
141dc     DF 40 DF 40 
141e0     DF 00 1F 00 
141e4     28 C0 FF 40 
141e8     00 3F E0 DF | 	byte	$df, $40, $df, $40, $df, $00, $1f, $00, $28, $c0, $ff, $40, $00, $3f, $e0, $df
141ec     E3 3F 50 C0 
141f0     E8 FF 30 0F 
141f4     40 CF 00 1F 
141f8     10 1F 20 AD | 	byte	$e3, $3f, $50, $c0, $e8, $ff, $30, $0f, $40, $cf, $00, $1f, $10, $1f, $20, $ad
141fc     FF 00 6F 00 
14200     E7 CB 00 3F 
14204     40 FF CA F7 
14208     FF 40 FF F0 | 	byte	$ff, $00, $6f, $00, $e7, $cb, $00, $3f, $40, $ff, $ca, $f7, $ff, $40, $ff, $f0
1420c     08 CF 70 BF 
14210     30 FF 00 FF 
14214     F5 28 FF 24 
14218     C8 2F E0 3F | 	byte	$08, $cf, $70, $bf, $30, $ff, $00, $ff, $f5, $28, $ff, $24, $c8, $2f, $e0, $3f
1421c     00 E0 BF 3C 
14220     64 D0 D7 24 
14224     EF 30 BF 70 
14228     BF 28 CF F9 | 	byte	$00, $e0, $bf, $3c, $64, $d0, $d7, $24, $ef, $30, $bf, $70, $bf, $28, $cf, $f9
1422c     6A D0 2F C4 
14230     13 3F E0 FF 
14234     00 18 FF 10 
14238     FF E3 00 FF | 	byte	$6a, $d0, $2f, $c4, $13, $3f, $e0, $ff, $00, $18, $ff, $10, $ff, $e3, $00, $ff
1423c     50 BF 60 BF 
14240     10 DF 30 F3 
14244     48 00 C4 F7 
14248     3F 10 FF E0 | 	byte	$50, $bf, $60, $bf, $10, $df, $30, $f3, $48, $00, $c4, $f7, $3f, $10, $ff, $e0
1424c     1F E0 3F 00 
14250     FF 00 FF 00 
14254     DF 50 DF 20 
14258     C9 ED 40 17 | 	byte	$1f, $e0, $3f, $00, $ff, $00, $ff, $00, $df, $50, $df, $20, $c9, $ed, $40, $17
1425c     50 A0 EF 0F 
14260     00 5F 20 D8 
14264     9F 14 57 40 
14268     B5 F7 10 FF | 	byte	$50, $a0, $ef, $0f, $00, $5f, $20, $d8, $9f, $14, $57, $40, $b5, $f7, $10, $ff
1426c     60 BF E8 30 
14270     CF 7E AB 00 
14274     FF E8 4F 08 
14278     E8 FF E0 44 | 	byte	$60, $bf, $e8, $30, $cf, $7e, $ab, $00, $ff, $e8, $4f, $08, $e8, $ff, $e0, $44
1427c     CF 30 1B C0 
14280     1F 20 00 FF 
14284     E0 1F 20 BF 
14288     20 1F 00 E0 | 	byte	$cf, $30, $1b, $c0, $1f, $20, $00, $ff, $e0, $1f, $20, $bf, $20, $1f, $00, $e0
1428c     FF 2F 00 1F 
14290     08 CF 1E 13 
14294     3B C0 FF 20 
14298     0F 0F 00 F8 | 	byte	$ff, $2f, $00, $1f, $08, $cf, $1e, $13, $3b, $c0, $ff, $20, $0f, $0f, $00, $f8
1429c     2D B0 3F 20 
142a0     FB 00 DF 0F 
142a4     30 CF 14 2C 
142a8     FF D0 DF 7C | 	byte	$2d, $b0, $3f, $20, $fb, $00, $df, $0f, $30, $cf, $14, $2c, $ff, $d0, $df, $7c
142ac     E0 BF 40 E9 
142b0     EA 3F C8 57 
142b4     89 5A FB 00 
142b8     4C A5 04 37 | 	byte	$e0, $bf, $40, $e9, $ea, $3f, $c8, $57, $89, $5a, $fb, $00, $4c, $a5, $04, $37
142bc     C8 5F D0 37 
142c0     B7 20 FF E0 
142c4     5F E0 F0 D7 
142c8     20 1F 20 BF | 	byte	$c8, $5f, $d0, $37, $b7, $20, $ff, $e0, $5f, $e0, $f0, $d7, $20, $1f, $20, $bf
142cc     48 DF 40 A0 
142d0     3F 00 08 FF 
142d4     20 FF C8 DF 
142d8     58 00 35 90 | 	byte	$48, $df, $40, $a0, $3f, $00, $08, $ff, $20, $ff, $c8, $df, $58, $00, $35, $90
142dc     FF 0B 78 D0 
142e0     EC CB F7 7F 
142e4     E0 EF 00 FF 
142e8     08 EF 42 00 | 	byte	$ff, $0b, $78, $d0, $ec, $cb, $f7, $7f, $e0, $ef, $00, $ff, $08, $ef, $42, $00
142ec     E0 1F 00 EF 
142f0     3F E0 FF E0 
142f4     FF 2B 10 1F 
142f8     D0 DF 40 DF | 	byte	$e0, $1f, $00, $ef, $3f, $e0, $ff, $e0, $ff, $2b, $10, $1f, $d0, $df, $40, $df
142fc     40 AF 2F 40 
14300     9B 0A 3F 20 
14304     BF 00 1F 40 
14308     BF 1F 40 BF | 	byte	$40, $af, $2f, $40, $9b, $0a, $3f, $20, $bf, $00, $1f, $40, $bf, $1f, $40, $bf
1430c     28 DF 60 BF 
14310     17 0C 1F 20 
14314     C7 1F 20 DF 
14318     5C F0 C1 48 | 	byte	$28, $df, $60, $bf, $17, $0c, $1f, $20, $c7, $1f, $20, $df, $5c, $f0, $c1, $48
1431c     AF 70 02 C0 
14320     3A B3 74 DF 
14324     10 FF D0 2F 
14328     10 50 C1 D0 | 	byte	$af, $70, $02, $c0, $3a, $b3, $74, $df, $10, $ff, $d0, $2f, $10, $50, $c1, $d0
1432c     3F E0 1F F5 
14330     58 A0 2E D7 
14334     10 2C DF 60 
14338     C3 10 BF 60 | 	byte	$3f, $e0, $1f, $f5, $58, $a0, $2e, $d7, $10, $2c, $df, $60, $c3, $10, $bf, $60
1433c     F0 27 C0 30 
14340     EF 48 C0 FF 
14344     29 00 FF 20 
14348     FF 20 EF E0 | 	byte	$f0, $27, $c0, $30, $ef, $48, $c0, $ff, $29, $00, $ff, $20, $ff, $20, $ef, $e0
1434c     2F 40 B5 E7 
14350     2F 40 E0 F7 
14354     E7 10 1F 00 
14358     20 CB 30 EF | 	byte	$2f, $40, $b5, $e7, $2f, $40, $e0, $f7, $e7, $10, $1f, $00, $20, $cb, $30, $ef
1435c     00 FF 40 F7 
14360     DB 54 DF F2 
14364     E0 1F 20 FF 
14368     20 BF 10 FF | 	byte	$00, $ff, $40, $f7, $db, $54, $df, $f2, $e0, $1f, $20, $ff, $20, $bf, $10, $ff
1436c     E5 58 B3 60 
14370     9F 7F A0 0F 
14374     CF 7F 00 D7 
14378     E0 1F 10 0F | 	byte	$e5, $58, $b3, $60, $9f, $7f, $a0, $0f, $cf, $7f, $00, $d7, $e0, $1f, $10, $0f
1437c     08 22 9F 3A 
14380     3F D0 3F 94 
14384     FF 60 C7 68 
14388     A3 40 93 3F | 	byte	$08, $22, $9f, $3a, $3f, $d0, $3f, $94, $ff, $60, $c7, $68, $a3, $40, $93, $3f
1438c     40 10 DF D0 
14390     FF 63 00 FF 
14394     00 FF E0 1F 
14398     0F 30 CF 15 | 	byte	$40, $10, $df, $d0, $ff, $63, $00, $ff, $00, $ff, $e0, $1f, $0f, $30, $cf, $15
1439c     FF 14 FB 1A 
143a0     D0 2D 1C FF 
143a4     30 B0 17 37 
143a8     20 DB FF 28 | 	byte	$ff, $14, $fb, $1a, $d0, $2d, $1c, $ff, $30, $b0, $17, $37, $20, $db, $ff, $28
143ac     F3 F1 2D 20 
143b0     F3 E8 EF 17 
143b4     44 10 D3 00 
143b8     ED 1B 5C E0 | 	byte	$f3, $f1, $2d, $20, $f3, $e8, $ef, $17, $44, $10, $d3, $00, $ed, $1b, $5c, $e0
143bc     FB EF 10 11 
143c0     05 13 18 D2 
143c4     2F 20 FB D5 
143c8     1F 00 27 00 | 	byte	$fb, $ef, $10, $11, $05, $13, $18, $d2, $2f, $20, $fb, $d5, $1f, $00, $27, $00
143cc     FF 00 EF 18 
143d0     D7 67 08 D0 
143d4     BF 5B 08 DF 
143d8     00 4C 00 F7 | 	byte	$ff, $00, $ef, $18, $d7, $67, $08, $d0, $bf, $5b, $08, $df, $00, $4c, $00, $f7
143dc     D0 3F 08 FD 
143e0     F6 17 EB 2F 
143e4     00 DF 38 FD 
143e8     E0 3C D1 0A | 	byte	$d0, $3f, $08, $fd, $f6, $17, $eb, $2f, $00, $df, $38, $fd, $e0, $3c, $d1, $0a
143ec     1F 38 C0 2F 
143f0     E0 20 0F 00 
143f4     EF 30 20 CF 
143f8     24 F7 17 10 | 	byte	$1f, $38, $c0, $2f, $e0, $20, $0f, $00, $ef, $30, $20, $cf, $24, $f7, $17, $10
143fc     02 FF 10 0F 
14400     00 0F 10 EF 
14404     10 1D 18 F0 
14408     DB 1F 40 00 | 	byte	$02, $ff, $10, $0f, $00, $0f, $10, $ef, $10, $1d, $18, $f0, $db, $1f, $40, $00
1440c     EF FB 28 0A 
14410     E9 1F 20 00 
14414     ED FB 27 24 
14418     00 EB 0D 0F | 	byte	$ef, $fb, $28, $0a, $e9, $1f, $20, $00, $ed, $fb, $27, $24, $00, $eb, $0d, $0f
1441c     18 1B 04 00 
14420     F8 1B 1C E8 
14424     0F 10 0B 24 
14428     E0 17 14 F8 | 	byte	$18, $1b, $04, $00, $f8, $1b, $1c, $e8, $0f, $10, $0b, $24, $e0, $17, $14, $f8
1442c     F7 3F 20 ED 
14430     E8 0F 3B 00 
14434     DF 3D 38 E4 
14438     DF 0B 22 02 | 	byte	$f7, $3f, $20, $ed, $e8, $0f, $3b, $00, $df, $3d, $38, $e4, $df, $0b, $22, $02
1443c     23 10 FF 00 
14440     FF F4 2F 28 
14444     F0 DF 30 18 
14448     E0 17 0F 30 | 	byte	$23, $10, $ff, $00, $ff, $f4, $2f, $28, $f0, $df, $30, $18, $e0, $17, $0f, $30
1444c     EF 09 F0 FF 
14450     3E 10 F8 FA 
14454     EC 2F 30 DF 
14458     20 EF 34 E8 | 	byte	$ef, $09, $f0, $ff, $3e, $10, $f8, $fa, $ec, $2f, $30, $df, $20, $ef, $34, $e8
1445c     0F 09 07 10 
14460     FF 00 2F 00 
14464     FF 00 1F 10 
14468     F7 00 2F 18 | 	byte	$0f, $09, $07, $10, $ff, $00, $2f, $00, $ff, $00, $1f, $10, $f7, $00, $2f, $18
1446c     D5 13 27 30 
14470     E3 12 F7 20 
14474     FF 1F 10 FF 
14478     F2 10 0F 18 | 	byte	$d5, $13, $27, $30, $e3, $12, $f7, $20, $ff, $1f, $10, $ff, $f2, $10, $0f, $18
1447c     17 00 E7 17 
14480     20 FF 28 F7 
14484     EA 17 18 1A 
14488     FA FA 3C F0 | 	byte	$17, $00, $e7, $17, $20, $ff, $28, $f7, $ea, $17, $18, $1a, $fa, $fa, $3c, $f0
1448c     17 DB 40 DD 
14490     3D D4 4F D0 
14494     0F 13 20 EF 
14498     04 2D 08 00 | 	byte	$17, $db, $40, $dd, $3d, $d4, $4f, $d0, $0f, $13, $20, $ef, $04, $2d, $08, $00
1449c     FF 10 EF 30 
144a0     16 F5 10 CF 
144a4     44 EF 27 19 
144a8     E0 EF 60 D8 | 	byte	$ff, $10, $ef, $30, $16, $f5, $10, $cf, $44, $ef, $27, $19, $e0, $ef, $60, $d8
144ac     0F 07 28 F7 
144b0     F3 11 18 EF 
144b4     2F 04 13 E4 
144b8     FF 27 20 E0 | 	byte	$0f, $07, $28, $f7, $f3, $11, $18, $ef, $2f, $04, $13, $e4, $ff, $27, $20, $e0
144bc     27 20 EF 10 
144c0     EF 20 FF 20 
144c4     C7 64 D4 3D 
144c8     C0 3F E7 34 | 	byte	$27, $20, $ef, $10, $ef, $20, $ff, $20, $c7, $64, $d4, $3d, $c0, $3f, $e7, $34
144cc     DF 14 FF 10 
144d0     F2 2B 10 0B 
144d4     F0 0F 08 0B 
144d8     00 2B 20 CB | 	byte	$df, $14, $ff, $10, $f2, $2b, $10, $0b, $f0, $0f, $08, $0b, $00, $2b, $20, $cb
144dc     34 07 00 1B 
144e0     E7 38 F3 0C 
144e4     05 F0 37 00 
144e8     14 F8 0C F9 | 	byte	$34, $07, $00, $1b, $e7, $38, $f3, $0c, $05, $f0, $37, $00, $14, $f8, $0c, $f9
144ec     1F 08 17 00 
144f0     EB 04 2F 28 
144f4     E3 20 DF 20 
144f8     07 11 1A E4 | 	byte	$1f, $08, $17, $00, $eb, $04, $2f, $28, $e3, $20, $df, $20, $07, $11, $1a, $e4
144fc     1F 0B 04 17 
14500     E8 1F 00 13 
14504     13 00 1F 20 
14508     DF 40 FF 10 | 	byte	$1f, $0b, $04, $17, $e8, $1f, $00, $13, $13, $00, $1f, $20, $df, $40, $ff, $10
1450c     FF 20 FB 18 
14510     E8 0F 42 F0 
14514     FF F9 0C 2D 
14518     F0 0D 1C F4 | 	byte	$ff, $20, $fb, $18, $e8, $0f, $42, $f0, $ff, $f9, $0c, $2d, $f0, $0d, $1c, $f4
1451c     1B E8 2F 00 
14520     17 F0 1D EF 
14524     20 07 10 D7 
14528     3B 12 18 CF | 	byte	$1b, $e8, $2f, $00, $17, $f0, $1d, $ef, $20, $07, $10, $d7, $3b, $12, $18, $cf
1452c     30 DD 28 20 
14530     D6 35 F0 01 
14534     0A 0F 28 06 
14538     E0 17 08 0F | 	byte	$30, $dd, $28, $20, $d6, $35, $f0, $01, $0a, $0f, $28, $06, $e0, $17, $08, $0f
1453c     FB 38 FB E5 
14540     F4 2F 20 E7 
14544     1B 00 FA 2C 
14548     00 EF 30 ED | 	byte	$fb, $38, $fb, $e5, $f4, $2f, $20, $e7, $1b, $00, $fa, $2c, $00, $ef, $30, $ed
1454c     23 05 02 FF 
14550     00 FF 30 F1 
14554     0D E8 15 2E 
14558     08 FF 00 0B | 	byte	$23, $05, $02, $ff, $00, $ff, $30, $f1, $0d, $e8, $15, $2e, $08, $ff, $00, $0b
1455c     08 17 08 FF 
14560     10 0B 0F 08 
14564     0D 00 0F 1F 
14568     00 FF 00 FF | 	byte	$08, $17, $08, $ff, $10, $0b, $0f, $08, $0d, $00, $0f, $1f, $00, $ff, $00, $ff
1456c     10 FF 20 FF 
14570     08 FF 23 F4 
14574     FF 20 F5 32 
14578     E7 1B F6 08 | 	byte	$10, $ff, $20, $ff, $08, $ff, $23, $f4, $ff, $20, $f5, $32, $e7, $1b, $f6, $08
1457c     23 F9 10 FF 
14580     08 FF 10 FF 
14584     1C F7 04 0F 
14588     F0 2F 10 EB | 	byte	$23, $f9, $10, $ff, $08, $ff, $10, $ff, $1c, $f7, $04, $0f, $f0, $2f, $10, $eb
1458c     10 F7 3A F0 
14590     EF 26 00 19 
14594     E9 18 FF 28 
14598     F0 0F 00 2F | 	byte	$10, $f7, $3a, $f0, $ef, $26, $00, $19, $e9, $18, $ff, $28, $f0, $0f, $00, $2f
1459c     00 F6 0F 20 
145a0     EF 12 1D F0 
145a4     FF 1B F4 2C 
145a8     E2 1B FF 04 | 	byte	$00, $f6, $0f, $20, $ef, $12, $1d, $f0, $ff, $1b, $f4, $2c, $e2, $1b, $ff, $04
145ac     17 00 F9 1D 
145b0     08 17 04 F7 
145b4     00 16 F8 3E 
145b8     E8 F7 10 0F | 	byte	$17, $00, $f9, $1d, $08, $17, $04, $f7, $00, $16, $f8, $3e, $e8, $f7, $10, $0f
145bc     0F 20 DF 28 
145c0     DF 3C E0 2A 
145c4     E4 14 0D 00 
145c8     1B 20 EF 0B | 	byte	$0f, $20, $df, $28, $df, $3c, $e0, $2a, $e4, $14, $0d, $00, $1b, $20, $ef, $0b
145cc     00 1F 08 FF 
145d0     20 EF 18 F7 
145d4     10 FF 24 EB 
145d8     15 EF 27 08 | 	byte	$00, $1f, $08, $ff, $20, $ef, $18, $f7, $10, $ff, $24, $eb, $15, $ef, $27, $08
145dc     F0 17 00 17 
145e0     00 15 04 0B 
145e4     00 0E ED 27 
145e8     00 FF 28 DB | 	byte	$f0, $17, $00, $17, $00, $15, $04, $0b, $00, $0e, $ed, $27, $00, $ff, $28, $db
145ec     0C 16 07 20 
145f0     EF 06 0F 18 
145f4     00 FF 02 1F 
145f8     F0 09 0F 08 | 	byte	$0c, $16, $07, $20, $ef, $06, $0f, $18, $00, $ff, $02, $1f, $f0, $09, $0f, $08
145fc     07 FB 1C F8 
14600     0F F8 0F 18 
14604     F0 0F 08 0F 
14608     10 F7 FF 20 | 	byte	$07, $fb, $1c, $f8, $0f, $f8, $0f, $18, $f0, $0f, $08, $0f, $10, $f7, $ff, $20
1460c     EF 20 F7 11 
14610     14 E8 17 04 
14614     12 0B E8 2F 
14618     00 F7 08 10 | 	byte	$ef, $20, $f7, $11, $14, $e8, $17, $04, $12, $0b, $e8, $2f, $00, $f7, $08, $10
1461c     FF 08 FF 04 
14620     07 0B 0A FF 
14624     04 18 E5 2C 
14628     E7 1C FB 00 | 	byte	$ff, $08, $ff, $04, $07, $0b, $0a, $ff, $04, $18, $e5, $2c, $e7, $1c, $fb, $00
1462c     17 F0 37 E8 
14630     0F E8 1F 00 
14634     00 FF 20 E7 
14638     10 FF 14 FD | 	byte	$17, $f0, $37, $e8, $0f, $e8, $1f, $00, $00, $ff, $20, $e7, $10, $ff, $14, $fd
1463c     10 EF 20 F3 
14640     20 EF 0C 0F 
14644     F3 2E E0 25 
14648     F0 F9 1F F0 | 	byte	$10, $ef, $20, $f3, $20, $ef, $0c, $0f, $f3, $2e, $e0, $25, $f0, $f9, $1f, $f0
1464c     13 0D 00 FF 
14650     00 FF 05 14 
14654     0D 00 F7 20 
14658     F7 10 FF 03 | 	byte	$13, $0d, $00, $ff, $00, $ff, $05, $14, $0d, $00, $f7, $20, $f7, $10, $ff, $03
1465c     18 F7 00 0F 
14660     14 F8 0F F1 
14664     1F 00 FE 0B 
14668     10 00 FB 0F | 	byte	$18, $f7, $00, $0f, $14, $f8, $0f, $f1, $1f, $00, $fe, $0b, $10, $00, $fb, $0f
1466c     0C 0F 00 FF 
14670     0C 09 FD 20 
14674     EF 14 FE F0 
14678     1F 00 0A FB | 	byte	$0c, $0f, $00, $ff, $0c, $09, $fd, $20, $ef, $14, $fe, $f0, $1f, $00, $0a, $fb
1467c     02 17 00 07 
14680     01 15 F7 05 
14684     0F 04 04 07 
14688     04 FF 10 0F | 	byte	$02, $17, $00, $07, $01, $15, $f7, $05, $0f, $04, $04, $07, $04, $ff, $10, $0f
1468c     F9 0F 02 07 
14690     10 F7 10 FB 
14694     18 F2 13 F2 
14698     22 F8 06 07 | 	byte	$f9, $0f, $02, $07, $10, $f7, $10, $fb, $18, $f2, $13, $f2, $22, $f8, $06, $07
1469c     0A FB 11 07 
146a0     00 FF 10 07 
146a4     05 02 06 06 
146a8     08 10 F9 16 | 	byte	$0a, $fb, $11, $07, $00, $ff, $10, $07, $05, $02, $06, $06, $08, $10, $f9, $16
146ac     EE 0B 12 F8 
146b0     11 03 04 0F 
146b4     00 FF 04 11 
146b8     0B F5 0F 0A | 	byte	$ee, $0b, $12, $f8, $11, $03, $04, $0f, $00, $ff, $04, $11, $0b, $f5, $0f, $0a
146bc     EF 1F F0 09 
146c0     16 F1 22 EA 
146c4     10 FF 08 07 
146c8     FE 0A 0F 00 | 	byte	$ef, $1f, $f0, $09, $16, $f1, $22, $ea, $10, $ff, $08, $07, $fe, $0a, $0f, $00
146cc     FE 06 10 08 
146d0     F5 14 06 0E 
146d4     F4 FF 10 06 
146d8     0D 08 FB 08 | 	byte	$fe, $06, $10, $08, $f5, $14, $06, $0e, $f4, $ff, $10, $06, $0d, $08, $fb, $08
146dc     07 0A 0B F9 
146e0     16 00 FF 09 
146e4     0B 0C F4 0B 
146e8     10 0A 0E 00 | 	byte	$07, $0a, $0b, $f9, $16, $00, $ff, $09, $0b, $0c, $f4, $0b, $10, $0a, $0e, $00
146ec     FF 18 09 FB 
146f0     10 FF 0E FB 
146f4     FF 11 06 0F 
146f8     02 09 01 10 | 	byte	$ff, $18, $09, $fb, $10, $ff, $0e, $fb, $ff, $11, $06, $0f, $02, $09, $01, $10
146fc     00 0F 09 15 
14700     F5 FF 11 0C 
14704     07 04 F7 14 
14708     0E 04 0A 06 | 	byte	$00, $0f, $09, $15, $f5, $ff, $11, $0c, $07, $04, $f7, $14, $0e, $04, $0a, $06
1470c     00 07 12 04 
14710     10 00 00 0F 
14714     10 FF 08 FF 
14718     12 02 07 0A | 	byte	$00, $07, $12, $04, $10, $00, $00, $0f, $10, $ff, $08, $ff, $12, $02, $07, $0a
1471c     0E 00 04 08 
14720     11 07 0A F7 
14724     12 0C 00 17 
14728     00 07 0B 0C | 	byte	$0e, $00, $04, $08, $11, $07, $0a, $f7, $12, $0c, $00, $17, $00, $07, $0b, $0c
1472c     08 09 FD 16 
14730     02 05 07 08 
14734     0B 0C 06 0B 
14738     08 0C 00 FF | 	byte	$08, $09, $fd, $16, $02, $05, $07, $08, $0b, $0c, $06, $0b, $08, $0c, $00, $ff
1473c     13 06 04 0E 
14740     09 08 05 0D 
14744     04 0B 04 1F 
14748     00 FB 09 16 | 	byte	$13, $06, $04, $0e, $09, $08, $05, $0d, $04, $0b, $04, $1f, $00, $fb, $09, $16
1474c     FC 0A 0B 0B 
14750     10 00 09 FD 
14754     1B 07 04 0A 
14758     09 12 00 02 | 	byte	$fc, $0a, $0b, $0b, $10, $00, $09, $fd, $1b, $07, $04, $0a, $09, $12, $00, $02
1475c     13 0C 03 0A 
14760     0E 06 04 0D 
14764     07 11 05 01 
14768     0A 10 12 02 | 	byte	$13, $0c, $03, $0a, $0e, $06, $04, $0d, $07, $11, $05, $01, $0a, $10, $12, $02
1476c     07 FA 17 0C 
14770     09 09 04 03 
14774     0A 11 11 00 
14778     06 05 0B 14 | 	byte	$07, $fa, $17, $0c, $09, $09, $04, $03, $0a, $11, $11, $00, $06, $05, $0b, $14
1477c     09 08 FB 10 
14780     0A 05 0A 0B 
14784     0B 05 07 10 
14788     08 01 09 0C | 	byte	$09, $08, $fb, $10, $0a, $05, $0a, $0b, $0b, $05, $07, $10, $08, $01, $09, $0c
1478c     0C 09 09 07 
14790     02 0B 10 05 
14794     01 0F 0C 05 
14798     0A 00 0F 08 | 	byte	$0c, $09, $09, $07, $02, $0b, $10, $05, $01, $0f, $0c, $05, $0a, $00, $0f, $08
1479c     0F 08 06 0A 
147a0     09 09 00 0F 
147a4     10 FF 04 0F 
147a8     08 0D FB 10 | 	byte	$0f, $08, $06, $0a, $09, $09, $00, $0f, $10, $ff, $04, $0f, $08, $0d, $fb, $10
147ac     02 0B 0F 0C 
147b0     00 06 0E 06 
147b4     07 0D 06 01 
147b8     0C 04 11 08 | 	byte	$02, $0b, $0f, $0c, $00, $06, $0e, $06, $07, $0d, $06, $01, $0c, $04, $11, $08
147bc     03 10 09 03 
147c0     13 00 07 04 
147c4     0F 0D 05 0C 
147c8     05 03 0D 0C | 	byte	$03, $10, $09, $03, $13, $00, $07, $04, $0f, $0d, $05, $0c, $05, $03, $0d, $0c
147cc     08 0B 00 0A 
147d0     0C 13 06 04 
147d4     05 09 0F 08 
147d8     0E 0A 08 FF | 	byte	$08, $0b, $00, $0a, $0c, $13, $06, $04, $05, $09, $0f, $08, $0e, $0a, $08, $ff
147dc     10 0D 08 08 
147e0     04 0D 0B 10 
147e4     04 08 07 0D 
147e8     0C 08 0D 0D | 	byte	$10, $0d, $08, $08, $04, $0d, $0b, $10, $04, $08, $07, $0d, $0c, $08, $0d, $0d
147ec     02 09 0D 0E 
147f0     07 07 0C 0C 
147f4     07 0E 07 07 
147f8     10 05 15 00 | 	byte	$02, $09, $0d, $0e, $07, $07, $0c, $0c, $07, $0e, $07, $07, $10, $05, $15, $00
147fc     0F 07 10 FF 
14800     0E 07 0E 0C 
14804     0A 11 02 07 
14808     0C 0B 11 06 | 	byte	$0f, $07, $10, $ff, $0e, $07, $0e, $0c, $0a, $11, $02, $07, $0c, $0b, $11, $06
1480c     10 FE 0F 0B 
14810     0C 07 08 0B 
14814     08 0B 10 09 
14818     00 0C 10 0B | 	byte	$10, $fe, $0f, $0b, $0c, $07, $08, $0b, $08, $0b, $10, $09, $00, $0c, $10, $0b
1481c     0B 0C 03 08 
14820     0F 08 0E 0D 
14824     FB 15 00 0F 
14828     10 05 04 0C | 	byte	$0b, $0c, $03, $08, $0f, $08, $0e, $0d, $fb, $15, $00, $0f, $10, $05, $04, $0c
1482c     00 00 00 00 
14830     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
14834                 | 	alignl
14834                 | _hng030rm_spin2_dat_
14834     00 00 00 00 
14838     00 00 00 00 
1483c     00 00 00 00 
14840     00 00 00 00 
14844     00 00 00    | vga_font       file "vgafont.def"
14847     7E 81 A5 81 
1484b     81 BD 99 81 
1484f     81 7E 00 00 
14853     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
14857     7E FF DB FF 
1485b     FF C3 E7 FF 
1485f     FF 7E 00 00 
14863     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
14867     00 36 7F 7F 
1486b     7F 7F 3E 1C 
1486f     08 00 00 00 
14873     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
14877     00 08 1C 3E 
1487b     7F 3E 1C 08 
1487f     00 00 00 00 
14883     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
14887     18 3C 3C E7 
1488b     E7 E7 18 18 
1488f     3C 00 00 00 
14893     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
14897     18 3C 7E FF 
1489b     FF 7E 18 18 
1489f     3C 00 00 00 
148a3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
148a7     00 00 00 18 
148ab     3C 3C 18 00 
148af     00 00 00 00 
148b3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
148b7     FF FF FF E7 
148bb     C3 C3 E7 FF 
148bf     FF FF FF FF 
148c3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
148c7     00 00 3C 66 
148cb     42 42 66 3C 
148cf     00 00 00 00 
148d3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
148d7     FF FF C3 99 
148db     BD BD 99 C3 
148df     FF FF FF FF 
148e3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
148e7     78 70 58 4C 
148eb     1E 33 33 33 
148ef     33 1E 00 00 
148f3     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
148f7     3C 66 66 66 
148fb     66 3C 18 7E 
148ff     18 18 00 00 
14903     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
14907     FC CC FC 0C 
1490b     0C 0C 0C 0E 
1490f     0F 07 00 00 
14913     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
14917     FE C6 FE C6 
1491b     C6 C6 C6 E6 
1491f     E7 67 03 00 
14923     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
14927     18 18 DB 3C 
1492b     E7 3C DB 18 
1492f     18 00 00 00 
14933     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
14937     03 07 0F 1F 
1493b     7F 1F 0F 07 
1493f     03 01 00 00 
14943     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
14947     60 70 78 7C 
1494b     7F 7C 78 70 
1494f     60 40 00 00 
14953     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
14957     18 3C 7E 18 
1495b     18 18 7E 3C 
1495f     18 00 00 00 
14963     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
14967     66 66 66 66 
1496b     66 66 66    | 	byte	$66[7]
1496e     00 66 66 00 
14972     00 00 00 00 
14976     00 FE DB DB 
1497a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1497e     D8 D8 D8 00 
14982     00 00 00 3E 
14986     63 06 1C 36 
1498a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1498e     30 63 3E 00 
14992     00 00 00 00 
14996     00 00 00 00 
1499a     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1499e     7F 7F 7F 00 
149a2     00 00 00 00 
149a6     00 18 3C 7E 
149aa     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
149ae     3C 18 7E 00 
149b2     00 00 00 00 
149b6     00 18 3C 7E 
149ba     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
149be     18 18 18 00 
149c2     00 00 00 00 
149c6     00 18 18 18 
149ca     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
149ce     7E 3C 18 00 
149d2     00 00 00 00 
149d6     00 00 00 18 
149da     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
149de     00 00 00 00 
149e2     00 00 00 00 
149e6     00 00 00    | 	byte	$00[11]
149e9     0C 06 7F 06 
149ed     0C 00 00 00 
149f1     00 00 00 00 
149f5     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
149f9     00 03 03 03 
149fd     7F 00 00 00 
14a01     00 00 00 00 
14a05     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14a09     14 36 7F 36 
14a0d     14 00 00 00 
14a11     00 00 00 00 
14a15     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
14a19     1C 1C 3E 3E 
14a1d     7F 7F 00 00 
14a21     00 00 00 00 
14a25     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
14a29     7F 3E 3E 1C 
14a2d     1C 08 00 00 
14a31     00 00 00 00 
14a35     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14a39     00 00 00 00 
14a3d     00 00 00 00 
14a41     00 00 00 00 
14a45     00 00       | 	byte	$00[14]
14a47     18 3C 3C 3C 
14a4b     18 18 18 00 
14a4f     18 18 00 00 
14a53     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
14a57     66 24 00 00 
14a5b     00 00 00 00 
14a5f     00 00 00 00 
14a63     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14a67     00 36 36 7F 
14a6b     36 36 36 7F 
14a6f     36 36 00 00 
14a73     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
14a77     3E 63 43 03 
14a7b     3E 60 60 61 
14a7f     63 3E 18 18 
14a83     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
14a87     00 00 43 63 
14a8b     30 18 0C 06 
14a8f     63 61 00 00 
14a93     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
14a97     1C 36 36 1C 
14a9b     6E 3B 33 33 
14a9f     33 6E 00 00 
14aa3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
14aa7     0C 0C 0C 06 
14aab     00 00 00 00 
14aaf     00 00 00 00 
14ab3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14ab7     30 18 0C 0C 
14abb     0C 0C 0C 0C 
14abf     18 30 00 00 
14ac3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
14ac7     0C 18 30 30 
14acb     30 30 30 30 
14acf     18 0C 00 00 
14ad3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
14ad7     00 00 00 66 
14adb     3C FF 3C 66 
14adf     00 00 00 00 
14ae3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
14ae7     00 00 00 18 
14aeb     18 7E 18 18 
14aef     00 00 00 00 
14af3     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
14af7     00 00 00 00 
14afb     00 00 00 00 | 	byte	$00[8]
14aff     18 18 18 0C 
14b03     00 00 00 00 
14b07     00 00 00 00 
14b0b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
14b0f     00 00 00 00 
14b13     00 00 00 00 
14b17     00 00 00 00 
14b1b     00 00 00 00 | 	byte	$00[16]
14b1f     18 18 00 00 
14b23     00 00 00 00 
14b27     00 00 40 60 
14b2b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
14b2f     03 01 00 00 
14b33     00 00 00 00 
14b37     1C 36 63 63 
14b3b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
14b3f     36 1C 00 00 
14b43     00 00 00 00 
14b47     18 1C 1E 18 
14b4b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
14b4f     18 7E 00 00 
14b53     00 00 00 00 
14b57     3E 63 60 30 
14b5b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
14b5f     63 7F 00 00 
14b63     00 00 00 00 
14b67     3E 63 60 60 
14b6b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
14b6f     63 3E 00 00 
14b73     00 00 00 00 
14b77     30 38 3C 36 
14b7b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
14b7f     30 78 00 00 
14b83     00 00 00 00 
14b87     7F 03 03 03 
14b8b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
14b8f     63 3E 00 00 
14b93     00 00 00 00 
14b97     1C 06 03 03 
14b9b     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
14b9f     63 3E 00 00 
14ba3     00 00 00 00 
14ba7     7F 63 60 60 
14bab     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
14baf     0C 0C 00 00 
14bb3     00 00 00 00 
14bb7     3E 63 63 63 
14bbb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
14bbf     63 3E 00 00 
14bc3     00 00 00 00 
14bc7     3E 63 63 63 
14bcb     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
14bcf     30 1E 00 00 
14bd3     00 00 00 00 
14bd7     00 00 00 18 
14bdb     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
14bdf     18 18 00 00 
14be3     00 00 00 00 
14be7     00 00 00 18 
14beb     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
14bef     18 18 0C 00 
14bf3     00 00 00 00 
14bf7     00 60 30 18 
14bfb     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
14bff     30 60 00 00 
14c03     00 00 00 00 
14c07     00 00 00 7E 
14c0b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
14c0f     00 00 00 00 
14c13     00 00 00 00 
14c17     00          | 	byte	$00[9]
14c18     06 0C 18 30 
14c1c     60 30 18 0C 
14c20     06 00 00 00 
14c24     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
14c28     63 63 30 18 
14c2c     18 18 00 18 
14c30     18 00 00 00 
14c34     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
14c38     3E 63 63 7B 
14c3c     7B 7B 3B 03 
14c40     3E 00 00 00 
14c44     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
14c48     1C 36 63 63 
14c4c     7F 63 63 63 
14c50     63 00 00 00 
14c54     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
14c58     66 66 66 3E 
14c5c     66 66 66 66 
14c60     3F 00 00 00 
14c64     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
14c68     66 43 03 03 
14c6c     03 03 43 66 
14c70     3C 00 00 00 
14c74     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
14c78     36 66 66 66 
14c7c     66 66 66 36 
14c80     1F 00 00 00 
14c84     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
14c88     66 46 16 1E 
14c8c     16 06 46 66 
14c90     7F 00 00 00 
14c94     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
14c98     66 46 16 1E 
14c9c     16 06 06 06 
14ca0     0F 00 00 00 
14ca4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
14ca8     66 43 03 03 
14cac     7B 63 63 66 
14cb0     5C 00 00 00 
14cb4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
14cb8     63 63 63 7F 
14cbc     63 63 63 63 
14cc0     63 00 00 00 
14cc4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
14cc8     18 18 18 18 
14ccc     18 18 18 18 | 	byte	$18[8]
14cd0     3C 00 00 00 
14cd4     00 00 00 78 
14cd8     30 30 30 30 
14cdc     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
14ce0     1E 00 00 00 
14ce4     00 00 00 67 
14ce8     66 66 36 1E 
14cec     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
14cf0     67 00 00 00 
14cf4     00 00 00 0F 
14cf8     06 06 06 06 
14cfc     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
14d00     7F 00 00 00 
14d04     00 00 00 63 
14d08     77 7F 7F 6B 
14d0c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
14d10     63 00 00 00 
14d14     00 00 00 63 
14d18     67 6F 7F 7B 
14d1c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
14d20     63 00 00 00 
14d24     00 00 00 3E 
14d28     63 63 63 63 
14d2c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
14d30     3E 00 00 00 
14d34     00 00 00 3F 
14d38     66 66 66 3E 
14d3c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
14d40     0F 00 00 00 
14d44     00 00 00 3E 
14d48     63 63 63 63 
14d4c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
14d50     3E 30 70 00 
14d54     00 00 00 3F 
14d58     66 66 66 3E 
14d5c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
14d60     67 00 00 00 
14d64     00 00 00 3E 
14d68     63 63 06 1C 
14d6c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
14d70     3E 00 00 00 
14d74     00 00 00 7E 
14d78     7E 5A 18 18 
14d7c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
14d80     3C 00 00 00 
14d84     00 00 00 63 
14d88     63 63 63 63 
14d8c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
14d90     3E 00 00 00 
14d94     00 00 00 63 
14d98     63 63 63 63 
14d9c     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
14da0     08 00 00 00 
14da4     00 00 00 63 
14da8     63 63 63 6B 
14dac     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
14db0     36 00 00 00 
14db4     00 00 00 63 
14db8     63 36 3E 1C 
14dbc     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
14dc0     63 00 00 00 
14dc4     00 00 00 66 
14dc8     66 66 66 3C 
14dcc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
14dd0     3C 00 00 00 
14dd4     00 00 00 7F 
14dd8     63 61 30 18 
14ddc     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
14de0     7F 00 00 00 
14de4     00 00 00 3C 
14de8     0C 0C 0C 0C 
14dec     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
14df0     3C 00 00 00 
14df4     00 00 00 00 
14df8     01 03 07 0E 
14dfc     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
14e00     40 00 00 00 
14e04     00 00 00 3C 
14e08     30 30 30 30 
14e0c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
14e10     3C 00 00 00 
14e14     1C 36 00 00 
14e18     00 00 00 00 
14e1c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14e20     00 00 00 00 
14e24     00 00 00 00 
14e28     00 00 00 00 
14e2c     00 00 00 00 
14e30     00          | 	byte	$00[17]
14e31     FF 00 00 0C 
14e35     18 00 00 00 
14e39     00 00 00 00 
14e3d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14e41     00 00 00 00 
14e45     00 00 00 00 
14e49     00          | 	byte	$00[9]
14e4a     1E 30 3E 33 
14e4e     33 33 6E 00 
14e52     00 00 00 00 
14e56     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
14e5a     1E 36 66 66 
14e5e     66 66 3E 00 
14e62     00 00 00 00 
14e66     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
14e6a     3E 63 03 03 
14e6e     03 63 3E 00 
14e72     00 00 00 00 
14e76     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
14e7a     3C 36 33 33 
14e7e     33 33 6E 00 
14e82     00 00 00 00 
14e86     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
14e8a     3E 63 7F 03 
14e8e     03 63 3E 00 
14e92     00 00 00 00 
14e96     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
14e9a     0C 1E 0C 0C 
14e9e     0C 0C 1E 00 
14ea2     00 00 00 00 
14ea6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
14eaa     6E 33 33 33 
14eae     33 33 3E 30 
14eb2     33 1E 00 00 
14eb6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
14eba     36 6E 66 66 
14ebe     66 66 67 00 
14ec2     00 00 00 00 
14ec6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
14eca     1C 18 18 18 
14ece     18 18 3C 00 
14ed2     00 00 00 00 
14ed6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
14eda     70 60 60 60 
14ede     60 60 60 66 
14ee2     66 3C 00 00 
14ee6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
14eea     66 36 1E 1E 
14eee     36 66 67 00 
14ef2     00 00 00 00 
14ef6     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
14efa     18 18 18 18 
14efe     18 18       | 	byte	$18[6]
14f00     3C 00 00 00 
14f04     00 00 00 00 
14f08     00 00 37 7F 
14f0c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
14f10     63 00 00 00 
14f14     00 00 00 00 
14f18     00 00 3B 66 
14f1c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
14f20     66 00 00 00 
14f24     00 00 00 00 
14f28     00 00 3E 63 
14f2c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
14f30     3E 00 00 00 
14f34     00 00 00 00 
14f38     00 00 3B 66 
14f3c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
14f40     3E 06 06 0F 
14f44     00 00 00 00 
14f48     00 00 6E 33 
14f4c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
14f50     3E 30 30 78 
14f54     00 00 00 00 
14f58     00 00 3B 6E 
14f5c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
14f60     0F 00 00 00 
14f64     00 00 00 00 
14f68     00 00 3E 63 
14f6c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
14f70     3E 00 00 00 
14f74     00 00 00 08 
14f78     0C 0C 3F 0C 
14f7c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
14f80     38 00 00 00 
14f84     00 00 00 00 
14f88     00 00 33 33 
14f8c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
14f90     6E 00 00 00 
14f94     00 00 00 00 
14f98     00 00 63 63 
14f9c     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
14fa0     1C 00 00 00 
14fa4     00 00 00 00 
14fa8     00 00 63 63 
14fac     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
14fb0     36 00 00 00 
14fb4     00 00 00 00 
14fb8     00 00 63 36 
14fbc     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
14fc0     63 00 00 00 
14fc4     00 00 00 00 
14fc8     00 00 63 63 
14fcc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
14fd0     7E 60 30 1F 
14fd4     00 00 00 00 
14fd8     00 00 7F 33 
14fdc     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
14fe0     7F 00 00 00 
14fe4     00 00 00 70 
14fe8     18 18 18 0E 
14fec     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
14ff0     70 00 00 00 
14ff4     00 00 00 18 
14ff8     18 18 18 18 
14ffc     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
15000     18 00 00 00 
15004     00 00 00 0E 
15008     18 18 18 70 
1500c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
15010     0E 00 00 00 
15014     6E 3B 00 00 
15018     00 00 00 00 
1501c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15020     00 00 00 00 
15024     00 00 00 00 
15028     00 00       | 	byte	$00[10]
1502a     08 1C 36 63 
1502e     63 63 7F 00 
15032     00 00 00 00 
15036     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1503a     03 03 03 03 
1503e     43 66 3C 18 
15042     30 1E 00 00 
15046     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1504a     33 33 33 33 
1504e     33 33       | 	byte	$33[6]
15050     6E 00 00 00 
15054     00 00 60 30 
15058     18 00 3E 63 
1505c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
15060     3E 00 00 00 
15064     00 00 08 1C 
15068     36 00 1E 30 
1506c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
15070     6E 00 00 00 
15074     00 00 00 00 
15078     33 00 1E 30 
1507c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
15080     6E 00 00 00 
15084     00 00 1C 36 
15088     1C 00 33 33 
1508c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
15090     6E 00 00 00 
15094     00 00 60 30 
15098     18 00 3E 63 
1509c     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
150a0     3E 00 00 00 
150a4     00 00 00 00 
150a8     00 00 3E 63 
150ac     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
150b0     3E 18 30 1E 
150b4     00 00 00 1C 
150b8     58 78 38 18 
150bc     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
150c0     3C 00 00 00 
150c4     00 00 00 00 
150c8     63 00 3E 63 
150cc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
150d0     3E 00 00 00 
150d4     66 33 00 3E 
150d8     63 63 63 63 
150dc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
150e0     3E 00 00 00 
150e4     00 00 CC 66 
150e8     33 00 3E 63 
150ec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
150f0     3E 00 00 00 
150f4     00 00 18 3C 
150f8     66 00 1C 18 
150fc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
15100     3C 00 00 00 
15104     30 18 00 7F 
15108     63 61 30 18 
1510c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
15110     7F 00 00 00 
15114     00 63 00 08 
15118     1C 36 63 63 
1511c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
15120     63 00 00 00 
15124     30 18 00 3C 
15128     66 43 03 03 
1512c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
15130     3C 00 00 00 
15134     30 18 00 7F 
15138     66 46 16 1E 
1513c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
15140     7F 00 00 00 
15144     0C 06 00 0F 
15148     06 06 06 06 
1514c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
15150     7F 00 00 00 
15154     30 18 00 1C 
15158     18 18 18 18 
1515c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
15160     3C 00 00 00 
15164     00 00 08 1C 
15168     36 00 3E 63 
1516c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
15170     3E 00 00 00 
15174     00 00 00 00 
15178     63 00 3E 63 
1517c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
15180     3E 00 00 00 
15184     00 00 00 6F 
15188     46 26 06 06 
1518c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
15190     7F 00 00 00 
15194     00 00 00 6E 
15198     4C 2C 0C 0C 
1519c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
151a0     1E 00 00 00 
151a4     30 18 00 3E 
151a8     63 63 06 1C 
151ac     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
151b0     3E 00 00 00 
151b4     00 00 60 30 
151b8     18 00 3E 63 
151bc     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
151c0     3E 00 00 00 
151c4     00 63 00 3E 
151c8     63 63 63 63 
151cc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
151d0     3E 00 00 00 
151d4     00 63 00 63 
151d8     63 63 63 63 
151dc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
151e0     3E 00 00 00 
151e4     6C 38 00 7E 
151e8     7E 5A 18 18 
151ec     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
151f0     3C 00 00 00 
151f4     00 00 60 48 
151f8     2C 0C 3F 0C 
151fc     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
15200     38 00 00 00 
15204     00 00 00 0F 
15208     26 36 1E 0E 
1520c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
15210     7F 00 00 00 
15214     00 00 00 00 
15218     00 63 36 1C 
1521c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
15220     00 00 00 00 
15224     00 00       | 	byte	$00[6]
15226     36 1C 08 00 
1522a     3E 63 03 03 
1522e     03 63 3E 00 
15232     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
15236     30 18 0C 00 
1523a     1E 30 3E 33 
1523e     33 33 6E 00 
15242     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
15246     60 30 18 00 
1524a     1C 18 18 18 
1524e     18 18 3C 00 
15252     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
15256     60 30 18 00 
1525a     3E 63 63 63 
1525e     63 63 3E 00 
15262     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
15266     30 18 0C 00 
1526a     33 33 33 33 
1526e     33 33 6E 00 
15272     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
15276     00 08 1C 36 
1527a     63 63 7F 63 
1527e     63 63 63 18 
15282     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
15286     00 00 00 00 
1528a     1E 30 3E 33 
1528e     33 33 6E 18 
15292     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
15296     00 7F 63 61 
1529a     30 18 0C 06 
1529e     43 63 7F 00 
152a2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
152a6     36 1C 08 00 
152aa     7F 33 18 0C 
152ae     06 63 7F 00 
152b2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
152b6     00 7F 66 46 
152ba     16 1E 16 06 
152be     46 66 7F 18 
152c2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
152c6     00 00 00 00 
152ca     3E 63 7F 03 
152ce     03 63 3E 18 
152d2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
152d6     00 3C 66 03 
152da     1F 03 0F 03 
152de     03 66 3C 00 
152e2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
152e6     60 30 18 00 
152ea     7F 33 18 0C 
152ee     06 63 7F 00 
152f2     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
152f6     00 3C 66 43 
152fa     03 03 03 03 
152fe     43 66 3C 00 
15302     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
15306     00 00 00 00 
1530a     3E 63 06 1C 
1530e     30 63 3E 18 
15312     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
15316     00 00 00 00 
1531a     00 00       | 	byte	$00[6]
1531c     6C 36 1B 36 
15320     6C 00 00 00 
15324     00 00 00 00 
15328     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1532c     1B 36 6C 36 
15330     1B 00 00 00 
15334     88 22 88 22 
15338     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1533c     88 22 88 22 
15340     88 22 88 22 
15344     AA 55 AA 55 
15348     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1534c     AA 55 AA 55 
15350     AA 55 AA 55 
15354     BB EE BB EE 
15358     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1535c     BB EE BB EE 
15360     BB EE BB EE 
15364     18 18 18 18 
15368     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1536c     18 18 18 18 
15370     18 18 18 18 
15374     18 18 18 18 
15378     18 18 18    | 	byte	$18[15]
1537b     1F 18 18 18 
1537f     18 18 18 18 
15383     18 30 18 00 
15387     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1538b     63 7F 63 63 
1538f     63 63 00 00 
15393     00 1C 36 00 
15397     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1539b     63 7F 63 63 
1539f     63 63 00 00 
153a3     00 36 1C 00 
153a7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
153ab     1E 16 06 46 
153af     66 7F 00 00 
153b3     00 00 00 00 
153b7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
153bb     1C 30 60 63 
153bf     63 3E 18 30 
153c3     1E 6C 6C 6C 
153c7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
153cb     6F 6C 6C 6C 
153cf     6C 6C 6C 6C 
153d3     6C 6C 6C 6C 
153d7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
153db     6C 6C 6C 6C 
153df     6C 6C 6C 6C 
153e3     6C          | 	byte	$6c[9]
153e4     00 00 00 00 
153e8     00          | 	byte	$00[5]
153e9     7F 60 6F 6C 
153ed     6C 6C 6C 6C 
153f1     6C 6C 6C 6C 
153f5     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
153f9     6F 60 7F 00 
153fd     00 00 00 00 
15401     00 00 00 18 
15405     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
15409     61 30 18 0C 
1540d     06 43 63 7F 
15411     00 00 00 00 
15415     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
15419     00 7F 33 18 
1541d     0C 06 63 7F 
15421     00 00 00 00 
15425     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
15429     00 00 1F 18 
1542d     18 18 18 18 
15431     18 18 18 18 
15435     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
15439     18 18 F8 00 
1543d     00 00 00 00 
15441     00 00 00 18 
15445     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
15449     18 18 FF 00 
1544d     00 00 00 00 
15451     00 00 00 00 
15455     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15459     00 00 FF 18 
1545d     18 18 18 18 
15461     18 18 18 18 
15465     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
15469     18 18 F8 18 
1546d     18 18 18 18 
15471     18 18 18 00 
15475     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
15479     00 00 FF 00 
1547d     00 00 00 00 
15481     00 00 00 18 
15485     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
15489     18 18 FF 18 
1548d     18 18 18 18 
15491     18 18 18 63 
15495     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
15499     36 63 63 7F 
1549d     63 63 63 63 
154a1     00 00 00 00 
154a5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
154a9     00 1E 30 3E 
154ad     33 33 33 6E 
154b1     00 00 00 6C 
154b5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
154b9     EC 0C FC 00 
154bd     00 00 00 00 
154c1     00 00 00 00 
154c5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
154c9     FC 0C EC 6C 
154cd     6C 6C 6C 6C 
154d1     6C 6C 6C 6C 
154d5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
154d9     EF 00 FF 00 
154dd     00 00 00 00 
154e1     00 00 00 00 
154e5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
154e9     FF 00 EF 6C 
154ed     6C 6C 6C 6C 
154f1     6C 6C 6C 6C 
154f5     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
154f9     EC 0C EC 6C 
154fd     6C 6C 6C 6C 
15501     6C 6C 6C 00 
15505     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
15509     FF 00 FF 00 
1550d     00 00 00 00 
15511     00 00 00 6C 
15515     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
15519     EF 00 EF 6C 
1551d     6C 6C 6C 6C 
15521     6C 6C 6C 00 
15525     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
15529     63 3E 63 63 
1552d     63 63 3E 63 
15531     00 00 00 00 
15535     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
15539     30 3C 36 33 
1553d     33 33 33 6E 
15541     00 00 00 00 
15545     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
15549     66 66 6F 66 
1554d     66 66 36 1F 
15551     00 00 00 36 
15555     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
15559     66 66 66 66 
1555d     66 66       | 	byte	$66[6]
1555f     36 1F 00 00 
15563     00 00 63 00 
15567     7F 66 46 16 
1556b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1556f     66 7F 00 00 
15573     00 6C 38 00 
15577     38 30 30 3C 
1557b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1557f     33 6E 00 00 
15583     00 36 1C 00 
15587     63 67 6F 7F 
1558b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1558f     63 63 00 00 
15593     00 30 18 00 
15597     3C 18 18 18 
1559b     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1559f     18 3C 00 00 
155a3     00 3C 66 00 
155a7     3C 18 18 18 
155ab     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
155af     18 3C 00 00 
155b3     00 00 00 36 
155b7     1C 08 00 3E 
155bb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
155bf     63 3E 00 00 
155c3     00 18 18 18 
155c7     18 18 18 18 
155cb     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
155cf     00 00 00 00 
155d3     00 00 00 00 
155d7     00 00 00 00 | 	byte	$00[12]
155db     F8 18 18 18 
155df     18 18 18 18 
155e3     18 FF FF FF 
155e7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
155eb     FF FF FF FF 
155ef     FF FF FF FF 
155f3     FF          | 	byte	$ff[9]
155f4     00 00 00 00 
155f8     00 00 00    | 	byte	$00[7]
155fb     FF FF FF FF 
155ff     FF FF FF FF 
15603     FF          | 	byte	$ff[9]
15604     00 00 00 7E 
15608     7E 5A 18 18 
1560c     18 18 18 18 
15610     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
15614     1C 36 1C 63 
15618     63 63 63 63 
1561c     63 63 63 63 
15620     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
15624     FF FF FF FF 
15628     FF FF FF    | 	byte	$ff[7]
1562b     00 00 00 00 
1562f     00 00 00 00 
15633     00          | 	byte	$00[9]
15634     30 18 00 3E 
15638     63 63 63 63 
1563c     63 63 63 63 
15640     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
15644     00 00 00 1E 
15648     33 33 33 1B 
1564c     33 63 63 63 
15650     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
15654     1C 36 00 3E 
15658     63 63 63 63 
1565c     63 63 63 63 
15660     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
15664     30 18 00 63 
15668     67 6F 7F 7B 
1566c     73 63 63 63 
15670     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
15674     00 00 60 30 
15678     18 00 3B 66 
1567c     66 66 66 66 
15680     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
15684     00 00 36 1C 
15688     08 00 3B 66 
1568c     66 66 66 66 
15690     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
15694     36 1C 00 3E 
15698     63 63 06 1C 
1569c     30 60 63 63 
156a0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
156a4     00 00 36 1C 
156a8     08 00 3E 63 
156ac     06 1C 30 63 
156b0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
156b4     30 18 00 3F 
156b8     66 66 66 3E 
156bc     36 66 66 66 
156c0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
156c4     30 18 00 63 
156c8     63 63 63 63 
156cc     63 63 63 63 
156d0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
156d4     00 00 60 30 
156d8     18 00 3B 6E 
156dc     66 06 06 06 
156e0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
156e4     66 33 00 63 
156e8     63 63 63 63 
156ec     63 63 63 63 
156f0     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
156f4     00 00 60 30 
156f8     18 00 63 63 
156fc     63 63 63 63 
15700     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
15704     30 18 00 66 
15708     66 66 66 3C 
1570c     18 18 18 18 
15710     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
15714     00 00 00 08 
15718     0C 0C 3F 0C 
1571c     0C 0C 0C 6C 
15720     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
15724     30 18 00 00 
15728     00 00 00 00 
1572c     00 00 00 00 
15730     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15734     00 00 00 00 
15738     00 00 00 00 | 	byte	$00[8]
1573c     7F 00 00 00 
15740     00 00 00 00 
15744     66 33 00 00 
15748     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1574c     00 00 00 00 
15750     00 00 00 00 
15754     00 00 00 00 
15758     00 00 00 00 
1575c     00 00 00 00 
15760     00          | 	byte	$00[21]
15761     0C 06 3C 36 
15765     1C 00 00 00 
15769     00 00 00 00 
1576d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15771     00 00 00 63 
15775     3E 00 00 00 
15779     00 00 00 00 
1577d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15781     00 00 00 00 
15785     3E 63 06 1C 
15789     36 63 63 36 
1578d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
15791     00 00 00 00 
15795     00 00 00 00 | 	byte	$00[8]
15799     18 00 7E 00 
1579d     18 00 00 00 
157a1     00 00 00 00 
157a5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
157a9     00 00 00 00 
157ad     00 00 00 00 | 	byte	$00[8]
157b1     18 30 1E 00 
157b5     00 00 1C 36 
157b9     36 1C 00 00 
157bd     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
157c1     00 00 00 00 
157c5     63 00 00 00 
157c9     00 00 00 00 
157cd     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
157d1     00 00 00 18 
157d5     18 00 00 00 
157d9     00 00 00 00 
157dd     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
157e1     00 00 00 00 
157e5     00          | 	byte	$00[5]
157e6     CC 66 33 00 
157ea     33 33 33 33 
157ee     33 33 6E 00 
157f2     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
157f6     00 3F 66 66 
157fa     66 3E 36 66 
157fe     66 66 6F 00 
15802     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
15806     36 1C 08 00 
1580a     3B 6E 66 06 
1580e     06 06 0F 00 
15812     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
15816     00 00 00 7E 
1581a     7E 7E 7E 7E 
1581e     7E 7E 00 00 
15822     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
15826     00 00 00 00 
1582a     00 00 00 00 
1582e     00 00 00 00 
15832     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15834     00 00 00 00 
      ...             
15864     00 00 00 00 
15868     00 00 00    | st_font        file "st4font.def"
1586b     FF FF 00 00 
1586f     00 00 00 00 
15873     00 18 18 18 
15877     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1587b     18 18 18 18 
1587f     18 18 18 18 
15883     18          | 	byte	$18[9]
15884     00 00 00 00 
15888     00 00 00    | 	byte	$00[7]
1588b     FF FF 18 18 
1588f     18 18 18 18 
15893     18 18 18 18 
15897     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1589b     FF FF 00 00 
1589f     00 00 00 00 
158a3     00 18 18 18 
158a7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
158ab     1F 1F 18 18 
158af     18 18 18 18 
158b3     18 18 18 18 
158b7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
158bb     F8 F8 18 18 
158bf     18 18 18 18 
158c3     18 00 00 00 
158c7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
158cb     1F 1F 18 18 
158cf     18 18 18 18 
158d3     18 00 00 00 
158d7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
158db     F8 F8 18 18 
158df     18 18 18 18 
158e3     18 18 18 18 
158e7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
158eb     1F 1F 00 00 
158ef     00 00 00 00 
158f3     00 18 18 18 
158f7     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
158fb     F8 F8 00 00 
158ff     00 00 00 00 
15903     00 18 18 18 
15907     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1590b     FF FF 18 18 
1590f     18 18 18 18 
15913     18 00 00 18 
15917     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1591b     66 7E 7E 66 
1591f     66 66 66 30 
15923     18 00 00 7E 
15927     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1592b     3E 06 06 06 
1592f     06 7E 7E 18 
15933     0C 30 18 3C 
15937     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1593b     06 06 06 66 
1593f     66 7E 3C 00 
15943     00 30 18 66 
15947     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1594b     7E 7E 76 76 
1594f     66 66 66 00 
15953     00 30 18 7C 
15957     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1595b     1C 38 70 60 
1595f     60 7E 3E 00 
15963     00 30 18 7E 
15967     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1596b     18 0C 0C 06 
1596f     06 7E 7E 00 
15973     00 18 18 00 
15977     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1597b     18 18 0C 0C 
1597f     06 7E 7E 00 
15983     00 30 18 3C 
15987     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1598b     66 66 66 66 
1598f     66          | 	byte	$66[5]
15990     7E 3C 00 00 
15994     00 00 06 06 
15998     06 06 16 1E 
1599c     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
159a0     7E 7E 00 00 
159a4     00 00 00 00 
159a8     00 3C 7C 60 
159ac     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
159b0     7E 7C 30 18 
159b4     00 00 00 00 
159b8     00 3C 7E 66 
159bc     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
159c0     7E 7C 18 0C 
159c4     00 00 30 18 
159c8     00 3C 3E 06 
159cc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
159d0     7E 7C 00 00 
159d4     00 00 30 18 
159d8     00 3E 7E 66 
159dc     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
159e0     66 66 00 00 
159e4     00 00 30 18 
159e8     00 7C 7E 06 
159ec     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
159f0     7E 3E 00 00 
159f4     00 00 30 18 
159f8     00 7E 7E 30 
159fc     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
15a00     7E 7E 00 00 
15a04     00 00 18 18 
15a08     00 7E 7E 30 
15a0c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
15a10     7E 7E 00 00 
15a14     00 00 30 18 
15a18     00 3C 7E 66 
15a1c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
15a20     7E 3C 00 00 
15a24     00 00 1C 1C 
15a28     18 18 38 3C 
15a2c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
15a30     3C 3C 00 00 
15a34     00 00 00 00 
15a38     00 00 00 00 
15a3c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15a40     00 00 00 00 
15a44     00 00       | 	byte	$00[6]
15a46     18 18 18 18 
15a4a     18 18 18 18 | 	byte	$18[8]
15a4e     00 00 18 18 
15a52     00 00 00 00 
15a56     66 66 66 66 
15a5a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
15a5e     00 00 00 00 
15a62     00 00 00 00 
15a66     00          | 	byte	$00[9]
15a67     66 66 FF FF 
15a6b     66 66 FF FF 
15a6f     66 66 00 00 
15a73     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
15a77     7C 7E 06 06 
15a7b     3E 7C 60 60 
15a7f     7E 3E 18 18 
15a83     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
15a87     66 30 30 18 
15a8b     18 0C 0C 66 
15a8f     66 00 00 00 
15a93     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
15a97     66 66 3C 1C 
15a9b     1C FC FE 66 
15a9f     66 FE FC 00 
15aa3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
15aa7     18 18 18 18 
15aab     00 00 00 00 
15aaf     00 00 00 00 
15ab3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
15ab7     18 1C 0C 0C 
15abb     0C 0C 0C 0C 
15abf     1C 18 30 00 
15ac3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
15ac7     18 38 30 30 
15acb     30 30 30 30 
15acf     38 18 0C 00 
15ad3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
15ad7     66 66 3C 3C 
15adb     FF FF 3C 3C 
15adf     66 66 00 00 
15ae3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
15ae7     00 18 18 18 
15aeb     7E 7E 18 18 
15aef     18 00 00 00 
15af3     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
15af7     00 00 00 00 
15afb     00 00       | 	byte	$00[6]
15afd     18 18 18 18 
15b01     18          | 	byte	$18[5]
15b02     0C 04 00 00 
15b06     00 00 00 00 
15b0a     7E 7E 00 00 
15b0e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
15b12     00 00 00 00 
15b16     00 00 00 00 
15b1a     00 00 00 00 
15b1e     00          | 	byte	$00[13]
15b1f     18 18 18 00 
15b23     00 00 00 60 
15b27     60 60 30 30 
15b2b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
15b2f     06 06 06 00 
15b33     00 00 00 3C 
15b37     7E 66 66 66 
15b3b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
15b3f     66 7E 3C 00 
15b43     00 00 00 18 
15b47     18 1C 1C 18 
15b4b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
15b4f     18 7E 7E 00 
15b53     00 00 00 3C 
15b57     7E 66 66 30 
15b5b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
15b5f     0C 7E 7E 00 
15b63     00 00 00 7E 
15b67     7E 30 30 18 
15b6b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
15b6f     66 7E 3C 00 
15b73     00 00 00 30 
15b77     30 38 38 3C 
15b7b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
15b7f     7E 30 30 00 
15b83     00 00 00 7E 
15b87     7E 06 06 3E 
15b8b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
15b8f     66 7E 3C 00 
15b93     00 00 00 38 
15b97     3C 0E 06 06 
15b9b     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
15b9f     66 7E 3C 00 
15ba3     00 00 00 7E 
15ba7     7E 60 60 30 
15bab     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
15baf     0C 0C 0C 00 
15bb3     00 00 00 3C 
15bb7     7E 66 66 3C 
15bbb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
15bbf     66 7E 3C 00 
15bc3     00 00 00 3C 
15bc7     7E 66 66 7E 
15bcb     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
15bcf     70 3C 1C 00 
15bd3     00 00 00 00 
15bd7     00 00 18 18 
15bdb     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
15bdf     18 18 18 00 
15be3     00 00 00 00 
15be7     00 00 18 18 
15beb     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
15bef     18 18 18 0C 
15bf3     04 00 00 00 
15bf7     70 38 1C 0E 
15bfb     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
15bff     70 00 00 00 
15c03     00 00 00 00 
15c07     00 00 7E 7E 
15c0b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
15c0f     00 00 00 00 
15c13     00 00 00 00 | 	byte	$00[8]
15c17     0E 1C 38 70 
15c1b     E0 70 38 1C 
15c1f     0E 00 00 00 
15c23     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
15c27     7E 66 66 30 
15c2b     30 18 18 18 
15c2f     00 18 18 00 
15c33     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
15c37     7E 66 66 66 
15c3b     66 36 06 66 
15c3f     66 7E 3C 00 
15c43     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
15c47     3C 7E 66 66 
15c4b     66 7E 7E 66 
15c4f     66 66 66 00 
15c53     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
15c57     7E 66 66 7E 
15c5b     3E 66 66 66 
15c5f     66 7E 3E 00 
15c63     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
15c67     7E 66 66 06 
15c6b     06 06 06 66 
15c6f     66 7E 3C 00 
15c73     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
15c77     7E 66 66 66 
15c7b     66 66 66 66 
15c7f     66 7E 3E 00 
15c83     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
15c87     7E 06 06 3E 
15c8b     3E 06 06 06 
15c8f     06 7E 7E 00 
15c93     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
15c97     7E 06 06 3E 
15c9b     3E 06 06 06 
15c9f     06 06 06 00 
15ca3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
15ca7     7E 06 06 76 
15cab     76 66 66 66 
15caf     66 7E 3C 00 
15cb3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
15cb7     66 66 66 7E 
15cbb     7E 66 66 66 
15cbf     66 66 66 00 
15cc3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
15cc7     7E 18 18 18 
15ccb     18 18 18 18 
15ccf     18 7E 7E 00 
15cd3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
15cd7     60 60 60 60 
15cdb     60 60 60    | 	byte	$60[7]
15cde     66 66 7E 3C 
15ce2     00 00 00 00 
15ce6     66 66 36 36 
15cea     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
15cee     66 66 C6 C6 
15cf2     00 00 00 00 
15cf6     06 06 06 06 
15cfa     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
15cfe     06 06 7E 7E 
15d02     00 00 00 00 
15d06     C6 C6 EE EE 
15d0a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
15d0e     C6 C6 C6 C6 
15d12     00 00 00 00 
15d16     66 66 66 6E 
15d1a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
15d1e     76 66 66 66 
15d22     00 00 00 00 
15d26     3C 7E 66 66 
15d2a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
15d2e     66 66 7E 3C 
15d32     00 00 00 00 
15d36     3E 7E 66 66 
15d3a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
15d3e     06 06 06 06 
15d42     00 00 00 00 
15d46     3C 7E 66 66 
15d4a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
15d4e     66 56 3E 6C 
15d52     00 00 00 00 
15d56     3E 7E 66 66 
15d5a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
15d5e     66 66 C6 C6 
15d62     00 00 00 00 
15d66     7C 7E 06 06 
15d6a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
15d6e     60 60 7E 3E 
15d72     00 00 00 00 
15d76     7E 7E 18 18 
15d7a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
15d7e     18 18 18 18 
15d82     00 00 00 00 
15d86     66 66 66 66 
15d8a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
15d8e     66 66 7E 3C 
15d92     00 00 00 00 
15d96     66 66 66 66 
15d9a     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
15d9e     3C 3C 18 18 
15da2     00 00 00 00 
15da6     C6 C6 C6 C6 
15daa     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
15dae     FE EE C6 82 
15db2     00 00 00 00 
15db6     66 66 66 3C 
15dba     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
15dbe     3C 66 66 66 
15dc2     00 00 00 00 
15dc6     66 66 66 66 
15dca     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
15dce     18 18 18 18 
15dd2     00 00 00 00 
15dd6     7E 7E 30 30 
15dda     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
15dde     06 06 7E 7E 
15de2     00 00 00 00 
15de6     3C 3C 0C 0C 
15dea     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
15dee     0C 0C 3C 3C 
15df2     00 00 00 00 
15df6     06 06 0C 0C 
15dfa     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
15dfe     60 60 C0 C0 
15e02     00 00 00 00 
15e06     3C 3C 30 30 
15e0a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
15e0e     30 30 3C 3C 
15e12     00 00 00 00 
15e16     18 18 3C 3C 
15e1a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
15e1e     00 00 00 00 
15e22     00 00 00 00 
15e26     00 00 00 00 
15e2a     00 00 00 00 
15e2e     00 00       | 	byte	$00[18]
15e30     FE FE 00 00 
15e34     00 00 0C 0C 
15e38     18 18 00 00 
15e3c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
15e40     00 00 00 00 
15e44     00 00 00 00 
15e48     00          | 	byte	$00[9]
15e49     3C 7C 60 7C 
15e4d     7E 66 66 7E 
15e51     7C 00 00 00 
15e55     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
15e59     3E 7E 66 66 
15e5d     66 66 66 7E 
15e61     3E 00 00 00 
15e65     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
15e69     3C 3E 06 06 
15e6d     06 06 06 7E 
15e71     7C 00 00 00 
15e75     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
15e79     7C 7E 66 66 
15e7d     66 66 66 7E 
15e81     7C 00 00 00 
15e85     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
15e89     3C 7E 66 66 
15e8d     7E 06 06 7E 
15e91     7C 00 00 00 
15e95     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
15e99     18 7E 7E 18 
15e9d     18 18 18 18 
15ea1     18 00 00 00 
15ea5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
15ea9     7C 7E 66 66 
15ead     66 66 7E 7C 
15eb1     60 7E 3E 00 
15eb5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
15eb9     3E 7E 66 66 
15ebd     66 66 66 66 
15ec1     66 00 00 00 
15ec5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
15ec9     1C 1C 18 18 
15ecd     18 18 18 3C 
15ed1     3C 00 00 00 
15ed5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
15ed9     30 30 30 30 
15edd     30 30 30 30 
15ee1     30          | 	byte	$30[9]
15ee2     3E 1E 00 00 
15ee6     06 06 06 36 
15eea     36 1E 1E 1E 
15eee     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
15ef2     00 00 00 00 
15ef6     1C 1C 18 18 
15efa     18 18 18 18 
15efe     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
15f02     00 00 00 00 
15f06     00 00 00    | 	byte	$00[7]
15f09     6C FE FE D6 
15f0d     D6 C6 C6 C6 
15f11     C6 00 00 00 
15f15     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
15f19     3E 7E 66 66 
15f1d     66 66 66 66 
15f21     66 00 00 00 
15f25     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
15f29     3C 7E 66 66 
15f2d     66 66 66 7E 
15f31     3C 00 00 00 
15f35     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
15f39     3E 7E 66 66 
15f3d     66 66 66 7E 
15f41     3E 06 06 00 
15f45     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
15f49     7C 7E 66 66 
15f4d     66 66 66 7E 
15f51     7C 60 60 00 
15f55     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
15f59     3E 7E 66 06 
15f5d     06 06 06 06 
15f61     06 00 00 00 
15f65     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
15f69     7C 7E 06 0E 
15f6d     3C 70 60 7E 
15f71     3E 00 00 00 
15f75     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
15f79     7E 7E 18 18 
15f7d     18 18 18 78 
15f81     70 00 00 00 
15f85     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
15f89     66 66 66 66 
15f8d     66 66 66    | 	byte	$66[7]
15f90     7E 7C 00 00 
15f94     00 00 00 00 
15f98     00 66 66 66 
15f9c     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
15fa0     18 18 00 00 
15fa4     00 00 00 00 
15fa8     00 C6 C6 D6 
15fac     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
15fb0     C6 82 00 00 
15fb4     00 00 00 00 
15fb8     00 66 66 3C 
15fbc     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
15fc0     66 66 00 00 
15fc4     00 00 00 00 
15fc8     00 66 66 66 
15fcc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
15fd0     7C 60 7E 3E 
15fd4     00 00 00 00 
15fd8     00 7E 7E 30 
15fdc     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
15fe0     7E 7E 00 00 
15fe4     00 00 30 18 
15fe8     18 18 18 0C 
15fec     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
15ff0     18 30 00 00 
15ff4     00 00 18 18 
15ff8     18 18 18 18 
15ffc     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
16000     18 18 00 00 
16004     00 00 0C 18 
16008     18 18 18 30 
1600c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
16010     18 0C 00 00 
16014     00 00 6C 7E 
16018     36 00 00 00 
1601c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
16020     00 00 00 00 
16024     00 00 00 00 
16028     00          | 	byte	$00[9]
16029     18 18 18 18 
1602d     18 18 00 00 
16031     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
16034     00 00 00 00 
16038     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1603c     00 00 00 00 
16040     00 80 80 80 
16044     00 00 00 FF 
16048     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1604c     00 00 00 00 
16050     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
16051     80 00 00 00 
16055     00 80 00 00 
16059     80 80 00 00 
1605d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
16061     80 00 80 00 
16065     00 40 80 00 
16069     AA AA AA 00 
1606d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
16071     FF 00 00 00 
16075     00 FF 00 00 
16079     FF FF 00 00 
1607d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
16081     FF 00 FF 00 
16085     00 FF FF 00 
16089     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1608c     00 00 00 00 
16090     00          | ataripalette   file "ataripalettep2.def"
16091     11 11 11 00 
16095     22 22 22 00 
16099     33 33 33 00 
1609d     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
160a1     55 55 55 00 
160a5     66 66 66 00 
160a9     77 77 77 00 
160ad     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
160b1     99 99 99 00 
160b5     AA AA AA 00 
160b9     BB BB BB 00 
160bd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
160c1     DD DD DD 00 
160c5     EE EE EE 00 
160c9     FF FF FF 00 
160cd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
160d1     00 14 40 00 
160d5     00 1E 60 00 
160d9     00 28 80 00 
160dd     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
160e1     00 3C BF 00 
160e5     00 46 DF 00 
160e9     00 50 FF 00 
160ed     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
160f1     39 77 FF 00 
160f5     55 8A FF 00 
160f9     71 9E FF 00 
160fd     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
16101     AA C5 FF 00 
16105     C6 D8 FF 00 
16109     E3 EC FF 00 
1610d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
16111     00 00 40 00 
16115     00 00 60 00 
16119     00 00 80 00 
1611d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
16121     00 00 BF 00 
16125     00 00 DF 00 
16129     00 00 FF 00 
1612d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
16131     39 39 FF 00 
16135     55 55 FF 00 
16139     71 71 FF 00 
1613d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
16141     AA AA FF 00 
16145     C6 C6 FF 00 
16149     E3 E3 FF 00 
1614d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
16151     20 00 40 00 
16155     30 00 60 00 
16159     40 00 80 00 
1615d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
16161     60 00 BF 00 
16165     70 00 DF 00 
16169     80 00 FF 00 
1616d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
16171     9C 39 FF 00 
16175     AA 55 FF 00 
16179     B8 71 FF 00 
1617d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
16181     D5 AA FF 00 
16185     E3 C6 FF 00 
16189     F1 E3 FF 00 
1618d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
16191     40 00 40 00 
16195     60 00 60 00 
16199     80 00 80 00 
1619d     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
161a1     BF 00 BF 00 
161a5     DF 00 DF 00 
161a9     FF 00 FF 00 
161ad     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
161b1     FF 39 FF 00 
161b5     FF 55 FF 00 
161b9     FF 71 FF 00 
161bd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
161c1     FF AA FF 00 
161c5     FF C6 FF 00 
161c9     FF E3 FF 00 
161cd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
161d1     40 00 20 00 
161d5     60 00 30 00 
161d9     80 00 40 00 
161dd     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
161e1     BF 00 60 00 
161e5     DF 00 70 00 
161e9     FF 00 80 00 
161ed     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
161f1     FF 39 9C 00 
161f5     FF 55 AA 00 
161f9     FF 71 B8 00 
161fd     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
16201     FF AA D5 00 
16205     FF C6 E3 00 
16209     FF E3 F1 00 
1620d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
16211     40 00 00 00 
16215     60 00 00 00 
16219     80 00 00 00 
1621d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
16221     BF 00 00 00 
16225     DF 00 00 00 
16229     FF 00 00 00 
1622d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
16231     FF 39 39 00 
16235     FF 55 55 00 
16239     FF 71 71 00 
1623d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
16241     FF AA AA 00 
16245     FF C6 C6 00 
16249     FF E3 E3 00 
1624d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
16251     40 10 00 00 
16255     60 18 00 00 
16259     80 20 00 00 
1625d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
16261     BF 30 00 00 
16265     DF 38 00 00 
16269     FF 40 00 00 
1626d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
16271     FF 6A 39 00 
16275     FF 80 55 00 
16279     FF 95 71 00 
1627d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
16281     FF BF AA 00 
16285     FF D5 C6 00 
16289     FF EA E3 00 
1628d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
16291     40 20 00 00 
16295     60 30 00 00 
16299     80 40 00 00 
1629d     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
162a1     BF 60 00 00 
162a5     DF 70 00 00 
162a9     FF 80 00 00 
162ad     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
162b1     FF 9C 39 00 
162b5     FF AA 55 00 
162b9     FF B8 71 00 
162bd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
162c1     FF D5 AA 00 
162c5     FF E3 C6 00 
162c9     FF F1 E3 00 
162cd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
162d1     40 30 00 00 
162d5     60 48 00 00 
162d9     80 60 00 00 
162dd     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
162e1     BF 90 00 00 
162e5     DF A8 00 00 
162e9     FF C0 00 00 
162ed     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
162f1     FF CE 39 00 
162f5     FF D5 55 00 
162f9     FF DC 71 00 
162fd     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
16301     FF EA AA 00 
16305     FF F1 C6 00 
16309     FF F8 E3 00 
1630d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
16311     30 40 00 00 
16315     48 60 00 00 
16319     60 80 00 00 
1631d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
16321     90 BF 00 00 
16325     A8 DF 00 00 
16329     C0 FF 00 00 
1632d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
16331     CE FF 39 00 
16335     D5 FF 55 00 
16339     DC FF 71 00 
1633d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
16341     EA FF AA 00 
16345     F1 FF C6 00 
16349     F8 FF E3 00 
1634d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
16351     00 40 00 00 
16355     00 60 00 00 
16359     00 80 00 00 
1635d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
16361     00 BF 00 00 
16365     00 DF 00 00 
16369     00 FF 00 00 
1636d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
16371     39 FF 39 00 
16375     55 FF 55 00 
16379     71 FF 71 00 
1637d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
16381     AA FF AA 00 
16385     C6 FF C6 00 
16389     E3 FF E3 00 
1638d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
16391     00 40 14 00 
16395     00 60 1E 00 
16399     00 80 28 00 
1639d     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
163a1     00 BF 3C 00 
163a5     00 DF 46 00 
163a9     00 FF 50 00 
163ad     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
163b1     39 FF 77 00 
163b5     55 FF 8A 00 
163b9     71 FF 9E 00 
163bd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
163c1     AA FF C5 00 
163c5     C6 FF D8 00 
163c9     E3 FF EC 00 
163cd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
163d1     00 40 28 00 
163d5     00 60 3C 00 
163d9     00 80 50 00 
163dd     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
163e1     00 BF 78 00 
163e5     00 DF 8C 00 
163e9     00 FF A0 00 
163ed     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
163f1     39 FF B5 00 
163f5     55 FF C0 00 
163f9     71 FF CA 00 
163fd     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
16401     AA FF DF 00 
16405     C6 FF EA 00 
16409     E3 FF F4 00 
1640d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
16411     00 40 40 00 
16415     00 60 60 00 
16419     00 80 80 00 
1641d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
16421     00 BF BF 00 
16425     00 DF DF 00 
16429     00 FF FF 00 
1642d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
16431     39 FF FF 00 
16435     55 FF FF 00 
16439     71 FF FF 00 
1643d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
16441     AA FF FF 00 
16445     C6 FF FF 00 
16449     E3 FF FF 00 
1644d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
16451     00 28 40 00 
16455     00 3C 60 00 
16459     00 50 80 00 
1645d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
16461     00 78 BF 00 
16465     00 8C DF 00 
16469     00 A0 FF 00 
1646d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
16471     39 B5 FF 00 
16475     55 C0 FF 00 
16479     71 CA FF 00 
1647d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
16481     AA DF FF 00 
16485     C6 EA FF 00 
16489     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1648c                 | '**********************************************************************************
1648c                 | '
1648c                 | '        Timings and colors definitions
1648c                 | '
1648c                 | '**********************************************************************************
1648c                 | 
1648c                 |    'streamer sets for text mode, to add to timings[0..5]
1648c                 | ' todo for the retromachine: 768x576
1648c                 | 
1648c                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1648c     10 00 00 00 
16490     50 00 00 00 
16494     14 00 00 00 
16498     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1649c     70 00 00 00 
164a0     08 00 00 00 
164a4     30 00 00 00 
164a8     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
164ac     10 00 00 00 
164b0     10 00 00 00 
164b4     00 00 00 00 
164b8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
164bc     E0 01 00 00 
164c0     F6 32 24 15 
164c4     FB 6C C3 01 
164c8     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
164cc     12 00 00 00 
164d0     30 00 00 00 
164d4     10 00 00 00 
164d8     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
164dc     18 00 00 00 
164e0     08 00 00 00 
164e4     18 00 00 00 
164e8     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
164ec     20 00 00 00 
164f0     18 00 00 00 
164f4     40 00 00 00 
164f8     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
164fc     F0 01 00 00 
16500     46 D8 06 13 
16504     FB 2D CB 01 
16508     20 02 00 00 | 	byte	$f0, $01, $00, $00, $46, $d8, $06, $13, $fb, $2d, $cb, $01, $20, $02, $00, $00
1650c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1650c     10 00 00 00 
16510     40 00 00 00 
16514     10 00 00 00 
16518     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1651c     08 00 00 00 
16520     08 00 00 00 
16524     08 00 00 00 
16528     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1652c     40 00 00 00 
16530     20 00 00 00 
16534     80 00 00 00 
16538     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1653c     E0 01 00 00 
16540     70 AE E9 10 
16544     FB 8B FF 01 
16548     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1654c     10 00 00 00 
16550     50 00 00 00 
16554     14 00 00 00 
16558     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1655c     00 00 00 00 
16560     08 00 00 00 
16564     00 00 00 00 
16568     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1656c     10 00 00 00 
16570     10 00 00 00 
16574     C0 00 00 00 
16578     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1657c     40 02 00 00 
16580     F6 32 24 15 
16584     FB 6C C3 01 
16588     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1658c     50 00 00 00 
16590     A0 00 00 00 
16594     54 00 00 00 
16598     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1659c     08 00 00 00 
165a0     08 00 00 00 
165a4     08 00 00 00 
165a8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
165ac     0C 00 00 00 
165b0     08 00 00 00 
165b4     00 01 00 00 
165b8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
165bc     E0 01 00 00 
165c0     10 06 56 15 
165c4     FB 64 C3 01 
165c8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
165cc     50 00 00 00 
165d0     32 00 00 00 
165d4     50 00 00 00 
165d8     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
165dc     08 00 00 00 
165e0     08 00 00 00 
165e4     08 00 00 00 
165e8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
165ec     0C 00 00 00 
165f0     08 00 00 00 
165f4     40 01 00 00 
165f8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
165fc     E0 01 00 00 
16600     F2 CD 33 13 
16604     FB 53 92 01 
16608     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1660c     18 00 00 00 
16610     30 00 00 00 
16614     18 00 00 00 
16618     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1661c     08 00 00 00 
16620     08 00 00 00 
16624     08 00 00 00 
16628     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1662c     0C 00 00 00 
16630     08 00 00 00 
16634     80 01 00 00 
16638     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1663c     E0 01 00 00 
16640     F4 8F 11 11 
16644     FB 3A 55 01 
16648     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1664c     20 00 00 00 
16650     40 00 00 00 
16654     22 00 00 00 
16658     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1665c     00 00 00 00 
16660     08 00 00 00 
16664     00 00 00 00 
16668     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1666c     0C 00 00 00 
16670     08 00 00 00 
16674     C0 01 00 00 
16678     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1667c     F0 01 00 00 
16680     F2 CD 33 13 
16684     FB 53 92 01 
16688     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1668c                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1668c     00 75 C7 97 
16690     27 47 F6 0A 
16694     05 79 CB 9B 
16698     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1669c                 | 
1669c     28 12 64 FD | hdmi            setq    #9
166a0     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
166a4                 |            '     setq2   #255
166a4                 |             '    rdlong  $100, paletteptr 
166a4     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
166a8     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
166ac     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
166b0     78 F9 02 F1 |                 add     ii,hbase
166b4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
166b8     7B 0B 80 FF 
166bc     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
166c0                 | 
166c0     66 66 86 FF 
166c4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
166c8                 | 
166c8                 | 
166c8                 | ''--------  frame rendering main loop  ---------------------------------------------------
166c8                 | 
166c8                 | p101
166c8     28 14 64 FD |                 setq    #10
166cc     00 DF 06 FB |                 rdlong  framebuf,  ptra
166d0     28 1E 64 FD |                 setq    #15
166d4     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
166d8     71 99 02 FB |                 rdlong  border,borderptr
166dc                 | 
166dc     01 C4 06 F1 |                 add     frames,#1
166e0     76 F5 02 F6 |                 mov     dlptr2,dlptr
166e4                 | 
166e4     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
166e8     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
166ec     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
166f0     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
166f4                 |  '' up porch
166f4                 | 
166f4     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
166f8     49 FF 02 F6 |                 mov     hsync1,sync_001
166fc     37 A8 46 FB |                 callpa  i_upporch ,#blank
16700     72 01 68 FC |                 wrlong  #0,vblankptr
16704                 |                 
16704     1F EA 16 F4 |                 testb   paletteptr,#31 wc
16708     29 FE 65 3D |          if_nc  setq2   #255
1670c     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
16710                 | 
16710                 | '' cursor blinking
16710                 | 
16710     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
16714     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
16718                 | 
16718                 | '' main screen
16718                 | 
16718     00 BE 06 F6 |                 mov linenum,#0
1671c     00 18 07 F6 |                 mov rcnt,#0
16720     00 1C 07 F6 |                 mov rcnt2a,#0
16724                 | 
16724                 | 
16724     00 18 0F F2 | p301            cmp rcnt,#0 wz
16728     18 00 90 AD |         if_z    jmp #p306
1672c     01 18 87 F1 |                 sub rcnt,#1
16730     90 F7 02 F6 |                 mov dl,rdl
16734     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
16738     8F F7 02 A1 |    if_z        add dl,roffset  
1673c     7B 21 03 F6 |                 mov rdl,dl
16740     04 00 90 FD |                 jmp #p307          
16744                 |           
16744                 |                 
16744     7A F7 02 FB | p306            rdlong  dl,dlptr2
16748     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1674c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
16750     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
16754                 | 
16754                 | '' Special entry:
16754                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
16754                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
16754                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
16754                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
16754                 | '' todo: set horizontal scroll (if needed)
16754                 | 
16754     02 FA 66 F0 |                 shl framebuf2,#2
16758     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1675c     04 22 0F F2 |                 cmp dlc,#%100 wz
16760                 |   
16760                 |                 
16760     04 F4 06 F1 |                 add dlptr2,#4
16764     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
16768     7A 21 03 FB |                  rdlong rdl,dlptr2
1676c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
16770     04 18 47 F0 |                  shr rcnt,#4
16774                 |              
16774     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
16778     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1677c                 |                 
1677c     04 1E 47 F0 |                  shr roffset,#4
16780     0C 1E 67 F0 |                  shl roffset,#12
16784                 |   
16784     9C FF 9F FD |                  jmp #p301
16788                 |                  
16788                 |                  
16788                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
16788     0C FA 46 F0 |                 shr     framebuf2,#12
1678c     02 FA 66 F0 |                 shl     framebuf2,#2
16790                 | 
16790     7B 03 E3 F8 |                 getbyte t1,dl,#0
16794     00 02 0F F2 |                 cmp     t1,#0 wz
16798     34 00 90 AD |     if_z        jmp     #borderline
1679c                 | 
1679c     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
167a0     50 00 90 CD |           if_c   jmp     #textline
167a4     50 02 90 3D |           if_nc  jmp     #graphline
167a8                 | '
167a8     01 BE 06 F1 | p302            add     linenum,#1
167ac     04 F4 06 F1 |                 add     dlptr2,#4
167b0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
167b4     6C FF 9F 5D |          if_nz  jmp     #p301
167b8                 | 
167b8     72 03 68 FC | p112            wrlong  #1,vblankptr
167bc     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
167c0                 | 
167c0     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
167c4     4B FF 02 F6 |                 mov     hsync1,sync_223
167c8     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
167cc     F8 FE 9F FD |                 jmp     #p101
167d0                 | 
167d0                 | '' ---------------  END of frame rendering loop -------------------------------------------
167d0                 | 
167d0                 | 
167d0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
167d4     4C A1 C2 FC |                 xcont   m_vi,border
167d8     CC FF 9F FD |                 jmp     #p302
167dc                 | 
167dc                 | 
167dc     08 00 B0 FD | blank           call    #hsync                          'blank lines
167e0     7E A1 C2 FC |                 xcont   m_vi,hsync0
167e4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
167e8                 | 
167e8     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
167ec     7F 9D B2 FC |                 xzero   m_sn,hsync1
167f0     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
167f4                 | 
167f4                 | 
167f4                 | 
167f4                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
167f4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
167f4                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
167f4                 | 
167f4                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
167f4                 | 
167f4     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
167f8                 | 
167f8     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
167fc     7B 17 5B F8 |                 getnib  zoom, dl,#3
16800     03 16 07 F5 |                 and             zoom, #3
16804                 | 
16804                 | 
16804                 | 
16804     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
16808     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1680c     3F BC 06 F5 |                 and     linestart,#63
16810     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
16814     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
16818                 | 
16818     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1681c                 | 
1681c                 |                        ' if fontline =0, get a border color
1681c                 | 
1681c     51 03 33 F9 | p102            getword t1,m_border,#0
16820     00 02 0F F2 |                 cmp     t1, #0 wz
16824     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
16828                 | 
16828     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1682c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
16830     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
16834     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
16838     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1683c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
16840     52 BB 02 F6 |                 mov m_lut2, m_lut1
16844     6A BB 02 F1 |                 add m_lut2, lutt1
16848     58 0F 03 F6 |                 mov cpl2,i_cpl
1684c                 | 
1684c     02 16 0F F2 |                cmp zoom,#2 wz
16850     E4 00 90 AD |           if_z jmp #p420
16854     01 16 0F F2 |                cmp zoom,#1 wz
16858     64 00 90 AD |           if_z jmp #p410
1685c     00 16 0F F2 |                 cmp zoom,#0 wz
16860     04 00 90 AD |           if_z jmp #p400
16864     50 01 90 FD |                jmp #p430
16868                 | 
16868                 |                    '
16868                 |  ''---------------------------------------------------------------------------------------------------------
16868     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1686c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
16870     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
16874     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
16878     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1687c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
16880     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
16884     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
16888     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1688c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
16890                 | 
16890     81 BB C2 FC |                         xcont m_lut2,t1
16894                 | 
16894     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
16898     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1689c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
168a0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
168a4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
168a8     01 C0 86 F1 |                         sub     lutaddr,#1
168ac                 | 
168ac     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
168b0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
168b4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
168b8                 | 
168b8     EB 0F 6F FB |                         djnz   cpl2,#p400
168bc     28 01 90 FD |  p401                   jmp    #p103
168c0                 | 
168c0                 | ''------------------------------------------------------------------------------------------------------------
168c0                 | 
168c0     01 0E 47 F0 |  p410                   shr cpl2,#1
168c4                 | 
168c4                 | ''---------------------------------------------------------------------------------------------------------
168c4     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
168c8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
168cc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
168d0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
168d4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
168d8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
168dc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
168e0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
168e4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
168e8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
168ec                 | 
168ec                 | 
168ec     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
168f0     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
168f4     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
168f8     03 02 07 FA |                         mul t1,#3
168fc     81 BB C2 FC |                         xcont m_lut2,t1
16900     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
16904     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
16908     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1690c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
16910     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
16914     01 C0 86 F1 |                         sub     lutaddr,#1
16918     63 06 63 FD |                         mergew t3
1691c     03 06 07 FA |                         mul t3,#3
16920     83 BB C2 FC |                         xcont m_lut2,t3
16924                 | 
16924     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
16928     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1692c                 | 
1692c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
16930                 | 
16930     E4 0F 6F FB |                         djnz   cpl2,#p412
16934     B0 00 90 FD |  p411                   jmp    #p103
16938                 | 
16938                 | ''------------------------------------------------------------------------------------------------------------
16938                 | 
16938     02 0E 47 F0 |  p420                   shr cpl2,#2
1693c                 | 
1693c                 | ''---------------------------------------------------------------------------------------
1693c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
16940     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
16944     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
16948     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1694c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
16950     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
16954     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
16958     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1695c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
16960     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
16964                 | 
16964     61 02 63 FD |                         mergeb t1
16968     81 07 3B F9 |                         getword t3,t1,#1
1696c     0F 02 07 FA |                         mul t1,#15
16970     81 BB C2 FC |                         xcont m_lut2,t1
16974                 | 
16974     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
16978     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1697c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
16980     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
16984     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
16988     01 C0 86 F1 |                         sub     lutaddr,#1
1698c                 | 
1698c     81 09 EB F8 |                         getbyte t4,t1,#1        '
16990     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
16994                 | 
16994     0F 06 07 FA |                         mul t3,#15
16998     83 BB C2 FC |                         xcont m_lut2,t3
1699c                 | 
1699c     83 0B EB F8 |                         getbyte t5,t3,#1
169a0     85 BB C2 FC |                         xcont m_lut2, t5
169a4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
169a8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
169ac                 | 
169ac     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
169b0                 | 
169b0     E2 0F 6F FB |                         djnz   cpl2,#p422
169b4     30 00 90 FD |  p421                   jmp    #p103
169b8                 | 
169b8                 | '--------------------------------------------------------------------------------------------------------------
169b8                 | 
169b8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
169bc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
169c0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
169c4                 | 
169c4     00 BA C6 FC |                         xcont m_lut2,#0
169c8                 | 
169c8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
169cc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
169d0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
169d4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
169d8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
169dc     01 C0 86 F1 |                         sub     lutaddr,#1
169e0                 | 
169e0     F5 0F 6F FB |                         djnz   cpl2,#p430
169e4     00 00 90 FD |  p431                   jmp    #p103
169e8                 | 
169e8                 | ''------------------------------------------------------------------------------------------------------------
169e8                 | 
169e8                 | 
169e8                 | 
169e8     51 25 33 F9 | p103            getword  mb2,m_border,#0
169ec     00 24 0F F2 |                 cmp      mb2, #0 wz
169f0     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
169f4                 | 
169f4     B0 FD 9F FD |                 jmp #p302
169f8                 | 
169f8                 | '' -------------------------------------- END of text line ---------------------------------
169f8                 | 
169f8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
169f8                 | 
169f8     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
169fc                 | 
169fc                 | 
169fc     51 25 33 F9 | p202            getword mb2,m_border,#0
16a00     00 24 0F F2 |                 cmp     mb2, #0 wz
16a04     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
16a08                 | 
16a08                 | '----------------------------------------- display pixels
16a08                 | 
16a08     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
16a0c     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
16a10                 | 
16a10     7B 17 5B F8 |                 getnib  zoom, dl,#3
16a14     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
16a18                 | 
16a18     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
16a1c     0C BC 06 F5 |                 and     colordepth,#12
16a20                 | 
16a20     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
16a24     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
16a28     64 00 90 AD |           if_z  jmp     #p240
16a2c                 | 
16a2c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
16a30     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
16a34     98 00 90 AD |           if_z  jmp     #p250
16a38                 | 
16a38     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
16a3c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
16a40     FC 00 90 AD |           if_z  jmp     #p260
16a44                 | 
16a44     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
16a48                 | 
16a48                 | '' --- 8 bit color modes
16a48                 | 
16a48     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
16a4c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
16a50                 | 
16a50     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
16a54     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
16a58                 |        
16a58                 |  '  
16a58     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
16a5c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
16a60                 |     
16a60                 |  
16a60     05 0C 07 56 |                 if_nz mov skippattern,#%000101
16a64     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
16a68                 |         
16a68                 | 
16a68                 |         
16a68     7D 11 03 FB | p235               rdlong  char,framebuf2
16a6c     32 0C 63 FD |                    skipf skippattern
16a70     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
16a74     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
16a78     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
16a7c     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
16a80     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
16a84     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
16a88     F7 0F 6F FB |                    djnz    cpl2,#p235
16a8c                 | 
16a8c     20 01 90 FD |                jmp    #p203
16a90                 |                   
16a90                 | 
16a90                 | 
16a90                 | '' --- 1 bit color modes
16a90                 | 
16a90     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
16a94     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
16a98                 | 
16a98     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
16a9c     13 0C 07 A6 |        if_z   mov skippattern,#%10011
16aa0     08 0C 07 56 |        if_nz  mov skippattern,#%01000
16aa4                 | 
16aa4                 | 
16aa4     7D 11 E3 FA | p241               rdword  char,framebuf2
16aa8     44 10 FF F9 |                    movbyts char,#%01000100
16aac     63 10 63 FD |                    mergew  char
16ab0     32 0C 63 FD |                    skipf skippattern
16ab4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
16ab8     63 10 63 FD |                    mergew  char                    ' 1 0
16abc     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
16ac0     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
16ac4     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
16ac8     F6 0F 6F FB |                    djnz   cpl2,#p241
16acc                 | 
16acc                 | 
16acc     E0 00 90 FD |                jmp    #p203
16ad0                 | 
16ad0                 | '' --- 2 bit color modes
16ad0                 | 
16ad0     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
16ad4     C8 00 90 AD |        if_z   jmp #p251
16ad8                 | 
16ad8     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
16adc     30 00 90 AD |        if_z   jmp #p252
16ae0                 | 
16ae0                 | 
16ae0     7D 11 C3 FA | p254               rdbyte char,framebuf2
16ae4     04 0A 07 F6 |                    mov  t5,#4
16ae8     02 10 67 F0 | p255               shl  char,#2
16aec     88 03 53 F8 |                    getnib  t1,char,#2
16af0     03 02 07 F5 |                    and     t1,#3
16af4     55 02 07 FA |                    mul     t1,#$55
16af8     81 05 03 F9 |                    rolbyte  t2,t1,#0
16afc     FA 0B 6F FB |                    djnz    t5,#p255
16b00     82 BB C2 FC |                    xcont   m_lut2,t2
16b04     01 FA 06 F1 |                    add     framebuf2,#1
16b08     F5 0F 6F FB |                    djnz    cpl2,#p254
16b0c     A0 00 90 FD |                    jmp     #p203
16b10                 | 
16b10     7D 11 E3 FA | p252               rdword char,framebuf2
16b14     08 0A 07 F6 |                    mov  t5,#8
16b18     02 10 67 F0 | p253               shl  char,#2
16b1c     88 03 63 F8 |                    getnib  t1,char,#4
16b20     03 02 07 F5 |                    and     t1,#3
16b24     05 02 07 FA |                    mul     t1,#5
16b28     81 05 83 F8 |                    rolnib  t2,t1,#0
16b2c     FA 0B 6F FB |                    djnz    t5,#p253
16b30     82 BB C2 FC |                    xcont   m_lut2,t2
16b34     02 FA 06 F1 |                    add     framebuf2,#2
16b38     F5 0F 6F FB |                    djnz    cpl2,#p252
16b3c     70 00 90 FD |                    jmp     #p203
16b40                 | 
16b40                 | '' ------ 4 bit color modes
16b40                 | 
16b40     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
16b44     58 00 90 AD |        if_z   jmp #p251
16b48                 | 
16b48     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
16b4c     2C 00 90 AD |        if_z   jmp #p262
16b50                 | 
16b50                 | 
16b50     7D 11 C3 FA | p263               rdbyte char,framebuf2
16b54     02 0A DC FC |                            rep #5,#2
16b58     88 05 8B F8 |                              rolnib t2,char,#1
16b5c     88 05 8B F8 |                                  rolnib t2,char,#1
16b60     88 05 8B F8 |                              rolnib t2,char,#1
16b64     88 05 8B F8 |                                  rolnib t2,char,#1
16b68     04 10 67 F0 |                              shl char,#4
16b6c     82 BB C2 FC |                    xcont   m_lut2,t2
16b70     01 FA 06 F1 |                    add     framebuf2,#1
16b74     F6 0F 6F FB |                    djnz    cpl2,#p263
16b78     34 00 90 FD |                    jmp     #p203
16b7c                 | 
16b7c     7D 11 E3 FA | p262               rdword  char,framebuf2
16b80     04 06 DC FC |                            rep #3,#4
16b84     88 05 9B F8 |                              rolnib t2,char,#3
16b88     88 05 9B F8 |                                  rolnib t2,char,#3
16b8c     04 10 67 F0 |                              shl char,#4
16b90     82 BB C2 FC |                    xcont   m_lut2,t2
16b94     02 FA 06 F1 |                    add     framebuf2,#2
16b98     F8 0F 6F FB |                    djnz    cpl2,#p262
16b9c     10 00 90 FD |                    jmp     #p203
16ba0                 | 
16ba0                 | ''---------- all color modes without zoom
16ba0                 | 
16ba0     87 07 D8 FC | p251               rep  #3,cpl2
16ba4     7D 11 03 FB |                    rdlong  char,framebuf2
16ba8     04 FA 06 F1 |                    add     framebuf2,#4
16bac     88 BB C2 FC |                    xcont   m_lut2,char
16bb0                 |           
16bb0                 |  ''-----------------------------------------------------------------------------------------
16bb0                 | p203           ' getword  mb2,m_border,#0
16bb0     00 24 0F F2 |                 cmp      mb2, #0 wz
16bb4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
16bb8                 | 
16bb8     EC FB 9F FD |                 jmp #p302
16bbc                 | 
16bbc                 | '' -------------------------------------- END of graph  line ---------------------------------
16bbc                 | 
16bbc                 | '' consts and vars
16bbc                 | 
16bbc     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
16bc0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
16bc4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
16bc8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
16bcc                 | 
16bcc     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
16bd0                 | 
16bd0                 | '------ these longs will be set by setmode function
16bd0                 | 
16bd0     00 00 00 00 | m_bs            long    0        'blanks before sync
16bd4     00 00 00 00 | m_sn            long    0        'sync
16bd8     00 00 00 00 | m_bv            long    0        'blanks before visible
16bdc     00 00 00 00 | m_vi            long    0        'visible pixels #
16be0     00 00 00 00 | m_border        long    0        'left/right borders
16be4     00 00 00 00 | m_lut1          long    0        'characters
16be8     00 00 00 00 | i_vborder       long    0        'up/down borders
16bec     00 00 00 00 | i_upporch       long    0        'up porch lines
16bf0     00 00 00 00 | i_vsync         long    0        'vsync lines
16bf4     00 00 00 00 | i_downporch     long    0        'down porch lines
16bf8     00 00 00 00 | i_modenum       long    0        'mode #
16bfc     00 00 00 00 | i_cpl           long    0        'chars/longs per line
16c00     00 00 00 00 | i_lines         long    0        'scanlines #
16c04     00 00 00 00 | i_clock         long    0
16c08     00 00 00 00 | i_hubset        long    0
16c0c     00 00 00 00 | i_totalvis      long    0
16c10                 | 
16c10                 | '-------------------------------------
16c10                 | 
16c10     00 00 00 00 | m_lut2          long    0
16c14                 | 
16c14                 | colordepth
16c14     00 00 00 00 | linestart       long    0
16c18     00 00 00 00 | linenum         long    0
16c1c     00 01 00 00 | lutaddr         long    256
16c20                 | 
16c20     0E 00 00 00 | cursorsh        long    14
16c24     00 00 00 00 | frames          long    0
16c28     00 00 00 00 | cursorx         long    0
16c2c     00 00 00 00 | cursory         long    0
16c30     00 00 00 00 | cursorpos       long    0
16c34     00 00 00 00 | cursorpos2      long    0
16c38     00 00 00 00 | fontstart       long    0
16c3c     00 00 00 00 | border2         long 0
16c40     00 00 81 70 | lutiv           long $70810000
16c44     00 00 88 00 | lutt1           long $00880000
16c48     00 00 80 00 | lutg1           long $00800000
16c4c     00 00 80 10 | lutg2           long $10800000
16c50     00 00 80 20 | lutg4           long $20800000
16c54     00 00 80 30 | lutg8           long $30800000
16c58     00 00 00 00 | framebuf        long 0
16c5c     00 00 00 00 | fontbuf         long 0
16c60     00 00 00 00 | borderptr       long 0
16c64     00 00 00 00 | vblankptr       long 0
16c68     00 00 00 00 | cursorptr       long 0
16c6c     00 00 00 00 | modeptr         long 0
16c70     00 00 00 00 | paletteptr      long 0
16c74     00 00 00 00 | dlptr           long 0
16c78                 | fontnumptr      res     1
16c78                 | fontnumptr      res     1
16c78                 | hbase           res     1
16c78                 | hbase           res     1
16c78                 | borderptr2      res     1
16c78                 | borderptr2      res     1
16c78                 | dlptr2 res 1
16c78                 | dlptr2 res 1
16c78                 | dl              res 1
16c78                 | dl              res 1
16c78                 | ii              res     1
16c78                 | ii              res     1
16c78                 | framebuf2       res     1
16c78                 | framebuf2       res     1
16c78                 | hsync0          res     1
16c78                 | hsync0          res     1
16c78                 | hsync1          res     1
16c78                 | hsync1          res     1
16c78                 | fontline        res     1
16c78                 | fontline        res     1
16c78                 | t1              res     1
16c78                 | t1              res     1
16c78                 | t2              res     1
16c78                 | t2              res     1
16c78                 | t3 res 1
16c78                 | t3 res 1
16c78                 | t4 res 1
16c78                 | t4 res 1
16c78                 | t5 res 1
16c78                 | t5 res 1
16c78                 | skippattern res 1
16c78                 | skippattern res 1
16c78                 | cpl2 res 1
16c78                 | cpl2 res 1
16c78                 | char            res     1
16c78                 | char            res     1
16c78                 | backcolor       res     1
16c78                 | backcolor       res     1
16c78                 | charcolor       res     1
16c78                 | charcolor       res     1
16c78                 | zoom res 1
16c78                 | zoom res 1
16c78     00 00 00 00 | rcnt long 0 'dl repeat count
16c7c     00 00 00 00 | rcnt2 long 0
16c80     00 00 00 00 | rcnt2a long 0
16c84     00 00 00 00 | roffset long 0
16c88     00 00 00 00 | rdl long 0  'dl repeat line
16c8c     00 00 00 00 | dlc long 0 'dl command
16c90     00 00 00 00 | mb2 long 0
16c94     00 00 00 00 | aend             long 0
16c98                 |                 fit     496                     '
16c98                 | _trackerplayer_spin2_dat_
16c98                 | 
16c98     00 00 00 00 | null             long  0
16c9c     46 52 45 51 
16ca0     46 52 45 51 
16ca4     46 52 45 51 
16ca8     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
16cac     46 52 45 51 
16cb0     46 52 45 51 
16cb4     46 52 45 51 
16cb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16cbc     46 52 45 51 
16cc0     46 52 45 51 
16cc4     46 52 45 51 
16cc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16ccc     46 52 45 51 
16cd0     46 52 45 51 
16cd4     46 52 45 51 
16cd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16cdc     46 52 45 51 
16ce0     46 52 45 51 
16ce4     46 52 45 51 
16ce8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16cec     46 52 45 51 
16cf0     46 52 45 51 
16cf4     46 52 45 51 
16cf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16cfc     46 52 45 51 
16d00     46 52 45 51 
16d04     46 52 45 51 
16d08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d0c     46 52 45 51 
16d10     46 52 45 51 
16d14     46 52 45 51 
16d18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d1c     46 52 45 51 
16d20     46 52 45 51 
16d24     46 52 45 51 
16d28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d2c     46 52 45 51 
16d30     46 52 45 51 
16d34     46 52 45 51 
16d38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d3c     46 52 45 51 
16d40     46 52 45 51 
16d44     46 52 45 51 
16d48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d4c     46 52 45 51 
16d50     46 52 45 51 
16d54     46 52 45 51 
16d58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d5c     46 52 45 51 
16d60     46 52 45 51 
16d64     46 52 45 51 
16d68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d6c     46 52 45 51 
16d70     46 52 45 51 
16d74     46 52 45 51 
16d78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d7c     46 52 45 51 
16d80     46 52 45 51 
16d84     46 52 45 51 
16d88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d8c     46 52 45 51 
16d90     46 52 45 51 
16d94     46 52 45 51 
16d98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16d9c     46 52 45 51 
16da0     46 52 45 51 
16da4     46 52 45 51 
16da8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16dac     46 52 45 51 
16db0     46 52 45 51 
16db4     46 52 45 51 
16db8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16dbc     46 52 45 51 
16dc0     46 52 45 51 
16dc4     46 52 45 51 
16dc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16dcc     46 52 45 51 
16dd0     46 52 45 51 
16dd4     46 52 45 51 
16dd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16ddc     46 52 45 51 
16de0     46 52 45 51 
16de4     46 52 45 51 
16de8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16dec     46 52 45 51 
16df0     46 52 45 51 
16df4     46 52 45 51 
16df8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16dfc     46 52 45 51 
16e00     46 52 45 51 
16e04     46 52 45 51 
16e08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e0c     46 52 45 51 
16e10     46 52 45 51 
16e14     46 52 45 51 
16e18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e1c     46 52 45 51 
16e20     46 52 45 51 
16e24     46 52 45 51 
16e28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e2c     46 52 45 51 
16e30     46 52 45 51 
16e34     46 52 45 51 
16e38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e3c     46 52 45 51 
16e40     46 52 45 51 
16e44     46 52 45 51 
16e48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e4c     46 52 45 51 
16e50     46 52 45 51 
16e54     46 52 45 51 
16e58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e5c     46 52 45 51 
16e60     46 52 45 51 
16e64     46 52 45 51 
16e68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e6c     46 52 45 51 
16e70     46 52 45 51 
16e74     46 52 45 51 
16e78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e7c     46 52 45 51 
16e80     46 52 45 51 
16e84     46 52 45 51 
16e88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e8c     46 52 45 51 
16e90     46 52 45 51 
16e94     46 52 45 51 
16e98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16e9c     46 52 45 51 
16ea0     46 52 45 51 
16ea4     46 52 45 51 
16ea8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16eac     46 52 45 51 
16eb0     46 52 45 51 
16eb4     46 52 45 51 
16eb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16ebc     46 52 45 51 
16ec0     46 52 45 51 
16ec4     46 52 45 51 
16ec8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16ecc     46 52 45 51 
16ed0     46 52 45 51 
16ed4     46 52 45 51 
16ed8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16edc     46 52 45 51 
16ee0     46 52 45 51 
16ee4     46 52 45 51 
16ee8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16eec     46 52 45 51 
16ef0     46 52 45 51 
16ef4     46 52 45 51 
16ef8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16efc     46 52 45 51 
16f00     46 52 45 51 
16f04     46 52 45 51 
16f08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f0c     46 52 45 51 
16f10     46 52 45 51 
16f14     46 52 45 51 
16f18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f1c     46 52 45 51 
16f20     46 52 45 51 
16f24     46 52 45 51 
16f28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f2c     46 52 45 51 
16f30     46 52 45 51 
16f34     46 52 45 51 
16f38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f3c     46 52 45 51 
16f40     46 52 45 51 
16f44     46 52 45 51 
16f48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f4c     46 52 45 51 
16f50     46 52 45 51 
16f54     46 52 45 51 
16f58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f5c     46 52 45 51 
16f60     46 52 45 51 
16f64     46 52 45 51 
16f68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f6c     46 52 45 51 
16f70     46 52 45 51 
16f74     46 52 45 51 
16f78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f7c     46 52 45 51 
16f80     46 52 45 51 
16f84     46 52 45 51 
16f88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f8c     46 52 45 51 
16f90     46 52 45 51 
16f94     46 52 45 51 
16f98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16f9c     46 52 45 51 
16fa0     46 52 45 51 
16fa4     46 52 45 51 
16fa8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16fac     46 52 45 51 
16fb0     46 52 45 51 
16fb4     46 52 45 51 
16fb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16fbc     46 52 45 51 
16fc0     46 52 45 51 
16fc4     46 52 45 51 
16fc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16fcc     46 52 45 51 
16fd0     46 52 45 51 
16fd4     46 52 45 51 
16fd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16fdc     46 52 45 51 
16fe0     46 52 45 51 
16fe4     46 52 45 51 
16fe8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16fec     46 52 45 51 
16ff0     46 52 45 51 
16ff4     46 52 45 51 
16ff8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
16ffc     46 52 45 51 
17000     46 52 45 51 
17004     46 52 45 51 
17008     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1700c     46 52 45 51 
17010     46 52 45 51 
17014     46 52 45 51 
17018     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1701c     46 52 45 51 
17020     46 52 45 51 
17024     46 52 45 51 
17028     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1702c     46 52 45 51 
17030     46 52 45 51 
17034     46 52 45 51 
17038     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1703c     46 52 45 51 
17040     46 52 45 51 
17044     46 52 45 51 
17048     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1704c     46 52 45 51 
17050     46 52 45 51 
17054     46 52 45 51 
17058     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1705c     46 52 45 51 
17060     46 52 45 51 
17064     46 52 45 51 
17068     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1706c     46 52 45 51 
17070     46 52 45 51 
17074     46 52 45 51 
17078     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1707c     46 52 45 51 
17080     46 52 45 51 
17084     46 52 45 51 
17088     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1708c     46 52 45 51 
17090     46 52 45 51 
17094     46 52 45 51 
17098     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1709c     46 52 45 51 
170a0     46 52 45 51 
170a4     46 52 45 51 
170a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
170ac     46 52 45 51 
170b0     46 52 45 51 
170b4     46 52 45 51 
170b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
170bc     46 52 45 51 
170c0     46 52 45 51 
170c4     46 52 45 51 
170c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
170cc     46 52 45 51 
170d0     46 52 45 51 
170d4     46 52 45 51 
170d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
170dc     46 52 45 51 
170e0     46 52 45 51 
170e4     46 52 45 51 
170e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
170ec     46 52 45 51 
170f0     46 52 45 51 
170f4     46 52 45 51 
170f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
170fc     46 52 45 51 
17100     46 52 45 51 
17104     46 52 45 51 
17108     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1710c     46 52 45 51 
17110     46 52 45 51 
17114     46 52 45 51 
17118     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1711c     46 52 45 51 
17120     46 52 45 51 
17124     46 52 45 51 
17128     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1712c     46 52 45 51 
17130     46 52 45 51 
17134     46 52 45 51 
17138     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1713c     46 52 45 51 
17140     46 52 45 51 
17144     46 52 45 51 
17148     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1714c     46 52 45 51 
17150     46 52 45 51 
17154     46 52 45 51 
17158     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1715c     46 52 45 51 
17160     46 52 45 51 
17164     46 52 45 51 
17168     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1716c     46 52 45 51 
17170     46 52 45 51 
17174     46 52 45 51 
17178     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1717c     46 52 45 51 
17180     46 52 45 51 
17184     46 52 45 51 
17188     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1718c     46 52 45 51 
17190     46 52 45 51 
17194     46 52 45 51 
17198     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1719c     46 52 45 51 
171a0     46 52 45 51 
171a4     46 52 45 51 
171a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
171ac     46 52 45 51 
171b0     46 52 45 51 
171b4     46 52 45 51 
171b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
171bc     46 52 45 51 
171c0     46 52 45 51 
171c4     46 52 45 51 
171c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
171cc     46 52 45 51 
171d0     46 52 45 51 
171d4     46 52 45 51 
171d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
171dc     46 52 45 51 
171e0     46 52 45 51 
171e4     46 52 45 51 
171e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
171ec     46 52 45 51 
171f0     46 52 45 51 
171f4     46 52 45 51 
171f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
171fc     46 52 45 51 
17200     46 52 45 51 
17204     46 52 45 51 
17208     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1720c     46 52 45 51 
17210     46 52 45 51 
17214     46 52 45 51 
17218     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1721c     46 52 45 51 
17220     46 52 45 51 
17224     46 52 45 51 
17228     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1722c     46 52 45 51 
17230     46 52 45 51 
17234     46 52 45 51 
17238     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1723c     46 52 45 51 
17240     46 52 45 51 
17244     46 52 45 51 
17248     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1724c     46 52 45 51 
17250     46 52 45 51 
17254     46 52 45 51 
17258     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1725c     46 52 45 51 
17260     46 52 45 51 
17264     46 52 45 51 
17268     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1726c     46 52 45 51 
17270     46 52 45 51 
17274     46 52 45 51 
17278     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1727c     46 52 45 51 
17280     46 52 45 51 
17284     46 52 45 51 
17288     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1728c     46 52 45 51 
17290     46 52 45 51 
17294     46 52 45 51 
17298     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1729c     46 52 45 51 
172a0     46 52 45 51 
172a4     46 52 45 51 
172a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
172ac     46 52 45 51 
172b0     46 52 45 51 
172b4     46 52 45 51 
172b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
172bc     46 52 45 51 
172c0     46 52 45 51 
172c4     46 52 45 51 
172c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
172cc     46 52 45 51 
172d0     46 52 45 51 
172d4     46 52 45 51 
172d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
172dc     46 52 45 51 
172e0     46 52 45 51 
172e4     46 52 45 51 
172e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
172ec     46 52 45 51 
172f0     46 52 45 51 
172f4     46 52 45 51 
172f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
172fc     46 52 45 51 
17300     46 52 45 51 
17304     46 52 45 51 
17308     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1730c     46 52 45 51 
17310     46 52 45 51 
17314     46 52 45 51 
17318     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1731c     46 52 45 51 
17320     46 52 45 51 
17324     46 52 45 51 
17328     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1732c     46 52 45 51 
17330     46 52 45 51 
17334     46 52 45 51 
17338     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1733c     46 52 45 51 
17340     46 52 45 51 
17344     46 52 45 51 
17348     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1734c     46 52 45 51 
17350     46 52 45 51 
17354     46 52 45 51 
17358     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1735c     46 52 45 51 
17360     46 52 45 51 
17364     46 52 45 51 
17368     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1736c     46 52 45 51 
17370     46 52 45 51 
17374     46 52 45 51 
17378     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1737c     46 52 45 51 
17380     46 52 45 51 
17384     46 52 45 51 
17388     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1738c     46 52 45 51 
17390     46 52 45 51 
17394     46 52 45 51 
17398     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1739c     46 52 45 51 
173a0     46 52 45 51 
173a4     46 52 45 51 
173a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
173ac     46 52 45 51 
173b0     46 52 45 51 
173b4     46 52 45 51 
173b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
173bc     46 52 45 51 
173c0     46 52 45 51 
173c4     46 52 45 51 
173c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
173cc     46 52 45 51 
173d0     46 52 45 51 
173d4     46 52 45 51 
173d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
173dc     46 52 45 51 
173e0     46 52 45 51 
173e4     46 52 45 51 
173e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
173ec     46 52 45 51 
173f0     46 52 45 51 
173f4     46 52 45 51 
173f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
173fc     46 52 45 51 
17400     46 52 45 51 
17404     46 52 45 51 
17408     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1740c     46 52 45 51 
17410     46 52 45 51 
17414     46 52 45 51 
17418     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1741c     46 52 45 51 
17420     46 52 45 51 
17424     46 52 45 51 
17428     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1742c     46 52 45 51 
17430     46 52 45 51 
17434     46 52 45 51 
17438     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1743c     46 52 45 51 
17440     46 52 45 51 
17444     46 52 45 51 
17448     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1744c     46 52 45 51 
17450     46 52 45 51 
17454     46 52 45 51 
17458     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1745c     46 52 45 51 
17460     46 52 45 51 
17464     46 52 45 51 
17468     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1746c     46 52 45 51 
17470     46 52 45 51 
17474     46 52 45 51 
17478     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1747c     46 52 45 51 
17480     46 52 45 51 
17484     46 52 45 51 
17488     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1748c     46 52 45 51 
17490     46 52 45 51 
17494     46 52 45 51 
17498     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1749c     46 52 45 51 
174a0     46 52 45 51 
174a4     46 52 45 51 
174a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
174ac     46 52 45 51 
174b0     46 52 45 51 
174b4     46 52 45 51 
174b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
174bc     46 52 45 51 
174c0     46 52 45 51 
174c4     46 52 45 51 
174c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
174cc     46 52 45 51 
174d0     46 52 45 51 
174d4     46 52 45 51 
174d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
174dc     46 52 45 51 
174e0     46 52 45 51 
174e4     46 52 45 51 
174e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
174ec     46 52 45 51 
174f0     46 52 45 51 
174f4     46 52 45 51 
174f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
174fc     46 52 45 51 
17500     46 52 45 51 
17504     46 52 45 51 
17508     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1750c     46 52 45 51 
17510     46 52 45 51 
17514     46 52 45 51 
17518     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1751c     46 52 45 51 
17520     46 52 45 51 
17524     46 52 45 51 
17528     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1752c     46 52 45 51 
17530     46 52 45 51 
17534     46 52 45 51 
17538     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1753c     46 52 45 51 
17540     46 52 45 51 
17544     46 52 45 51 
17548     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1754c     46 52 45 51 
17550     46 52 45 51 
17554     46 52 45 51 
17558     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1755c     46 52 45 51 
17560     46 52 45 51 
17564     46 52 45 51 
17568     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1756c     46 52 45 51 
17570     46 52 45 51 
17574     46 52 45 51 
17578     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1757c     46 52 45 51 
17580     46 52 45 51 
17584     46 52 45 51 
17588     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1758c     46 52 45 51 
17590     46 52 45 51 
17594     46 52 45 51 
17598     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1759c     46 52 45 51 
175a0     46 52 45 51 
175a4     46 52 45 51 
175a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
175ac     46 52 45 51 
175b0     46 52 45 51 
175b4     46 52 45 51 
175b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
175bc     46 52 45 51 
175c0     46 52 45 51 
175c4     46 52 45 51 
175c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
175cc     46 52 45 51 
175d0     46 52 45 51 
175d4     46 52 45 51 
175d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
175dc     46 52 45 51 
175e0     46 52 45 51 
175e4     46 52 45 51 
175e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
175ec     46 52 45 51 
175f0     46 52 45 51 
175f4     46 52 45 51 
175f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
175fc     46 52 45 51 
17600     46 52 45 51 
17604     46 52 45 51 
17608     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1760c     46 52 45 51 
17610     46 52 45 51 
17614     46 52 45 51 
17618     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1761c     46 52 45 51 
17620     46 52 45 51 
17624     46 52 45 51 
17628     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1762c     46 52 45 51 
17630     46 52 45 51 
17634     46 52 45 51 
17638     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1763c     46 52 45 51 
17640     46 52 45 51 
17644     46 52 45 51 
17648     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1764c     46 52 45 51 
17650     46 52 45 51 
17654     46 52 45 51 
17658     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1765c     46 52 45 51 
17660     46 52 45 51 
17664     46 52 45 51 
17668     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1766c     46 52 45 51 
17670     46 52 45 51 
17674     46 52 45 51 
17678     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1767c     46 52 45 51 
17680     46 52 45 51 
17684     46 52 45 51 
17688     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1768c     46 52 45 51 
17690     46 52 45 51 
17694     46 52 45 51 
17698     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1769c     46 52 45 51 
176a0     46 52 45 51 
176a4     46 52 45 51 
176a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
176ac     46 52 45 51 
176b0     46 52 45 51 
176b4     46 52 45 51 
176b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
176bc     46 52 45 51 
176c0     46 52 45 51 
176c4     46 52 45 51 
176c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
176cc     46 52 45 51 
176d0     46 52 45 51 
176d4     46 52 45 51 
176d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
176dc     46 52 45 51 
176e0     46 52 45 51 
176e4     46 52 45 51 
176e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
176ec     46 52 45 51 
176f0     46 52 45 51 
176f4     46 52 45 51 
176f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
176fc     46 52 45 51 
17700     46 52 45 51 
17704     46 52 45 51 
17708     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1770c     46 52 45 51 
17710     46 52 45 51 
17714     46 52 45 51 
17718     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1771c     46 52 45 51 
17720     46 52 45 51 
17724     46 52 45 51 
17728     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1772c     46 52 45 51 
17730     46 52 45 51 
17734     46 52 45 51 
17738     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1773c     46 52 45 51 
17740     46 52 45 51 
17744     46 52 45 51 
17748     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1774c     46 52 45 51 
17750     46 52 45 51 
17754     46 52 45 51 
17758     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1775c     46 52 45 51 
17760     46 52 45 51 
17764     46 52 45 51 
17768     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1776c     46 52 45 51 
17770     46 52 45 51 
17774     46 52 45 51 
17778     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1777c     46 52 45 51 
17780     46 52 45 51 
17784     46 52 45 51 
17788     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1778c     46 52 45 51 
17790     46 52 45 51 
17794     46 52 45 51 
17798     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1779c     46 52 45 51 
177a0     46 52 45 51 
177a4     46 52 45 51 
177a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
177ac     46 52 45 51 
177b0     46 52 45 51 
177b4     46 52 45 51 
177b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
177bc     46 52 45 51 
177c0     46 52 45 51 
177c4     46 52 45 51 
177c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
177cc     46 52 45 51 
177d0     46 52 45 51 
177d4     46 52 45 51 
177d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
177dc     46 52 45 51 
177e0     46 52 45 51 
177e4     46 52 45 51 
177e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
177ec     46 52 45 51 
177f0     46 52 45 51 
177f4     46 52 45 51 
177f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
177fc     46 52 45 51 
17800     46 52 45 51 
17804     46 52 45 51 
17808     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1780c     46 52 45 51 
17810     46 52 45 51 
17814     46 52 45 51 
17818     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1781c     46 52 45 51 
17820     46 52 45 51 
17824     46 52 45 51 
17828     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1782c     46 52 45 51 
17830     46 52 45 51 
17834     46 52 45 51 
17838     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1783c                 | 
1783c     00 00 00 00 
17840     18 00 00 00 
17844     31 00 00 00 
17848     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1784c     61 00 00 00 
17850     78 00 00 00 
17854     8D 00 00 00 
17858     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1785c     B4 00 00 00 
17860     C5 00 00 00 
17864     D4 00 00 00 
17868     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1786c     EB 00 00 00 
17870     F4 00 00 00 
17874     FA 00 00 00 
17878     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1787c     FF 00 00 00 
17880     FD 00 00 00 
17884     FA 00 00 00 
17888     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1788c     EB 00 00 00 
17890     E0 00 00 00 
17894     D4 00 00 00 
17898     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1789c     B4 00 00 00 
178a0     A1 00 00 00 
178a4     8D 00 00 00 
178a8     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
178ac     61 00 00 00 
178b0     4A 00 00 00 
178b4     31 00 00 00 
178b8     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
178bc     00 00 00 00 
178c0     E8 FF FF FF 
178c4     CF FF FF FF 
178c8     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
178cc     9F FF FF FF 
178d0     88 FF FF FF 
178d4     73 FF FF FF 
178d8     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
178dc     4C FF FF FF 
178e0     3B FF FF FF 
178e4     2C FF FF FF 
178e8     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
178ec     15 FF FF FF 
178f0     0C FF FF FF 
178f4     06 FF FF FF 
178f8     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
178fc     01 FF FF FF 
17900     03 FF FF FF 
17904     06 FF FF FF 
17908     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1790c     15 FF FF FF 
17910     20 FF FF FF 
17914     2C FF FF FF 
17918     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1791c     4C FF FF FF 
17920     5F FF FF FF 
17924     73 FF FF FF 
17928     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1792c     9F FF FF FF 
17930     B6 FF FF FF 
17934     CF FF FF FF 
17938     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1793c                 | 
1793c     58 03 28 03 
17940     FA 02 D0 02 
17944     A6 02 80 02 
17948     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1794c     1A 02 FC 01 
17950     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
17954     AC 01 94 01 
17958     7D 01 68 01 
1795c     53 01 40 01 
17960     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
17964     0D 01 FE 00 
17968     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1796c     D6 00 CA 00 
17970     BE 00 B4 00 
17974     AA 00 A0 00 
17978     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1797c     87 00 7F 00 
17980     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
17984     52 03 22 03 
17988     F5 02 CB 02 
1798c     A2 02 7D 02 
17990     59 02 37 02 |                  word  850 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
17994     17 02 F9 01 
17998     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1799c     A9 01 91 01 
179a0     7B 01 65 01 
179a4     51 01 3E 01 
179a8     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
179ac     0C 01 FD 00 
179b0     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
179b4     D5 00 C9 00 
179b8     BD 00 B3 00 
179bc     A9 00 9F 00 
179c0     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
179c4     86 00 7E 00 
179c8     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
179cc     4C 03 1C 03 
179d0     F0 02 C5 02 
179d4     9E 02 78 02 
179d8     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
179dc     14 02 F6 01 
179e0     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
179e4     A6 01 8E 01 
179e8     78 01 63 01 
179ec     4F 01 3C 01 
179f0     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
179f4     0A 01 FB 00 
179f8     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
179fc     D3 00 C7 00 
17a00     BC 00 B1 00 
17a04     A7 00 9E 00 
17a08     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
17a0c     85 00 7D 00 
17a10     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
17a14     46 03 17 03 
17a18     EA 02 C0 02 
17a1c     99 02 74 02 
17a20     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
17a24     10 02 F2 01 
17a28     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
17a2c     A3 01 8B 01 
17a30     75 01 60 01 
17a34     4C 01 3A 01 
17a38     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
17a3c     08 01 F9 00 
17a40     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
17a44     D1 00 C6 00 
17a48     BB 00 B0 00 
17a4c     A6 00 9D 00 
17a50     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
17a54     84 00 7D 00 
17a58     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
17a5c     40 03 11 03 
17a60     E5 02 BB 02 
17a64     94 02 6F 02 
17a68     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
17a6c     0C 02 EF 01 
17a70     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
17a74     A0 01 88 01 
17a78     72 01 5E 01 
17a7c     4A 01 38 01 
17a80     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
17a84     06 01 F7 00 
17a88     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
17a8c     D0 00 C4 00 
17a90     B9 00 AF 00 
17a94     A5 00 9C 00 
17a98     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
17a9c     83 00 7C 00 
17aa0     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
17aa4     3A 03 0B 03 
17aa8     E0 02 B6 02 
17aac     8F 02 6B 02 
17ab0     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
17ab4     08 02 EB 01 
17ab8     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
17abc     9D 01 86 01 
17ac0     70 01 5B 01 
17ac4     48 01 35 01 
17ac8     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
17acc     04 01 F5 00 
17ad0     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
17ad4     CE 00 C3 00 
17ad8     B8 00 AE 00 
17adc     A4 00 9B 00 
17ae0     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
17ae4     82 00 7B 00 
17ae8     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
17aec     34 03 06 03 
17af0     DA 02 B1 02 
17af4     8B 02 66 02 
17af8     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
17afc     04 02 E7 01 
17b00     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
17b04     9A 01 83 01 
17b08     6D 01 59 01 
17b0c     45 01 33 01 
17b10     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
17b14     02 01 F4 00 
17b18     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
17b1c     CD 00 C1 00 
17b20     B7 00 AC 00 
17b24     A3 00 9A 00 
17b28     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
17b2c     81 00 7A 00 
17b30     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
17b34     2E 03 00 03 
17b38     D5 02 AC 02 
17b3c     86 02 62 02 
17b40     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
17b44     01 02 E4 01 
17b48     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
17b4c     97 01 80 01 
17b50     6B 01 56 01 
17b54     43 01 31 01 
17b58     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
17b5c     00 01 F2 00 
17b60     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
17b64     CC 00 C0 00 
17b68     B5 00 AB 00 
17b6c     A1 00 98 00 
17b70     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
17b74     80 00 79 00 
17b78     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
17b7c     8B 03 58 03 
17b80     28 03 FA 02 
17b84     D0 02 A6 02 
17b88     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
17b8c     3A 02 1A 02 
17b90     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
17b94     C5 01 AC 01 
17b98     94 01 7D 01 
17b9c     68 01 53 01 
17ba0     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
17ba4     1D 01 0D 01 
17ba8     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
17bac     E2 00 D6 00 
17bb0     CA 00 BE 00 
17bb4     B4 00 AA 00 
17bb8     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
17bbc     8F 00 87 00 
17bc0     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
17bc4     84 03 52 03 
17bc8     22 03 F5 02 
17bcc     CB 02 A3 02 
17bd0     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
17bd4     37 02 17 02 
17bd8     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
17bdc     C2 01 A9 01 
17be0     91 01 7B 01 
17be4     65 01 51 01 
17be8     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
17bec     1C 01 0C 01 
17bf0     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
17bf4     E1 00 D4 00 
17bf8     C8 00 BD 00 
17bfc     B3 00 A9 00 
17c00     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
17c04     8E 00 86 00 
17c08     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
17c0c     7E 03 4C 03 
17c10     1C 03 F0 02 
17c14     C5 02 9E 02 
17c18     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
17c1c     33 02 14 02 
17c20     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
17c24     BF 01 A6 01 
17c28     8E 01 78 01 
17c2c     63 01 4F 01 
17c30     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
17c34     1A 01 0A 01 
17c38     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
17c3c     DF 00 D3 00 
17c40     C7 00 BC 00 
17c44     B1 00 A7 00 
17c48     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
17c4c     8D 00 85 00 
17c50     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
17c54     77 03 46 03 
17c58     17 03 EA 02 
17c5c     C0 02 99 02 
17c60     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
17c64     2F 02 10 02 
17c68     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
17c6c     BC 01 A3 01 
17c70     8B 01 75 01 
17c74     60 01 4C 01 
17c78     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
17c7c     18 01 08 01 
17c80     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
17c84     DE 00 D1 00 
17c88     C6 00 BB 00 
17c8c     B0 00 A6 00 
17c90     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
17c94     8C 00 84 00 
17c98     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
17c9c     71 03 40 03 
17ca0     11 03 E5 02 
17ca4     BB 02 94 02 
17ca8     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
17cac     2B 02 0C 02 
17cb0     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
17cb4     B9 01 A0 01 
17cb8     88 01 72 01 
17cbc     5E 01 4A 01 
17cc0     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
17cc4     16 01 06 01 
17cc8     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
17ccc     DC 00 D0 00 
17cd0     C4 00 B9 00 
17cd4     AF 00 A5 00 
17cd8     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
17cdc     8B 00 83 00 
17ce0     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
17ce4     6B 03 3A 03 
17ce8     0B 03 E0 02 
17cec     B6 02 8F 02 
17cf0     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
17cf4     27 02 08 02 
17cf8     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
17cfc     B5 01 9D 01 
17d00     86 01 70 01 
17d04     5B 01 48 01 
17d08     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
17d0c     14 01 04 01 
17d10     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
17d14     DB 00 CE 00 
17d18     C3 00 B8 00 
17d1c     AE 00 A4 00 
17d20     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
17d24     8A 00 82 00 
17d28     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
17d2c     64 03 34 03 
17d30     06 03 DA 02 
17d34     B1 02 8B 02 
17d38     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
17d3c     23 02 04 02 
17d40     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
17d44     B2 01 9A 01 
17d48     83 01 6D 01 
17d4c     59 01 45 01 
17d50     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
17d54     12 01 02 01 
17d58     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
17d5c     D9 00 CD 00 
17d60     C1 00 B7 00 
17d64     AC 00 A3 00 
17d68     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
17d6c     89 00 81 00 
17d70     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
17d74     5E 03 2E 03 
17d78     00 03 D5 02 
17d7c     AC 02 86 02 
17d80     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
17d84     1F 02 01 02 
17d88     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
17d8c     AF 01 97 01 
17d90     80 01 6B 01 
17d94     56 01 43 01 
17d98     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
17d9c     10 01 00 01 
17da0     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
17da4     D8 00 CB 00 
17da8     C0 00 B5 00 
17dac     AB 00 A1 00 
17db0     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
17db4     88 00 80 00 
17db8     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
17dbc                 | 	alignl
17dbc                 | _audio010_spin2_dat_
17dbc                 | 
17dbc                 | audio       org     0
17dbc                 | 
17dbc     0E 6C 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
17dc0     0E B4 1C FC |             wxpin   #90,#left
17dc4                 | 
17dc4     0F 6C 07 FC |             wrpin   dac,#right
17dc8     0F B4 1C FC |             wxpin   #90,#right
17dcc                 | 
17dcc     41 9C 64 FD |             dirh    #left addpins 1
17dd0                 | 
17dd0     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
17dd4     2B E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
17dd8     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
17ddc                 |             
17ddc                 | '---------------------------------------------------------------------------------        
17ddc                 | '----------------- The main loop -------------------------------------------------
17ddc                 | '---------------------------------------------------------------------------------
17ddc                 | 
17ddc     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
17de0     61 9F 06 FB |             rdlong  sstart1,ptra++
17de4     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
17de8     61 B1 06 FB |             rdlong  sstart2,ptra++
17dec     28 10 64 FD |             setq    #8
17df0     61 C3 06 FB |             rdlong  sstart3,ptra++
17df4     28 10 64 FD |             setq    #8
17df8     61 D5 06 FB |             rdlong  sstart4,ptra++
17dfc     28 10 64 FD |             setq    #8
17e00     61 E7 06 FB |             rdlong  sstart5,ptra++
17e04     28 10 64 FD |             setq    #8
17e08     61 F9 06 FB |             rdlong  sstart6,ptra++
17e0c     28 10 64 FD |             setq    #8
17e10     61 0B 07 FB |             rdlong  sstart7,ptra++
17e14     28 10 64 FD |             setq    #8
17e18     61 1D 07 FB |             rdlong  sstart8,ptra++
17e1c                 | 
17e1c     20 F1 87 F1 |             sub     ptra,#9*4*8    
17e20                 |             
17e20     3B 31 13 F2 |             cmp     time1,a1FFFFFFF wc   ' Main counter overflow workaround
17e24     3B 33 13 32 |      if_nc  cmp     time2,a1FFFFFFF wc   ' before the time is written to the buffer, it is ANDed with $1FFFFFFF  
17e28     3B 35 13 32 |      if_nc  cmp     time3,a1FFFFFFF wc   ' Also, the interrupt procedure ands the counter  
17e2c     3B 37 13 32 |      if_nc  cmp     time4,a1FFFFFFF wc   ' So, if the counter is >=$20000000, the compare sequence still works  
17e30     3B 39 13 32 |      if_nc  cmp     time5,a1FFFFFFF wc   ' and when all counters are >=$20000000, all of them are SUBed at the same time 
17e34     3B 3B 13 32 |      if_nc  cmp     time6,a1FFFFFFF wc   ' including time0 main counter  
17e38     3B 3D 13 32 |      if_nc  cmp     time7,a1FFFFFFF wc     
17e3c     3B 3F 13 32 |      if_nc  cmp     time8,a1FFFFFFF wc   ' was 7FFFFFFF - reduced to make debugging easier 
17e40     3C 31 83 31 |      if_nc  sub     time1,a20000000
17e44     3C 33 83 31 |      if_nc  sub     time2,a20000000
17e48     3C 35 83 31 |      if_nc  sub     time3,a20000000
17e4c     3C 37 83 31 |      if_nc  sub     time4,a20000000
17e50     3C 39 83 31 |      if_nc  sub     time5,a20000000
17e54     3C 3B 83 31 |      if_nc  sub     time6,a20000000
17e58     3C 3D 83 31 |      if_nc  sub     time7,a20000000
17e5c     3C 3F 83 31 |      if_nc  sub     time8,a20000000
17e60     3C 2F 83 31 |      if_nc  sub     time0,a20000000
17e64                 | 
17e64                 |        
17e64                 |     
17e64     00 AE 0E F2 |             cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
17e68     00 7A 06 A6 |     if_e    mov     p1,#0
17e6c     00 C0 0E F2 |             cmp     acmd2,#0 wz
17e70     00 7C 06 A6 |     if_e    mov     p2,#0
17e74     00 D2 0E F2 |             cmp     acmd3,#0 wz
17e78     00 7E 06 A6 |     if_e    mov     p3,#0
17e7c     00 E4 0E F2 |             cmp     acmd4,#0 wz
17e80     00 80 06 A6 |     if_e    mov     p4,#0
17e84     00 F6 0E F2 |             cmp     acmd5,#0 wz
17e88     00 82 06 A6 |     if_e    mov     p5,#0
17e8c     00 08 0F F2 |             cmp     acmd6,#0 wz
17e90     00 84 06 A6 |     if_e    mov     p6,#0
17e94     00 1A 0F F2 |             cmp     acmd7,#0 wz
17e98     00 86 06 A6 |     if_e    mov     p7,#0
17e9c     00 2C 0F F2 |             cmp     acmd8,#0 wz
17ea0     00 88 06 A6 |     if_e    mov     p8,#0
17ea4                 |           
17ea4     48 8B 02 F6 |             mov     qq,tail         ' Check if the buffer is full	
17ea8     02 8A 86 F1 |             sub     qq,#2
17eac     FF 8B 06 F5 |             and     qq,#511
17eb0     47 8B 1A F2 |             cmp     qq,front wcz
17eb4     24 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
17eb8                 |       
17eb8     50 42 07 F6 |             mov     cn,#p201           ' Find the channel to compute
17ebc     98 45 03 F6 |             mov     ct,time1        ' with the lowest next sample time
17ec0     99 45 3B F3 |             fle     ct,time2 wcz   
17ec4     67 42 07 C6 |     if_c    mov     cn,#p202 
17ec8     9A 45 3B F3 |             fle     ct,time3 wcz
17ecc     7E 42 07 C6 |     if_c    mov     cn,#p203     
17ed0     9B 45 3B F3 |             fle     ct,time4 wcz
17ed4     95 42 07 C6 |     if_c    mov     cn,#p204
17ed8     9C 45 3B F3 |             fle     ct,time5 wcz
17edc     AC 42 07 C6 |     if_c    mov     cn,#p205 
17ee0     9D 45 3B F3 |             fle     ct,time6 wcz
17ee4     C3 42 07 C6 |     if_c    mov     cn,#p206
17ee8     9E 45 3B F3 |             fle     ct,time7 wcz
17eec     DA 42 07 C6 |     if_c    mov     cn,#p207
17ef0     9F 45 3B F3 |             fle     ct,time8 wcz
17ef4     F1 42 07 C6 |     if_c    mov     cn,#p208 
17ef8                 |  
17ef8     2C 42 63 FD |             jmp     cn
17efc                 |    
17efc                 | '----------------------------------------------------------------------------------
17efc                 | '------------- Compute channel samples --------------------------------------------
17efc                 | '----------------------------------------------------------------------------------
17efc                 | 	
17efc                 | ' ------------  Channel 1
17efc                 |  
17efc     98 47 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
17f00     97 47 83 F1 |             sub     dt0,time0
17f04     55 31 03 F1 |             add     time1,freq1    ' compute the next channel time	
17f08                 | 	        
17f08     56 7B 02 F1 |             add     p1,askip1      ' update the phase accumulator
17f0c     52 7B 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
17f10     52 7B 82 31 |     if_ge   sub     p1,lend1	        
17f14     51 7B 02 31 |     if_ge   add     p1,lstart1       
17f18     3D 8B 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
17f1c     4F 8B 02 F1 |             add     qq,sstart1
17f20                 |             
17f20     00 A0 0E F2 |             cmp     type1,#0 wz    ' check the sample type
17f24     45 8D C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
17f28     08 8C 66 50 |     if_nz   shl     spl,#8
17f2c     45 8D E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
17f30                 | 
17f30     53 8D 32 FA |             scas    spl,vol1       ' apply the volume
17f34     00 8C 02 F6 |             mov     spl,0-0
17f38                 | 
17f38     54 8D 32 FA |             scas    spl,apan1      ' apply the pan
17f3c     00 4C 03 F6 |             mov     ls1,0-0
17f40     20 00 00 FF 
17f44     00 8A 06 F6 |             mov     qq,##16384
17f48     54 8B 82 F1 |             sub     qq,apan1
17f4c     45 8D 32 FA |             scas    spl,qq
17f50     00 4E 03 F6 |             mov     rs1,0-0
17f54                 |             
17f54     84 02 90 FD |             jmp     #p101              
17f58                 | 	    	
17f58                 | ' ------------  Channel 2
17f58                 |  
17f58     99 47 03 F6 | p202        mov     dt0,time2
17f5c     97 47 83 F1 |             sub     dt0,time0
17f60     5E 33 03 F1 |             add     time2,freq2  	
17f64                 | 	        
17f64     5F 7D 02 F1 |             add     p2,askip2
17f68     5B 7D 1A F2 |             cmp     p2,lend2 wcz
17f6c     5B 7D 82 31 |     if_ge   sub     p2,lend2	        
17f70     5A 7D 02 31 |     if_ge   add     p2,lstart2       
17f74     3E 8B 02 F6 |             mov     qq,p2
17f78     58 8B 02 F1 |             add     qq,sstart2
17f7c                 | 
17f7c     00 B2 0E F2 |             cmp     type2,#0 wz
17f80     45 8D C2 5A |     if_nz   rdbyte  spl,qq
17f84     08 8C 66 50 |     if_nz   shl     spl,#8
17f88     45 8D E2 AA |     if_z    rdword  spl,qq
17f8c                 | 
17f8c     5C 8D 32 FA |             scas    spl,vol2
17f90     00 8C 02 F6 |             mov     spl,0-0
17f94                 |             
17f94     5D 8D 32 FA |             scas    spl,apan2
17f98     00 50 03 F6 |             mov     ls2,0-0
17f9c     20 00 00 FF 
17fa0     00 8A 06 F6 |             mov     qq,##16384
17fa4     5D 8B 82 F1 |             sub     qq,apan2
17fa8     45 8D 32 FA |             scas    spl,qq
17fac     00 52 03 F6 |             mov     rs2,0-0
17fb0                 |             
17fb0     28 02 90 FD |             jmp     #p101
17fb4                 | 
17fb4                 | ' ------------  Channel 3
17fb4                 |  
17fb4     9A 47 03 F6 | p203        mov     dt0,time3
17fb8     97 47 83 F1 |             sub     dt0,time0
17fbc     67 35 03 F1 |             add     time3,freq3  	
17fc0                 | 	        
17fc0     68 7F 02 F1 |             add     p3,askip3
17fc4     64 7F 1A F2 |             cmp     p3,lend3 wcz
17fc8     64 7F 82 31 |     if_ge   sub     p3,lend3	        
17fcc     63 7F 02 31 |     if_ge   add     p3,lstart3       
17fd0     3F 8B 02 F6 |             mov     qq,p3
17fd4     61 8B 02 F1 |             add     qq,sstart3
17fd8                 |             
17fd8     00 C4 0E F2 |             cmp     type3,#0 wz
17fdc     45 8D C2 5A |     if_nz   rdbyte  spl,qq
17fe0     08 8C 66 50 |     if_nz   shl     spl,#8
17fe4     45 8D E2 AA |     if_z    rdword  spl,qq
17fe8                 | 
17fe8     65 8D 32 FA |             scas    spl,vol3
17fec     00 8C 02 F6 |             mov     spl,0-0
17ff0                 |     	
17ff0     66 8D 32 FA |             scas    spl,apan3
17ff4     00 54 03 F6 |             mov     ls3,0-0
17ff8                 |             
17ff8     20 00 00 FF 
17ffc     00 8A 06 F6 |             mov     qq,##16384
18000     66 8B 82 F1 |             sub     qq,apan3
18004     45 8D 32 FA |             scas    spl,qq
18008     00 56 03 F6 |             mov     rs3,0-0
1800c                 | 
1800c     CC 01 90 FD |             jmp     #p101
18010                 |             
18010                 | ' ------------  Channel 4
18010                 |  
18010     9B 47 03 F6 | p204        mov     dt0,time4
18014     97 47 83 F1 |             sub     dt0,time0
18018     70 37 03 F1 |             add     time4,freq4  	
1801c                 | 
1801c                 | 	        
1801c     71 81 02 F1 |             add     p4,askip4
18020     6D 81 1A F2 |             cmp     p4,lend4 wcz
18024     6D 81 82 31 |     if_ge   sub     p4,lend4	        
18028     6C 81 02 31 |     if_ge   add     p4,lstart4       
1802c     40 8B 02 F6 |             mov     qq,p4
18030     6A 8B 02 F1 |             add     qq,sstart4
18034                 |             
18034     00 D6 0E F2 |             cmp     type4,#0 wz
18038     45 8D C2 5A |     if_nz   rdbyte  spl,qq
1803c     08 8C 66 50 |     if_nz   shl     spl,#8
18040     45 8D E2 AA |     if_z    rdword  spl,qq
18044                 | 
18044     6E 8D 32 FA |             scas    spl,vol4
18048     00 8C 02 F6 |             mov     spl,0-0
1804c                 |     	
1804c     6F 8D 32 FA |             scas    spl,apan4
18050     00 5A 03 F6 |             mov     ls4,0-0
18054                 |             
18054     20 00 00 FF 
18058     00 8A 06 F6 |             mov     qq,##16384
1805c     6F 8B 82 F1 |             sub     qq,apan4
18060     45 8D 32 FA |             scas    spl,qq
18064     00 58 03 F6 |             mov     rs4,0-0
18068                 | 
18068     70 01 90 FD |             jmp     #p101
1806c                 |             
1806c                 | ' ------------  Channel 5
1806c                 |  
1806c     9C 47 03 F6 | p205        mov     dt0,time5
18070     97 47 83 F1 |             sub     dt0,time0
18074     79 39 03 F1 |             add     time5,freq5  	
18078                 | 
18078                 | 	        
18078     7A 83 02 F1 |             add     p5,askip5
1807c     76 83 1A F2 |             cmp     p5,lend5 wcz
18080     76 83 82 31 |     if_ge   sub     p5,lend5	        
18084     75 83 02 31 |     if_ge   add     p5,lstart5       
18088     41 8B 02 F6 |             mov     qq,p5
1808c     73 8B 02 F1 |             add     qq,sstart5
18090                 |             
18090     00 E8 0E F2 |             cmp     type5,#0 wz
18094     45 8D C2 5A |     if_nz   rdbyte  spl,qq
18098     08 8C 66 50 |     if_nz   shl     spl,#8
1809c     45 8D E2 AA |     if_z    rdword  spl,qq
180a0                 | 
180a0     77 8D 32 FA |             scas    spl,vol5
180a4     00 8C 02 F6 |             mov     spl,0-0
180a8                 |     	
180a8     78 8D 32 FA |             scas    spl,apan5
180ac     00 5E 03 F6 |             mov     ls5,0-0
180b0                 |             
180b0     20 00 00 FF 
180b4     00 8A 06 F6 |             mov     qq,##16384
180b8     78 8B 82 F1 |             sub     qq,apan5
180bc     45 8D 32 FA |             scas    spl,qq
180c0     00 5C 03 F6 |             mov     rs5,0-0
180c4                 | 
180c4     14 01 90 FD |             jmp     #p101
180c8                 |   
180c8                 | ' ------------  Channel 6
180c8                 |  
180c8     9D 47 03 F6 | p206        mov     dt0,time6
180cc     97 47 83 F1 |             sub     dt0,time0
180d0     82 3B 03 F1 |             add     time6,freq6  	
180d4                 | 
180d4                 | 	        
180d4     83 85 02 F1 |             add     p6,askip6
180d8     7F 85 1A F2 |             cmp     p6,lend6 wcz
180dc     7F 85 82 31 |     if_ge   sub     p6,lend6	        
180e0     7E 85 02 31 |     if_ge   add     p6,lstart6       
180e4     42 8B 02 F6 |             mov     qq,p6
180e8     7C 8B 02 F1 |             add     qq,sstart6
180ec                 |             
180ec     00 FA 0E F2 |             cmp     type6,#0 wz
180f0     45 8D C2 5A |     if_nz   rdbyte  spl,qq
180f4     08 8C 66 50 |     if_nz   shl     spl,#8
180f8     45 8D E2 AA |     if_z    rdword  spl,qq
180fc                 | 
180fc     80 8D 32 FA |             scas    spl,vol6
18100     00 8C 02 F6 |             mov     spl,0-0
18104                 |     	
18104     81 8D 32 FA |             scas    spl,apan6
18108     00 62 03 F6 |             mov     ls6,0-0
1810c                 |             
1810c     20 00 00 FF 
18110     00 8A 06 F6 |             mov     qq,##16384
18114     81 8B 82 F1 |             sub     qq,apan6
18118     45 8D 32 FA |             scas    spl,qq
1811c     00 60 03 F6 |             mov     rs6,0-0
18120                 | 
18120     B8 00 90 FD |             jmp     #p101
18124                 |             
18124                 | ' ------------  Channel 7
18124                 |  
18124     9E 47 03 F6 | p207        mov     dt0,time7
18128     97 47 83 F1 |             sub     dt0,time0
1812c     8B 3D 03 F1 |             add     time7,freq7  	
18130                 | 
18130                 | 	        
18130     8C 87 02 F1 |             add     p7,askip7
18134     88 87 1A F2 |             cmp     p7,lend7 wcz
18138     88 87 82 31 |     if_ge   sub     p7,lend7	        
1813c     87 87 02 31 |     if_ge   add     p7,lstart7       
18140     43 8B 02 F6 |             mov     qq,p7
18144     85 8B 02 F1 |             add     qq,sstart7
18148                 |             
18148     00 0C 0F F2 |             cmp     type7,#0 wz
1814c     45 8D C2 5A |     if_nz   rdbyte  spl,qq
18150     08 8C 66 50 |     if_nz   shl     spl,#8
18154     45 8D E2 AA |     if_z    rdword  spl,qq
18158                 | 
18158     89 8D 32 FA |             scas    spl,vol7
1815c     00 8C 02 F6 |             mov     spl,0-0
18160                 |     	
18160     8A 8D 32 FA |             scas    spl,apan7
18164     00 66 03 F6 |             mov     ls7,0-0
18168                 |             
18168     20 00 00 FF 
1816c     00 8A 06 F6 |             mov     qq,##16384
18170     8A 8B 82 F1 |             sub     qq,apan7
18174     45 8D 32 FA |             scas    spl,qq
18178     00 64 03 F6 |             mov     rs7,0-0
1817c                 | 
1817c     5C 00 90 FD |             jmp     #p101     
18180                 |                    
18180                 | ' ------------  Channel 8
18180                 |  
18180     9F 47 03 F6 | p208        mov     dt0,time8
18184     97 47 83 F1 |             sub     dt0,time0
18188     94 3F 03 F1 |             add     time8,freq8  	
1818c                 | 
1818c                 | 	        
1818c     95 89 02 F1 |             add     p8,askip8
18190     91 89 1A F2 |             cmp     p8,lend8 wcz
18194     91 89 82 31 |     if_ge   sub     p8,lend8	        
18198     90 89 02 31 |     if_ge   add     p8,lstart8       
1819c     44 8B 02 F6 |             mov     qq,p8
181a0     8E 8B 02 F1 |             add     qq,sstart8
181a4                 |             
181a4     00 1E 0F F2 |             cmp     type8,#0 wz
181a8     45 8D C2 5A |     if_nz   rdbyte  spl,qq
181ac     08 8C 66 50 |     if_nz   shl     spl,#8
181b0     45 8D E2 AA |     if_z    rdword  spl,qq
181b4                 | 
181b4     92 8D 32 FA |             scas    spl,vol8
181b8     00 8C 02 F6 |             mov     spl,0-0
181bc                 |     	
181bc     93 8D 32 FA |             scas    spl,apan8
181c0     00 6A 03 F6 |             mov     ls8,0-0
181c4                 |             
181c4     20 00 00 FF 
181c8     00 8A 06 F6 |             mov     qq,##16384
181cc     93 8B 82 F1 |             sub     qq,apan8
181d0     45 8D 32 FA |             scas    spl,qq
181d4     00 68 03 F6 |             mov     rs8,0-0
181d8                 | 
181d8     00 00 90 FD |             jmp     #p101            
181dc                 |             
181dc                 | '------------------------ Channels end here --------------------       
181dc                 | 
181dc                 | ' Now add all channels and put the sample to the buffer    
181dc                 | 
181dc                 | 
181dc     97 41 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
181e0     02 8E 86 A1 |     if_z    sub     front,#2         ' 
181e4     FF 8F 06 A5 |     if_z    and     front,#511     
181e8                 |   
181e8     00 4A 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
181ec     00 48 07 F6 |             mov     ls,#0
181f0     A7 4B 03 F1 |             add     rs,rs1
181f4     A9 4B 03 F1 |             add     rs,rs2
181f8     AB 4B 03 F1 |             add     rs,rs3
181fc     AC 4B 03 F1 |             add     rs,rs4
18200     AE 4B 03 F1 |             add     rs,rs5
18204     B0 4B 03 F1 |             add     rs,rs6
18208     B2 4B 03 F1 |             add     rs,rs7
1820c     B4 4B 03 F1 |             add     rs,rs8
18210                 |             
18210     A6 49 03 F1 |             add     ls,ls1
18214     A8 49 03 F1 |             add     ls,ls2
18218     AA 49 03 F1 |             add     ls,ls3
1821c     AD 49 03 F1 |             add     ls,ls4
18220     AF 49 03 F1 |             add     ls,ls5
18224     B1 49 03 F1 |             add     ls,ls6
18228     B3 49 03 F1 |             add     ls,ls7
1822c     B5 49 03 F1 |             add     ls,ls8
18230                 |  		
18230     0F 48 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
18234     0F 4A E7 F4 |             bitnot  rs,#15		
18238                 | 		
18238     A4 4B 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1823c     47 4B 33 FC |             wrlut   rs,front         ' and write it to LUT
18240     01 8E 06 F1 |             add     front,#1         ' Write the sample time
18244     97 8B 02 F6 |             mov     qq,time0
18248     3B 8B 02 F5 |             and     qq,a1fffffff
1824c     47 8B 32 FC |             wrlut   qq,front
18250     80 8A 66 FC |             wrlong  qq,#$80
18254                 | 
18254     01 8E 06 F1 |             add     front,#1         ' move the front pointer
18258     FF 8F 06 F5 |             and     front,#511       ' and loop at #512
1825c     97 41 03 F6 |             mov     oldt0,time0      ' update global time
18260     A3 2F 03 F1 |             add     time0,dt0        
18264     74 FB 9F FD |             jmp     #loop            'loop
18268                 | 
18268                 | '-------------------------------------------------------------------------
18268                 | '------------------ This is the end of the main loop ---------------------
18268                 | '-------------------------------------------------------------------------
18268                 | 
18268                 | '--------------------------------------------------------------------------
18268                 | '------ Interrupt service -------------------------------------------------
18268                 | '------ Output the sample, get the next one if exists ---------------------
18268                 | '--------------------------------------------------------------------------
18268                 | 
18268     0E 94 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1826c     0F 96 26 FC |             wypin   rsample,#right       '4
18270                 | 										
18270     01 92 06 F1 |             add     counter,#1           '6     Increment the counter
18274     3B 93 02 F5 |             and     counter,a1fffffff
18278     4E 93 1A F2 |             cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
1827c     F5 FF 3B 5B |     if_ne   reti1                        '10/12 If not, do nothing
18280                 | 		
18280     4C 97 3A F9 |           	getword rsample,lsnext,#1    '12
18284     4C 95 32 F9 |           	getword lsample,lsnext,#0    '14
18288     47 91 1A F2 |             cmp     tail,front wcz       '16    If the buffer is empty, do nothing 
1828c     F5 FF 3B AB |             if_e    reti1                '18/20
18290                 | 
18290     48 99 A2 FA |             rdlut   lsnext,tail          '21    else read the sample and its time from LUT
18294     01 90 06 F1 |             add     tail, #1             '23
18298     48 9D A2 FA |             rdlut   irqtime,tail         '26    Read the time for this sample
1829c     01 90 06 F1 |             add     tail,#1              '28    Go to the next entry
182a0     FF 91 06 F5 |             and     tail,#511            '30
182a4     F5 FF 3B FB |             reti1                        '34 
182a8                 |             
182a8                 |          '' 3 nops left    
182a8                 |           
182a8                 | '---------------------------------------------------------------------------
182a8                 | '-------- End of interrupt -------------------------------------------------
182a8                 | '---------------------------------------------------------------------------    
182a8                 | 
182a8                 | '---------------------------------------------------------------------------
182a8                 | '------- Variables ---------------------------------------------------------
182a8                 | '---------------------------------------------------------------------------
182a8                 | 
182a8                 | ' constants
182a8                 | 
182a8     FF FF FF 1F | a1fffffff long $1fffffff
182ac     00 00 00 20 | a20000000 long $20000000
182b0                 | 
182b0                 | ' phase accumulators
182b0                 | 
182b0     00 00 00 00 | p1          long 0
182b4     00 00 00 00 | p2          long 0
182b8     00 00 00 00 | p3          long 0
182bc     00 00 00 00 | p4          long 0
182c0     00 00 00 00 | p5          long 0
182c4     00 00 00 00 | p6          long 0
182c8     00 00 00 00 | p7          long 0
182cc     00 00 00 00 | p8          long 0
182d0                 | 
182d0                 | ' temporary variables 
182d0                 | 
182d0     00 00 00 00 | qq          long 0
182d4     00 00 00 00 | spl         long 0
182d8                 | 
182d8                 | ' circular buffer in LUT
182d8                 | 
182d8     00 00 00 00 | front       long 0
182dc     00 00 00 00 | tail        long 0
182e0                 | 
182e0                 | ' Interrupt ISR variables
182e0                 | 
182e0     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
182e4     00 00 00 00 | lsample     long 0
182e8     00 00 00 00 | rsample     long 0
182ec     00 00 00 00 | lsnext      long 0
182f0     00 00 00 00 | rsnext      long 0 
182f4     00 00 00 00 | irqtime     long 0
182f8                 | 
182f8                 | ' Channel 1 registers. TODO - optimize the memory usage
182f8                 | 
182f8     00 00 00 00 | sstart1     long 0       ' Sample start pointer
182fc     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
18300     00 00 00 00 | lstart1     long 0       ' Loop start
18304     02 00 00 00 | lend1       long 2       ' Loop end
18308     00 00 00 00 | vol1        long 0       ' volume, 0..16384
1830c     00 00 00 00 | apan1       long 0       ' pan, 0..16384
18310     65 00 00 00 | freq1       long 101     ' frequency divider
18314     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
18318     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
1831c                 | 
1831c                 | ' Channel 2 registers
1831c                 | 
1831c     00 00 00 00 | sstart2     long 0
18320     00 00 00 00 | type2       long 0
18324     00 00 00 00 | lstart2     long 0
18328     02 00 00 00 | lend2       long 2        		
1832c     00 00 00 00 | vol2        long 0
18330     00 00 00 00 | apan2       long 0
18334     67 00 00 00 | freq2       long 103
18338     02 00 00 00 | askip2      long 2
1833c     00 00 00 00 | acmd2       long 0
18340                 | 
18340                 | ' Channel 3 registers
18340                 | 
18340     00 00 00 00 | sstart3     long 0
18344     00 00 00 00 | type3       long 0
18348     00 00 00 00 | lstart3     long 0
1834c     02 00 00 00 | lend3       long 2       		'
18350     00 00 00 00 | vol3        long 0
18354     00 00 00 00 | apan3       long 0
18358     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
1835c     02 00 00 00 | askip3      long 2
18360     00 00 00 00 | acmd3       long 0
18364                 | 
18364                 | ' Channel 4 registers
18364                 | 
18364     00 00 00 00 | sstart4     long 0
18368     00 00 00 00 | type4       long 0
1836c     00 00 00 00 | lstart4     long 0
18370     02 00 00 00 | lend4       long 2       		'
18374     00 00 00 00 | vol4        long 0
18378     00 00 00 00 | apan4       long 0
1837c     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
18380     02 00 00 00 | askip4      long 2
18384     00 00 00 00 | acmd4       long 0
18388                 | 
18388                 | ' Channel 5 registers
18388                 | 
18388     00 00 00 00 | sstart5     long 0
1838c     00 00 00 00 | type5       long 0
18390     00 00 00 00 | lstart5     long 0
18394     02 00 00 00 | lend5       long 2       		'
18398     00 00 00 00 | vol5        long 0
1839c     00 00 00 00 | apan5       long 0
183a0     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
183a4     02 00 00 00 | askip5      long 2
183a8     00 00 00 00 | acmd5       long 0
183ac                 | 
183ac                 | ' Channel 6 registers
183ac                 | 
183ac     00 00 00 00 | sstart6     long 0
183b0     00 00 00 00 | type6       long 0
183b4     00 00 00 00 | lstart6     long 0
183b8     02 00 00 00 | lend6       long 2       		'
183bc     00 00 00 00 | vol6        long 0
183c0     00 00 00 00 | apan6       long 0
183c4     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
183c8     02 00 00 00 | askip6      long 2
183cc     00 00 00 00 | acmd6       long 0
183d0                 | 
183d0                 | ' Channel 7 registers
183d0                 | 
183d0     00 00 00 00 | sstart7     long 0
183d4     00 00 00 00 | type7       long 0
183d8     00 00 00 00 | lstart7     long 0
183dc     02 00 00 00 | lend7       long 2       		'
183e0     00 00 00 00 | vol7        long 0
183e4     00 00 00 00 | apan7       long 0
183e8     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
183ec     02 00 00 00 | askip7      long 2
183f0     00 00 00 00 | acmd7       long 0
183f4                 | 
183f4                 | ' Channel 8 registers
183f4                 | 
183f4     00 00 00 00 | sstart8     long 0
183f8     00 00 00 00 | type8       long 0
183fc     00 00 00 00 | lstart8     long 0
18400     02 00 00 00 | lend8       long 2       		'
18404     00 00 00 00 | vol8        long 0
18408     00 00 00 00 | apan8       long 0
1840c     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
18410     02 00 00 00 | askip8      long 2
18414     00 00 00 00 | acmd8       long 0
18418                 | 
18418                 | ' Time variables
18418                 | 
18418     00 00 00 00 | time0       long 0    ' Global sample computing time
1841c     01 00 00 00 | time1       long 1    ' Local channels time
18420     02 00 00 00 | time2       long 2
18424     03 00 00 00 | time3       long 3
18428     04 00 00 00 | time4       long 4
1842c     05 00 00 00 | time5       long 5
18430     06 00 00 00 | time6       long 6
18434     07 00 00 00 | time7       long 7
18438     08 00 00 00 | time8       long 8
1843c                 | 
1843c     00 00 00 00 | oldt0       long 0    'Temporary time variables
18440     00 00 00 00 | cn          long 0
18444     00 00 00 00 | ct          long 0
18448     00 00 00 00 | dt0         long 0
1844c                 | 
1844c                 | ' Samples
1844c                 | 
1844c     00 00 00 00 | ls          long 0    ' Global sample variable
18450     00 00 00 00 | rs          long 0
18454                 | 
18454     00 00 00 00 | ls1         long 0    ' Channel samples
18458     00 00 00 00 | rs1         long 0
1845c     00 00 00 00 | ls2         long 0
18460     00 00 00 00 | rs2         long 0
18464     00 00 00 00 | ls3         long 0
18468     00 00 00 00 | rs3         long 0
1846c     00 00 00 00 | rs4         long 0
18470     00 00 00 00 | ls4         long 0
18474     00 00 00 00 | rs5         long 0
18478     00 00 00 00 | ls5         long 0
1847c     00 00 00 00 | rs6         long 0
18480     00 00 00 00 | ls6         long 0
18484     00 00 00 00 | rs7         long 0
18488     00 00 00 00 | ls7         long 0
1848c     00 00 00 00 | rs8         long 0
18490     00 00 00 00 | ls8         long 0
18494                 | 
18494     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
18498                 | 
18498     00 00 00 00 
1849c     00 00 00 00 | null  			long 	0,0           ' for channel reset
184a0                 | 	alignl
184a0                 | __system__dat_
184a0     00 00 00 00 
184a4     00 00 00 00 | 	byte	$00[8]
184a8     03 00 00 00 
184ac     00 00 00 00 
184b0     00 00 00 00 
184b4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
184b8     00 00 00 00 
184bc     00 00 00 00 
184c0     00 00 00 00 | 	byte	$00[12]
184c4     05 00 00 00 
184c8     00 00 00 00 
184cc     00 00 00 00 
184d0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
184d4     9C 86 01 00 | 	long	@@@__system__dat_ + 508
184d8     A4 86 01 00 | 	long	@@@__system__dat_ + 516
184dc     00 00 00 00 | 	byte	$00, $00, $00, $00
184e0     AC 86 01 00 | 	long	@@@__system__dat_ + 524
184e4     B4 86 01 00 | 	long	@@@__system__dat_ + 532
184e8     00 00 00 00 
184ec     00 00 00 00 | 	byte	$00[8]
184f0     01 00 00 00 
184f4     06 00 00 00 
184f8     00 00 00 00 
184fc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18500     00 00 00 00 | 	byte	$00, $00, $00, $00
18504     BC 86 01 00 | 	long	@@@__system__dat_ + 540
18508     C4 86 01 00 | 	long	@@@__system__dat_ + 548
1850c     00 00 00 00 | 	byte	$00, $00, $00, $00
18510     CC 86 01 00 | 	long	@@@__system__dat_ + 556
18514     D4 86 01 00 | 	long	@@@__system__dat_ + 564
18518     00 00 00 00 
1851c     00 00 00 00 | 	byte	$00[8]
18520     01 00 00 00 
18524     06 00 00 00 
18528     00 00 00 00 
1852c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18530     00 00 00 00 | 	byte	$00, $00, $00, $00
18534     DC 86 01 00 | 	long	@@@__system__dat_ + 572
18538     E4 86 01 00 | 	long	@@@__system__dat_ + 580
1853c     00 00 00 00 | 	byte	$00, $00, $00, $00
18540     EC 86 01 00 | 	long	@@@__system__dat_ + 588
18544     F4 86 01 00 | 	long	@@@__system__dat_ + 596
18548     00 00 00 00 
      ...             
18698     00 00 00 00 
1869c     00 00 00 00 | 	byte	$00[344]
186a0     80 60 00 00 | 	long	@@@__system___tx
186a4     00 00 00 00 | 	byte	$00, $00, $00, $00
186a8     C8 60 00 00 | 	long	@@@__system___rx
186ac     00 00 00 00 | 	byte	$00, $00, $00, $00
186b0     B0 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
186b4     00 00 00 00 | 	byte	$00, $00, $00, $00
186b8     28 7B 00 00 | 	long	@@@__system____dummy_flush_0175
186bc     00 00 00 00 | 	byte	$00, $00, $00, $00
186c0     80 60 00 00 | 	long	@@@__system___tx
186c4     00 00 00 00 | 	byte	$00, $00, $00, $00
186c8     C8 60 00 00 | 	long	@@@__system___rx
186cc     00 00 00 00 | 	byte	$00, $00, $00, $00
186d0     B0 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
186d4     00 00 00 00 | 	byte	$00, $00, $00, $00
186d8     28 7B 00 00 | 	long	@@@__system____dummy_flush_0175
186dc     00 00 00 00 | 	byte	$00, $00, $00, $00
186e0     80 60 00 00 | 	long	@@@__system___tx
186e4     00 00 00 00 | 	byte	$00, $00, $00, $00
186e8     C8 60 00 00 | 	long	@@@__system___rx
186ec     00 00 00 00 | 	byte	$00, $00, $00, $00
186f0     B0 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
186f4     00 00 00 00 | 	byte	$00, $00, $00, $00
186f8     28 7B 00 00 | 	long	@@@__system____dummy_flush_0175
186fc     00 00 00 00 | 	byte	$00, $00, $00, $00
18700                 | __heap_base
18700     00 00 00 00 
      ...             
19700     00 00 00 00 
19704     00 00 00 00 | 	long	0[1026]
19708                 | objmem
19708     00 00 00 00 | 	long	0[1]
1970c 118             | 	org	COG_BSS_START
1970c 118             | _var01
1970c 118             | 	res	1
1970c 119             | _var02
1970c 119             | 	res	1
1970c 11a             | _var03
1970c 11a             | 	res	1
1970c 11b             | _var04
1970c 11b             | 	res	1
1970c 11c             | _var05
1970c 11c             | 	res	1
1970c 11d             | _var06
1970c 11d             | 	res	1
1970c 11e             | _var07
1970c 11e             | 	res	1
1970c 11f             | _var08
1970c 11f             | 	res	1
1970c 120             | _var09
1970c 120             | 	res	1
1970c 121             | _var10
1970c 121             | 	res	1
1970c 122             | _var11
1970c 122             | 	res	1
1970c 123             | _var12
1970c 123             | 	res	1
1970c 124             | _var13
1970c 124             | 	res	1
1970c 125             | _var14
1970c 125             | 	res	1
1970c 126             | _var15
1970c 126             | 	res	1
1970c 127             | _var16
1970c 127             | 	res	1
1970c 128             | _var17
1970c 128             | 	res	1
1970c 129             | _var18
1970c 129             | 	res	1
1970c 12a             | _var19
1970c 12a             | 	res	1
1970c 12b             | _var20
1970c 12b             | 	res	1
1970c 12c             | _var21
1970c 12c             | 	res	1
1970c 12d             | _var22
1970c 12d             | 	res	1
1970c 12e             | arg01
1970c 12e             | 	res	1
1970c 12f             | arg02
1970c 12f             | 	res	1
1970c 130             | arg03
1970c 130             | 	res	1
1970c 131             | arg04
1970c 131             | 	res	1
1970c 132             | arg05
1970c 132             | 	res	1
1970c 133             | arg06
1970c 133             | 	res	1
1970c 134             | arg07
1970c 134             | 	res	1
1970c 135             | local01
1970c 135             | 	res	1
1970c 136             | local02
1970c 136             | 	res	1
1970c 137             | local03
1970c 137             | 	res	1
1970c 138             | local04
1970c 138             | 	res	1
1970c 139             | local05
1970c 139             | 	res	1
1970c 13a             | local06
1970c 13a             | 	res	1
1970c 13b             | local07
1970c 13b             | 	res	1
1970c 13c             | local08
1970c 13c             | 	res	1
1970c 13d             | local09
1970c 13d             | 	res	1
1970c 13e             | local10
1970c 13e             | 	res	1
1970c 13f             | local11
1970c 13f             | 	res	1
1970c 140             | local12
1970c 140             | 	res	1
1970c 141             | local13
1970c 141             | 	res	1
1970c 142             | local14
1970c 142             | 	res	1
1970c 143             | local15
1970c 143             | 	res	1
1970c 144             | local16
1970c 144             | 	res	1
1970c 145             | local17
1970c 145             | 	res	1
1970c 146             | local18
1970c 146             | 	res	1
1970c 147             | local19
1970c 147             | 	res	1
1970c 148             | local20
1970c 148             | 	res	1
1970c 149             | local21
1970c 149             | 	res	1
1970c 14a             | local22
1970c 14a             | 	res	1
1970c 14b             | local23
1970c 14b             | 	res	1
1970c 14c             | local24
1970c 14c             | 	res	1
1970c 14d             | local25
1970c 14d             | 	res	1
1970c 14e             | local26
1970c 14e             | 	res	1
1970c 14f             | local27
1970c 14f             | 	res	1
1970c 150             | local28
1970c 150             | 	res	1
1970c 151             | local29
1970c 151             | 	res	1
1970c 152             | local30
1970c 152             | 	res	1
1970c 153             | local31
1970c 153             | 	res	1
1970c 154             | local32
1970c 154             | 	res	1
1970c 155             | local33
1970c 155             | 	res	1
1970c 156             | local34
1970c 156             | 	res	1
1970c 157             | local35
1970c 157             | 	res	1
1970c 158             | local36
1970c 158             | 	res	1
1970c 159             | local37
1970c 159             | 	res	1
1970c 15a             | local38
1970c 15a             | 	res	1
1970c 15b             | local39
1970c 15b             | 	res	1
1970c 15c             | local40
1970c 15c             | 	res	1
1970c 15d             | local41
1970c 15d             | 	res	1
1970c 15e             | local42
1970c 15e             | 	res	1
1970c 15f             | local43
1970c 15f             | 	res	1
1970c 160             | local44
1970c 160             | 	res	1
1970c 161             | local45
1970c 161             | 	res	1
1970c 162             | local46
1970c 162             | 	res	1
1970c 163             | local47
1970c 163             | 	res	1
1970c 164             | local48
1970c 164             | 	res	1
1970c 165             | local49
1970c 165             | 	res	1
1970c 166             | local50
1970c 166             | 	res	1
1970c 167             | local51
1970c 167             | 	res	1
1970c 168             | local52
1970c 168             | 	res	1
1970c 169             | local53
1970c 169             | 	res	1
1970c 16a             | local54
1970c 16a             | 	res	1
1970c 16b             | local55
1970c 16b             | 	res	1
1970c 16c             | local56
1970c 16c             | 	res	1
1970c 16d             | local57
1970c 16d             | 	res	1
1970c 16e             | local58
1970c 16e             | 	res	1
1970c 16f             | local59
1970c 16f             | 	res	1
1970c 170             | local60
1970c 170             | 	res	1
1970c 171             | local61
1970c 171             | 	res	1
1970c 172             | local62
1970c 172             | 	res	1
1970c 173             | local63
1970c 173             | 	res	1
1970c 174             | local64
1970c 174             | 	res	1
1970c 175             | local65
1970c 175             | 	res	1
1970c 176             | local66
1970c 176             | 	res	1
1970c 177             | local67
1970c 177             | 	res	1
1970c 178             | local68
1970c 178             | 	res	1
1970c 179             | local69
1970c 179             | 	res	1
1970c 17a             | local70
1970c 17a             | 	res	1
1970c 17b             | local71
1970c 17b             | 	res	1
1970c 17c             | local72
1970c 17c             | 	res	1
1970c 17d             | local73
1970c 17d             | 	res	1
1970c 17e             | local74
1970c 17e             | 	res	1
1970c 17f             | local75
1970c 17f             | 	res	1
1970c 180             | local76
1970c 180             | 	res	1
1970c 181             | local77
1970c 181             | 	res	1
1970c 182             | local78
1970c 182             | 	res	1
1970c 183             | local79
1970c 183             | 	res	1
1970c 184             | local80
1970c 184             | 	res	1
1970c 185             | muldiva_
1970c 185             | 	res	1
1970c 186             | muldivb_
1970c 186             | 	res	1
1970c 187             | 	fit	480
1970c 187             | 
