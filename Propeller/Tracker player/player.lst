00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 18 F1 07 F1 | 	add	ptra, ##2328
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 B2 E1 80 FF 
00428 009 00 F0 65 FD | 	hubset	##29582584
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c B2 E1 00 FF 
00438 00d FB EC 07 F6 | 	mov	pa, ##29582587
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 19 92 8A FF 
00448 011 14 1E 6C FC | 	wrlong	##354693647, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 14 27 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 1C 37 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 80 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 C8 7F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a B4 24 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio015_spin2_dat__
00830 10b AC 15 01 00 | 	long	@_audio015_spin2_dat_
00834 10c             | ptr__dat__
00834 10c A4 81 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 24 E0 00 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e C4 24 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 98 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 80 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 58 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 30 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 C0 33 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 88 04 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     36 5A 05 F6 | 	mov	COUNT_, #54
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     B4 55 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     98 55 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     7C 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     60 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     FC 1F B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     C0 53 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     90 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     88 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     54 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     28 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     34 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     F0 56 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     14 18 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     02 00 00 FF 
00ac8     30 0F 06 F1 | 	add	objptr, ##1328
00acc     07 01 69 FC | 	wrlong	#128, objptr
00ad0     40 00 00 FF 
00ad4     79 7D 06 F6 | 	mov	local10, ##@LR__0453
00ad8     01 00 00 FF 
00adc     A4 0F 06 F1 | 	add	objptr, ##932
00ae0     07 7D 62 FC | 	wrlong	local10, objptr
00ae4     04 00 00 FF 
00ae8     D4 0E 86 F1 | 	sub	objptr, ##2260
00aec     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00af0     3F 5D 02 F6 | 	mov	arg01, local11
00af4     6C FD BF FD | 	call	#_addr
00af8     04 00 00 FF 
00afc     D8 0E 06 F1 | 	add	objptr, ##2264
00b00     07 2B 62 FC | 	wrlong	result1, objptr
00b04     15 5D 02 F6 | 	mov	arg01, result1
00b08     00 5E 06 F6 | 	mov	arg02, #0
00b0c     01 00 00 FF 
00b10     A4 0F 86 F1 | 	sub	objptr, ##932
00b14     50 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b18     01 5E 06 F6 | 	mov	arg02, #1
00b1c                 | ' 
00b1c                 | ' ''---------- Set the (x,y) position of cursor
00b1c                 | ' 
00b1c                 | ' cursor_x:=x
00b1c     02 00 00 FF 
00b20     00 0F 86 F1 | 	sub	objptr, ##1280
00b24     07 03 48 FC | 	wrbyte	#1, objptr
00b28                 | ' cursor_y:=y
00b28     01 0E 06 F1 | 	add	objptr, #1
00b2c     07 03 48 FC | 	wrbyte	#1, objptr
00b30                 | ' 
00b30                 | ' emptystr$="                      "
00b30                 | ' 
00b30                 | ' ma=addr(module)
00b30                 | ' tracker.initmodule(ma,0)
00b30                 | ' 
00b30                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b30     04 00 00 FF 
00b34     A3 0E 06 F1 | 	add	objptr, ##2211
00b38     07 81 02 FB | 	rdlong	local12, objptr
00b3c     40 83 02 F6 | 	mov	local13, local12
00b40     04 00 00 FF 
00b44     D8 0E 86 F1 | 	sub	objptr, ##2264
00b48     14 82 06 F1 | 	add	local13, #20
00b4c                 | LR__0001
00b4c     41 81 5A F2 | 	cmps	local12, local13 wcz
00b50     44 00 90 3D |  if_ae	jmp	#LR__0002
00b54     00 5C 06 F6 | 	mov	arg01, #0
00b58     F4 69 B0 FD | 	call	#__system___getiolock_0145
00b5c     15 5D 02 F6 | 	mov	arg01, result1
00b60     A8 53 B0 FD | 	call	#__system___lockmem
00b64     00 84 06 F6 | 	mov	local14, #0
00b68                 | ' asm
00b68     40 2B C2 FA | 	rdbyte	result1, local12
00b6c                 | ' return r
00b6c     15 5F 02 F6 | 	mov	arg02, result1
00b70     07 5E 46 F7 | 	zerox	arg02, #7
00b74     00 5C 06 F6 | 	mov	arg01, #0
00b78     00 60 06 F6 | 	mov	arg03, #0
00b7c     D8 56 B0 FD | 	call	#__system___basic_print_char
00b80     00 5C 06 F6 | 	mov	arg01, #0
00b84     C8 69 B0 FD | 	call	#__system___getiolock_0145
00b88     15 01 68 FC | 	wrlong	#0, result1
00b8c     00 2A 06 F6 | 	mov	result1, #0
00b90     01 80 06 F1 | 	add	local12, #1
00b94     B4 FF 9F FD | 	jmp	#LR__0001
00b98                 | LR__0002
00b98     04 00 00 FF 
00b9c     DC 0E 06 F1 | 	add	objptr, ##2268
00ba0     07 1F 68 FC | 	wrlong	#15, objptr
00ba4                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00ba4     00 7C 06 F6 | 	mov	local10, #0
00ba8     04 0E 86 F1 | 	sub	objptr, #4
00bac     07 5D 02 FB | 	rdlong	arg01, objptr
00bb0     02 00 00 FF 
00bb4     38 5C 06 F1 | 	add	arg01, ##1080
00bb8                 | ' asm
00bb8     2E 87 C2 FA | 	rdbyte	local15, arg01
00bbc                 | ' return r
00bbc     07 86 46 F7 | 	zerox	local15, #7
00bc0     4D 86 0E F2 | 	cmp	local15, #77 wz
00bc4     01 7C 66 A6 |  if_e	neg	local10, #1
00bc8     00 88 06 F6 | 	mov	local16, #0
00bcc     07 5D 02 FB | 	rdlong	arg01, objptr
00bd0     04 00 00 FF 
00bd4     D8 0E 86 F1 | 	sub	objptr, ##2264
00bd8     02 00 00 FF 
00bdc     3A 5C 06 F1 | 	add	arg01, ##1082
00be0                 | ' asm
00be0     2E 2B C2 FA | 	rdbyte	result1, arg01
00be4                 | ' return r
00be4     15 8B 02 F6 | 	mov	local17, result1
00be8     07 8A 46 F7 | 	zerox	local17, #7
00bec     4B 8A 0E F2 | 	cmp	local17, #75 wz
00bf0     01 88 66 A6 |  if_e	neg	local16, #1
00bf4     44 7D CA F7 | 	test	local10, local16 wz
00bf8     04 00 00 5F 
00bfc     DC 0E 06 51 |  if_ne	add	objptr, ##2268
00c00     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00c04     04 00 00 5F 
00c08     DC 0E 86 51 |  if_ne	sub	objptr, ##2268
00c0c     02 5E 06 F6 | 	mov	arg02, #2
00c10                 | ' 
00c10                 | ' ''---------- Set the (x,y) position of cursor
00c10                 | ' 
00c10                 | ' cursor_x:=x
00c10     34 0E 06 F1 | 	add	objptr, #52
00c14     07 03 48 FC | 	wrbyte	#1, objptr
00c18                 | ' cursor_y:=y
00c18     01 0E 06 F1 | 	add	objptr, #1
00c1c     07 05 48 FC | 	wrbyte	#2, objptr
00c20     35 0E 86 F1 | 	sub	objptr, #53
00c24                 | ' position 1,2 : print samples;" ";"samples module"
00c24     00 5C 06 F6 | 	mov	arg01, #0
00c28     24 69 B0 FD | 	call	#__system___getiolock_0145
00c2c     15 5D 02 F6 | 	mov	arg01, result1
00c30     D8 52 B0 FD | 	call	#__system___lockmem
00c34     00 2A 06 F6 | 	mov	result1, #0
00c38     04 00 00 FF 
00c3c     DC 0E 06 F1 | 	add	objptr, ##2268
00c40     07 5F 02 FB | 	rdlong	arg02, objptr
00c44     04 00 00 FF 
00c48     DC 0E 86 F1 | 	sub	objptr, ##2268
00c4c     00 5C 06 F6 | 	mov	arg01, #0
00c50     00 60 06 F6 | 	mov	arg03, #0
00c54     0A 62 06 F6 | 	mov	arg04, #10
00c58     90 56 B0 FD | 	call	#__system___basic_print_integer
00c5c     40 00 00 FF 
00c60     90 5F 06 F6 | 	mov	arg02, ##@LR__0454
00c64     00 5C 06 F6 | 	mov	arg01, #0
00c68     00 60 06 F6 | 	mov	arg03, #0
00c6c     34 56 B0 FD | 	call	#__system___basic_print_string
00c70     40 00 00 FF 
00c74     92 5F 06 F6 | 	mov	arg02, ##@LR__0455
00c78     00 5C 06 F6 | 	mov	arg01, #0
00c7c     00 60 06 F6 | 	mov	arg03, #0
00c80     20 56 B0 FD | 	call	#__system___basic_print_string
00c84     00 5C 06 F6 | 	mov	arg01, #0
00c88     0A 5E 06 F6 | 	mov	arg02, #10
00c8c     00 60 06 F6 | 	mov	arg03, #0
00c90     C4 55 B0 FD | 	call	#__system___basic_print_char
00c94     01 2A 06 F6 | 	mov	result1, #1
00c98     00 5C 06 F6 | 	mov	arg01, #0
00c9c     B0 68 B0 FD | 	call	#__system___getiolock_0145
00ca0     15 01 68 FC | 	wrlong	#0, result1
00ca4     00 2A 06 F6 | 	mov	result1, #0
00ca8     04 00 00 FF 
00cac     D8 0E 06 F1 | 	add	objptr, ##2264
00cb0     07 8D 02 FB | 	rdlong	local18, objptr
00cb4     04 0E 06 F1 | 	add	objptr, #4
00cb8     07 8F 02 FB | 	rdlong	local19, objptr
00cbc     04 5E 06 F6 | 	mov	arg02, #4
00cc0                 | ' 
00cc0                 | ' ''---------- Set the (x,y) position of cursor
00cc0                 | ' 
00cc0                 | ' cursor_x:=x
00cc0     04 00 00 FF 
00cc4     A8 0E 86 F1 | 	sub	objptr, ##2216
00cc8     07 03 48 FC | 	wrbyte	#1, objptr
00ccc                 | ' cursor_y:=y
00ccc     01 0E 06 F1 | 	add	objptr, #1
00cd0     07 09 48 FC | 	wrbyte	#4, objptr
00cd4     35 0E 86 F1 | 	sub	objptr, #53
00cd8                 | ' 'v030. setwritecolors(170,147):
00cd8                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00cd8     00 5C 06 F6 | 	mov	arg01, #0
00cdc     70 68 B0 FD | 	call	#__system___getiolock_0145
00ce0     15 5D 02 F6 | 	mov	arg01, result1
00ce4     24 52 B0 FD | 	call	#__system___lockmem
00ce8     00 2A 06 F6 | 	mov	result1, #0
00cec     40 00 00 FF 
00cf0     0E 5F 06 F6 | 	mov	arg02, ##@LR__0451
00cf4     00 5C 06 F6 | 	mov	arg01, #0
00cf8     00 60 06 F6 | 	mov	arg03, #0
00cfc     A4 55 B0 FD | 	call	#__system___basic_print_string
00d00     00 5C 06 F6 | 	mov	arg01, #0
00d04     0A 5E 06 F6 | 	mov	arg02, #10
00d08     00 60 06 F6 | 	mov	arg03, #0
00d0c     48 55 B0 FD | 	call	#__system___basic_print_char
00d10     01 2A 06 F6 | 	mov	result1, #1
00d14     00 5C 06 F6 | 	mov	arg01, #0
00d18     34 68 B0 FD | 	call	#__system___getiolock_0145
00d1c     15 01 68 FC | 	wrlong	#0, result1
00d20     00 2A 06 F6 | 	mov	result1, #0
00d24     04 00 00 FF 
00d28     50 0E 06 F1 | 	add	objptr, ##2128
00d2c     07 91 02 F6 | 	mov	local20, objptr
00d30     00 92 06 F6 | 	mov	local21, #0
00d34     04 00 00 FF 
00d38     50 0E 86 F1 | 	sub	objptr, ##2128
00d3c                 | LR__0003
00d3c     40 00 00 FF 
00d40     77 95 06 F6 | 	mov	local22, ##@LR__0452
00d44     49 97 02 F6 | 	mov	local23, local21
00d48     02 5E 06 F6 | 	mov	arg02, #2
00d4c     0A 60 06 F6 | 	mov	arg03, #10
00d50     02 98 0E F6 | 	mov	local24, #2 wz
00d54     34 00 90 FD | 	jmp	#LR__0006
00d58                 | LR__0004
00d58     00 9A 06 F6 | 	mov	local25, #0
00d5c     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d60     01 9A 66 E6 |  if_be	neg	local25, #1
00d64     00 9E 06 F6 | 	mov	local27, #0
00d68     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d6c     01 9E 66 C6 |  if_b	neg	local27, #1
00d70     4F 9B CA F7 | 	test	local25, local27 wz
00d74     14 00 90 AD |  if_e	jmp	#LR__0005
00d78     4E A1 02 F6 | 	mov	local28, local26
00d7c     0A 9C 06 FD | 	qmul	local26, #10
00d80     18 9C 62 FD | 	getqx	local26
00d84     01 98 06 F1 | 	add	local24, #1
00d88     CC FF 9F FD | 	jmp	#LR__0004
00d8c                 | LR__0005
00d8c                 | LR__0006
00d8c     20 98 3E F3 | 	fle	local24, #32 wcz
00d90     4C 5D 02 F6 | 	mov	arg01, local24
00d94     02 5C 06 F1 | 	add	arg01, #2
00d98     A4 5D B0 FD | 	call	#__system___gc_alloc_managed
00d9c     15 A3 02 F6 | 	mov	local29, result1
00da0     4C A5 02 F6 | 	mov	local30, local24
00da4     51 A5 02 F1 | 	add	local30, local29
00da8     52 01 48 FC | 	wrbyte	#0, local30
00dac     8C F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00db0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00db4                 | LR__0007
00db4     00 98 1E F2 | 	cmp	local24, #0 wcz
00db8     34 00 90 ED |  if_be	jmp	#LR__0009
00dbc     01 98 86 F1 | 	sub	local24, #1
00dc0     4B 0B 03 F6 | 	mov	muldiva_, local23
00dc4     0A 0C 07 F6 | 	mov	muldivb_, #10
00dc8     CC 00 A0 FD | 	call	#unsdivide_
00dcc     85 A7 02 F6 | 	mov	local31, muldiva_
00dd0     86 97 02 F6 | 	mov	local23, muldivb_
00dd4     0A A6 1E F2 | 	cmp	local31, #10 wcz
00dd8     30 A6 06 C1 |  if_b	add	local31, #48
00ddc     37 A6 06 31 |  if_ae	add	local31, #55
00de0     4C A9 02 F6 | 	mov	local32, local24
00de4     51 A9 02 F1 | 	add	local32, local29
00de8     54 A7 42 FC | 	wrbyte	local31, local32
00dec     C4 FF 9F FD | 	jmp	#LR__0007
00df0                 | LR__0008
00df0                 | LR__0009
00df0     51 2B 02 F6 | 	mov	result1, local29
00df4     15 5F 02 F6 | 	mov	arg02, result1
00df8     4A 5D 02 F6 | 	mov	arg01, local22
00dfc     44 51 B0 FD | 	call	#__system___string_concat
00e00     15 AB 02 F6 | 	mov	local33, result1
00e04     13 5C 06 F6 | 	mov	arg01, #19
00e08     40 00 00 FF 
00e0c     B8 5E 06 F6 | 	mov	arg02, ##@LR__0445
00e10     9C 59 B0 FD | 	call	#__system__String_S
00e14     15 5F 02 F6 | 	mov	arg02, result1
00e18     55 5D 02 F6 | 	mov	arg01, local33
00e1c     24 51 B0 FD | 	call	#__system___string_concat
00e20     48 2B 62 FC | 	wrlong	result1, local20
00e24     01 92 06 F1 | 	add	local21, #1
00e28     04 90 06 F1 | 	add	local20, #4
00e2c     20 92 5E F2 | 	cmps	local21, #32 wcz
00e30     08 FF 9F CD |  if_b	jmp	#LR__0003
00e34                 | ' for i=1 to num
00e34     01 92 06 F6 | 	mov	local21, #1
00e38     01 8E 06 F1 | 	add	local19, #1
00e3c     46 AD 02 F6 | 	mov	local34, local18
00e40     14 AC 06 F1 | 	add	local34, #20
00e44     00 AE 06 F6 | 	mov	local35, #0
00e48     04 00 00 FF 
00e4c     54 0E 06 F1 | 	add	objptr, ##2132
00e50     07 B1 02 F6 | 	mov	local36, objptr
00e54     14 8C 06 F1 | 	add	local18, #20
00e58     00 B2 06 F6 | 	mov	local37, #0
00e5c     04 00 00 FF 
00e60     54 0E 86 F1 | 	sub	objptr, ##2132
00e64                 | LR__0010
00e64     47 93 5A F2 | 	cmps	local21, local19 wcz
00e68     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e6c     56 B5 02 F6 | 	mov	local38, local34
00e70     57 B5 02 F1 | 	add	local38, local35
00e74     00 B6 06 F6 | 	mov	local39, #0
00e78                 | LR__0011
00e78     58 5D 02 F6 | 	mov	arg01, local36
00e7c     E4 F9 BF FD | 	call	#_addr
00e80                 | ' asm
00e80     15 B9 02 FB | 	rdlong	local40, result1
00e84                 | ' return r
00e84     04 00 00 FF 
00e88     FC 0E 06 F1 | 	add	objptr, ##2300
00e8c     07 B9 62 FC | 	wrlong	local40, objptr
00e90     5A 5D 02 F6 | 	mov	arg01, local38
00e94     5B 5D 02 F1 | 	add	arg01, local39
00e98                 | ' asm
00e98     2E 2B C2 FA | 	rdbyte	result1, arg01
00e9c                 | ' return r
00e9c     15 95 02 F6 | 	mov	local22, result1
00ea0     07 94 46 F7 | 	zerox	local22, #7
00ea4     04 0E 06 F1 | 	add	objptr, #4
00ea8     07 95 62 FC | 	wrlong	local22, objptr
00eac                 | '     a=lpeek(addr(sn$(i)))
00eac                 | '     b=(peek(ma+20+30*(i-1)+j))
00eac                 | '     if b>=32 then poke a+j,b
00eac     04 00 00 FF 
00eb0     00 0F 86 F1 | 	sub	objptr, ##2304
00eb4     20 94 5E F2 | 	cmps	local22, #32 wcz
00eb8     24 00 90 CD |  if_b	jmp	#LR__0012
00ebc     04 00 00 FF 
00ec0     FC 0E 06 F1 | 	add	objptr, ##2300
00ec4     07 5D 02 FB | 	rdlong	arg01, objptr
00ec8     5B 5D 02 F1 | 	add	arg01, local39
00ecc     04 0E 06 F1 | 	add	objptr, #4
00ed0     07 5F 02 FB | 	rdlong	arg02, objptr
00ed4     04 00 00 FF 
00ed8     00 0F 86 F1 | 	sub	objptr, ##2304
00edc                 | ' asm
00edc     2E 5F 42 FC | 	wrbyte	arg02, arg01
00ee0                 | LR__0012
00ee0     01 B6 06 F1 | 	add	local39, #1
00ee4     16 B6 5E F2 | 	cmps	local39, #22 wcz
00ee8     8C FF 9F CD |  if_b	jmp	#LR__0011
00eec     46 BB 02 F6 | 	mov	local41, local18
00ef0     59 BB 02 F1 | 	add	local41, local37
00ef4     5D 5D 02 F6 | 	mov	arg01, local41
00ef8     16 5C 06 F1 | 	add	arg01, #22
00efc     5D BD 02 F6 | 	mov	local42, local41
00f00     17 BC 06 F1 | 	add	local42, #23
00f04                 | ' asm
00f04     2E AB C2 FA | 	rdbyte	local33, arg01
00f08                 | ' return r
00f08     07 AA 46 F7 | 	zerox	local33, #7
00f0c     08 AA 66 F0 | 	shl	local33, #8
00f10                 | ' asm
00f10     5E BF C2 FA | 	rdbyte	local43, local42
00f14                 | ' return r
00f14     07 BE 46 F7 | 	zerox	local43, #7
00f18     5F AB 02 F1 | 	add	local33, local43
00f1c     01 AA 66 F0 | 	shl	local33, #1
00f20     04 00 00 FF 
00f24     04 0F 06 F1 | 	add	objptr, ##2308
00f28     07 AB 62 FC | 	wrlong	local33, objptr
00f2c     5D 5D 02 F6 | 	mov	arg01, local41
00f30     1A 5C 06 F1 | 	add	arg01, #26
00f34     5D C1 02 F6 | 	mov	local44, local41
00f38     1B C0 06 F1 | 	add	local44, #27
00f3c                 | ' asm
00f3c     2E AB C2 FA | 	rdbyte	local33, arg01
00f40                 | ' return r
00f40     07 AA 46 F7 | 	zerox	local33, #7
00f44     08 AA 66 F0 | 	shl	local33, #8
00f48                 | ' asm
00f48     60 BF C2 FA | 	rdbyte	local43, local44
00f4c                 | ' return r
00f4c     07 BE 46 F7 | 	zerox	local43, #7
00f50     5F AB 02 F1 | 	add	local33, local43
00f54     01 AA 66 F0 | 	shl	local33, #1
00f58     04 0E 06 F1 | 	add	objptr, #4
00f5c     07 AB 62 FC | 	wrlong	local33, objptr
00f60     5D 5D 02 F6 | 	mov	arg01, local41
00f64     1C 5C 06 F1 | 	add	arg01, #28
00f68     5D C3 02 F6 | 	mov	local45, local41
00f6c     1D C2 06 F1 | 	add	local45, #29
00f70                 | ' asm
00f70     2E AB C2 FA | 	rdbyte	local33, arg01
00f74                 | ' return r
00f74     07 AA 46 F7 | 	zerox	local33, #7
00f78     08 AA 66 F0 | 	shl	local33, #8
00f7c                 | ' asm
00f7c     61 BF C2 FA | 	rdbyte	local43, local45
00f80                 | ' return r
00f80     07 BE 46 F7 | 	zerox	local43, #7
00f84     5F AB 02 F1 | 	add	local33, local43
00f88     01 AA 66 F0 | 	shl	local33, #1
00f8c     04 0E 06 F1 | 	add	objptr, #4
00f90     07 AB 62 FC | 	wrlong	local33, objptr
00f94     5D 5D 02 F6 | 	mov	arg01, local41
00f98     18 5C 06 F1 | 	add	arg01, #24
00f9c                 | ' asm
00f9c     2E 95 C2 FA | 	rdbyte	local22, arg01
00fa0                 | ' return r
00fa0     07 94 46 F7 | 	zerox	local22, #7
00fa4     04 0E 06 F1 | 	add	objptr, #4
00fa8     07 95 62 FC | 	wrlong	local22, objptr
00fac     19 BA 06 F1 | 	add	local41, #25
00fb0                 | ' asm
00fb0     5D 2B C2 FA | 	rdbyte	result1, local41
00fb4                 | ' return r
00fb4     15 95 02 F6 | 	mov	local22, result1
00fb8     07 94 46 F7 | 	zerox	local22, #7
00fbc     04 0E 06 F1 | 	add	objptr, #4
00fc0     07 95 62 FC | 	wrlong	local22, objptr
00fc4     04 00 00 FF 
00fc8     14 0F 86 F1 | 	sub	objptr, ##2324
00fcc                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00fcc                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00fcc                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00fcc                 | ' ft=peek(ma+20+30*(i-1)+24)
00fcc                 | ' vl=peek(ma+20+30*(i-1)+25)
00fcc                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00fcc     10 92 5E F2 | 	cmps	local21, #16 wcz
00fd0     C4 02 90 3D |  if_ae	jmp	#LR__0013
00fd4     05 C4 06 F6 | 	mov	local46, #5
00fd8     49 C5 02 F1 | 	add	local46, local21
00fdc     62 5F 02 F6 | 	mov	arg02, local46
00fe0                 | ' 
00fe0                 | ' ''---------- Set the (x,y) position of cursor
00fe0                 | ' 
00fe0                 | ' cursor_x:=x
00fe0     34 0E 06 F1 | 	add	objptr, #52
00fe4     07 03 48 FC | 	wrbyte	#1, objptr
00fe8                 | ' cursor_y:=y
00fe8     01 0E 06 F1 | 	add	objptr, #1
00fec     07 5F 42 FC | 	wrbyte	arg02, objptr
00ff0     49 C7 02 F6 | 	mov	local47, local21
00ff4     02 C6 66 F0 | 	shl	local47, #2
00ff8     04 00 00 FF 
00ffc     1B 0E 06 F1 | 	add	objptr, ##2075
01000     07 C7 02 F1 | 	add	local47, objptr
01004     00 5C 06 F6 | 	mov	arg01, #0
01008     04 00 00 FF 
0100c     50 0E 86 F1 | 	sub	objptr, ##2128
01010     3C 65 B0 FD | 	call	#__system___getiolock_0145
01014     15 5D 02 F6 | 	mov	arg01, result1
01018     F0 4E B0 FD | 	call	#__system___lockmem
0101c     00 2A 06 F6 | 	mov	result1, #0
01020     63 5F 02 FB | 	rdlong	arg02, local47
01024     00 5C 06 F6 | 	mov	arg01, #0
01028     00 60 06 F6 | 	mov	arg03, #0
0102c     74 52 B0 FD | 	call	#__system___basic_print_string
01030     00 5C 06 F6 | 	mov	arg01, #0
01034     0A 5E 06 F6 | 	mov	arg02, #10
01038     00 60 06 F6 | 	mov	arg03, #0
0103c     18 52 B0 FD | 	call	#__system___basic_print_char
01040     01 2A 06 F6 | 	mov	result1, #1
01044     00 5C 06 F6 | 	mov	arg01, #0
01048     04 65 B0 FD | 	call	#__system___getiolock_0145
0104c     15 01 68 FC | 	wrlong	#0, result1
01050     00 2A 06 F6 | 	mov	result1, #0
01054     62 5F 02 F6 | 	mov	arg02, local46
01058                 | ' 
01058                 | ' ''---------- Set the (x,y) position of cursor
01058                 | ' 
01058                 | ' cursor_x:=x
01058     34 0E 06 F1 | 	add	objptr, #52
0105c     07 31 48 FC | 	wrbyte	#24, objptr
01060                 | ' cursor_y:=y
01060     01 0E 06 F1 | 	add	objptr, #1
01064     07 5F 42 FC | 	wrbyte	arg02, objptr
01068     35 0E 86 F1 | 	sub	objptr, #53
0106c     00 5C 06 F6 | 	mov	arg01, #0
01070     DC 64 B0 FD | 	call	#__system___getiolock_0145
01074     15 5D 02 F6 | 	mov	arg01, result1
01078     90 4E B0 FD | 	call	#__system___lockmem
0107c     00 2A 06 F6 | 	mov	result1, #0
01080     04 00 00 FF 
01084     04 0F 06 F1 | 	add	objptr, ##2308
01088     07 5F 02 FB | 	rdlong	arg02, objptr
0108c     04 00 00 FF 
01090     04 0F 86 F1 | 	sub	objptr, ##2308
01094     00 5C 06 F6 | 	mov	arg01, #0
01098     00 60 06 F6 | 	mov	arg03, #0
0109c     0A 62 06 F6 | 	mov	arg04, #10
010a0     48 52 B0 FD | 	call	#__system___basic_print_integer
010a4     00 5C 06 F6 | 	mov	arg01, #0
010a8     0A 5E 06 F6 | 	mov	arg02, #10
010ac     00 60 06 F6 | 	mov	arg03, #0
010b0     A4 51 B0 FD | 	call	#__system___basic_print_char
010b4     01 2A 06 F6 | 	mov	result1, #1
010b8     00 5C 06 F6 | 	mov	arg01, #0
010bc     90 64 B0 FD | 	call	#__system___getiolock_0145
010c0     15 01 68 FC | 	wrlong	#0, result1
010c4     00 2A 06 F6 | 	mov	result1, #0
010c8     62 5F 02 F6 | 	mov	arg02, local46
010cc                 | ' 
010cc                 | ' ''---------- Set the (x,y) position of cursor
010cc                 | ' 
010cc                 | ' cursor_x:=x
010cc     34 0E 06 F1 | 	add	objptr, #52
010d0     07 3F 48 FC | 	wrbyte	#31, objptr
010d4                 | ' cursor_y:=y
010d4     01 0E 06 F1 | 	add	objptr, #1
010d8     07 5F 42 FC | 	wrbyte	arg02, objptr
010dc     35 0E 86 F1 | 	sub	objptr, #53
010e0     00 5C 06 F6 | 	mov	arg01, #0
010e4     68 64 B0 FD | 	call	#__system___getiolock_0145
010e8     15 5D 02 F6 | 	mov	arg01, result1
010ec     1C 4E B0 FD | 	call	#__system___lockmem
010f0     00 2A 06 F6 | 	mov	result1, #0
010f4     04 00 00 FF 
010f8     10 0F 06 F1 | 	add	objptr, ##2320
010fc     07 5F 02 FB | 	rdlong	arg02, objptr
01100     04 00 00 FF 
01104     10 0F 86 F1 | 	sub	objptr, ##2320
01108     00 5C 06 F6 | 	mov	arg01, #0
0110c     00 60 06 F6 | 	mov	arg03, #0
01110     0A 62 06 F6 | 	mov	arg04, #10
01114     D4 51 B0 FD | 	call	#__system___basic_print_integer
01118     00 5C 06 F6 | 	mov	arg01, #0
0111c     0A 5E 06 F6 | 	mov	arg02, #10
01120     00 60 06 F6 | 	mov	arg03, #0
01124     30 51 B0 FD | 	call	#__system___basic_print_char
01128     01 2A 06 F6 | 	mov	result1, #1
0112c     00 5C 06 F6 | 	mov	arg01, #0
01130     1C 64 B0 FD | 	call	#__system___getiolock_0145
01134     15 01 68 FC | 	wrlong	#0, result1
01138     00 2A 06 F6 | 	mov	result1, #0
0113c     62 5F 02 F6 | 	mov	arg02, local46
01140                 | ' 
01140                 | ' ''---------- Set the (x,y) position of cursor
01140                 | ' 
01140                 | ' cursor_x:=x
01140     34 0E 06 F1 | 	add	objptr, #52
01144     07 45 48 FC | 	wrbyte	#34, objptr
01148                 | ' cursor_y:=y
01148     01 0E 06 F1 | 	add	objptr, #1
0114c     07 5F 42 FC | 	wrbyte	arg02, objptr
01150     35 0E 86 F1 | 	sub	objptr, #53
01154     00 5C 06 F6 | 	mov	arg01, #0
01158     F4 63 B0 FD | 	call	#__system___getiolock_0145
0115c     15 5D 02 F6 | 	mov	arg01, result1
01160     A8 4D B0 FD | 	call	#__system___lockmem
01164     00 2A 06 F6 | 	mov	result1, #0
01168     04 00 00 FF 
0116c     14 0F 06 F1 | 	add	objptr, ##2324
01170     07 5F 02 FB | 	rdlong	arg02, objptr
01174     04 00 00 FF 
01178     14 0F 86 F1 | 	sub	objptr, ##2324
0117c     00 5C 06 F6 | 	mov	arg01, #0
01180     00 60 06 F6 | 	mov	arg03, #0
01184     0A 62 06 F6 | 	mov	arg04, #10
01188     60 51 B0 FD | 	call	#__system___basic_print_integer
0118c     00 5C 06 F6 | 	mov	arg01, #0
01190     0A 5E 06 F6 | 	mov	arg02, #10
01194     00 60 06 F6 | 	mov	arg03, #0
01198     BC 50 B0 FD | 	call	#__system___basic_print_char
0119c     01 2A 06 F6 | 	mov	result1, #1
011a0     00 5C 06 F6 | 	mov	arg01, #0
011a4     A8 63 B0 FD | 	call	#__system___getiolock_0145
011a8     15 01 68 FC | 	wrlong	#0, result1
011ac     00 2A 06 F6 | 	mov	result1, #0
011b0     62 5F 02 F6 | 	mov	arg02, local46
011b4                 | ' 
011b4                 | ' ''---------- Set the (x,y) position of cursor
011b4                 | ' 
011b4                 | ' cursor_x:=x
011b4     34 0E 06 F1 | 	add	objptr, #52
011b8     07 4B 48 FC | 	wrbyte	#37, objptr
011bc                 | ' cursor_y:=y
011bc     01 0E 06 F1 | 	add	objptr, #1
011c0     07 5F 42 FC | 	wrbyte	arg02, objptr
011c4     35 0E 86 F1 | 	sub	objptr, #53
011c8     00 5C 06 F6 | 	mov	arg01, #0
011cc     80 63 B0 FD | 	call	#__system___getiolock_0145
011d0     15 5D 02 F6 | 	mov	arg01, result1
011d4     34 4D B0 FD | 	call	#__system___lockmem
011d8     00 2A 06 F6 | 	mov	result1, #0
011dc     04 00 00 FF 
011e0     08 0F 06 F1 | 	add	objptr, ##2312
011e4     07 5F 02 FB | 	rdlong	arg02, objptr
011e8     04 00 00 FF 
011ec     08 0F 86 F1 | 	sub	objptr, ##2312
011f0     00 5C 06 F6 | 	mov	arg01, #0
011f4     00 60 06 F6 | 	mov	arg03, #0
011f8     0A 62 06 F6 | 	mov	arg04, #10
011fc     EC 50 B0 FD | 	call	#__system___basic_print_integer
01200     00 5C 06 F6 | 	mov	arg01, #0
01204     0A 5E 06 F6 | 	mov	arg02, #10
01208     00 60 06 F6 | 	mov	arg03, #0
0120c     48 50 B0 FD | 	call	#__system___basic_print_char
01210     01 2A 06 F6 | 	mov	result1, #1
01214     00 5C 06 F6 | 	mov	arg01, #0
01218     34 63 B0 FD | 	call	#__system___getiolock_0145
0121c     15 01 68 FC | 	wrlong	#0, result1
01220     00 2A 06 F6 | 	mov	result1, #0
01224     62 5F 02 F6 | 	mov	arg02, local46
01228                 | ' 
01228                 | ' ''---------- Set the (x,y) position of cursor
01228                 | ' 
01228                 | ' cursor_x:=x
01228     34 0E 06 F1 | 	add	objptr, #52
0122c     07 57 48 FC | 	wrbyte	#43, objptr
01230                 | ' cursor_y:=y
01230     01 0E 06 F1 | 	add	objptr, #1
01234     07 5F 42 FC | 	wrbyte	arg02, objptr
01238     35 0E 86 F1 | 	sub	objptr, #53
0123c     00 5C 06 F6 | 	mov	arg01, #0
01240     0C 63 B0 FD | 	call	#__system___getiolock_0145
01244     15 5D 02 F6 | 	mov	arg01, result1
01248     C0 4C B0 FD | 	call	#__system___lockmem
0124c     00 2A 06 F6 | 	mov	result1, #0
01250     04 00 00 FF 
01254     0C 0F 06 F1 | 	add	objptr, ##2316
01258     07 5F 02 FB | 	rdlong	arg02, objptr
0125c     04 00 00 FF 
01260     0C 0F 86 F1 | 	sub	objptr, ##2316
01264     00 5C 06 F6 | 	mov	arg01, #0
01268     00 60 06 F6 | 	mov	arg03, #0
0126c     0A 62 06 F6 | 	mov	arg04, #10
01270     78 50 B0 FD | 	call	#__system___basic_print_integer
01274     00 5C 06 F6 | 	mov	arg01, #0
01278     0A 5E 06 F6 | 	mov	arg02, #10
0127c     00 60 06 F6 | 	mov	arg03, #0
01280     D4 4F B0 FD | 	call	#__system___basic_print_char
01284     01 2A 06 F6 | 	mov	result1, #1
01288     00 5C 06 F6 | 	mov	arg01, #0
0128c     C0 62 B0 FD | 	call	#__system___getiolock_0145
01290     15 01 68 FC | 	wrlong	#0, result1
01294     00 2A 06 F6 | 	mov	result1, #0
01298                 | LR__0013
01298                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01298     10 92 5E F2 | 	cmps	local21, #16 wcz
0129c     C4 02 90 CD |  if_b	jmp	#LR__0014
012a0     49 C9 02 F6 | 	mov	local48, local21
012a4     0B C8 86 F1 | 	sub	local48, #11
012a8     64 5F 02 F6 | 	mov	arg02, local48
012ac                 | ' 
012ac                 | ' ''---------- Set the (x,y) position of cursor
012ac                 | ' 
012ac                 | ' cursor_x:=x
012ac     34 0E 06 F1 | 	add	objptr, #52
012b0     07 73 48 FC | 	wrbyte	#57, objptr
012b4                 | ' cursor_y:=y
012b4     01 0E 06 F1 | 	add	objptr, #1
012b8     07 5F 42 FC | 	wrbyte	arg02, objptr
012bc     49 CB 02 F6 | 	mov	local49, local21
012c0     02 CA 66 F0 | 	shl	local49, #2
012c4     04 00 00 FF 
012c8     1B 0E 06 F1 | 	add	objptr, ##2075
012cc     07 CB 02 F1 | 	add	local49, objptr
012d0     00 5C 06 F6 | 	mov	arg01, #0
012d4     04 00 00 FF 
012d8     50 0E 86 F1 | 	sub	objptr, ##2128
012dc     70 62 B0 FD | 	call	#__system___getiolock_0145
012e0     15 5D 02 F6 | 	mov	arg01, result1
012e4     24 4C B0 FD | 	call	#__system___lockmem
012e8     00 2A 06 F6 | 	mov	result1, #0
012ec     65 5F 02 FB | 	rdlong	arg02, local49
012f0     00 5C 06 F6 | 	mov	arg01, #0
012f4     00 60 06 F6 | 	mov	arg03, #0
012f8     A8 4F B0 FD | 	call	#__system___basic_print_string
012fc     00 5C 06 F6 | 	mov	arg01, #0
01300     0A 5E 06 F6 | 	mov	arg02, #10
01304     00 60 06 F6 | 	mov	arg03, #0
01308     4C 4F B0 FD | 	call	#__system___basic_print_char
0130c     01 2A 06 F6 | 	mov	result1, #1
01310     00 5C 06 F6 | 	mov	arg01, #0
01314     38 62 B0 FD | 	call	#__system___getiolock_0145
01318     15 01 68 FC | 	wrlong	#0, result1
0131c     00 2A 06 F6 | 	mov	result1, #0
01320     64 5F 02 F6 | 	mov	arg02, local48
01324                 | ' 
01324                 | ' ''---------- Set the (x,y) position of cursor
01324                 | ' 
01324                 | ' cursor_x:=x
01324     34 0E 06 F1 | 	add	objptr, #52
01328     07 A1 48 FC | 	wrbyte	#80, objptr
0132c                 | ' cursor_y:=y
0132c     01 0E 06 F1 | 	add	objptr, #1
01330     07 5F 42 FC | 	wrbyte	arg02, objptr
01334     35 0E 86 F1 | 	sub	objptr, #53
01338     00 5C 06 F6 | 	mov	arg01, #0
0133c     10 62 B0 FD | 	call	#__system___getiolock_0145
01340     15 5D 02 F6 | 	mov	arg01, result1
01344     C4 4B B0 FD | 	call	#__system___lockmem
01348     00 2A 06 F6 | 	mov	result1, #0
0134c     04 00 00 FF 
01350     04 0F 06 F1 | 	add	objptr, ##2308
01354     07 5F 02 FB | 	rdlong	arg02, objptr
01358     04 00 00 FF 
0135c     04 0F 86 F1 | 	sub	objptr, ##2308
01360     00 5C 06 F6 | 	mov	arg01, #0
01364     00 60 06 F6 | 	mov	arg03, #0
01368     0A 62 06 F6 | 	mov	arg04, #10
0136c     7C 4F B0 FD | 	call	#__system___basic_print_integer
01370     00 5C 06 F6 | 	mov	arg01, #0
01374     0A 5E 06 F6 | 	mov	arg02, #10
01378     00 60 06 F6 | 	mov	arg03, #0
0137c     D8 4E B0 FD | 	call	#__system___basic_print_char
01380     01 2A 06 F6 | 	mov	result1, #1
01384     00 5C 06 F6 | 	mov	arg01, #0
01388     C4 61 B0 FD | 	call	#__system___getiolock_0145
0138c     15 01 68 FC | 	wrlong	#0, result1
01390     00 2A 06 F6 | 	mov	result1, #0
01394     64 5F 02 F6 | 	mov	arg02, local48
01398                 | ' 
01398                 | ' ''---------- Set the (x,y) position of cursor
01398                 | ' 
01398                 | ' cursor_x:=x
01398     34 0E 06 F1 | 	add	objptr, #52
0139c     07 AF 48 FC | 	wrbyte	#87, objptr
013a0                 | ' cursor_y:=y
013a0     01 0E 06 F1 | 	add	objptr, #1
013a4     07 5F 42 FC | 	wrbyte	arg02, objptr
013a8     35 0E 86 F1 | 	sub	objptr, #53
013ac     00 5C 06 F6 | 	mov	arg01, #0
013b0     9C 61 B0 FD | 	call	#__system___getiolock_0145
013b4     15 5D 02 F6 | 	mov	arg01, result1
013b8     50 4B B0 FD | 	call	#__system___lockmem
013bc     00 2A 06 F6 | 	mov	result1, #0
013c0     04 00 00 FF 
013c4     10 0F 06 F1 | 	add	objptr, ##2320
013c8     07 5F 02 FB | 	rdlong	arg02, objptr
013cc     04 00 00 FF 
013d0     10 0F 86 F1 | 	sub	objptr, ##2320
013d4     00 5C 06 F6 | 	mov	arg01, #0
013d8     00 60 06 F6 | 	mov	arg03, #0
013dc     0A 62 06 F6 | 	mov	arg04, #10
013e0     08 4F B0 FD | 	call	#__system___basic_print_integer
013e4     00 5C 06 F6 | 	mov	arg01, #0
013e8     0A 5E 06 F6 | 	mov	arg02, #10
013ec     00 60 06 F6 | 	mov	arg03, #0
013f0     64 4E B0 FD | 	call	#__system___basic_print_char
013f4     01 2A 06 F6 | 	mov	result1, #1
013f8     00 5C 06 F6 | 	mov	arg01, #0
013fc     50 61 B0 FD | 	call	#__system___getiolock_0145
01400     15 01 68 FC | 	wrlong	#0, result1
01404     00 2A 06 F6 | 	mov	result1, #0
01408     64 5F 02 F6 | 	mov	arg02, local48
0140c                 | ' 
0140c                 | ' ''---------- Set the (x,y) position of cursor
0140c                 | ' 
0140c                 | ' cursor_x:=x
0140c     34 0E 06 F1 | 	add	objptr, #52
01410     07 B5 48 FC | 	wrbyte	#90, objptr
01414                 | ' cursor_y:=y
01414     01 0E 06 F1 | 	add	objptr, #1
01418     07 5F 42 FC | 	wrbyte	arg02, objptr
0141c     35 0E 86 F1 | 	sub	objptr, #53
01420     00 5C 06 F6 | 	mov	arg01, #0
01424     28 61 B0 FD | 	call	#__system___getiolock_0145
01428     15 5D 02 F6 | 	mov	arg01, result1
0142c     DC 4A B0 FD | 	call	#__system___lockmem
01430     00 2A 06 F6 | 	mov	result1, #0
01434     04 00 00 FF 
01438     14 0F 06 F1 | 	add	objptr, ##2324
0143c     07 5F 02 FB | 	rdlong	arg02, objptr
01440     04 00 00 FF 
01444     14 0F 86 F1 | 	sub	objptr, ##2324
01448     00 5C 06 F6 | 	mov	arg01, #0
0144c     00 60 06 F6 | 	mov	arg03, #0
01450     0A 62 06 F6 | 	mov	arg04, #10
01454     94 4E B0 FD | 	call	#__system___basic_print_integer
01458     00 5C 06 F6 | 	mov	arg01, #0
0145c     0A 5E 06 F6 | 	mov	arg02, #10
01460     00 60 06 F6 | 	mov	arg03, #0
01464     F0 4D B0 FD | 	call	#__system___basic_print_char
01468     01 2A 06 F6 | 	mov	result1, #1
0146c     00 5C 06 F6 | 	mov	arg01, #0
01470     DC 60 B0 FD | 	call	#__system___getiolock_0145
01474     15 01 68 FC | 	wrlong	#0, result1
01478     00 2A 06 F6 | 	mov	result1, #0
0147c     64 5F 02 F6 | 	mov	arg02, local48
01480                 | ' 
01480                 | ' ''---------- Set the (x,y) position of cursor
01480                 | ' 
01480                 | ' cursor_x:=x
01480     34 0E 06 F1 | 	add	objptr, #52
01484     07 BB 48 FC | 	wrbyte	#93, objptr
01488                 | ' cursor_y:=y
01488     01 0E 06 F1 | 	add	objptr, #1
0148c     07 5F 42 FC | 	wrbyte	arg02, objptr
01490     35 0E 86 F1 | 	sub	objptr, #53
01494     00 5C 06 F6 | 	mov	arg01, #0
01498     B4 60 B0 FD | 	call	#__system___getiolock_0145
0149c     15 5D 02 F6 | 	mov	arg01, result1
014a0     68 4A B0 FD | 	call	#__system___lockmem
014a4     00 2A 06 F6 | 	mov	result1, #0
014a8     04 00 00 FF 
014ac     08 0F 06 F1 | 	add	objptr, ##2312
014b0     07 5F 02 FB | 	rdlong	arg02, objptr
014b4     04 00 00 FF 
014b8     08 0F 86 F1 | 	sub	objptr, ##2312
014bc     00 5C 06 F6 | 	mov	arg01, #0
014c0     00 60 06 F6 | 	mov	arg03, #0
014c4     0A 62 06 F6 | 	mov	arg04, #10
014c8     20 4E B0 FD | 	call	#__system___basic_print_integer
014cc     00 5C 06 F6 | 	mov	arg01, #0
014d0     0A 5E 06 F6 | 	mov	arg02, #10
014d4     00 60 06 F6 | 	mov	arg03, #0
014d8     7C 4D B0 FD | 	call	#__system___basic_print_char
014dc     01 2A 06 F6 | 	mov	result1, #1
014e0     00 5C 06 F6 | 	mov	arg01, #0
014e4     68 60 B0 FD | 	call	#__system___getiolock_0145
014e8     15 01 68 FC | 	wrlong	#0, result1
014ec     00 2A 06 F6 | 	mov	result1, #0
014f0     64 5F 02 F6 | 	mov	arg02, local48
014f4                 | ' 
014f4                 | ' ''---------- Set the (x,y) position of cursor
014f4                 | ' 
014f4                 | ' cursor_x:=x
014f4     34 0E 06 F1 | 	add	objptr, #52
014f8     07 C7 48 FC | 	wrbyte	#99, objptr
014fc                 | ' cursor_y:=y
014fc     01 0E 06 F1 | 	add	objptr, #1
01500     07 5F 42 FC | 	wrbyte	arg02, objptr
01504     35 0E 86 F1 | 	sub	objptr, #53
01508     00 5C 06 F6 | 	mov	arg01, #0
0150c     40 60 B0 FD | 	call	#__system___getiolock_0145
01510     15 5D 02 F6 | 	mov	arg01, result1
01514     F4 49 B0 FD | 	call	#__system___lockmem
01518     00 2A 06 F6 | 	mov	result1, #0
0151c     04 00 00 FF 
01520     0C 0F 06 F1 | 	add	objptr, ##2316
01524     07 5F 02 FB | 	rdlong	arg02, objptr
01528     04 00 00 FF 
0152c     0C 0F 86 F1 | 	sub	objptr, ##2316
01530     00 5C 06 F6 | 	mov	arg01, #0
01534     00 60 06 F6 | 	mov	arg03, #0
01538     0A 62 06 F6 | 	mov	arg04, #10
0153c     AC 4D B0 FD | 	call	#__system___basic_print_integer
01540     00 5C 06 F6 | 	mov	arg01, #0
01544     0A 5E 06 F6 | 	mov	arg02, #10
01548     00 60 06 F6 | 	mov	arg03, #0
0154c     08 4D B0 FD | 	call	#__system___basic_print_char
01550     01 2A 06 F6 | 	mov	result1, #1
01554     00 5C 06 F6 | 	mov	arg01, #0
01558     F4 5F B0 FD | 	call	#__system___getiolock_0145
0155c     15 01 68 FC | 	wrlong	#0, result1
01560     00 2A 06 F6 | 	mov	result1, #0
01564                 | LR__0014
01564     01 92 06 F1 | 	add	local21, #1
01568     1E AE 06 F1 | 	add	local35, #30
0156c     04 B0 06 F1 | 	add	local36, #4
01570     1E B2 06 F1 | 	add	local37, #30
01574     EC F8 9F FD | 	jmp	#LR__0010
01578                 | LR__0015
01578                 | ' print
01578     00 5C 06 F6 | 	mov	arg01, #0
0157c     D0 5F B0 FD | 	call	#__system___getiolock_0145
01580     15 5D 02 F6 | 	mov	arg01, result1
01584     84 49 B0 FD | 	call	#__system___lockmem
01588     00 2A 06 F6 | 	mov	result1, #0
0158c     00 5C 06 F6 | 	mov	arg01, #0
01590     0A 5E 06 F6 | 	mov	arg02, #10
01594     00 60 06 F6 | 	mov	arg03, #0
01598     BC 4C B0 FD | 	call	#__system___basic_print_char
0159c     01 2A 06 F6 | 	mov	result1, #1
015a0     00 5C 06 F6 | 	mov	arg01, #0
015a4     A8 5F B0 FD | 	call	#__system___getiolock_0145
015a8     15 01 68 FC | 	wrlong	#0, result1
015ac     03 00 00 FF 
015b0     30 0F 06 F1 | 	add	objptr, ##1840
015b4     03 00 00 FF 
015b8     F0 16 06 F1 | 	add	ptr__audio015_spin2_dat__, ##1776
015bc                 | ' 
015bc                 | ' 
015bc                 | ' channel1[0]:=@null
015bc     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
015c0                 | ' channel1[1]:=0
015c0     04 0E 06 F1 | 	add	objptr, #4
015c4     07 01 68 FC | 	wrlong	#0, objptr
015c8                 | ' channel1[2]:=0
015c8     04 0E 06 F1 | 	add	objptr, #4
015cc     07 01 68 FC | 	wrlong	#0, objptr
015d0                 | ' channel1[3]:=2
015d0     04 0E 06 F1 | 	add	objptr, #4
015d4     07 05 68 FC | 	wrlong	#2, objptr
015d8                 | ' channel1[4]:=0
015d8     04 0E 06 F1 | 	add	objptr, #4
015dc     07 01 68 FC | 	wrlong	#0, objptr
015e0                 | ' channel1[5]:=8192
015e0     04 0E 06 F1 | 	add	objptr, #4
015e4     10 00 80 FF 
015e8     07 01 68 FC | 	wrlong	##8192, objptr
015ec                 | ' channel1[6]:=101
015ec     04 0E 06 F1 | 	add	objptr, #4
015f0     07 CB 68 FC | 	wrlong	#101, objptr
015f4                 | ' channel1[7]:=2
015f4     04 0E 06 F1 | 	add	objptr, #4
015f8     07 05 68 FC | 	wrlong	#2, objptr
015fc                 | ' 
015fc                 | ' channel2[0]:=@null
015fc     08 0E 06 F1 | 	add	objptr, #8
01600     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
01604                 | ' channel2[1]:=0
01604     04 0E 06 F1 | 	add	objptr, #4
01608     07 01 68 FC | 	wrlong	#0, objptr
0160c                 | ' channel2[2]:=0
0160c     04 0E 06 F1 | 	add	objptr, #4
01610     07 01 68 FC | 	wrlong	#0, objptr
01614                 | ' channel2[3]:=2
01614     04 0E 06 F1 | 	add	objptr, #4
01618     07 05 68 FC | 	wrlong	#2, objptr
0161c                 | ' channel2[4]:=0
0161c     04 0E 06 F1 | 	add	objptr, #4
01620     07 01 68 FC | 	wrlong	#0, objptr
01624                 | ' channel2[5]:=8192
01624     04 0E 06 F1 | 	add	objptr, #4
01628     10 00 80 FF 
0162c     07 01 68 FC | 	wrlong	##8192, objptr
01630                 | ' channel2[6]:=103
01630     04 0E 06 F1 | 	add	objptr, #4
01634     07 CF 68 FC | 	wrlong	#103, objptr
01638                 | ' channel2[7]:=2
01638     04 0E 06 F1 | 	add	objptr, #4
0163c     07 05 68 FC | 	wrlong	#2, objptr
01640                 | ' 
01640                 | ' channel3[0]:=@null
01640     08 0E 06 F1 | 	add	objptr, #8
01644     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
01648                 | ' channel3[1]:=0
01648     04 0E 06 F1 | 	add	objptr, #4
0164c     07 01 68 FC | 	wrlong	#0, objptr
01650                 | ' channel3[2]:=0
01650     04 0E 06 F1 | 	add	objptr, #4
01654     07 01 68 FC | 	wrlong	#0, objptr
01658                 | ' channel3[3]:=2
01658     04 0E 06 F1 | 	add	objptr, #4
0165c     07 05 68 FC | 	wrlong	#2, objptr
01660                 | ' channel3[4]:=0
01660     04 0E 06 F1 | 	add	objptr, #4
01664     07 01 68 FC | 	wrlong	#0, objptr
01668                 | ' channel3[5]:=8192
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     10 00 80 FF 
01670     07 01 68 FC | 	wrlong	##8192, objptr
01674                 | ' channel3[6]:=107
01674     04 0E 06 F1 | 	add	objptr, #4
01678     07 D7 68 FC | 	wrlong	#107, objptr
0167c                 | ' channel3[7]:=2
0167c     04 0E 06 F1 | 	add	objptr, #4
01680     07 05 68 FC | 	wrlong	#2, objptr
01684                 | ' 
01684                 | ' channel4[0]:=@null
01684     08 0E 06 F1 | 	add	objptr, #8
01688     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
0168c                 | ' channel4[1]:=0
0168c     04 0E 06 F1 | 	add	objptr, #4
01690     07 01 68 FC | 	wrlong	#0, objptr
01694                 | ' channel4[2]:=0
01694     04 0E 06 F1 | 	add	objptr, #4
01698     07 01 68 FC | 	wrlong	#0, objptr
0169c                 | ' channel4[3]:=2
0169c     04 0E 06 F1 | 	add	objptr, #4
016a0     07 05 68 FC | 	wrlong	#2, objptr
016a4                 | ' channel4[4]:=0
016a4     04 0E 06 F1 | 	add	objptr, #4
016a8     07 01 68 FC | 	wrlong	#0, objptr
016ac                 | ' channel4[5]:=8192
016ac     04 0E 06 F1 | 	add	objptr, #4
016b0     10 00 80 FF 
016b4     07 01 68 FC | 	wrlong	##8192, objptr
016b8                 | ' channel4[6]:=109
016b8     04 0E 06 F1 | 	add	objptr, #4
016bc     07 DB 68 FC | 	wrlong	#109, objptr
016c0                 | ' channel4[7]:=2
016c0     04 0E 06 F1 | 	add	objptr, #4
016c4     07 05 68 FC | 	wrlong	#2, objptr
016c8                 | ' channel4[8]:=1
016c8     04 0E 06 F1 | 	add	objptr, #4
016cc     07 03 68 FC | 	wrlong	#1, objptr
016d0                 | ' 
016d0                 | ' channel5[0]:=@null
016d0     04 0E 06 F1 | 	add	objptr, #4
016d4     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
016d8                 | ' channel5[1]:=0
016d8     04 0E 06 F1 | 	add	objptr, #4
016dc     07 01 68 FC | 	wrlong	#0, objptr
016e0                 | ' channel5[2]:=0
016e0     04 0E 06 F1 | 	add	objptr, #4
016e4     07 01 68 FC | 	wrlong	#0, objptr
016e8                 | ' channel5[3]:=2
016e8     04 0E 06 F1 | 	add	objptr, #4
016ec     07 05 68 FC | 	wrlong	#2, objptr
016f0                 | ' channel5[4]:=0
016f0     04 0E 06 F1 | 	add	objptr, #4
016f4     07 01 68 FC | 	wrlong	#0, objptr
016f8                 | ' channel5[5]:=8192
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     10 00 80 FF 
01700     07 01 68 FC | 	wrlong	##8192, objptr
01704                 | ' channel5[6]:=113
01704     04 0E 06 F1 | 	add	objptr, #4
01708     07 E3 68 FC | 	wrlong	#113, objptr
0170c                 | ' channel5[7]:=2
0170c     04 0E 06 F1 | 	add	objptr, #4
01710     07 05 68 FC | 	wrlong	#2, objptr
01714                 | ' 
01714                 | ' channel6[0]:=@null
01714     08 0E 06 F1 | 	add	objptr, #8
01718     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
0171c                 | ' channel6[1]:=0
0171c     04 0E 06 F1 | 	add	objptr, #4
01720     07 01 68 FC | 	wrlong	#0, objptr
01724                 | ' channel6[2]:=0
01724     04 0E 06 F1 | 	add	objptr, #4
01728     07 01 68 FC | 	wrlong	#0, objptr
0172c                 | ' channel6[3]:=2
0172c     04 0E 06 F1 | 	add	objptr, #4
01730     07 05 68 FC | 	wrlong	#2, objptr
01734                 | ' channel6[4]:=0
01734     04 0E 06 F1 | 	add	objptr, #4
01738     07 01 68 FC | 	wrlong	#0, objptr
0173c                 | ' channel6[5]:=8192
0173c     04 0E 06 F1 | 	add	objptr, #4
01740     10 00 80 FF 
01744     07 01 68 FC | 	wrlong	##8192, objptr
01748                 | ' channel6[6]:=127
01748     04 0E 06 F1 | 	add	objptr, #4
0174c     07 FF 68 FC | 	wrlong	#127, objptr
01750                 | ' channel6[7]:=2
01750     04 0E 06 F1 | 	add	objptr, #4
01754     07 05 68 FC | 	wrlong	#2, objptr
01758                 | ' 
01758                 | ' channel7[0]:=@null
01758     08 0E 06 F1 | 	add	objptr, #8
0175c     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
01760                 | ' channel7[1]:=0
01760     04 0E 06 F1 | 	add	objptr, #4
01764     07 01 68 FC | 	wrlong	#0, objptr
01768                 | ' channel7[2]:=0
01768     04 0E 06 F1 | 	add	objptr, #4
0176c     07 01 68 FC | 	wrlong	#0, objptr
01770                 | ' channel7[3]:=2
01770     04 0E 06 F1 | 	add	objptr, #4
01774     07 05 68 FC | 	wrlong	#2, objptr
01778                 | ' channel7[4]:=0
01778     04 0E 06 F1 | 	add	objptr, #4
0177c     07 01 68 FC | 	wrlong	#0, objptr
01780                 | ' channel7[5]:=8192
01780     04 0E 06 F1 | 	add	objptr, #4
01784     10 00 80 FF 
01788     07 01 68 FC | 	wrlong	##8192, objptr
0178c                 | ' channel7[6]:=131
0178c     04 0E 06 F1 | 	add	objptr, #4
01790     07 07 69 FC | 	wrlong	#131, objptr
01794                 | ' channel7[7]:=2
01794     04 0E 06 F1 | 	add	objptr, #4
01798     07 05 68 FC | 	wrlong	#2, objptr
0179c                 | ' 
0179c                 | ' channel8[0]:=@null
0179c     08 0E 06 F1 | 	add	objptr, #8
017a0     07 17 62 FC | 	wrlong	ptr__audio015_spin2_dat__, objptr
017a4                 | ' channel8[1]:=0
017a4     04 0E 06 F1 | 	add	objptr, #4
017a8     07 01 68 FC | 	wrlong	#0, objptr
017ac                 | ' channel8[2]:=0
017ac     04 0E 06 F1 | 	add	objptr, #4
017b0     07 01 68 FC | 	wrlong	#0, objptr
017b4                 | ' channel8[3]:=2
017b4     04 0E 06 F1 | 	add	objptr, #4
017b8     07 05 68 FC | 	wrlong	#2, objptr
017bc                 | ' channel8[4]:=0
017bc     04 0E 06 F1 | 	add	objptr, #4
017c0     07 01 68 FC | 	wrlong	#0, objptr
017c4                 | ' channel8[5]:=8192
017c4     04 0E 06 F1 | 	add	objptr, #4
017c8     10 00 80 FF 
017cc     07 01 68 FC | 	wrlong	##8192, objptr
017d0                 | ' channel8[6]:=137
017d0     04 0E 06 F1 | 	add	objptr, #4
017d4     07 13 69 FC | 	wrlong	#137, objptr
017d8                 | ' channel8[7]:=2
017d8     04 0E 06 F1 | 	add	objptr, #4
017dc     07 05 68 FC | 	wrlong	#2, objptr
017e0                 | ' 
017e0                 | ' channel1[8]:=1
017e0     F8 0E 86 F1 | 	sub	objptr, #248
017e4     07 03 68 FC | 	wrlong	#1, objptr
017e8                 | ' channel2[8]:=1
017e8     24 0E 06 F1 | 	add	objptr, #36
017ec     07 03 68 FC | 	wrlong	#1, objptr
017f0                 | ' channel3[8]:=1
017f0     24 0E 06 F1 | 	add	objptr, #36
017f4     07 03 68 FC | 	wrlong	#1, objptr
017f8                 | ' channel4[8]:=1
017f8     24 0E 06 F1 | 	add	objptr, #36
017fc     07 03 68 FC | 	wrlong	#1, objptr
01800                 | ' channel5[8]:=1
01800     24 0E 06 F1 | 	add	objptr, #36
01804     07 03 68 FC | 	wrlong	#1, objptr
01808                 | ' channel6[8]:=1
01808     24 0E 06 F1 | 	add	objptr, #36
0180c     07 03 68 FC | 	wrlong	#1, objptr
01810                 | ' channel7[8]:=1
01810     24 0E 06 F1 | 	add	objptr, #36
01814     07 03 68 FC | 	wrlong	#1, objptr
01818                 | ' channel8[8]:=1
01818     24 0E 06 F1 | 	add	objptr, #36
0181c     07 03 68 FC | 	wrlong	#1, objptr
01820     1C 0F 86 F1 | 	sub	objptr, #284
01824                 | ' 
01824                 | ' cog:=coginit(16,@audio,@channel1)
01824     03 00 00 FF 
01828     F0 16 86 F1 | 	sub	ptr__audio015_spin2_dat__, ##1776
0182c     0B 5F 02 F6 | 	mov	arg02, ptr__audio015_spin2_dat__
01830     07 61 02 F6 | 	mov	arg03, objptr
01834     10 5C 06 F6 | 	mov	arg01, #16
01838     28 60 62 FD | 	setq	arg03
0183c     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01840     01 5C 66 C6 |  if_b	neg	arg01, #1
01844     2E 2B 02 F6 | 	mov	result1, arg01
01848                 | ' return cog
01848     B0 0F 06 F1 | 	add	objptr, #432
0184c     07 01 68 FC | 	wrlong	#0, objptr
01850     04 0E 06 F1 | 	add	objptr, #4
01854     07 01 68 FC | 	wrlong	#0, objptr
01858     04 0E 06 F1 | 	add	objptr, #4
0185c     07 01 68 FC | 	wrlong	#0, objptr
01860     04 0E 06 F1 | 	add	objptr, #4
01864     07 01 68 FC | 	wrlong	#0, objptr
01868     04 00 00 FF 
0186c     EC 0E 86 F1 | 	sub	objptr, ##2284
01870                 | ' getinfo(ma,samples)
01870                 | ' 
01870                 | ' paula.start
01870                 | ' 
01870                 | ' old1=0 : old2=0 :old3=0 : old4=0
01870                 | ' 
01870                 | ' do
01870                 | LR__0016
01870                 | ' 
01870                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01870                 | ' 
01870                 | ' repeat i from 1 to amount
01870     01 CC 06 F6 | 	mov	local50, #1
01874                 | LR__0017
01874                 | '   repeat until vblank==0
01874                 | LR__0018
01874     40 0E 06 F1 | 	add	objptr, #64
01878     07 CF 0A FB | 	rdlong	local51, objptr wz
0187c     40 0E 86 F1 | 	sub	objptr, #64
01880     0C 00 90 AD |  if_e	jmp	#LR__0019
01884                 | '     waitus(100)
01884     64 5C 06 F6 | 	mov	arg01, #100
01888     C4 48 B0 FD | 	call	#__system___waitus
0188c     E4 FF 9F FD | 	jmp	#LR__0018
01890                 | LR__0019
01890                 | '   repeat until vblank==1
01890                 | LR__0020
01890     40 0E 06 F1 | 	add	objptr, #64
01894     07 CF 02 FB | 	rdlong	local51, objptr
01898     40 0E 86 F1 | 	sub	objptr, #64
0189c     01 CE 0E F2 | 	cmp	local51, #1 wz
018a0     0C 00 90 AD |  if_e	jmp	#LR__0021
018a4                 | '     waitus(100)
018a4     64 5C 06 F6 | 	mov	arg01, #100
018a8     A4 48 B0 FD | 	call	#__system___waitus
018ac     E0 FF 9F FD | 	jmp	#LR__0020
018b0                 | LR__0021
018b0     F0 CD 6E FB | 	djnz	local50, #LR__0017
018b4     02 00 00 FF 
018b8     34 0F 06 F1 | 	add	objptr, ##1332
018bc     84 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018c0     A7 0E 06 F1 | 	add	objptr, #167
018c4     07 7D 02 FB | 	rdlong	local10, objptr
018c8     55 0F 06 F1 | 	add	objptr, #341
018cc     07 7D 62 FC | 	wrlong	local10, objptr
018d0     04 0E 06 F1 | 	add	objptr, #4
018d4     07 03 68 FC | 	wrlong	#1, objptr
018d8     45 0F 86 F1 | 	sub	objptr, #325
018dc     07 7D E2 FA | 	rdword	local10, objptr
018e0     08 0E 06 F1 | 	add	objptr, #8
018e4     07 D1 02 FB | 	rdlong	local52, objptr
018e8     68 7D 82 F1 | 	sub	local10, local52
018ec     41 0F 06 F1 | 	add	objptr, #321
018f0     07 7D 62 FC | 	wrlong	local10, objptr
018f4     49 0F 86 F1 | 	sub	objptr, #329
018f8     07 7D E2 FA | 	rdword	local10, objptr
018fc     4D 0F 06 F1 | 	add	objptr, #333
01900     07 7D 62 FC | 	wrlong	local10, objptr
01904     09 0F 86 F1 | 	sub	objptr, #265
01908     07 7D 02 FB | 	rdlong	local10, objptr
0190c     10 0E 06 F1 | 	add	objptr, #16
01910     07 D1 02 FB | 	rdlong	local52, objptr
01914     68 7D 02 F1 | 	add	local10, local52
01918     13 0F 86 F1 | 	sub	objptr, #275
0191c     07 85 02 FB | 	rdlong	local14, objptr
01920     42 7D 02 FD | 	qmul	local10, local14
01924     18 D2 62 FD | 	getqx	local53
01928     01 00 00 FF 
0192c     10 0E 06 F1 | 	add	objptr, ##528
01930     07 D3 62 FC | 	wrlong	local53, objptr
01934     04 0E 06 F1 | 	add	objptr, #4
01938     0C 00 80 FF 
0193c     07 01 68 FC | 	wrlong	##6144, objptr
01940     31 0F 86 F1 | 	sub	objptr, #305
01944     07 7D 02 FB | 	rdlong	local10, objptr
01948     10 0E 06 F1 | 	add	objptr, #16
0194c     07 D1 02 FB | 	rdlong	local52, objptr
01950     68 7D 02 F1 | 	add	local10, local52
01954     25 0F 06 F1 | 	add	objptr, #293
01958     07 7D 62 FC | 	wrlong	local10, objptr
0195c     04 0E 06 F1 | 	add	objptr, #4
01960     07 03 68 FC | 	wrlong	#1, objptr
01964                 | ' 
01964                 | '     waitvbl
01964                 | '     tracker.tick
01964                 | '     
01964                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01964                 | ' 	paula.channel1(1)=1
01964                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01964                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01964                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01964                 | ' 	paula.channel1(5)=8192-2048
01964                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01964                 | ' 	paula.channel1(7)=1
01964                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus 100 : paula.channel1(8)=$FFFFFFFF :old1=tracker.trigger(0)
01964     22 0E 86 F1 | 	sub	objptr, #34
01968     07 7D C2 FA | 	rdbyte	local10, objptr
0196c     B6 0F 06 F1 | 	add	objptr, #438
01970     07 D1 02 FB | 	rdlong	local52, objptr
01974     04 00 00 FF 
01978     E0 0E 86 F1 | 	sub	objptr, ##2272
0197c     68 7D 0A F2 | 	cmp	local10, local52 wz
01980     44 00 90 AD |  if_e	jmp	#LR__0022
01984     03 00 00 FF 
01988     50 0F 06 F1 | 	add	objptr, ##1872
0198c     07 01 68 FC | 	wrlong	#0, objptr
01990     03 00 00 FF 
01994     50 0F 86 F1 | 	sub	objptr, ##1872
01998     64 5C 06 F6 | 	mov	arg01, #100
0199c     B0 47 B0 FD | 	call	#__system___waitus
019a0     03 00 00 FF 
019a4     50 0F 06 F1 | 	add	objptr, ##1872
019a8     FF FF FF FF 
019ac     07 FF 6B FC | 	wrlong	##-1, objptr
019b0     26 0E 86 F1 | 	sub	objptr, #38
019b4     07 7D C2 FA | 	rdbyte	local10, objptr
019b8     B6 0F 06 F1 | 	add	objptr, #438
019bc     07 7D 62 FC | 	wrlong	local10, objptr
019c0     04 00 00 FF 
019c4     E0 0E 86 F1 | 	sub	objptr, ##2272
019c8                 | LR__0022
019c8     03 00 00 FF 
019cc     54 0F 06 F1 | 	add	objptr, ##1876
019d0     07 7D 02 FB | 	rdlong	local10, objptr
019d4     9C 0F 06 F1 | 	add	objptr, #412
019d8     07 7D 62 FC | 	wrlong	local10, objptr
019dc     01 00 00 FF 
019e0     11 0F 86 F1 | 	sub	objptr, ##785
019e4     07 7D 02 FB | 	rdlong	local10, objptr
019e8     75 0F 06 F1 | 	add	objptr, #373
019ec     07 7D 62 FC | 	wrlong	local10, objptr
019f0     04 0E 06 F1 | 	add	objptr, #4
019f4     07 03 68 FC | 	wrlong	#1, objptr
019f8     67 0F 86 F1 | 	sub	objptr, #359
019fc     07 7D E2 FA | 	rdword	local10, objptr
01a00     0A 0E 06 F1 | 	add	objptr, #10
01a04     07 D1 02 FB | 	rdlong	local52, objptr
01a08     68 7D 82 F1 | 	sub	local10, local52
01a0c     61 0F 06 F1 | 	add	objptr, #353
01a10     07 7D 62 FC | 	wrlong	local10, objptr
01a14     6B 0F 86 F1 | 	sub	objptr, #363
01a18     07 7D E2 FA | 	rdword	local10, objptr
01a1c     6F 0F 06 F1 | 	add	objptr, #367
01a20     07 7D 62 FC | 	wrlong	local10, objptr
01a24     29 0F 86 F1 | 	sub	objptr, #297
01a28     07 7D 02 FB | 	rdlong	local10, objptr
01a2c     10 0E 06 F1 | 	add	objptr, #16
01a30     07 D1 02 FB | 	rdlong	local52, objptr
01a34     68 7D 02 F1 | 	add	local10, local52
01a38     17 0F 86 F1 | 	sub	objptr, #279
01a3c     07 85 02 FB | 	rdlong	local14, objptr
01a40     42 7D 02 FD | 	qmul	local10, local14
01a44     18 D2 62 FD | 	getqx	local53
01a48     01 00 00 FF 
01a4c     34 0E 06 F1 | 	add	objptr, ##564
01a50     07 D3 62 FC | 	wrlong	local53, objptr
01a54     04 0E 06 F1 | 	add	objptr, #4
01a58     14 00 80 FF 
01a5c     07 01 68 FC | 	wrlong	##10240, objptr
01a60     51 0F 86 F1 | 	sub	objptr, #337
01a64     07 7D 02 FB | 	rdlong	local10, objptr
01a68     10 0E 06 F1 | 	add	objptr, #16
01a6c     07 D1 02 FB | 	rdlong	local52, objptr
01a70     68 7D 02 F1 | 	add	local10, local52
01a74     45 0F 06 F1 | 	add	objptr, #325
01a78     07 7D 62 FC | 	wrlong	local10, objptr
01a7c     04 0E 06 F1 | 	add	objptr, #4
01a80     07 03 68 FC | 	wrlong	#1, objptr
01a84                 | ' 
01a84                 | '     old12=paula.channel2(0)
01a84                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01a84                 | ' 	paula.channel2(1)=1
01a84                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01a84                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01a84                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01a84                 | ' 	paula.channel2(5)=8192+2048
01a84                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01a84                 | ' 	paula.channel2(7)=1
01a84                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus 100 : paula.channel2(8)=$FFFFFFFF :old2=tracker.trigger(1)
01a84     45 0E 86 F1 | 	sub	objptr, #69
01a88     07 7D C2 FA | 	rdbyte	local10, objptr
01a8c     B9 0F 06 F1 | 	add	objptr, #441
01a90     07 D1 02 FB | 	rdlong	local52, objptr
01a94     04 00 00 FF 
01a98     E4 0E 86 F1 | 	sub	objptr, ##2276
01a9c     68 7D 0A F2 | 	cmp	local10, local52 wz
01aa0     44 00 90 AD |  if_e	jmp	#LR__0023
01aa4     03 00 00 FF 
01aa8     74 0F 06 F1 | 	add	objptr, ##1908
01aac     07 01 68 FC | 	wrlong	#0, objptr
01ab0     03 00 00 FF 
01ab4     74 0F 86 F1 | 	sub	objptr, ##1908
01ab8     64 5C 06 F6 | 	mov	arg01, #100
01abc     90 46 B0 FD | 	call	#__system___waitus
01ac0     03 00 00 FF 
01ac4     74 0F 06 F1 | 	add	objptr, ##1908
01ac8     FF FF FF FF 
01acc     07 FF 6B FC | 	wrlong	##-1, objptr
01ad0     49 0E 86 F1 | 	sub	objptr, #73
01ad4     07 7D C2 FA | 	rdbyte	local10, objptr
01ad8     B9 0F 06 F1 | 	add	objptr, #441
01adc     07 7D 62 FC | 	wrlong	local10, objptr
01ae0     04 00 00 FF 
01ae4     E4 0E 86 F1 | 	sub	objptr, ##2276
01ae8                 | LR__0023
01ae8     03 00 00 FF 
01aec     78 0F 06 F1 | 	add	objptr, ##1912
01af0     07 7D 02 FB | 	rdlong	local10, objptr
01af4     7C 0F 06 F1 | 	add	objptr, #380
01af8     07 7D 62 FC | 	wrlong	local10, objptr
01afc     01 00 00 FF 
01b00     11 0F 86 F1 | 	sub	objptr, ##785
01b04     07 7D 02 FB | 	rdlong	local10, objptr
01b08     95 0F 06 F1 | 	add	objptr, #405
01b0c     07 7D 62 FC | 	wrlong	local10, objptr
01b10     04 0E 06 F1 | 	add	objptr, #4
01b14     07 03 68 FC | 	wrlong	#1, objptr
01b18     89 0F 86 F1 | 	sub	objptr, #393
01b1c     07 7D E2 FA | 	rdword	local10, objptr
01b20     0C 0E 06 F1 | 	add	objptr, #12
01b24     07 D1 02 FB | 	rdlong	local52, objptr
01b28     68 7D 82 F1 | 	sub	local10, local52
01b2c     81 0F 06 F1 | 	add	objptr, #385
01b30     07 7D 62 FC | 	wrlong	local10, objptr
01b34     8D 0F 86 F1 | 	sub	objptr, #397
01b38     07 7D E2 FA | 	rdword	local10, objptr
01b3c     91 0F 06 F1 | 	add	objptr, #401
01b40     07 7D 62 FC | 	wrlong	local10, objptr
01b44     49 0F 86 F1 | 	sub	objptr, #329
01b48     07 7D 02 FB | 	rdlong	local10, objptr
01b4c     10 0E 06 F1 | 	add	objptr, #16
01b50     07 D1 02 FB | 	rdlong	local52, objptr
01b54     68 7D 02 F1 | 	add	local10, local52
01b58     1B 0F 86 F1 | 	sub	objptr, #283
01b5c     07 85 02 FB | 	rdlong	local14, objptr
01b60     42 7D 02 FD | 	qmul	local10, local14
01b64     18 D2 62 FD | 	getqx	local53
01b68     01 00 00 FF 
01b6c     58 0E 06 F1 | 	add	objptr, ##600
01b70     07 D3 62 FC | 	wrlong	local53, objptr
01b74     04 0E 06 F1 | 	add	objptr, #4
01b78     14 00 80 FF 
01b7c     07 01 68 FC | 	wrlong	##10240, objptr
01b80     71 0F 86 F1 | 	sub	objptr, #369
01b84     07 7D 02 FB | 	rdlong	local10, objptr
01b88     10 0E 06 F1 | 	add	objptr, #16
01b8c     07 D1 02 FB | 	rdlong	local52, objptr
01b90     68 7D 02 F1 | 	add	local10, local52
01b94     65 0F 06 F1 | 	add	objptr, #357
01b98     07 7D 62 FC | 	wrlong	local10, objptr
01b9c     04 0E 06 F1 | 	add	objptr, #4
01ba0     07 03 68 FC | 	wrlong	#1, objptr
01ba4                 | ' 
01ba4                 | '     old13=paula.channel3(0)
01ba4                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01ba4                 | ' 	paula.channel3(1)=1
01ba4                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01ba4                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01ba4                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01ba4                 | ' 	paula.channel3(5)=8192+2048
01ba4                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01ba4                 | ' 	paula.channel3(7)=1
01ba4                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus 100 : paula.channel3(8)=$FFFFFFFF :old3=tracker.trigger(2)
01ba4     68 0E 86 F1 | 	sub	objptr, #104
01ba8     07 7D C2 FA | 	rdbyte	local10, objptr
01bac     BC 0F 06 F1 | 	add	objptr, #444
01bb0     07 D1 02 FB | 	rdlong	local52, objptr
01bb4     04 00 00 FF 
01bb8     E8 0E 86 F1 | 	sub	objptr, ##2280
01bbc     68 7D 0A F2 | 	cmp	local10, local52 wz
01bc0     44 00 90 AD |  if_e	jmp	#LR__0024
01bc4     03 00 00 FF 
01bc8     98 0F 06 F1 | 	add	objptr, ##1944
01bcc     07 01 68 FC | 	wrlong	#0, objptr
01bd0     03 00 00 FF 
01bd4     98 0F 86 F1 | 	sub	objptr, ##1944
01bd8     64 5C 06 F6 | 	mov	arg01, #100
01bdc     70 45 B0 FD | 	call	#__system___waitus
01be0     03 00 00 FF 
01be4     98 0F 06 F1 | 	add	objptr, ##1944
01be8     FF FF FF FF 
01bec     07 FF 6B FC | 	wrlong	##-1, objptr
01bf0     6C 0E 86 F1 | 	sub	objptr, #108
01bf4     07 7D C2 FA | 	rdbyte	local10, objptr
01bf8     BC 0F 06 F1 | 	add	objptr, #444
01bfc     07 7D 62 FC | 	wrlong	local10, objptr
01c00     04 00 00 FF 
01c04     E8 0E 86 F1 | 	sub	objptr, ##2280
01c08                 | LR__0024
01c08     03 00 00 FF 
01c0c     9C 0F 06 F1 | 	add	objptr, ##1948
01c10     07 7D 02 FB | 	rdlong	local10, objptr
01c14     5C 0F 06 F1 | 	add	objptr, #348
01c18     07 7D 62 FC | 	wrlong	local10, objptr
01c1c     01 00 00 FF 
01c20     11 0F 86 F1 | 	sub	objptr, ##785
01c24     07 7D 02 FB | 	rdlong	local10, objptr
01c28     B5 0F 06 F1 | 	add	objptr, #437
01c2c     07 7D 62 FC | 	wrlong	local10, objptr
01c30     04 0E 06 F1 | 	add	objptr, #4
01c34     07 03 68 FC | 	wrlong	#1, objptr
01c38     AB 0F 86 F1 | 	sub	objptr, #427
01c3c     07 7D E2 FA | 	rdword	local10, objptr
01c40     0E 0E 06 F1 | 	add	objptr, #14
01c44     07 D1 02 FB | 	rdlong	local52, objptr
01c48     68 7D 82 F1 | 	sub	local10, local52
01c4c     A1 0F 06 F1 | 	add	objptr, #417
01c50     07 7D 62 FC | 	wrlong	local10, objptr
01c54     AF 0F 86 F1 | 	sub	objptr, #431
01c58     07 7D E2 FA | 	rdword	local10, objptr
01c5c     B3 0F 06 F1 | 	add	objptr, #435
01c60     07 7D 62 FC | 	wrlong	local10, objptr
01c64     69 0F 86 F1 | 	sub	objptr, #361
01c68     07 7D 02 FB | 	rdlong	local10, objptr
01c6c     10 0E 06 F1 | 	add	objptr, #16
01c70     07 D1 02 FB | 	rdlong	local52, objptr
01c74     68 7D 02 F1 | 	add	local10, local52
01c78     1F 0F 86 F1 | 	sub	objptr, #287
01c7c     07 85 02 FB | 	rdlong	local14, objptr
01c80     42 7D 02 FD | 	qmul	local10, local14
01c84     18 D2 62 FD | 	getqx	local53
01c88     01 00 00 FF 
01c8c     7C 0E 06 F1 | 	add	objptr, ##636
01c90     07 D3 62 FC | 	wrlong	local53, objptr
01c94     04 0E 06 F1 | 	add	objptr, #4
01c98     0C 00 80 FF 
01c9c     07 01 68 FC | 	wrlong	##6144, objptr
01ca0     91 0F 86 F1 | 	sub	objptr, #401
01ca4     07 7D 02 FB | 	rdlong	local10, objptr
01ca8     10 0E 06 F1 | 	add	objptr, #16
01cac     07 D1 02 FB | 	rdlong	local52, objptr
01cb0     68 7D 02 F1 | 	add	local10, local52
01cb4     85 0F 06 F1 | 	add	objptr, #389
01cb8     07 7D 62 FC | 	wrlong	local10, objptr
01cbc     04 0E 06 F1 | 	add	objptr, #4
01cc0     07 03 68 FC | 	wrlong	#1, objptr
01cc4                 | ' 
01cc4                 | '     old14=paula.channel4(0)    
01cc4                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01cc4                 | ' 	paula.channel4(1)=1
01cc4                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01cc4                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01cc4                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*mainvolume
01cc4                 | ' 	paula.channel4(5)=8192-2048
01cc4                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01cc4                 | ' 	paula.channel4(7)=1
01cc4                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus 100 : paula.channel4(8)=$FFFFFFFF :old4=tracker.trigger(3)
01cc4     8B 0E 86 F1 | 	sub	objptr, #139
01cc8     07 7D C2 FA | 	rdbyte	local10, objptr
01ccc     BF 0F 06 F1 | 	add	objptr, #447
01cd0     07 D1 02 FB | 	rdlong	local52, objptr
01cd4     04 00 00 FF 
01cd8     EC 0E 86 F1 | 	sub	objptr, ##2284
01cdc     68 7D 0A F2 | 	cmp	local10, local52 wz
01ce0     44 00 90 AD |  if_e	jmp	#LR__0025
01ce4     03 00 00 FF 
01ce8     BC 0F 06 F1 | 	add	objptr, ##1980
01cec     07 01 68 FC | 	wrlong	#0, objptr
01cf0     03 00 00 FF 
01cf4     BC 0F 86 F1 | 	sub	objptr, ##1980
01cf8     64 5C 06 F6 | 	mov	arg01, #100
01cfc     50 44 B0 FD | 	call	#__system___waitus
01d00     03 00 00 FF 
01d04     BC 0F 06 F1 | 	add	objptr, ##1980
01d08     FF FF FF FF 
01d0c     07 FF 6B FC | 	wrlong	##-1, objptr
01d10     8F 0E 86 F1 | 	sub	objptr, #143
01d14     07 7D C2 FA | 	rdbyte	local10, objptr
01d18     BF 0F 06 F1 | 	add	objptr, #447
01d1c     07 7D 62 FC | 	wrlong	local10, objptr
01d20     04 00 00 FF 
01d24     EC 0E 86 F1 | 	sub	objptr, ##2284
01d28                 | LR__0025
01d28     1D 5E 06 F6 | 	mov	arg02, #29
01d2c                 | ' 
01d2c                 | ' ''---------- Set the (x,y) position of cursor
01d2c                 | ' 
01d2c                 | ' cursor_x:=x
01d2c     34 0E 06 F1 | 	add	objptr, #52
01d30     07 0B 48 FC | 	wrbyte	#5, objptr
01d34                 | ' cursor_y:=y
01d34     01 0E 06 F1 | 	add	objptr, #1
01d38     07 3B 48 FC | 	wrbyte	#29, objptr
01d3c     02 00 00 FF 
01d40     B6 0F 06 F1 | 	add	objptr, ##1462
01d44     07 D5 C2 FA | 	rdbyte	local54, objptr
01d48     02 D4 66 F0 | 	shl	local54, #2
01d4c     01 00 00 FF 
01d50     65 0E 06 F1 | 	add	objptr, ##613
01d54     07 D5 02 F1 | 	add	local54, objptr
01d58     6A 5D 02 FB | 	rdlong	arg01, local54
01d5c     04 00 00 FF 
01d60     50 0E 86 F1 | 	sub	objptr, ##2128
01d64     EC 08 B0 FD | 	call	#_hng030rm_spin2_write
01d68     04 00 00 FF 
01d6c     D4 0E 06 F1 | 	add	objptr, ##2260
01d70     07 5D 02 FB | 	rdlong	arg01, objptr
01d74     04 00 00 FF 
01d78     D4 0E 86 F1 | 	sub	objptr, ##2260
01d7c     D4 08 B0 FD | 	call	#_hng030rm_spin2_write
01d80                 | ' 
01d80                 | ' ''---------- Set the (x,y) position of cursor
01d80                 | ' 
01d80                 | ' cursor_x:=x
01d80     34 0E 06 F1 | 	add	objptr, #52
01d84     07 03 48 FC | 	wrbyte	#1, objptr
01d88                 | ' cursor_y:=y
01d88     01 0E 06 F1 | 	add	objptr, #1
01d8c     07 3B 48 FC | 	wrbyte	#29, objptr
01d90     02 00 00 FF 
01d94     DE 0F 06 F1 | 	add	objptr, ##1502
01d98     07 5D 02 FB | 	rdlong	arg01, objptr
01d9c     10 0E 06 F1 | 	add	objptr, #16
01da0     07 D5 02 FB | 	rdlong	local54, objptr
01da4     03 00 00 FF 
01da8     23 0E 86 F1 | 	sub	objptr, ##1571
01dac     6A 5D 02 F1 | 	add	arg01, local54
01db0     03 5E 06 F6 | 	mov	arg02, #3
01db4     18 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01db8     15 5D 02 F6 | 	mov	arg01, result1
01dbc     94 08 B0 FD | 	call	#_hng030rm_spin2_write
01dc0     1D 5E 06 F6 | 	mov	arg02, #29
01dc4                 | ' 
01dc4                 | ' ''---------- Set the (x,y) position of cursor
01dc4                 | ' 
01dc4                 | ' cursor_x:=x
01dc4     34 0E 06 F1 | 	add	objptr, #52
01dc8     07 41 48 FC | 	wrbyte	#32, objptr
01dcc                 | ' cursor_y:=y
01dcc     01 0E 06 F1 | 	add	objptr, #1
01dd0     07 3B 48 FC | 	wrbyte	#29, objptr
01dd4     02 00 00 FF 
01dd8     B7 0F 06 F1 | 	add	objptr, ##1463
01ddc     07 D5 C2 FA | 	rdbyte	local54, objptr
01de0     02 D4 66 F0 | 	shl	local54, #2
01de4     01 00 00 FF 
01de8     64 0E 06 F1 | 	add	objptr, ##612
01dec     07 D5 02 F1 | 	add	local54, objptr
01df0     6A 5D 02 FB | 	rdlong	arg01, local54
01df4     04 00 00 FF 
01df8     50 0E 86 F1 | 	sub	objptr, ##2128
01dfc     54 08 B0 FD | 	call	#_hng030rm_spin2_write
01e00     04 00 00 FF 
01e04     D4 0E 06 F1 | 	add	objptr, ##2260
01e08     07 5D 02 FB | 	rdlong	arg01, objptr
01e0c     04 00 00 FF 
01e10     D4 0E 86 F1 | 	sub	objptr, ##2260
01e14     3C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e18                 | ' 
01e18                 | ' ''---------- Set the (x,y) position of cursor
01e18                 | ' 
01e18                 | ' cursor_x:=x
01e18     34 0E 06 F1 | 	add	objptr, #52
01e1c     07 39 48 FC | 	wrbyte	#28, objptr
01e20                 | ' cursor_y:=y
01e20     01 0E 06 F1 | 	add	objptr, #1
01e24     07 3B 48 FC | 	wrbyte	#29, objptr
01e28     02 00 00 FF 
01e2c     E2 0F 06 F1 | 	add	objptr, ##1506
01e30     07 5D 02 FB | 	rdlong	arg01, objptr
01e34     10 0E 06 F1 | 	add	objptr, #16
01e38     07 D5 02 FB | 	rdlong	local54, objptr
01e3c     03 00 00 FF 
01e40     27 0E 86 F1 | 	sub	objptr, ##1575
01e44     6A 5D 02 F1 | 	add	arg01, local54
01e48     03 5E 06 F6 | 	mov	arg02, #3
01e4c     80 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e50     15 5D 02 F6 | 	mov	arg01, result1
01e54     FC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e58     1D 5E 06 F6 | 	mov	arg02, #29
01e5c                 | ' 
01e5c                 | ' ''---------- Set the (x,y) position of cursor
01e5c                 | ' 
01e5c                 | ' cursor_x:=x
01e5c     34 0E 06 F1 | 	add	objptr, #52
01e60     07 79 48 FC | 	wrbyte	#60, objptr
01e64                 | ' cursor_y:=y
01e64     01 0E 06 F1 | 	add	objptr, #1
01e68     07 3B 48 FC | 	wrbyte	#29, objptr
01e6c     02 00 00 FF 
01e70     B8 0F 06 F1 | 	add	objptr, ##1464
01e74     07 D5 C2 FA | 	rdbyte	local54, objptr
01e78     02 D4 66 F0 | 	shl	local54, #2
01e7c     01 00 00 FF 
01e80     63 0E 06 F1 | 	add	objptr, ##611
01e84     07 D5 02 F1 | 	add	local54, objptr
01e88     6A 5D 02 FB | 	rdlong	arg01, local54
01e8c     04 00 00 FF 
01e90     50 0E 86 F1 | 	sub	objptr, ##2128
01e94     BC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e98     04 00 00 FF 
01e9c     D4 0E 06 F1 | 	add	objptr, ##2260
01ea0     07 5D 02 FB | 	rdlong	arg01, objptr
01ea4     04 00 00 FF 
01ea8     D4 0E 86 F1 | 	sub	objptr, ##2260
01eac     A4 07 B0 FD | 	call	#_hng030rm_spin2_write
01eb0                 | ' 
01eb0                 | ' ''---------- Set the (x,y) position of cursor
01eb0                 | ' 
01eb0                 | ' cursor_x:=x
01eb0     34 0E 06 F1 | 	add	objptr, #52
01eb4     07 71 48 FC | 	wrbyte	#56, objptr
01eb8                 | ' cursor_y:=y
01eb8     01 0E 06 F1 | 	add	objptr, #1
01ebc     07 3B 48 FC | 	wrbyte	#29, objptr
01ec0     02 00 00 FF 
01ec4     E6 0F 06 F1 | 	add	objptr, ##1510
01ec8     07 5D 02 FB | 	rdlong	arg01, objptr
01ecc     10 0E 06 F1 | 	add	objptr, #16
01ed0     07 D5 02 FB | 	rdlong	local54, objptr
01ed4     03 00 00 FF 
01ed8     2B 0E 86 F1 | 	sub	objptr, ##1579
01edc     6A 5D 02 F1 | 	add	arg01, local54
01ee0     03 5E 06 F6 | 	mov	arg02, #3
01ee4     E8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ee8     15 5D 02 F6 | 	mov	arg01, result1
01eec     64 07 B0 FD | 	call	#_hng030rm_spin2_write
01ef0                 | ' 
01ef0                 | ' ''---------- Set the (x,y) position of cursor
01ef0                 | ' 
01ef0                 | ' cursor_x:=x
01ef0     34 0E 06 F1 | 	add	objptr, #52
01ef4     07 A9 48 FC | 	wrbyte	#84, objptr
01ef8                 | ' cursor_y:=y
01ef8     01 0E 06 F1 | 	add	objptr, #1
01efc     07 3B 48 FC | 	wrbyte	#29, objptr
01f00     02 00 00 FF 
01f04     EA 0F 06 F1 | 	add	objptr, ##1514
01f08     07 5D 02 FB | 	rdlong	arg01, objptr
01f0c     10 0E 06 F1 | 	add	objptr, #16
01f10     07 D5 02 FB | 	rdlong	local54, objptr
01f14     03 00 00 FF 
01f18     2F 0E 86 F1 | 	sub	objptr, ##1583
01f1c     6A 5D 02 F1 | 	add	arg01, local54
01f20     03 5E 06 F6 | 	mov	arg02, #3
01f24     A8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01f28     15 5D 02 F6 | 	mov	arg01, result1
01f2c     24 07 B0 FD | 	call	#_hng030rm_spin2_write
01f30     1D 5E 06 F6 | 	mov	arg02, #29
01f34                 | ' 
01f34                 | ' ''---------- Set the (x,y) position of cursor
01f34                 | ' 
01f34                 | ' cursor_x:=x
01f34     34 0E 06 F1 | 	add	objptr, #52
01f38     07 B1 48 FC | 	wrbyte	#88, objptr
01f3c                 | ' cursor_y:=y
01f3c     01 0E 06 F1 | 	add	objptr, #1
01f40     07 3B 48 FC | 	wrbyte	#29, objptr
01f44     02 00 00 FF 
01f48     B9 0F 06 F1 | 	add	objptr, ##1465
01f4c     07 D5 C2 FA | 	rdbyte	local54, objptr
01f50     02 D4 66 F0 | 	shl	local54, #2
01f54     01 00 00 FF 
01f58     62 0E 06 F1 | 	add	objptr, ##610
01f5c     07 D5 02 F1 | 	add	local54, objptr
01f60     6A 5D 02 FB | 	rdlong	arg01, local54
01f64     04 00 00 FF 
01f68     50 0E 86 F1 | 	sub	objptr, ##2128
01f6c     E4 06 B0 FD | 	call	#_hng030rm_spin2_write
01f70     04 00 00 FF 
01f74     D4 0E 06 F1 | 	add	objptr, ##2260
01f78     07 5D 02 FB | 	rdlong	arg01, objptr
01f7c     04 00 00 FF 
01f80     D4 0E 86 F1 | 	sub	objptr, ##2260
01f84     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01f88     E4 F8 9F FD | 	jmp	#LR__0016
01f8c     AF F0 03 F6 | 	mov	ptra, fp
01f90     BF 00 A0 FD | 	call	#popregs_
01f94                 | _program_ret
01f94     2D 00 64 FD | 	ret
01f98                 | 
01f98                 | ' 
01f98                 | ' 
01f98                 | ' ''---------- putpixel - put a pixel on the screen
01f98                 | ' 
01f98                 | ' pub putpixel1(x,y,c) |byte b
01f98                 | _hng030rm_spin2_putpixel1
01f98                 | ' 
01f98                 | ' 
01f98                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f98     00 30 06 F6 | 	mov	_var01, #0
01f9c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
01fa0     01 30 66 36 |  if_ae	neg	_var01, #1
01fa4     00 32 06 F6 | 	mov	_var02, #0
01fa8     90 0E 06 F1 | 	add	objptr, #144
01fac     07 35 02 FB | 	rdlong	_var03, objptr
01fb0     05 34 66 F0 | 	shl	_var03, #5
01fb4     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
01fb8     01 32 66 C6 |  if_b	neg	_var02, #1
01fbc     19 31 02 F5 | 	and	_var01, _var02
01fc0     00 36 06 F6 | 	mov	_var04, #0
01fc4     00 5E 5E F2 | 	cmps	arg02, #0 wcz
01fc8     01 36 66 36 |  if_ae	neg	_var04, #1
01fcc     1B 31 02 F5 | 	and	_var01, _var04
01fd0     00 38 06 F6 | 	mov	_var05, #0
01fd4     04 0E 06 F1 | 	add	objptr, #4
01fd8     07 3B 02 FB | 	rdlong	_var06, objptr
01fdc     94 0E 86 F1 | 	sub	objptr, #148
01fe0     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
01fe4     01 38 66 C6 |  if_b	neg	_var05, #1
01fe8     1C 31 CA F7 | 	test	_var01, _var05 wz
01fec     8C 00 90 AD |  if_e	jmp	#LR__0028
01ff0     90 0E 06 F1 | 	add	objptr, #144
01ff4     07 3D 02 FB | 	rdlong	_var07, objptr
01ff8     90 0E 86 F1 | 	sub	objptr, #144
01ffc     02 3C 66 F0 | 	shl	_var07, #2
02000     2F 3D 02 FD | 	qmul	_var07, arg02
02004     18 3E 62 FD | 	getqx	_var08
02008     07 41 02 FB | 	rdlong	_var09, objptr
0200c     1F 41 02 F1 | 	add	_var09, _var08
02010     2E 43 02 F6 | 	mov	_var10, arg01
02014     03 42 46 F0 | 	shr	_var10, #3
02018     21 41 02 F1 | 	add	_var09, _var10
0201c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
0201c     20 45 C2 FA | 	rdbyte	_var11, _var09
02020                 | '     if (c==0)
02020     00 60 0E F2 | 	cmp	arg03, #0 wz
02024     18 00 90 5D |  if_ne	jmp	#LR__0026
02028     2E 31 52 F6 | 	abs	_var01, arg01 wc
0202c     07 30 06 F5 | 	and	_var01, #7
02030     18 31 62 C6 |  if_b	neg	_var01, _var01
02034     18 47 C2 F9 | 	decod	_var12, _var01
02038                 | '       b:=b & !(1<<(x//8))
02038     23 45 22 F5 | 	andn	_var11, _var12
0203c                 | '     else
0203c     14 00 90 FD | 	jmp	#LR__0027
02040                 | LR__0026
02040     2E 31 52 F6 | 	abs	_var01, arg01 wc
02044     07 30 06 F5 | 	and	_var01, #7
02048     18 31 62 C6 |  if_b	neg	_var01, _var01
0204c     18 49 C2 F9 | 	decod	_var13, _var01
02050                 | '       b:=b |(1<<(x//8))
02050     24 45 42 F5 | 	or	_var11, _var13
02054                 | LR__0027
02054     90 0E 06 F1 | 	add	objptr, #144
02058     07 4B 02 FB | 	rdlong	_var14, objptr
0205c     90 0E 86 F1 | 	sub	objptr, #144
02060     02 4A 66 F0 | 	shl	_var14, #2
02064     2F 4B 02 FD | 	qmul	_var14, arg02
02068     18 4C 62 FD | 	getqx	_var15
0206c     07 4F 02 FB | 	rdlong	_var16, objptr
02070     26 4F 02 F1 | 	add	_var16, _var15
02074     21 4F 02 F1 | 	add	_var16, _var10
02078                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02078     27 45 42 FC | 	wrbyte	_var11, _var16
0207c                 | LR__0028
0207c                 | _hng030rm_spin2_putpixel1_ret
0207c     2D 00 64 FD | 	ret
02080                 | 
02080                 | ' 
02080                 | ' 
02080                 | ' pub putpixel2(x,y,c) |byte b
02080                 | _hng030rm_spin2_putpixel2
02080                 | ' 
02080                 | ' 
02080                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02080     00 30 06 F6 | 	mov	_var01, #0
02084     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02088     01 30 66 36 |  if_ae	neg	_var01, #1
0208c     00 32 06 F6 | 	mov	_var02, #0
02090     90 0E 06 F1 | 	add	objptr, #144
02094     07 35 02 FB | 	rdlong	_var03, objptr
02098     04 34 66 F0 | 	shl	_var03, #4
0209c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
020a0     01 32 66 C6 |  if_b	neg	_var02, #1
020a4     19 31 02 F5 | 	and	_var01, _var02
020a8     00 36 06 F6 | 	mov	_var04, #0
020ac     00 5E 5E F2 | 	cmps	arg02, #0 wcz
020b0     01 36 66 36 |  if_ae	neg	_var04, #1
020b4     1B 31 02 F5 | 	and	_var01, _var04
020b8     00 38 06 F6 | 	mov	_var05, #0
020bc     04 0E 06 F1 | 	add	objptr, #4
020c0     07 3B 02 FB | 	rdlong	_var06, objptr
020c4     94 0E 86 F1 | 	sub	objptr, #148
020c8     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
020cc     01 38 66 C6 |  if_b	neg	_var05, #1
020d0     1C 31 CA F7 | 	test	_var01, _var05 wz
020d4     7C 00 90 AD |  if_e	jmp	#LR__0029
020d8     90 0E 06 F1 | 	add	objptr, #144
020dc     07 3D 02 FB | 	rdlong	_var07, objptr
020e0     90 0E 86 F1 | 	sub	objptr, #144
020e4     02 3C 66 F0 | 	shl	_var07, #2
020e8     2F 3D 02 FD | 	qmul	_var07, arg02
020ec     18 3E 62 FD | 	getqx	_var08
020f0     07 41 02 FB | 	rdlong	_var09, objptr
020f4     1F 41 02 F1 | 	add	_var09, _var08
020f8     2E 43 02 F6 | 	mov	_var10, arg01
020fc     02 42 46 F0 | 	shr	_var10, #2
02100     21 41 02 F1 | 	add	_var09, _var10
02104                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02104     20 45 C2 FA | 	rdbyte	_var11, _var09
02108     2E 31 52 F6 | 	abs	_var01, arg01 wc
0210c     03 30 06 F5 | 	and	_var01, #3
02110     18 31 62 C6 |  if_b	neg	_var01, _var01
02114     01 30 66 F0 | 	shl	_var01, #1
02118     03 46 06 F6 | 	mov	_var12, #3
0211c     18 47 62 F0 | 	shl	_var12, _var01
02120                 | '     b:=b & !(%11<<((x//4)<<1))
02120     23 45 22 F5 | 	andn	_var11, _var12
02124     18 61 62 F0 | 	shl	arg03, _var01
02128                 | '     b:=b |(c<<((x//4)<<1))
02128     30 45 42 F5 | 	or	_var11, arg03
0212c     90 0E 06 F1 | 	add	objptr, #144
02130     07 49 02 FB | 	rdlong	_var13, objptr
02134     90 0E 86 F1 | 	sub	objptr, #144
02138     02 48 66 F0 | 	shl	_var13, #2
0213c     2F 49 02 FD | 	qmul	_var13, arg02
02140     18 4A 62 FD | 	getqx	_var14
02144     07 4D 02 FB | 	rdlong	_var15, objptr
02148     25 4D 02 F1 | 	add	_var15, _var14
0214c     21 4D 02 F1 | 	add	_var15, _var10
02150                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02150     26 45 42 FC | 	wrbyte	_var11, _var15
02154                 | LR__0029
02154                 | _hng030rm_spin2_putpixel2_ret
02154     2D 00 64 FD | 	ret
02158                 | 
02158                 | ' 
02158                 | ' 
02158                 | ' pub putpixel4(x,y,c) |byte b
02158                 | _hng030rm_spin2_putpixel4
02158                 | ' 
02158                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02158     00 30 06 F6 | 	mov	_var01, #0
0215c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02160     01 30 66 36 |  if_ae	neg	_var01, #1
02164     00 32 06 F6 | 	mov	_var02, #0
02168     90 0E 06 F1 | 	add	objptr, #144
0216c     07 35 02 FB | 	rdlong	_var03, objptr
02170     04 34 66 F0 | 	shl	_var03, #4
02174     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02178     01 32 66 C6 |  if_b	neg	_var02, #1
0217c     19 31 02 F5 | 	and	_var01, _var02
02180     00 36 06 F6 | 	mov	_var04, #0
02184     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02188     01 36 66 36 |  if_ae	neg	_var04, #1
0218c     1B 31 02 F5 | 	and	_var01, _var04
02190     00 38 06 F6 | 	mov	_var05, #0
02194     04 0E 06 F1 | 	add	objptr, #4
02198     07 3B 02 FB | 	rdlong	_var06, objptr
0219c     94 0E 86 F1 | 	sub	objptr, #148
021a0     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
021a4     01 38 66 C6 |  if_b	neg	_var05, #1
021a8     1C 31 CA F7 | 	test	_var01, _var05 wz
021ac     7C 00 90 AD |  if_e	jmp	#LR__0030
021b0     90 0E 06 F1 | 	add	objptr, #144
021b4     07 3D 02 FB | 	rdlong	_var07, objptr
021b8     90 0E 86 F1 | 	sub	objptr, #144
021bc     02 3C 66 F0 | 	shl	_var07, #2
021c0     2F 3D 02 FD | 	qmul	_var07, arg02
021c4     18 3E 62 FD | 	getqx	_var08
021c8     07 41 02 FB | 	rdlong	_var09, objptr
021cc     1F 41 02 F1 | 	add	_var09, _var08
021d0     2E 43 02 F6 | 	mov	_var10, arg01
021d4     01 42 46 F0 | 	shr	_var10, #1
021d8     21 41 02 F1 | 	add	_var09, _var10
021dc                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
021dc     20 45 C2 FA | 	rdbyte	_var11, _var09
021e0     2E 31 52 F6 | 	abs	_var01, arg01 wc
021e4     01 30 06 F5 | 	and	_var01, #1
021e8     18 31 62 C6 |  if_b	neg	_var01, _var01
021ec     02 30 66 F0 | 	shl	_var01, #2
021f0     0F 46 06 F6 | 	mov	_var12, #15
021f4     18 47 62 F0 | 	shl	_var12, _var01
021f8                 | '     b:=b & !(%1111<<((x//2)<<2))
021f8     23 45 22 F5 | 	andn	_var11, _var12
021fc     18 61 62 F0 | 	shl	arg03, _var01
02200                 | '     b:=b |(c<<((x//2)<<2))
02200     30 45 42 F5 | 	or	_var11, arg03
02204     90 0E 06 F1 | 	add	objptr, #144
02208     07 49 02 FB | 	rdlong	_var13, objptr
0220c     90 0E 86 F1 | 	sub	objptr, #144
02210     02 48 66 F0 | 	shl	_var13, #2
02214     2F 49 02 FD | 	qmul	_var13, arg02
02218     18 4A 62 FD | 	getqx	_var14
0221c     07 4D 02 FB | 	rdlong	_var15, objptr
02220     25 4D 02 F1 | 	add	_var15, _var14
02224     21 4D 02 F1 | 	add	_var15, _var10
02228                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02228     26 45 42 FC | 	wrbyte	_var11, _var15
0222c                 | LR__0030
0222c                 | _hng030rm_spin2_putpixel4_ret
0222c     2D 00 64 FD | 	ret
02230                 | 
02230                 | ' 
02230                 | ' 
02230                 | ' pub putpixel8(x,y,c)
02230                 | _hng030rm_spin2_putpixel8
02230                 | ' 
02230                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02230     00 30 06 F6 | 	mov	_var01, #0
02234     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02238     01 30 66 36 |  if_ae	neg	_var01, #1
0223c     00 32 06 F6 | 	mov	_var02, #0
02240     90 0E 06 F1 | 	add	objptr, #144
02244     07 35 02 FB | 	rdlong	_var03, objptr
02248     02 34 66 F0 | 	shl	_var03, #2
0224c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02250     01 32 66 C6 |  if_b	neg	_var02, #1
02254     19 31 02 F5 | 	and	_var01, _var02
02258     00 36 06 F6 | 	mov	_var04, #0
0225c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02260     01 36 66 36 |  if_ae	neg	_var04, #1
02264     1B 31 02 F5 | 	and	_var01, _var04
02268     00 38 06 F6 | 	mov	_var05, #0
0226c     04 0E 06 F1 | 	add	objptr, #4
02270     07 3B 02 FB | 	rdlong	_var06, objptr
02274     94 0E 86 F1 | 	sub	objptr, #148
02278     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
0227c     01 38 66 C6 |  if_b	neg	_var05, #1
02280     1C 31 CA F7 | 	test	_var01, _var05 wz
02284     28 00 90 AD |  if_e	jmp	#LR__0031
02288     90 0E 06 F1 | 	add	objptr, #144
0228c     07 3D 02 FB | 	rdlong	_var07, objptr
02290     90 0E 86 F1 | 	sub	objptr, #144
02294     02 3C 66 F0 | 	shl	_var07, #2
02298     2F 3D 02 FD | 	qmul	_var07, arg02
0229c     18 3E 62 FD | 	getqx	_var08
022a0     07 41 02 FB | 	rdlong	_var09, objptr
022a4     1F 41 02 F1 | 	add	_var09, _var08
022a8     2E 41 02 F1 | 	add	_var09, arg01
022ac                 | '     byte[buf_ptr+4*cpl*y+x]:=c
022ac     20 61 42 FC | 	wrbyte	arg03, _var09
022b0                 | LR__0031
022b0                 | _hng030rm_spin2_putpixel8_ret
022b0     2D 00 64 FD | 	ret
022b4                 | 
022b4                 | ' 
022b4                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
022b4                 | ' 
022b4                 | ' pub setbordercolor(r,g,b) | color
022b4                 | _hng030rm_spin2_setbordercolor
022b4     18 5C 66 F0 | 	shl	arg01, #24
022b8     10 5E 66 F0 | 	shl	arg02, #16
022bc     2F 5D 02 F1 | 	add	arg01, arg02
022c0     08 60 66 F0 | 	shl	arg03, #8
022c4     30 5D 02 F1 | 	add	arg01, arg03
022c8                 | ' 
022c8                 | ' color:=r<<24+g<<16+b<<8
022c8                 | ' bordercolor:=color
022c8     2C 0E 06 F1 | 	add	objptr, #44
022cc     07 5D 62 FC | 	wrlong	arg01, objptr
022d0     2C 0E 86 F1 | 	sub	objptr, #44
022d4                 | _hng030rm_spin2_setbordercolor_ret
022d4     2D 00 64 FD | 	ret
022d8                 | 
022d8                 | ' 
022d8                 | ' 
022d8                 | ' '*************************************************************************
022d8                 | ' '                                                                        *
022d8                 | ' '  Text functions                                                        *
022d8                 | ' '                                                                        *
022d8                 | ' '*************************************************************************
022d8                 | ' 
022d8                 | ' ''---------- Clear the screen, set its foreground/background color
022d8                 | ' 
022d8                 | ' pub cls(fc,bc)   :c
022d8                 | _hng030rm_spin2_cls
022d8     07 5A 05 F6 | 	mov	COUNT_, #7
022dc     B0 00 A0 FD | 	call	#pushregs_
022e0     2E 6B 02 F6 | 	mov	local01, arg01
022e4     2F 6D 02 F6 | 	mov	local02, arg02
022e8                 | ' 
022e8                 | ' if (graphmode<512)
022e8     C4 0E 06 F1 | 	add	objptr, #196
022ec     07 6F 02 FB | 	rdlong	local03, objptr
022f0     C4 0E 86 F1 | 	sub	objptr, #196
022f4     01 00 00 FF 
022f8     00 6E 5E F2 | 	cmps	local03, ##512 wcz
022fc     34 00 90 3D |  if_ae	jmp	#LR__0032
02300     35 71 02 F6 | 	mov	local04, local01
02304     18 70 66 F0 | 	shl	local04, #24
02308     36 73 02 F6 | 	mov	local05, local02
0230c     10 72 66 F0 | 	shl	local05, #16
02310     39 71 02 F1 | 	add	local04, local05
02314     20 70 06 F1 | 	add	local04, #32
02318                 | '   c:=fc<<24+bc<<16+$20
02318                 | '   longfill(buf_ptr,c,buflen)
02318     07 5D 02 FB | 	rdlong	arg01, objptr
0231c     30 0E 06 F1 | 	add	objptr, #48
02320     07 61 02 FB | 	rdlong	arg03, objptr
02324     30 0E 86 F1 | 	sub	objptr, #48
02328     38 5F 02 F6 | 	mov	arg02, local04
0232c     A8 00 A0 FD | 	call	#\builtin_longfill_
02330                 | ' else
02330     AC 00 90 FD | 	jmp	#LR__0038
02334                 | LR__0032
02334                 | '   if (graphmode & 48) ==48
02334     C4 0E 06 F1 | 	add	objptr, #196
02338     07 6F 02 FB | 	rdlong	local03, objptr
0233c     C4 0E 86 F1 | 	sub	objptr, #196
02340     30 6E 06 F5 | 	and	local03, #48
02344     30 6E 0E F2 | 	cmp	local03, #48 wz
02348                 | '     c:=bc
02348     36 71 02 A6 |  if_e	mov	local04, local02
0234c     74 00 90 AD |  if_e	jmp	#LR__0037
02350                 | '   elseif (graphmode & 48) ==32
02350     C4 0E 06 F1 | 	add	objptr, #196
02354     07 6F 02 FB | 	rdlong	local03, objptr
02358     C4 0E 86 F1 | 	sub	objptr, #196
0235c     30 6E 06 F5 | 	and	local03, #48
02360     20 6E 0E F2 | 	cmp	local03, #32 wz
02364     10 00 90 5D |  if_ne	jmp	#LR__0033
02368     36 71 02 F6 | 	mov	local04, local02
0236c     04 70 66 F0 | 	shl	local04, #4
02370     36 71 02 F1 | 	add	local04, local02
02374                 | '     c:=bc<<4+bc
02374     4C 00 90 FD | 	jmp	#LR__0036
02378                 | LR__0033
02378                 | '   elseif (graphmode & 48) ==16
02378     C4 0E 06 F1 | 	add	objptr, #196
0237c     07 6F 02 FB | 	rdlong	local03, objptr
02380     C4 0E 86 F1 | 	sub	objptr, #196
02384     30 6E 06 F5 | 	and	local03, #48
02388     10 6E 0E F2 | 	cmp	local03, #16 wz
0238c     28 00 90 5D |  if_ne	jmp	#LR__0034
02390     36 71 02 F6 | 	mov	local04, local02
02394     06 70 66 F0 | 	shl	local04, #6
02398     36 75 02 F6 | 	mov	local06, local02
0239c     04 74 66 F0 | 	shl	local06, #4
023a0     3A 71 02 F1 | 	add	local04, local06
023a4     36 77 02 F6 | 	mov	local07, local02
023a8     02 76 66 F0 | 	shl	local07, #2
023ac     3B 71 02 F1 | 	add	local04, local07
023b0     36 71 02 F1 | 	add	local04, local02
023b4                 | '     c:=bc<<6+bc<<4+bc<<2+bc
023b4                 | '   else
023b4     0C 00 90 FD | 	jmp	#LR__0035
023b8                 | LR__0034
023b8                 | '     if bc==1
023b8     01 6C 0E F2 | 	cmp	local02, #1 wz
023bc                 | '       c:=255
023bc     FF 70 06 A6 |  if_e	mov	local04, #255
023c0                 | '     else
023c0                 | '       c:=0
023c0     00 70 06 56 |  if_ne	mov	local04, #0
023c4                 | LR__0035
023c4                 | LR__0036
023c4                 | LR__0037
023c4     30 0E 06 F1 | 	add	objptr, #48
023c8     07 61 02 FB | 	rdlong	arg03, objptr
023cc     30 0E 86 F1 | 	sub	objptr, #48
023d0     02 60 66 F0 | 	shl	arg03, #2
023d4                 | '   bytefill(buf_ptr,c,buflen*4)
023d4     07 5D 02 FB | 	rdlong	arg01, objptr
023d8     38 5F 02 F6 | 	mov	arg02, local04
023dc     A0 00 A0 FD | 	call	#\builtin_bytefill_
023e0                 | LR__0038
023e0                 | ' setwritecolors(fc,bc)
023e0                 | ' 
023e0                 | ' 
023e0                 | ' write_color:=ff
023e0     38 0E 06 F1 | 	add	objptr, #56
023e4     07 6B 62 FC | 	wrlong	local01, objptr
023e8                 | ' write_background:=bb
023e8     04 0E 06 F1 | 	add	objptr, #4
023ec     07 6D 62 FC | 	wrlong	local02, objptr
023f0                 | ' cursor_x:=0
023f0     08 0E 86 F1 | 	sub	objptr, #8
023f4     07 01 48 FC | 	wrbyte	#0, objptr
023f8                 | ' cursor_y:=0
023f8     01 0E 06 F1 | 	add	objptr, #1
023fc     07 01 48 FC | 	wrbyte	#0, objptr
02400     35 0E 86 F1 | 	sub	objptr, #53
02404     38 2B 02 F6 | 	mov	result1, local04
02408     AF F0 03 F6 | 	mov	ptra, fp
0240c     BF 00 A0 FD | 	call	#popregs_
02410                 | _hng030rm_spin2_cls_ret
02410     2D 00 64 FD | 	ret
02414                 | 
02414                 | ' 
02414                 | ' ''--------- Output a string at position x,y without changing colors
02414                 | ' 
02414                 | ' pub outtextxy(x,y,text) | iii
02414                 | _hng030rm_spin2_outtextxy
02414     0B 5A 05 F6 | 	mov	COUNT_, #11
02418     B0 00 A0 FD | 	call	#pushregs_
0241c     2E 6B 02 F6 | 	mov	local01, arg01
02420                 | ' 
02420                 | ' repeat iii from 0 to strsize(text)-1
02420     00 6C 06 F6 | 	mov	local02, #0
02424     30 5D 02 F6 | 	mov	arg01, arg03
02428     00 6E 06 F6 | 	mov	local03, #0
0242c     E0 DB 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
02430     93 00 A0 FD | 	call	#FCACHE_LOAD_
02434                 | LR__0039
02434     2E 71 CA FA | 	rdbyte	local04, arg01 wz
02438     01 6E 06 51 |  if_ne	add	local03, #1
0243c     01 5C 06 51 |  if_ne	add	arg01, #1
02440     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
02444                 | LR__0040
02444     37 2B 02 F6 | 	mov	result1, local03
02448     15 73 02 F6 | 	mov	local05, result1
0244c     01 72 86 F1 | 	sub	local05, #1
02450     00 72 5E F2 | 	cmps	local05, #0 wcz
02454     01 74 06 16 |  if_a	mov	local06, #1
02458     01 74 66 E6 |  if_be	neg	local06, #1
0245c     3A 73 02 F1 | 	add	local05, local06
02460     EC DB 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
02464     93 00 A0 FD | 	call	#FCACHE_LOAD_
02468                 | LR__0041
02468     90 0E 06 F1 | 	add	objptr, #144
0246c     07 77 02 FB | 	rdlong	local07, objptr
02470     90 0E 86 F1 | 	sub	objptr, #144
02474     2F 77 02 FD | 	qmul	local07, arg02
02478     18 78 62 FD | 	getqx	local08
0247c     35 79 02 F1 | 	add	local08, local01
02480     36 79 02 F1 | 	add	local08, local02
02484     02 78 66 F0 | 	shl	local08, #2
02488     07 7B 02 FB | 	rdlong	local09, objptr
0248c     3C 7B 02 F1 | 	add	local09, local08
02490     3D 7D 02 FB | 	rdlong	local10, local09
02494     FF 7C 26 F5 | 	andn	local10, #255
02498     30 7F 02 F6 | 	mov	local11, arg03
0249c     36 7F 02 F1 | 	add	local11, local02
024a0     3F 77 C2 FA | 	rdbyte	local07, local11
024a4     3B 7D 42 F5 | 	or	local10, local07
024a8                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
024a8     3D 7D 62 FC | 	wrlong	local10, local09
024ac     3A 6D 02 F1 | 	add	local02, local06
024b0     39 6D 0A F2 | 	cmp	local02, local05 wz
024b4     B0 FF 9F 5D |  if_ne	jmp	#LR__0041
024b8                 | LR__0042
024b8     AF F0 03 F6 | 	mov	ptra, fp
024bc     BF 00 A0 FD | 	call	#popregs_
024c0                 | _hng030rm_spin2_outtextxy_ret
024c0     2D 00 64 FD | 	ret
024c4                 | 
024c4                 | ' 
024c4                 | ' ''---------- Output a char at the cursor position, move the cursor
024c4                 | ' 
024c4                 | ' pub putchar(achar) | c,x,y
024c4                 | _hng030rm_spin2_putchar
024c4     12 5A 05 F6 | 	mov	COUNT_, #18
024c8     B0 00 A0 FD | 	call	#pushregs_
024cc     2E 6B 02 F6 | 	mov	local01, arg01
024d0                 | ' 
024d0                 | ' if achar==10
024d0     0A 6A 0E F2 | 	cmp	local01, #10 wz
024d4     58 00 90 5D |  if_ne	jmp	#LR__0043
024d8                 | '   crlf()
024d8                 | ' 
024d8                 | ' cursor_x:=0
024d8     34 0E 06 F1 | 	add	objptr, #52
024dc     07 01 48 FC | 	wrbyte	#0, objptr
024e0                 | ' cursor_y+=1
024e0     01 0E 06 F1 | 	add	objptr, #1
024e4     07 6D C2 FA | 	rdbyte	local02, objptr
024e8     01 6C 06 F1 | 	add	local02, #1
024ec     07 6D 42 FC | 	wrbyte	local02, objptr
024f0                 | ' if cursor_y>lines-1
024f0     5F 0E 06 F1 | 	add	objptr, #95
024f4     07 6D 02 FB | 	rdlong	local02, objptr
024f8     01 6C 86 F1 | 	sub	local02, #1
024fc     5F 0E 86 F1 | 	sub	objptr, #95
02500     07 6F C2 FA | 	rdbyte	local03, objptr
02504     35 0E 86 F1 | 	sub	objptr, #53
02508     36 6F 5A F2 | 	cmps	local03, local02 wcz
0250c     38 01 90 ED |  if_be	jmp	#LR__0046
02510                 | '   scrollup()
02510     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02514     94 0E 06 F1 | 	add	objptr, #148
02518     07 71 02 FB | 	rdlong	local04, objptr
0251c     01 70 86 F1 | 	sub	local04, #1
02520                 | '   cursor_y:=lines-1
02520     5F 0E 86 F1 | 	sub	objptr, #95
02524     07 71 42 FC | 	wrbyte	local04, objptr
02528     35 0E 86 F1 | 	sub	objptr, #53
0252c                 | ' else  
0252c     18 01 90 FD | 	jmp	#LR__0046
02530                 | LR__0043
02530                 | '   x:=cursor_x
02530     34 0E 06 F1 | 	add	objptr, #52
02534     07 73 C2 FA | 	rdbyte	local05, objptr
02538                 | '   y:=cursor_y
02538     01 0E 06 F1 | 	add	objptr, #1
0253c     07 75 C2 FA | 	rdbyte	local06, objptr
02540     03 0E 06 F1 | 	add	objptr, #3
02544     07 77 02 FB | 	rdlong	local07, objptr
02548     18 76 66 F0 | 	shl	local07, #24
0254c     04 0E 06 F1 | 	add	objptr, #4
02550     07 79 02 FB | 	rdlong	local08, objptr
02554     10 78 66 F0 | 	shl	local08, #16
02558     3C 77 02 F1 | 	add	local07, local08
0255c                 | '   c:=write_color<<24+write_background<<16
0255c     54 0E 06 F1 | 	add	objptr, #84
02560     07 7B 02 FB | 	rdlong	local09, objptr
02564     90 0E 86 F1 | 	sub	objptr, #144
02568     3A 7B 02 FD | 	qmul	local09, local06
0256c     18 7C 62 FD | 	getqx	local10
02570     39 7D 02 F1 | 	add	local10, local05
02574     02 7C 66 F0 | 	shl	local10, #2
02578     07 7F 02 FB | 	rdlong	local11, objptr
0257c     3E 7F 02 F1 | 	add	local11, local10
02580     3F 81 02 FB | 	rdlong	local12, local11
02584     7F 00 00 FF 
02588     FF 81 06 F5 | 	and	local12, ##65535
0258c     3B 81 42 F5 | 	or	local12, local07
02590                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02590     3F 81 62 FC | 	wrlong	local12, local11
02594     90 0E 06 F1 | 	add	objptr, #144
02598     07 7B 02 FB | 	rdlong	local09, objptr
0259c     90 0E 86 F1 | 	sub	objptr, #144
025a0     3A 7B 02 FD | 	qmul	local09, local06
025a4     18 82 62 FD | 	getqx	local13
025a8     39 83 02 F1 | 	add	local13, local05
025ac     02 82 66 F0 | 	shl	local13, #2
025b0     07 85 02 FB | 	rdlong	local14, objptr
025b4     41 85 02 F1 | 	add	local14, local13
025b8     42 87 02 FB | 	rdlong	local15, local14
025bc     FF 86 26 F5 | 	andn	local15, #255
025c0     FF 6A 06 F5 | 	and	local01, #255
025c4     35 87 42 F5 | 	or	local15, local01
025c8                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
025c8     42 87 62 FC | 	wrlong	local15, local14
025cc                 | '   cursor_x+=1
025cc     34 0E 06 F1 | 	add	objptr, #52
025d0     07 89 C2 FA | 	rdbyte	local16, objptr
025d4     01 88 06 F1 | 	add	local16, #1
025d8     07 89 42 FC | 	wrbyte	local16, objptr
025dc                 | '   if cursor_x==cpl
025dc     07 89 C2 FA | 	rdbyte	local16, objptr
025e0     5C 0E 06 F1 | 	add	objptr, #92
025e4     07 8B 02 FB | 	rdlong	local17, objptr
025e8     90 0E 86 F1 | 	sub	objptr, #144
025ec     45 89 0A F2 | 	cmp	local16, local17 wz
025f0     54 00 90 5D |  if_ne	jmp	#LR__0045
025f4                 | '     cursor_x:=0
025f4     34 0E 06 F1 | 	add	objptr, #52
025f8     07 01 48 FC | 	wrbyte	#0, objptr
025fc                 | '     cursor_y+=1
025fc     01 0E 06 F1 | 	add	objptr, #1
02600     07 89 C2 FA | 	rdbyte	local16, objptr
02604     01 88 06 F1 | 	add	local16, #1
02608     07 89 42 FC | 	wrbyte	local16, objptr
0260c                 | '     if cursor_y>lines-1
0260c     5F 0E 06 F1 | 	add	objptr, #95
02610     07 89 02 FB | 	rdlong	local16, objptr
02614     01 88 86 F1 | 	sub	local16, #1
02618     5F 0E 86 F1 | 	sub	objptr, #95
0261c     07 8B C2 FA | 	rdbyte	local17, objptr
02620     35 0E 86 F1 | 	sub	objptr, #53
02624     44 8B 5A F2 | 	cmps	local17, local16 wcz
02628     1C 00 90 ED |  if_be	jmp	#LR__0044
0262c                 | '       scrollup()
0262c     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02630     94 0E 06 F1 | 	add	objptr, #148
02634     07 8D 02 FB | 	rdlong	local18, objptr
02638     01 8C 86 F1 | 	sub	local18, #1
0263c                 | '       cursor_y:=lines-1
0263c     5F 0E 86 F1 | 	sub	objptr, #95
02640     07 8D 42 FC | 	wrbyte	local18, objptr
02644     35 0E 86 F1 | 	sub	objptr, #53
02648                 | LR__0044
02648                 | LR__0045
02648                 | LR__0046
02648     AF F0 03 F6 | 	mov	ptra, fp
0264c     BF 00 A0 FD | 	call	#popregs_
02650                 | _hng030rm_spin2_putchar_ret
02650     2D 00 64 FD | 	ret
02654                 | 
02654                 | ' 
02654                 | ' ''--------- Output a string at the cursor position, move the cursor
02654                 | ' 
02654                 | ' pub write(text) | iii,c,ncx,ncy
02654                 | _hng030rm_spin2_write
02654     11 5A 05 F6 | 	mov	COUNT_, #17
02658     B0 00 A0 FD | 	call	#pushregs_
0265c     2E 6B 02 F6 | 	mov	local01, arg01
02660     38 0E 06 F1 | 	add	objptr, #56
02664     07 6D 02 FB | 	rdlong	local02, objptr
02668     18 6C 66 F0 | 	shl	local02, #24
0266c     04 0E 06 F1 | 	add	objptr, #4
02670     07 6F 02 FB | 	rdlong	local03, objptr
02674     10 6E 66 F0 | 	shl	local03, #16
02678     37 6D 02 F1 | 	add	local02, local03
0267c                 | ' 
0267c                 | ' c:=write_color<<24+write_background<<16
0267c                 | ' 'debug(uhex_long(write_color))
0267c                 | ' ncy:=cursor_y
0267c     07 0E 86 F1 | 	sub	objptr, #7
02680     07 71 C2 FA | 	rdbyte	local04, objptr
02684                 | ' ncx:=cursor_x+strsize(text)
02684     01 0E 86 F1 | 	sub	objptr, #1
02688     07 73 C2 FA | 	rdbyte	local05, objptr
0268c     34 0E 86 F1 | 	sub	objptr, #52
02690     35 5D 02 F6 | 	mov	arg01, local01
02694     00 74 06 F6 | 	mov	local06, #0
02698     74 D9 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
0269c     93 00 A0 FD | 	call	#FCACHE_LOAD_
026a0                 | LR__0047
026a0     2E 77 CA FA | 	rdbyte	local07, arg01 wz
026a4     01 74 06 51 |  if_ne	add	local06, #1
026a8     01 5C 06 51 |  if_ne	add	arg01, #1
026ac     F0 FF 9F 5D |  if_ne	jmp	#LR__0047
026b0                 | LR__0048
026b0     3A 2B 02 F6 | 	mov	result1, local06
026b4     3A 73 02 F1 | 	add	local05, local06
026b8     39 79 02 F6 | 	mov	local08, local05
026bc     70 D9 9F FE | 	loc	pa,	#(@LR__0050-@LR__0049)
026c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
026c4                 | ' repeat while ncx>cpl-1
026c4                 | LR__0049
026c4     90 0E 06 F1 | 	add	objptr, #144
026c8     07 73 02 FB | 	rdlong	local05, objptr
026cc     90 0E 86 F1 | 	sub	objptr, #144
026d0     01 72 86 F1 | 	sub	local05, #1
026d4     39 79 5A F2 | 	cmps	local08, local05 wcz
026d8     18 00 90 ED |  if_be	jmp	#LR__0051
026dc                 | '   ncx-=cpl
026dc     90 0E 06 F1 | 	add	objptr, #144
026e0     07 7B 02 FB | 	rdlong	local09, objptr
026e4     90 0E 86 F1 | 	sub	objptr, #144
026e8     3D 79 82 F1 | 	sub	local08, local09
026ec                 | '   ncy+=1
026ec     01 70 06 F1 | 	add	local04, #1
026f0     D0 FF 9F FD | 	jmp	#LR__0049
026f4                 | LR__0050
026f4                 | LR__0051
026f4                 | ' repeat while ncy>lines-1
026f4                 | LR__0052
026f4     94 0E 06 F1 | 	add	objptr, #148
026f8     07 73 02 FB | 	rdlong	local05, objptr
026fc     94 0E 86 F1 | 	sub	objptr, #148
02700     01 72 86 F1 | 	sub	local05, #1
02704     39 71 5A F2 | 	cmps	local04, local05 wcz
02708     20 00 90 ED |  if_be	jmp	#LR__0053
0270c                 | '   ncy-=1
0270c     01 70 86 F1 | 	sub	local04, #1
02710                 | '   scrollup()
02710     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
02714                 | '   cursor_y-=1
02714     35 0E 06 F1 | 	add	objptr, #53
02718     07 73 C2 FA | 	rdbyte	local05, objptr
0271c     01 72 86 F1 | 	sub	local05, #1
02720     07 73 42 FC | 	wrbyte	local05, objptr
02724     35 0E 86 F1 | 	sub	objptr, #53
02728     C8 FF 9F FD | 	jmp	#LR__0052
0272c                 | LR__0053
0272c                 | ' 
0272c                 | ' repeat iii from 0 to strsize(text)-1
0272c     00 7C 06 F6 | 	mov	local10, #0
02730     35 5D 02 F6 | 	mov	arg01, local01
02734     00 74 06 F6 | 	mov	local06, #0
02738     D4 D8 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
0273c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02740                 | LR__0054
02740     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02744     01 74 06 51 |  if_ne	add	local06, #1
02748     01 5C 06 51 |  if_ne	add	arg01, #1
0274c     F0 FF 9F 5D |  if_ne	jmp	#LR__0054
02750                 | LR__0055
02750     3A 2B 02 F6 | 	mov	result1, local06
02754     15 7F 02 F6 | 	mov	local11, result1
02758     01 7E 86 F1 | 	sub	local11, #1
0275c     00 7E 5E F2 | 	cmps	local11, #0 wcz
02760     01 80 06 16 |  if_a	mov	local12, #1
02764     01 80 66 E6 |  if_be	neg	local12, #1
02768     40 7F 02 F1 | 	add	local11, local12
0276c     E8 D8 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
02770     93 00 A0 FD | 	call	#FCACHE_LOAD_
02774                 | LR__0056
02774     90 0E 06 F1 | 	add	objptr, #144
02778     07 83 02 FB | 	rdlong	local13, objptr
0277c     5B 0E 86 F1 | 	sub	objptr, #91
02780     07 85 C2 FA | 	rdbyte	local14, objptr
02784     42 83 02 FD | 	qmul	local13, local14
02788     18 86 62 FD | 	getqx	local15
0278c     01 0E 86 F1 | 	sub	objptr, #1
02790     07 83 C2 FA | 	rdbyte	local13, objptr
02794     34 0E 86 F1 | 	sub	objptr, #52
02798     41 87 02 F1 | 	add	local15, local13
0279c     3E 87 02 F1 | 	add	local15, local10
027a0     02 86 66 F0 | 	shl	local15, #2
027a4     07 89 02 FB | 	rdlong	local16, objptr
027a8     43 89 02 F1 | 	add	local16, local15
027ac     44 8B 02 FB | 	rdlong	local17, local16
027b0     7F 00 00 FF 
027b4     FF 8B 06 F5 | 	and	local17, ##65535
027b8     36 8B 42 F5 | 	or	local17, local02
027bc                 | ' 
027bc                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
027bc     44 8B 62 FC | 	wrlong	local17, local16
027c0     40 7D 02 F1 | 	add	local10, local12
027c4     3F 7D 0A F2 | 	cmp	local10, local11 wz
027c8     A8 FF 9F 5D |  if_ne	jmp	#LR__0056
027cc                 | LR__0057
027cc                 | ' 
027cc                 | ' outtextxy(cursor_x,cursor_y,text)
027cc     34 0E 06 F1 | 	add	objptr, #52
027d0     07 5D C2 FA | 	rdbyte	arg01, objptr
027d4     01 0E 06 F1 | 	add	objptr, #1
027d8     07 5F C2 FA | 	rdbyte	arg02, objptr
027dc     35 0E 86 F1 | 	sub	objptr, #53
027e0     35 61 02 F6 | 	mov	arg03, local01
027e4     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
027e8                 | ' 
027e8                 | ' cursor_x:=ncx
027e8     34 0E 06 F1 | 	add	objptr, #52
027ec     07 79 42 FC | 	wrbyte	local08, objptr
027f0                 | ' cursor_y:=ncy
027f0     01 0E 06 F1 | 	add	objptr, #1
027f4     07 71 42 FC | 	wrbyte	local04, objptr
027f8     35 0E 86 F1 | 	sub	objptr, #53
027fc     AF F0 03 F6 | 	mov	ptra, fp
02800     BF 00 A0 FD | 	call	#popregs_
02804                 | _hng030rm_spin2_write_ret
02804     2D 00 64 FD | 	ret
02808                 | 
02808                 | ' 
02808                 | ' ''-----------  Scroll the screen one line up
02808                 | ' 
02808                 | ' pub scrollup() | i
02808                 | _hng030rm_spin2_scrollup
02808     0A 5A 05 F6 | 	mov	COUNT_, #10
0280c     B0 00 A0 FD | 	call	#pushregs_
02810     90 0E 06 F1 | 	add	objptr, #144
02814     07 6B 02 FB | 	rdlong	local01, objptr
02818     90 0E 86 F1 | 	sub	objptr, #144
0281c     02 6A 66 F0 | 	shl	local01, #2
02820     07 5F 02 FB | 	rdlong	arg02, objptr
02824     35 5F 02 F1 | 	add	arg02, local01
02828     30 0E 06 F1 | 	add	objptr, #48
0282c     07 61 02 FB | 	rdlong	arg03, objptr
02830     60 0E 06 F1 | 	add	objptr, #96
02834     07 6D 02 FB | 	rdlong	local02, objptr
02838     90 0E 86 F1 | 	sub	objptr, #144
0283c     36 61 82 F1 | 	sub	arg03, local02
02840                 | ' 
02840                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02840     07 5D 02 FB | 	rdlong	arg01, objptr
02844     EC 35 B0 FD | 	call	#__system__longmove
02848                 | ' repeat i from buflen-cpl to buflen-1
02848     30 0E 06 F1 | 	add	objptr, #48
0284c     07 6F 02 FB | 	rdlong	local03, objptr
02850     60 0E 06 F1 | 	add	objptr, #96
02854     07 6D 02 FB | 	rdlong	local02, objptr
02858     36 6F 82 F1 | 	sub	local03, local02
0285c     60 0E 86 F1 | 	sub	objptr, #96
02860     07 71 02 FB | 	rdlong	local04, objptr
02864     01 70 86 F1 | 	sub	local04, #1
02868     07 73 02 FB | 	rdlong	local05, objptr
0286c     60 0E 06 F1 | 	add	objptr, #96
02870     07 75 02 FB | 	rdlong	local06, objptr
02874     90 0E 86 F1 | 	sub	objptr, #144
02878     3A 73 82 F1 | 	sub	local05, local06
0287c     39 71 5A F2 | 	cmps	local04, local05 wcz
02880     01 76 06 16 |  if_a	mov	local07, #1
02884     01 76 66 E6 |  if_be	neg	local07, #1
02888     3B 71 02 F1 | 	add	local04, local07
0288c     A0 D7 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
02890     93 00 A0 FD | 	call	#FCACHE_LOAD_
02894                 | LR__0058
02894     37 79 02 F6 | 	mov	local08, local03
02898     02 78 66 F0 | 	shl	local08, #2
0289c     07 7B 02 FB | 	rdlong	local09, objptr
028a0     3C 7B 02 F1 | 	add	local09, local08
028a4     3D 7D 02 FB | 	rdlong	local10, local09
028a8     80 FF 7F FF 
028ac     00 7C 06 F5 | 	and	local10, ##-65536
028b0     20 7C 46 F5 | 	or	local10, #32
028b4                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
028b4     3D 7D 62 FC | 	wrlong	local10, local09
028b8     3B 6F 02 F1 | 	add	local03, local07
028bc     38 6F 0A F2 | 	cmp	local03, local04 wz
028c0     D0 FF 9F 5D |  if_ne	jmp	#LR__0058
028c4                 | LR__0059
028c4     AF F0 03 F6 | 	mov	ptra, fp
028c8     BF 00 A0 FD | 	call	#popregs_
028cc                 | _hng030rm_spin2_scrollup_ret
028cc     2D 00 64 FD | 	ret
028d0                 | 
028d0                 | ' 
028d0                 | ' 
028d0                 | ' 
028d0                 | ' pub inttostr2(i,d):result |q,pos,k,j
028d0                 | _hng030rm_spin2_inttostr2
028d0                 | ' 
028d0                 | ' j:=i
028d0     2F 31 02 F6 | 	mov	_var01, arg02
028d4     01 30 86 F1 | 	sub	_var01, #1
028d8                 | ' pos:=d-1
028d8     18 33 02 F6 | 	mov	_var02, _var01
028dc                 | ' k:=0
028dc     44 0E 06 F1 | 	add	objptr, #68
028e0     07 5F 02 F1 | 	add	arg02, objptr
028e4                 | ' 
028e4                 | ' n_string[d]:=0
028e4     2F 01 48 FC | 	wrbyte	#0, arg02
028e8                 | ' repeat k from 0 to d-1
028e8     00 34 06 F6 | 	mov	_var03, #0
028ec     00 30 5E F2 | 	cmps	_var01, #0 wcz
028f0     44 0E 86 F1 | 	sub	objptr, #68
028f4     01 36 06 16 |  if_a	mov	_var04, #1
028f8     01 36 66 E6 |  if_be	neg	_var04, #1
028fc     1B 31 02 F1 | 	add	_var01, _var04
02900     1C D7 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
02904     93 00 A0 FD | 	call	#FCACHE_LOAD_
02908                 | LR__0060
02908     1A 39 02 F6 | 	mov	_var05, _var03
0290c     44 0E 06 F1 | 	add	objptr, #68
02910     07 39 02 F1 | 	add	_var05, objptr
02914                 | '   n_string[k]:=48
02914     1C 61 48 FC | 	wrbyte	#48, _var05
02918     1B 35 02 F1 | 	add	_var03, _var04
0291c     18 35 0A F2 | 	cmp	_var03, _var01 wz
02920     44 0E 86 F1 | 	sub	objptr, #68
02924     E0 FF 9F 5D |  if_ne	jmp	#LR__0060
02928                 | LR__0061
02928                 | ' 
02928                 | ' if (j<>0)
02928     00 5C 0E F2 | 	cmp	arg01, #0 wz
0292c     40 00 90 AD |  if_e	jmp	#LR__0064
02930                 | ' 
02930                 | '   repeat while (pos>-1)
02930                 | LR__0062
02930     FF FF 7F FF 
02934     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
02938     34 00 90 ED |  if_be	jmp	#LR__0063
0293c     2E 0B 03 F6 | 	mov	muldiva_, arg01
02940     0A 0C 07 F6 | 	mov	muldivb_, #10
02944     CC 00 A0 FD | 	call	#unsdivide_
02948     85 3B 02 F6 | 	mov	_var06, muldiva_
0294c                 | '     q:=j+//10
0294c                 | '     q:=48+q
0294c     30 3A 06 F1 | 	add	_var06, #48
02950     19 3D 02 F6 | 	mov	_var07, _var02
02954     44 0E 06 F1 | 	add	objptr, #68
02958     07 3D 02 F1 | 	add	_var07, objptr
0295c                 | '     n_string[pos]:=q
0295c     1E 3B 42 FC | 	wrbyte	_var06, _var07
02960                 | '     j:=j+/10
02960     86 5D 02 F6 | 	mov	arg01, muldivb_
02964                 | '     pos-=1
02964     01 32 86 F1 | 	sub	_var02, #1
02968     44 0E 86 F1 | 	sub	objptr, #68
0296c     C0 FF 9F FD | 	jmp	#LR__0062
02970                 | LR__0063
02970                 | LR__0064
02970     44 0E 06 F1 | 	add	objptr, #68
02974     07 2B 02 F6 | 	mov	result1, objptr
02978     44 0E 86 F1 | 	sub	objptr, #68
0297c                 | ' 
0297c                 | ' 
0297c                 | ' q:=@n_string
0297c                 | ' return q
0297c                 | _hng030rm_spin2_inttostr2_ret
0297c     2D 00 64 FD | 	ret
02980                 | 
02980                 | ' 
02980                 | ' 
02980                 | ' 
02980                 | ' '*************************************************************************
02980                 | ' '                                                                        *
02980                 | ' '  Mode setting and driver start                                                          *
02980                 | ' '                                                                        *
02980                 | ' '*************************************************************************
02980                 | ' 
02980                 | ' ''---------  Set the graphics mode
02980                 | ' 
02980                 | ' 
02980                 | ' 
02980                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02980                 | _hng030rm_spin2_setmode
02980     50 5A 05 F6 | 	mov	COUNT_, #80
02984     B0 00 A0 FD | 	call	#pushregs_
02988     2E 6B 02 F6 | 	mov	local01, arg01
0298c                 | ' 
0298c                 | ' '' mode:tn_bb_cc_vv_hh
0298c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
0298c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
0298c                 | ' 
0298c                 | ' if mode==(512+192+48)
0298c     01 00 00 FF 
02990     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02994                 | '   return 'no RAM
02994     1C 0A 90 AD |  if_e	jmp	#LR__0105
02998                 | ' 
02998                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02998     35 6D 02 F6 | 	mov	local02, local01
0299c     06 6C 46 F0 | 	shr	local02, #6
029a0     07 6C 06 F5 | 	and	local02, #7
029a4     08 6C 26 F3 | 	fle	local02, #8
029a8     36 6F 02 F6 | 	mov	local03, local02
029ac     30 6E 62 FD | 	jmprel	local03
029b0                 | LR__0065
029b0     20 00 90 FD | 	jmp	#LR__0066
029b4     58 00 90 FD | 	jmp	#LR__0067
029b8     90 00 90 FD | 	jmp	#LR__0068
029bc     C8 00 90 FD | 	jmp	#LR__0069
029c0     00 01 90 FD | 	jmp	#LR__0070
029c4     38 01 90 FD | 	jmp	#LR__0071
029c8     70 01 90 FD | 	jmp	#LR__0072
029cc     A8 01 90 FD | 	jmp	#LR__0073
029d0     E4 01 90 FD | 	jmp	#LR__0074
029d4                 | LR__0066
029d4                 | ' 
029d4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
029d4     50 0E 06 F1 | 	add	objptr, #80
029d8     07 5D 02 F6 | 	mov	arg01, objptr
029dc     50 0E 86 F1 | 	sub	objptr, #80
029e0     0E 00 00 FF 
029e4     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
029e8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029ec     38 73 02 F6 | 	mov	local05, local04
029f0     10 74 06 F6 | 	mov	local06, #16
029f4     39 5F 02 F6 | 	mov	arg02, local05
029f8     10 60 06 F6 | 	mov	arg03, #16
029fc     0E 00 00 FF 
02a00     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02a04     2C 34 B0 FD | 	call	#__system__longmove
02a08     15 77 02 F6 | 	mov	local07, result1
02a0c     A8 01 90 FD | 	jmp	#LR__0074
02a10                 | LR__0067
02a10                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02a10     50 0E 06 F1 | 	add	objptr, #80
02a14     07 5D 02 F6 | 	mov	arg01, objptr
02a18     50 0E 86 F1 | 	sub	objptr, #80
02a1c     0E 00 00 FF 
02a20     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02a24     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a28     38 73 02 F6 | 	mov	local05, local04
02a2c     10 74 06 F6 | 	mov	local06, #16
02a30     39 5F 02 F6 | 	mov	arg02, local05
02a34     10 60 06 F6 | 	mov	arg03, #16
02a38     0E 00 00 FF 
02a3c     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02a40     F0 33 B0 FD | 	call	#__system__longmove
02a44     15 77 02 F6 | 	mov	local07, result1
02a48     6C 01 90 FD | 	jmp	#LR__0074
02a4c                 | LR__0068
02a4c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02a4c     50 0E 06 F1 | 	add	objptr, #80
02a50     07 5D 02 F6 | 	mov	arg01, objptr
02a54     50 0E 86 F1 | 	sub	objptr, #80
02a58     0E 00 00 FF 
02a5c     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a60     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a64     38 73 02 F6 | 	mov	local05, local04
02a68     10 74 06 F6 | 	mov	local06, #16
02a6c     39 5F 02 F6 | 	mov	arg02, local05
02a70     10 60 06 F6 | 	mov	arg03, #16
02a74     0E 00 00 FF 
02a78     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a7c     B4 33 B0 FD | 	call	#__system__longmove
02a80     15 77 02 F6 | 	mov	local07, result1
02a84     30 01 90 FD | 	jmp	#LR__0074
02a88                 | LR__0069
02a88                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a88     50 0E 06 F1 | 	add	objptr, #80
02a8c     07 5D 02 F6 | 	mov	arg01, objptr
02a90     50 0E 86 F1 | 	sub	objptr, #80
02a94     0E 00 00 FF 
02a98     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a9c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02aa0     38 73 02 F6 | 	mov	local05, local04
02aa4     10 74 06 F6 | 	mov	local06, #16
02aa8     39 5F 02 F6 | 	mov	arg02, local05
02aac     10 60 06 F6 | 	mov	arg03, #16
02ab0     0E 00 00 FF 
02ab4     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02ab8     78 33 B0 FD | 	call	#__system__longmove
02abc     15 77 02 F6 | 	mov	local07, result1
02ac0     F4 00 90 FD | 	jmp	#LR__0074
02ac4                 | LR__0070
02ac4                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02ac4     50 0E 06 F1 | 	add	objptr, #80
02ac8     07 5D 02 F6 | 	mov	arg01, objptr
02acc     50 0E 86 F1 | 	sub	objptr, #80
02ad0     0E 00 00 FF 
02ad4     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02ad8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02adc     38 73 02 F6 | 	mov	local05, local04
02ae0     10 74 06 F6 | 	mov	local06, #16
02ae4     39 5F 02 F6 | 	mov	arg02, local05
02ae8     10 60 06 F6 | 	mov	arg03, #16
02aec     0E 00 00 FF 
02af0     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02af4     3C 33 B0 FD | 	call	#__system__longmove
02af8     15 77 02 F6 | 	mov	local07, result1
02afc     B8 00 90 FD | 	jmp	#LR__0074
02b00                 | LR__0071
02b00                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02b00     50 0E 06 F1 | 	add	objptr, #80
02b04     07 5D 02 F6 | 	mov	arg01, objptr
02b08     50 0E 86 F1 | 	sub	objptr, #80
02b0c     0E 00 00 FF 
02b10     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b14     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b18     38 73 02 F6 | 	mov	local05, local04
02b1c     10 74 06 F6 | 	mov	local06, #16
02b20     39 5F 02 F6 | 	mov	arg02, local05
02b24     10 60 06 F6 | 	mov	arg03, #16
02b28     0E 00 00 FF 
02b2c     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b30     00 33 B0 FD | 	call	#__system__longmove
02b34     15 77 02 F6 | 	mov	local07, result1
02b38     7C 00 90 FD | 	jmp	#LR__0074
02b3c                 | LR__0072
02b3c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02b3c     50 0E 06 F1 | 	add	objptr, #80
02b40     07 5D 02 F6 | 	mov	arg01, objptr
02b44     50 0E 86 F1 | 	sub	objptr, #80
02b48     0E 00 00 FF 
02b4c     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02b50     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b54     38 73 02 F6 | 	mov	local05, local04
02b58     10 74 06 F6 | 	mov	local06, #16
02b5c     39 5F 02 F6 | 	mov	arg02, local05
02b60     10 60 06 F6 | 	mov	arg03, #16
02b64     0E 00 00 FF 
02b68     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02b6c     C4 32 B0 FD | 	call	#__system__longmove
02b70     15 77 02 F6 | 	mov	local07, result1
02b74     40 00 90 FD | 	jmp	#LR__0074
02b78                 | LR__0073
02b78                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02b78     50 0E 06 F1 | 	add	objptr, #80
02b7c     07 79 02 F6 | 	mov	local08, objptr
02b80     3C 7B 02 F6 | 	mov	local09, local08
02b84     0F 00 00 FF 
02b88     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02b8c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b90     38 73 02 F6 | 	mov	local05, local04
02b94     10 74 06 F6 | 	mov	local06, #16
02b98     3D 5D 02 F6 | 	mov	arg01, local09
02b9c     39 5F 02 F6 | 	mov	arg02, local05
02ba0     10 60 06 F6 | 	mov	arg03, #16
02ba4     50 0E 86 F1 | 	sub	objptr, #80
02ba8     0F 00 00 FF 
02bac     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02bb0     80 32 B0 FD | 	call	#__system__longmove
02bb4     15 77 02 F6 | 	mov	local07, result1
02bb8                 | LR__0074
02bb8                 | ' 
02bb8                 | ' ' 4-bit graphics: do nothing with timings :)
02bb8                 | ' if mode<512
02bb8     01 00 00 FF 
02bbc     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02bc0     20 00 90 3D |  if_ae	jmp	#LR__0075
02bc4     0C 00 00 FF 
02bc8     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02bcc     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02bd0                 | '   palette_ptr:=@ataripalette
02bd0     18 0E 06 F1 | 	add	objptr, #24
02bd4     07 7D 62 FC | 	wrlong	local10, objptr
02bd8     18 0E 86 F1 | 	sub	objptr, #24
02bdc     0C 00 00 FF 
02be0     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02be4                 | LR__0075
02be4                 | ' 
02be4                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02be4     35 6D 02 F6 | 	mov	local02, local01
02be8     01 00 00 FF 
02bec     30 6C 06 F5 | 	and	local02, ##560
02bf0     01 00 00 FF 
02bf4     30 6C 0E F2 | 	cmp	local02, ##560 wz
02bf8     48 00 90 5D |  if_ne	jmp	#LR__0076
02bfc                 | '   timings[5]:=4
02bfc     64 0E 06 F1 | 	add	objptr, #100
02c00     07 09 68 FC | 	wrlong	#4, objptr
02c04     18 0E 06 F1 | 	add	objptr, #24
02c08     07 7F 02 FB | 	rdlong	local11, objptr
02c0c     01 7E 66 F0 | 	shl	local11, #1
02c10                 | '   timings[11]:=timings[11]<<1
02c10     07 7F 62 FC | 	wrlong	local11, objptr
02c14                 | '   putpixel:=p8
02c14     6C 0E 06 F1 | 	add	objptr, #108
02c18     07 6D 02 FB | 	rdlong	local02, objptr
02c1c     10 0E 86 F1 | 	sub	objptr, #16
02c20     07 6D 62 FC | 	wrlong	local02, objptr
02c24     0C 00 00 FF 
02c28     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c2c     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02c30                 | '   palette_ptr:=@ataripalette
02c30     C0 0E 86 F1 | 	sub	objptr, #192
02c34     07 81 62 FC | 	wrlong	local12, objptr
02c38     18 0E 86 F1 | 	sub	objptr, #24
02c3c     0C 00 00 FF 
02c40     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c44                 | LR__0076
02c44                 | ' 
02c44                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02c44     35 6D 02 F6 | 	mov	local02, local01
02c48     01 00 00 FF 
02c4c     30 6C 06 F5 | 	and	local02, ##560
02c50     01 00 00 FF 
02c54     10 6C 0E F2 | 	cmp	local02, ##528 wz
02c58     48 00 90 5D |  if_ne	jmp	#LR__0077
02c5c                 | '   timings[5]:=16
02c5c     64 0E 06 F1 | 	add	objptr, #100
02c60     07 21 68 FC | 	wrlong	#16, objptr
02c64     18 0E 06 F1 | 	add	objptr, #24
02c68     07 83 02 FB | 	rdlong	local13, objptr
02c6c     01 82 46 F0 | 	shr	local13, #1
02c70                 | '   timings[11]:=timings[11]>>1
02c70     07 83 62 FC | 	wrlong	local13, objptr
02c74                 | '   putpixel:=p2
02c74     64 0E 06 F1 | 	add	objptr, #100
02c78     07 6D 02 FB | 	rdlong	local02, objptr
02c7c     08 0E 86 F1 | 	sub	objptr, #8
02c80     07 6D 62 FC | 	wrlong	local02, objptr
02c84     0C 00 00 FF 
02c88     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02c8c     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02c90                 | '   palette_ptr:=@fourcolors
02c90     C0 0E 86 F1 | 	sub	objptr, #192
02c94     07 85 62 FC | 	wrlong	local14, objptr
02c98     18 0E 86 F1 | 	sub	objptr, #24
02c9c     0C 00 00 FF 
02ca0     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02ca4                 | LR__0077
02ca4                 | ' 
02ca4                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02ca4     35 6D 02 F6 | 	mov	local02, local01
02ca8     01 00 00 FF 
02cac     30 6C 06 F5 | 	and	local02, ##560
02cb0     01 00 00 FF 
02cb4     00 6C 0E F2 | 	cmp	local02, ##512 wz
02cb8     48 00 90 5D |  if_ne	jmp	#LR__0078
02cbc                 | '   timings[5]:=32
02cbc     64 0E 06 F1 | 	add	objptr, #100
02cc0     07 41 68 FC | 	wrlong	#32, objptr
02cc4     18 0E 06 F1 | 	add	objptr, #24
02cc8     07 87 02 FB | 	rdlong	local15, objptr
02ccc     02 86 46 F0 | 	shr	local15, #2
02cd0                 | '   timings[11]:=timings[11]>>2
02cd0     07 87 62 FC | 	wrlong	local15, objptr
02cd4                 | '   putpixel:=p1
02cd4     60 0E 06 F1 | 	add	objptr, #96
02cd8     07 6D 02 FB | 	rdlong	local02, objptr
02cdc     04 0E 86 F1 | 	sub	objptr, #4
02ce0     07 6D 62 FC | 	wrlong	local02, objptr
02ce4     0C 00 00 FF 
02ce8     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02cec     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02cf0                 | '   palette_ptr:=@twocolors
02cf0     C0 0E 86 F1 | 	sub	objptr, #192
02cf4     07 89 62 FC | 	wrlong	local16, objptr
02cf8     18 0E 86 F1 | 	sub	objptr, #24
02cfc     0C 00 00 FF 
02d00     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d04                 | LR__0078
02d04                 | ' 
02d04                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d04     35 6D 02 F6 | 	mov	local02, local01
02d08     01 00 00 FF 
02d0c     30 6C 06 F5 | 	and	local02, ##560
02d10     01 00 00 FF 
02d14     20 6C 0E F2 | 	cmp	local02, ##544 wz
02d18     30 00 90 5D |  if_ne	jmp	#LR__0079
02d1c                 | '   putpixel:=p4
02d1c     E4 0E 06 F1 | 	add	objptr, #228
02d20     07 6D 02 FB | 	rdlong	local02, objptr
02d24     0C 0E 86 F1 | 	sub	objptr, #12
02d28     07 6D 62 FC | 	wrlong	local02, objptr
02d2c     0C 00 00 FF 
02d30     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02d34     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02d38                 | '   palette_ptr:=@vga16
02d38     C0 0E 86 F1 | 	sub	objptr, #192
02d3c     07 8B 62 FC | 	wrlong	local17, objptr
02d40     18 0E 86 F1 | 	sub	objptr, #24
02d44     0C 00 00 FF 
02d48     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d4c                 | LR__0079
02d4c                 | ' 
02d4c                 | ' repeat i from 0 to 4
02d4c     00 8C 06 F6 | 	mov	local18, #0
02d50     F0 D2 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
02d54     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d58                 | LR__0080
02d58     46 8F 02 F6 | 	mov	local19, local18
02d5c     02 8E 66 F0 | 	shl	local19, #2
02d60     50 0E 06 F1 | 	add	objptr, #80
02d64     07 8F 02 F1 | 	add	local19, objptr
02d68     2C 0E 86 F1 | 	sub	objptr, #44
02d6c     07 91 02 FB | 	rdlong	local20, objptr
02d70     24 0E 86 F1 | 	sub	objptr, #36
02d74     11 90 66 F0 | 	shl	local20, #17
02d78     47 93 02 FB | 	rdlong	local21, local19
02d7c     48 93 02 F1 | 	add	local21, local20
02d80     49 95 02 F6 | 	mov	local22, local21
02d84     80 40 38 FF 
02d88     00 94 06 F1 | 	add	local22, ##1887502336
02d8c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d8c     47 95 62 FC | 	wrlong	local22, local19
02d90     01 8C 06 F1 | 	add	local18, #1
02d94     05 8C 5E F2 | 	cmps	local18, #5 wcz
02d98     BC FF 9F CD |  if_b	jmp	#LR__0080
02d9c                 | LR__0081
02d9c     24 0E 06 F1 | 	add	objptr, #36
02da0     07 97 02 FB | 	rdlong	local23, objptr
02da4     11 96 66 F0 | 	shl	local23, #17
02da8     40 0E 06 F1 | 	add	objptr, #64
02dac     07 99 02 FB | 	rdlong	local24, objptr
02db0     4B 99 02 F1 | 	add	local24, local23
02db4                 | ' timings[5]:=timings[5]+hdmibase<<17
02db4     07 99 62 FC | 	wrlong	local24, objptr
02db8                 | ' clkfreq:=timings[13]
02db8     20 0E 06 F1 | 	add	objptr, #32
02dbc     07 6D 02 FB | 	rdlong	local02, objptr
02dc0     14 6C 66 FC | 	wrlong	local02, #20
02dc4                 | ' hubset(timings[14])
02dc4     04 0E 06 F1 | 	add	objptr, #4
02dc8     07 5D 02 FB | 	rdlong	arg01, objptr
02dcc     88 0E 86 F1 | 	sub	objptr, #136
02dd0     00 5C 62 FD | 	hubset	arg01
02dd4                 | ' waitms(1)
02dd4     01 5C 06 F6 | 	mov	arg01, #1
02dd8     F8 32 B0 FD | 	call	#__system___waitms
02ddc     35 9B 02 F6 | 	mov	local25, local01
02de0     03 9A 06 F5 | 	and	local25, #3
02de4     4D 9D C2 F9 | 	decod	local26, local25
02de8                 | ' 
02de8                 | ' 
02de8                 | ' xzoom:=1<<(mode & 3)
02de8     CC 0E 06 F1 | 	add	objptr, #204
02dec     07 9D 62 FC | 	wrlong	local26, objptr
02df0                 | ' 
02df0                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02df0     4E 79 02 F6 | 	mov	local08, local26
02df4     CC 0E 86 F1 | 	sub	objptr, #204
02df8     08 78 0E F2 | 	cmp	local08, #8 wz
02dfc     24 00 90 5D |  if_ne	jmp	#LR__0082
02e00     35 7B 02 F6 | 	mov	local09, local01
02e04     04 7A 46 F0 | 	shr	local09, #4
02e08     03 7A 06 F5 | 	and	local09, #3
02e0c     03 7A 0E F2 | 	cmp	local09, #3 wz
02e10     10 00 90 AD |  if_e	jmp	#LR__0082
02e14                 | '   xzoom:=4
02e14     04 6C 06 F6 | 	mov	local02, #4
02e18     CC 0E 06 F1 | 	add	objptr, #204
02e1c     07 09 68 FC | 	wrlong	#4, objptr
02e20     CC 0E 86 F1 | 	sub	objptr, #204
02e24                 | LR__0082
02e24     35 9F 02 F6 | 	mov	local27, local01
02e28     02 9E 46 F0 | 	shr	local27, #2
02e2c     03 9E 06 F5 | 	and	local27, #3
02e30     4F A1 C2 F9 | 	decod	local28, local27
02e34                 | ' 
02e34                 | ' yzoom:=1<<((mode>>2) & 3)
02e34     D0 0E 06 F1 | 	add	objptr, #208
02e38     07 A1 62 FC | 	wrlong	local28, objptr
02e3c     04 0E 86 F1 | 	sub	objptr, #4
02e40     07 79 02 FB | 	rdlong	local08, objptr
02e44     04 0E 06 F1 | 	add	objptr, #4
02e48     07 71 02 FB | 	rdlong	local04, objptr
02e4c     38 79 02 FD | 	qmul	local08, local04
02e50     18 A2 62 FD | 	getqx	local29
02e54                 | ' azoom:=xzoom*yzoom
02e54     04 0E 06 F1 | 	add	objptr, #4
02e58     07 A3 62 FC | 	wrlong	local29, objptr
02e5c                 | ' 
02e5c                 | ' cpl:=timings[11]
02e5c     58 0E 86 F1 | 	sub	objptr, #88
02e60     07 6D 02 FB | 	rdlong	local02, objptr
02e64     14 0E 06 F1 | 	add	objptr, #20
02e68     07 6D 62 FC | 	wrlong	local02, objptr
02e6c     90 0E 86 F1 | 	sub	objptr, #144
02e70                 | ' if (mode<512)
02e70     01 00 00 FF 
02e74     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02e78     60 00 90 3D |  if_ae	jmp	#LR__0083
02e7c     80 0E 06 F1 | 	add	objptr, #128
02e80     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e84     04 0A 47 F0 | 	shr	muldiva_, #4
02e88     50 0E 06 F1 | 	add	objptr, #80
02e8c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e90     D0 0E 86 F1 | 	sub	objptr, #208
02e94     CC 00 A0 FD | 	call	#unsdivide_
02e98                 | '   lines:=(timings[12]>>4)+/yzoom
02e98     94 0E 06 F1 | 	add	objptr, #148
02e9c     07 0D 63 FC | 	wrlong	muldivb_, objptr
02ea0                 | '   if ((timings[12]>>4)+//yzoom) <>0
02ea0     14 0E 86 F1 | 	sub	objptr, #20
02ea4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ea8     04 0A 47 F0 | 	shr	muldiva_, #4
02eac     50 0E 06 F1 | 	add	objptr, #80
02eb0     07 0D 03 FB | 	rdlong	muldivb_, objptr
02eb4     D0 0E 86 F1 | 	sub	objptr, #208
02eb8     CC 00 A0 FD | 	call	#unsdivide_
02ebc     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02ec0     AC 00 90 AD |  if_e	jmp	#LR__0086
02ec4                 | '     lines +=1
02ec4     94 0E 06 F1 | 	add	objptr, #148
02ec8     07 6D 02 FB | 	rdlong	local02, objptr
02ecc     01 6C 06 F1 | 	add	local02, #1
02ed0     07 6D 62 FC | 	wrlong	local02, objptr
02ed4     94 0E 86 F1 | 	sub	objptr, #148
02ed8                 | ' 
02ed8                 | ' else
02ed8     94 00 90 FD | 	jmp	#LR__0086
02edc                 | LR__0083
02edc     80 0E 06 F1 | 	add	objptr, #128
02ee0     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ee4     50 0E 06 F1 | 	add	objptr, #80
02ee8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02eec     D0 0E 86 F1 | 	sub	objptr, #208
02ef0     D0 00 A0 FD | 	call	#divide_
02ef4                 | '   lines:=timings[12]/yzoom
02ef4     94 0E 06 F1 | 	add	objptr, #148
02ef8     07 0D 63 FC | 	wrlong	muldivb_, objptr
02efc                 | '   if cpl//xzoom==0
02efc     04 0E 86 F1 | 	sub	objptr, #4
02f00     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f04     3C 0E 06 F1 | 	add	objptr, #60
02f08     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f0c     CC 0E 86 F1 | 	sub	objptr, #204
02f10     D0 00 A0 FD | 	call	#divide_
02f14     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f18     28 00 90 5D |  if_ne	jmp	#LR__0084
02f1c                 | '     cpl:=cpl/xzoom
02f1c     90 0E 06 F1 | 	add	objptr, #144
02f20     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f24     3C 0E 06 F1 | 	add	objptr, #60
02f28     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f2c     CC 0E 86 F1 | 	sub	objptr, #204
02f30     D0 00 A0 FD | 	call	#divide_
02f34     90 0E 06 F1 | 	add	objptr, #144
02f38     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f3c     90 0E 86 F1 | 	sub	objptr, #144
02f40                 | '   else
02f40     2C 00 90 FD | 	jmp	#LR__0085
02f44                 | LR__0084
02f44     90 0E 06 F1 | 	add	objptr, #144
02f48     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f4c     3C 0E 06 F1 | 	add	objptr, #60
02f50     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f54     CC 0E 86 F1 | 	sub	objptr, #204
02f58     D0 00 A0 FD | 	call	#divide_
02f5c     86 A5 02 F6 | 	mov	local30, muldivb_
02f60     01 A4 06 F1 | 	add	local30, #1
02f64                 | '     cpl:=cpl/xzoom+1
02f64     90 0E 06 F1 | 	add	objptr, #144
02f68     07 A5 62 FC | 	wrlong	local30, objptr
02f6c     90 0E 86 F1 | 	sub	objptr, #144
02f70                 | LR__0085
02f70                 | LR__0086
02f70     90 0E 06 F1 | 	add	objptr, #144
02f74     07 79 02 FB | 	rdlong	local08, objptr
02f78     04 0E 06 F1 | 	add	objptr, #4
02f7c     07 71 02 FB | 	rdlong	local04, objptr
02f80     38 79 02 FD | 	qmul	local08, local04
02f84     18 A6 62 FD | 	getqx	local31
02f88                 | ' 
02f88                 | ' buflen:=(cpl*lines)
02f88     64 0E 86 F1 | 	sub	objptr, #100
02f8c     07 A7 62 FC | 	wrlong	local31, objptr
02f90     30 0E 86 F1 | 	sub	objptr, #48
02f94     02 A6 66 F0 | 	shl	local31, #2
02f98     13 A8 C6 F9 | 	decod	local32, #19
02f9c     53 A9 82 F1 | 	sub	local32, local31
02fa0                 | ' buf_ptr:=$80000-4*buflen
02fa0     07 A9 62 FC | 	wrlong	local32, objptr
02fa4     50 0E 06 F1 | 	add	objptr, #80
02fa8     07 AB 02 F6 | 	mov	local33, objptr
02fac                 | ' mode_ptr:=@timings
02fac     3C 0E 86 F1 | 	sub	objptr, #60
02fb0     07 AB 62 FC | 	wrlong	local33, objptr
02fb4                 | ' graphmode:=mode
02fb4     B0 0E 06 F1 | 	add	objptr, #176
02fb8     07 6B 62 FC | 	wrlong	local01, objptr
02fbc     C4 0E 86 F1 | 	sub	objptr, #196
02fc0                 | ' makedl(mode)
02fc0     35 5D 02 F6 | 	mov	arg01, local01
02fc4                 | ' 
02fc4                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02fc4                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02fc4                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02fc4                 | ' 
02fc4                 | ' '   0 - display a up/down border line
02fc4                 | ' 
02fc4                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02fc4                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02fc4                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02fc4                 | ' '    nnnn - font line to display, 0..15
02fc4                 | ' '    llllll - character line, determines the cursor Y position
02fc4                 | ' 
02fc4                 | ' 
02fc4                 | ' if (mode &256==0)
02fc4     00 5D CE F7 | 	test	arg01, #256 wz
02fc8     1C 00 90 5D |  if_ne	jmp	#LR__0087
02fcc     07 AD 02 FB | 	rdlong	local34, objptr
02fd0     04 00 00 FF 
02fd4     00 AD 86 F1 | 	sub	local34, ##2304
02fd8                 | '   dl_ptr:=buf_ptr-4*576
02fd8     1C 0E 06 F1 | 	add	objptr, #28
02fdc     07 AD 62 FC | 	wrlong	local34, objptr
02fe0     1C 0E 86 F1 | 	sub	objptr, #28
02fe4                 | ' else
02fe4     18 00 90 FD | 	jmp	#LR__0088
02fe8                 | LR__0087
02fe8     07 AF 02 FB | 	rdlong	local35, objptr
02fec     03 00 00 FF 
02ff0     C0 AF 86 F1 | 	sub	local35, ##1984
02ff4                 | '   dl_ptr:=buf_ptr-4*496
02ff4     1C 0E 06 F1 | 	add	objptr, #28
02ff8     07 AF 62 FC | 	wrlong	local35, objptr
02ffc     1C 0E 86 F1 | 	sub	objptr, #28
03000                 | LR__0088
03000     2E B1 02 F6 | 	mov	local36, arg01
03004     02 B0 46 F0 | 	shr	local36, #2
03008     03 B0 06 F5 | 	and	local36, #3
0300c                 | '  ' dl_ptr:=buf_ptr-4*540
0300c                 | ' 
0300c                 | ' vzoom:=((mode>>2) & 3)
0300c                 | ' 
0300c                 | ' 
0300c                 | ' if mode<512 '' text modes
0300c     01 00 00 FF 
03010     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03014     E4 01 90 3D |  if_ae	jmp	#LR__0096
03018                 | ' 
03018                 | '   if timings[6]>0 'borders
03018     68 0E 06 F1 | 	add	objptr, #104
0301c     07 B3 02 FB | 	rdlong	local37, objptr
03020     68 0E 86 F1 | 	sub	objptr, #104
03024     00 B2 5E F2 | 	cmps	local37, #0 wcz
03028     D4 00 90 ED |  if_be	jmp	#LR__0093
0302c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0302c     00 B4 06 F6 | 	mov	local38, #0
03030     68 0E 06 F1 | 	add	objptr, #104
03034     07 B7 02 FB | 	rdlong	local39, objptr
03038     68 0E 86 F1 | 	sub	objptr, #104
0303c     01 B6 86 F1 | 	sub	local39, #1
03040     00 B6 5E F2 | 	cmps	local39, #0 wcz
03044     01 B8 06 16 |  if_a	mov	local40, #1
03048     01 B8 66 E6 |  if_be	neg	local40, #1
0304c     5C BB 02 F6 | 	mov	local41, local40
03050     5C B7 02 F1 | 	add	local39, local40
03054     D0 CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
03058     93 00 A0 FD | 	call	#FCACHE_LOAD_
0305c                 | LR__0089
0305c     5A BD 02 F6 | 	mov	local42, local38
03060     02 BC 66 F0 | 	shl	local42, #2
03064     1C 0E 06 F1 | 	add	objptr, #28
03068     07 BF 02 FB | 	rdlong	local43, objptr
0306c     1C 0E 86 F1 | 	sub	objptr, #28
03070     5E BF 02 F1 | 	add	local43, local42
03074                 | '       long[dl_ptr+4*i]:=$0
03074     5F 01 68 FC | 	wrlong	#0, local43
03078     5D B5 02 F1 | 	add	local38, local41
0307c     5B B5 0A F2 | 	cmp	local38, local39 wz
03080     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
03084                 | LR__0090
03084                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03084     68 0E 06 F1 | 	add	objptr, #104
03088     07 B5 02 FB | 	rdlong	local38, objptr
0308c     18 0E 06 F1 | 	add	objptr, #24
03090     07 B9 02 FB | 	rdlong	local40, objptr
03094     5C B5 02 F1 | 	add	local38, local40
03098     0C 0E 06 F1 | 	add	objptr, #12
0309c     07 C1 02 FB | 	rdlong	local44, objptr
030a0     01 C0 86 F1 | 	sub	local44, #1
030a4     24 0E 86 F1 | 	sub	objptr, #36
030a8     07 C3 02 FB | 	rdlong	local45, objptr
030ac     18 0E 06 F1 | 	add	objptr, #24
030b0     07 C5 02 FB | 	rdlong	local46, objptr
030b4     80 0E 86 F1 | 	sub	objptr, #128
030b8     62 C3 02 F1 | 	add	local45, local46
030bc     61 C1 5A F2 | 	cmps	local44, local45 wcz
030c0     01 C6 06 16 |  if_a	mov	local47, #1
030c4     01 C6 66 E6 |  if_be	neg	local47, #1
030c8     63 C9 02 F6 | 	mov	local48, local47
030cc     63 C1 02 F1 | 	add	local44, local47
030d0     54 CF 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
030d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030d8                 | LR__0091
030d8     5A CB 02 F6 | 	mov	local49, local38
030dc     02 CA 66 F0 | 	shl	local49, #2
030e0     1C 0E 06 F1 | 	add	objptr, #28
030e4     07 CD 02 FB | 	rdlong	local50, objptr
030e8     1C 0E 86 F1 | 	sub	objptr, #28
030ec     65 CD 02 F1 | 	add	local50, local49
030f0                 | '       long[dl_ptr+4*i]:=$0
030f0     66 01 68 FC | 	wrlong	#0, local50
030f4     64 B5 02 F1 | 	add	local38, local48
030f8     60 B5 0A F2 | 	cmp	local38, local44 wz
030fc     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
03100                 | LR__0092
03100                 | LR__0093
03100     10 CE 06 F6 | 	mov	local51, #16
03104     58 CF 62 F0 | 	shl	local51, local36
03108                 | '   lpc:=16<<vzoom
03108                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03108     68 0E 06 F1 | 	add	objptr, #104
0310c     07 B5 02 FB | 	rdlong	local38, objptr
03110     5A D1 02 F6 | 	mov	local52, local38
03114     18 0E 06 F1 | 	add	objptr, #24
03118     07 D3 02 FB | 	rdlong	local53, objptr
0311c     69 D1 02 F1 | 	add	local52, local53
03120     01 D0 86 F1 | 	sub	local52, #1
03124     18 0E 86 F1 | 	sub	objptr, #24
03128     07 C7 02 FB | 	rdlong	local47, objptr
0312c     68 0E 86 F1 | 	sub	objptr, #104
03130     63 D1 5A F2 | 	cmps	local52, local47 wcz
03134     01 D4 06 16 |  if_a	mov	local54, #1
03138     01 D4 66 E6 |  if_be	neg	local54, #1
0313c     6A D7 02 F6 | 	mov	local55, local54
03140     6A D1 02 F1 | 	add	local52, local54
03144     68 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
03148     93 00 A0 FD | 	call	#FCACHE_LOAD_
0314c                 | LR__0094
0314c     5A 0B 03 F6 | 	mov	muldiva_, local38
03150     68 0E 06 F1 | 	add	objptr, #104
03154     07 D9 02 FB | 	rdlong	local56, objptr
03158     68 0E 86 F1 | 	sub	objptr, #104
0315c     6C 0B 83 F1 | 	sub	muldiva_, local56
03160     67 0D 03 F6 | 	mov	muldivb_, local51
03164     CC 00 A0 FD | 	call	#unsdivide_
03168     58 0B 43 F0 | 	shr	muldiva_, local36
0316c                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
0316c     85 DB 02 F6 | 	mov	local57, muldiva_
03170     5A 0B 03 F6 | 	mov	muldiva_, local38
03174     68 0E 06 F1 | 	add	objptr, #104
03178     07 D9 02 FB | 	rdlong	local56, objptr
0317c     68 0E 86 F1 | 	sub	objptr, #104
03180     6C 0B 83 F1 | 	sub	muldiva_, local56
03184     67 0D 03 F6 | 	mov	muldivb_, local51
03188     CC 00 A0 FD | 	call	#unsdivide_
0318c     86 DD 02 F6 | 	mov	local58, muldivb_
03190                 | '     charline:=(i-timings[6])+/lpc
03190     90 0E 06 F1 | 	add	objptr, #144
03194     07 D9 02 FB | 	rdlong	local56, objptr
03198     90 0E 86 F1 | 	sub	objptr, #144
0319c     6E D9 02 FD | 	qmul	local56, local58
031a0     18 DE 62 FD | 	getqx	local59
031a4     02 DE 66 F0 | 	shl	local59, #2
031a8     07 E1 02 FB | 	rdlong	local60, objptr
031ac     6F E1 02 F1 | 	add	local60, local59
031b0     2E E3 02 F6 | 	mov	local61, arg01
031b4     03 E2 06 F5 | 	and	local61, #3
031b8     71 E1 02 F1 | 	add	local60, local61
031bc                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
031bc     0C E0 66 F0 | 	shl	local60, #12
031c0     08 DA 66 F0 | 	shl	local57, #8
031c4     6D E1 02 F1 | 	add	local60, local57
031c8     02 DC 66 F0 | 	shl	local58, #2
031cc     6E E1 02 F1 | 	add	local60, local58
031d0     01 E0 06 F1 | 	add	local60, #1
031d4     5A E5 02 F6 | 	mov	local62, local38
031d8     02 E4 66 F0 | 	shl	local62, #2
031dc     1C 0E 06 F1 | 	add	objptr, #28
031e0     07 E7 02 FB | 	rdlong	local63, objptr
031e4     1C 0E 86 F1 | 	sub	objptr, #28
031e8     72 E7 02 F1 | 	add	local63, local62
031ec                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
031ec     73 E1 62 FC | 	wrlong	local60, local63
031f0     6B B5 02 F1 | 	add	local38, local55
031f4     68 B5 0A F2 | 	cmp	local38, local52 wz
031f8     50 FF 9F 5D |  if_ne	jmp	#LR__0094
031fc                 | LR__0095
031fc                 | LR__0096
031fc                 | ' 
031fc                 | ' 
031fc                 | ' 
031fc                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
031fc     01 00 00 FF 
03200     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03204     AC 01 90 CD |  if_b	jmp	#LR__0104
03208                 | ' 
03208                 | '   if timings[6]>0 'borders
03208     68 0E 06 F1 | 	add	objptr, #104
0320c     07 B3 02 FB | 	rdlong	local37, objptr
03210     68 0E 86 F1 | 	sub	objptr, #104
03214     00 B2 5E F2 | 	cmps	local37, #0 wcz
03218     D4 00 90 ED |  if_be	jmp	#LR__0101
0321c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0321c     00 B4 06 F6 | 	mov	local38, #0
03220     68 0E 06 F1 | 	add	objptr, #104
03224     07 E9 02 FB | 	rdlong	local64, objptr
03228     68 0E 86 F1 | 	sub	objptr, #104
0322c     01 E8 86 F1 | 	sub	local64, #1
03230     00 E8 5E F2 | 	cmps	local64, #0 wcz
03234     01 B8 06 16 |  if_a	mov	local40, #1
03238     01 B8 66 E6 |  if_be	neg	local40, #1
0323c     5C EB 02 F6 | 	mov	local65, local40
03240     5C E9 02 F1 | 	add	local64, local40
03244     E0 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03248     93 00 A0 FD | 	call	#FCACHE_LOAD_
0324c                 | LR__0097
0324c     5A ED 02 F6 | 	mov	local66, local38
03250     02 EC 66 F0 | 	shl	local66, #2
03254     1C 0E 06 F1 | 	add	objptr, #28
03258     07 EF 02 FB | 	rdlong	local67, objptr
0325c     1C 0E 86 F1 | 	sub	objptr, #28
03260     76 EF 02 F1 | 	add	local67, local66
03264                 | '       long[dl_ptr+4*i]:=$0
03264     77 01 68 FC | 	wrlong	#0, local67
03268     75 B5 02 F1 | 	add	local38, local65
0326c     74 B5 0A F2 | 	cmp	local38, local64 wz
03270     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
03274                 | LR__0098
03274                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03274     68 0E 06 F1 | 	add	objptr, #104
03278     07 B5 02 FB | 	rdlong	local38, objptr
0327c     18 0E 06 F1 | 	add	objptr, #24
03280     07 B9 02 FB | 	rdlong	local40, objptr
03284     5C B5 02 F1 | 	add	local38, local40
03288     0C 0E 06 F1 | 	add	objptr, #12
0328c     07 F1 02 FB | 	rdlong	local68, objptr
03290     01 F0 86 F1 | 	sub	local68, #1
03294     24 0E 86 F1 | 	sub	objptr, #36
03298     07 C3 02 FB | 	rdlong	local45, objptr
0329c     18 0E 06 F1 | 	add	objptr, #24
032a0     07 C5 02 FB | 	rdlong	local46, objptr
032a4     80 0E 86 F1 | 	sub	objptr, #128
032a8     62 C3 02 F1 | 	add	local45, local46
032ac     61 F1 5A F2 | 	cmps	local68, local45 wcz
032b0     01 C6 06 16 |  if_a	mov	local47, #1
032b4     01 C6 66 E6 |  if_be	neg	local47, #1
032b8     63 F3 02 F6 | 	mov	local69, local47
032bc     63 F1 02 F1 | 	add	local68, local47
032c0     64 CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
032c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032c8                 | LR__0099
032c8     5A F5 02 F6 | 	mov	local70, local38
032cc     02 F4 66 F0 | 	shl	local70, #2
032d0     1C 0E 06 F1 | 	add	objptr, #28
032d4     07 F7 02 FB | 	rdlong	local71, objptr
032d8     1C 0E 86 F1 | 	sub	objptr, #28
032dc     7A F7 02 F1 | 	add	local71, local70
032e0                 | '       long[dl_ptr+4*i]:=$0
032e0     7B 01 68 FC | 	wrlong	#0, local71
032e4     79 B5 02 F1 | 	add	local38, local69
032e8     78 B5 0A F2 | 	cmp	local38, local68 wz
032ec     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
032f0                 | LR__0100
032f0                 | LR__0101
032f0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
032f0     68 0E 06 F1 | 	add	objptr, #104
032f4     07 B5 02 FB | 	rdlong	local38, objptr
032f8     5A F9 02 F6 | 	mov	local72, local38
032fc     18 0E 06 F1 | 	add	objptr, #24
03300     07 D3 02 FB | 	rdlong	local53, objptr
03304     69 F9 02 F1 | 	add	local72, local53
03308     01 F8 86 F1 | 	sub	local72, #1
0330c     18 0E 86 F1 | 	sub	objptr, #24
03310     07 C7 02 FB | 	rdlong	local47, objptr
03314     68 0E 86 F1 | 	sub	objptr, #104
03318     63 F9 5A F2 | 	cmps	local72, local47 wcz
0331c     01 D4 06 16 |  if_a	mov	local54, #1
03320     01 D4 66 E6 |  if_be	neg	local54, #1
03324     6A FB 02 F6 | 	mov	local73, local54
03328     6A F9 02 F1 | 	add	local72, local54
0332c     50 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
03330     93 00 A0 FD | 	call	#FCACHE_LOAD_
03334                 | LR__0102
03334     5A FD 02 F6 | 	mov	local74, local38
03338     68 0E 06 F1 | 	add	objptr, #104
0333c     07 D9 02 FB | 	rdlong	local56, objptr
03340     6C FD 82 F1 | 	sub	local74, local56
03344     58 FD 42 F0 | 	shr	local74, local36
03348     28 0E 06 F1 | 	add	objptr, #40
0334c     07 D9 02 FB | 	rdlong	local56, objptr
03350     90 0E 86 F1 | 	sub	objptr, #144
03354     7E D9 02 FD | 	qmul	local56, local74
03358     18 FE 62 FD | 	getqx	local75
0335c     02 FE 66 F0 | 	shl	local75, #2
03360     07 01 03 FB | 	rdlong	local76, objptr
03364     7F 01 03 F1 | 	add	local76, local75
03368     2E 03 03 F6 | 	mov	local77, arg01
0336c     03 02 07 F5 | 	and	local77, #3
03370     81 01 03 F1 | 	add	local76, local77
03374                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03374     0C 00 67 F0 | 	shl	local76, #12
03378     02 00 07 F1 | 	add	local76, #2
0337c     2E 05 03 F6 | 	mov	local78, arg01
03380     30 04 07 F5 | 	and	local78, #48
03384     02 04 47 F0 | 	shr	local78, #2
03388     82 01 03 F1 | 	add	local76, local78
0338c     5A 07 03 F6 | 	mov	local79, local38
03390     02 06 67 F0 | 	shl	local79, #2
03394     1C 0E 06 F1 | 	add	objptr, #28
03398     07 09 03 FB | 	rdlong	local80, objptr
0339c     1C 0E 86 F1 | 	sub	objptr, #28
033a0     83 09 03 F1 | 	add	local80, local79
033a4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
033a4     84 01 63 FC | 	wrlong	local76, local80
033a8     7D B5 02 F1 | 	add	local38, local73
033ac     7C B5 0A F2 | 	cmp	local38, local72 wz
033b0     80 FF 9F 5D |  if_ne	jmp	#LR__0102
033b4                 | LR__0103
033b4                 | LR__0104
033b4                 | LR__0105
033b4     AF F0 03 F6 | 	mov	ptra, fp
033b8     BF 00 A0 FD | 	call	#popregs_
033bc                 | _hng030rm_spin2_setmode_ret
033bc     2D 00 64 FD | 	ret
033c0                 | 
033c0                 | ' 
033c0                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
033c0                 | _retrocog_spin2_serialcog
033c0     1C 5A 05 F6 | 	mov	COUNT_, #28
033c4     B0 00 A0 FD | 	call	#pushregs_
033c8                 | ' 
033c8                 | ' 'start serial and midi
033c8                 | ' 
033c8                 | ' serial_start(rxpin, txpin, baudrate)
033c8     20 5C 06 F6 | 	mov	arg01, #32
033cc     21 5E 06 F6 | 	mov	arg02, #33
033d0     A6 0E 00 FF 
033d4     00 60 06 F6 | 	mov	arg03, ##1920000
033d8     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033dc                 | ' serial_start(midiin,midiout,mbaudrate)
033dc     1D 5C 06 F6 | 	mov	arg01, #29
033e0     1E 5E 06 F6 | 	mov	arg02, #30
033e4     3D 00 00 FF 
033e8     12 60 06 F6 | 	mov	arg03, ##31250
033ec     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033f0                 | ' serial_start(srxpin,stxpin,sbaudrate)
033f0     42 0F 00 FF 
033f4     80 6A 06 F6 | 	mov	local01, ##2000000
033f8     3F 5C 06 F6 | 	mov	arg01, #63
033fc     3E 5E 06 F6 | 	mov	arg02, #62
03400     42 0F 00 FF 
03404     80 60 06 F6 | 	mov	arg03, ##2000000
03408     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0340c                 | ' 
0340c                 | ' mb:=(-1)
0340c     01 6C 66 F6 | 	neg	local02, #1
03410                 | ' b:=(-1)
03410     01 6E 66 F6 | 	neg	local03, #1
03414                 | ' 
03414                 | ' mousefront:=0
03414     00 70 06 F6 | 	mov	local04, #0
03418     08 0E 06 F1 | 	add	objptr, #8
0341c     07 01 68 FC | 	wrlong	#0, objptr
03420                 | ' mousetail:=0
03420     04 0E 06 F1 | 	add	objptr, #4
03424     07 01 68 FC | 	wrlong	#0, objptr
03428     0C 0E 86 F1 | 	sub	objptr, #12
0342c                 | ' kbdfront:=0
0342c     07 01 68 FC | 	wrlong	#0, objptr
03430                 | ' kbdtail:=0
03430     04 0E 06 F1 | 	add	objptr, #4
03434     07 01 68 FC | 	wrlong	#0, objptr
03438                 | ' midifront:=0
03438     0C 0E 06 F1 | 	add	objptr, #12
0343c     07 01 68 FC | 	wrlong	#0, objptr
03440                 | ' miditail:=0
03440     04 0E 06 F1 | 	add	objptr, #4
03444     07 01 68 FC | 	wrlong	#0, objptr
03448                 | ' serialfront:=0
03448     04 0E 06 F1 | 	add	objptr, #4
0344c     07 01 68 FC | 	wrlong	#0, objptr
03450                 | ' serialtail:=0
03450     04 0E 06 F1 | 	add	objptr, #4
03454     07 01 68 FC | 	wrlong	#0, objptr
03458                 | ' long[$30]:=0
03458     30 00 6C FC | 	wrlong	#0, #48
0345c                 | ' long[$34]:=0
0345c     34 00 6C FC | 	wrlong	#0, #52
03460                 | ' long[$38]:=0
03460     38 00 6C FC | 	wrlong	#0, #56
03464     1C 0E 86 F1 | 	sub	objptr, #28
03468                 | ' long[$3C]:=0
03468     3C 00 6C FC | 	wrlong	#0, #60
0346c                 | ' 
0346c                 | ' repeat
0346c                 | LR__0106
0346c                 | ' 
0346c                 | ' '  repeat 
0346c                 | '   rr:=rxcheck(rxpin)
0346c     20 5C 06 F6 | 	mov	arg01, #32
03470     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03474     15 73 02 F6 | 	mov	local05, result1
03478                 | '   mrr:=rxcheck(midiin)
03478     1D 5C 06 F6 | 	mov	arg01, #29
0347c     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03480     15 75 02 F6 | 	mov	local06, result1
03484                 | '   srr:=rxcheck(srxpin)
03484     3F 70 06 F6 | 	mov	local04, #63
03488     3F 5C 06 F6 | 	mov	arg01, #63
0348c     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03490     15 77 02 F6 | 	mov	local07, result1
03494     3B 79 02 F6 | 	mov	local08, local07
03498                 | ' 
03498                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03498                 | ' 
03498                 | '   
03498                 | ' ' midi. Must be >= $80 for a command
03498                 | ' '$80-$8F - 3 bytes note off. note, velocity
03498                 | ' '$90-$9F - 3 bytes note on, note, velocity
03498                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03498                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03498                 | ' '$C0-$CF - 2 bytes program change
03498                 | ' '$D0-$DF - 2 bytes mono aftertouch
03498                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03498                 | ' '$F0-$FF - 1 byte
03498                 | '   
03498                 | '   if srr>=0
03498     00 78 5E F2 | 	cmps	local08, #0 wcz
0349c     7C 00 90 CD |  if_b	jmp	#LR__0108
034a0                 | '   
034a0                 | '     if serialfront<>((serialtail-1) //32)
034a0     1C 0E 06 F1 | 	add	objptr, #28
034a4     07 77 02 FB | 	rdlong	local07, objptr
034a8     3B 71 02 F6 | 	mov	local04, local07
034ac     01 70 86 F1 | 	sub	local04, #1
034b0     38 6B 52 F6 | 	abs	local01, local04 wc
034b4     1F 6A 06 F5 | 	and	local01, #31
034b8     35 6B 62 C6 |  if_b	neg	local01, local01
034bc     04 0E 86 F1 | 	sub	objptr, #4
034c0     07 7B 02 FB | 	rdlong	local09, objptr
034c4     18 0E 86 F1 | 	sub	objptr, #24
034c8     3D 7D 02 F6 | 	mov	local10, local09
034cc     35 7D 0A F2 | 	cmp	local10, local01 wz
034d0     48 00 90 AD |  if_e	jmp	#LR__0107
034d4     18 0E 06 F1 | 	add	objptr, #24
034d8     07 7D 02 FB | 	rdlong	local10, objptr
034dc     01 00 00 FF 
034e0     08 0F 06 F1 | 	add	objptr, ##776
034e4     07 7D 02 F1 | 	add	local10, objptr
034e8     3E 7F 02 F6 | 	mov	local11, local10
034ec                 | '       serialbuf[serialfront]:=srr
034ec     3F 79 42 FC | 	wrbyte	local08, local11
034f0                 | '       serialfront+=1
034f0     01 00 00 FF 
034f4     08 0F 86 F1 | 	sub	objptr, ##776
034f8     07 6B 02 FB | 	rdlong	local01, objptr
034fc     01 6A 06 F1 | 	add	local01, #1
03500     07 6B 62 FC | 	wrlong	local01, objptr
03504                 | '       serialfront:=serialfront // 32
03504     35 77 02 F6 | 	mov	local07, local01
03508     3B 71 52 F6 | 	abs	local04, local07 wc
0350c     1F 70 06 F5 | 	and	local04, #31
03510     38 71 62 C6 |  if_b	neg	local04, local04
03514     07 71 62 FC | 	wrlong	local04, objptr
03518     18 0E 86 F1 | 	sub	objptr, #24
0351c                 | LR__0107
0351c                 | LR__0108
0351c                 | '     
0351c                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
0351c     80 74 5E F2 | 	cmps	local06, #128 wcz
03520     08 00 90 CD |  if_b	jmp	#LR__0109
03524     BF 74 5E F2 | 	cmps	local06, #191 wcz
03528     10 00 90 ED |  if_be	jmp	#LR__0110
0352c                 | LR__0109
0352c     E0 74 5E F2 | 	cmps	local06, #224 wcz
03530     1C 00 90 CD |  if_b	jmp	#LR__0111
03534     EF 74 5E F2 | 	cmps	local06, #239 wcz
03538     14 00 90 1D |  if_a	jmp	#LR__0111
0353c                 | LR__0110
0353c                 | '     mb:=2
0353c     02 6C 06 F6 | 	mov	local02, #2
03540     3A 71 02 F6 | 	mov	local04, local06
03544     18 70 66 F0 | 	shl	local04, #24
03548     38 81 02 F6 | 	mov	local12, local04
0354c                 | '     midireport:=mrr<<24
0354c     40 83 02 F6 | 	mov	local13, local12
03550                 | LR__0111
03550                 | ' 
03550                 | '   if (mrr>=$C0) && (mrr<=$DF)
03550     C0 74 5E F2 | 	cmps	local06, #192 wcz
03554     1C 00 90 CD |  if_b	jmp	#LR__0112
03558     DF 74 5E F2 | 	cmps	local06, #223 wcz
0355c     14 00 90 1D |  if_a	jmp	#LR__0112
03560                 | '     mb:=1
03560     01 6C 06 F6 | 	mov	local02, #1
03564     3A 71 02 F6 | 	mov	local04, local06
03568     18 70 66 F0 | 	shl	local04, #24
0356c     38 85 02 F6 | 	mov	local14, local04
03570                 | '     midireport:=mrr<<24
03570     42 83 02 F6 | 	mov	local13, local14
03574                 | LR__0112
03574                 | '   
03574                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03574     F0 74 5E F2 | 	cmps	local06, #240 wcz
03578     10 00 90 CD |  if_b	jmp	#LR__0113
0357c                 | '     mb:=4
0357c     04 6C 06 F6 | 	mov	local02, #4
03580     3A 87 02 F6 | 	mov	local15, local06
03584     18 86 66 F0 | 	shl	local15, #24
03588                 | '     midireport:=mrr<<24  
03588     43 83 02 F6 | 	mov	local13, local15
0358c                 | LR__0113
0358c                 | '   
0358c                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
0358c     80 74 5E F2 | 	cmps	local06, #128 wcz
03590     44 00 90 3D |  if_ae	jmp	#LR__0115
03594     00 6C 5E F2 | 	cmps	local02, #0 wcz
03598     3C 00 90 ED |  if_be	jmp	#LR__0115
0359c     00 74 5E F2 | 	cmps	local06, #0 wcz
035a0     34 00 90 CD |  if_b	jmp	#LR__0115
035a4                 | '     
035a4                 | '     mb--
035a4     36 71 02 F6 | 	mov	local04, local02
035a8     36 77 02 F6 | 	mov	local07, local02
035ac     01 76 86 F1 | 	sub	local07, #1
035b0     3B 6D 02 F6 | 	mov	local02, local07
035b4                 | '     if mb<3
035b4     03 6C 5E F2 | 	cmps	local02, #3 wcz
035b8     1C 00 90 3D |  if_ae	jmp	#LR__0114
035bc     36 89 02 F6 | 	mov	local16, local02
035c0     03 88 66 F0 | 	shl	local16, #3
035c4     3A 8B 02 F6 | 	mov	local17, local06
035c8     44 8B 62 F0 | 	shl	local17, local16
035cc                 | '       midireport+=mrr<<(mb<<3)
035cc     41 71 02 F6 | 	mov	local04, local13
035d0     45 71 02 F1 | 	add	local04, local17
035d4     38 83 02 F6 | 	mov	local13, local04
035d8                 | LR__0114
035d8                 | LR__0115
035d8                 | '   
035d8                 | '   if mb==0
035d8     00 6C 0E F2 | 	cmp	local02, #0 wz
035dc     84 00 90 5D |  if_ne	jmp	#LR__0117
035e0                 | '     
035e0                 | '     if midifront<>((miditail-1) //32)
035e0     14 0E 06 F1 | 	add	objptr, #20
035e4     07 77 02 FB | 	rdlong	local07, objptr
035e8     3B 71 02 F6 | 	mov	local04, local07
035ec     01 70 86 F1 | 	sub	local04, #1
035f0     38 6B 52 F6 | 	abs	local01, local04 wc
035f4     1F 6A 06 F5 | 	and	local01, #31
035f8     35 6B 62 C6 |  if_b	neg	local01, local01
035fc     04 0E 86 F1 | 	sub	objptr, #4
03600     07 7B 02 FB | 	rdlong	local09, objptr
03604     10 0E 86 F1 | 	sub	objptr, #16
03608     3D 7D 02 F6 | 	mov	local10, local09
0360c     35 7D 0A F2 | 	cmp	local10, local01 wz
03610     4C 00 90 AD |  if_e	jmp	#LR__0116
03614     10 0E 06 F1 | 	add	objptr, #16
03618     07 7D 02 FB | 	rdlong	local10, objptr
0361c     02 7C 66 F0 | 	shl	local10, #2
03620     01 00 00 FF 
03624     90 0E 06 F1 | 	add	objptr, ##656
03628     07 7D 02 F1 | 	add	local10, objptr
0362c     3E 8D 02 F6 | 	mov	local18, local10
03630                 | '       midibuf[midifront]:=midireport
03630     46 83 62 FC | 	wrlong	local13, local18
03634                 | '       midifront+=1
03634     01 00 00 FF 
03638     90 0E 86 F1 | 	sub	objptr, ##656
0363c     07 6B 02 FB | 	rdlong	local01, objptr
03640     01 6A 06 F1 | 	add	local01, #1
03644     07 6B 62 FC | 	wrlong	local01, objptr
03648                 | '       midifront:=midifront // 32
03648     35 77 02 F6 | 	mov	local07, local01
0364c     3B 71 52 F6 | 	abs	local04, local07 wc
03650     1F 70 06 F5 | 	and	local04, #31
03654     38 71 62 C6 |  if_b	neg	local04, local04
03658     07 71 62 FC | 	wrlong	local04, objptr
0365c     10 0E 86 F1 | 	sub	objptr, #16
03660                 | LR__0116
03660                 | '     mb:=(-1)
03660     01 6C 66 F6 | 	neg	local02, #1
03664                 | LR__0117
03664                 | ' 
03664                 | ' 'Keyboard and mouse
03664                 | ' 
03664                 | '   if (rr>=$80) && (rr<>$FF)
03664     80 72 5E F2 | 	cmps	local05, #128 wcz
03668     1C 00 90 CD |  if_b	jmp	#LR__0118
0366c     FF 72 0E F2 | 	cmp	local05, #255 wz
03670     14 00 90 AD |  if_e	jmp	#LR__0118
03674                 | '     b:=3
03674     03 6E 06 F6 | 	mov	local03, #3
03678     39 71 02 F6 | 	mov	local04, local05
0367c     18 70 66 F0 | 	shl	local04, #24
03680     38 8F 02 F6 | 	mov	local19, local04
03684                 | '     kbmreport:=rr<<24
03684     47 91 02 F6 | 	mov	local20, local19
03688                 | LR__0118
03688                 | '   
03688                 | '   if (rr<$80) && (b>0) && (rr>=0)
03688     80 72 5E F2 | 	cmps	local05, #128 wcz
0368c     38 00 90 3D |  if_ae	jmp	#LR__0119
03690     00 6E 5E F2 | 	cmps	local03, #0 wcz
03694     30 00 90 ED |  if_be	jmp	#LR__0119
03698     00 72 5E F2 | 	cmps	local05, #0 wcz
0369c     28 00 90 CD |  if_b	jmp	#LR__0119
036a0                 | '     b--
036a0     37 77 02 F6 | 	mov	local07, local03
036a4     01 76 86 F1 | 	sub	local07, #1
036a8     3B 6F 02 F6 | 	mov	local03, local07
036ac     37 93 02 F6 | 	mov	local21, local03
036b0     03 92 66 F0 | 	shl	local21, #3
036b4     39 95 02 F6 | 	mov	local22, local05
036b8     49 95 62 F0 | 	shl	local22, local21
036bc                 | '     kbmreport+=rr<<(b<<3)  
036bc     48 71 02 F6 | 	mov	local04, local20
036c0     4A 71 02 F1 | 	add	local04, local22
036c4     38 91 02 F6 | 	mov	local20, local04
036c8                 | LR__0119
036c8                 | '   
036c8                 | '   if (rr==$FF)
036c8     FF 72 0E F2 | 	cmp	local05, #255 wz
036cc                 | '     b:=0   
036cc     00 6E 06 A6 |  if_e	mov	local03, #0
036d0                 | ' 
036d0                 | '   if b==0  
036d0     00 6E 0E F2 | 	cmp	local03, #0 wz
036d4     14 01 90 5D |  if_ne	jmp	#LR__0124
036d8                 | '  
036d8                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
036d8     00 00 40 FF 
036dc     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
036e0     84 00 90 CD |  if_b	jmp	#LR__0121
036e4     00 80 43 FF 
036e8     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
036ec     78 00 90 3D |  if_ae	jmp	#LR__0121
036f0                 | '       if mousefront<>((mousetail-1) //128)
036f0     0C 0E 06 F1 | 	add	objptr, #12
036f4     07 77 02 FB | 	rdlong	local07, objptr
036f8     3B 71 02 F6 | 	mov	local04, local07
036fc     01 70 86 F1 | 	sub	local04, #1
03700     38 6B 52 F6 | 	abs	local01, local04 wc
03704     7F 6A 06 F5 | 	and	local01, #127
03708     35 6B 62 C6 |  if_b	neg	local01, local01
0370c     04 0E 86 F1 | 	sub	objptr, #4
03710     07 7B 02 FB | 	rdlong	local09, objptr
03714     08 0E 86 F1 | 	sub	objptr, #8
03718     3D 7D 02 F6 | 	mov	local10, local09
0371c     35 7D 0A F2 | 	cmp	local10, local01 wz
03720     44 00 90 AD |  if_e	jmp	#LR__0120
03724     08 0E 06 F1 | 	add	objptr, #8
03728     07 7D 02 FB | 	rdlong	local10, objptr
0372c     02 7C 66 F0 | 	shl	local10, #2
03730     98 0E 06 F1 | 	add	objptr, #152
03734     07 7D 02 F1 | 	add	local10, objptr
03738     3E 97 02 F6 | 	mov	local23, local10
0373c                 | '         mousebuf[mousefront]:=kbmreport
0373c     4B 91 62 FC | 	wrlong	local20, local23
03740                 | '         mousefront+=1
03740     98 0E 86 F1 | 	sub	objptr, #152
03744     07 6B 02 FB | 	rdlong	local01, objptr
03748     01 6A 06 F1 | 	add	local01, #1
0374c     07 6B 62 FC | 	wrlong	local01, objptr
03750                 | '         mousefront:=mousefront // 128
03750     35 77 02 F6 | 	mov	local07, local01
03754     3B 71 52 F6 | 	abs	local04, local07 wc
03758     7F 70 06 F5 | 	and	local04, #127
0375c     38 71 62 C6 |  if_b	neg	local04, local04
03760     07 71 62 FC | 	wrlong	local04, objptr
03764     08 0E 86 F1 | 	sub	objptr, #8
03768                 | LR__0120
03768                 | LR__0121
03768                 | '     b:=(-1)
03768     01 6E 66 F6 | 	neg	local03, #1
0376c                 | ' 
0376c                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
0376c     00 80 43 FF 
03770     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03774     70 00 90 CD |  if_b	jmp	#LR__0123
03778     00 00 45 FF 
0377c     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03780     64 00 90 3D |  if_ae	jmp	#LR__0123
03784                 | '       if kbdfront<>((kbdtail-1) //32)
03784     04 0E 06 F1 | 	add	objptr, #4
03788     07 77 02 FB | 	rdlong	local07, objptr
0378c     04 0E 86 F1 | 	sub	objptr, #4
03790     3B 71 02 F6 | 	mov	local04, local07
03794     01 70 86 F1 | 	sub	local04, #1
03798     38 6B 52 F6 | 	abs	local01, local04 wc
0379c     1F 6A 06 F5 | 	and	local01, #31
037a0     35 6B 62 C6 |  if_b	neg	local01, local01
037a4     07 7D 02 FB | 	rdlong	local10, objptr
037a8     35 7D 0A F2 | 	cmp	local10, local01 wz
037ac     38 00 90 AD |  if_e	jmp	#LR__0122
037b0     07 6B 02 FB | 	rdlong	local01, objptr
037b4     02 6A 66 F0 | 	shl	local01, #2
037b8     20 0E 06 F1 | 	add	objptr, #32
037bc     07 6B 02 F1 | 	add	local01, objptr
037c0     35 99 02 F6 | 	mov	local24, local01
037c4                 | '         kbdbuf[kbdfront]:=kbmreport
037c4     4C 91 62 FC | 	wrlong	local20, local24
037c8                 | '         kbdfront+=1
037c8     20 0E 86 F1 | 	sub	objptr, #32
037cc     07 77 02 FB | 	rdlong	local07, objptr
037d0     01 76 06 F1 | 	add	local07, #1
037d4     07 77 62 FC | 	wrlong	local07, objptr
037d8                 | '         kbdfront:=kbdfront // 32
037d8     3B 71 52 F6 | 	abs	local04, local07 wc
037dc     1F 70 06 F5 | 	and	local04, #31
037e0     38 71 62 C6 |  if_b	neg	local04, local04
037e4     07 71 62 FC | 	wrlong	local04, objptr
037e8                 | LR__0122
037e8                 | LR__0123
037e8                 | '     b:=(-1)
037e8     01 6E 66 F6 | 	neg	local03, #1
037ec                 | LR__0124
037ec                 | ' 
037ec                 | ' 
037ec                 | '   if long[$30]==0
037ec     30 70 0E FB | 	rdlong	local04, #48 wz
037f0     5C 00 90 5D |  if_ne	jmp	#LR__0126
037f4                 | '     if kbdfront<>kbdtail
037f4     07 71 02 FB | 	rdlong	local04, objptr
037f8     04 0E 06 F1 | 	add	objptr, #4
037fc     07 6B 02 FB | 	rdlong	local01, objptr
03800     04 0E 86 F1 | 	sub	objptr, #4
03804     35 71 0A F2 | 	cmp	local04, local01 wz
03808     44 00 90 AD |  if_e	jmp	#LR__0125
0380c     04 0E 06 F1 | 	add	objptr, #4
03810     07 9B 02 FB | 	rdlong	local25, objptr
03814     02 9A 66 F0 | 	shl	local25, #2
03818     1C 0E 06 F1 | 	add	objptr, #28
0381c     07 9B 02 F1 | 	add	local25, objptr
03820                 | '       long[$30]:=kbdbuf[kbdtail]
03820     4D 71 02 FB | 	rdlong	local04, local25
03824     30 70 66 FC | 	wrlong	local04, #48
03828                 | '       kbdtail++
03828     1C 0E 86 F1 | 	sub	objptr, #28
0382c     07 7D 02 FB | 	rdlong	local10, objptr
03830     3E 6B 02 F6 | 	mov	local01, local10
03834     01 6A 06 F1 | 	add	local01, #1
03838     07 6B 62 FC | 	wrlong	local01, objptr
0383c                 | '       kbdtail:= kbdtail // 32
0383c     35 71 52 F6 | 	abs	local04, local01 wc
03840     1F 70 06 F5 | 	and	local04, #31
03844     38 71 62 C6 |  if_b	neg	local04, local04
03848     07 71 62 FC | 	wrlong	local04, objptr
0384c     04 0E 86 F1 | 	sub	objptr, #4
03850                 | LR__0125
03850                 | LR__0126
03850                 | '       
03850                 | '   if long[$34]==0
03850     34 70 0E FB | 	rdlong	local04, #52 wz
03854     64 00 90 5D |  if_ne	jmp	#LR__0128
03858                 | '     if mousefront<>mousetail
03858     08 0E 06 F1 | 	add	objptr, #8
0385c     07 71 02 FB | 	rdlong	local04, objptr
03860     04 0E 06 F1 | 	add	objptr, #4
03864     07 7D 02 FB | 	rdlong	local10, objptr
03868     0C 0E 86 F1 | 	sub	objptr, #12
0386c     3E 6B 02 F6 | 	mov	local01, local10
03870     35 71 0A F2 | 	cmp	local04, local01 wz
03874     44 00 90 AD |  if_e	jmp	#LR__0127
03878     0C 0E 06 F1 | 	add	objptr, #12
0387c     07 9D 02 FB | 	rdlong	local26, objptr
03880     02 9C 66 F0 | 	shl	local26, #2
03884     94 0E 06 F1 | 	add	objptr, #148
03888     07 9D 02 F1 | 	add	local26, objptr
0388c                 | '       long[$34]:=mousebuf[mousetail]
0388c     4E 71 02 FB | 	rdlong	local04, local26
03890     34 70 66 FC | 	wrlong	local04, #52
03894                 | '       mousetail++
03894     94 0E 86 F1 | 	sub	objptr, #148
03898     07 7D 02 FB | 	rdlong	local10, objptr
0389c     3E 6B 02 F6 | 	mov	local01, local10
038a0     01 6A 06 F1 | 	add	local01, #1
038a4     07 6B 62 FC | 	wrlong	local01, objptr
038a8                 | '       mousetail:= mousetail // 128
038a8     35 71 52 F6 | 	abs	local04, local01 wc
038ac     7F 70 06 F5 | 	and	local04, #127
038b0     38 71 62 C6 |  if_b	neg	local04, local04
038b4     07 71 62 FC | 	wrlong	local04, objptr
038b8     0C 0E 86 F1 | 	sub	objptr, #12
038bc                 | LR__0127
038bc                 | LR__0128
038bc                 | ' 
038bc                 | '       
038bc                 | '   if long[$38]==0
038bc     38 70 0E FB | 	rdlong	local04, #56 wz
038c0     6C 00 90 5D |  if_ne	jmp	#LR__0130
038c4                 | '     if midifront<>miditail
038c4     10 0E 06 F1 | 	add	objptr, #16
038c8     07 71 02 FB | 	rdlong	local04, objptr
038cc     04 0E 06 F1 | 	add	objptr, #4
038d0     07 7D 02 FB | 	rdlong	local10, objptr
038d4     14 0E 86 F1 | 	sub	objptr, #20
038d8     3E 6B 02 F6 | 	mov	local01, local10
038dc     35 71 0A F2 | 	cmp	local04, local01 wz
038e0     4C 00 90 AD |  if_e	jmp	#LR__0129
038e4     14 0E 06 F1 | 	add	objptr, #20
038e8     07 9F 02 FB | 	rdlong	local27, objptr
038ec     02 9E 66 F0 | 	shl	local27, #2
038f0     01 00 00 FF 
038f4     8C 0E 06 F1 | 	add	objptr, ##652
038f8     07 9F 02 F1 | 	add	local27, objptr
038fc                 | '       long[$38]:=midibuf[miditail]
038fc     4F 71 02 FB | 	rdlong	local04, local27
03900     38 70 66 FC | 	wrlong	local04, #56
03904                 | '       miditail++
03904     01 00 00 FF 
03908     8C 0E 86 F1 | 	sub	objptr, ##652
0390c     07 7D 02 FB | 	rdlong	local10, objptr
03910     3E 6B 02 F6 | 	mov	local01, local10
03914     01 6A 06 F1 | 	add	local01, #1
03918     07 6B 62 FC | 	wrlong	local01, objptr
0391c                 | '       miditail:= miditail // 32
0391c     35 71 52 F6 | 	abs	local04, local01 wc
03920     1F 70 06 F5 | 	and	local04, #31
03924     38 71 62 C6 |  if_b	neg	local04, local04
03928     07 71 62 FC | 	wrlong	local04, objptr
0392c     14 0E 86 F1 | 	sub	objptr, #20
03930                 | LR__0129
03930                 | LR__0130
03930                 | '       
03930                 | '   if long[$3c]==0
03930     3C 70 0E FB | 	rdlong	local04, #60 wz
03934     34 FB 9F 5D |  if_ne	jmp	#LR__0106
03938                 | '     if serialfront<>serialtail
03938     18 0E 06 F1 | 	add	objptr, #24
0393c     07 71 02 FB | 	rdlong	local04, objptr
03940     04 0E 06 F1 | 	add	objptr, #4
03944     07 7D 02 FB | 	rdlong	local10, objptr
03948     1C 0E 86 F1 | 	sub	objptr, #28
0394c     3E 6B 02 F6 | 	mov	local01, local10
03950     35 71 0A F2 | 	cmp	local04, local01 wz
03954     14 FB 9F AD |  if_e	jmp	#LR__0106
03958                 | '       byte[$3c]:=255
03958     3C FE 4D FC | 	wrbyte	#255, #60
0395c     1C 0E 06 F1 | 	add	objptr, #28
03960     07 A1 02 FB | 	rdlong	local28, objptr
03964     01 00 00 FF 
03968     04 0F 06 F1 | 	add	objptr, ##772
0396c     07 A1 02 F1 | 	add	local28, objptr
03970                 | '       byte[$3D]:=serialbuf[serialtail]
03970     50 71 C2 FA | 	rdbyte	local04, local28
03974     3D 70 46 FC | 	wrbyte	local04, #61
03978                 | '       serialtail++
03978     01 00 00 FF 
0397c     04 0F 86 F1 | 	sub	objptr, ##772
03980     07 7D 02 FB | 	rdlong	local10, objptr
03984     3E 6B 02 F6 | 	mov	local01, local10
03988     01 6A 06 F1 | 	add	local01, #1
0398c     07 6B 62 FC | 	wrlong	local01, objptr
03990                 | '       serialtail:= serialtail // 32
03990     35 71 52 F6 | 	abs	local04, local01 wc
03994     1F 70 06 F5 | 	and	local04, #31
03998     38 71 62 C6 |  if_b	neg	local04, local04
0399c     07 71 62 FC | 	wrlong	local04, objptr
039a0     1C 0E 86 F1 | 	sub	objptr, #28
039a4     C4 FA 9F FD | 	jmp	#LR__0106
039a8     AF F0 03 F6 | 	mov	ptra, fp
039ac     BF 00 A0 FD | 	call	#popregs_
039b0                 | _retrocog_spin2_serialcog_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | '       
039b4                 | ' 
039b4                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
039b4                 | ' 
039b4                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
039b4                 | _retrocog_spin2_serial_start
039b4     04 5A 05 F6 | 	mov	COUNT_, #4
039b8     B0 00 A0 FD | 	call	#pushregs_
039bc     2E 6B 02 F6 | 	mov	local01, arg01
039c0     2F 6D 02 F6 | 	mov	local02, arg02
039c4                 | ' 
039c4                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
039c4     14 5C 06 FB | 	rdlong	arg01, #20
039c8     10 5E C6 F9 | 	decod	arg02, #16
039cc     2F 5D 02 FD | 	qmul	arg01, arg02
039d0     19 6E 62 FD | 	getqy	local03
039d4     18 70 62 FD | 	getqx	local04
039d8     28 6E 62 FD | 	setq	local03
039dc     30 71 12 FD | 	qdiv	local04, arg03
039e0     18 2A 62 FD | 	getqx	result1
039e4     15 61 02 F6 | 	mov	arg03, result1
039e8     FE FF 7F FF 
039ec     00 60 06 F5 | 	and	arg03, ##-1024
039f0                 | ' bitmode |= 7                                                  ' set bits (8)
039f0     07 60 46 F5 | 	or	arg03, #7
039f4                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
039f4     40 6A 62 FD | 	dirl	local01
039f8     08 00 80 FF 
039fc     35 7D 08 FC | 	wrpin	##4158, local01
03a00     35 61 12 FC | 	wxpin	arg03, local01
03a04     35 01 28 FC | 	wypin	#0, local01
03a08     41 6A 62 FD | 	dirh	local01
03a0c                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03a0c     40 6C 62 FD | 	dirl	local02
03a10     36 F9 08 FC | 	wrpin	#124, local02
03a14     36 61 12 FC | 	wxpin	arg03, local02
03a18     36 01 28 FC | 	wypin	#0, local02
03a1c     41 6C 62 FD | 	dirh	local02
03a20                 | ' pinhigh(rxpin)
03a20     59 6A 62 FD | 	drvh	local01
03a24     AF F0 03 F6 | 	mov	ptra, fp
03a28     BF 00 A0 FD | 	call	#popregs_
03a2c                 | _retrocog_spin2_serial_start_ret
03a2c     2D 00 64 FD | 	ret
03a30                 | 
03a30                 | ' 
03a30                 | ' pub rxcheck(pin) : rxbyte | check
03a30                 | _retrocog_spin2_rxcheck
03a30     03 5A 05 F6 | 	mov	COUNT_, #3
03a34     B0 00 A0 FD | 	call	#pushregs_
03a38     2E 6B 02 F6 | 	mov	local01, arg01
03a3c                 | ' 
03a3c                 | ' '' Check for serial input
03a3c                 | ' '' -- returns -1 if nothing available
03a3c                 | ' 
03a3c                 | '   rxbyte := -1
03a3c     01 6C 66 F6 | 	neg	local02, #1
03a40                 | '   check := pinr(pin)
03a40     35 5D 02 F6 | 	mov	arg01, local01
03a44     6C 26 B0 FD | 	call	#__system___pinread
03a48     15 6F 0A F6 | 	mov	local03, result1 wz
03a4c                 | '   if (check)
03a4c                 | '     rxbyte := rdpin(pin) >> 24
03a4c     00 6C 06 56 |  if_ne	mov	local02, #0
03a50     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03a54     18 6C 46 50 |  if_ne	shr	local02, #24
03a58     36 2B 02 F6 | 	mov	result1, local02
03a5c     AF F0 03 F6 | 	mov	ptra, fp
03a60     BF 00 A0 FD | 	call	#popregs_
03a64                 | _retrocog_spin2_rxcheck_ret
03a64     2D 00 64 FD | 	ret
03a68                 | 
03a68                 | _trackerplayer_spin2_initModule
03a68     3E 5A 05 F6 | 	mov	COUNT_, #62
03a6c     B0 00 A0 FD | 	call	#pushregs_
03a70     24 F1 07 F1 | 	add	ptra, #292
03a74     AF 5C 62 FC | 	wrlong	arg01, fp
03a78     04 5E 05 F1 | 	add	fp, #4
03a7c     AF 5E 62 FC | 	wrlong	arg02, fp
03a80     04 5E 85 F1 | 	sub	fp, #4
03a84     AF 6A 02 FB | 	rdlong	local01, fp
03a88     02 00 00 FF 
03a8c     38 6A 06 F1 | 	add	local01, ##1080
03a90                 | ' 
03a90                 | '   ' Set some data pointers
03a90                 | '   magicFour      := hubPtr + 1080
03a90     9D 0E 06 F1 | 	add	objptr, #157
03a94     07 6B 62 FC | 	wrlong	local01, objptr
03a98                 | '   nameStr        := hubPtr
03a98     AF 6C 02 FB | 	rdlong	local02, fp
03a9c     97 0E 86 F1 | 	sub	objptr, #151
03aa0     07 6D 62 FC | 	wrlong	local02, objptr
03aa4     AF 6E 02 FB | 	rdlong	local03, fp
03aa8     14 6E 06 F1 | 	add	local03, #20
03aac                 | '   samplesInfoLut := hubPtr + 20
03aac     04 0E 06 F1 | 	add	objptr, #4
03ab0     07 6F 62 FC | 	wrlong	local03, objptr
03ab4                 | ' 
03ab4                 | '   ' Is this a 31 sample module?
03ab4                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03ab4     93 0E 06 F1 | 	add	objptr, #147
03ab8     07 6D 02 FB | 	rdlong	local02, objptr
03abc     9D 0E 86 F1 | 	sub	objptr, #157
03ac0     36 71 C2 FA | 	rdbyte	local04, local02
03ac4     4D 70 0E F2 | 	cmp	local04, #77 wz
03ac8     48 01 90 5D |  if_ne	jmp	#LR__0134
03acc     9D 0E 06 F1 | 	add	objptr, #157
03ad0     07 73 02 FB | 	rdlong	local05, objptr
03ad4     9D 0E 86 F1 | 	sub	objptr, #157
03ad8     02 72 06 F1 | 	add	local05, #2
03adc     39 75 C2 FA | 	rdbyte	local06, local05
03ae0     4B 74 0E F2 | 	cmp	local06, #75 wz
03ae4     2C 01 90 5D |  if_ne	jmp	#LR__0134
03ae8     AF 76 02 FB | 	rdlong	local07, fp
03aec     01 00 00 FF 
03af0     B6 77 06 F1 | 	add	local07, ##950
03af4                 | '     songLength          := byte[hubPtr + 950]
03af4     3B 6D C2 FA | 	rdbyte	local02, local07
03af8     9A 0E 06 F1 | 	add	objptr, #154
03afc     07 6D 42 FC | 	wrbyte	local02, objptr
03b00     AF 78 02 FB | 	rdlong	local08, fp
03b04     01 00 00 FF 
03b08     B7 79 06 F1 | 	add	local08, ##951
03b0c                 | '     unknown1            := byte[hubPtr + 951]
03b0c     3C 6D C2 FA | 	rdbyte	local02, local08
03b10     02 0E 06 F1 | 	add	objptr, #2
03b14     07 6D 42 FC | 	wrbyte	local02, objptr
03b18     AF 7A 02 FB | 	rdlong	local09, fp
03b1c     01 00 00 FF 
03b20     B8 7B 06 F1 | 	add	local09, ##952
03b24                 | '     songPositionsLut    :=      hubPtr + 952
03b24     06 0E 86 F1 | 	sub	objptr, #6
03b28     07 7B 62 FC | 	wrlong	local09, objptr
03b2c     AF 7C 02 FB | 	rdlong	local10, fp
03b30     02 00 00 FF 
03b34     3C 7C 06 F1 | 	add	local10, ##1084
03b38                 | '     patternsData        :=      hubPtr + 1084
03b38     04 0E 86 F1 | 	sub	objptr, #4
03b3c     07 7D 62 FC | 	wrlong	local10, objptr
03b40                 | '     numberOfInstruments := 31
03b40     14 0E 06 F1 | 	add	objptr, #20
03b44     07 3F 48 FC | 	wrbyte	#31, objptr
03b48                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03b48     0B 0E 86 F1 | 	sub	objptr, #11
03b4c     07 01 48 FC | 	wrbyte	#0, objptr
03b50     9B 0E 86 F1 | 	sub	objptr, #155
03b54                 | '     repeat i from 952 to 1079
03b54     08 5E 05 F1 | 	add	fp, #8
03b58     01 00 80 FF 
03b5c     AF 70 6B FC | 	wrlong	##952, fp
03b60     08 5E 85 F1 | 	sub	fp, #8
03b64     08 C5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
03b68     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b6c                 | LR__0131
03b6c                 | '       if byte[hubPtr][i] > numberOfPatterns
03b6c     AF 7E 02 FB | 	rdlong	local11, fp
03b70     08 5E 05 F1 | 	add	fp, #8
03b74     AF 70 02 FB | 	rdlong	local04, fp
03b78     08 5E 85 F1 | 	sub	fp, #8
03b7c     3F 71 02 F1 | 	add	local04, local11
03b80     38 75 C2 FA | 	rdbyte	local06, local04
03b84     9B 0E 06 F1 | 	add	objptr, #155
03b88     07 81 C2 FA | 	rdbyte	local12, objptr
03b8c     9B 0E 86 F1 | 	sub	objptr, #155
03b90     40 75 5A F2 | 	cmps	local06, local12 wcz
03b94     24 00 90 ED |  if_be	jmp	#LR__0132
03b98     AF 7E 02 FB | 	rdlong	local11, fp
03b9c     08 5E 05 F1 | 	add	fp, #8
03ba0     AF 82 02 FB | 	rdlong	local13, fp
03ba4     08 5E 85 F1 | 	sub	fp, #8
03ba8     3F 83 02 F1 | 	add	local13, local11
03bac                 | '         numberOfPatterns := byte[hubPtr][i]
03bac     41 85 C2 FA | 	rdbyte	local14, local13
03bb0     9B 0E 06 F1 | 	add	objptr, #155
03bb4     07 85 42 FC | 	wrbyte	local14, objptr
03bb8     9B 0E 86 F1 | 	sub	objptr, #155
03bbc                 | LR__0132
03bbc     08 5E 05 F1 | 	add	fp, #8
03bc0     AF 84 02 FB | 	rdlong	local14, fp
03bc4     01 84 06 F1 | 	add	local14, #1
03bc8     AF 84 62 FC | 	wrlong	local14, fp
03bcc     08 5E 85 F1 | 	sub	fp, #8
03bd0     02 00 00 FF 
03bd4     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03bd8     90 FF 9F CD |  if_b	jmp	#LR__0131
03bdc                 | LR__0133
03bdc                 | '     numberOfPatterns++
03bdc     9B 0E 06 F1 | 	add	objptr, #155
03be0     07 85 C2 FA | 	rdbyte	local14, objptr
03be4     07 71 C2 FA | 	rdbyte	local04, objptr
03be8     01 70 06 F1 | 	add	local04, #1
03bec     07 71 42 FC | 	wrbyte	local04, objptr
03bf0     07 87 C2 FA | 	rdbyte	local15, objptr
03bf4     0A 86 66 F0 | 	shl	local15, #10
03bf8     09 0E 86 F1 | 	sub	objptr, #9
03bfc     07 89 02 FB | 	rdlong	local16, objptr
03c00     43 89 02 F1 | 	add	local16, local15
03c04                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03c04     84 0E 86 F1 | 	sub	objptr, #132
03c08     07 89 62 FC | 	wrlong	local16, objptr
03c0c     0E 0E 86 F1 | 	sub	objptr, #14
03c10                 | ' 
03c10                 | '   ' This must be an oldschool 15 sample soundtracker module
03c10                 | '   else
03c10     18 01 90 FD | 	jmp	#LR__0138
03c14                 | LR__0134
03c14     AF 8A 02 FB | 	rdlong	local17, fp
03c18     D6 8B 06 F1 | 	add	local17, #470
03c1c                 | '     songLength          := byte[hubPtr + 470]
03c1c     45 6D C2 FA | 	rdbyte	local02, local17
03c20     9A 0E 06 F1 | 	add	objptr, #154
03c24     07 6D 42 FC | 	wrbyte	local02, objptr
03c28     AF 8C 02 FB | 	rdlong	local18, fp
03c2c     D7 8D 06 F1 | 	add	local18, #471
03c30                 | '     unknown1            := byte[hubPtr + 471]
03c30     46 6D C2 FA | 	rdbyte	local02, local18
03c34     02 0E 06 F1 | 	add	objptr, #2
03c38     07 6D 42 FC | 	wrbyte	local02, objptr
03c3c     AF 8E 02 FB | 	rdlong	local19, fp
03c40     D8 8F 06 F1 | 	add	local19, #472
03c44                 | '     songPositionsLut    :=      hubPtr + 472
03c44     06 0E 86 F1 | 	sub	objptr, #6
03c48     07 8F 62 FC | 	wrlong	local19, objptr
03c4c     AF 90 02 FB | 	rdlong	local20, fp
03c50     01 00 00 FF 
03c54     58 90 06 F1 | 	add	local20, ##600
03c58                 | '     patternsData        :=      hubPtr + 600
03c58     04 0E 86 F1 | 	sub	objptr, #4
03c5c     07 91 62 FC | 	wrlong	local20, objptr
03c60                 | '     numberOfInstruments := 15
03c60     14 0E 06 F1 | 	add	objptr, #20
03c64     07 1F 48 FC | 	wrbyte	#15, objptr
03c68                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c68     0B 0E 86 F1 | 	sub	objptr, #11
03c6c     07 01 48 FC | 	wrbyte	#0, objptr
03c70     9B 0E 86 F1 | 	sub	objptr, #155
03c74                 | '     repeat i from 472 to 599
03c74     08 5E 05 F1 | 	add	fp, #8
03c78     AF B0 6B FC | 	wrlong	#472, fp
03c7c     08 5E 85 F1 | 	sub	fp, #8
03c80     EC C3 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
03c84     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c88                 | LR__0135
03c88                 | '       if byte[hubPtr][i] > numberOfPatterns
03c88     AF 7E 02 FB | 	rdlong	local11, fp
03c8c     08 5E 05 F1 | 	add	fp, #8
03c90     AF 70 02 FB | 	rdlong	local04, fp
03c94     08 5E 85 F1 | 	sub	fp, #8
03c98     3F 71 02 F1 | 	add	local04, local11
03c9c     38 75 C2 FA | 	rdbyte	local06, local04
03ca0     9B 0E 06 F1 | 	add	objptr, #155
03ca4     07 81 C2 FA | 	rdbyte	local12, objptr
03ca8     9B 0E 86 F1 | 	sub	objptr, #155
03cac     40 75 5A F2 | 	cmps	local06, local12 wcz
03cb0     24 00 90 ED |  if_be	jmp	#LR__0136
03cb4     AF 7E 02 FB | 	rdlong	local11, fp
03cb8     08 5E 05 F1 | 	add	fp, #8
03cbc     AF 92 02 FB | 	rdlong	local21, fp
03cc0     08 5E 85 F1 | 	sub	fp, #8
03cc4     3F 93 02 F1 | 	add	local21, local11
03cc8                 | '         numberOfPatterns := byte[hubPtr][i]
03cc8     49 85 C2 FA | 	rdbyte	local14, local21
03ccc     9B 0E 06 F1 | 	add	objptr, #155
03cd0     07 85 42 FC | 	wrbyte	local14, objptr
03cd4     9B 0E 86 F1 | 	sub	objptr, #155
03cd8                 | LR__0136
03cd8     08 5E 05 F1 | 	add	fp, #8
03cdc     AF 84 02 FB | 	rdlong	local14, fp
03ce0     01 84 06 F1 | 	add	local14, #1
03ce4     AF 84 62 FC | 	wrlong	local14, fp
03ce8     08 5E 85 F1 | 	sub	fp, #8
03cec     01 00 00 FF 
03cf0     58 84 5E F2 | 	cmps	local14, ##600 wcz
03cf4     90 FF 9F CD |  if_b	jmp	#LR__0135
03cf8                 | LR__0137
03cf8                 | '     numberOfPatterns++
03cf8     9B 0E 06 F1 | 	add	objptr, #155
03cfc     07 85 C2 FA | 	rdbyte	local14, objptr
03d00     07 71 C2 FA | 	rdbyte	local04, objptr
03d04     01 70 06 F1 | 	add	local04, #1
03d08     07 71 42 FC | 	wrbyte	local04, objptr
03d0c     07 95 C2 FA | 	rdbyte	local22, objptr
03d10     0A 94 66 F0 | 	shl	local22, #10
03d14     09 0E 86 F1 | 	sub	objptr, #9
03d18     07 97 02 FB | 	rdlong	local23, objptr
03d1c     4A 97 02 F1 | 	add	local23, local22
03d20                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d20     84 0E 86 F1 | 	sub	objptr, #132
03d24     07 97 62 FC | 	wrlong	local23, objptr
03d28     0E 0E 86 F1 | 	sub	objptr, #14
03d2c                 | LR__0138
03d2c                 | ' 
03d2c                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03d2c                 | '   tmpPtr := sampleDataPtr
03d2c     0E 0E 06 F1 | 	add	objptr, #14
03d30     07 6D 02 FB | 	rdlong	local02, objptr
03d34     0C 5E 05 F1 | 	add	fp, #12
03d38     AF 6C 62 FC | 	wrlong	local02, fp
03d3c                 | '   repeat i from 1 to numberOfInstruments
03d3c     04 5E 85 F1 | 	sub	fp, #4
03d40     AF 02 68 FC | 	wrlong	#1, fp
03d44     08 5E 85 F1 | 	sub	fp, #8
03d48     98 0E 06 F1 | 	add	objptr, #152
03d4c     07 71 C2 FA | 	rdbyte	local04, objptr
03d50     01 70 5E F2 | 	cmps	local04, #1 wcz
03d54     01 84 06 16 |  if_a	mov	local14, #1
03d58     01 84 66 E6 |  if_be	neg	local14, #1
03d5c     42 99 02 F6 | 	mov	local24, local14
03d60     07 9B C2 FA | 	rdbyte	local25, objptr
03d64     A6 0E 86 F1 | 	sub	objptr, #166
03d68     4C 9B 02 F1 | 	add	local25, local24
03d6c                 | LR__0139
03d6c     08 5E 05 F1 | 	add	fp, #8
03d70     AF 9C 02 FB | 	rdlong	local26, fp
03d74     01 9C 86 F1 | 	sub	local26, #1
03d78     02 9C 66 F0 | 	shl	local26, #2
03d7c     12 0E 06 F1 | 	add	objptr, #18
03d80     07 9D 02 F1 | 	add	local26, objptr
03d84                 | '     samplesPtrLut[i-1] := tmpPtr
03d84     04 5E 05 F1 | 	add	fp, #4
03d88     AF 80 02 FB | 	rdlong	local12, fp
03d8c     4E 81 62 FC | 	wrlong	local12, local26
03d90     18 5E 05 F1 | 	add	fp, #24
03d94     AF 5E 02 F6 | 	mov	arg02, fp
03d98     14 5E 85 F1 | 	sub	fp, #20
03d9c     AF 60 02 F6 | 	mov	arg03, fp
03da0     04 5E 05 F1 | 	add	fp, #4
03da4     AF 62 02 F6 | 	mov	arg04, fp
03da8     04 5E 05 F1 | 	add	fp, #4
03dac     AF 64 02 F6 | 	mov	arg05, fp
03db0     04 5E 05 F1 | 	add	fp, #4
03db4     AF 66 02 F6 | 	mov	arg06, fp
03db8     04 5E 05 F1 | 	add	fp, #4
03dbc     AF 68 02 F6 | 	mov	arg07, fp
03dc0                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03dc0     18 5E 85 F1 | 	sub	fp, #24
03dc4     AF 5C 02 FB | 	rdlong	arg01, fp
03dc8     08 5E 85 F1 | 	sub	fp, #8
03dcc     12 0E 86 F1 | 	sub	objptr, #18
03dd0     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03dd4                 | '     tmpPtr += samLength
03dd4     0C 5E 05 F1 | 	add	fp, #12
03dd8     AF 80 02 FB | 	rdlong	local12, fp
03ddc     04 5E 05 F1 | 	add	fp, #4
03de0     AF 9E 02 FB | 	rdlong	local27, fp
03de4     4F 81 02 F1 | 	add	local12, local27
03de8     04 5E 85 F1 | 	sub	fp, #4
03dec     AF 80 62 FC | 	wrlong	local12, fp
03df0     04 5E 85 F1 | 	sub	fp, #4
03df4     AF 80 02 FB | 	rdlong	local12, fp
03df8     4C 81 02 F1 | 	add	local12, local24
03dfc     AF 80 62 FC | 	wrlong	local12, fp
03e00     08 5E 85 F1 | 	sub	fp, #8
03e04     4D 81 0A F2 | 	cmp	local12, local25 wz
03e08     60 FF 9F 5D |  if_ne	jmp	#LR__0139
03e0c                 | ' 
03e0c                 | '   ' Below this point, all play routine variables are resest to their default values
03e0c                 | '   tickCounter                 := 0
03e0c     A1 0E 06 F1 | 	add	objptr, #161
03e10     07 01 48 FC | 	wrbyte	#0, objptr
03e14                 | '   patternRow                  := 0
03e14     01 0E 06 F1 | 	add	objptr, #1
03e18     07 01 48 FC | 	wrbyte	#0, objptr
03e1c                 | '   songPosition                := startPattern
03e1c     04 5E 05 F1 | 	add	fp, #4
03e20     AF 6C 02 FB | 	rdlong	local02, fp
03e24     04 5E 85 F1 | 	sub	fp, #4
03e28     01 0E 06 F1 | 	add	objptr, #1
03e2c     07 6D 42 FC | 	wrbyte	local02, objptr
03e30                 | '   currentSongSpeed            := 6
03e30     01 0E 06 F1 | 	add	objptr, #1
03e34     07 0D 48 FC | 	wrbyte	#6, objptr
03e38                 | '   patternDelay                := 0
03e38     01 0E 06 F1 | 	add	objptr, #1
03e3c     07 01 48 FC | 	wrbyte	#0, objptr
03e40                 | '   ticksPerMinute              := 50 * 60
03e40     02 0F 06 F1 | 	add	objptr, #258
03e44     05 00 80 FF 
03e48     07 71 6B FC | 	wrlong	##3000, objptr
03e4c     A7 0F 86 F1 | 	sub	objptr, #423
03e50     07 0B 03 FB | 	rdlong	muldiva_, objptr
03e54     32 0C 07 F6 | 	mov	muldivb_, #50
03e58     D0 00 A0 FD | 	call	#divide_
03e5c                 | '   cyclesToWait                := systemClock / 50
03e5c     AB 0F 06 F1 | 	add	objptr, #427
03e60     07 0D 63 FC | 	wrlong	muldivb_, objptr
03e64                 | '   sampleNumber_memory         := 0
03e64     35 0E 06 F1 | 	add	objptr, #53
03e68     07 01 48 FC | 	wrbyte	#0, objptr
03e6c                 | '   lpFilter                    := 0
03e6c     25 0E 86 F1 | 	sub	objptr, #37
03e70     07 01 48 FC | 	wrbyte	#0, objptr
03e74                 | '   cmdD_memoryX                := 0
03e74     29 0E 06 F1 | 	add	objptr, #41
03e78     07 01 48 FC | 	wrbyte	#0, objptr
03e7c                 | '   cmdD_memoryY                := 0
03e7c     01 0E 06 F1 | 	add	objptr, #1
03e80     07 01 48 FC | 	wrbyte	#0, objptr
03e84                 | '   cmdD_updatePosition         := false
03e84     01 0E 06 F1 | 	add	objptr, #1
03e88     07 01 48 FC | 	wrbyte	#0, objptr
03e8c                 | '   cmdB_memoryZ                := 0
03e8c     01 0E 06 F1 | 	add	objptr, #1
03e90     07 01 48 FC | 	wrbyte	#0, objptr
03e94                 | '   cmdB_updatePosition         := false
03e94     01 0E 06 F1 | 	add	objptr, #1
03e98     07 01 48 FC | 	wrbyte	#0, objptr
03e9c                 | '   cmdE6_updatePositionCommon  := false
03e9c     0D 0E 06 F1 | 	add	objptr, #13
03ea0     07 01 48 FC | 	wrbyte	#0, objptr
03ea4     F5 0F 86 F1 | 	sub	objptr, #501
03ea8                 | ' 
03ea8                 | '   repeat i from 0 to LAST_CHANNEL
03ea8     08 5E 05 F1 | 	add	fp, #8
03eac     AF 00 68 FC | 	wrlong	#0, fp
03eb0     08 5E 85 F1 | 	sub	fp, #8
03eb4                 | LR__0140
03eb4     08 5E 05 F1 | 	add	fp, #8
03eb8     AF A0 02 FB | 	rdlong	local28, fp
03ebc     01 A0 66 F0 | 	shl	local28, #1
03ec0     D7 0E 06 F1 | 	add	objptr, #215
03ec4     07 A1 02 F1 | 	add	local28, objptr
03ec8                 | ' 
03ec8                 | '     currRepeatPoint[i]        := 0
03ec8     50 01 58 FC | 	wrword	#0, local28
03ecc     AF A2 02 FB | 	rdlong	local29, fp
03ed0     01 A2 66 F0 | 	shl	local29, #1
03ed4     1C 0E 86 F1 | 	sub	objptr, #28
03ed8     07 A3 02 F1 | 	add	local29, objptr
03edc                 | '     currSampleLength[i]       := 4
03edc     51 09 58 FC | 	wrword	#4, local29
03ee0     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03ee4     AF A6 02 FB | 	rdlong	local31, fp
03ee8     02 A6 66 F0 | 	shl	local31, #2
03eec     14 0E 86 F1 | 	sub	objptr, #20
03ef0     07 A7 02 F1 | 	add	local31, objptr
03ef4                 | '     currSamplePtr[i]          := @null
03ef4     53 A5 62 FC | 	wrlong	local30, local31
03ef8     AF A8 02 FB | 	rdlong	local32, fp
03efc     10 0E 06 F1 | 	add	objptr, #16
03f00     07 A9 02 F1 | 	add	local32, objptr
03f04                 | '     currSampleNr[i]           := 0
03f04     54 01 48 FC | 	wrbyte	#0, local32
03f08     AF AA 02 FB | 	rdlong	local33, fp
03f0c     02 AA 66 F0 | 	shl	local33, #2
03f10     0C 0E 06 F1 | 	add	objptr, #12
03f14     07 AB 02 F1 | 	add	local33, objptr
03f18                 | '     currRepeatLength[i]       := 1
03f18     55 03 68 FC | 	wrlong	#1, local33
03f1c     AF AC 02 FB | 	rdlong	local34, fp
03f20     02 AC 66 F0 | 	shl	local34, #2
03f24     1C 0E 06 F1 | 	add	objptr, #28
03f28     07 AD 02 F1 | 	add	local34, objptr
03f2c                 | '     currPeriod[i]             := 400
03f2c     56 21 6B FC | 	wrlong	#400, local34
03f30     AF AE 02 FB | 	rdlong	local35, fp
03f34     02 AE 66 F0 | 	shl	local35, #2
03f38     48 0E 06 F1 | 	add	objptr, #72
03f3c     07 AF 02 F1 | 	add	local35, objptr
03f40                 | '     lastSetPeriod[i]          := 400
03f40     57 21 6B FC | 	wrlong	#400, local35
03f44     AF B0 02 FB | 	rdlong	local36, fp
03f48     02 B0 66 F0 | 	shl	local36, #2
03f4c     10 0E 06 F1 | 	add	objptr, #16
03f50     07 B1 02 F1 | 	add	local36, objptr
03f54                 | '     lastSetSamplePtr[i]       := 0
03f54     58 01 68 FC | 	wrlong	#0, local36
03f58     AF B2 02 FB | 	rdlong	local37, fp
03f5c     02 B2 66 F0 | 	shl	local37, #2
03f60     10 0E 06 F1 | 	add	objptr, #16
03f64     07 B3 02 F1 | 	add	local37, objptr
03f68                 | '     lastSetSampleNr[i]        := 0
03f68     59 01 68 FC | 	wrlong	#0, local37
03f6c     AF B4 02 FB | 	rdlong	local38, fp
03f70     02 B4 66 F0 | 	shl	local38, #2
03f74     10 0E 06 F1 | 	add	objptr, #16
03f78     07 B5 02 F1 | 	add	local38, objptr
03f7c                 | '     lastSetSampleLength[i]    := 0
03f7c     5A 01 68 FC | 	wrlong	#0, local38
03f80     AF B6 02 FB | 	rdlong	local39, fp
03f84     02 B6 66 F0 | 	shl	local39, #2
03f88     10 0E 06 F1 | 	add	objptr, #16
03f8c     07 B7 02 F1 | 	add	local39, objptr
03f90                 | '     lastSetRepeatLength[i]    := 0
03f90     5B 01 68 FC | 	wrlong	#0, local39
03f94     AF B8 02 FB | 	rdlong	local40, fp
03f98     02 B8 66 F0 | 	shl	local40, #2
03f9c     10 0E 06 F1 | 	add	objptr, #16
03fa0     07 B9 02 F1 | 	add	local40, objptr
03fa4                 | '     lastSetRepeatPoint[i]     := 0
03fa4     5C 01 68 FC | 	wrlong	#0, local40
03fa8     AF BA 02 FB | 	rdlong	local41, fp
03fac     02 BA 66 F0 | 	shl	local41, #2
03fb0     78 0E 86 F1 | 	sub	objptr, #120
03fb4     07 BB 02 F1 | 	add	local41, objptr
03fb8                 | '     currVolume[i]             := 0
03fb8     5D 01 68 FC | 	wrlong	#0, local41
03fbc     AF BC 02 FB | 	rdlong	local42, fp
03fc0     01 BC 66 F0 | 	shl	local42, #1
03fc4     20 0E 06 F1 | 	add	objptr, #32
03fc8     07 BD 02 F1 | 	add	local42, objptr
03fcc                 | '     currPanning[i]            := 0
03fcc     5E 01 58 FC | 	wrword	#0, local42
03fd0     AF BE 02 FB | 	rdlong	local43, fp
03fd4     A9 0E 06 F1 | 	add	objptr, #169
03fd8     07 BF 02 F1 | 	add	local43, objptr
03fdc                 | '     cmd3_memoryZ[i]           := 0
03fdc     5F 01 48 FC | 	wrbyte	#0, local43
03fe0     AF C0 02 FB | 	rdlong	local44, fp
03fe4     04 0E 06 F1 | 	add	objptr, #4
03fe8     07 C1 02 F1 | 	add	local44, objptr
03fec                 | '     cmd4_memoryY[i]           := 0
03fec     60 01 48 FC | 	wrbyte	#0, local44
03ff0     AF C2 02 FB | 	rdlong	local45, fp
03ff4     04 0E 06 F1 | 	add	objptr, #4
03ff8     07 C3 02 F1 | 	add	local45, objptr
03ffc                 | '     cmd4_memoryX[i]           := 0
03ffc     61 01 48 FC | 	wrbyte	#0, local45
04000     AF C4 02 FB | 	rdlong	local46, fp
04004     04 0E 06 F1 | 	add	objptr, #4
04008     07 C5 02 F1 | 	add	local46, objptr
0400c                 | '     cmd7_memoryY[i]           := 0
0400c     62 01 48 FC | 	wrbyte	#0, local46
04010     AF C6 02 FB | 	rdlong	local47, fp
04014     04 0E 06 F1 | 	add	objptr, #4
04018     07 C7 02 F1 | 	add	local47, objptr
0401c                 | '     cmd7_memoryX[i]           := 0
0401c     63 01 48 FC | 	wrbyte	#0, local47
04020     AF C8 02 FB | 	rdlong	local48, fp
04024     04 0E 06 F1 | 	add	objptr, #4
04028     07 C9 02 F1 | 	add	local48, objptr
0402c                 | '     cmd9_memoryZ[i]           := 0
0402c     64 01 48 FC | 	wrbyte	#0, local48
04030     AF CA 02 FB | 	rdlong	local49, fp
04034     0D 0E 06 F1 | 	add	objptr, #13
04038     07 CB 02 F1 | 	add	local49, objptr
0403c                 | '     cmdE6_memory[i]           := 0
0403c     65 01 48 FC | 	wrbyte	#0, local49
04040     AF CC 02 FB | 	rdlong	local50, fp
04044     04 0E 06 F1 | 	add	objptr, #4
04048     07 CD 02 F1 | 	add	local50, objptr
0404c                 | '     cmdE6_counter[i]          := 0
0404c     66 01 48 FC | 	wrbyte	#0, local50
04050     AF CE 02 FB | 	rdlong	local51, fp
04054     04 0E 06 F1 | 	add	objptr, #4
04058     07 CF 02 F1 | 	add	local51, objptr
0405c                 | '     cmdE6_updatePosition[i]   := false
0405c     67 01 48 FC | 	wrbyte	#0, local51
04060     AF D0 02 FB | 	rdlong	local52, fp
04064     11 0E 86 F1 | 	sub	objptr, #17
04068     07 D1 02 F1 | 	add	local52, objptr
0406c                 | '     sampleNumber_memory[i]    := 0
0406c     68 01 48 FC | 	wrbyte	#0, local52
04070     AF D2 02 FB | 	rdlong	local53, fp
04074     59 0E 86 F1 | 	sub	objptr, #89
04078     07 D3 02 F1 | 	add	local53, objptr
0407c                 | '     vibratoPos[i]             := 0
0407c     69 01 48 FC | 	wrbyte	#0, local53
04080     AF D4 02 FB | 	rdlong	local54, fp
04084     02 D4 66 F0 | 	shl	local54, #2
04088     10 0E 06 F1 | 	add	objptr, #16
0408c     07 D5 02 F1 | 	add	local54, objptr
04090                 | '     portamentoPeriodMemory[i] := 0
04090     6A 01 68 FC | 	wrlong	#0, local54
04094     AF D6 02 FB | 	rdlong	local55, fp
04098     25 0E 06 F1 | 	add	objptr, #37
0409c     07 D7 02 F1 | 	add	local55, objptr
040a0                 | '     portaGlissando[i]         := 0
040a0     6B 01 48 FC | 	wrbyte	#0, local55
040a4     AF D8 02 FB | 	rdlong	local56, fp
040a8     04 0E 06 F1 | 	add	objptr, #4
040ac     07 D9 02 F1 | 	add	local56, objptr
040b0                 | '     vibratoType[i]            := 0
040b0     6C 01 48 FC | 	wrbyte	#0, local56
040b4     AF DA 02 FB | 	rdlong	local57, fp
040b8     04 0E 06 F1 | 	add	objptr, #4
040bc     07 DB 02 F1 | 	add	local57, objptr
040c0                 | '     tremoloType[i]            := 0
040c0     6D 01 48 FC | 	wrbyte	#0, local57
040c4     AF DC 02 FB | 	rdlong	local58, fp
040c8     39 0E 86 F1 | 	sub	objptr, #57
040cc     07 DD 02 F1 | 	add	local58, objptr
040d0                 | '     tremoloPos[i]             := 0
040d0     6E 01 48 FC | 	wrbyte	#0, local58
040d4     AF DE 02 FB | 	rdlong	local59, fp
040d8     02 DE 66 F0 | 	shl	local59, #2
040dc     7C 0E 86 F1 | 	sub	objptr, #124
040e0     07 DF 02 F1 | 	add	local59, objptr
040e4                 | '     deltaVolume[i]            := 0
040e4     6F 01 68 FC | 	wrlong	#0, local59
040e8     AF E0 02 FB | 	rdlong	local60, fp
040ec     02 E0 66 F0 | 	shl	local60, #2
040f0     20 0E 86 F1 | 	sub	objptr, #32
040f4     07 E1 02 F1 | 	add	local60, objptr
040f8                 | '     deltaPeriod[i]            := 0
040f8     70 01 68 FC | 	wrlong	#0, local60
040fc     AF E2 02 FB | 	rdlong	local61, fp
04100     A0 0E 06 F1 | 	add	objptr, #160
04104     07 E3 02 F1 | 	add	local61, objptr
04108                 | '     resetTremolo[i]           := 0
04108     71 01 48 FC | 	wrbyte	#0, local61
0410c     AF E4 02 FB | 	rdlong	local62, fp
04110     04 0E 06 F1 | 	add	objptr, #4
04114     07 E5 02 F1 | 	add	local62, objptr
04118                 | '     resetVibrato[i]           := 0
04118     72 01 48 FC | 	wrbyte	#0, local62
0411c     AF 84 02 FB | 	rdlong	local14, fp
04120     01 84 06 F1 | 	add	local14, #1
04124     AF 84 62 FC | 	wrlong	local14, fp
04128     08 5E 85 F1 | 	sub	fp, #8
0412c     04 84 5E F2 | 	cmps	local14, #4 wcz
04130     93 0F 86 F1 | 	sub	objptr, #403
04134     7C FD 9F CD |  if_b	jmp	#LR__0140
04138     AF F0 03 F6 | 	mov	ptra, fp
0413c     BF 00 A0 FD | 	call	#popregs_
04140                 | _trackerplayer_spin2_initModule_ret
04140     2D 00 64 FD | 	ret
04144                 | 
04144                 | ' 
04144                 | ' 
04144                 | ' ' This routine needs to be ticked X number of times per second
04144                 | ' ' in order to advance the tracker play routine
04144                 | ' '
04144                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04144                 | _trackerplayer_spin2_tick
04144     12 5A 05 F6 | 	mov	COUNT_, #18
04148     B0 00 A0 FD | 	call	#pushregs_
0414c     30 F0 07 F1 | 	add	ptra, #48
04150                 | ' 
04150                 | '   if currentSongSpeed == 0
04150     A4 0E 06 F1 | 	add	objptr, #164
04154     07 6B CA FA | 	rdbyte	local01, objptr wz
04158     A4 0E 86 F1 | 	sub	objptr, #164
0415c                 | '     return
0415c     34 03 90 AD |  if_e	jmp	#LR__0152
04160                 | ' 
04160                 | '   ' Iterate over the channels and process everything
04160                 | '   repeat channel from 0 to LAST_CHANNEL
04160     AF 00 68 FC | 	wrlong	#0, fp
04164                 | LR__0141
04164     04 5E 05 F1 | 	add	fp, #4
04168     AF 62 02 F6 | 	mov	arg04, fp
0416c     04 5E 05 F1 | 	add	fp, #4
04170     AF 64 02 F6 | 	mov	arg05, fp
04174     04 5E 05 F1 | 	add	fp, #4
04178     AF 66 02 F6 | 	mov	arg06, fp
0417c     0C 5E 85 F1 | 	sub	fp, #12
04180                 | ' 
04180                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04180     AF 5C 02 FB | 	rdlong	arg01, fp
04184     A3 0E 06 F1 | 	add	objptr, #163
04188     07 5F C2 FA | 	rdbyte	arg02, objptr
0418c     01 0E 86 F1 | 	sub	objptr, #1
04190     07 61 C2 FA | 	rdbyte	arg03, objptr
04194     7F 5E 06 F5 | 	and	arg02, #127
04198     0C 0E 86 F1 | 	sub	objptr, #12
0419c     07 6D 02 FB | 	rdlong	local02, objptr
041a0     36 5F 02 F1 | 	add	arg02, local02
041a4                 | ' 
041a4                 | '   ' Get the note data for a specific channel/song position/pattern row
041a4                 | '   patternNumber := byte[songPositionsLut][position & 127]
041a4     2F 6F C2 FA | 	rdbyte	local03, arg02
041a8     0A 6E 66 F0 | 	shl	local03, #10
041ac     04 0E 86 F1 | 	sub	objptr, #4
041b0     07 71 02 FB | 	rdlong	local04, objptr
041b4     92 0E 86 F1 | 	sub	objptr, #146
041b8     37 71 02 F1 | 	add	local04, local03
041bc                 | '   patternPtr    := patternsData + (patternNumber << 10)
041bc     3F 60 06 F5 | 	and	arg03, #63
041c0     04 60 66 F0 | 	shl	arg03, #4
041c4     30 71 02 F1 | 	add	local04, arg03
041c8     03 5C 06 F5 | 	and	arg01, #3
041cc     02 5C 66 F0 | 	shl	arg01, #2
041d0     2E 71 02 F1 | 	add	local04, arg01
041d4                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
041d4     38 73 C2 FA | 	rdbyte	local05, local04
041d8     18 72 66 F0 | 	shl	local05, #24
041dc     01 70 06 F1 | 	add	local04, #1
041e0     38 75 C2 FA | 	rdbyte	local06, local04
041e4     10 74 66 F0 | 	shl	local06, #16
041e8     3A 73 42 F5 | 	or	local05, local06
041ec     01 70 06 F1 | 	add	local04, #1
041f0     38 77 C2 FA | 	rdbyte	local07, local04
041f4     08 76 66 F0 | 	shl	local07, #8
041f8     3B 73 42 F5 | 	or	local05, local07
041fc     01 70 06 F1 | 	add	local04, #1
04200     38 79 C2 FA | 	rdbyte	local08, local04
04204     3C 73 42 F5 | 	or	local05, local08
04208                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04208     39 7B 02 F6 | 	mov	local09, local05
0420c     0C 7A 46 F0 | 	shr	local09, #12
04210     0F 7A 06 F5 | 	and	local09, #15
04214     39 7D 02 F6 | 	mov	local10, local05
04218     18 7C 46 F0 | 	shr	local10, #24
0421c     F0 7C 06 F5 | 	and	local10, #240
04220     3E 7B 42 F5 | 	or	local09, local10
04224                 | ' 
04224                 | '   ' Extract the different sub parts from the data
04224                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04224     31 7B 62 FC | 	wrlong	local09, arg04
04228     39 7F 02 F6 | 	mov	local11, local05
0422c     10 7E 46 F0 | 	shr	local11, #16
04230     07 00 00 FF 
04234     FF 7F 06 F5 | 	and	local11, ##4095
04238                 | '   long[period]       :=  (data >> 16) & $FFF
04238     32 7F 62 FC | 	wrlong	local11, arg05
0423c     07 00 00 FF 
04240     FF 73 06 F5 | 	and	local05, ##4095
04244                 | '   long[effect]       :=   data & $FFF
04244     33 73 62 FC | 	wrlong	local05, arg06
04248                 | '     processChannel(channel, sampleNumber, period, effect)
04248     AF 5C 02 FB | 	rdlong	arg01, fp
0424c     04 5E 05 F1 | 	add	fp, #4
04250     AF 5E 02 FB | 	rdlong	arg02, fp
04254     04 5E 05 F1 | 	add	fp, #4
04258     AF 60 02 FB | 	rdlong	arg03, fp
0425c     04 5E 05 F1 | 	add	fp, #4
04260     AF 62 02 FB | 	rdlong	arg04, fp
04264     0C 5E 85 F1 | 	sub	fp, #12
04268     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
0426c     AF 80 02 FB | 	rdlong	local12, fp
04270     01 80 06 F1 | 	add	local12, #1
04274     AF 80 62 FC | 	wrlong	local12, fp
04278     04 80 5E F2 | 	cmps	local12, #4 wcz
0427c     E4 FE 9F CD |  if_b	jmp	#LR__0141
04280                 | ' 
04280                 | '   ' Incrementation the main counter that drives the whole play routine
04280                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04280     A1 0E 06 F1 | 	add	objptr, #161
04284     07 6B C2 FA | 	rdbyte	local01, objptr
04288     01 6A 06 F1 | 	add	local01, #1
0428c     07 6B 42 FC | 	wrbyte	local01, objptr
04290     03 0E 06 F1 | 	add	objptr, #3
04294     07 83 C2 FA | 	rdbyte	local13, objptr
04298     01 0E 06 F1 | 	add	objptr, #1
0429c     07 85 C2 FA | 	rdbyte	local14, objptr
042a0     42 83 02 F1 | 	add	local13, local14
042a4     04 0E 86 F1 | 	sub	objptr, #4
042a8     07 87 C2 FA | 	rdbyte	local15, objptr
042ac     A1 0E 86 F1 | 	sub	objptr, #161
042b0     41 87 5A F2 | 	cmps	local15, local13 wcz
042b4                 | '     tickCounter := 0
042b4     A1 0E 06 31 |  if_ae	add	objptr, #161
042b8     07 01 48 3C |  if_ae	wrbyte	#0, objptr
042bc     A1 0E 86 31 |  if_ae	sub	objptr, #161
042c0                 | ' 
042c0                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
042c0                 | '   if tickCounter == 0
042c0     A1 0E 06 F1 | 	add	objptr, #161
042c4     07 6B CA FA | 	rdbyte	local01, objptr wz
042c8     A1 0E 86 F1 | 	sub	objptr, #161
042cc     C4 01 90 5D |  if_ne	jmp	#LR__0151
042d0                 | ' 
042d0                 | '     ' Handle the "pattern repeat" command, "E6"
042d0                 | '     if cmdE6_updatePositionCommon
042d0     F5 0F 06 F1 | 	add	objptr, #501
042d4     07 6B CA FA | 	rdbyte	local01, objptr wz
042d8     F5 0F 86 F1 | 	sub	objptr, #501
042dc     8C 00 90 AD |  if_e	jmp	#LR__0145
042e0                 | '       repeat i from 0 to LAST_CHANNEL
042e0     10 5E 05 F1 | 	add	fp, #16
042e4     AF 00 68 FC | 	wrlong	#0, fp
042e8     10 5E 85 F1 | 	sub	fp, #16
042ec     84 BD 9F FE | 	loc	pa,	#(@LR__0144-@LR__0142)
042f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
042f4                 | LR__0142
042f4                 | '         if cmdE6_updatePosition[i]
042f4     10 5E 05 F1 | 	add	fp, #16
042f8     AF 80 02 FB | 	rdlong	local12, fp
042fc     10 5E 85 F1 | 	sub	fp, #16
04300     F1 0F 06 F1 | 	add	objptr, #497
04304     07 81 02 F1 | 	add	local12, objptr
04308     40 85 CA FA | 	rdbyte	local14, local12 wz
0430c     F1 0F 86 F1 | 	sub	objptr, #497
04310     24 00 90 AD |  if_e	jmp	#LR__0143
04314     10 5E 05 F1 | 	add	fp, #16
04318     AF 88 02 FB | 	rdlong	local16, fp
0431c     10 5E 85 F1 | 	sub	fp, #16
04320     E9 0F 06 F1 | 	add	objptr, #489
04324     07 89 02 F1 | 	add	local16, objptr
04328                 | '           patternRow := cmdE6_memory[i]
04328     44 81 C2 FA | 	rdbyte	local12, local16
0432c     47 0F 86 F1 | 	sub	objptr, #327
04330     07 81 42 FC | 	wrbyte	local12, objptr
04334     A2 0E 86 F1 | 	sub	objptr, #162
04338                 | LR__0143
04338     10 5E 05 F1 | 	add	fp, #16
0433c     AF 8A 02 FB | 	rdlong	local17, fp
04340     F1 0F 06 F1 | 	add	objptr, #497
04344     07 8B 02 F1 | 	add	local17, objptr
04348                 | '         cmdE6_updatePosition[i] := false
04348     45 01 48 FC | 	wrbyte	#0, local17
0434c     AF 80 02 FB | 	rdlong	local12, fp
04350     01 80 06 F1 | 	add	local12, #1
04354     AF 80 62 FC | 	wrlong	local12, fp
04358     10 5E 85 F1 | 	sub	fp, #16
0435c     04 80 5E F2 | 	cmps	local12, #4 wcz
04360     F1 0F 86 F1 | 	sub	objptr, #497
04364     8C FF 9F CD |  if_b	jmp	#LR__0142
04368                 | LR__0144
04368     CC 00 90 FD | 	jmp	#LR__0149
0436c                 | LR__0145
0436c                 | ' 
0436c                 | '     ' Handle the "skip to next pattern with offset command", "D"
0436c                 | '     elseif cmdD_updatePosition
0436c     E6 0F 06 F1 | 	add	objptr, #486
04370     07 6B CA FA | 	rdbyte	local01, objptr wz
04374     E6 0F 86 F1 | 	sub	objptr, #486
04378     64 00 90 AD |  if_e	jmp	#LR__0146
0437c                 | '       if ++songPosition >= songLength
0437c     A3 0E 06 F1 | 	add	objptr, #163
04380     07 6B C2 FA | 	rdbyte	local01, objptr
04384     01 6A 06 F1 | 	add	local01, #1
04388     07 6B 42 FC | 	wrbyte	local01, objptr
0438c     07 83 C2 FA | 	rdbyte	local13, objptr
04390     09 0E 86 F1 | 	sub	objptr, #9
04394     07 85 C2 FA | 	rdbyte	local14, objptr
04398     9A 0E 86 F1 | 	sub	objptr, #154
0439c     42 83 5A F2 | 	cmps	local13, local14 wcz
043a0                 | '         songPosition := 0
043a0     A3 0E 06 31 |  if_ae	add	objptr, #163
043a4     07 01 48 3C |  if_ae	wrbyte	#0, objptr
043a8     A3 0E 86 31 |  if_ae	sub	objptr, #163
043ac     E4 0F 06 F1 | 	add	objptr, #484
043b0     07 81 C2 FA | 	rdbyte	local12, objptr
043b4     40 8D 02 F6 | 	mov	local18, local12
043b8     02 8C 66 F0 | 	shl	local18, #2
043bc     40 8D 02 F1 | 	add	local18, local12
043c0     01 8C 66 F0 | 	shl	local18, #1
043c4     01 0E 06 F1 | 	add	objptr, #1
043c8     07 81 C2 FA | 	rdbyte	local12, objptr
043cc     40 8D 02 F1 | 	add	local18, local12
043d0                 | ' 
043d0                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
043d0     43 0F 86 F1 | 	sub	objptr, #323
043d4     07 8D 42 FC | 	wrbyte	local18, objptr
043d8     A2 0E 86 F1 | 	sub	objptr, #162
043dc                 | ' 
043dc                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
043dc                 | '     else
043dc     58 00 90 FD | 	jmp	#LR__0148
043e0                 | LR__0146
043e0                 | '       if ++patternRow >= PATTERN_LENGTH
043e0     A2 0E 06 F1 | 	add	objptr, #162
043e4     07 6B C2 FA | 	rdbyte	local01, objptr
043e8     01 6A 06 F1 | 	add	local01, #1
043ec     07 6B 42 FC | 	wrbyte	local01, objptr
043f0     07 83 C2 FA | 	rdbyte	local13, objptr
043f4     A2 0E 86 F1 | 	sub	objptr, #162
043f8     40 82 5E F2 | 	cmps	local13, #64 wcz
043fc     38 00 90 CD |  if_b	jmp	#LR__0147
04400                 | '         patternRow := 0
04400     A2 0E 06 F1 | 	add	objptr, #162
04404     07 01 48 FC | 	wrbyte	#0, objptr
04408                 | ' 
04408                 | '         if ++songPosition >= songLength
04408     01 0E 06 F1 | 	add	objptr, #1
0440c     07 6B C2 FA | 	rdbyte	local01, objptr
04410     01 6A 06 F1 | 	add	local01, #1
04414     07 6B 42 FC | 	wrbyte	local01, objptr
04418     07 83 C2 FA | 	rdbyte	local13, objptr
0441c     09 0E 86 F1 | 	sub	objptr, #9
04420     07 85 C2 FA | 	rdbyte	local14, objptr
04424     9A 0E 86 F1 | 	sub	objptr, #154
04428     42 83 5A F2 | 	cmps	local13, local14 wcz
0442c                 | '           songPosition := 0
0442c     A3 0E 06 31 |  if_ae	add	objptr, #163
04430     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04434     A3 0E 86 31 |  if_ae	sub	objptr, #163
04438                 | LR__0147
04438                 | LR__0148
04438                 | LR__0149
04438                 | ' 
04438                 | '     ' Handle "jump to song position" command, "B"
04438                 | '     if cmdB_updatePosition
04438     E8 0F 06 F1 | 	add	objptr, #488
0443c     07 6B CA FA | 	rdbyte	local01, objptr wz
04440     E8 0F 86 F1 | 	sub	objptr, #488
04444     28 00 90 AD |  if_e	jmp	#LR__0150
04448                 | ' 
04448                 | '       songPosition := cmdB_memoryZ
04448     E7 0F 06 F1 | 	add	objptr, #487
0444c     07 6B C2 FA | 	rdbyte	local01, objptr
04450     44 0F 86 F1 | 	sub	objptr, #324
04454     07 6B 42 FC | 	wrbyte	local01, objptr
04458                 | ' 
04458                 | '       ifnot cmdD_updatePosition
04458     43 0F 06 F1 | 	add	objptr, #323
0445c     07 6B CA FA | 	rdbyte	local01, objptr wz
04460     E6 0F 86 F1 | 	sub	objptr, #486
04464                 | '         patternRow := 0
04464     A2 0E 06 A1 |  if_e	add	objptr, #162
04468     07 01 48 AC |  if_e	wrbyte	#0, objptr
0446c     A2 0E 86 A1 |  if_e	sub	objptr, #162
04470                 | LR__0150
04470                 | ' 
04470                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04470                 | '     cmdE6_updatePositionCommon := false
04470     F5 0F 06 F1 | 	add	objptr, #501
04474     07 01 48 FC | 	wrbyte	#0, objptr
04478                 | '     cmdB_updatePosition := false
04478     0D 0E 86 F1 | 	sub	objptr, #13
0447c     07 01 48 FC | 	wrbyte	#0, objptr
04480                 | '     cmdD_updatePosition := false
04480     02 0E 86 F1 | 	sub	objptr, #2
04484     07 01 48 FC | 	wrbyte	#0, objptr
04488                 | '     patternDelay := 0
04488     41 0F 86 F1 | 	sub	objptr, #321
0448c     07 01 48 FC | 	wrbyte	#0, objptr
04490     A5 0E 86 F1 | 	sub	objptr, #165
04494                 | LR__0151
04494                 | LR__0152
04494     AF F0 03 F6 | 	mov	ptra, fp
04498     BF 00 A0 FD | 	call	#popregs_
0449c                 | _trackerplayer_spin2_tick_ret
0449c     2D 00 64 FD | 	ret
044a0                 | 
044a0                 | ' 
044a0                 | ' 
044a0                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
044a0                 | _trackerplayer_spin2_amigaPeriodToNote
044a0                 | ' 
044a0                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
044a0     00 30 06 F6 | 	mov	_var01, #0
044a4     A4 BB 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
044a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
044ac                 | LR__0153
044ac                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
044ac     06 00 00 FF 
044b0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
044b4     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
044b8     2F 35 02 F6 | 	mov	_var03, arg02
044bc     03 34 66 F0 | 	shl	_var03, #3
044c0     2F 35 02 F1 | 	add	_var03, arg02
044c4     03 34 66 F0 | 	shl	_var03, #3
044c8     1A 33 02 F1 | 	add	_var02, _var03
044cc     18 37 02 F6 | 	mov	_var04, _var01
044d0     01 36 66 F0 | 	shl	_var04, #1
044d4     19 37 02 F1 | 	add	_var04, _var02
044d8     1B 39 E2 FA | 	rdword	_var05, _var04
044dc     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
044e0                 | '       quit
044e0     06 00 00 FF 
044e4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
044e8     0C 00 90 ED |  if_be	jmp	#LR__0155
044ec     01 30 06 F1 | 	add	_var01, #1
044f0     24 30 5E F2 | 	cmps	_var01, #36 wcz
044f4     B4 FF 9F CD |  if_b	jmp	#LR__0153
044f8                 | LR__0154
044f8                 | LR__0155
044f8                 | ' 
044f8                 | '   return i
044f8     18 2B 02 F6 | 	mov	result1, _var01
044fc                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044fc     2D 00 64 FD | 	ret
04500                 | 
04500                 | ' 
04500                 | ' 
04500                 | ' PRI retunePeriod(period, fTune) | noteNumber
04500                 | _trackerplayer_spin2_retunePeriod
04500     06 5A 05 F6 | 	mov	COUNT_, #6
04504     B0 00 A0 FD | 	call	#pushregs_
04508     2E 6B 02 F6 | 	mov	local01, arg01
0450c     2F 6D 02 F6 | 	mov	local02, arg02
04510                 | ' 
04510                 | '   if period > 0 and fTune < 16
04510     00 6A 5E F2 | 	cmps	local01, #0 wcz
04514     50 00 90 ED |  if_be	jmp	#LR__0156
04518     10 6C 5E F2 | 	cmps	local02, #16 wcz
0451c     48 00 90 3D |  if_ae	jmp	#LR__0156
04520                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
04520     35 5D E2 FA | 	rdword	arg01, local01
04524     00 5E 06 F6 | 	mov	arg02, #0
04528     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
0452c     15 6F 02 F6 | 	mov	local03, result1
04530     06 00 00 FF 
04534     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04538     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
0453c     36 73 02 F6 | 	mov	local05, local02
04540     03 72 66 F0 | 	shl	local05, #3
04544     36 73 02 F1 | 	add	local05, local02
04548     03 72 66 F0 | 	shl	local05, #3
0454c     39 71 02 F1 | 	add	local04, local05
04550     01 6E 66 F0 | 	shl	local03, #1
04554     38 6F 02 F1 | 	add	local03, local04
04558                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
04558     37 75 E2 FA | 	rdword	local06, local03
0455c     35 75 52 FC | 	wrword	local06, local01
04560     06 00 00 FF 
04564     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04568                 | LR__0156
04568     AF F0 03 F6 | 	mov	ptra, fp
0456c     BF 00 A0 FD | 	call	#popregs_
04570                 | _trackerplayer_spin2_retunePeriod_ret
04570     2D 00 64 FD | 	ret
04574                 | 
04574                 | ' 
04574                 | ' 
04574                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04574                 | _trackerplayer_spin2_getSampleInfo
04574     2E 31 0A F6 | 	mov	_var01, arg01 wz
04578                 | ' 
04578                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04578     08 00 90 AD |  if_e	jmp	#LR__0157
0457c     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04580     08 00 90 ED |  if_be	jmp	#LR__0158
04584                 | LR__0157
04584                 | '     long[samplePtr] := 0
04584     2F 01 68 FC | 	wrlong	#0, arg02
04588                 | '     return
04588     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0458c                 | LR__0158
0458c                 | ' 
0458c                 | '   sampleNumber--
0458c     01 30 86 F1 | 	sub	_var01, #1
04590     18 33 02 F6 | 	mov	_var02, _var01
04594     04 32 66 F0 | 	shl	_var02, #4
04598     18 33 82 F1 | 	sub	_var02, _var01
0459c     01 32 66 F0 | 	shl	_var02, #1
045a0     0A 0E 06 F1 | 	add	objptr, #10
045a4     07 35 02 FB | 	rdlong	_var03, objptr
045a8     19 35 02 F1 | 	add	_var03, _var02
045ac                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
045ac     1A 37 02 F6 | 	mov	_var04, _var03
045b0     16 36 06 F1 | 	add	_var04, #22
045b4     1B 39 C2 FA | 	rdbyte	_var05, _var04
045b8     08 38 66 F0 | 	shl	_var05, #8
045bc     1A 3B 02 F6 | 	mov	_var06, _var03
045c0     17 3A 06 F1 | 	add	_var06, #23
045c4     1D 3D C2 FA | 	rdbyte	_var07, _var06
045c8     1E 39 42 F5 | 	or	_var05, _var07
045cc     01 38 66 F0 | 	shl	_var05, #1
045d0                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
045d0     30 39 62 FC | 	wrlong	_var05, arg03
045d4     1A 3F 02 F6 | 	mov	_var08, _var03
045d8     18 3E 06 F1 | 	add	_var08, #24
045dc                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
045dc     1F 41 C2 FA | 	rdbyte	_var09, _var08
045e0     31 41 62 FC | 	wrlong	_var09, arg04
045e4     1A 43 02 F6 | 	mov	_var10, _var03
045e8     19 42 06 F1 | 	add	_var10, #25
045ec                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
045ec     21 41 C2 FA | 	rdbyte	_var09, _var10
045f0     32 41 62 FC | 	wrlong	_var09, arg05
045f4     1A 45 02 F6 | 	mov	_var11, _var03
045f8     1A 44 06 F1 | 	add	_var11, #26
045fc     22 47 C2 FA | 	rdbyte	_var12, _var11
04600     08 46 66 F0 | 	shl	_var12, #8
04604     1A 49 02 F6 | 	mov	_var13, _var03
04608     1B 48 06 F1 | 	add	_var13, #27
0460c     24 3D C2 FA | 	rdbyte	_var07, _var13
04610     1E 47 42 F5 | 	or	_var12, _var07
04614     01 46 66 F0 | 	shl	_var12, #1
04618                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04618     33 47 62 FC | 	wrlong	_var12, arg06
0461c     1A 4B 02 F6 | 	mov	_var14, _var03
04620     1C 4A 06 F1 | 	add	_var14, #28
04624     25 4D C2 FA | 	rdbyte	_var15, _var14
04628     08 4C 66 F0 | 	shl	_var15, #8
0462c     1D 34 06 F1 | 	add	_var03, #29
04630     1A 3D C2 FA | 	rdbyte	_var07, _var03
04634     1E 4D 42 F5 | 	or	_var15, _var07
04638     01 4C 66 F0 | 	shl	_var15, #1
0463c                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
0463c     34 4D 62 FC | 	wrlong	_var15, arg07
04640     02 30 66 F0 | 	shl	_var01, #2
04644     08 0E 06 F1 | 	add	objptr, #8
04648     07 31 02 F1 | 	add	_var01, objptr
0464c                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
0464c     18 41 02 FB | 	rdlong	_var09, _var01
04650     2F 41 62 FC | 	wrlong	_var09, arg02
04654                 | ' 
04654                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04654     34 41 02 FB | 	rdlong	_var09, arg07
04658     02 40 0E F2 | 	cmp	_var09, #2 wz
0465c     12 0E 86 F1 | 	sub	objptr, #18
04660     08 00 90 5D |  if_ne	jmp	#LR__0159
04664     33 3D 0A FB | 	rdlong	_var07, arg06 wz
04668                 | '     long[repeatLength] := 1
04668     34 03 68 AC |  if_e	wrlong	#1, arg07
0466c                 | LR__0159
0466c                 | _trackerplayer_spin2_getSampleInfo_ret
0466c     2D 00 64 FD | 	ret
04670                 | 
04670                 | ' 
04670                 | ' 
04670                 | ' PRI triggerNote(channel)
04670                 | _trackerplayer_spin2_triggerNote
04670     2E 31 02 F6 | 	mov	_var01, arg01
04674     02 30 66 F0 | 	shl	_var01, #2
04678     47 0F 06 F1 | 	add	objptr, #327
0467c     07 31 02 F1 | 	add	_var01, objptr
04680     2E 33 02 F6 | 	mov	_var02, arg01
04684     90 0E 86 F1 | 	sub	objptr, #144
04688                 | ' 
04688                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04688     18 35 02 FB | 	rdlong	_var03, _var01
0468c     07 33 02 F1 | 	add	_var02, objptr
04690     19 35 42 FC | 	wrbyte	_var03, _var02
04694     2E 37 02 F6 | 	mov	_var04, arg01
04698     02 36 66 F0 | 	shl	_var04, #2
0469c     80 0E 06 F1 | 	add	objptr, #128
046a0     07 37 02 F1 | 	add	_var04, objptr
046a4     2E 39 02 F6 | 	mov	_var05, arg01
046a8     02 38 66 F0 | 	shl	_var05, #2
046ac     90 0E 86 F1 | 	sub	objptr, #144
046b0                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
046b0     1B 35 02 FB | 	rdlong	_var03, _var04
046b4     07 39 02 F1 | 	add	_var05, objptr
046b8     1C 35 62 FC | 	wrlong	_var03, _var05
046bc     2E 3B 02 F6 | 	mov	_var06, arg01
046c0     02 3A 66 F0 | 	shl	_var06, #2
046c4     80 0E 06 F1 | 	add	objptr, #128
046c8     07 3B 02 F1 | 	add	_var06, objptr
046cc     2E 3D 02 F6 | 	mov	_var07, arg01
046d0     02 3C 66 F0 | 	shl	_var07, #2
046d4     48 0E 86 F1 | 	sub	objptr, #72
046d8                 | '   currPeriod[channel]       := lastSetPeriod[channel]
046d8     1D 35 02 FB | 	rdlong	_var03, _var06
046dc     07 3D 02 F1 | 	add	_var07, objptr
046e0     1E 35 62 FC | 	wrlong	_var03, _var07
046e4     2E 3F 02 F6 | 	mov	_var08, arg01
046e8     02 3E 66 F0 | 	shl	_var08, #2
046ec     78 0E 06 F1 | 	add	objptr, #120
046f0     07 3F 02 F1 | 	add	_var08, objptr
046f4     2E 41 02 F6 | 	mov	_var09, arg01
046f8     01 40 66 F0 | 	shl	_var09, #1
046fc     9C 0E 86 F1 | 	sub	objptr, #156
04700                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04700     1F 35 02 FB | 	rdlong	_var03, _var08
04704     07 41 02 F1 | 	add	_var09, objptr
04708     20 35 52 FC | 	wrword	_var03, _var09
0470c     2E 43 02 F6 | 	mov	_var10, arg01
04710     02 42 66 F0 | 	shl	_var10, #2
04714     AC 0E 06 F1 | 	add	objptr, #172
04718     07 43 02 F1 | 	add	_var10, objptr
0471c     2E 45 02 F6 | 	mov	_var11, arg01
04720     02 44 66 F0 | 	shl	_var11, #2
04724     A4 0E 86 F1 | 	sub	objptr, #164
04728                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04728     21 35 02 FB | 	rdlong	_var03, _var10
0472c     07 45 02 F1 | 	add	_var11, objptr
04730     22 35 62 FC | 	wrlong	_var03, _var11
04734     2E 47 02 F6 | 	mov	_var12, arg01
04738     02 46 66 F0 | 	shl	_var12, #2
0473c     B4 0E 06 F1 | 	add	objptr, #180
04740     07 47 02 F1 | 	add	_var12, objptr
04744     2E 49 02 F6 | 	mov	_var13, arg01
04748     01 48 66 F0 | 	shl	_var13, #1
0474c     A0 0E 86 F1 | 	sub	objptr, #160
04750                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04750     23 35 02 FB | 	rdlong	_var03, _var12
04754     07 49 02 F1 | 	add	_var13, objptr
04758     24 35 52 FC | 	wrword	_var03, _var13
0475c     1F 0F 06 F1 | 	add	objptr, #287
04760     07 5D 02 F1 | 	add	arg01, objptr
04764     2E 4B C2 FA | 	rdbyte	_var14, arg01
04768     01 4A 06 F1 | 	add	_var14, #1
0476c                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
0476c     2E 4B 42 FC | 	wrbyte	_var14, arg01
04770     F6 0F 86 F1 | 	sub	objptr, #502
04774                 | _trackerplayer_spin2_triggerNote_ret
04774     2D 00 64 FD | 	ret
04778                 | 
04778                 | ' 
04778                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04778                 | _trackerplayer_spin2_processChannel
04778     31 5A 05 F6 | 	mov	COUNT_, #49
0477c     B0 00 A0 FD | 	call	#pushregs_
04780     D0 F0 07 F1 | 	add	ptra, #208
04784     AF 5C 62 FC | 	wrlong	arg01, fp
04788     04 5E 05 F1 | 	add	fp, #4
0478c     AF 5E 62 FC | 	wrlong	arg02, fp
04790     04 5E 05 F1 | 	add	fp, #4
04794     AF 60 62 FC | 	wrlong	arg03, fp
04798     04 5E 05 F1 | 	add	fp, #4
0479c     AF 62 62 FC | 	wrlong	arg04, fp
047a0     0C 5E 85 F1 | 	sub	fp, #12
047a4                 | ' 
047a4                 | '   channel := channel & 3
047a4     AF 6A 02 FB | 	rdlong	local01, fp
047a8     03 6A 06 F5 | 	and	local01, #3
047ac     AF 6A 62 FC | 	wrlong	local01, fp
047b0     0C 5E 05 F1 | 	add	fp, #12
047b4     AF 6C 02 FB | 	rdlong	local02, fp
047b8     08 6C 46 F0 | 	shr	local02, #8
047bc     36 6F 02 F6 | 	mov	local03, local02
047c0     0F 6E 06 F5 | 	and	local03, #15
047c4                 | '   cmd     := (effect >> 8) & $F
047c4     BA 0F 06 F1 | 	add	objptr, #442
047c8     07 6F 42 FC | 	wrbyte	local03, objptr
047cc     AF 70 02 FB | 	rdlong	local04, fp
047d0     04 70 46 F0 | 	shr	local04, #4
047d4     38 73 02 F6 | 	mov	local05, local04
047d8     0F 72 06 F5 | 	and	local05, #15
047dc                 | '   x       := (effect >> 4) & $F
047dc     03 0E 86 F1 | 	sub	objptr, #3
047e0     07 73 42 FC | 	wrbyte	local05, objptr
047e4     AF 74 02 FB | 	rdlong	local06, fp
047e8     0F 74 06 F5 | 	and	local06, #15
047ec                 | '   y       := (effect     ) & $F
047ec     01 0E 06 F1 | 	add	objptr, #1
047f0     07 75 42 FC | 	wrbyte	local06, objptr
047f4     AF 76 02 FB | 	rdlong	local07, fp
047f8     0C 5E 85 F1 | 	sub	fp, #12
047fc     FF 76 06 F5 | 	and	local07, #255
04800                 | '   z       := (effect     ) & $FF
04800     01 0E 06 F1 | 	add	objptr, #1
04804     07 77 42 FC | 	wrbyte	local07, objptr
04808                 | ' 
04808                 | '   ' Handle everything that executes on "tick zero"
04808                 | '   if tickCounter == 0
04808     18 0F 86 F1 | 	sub	objptr, #280
0480c     07 6B CA FA | 	rdbyte	local01, objptr wz
04810     A1 0E 86 F1 | 	sub	objptr, #161
04814     F0 03 90 5D |  if_ne	jmp	#LR__0170
04818     AF 78 02 FB | 	rdlong	local08, fp
0481c     02 78 66 F0 | 	shl	local08, #2
04820     EF 0E 06 F1 | 	add	objptr, #239
04824     07 79 02 F1 | 	add	local08, objptr
04828                 | ' 
04828                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04828                 | '     deltaPeriod[channel] := 0
04828     3C 01 68 FC | 	wrlong	#0, local08
0482c     AF 7A 02 FB | 	rdlong	local09, fp
04830     02 7A 66 F0 | 	shl	local09, #2
04834     20 0E 06 F1 | 	add	objptr, #32
04838     07 7B 02 F1 | 	add	local09, objptr
0483c                 | '     deltaVolume[channel] := 0
0483c     3D 01 68 FC | 	wrlong	#0, local09
04840                 | ' 
04840                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04840                 | '     if sampleNumber > 0
04840     04 5E 05 F1 | 	add	fp, #4
04844     AF 6A 02 FB | 	rdlong	local01, fp
04848     04 5E 85 F1 | 	sub	fp, #4
0484c     00 6A 5E F2 | 	cmps	local01, #0 wcz
04850     0F 0F 86 F1 | 	sub	objptr, #271
04854     20 00 90 ED |  if_be	jmp	#LR__0160
04858     AF 7C 02 FB | 	rdlong	local10, fp
0485c     E0 0F 06 F1 | 	add	objptr, #480
04860     07 7D 02 F1 | 	add	local10, objptr
04864                 | '       sampleNumber_memory[channel] := sampleNumber
04864     04 5E 05 F1 | 	add	fp, #4
04868     AF 6A 02 FB | 	rdlong	local01, fp
0486c     04 5E 85 F1 | 	sub	fp, #4
04870     3E 6B 42 FC | 	wrbyte	local01, local10
04874     E0 0F 86 F1 | 	sub	objptr, #480
04878                 | LR__0160
04878     AF 7E 02 FB | 	rdlong	local11, fp
0487c     E0 0F 06 F1 | 	add	objptr, #480
04880     07 7F 02 F1 | 	add	local11, objptr
04884     20 5E 05 F1 | 	add	fp, #32
04888     AF 80 02 F6 | 	mov	local12, fp
0488c     10 5E 85 F1 | 	sub	fp, #16
04890     AF 82 02 F6 | 	mov	local13, fp
04894     31 0E 86 F1 | 	sub	objptr, #49
04898     07 85 02 F6 | 	mov	local14, objptr
0489c     04 5E 05 F1 | 	add	fp, #4
048a0     AF 86 02 F6 | 	mov	local15, fp
048a4     04 5E 05 F1 | 	add	fp, #4
048a8     AF 88 02 F6 | 	mov	local16, fp
048ac     04 5E 05 F1 | 	add	fp, #4
048b0     AF 8A 02 F6 | 	mov	local17, fp
048b4                 | ' 
048b4                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
048b4                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
048b4     3F 5D C2 FA | 	rdbyte	arg01, local11
048b8     42 63 02 F6 | 	mov	arg04, local14
048bc     43 8D 02 F6 | 	mov	local18, local15
048c0     44 8F 02 F6 | 	mov	local19, local16
048c4     45 91 02 F6 | 	mov	local20, local17
048c8     40 5F 02 F6 | 	mov	arg02, local12
048cc     41 61 02 F6 | 	mov	arg03, local13
048d0     46 65 02 F6 | 	mov	arg05, local18
048d4     47 67 02 F6 | 	mov	arg06, local19
048d8     48 69 02 F6 | 	mov	arg07, local20
048dc     AF 0F 86 F1 | 	sub	objptr, #431
048e0     1C 5E 85 F1 | 	sub	fp, #28
048e4     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
048e8                 | ' 
048e8                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
048e8                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
048e8                 | '     if sampleNumber > 0
048e8     04 5E 05 F1 | 	add	fp, #4
048ec     AF 6A 02 FB | 	rdlong	local01, fp
048f0     04 5E 85 F1 | 	sub	fp, #4
048f4     00 6A 5E F2 | 	cmps	local01, #0 wcz
048f8     24 00 90 ED |  if_be	jmp	#LR__0161
048fc     AF 92 02 FB | 	rdlong	local21, fp
04900     02 92 66 F0 | 	shl	local21, #2
04904     FF 0E 06 F1 | 	add	objptr, #255
04908     07 93 02 F1 | 	add	local21, objptr
0490c                 | '       currVolume[channel] := volume
0490c     14 5E 05 F1 | 	add	fp, #20
04910     AF 6A 02 FB | 	rdlong	local01, fp
04914     14 5E 85 F1 | 	sub	fp, #20
04918     49 6B 62 FC | 	wrlong	local01, local21
0491c     FF 0E 86 F1 | 	sub	objptr, #255
04920                 | LR__0161
04920                 | ' 
04920                 | '     ' Handle all commands that executes on "zero tick"
04920                 | '     sampleOffset := 0
04920     B3 0F 06 F1 | 	add	objptr, #435
04924     07 01 68 FC | 	wrlong	#0, objptr
04928     B3 0F 86 F1 | 	sub	objptr, #435
0492c                 | '     handleZeroTickCommands(channel)
0492c     AF 5C 02 FB | 	rdlong	arg01, fp
04930     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04934                 | ' 
04934                 | '     ' Prepare sample data for triggering (now or later)
04934                 | '     if period > 0
04934     08 5E 05 F1 | 	add	fp, #8
04938     AF 6A 02 FB | 	rdlong	local01, fp
0493c     08 5E 85 F1 | 	sub	fp, #8
04940     00 6A 5E F2 | 	cmps	local01, #0 wcz
04944     C8 02 90 ED |  if_be	jmp	#LR__0171
04948     08 5E 05 F1 | 	add	fp, #8
0494c     AF 94 02 F6 | 	mov	local22, fp
04950                 | ' 
04950                 | '       retunePeriod(@period, fineTune)
04950     AF 0F 06 F1 | 	add	objptr, #431
04954     07 5F 02 FB | 	rdlong	arg02, objptr
04958     AF 0F 86 F1 | 	sub	objptr, #431
0495c     4A 5D 02 F6 | 	mov	arg01, local22
04960     08 5E 85 F1 | 	sub	fp, #8
04964     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04968     AF 96 02 FB | 	rdlong	local23, fp
0496c     D3 0E 06 F1 | 	add	objptr, #211
04970     07 97 02 F1 | 	add	local23, objptr
04974                 | '       currFineTune[channel]        := fineTune
04974     DC 0E 06 F1 | 	add	objptr, #220
04978     07 6B 02 FB | 	rdlong	local01, objptr
0497c     4B 6B 42 FC | 	wrbyte	local01, local23
04980     AF 98 02 FB | 	rdlong	local24, fp
04984     02 98 66 F0 | 	shl	local24, #2
04988     88 0E 86 F1 | 	sub	objptr, #136
0498c     07 99 02 F1 | 	add	local24, objptr
04990                 | '       lastSetPeriod[channel]       := period
04990     08 5E 05 F1 | 	add	fp, #8
04994     AF 6A 02 FB | 	rdlong	local01, fp
04998     4C 6B 62 FC | 	wrlong	local01, local24
0499c     08 5E 85 F1 | 	sub	fp, #8
049a0     AF 9A 02 FB | 	rdlong	local25, fp
049a4     02 9A 66 F0 | 	shl	local25, #2
049a8     40 0E 06 F1 | 	add	objptr, #64
049ac     07 9B 02 F1 | 	add	local25, objptr
049b0                 | '       lastSetRepeatLength[channel] := repeatLength
049b0     1C 5E 05 F1 | 	add	fp, #28
049b4     AF 6A 02 FB | 	rdlong	local01, fp
049b8     4D 6B 62 FC | 	wrlong	local01, local25
049bc     1C 5E 85 F1 | 	sub	fp, #28
049c0     AF 9C 02 FB | 	rdlong	local26, fp
049c4     02 9C 66 F0 | 	shl	local26, #2
049c8     10 0E 06 F1 | 	add	objptr, #16
049cc     07 9D 02 F1 | 	add	local26, objptr
049d0                 | '       lastSetRepeatPoint[channel]  := repeatPoint
049d0     18 5E 05 F1 | 	add	fp, #24
049d4     AF 6A 02 FB | 	rdlong	local01, fp
049d8     4E 6B 62 FC | 	wrlong	local01, local26
049dc     08 5E 05 F1 | 	add	fp, #8
049e0     AF 9E 02 FB | 	rdlong	local27, fp
049e4     20 5E 85 F1 | 	sub	fp, #32
049e8     3C 0E 06 F1 | 	add	objptr, #60
049ec     07 A1 02 FB | 	rdlong	local28, objptr
049f0     50 9F 02 F1 | 	add	local27, local28
049f4     AF A2 02 FB | 	rdlong	local29, fp
049f8     02 A2 66 F0 | 	shl	local29, #2
049fc     7C 0E 86 F1 | 	sub	objptr, #124
04a00     07 A3 02 F1 | 	add	local29, objptr
04a04                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04a04     51 9F 62 FC | 	wrlong	local27, local29
04a08     AF A4 02 FB | 	rdlong	local30, fp
04a0c     02 A4 66 F0 | 	shl	local30, #2
04a10     10 0E 06 F1 | 	add	objptr, #16
04a14     07 A5 02 F1 | 	add	local30, objptr
04a18                 | '       lastSetSampleNr[channel]     := sampleNumber
04a18     04 5E 05 F1 | 	add	fp, #4
04a1c     AF 6A 02 FB | 	rdlong	local01, fp
04a20     52 6B 62 FC | 	wrlong	local01, local30
04a24                 | ' 
04a24                 | '       ' This calculates the correct sample length in all situations
04a24                 | '       if repeatLength > 2
04a24     18 5E 05 F1 | 	add	fp, #24
04a28     AF 6A 02 FB | 	rdlong	local01, fp
04a2c     1C 5E 85 F1 | 	sub	fp, #28
04a30     02 6A 5E F2 | 	cmps	local01, #2 wcz
04a34     47 0F 86 F1 | 	sub	objptr, #327
04a38     20 00 90 ED |  if_be	jmp	#LR__0162
04a3c     18 5E 05 F1 | 	add	fp, #24
04a40     AF A6 02 FB | 	rdlong	local31, fp
04a44     04 5E 05 F1 | 	add	fp, #4
04a48     AF A0 02 FB | 	rdlong	local28, fp
04a4c     50 A7 02 F1 | 	add	local31, local28
04a50                 | '         sampleLength := repeatPoint + repeatLength
04a50     0C 5E 85 F1 | 	sub	fp, #12
04a54     AF A6 62 FC | 	wrlong	local31, fp
04a58     10 5E 85 F1 | 	sub	fp, #16
04a5c                 | LR__0162
04a5c                 | ' 
04a5c                 | '       if sampleLength - sampleOffset < 1
04a5c     10 5E 05 F1 | 	add	fp, #16
04a60     AF 6A 02 FB | 	rdlong	local01, fp
04a64     10 5E 85 F1 | 	sub	fp, #16
04a68     B3 0F 06 F1 | 	add	objptr, #435
04a6c     07 A1 02 FB | 	rdlong	local28, objptr
04a70     B3 0F 86 F1 | 	sub	objptr, #435
04a74     50 6B 82 F1 | 	sub	local01, local28
04a78     01 6A 5E F2 | 	cmps	local01, #1 wcz
04a7c     1C 00 90 3D |  if_ae	jmp	#LR__0163
04a80     AF A8 02 FB | 	rdlong	local32, fp
04a84     02 A8 66 F0 | 	shl	local32, #2
04a88     57 0F 06 F1 | 	add	objptr, #343
04a8c     07 A9 02 F1 | 	add	local32, objptr
04a90                 | '         lastSetSampleLength[channel] := 1
04a90     54 03 68 FC | 	wrlong	#1, local32
04a94                 | '       else
04a94     57 0F 86 F1 | 	sub	objptr, #343
04a98     30 00 90 FD | 	jmp	#LR__0164
04a9c                 | LR__0163
04a9c     10 5E 05 F1 | 	add	fp, #16
04aa0     AF AA 02 FB | 	rdlong	local33, fp
04aa4     10 5E 85 F1 | 	sub	fp, #16
04aa8     B3 0F 06 F1 | 	add	objptr, #435
04aac     07 A1 02 FB | 	rdlong	local28, objptr
04ab0     50 AB 82 F1 | 	sub	local33, local28
04ab4     AF AC 02 FB | 	rdlong	local34, fp
04ab8     02 AC 66 F0 | 	shl	local34, #2
04abc     5C 0E 86 F1 | 	sub	objptr, #92
04ac0     07 AD 02 F1 | 	add	local34, objptr
04ac4                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04ac4     56 AB 62 FC | 	wrlong	local33, local34
04ac8     57 0F 86 F1 | 	sub	objptr, #343
04acc                 | LR__0164
04acc                 | ' 
04acc                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04acc                 | '       if sampleOffset > sampleLength
04acc     B3 0F 06 F1 | 	add	objptr, #435
04ad0     07 6B 02 FB | 	rdlong	local01, objptr
04ad4     B3 0F 86 F1 | 	sub	objptr, #435
04ad8     10 5E 05 F1 | 	add	fp, #16
04adc     AF A0 02 FB | 	rdlong	local28, fp
04ae0     10 5E 85 F1 | 	sub	fp, #16
04ae4     50 6B 5A F2 | 	cmps	local01, local28 wcz
04ae8     50 00 90 ED |  if_be	jmp	#LR__0165
04aec     20 5E 05 F1 | 	add	fp, #32
04af0     AF AE 02 FB | 	rdlong	local35, fp
04af4     08 5E 85 F1 | 	sub	fp, #8
04af8     AF A0 02 FB | 	rdlong	local28, fp
04afc     18 5E 85 F1 | 	sub	fp, #24
04b00     50 AF 02 F1 | 	add	local35, local28
04b04     AF B0 02 FB | 	rdlong	local36, fp
04b08     02 B0 66 F0 | 	shl	local36, #2
04b0c     37 0F 06 F1 | 	add	objptr, #311
04b10     07 B1 02 F1 | 	add	local36, objptr
04b14                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04b14     58 AF 62 FC | 	wrlong	local35, local36
04b18     AF B2 02 FB | 	rdlong	local37, fp
04b1c     02 B2 66 F0 | 	shl	local37, #2
04b20     20 0E 06 F1 | 	add	objptr, #32
04b24     07 B3 02 F1 | 	add	local37, objptr
04b28                 | '         lastSetSampleLength[channel] := repeatLength
04b28     1C 5E 05 F1 | 	add	fp, #28
04b2c     AF 6A 02 FB | 	rdlong	local01, fp
04b30     1C 5E 85 F1 | 	sub	fp, #28
04b34     59 6B 62 FC | 	wrlong	local01, local37
04b38     57 0F 86 F1 | 	sub	objptr, #343
04b3c                 | LR__0165
04b3c                 | ' 
04b3c                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04b3c                 | '       ifnot cmd == $3 || cmd == $5
04b3c     BA 0F 06 F1 | 	add	objptr, #442
04b40     07 6B C2 FA | 	rdbyte	local01, objptr
04b44     BA 0F 86 F1 | 	sub	objptr, #442
04b48     03 6A 0E F2 | 	cmp	local01, #3 wz
04b4c     54 00 90 AD |  if_e	jmp	#LR__0168
04b50     BA 0F 06 F1 | 	add	objptr, #442
04b54     07 B5 C2 FA | 	rdbyte	local38, objptr
04b58     BA 0F 86 F1 | 	sub	objptr, #442
04b5c     5A A1 02 F6 | 	mov	local28, local38
04b60     05 A0 0E F2 | 	cmp	local28, #5 wz
04b64     3C 00 90 AD |  if_e	jmp	#LR__0168
04b68                 | '         ifnot cmd == $E && x == $D
04b68     BA 0F 06 F1 | 	add	objptr, #442
04b6c     07 B7 C2 FA | 	rdbyte	local39, objptr
04b70     BA 0F 86 F1 | 	sub	objptr, #442
04b74     5B 6B 02 F6 | 	mov	local01, local39
04b78     0E 6A 0E F2 | 	cmp	local01, #14 wz
04b7c     18 00 90 5D |  if_ne	jmp	#LR__0166
04b80     B7 0F 06 F1 | 	add	objptr, #439
04b84     07 B5 C2 FA | 	rdbyte	local38, objptr
04b88     B7 0F 86 F1 | 	sub	objptr, #439
04b8c     5A A1 02 F6 | 	mov	local28, local38
04b90     0D A0 0E F2 | 	cmp	local28, #13 wz
04b94     0C 00 90 AD |  if_e	jmp	#LR__0167
04b98                 | LR__0166
04b98                 | '           triggerNote(channel)
04b98     AF 6A 02 FB | 	rdlong	local01, fp
04b9c     35 5D 02 F6 | 	mov	arg01, local01
04ba0     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04ba4                 | LR__0167
04ba4                 | LR__0168
04ba4                 | ' 
04ba4                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04ba4                 | '       if resetTremolo[channel] > 0
04ba4     AF 6A 02 FB | 	rdlong	local01, fp
04ba8     8F 0F 06 F1 | 	add	objptr, #399
04bac     07 6B 02 F1 | 	add	local01, objptr
04bb0     35 A1 C2 FA | 	rdbyte	local28, local01
04bb4     00 A0 5E F2 | 	cmps	local28, #0 wcz
04bb8     8F 0F 86 F1 | 	sub	objptr, #399
04bbc     14 00 90 ED |  if_be	jmp	#LR__0169
04bc0     AF B8 02 FB | 	rdlong	local40, fp
04bc4     8B 0F 06 F1 | 	add	objptr, #395
04bc8     07 B9 02 F1 | 	add	local40, objptr
04bcc                 | '         tremoloPos[channel] := 0
04bcc     5C 01 48 FC | 	wrbyte	#0, local40
04bd0     8B 0F 86 F1 | 	sub	objptr, #395
04bd4                 | LR__0169
04bd4                 | ' 
04bd4                 | '       if resetVibrato[channel] > 0
04bd4     AF 6A 02 FB | 	rdlong	local01, fp
04bd8     93 0F 06 F1 | 	add	objptr, #403
04bdc     07 6B 02 F1 | 	add	local01, objptr
04be0     35 A1 C2 FA | 	rdbyte	local28, local01
04be4     00 A0 5E F2 | 	cmps	local28, #0 wcz
04be8     93 0F 86 F1 | 	sub	objptr, #403
04bec     20 00 90 ED |  if_be	jmp	#LR__0171
04bf0     AF BA 02 FB | 	rdlong	local41, fp
04bf4     87 0F 06 F1 | 	add	objptr, #391
04bf8     07 BB 02 F1 | 	add	local41, objptr
04bfc                 | '         vibratoPos[channel] := 0
04bfc     5D 01 48 FC | 	wrbyte	#0, local41
04c00     87 0F 86 F1 | 	sub	objptr, #391
04c04                 | ' 
04c04                 | '   else
04c04     08 00 90 FD | 	jmp	#LR__0171
04c08                 | LR__0170
04c08                 | '     ' Handle commands that executes on all "non zero ticks"
04c08                 | '     handleNonZeroTickCommands(channel)
04c08     AF 5C 02 FB | 	rdlong	arg01, fp
04c0c     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04c10                 | LR__0171
04c10                 | ' 
04c10                 | '   ' Handle commands that executes on every tick
04c10                 | '   handleEveryTickCommands(channel)
04c10     AF 5C 02 FB | 	rdlong	arg01, fp
04c14     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04c18     AF BC 02 FB | 	rdlong	local42, fp
04c1c     02 BC 66 F0 | 	shl	local42, #2
04c20     DF 0E 06 F1 | 	add	objptr, #223
04c24     07 BD 02 F1 | 	add	local42, objptr
04c28     5E BF 02 FB | 	rdlong	local43, local42
04c2c     01 00 00 FF 
04c30     58 BF 66 F3 | 	fles	local43, ##856
04c34                 | ' 
04c34                 | '   ' Handle boundaries that should be kept
04c34                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04c34     5E BF 62 FC | 	wrlong	local43, local42
04c38     AF C0 02 FB | 	rdlong	local44, fp
04c3c     02 C0 66 F0 | 	shl	local44, #2
04c40     07 C1 02 F1 | 	add	local44, objptr
04c44     60 C3 02 FB | 	rdlong	local45, local44
04c48     71 C2 46 F3 | 	fges	local45, #113
04c4c                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04c4c     60 C3 62 FC | 	wrlong	local45, local44
04c50     AF C4 02 FB | 	rdlong	local46, fp
04c54     02 C4 66 F0 | 	shl	local46, #2
04c58     20 0E 06 F1 | 	add	objptr, #32
04c5c     07 C5 02 F1 | 	add	local46, objptr
04c60     62 C7 02 FB | 	rdlong	local47, local46
04c64     40 C6 66 F3 | 	fles	local47, #64
04c68                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04c68     62 C7 62 FC | 	wrlong	local47, local46
04c6c     AF C8 02 FB | 	rdlong	local48, fp
04c70     02 C8 66 F0 | 	shl	local48, #2
04c74     07 C9 02 F1 | 	add	local48, objptr
04c78     64 CB 02 FB | 	rdlong	local49, local48
04c7c     00 CA 46 F3 | 	fges	local49, #0
04c80                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04c80     64 CB 62 FC | 	wrlong	local49, local48
04c84     FF 0E 86 F1 | 	sub	objptr, #255
04c88     AF F0 03 F6 | 	mov	ptra, fp
04c8c     BF 00 A0 FD | 	call	#popregs_
04c90                 | _trackerplayer_spin2_processChannel_ret
04c90     2D 00 64 FD | 	ret
04c94                 | 
04c94                 | ' 
04c94                 | ' 
04c94                 | ' ' Handle all commands that executes on tick zero
04c94                 | ' '
04c94                 | ' PRI handleZeroTickCommands(channel)
04c94                 | _trackerplayer_spin2_handleZeroTickCommands
04c94     2E 31 02 F6 | 	mov	_var01, arg01
04c98                 | ' 
04c98                 | '   CASE_FAST cmd
04c98     BA 0F 06 F1 | 	add	objptr, #442
04c9c     07 33 C2 FA | 	rdbyte	_var02, objptr
04ca0     BA 0F 86 F1 | 	sub	objptr, #442
04ca4     19 35 02 F6 | 	mov	_var03, _var02
04ca8     09 34 86 F1 | 	sub	_var03, #9
04cac     07 34 26 F3 | 	fle	_var03, #7
04cb0     1A 37 02 F6 | 	mov	_var04, _var03
04cb4     30 36 62 FD | 	jmprel	_var04
04cb8                 | LR__0172
04cb8     1C 00 90 FD | 	jmp	#LR__0173
04cbc     30 04 90 FD | 	jmp	#LR__0196
04cc0     64 00 90 FD | 	jmp	#LR__0175
04cc4     84 00 90 FD | 	jmp	#LR__0176
04cc8     A0 00 90 FD | 	jmp	#LR__0177
04ccc     D0 00 90 FD | 	jmp	#LR__0178
04cd0     9C 03 90 FD | 	jmp	#LR__0193
04cd4     18 04 90 FD | 	jmp	#LR__0196
04cd8                 | LR__0173
04cd8                 | ' 
04cd8                 | '     $9:                          ' Set sample offset
04cd8                 | '       if z > 0
04cd8     B9 0F 06 F1 | 	add	objptr, #441
04cdc     07 39 C2 FA | 	rdbyte	_var05, objptr
04ce0     B9 0F 86 F1 | 	sub	objptr, #441
04ce4     00 38 5E F2 | 	cmps	_var05, #0 wcz
04ce8     1C 00 90 ED |  if_be	jmp	#LR__0174
04cec                 | '         cmd9_memoryZ[channel] := z
04cec     18 39 02 F6 | 	mov	_var05, _var01
04cf0     DC 0F 06 F1 | 	add	objptr, #476
04cf4     07 39 02 F1 | 	add	_var05, objptr
04cf8     23 0E 86 F1 | 	sub	objptr, #35
04cfc     07 3B C2 FA | 	rdbyte	_var06, objptr
04d00     B9 0F 86 F1 | 	sub	objptr, #441
04d04     1C 3B 42 FC | 	wrbyte	_var06, _var05
04d08                 | LR__0174
04d08                 | ' 
04d08                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04d08     DC 0F 06 F1 | 	add	objptr, #476
04d0c     07 31 02 F1 | 	add	_var01, objptr
04d10     18 39 C2 FA | 	rdbyte	_var05, _var01
04d14     08 38 66 F0 | 	shl	_var05, #8
04d18     29 0E 86 F1 | 	sub	objptr, #41
04d1c     07 39 62 FC | 	wrlong	_var05, objptr
04d20     B3 0F 86 F1 | 	sub	objptr, #435
04d24     C8 03 90 FD | 	jmp	#LR__0196
04d28                 | LR__0175
04d28                 | ' 
04d28                 | '     $B:                          ' Jump position
04d28                 | '       cmdB_memoryZ := z
04d28     B9 0F 06 F1 | 	add	objptr, #441
04d2c     07 39 C2 FA | 	rdbyte	_var05, objptr
04d30     2E 0E 06 F1 | 	add	objptr, #46
04d34     07 39 42 FC | 	wrbyte	_var05, objptr
04d38                 | '       cmdB_updatePosition := true
04d38     01 0E 06 F1 | 	add	objptr, #1
04d3c     FF FF FF FF 
04d40     07 FF 4B FC | 	wrbyte	##-1, objptr
04d44     E8 0F 86 F1 | 	sub	objptr, #488
04d48     A4 03 90 FD | 	jmp	#LR__0196
04d4c                 | LR__0176
04d4c                 | ' 
04d4c                 | '     $C:                          ' Set volume
04d4c                 | '       currVolume[channel] := z
04d4c     02 30 66 F0 | 	shl	_var01, #2
04d50     FF 0E 06 F1 | 	add	objptr, #255
04d54     07 31 02 F1 | 	add	_var01, objptr
04d58     BA 0E 06 F1 | 	add	objptr, #186
04d5c     07 3B C2 FA | 	rdbyte	_var06, objptr
04d60     B9 0F 86 F1 | 	sub	objptr, #441
04d64     18 3B 62 FC | 	wrlong	_var06, _var01
04d68     84 03 90 FD | 	jmp	#LR__0196
04d6c                 | LR__0177
04d6c                 | ' 
04d6c                 | '     $D:                          ' Pattern break
04d6c                 | '       cmdD_memoryX := x
04d6c     B7 0F 06 F1 | 	add	objptr, #439
04d70     07 39 C2 FA | 	rdbyte	_var05, objptr
04d74     2D 0E 06 F1 | 	add	objptr, #45
04d78     07 39 42 FC | 	wrbyte	_var05, objptr
04d7c                 | '       cmdD_memoryY := y
04d7c     2C 0E 86 F1 | 	sub	objptr, #44
04d80     07 39 C2 FA | 	rdbyte	_var05, objptr
04d84     2D 0E 06 F1 | 	add	objptr, #45
04d88     07 39 42 FC | 	wrbyte	_var05, objptr
04d8c                 | '       cmdD_updatePosition := true
04d8c     01 0E 06 F1 | 	add	objptr, #1
04d90     FF FF FF FF 
04d94     07 FF 4B FC | 	wrbyte	##-1, objptr
04d98     E6 0F 86 F1 | 	sub	objptr, #486
04d9c     50 03 90 FD | 	jmp	#LR__0196
04da0                 | LR__0178
04da0                 | ' 
04da0                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04da0                 | ' 
04da0                 | '       CASE_FAST x
04da0     B7 0F 06 F1 | 	add	objptr, #439
04da4     07 3D C2 FA | 	rdbyte	_var07, objptr
04da8     B7 0F 86 F1 | 	sub	objptr, #439
04dac     1E 39 02 F6 | 	mov	_var05, _var07
04db0     0F 38 26 F3 | 	fle	_var05, #15
04db4     1C 3F 02 F6 | 	mov	_var08, _var05
04db8     30 3E 62 FD | 	jmprel	_var08
04dbc                 | LR__0179
04dbc     3C 00 90 FD | 	jmp	#LR__0180
04dc0     58 00 90 FD | 	jmp	#LR__0181
04dc4     8C 00 90 FD | 	jmp	#LR__0182
04dc8     C0 00 90 FD | 	jmp	#LR__0183
04dcc     DC 00 90 FD | 	jmp	#LR__0184
04dd0     14 01 90 FD | 	jmp	#LR__0185
04dd4     28 01 90 FD | 	jmp	#LR__0186
04dd8     C0 01 90 FD | 	jmp	#LR__0189
04ddc     10 03 90 FD | 	jmp	#LR__0196
04de0     0C 03 90 FD | 	jmp	#LR__0196
04de4     F0 01 90 FD | 	jmp	#LR__0190
04de8     24 02 90 FD | 	jmp	#LR__0191
04dec     00 03 90 FD | 	jmp	#LR__0196
04df0     FC 02 90 FD | 	jmp	#LR__0196
04df4     50 02 90 FD | 	jmp	#LR__0192
04df8     F4 02 90 FD | 	jmp	#LR__0196
04dfc                 | LR__0180
04dfc                 | ' 
04dfc                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04dfc     B8 0F 06 F1 | 	add	objptr, #440
04e00     07 3B C2 FA | 	rdbyte	_var06, objptr
04e04     1D 3B 22 F6 | 	not	_var06, _var06
04e08     01 3A 06 F5 | 	and	_var06, #1
04e0c     03 0E 06 F1 | 	add	objptr, #3
04e10     07 3B 42 FC | 	wrbyte	_var06, objptr
04e14     BB 0F 86 F1 | 	sub	objptr, #443
04e18     D4 02 90 FD | 	jmp	#LR__0196
04e1c                 | LR__0181
04e1c                 | ' 
04e1c                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04e1c     18 41 02 F6 | 	mov	_var09, _var01
04e20     02 40 66 F0 | 	shl	_var09, #2
04e24     DF 0E 06 F1 | 	add	objptr, #223
04e28     07 41 02 F1 | 	add	_var09, objptr
04e2c     20 3B 02 FB | 	rdlong	_var06, _var09
04e30     D9 0E 06 F1 | 	add	objptr, #217
04e34     07 43 C2 FA | 	rdbyte	_var10, objptr
04e38     21 3B 82 F1 | 	sub	_var06, _var10
04e3c     02 30 66 F0 | 	shl	_var01, #2
04e40     D9 0E 86 F1 | 	sub	objptr, #217
04e44     07 31 02 F1 | 	add	_var01, objptr
04e48     18 3B 62 FC | 	wrlong	_var06, _var01
04e4c     DF 0E 86 F1 | 	sub	objptr, #223
04e50     9C 02 90 FD | 	jmp	#LR__0196
04e54                 | LR__0182
04e54                 | ' 
04e54                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04e54     18 41 02 F6 | 	mov	_var09, _var01
04e58     02 40 66 F0 | 	shl	_var09, #2
04e5c     DF 0E 06 F1 | 	add	objptr, #223
04e60     07 41 02 F1 | 	add	_var09, objptr
04e64     20 3B 02 FB | 	rdlong	_var06, _var09
04e68     D9 0E 06 F1 | 	add	objptr, #217
04e6c     07 43 C2 FA | 	rdbyte	_var10, objptr
04e70     21 3B 02 F1 | 	add	_var06, _var10
04e74     02 30 66 F0 | 	shl	_var01, #2
04e78     D9 0E 86 F1 | 	sub	objptr, #217
04e7c     07 31 02 F1 | 	add	_var01, objptr
04e80     18 3B 62 FC | 	wrlong	_var06, _var01
04e84     DF 0E 86 F1 | 	sub	objptr, #223
04e88     64 02 90 FD | 	jmp	#LR__0196
04e8c                 | LR__0183
04e8c                 | ' 
04e8c                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04e8c     B8 0F 06 F1 | 	add	objptr, #440
04e90     07 3B C2 FA | 	rdbyte	_var06, objptr
04e94     01 3A 06 F5 | 	and	_var06, #1
04e98     04 0E 06 F1 | 	add	objptr, #4
04e9c     07 31 02 F1 | 	add	_var01, objptr
04ea0     18 3B 42 FC | 	wrbyte	_var06, _var01
04ea4     BC 0F 86 F1 | 	sub	objptr, #444
04ea8     44 02 90 FD | 	jmp	#LR__0196
04eac                 | LR__0184
04eac                 | ' 
04eac                 | '         $4:                                      ' Set vibrato waveform type
04eac                 | '           vibratoType[channel]  := y & 3
04eac     B8 0F 06 F1 | 	add	objptr, #440
04eb0     07 3B C2 FA | 	rdbyte	_var06, objptr
04eb4     03 3A 06 F5 | 	and	_var06, #3
04eb8     18 45 02 F6 | 	mov	_var11, _var01
04ebc     08 0E 06 F1 | 	add	objptr, #8
04ec0     07 45 02 F1 | 	add	_var11, objptr
04ec4     22 3B 42 FC | 	wrbyte	_var06, _var11
04ec8                 | '           resetVibrato[channel] := y & 4
04ec8     08 0E 86 F1 | 	sub	objptr, #8
04ecc     07 3B C2 FA | 	rdbyte	_var06, objptr
04ed0     04 3A 06 F5 | 	and	_var06, #4
04ed4     25 0E 86 F1 | 	sub	objptr, #37
04ed8     07 31 02 F1 | 	add	_var01, objptr
04edc     18 3B 42 FC | 	wrbyte	_var06, _var01
04ee0     93 0F 86 F1 | 	sub	objptr, #403
04ee4     08 02 90 FD | 	jmp	#LR__0196
04ee8                 | LR__0185
04ee8                 | ' 
04ee8                 | '         $5: fineTune := y                        ' Set finetune
04ee8     B8 0F 06 F1 | 	add	objptr, #440
04eec     07 3B C2 FA | 	rdbyte	_var06, objptr
04ef0     09 0E 86 F1 | 	sub	objptr, #9
04ef4     07 3B 62 FC | 	wrlong	_var06, objptr
04ef8     AF 0F 86 F1 | 	sub	objptr, #431
04efc     F0 01 90 FD | 	jmp	#LR__0196
04f00                 | LR__0186
04f00                 | ' 
04f00                 | '         $6:                                      ' Pattern looping
04f00                 | '           if y == 0
04f00     B8 0F 06 F1 | 	add	objptr, #440
04f04     07 3B CA FA | 	rdbyte	_var06, objptr wz
04f08     B8 0F 86 F1 | 	sub	objptr, #440
04f0c     1C 00 90 5D |  if_ne	jmp	#LR__0187
04f10                 | '             cmdE6_memory[channel] := patternRow
04f10     E9 0F 06 F1 | 	add	objptr, #489
04f14     07 31 02 F1 | 	add	_var01, objptr
04f18     47 0F 86 F1 | 	sub	objptr, #327
04f1c     07 45 C2 FA | 	rdbyte	_var11, objptr
04f20     A2 0E 86 F1 | 	sub	objptr, #162
04f24     18 45 42 FC | 	wrbyte	_var11, _var01
04f28                 | '           else
04f28     C4 01 90 FD | 	jmp	#LR__0196
04f2c                 | LR__0187
04f2c                 | '             if ++cmdE6_counter[channel] <= y
04f2c     18 41 02 F6 | 	mov	_var09, _var01
04f30     ED 0F 06 F1 | 	add	objptr, #493
04f34     07 41 02 F1 | 	add	_var09, objptr
04f38     20 3B C2 FA | 	rdbyte	_var06, _var09
04f3c     01 3A 06 F1 | 	add	_var06, #1
04f40     18 43 02 F6 | 	mov	_var10, _var01
04f44     07 43 02 F1 | 	add	_var10, objptr
04f48     21 3B 42 FC | 	wrbyte	_var06, _var10
04f4c     21 47 C2 FA | 	rdbyte	_var12, _var10
04f50     35 0E 86 F1 | 	sub	objptr, #53
04f54     07 49 C2 FA | 	rdbyte	_var13, objptr
04f58     B8 0F 86 F1 | 	sub	objptr, #440
04f5c     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04f60     24 00 90 1D |  if_a	jmp	#LR__0188
04f64                 | '               cmdE6_updatePosition[channel] := true
04f64     F1 0F 06 F1 | 	add	objptr, #497
04f68     07 31 02 F1 | 	add	_var01, objptr
04f6c     FF FF FF FF 
04f70     18 FF 4B FC | 	wrbyte	##-1, _var01
04f74                 | '               cmdE6_updatePositionCommon    := true
04f74     04 0E 06 F1 | 	add	objptr, #4
04f78     FF FF FF FF 
04f7c     07 FF 4B FC | 	wrbyte	##-1, objptr
04f80     F5 0F 86 F1 | 	sub	objptr, #501
04f84                 | '             else
04f84     68 01 90 FD | 	jmp	#LR__0196
04f88                 | LR__0188
04f88                 | '               cmdE6_counter[channel] := 0
04f88     ED 0F 06 F1 | 	add	objptr, #493
04f8c     07 31 02 F1 | 	add	_var01, objptr
04f90     18 01 48 FC | 	wrbyte	#0, _var01
04f94     ED 0F 86 F1 | 	sub	objptr, #493
04f98     54 01 90 FD | 	jmp	#LR__0196
04f9c                 | LR__0189
04f9c                 | ' 
04f9c                 | '         $7:                                      ' Set tremolo waveform type
04f9c                 | '           tremoloType[channel] := y & 3
04f9c     B8 0F 06 F1 | 	add	objptr, #440
04fa0     07 3B C2 FA | 	rdbyte	_var06, objptr
04fa4     03 3A 06 F5 | 	and	_var06, #3
04fa8     18 45 02 F6 | 	mov	_var11, _var01
04fac     0C 0E 06 F1 | 	add	objptr, #12
04fb0     07 45 02 F1 | 	add	_var11, objptr
04fb4     22 3B 42 FC | 	wrbyte	_var06, _var11
04fb8                 | '           resetTremolo[channel] := y & 4
04fb8     0C 0E 86 F1 | 	sub	objptr, #12
04fbc     07 3B C2 FA | 	rdbyte	_var06, objptr
04fc0     04 3A 06 F5 | 	and	_var06, #4
04fc4     29 0E 86 F1 | 	sub	objptr, #41
04fc8     07 31 02 F1 | 	add	_var01, objptr
04fcc     18 3B 42 FC | 	wrbyte	_var06, _var01
04fd0     8F 0F 86 F1 | 	sub	objptr, #399
04fd4     18 01 90 FD | 	jmp	#LR__0196
04fd8                 | LR__0190
04fd8                 | ' 
04fd8                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
04fd8     18 41 02 F6 | 	mov	_var09, _var01
04fdc     02 40 66 F0 | 	shl	_var09, #2
04fe0     FF 0E 06 F1 | 	add	objptr, #255
04fe4     07 41 02 F1 | 	add	_var09, objptr
04fe8     20 3B 02 FB | 	rdlong	_var06, _var09
04fec     B9 0E 06 F1 | 	add	objptr, #185
04ff0     07 43 C2 FA | 	rdbyte	_var10, objptr
04ff4     21 3B 02 F1 | 	add	_var06, _var10
04ff8     02 30 66 F0 | 	shl	_var01, #2
04ffc     B9 0E 86 F1 | 	sub	objptr, #185
05000     07 31 02 F1 | 	add	_var01, objptr
05004     18 3B 62 FC | 	wrlong	_var06, _var01
05008     FF 0E 86 F1 | 	sub	objptr, #255
0500c     E0 00 90 FD | 	jmp	#LR__0196
05010                 | LR__0191
05010                 | ' 
05010                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05010     18 41 02 F6 | 	mov	_var09, _var01
05014     02 40 66 F0 | 	shl	_var09, #2
05018     FF 0E 06 F1 | 	add	objptr, #255
0501c     07 41 02 F1 | 	add	_var09, objptr
05020     20 3B 02 FB | 	rdlong	_var06, _var09
05024     B9 0E 06 F1 | 	add	objptr, #185
05028     07 43 C2 FA | 	rdbyte	_var10, objptr
0502c     21 3B 82 F1 | 	sub	_var06, _var10
05030     02 30 66 F0 | 	shl	_var01, #2
05034     B9 0E 86 F1 | 	sub	objptr, #185
05038     07 31 02 F1 | 	add	_var01, objptr
0503c     18 3B 62 FC | 	wrlong	_var06, _var01
05040     FF 0E 86 F1 | 	sub	objptr, #255
05044     A8 00 90 FD | 	jmp	#LR__0196
05048                 | LR__0192
05048                 | ' 
05048                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05048     B8 0F 06 F1 | 	add	objptr, #440
0504c     07 41 C2 FA | 	rdbyte	_var09, objptr
05050     14 0F 86 F1 | 	sub	objptr, #276
05054     07 43 C2 FA | 	rdbyte	_var10, objptr
05058     21 41 02 FD | 	qmul	_var09, _var10
0505c     18 3A 62 FD | 	getqx	_var06
05060     01 0E 06 F1 | 	add	objptr, #1
05064     07 3B 42 FC | 	wrbyte	_var06, objptr
05068     A5 0E 86 F1 | 	sub	objptr, #165
0506c     80 00 90 FD | 	jmp	#LR__0196
05070                 | LR__0193
05070                 | ' 
05070                 | '     $F:                          ' Set speed
05070                 | '       if z < 32
05070     B9 0F 06 F1 | 	add	objptr, #441
05074     07 39 C2 FA | 	rdbyte	_var05, objptr
05078     B9 0F 86 F1 | 	sub	objptr, #441
0507c     20 38 5E F2 | 	cmps	_var05, #32 wcz
05080     18 00 90 3D |  if_ae	jmp	#LR__0194
05084                 | '         currentSongSpeed := z
05084     B9 0F 06 F1 | 	add	objptr, #441
05088     07 39 C2 FA | 	rdbyte	_var05, objptr
0508c     15 0F 86 F1 | 	sub	objptr, #277
05090     07 39 42 FC | 	wrbyte	_var05, objptr
05094     A4 0E 86 F1 | 	sub	objptr, #164
05098                 | '       else
05098     54 00 90 FD | 	jmp	#LR__0195
0509c                 | LR__0194
0509c                 | '         ticksPerMinute := z * 24
0509c     B9 0F 06 F1 | 	add	objptr, #441
050a0     07 3D C2 FA | 	rdbyte	_var07, objptr
050a4     1E 39 02 F6 | 	mov	_var05, _var07
050a8     01 38 66 F0 | 	shl	_var05, #1
050ac     1E 39 02 F1 | 	add	_var05, _var07
050b0     03 38 66 F0 | 	shl	_var05, #3
050b4     12 0E 86 F1 | 	sub	objptr, #18
050b8     07 39 62 FC | 	wrlong	_var05, objptr
050bc     A7 0F 86 F1 | 	sub	objptr, #423
050c0                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
050c0     07 0B 03 FB | 	rdlong	muldiva_, objptr
050c4     A7 0F 06 F1 | 	add	objptr, #423
050c8     07 0D 03 FB | 	rdlong	muldivb_, objptr
050cc     A7 0F 86 F1 | 	sub	objptr, #423
050d0     D0 00 A0 FD | 	call	#divide_
050d4     86 3B 02 F6 | 	mov	_var06, muldivb_
050d8     04 3A 66 F0 | 	shl	_var06, #4
050dc     86 3B 82 F1 | 	sub	_var06, muldivb_
050e0     02 3A 66 F0 | 	shl	_var06, #2
050e4     AB 0F 06 F1 | 	add	objptr, #427
050e8     07 3B 62 FC | 	wrlong	_var06, objptr
050ec     AB 0F 86 F1 | 	sub	objptr, #427
050f0                 | LR__0195
050f0                 | LR__0196
050f0                 | _trackerplayer_spin2_handleZeroTickCommands_ret
050f0     2D 00 64 FD | 	ret
050f4                 | 
050f4                 | ' 
050f4                 | ' 
050f4                 | ' ' Handle all commands that executes on "non zero ticks"
050f4                 | ' '
050f4                 | ' PRI handleNonZeroTickCommands(channel)
050f4                 | _trackerplayer_spin2_handleNonZeroTickCommands
050f4     0A 5A 05 F6 | 	mov	COUNT_, #10
050f8     B0 00 A0 FD | 	call	#pushregs_
050fc     2E 6B 02 F6 | 	mov	local01, arg01
05100                 | ' 
05100                 | '   CASE_FAST cmd
05100     BA 0F 06 F1 | 	add	objptr, #442
05104     07 6D C2 FA | 	rdbyte	local02, objptr
05108     BA 0F 86 F1 | 	sub	objptr, #442
0510c     36 6F 02 F6 | 	mov	local03, local02
05110     01 6E 86 F1 | 	sub	local03, #1
05114     0E 6E 26 F3 | 	fle	local03, #14
05118     37 71 02 F6 | 	mov	local04, local03
0511c     30 70 62 FD | 	jmprel	local04
05120                 | LR__0197
05120     38 00 90 FD | 	jmp	#LR__0198
05124     A0 00 90 FD | 	jmp	#LR__0199
05128     D4 00 90 FD | 	jmp	#LR__0200
0512c     1C 02 90 FD | 	jmp	#LR__0210
05130     20 01 90 FD | 	jmp	#LR__0202
05134     48 01 90 FD | 	jmp	#LR__0203
05138     50 01 90 FD | 	jmp	#LR__0204
0513c     0C 02 90 FD | 	jmp	#LR__0210
05140     08 02 90 FD | 	jmp	#LR__0210
05144     B0 01 90 FD | 	jmp	#LR__0207
05148     00 02 90 FD | 	jmp	#LR__0210
0514c     FC 01 90 FD | 	jmp	#LR__0210
05150     F8 01 90 FD | 	jmp	#LR__0210
05154     AC 01 90 FD | 	jmp	#LR__0208
05158     F0 01 90 FD | 	jmp	#LR__0210
0515c                 | LR__0198
0515c                 | ' 
0515c                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
0515c     35 73 02 F6 | 	mov	local05, local01
05160     02 72 66 F0 | 	shl	local05, #2
05164     DF 0E 06 F1 | 	add	objptr, #223
05168     07 73 02 F1 | 	add	local05, objptr
0516c     39 75 02 FB | 	rdlong	local06, local05
05170     DA 0E 06 F1 | 	add	objptr, #218
05174     07 77 C2 FA | 	rdbyte	local07, objptr
05178     3B 75 82 F1 | 	sub	local06, local07
0517c     35 79 02 F6 | 	mov	local08, local01
05180     02 78 66 F0 | 	shl	local08, #2
05184     DA 0E 86 F1 | 	sub	objptr, #218
05188     07 79 02 F1 | 	add	local08, objptr
0518c     3C 75 62 FC | 	wrlong	local06, local08
05190                 | ' 
05190                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05190                 | '       if currPeriod[channel] < 0
05190     35 75 02 F6 | 	mov	local06, local01
05194     02 74 66 F0 | 	shl	local06, #2
05198     07 75 02 F1 | 	add	local06, objptr
0519c     3A 7B 02 FB | 	rdlong	local09, local06
051a0     00 7A 5E F2 | 	cmps	local09, #0 wcz
051a4     DF 0E 86 F1 | 	sub	objptr, #223
051a8     A0 01 90 3D |  if_ae	jmp	#LR__0210
051ac                 | '         currPeriod[channel] := MAXIMUM_PERIOD
051ac     02 6A 66 F0 | 	shl	local01, #2
051b0     DF 0E 06 F1 | 	add	objptr, #223
051b4     07 6B 02 F1 | 	add	local01, objptr
051b8     01 00 80 FF 
051bc     35 B1 6A FC | 	wrlong	##856, local01
051c0     DF 0E 86 F1 | 	sub	objptr, #223
051c4     84 01 90 FD | 	jmp	#LR__0210
051c8                 | LR__0199
051c8                 | ' 
051c8                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
051c8     35 73 02 F6 | 	mov	local05, local01
051cc     02 72 66 F0 | 	shl	local05, #2
051d0     DF 0E 06 F1 | 	add	objptr, #223
051d4     07 73 02 F1 | 	add	local05, objptr
051d8     39 75 02 FB | 	rdlong	local06, local05
051dc     DA 0E 06 F1 | 	add	objptr, #218
051e0     07 77 C2 FA | 	rdbyte	local07, objptr
051e4     3B 75 02 F1 | 	add	local06, local07
051e8     02 6A 66 F0 | 	shl	local01, #2
051ec     DA 0E 86 F1 | 	sub	objptr, #218
051f0     07 6B 02 F1 | 	add	local01, objptr
051f4     35 75 62 FC | 	wrlong	local06, local01
051f8     DF 0E 86 F1 | 	sub	objptr, #223
051fc     4C 01 90 FD | 	jmp	#LR__0210
05200                 | LR__0200
05200                 | ' 
05200                 | '     $3:                                 ' Slide to note (portamento)
05200                 | '       if z > 0
05200     B9 0F 06 F1 | 	add	objptr, #441
05204     07 75 C2 FA | 	rdbyte	local06, objptr
05208     B9 0F 86 F1 | 	sub	objptr, #441
0520c     00 74 5E F2 | 	cmps	local06, #0 wcz
05210     1C 00 90 ED |  if_be	jmp	#LR__0201
05214                 | '         cmd3_memoryZ[channel] := z
05214     35 75 02 F6 | 	mov	local06, local01
05218     C8 0F 06 F1 | 	add	objptr, #456
0521c     07 75 02 F1 | 	add	local06, objptr
05220     0F 0E 86 F1 | 	sub	objptr, #15
05224     07 7B C2 FA | 	rdbyte	local09, objptr
05228     B9 0F 86 F1 | 	sub	objptr, #441
0522c     3A 7B 42 FC | 	wrbyte	local09, local06
05230                 | LR__0201
05230                 | ' 
05230                 | '       doPortamento(channel, lastSetPeriod[channel])
05230     35 73 02 F6 | 	mov	local05, local01
05234     02 72 66 F0 | 	shl	local05, #2
05238     27 0F 06 F1 | 	add	objptr, #295
0523c     07 73 02 F1 | 	add	local05, objptr
05240     39 5F 02 FB | 	rdlong	arg02, local05
05244     35 5D 02 F6 | 	mov	arg01, local01
05248     27 0F 86 F1 | 	sub	objptr, #295
0524c     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05250     F8 00 90 FD | 	jmp	#LR__0210
05254                 | LR__0202
05254                 | ' 
05254                 | '     $5:                                 ' Volume slide + portamento
05254                 | '       doVolumeSlide(channel)
05254     35 5D 02 F6 | 	mov	arg01, local01
05258     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0525c                 | '       doPortamento(channel, lastSetPeriod[channel])
0525c     35 73 02 F6 | 	mov	local05, local01
05260     02 72 66 F0 | 	shl	local05, #2
05264     27 0F 06 F1 | 	add	objptr, #295
05268     07 73 02 F1 | 	add	local05, objptr
0526c     39 5F 02 FB | 	rdlong	arg02, local05
05270     35 5D 02 F6 | 	mov	arg01, local01
05274     27 0F 86 F1 | 	sub	objptr, #295
05278     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0527c     CC 00 90 FD | 	jmp	#LR__0210
05280                 | LR__0203
05280                 | ' 
05280                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05280     35 5D 02 F6 | 	mov	arg01, local01
05284     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05288     C0 00 90 FD | 	jmp	#LR__0210
0528c                 | LR__0204
0528c                 | ' 
0528c                 | '     $7:                                 ' Tremolo
0528c                 | '       if x > 0
0528c     B7 0F 06 F1 | 	add	objptr, #439
05290     07 75 C2 FA | 	rdbyte	local06, objptr
05294     B7 0F 86 F1 | 	sub	objptr, #439
05298     00 74 5E F2 | 	cmps	local06, #0 wcz
0529c     1C 00 90 ED |  if_be	jmp	#LR__0205
052a0                 | '         cmd7_memoryX[channel] := x
052a0     35 75 02 F6 | 	mov	local06, local01
052a4     D8 0F 06 F1 | 	add	objptr, #472
052a8     07 75 02 F1 | 	add	local06, objptr
052ac     21 0E 86 F1 | 	sub	objptr, #33
052b0     07 7B C2 FA | 	rdbyte	local09, objptr
052b4     B7 0F 86 F1 | 	sub	objptr, #439
052b8     3A 7B 42 FC | 	wrbyte	local09, local06
052bc                 | LR__0205
052bc                 | '       if y > 0
052bc     B8 0F 06 F1 | 	add	objptr, #440
052c0     07 75 C2 FA | 	rdbyte	local06, objptr
052c4     B8 0F 86 F1 | 	sub	objptr, #440
052c8     00 74 5E F2 | 	cmps	local06, #0 wcz
052cc     1C 00 90 ED |  if_be	jmp	#LR__0206
052d0                 | '         cmd7_memoryY[channel] := y
052d0     35 75 02 F6 | 	mov	local06, local01
052d4     D4 0F 06 F1 | 	add	objptr, #468
052d8     07 75 02 F1 | 	add	local06, objptr
052dc     1C 0E 86 F1 | 	sub	objptr, #28
052e0     07 7B C2 FA | 	rdbyte	local09, objptr
052e4     B8 0F 86 F1 | 	sub	objptr, #440
052e8     3A 7B 42 FC | 	wrbyte	local09, local06
052ec                 | LR__0206
052ec                 | ' 
052ec                 | '       doTremolo(channel)
052ec     35 5D 02 F6 | 	mov	arg01, local01
052f0     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
052f4     54 00 90 FD | 	jmp	#LR__0210
052f8                 | LR__0207
052f8                 | ' 
052f8                 | '     $A: doVolumeSlide(channel)          ' Volume slide
052f8     35 5D 02 F6 | 	mov	arg01, local01
052fc     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05300     48 00 90 FD | 	jmp	#LR__0210
05304                 | LR__0208
05304                 | ' 
05304                 | '     $E:                                 ' Retrig every Y ticks
05304                 | '       if (x == $9) && ((tickcounter // y) == 0)
05304     B7 0F 06 F1 | 	add	objptr, #439
05308     07 73 C2 FA | 	rdbyte	local05, objptr
0530c     B7 0F 86 F1 | 	sub	objptr, #439
05310     09 72 0E F2 | 	cmp	local05, #9 wz
05314     34 00 90 5D |  if_ne	jmp	#LR__0209
05318     A1 0E 06 F1 | 	add	objptr, #161
0531c     07 77 C2 FA | 	rdbyte	local07, objptr
05320     3B 0B 03 F6 | 	mov	muldiva_, local07
05324     17 0F 06 F1 | 	add	objptr, #279
05328     07 7D C2 FA | 	rdbyte	local10, objptr
0532c     B8 0F 86 F1 | 	sub	objptr, #440
05330     3E 0D 03 F6 | 	mov	muldivb_, local10
05334     D0 00 A0 FD | 	call	#divide_
05338     85 7B 0A F6 | 	mov	local09, muldiva_ wz
0533c     0C 00 90 5D |  if_ne	jmp	#LR__0209
05340                 | '         triggerNote(channel)
05340     35 75 02 F6 | 	mov	local06, local01
05344     3A 5D 02 F6 | 	mov	arg01, local06
05348     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
0534c                 | LR__0209
0534c                 | LR__0210
0534c     AF F0 03 F6 | 	mov	ptra, fp
05350     BF 00 A0 FD | 	call	#popregs_
05354                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
05354     2D 00 64 FD | 	ret
05358                 | 
05358                 | ' 
05358                 | ' 
05358                 | ' ' Handle all commands that executes on every tick
05358                 | ' '
05358                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05358                 | _trackerplayer_spin2_handleEveryTickCommands
05358     12 5A 05 F6 | 	mov	COUNT_, #18
0535c     B0 00 A0 FD | 	call	#pushregs_
05360     2E 6B 02 F6 | 	mov	local01, arg01
05364                 | ' 
05364                 | '   CASE_FAST cmd
05364     BA 0F 06 F1 | 	add	objptr, #442
05368     07 6D C2 FA | 	rdbyte	local02, objptr
0536c     BA 0F 86 F1 | 	sub	objptr, #442
05370     36 6F 02 F6 | 	mov	local03, local02
05374     0F 6E 26 F3 | 	fle	local03, #15
05378     37 71 02 F6 | 	mov	local04, local03
0537c     30 70 62 FD | 	jmprel	local04
05380                 | LR__0211
05380     3C 00 90 FD | 	jmp	#LR__0212
05384     68 03 90 FD | 	jmp	#LR__0226
05388     64 03 90 FD | 	jmp	#LR__0226
0538c     60 03 90 FD | 	jmp	#LR__0226
05390     E8 01 90 FD | 	jmp	#LR__0215
05394     58 03 90 FD | 	jmp	#LR__0226
05398     4C 02 90 FD | 	jmp	#LR__0218
0539c     50 03 90 FD | 	jmp	#LR__0226
053a0     4C 03 90 FD | 	jmp	#LR__0226
053a4     48 03 90 FD | 	jmp	#LR__0226
053a8     44 03 90 FD | 	jmp	#LR__0226
053ac     40 03 90 FD | 	jmp	#LR__0226
053b0     3C 03 90 FD | 	jmp	#LR__0226
053b4     38 03 90 FD | 	jmp	#LR__0226
053b8     38 02 90 FD | 	jmp	#LR__0219
053bc     30 03 90 FD | 	jmp	#LR__0226
053c0                 | LR__0212
053c0                 | ' 
053c0                 | '     $0:                                 ' Arpeggio
053c0                 | '       arpCounter := tickCounter // 3
053c0     A1 0E 06 F1 | 	add	objptr, #161
053c4     07 0B C3 FA | 	rdbyte	muldiva_, objptr
053c8     A1 0E 86 F1 | 	sub	objptr, #161
053cc     03 0C 07 F6 | 	mov	muldivb_, #3
053d0     D0 00 A0 FD | 	call	#divide_
053d4     85 73 02 F6 | 	mov	local05, muldiva_
053d8                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
053d8     35 75 02 F6 | 	mov	local06, local01
053dc     02 74 66 F0 | 	shl	local06, #2
053e0     DF 0E 06 F1 | 	add	objptr, #223
053e4     07 75 02 F1 | 	add	local06, objptr
053e8     3A 5D 02 FB | 	rdlong	arg01, local06
053ec     35 77 02 F6 | 	mov	local07, local01
053f0     0C 0E 86 F1 | 	sub	objptr, #12
053f4     07 77 02 F1 | 	add	local07, objptr
053f8     3B 5F C2 FA | 	rdbyte	arg02, local07
053fc     D3 0E 86 F1 | 	sub	objptr, #211
05400     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05404     15 79 02 F6 | 	mov	local08, result1
05408     3C 7B 02 F6 | 	mov	local09, local08
0540c     24 78 5E F2 | 	cmps	local08, #36 wcz
05410     DC 02 90 3D |  if_ae	jmp	#LR__0226
05414                 | '         if arpCounter == 1 and x > 0
05414     01 72 0E F2 | 	cmp	local05, #1 wz
05418     8C 00 90 5D |  if_ne	jmp	#LR__0213
0541c     B7 0F 06 F1 | 	add	objptr, #439
05420     07 75 C2 FA | 	rdbyte	local06, objptr
05424     B7 0F 86 F1 | 	sub	objptr, #439
05428     00 74 5E F2 | 	cmps	local06, #0 wcz
0542c     78 00 90 ED |  if_be	jmp	#LR__0213
05430                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05430     3D 7D 02 F6 | 	mov	local10, local09
05434     B7 0F 06 F1 | 	add	objptr, #439
05438     07 77 C2 FA | 	rdbyte	local07, objptr
0543c     3B 7F 02 F6 | 	mov	local11, local07
05440     3B 7D 02 F1 | 	add	local10, local07
05444     3E 81 02 F6 | 	mov	local12, local10
05448     40 5D 02 F6 | 	mov	arg01, local12
0544c     06 00 00 FF 
05450     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05454     01 5C 66 F0 | 	shl	arg01, #1
05458     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0545c                 | ' 
0545c                 | '   return word[@periodTable][noteNumber]
0545c     2E 2B E2 FA | 	rdword	result1, arg01
05460     06 00 00 FF 
05464     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05468     15 83 02 F6 | 	mov	local13, result1
0546c     35 85 02 F6 | 	mov	local14, local01
05470     02 84 66 F0 | 	shl	local14, #2
05474     D8 0E 86 F1 | 	sub	objptr, #216
05478     07 87 02 F6 | 	mov	local15, objptr
0547c     07 85 02 F1 | 	add	local14, objptr
05480     41 75 02 F6 | 	mov	local06, local13
05484     42 89 02 FB | 	rdlong	local16, local14
05488     44 75 82 F1 | 	sub	local06, local16
0548c     35 8B 02 F6 | 	mov	local17, local01
05490     02 8A 66 F0 | 	shl	local17, #2
05494     10 0E 06 F1 | 	add	objptr, #16
05498     07 8D 02 F6 | 	mov	local18, objptr
0549c     07 8B 02 F1 | 	add	local17, objptr
054a0     45 75 62 FC | 	wrlong	local06, local17
054a4     EF 0E 86 F1 | 	sub	objptr, #239
054a8                 | LR__0213
054a8                 | '         if arpCounter == 2 and y > 0
054a8     02 72 0E F2 | 	cmp	local05, #2 wz
054ac     8C 00 90 5D |  if_ne	jmp	#LR__0214
054b0     B8 0F 06 F1 | 	add	objptr, #440
054b4     07 75 C2 FA | 	rdbyte	local06, objptr
054b8     B8 0F 86 F1 | 	sub	objptr, #440
054bc     00 74 5E F2 | 	cmps	local06, #0 wcz
054c0     78 00 90 ED |  if_be	jmp	#LR__0214
054c4                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
054c4     3D 7D 02 F6 | 	mov	local10, local09
054c8     B8 0F 06 F1 | 	add	objptr, #440
054cc     07 77 C2 FA | 	rdbyte	local07, objptr
054d0     3B 7F 02 F6 | 	mov	local11, local07
054d4     3B 7D 02 F1 | 	add	local10, local07
054d8     3E 81 02 F6 | 	mov	local12, local10
054dc     40 5D 02 F6 | 	mov	arg01, local12
054e0     06 00 00 FF 
054e4     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054e8     01 5C 66 F0 | 	shl	arg01, #1
054ec     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054f0                 | ' 
054f0                 | '   return word[@periodTable][noteNumber]
054f0     2E 2B E2 FA | 	rdword	result1, arg01
054f4     06 00 00 FF 
054f8     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054fc     15 83 02 F6 | 	mov	local13, result1
05500     35 85 02 F6 | 	mov	local14, local01
05504     02 84 66 F0 | 	shl	local14, #2
05508     D9 0E 86 F1 | 	sub	objptr, #217
0550c     07 87 02 F6 | 	mov	local15, objptr
05510     07 85 02 F1 | 	add	local14, objptr
05514     41 75 02 F6 | 	mov	local06, local13
05518     42 89 02 FB | 	rdlong	local16, local14
0551c     44 75 82 F1 | 	sub	local06, local16
05520     35 8B 02 F6 | 	mov	local17, local01
05524     02 8A 66 F0 | 	shl	local17, #2
05528     10 0E 06 F1 | 	add	objptr, #16
0552c     07 8D 02 F6 | 	mov	local18, objptr
05530     07 8B 02 F1 | 	add	local17, objptr
05534     45 75 62 FC | 	wrlong	local06, local17
05538     EF 0E 86 F1 | 	sub	objptr, #239
0553c                 | LR__0214
0553c                 | '         if arpCounter == 0 and (x + y) > 0
0553c     00 72 0E F2 | 	cmp	local05, #0 wz
05540     AC 01 90 5D |  if_ne	jmp	#LR__0226
05544     B7 0F 06 F1 | 	add	objptr, #439
05548     07 75 C2 FA | 	rdbyte	local06, objptr
0554c     01 0E 06 F1 | 	add	objptr, #1
05550     07 77 C2 FA | 	rdbyte	local07, objptr
05554     B8 0F 86 F1 | 	sub	objptr, #440
05558     3B 75 02 F1 | 	add	local06, local07
0555c     00 74 5E F2 | 	cmps	local06, #0 wcz
05560     8C 01 90 ED |  if_be	jmp	#LR__0226
05564                 | '           deltaPeriod[channel] := 0
05564     02 6A 66 F0 | 	shl	local01, #2
05568     EF 0E 06 F1 | 	add	objptr, #239
0556c     07 6B 02 F1 | 	add	local01, objptr
05570     35 01 68 FC | 	wrlong	#0, local01
05574     EF 0E 86 F1 | 	sub	objptr, #239
05578     74 01 90 FD | 	jmp	#LR__0226
0557c                 | LR__0215
0557c                 | ' 
0557c                 | '     $4:                                 ' Vibrato
0557c                 | '       if x > 0
0557c     B7 0F 06 F1 | 	add	objptr, #439
05580     07 75 C2 FA | 	rdbyte	local06, objptr
05584     B7 0F 86 F1 | 	sub	objptr, #439
05588     00 74 5E F2 | 	cmps	local06, #0 wcz
0558c     1C 00 90 ED |  if_be	jmp	#LR__0216
05590                 | '         cmd4_memoryX[channel] := x
05590     35 75 02 F6 | 	mov	local06, local01
05594     D0 0F 06 F1 | 	add	objptr, #464
05598     07 75 02 F1 | 	add	local06, objptr
0559c     19 0E 86 F1 | 	sub	objptr, #25
055a0     07 7F C2 FA | 	rdbyte	local11, objptr
055a4     B7 0F 86 F1 | 	sub	objptr, #439
055a8     3A 7F 42 FC | 	wrbyte	local11, local06
055ac                 | LR__0216
055ac                 | '       if y > 0
055ac     B8 0F 06 F1 | 	add	objptr, #440
055b0     07 75 C2 FA | 	rdbyte	local06, objptr
055b4     B8 0F 86 F1 | 	sub	objptr, #440
055b8     00 74 5E F2 | 	cmps	local06, #0 wcz
055bc     1C 00 90 ED |  if_be	jmp	#LR__0217
055c0                 | '         cmd4_memoryY[channel] := y
055c0     35 75 02 F6 | 	mov	local06, local01
055c4     CC 0F 06 F1 | 	add	objptr, #460
055c8     07 75 02 F1 | 	add	local06, objptr
055cc     14 0E 86 F1 | 	sub	objptr, #20
055d0     07 7F C2 FA | 	rdbyte	local11, objptr
055d4     B8 0F 86 F1 | 	sub	objptr, #440
055d8     3A 7F 42 FC | 	wrbyte	local11, local06
055dc                 | LR__0217
055dc                 | ' 
055dc                 | '       doVibrato(channel)
055dc     35 5D 02 F6 | 	mov	arg01, local01
055e0     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055e4     08 01 90 FD | 	jmp	#LR__0226
055e8                 | LR__0218
055e8                 | ' 
055e8                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
055e8     35 5D 02 F6 | 	mov	arg01, local01
055ec     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055f0     FC 00 90 FD | 	jmp	#LR__0226
055f4                 | LR__0219
055f4                 | ' 
055f4                 | '     $E:
055f4                 | '       if x == $C                        ' Cut note after Y ticks
055f4     B7 0F 06 F1 | 	add	objptr, #439
055f8     07 75 C2 FA | 	rdbyte	local06, objptr
055fc     B7 0F 86 F1 | 	sub	objptr, #439
05600     0C 74 0E F2 | 	cmp	local06, #12 wz
05604     34 00 90 5D |  if_ne	jmp	#LR__0220
05608                 | '         if tickcounter == y
05608     A1 0E 06 F1 | 	add	objptr, #161
0560c     07 75 C2 FA | 	rdbyte	local06, objptr
05610     17 0F 06 F1 | 	add	objptr, #279
05614     07 7F C2 FA | 	rdbyte	local11, objptr
05618     B8 0F 86 F1 | 	sub	objptr, #440
0561c     3F 75 0A F2 | 	cmp	local06, local11 wz
05620     CC 00 90 5D |  if_ne	jmp	#LR__0225
05624                 | '           currVolume[channel] := 0
05624     02 6A 66 F0 | 	shl	local01, #2
05628     FF 0E 06 F1 | 	add	objptr, #255
0562c     07 6B 02 F1 | 	add	local01, objptr
05630     35 01 68 FC | 	wrlong	#0, local01
05634     FF 0E 86 F1 | 	sub	objptr, #255
05638     B4 00 90 FD | 	jmp	#LR__0225
0563c                 | LR__0220
0563c                 | ' 
0563c                 | '       elseif x == $D                    ' Delay note Y ticks
0563c     B7 0F 06 F1 | 	add	objptr, #439
05640     07 75 C2 FA | 	rdbyte	local06, objptr
05644     B7 0F 86 F1 | 	sub	objptr, #439
05648     0D 74 0E F2 | 	cmp	local06, #13 wz
0564c     A0 00 90 5D |  if_ne	jmp	#LR__0224
05650                 | '         if tickcounter == y
05650     A1 0E 06 F1 | 	add	objptr, #161
05654     07 75 C2 FA | 	rdbyte	local06, objptr
05658     17 0F 06 F1 | 	add	objptr, #279
0565c     07 7F C2 FA | 	rdbyte	local11, objptr
05660     B8 0F 86 F1 | 	sub	objptr, #440
05664     3F 75 0A F2 | 	cmp	local06, local11 wz
05668     0C 00 90 5D |  if_ne	jmp	#LR__0221
0566c                 | '           triggerNote(channel)
0566c     35 5D 02 F6 | 	mov	arg01, local01
05670     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05674     78 00 90 FD | 	jmp	#LR__0223
05678                 | LR__0221
05678                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05678                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05678     B8 0F 06 F1 | 	add	objptr, #440
0567c     07 75 C2 FA | 	rdbyte	local06, objptr
05680     14 0F 86 F1 | 	sub	objptr, #276
05684     07 7F C2 FA | 	rdbyte	local11, objptr
05688     A4 0E 86 F1 | 	sub	objptr, #164
0568c     3F 75 5A F2 | 	cmps	local06, local11 wcz
05690     5C 00 90 CD |  if_b	jmp	#LR__0222
05694     A4 0E 06 F1 | 	add	objptr, #164
05698     07 83 C2 FA | 	rdbyte	local13, objptr
0569c     41 81 02 F6 | 	mov	local12, local13
056a0     01 80 86 F1 | 	sub	local12, #1
056a4     03 0E 86 F1 | 	sub	objptr, #3
056a8     07 87 C2 FA | 	rdbyte	local15, objptr
056ac     A1 0E 86 F1 | 	sub	objptr, #161
056b0     43 85 02 F6 | 	mov	local14, local15
056b4     40 85 0A F2 | 	cmp	local14, local12 wz
056b8     34 00 90 5D |  if_ne	jmp	#LR__0222
056bc                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
056bc     35 75 02 F6 | 	mov	local06, local01
056c0     02 74 66 F0 | 	shl	local06, #2
056c4     27 0F 06 F1 | 	add	objptr, #295
056c8     07 7D 02 F6 | 	mov	local10, objptr
056cc     07 75 02 F1 | 	add	local06, objptr
056d0     35 7F 02 F6 | 	mov	local11, local01
056d4     02 7E 66 F0 | 	shl	local11, #2
056d8     48 0E 86 F1 | 	sub	objptr, #72
056dc     07 77 02 F6 | 	mov	local07, objptr
056e0     3A 81 02 FB | 	rdlong	local12, local06
056e4     3B 7F 02 F1 | 	add	local11, local07
056e8     3F 81 62 FC | 	wrlong	local12, local11
056ec     DF 0E 86 F1 | 	sub	objptr, #223
056f0                 | LR__0222
056f0                 | LR__0223
056f0                 | LR__0224
056f0                 | LR__0225
056f0                 | LR__0226
056f0     AF F0 03 F6 | 	mov	ptra, fp
056f4     BF 00 A0 FD | 	call	#popregs_
056f8                 | _trackerplayer_spin2_handleEveryTickCommands_ret
056f8     2D 00 64 FD | 	ret
056fc                 | 
056fc                 | ' 
056fc                 | ' 
056fc                 | ' PRI doTremolo(channel) | depth, sineWave, speed
056fc                 | _trackerplayer_spin2_doTremolo
056fc     2E 31 02 F6 | 	mov	_var01, arg01
05700     18 33 02 F6 | 	mov	_var02, _var01
05704     8B 0F 06 F1 | 	add	objptr, #395
05708     07 33 02 F1 | 	add	_var02, objptr
0570c     05 00 00 FF 
05710     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05714     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05718     19 37 C2 FA | 	rdbyte	_var04, _var02
0571c     02 36 66 F0 | 	shl	_var04, #2
05720     1A 37 02 F1 | 	add	_var04, _var03
05724                 | ' 
05724                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05724     1B 39 02 FB | 	rdlong	_var05, _var04
05728     18 3B 02 F6 | 	mov	_var06, _var01
0572c     49 0E 06 F1 | 	add	objptr, #73
05730     07 3B 02 F1 | 	add	_var06, objptr
05734                 | '   depth    := cmd7_memoryY[channel]
05734     1D 3D C2 FA | 	rdbyte	_var07, _var06
05738     18 3F 02 F6 | 	mov	_var08, _var01
0573c     04 0E 06 F1 | 	add	objptr, #4
05740     07 3F 02 F1 | 	add	_var08, objptr
05744                 | '   speed    := cmd7_memoryX[channel]
05744     1F 41 C2 FA | 	rdbyte	_var09, _var08
05748                 | ' 
05748                 | '   CASE_FAST vibratoType[channel]
05748     18 43 02 F6 | 	mov	_var10, _var01
0574c     18 0E 86 F1 | 	sub	objptr, #24
05750     07 45 02 F6 | 	mov	_var11, objptr
05754     07 43 02 F1 | 	add	_var10, objptr
05758     21 47 C2 FA | 	rdbyte	_var12, _var10
0575c     03 46 26 F3 | 	fle	_var12, #3
05760     23 49 02 F6 | 	mov	_var13, _var12
05764     05 00 00 FF 
05768     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0576c     C0 0F 86 F1 | 	sub	objptr, #448
05770     30 48 62 FD | 	jmprel	_var13
05774                 | LR__0227
05774     0C 00 90 FD | 	jmp	#LR__0228
05778     30 00 90 FD | 	jmp	#LR__0229
0577c     6C 00 90 FD | 	jmp	#LR__0230
05780     B4 00 90 FD | 	jmp	#LR__0231
05784                 | LR__0228
05784                 | ' 
05784                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05784     1C 3D 02 FD | 	qmul	_var07, _var05
05788     18 4A 62 FD | 	getqx	_var14
0578c     06 4A C6 F0 | 	sar	_var14, #6
05790     18 4D 02 F6 | 	mov	_var15, _var01
05794     02 4C 66 F0 | 	shl	_var15, #2
05798     0F 0F 06 F1 | 	add	objptr, #271
0579c     07 4D 02 F1 | 	add	_var15, objptr
057a0     26 4B 62 FC | 	wrlong	_var14, _var15
057a4     0F 0F 86 F1 | 	sub	objptr, #271
057a8     8C 00 90 FD | 	jmp	#LR__0231
057ac                 | LR__0229
057ac                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
057ac     18 4D 02 F6 | 	mov	_var15, _var01
057b0     8B 0F 06 F1 | 	add	objptr, #395
057b4     07 4D 02 F1 | 	add	_var15, objptr
057b8     26 4F C2 FA | 	rdbyte	_var16, _var15
057bc     03 4E 66 F0 | 	shl	_var16, #3
057c0     27 3D 02 FD | 	qmul	_var07, _var16
057c4     18 4A 62 FD | 	getqx	_var14
057c8     00 4B 86 F1 | 	sub	_var14, #256
057cc     06 4A C6 F0 | 	sar	_var14, #6
057d0     18 51 02 F6 | 	mov	_var17, _var01
057d4     02 50 66 F0 | 	shl	_var17, #2
057d8     7C 0E 86 F1 | 	sub	objptr, #124
057dc     07 51 02 F1 | 	add	_var17, objptr
057e0     28 4B 62 FC | 	wrlong	_var14, _var17
057e4     0F 0F 86 F1 | 	sub	objptr, #271
057e8     4C 00 90 FD | 	jmp	#LR__0231
057ec                 | LR__0230
057ec                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
057ec     18 4D 02 F6 | 	mov	_var15, _var01
057f0     8B 0F 06 F1 | 	add	objptr, #395
057f4     07 53 02 F6 | 	mov	_var18, objptr
057f8     07 4D 02 F1 | 	add	_var15, objptr
057fc     26 4F C2 FA | 	rdbyte	_var16, _var15
05800     20 4E 06 F5 | 	and	_var16, #32
05804     04 4E 66 F0 | 	shl	_var16, #4
05808     27 3D 02 FD | 	qmul	_var07, _var16
0580c     18 54 62 FD | 	getqx	_var19
05810     2A 4B 02 F6 | 	mov	_var14, _var19
05814     00 4B 86 F1 | 	sub	_var14, #256
05818     06 4A C6 F0 | 	sar	_var14, #6
0581c     18 51 02 F6 | 	mov	_var17, _var01
05820     02 50 66 F0 | 	shl	_var17, #2
05824     7C 0E 86 F1 | 	sub	objptr, #124
05828     07 57 02 F6 | 	mov	_var20, objptr
0582c     07 51 02 F1 | 	add	_var17, objptr
05830     28 4B 62 FC | 	wrlong	_var14, _var17
05834     0F 0F 86 F1 | 	sub	objptr, #271
05838                 | LR__0231
05838     8B 0F 06 F1 | 	add	objptr, #395
0583c     07 31 02 F1 | 	add	_var01, objptr
05840     18 59 C2 FA | 	rdbyte	_var21, _var01
05844     20 59 02 F1 | 	add	_var21, _var09
05848     3F 58 06 F5 | 	and	_var21, #63
0584c                 | ' 
0584c                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
0584c     18 59 42 FC | 	wrbyte	_var21, _var01
05850     8B 0F 86 F1 | 	sub	objptr, #395
05854                 | _trackerplayer_spin2_doTremolo_ret
05854     2D 00 64 FD | 	ret
05858                 | 
05858                 | ' 
05858                 | ' 
05858                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05858                 | _trackerplayer_spin2_doVibrato
05858     2E 31 02 F6 | 	mov	_var01, arg01
0585c     18 33 02 F6 | 	mov	_var02, _var01
05860     87 0F 06 F1 | 	add	objptr, #391
05864     07 33 02 F1 | 	add	_var02, objptr
05868     05 00 00 FF 
0586c     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05870     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05874     19 37 C2 FA | 	rdbyte	_var04, _var02
05878     02 36 66 F0 | 	shl	_var04, #2
0587c     1A 37 02 F1 | 	add	_var04, _var03
05880                 | ' 
05880                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05880     1B 39 02 FB | 	rdlong	_var05, _var04
05884     18 3B 02 F6 | 	mov	_var06, _var01
05888     45 0E 06 F1 | 	add	objptr, #69
0588c     07 3B 02 F1 | 	add	_var06, objptr
05890                 | '   depth    := cmd4_memoryY[channel]
05890     1D 3D C2 FA | 	rdbyte	_var07, _var06
05894     18 3F 02 F6 | 	mov	_var08, _var01
05898     04 0E 06 F1 | 	add	objptr, #4
0589c     07 3F 02 F1 | 	add	_var08, objptr
058a0                 | '   speed    := cmd4_memoryX[channel]
058a0     1F 41 C2 FA | 	rdbyte	_var09, _var08
058a4                 | ' 
058a4                 | '   CASE_FAST vibratoType[channel]
058a4     18 43 02 F6 | 	mov	_var10, _var01
058a8     10 0E 86 F1 | 	sub	objptr, #16
058ac     07 45 02 F6 | 	mov	_var11, objptr
058b0     07 43 02 F1 | 	add	_var10, objptr
058b4     21 47 C2 FA | 	rdbyte	_var12, _var10
058b8     03 46 26 F3 | 	fle	_var12, #3
058bc     23 49 02 F6 | 	mov	_var13, _var12
058c0     05 00 00 FF 
058c4     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
058c8     C0 0F 86 F1 | 	sub	objptr, #448
058cc     30 48 62 FD | 	jmprel	_var13
058d0                 | LR__0232
058d0     0C 00 90 FD | 	jmp	#LR__0233
058d4     30 00 90 FD | 	jmp	#LR__0234
058d8     6C 00 90 FD | 	jmp	#LR__0235
058dc     B4 00 90 FD | 	jmp	#LR__0236
058e0                 | LR__0233
058e0                 | ' 
058e0                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
058e0     1C 3D 02 FD | 	qmul	_var07, _var05
058e4     18 4A 62 FD | 	getqx	_var14
058e8     07 4A C6 F0 | 	sar	_var14, #7
058ec     18 4D 02 F6 | 	mov	_var15, _var01
058f0     02 4C 66 F0 | 	shl	_var15, #2
058f4     EF 0E 06 F1 | 	add	objptr, #239
058f8     07 4D 02 F1 | 	add	_var15, objptr
058fc     26 4B 62 FC | 	wrlong	_var14, _var15
05900     EF 0E 86 F1 | 	sub	objptr, #239
05904     8C 00 90 FD | 	jmp	#LR__0236
05908                 | LR__0234
05908                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05908     18 4D 02 F6 | 	mov	_var15, _var01
0590c     87 0F 06 F1 | 	add	objptr, #391
05910     07 4D 02 F1 | 	add	_var15, objptr
05914     26 4F C2 FA | 	rdbyte	_var16, _var15
05918     03 4E 66 F0 | 	shl	_var16, #3
0591c     27 3D 02 FD | 	qmul	_var07, _var16
05920     18 4A 62 FD | 	getqx	_var14
05924     00 4B 86 F1 | 	sub	_var14, #256
05928     07 4A C6 F0 | 	sar	_var14, #7
0592c     18 51 02 F6 | 	mov	_var17, _var01
05930     02 50 66 F0 | 	shl	_var17, #2
05934     98 0E 86 F1 | 	sub	objptr, #152
05938     07 51 02 F1 | 	add	_var17, objptr
0593c     28 4B 62 FC | 	wrlong	_var14, _var17
05940     EF 0E 86 F1 | 	sub	objptr, #239
05944     4C 00 90 FD | 	jmp	#LR__0236
05948                 | LR__0235
05948                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05948     18 4D 02 F6 | 	mov	_var15, _var01
0594c     87 0F 06 F1 | 	add	objptr, #391
05950     07 53 02 F6 | 	mov	_var18, objptr
05954     07 4D 02 F1 | 	add	_var15, objptr
05958     26 4F C2 FA | 	rdbyte	_var16, _var15
0595c     20 4E 06 F5 | 	and	_var16, #32
05960     04 4E 66 F0 | 	shl	_var16, #4
05964     27 3D 02 FD | 	qmul	_var07, _var16
05968     18 54 62 FD | 	getqx	_var19
0596c     2A 4B 02 F6 | 	mov	_var14, _var19
05970     00 4B 86 F1 | 	sub	_var14, #256
05974     07 4A C6 F0 | 	sar	_var14, #7
05978     18 51 02 F6 | 	mov	_var17, _var01
0597c     02 50 66 F0 | 	shl	_var17, #2
05980     98 0E 86 F1 | 	sub	objptr, #152
05984     07 57 02 F6 | 	mov	_var20, objptr
05988     07 51 02 F1 | 	add	_var17, objptr
0598c     28 4B 62 FC | 	wrlong	_var14, _var17
05990     EF 0E 86 F1 | 	sub	objptr, #239
05994                 | LR__0236
05994     87 0F 06 F1 | 	add	objptr, #391
05998     07 31 02 F1 | 	add	_var01, objptr
0599c     18 59 C2 FA | 	rdbyte	_var21, _var01
059a0     20 59 02 F1 | 	add	_var21, _var09
059a4     3F 58 06 F5 | 	and	_var21, #63
059a8                 | ' 
059a8                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
059a8     18 59 42 FC | 	wrbyte	_var21, _var01
059ac     87 0F 86 F1 | 	sub	objptr, #391
059b0                 | _trackerplayer_spin2_doVibrato_ret
059b0     2D 00 64 FD | 	ret
059b4                 | 
059b4                 | ' 
059b4                 | ' 
059b4                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
059b4                 | _trackerplayer_spin2_doPortamento
059b4                 | ' 
059b4                 | '   if period == currPeriod[channel]
059b4     2E 31 02 F6 | 	mov	_var01, arg01
059b8     02 30 66 F0 | 	shl	_var01, #2
059bc     DF 0E 06 F1 | 	add	objptr, #223
059c0     07 33 02 F6 | 	mov	_var02, objptr
059c4     07 31 02 F1 | 	add	_var01, objptr
059c8     18 35 02 FB | 	rdlong	_var03, _var01
059cc     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
059d0                 | '     return
059d0     DF 0E 86 F1 | 	sub	objptr, #223
059d4     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
059d8                 | ' 
059d8                 | '   if period > 0
059d8     00 5E 5E F2 | 	cmps	arg02, #0 wcz
059dc     1C 00 90 ED |  if_be	jmp	#LR__0237
059e0     2E 37 02 F6 | 	mov	_var04, arg01
059e4     02 36 66 F0 | 	shl	_var04, #2
059e8     97 0F 06 F1 | 	add	objptr, #407
059ec     07 37 02 F1 | 	add	_var04, objptr
059f0                 | '     portamentoPeriodMemory[channel] := period
059f0     1B 5F 62 FC | 	wrlong	arg02, _var04
059f4                 | '   else
059f4     97 0F 86 F1 | 	sub	objptr, #407
059f8     18 00 90 FD | 	jmp	#LR__0238
059fc                 | LR__0237
059fc     2E 39 02 F6 | 	mov	_var05, arg01
05a00     02 38 66 F0 | 	shl	_var05, #2
05a04     97 0F 06 F1 | 	add	objptr, #407
05a08     07 39 02 F1 | 	add	_var05, objptr
05a0c                 | '     period := portamentoPeriodMemory[channel]
05a0c     1C 5F 02 FB | 	rdlong	arg02, _var05
05a10     97 0F 86 F1 | 	sub	objptr, #407
05a14                 | LR__0238
05a14                 | ' 
05a14                 | '   if period > currPeriod[channel]
05a14     2E 31 02 F6 | 	mov	_var01, arg01
05a18     02 30 66 F0 | 	shl	_var01, #2
05a1c     DF 0E 06 F1 | 	add	objptr, #223
05a20     07 31 02 F1 | 	add	_var01, objptr
05a24     18 35 02 FB | 	rdlong	_var03, _var01
05a28     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a2c     DF 0E 86 F1 | 	sub	objptr, #223
05a30     50 00 90 ED |  if_be	jmp	#LR__0239
05a34     2E 3B 02 F6 | 	mov	_var06, arg01
05a38     02 3A 66 F0 | 	shl	_var06, #2
05a3c     DF 0E 06 F1 | 	add	objptr, #223
05a40     07 3B 02 F1 | 	add	_var06, objptr
05a44     2E 3D 02 F6 | 	mov	_var07, arg01
05a48     E9 0E 06 F1 | 	add	objptr, #233
05a4c     1D 3F 02 FB | 	rdlong	_var08, _var06
05a50     07 3D 02 F1 | 	add	_var07, objptr
05a54     1E 33 C2 FA | 	rdbyte	_var02, _var07
05a58     19 3F 02 F1 | 	add	_var08, _var02
05a5c                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05a5c     1D 3F 62 FC | 	wrlong	_var08, _var06
05a60     2E 41 02 F6 | 	mov	_var09, arg01
05a64     02 40 66 F0 | 	shl	_var09, #2
05a68     E9 0E 86 F1 | 	sub	objptr, #233
05a6c     07 41 02 F1 | 	add	_var09, objptr
05a70     20 43 02 FB | 	rdlong	_var10, _var09
05a74     2F 43 62 F3 | 	fles	_var10, arg02
05a78                 | '     currPeriod[channel] <#= period
05a78     20 43 62 FC | 	wrlong	_var10, _var09
05a7c     DF 0E 86 F1 | 	sub	objptr, #223
05a80     6C 00 90 FD | 	jmp	#LR__0241
05a84                 | LR__0239
05a84                 | ' 
05a84                 | '   elseif period < currPeriod[channel]
05a84     2E 31 02 F6 | 	mov	_var01, arg01
05a88     02 30 66 F0 | 	shl	_var01, #2
05a8c     DF 0E 06 F1 | 	add	objptr, #223
05a90     07 31 02 F1 | 	add	_var01, objptr
05a94     18 35 02 FB | 	rdlong	_var03, _var01
05a98     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a9c     DF 0E 86 F1 | 	sub	objptr, #223
05aa0     4C 00 90 3D |  if_ae	jmp	#LR__0240
05aa4     2E 45 02 F6 | 	mov	_var11, arg01
05aa8     02 44 66 F0 | 	shl	_var11, #2
05aac     DF 0E 06 F1 | 	add	objptr, #223
05ab0     07 45 02 F1 | 	add	_var11, objptr
05ab4     2E 47 02 F6 | 	mov	_var12, arg01
05ab8     E9 0E 06 F1 | 	add	objptr, #233
05abc     22 49 02 FB | 	rdlong	_var13, _var11
05ac0     07 47 02 F1 | 	add	_var12, objptr
05ac4     23 33 C2 FA | 	rdbyte	_var02, _var12
05ac8     19 49 82 F1 | 	sub	_var13, _var02
05acc                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05acc     22 49 62 FC | 	wrlong	_var13, _var11
05ad0     2E 4B 02 F6 | 	mov	_var14, arg01
05ad4     02 4A 66 F0 | 	shl	_var14, #2
05ad8     E9 0E 86 F1 | 	sub	objptr, #233
05adc     07 4B 02 F1 | 	add	_var14, objptr
05ae0     25 4D 02 FB | 	rdlong	_var15, _var14
05ae4     2F 4D 42 F3 | 	fges	_var15, arg02
05ae8                 | '     currPeriod[channel] #>= period
05ae8     25 4D 62 FC | 	wrlong	_var15, _var14
05aec     DF 0E 86 F1 | 	sub	objptr, #223
05af0                 | LR__0240
05af0                 | LR__0241
05af0                 | ' 
05af0                 | '   ' Handle glissando if activated
05af0                 | '   if portaGlissando[channel] > 0
05af0     2E 31 02 F6 | 	mov	_var01, arg01
05af4     BC 0F 06 F1 | 	add	objptr, #444
05af8     07 31 02 F1 | 	add	_var01, objptr
05afc     18 35 C2 FA | 	rdbyte	_var03, _var01
05b00     00 34 5E F2 | 	cmps	_var03, #0 wcz
05b04     BC 0F 86 F1 | 	sub	objptr, #444
05b08     A0 00 90 ED |  if_be	jmp	#LR__0244
05b0c     2E 4F 02 F6 | 	mov	_var16, arg01
05b10     02 4E 66 F0 | 	shl	_var16, #2
05b14     DF 0E 06 F1 | 	add	objptr, #223
05b18     07 4F 02 F1 | 	add	_var16, objptr
05b1c                 | ' 
05b1c                 | '     tempPeriod := currPeriod[channel]
05b1c     27 51 02 FB | 	rdlong	_var17, _var16
05b20                 | ' 
05b20                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05b20     00 52 06 F6 | 	mov	_var18, #0
05b24     DF 0E 86 F1 | 	sub	objptr, #223
05b28     38 A5 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
05b2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05b30                 | LR__0242
05b30     06 00 00 FF 
05b34     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05b38     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05b3c     2E 55 02 F6 | 	mov	_var19, arg01
05b40     D3 0E 06 F1 | 	add	objptr, #211
05b44     07 55 02 F1 | 	add	_var19, objptr
05b48     2A 33 C2 FA | 	rdbyte	_var02, _var19
05b4c     19 57 02 F6 | 	mov	_var20, _var02
05b50     03 56 66 F0 | 	shl	_var20, #3
05b54     19 57 02 F1 | 	add	_var20, _var02
05b58     03 56 66 F0 | 	shl	_var20, #3
05b5c     2B 35 02 F1 | 	add	_var03, _var20
05b60     29 59 02 F6 | 	mov	_var21, _var18
05b64     01 58 66 F0 | 	shl	_var21, #1
05b68     1A 59 02 F1 | 	add	_var21, _var03
05b6c                 | ' 
05b6c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05b6c     2C 5B E2 FA | 	rdword	_var22, _var21
05b70                 | '       if tempPeriod >= periodStep
05b70     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05b74                 | '         i += 1000
05b74     06 00 00 FF 
05b78     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05b7c     D3 0E 86 F1 | 	sub	objptr, #211
05b80     01 00 00 3F 
05b84     E8 53 06 31 |  if_ae	add	_var18, ##1000
05b88     01 52 06 F1 | 	add	_var18, #1
05b8c     24 52 5E F2 | 	cmps	_var18, #36 wcz
05b90     9C FF 9F CD |  if_b	jmp	#LR__0242
05b94                 | LR__0243
05b94     28 5B 82 F1 | 	sub	_var22, _var17
05b98     02 5C 66 F0 | 	shl	arg01, #2
05b9c     EF 0E 06 F1 | 	add	objptr, #239
05ba0     07 5D 02 F1 | 	add	arg01, objptr
05ba4                 | ' 
05ba4                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05ba4     2E 5B 62 FC | 	wrlong	_var22, arg01
05ba8     EF 0E 86 F1 | 	sub	objptr, #239
05bac                 | LR__0244
05bac                 | _trackerplayer_spin2_doPortamento_ret
05bac     2D 00 64 FD | 	ret
05bb0                 | 
05bb0                 | ' 
05bb0                 | ' 
05bb0                 | ' PRI doVolumeSlide(channel)
05bb0                 | _trackerplayer_spin2_doVolumeSlide
05bb0                 | ' 
05bb0                 | '   if x > 0
05bb0     B7 0F 06 F1 | 	add	objptr, #439
05bb4     07 31 C2 FA | 	rdbyte	_var01, objptr
05bb8     B7 0F 86 F1 | 	sub	objptr, #439
05bbc     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bc0     28 00 90 ED |  if_be	jmp	#LR__0245
05bc4     2E 33 02 F6 | 	mov	_var02, arg01
05bc8     02 32 66 F0 | 	shl	_var02, #2
05bcc     FF 0E 06 F1 | 	add	objptr, #255
05bd0     07 33 02 F1 | 	add	_var02, objptr
05bd4     19 35 02 FB | 	rdlong	_var03, _var02
05bd8     B8 0E 06 F1 | 	add	objptr, #184
05bdc     07 37 C2 FA | 	rdbyte	_var04, objptr
05be0     B7 0F 86 F1 | 	sub	objptr, #439
05be4     1B 35 02 F1 | 	add	_var03, _var04
05be8                 | '     currVolume[channel] += x
05be8     19 35 62 FC | 	wrlong	_var03, _var02
05bec                 | LR__0245
05bec                 | '   if y > 0
05bec     B8 0F 06 F1 | 	add	objptr, #440
05bf0     07 31 C2 FA | 	rdbyte	_var01, objptr
05bf4     B8 0F 86 F1 | 	sub	objptr, #440
05bf8     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bfc     24 00 90 ED |  if_be	jmp	#LR__0246
05c00     02 5C 66 F0 | 	shl	arg01, #2
05c04     FF 0E 06 F1 | 	add	objptr, #255
05c08     07 5D 02 F1 | 	add	arg01, objptr
05c0c     2E 39 02 FB | 	rdlong	_var05, arg01
05c10     B9 0E 06 F1 | 	add	objptr, #185
05c14     07 37 C2 FA | 	rdbyte	_var04, objptr
05c18     B8 0F 86 F1 | 	sub	objptr, #440
05c1c     1B 39 82 F1 | 	sub	_var05, _var04
05c20                 | '     currVolume[channel] -= y
05c20     2E 39 62 FC | 	wrlong	_var05, arg01
05c24                 | LR__0246
05c24                 | _trackerplayer_spin2_doVolumeSlide_ret
05c24     2D 00 64 FD | 	ret
05c28                 | hubexit
05c28     81 00 80 FD | 	jmp	#cogexit
05c2c                 | 
05c2c                 | __system___setbaud
05c2c     14 0A 07 FB | 	rdlong	muldiva_, #20
05c30     2E 0D 03 F6 | 	mov	muldivb_, arg01
05c34     D0 00 A0 FD | 	call	#divide_
05c38     40 7C 64 FD | 	dirl	#62
05c3c     40 7E 64 FD | 	dirl	#63
05c40     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05c44     10 0C 67 F0 | 	shl	muldivb_, #16
05c48     07 5E 06 F6 | 	mov	arg02, #7
05c4c     86 5F 02 F1 | 	add	arg02, muldivb_
05c50     3E F8 0C FC | 	wrpin	#124, #62
05c54     3E 5E 16 FC | 	wxpin	arg02, #62
05c58     3F 7C 0C FC | 	wrpin	#62, #63
05c5c     14 5E 06 F1 | 	add	arg02, #20
05c60     3F 5E 16 FC | 	wxpin	arg02, #63
05c64     41 7C 64 FD | 	dirh	#62
05c68     41 7E 64 FD | 	dirh	#63
05c6c                 | __system___setbaud_ret
05c6c     2D 00 64 FD | 	ret
05c70                 | 
05c70                 | __system___txraw
05c70     02 5A 05 F6 | 	mov	COUNT_, #2
05c74     B0 00 A0 FD | 	call	#pushregs_
05c78     2E 6B 02 F6 | 	mov	local01, arg01
05c7c     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c80     0C 00 90 5D |  if_ne	jmp	#LR__0247
05c84     42 0F 00 FF 
05c88     80 5C 06 F6 | 	mov	arg01, ##2000000
05c8c     9C FF BF FD | 	call	#__system___setbaud
05c90                 | LR__0247
05c90     3E 6A 26 FC | 	wypin	local01, #62
05c94     1F 02 64 FD | 	waitx	#1
05c98     6C A3 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
05c9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ca0                 | LR__0248
05ca0     40 7C 74 FD | 	testp	#62 wc
05ca4     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
05ca8                 | LR__0249
05ca8     01 2A 06 F6 | 	mov	result1, #1
05cac     AF F0 03 F6 | 	mov	ptra, fp
05cb0     BF 00 A0 FD | 	call	#popregs_
05cb4                 | __system___txraw_ret
05cb4     2D 00 64 FD | 	ret
05cb8                 | 
05cb8                 | __system___rxraw
05cb8     0D 5A 05 F6 | 	mov	COUNT_, #13
05cbc     B0 00 A0 FD | 	call	#pushregs_
05cc0     2E 6B 02 F6 | 	mov	local01, arg01
05cc4     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05cc8     0C 00 90 5D |  if_ne	jmp	#LR__0250
05ccc     42 0F 00 FF 
05cd0     80 5C 06 F6 | 	mov	arg01, ##2000000
05cd4     54 FF BF FD | 	call	#__system___setbaud
05cd8                 | LR__0250
05cd8     00 6A 0E F2 | 	cmp	local01, #0 wz
05cdc     18 00 90 AD |  if_e	jmp	#LR__0251
05ce0     14 6E 06 FB | 	rdlong	local03, #20
05ce4     0A 6E 46 F0 | 	shr	local03, #10
05ce8     37 6B 02 FD | 	qmul	local01, local03
05cec     18 70 62 FD | 	getqx	local04
05cf0     1A 72 62 FD | 	getct	local05
05cf4     38 73 02 F1 | 	add	local05, local04
05cf8                 | LR__0251
05cf8     01 74 66 F6 | 	neg	local06, #1
05cfc     00 76 06 F6 | 	mov	local07, #0
05d00     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d04     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05d08     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d0c                 | LR__0252
05d0c     08 78 16 F4 | 	testb	local08, #8 wc
05d10     09 78 76 F4 | 	testbn	local08, #9 andc
05d14     0A 78 46 F0 | 	shr	local08, #10
05d18     01 76 06 C6 |  if_b	mov	local07, #1
05d1c     10 00 90 CD |  if_b	jmp	#LR__0253
05d20     40 7E 6C FD | 	testp	#63 wz
05d24     01 76 06 A6 |  if_e	mov	local07, #1
05d28     3F 78 8E AA |  if_e	rdpin	local08, #63
05d2c     04 78 46 A0 |  if_e	shr	local08, #4
05d30                 | LR__0253
05d30     00 6C 06 F6 | 	mov	local02, #0
05d34     00 76 0E F2 | 	cmp	local07, #0 wz
05d38     01 6C 66 56 |  if_ne	neg	local02, #1
05d3c     00 7A 06 F6 | 	mov	local09, #0
05d40     00 7C 06 F6 | 	mov	local10, #0
05d44     00 6A 0E F2 | 	cmp	local01, #0 wz
05d48     01 7C 66 56 |  if_ne	neg	local10, #1
05d4c     00 7E 06 F6 | 	mov	local11, #0
05d50     00 80 06 F6 | 	mov	local12, #0
05d54     1A 82 62 FD | 	getct	local13
05d58     39 83 82 F1 | 	sub	local13, local05
05d5c     00 82 5E F2 | 	cmps	local13, #0 wcz
05d60     01 80 66 C6 |  if_b	neg	local12, #1
05d64     00 80 0E F2 | 	cmp	local12, #0 wz
05d68     01 7E 66 56 |  if_ne	neg	local11, #1
05d6c     3F 7D CA F7 | 	test	local10, local11 wz
05d70     01 7A 66 56 |  if_ne	neg	local09, #1
05d74     3D 6D 4A F5 | 	or	local02, local09 wz
05d78     90 FF 9F AD |  if_e	jmp	#LR__0252
05d7c     00 76 0E F2 | 	cmp	local07, #0 wz
05d80     3C 75 02 56 |  if_ne	mov	local06, local08
05d84     FF 74 06 55 |  if_ne	and	local06, #255
05d88     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d8c     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05d90     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d94     3A 2B 02 F6 | 	mov	result1, local06
05d98     AF F0 03 F6 | 	mov	ptra, fp
05d9c     BF 00 A0 FD | 	call	#popregs_
05da0                 | __system___rxraw_ret
05da0     2D 00 64 FD | 	ret
05da4                 | 
05da4                 | __system____builtin_memmove
05da4     2E 31 02 F6 | 	mov	_var01, arg01
05da8     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05dac     50 00 90 3D |  if_ae	jmp	#LR__0261
05db0     6C A2 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
05db4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05db8                 | LR__0254
05db8     03 60 5E F2 | 	cmps	arg03, #3 wcz
05dbc     18 00 90 ED |  if_be	jmp	#LR__0256
05dc0     2F 33 02 FB | 	rdlong	_var02, arg02
05dc4     2E 33 62 FC | 	wrlong	_var02, arg01
05dc8     04 5C 06 F1 | 	add	arg01, #4
05dcc     04 5E 06 F1 | 	add	arg02, #4
05dd0     04 60 86 F1 | 	sub	arg03, #4
05dd4     E0 FF 9F FD | 	jmp	#LR__0254
05dd8                 | LR__0255
05dd8                 | LR__0256
05dd8     30 35 0A F6 | 	mov	_var03, arg03 wz
05ddc     4C 00 90 AD |  if_e	jmp	#LR__0267
05de0     30 A2 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
05de4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05de8                 | LR__0257
05de8     1A 09 D8 FC | 	rep	@LR__0260, _var03
05dec                 | LR__0258
05dec     2F 33 C2 FA | 	rdbyte	_var02, arg02
05df0     2E 33 42 FC | 	wrbyte	_var02, arg01
05df4     01 5C 06 F1 | 	add	arg01, #1
05df8     01 5E 06 F1 | 	add	arg02, #1
05dfc                 | LR__0259
05dfc                 | LR__0260
05dfc     2C 00 90 FD | 	jmp	#LR__0267
05e00                 | LR__0261
05e00     30 5D 02 F1 | 	add	arg01, arg03
05e04     30 5F 02 F1 | 	add	arg02, arg03
05e08     30 37 0A F6 | 	mov	_var04, arg03 wz
05e0c     1C 00 90 AD |  if_e	jmp	#LR__0266
05e10     00 A2 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05e14     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e18                 | LR__0262
05e18     1B 09 D8 FC | 	rep	@LR__0265, _var04
05e1c                 | LR__0263
05e1c     01 5C 86 F1 | 	sub	arg01, #1
05e20     01 5E 86 F1 | 	sub	arg02, #1
05e24     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e28     2E 33 42 FC | 	wrbyte	_var02, arg01
05e2c                 | LR__0264
05e2c                 | LR__0265
05e2c                 | LR__0266
05e2c                 | LR__0267
05e2c     18 2B 02 F6 | 	mov	result1, _var01
05e30                 | __system____builtin_memmove_ret
05e30     2D 00 64 FD | 	ret
05e34                 | 
05e34                 | __system__longmove
05e34     2E 31 02 F6 | 	mov	_var01, arg01
05e38     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e3c     28 00 90 3D |  if_ae	jmp	#LR__0272
05e40     30 33 0A F6 | 	mov	_var02, arg03 wz
05e44     54 00 90 AD |  if_e	jmp	#LR__0278
05e48     C8 A1 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
05e4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e50                 | LR__0268
05e50     19 09 D8 FC | 	rep	@LR__0271, _var02
05e54                 | LR__0269
05e54     2F 35 02 FB | 	rdlong	_var03, arg02
05e58     2E 35 62 FC | 	wrlong	_var03, arg01
05e5c     04 5C 06 F1 | 	add	arg01, #4
05e60     04 5E 06 F1 | 	add	arg02, #4
05e64                 | LR__0270
05e64                 | LR__0271
05e64     34 00 90 FD | 	jmp	#LR__0278
05e68                 | LR__0272
05e68     30 37 02 F6 | 	mov	_var04, arg03
05e6c     02 36 66 F0 | 	shl	_var04, #2
05e70     1B 5D 02 F1 | 	add	arg01, _var04
05e74     1B 5F 02 F1 | 	add	arg02, _var04
05e78     30 39 0A F6 | 	mov	_var05, arg03 wz
05e7c     1C 00 90 AD |  if_e	jmp	#LR__0277
05e80     90 A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05e84     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e88                 | LR__0273
05e88     1C 09 D8 FC | 	rep	@LR__0276, _var05
05e8c                 | LR__0274
05e8c     04 5C 86 F1 | 	sub	arg01, #4
05e90     04 5E 86 F1 | 	sub	arg02, #4
05e94     2F 35 02 FB | 	rdlong	_var03, arg02
05e98     2E 35 62 FC | 	wrlong	_var03, arg01
05e9c                 | LR__0275
05e9c                 | LR__0276
05e9c                 | LR__0277
05e9c                 | LR__0278
05e9c     18 2B 02 F6 | 	mov	result1, _var01
05ea0                 | __system__longmove_ret
05ea0     2D 00 64 FD | 	ret
05ea4                 | 
05ea4                 | __system____topofstack
05ea4     00 5A 05 F6 | 	mov	COUNT_, #0
05ea8     B0 00 A0 FD | 	call	#pushregs_
05eac     0C F0 07 F1 | 	add	ptra, #12
05eb0     04 5E 05 F1 | 	add	fp, #4
05eb4     AF 5C 62 FC | 	wrlong	arg01, fp
05eb8     AF 2A 02 F6 | 	mov	result1, fp
05ebc     04 5E 85 F1 | 	sub	fp, #4
05ec0     AF F0 03 F6 | 	mov	ptra, fp
05ec4     BF 00 A0 FD | 	call	#popregs_
05ec8                 | __system____topofstack_ret
05ec8     2D 00 64 FD | 	ret
05ecc                 | 
05ecc                 | __system___make_methodptr
05ecc     04 5A 05 F6 | 	mov	COUNT_, #4
05ed0     B0 00 A0 FD | 	call	#pushregs_
05ed4     2E 6B 02 F6 | 	mov	local01, arg01
05ed8     2F 6D 02 F6 | 	mov	local02, arg02
05edc     08 5C 06 F6 | 	mov	arg01, #8
05ee0     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05ee4     15 6F 0A F6 | 	mov	local03, result1 wz
05ee8     10 00 90 AD |  if_e	jmp	#LR__0279
05eec     37 6B 62 FC | 	wrlong	local01, local03
05ef0     37 71 02 F6 | 	mov	local04, local03
05ef4     04 70 06 F1 | 	add	local04, #4
05ef8     38 6D 62 FC | 	wrlong	local02, local04
05efc                 | LR__0279
05efc     37 2B 02 F6 | 	mov	result1, local03
05f00     AF F0 03 F6 | 	mov	ptra, fp
05f04     BF 00 A0 FD | 	call	#popregs_
05f08                 | __system___make_methodptr_ret
05f08     2D 00 64 FD | 	ret
05f0c                 | 
05f0c                 | __system___lockmem
05f0c     02 5A 05 F6 | 	mov	COUNT_, #2
05f10     B0 00 A0 FD | 	call	#pushregs_
05f14     01 2A 62 FD | 	cogid	result1
05f18     15 6B 02 F6 | 	mov	local01, result1
05f1c     00 6B 06 F1 | 	add	local01, #256
05f20                 | LR__0280
05f20     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05f24     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05f28     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f2c     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f30     35 6D 0A F2 | 	cmp	local02, local01 wz
05f34     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
05f38     AF F0 03 F6 | 	mov	ptra, fp
05f3c     BF 00 A0 FD | 	call	#popregs_
05f40                 | __system___lockmem_ret
05f40     2D 00 64 FD | 	ret
05f44                 | 
05f44                 | __system___string_concat
05f44     07 5A 05 F6 | 	mov	COUNT_, #7
05f48     B0 00 A0 FD | 	call	#pushregs_
05f4c     2E 6B 02 F6 | 	mov	local01, arg01
05f50     2F 6D 02 F6 | 	mov	local02, arg02
05f54     35 5D 02 F6 | 	mov	arg01, local01
05f58     00 6E 06 F6 | 	mov	local03, #0
05f5c     B0 A0 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
05f60     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f64                 | LR__0281
05f64     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f68     01 6E 06 51 |  if_ne	add	local03, #1
05f6c     01 5C 06 51 |  if_ne	add	arg01, #1
05f70     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
05f74                 | LR__0282
05f74     37 73 02 F6 | 	mov	local05, local03
05f78     36 5D 02 F6 | 	mov	arg01, local02
05f7c     00 6E 06 F6 | 	mov	local03, #0
05f80     8C A0 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
05f84     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f88                 | LR__0283
05f88     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f8c     01 6E 06 51 |  if_ne	add	local03, #1
05f90     01 5C 06 51 |  if_ne	add	arg01, #1
05f94     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
05f98                 | LR__0284
05f98     37 2B 02 F6 | 	mov	result1, local03
05f9c     15 75 02 F6 | 	mov	local06, result1
05fa0     39 5D 02 F6 | 	mov	arg01, local05
05fa4     3A 5D 02 F1 | 	add	arg01, local06
05fa8     01 5C 06 F1 | 	add	arg01, #1
05fac     90 0B B0 FD | 	call	#__system___gc_alloc_managed
05fb0     15 77 0A F6 | 	mov	local07, result1 wz
05fb4     28 00 90 AD |  if_e	jmp	#LR__0285
05fb8     3B 5D 02 F6 | 	mov	arg01, local07
05fbc     35 5F 02 F6 | 	mov	arg02, local01
05fc0     39 61 02 F6 | 	mov	arg03, local05
05fc4     DC FD BF FD | 	call	#__system____builtin_memmove
05fc8     3B 5D 02 F6 | 	mov	arg01, local07
05fcc     39 5D 02 F1 | 	add	arg01, local05
05fd0     01 74 06 F1 | 	add	local06, #1
05fd4     36 5F 02 F6 | 	mov	arg02, local02
05fd8     3A 61 02 F6 | 	mov	arg03, local06
05fdc     C4 FD BF FD | 	call	#__system____builtin_memmove
05fe0                 | LR__0285
05fe0     3B 2B 02 F6 | 	mov	result1, local07
05fe4     AF F0 03 F6 | 	mov	ptra, fp
05fe8     BF 00 A0 FD | 	call	#popregs_
05fec                 | __system___string_concat_ret
05fec     2D 00 64 FD | 	ret
05ff0                 | 
05ff0                 | __system___tx
05ff0     02 5A 05 F6 | 	mov	COUNT_, #2
05ff4     B0 00 A0 FD | 	call	#pushregs_
05ff8     2E 6B 02 F6 | 	mov	local01, arg01
05ffc     0A 6A 0E F2 | 	cmp	local01, #10 wz
06000     20 00 90 5D |  if_ne	jmp	#LR__0286
06004     08 14 06 F1 | 	add	ptr___system__dat__, #8
06008     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0600c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06010     02 6C CE F7 | 	test	local02, #2 wz
06014     0C 00 90 AD |  if_e	jmp	#LR__0286
06018     0D 6C 06 F6 | 	mov	local02, #13
0601c     0D 5C 06 F6 | 	mov	arg01, #13
06020     4C FC BF FD | 	call	#__system___txraw
06024                 | LR__0286
06024     35 5D 02 F6 | 	mov	arg01, local01
06028     44 FC BF FD | 	call	#__system___txraw
0602c     AF F0 03 F6 | 	mov	ptra, fp
06030     BF 00 A0 FD | 	call	#popregs_
06034                 | __system___tx_ret
06034     2D 00 64 FD | 	ret
06038                 | 
06038                 | __system___rx
06038     02 5A 05 F6 | 	mov	COUNT_, #2
0603c     B0 00 A0 FD | 	call	#pushregs_
06040                 | LR__0287
06040     00 5C 06 F6 | 	mov	arg01, #0
06044     70 FC BF FD | 	call	#__system___rxraw
06048     15 6B 02 F6 | 	mov	local01, result1
0604c     FF FF 7F FF 
06050     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
06054     E8 FF 9F AD |  if_e	jmp	#LR__0287
06058     0D 6A 0E F2 | 	cmp	local01, #13 wz
0605c     14 00 90 5D |  if_ne	jmp	#LR__0288
06060     08 14 06 F1 | 	add	ptr___system__dat__, #8
06064     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06068     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0606c     02 6C CE F7 | 	test	local02, #2 wz
06070     0A 6A 06 56 |  if_ne	mov	local01, #10
06074                 | LR__0288
06074     08 14 06 F1 | 	add	ptr___system__dat__, #8
06078     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0607c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06080     01 6C CE F7 | 	test	local02, #1 wz
06084     1C 00 90 AD |  if_e	jmp	#LR__0291
06088     7F 6A 0E F2 | 	cmp	local01, #127 wz
0608c     0C 00 90 5D |  if_ne	jmp	#LR__0289
06090     08 5C 06 F6 | 	mov	arg01, #8
06094     58 FF BF FD | 	call	#__system___tx
06098     08 00 90 FD | 	jmp	#LR__0290
0609c                 | LR__0289
0609c     35 5D 02 F6 | 	mov	arg01, local01
060a0     4C FF BF FD | 	call	#__system___tx
060a4                 | LR__0290
060a4                 | LR__0291
060a4     35 2B 02 F6 | 	mov	result1, local01
060a8     AF F0 03 F6 | 	mov	ptra, fp
060ac     BF 00 A0 FD | 	call	#popregs_
060b0                 | __system___rx_ret
060b0     2D 00 64 FD | 	ret
060b4                 | 
060b4                 | __system___pinread
060b4     20 5C CE F7 | 	test	arg01, #32 wz
060b8     FF 31 02 56 |  if_ne	mov	_var01, inb
060bc     FE 31 02 A6 |  if_e	mov	_var01, ina
060c0     18 2B 02 F6 | 	mov	result1, _var01
060c4     2E 2B 42 F0 | 	shr	result1, arg01
060c8     06 5C 46 F0 | 	shr	arg01, #6
060cc     2E 2B 42 F7 | 	zerox	result1, arg01
060d0                 | __system___pinread_ret
060d0     2D 00 64 FD | 	ret
060d4                 | 
060d4                 | __system___waitms
060d4     03 5A 05 F6 | 	mov	COUNT_, #3
060d8     B0 00 A0 FD | 	call	#pushregs_
060dc     2E 6B 02 F6 | 	mov	local01, arg01
060e0     14 6C 06 FB | 	rdlong	local02, #20
060e4     30 9F 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
060e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
060ec                 | LR__0292
060ec     01 00 00 FF 
060f0     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
060f4     1F 6C 62 1D |  if_a	waitx	local02
060f8     01 00 00 1F 
060fc     E8 6B 86 11 |  if_a	sub	local01, ##1000
06100     E8 FF 9F 1D |  if_a	jmp	#LR__0292
06104                 | LR__0293
06104     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06108     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
0610c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06110     20 00 90 5D |  if_ne	jmp	#LR__0294
06114     36 0B 03 F6 | 	mov	muldiva_, local02
06118     01 00 00 FF 
0611c     E8 0D 07 F6 | 	mov	muldivb_, ##1000
06120     CC 00 A0 FD | 	call	#unsdivide_
06124     86 6F 02 F6 | 	mov	local03, muldivb_
06128     0C 14 06 F1 | 	add	ptr___system__dat__, #12
0612c     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06130     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06134                 | LR__0294
06134     00 6A 5E F2 | 	cmps	local01, #0 wcz
06138     37 6B 02 1D |  if_a	qmul	local01, local03
0613c     18 5C 62 1D |  if_a	getqx	arg01
06140     1F 5C 62 1D |  if_a	waitx	arg01
06144     AF F0 03 F6 | 	mov	ptra, fp
06148     BF 00 A0 FD | 	call	#popregs_
0614c                 | __system___waitms_ret
0614c     2D 00 64 FD | 	ret
06150                 | 
06150                 | __system___waitus
06150     02 5A 05 F6 | 	mov	COUNT_, #2
06154     B0 00 A0 FD | 	call	#pushregs_
06158     2E 6B 02 F6 | 	mov	local01, arg01
0615c     10 14 06 F1 | 	add	ptr___system__dat__, #16
06160     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06164     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06168     20 00 90 5D |  if_ne	jmp	#LR__0295
0616c     14 0A 07 FB | 	rdlong	muldiva_, #20
06170     A1 07 00 FF 
06174     40 0C 07 F6 | 	mov	muldivb_, ##1000000
06178     CC 00 A0 FD | 	call	#unsdivide_
0617c     86 6D 02 F6 | 	mov	local02, muldivb_
06180     10 14 06 F1 | 	add	ptr___system__dat__, #16
06184     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06188     10 14 86 F1 | 	sub	ptr___system__dat__, #16
0618c                 | LR__0295
0618c     36 6B 02 FD | 	qmul	local01, local02
06190     18 5C 62 FD | 	getqx	arg01
06194     1F 5C 62 FD | 	waitx	arg01
06198     AF F0 03 F6 | 	mov	ptra, fp
0619c     BF 00 A0 FD | 	call	#popregs_
061a0                 | __system___waitus_ret
061a0     2D 00 64 FD | 	ret
061a4                 | 
061a4                 | __system___basic_open
061a4     05 5A 05 F6 | 	mov	COUNT_, #5
061a8     B0 00 A0 FD | 	call	#pushregs_
061ac     2F 6B 02 F6 | 	mov	local01, arg02
061b0     30 6D 02 F6 | 	mov	local02, arg03
061b4     31 6F 02 F6 | 	mov	local03, arg04
061b8     88 11 B0 FD | 	call	#__system____getftab
061bc     15 71 0A F6 | 	mov	local04, result1 wz
061c0     18 00 90 5D |  if_ne	jmp	#LR__0296
061c4     03 5D 02 F6 | 	mov	arg01, abortchain
061c8     0C 5E 06 F6 | 	mov	arg02, #12
061cc     01 60 06 F6 | 	mov	arg03, #1
061d0     F0 00 A0 FD | 	call	#__longjmp
061d4     01 2A 66 F6 | 	neg	result1, #1
061d8     70 00 90 FD | 	jmp	#LR__0300
061dc                 | LR__0296
061dc     00 6A 0E F2 | 	cmp	local01, #0 wz
061e0     48 00 90 AD |  if_e	jmp	#LR__0298
061e4     04 5C 06 F6 | 	mov	arg01, #4
061e8     54 09 B0 FD | 	call	#__system___gc_alloc_managed
061ec     15 73 0A F6 | 	mov	local05, result1 wz
061f0     18 00 90 5D |  if_ne	jmp	#LR__0297
061f4     03 5D 02 F6 | 	mov	arg01, abortchain
061f8     07 5E 06 F6 | 	mov	arg02, #7
061fc     01 60 06 F6 | 	mov	arg03, #1
06200     F0 00 A0 FD | 	call	#__longjmp
06204     01 2A 66 F6 | 	neg	result1, #1
06208     40 00 90 FD | 	jmp	#LR__0300
0620c                 | LR__0297
0620c     39 6B 62 FC | 	wrlong	local01, local05
06210     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06214     39 5D 02 F6 | 	mov	arg01, local05
06218     B0 FC BF FD | 	call	#__system___make_methodptr
0621c     18 70 06 F1 | 	add	local04, #24
06220     38 2B 62 FC | 	wrlong	result1, local04
06224     18 70 86 F1 | 	sub	local04, #24
06228     0C 00 90 FD | 	jmp	#LR__0299
0622c                 | LR__0298
0622c     18 70 06 F1 | 	add	local04, #24
06230     38 6B 62 FC | 	wrlong	local01, local04
06234     18 70 86 F1 | 	sub	local04, #24
06238                 | LR__0299
06238     1C 70 06 F1 | 	add	local04, #28
0623c     38 6D 62 FC | 	wrlong	local02, local04
06240     04 70 06 F1 | 	add	local04, #4
06244     38 6F 62 FC | 	wrlong	local03, local04
06248     00 2A 06 F6 | 	mov	result1, #0
0624c                 | LR__0300
0624c     AF F0 03 F6 | 	mov	ptra, fp
06250     BF 00 A0 FD | 	call	#popregs_
06254                 | __system___basic_open_ret
06254     2D 00 64 FD | 	ret
06258                 | 
06258                 | __system___basic_print_char
06258     05 5A 05 F6 | 	mov	COUNT_, #5
0625c     B0 00 A0 FD | 	call	#pushregs_
06260     2F 6B 02 F6 | 	mov	local01, arg02
06264     A0 12 B0 FD | 	call	#__system___gettxfunc
06268     15 6D 0A F6 | 	mov	local02, result1 wz
0626c     00 2A 06 A6 |  if_e	mov	result1, #0
06270     24 00 90 AD |  if_e	jmp	#LR__0301
06274     36 6F 02 FB | 	rdlong	local03, local02
06278     04 6C 06 F1 | 	add	local02, #4
0627c     36 71 02 FB | 	rdlong	local04, local02
06280     35 5D 02 F6 | 	mov	arg01, local01
06284     07 73 02 F6 | 	mov	local05, objptr
06288     37 0F 02 F6 | 	mov	objptr, local03
0628c     2D 70 62 FD | 	call	local04
06290     39 0F 02 F6 | 	mov	objptr, local05
06294     01 2A 06 F6 | 	mov	result1, #1
06298                 | LR__0301
06298     AF F0 03 F6 | 	mov	ptra, fp
0629c     BF 00 A0 FD | 	call	#popregs_
062a0                 | __system___basic_print_char_ret
062a0     2D 00 64 FD | 	ret
062a4                 | 
062a4                 | __system___basic_print_string
062a4     03 5A 05 F6 | 	mov	COUNT_, #3
062a8     B0 00 A0 FD | 	call	#pushregs_
062ac     2F 6B 02 F6 | 	mov	local01, arg02
062b0     30 6D 02 F6 | 	mov	local02, arg03
062b4     50 12 B0 FD | 	call	#__system___gettxfunc
062b8     15 6F 0A F6 | 	mov	local03, result1 wz
062bc     00 2A 06 A6 |  if_e	mov	result1, #0
062c0     1C 00 90 AD |  if_e	jmp	#LR__0302
062c4     00 6A 0E F2 | 	cmp	local01, #0 wz
062c8     00 2A 06 A6 |  if_e	mov	result1, #0
062cc     10 00 90 AD |  if_e	jmp	#LR__0302
062d0     37 5D 02 F6 | 	mov	arg01, local03
062d4     36 5F 02 F6 | 	mov	arg02, local02
062d8     35 61 02 F6 | 	mov	arg03, local01
062dc     B0 00 B0 FD | 	call	#__system___fmtstr
062e0                 | LR__0302
062e0     AF F0 03 F6 | 	mov	ptra, fp
062e4     BF 00 A0 FD | 	call	#popregs_
062e8                 | __system___basic_print_string_ret
062e8     2D 00 64 FD | 	ret
062ec                 | 
062ec                 | __system___basic_print_integer
062ec     04 5A 05 F6 | 	mov	COUNT_, #4
062f0     B0 00 A0 FD | 	call	#pushregs_
062f4     2F 6B 02 F6 | 	mov	local01, arg02
062f8     30 6D 02 F6 | 	mov	local02, arg03
062fc     31 6F 02 F6 | 	mov	local03, arg04
06300     04 12 B0 FD | 	call	#__system___gettxfunc
06304     15 71 0A F6 | 	mov	local04, result1 wz
06308     00 2A 06 A6 |  if_e	mov	result1, #0
0630c     14 00 90 AD |  if_e	jmp	#LR__0303
06310     38 5D 02 F6 | 	mov	arg01, local04
06314     36 5F 02 F6 | 	mov	arg02, local02
06318     35 61 02 F6 | 	mov	arg03, local01
0631c     37 63 02 F6 | 	mov	arg04, local03
06320     60 01 B0 FD | 	call	#__system___fmtnum
06324                 | LR__0303
06324     AF F0 03 F6 | 	mov	ptra, fp
06328     BF 00 A0 FD | 	call	#popregs_
0632c                 | __system___basic_print_integer_ret
0632c     2D 00 64 FD | 	ret
06330                 | 
06330                 | __system___fmtchar
06330     00 5A 05 F6 | 	mov	COUNT_, #0
06334     B0 00 A0 FD | 	call	#pushregs_
06338     18 F0 07 F1 | 	add	ptra, #24
0633c     04 5E 05 F1 | 	add	fp, #4
06340     AF 5C 62 FC | 	wrlong	arg01, fp
06344     04 5E 05 F1 | 	add	fp, #4
06348     AF 5E 62 FC | 	wrlong	arg02, fp
0634c     04 5E 05 F1 | 	add	fp, #4
06350     AF 60 62 FC | 	wrlong	arg03, fp
06354     04 5E 05 F1 | 	add	fp, #4
06358     AF 60 42 FC | 	wrbyte	arg03, fp
0635c     01 5E 05 F1 | 	add	fp, #1
06360     AF 00 48 FC | 	wrbyte	#0, fp
06364     01 5E 85 F1 | 	sub	fp, #1
06368     AF 60 02 F6 | 	mov	arg03, fp
0636c     0C 5E 85 F1 | 	sub	fp, #12
06370     AF 5C 02 FB | 	rdlong	arg01, fp
06374     04 5E 05 F1 | 	add	fp, #4
06378     AF 5E 02 FB | 	rdlong	arg02, fp
0637c     08 5E 85 F1 | 	sub	fp, #8
06380     0C 00 B0 FD | 	call	#__system___fmtstr
06384     AF F0 03 F6 | 	mov	ptra, fp
06388     BF 00 A0 FD | 	call	#popregs_
0638c                 | __system___fmtchar_ret
0638c     2D 00 64 FD | 	ret
06390                 | 
06390                 | __system___fmtstr
06390     0E 5A 05 F6 | 	mov	COUNT_, #14
06394     B0 00 A0 FD | 	call	#pushregs_
06398     2E 6B 02 F6 | 	mov	local01, arg01
0639c     2F 6D 02 F6 | 	mov	local02, arg02
063a0     30 6F 02 F6 | 	mov	local03, arg03
063a4     36 71 02 F6 | 	mov	local04, local02
063a8     FF 70 06 F5 | 	and	local04, #255
063ac     37 5D 02 F6 | 	mov	arg01, local03
063b0     00 72 06 F6 | 	mov	local05, #0
063b4     58 9C 9F FE | 	loc	pa,	#(@LR__0305-@LR__0304)
063b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
063bc                 | LR__0304
063bc     2E 75 CA FA | 	rdbyte	local06, arg01 wz
063c0     01 72 06 51 |  if_ne	add	local05, #1
063c4     01 5C 06 51 |  if_ne	add	arg01, #1
063c8     F0 FF 9F 5D |  if_ne	jmp	#LR__0304
063cc                 | LR__0305
063cc     39 2B 02 F6 | 	mov	result1, local05
063d0     15 77 02 F6 | 	mov	local07, result1
063d4     00 70 0E F2 | 	cmp	local04, #0 wz
063d8     04 00 90 AD |  if_e	jmp	#LR__0306
063dc     38 77 7A F3 | 	fles	local07, local04 wcz
063e0                 | LR__0306
063e0     35 5D 02 F6 | 	mov	arg01, local01
063e4     36 5F 02 F6 | 	mov	arg02, local02
063e8     3B 61 02 F6 | 	mov	arg03, local07
063ec     02 62 06 F6 | 	mov	arg04, #2
063f0     C8 0F B0 FD | 	call	#__system___fmtpad
063f4     15 79 02 F6 | 	mov	local08, result1
063f8     00 78 5E F2 | 	cmps	local08, #0 wcz
063fc     3C 2B 02 C6 |  if_b	mov	result1, local08
06400     74 00 90 CD |  if_b	jmp	#LR__0309
06404     00 76 5E F2 | 	cmps	local07, #0 wcz
06408     44 00 90 ED |  if_be	jmp	#LR__0308
0640c     3B 7B 02 F6 | 	mov	local09, local07
06410                 | LR__0307
06410     35 7D 02 F6 | 	mov	local10, local01
06414     3E 7F 02 FB | 	rdlong	local11, local10
06418     04 7C 06 F1 | 	add	local10, #4
0641c     3E 81 02 FB | 	rdlong	local12, local10
06420     37 5D C2 FA | 	rdbyte	arg01, local03
06424     07 83 02 F6 | 	mov	local13, objptr
06428     3F 0F 02 F6 | 	mov	objptr, local11
0642c     01 6E 06 F1 | 	add	local03, #1
06430     2D 80 62 FD | 	call	local12
06434     41 0F 02 F6 | 	mov	objptr, local13
06438     15 85 02 F6 | 	mov	local14, result1
0643c     00 84 5E F2 | 	cmps	local14, #0 wcz
06440     42 2B 02 C6 |  if_b	mov	result1, local14
06444     30 00 90 CD |  if_b	jmp	#LR__0309
06448     42 79 02 F1 | 	add	local08, local14
0644c     F0 7B 6E FB | 	djnz	local09, #LR__0307
06450                 | LR__0308
06450     35 5D 02 F6 | 	mov	arg01, local01
06454     36 5F 02 F6 | 	mov	arg02, local02
06458     3B 61 02 F6 | 	mov	arg03, local07
0645c     01 62 06 F6 | 	mov	arg04, #1
06460     58 0F B0 FD | 	call	#__system___fmtpad
06464     15 85 02 F6 | 	mov	local14, result1
06468     00 84 5E F2 | 	cmps	local14, #0 wcz
0646c     42 2B 02 C6 |  if_b	mov	result1, local14
06470     42 79 02 31 |  if_ae	add	local08, local14
06474     3C 2B 02 36 |  if_ae	mov	result1, local08
06478                 | LR__0309
06478     AF F0 03 F6 | 	mov	ptra, fp
0647c     BF 00 A0 FD | 	call	#popregs_
06480                 | __system___fmtstr_ret
06480     2D 00 64 FD | 	ret
06484                 | 
06484                 | __system___fmtnum
06484     07 5A 05 F6 | 	mov	COUNT_, #7
06488     B0 00 A0 FD | 	call	#pushregs_
0648c     78 F0 07 F1 | 	add	ptra, #120
06490     04 5E 05 F1 | 	add	fp, #4
06494     AF 5C 62 FC | 	wrlong	arg01, fp
06498     04 5E 05 F1 | 	add	fp, #4
0649c     AF 5E 62 FC | 	wrlong	arg02, fp
064a0     04 5E 05 F1 | 	add	fp, #4
064a4     AF 60 62 FC | 	wrlong	arg03, fp
064a8     04 5E 05 F1 | 	add	fp, #4
064ac     AF 62 62 FC | 	wrlong	arg04, fp
064b0     04 5E 05 F1 | 	add	fp, #4
064b4     AF 6A 02 F6 | 	mov	local01, fp
064b8     44 5E 05 F1 | 	add	fp, #68
064bc     AF 6A 62 FC | 	wrlong	local01, fp
064c0     04 5E 05 F1 | 	add	fp, #4
064c4     AF 00 68 FC | 	wrlong	#0, fp
064c8     54 5E 85 F1 | 	sub	fp, #84
064cc     AF 6A 02 FB | 	rdlong	local01, fp
064d0     10 6A 46 F0 | 	shr	local01, #16
064d4     3F 6A 06 F5 | 	and	local01, #63
064d8     58 5E 05 F1 | 	add	fp, #88
064dc     AF 6A 62 FC | 	wrlong	local01, fp
064e0     58 5E 85 F1 | 	sub	fp, #88
064e4     AF 6A 02 FB | 	rdlong	local01, fp
064e8     FF 6A 06 F5 | 	and	local01, #255
064ec     5C 5E 05 F1 | 	add	fp, #92
064f0     AF 6A 62 FC | 	wrlong	local01, fp
064f4     5C 5E 85 F1 | 	sub	fp, #92
064f8     AF 6A 02 FB | 	rdlong	local01, fp
064fc     1A 6A 46 F0 | 	shr	local01, #26
06500     03 6A 06 F5 | 	and	local01, #3
06504     60 5E 05 F1 | 	add	fp, #96
06508     AF 6A 62 FC | 	wrlong	local01, fp
0650c     08 5E 85 F1 | 	sub	fp, #8
06510     AF 6A 02 FB | 	rdlong	local01, fp
06514     60 5E 85 F1 | 	sub	fp, #96
06518     00 6A 5E F2 | 	cmps	local01, #0 wcz
0651c     14 00 90 ED |  if_be	jmp	#LR__0310
06520     60 5E 05 F1 | 	add	fp, #96
06524     AF 6A 02 FB | 	rdlong	local01, fp
06528     01 6A 86 F1 | 	sub	local01, #1
0652c     AF 6A 62 FC | 	wrlong	local01, fp
06530     60 5E 85 F1 | 	sub	fp, #96
06534                 | LR__0310
06534     64 5E 05 F1 | 	add	fp, #100
06538     AF 6C 02 FB | 	rdlong	local02, fp
0653c     64 5E 85 F1 | 	sub	fp, #100
06540     40 6C 5E F2 | 	cmps	local02, #64 wcz
06544     14 00 90 1D |  if_a	jmp	#LR__0311
06548     64 5E 05 F1 | 	add	fp, #100
0654c     AF 6E 02 FB | 	rdlong	local03, fp
06550     64 5E 85 F1 | 	sub	fp, #100
06554     37 71 0A F6 | 	mov	local04, local03 wz
06558     0C 00 90 5D |  if_ne	jmp	#LR__0312
0655c                 | LR__0311
0655c     64 5E 05 F1 | 	add	fp, #100
06560     AF 80 68 FC | 	wrlong	#64, fp
06564     64 5E 85 F1 | 	sub	fp, #100
06568                 | LR__0312
06568     68 5E 05 F1 | 	add	fp, #104
0656c     AF 6A 02 FB | 	rdlong	local01, fp
06570     68 5E 85 F1 | 	sub	fp, #104
06574     03 6A 0E F2 | 	cmp	local01, #3 wz
06578     10 00 90 5D |  if_ne	jmp	#LR__0313
0657c     68 5E 05 F1 | 	add	fp, #104
06580     AF 00 68 FC | 	wrlong	#0, fp
06584     68 5E 85 F1 | 	sub	fp, #104
06588     30 00 90 FD | 	jmp	#LR__0315
0658c                 | LR__0313
0658c     0C 5E 05 F1 | 	add	fp, #12
06590     AF 6A 02 FB | 	rdlong	local01, fp
06594     0C 5E 85 F1 | 	sub	fp, #12
06598     00 6A 5E F2 | 	cmps	local01, #0 wcz
0659c     1C 00 90 3D |  if_ae	jmp	#LR__0314
065a0     68 5E 05 F1 | 	add	fp, #104
065a4     AF 08 68 FC | 	wrlong	#4, fp
065a8     5C 5E 85 F1 | 	sub	fp, #92
065ac     AF 6A 02 FB | 	rdlong	local01, fp
065b0     35 6B 62 F6 | 	neg	local01, local01
065b4     AF 6A 62 FC | 	wrlong	local01, fp
065b8     0C 5E 85 F1 | 	sub	fp, #12
065bc                 | LR__0314
065bc                 | LR__0315
065bc     68 5E 05 F1 | 	add	fp, #104
065c0     AF 6A 0A FB | 	rdlong	local01, fp wz
065c4     68 5E 85 F1 | 	sub	fp, #104
065c8     EC 00 90 AD |  if_e	jmp	#LR__0322
065cc     5C 5E 05 F1 | 	add	fp, #92
065d0     AF 70 02 FB | 	rdlong	local04, fp
065d4     01 70 06 F1 | 	add	local04, #1
065d8     AF 70 62 FC | 	wrlong	local04, fp
065dc     04 5E 05 F1 | 	add	fp, #4
065e0     AF 6A 02 FB | 	rdlong	local01, fp
065e4     04 5E 05 F1 | 	add	fp, #4
065e8     AF 70 02 FB | 	rdlong	local04, fp
065ec     64 5E 85 F1 | 	sub	fp, #100
065f0     38 6B 0A F2 | 	cmp	local01, local04 wz
065f4     3C 00 90 5D |  if_ne	jmp	#LR__0317
065f8     60 5E 05 F1 | 	add	fp, #96
065fc     AF 70 02 FB | 	rdlong	local04, fp
06600     01 70 86 F1 | 	sub	local04, #1
06604     AF 70 62 FC | 	wrlong	local04, fp
06608     AF 6A 0A FB | 	rdlong	local01, fp wz
0660c     60 5E 85 F1 | 	sub	fp, #96
06610     20 00 90 5D |  if_ne	jmp	#LR__0316
06614     04 5E 05 F1 | 	add	fp, #4
06618     AF 5C 02 FB | 	rdlong	arg01, fp
0661c     04 5E 05 F1 | 	add	fp, #4
06620     AF 5E 02 FB | 	rdlong	arg02, fp
06624     08 5E 85 F1 | 	sub	fp, #8
06628     23 60 06 F6 | 	mov	arg03, #35
0662c     00 FD BF FD | 	call	#__system___fmtchar
06630     70 01 90 FD | 	jmp	#LR__0327
06634                 | LR__0316
06634                 | LR__0317
06634     68 5E 05 F1 | 	add	fp, #104
06638     AF 6A 02 FB | 	rdlong	local01, fp
0663c     68 5E 85 F1 | 	sub	fp, #104
06640     02 6A 0E F2 | 	cmp	local01, #2 wz
06644     20 00 90 5D |  if_ne	jmp	#LR__0318
06648     58 5E 05 F1 | 	add	fp, #88
0664c     AF 6A 02 FB | 	rdlong	local01, fp
06650     35 71 02 F6 | 	mov	local04, local01
06654     01 70 06 F1 | 	add	local04, #1
06658     AF 70 62 FC | 	wrlong	local04, fp
0665c     58 5E 85 F1 | 	sub	fp, #88
06660     35 41 48 FC | 	wrbyte	#32, local01
06664     50 00 90 FD | 	jmp	#LR__0321
06668                 | LR__0318
06668     68 5E 05 F1 | 	add	fp, #104
0666c     AF 6A 02 FB | 	rdlong	local01, fp
06670     68 5E 85 F1 | 	sub	fp, #104
06674     04 6A 0E F2 | 	cmp	local01, #4 wz
06678     20 00 90 5D |  if_ne	jmp	#LR__0319
0667c     58 5E 05 F1 | 	add	fp, #88
06680     AF 6A 02 FB | 	rdlong	local01, fp
06684     35 71 02 F6 | 	mov	local04, local01
06688     01 70 06 F1 | 	add	local04, #1
0668c     AF 70 62 FC | 	wrlong	local04, fp
06690     58 5E 85 F1 | 	sub	fp, #88
06694     35 5B 48 FC | 	wrbyte	#45, local01
06698     1C 00 90 FD | 	jmp	#LR__0320
0669c                 | LR__0319
0669c     58 5E 05 F1 | 	add	fp, #88
066a0     AF 6A 02 FB | 	rdlong	local01, fp
066a4     35 71 02 F6 | 	mov	local04, local01
066a8     01 70 06 F1 | 	add	local04, #1
066ac     AF 70 62 FC | 	wrlong	local04, fp
066b0     58 5E 85 F1 | 	sub	fp, #88
066b4     35 57 48 FC | 	wrbyte	#43, local01
066b8                 | LR__0320
066b8                 | LR__0321
066b8                 | LR__0322
066b8     58 5E 05 F1 | 	add	fp, #88
066bc     AF 5C 02 FB | 	rdlong	arg01, fp
066c0     4C 5E 85 F1 | 	sub	fp, #76
066c4     AF 5E 02 FB | 	rdlong	arg02, fp
066c8     04 5E 05 F1 | 	add	fp, #4
066cc     AF 60 02 FB | 	rdlong	arg03, fp
066d0     50 5E 05 F1 | 	add	fp, #80
066d4     AF 62 02 FB | 	rdlong	arg04, fp
066d8     00 72 06 F6 | 	mov	local05, #0
066dc     58 5E 85 F1 | 	sub	fp, #88
066e0     AF 74 02 FB | 	rdlong	local06, fp
066e4     08 5E 85 F1 | 	sub	fp, #8
066e8     1D 74 2E F4 | 	testbn	local06, #29 wz
066ec     01 72 06 56 |  if_ne	mov	local05, #1
066f0     39 65 02 F6 | 	mov	arg05, local05
066f4     84 0D B0 FD | 	call	#__system___uitoa
066f8     15 77 02 F6 | 	mov	local07, result1
066fc     5C 5E 05 F1 | 	add	fp, #92
06700     AF 6A 02 FB | 	rdlong	local01, fp
06704     3B 6B 02 F1 | 	add	local01, local07
06708     AF 6A 62 FC | 	wrlong	local01, fp
0670c     08 5E 05 F1 | 	add	fp, #8
06710     AF 70 02 FB | 	rdlong	local04, fp
06714     64 5E 85 F1 | 	sub	fp, #100
06718     38 6B 5A F2 | 	cmps	local01, local04 wcz
0671c     64 00 90 ED |  if_be	jmp	#LR__0326
06720     1C 99 9F FE | 	loc	pa,	#(@LR__0324-@LR__0323)
06724     93 00 A0 FD | 	call	#FCACHE_LOAD_
06728                 | LR__0323
06728     64 5E 05 F1 | 	add	fp, #100
0672c     AF 6A 02 FB | 	rdlong	local01, fp
06730     35 71 02 F6 | 	mov	local04, local01
06734     01 70 86 F1 | 	sub	local04, #1
06738     AF 70 62 FC | 	wrlong	local04, fp
0673c     64 5E 85 F1 | 	sub	fp, #100
06740     00 6A 5E F2 | 	cmps	local01, #0 wcz
06744     20 00 90 ED |  if_be	jmp	#LR__0325
06748     58 5E 05 F1 | 	add	fp, #88
0674c     AF 6A 02 FB | 	rdlong	local01, fp
06750     35 71 02 F6 | 	mov	local04, local01
06754     01 70 06 F1 | 	add	local04, #1
06758     AF 70 62 FC | 	wrlong	local04, fp
0675c     58 5E 85 F1 | 	sub	fp, #88
06760     35 47 48 FC | 	wrbyte	#35, local01
06764     C0 FF 9F FD | 	jmp	#LR__0323
06768                 | LR__0324
06768                 | LR__0325
06768     58 5E 05 F1 | 	add	fp, #88
0676c     AF 6A 02 FB | 	rdlong	local01, fp
06770     35 71 02 F6 | 	mov	local04, local01
06774     01 70 06 F1 | 	add	local04, #1
06778     AF 70 62 FC | 	wrlong	local04, fp
0677c     58 5E 85 F1 | 	sub	fp, #88
06780     35 01 48 FC | 	wrbyte	#0, local01
06784                 | LR__0326
06784     14 5E 05 F1 | 	add	fp, #20
06788     AF 60 02 F6 | 	mov	arg03, fp
0678c     10 5E 85 F1 | 	sub	fp, #16
06790     AF 5C 02 FB | 	rdlong	arg01, fp
06794     04 5E 05 F1 | 	add	fp, #4
06798     AF 5E 02 FB | 	rdlong	arg02, fp
0679c     08 5E 85 F1 | 	sub	fp, #8
067a0     EC FB BF FD | 	call	#__system___fmtstr
067a4                 | LR__0327
067a4     AF F0 03 F6 | 	mov	ptra, fp
067a8     BF 00 A0 FD | 	call	#popregs_
067ac                 | __system___fmtnum_ret
067ac     2D 00 64 FD | 	ret
067b0                 | 
067b0                 | __system__String_S
067b0     06 5A 05 F6 | 	mov	COUNT_, #6
067b4     B0 00 A0 FD | 	call	#pushregs_
067b8     2E 6B 02 F6 | 	mov	local01, arg01
067bc     2F 6D 02 F6 | 	mov	local02, arg02
067c0     36 5D 02 F6 | 	mov	arg01, local02
067c4     00 6E 06 F6 | 	mov	local03, #0
067c8     44 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
067cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
067d0                 | LR__0328
067d0     2E 71 CA FA | 	rdbyte	local04, arg01 wz
067d4     01 6E 06 51 |  if_ne	add	local03, #1
067d8     01 5C 06 51 |  if_ne	add	arg01, #1
067dc     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
067e0                 | LR__0329
067e0     37 2B 0A F6 | 	mov	result1, local03 wz
067e4     40 00 00 AF 
067e8     BA 2A 06 A6 |  if_e	mov	result1, ##@LR__0446
067ec     50 00 90 AD |  if_e	jmp	#LR__0331
067f0     00 6A 5E F2 | 	cmps	local01, #0 wcz
067f4     40 00 00 EF 
067f8     BB 2A 06 E6 |  if_be	mov	result1, ##@LR__0447
067fc     40 00 90 ED |  if_be	jmp	#LR__0331
06800     35 73 02 F6 | 	mov	local05, local01
06804     01 72 06 F1 | 	add	local05, #1
06808     39 5D 02 F6 | 	mov	arg01, local05
0680c     01 5C 06 F1 | 	add	arg01, #1
06810     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06814     15 75 0A F6 | 	mov	local06, result1 wz
06818     20 00 90 AD |  if_e	jmp	#LR__0330
0681c     36 5F C2 FA | 	rdbyte	arg02, local02
06820     3A 5D 02 F6 | 	mov	arg01, local06
06824     35 61 02 F6 | 	mov	arg03, local01
06828     A0 00 A0 FD | 	call	#\builtin_bytefill_
0682c     3A 73 02 F1 | 	add	local05, local06
06830     39 01 48 FC | 	wrbyte	#0, local05
06834     3A 2B 02 F6 | 	mov	result1, local06
06838     04 00 90 FD | 	jmp	#LR__0331
0683c                 | LR__0330
0683c     3A 2B 02 F6 | 	mov	result1, local06
06840                 | LR__0331
06840     AF F0 03 F6 | 	mov	ptra, fp
06844     BF 00 A0 FD | 	call	#popregs_
06848                 | __system__String_S_ret
06848     2D 00 64 FD | 	ret
0684c                 | 
0684c                 | __system___gc_ptrs
0684c     0A 5A 05 F6 | 	mov	COUNT_, #10
06850     B0 00 A0 FD | 	call	#pushregs_
06854     02 6B 02 F6 | 	mov	local01, __heap_ptr
06858     35 6D 02 F6 | 	mov	local02, local01
0685c     07 00 00 FF 
06860     F8 6D 06 F1 | 	add	local02, ##4088
06864     35 6F 0A FB | 	rdlong	local03, local01 wz
06868     74 00 90 5D |  if_ne	jmp	#LR__0332
0686c     36 71 02 F6 | 	mov	local04, local02
06870     35 71 82 F1 | 	sub	local04, local01
06874     35 03 58 FC | 	wrword	#1, local01
06878     35 73 02 F6 | 	mov	local05, local01
0687c     02 72 06 F1 | 	add	local05, #2
06880     36 00 80 FF 
06884     39 21 59 FC | 	wrword	##27792, local05
06888     35 75 02 F6 | 	mov	local06, local01
0688c     04 74 06 F1 | 	add	local06, #4
06890     3A 01 58 FC | 	wrword	#0, local06
06894     35 77 02 F6 | 	mov	local07, local01
06898     06 76 06 F1 | 	add	local07, #6
0689c     3B 03 58 FC | 	wrword	#1, local07
068a0     10 6A 06 F1 | 	add	local01, #16
068a4     38 6F 52 F6 | 	abs	local03, local04 wc
068a8     04 6E 46 F0 | 	shr	local03, #4
068ac     37 6F 62 C6 |  if_b	neg	local03, local03
068b0     35 6F 52 FC | 	wrword	local03, local01
068b4     35 79 02 F6 | 	mov	local08, local01
068b8     02 78 06 F1 | 	add	local08, #2
068bc     36 00 80 FF 
068c0     3C 1F 59 FC | 	wrword	##27791, local08
068c4     35 7B 02 F6 | 	mov	local09, local01
068c8     04 7A 06 F1 | 	add	local09, #4
068cc     3D 01 58 FC | 	wrword	#0, local09
068d0     35 7D 02 F6 | 	mov	local10, local01
068d4     06 7C 06 F1 | 	add	local10, #6
068d8     3E 01 58 FC | 	wrword	#0, local10
068dc     10 6A 86 F1 | 	sub	local01, #16
068e0                 | LR__0332
068e0     36 2D 02 F6 | 	mov	result2, local02
068e4     35 2B 02 F6 | 	mov	result1, local01
068e8     AF F0 03 F6 | 	mov	ptra, fp
068ec     BF 00 A0 FD | 	call	#popregs_
068f0                 | __system___gc_ptrs_ret
068f0     2D 00 64 FD | 	ret
068f4                 | 
068f4                 | __system___gc_nextBlockPtr
068f4     02 5A 05 F6 | 	mov	COUNT_, #2
068f8     B0 00 A0 FD | 	call	#pushregs_
068fc     2E 6B 02 F6 | 	mov	local01, arg01
06900     35 6D EA FA | 	rdword	local02, local01 wz
06904     10 00 90 5D |  if_ne	jmp	#LR__0333
06908     40 00 00 FF 
0690c     BC 5C 06 F6 | 	mov	arg01, ##@LR__0448
06910     F8 01 B0 FD | 	call	#__system___gc_errmsg
06914     0C 00 90 FD | 	jmp	#LR__0334
06918                 | LR__0333
06918     04 6C 66 F0 | 	shl	local02, #4
0691c     35 2B 02 F6 | 	mov	result1, local01
06920     36 2B 02 F1 | 	add	result1, local02
06924                 | LR__0334
06924     AF F0 03 F6 | 	mov	ptra, fp
06928     BF 00 A0 FD | 	call	#popregs_
0692c                 | __system___gc_nextBlockPtr_ret
0692c     2D 00 64 FD | 	ret
06930                 | 
06930                 | __system___gc_tryalloc
06930     1B 5A 05 F6 | 	mov	COUNT_, #27
06934     B0 00 A0 FD | 	call	#pushregs_
06938     2E 6B 02 F6 | 	mov	local01, arg01
0693c     2F 6D 02 F6 | 	mov	local02, arg02
06940     08 FF BF FD | 	call	#__system___gc_ptrs
06944     15 6F 02 F6 | 	mov	local03, result1
06948     16 71 02 F6 | 	mov	local04, result2
0694c     37 73 02 F6 | 	mov	local05, local03
06950     00 74 06 F6 | 	mov	local06, #0
06954     00 97 9F FE | 	loc	pa,	#(@LR__0336-@LR__0335)
06958     93 00 A0 FD | 	call	#FCACHE_LOAD_
0695c                 | LR__0335
0695c     39 77 02 F6 | 	mov	local07, local05
06960     06 72 06 F1 | 	add	local05, #6
06964     39 79 02 F6 | 	mov	local08, local05
06968     37 7B 02 F6 | 	mov	local09, local03
0696c     3C 7D E2 FA | 	rdword	local10, local08
06970     3D 5D 02 F6 | 	mov	arg01, local09
06974     3E 5F 0A F6 | 	mov	arg02, local10 wz
06978     00 2A 06 A6 |  if_e	mov	result1, #0
0697c     04 5E 66 50 |  if_ne	shl	arg02, #4
06980     2F 5D 02 51 |  if_ne	add	arg01, arg02
06984     2E 2B 02 56 |  if_ne	mov	result1, arg01
06988     15 7F 02 F6 | 	mov	local11, result1
0698c     3F 73 0A F6 | 	mov	local05, local11 wz
06990     39 7B 02 56 |  if_ne	mov	local09, local05
06994     3D 81 02 56 |  if_ne	mov	local12, local09
06998     40 75 E2 5A |  if_ne	rdword	local06, local12
0699c     00 72 0E F2 | 	cmp	local05, #0 wz
069a0     10 00 90 AD |  if_e	jmp	#LR__0337
069a4     38 73 5A F2 | 	cmps	local05, local04 wcz
069a8     08 00 90 3D |  if_ae	jmp	#LR__0337
069ac     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069b0     A8 FF 9F 1D |  if_a	jmp	#LR__0335
069b4                 | LR__0336
069b4                 | LR__0337
069b4     00 72 0E F2 | 	cmp	local05, #0 wz
069b8     39 2B 02 A6 |  if_e	mov	result1, local05
069bc     40 01 90 AD |  if_e	jmp	#LR__0340
069c0     39 83 02 F6 | 	mov	local13, local05
069c4     06 82 06 F1 | 	add	local13, #6
069c8     41 85 E2 FA | 	rdword	local14, local13
069cc     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069d0     CC 00 90 3D |  if_ae	jmp	#LR__0339
069d4     39 87 02 F6 | 	mov	local15, local05
069d8     43 6B 52 FC | 	wrword	local01, local15
069dc     35 89 02 F6 | 	mov	local16, local01
069e0     04 88 66 F0 | 	shl	local16, #4
069e4     39 8B 02 F6 | 	mov	local17, local05
069e8     44 8B 02 F1 | 	add	local17, local16
069ec     3A 8D 02 F6 | 	mov	local18, local06
069f0     35 8D 82 F1 | 	sub	local18, local01
069f4     45 8F 02 F6 | 	mov	local19, local17
069f8     47 8D 52 FC | 	wrword	local18, local19
069fc     45 91 02 F6 | 	mov	local20, local17
06a00     02 90 06 F1 | 	add	local20, #2
06a04     36 00 80 FF 
06a08     48 1F 59 FC | 	wrword	##27791, local20
06a0c     45 93 02 F6 | 	mov	local21, local17
06a10     04 92 06 F1 | 	add	local21, #4
06a14     39 5F 0A F6 | 	mov	arg02, local05 wz
06a18     00 2A 06 A6 |  if_e	mov	result1, #0
06a1c     37 5F 82 51 |  if_ne	sub	arg02, local03
06a20     04 5E 46 50 |  if_ne	shr	arg02, #4
06a24     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a28     49 2B 52 FC | 	wrword	result1, local21
06a2c     45 95 02 F6 | 	mov	local22, local17
06a30     41 7B E2 FA | 	rdword	local09, local13
06a34     06 94 06 F1 | 	add	local22, #6
06a38     4A 7B 52 FC | 	wrword	local09, local22
06a3c     45 97 02 F6 | 	mov	local23, local17
06a40     4B 5F 0A F6 | 	mov	arg02, local23 wz
06a44     00 2A 06 A6 |  if_e	mov	result1, #0
06a48     37 5F 82 51 |  if_ne	sub	arg02, local03
06a4c     04 5E 46 50 |  if_ne	shr	arg02, #4
06a50     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a54     15 85 02 F6 | 	mov	local14, result1
06a58     45 5D 02 F6 | 	mov	arg01, local17
06a5c     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06a60     15 99 0A F6 | 	mov	local24, result1 wz
06a64     38 00 90 AD |  if_e	jmp	#LR__0338
06a68     38 99 5A F2 | 	cmps	local24, local04 wcz
06a6c     30 00 90 3D |  if_ae	jmp	#LR__0338
06a70     4C 9B 02 F6 | 	mov	local25, local24
06a74     04 9A 06 F1 | 	add	local25, #4
06a78     37 7B 02 F6 | 	mov	local09, local03
06a7c     4B 7D 02 F6 | 	mov	local10, local23
06a80     3D 5D 02 F6 | 	mov	arg01, local09
06a84     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a88     00 2A 06 A6 |  if_e	mov	result1, #0
06a8c     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06a90     04 5E 46 50 |  if_ne	shr	arg02, #4
06a94     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a98     15 7F 02 F6 | 	mov	local11, result1
06a9c     4D 7F 52 FC | 	wrword	local11, local25
06aa0                 | LR__0338
06aa0                 | LR__0339
06aa0     06 76 06 F1 | 	add	local07, #6
06aa4     3B 85 52 FC | 	wrword	local14, local07
06aa8     36 00 00 FF 
06aac     80 7A 06 F6 | 	mov	local09, ##27776
06ab0     36 7B 42 F5 | 	or	local09, local02
06ab4     39 9D 02 F6 | 	mov	local26, local05
06ab8     02 9C 06 F1 | 	add	local26, #2
06abc     01 2A 62 FD | 	cogid	result1
06ac0     15 7B 42 F5 | 	or	local09, result1
06ac4     4E 7B 52 FC | 	wrword	local09, local26
06ac8     37 9F 02 F6 | 	mov	local27, local03
06acc     08 9E 06 F1 | 	add	local27, #8
06ad0     4F 7B E2 FA | 	rdword	local09, local27
06ad4     41 7B 52 FC | 	wrword	local09, local13
06ad8     39 5F 0A F6 | 	mov	arg02, local05 wz
06adc     00 2A 06 A6 |  if_e	mov	result1, #0
06ae0     37 5F 82 51 |  if_ne	sub	arg02, local03
06ae4     04 5E 46 50 |  if_ne	shr	arg02, #4
06ae8     2F 2B 02 56 |  if_ne	mov	result1, arg02
06aec     4F 2B 52 FC | 	wrword	result1, local27
06af0     08 72 06 F1 | 	add	local05, #8
06af4     39 2B 02 F6 | 	mov	result1, local05
06af8     00 C0 31 FF 
06afc     00 2A 46 F5 | 	or	result1, ##1669332992
06b00                 | LR__0340
06b00     AF F0 03 F6 | 	mov	ptra, fp
06b04     BF 00 A0 FD | 	call	#popregs_
06b08                 | __system___gc_tryalloc_ret
06b08     2D 00 64 FD | 	ret
06b0c                 | 
06b0c                 | __system___gc_errmsg
06b0c     02 5A 05 F6 | 	mov	COUNT_, #2
06b10     B0 00 A0 FD | 	call	#pushregs_
06b14     2E 6B 02 F6 | 	mov	local01, arg01
06b18                 | LR__0341
06b18     35 6D CA FA | 	rdbyte	local02, local01 wz
06b1c     01 6A 06 F1 | 	add	local01, #1
06b20     0C 00 90 AD |  if_e	jmp	#LR__0342
06b24     36 5D 02 F6 | 	mov	arg01, local02
06b28     C4 F4 BF FD | 	call	#__system___tx
06b2c     E8 FF 9F FD | 	jmp	#LR__0341
06b30                 | LR__0342
06b30     00 2A 06 F6 | 	mov	result1, #0
06b34     AF F0 03 F6 | 	mov	ptra, fp
06b38     BF 00 A0 FD | 	call	#popregs_
06b3c                 | __system___gc_errmsg_ret
06b3c     2D 00 64 FD | 	ret
06b40                 | 
06b40                 | __system___gc_alloc_managed
06b40     02 5A 05 F6 | 	mov	COUNT_, #2
06b44     B0 00 A0 FD | 	call	#pushregs_
06b48     2E 6B 02 F6 | 	mov	local01, arg01
06b4c     00 5E 06 F6 | 	mov	arg02, #0
06b50     30 00 B0 FD | 	call	#__system___gc_doalloc
06b54     15 6D 0A F6 | 	mov	local02, result1 wz
06b58     18 00 90 5D |  if_ne	jmp	#LR__0343
06b5c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06b60     10 00 90 ED |  if_be	jmp	#LR__0343
06b64     40 00 00 FF 
06b68     D8 5C 06 F6 | 	mov	arg01, ##@LR__0449
06b6c     9C FF BF FD | 	call	#__system___gc_errmsg
06b70     04 00 90 FD | 	jmp	#LR__0344
06b74                 | LR__0343
06b74     36 2B 02 F6 | 	mov	result1, local02
06b78                 | LR__0344
06b78     AF F0 03 F6 | 	mov	ptra, fp
06b7c     BF 00 A0 FD | 	call	#popregs_
06b80                 | __system___gc_alloc_managed_ret
06b80     2D 00 64 FD | 	ret
06b84                 | 
06b84                 | __system___gc_doalloc
06b84     07 5A 05 F6 | 	mov	COUNT_, #7
06b88     B0 00 A0 FD | 	call	#pushregs_
06b8c     2E 6B 0A F6 | 	mov	local01, arg01 wz
06b90     2F 6D 02 F6 | 	mov	local02, arg02
06b94     00 2A 06 A6 |  if_e	mov	result1, #0
06b98     8C 00 90 AD |  if_e	jmp	#LR__0352
06b9c     17 6A 06 F1 | 	add	local01, #23
06ba0     0F 6A 26 F5 | 	andn	local01, #15
06ba4     04 6A 46 F0 | 	shr	local01, #4
06ba8     14 14 06 F1 | 	add	ptr___system__dat__, #20
06bac     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06bb0     37 5D 02 F6 | 	mov	arg01, local03
06bb4     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06bb8     50 F3 BF FD | 	call	#__system___lockmem
06bbc     35 5D 02 F6 | 	mov	arg01, local01
06bc0     36 5F 02 F6 | 	mov	arg02, local02
06bc4     68 FD BF FD | 	call	#__system___gc_tryalloc
06bc8     15 71 0A F6 | 	mov	local04, result1 wz
06bcc     14 00 90 5D |  if_ne	jmp	#LR__0345
06bd0     10 03 B0 FD | 	call	#__system___gc_docollect
06bd4     35 5D 02 F6 | 	mov	arg01, local01
06bd8     36 5F 02 F6 | 	mov	arg02, local02
06bdc     50 FD BF FD | 	call	#__system___gc_tryalloc
06be0     15 71 02 F6 | 	mov	local04, result1
06be4                 | LR__0345
06be4     37 01 68 FC | 	wrlong	#0, local03
06be8     00 70 0E F2 | 	cmp	local04, #0 wz
06bec     34 00 90 AD |  if_e	jmp	#LR__0351
06bf0     04 6A 66 F0 | 	shl	local01, #4
06bf4     08 6A 86 F1 | 	sub	local01, #8
06bf8     35 73 52 F6 | 	abs	local05, local01 wc
06bfc     02 72 46 F0 | 	shr	local05, #2
06c00     39 73 62 C6 |  if_b	neg	local05, local05
06c04     39 75 0A F6 | 	mov	local06, local05 wz
06c08     38 77 02 F6 | 	mov	local07, local04
06c0c     14 00 90 AD |  if_e	jmp	#LR__0350
06c10     F8 93 9F FE | 	loc	pa,	#(@LR__0348-@LR__0346)
06c14     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c18                 | LR__0346
06c18     3A 05 D8 FC | 	rep	@LR__0349, local06
06c1c                 | LR__0347
06c1c     3B 01 68 FC | 	wrlong	#0, local07
06c20     04 76 06 F1 | 	add	local07, #4
06c24                 | LR__0348
06c24                 | LR__0349
06c24                 | LR__0350
06c24                 | LR__0351
06c24     38 2B 02 F6 | 	mov	result1, local04
06c28                 | LR__0352
06c28     AF F0 03 F6 | 	mov	ptra, fp
06c2c     BF 00 A0 FD | 	call	#popregs_
06c30                 | __system___gc_doalloc_ret
06c30     2D 00 64 FD | 	ret
06c34                 | 
06c34                 | __system___gc_isvalidptr
06c34     30 31 02 F6 | 	mov	_var01, arg03
06c38     18 33 02 F6 | 	mov	_var02, _var01
06c3c     00 F8 7F FF 
06c40     00 32 06 F5 | 	and	_var02, ##-1048576
06c44     00 C0 31 FF 
06c48     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06c4c     00 2A 06 56 |  if_ne	mov	result1, #0
06c50     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c54     08 30 86 F1 | 	sub	_var01, #8
06c58     18 35 02 F6 | 	mov	_var03, _var01
06c5c     00 F8 7F FF 
06c60     00 34 26 F5 | 	andn	_var03, ##-1048576
06c64     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06c68     08 00 90 CD |  if_b	jmp	#LR__0353
06c6c     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06c70     08 00 90 CD |  if_b	jmp	#LR__0354
06c74                 | LR__0353
06c74     00 2A 06 F6 | 	mov	result1, #0
06c78     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06c7c                 | LR__0354
06c7c     1A 33 02 F6 | 	mov	_var02, _var03
06c80     2E 33 62 F5 | 	xor	_var02, arg01
06c84     0F 32 0E F5 | 	and	_var02, #15 wz
06c88     00 2A 06 56 |  if_ne	mov	result1, #0
06c8c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c90     1A 37 02 F6 | 	mov	_var04, _var03
06c94     02 36 06 F1 | 	add	_var04, #2
06c98     1B 33 E2 FA | 	rdword	_var02, _var04
06c9c     7F 00 00 FF 
06ca0     C0 33 06 F5 | 	and	_var02, ##65472
06ca4     36 00 00 FF 
06ca8     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06cac     00 2A 06 56 |  if_ne	mov	result1, #0
06cb0     1A 2B 02 A6 |  if_e	mov	result1, _var03
06cb4                 | __system___gc_isvalidptr_ret
06cb4     2D 00 64 FD | 	ret
06cb8                 | 
06cb8                 | __system___gc_dofree
06cb8     1A 5A 05 F6 | 	mov	COUNT_, #26
06cbc     B0 00 A0 FD | 	call	#pushregs_
06cc0     2E 6B 02 F6 | 	mov	local01, arg01
06cc4     84 FB BF FD | 	call	#__system___gc_ptrs
06cc8     16 6D 02 F6 | 	mov	local02, result2
06ccc     15 6F 02 F6 | 	mov	local03, result1
06cd0     35 71 02 F6 | 	mov	local04, local01
06cd4     02 70 06 F1 | 	add	local04, #2
06cd8     36 00 80 FF 
06cdc     38 1F 59 FC | 	wrword	##27791, local04
06ce0     35 73 02 F6 | 	mov	local05, local01
06ce4     35 5D 02 F6 | 	mov	arg01, local01
06ce8     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06cec     15 75 02 F6 | 	mov	local06, result1
06cf0     5C 93 9F FE | 	loc	pa,	#(@LR__0356-@LR__0355)
06cf4     93 00 A0 FD | 	call	#FCACHE_LOAD_
06cf8                 | LR__0355
06cf8     04 72 06 F1 | 	add	local05, #4
06cfc     39 77 02 F6 | 	mov	local07, local05
06d00     3B 5F EA FA | 	rdword	arg02, local07 wz
06d04     37 5D 02 F6 | 	mov	arg01, local03
06d08     00 2A 06 A6 |  if_e	mov	result1, #0
06d0c     04 5E 66 50 |  if_ne	shl	arg02, #4
06d10     2F 5D 02 51 |  if_ne	add	arg01, arg02
06d14     2E 2B 02 56 |  if_ne	mov	result1, arg01
06d18     15 73 0A F6 | 	mov	local05, result1 wz
06d1c     28 00 90 AD |  if_e	jmp	#LR__0357
06d20     39 5D 02 F6 | 	mov	arg01, local05
06d24     00 78 06 F6 | 	mov	local08, #0
06d28     02 5C 06 F1 | 	add	arg01, #2
06d2c     2E 7B E2 FA | 	rdword	local09, arg01
06d30     36 00 00 FF 
06d34     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06d38     01 78 66 A6 |  if_e	neg	local08, #1
06d3c     3C 2B 02 F6 | 	mov	result1, local08
06d40     15 7D 0A F6 | 	mov	local10, result1 wz
06d44     B0 FF 9F AD |  if_e	jmp	#LR__0355
06d48                 | LR__0356
06d48                 | LR__0357
06d48     00 72 0E F2 | 	cmp	local05, #0 wz
06d4c     37 73 02 A6 |  if_e	mov	local05, local03
06d50     39 7F 02 F6 | 	mov	local11, local05
06d54     06 7E 06 F1 | 	add	local11, #6
06d58     35 81 02 F6 | 	mov	local12, local01
06d5c     3F 83 E2 FA | 	rdword	local13, local11
06d60     06 80 06 F1 | 	add	local12, #6
06d64     40 83 52 FC | 	wrword	local13, local12
06d68     35 5F 0A F6 | 	mov	arg02, local01 wz
06d6c     00 2A 06 A6 |  if_e	mov	result1, #0
06d70     37 5F 82 51 |  if_ne	sub	arg02, local03
06d74     04 5E 46 50 |  if_ne	shr	arg02, #4
06d78     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d7c     15 85 02 F6 | 	mov	local14, result1
06d80     3F 85 52 FC | 	wrword	local14, local11
06d84     37 73 0A F2 | 	cmp	local05, local03 wz
06d88     74 00 90 AD |  if_e	jmp	#LR__0360
06d8c     39 5D 02 F6 | 	mov	arg01, local05
06d90     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d94     35 2B 0A F2 | 	cmp	result1, local01 wz
06d98     64 00 90 5D |  if_ne	jmp	#LR__0359
06d9c     39 87 02 F6 | 	mov	local15, local05
06da0     43 89 E2 FA | 	rdword	local16, local15
06da4     35 8B 02 F6 | 	mov	local17, local01
06da8     45 7D E2 FA | 	rdword	local10, local17
06dac     3E 89 02 F1 | 	add	local16, local10
06db0     43 89 52 FC | 	wrword	local16, local15
06db4     38 01 58 FC | 	wrword	#0, local04
06db8     35 5D 02 F6 | 	mov	arg01, local01
06dbc     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06dc0     15 75 02 F6 | 	mov	local06, result1
06dc4     36 75 5A F2 | 	cmps	local06, local02 wcz
06dc8     24 00 90 3D |  if_ae	jmp	#LR__0358
06dcc     3A 8D 02 F6 | 	mov	local18, local06
06dd0     04 8C 06 F1 | 	add	local18, #4
06dd4     39 5F 0A F6 | 	mov	arg02, local05 wz
06dd8     00 2A 06 A6 |  if_e	mov	result1, #0
06ddc     37 5F 82 51 |  if_ne	sub	arg02, local03
06de0     04 5E 46 50 |  if_ne	shr	arg02, #4
06de4     2F 2B 02 56 |  if_ne	mov	result1, arg02
06de8     15 85 02 F6 | 	mov	local14, result1
06dec     46 85 52 FC | 	wrword	local14, local18
06df0                 | LR__0358
06df0     40 83 E2 FA | 	rdword	local13, local12
06df4     3F 83 52 FC | 	wrword	local13, local11
06df8     40 01 58 FC | 	wrword	#0, local12
06dfc     39 6B 02 F6 | 	mov	local01, local05
06e00                 | LR__0359
06e00                 | LR__0360
06e00     35 5D 02 F6 | 	mov	arg01, local01
06e04     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06e08     15 8F 0A F6 | 	mov	local19, result1 wz
06e0c     C4 00 90 AD |  if_e	jmp	#LR__0362
06e10     36 8F 5A F2 | 	cmps	local19, local02 wcz
06e14     BC 00 90 3D |  if_ae	jmp	#LR__0362
06e18     47 5D 02 F6 | 	mov	arg01, local19
06e1c     00 78 06 F6 | 	mov	local08, #0
06e20     02 5C 06 F1 | 	add	arg01, #2
06e24     2E 7B E2 FA | 	rdword	local09, arg01
06e28     36 00 00 FF 
06e2c     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06e30     01 78 66 A6 |  if_e	neg	local08, #1
06e34     3C 2B 0A F6 | 	mov	result1, local08 wz
06e38     98 00 90 AD |  if_e	jmp	#LR__0362
06e3c     35 73 02 F6 | 	mov	local05, local01
06e40     47 6B 02 F6 | 	mov	local01, local19
06e44     39 91 02 F6 | 	mov	local20, local05
06e48     48 93 E2 FA | 	rdword	local21, local20
06e4c     35 95 02 F6 | 	mov	local22, local01
06e50     4A 7D E2 FA | 	rdword	local10, local22
06e54     3E 93 02 F1 | 	add	local21, local10
06e58     48 93 52 FC | 	wrword	local21, local20
06e5c     35 97 02 F6 | 	mov	local23, local01
06e60     06 96 06 F1 | 	add	local23, #6
06e64     39 99 02 F6 | 	mov	local24, local05
06e68     4B 83 E2 FA | 	rdword	local13, local23
06e6c     06 98 06 F1 | 	add	local24, #6
06e70     4C 83 52 FC | 	wrword	local13, local24
06e74     35 9B 02 F6 | 	mov	local25, local01
06e78     02 9A 06 F1 | 	add	local25, #2
06e7c     4D 55 59 FC | 	wrword	#170, local25
06e80     4B 01 58 FC | 	wrword	#0, local23
06e84     35 83 02 F6 | 	mov	local13, local01
06e88     41 5D 02 F6 | 	mov	arg01, local13
06e8c     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06e90     15 7D 02 F6 | 	mov	local10, result1
06e94     3E 75 0A F6 | 	mov	local06, local10 wz
06e98     38 00 90 AD |  if_e	jmp	#LR__0361
06e9c     36 75 5A F2 | 	cmps	local06, local02 wcz
06ea0     30 00 90 3D |  if_ae	jmp	#LR__0361
06ea4     3A 9D 02 F6 | 	mov	local26, local06
06ea8     04 9C 06 F1 | 	add	local26, #4
06eac     37 83 02 F6 | 	mov	local13, local03
06eb0     39 7D 02 F6 | 	mov	local10, local05
06eb4     41 5D 02 F6 | 	mov	arg01, local13
06eb8     3E 5F 0A F6 | 	mov	arg02, local10 wz
06ebc     00 2A 06 A6 |  if_e	mov	result1, #0
06ec0     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06ec4     04 5E 46 50 |  if_ne	shr	arg02, #4
06ec8     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ecc     15 85 02 F6 | 	mov	local14, result1
06ed0     4E 85 52 FC | 	wrword	local14, local26
06ed4                 | LR__0361
06ed4                 | LR__0362
06ed4     3A 2B 02 F6 | 	mov	result1, local06
06ed8     AF F0 03 F6 | 	mov	ptra, fp
06edc     BF 00 A0 FD | 	call	#popregs_
06ee0                 | __system___gc_dofree_ret
06ee0     2D 00 64 FD | 	ret
06ee4                 | 
06ee4                 | __system___gc_docollect
06ee4     0C 5A 05 F6 | 	mov	COUNT_, #12
06ee8     B0 00 A0 FD | 	call	#pushregs_
06eec     5C F9 BF FD | 	call	#__system___gc_ptrs
06ef0     16 6B 02 F6 | 	mov	local01, result2
06ef4     15 6D 02 F6 | 	mov	local02, result1
06ef8     36 5D 02 F6 | 	mov	arg01, local02
06efc     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f00     15 6F 0A F6 | 	mov	local03, result1 wz
06f04     01 2A 62 FD | 	cogid	result1
06f08     15 71 02 F6 | 	mov	local04, result1
06f0c     2C 00 90 AD |  if_e	jmp	#LR__0364
06f10                 | LR__0363
06f10     35 6F 5A F2 | 	cmps	local03, local01 wcz
06f14     24 00 90 3D |  if_ae	jmp	#LR__0364
06f18     37 73 02 F6 | 	mov	local05, local03
06f1c     02 72 06 F1 | 	add	local05, #2
06f20     39 75 E2 FA | 	rdword	local06, local05
06f24     20 74 26 F5 | 	andn	local06, #32
06f28     39 75 52 FC | 	wrword	local06, local05
06f2c     37 5D 02 F6 | 	mov	arg01, local03
06f30     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f34     15 6F 0A F6 | 	mov	local03, result1 wz
06f38     D4 FF 9F 5D |  if_ne	jmp	#LR__0363
06f3c                 | LR__0364
06f3c     00 76 06 F6 | 	mov	local07, #0
06f40     00 5C 06 F6 | 	mov	arg01, #0
06f44     5C EF BF FD | 	call	#__system____topofstack
06f48     15 79 02 F6 | 	mov	local08, result1
06f4c     3B 5D 02 F6 | 	mov	arg01, local07
06f50     3C 5F 02 F6 | 	mov	arg02, local08
06f54     A0 00 B0 FD | 	call	#__system___gc_markhub
06f58     2C 01 B0 FD | 	call	#__system___gc_markcog
06f5c     36 5D 02 F6 | 	mov	arg01, local02
06f60     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f64     15 7B 0A F6 | 	mov	local09, result1 wz
06f68     10 00 90 5D |  if_ne	jmp	#LR__0365
06f6c     40 00 00 FF 
06f70     F5 5C 06 F6 | 	mov	arg01, ##@LR__0450
06f74     94 FB BF FD | 	call	#__system___gc_errmsg
06f78     70 00 90 FD | 	jmp	#LR__0371
06f7c                 | LR__0365
06f7c                 | LR__0366
06f7c     3D 6F 02 F6 | 	mov	local03, local09
06f80     37 5D 02 F6 | 	mov	arg01, local03
06f84     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f88     15 7B 02 F6 | 	mov	local09, result1
06f8c     37 7D 02 F6 | 	mov	local10, local03
06f90     02 7C 06 F1 | 	add	local10, #2
06f94     3E 7F E2 FA | 	rdword	local11, local10
06f98     20 7E CE F7 | 	test	local11, #32 wz
06f9c     3C 00 90 5D |  if_ne	jmp	#LR__0369
06fa0     3F 81 02 F6 | 	mov	local12, local11
06fa4     10 80 0E F5 | 	and	local12, #16 wz
06fa8     30 00 90 5D |  if_ne	jmp	#LR__0369
06fac     3F 77 02 F6 | 	mov	local07, local11
06fb0     0F 76 06 F5 | 	and	local07, #15
06fb4     3B 7F 02 F6 | 	mov	local11, local07
06fb8     38 7F 0A F2 | 	cmp	local11, local04 wz
06fbc     08 00 90 AD |  if_e	jmp	#LR__0367
06fc0     0E 7E 0E F2 | 	cmp	local11, #14 wz
06fc4     14 00 90 5D |  if_ne	jmp	#LR__0368
06fc8                 | LR__0367
06fc8     37 77 02 F6 | 	mov	local07, local03
06fcc     3B 5D 02 F6 | 	mov	arg01, local07
06fd0     E4 FC BF FD | 	call	#__system___gc_dofree
06fd4     15 81 02 F6 | 	mov	local12, result1
06fd8     40 7B 02 F6 | 	mov	local09, local12
06fdc                 | LR__0368
06fdc                 | LR__0369
06fdc     00 7A 0E F2 | 	cmp	local09, #0 wz
06fe0     08 00 90 AD |  if_e	jmp	#LR__0370
06fe4     35 7B 5A F2 | 	cmps	local09, local01 wcz
06fe8     90 FF 9F CD |  if_b	jmp	#LR__0366
06fec                 | LR__0370
06fec                 | LR__0371
06fec     AF F0 03 F6 | 	mov	ptra, fp
06ff0     BF 00 A0 FD | 	call	#popregs_
06ff4                 | __system___gc_docollect_ret
06ff4     2D 00 64 FD | 	ret
06ff8                 | 
06ff8                 | __system___gc_markhub
06ff8     0A 5A 05 F6 | 	mov	COUNT_, #10
06ffc     B0 00 A0 FD | 	call	#pushregs_
07000     2E 6B 02 F6 | 	mov	local01, arg01
07004     2F 6D 02 F6 | 	mov	local02, arg02
07008     40 F8 BF FD | 	call	#__system___gc_ptrs
0700c     15 6F 02 F6 | 	mov	local03, result1
07010     16 71 02 F6 | 	mov	local04, result2
07014                 | LR__0372
07014     36 6B 5A F2 | 	cmps	local01, local02 wcz
07018     60 00 90 3D |  if_ae	jmp	#LR__0373
0701c     35 61 02 FB | 	rdlong	arg03, local01
07020     04 6A 06 F1 | 	add	local01, #4
07024     37 5D 02 F6 | 	mov	arg01, local03
07028     38 5F 02 F6 | 	mov	arg02, local04
0702c     04 FC BF FD | 	call	#__system___gc_isvalidptr
07030     15 73 0A F6 | 	mov	local05, result1 wz
07034     DC FF 9F AD |  if_e	jmp	#LR__0372
07038     39 5D 02 F6 | 	mov	arg01, local05
0703c     00 74 06 F6 | 	mov	local06, #0
07040     02 5C 06 F1 | 	add	arg01, #2
07044     2E 77 E2 FA | 	rdword	local07, arg01
07048     36 00 00 FF 
0704c     8F 76 0E F2 | 	cmp	local07, ##27791 wz
07050     01 74 66 A6 |  if_e	neg	local06, #1
07054     3A 2B 02 F6 | 	mov	result1, local06
07058     15 79 0A F6 | 	mov	local08, result1 wz
0705c     B4 FF 9F 5D |  if_ne	jmp	#LR__0372
07060     39 7B 02 F6 | 	mov	local09, local05
07064     02 7A 06 F1 | 	add	local09, #2
07068     3D 7D E2 FA | 	rdword	local10, local09
0706c     0F 7C 26 F5 | 	andn	local10, #15
07070     2E 7C 46 F5 | 	or	local10, #46
07074     3D 7D 52 FC | 	wrword	local10, local09
07078     98 FF 9F FD | 	jmp	#LR__0372
0707c                 | LR__0373
0707c     AF F0 03 F6 | 	mov	ptra, fp
07080     BF 00 A0 FD | 	call	#popregs_
07084                 | __system___gc_markhub_ret
07084     2D 00 64 FD | 	ret
07088                 | 
07088                 | __system___gc_markcog
07088     06 5A 05 F6 | 	mov	COUNT_, #6
0708c     B0 00 A0 FD | 	call	#pushregs_
07090     B8 F7 BF FD | 	call	#__system___gc_ptrs
07094     15 6B 02 F6 | 	mov	local01, result1
07098     16 6D 02 F6 | 	mov	local02, result2
0709c     00 6E 06 F6 | 	mov	local03, #0
070a0                 | LR__0374
070a0     F0 71 06 F6 | 	mov	local04, #496
070a4     37 71 82 F1 | 	sub	local04, local03
070a8     F0 71 06 F1 | 	add	local04, #496
070ac                 | 	'.live	local04
070ac     00 70 96 F9 | 	alts	local04, #0
070b0     38 73 02 F6 | 	mov	local05, local04
070b4     36 5F 02 F6 | 	mov	arg02, local02
070b8     35 5D 02 F6 | 	mov	arg01, local01
070bc     39 61 02 F6 | 	mov	arg03, local05
070c0     70 FB BF FD | 	call	#__system___gc_isvalidptr
070c4     15 73 0A F6 | 	mov	local05, result1 wz
070c8     10 00 90 AD |  if_e	jmp	#LR__0375
070cc     02 72 06 F1 | 	add	local05, #2
070d0     39 75 E2 FA | 	rdword	local06, local05
070d4     20 74 46 F5 | 	or	local06, #32
070d8     39 75 52 FC | 	wrword	local06, local05
070dc                 | LR__0375
070dc     01 6E 06 F1 | 	add	local03, #1
070e0     F0 6F 5E F2 | 	cmps	local03, #496 wcz
070e4     B8 FF 9F CD |  if_b	jmp	#LR__0374
070e8     AF F0 03 F6 | 	mov	ptra, fp
070ec     BF 00 A0 FD | 	call	#popregs_
070f0                 | __system___gc_markcog_ret
070f0     2D 00 64 FD | 	ret
070f4                 | 
070f4                 | __system__write
070f4     03 5A 05 F6 | 	mov	COUNT_, #3
070f8     B0 00 A0 FD | 	call	#pushregs_
070fc     2E 6B 02 F6 | 	mov	local01, arg01
07100     2F 6D 02 F6 | 	mov	local02, arg02
07104     30 6F 02 F6 | 	mov	local03, arg03
07108     0A 6A 1E F2 | 	cmp	local01, #10 wcz
0710c     1C 00 90 CD |  if_b	jmp	#LR__0376
07110     01 00 00 FF 
07114     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07118     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0711c     01 00 00 FF 
07120     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07124     01 2A 66 F6 | 	neg	result1, #1
07128     28 00 90 FD | 	jmp	#LR__0377
0712c                 | LR__0376
0712c     35 5D 02 F6 | 	mov	arg01, local01
07130     01 5C 66 F0 | 	shl	arg01, #1
07134     35 5D 02 F1 | 	add	arg01, local01
07138     04 5C 66 F0 | 	shl	arg01, #4
0713c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07140     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07144     36 5F 02 F6 | 	mov	arg02, local02
07148     37 61 02 F6 | 	mov	arg03, local03
0714c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07150     4C 09 B0 FD | 	call	#__system___vfswrite
07154                 | LR__0377
07154     AF F0 03 F6 | 	mov	ptra, fp
07158     BF 00 A0 FD | 	call	#popregs_
0715c                 | __system__write_ret
0715c     2D 00 64 FD | 	ret
07160                 | 
07160                 | __system__read
07160     03 5A 05 F6 | 	mov	COUNT_, #3
07164     B0 00 A0 FD | 	call	#pushregs_
07168     2E 6B 02 F6 | 	mov	local01, arg01
0716c     2F 6D 02 F6 | 	mov	local02, arg02
07170     30 6F 02 F6 | 	mov	local03, arg03
07174     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07178     1C 00 90 CD |  if_b	jmp	#LR__0378
0717c     01 00 00 FF 
07180     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07184     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07188     01 00 00 FF 
0718c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07190     01 2A 66 F6 | 	neg	result1, #1
07194     28 00 90 FD | 	jmp	#LR__0379
07198                 | LR__0378
07198     35 5D 02 F6 | 	mov	arg01, local01
0719c     01 5C 66 F0 | 	shl	arg01, #1
071a0     35 5D 02 F1 | 	add	arg01, local01
071a4     04 5C 66 F0 | 	shl	arg01, #4
071a8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071ac     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071b0     36 5F 02 F6 | 	mov	arg02, local02
071b4     37 61 02 F6 | 	mov	arg03, local03
071b8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071bc     A4 0A B0 FD | 	call	#__system___vfsread
071c0                 | LR__0379
071c0     AF F0 03 F6 | 	mov	ptra, fp
071c4     BF 00 A0 FD | 	call	#popregs_
071c8                 | __system__read_ret
071c8     2D 00 64 FD | 	ret
071cc                 | 
071cc                 | __system__close
071cc     01 5A 05 F6 | 	mov	COUNT_, #1
071d0     B0 00 A0 FD | 	call	#pushregs_
071d4     2E 6B 02 F6 | 	mov	local01, arg01
071d8     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071dc     1C 00 90 CD |  if_b	jmp	#LR__0380
071e0     01 00 00 FF 
071e4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071e8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071ec     01 00 00 FF 
071f0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071f4     01 2A 66 F6 | 	neg	result1, #1
071f8     20 00 90 FD | 	jmp	#LR__0381
071fc                 | LR__0380
071fc     35 5D 02 F6 | 	mov	arg01, local01
07200     01 5C 66 F0 | 	shl	arg01, #1
07204     35 5D 02 F1 | 	add	arg01, local01
07208     04 5C 66 F0 | 	shl	arg01, #4
0720c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07210     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07214     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07218     80 03 B0 FD | 	call	#__system___closeraw
0721c                 | LR__0381
0721c     AF F0 03 F6 | 	mov	ptra, fp
07220     BF 00 A0 FD | 	call	#popregs_
07224                 | __system__close_ret
07224     2D 00 64 FD | 	ret
07228                 | 
07228                 | __system__lseek
07228     09 5A 05 F6 | 	mov	COUNT_, #9
0722c     B0 00 A0 FD | 	call	#pushregs_
07230     2E 6B 02 F6 | 	mov	local01, arg01
07234     2F 6D 02 F6 | 	mov	local02, arg02
07238     30 6F 02 F6 | 	mov	local03, arg03
0723c     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07240     1C 00 90 CD |  if_b	jmp	#LR__0382
07244     01 00 00 FF 
07248     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0724c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07250     01 00 00 FF 
07254     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07258     01 2A 66 F6 | 	neg	result1, #1
0725c     D8 00 90 FD | 	jmp	#LR__0386
07260                 | LR__0382
07260     35 71 02 F6 | 	mov	local04, local01
07264     01 70 66 F0 | 	shl	local04, #1
07268     35 71 02 F1 | 	add	local04, local01
0726c     04 70 66 F0 | 	shl	local04, #4
07270     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07274     0A 71 02 F1 | 	add	local04, ptr___system__dat__
07278     2C 70 06 F1 | 	add	local04, #44
0727c     38 73 0A FB | 	rdlong	local05, local04 wz
07280     2C 70 86 F1 | 	sub	local04, #44
07284     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07288     1C 00 90 5D |  if_ne	jmp	#LR__0383
0728c     01 00 00 FF 
07290     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07294     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07298     01 00 00 FF 
0729c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
072a0     01 2A 66 F6 | 	neg	result1, #1
072a4     90 00 90 FD | 	jmp	#LR__0386
072a8                 | LR__0383
072a8     08 70 06 F1 | 	add	local04, #8
072ac     38 73 02 FB | 	rdlong	local05, local04
072b0     08 70 86 F1 | 	sub	local04, #8
072b4     40 72 CE F7 | 	test	local05, #64 wz
072b8     14 00 90 AD |  if_e	jmp	#LR__0384
072bc     08 70 06 F1 | 	add	local04, #8
072c0     38 73 02 FB | 	rdlong	local05, local04
072c4     80 72 46 F5 | 	or	local05, #128
072c8     38 73 62 FC | 	wrlong	local05, local04
072cc     08 70 86 F1 | 	sub	local04, #8
072d0                 | LR__0384
072d0     2C 70 06 F1 | 	add	local04, #44
072d4     38 73 02 FB | 	rdlong	local05, local04
072d8     2C 70 86 F1 | 	sub	local04, #44
072dc     39 75 02 FB | 	rdlong	local06, local05
072e0     04 72 06 F1 | 	add	local05, #4
072e4     39 77 02 FB | 	rdlong	local07, local05
072e8     38 5D 02 F6 | 	mov	arg01, local04
072ec     36 5F 02 F6 | 	mov	arg02, local02
072f0     37 61 02 F6 | 	mov	arg03, local03
072f4     07 79 02 F6 | 	mov	local08, objptr
072f8     3A 0F 02 F6 | 	mov	objptr, local06
072fc     2D 76 62 FD | 	call	local07
07300     3C 0F 02 F6 | 	mov	objptr, local08
07304     15 7B 02 F6 | 	mov	local09, result1
07308     00 7A 5E F2 | 	cmps	local09, #0 wcz
0730c     24 00 90 3D |  if_ae	jmp	#LR__0385
07310     3D 5D 6A F6 | 	neg	arg01, local09 wz
07314     01 00 00 FF 
07318     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0731c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07320     01 00 00 FF 
07324     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07328     01 2A 66 56 |  if_ne	neg	result1, #1
0732c     00 2A 06 A6 |  if_e	mov	result1, #0
07330     04 00 90 FD | 	jmp	#LR__0386
07334                 | LR__0385
07334     3D 2B 02 F6 | 	mov	result1, local09
07338                 | LR__0386
07338     AF F0 03 F6 | 	mov	ptra, fp
0733c     BF 00 A0 FD | 	call	#popregs_
07340                 | __system__lseek_ret
07340     2D 00 64 FD | 	ret
07344                 | 
07344                 | __system____getftab
07344     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
07348     00 2A 06 36 |  if_ae	mov	result1, #0
0734c     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07350     2E 2B 02 F6 | 	mov	result1, arg01
07354     01 2A 66 F0 | 	shl	result1, #1
07358     2E 2B 02 F1 | 	add	result1, arg01
0735c     04 2A 66 F0 | 	shl	result1, #4
07360     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07364     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
07368     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
0736c                 | __system____getftab_ret
0736c     2D 00 64 FD | 	ret
07370                 | 
07370                 | __system___strrev
07370     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
07374     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07378     2E 33 02 F6 | 	mov	_var02, arg01
0737c     8C 8C 9F FE | 	loc	pa,	#(@LR__0388-@LR__0387)
07380     93 00 A0 FD | 	call	#FCACHE_LOAD_
07384                 | LR__0387
07384     19 31 CA FA | 	rdbyte	_var01, _var02 wz
07388     01 32 06 51 |  if_ne	add	_var02, #1
0738c     F4 FF 9F 5D |  if_ne	jmp	#LR__0387
07390                 | LR__0388
07390     01 32 86 F1 | 	sub	_var02, #1
07394                 | LR__0389
07394     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07398     1C 00 90 ED |  if_be	jmp	#LR__0390
0739c     2E 35 C2 FA | 	rdbyte	_var03, arg01
073a0     19 37 C2 FA | 	rdbyte	_var04, _var02
073a4     2E 37 42 FC | 	wrbyte	_var04, arg01
073a8     19 35 42 FC | 	wrbyte	_var03, _var02
073ac     01 5C 06 F1 | 	add	arg01, #1
073b0     01 32 86 F1 | 	sub	_var02, #1
073b4     DC FF 9F FD | 	jmp	#LR__0389
073b8                 | LR__0390
073b8                 | __system___strrev_ret
073b8     2D 00 64 FD | 	ret
073bc                 | 
073bc                 | __system___fmtpad
073bc     0C 5A 05 F6 | 	mov	COUNT_, #12
073c0     B0 00 A0 FD | 	call	#pushregs_
073c4     2E 6B 02 F6 | 	mov	local01, arg01
073c8     2F 6D 02 F6 | 	mov	local02, arg02
073cc     31 6F 02 F6 | 	mov	local03, arg04
073d0     36 71 EA F8 | 	getbyte	local04, local02, #1
073d4     16 6C 46 F0 | 	shr	local02, #22
073d8     03 6C 0E F5 | 	and	local02, #3 wz
073dc     00 72 06 F6 | 	mov	local05, #0
073e0     01 6C 06 A6 |  if_e	mov	local02, #1
073e4     37 6D CA F7 | 	test	local02, local03 wz
073e8     00 2A 06 A6 |  if_e	mov	result1, #0
073ec     80 00 90 AD |  if_e	jmp	#LR__0394
073f0     30 71 82 F1 | 	sub	local04, arg03
073f4     38 75 02 F6 | 	mov	local06, local04
073f8     00 74 5E F2 | 	cmps	local06, #0 wcz
073fc     00 2A 06 E6 |  if_be	mov	result1, #0
07400     6C 00 90 ED |  if_be	jmp	#LR__0394
07404     03 6C 0E F2 | 	cmp	local02, #3 wz
07408     18 00 90 5D |  if_ne	jmp	#LR__0391
0740c     01 6E 0E F2 | 	cmp	local03, #1 wz
07410     6E 76 62 FD | 	wrz	local07
07414     3B 75 02 F1 | 	add	local06, local07
07418     3A 75 52 F6 | 	abs	local06, local06 wc
0741c     01 74 46 F0 | 	shr	local06, #1
07420     3A 75 62 C6 |  if_b	neg	local06, local06
07424                 | LR__0391
07424     00 74 5E F2 | 	cmps	local06, #0 wcz
07428     40 00 90 ED |  if_be	jmp	#LR__0393
0742c     3A 79 02 F6 | 	mov	local08, local06
07430                 | LR__0392
07430     35 7B 02 F6 | 	mov	local09, local01
07434     3D 77 02 FB | 	rdlong	local07, local09
07438     04 7A 06 F1 | 	add	local09, #4
0743c     3D 7D 02 FB | 	rdlong	local10, local09
07440     20 5C 06 F6 | 	mov	arg01, #32
07444     07 7F 02 F6 | 	mov	local11, objptr
07448     3B 0F 02 F6 | 	mov	objptr, local07
0744c     2D 7C 62 FD | 	call	local10
07450     3F 0F 02 F6 | 	mov	objptr, local11
07454     15 81 02 F6 | 	mov	local12, result1
07458     00 80 5E F2 | 	cmps	local12, #0 wcz
0745c     40 2B 02 C6 |  if_b	mov	result1, local12
07460     0C 00 90 CD |  if_b	jmp	#LR__0394
07464     40 73 02 F1 | 	add	local05, local12
07468     F1 79 6E FB | 	djnz	local08, #LR__0392
0746c                 | LR__0393
0746c     39 2B 02 F6 | 	mov	result1, local05
07470                 | LR__0394
07470     AF F0 03 F6 | 	mov	ptra, fp
07474     BF 00 A0 FD | 	call	#popregs_
07478                 | __system___fmtpad_ret
07478     2D 00 64 FD | 	ret
0747c                 | 
0747c                 | __system___uitoa
0747c     09 5A 05 F6 | 	mov	COUNT_, #9
07480     B0 00 A0 FD | 	call	#pushregs_
07484     2E 6B 02 F6 | 	mov	local01, arg01
07488     2F 6D 02 F6 | 	mov	local02, arg02
0748c     30 6F 02 F6 | 	mov	local03, arg03
07490     31 71 02 F6 | 	mov	local04, arg04
07494     32 73 0A F6 | 	mov	local05, arg05 wz
07498     35 75 02 F6 | 	mov	local06, local01
0749c     00 76 06 F6 | 	mov	local07, #0
074a0     37 78 06 56 |  if_ne	mov	local08, #55
074a4     57 78 06 A6 |  if_e	mov	local08, #87
074a8                 | LR__0395
074a8     36 0B 03 F6 | 	mov	muldiva_, local02
074ac     37 0D 03 F6 | 	mov	muldivb_, local03
074b0     CC 00 A0 FD | 	call	#unsdivide_
074b4     85 7B 02 F6 | 	mov	local09, muldiva_
074b8     0A 7A 1E F2 | 	cmp	local09, #10 wcz
074bc     30 7A 06 C1 |  if_b	add	local09, #48
074c0     3C 7B 02 31 |  if_ae	add	local09, local08
074c4     3A 7B 42 FC | 	wrbyte	local09, local06
074c8     36 0B 03 F6 | 	mov	muldiva_, local02
074cc     37 0D 03 F6 | 	mov	muldivb_, local03
074d0     01 74 06 F1 | 	add	local06, #1
074d4     CC 00 A0 FD | 	call	#unsdivide_
074d8     86 6D 0A F6 | 	mov	local02, muldivb_ wz
074dc     01 76 06 F1 | 	add	local07, #1
074e0     C4 FF 9F 5D |  if_ne	jmp	#LR__0395
074e4     38 77 1A F2 | 	cmp	local07, local04 wcz
074e8     BC FF 9F CD |  if_b	jmp	#LR__0395
074ec     3A 01 48 FC | 	wrbyte	#0, local06
074f0     35 5D 02 F6 | 	mov	arg01, local01
074f4     78 FE BF FD | 	call	#__system___strrev
074f8     3B 2B 02 F6 | 	mov	result1, local07
074fc     AF F0 03 F6 | 	mov	ptra, fp
07500     BF 00 A0 FD | 	call	#popregs_
07504                 | __system___uitoa_ret
07504     2D 00 64 FD | 	ret
07508                 | 
07508                 | __system___gettxfunc
07508     03 5A 05 F6 | 	mov	COUNT_, #3
0750c     B0 00 A0 FD | 	call	#pushregs_
07510     30 FE BF FD | 	call	#__system____getftab
07514     15 6B 0A F6 | 	mov	local01, result1 wz
07518     14 00 90 AD |  if_e	jmp	#LR__0396
0751c     08 6A 06 F1 | 	add	local01, #8
07520     35 6D 02 FB | 	rdlong	local02, local01
07524     08 6A 86 F1 | 	sub	local01, #8
07528     36 6F 0A F6 | 	mov	local03, local02 wz
0752c     08 00 90 5D |  if_ne	jmp	#LR__0397
07530                 | LR__0396
07530     00 2A 06 F6 | 	mov	result1, #0
07534     0C 00 90 FD | 	jmp	#LR__0398
07538                 | LR__0397
07538     35 5D 02 F6 | 	mov	arg01, local01
0753c     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07540     88 E9 BF FD | 	call	#__system___make_methodptr
07544                 | LR__0398
07544     AF F0 03 F6 | 	mov	ptra, fp
07548     BF 00 A0 FD | 	call	#popregs_
0754c                 | __system___gettxfunc_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | __system___getiolock_0145
07550     03 5A 05 F6 | 	mov	COUNT_, #3
07554     B0 00 A0 FD | 	call	#pushregs_
07558     E8 FD BF FD | 	call	#__system____getftab
0755c     15 6B 0A F6 | 	mov	local01, result1 wz
07560     14 00 90 AD |  if_e	jmp	#LR__0399
07564     08 6A 06 F1 | 	add	local01, #8
07568     35 6D 02 FB | 	rdlong	local02, local01
0756c     08 6A 86 F1 | 	sub	local01, #8
07570     36 6F 0A F6 | 	mov	local03, local02 wz
07574     10 00 90 5D |  if_ne	jmp	#LR__0400
07578                 | LR__0399
07578     18 14 06 F1 | 	add	ptr___system__dat__, #24
0757c     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07580     18 14 86 F1 | 	sub	ptr___system__dat__, #24
07584     08 00 90 FD | 	jmp	#LR__0401
07588                 | LR__0400
07588     0C 6A 06 F1 | 	add	local01, #12
0758c     35 2B 02 F6 | 	mov	result1, local01
07590                 | LR__0401
07590     AF F0 03 F6 | 	mov	ptra, fp
07594     BF 00 A0 FD | 	call	#popregs_
07598                 | __system___getiolock_0145_ret
07598     2D 00 64 FD | 	ret
0759c                 | 
0759c                 | __system___closeraw
0759c     06 5A 05 F6 | 	mov	COUNT_, #6
075a0     B0 00 A0 FD | 	call	#pushregs_
075a4     2E 6B 02 F6 | 	mov	local01, arg01
075a8     00 6C 06 F6 | 	mov	local02, #0
075ac     08 6A 06 F1 | 	add	local01, #8
075b0     35 6F 0A FB | 	rdlong	local03, local01 wz
075b4     08 6A 86 F1 | 	sub	local01, #8
075b8     1C 00 90 5D |  if_ne	jmp	#LR__0402
075bc     01 00 00 FF 
075c0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
075c4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075c8     01 00 00 FF 
075cc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
075d0     01 2A 66 F6 | 	neg	result1, #1
075d4     90 00 90 FD | 	jmp	#LR__0405
075d8                 | LR__0402
075d8     28 6A 06 F1 | 	add	local01, #40
075dc     35 6F 0A FB | 	rdlong	local03, local01 wz
075e0     28 6A 86 F1 | 	sub	local01, #40
075e4     2C 00 90 AD |  if_e	jmp	#LR__0403
075e8     28 6A 06 F1 | 	add	local01, #40
075ec     35 6F 02 FB | 	rdlong	local03, local01
075f0     28 6A 86 F1 | 	sub	local01, #40
075f4     37 71 02 FB | 	rdlong	local04, local03
075f8     04 6E 06 F1 | 	add	local03, #4
075fc     37 73 02 FB | 	rdlong	local05, local03
07600     35 5D 02 F6 | 	mov	arg01, local01
07604     07 75 02 F6 | 	mov	local06, objptr
07608     38 0F 02 F6 | 	mov	objptr, local04
0760c     2D 72 62 FD | 	call	local05
07610     3A 0F 02 F6 | 	mov	objptr, local06
07614                 | LR__0403
07614     20 6A 06 F1 | 	add	local01, #32
07618     35 6F 0A FB | 	rdlong	local03, local01 wz
0761c     20 6A 86 F1 | 	sub	local01, #32
07620     30 00 90 AD |  if_e	jmp	#LR__0404
07624     20 6A 06 F1 | 	add	local01, #32
07628     35 6F 02 FB | 	rdlong	local03, local01
0762c     20 6A 86 F1 | 	sub	local01, #32
07630     37 71 02 FB | 	rdlong	local04, local03
07634     04 6E 06 F1 | 	add	local03, #4
07638     37 73 02 FB | 	rdlong	local05, local03
0763c     35 5D 02 F6 | 	mov	arg01, local01
07640     07 75 02 F6 | 	mov	local06, objptr
07644     38 0F 02 F6 | 	mov	objptr, local04
07648     2D 72 62 FD | 	call	local05
0764c     3A 0F 02 F6 | 	mov	objptr, local06
07650     15 6D 02 F6 | 	mov	local02, result1
07654                 | LR__0404
07654     35 5D 02 F6 | 	mov	arg01, local01
07658     00 5E 06 F6 | 	mov	arg02, #0
0765c     30 60 06 F6 | 	mov	arg03, #48
07660     A0 00 A0 FD | 	call	#\builtin_bytefill_
07664     36 2B 02 F6 | 	mov	result1, local02
07668                 | LR__0405
07668     AF F0 03 F6 | 	mov	ptra, fp
0766c     BF 00 A0 FD | 	call	#popregs_
07670                 | __system___closeraw_ret
07670     2D 00 64 FD | 	ret
07674                 | 
07674                 | __system____default_getc
07674     0C 5A 05 F6 | 	mov	COUNT_, #12
07678     B0 00 A0 FD | 	call	#pushregs_
0767c     2E 6B 02 F6 | 	mov	local01, arg01
07680     35 6D 02 FB | 	rdlong	local02, local01
07684     08 6C 06 F1 | 	add	local02, #8
07688     36 6F 02 FB | 	rdlong	local03, local02
0768c     08 6C 86 F1 | 	sub	local02, #8
07690     02 6E CE F7 | 	test	local03, #2 wz
07694     08 00 90 AD |  if_e	jmp	#LR__0406
07698     35 5D 02 F6 | 	mov	arg01, local01
0769c     FC 01 B0 FD | 	call	#__system____default_flush
076a0                 | LR__0406
076a0     08 6C 06 F1 | 	add	local02, #8
076a4     36 6F 02 FB | 	rdlong	local03, local02
076a8     01 6E 46 F5 | 	or	local03, #1
076ac     36 6F 62 FC | 	wrlong	local03, local02
076b0     08 6C 86 F1 | 	sub	local02, #8
076b4     36 71 0A FB | 	rdlong	local04, local02 wz
076b8     7C 00 90 5D |  if_ne	jmp	#LR__0408
076bc     35 5D 02 F6 | 	mov	arg01, local01
076c0     2E 73 02 FB | 	rdlong	local05, arg01
076c4     0C 72 06 F1 | 	add	local05, #12
076c8     39 5F 02 F6 | 	mov	arg02, local05
076cc     0C 72 86 F1 | 	sub	local05, #12
076d0     10 5C 06 F1 | 	add	arg01, #16
076d4     2E 75 02 FB | 	rdlong	local06, arg01
076d8     10 5C 86 F1 | 	sub	arg01, #16
076dc     3A 77 02 FB | 	rdlong	local07, local06
076e0     04 74 06 F1 | 	add	local06, #4
076e4     3A 79 02 FB | 	rdlong	local08, local06
076e8     0A 60 C6 F9 | 	decod	arg03, #10
076ec     07 7B 02 F6 | 	mov	local09, objptr
076f0     3B 0F 02 F6 | 	mov	objptr, local07
076f4     2D 78 62 FD | 	call	local08
076f8     3D 0F 02 F6 | 	mov	objptr, local09
076fc     15 7D 02 F6 | 	mov	local10, result1
07700     00 7C 5E F2 | 	cmps	local10, #0 wcz
07704     01 2A 66 C6 |  if_b	neg	result1, #1
07708     28 00 90 CD |  if_b	jmp	#LR__0407
0770c     39 7D 62 FC | 	wrlong	local10, local05
07710     0C 72 06 F1 | 	add	local05, #12
07714     39 7F 02 F6 | 	mov	local11, local05
07718     08 72 86 F1 | 	sub	local05, #8
0771c     39 7F 62 FC | 	wrlong	local11, local05
07720     04 72 06 F1 | 	add	local05, #4
07724     39 75 02 FB | 	rdlong	local06, local05
07728     01 74 46 F5 | 	or	local06, #1
0772c     39 75 62 FC | 	wrlong	local06, local05
07730     3E 2B 02 F6 | 	mov	result1, local10
07734                 | LR__0407
07734     15 71 02 F6 | 	mov	local04, result1
07738                 | LR__0408
07738     00 70 5E F2 | 	cmps	local04, #0 wcz
0773c     01 2A 66 E6 |  if_be	neg	result1, #1
07740     1C 00 90 ED |  if_be	jmp	#LR__0409
07744     01 70 86 F1 | 	sub	local04, #1
07748     36 71 62 FC | 	wrlong	local04, local02
0774c     04 6C 06 F1 | 	add	local02, #4
07750     36 81 02 FB | 	rdlong	local12, local02
07754     40 2B C2 FA | 	rdbyte	result1, local12
07758     01 80 06 F1 | 	add	local12, #1
0775c     36 81 62 FC | 	wrlong	local12, local02
07760                 | LR__0409
07760     AF F0 03 F6 | 	mov	ptra, fp
07764     BF 00 A0 FD | 	call	#popregs_
07768                 | __system____default_getc_ret
07768     2D 00 64 FD | 	ret
0776c                 | 
0776c                 | __system____default_putc
0776c     06 5A 05 F6 | 	mov	COUNT_, #6
07770     B0 00 A0 FD | 	call	#pushregs_
07774     2E 6B 02 F6 | 	mov	local01, arg01
07778     2F 6D 02 F6 | 	mov	local02, arg02
0777c     36 6F 02 FB | 	rdlong	local03, local02
07780     08 6E 06 F1 | 	add	local03, #8
07784     37 71 02 FB | 	rdlong	local04, local03
07788     08 6E 86 F1 | 	sub	local03, #8
0778c     01 70 CE F7 | 	test	local04, #1 wz
07790     08 00 90 AD |  if_e	jmp	#LR__0410
07794     36 5D 02 F6 | 	mov	arg01, local02
07798     00 01 B0 FD | 	call	#__system____default_flush
0779c                 | LR__0410
0779c     08 6E 06 F1 | 	add	local03, #8
077a0     37 71 02 FB | 	rdlong	local04, local03
077a4     02 70 46 F5 | 	or	local04, #2
077a8     37 71 62 FC | 	wrlong	local04, local03
077ac     08 6E 86 F1 | 	sub	local03, #8
077b0     37 73 02 FB | 	rdlong	local05, local03
077b4     39 75 02 F6 | 	mov	local06, local05
077b8     0C 6E 06 F1 | 	add	local03, #12
077bc     37 75 02 F1 | 	add	local06, local03
077c0     3A 6B 42 FC | 	wrbyte	local01, local06
077c4     FF 6A 06 F5 | 	and	local01, #255
077c8     01 72 06 F1 | 	add	local05, #1
077cc     0C 6E 86 F1 | 	sub	local03, #12
077d0     37 73 62 FC | 	wrlong	local05, local03
077d4     02 00 00 FF 
077d8     00 72 0E F2 | 	cmp	local05, ##1024 wz
077dc     10 00 90 5D |  if_ne	jmp	#LR__0411
077e0     36 5D 02 F6 | 	mov	arg01, local02
077e4     B4 00 B0 FD | 	call	#__system____default_flush
077e8     00 2A 0E F2 | 	cmp	result1, #0 wz
077ec     01 6A 66 56 |  if_ne	neg	local01, #1
077f0                 | LR__0411
077f0     35 2B 02 F6 | 	mov	result1, local01
077f4     AF F0 03 F6 | 	mov	ptra, fp
077f8     BF 00 A0 FD | 	call	#popregs_
077fc                 | __system____default_putc_ret
077fc     2D 00 64 FD | 	ret
07800                 | 
07800                 | __system____default_putc_terminal
07800     06 5A 05 F6 | 	mov	COUNT_, #6
07804     B0 00 A0 FD | 	call	#pushregs_
07808     2E 6B 02 F6 | 	mov	local01, arg01
0780c     2F 6D 02 F6 | 	mov	local02, arg02
07810     36 6F 02 FB | 	rdlong	local03, local02
07814     08 6E 06 F1 | 	add	local03, #8
07818     37 71 02 FB | 	rdlong	local04, local03
0781c     08 6E 86 F1 | 	sub	local03, #8
07820     01 70 CE F7 | 	test	local04, #1 wz
07824     08 00 90 AD |  if_e	jmp	#LR__0412
07828     36 5D 02 F6 | 	mov	arg01, local02
0782c     6C 00 B0 FD | 	call	#__system____default_flush
07830                 | LR__0412
07830     08 6E 06 F1 | 	add	local03, #8
07834     37 71 02 FB | 	rdlong	local04, local03
07838     02 70 46 F5 | 	or	local04, #2
0783c     37 71 62 FC | 	wrlong	local04, local03
07840     08 6E 86 F1 | 	sub	local03, #8
07844     37 73 02 FB | 	rdlong	local05, local03
07848     39 75 02 F6 | 	mov	local06, local05
0784c     0C 6E 06 F1 | 	add	local03, #12
07850     37 75 02 F1 | 	add	local06, local03
07854     3A 6B 42 FC | 	wrbyte	local01, local06
07858     FF 6A 06 F5 | 	and	local01, #255
0785c     0C 6E 86 F1 | 	sub	local03, #12
07860     01 72 06 F1 | 	add	local05, #1
07864     37 73 62 FC | 	wrlong	local05, local03
07868     0A 6A 0E F2 | 	cmp	local01, #10 wz
0786c     0C 00 90 AD |  if_e	jmp	#LR__0413
07870     02 00 00 FF 
07874     00 72 0E F2 | 	cmp	local05, ##1024 wz
07878     10 00 90 5D |  if_ne	jmp	#LR__0414
0787c                 | LR__0413
0787c     36 5D 02 F6 | 	mov	arg01, local02
07880     18 00 B0 FD | 	call	#__system____default_flush
07884     00 2A 0E F2 | 	cmp	result1, #0 wz
07888     01 6A 66 56 |  if_ne	neg	local01, #1
0788c                 | LR__0414
0788c     35 2B 02 F6 | 	mov	result1, local01
07890     AF F0 03 F6 | 	mov	ptra, fp
07894     BF 00 A0 FD | 	call	#popregs_
07898                 | __system____default_putc_terminal_ret
07898     2D 00 64 FD | 	ret
0789c                 | 
0789c                 | __system____default_flush
0789c     0F 5A 05 F6 | 	mov	COUNT_, #15
078a0     B0 00 A0 FD | 	call	#pushregs_
078a4     2E 6B 02 F6 | 	mov	local01, arg01
078a8     35 6D 02 FB | 	rdlong	local02, local01
078ac     36 6F 02 FB | 	rdlong	local03, local02
078b0     08 6C 06 F1 | 	add	local02, #8
078b4     36 71 02 FB | 	rdlong	local04, local02
078b8     08 6C 86 F1 | 	sub	local02, #8
078bc     02 70 CE F7 | 	test	local04, #2 wz
078c0     B8 00 90 AD |  if_e	jmp	#LR__0417
078c4     00 6E 5E F2 | 	cmps	local03, #0 wcz
078c8     30 01 90 ED |  if_be	jmp	#LR__0419
078cc     08 6A 06 F1 | 	add	local01, #8
078d0     35 71 02 FB | 	rdlong	local04, local01
078d4     08 6A 86 F1 | 	sub	local01, #8
078d8     40 70 CE F7 | 	test	local04, #64 wz
078dc     5C 00 90 AD |  if_e	jmp	#LR__0416
078e0     08 6A 06 F1 | 	add	local01, #8
078e4     35 71 02 FB | 	rdlong	local04, local01
078e8     08 6A 86 F1 | 	sub	local01, #8
078ec     80 70 CE F7 | 	test	local04, #128 wz
078f0     48 00 90 AD |  if_e	jmp	#LR__0415
078f4     2C 6A 06 F1 | 	add	local01, #44
078f8     35 71 02 FB | 	rdlong	local04, local01
078fc     2C 6A 86 F1 | 	sub	local01, #44
07900     38 73 02 FB | 	rdlong	local05, local04
07904     04 70 06 F1 | 	add	local04, #4
07908     38 75 02 FB | 	rdlong	local06, local04
0790c     35 5D 02 F6 | 	mov	arg01, local01
07910     00 5E 06 F6 | 	mov	arg02, #0
07914     02 60 06 F6 | 	mov	arg03, #2
07918     07 77 02 F6 | 	mov	local07, objptr
0791c     39 0F 02 F6 | 	mov	objptr, local05
07920     2D 74 62 FD | 	call	local06
07924     3B 0F 02 F6 | 	mov	objptr, local07
07928     08 6A 06 F1 | 	add	local01, #8
0792c     35 71 02 FB | 	rdlong	local04, local01
07930     80 70 26 F5 | 	andn	local04, #128
07934     35 71 62 FC | 	wrlong	local04, local01
07938     08 6A 86 F1 | 	sub	local01, #8
0793c                 | LR__0415
0793c                 | LR__0416
0793c     0C 6C 06 F1 | 	add	local02, #12
07940     36 5F 02 F6 | 	mov	arg02, local02
07944     0C 6C 86 F1 | 	sub	local02, #12
07948     14 6A 06 F1 | 	add	local01, #20
0794c     35 71 02 FB | 	rdlong	local04, local01
07950     14 6A 86 F1 | 	sub	local01, #20
07954     38 73 02 FB | 	rdlong	local05, local04
07958     04 70 06 F1 | 	add	local04, #4
0795c     38 75 02 FB | 	rdlong	local06, local04
07960     35 5D 02 F6 | 	mov	arg01, local01
07964     37 61 02 F6 | 	mov	arg03, local03
07968     07 77 02 F6 | 	mov	local07, objptr
0796c     39 0F 02 F6 | 	mov	objptr, local05
07970     2D 74 62 FD | 	call	local06
07974     3B 0F 02 F6 | 	mov	objptr, local07
07978     80 00 90 FD | 	jmp	#LR__0419
0797c                 | LR__0417
0797c     08 6C 06 F1 | 	add	local02, #8
07980     36 71 02 FB | 	rdlong	local04, local02
07984     08 6C 86 F1 | 	sub	local02, #8
07988     01 70 CE F7 | 	test	local04, #1 wz
0798c     6C 00 90 AD |  if_e	jmp	#LR__0418
07990     00 6E 0E F2 | 	cmp	local03, #0 wz
07994     64 00 90 AD |  if_e	jmp	#LR__0418
07998     2C 6A 06 F1 | 	add	local01, #44
0799c     35 79 02 FB | 	rdlong	local08, local01
079a0     2C 6A 86 F1 | 	sub	local01, #44
079a4     3C 71 02 F6 | 	mov	local04, local08
079a8     38 73 02 FB | 	rdlong	local05, local04
079ac     04 70 06 F1 | 	add	local04, #4
079b0     38 7B 02 FB | 	rdlong	local09, local04
079b4     04 70 86 F1 | 	sub	local04, #4
079b8     3D 75 02 F6 | 	mov	local06, local09
079bc     35 7D 02 F6 | 	mov	local10, local01
079c0     37 7F 02 F6 | 	mov	local11, local03
079c4     3F 7F 62 F6 | 	neg	local11, local11
079c8     3F 81 02 F6 | 	mov	local12, local11
079cc     01 76 06 F6 | 	mov	local07, #1
079d0     3E 5D 02 F6 | 	mov	arg01, local10
079d4     40 5F 02 F6 | 	mov	arg02, local12
079d8     01 60 06 F6 | 	mov	arg03, #1
079dc     07 83 02 F6 | 	mov	local13, objptr
079e0     39 0F 02 F6 | 	mov	objptr, local05
079e4     2D 74 62 FD | 	call	local06
079e8     41 0F 02 F6 | 	mov	objptr, local13
079ec     15 85 02 F6 | 	mov	local14, result1
079f0     42 87 02 F6 | 	mov	local15, local14
079f4     00 86 5E F2 | 	cmps	local15, #0 wcz
079f8     37 87 02 36 |  if_ae	mov	local15, local03
079fc                 | LR__0418
079fc                 | LR__0419
079fc     36 01 68 FC | 	wrlong	#0, local02
07a00     04 6C 06 F1 | 	add	local02, #4
07a04     36 01 68 FC | 	wrlong	#0, local02
07a08     04 6C 06 F1 | 	add	local02, #4
07a0c     36 01 68 FC | 	wrlong	#0, local02
07a10     00 2A 06 F6 | 	mov	result1, #0
07a14     AF F0 03 F6 | 	mov	ptra, fp
07a18     BF 00 A0 FD | 	call	#popregs_
07a1c                 | __system____default_flush_ret
07a1c     2D 00 64 FD | 	ret
07a20                 | 
07a20                 | __system___rxtxioctl_0174
07a20     02 5A 05 F6 | 	mov	COUNT_, #2
07a24     B0 00 A0 FD | 	call	#pushregs_
07a28     2F 6B 02 F6 | 	mov	local01, arg02
07a2c     30 6D 02 F6 | 	mov	local02, arg03
07a30     00 6B 0E F2 | 	cmp	local01, #256 wz
07a34     0C 00 90 AD |  if_e	jmp	#LR__0420
07a38     01 6B 0E F2 | 	cmp	local01, #257 wz
07a3c     1C 00 90 AD |  if_e	jmp	#LR__0421
07a40     30 00 90 FD | 	jmp	#LR__0422
07a44                 | LR__0420
07a44     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a48     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07a4c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a50     36 2B 62 FC | 	wrlong	result1, local02
07a54     00 2A 06 F6 | 	mov	result1, #0
07a58     30 00 90 FD | 	jmp	#LR__0423
07a5c                 | LR__0421
07a5c     36 5D 02 FB | 	rdlong	arg01, local02
07a60     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a64     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07a68     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a6c     00 2A 06 F6 | 	mov	result1, #0
07a70     18 00 90 FD | 	jmp	#LR__0423
07a74                 | LR__0422
07a74     01 00 00 FF 
07a78     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a7c     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07a80     01 00 00 FF 
07a84     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a88     01 2A 66 F6 | 	neg	result1, #1
07a8c                 | LR__0423
07a8c     AF F0 03 F6 | 	mov	ptra, fp
07a90     BF 00 A0 FD | 	call	#popregs_
07a94                 | __system___rxtxioctl_0174_ret
07a94     2D 00 64 FD | 	ret
07a98                 | 
07a98                 | __system____dummy_flush_0175
07a98     00 2A 06 F6 | 	mov	result1, #0
07a9c                 | __system____dummy_flush_0175_ret
07a9c     2D 00 64 FD | 	ret
07aa0                 | 
07aa0                 | __system___vfswrite
07aa0     0B 5A 05 F6 | 	mov	COUNT_, #11
07aa4     B0 00 A0 FD | 	call	#pushregs_
07aa8     2E 6B 02 F6 | 	mov	local01, arg01
07aac     2F 6D 02 F6 | 	mov	local02, arg02
07ab0     30 6F 02 F6 | 	mov	local03, arg03
07ab4     36 71 02 F6 | 	mov	local04, local02
07ab8     08 6A 06 F1 | 	add	local01, #8
07abc     35 73 02 FB | 	rdlong	local05, local01
07ac0     08 6A 86 F1 | 	sub	local01, #8
07ac4     02 72 CE F7 | 	test	local05, #2 wz
07ac8     1C 00 90 5D |  if_ne	jmp	#LR__0424
07acc     01 00 00 FF 
07ad0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ad4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07ad8     01 00 00 FF 
07adc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07ae0     01 2A 66 F6 | 	neg	result1, #1
07ae4     70 01 90 FD | 	jmp	#LR__0432
07ae8                 | LR__0424
07ae8     08 6A 06 F1 | 	add	local01, #8
07aec     35 73 02 FB | 	rdlong	local05, local01
07af0     08 6A 86 F1 | 	sub	local01, #8
07af4     40 72 CE F7 | 	test	local05, #64 wz
07af8     5C 00 90 AD |  if_e	jmp	#LR__0426
07afc     08 6A 06 F1 | 	add	local01, #8
07b00     35 73 02 FB | 	rdlong	local05, local01
07b04     08 6A 86 F1 | 	sub	local01, #8
07b08     80 72 CE F7 | 	test	local05, #128 wz
07b0c     48 00 90 AD |  if_e	jmp	#LR__0425
07b10     2C 6A 06 F1 | 	add	local01, #44
07b14     35 73 02 FB | 	rdlong	local05, local01
07b18     2C 6A 86 F1 | 	sub	local01, #44
07b1c     39 75 02 FB | 	rdlong	local06, local05
07b20     04 72 06 F1 | 	add	local05, #4
07b24     39 77 02 FB | 	rdlong	local07, local05
07b28     35 5D 02 F6 | 	mov	arg01, local01
07b2c     00 5E 06 F6 | 	mov	arg02, #0
07b30     02 60 06 F6 | 	mov	arg03, #2
07b34     07 79 02 F6 | 	mov	local08, objptr
07b38     3A 0F 02 F6 | 	mov	objptr, local06
07b3c     2D 76 62 FD | 	call	local07
07b40     3C 0F 02 F6 | 	mov	objptr, local08
07b44     08 6A 06 F1 | 	add	local01, #8
07b48     35 73 02 FB | 	rdlong	local05, local01
07b4c     80 72 26 F5 | 	andn	local05, #128
07b50     35 73 62 FC | 	wrlong	local05, local01
07b54     08 6A 86 F1 | 	sub	local01, #8
07b58                 | LR__0425
07b58                 | LR__0426
07b58     14 6A 06 F1 | 	add	local01, #20
07b5c     35 73 0A FB | 	rdlong	local05, local01 wz
07b60     14 6A 86 F1 | 	sub	local01, #20
07b64     7C 00 90 AD |  if_e	jmp	#LR__0428
07b68     14 6A 06 F1 | 	add	local01, #20
07b6c     35 73 02 FB | 	rdlong	local05, local01
07b70     14 6A 86 F1 | 	sub	local01, #20
07b74     39 75 02 FB | 	rdlong	local06, local05
07b78     04 72 06 F1 | 	add	local05, #4
07b7c     39 77 02 FB | 	rdlong	local07, local05
07b80     36 5F 02 F6 | 	mov	arg02, local02
07b84     37 61 02 F6 | 	mov	arg03, local03
07b88     35 5D 02 F6 | 	mov	arg01, local01
07b8c     07 79 02 F6 | 	mov	local08, objptr
07b90     3A 0F 02 F6 | 	mov	objptr, local06
07b94     2D 76 62 FD | 	call	local07
07b98     3C 0F 02 F6 | 	mov	objptr, local08
07b9c     15 7B 02 F6 | 	mov	local09, result1
07ba0     00 7A 5E F2 | 	cmps	local09, #0 wcz
07ba4     34 00 90 3D |  if_ae	jmp	#LR__0427
07ba8     08 6A 06 F1 | 	add	local01, #8
07bac     35 73 02 FB | 	rdlong	local05, local01
07bb0     20 72 46 F5 | 	or	local05, #32
07bb4     35 73 62 FC | 	wrlong	local05, local01
07bb8     01 00 00 FF 
07bbc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bc0     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07bc4     01 00 00 FF 
07bc8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bcc     00 7A 0E F2 | 	cmp	local09, #0 wz
07bd0     01 2A 66 56 |  if_ne	neg	result1, #1
07bd4     00 2A 06 A6 |  if_e	mov	result1, #0
07bd8     7C 00 90 FD | 	jmp	#LR__0432
07bdc                 | LR__0427
07bdc     3D 2B 02 F6 | 	mov	result1, local09
07be0     74 00 90 FD | 	jmp	#LR__0432
07be4                 | LR__0428
07be4     18 6A 06 F1 | 	add	local01, #24
07be8     35 7D 0A FB | 	rdlong	local10, local01 wz
07bec     18 6A 86 F1 | 	sub	local01, #24
07bf0     1C 00 90 5D |  if_ne	jmp	#LR__0429
07bf4     01 00 00 FF 
07bf8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bfc     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07c00     01 00 00 FF 
07c04     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c08     01 2A 66 F6 | 	neg	result1, #1
07c0c     48 00 90 FD | 	jmp	#LR__0432
07c10                 | LR__0429
07c10     00 7A 06 F6 | 	mov	local09, #0
07c14                 | LR__0430
07c14     00 6E 1E F2 | 	cmp	local03, #0 wcz
07c18     38 00 90 ED |  if_be	jmp	#LR__0431
07c1c     3E 73 02 F6 | 	mov	local05, local10
07c20     39 75 02 FB | 	rdlong	local06, local05
07c24     04 72 06 F1 | 	add	local05, #4
07c28     39 77 02 FB | 	rdlong	local07, local05
07c2c     38 5D C2 FA | 	rdbyte	arg01, local04
07c30     35 5F 02 F6 | 	mov	arg02, local01
07c34     07 7F 02 F6 | 	mov	local11, objptr
07c38     3A 0F 02 F6 | 	mov	objptr, local06
07c3c     01 70 06 F1 | 	add	local04, #1
07c40     2D 76 62 FD | 	call	local07
07c44     3F 0F 02 F6 | 	mov	objptr, local11
07c48     15 7B 02 F1 | 	add	local09, result1
07c4c     01 6E 86 F1 | 	sub	local03, #1
07c50     C0 FF 9F FD | 	jmp	#LR__0430
07c54                 | LR__0431
07c54     3D 2B 02 F6 | 	mov	result1, local09
07c58                 | LR__0432
07c58     AF F0 03 F6 | 	mov	ptra, fp
07c5c     BF 00 A0 FD | 	call	#popregs_
07c60                 | __system___vfswrite_ret
07c60     2D 00 64 FD | 	ret
07c64                 | 
07c64                 | __system___vfsread
07c64     0F 5A 05 F6 | 	mov	COUNT_, #15
07c68     B0 00 A0 FD | 	call	#pushregs_
07c6c     2C F0 07 F1 | 	add	ptra, #44
07c70     04 5E 05 F1 | 	add	fp, #4
07c74     AF 5C 62 FC | 	wrlong	arg01, fp
07c78     04 5E 05 F1 | 	add	fp, #4
07c7c     AF 5E 62 FC | 	wrlong	arg02, fp
07c80     04 5E 05 F1 | 	add	fp, #4
07c84     AF 60 62 FC | 	wrlong	arg03, fp
07c88     04 5E 85 F1 | 	sub	fp, #4
07c8c     AF 6A 02 FB | 	rdlong	local01, fp
07c90     14 5E 05 F1 | 	add	fp, #20
07c94     AF 6A 62 FC | 	wrlong	local01, fp
07c98     04 5E 05 F1 | 	add	fp, #4
07c9c     AF 00 68 FC | 	wrlong	#0, fp
07ca0     1C 5E 85 F1 | 	sub	fp, #28
07ca4     AF 6C 02 FB | 	rdlong	local02, fp
07ca8     04 5E 85 F1 | 	sub	fp, #4
07cac     08 6C 06 F1 | 	add	local02, #8
07cb0     36 6B 02 FB | 	rdlong	local01, local02
07cb4     01 6A CE F7 | 	test	local01, #1 wz
07cb8     1C 00 90 5D |  if_ne	jmp	#LR__0433
07cbc     01 00 00 FF 
07cc0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07cc4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07cc8     01 00 00 FF 
07ccc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07cd0     01 2A 66 F6 | 	neg	result1, #1
07cd4     9C 02 90 FD | 	jmp	#LR__0441
07cd8                 | LR__0433
07cd8     04 5E 05 F1 | 	add	fp, #4
07cdc     AF 6A 02 FB | 	rdlong	local01, fp
07ce0     04 5E 85 F1 | 	sub	fp, #4
07ce4     10 6A 06 F1 | 	add	local01, #16
07ce8     35 6F 0A FB | 	rdlong	local03, local01 wz
07cec     B4 00 90 AD |  if_e	jmp	#LR__0435
07cf0     04 5E 05 F1 | 	add	fp, #4
07cf4     AF 70 02 FB | 	rdlong	local04, fp
07cf8     10 70 06 F1 | 	add	local04, #16
07cfc     38 6B 02 FB | 	rdlong	local01, local04
07d00     35 6D 02 FB | 	rdlong	local02, local01
07d04     04 6A 06 F1 | 	add	local01, #4
07d08     35 6F 02 FB | 	rdlong	local03, local01
07d0c     AF 5C 02 FB | 	rdlong	arg01, fp
07d10     04 5E 05 F1 | 	add	fp, #4
07d14     AF 5E 02 FB | 	rdlong	arg02, fp
07d18     04 5E 05 F1 | 	add	fp, #4
07d1c     AF 60 02 FB | 	rdlong	arg03, fp
07d20     0C 5E 85 F1 | 	sub	fp, #12
07d24     07 73 02 F6 | 	mov	local05, objptr
07d28     36 0F 02 F6 | 	mov	objptr, local02
07d2c     2D 6E 62 FD | 	call	local03
07d30     39 0F 02 F6 | 	mov	objptr, local05
07d34     10 5E 05 F1 | 	add	fp, #16
07d38     AF 2A 62 FC | 	wrlong	result1, fp
07d3c     10 5E 85 F1 | 	sub	fp, #16
07d40     00 2A 5E F2 | 	cmps	result1, #0 wcz
07d44     4C 00 90 3D |  if_ae	jmp	#LR__0434
07d48     04 5E 05 F1 | 	add	fp, #4
07d4c     AF 6A 02 FB | 	rdlong	local01, fp
07d50     35 71 02 F6 | 	mov	local04, local01
07d54     08 70 06 F1 | 	add	local04, #8
07d58     38 6F 02 FB | 	rdlong	local03, local04
07d5c     20 6E 46 F5 | 	or	local03, #32
07d60     08 6A 06 F1 | 	add	local01, #8
07d64     35 6F 62 FC | 	wrlong	local03, local01
07d68     0C 5E 05 F1 | 	add	fp, #12
07d6c     AF 5C 0A FB | 	rdlong	arg01, fp wz
07d70     10 5E 85 F1 | 	sub	fp, #16
07d74     01 00 00 FF 
07d78     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d7c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07d80     01 00 00 FF 
07d84     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d88     01 2A 66 56 |  if_ne	neg	result1, #1
07d8c     00 2A 06 A6 |  if_e	mov	result1, #0
07d90     E0 01 90 FD | 	jmp	#LR__0441
07d94                 | LR__0434
07d94     10 5E 05 F1 | 	add	fp, #16
07d98     AF 2A 02 FB | 	rdlong	result1, fp
07d9c     10 5E 85 F1 | 	sub	fp, #16
07da0     D0 01 90 FD | 	jmp	#LR__0441
07da4                 | LR__0435
07da4     04 5E 05 F1 | 	add	fp, #4
07da8     AF 6A 02 FB | 	rdlong	local01, fp
07dac     1C 6A 06 F1 | 	add	local01, #28
07db0     35 6F 02 FB | 	rdlong	local03, local01
07db4     14 5E 05 F1 | 	add	fp, #20
07db8     AF 6E 62 FC | 	wrlong	local03, fp
07dbc     AF 6A 0A FB | 	rdlong	local01, fp wz
07dc0     18 5E 85 F1 | 	sub	fp, #24
07dc4     1C 00 90 5D |  if_ne	jmp	#LR__0436
07dc8     01 00 00 FF 
07dcc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07dd0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07dd4     01 00 00 FF 
07dd8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07ddc     01 2A 66 F6 | 	neg	result1, #1
07de0     90 01 90 FD | 	jmp	#LR__0441
07de4                 | LR__0436
07de4     04 5E 05 F1 | 	add	fp, #4
07de8     AF 6A 02 FB | 	rdlong	local01, fp
07dec     04 5E 85 F1 | 	sub	fp, #4
07df0     24 6A 06 F1 | 	add	local01, #36
07df4     35 6F 0A FB | 	rdlong	local03, local01 wz
07df8     A0 00 90 AD |  if_e	jmp	#LR__0438
07dfc     24 5E 05 F1 | 	add	fp, #36
07e00     AF 74 02 F6 | 	mov	local06, fp
07e04     20 5E 85 F1 | 	sub	fp, #32
07e08     AF 76 02 FB | 	rdlong	local07, fp
07e0c     3B 71 02 F6 | 	mov	local04, local07
07e10     24 70 06 F1 | 	add	local04, #36
07e14     38 79 02 FB | 	rdlong	local08, local04
07e18     3C 6B 02 F6 | 	mov	local01, local08
07e1c     35 6D 02 FB | 	rdlong	local02, local01
07e20     04 6A 06 F1 | 	add	local01, #4
07e24     35 7B 02 FB | 	rdlong	local09, local01
07e28     3D 6F 02 F6 | 	mov	local03, local09
07e2c     3B 7D 02 F6 | 	mov	local10, local07
07e30     04 5E 85 F1 | 	sub	fp, #4
07e34     3E 7F 02 F6 | 	mov	local11, local10
07e38     00 81 06 F6 | 	mov	local12, #256
07e3c     3A 83 02 F6 | 	mov	local13, local06
07e40     3F 5D 02 F6 | 	mov	arg01, local11
07e44     00 5F 06 F6 | 	mov	arg02, #256
07e48     41 61 02 F6 | 	mov	arg03, local13
07e4c     07 85 02 F6 | 	mov	local14, objptr
07e50     36 0F 02 F6 | 	mov	objptr, local02
07e54     2D 6E 62 FD | 	call	local03
07e58     42 0F 02 F6 | 	mov	objptr, local14
07e5c     15 87 02 F6 | 	mov	local15, result1
07e60     10 5E 05 F1 | 	add	fp, #16
07e64     AF 86 62 FC | 	wrlong	local15, fp
07e68     AF 6C 0A FB | 	rdlong	local02, fp wz
07e6c     10 5E 85 F1 | 	sub	fp, #16
07e70     28 00 90 5D |  if_ne	jmp	#LR__0437
07e74     24 5E 05 F1 | 	add	fp, #36
07e78     AF 70 02 FB | 	rdlong	local04, fp
07e7c     24 5E 85 F1 | 	sub	fp, #36
07e80     38 6F 02 F6 | 	mov	local03, local04
07e84     02 6E 0E F5 | 	and	local03, #2 wz
07e88     10 00 90 AD |  if_e	jmp	#LR__0437
07e8c     01 6A 06 F6 | 	mov	local01, #1
07e90     20 5E 05 F1 | 	add	fp, #32
07e94     AF 02 68 FC | 	wrlong	#1, fp
07e98     20 5E 85 F1 | 	sub	fp, #32
07e9c                 | LR__0437
07e9c                 | LR__0438
07e9c     10 5E 05 F1 | 	add	fp, #16
07ea0     AF 00 68 FC | 	wrlong	#0, fp
07ea4     10 5E 85 F1 | 	sub	fp, #16
07ea8                 | LR__0439
07ea8     0C 5E 05 F1 | 	add	fp, #12
07eac     AF 6A 02 FB | 	rdlong	local01, fp
07eb0     0C 5E 85 F1 | 	sub	fp, #12
07eb4     00 6A 1E F2 | 	cmp	local01, #0 wcz
07eb8     AC 00 90 ED |  if_be	jmp	#LR__0440
07ebc     18 5E 05 F1 | 	add	fp, #24
07ec0     AF 6A 02 FB | 	rdlong	local01, fp
07ec4     35 6D 02 FB | 	rdlong	local02, local01
07ec8     04 6A 06 F1 | 	add	local01, #4
07ecc     35 6F 02 FB | 	rdlong	local03, local01
07ed0     14 5E 85 F1 | 	sub	fp, #20
07ed4     AF 5C 02 FB | 	rdlong	arg01, fp
07ed8     04 5E 85 F1 | 	sub	fp, #4
07edc     07 7F 02 F6 | 	mov	local11, objptr
07ee0     36 0F 02 F6 | 	mov	objptr, local02
07ee4     2D 6E 62 FD | 	call	local03
07ee8     3F 0F 02 F6 | 	mov	objptr, local11
07eec     15 7D 02 F6 | 	mov	local10, result1
07ef0     14 5E 05 F1 | 	add	fp, #20
07ef4     AF 7C 62 FC | 	wrlong	local10, fp
07ef8     14 5E 85 F1 | 	sub	fp, #20
07efc     00 7C 5E F2 | 	cmps	local10, #0 wcz
07f00     64 00 90 CD |  if_b	jmp	#LR__0440
07f04     1C 5E 05 F1 | 	add	fp, #28
07f08     AF 6A 02 FB | 	rdlong	local01, fp
07f0c     35 6F 02 F6 | 	mov	local03, local01
07f10     01 6E 06 F1 | 	add	local03, #1
07f14     AF 6E 62 FC | 	wrlong	local03, fp
07f18     08 5E 85 F1 | 	sub	fp, #8
07f1c     AF 76 02 FB | 	rdlong	local07, fp
07f20     35 77 42 FC | 	wrbyte	local07, local01
07f24     04 5E 85 F1 | 	sub	fp, #4
07f28     AF 6A 02 FB | 	rdlong	local01, fp
07f2c     01 6A 06 F1 | 	add	local01, #1
07f30     AF 6A 62 FC | 	wrlong	local01, fp
07f34     04 5E 85 F1 | 	sub	fp, #4
07f38     AF 6A 02 FB | 	rdlong	local01, fp
07f3c     01 6A 86 F1 | 	sub	local01, #1
07f40     AF 6A 62 FC | 	wrlong	local01, fp
07f44     14 5E 05 F1 | 	add	fp, #20
07f48     AF 6A 0A FB | 	rdlong	local01, fp wz
07f4c     20 5E 85 F1 | 	sub	fp, #32
07f50     54 FF 9F AD |  if_e	jmp	#LR__0439
07f54     14 5E 05 F1 | 	add	fp, #20
07f58     AF 6E 02 FB | 	rdlong	local03, fp
07f5c     14 5E 85 F1 | 	sub	fp, #20
07f60     0A 6E 0E F2 | 	cmp	local03, #10 wz
07f64     40 FF 9F 5D |  if_ne	jmp	#LR__0439
07f68                 | LR__0440
07f68     10 5E 05 F1 | 	add	fp, #16
07f6c     AF 2A 02 FB | 	rdlong	result1, fp
07f70     10 5E 85 F1 | 	sub	fp, #16
07f74                 | LR__0441
07f74     AF F0 03 F6 | 	mov	ptra, fp
07f78     BF 00 A0 FD | 	call	#popregs_
07f7c                 | __system___vfsread_ret
07f7c     2D 00 64 FD | 	ret
07f80                 | 
07f80                 | ' 	
07f80                 | ' 	FUNCTION pfunc(c as integer) as integer
07f80                 | ___strs_cl_pfunc
07f80                 | ' 		if (i < 16) then
07f80     04 0E 06 F1 | 	add	objptr, #4
07f84     07 31 02 FB | 	rdlong	_var01, objptr
07f88     04 0E 86 F1 | 	sub	objptr, #4
07f8c     10 30 5E F2 | 	cmps	_var01, #16 wcz
07f90     2C 00 90 3D |  if_ae	jmp	#LR__0442
07f94     07 33 02 FB | 	rdlong	_var02, objptr
07f98     04 0E 06 F1 | 	add	objptr, #4
07f9c     07 35 02 FB | 	rdlong	_var03, objptr
07fa0     19 35 02 F1 | 	add	_var03, _var02
07fa4     1A 5D 42 FC | 	wrbyte	arg01, _var03
07fa8     07 31 02 FB | 	rdlong	_var01, objptr
07fac     01 30 06 F1 | 	add	_var01, #1
07fb0     07 31 62 FC | 	wrlong	_var01, objptr
07fb4     04 0E 86 F1 | 	sub	objptr, #4
07fb8                 | ' 			p(i) = c
07fb8                 | ' 			i = i+1
07fb8                 | ' 			return 1
07fb8     01 2A 06 F6 | 	mov	result1, #1
07fbc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
07fc0                 | LR__0442
07fc0                 | ' 			return -1
07fc0     01 2A 66 F6 | 	neg	result1, #1
07fc4                 | ___strs_cl_pfunc_ret
07fc4     2D 00 64 FD | 	ret
07fc8                 | 
07fc8                 | __struct__s_vfs_file_t_putchar
07fc8     04 5A 05 F6 | 	mov	COUNT_, #4
07fcc     B0 00 A0 FD | 	call	#pushregs_
07fd0     18 0E 06 F1 | 	add	objptr, #24
07fd4     07 6B 0A FB | 	rdlong	local01, objptr wz
07fd8     18 0E 86 F1 | 	sub	objptr, #24
07fdc     00 2A 06 A6 |  if_e	mov	result1, #0
07fe0     3C 00 90 AD |  if_e	jmp	#LR__0443
07fe4     18 0E 06 F1 | 	add	objptr, #24
07fe8     07 6B 02 FB | 	rdlong	local01, objptr
07fec     18 0E 86 F1 | 	sub	objptr, #24
07ff0     35 6D 02 FB | 	rdlong	local02, local01
07ff4     04 6A 06 F1 | 	add	local01, #4
07ff8     35 6F 02 FB | 	rdlong	local03, local01
07ffc     07 5F 02 F6 | 	mov	arg02, objptr
08000     07 71 02 F6 | 	mov	local04, objptr
08004     36 0F 02 F6 | 	mov	objptr, local02
08008     2D 6E 62 FD | 	call	local03
0800c     38 0F 02 F6 | 	mov	objptr, local04
08010     00 2A 5E F2 | 	cmps	result1, #0 wcz
08014     00 6A 06 C6 |  if_b	mov	local01, #0
08018     01 6A 06 36 |  if_ae	mov	local01, #1
0801c     35 2B 02 F6 | 	mov	result1, local01
08020                 | LR__0443
08020     AF F0 03 F6 | 	mov	ptra, fp
08024     BF 00 A0 FD | 	call	#popregs_
08028                 | __struct__s_vfs_file_t_putchar_ret
08028     2D 00 64 FD | 	ret
0802c                 | 
0802c                 | __struct__s_vfs_file_t_getchar
0802c     04 5A 05 F6 | 	mov	COUNT_, #4
08030     B0 00 A0 FD | 	call	#pushregs_
08034     1C 0E 06 F1 | 	add	objptr, #28
08038     07 6B 0A FB | 	rdlong	local01, objptr wz
0803c     1C 0E 86 F1 | 	sub	objptr, #28
08040     01 2A 66 A6 |  if_e	neg	result1, #1
08044     2C 00 90 AD |  if_e	jmp	#LR__0444
08048                 | '         return getcf(__this);
08048     1C 0E 06 F1 | 	add	objptr, #28
0804c     07 6B 02 FB | 	rdlong	local01, objptr
08050     1C 0E 86 F1 | 	sub	objptr, #28
08054     35 6D 02 FB | 	rdlong	local02, local01
08058     04 6A 06 F1 | 	add	local01, #4
0805c     35 6F 02 FB | 	rdlong	local03, local01
08060     07 5D 02 F6 | 	mov	arg01, objptr
08064     07 71 02 F6 | 	mov	local04, objptr
08068     36 0F 02 F6 | 	mov	objptr, local02
0806c     2D 6E 62 FD | 	call	local03
08070     38 0F 02 F6 | 	mov	objptr, local04
08074                 | LR__0444
08074     AF F0 03 F6 | 	mov	ptra, fp
08078     BF 00 A0 FD | 	call	#popregs_
0807c                 | __struct__s_vfs_file_t_getchar_ret
0807c     2D 00 64 FD | 	ret
08080                 | 
08080                 | __struct___bas_wrap_sender_tx
08080     04 5A 05 F6 | 	mov	COUNT_, #4
08084     B0 00 A0 FD | 	call	#pushregs_
08088     07 6B 02 FB | 	rdlong	local01, objptr
0808c     35 6D 02 FB | 	rdlong	local02, local01
08090     04 6A 06 F1 | 	add	local01, #4
08094     35 6F 02 FB | 	rdlong	local03, local01
08098     07 71 02 F6 | 	mov	local04, objptr
0809c     36 0F 02 F6 | 	mov	objptr, local02
080a0     2D 6E 62 FD | 	call	local03
080a4     38 0F 02 F6 | 	mov	objptr, local04
080a8     01 2A 06 F6 | 	mov	result1, #1
080ac     AF F0 03 F6 | 	mov	ptra, fp
080b0     BF 00 A0 FD | 	call	#popregs_
080b4                 | __struct___bas_wrap_sender_tx_ret
080b4     2D 00 64 FD | 	ret
080b8                 | 
080b8                 | LR__0445
080b8     20          | 	byte	" "
080b9     00          | 	byte	0
080ba                 | LR__0446
080ba                 | 	byte	
080ba     00          | 	byte	0
080bb                 | LR__0447
080bb                 | 	byte	
080bb     00          | 	byte	0
080bc                 | LR__0448
080bc     20 21 21 21 
080c0     20 63 6F 72 
080c4     72 75 70 74 
080c8     65 64 20 68 
080cc     65 61 70 3F 
080d0     3F 3F 20 21 
080d4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
080d7     00          | 	byte	0
080d8                 | LR__0449
080d8     20 21 21 21 
080dc     20 6F 75 74 
080e0     20 6F 66 20 
080e4     68 65 61 70 
080e8     20 6D 65 6D 
080ec     6F 72 79 20 
080f0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
080f4     00          | 	byte	0
080f5                 | LR__0450
080f5     20 21 21 21 
080f9     20 63 6F 72 
080fd     72 75 70 74 
08101     65 64 20 68 
08105     65 61 70 20 
08109     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0810d     00          | 	byte	0
0810e                 | LR__0451
0810e     4E 61 6D 65 
08112     20 20 20 20 
08116     20 20 20 20 
0811a     20 20 20 20 
0811e     20 20 20 20 
08122     20 20 20 6C 
08126     65 6E 20 20 
0812a     20 66 74 20 
0812e     76 6F 6C 20 
08132     72 65 70 20 
08136     20 20 72 2E 
0813a     6C 65 6E 20 
0813e     20 20 20 20 
08142     20 20 20 20 
08146     4E 61 6D 65 
0814a     20 20 20 20 
0814e     20 20 20 20 
08152     20 20 20 20 
08156     20 20 20 20 
0815a     20 20 20 6C 
0815e     65 6E 20 20 
08162     20 66 74 20 
08166     76 6F 6C 20 
0816a     72 65 70 20 
0816e     20 20 72 2E 
08172     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
08176     00          | 	byte	0
08177                 | LR__0452
08177     53          | 	byte	"S"
08178     00          | 	byte	0
08179                 | LR__0453
08179     20 20 20 20 
0817d     20 20 20 20 
08181     20 20 20 20 
08185     20 20 20 20 
08189     20 20 20 20 
0818d     20 20       | 	byte	"                      "
0818f     00          | 	byte	0
08190                 | LR__0454
08190     20          | 	byte	" "
08191     00          | 	byte	0
08192                 | LR__0455
08192     73 61 6D 70 
08196     6C 65 73 20 
0819a     6D 6F 64 75 
0819e     6C 65       | 	byte	"samples module"
081a0     00          | 	byte	0
081a1     00 00 00    | 	alignl
081a4                 | _dat_
081a4     73 79 6E 74 
081a8     68 6D 61 6E 
081ac     69 61 20 31 
081b0     31 00 00 00 | module file "../../../mod/synth11.mod"
081b4     00 00 00 00 
081b8     5F 5F 5F 5F 
081bc     5F 63 6F 6D 
081c0     70 6F 73 65 | 	byte	$00, $00, $00, $00, $5f, $5f, $5f, $5f, $5f, $63, $6f, $6d, $70, $6f, $73, $65
081c4     64 20 62 79 
081c8     00 00 00 00 
081cc     00 00 00 10 
081d0     00 40 00 00 | 	byte	$64, $20, $62, $79, $00, $00, $00, $00, $00, $00, $00, $10, $00, $40, $00, $00
081d4     00 10 5F 5F 
081d8     5F 5F 73 6E 
081dc     6F 6F 70 79 
081e0     20 6F 66 20 | 	byte	$00, $10, $5f, $5f, $5f, $5f, $73, $6e, $6f, $6f, $70, $79, $20, $6f, $66, $20
081e4     73 63 6F 70 
081e8     65 00 00 00 
081ec     00 10 00 40 
081f0     00 00 00 10 | 	byte	$73, $63, $6f, $70, $65, $00, $00, $00, $00, $10, $00, $40, $00, $00, $00, $10
081f4     6F 6E 20 31 
081f8     35 2E 31 32 
081fc     2E 39 34 00 
08200     00 00 00 00 | 	byte	$6f, $6e, $20, $31, $35, $2e, $31, $32, $2e, $39, $34, $00, $00, $00, $00, $00
08204     00 00 00 00 
08208     00 00 00    | 	byte	$00[7]
0820b     10 00 40 00 
0820f     00 00 10 63 
08213     6F 6E 74 61 
08217     63 74 20 6D | 	byte	$10, $00, $40, $00, $00, $00, $10, $63, $6f, $6e, $74, $61, $63, $74, $20, $6d
0821b     65 20 61 74 
0821f     3A 00 00 00 
08223     00 00 00 00 
08227     00 00 10 00 | 	byte	$65, $20, $61, $74, $3a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $00
0822b     40 00 00 00 
0822f     10 77 6F 6A 
08233     63 69 65 63 
08237     68 20 70 61 | 	byte	$40, $00, $00, $00, $10, $77, $6f, $6a, $63, $69, $65, $63, $68, $20, $70, $61
0823b     6E 75 66 6E 
0823f     69 6B 00 00 
08243     00 00 00 00 
08247     10 00 40 00 | 	byte	$6e, $75, $66, $6e, $69, $6b, $00, $00, $00, $00, $00, $00, $10, $00, $40, $00
0824b     00 00 10 75 
0824f     6C 2E 68 75 
08253     73 61 72 73 
08257     6B 61 20 31 | 	byte	$00, $00, $10, $75, $6c, $2e, $68, $75, $73, $61, $72, $73, $6b, $61, $20, $31
0825b     36 2F 36 00 
0825f     00 00 00 00 
08263     00 00 10 00 
08267     40 00 00 00 | 	byte	$36, $2f, $36, $00, $00, $00, $00, $00, $00, $00, $10, $00, $40, $00, $00, $00
0826b     10 30 35 2D 
0826f     31 32 30 20 
08273     6C 65 67 69 
08277     6F 6E 6F 77 | 	byte	$10, $30, $35, $2d, $31, $32, $30, $20, $6c, $65, $67, $69, $6f, $6e, $6f, $77
0827b     6F 00 00 00 
0827f     00 00 00 00 
08283     10 00 40 00 
08287     00 00 10 70 | 	byte	$6f, $00, $00, $00, $00, $00, $00, $00, $10, $00, $40, $00, $00, $00, $10, $70
0828b     6F 6C 61 6E 
0828f     64 00 00 00 
08293     00 00 00 00 
08297     00 00 00 00 | 	byte	$6f, $6c, $61, $6e, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0829b     00 00 00 00 
0829f     00 00       | 	byte	$00[6]
082a1     10 00 40 00 
082a5     00 00 10 63 
082a9     61 6C 6C 3A 
082ad     20 2B 34 38 | 	byte	$10, $00, $40, $00, $00, $00, $10, $63, $61, $6c, $6c, $3a, $20, $2b, $34, $38
082b1     20 30 28 32 
082b5     29 37 37 34 
082b9     39 38 34 39 
082bd     00 00 5D 00 | 	byte	$20, $30, $28, $32, $29, $37, $37, $34, $39, $38, $34, $39, $00, $00, $5d, $00
082c1     40 00 07 00 
082c5     40 00 00 00 
082c9     00 00 00 00 
082cd     00 00 00 00 | 	byte	$40, $00, $07, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082d1     00 00 00 00 
082d5     00 00 00 00 
082d9     00 00 00 00 | 	byte	$00[12]
082dd     5D 00 40 00 
082e1     0F 00 40 00 
082e5     00 00 00 00 
082e9     00 00 00 00 | 	byte	$5d, $00, $40, $00, $0f, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
082ed     00 00 00 00 
082f1     00 00 00 00 
082f5     00 00 00 00 
082f9     00 00 00 00 
082fd     00 00 00 00 | 	byte	$00[20]
08301     01 00 00 00 
08305     00 00 00 00 
08309     00 00 00 00 
0830d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08311     00 00 00 00 
08315     00 00 00 00 | 	byte	$00[8]
08319     09 00 40 00 
0831d     01 00 04 00 
08321     00 00 00 00 
08325     00 00 00 00 | 	byte	$09, $00, $40, $00, $01, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00
08329     00 00 00 00 
0832d     00 00 00 00 
08331     00 00 00 00 
08335     00          | 	byte	$00[13]
08336     01 C9 00 40 
0833a     00 00 00 01 
0833e     00 00 00 00 
08342     00 00 00 00 | 	byte	$01, $c9, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08346     00 00 00 00 
0834a     00 00 00 00 
0834e     00 00 00 00 
08352     00 00 00    | 	byte	$00[15]
08355     19 00 40 00 
08359     03 00 10 00 
0835d     00 00 00 00 
08361     00 00 00 00 | 	byte	$19, $00, $40, $00, $03, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
08365     00 00 00 00 
08369     00 00 00 00 
0836d     00 00 00 00 
08371     00 00 00 00 
08375     00 00 00 00 | 	byte	$00[20]
08379     01 00 00 00 
0837d     00 00 00 00 
08381     00 00 00 00 
08385     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08389     00 00 00 00 
0838d     00 00 00 00 
08391     00 00 00 00 
08395     00 00       | 	byte	$00[14]
08397     01 73 69 64 
0839b     2E 62 61 73 
0839f     73 64 72 75 
083a3     6D 34 00 00 | 	byte	$01, $73, $69, $64, $2e, $62, $61, $73, $73, $64, $72, $75, $6d, $34, $00, $00
083a7     00 00 00 00 
083ab     00 00 00    | 	byte	$00[7]
083ae     03 29 00 40 
083b2     00 00 00 01 
083b6     73 69 64 2E 
083ba     73 6E 61 72 | 	byte	$03, $29, $00, $40, $00, $00, $00, $01, $73, $69, $64, $2e, $73, $6e, $61, $72
083be     65 32 00 00 
083c2     00 00 00 00 
083c6     00 00 00 00 
083ca     00 00 07 FD | 	byte	$65, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $07, $fd
083ce     00 40 00 00 
083d2     00 01 73 69 
083d6     64 2E 68 69 
083da     68 61 74 35 | 	byte	$00, $40, $00, $00, $00, $01, $73, $69, $64, $2e, $68, $69, $68, $61, $74, $35
083de     00 00 00 00 
083e2     00 00 00 00 
083e6     00 00 00 00 | 	byte	$00[12]
083ea     02 03 0E 40 
083ee     00 00 00 01 
083f2     73 69 64 2E 
083f6     68 69 68 61 | 	byte	$02, $03, $0e, $40, $00, $00, $00, $01, $73, $69, $64, $2e, $68, $69, $68, $61
083fa     74 32 00 00 
083fe     00 00 00 00 
08402     00 00 00 00 
08406     00 00 00 D4 | 	byte	$74, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d4
0840a     00 40 00 00 
0840e     00 D4 00 00 
08412     00 00 00 00 
08416     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $d4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0841a     00 00 00 00 
0841e     00 00 00 00 
08422     00 00 00 00 
08426     00 00 00 00 
0842a     00 00 00    | 	byte	$00[19]
0842d     01 00 00 00 
08431     00 00 00 00 
08435     00 00 00 00 
08439     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0843d     00 00 00 00 
08441     00 00 00 00 
08445     00 00 00 00 
08449     00 00       | 	byte	$00[14]
0844b     01 67 72 65 
0844f     65 74 73 20 
08453     74 6F 20 61 
08457     6C 6C 20 6D | 	byte	$01, $67, $72, $65, $65, $74, $73, $20, $74, $6f, $20, $61, $6c, $6c, $20, $6d
0845b     79 20 6D 38 
0845f     73 21 00 00 
08463     00 00 00 00 
08467     00 00 01 00 | 	byte	$79, $20, $6d, $38, $73, $21, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00
0846b     00 00 00 00 
0846f     00 00 00 00 
08473     00 00 00 00 
08477     00 00 00 00 
0847b     00 00 00 00 
0847f     00 00 00 00 
08483     00 00 00 00 | 	byte	$00[28]
08487     01 00 00 00 
0848b     00 00 00 00 
0848f     00 00 00 00 
08493     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08497     00 00 00 00 
0849b     00 00 00 00 
0849f     00 00 00 00 
084a3     00 00       | 	byte	$00[14]
084a5     01 00 00 00 
084a9     00 00 00 00 
084ad     00 00 00 00 
084b1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084b5     00 00 00 00 
084b9     00 00 00 00 
084bd     00 00 00 00 
084c1     00 00       | 	byte	$00[14]
084c3     01 00 00 00 
084c7     00 00 00 00 
084cb     00 00 00 00 
084cf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084d3     00 00 00 00 
084d7     00 00 00 00 
084db     00 00 00 00 
084df     00 00       | 	byte	$00[14]
084e1     01 00 00 00 
084e5     00 00 00 00 
084e9     00 00 00 00 
084ed     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084f1     00 00 00 00 
084f5     00 00 00 00 
084f9     00 00 00 00 
084fd     00 00       | 	byte	$00[14]
084ff     01 00 00 00 
08503     00 00 00 00 
08507     00 00 00 00 
0850b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0850f     00 00 00 00 
08513     00 00 00 00 
08517     00 00 00 00 
0851b     00 00       | 	byte	$00[14]
0851d     01 00 00 00 
08521     00 00 00 00 
08525     00 00 00 00 
08529     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0852d     00 00 00 00 
08531     00 00 00 00 
08535     00 00 00 00 
08539     00 00       | 	byte	$00[14]
0853b     01 00 00 00 
0853f     00 00 00 00 
08543     00 00 00 00 
08547     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0854b     00 00 00 00 
0854f     00 00 00 00 
08553     00 00 00 00 
08557     00 00       | 	byte	$00[14]
08559     01 17 7F 03 
0855d     04 06 07 06 
08561     07 08 09 0A 
08565     0B 0C 0D 0C | 	byte	$01, $17, $7f, $03, $04, $06, $07, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0c
08569     0D 06 07 06 
0856d     07 0C 0D 0C 
08571     0D 02 00 00 
08575     00 00 00 00 | 	byte	$0d, $06, $07, $06, $07, $0c, $0d, $0c, $0d, $02, $00, $00, $00, $00, $00, $00
08579     00 00 00 00 
      ...             
085d5     00 00 00 00 
085d9     00 00 00    | 	byte	$00[99]
085dc     4D 2E 4B 2E 
085e0     02 3A 9F 04 
085e4     01 FC 80 00 
085e8     01 FC 80 00 | 	byte	$4d, $2e, $4b, $2e, $02, $3a, $9f, $04, $01, $fc, $80, $00, $01, $fc, $80, $00
085ec     10 D6 10 00 
085f0     00 00 00 00 
085f4     00 00 00 00 
085f8     00 FE 5C 10 | 	byte	$10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $5c, $10
085fc     00 00 00 00 
08600     02 3A 9A 0F 
08604     01 1D 0C 10 
08608     01 53 40 00 | 	byte	$00, $00, $00, $00, $02, $3a, $9a, $0f, $01, $1d, $0c, $10, $01, $53, $40, $00
0860c     11 0D 30 00 
08610     00 00 0A 0F 
08614     00 00 00 00 
08618     01 FC 8C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $fc, $8c, $10
0861c     00 00 00 00 
08620     10 CA 20 00 
08624     01 53 40 00 
08628     00 FE 70 00 | 	byte	$00, $00, $00, $00, $10, $ca, $20, $00, $01, $53, $40, $00, $00, $fe, $70, $00
0862c     00 FE C0 C7 
08630     00 00 00 00 
08634     00 00 00 00 
08638     01 53 4C 10 | 	byte	$00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $4c, $10
0863c     00 00 0C 00 
08640     01 1D 94 81 
08644     01 FC 8C 10 
08648     01 53 60 00 | 	byte	$00, $00, $0c, $00, $01, $1d, $94, $81, $01, $fc, $8c, $10, $01, $53, $60, $00
0864c     11 0D 30 00 
08650     00 00 04 82 
08654     00 00 00 00 
08658     00 FE 7C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $fe, $7c, $10
0865c     00 00 00 00 
08660     02 3A 9A 0F 
08664     00 FE 70 00 
08668     01 FC 50 00 | 	byte	$00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $fe, $70, $00, $01, $fc, $50, $00
0866c     10 D6 10 00 
08670     00 00 0A 0F 
08674     00 00 00 00 
08678     01 53 6C 10 | 	byte	$10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $53, $6c, $10
0867c     00 00 00 00 
08680     01 1D 9A 0F 
08684     01 53 4C 10 
08688     01 1D 20 00 | 	byte	$00, $00, $00, $00, $01, $1d, $9a, $0f, $01, $53, $4c, $10, $01, $1d, $20, $00
0868c     11 0D 30 00 
08690     00 00 0A 0F 
08694     00 00 00 00 
08698     01 FC 5C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $fc, $5c, $10
0869c     00 00 00 00 
086a0     10 CA 20 00 
086a4     01 FC 30 00 
086a8     01 53 40 00 | 	byte	$00, $00, $00, $00, $10, $ca, $20, $00, $01, $fc, $30, $00, $01, $53, $40, $00
086ac     01 FC C0 C7 
086b0     00 00 00 00 
086b4     00 00 00 00 
086b8     01 1D 2C 10 | 	byte	$01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $2c, $10
086bc     00 00 0C 00 
086c0     02 80 9A 0F 
086c4     01 53 60 00 
086c8     01 1D 80 00 | 	byte	$00, $00, $0c, $00, $02, $80, $9a, $0f, $01, $53, $60, $00, $01, $1d, $80, $00
086cc     01 FC D0 40 
086d0     00 00 02 0F 
086d4     00 00 00 00 
086d8     01 53 5C 10 | 	byte	$01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00, $01, $53, $5c, $10
086dc     00 00 0A 0F 
086e0     02 3A 9F 04 
086e4     00 FE 3C 10 
086e8     01 FC 70 00 | 	byte	$00, $00, $0a, $0f, $02, $3a, $9f, $04, $00, $fe, $3c, $10, $01, $fc, $70, $00
086ec     10 D6 10 00 
086f0     00 00 00 00 
086f4     00 00 00 00 
086f8     01 1D 5C 10 | 	byte	$10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $5c, $10
086fc     00 00 00 00 
08700     02 3A 9A 0F 
08704     01 1D 20 00 
08708     01 53 30 00 | 	byte	$00, $00, $00, $00, $02, $3a, $9a, $0f, $01, $1d, $20, $00, $01, $53, $30, $00
0870c     11 0D 30 00 
08710     00 00 0A 0F 
08714     00 00 00 00 
08718     01 FC 7C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $fc, $7c, $10
0871c     00 00 00 00 
08720     10 CA 20 00 
08724     01 FC 6C 10 
08728     00 D6 10 00 | 	byte	$00, $00, $00, $00, $10, $ca, $20, $00, $01, $fc, $6c, $10, $00, $d6, $10, $00
0872c     00 FE C0 C7 
08730     00 00 00 00 
08734     00 00 00 00 
08738     01 53 2C 10 | 	byte	$00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $2c, $10
0873c     00 00 0C 00 
08740     01 1D 94 81 
08744     01 FC 50 00 
08748     01 53 70 00 | 	byte	$00, $00, $0c, $00, $01, $1d, $94, $81, $01, $fc, $50, $00, $01, $53, $70, $00
0874c     11 0D 30 00 
08750     00 00 04 82 
08754     00 00 00 00 
08758     00 D6 1C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $d6, $1c, $10
0875c     00 00 00 00 
08760     02 3A 9A 0F 
08764     01 1D 80 00 
08768     00 E2 20 00 | 	byte	$00, $00, $00, $00, $02, $3a, $9a, $0f, $01, $1d, $80, $00, $00, $e2, $20, $00
0876c     10 D6 10 00 
08770     00 00 0A 0F 
08774     00 00 00 00 
08778     01 53 5C 10 | 	byte	$10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $53, $5c, $10
0877c     00 00 00 00 
08780     01 1D 9A 0F 
08784     01 53 5C 10 
08788     01 53 50 00 | 	byte	$00, $00, $00, $00, $01, $1d, $9a, $0f, $01, $53, $5c, $10, $01, $53, $50, $00
0878c     11 0D 30 00 
08790     00 00 0A 0F 
08794     00 00 00 00 
08798     00 E2 6C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $e2, $6c, $10
0879c     00 00 00 00 
087a0     10 CA 20 00 
087a4     01 1D 10 00 
087a8     01 1D 70 00 | 	byte	$00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $10, $00, $01, $1d, $70, $00
087ac     01 FC C0 C7 
087b0     00 00 00 00 
087b4     00 00 00 00 
087b8     01 53 5C 10 | 	byte	$01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $5c, $10
087bc     00 00 0C 00 
087c0     02 80 9A 0F 
087c4     00 FE 8C 10 
087c8     00 FE 80 00 | 	byte	$00, $00, $0c, $00, $02, $80, $9a, $0f, $00, $fe, $8c, $10, $00, $fe, $80, $00
087cc     01 FC D0 40 
087d0     00 00 02 0F 
087d4     00 00 00 00 
087d8     01 1D 5C 10 | 	byte	$01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00, $01, $1d, $5c, $10
087dc     00 00 0A 0F 
087e0     01 AC 90 00 
087e4     01 FC 70 00 
087e8     01 FC 80 00 | 	byte	$00, $00, $0a, $0f, $01, $ac, $90, $00, $01, $fc, $70, $00, $01, $fc, $80, $00
087ec     10 D6 10 00 
087f0     00 00 00 00 
087f4     00 00 00 00 
087f8     00 FE 5C 10 | 	byte	$10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $5c, $10
087fc     00 00 00 00 
08800     01 AC 9A 0F 
08804     02 3A 1C 10 
08808     01 53 40 00 | 	byte	$00, $00, $00, $00, $01, $ac, $9a, $0f, $02, $3a, $1c, $10, $01, $53, $40, $00
0880c     11 0D 30 00 
08810     00 00 0A 0F 
08814     00 00 00 00 
08818     01 FC 8C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $fc, $8c, $10
0881c     00 00 00 00 
08820     10 CA 20 00 
08824     01 53 20 00 
08828     00 FE 70 00 | 	byte	$00, $00, $00, $00, $10, $ca, $20, $00, $01, $53, $20, $00, $00, $fe, $70, $00
0882c     00 FE C0 C7 
08830     00 00 00 00 
08834     00 00 00 00 
08838     01 53 4C 10 | 	byte	$00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $4c, $10
0883c     00 00 0C 00 
08840     00 D6 94 81 
08844     01 FC 7C 10 
08848     01 53 60 00 | 	byte	$00, $00, $0c, $00, $00, $d6, $94, $81, $01, $fc, $7c, $10, $01, $53, $60, $00
0884c     11 0D 30 00 
08850     00 00 04 82 
08854     00 00 00 00 
08858     00 FE 7C 10 | 	byte	$11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $fe, $7c, $10
0885c     00 00 00 00 
08860     01 AC 9A 0F 
08864     00 D6 10 00 
08868     01 FC 50 00 | 	byte	$00, $00, $00, $00, $01, $ac, $9a, $0f, $00, $d6, $10, $00, $01, $fc, $50, $00
0886c     10 D6 10 00 
08870     00 00 0A 0F 
08874     00 00 00 00 
08878     01 53 6C 10 | 	byte	$10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $01, $53, $6c, $10
0887c     00 00 00 00 
08880     00          | 	byte	$00[5]
08881     D6 9A 0F 01 
08885     53 2C 10 01 
08889     1D 20 00 11 
0888d     0D 30 00 00 | 	byte	$d6, $9a, $0f, $01, $53, $2c, $10, $01, $1d, $20, $00, $11, $0d, $30, $00, $00
08891     00 0A 0F 00 
08895     00 00 00 01 
08899     FC 5C 10 00 
0889d     00 00 00 10 | 	byte	$00, $0a, $0f, $00, $00, $00, $00, $01, $fc, $5c, $10, $00, $00, $00, $00, $10
088a1     CA 20 00 01 
088a5     FC 80 00 01 
088a9     53 40 00 01 
088ad     FC C0 C7 00 | 	byte	$ca, $20, $00, $01, $fc, $80, $00, $01, $53, $40, $00, $01, $fc, $c0, $c7, $00
088b1     00 00 00 00 
088b5     00 00 00    | 	byte	$00[7]
088b8     01 1D 2C 10 
088bc     00 00 0C 00 
088c0     00 D6 94 81 
088c4     00 D6 40 00 | 	byte	$01, $1d, $2c, $10, $00, $00, $0c, $00, $00, $d6, $94, $81, $00, $d6, $40, $00
088c8     01 1D 80 00 
088cc     01 FC D0 40 
088d0     00 00 04 82 
088d4     00 00 00 00 | 	byte	$01, $1d, $80, $00, $01, $fc, $d0, $40, $00, $00, $04, $82, $00, $00, $00, $00
088d8     01 53 5C 10 
088dc     00 00 0A 0F 
088e0     01 C5 9A 0F 
088e4     01 FC 8C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $0a, $0f, $01, $c5, $9a, $0f, $01, $fc, $8c, $10
088e8     01 FC 70 00 
088ec     10 D6 10 00 
088f0     00 00 0A 0F 
088f4     00 00 00 00 | 	byte	$01, $fc, $70, $00, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
088f8     01 1D 5C 10 
088fc     00 00 00 00 
08900     01 C5 9A 0F 
08904     00 E2 60 00 | 	byte	$01, $1d, $5c, $10, $00, $00, $00, $00, $01, $c5, $9a, $0f, $00, $e2, $60, $00
08908     01 53 30 00 
0890c     11 0D 30 00 
08910     00 00 0A 0F 
08914     00 00 00 00 | 	byte	$01, $53, $30, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08918     01 FC 7C 10 
0891c     00 00 00 00 
08920     10 CA 20 00 
08924     00 D6 4C 10 | 	byte	$01, $fc, $7c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $d6, $4c, $10
08928     00 D6 10 00 
0892c     00 FE C0 C7 
08930     00 00 00 00 
08934     00 00 00 00 | 	byte	$00, $d6, $10, $00, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08938     01 53 2C 10 
0893c     00 00 0C 00 
08940     00 E2 90 00 
08944     01 FC 40 00 | 	byte	$01, $53, $2c, $10, $00, $00, $0c, $00, $00, $e2, $90, $00, $01, $fc, $40, $00
08948     01 53 70 00 
0894c     11 0D 30 00 
08950     00 00 00 00 
08954     00 00 00 00 | 	byte	$01, $53, $70, $00, $11, $0d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
08958     00 D6 1C 10 
0895c     00 00 00 00 
08960     01 C5 9A 0F 
08964     00 E2 80 00 | 	byte	$00, $d6, $1c, $10, $00, $00, $00, $00, $01, $c5, $9a, $0f, $00, $e2, $80, $00
08968     00 E2 20 00 
0896c     10 D6 10 00 
08970     00 00 0A 0F 
08974     00 00 00 00 | 	byte	$00, $e2, $20, $00, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08978     01 53 5C 10 
0897c     00 00 00 00 
08980     00 E2 9A 0F 
08984     01 FC 4C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $00, $00, $00, $e2, $9a, $0f, $01, $fc, $4c, $10
08988     01 53 50 00 
0898c     11 0D 30 00 
08990     00 00 0A 0F 
08994     00 00 00 00 | 	byte	$01, $53, $50, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08998     00 E2 6C 10 
0899c     00 00 00 00 
089a0     10 CA 20 00 
089a4     01 1D 30 00 | 	byte	$00, $e2, $6c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $30, $00
089a8     01 1D 70 00 
089ac     01 FC C0 C7 
089b0     00 00 00 00 
089b4     00 00 00 00 | 	byte	$01, $1d, $70, $00, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
089b8     01 53 5C 10 
089bc     00 00 0C 00 
089c0     01 C5 90 00 
089c4     00 E2 8C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $0c, $00, $01, $c5, $90, $00, $00, $e2, $8c, $10
089c8     00 FE 80 00 
089cc     01 FC D0 40 
089d0     00 00 00 00 
089d4     00 00 00 00 | 	byte	$00, $fe, $80, $00, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $00, $00
089d8     01 1D 5C 10 
089dc     00 00 0A 0F 
089e0     01 FC 9F 04 
089e4     01 FC 80 00 | 	byte	$01, $1d, $5c, $10, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $01, $fc, $80, $00
089e8     01 FC 80 00 
089ec     10 D6 10 00 
089f0     00 00 00 00 
089f4     00 00 00 00 | 	byte	$01, $fc, $80, $00, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
089f8     00 FE 5C 10 
089fc     00 00 00 00 
08a00     01 FC 9A 0F 
08a04     01 1D 0C 10 | 	byte	$00, $fe, $5c, $10, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01, $1d, $0c, $10
08a08     01 53 40 00 
08a0c     11 0D 30 00 
08a10     00 00 0A 0F 
08a14     00 00 00 00 | 	byte	$01, $53, $40, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08a18     01 FC 8C 10 
08a1c     00 00 00 00 
08a20     10 CA 20 00 
08a24     01 53 40 00 | 	byte	$01, $fc, $8c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $53, $40, $00
08a28     00 FE 70 00 
08a2c     00 FE C0 C7 
08a30     00 00 00 00 
08a34     00 00 00 00 | 	byte	$00, $fe, $70, $00, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08a38     01 53 4C 10 
08a3c     00 00 0C 00 
08a40     00 FE 94 81 
08a44     01 FC 8C 10 | 	byte	$01, $53, $4c, $10, $00, $00, $0c, $00, $00, $fe, $94, $81, $01, $fc, $8c, $10
08a48     01 53 60 00 
08a4c     11 0D 30 00 
08a50     00 00 04 82 
08a54     00 00 00 00 | 	byte	$01, $53, $60, $00, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00
08a58     00 FE 7C 10 
08a5c     00 00 00 00 
08a60     01 FC 9A 0F 
08a64     00 FE 70 00 | 	byte	$00, $fe, $7c, $10, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $fe, $70, $00
08a68     01 FC 50 00 
08a6c     10 D6 10 00 
08a70     00 00 0A 0F 
08a74     00 00 00 00 | 	byte	$01, $fc, $50, $00, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08a78     01 53 6C 10 
08a7c     00 00 00 00 
08a80     00 FE 9A 0F 
08a84     01 53 4C 10 | 	byte	$01, $53, $6c, $10, $00, $00, $00, $00, $00, $fe, $9a, $0f, $01, $53, $4c, $10
08a88     01 1D 20 00 
08a8c     11 0D 30 00 
08a90     00 00 0A 0F 
08a94     00 00 00 00 | 	byte	$01, $1d, $20, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08a98     01 FC 5C 10 
08a9c     00 00 00 00 
08aa0     10 CA 20 00 
08aa4     01 FC 30 00 | 	byte	$01, $fc, $5c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $fc, $30, $00
08aa8     01 53 40 00 
08aac     01 FC C0 C7 
08ab0     00 00 00 00 
08ab4     00 00 00 00 | 	byte	$01, $53, $40, $00, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08ab8     01 1D 2C 10 
08abc     00 00 0C 00 
08ac0     01 1D 9A 0F 
08ac4     01 53 60 00 | 	byte	$01, $1d, $2c, $10, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $01, $53, $60, $00
08ac8     01 1D 80 00 
08acc     01 FC D0 40 
08ad0     00 00 02 0F 
08ad4     00 00 00 00 | 	byte	$01, $1d, $80, $00, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00
08ad8     01 53 5C 10 
08adc     00 00 0A 0F 
08ae0     01 FC 9F 04 
08ae4     00 FE 3C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $00, $fe, $3c, $10
08ae8     01 FC 70 00 
08aec     10 D6 10 00 
08af0     00 00 00 00 
08af4     00 00 00 00 | 	byte	$01, $fc, $70, $00, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af8     01 1D 5C 10 
08afc     00 00 00 00 
08b00     01 FC 9A 0F 
08b04     01 1D 20 00 | 	byte	$01, $1d, $5c, $10, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01, $1d, $20, $00
08b08     01 53 30 00 
08b0c     11 0D 30 00 
08b10     00 00 0A 0F 
08b14     00 00 00 00 | 	byte	$01, $53, $30, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08b18     01 FC 7C 10 
08b1c     00 00 00 00 
08b20     10 CA 20 00 
08b24     01 FC 6C 10 | 	byte	$01, $fc, $7c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $fc, $6c, $10
08b28     00 D6 10 00 
08b2c     00 FE C0 C7 
08b30     00 00 00 00 
08b34     00 00 00 00 | 	byte	$00, $d6, $10, $00, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08b38     01 53 2C 10 
08b3c     00 00 0C 00 
08b40     00 FE 94 81 
08b44     01 FC 50 00 | 	byte	$01, $53, $2c, $10, $00, $00, $0c, $00, $00, $fe, $94, $81, $01, $fc, $50, $00
08b48     01 53 70 00 
08b4c     11 0D 30 00 
08b50     00 00 04 82 
08b54     00 00 00 00 | 	byte	$01, $53, $70, $00, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00
08b58     00 D6 1C 10 
08b5c     00 00 00 00 
08b60     01 FC 9A 0F 
08b64     01 1D 80 00 | 	byte	$00, $d6, $1c, $10, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01, $1d, $80, $00
08b68     00 E2 20 00 
08b6c     10 D6 10 00 
08b70     00 00 0A 0F 
08b74     00 00 00 00 | 	byte	$00, $e2, $20, $00, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08b78     01 53 5C 10 
08b7c     00 00 00 00 
08b80     00 FE 9A 0F 
08b84     01 53 5C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $00, $00, $00, $fe, $9a, $0f, $01, $53, $5c, $10
08b88     01 53 50 00 
08b8c     11 0D 30 00 
08b90     00 00 0A 0F 
08b94     00 00 00 00 | 	byte	$01, $53, $50, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08b98     00 E2 6C 10 
08b9c     00 00 00 00 
08ba0     10 CA 20 00 
08ba4     01 1D 10 00 | 	byte	$00, $e2, $6c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $10, $00
08ba8     01 1D 70 00 
08bac     01 FC C0 C7 
08bb0     00 00 00 00 
08bb4     00 00 00 00 | 	byte	$01, $1d, $70, $00, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08bb8     01 53 5C 10 
08bbc     00 00 0C 00 
08bc0     01 1D 9A 0F 
08bc4     00 FE 8C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $00, $fe, $8c, $10
08bc8     00 FE 80 00 
08bcc     01 FC D0 40 
08bd0     00 00 02 0F 
08bd4     00 00 00 00 | 	byte	$00, $fe, $80, $00, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00
08bd8     01 1D 5C 10 
08bdc     00 00 0A 0F 
08be0     02 80 90 00 
08be4     01 FC 70 00 | 	byte	$01, $1d, $5c, $10, $00, $00, $0a, $0f, $02, $80, $90, $00, $01, $fc, $70, $00
08be8     01 FC 80 00 
08bec     10 D6 10 00 
08bf0     00 00 00 00 
08bf4     00 00 00 00 | 	byte	$01, $fc, $80, $00, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf8     00 FE 5C 10 
08bfc     00 00 00 00 
08c00     02 80 9A 0F 
08c04     02 3A 1C 10 | 	byte	$00, $fe, $5c, $10, $00, $00, $00, $00, $02, $80, $9a, $0f, $02, $3a, $1c, $10
08c08     01 53 40 00 
08c0c     11 0D 30 00 
08c10     00 00 0A 0F 
08c14     00 00 00 00 | 	byte	$01, $53, $40, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08c18     01 FC 8C 10 
08c1c     00 00 00 00 
08c20     10 CA 20 00 
08c24     01 53 20 00 | 	byte	$01, $fc, $8c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $53, $20, $00
08c28     00 FE 70 00 
08c2c     00 FE C0 C7 
08c30     00 00 00 00 
08c34     00 00 00 00 | 	byte	$00, $fe, $70, $00, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08c38     01 53 4C 10 
08c3c     00 00 0C 00 
08c40     01 40 94 81 
08c44     01 FC 7C 10 | 	byte	$01, $53, $4c, $10, $00, $00, $0c, $00, $01, $40, $94, $81, $01, $fc, $7c, $10
08c48     01 53 60 00 
08c4c     11 0D 30 00 
08c50     00 00 04 82 
08c54     00 00 00 00 | 	byte	$01, $53, $60, $00, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00
08c58     00 FE 7C 10 
08c5c     00 00 00 00 
08c60     02 80 9A 0F 
08c64     00 D6 10 00 | 	byte	$00, $fe, $7c, $10, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $d6, $10, $00
08c68     01 FC 50 00 
08c6c     10 D6 10 00 
08c70     00 00 0A 0F 
08c74     00 00 00 00 | 	byte	$01, $fc, $50, $00, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08c78     01 53 6C 10 
08c7c     00 00 00 00 
08c80     01 40 9A 0F 
08c84     01 53 2C 10 | 	byte	$01, $53, $6c, $10, $00, $00, $00, $00, $01, $40, $9a, $0f, $01, $53, $2c, $10
08c88     01 1D 20 00 
08c8c     11 0D 30 00 
08c90     00 00 0A 0F 
08c94     00 00 00 00 | 	byte	$01, $1d, $20, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08c98     01 FC 5C 10 
08c9c     00 00 00 00 
08ca0     10 CA 20 00 
08ca4     01 FC 80 00 | 	byte	$01, $fc, $5c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $fc, $80, $00
08ca8     01 53 40 00 
08cac     01 FC C0 C7 
08cb0     00 00 00 00 
08cb4     00 00 00 00 | 	byte	$01, $53, $40, $00, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08cb8     01 1D 2C 10 
08cbc     00 00 0C 00 
08cc0     00 FE 90 00 
08cc4     00 D6 40 00 | 	byte	$01, $1d, $2c, $10, $00, $00, $0c, $00, $00, $fe, $90, $00, $00, $d6, $40, $00
08cc8     01 1D 80 00 
08ccc     01 FC D0 40 
08cd0     00 00 00 00 
08cd4     00 00 00 00 | 	byte	$01, $1d, $80, $00, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $00, $00
08cd8     01 53 5C 10 
08cdc     00 00 0A 0F 
08ce0     02 80 90 00 
08ce4     01 FC 8C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $0a, $0f, $02, $80, $90, $00, $01, $fc, $8c, $10
08ce8     01 FC 70 00 
08cec     10 D6 10 00 
08cf0     00 00 00 00 
08cf4     00 00 00 00 | 	byte	$01, $fc, $70, $00, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cf8     01 1D 5C 10 
08cfc     00 00 00 00 
08d00     02 80 9A 0F 
08d04     00 E2 60 00 | 	byte	$01, $1d, $5c, $10, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $e2, $60, $00
08d08     01 53 30 00 
08d0c     11 0D 30 00 
08d10     00 00 0A 0F 
08d14     00 00 00 00 | 	byte	$01, $53, $30, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08d18     01 FC 7C 10 
08d1c     00 00 00 00 
08d20     10 CA 20 00 
08d24     00 D6 4C 10 | 	byte	$01, $fc, $7c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $d6, $4c, $10
08d28     00 D6 10 00 
08d2c     00 FE C0 C7 
08d30     00 00 00 00 
08d34     00 00 00 00 | 	byte	$00, $d6, $10, $00, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08d38     01 53 2C 10 
08d3c     00 00 0C 00 
08d40     01 40 94 81 
08d44     01 FC 40 00 | 	byte	$01, $53, $2c, $10, $00, $00, $0c, $00, $01, $40, $94, $81, $01, $fc, $40, $00
08d48     01 53 70 00 
08d4c     11 0D 30 00 
08d50     00 00 04 82 
08d54     00 00 00 00 | 	byte	$01, $53, $70, $00, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00
08d58     00 D6 1C 10 
08d5c     00 00 00 00 
08d60     02 80 9A 0F 
08d64     00 E2 80 00 | 	byte	$00, $d6, $1c, $10, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $e2, $80, $00
08d68     00 E2 20 00 
08d6c     10 D6 10 00 
08d70     00 00 0A 0F 
08d74     00 00 00 00 | 	byte	$00, $e2, $20, $00, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08d78     01 53 5C 10 
08d7c     00 00 00 00 
08d80     01 40 9A 0F 
08d84     01 FC 4C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $00, $00, $01, $40, $9a, $0f, $01, $fc, $4c, $10
08d88     01 53 50 00 
08d8c     11 0D 30 00 
08d90     00 00 0A 0F 
08d94     00 00 00 00 | 	byte	$01, $53, $50, $00, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00
08d98     00 E2 6C 10 
08d9c     00 00 00 00 
08da0     10 CA 20 00 
08da4     01 1D 30 00 | 	byte	$00, $e2, $6c, $10, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $30, $00
08da8     01 1D 70 00 
08dac     01 FC C0 C7 
08db0     00 00 00 00 
08db4     00 00 00 00 | 	byte	$01, $1d, $70, $00, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00
08db8     01 53 5C 10 
08dbc     00 00 0C 00 
08dc0     00 FE 90 00 
08dc4     00 E2 8C 10 | 	byte	$01, $53, $5c, $10, $00, $00, $0c, $00, $00, $fe, $90, $00, $00, $e2, $8c, $10
08dc8     00 FE 80 00 
08dcc     01 FC D0 40 
08dd0     00 00 00 00 
08dd4     00 00 00 00 | 	byte	$00, $fe, $80, $00, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $00, $00
08dd8     01 1D 5C 10 
08ddc     00 00 0A 0F 
08de0     01 FC AF 04 
08de4     01 FC 80 00 | 	byte	$01, $1d, $5c, $10, $00, $00, $0a, $0f, $01, $fc, $af, $04, $01, $fc, $80, $00
08de8     00 FE E0 37 
08dec     10 D6 10 00 
08df0     00 00 00 00 
08df4     00 00 00 00 | 	byte	$00, $fe, $e0, $37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
08df8     00 00 00 37 
08dfc     00 00 00 00 
08e00     00 00 0C 00 
08e04     00 FE 5C 10 | 	byte	$00, $00, $00, $37, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $fe, $5c, $10
08e08     00 00 00 37 
08e0c     00 00 00 00 
08e10     00 00 00 00 
08e14     00 00 00 00 | 	byte	$00, $00, $00, $37, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e18     00 00 00 37 
08e1c     00 00 00 00 
08e20     00 00 00 00 
08e24     00 00 0C 00 | 	byte	$00, $00, $00, $37, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00
08e28     00 00 0C 00 
08e2c     00 00 0C 00 
08e30     00 00 00 00 
08e34     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e38     00 00 00 00 
      ...             
091d8     00 00 00 00 
091dc     00 00 00 00 | 	byte	$00[936]
091e0     01 FC AF 04 
091e4     01 FC 80 00 
091e8     00 00 00 00 
091ec     01 FC AE 11 | 	byte	$01, $fc, $af, $04, $01, $fc, $80, $00, $00, $00, $00, $00, $01, $fc, $ae, $11
091f0     00 00 00 00 
091f4     00          | 	byte	$00[5]
091f5     FE 5C 10 00 
091f9     00 00 00 00 
091fd     00 00 00 00 
09201     00 00 00 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09205     53 40 00 00 
09209     00 00 00 00 
0920d     00 00 00 00 
09211     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09215     FC 8C 10 00 
09219     00 00 00 00 
0921d     00 00 00 00 
09221     00 00 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09225     FE 70 00 00 
09229     00 00 00 00 
0922d     00 0E 12 00 
09231     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $00, $00, $00, $0e, $12, $00, $00, $00, $00, $01
09235     53 4C 10 00 
09239     00 00 00 00 
0923d     00 00 00 00 
09241     00 00 00 01 | 	byte	$53, $4c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09245     53 60 00 00 
09249     00 00 00 00 
0924d     00 00 00 00 
09251     00 00 00 00 | 	byte	$53, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09255     FE 7C 10 00 
09259     00 00 00 00 
0925d     00 00 00 00 
09261     00 00 00 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09265     FC 50 00 00 
09269     00 00 00 00 
0926d     00 0E 13 00 
09271     00 00 00 01 | 	byte	$fc, $50, $00, $00, $00, $00, $00, $00, $00, $0e, $13, $00, $00, $00, $00, $01
09275     53 6C 10 00 
09279     00 00 00 00 
0927d     00 00 00 00 
09281     00 00 00 01 | 	byte	$53, $6c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09285     1D 20 00 00 
09289     00 00 00 00 
0928d     00 00 00 00 
09291     00 00 00 01 | 	byte	$1d, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09295     FC 5C 10 00 
09299     00 00 00 00 
0929d     00 00 00 00 
092a1     00 00 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
092a5     53 40 00 00 
092a9     00 00 00 00 
092ad     00 0E 12 00 
092b1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $00, $00, $00, $0e, $12, $00, $00, $00, $00, $01
092b5     1D 2C 10 00 
092b9     00 00 00 00 
092bd     00 00 00 00 
092c1     00 00 00 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
092c5     1D 80 00 00 
092c9     00 00 00 00 
092cd     00 00 00 00 
092d1     00 00 00 01 | 	byte	$1d, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
092d5     53 5C 10 00 
092d9     00 00 00 00 
092dd     00 00 00 00 
092e1     00 00 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
092e5     FC 70 00 00 
092e9     00 00 00 00 
092ed     00 0E 11 00 
092f1     00 00 00 01 | 	byte	$fc, $70, $00, $00, $00, $00, $00, $00, $00, $0e, $11, $00, $00, $00, $00, $01
092f5     1D 5C 10 00 
092f9     00 00 00 00 
092fd     00 00 00 00 
09301     00 00 00 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09305     53 30 00 00 
09309     00 00 00 00 
0930d     00 00 00 00 
09311     00 00 00 01 | 	byte	$53, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09315     FC 7C 10 00 
09319     00 00 00 00 
0931d     00 00 00 00 
09321     00 00 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09325     D6 10 00 00 
09329     00 00 00 00 
0932d     00 0E 21 00 
09331     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $00, $00, $00, $0e, $21, $00, $00, $00, $00, $01
09335     53 2C 10 00 
09339     00 00 00 00 
0933d     00 00 00 00 
09341     00 00 00 01 | 	byte	$53, $2c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09345     53 70 00 00 
09349     00 00 00 00 
0934d     00 00 00 00 
09351     00 00 00 00 | 	byte	$53, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09355     D6 1C 10 00 
09359     00 00 00 00 
0935d     00 00 00 00 
09361     00 00 00 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09365     E2 20 00 00 
09369     00 00 00 00 
0936d     00 0E 22 00 
09371     00 00 00 01 | 	byte	$e2, $20, $00, $00, $00, $00, $00, $00, $00, $0e, $22, $00, $00, $00, $00, $01
09375     53 5C 10 00 
09379     00 00 00 00 
0937d     00 00 00 00 
09381     00 00 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09385     53 50 00 00 
09389     00 00 00 00 
0938d     00 00 00 00 
09391     00 00 00 00 | 	byte	$53, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09395     E2 6C 10 00 
09399     00 00 00 00 
0939d     00 00 00 00 
093a1     00 00 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
093a5     1D 70 00 00 
093a9     00 00 00 00 
093ad     00 0E 21 00 
093b1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $00, $00, $00, $0e, $21, $00, $00, $00, $00, $01
093b5     53 5C 10 00 
093b9     00 00 00 00 
093bd     00 00 00 00 
093c1     00 00 00 00 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093c5     FE 80 00 00 
093c9     00 00 00 00 
093cd     00 00 00 00 
093d1     00 00 00 01 | 	byte	$fe, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
093d5     1D 5C 10 00 
093d9     00 00 00 00 
093dd     00 00 00 00 
093e1     00 00 00 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
093e5     FC 80 00 00 
093e9     00 00 00 00 
093ed     00 0E 11 00 
093f1     00 00 00 00 | 	byte	$fc, $80, $00, $00, $00, $00, $00, $00, $00, $0e, $11, $00, $00, $00, $00, $00
093f5     FE 5C 10 00 
093f9     00 00 00 00 
093fd     00 00 00 00 
09401     00 00 00 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09405     53 40 00 00 
09409     00 00 00 00 
0940d     00 00 00 00 
09411     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09415     FC 8C 10 00 
09419     00 00 00 00 
0941d     00 00 00 00 
09421     00 00 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09425     FE 70 00 00 
09429     00 00 00 00 
0942d     00 0E 12 00 
09431     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $00, $00, $00, $0e, $12, $00, $00, $00, $00, $01
09435     53 4C 10 00 
09439     00 00 00 00 
0943d     00 00 00 00 
09441     00 00 00 01 | 	byte	$53, $4c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09445     53 60 00 00 
09449     00 00 00 00 
0944d     00 00 00 00 
09451     00 00 00 00 | 	byte	$53, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09455     FE 7C 10 00 
09459     00 00 00 00 
0945d     00 00 00 00 
09461     00 00 00 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09465     FC 50 00 00 
09469     00 00 00 00 
0946d     00 0E 13 00 
09471     00 00 00 01 | 	byte	$fc, $50, $00, $00, $00, $00, $00, $00, $00, $0e, $13, $00, $00, $00, $00, $01
09475     53 6C 10 00 
09479     00 00 00 00 
0947d     00 00 00 00 
09481     00 00 00 01 | 	byte	$53, $6c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09485     1D 20 00 00 
09489     00 00 00 00 
0948d     00 00 00 00 
09491     00 00 00 01 | 	byte	$1d, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09495     FC 5C 10 00 
09499     00 00 00 00 
0949d     00 00 00 00 
094a1     00 00 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
094a5     53 40 00 00 
094a9     00 00 00 00 
094ad     00 0E 12 00 
094b1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $00, $00, $00, $0e, $12, $00, $00, $00, $00, $01
094b5     1D 2C 10 00 
094b9     00 00 00 00 
094bd     00 00 00 00 
094c1     00 00 00 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
094c5     1D 80 00 00 
094c9     00 00 00 00 
094cd     00 00 00 00 
094d1     00 00 00 01 | 	byte	$1d, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
094d5     53 5C 10 00 
094d9     00 00 00 00 
094dd     00 00 00 00 
094e1     00 00 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
094e5     FC 70 00 00 
094e9     00 00 00 00 
094ed     00 0E 11 00 
094f1     00 00 00 01 | 	byte	$fc, $70, $00, $00, $00, $00, $00, $00, $00, $0e, $11, $00, $00, $00, $00, $01
094f5     1D 5C 10 00 
094f9     00 00 00 00 
094fd     00 00 00 00 
09501     00 00 00 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09505     53 30 00 00 
09509     00 00 00 00 
0950d     00 00 00 00 
09511     00 00 00 01 | 	byte	$53, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09515     FC 7C 10 00 
09519     00 00 00 00 
0951d     00 00 00 00 
09521     00 00 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09525     D6 10 00 00 
09529     00 00 00 00 
0952d     00 0E 21 00 
09531     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $00, $00, $00, $0e, $21, $00, $00, $00, $00, $01
09535     53 2C 10 00 
09539     00 00 00 00 
0953d     00 00 00 00 
09541     00 00 00 01 | 	byte	$53, $2c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09545     53 70 00 00 
09549     00 00 00 00 
0954d     00 00 00 00 
09551     00 00 00 00 | 	byte	$53, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09555     D6 1C 10 00 
09559     00 00 00 00 
0955d     00 00 00 00 
09561     00 00 00 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09565     E2 20 00 00 
09569     00 00 00 00 
0956d     00 0E 22 00 
09571     00 00 00 01 | 	byte	$e2, $20, $00, $00, $00, $00, $00, $00, $00, $0e, $22, $00, $00, $00, $00, $01
09575     53 5C 10 00 
09579     00 00 00 00 
0957d     00 00 00 00 
09581     00 00 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09585     53 50 00 00 
09589     00 00 00 00 
0958d     00 00 00 00 
09591     00 00 00 00 | 	byte	$53, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09595     E2 6C 10 00 
09599     00 00 00 00 
0959d     00 00 00 00 
095a1     00 00 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
095a5     1D 70 00 00 
095a9     00 00 00 00 
095ad     00 0E 21 00 
095b1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $00, $00, $00, $0e, $21, $00, $00, $00, $00, $01
095b5     53 5C 10 00 
095b9     00 00 00 00 
095bd     00 00 00 00 
095c1     00 00 00 00 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095c5     FE 80 00 00 
095c9     00 00 00 00 
095cd     00 00 00 00 
095d1     00 00 00 01 | 	byte	$fe, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
095d5     1D 5C 10 00 
095d9     00 00 00 00 
095dd     00 00 00 10 
095e1     D6 1C 40 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $10, $d6, $1c, $40, $01
095e5     FC 80 00 10 
095e9     71 42 03 01 
095ed     FC AE 11 01 
095f1     FC 9C 10 00 | 	byte	$fc, $80, $00, $10, $71, $42, $03, $01, $fc, $ae, $11, $01, $fc, $9c, $10, $00
095f5     FE 5C 10 13 
095f9     58 43 03 00 
095fd     00 0C 10 00 
09601     00 0C 40 01 | 	byte	$fe, $5c, $10, $13, $58, $43, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09605     53 40 00 00 
09609     00 03 03 00 
0960d     00 0C 40 00 
09611     00 0C 10 01 | 	byte	$53, $40, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
09615     FC 8C 10 00 
09619     00 03 03 00 
0961d     00 0C 10 10 
09621     D6 1C 40 00 | 	byte	$fc, $8c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $00
09625     FE 70 00 00 
09629     00 03 03 00 
0962d     00 0E 12 01 
09631     FC 9C 10 01 | 	byte	$fe, $70, $00, $00, $00, $03, $03, $00, $00, $0e, $12, $01, $fc, $9c, $10, $01
09635     53 4C 10 00 
09639     00 03 03 00 
0963d     00 0C 10 00 
09641     00 0C 40 01 | 	byte	$53, $4c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09645     53 60 00 00 
09649     00 03 03 00 
0964d     00 0C 40 00 
09651     00 0C 10 00 | 	byte	$53, $60, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $00
09655     FE 7C 10 00 
09659     00 03 03 00 
0965d     00 0C 10 10 
09661     D6 1C 40 01 | 	byte	$fe, $7c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
09665     FC 50 00 00 
09669     00 03 03 00 
0966d     00 0E 13 01 
09671     FC 9C 10 01 | 	byte	$fc, $50, $00, $00, $00, $03, $03, $00, $00, $0e, $13, $01, $fc, $9c, $10, $01
09675     53 6C 10 00 
09679     00 03 03 00 
0967d     00 0C 10 00 
09681     00 0C 40 01 | 	byte	$53, $6c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09685     1D 20 00 00 
09689     00 03 03 00 
0968d     00 0C 40 00 
09691     00 0C 10 01 | 	byte	$1d, $20, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
09695     FC 5C 10 00 
09699     00 03 03 00 
0969d     00 0C 10 10 
096a1     D6 1C 40 01 | 	byte	$fc, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
096a5     53 40 00 00 
096a9     00 03 03 00 
096ad     00 0E 12 01 
096b1     FC 9C 10 01 | 	byte	$53, $40, $00, $00, $00, $03, $03, $00, $00, $0e, $12, $01, $fc, $9c, $10, $01
096b5     1D 2C 10 00 
096b9     00 03 03 00 
096bd     00 0C 10 00 
096c1     00 0C 40 01 | 	byte	$1d, $2c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
096c5     1D 80 00 00 
096c9     00 03 03 00 
096cd     00 0C 40 00 
096d1     00 0C 10 01 | 	byte	$1d, $80, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
096d5     53 5C 10 00 
096d9     00 03 03 00 
096dd     00 0C 10 10 
096e1     D6 1C 40 01 | 	byte	$53, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
096e5     FC 70 00 00 
096e9     00 03 03 00 
096ed     00 0E 11 01 
096f1     FC 9C 10 01 | 	byte	$fc, $70, $00, $00, $00, $03, $03, $00, $00, $0e, $11, $01, $fc, $9c, $10, $01
096f5     1D 5C 10 00 
096f9     00 03 03 00 
096fd     00 0C 10 00 
09701     00 0C 40 01 | 	byte	$1d, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09705     53 30 00 00 
09709     00 03 03 00 
0970d     00 0C 40 00 
09711     00 0C 10 01 | 	byte	$53, $30, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
09715     FC 7C 10 00 
09719     00 03 03 00 
0971d     00 0C 10 10 
09721     D6 1C 40 00 | 	byte	$fc, $7c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $00
09725     D6 10 00 00 
09729     00 03 03 00 
0972d     00 0E 21 01 
09731     FC 9C 10 01 | 	byte	$d6, $10, $00, $00, $00, $03, $03, $00, $00, $0e, $21, $01, $fc, $9c, $10, $01
09735     53 2C 10 00 
09739     00 03 03 00 
0973d     00 0C 10 00 
09741     00 0C 40 01 | 	byte	$53, $2c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09745     53 70 00 00 
09749     00 03 03 00 
0974d     00 0C 40 00 
09751     00 0C 10 00 | 	byte	$53, $70, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $00
09755     D6 1C 10 00 
09759     00 03 03 00 
0975d     00 0C 10 10 
09761     D6 1C 40 00 | 	byte	$d6, $1c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $00
09765     E2 20 00 00 
09769     00 03 03 00 
0976d     00 0E 22 01 
09771     AC 9C 10 01 | 	byte	$e2, $20, $00, $00, $00, $03, $03, $00, $00, $0e, $22, $01, $ac, $9c, $10, $01
09775     53 5C 10 00 
09779     00 03 03 00 
0977d     00 0C 10 00 
09781     00 0C 40 01 | 	byte	$53, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09785     53 50 00 00 
09789     00 03 03 00 
0978d     00 0C 40 00 
09791     00 0C 10 00 | 	byte	$53, $50, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $00
09795     E2 6C 10 00 
09799     00 03 03 00 
0979d     00 0C 10 10 
097a1     D6 1C 40 01 | 	byte	$e2, $6c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
097a5     1D 70 00 00 
097a9     00 03 03 00 
097ad     00 0E 21 01 
097b1     C5 9C 10 01 | 	byte	$1d, $70, $00, $00, $00, $03, $03, $00, $00, $0e, $21, $01, $c5, $9c, $10, $01
097b5     53 5C 10 00 
097b9     00 03 03 00 
097bd     00 0C 10 00 
097c1     00 0C 40 00 | 	byte	$53, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $00
097c5     FE 80 00 00 
097c9     00 03 03 00 
097cd     00 0C 40 00 
097d1     00 0C 10 01 | 	byte	$fe, $80, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
097d5     1D 5C 10 00 
097d9     00 03 03 00 
097dd     00 0C 10 10 
097e1     D6 1C 40 01 | 	byte	$1d, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
097e5     FC 80 00 00 
097e9     00 03 03 00 
097ed     00 0E 11 01 
097f1     FC 9C 10 00 | 	byte	$fc, $80, $00, $00, $00, $03, $03, $00, $00, $0e, $11, $01, $fc, $9c, $10, $00
097f5     FE 5C 10 00 
097f9     00 03 03 00 
097fd     00 0C 10 00 
09801     00 0C 40 01 | 	byte	$fe, $5c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09805     53 40 00 00 
09809     00 03 03 00 
0980d     00 0C 40 00 
09811     00 0C 10 01 | 	byte	$53, $40, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
09815     FC 8C 10 00 
09819     00 03 03 00 
0981d     00 0C 10 10 
09821     D6 1C 40 00 | 	byte	$fc, $8c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $00
09825     FE 70 00 00 
09829     00 03 03 00 
0982d     00 0E 12 01 
09831     FC 9C 10 01 | 	byte	$fe, $70, $00, $00, $00, $03, $03, $00, $00, $0e, $12, $01, $fc, $9c, $10, $01
09835     53 4C 10 00 
09839     00 03 03 00 
0983d     00 0C 10 00 
09841     00 0C 40 01 | 	byte	$53, $4c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09845     53 60 00 00 
09849     00 03 03 00 
0984d     00 0C 40 00 
09851     00 0C 10 00 | 	byte	$53, $60, $00, $00, $00, $03, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $00
09855     FE 7C 10 00 
09859     00 03 03 00 
0985d     00 0C 10 10 
09861     D6 1C 40 01 | 	byte	$fe, $7c, $10, $00, $00, $03, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
09865     FC 50 00 00 
09869     00 03 03 00 
0986d     00 0E 13 01 
09871     FC 9C 10 01 | 	byte	$fc, $50, $00, $00, $00, $03, $03, $00, $00, $0e, $13, $01, $fc, $9c, $10, $01
09875     53 6C 10 00 
09879     00 05 03 00 
0987d     00 0C 10 00 
09881     00 0C 40 01 | 	byte	$53, $6c, $10, $00, $00, $05, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09885     1D 20 00 00 
09889     00 05 03 00 
0988d     00 0C 40 00 
09891     00 0C 10 01 | 	byte	$1d, $20, $00, $00, $00, $05, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
09895     FC 5C 10 00 
09899     00 05 03 00 
0989d     00 0C 10 10 
098a1     D6 1C 40 01 | 	byte	$fc, $5c, $10, $00, $00, $05, $03, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
098a5     53 40 00 00 
098a9     00 05 03 00 
098ad     00 0E 12 01 
098b1     FC 9C 10 01 | 	byte	$53, $40, $00, $00, $00, $05, $03, $00, $00, $0e, $12, $01, $fc, $9c, $10, $01
098b5     1D 2C 10 00 
098b9     00 05 03 00 
098bd     00 0C 10 00 
098c1     00 0C 40 01 | 	byte	$1d, $2c, $10, $00, $00, $05, $03, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
098c5     1D 80 00 00 
098c9     00 05 03 00 
098cd     00 0C 40 00 
098d1     00 0C 10 01 | 	byte	$1d, $80, $00, $00, $00, $05, $03, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
098d5     53 5C 10 00 
098d9     00 00 00 00 
098dd     00 0C 10 10 
098e1     D6 1C 40 01 | 	byte	$53, $5c, $10, $00, $00, $00, $00, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
098e5     FC 70 00 10 
098e9     BE 20 00 00 
098ed     00 0E 11 01 
098f1     FC 9C 10 01 | 	byte	$fc, $70, $00, $10, $be, $20, $00, $00, $00, $0e, $11, $01, $fc, $9c, $10, $01
098f5     1D 5C 10 00 
098f9     00 00 00 00 
098fd     00 0C 10 00 
09901     00 0C 40 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09905     53 30 00 10 
09909     BE 20 00 00 
0990d     00 0C 40 00 
09911     00 0C 10 01 | 	byte	$53, $30, $00, $10, $be, $20, $00, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
09915     FC 7C 10 00 
09919     00 00 00 00 
0991d     00 0C 10 10 
09921     D6 1C 40 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $00, $00, $00, $0c, $10, $10, $d6, $1c, $40, $00
09925     D6 10 00 10 
09929     BE 2C 10 00 
0992d     00 0E 21 01 
09931     FC 9C 10 01 | 	byte	$d6, $10, $00, $10, $be, $2c, $10, $00, $00, $0e, $21, $01, $fc, $9c, $10, $01
09935     53 2C 10 10 
09939     BE 2C 10 00 
0993d     00 0C 10 00 
09941     00 0C 40 01 | 	byte	$53, $2c, $10, $10, $be, $2c, $10, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09945     53 70 00 10 
09949     BE 20 00 00 
0994d     00 0C 40 00 
09951     00 0C 10 00 | 	byte	$53, $70, $00, $10, $be, $20, $00, $00, $00, $0c, $40, $00, $00, $0c, $10, $00
09955     D6 1C 10 00 
09959     00 00 00 00 
0995d     00 0C 10 10 
09961     D6 1C 40 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $00, $00, $00, $0c, $10, $10, $d6, $1c, $40, $00
09965     E2 20 00 10 
09969     BE 2A 0F 00 
0996d     00 0E 22 01 
09971     AC 9C 10 01 | 	byte	$e2, $20, $00, $10, $be, $2a, $0f, $00, $00, $0e, $22, $01, $ac, $9c, $10, $01
09975     53 5C 10 00 
09979     00 0A 0F 00 
0997d     00 0C 10 00 
09981     00 0C 40 01 | 	byte	$53, $5c, $10, $00, $00, $0a, $0f, $00, $00, $0c, $10, $00, $00, $0c, $40, $01
09985     53 50 00 10 
09989     BE 2A 0F 00 
0998d     00 0C 40 00 
09991     00 0C 10 00 | 	byte	$53, $50, $00, $10, $be, $2a, $0f, $00, $00, $0c, $40, $00, $00, $0c, $10, $00
09995     E2 6C 10 00 
09999     00 0A 0F 00 
0999d     00 0C 10 10 
099a1     D6 1C 40 01 | 	byte	$e2, $6c, $10, $00, $00, $0a, $0f, $00, $00, $0c, $10, $10, $d6, $1c, $40, $01
099a5     1D 70 00 10 
099a9     BE 2A 0F 00 
099ad     00 0E 21 01 
099b1     C5 9C 10 01 | 	byte	$1d, $70, $00, $10, $be, $2a, $0f, $00, $00, $0e, $21, $01, $c5, $9c, $10, $01
099b5     53 5C 10 00 
099b9     00 0A 0F 00 
099bd     00 0C 10 00 
099c1     00 0C 40 00 | 	byte	$53, $5c, $10, $00, $00, $0a, $0f, $00, $00, $0c, $10, $00, $00, $0c, $40, $00
099c5     FE 80 00 10 
099c9     BE 2A 0F 00 
099cd     00 0C 40 00 
099d1     00 0C 10 01 | 	byte	$fe, $80, $00, $10, $be, $2a, $0f, $00, $00, $0c, $40, $00, $00, $0c, $10, $01
099d5     1D 5C 10 00 
099d9     00 0A 0F 00 
099dd     00 0C 10 01 
099e1     FC 9F 04 01 | 	byte	$1d, $5c, $10, $00, $00, $0a, $0f, $00, $00, $0c, $10, $01, $fc, $9f, $04, $01
099e5     FC 80 00 00 
099e9     FE E0 37 10 
099ed     D6 10 00 00 
099f1     00 00 00 00 | 	byte	$fc, $80, $00, $00, $fe, $e0, $37, $10, $d6, $10, $00, $00, $00, $00, $00, $00
099f5     FE 5C 10 00 
099f9     00 00 37 00 
099fd     00 00 00 01 
09a01     FC 9A 0F 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01
09a05     53 40 00 00 
09a09     00 00 37 11 
09a0d     0D 30 00 00 
09a11     00 0A 0F 01 | 	byte	$53, $40, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09a15     FC 8C 10 00 
09a19     00 00 37 00 
09a1d     00 00 00 10 
09a21     CA 20 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $10, $ca, $20, $00, $00
09a25     FE 70 00 00 
09a29     00 00 37 00 
09a2d     FE C0 C7 00 
09a31     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
09a35     53 4C 10 00 
09a39     00 00 37 00 
09a3d     00 0C 00 00 
09a41     FE 94 81 01 | 	byte	$53, $4c, $10, $00, $00, $00, $37, $00, $00, $0c, $00, $00, $fe, $94, $81, $01
09a45     53 60 00 00 
09a49     00 00 37 11 
09a4d     0D 30 00 00 
09a51     00 04 82 00 | 	byte	$53, $60, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $04, $82, $00
09a55     FE 7C 10 00 
09a59     00 00 37 00 
09a5d     00 00 00 01 
09a61     FC 9A 0F 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01
09a65     FC 50 00 00 
09a69     00 00 37 10 
09a6d     D6 10 00 00 
09a71     00 0A 0F 01 | 	byte	$fc, $50, $00, $00, $00, $00, $37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
09a75     53 6C 10 00 
09a79     00 00 37 00 
09a7d     00 00 00 00 
09a81     FE 9A 0F 01 | 	byte	$53, $6c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $01
09a85     1D 20 00 00 
09a89     00 00 37 11 
09a8d     0D 30 00 00 
09a91     00 0A 0F 01 | 	byte	$1d, $20, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09a95     FC 5C 10 00 
09a99     00 00 37 00 
09a9d     00 00 00 10 
09aa1     CA 20 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $10, $ca, $20, $00, $01
09aa5     53 40 00 00 
09aa9     00 00 37 01 
09aad     FC C0 C7 00 
09ab1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
09ab5     1D 2C 10 00 
09ab9     00 00 37 00 
09abd     00 0C 00 01 
09ac1     1D 9A 0F 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $01
09ac5     1D 80 00 00 
09ac9     00 00 37 01 
09acd     FC D0 40 00 
09ad1     00 02 0F 01 | 	byte	$1d, $80, $00, $00, $00, $00, $37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $01
09ad5     53 5C 10 00 
09ad9     00 00 37 00 
09add     00 0A 0F 02 
09ae1     80 90 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $37, $00, $00, $0a, $0f, $02, $80, $90, $00, $01
09ae5     FC 70 00 01 
09ae9     40 E0 47 10 
09aed     D6 10 00 00 
09af1     00 00 00 01 | 	byte	$fc, $70, $00, $01, $40, $e0, $47, $10, $d6, $10, $00, $00, $00, $00, $00, $01
09af5     1D 5C 10 00 
09af9     00 00 47 00 
09afd     00 00 00 02 
09b01     80 9A 0F 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $80, $9a, $0f, $01
09b05     53 30 00 00 
09b09     00 00 47 11 
09b0d     0D 30 00 00 
09b11     00 0A 0F 01 | 	byte	$53, $30, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09b15     FC 7C 10 00 
09b19     00 00 47 00 
09b1d     00 00 00 10 
09b21     CA 20 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
09b25     D6 10 00 00 
09b29     00 00 47 00 
09b2d     FE C0 C7 00 
09b31     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
09b35     53 2C 10 00 
09b39     00 00 47 00 
09b3d     00 0C 00 01 
09b41     40 94 81 01 | 	byte	$53, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $40, $94, $81, $01
09b45     53 70 00 00 
09b49     00 00 47 11 
09b4d     0D 30 00 00 
09b51     00 04 82 00 | 	byte	$53, $70, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $04, $82, $00
09b55     D6 1C 10 00 
09b59     00 00 47 00 
09b5d     00 00 00 02 
09b61     80 9A 0F 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00
09b65     E2 20 00 00 
09b69     00 00 47 10 
09b6d     D6 10 00 00 
09b71     00 0A 0F 01 | 	byte	$e2, $20, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
09b75     53 5C 10 00 
09b79     00 00 47 00 
09b7d     00 00 00 01 
09b81     40 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $40, $9a, $0f, $01
09b85     53 50 00 00 
09b89     00 00 47 11 
09b8d     0D 30 00 00 
09b91     00 0A 0F 00 | 	byte	$53, $50, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00
09b95     E2 6C 10 00 
09b99     00 00 47 00 
09b9d     00 00 00 10 
09ba1     CA 20 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
09ba5     1D 70 00 00 
09ba9     00 00 47 01 
09bad     FC C0 C7 00 
09bb1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
09bb5     53 5C 10 00 
09bb9     00 00 47 00 
09bbd     00 0C 00 00 
09bc1     FE 90 00 00 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $00, $fe, $90, $00, $00
09bc5     FE 80 00 00 
09bc9     00 00 47 01 
09bcd     FC D0 40 00 
09bd1     00 00 00 01 | 	byte	$fe, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $00, $00, $01
09bd5     1D 5C 10 00 
09bd9     00 00 47 00 
09bdd     00 0A 0F 02 
09be1     3A 9F 04 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $01
09be5     FC 80 00 01 
09be9     1D E0 47 10 
09bed     D6 10 00 00 
09bf1     00 00 00 00 | 	byte	$fc, $80, $00, $01, $1d, $e0, $47, $10, $d6, $10, $00, $00, $00, $00, $00, $00
09bf5     FE 5C 10 00 
09bf9     00 00 47 00 
09bfd     00 00 00 02 
09c01     3A 9A 0F 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01
09c05     53 40 00 00 
09c09     00 00 47 11 
09c0d     0D 30 00 00 
09c11     00 0A 0F 01 | 	byte	$53, $40, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09c15     FC 8C 10 00 
09c19     00 00 47 00 
09c1d     00 00 00 10 
09c21     CA 20 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
09c25     FE 70 00 00 
09c29     00 00 47 00 
09c2d     FE C0 C7 00 
09c31     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
09c35     53 4C 10 00 
09c39     00 00 47 00 
09c3d     00 0C 00 01 
09c41     1D 94 81 01 | 	byte	$53, $4c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $1d, $94, $81, $01
09c45     53 60 00 00 
09c49     00 00 47 11 
09c4d     0D 30 00 00 
09c51     00 04 82 00 | 	byte	$53, $60, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $04, $82, $00
09c55     FE 7C 10 00 
09c59     00 00 47 00 
09c5d     00 00 00 02 
09c61     3A 9A 0F 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01
09c65     FC 50 00 00 
09c69     00 00 47 10 
09c6d     D6 10 00 00 
09c71     00 0A 0F 01 | 	byte	$fc, $50, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
09c75     53 6C 10 00 
09c79     00 00 47 00 
09c7d     00 00 00 01 
09c81     1D 9A 0F 01 | 	byte	$53, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $01
09c85     1D 20 00 00 
09c89     00 00 47 11 
09c8d     0D 30 00 00 
09c91     00 0A 0F 01 | 	byte	$1d, $20, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09c95     FC 5C 10 00 
09c99     00 00 47 00 
09c9d     00 00 00 10 
09ca1     CA 20 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
09ca5     53 40 00 00 
09ca9     00 00 47 01 
09cad     FC C0 C7 00 
09cb1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
09cb5     1D 2C 10 00 
09cb9     00 00 47 00 
09cbd     00 0C 00 02 
09cc1     80 9A 0F 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $01
09cc5     1D 80 00 00 
09cc9     00 00 47 01 
09ccd     FC D0 40 00 
09cd1     00 02 0F 01 | 	byte	$1d, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $01
09cd5     53 5C 10 00 
09cd9     00 00 47 00 
09cdd     00 0A 0F 01 
09ce1     AC 90 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $01, $ac, $90, $00, $01
09ce5     FC 70 00 01 
09ce9     1D E0 59 10 
09ced     D6 10 00 00 
09cf1     00 00 00 01 | 	byte	$fc, $70, $00, $01, $1d, $e0, $59, $10, $d6, $10, $00, $00, $00, $00, $00, $01
09cf5     1D 5C 10 00 
09cf9     00 00 59 00 
09cfd     00 00 00 01 
09d01     AC 9A 0F 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $01
09d05     53 30 00 00 
09d09     00 00 59 11 
09d0d     0D 30 00 00 
09d11     00 0A 0F 01 | 	byte	$53, $30, $00, $00, $00, $00, $59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09d15     FC 7C 10 00 
09d19     00 00 59 00 
09d1d     00 00 00 10 
09d21     CA 20 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $10, $ca, $20, $00, $00
09d25     D6 10 00 00 
09d29     00 00 59 00 
09d2d     FE C0 C7 00 
09d31     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $59, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
09d35     53 2C 10 00 
09d39     00 00 59 00 
09d3d     00 0C 00 00 
09d41     D6 94 81 01 | 	byte	$53, $2c, $10, $00, $00, $00, $59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01
09d45     53 70 00 00 
09d49     00 00 59 11 
09d4d     0D 30 00 00 
09d51     00 04 82 00 | 	byte	$53, $70, $00, $00, $00, $00, $59, $11, $0d, $30, $00, $00, $00, $04, $82, $00
09d55     D6 1C 10 00 
09d59     00 00 59 00 
09d5d     00 00 00 01 
09d61     C5 9A 0F 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $01, $c5, $9a, $0f, $00
09d65     E2 20 00 01 
09d69     1D E0 47 10 
09d6d     D6 10 00 00 
09d71     00 0A 0F 01 | 	byte	$e2, $20, $00, $01, $1d, $e0, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
09d75     53 5C 10 00 
09d79     00 00 47 00 
09d7d     00 00 00 00 
09d81     E2 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $00, $e2, $9a, $0f, $01
09d85     53 50 00 00 
09d89     00 00 47 11 
09d8d     0D 30 00 00 
09d91     00 0A 0F 00 | 	byte	$53, $50, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00
09d95     E2 6C 10 00 
09d99     00 00 47 00 
09d9d     00 00 00 10 
09da1     CA 20 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
09da5     1D 70 00 00 
09da9     00 00 59 01 
09dad     FC C0 C7 00 
09db1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $59, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
09db5     53 5C 10 00 
09db9     00 00 59 00 
09dbd     00 0C 00 01 
09dc1     C5 90 00 00 | 	byte	$53, $5c, $10, $00, $00, $00, $59, $00, $00, $0c, $00, $01, $c5, $90, $00, $00
09dc5     FE 80 00 00 
09dc9     00 00 47 01 
09dcd     FC D0 40 00 
09dd1     00 00 00 01 | 	byte	$fe, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $00, $00, $01
09dd5     1D 5C 10 00 
09dd9     00 00 47 00 
09ddd     00 0A 0F 01 
09de1     FC 9F 04 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $01
09de5     FC 80 00 00 
09de9     FE E0 37 10 
09ded     D6 10 00 00 
09df1     00 00 00 00 | 	byte	$fc, $80, $00, $00, $fe, $e0, $37, $10, $d6, $10, $00, $00, $00, $00, $00, $00
09df5     FE 5C 10 00 
09df9     00 00 37 00 
09dfd     00 00 00 01 
09e01     FC 9A 0F 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01
09e05     53 40 00 00 
09e09     00 00 37 11 
09e0d     0D 30 00 00 
09e11     00 0A 0F 01 | 	byte	$53, $40, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09e15     FC 8C 10 00 
09e19     00 00 37 00 
09e1d     00 00 00 10 
09e21     CA 20 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $10, $ca, $20, $00, $00
09e25     FE 70 00 00 
09e29     00 00 37 00 
09e2d     FE C0 C7 00 
09e31     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
09e35     53 4C 10 00 
09e39     00 00 37 00 
09e3d     00 0C 00 00 
09e41     FE 94 81 01 | 	byte	$53, $4c, $10, $00, $00, $00, $37, $00, $00, $0c, $00, $00, $fe, $94, $81, $01
09e45     53 60 00 00 
09e49     00 00 37 11 
09e4d     0D 30 00 00 
09e51     00 04 82 00 | 	byte	$53, $60, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $04, $82, $00
09e55     FE 7C 10 00 
09e59     00 00 37 00 
09e5d     00 00 00 01 
09e61     FC 9A 0F 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01
09e65     FC 50 00 00 
09e69     00 00 37 10 
09e6d     D6 10 00 00 
09e71     00 0A 0F 01 | 	byte	$fc, $50, $00, $00, $00, $00, $37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
09e75     53 6C 10 00 
09e79     00 00 37 00 
09e7d     00 00 00 00 
09e81     FE 9A 0F 01 | 	byte	$53, $6c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $01
09e85     1D 20 00 00 
09e89     00 00 37 11 
09e8d     0D 30 00 00 
09e91     00 0A 0F 01 | 	byte	$1d, $20, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09e95     FC 5C 10 00 
09e99     00 00 37 00 
09e9d     00 00 00 10 
09ea1     CA 20 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $10, $ca, $20, $00, $01
09ea5     53 40 00 00 
09ea9     00 00 37 01 
09ead     FC C0 C7 00 
09eb1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
09eb5     1D 2C 10 00 
09eb9     00 00 37 00 
09ebd     00 0C 00 01 
09ec1     1D 9A 0F 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $01
09ec5     1D 80 00 00 
09ec9     00 00 37 01 
09ecd     FC D0 40 00 
09ed1     00 02 0F 01 | 	byte	$1d, $80, $00, $00, $00, $00, $37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $01
09ed5     53 5C 10 00 
09ed9     00 00 37 00 
09edd     00 0A 0F 01 
09ee1     FC 9F 04 01 | 	byte	$53, $5c, $10, $00, $00, $00, $37, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $01
09ee5     FC 70 00 00 
09ee9     00 00 37 10 
09eed     D6 10 00 00 
09ef1     00 00 00 01 | 	byte	$fc, $70, $00, $00, $00, $00, $37, $10, $d6, $10, $00, $00, $00, $00, $00, $01
09ef5     1D 5C 10 00 
09ef9     00 00 37 00 
09efd     00 00 00 01 
09f01     FC 9A 0F 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01
09f05     53 30 00 00 
09f09     00 00 37 11 
09f0d     0D 30 00 00 
09f11     00 0A 0F 01 | 	byte	$53, $30, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
09f15     FC 7C 10 00 
09f19     00 00 37 00 
09f1d     00 00 00 10 
09f21     CA 20 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $10, $ca, $20, $00, $00
09f25     D6 10 00 00 
09f29     00 00 37 00 
09f2d     FE C0 C7 00 
09f31     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
09f35     53 2C 10 00 
09f39     00 00 37 00 
09f3d     00 0C 00 00 
09f41     FE 94 81 01 | 	byte	$53, $2c, $10, $00, $00, $00, $37, $00, $00, $0c, $00, $00, $fe, $94, $81, $01
09f45     53 70 00 00 
09f49     00 00 37 11 
09f4d     0D 30 00 00 
09f51     00 04 82 00 | 	byte	$53, $70, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $04, $82, $00
09f55     D6 1C 10 00 
09f59     00 00 37 00 
09f5d     00 00 00 01 
09f61     FC 9A 0F 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00
09f65     E2 20 00 00 
09f69     00 00 37 10 
09f6d     D6 10 00 00 
09f71     00 0A 0F 01 | 	byte	$e2, $20, $00, $00, $00, $00, $37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
09f75     53 5C 10 00 
09f79     00 00 37 00 
09f7d     00 00 00 00 
09f81     FE 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $01
09f85     53 50 00 00 
09f89     00 00 37 11 
09f8d     0D 30 00 00 
09f91     00 0A 0F 00 | 	byte	$53, $50, $00, $00, $00, $00, $37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00
09f95     E2 6C 10 00 
09f99     00 00 37 00 
09f9d     00 00 00 10 
09fa1     CA 20 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $37, $00, $00, $00, $00, $10, $ca, $20, $00, $01
09fa5     1D 70 00 00 
09fa9     00 00 37 01 
09fad     FC C0 C7 00 
09fb1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
09fb5     53 5C 10 00 
09fb9     00 00 37 00 
09fbd     00 0C 00 01 
09fc1     1D 9A 0F 00 | 	byte	$53, $5c, $10, $00, $00, $00, $37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $00
09fc5     FE 80 00 00 
09fc9     00 00 37 01 
09fcd     FC D0 40 00 
09fd1     00 02 0F 01 | 	byte	$fe, $80, $00, $00, $00, $00, $37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $01
09fd5     1D 5C 10 00 
09fd9     00 00 37 00 
09fdd     00 0A 0F 02 
09fe1     80 90 00 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $37, $00, $00, $0a, $0f, $02, $80, $90, $00, $01
09fe5     FC 80 00 01 
09fe9     40 E0 47 10 
09fed     D6 10 00 00 
09ff1     00 00 00 00 | 	byte	$fc, $80, $00, $01, $40, $e0, $47, $10, $d6, $10, $00, $00, $00, $00, $00, $00
09ff5     FE 5C 10 00 
09ff9     00 00 47 00 
09ffd     00 00 00 02 
0a001     80 9A 0F 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $80, $9a, $0f, $01
0a005     53 40 00 00 
0a009     00 00 47 11 
0a00d     0D 30 00 00 
0a011     00 0A 0F 01 | 	byte	$53, $40, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a015     FC 8C 10 00 
0a019     00 00 47 00 
0a01d     00 00 00 10 
0a021     CA 20 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
0a025     FE 70 00 00 
0a029     00 00 47 00 
0a02d     FE C0 C7 00 
0a031     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
0a035     53 4C 10 00 
0a039     00 00 47 00 
0a03d     00 0C 00 01 
0a041     40 94 81 01 | 	byte	$53, $4c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $40, $94, $81, $01
0a045     53 60 00 00 
0a049     00 00 47 11 
0a04d     0D 30 00 00 
0a051     00 04 82 00 | 	byte	$53, $60, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $04, $82, $00
0a055     FE 7C 10 00 
0a059     00 00 47 00 
0a05d     00 00 00 02 
0a061     80 9A 0F 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $80, $9a, $0f, $01
0a065     FC 50 00 00 
0a069     00 00 47 10 
0a06d     D6 10 00 00 
0a071     00 0A 0F 01 | 	byte	$fc, $50, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a075     53 6C 10 00 
0a079     00 00 47 00 
0a07d     00 00 00 01 
0a081     40 9A 0F 01 | 	byte	$53, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $40, $9a, $0f, $01
0a085     1D 20 00 00 
0a089     00 00 47 11 
0a08d     0D 30 00 00 
0a091     00 0A 0F 01 | 	byte	$1d, $20, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a095     FC 5C 10 00 
0a099     00 00 47 00 
0a09d     00 00 00 10 
0a0a1     CA 20 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
0a0a5     53 40 00 00 
0a0a9     00 00 47 01 
0a0ad     FC C0 C7 00 
0a0b1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
0a0b5     1D 2C 10 00 
0a0b9     00 00 47 00 
0a0bd     00 0C 00 00 
0a0c1     FE 90 00 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $00, $fe, $90, $00, $01
0a0c5     1D 80 00 00 
0a0c9     00 00 47 01 
0a0cd     FC D0 40 00 
0a0d1     00 00 00 01 | 	byte	$1d, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $00, $00, $01
0a0d5     53 5C 10 00 
0a0d9     00 00 47 00 
0a0dd     00 0A 0F 02 
0a0e1     80 90 00 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $02, $80, $90, $00, $01
0a0e5     FC 70 00 00 
0a0e9     00 00 47 10 
0a0ed     D6 10 00 00 
0a0f1     00 00 00 01 | 	byte	$fc, $70, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $00, $00, $01
0a0f5     1D 5C 10 00 
0a0f9     00 00 47 00 
0a0fd     00 00 00 02 
0a101     80 9A 0F 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $80, $9a, $0f, $01
0a105     53 30 00 00 
0a109     00 00 47 11 
0a10d     0D 30 00 00 
0a111     00 0A 0F 01 | 	byte	$53, $30, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a115     FC 7C 10 00 
0a119     00 00 47 00 
0a11d     00 00 00 10 
0a121     CA 20 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
0a125     D6 10 00 00 
0a129     00 00 47 00 
0a12d     FE C0 C7 00 
0a131     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
0a135     53 2C 10 00 
0a139     00 00 47 00 
0a13d     00 0C 00 01 
0a141     40 94 81 01 | 	byte	$53, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $40, $94, $81, $01
0a145     53 70 00 00 
0a149     00 00 47 11 
0a14d     0D 30 00 00 
0a151     00 04 82 00 | 	byte	$53, $70, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $04, $82, $00
0a155     D6 1C 10 00 
0a159     00 00 47 00 
0a15d     00 00 00 02 
0a161     80 9A 0F 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00
0a165     E2 20 00 00 
0a169     00 00 47 10 
0a16d     D6 10 00 00 
0a171     00 0A 0F 01 | 	byte	$e2, $20, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a175     53 5C 10 00 
0a179     00 00 47 00 
0a17d     00 00 00 01 
0a181     40 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $40, $9a, $0f, $01
0a185     53 50 00 00 
0a189     00 00 47 11 
0a18d     0D 30 00 00 
0a191     00 0A 0F 00 | 	byte	$53, $50, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00
0a195     E2 6C 10 00 
0a199     00 00 47 00 
0a19d     00 00 00 10 
0a1a1     CA 20 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
0a1a5     1D 70 00 00 
0a1a9     00 00 47 01 
0a1ad     FC C0 C7 00 
0a1b1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
0a1b5     53 5C 10 00 
0a1b9     00 00 47 00 
0a1bd     00 0C 00 00 
0a1c1     FE 90 00 00 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $00, $fe, $90, $00, $00
0a1c5     FE 80 00 00 
0a1c9     00 00 47 01 
0a1cd     FC D0 40 00 
0a1d1     00 00 00 01 | 	byte	$fe, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $00, $00, $01
0a1d5     1D 5C 10 00 
0a1d9     00 00 47 00 
0a1dd     00 0A 0F 02 
0a1e1     3A 9F 04 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $01
0a1e5     FC 80 00 01 
0a1e9     1D E0 47 10 
0a1ed     D6 10 00 00 
0a1f1     00 00 00 00 | 	byte	$fc, $80, $00, $01, $1d, $e0, $47, $10, $d6, $10, $00, $00, $00, $00, $00, $00
0a1f5     FE 5C 10 00 
0a1f9     00 00 47 00 
0a1fd     00 00 00 02 
0a201     3A 9A 0F 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01
0a205     53 40 00 00 
0a209     00 00 47 11 
0a20d     0D 30 00 00 
0a211     00 0A 0F 01 | 	byte	$53, $40, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a215     FC 8C 10 00 
0a219     00 00 47 00 
0a21d     00 00 00 10 
0a221     CA 20 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
0a225     FE 70 00 00 
0a229     00 00 47 00 
0a22d     FE C0 C7 00 
0a231     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
0a235     53 4C 10 00 
0a239     00 00 47 00 
0a23d     00 0C 00 01 
0a241     1D 94 81 01 | 	byte	$53, $4c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $1d, $94, $81, $01
0a245     53 60 00 00 
0a249     00 00 47 11 
0a24d     0D 30 00 00 
0a251     00 04 82 00 | 	byte	$53, $60, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $04, $82, $00
0a255     FE 7C 10 00 
0a259     00 00 47 00 
0a25d     00 00 00 02 
0a261     3A 9A 0F 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01
0a265     FC 50 00 00 
0a269     00 00 47 10 
0a26d     D6 10 00 00 
0a271     00 0A 0F 01 | 	byte	$fc, $50, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a275     53 6C 10 00 
0a279     00 00 47 00 
0a27d     00 00 00 01 
0a281     1D 9A 0F 01 | 	byte	$53, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $01
0a285     1D 20 00 00 
0a289     00 00 47 11 
0a28d     0D 30 00 00 
0a291     00 0A 0F 01 | 	byte	$1d, $20, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a295     FC 5C 10 00 
0a299     00 00 47 00 
0a29d     00 00 00 10 
0a2a1     CA 20 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
0a2a5     53 40 00 00 
0a2a9     00 00 47 01 
0a2ad     FC C0 C7 00 
0a2b1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
0a2b5     1D 2C 10 00 
0a2b9     00 00 47 00 
0a2bd     00 0C 00 02 
0a2c1     80 9A 0F 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $01
0a2c5     1D 80 00 00 
0a2c9     00 00 47 01 
0a2cd     FC D0 40 00 
0a2d1     00 02 0F 01 | 	byte	$1d, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $01
0a2d5     53 5C 10 00 
0a2d9     00 00 47 00 
0a2dd     00 0A 0F 02 
0a2e1     3A 9F 04 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $01
0a2e5     FC 70 00 00 
0a2e9     00 00 47 10 
0a2ed     D6 10 00 00 
0a2f1     00 00 00 01 | 	byte	$fc, $70, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $00, $00, $01
0a2f5     1D 5C 10 00 
0a2f9     00 00 47 00 
0a2fd     00 00 00 02 
0a301     3A 9A 0F 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01
0a305     53 30 00 00 
0a309     00 00 47 11 
0a30d     0D 30 00 00 
0a311     00 0A 0F 01 | 	byte	$53, $30, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a315     FC 7C 10 00 
0a319     00 00 47 00 
0a31d     00 00 00 10 
0a321     CA 20 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
0a325     D6 10 00 00 
0a329     00 00 47 00 
0a32d     FE C0 C7 00 
0a331     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
0a335     53 2C 10 00 
0a339     00 00 47 00 
0a33d     00 0C 00 01 
0a341     1D 94 81 01 | 	byte	$53, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $1d, $94, $81, $01
0a345     53 70 00 00 
0a349     00 00 47 11 
0a34d     0D 30 00 00 
0a351     00 04 82 00 | 	byte	$53, $70, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $04, $82, $00
0a355     D6 1C 10 00 
0a359     00 00 47 00 
0a35d     00 00 00 02 
0a361     3A 9A 0F 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00
0a365     E2 20 00 00 
0a369     00 00 47 10 
0a36d     D6 10 00 00 
0a371     00 0A 0F 01 | 	byte	$e2, $20, $00, $00, $00, $00, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a375     53 5C 10 00 
0a379     00 00 47 00 
0a37d     00 00 00 01 
0a381     1D 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $01
0a385     53 50 00 00 
0a389     00 00 47 11 
0a38d     0D 30 00 00 
0a391     00 0A 0F 00 | 	byte	$53, $50, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00
0a395     E2 6C 10 00 
0a399     00 00 47 00 
0a39d     00 00 00 10 
0a3a1     CA 20 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $01
0a3a5     1D 70 00 00 
0a3a9     00 00 47 01 
0a3ad     FC C0 C7 00 
0a3b1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
0a3b5     53 5C 10 00 
0a3b9     00 00 47 00 
0a3bd     00 0C 00 02 
0a3c1     80 9A 0F 00 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $00
0a3c5     FE 80 00 00 
0a3c9     00 00 47 01 
0a3cd     FC D0 40 00 
0a3d1     00 02 0F 01 | 	byte	$fe, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $01
0a3d5     1D 5C 10 00 
0a3d9     00 00 47 00 
0a3dd     00 0A 0F 01 
0a3e1     AC 90 00 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $01, $ac, $90, $00, $01
0a3e5     FC 80 00 01 
0a3e9     1D E0 59 10 
0a3ed     D6 10 00 00 
0a3f1     00 00 00 00 | 	byte	$fc, $80, $00, $01, $1d, $e0, $59, $10, $d6, $10, $00, $00, $00, $00, $00, $00
0a3f5     FE 5C 10 00 
0a3f9     00 00 59 00 
0a3fd     00 00 00 01 
0a401     AC 9A 0F 01 | 	byte	$fe, $5c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $01
0a405     53 40 00 00 
0a409     00 00 59 11 
0a40d     0D 30 00 00 
0a411     00 0A 0F 01 | 	byte	$53, $40, $00, $00, $00, $00, $59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a415     FC 8C 10 00 
0a419     00 00 59 00 
0a41d     00 00 00 10 
0a421     CA 20 00 00 | 	byte	$fc, $8c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $10, $ca, $20, $00, $00
0a425     FE 70 00 00 
0a429     00 00 59 00 
0a42d     FE C0 C7 00 
0a431     00 00 00 01 | 	byte	$fe, $70, $00, $00, $00, $00, $59, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
0a435     53 4C 10 00 
0a439     00 00 59 00 
0a43d     00 0C 00 00 
0a441     D6 94 81 01 | 	byte	$53, $4c, $10, $00, $00, $00, $59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01
0a445     53 60 00 00 
0a449     00 00 59 11 
0a44d     0D 30 00 00 
0a451     00 04 82 00 | 	byte	$53, $60, $00, $00, $00, $00, $59, $11, $0d, $30, $00, $00, $00, $04, $82, $00
0a455     FE 7C 10 00 
0a459     00 00 59 00 
0a45d     00 00 00 01 
0a461     AC 9A 0F 01 | 	byte	$fe, $7c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $01
0a465     FC 50 00 00 
0a469     00 00 59 10 
0a46d     D6 10 00 00 
0a471     00 0A 0F 01 | 	byte	$fc, $50, $00, $00, $00, $00, $59, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a475     53 6C 10 00 
0a479     00 00 59 00 
0a47d     00 00 00 00 
0a481     D6 9A 0F 01 | 	byte	$53, $6c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $00, $d6, $9a, $0f, $01
0a485     1D 20 00 00 
0a489     00 00 59 11 
0a48d     0D 30 00 00 
0a491     00 0A 0F 01 | 	byte	$1d, $20, $00, $00, $00, $00, $59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a495     FC 5C 10 00 
0a499     00 00 59 00 
0a49d     00 00 00 10 
0a4a1     CA 20 00 01 | 	byte	$fc, $5c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $10, $ca, $20, $00, $01
0a4a5     53 40 00 00 
0a4a9     00 00 59 01 
0a4ad     FC C0 C7 00 
0a4b1     00 00 00 01 | 	byte	$53, $40, $00, $00, $00, $00, $59, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
0a4b5     1D 2C 10 00 
0a4b9     00 00 59 00 
0a4bd     00 0C 00 00 
0a4c1     D6 94 81 01 | 	byte	$1d, $2c, $10, $00, $00, $00, $59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01
0a4c5     1D 80 00 00 
0a4c9     00 00 59 01 
0a4cd     FC D0 40 00 
0a4d1     00 04 82 01 | 	byte	$1d, $80, $00, $00, $00, $00, $59, $01, $fc, $d0, $40, $00, $00, $04, $82, $01
0a4d5     53 5C 10 00 
0a4d9     00 00 59 00 
0a4dd     00 0A 0F 01 
0a4e1     C5 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $59, $00, $00, $0a, $0f, $01, $c5, $9a, $0f, $01
0a4e5     FC 70 00 01 
0a4e9     1D E0 47 10 
0a4ed     D6 10 00 00 
0a4f1     00 0A 0F 01 | 	byte	$fc, $70, $00, $01, $1d, $e0, $47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a4f5     1D 5C 10 00 
0a4f9     00 00 47 00 
0a4fd     00 00 00 01 
0a501     C5 9A 0F 01 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $c5, $9a, $0f, $01
0a505     53 30 00 00 
0a509     00 00 47 11 
0a50d     0D 30 00 00 
0a511     00 0A 0F 01 | 	byte	$53, $30, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $01
0a515     FC 7C 10 00 
0a519     00 00 47 00 
0a51d     00 00 00 10 
0a521     CA 20 00 00 | 	byte	$fc, $7c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $10, $ca, $20, $00, $00
0a525     D6 10 00 00 
0a529     00 00 47 00 
0a52d     FE C0 C7 00 
0a531     00 00 00 01 | 	byte	$d6, $10, $00, $00, $00, $00, $47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01
0a535     53 2C 10 00 
0a539     00 00 47 00 
0a53d     00 0C 00 00 
0a541     E2 90 00 01 | 	byte	$53, $2c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $00, $e2, $90, $00, $01
0a545     53 70 00 00 
0a549     00 00 47 11 
0a54d     0D 30 00 00 
0a551     00 00 00 00 | 	byte	$53, $70, $00, $00, $00, $00, $47, $11, $0d, $30, $00, $00, $00, $00, $00, $00
0a555     D6 1C 10 00 
0a559     00 00 47 00 
0a55d     00 00 00 01 
0a561     C5 9A 0F 00 | 	byte	$d6, $1c, $10, $00, $00, $00, $47, $00, $00, $00, $00, $01, $c5, $9a, $0f, $00
0a565     E2 20 00 00 
0a569     00 00 59 10 
0a56d     D6 10 00 00 
0a571     00 0A 0F 01 | 	byte	$e2, $20, $00, $00, $00, $00, $59, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01
0a575     53 5C 10 00 
0a579     00 00 59 00 
0a57d     00 00 00 00 
0a581     E2 9A 0F 01 | 	byte	$53, $5c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $00, $e2, $9a, $0f, $01
0a585     53 50 00 00 
0a589     00 00 59 11 
0a58d     0D 30 00 00 
0a591     00 0A 0F 00 | 	byte	$53, $50, $00, $00, $00, $00, $59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00
0a595     E2 6C 10 00 
0a599     00 00 59 00 
0a59d     00 00 00 10 
0a5a1     CA 20 00 01 | 	byte	$e2, $6c, $10, $00, $00, $00, $59, $00, $00, $00, $00, $10, $ca, $20, $00, $01
0a5a5     1D 70 00 00 
0a5a9     00 00 47 01 
0a5ad     FC C0 C7 00 
0a5b1     00 00 00 01 | 	byte	$1d, $70, $00, $00, $00, $00, $47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01
0a5b5     53 5C 10 00 
0a5b9     00 00 47 00 
0a5bd     00 0C 00 01 
0a5c1     C5 90 00 00 | 	byte	$53, $5c, $10, $00, $00, $00, $47, $00, $00, $0c, $00, $01, $c5, $90, $00, $00
0a5c5     FE 80 00 00 
0a5c9     00 00 47 01 
0a5cd     FC D0 40 00 
0a5d1     00 00 00 01 | 	byte	$fe, $80, $00, $00, $00, $00, $47, $01, $fc, $d0, $40, $00, $00, $00, $00, $01
0a5d5     1D 5C 10 00 
0a5d9     00 00 47 00 
0a5dd     00 0A 0F 01 
0a5e1     FC 9F 04 00 | 	byte	$1d, $5c, $10, $00, $00, $00, $47, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $00
0a5e5     00 00 00 00 
0a5e9     FE E0 37 10 
0a5ed     D6 10 00 00 
0a5f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $e0, $37, $10, $d6, $10, $00, $00, $00, $00, $00, $00
0a5f5     00 00 00 00 
0a5f9     00 00       | 	byte	$00[6]
0a5fb     37 00 00 00 
0a5ff     00 01 FC 9A 
0a603     0F 00 00 00 
0a607     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $00, $00, $00, $00, $00, $00
0a60b     37 11 0D 30 
0a60f     00 00 00 0A 
0a613     0F 00 00 00 
0a617     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0a61b     37 00 00 00 
0a61f     00 10 CA 20 
0a623     00 01 1D 11 
0a627     03 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $11, $03, $00, $00, $00
0a62b     37 00 FE C0 
0a62f     C7 00 00 00 
0a633     00 00 00 01 
0a637     06 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $01, $06, $00, $00, $00
0a63b     37 00 00 0C 
0a63f     00 00 FE 94 
0a643     81 00 FE 23 
0a647     06 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $fe, $23, $06, $00, $00, $00
0a64b     37 11 0D 30 
0a64f     00 00 00 04 
0a653     82 00 00 33 
0a657     06 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $33, $06, $00, $00, $00
0a65b     37 00 00 00 
0a65f     00 01 FC 9A 
0a663     0F 00 AA 40 
0a667     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $aa, $40, $00, $00, $00, $00
0a66b     37 10 D6 10 
0a66f     00 00 00 0A 
0a673     0F 00 00 50 
0a677     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $50, $00, $00, $00, $00
0a67b     37 00 00 00 
0a67f     00 00 FE 9A 
0a683     0F 00 BE 60 
0a687     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $00, $be, $60, $00, $00, $00, $00
0a68b     37 11 0D 30 
0a68f     00 00 00 0A 
0a693     0F 00 00 70 
0a697     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $70, $00, $00, $00, $00
0a69b     37 00 00 00 
0a69f     00 10 CA 20 
0a6a3     00 00 FE 8C 
0a6a7     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $fe, $8c, $10, $00, $00, $00
0a6ab     37 01 FC C0 
0a6af     C7 00 00 00 
0a6b3     00 00 00 00 
0a6b7     00 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6bb     37 00 00 0C 
0a6bf     00 01 1D 9A 
0a6c3     0F 00 BE 51 
0a6c7     02 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $00, $be, $51, $02, $00, $00, $00
0a6cb     37 01 FC D0 
0a6cf     40 00 00 02 
0a6d3     0F 00 00 01 
0a6d7     02 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $01, $02, $00, $00, $00
0a6db     37 00 00 0A 
0a6df     0F 01 FC 9F 
0a6e3     04 00 AA 53 
0a6e7     05 00 00 00 | 	byte	$37, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $00, $aa, $53, $05, $00, $00, $00
0a6eb     37 10 D6 10 
0a6ef     00 00 00 00 
0a6f3     00 00 00 03 
0a6f7     05 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $03, $05, $00, $00, $00
0a6fb     37 00 00 00 
0a6ff     00 01 FC 9A 
0a703     0F 00 FE 14 
0a707     91 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $fe, $14, $91, $00, $00, $00
0a70b     37 11 0D 30 
0a70f     00 00 00 0A 
0a713     0F 00 00 24 
0a717     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $24, $00, $00, $00, $00
0a71b     37 00 00 00 
0a71f     00 10 CA 20 
0a723     00 00 00 34 
0a727     92 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $34, $92, $00, $00, $00
0a72b     37 00 FE C0 
0a72f     C7 00 00 00 
0a733     00 00 00 44 
0a737     00 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $44, $00, $00, $00, $00
0a73b     37 00 00 0C 
0a73f     00 00 FE 94 
0a743     81 00 00 54 
0a747     93 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $00, $54, $93, $00, $00, $00
0a74b     37 11 0D 30 
0a74f     00 00 00 04 
0a753     82 00 00 64 
0a757     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $64, $00, $00, $00, $00
0a75b     37 00 00 00 
0a75f     00 01 FC 9A 
0a763     0F 00 00 74 
0a767     94 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $00, $74, $94, $00, $00, $00
0a76b     37 10 D6 10 
0a76f     00 00 00 0A 
0a773     0F 00 FE 80 
0a777     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $fe, $80, $00, $00, $00, $00
0a77b     37 00 00 00 
0a77f     00 00 FE 9A 
0a783     0F 00 D6 70 
0a787     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $00, $d6, $70, $00, $00, $00, $00
0a78b     37 11 0D 30 
0a78f     00 00 00 0A 
0a793     0F 00 E2 8C 
0a797     10 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $e2, $8c, $10, $00, $00, $00
0a79b     37 00 00 00 
0a79f     00 10 CA 20 
0a7a3     00 00 FE 60 
0a7a7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $fe, $60, $00, $00, $00, $00
0a7ab     37 01 FC C0 
0a7af     C7 00 00 00 
0a7b3     00 00 D6 7C 
0a7b7     10 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $d6, $7c, $10, $00, $00, $00
0a7bb     37 00 00 0C 
0a7bf     00 01 1D 9A 
0a7c3     0F 01 1D 50 
0a7c7     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $01, $1d, $50, $00, $00, $00, $00
0a7cb     37 01 FC D0 
0a7cf     40 00 00 02 
0a7d3     0F 00 FE 6C 
0a7d7     10 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $fe, $6c, $10, $00, $00, $00
0a7db     37 00 00 0A 
0a7df     0F 02 80 90 
0a7e3     00 01 40 40 
0a7e7     00 01 40 E0 | 	byte	$37, $00, $00, $0a, $0f, $02, $80, $90, $00, $01, $40, $40, $00, $01, $40, $e0
0a7eb     47 10 D6 10 
0a7ef     00 00 00 00 
0a7f3     00 00 00 00 
0a7f7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7fb     47 00 00 00 
0a7ff     00 02 80 9A 
0a803     0F 01 1D 5C 
0a807     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $01, $1d, $5c, $10, $00, $00, $00
0a80b     47 11 0D 30 
0a80f     00 00 00 0A 
0a813     0F 00 00 00 
0a817     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0a81b     47 00 00 00 
0a81f     00 10 CA 20 
0a823     00 00 AA 60 
0a827     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $60, $00, $00, $00, $00
0a82b     47 00 FE C0 
0a82f     C7 00 00 00 
0a833     00 00 00 00 
0a837     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a83b     47 00 00 0C 
0a83f     00 01 40 94 
0a843     81 00 AA 4C 
0a847     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $40, $94, $81, $00, $aa, $4c, $10, $00, $00, $00
0a84b     47 11 0D 30 
0a84f     00 00 00 04 
0a853     82 00 00 00 
0a857     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0a85b     47 00 00 00 
0a85f     00 02 80 9A 
0a863     0F 00 AA 30 
0a867     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $aa, $30, $00, $00, $00, $00
0a86b     47 10 D6 10 
0a86f     00 00 00 0A 
0a873     0F 00 00 00 
0a877     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0a87b     47 00 00 00 
0a87f     00 01 40 9A 
0a883     0F 00 BE 80 
0a887     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $40, $9a, $0f, $00, $be, $80, $00, $00, $00, $00
0a88b     47 11 0D 30 
0a88f     00 00 00 0A 
0a893     0F 00 00 00 
0a897     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0a89b     47 00 00 00 
0a89f     00 10 CA 20 
0a8a3     00 00 AA 5C 
0a8a7     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $5c, $10, $00, $00, $00
0a8ab     47 01 FC C0 
0a8af     C7 00 00 00 
0a8b3     00 00 00 00 
0a8b7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8bb     47 00 00 0C 
0a8bf     00 00 FE 90 
0a8c3     00 00 BE 11 
0a8c7     03 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $00, $fe, $90, $00, $00, $be, $11, $03, $00, $00, $00
0a8cb     47 01 FC D0 
0a8cf     40 00 00 00 
0a8d3     00 00 00 01 
0a8d7     03 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $01, $03, $00, $00, $00
0a8db     47 00 00 0A 
0a8df     0F 02 80 90 
0a8e3     00 00 AA 23 
0a8e7     05 00 00 00 | 	byte	$47, $00, $00, $0a, $0f, $02, $80, $90, $00, $00, $aa, $23, $05, $00, $00, $00
0a8eb     47 10 D6 10 
0a8ef     00 00 00 00 
0a8f3     00 00 00 33 
0a8f7     05 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $33, $05, $00, $00, $00
0a8fb     47 00 00 00 
0a8ff     00 02 80 9A 
0a903     0F 00 00 44 
0a907     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $00, $44, $91, $00, $00, $00
0a90b     47 11 0D 30 
0a90f     00 00 00 0A 
0a913     0F 00 00 54 
0a917     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $54, $00, $00, $00, $00
0a91b     47 00 00 00 
0a91f     00 10 CA 20 
0a923     00 00 00 64 
0a927     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $64, $00, $00, $00, $00
0a92b     47 00 FE C0 
0a92f     C7 00 00 00 
0a933     00 00 00 64 
0a937     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00
0a93b     47 00 00 0C 
0a93f     00 01 40 94 
0a943     81 00 00 74 
0a947     92 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $40, $94, $81, $00, $00, $74, $92, $00, $00, $00
0a94b     47 11 0D 30 
0a94f     00 00 00 04 
0a953     82 00 00 74 
0a957     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $74, $00, $00, $00, $00
0a95b     47 00 00 00 
0a95f     00 02 80 9A 
0a963     0F 00 00 84 
0a967     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $00, $84, $00, $00, $00, $00
0a96b     47 10 D6 10 
0a96f     00 00 00 0A 
0a973     0F 00 00 84 
0a977     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $84, $00, $00, $00, $00
0a97b     47 00 00 00 
0a97f     00 01 40 9A 
0a983     0F 00 00 04 
0a987     93 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $40, $9a, $0f, $00, $00, $04, $93, $00, $00, $00
0a98b     47 11 0D 30 
0a98f     00 00 00 0A 
0a993     0F 00 00 04 
0a997     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $04, $00, $00, $00, $00
0a99b     47 00 00 00 
0a99f     00 10 CA 20 
0a9a3     00 00 D6 80 
0a9a7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $d6, $80, $00, $00, $00, $00
0a9ab     47 01 FC C0 
0a9af     C7 00 00 00 
0a9b3     00 00 AA 7C 
0a9b7     10 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $aa, $7c, $10, $00, $00, $00
0a9bb     47 00 00 0C 
0a9bf     00 00 FE 90 
0a9c3     00 00 FE 60 
0a9c7     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $00, $fe, $90, $00, $00, $fe, $60, $00, $00, $00, $00
0a9cb     47 01 FC D0 
0a9cf     40 00 00 00 
0a9d3     00 00 00 00 
0a9d7     00 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9db     47 00 00 0A 
0a9df     0F 02 3A 9F 
0a9e3     04 01 1D 10 
0a9e7     00 01 1D E0 | 	byte	$47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $01, $1d, $10, $00, $01, $1d, $e0
0a9eb     47 10 D6 10 
0a9ef     00 00 00 00 
0a9f3     00 00 00 00 
0a9f7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9fb     47 00 00 00 
0a9ff     00 02 3A 9A 
0aa03     0F 01 1D 5C 
0aa07     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01, $1d, $5c, $10, $00, $00, $00
0aa0b     47 11 0D 30 
0aa0f     00 00 00 0A 
0aa13     0F 00 00 00 
0aa17     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0aa1b     47 00 00 00 
0aa1f     00 10 CA 20 
0aa23     00 00 BE 20 
0aa27     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $20, $00, $00, $00, $00
0aa2b     47 00 FE C0 
0aa2f     C7 00 00 00 
0aa33     00 00 00 00 
0aa37     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa3b     47 00 00 0C 
0aa3f     00 01 1D 94 
0aa43     81 00 AA 5C 
0aa47     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $1d, $94, $81, $00, $aa, $5c, $10, $00, $00, $00
0aa4b     47 11 0D 30 
0aa4f     00 00 00 04 
0aa53     82 00 00 00 
0aa57     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0aa5b     47 00 00 00 
0aa5f     00 02 3A 9A 
0aa63     0F 00 BE 30 
0aa67     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $be, $30, $00, $00, $00, $00
0aa6b     47 10 D6 10 
0aa6f     00 00 00 0A 
0aa73     0F 00 00 00 
0aa77     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0aa7b     47 00 00 00 
0aa7f     00 01 1D 9A 
0aa83     0F 00 D6 40 
0aa87     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $00, $d6, $40, $00, $00, $00, $00
0aa8b     47 11 0D 30 
0aa8f     00 00 00 0A 
0aa93     0F 00 00 00 
0aa97     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0aa9b     47 00 00 00 
0aa9f     00 10 CA 20 
0aaa3     00 00 AA 5C 
0aaa7     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $5c, $10, $00, $00, $00
0aaab     47 01 FC C0 
0aaaf     C7 00 00 00 
0aab3     00 00 00 00 
0aab7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aabb     47 00 00 0C 
0aabf     00 02 80 9A 
0aac3     0F 00 D6 11 
0aac7     03 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $00, $d6, $11, $03, $00, $00, $00
0aacb     47 01 FC D0 
0aacf     40 00 00 02 
0aad3     0F 00 00 01 
0aad7     03 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $01, $03, $00, $00, $00
0aadb     47 00 00 0A 
0aadf     0F 02 3A 9F 
0aae3     04 00 BE 23 
0aae7     05 00 00 00 | 	byte	$47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $00, $be, $23, $05, $00, $00, $00
0aaeb     47 10 D6 10 
0aaef     00 00 00 00 
0aaf3     00 00 00 33 
0aaf7     05 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $33, $05, $00, $00, $00
0aafb     47 00 00 00 
0aaff     00 02 3A 9A 
0ab03     0F 00 00 40 
0ab07     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $00, $40, $00, $00, $00, $00
0ab0b     47 11 0D 30 
0ab0f     00 00 00 0A 
0ab13     0F 00 00 40 
0ab17     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $40, $00, $00, $00, $00
0ab1b     47 00 00 00 
0ab1f     00 10 CA 20 
0ab23     00 01 1D 44 
0ab27     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $44, $91, $00, $00, $00
0ab2b     47 00 FE C0 
0ab2f     C7 00 00 00 
0ab33     00 00 00 44 
0ab37     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $44, $00, $00, $00, $00
0ab3b     47 00 00 0C 
0ab3f     00 01 1D 94 
0ab43     81 00 00 54 
0ab47     92 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $1d, $94, $81, $00, $00, $54, $92, $00, $00, $00
0ab4b     47 11 0D 30 
0ab4f     00 00 00 04 
0ab53     82 00 00 54 
0ab57     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $54, $00, $00, $00, $00
0ab5b     47 00 00 00 
0ab5f     00 02 3A 9A 
0ab63     0F 00 00 64 
0ab67     93 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $00, $64, $93, $00, $00, $00
0ab6b     47 10 D6 10 
0ab6f     00 00 00 0A 
0ab73     0F 00 00 74 
0ab77     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $74, $00, $00, $00, $00
0ab7b     47 00 00 00 
0ab7f     00 01 1D 9A 
0ab83     0F 00 00 84 
0ab87     94 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $00, $00, $84, $94, $00, $00, $00
0ab8b     47 11 0D 30 
0ab8f     00 00 00 0A 
0ab93     0F 00 00 84 
0ab97     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $84, $00, $00, $00, $00
0ab9b     47 00 00 00 
0ab9f     00 10 CA 20 
0aba3     00 00 BE 50 
0aba7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $50, $00, $00, $00, $00
0abab     47 01 FC C0 
0abaf     C7 00 00 00 
0abb3     00 00 00 00 
0abb7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abbb     47 00 00 0C 
0abbf     00 02 80 9A 
0abc3     0F 00 00 00 
0abc7     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $00, $00, $00, $00, $00, $00, $00
0abcb     47 01 FC D0 
0abcf     40 00 00 02 
0abd3     0F 00 00 00 
0abd7     00 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00, $00, $00, $00
0abdb     47 00 00 0A 
0abdf     0F 01 AC 90 
0abe3     00 00 AA 54 
0abe7     91 01 1D E0 | 	byte	$47, $00, $00, $0a, $0f, $01, $ac, $90, $00, $00, $aa, $54, $91, $01, $1d, $e0
0abeb     59 10 D6 10 
0abef     00 00 00 00 
0abf3     00 00 00 04 
0abf7     92 00 00 00 | 	byte	$59, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $04, $92, $00, $00, $00
0abfb     59 00 00 00 
0abff     00 01 AC 9A 
0ac03     0F 01 AC 54 
0ac07     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $01, $ac, $54, $00, $00, $00, $00
0ac0b     59 11 0D 30 
0ac0f     00 00 00 0A 
0ac13     0F 00 AA 5C 
0ac17     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $aa, $5c, $10, $00, $00, $00
0ac1b     59 00 00 00 
0ac1f     00 10 CA 20 
0ac23     00 00 BE 54 
0ac27     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $54, $00, $00, $00, $00
0ac2b     59 00 FE C0 
0ac2f     C7 00 00 00 
0ac33     00 01 AC 5C 
0ac37     10 00 00 00 | 	byte	$59, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01, $ac, $5c, $10, $00, $00, $00
0ac3b     59 00 00 0C 
0ac3f     00 00 D6 94 
0ac43     81 01 AC 54 
0ac47     00 00 00 00 | 	byte	$59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01, $ac, $54, $00, $00, $00, $00
0ac4b     59 11 0D 30 
0ac4f     00 00 00 04 
0ac53     82 00 BE 5C 
0ac57     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $be, $5c, $10, $00, $00, $00
0ac5b     59 00 00 00 
0ac5f     00 01 AC 9A 
0ac63     0F 00 D6 54 
0ac67     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $00, $d6, $54, $00, $00, $00, $00
0ac6b     59 10 D6 10 
0ac6f     00 00 00 0A 
0ac73     0F 01 AC 5C 
0ac77     10 00 00 00 | 	byte	$59, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01, $ac, $5c, $10, $00, $00, $00
0ac7b     59 00 00 00 
0ac7f     00 00 D6 9A 
0ac83     0F 01 AC 54 
0ac87     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $00, $d6, $9a, $0f, $01, $ac, $54, $00, $00, $00, $00
0ac8b     59 11 0D 30 
0ac8f     00 00 00 0A 
0ac93     0F 00 D6 5C 
0ac97     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $d6, $5c, $10, $00, $00, $00
0ac9b     59 00 00 00 
0ac9f     00 10 CA 20 
0aca3     00 00 AA 54 
0aca7     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $54, $00, $00, $00, $00
0acab     59 01 FC C0 
0acaf     C7 00 00 00 
0acb3     00 01 AC 5C 
0acb7     10 00 00 00 | 	byte	$59, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01, $ac, $5c, $10, $00, $00, $00
0acbb     59 00 00 0C 
0acbf     00 00 D6 94 
0acc3     81 01 AC 54 
0acc7     00 00 00 00 | 	byte	$59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01, $ac, $54, $00, $00, $00, $00
0accb     59 01 FC D0 
0accf     40 00 00 04 
0acd3     82 00 AA 5C 
0acd7     10 00 00 00 | 	byte	$59, $01, $fc, $d0, $40, $00, $00, $04, $82, $00, $aa, $5c, $10, $00, $00, $00
0acdb     59 00 00 0A 
0acdf     0F 01 C5 9A 
0ace3     0F 00 BE 54 
0ace7     00 01 1D E0 | 	byte	$59, $00, $00, $0a, $0f, $01, $c5, $9a, $0f, $00, $be, $54, $00, $01, $1d, $e0
0aceb     47 10 D6 10 
0acef     00 00 00 0A 
0acf3     0F 00 00 04 
0acf7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $04, $00, $00, $00, $00
0acfb     47 00 00 00 
0acff     00 01 C5 9A 
0ad03     0F 01 C5 54 
0ad07     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $c5, $9a, $0f, $01, $c5, $54, $00, $00, $00, $00
0ad0b     47 11 0D 30 
0ad0f     00 00 00 0A 
0ad13     0F 00 BE 5C 
0ad17     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $be, $5c, $10, $00, $00, $00
0ad1b     47 00 00 00 
0ad1f     00 10 CA 20 
0ad23     00 00 D6 54 
0ad27     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $d6, $54, $00, $00, $00, $00
0ad2b     47 00 FE C0 
0ad2f     C7 00 00 00 
0ad33     00 01 C5 5C 
0ad37     10 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01, $c5, $5c, $10, $00, $00, $00
0ad3b     47 00 00 0C 
0ad3f     00 00 E2 90 
0ad43     00 01 C5 54 
0ad47     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $00, $e2, $90, $00, $01, $c5, $54, $00, $00, $00, $00
0ad4b     47 11 0D 30 
0ad4f     00 00 00 00 
0ad53     00 00 D6 5C 
0ad57     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $00, $00, $00, $d6, $5c, $10, $00, $00, $00
0ad5b     47 00 00 00 
0ad5f     00 01 C5 9A 
0ad63     0F 00 E2 54 
0ad67     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $c5, $9a, $0f, $00, $e2, $54, $00, $00, $00, $00
0ad6b     59 10 D6 10 
0ad6f     00 00 00 0A 
0ad73     0F 01 C5 5C 
0ad77     10 00 00 00 | 	byte	$59, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01, $c5, $5c, $10, $00, $00, $00
0ad7b     59 00 00 00 
0ad7f     00 00 E2 9A 
0ad83     0F 01 C5 54 
0ad87     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $00, $e2, $9a, $0f, $01, $c5, $54, $00, $00, $00, $00
0ad8b     59 11 0D 30 
0ad8f     00 00 00 0A 
0ad93     0F 00 E2 5C 
0ad97     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $e2, $5c, $10, $00, $00, $00
0ad9b     59 00 00 00 
0ad9f     00 10 CA 20 
0ada3     00 00 BE 54 
0ada7     10 00 00 00 | 	byte	$59, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $54, $10, $00, $00, $00
0adab     47 01 FC C0 
0adaf     C7 00 00 00 
0adb3     00 01 C5 5C 
0adb7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01, $c5, $5c, $00, $00, $00, $00
0adbb     47 00 00 0C 
0adbf     00 01 C5 90 
0adc3     00 01 AC 54 
0adc7     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $c5, $90, $00, $01, $ac, $54, $10, $00, $00, $00
0adcb     47 01 FC D0 
0adcf     40 00 00 00 
0add3     00 00 BE 5C 
0add7     00 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $be, $5c, $00, $00, $00, $00
0addb     47 00 00 0A 
0addf     0F 01 FC 9F 
0ade3     04 00 FE 54 
0ade7     00 00 FE E0 | 	byte	$47, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $00, $fe, $54, $00, $00, $fe, $e0
0adeb     37 10 D6 10 
0adef     00 00 00 00 
0adf3     00 00 00 04 
0adf7     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $04, $00, $00, $00, $00
0adfb     37 00 00 00 
0adff     00 01 FC 9A 
0ae03     0F 00 00 02 
0ae07     07 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $00, $02, $07, $00, $00, $00
0ae0b     37 11 0D 30 
0ae0f     00 00 00 0A 
0ae13     0F 00 00 02 
0ae17     07 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $02, $07, $00, $00, $00
0ae1b     37 00 00 00 
0ae1f     00 10 CA 20 
0ae23     00 01 1D 11 
0ae27     03 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $11, $03, $00, $00, $00
0ae2b     37 00 FE C0 
0ae2f     C7 00 00 00 
0ae33     00 00 00 01 
0ae37     06 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $01, $06, $00, $00, $00
0ae3b     37 00 00 0C 
0ae3f     00 00 FE 94 
0ae43     81 00 FE 23 
0ae47     06 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $fe, $23, $06, $00, $00, $00
0ae4b     37 11 0D 30 
0ae4f     00 00 00 04 
0ae53     82 00 00 33 
0ae57     06 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $33, $06, $00, $00, $00
0ae5b     37 00 00 00 
0ae5f     00 01 FC 9A 
0ae63     0F 00 AA 40 
0ae67     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $aa, $40, $00, $00, $00, $00
0ae6b     37 10 D6 10 
0ae6f     00 00 00 0A 
0ae73     0F 00 00 50 
0ae77     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $50, $00, $00, $00, $00
0ae7b     37 00 00 00 
0ae7f     00 00 FE 9A 
0ae83     0F 00 8F 50 
0ae87     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $00, $8f, $50, $00, $00, $00, $00
0ae8b     37 11 0D 30 
0ae8f     00 00 00 0A 
0ae93     0F 00 00 70 
0ae97     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $70, $00, $00, $00, $00
0ae9b     37 00 00 00 
0ae9f     00 10 CA 20 
0aea3     00 00 FE 8C 
0aea7     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $fe, $8c, $10, $00, $00, $00
0aeab     37 01 FC C0 
0aeaf     C7 00 00 00 
0aeb3     00 00 00 00 
0aeb7     00 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aebb     37 00 00 0C 
0aebf     00 01 1D 9A 
0aec3     0F 00 8F 51 
0aec7     02 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $00, $8f, $51, $02, $00, $00, $00
0aecb     37 01 FC D0 
0aecf     40 00 00 02 
0aed3     0F 00 00 01 
0aed7     02 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $01, $02, $00, $00, $00
0aedb     37 00 00 0A 
0aedf     0F 01 FC 9F 
0aee3     04 00 7F 53 
0aee7     05 00 00 00 | 	byte	$37, $00, $00, $0a, $0f, $01, $fc, $9f, $04, $00, $7f, $53, $05, $00, $00, $00
0aeeb     37 10 D6 10 
0aeef     00 00 00 00 
0aef3     00 00 00 03 
0aef7     05 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $03, $05, $00, $00, $00
0aefb     37 00 00 00 
0aeff     00 01 FC 9A 
0af03     0F 00 8F 54 
0af07     91 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $8f, $54, $91, $00, $00, $00
0af0b     37 11 0D 30 
0af0f     00 00 00 0A 
0af13     0F 00 00 24 
0af17     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $24, $00, $00, $00, $00
0af1b     37 00 00 00 
0af1f     00 10 CA 20 
0af23     00 00 00 34 
0af27     92 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $34, $92, $00, $00, $00
0af2b     37 00 FE C0 
0af2f     C7 00 00 00 
0af33     00 00 00 44 
0af37     00 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $44, $00, $00, $00, $00
0af3b     37 00 00 0C 
0af3f     00 00 FE 94 
0af43     81 00 00 54 
0af47     93 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $00, $54, $93, $00, $00, $00
0af4b     37 11 0D 30 
0af4f     00 00 00 04 
0af53     82 00 00 64 
0af57     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $64, $00, $00, $00, $00
0af5b     37 00 00 00 
0af5f     00 01 FC 9A 
0af63     0F 00 00 74 
0af67     94 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $00, $74, $94, $00, $00, $00
0af6b     37 10 D6 10 
0af6f     00 00 00 0A 
0af73     0F 00 87 50 
0af77     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $87, $50, $00, $00, $00, $00
0af7b     37 00 00 00 
0af7f     00 00 FE 9A 
0af83     0F 00 7F 50 
0af87     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $00, $7f, $50, $00, $00, $00, $00
0af8b     37 11 0D 30 
0af8f     00 00 00 0A 
0af93     0F 00 87 5C 
0af97     10 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $87, $5c, $10, $00, $00, $00
0af9b     37 00 00 00 
0af9f     00 10 CA 20 
0afa3     00 00 8F 50 
0afa7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $8f, $50, $00, $00, $00, $00
0afab     37 01 FC C0 
0afaf     C7 00 00 00 
0afb3     00 00 7F 5C 
0afb7     10 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $7f, $5c, $10, $00, $00, $00
0afbb     37 00 00 0C 
0afbf     00 01 1D 9A 
0afc3     0F 00 AA 50 
0afc7     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $1d, $9a, $0f, $00, $aa, $50, $00, $00, $00, $00
0afcb     37 01 FC D0 
0afcf     40 00 00 02 
0afd3     0F 00 8F 5C 
0afd7     10 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $8f, $5c, $10, $00, $00, $00
0afdb     37 00 00 0A 
0afdf     0F 02 80 90 
0afe3     00 00 A0 50 
0afe7     00 01 40 E0 | 	byte	$37, $00, $00, $0a, $0f, $02, $80, $90, $00, $00, $a0, $50, $00, $01, $40, $e0
0afeb     47 10 D6 10 
0afef     00 00 00 00 
0aff3     00 00 00 00 
0aff7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0affb     47 00 00 00 
0afff     00 02 80 9A 
0b003     0F 01 1D 5C 
0b007     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $01, $1d, $5c, $10, $00, $00, $00
0b00b     47 11 0D 30 
0b00f     00 00 00 0A 
0b013     0F 00 00 00 
0b017     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b01b     47 00 00 00 
0b01f     00 10 CA 20 
0b023     00 00 AA 50 
0b027     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $50, $00, $00, $00, $00
0b02b     47 00 FE C0 
0b02f     C7 00 00 00 
0b033     00 00 00 00 
0b037     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b03b     47 00 00 0C 
0b03f     00 01 40 94 
0b043     81 00 AA 4C 
0b047     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $40, $94, $81, $00, $aa, $4c, $10, $00, $00, $00
0b04b     47 11 0D 30 
0b04f     00 00 00 04 
0b053     82 00 00 00 
0b057     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0b05b     47 00 00 00 
0b05f     00 02 80 9A 
0b063     0F 00 BE 50 
0b067     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $be, $50, $00, $00, $00, $00
0b06b     47 10 D6 10 
0b06f     00 00 00 0A 
0b073     0F 00 00 00 
0b077     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b07b     47 00 00 00 
0b07f     00 01 40 9A 
0b083     0F 00 AA 50 
0b087     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $40, $9a, $0f, $00, $aa, $50, $00, $00, $00, $00
0b08b     47 11 0D 30 
0b08f     00 00 00 0A 
0b093     0F 00 00 00 
0b097     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b09b     47 00 00 00 
0b09f     00 10 CA 20 
0b0a3     00 00 BE 5C 
0b0a7     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $5c, $10, $00, $00, $00
0b0ab     47 01 FC C0 
0b0af     C7 00 00 00 
0b0b3     00 00 00 00 
0b0b7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0bb     47 00 00 0C 
0b0bf     00 00 FE 90 
0b0c3     00 00 AA 51 
0b0c7     02 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $00, $fe, $90, $00, $00, $aa, $51, $02, $00, $00, $00
0b0cb     47 01 FC D0 
0b0cf     40 00 00 00 
0b0d3     00 00 00 01 
0b0d7     02 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $01, $02, $00, $00, $00
0b0db     47 00 00 0A 
0b0df     0F 02 80 90 
0b0e3     00 00 A0 53 
0b0e7     05 00 00 00 | 	byte	$47, $00, $00, $0a, $0f, $02, $80, $90, $00, $00, $a0, $53, $05, $00, $00, $00
0b0eb     47 10 D6 10 
0b0ef     00 00 00 00 
0b0f3     00 00 00 33 
0b0f7     05 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $33, $05, $00, $00, $00
0b0fb     47 00 00 00 
0b0ff     00 02 80 9A 
0b103     0F 00 00 44 
0b107     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $00, $44, $91, $00, $00, $00
0b10b     47 11 0D 30 
0b10f     00 00 00 0A 
0b113     0F 00 00 54 
0b117     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $54, $00, $00, $00, $00
0b11b     47 00 00 00 
0b11f     00 10 CA 20 
0b123     00 00 00 64 
0b127     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $64, $00, $00, $00, $00
0b12b     47 00 FE C0 
0b12f     C7 00 00 00 
0b133     00 00 00 64 
0b137     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00
0b13b     47 00 00 0C 
0b13f     00 01 40 94 
0b143     81 00 00 74 
0b147     92 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $40, $94, $81, $00, $00, $74, $92, $00, $00, $00
0b14b     47 11 0D 30 
0b14f     00 00 00 04 
0b153     82 00 00 74 
0b157     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $74, $00, $00, $00, $00
0b15b     47 00 00 00 
0b15f     00 02 80 9A 
0b163     0F 00 00 84 
0b167     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $00, $84, $00, $00, $00, $00
0b16b     47 10 D6 10 
0b16f     00 00 00 0A 
0b173     0F 00 87 50 
0b177     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $87, $50, $00, $00, $00, $00
0b17b     47 00 00 00 
0b17f     00 01 40 9A 
0b183     0F 00 7F 50 
0b187     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $40, $9a, $0f, $00, $7f, $50, $00, $00, $00, $00
0b18b     47 11 0D 30 
0b18f     00 00 00 0A 
0b193     0F 00 87 5C 
0b197     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $87, $5c, $10, $00, $00, $00
0b19b     47 00 00 00 
0b19f     00 10 CA 20 
0b1a3     00 00 8F 50 
0b1a7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $8f, $50, $00, $00, $00, $00
0b1ab     47 01 FC C0 
0b1af     C7 00 00 00 
0b1b3     00 00 7F 5C 
0b1b7     10 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $7f, $5c, $10, $00, $00, $00
0b1bb     47 00 00 0C 
0b1bf     00 00 FE 90 
0b1c3     00 00 AA 50 
0b1c7     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $00, $fe, $90, $00, $00, $aa, $50, $00, $00, $00, $00
0b1cb     47 01 FC D0 
0b1cf     40 00 00 00 
0b1d3     00 00 8F 5C 
0b1d7     10 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $8f, $5c, $10, $00, $00, $00
0b1db     47 00 00 0A 
0b1df     0F 02 3A 9F 
0b1e3     04 00 BE 50 
0b1e7     00 01 1D E0 | 	byte	$47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $00, $be, $50, $00, $01, $1d, $e0
0b1eb     47 10 D6 10 
0b1ef     00 00 00 00 
0b1f3     00 00 00 00 
0b1f7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1fb     47 00 00 00 
0b1ff     00 02 3A 9A 
0b203     0F 01 1D 5C 
0b207     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $01, $1d, $5c, $10, $00, $00, $00
0b20b     47 11 0D 30 
0b20f     00 00 00 0A 
0b213     0F 00 00 00 
0b217     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b21b     47 00 00 00 
0b21f     00 10 CA 20 
0b223     00 00 D6 50 
0b227     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $d6, $50, $00, $00, $00, $00
0b22b     47 00 FE C0 
0b22f     C7 00 00 00 
0b233     00 00 00 00 
0b237     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b23b     47 00 00 0C 
0b23f     00 01 1D 94 
0b243     81 00 AA 5C 
0b247     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $1d, $94, $81, $00, $aa, $5c, $10, $00, $00, $00
0b24b     47 11 0D 30 
0b24f     00 00 00 04 
0b253     82 00 00 00 
0b257     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0b25b     47 00 00 00 
0b25f     00 02 3A 9A 
0b263     0F 00 E2 50 
0b267     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $e2, $50, $00, $00, $00, $00
0b26b     47 10 D6 10 
0b26f     00 00 00 0A 
0b273     0F 00 00 00 
0b277     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b27b     47 00 00 00 
0b27f     00 01 1D 9A 
0b283     0F 00 D6 50 
0b287     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $00, $d6, $50, $00, $00, $00, $00
0b28b     47 11 0D 30 
0b28f     00 00 00 0A 
0b293     0F 00 00 00 
0b297     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b29b     47 00 00 00 
0b29f     00 10 CA 20 
0b2a3     00 00 AA 5C 
0b2a7     10 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $5c, $10, $00, $00, $00
0b2ab     47 01 FC C0 
0b2af     C7 00 00 00 
0b2b3     00 00 00 00 
0b2b7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2bb     47 00 00 0C 
0b2bf     00 02 80 9A 
0b2c3     0F 00 D6 51 
0b2c7     03 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $00, $d6, $51, $03, $00, $00, $00
0b2cb     47 01 FC D0 
0b2cf     40 00 00 02 
0b2d3     0F 00 00 01 
0b2d7     03 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $01, $03, $00, $00, $00
0b2db     47 00 00 0A 
0b2df     0F 02 3A 9F 
0b2e3     04 00 BE 53 
0b2e7     05 00 00 00 | 	byte	$47, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $00, $be, $53, $05, $00, $00, $00
0b2eb     47 10 D6 10 
0b2ef     00 00 00 00 
0b2f3     00 00 00 33 
0b2f7     05 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $33, $05, $00, $00, $00
0b2fb     47 00 00 00 
0b2ff     00 02 3A 9A 
0b303     0F 00 00 40 
0b307     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $00, $40, $00, $00, $00, $00
0b30b     47 11 0D 30 
0b30f     00 00 00 0A 
0b313     0F 00 00 40 
0b317     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $40, $00, $00, $00, $00
0b31b     47 00 00 00 
0b31f     00 10 CA 20 
0b323     00 00 00 44 
0b327     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $44, $91, $00, $00, $00
0b32b     47 00 FE C0 
0b32f     C7 00 00 00 
0b333     00 00 00 44 
0b337     00 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $44, $00, $00, $00, $00
0b33b     47 00 00 0C 
0b33f     00 01 1D 94 
0b343     81 00 00 54 
0b347     92 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $1d, $94, $81, $00, $00, $54, $92, $00, $00, $00
0b34b     47 11 0D 30 
0b34f     00 00 00 04 
0b353     82 00 00 54 
0b357     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $54, $00, $00, $00, $00
0b35b     47 00 00 00 
0b35f     00 02 3A 9A 
0b363     0F 00 00 64 
0b367     93 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $00, $64, $93, $00, $00, $00
0b36b     47 10 D6 10 
0b36f     00 00 00 0A 
0b373     0F 00 00 74 
0b377     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $74, $00, $00, $00, $00
0b37b     47 00 00 00 
0b37f     00 01 1D 9A 
0b383     0F 00 00 84 
0b387     94 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $00, $00, $84, $94, $00, $00, $00
0b38b     47 11 0D 30 
0b38f     00 00 00 0A 
0b393     0F 00 00 84 
0b397     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $84, $00, $00, $00, $00
0b39b     47 00 00 00 
0b39f     00 10 CA 20 
0b3a3     00 00 BE 50 
0b3a7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $50, $00, $00, $00, $00
0b3ab     47 01 FC C0 
0b3af     C7 00 00 00 
0b3b3     00 00 00 00 
0b3b7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3bb     47 00 00 0C 
0b3bf     00 02 80 9A 
0b3c3     0F 00 00 00 
0b3c7     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $02, $80, $9a, $0f, $00, $00, $00, $00, $00, $00, $00
0b3cb     47 01 FC D0 
0b3cf     40 00 00 02 
0b3d3     0F 00 00 00 
0b3d7     00 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00, $00, $00, $00
0b3db     47 00 00 0A 
0b3df     0F 01 AC 90 
0b3e3     00 00 AA 54 
0b3e7     91 01 1D E0 | 	byte	$47, $00, $00, $0a, $0f, $01, $ac, $90, $00, $00, $aa, $54, $91, $01, $1d, $e0
0b3eb     59 10 D6 10 
0b3ef     00 00 00 00 
0b3f3     00 00 00 04 
0b3f7     92 00 00 00 | 	byte	$59, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $04, $92, $00, $00, $00
0b3fb     59 00 00 00 
0b3ff     00 01 AC 9A 
0b403     0F 01 AC 54 
0b407     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $01, $ac, $54, $00, $00, $00, $00
0b40b     59 11 0D 30 
0b40f     00 00 00 0A 
0b413     0F 00 AA 5C 
0b417     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $aa, $5c, $10, $00, $00, $00
0b41b     59 00 00 00 
0b41f     00 10 CA 20 
0b423     00 00 BE 54 
0b427     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $54, $00, $00, $00, $00
0b42b     59 00 FE C0 
0b42f     C7 00 00 00 
0b433     00 01 AC 5C 
0b437     10 00 00 00 | 	byte	$59, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01, $ac, $5c, $10, $00, $00, $00
0b43b     59 00 00 0C 
0b43f     00 00 D6 94 
0b443     81 01 AC 54 
0b447     00 00 00 00 | 	byte	$59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01, $ac, $54, $00, $00, $00, $00
0b44b     59 11 0D 30 
0b44f     00 00 00 04 
0b453     82 00 BE 5C 
0b457     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $be, $5c, $10, $00, $00, $00
0b45b     59 00 00 00 
0b45f     00 01 AC 9A 
0b463     0F 00 D6 54 
0b467     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $01, $ac, $9a, $0f, $00, $d6, $54, $00, $00, $00, $00
0b46b     59 10 D6 10 
0b46f     00 00 00 0A 
0b473     0F 01 AC 5C 
0b477     10 00 00 00 | 	byte	$59, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01, $ac, $5c, $10, $00, $00, $00
0b47b     59 00 00 00 
0b47f     00 00 D6 9A 
0b483     0F 01 AC 54 
0b487     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $00, $d6, $9a, $0f, $01, $ac, $54, $00, $00, $00, $00
0b48b     59 11 0D 30 
0b48f     00 00 00 0A 
0b493     0F 00 D6 5C 
0b497     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $d6, $5c, $10, $00, $00, $00
0b49b     59 00 00 00 
0b49f     00 10 CA 20 
0b4a3     00 00 AA 54 
0b4a7     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $54, $00, $00, $00, $00
0b4ab     59 01 FC C0 
0b4af     C7 00 00 00 
0b4b3     00 01 AC 5C 
0b4b7     10 00 00 00 | 	byte	$59, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01, $ac, $5c, $10, $00, $00, $00
0b4bb     59 00 00 0C 
0b4bf     00 00 D6 94 
0b4c3     81 01 AC 54 
0b4c7     00 00 00 00 | 	byte	$59, $00, $00, $0c, $00, $00, $d6, $94, $81, $01, $ac, $54, $00, $00, $00, $00
0b4cb     59 01 FC D0 
0b4cf     40 00 00 04 
0b4d3     82 00 AA 5C 
0b4d7     10 00 00 00 | 	byte	$59, $01, $fc, $d0, $40, $00, $00, $04, $82, $00, $aa, $5c, $10, $00, $00, $00
0b4db     59 00 00 0A 
0b4df     0F 01 C5 9A 
0b4e3     0F 00 BE 54 
0b4e7     00 01 1D E0 | 	byte	$59, $00, $00, $0a, $0f, $01, $c5, $9a, $0f, $00, $be, $54, $00, $01, $1d, $e0
0b4eb     47 10 D6 10 
0b4ef     00 00 00 0A 
0b4f3     0F 00 00 04 
0b4f7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $04, $00, $00, $00, $00
0b4fb     47 00 00 00 
0b4ff     00 01 C5 9A 
0b503     0F 01 C5 54 
0b507     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $c5, $9a, $0f, $01, $c5, $54, $00, $00, $00, $00
0b50b     47 11 0D 30 
0b50f     00 00 00 0A 
0b513     0F 00 BE 5C 
0b517     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $be, $5c, $10, $00, $00, $00
0b51b     47 00 00 00 
0b51f     00 10 CA 20 
0b523     00 00 D6 54 
0b527     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $d6, $54, $00, $00, $00, $00
0b52b     47 00 FE C0 
0b52f     C7 00 00 00 
0b533     00 01 C5 5C 
0b537     10 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $01, $c5, $5c, $10, $00, $00, $00
0b53b     47 00 00 0C 
0b53f     00 00 E2 90 
0b543     00 01 C5 54 
0b547     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $00, $e2, $90, $00, $01, $c5, $54, $00, $00, $00, $00
0b54b     47 11 0D 30 
0b54f     00 00 00 00 
0b553     00 00 D6 5C 
0b557     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $00, $00, $00, $d6, $5c, $10, $00, $00, $00
0b55b     47 00 00 00 
0b55f     00 01 C5 9A 
0b563     0F 00 E2 54 
0b567     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $c5, $9a, $0f, $00, $e2, $54, $00, $00, $00, $00
0b56b     59 10 D6 10 
0b56f     00 00 00 0A 
0b573     0F 01 C5 5C 
0b577     10 00 00 00 | 	byte	$59, $10, $d6, $10, $00, $00, $00, $0a, $0f, $01, $c5, $5c, $10, $00, $00, $00
0b57b     59 00 00 00 
0b57f     00 00 E2 9A 
0b583     0F 01 C5 54 
0b587     00 00 00 00 | 	byte	$59, $00, $00, $00, $00, $00, $e2, $9a, $0f, $01, $c5, $54, $00, $00, $00, $00
0b58b     59 11 0D 30 
0b58f     00 00 00 0A 
0b593     0F 00 E2 5C 
0b597     10 00 00 00 | 	byte	$59, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $e2, $5c, $10, $00, $00, $00
0b59b     59 00 00 00 
0b59f     00 10 CA 20 
0b5a3     00 00 BE 54 
0b5a7     10 00 00 00 | 	byte	$59, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $54, $10, $00, $00, $00
0b5ab     47 01 FC C0 
0b5af     C7 00 00 00 
0b5b3     00 01 C5 5C 
0b5b7     00 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01, $c5, $5c, $00, $00, $00, $00
0b5bb     47 00 00 0C 
0b5bf     00 01 C5 90 
0b5c3     00 01 AC 54 
0b5c7     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $c5, $90, $00, $01, $ac, $54, $10, $00, $00, $00
0b5cb     47 01 FC D0 
0b5cf     40 00 00 00 
0b5d3     00 00 BE 5C 
0b5d7     00 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $be, $5c, $00, $00, $00, $00
0b5db     47 00 00 0A 
0b5df     0F 02 80 9F 
0b5e3     04 01 1D 11 
0b5e7     02 00 FE E0 | 	byte	$47, $00, $00, $0a, $0f, $02, $80, $9f, $04, $01, $1d, $11, $02, $00, $fe, $e0
0b5eb     37 10 D6 10 
0b5ef     00 00 00 00 
0b5f3     00 00 00 01 
0b5f7     02 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $01, $02, $00, $00, $00
0b5fb     37 00 00 00 
0b5ff     00 02 80 9A 
0b603     0F 00 FE 23 
0b607     03 00 00 00 | 	byte	$37, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $fe, $23, $03, $00, $00, $00
0b60b     37 11 0D 30 
0b60f     00 00 00 0A 
0b613     0F 00 00 33 
0b617     06 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $33, $06, $00, $00, $00
0b61b     37 00 00 00 
0b61f     00 10 CA 20 
0b623     00 00 00 40 
0b627     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $40, $00, $00, $00, $00
0b62b     37 00 FE C0 
0b62f     C7 00 00 00 
0b633     00 00 00 54 
0b637     91 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $54, $91, $00, $00, $00
0b63b     37 00 00 0C 
0b63f     00 01 40 94 
0b643     81 00 00 64 
0b647     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $40, $94, $81, $00, $00, $64, $00, $00, $00, $00
0b64b     37 11 0D 30 
0b64f     00 00 00 04 
0b653     82 00 00 74 
0b657     92 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $74, $92, $00, $00, $00
0b65b     37 00 00 00 
0b65f     00 02 80 9A 
0b663     0F 00 00 84 
0b667     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $00, $84, $00, $00, $00, $00
0b66b     37 10 D6 10 
0b66f     00 00 00 0A 
0b673     0F 00 00 84 
0b677     93 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $84, $93, $00, $00, $00
0b67b     37 00 00 00 
0b67f     00 01 40 9A 
0b683     0F 00 FE 5C 
0b687     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $40, $9a, $0f, $00, $fe, $5c, $10, $00, $00, $00
0b68b     37 11 0D 30 
0b68f     00 00 00 0A 
0b693     0F 00 00 00 
0b697     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b69b     37 00 00 00 
0b69f     00 10 CA 20 
0b6a3     00 00 FE 80 
0b6a7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $fe, $80, $00, $00, $00, $00
0b6ab     37 01 FC C0 
0b6af     C7 00 00 00 
0b6b3     00 00 7F 5C 
0b6b7     10 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $7f, $5c, $10, $00, $00, $00
0b6bb     37 00 00 0C 
0b6bf     00 01 68 9A 
0b6c3     0F 00 D6 70 
0b6c7     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $68, $9a, $0f, $00, $d6, $70, $00, $00, $00, $00
0b6cb     37 01 FC D0 
0b6cf     40 00 00 02 
0b6d3     0F 00 00 00 
0b6d7     00 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00, $00, $00, $00
0b6db     37 00 00 0A 
0b6df     0F 02 3A 9F 
0b6e3     04 00 FE 5C 
0b6e7     10 01 1D E0 | 	byte	$37, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $00, $fe, $5c, $10, $01, $1d, $e0
0b6eb     47 10 D6 10 
0b6ef     00 00 00 00 
0b6f3     00 00 00 00 
0b6f7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6fb     47 00 00 00 
0b6ff     00 02 3A 9A 
0b703     0F 00 BE 44 
0b707     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $be, $44, $91, $00, $00, $00
0b70b     47 11 0D 30 
0b70f     00 00 00 0A 
0b713     0F 00 00 54 
0b717     91 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $54, $91, $00, $00, $00
0b71b     47 00 00 00 
0b71f     00 10 CA 20 
0b723     00 00 00 64 
0b727     92 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $64, $92, $00, $00, $00
0b72b     47 00 FE C0 
0b72f     C7 00 00 00 
0b733     00 00 00 74 
0b737     93 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $74, $93, $00, $00, $00
0b73b     47 00 00 0C 
0b73f     00 01 1D 94 
0b743     81 00 BE 5C 
0b747     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $1d, $94, $81, $00, $be, $5c, $10, $00, $00, $00
0b74b     47 11 0D 30 
0b74f     00 00 00 04 
0b753     82 00 00 00 
0b757     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0b75b     47 00 00 00 
0b75f     00 02 3A 9A 
0b763     0F 00 AA 40 
0b767     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $aa, $40, $00, $00, $00, $00
0b76b     47 10 D6 10 
0b76f     00 00 00 0A 
0b773     0F 00 BE 8C 
0b777     10 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $be, $8c, $10, $00, $00, $00
0b77b     47 00 00 00 
0b77f     00 01 1D 9A 
0b783     0F 01 1D 7A 
0b787     0F 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $01, $1d, $7a, $0f, $00, $00, $00
0b78b     47 11 0D 30 
0b78f     00 00 00 0A 
0b793     0F 00 AA 7C 
0b797     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $aa, $7c, $10, $00, $00, $00
0b79b     47 00 00 00 
0b79f     00 10 CA 20 
0b7a3     00 00 8F 60 
0b7a7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $8f, $60, $00, $00, $00, $00
0b7ab     47 01 FC C0 
0b7af     C7 00 00 00 
0b7b3     00 01 1D 6C 
0b7b7     10 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $01, $1d, $6c, $10, $00, $00, $00
0b7bb     47 00 00 0C 
0b7bf     00 01 40 9A 
0b7c3     0F 00 8F 5A 
0b7c7     0F 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $40, $9a, $0f, $00, $8f, $5a, $0f, $00, $00, $00
0b7cb     47 01 FC D0 
0b7cf     40 00 00 02 
0b7d3     0F 00 87 5A 
0b7d7     07 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $87, $5a, $07, $00, $00, $00
0b7db     47 00 00 0A 
0b7df     0F 01 FC 90 
0b7e3     00 00 7F 40 
0b7e7     00 00 FE E0 | 	byte	$47, $00, $00, $0a, $0f, $01, $fc, $90, $00, $00, $7f, $40, $00, $00, $fe, $e0
0b7eb     37 10 D6 10 
0b7ef     00 00 00 00 
0b7f3     00 00 00 00 
0b7f7     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7fb     37 00 00 00 
0b7ff     00 01 FC 9A 
0b803     0F 01 1D 5C 
0b807     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $01, $1d, $5c, $10, $00, $00, $00
0b80b     37 11 0D 30 
0b80f     00 00 00 0A 
0b813     0F 00 00 00 
0b817     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b81b     37 00 00 00 
0b81f     00 10 CA 20 
0b823     00 00 7F 80 
0b827     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $7f, $80, $00, $00, $00, $00
0b82b     37 00 FE C0 
0b82f     C7 00 00 00 
0b833     00 00 7F 5C 
0b837     10 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $7f, $5c, $10, $00, $00, $00
0b83b     37 00 00 0C 
0b83f     00 00 FE 94 
0b843     81 00 8F 40 
0b847     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $8f, $40, $00, $00, $00, $00
0b84b     37 11 0D 30 
0b84f     00 00 00 04 
0b853     82 00 00 00 
0b857     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0b85b     37 00 00 00 
0b85f     00 01 FC 9A 
0b863     0F 00 7F 7C 
0b867     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $7f, $7c, $10, $00, $00, $00
0b86b     37 10 D6 10 
0b86f     00 00 00 0A 
0b873     0F 00 00 00 
0b877     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b87b     37 00 00 00 
0b87f     00 00 FE 9A 
0b883     0F 00 8F 5C 
0b887     20 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $00, $8f, $5c, $20, $00, $00, $00
0b88b     37 11 0D 30 
0b88f     00 00 00 0A 
0b893     0F 00 00 00 
0b897     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0b89b     37 00 00 00 
0b89f     00 10 CA 20 
0b8a3     00 00 AA 20 
0b8a7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $20, $00, $00, $00, $00
0b8ab     37 01 FC C0 
0b8af     C7 00 00 00 
0b8b3     00 00 00 30 
0b8b7     00 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $30, $00, $00, $00, $00
0b8bb     37 00 00 0C 
0b8bf     00 01 1D 90 
0b8c3     00 00 8F 4C 
0b8c7     10 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $1d, $90, $00, $00, $8f, $4c, $10, $00, $00, $00
0b8cb     37 01 FC D0 
0b8cf     40 00 00 00 
0b8d3     00 00 00 00 
0b8d7     00 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8db     37 00 00 0A 
0b8df     0F 01 FC 90 
0b8e3     00 00 AA 5C 
0b8e7     20 00 00 00 | 	byte	$37, $00, $00, $0a, $0f, $01, $fc, $90, $00, $00, $aa, $5c, $20, $00, $00, $00
0b8eb     37 10 D6 10 
0b8ef     00 00 00 00 
0b8f3     00 00 00 00 
0b8f7     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8fb     37 00 00 00 
0b8ff     00 01 FC 9A 
0b903     0F 00 BE 70 
0b907     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $be, $70, $00, $00, $00, $00
0b90b     37 11 0D 30 
0b90f     00 00 00 0A 
0b913     0F 00 00 80 
0b917     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $80, $00, $00, $00, $00
0b91b     37 00 00 00 
0b91f     00 10 CA 20 
0b923     00 00 AA 7C 
0b927     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $aa, $7c, $10, $00, $00, $00
0b92b     37 00 FE C0 
0b92f     C7 00 00 00 
0b933     00 00 00 00 
0b937     00 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b93b     37 00 00 0C 
0b93f     00 00 FE 94 
0b943     81 00 BE 5C 
0b947     20 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $be, $5c, $20, $00, $00, $00
0b94b     37 11 0D 30 
0b94f     00 00 00 04 
0b953     82 00 00 00 
0b957     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0b95b     37 00 00 00 
0b95f     00 00 D6 9A 
0b963     0F 00 D6 14 
0b967     81 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $d6, $9a, $0f, $00, $d6, $14, $81, $00, $00, $00
0b96b     37 10 D6 10 
0b96f     00 00 00 0A 
0b973     0F 00 00 24 
0b977     82 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $24, $82, $00, $00, $00
0b97b     37 00 00 00 
0b97f     00 01 AC 9A 
0b983     0F 00 00 34 
0b987     83 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $ac, $9a, $0f, $00, $00, $34, $83, $00, $00, $00
0b98b     37 11 0D 30 
0b98f     00 00 00 0A 
0b993     0F 00 00 44 
0b997     84 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $44, $84, $00, $00, $00
0b99b     37 00 00 00 
0b99f     00 10 CA 20 
0b9a3     00 01 1D 54 
0b9a7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $01, $1d, $54, $00, $00, $00, $00
0b9ab     37 01 FC C0 
0b9af     C7 00 00 00 
0b9b3     00 00 00 64 
0b9b7     00 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00
0b9bb     37 00 00 0C 
0b9bf     00 00 E2 90 
0b9c3     00 00 00 72 
0b9c7     0F 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $e2, $90, $00, $00, $00, $72, $0f, $00, $00, $00
0b9cb     37 01 FC D0 
0b9cf     40 00 00 00 
0b9d3     00 00 00 82 
0b9d7     0F 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $82, $0f, $00, $00, $00
0b9db     37 00 00 0A 
0b9df     0F 02 80 9F 
0b9e3     04 01 1D 11 
0b9e7     02 00 FE E0 | 	byte	$37, $00, $00, $0a, $0f, $02, $80, $9f, $04, $01, $1d, $11, $02, $00, $fe, $e0
0b9eb     37 10 D6 10 
0b9ef     00 00 00 00 
0b9f3     00 00 00 01 
0b9f7     02 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $01, $02, $00, $00, $00
0b9fb     37 00 00 00 
0b9ff     00 02 80 9A 
0ba03     0F 00 FE 23 
0ba07     03 00 00 00 | 	byte	$37, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $fe, $23, $03, $00, $00, $00
0ba0b     37 11 0D 30 
0ba0f     00 00 00 0A 
0ba13     0F 00 00 33 
0ba17     06 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $33, $06, $00, $00, $00
0ba1b     37 00 00 00 
0ba1f     00 10 CA 20 
0ba23     00 00 00 40 
0ba27     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $40, $00, $00, $00, $00
0ba2b     37 00 FE C0 
0ba2f     C7 00 00 00 
0ba33     00 00 00 54 
0ba37     91 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $54, $91, $00, $00, $00
0ba3b     37 00 00 0C 
0ba3f     00 01 40 94 
0ba43     81 00 00 64 
0ba47     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $40, $94, $81, $00, $00, $64, $00, $00, $00, $00
0ba4b     37 11 0D 30 
0ba4f     00 00 00 04 
0ba53     82 00 00 74 
0ba57     92 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $74, $92, $00, $00, $00
0ba5b     37 00 00 00 
0ba5f     00 02 80 9A 
0ba63     0F 00 00 84 
0ba67     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $02, $80, $9a, $0f, $00, $00, $84, $00, $00, $00, $00
0ba6b     37 10 D6 10 
0ba6f     00 00 00 0A 
0ba73     0F 00 00 84 
0ba77     93 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $84, $93, $00, $00, $00
0ba7b     37 00 00 00 
0ba7f     00 01 40 9A 
0ba83     0F 00 FE 5C 
0ba87     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $40, $9a, $0f, $00, $fe, $5c, $10, $00, $00, $00
0ba8b     37 11 0D 30 
0ba8f     00 00 00 0A 
0ba93     0F 00 00 00 
0ba97     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0ba9b     37 00 00 00 
0ba9f     00 10 CA 20 
0baa3     00 00 FE 80 
0baa7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $fe, $80, $00, $00, $00, $00
0baab     37 01 FC C0 
0baaf     C7 00 00 00 
0bab3     00 00 7F 5C 
0bab7     10 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $7f, $5c, $10, $00, $00, $00
0babb     37 00 00 0C 
0babf     00 01 68 9A 
0bac3     0F 00 D6 70 
0bac7     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $68, $9a, $0f, $00, $d6, $70, $00, $00, $00, $00
0bacb     37 01 FC D0 
0bacf     40 00 00 02 
0bad3     0F 00 00 00 
0bad7     00 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $00, $00, $00, $00, $00, $00
0badb     37 00 00 0A 
0badf     0F 02 3A 9F 
0bae3     04 00 FE 5C 
0bae7     10 01 1D E0 | 	byte	$37, $00, $00, $0a, $0f, $02, $3a, $9f, $04, $00, $fe, $5c, $10, $01, $1d, $e0
0baeb     47 10 D6 10 
0baef     00 00 00 00 
0baf3     00 00 00 00 
0baf7     00 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bafb     47 00 00 00 
0baff     00 02 3A 9A 
0bb03     0F 00 BE 44 
0bb07     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $be, $44, $91, $00, $00, $00
0bb0b     47 11 0D 30 
0bb0f     00 00 00 0A 
0bb13     0F 00 00 54 
0bb17     91 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $54, $91, $00, $00, $00
0bb1b     47 00 00 00 
0bb1f     00 10 CA 20 
0bb23     00 00 00 64 
0bb27     92 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $64, $92, $00, $00, $00
0bb2b     47 00 FE C0 
0bb2f     C7 00 00 00 
0bb33     00 00 00 74 
0bb37     93 00 00 00 | 	byte	$47, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $74, $93, $00, $00, $00
0bb3b     47 00 00 0C 
0bb3f     00 01 1D 94 
0bb43     81 00 BE 5C 
0bb47     10 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $1d, $94, $81, $00, $be, $5c, $10, $00, $00, $00
0bb4b     47 11 0D 30 
0bb4f     00 00 00 04 
0bb53     82 00 00 00 
0bb57     00 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0bb5b     47 00 00 00 
0bb5f     00 02 3A 9A 
0bb63     0F 00 AA 14 
0bb67     91 00 00 00 | 	byte	$47, $00, $00, $00, $00, $02, $3a, $9a, $0f, $00, $aa, $14, $91, $00, $00, $00
0bb6b     47 10 D6 10 
0bb6f     00 00 00 0A 
0bb73     0F 00 BE 1C 
0bb77     10 00 00 00 | 	byte	$47, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $be, $1c, $10, $00, $00, $00
0bb7b     47 00 00 00 
0bb7f     00 01 1D 9A 
0bb83     0F 00 FE 24 
0bb87     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $01, $1d, $9a, $0f, $00, $fe, $24, $00, $00, $00, $00
0bb8b     47 11 0D 30 
0bb8f     00 00 00 0A 
0bb93     0F 00 AA 2C 
0bb97     10 00 00 00 | 	byte	$47, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $aa, $2c, $10, $00, $00, $00
0bb9b     47 00 00 00 
0bb9f     00 10 CA 20 
0bba3     00 00 BE 34 
0bba7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $be, $34, $00, $00, $00, $00
0bbab     47 01 FC C0 
0bbaf     C7 00 00 00 
0bbb3     00 00 FE 3C 
0bbb7     10 00 00 00 | 	byte	$47, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $fe, $3c, $10, $00, $00, $00
0bbbb     47 00 00 0C 
0bbbf     00 01 40 9A 
0bbc3     0F 01 1D 44 
0bbc7     00 00 00 00 | 	byte	$47, $00, $00, $0c, $00, $01, $40, $9a, $0f, $01, $1d, $44, $00, $00, $00, $00
0bbcb     47 01 FC D0 
0bbcf     40 00 00 02 
0bbd3     0F 00 BE 4C 
0bbd7     10 00 00 00 | 	byte	$47, $01, $fc, $d0, $40, $00, $00, $02, $0f, $00, $be, $4c, $10, $00, $00, $00
0bbdb     47 00 00 0A 
0bbdf     0F 01 FC 90 
0bbe3     00 01 1D 51 
0bbe7     03 00 FE E0 | 	byte	$47, $00, $00, $0a, $0f, $01, $fc, $90, $00, $01, $1d, $51, $03, $00, $fe, $e0
0bbeb     37 10 D6 10 
0bbef     00 00 00 00 
0bbf3     00 00 00 01 
0bbf7     03 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $01, $03, $00, $00, $00
0bbfb     37 00 00 00 
0bbff     00 01 FC 9A 
0bc03     0F 00 FE 63 
0bc07     03 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $fe, $63, $03, $00, $00, $00
0bc0b     37 11 0D 30 
0bc0f     00 00 00 0A 
0bc13     0F 00 00 73 
0bc17     03 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $73, $03, $00, $00, $00
0bc1b     37 00 00 00 
0bc1f     00 10 CA 20 
0bc23     00 00 00 80 
0bc27     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $80, $00, $00, $00, $00
0bc2b     37 00 FE C0 
0bc2f     C7 00 00 00 
0bc33     00 00 00 70 
0bc37     00 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $70, $00, $00, $00, $00
0bc3b     37 00 00 0C 
0bc3f     00 00 FE 94 
0bc43     81 00 00 60 
0bc47     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $00, $60, $00, $00, $00, $00
0bc4b     37 11 0D 30 
0bc4f     00 00 00 04 
0bc53     82 00 00 54 
0bc57     91 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $54, $91, $00, $00, $00
0bc5b     37 00 00 00 
0bc5f     00 01 FC 9A 
0bc63     0F 00 00 44 
0bc67     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $00, $44, $00, $00, $00, $00
0bc6b     37 10 D6 10 
0bc6f     00 00 00 0A 
0bc73     0F 00 00 34 
0bc77     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $34, $00, $00, $00, $00
0bc7b     37 00 00 00 
0bc7f     00 00 FE 9A 
0bc83     0F 00 00 24 
0bc87     92 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $fe, $9a, $0f, $00, $00, $24, $92, $00, $00, $00
0bc8b     37 11 0D 30 
0bc8f     00 00 00 0A 
0bc93     0F 00 00 14 
0bc97     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $14, $00, $00, $00, $00
0bc9b     37 00 00 00 
0bc9f     00 10 CA 20 
0bca3     00 00 00 24 
0bca7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $24, $00, $00, $00, $00
0bcab     37 01 FC C0 
0bcaf     C7 00 00 00 
0bcb3     00 00 00 34 
0bcb7     93 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $34, $93, $00, $00, $00
0bcbb     37 00 00 0C 
0bcbf     00 01 1D 90 
0bcc3     00 00 00 44 
0bcc7     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $01, $1d, $90, $00, $00, $00, $44, $00, $00, $00, $00
0bccb     37 01 FC D0 
0bccf     40 00 00 00 
0bcd3     00 00 00 54 
0bcd7     00 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $54, $00, $00, $00, $00
0bcdb     37 00 00 0A 
0bcdf     0F 01 FC 90 
0bce3     00 00 00 64 
0bce7     94 00 00 00 | 	byte	$37, $00, $00, $0a, $0f, $01, $fc, $90, $00, $00, $00, $64, $94, $00, $00, $00
0bceb     37 10 D6 10 
0bcef     00 00 00 00 
0bcf3     00 00 00 74 
0bcf7     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $74, $00, $00, $00, $00
0bcfb     37 00 00 00 
0bcff     00 01 FC 9A 
0bd03     0F 00 00 84 
0bd07     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $fc, $9a, $0f, $00, $00, $84, $00, $00, $00, $00
0bd0b     37 11 0D 30 
0bd0f     00 00 00 0A 
0bd13     0F 00 00 84 
0bd17     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $84, $00, $00, $00, $00
0bd1b     37 00 00 00 
0bd1f     00 10 CA 20 
0bd23     00 00 FE 5C 
0bd27     10 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $fe, $5c, $10, $00, $00, $00
0bd2b     37 00 FE C0 
0bd2f     C7 00 00 00 
0bd33     00 00 00 00 
0bd37     00 00 00 00 | 	byte	$37, $00, $fe, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd3b     37 00 00 0C 
0bd3f     00 00 FE 94 
0bd43     81 00 00 00 
0bd47     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $fe, $94, $81, $00, $00, $00, $00, $00, $00, $00
0bd4b     37 11 0D 30 
0bd4f     00 00 00 04 
0bd53     82 00 00 00 
0bd57     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00
0bd5b     37 00 00 00 
0bd5f     00 00 D6 9A 
0bd63     0F 00 00 00 
0bd67     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $00, $d6, $9a, $0f, $00, $00, $00, $00, $00, $00, $00
0bd6b     37 10 D6 10 
0bd6f     00 00 00 0A 
0bd73     0F 00 00 00 
0bd77     00 00 00 00 | 	byte	$37, $10, $d6, $10, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0bd7b     37 00 00 00 
0bd7f     00 01 AC 9A 
0bd83     0F 00 00 00 
0bd87     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $01, $ac, $9a, $0f, $00, $00, $00, $00, $00, $00, $00
0bd8b     37 11 0D 30 
0bd8f     00 00 00 0A 
0bd93     0F 00 00 00 
0bd97     00 00 00 00 | 	byte	$37, $11, $0d, $30, $00, $00, $00, $0a, $0f, $00, $00, $00, $00, $00, $00, $00
0bd9b     37 00 00 00 
0bd9f     00 10 CA 20 
0bda3     00 00 00 00 
0bda7     00 00 00 00 | 	byte	$37, $00, $00, $00, $00, $10, $ca, $20, $00, $00, $00, $00, $00, $00, $00, $00
0bdab     37 01 FC C0 
0bdaf     C7 00 00 00 
0bdb3     00 00 00 00 
0bdb7     00 00 00 00 | 	byte	$37, $01, $fc, $c0, $c7, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdbb     37 00 00 0C 
0bdbf     00 00 E2 90 
0bdc3     00 00 00 00 
0bdc7     00 00 00 00 | 	byte	$37, $00, $00, $0c, $00, $00, $e2, $90, $00, $00, $00, $00, $00, $00, $00, $00
0bdcb     37 01 FC D0 
0bdcf     40 00 00 00 
0bdd3     00 00 00 00 
0bdd7     00 00 00 00 | 	byte	$37, $01, $fc, $d0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bddb     37 00 00 0A 
0bddf     0F 00 00 91 
0bde3     91 91 91 91 
0bde7     91 91 91 00 | 	byte	$37, $00, $00, $0a, $0f, $00, $00, $91, $91, $91, $91, $91, $91, $91, $91, $00
0bdeb     00 00 00 00 
0bdef     00 00 00 00 
0bdf3     00 00 00 00 
0bdf7     00 00 00 00 
0bdfb     00 00 00 00 
0bdff     00 00 00    | 	byte	$00[23]
0be02     91 91 91 91 
0be06     91 91 91 91 
0be0a     91 91       | 	byte	$91[10]
0be0c     00 00 00 00 
0be10     00 00 00 00 
0be14     00 00 00 00 
0be18     00 00 00 00 
0be1c     00 00 00 00 
0be20     00 00       | 	byte	$00[22]
0be22     91 91 91 91 
0be26     91 91 91 91 
0be2a     91 91 91 91 
0be2e     91          | 	byte	$91[13]
0be2f     00 00 00 00 
0be33     00 00 00 00 
0be37     00 00 00 00 
0be3b     00 00 00 00 
0be3f     00 00 00    | 	byte	$00[19]
0be42     91 91 91 91 
0be46     91 91 91 91 
0be4a     91 91 91 91 
0be4e     91 91 91    | 	byte	$91[15]
0be51     00 00 00 00 
0be55     00 00 00 00 
0be59     00 00 00 00 
0be5d     00 00 00 00 
0be61     00          | 	byte	$00[17]
0be62     91 91 91 91 
0be66     91 91 91 91 
0be6a     91 91 91 91 
0be6e     91 91 91 91 
0be72     91 91 91 91 | 	byte	$91[20]
0be76     00 00 00 00 
0be7a     00 00 00 00 
0be7e     00 00 00 00 | 	byte	$00[12]
0be82     91 91 91 91 
0be86     91 91 91 91 
0be8a     91 91 91 91 
0be8e     91 91 91 91 
0be92     91 91 91 91 
0be96     91 91 91 91 
0be9a     91          | 	byte	$91[25]
0be9b     00 00 00 00 
0be9f     00 00 00    | 	byte	$00[7]
0bea2     91 91 91 91 
0bea6     91 91 91 91 
0beaa     91 91 91 91 
0beae     91 91 91 91 
0beb2     91 91 91 91 
0beb6     91 91 91 91 
0beba     91 91 91 91 | 	byte	$91[28]
0bebe     00 00 00 00 
0bec2     91 91 91 91 
0bec6     91 91 91 91 
0beca     91 91 91 91 | 	byte	$00, $00, $00, $00, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91
0bece     91 91 91 91 
0bed2     91 91 91 91 
0bed6     91 91 91 91 
0beda     91 91 91 91 
0bede     91 91       | 	byte	$91[18]
0bee0     00 00 00 00 
0bee4     A7 AE AA A9 
0bee8     A8 A8 A8 A8 
0beec     A8 A8 A8 A8 | 	byte	$00, $00, $00, $00, $a7, $ae, $aa, $a9, $a8, $a8, $a8, $a8, $a8, $a8, $a8, $a8
0bef0     A8 A8 A8 A8 
      ...             
0bf18     A8 A8 A8 A8 
0bf1c     A8          | 	byte	$a8[45]
0bf1d     B7 58 58 58 
0bf21     58 58 58 58 
0bf25     58 58 58 58 
0bf29     58 58 58 58 | 	byte	$b7, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58
0bf2d     58 58 58 58 
0bf31     58 58 58    | 	byte	$58[7]
0bf34     57 55 51 50 
0bf38     4D 4B 49 46 
0bf3c     44 41 3F 3D 
0bf40     3A 37 34 31 | 	byte	$57, $55, $51, $50, $4d, $4b, $49, $46, $44, $41, $3f, $3d, $3a, $37, $34, $31
0bf44     30 2C 2A 27 
0bf48     24 21 1E 1C 
0bf4c     19 16 13 12 
0bf50     0E 0D 09 08 | 	byte	$30, $2c, $2a, $27, $24, $21, $1e, $1c, $19, $16, $13, $12, $0e, $0d, $09, $08
0bf54     04 02 00 FE 
0bf58     FB F9 F7 F5 
0bf5c     F3 F1 00 A8 
0bf60     A8 A8 A8 A8 | 	byte	$04, $02, $00, $fe, $fb, $f9, $f7, $f5, $f3, $f1, $00, $a8, $a8, $a8, $a8, $a8
0bf64     A8 A8 A8 A8 
      ...             
0bf80     A8 A8 A8 A8 
0bf84     A8          | 	byte	$a8[33]
0bf85     B7 58 58 58 
0bf89     58 58 58 58 
0bf8d     58 58 58 58 
0bf91     58 58 58 58 | 	byte	$b7, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $58
0bf95     58 58 58 58 
0bf99     58          | 	byte	$58[5]
0bf9a     00 00 00 00 
0bf9e     C3 C9 C4 C4 
0bfa2     C4 C4 C4 C4 
0bfa6     C4 C4 C4 C4 | 	byte	$00, $00, $00, $00, $c3, $c9, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4
0bfaa     C4 C4 C4 C4 
      ...             
0bfd2     C4 C4 C4 C4 
0bfd6     C4          | 	byte	$c4[45]
0bfd7     CE 3C 3C 3C 
0bfdb     3C 3C 3C 3C 
0bfdf     3C 3C 3C 3C 
0bfe3     3C 3C 3C 3C | 	byte	$ce, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c
0bfe7     3C 3C 3C 3C 
0bfeb     3C 3C 3C 3C | 	byte	$3c[8]
0bfef     3A 37 37 34 
0bff3     33 32 30 2D 
0bff7     2C 2B 28 27 
0bffb     25 24 20 20 | 	byte	$3a, $37, $37, $34, $33, $32, $30, $2d, $2c, $2b, $28, $27, $25, $24, $20, $20
0bfff     1E 1C 19 18 
0c003     16 13 12 0F 
0c007     0E 0C 0A 08 
0c00b     08 04 03 01 | 	byte	$1e, $1c, $19, $18, $16, $13, $12, $0f, $0e, $0c, $0a, $08, $08, $04, $03, $01
0c00f     00 00 00 FE 
0c013     FE FC FC F8 
0c017     F7 00 C4 C4 
0c01b     C4 C4 C4 C4 | 	byte	$00, $00, $00, $fe, $fe, $fc, $fc, $f8, $f7, $00, $c4, $c4, $c4, $c4, $c4, $c4
0c01f     C4 C4 C4 C4 
      ...             
0c037     C4 C4 C4 C4 
0c03b     C4 C4 C4 C4 | 	byte	$c4[32]
0c03f     CE 3C 3C 3C 
0c043     3C 3C 3C 3C 
0c047     3C 3C 3C 3C 
0c04b     3C 3C 3C 3C | 	byte	$ce, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c
0c04f     3C 3C 3C 3C 
0c053     00 00 00 00 
0c057     00 BD BD BD 
0c05b     BD 00 00 00 | 	byte	$3c, $3c, $3c, $3c, $00, $00, $00, $00, $00, $bd, $bd, $bd, $bd, $00, $00, $00
0c05f     00 00 00 00 
0c063     00 00 00 00 
0c067     00 00 00    | 	byte	$00[11]
0c06a     09 F7 F1 40 
0c06e     55 10 D8 AB 
0c072     B2 D6 FA 1A 
0c076     04 F8 0A FE | 	byte	$09, $f7, $f1, $40, $55, $10, $d8, $ab, $b2, $d6, $fa, $1a, $04, $f8, $0a, $fe
0c07a     07 1E E9 B9 
0c07e     CF F0 12 23 
0c082     18 FD F8 1A 
0c086     20 24 40 16 | 	byte	$07, $1e, $e9, $b9, $cf, $f0, $12, $23, $18, $fd, $f8, $1a, $20, $24, $40, $16
0c08a     C7 B3 C0 CD 
0c08e     F8 37 33 EC 
0c092     EC 34 3A 1B 
0c096     33 35 11 02 | 	byte	$c7, $b3, $c0, $cd, $f8, $37, $33, $ec, $ec, $34, $3a, $1b, $33, $35, $11, $02
0c09a     05 21 38 13 
0c09e     0E 19 EF DA 
0c0a2     D0 D9 FE 00 
0c0a6     F0 0D 07 C4 | 	byte	$05, $21, $38, $13, $0e, $19, $ef, $da, $d0, $d9, $fe, $00, $f0, $0d, $07, $c4
0c0aa     E4 22 F7 CD 
0c0ae     D0 F9 4D 3C 
0c0b2     E2 F2 25 20 
0c0b6     0A E9 CC E0 | 	byte	$e4, $22, $f7, $cd, $d0, $f9, $4d, $3c, $e2, $f2, $25, $20, $0a, $e9, $cc, $e0
0c0ba     07 01 08 18 
0c0be     12 1B 2B 39 
0c0c2     23 E4 DB 08 
0c0c6     26 40 1D F2 | 	byte	$07, $01, $08, $18, $12, $1b, $2b, $39, $23, $e4, $db, $08, $26, $40, $1d, $f2
0c0ca     F5 D1 C1 F6 
0c0ce     3C 4E 27 03 
0c0d2     F0 E7 0D 28 
0c0d6     0F F1 D5 D4 | 	byte	$f5, $d1, $c1, $f6, $3c, $4e, $27, $03, $f0, $e7, $0d, $28, $0f, $f1, $d5, $d4
0c0da     DE E0 06 2B 
0c0de     13 00 03 F0 
0c0e2     E5 EF F2 EC 
0c0e6     E0 E2 ED EB | 	byte	$de, $e0, $06, $2b, $13, $00, $03, $f0, $e5, $ef, $f2, $ec, $e0, $e2, $ed, $eb
0c0ea     01 31 42 1F 
0c0ee     16 19 E5 CF 
0c0f2     EA E7 F6 26 
0c0f6     09 D8 EF F9 | 	byte	$01, $31, $42, $1f, $16, $19, $e5, $cf, $ea, $e7, $f6, $26, $09, $d8, $ef, $f9
0c0fa     E3 E3 D8 BE 
0c0fe     F1 28 F1 EC 
0c102     26 12 EE D8 
0c106     B5 BC D7 D3 | 	byte	$e3, $e3, $d8, $be, $f1, $28, $f1, $ec, $26, $12, $ee, $d8, $b5, $bc, $d7, $d3
0c10a     C8 D2 E4 EA 
0c10e     04 FE 04 1C 
0c112     E7 D0 DA EB 
0c116     2F 5A 27 E4 | 	byte	$c8, $d2, $e4, $ea, $04, $fe, $04, $1c, $e7, $d0, $da, $eb, $2f, $5a, $27, $e4
0c11a     DD DF E5 11 
0c11e     47 29 E9 DA 
0c122     EF 0B E8 D6 
0c126     DE DC 02 FD | 	byte	$dd, $df, $e5, $11, $47, $29, $e9, $da, $ef, $0b, $e8, $d6, $de, $dc, $02, $fd
0c12a     BD A3 AB C5 
0c12e     E0 D3 EA 15 
0c132     EB BD D7 F8 
0c136     FF 25 60 58 | 	byte	$bd, $a3, $ab, $c5, $e0, $d3, $ea, $15, $eb, $bd, $d7, $f8, $ff, $25, $60, $58
0c13a     1C F4 06 27 
0c13e     2A 41 24 D4 
0c142     BC E2 10 FD 
0c146     14 37 1C 06 | 	byte	$1c, $f4, $06, $27, $2a, $41, $24, $d4, $bc, $e2, $10, $fd, $14, $37, $1c, $06
0c14a     FF 21 43 5E 
0c14e     46 F3 D2 B9 
0c152     B4 E4 E6 CE 
0c156     F6 06 D3 EE | 	byte	$ff, $21, $43, $5e, $46, $f3, $d2, $b9, $b4, $e4, $e6, $ce, $f6, $06, $d3, $ee
0c15a     19 F4 E7 F3 
0c15e     EA FE 0F E9 
0c162     DC E9 D1 D3 
0c166     12 22 F8 01 | 	byte	$19, $f4, $e7, $f3, $ea, $fe, $0f, $e9, $dc, $e9, $d1, $d3, $12, $22, $f8, $01
0c16a     FF FB 30 3D 
0c16e     13 E0 F2 20 
0c172     1A 29 2B 02 
0c176     FB 0F 0A F4 | 	byte	$ff, $fb, $30, $3d, $13, $e0, $f2, $20, $1a, $29, $2b, $02, $fb, $0f, $0a, $f4
0c17a     00 1D 1E 16 
0c17e     0F F0 E5 F6 
0c182     EC D7 C6 E1 
0c186     F6 D5 E9 FF | 	byte	$00, $1d, $1e, $16, $0f, $f0, $e5, $f6, $ec, $d7, $c6, $e1, $f6, $d5, $e9, $ff
0c18a     E3 E5 14 35 
0c18e     1D 0F 21 13 
0c192     EC C8 A4 AE 
0c196     E1 20 31 E8 | 	byte	$e3, $e5, $14, $35, $1d, $0f, $21, $13, $ec, $c8, $a4, $ae, $e1, $20, $31, $e8
0c19a     C2 E5 1E 43 
0c19e     40 1A CF B9 
0c1a2     F8 44 33 FB 
0c1a6     05 17 4D 7A | 	byte	$c2, $e5, $1e, $43, $40, $1a, $cf, $b9, $f8, $44, $33, $fb, $05, $17, $4d, $7a
0c1aa     42 EE F4 27 
0c1ae     11 08 18 DE 
0c1b2     C0 E0 D0 AD 
0c1b6     A8 AA AE CE | 	byte	$42, $ee, $f4, $27, $11, $08, $18, $de, $c0, $e0, $d0, $ad, $a8, $aa, $ae, $ce
0c1ba     E6 D8 F1 20 
0c1be     11 E1 CF BB 
0c1c2     B7 EC 26 22 
0c1c6     EC F0 31 49 | 	byte	$e6, $d8, $f1, $20, $11, $e1, $cf, $bb, $b7, $ec, $26, $22, $ec, $f0, $31, $49
0c1ca     49 64 56 22 
0c1ce     06 ED F3 2A 
0c1d2     2E 09 F7 DB 
0c1d6     E9 1D 0D D5 | 	byte	$49, $64, $56, $22, $06, $ed, $f3, $2a, $2e, $09, $f7, $db, $e9, $1d, $0d, $d5
0c1da     E1 15 31 23 
0c1de     FD F8 05 12 
0c1e2     36 43 23 0A 
0c1e6     F4 DF D0 EC | 	byte	$e1, $15, $31, $23, $fd, $f8, $05, $12, $36, $43, $23, $0a, $f4, $df, $d0, $ec
0c1ea     FB EC 2B 42 
0c1ee     23 25 07 F2 
0c1f2     D7 BC EB FF 
0c1f6     E3 DD D2 EB | 	byte	$fb, $ec, $2b, $42, $23, $25, $07, $f2, $d7, $bc, $eb, $ff, $e3, $dd, $d2, $eb
0c1fa     24 34 44 2C 
0c1fe     F8 1C 18 E9 
0c202     12 1E E6 EA 
0c206     F1 CA DB 11 | 	byte	$24, $34, $44, $2c, $f8, $1c, $18, $e9, $12, $1e, $e6, $ea, $f1, $ca, $db, $11
0c20a     35 3A 43 38 
0c20e     EC C5 EC 07 
0c212     FA FE 27 35 
0c216     0F DA CA E9 | 	byte	$35, $3a, $43, $38, $ec, $c5, $ec, $07, $fa, $fe, $27, $35, $0f, $da, $ca, $e9
0c21a     F0 0B 39 0E 
0c21e     D1 F1 12 FD 
0c222     04 04 03 FC 
0c226     CF E3 1F 0B | 	byte	$f0, $0b, $39, $0e, $d1, $f1, $12, $fd, $04, $04, $03, $fc, $cf, $e3, $1f, $0b
0c22a     E4 DD DC D3 
0c22e     C7 D4 ED F6 
0c232     F0 F6 FB FD 
0c236     09 E7 D5 0F | 	byte	$e4, $dd, $dc, $d3, $c7, $d4, $ed, $f6, $f0, $f6, $fb, $fd, $09, $e7, $d5, $0f
0c23a     27 0A E5 D0 
0c23e     E6 EE EC FA 
0c242     F9 04 0F 13 
0c246     22 14 F9 F9 | 	byte	$27, $0a, $e5, $d0, $e6, $ee, $ec, $fa, $f9, $04, $0f, $13, $22, $14, $f9, $f9
0c24a     17 1D FA F3 
0c24e     09 0D FB 0B 
0c252     3B 30 04 F1 
0c256     01 1F 1A 07 | 	byte	$17, $1d, $fa, $f3, $09, $0d, $fb, $0b, $3b, $30, $04, $f1, $01, $1f, $1a, $07
0c25a     08 14 F6 D1 
0c25e     ED 07 FE DF 
0c262     C3 DB FF F9 
0c266     E6 E7 F5 F9 | 	byte	$08, $14, $f6, $d1, $ed, $07, $fe, $df, $c3, $db, $ff, $f9, $e6, $e7, $f5, $f9
0c26a     FA 18 21 17 
0c26e     10 0D 29 2C 
0c272     0A F1 EA F2 
0c276     0D 19 0A 06 | 	byte	$fa, $18, $21, $17, $10, $0d, $29, $2c, $0a, $f1, $ea, $f2, $0d, $19, $0a, $06
0c27a     FE EE 03 15 
0c27e     FD ED E5 D9 
0c282     E2 EF EE F8 
0c286     03 0D 25 1C | 	byte	$fe, $ee, $03, $15, $fd, $ed, $e5, $d9, $e2, $ef, $ee, $f8, $03, $0d, $25, $1c
0c28a     E6 D0 DF EB 
0c28e     02 0D 02 FE 
0c292     12 1F 14 14 
0c296     10 FA F7 08 | 	byte	$e6, $d0, $df, $eb, $02, $0d, $02, $fe, $12, $1f, $14, $14, $10, $fa, $f7, $08
0c29a     14 08 F5 F1 
0c29e     FA 0B 17 26 
0c2a2     37 2B 17 18 
0c2a6     17 FE E8 DD | 	byte	$14, $08, $f5, $f1, $fa, $0b, $17, $26, $37, $2b, $17, $18, $17, $fe, $e8, $dd
0c2aa     D0 DA F0 E9 
0c2ae     E9 11 15 F7 
0c2b2     F9 FA F9 01 
0c2b6     01 F0 DE EF | 	byte	$d0, $da, $f0, $e9, $e9, $11, $15, $f7, $f9, $fa, $f9, $01, $01, $f0, $de, $ef
0c2ba     17 36 36 09 
0c2be     D9 E4 FC 06 
0c2c2     0F 12 18 05 
0c2c6     E5 EA 05 FC | 	byte	$17, $36, $36, $09, $d9, $e4, $fc, $06, $0f, $12, $18, $05, $e5, $ea, $05, $fc
0c2ca     F1 01 FB FD 
0c2ce     03 F1 EF 03 
0c2d2     17 17 0D 05 
0c2d6     FC 00 F9 F7 | 	byte	$f1, $01, $fb, $fd, $03, $f1, $ef, $03, $17, $17, $0d, $05, $fc, $00, $f9, $f7
0c2da     0E 16 08 F7 
0c2de     FD 04 F5 F0 
0c2e2     F4 F2 F6 F9 
0c2e6     F4 F3 F5 FC | 	byte	$0e, $16, $08, $f7, $fd, $04, $f5, $f0, $f4, $f2, $f6, $f9, $f4, $f3, $f5, $fc
0c2ea     07 0F 11 0D 
0c2ee     1B 23 09 EC 
0c2f2     E8 F6 FD FB 
0c2f6     F8 FE 09 06 | 	byte	$07, $0f, $11, $0d, $1b, $23, $09, $ec, $e8, $f6, $fd, $fb, $f8, $fe, $09, $06
0c2fa     FE 09 11 FF 
0c2fe     F5 01 0C 0F 
0c302     07 FF 01 04 
0c306     05 00 FC 06 | 	byte	$fe, $09, $11, $ff, $f5, $01, $0c, $0f, $07, $ff, $01, $04, $05, $00, $fc, $06
0c30a     1A 29 13 F0 
0c30e     F7 05 FD FE 
0c312     07 06 01 03 
0c316     FD F0 00 09 | 	byte	$1a, $29, $13, $f0, $f7, $05, $fd, $fe, $07, $06, $01, $03, $fd, $f0, $00, $09
0c31a     EE E9 FD 05 
0c31e     FD F6 01 06 
0c322     F7 EF 00 0C 
0c326     00 FA F6 F3 | 	byte	$ee, $e9, $fd, $05, $fd, $f6, $01, $06, $f7, $ef, $00, $0c, $00, $fa, $f6, $f3
0c32a     FC FF FD 03 
0c32e     0C 07 04 04 
0c332     F2 F0 F5 F2 
0c336     F7 FD FA F3 | 	byte	$fc, $ff, $fd, $03, $0c, $07, $04, $04, $f2, $f0, $f5, $f2, $f7, $fd, $fa, $f3
0c33a     F8 FE F7 F2 
0c33e     FA 06 04 F9 
0c342     F8 05 06 FF 
0c346     03 05 FF 03 | 	byte	$f8, $fe, $f7, $f2, $fa, $06, $04, $f9, $f8, $05, $06, $ff, $03, $05, $ff, $03
0c34a     14 16 05 FE 
0c34e     03 0A 0F 0A 
0c352     FE F0 EA F2 
0c356     02 0B 00 F6 | 	byte	$14, $16, $05, $fe, $03, $0a, $0f, $0a, $fe, $f0, $ea, $f2, $02, $0b, $00, $f6
0c35a     FC 03 01 02 
0c35e     05 01 F9 01 
0c362     0C 07 FE F9 
0c366     FD 01 FC F8 | 	byte	$fc, $03, $01, $02, $05, $01, $f9, $01, $0c, $07, $fe, $f9, $fd, $01, $fc, $f8
0c36a     01 06 04 05 
0c36e     00 FC FF FD 
0c372     00 05 04 03 
0c376     FE FB FF FA | 	byte	$01, $06, $04, $05, $00, $fc, $ff, $fd, $00, $05, $04, $03, $fe, $fb, $ff, $fa
0c37a     FE 09 01 F8 
0c37e     F9 F9 FF 02 
0c382     FF FB F9 FA 
0c386     F9 F8 00 09 | 	byte	$fe, $09, $01, $f8, $f9, $f9, $ff, $02, $ff, $fb, $f9, $fa, $f9, $f8, $00, $09
0c38a     05 FE F9 F7 
0c38e     FC 04 02 FA 
0c392     FA FF FF FE 
0c396     FF 01 FE FA | 	byte	$05, $fe, $f9, $f7, $fc, $04, $02, $fa, $fa, $ff, $ff, $fe, $ff, $01, $fe, $fa
0c39a     FA FE 00 00 
0c39e     05 07 03 00 
0c3a2     03 06 04 03 
0c3a6     05 02 FF FD | 	byte	$fa, $fe, $00, $00, $05, $07, $03, $00, $03, $06, $04, $03, $05, $02, $ff, $fd
0c3aa     FE FE 01 04 
0c3ae     01 02 06 05 
0c3b2     02 01 00 00 
0c3b6     01 FF FC FE | 	byte	$fe, $fe, $01, $04, $01, $02, $06, $05, $02, $01, $00, $00, $01, $ff, $fc, $fe
0c3ba     00 FE FD FF 
0c3be     00 FF FD FE 
0c3c2     FD FC FE 00 
0c3c6     FF FD FE FF | 	byte	$00, $fe, $fd, $ff, $00, $ff, $fd, $fe, $fd, $fc, $fe, $00, $ff, $fd, $fe, $ff
0c3ca     FF FF FF FE 
0c3ce     FD FD FF FF 
0c3d2     FF FF FE FE 
0c3d6     FF FF FE FF | 	byte	$ff, $ff, $ff, $fe, $fd, $fd, $ff, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $fe, $ff
0c3da     00 00 00 FF 
0c3de     FF FF FF 00 
0c3e2     FF FF FF 00 
0c3e6     00 FF FF 00 | 	byte	$00, $00, $00, $ff, $ff, $ff, $ff, $00, $ff, $ff, $ff, $00, $00, $ff, $ff, $00
0c3ea     00 00 00 FF 
0c3ee     FF FF 00 00 
0c3f2     00 00 00 00 
0c3f6     00 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c3fa     00 FC EB D8 
0c3fe     CC CB CD CD 
0c402     CD CD CD CD 
0c406     CD CD D3 E2 | 	byte	$00, $fc, $eb, $d8, $cc, $cb, $cd, $cd, $cd, $cd, $cd, $cd, $cd, $cd, $d3, $e2
0c40a     F7 00 03 00 
0c40e     00 00 00 00 
0c412     00 00 00 00 
0c416     00 00 00 00 | 	byte	$f7, $00, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c41a     00 00 00 00 
0c41e     00 00 00 00 
0c422     00 00 00 00 
0c426     00 00 00 00 
0c42a     00 00       | 	byte	$00[18]
0c42c     F2 F2 EE DC 
0c430     AF AC F9 C7 
0c434     D9 26 8C 86 
0c438     CE EE D9 32 | 	byte	$f2, $f2, $ee, $dc, $af, $ac, $f9, $c7, $d9, $26, $8c, $86, $ce, $ee, $d9, $32
0c43c     07 0A 12 08 
0c440     B4 E4 FF 00 
0c444     93 D0 24 15 
0c448     12 E1 3E B4 | 	byte	$07, $0a, $12, $08, $b4, $e4, $ff, $00, $93, $d0, $24, $15, $12, $e1, $3e, $b4
0c44c     D9 EB 43 F2 
0c450     E7 24 4C FF 
0c454     4A DA 24 4C 
0c458     0F 58 DA CE | 	byte	$d9, $eb, $43, $f2, $e7, $24, $4c, $ff, $4a, $da, $24, $4c, $0f, $58, $da, $ce
0c45c     E1 18 C9 24 
0c460     26 1C DC 4A 
0c464     00 FF 39 9F 
0c468     FF 24 39 19 | 	byte	$e1, $18, $c9, $24, $26, $1c, $dc, $4a, $00, $ff, $39, $9f, $ff, $24, $39, $19
0c46c     30 C7 EB FF 
0c470     4C 1F B4 FF 
0c474     12 E1 62 00 
0c478     F2 D9 39 C7 | 	byte	$30, $c7, $eb, $ff, $4c, $1f, $b4, $ff, $12, $e1, $62, $00, $f2, $d9, $39, $c7
0c47c     0F 00 0A 43 
0c480     97 E7 FF 34 
0c484     37 E7 C9 CE 
0c488     D9 E1 4A 39 | 	byte	$0f, $00, $0a, $43, $97, $e7, $ff, $34, $37, $e7, $c9, $ce, $d9, $e1, $4a, $39
0c48c     4C 3E 4C 1C 
0c490     2B 12 FF 30 
0c494     C7 DC FF 26 
0c498     CE 37 32 26 | 	byte	$4c, $3e, $4c, $1c, $2b, $12, $ff, $30, $c7, $dc, $ff, $26, $ce, $37, $32, $26
0c49c     03 00 E4 08 
0c4a0     DA B0 F1 45 
0c4a4     DA FF 00 C4 
0c4a8     4A 1C 00 F6 | 	byte	$03, $00, $e4, $08, $da, $b0, $f1, $45, $da, $ff, $00, $c4, $4a, $1c, $00, $f6
0c4ac     00 86 20 03 
0c4b0     DA 8A B0 1F 
0c4b4     B4 EB 00 D9 
0c4b8     FF 07 00 EE | 	byte	$00, $86, $20, $03, $da, $8a, $b0, $1f, $b4, $eb, $00, $d9, $ff, $07, $00, $ee
0c4bc     D9 3C BD FF 
0c4c0     00 A8 2B 24 
0c4c4     00 E8 D5 D0 
0c4c8     8C C4 D9 00 | 	byte	$d9, $3c, $bd, $ff, $00, $a8, $2b, $24, $00, $e8, $d5, $d0, $8c, $c4, $d9, $00
0c4cc     03 80 D9 B7 
0c4d0     A2 93 D9 8C 
0c4d4     D9 00 85 82 
0c4d8     CE B4 D3 00 | 	byte	$03, $80, $d9, $b7, $a2, $93, $d9, $8c, $d9, $00, $85, $82, $ce, $b4, $d3, $00
0c4dc     F9 F9 FF E0 
0c4e0     B0 C0 0E B4 
0c4e4     A8 BB 0F 0F 
0c4e8     DA F6 00 80 | 	byte	$f9, $f9, $ff, $e0, $b0, $c0, $0e, $b4, $a8, $bb, $0f, $0f, $da, $f6, $00, $80
0c4ec     C9 1F 08 F2 
0c4f0     E1 5E 00 1F 
0c4f4     26 C4 5E 12 
0c4f8     2D 30 98 E8 | 	byte	$c9, $1f, $08, $f2, $e1, $5e, $00, $1f, $26, $c4, $5e, $12, $2d, $30, $98, $e8
0c4fc     FF 00 EB 4A 
0c500     19 EE FF 39 
0c504     D9 43 C7 F6 
0c508     20 45 0F 2D | 	byte	$ff, $00, $eb, $4a, $19, $ee, $ff, $39, $d9, $43, $c7, $f6, $20, $45, $0f, $2d
0c50c     00 C4 EE 4A 
0c510     26 00 CE 39 
0c514     E0 4A 39 FD 
0c518     DC 49 00 FF | 	byte	$00, $c4, $ee, $4a, $26, $00, $ce, $39, $e0, $4a, $39, $fd, $dc, $49, $00, $ff
0c51c     18 FF 4A C7 
0c520     CE EB 40 32 
0c524     00 DA B0 DA 
0c528     DC 37 4C 61 | 	byte	$18, $ff, $4a, $c7, $ce, $eb, $40, $32, $00, $da, $b0, $da, $dc, $37, $4c, $61
0c52c     49 51 2B 24 
0c530     19 F6 3C E4 
0c534     D9 D9 39 C0 
0c538     24 30 43 01 | 	byte	$49, $51, $2b, $24, $19, $f6, $3c, $e4, $d9, $d9, $39, $c0, $24, $30, $43, $01
0c53c     08 F2 FF 00 
0c540     9E E8 24 26 
0c544     E1 1C B7 24 
0c548     30 26 E1 0E | 	byte	$08, $f2, $ff, $00, $9e, $e8, $24, $26, $e1, $1c, $b7, $24, $30, $26, $e1, $0e
0c54c     B4 CE 1C 0F 
0c550     80 B0 CE 12 
0c554     A2 0F DA E7 
0c558     00 0E F2 DA | 	byte	$b4, $ce, $1c, $0f, $80, $b0, $ce, $12, $a2, $0f, $da, $e7, $00, $0e, $f2, $da
0c55c     FF 26 BB 2B 
0c560     B4 D9 26 32 
0c564     E8 E8 E1 C7 
0c568     80 C9 EB 00 | 	byte	$ff, $26, $bb, $2b, $b4, $d9, $26, $32, $e8, $e8, $e1, $c7, $80, $c9, $eb, $00
0c56c     00 80 B4 A9 
0c570     82 8A 8A 85 
0c574     80 80 80 80 
0c578     82 82 85 86 | 	byte	$00, $80, $b4, $a9, $82, $8a, $8a, $85, $80, $80, $80, $80, $82, $82, $85, $86
0c57c     8A 90 91 93 
0c580     98 9E 9F A5 
0c584     A9 AF B4 B7 
0c588     BD C2 C7 CC | 	byte	$8a, $90, $91, $93, $98, $9e, $9f, $a5, $a9, $af, $b4, $b7, $bd, $c2, $c7, $cc
0c58c     D0 D5 DC E1 
0c590     E7 EB F1 F6 
0c594     F9 FF 01 07 
0c598     0A 0F 12 18 | 	byte	$d0, $d5, $dc, $e1, $e7, $eb, $f1, $f6, $f9, $ff, $01, $07, $0a, $0f, $12, $18
0c59c     19 1F 24 26 
0c5a0     2B 2D 32 34 
0c5a4     37 39 3E 40 
0c5a8     40 43 45 49 | 	byte	$19, $1f, $24, $26, $2b, $2d, $32, $34, $37, $39, $3e, $40, $40, $43, $45, $49
0c5ac     4A 4C 50 51 
0c5b0     54 57 5E 6D 
0c5b4     7F 7F 7F 7F 
0c5b8     7F 7F 7F 7F | 	byte	$4a, $4c, $50, $51, $54, $57, $5e, $6d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
0c5bc     7F 7F 7F 7F 
0c5c0     7F 7F 7F 7F 
0c5c4     7F 7F 7F 7F 
0c5c8     7F 7F 7F 7F 
0c5cc     7F 7F 7F 7F 
0c5d0     7F          | 	byte	$7f[21]
0c5d1     7A 6F 66 5B 
0c5d5     51 49 3E 34 
0c5d9     2B 20 18 0E 
0c5dd     03 00 F6 EE | 	byte	$7a, $6f, $66, $5b, $51, $49, $3e, $34, $2b, $20, $18, $0e, $03, $00, $f6, $ee
0c5e1     E4 DA D3 CC 
0c5e5     C4 BD B6 AF 
0c5e9     A8 A2 9A 97 
0c5ed     91 8C 85 80 | 	byte	$e4, $da, $d3, $cc, $c4, $bd, $b6, $af, $a8, $a2, $9a, $97, $91, $8c, $85, $80
0c5f1     80 80 80 80 
      ...             
0c619     80 80 80 80 
0c61d     80 80 80    | 	byte	$80[47]
0c620     85 91 9A A5 
0c624     AF B7 C2 CC 
0c628     D3 DC E7 EE 
0c62c     F8 FF 03 0E | 	byte	$85, $91, $9a, $a5, $af, $b7, $c2, $cc, $d3, $dc, $e7, $ee, $f8, $ff, $03, $0e
0c630     15 1C 24 2B 
0c634     30 37 3C 43 
0c638     4A 50 54 58 
0c63c     61 69 7F 7F | 	byte	$15, $1c, $24, $2b, $30, $37, $3c, $43, $4a, $50, $54, $58, $61, $69, $7f, $7f
0c640     7F 7F 7F 7F 
      ...             
0c65c     7F 7F 7F 7F 
0c660     7F 7F 7F    | 	byte	$7f[35]
0c663     7A 6F 66 5B 
0c667     51 49 40 37 
0c66b     2D 26 1C 12 
0c66f     0A 03 FD F8 | 	byte	$7a, $6f, $66, $5b, $51, $49, $40, $37, $2d, $26, $1c, $12, $0a, $03, $fd, $f8
0c673     EE E8 E0 DA 
0c677     D3 CC C7 C2 
0c67b     BB B6 B0 A9 
0c67f     A5 9F 97 8C | 	byte	$ee, $e8, $e0, $da, $d3, $cc, $c7, $c2, $bb, $b6, $b0, $a9, $a5, $9f, $97, $8c
0c683     80 80 80 80 
      ...             
0c69f     80 80 80 80 
0c6a3     80 80 80 80 | 	byte	$80[36]
0c6a7     85 90 98 A2 
0c6ab     A9 B4 BD C7 
0c6af     CE D9 E1 E8 
0c6b3     F2 F9 01 08 | 	byte	$85, $90, $98, $a2, $a9, $b4, $bd, $c7, $ce, $d9, $e1, $e8, $f2, $f9, $01, $08
0c6b7     0F 19 20 2B 
0c6bb     32 39 40 4A 
0c6bf     54 58 61 68 
0c6c3     6D 74 7A 7E | 	byte	$0f, $19, $20, $2b, $32, $39, $40, $4a, $54, $58, $61, $68, $6d, $74, $7a, $7e
0c6c7     7F 7F 7F 7F 
      ...             
0c6eb     7F 7F 7F 7F 
0c6ef     7F          | 	byte	$7f[41]
0c6f0     7E 7B 7A 74 
0c6f4     70 6D 68 66 
0c6f8     62 5E 58 57 
0c6fc     51 4C 4C 45 | 	byte	$7e, $7b, $7a, $74, $70, $6d, $68, $66, $62, $5e, $58, $57, $51, $4c, $4c, $45
0c700     43 3E 39 34 
0c704     32 2D 27 26 
0c708     20 1F 19 15 
0c70c     12 0E 0A 07 | 	byte	$43, $3e, $39, $34, $32, $2d, $27, $26, $20, $1f, $19, $15, $12, $0e, $0a, $07
0c710     03 00 FD F9 
0c714     F6 F2 F1 EB 
0c718     E8 E7 E4 E0 
0c71c     DC DA D9 D5 | 	byte	$03, $00, $fd, $f9, $f6, $f2, $f1, $eb, $e8, $e7, $e4, $e0, $dc, $da, $d9, $d5
0c720     D3 D0 CC C7 
0c724     C7 C2 C0 BB 
0c728     B6 B4 AC A9 
0c72c     A8 A2 9F 9A | 	byte	$d3, $d0, $cc, $c7, $c7, $c2, $c0, $bb, $b6, $b4, $ac, $a9, $a8, $a2, $9f, $9a
0c730     98 93 91 8C 
0c734     8A 85 82 80 
0c738     80 80 80 80 
0c73c     80 80 80 80 | 	byte	$98, $93, $91, $8c, $8a, $85, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80
0c740     80 80 80 80 
0c744     80 80 80 80 
0c748     80 80 80 80 
0c74c     80 80 80 80 
0c750     80 80 80 80 
0c754     80 80 80 80 
0c758     80          | 	byte	$80[25]
0c759     82 85 86 8A 
0c75d     8C 90 91 93 
0c761     97 98 9A 9E 
0c765     9F A2 A8 A9 | 	byte	$82, $85, $86, $8a, $8c, $90, $91, $93, $97, $98, $9a, $9e, $9f, $a2, $a8, $a9
0c769     AC AF B0 B6 
0c76d     B7 BB BD C0 
0c771     C4 C7 C9 CC 
0c775     D0 D3 D5 DA | 	byte	$ac, $af, $b0, $b6, $b7, $bb, $bd, $c0, $c4, $c7, $c9, $cc, $d0, $d3, $d5, $da
0c779     DC E0 E1 E4 
0c77d     E7 EB EE F1 
0c781     F2 F6 F8 F9 
0c785     FD 00 01 03 | 	byte	$dc, $e0, $e1, $e4, $e7, $eb, $ee, $f1, $f2, $f6, $f8, $f9, $fd, $00, $01, $03
0c789     07 08 0A 0E 
0c78d     0F 0F 12 15 
0c791     18 19 1C 1F 
0c795     20 26 2B 2D | 	byte	$07, $08, $0a, $0e, $0f, $0f, $12, $15, $18, $19, $1c, $1f, $20, $26, $2b, $2d
0c799     30 32 34 37 
0c79d     39 3C 3E 40 
0c7a1     43 45 45 49 
0c7a5     4A 4C 50 50 | 	byte	$30, $32, $34, $37, $39, $3c, $3e, $40, $43, $45, $45, $49, $4a, $4c, $50, $50
0c7a9     51 51 54 54 
0c7ad     57 57 57 57 
0c7b1     57 58 57 58 
0c7b5     58 58 58 58 | 	byte	$51, $51, $54, $54, $57, $57, $57, $57, $57, $58, $57, $58, $58, $58, $58, $58
0c7b9     58 57 57 57 
0c7bd     54 54 54 51 
0c7c1     51 51 50 4C 
0c7c5     4C 4C 4A 49 | 	byte	$58, $57, $57, $57, $54, $54, $54, $51, $51, $51, $50, $4c, $4c, $4c, $4a, $49
0c7c9     49 45 43 43 
0c7cd     40 3E 3E 3C 
0c7d1     39 37 37 34 
0c7d5     32 30 30 2D | 	byte	$49, $45, $43, $43, $40, $3e, $3e, $3c, $39, $37, $37, $34, $32, $30, $30, $2d
0c7d9     2B 27 27 26 
0c7dd     24 20 1F 1F 
0c7e1     1C 19 18 18 
0c7e5     15 12 0F 0E | 	byte	$2b, $27, $27, $26, $24, $20, $1f, $1f, $1c, $19, $18, $18, $15, $12, $0f, $0e
0c7e9     0E 08 08 07 
0c7ed     07 03 01 00 
0c7f1     00 FF FD F9 
0c7f5     F9 F8 F6 F6 | 	byte	$0e, $08, $08, $07, $07, $03, $01, $00, $00, $ff, $fd, $f9, $f9, $f8, $f6, $f6
0c7f9     F2 F1 F1 EE 
0c7fd     EE EB EB E8 
0c801     E7 E4 E4 E1 
0c805     E0 DA C7 C9 | 	byte	$f2, $f1, $f1, $ee, $ee, $eb, $eb, $e8, $e7, $e4, $e4, $e1, $e0, $da, $c7, $c9
0c809     BD CE D3 B6 
0c80d     D9 B4 B0 B0 
0c811     D3 9F C4 B4 
0c815     A8 C7 C4 A5 | 	byte	$bd, $ce, $d3, $b6, $d9, $b4, $b0, $b0, $d3, $9f, $c4, $b4, $a8, $c7, $c4, $a5
0c819     B0 C9 D0 BB 
0c81d     B4 B6 B0 BB 
0c821     CC A9 CE C7 
0c825     B0 D0 BD C0 | 	byte	$b0, $c9, $d0, $bb, $b4, $b6, $b0, $bb, $cc, $a9, $ce, $c7, $b0, $d0, $bd, $c0
0c829     C4 CC D9 D9 
0c82d     DC DC D0 BD 
0c831     E7 E4 E4 DA 
0c835     DA EB DA E1 | 	byte	$c4, $cc, $d9, $d9, $dc, $dc, $d0, $bd, $e7, $e4, $e4, $da, $da, $eb, $da, $e1
0c839     E7 F2 D0 E1 
0c83d     DC E7 00 D5 
0c841     EB E8 EB FF 
0c845     EE E4 EB 00 | 	byte	$e7, $f2, $d0, $e1, $dc, $e7, $00, $d5, $eb, $e8, $eb, $ff, $ee, $e4, $eb, $00
0c849     D3 FF E8 F9 
0c84d     00 EE FF F9 
0c851     FD F8 DC F6 
0c855     FF 03 E7 FF | 	byte	$d3, $ff, $e8, $f9, $00, $ee, $ff, $f9, $fd, $f8, $dc, $f6, $ff, $03, $e7, $ff
0c859     FF FF 00 E7 
0c85d     FF F8 FF 03 
0c861     E8 F2 F2 F6 
0c865     F9 07 07 00 | 	byte	$ff, $ff, $00, $e7, $ff, $f8, $ff, $03, $e8, $f2, $f2, $f6, $f9, $07, $07, $00
0c869     F6 0F 01 F2 
0c86d     FF 01 12 F1 
0c871     F9 FF 03 EB 
0c875     F9 FF 12 01 | 	byte	$f6, $0f, $01, $f2, $ff, $01, $12, $f1, $f9, $ff, $03, $eb, $f9, $ff, $12, $01
0c879     F8 0E 00 FF 
0c87d     0A 00 00 FF 
0c881     08 0F 08 08 
0c885     07 03 0E 00 | 	byte	$f8, $0e, $00, $ff, $0a, $00, $00, $ff, $08, $0f, $08, $08, $07, $03, $0e, $00
0c889     07 07 01 01 
0c88d     08 01 FD F6 
0c891     07 01 00 F8 
0c895     F9 0A 03 01 | 	byte	$07, $07, $01, $01, $08, $01, $fd, $f6, $07, $01, $00, $f8, $f9, $0a, $03, $01
0c899     F1 0A 00 FF 
0c89d     FF 03 FF FD 
0c8a1     F8 F9 08 EB 
0c8a5     FD F8 F1 F8 | 	byte	$f1, $0a, $00, $ff, $ff, $03, $ff, $fd, $f8, $f9, $08, $eb, $fd, $f8, $f1, $f8
0c8a9     FF F2 FF 00 
0c8ad     F2 07 F2 F6 
0c8b1     F9 01 EE FF 
0c8b5     F2 F1 FF FF | 	byte	$ff, $f2, $ff, $00, $f2, $07, $f2, $f6, $f9, $01, $ee, $ff, $f2, $f1, $ff, $ff
0c8b9     EE F6 00 01 
0c8bd     F8 F2 F2 F2 
0c8c1     F6 FF EB FF 
0c8c5     F2 F1 FD F2 | 	byte	$ee, $f6, $00, $01, $f8, $f2, $f2, $f2, $f6, $ff, $eb, $ff, $f2, $f1, $fd, $f2
0c8c9     F2 F6 F8 FD 
0c8cd     FF FF FD F8 
0c8d1     F1 00 01 F9 
0c8d5     F8 F8 FD F1 | 	byte	$f2, $f6, $f8, $fd, $ff, $ff, $fd, $f8, $f1, $00, $01, $f9, $f8, $f8, $fd, $f1
0c8d9     FD FD 00 EB 
0c8dd     F6 F2 FF F8 
0c8e1     EE F9 F8 FF 
0c8e5     F9 F8 F2 FF | 	byte	$fd, $fd, $00, $eb, $f6, $f2, $ff, $f8, $ee, $f9, $f8, $ff, $f9, $f8, $f2, $ff
0c8e9     EE F9 F8 F6 
0c8ed     00 F6 F9 F9 
0c8f1     F8 F9 E8 F6 
0c8f5     F9 00 EB F9 | 	byte	$ee, $f9, $f8, $f6, $00, $f6, $f9, $f9, $f8, $f9, $e8, $f6, $f9, $00, $eb, $f9
0c8f9     F9 F9 F8 EE 
0c8fd     F9 F2 F9 F8 
0c901     EE F1 F1 F2 
0c905     F6 FD FD F1 | 	byte	$f9, $f9, $f8, $ee, $f9, $f2, $f9, $f8, $ee, $f1, $f1, $f2, $f6, $fd, $fd, $f1
0c909     F9 00 F8 EB 
0c90d     F8 FF F8 EB 
0c911     F6 FD F1 F2 
0c915     F6 FF F8 F6 | 	byte	$f9, $00, $f8, $eb, $f8, $ff, $f8, $eb, $f6, $fd, $f1, $f2, $f6, $ff, $f8, $f6
0c919     F8 FD F2 FD 
0c91d     F8 F6 F6 FD 
0c921     FF FD FD FD 
0c925     F9 FF F8 F9 | 	byte	$f8, $fd, $f2, $fd, $f8, $f6, $f6, $fd, $ff, $fd, $fd, $fd, $f9, $ff, $f8, $f9
0c929     FD F9 F9 F9 
0c92d     FD F6 F2 FD 
0c931     F9 F8 F6 F6 
0c935     FF FD F9 F1 | 	byte	$fd, $f9, $f9, $f9, $fd, $f6, $f2, $fd, $f9, $f8, $f6, $f6, $ff, $fd, $f9, $f1
0c939     FF F8 F8 F9 
0c93d     FD F8 F8 F6 
0c941     F6 00 EE F8 
0c945     F6 F2 F6 F9 | 	byte	$ff, $f8, $f8, $f9, $fd, $f8, $f8, $f6, $f6, $00, $ee, $f8, $f6, $f2, $f6, $f9
0c949     F2 F9 F9 F6 
0c94d     FD F6 F6 F6 
0c951     F9 F6 F6 F2 
0c955     FD F6 F6 F8 | 	byte	$f2, $f9, $f9, $f6, $fd, $f6, $f6, $f6, $f9, $f6, $f6, $f2, $fd, $f6, $f6, $f8
0c959     F9 F1 F8 F8 
0c95d     F9 F9 F8 F6 
0c961     F8 FD F2 F8 
0c965     FD F6 F6 FD | 	byte	$f9, $f1, $f8, $f8, $f9, $f9, $f8, $f6, $f8, $fd, $f2, $f8, $fd, $f6, $f6, $fd
0c969     F6 F6 F9 F9 
0c96d     F6 FD F8 F6 
0c971     F6 FD F1 F2 
0c975     F6 F6 FF F1 | 	byte	$f6, $f6, $f9, $f9, $f6, $fd, $f8, $f6, $f6, $fd, $f1, $f2, $f6, $f6, $ff, $f1
0c979     FF F8 F6 F6 
0c97d     F9 F8 F9 F9 
0c981     F2 F6 F9 F8 
0c985     F6 F6 F9 F8 | 	byte	$ff, $f8, $f6, $f6, $f9, $f8, $f9, $f9, $f2, $f6, $f9, $f8, $f6, $f6, $f9, $f8
0c989     F9 F9 F9 F6 
0c98d     F9 F9 F9 F9 
0c991     F6 F8 F9 F9 
0c995     F6 F6 F9 FD | 	byte	$f9, $f9, $f9, $f6, $f9, $f9, $f9, $f9, $f6, $f8, $f9, $f9, $f6, $f6, $f9, $fd
0c999     F9 F9 F6 F8 
0c99d     F8 F8 FF F2 
0c9a1     F6 F6 F8 FD 
0c9a5     F2 F9 F9 F8 | 	byte	$f9, $f9, $f6, $f8, $f8, $f8, $ff, $f2, $f6, $f6, $f8, $fd, $f2, $f9, $f9, $f8
0c9a9     F8 FF F9 F8 
0c9ad     F6 F8 F6 FD 
0c9b1     FD F9 F6 F9 
0c9b5     F9 F8 F6 F6 | 	byte	$f8, $ff, $f9, $f8, $f6, $f8, $f6, $fd, $fd, $f9, $f6, $f9, $f9, $f8, $f6, $f6
0c9b9     F8 F8 F9 F8 
0c9bd     F8 F2 F8 F9 
0c9c1     F9 F8 F9 F9 
0c9c5     F8 F6 F6 F6 | 	byte	$f8, $f8, $f9, $f8, $f8, $f2, $f8, $f9, $f9, $f8, $f9, $f9, $f8, $f6, $f6, $f6
0c9c9     F9 F9 F9 F9 
0c9cd     F8 F9 F9 F8 
0c9d1     F9 F6 F8 F8 
0c9d5     F9 F2 F6 F8 | 	byte	$f9, $f9, $f9, $f9, $f8, $f9, $f9, $f8, $f9, $f6, $f8, $f8, $f9, $f2, $f6, $f8
0c9d9     F9 F9 F8 FD 
0c9dd     F9 F9 F9 F9 
0c9e1     F8 F8 F6 F6 
0c9e5     F9 FD F8 F2 | 	byte	$f9, $f9, $f8, $fd, $f9, $f9, $f9, $f9, $f8, $f8, $f6, $f6, $f9, $fd, $f8, $f2
0c9e9     F8 F6 F8 F9 
0c9ed     F9 F8 F9 F9 
0c9f1     F8 F8 F9 F6 
0c9f5     F9 F9 F8 F8 | 	byte	$f8, $f6, $f8, $f9, $f9, $f8, $f9, $f9, $f8, $f8, $f9, $f6, $f9, $f9, $f8, $f8
0c9f9     F9 F8 F8 F8 
0c9fd     F9 F9 F9 F8 
0ca01     F8 FD F8 F8 
0ca05     F9 FD F6 FD | 	byte	$f9, $f8, $f8, $f8, $f9, $f9, $f9, $f8, $f8, $fd, $f8, $f8, $f9, $fd, $f6, $fd
0ca09     F9 F8 F8 FD 
0ca0d     F8 F9 F9 F8 
0ca11     F8 FD F8 F8 
0ca15     F8 F8 F9 F9 | 	byte	$f9, $f8, $f8, $fd, $f8, $f9, $f9, $f8, $f8, $fd, $f8, $f8, $f8, $f8, $f9, $f9
0ca19     F8 FD F8 F8 
0ca1d     F9 F9 F8 FD 
0ca21     F8 F8 F8 F9 
0ca25     F8 F8 F8 F9 | 	byte	$f8, $fd, $f8, $f8, $f9, $f9, $f8, $fd, $f8, $f8, $f8, $f9, $f8, $f8, $f8, $f9
0ca29     F9 F9 F9 F8 
0ca2d     F8 FD F9 F9 
0ca31     F8 F6 F9 FD 
0ca35     F8 F8 F8 FD | 	byte	$f9, $f9, $f9, $f8, $f8, $fd, $f9, $f9, $f8, $f6, $f9, $fd, $f8, $f8, $f8, $fd
0ca39     F9 F9 F8 F8 
0ca3d     F8 F8 FD F8 
0ca41     F8 F8 F8 FD 
0ca45     F8 F6 F9 F8 | 	byte	$f9, $f9, $f8, $f8, $f8, $f8, $fd, $f8, $f8, $f8, $f8, $fd, $f8, $f6, $f9, $f8
0ca49     F8 F9 F9 F9 
0ca4d     F8 F9 F8 F9 
0ca51     FD F9 F8 F8 
0ca55     F9 F9 F6 F8 | 	byte	$f8, $f9, $f9, $f9, $f8, $f9, $f8, $f9, $fd, $f9, $f8, $f8, $f9, $f9, $f6, $f8
0ca59     F8 F9 F9 F9 
0ca5d     F9 F8 F9 F9 
0ca61     F9 F8 F8 F9 
0ca65     F8 F8 F8 F8 | 	byte	$f8, $f9, $f9, $f9, $f9, $f8, $f9, $f9, $f9, $f8, $f8, $f9, $f8, $f8, $f8, $f8
0ca69     F8 F9 F9 F9 
0ca6d     F8 F8 F9 F8 
0ca71     F9 F8 F8 F8 
0ca75     F9 F8 F8 F8 | 	byte	$f8, $f9, $f9, $f9, $f8, $f8, $f9, $f8, $f9, $f8, $f8, $f8, $f9, $f8, $f8, $f8
0ca79     F9 F9 EE 00 
0ca7d     00 F6 F6 F6 
0ca81     F6 F6 F6 F6 
0ca85     F6 F6 F6 F6 | 	byte	$f9, $f9, $ee, $00, $00, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f6
0ca89     F6 F2 F2 F2 
0ca8d     F2 F2 F2 F2 
0ca91     F2 F2 F2 F2 
0ca95     EA B6 FF 04 | 	byte	$f6, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $ea, $b6, $ff, $04
0ca99     2A FF DF FF 
0ca9d     16 81 FF CF 
0caa1     C2 99 60 9C 
0caa5     FF 00 C1 D6 | 	byte	$2a, $ff, $df, $ff, $16, $81, $ff, $cf, $c2, $99, $60, $9c, $ff, $00, $c1, $d6
0caa9     2D 00 E5 7F 
0caad     CF 2D 31 EE 
0cab1     B6 60 31 FF 
0cab5     7E 00 F6 FF | 	byte	$2d, $00, $e5, $7f, $cf, $2d, $31, $ee, $b6, $60, $31, $ff, $7e, $00, $f6, $ff
0cab9     3E A3 C2 CD 
0cabd     E5 56 CD C2 
0cac1     FF 64 B3 3B 
0cac5     21 00 80 B6 | 	byte	$3e, $a3, $c2, $cd, $e5, $56, $cd, $c2, $ff, $64, $b3, $3b, $21, $00, $80, $b6
0cac9     47 00 D9 0A 
0cacd     CF B6 CD FF 
0cad1     60 0E 00 F8 
0cad5     00 0E 00 2D | 	byte	$47, $00, $d9, $0a, $cf, $b6, $cd, $ff, $60, $0e, $00, $f8, $00, $0e, $00, $2d
0cad9     64 44 EA CF 
0cadd     B3 B3 47 ED 
0cae1     13 31 3E 16 
0cae5     37 16 FF F2 | 	byte	$64, $44, $ea, $cf, $b3, $b3, $47, $ed, $13, $31, $3e, $16, $37, $16, $ff, $f2
0cae9     00 9C B3 0A 
0caed     FC 80 99 99 
0caf1     16 80 C1 A7 
0caf5     AF CD 2D 00 | 	byte	$00, $9c, $b3, $0a, $fc, $80, $99, $99, $16, $80, $c1, $a7, $af, $cd, $2d, $00
0caf9     00 D9 31 CF 
0cafd     FF F6 D9 93 
0cb01     FF 04 24 4A 
0cb05     3F 21 DC 8E | 	byte	$00, $d9, $31, $cf, $ff, $f6, $d9, $93, $ff, $04, $24, $4a, $3f, $21, $dc, $8e
0cb09     80 C2 FF CF 
0cb0d     B3 7E 13 16 
0cb11     04 F2 EE 60 
0cb15     24 16 F2 4A | 	byte	$80, $c2, $ff, $cf, $b3, $7e, $13, $16, $04, $f2, $ee, $60, $24, $16, $f2, $4a
0cb19     9C 2D 1E 12 
0cb1d     AA CF D3 FF 
0cb21     3E 93 C2 B3 
0cb25     C1 FC FF F2 | 	byte	$9c, $2d, $1e, $12, $aa, $cf, $d3, $ff, $3e, $93, $c2, $b3, $c1, $fc, $ff, $f2
0cb29     9C 81 C1 3E 
0cb2d     80 CD 00 A7 
0cb31     51 EA B6 B3 
0cb35     31 CD 13 CF | 	byte	$9c, $81, $c1, $3e, $80, $cd, $00, $a7, $51, $ea, $b6, $b3, $31, $cd, $13, $cf
0cb39     99 00 0E 00 
0cb3d     EA D9 16 82 
0cb41     E5 CF B3 8E 
0cb45     47 B6 CD 00 | 	byte	$99, $00, $0e, $00, $ea, $d9, $16, $82, $e5, $cf, $b3, $8e, $47, $b6, $cd, $00
0cb49     B6 CF FF 16 
0cb4d     CD 7A CF FF 
0cb51     31 ED AD 60 
0cb55     31 FF 7E 00 | 	byte	$b6, $cf, $ff, $16, $cd, $7a, $cf, $ff, $31, $ed, $ad, $60, $31, $ff, $7e, $00
0cb59     F6 FF 31 A7 
0cb5d     C2 D9 FF 56 
0cb61     D9 C5 FF 64 
0cb65     C1 3F 2D 00 | 	byte	$f6, $ff, $31, $a7, $c2, $d9, $ff, $56, $d9, $c5, $ff, $64, $c1, $3f, $2d, $00
0cb69     80 BC 59 00 
0cb6d     E5 0A D6 C2 
0cb71     E5 13 7A 21 
0cb75     0A FF 0E 1E | 	byte	$80, $bc, $59, $00, $e5, $0a, $d6, $c2, $e5, $13, $7a, $21, $0a, $ff, $0e, $1e
0cb79     0A 3B 64 51 
0cb7d     00 EA C1 C1 
0cb81     47 00 21 4A 
0cb85     56 31 3F 37 | 	byte	$0a, $3b, $64, $51, $00, $ea, $c1, $c1, $47, $00, $21, $4a, $56, $31, $3f, $37
0cb89     00 0E 13 EA 
0cb8d     81 27 F8 CF 
0cb91     8E 9C FF CF 
0cb95     99 CF BC CD | 	byte	$00, $0e, $13, $ea, $81, $27, $f8, $cf, $8e, $9c, $ff, $cf, $99, $cf, $bc, $cd
0cb99     F8 51 21 EA 
0cb9d     FF 24 D9 0A 
0cba1     F6 DF A7 13 
0cba5     0E 27 4A 4A | 	byte	$f8, $51, $21, $ea, $ff, $24, $d9, $0a, $f6, $df, $a7, $13, $0e, $27, $4a, $4a
0cba9     2A D6 99 81 
0cbad     C5 FF 00 99 
0cbb1     7F 1B 1E 16 
0cbb5     00 00 53 4A | 	byte	$2a, $d6, $99, $81, $c5, $ff, $00, $99, $7f, $1b, $1e, $16, $00, $00, $53, $4a
0cbb9     31 EA 53 00 
0cbbd     CD 4A 12 CF 
0cbc1     CD B9 C5 3F 
0cbc5     CF B3 AA AA | 	byte	$31, $ea, $53, $00, $cd, $4a, $12, $cf, $cd, $b9, $c5, $3f, $cf, $b3, $aa, $aa
0cbc9     F2 EA 00 00 
0cbcd     80 CD FF 16 
0cbd1     80 2D B6 E5 
0cbd5     31 A0 CF 80 | 	byte	$f2, $ea, $00, $00, $80, $cd, $ff, $16, $80, $2d, $b6, $e5, $31, $a0, $cf, $80
0cbd9     81 80 80 80 
0cbdd     80 80 80 80 
0cbe1     80 81 82 86 
0cbe5     8A 8E 90 93 | 	byte	$81, $80, $80, $80, $80, $80, $80, $80, $80, $81, $82, $86, $8a, $8e, $90, $93
0cbe9     99 9C A3 A7 
0cbed     AD B3 B6 BC 
0cbf1     C2 C9 CD D6 
0cbf5     D9 DF E5 ED | 	byte	$99, $9c, $a3, $a7, $ad, $b3, $b6, $bc, $c2, $c9, $cd, $d6, $d9, $df, $e5, $ed
0cbf9     F6 F8 FF 08 
0cbfd     16 47 7F 7F 
0cc01     7F 7F 7F 7F 
0cc05     7F 7F 7F 7F | 	byte	$f6, $f8, $ff, $08, $16, $47, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
0cc09     7F 7F 7F 7F 
0cc0d     7F 7F 7F 7F 
0cc11     7F 7F 7F 7F 
0cc15     7F 7F 7F 7F 
0cc19     7F 7F 7F 7F 
0cc1d     7F          | 	byte	$7f[21]
0cc1e     7A 70 67 5D 
0cc22     51 44 31 00 
0cc26     80 90 80 80 
0cc2a     80 80 80 80 | 	byte	$7a, $70, $67, $5d, $51, $44, $31, $00, $80, $90, $80, $80, $80, $80, $80, $80
0cc2e     80 80 80 80 
0cc32     80 80 80 80 
0cc36     80 80 80 80 
0cc3a     80 80 80 80 
0cc3e     80 80 80 80 
0cc42     80 80 80 80 
0cc46     80 80 80 80 | 	byte	$80[28]
0cc4a     82 93 B3 2D 
0cc4e     4A 56 60 68 
0cc52     72 7A 7F 7F 
0cc56     7F 7F 7F 7F | 	byte	$82, $93, $b3, $2d, $4a, $56, $60, $68, $72, $7a, $7f, $7f, $7f, $7f, $7f, $7f
0cc5a     7F 7F 7F 7F 
0cc5e     7F 7F 7F 7F 
0cc62     7F 7F 7F    | 	byte	$7f[11]
0cc65     7E 76 72 6D 
0cc69     67 64 59 53 
0cc6d     4D 47 3E 37 
0cc71     31 24 12 DC | 	byte	$7e, $76, $72, $6d, $67, $64, $59, $53, $4d, $47, $3e, $37, $31, $24, $12, $dc
0cc75     80 82 80 80 
0cc79     80 80 80 80 
0cc7d     80 80 80 80 
0cc81     80 80 80 80 | 	byte	$80, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
0cc85     80 80 80 80 
0cc89     80 80 80 80 
0cc8d     80 80 80 80 
0cc91     80 80 80 80 
0cc95     80          | 	byte	$80[17]
0cc96     86 8E 98 A0 
0cc9a     AD CD 47 64 
0cc9e     64 6D 76 7F 
0cca2     7F 7F 7F 7F | 	byte	$86, $8e, $98, $a0, $ad, $cd, $47, $64, $64, $6d, $76, $7f, $7f, $7f, $7f, $7f
0cca6     7F 7F 7F 7F 
0ccaa     7F 7F 7F 7F 
0ccae     7F 7F 7F 7F 
0ccb2     7F 7F 7F 7F 
0ccb6     7F 7F       | 	byte	$7f[18]
0ccb8     7E 76 70 68 
0ccbc     64 59 56 4D 
0ccc0     3F 31 0A 80 
0ccc4     AF 99 8E 81 | 	byte	$7e, $76, $70, $68, $64, $59, $56, $4d, $3f, $31, $0a, $80, $af, $99, $8e, $81
0ccc8     80 80 80 80 
0cccc     80 80 80 80 
0ccd0     80 80 80 80 
0ccd4     80 80 80 80 
0ccd8     80 80 80 80 
0ccdc     80 80 80 80 | 	byte	$80[24]
0cce0     81 8A 8E 93 
0cce4     9C A3 AD B6 
0cce8     CD FF 7F 60 
0ccec     60 60 6D 7A | 	byte	$81, $8a, $8e, $93, $9c, $a3, $ad, $b6, $cd, $ff, $7f, $60, $60, $60, $6d, $7a
0ccf0     7F 7F 7F 7F 
0ccf4     7F 7F 7F 7F 
0ccf8     7F 7F 7F 7F 
0ccfc     7F 7F 7F 7F 
0cd00     7F 7F 7F 7F | 	byte	$7f[20]
0cd04     7E 76 70 68 
0cd08     64 60 56 51 
0cd0c     4A 44 37 24 
0cd10     00 80 A3 9C | 	byte	$7e, $76, $70, $68, $64, $60, $56, $51, $4a, $44, $37, $24, $00, $80, $a3, $9c
0cd14     90 86 80 80 
0cd18     80 80 80 80 
0cd1c     80 80 80 80 
0cd20     80 80 80 80 | 	byte	$90, $86, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
0cd24     80 80 80 80 
0cd28     80 80 80 80 | 	byte	$80[8]
0cd2c     81 82 8A 90 
0cd30     98 99 A0 A7 
0cd34     AF B3 B9 C1 
0cd38     C9 CF D9 E5 | 	byte	$81, $82, $8a, $90, $98, $99, $a0, $a7, $af, $b3, $b9, $c1, $c9, $cf, $d9, $e5
0cd3c     FF 7F 59 70 
0cd40     7E 7F 7F 7F 
0cd44     7F 7F 7F 7F 
0cd48     7F 7F 7F 7F | 	byte	$ff, $7f, $59, $70, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
0cd4c     7F 7F 7F 7F 
0cd50     7F 7F 7F 7F 
0cd54     7F 7F 7F 7F | 	byte	$7f[12]
0cd58     7A 72 6D 67 
0cd5c     64 59 53 4D 
0cd60     47 3F 3B 33 
0cd64     31 27 1E 13 | 	byte	$7a, $72, $6d, $67, $64, $59, $53, $4d, $47, $3f, $3b, $33, $31, $27, $1e, $13
0cd68     0E 01 EA 80 
0cd6c     8E 80 80 80 
0cd70     80 80 80 80 
0cd74     80 80 80 80 | 	byte	$0e, $01, $ea, $80, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
0cd78     80 80 80 80 
0cd7c     80 80 80 80 
0cd80     80 80 80 80 
0cd84     80 80 80 80 
0cd88     80          | 	byte	$80[17]
0cd89     81 86 8E 93 
0cd8d     98 A0 A3 AD 
0cd91     B3 B9 C1 C5 
0cd95     CD D6 E5 FF | 	byte	$81, $86, $8e, $93, $98, $a0, $a3, $ad, $b3, $b9, $c1, $c5, $cd, $d6, $e5, $ff
0cd99     7F 53 64 6D 
0cd9d     76 7F 7F 7F 
0cda1     7F 7F 7F 7F 
0cda5     7F 7F 7F 7F | 	byte	$7f, $53, $64, $6d, $76, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
0cda9     7F 7F 7F 7F 
0cdad     7F 7F 7F 7F 
0cdb1     7F          | 	byte	$7f[9]
0cdb2     7E 76 72 6D 
0cdb6     68 64 5D 56 
0cdba     51 4A 44 3F 
0cdbe     3B 33 2D 24 | 	byte	$7e, $76, $72, $6d, $68, $64, $5d, $56, $51, $4a, $44, $3f, $3b, $33, $2d, $24
0cdc2     1E 16 0E 00 
0cdc6     B6 80 82 80 
0cdca     80 80 80 80 
0cdce     80 80 80 80 | 	byte	$1e, $16, $0e, $00, $b6, $80, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80
0cdd2     80 80 80 80 
0cdd6     80 80 80 80 
0cdda     80 80 80 80 
0cdde     80 80 80 80 | 	byte	$80[16]
0cde2     81 82 8A 8E 
0cde6     93 99 A0 A7 
0cdea     AD B3 B9 C1 
0cdee     C5 CD D3 D9 | 	byte	$81, $82, $8a, $8e, $93, $99, $a0, $a7, $ad, $b3, $b9, $c1, $c5, $cd, $d3, $d9
0cdf2     E2 F2 27 7F 
0cdf6     60 60 6D 72 
0cdfa     7A 7F 7F 7F 
0cdfe     7F 7F 7F 7F | 	byte	$e2, $f2, $27, $7f, $60, $60, $6d, $72, $7a, $7f, $7f, $7f, $7f, $7f, $7f, $7f
0ce02     7F 7F 7F 7F 
0ce06     7F 7F 7F 7F 
0ce0a     7F 7F       | 	byte	$7f[10]
0ce0c     7E 76 72 6D 
0ce10     68 64 5D 59 
0ce14     53 51 4A 44 
0ce18     3E 37 33 2D | 	byte	$7e, $76, $72, $6d, $68, $64, $5d, $59, $53, $51, $4a, $44, $3e, $37, $33, $2d
0ce1c     27 21 16 13 
0ce20     0A 00 DC 80 
0ce24     9C 90 8A 81 
0ce28     80 80 80 80 | 	byte	$27, $21, $16, $13, $0a, $00, $dc, $80, $9c, $90, $8a, $81, $80, $80, $80, $80
0ce2c     80 80 80 80 
0ce30     80 80 80 80 
0ce34     80 80 80 80 
0ce38     80 80 80 80 | 	byte	$80[16]
0ce3c     81 82 8A 8E 
0ce40     93 98 9C A0 
0ce44     A7 AD AF B6 
0ce48     BC C1 C5 CD | 	byte	$81, $82, $8a, $8e, $93, $98, $9c, $a0, $a7, $ad, $af, $b6, $bc, $c1, $c5, $cd
0ce4c     D3 D9 E2 EE 
0ce50     21 7E 53 5D 
0ce54     60 67 6D 70 
0ce58     76 7A 7E 7F | 	byte	$d3, $d9, $e2, $ee, $21, $7e, $53, $5d, $60, $67, $6d, $70, $76, $7a, $7e, $7f
0ce5c     7F 7F 7F 7F 
0ce60     7F 7F       | 	byte	$7f[6]
0ce62     7E 7E 7A 76 
0ce66     72 70 6D 67 
0ce6a     64 5D 59 56 
0ce6e     51 4D 47 44 | 	byte	$7e, $7e, $7a, $76, $72, $70, $6d, $67, $64, $5d, $59, $56, $51, $4d, $47, $44
0ce72     3E 37 33 2A 
0ce76     27 1B EA F2 
0ce7a     DF C2 BC C1 
0ce7e     27 9C FF DC | 	byte	$3e, $37, $33, $2a, $27, $1b, $ea, $f2, $df, $c2, $bc, $c1, $27, $9c, $ff, $dc
0ce82     C1 DC D6 BC 
0ce86     AD 8E C9 80 
0ce8a     93 B3 EA 80 
0ce8e     E5 BC AA 80 | 	byte	$c1, $dc, $d6, $bc, $ad, $8e, $c9, $80, $93, $b3, $ea, $80, $e5, $bc, $aa, $80
0ce92     90 CD D3 CF 
0ce96     B9 F8 DC DC 
0ce9a     C9 81 CF CF 
0ce9e     DF DC 80 D9 | 	byte	$90, $cd, $d3, $cf, $b9, $f8, $dc, $dc, $c9, $81, $cf, $cf, $df, $dc, $80, $d9
0cea2     E5 EA C1 FF 
0cea6     9C CD DC C1 
0ceaa     90 C5 D9 F6 
0ceae     C5 B6 FF 0A | 	byte	$e5, $ea, $c1, $ff, $9c, $cd, $dc, $c1, $90, $c5, $d9, $f6, $c5, $b6, $ff, $0a
0ceb2     FF FF EE E5 
0ceb6     E5 04 99 FF 
0ceba     D6 C1 16 13 
0cebe     00 00 DF 16 | 	byte	$ff, $ff, $ee, $e5, $e5, $04, $99, $ff, $d6, $c1, $16, $13, $00, $00, $df, $16
0cec2     C2 DF D9 0E 
0cec6     E2 DC D6 CD 
0ceca     F2 F8 CF F2 
0cece     16 D6 0E CF | 	byte	$c2, $df, $d9, $0e, $e2, $dc, $d6, $cd, $f2, $f8, $cf, $f2, $16, $d6, $0e, $cf
0ced2     CD 00 FF CF 
0ced6     E5 0A 0E DC 
0ceda     FF 31 16 DF 
0cede     2D 0A E5 04 | 	byte	$cd, $00, $ff, $cf, $e5, $0a, $0e, $dc, $ff, $31, $16, $df, $2d, $0a, $e5, $04
0cee2     01 08 00 D9 
0cee6     04 D6 FF 24 
0ceea     FF ED 21 01 
0ceee     F2 C2 F8 E2 | 	byte	$01, $08, $00, $d9, $04, $d6, $ff, $24, $ff, $ed, $21, $01, $f2, $c2, $f8, $e2
0cef2     E5 FF 13 DF 
0cef6     13 24 04 2D 
0cefa     DC FF 08 47 
0cefe     1B 00 FF FC | 	byte	$e5, $ff, $13, $df, $13, $24, $04, $2d, $dc, $ff, $08, $47, $1b, $00, $ff, $fc
0cf02     3F 00 F6 E5 
0cf06     31 00 08 0A 
0cf0a     16 37 00 FF 
0cf0e     F8 F2 2D 00 | 	byte	$3f, $00, $f6, $e5, $31, $00, $08, $0a, $16, $37, $00, $ff, $f8, $f2, $2d, $00
0cf12     FF 16 C1 DF 
0cf16     F8 0A 31 2A 
0cf1a     F6 FF FF 04 
0cf1e     DF E2 13 31 | 	byte	$ff, $16, $c1, $df, $f8, $0a, $31, $2a, $f6, $ff, $ff, $04, $df, $e2, $13, $31
0cf22     F2 47 00 13 
0cf26     13 12 FC E2 
0cf2a     FF 00 CD EE 
0cf2e     2D 00 F2 24 | 	byte	$f2, $47, $00, $13, $13, $12, $fc, $e2, $ff, $00, $cd, $ee, $2d, $00, $f2, $24
0cf32     0E DC F2 F2 
0cf36     1B 2A F6 13 
0cf3a     1E 16 0A D3 
0cf3e     FF 08 13 1E | 	byte	$0e, $dc, $f2, $f2, $1b, $2a, $f6, $13, $1e, $16, $0a, $d3, $ff, $08, $13, $1e
0cf42     B6 FF 08 24 
0cf46     DF 1E DC CD 
0cf4a     16 E5 CF E5 
0cf4e     F2 12 E2 DC | 	byte	$b6, $ff, $08, $24, $df, $1e, $dc, $cd, $16, $e5, $cf, $e5, $f2, $12, $e2, $dc
0cf52     FF 31 0E 04 
0cf56     00 F8 E5 16 
0cf5a     B9 FF 00 CD 
0cf5e     12 0E 00 00 | 	byte	$ff, $31, $0e, $04, $00, $f8, $e5, $16, $b9, $ff, $00, $cd, $12, $0e, $00, $00
0cf62     E2 12 CF DF 
0cf66     D9 FF DF DC 
0cf6a     D6 CD EA ED 
0cf6e     CF E5 04 D6 | 	byte	$e2, $12, $cf, $df, $d9, $ff, $df, $dc, $d6, $cd, $ea, $ed, $cf, $e5, $04, $d6
0cf72     FC CF CD EE 
0cf76     F8 CF E5 F6 
0cf7a     FC CF FF 00 
0cf7e     FC D3 13 00 | 	byte	$fc, $cf, $cd, $ee, $f8, $cf, $e5, $f6, $fc, $cf, $ff, $00, $fc, $d3, $13, $00
0cf82     D9 EE EE F2 
0cf86     EA C9 EE BC 
0cf8a     F2 04 ED D9 
0cf8e     FF ED DC B6 | 	byte	$d9, $ee, $ee, $f2, $ea, $c9, $ee, $bc, $f2, $04, $ed, $d9, $ff, $ed, $dc, $b6
0cf92     E5 CF D9 EE 
0cf96     FF CF FF 04 
0cf9a     EE 0E CF E5 
0cf9e     F2 21 00 00 | 	byte	$e5, $cf, $d9, $ee, $ff, $cf, $ff, $04, $ee, $0e, $cf, $e5, $f2, $21, $00, $00
0cfa2     EE EA 21 EA 
0cfa6     E2 E5 16 F2 
0cfaa     F8 FC 04 1E 
0cfae     E2 F2 ED E2 | 	byte	$ee, $ea, $21, $ea, $e2, $e5, $16, $f2, $f8, $fc, $04, $1e, $e2, $f2, $ed, $e2
0cfb2     1B E2 FF 04 
0cfb6     B9 DC ED FF 
0cfba     1E 13 E5 F2 
0cfbe     E5 00 D3 DC | 	byte	$1b, $e2, $ff, $04, $b9, $dc, $ed, $ff, $1e, $13, $e5, $f2, $e5, $00, $d3, $dc
0cfc2     F2 01 F6 EA 
0cfc6     E5 E5 12 B6 
0cfca     FF EA E5 E5 
0cfce     31 E5 EE F2 | 	byte	$f2, $01, $f6, $ea, $e5, $e5, $12, $b6, $ff, $ea, $e5, $e5, $31, $e5, $ee, $f2
0cfd2     FF 0A ED 0E 
0cfd6     13 00 08 0A 
0cfda     0E 1E 01 13 
0cfde     04 0E 13 21 | 	byte	$ff, $0a, $ed, $0e, $13, $00, $08, $0a, $0e, $1e, $01, $13, $04, $0e, $13, $21
0cfe2     12 0A 00 04 
0cfe6     04 00 E5 EE 
0cfea     D9 27 00 EA 
0cfee     E5 16 08 04 | 	byte	$12, $0a, $00, $04, $04, $00, $e5, $ee, $d9, $27, $00, $ea, $e5, $16, $08, $04
0cff2     DC FF 00 00 
0cff6     F2 01 FF DC 
0cffa     F2 EA B3 D9 
0cffe     FF B6 D9 DC | 	byte	$dc, $ff, $00, $00, $f2, $01, $ff, $dc, $f2, $ea, $b3, $d9, $ff, $b6, $d9, $dc
0d002     F2 FC FF C2 
0d006     E2 D3 D9 EE 
0d00a     F6 A0 D6 D9 
0d00e     DF F2 00 E5 | 	byte	$f2, $fc, $ff, $c2, $e2, $d3, $d9, $ee, $f6, $a0, $d6, $d9, $df, $f2, $00, $e5
0d012     DF D6 E2 ED 
0d016     F8 F6 B3 ED 
0d01a     FC F8 DC CD 
0d01e     D9 F6 FF 00 | 	byte	$df, $d6, $e2, $ed, $f8, $f6, $b3, $ed, $fc, $f8, $dc, $cd, $d9, $f6, $ff, $00
0d022     EA E5 04 D9 
0d026     F6 F2 EE FF 
0d02a     0A E5 1E DC 
0d02e     EE F8 F6 F2 | 	byte	$ea, $e5, $04, $d9, $f6, $f2, $ee, $ff, $0a, $e5, $1e, $dc, $ee, $f8, $f6, $f2
0d032     F2 F8 FC F2 
0d036     FF 04 D6 0A 
0d03a     F8 EA E5 F2 
0d03e     FF DF DF FF | 	byte	$f2, $f8, $fc, $f2, $ff, $04, $d6, $0a, $f8, $ea, $e5, $f2, $ff, $df, $df, $ff
0d042     04 0A D9 DF 
0d046     F8 EA E5 EE 
0d04a     FF F2 EE FF 
0d04e     04 EE DC F6 | 	byte	$04, $0a, $d9, $df, $f8, $ea, $e5, $ee, $ff, $f2, $ee, $ff, $04, $ee, $dc, $f6
0d052     F2 ED ED FC 
0d056     ED 08 13 0A 
0d05a     12 1B 01 EE 
0d05e     FF 0E 0A DF | 	byte	$f2, $ed, $ed, $fc, $ed, $08, $13, $0a, $12, $1b, $01, $ee, $ff, $0e, $0a, $df
0d062     12 F6 F2 FF 
0d066     16 FF FC FF 
0d06a     13 0A FF 13 
0d06e     1B 00 12 12 | 	byte	$12, $f6, $f2, $ff, $16, $ff, $fc, $ff, $13, $0a, $ff, $13, $1b, $00, $12, $12
0d072     12 1E 08 13 
0d076     0A 0E 13 1E 
0d07a     12 0E 00 FF 
0d07e     01 00 EA F8 | 	byte	$12, $1e, $08, $13, $0a, $0e, $13, $1e, $12, $0e, $00, $ff, $01, $00, $ea, $f8
0d082     EA FF 0A 00 
0d086     CD 21 FF 01 
0d08a     00 E5 00 01 
0d08e     EE FF 00 F8 | 	byte	$ea, $ff, $0a, $00, $cd, $21, $ff, $01, $00, $e5, $00, $01, $ee, $ff, $00, $f8
0d092     D6 FF C2 DF 
0d096     E5 00 B3 E2 
0d09a     ED EE F6 EA 
0d09e     CD DF CF F2 | 	byte	$d6, $ff, $c2, $df, $e5, $00, $b3, $e2, $ed, $ee, $f6, $ea, $cd, $df, $cf, $f2
0d0a2     F8 CF CD D3 
0d0a6     DC E5 FF DC 
0d0aa     E5 DC D3 DC 
0d0ae     F6 F8 D6 CD | 	byte	$f8, $cf, $cd, $d3, $dc, $e5, $ff, $dc, $e5, $dc, $d3, $dc, $f6, $f8, $d6, $cd
0d0b2     E5 FC FC CF 
0d0b6     DF E2 F2 FF 
0d0ba     FF CF FF EA 
0d0be     E5 EE EE ED | 	byte	$e5, $fc, $fc, $cf, $df, $e2, $f2, $ff, $ff, $cf, $ff, $ea, $e5, $ee, $ee, $ed
0d0c2     08 EA FF 00 
0d0c6     E5 EA FF F2 
0d0ca     F2 F6 F8 FC 
0d0ce     F8 1B CF FF | 	byte	$08, $ea, $ff, $00, $e5, $ea, $ff, $f2, $f2, $f6, $f8, $fc, $f8, $1b, $cf, $ff
0d0d2     FC F2 D9 F6 
0d0d6     FF EA EA F2 
0d0da     04 12 D9 E5 
0d0de     F8 ED E5 F2 | 	byte	$fc, $f2, $d9, $f6, $ff, $ea, $ea, $f2, $04, $12, $d9, $e5, $f8, $ed, $e5, $f2
0d0e2     FF F6 F2 FF 
0d0e6     00 F2 E2 F6 
0d0ea     F6 ED F8 F6 
0d0ee     F8 0A 1E 01 | 	byte	$ff, $f6, $f2, $ff, $00, $f2, $e2, $f6, $f6, $ed, $f8, $f6, $f8, $0a, $1e, $01
0d0f2     13 04 00 EE 
0d0f6     F8 1B DC FF 
0d0fa     00 F8 F2 2D 
0d0fe     F6 00 FC FF | 	byte	$13, $04, $00, $ee, $f8, $1b, $dc, $ff, $00, $f8, $f2, $2d, $f6, $00, $fc, $ff
0d102     16 F6 0E 0E 
0d106     0A 01 12 0A 
0d10a     13 00 FF 00 
0d10e     08 16 00 0A | 	byte	$16, $f6, $0e, $0e, $0a, $01, $12, $0a, $13, $00, $ff, $00, $08, $16, $00, $0a
0d112     E2 13 FF E2 
0d116     FF 00 F2 F2 
0d11a     F2 08 E2 EE 
0d11e     12 EE DC F6 | 	byte	$e2, $13, $ff, $e2, $ff, $00, $f2, $f2, $f2, $08, $e2, $ee, $12, $ee, $dc, $f6
0d122     0A F2 EE F6 
0d126     F2 0E EE FF 
0d12a     EE DC EA EA 
0d12e     E2 FF 01 EE | 	byte	$0a, $f2, $ee, $f6, $f2, $0e, $ee, $ff, $ee, $dc, $ea, $ea, $e2, $ff, $01, $ee
0d132     EA ED F6 00 
0d136     FF 00 E2 04 
0d13a     DF E2 F8 00 
0d13e     F8 EA DF 0E | 	byte	$ea, $ed, $f6, $00, $ff, $00, $e2, $04, $df, $e2, $f8, $00, $f8, $ea, $df, $0e
0d142     EE EE C9 F8 
0d146     F6 ED E2 F2 
0d14a     00 F8 01 E5 
0d14e     01 DC 04 00 | 	byte	$ee, $ee, $c9, $f8, $f6, $ed, $e2, $f2, $00, $f8, $01, $e5, $01, $dc, $04, $00
0d152     FF DC E5 F2 
0d156     FC ED F2 F2 
0d15a     08 EE D6 F2 
0d15e     08 00 F2 00 | 	byte	$ff, $dc, $e5, $f2, $fc, $ed, $f2, $f2, $08, $ee, $d6, $f2, $08, $00, $f2, $00
0d162     F8 D9 ED EA 
0d166     F2 00 F2 FC 
0d16a     F2 FC D9 FC 
0d16e     EE EE EE EE | 	byte	$f8, $d9, $ed, $ea, $f2, $00, $f2, $fc, $f2, $fc, $d9, $fc, $ee, $ee, $ee, $ee
0d172     F8 0A FF 0A 
0d176     E5 1B ED FF 
0d17a     ED ED EE F6 
0d17e     ED F8 E5 04 | 	byte	$f8, $0a, $ff, $0a, $e5, $1b, $ed, $ff, $ed, $ed, $ee, $f6, $ed, $f8, $e5, $04
0d182     E2 EE F8 ED 
0d186     FF 00 EA E5 
0d18a     FF ED E5 12 
0d18e     E2 F2 FF EA | 	byte	$e2, $ee, $f8, $ed, $ff, $00, $ea, $e5, $ff, $ed, $e5, $12, $e2, $f2, $ff, $ea
0d192     F8 0A F6 CF 
0d196     EA F8 DF 04 
0d19a     E2 EA FF EE 
0d19e     DC EE F6 ED | 	byte	$f8, $0a, $f6, $cf, $ea, $f8, $df, $04, $e2, $ea, $ff, $ee, $dc, $ee, $f6, $ed
0d1a2     EE F6 ED 04 
0d1a6     DC FF EE FF 
0d1aa     F6 EE EE DF 
0d1ae     EE EE ED FF | 	byte	$ee, $f6, $ed, $04, $dc, $ff, $ee, $ff, $f6, $ee, $ee, $df, $ee, $ee, $ed, $ff
0d1b2     0A F6 FF EE 
0d1b6     FF 00 F2 0A 
0d1ba     12 04 F6 08 
0d1be     FC E5 FC F6 | 	byte	$0a, $f6, $ff, $ee, $ff, $00, $f2, $0a, $12, $04, $f6, $08, $fc, $e5, $fc, $f6
0d1c2     F6 F8 F8 F2 
0d1c6     00 FF 13 FC 
0d1ca     F2 1E FC FF 
0d1ce     EA FF F6 EA | 	byte	$f6, $f8, $f8, $f2, $00, $ff, $13, $fc, $f2, $1e, $fc, $ff, $ea, $ff, $f6, $ea
0d1d2     F2 0A E5 EE 
0d1d6     EE 01 EA 00 
0d1da     0E 00 E2 FC 
0d1de     12 F2 F6 FC | 	byte	$f2, $0a, $e5, $ee, $ee, $01, $ea, $00, $0e, $00, $e2, $fc, $12, $f2, $f6, $fc
0d1e2     F8 0E F6 FF 
0d1e6     00 EA F2 F6 
0d1ea     ED FF 04 F6 
0d1ee     EE F6 FC 00 | 	byte	$f8, $0e, $f6, $ff, $00, $ea, $f2, $f6, $ed, $ff, $04, $f6, $ee, $f6, $fc, $00
0d1f2     01 01 ED 0A 
0d1f6     EA ED F8 00 
0d1fa     FF EE E5 0E 
0d1fe     F2 F6 D3 FF | 	byte	$01, $01, $ed, $0a, $ea, $ed, $f8, $00, $ff, $ee, $e5, $0e, $f2, $f6, $d3, $ff
0d202     00 F6 E5 F6 
0d206     04 F8 01 ED 
0d20a     01 EA FF 0A 
0d20e     FF EA E5 F2 | 	byte	$00, $f6, $e5, $f6, $04, $f8, $01, $ed, $01, $ea, $ff, $0a, $ff, $ea, $e5, $f2
0d212     FF ED F2 F2 
0d216     FF 00 E2 EE 
0d21a     04 04 F6 FF 
0d21e     FC E2 F2 ED | 	byte	$ff, $ed, $f2, $f2, $ff, $00, $e2, $ee, $04, $04, $f6, $ff, $fc, $e2, $f2, $ed
0d222     F2 00 E5 F8 
0d226     F2 00 DC FC 
0d22a     00 F6 F2 F2 
0d22e     F2 0E FF 08 | 	byte	$f2, $00, $e5, $f8, $f2, $00, $dc, $fc, $00, $f6, $f2, $f2, $f2, $0e, $ff, $08
0d232     EA FF EE F2 
0d236     00 EE F6 FC 
0d23a     ED FC EA FF 
0d23e     F6 F8 F2 F2 | 	byte	$ea, $ff, $ee, $f2, $00, $ee, $f6, $fc, $ed, $fc, $ea, $ff, $f6, $f8, $f2, $f2
0d242     F2 04 F6 D9 
0d246     FC F6 EE FF 
0d24a     00 E5 FC 0A 
0d24e     E5 01 00 EA | 	byte	$f2, $04, $f6, $d9, $fc, $f6, $ee, $ff, $00, $e5, $fc, $0a, $e5, $01, $00, $ea
0d252     E5 ED EE E5 
0d256     01 E5 DC F8 
0d25a     ED DC F2 EE 
0d25e     EA EE F8 0A | 	byte	$e5, $ed, $ee, $e5, $01, $e5, $dc, $f8, $ed, $dc, $f2, $ee, $ea, $ee, $f8, $0a
0d262     F2 ED ED FC 
0d266     EA F6 F2 FF 
0d26a     DC FF 0A EA 
0d26e     FC FF 01 F6 | 	byte	$f2, $ed, $ed, $fc, $ea, $f6, $f2, $ff, $dc, $ff, $0a, $ea, $fc, $ff, $01, $f6
0d272     EA FC 00 FF 
0d276     0A FF EE F8 
0d27a     00 ED F2 00 
0d27e     FC F2 01 12 | 	byte	$ea, $fc, $00, $ff, $0a, $ff, $ee, $f8, $00, $ed, $f2, $00, $fc, $f2, $01, $12
0d282     FF 04 ED F6 
0d286     FF E5 F8 F6 
0d28a     F8 12 F2 13 
0d28e     F8 FF EE FF | 	byte	$ff, $04, $ed, $f6, $ff, $e5, $f8, $f6, $f8, $12, $f2, $13, $f8, $ff, $ee, $ff
0d292     F2 DC FC 00 
0d296     FF 0A FC E5 
0d29a     00 F6 EE F2 
0d29e     00 04 FC F6 | 	byte	$f2, $dc, $fc, $00, $ff, $0a, $fc, $e5, $00, $f6, $ee, $f2, $00, $04, $fc, $f6
0d2a2     E2 F8 EE EA 
0d2a6     0A DF 12 F2 
0d2aa     ED ED F2 E5 
0d2ae     E2 EE 00 EE | 	byte	$e2, $f8, $ee, $ea, $0a, $df, $12, $f2, $ed, $ed, $f2, $e5, $e2, $ee, $00, $ee
0d2b2     EA F8 04 F2 
0d2b6     FC F6 E5 01 
0d2ba     EE F8 ED F2 
0d2be     F2 FC EA F2 | 	byte	$ea, $f8, $04, $f2, $fc, $f6, $e5, $01, $ee, $f8, $ed, $f2, $f2, $fc, $ea, $f2
0d2c2     EE FF F8 F6 
0d2c6     FC FF EE E5 
0d2ca     EE F6 F2 FC 
0d2ce     E5 00 ED ED | 	byte	$ee, $ff, $f8, $f6, $fc, $ff, $ee, $e5, $ee, $f6, $f2, $fc, $e5, $00, $ed, $ed
0d2d2     EA E2 F6 F8 
0d2d6     01 EA F2 F2 
0d2da     00 F6 F6 F6 
0d2de     ED EE EE F6 | 	byte	$ea, $e2, $f6, $f8, $01, $ea, $f2, $f2, $00, $f6, $f6, $f6, $ed, $ee, $ee, $f6
0d2e2     ED FC FC F8 
0d2e6     04 F8 FC E5 
0d2ea     ED FF ED EA 
0d2ee     EE F8 F8 00 | 	byte	$ed, $fc, $fc, $f8, $04, $f8, $fc, $e5, $ed, $ff, $ed, $ea, $ee, $f8, $f8, $00
0d2f2     F6 E5 F6 00 
0d2f6     ED EE 00 F6 
0d2fa     E5 FF 00 EA 
0d2fe     F2 F8 DC F8 | 	byte	$f6, $e5, $f6, $00, $ed, $ee, $00, $f6, $e5, $ff, $00, $ea, $f2, $f8, $dc, $f8
0d302     00 F6 E5 F2 
0d306     FC EE FF 00 
0d30a     00 F2 E5 EE 
0d30e     00 F2 FF 00 | 	byte	$00, $f6, $e5, $f2, $fc, $ee, $ff, $00, $00, $f2, $e5, $ee, $00, $f2, $ff, $00
0d312     F8 00 FC F2 
0d316     F2 F8 EE F6 
0d31a     F2 F8 E5 FF 
0d31e     00 EA FC FF | 	byte	$f8, $00, $fc, $f2, $f2, $f8, $ee, $f6, $f2, $f8, $e5, $ff, $00, $ea, $fc, $ff
0d322     00 EE ED FF 
0d326     ED FF 01 FF 
0d32a     EA FF FC F2 
0d32e     FC F8 F6 F2 | 	byte	$00, $ee, $ed, $ff, $ed, $ff, $01, $ff, $ea, $ff, $fc, $f2, $fc, $f8, $f6, $f2
0d332     FF 01 FF 00 
0d336     ED F2 FC EA 
0d33a     F6 F2 F8 04 
0d33e     F2 0E F8 FF | 	byte	$ff, $01, $ff, $00, $ed, $f2, $fc, $ea, $f6, $f2, $f8, $04, $f2, $0e, $f8, $ff
0d342     ED FF F2 D6 
0d346     FF F6 FF 04 
0d34a     F6 FF F6 EA 
0d34e     F2 FF F8 00 | 	byte	$ed, $ff, $f2, $d6, $ff, $f6, $ff, $04, $f6, $ff, $f6, $ea, $f2, $ff, $f8, $00
0d352     FC EE F2 F2 
0d356     EE F2 00 EE 
0d35a     04 F8 F2 EA 
0d35e     F2 E5 ED FF | 	byte	$fc, $ee, $f2, $f2, $ee, $f2, $00, $ee, $04, $f8, $f2, $ea, $f2, $e5, $ed, $ff
0d362     F8 EE F2 FF 
0d366     ED FC FC EE 
0d36a     FF F2 F2 EE 
0d36e     EE F2 FC F2 | 	byte	$f8, $ee, $f2, $ff, $ed, $fc, $fc, $ee, $ff, $f2, $f2, $ee, $ee, $f2, $fc, $f2
0d372     F2 F2 FC 00 
0d376     00 FC FF F8 
0d37a     E2 F6 FC F2 
0d37e     FC E5 FF EE | 	byte	$f2, $f2, $fc, $00, $00, $fc, $ff, $f8, $e2, $f6, $fc, $f2, $fc, $e5, $ff, $ee
0d382     EE ED EA F8 
0d386     FC 01 EE F2 
0d38a     F2 00 F6 F8 
0d38e     F6 ED F2 F6 | 	byte	$ee, $ed, $ea, $f8, $fc, $01, $ee, $f2, $f2, $00, $f6, $f8, $f6, $ed, $f2, $f6
0d392     F6 F2 FC FF 
0d396     FF 04 FC F8 
0d39a     EA ED 01 ED 
0d39e     EE F8 FC FF | 	byte	$f6, $f2, $fc, $ff, $ff, $04, $fc, $f8, $ea, $ed, $01, $ed, $ee, $f8, $fc, $ff
0d3a2     F8 EE FC F2 
0d3a6     F8 00 F2 04 
0d3aa     FC F8 00 EA 
0d3ae     F8 0A FC F6 | 	byte	$f8, $ee, $fc, $f2, $f8, $00, $f2, $04, $fc, $f8, $00, $ea, $f8, $0a, $fc, $f6
0d3b2     F6 ED FC 00 
0d3b6     F8 EA F8 F6 
0d3ba     EE F2 F2 F6 
0d3be     ED E5 ED F2 | 	byte	$f6, $ed, $fc, $00, $f8, $ea, $f8, $f6, $ee, $f2, $f2, $f6, $ed, $e5, $ed, $f2
0d3c2     F2 FF ED E5 
0d3c6     F2 F6 F6 F6 
0d3ca     F8 F6 FC F6 
0d3ce     FF F6 FF DC | 	byte	$f2, $ff, $ed, $e5, $f2, $f6, $f6, $f6, $f8, $f6, $fc, $f6, $ff, $f6, $ff, $dc
0d3d2     FC EE F2 FF 
0d3d6     EE FC ED F2 
0d3da     F8 F6 F6 F2 
0d3de     FF 00 EE ED | 	byte	$fc, $ee, $f2, $ff, $ee, $fc, $ed, $f2, $f8, $f6, $f6, $f2, $ff, $00, $ee, $ed
0d3e2     F8 01 FF E5 
0d3e6     F2 F6 08 F8 
0d3ea     00 FC EE 04 
0d3ee     FF 08 F6 F8 | 	byte	$f8, $01, $ff, $e5, $f2, $f6, $08, $f8, $00, $fc, $ee, $04, $ff, $08, $f6, $f8
0d3f2     FF 00 F8 F8 
0d3f6     00 F6 F2 FC 
0d3fa     08 FF F6 F8 
0d3fe     00 F6 FC F6 | 	byte	$ff, $00, $f8, $f8, $00, $f6, $f2, $fc, $08, $ff, $f6, $f8, $00, $f6, $fc, $f6
0d402     FC FC F8 F6 
0d406     FF F2 EA EE 
0d40a     F2 F6 E5 F2 
0d40e     F6 F2 00 E5 | 	byte	$fc, $fc, $f8, $f6, $ff, $f2, $ea, $ee, $f2, $f6, $e5, $f2, $f6, $f2, $00, $e5
0d412     F2 FC E5 F2 
0d416     F6 F6 FC F2 
0d41a     F2 F2 EE F8 
0d41e     ED ED EE F2 | 	byte	$f2, $fc, $e5, $f2, $f6, $f6, $fc, $f2, $f2, $f2, $ee, $f8, $ed, $ed, $ee, $f2
0d422     F6 FF E2 FF 
0d426     F6 DF F6 FC 
0d42a     EA FC EE F2 
0d42e     FF F8 ED F8 | 	byte	$f6, $ff, $e2, $ff, $f6, $df, $f6, $fc, $ea, $fc, $ee, $f2, $ff, $f8, $ed, $f8
0d432     F6 ED F8 00 
0d436     EE F6 F8 F8 
0d43a     FC F8 F8 F6 
0d43e     F2 FC F8 F6 | 	byte	$f6, $ed, $f8, $00, $ee, $f6, $f8, $f8, $fc, $f8, $f8, $f6, $f2, $fc, $f8, $f6
0d442     F8 FF E2 FF 
0d446     DF FF EE 01 
0d44a     00 FC F2 F8 
0d44e     00 FC 01 FC | 	byte	$f8, $ff, $e2, $ff, $df, $ff, $ee, $01, $00, $fc, $f2, $f8, $00, $fc, $01, $fc
0d452     FC F6 ED FC 
0d456     04 FC F8 F6 
0d45a     F2 F8 F6 F6 
0d45e     EA FF EA F8 | 	byte	$fc, $f6, $ed, $fc, $04, $fc, $f8, $f6, $f2, $f8, $f6, $f6, $ea, $ff, $ea, $f8
0d462     F6 F6 F6 ED 
0d466     EE EE F2 F8 
0d46a     FC EA EE F6 
0d46e     F6 F2 F6 F6 | 	byte	$f6, $f6, $f6, $ed, $ee, $ee, $f2, $f8, $fc, $ea, $ee, $f6, $f6, $f2, $f6, $f6
0d472     EE FC F6 FC 
0d476     F2 F6 ED F6 
0d47a     ED F2 FC F2 
0d47e     F6 F2 F6 F8 | 	byte	$ee, $fc, $f6, $fc, $f2, $f6, $ed, $f6, $ed, $f2, $fc, $f2, $f6, $f2, $f6, $f8
0d482     F6 F2 F8 00 
0d486     F6 EA F2 FF 
0d48a     F8 EE F8 F2 
0d48e     FF 00 FF FF | 	byte	$f6, $f2, $f8, $00, $f6, $ea, $f2, $ff, $f8, $ee, $f8, $f2, $ff, $00, $ff, $ff
0d492     F6 FF F8 FF 
0d496     F6 ED FC 04 
0d49a     F8 F6 FF F2 
0d49e     F6 F8 08 FC | 	byte	$f6, $ff, $f8, $ff, $f6, $ed, $fc, $04, $f8, $f6, $ff, $f2, $f6, $f8, $08, $fc
0d4a2     FC F2 00 00 
0d4a6     F6 01 F8 FC 
0d4aa     FC F6 F2 00 
0d4ae     EE EE EE F2 | 	byte	$fc, $f2, $00, $00, $f6, $01, $f8, $fc, $fc, $f6, $f2, $00, $ee, $ee, $ee, $f2
0d4b2     F6 EE F6 F2 
0d4b6     FC F6 E5 F8 
0d4ba     F6 F2 F8 F6 
0d4be     FC FC F2 F6 | 	byte	$f6, $ee, $f6, $f2, $fc, $f6, $e5, $f8, $f6, $f2, $f8, $f6, $fc, $fc, $f2, $f6
0d4c2     F8 EE FC EE 
0d4c6     F2 EE F6 F8 
0d4ca     00 EA FF F8 
0d4ce     EA F8 FF ED | 	byte	$f8, $ee, $fc, $ee, $f2, $ee, $f6, $f8, $00, $ea, $ff, $f8, $ea, $f8, $ff, $ed
0d4d2     FF F2 F2 FF 
0d4d6     F8 EE FC FC 
0d4da     E5 F8 00 ED 
0d4de     FC F2 00 FF | 	byte	$ff, $f2, $f2, $ff, $f8, $ee, $fc, $fc, $e5, $f8, $00, $ed, $fc, $f2, $00, $ff
0d4e2     F8 F8 F8 F6 
0d4e6     FC 00 F8 F2 
0d4ea     FF 00 FC F6 
0d4ee     FC FC F6 EE | 	byte	$f8, $f8, $f8, $f6, $fc, $00, $f8, $f2, $ff, $00, $fc, $f6, $fc, $fc, $f6, $ee
0d4f2     00 F8 FF FF 
0d4f6     FC F8 F8 F8 
0d4fa     EE FF F6 EA 
0d4fe     F6 00 ED F6 | 	byte	$00, $f8, $ff, $ff, $fc, $f8, $f8, $f8, $ee, $ff, $f6, $ea, $f6, $00, $ed, $f6
0d502     F6 FC 00 F8 
0d506     FF F6 F8 F6 
0d50a     EE FF FC 00 
0d50e     FC EE F2 EE | 	byte	$f6, $fc, $00, $f8, $ff, $f6, $f8, $f6, $ee, $ff, $fc, $00, $fc, $ee, $f2, $ee
0d512     F6 EA FF F8 
0d516     FC F8 FF 00 
0d51a     F8 F8 EE FF 
0d51e     FC EE F2 F8 | 	byte	$f6, $ea, $ff, $f8, $fc, $f8, $ff, $00, $f8, $f8, $ee, $ff, $fc, $ee, $f2, $f8
0d522     00 ED F2 F2 
0d526     F8 FC EE ED 
0d52a     F8 DF 00 ED 
0d52e     FF F6 EE 00 | 	byte	$00, $ed, $f2, $f2, $f8, $fc, $ee, $ed, $f8, $df, $00, $ed, $ff, $f6, $ee, $00
0d532     F8 F6 EE EE 
0d536     FF F2 EE F8 
0d53a     ED F6 04 F2 
0d53e     F2 F8 F6 EE | 	byte	$f8, $f6, $ee, $ee, $ff, $f2, $ee, $f8, $ed, $f6, $04, $f2, $f2, $f8, $f6, $ee
0d542     F2 F6 F8 F8 
0d546     F2 ED F6 F2 
0d54a     F6 F6 FC F2 
0d54e     F6 EE F6 F6 | 	byte	$f2, $f6, $f8, $f8, $f2, $ed, $f6, $f2, $f6, $f6, $fc, $f2, $f6, $ee, $f6, $f6
0d552     EE F8 ED F8 
0d556     FC FC F2 F6 
0d55a     FF EE FC EE 
0d55e     F8 F6 F2 F8 | 	byte	$ee, $f8, $ed, $f8, $fc, $fc, $f2, $f6, $ff, $ee, $fc, $ee, $f8, $f6, $f2, $f8
0d562     EE FF F6 F6 
0d566     EE 00 F2 FC 
0d56a     F6 FC ED F6 
0d56e     F8 F6 F2 FF | 	byte	$ee, $ff, $f6, $f6, $ee, $00, $f2, $fc, $f6, $fc, $ed, $f6, $f8, $f6, $f2, $ff
0d572     FC F2 FF F8 
0d576     F6 F8 F8 EE 
0d57a     FF 00 F6 ED 
0d57e     FC F6 F8 F2 | 	byte	$fc, $f2, $ff, $f8, $f6, $f8, $f8, $ee, $ff, $00, $f6, $ed, $fc, $f6, $f8, $f2
0d582     ED F6 F6 F8 
0d586     F2 FC F8 F8 
0d58a     F8 F2 F6 F8 
0d58e     F8 EE FF F8 | 	byte	$ed, $f6, $f6, $f8, $f2, $fc, $f8, $f8, $f8, $f2, $f6, $f8, $f8, $ee, $ff, $f8
0d592     FF FC FC FC 
0d596     F8 F8 F6 F8 
0d59a     F6 F6 F6 FF 
0d59e     EE F6 F6 F8 | 	byte	$ff, $fc, $fc, $fc, $f8, $f8, $f6, $f8, $f6, $f6, $f6, $ff, $ee, $f6, $f6, $f8
0d5a2     00 F8 F8 FC 
0d5a6     F6 F8 F2 FC 
0d5aa     FF FF FC F6 
0d5ae     EE EE F8 F8 | 	byte	$00, $f8, $f8, $fc, $f6, $f8, $f2, $fc, $ff, $ff, $fc, $f6, $ee, $ee, $f8, $f8
0d5b2     F8 00 F8 F8 
0d5b6     F8 00 FC F6 
0d5ba     FC EE 00 F6 
0d5be     EE F6 FF EE | 	byte	$f8, $00, $f8, $f8, $f8, $00, $fc, $f6, $fc, $ee, $00, $f6, $ee, $f6, $ff, $ee
0d5c2     F2 F6 FC F8 
0d5c6     F6 EA F8 F6 
0d5ca     F8 F6 F8 FC 
0d5ce     F2 FF F2 F8 | 	byte	$f2, $f6, $fc, $f8, $f6, $ea, $f8, $f6, $f8, $f6, $f8, $fc, $f2, $ff, $f2, $f8
0d5d2     ED F6 F8 F8 
0d5d6     F6 F8 F6 F6 
0d5da     FF F2 EE F8 
0d5de     F8 F2 F2 FC | 	byte	$ed, $f6, $f8, $f8, $f6, $f8, $f6, $f6, $ff, $f2, $ee, $f8, $f8, $f2, $f2, $fc
0d5e2     F2 FC F2 ED 
0d5e6     F8 F2 F8 F6 
0d5ea     FC F2 F6 F2 
0d5ee     F8 F6 ED FC | 	byte	$f2, $fc, $f2, $ed, $f8, $f2, $f8, $f6, $fc, $f2, $f6, $f2, $f8, $f6, $ed, $fc
0d5f2     ED F8 FC FC 
0d5f6     F2 F8 FC F2 
0d5fa     F6 ED FF ED 
0d5fe     F8 FC F2 01 | 	byte	$ed, $f8, $fc, $fc, $f2, $f8, $fc, $f2, $f6, $ed, $ff, $ed, $f8, $fc, $f2, $01
0d602     FC F6 F2 F6 
0d606     F8 F6 F8 F6 
0d60a     F2 F6 F8 F6 
0d60e     F6 FF F8 F2 | 	byte	$fc, $f6, $f2, $f6, $f8, $f6, $f8, $f6, $f2, $f6, $f8, $f6, $f6, $ff, $f8, $f2
0d612     FC FC F8 FF 
0d616     F6 F2 FF 00 
0d61a     F6 EE FC F8 
0d61e     F8 F6 F2 F6 | 	byte	$fc, $fc, $f8, $ff, $f6, $f2, $ff, $00, $f6, $ee, $fc, $f8, $f8, $f6, $f2, $f6
0d622     F6 F8 F2 FC 
0d626     F8 F8 F8 F2 
0d62a     F8 F8 F8 F2 
0d62e     FF F8 FC FC | 	byte	$f6, $f8, $f2, $fc, $f8, $f8, $f8, $f2, $f8, $f8, $f8, $f2, $ff, $f8, $fc, $fc
0d632     F8 FC F8 F8 
0d636     F6 F6 F6 F6 
0d63a     F2 F2 F2 FF 
0d63e     F2 F6 FF F6 | 	byte	$f8, $fc, $f8, $f8, $f6, $f6, $f6, $f6, $f2, $f2, $f2, $ff, $f2, $f6, $ff, $f6
0d642     EE 00 FC F6 
0d646     FC F2 F2 FC 
0d64a     F2 FC FC F2 
0d64e     F8 FC EE F6 | 	byte	$ee, $00, $fc, $f6, $fc, $f2, $f2, $fc, $f2, $fc, $fc, $f2, $f8, $fc, $ee, $f6
0d652     FF F6 F8 F2 
0d656     FF EE ED FC 
0d65a     00 F2 FC F8 
0d65e     F2 EE FC F6 | 	byte	$ff, $f6, $f8, $f2, $ff, $ee, $ed, $fc, $00, $f2, $fc, $f8, $f2, $ee, $fc, $f6
0d662     F2 F6 EE F6 
0d666     F8 F6 FC F6 
0d66a     F8 ED F6 F8 
0d66e     F8 EE FF ED | 	byte	$f2, $f6, $ee, $f6, $f8, $f6, $fc, $f6, $f8, $ed, $f6, $f8, $f8, $ee, $ff, $ed
0d672     FC F8 FF F2 
0d676     F2 FF F6 EE 
0d67a     F6 FF F6 EE 
0d67e     F8 00 F2 FC | 	byte	$fc, $f8, $ff, $f2, $f2, $ff, $f6, $ee, $f6, $ff, $f6, $ee, $f8, $00, $f2, $fc
0d682     F6 FC FC F2 
0d686     F2 F8 F6 F6 
0d68a     F8 FC F2 F6 
0d68e     EE F6 F2 F8 | 	byte	$f6, $fc, $fc, $f2, $f2, $f8, $f6, $f6, $f8, $fc, $f2, $f6, $ee, $f6, $f2, $f8
0d692     F8 F6 F8 F8 
0d696     F8 F2 F8 F8 
0d69a     F2 F2 F2 F2 
0d69e     EE F6 F6 F6 | 	byte	$f8, $f6, $f8, $f8, $f8, $f2, $f8, $f8, $f2, $f2, $f2, $f2, $ee, $f6, $f6, $f6
0d6a2     F2 F8 F2 F6 
0d6a6     F6 F6 F8 FC 
0d6aa     EE F8 F8 F6 
0d6ae     FC F6 ED F6 | 	byte	$f2, $f8, $f2, $f6, $f6, $f6, $f8, $fc, $ee, $f8, $f8, $f6, $fc, $f6, $ed, $f6
0d6b2     00 F6 FC F6 
0d6b6     FF F6 F6 F8 
0d6ba     F6 F2 FF F8 
0d6be     F6 F2 FC EE | 	byte	$00, $f6, $fc, $f6, $ff, $f6, $f6, $f8, $f6, $f2, $ff, $f8, $f6, $f2, $fc, $ee
0d6c2     F6 F2 F2 FC 
0d6c6     F8 F6 EE FF 
0d6ca     FF FC F8 F6 
0d6ce     F2 FC F6 F6 | 	byte	$f6, $f2, $f2, $fc, $f8, $f6, $ee, $ff, $ff, $fc, $f8, $f6, $f2, $fc, $f6, $f6
0d6d2     F8 EE FF F2 
0d6d6     F8 FC F2 F6 
0d6da     F6 F6 EE FF 
0d6de     EE F6 F6 F2 | 	byte	$f8, $ee, $ff, $f2, $f8, $fc, $f2, $f6, $f6, $f6, $ee, $ff, $ee, $f6, $f6, $f2
0d6e2     FC EE F2 F8 
0d6e6     F6 ED F6 F6 
0d6ea     EE FF EE FC 
0d6ee     ED F2 FC F2 | 	byte	$fc, $ee, $f2, $f8, $f6, $ed, $f6, $f6, $ee, $ff, $ee, $fc, $ed, $f2, $fc, $f2
0d6f2     F2 F8 EE F2 
0d6f6     F2 FF EE F8 
0d6fa     EA F2 F2 F6 
0d6fe     F8 F6 F8 EE | 	byte	$f2, $f8, $ee, $f2, $f2, $ff, $ee, $f8, $ea, $f2, $f2, $f6, $f8, $f6, $f8, $ee
0d702     EE F2 F6 F6 
0d706     EE F8 F2 F6 
0d70a     F8 F8 EE F8 
0d70e     FC F6 F2 F6 | 	byte	$ee, $f2, $f6, $f6, $ee, $f8, $f2, $f6, $f8, $f8, $ee, $f8, $fc, $f6, $f2, $f6
0d712     FF F6 F2 F8 
0d716     00 F6 FC F6 
0d71a     FC F8 F6 F8 
0d71e     F8 F8 F8 F8 | 	byte	$ff, $f6, $f2, $f8, $00, $f6, $fc, $f6, $fc, $f8, $f6, $f8, $f8, $f8, $f8, $f8
0d722     FC F6 F8 F2 
0d726     F8 F2 F8 FC 
0d72a     F6 F8 F8 FC 
0d72e     F6 F8 F8 F6 | 	byte	$fc, $f6, $f8, $f2, $f8, $f2, $f8, $fc, $f6, $f8, $f8, $fc, $f6, $f8, $f8, $f6
0d732     F6 F6 F6 F2 
0d736     F6 F8 F6 F6 
0d73a     F8 F6 F8 F6 
0d73e     FC F8 FC F6 | 	byte	$f6, $f6, $f6, $f2, $f6, $f8, $f6, $f6, $f8, $f6, $f8, $f6, $fc, $f8, $fc, $f6
0d742     F8 F8 FF F2 
0d746     FC F6 F8 FF 
0d74a     F8 F2 FC F6 
0d74e     FC F6 F6 F8 | 	byte	$f8, $f8, $ff, $f2, $fc, $f6, $f8, $ff, $f8, $f2, $fc, $f6, $fc, $f6, $f6, $f8
0d752     F2 FF F8 FC 
0d756     F6 FC F2 FC 
0d75a     F2 F8 F8 FC 
0d75e     FC F6 FC FC | 	byte	$f2, $ff, $f8, $fc, $f6, $fc, $f2, $fc, $f2, $f8, $f8, $fc, $fc, $f6, $fc, $fc
0d762     FC F8 F8 F2 
0d766     F8 FC F8 FF 
0d76a     EE FF F6 F6 
0d76e     FF F8 F2 FC | 	byte	$fc, $f8, $f8, $f2, $f8, $fc, $f8, $ff, $ee, $ff, $f6, $f6, $ff, $f8, $f2, $fc
0d772     FC F6 FC F2 
0d776     F6 F8 F2 F8 
0d77a     F6 F6 FC F8 
0d77e     F8 EE FF F2 | 	byte	$fc, $f6, $fc, $f2, $f6, $f8, $f2, $f8, $f6, $f6, $fc, $f8, $f8, $ee, $ff, $f2
0d782     F6 F2 F6 FC 
0d786     F2 F2 F6 F6 
0d78a     F8 F6 FC F6 
0d78e     F6 F6 EE F8 | 	byte	$f6, $f2, $f6, $fc, $f2, $f2, $f6, $f6, $f8, $f6, $fc, $f6, $f6, $f6, $ee, $f8
0d792     F6 F2 F8 F2 
0d796     F8 F2 F2 F2 
0d79a     F6 F6 F2 F6 
0d79e     EE FC F2 F2 | 	byte	$f6, $f2, $f8, $f2, $f8, $f2, $f2, $f2, $f6, $f6, $f2, $f6, $ee, $fc, $f2, $f2
0d7a2     F8 EE F8 F8 
0d7a6     F2 F2 EE FC 
0d7aa     EE FC F6 F2 
0d7ae     F8 F8 F6 F2 | 	byte	$f8, $ee, $f8, $f8, $f2, $f2, $ee, $fc, $ee, $fc, $f6, $f2, $f8, $f8, $f6, $f2
0d7b2     F2 F6 F6 FC 
0d7b6     F8 F6 F8 FF 
0d7ba     F6 F2 F8 F6 
0d7be     F6 FC F2 FC | 	byte	$f2, $f6, $f6, $fc, $f8, $f6, $f8, $ff, $f6, $f2, $f8, $f6, $f6, $fc, $f2, $fc
0d7c2     F2 F8 F6 F8 
0d7c6     F6 F6 F2 F8 
0d7ca     F6 F8 F6 F6 
0d7ce     F8 F2 F2 F8 | 	byte	$f2, $f8, $f6, $f8, $f6, $f6, $f2, $f8, $f6, $f8, $f6, $f6, $f8, $f2, $f2, $f8
0d7d2     F2 F6 F2 F8 
0d7d6     EE F6 F8 F6 
0d7da     F6 F2 F8 F8 
0d7de     EE F8 F6 FC | 	byte	$f2, $f6, $f2, $f8, $ee, $f6, $f8, $f6, $f6, $f2, $f8, $f8, $ee, $f8, $f6, $fc
0d7e2     F2 F8 F6 EE 
0d7e6     FC F2 FC EE 
0d7ea     F8 F6 F2 F6 
0d7ee     F8 F8 F6 EE | 	byte	$f2, $f8, $f6, $ee, $fc, $f2, $fc, $ee, $f8, $f6, $f2, $f6, $f8, $f8, $f6, $ee
0d7f2     FC FC FC F8 
0d7f6     F8 F2 F8 F8 
0d7fa     F8 F6 F2 F6 
0d7fe     FC F8 F8 F8 | 	byte	$fc, $fc, $fc, $f8, $f8, $f2, $f8, $f8, $f8, $f6, $f2, $f6, $fc, $f8, $f8, $f8
0d802     F6 F2 FC F8 
0d806     F8 EE F8 F6 
0d80a     FC F2 F8 F2 
0d80e     FF F2 F8 F8 | 	byte	$f6, $f2, $fc, $f8, $f8, $ee, $f8, $f6, $fc, $f2, $f8, $f2, $ff, $f2, $f8, $f8
0d812     F6 F8 F2 F8 
0d816     F8 F6 F6 F6 
0d81a     F2 FC F6 F2 
0d81e     F2 F2 F6 F8 | 	byte	$f6, $f8, $f2, $f8, $f8, $f6, $f6, $f6, $f2, $fc, $f6, $f2, $f2, $f2, $f6, $f8
0d822     F6 F8 F8 F8 
0d826     F6 F8 F8 F6 
0d82a     F6 F6 F6 F6 
0d82e     EE F8 F6 EE | 	byte	$f6, $f8, $f8, $f8, $f6, $f8, $f8, $f6, $f6, $f6, $f6, $f6, $ee, $f8, $f6, $ee
0d832     F8 FC EE F2 
0d836     F6 F2 F6 F2 
0d83a     F2 F2 F6 F6 
0d83e     F8 F6 F8 F2 | 	byte	$f8, $fc, $ee, $f2, $f6, $f2, $f6, $f2, $f2, $f2, $f6, $f6, $f8, $f6, $f8, $f2
0d842     FC F8 F6 EE 
0d846     F8 F6 FC F8 
0d84a     F8 F2 FC F2 
0d84e     F8 F8 F8 F8 | 	byte	$fc, $f8, $f6, $ee, $f8, $f6, $fc, $f8, $f8, $f2, $fc, $f2, $f8, $f8, $f8, $f8
0d852     F8 F8 FC F6 
0d856     F8 F6 F8 F8 
0d85a     F2 FC F8 F2 
0d85e     F6 F8 F8 F8 | 	byte	$f8, $f8, $fc, $f6, $f8, $f6, $f8, $f8, $f2, $fc, $f8, $f2, $f6, $f8, $f8, $f8
0d862     FF F8 F6 FC 
0d866     F2 FC F6 F2 
0d86a     FC F6 FC F8 
0d86e     F2 F6 F8 FC | 	byte	$ff, $f8, $f6, $fc, $f2, $fc, $f6, $f2, $fc, $f6, $fc, $f8, $f2, $f6, $f8, $fc
0d872     F2 FC F6 FF 
0d876     F6 F6 FC F6 
0d87a     FC FC F6 F6 
0d87e     F2 FF F2 FF | 	byte	$f2, $fc, $f6, $ff, $f6, $f6, $fc, $f6, $fc, $fc, $f6, $f6, $f2, $ff, $f2, $ff
0d882     F6 F6 FC F8 
0d886     F6 F2 F6 F8 
0d88a     F8 00 FC F6 
0d88e     F8 FF F6 F2 | 	byte	$f6, $f6, $fc, $f8, $f6, $f2, $f6, $f8, $f8, $00, $fc, $f6, $f8, $ff, $f6, $f2
0d892     FC F6 F6 FC 
0d896     F6 FF EE FC 
0d89a     F8 F8 F8 F2 
0d89e     F8 F8 F8 F8 | 	byte	$fc, $f6, $f6, $fc, $f6, $ff, $ee, $fc, $f8, $f8, $f8, $f2, $f8, $f8, $f8, $f8
0d8a2     F8 F6 F8 F6 
0d8a6     F6 F6 F8 F6 
0d8aa     F6 F6 F8 F2 
0d8ae     FC F2 F6 F6 | 	byte	$f8, $f6, $f8, $f6, $f6, $f6, $f8, $f6, $f6, $f6, $f8, $f2, $fc, $f2, $f6, $f6
0d8b2     F6 F8 F2 F6 
0d8b6     F8 F6 F6 FC 
0d8ba     F6 F2 F2 F8 
0d8be     F8 F2 F8 F6 | 	byte	$f6, $f8, $f2, $f6, $f8, $f6, $f6, $fc, $f6, $f2, $f2, $f8, $f8, $f2, $f8, $f6
0d8c2     F8 F6 F8 F8 
0d8c6     F6 F6 F6 F6 
0d8ca     F8 F6 F8 F2 
0d8ce     F6 F6 F6 F6 | 	byte	$f8, $f6, $f8, $f8, $f6, $f6, $f6, $f6, $f8, $f6, $f8, $f2, $f6, $f6, $f6, $f6
0d8d2     F6 F6 F6 F6 
      ...             
0d90e     F6 F6 F6 F6 
0d912     F6 F6 F6    | 	byte	$f6[67]
0d915     F8 F6 F6 F6 
0d919     F6 F6 F6 F6 
0d91d     F6 F8 F6 F6 
0d921     F6 F6 F6 F6 | 	byte	$f8, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f8, $f6, $f6, $f6, $f6, $f6, $f6
0d925     F6 F6 F6 F6 
      ...             
0d985     F6 F6 F6 F6 
0d989     F6 F6 F6 F6 | 	byte	$f6[104]
0d98d     F8 F8 F6 F8 
0d991     F6 F8 F8 F8 
0d995     F8 F8 F8 F8 
0d999     F8 F8 F8 F8 | 	byte	$f8, $f8, $f6, $f8, $f6, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f8
0d99d     F8 F8 F8 F8 
      ...             
0d9fd     F8 F8 F8 F8 
0da01     F8 F8       | 	byte	$f8[102]
0da03     F6 F8 F8 F6 
0da07     F8 F8 F8 F8 
0da0b     F6 F8 F6 F6 
0da0f     F6 F6 F6 F6 | 	byte	$f6, $f8, $f8, $f6, $f8, $f8, $f8, $f8, $f6, $f8, $f6, $f6, $f6, $f6, $f6, $f6
0da13     F6 F6 F6 F6 
      ...             
0da6f     F6 F6 F6 F6 
0da73     F6 F6 F6    | 	byte	$f6[99]
0da76     00 00 F6 F6 
0da7a     F6 F6 F6 F6 
0da7e     F6 F2 F2 D5 
0da82     2B CE C3 27 | 	byte	$00, $00, $f6, $f6, $f6, $f6, $f6, $f6, $f6, $f2, $f2, $d5, $2b, $ce, $c3, $27
0da86     00 AA 68 07 
0da8a     E4 00 F9 F9 
0da8e     FD 19 F2 D9 
0da92     19 39 15 19 | 	byte	$00, $aa, $68, $07, $e4, $00, $f9, $f9, $fd, $19, $f2, $d9, $19, $39, $15, $19
0da96     0E AA EE F6 
0da9a     E0 07 FD 0E 
0da9e     07 F2 A6 03 
0daa2     1C DC E4 CE | 	byte	$0e, $aa, $ee, $f6, $e0, $07, $fd, $0e, $07, $f2, $a6, $03, $1c, $dc, $e4, $ce
0daa6     B8 D2 F2 E0 
0daaa     00 FD 00 8D 
0daae     EE 12 FD D9 
0dab2     A6 EE 00 B1 | 	byte	$b8, $d2, $f2, $e0, $00, $fd, $00, $8d, $ee, $12, $fd, $d9, $a6, $ee, $00, $b1
0dab6     F9 44 E0 A6 
0daba     FD 00 00 AA 
0dabe     F6 19 FD 24 
0dac2     FD FD D5 FD | 	byte	$f9, $44, $e0, $a6, $fd, $00, $00, $aa, $f6, $19, $fd, $24, $fd, $fd, $d5, $fd
0dac6     2B C7 C3 FD 
0daca     00 EB 44 00 
0dace     D5 E4 CE CE 
0dad2     D5 CE CE C3 | 	byte	$2b, $c7, $c3, $fd, $00, $eb, $44, $00, $d5, $e4, $ce, $ce, $d5, $ce, $ce, $c3
0dad6     F6 00 C3 EB 
0dada     E4 00 12 39 
0dade     15 19 27 12 
0dae2     0A 00 FD 1C | 	byte	$f6, $00, $c3, $eb, $e4, $00, $12, $39, $15, $19, $27, $12, $0a, $00, $fd, $1c
0dae6     27 00 8D FD 
0daea     07 36 0E AA 
0daee     FD F6 FD D5 
0daf2     C3 D5 E7 52 | 	byte	$27, $00, $8d, $fd, $07, $36, $0e, $aa, $fd, $f6, $fd, $d5, $c3, $d5, $e7, $52
0daf6     00 03 E4 FD 
0dafa     27 00 AA 19 
0dafe     00 FD FD 00 
0db02     F2 F9 F2 CA | 	byte	$00, $03, $e4, $fd, $27, $00, $aa, $19, $00, $fd, $fd, $00, $f2, $f9, $f2, $ca
0db06     DC F6 CE AE 
0db0a     D5 D5 CA 19 
0db0e     00 CE FD 1C 
0db12     D5 C3 19 E4 | 	byte	$dc, $f6, $ce, $ae, $d5, $d5, $ca, $19, $00, $ce, $fd, $1c, $d5, $c3, $19, $e4
0db16     A3 15 73 DC 
0db1a     FD 39 EB 12 
0db1e     FD FD FD 19 
0db22     0E E4 19 56 | 	byte	$a3, $15, $73, $dc, $fd, $39, $eb, $12, $fd, $fd, $fd, $19, $0e, $e4, $19, $56
0db26     19 19 1C C7 
0db2a     E0 EE E7 1C 
0db2e     0A 24 15 03 
0db32     B1 0E 40 E0 | 	byte	$19, $19, $1c, $c7, $e0, $ee, $e7, $1c, $0a, $24, $15, $03, $b1, $0e, $40, $e0
0db36     F2 D2 C7 D2 
0db3a     F6 E0 0E FD 
0db3e     12 AA C3 FD 
0db42     FD E4 AA F9 | 	byte	$f2, $d2, $c7, $d2, $f6, $e0, $0e, $fd, $12, $aa, $c3, $fd, $fd, $e4, $aa, $f9
0db46     1C C7 E0 2E 
0db4a     DC 9C 00 39 
0db4e     FD CE C3 FD 
0db52     E7 2B 00 F2 | 	byte	$1c, $c7, $e0, $2e, $dc, $9c, $00, $39, $fd, $ce, $c3, $fd, $e7, $2b, $00, $f2
0db56     00 F6 27 00 
0db5a     94 FD 39 B5 
0db5e     FD 39 F2 F6 
0db62     BC D9 C3 C7 | 	byte	$00, $f6, $27, $00, $94, $fd, $39, $b5, $fd, $39, $f2, $f6, $bc, $d9, $c3, $c7
0db66     C3 B8 CE 12 
0db6a     94 D9 E7 E0 
0db6e     EE 27 0E 00 
0db72     20 27 12 0A | 	byte	$c3, $b8, $ce, $12, $94, $d9, $e7, $e0, $ee, $27, $0e, $00, $20, $27, $12, $0a
0db76     DC 19 0E 2B 
0db7a     00 8A F2 00 
0db7e     36 00 9C F6 
0db82     F6 FD C7 C3 | 	byte	$dc, $19, $0e, $2b, $00, $8a, $f2, $00, $36, $00, $9c, $f6, $f6, $fd, $c7, $c3
0db86     CE E0 4F 00 
0db8a     00 E4 EE 19 
0db8e     00 AA 0E 1C 
0db92     E0 F6 F9 F2 | 	byte	$ce, $e0, $4f, $00, $00, $e4, $ee, $19, $00, $aa, $0e, $1c, $e0, $f6, $f9, $f2
0db96     F6 EE D5 BC 
0db9a     E0 CE AA D5 
0db9e     E4 CA F6 00 
0dba2     DC EE FD D5 | 	byte	$f6, $ee, $d5, $bc, $e0, $ce, $aa, $d5, $e4, $ca, $f6, $00, $dc, $ee, $fd, $d5
0dba6     B5 07 00 B8 
0dbaa     FD 6F DC C3 
0dbae     1C F6 B8 E0 
0dbb2     E7 F6 03 15 | 	byte	$b5, $07, $00, $b8, $fd, $6f, $dc, $c3, $1c, $f6, $b8, $e0, $e7, $f6, $03, $15
0dbb6     24 2E 24 15 
0dbba     07 00 EB E0 
0dbbe     D5 D2 EE F9 
0dbc2     FD 0E 1C 27 | 	byte	$24, $2e, $24, $15, $07, $00, $eb, $e0, $d5, $d2, $ee, $f9, $fd, $0e, $1c, $27
0dbc6     32 1C 12 03 
0dbca     F6 E7 DC CE 
0dbce     D2 EB F6 FD 
0dbd2     0A 19 24 2B | 	byte	$32, $1c, $12, $03, $f6, $e7, $dc, $ce, $d2, $eb, $f6, $fd, $0a, $19, $24, $2b
0dbd6     12 07 F9 EB 
0dbda     E0 D5 C7 CE 
0dbde     E4 EE FD 07 
0dbe2     12 20 24 0A | 	byte	$12, $07, $f9, $eb, $e0, $d5, $c7, $ce, $e4, $ee, $fd, $07, $12, $20, $24, $0a
0dbe6     03 F2 E4 D9 
0dbea     CE C3 CA E0 
0dbee     EE F9 07 12 
0dbf2     19 20 03 00 | 	byte	$03, $f2, $e4, $d9, $ce, $c3, $ca, $e0, $ee, $f9, $07, $12, $19, $20, $03, $00
0dbf6     EB E0 D5 C7 
0dbfa     BC CA DC E7 
0dbfe     F6 07 12 19 
0dc02     1C 00 F9 EB | 	byte	$eb, $e0, $d5, $c7, $bc, $ca, $dc, $e7, $f6, $07, $12, $19, $1c, $00, $f9, $eb
0dc06     DC D2 C7 BC 
0dc0a     CA D9 E7 F6 
0dc0e     03 0E 19 1C 
0dc12     00 00 EB E0 | 	byte	$dc, $d2, $c7, $bc, $ca, $d9, $e7, $f6, $03, $0e, $19, $1c, $00, $00, $eb, $e0
0dc16     D2 C7 BC C3 
0dc1a     D9 E7 F2 03 
0dc1e     0E 19 1C 03 
0dc22     00 EE E4 D5 | 	byte	$d2, $c7, $bc, $c3, $d9, $e7, $f2, $03, $0e, $19, $1c, $03, $00, $ee, $e4, $d5
0dc26     C7 C0 CE DC 
0dc2a     E7 F6 03 12 
0dc2e     1C 1C 03 00 
0dc32     EE E0 D5 C7 | 	byte	$c7, $c0, $ce, $dc, $e7, $f6, $03, $12, $1c, $1c, $03, $00, $ee, $e0, $d5, $c7
0dc36     C0 D2 DC EB 
0dc3a     F9 07 12 20 
0dc3e     20 03 00 EE 
0dc42     E4 D5 C7 C0 | 	byte	$c0, $d2, $dc, $eb, $f9, $07, $12, $20, $20, $03, $00, $ee, $e4, $d5, $c7, $c0
0dc46     D2 E0 EE FD 
0dc4a     07 15 20 1C 
0dc4e     03 F9 EB DC 
0dc52     D5 C7 C0 E0 | 	byte	$d2, $e0, $ee, $fd, $07, $15, $20, $1c, $03, $f9, $eb, $dc, $d5, $c7, $c0, $e0
0dc56     E7 F2 FD 0A 
0dc5a     19 24 1C 03 
0dc5e     F6 EB DC D2 
0dc62     C7 C3 E0 EB | 	byte	$e7, $f2, $fd, $0a, $19, $24, $1c, $03, $f6, $eb, $dc, $d2, $c7, $c3, $e0, $eb
0dc66     F6 03 12 1C 
0dc6a     24 12 03 F6 
0dc6e     E7 D9 CE C7 
0dc72     C7 E0 EE FD | 	byte	$f6, $03, $12, $1c, $24, $12, $03, $f6, $e7, $d9, $ce, $c7, $c7, $e0, $ee, $fd
0dc76     0A 12 20 24 
0dc7a     0A 03 F2 E4 
0dc7e     D9 CE C7 D2 
0dc82     E0 EE FD 0A | 	byte	$0a, $12, $20, $24, $0a, $03, $f2, $e4, $d9, $ce, $c7, $d2, $e0, $ee, $fd, $0a
0dc86     19 24 24 0A 
0dc8a     00 F2 E4 D9 
0dc8e     CA C7 D9 E4 
0dc92     EE FD 0E 19 | 	byte	$19, $24, $24, $0a, $00, $f2, $e4, $d9, $ca, $c7, $d9, $e4, $ee, $fd, $0e, $19
0dc96     24 20 0A 00 
0dc9a     F2 E4 D5 CA 
0dc9e     C7 E0 E7 F2 
0dca2     FD 0E 19 24 | 	byte	$24, $20, $0a, $00, $f2, $e4, $d5, $ca, $c7, $e0, $e7, $f2, $fd, $0e, $19, $24
0dca6     15 07 00 EE 
0dcaa     E0 D5 C7 CA 
0dcae     E4 EB F6 03 
0dcb2     0E 1C 24 0E | 	byte	$15, $07, $00, $ee, $e0, $d5, $c7, $ca, $e4, $eb, $f6, $03, $0e, $1c, $24, $0e
0dcb6     07 F9 EB E0 
0dcba     D2 C7 CA E4 
0dcbe     EE F9 07 12 
0dcc2     20 24 0A 00 | 	byte	$07, $f9, $eb, $e0, $d2, $c7, $ca, $e4, $ee, $f9, $07, $12, $20, $24, $0a, $00
0dcc6     F6 E7 DC D2 
0dcca     C7 CE E4 EE 
0dcce     F9 0A 12 20 
0dcd2     24 07 00 F2 | 	byte	$f6, $e7, $dc, $d2, $c7, $ce, $e4, $ee, $f9, $0a, $12, $20, $24, $07, $00, $f2
0dcd6     E7 DC CE C7 
0dcda     D2 E4 EE FD 
0dcde     0A 15 20 24 
0dce2     07 00 F2 E4 | 	byte	$e7, $dc, $ce, $c7, $d2, $e4, $ee, $fd, $0a, $15, $20, $24, $07, $00, $f2, $e4
0dce6     D9 CE C7 D2 
0dcea     E0 EE FD 0A 
0dcee     15 20 24 0A 
0dcf2     00 F2 E4 D9 | 	byte	$d9, $ce, $c7, $d2, $e0, $ee, $fd, $0a, $15, $20, $24, $0a, $00, $f2, $e4, $d9
0dcf6     CE C7 CE E0 
0dcfa     EE FD 07 15 
0dcfe     20 24 0E 03 
0dd02     F6 EB D9 CE | 	byte	$ce, $c7, $ce, $e0, $ee, $fd, $07, $15, $20, $24, $0e, $03, $f6, $eb, $d9, $ce
0dd06     C3 CA D2 D5 
0dd0a     DC E0 E7 EE 
0dd0e     F6 FD 03 0E 
0dd12     15 1C 24 2B | 	byte	$c3, $ca, $d2, $d5, $dc, $e0, $e7, $ee, $f6, $fd, $03, $0e, $15, $1c, $24, $2b
0dd16     2B 20 19 12 
0dd1a     0E 07 00 F6 
0dd1e     EE E7 DC D5 
0dd22     CE C7 C0 C0 | 	byte	$2b, $20, $19, $12, $0e, $07, $00, $f6, $ee, $e7, $dc, $d5, $ce, $c7, $c0, $c0
0dd26     CA CE D5 DC 
0dd2a     E0 E7 EE F6 
0dd2e     FD 07 0E 15 
0dd32     1C 20 24 19 | 	byte	$ca, $ce, $d5, $dc, $e0, $e7, $ee, $f6, $fd, $07, $0e, $15, $1c, $20, $24, $19
0dd36     15 0E 0A 03 
0dd3a     00 F6 EE E7 
0dd3e     E0 D5 CE CA 
0dd42     C3 C0 CE CE | 	byte	$15, $0e, $0a, $03, $00, $f6, $ee, $e7, $e0, $d5, $ce, $ca, $c3, $c0, $ce, $ce
0dd46     D5 D9 E0 E7 
0dd4a     EE F6 FD 03 
0dd4e     0A 12 19 20 
0dd52     20 15 12 0E | 	byte	$d5, $d9, $e0, $e7, $ee, $f6, $fd, $03, $0a, $12, $19, $20, $20, $15, $12, $0e
0dd56     07 00 FD F2 
0dd5a     EB E4 DC D5 
0dd5e     CE CA C7 C7 
0dd62     CE D2 D9 E0 | 	byte	$07, $00, $fd, $f2, $eb, $e4, $dc, $d5, $ce, $ca, $c7, $c7, $ce, $d2, $d9, $e0
0dd66     E4 EB F2 F9 
0dd6a     00 0A 12 19 
0dd6e     1C 24 15 15 
0dd72     12 0A 03 00 | 	byte	$e4, $eb, $f2, $f9, $00, $0a, $12, $19, $1c, $24, $15, $15, $12, $0a, $03, $00
0dd76     F9 EE E7 E4 
0dd7a     DC D5 CE C7 
0dd7e     C7 D2 D2 D9 
0dd82     DC E4 EB F2 | 	byte	$f9, $ee, $e7, $e4, $dc, $d5, $ce, $c7, $c7, $d2, $d2, $d9, $dc, $e4, $eb, $f2
0dd86     F9 FD 03 0A 
0dd8a     12 19 1C 1C 
0dd8e     12 0E 0E 07 
0dd92     00 FD F6 EE | 	byte	$f9, $fd, $03, $0a, $12, $19, $1c, $1c, $12, $0e, $0e, $07, $00, $fd, $f6, $ee
0dd96     E7 E0 D9 D2 
0dd9a     CE CA CA D5 
0dd9e     D9 DC E0 E7 
0dda2     EE F2 F9 00 | 	byte	$e7, $e0, $d9, $d2, $ce, $ca, $ca, $d5, $d9, $dc, $e0, $e7, $ee, $f2, $f9, $00
0dda6     07 0E 15 19 
0ddaa     1C 1C 12 0E 
0ddae     0A 03 00 F9 
0ddb2     F6 EB E7 E0 | 	byte	$07, $0e, $15, $19, $1c, $1c, $12, $0e, $0a, $03, $00, $f9, $f6, $eb, $e7, $e0
0ddb6     DC D5 CE CA 
0ddba     CE D5 D9 DC 
0ddbe     E0 E7 EB EE 
0ddc2     F9 FD 07 0A | 	byte	$dc, $d5, $ce, $ca, $ce, $d5, $d9, $dc, $e0, $e7, $eb, $ee, $f9, $fd, $07, $0a
0ddc6     12 15 1C 1C 
0ddca     12 0E 0A 07 
0ddce     00 F9 F6 F2 
0ddd2     EB E4 DC D9 | 	byte	$12, $15, $1c, $1c, $12, $0e, $0a, $07, $00, $f9, $f6, $f2, $eb, $e4, $dc, $d9
0ddd6     D2 CA CA D5 
0ddda     D5 D9 DC E4 
0ddde     EB EE F6 FD 
0dde2     03 07 0E 15 | 	byte	$d2, $ca, $ca, $d5, $d5, $d9, $dc, $e4, $eb, $ee, $f6, $fd, $03, $07, $0e, $15
0dde6     19 1C 12 0E 
0ddea     0A 07 03 00 
0ddee     F9 F2 EB E4 
0ddf2     E0 D9 D2 CE | 	byte	$19, $1c, $12, $0e, $0a, $07, $03, $00, $f9, $f2, $eb, $e4, $e0, $d9, $d2, $ce
0ddf6     CE D5 D9 DC 
0ddfa     E0 E7 EE F2 
0ddfe     F9 FD 03 0A 
0de02     12 15 19 1C | 	byte	$ce, $d5, $d9, $dc, $e0, $e7, $ee, $f2, $f9, $fd, $03, $0a, $12, $15, $19, $1c
0de06     12 0E 0A 07 
0de0a     00 F9 F6 EE 
0de0e     EB E4 DC D9 
0de12     D2 CE D2 D9 | 	byte	$12, $0e, $0a, $07, $00, $f9, $f6, $ee, $eb, $e4, $dc, $d9, $d2, $ce, $d2, $d9
0de16     DC E0 E4 E7 
0de1a     EE F6 F9 FD 
0de1e     07 0A 0E 15 
0de22     19 12 0E 0A | 	byte	$dc, $e0, $e4, $e7, $ee, $f6, $f9, $fd, $07, $0a, $0e, $15, $19, $12, $0e, $0a
0de26     07 03 00 F9 
0de2a     F2 EE E7 E0 
0de2e     DC D5 D2 CE 
0de32     D5 D5 DC E0 | 	byte	$07, $03, $00, $f9, $f2, $ee, $e7, $e0, $dc, $d5, $d2, $ce, $d5, $d5, $dc, $e0
0de36     E4 E7 EE F6 
0de3a     F9 FD 07 0A 
0de3e     12 15 19 0E 
0de42     0E 07 03 00 | 	byte	$e4, $e7, $ee, $f6, $f9, $fd, $07, $0a, $12, $15, $19, $0e, $0e, $07, $03, $00
0de46     FD F6 EE EB 
0de4a     E7 E0 D9 D5 
0de4e     D2 D2 D9 D9 
0de52     E7 EB EB EE | 	byte	$fd, $f6, $ee, $eb, $e7, $e0, $d9, $d5, $d2, $d2, $d9, $d9, $e7, $eb, $eb, $ee
0de56     EE F2 F6 F6 
0de5a     F9 FD 00 03 
0de5e     03 00 00 00 
0de62     FD F6 F9 F9 | 	byte	$ee, $f2, $f6, $f6, $f9, $fd, $00, $03, $03, $00, $00, $00, $fd, $f6, $f9, $f9
0de66     F6 F6 F6 F2 
0de6a     F2 F2 EE EE 
0de6e     F2 F2 F2 F2 
0de72     F6 F6 F6 F6 | 	byte	$f6, $f6, $f6, $f2, $f2, $f2, $ee, $ee, $f2, $f2, $f2, $f2, $f6, $f6, $f6, $f6
0de76     F6 F6 F6 F6 
0de7a     F6          | 	byte	$f6[5]
0de7b     FC 00 00 00 
0de7f     00 00 00 00 
0de83     00 F5 F5 F5 
0de87     F5 E8 E8 E8 | 	byte	$fc, $00, $00, $00, $00, $00, $00, $00, $00, $f5, $f5, $f5, $f5, $e8, $e8, $e8
0de8b     E8 F0 F0 F0 
0de8f     F0 FB FB FB 
0de93     FB 09 09 09 
0de97     09 14 14 14 | 	byte	$e8, $f0, $f0, $f0, $f0, $fb, $fb, $fb, $fb, $09, $09, $09, $09, $14, $14, $14
0de9b     14 08 08 08 
0de9f     08 FC FC FC 
0dea3     FC EF EF EF 
0dea7     EF EB EB EB | 	byte	$14, $08, $08, $08, $08, $fc, $fc, $fc, $fc, $ef, $ef, $ef, $ef, $eb, $eb, $eb
0deab     EB F5 F5 F5 
0deaf     F5 01 01 01 
0deb3     01 0F 0F 0F 
0deb7     0F 0E 0E 0E | 	byte	$eb, $f5, $f5, $f5, $f5, $01, $01, $01, $01, $0f, $0f, $0f, $0f, $0e, $0e, $0e
0debb     0E 03 03 03 
0debf     03 F6 F6 F6 
0dec3     F6 E9 E9 E9 
0dec7     E9 EE EE EE | 	byte	$0e, $03, $03, $03, $03, $f6, $f6, $f6, $f6, $e9, $e9, $e9, $e9, $ee, $ee, $ee
0decb     EE F9 F9 F9 
0decf     F9 06 06 06 
0ded3     06 12 12 12 
0ded7     12 0A 0A 0A | 	byte	$ee, $f9, $f9, $f9, $f9, $06, $06, $06, $06, $12, $12, $12, $12, $0a, $0a, $0a
0dedb     0A FE FE FE 
0dedf     FE F1 F1 F1 
0dee3     F1 E7 E7 E7 
0dee7     E7 F2 F2 F2 | 	byte	$0a, $fe, $fe, $fe, $fe, $f1, $f1, $f1, $f1, $e7, $e7, $e7, $e7, $f2, $f2, $f2
0deeb     F2 FD FD FD 
0deef     FD 0A 0A 0A 
0def3     0A 10 10 10 
0def7     10 06 06 06 | 	byte	$f2, $fd, $fd, $fd, $fd, $0a, $0a, $0a, $0a, $10, $10, $10, $10, $06, $06, $06
0defb     06 F8 F8 F8 
0deff     F8 EB EB EB 
0df03     EB E5 E5 E5 
0df07     E5 E3 E3 E3 | 	byte	$06, $f8, $f8, $f8, $f8, $eb, $eb, $eb, $eb, $e5, $e5, $e5, $e5, $e3, $e3, $e3
0df0b     E3 E5 E5 E5 
0df0f     E5 E8 E8 E8 
0df13     E8 ED ED ED 
0df17     ED 15 15 15 | 	byte	$e3, $e5, $e5, $e5, $e5, $e8, $e8, $e8, $e8, $ed, $ed, $ed, $ed, $15, $15, $15
0df1b     15 1E 1E 1E 
0df1f     1E 24 24 24 
0df23     24 25 25 25 
0df27     25 23 23 23 | 	byte	$15, $1e, $1e, $1e, $1e, $24, $24, $24, $24, $25, $25, $25, $25, $23, $23, $23
0df2b     23 1D 1D 1D 
0df2f     1D F2 F2 F2 
0df33     F2 ED ED ED 
0df37     ED E7 E7 E7 | 	byte	$23, $1d, $1d, $1d, $1d, $f2, $f2, $f2, $f2, $ed, $ed, $ed, $ed, $e7, $e7, $e7
0df3b     E7 E5 E5 E5 
0df3f     E5 E4 E4 E4 
0df43     E4 E7 E7 E7 
0df47     E7 0E 0E 0E | 	byte	$e7, $e5, $e5, $e5, $e5, $e4, $e4, $e4, $e4, $e7, $e7, $e7, $e7, $0e, $0e, $0e
0df4b     0E 0F 0F 0F 
0df4f     0F 13 13 13 
0df53     13 14 14 14 
0df57     14 13 13 13 | 	byte	$0e, $0f, $0f, $0f, $0f, $13, $13, $13, $13, $14, $14, $14, $14, $13, $13, $13
0df5b     13 0D 0D 0D 
0df5f     0D ED ED ED 
0df63     ED E5 E5 E5 
0df67     E5 E1 E1 E1 | 	byte	$13, $0d, $0d, $0d, $0d, $ed, $ed, $ed, $ed, $e5, $e5, $e5, $e5, $e1, $e1, $e1
0df6b     E1 E1 E1 E1 
0df6f     E1          | 	byte	$e1[5]
0df70     E2 E2 E2 E2 
0df74     E7 E7 E7 E7 
0df78     04 04 04 04 
0df7c     0C 0C 0C 0C | 	byte	$e2, $e2, $e2, $e2, $e7, $e7, $e7, $e7, $04, $04, $04, $04, $0c, $0c, $0c, $0c
0df80     0E 0E 0E 0E 
0df84     10 10 10 10 
0df88     0F 0F 0F 0F 
0df8c     0A 0A 0A 0A | 	byte	$0e, $0e, $0e, $0e, $10, $10, $10, $10, $0f, $0f, $0f, $0f, $0a, $0a, $0a, $0a
0df90     F0 F0 F0 F0 
0df94     EA EA EA EA 
0df98     E7 E7 E7 E7 
0df9c     E6 E6 E6 E6 | 	byte	$f0, $f0, $f0, $f0, $ea, $ea, $ea, $ea, $e7, $e7, $e7, $e7, $e6, $e6, $e6, $e6
0dfa0     E8 E8 E8 E8 
0dfa4     ED ED ED ED 
0dfa8     07 07 07 07 
0dfac     0B 0B 0B 0B | 	byte	$e8, $e8, $e8, $e8, $ed, $ed, $ed, $ed, $07, $07, $07, $07, $0b, $0b, $0b, $0b
0dfb0     0D 0D 0D 0D 
0dfb4     0E 0E 0E 0E 
0dfb8     0D 0D 0D 0D 
0dfbc     08 08 08 08 | 	byte	$0d, $0d, $0d, $0d, $0e, $0e, $0e, $0e, $0d, $0d, $0d, $0d, $08, $08, $08, $08
0dfc0     F1 F1 F1 F1 
0dfc4     EE EE EE EE 
0dfc8     EC EC EC EC 
0dfcc     EC EC EC EC | 	byte	$f1, $f1, $f1, $f1, $ee, $ee, $ee, $ee, $ec, $ec, $ec, $ec, $ec, $ec, $ec, $ec
0dfd0     ED ED ED ED 
0dfd4     F4 F4 F4 F4 
0dfd8     07 07 07 07 
0dfdc     0B 0B 0B 0B | 	byte	$ed, $ed, $ed, $ed, $f4, $f4, $f4, $f4, $07, $07, $07, $07, $0b, $0b, $0b, $0b
0dfe0     0C 0C 0C 0C 
0dfe4     0D 0D 0D 0D 
0dfe8     0C 0C 0C 0C 
0dfec     04 04 04 04 | 	byte	$0c, $0c, $0c, $0c, $0d, $0d, $0d, $0d, $0c, $0c, $0c, $0c, $04, $04, $04, $04
0dff0     F3 F3 F3 F3 
0dff4     F0 F0 F0 F0 
0dff8     EE EE EE EE 
0dffc     EE EE EE EE | 	byte	$f3, $f3, $f3, $f3, $f0, $f0, $f0, $f0, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee
0e000     EF EF EF EF 
0e004     F5 F5 F5 F5 
0e008     07 07 07 07 
0e00c     0A 0A 0A 0A | 	byte	$ef, $ef, $ef, $ef, $f5, $f5, $f5, $f5, $07, $07, $07, $07, $0a, $0a, $0a, $0a
0e010     0B 0B 0B 0B 
0e014     0B 0B 0B 0B | 	byte	$0b[8]
0e018     0A 0A 0A 0A 
0e01c     06 06 06 06 
0e020     F4 F4 F4 F4 | 	byte	$0a, $0a, $0a, $0a, $06, $06, $06, $06, $f4, $f4, $f4, $f4
0e024                 | 	alignl
0e024                 | _hng030rm_spin2_dat_
0e024     00 00 00 00 
0e028     00 00 00 00 
0e02c     00 00 00 00 
0e030     00 00 00 00 
0e034     00 00 00    | vga_font       file "vgafont.def"
0e037     7E 81 A5 81 
0e03b     81 BD 99 81 
0e03f     81 7E 00 00 
0e043     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0e047     7E FF DB FF 
0e04b     FF C3 E7 FF 
0e04f     FF 7E 00 00 
0e053     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0e057     00 36 7F 7F 
0e05b     7F 7F 3E 1C 
0e05f     08 00 00 00 
0e063     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0e067     00 08 1C 3E 
0e06b     7F 3E 1C 08 
0e06f     00 00 00 00 
0e073     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0e077     18 3C 3C E7 
0e07b     E7 E7 18 18 
0e07f     3C 00 00 00 
0e083     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0e087     18 3C 7E FF 
0e08b     FF 7E 18 18 
0e08f     3C 00 00 00 
0e093     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0e097     00 00 00 18 
0e09b     3C 3C 18 00 
0e09f     00 00 00 00 
0e0a3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
0e0a7     FF FF FF E7 
0e0ab     C3 C3 E7 FF 
0e0af     FF FF FF FF 
0e0b3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0e0b7     00 00 3C 66 
0e0bb     42 42 66 3C 
0e0bf     00 00 00 00 
0e0c3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
0e0c7     FF FF C3 99 
0e0cb     BD BD 99 C3 
0e0cf     FF FF FF FF 
0e0d3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0e0d7     78 70 58 4C 
0e0db     1E 33 33 33 
0e0df     33 1E 00 00 
0e0e3     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
0e0e7     3C 66 66 66 
0e0eb     66 3C 18 7E 
0e0ef     18 18 00 00 
0e0f3     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
0e0f7     FC CC FC 0C 
0e0fb     0C 0C 0C 0E 
0e0ff     0F 07 00 00 
0e103     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
0e107     FE C6 FE C6 
0e10b     C6 C6 C6 E6 
0e10f     E7 67 03 00 
0e113     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
0e117     18 18 DB 3C 
0e11b     E7 3C DB 18 
0e11f     18 00 00 00 
0e123     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
0e127     03 07 0F 1F 
0e12b     7F 1F 0F 07 
0e12f     03 01 00 00 
0e133     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
0e137     60 70 78 7C 
0e13b     7F 7C 78 70 
0e13f     60 40 00 00 
0e143     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0e147     18 3C 7E 18 
0e14b     18 18 7E 3C 
0e14f     18 00 00 00 
0e153     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0e157     66 66 66 66 
0e15b     66 66 66    | 	byte	$66[7]
0e15e     00 66 66 00 
0e162     00 00 00 00 
0e166     00 FE DB DB 
0e16a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
0e16e     D8 D8 D8 00 
0e172     00 00 00 3E 
0e176     63 06 1C 36 
0e17a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
0e17e     30 63 3E 00 
0e182     00 00 00 00 
0e186     00 00 00 00 
0e18a     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0e18e     7F 7F 7F 00 
0e192     00 00 00 00 
0e196     00 18 3C 7E 
0e19a     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
0e19e     3C 18 7E 00 
0e1a2     00 00 00 00 
0e1a6     00 18 3C 7E 
0e1aa     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
0e1ae     18 18 18 00 
0e1b2     00 00 00 00 
0e1b6     00 18 18 18 
0e1ba     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0e1be     7E 3C 18 00 
0e1c2     00 00 00 00 
0e1c6     00 00 00 18 
0e1ca     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
0e1ce     00 00 00 00 
0e1d2     00 00 00 00 
0e1d6     00 00 00    | 	byte	$00[11]
0e1d9     0C 06 7F 06 
0e1dd     0C 00 00 00 
0e1e1     00 00 00 00 
0e1e5     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e1e9     00 03 03 03 
0e1ed     7F 00 00 00 
0e1f1     00 00 00 00 
0e1f5     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e1f9     14 36 7F 36 
0e1fd     14 00 00 00 
0e201     00 00 00 00 
0e205     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
0e209     1C 1C 3E 3E 
0e20d     7F 7F 00 00 
0e211     00 00 00 00 
0e215     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0e219     7F 3E 3E 1C 
0e21d     1C 08 00 00 
0e221     00 00 00 00 
0e225     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e229     00 00 00 00 
0e22d     00 00 00 00 
0e231     00 00 00 00 
0e235     00 00       | 	byte	$00[14]
0e237     18 3C 3C 3C 
0e23b     18 18 18 00 
0e23f     18 18 00 00 
0e243     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
0e247     66 24 00 00 
0e24b     00 00 00 00 
0e24f     00 00 00 00 
0e253     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e257     00 36 36 7F 
0e25b     36 36 36 7F 
0e25f     36 36 00 00 
0e263     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
0e267     3E 63 43 03 
0e26b     3E 60 60 61 
0e26f     63 3E 18 18 
0e273     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
0e277     00 00 43 63 
0e27b     30 18 0C 06 
0e27f     63 61 00 00 
0e283     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
0e287     1C 36 36 1C 
0e28b     6E 3B 33 33 
0e28f     33 6E 00 00 
0e293     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
0e297     0C 0C 0C 06 
0e29b     00 00 00 00 
0e29f     00 00 00 00 
0e2a3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e2a7     30 18 0C 0C 
0e2ab     0C 0C 0C 0C 
0e2af     18 30 00 00 
0e2b3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
0e2b7     0C 18 30 30 
0e2bb     30 30 30 30 
0e2bf     18 0C 00 00 
0e2c3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
0e2c7     00 00 00 66 
0e2cb     3C FF 3C 66 
0e2cf     00 00 00 00 
0e2d3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
0e2d7     00 00 00 18 
0e2db     18 7E 18 18 
0e2df     00 00 00 00 
0e2e3     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0e2e7     00 00 00 00 
0e2eb     00 00 00 00 | 	byte	$00[8]
0e2ef     18 18 18 0C 
0e2f3     00 00 00 00 
0e2f7     00 00 00 00 
0e2fb     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
0e2ff     00 00 00 00 
0e303     00 00 00 00 
0e307     00 00 00 00 
0e30b     00 00 00 00 | 	byte	$00[16]
0e30f     18 18 00 00 
0e313     00 00 00 00 
0e317     00 00 40 60 
0e31b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
0e31f     03 01 00 00 
0e323     00 00 00 00 
0e327     1C 36 63 63 
0e32b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
0e32f     36 1C 00 00 
0e333     00 00 00 00 
0e337     18 1C 1E 18 
0e33b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
0e33f     18 7E 00 00 
0e343     00 00 00 00 
0e347     3E 63 60 30 
0e34b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
0e34f     63 7F 00 00 
0e353     00 00 00 00 
0e357     3E 63 60 60 
0e35b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
0e35f     63 3E 00 00 
0e363     00 00 00 00 
0e367     30 38 3C 36 
0e36b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
0e36f     30 78 00 00 
0e373     00 00 00 00 
0e377     7F 03 03 03 
0e37b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
0e37f     63 3E 00 00 
0e383     00 00 00 00 
0e387     1C 06 03 03 
0e38b     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
0e38f     63 3E 00 00 
0e393     00 00 00 00 
0e397     7F 63 60 60 
0e39b     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
0e39f     0C 0C 00 00 
0e3a3     00 00 00 00 
0e3a7     3E 63 63 63 
0e3ab     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
0e3af     63 3E 00 00 
0e3b3     00 00 00 00 
0e3b7     3E 63 63 63 
0e3bb     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
0e3bf     30 1E 00 00 
0e3c3     00 00 00 00 
0e3c7     00 00 00 18 
0e3cb     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0e3cf     18 18 00 00 
0e3d3     00 00 00 00 
0e3d7     00 00 00 18 
0e3db     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0e3df     18 18 0C 00 
0e3e3     00 00 00 00 
0e3e7     00 60 30 18 
0e3eb     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
0e3ef     30 60 00 00 
0e3f3     00 00 00 00 
0e3f7     00 00 00 7E 
0e3fb     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
0e3ff     00 00 00 00 
0e403     00 00 00 00 
0e407     00          | 	byte	$00[9]
0e408     06 0C 18 30 
0e40c     60 30 18 0C 
0e410     06 00 00 00 
0e414     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
0e418     63 63 30 18 
0e41c     18 18 00 18 
0e420     18 00 00 00 
0e424     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
0e428     3E 63 63 7B 
0e42c     7B 7B 3B 03 
0e430     3E 00 00 00 
0e434     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
0e438     1C 36 63 63 
0e43c     7F 63 63 63 
0e440     63 00 00 00 
0e444     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
0e448     66 66 66 3E 
0e44c     66 66 66 66 
0e450     3F 00 00 00 
0e454     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
0e458     66 43 03 03 
0e45c     03 03 43 66 
0e460     3C 00 00 00 
0e464     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
0e468     36 66 66 66 
0e46c     66 66 66 36 
0e470     1F 00 00 00 
0e474     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
0e478     66 46 16 1E 
0e47c     16 06 46 66 
0e480     7F 00 00 00 
0e484     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
0e488     66 46 16 1E 
0e48c     16 06 06 06 
0e490     0F 00 00 00 
0e494     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
0e498     66 43 03 03 
0e49c     7B 63 63 66 
0e4a0     5C 00 00 00 
0e4a4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
0e4a8     63 63 63 7F 
0e4ac     63 63 63 63 
0e4b0     63 00 00 00 
0e4b4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
0e4b8     18 18 18 18 
0e4bc     18 18 18 18 | 	byte	$18[8]
0e4c0     3C 00 00 00 
0e4c4     00 00 00 78 
0e4c8     30 30 30 30 
0e4cc     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
0e4d0     1E 00 00 00 
0e4d4     00 00 00 67 
0e4d8     66 66 36 1E 
0e4dc     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
0e4e0     67 00 00 00 
0e4e4     00 00 00 0F 
0e4e8     06 06 06 06 
0e4ec     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0e4f0     7F 00 00 00 
0e4f4     00 00 00 63 
0e4f8     77 7F 7F 6B 
0e4fc     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
0e500     63 00 00 00 
0e504     00 00 00 63 
0e508     67 6F 7F 7B 
0e50c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
0e510     63 00 00 00 
0e514     00 00 00 3E 
0e518     63 63 63 63 
0e51c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0e520     3E 00 00 00 
0e524     00 00 00 3F 
0e528     66 66 66 3E 
0e52c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
0e530     0F 00 00 00 
0e534     00 00 00 3E 
0e538     63 63 63 63 
0e53c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
0e540     3E 30 70 00 
0e544     00 00 00 3F 
0e548     66 66 66 3E 
0e54c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
0e550     67 00 00 00 
0e554     00 00 00 3E 
0e558     63 63 06 1C 
0e55c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0e560     3E 00 00 00 
0e564     00 00 00 7E 
0e568     7E 5A 18 18 
0e56c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0e570     3C 00 00 00 
0e574     00 00 00 63 
0e578     63 63 63 63 
0e57c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0e580     3E 00 00 00 
0e584     00 00 00 63 
0e588     63 63 63 63 
0e58c     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
0e590     08 00 00 00 
0e594     00 00 00 63 
0e598     63 63 63 6B 
0e59c     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
0e5a0     36 00 00 00 
0e5a4     00 00 00 63 
0e5a8     63 36 3E 1C 
0e5ac     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
0e5b0     63 00 00 00 
0e5b4     00 00 00 66 
0e5b8     66 66 66 3C 
0e5bc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
0e5c0     3C 00 00 00 
0e5c4     00 00 00 7F 
0e5c8     63 61 30 18 
0e5cc     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0e5d0     7F 00 00 00 
0e5d4     00 00 00 3C 
0e5d8     0C 0C 0C 0C 
0e5dc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
0e5e0     3C 00 00 00 
0e5e4     00 00 00 00 
0e5e8     01 03 07 0E 
0e5ec     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
0e5f0     40 00 00 00 
0e5f4     00 00 00 3C 
0e5f8     30 30 30 30 
0e5fc     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
0e600     3C 00 00 00 
0e604     1C 36 00 00 
0e608     00 00 00 00 
0e60c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e610     00 00 00 00 
0e614     00 00 00 00 
0e618     00 00 00 00 
0e61c     00 00 00 00 
0e620     00          | 	byte	$00[17]
0e621     FF 00 00 0C 
0e625     18 00 00 00 
0e629     00 00 00 00 
0e62d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e631     00 00 00 00 
0e635     00 00 00 00 
0e639     00          | 	byte	$00[9]
0e63a     1E 30 3E 33 
0e63e     33 33 6E 00 
0e642     00 00 00 00 
0e646     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0e64a     1E 36 66 66 
0e64e     66 66 3E 00 
0e652     00 00 00 00 
0e656     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e65a     3E 63 03 03 
0e65e     03 63 3E 00 
0e662     00 00 00 00 
0e666     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
0e66a     3C 36 33 33 
0e66e     33 33 6E 00 
0e672     00 00 00 00 
0e676     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e67a     3E 63 7F 03 
0e67e     03 63 3E 00 
0e682     00 00 00 00 
0e686     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
0e68a     0C 1E 0C 0C 
0e68e     0C 0C 1E 00 
0e692     00 00 00 00 
0e696     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e69a     6E 33 33 33 
0e69e     33 33 3E 30 
0e6a2     33 1E 00 00 
0e6a6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
0e6aa     36 6E 66 66 
0e6ae     66 66 67 00 
0e6b2     00 00 00 00 
0e6b6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
0e6ba     1C 18 18 18 
0e6be     18 18 3C 00 
0e6c2     00 00 00 00 
0e6c6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
0e6ca     70 60 60 60 
0e6ce     60 60 60 66 
0e6d2     66 3C 00 00 
0e6d6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
0e6da     66 36 1E 1E 
0e6de     36 66 67 00 
0e6e2     00 00 00 00 
0e6e6     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
0e6ea     18 18 18 18 
0e6ee     18 18       | 	byte	$18[6]
0e6f0     3C 00 00 00 
0e6f4     00 00 00 00 
0e6f8     00 00 37 7F 
0e6fc     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
0e700     63 00 00 00 
0e704     00 00 00 00 
0e708     00 00 3B 66 
0e70c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0e710     66 00 00 00 
0e714     00 00 00 00 
0e718     00 00 3E 63 
0e71c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
0e720     3E 00 00 00 
0e724     00 00 00 00 
0e728     00 00 3B 66 
0e72c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0e730     3E 06 06 0F 
0e734     00 00 00 00 
0e738     00 00 6E 33 
0e73c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
0e740     3E 30 30 78 
0e744     00 00 00 00 
0e748     00 00 3B 6E 
0e74c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
0e750     0F 00 00 00 
0e754     00 00 00 00 
0e758     00 00 3E 63 
0e75c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
0e760     3E 00 00 00 
0e764     00 00 00 08 
0e768     0C 0C 3F 0C 
0e76c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0e770     38 00 00 00 
0e774     00 00 00 00 
0e778     00 00 33 33 
0e77c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
0e780     6E 00 00 00 
0e784     00 00 00 00 
0e788     00 00 63 63 
0e78c     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
0e790     1C 00 00 00 
0e794     00 00 00 00 
0e798     00 00 63 63 
0e79c     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
0e7a0     36 00 00 00 
0e7a4     00 00 00 00 
0e7a8     00 00 63 36 
0e7ac     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
0e7b0     63 00 00 00 
0e7b4     00 00 00 00 
0e7b8     00 00 63 63 
0e7bc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
0e7c0     7E 60 30 1F 
0e7c4     00 00 00 00 
0e7c8     00 00 7F 33 
0e7cc     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
0e7d0     7F 00 00 00 
0e7d4     00 00 00 70 
0e7d8     18 18 18 0E 
0e7dc     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
0e7e0     70 00 00 00 
0e7e4     00 00 00 18 
0e7e8     18 18 18 18 
0e7ec     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
0e7f0     18 00 00 00 
0e7f4     00 00 00 0E 
0e7f8     18 18 18 70 
0e7fc     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
0e800     0E 00 00 00 
0e804     6E 3B 00 00 
0e808     00 00 00 00 
0e80c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e810     00 00 00 00 
0e814     00 00 00 00 
0e818     00 00       | 	byte	$00[10]
0e81a     08 1C 36 63 
0e81e     63 63 7F 00 
0e822     00 00 00 00 
0e826     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
0e82a     03 03 03 03 
0e82e     43 66 3C 18 
0e832     30 1E 00 00 
0e836     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
0e83a     33 33 33 33 
0e83e     33 33       | 	byte	$33[6]
0e840     6E 00 00 00 
0e844     00 00 60 30 
0e848     18 00 3E 63 
0e84c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
0e850     3E 00 00 00 
0e854     00 00 08 1C 
0e858     36 00 1E 30 
0e85c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
0e860     6E 00 00 00 
0e864     00 00 00 00 
0e868     33 00 1E 30 
0e86c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
0e870     6E 00 00 00 
0e874     00 00 1C 36 
0e878     1C 00 33 33 
0e87c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
0e880     6E 00 00 00 
0e884     00 00 60 30 
0e888     18 00 3E 63 
0e88c     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
0e890     3E 00 00 00 
0e894     00 00 00 00 
0e898     00 00 3E 63 
0e89c     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
0e8a0     3E 18 30 1E 
0e8a4     00 00 00 1C 
0e8a8     58 78 38 18 
0e8ac     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
0e8b0     3C 00 00 00 
0e8b4     00 00 00 00 
0e8b8     63 00 3E 63 
0e8bc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
0e8c0     3E 00 00 00 
0e8c4     66 33 00 3E 
0e8c8     63 63 63 63 
0e8cc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0e8d0     3E 00 00 00 
0e8d4     00 00 CC 66 
0e8d8     33 00 3E 63 
0e8dc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
0e8e0     3E 00 00 00 
0e8e4     00 00 18 3C 
0e8e8     66 00 1C 18 
0e8ec     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
0e8f0     3C 00 00 00 
0e8f4     30 18 00 7F 
0e8f8     63 61 30 18 
0e8fc     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0e900     7F 00 00 00 
0e904     00 63 00 08 
0e908     1C 36 63 63 
0e90c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
0e910     63 00 00 00 
0e914     30 18 00 3C 
0e918     66 43 03 03 
0e91c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
0e920     3C 00 00 00 
0e924     30 18 00 7F 
0e928     66 46 16 1E 
0e92c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
0e930     7F 00 00 00 
0e934     0C 06 00 0F 
0e938     06 06 06 06 
0e93c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0e940     7F 00 00 00 
0e944     30 18 00 1C 
0e948     18 18 18 18 
0e94c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
0e950     3C 00 00 00 
0e954     00 00 08 1C 
0e958     36 00 3E 63 
0e95c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
0e960     3E 00 00 00 
0e964     00 00 00 00 
0e968     63 00 3E 63 
0e96c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
0e970     3E 00 00 00 
0e974     00 00 00 6F 
0e978     46 26 06 06 
0e97c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
0e980     7F 00 00 00 
0e984     00 00 00 6E 
0e988     4C 2C 0C 0C 
0e98c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
0e990     1E 00 00 00 
0e994     30 18 00 3E 
0e998     63 63 06 1C 
0e99c     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0e9a0     3E 00 00 00 
0e9a4     00 00 60 30 
0e9a8     18 00 3E 63 
0e9ac     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
0e9b0     3E 00 00 00 
0e9b4     00 63 00 3E 
0e9b8     63 63 63 63 
0e9bc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0e9c0     3E 00 00 00 
0e9c4     00 63 00 63 
0e9c8     63 63 63 63 
0e9cc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0e9d0     3E 00 00 00 
0e9d4     6C 38 00 7E 
0e9d8     7E 5A 18 18 
0e9dc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0e9e0     3C 00 00 00 
0e9e4     00 00 60 48 
0e9e8     2C 0C 3F 0C 
0e9ec     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0e9f0     38 00 00 00 
0e9f4     00 00 00 0F 
0e9f8     26 36 1E 0E 
0e9fc     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
0ea00     7F 00 00 00 
0ea04     00 00 00 00 
0ea08     00 63 36 1C 
0ea0c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
0ea10     00 00 00 00 
0ea14     00 00       | 	byte	$00[6]
0ea16     36 1C 08 00 
0ea1a     3E 63 03 03 
0ea1e     03 63 3E 00 
0ea22     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0ea26     30 18 0C 00 
0ea2a     1E 30 3E 33 
0ea2e     33 33 6E 00 
0ea32     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0ea36     60 30 18 00 
0ea3a     1C 18 18 18 
0ea3e     18 18 3C 00 
0ea42     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0ea46     60 30 18 00 
0ea4a     3E 63 63 63 
0ea4e     63 63 3E 00 
0ea52     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0ea56     30 18 0C 00 
0ea5a     33 33 33 33 
0ea5e     33 33 6E 00 
0ea62     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0ea66     00 08 1C 36 
0ea6a     63 63 7F 63 
0ea6e     63 63 63 18 
0ea72     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0ea76     00 00 00 00 
0ea7a     1E 30 3E 33 
0ea7e     33 33 6E 18 
0ea82     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0ea86     00 7F 63 61 
0ea8a     30 18 0C 06 
0ea8e     43 63 7F 00 
0ea92     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0ea96     36 1C 08 00 
0ea9a     7F 33 18 0C 
0ea9e     06 63 7F 00 
0eaa2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
0eaa6     00 7F 66 46 
0eaaa     16 1E 16 06 
0eaae     46 66 7F 18 
0eab2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0eab6     00 00 00 00 
0eaba     3E 63 7F 03 
0eabe     03 63 3E 18 
0eac2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0eac6     00 3C 66 03 
0eaca     1F 03 0F 03 
0eace     03 66 3C 00 
0ead2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0ead6     60 30 18 00 
0eada     7F 33 18 0C 
0eade     06 63 7F 00 
0eae2     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0eae6     00 3C 66 43 
0eaea     03 03 03 03 
0eaee     43 66 3C 00 
0eaf2     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0eaf6     00 00 00 00 
0eafa     3E 63 06 1C 
0eafe     30 63 3E 18 
0eb02     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0eb06     00 00 00 00 
0eb0a     00 00       | 	byte	$00[6]
0eb0c     6C 36 1B 36 
0eb10     6C 00 00 00 
0eb14     00 00 00 00 
0eb18     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0eb1c     1B 36 6C 36 
0eb20     1B 00 00 00 
0eb24     88 22 88 22 
0eb28     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
0eb2c     88 22 88 22 
0eb30     88 22 88 22 
0eb34     AA 55 AA 55 
0eb38     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
0eb3c     AA 55 AA 55 
0eb40     AA 55 AA 55 
0eb44     BB EE BB EE 
0eb48     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
0eb4c     BB EE BB EE 
0eb50     BB EE BB EE 
0eb54     18 18 18 18 
0eb58     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
0eb5c     18 18 18 18 
0eb60     18 18 18 18 
0eb64     18 18 18 18 
0eb68     18 18 18    | 	byte	$18[15]
0eb6b     1F 18 18 18 
0eb6f     18 18 18 18 
0eb73     18 30 18 00 
0eb77     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0eb7b     63 7F 63 63 
0eb7f     63 63 00 00 
0eb83     00 1C 36 00 
0eb87     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
0eb8b     63 7F 63 63 
0eb8f     63 63 00 00 
0eb93     00 36 1C 00 
0eb97     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0eb9b     1E 16 06 46 
0eb9f     66 7F 00 00 
0eba3     00 00 00 00 
0eba7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
0ebab     1C 30 60 63 
0ebaf     63 3E 18 30 
0ebb3     1E 6C 6C 6C 
0ebb7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
0ebbb     6F 6C 6C 6C 
0ebbf     6C 6C 6C 6C 
0ebc3     6C 6C 6C 6C 
0ebc7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0ebcb     6C 6C 6C 6C 
0ebcf     6C 6C 6C 6C 
0ebd3     6C          | 	byte	$6c[9]
0ebd4     00 00 00 00 
0ebd8     00          | 	byte	$00[5]
0ebd9     7F 60 6F 6C 
0ebdd     6C 6C 6C 6C 
0ebe1     6C 6C 6C 6C 
0ebe5     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0ebe9     6F 60 7F 00 
0ebed     00 00 00 00 
0ebf1     00 00 00 18 
0ebf5     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
0ebf9     61 30 18 0C 
0ebfd     06 43 63 7F 
0ec01     00 00 00 00 
0ec05     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
0ec09     00 7F 33 18 
0ec0d     0C 06 63 7F 
0ec11     00 00 00 00 
0ec15     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
0ec19     00 00 1F 18 
0ec1d     18 18 18 18 
0ec21     18 18 18 18 
0ec25     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0ec29     18 18 F8 00 
0ec2d     00 00 00 00 
0ec31     00 00 00 18 
0ec35     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0ec39     18 18 FF 00 
0ec3d     00 00 00 00 
0ec41     00 00 00 00 
0ec45     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ec49     00 00 FF 18 
0ec4d     18 18 18 18 
0ec51     18 18 18 18 
0ec55     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0ec59     18 18 F8 18 
0ec5d     18 18 18 18 
0ec61     18 18 18 00 
0ec65     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0ec69     00 00 FF 00 
0ec6d     00 00 00 00 
0ec71     00 00 00 18 
0ec75     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0ec79     18 18 FF 18 
0ec7d     18 18 18 18 
0ec81     18 18 18 63 
0ec85     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
0ec89     36 63 63 7F 
0ec8d     63 63 63 63 
0ec91     00 00 00 00 
0ec95     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0ec99     00 1E 30 3E 
0ec9d     33 33 33 6E 
0eca1     00 00 00 6C 
0eca5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0eca9     EC 0C FC 00 
0ecad     00 00 00 00 
0ecb1     00 00 00 00 
0ecb5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ecb9     FC 0C EC 6C 
0ecbd     6C 6C 6C 6C 
0ecc1     6C 6C 6C 6C 
0ecc5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0ecc9     EF 00 FF 00 
0eccd     00 00 00 00 
0ecd1     00 00 00 00 
0ecd5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ecd9     FF 00 EF 6C 
0ecdd     6C 6C 6C 6C 
0ece1     6C 6C 6C 6C 
0ece5     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0ece9     EC 0C EC 6C 
0eced     6C 6C 6C 6C 
0ecf1     6C 6C 6C 00 
0ecf5     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0ecf9     FF 00 FF 00 
0ecfd     00 00 00 00 
0ed01     00 00 00 6C 
0ed05     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0ed09     EF 00 EF 6C 
0ed0d     6C 6C 6C 6C 
0ed11     6C 6C 6C 00 
0ed15     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0ed19     63 3E 63 63 
0ed1d     63 63 3E 63 
0ed21     00 00 00 00 
0ed25     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
0ed29     30 3C 36 33 
0ed2d     33 33 33 6E 
0ed31     00 00 00 00 
0ed35     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
0ed39     66 66 6F 66 
0ed3d     66 66 36 1F 
0ed41     00 00 00 36 
0ed45     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
0ed49     66 66 66 66 
0ed4d     66 66       | 	byte	$66[6]
0ed4f     36 1F 00 00 
0ed53     00 00 63 00 
0ed57     7F 66 46 16 
0ed5b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0ed5f     66 7F 00 00 
0ed63     00 6C 38 00 
0ed67     38 30 30 3C 
0ed6b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
0ed6f     33 6E 00 00 
0ed73     00 36 1C 00 
0ed77     63 67 6F 7F 
0ed7b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
0ed7f     63 63 00 00 
0ed83     00 30 18 00 
0ed87     3C 18 18 18 
0ed8b     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
0ed8f     18 3C 00 00 
0ed93     00 3C 66 00 
0ed97     3C 18 18 18 
0ed9b     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
0ed9f     18 3C 00 00 
0eda3     00 00 00 36 
0eda7     1C 08 00 3E 
0edab     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
0edaf     63 3E 00 00 
0edb3     00 18 18 18 
0edb7     18 18 18 18 
0edbb     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
0edbf     00 00 00 00 
0edc3     00 00 00 00 
0edc7     00 00 00 00 | 	byte	$00[12]
0edcb     F8 18 18 18 
0edcf     18 18 18 18 
0edd3     18 FF FF FF 
0edd7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0eddb     FF FF FF FF 
0eddf     FF FF FF FF 
0ede3     FF          | 	byte	$ff[9]
0ede4     00 00 00 00 
0ede8     00 00 00    | 	byte	$00[7]
0edeb     FF FF FF FF 
0edef     FF FF FF FF 
0edf3     FF          | 	byte	$ff[9]
0edf4     00 00 00 7E 
0edf8     7E 5A 18 18 
0edfc     18 18 18 18 
0ee00     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0ee04     1C 36 1C 63 
0ee08     63 63 63 63 
0ee0c     63 63 63 63 
0ee10     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0ee14     FF FF FF FF 
0ee18     FF FF FF    | 	byte	$ff[7]
0ee1b     00 00 00 00 
0ee1f     00 00 00 00 
0ee23     00          | 	byte	$00[9]
0ee24     30 18 00 3E 
0ee28     63 63 63 63 
0ee2c     63 63 63 63 
0ee30     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0ee34     00 00 00 1E 
0ee38     33 33 33 1B 
0ee3c     33 63 63 63 
0ee40     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
0ee44     1C 36 00 3E 
0ee48     63 63 63 63 
0ee4c     63 63 63 63 
0ee50     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0ee54     30 18 00 63 
0ee58     67 6F 7F 7B 
0ee5c     73 63 63 63 
0ee60     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
0ee64     00 00 60 30 
0ee68     18 00 3B 66 
0ee6c     66 66 66 66 
0ee70     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0ee74     00 00 36 1C 
0ee78     08 00 3B 66 
0ee7c     66 66 66 66 
0ee80     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0ee84     36 1C 00 3E 
0ee88     63 63 06 1C 
0ee8c     30 60 63 63 
0ee90     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
0ee94     00 00 36 1C 
0ee98     08 00 3E 63 
0ee9c     06 1C 30 63 
0eea0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
0eea4     30 18 00 3F 
0eea8     66 66 66 3E 
0eeac     36 66 66 66 
0eeb0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
0eeb4     30 18 00 63 
0eeb8     63 63 63 63 
0eebc     63 63 63 63 
0eec0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0eec4     00 00 60 30 
0eec8     18 00 3B 6E 
0eecc     66 06 06 06 
0eed0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
0eed4     66 33 00 63 
0eed8     63 63 63 63 
0eedc     63 63 63 63 
0eee0     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0eee4     00 00 60 30 
0eee8     18 00 63 63 
0eeec     63 63 63 63 
0eef0     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
0eef4     30 18 00 66 
0eef8     66 66 66 3C 
0eefc     18 18 18 18 
0ef00     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
0ef04     00 00 00 08 
0ef08     0C 0C 3F 0C 
0ef0c     0C 0C 0C 6C 
0ef10     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
0ef14     30 18 00 00 
0ef18     00 00 00 00 
0ef1c     00 00 00 00 
0ef20     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ef24     00 00 00 00 
0ef28     00 00 00 00 | 	byte	$00[8]
0ef2c     7F 00 00 00 
0ef30     00 00 00 00 
0ef34     66 33 00 00 
0ef38     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
0ef3c     00 00 00 00 
0ef40     00 00 00 00 
0ef44     00 00 00 00 
0ef48     00 00 00 00 
0ef4c     00 00 00 00 
0ef50     00          | 	byte	$00[21]
0ef51     0C 06 3C 36 
0ef55     1C 00 00 00 
0ef59     00 00 00 00 
0ef5d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ef61     00 00 00 63 
0ef65     3E 00 00 00 
0ef69     00 00 00 00 
0ef6d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ef71     00 00 00 00 
0ef75     3E 63 06 1C 
0ef79     36 63 63 36 
0ef7d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
0ef81     00 00 00 00 
0ef85     00 00 00 00 | 	byte	$00[8]
0ef89     18 00 7E 00 
0ef8d     18 00 00 00 
0ef91     00 00 00 00 
0ef95     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ef99     00 00 00 00 
0ef9d     00 00 00 00 | 	byte	$00[8]
0efa1     18 30 1E 00 
0efa5     00 00 1C 36 
0efa9     36 1C 00 00 
0efad     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
0efb1     00 00 00 00 
0efb5     63 00 00 00 
0efb9     00 00 00 00 
0efbd     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0efc1     00 00 00 18 
0efc5     18 00 00 00 
0efc9     00 00 00 00 
0efcd     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0efd1     00 00 00 00 
0efd5     00          | 	byte	$00[5]
0efd6     CC 66 33 00 
0efda     33 33 33 33 
0efde     33 33 6E 00 
0efe2     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
0efe6     00 3F 66 66 
0efea     66 3E 36 66 
0efee     66 66 6F 00 
0eff2     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
0eff6     36 1C 08 00 
0effa     3B 6E 66 06 
0effe     06 06 0F 00 
0f002     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0f006     00 00 00 7E 
0f00a     7E 7E 7E 7E 
0f00e     7E 7E 00 00 
0f012     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0f016     00 00 00 00 
0f01a     00 00 00 00 
0f01e     00 00 00 00 
0f022     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f024     00 00 00 00 
      ...             
0f054     00 00 00 00 
0f058     00 00 00    | st_font        file "st4font.def"
0f05b     FF FF 00 00 
0f05f     00 00 00 00 
0f063     00 18 18 18 
0f067     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0f06b     18 18 18 18 
0f06f     18 18 18 18 
0f073     18          | 	byte	$18[9]
0f074     00 00 00 00 
0f078     00 00 00    | 	byte	$00[7]
0f07b     FF FF 18 18 
0f07f     18 18 18 18 
0f083     18 18 18 18 
0f087     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0f08b     FF FF 00 00 
0f08f     00 00 00 00 
0f093     00 18 18 18 
0f097     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0f09b     1F 1F 18 18 
0f09f     18 18 18 18 
0f0a3     18 18 18 18 
0f0a7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0f0ab     F8 F8 18 18 
0f0af     18 18 18 18 
0f0b3     18 00 00 00 
0f0b7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0f0bb     1F 1F 18 18 
0f0bf     18 18 18 18 
0f0c3     18 00 00 00 
0f0c7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0f0cb     F8 F8 18 18 
0f0cf     18 18 18 18 
0f0d3     18 18 18 18 
0f0d7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0f0db     1F 1F 00 00 
0f0df     00 00 00 00 
0f0e3     00 18 18 18 
0f0e7     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0f0eb     F8 F8 00 00 
0f0ef     00 00 00 00 
0f0f3     00 18 18 18 
0f0f7     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0f0fb     FF FF 18 18 
0f0ff     18 18 18 18 
0f103     18 00 00 18 
0f107     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
0f10b     66 7E 7E 66 
0f10f     66 66 66 30 
0f113     18 00 00 7E 
0f117     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
0f11b     3E 06 06 06 
0f11f     06 7E 7E 18 
0f123     0C 30 18 3C 
0f127     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
0f12b     06 06 06 66 
0f12f     66 7E 3C 00 
0f133     00 30 18 66 
0f137     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
0f13b     7E 7E 76 76 
0f13f     66 66 66 00 
0f143     00 30 18 7C 
0f147     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
0f14b     1C 38 70 60 
0f14f     60 7E 3E 00 
0f153     00 30 18 7E 
0f157     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
0f15b     18 0C 0C 06 
0f15f     06 7E 7E 00 
0f163     00 18 18 00 
0f167     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
0f16b     18 18 0C 0C 
0f16f     06 7E 7E 00 
0f173     00 30 18 3C 
0f177     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
0f17b     66 66 66 66 
0f17f     66          | 	byte	$66[5]
0f180     7E 3C 00 00 
0f184     00 00 06 06 
0f188     06 06 16 1E 
0f18c     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
0f190     7E 7E 00 00 
0f194     00 00 00 00 
0f198     00 3C 7C 60 
0f19c     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
0f1a0     7E 7C 30 18 
0f1a4     00 00 00 00 
0f1a8     00 3C 7E 66 
0f1ac     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
0f1b0     7E 7C 18 0C 
0f1b4     00 00 30 18 
0f1b8     00 3C 3E 06 
0f1bc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
0f1c0     7E 7C 00 00 
0f1c4     00 00 30 18 
0f1c8     00 3E 7E 66 
0f1cc     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
0f1d0     66 66 00 00 
0f1d4     00 00 30 18 
0f1d8     00 7C 7E 06 
0f1dc     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
0f1e0     7E 3E 00 00 
0f1e4     00 00 30 18 
0f1e8     00 7E 7E 30 
0f1ec     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0f1f0     7E 7E 00 00 
0f1f4     00 00 18 18 
0f1f8     00 7E 7E 30 
0f1fc     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0f200     7E 7E 00 00 
0f204     00 00 30 18 
0f208     00 3C 7E 66 
0f20c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
0f210     7E 3C 00 00 
0f214     00 00 1C 1C 
0f218     18 18 38 3C 
0f21c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
0f220     3C 3C 00 00 
0f224     00 00 00 00 
0f228     00 00 00 00 
0f22c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f230     00 00 00 00 
0f234     00 00       | 	byte	$00[6]
0f236     18 18 18 18 
0f23a     18 18 18 18 | 	byte	$18[8]
0f23e     00 00 18 18 
0f242     00 00 00 00 
0f246     66 66 66 66 
0f24a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
0f24e     00 00 00 00 
0f252     00 00 00 00 
0f256     00          | 	byte	$00[9]
0f257     66 66 FF FF 
0f25b     66 66 FF FF 
0f25f     66 66 00 00 
0f263     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
0f267     7C 7E 06 06 
0f26b     3E 7C 60 60 
0f26f     7E 3E 18 18 
0f273     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
0f277     66 30 30 18 
0f27b     18 0C 0C 66 
0f27f     66 00 00 00 
0f283     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
0f287     66 66 3C 1C 
0f28b     1C FC FE 66 
0f28f     66 FE FC 00 
0f293     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
0f297     18 18 18 18 
0f29b     00 00 00 00 
0f29f     00 00 00 00 
0f2a3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
0f2a7     18 1C 0C 0C 
0f2ab     0C 0C 0C 0C 
0f2af     1C 18 30 00 
0f2b3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
0f2b7     18 38 30 30 
0f2bb     30 30 30 30 
0f2bf     38 18 0C 00 
0f2c3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
0f2c7     66 66 3C 3C 
0f2cb     FF FF 3C 3C 
0f2cf     66 66 00 00 
0f2d3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
0f2d7     00 18 18 18 
0f2db     7E 7E 18 18 
0f2df     18 00 00 00 
0f2e3     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0f2e7     00 00 00 00 
0f2eb     00 00       | 	byte	$00[6]
0f2ed     18 18 18 18 
0f2f1     18          | 	byte	$18[5]
0f2f2     0C 04 00 00 
0f2f6     00 00 00 00 
0f2fa     7E 7E 00 00 
0f2fe     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
0f302     00 00 00 00 
0f306     00 00 00 00 
0f30a     00 00 00 00 
0f30e     00          | 	byte	$00[13]
0f30f     18 18 18 00 
0f313     00 00 00 60 
0f317     60 60 30 30 
0f31b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
0f31f     06 06 06 00 
0f323     00 00 00 3C 
0f327     7E 66 66 66 
0f32b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
0f32f     66 7E 3C 00 
0f333     00 00 00 18 
0f337     18 1C 1C 18 
0f33b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
0f33f     18 7E 7E 00 
0f343     00 00 00 3C 
0f347     7E 66 66 30 
0f34b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
0f34f     0C 7E 7E 00 
0f353     00 00 00 7E 
0f357     7E 30 30 18 
0f35b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
0f35f     66 7E 3C 00 
0f363     00 00 00 30 
0f367     30 38 38 3C 
0f36b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
0f36f     7E 30 30 00 
0f373     00 00 00 7E 
0f377     7E 06 06 3E 
0f37b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
0f37f     66 7E 3C 00 
0f383     00 00 00 38 
0f387     3C 0E 06 06 
0f38b     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
0f38f     66 7E 3C 00 
0f393     00 00 00 7E 
0f397     7E 60 60 30 
0f39b     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
0f39f     0C 0C 0C 00 
0f3a3     00 00 00 3C 
0f3a7     7E 66 66 3C 
0f3ab     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
0f3af     66 7E 3C 00 
0f3b3     00 00 00 3C 
0f3b7     7E 66 66 7E 
0f3bb     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
0f3bf     70 3C 1C 00 
0f3c3     00 00 00 00 
0f3c7     00 00 18 18 
0f3cb     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
0f3cf     18 18 18 00 
0f3d3     00 00 00 00 
0f3d7     00 00 18 18 
0f3db     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
0f3df     18 18 18 0C 
0f3e3     04 00 00 00 
0f3e7     70 38 1C 0E 
0f3eb     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
0f3ef     70 00 00 00 
0f3f3     00 00 00 00 
0f3f7     00 00 7E 7E 
0f3fb     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
0f3ff     00 00 00 00 
0f403     00 00 00 00 | 	byte	$00[8]
0f407     0E 1C 38 70 
0f40b     E0 70 38 1C 
0f40f     0E 00 00 00 
0f413     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
0f417     7E 66 66 30 
0f41b     30 18 18 18 
0f41f     00 18 18 00 
0f423     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
0f427     7E 66 66 66 
0f42b     66 36 06 66 
0f42f     66 7E 3C 00 
0f433     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
0f437     3C 7E 66 66 
0f43b     66 7E 7E 66 
0f43f     66 66 66 00 
0f443     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
0f447     7E 66 66 7E 
0f44b     3E 66 66 66 
0f44f     66 7E 3E 00 
0f453     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
0f457     7E 66 66 06 
0f45b     06 06 06 66 
0f45f     66 7E 3C 00 
0f463     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
0f467     7E 66 66 66 
0f46b     66 66 66 66 
0f46f     66 7E 3E 00 
0f473     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
0f477     7E 06 06 3E 
0f47b     3E 06 06 06 
0f47f     06 7E 7E 00 
0f483     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
0f487     7E 06 06 3E 
0f48b     3E 06 06 06 
0f48f     06 06 06 00 
0f493     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
0f497     7E 06 06 76 
0f49b     76 66 66 66 
0f49f     66 7E 3C 00 
0f4a3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
0f4a7     66 66 66 7E 
0f4ab     7E 66 66 66 
0f4af     66 66 66 00 
0f4b3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
0f4b7     7E 18 18 18 
0f4bb     18 18 18 18 
0f4bf     18 7E 7E 00 
0f4c3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0f4c7     60 60 60 60 
0f4cb     60 60 60    | 	byte	$60[7]
0f4ce     66 66 7E 3C 
0f4d2     00 00 00 00 
0f4d6     66 66 36 36 
0f4da     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
0f4de     66 66 C6 C6 
0f4e2     00 00 00 00 
0f4e6     06 06 06 06 
0f4ea     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0f4ee     06 06 7E 7E 
0f4f2     00 00 00 00 
0f4f6     C6 C6 EE EE 
0f4fa     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0f4fe     C6 C6 C6 C6 
0f502     00 00 00 00 
0f506     66 66 66 6E 
0f50a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0f50e     76 66 66 66 
0f512     00 00 00 00 
0f516     3C 7E 66 66 
0f51a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0f51e     66 66 7E 3C 
0f522     00 00 00 00 
0f526     3E 7E 66 66 
0f52a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0f52e     06 06 06 06 
0f532     00 00 00 00 
0f536     3C 7E 66 66 
0f53a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0f53e     66 56 3E 6C 
0f542     00 00 00 00 
0f546     3E 7E 66 66 
0f54a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0f54e     66 66 C6 C6 
0f552     00 00 00 00 
0f556     7C 7E 06 06 
0f55a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0f55e     60 60 7E 3E 
0f562     00 00 00 00 
0f566     7E 7E 18 18 
0f56a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
0f56e     18 18 18 18 
0f572     00 00 00 00 
0f576     66 66 66 66 
0f57a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0f57e     66 66 7E 3C 
0f582     00 00 00 00 
0f586     66 66 66 66 
0f58a     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0f58e     3C 3C 18 18 
0f592     00 00 00 00 
0f596     C6 C6 C6 C6 
0f59a     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
0f59e     FE EE C6 82 
0f5a2     00 00 00 00 
0f5a6     66 66 66 3C 
0f5aa     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
0f5ae     3C 66 66 66 
0f5b2     00 00 00 00 
0f5b6     66 66 66 66 
0f5ba     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
0f5be     18 18 18 18 
0f5c2     00 00 00 00 
0f5c6     7E 7E 30 30 
0f5ca     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
0f5ce     06 06 7E 7E 
0f5d2     00 00 00 00 
0f5d6     3C 3C 0C 0C 
0f5da     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
0f5de     0C 0C 3C 3C 
0f5e2     00 00 00 00 
0f5e6     06 06 0C 0C 
0f5ea     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0f5ee     60 60 C0 C0 
0f5f2     00 00 00 00 
0f5f6     3C 3C 30 30 
0f5fa     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0f5fe     30 30 3C 3C 
0f602     00 00 00 00 
0f606     18 18 3C 3C 
0f60a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0f60e     00 00 00 00 
0f612     00 00 00 00 
0f616     00 00 00 00 
0f61a     00 00 00 00 
0f61e     00 00       | 	byte	$00[18]
0f620     FE FE 00 00 
0f624     00 00 0C 0C 
0f628     18 18 00 00 
0f62c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
0f630     00 00 00 00 
0f634     00 00 00 00 
0f638     00          | 	byte	$00[9]
0f639     3C 7C 60 7C 
0f63d     7E 66 66 7E 
0f641     7C 00 00 00 
0f645     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
0f649     3E 7E 66 66 
0f64d     66 66 66 7E 
0f651     3E 00 00 00 
0f655     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
0f659     3C 3E 06 06 
0f65d     06 06 06 7E 
0f661     7C 00 00 00 
0f665     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
0f669     7C 7E 66 66 
0f66d     66 66 66 7E 
0f671     7C 00 00 00 
0f675     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
0f679     3C 7E 66 66 
0f67d     7E 06 06 7E 
0f681     7C 00 00 00 
0f685     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
0f689     18 7E 7E 18 
0f68d     18 18 18 18 
0f691     18 00 00 00 
0f695     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0f699     7C 7E 66 66 
0f69d     66 66 7E 7C 
0f6a1     60 7E 3E 00 
0f6a5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
0f6a9     3E 7E 66 66 
0f6ad     66 66 66 66 
0f6b1     66 00 00 00 
0f6b5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
0f6b9     1C 1C 18 18 
0f6bd     18 18 18 3C 
0f6c1     3C 00 00 00 
0f6c5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
0f6c9     30 30 30 30 
0f6cd     30 30 30 30 
0f6d1     30          | 	byte	$30[9]
0f6d2     3E 1E 00 00 
0f6d6     06 06 06 36 
0f6da     36 1E 1E 1E 
0f6de     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
0f6e2     00 00 00 00 
0f6e6     1C 1C 18 18 
0f6ea     18 18 18 18 
0f6ee     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0f6f2     00 00 00 00 
0f6f6     00 00 00    | 	byte	$00[7]
0f6f9     6C FE FE D6 
0f6fd     D6 C6 C6 C6 
0f701     C6 00 00 00 
0f705     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
0f709     3E 7E 66 66 
0f70d     66 66 66 66 
0f711     66 00 00 00 
0f715     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
0f719     3C 7E 66 66 
0f71d     66 66 66 7E 
0f721     3C 00 00 00 
0f725     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
0f729     3E 7E 66 66 
0f72d     66 66 66 7E 
0f731     3E 06 06 00 
0f735     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
0f739     7C 7E 66 66 
0f73d     66 66 66 7E 
0f741     7C 60 60 00 
0f745     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
0f749     3E 7E 66 06 
0f74d     06 06 06 06 
0f751     06 00 00 00 
0f755     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
0f759     7C 7E 06 0E 
0f75d     3C 70 60 7E 
0f761     3E 00 00 00 
0f765     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
0f769     7E 7E 18 18 
0f76d     18 18 18 78 
0f771     70 00 00 00 
0f775     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
0f779     66 66 66 66 
0f77d     66 66 66    | 	byte	$66[7]
0f780     7E 7C 00 00 
0f784     00 00 00 00 
0f788     00 66 66 66 
0f78c     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
0f790     18 18 00 00 
0f794     00 00 00 00 
0f798     00 C6 C6 D6 
0f79c     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
0f7a0     C6 82 00 00 
0f7a4     00 00 00 00 
0f7a8     00 66 66 3C 
0f7ac     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
0f7b0     66 66 00 00 
0f7b4     00 00 00 00 
0f7b8     00 66 66 66 
0f7bc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
0f7c0     7C 60 7E 3E 
0f7c4     00 00 00 00 
0f7c8     00 7E 7E 30 
0f7cc     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0f7d0     7E 7E 00 00 
0f7d4     00 00 30 18 
0f7d8     18 18 18 0C 
0f7dc     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
0f7e0     18 30 00 00 
0f7e4     00 00 18 18 
0f7e8     18 18 18 18 
0f7ec     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0f7f0     18 18 00 00 
0f7f4     00 00 0C 18 
0f7f8     18 18 18 30 
0f7fc     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
0f800     18 0C 00 00 
0f804     00 00 6C 7E 
0f808     36 00 00 00 
0f80c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
0f810     00 00 00 00 
0f814     00 00 00 00 
0f818     00          | 	byte	$00[9]
0f819     18 18 18 18 
0f81d     18 18 00 00 
0f821     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0f824     00 00 00 00 
0f828     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
0f82c     00 00 00 00 
0f830     00 80 80 80 
0f834     00 00 00 FF 
0f838     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
0f83c     00 00 00 00 
0f840     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
0f841     80 00 00 00 
0f845     00 80 00 00 
0f849     80 80 00 00 
0f84d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
0f851     80 00 80 00 
0f855     00 40 80 00 
0f859     AA AA AA 00 
0f85d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
0f861     FF 00 00 00 
0f865     00 FF 00 00 
0f869     FF FF 00 00 
0f86d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
0f871     FF 00 FF 00 
0f875     00 FF FF 00 
0f879     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
0f87c     00 00 00 00 
0f880     00          | ataripalette   file "ataripalettep2.def"
0f881     11 11 11 00 
0f885     22 22 22 00 
0f889     33 33 33 00 
0f88d     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
0f891     55 55 55 00 
0f895     66 66 66 00 
0f899     77 77 77 00 
0f89d     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
0f8a1     99 99 99 00 
0f8a5     AA AA AA 00 
0f8a9     BB BB BB 00 
0f8ad     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
0f8b1     DD DD DD 00 
0f8b5     EE EE EE 00 
0f8b9     FF FF FF 00 
0f8bd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
0f8c1     00 14 40 00 
0f8c5     00 1E 60 00 
0f8c9     00 28 80 00 
0f8cd     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
0f8d1     00 3C BF 00 
0f8d5     00 46 DF 00 
0f8d9     00 50 FF 00 
0f8dd     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
0f8e1     39 77 FF 00 
0f8e5     55 8A FF 00 
0f8e9     71 9E FF 00 
0f8ed     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
0f8f1     AA C5 FF 00 
0f8f5     C6 D8 FF 00 
0f8f9     E3 EC FF 00 
0f8fd     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
0f901     00 00 40 00 
0f905     00 00 60 00 
0f909     00 00 80 00 
0f90d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
0f911     00 00 BF 00 
0f915     00 00 DF 00 
0f919     00 00 FF 00 
0f91d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
0f921     39 39 FF 00 
0f925     55 55 FF 00 
0f929     71 71 FF 00 
0f92d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
0f931     AA AA FF 00 
0f935     C6 C6 FF 00 
0f939     E3 E3 FF 00 
0f93d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
0f941     20 00 40 00 
0f945     30 00 60 00 
0f949     40 00 80 00 
0f94d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
0f951     60 00 BF 00 
0f955     70 00 DF 00 
0f959     80 00 FF 00 
0f95d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
0f961     9C 39 FF 00 
0f965     AA 55 FF 00 
0f969     B8 71 FF 00 
0f96d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
0f971     D5 AA FF 00 
0f975     E3 C6 FF 00 
0f979     F1 E3 FF 00 
0f97d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
0f981     40 00 40 00 
0f985     60 00 60 00 
0f989     80 00 80 00 
0f98d     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
0f991     BF 00 BF 00 
0f995     DF 00 DF 00 
0f999     FF 00 FF 00 
0f99d     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
0f9a1     FF 39 FF 00 
0f9a5     FF 55 FF 00 
0f9a9     FF 71 FF 00 
0f9ad     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
0f9b1     FF AA FF 00 
0f9b5     FF C6 FF 00 
0f9b9     FF E3 FF 00 
0f9bd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
0f9c1     40 00 20 00 
0f9c5     60 00 30 00 
0f9c9     80 00 40 00 
0f9cd     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
0f9d1     BF 00 60 00 
0f9d5     DF 00 70 00 
0f9d9     FF 00 80 00 
0f9dd     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
0f9e1     FF 39 9C 00 
0f9e5     FF 55 AA 00 
0f9e9     FF 71 B8 00 
0f9ed     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
0f9f1     FF AA D5 00 
0f9f5     FF C6 E3 00 
0f9f9     FF E3 F1 00 
0f9fd     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
0fa01     40 00 00 00 
0fa05     60 00 00 00 
0fa09     80 00 00 00 
0fa0d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
0fa11     BF 00 00 00 
0fa15     DF 00 00 00 
0fa19     FF 00 00 00 
0fa1d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
0fa21     FF 39 39 00 
0fa25     FF 55 55 00 
0fa29     FF 71 71 00 
0fa2d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
0fa31     FF AA AA 00 
0fa35     FF C6 C6 00 
0fa39     FF E3 E3 00 
0fa3d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
0fa41     40 10 00 00 
0fa45     60 18 00 00 
0fa49     80 20 00 00 
0fa4d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
0fa51     BF 30 00 00 
0fa55     DF 38 00 00 
0fa59     FF 40 00 00 
0fa5d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
0fa61     FF 6A 39 00 
0fa65     FF 80 55 00 
0fa69     FF 95 71 00 
0fa6d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
0fa71     FF BF AA 00 
0fa75     FF D5 C6 00 
0fa79     FF EA E3 00 
0fa7d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
0fa81     40 20 00 00 
0fa85     60 30 00 00 
0fa89     80 40 00 00 
0fa8d     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
0fa91     BF 60 00 00 
0fa95     DF 70 00 00 
0fa99     FF 80 00 00 
0fa9d     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
0faa1     FF 9C 39 00 
0faa5     FF AA 55 00 
0faa9     FF B8 71 00 
0faad     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
0fab1     FF D5 AA 00 
0fab5     FF E3 C6 00 
0fab9     FF F1 E3 00 
0fabd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
0fac1     40 30 00 00 
0fac5     60 48 00 00 
0fac9     80 60 00 00 
0facd     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
0fad1     BF 90 00 00 
0fad5     DF A8 00 00 
0fad9     FF C0 00 00 
0fadd     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
0fae1     FF CE 39 00 
0fae5     FF D5 55 00 
0fae9     FF DC 71 00 
0faed     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
0faf1     FF EA AA 00 
0faf5     FF F1 C6 00 
0faf9     FF F8 E3 00 
0fafd     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
0fb01     30 40 00 00 
0fb05     48 60 00 00 
0fb09     60 80 00 00 
0fb0d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
0fb11     90 BF 00 00 
0fb15     A8 DF 00 00 
0fb19     C0 FF 00 00 
0fb1d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
0fb21     CE FF 39 00 
0fb25     D5 FF 55 00 
0fb29     DC FF 71 00 
0fb2d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
0fb31     EA FF AA 00 
0fb35     F1 FF C6 00 
0fb39     F8 FF E3 00 
0fb3d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
0fb41     00 40 00 00 
0fb45     00 60 00 00 
0fb49     00 80 00 00 
0fb4d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
0fb51     00 BF 00 00 
0fb55     00 DF 00 00 
0fb59     00 FF 00 00 
0fb5d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
0fb61     39 FF 39 00 
0fb65     55 FF 55 00 
0fb69     71 FF 71 00 
0fb6d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
0fb71     AA FF AA 00 
0fb75     C6 FF C6 00 
0fb79     E3 FF E3 00 
0fb7d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
0fb81     00 40 14 00 
0fb85     00 60 1E 00 
0fb89     00 80 28 00 
0fb8d     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
0fb91     00 BF 3C 00 
0fb95     00 DF 46 00 
0fb99     00 FF 50 00 
0fb9d     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
0fba1     39 FF 77 00 
0fba5     55 FF 8A 00 
0fba9     71 FF 9E 00 
0fbad     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
0fbb1     AA FF C5 00 
0fbb5     C6 FF D8 00 
0fbb9     E3 FF EC 00 
0fbbd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
0fbc1     00 40 28 00 
0fbc5     00 60 3C 00 
0fbc9     00 80 50 00 
0fbcd     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
0fbd1     00 BF 78 00 
0fbd5     00 DF 8C 00 
0fbd9     00 FF A0 00 
0fbdd     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
0fbe1     39 FF B5 00 
0fbe5     55 FF C0 00 
0fbe9     71 FF CA 00 
0fbed     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
0fbf1     AA FF DF 00 
0fbf5     C6 FF EA 00 
0fbf9     E3 FF F4 00 
0fbfd     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
0fc01     00 40 40 00 
0fc05     00 60 60 00 
0fc09     00 80 80 00 
0fc0d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
0fc11     00 BF BF 00 
0fc15     00 DF DF 00 
0fc19     00 FF FF 00 
0fc1d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
0fc21     39 FF FF 00 
0fc25     55 FF FF 00 
0fc29     71 FF FF 00 
0fc2d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
0fc31     AA FF FF 00 
0fc35     C6 FF FF 00 
0fc39     E3 FF FF 00 
0fc3d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
0fc41     00 28 40 00 
0fc45     00 3C 60 00 
0fc49     00 50 80 00 
0fc4d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
0fc51     00 78 BF 00 
0fc55     00 8C DF 00 
0fc59     00 A0 FF 00 
0fc5d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
0fc61     39 B5 FF 00 
0fc65     55 C0 FF 00 
0fc69     71 CA FF 00 
0fc6d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
0fc71     AA DF FF 00 
0fc75     C6 EA FF 00 
0fc79     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
0fc7c                 | '**********************************************************************************
0fc7c                 | '
0fc7c                 | '        Timings and colors definitions
0fc7c                 | '
0fc7c                 | '**********************************************************************************
0fc7c                 | 
0fc7c                 |    'streamer sets for text mode, to add to timings[0..5]
0fc7c                 | ' todo for the retromachine: 768x576
0fc7c                 | 
0fc7c                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
0fc7c     10 00 00 00 
0fc80     50 00 00 00 
0fc84     14 00 00 00 
0fc88     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0fc8c     70 00 00 00 
0fc90     08 00 00 00 
0fc94     30 00 00 00 
0fc98     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
0fc9c     10 00 00 00 
0fca0     10 00 00 00 
0fca4     00 00 00 00 
0fca8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
0fcac     E0 01 00 00 
0fcb0     F6 32 24 15 
0fcb4     FB 6C C3 01 
0fcb8     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
0fcbc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
0fcbc                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
0fcbc     30 00 00 00 
0fcc0     50 00 00 00 
0fcc4     34 00 00 00 
0fcc8     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
0fccc     20 00 00 00 
0fcd0     08 00 00 00 
0fcd4     16 00 00 00 
0fcd8     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
0fcdc     24 00 00 00 
0fce0     18 00 00 00 
0fce4     40 00 00 00 
0fce8     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
0fcec     F0 01 00 00 
0fcf0     F6 32 24 15 
0fcf4     FB 6C C3 01 
0fcf8     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
0fcfc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
0fcfc     10 00 00 00 
0fd00     40 00 00 00 
0fd04     10 00 00 00 
0fd08     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
0fd0c     08 00 00 00 
0fd10     08 00 00 00 
0fd14     08 00 00 00 
0fd18     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
0fd1c     40 00 00 00 
0fd20     20 00 00 00 
0fd24     80 00 00 00 
0fd28     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
0fd2c     E0 01 00 00 
0fd30     70 AE E9 10 
0fd34     FB 8B FF 01 
0fd38     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
0fd3c     10 00 00 00 
0fd40     42 00 00 00 
0fd44     14 00 00 00 
0fd48     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0fd4c     00 00 00 00 
0fd50     08 00 00 00 
0fd54     00 00 00 00 
0fd58     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
0fd5c     10 00 00 00 
0fd60     10 00 00 00 
0fd64     C0 00 00 00 
0fd68     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
0fd6c     40 02 00 00 
0fd70     F6 32 24 15 
0fd74     FB 6C C3 01 
0fd78     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
0fd7c     50 00 00 00 
0fd80     A0 00 00 00 
0fd84     54 00 00 00 
0fd88     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
0fd8c     08 00 00 00 
0fd90     08 00 00 00 
0fd94     08 00 00 00 
0fd98     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0fd9c     0C 00 00 00 
0fda0     08 00 00 00 
0fda4     00 01 00 00 
0fda8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
0fdac     E0 01 00 00 
0fdb0     10 06 56 15 
0fdb4     FB 64 C3 01 
0fdb8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
0fdbc     50 00 00 00 
0fdc0     32 00 00 00 
0fdc4     50 00 00 00 
0fdc8     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0fdcc     08 00 00 00 
0fdd0     08 00 00 00 
0fdd4     08 00 00 00 
0fdd8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0fddc     0C 00 00 00 
0fde0     08 00 00 00 
0fde4     40 01 00 00 
0fde8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
0fdec     E0 01 00 00 
0fdf0     F2 CD 33 13 
0fdf4     FB 53 92 01 
0fdf8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0fdfc     18 00 00 00 
0fe00     30 00 00 00 
0fe04     18 00 00 00 
0fe08     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
0fe0c     08 00 00 00 
0fe10     08 00 00 00 
0fe14     08 00 00 00 
0fe18     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0fe1c     0C 00 00 00 
0fe20     08 00 00 00 
0fe24     80 01 00 00 
0fe28     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
0fe2c     E0 01 00 00 
0fe30     F4 8F 11 11 
0fe34     FB 3A 55 01 
0fe38     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
0fe3c     20 00 00 00 
0fe40     40 00 00 00 
0fe44     22 00 00 00 
0fe48     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0fe4c     00 00 00 00 
0fe50     08 00 00 00 
0fe54     00 00 00 00 
0fe58     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
0fe5c     0C 00 00 00 
0fe60     08 00 00 00 
0fe64     C0 01 00 00 
0fe68     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
0fe6c     F0 01 00 00 
0fe70     F2 CD 33 13 
0fe74     FB 53 92 01 
0fe78     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0fe7c                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
0fe7c     00 75 C7 97 
0fe80     27 47 F6 0A 
0fe84     05 79 CB 9B 
0fe88     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
0fe8c                 | 
0fe8c     28 12 64 FD | hdmi            setq    #9
0fe90     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
0fe94                 |            '     setq2   #255
0fe94                 |             '    rdlong  $100, paletteptr 
0fe94     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0fe98     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
0fe9c     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
0fea0     78 F9 02 F1 |                 add     ii,hbase
0fea4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
0fea8     7B 0B 80 FF 
0feac     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
0feb0                 | 
0feb0     66 66 86 FF 
0feb4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
0feb8                 | 
0feb8                 | 
0feb8                 | ''--------  frame rendering main loop  ---------------------------------------------------
0feb8                 | 
0feb8                 | p101
0feb8     28 14 64 FD |                 setq    #10
0febc     00 DF 06 FB |                 rdlong  framebuf,  ptra
0fec0     28 1E 64 FD |                 setq    #15
0fec4     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
0fec8     71 99 02 FB |                 rdlong  border,borderptr
0fecc                 | 
0fecc     01 C4 06 F1 |                 add     frames,#1
0fed0     76 F5 02 F6 |                 mov     dlptr2,dlptr
0fed4                 | 
0fed4     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
0fed8     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
0fedc     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
0fee0     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
0fee4                 |  '' up porch
0fee4                 | 
0fee4     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
0fee8     49 FF 02 F6 |                 mov     hsync1,sync_001
0feec     37 A8 46 FB |                 callpa  i_upporch ,#blank
0fef0     72 01 68 FC |                 wrlong  #0,vblankptr
0fef4                 |                 
0fef4     1F EA 16 F4 |                 testb   paletteptr,#31 wc
0fef8     29 FE 65 3D |          if_nc  setq2   #255
0fefc     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
0ff00                 | 
0ff00                 | '' cursor blinking
0ff00                 | 
0ff00     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
0ff04     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
0ff08                 | 
0ff08                 | '' main screen
0ff08                 | 
0ff08     00 BE 06 F6 |                 mov linenum,#0
0ff0c     00 18 07 F6 |                 mov rcnt,#0
0ff10     00 1C 07 F6 |                 mov rcnt2a,#0
0ff14                 | 
0ff14                 | 
0ff14     00 18 0F F2 | p301            cmp rcnt,#0 wz
0ff18     18 00 90 AD |         if_z    jmp #p306
0ff1c     01 18 87 F1 |                 sub rcnt,#1
0ff20     90 F7 02 F6 |                 mov dl,rdl
0ff24     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
0ff28     8F F7 02 A1 |    if_z        add dl,roffset  
0ff2c     7B 21 03 F6 |                 mov rdl,dl
0ff30     04 00 90 FD |                 jmp #p307          
0ff34                 |           
0ff34                 |                 
0ff34     7A F7 02 FB | p306            rdlong  dl,dlptr2
0ff38     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
0ff3c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
0ff40     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
0ff44                 | 
0ff44                 | '' Special entry:
0ff44                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
0ff44                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
0ff44                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
0ff44                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
0ff44                 | '' todo: set horizontal scroll (if needed)
0ff44                 | 
0ff44     02 FA 66 F0 |                 shl framebuf2,#2
0ff48     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
0ff4c     04 22 0F F2 |                 cmp dlc,#%100 wz
0ff50                 |   
0ff50                 |                 
0ff50     04 F4 06 F1 |                 add dlptr2,#4
0ff54     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
0ff58     7A 21 03 FB |                  rdlong rdl,dlptr2
0ff5c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
0ff60     04 18 47 F0 |                  shr rcnt,#4
0ff64                 |              
0ff64     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
0ff68     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
0ff6c                 |                 
0ff6c     04 1E 47 F0 |                  shr roffset,#4
0ff70     0C 1E 67 F0 |                  shl roffset,#12
0ff74                 |   
0ff74     9C FF 9F FD |                  jmp #p301
0ff78                 |                  
0ff78                 |                  
0ff78                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
0ff78     0C FA 46 F0 |                 shr     framebuf2,#12
0ff7c     02 FA 66 F0 |                 shl     framebuf2,#2
0ff80                 | 
0ff80     7B 03 E3 F8 |                 getbyte t1,dl,#0
0ff84     00 02 0F F2 |                 cmp     t1,#0 wz
0ff88     34 00 90 AD |     if_z        jmp     #borderline
0ff8c                 | 
0ff8c     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
0ff90     50 00 90 CD |           if_c   jmp     #textline
0ff94     50 02 90 3D |           if_nc  jmp     #graphline
0ff98                 | '
0ff98     01 BE 06 F1 | p302            add     linenum,#1
0ff9c     04 F4 06 F1 |                 add     dlptr2,#4
0ffa0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
0ffa4     6C FF 9F 5D |          if_nz  jmp     #p301
0ffa8                 | 
0ffa8     72 03 68 FC | p112            wrlong  #1,vblankptr
0ffac     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
0ffb0                 | 
0ffb0     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
0ffb4     4B FF 02 F6 |                 mov     hsync1,sync_223
0ffb8     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
0ffbc     F8 FE 9F FD |                 jmp     #p101
0ffc0                 | 
0ffc0                 | '' ---------------  END of frame rendering loop -------------------------------------------
0ffc0                 | 
0ffc0                 | 
0ffc0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
0ffc4     4C A1 C2 FC |                 xcont   m_vi,border
0ffc8     CC FF 9F FD |                 jmp     #p302
0ffcc                 | 
0ffcc                 | 
0ffcc     08 00 B0 FD | blank           call    #hsync                          'blank lines
0ffd0     7E A1 C2 FC |                 xcont   m_vi,hsync0
0ffd4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
0ffd8                 | 
0ffd8     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
0ffdc     7F 9D B2 FC |                 xzero   m_sn,hsync1
0ffe0     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
0ffe4                 | 
0ffe4                 | 
0ffe4                 | 
0ffe4                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0ffe4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0ffe4                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0ffe4                 | 
0ffe4                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
0ffe4                 | 
0ffe4     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
0ffe8                 | 
0ffe8     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
0ffec     7B 17 5B F8 |                 getnib  zoom, dl,#3
0fff0     03 16 07 F5 |                 and             zoom, #3
0fff4                 | 
0fff4                 | 
0fff4                 | 
0fff4     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
0fff8     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
0fffc     3F BC 06 F5 |                 and     linestart,#63
10000     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
10004     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
10008                 | 
10008     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1000c                 | 
1000c                 |                        ' if fontline =0, get a border color
1000c                 | 
1000c     51 03 33 F9 | p102            getword t1,m_border,#0
10010     00 02 0F F2 |                 cmp     t1, #0 wz
10014     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
10018                 | 
10018     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1001c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
10020     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
10024     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
10028     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1002c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
10030     52 BB 02 F6 |                 mov m_lut2, m_lut1
10034     6A BB 02 F1 |                 add m_lut2, lutt1
10038     58 0F 03 F6 |                 mov cpl2,i_cpl
1003c                 | 
1003c     02 16 0F F2 |                cmp zoom,#2 wz
10040     E4 00 90 AD |           if_z jmp #p420
10044     01 16 0F F2 |                cmp zoom,#1 wz
10048     64 00 90 AD |           if_z jmp #p410
1004c     00 16 0F F2 |                 cmp zoom,#0 wz
10050     04 00 90 AD |           if_z jmp #p400
10054     50 01 90 FD |                jmp #p430
10058                 | 
10058                 |                    '
10058                 |  ''---------------------------------------------------------------------------------------------------------
10058     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1005c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
10060     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
10064     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
10068     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1006c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
10070     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
10074     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
10078     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1007c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
10080                 | 
10080     81 BB C2 FC |                         xcont m_lut2,t1
10084                 | 
10084     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
10088     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1008c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
10090     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
10094     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
10098     01 C0 86 F1 |                         sub     lutaddr,#1
1009c                 | 
1009c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
100a0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
100a4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
100a8                 | 
100a8     EB 0F 6F FB |                         djnz   cpl2,#p400
100ac     28 01 90 FD |  p401                   jmp    #p103
100b0                 | 
100b0                 | ''------------------------------------------------------------------------------------------------------------
100b0                 | 
100b0     01 0E 47 F0 |  p410                   shr cpl2,#1
100b4                 | 
100b4                 | ''---------------------------------------------------------------------------------------------------------
100b4     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
100b8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
100bc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
100c0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
100c4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
100c8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
100cc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
100d0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
100d4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
100d8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
100dc                 | 
100dc                 | 
100dc     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
100e0     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
100e4     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
100e8     03 02 07 FA |                         mul t1,#3
100ec     81 BB C2 FC |                         xcont m_lut2,t1
100f0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
100f4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
100f8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
100fc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
10100     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
10104     01 C0 86 F1 |                         sub     lutaddr,#1
10108     63 06 63 FD |                         mergew t3
1010c     03 06 07 FA |                         mul t3,#3
10110     83 BB C2 FC |                         xcont m_lut2,t3
10114                 | 
10114     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
10118     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1011c                 | 
1011c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
10120                 | 
10120     E4 0F 6F FB |                         djnz   cpl2,#p412
10124     B0 00 90 FD |  p411                   jmp    #p103
10128                 | 
10128                 | ''------------------------------------------------------------------------------------------------------------
10128                 | 
10128     02 0E 47 F0 |  p420                   shr cpl2,#2
1012c                 | 
1012c                 | ''---------------------------------------------------------------------------------------
1012c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
10130     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
10134     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
10138     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1013c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
10140     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
10144     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
10148     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1014c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
10150     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
10154                 | 
10154     61 02 63 FD |                         mergeb t1
10158     81 07 3B F9 |                         getword t3,t1,#1
1015c     0F 02 07 FA |                         mul t1,#15
10160     81 BB C2 FC |                         xcont m_lut2,t1
10164                 | 
10164     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
10168     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1016c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
10170     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
10174     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
10178     01 C0 86 F1 |                         sub     lutaddr,#1
1017c                 | 
1017c     81 09 EB F8 |                         getbyte t4,t1,#1        '
10180     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
10184                 | 
10184     0F 06 07 FA |                         mul t3,#15
10188     83 BB C2 FC |                         xcont m_lut2,t3
1018c                 | 
1018c     83 0B EB F8 |                         getbyte t5,t3,#1
10190     85 BB C2 FC |                         xcont m_lut2, t5
10194     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
10198     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1019c                 | 
1019c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
101a0                 | 
101a0     E2 0F 6F FB |                         djnz   cpl2,#p422
101a4     30 00 90 FD |  p421                   jmp    #p103
101a8                 | 
101a8                 | '--------------------------------------------------------------------------------------------------------------
101a8                 | 
101a8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
101ac     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
101b0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
101b4                 | 
101b4     00 BA C6 FC |                         xcont m_lut2,#0
101b8                 | 
101b8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
101bc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
101c0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
101c4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
101c8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
101cc     01 C0 86 F1 |                         sub     lutaddr,#1
101d0                 | 
101d0     F5 0F 6F FB |                         djnz   cpl2,#p430
101d4     00 00 90 FD |  p431                   jmp    #p103
101d8                 | 
101d8                 | ''------------------------------------------------------------------------------------------------------------
101d8                 | 
101d8                 | 
101d8                 | 
101d8     51 25 33 F9 | p103            getword  mb2,m_border,#0
101dc     00 24 0F F2 |                 cmp      mb2, #0 wz
101e0     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
101e4                 | 
101e4     B0 FD 9F FD |                 jmp #p302
101e8                 | 
101e8                 | '' -------------------------------------- END of text line ---------------------------------
101e8                 | 
101e8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
101e8                 | 
101e8     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
101ec                 | 
101ec                 | 
101ec     51 25 33 F9 | p202            getword mb2,m_border,#0
101f0     00 24 0F F2 |                 cmp     mb2, #0 wz
101f4     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
101f8                 | 
101f8                 | '----------------------------------------- display pixels
101f8                 | 
101f8     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
101fc     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
10200                 | 
10200     7B 17 5B F8 |                 getnib  zoom, dl,#3
10204     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
10208                 | 
10208     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1020c     0C BC 06 F5 |                 and     colordepth,#12
10210                 | 
10210     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
10214     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
10218     64 00 90 AD |           if_z  jmp     #p240
1021c                 | 
1021c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
10220     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
10224     98 00 90 AD |           if_z  jmp     #p250
10228                 | 
10228     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1022c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
10230     FC 00 90 AD |           if_z  jmp     #p260
10234                 | 
10234     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
10238                 | 
10238                 | '' --- 8 bit color modes
10238                 | 
10238     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1023c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
10240                 | 
10240     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
10244     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
10248                 |        
10248                 |  '  
10248     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1024c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
10250                 |     
10250                 |  
10250     05 0C 07 56 |                 if_nz mov skippattern,#%000101
10254     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
10258                 |         
10258                 | 
10258                 |         
10258     7D 11 03 FB | p235               rdlong  char,framebuf2
1025c     32 0C 63 FD |                    skipf skippattern
10260     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
10264     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
10268     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1026c     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
10270     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
10274     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
10278     F7 0F 6F FB |                    djnz    cpl2,#p235
1027c                 | 
1027c     20 01 90 FD |                jmp    #p203
10280                 |                   
10280                 | 
10280                 | 
10280                 | '' --- 1 bit color modes
10280                 | 
10280     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
10284     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
10288                 | 
10288     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1028c     13 0C 07 A6 |        if_z   mov skippattern,#%10011
10290     08 0C 07 56 |        if_nz  mov skippattern,#%01000
10294                 | 
10294                 | 
10294     7D 11 E3 FA | p241               rdword  char,framebuf2
10298     44 10 FF F9 |                    movbyts char,#%01000100
1029c     63 10 63 FD |                    mergew  char
102a0     32 0C 63 FD |                    skipf skippattern
102a4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
102a8     63 10 63 FD |                    mergew  char                    ' 1 0
102ac     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
102b0     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
102b4     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
102b8     F6 0F 6F FB |                    djnz   cpl2,#p241
102bc                 | 
102bc                 | 
102bc     E0 00 90 FD |                jmp    #p203
102c0                 | 
102c0                 | '' --- 2 bit color modes
102c0                 | 
102c0     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
102c4     C8 00 90 AD |        if_z   jmp #p251
102c8                 | 
102c8     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
102cc     30 00 90 AD |        if_z   jmp #p252
102d0                 | 
102d0                 | 
102d0     7D 11 C3 FA | p254               rdbyte char,framebuf2
102d4     04 0A 07 F6 |                    mov  t5,#4
102d8     02 10 67 F0 | p255               shl  char,#2
102dc     88 03 53 F8 |                    getnib  t1,char,#2
102e0     03 02 07 F5 |                    and     t1,#3
102e4     55 02 07 FA |                    mul     t1,#$55
102e8     81 05 03 F9 |                    rolbyte  t2,t1,#0
102ec     FA 0B 6F FB |                    djnz    t5,#p255
102f0     82 BB C2 FC |                    xcont   m_lut2,t2
102f4     01 FA 06 F1 |                    add     framebuf2,#1
102f8     F5 0F 6F FB |                    djnz    cpl2,#p254
102fc     A0 00 90 FD |                    jmp     #p203
10300                 | 
10300     7D 11 E3 FA | p252               rdword char,framebuf2
10304     08 0A 07 F6 |                    mov  t5,#8
10308     02 10 67 F0 | p253               shl  char,#2
1030c     88 03 63 F8 |                    getnib  t1,char,#4
10310     03 02 07 F5 |                    and     t1,#3
10314     05 02 07 FA |                    mul     t1,#5
10318     81 05 83 F8 |                    rolnib  t2,t1,#0
1031c     FA 0B 6F FB |                    djnz    t5,#p253
10320     82 BB C2 FC |                    xcont   m_lut2,t2
10324     02 FA 06 F1 |                    add     framebuf2,#2
10328     F5 0F 6F FB |                    djnz    cpl2,#p252
1032c     70 00 90 FD |                    jmp     #p203
10330                 | 
10330                 | '' ------ 4 bit color modes
10330                 | 
10330     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
10334     58 00 90 AD |        if_z   jmp #p251
10338                 | 
10338     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1033c     2C 00 90 AD |        if_z   jmp #p262
10340                 | 
10340                 | 
10340     7D 11 C3 FA | p263               rdbyte char,framebuf2
10344     02 0A DC FC |                            rep #5,#2
10348     88 05 8B F8 |                              rolnib t2,char,#1
1034c     88 05 8B F8 |                                  rolnib t2,char,#1
10350     88 05 8B F8 |                              rolnib t2,char,#1
10354     88 05 8B F8 |                                  rolnib t2,char,#1
10358     04 10 67 F0 |                              shl char,#4
1035c     82 BB C2 FC |                    xcont   m_lut2,t2
10360     01 FA 06 F1 |                    add     framebuf2,#1
10364     F6 0F 6F FB |                    djnz    cpl2,#p263
10368     34 00 90 FD |                    jmp     #p203
1036c                 | 
1036c     7D 11 E3 FA | p262               rdword  char,framebuf2
10370     04 06 DC FC |                            rep #3,#4
10374     88 05 9B F8 |                              rolnib t2,char,#3
10378     88 05 9B F8 |                                  rolnib t2,char,#3
1037c     04 10 67 F0 |                              shl char,#4
10380     82 BB C2 FC |                    xcont   m_lut2,t2
10384     02 FA 06 F1 |                    add     framebuf2,#2
10388     F8 0F 6F FB |                    djnz    cpl2,#p262
1038c     10 00 90 FD |                    jmp     #p203
10390                 | 
10390                 | ''---------- all color modes without zoom
10390                 | 
10390     87 07 D8 FC | p251               rep  #3,cpl2
10394     7D 11 03 FB |                    rdlong  char,framebuf2
10398     04 FA 06 F1 |                    add     framebuf2,#4
1039c     88 BB C2 FC |                    xcont   m_lut2,char
103a0                 |           
103a0                 |  ''-----------------------------------------------------------------------------------------
103a0                 | p203           ' getword  mb2,m_border,#0
103a0     00 24 0F F2 |                 cmp      mb2, #0 wz
103a4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
103a8                 | 
103a8     EC FB 9F FD |                 jmp #p302
103ac                 | 
103ac                 | '' -------------------------------------- END of graph  line ---------------------------------
103ac                 | 
103ac                 | '' consts and vars
103ac                 | 
103ac     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
103b0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
103b4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
103b8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
103bc                 | 
103bc     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
103c0                 | 
103c0                 | '------ these longs will be set by setmode function
103c0                 | 
103c0     00 00 00 00 | m_bs            long    0        'blanks before sync
103c4     00 00 00 00 | m_sn            long    0        'sync
103c8     00 00 00 00 | m_bv            long    0        'blanks before visible
103cc     00 00 00 00 | m_vi            long    0        'visible pixels #
103d0     00 00 00 00 | m_border        long    0        'left/right borders
103d4     00 00 00 00 | m_lut1          long    0        'characters
103d8     00 00 00 00 | i_vborder       long    0        'up/down borders
103dc     00 00 00 00 | i_upporch       long    0        'up porch lines
103e0     00 00 00 00 | i_vsync         long    0        'vsync lines
103e4     00 00 00 00 | i_downporch     long    0        'down porch lines
103e8     00 00 00 00 | i_modenum       long    0        'mode #
103ec     00 00 00 00 | i_cpl           long    0        'chars/longs per line
103f0     00 00 00 00 | i_lines         long    0        'scanlines #
103f4     00 00 00 00 | i_clock         long    0
103f8     00 00 00 00 | i_hubset        long    0
103fc     00 00 00 00 | i_totalvis      long    0
10400                 | 
10400                 | '-------------------------------------
10400                 | 
10400     00 00 00 00 | m_lut2          long    0
10404                 | 
10404                 | colordepth
10404     00 00 00 00 | linestart       long    0
10408     00 00 00 00 | linenum         long    0
1040c     00 01 00 00 | lutaddr         long    256
10410                 | 
10410     0E 00 00 00 | cursorsh        long    14
10414     00 00 00 00 | frames          long    0
10418     00 00 00 00 | cursorx         long    0
1041c     00 00 00 00 | cursory         long    0
10420     00 00 00 00 | cursorpos       long    0
10424     00 00 00 00 | cursorpos2      long    0
10428     00 00 00 00 | fontstart       long    0
1042c     00 00 00 00 | border2         long 0
10430     00 00 81 70 | lutiv           long $70810000
10434     00 00 88 00 | lutt1           long $00880000
10438     00 00 80 00 | lutg1           long $00800000
1043c     00 00 80 10 | lutg2           long $10800000
10440     00 00 80 20 | lutg4           long $20800000
10444     00 00 80 30 | lutg8           long $30800000
10448     00 00 00 00 | framebuf        long 0
1044c     00 00 00 00 | fontbuf         long 0
10450     00 00 00 00 | borderptr       long 0
10454     00 00 00 00 | vblankptr       long 0
10458     00 00 00 00 | cursorptr       long 0
1045c     00 00 00 00 | modeptr         long 0
10460     00 00 00 00 | paletteptr      long 0
10464     00 00 00 00 | dlptr           long 0
10468                 | fontnumptr      res     1
10468                 | fontnumptr      res     1
10468                 | hbase           res     1
10468                 | hbase           res     1
10468                 | borderptr2      res     1
10468                 | borderptr2      res     1
10468                 | dlptr2 res 1
10468                 | dlptr2 res 1
10468                 | dl              res 1
10468                 | dl              res 1
10468                 | ii              res     1
10468                 | ii              res     1
10468                 | framebuf2       res     1
10468                 | framebuf2       res     1
10468                 | hsync0          res     1
10468                 | hsync0          res     1
10468                 | hsync1          res     1
10468                 | hsync1          res     1
10468                 | fontline        res     1
10468                 | fontline        res     1
10468                 | t1              res     1
10468                 | t1              res     1
10468                 | t2              res     1
10468                 | t2              res     1
10468                 | t3 res 1
10468                 | t3 res 1
10468                 | t4 res 1
10468                 | t4 res 1
10468                 | t5 res 1
10468                 | t5 res 1
10468                 | skippattern res 1
10468                 | skippattern res 1
10468                 | cpl2 res 1
10468                 | cpl2 res 1
10468                 | char            res     1
10468                 | char            res     1
10468                 | backcolor       res     1
10468                 | backcolor       res     1
10468                 | charcolor       res     1
10468                 | charcolor       res     1
10468                 | zoom res 1
10468                 | zoom res 1
10468     00 00 00 00 | rcnt long 0 'dl repeat count
1046c     00 00 00 00 | rcnt2 long 0
10470     00 00 00 00 | rcnt2a long 0
10474     00 00 00 00 | roffset long 0
10478     00 00 00 00 | rdl long 0  'dl repeat line
1047c     00 00 00 00 | dlc long 0 'dl command
10480     00 00 00 00 | mb2 long 0
10484     00 00 00 00 | aend             long 0
10488                 |                 fit     496                     '
10488                 | _trackerplayer_spin2_dat_
10488                 | 
10488     00 00 00 00 | null             long  0
1048c     46 52 45 51 
10490     46 52 45 51 
10494     46 52 45 51 
10498     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1049c     46 52 45 51 
104a0     46 52 45 51 
104a4     46 52 45 51 
104a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
104ac     46 52 45 51 
104b0     46 52 45 51 
104b4     46 52 45 51 
104b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
104bc     46 52 45 51 
104c0     46 52 45 51 
104c4     46 52 45 51 
104c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
104cc     46 52 45 51 
104d0     46 52 45 51 
104d4     46 52 45 51 
104d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
104dc     46 52 45 51 
104e0     46 52 45 51 
104e4     46 52 45 51 
104e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
104ec     46 52 45 51 
104f0     46 52 45 51 
104f4     46 52 45 51 
104f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
104fc     46 52 45 51 
10500     46 52 45 51 
10504     46 52 45 51 
10508     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1050c     46 52 45 51 
10510     46 52 45 51 
10514     46 52 45 51 
10518     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1051c     46 52 45 51 
10520     46 52 45 51 
10524     46 52 45 51 
10528     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1052c     46 52 45 51 
10530     46 52 45 51 
10534     46 52 45 51 
10538     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1053c     46 52 45 51 
10540     46 52 45 51 
10544     46 52 45 51 
10548     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1054c     46 52 45 51 
10550     46 52 45 51 
10554     46 52 45 51 
10558     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1055c     46 52 45 51 
10560     46 52 45 51 
10564     46 52 45 51 
10568     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1056c     46 52 45 51 
10570     46 52 45 51 
10574     46 52 45 51 
10578     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1057c     46 52 45 51 
10580     46 52 45 51 
10584     46 52 45 51 
10588     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1058c     46 52 45 51 
10590     46 52 45 51 
10594     46 52 45 51 
10598     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1059c     46 52 45 51 
105a0     46 52 45 51 
105a4     46 52 45 51 
105a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
105ac     46 52 45 51 
105b0     46 52 45 51 
105b4     46 52 45 51 
105b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
105bc     46 52 45 51 
105c0     46 52 45 51 
105c4     46 52 45 51 
105c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
105cc     46 52 45 51 
105d0     46 52 45 51 
105d4     46 52 45 51 
105d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
105dc     46 52 45 51 
105e0     46 52 45 51 
105e4     46 52 45 51 
105e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
105ec     46 52 45 51 
105f0     46 52 45 51 
105f4     46 52 45 51 
105f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
105fc     46 52 45 51 
10600     46 52 45 51 
10604     46 52 45 51 
10608     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1060c     46 52 45 51 
10610     46 52 45 51 
10614     46 52 45 51 
10618     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1061c     46 52 45 51 
10620     46 52 45 51 
10624     46 52 45 51 
10628     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1062c     46 52 45 51 
10630     46 52 45 51 
10634     46 52 45 51 
10638     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1063c     46 52 45 51 
10640     46 52 45 51 
10644     46 52 45 51 
10648     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1064c     46 52 45 51 
10650     46 52 45 51 
10654     46 52 45 51 
10658     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1065c     46 52 45 51 
10660     46 52 45 51 
10664     46 52 45 51 
10668     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1066c     46 52 45 51 
10670     46 52 45 51 
10674     46 52 45 51 
10678     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1067c     46 52 45 51 
10680     46 52 45 51 
10684     46 52 45 51 
10688     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1068c     46 52 45 51 
10690     46 52 45 51 
10694     46 52 45 51 
10698     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1069c     46 52 45 51 
106a0     46 52 45 51 
106a4     46 52 45 51 
106a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
106ac     46 52 45 51 
106b0     46 52 45 51 
106b4     46 52 45 51 
106b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
106bc     46 52 45 51 
106c0     46 52 45 51 
106c4     46 52 45 51 
106c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
106cc     46 52 45 51 
106d0     46 52 45 51 
106d4     46 52 45 51 
106d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
106dc     46 52 45 51 
106e0     46 52 45 51 
106e4     46 52 45 51 
106e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
106ec     46 52 45 51 
106f0     46 52 45 51 
106f4     46 52 45 51 
106f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
106fc     46 52 45 51 
10700     46 52 45 51 
10704     46 52 45 51 
10708     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1070c     46 52 45 51 
10710     46 52 45 51 
10714     46 52 45 51 
10718     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1071c     46 52 45 51 
10720     46 52 45 51 
10724     46 52 45 51 
10728     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1072c     46 52 45 51 
10730     46 52 45 51 
10734     46 52 45 51 
10738     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1073c     46 52 45 51 
10740     46 52 45 51 
10744     46 52 45 51 
10748     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1074c     46 52 45 51 
10750     46 52 45 51 
10754     46 52 45 51 
10758     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1075c     46 52 45 51 
10760     46 52 45 51 
10764     46 52 45 51 
10768     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1076c     46 52 45 51 
10770     46 52 45 51 
10774     46 52 45 51 
10778     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1077c     46 52 45 51 
10780     46 52 45 51 
10784     46 52 45 51 
10788     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1078c     46 52 45 51 
10790     46 52 45 51 
10794     46 52 45 51 
10798     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1079c     46 52 45 51 
107a0     46 52 45 51 
107a4     46 52 45 51 
107a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
107ac     46 52 45 51 
107b0     46 52 45 51 
107b4     46 52 45 51 
107b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
107bc     46 52 45 51 
107c0     46 52 45 51 
107c4     46 52 45 51 
107c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
107cc     46 52 45 51 
107d0     46 52 45 51 
107d4     46 52 45 51 
107d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
107dc     46 52 45 51 
107e0     46 52 45 51 
107e4     46 52 45 51 
107e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
107ec     46 52 45 51 
107f0     46 52 45 51 
107f4     46 52 45 51 
107f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
107fc     46 52 45 51 
10800     46 52 45 51 
10804     46 52 45 51 
10808     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1080c     46 52 45 51 
10810     46 52 45 51 
10814     46 52 45 51 
10818     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1081c     46 52 45 51 
10820     46 52 45 51 
10824     46 52 45 51 
10828     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1082c     46 52 45 51 
10830     46 52 45 51 
10834     46 52 45 51 
10838     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1083c     46 52 45 51 
10840     46 52 45 51 
10844     46 52 45 51 
10848     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1084c     46 52 45 51 
10850     46 52 45 51 
10854     46 52 45 51 
10858     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1085c     46 52 45 51 
10860     46 52 45 51 
10864     46 52 45 51 
10868     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1086c     46 52 45 51 
10870     46 52 45 51 
10874     46 52 45 51 
10878     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1087c     46 52 45 51 
10880     46 52 45 51 
10884     46 52 45 51 
10888     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1088c     46 52 45 51 
10890     46 52 45 51 
10894     46 52 45 51 
10898     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1089c     46 52 45 51 
108a0     46 52 45 51 
108a4     46 52 45 51 
108a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
108ac     46 52 45 51 
108b0     46 52 45 51 
108b4     46 52 45 51 
108b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
108bc     46 52 45 51 
108c0     46 52 45 51 
108c4     46 52 45 51 
108c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
108cc     46 52 45 51 
108d0     46 52 45 51 
108d4     46 52 45 51 
108d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
108dc     46 52 45 51 
108e0     46 52 45 51 
108e4     46 52 45 51 
108e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
108ec     46 52 45 51 
108f0     46 52 45 51 
108f4     46 52 45 51 
108f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
108fc     46 52 45 51 
10900     46 52 45 51 
10904     46 52 45 51 
10908     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1090c     46 52 45 51 
10910     46 52 45 51 
10914     46 52 45 51 
10918     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1091c     46 52 45 51 
10920     46 52 45 51 
10924     46 52 45 51 
10928     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1092c     46 52 45 51 
10930     46 52 45 51 
10934     46 52 45 51 
10938     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1093c     46 52 45 51 
10940     46 52 45 51 
10944     46 52 45 51 
10948     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1094c     46 52 45 51 
10950     46 52 45 51 
10954     46 52 45 51 
10958     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1095c     46 52 45 51 
10960     46 52 45 51 
10964     46 52 45 51 
10968     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1096c     46 52 45 51 
10970     46 52 45 51 
10974     46 52 45 51 
10978     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1097c     46 52 45 51 
10980     46 52 45 51 
10984     46 52 45 51 
10988     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1098c     46 52 45 51 
10990     46 52 45 51 
10994     46 52 45 51 
10998     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1099c     46 52 45 51 
109a0     46 52 45 51 
109a4     46 52 45 51 
109a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
109ac     46 52 45 51 
109b0     46 52 45 51 
109b4     46 52 45 51 
109b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
109bc     46 52 45 51 
109c0     46 52 45 51 
109c4     46 52 45 51 
109c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
109cc     46 52 45 51 
109d0     46 52 45 51 
109d4     46 52 45 51 
109d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
109dc     46 52 45 51 
109e0     46 52 45 51 
109e4     46 52 45 51 
109e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
109ec     46 52 45 51 
109f0     46 52 45 51 
109f4     46 52 45 51 
109f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
109fc     46 52 45 51 
10a00     46 52 45 51 
10a04     46 52 45 51 
10a08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a0c     46 52 45 51 
10a10     46 52 45 51 
10a14     46 52 45 51 
10a18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a1c     46 52 45 51 
10a20     46 52 45 51 
10a24     46 52 45 51 
10a28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a2c     46 52 45 51 
10a30     46 52 45 51 
10a34     46 52 45 51 
10a38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a3c     46 52 45 51 
10a40     46 52 45 51 
10a44     46 52 45 51 
10a48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a4c     46 52 45 51 
10a50     46 52 45 51 
10a54     46 52 45 51 
10a58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a5c     46 52 45 51 
10a60     46 52 45 51 
10a64     46 52 45 51 
10a68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a6c     46 52 45 51 
10a70     46 52 45 51 
10a74     46 52 45 51 
10a78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a7c     46 52 45 51 
10a80     46 52 45 51 
10a84     46 52 45 51 
10a88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a8c     46 52 45 51 
10a90     46 52 45 51 
10a94     46 52 45 51 
10a98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10a9c     46 52 45 51 
10aa0     46 52 45 51 
10aa4     46 52 45 51 
10aa8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10aac     46 52 45 51 
10ab0     46 52 45 51 
10ab4     46 52 45 51 
10ab8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10abc     46 52 45 51 
10ac0     46 52 45 51 
10ac4     46 52 45 51 
10ac8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10acc     46 52 45 51 
10ad0     46 52 45 51 
10ad4     46 52 45 51 
10ad8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10adc     46 52 45 51 
10ae0     46 52 45 51 
10ae4     46 52 45 51 
10ae8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10aec     46 52 45 51 
10af0     46 52 45 51 
10af4     46 52 45 51 
10af8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10afc     46 52 45 51 
10b00     46 52 45 51 
10b04     46 52 45 51 
10b08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b0c     46 52 45 51 
10b10     46 52 45 51 
10b14     46 52 45 51 
10b18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b1c     46 52 45 51 
10b20     46 52 45 51 
10b24     46 52 45 51 
10b28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b2c     46 52 45 51 
10b30     46 52 45 51 
10b34     46 52 45 51 
10b38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b3c     46 52 45 51 
10b40     46 52 45 51 
10b44     46 52 45 51 
10b48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b4c     46 52 45 51 
10b50     46 52 45 51 
10b54     46 52 45 51 
10b58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b5c     46 52 45 51 
10b60     46 52 45 51 
10b64     46 52 45 51 
10b68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b6c     46 52 45 51 
10b70     46 52 45 51 
10b74     46 52 45 51 
10b78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b7c     46 52 45 51 
10b80     46 52 45 51 
10b84     46 52 45 51 
10b88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b8c     46 52 45 51 
10b90     46 52 45 51 
10b94     46 52 45 51 
10b98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10b9c     46 52 45 51 
10ba0     46 52 45 51 
10ba4     46 52 45 51 
10ba8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10bac     46 52 45 51 
10bb0     46 52 45 51 
10bb4     46 52 45 51 
10bb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10bbc     46 52 45 51 
10bc0     46 52 45 51 
10bc4     46 52 45 51 
10bc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10bcc     46 52 45 51 
10bd0     46 52 45 51 
10bd4     46 52 45 51 
10bd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10bdc     46 52 45 51 
10be0     46 52 45 51 
10be4     46 52 45 51 
10be8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10bec     46 52 45 51 
10bf0     46 52 45 51 
10bf4     46 52 45 51 
10bf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10bfc     46 52 45 51 
10c00     46 52 45 51 
10c04     46 52 45 51 
10c08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c0c     46 52 45 51 
10c10     46 52 45 51 
10c14     46 52 45 51 
10c18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c1c     46 52 45 51 
10c20     46 52 45 51 
10c24     46 52 45 51 
10c28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c2c     46 52 45 51 
10c30     46 52 45 51 
10c34     46 52 45 51 
10c38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c3c     46 52 45 51 
10c40     46 52 45 51 
10c44     46 52 45 51 
10c48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c4c     46 52 45 51 
10c50     46 52 45 51 
10c54     46 52 45 51 
10c58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c5c     46 52 45 51 
10c60     46 52 45 51 
10c64     46 52 45 51 
10c68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c6c     46 52 45 51 
10c70     46 52 45 51 
10c74     46 52 45 51 
10c78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c7c     46 52 45 51 
10c80     46 52 45 51 
10c84     46 52 45 51 
10c88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c8c     46 52 45 51 
10c90     46 52 45 51 
10c94     46 52 45 51 
10c98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10c9c     46 52 45 51 
10ca0     46 52 45 51 
10ca4     46 52 45 51 
10ca8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10cac     46 52 45 51 
10cb0     46 52 45 51 
10cb4     46 52 45 51 
10cb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10cbc     46 52 45 51 
10cc0     46 52 45 51 
10cc4     46 52 45 51 
10cc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10ccc     46 52 45 51 
10cd0     46 52 45 51 
10cd4     46 52 45 51 
10cd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10cdc     46 52 45 51 
10ce0     46 52 45 51 
10ce4     46 52 45 51 
10ce8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10cec     46 52 45 51 
10cf0     46 52 45 51 
10cf4     46 52 45 51 
10cf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10cfc     46 52 45 51 
10d00     46 52 45 51 
10d04     46 52 45 51 
10d08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d0c     46 52 45 51 
10d10     46 52 45 51 
10d14     46 52 45 51 
10d18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d1c     46 52 45 51 
10d20     46 52 45 51 
10d24     46 52 45 51 
10d28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d2c     46 52 45 51 
10d30     46 52 45 51 
10d34     46 52 45 51 
10d38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d3c     46 52 45 51 
10d40     46 52 45 51 
10d44     46 52 45 51 
10d48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d4c     46 52 45 51 
10d50     46 52 45 51 
10d54     46 52 45 51 
10d58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d5c     46 52 45 51 
10d60     46 52 45 51 
10d64     46 52 45 51 
10d68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d6c     46 52 45 51 
10d70     46 52 45 51 
10d74     46 52 45 51 
10d78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d7c     46 52 45 51 
10d80     46 52 45 51 
10d84     46 52 45 51 
10d88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d8c     46 52 45 51 
10d90     46 52 45 51 
10d94     46 52 45 51 
10d98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10d9c     46 52 45 51 
10da0     46 52 45 51 
10da4     46 52 45 51 
10da8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10dac     46 52 45 51 
10db0     46 52 45 51 
10db4     46 52 45 51 
10db8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10dbc     46 52 45 51 
10dc0     46 52 45 51 
10dc4     46 52 45 51 
10dc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10dcc     46 52 45 51 
10dd0     46 52 45 51 
10dd4     46 52 45 51 
10dd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10ddc     46 52 45 51 
10de0     46 52 45 51 
10de4     46 52 45 51 
10de8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10dec     46 52 45 51 
10df0     46 52 45 51 
10df4     46 52 45 51 
10df8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10dfc     46 52 45 51 
10e00     46 52 45 51 
10e04     46 52 45 51 
10e08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e0c     46 52 45 51 
10e10     46 52 45 51 
10e14     46 52 45 51 
10e18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e1c     46 52 45 51 
10e20     46 52 45 51 
10e24     46 52 45 51 
10e28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e2c     46 52 45 51 
10e30     46 52 45 51 
10e34     46 52 45 51 
10e38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e3c     46 52 45 51 
10e40     46 52 45 51 
10e44     46 52 45 51 
10e48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e4c     46 52 45 51 
10e50     46 52 45 51 
10e54     46 52 45 51 
10e58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e5c     46 52 45 51 
10e60     46 52 45 51 
10e64     46 52 45 51 
10e68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e6c     46 52 45 51 
10e70     46 52 45 51 
10e74     46 52 45 51 
10e78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e7c     46 52 45 51 
10e80     46 52 45 51 
10e84     46 52 45 51 
10e88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e8c     46 52 45 51 
10e90     46 52 45 51 
10e94     46 52 45 51 
10e98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10e9c     46 52 45 51 
10ea0     46 52 45 51 
10ea4     46 52 45 51 
10ea8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10eac     46 52 45 51 
10eb0     46 52 45 51 
10eb4     46 52 45 51 
10eb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10ebc     46 52 45 51 
10ec0     46 52 45 51 
10ec4     46 52 45 51 
10ec8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10ecc     46 52 45 51 
10ed0     46 52 45 51 
10ed4     46 52 45 51 
10ed8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10edc     46 52 45 51 
10ee0     46 52 45 51 
10ee4     46 52 45 51 
10ee8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10eec     46 52 45 51 
10ef0     46 52 45 51 
10ef4     46 52 45 51 
10ef8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10efc     46 52 45 51 
10f00     46 52 45 51 
10f04     46 52 45 51 
10f08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f0c     46 52 45 51 
10f10     46 52 45 51 
10f14     46 52 45 51 
10f18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f1c     46 52 45 51 
10f20     46 52 45 51 
10f24     46 52 45 51 
10f28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f2c     46 52 45 51 
10f30     46 52 45 51 
10f34     46 52 45 51 
10f38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f3c     46 52 45 51 
10f40     46 52 45 51 
10f44     46 52 45 51 
10f48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f4c     46 52 45 51 
10f50     46 52 45 51 
10f54     46 52 45 51 
10f58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f5c     46 52 45 51 
10f60     46 52 45 51 
10f64     46 52 45 51 
10f68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f6c     46 52 45 51 
10f70     46 52 45 51 
10f74     46 52 45 51 
10f78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f7c     46 52 45 51 
10f80     46 52 45 51 
10f84     46 52 45 51 
10f88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f8c     46 52 45 51 
10f90     46 52 45 51 
10f94     46 52 45 51 
10f98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10f9c     46 52 45 51 
10fa0     46 52 45 51 
10fa4     46 52 45 51 
10fa8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10fac     46 52 45 51 
10fb0     46 52 45 51 
10fb4     46 52 45 51 
10fb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10fbc     46 52 45 51 
10fc0     46 52 45 51 
10fc4     46 52 45 51 
10fc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10fcc     46 52 45 51 
10fd0     46 52 45 51 
10fd4     46 52 45 51 
10fd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10fdc     46 52 45 51 
10fe0     46 52 45 51 
10fe4     46 52 45 51 
10fe8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10fec     46 52 45 51 
10ff0     46 52 45 51 
10ff4     46 52 45 51 
10ff8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
10ffc     46 52 45 51 
11000     46 52 45 51 
11004     46 52 45 51 
11008     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1100c     46 52 45 51 
11010     46 52 45 51 
11014     46 52 45 51 
11018     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1101c     46 52 45 51 
11020     46 52 45 51 
11024     46 52 45 51 
11028     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1102c                 | 
1102c     00 00 00 00 
11030     18 00 00 00 
11034     31 00 00 00 
11038     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1103c     61 00 00 00 
11040     78 00 00 00 
11044     8D 00 00 00 
11048     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1104c     B4 00 00 00 
11050     C5 00 00 00 
11054     D4 00 00 00 
11058     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1105c     EB 00 00 00 
11060     F4 00 00 00 
11064     FA 00 00 00 
11068     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1106c     FF 00 00 00 
11070     FD 00 00 00 
11074     FA 00 00 00 
11078     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1107c     EB 00 00 00 
11080     E0 00 00 00 
11084     D4 00 00 00 
11088     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1108c     B4 00 00 00 
11090     A1 00 00 00 
11094     8D 00 00 00 
11098     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1109c     61 00 00 00 
110a0     4A 00 00 00 
110a4     31 00 00 00 
110a8     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
110ac     00 00 00 00 
110b0     E8 FF FF FF 
110b4     CF FF FF FF 
110b8     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
110bc     9F FF FF FF 
110c0     88 FF FF FF 
110c4     73 FF FF FF 
110c8     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
110cc     4C FF FF FF 
110d0     3B FF FF FF 
110d4     2C FF FF FF 
110d8     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
110dc     15 FF FF FF 
110e0     0C FF FF FF 
110e4     06 FF FF FF 
110e8     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
110ec     01 FF FF FF 
110f0     03 FF FF FF 
110f4     06 FF FF FF 
110f8     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
110fc     15 FF FF FF 
11100     20 FF FF FF 
11104     2C FF FF FF 
11108     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1110c     4C FF FF FF 
11110     5F FF FF FF 
11114     73 FF FF FF 
11118     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1111c     9F FF FF FF 
11120     B6 FF FF FF 
11124     CF FF FF FF 
11128     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1112c                 | 
1112c     58 03 28 03 
11130     FA 02 D0 02 
11134     A6 02 80 02 
11138     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1113c     1A 02 FC 01 
11140     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
11144     AC 01 94 01 
11148     7D 01 68 01 
1114c     53 01 40 01 
11150     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
11154     0D 01 FE 00 
11158     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1115c     D6 00 CA 00 
11160     BE 00 B4 00 
11164     AA 00 A0 00 
11168     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1116c     87 00 7F 00 
11170     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
11174     6B 00 22 03 
11178     F5 02 CB 02 
1117c     A2 02 7D 02 
11180     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
11184     17 02 F9 01 
11188     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1118c     A9 01 91 01 
11190     7B 01 65 01 
11194     51 01 3E 01 
11198     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1119c     0C 01 FD 00 
111a0     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
111a4     D5 00 C9 00 
111a8     BD 00 B3 00 
111ac     A9 00 9F 00 
111b0     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
111b4     86 00 7E 00 
111b8     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
111bc     4C 03 1C 03 
111c0     F0 02 C5 02 
111c4     9E 02 78 02 
111c8     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
111cc     14 02 F6 01 
111d0     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
111d4     A6 01 8E 01 
111d8     78 01 63 01 
111dc     4F 01 3C 01 
111e0     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
111e4     0A 01 FB 00 
111e8     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
111ec     D3 00 C7 00 
111f0     BC 00 B1 00 
111f4     A7 00 9E 00 
111f8     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
111fc     85 00 7D 00 
11200     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
11204     46 03 17 03 
11208     EA 02 C0 02 
1120c     99 02 74 02 
11210     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
11214     10 02 F2 01 
11218     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1121c     A3 01 8B 01 
11220     75 01 60 01 
11224     4C 01 3A 01 
11228     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1122c     08 01 F9 00 
11230     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
11234     D1 00 C6 00 
11238     BB 00 B0 00 
1123c     A6 00 9D 00 
11240     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
11244     84 00 7D 00 
11248     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1124c     40 03 11 03 
11250     E5 02 BB 02 
11254     94 02 6F 02 
11258     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1125c     0C 02 EF 01 
11260     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
11264     A0 01 88 01 
11268     72 01 5E 01 
1126c     4A 01 38 01 
11270     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
11274     06 01 F7 00 
11278     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1127c     D0 00 C4 00 
11280     B9 00 AF 00 
11284     A5 00 9C 00 
11288     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1128c     83 00 7C 00 
11290     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
11294     3A 03 0B 03 
11298     E0 02 B6 02 
1129c     8F 02 6B 02 
112a0     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
112a4     08 02 EB 01 
112a8     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
112ac     9D 01 86 01 
112b0     70 01 5B 01 
112b4     48 01 35 01 
112b8     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
112bc     04 01 F5 00 
112c0     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
112c4     CE 00 C3 00 
112c8     B8 00 AE 00 
112cc     A4 00 9B 00 
112d0     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
112d4     82 00 7B 00 
112d8     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
112dc     34 03 06 03 
112e0     DA 02 B1 02 
112e4     8B 02 66 02 
112e8     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
112ec     04 02 E7 01 
112f0     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
112f4     9A 01 83 01 
112f8     6D 01 59 01 
112fc     45 01 33 01 
11300     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
11304     02 01 F4 00 
11308     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1130c     CD 00 C1 00 
11310     B7 00 AC 00 
11314     A3 00 9A 00 
11318     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1131c     81 00 7A 00 
11320     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
11324     2E 03 00 03 
11328     D5 02 AC 02 
1132c     86 02 62 02 
11330     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
11334     01 02 E4 01 
11338     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1133c     97 01 80 01 
11340     6B 01 56 01 
11344     43 01 31 01 
11348     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1134c     00 01 F2 00 
11350     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
11354     CC 00 C0 00 
11358     B5 00 AB 00 
1135c     A1 00 98 00 
11360     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
11364     80 00 79 00 
11368     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1136c     8B 03 58 03 
11370     28 03 FA 02 
11374     D0 02 A6 02 
11378     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1137c     3A 02 1A 02 
11380     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
11384     C5 01 AC 01 
11388     94 01 7D 01 
1138c     68 01 53 01 
11390     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
11394     1D 01 0D 01 
11398     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1139c     E2 00 D6 00 
113a0     CA 00 BE 00 
113a4     B4 00 AA 00 
113a8     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
113ac     8F 00 87 00 
113b0     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
113b4     84 03 52 03 
113b8     22 03 F5 02 
113bc     CB 02 A3 02 
113c0     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
113c4     37 02 17 02 
113c8     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
113cc     C2 01 A9 01 
113d0     91 01 7B 01 
113d4     65 01 51 01 
113d8     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
113dc     1C 01 0C 01 
113e0     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
113e4     E1 00 D4 00 
113e8     C8 00 BD 00 
113ec     B3 00 A9 00 
113f0     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
113f4     8E 00 86 00 
113f8     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
113fc     7E 03 4C 03 
11400     1C 03 F0 02 
11404     C5 02 9E 02 
11408     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1140c     33 02 14 02 
11410     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
11414     BF 01 A6 01 
11418     8E 01 78 01 
1141c     63 01 4F 01 
11420     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
11424     1A 01 0A 01 
11428     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1142c     DF 00 D3 00 
11430     C7 00 BC 00 
11434     B1 00 A7 00 
11438     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1143c     8D 00 85 00 
11440     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
11444     77 03 46 03 
11448     17 03 EA 02 
1144c     C0 02 99 02 
11450     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
11454     2F 02 10 02 
11458     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1145c     BC 01 A3 01 
11460     8B 01 75 01 
11464     60 01 4C 01 
11468     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1146c     18 01 08 01 
11470     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
11474     DE 00 D1 00 
11478     C6 00 BB 00 
1147c     B0 00 A6 00 
11480     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
11484     8C 00 84 00 
11488     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1148c     71 03 40 03 
11490     11 03 E5 02 
11494     BB 02 94 02 
11498     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1149c     2B 02 0C 02 
114a0     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
114a4     B9 01 A0 01 
114a8     88 01 72 01 
114ac     5E 01 4A 01 
114b0     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
114b4     16 01 06 01 
114b8     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
114bc     DC 00 D0 00 
114c0     C4 00 B9 00 
114c4     AF 00 A5 00 
114c8     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
114cc     8B 00 83 00 
114d0     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
114d4     6B 03 3A 03 
114d8     0B 03 E0 02 
114dc     B6 02 8F 02 
114e0     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
114e4     27 02 08 02 
114e8     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
114ec     B5 01 9D 01 
114f0     86 01 70 01 
114f4     5B 01 48 01 
114f8     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
114fc     14 01 04 01 
11500     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
11504     DB 00 CE 00 
11508     C3 00 B8 00 
1150c     AE 00 A4 00 
11510     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
11514     8A 00 82 00 
11518     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1151c     64 03 34 03 
11520     06 03 DA 02 
11524     B1 02 8B 02 
11528     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1152c     23 02 04 02 
11530     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
11534     B2 01 9A 01 
11538     83 01 6D 01 
1153c     59 01 45 01 
11540     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
11544     12 01 02 01 
11548     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1154c     D9 00 CD 00 
11550     C1 00 B7 00 
11554     AC 00 A3 00 
11558     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1155c     89 00 81 00 
11560     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
11564     5E 03 2E 03 
11568     00 03 D5 02 
1156c     AC 02 86 02 
11570     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
11574     1F 02 01 02 
11578     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1157c     AF 01 97 01 
11580     80 01 6B 01 
11584     56 01 43 01 
11588     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1158c     10 01 00 01 
11590     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
11594     D8 00 CB 00 
11598     C0 00 B5 00 
1159c     AB 00 A1 00 
115a0     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
115a4     88 00 80 00 
115a8     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
115ac                 | 	alignl
115ac                 | _audio015_spin2_dat_
115ac                 | 
115ac                 | audio       org     0
115ac     00 F2 07 F6 | 			mov ptrb,#0
115b0     28 8E 64 FD | 			setq #71
115b4     00 A9 06 FB |             rdlong  sstart1,ptra
115b8     0E 76 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
115bc     0E C8 1C FC |             wxpin   #100,#left
115c0     0F 76 07 FC |             wrpin   dac,#right
115c4     0F C8 1C FC |             wxpin   #100,#right
115c8     41 9C 64 FD |             dirh    #left addpins 1
115cc     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
115d0     2D E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
115d4     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
115d8                 |             
115d8                 | '---------------------------------------------------------------------------------        
115d8                 | '----------------- The main loop -------------------------------------------------
115d8                 | '---------------------------------------------------------------------------------
115d8                 | 
115d8     37 39 13 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
115dc     24 00 90 CD |       if_c  jmp     #loop1
115e0                 |       
115e0     36 3B 83 F1 |             sub     time1,a20000000
115e4     36 3D 83 F1 |             sub     time2,a20000000
115e8     36 3F 83 F1 |             sub     time3,a20000000
115ec     36 41 83 F1 |             sub     time4,a20000000
115f0     36 43 83 F1 |             sub     time5,a20000000
115f4     36 45 83 F1 |             sub     time6,a20000000
115f8     36 47 83 F1 |             sub     time7,a20000000
115fc     36 49 83 F1 |             sub     time8,a20000000
11600     36 39 83 F1 |             sub     time0,a20000000
11604                 |     
11604     5C 87 02 F5 | loop1       and     p1,acmd1            ' cmd=0 resets the phase accumulator
11608     65 89 02 F5 |             and     p2,acmd2
1160c     6E 8B 02 F5 |             and     p3,acmd3
11610     77 8D 02 F5 |             and     p4,acmd4
11614     80 8F 02 F5 |             and     p5,acmd5
11618     89 91 02 F5 |             and     p6,acmd6
1161c     92 93 02 F5 |             and     p7,acmd7
11620     9B 95 02 F5 |             and     p8,acmd8
11624                 |        
11624     2F 4C 07 F6 |             mov     cn,#p201           ' Find the channel to compute
11628     9D 4F 03 F6 |             mov     ct,time1           ' with the lowest next sample time
1162c     9E 4F 3B F3 |             fle     ct,time2 wcz   
11630     48 4C 07 C6 |     if_c    mov     cn,#p202 
11634     9F 4F 3B F3 |             fle     ct,time3 wcz
11638     63 4C 07 C6 |     if_c    mov     cn,#p203     
1163c     A0 4F 3B F3 |             fle     ct,time4 wcz
11640     7E 4C 07 C6 |     if_c    mov     cn,#p204
11644     A1 4F 3B F3 |             fle     ct,time5 wcz
11648     99 4C 07 C6 |     if_c    mov     cn,#p205 
1164c     A2 4F 3B F3 |             fle     ct,time6 wcz
11650     B4 4C 07 C6 |     if_c    mov     cn,#p206
11654     A3 4F 3B F3 |             fle     ct,time7 wcz
11658     CF 4C 07 C6 |     if_c    mov     cn,#p207
1165c     A4 4F 3B F3 |             fle     ct,time8 wcz
11660     EA 4C 07 C6 |     if_c    mov     cn,#p208 
11664                 |  
11664     2C 4C 63 FD |             jmp     cn
11668                 |    
11668                 | '----------------------------------------------------------------------------------
11668                 | '------------- Compute channel samples --------------------------------------------
11668                 | '----------------------------------------------------------------------------------
11668                 | 	
11668                 | ' ------------  Channel 1
11668                 |  
11668     28 10 64 FD | p201        setq    #8              ' Read channel regs from the hub
1166c     00 A9 06 FB |             rdlong  sstart1,ptra
11670                 | 
11670     9D 51 03 F6 |             mov     dt0,time1      ' compute the delta to add to the global time
11674     9C 51 83 F1 |             sub     dt0,time0
11678     5A 3B 03 F1 |             add     time1,freq1    ' compute the next channel time	
1167c                 | 	        
1167c     5B 87 02 F1 |             add     p1,askip1      ' update the phase accumulator
11680     57 87 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
11684     57 87 82 31 |     if_ge   sub     p1,lend1	        
11688     56 87 02 31 |     if_ge   add     p1,lstart1       
1168c     43 97 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
11690     54 97 02 F1 |             add     qq,sstart1
11694                 |             
11694     00 AA 0E F2 |             cmp     type1,#0 wz    ' check the sample type
11698     4B 99 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
1169c     08 98 66 50 |     if_nz   shl     spl,#8
116a0     4B 99 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
116a4                 | 
116a4     58 99 32 FA |             scas    spl,vol1       ' apply the volume
116a8     00 98 02 F6 |             mov     spl,0-0
116ac                 | 
116ac     59 99 32 FA |             scas    spl,apan1      ' apply the pan
116b0     00 56 03 F6 |             mov     ls1,0-0
116b4     20 00 00 FF 
116b8     00 96 06 F6 |             mov     qq,##16384
116bc     59 97 82 F1 |             sub     qq,apan1
116c0     4B 99 32 FA |             scas    spl,qq
116c4     00 58 03 F6 |             mov     rs1,0-0
116c8                 |             
116c8     F4 02 90 FD |             jmp     #p101              
116cc                 | 	    	
116cc                 | ' ------------  Channel 2
116cc                 |  
116cc     24 F0 07 F1 | p202        add     ptra,#36
116d0     28 10 64 FD |             setq    #8              
116d4     00 BB 06 FB |             rdlong  sstart2,ptra
116d8     24 F0 87 F1 |             sub     ptra, #36
116dc                 | 
116dc     9E 51 03 F6 |             mov     dt0,time2
116e0     9C 51 83 F1 |             sub     dt0,time0
116e4     63 3D 03 F1 |             add     time2,freq2  	
116e8                 | 	        
116e8     64 89 02 F1 |             add     p2,askip2
116ec     60 89 1A F2 |             cmp     p2,lend2 wcz
116f0     60 89 82 31 |     if_ge   sub     p2,lend2	        
116f4     5F 89 02 31 |     if_ge   add     p2,lstart2       
116f8     44 97 02 F6 |             mov     qq,p2
116fc     5D 97 02 F1 |             add     qq,sstart2
11700                 | 
11700     00 BC 0E F2 |             cmp     type2,#0 wz
11704     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
11708     08 98 66 50 |     if_nz   shl     spl,#8
1170c     4B 99 E2 AA |     if_z    rdword  spl,qq
11710                 | 
11710     61 99 32 FA |             scas    spl,vol2
11714     00 98 02 F6 |             mov     spl,0-0
11718                 |             
11718     62 99 32 FA |             scas    spl,apan2
1171c     00 5A 03 F6 |             mov     ls2,0-0
11720     20 00 00 FF 
11724     00 96 06 F6 |             mov     qq,##16384
11728     62 97 82 F1 |             sub     qq,apan2
1172c     4B 99 32 FA |             scas    spl,qq
11730     00 5C 03 F6 |             mov     rs2,0-0
11734                 |             
11734     88 02 90 FD |             jmp     #p101
11738                 | 
11738                 | ' ------------  Channel 3
11738                 |  
11738     48 F0 07 F1 | p203        add     ptra,#36*2
1173c     28 10 64 FD |             setq    #8               
11740     00 CD 06 FB |             rdlong  sstart3,ptra
11744     48 F0 87 F1 |             sub     ptra, #36*2
11748                 | 
11748     9F 51 03 F6 |             mov     dt0,time3
1174c     9C 51 83 F1 |             sub     dt0,time0
11750     6C 3F 03 F1 |             add     time3,freq3  	
11754                 | 	        
11754     6D 8B 02 F1 |             add     p3,askip3
11758     69 8B 1A F2 |             cmp     p3,lend3 wcz
1175c     69 8B 82 31 |     if_ge   sub     p3,lend3	        
11760     68 8B 02 31 |     if_ge   add     p3,lstart3       
11764     45 97 02 F6 |             mov     qq,p3
11768     66 97 02 F1 |             add     qq,sstart3
1176c                 |             
1176c     00 CE 0E F2 |             cmp     type3,#0 wz
11770     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
11774     08 98 66 50 |     if_nz   shl     spl,#8
11778     4B 99 E2 AA |     if_z    rdword  spl,qq
1177c                 | 
1177c     6A 99 32 FA |             scas    spl,vol3
11780     00 98 02 F6 |             mov     spl,0-0
11784                 |     	
11784     6B 99 32 FA |             scas    spl,apan3
11788     00 5E 03 F6 |             mov     ls3,0-0
1178c                 |             
1178c     20 00 00 FF 
11790     00 96 06 F6 |             mov     qq,##16384
11794     6B 97 82 F1 |             sub     qq,apan3
11798     4B 99 32 FA |             scas    spl,qq
1179c     00 60 03 F6 |             mov     rs3,0-0
117a0                 | 
117a0     1C 02 90 FD |             jmp     #p101
117a4                 |             
117a4                 | ' ------------  Channel 4
117a4                 |  
117a4     6C F0 07 F1 | p204        add     ptra,#36*3
117a8     28 10 64 FD |             setq    #8               
117ac     00 DF 06 FB |             rdlong  sstart4,ptra
117b0     6C F0 87 F1 |             sub     ptra, #36*3
117b4                 | 
117b4     A0 51 03 F6 |             mov     dt0,time4
117b8     9C 51 83 F1 |             sub     dt0,time0
117bc     75 41 03 F1 |             add     time4,freq4  	
117c0                 | 	        
117c0     76 8D 02 F1 |             add     p4,askip4
117c4     72 8D 1A F2 |             cmp     p4,lend4 wcz
117c8     72 8D 82 31 |     if_ge   sub     p4,lend4	        
117cc     71 8D 02 31 |     if_ge   add     p4,lstart4       
117d0     46 97 02 F6 |             mov     qq,p4
117d4     6F 97 02 F1 |             add     qq,sstart4
117d8                 |             
117d8     00 E0 0E F2 |             cmp     type4,#0 wz
117dc     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
117e0     08 98 66 50 |     if_nz   shl     spl,#8
117e4     4B 99 E2 AA |     if_z    rdword  spl,qq
117e8                 | 
117e8     73 99 32 FA |             scas    spl,vol4
117ec     00 98 02 F6 |             mov     spl,0-0
117f0                 |     	
117f0     74 99 32 FA |             scas    spl,apan4
117f4     00 64 03 F6 |             mov     ls4,0-0
117f8                 |             
117f8     20 00 00 FF 
117fc     00 96 06 F6 |             mov     qq,##16384
11800     74 97 82 F1 |             sub     qq,apan4
11804     4B 99 32 FA |             scas    spl,qq
11808     00 62 03 F6 |             mov     rs4,0-0
1180c                 | 
1180c     B0 01 90 FD |             jmp     #p101
11810                 |             
11810                 | ' ------------  Channel 5
11810                 |  
11810     90 F0 07 F1 | p205        add     ptra,#36*4
11814     28 10 64 FD |             setq    #8               
11818     00 F1 06 FB |             rdlong  sstart5,ptra
1181c     90 F0 87 F1 |             sub     ptra, #36*4
11820                 | 
11820     A1 51 03 F6 |             mov     dt0,time5
11824     9C 51 83 F1 |             sub     dt0,time0
11828     7E 43 03 F1 |             add     time5,freq5  	
1182c                 | 
1182c                 | 	        
1182c     7F 8F 02 F1 |             add     p5,askip5
11830     7B 8F 1A F2 |             cmp     p5,lend5 wcz
11834     7B 8F 82 31 |     if_ge   sub     p5,lend5	        
11838     7A 8F 02 31 |     if_ge   add     p5,lstart5       
1183c     47 97 02 F6 |             mov     qq,p5
11840     78 97 02 F1 |             add     qq,sstart5
11844                 |             
11844     00 F2 0E F2 |             cmp     type5,#0 wz
11848     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1184c     08 98 66 50 |     if_nz   shl     spl,#8
11850     4B 99 E2 AA |     if_z    rdword  spl,qq
11854                 | 
11854     7C 99 32 FA |             scas    spl,vol5
11858     00 98 02 F6 |             mov     spl,0-0
1185c                 |     	
1185c     7D 99 32 FA |             scas    spl,apan5
11860     00 68 03 F6 |             mov     ls5,0-0
11864                 |             
11864     20 00 00 FF 
11868     00 96 06 F6 |             mov     qq,##16384
1186c     7D 97 82 F1 |             sub     qq,apan5
11870     4B 99 32 FA |             scas    spl,qq
11874     00 66 03 F6 |             mov     rs5,0-0
11878                 | 
11878     44 01 90 FD |             jmp     #p101
1187c                 |   
1187c                 | ' ------------  Channel 6
1187c                 |  
1187c     B4 F0 07 F1 | p206        add     ptra,#36*5
11880     28 10 64 FD |             setq    #8              
11884     00 03 07 FB |             rdlong  sstart6,ptra
11888     B4 F0 87 F1 |             sub     ptra, #36*5
1188c                 | 
1188c     A2 51 03 F6 |             mov       dt0,time6
11890     9C 51 83 F1 |             sub     dt0,time0
11894     87 45 03 F1 |             add     time6,freq6  	
11898                 | 	        
11898     88 91 02 F1 |             add     p6,askip6
1189c     84 91 1A F2 |             cmp     p6,lend6 wcz
118a0     84 91 82 31 |     if_ge   sub     p6,lend6	        
118a4     83 91 02 31 |     if_ge   add     p6,lstart6       
118a8     48 97 02 F6 |             mov     qq,p6
118ac     81 97 02 F1 |             add     qq,sstart6
118b0                 |             
118b0     00 04 0F F2 |             cmp     type6,#0 wz
118b4     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
118b8     08 98 66 50 |     if_nz   shl     spl,#8
118bc     4B 99 E2 AA |     if_z    rdword  spl,qq
118c0                 |           
118c0     85 99 32 FA |             scas    spl,vol6
118c4     00 98 02 F6 |             mov     spl,0-0
118c8                 |     	
118c8     86 99 32 FA |             scas    spl,apan6
118cc     00 6C 03 F6 |             mov     ls6,0-0
118d0                 |             
118d0     20 00 00 FF 
118d4     00 96 06 F6 |             mov     qq,##16384
118d8     86 97 82 F1 |             sub     qq,apan6
118dc     4B 99 32 FA |             scas    spl,qq
118e0     00 6A 03 F6 |             mov     rs6,0-0
118e4                 | 
118e4     D8 00 90 FD |             jmp     #p101
118e8                 |             
118e8                 | ' ------------  Channel 7
118e8                 |  
118e8     D8 F0 07 F1 | p207        add     ptra,#36*6
118ec     28 10 64 FD |             setq    #8              ' 
118f0     00 15 07 FB |             rdlong  sstart7,ptra
118f4     D8 F0 87 F1 |             sub     ptra, #36*6
118f8                 | 
118f8     A3 51 03 F6 |             mov     dt0,time7
118fc     9C 51 83 F1 |             sub     dt0,time0
11900     90 47 03 F1 |             add     time7,freq7  	
11904                 | 	        
11904     91 93 02 F1 |             add     p7,askip7
11908     8D 93 1A F2 |             cmp     p7,lend7 wcz
1190c     8D 93 82 31 |     if_ge   sub     p7,lend7	        
11910     8C 93 02 31 |     if_ge   add     p7,lstart7       
11914     49 97 02 F6 |             mov     qq,p7
11918     8A 97 02 F1 |             add     qq,sstart7
1191c                 |             
1191c     00 16 0F F2 |             cmp     type7,#0 wz
11920     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
11924     08 98 66 50 |     if_nz   shl     spl,#8
11928     4B 99 E2 AA |     if_z    rdword  spl,qq
1192c                 | 
1192c     8E 99 32 FA |             scas    spl,vol7
11930     00 98 02 F6 |             mov     spl,0-0
11934                 |     	
11934     8F 99 32 FA |             scas    spl,apan7
11938     00 70 03 F6 |             mov     ls7,0-0
1193c                 |             
1193c     20 00 00 FF 
11940     00 96 06 F6 |             mov     qq,##16384
11944     8F 97 82 F1 |             sub     qq,apan7
11948     4B 99 32 FA |             scas    spl,qq
1194c     00 6E 03 F6 |             mov     rs7,0-0
11950                 | 
11950     6C 00 90 FD |             jmp     #p101     
11954                 |                    
11954                 | ' ------------  Channel 8
11954                 |  
11954     FC F0 07 F1 | p208        add     ptra,#36*7
11958     28 10 64 FD |             setq    #8              
1195c     00 27 07 FB |             rdlong  sstart8,ptra
11960     FC F0 87 F1 |             sub     ptra, #36*7
11964                 |  
11964     A4 51 03 F6 |             mov     dt0,time8
11968     9C 51 83 F1 |             sub     dt0,time0
1196c     99 49 03 F1 |             add     time8,freq8  	
11970                 | 	        
11970     9A 95 02 F1 |             add     p8,askip8
11974     96 95 1A F2 |             cmp     p8,lend8 wcz
11978     96 95 82 31 |     if_ge   sub     p8,lend8	        
1197c     95 95 02 31 |     if_ge   add     p8,lstart8       
11980     4A 97 02 F6 |             mov     qq,p8
11984     93 97 02 F1 |             add     qq,sstart8
11988                 |             
11988     00 28 0F F2 |             cmp     type8,#0 wz
1198c     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
11990     08 98 66 50 |     if_nz   shl     spl,#8
11994     4B 99 E2 AA |     if_z    rdword  spl,qq
11998                 | 
11998     97 99 32 FA |             scas    spl,vol8
1199c     00 98 02 F6 |             mov     spl,0-0
119a0                 |     	
119a0     98 99 32 FA |             scas    spl,apan8
119a4     00 74 03 F6 |             mov     ls8,0-0
119a8                 |             
119a8     20 00 00 FF 
119ac     00 96 06 F6 |             mov     qq,##16384
119b0     98 97 82 F1 |             sub     qq,apan8
119b4     4B 99 32 FA |             scas    spl,qq
119b8     00 72 03 F6 |             mov     rs8,0-0
119bc                 | 
119bc     00 00 90 FD |             jmp     #p101            
119c0                 |             
119c0                 | '------------------------ Channels end here --------------------       
119c0                 | 
119c0                 | ' Now add all channels and put the sample to the buffer    
119c0                 | 
119c0                 | 
119c0     9C 4B 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
119c4     02 9A 86 A1 |     if_z    sub     front,#2         ' 
119c8     FF 9B 06 A5 |     if_z    and     front,#511     
119cc                 |   
119cc     00 54 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
119d0     00 52 07 F6 |             mov     ls,#0
119d4     AC 55 03 F1 |             add     rs,rs1
119d8     AE 55 03 F1 |             add     rs,rs2
119dc     B0 55 03 F1 |             add     rs,rs3
119e0     B1 55 03 F1 |             add     rs,rs4
119e4     B3 55 03 F1 |             add     rs,rs5
119e8     B5 55 03 F1 |             add     rs,rs6
119ec     B7 55 03 F1 |             add     rs,rs7
119f0     B9 55 03 F1 |             add     rs,rs8
119f4                 |             
119f4     AB 53 03 F1 |             add     ls,ls1
119f8     AD 53 03 F1 |             add     ls,ls2
119fc     AF 53 03 F1 |             add     ls,ls3
11a00     B2 53 03 F1 |             add     ls,ls4
11a04     B4 53 03 F1 |             add     ls,ls5
11a08     B6 53 03 F1 |             add     ls,ls6
11a0c     B8 53 03 F1 |             add     ls,ls7
11a10     BA 53 03 F1 |             add     ls,ls8
11a14                 |  		
11a14     0F 52 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
11a18     0F 54 E7 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
11a1c                 | 		    
11a1c     A9 55 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
11a20     AA 71 02 F6 |             mov newsample, rs
11a24                 | 
11a24     9C 4B 03 F6 |             mov     oldt0,time0      ' update global time
11a28     A8 39 03 F1 |             add     time0,dt0     
11a2c                 |             
11a2c                 |                                      ' now push dt0 samples to the buffer
11a2c     00 50 0F F2 |             cmp      dt0,#0 wz
11a30     D0 FB 9F AD |     if_z    jmp      #loop1
11a34     A8 75 02 F6 |             mov      t1,dt0
11a38                 |   
11a38     F9 77 02 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
11a3c     01 76 86 F1 |             sub     t2,#1
11a40     FF 77 06 F5 |             and     t2,#511
11a44     4D 77 1A F2 |             cmp     t2,front wcz
11a48     EC FF 9F AD |     if_e    jmp     #p301    
11a4c                 |     
11a4c     4D 71 32 FC |             wrlut   newsample, front
11a50     01 9A 06 F1 |             add     front,#1
11a54     FF 9B 06 F5 |             and     front,#511
11a58     F7 75 6E FB |             djnz    t1,#p301
11a5c     78 FB 9F FD |             jmp     #loop            'loop
11a60                 | 
11a60                 | '-------------------------------------------------------------------------
11a60                 | '------------------ This is the end of the main loop ---------------------
11a60                 | '-------------------------------------------------------------------------
11a60                 | 
11a60                 | '--------------------------------------------------------------------------
11a60                 | '------ Interrupt service -------------------------------------------------
11a60                 | '------ Output the sample, get the next one if exists ---------------------
11a60                 | '--------------------------------------------------------------------------
11a60                 | 
11a60     0E 9E 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
11a64     0F A0 26 FC |             wypin   rsample,#right       '4
11a68                 |            
11a68     4D F3 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
11a6c     F5 FF 3B AB |     if_e    reti1                        '8/10
11a70                 | 
11a70     E1 A3 A6 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
11a74     51 A1 3A F9 |           	getword rsample,lsnext,#1    '13
11a78     51 9F 32 F9 |           	getword lsample,lsnext,#0    '15
11a7c     F5 FF 3B FB |             reti1                        '17/19 
11a80                 |           
11a80                 | '---------------------------------------------------------------------------
11a80                 | '-------- End of interrupt -------------------------------------------------
11a80                 | '---------------------------------------------------------------------------    
11a80                 | 
11a80                 | 
11a80                 | '---------------------------------------------------------------------------
11a80                 | '------- Variables ---------------------------------------------------------
11a80                 | '---------------------------------------------------------------------------
11a80                 | 
11a80                 | ' constants
11a80                 | 
11a80     FF FF FF 1F | a1fffffff long $1fffffff
11a84     00 00 00 20 | a20000000 long $20000000
11a88     00 00 00 21 | a21000000 long $21000000
11a8c     00 00 00 00 | newsample long 0
11a90     FF FF 00 00 | affff long $ffff
11a94     00 00 00 00 | t1 long 0
11a98     00 00 00 00 | t2 long 0
11a9c     00 00 00 00 | nl long 0
11aa0     00 00 00 00 | nr long 0
11aa4     00 00 00 00 | nrsample long 0
11aa8     00 00 00 00 | nlsample long 0
11aac     1F 00 00 00 | fl long 31
11ab0     1F 00 00 00 | fr long 31
11ab4     00 00 00 00 | d long 0
11ab8                 | ' phase accumulators
11ab8                 | 
11ab8     00 00 00 00 | p1          long 0
11abc     00 00 00 00 | p2          long 0
11ac0     00 00 00 00 | p3          long 0
11ac4     00 00 00 00 | p4          long 0
11ac8     00 00 00 00 | p5          long 0
11acc     00 00 00 00 | p6          long 0
11ad0     00 00 00 00 | p7          long 0
11ad4     00 00 00 00 | p8          long 0
11ad8                 | 
11ad8                 | ' temporary variables 
11ad8                 | 
11ad8     00 00 00 00 | qq          long 0
11adc     00 00 00 00 | spl         long 0
11ae0                 | 
11ae0                 | ' circular buffer in LUT
11ae0                 | 
11ae0     00 00 00 00 | front       long 0
11ae4                 | 'tail        long 0
11ae4                 | 
11ae4                 | ' Interrupt ISR variables
11ae4                 | 
11ae4     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
11ae8     00 00 00 00 | lsample     long 0
11aec     00 00 00 00 | rsample     long 0
11af0     00 00 00 00 | lsnext      long 0
11af4     00 00 00 00 | rsnext      long 0 
11af8     00 00 00 00 | irqtime     long 0
11afc                 | 
11afc                 | ' Channel 1 registers. TODO - optimize the memory usage
11afc                 | 
11afc     00 00 00 00 | sstart1     long 0       ' Sample start pointer
11b00     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
11b04     00 00 00 00 | lstart1     long 0       ' Loop start
11b08     02 00 00 00 | lend1       long 2       ' Loop end
11b0c     00 00 00 00 | vol1        long 0       ' volume, 0..16384
11b10     00 00 00 00 | apan1       long 0       ' pan, 0..16384
11b14     65 00 00 00 | freq1       long 101     ' frequency divider
11b18     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
11b1c     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
11b20                 | 
11b20                 | ' Channel 2 registers
11b20                 | 
11b20     00 00 00 00 | sstart2     long 0
11b24     00 00 00 00 | type2       long 0
11b28     00 00 00 00 | lstart2     long 0
11b2c     02 00 00 00 | lend2       long 2        		
11b30     00 00 00 00 | vol2        long 0
11b34     00 00 00 00 | apan2       long 0
11b38     67 00 00 00 | freq2       long 103
11b3c     02 00 00 00 | askip2      long 2
11b40     00 00 00 00 | acmd2       long 0
11b44                 | 
11b44                 | ' Channel 3 registers
11b44                 | 
11b44     00 00 00 00 | sstart3     long 0
11b48     00 00 00 00 | type3       long 0
11b4c     00 00 00 00 | lstart3     long 0
11b50     02 00 00 00 | lend3       long 2       		'
11b54     00 00 00 00 | vol3        long 0
11b58     00 00 00 00 | apan3       long 0
11b5c     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
11b60     02 00 00 00 | askip3      long 2
11b64     00 00 00 00 | acmd3       long 0
11b68                 | 
11b68                 | ' Channel 4 registers
11b68                 | 
11b68     00 00 00 00 | sstart4     long 0
11b6c     00 00 00 00 | type4       long 0
11b70     00 00 00 00 | lstart4     long 0
11b74     02 00 00 00 | lend4       long 2       		'
11b78     00 00 00 00 | vol4        long 0
11b7c     00 00 00 00 | apan4       long 0
11b80     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
11b84     02 00 00 00 | askip4      long 2
11b88     00 00 00 00 | acmd4       long 0
11b8c                 | 
11b8c                 | ' Channel 5 registers
11b8c                 | 
11b8c     00 00 00 00 | sstart5     long 0
11b90     00 00 00 00 | type5       long 0
11b94     00 00 00 00 | lstart5     long 0
11b98     02 00 00 00 | lend5       long 2       		'
11b9c     00 00 00 00 | vol5        long 0
11ba0     00 00 00 00 | apan5       long 0
11ba4     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
11ba8     02 00 00 00 | askip5      long 2
11bac     00 00 00 00 | acmd5       long 0
11bb0                 | 
11bb0                 | ' Channel 6 registers
11bb0                 | 
11bb0     00 00 00 00 | sstart6     long 0
11bb4     00 00 00 00 | type6       long 0
11bb8     00 00 00 00 | lstart6     long 0
11bbc     02 00 00 00 | lend6       long 2       		'
11bc0     00 00 00 00 | vol6        long 0
11bc4     00 00 00 00 | apan6       long 0
11bc8     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
11bcc     02 00 00 00 | askip6      long 2
11bd0     00 00 00 00 | acmd6       long 0
11bd4                 | 
11bd4                 | ' Channel 7 registers
11bd4                 | 
11bd4     00 00 00 00 | sstart7     long 0
11bd8     00 00 00 00 | type7       long 0
11bdc     00 00 00 00 | lstart7     long 0
11be0     02 00 00 00 | lend7       long 2       		'
11be4     00 00 00 00 | vol7        long 0
11be8     00 00 00 00 | apan7       long 0
11bec     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
11bf0     02 00 00 00 | askip7      long 2
11bf4     00 00 00 00 | acmd7       long 0
11bf8                 | 
11bf8                 | ' Channel 8 registers
11bf8                 | 
11bf8     00 00 00 00 | sstart8     long 0
11bfc     00 00 00 00 | type8       long 0
11c00     00 00 00 00 | lstart8     long 0
11c04     02 00 00 00 | lend8       long 2       		'
11c08     00 00 00 00 | vol8        long 0
11c0c     00 00 00 00 | apan8       long 0
11c10     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
11c14     02 00 00 00 | askip8      long 2
11c18     00 00 00 00 | acmd8       long 0
11c1c                 | 
11c1c                 | ' Time variables
11c1c                 | 
11c1c     00 00 00 00 | time0       long 0    ' Global sample computing time
11c20     01 00 00 00 | time1       long 1    ' Local channels time
11c24     02 00 00 00 | time2       long 2
11c28     03 00 00 00 | time3       long 3
11c2c     04 00 00 00 | time4       long 4
11c30     05 00 00 00 | time5       long 5
11c34     06 00 00 00 | time6       long 6
11c38     07 00 00 00 | time7       long 7
11c3c     08 00 00 00 | time8       long 8
11c40                 | 
11c40     00 00 00 00 | oldt0       long 0    'Temporary time variables
11c44     00 00 00 00 | cn          long 0
11c48     00 00 00 00 | ct          long 0
11c4c     00 00 00 00 | dt0         long 0
11c50                 | 
11c50                 | ' Samples
11c50                 | 
11c50     00 00 00 00 | ls          long 0    ' Global sample variable
11c54     00 00 00 00 | rs          long 0
11c58                 | 
11c58     00 00 00 00 | ls1         long 0    ' Channel samples
11c5c     00 00 00 00 | rs1         long 0
11c60     00 00 00 00 | ls2         long 0
11c64     00 00 00 00 | rs2         long 0
11c68     00 00 00 00 | ls3         long 0
11c6c     00 00 00 00 | rs3         long 0
11c70     00 00 00 00 | rs4         long 0
11c74     00 00 00 00 | ls4         long 0
11c78     00 00 00 00 | rs5         long 0
11c7c     00 00 00 00 | ls5         long 0
11c80     00 00 00 00 | rs6         long 0
11c84     00 00 00 00 | ls6         long 0
11c88     00 00 00 00 | rs7         long 0
11c8c     00 00 00 00 | ls7         long 0
11c90     00 00 00 00 | rs8         long 0
11c94     00 00 00 00 | ls8         long 0
11c98                 | 
11c98     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
11c9c                 | 
11c9c     00 00 00 00 
11ca0     00 00 00 00 | null  			long 	0,0           ' for channel reset
11ca4     73 32 00 04 
11ca8     00 00 10 00 
11cac     00 00 00 00 
11cb0     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
11cb4     00 00 C9 00 
11cb8     92 01 5B 02 
11cbc     24 03 ED 03 
11cc0     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
11cc4     48 06 11 07 
11cc8     D9 07 A2 08 
11ccc     6A 09 33 0A 
11cd0     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
11cd4     8C 0C 54 0D 
11cd8     1C 0E E3 0E 
11cdc     AB 0F 72 10 
11ce0     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
11ce4     C8 12 8F 13 
11ce8     55 14 1C 15 
11cec     E2 15 A8 16 
11cf0     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
11cf4     F9 18 BE 19 
11cf8     82 1A 47 1B 
11cfc     0B 1C CF 1C 
11d00     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
11d04     1A 1F DD 1F 
11d08     9F 20 61 21 
11d0c     23 22 E5 22 
11d10     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
11d14     28 25 E8 25 
11d18     A8 26 67 27 
11d1c     26 28 E5 28 
11d20     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
11d24     1F 2B DC 2B 
11d28     99 2C 55 2D 
11d2c     11 2E CC 2E 
11d30     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
11d34     FB 30 B5 31 
11d38     6E 32 26 33 
11d3c     DF 33 96 34 
11d40     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
11d44     BA 36 6F 37 
11d48     24 38 D9 38 
11d4c     8C 39 40 3A 
11d50     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
11d54     56 3C 07 3D 
11d58     B8 3D 68 3E 
11d5c     17 3F C5 3F 
11d60     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
11d64     CE 41 7A 42 
11d68     25 43 D0 43 
11d6c     7A 44 24 45 
11d70     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
11d74     1C 47 C3 47 
11d78     69 48 0F 49 
11d7c     B4 49 58 4A 
11d80     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
11d84     3F 4C E0 4C 
11d88     81 4D 20 4E 
11d8c     BF 4E 5D 4F 
11d90     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
11d94     33 51 CE 51 
11d98     68 52 02 53 
11d9c     9B 53 32 54 
11da0     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
11da4     F5 55 8A 56 
11da8     1D 57 B0 57 
11dac     42 58 D3 58 
11db0     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
11db4     82 5A 0F 5B 
11db8     9C 5B 28 5C 
11dbc     B3 5C 3E 5D 
11dc0     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
11dc4     D7 5E 5D 5F 
11dc8     E3 5F 68 60 
11dcc     EB 60 6E 61 
11dd0     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
11dd4     F1 62 70 63 
11dd8     EE 63 6C 64 
11ddc     E8 64 63 65 
11de0     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
11de4     CF 66 46 67 
11de8     BC 67 32 68 
11dec     A6 68 19 69 
11df0     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
11df4     6D 6A DC 6A 
11df8     4A 6B B7 6B 
11dfc     23 6C 8E 6C 
11e00     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
11e04     C9 6D 30 6E 
11e08     96 6E FB 6E 
11e0c     5E 6F C1 6F 
11e10     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
11e14     E2 70 40 71 
11e18     9D 71 F9 71 
11e1c     54 72 AE 72 
11e20     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
11e24     B5 73 0A 74 
11e28     5F 74 B2 74 
11e2c     04 75 55 75 
11e30     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
11e34     41 76 8D 76 
11e38     D8 76 22 77 
11e3c     6B 77 B3 77 
11e40     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
11e44     84 78 C7 78 
11e48     09 79 4A 79 
11e4c     89 79 C8 79 
11e50     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
11e54     7C 7A B6 7A 
11e58     EE 7A 26 7B 
11e5c     5C 7B 91 7B 
11e60     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
11e64     29 7C 59 7C 
11e68     88 7C B6 7C 
11e6c     E3 7C 0E 7D 
11e70     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
11e74     89 7D B0 7D 
11e78     D5 7D FA 7D 
11e7c     1D 7E 3E 7E 
11e80     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
11e84     9C 7E B9 7E 
11e88     D5 7E EF 7E 
11e8c     09 7F 21 7F 
11e90     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
11e94     61 7F 74 7F 
11e98     86 7F 97 7F 
11e9c     A6 7F B4 7F 
11ea0     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
11ea4     D8 7F E1 7F 
11ea8     E9 7F F0 7F 
11eac     F5 7F F9 7F 
11eb0     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
11eb4     FF 7F FE 7F 
11eb8     FD 7F F9 7F 
11ebc     F5 7F F0 7F 
11ec0     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
11ec4     D8 7F CD 7F 
11ec8     C1 7F B4 7F 
11ecc     A6 7F 97 7F 
11ed0     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
11ed4     61 7F 4D 7F 
11ed8     37 7F 21 7F 
11edc     09 7F EF 7E 
11ee0     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
11ee4     9C 7E 7E 7E 
11ee8     5F 7E 3E 7E 
11eec     1D 7E FA 7D 
11ef0     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
11ef4     89 7D 62 7D 
11ef8     39 7D 0E 7D 
11efc     E3 7C B6 7C 
11f00     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
11f04     29 7C F8 7B 
11f08     C5 7B 91 7B 
11f0c     5C 7B 26 7B 
11f10     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
11f14     7C 7A 41 7A 
11f18     05 7A C8 79 
11f1c     89 79 4A 79 
11f20     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
11f24     84 78 3F 78 
11f28     FA 77 B3 77 
11f2c     6B 77 22 77 
11f30     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
11f34     41 76 F3 75 
11f38     A5 75 55 75 
11f3c     04 75 B2 74 
11f40     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
11f44     B5 73 5E 73 
11f48     07 73 AE 72 
11f4c     54 72 F9 71 
11f50     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
11f54     E2 70 83 70 
11f58     22 70 C1 6F 
11f5c     5E 6F FB 6E 
11f60     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
11f64     C9 6D 61 6D 
11f68     F8 6C 8E 6C 
11f6c     23 6C B7 6B 
11f70     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
11f74     6D 6A FD 69 
11f78     8B 69 19 69 
11f7c     A6 68 32 68 
11f80     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
11f84     CF 66 56 66 
11f88     DD 65 63 65 
11f8c     E8 64 6C 64 
11f90     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
11f94     F1 62 71 62 
11f98     F0 61 6E 61 
11f9c     EB 60 68 60 
11fa0     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
11fa4     D7 5E 4F 5E 
11fa8     C7 5D 3E 5D 
11fac     B3 5C 28 5C 
11fb0     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
11fb4     82 5A F3 59 
11fb8     64 59 D3 58 
11fbc     42 58 B0 57 
11fc0     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
11fc4     F5 55 60 55 
11fc8     C9 54 32 54 
11fcc     9B 53 02 53 
11fd0     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
11fd4     33 51 97 50 
11fd8     FB 4F 5D 4F 
11fdc     BF 4E 20 4E 
11fe0     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
11fe4     3F 4C 9D 4B 
11fe8     FB 4A 58 4A 
11fec     B4 49 0F 49 
11ff0     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
11ff4     1C 47 75 46 
11ff8     CD 45 24 45 
11ffc     7A 44 D0 43 
12000     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
12004     CE 41 21 41 
12008     73 40 C5 3F 
1200c     17 3F 68 3E 
12010     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
12014     56 3C A5 3B 
12018     F2 3A 40 3A 
1201c     8C 39 D9 38 
12020     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
12024     BA 36 04 36 
12028     4D 35 96 34 
1202c     DF 33 26 33 
12030     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
12034     FB 30 41 30 
12038     87 2F CC 2E 
1203c     11 2E 55 2D 
12040     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
12044     1F 2B 61 2A 
12048     A3 29 E5 28 
1204c     26 28 67 27 
12050     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
12054     28 25 67 24 
12058     A6 23 E5 22 
1205c     23 22 61 21 
12060     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
12064     1A 1F 57 1E 
12068     93 1D CF 1C 
1206c     0B 1C 47 1B 
12070     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
12074     F9 18 33 18 
12078     6E 17 A8 16 
1207c     E2 15 1C 15 
12080     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
12084     C8 12 01 12 
12088     3A 11 72 10 
1208c     AB 0F E3 0E 
12090     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
12094     8C 0C C4 0B 
12098     FB 0A 33 0A 
1209c     6A 09 A2 08 
120a0     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
120a4     48 06 7F 05 
120a8     B6 04 ED 03 
120ac     24 03 5B 02 
120b0     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
120b4     00 00 37 FF 
120b8     6E FE A5 FD 
120bc     DC FC 13 FC 
120c0     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
120c4     B8 F9 EF F8 
120c8     27 F8 5E F7 
120cc     96 F6 CD F5 
120d0     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
120d4     74 F3 AC F2 
120d8     E4 F1 1D F1 
120dc     55 F0 8E EF 
120e0     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
120e4     38 ED 71 EC 
120e8     AB EB E4 EA 
120ec     1E EA 58 E9 
120f0     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
120f4     07 E7 42 E6 
120f8     7E E5 B9 E4 
120fc     F5 E3 31 E3 
12100     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
12104     E6 E0 23 E0 
12108     61 DF 9F DE 
1210c     DD DD 1B DD 
12110     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
12114     D8 DA 18 DA 
12118     58 D9 99 D8 
1211c     DA D7 1B D7 
12120     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
12124     E1 D4 24 D4 
12128     67 D3 AB D2 
1212c     EF D1 34 D1 
12130     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
12134     05 CF 4B CE 
12138     92 CD DA CC 
1213c     21 CC 6A CB 
12140     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
12144     46 C9 91 C8 
12148     DC C7 27 C7 
1214c     74 C6 C0 C5 
12150     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
12154     AA C3 F9 C2 
12158     48 C2 98 C1 
1215c     E9 C0 3B C0 
12160     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
12164     32 BE 86 BD 
12168     DB BC 30 BC 
1216c     86 BB DC BA 
12170     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
12174     E4 B8 3D B8 
12178     97 B7 F1 B6 
1217c     4C B6 A8 B5 
12180     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
12184     C1 B3 20 B3 
12188     7F B2 E0 B1 
1218c     41 B1 A3 B0 
12190     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
12194     CD AE 32 AE 
12198     98 AD FE AC 
1219c     65 AC CE AB 
121a0     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
121a4     0B AA 76 A9 
121a8     E3 A8 50 A8 
121ac     BE A7 2D A7 
121b0     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
121b4     7E A5 F1 A4 
121b8     64 A4 D8 A3 
121bc     4D A3 C2 A2 
121c0     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
121c4     29 A1 A3 A0 
121c8     1D A0 98 9F 
121cc     15 9F 92 9E 
121d0     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
121d4     0F 9D 90 9C 
121d8     12 9C 94 9B 
121dc     18 9B 9D 9A 
121e0     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
121e4     31 99 BA 98 
121e8     44 98 CE 97 
121ec     5A 97 E7 96 
121f0     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
121f4     93 95 24 95 
121f8     B6 94 49 94 
121fc     DD 93 72 93 
12200     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
12204     37 92 D0 91 
12208     6A 91 05 91 
1220c     A2 90 3F 90 
12210     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
12214     1E 8F C0 8E 
12218     63 8E 07 8E 
1221c     AC 8D 52 8D 
12220     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
12224     4B 8C F6 8B 
12228     A1 8B 4E 8B 
1222c     FC 8A AB 8A 
12230     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
12234     BF 89 73 89 
12238     28 89 DE 88 
1223c     95 88 4D 88 
12240     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
12244     7C 87 39 87 
12248     F7 86 B6 86 
1224c     77 86 38 86 
12250     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
12254     84 85 4A 85 
12258     12 85 DA 84 
1225c     A4 84 6F 84 
12260     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
12264     D7 83 A7 83 
12268     78 83 4A 83 
1226c     1D 83 F2 82 
12270     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
12274     77 82 50 82 
12278     2B 82 06 82 
1227c     E3 81 C2 81 
12280     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
12284     64 81 47 81 
12288     2B 81 11 81 
1228c     F7 80 DF 80 
12290     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
12294     9F 80 8C 80 
12298     7A 80 69 80 
1229c     5A 80 4C 80 
122a0     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
122a4     28 80 1F 80 
122a8     17 80 10 80 
122ac     0B 80 07 80 
122b0     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
122b4     01 80 02 80 
122b8     03 80 07 80 
122bc     0B 80 10 80 
122c0     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
122c4     28 80 33 80 
122c8     3F 80 4C 80 
122cc     5A 80 69 80 
122d0     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
122d4     9F 80 B3 80 
122d8     C9 80 DF 80 
122dc     F7 80 11 81 
122e0     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
122e4     64 81 82 81 
122e8     A1 81 C2 81 
122ec     E3 81 06 82 
122f0     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
122f4     77 82 9E 82 
122f8     C7 82 F2 82 
122fc     1D 83 4A 83 
12300     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
12304     D7 83 08 84 
12308     3B 84 6F 84 
1230c     A4 84 DA 84 
12310     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
12314     84 85 BF 85 
12318     FB 85 38 86 
1231c     77 86 B6 86 
12320     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
12324     7C 87 C1 87 
12328     06 88 4D 88 
1232c     95 88 DE 88 
12330     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
12334     BF 89 0D 8A 
12338     5B 8A AB 8A 
1233c     FC 8A 4E 8B 
12340     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
12344     4B 8C A2 8C 
12348     F9 8C 52 8D 
1234c     AC 8D 07 8E 
12350     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
12354     1E 8F 7D 8F 
12358     DE 8F 3F 90 
1235c     A2 90 05 91 
12360     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
12364     37 92 9F 92 
12368     08 93 72 93 
1236c     DD 93 49 94 
12370     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
12374     93 95 03 96 
12378     75 96 E7 96 
1237c     5A 97 CE 97 
12380     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
12384     31 99 AA 99 
12388     23 9A 9D 9A 
1238c     18 9B 94 9B 
12390     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
12394     0F 9D 8F 9D 
12398     10 9E 92 9E 
1239c     15 9F 98 9F 
123a0     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
123a4     29 A1 B1 A1 
123a8     39 A2 C2 A2 
123ac     4D A3 D8 A3 
123b0     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
123b4     7E A5 0D A6 
123b8     9C A6 2D A7 
123bc     BE A7 50 A8 
123c0     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
123c4     0B AA A0 AA 
123c8     37 AB CE AB 
123cc     65 AC FE AC 
123d0     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
123d4     CD AE 69 AF 
123d8     05 B0 A3 B0 
123dc     41 B1 E0 B1 
123e0     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
123e4     C1 B3 63 B4 
123e8     05 B5 A8 B5 
123ec     4C B6 F1 B6 
123f0     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
123f4     E4 B8 8B B9 
123f8     33 BA DC BA 
123fc     86 BB 30 BC 
12400     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
12404     32 BE DF BE 
12408     8D BF 3B C0 
1240c     E9 C0 98 C1 
12410     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
12414     AA C3 5B C4 
12418     0E C5 C0 C5 
1241c     74 C6 27 C7 
12420     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
12424     46 C9 FC C9 
12428     B3 CA 6A CB 
1242c     21 CC DA CC 
12430     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
12434     05 CF BF CF 
12438     79 D0 34 D1 
1243c     EF D1 AB D2 
12440     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
12444     E1 D4 9F D5 
12448     5D D6 1B D7 
1244c     DA D7 99 D8 
12450     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
12454     D8 DA 99 DB 
12458     5A DC 1B DD 
1245c     DD DD 9F DE 
12460     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
12464     E6 E0 A9 E1 
12468     6D E2 31 E3 
1246c     F5 E3 B9 E4 
12470     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
12474     07 E7 CD E7 
12478     92 E8 58 E9 
1247c     1E EA E4 EA 
12480     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
12484     38 ED FF ED 
12488     C6 EE 8E EF 
1248c     55 F0 1D F1 
12490     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
12494     74 F3 3C F4 
12498     05 F5 CD F5 
1249c     96 F6 5E F7 
124a0     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
124a4     B8 F9 81 FA 
124a8     4A FB 13 FC 
124ac     DC FC A5 FD 
124b0     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
124b4                 | 	alignl
124b4                 | __system__dat_
124b4     00 00 00 00 
124b8     00 00 00 00 | 	byte	$00[8]
124bc     03 00 00 00 
124c0     00 00 00 00 
124c4     00 00 00 00 
124c8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
124cc     00 00 00 00 
124d0     00 00 00 00 
124d4     00 00 00 00 | 	byte	$00[12]
124d8     05 00 00 00 
124dc     00 00 00 00 
124e0     00 00 00 00 
124e4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
124e8     B0 26 01 00 | 	long	@@@__system__dat_ + 508
124ec     B8 26 01 00 | 	long	@@@__system__dat_ + 516
124f0     00 00 00 00 | 	byte	$00, $00, $00, $00
124f4     C0 26 01 00 | 	long	@@@__system__dat_ + 524
124f8     C8 26 01 00 | 	long	@@@__system__dat_ + 532
124fc     00 00 00 00 
12500     00 00 00 00 | 	byte	$00[8]
12504     01 00 00 00 
12508     06 00 00 00 
1250c     00 00 00 00 
12510     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12514     00 00 00 00 | 	byte	$00, $00, $00, $00
12518     D0 26 01 00 | 	long	@@@__system__dat_ + 540
1251c     D8 26 01 00 | 	long	@@@__system__dat_ + 548
12520     00 00 00 00 | 	byte	$00, $00, $00, $00
12524     E0 26 01 00 | 	long	@@@__system__dat_ + 556
12528     E8 26 01 00 | 	long	@@@__system__dat_ + 564
1252c     00 00 00 00 
12530     00 00 00 00 | 	byte	$00[8]
12534     01 00 00 00 
12538     06 00 00 00 
1253c     00 00 00 00 
12540     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12544     00 00 00 00 | 	byte	$00, $00, $00, $00
12548     F0 26 01 00 | 	long	@@@__system__dat_ + 572
1254c     F8 26 01 00 | 	long	@@@__system__dat_ + 580
12550     00 00 00 00 | 	byte	$00, $00, $00, $00
12554     00 27 01 00 | 	long	@@@__system__dat_ + 588
12558     08 27 01 00 | 	long	@@@__system__dat_ + 596
1255c     00 00 00 00 
      ...             
126ac     00 00 00 00 
126b0     00 00 00 00 | 	byte	$00[344]
126b4     F0 5F 00 00 | 	long	@@@__system___tx
126b8     00 00 00 00 | 	byte	$00, $00, $00, $00
126bc     38 60 00 00 | 	long	@@@__system___rx
126c0     00 00 00 00 | 	byte	$00, $00, $00, $00
126c4     20 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
126c8     00 00 00 00 | 	byte	$00, $00, $00, $00
126cc     98 7A 00 00 | 	long	@@@__system____dummy_flush_0175
126d0     00 00 00 00 | 	byte	$00, $00, $00, $00
126d4     F0 5F 00 00 | 	long	@@@__system___tx
126d8     00 00 00 00 | 	byte	$00, $00, $00, $00
126dc     38 60 00 00 | 	long	@@@__system___rx
126e0     00 00 00 00 | 	byte	$00, $00, $00, $00
126e4     20 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
126e8     00 00 00 00 | 	byte	$00, $00, $00, $00
126ec     98 7A 00 00 | 	long	@@@__system____dummy_flush_0175
126f0     00 00 00 00 | 	byte	$00, $00, $00, $00
126f4     F0 5F 00 00 | 	long	@@@__system___tx
126f8     00 00 00 00 | 	byte	$00, $00, $00, $00
126fc     38 60 00 00 | 	long	@@@__system___rx
12700     00 00 00 00 | 	byte	$00, $00, $00, $00
12704     20 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
12708     00 00 00 00 | 	byte	$00, $00, $00, $00
1270c     98 7A 00 00 | 	long	@@@__system____dummy_flush_0175
12710     00 00 00 00 | 	byte	$00, $00, $00, $00
12714                 | __heap_base
12714     00 00 00 00 
      ...             
13714     00 00 00 00 
13718     00 00 00 00 | 	long	0[1026]
1371c                 | objmem
1371c     00 00 00 00 | 	long	0[1]
13720 118             | 	org	COG_BSS_START
13720 118             | _var01
13720 118             | 	res	1
13720 119             | _var02
13720 119             | 	res	1
13720 11a             | _var03
13720 11a             | 	res	1
13720 11b             | _var04
13720 11b             | 	res	1
13720 11c             | _var05
13720 11c             | 	res	1
13720 11d             | _var06
13720 11d             | 	res	1
13720 11e             | _var07
13720 11e             | 	res	1
13720 11f             | _var08
13720 11f             | 	res	1
13720 120             | _var09
13720 120             | 	res	1
13720 121             | _var10
13720 121             | 	res	1
13720 122             | _var11
13720 122             | 	res	1
13720 123             | _var12
13720 123             | 	res	1
13720 124             | _var13
13720 124             | 	res	1
13720 125             | _var14
13720 125             | 	res	1
13720 126             | _var15
13720 126             | 	res	1
13720 127             | _var16
13720 127             | 	res	1
13720 128             | _var17
13720 128             | 	res	1
13720 129             | _var18
13720 129             | 	res	1
13720 12a             | _var19
13720 12a             | 	res	1
13720 12b             | _var20
13720 12b             | 	res	1
13720 12c             | _var21
13720 12c             | 	res	1
13720 12d             | _var22
13720 12d             | 	res	1
13720 12e             | arg01
13720 12e             | 	res	1
13720 12f             | arg02
13720 12f             | 	res	1
13720 130             | arg03
13720 130             | 	res	1
13720 131             | arg04
13720 131             | 	res	1
13720 132             | arg05
13720 132             | 	res	1
13720 133             | arg06
13720 133             | 	res	1
13720 134             | arg07
13720 134             | 	res	1
13720 135             | local01
13720 135             | 	res	1
13720 136             | local02
13720 136             | 	res	1
13720 137             | local03
13720 137             | 	res	1
13720 138             | local04
13720 138             | 	res	1
13720 139             | local05
13720 139             | 	res	1
13720 13a             | local06
13720 13a             | 	res	1
13720 13b             | local07
13720 13b             | 	res	1
13720 13c             | local08
13720 13c             | 	res	1
13720 13d             | local09
13720 13d             | 	res	1
13720 13e             | local10
13720 13e             | 	res	1
13720 13f             | local11
13720 13f             | 	res	1
13720 140             | local12
13720 140             | 	res	1
13720 141             | local13
13720 141             | 	res	1
13720 142             | local14
13720 142             | 	res	1
13720 143             | local15
13720 143             | 	res	1
13720 144             | local16
13720 144             | 	res	1
13720 145             | local17
13720 145             | 	res	1
13720 146             | local18
13720 146             | 	res	1
13720 147             | local19
13720 147             | 	res	1
13720 148             | local20
13720 148             | 	res	1
13720 149             | local21
13720 149             | 	res	1
13720 14a             | local22
13720 14a             | 	res	1
13720 14b             | local23
13720 14b             | 	res	1
13720 14c             | local24
13720 14c             | 	res	1
13720 14d             | local25
13720 14d             | 	res	1
13720 14e             | local26
13720 14e             | 	res	1
13720 14f             | local27
13720 14f             | 	res	1
13720 150             | local28
13720 150             | 	res	1
13720 151             | local29
13720 151             | 	res	1
13720 152             | local30
13720 152             | 	res	1
13720 153             | local31
13720 153             | 	res	1
13720 154             | local32
13720 154             | 	res	1
13720 155             | local33
13720 155             | 	res	1
13720 156             | local34
13720 156             | 	res	1
13720 157             | local35
13720 157             | 	res	1
13720 158             | local36
13720 158             | 	res	1
13720 159             | local37
13720 159             | 	res	1
13720 15a             | local38
13720 15a             | 	res	1
13720 15b             | local39
13720 15b             | 	res	1
13720 15c             | local40
13720 15c             | 	res	1
13720 15d             | local41
13720 15d             | 	res	1
13720 15e             | local42
13720 15e             | 	res	1
13720 15f             | local43
13720 15f             | 	res	1
13720 160             | local44
13720 160             | 	res	1
13720 161             | local45
13720 161             | 	res	1
13720 162             | local46
13720 162             | 	res	1
13720 163             | local47
13720 163             | 	res	1
13720 164             | local48
13720 164             | 	res	1
13720 165             | local49
13720 165             | 	res	1
13720 166             | local50
13720 166             | 	res	1
13720 167             | local51
13720 167             | 	res	1
13720 168             | local52
13720 168             | 	res	1
13720 169             | local53
13720 169             | 	res	1
13720 16a             | local54
13720 16a             | 	res	1
13720 16b             | local55
13720 16b             | 	res	1
13720 16c             | local56
13720 16c             | 	res	1
13720 16d             | local57
13720 16d             | 	res	1
13720 16e             | local58
13720 16e             | 	res	1
13720 16f             | local59
13720 16f             | 	res	1
13720 170             | local60
13720 170             | 	res	1
13720 171             | local61
13720 171             | 	res	1
13720 172             | local62
13720 172             | 	res	1
13720 173             | local63
13720 173             | 	res	1
13720 174             | local64
13720 174             | 	res	1
13720 175             | local65
13720 175             | 	res	1
13720 176             | local66
13720 176             | 	res	1
13720 177             | local67
13720 177             | 	res	1
13720 178             | local68
13720 178             | 	res	1
13720 179             | local69
13720 179             | 	res	1
13720 17a             | local70
13720 17a             | 	res	1
13720 17b             | local71
13720 17b             | 	res	1
13720 17c             | local72
13720 17c             | 	res	1
13720 17d             | local73
13720 17d             | 	res	1
13720 17e             | local74
13720 17e             | 	res	1
13720 17f             | local75
13720 17f             | 	res	1
13720 180             | local76
13720 180             | 	res	1
13720 181             | local77
13720 181             | 	res	1
13720 182             | local78
13720 182             | 	res	1
13720 183             | local79
13720 183             | 	res	1
13720 184             | local80
13720 184             | 	res	1
13720 185             | muldiva_
13720 185             | 	res	1
13720 186             | muldivb_
13720 186             | 	res	1
13720 187             | 	fit	480
13720 187             | 
