00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 24 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 02 00 00 FF 
00414 004 48 F1 07 F1 | 	add	ptra, ##1352
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 58 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 4A 62 FD | 	cogid	arg01
00614 084 03 4A 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 25 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 4B 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 4D 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 4F 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 51 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 24 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 4E 56 F0 |         shr	arg03, #1 wc
00688 0a1 25 4D 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 4A 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 4C FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 4E 56 F0 |         shr	arg03, #1 wc
00698 0a5 25 4D 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 4A 06 C1 |  if_c   add	arg01, #2
006a0 0a7 26 4D 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 25 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 4E 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 27 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 4C 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 55 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 55 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 85 09 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0A 63 FD |        getqx   muldivb_
00740 0cf 19 08 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 84 09 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 85 0B 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 84 09 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 85 0B 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 24 06 F6 |     mov result1, #0
00778 0dd 00 26 06 F6 |     mov result2, #0
0077c 0de 25 07 02 F6 |     mov abortchain, arg01
00780 0df 25 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 4A 06 F1 |     add arg01, #4
00788 0e1 25 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 4A 06 F1 |     add arg01, #4
00790 0e3 25 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 4A 06 F1 |     add arg01, #4
00798 0e5 25 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 26 4B 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 25 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 4A 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 4A 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 26 25 02 F6 |     mov result1, arg02
007d4 0f4 01 26 06 F6 |     mov result2, #1
007d8 0f5 25 4D 02 FB |     rdlong arg02, arg01
007dc 0f6 04 4A 06 F1 |     add arg01, #4
007e0 0f7 25 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 4A 06 F1 |     add arg01, #4
007e8 0f9 25 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 4A 06 F1 |     add arg01, #4
007f0 0fb 25 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 4A 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 4E 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 40 84 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 48 94 00 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 AC 5A 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 F4 59 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a E0 81 00 00 | 	long	@__system__dat_
00830 10b             | ptr__hng030rm_spin2_dat__
00830 10b 7C 5D 00 00 | 	long	@_hng030rm_spin2_dat_
00834 10c             | ptr__hng030rm_spin2_putchar_
00834 10c 68 24 00 00 | 	long	@_hng030rm_spin2_putchar
00838 10d             | ptr__hng030rm_spin2_putpixel1_
00838 10d EC 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
0083c 10e             | ptr__hng030rm_spin2_putpixel2_
0083c 10e D4 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00840 10f             | ptr__hng030rm_spin2_putpixel4_
00840 10f AC 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
00844 110             | ptr__hng030rm_spin2_putpixel8_
00844 110 84 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00848 111             | ptr__retrocog_spin2_serialcog_
00848 111 00 31 00 00 | 	long	@_retrocog_spin2_serialcog
0084c 112             | result1
0084c 112 00 00 00 00 | 	long	0
00850 113             | result2
00850 113 00 00 00 00 | 	long	0
00854 114             | result3
00854 114 00 00 00 00 | 	long	0
00858 115             | COG_BSS_START
00858 115             | 	fit	480
00858                 | 	orgh
00858                 | hubentry
00858                 | 
00858                 | _program
00858     5A 5A 05 F6 | 	mov	COUNT_, #90
0085c     B0 00 A0 FD | 	call	#pushregs_
00860     40 54 06 F6 | 	mov	local01, #64
00864     2C 0E 06 F1 | 	add	objptr, #44
00868     07 57 02 F6 | 	mov	local02, objptr
0086c                 | ' 
0086c                 | ' ' initialize pointers and variables
0086c                 | ' 
0086c                 | ' border_ptr:=@bordercolor
0086c     24 0E 86 F1 | 	sub	objptr, #36
00870     07 57 62 FC | 	wrlong	local02, objptr
00874     08 00 00 FF 
00878     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
0087c                 | ' font_ptr:=@st_font
0087c     04 0E 86 F1 | 	sub	objptr, #4
00880     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
00884                 | ' hdmibase:=base
00884     20 0E 06 F1 | 	add	objptr, #32
00888     07 01 68 FC | 	wrlong	#0, objptr
0088c     24 0E 86 F1 | 	sub	objptr, #36
00890     0D 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00894                 | ' p1:=@putpixel1
00894     07 4B 02 F6 | 	mov	arg01, objptr
00898     08 00 00 FF 
0089c     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
008a0     A8 31 B0 FD | 	call	#__system___make_methodptr
008a4     12 59 02 F6 | 	mov	local03, result1
008a8     DC 0E 06 F1 | 	add	objptr, #220
008ac     07 59 62 FC | 	wrlong	local03, objptr
008b0     DC 0E 86 F1 | 	sub	objptr, #220
008b4     0E 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008b8                 | ' p2:=@putpixel2
008b8     07 4B 02 F6 | 	mov	arg01, objptr
008bc     8C 31 B0 FD | 	call	#__system___make_methodptr
008c0     12 59 02 F6 | 	mov	local03, result1
008c4     E0 0E 06 F1 | 	add	objptr, #224
008c8     07 59 62 FC | 	wrlong	local03, objptr
008cc     E0 0E 86 F1 | 	sub	objptr, #224
008d0     0F 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008d4                 | ' p4:=@putpixel4
008d4     07 4B 02 F6 | 	mov	arg01, objptr
008d8     70 31 B0 FD | 	call	#__system___make_methodptr
008dc     12 59 02 F6 | 	mov	local03, result1
008e0     E4 0E 06 F1 | 	add	objptr, #228
008e4     07 59 62 FC | 	wrlong	local03, objptr
008e8     E4 0E 86 F1 | 	sub	objptr, #228
008ec     10 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
008f0                 | ' p8:=@putpixel8
008f0     07 4B 02 F6 | 	mov	arg01, objptr
008f4     54 31 B0 FD | 	call	#__system___make_methodptr
008f8     12 59 02 F6 | 	mov	local03, result1
008fc     E8 0E 06 F1 | 	add	objptr, #232
00900     07 59 62 FC | 	wrlong	local03, objptr
00904     E8 0E 86 F1 | 	sub	objptr, #232
00908                 | ' 
00908                 | ' 
00908                 | ' ' the mode has to be set here to enable computing the buffer length
00908                 | ' 
00908                 | ' setmode(mode)
00908     40 4A 06 F6 | 	mov	arg01, #64
0090c     B0 1D B0 FD | 	call	#_hng030rm_spin2_setmode
00910     40 0E 06 F1 | 	add	objptr, #64
00914     07 5B 02 F6 | 	mov	local04, objptr
00918                 | ' 
00918                 | ' vblank_ptr:=@vblank
00918     34 0E 86 F1 | 	sub	objptr, #52
0091c     07 5B 62 FC | 	wrlong	local04, objptr
00920     28 0E 06 F1 | 	add	objptr, #40
00924     07 5D 02 F6 | 	mov	local05, objptr
00928                 | ' cursor_ptr:=@cursor_x
00928     24 0E 86 F1 | 	sub	objptr, #36
0092c     07 5D 62 FC | 	wrlong	local05, objptr
00930     88 0E 06 F1 | 	add	objptr, #136
00934     07 5F 02 F6 | 	mov	local06, objptr
00938                 | ' 
00938                 | ' fontnum_ptr:=@fontnum
00938     78 0E 86 F1 | 	sub	objptr, #120
0093c     07 5F 62 FC | 	wrlong	local06, objptr
00940                 | ' 
00940                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00940     78 0E 06 F1 | 	add	objptr, #120
00944     07 01 68 FC | 	wrlong	#0, objptr
00948     1C 0E 06 F1 | 	add	objptr, #28
0094c     07 4B 02 F6 | 	mov	arg01, objptr
00950     B4 0E 86 F1 | 	sub	objptr, #180
00954     0F 00 00 FF 
00958     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
0095c     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00960     0F 00 00 FF 
00964     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00968                 | ' bytemove(@colors,@vgacolors,16)
00968     10 4E 06 F6 | 	mov	arg03, #16
0096c     B4 2F B0 FD | 	call	#__system____builtin_memmove
00970                 | ' 
00970                 | ' ' initialize a cursor
00970                 | ' 
00970                 | ' cursor_x:=0
00970     34 0E 06 F1 | 	add	objptr, #52
00974     07 01 48 FC | 	wrbyte	#0, objptr
00978                 | ' cursor_y:=0
00978     01 0E 06 F1 | 	add	objptr, #1
0097c     07 01 48 FC | 	wrbyte	#0, objptr
00980                 | ' cursor_sh:=14
00980     01 0E 06 F1 | 	add	objptr, #1
00984     07 1D 48 FC | 	wrbyte	#14, objptr
00988     36 0E 86 F1 | 	sub	objptr, #54
0098c                 | ' 
0098c                 | ' 
0098c                 | ' ' start the cog
0098c                 | ' 
0098c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
0098c     0F 00 00 FF 
00990     68 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00994     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00998     0F 00 00 FF 
0099c     68 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
009a0     07 4F 02 F6 | 	mov	arg03, objptr
009a4     10 4A 06 F6 | 	mov	arg01, #16
009a8     28 4E 62 FD | 	setq	arg03
009ac     26 4B F2 FC | 	coginit	arg01, arg02 wc
009b0     01 4A 66 C6 |  if_b	neg	arg01, #1
009b4     25 25 02 F6 | 	mov	result1, arg01
009b8     12 61 02 F6 | 	mov	local07, result1
009bc     28 0E 06 F1 | 	add	objptr, #40
009c0     07 61 62 FC | 	wrlong	local07, objptr
009c4     28 0E 86 F1 | 	sub	objptr, #40
009c8                 | ' waitms(20)
009c8     14 4A 06 F6 | 	mov	arg01, #20
009cc     D8 31 B0 FD | 	call	#__system___waitms
009d0                 | ' 
009d0                 | ' ' clear the screen and set the colors to green on black
009d0                 | ' 
009d0                 | ' cls(c_green,c_black)
009d0     C7 4A 06 F6 | 	mov	arg01, #199
009d4     00 4C 06 F6 | 	mov	arg02, #0
009d8     50 19 B0 FD | 	call	#_hng030rm_spin2_cls
009dc                 | ' setbordercolor(0,0,128)
009dc     00 4A 06 F6 | 	mov	arg01, #0
009e0     00 4C 06 F6 | 	mov	arg02, #0
009e4     80 4E 06 F6 | 	mov	arg03, #128
009e8     1C 19 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
009ec                 | ' setwritecolors(c_green,c_black)
009ec     00 4C 06 F6 | 	mov	arg02, #0
009f0                 | ' 
009f0                 | ' 
009f0                 | ' write_color:=ff
009f0     38 0E 06 F1 | 	add	objptr, #56
009f4     07 8F 69 FC | 	wrlong	#199, objptr
009f8                 | ' write_background:=bb
009f8     04 0E 06 F1 | 	add	objptr, #4
009fc     07 01 68 FC | 	wrlong	#0, objptr
00a00                 | ' 
00a00                 | ' return cog
00a00     14 0E 86 F1 | 	sub	objptr, #20
00a04     07 25 02 FB | 	rdlong	result1, objptr
00a08     28 0E 86 F1 | 	sub	objptr, #40
00a0c     00 4A 06 F6 | 	mov	arg01, #0
00a10     00 4E 06 F6 | 	mov	arg03, #0
00a14     F0 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a18                 | ' v030.start(mode,pin)
00a18                 | ' v030.setbordercolor(0,0,0)
00a18                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a18     07 4B 02 F6 | 	mov	arg01, objptr
00a1c     0C 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a20     28 30 B0 FD | 	call	#__system___make_methodptr
00a24     00 28 06 F6 | 	mov	result3, #0
00a28     00 26 06 F6 | 	mov	result2, #0
00a2c     12 4D 02 F6 | 	mov	arg02, result1
00a30     00 4E 06 F6 | 	mov	arg03, #0
00a34     00 50 06 F6 | 	mov	arg04, #0
00a38     00 4A 06 F6 | 	mov	arg01, #0
00a3c     E4 31 B0 FD | 	call	#__system___basic_open
00a40     EC 0E 06 F1 | 	add	objptr, #236
00a44                 | ' 
00a44                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00a44     07 63 02 F6 | 	mov	local08, objptr
00a48     01 00 00 FF 
00a4c     40 0F 06 F1 | 	add	objptr, ##832
00a50     07 65 02 F6 | 	mov	local09, objptr
00a54     32 63 62 FC | 	wrlong	local08, local09
00a58     04 64 06 F1 | 	add	local09, #4
00a5c     32 23 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local09
00a60     07 4F 02 F6 | 	mov	arg03, objptr
00a64     10 4A 06 F6 | 	mov	arg01, #16
00a68     28 4E 62 FD | 	setq	arg03
00a6c     04 4B F2 FC | 	coginit	arg01, entryptr__ wc
00a70     01 4A 66 C6 |  if_b	neg	arg01, #1
00a74     25 25 02 F6 | 	mov	result1, arg01
00a78                 | ' return cog
00a78     02 00 00 FF 
00a7c     2C 0E 86 F1 | 	sub	objptr, ##1068
00a80     9A 4A 06 F6 | 	mov	arg01, #154
00a84     93 4C 06 F6 | 	mov	arg02, #147
00a88     A0 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a8c                 | ' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.bas"
00a8c                 | ' 
00a8c                 | ' 'e=0 ' this strange thing makes the program run in full optimization
00a8c                 | ' 
00a8c                 | ' startvideo 
00a8c                 | ' rm.start
00a8c                 | ' 
00a8c                 | ' cls
00a8c                 | ' print "Basic test"
00a8c     00 4A 06 F6 | 	mov	arg01, #0
00a90     E8 44 B0 FD | 	call	#__system___getiolock_0102
00a94     12 4B 02 F6 | 	mov	arg01, result1
00a98     F0 2F B0 FD | 	call	#__system___lockmem
00a9c     00 24 06 F6 | 	mov	result1, #0
00aa0     2D 00 00 FF 
00aa4     36 4D 06 F6 | 	mov	arg02, ##@LR__0307
00aa8     00 4A 06 F6 | 	mov	arg01, #0
00aac     00 4E 06 F6 | 	mov	arg03, #0
00ab0     70 32 B0 FD | 	call	#__system___basic_print_string
00ab4     12 67 02 F6 | 	mov	local10, result1
00ab8     00 68 06 F6 | 	mov	local11, #0
00abc     00 4A 06 F6 | 	mov	arg01, #0
00ac0     0A 4C 06 F6 | 	mov	arg02, #10
00ac4     00 4E 06 F6 | 	mov	arg03, #0
00ac8     0C 32 B0 FD | 	call	#__system___basic_print_char
00acc     01 24 06 F6 | 	mov	result1, #1
00ad0     01 6A 06 F6 | 	mov	local12, #1
00ad4     00 6C 06 F6 | 	mov	local13, #0
00ad8     00 4A 06 F6 | 	mov	arg01, #0
00adc     9C 44 B0 FD | 	call	#__system___getiolock_0102
00ae0     12 01 68 FC | 	wrlong	#0, result1
00ae4     00 24 06 F6 | 	mov	result1, #0
00ae8     00 6E 06 F6 | 	mov	local14, #0
00aec                 | ' print
00aec     00 4A 06 F6 | 	mov	arg01, #0
00af0     88 44 B0 FD | 	call	#__system___getiolock_0102
00af4     12 4B 02 F6 | 	mov	arg01, result1
00af8     90 2F B0 FD | 	call	#__system___lockmem
00afc     00 24 06 F6 | 	mov	result1, #0
00b00     00 70 06 F6 | 	mov	local15, #0
00b04     00 4A 06 F6 | 	mov	arg01, #0
00b08     0A 4C 06 F6 | 	mov	arg02, #10
00b0c     00 4E 06 F6 | 	mov	arg03, #0
00b10     C4 31 B0 FD | 	call	#__system___basic_print_char
00b14     01 24 06 F6 | 	mov	result1, #1
00b18     01 72 06 F6 | 	mov	local16, #1
00b1c     00 74 06 F6 | 	mov	local17, #0
00b20     00 4A 06 F6 | 	mov	arg01, #0
00b24     54 44 B0 FD | 	call	#__system___getiolock_0102
00b28     12 01 68 FC | 	wrlong	#0, result1
00b2c     00 24 06 F6 | 	mov	result1, #0
00b30     00 76 06 F6 | 	mov	local18, #0
00b34                 | ' 
00b34                 | ' do
00b34                 | LR__0001
00b34                 | '   if lpeek($30)<>0 then
00b34                 | ' asm
00b34     30 24 0E FB | 	rdlong	result1, #48 wz
00b38                 | ' return r
00b38     F0 03 90 AD |  if_e	jmp	#LR__0013
00b3c                 | ' asm
00b3c     33 24 C6 FA | 	rdbyte	result1, #51
00b40                 | ' return r
00b40     12 79 02 F6 | 	mov	local19, result1
00b44     3C 7B 02 F6 | 	mov	local20, local19
00b48     07 7A 46 F7 | 	zerox	local20, #7
00b4c     02 00 00 FF 
00b50     2C 0F 06 F1 | 	add	objptr, ##1324
00b54     07 7B 62 FC | 	wrlong	local20, objptr
00b58                 | '     cmd=peek($33)
00b58                 | '     if cmd<>0 then
00b58     07 7B 0A FB | 	rdlong	local20, objptr wz
00b5c                 | ' asm
00b5c     32 7C C6 5A |  if_ne	rdbyte	local21, #50
00b60                 | ' return r
00b60                 | ' asm
00b60     31 24 C6 5A |  if_ne	rdbyte	result1, #49
00b64                 | ' return r
00b64     12 7F 02 56 |  if_ne	mov	local22, result1
00b68     00 4C 06 F6 | 	mov	arg02, #0
00b6c                 | ' asm
00b6c     30 00 6C FC | 	wrlong	#0, #48
00b70                 | '     lpoke $30,0 
00b70                 | '     if cmd=$87 then print "Keyboard key released, scancode "; b11 
00b70     07 7B 02 FB | 	rdlong	local20, objptr
00b74     02 00 00 FF 
00b78     2C 0F 86 F1 | 	sub	objptr, ##1324
00b7c     87 7A 0E F2 | 	cmp	local20, #135 wz
00b80     A0 00 90 5D |  if_ne	jmp	#LR__0002
00b84     3E 81 02 F6 | 	mov	local23, local21
00b88     07 80 46 F7 | 	zerox	local23, #7
00b8c     00 4A 06 F6 | 	mov	arg01, #0
00b90     E8 43 B0 FD | 	call	#__system___getiolock_0102
00b94     12 4B 02 F6 | 	mov	arg01, result1
00b98     F0 2E B0 FD | 	call	#__system___lockmem
00b9c     00 24 06 F6 | 	mov	result1, #0
00ba0     00 70 06 F6 | 	mov	local15, #0
00ba4     2D 00 00 FF 
00ba8     41 73 06 F6 | 	mov	local16, ##@LR__0308
00bac     39 75 02 F6 | 	mov	local17, local16
00bb0     00 76 06 F6 | 	mov	local18, #0
00bb4     00 4A 06 F6 | 	mov	arg01, #0
00bb8     3A 4D 02 F6 | 	mov	arg02, local17
00bbc     00 4E 06 F6 | 	mov	arg03, #0
00bc0     60 31 B0 FD | 	call	#__system___basic_print_string
00bc4     12 67 02 F6 | 	mov	local10, result1
00bc8     00 68 06 F6 | 	mov	local11, #0
00bcc     40 6B 02 F6 | 	mov	local12, local23
00bd0     00 6C 06 F6 | 	mov	local13, #0
00bd4     0A 6E 06 F6 | 	mov	local14, #10
00bd8     00 4A 06 F6 | 	mov	arg01, #0
00bdc     35 4D 02 F6 | 	mov	arg02, local12
00be0     00 4E 06 F6 | 	mov	arg03, #0
00be4     0A 50 06 F6 | 	mov	arg04, #10
00be8     C4 31 B0 FD | 	call	#__system___basic_print_unsigned
00bec     12 83 02 F6 | 	mov	local24, result1
00bf0     00 84 06 F6 | 	mov	local25, #0
00bf4     00 4A 06 F6 | 	mov	arg01, #0
00bf8     0A 4C 06 F6 | 	mov	arg02, #10
00bfc     00 4E 06 F6 | 	mov	arg03, #0
00c00     D4 30 B0 FD | 	call	#__system___basic_print_char
00c04     01 24 06 F6 | 	mov	result1, #1
00c08     01 86 06 F6 | 	mov	local26, #1
00c0c     00 88 06 F6 | 	mov	local27, #0
00c10     00 4A 06 F6 | 	mov	arg01, #0
00c14     64 43 B0 FD | 	call	#__system___getiolock_0102
00c18     12 01 68 FC | 	wrlong	#0, result1
00c1c     00 24 06 F6 | 	mov	result1, #0
00c20     00 8A 06 F6 | 	mov	local28, #0
00c24                 | LR__0002
00c24                 | '     if cmd=$88 then print "Keyboard key pressed,  scancode "; b11   ; ", charcode "; b12
00c24     02 00 00 FF 
00c28     2C 0F 06 F1 | 	add	objptr, ##1324
00c2c     07 7B 02 FB | 	rdlong	local20, objptr
00c30     02 00 00 FF 
00c34     2C 0F 86 F1 | 	sub	objptr, ##1324
00c38     88 7A 0E F2 | 	cmp	local20, #136 wz
00c3c     F8 00 90 5D |  if_ne	jmp	#LR__0003
00c40     3E 8D 02 F6 | 	mov	local29, local21
00c44     07 8C 46 F7 | 	zerox	local29, #7
00c48     3F 8F 02 F6 | 	mov	local30, local22
00c4c     07 8E 46 F7 | 	zerox	local30, #7
00c50     00 4A 06 F6 | 	mov	arg01, #0
00c54     24 43 B0 FD | 	call	#__system___getiolock_0102
00c58     12 4B 02 F6 | 	mov	arg01, result1
00c5c     2C 2E B0 FD | 	call	#__system___lockmem
00c60     00 24 06 F6 | 	mov	result1, #0
00c64     00 70 06 F6 | 	mov	local15, #0
00c68     2D 00 00 FF 
00c6c     62 73 06 F6 | 	mov	local16, ##@LR__0309
00c70     39 75 02 F6 | 	mov	local17, local16
00c74     00 76 06 F6 | 	mov	local18, #0
00c78     00 4A 06 F6 | 	mov	arg01, #0
00c7c     3A 4D 02 F6 | 	mov	arg02, local17
00c80     00 4E 06 F6 | 	mov	arg03, #0
00c84     9C 30 B0 FD | 	call	#__system___basic_print_string
00c88     12 67 02 F6 | 	mov	local10, result1
00c8c     00 68 06 F6 | 	mov	local11, #0
00c90     46 6B 02 F6 | 	mov	local12, local29
00c94     00 6C 06 F6 | 	mov	local13, #0
00c98     0A 6E 06 F6 | 	mov	local14, #10
00c9c     00 4A 06 F6 | 	mov	arg01, #0
00ca0     35 4D 02 F6 | 	mov	arg02, local12
00ca4     00 4E 06 F6 | 	mov	arg03, #0
00ca8     0A 50 06 F6 | 	mov	arg04, #10
00cac     00 31 B0 FD | 	call	#__system___basic_print_unsigned
00cb0     12 83 02 F6 | 	mov	local24, result1
00cb4     00 84 06 F6 | 	mov	local25, #0
00cb8     2D 00 00 FF 
00cbc     83 87 06 F6 | 	mov	local26, ##@LR__0310
00cc0     43 89 02 F6 | 	mov	local27, local26
00cc4     00 8A 06 F6 | 	mov	local28, #0
00cc8     00 4A 06 F6 | 	mov	arg01, #0
00ccc     44 4D 02 F6 | 	mov	arg02, local27
00cd0     00 4E 06 F6 | 	mov	arg03, #0
00cd4     4C 30 B0 FD | 	call	#__system___basic_print_string
00cd8     12 91 02 F6 | 	mov	local31, result1
00cdc     00 92 06 F6 | 	mov	local32, #0
00ce0     47 95 02 F6 | 	mov	local33, local30
00ce4     00 96 06 F6 | 	mov	local34, #0
00ce8     0A 98 06 F6 | 	mov	local35, #10
00cec     00 4A 06 F6 | 	mov	arg01, #0
00cf0     4A 4D 02 F6 | 	mov	arg02, local33
00cf4     00 4E 06 F6 | 	mov	arg03, #0
00cf8     0A 50 06 F6 | 	mov	arg04, #10
00cfc     B0 30 B0 FD | 	call	#__system___basic_print_unsigned
00d00     12 9B 02 F6 | 	mov	local36, result1
00d04     00 9C 06 F6 | 	mov	local37, #0
00d08     00 4A 06 F6 | 	mov	arg01, #0
00d0c     0A 4C 06 F6 | 	mov	arg02, #10
00d10     00 4E 06 F6 | 	mov	arg03, #0
00d14     C0 2F B0 FD | 	call	#__system___basic_print_char
00d18     01 24 06 F6 | 	mov	result1, #1
00d1c     01 9E 06 F6 | 	mov	local38, #1
00d20     00 A0 06 F6 | 	mov	local39, #0
00d24     00 4A 06 F6 | 	mov	arg01, #0
00d28     50 42 B0 FD | 	call	#__system___getiolock_0102
00d2c     12 01 68 FC | 	wrlong	#0, result1
00d30     00 24 06 F6 | 	mov	result1, #0
00d34     00 A2 06 F6 | 	mov	local40, #0
00d38                 | LR__0003
00d38                 | '     if cmd=$89 then 
00d38     02 00 00 FF 
00d3c     2C 0F 06 F1 | 	add	objptr, ##1324
00d40     07 7B 02 FB | 	rdlong	local20, objptr
00d44     02 00 00 FF 
00d48     2C 0F 86 F1 | 	sub	objptr, ##1324
00d4c     89 7A 0E F2 | 	cmp	local20, #137 wz
00d50     D8 01 90 5D |  if_ne	jmp	#LR__0012
00d54                 | '       if b11=0 then 
00d54     3E 7B 02 F6 | 	mov	local20, local21
00d58     07 7A 4E F7 | 	zerox	local20, #7 wz
00d5c     70 00 90 5D |  if_ne	jmp	#LR__0004
00d60                 | '         print "Keyboard modifiers released"
00d60     00 4A 06 F6 | 	mov	arg01, #0
00d64     14 42 B0 FD | 	call	#__system___getiolock_0102
00d68     12 4B 02 F6 | 	mov	arg01, result1
00d6c     1C 2D B0 FD | 	call	#__system___lockmem
00d70     00 24 06 F6 | 	mov	result1, #0
00d74     00 70 06 F6 | 	mov	local15, #0
00d78     2D 00 00 FF 
00d7c     8F 73 06 F6 | 	mov	local16, ##@LR__0311
00d80     39 75 02 F6 | 	mov	local17, local16
00d84     00 76 06 F6 | 	mov	local18, #0
00d88     00 4A 06 F6 | 	mov	arg01, #0
00d8c     3A 4D 02 F6 | 	mov	arg02, local17
00d90     00 4E 06 F6 | 	mov	arg03, #0
00d94     8C 2F B0 FD | 	call	#__system___basic_print_string
00d98     12 67 02 F6 | 	mov	local10, result1
00d9c     00 68 06 F6 | 	mov	local11, #0
00da0     00 4A 06 F6 | 	mov	arg01, #0
00da4     0A 4C 06 F6 | 	mov	arg02, #10
00da8     00 4E 06 F6 | 	mov	arg03, #0
00dac     28 2F B0 FD | 	call	#__system___basic_print_char
00db0     01 24 06 F6 | 	mov	result1, #1
00db4     01 6A 06 F6 | 	mov	local12, #1
00db8     00 6C 06 F6 | 	mov	local13, #0
00dbc     00 4A 06 F6 | 	mov	arg01, #0
00dc0     B8 41 B0 FD | 	call	#__system___getiolock_0102
00dc4     12 01 68 FC | 	wrlong	#0, result1
00dc8     00 6E 06 F6 | 	mov	local14, #0
00dcc     5C 01 90 FD | 	jmp	#LR__0011
00dd0                 | LR__0004
00dd0     3E A5 02 F6 | 	mov	local41, local21
00dd4     07 A4 46 F7 | 	zerox	local41, #7
00dd8                 | '         print "Keyboard modifiers pressed: ";hex$(b11)
00dd8     00 4A 06 F6 | 	mov	arg01, #0
00ddc     9C 41 B0 FD | 	call	#__system___getiolock_0102
00de0     12 4B 02 F6 | 	mov	arg01, result1
00de4     A4 2C B0 FD | 	call	#__system___lockmem
00de8     00 24 06 F6 | 	mov	result1, #0
00dec     00 70 06 F6 | 	mov	local15, #0
00df0     2D 00 00 FF 
00df4     AB 73 06 F6 | 	mov	local16, ##@LR__0312
00df8     39 75 02 F6 | 	mov	local17, local16
00dfc     00 76 06 F6 | 	mov	local18, #0
00e00     00 4A 06 F6 | 	mov	arg01, #0
00e04     3A 4D 02 F6 | 	mov	arg02, local17
00e08     00 4E 06 F6 | 	mov	arg03, #0
00e0c     14 2F B0 FD | 	call	#__system___basic_print_string
00e10     12 67 02 F6 | 	mov	local10, result1
00e14     00 68 06 F6 | 	mov	local11, #0
00e18     52 6B 02 F6 | 	mov	local12, local41
00e1c     00 6C 06 F6 | 	mov	local13, #0
00e20     35 A7 02 F6 | 	mov	local42, local12
00e24     00 4C 06 F6 | 	mov	arg02, #0
00e28     10 4E 06 F6 | 	mov	arg03, #16
00e2c     00 A8 0E F6 | 	mov	local43, #0 wz
00e30     01 A8 06 F6 | 	mov	local43, #1
00e34     10 AA 06 F6 | 	mov	local44, #16
00e38     01 AC 06 F6 | 	mov	local45, #1
00e3c     F4 F1 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00e40     93 00 A0 FD | 	call	#FCACHE_LOAD_
00e44                 | LR__0005
00e44     00 AE 06 F6 | 	mov	local46, #0
00e48     53 AB 1A F2 | 	cmp	local44, local42 wcz
00e4c     01 AE 66 E6 |  if_be	neg	local46, #1
00e50     00 B0 06 F6 | 	mov	local47, #0
00e54     55 AD 1A F2 | 	cmp	local45, local44 wcz
00e58     01 B0 66 C6 |  if_b	neg	local47, #1
00e5c     58 AF CA F7 | 	test	local46, local47 wz
00e60     14 00 90 AD |  if_e	jmp	#LR__0007
00e64     55 AD 02 F6 | 	mov	local45, local44
00e68     10 AA 06 FD | 	qmul	local44, #16
00e6c     18 AA 62 FD | 	getqx	local44
00e70     01 A8 06 F1 | 	add	local43, #1
00e74     CC FF 9F FD | 	jmp	#LR__0005
00e78                 | LR__0006
00e78                 | LR__0007
00e78     20 A8 3E F3 | 	fle	local43, #32 wcz
00e7c     54 4B 02 F6 | 	mov	arg01, local43
00e80     02 4A 06 F1 | 	add	arg01, #2
00e84     E4 36 B0 FD | 	call	#__system___gc_alloc_managed
00e88     12 B3 02 F6 | 	mov	local48, result1
00e8c     54 B5 02 F6 | 	mov	local49, local43
00e90     59 B5 02 F1 | 	add	local49, local48
00e94     5A 01 48 FC | 	wrbyte	#0, local49
00e98     A0 F1 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00e9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ea0                 | LR__0008
00ea0     00 A8 1E F2 | 	cmp	local43, #0 wcz
00ea4     34 00 90 ED |  if_be	jmp	#LR__0010
00ea8     01 A8 86 F1 | 	sub	local43, #1
00eac     53 09 03 F6 | 	mov	muldiva_, local42
00eb0     10 0A 07 F6 | 	mov	muldivb_, #16
00eb4     CC 00 A0 FD | 	call	#unsdivide_
00eb8     84 B7 02 F6 | 	mov	local50, muldiva_
00ebc     85 A7 02 F6 | 	mov	local42, muldivb_
00ec0     0A B6 1E F2 | 	cmp	local50, #10 wcz
00ec4     30 B6 06 C1 |  if_b	add	local50, #48
00ec8     37 B6 06 31 |  if_ae	add	local50, #55
00ecc     54 B9 02 F6 | 	mov	local51, local43
00ed0     59 B9 02 F1 | 	add	local51, local48
00ed4     5C B7 42 FC | 	wrbyte	local50, local51
00ed8     C4 FF 9F FD | 	jmp	#LR__0008
00edc                 | LR__0009
00edc                 | LR__0010
00edc     59 25 02 F6 | 	mov	result1, local48
00ee0     12 6F 02 F6 | 	mov	local14, result1
00ee4     00 82 06 F6 | 	mov	local24, #0
00ee8     34 4B 02 F6 | 	mov	arg01, local11
00eec     37 4D 02 F6 | 	mov	arg02, local14
00ef0     00 4E 06 F6 | 	mov	arg03, #0
00ef4     2C 2E B0 FD | 	call	#__system___basic_print_string
00ef8     12 85 02 F6 | 	mov	local25, result1
00efc     00 86 06 F6 | 	mov	local26, #0
00f00     00 4A 06 F6 | 	mov	arg01, #0
00f04     0A 4C 06 F6 | 	mov	arg02, #10
00f08     00 4E 06 F6 | 	mov	arg03, #0
00f0c     C8 2D B0 FD | 	call	#__system___basic_print_char
00f10     01 24 06 F6 | 	mov	result1, #1
00f14     01 88 06 F6 | 	mov	local27, #1
00f18     00 8A 06 F6 | 	mov	local28, #0
00f1c     00 4A 06 F6 | 	mov	arg01, #0
00f20     58 40 B0 FD | 	call	#__system___getiolock_0102
00f24     12 01 68 FC | 	wrlong	#0, result1
00f28     00 90 06 F6 | 	mov	local31, #0
00f2c                 | LR__0011
00f2c                 | LR__0012
00f2c                 | LR__0013
00f2c                 | '   
00f2c                 | '   if lpeek($34)<>0 then
00f2c                 | ' asm
00f2c     34 24 0E FB | 	rdlong	result1, #52 wz
00f30                 | ' return r
00f30     C4 05 90 AD |  if_e	jmp	#LR__0020
00f34                 | ' asm
00f34     37 24 C6 FA | 	rdbyte	result1, #55
00f38                 | ' return r
00f38     12 79 02 F6 | 	mov	local19, result1
00f3c     3C 7B 02 F6 | 	mov	local20, local19
00f40     07 7A 46 F7 | 	zerox	local20, #7
00f44     02 00 00 FF 
00f48     2C 0F 06 F1 | 	add	objptr, ##1324
00f4c     07 7B 62 FC | 	wrlong	local20, objptr
00f50                 | '     cmd=peek($37)
00f50                 | '     if cmd<>0 then
00f50     07 7B 0A FB | 	rdlong	local20, objptr wz
00f54                 | ' asm
00f54     36 7C C6 5A |  if_ne	rdbyte	local21, #54
00f58                 | ' return r
00f58                 | ' asm
00f58     35 24 C6 5A |  if_ne	rdbyte	result1, #53
00f5c                 | ' return r
00f5c     12 7F 02 56 |  if_ne	mov	local22, result1
00f60     00 4C 06 F6 | 	mov	arg02, #0
00f64                 | ' asm
00f64     34 00 6C FC | 	wrlong	#0, #52
00f68                 | '     lpoke $34,0
00f68                 | '     if cmd=$81 then mousex=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
00f68     07 7B 02 FB | 	rdlong	local20, objptr
00f6c     02 00 00 FF 
00f70     2C 0F 86 F1 | 	sub	objptr, ##1324
00f74     81 7A 0E F2 | 	cmp	local20, #129 wz
00f78     48 01 90 5D |  if_ne	jmp	#LR__0014
00f7c     3E BB 02 F6 | 	mov	local52, local21
00f80     07 BA 46 F7 | 	zerox	local52, #7
00f84     3F BD 02 F6 | 	mov	local53, local22
00f88     07 BC 46 F7 | 	zerox	local53, #7
00f8c     5E BF 02 F6 | 	mov	local54, local53
00f90     07 BE 66 F0 | 	shl	local54, #7
00f94     5D C1 02 F6 | 	mov	local55, local52
00f98     5F C1 02 F1 | 	add	local55, local54
00f9c     02 00 00 FF 
00fa0     38 0F 06 F1 | 	add	objptr, ##1336
00fa4     07 C1 62 FC | 	wrlong	local55, objptr
00fa8     02 00 00 FF 
00fac     38 0F 86 F1 | 	sub	objptr, ##1336
00fb0     00 4A 06 F6 | 	mov	arg01, #0
00fb4     C4 3F B0 FD | 	call	#__system___getiolock_0102
00fb8     12 4B 02 F6 | 	mov	arg01, result1
00fbc     CC 2A B0 FD | 	call	#__system___lockmem
00fc0     00 24 06 F6 | 	mov	result1, #0
00fc4     00 78 06 F6 | 	mov	local19, #0
00fc8     00 70 06 F6 | 	mov	local15, #0
00fcc     2D 00 00 FF 
00fd0     C8 73 06 F6 | 	mov	local16, ##@LR__0313
00fd4     39 75 02 F6 | 	mov	local17, local16
00fd8     00 76 06 F6 | 	mov	local18, #0
00fdc     00 4A 06 F6 | 	mov	arg01, #0
00fe0     3A 4D 02 F6 | 	mov	arg02, local17
00fe4     00 4E 06 F6 | 	mov	arg03, #0
00fe8     38 2D B0 FD | 	call	#__system___basic_print_string
00fec     12 67 02 F6 | 	mov	local10, result1
00ff0     00 68 06 F6 | 	mov	local11, #0
00ff4     02 00 00 FF 
00ff8     38 0F 06 F1 | 	add	objptr, ##1336
00ffc     07 6D 02 FB | 	rdlong	local13, objptr
01000     02 00 00 FF 
01004     38 0F 86 F1 | 	sub	objptr, ##1336
01008     36 6B 02 F6 | 	mov	local12, local13
0100c     00 6E 06 F6 | 	mov	local14, #0
01010     0A 82 06 F6 | 	mov	local24, #10
01014     00 4A 06 F6 | 	mov	arg01, #0
01018     35 4D 02 F6 | 	mov	arg02, local12
0101c     00 4E 06 F6 | 	mov	arg03, #0
01020     0A 50 06 F6 | 	mov	arg04, #10
01024     44 2D B0 FD | 	call	#__system___basic_print_integer
01028     12 85 02 F6 | 	mov	local25, result1
0102c     00 86 06 F6 | 	mov	local26, #0
01030     2D 00 00 FF 
01034     D9 89 06 F6 | 	mov	local27, ##@LR__0314
01038     44 8B 02 F6 | 	mov	local28, local27
0103c     00 90 06 F6 | 	mov	local31, #0
01040     00 4A 06 F6 | 	mov	arg01, #0
01044     45 4D 02 F6 | 	mov	arg02, local28
01048     00 4E 06 F6 | 	mov	arg03, #0
0104c     D4 2C B0 FD | 	call	#__system___basic_print_string
01050     12 93 02 F6 | 	mov	local32, result1
01054     00 94 06 F6 | 	mov	local33, #0
01058     02 00 00 FF 
0105c     3C 0F 06 F1 | 	add	objptr, ##1340
01060     07 99 02 FB | 	rdlong	local35, objptr
01064     02 00 00 FF 
01068     3C 0F 86 F1 | 	sub	objptr, ##1340
0106c     4C 97 02 F6 | 	mov	local34, local35
01070     00 9A 06 F6 | 	mov	local36, #0
01074     0A 9C 06 F6 | 	mov	local37, #10
01078     00 4A 06 F6 | 	mov	arg01, #0
0107c     4B 4D 02 F6 | 	mov	arg02, local34
01080     00 4E 06 F6 | 	mov	arg03, #0
01084     0A 50 06 F6 | 	mov	arg04, #10
01088     E0 2C B0 FD | 	call	#__system___basic_print_integer
0108c     12 9F 02 F6 | 	mov	local38, result1
01090     00 A0 06 F6 | 	mov	local39, #0
01094     00 4A 06 F6 | 	mov	arg01, #0
01098     0A 4C 06 F6 | 	mov	arg02, #10
0109c     00 4E 06 F6 | 	mov	arg03, #0
010a0     34 2C B0 FD | 	call	#__system___basic_print_char
010a4     01 24 06 F6 | 	mov	result1, #1
010a8     01 A2 06 F6 | 	mov	local40, #1
010ac     00 C2 06 F6 | 	mov	local56, #0
010b0     00 4A 06 F6 | 	mov	arg01, #0
010b4     C4 3E B0 FD | 	call	#__system___getiolock_0102
010b8     12 01 68 FC | 	wrlong	#0, result1
010bc     00 24 06 F6 | 	mov	result1, #0
010c0     00 C4 06 F6 | 	mov	local57, #0
010c4                 | LR__0014
010c4                 | '     if cmd=$82 then mousey=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
010c4     02 00 00 FF 
010c8     2C 0F 06 F1 | 	add	objptr, ##1324
010cc     07 7B 02 FB | 	rdlong	local20, objptr
010d0     02 00 00 FF 
010d4     2C 0F 86 F1 | 	sub	objptr, ##1324
010d8     82 7A 0E F2 | 	cmp	local20, #130 wz
010dc     48 01 90 5D |  if_ne	jmp	#LR__0015
010e0     3E C7 02 F6 | 	mov	local58, local21
010e4     07 C6 46 F7 | 	zerox	local58, #7
010e8     3F C9 02 F6 | 	mov	local59, local22
010ec     07 C8 46 F7 | 	zerox	local59, #7
010f0     64 CB 02 F6 | 	mov	local60, local59
010f4     07 CA 66 F0 | 	shl	local60, #7
010f8     63 CD 02 F6 | 	mov	local61, local58
010fc     65 CD 02 F1 | 	add	local61, local60
01100     02 00 00 FF 
01104     3C 0F 06 F1 | 	add	objptr, ##1340
01108     07 CD 62 FC | 	wrlong	local61, objptr
0110c     02 00 00 FF 
01110     3C 0F 86 F1 | 	sub	objptr, ##1340
01114     00 4A 06 F6 | 	mov	arg01, #0
01118     60 3E B0 FD | 	call	#__system___getiolock_0102
0111c     12 4B 02 F6 | 	mov	arg01, result1
01120     68 29 B0 FD | 	call	#__system___lockmem
01124     00 24 06 F6 | 	mov	result1, #0
01128     00 78 06 F6 | 	mov	local19, #0
0112c     00 70 06 F6 | 	mov	local15, #0
01130     2D 00 00 FF 
01134     DE 73 06 F6 | 	mov	local16, ##@LR__0315
01138     39 75 02 F6 | 	mov	local17, local16
0113c     00 76 06 F6 | 	mov	local18, #0
01140     00 4A 06 F6 | 	mov	arg01, #0
01144     3A 4D 02 F6 | 	mov	arg02, local17
01148     00 4E 06 F6 | 	mov	arg03, #0
0114c     D4 2B B0 FD | 	call	#__system___basic_print_string
01150     12 67 02 F6 | 	mov	local10, result1
01154     00 68 06 F6 | 	mov	local11, #0
01158     02 00 00 FF 
0115c     38 0F 06 F1 | 	add	objptr, ##1336
01160     07 6D 02 FB | 	rdlong	local13, objptr
01164     02 00 00 FF 
01168     38 0F 86 F1 | 	sub	objptr, ##1336
0116c     36 6B 02 F6 | 	mov	local12, local13
01170     00 6E 06 F6 | 	mov	local14, #0
01174     0A 82 06 F6 | 	mov	local24, #10
01178     00 4A 06 F6 | 	mov	arg01, #0
0117c     35 4D 02 F6 | 	mov	arg02, local12
01180     00 4E 06 F6 | 	mov	arg03, #0
01184     0A 50 06 F6 | 	mov	arg04, #10
01188     E0 2B B0 FD | 	call	#__system___basic_print_integer
0118c     12 85 02 F6 | 	mov	local25, result1
01190     00 86 06 F6 | 	mov	local26, #0
01194     2D 00 00 FF 
01198     EF 89 06 F6 | 	mov	local27, ##@LR__0316
0119c     44 8B 02 F6 | 	mov	local28, local27
011a0     00 90 06 F6 | 	mov	local31, #0
011a4     00 4A 06 F6 | 	mov	arg01, #0
011a8     45 4D 02 F6 | 	mov	arg02, local28
011ac     00 4E 06 F6 | 	mov	arg03, #0
011b0     70 2B B0 FD | 	call	#__system___basic_print_string
011b4     12 93 02 F6 | 	mov	local32, result1
011b8     00 94 06 F6 | 	mov	local33, #0
011bc     02 00 00 FF 
011c0     3C 0F 06 F1 | 	add	objptr, ##1340
011c4     07 99 02 FB | 	rdlong	local35, objptr
011c8     02 00 00 FF 
011cc     3C 0F 86 F1 | 	sub	objptr, ##1340
011d0     4C 97 02 F6 | 	mov	local34, local35
011d4     00 9A 06 F6 | 	mov	local36, #0
011d8     0A 9C 06 F6 | 	mov	local37, #10
011dc     00 4A 06 F6 | 	mov	arg01, #0
011e0     4B 4D 02 F6 | 	mov	arg02, local34
011e4     00 4E 06 F6 | 	mov	arg03, #0
011e8     0A 50 06 F6 | 	mov	arg04, #10
011ec     7C 2B B0 FD | 	call	#__system___basic_print_integer
011f0     12 9F 02 F6 | 	mov	local38, result1
011f4     00 A0 06 F6 | 	mov	local39, #0
011f8     00 4A 06 F6 | 	mov	arg01, #0
011fc     0A 4C 06 F6 | 	mov	arg02, #10
01200     00 4E 06 F6 | 	mov	arg03, #0
01204     D0 2A B0 FD | 	call	#__system___basic_print_char
01208     01 24 06 F6 | 	mov	result1, #1
0120c     01 A2 06 F6 | 	mov	local40, #1
01210     00 C2 06 F6 | 	mov	local56, #0
01214     00 4A 06 F6 | 	mov	arg01, #0
01218     60 3D B0 FD | 	call	#__system___getiolock_0102
0121c     12 01 68 FC | 	wrlong	#0, result1
01220     00 24 06 F6 | 	mov	result1, #0
01224     00 C4 06 F6 | 	mov	local57, #0
01228                 | LR__0015
01228                 | '     if cmd=$83 then mousewheel=b11+b12 shl 7 : print "Mousewheel: ";mousewheel
01228     02 00 00 FF 
0122c     2C 0F 06 F1 | 	add	objptr, ##1324
01230     07 7B 02 FB | 	rdlong	local20, objptr
01234     02 00 00 FF 
01238     2C 0F 86 F1 | 	sub	objptr, ##1324
0123c     83 7A 0E F2 | 	cmp	local20, #131 wz
01240     E4 00 90 5D |  if_ne	jmp	#LR__0016
01244     3E CF 02 F6 | 	mov	local62, local21
01248     07 CE 46 F7 | 	zerox	local62, #7
0124c     3F D1 02 F6 | 	mov	local63, local22
01250     07 D0 46 F7 | 	zerox	local63, #7
01254     68 D3 02 F6 | 	mov	local64, local63
01258     07 D2 66 F0 | 	shl	local64, #7
0125c     67 D5 02 F6 | 	mov	local65, local62
01260     69 D5 02 F1 | 	add	local65, local64
01264     02 00 00 FF 
01268     40 0F 06 F1 | 	add	objptr, ##1344
0126c     07 D5 62 FC | 	wrlong	local65, objptr
01270     02 00 00 FF 
01274     40 0F 86 F1 | 	sub	objptr, ##1344
01278     00 4A 06 F6 | 	mov	arg01, #0
0127c     FC 3C B0 FD | 	call	#__system___getiolock_0102
01280     12 4B 02 F6 | 	mov	arg01, result1
01284     04 28 B0 FD | 	call	#__system___lockmem
01288     00 24 06 F6 | 	mov	result1, #0
0128c     00 78 06 F6 | 	mov	local19, #0
01290     00 70 06 F6 | 	mov	local15, #0
01294     2D 00 00 FF 
01298     F4 73 06 F6 | 	mov	local16, ##@LR__0317
0129c     39 75 02 F6 | 	mov	local17, local16
012a0     00 76 06 F6 | 	mov	local18, #0
012a4     00 4A 06 F6 | 	mov	arg01, #0
012a8     3A 4D 02 F6 | 	mov	arg02, local17
012ac     00 4E 06 F6 | 	mov	arg03, #0
012b0     70 2A B0 FD | 	call	#__system___basic_print_string
012b4     12 67 02 F6 | 	mov	local10, result1
012b8     00 68 06 F6 | 	mov	local11, #0
012bc     02 00 00 FF 
012c0     40 0F 06 F1 | 	add	objptr, ##1344
012c4     07 6D 02 FB | 	rdlong	local13, objptr
012c8     02 00 00 FF 
012cc     40 0F 86 F1 | 	sub	objptr, ##1344
012d0     36 6B 02 F6 | 	mov	local12, local13
012d4     00 6E 06 F6 | 	mov	local14, #0
012d8     0A 82 06 F6 | 	mov	local24, #10
012dc     00 4A 06 F6 | 	mov	arg01, #0
012e0     35 4D 02 F6 | 	mov	arg02, local12
012e4     00 4E 06 F6 | 	mov	arg03, #0
012e8     0A 50 06 F6 | 	mov	arg04, #10
012ec     7C 2A B0 FD | 	call	#__system___basic_print_integer
012f0     12 85 02 F6 | 	mov	local25, result1
012f4     00 86 06 F6 | 	mov	local26, #0
012f8     00 4A 06 F6 | 	mov	arg01, #0
012fc     0A 4C 06 F6 | 	mov	arg02, #10
01300     00 4E 06 F6 | 	mov	arg03, #0
01304     D0 29 B0 FD | 	call	#__system___basic_print_char
01308     01 24 06 F6 | 	mov	result1, #1
0130c     01 88 06 F6 | 	mov	local27, #1
01310     00 8A 06 F6 | 	mov	local28, #0
01314     00 4A 06 F6 | 	mov	arg01, #0
01318     60 3C B0 FD | 	call	#__system___getiolock_0102
0131c     12 01 68 FC | 	wrlong	#0, result1
01320     00 24 06 F6 | 	mov	result1, #0
01324     00 90 06 F6 | 	mov	local31, #0
01328                 | LR__0016
01328                 | '     if cmd=$84 then print "Mouse key: ";b11
01328     02 00 00 FF 
0132c     2C 0F 06 F1 | 	add	objptr, ##1324
01330     07 7B 02 FB | 	rdlong	local20, objptr
01334     02 00 00 FF 
01338     2C 0F 86 F1 | 	sub	objptr, ##1324
0133c     84 7A 0E F2 | 	cmp	local20, #132 wz
01340     A0 00 90 5D |  if_ne	jmp	#LR__0017
01344     3E D7 02 F6 | 	mov	local66, local21
01348     07 D6 46 F7 | 	zerox	local66, #7
0134c     00 4A 06 F6 | 	mov	arg01, #0
01350     28 3C B0 FD | 	call	#__system___getiolock_0102
01354     12 4B 02 F6 | 	mov	arg01, result1
01358     30 27 B0 FD | 	call	#__system___lockmem
0135c     00 24 06 F6 | 	mov	result1, #0
01360     00 70 06 F6 | 	mov	local15, #0
01364     2E 00 00 FF 
01368     01 72 06 F6 | 	mov	local16, ##@LR__0318
0136c     39 75 02 F6 | 	mov	local17, local16
01370     00 76 06 F6 | 	mov	local18, #0
01374     00 4A 06 F6 | 	mov	arg01, #0
01378     3A 4D 02 F6 | 	mov	arg02, local17
0137c     00 4E 06 F6 | 	mov	arg03, #0
01380     A0 29 B0 FD | 	call	#__system___basic_print_string
01384     12 67 02 F6 | 	mov	local10, result1
01388     00 68 06 F6 | 	mov	local11, #0
0138c     6B 6B 02 F6 | 	mov	local12, local66
01390     00 6C 06 F6 | 	mov	local13, #0
01394     0A 6E 06 F6 | 	mov	local14, #10
01398     00 4A 06 F6 | 	mov	arg01, #0
0139c     35 4D 02 F6 | 	mov	arg02, local12
013a0     00 4E 06 F6 | 	mov	arg03, #0
013a4     0A 50 06 F6 | 	mov	arg04, #10
013a8     04 2A B0 FD | 	call	#__system___basic_print_unsigned
013ac     12 83 02 F6 | 	mov	local24, result1
013b0     00 84 06 F6 | 	mov	local25, #0
013b4     00 4A 06 F6 | 	mov	arg01, #0
013b8     0A 4C 06 F6 | 	mov	arg02, #10
013bc     00 4E 06 F6 | 	mov	arg03, #0
013c0     14 29 B0 FD | 	call	#__system___basic_print_char
013c4     01 24 06 F6 | 	mov	result1, #1
013c8     01 86 06 F6 | 	mov	local26, #1
013cc     00 88 06 F6 | 	mov	local27, #0
013d0     00 4A 06 F6 | 	mov	arg01, #0
013d4     A4 3B B0 FD | 	call	#__system___getiolock_0102
013d8     12 01 68 FC | 	wrlong	#0, result1
013dc     00 24 06 F6 | 	mov	result1, #0
013e0     00 8A 06 F6 | 	mov	local28, #0
013e4                 | LR__0017
013e4                 | '     if cmd=$85 then print "Mouse clicked"
013e4     02 00 00 FF 
013e8     2C 0F 06 F1 | 	add	objptr, ##1324
013ec     07 7B 02 FB | 	rdlong	local20, objptr
013f0     02 00 00 FF 
013f4     2C 0F 86 F1 | 	sub	objptr, ##1324
013f8     85 7A 0E F2 | 	cmp	local20, #133 wz
013fc     70 00 90 5D |  if_ne	jmp	#LR__0018
01400     00 4A 06 F6 | 	mov	arg01, #0
01404     74 3B B0 FD | 	call	#__system___getiolock_0102
01408     12 4B 02 F6 | 	mov	arg01, result1
0140c     7C 26 B0 FD | 	call	#__system___lockmem
01410     00 24 06 F6 | 	mov	result1, #0
01414     00 70 06 F6 | 	mov	local15, #0
01418     2E 00 00 FF 
0141c     0D 72 06 F6 | 	mov	local16, ##@LR__0319
01420     39 75 02 F6 | 	mov	local17, local16
01424     00 76 06 F6 | 	mov	local18, #0
01428     00 4A 06 F6 | 	mov	arg01, #0
0142c     3A 4D 02 F6 | 	mov	arg02, local17
01430     00 4E 06 F6 | 	mov	arg03, #0
01434     EC 28 B0 FD | 	call	#__system___basic_print_string
01438     12 67 02 F6 | 	mov	local10, result1
0143c     00 68 06 F6 | 	mov	local11, #0
01440     00 4A 06 F6 | 	mov	arg01, #0
01444     0A 4C 06 F6 | 	mov	arg02, #10
01448     00 4E 06 F6 | 	mov	arg03, #0
0144c     88 28 B0 FD | 	call	#__system___basic_print_char
01450     01 24 06 F6 | 	mov	result1, #1
01454     01 6A 06 F6 | 	mov	local12, #1
01458     00 6C 06 F6 | 	mov	local13, #0
0145c     00 4A 06 F6 | 	mov	arg01, #0
01460     18 3B B0 FD | 	call	#__system___getiolock_0102
01464     12 01 68 FC | 	wrlong	#0, result1
01468     00 24 06 F6 | 	mov	result1, #0
0146c     00 6E 06 F6 | 	mov	local14, #0
01470                 | LR__0018
01470                 | '     if cmd=$86 then print "Mouse double clicked"
01470     02 00 00 FF 
01474     2C 0F 06 F1 | 	add	objptr, ##1324
01478     07 7B 02 FB | 	rdlong	local20, objptr
0147c     02 00 00 FF 
01480     2C 0F 86 F1 | 	sub	objptr, ##1324
01484     86 7A 0E F2 | 	cmp	local20, #134 wz
01488     6C 00 90 5D |  if_ne	jmp	#LR__0019
0148c     00 4A 06 F6 | 	mov	arg01, #0
01490     E8 3A B0 FD | 	call	#__system___getiolock_0102
01494     12 4B 02 F6 | 	mov	arg01, result1
01498     F0 25 B0 FD | 	call	#__system___lockmem
0149c     00 24 06 F6 | 	mov	result1, #0
014a0     00 70 06 F6 | 	mov	local15, #0
014a4     2E 00 00 FF 
014a8     1B 72 06 F6 | 	mov	local16, ##@LR__0320
014ac     39 75 02 F6 | 	mov	local17, local16
014b0     00 76 06 F6 | 	mov	local18, #0
014b4     00 4A 06 F6 | 	mov	arg01, #0
014b8     3A 4D 02 F6 | 	mov	arg02, local17
014bc     00 4E 06 F6 | 	mov	arg03, #0
014c0     60 28 B0 FD | 	call	#__system___basic_print_string
014c4     12 67 02 F6 | 	mov	local10, result1
014c8     00 68 06 F6 | 	mov	local11, #0
014cc     00 4A 06 F6 | 	mov	arg01, #0
014d0     0A 4C 06 F6 | 	mov	arg02, #10
014d4     00 4E 06 F6 | 	mov	arg03, #0
014d8     FC 27 B0 FD | 	call	#__system___basic_print_char
014dc     01 24 06 F6 | 	mov	result1, #1
014e0     01 6A 06 F6 | 	mov	local12, #1
014e4     00 6C 06 F6 | 	mov	local13, #0
014e8     00 4A 06 F6 | 	mov	arg01, #0
014ec     8C 3A B0 FD | 	call	#__system___getiolock_0102
014f0     12 01 68 FC | 	wrlong	#0, result1
014f4     00 6E 06 F6 | 	mov	local14, #0
014f8                 | LR__0019
014f8                 | LR__0020
014f8                 | ' 
014f8                 | '   if lpeek($38)<>0 then 
014f8                 | ' asm
014f8     38 24 0E FB | 	rdlong	result1, #56 wz
014fc                 | ' return r
014fc     14 0A 90 AD |  if_e	jmp	#LR__0029
01500                 | ' asm
01500     3B 7A C6 FA | 	rdbyte	local20, #59
01504                 | ' return r
01504     07 7A 46 F7 | 	zerox	local20, #7
01508     04 7A 46 F0 | 	shr	local20, #4
0150c     02 00 00 FF 
01510     2C 0F 06 F1 | 	add	objptr, ##1324
01514     07 7B 62 FC | 	wrlong	local20, objptr
01518                 | ' asm
01518     3B 78 C6 FA | 	rdbyte	local19, #59
0151c                 | ' return r
0151c     3C 7B 02 F6 | 	mov	local20, local19
01520     07 7A 46 F7 | 	zerox	local20, #7
01524     0F 7A 06 F5 | 	and	local20, #15
01528     18 0E 06 F1 | 	add	objptr, #24
0152c     07 7B 62 FC | 	wrlong	local20, objptr
01530                 | ' asm
01530     39 7C C6 FA | 	rdbyte	local21, #57
01534                 | ' return r
01534     38 4A 06 F6 | 	mov	arg01, #56
01538                 | ' asm
01538     38 24 C6 FA | 	rdbyte	result1, #56
0153c                 | ' return r
0153c     12 7F 02 F6 | 	mov	local22, result1
01540     00 4C 06 F6 | 	mov	arg02, #0
01544                 | ' asm
01544     38 00 6C FC | 	wrlong	#0, #56
01548                 | '     b11=peek($39)
01548                 | '     b12=peek($38)
01548                 | '     lpoke $38,0
01548                 | '     if cmd=8 then print "Midi note off, channel ";channel;", note ";b11
01548     18 0E 86 F1 | 	sub	objptr, #24
0154c     07 7B 02 FB | 	rdlong	local20, objptr
01550     02 00 00 FF 
01554     2C 0F 86 F1 | 	sub	objptr, ##1324
01558     08 7A 0E F2 | 	cmp	local20, #8 wz
0155c     08 01 90 5D |  if_ne	jmp	#LR__0021
01560     3E D9 02 F6 | 	mov	local67, local21
01564     07 D8 46 F7 | 	zerox	local67, #7
01568     00 4A 06 F6 | 	mov	arg01, #0
0156c     0C 3A B0 FD | 	call	#__system___getiolock_0102
01570     12 4B 02 F6 | 	mov	arg01, result1
01574     14 25 B0 FD | 	call	#__system___lockmem
01578     00 24 06 F6 | 	mov	result1, #0
0157c     00 78 06 F6 | 	mov	local19, #0
01580     00 70 06 F6 | 	mov	local15, #0
01584     2E 00 00 FF 
01588     30 72 06 F6 | 	mov	local16, ##@LR__0321
0158c     39 75 02 F6 | 	mov	local17, local16
01590     00 76 06 F6 | 	mov	local18, #0
01594     00 4A 06 F6 | 	mov	arg01, #0
01598     3A 4D 02 F6 | 	mov	arg02, local17
0159c     00 4E 06 F6 | 	mov	arg03, #0
015a0     80 27 B0 FD | 	call	#__system___basic_print_string
015a4     12 67 02 F6 | 	mov	local10, result1
015a8     00 68 06 F6 | 	mov	local11, #0
015ac     02 00 00 FF 
015b0     44 0F 06 F1 | 	add	objptr, ##1348
015b4     07 6D 02 FB | 	rdlong	local13, objptr
015b8     02 00 00 FF 
015bc     44 0F 86 F1 | 	sub	objptr, ##1348
015c0     36 6B 02 F6 | 	mov	local12, local13
015c4     00 6E 06 F6 | 	mov	local14, #0
015c8     0A 82 06 F6 | 	mov	local24, #10
015cc     00 4A 06 F6 | 	mov	arg01, #0
015d0     35 4D 02 F6 | 	mov	arg02, local12
015d4     00 4E 06 F6 | 	mov	arg03, #0
015d8     0A 50 06 F6 | 	mov	arg04, #10
015dc     8C 27 B0 FD | 	call	#__system___basic_print_integer
015e0     12 85 02 F6 | 	mov	local25, result1
015e4     00 86 06 F6 | 	mov	local26, #0
015e8     2E 00 00 FF 
015ec     48 88 06 F6 | 	mov	local27, ##@LR__0322
015f0     44 8B 02 F6 | 	mov	local28, local27
015f4     00 90 06 F6 | 	mov	local31, #0
015f8     00 4A 06 F6 | 	mov	arg01, #0
015fc     45 4D 02 F6 | 	mov	arg02, local28
01600     00 4E 06 F6 | 	mov	arg03, #0
01604     1C 27 B0 FD | 	call	#__system___basic_print_string
01608     12 93 02 F6 | 	mov	local32, result1
0160c     00 94 06 F6 | 	mov	local33, #0
01610     6C 97 02 F6 | 	mov	local34, local67
01614     00 98 06 F6 | 	mov	local35, #0
01618     0A 9A 06 F6 | 	mov	local36, #10
0161c     00 4A 06 F6 | 	mov	arg01, #0
01620     4B 4D 02 F6 | 	mov	arg02, local34
01624     00 4E 06 F6 | 	mov	arg03, #0
01628     0A 50 06 F6 | 	mov	arg04, #10
0162c     80 27 B0 FD | 	call	#__system___basic_print_unsigned
01630     12 9D 02 F6 | 	mov	local37, result1
01634     00 9E 06 F6 | 	mov	local38, #0
01638     00 4A 06 F6 | 	mov	arg01, #0
0163c     0A 4C 06 F6 | 	mov	arg02, #10
01640     00 4E 06 F6 | 	mov	arg03, #0
01644     90 26 B0 FD | 	call	#__system___basic_print_char
01648     01 24 06 F6 | 	mov	result1, #1
0164c     01 A0 06 F6 | 	mov	local39, #1
01650     00 A2 06 F6 | 	mov	local40, #0
01654     00 4A 06 F6 | 	mov	arg01, #0
01658     20 39 B0 FD | 	call	#__system___getiolock_0102
0165c     12 01 68 FC | 	wrlong	#0, result1
01660     00 24 06 F6 | 	mov	result1, #0
01664     00 C2 06 F6 | 	mov	local56, #0
01668                 | LR__0021
01668                 | '     if cmd=9 then print "Midi note on,  channel ";channel;", note ";b11;", velocity ";b12
01668     02 00 00 FF 
0166c     2C 0F 06 F1 | 	add	objptr, ##1324
01670     07 7B 02 FB | 	rdlong	local20, objptr
01674     02 00 00 FF 
01678     2C 0F 86 F1 | 	sub	objptr, ##1324
0167c     09 7A 0E F2 | 	cmp	local20, #9 wz
01680     60 01 90 5D |  if_ne	jmp	#LR__0022
01684     3E DB 02 F6 | 	mov	local68, local21
01688     07 DA 46 F7 | 	zerox	local68, #7
0168c     3F DD 02 F6 | 	mov	local69, local22
01690     07 DC 46 F7 | 	zerox	local69, #7
01694     00 4A 06 F6 | 	mov	arg01, #0
01698     E0 38 B0 FD | 	call	#__system___getiolock_0102
0169c     12 4B 02 F6 | 	mov	arg01, result1
016a0     E8 23 B0 FD | 	call	#__system___lockmem
016a4     00 24 06 F6 | 	mov	result1, #0
016a8     00 78 06 F6 | 	mov	local19, #0
016ac     00 70 06 F6 | 	mov	local15, #0
016b0     2E 00 00 FF 
016b4     50 72 06 F6 | 	mov	local16, ##@LR__0323
016b8     39 75 02 F6 | 	mov	local17, local16
016bc     00 76 06 F6 | 	mov	local18, #0
016c0     00 4A 06 F6 | 	mov	arg01, #0
016c4     3A 4D 02 F6 | 	mov	arg02, local17
016c8     00 4E 06 F6 | 	mov	arg03, #0
016cc     54 26 B0 FD | 	call	#__system___basic_print_string
016d0     12 67 02 F6 | 	mov	local10, result1
016d4     00 68 06 F6 | 	mov	local11, #0
016d8     02 00 00 FF 
016dc     44 0F 06 F1 | 	add	objptr, ##1348
016e0     07 6D 02 FB | 	rdlong	local13, objptr
016e4     02 00 00 FF 
016e8     44 0F 86 F1 | 	sub	objptr, ##1348
016ec     36 6B 02 F6 | 	mov	local12, local13
016f0     00 6E 06 F6 | 	mov	local14, #0
016f4     0A 82 06 F6 | 	mov	local24, #10
016f8     00 4A 06 F6 | 	mov	arg01, #0
016fc     35 4D 02 F6 | 	mov	arg02, local12
01700     00 4E 06 F6 | 	mov	arg03, #0
01704     0A 50 06 F6 | 	mov	arg04, #10
01708     60 26 B0 FD | 	call	#__system___basic_print_integer
0170c     12 85 02 F6 | 	mov	local25, result1
01710     00 86 06 F6 | 	mov	local26, #0
01714     2E 00 00 FF 
01718     68 88 06 F6 | 	mov	local27, ##@LR__0324
0171c     44 8B 02 F6 | 	mov	local28, local27
01720     00 90 06 F6 | 	mov	local31, #0
01724     00 4A 06 F6 | 	mov	arg01, #0
01728     45 4D 02 F6 | 	mov	arg02, local28
0172c     00 4E 06 F6 | 	mov	arg03, #0
01730     F0 25 B0 FD | 	call	#__system___basic_print_string
01734     12 93 02 F6 | 	mov	local32, result1
01738     00 94 06 F6 | 	mov	local33, #0
0173c     6D 97 02 F6 | 	mov	local34, local68
01740     00 98 06 F6 | 	mov	local35, #0
01744     0A 9A 06 F6 | 	mov	local36, #10
01748     00 4A 06 F6 | 	mov	arg01, #0
0174c     4B 4D 02 F6 | 	mov	arg02, local34
01750     00 4E 06 F6 | 	mov	arg03, #0
01754     0A 50 06 F6 | 	mov	arg04, #10
01758     54 26 B0 FD | 	call	#__system___basic_print_unsigned
0175c     12 9D 02 F6 | 	mov	local37, result1
01760     00 9E 06 F6 | 	mov	local38, #0
01764     2E 00 00 FF 
01768     70 A0 06 F6 | 	mov	local39, ##@LR__0325
0176c     50 A3 02 F6 | 	mov	local40, local39
01770     00 C2 06 F6 | 	mov	local56, #0
01774     00 4A 06 F6 | 	mov	arg01, #0
01778     51 4D 02 F6 | 	mov	arg02, local40
0177c     00 4E 06 F6 | 	mov	arg03, #0
01780     A0 25 B0 FD | 	call	#__system___basic_print_string
01784     12 C5 02 F6 | 	mov	local57, result1
01788     00 DE 06 F6 | 	mov	local70, #0
0178c     6E E1 02 F6 | 	mov	local71, local69
01790     00 E2 06 F6 | 	mov	local72, #0
01794     0A E4 06 F6 | 	mov	local73, #10
01798     00 4A 06 F6 | 	mov	arg01, #0
0179c     70 4D 02 F6 | 	mov	arg02, local71
017a0     00 4E 06 F6 | 	mov	arg03, #0
017a4     0A 50 06 F6 | 	mov	arg04, #10
017a8     04 26 B0 FD | 	call	#__system___basic_print_unsigned
017ac     12 E7 02 F6 | 	mov	local74, result1
017b0     00 E8 06 F6 | 	mov	local75, #0
017b4     00 4A 06 F6 | 	mov	arg01, #0
017b8     0A 4C 06 F6 | 	mov	arg02, #10
017bc     00 4E 06 F6 | 	mov	arg03, #0
017c0     14 25 B0 FD | 	call	#__system___basic_print_char
017c4     01 24 06 F6 | 	mov	result1, #1
017c8     01 EA 06 F6 | 	mov	local76, #1
017cc     00 EC 06 F6 | 	mov	local77, #0
017d0     00 4A 06 F6 | 	mov	arg01, #0
017d4     A4 37 B0 FD | 	call	#__system___getiolock_0102
017d8     12 01 68 FC | 	wrlong	#0, result1
017dc     00 24 06 F6 | 	mov	result1, #0
017e0     00 EE 06 F6 | 	mov	local78, #0
017e4                 | LR__0022
017e4                 | '     if cmd=10 then print "Midi poly aftertouch, channel ";channel;" note ";b11;", velocity ";b12
017e4     02 00 00 FF 
017e8     2C 0F 06 F1 | 	add	objptr, ##1324
017ec     07 7B 02 FB | 	rdlong	local20, objptr
017f0     02 00 00 FF 
017f4     2C 0F 86 F1 | 	sub	objptr, ##1324
017f8     0A 7A 0E F2 | 	cmp	local20, #10 wz
017fc     60 01 90 5D |  if_ne	jmp	#LR__0023
01800     3E F1 02 F6 | 	mov	local79, local21
01804     07 F0 46 F7 | 	zerox	local79, #7
01808     3F F3 02 F6 | 	mov	local80, local22
0180c     07 F2 46 F7 | 	zerox	local80, #7
01810     00 4A 06 F6 | 	mov	arg01, #0
01814     64 37 B0 FD | 	call	#__system___getiolock_0102
01818     12 4B 02 F6 | 	mov	arg01, result1
0181c     6C 22 B0 FD | 	call	#__system___lockmem
01820     00 24 06 F6 | 	mov	result1, #0
01824     00 78 06 F6 | 	mov	local19, #0
01828     00 70 06 F6 | 	mov	local15, #0
0182c     2E 00 00 FF 
01830     7C 72 06 F6 | 	mov	local16, ##@LR__0326
01834     39 75 02 F6 | 	mov	local17, local16
01838     00 76 06 F6 | 	mov	local18, #0
0183c     00 4A 06 F6 | 	mov	arg01, #0
01840     3A 4D 02 F6 | 	mov	arg02, local17
01844     00 4E 06 F6 | 	mov	arg03, #0
01848     D8 24 B0 FD | 	call	#__system___basic_print_string
0184c     12 67 02 F6 | 	mov	local10, result1
01850     00 68 06 F6 | 	mov	local11, #0
01854     02 00 00 FF 
01858     44 0F 06 F1 | 	add	objptr, ##1348
0185c     07 6D 02 FB | 	rdlong	local13, objptr
01860     02 00 00 FF 
01864     44 0F 86 F1 | 	sub	objptr, ##1348
01868     36 6B 02 F6 | 	mov	local12, local13
0186c     00 6E 06 F6 | 	mov	local14, #0
01870     0A 82 06 F6 | 	mov	local24, #10
01874     00 4A 06 F6 | 	mov	arg01, #0
01878     35 4D 02 F6 | 	mov	arg02, local12
0187c     00 4E 06 F6 | 	mov	arg03, #0
01880     0A 50 06 F6 | 	mov	arg04, #10
01884     E4 24 B0 FD | 	call	#__system___basic_print_integer
01888     12 85 02 F6 | 	mov	local25, result1
0188c     00 86 06 F6 | 	mov	local26, #0
01890     2E 00 00 FF 
01894     9B 88 06 F6 | 	mov	local27, ##@LR__0327
01898     44 8B 02 F6 | 	mov	local28, local27
0189c     00 90 06 F6 | 	mov	local31, #0
018a0     00 4A 06 F6 | 	mov	arg01, #0
018a4     45 4D 02 F6 | 	mov	arg02, local28
018a8     00 4E 06 F6 | 	mov	arg03, #0
018ac     74 24 B0 FD | 	call	#__system___basic_print_string
018b0     12 93 02 F6 | 	mov	local32, result1
018b4     00 94 06 F6 | 	mov	local33, #0
018b8     78 97 02 F6 | 	mov	local34, local79
018bc     00 98 06 F6 | 	mov	local35, #0
018c0     0A 9A 06 F6 | 	mov	local36, #10
018c4     00 4A 06 F6 | 	mov	arg01, #0
018c8     4B 4D 02 F6 | 	mov	arg02, local34
018cc     00 4E 06 F6 | 	mov	arg03, #0
018d0     0A 50 06 F6 | 	mov	arg04, #10
018d4     D8 24 B0 FD | 	call	#__system___basic_print_unsigned
018d8     12 9D 02 F6 | 	mov	local37, result1
018dc     00 9E 06 F6 | 	mov	local38, #0
018e0     2E 00 00 FF 
018e4     A2 A0 06 F6 | 	mov	local39, ##@LR__0328
018e8     50 A3 02 F6 | 	mov	local40, local39
018ec     00 C2 06 F6 | 	mov	local56, #0
018f0     00 4A 06 F6 | 	mov	arg01, #0
018f4     51 4D 02 F6 | 	mov	arg02, local40
018f8     00 4E 06 F6 | 	mov	arg03, #0
018fc     24 24 B0 FD | 	call	#__system___basic_print_string
01900     12 C5 02 F6 | 	mov	local57, result1
01904     00 DE 06 F6 | 	mov	local70, #0
01908     79 E1 02 F6 | 	mov	local71, local80
0190c     00 E2 06 F6 | 	mov	local72, #0
01910     0A E4 06 F6 | 	mov	local73, #10
01914     00 4A 06 F6 | 	mov	arg01, #0
01918     70 4D 02 F6 | 	mov	arg02, local71
0191c     00 4E 06 F6 | 	mov	arg03, #0
01920     0A 50 06 F6 | 	mov	arg04, #10
01924     88 24 B0 FD | 	call	#__system___basic_print_unsigned
01928     12 E7 02 F6 | 	mov	local74, result1
0192c     00 E8 06 F6 | 	mov	local75, #0
01930     00 4A 06 F6 | 	mov	arg01, #0
01934     0A 4C 06 F6 | 	mov	arg02, #10
01938     00 4E 06 F6 | 	mov	arg03, #0
0193c     98 23 B0 FD | 	call	#__system___basic_print_char
01940     01 24 06 F6 | 	mov	result1, #1
01944     01 EA 06 F6 | 	mov	local76, #1
01948     00 EC 06 F6 | 	mov	local77, #0
0194c     00 4A 06 F6 | 	mov	arg01, #0
01950     28 36 B0 FD | 	call	#__system___getiolock_0102
01954     12 01 68 FC | 	wrlong	#0, result1
01958     00 24 06 F6 | 	mov	result1, #0
0195c     00 EE 06 F6 | 	mov	local78, #0
01960                 | LR__0023
01960                 | '     if cmd=11 then print "Midi control change, channel ";channel;" controller ";b11;", value ";b12
01960     02 00 00 FF 
01964     2C 0F 06 F1 | 	add	objptr, ##1324
01968     07 7B 02 FB | 	rdlong	local20, objptr
0196c     02 00 00 FF 
01970     2C 0F 86 F1 | 	sub	objptr, ##1324
01974     0B 7A 0E F2 | 	cmp	local20, #11 wz
01978     60 01 90 5D |  if_ne	jmp	#LR__0024
0197c     3E F5 02 F6 | 	mov	local81, local21
01980     07 F4 46 F7 | 	zerox	local81, #7
01984     3F F7 02 F6 | 	mov	local82, local22
01988     07 F6 46 F7 | 	zerox	local82, #7
0198c     00 4A 06 F6 | 	mov	arg01, #0
01990     E8 35 B0 FD | 	call	#__system___getiolock_0102
01994     12 4B 02 F6 | 	mov	arg01, result1
01998     F0 20 B0 FD | 	call	#__system___lockmem
0199c     00 24 06 F6 | 	mov	result1, #0
019a0     00 78 06 F6 | 	mov	local19, #0
019a4     00 70 06 F6 | 	mov	local15, #0
019a8     2E 00 00 FF 
019ac     AE 72 06 F6 | 	mov	local16, ##@LR__0329
019b0     39 75 02 F6 | 	mov	local17, local16
019b4     00 76 06 F6 | 	mov	local18, #0
019b8     00 4A 06 F6 | 	mov	arg01, #0
019bc     3A 4D 02 F6 | 	mov	arg02, local17
019c0     00 4E 06 F6 | 	mov	arg03, #0
019c4     5C 23 B0 FD | 	call	#__system___basic_print_string
019c8     12 67 02 F6 | 	mov	local10, result1
019cc     00 68 06 F6 | 	mov	local11, #0
019d0     02 00 00 FF 
019d4     44 0F 06 F1 | 	add	objptr, ##1348
019d8     07 6D 02 FB | 	rdlong	local13, objptr
019dc     02 00 00 FF 
019e0     44 0F 86 F1 | 	sub	objptr, ##1348
019e4     36 6B 02 F6 | 	mov	local12, local13
019e8     00 6E 06 F6 | 	mov	local14, #0
019ec     0A 82 06 F6 | 	mov	local24, #10
019f0     00 4A 06 F6 | 	mov	arg01, #0
019f4     35 4D 02 F6 | 	mov	arg02, local12
019f8     00 4E 06 F6 | 	mov	arg03, #0
019fc     0A 50 06 F6 | 	mov	arg04, #10
01a00     68 23 B0 FD | 	call	#__system___basic_print_integer
01a04     12 85 02 F6 | 	mov	local25, result1
01a08     00 86 06 F6 | 	mov	local26, #0
01a0c     2E 00 00 FF 
01a10     CC 88 06 F6 | 	mov	local27, ##@LR__0330
01a14     44 8B 02 F6 | 	mov	local28, local27
01a18     00 90 06 F6 | 	mov	local31, #0
01a1c     00 4A 06 F6 | 	mov	arg01, #0
01a20     45 4D 02 F6 | 	mov	arg02, local28
01a24     00 4E 06 F6 | 	mov	arg03, #0
01a28     F8 22 B0 FD | 	call	#__system___basic_print_string
01a2c     12 93 02 F6 | 	mov	local32, result1
01a30     00 94 06 F6 | 	mov	local33, #0
01a34     7A 97 02 F6 | 	mov	local34, local81
01a38     00 98 06 F6 | 	mov	local35, #0
01a3c     0A 9A 06 F6 | 	mov	local36, #10
01a40     00 4A 06 F6 | 	mov	arg01, #0
01a44     4B 4D 02 F6 | 	mov	arg02, local34
01a48     00 4E 06 F6 | 	mov	arg03, #0
01a4c     0A 50 06 F6 | 	mov	arg04, #10
01a50     5C 23 B0 FD | 	call	#__system___basic_print_unsigned
01a54     12 9D 02 F6 | 	mov	local37, result1
01a58     00 9E 06 F6 | 	mov	local38, #0
01a5c     2E 00 00 FF 
01a60     D9 A0 06 F6 | 	mov	local39, ##@LR__0331
01a64     50 A3 02 F6 | 	mov	local40, local39
01a68     00 C2 06 F6 | 	mov	local56, #0
01a6c     00 4A 06 F6 | 	mov	arg01, #0
01a70     51 4D 02 F6 | 	mov	arg02, local40
01a74     00 4E 06 F6 | 	mov	arg03, #0
01a78     A8 22 B0 FD | 	call	#__system___basic_print_string
01a7c     12 C5 02 F6 | 	mov	local57, result1
01a80     00 DE 06 F6 | 	mov	local70, #0
01a84     7B E1 02 F6 | 	mov	local71, local82
01a88     00 E2 06 F6 | 	mov	local72, #0
01a8c     0A E4 06 F6 | 	mov	local73, #10
01a90     00 4A 06 F6 | 	mov	arg01, #0
01a94     70 4D 02 F6 | 	mov	arg02, local71
01a98     00 4E 06 F6 | 	mov	arg03, #0
01a9c     0A 50 06 F6 | 	mov	arg04, #10
01aa0     0C 23 B0 FD | 	call	#__system___basic_print_unsigned
01aa4     12 E7 02 F6 | 	mov	local74, result1
01aa8     00 E8 06 F6 | 	mov	local75, #0
01aac     00 4A 06 F6 | 	mov	arg01, #0
01ab0     0A 4C 06 F6 | 	mov	arg02, #10
01ab4     00 4E 06 F6 | 	mov	arg03, #0
01ab8     1C 22 B0 FD | 	call	#__system___basic_print_char
01abc     01 24 06 F6 | 	mov	result1, #1
01ac0     01 EA 06 F6 | 	mov	local76, #1
01ac4     00 EC 06 F6 | 	mov	local77, #0
01ac8     00 4A 06 F6 | 	mov	arg01, #0
01acc     AC 34 B0 FD | 	call	#__system___getiolock_0102
01ad0     12 01 68 FC | 	wrlong	#0, result1
01ad4     00 24 06 F6 | 	mov	result1, #0
01ad8     00 EE 06 F6 | 	mov	local78, #0
01adc                 | LR__0024
01adc                 | '     if cmd=12 then print "Midi program change, channel ";channel;" program ";b12
01adc     02 00 00 FF 
01ae0     2C 0F 06 F1 | 	add	objptr, ##1324
01ae4     07 7B 02 FB | 	rdlong	local20, objptr
01ae8     02 00 00 FF 
01aec     2C 0F 86 F1 | 	sub	objptr, ##1324
01af0     0C 7A 0E F2 | 	cmp	local20, #12 wz
01af4     08 01 90 5D |  if_ne	jmp	#LR__0025
01af8     3F F9 02 F6 | 	mov	local83, local22
01afc     07 F8 46 F7 | 	zerox	local83, #7
01b00     00 4A 06 F6 | 	mov	arg01, #0
01b04     74 34 B0 FD | 	call	#__system___getiolock_0102
01b08     12 4B 02 F6 | 	mov	arg01, result1
01b0c     7C 1F B0 FD | 	call	#__system___lockmem
01b10     00 24 06 F6 | 	mov	result1, #0
01b14     00 78 06 F6 | 	mov	local19, #0
01b18     00 70 06 F6 | 	mov	local15, #0
01b1c     2E 00 00 FF 
01b20     E2 72 06 F6 | 	mov	local16, ##@LR__0332
01b24     39 75 02 F6 | 	mov	local17, local16
01b28     00 76 06 F6 | 	mov	local18, #0
01b2c     00 4A 06 F6 | 	mov	arg01, #0
01b30     3A 4D 02 F6 | 	mov	arg02, local17
01b34     00 4E 06 F6 | 	mov	arg03, #0
01b38     E8 21 B0 FD | 	call	#__system___basic_print_string
01b3c     12 67 02 F6 | 	mov	local10, result1
01b40     00 68 06 F6 | 	mov	local11, #0
01b44     02 00 00 FF 
01b48     44 0F 06 F1 | 	add	objptr, ##1348
01b4c     07 6D 02 FB | 	rdlong	local13, objptr
01b50     02 00 00 FF 
01b54     44 0F 86 F1 | 	sub	objptr, ##1348
01b58     36 6B 02 F6 | 	mov	local12, local13
01b5c     00 6E 06 F6 | 	mov	local14, #0
01b60     0A 82 06 F6 | 	mov	local24, #10
01b64     00 4A 06 F6 | 	mov	arg01, #0
01b68     35 4D 02 F6 | 	mov	arg02, local12
01b6c     00 4E 06 F6 | 	mov	arg03, #0
01b70     0A 50 06 F6 | 	mov	arg04, #10
01b74     F4 21 B0 FD | 	call	#__system___basic_print_integer
01b78     12 85 02 F6 | 	mov	local25, result1
01b7c     00 86 06 F6 | 	mov	local26, #0
01b80     2E 00 00 FF 
01b84     00 89 06 F6 | 	mov	local27, ##@LR__0333
01b88     44 8B 02 F6 | 	mov	local28, local27
01b8c     00 90 06 F6 | 	mov	local31, #0
01b90     00 4A 06 F6 | 	mov	arg01, #0
01b94     45 4D 02 F6 | 	mov	arg02, local28
01b98     00 4E 06 F6 | 	mov	arg03, #0
01b9c     84 21 B0 FD | 	call	#__system___basic_print_string
01ba0     12 93 02 F6 | 	mov	local32, result1
01ba4     00 94 06 F6 | 	mov	local33, #0
01ba8     7C 97 02 F6 | 	mov	local34, local83
01bac     00 98 06 F6 | 	mov	local35, #0
01bb0     0A 9A 06 F6 | 	mov	local36, #10
01bb4     00 4A 06 F6 | 	mov	arg01, #0
01bb8     4B 4D 02 F6 | 	mov	arg02, local34
01bbc     00 4E 06 F6 | 	mov	arg03, #0
01bc0     0A 50 06 F6 | 	mov	arg04, #10
01bc4     E8 21 B0 FD | 	call	#__system___basic_print_unsigned
01bc8     12 9D 02 F6 | 	mov	local37, result1
01bcc     00 9E 06 F6 | 	mov	local38, #0
01bd0     00 4A 06 F6 | 	mov	arg01, #0
01bd4     0A 4C 06 F6 | 	mov	arg02, #10
01bd8     00 4E 06 F6 | 	mov	arg03, #0
01bdc     F8 20 B0 FD | 	call	#__system___basic_print_char
01be0     01 24 06 F6 | 	mov	result1, #1
01be4     01 A0 06 F6 | 	mov	local39, #1
01be8     00 A2 06 F6 | 	mov	local40, #0
01bec     00 4A 06 F6 | 	mov	arg01, #0
01bf0     88 33 B0 FD | 	call	#__system___getiolock_0102
01bf4     12 01 68 FC | 	wrlong	#0, result1
01bf8     00 24 06 F6 | 	mov	result1, #0
01bfc     00 C2 06 F6 | 	mov	local56, #0
01c00                 | LR__0025
01c00                 | '     if cmd=13 then print "Midi mono aftertouch, channel ";channel;" value ";b12
01c00     02 00 00 FF 
01c04     2C 0F 06 F1 | 	add	objptr, ##1324
01c08     07 7B 02 FB | 	rdlong	local20, objptr
01c0c     02 00 00 FF 
01c10     2C 0F 86 F1 | 	sub	objptr, ##1324
01c14     0D 7A 0E F2 | 	cmp	local20, #13 wz
01c18     08 01 90 5D |  if_ne	jmp	#LR__0026
01c1c     3F FB 02 F6 | 	mov	local84, local22
01c20     07 FA 46 F7 | 	zerox	local84, #7
01c24     00 4A 06 F6 | 	mov	arg01, #0
01c28     50 33 B0 FD | 	call	#__system___getiolock_0102
01c2c     12 4B 02 F6 | 	mov	arg01, result1
01c30     58 1E B0 FD | 	call	#__system___lockmem
01c34     00 24 06 F6 | 	mov	result1, #0
01c38     00 78 06 F6 | 	mov	local19, #0
01c3c     00 70 06 F6 | 	mov	local15, #0
01c40     2E 00 00 FF 
01c44     0A 73 06 F6 | 	mov	local16, ##@LR__0334
01c48     39 75 02 F6 | 	mov	local17, local16
01c4c     00 76 06 F6 | 	mov	local18, #0
01c50     00 4A 06 F6 | 	mov	arg01, #0
01c54     3A 4D 02 F6 | 	mov	arg02, local17
01c58     00 4E 06 F6 | 	mov	arg03, #0
01c5c     C4 20 B0 FD | 	call	#__system___basic_print_string
01c60     12 67 02 F6 | 	mov	local10, result1
01c64     00 68 06 F6 | 	mov	local11, #0
01c68     02 00 00 FF 
01c6c     44 0F 06 F1 | 	add	objptr, ##1348
01c70     07 6D 02 FB | 	rdlong	local13, objptr
01c74     02 00 00 FF 
01c78     44 0F 86 F1 | 	sub	objptr, ##1348
01c7c     36 6B 02 F6 | 	mov	local12, local13
01c80     00 6E 06 F6 | 	mov	local14, #0
01c84     0A 82 06 F6 | 	mov	local24, #10
01c88     00 4A 06 F6 | 	mov	arg01, #0
01c8c     35 4D 02 F6 | 	mov	arg02, local12
01c90     00 4E 06 F6 | 	mov	arg03, #0
01c94     0A 50 06 F6 | 	mov	arg04, #10
01c98     D0 20 B0 FD | 	call	#__system___basic_print_integer
01c9c     12 85 02 F6 | 	mov	local25, result1
01ca0     00 86 06 F6 | 	mov	local26, #0
01ca4     2E 00 00 FF 
01ca8     29 89 06 F6 | 	mov	local27, ##@LR__0335
01cac     44 8B 02 F6 | 	mov	local28, local27
01cb0     00 90 06 F6 | 	mov	local31, #0
01cb4     00 4A 06 F6 | 	mov	arg01, #0
01cb8     45 4D 02 F6 | 	mov	arg02, local28
01cbc     00 4E 06 F6 | 	mov	arg03, #0
01cc0     60 20 B0 FD | 	call	#__system___basic_print_string
01cc4     12 93 02 F6 | 	mov	local32, result1
01cc8     00 94 06 F6 | 	mov	local33, #0
01ccc     7D 97 02 F6 | 	mov	local34, local84
01cd0     00 98 06 F6 | 	mov	local35, #0
01cd4     0A 9A 06 F6 | 	mov	local36, #10
01cd8     00 4A 06 F6 | 	mov	arg01, #0
01cdc     4B 4D 02 F6 | 	mov	arg02, local34
01ce0     00 4E 06 F6 | 	mov	arg03, #0
01ce4     0A 50 06 F6 | 	mov	arg04, #10
01ce8     C4 20 B0 FD | 	call	#__system___basic_print_unsigned
01cec     12 9D 02 F6 | 	mov	local37, result1
01cf0     00 9E 06 F6 | 	mov	local38, #0
01cf4     00 4A 06 F6 | 	mov	arg01, #0
01cf8     0A 4C 06 F6 | 	mov	arg02, #10
01cfc     00 4E 06 F6 | 	mov	arg03, #0
01d00     D4 1F B0 FD | 	call	#__system___basic_print_char
01d04     01 24 06 F6 | 	mov	result1, #1
01d08     01 A0 06 F6 | 	mov	local39, #1
01d0c     00 A2 06 F6 | 	mov	local40, #0
01d10     00 4A 06 F6 | 	mov	arg01, #0
01d14     64 32 B0 FD | 	call	#__system___getiolock_0102
01d18     12 01 68 FC | 	wrlong	#0, result1
01d1c     00 24 06 F6 | 	mov	result1, #0
01d20     00 C2 06 F6 | 	mov	local56, #0
01d24                 | LR__0026
01d24                 | '     if cmd=14 then print "Midi pitch bend, channel ";channel;" value ";b11+b12 shl 7
01d24     02 00 00 FF 
01d28     2C 0F 06 F1 | 	add	objptr, ##1324
01d2c     07 7B 02 FB | 	rdlong	local20, objptr
01d30     02 00 00 FF 
01d34     2C 0F 86 F1 | 	sub	objptr, ##1324
01d38     0E 7A 0E F2 | 	cmp	local20, #14 wz
01d3c     1C 01 90 5D |  if_ne	jmp	#LR__0027
01d40     3E FD 02 F6 | 	mov	local85, local21
01d44     07 FC 46 F7 | 	zerox	local85, #7
01d48     3F FF 02 F6 | 	mov	local86, local22
01d4c     07 FE 46 F7 | 	zerox	local86, #7
01d50     7F 01 03 F6 | 	mov	local87, local86
01d54     07 00 67 F0 | 	shl	local87, #7
01d58     7E 03 03 F6 | 	mov	local88, local85
01d5c     80 03 03 F1 | 	add	local88, local87
01d60     00 4A 06 F6 | 	mov	arg01, #0
01d64     14 32 B0 FD | 	call	#__system___getiolock_0102
01d68     12 4B 02 F6 | 	mov	arg01, result1
01d6c     1C 1D B0 FD | 	call	#__system___lockmem
01d70     00 24 06 F6 | 	mov	result1, #0
01d74     00 70 06 F6 | 	mov	local15, #0
01d78     2E 00 00 FF 
01d7c     31 73 06 F6 | 	mov	local16, ##@LR__0336
01d80     39 75 02 F6 | 	mov	local17, local16
01d84     00 76 06 F6 | 	mov	local18, #0
01d88     00 4A 06 F6 | 	mov	arg01, #0
01d8c     3A 4D 02 F6 | 	mov	arg02, local17
01d90     00 4E 06 F6 | 	mov	arg03, #0
01d94     8C 1F B0 FD | 	call	#__system___basic_print_string
01d98     12 67 02 F6 | 	mov	local10, result1
01d9c     00 68 06 F6 | 	mov	local11, #0
01da0     02 00 00 FF 
01da4     44 0F 06 F1 | 	add	objptr, ##1348
01da8     07 6D 02 FB | 	rdlong	local13, objptr
01dac     02 00 00 FF 
01db0     44 0F 86 F1 | 	sub	objptr, ##1348
01db4     36 6B 02 F6 | 	mov	local12, local13
01db8     00 6E 06 F6 | 	mov	local14, #0
01dbc     0A 82 06 F6 | 	mov	local24, #10
01dc0     00 4A 06 F6 | 	mov	arg01, #0
01dc4     35 4D 02 F6 | 	mov	arg02, local12
01dc8     00 4E 06 F6 | 	mov	arg03, #0
01dcc     0A 50 06 F6 | 	mov	arg04, #10
01dd0     98 1F B0 FD | 	call	#__system___basic_print_integer
01dd4     12 85 02 F6 | 	mov	local25, result1
01dd8     00 86 06 F6 | 	mov	local26, #0
01ddc     2E 00 00 FF 
01de0     4B 89 06 F6 | 	mov	local27, ##@LR__0337
01de4     44 8B 02 F6 | 	mov	local28, local27
01de8     00 90 06 F6 | 	mov	local31, #0
01dec     00 4A 06 F6 | 	mov	arg01, #0
01df0     45 4D 02 F6 | 	mov	arg02, local28
01df4     00 4E 06 F6 | 	mov	arg03, #0
01df8     28 1F B0 FD | 	call	#__system___basic_print_string
01dfc     12 93 02 F6 | 	mov	local32, result1
01e00     00 94 06 F6 | 	mov	local33, #0
01e04     81 97 02 F6 | 	mov	local34, local88
01e08     00 98 06 F6 | 	mov	local35, #0
01e0c     0A 9A 06 F6 | 	mov	local36, #10
01e10     00 4A 06 F6 | 	mov	arg01, #0
01e14     4B 4D 02 F6 | 	mov	arg02, local34
01e18     00 4E 06 F6 | 	mov	arg03, #0
01e1c     0A 50 06 F6 | 	mov	arg04, #10
01e20     48 1F B0 FD | 	call	#__system___basic_print_integer
01e24     12 9D 02 F6 | 	mov	local37, result1
01e28     00 9E 06 F6 | 	mov	local38, #0
01e2c     00 4A 06 F6 | 	mov	arg01, #0
01e30     0A 4C 06 F6 | 	mov	arg02, #10
01e34     00 4E 06 F6 | 	mov	arg03, #0
01e38     9C 1E B0 FD | 	call	#__system___basic_print_char
01e3c     01 24 06 F6 | 	mov	result1, #1
01e40     01 A0 06 F6 | 	mov	local39, #1
01e44     00 A2 06 F6 | 	mov	local40, #0
01e48     00 4A 06 F6 | 	mov	arg01, #0
01e4c     2C 31 B0 FD | 	call	#__system___getiolock_0102
01e50     12 01 68 FC | 	wrlong	#0, result1
01e54     00 24 06 F6 | 	mov	result1, #0
01e58     00 C2 06 F6 | 	mov	local56, #0
01e5c                 | LR__0027
01e5c                 | '     if cmd=15 then print "Novation control key "; b12 ' TODO Sysex has to be properly processed 
01e5c     02 00 00 FF 
01e60     2C 0F 06 F1 | 	add	objptr, ##1324
01e64     07 7B 02 FB | 	rdlong	local20, objptr
01e68     02 00 00 FF 
01e6c     2C 0F 86 F1 | 	sub	objptr, ##1324
01e70     0F 7A 0E F2 | 	cmp	local20, #15 wz
01e74     9C 00 90 5D |  if_ne	jmp	#LR__0028
01e78     3F 05 03 F6 | 	mov	local89, local22
01e7c     07 04 47 F7 | 	zerox	local89, #7
01e80     00 4A 06 F6 | 	mov	arg01, #0
01e84     F4 30 B0 FD | 	call	#__system___getiolock_0102
01e88     12 4B 02 F6 | 	mov	arg01, result1
01e8c     FC 1B B0 FD | 	call	#__system___lockmem
01e90     00 24 06 F6 | 	mov	result1, #0
01e94     00 70 06 F6 | 	mov	local15, #0
01e98     2E 00 00 FF 
01e9c     53 73 06 F6 | 	mov	local16, ##@LR__0338
01ea0     39 75 02 F6 | 	mov	local17, local16
01ea4     00 76 06 F6 | 	mov	local18, #0
01ea8     00 4A 06 F6 | 	mov	arg01, #0
01eac     3A 4D 02 F6 | 	mov	arg02, local17
01eb0     00 4E 06 F6 | 	mov	arg03, #0
01eb4     6C 1E B0 FD | 	call	#__system___basic_print_string
01eb8     12 67 02 F6 | 	mov	local10, result1
01ebc     00 68 06 F6 | 	mov	local11, #0
01ec0     82 6B 02 F6 | 	mov	local12, local89
01ec4     00 6C 06 F6 | 	mov	local13, #0
01ec8     0A 6E 06 F6 | 	mov	local14, #10
01ecc     00 4A 06 F6 | 	mov	arg01, #0
01ed0     35 4D 02 F6 | 	mov	arg02, local12
01ed4     00 4E 06 F6 | 	mov	arg03, #0
01ed8     0A 50 06 F6 | 	mov	arg04, #10
01edc     D0 1E B0 FD | 	call	#__system___basic_print_unsigned
01ee0     12 83 02 F6 | 	mov	local24, result1
01ee4     00 84 06 F6 | 	mov	local25, #0
01ee8     00 4A 06 F6 | 	mov	arg01, #0
01eec     0A 4C 06 F6 | 	mov	arg02, #10
01ef0     00 4E 06 F6 | 	mov	arg03, #0
01ef4     E0 1D B0 FD | 	call	#__system___basic_print_char
01ef8     01 24 06 F6 | 	mov	result1, #1
01efc     01 86 06 F6 | 	mov	local26, #1
01f00     00 88 06 F6 | 	mov	local27, #0
01f04     00 4A 06 F6 | 	mov	arg01, #0
01f08     70 30 B0 FD | 	call	#__system___getiolock_0102
01f0c     12 01 68 FC | 	wrlong	#0, result1
01f10     00 8A 06 F6 | 	mov	local28, #0
01f14                 | LR__0028
01f14                 | LR__0029
01f14                 | '       
01f14                 | '   if lpeek($3c)<>0 then
01f14     3C 4A 06 F6 | 	mov	arg01, #60
01f18                 | ' asm
01f18     3C 24 06 FB | 	rdlong	result1, #60
01f1c                 | ' return r
01f1c     12 07 0B F6 | 	mov	local90, result1 wz
01f20     10 EC 9F AD |  if_e	jmp	#LR__0001
01f24                 | '     print "Serial byte read: "; peek($3D)
01f24     00 4A 06 F6 | 	mov	arg01, #0
01f28     50 30 B0 FD | 	call	#__system___getiolock_0102
01f2c     12 4B 02 F6 | 	mov	arg01, result1
01f30     58 1B B0 FD | 	call	#__system___lockmem
01f34     00 24 06 F6 | 	mov	result1, #0
01f38     00 70 06 F6 | 	mov	local15, #0
01f3c     2E 00 00 FF 
01f40     69 73 06 F6 | 	mov	local16, ##@LR__0339
01f44     39 75 02 F6 | 	mov	local17, local16
01f48     00 76 06 F6 | 	mov	local18, #0
01f4c     00 4A 06 F6 | 	mov	arg01, #0
01f50     3A 4D 02 F6 | 	mov	arg02, local17
01f54     00 4E 06 F6 | 	mov	arg03, #0
01f58     C8 1D B0 FD | 	call	#__system___basic_print_string
01f5c     12 67 02 F6 | 	mov	local10, result1
01f60     00 68 06 F6 | 	mov	local11, #0
01f64     3D 6C 06 F6 | 	mov	local13, #61
01f68                 | ' asm
01f68     3D 24 C6 FA | 	rdbyte	result1, #61
01f6c                 | ' return r
01f6c     12 6F 02 F6 | 	mov	local14, result1
01f70     37 6B 02 F6 | 	mov	local12, local14
01f74     07 6A 46 F7 | 	zerox	local12, #7
01f78     35 83 02 F6 | 	mov	local24, local12
01f7c     00 84 06 F6 | 	mov	local25, #0
01f80     0A 86 06 F6 | 	mov	local26, #10
01f84     00 4A 06 F6 | 	mov	arg01, #0
01f88     41 4D 02 F6 | 	mov	arg02, local24
01f8c     00 4E 06 F6 | 	mov	arg03, #0
01f90     0A 50 06 F6 | 	mov	arg04, #10
01f94     18 1E B0 FD | 	call	#__system___basic_print_unsigned
01f98     12 89 02 F6 | 	mov	local27, result1
01f9c     00 8A 06 F6 | 	mov	local28, #0
01fa0     00 4A 06 F6 | 	mov	arg01, #0
01fa4     0A 4C 06 F6 | 	mov	arg02, #10
01fa8     00 4E 06 F6 | 	mov	arg03, #0
01fac     28 1D B0 FD | 	call	#__system___basic_print_char
01fb0     01 24 06 F6 | 	mov	result1, #1
01fb4     01 90 06 F6 | 	mov	local31, #1
01fb8     00 92 06 F6 | 	mov	local32, #0
01fbc     00 4A 06 F6 | 	mov	arg01, #0
01fc0     B8 2F B0 FD | 	call	#__system___getiolock_0102
01fc4     12 01 68 FC | 	wrlong	#0, result1
01fc8     00 94 06 F6 | 	mov	local33, #0
01fcc     00 06 07 F6 | 	mov	local90, #0
01fd0     3C 4A 06 F6 | 	mov	arg01, #60
01fd4     00 4C 06 F6 | 	mov	arg02, #0
01fd8                 | ' asm
01fd8     3C 00 6C FC | 	wrlong	#0, #60
01fdc     54 EB 9F FD | 	jmp	#LR__0001
01fe0     AF F0 03 F6 | 	mov	ptra, fp
01fe4     BF 00 A0 FD | 	call	#popregs_
01fe8                 | _program_ret
01fe8     2D 00 64 FD | 	ret
01fec                 | 
01fec                 | ' 
01fec                 | ' 
01fec                 | ' ''---------- putpixel - put a pixel on the screen
01fec                 | ' 
01fec                 | ' pub putpixel1(x,y,c) |byte b
01fec                 | _hng030rm_spin2_putpixel1
01fec                 | ' 
01fec                 | ' 
01fec                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01fec     00 2A 06 F6 | 	mov	_var01, #0
01ff0     00 4A 5E F2 | 	cmps	arg01, #0 wcz
01ff4     01 2A 66 36 |  if_ae	neg	_var01, #1
01ff8     00 2C 06 F6 | 	mov	_var02, #0
01ffc     90 0E 06 F1 | 	add	objptr, #144
02000     07 2F 02 FB | 	rdlong	_var03, objptr
02004     05 2E 66 F0 | 	shl	_var03, #5
02008     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
0200c     01 2C 66 C6 |  if_b	neg	_var02, #1
02010     16 2B 02 F5 | 	and	_var01, _var02
02014     00 30 06 F6 | 	mov	_var04, #0
02018     00 4C 5E F2 | 	cmps	arg02, #0 wcz
0201c     01 30 66 36 |  if_ae	neg	_var04, #1
02020     18 2B 02 F5 | 	and	_var01, _var04
02024     00 32 06 F6 | 	mov	_var05, #0
02028     04 0E 06 F1 | 	add	objptr, #4
0202c     07 35 02 FB | 	rdlong	_var06, objptr
02030     94 0E 86 F1 | 	sub	objptr, #148
02034     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02038     01 32 66 C6 |  if_b	neg	_var05, #1
0203c     19 2B CA F7 | 	test	_var01, _var05 wz
02040     8C 00 90 AD |  if_e	jmp	#LR__0032
02044     90 0E 06 F1 | 	add	objptr, #144
02048     07 37 02 FB | 	rdlong	_var07, objptr
0204c     90 0E 86 F1 | 	sub	objptr, #144
02050     02 36 66 F0 | 	shl	_var07, #2
02054     26 37 02 FD | 	qmul	_var07, arg02
02058     18 38 62 FD | 	getqx	_var08
0205c     07 3B 02 FB | 	rdlong	_var09, objptr
02060     1C 3B 02 F1 | 	add	_var09, _var08
02064     25 3D 02 F6 | 	mov	_var10, arg01
02068     03 3C 46 F0 | 	shr	_var10, #3
0206c     1E 3B 02 F1 | 	add	_var09, _var10
02070                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02070     1D 3F C2 FA | 	rdbyte	_var11, _var09
02074                 | '     if (c==0)
02074     00 4E 0E F2 | 	cmp	arg03, #0 wz
02078     18 00 90 5D |  if_ne	jmp	#LR__0030
0207c     25 2B 52 F6 | 	abs	_var01, arg01 wc
02080     07 2A 06 F5 | 	and	_var01, #7
02084     15 2B 62 C6 |  if_b	neg	_var01, _var01
02088     15 41 C2 F9 | 	decod	_var12, _var01
0208c                 | '       b:=b & !(1<<(x//8))
0208c     20 3F 22 F5 | 	andn	_var11, _var12
02090                 | '     else
02090     14 00 90 FD | 	jmp	#LR__0031
02094                 | LR__0030
02094     25 2B 52 F6 | 	abs	_var01, arg01 wc
02098     07 2A 06 F5 | 	and	_var01, #7
0209c     15 2B 62 C6 |  if_b	neg	_var01, _var01
020a0     15 43 C2 F9 | 	decod	_var13, _var01
020a4                 | '       b:=b |(1<<(x//8))
020a4     21 3F 42 F5 | 	or	_var11, _var13
020a8                 | LR__0031
020a8     90 0E 06 F1 | 	add	objptr, #144
020ac     07 45 02 FB | 	rdlong	_var14, objptr
020b0     90 0E 86 F1 | 	sub	objptr, #144
020b4     02 44 66 F0 | 	shl	_var14, #2
020b8     26 45 02 FD | 	qmul	_var14, arg02
020bc     18 46 62 FD | 	getqx	_var15
020c0     07 49 02 FB | 	rdlong	_var16, objptr
020c4     23 49 02 F1 | 	add	_var16, _var15
020c8     1E 49 02 F1 | 	add	_var16, _var10
020cc                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
020cc     24 3F 42 FC | 	wrbyte	_var11, _var16
020d0                 | LR__0032
020d0                 | _hng030rm_spin2_putpixel1_ret
020d0     2D 00 64 FD | 	ret
020d4                 | 
020d4                 | ' 
020d4                 | ' 
020d4                 | ' pub putpixel2(x,y,c) |byte b
020d4                 | _hng030rm_spin2_putpixel2
020d4                 | ' 
020d4                 | ' 
020d4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020d4     00 2A 06 F6 | 	mov	_var01, #0
020d8     00 4A 5E F2 | 	cmps	arg01, #0 wcz
020dc     01 2A 66 36 |  if_ae	neg	_var01, #1
020e0     00 2C 06 F6 | 	mov	_var02, #0
020e4     90 0E 06 F1 | 	add	objptr, #144
020e8     07 2F 02 FB | 	rdlong	_var03, objptr
020ec     04 2E 66 F0 | 	shl	_var03, #4
020f0     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
020f4     01 2C 66 C6 |  if_b	neg	_var02, #1
020f8     16 2B 02 F5 | 	and	_var01, _var02
020fc     00 30 06 F6 | 	mov	_var04, #0
02100     00 4C 5E F2 | 	cmps	arg02, #0 wcz
02104     01 30 66 36 |  if_ae	neg	_var04, #1
02108     18 2B 02 F5 | 	and	_var01, _var04
0210c     00 32 06 F6 | 	mov	_var05, #0
02110     04 0E 06 F1 | 	add	objptr, #4
02114     07 35 02 FB | 	rdlong	_var06, objptr
02118     94 0E 86 F1 | 	sub	objptr, #148
0211c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02120     01 32 66 C6 |  if_b	neg	_var05, #1
02124     19 2B CA F7 | 	test	_var01, _var05 wz
02128     7C 00 90 AD |  if_e	jmp	#LR__0033
0212c     90 0E 06 F1 | 	add	objptr, #144
02130     07 37 02 FB | 	rdlong	_var07, objptr
02134     90 0E 86 F1 | 	sub	objptr, #144
02138     02 36 66 F0 | 	shl	_var07, #2
0213c     26 37 02 FD | 	qmul	_var07, arg02
02140     18 38 62 FD | 	getqx	_var08
02144     07 3B 02 FB | 	rdlong	_var09, objptr
02148     1C 3B 02 F1 | 	add	_var09, _var08
0214c     25 3D 02 F6 | 	mov	_var10, arg01
02150     02 3C 46 F0 | 	shr	_var10, #2
02154     1E 3B 02 F1 | 	add	_var09, _var10
02158                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02158     1D 3F C2 FA | 	rdbyte	_var11, _var09
0215c     25 2B 52 F6 | 	abs	_var01, arg01 wc
02160     03 2A 06 F5 | 	and	_var01, #3
02164     15 2B 62 C6 |  if_b	neg	_var01, _var01
02168     01 2A 66 F0 | 	shl	_var01, #1
0216c     03 40 06 F6 | 	mov	_var12, #3
02170     15 41 62 F0 | 	shl	_var12, _var01
02174                 | '     b:=b & !(%11<<((x//4)<<1))
02174     20 3F 22 F5 | 	andn	_var11, _var12
02178     15 4F 62 F0 | 	shl	arg03, _var01
0217c                 | '     b:=b |(c<<((x//4)<<1))
0217c     27 3F 42 F5 | 	or	_var11, arg03
02180     90 0E 06 F1 | 	add	objptr, #144
02184     07 43 02 FB | 	rdlong	_var13, objptr
02188     90 0E 86 F1 | 	sub	objptr, #144
0218c     02 42 66 F0 | 	shl	_var13, #2
02190     26 43 02 FD | 	qmul	_var13, arg02
02194     18 44 62 FD | 	getqx	_var14
02198     07 47 02 FB | 	rdlong	_var15, objptr
0219c     22 47 02 F1 | 	add	_var15, _var14
021a0     1E 47 02 F1 | 	add	_var15, _var10
021a4                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
021a4     23 3F 42 FC | 	wrbyte	_var11, _var15
021a8                 | LR__0033
021a8                 | _hng030rm_spin2_putpixel2_ret
021a8     2D 00 64 FD | 	ret
021ac                 | 
021ac                 | ' 
021ac                 | ' 
021ac                 | ' pub putpixel4(x,y,c) |byte b
021ac                 | _hng030rm_spin2_putpixel4
021ac                 | ' 
021ac                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
021ac     00 2A 06 F6 | 	mov	_var01, #0
021b0     00 4A 5E F2 | 	cmps	arg01, #0 wcz
021b4     01 2A 66 36 |  if_ae	neg	_var01, #1
021b8     00 2C 06 F6 | 	mov	_var02, #0
021bc     90 0E 06 F1 | 	add	objptr, #144
021c0     07 2F 02 FB | 	rdlong	_var03, objptr
021c4     04 2E 66 F0 | 	shl	_var03, #4
021c8     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
021cc     01 2C 66 C6 |  if_b	neg	_var02, #1
021d0     16 2B 02 F5 | 	and	_var01, _var02
021d4     00 30 06 F6 | 	mov	_var04, #0
021d8     00 4C 5E F2 | 	cmps	arg02, #0 wcz
021dc     01 30 66 36 |  if_ae	neg	_var04, #1
021e0     18 2B 02 F5 | 	and	_var01, _var04
021e4     00 32 06 F6 | 	mov	_var05, #0
021e8     04 0E 06 F1 | 	add	objptr, #4
021ec     07 35 02 FB | 	rdlong	_var06, objptr
021f0     94 0E 86 F1 | 	sub	objptr, #148
021f4     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
021f8     01 32 66 C6 |  if_b	neg	_var05, #1
021fc     19 2B CA F7 | 	test	_var01, _var05 wz
02200     7C 00 90 AD |  if_e	jmp	#LR__0034
02204     90 0E 06 F1 | 	add	objptr, #144
02208     07 37 02 FB | 	rdlong	_var07, objptr
0220c     90 0E 86 F1 | 	sub	objptr, #144
02210     02 36 66 F0 | 	shl	_var07, #2
02214     26 37 02 FD | 	qmul	_var07, arg02
02218     18 38 62 FD | 	getqx	_var08
0221c     07 3B 02 FB | 	rdlong	_var09, objptr
02220     1C 3B 02 F1 | 	add	_var09, _var08
02224     25 3D 02 F6 | 	mov	_var10, arg01
02228     01 3C 46 F0 | 	shr	_var10, #1
0222c     1E 3B 02 F1 | 	add	_var09, _var10
02230                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02230     1D 3F C2 FA | 	rdbyte	_var11, _var09
02234     25 2B 52 F6 | 	abs	_var01, arg01 wc
02238     01 2A 06 F5 | 	and	_var01, #1
0223c     15 2B 62 C6 |  if_b	neg	_var01, _var01
02240     02 2A 66 F0 | 	shl	_var01, #2
02244     0F 40 06 F6 | 	mov	_var12, #15
02248     15 41 62 F0 | 	shl	_var12, _var01
0224c                 | '     b:=b & !(%1111<<((x//2)<<2))
0224c     20 3F 22 F5 | 	andn	_var11, _var12
02250     15 4F 62 F0 | 	shl	arg03, _var01
02254                 | '     b:=b |(c<<((x//2)<<2))
02254     27 3F 42 F5 | 	or	_var11, arg03
02258     90 0E 06 F1 | 	add	objptr, #144
0225c     07 43 02 FB | 	rdlong	_var13, objptr
02260     90 0E 86 F1 | 	sub	objptr, #144
02264     02 42 66 F0 | 	shl	_var13, #2
02268     26 43 02 FD | 	qmul	_var13, arg02
0226c     18 44 62 FD | 	getqx	_var14
02270     07 47 02 FB | 	rdlong	_var15, objptr
02274     22 47 02 F1 | 	add	_var15, _var14
02278     1E 47 02 F1 | 	add	_var15, _var10
0227c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
0227c     23 3F 42 FC | 	wrbyte	_var11, _var15
02280                 | LR__0034
02280                 | _hng030rm_spin2_putpixel4_ret
02280     2D 00 64 FD | 	ret
02284                 | 
02284                 | ' 
02284                 | ' 
02284                 | ' pub putpixel8(x,y,c)
02284                 | _hng030rm_spin2_putpixel8
02284                 | ' 
02284                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02284     00 2A 06 F6 | 	mov	_var01, #0
02288     00 4A 5E F2 | 	cmps	arg01, #0 wcz
0228c     01 2A 66 36 |  if_ae	neg	_var01, #1
02290     00 2C 06 F6 | 	mov	_var02, #0
02294     90 0E 06 F1 | 	add	objptr, #144
02298     07 2F 02 FB | 	rdlong	_var03, objptr
0229c     02 2E 66 F0 | 	shl	_var03, #2
022a0     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
022a4     01 2C 66 C6 |  if_b	neg	_var02, #1
022a8     16 2B 02 F5 | 	and	_var01, _var02
022ac     00 30 06 F6 | 	mov	_var04, #0
022b0     00 4C 5E F2 | 	cmps	arg02, #0 wcz
022b4     01 30 66 36 |  if_ae	neg	_var04, #1
022b8     18 2B 02 F5 | 	and	_var01, _var04
022bc     00 32 06 F6 | 	mov	_var05, #0
022c0     04 0E 06 F1 | 	add	objptr, #4
022c4     07 35 02 FB | 	rdlong	_var06, objptr
022c8     94 0E 86 F1 | 	sub	objptr, #148
022cc     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
022d0     01 32 66 C6 |  if_b	neg	_var05, #1
022d4     19 2B CA F7 | 	test	_var01, _var05 wz
022d8     28 00 90 AD |  if_e	jmp	#LR__0035
022dc     90 0E 06 F1 | 	add	objptr, #144
022e0     07 37 02 FB | 	rdlong	_var07, objptr
022e4     90 0E 86 F1 | 	sub	objptr, #144
022e8     02 36 66 F0 | 	shl	_var07, #2
022ec     26 37 02 FD | 	qmul	_var07, arg02
022f0     18 38 62 FD | 	getqx	_var08
022f4     07 3B 02 FB | 	rdlong	_var09, objptr
022f8     1C 3B 02 F1 | 	add	_var09, _var08
022fc     25 3B 02 F1 | 	add	_var09, arg01
02300                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02300     1D 4F 42 FC | 	wrbyte	arg03, _var09
02304                 | LR__0035
02304                 | _hng030rm_spin2_putpixel8_ret
02304     2D 00 64 FD | 	ret
02308                 | 
02308                 | ' 
02308                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02308                 | ' 
02308                 | ' pub setbordercolor(r,g,b) | color
02308                 | _hng030rm_spin2_setbordercolor
02308     18 4A 66 F0 | 	shl	arg01, #24
0230c     10 4C 66 F0 | 	shl	arg02, #16
02310     26 4B 02 F1 | 	add	arg01, arg02
02314     08 4E 66 F0 | 	shl	arg03, #8
02318     27 4B 02 F1 | 	add	arg01, arg03
0231c                 | ' 
0231c                 | ' color:=r<<24+g<<16+b<<8
0231c                 | ' bordercolor:=color
0231c     2C 0E 06 F1 | 	add	objptr, #44
02320     07 4B 62 FC | 	wrlong	arg01, objptr
02324     2C 0E 86 F1 | 	sub	objptr, #44
02328                 | _hng030rm_spin2_setbordercolor_ret
02328     2D 00 64 FD | 	ret
0232c                 | 
0232c                 | ' 
0232c                 | ' 
0232c                 | ' '*************************************************************************
0232c                 | ' '                                                                        *
0232c                 | ' '  Text functions                                                        *
0232c                 | ' '                                                                        *
0232c                 | ' '*************************************************************************
0232c                 | ' 
0232c                 | ' ''---------- Clear the screen, set its foreground/background color
0232c                 | ' 
0232c                 | ' pub cls(fc,bc)   :c
0232c                 | _hng030rm_spin2_cls
0232c     07 5A 05 F6 | 	mov	COUNT_, #7
02330     B0 00 A0 FD | 	call	#pushregs_
02334     25 55 02 F6 | 	mov	local01, arg01
02338     26 57 02 F6 | 	mov	local02, arg02
0233c                 | ' 
0233c                 | ' if (graphmode<512)
0233c     C4 0E 06 F1 | 	add	objptr, #196
02340     07 59 02 FB | 	rdlong	local03, objptr
02344     C4 0E 86 F1 | 	sub	objptr, #196
02348     01 00 00 FF 
0234c     00 58 5E F2 | 	cmps	local03, ##512 wcz
02350     34 00 90 3D |  if_ae	jmp	#LR__0036
02354     2A 5B 02 F6 | 	mov	local04, local01
02358     18 5A 66 F0 | 	shl	local04, #24
0235c     2B 5D 02 F6 | 	mov	local05, local02
02360     10 5C 66 F0 | 	shl	local05, #16
02364     2E 5B 02 F1 | 	add	local04, local05
02368     20 5A 06 F1 | 	add	local04, #32
0236c                 | '   c:=fc<<24+bc<<16+$20
0236c                 | '   longfill(buf_ptr,c,buflen)
0236c     07 4B 02 FB | 	rdlong	arg01, objptr
02370     30 0E 06 F1 | 	add	objptr, #48
02374     07 4F 02 FB | 	rdlong	arg03, objptr
02378     30 0E 86 F1 | 	sub	objptr, #48
0237c     2D 4D 02 F6 | 	mov	arg02, local04
02380     A8 00 A0 FD | 	call	#\builtin_longfill_
02384                 | ' else
02384     AC 00 90 FD | 	jmp	#LR__0042
02388                 | LR__0036
02388                 | '   if (graphmode & 48) ==48
02388     C4 0E 06 F1 | 	add	objptr, #196
0238c     07 59 02 FB | 	rdlong	local03, objptr
02390     C4 0E 86 F1 | 	sub	objptr, #196
02394     30 58 06 F5 | 	and	local03, #48
02398     30 58 0E F2 | 	cmp	local03, #48 wz
0239c                 | '     c:=bc
0239c     2B 5B 02 A6 |  if_e	mov	local04, local02
023a0     74 00 90 AD |  if_e	jmp	#LR__0041
023a4                 | '   elseif (graphmode & 48) ==32
023a4     C4 0E 06 F1 | 	add	objptr, #196
023a8     07 59 02 FB | 	rdlong	local03, objptr
023ac     C4 0E 86 F1 | 	sub	objptr, #196
023b0     30 58 06 F5 | 	and	local03, #48
023b4     20 58 0E F2 | 	cmp	local03, #32 wz
023b8     10 00 90 5D |  if_ne	jmp	#LR__0037
023bc     2B 5B 02 F6 | 	mov	local04, local02
023c0     04 5A 66 F0 | 	shl	local04, #4
023c4     2B 5B 02 F1 | 	add	local04, local02
023c8                 | '     c:=bc<<4+bc
023c8     4C 00 90 FD | 	jmp	#LR__0040
023cc                 | LR__0037
023cc                 | '   elseif (graphmode & 48) ==16
023cc     C4 0E 06 F1 | 	add	objptr, #196
023d0     07 59 02 FB | 	rdlong	local03, objptr
023d4     C4 0E 86 F1 | 	sub	objptr, #196
023d8     30 58 06 F5 | 	and	local03, #48
023dc     10 58 0E F2 | 	cmp	local03, #16 wz
023e0     28 00 90 5D |  if_ne	jmp	#LR__0038
023e4     2B 5B 02 F6 | 	mov	local04, local02
023e8     06 5A 66 F0 | 	shl	local04, #6
023ec     2B 5F 02 F6 | 	mov	local06, local02
023f0     04 5E 66 F0 | 	shl	local06, #4
023f4     2F 5B 02 F1 | 	add	local04, local06
023f8     2B 61 02 F6 | 	mov	local07, local02
023fc     02 60 66 F0 | 	shl	local07, #2
02400     30 5B 02 F1 | 	add	local04, local07
02404     2B 5B 02 F1 | 	add	local04, local02
02408                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02408                 | '   else
02408     0C 00 90 FD | 	jmp	#LR__0039
0240c                 | LR__0038
0240c                 | '     if bc==1
0240c     01 56 0E F2 | 	cmp	local02, #1 wz
02410                 | '       c:=255
02410     FF 5A 06 A6 |  if_e	mov	local04, #255
02414                 | '     else
02414                 | '       c:=0
02414     00 5A 06 56 |  if_ne	mov	local04, #0
02418                 | LR__0039
02418                 | LR__0040
02418                 | LR__0041
02418     30 0E 06 F1 | 	add	objptr, #48
0241c     07 4F 02 FB | 	rdlong	arg03, objptr
02420     30 0E 86 F1 | 	sub	objptr, #48
02424     02 4E 66 F0 | 	shl	arg03, #2
02428                 | '   bytefill(buf_ptr,c,buflen*4)
02428     07 4B 02 FB | 	rdlong	arg01, objptr
0242c     2D 4D 02 F6 | 	mov	arg02, local04
02430     A0 00 A0 FD | 	call	#\builtin_bytefill_
02434                 | LR__0042
02434                 | ' setwritecolors(fc,bc)
02434                 | ' 
02434                 | ' 
02434                 | ' write_color:=ff
02434     38 0E 06 F1 | 	add	objptr, #56
02438     07 55 62 FC | 	wrlong	local01, objptr
0243c                 | ' write_background:=bb
0243c     04 0E 06 F1 | 	add	objptr, #4
02440     07 57 62 FC | 	wrlong	local02, objptr
02444                 | ' cursor_x:=0
02444     08 0E 86 F1 | 	sub	objptr, #8
02448     07 01 48 FC | 	wrbyte	#0, objptr
0244c                 | ' cursor_y:=0
0244c     01 0E 06 F1 | 	add	objptr, #1
02450     07 01 48 FC | 	wrbyte	#0, objptr
02454     35 0E 86 F1 | 	sub	objptr, #53
02458     2D 25 02 F6 | 	mov	result1, local04
0245c     AF F0 03 F6 | 	mov	ptra, fp
02460     BF 00 A0 FD | 	call	#popregs_
02464                 | _hng030rm_spin2_cls_ret
02464     2D 00 64 FD | 	ret
02468                 | 
02468                 | ' 
02468                 | ' ''---------- Output a char at the cursor position, move the cursor
02468                 | ' 
02468                 | ' pub putchar(achar) | c,x,y
02468                 | _hng030rm_spin2_putchar
02468     12 5A 05 F6 | 	mov	COUNT_, #18
0246c     B0 00 A0 FD | 	call	#pushregs_
02470     25 55 02 F6 | 	mov	local01, arg01
02474                 | ' 
02474                 | ' if achar==10
02474     0A 54 0E F2 | 	cmp	local01, #10 wz
02478     58 00 90 5D |  if_ne	jmp	#LR__0043
0247c                 | '   crlf()
0247c                 | ' 
0247c                 | ' cursor_x:=0
0247c     34 0E 06 F1 | 	add	objptr, #52
02480     07 01 48 FC | 	wrbyte	#0, objptr
02484                 | ' cursor_y+=1
02484     01 0E 06 F1 | 	add	objptr, #1
02488     07 57 C2 FA | 	rdbyte	local02, objptr
0248c     01 56 06 F1 | 	add	local02, #1
02490     07 57 42 FC | 	wrbyte	local02, objptr
02494                 | ' if cursor_y>lines-1
02494     5F 0E 06 F1 | 	add	objptr, #95
02498     07 57 02 FB | 	rdlong	local02, objptr
0249c     01 56 86 F1 | 	sub	local02, #1
024a0     5F 0E 86 F1 | 	sub	objptr, #95
024a4     07 59 C2 FA | 	rdbyte	local03, objptr
024a8     35 0E 86 F1 | 	sub	objptr, #53
024ac     2B 59 5A F2 | 	cmps	local03, local02 wcz
024b0     38 01 90 ED |  if_be	jmp	#LR__0046
024b4                 | '   scrollup()
024b4     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
024b8     94 0E 06 F1 | 	add	objptr, #148
024bc     07 5B 02 FB | 	rdlong	local04, objptr
024c0     01 5A 86 F1 | 	sub	local04, #1
024c4                 | '   cursor_y:=lines-1
024c4     5F 0E 86 F1 | 	sub	objptr, #95
024c8     07 5B 42 FC | 	wrbyte	local04, objptr
024cc     35 0E 86 F1 | 	sub	objptr, #53
024d0                 | ' else  
024d0     18 01 90 FD | 	jmp	#LR__0046
024d4                 | LR__0043
024d4                 | '   x:=cursor_x
024d4     34 0E 06 F1 | 	add	objptr, #52
024d8     07 5D C2 FA | 	rdbyte	local05, objptr
024dc                 | '   y:=cursor_y
024dc     01 0E 06 F1 | 	add	objptr, #1
024e0     07 5F C2 FA | 	rdbyte	local06, objptr
024e4     03 0E 06 F1 | 	add	objptr, #3
024e8     07 61 02 FB | 	rdlong	local07, objptr
024ec     18 60 66 F0 | 	shl	local07, #24
024f0     04 0E 06 F1 | 	add	objptr, #4
024f4     07 63 02 FB | 	rdlong	local08, objptr
024f8     10 62 66 F0 | 	shl	local08, #16
024fc     31 61 02 F1 | 	add	local07, local08
02500                 | '   c:=write_color<<24+write_background<<16
02500     54 0E 06 F1 | 	add	objptr, #84
02504     07 65 02 FB | 	rdlong	local09, objptr
02508     90 0E 86 F1 | 	sub	objptr, #144
0250c     2F 65 02 FD | 	qmul	local09, local06
02510     18 66 62 FD | 	getqx	local10
02514     2E 67 02 F1 | 	add	local10, local05
02518     02 66 66 F0 | 	shl	local10, #2
0251c     07 69 02 FB | 	rdlong	local11, objptr
02520     33 69 02 F1 | 	add	local11, local10
02524     34 6B 02 FB | 	rdlong	local12, local11
02528     7F 00 00 FF 
0252c     FF 6B 06 F5 | 	and	local12, ##65535
02530     30 6B 42 F5 | 	or	local12, local07
02534                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02534     34 6B 62 FC | 	wrlong	local12, local11
02538     90 0E 06 F1 | 	add	objptr, #144
0253c     07 65 02 FB | 	rdlong	local09, objptr
02540     90 0E 86 F1 | 	sub	objptr, #144
02544     2F 65 02 FD | 	qmul	local09, local06
02548     18 6C 62 FD | 	getqx	local13
0254c     2E 6D 02 F1 | 	add	local13, local05
02550     02 6C 66 F0 | 	shl	local13, #2
02554     07 6F 02 FB | 	rdlong	local14, objptr
02558     36 6F 02 F1 | 	add	local14, local13
0255c     37 71 02 FB | 	rdlong	local15, local14
02560     FF 70 26 F5 | 	andn	local15, #255
02564     FF 54 06 F5 | 	and	local01, #255
02568     2A 71 42 F5 | 	or	local15, local01
0256c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
0256c     37 71 62 FC | 	wrlong	local15, local14
02570                 | '   cursor_x+=1
02570     34 0E 06 F1 | 	add	objptr, #52
02574     07 73 C2 FA | 	rdbyte	local16, objptr
02578     01 72 06 F1 | 	add	local16, #1
0257c     07 73 42 FC | 	wrbyte	local16, objptr
02580                 | '   if cursor_x==cpl
02580     07 73 C2 FA | 	rdbyte	local16, objptr
02584     5C 0E 06 F1 | 	add	objptr, #92
02588     07 75 02 FB | 	rdlong	local17, objptr
0258c     90 0E 86 F1 | 	sub	objptr, #144
02590     3A 73 0A F2 | 	cmp	local16, local17 wz
02594     54 00 90 5D |  if_ne	jmp	#LR__0045
02598                 | '     cursor_x:=0
02598     34 0E 06 F1 | 	add	objptr, #52
0259c     07 01 48 FC | 	wrbyte	#0, objptr
025a0                 | '     cursor_y+=1
025a0     01 0E 06 F1 | 	add	objptr, #1
025a4     07 73 C2 FA | 	rdbyte	local16, objptr
025a8     01 72 06 F1 | 	add	local16, #1
025ac     07 73 42 FC | 	wrbyte	local16, objptr
025b0                 | '     if cursor_y>lines-1
025b0     5F 0E 06 F1 | 	add	objptr, #95
025b4     07 73 02 FB | 	rdlong	local16, objptr
025b8     01 72 86 F1 | 	sub	local16, #1
025bc     5F 0E 86 F1 | 	sub	objptr, #95
025c0     07 75 C2 FA | 	rdbyte	local17, objptr
025c4     35 0E 86 F1 | 	sub	objptr, #53
025c8     39 75 5A F2 | 	cmps	local17, local16 wcz
025cc     1C 00 90 ED |  if_be	jmp	#LR__0044
025d0                 | '       scrollup()
025d0     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
025d4     94 0E 06 F1 | 	add	objptr, #148
025d8     07 77 02 FB | 	rdlong	local18, objptr
025dc     01 76 86 F1 | 	sub	local18, #1
025e0                 | '       cursor_y:=lines-1
025e0     5F 0E 86 F1 | 	sub	objptr, #95
025e4     07 77 42 FC | 	wrbyte	local18, objptr
025e8     35 0E 86 F1 | 	sub	objptr, #53
025ec                 | LR__0044
025ec                 | LR__0045
025ec                 | LR__0046
025ec     AF F0 03 F6 | 	mov	ptra, fp
025f0     BF 00 A0 FD | 	call	#popregs_
025f4                 | _hng030rm_spin2_putchar_ret
025f4     2D 00 64 FD | 	ret
025f8                 | 
025f8                 | ' 
025f8                 | ' ''-----------  Scroll the screen one line up
025f8                 | ' 
025f8                 | ' pub scrollup() | i
025f8                 | _hng030rm_spin2_scrollup
025f8     0A 5A 05 F6 | 	mov	COUNT_, #10
025fc     B0 00 A0 FD | 	call	#pushregs_
02600     90 0E 06 F1 | 	add	objptr, #144
02604     07 55 02 FB | 	rdlong	local01, objptr
02608     90 0E 86 F1 | 	sub	objptr, #144
0260c     02 54 66 F0 | 	shl	local01, #2
02610     07 4D 02 FB | 	rdlong	arg02, objptr
02614     2A 4D 02 F1 | 	add	arg02, local01
02618     30 0E 06 F1 | 	add	objptr, #48
0261c     07 4F 02 FB | 	rdlong	arg03, objptr
02620     60 0E 06 F1 | 	add	objptr, #96
02624     07 57 02 FB | 	rdlong	local02, objptr
02628     90 0E 86 F1 | 	sub	objptr, #144
0262c     2B 4F 82 F1 | 	sub	arg03, local02
02630                 | ' 
02630                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02630     07 4B 02 FB | 	rdlong	arg01, objptr
02634     7C 13 B0 FD | 	call	#__system__longmove
02638                 | ' repeat i from buflen-cpl to buflen-1
02638     30 0E 06 F1 | 	add	objptr, #48
0263c     07 59 02 FB | 	rdlong	local03, objptr
02640     60 0E 06 F1 | 	add	objptr, #96
02644     07 57 02 FB | 	rdlong	local02, objptr
02648     2B 59 82 F1 | 	sub	local03, local02
0264c     60 0E 86 F1 | 	sub	objptr, #96
02650     07 5B 02 FB | 	rdlong	local04, objptr
02654     01 5A 86 F1 | 	sub	local04, #1
02658     07 5D 02 FB | 	rdlong	local05, objptr
0265c     60 0E 06 F1 | 	add	objptr, #96
02660     07 5F 02 FB | 	rdlong	local06, objptr
02664     90 0E 86 F1 | 	sub	objptr, #144
02668     2F 5D 82 F1 | 	sub	local05, local06
0266c     2E 5B 5A F2 | 	cmps	local04, local05 wcz
02670     01 60 06 16 |  if_a	mov	local07, #1
02674     01 60 66 E6 |  if_be	neg	local07, #1
02678     30 5B 02 F1 | 	add	local04, local07
0267c     B0 D9 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
02680     93 00 A0 FD | 	call	#FCACHE_LOAD_
02684                 | LR__0047
02684     2C 63 02 F6 | 	mov	local08, local03
02688     02 62 66 F0 | 	shl	local08, #2
0268c     07 65 02 FB | 	rdlong	local09, objptr
02690     31 65 02 F1 | 	add	local09, local08
02694     32 67 02 FB | 	rdlong	local10, local09
02698     80 FF 7F FF 
0269c     00 66 06 F5 | 	and	local10, ##-65536
026a0     20 66 46 F5 | 	or	local10, #32
026a4                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
026a4     32 67 62 FC | 	wrlong	local10, local09
026a8     30 59 02 F1 | 	add	local03, local07
026ac     2D 59 0A F2 | 	cmp	local03, local04 wz
026b0     D0 FF 9F 5D |  if_ne	jmp	#LR__0047
026b4                 | LR__0048
026b4     AF F0 03 F6 | 	mov	ptra, fp
026b8     BF 00 A0 FD | 	call	#popregs_
026bc                 | _hng030rm_spin2_scrollup_ret
026bc     2D 00 64 FD | 	ret
026c0                 | 
026c0                 | ' 
026c0                 | ' 
026c0                 | ' 
026c0                 | ' '*************************************************************************
026c0                 | ' '                                                                        *
026c0                 | ' '  Mode setting and driver start                                                          *
026c0                 | ' '                                                                        *
026c0                 | ' '*************************************************************************
026c0                 | ' 
026c0                 | ' ''---------  Set the graphics mode
026c0                 | ' 
026c0                 | ' 
026c0                 | ' 
026c0                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
026c0                 | _hng030rm_spin2_setmode
026c0     50 5A 05 F6 | 	mov	COUNT_, #80
026c4     B0 00 A0 FD | 	call	#pushregs_
026c8     25 55 02 F6 | 	mov	local01, arg01
026cc                 | ' 
026cc                 | ' '' mode:tn_bb_cc_vv_hh
026cc                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
026cc                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
026cc                 | ' 
026cc                 | ' if mode==(512+192+48)
026cc     01 00 00 FF 
026d0     F0 54 0E F2 | 	cmp	local01, ##752 wz
026d4                 | '   return 'no RAM
026d4     1C 0A 90 AD |  if_e	jmp	#LR__0089
026d8                 | ' 
026d8                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
026d8     2A 57 02 F6 | 	mov	local02, local01
026dc     06 56 46 F0 | 	shr	local02, #6
026e0     07 56 06 F5 | 	and	local02, #7
026e4     08 56 26 F3 | 	fle	local02, #8
026e8     2B 59 02 F6 | 	mov	local03, local02
026ec     30 58 62 FD | 	jmprel	local03
026f0                 | LR__0049
026f0     20 00 90 FD | 	jmp	#LR__0050
026f4     58 00 90 FD | 	jmp	#LR__0051
026f8     90 00 90 FD | 	jmp	#LR__0052
026fc     C8 00 90 FD | 	jmp	#LR__0053
02700     00 01 90 FD | 	jmp	#LR__0054
02704     38 01 90 FD | 	jmp	#LR__0055
02708     70 01 90 FD | 	jmp	#LR__0056
0270c     A8 01 90 FD | 	jmp	#LR__0057
02710     E4 01 90 FD | 	jmp	#LR__0058
02714                 | LR__0050
02714                 | ' 
02714                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02714     50 0E 06 F1 | 	add	objptr, #80
02718     07 4B 02 F6 | 	mov	arg01, objptr
0271c     50 0E 86 F1 | 	sub	objptr, #80
02720     0E 00 00 FF 
02724     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02728     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
0272c     2D 5D 02 F6 | 	mov	local05, local04
02730     10 5E 06 F6 | 	mov	local06, #16
02734     2E 4D 02 F6 | 	mov	arg02, local05
02738     10 4E 06 F6 | 	mov	arg03, #16
0273c     0E 00 00 FF 
02740     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02744     6C 12 B0 FD | 	call	#__system__longmove
02748     12 61 02 F6 | 	mov	local07, result1
0274c     A8 01 90 FD | 	jmp	#LR__0058
02750                 | LR__0051
02750                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02750     50 0E 06 F1 | 	add	objptr, #80
02754     07 4B 02 F6 | 	mov	arg01, objptr
02758     50 0E 86 F1 | 	sub	objptr, #80
0275c     0E 00 00 FF 
02760     98 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02764     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02768     2D 5D 02 F6 | 	mov	local05, local04
0276c     10 5E 06 F6 | 	mov	local06, #16
02770     2E 4D 02 F6 | 	mov	arg02, local05
02774     10 4E 06 F6 | 	mov	arg03, #16
02778     0E 00 00 FF 
0277c     98 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02780     30 12 B0 FD | 	call	#__system__longmove
02784     12 61 02 F6 | 	mov	local07, result1
02788     6C 01 90 FD | 	jmp	#LR__0058
0278c                 | LR__0052
0278c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
0278c     50 0E 06 F1 | 	add	objptr, #80
02790     07 4B 02 F6 | 	mov	arg01, objptr
02794     50 0E 86 F1 | 	sub	objptr, #80
02798     0E 00 00 FF 
0279c     D8 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
027a0     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
027a4     2D 5D 02 F6 | 	mov	local05, local04
027a8     10 5E 06 F6 | 	mov	local06, #16
027ac     2E 4D 02 F6 | 	mov	arg02, local05
027b0     10 4E 06 F6 | 	mov	arg03, #16
027b4     0E 00 00 FF 
027b8     D8 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
027bc     F4 11 B0 FD | 	call	#__system__longmove
027c0     12 61 02 F6 | 	mov	local07, result1
027c4     30 01 90 FD | 	jmp	#LR__0058
027c8                 | LR__0053
027c8                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
027c8     50 0E 06 F1 | 	add	objptr, #80
027cc     07 4B 02 F6 | 	mov	arg01, objptr
027d0     50 0E 86 F1 | 	sub	objptr, #80
027d4     0E 00 00 FF 
027d8     18 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
027dc     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
027e0     2D 5D 02 F6 | 	mov	local05, local04
027e4     10 5E 06 F6 | 	mov	local06, #16
027e8     2E 4D 02 F6 | 	mov	arg02, local05
027ec     10 4E 06 F6 | 	mov	arg03, #16
027f0     0E 00 00 FF 
027f4     18 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
027f8     B8 11 B0 FD | 	call	#__system__longmove
027fc     12 61 02 F6 | 	mov	local07, result1
02800     F4 00 90 FD | 	jmp	#LR__0058
02804                 | LR__0054
02804                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02804     50 0E 06 F1 | 	add	objptr, #80
02808     07 4B 02 F6 | 	mov	arg01, objptr
0280c     50 0E 86 F1 | 	sub	objptr, #80
02810     0E 00 00 FF 
02814     58 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02818     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
0281c     2D 5D 02 F6 | 	mov	local05, local04
02820     10 5E 06 F6 | 	mov	local06, #16
02824     2E 4D 02 F6 | 	mov	arg02, local05
02828     10 4E 06 F6 | 	mov	arg03, #16
0282c     0E 00 00 FF 
02830     58 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02834     7C 11 B0 FD | 	call	#__system__longmove
02838     12 61 02 F6 | 	mov	local07, result1
0283c     B8 00 90 FD | 	jmp	#LR__0058
02840                 | LR__0055
02840                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02840     50 0E 06 F1 | 	add	objptr, #80
02844     07 4B 02 F6 | 	mov	arg01, objptr
02848     50 0E 86 F1 | 	sub	objptr, #80
0284c     0E 00 00 FF 
02850     98 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02854     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02858     2D 5D 02 F6 | 	mov	local05, local04
0285c     10 5E 06 F6 | 	mov	local06, #16
02860     2E 4D 02 F6 | 	mov	arg02, local05
02864     10 4E 06 F6 | 	mov	arg03, #16
02868     0E 00 00 FF 
0286c     98 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02870     40 11 B0 FD | 	call	#__system__longmove
02874     12 61 02 F6 | 	mov	local07, result1
02878     7C 00 90 FD | 	jmp	#LR__0058
0287c                 | LR__0056
0287c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
0287c     50 0E 06 F1 | 	add	objptr, #80
02880     07 4B 02 F6 | 	mov	arg01, objptr
02884     50 0E 86 F1 | 	sub	objptr, #80
02888     0E 00 00 FF 
0288c     D8 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02890     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02894     2D 5D 02 F6 | 	mov	local05, local04
02898     10 5E 06 F6 | 	mov	local06, #16
0289c     2E 4D 02 F6 | 	mov	arg02, local05
028a0     10 4E 06 F6 | 	mov	arg03, #16
028a4     0E 00 00 FF 
028a8     D8 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
028ac     04 11 B0 FD | 	call	#__system__longmove
028b0     12 61 02 F6 | 	mov	local07, result1
028b4     40 00 90 FD | 	jmp	#LR__0058
028b8                 | LR__0057
028b8                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
028b8     50 0E 06 F1 | 	add	objptr, #80
028bc     07 63 02 F6 | 	mov	local08, objptr
028c0     31 65 02 F6 | 	mov	local09, local08
028c4     0F 00 00 FF 
028c8     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
028cc     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
028d0     2D 5D 02 F6 | 	mov	local05, local04
028d4     10 5E 06 F6 | 	mov	local06, #16
028d8     32 4B 02 F6 | 	mov	arg01, local09
028dc     2E 4D 02 F6 | 	mov	arg02, local05
028e0     10 4E 06 F6 | 	mov	arg03, #16
028e4     50 0E 86 F1 | 	sub	objptr, #80
028e8     0F 00 00 FF 
028ec     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
028f0     C0 10 B0 FD | 	call	#__system__longmove
028f4     12 61 02 F6 | 	mov	local07, result1
028f8                 | LR__0058
028f8                 | ' 
028f8                 | ' ' 4-bit graphics: do nothing with timings :)
028f8                 | ' if mode<512
028f8     01 00 00 FF 
028fc     00 54 5E F2 | 	cmps	local01, ##512 wcz
02900     20 00 90 3D |  if_ae	jmp	#LR__0059
02904     0C 00 00 FF 
02908     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
0290c     0B 67 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02910                 | '   palette_ptr:=@ataripalette
02910     18 0E 06 F1 | 	add	objptr, #24
02914     07 67 62 FC | 	wrlong	local10, objptr
02918     18 0E 86 F1 | 	sub	objptr, #24
0291c     0C 00 00 FF 
02920     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02924                 | LR__0059
02924                 | ' 
02924                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02924     2A 57 02 F6 | 	mov	local02, local01
02928     01 00 00 FF 
0292c     30 56 06 F5 | 	and	local02, ##560
02930     01 00 00 FF 
02934     30 56 0E F2 | 	cmp	local02, ##560 wz
02938     48 00 90 5D |  if_ne	jmp	#LR__0060
0293c                 | '   timings[5]:=4
0293c     64 0E 06 F1 | 	add	objptr, #100
02940     07 09 68 FC | 	wrlong	#4, objptr
02944     18 0E 06 F1 | 	add	objptr, #24
02948     07 69 02 FB | 	rdlong	local11, objptr
0294c     01 68 66 F0 | 	shl	local11, #1
02950                 | '   timings[11]:=timings[11]<<1
02950     07 69 62 FC | 	wrlong	local11, objptr
02954                 | '   putpixel:=p8
02954     6C 0E 06 F1 | 	add	objptr, #108
02958     07 57 02 FB | 	rdlong	local02, objptr
0295c     10 0E 86 F1 | 	sub	objptr, #16
02960     07 57 62 FC | 	wrlong	local02, objptr
02964     0C 00 00 FF 
02968     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
0296c     0B 6B 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02970                 | '   palette_ptr:=@ataripalette
02970     C0 0E 86 F1 | 	sub	objptr, #192
02974     07 6B 62 FC | 	wrlong	local12, objptr
02978     18 0E 86 F1 | 	sub	objptr, #24
0297c     0C 00 00 FF 
02980     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02984                 | LR__0060
02984                 | ' 
02984                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02984     2A 57 02 F6 | 	mov	local02, local01
02988     01 00 00 FF 
0298c     30 56 06 F5 | 	and	local02, ##560
02990     01 00 00 FF 
02994     10 56 0E F2 | 	cmp	local02, ##528 wz
02998     48 00 90 5D |  if_ne	jmp	#LR__0061
0299c                 | '   timings[5]:=16
0299c     64 0E 06 F1 | 	add	objptr, #100
029a0     07 21 68 FC | 	wrlong	#16, objptr
029a4     18 0E 06 F1 | 	add	objptr, #24
029a8     07 6D 02 FB | 	rdlong	local13, objptr
029ac     01 6C 46 F0 | 	shr	local13, #1
029b0                 | '   timings[11]:=timings[11]>>1
029b0     07 6D 62 FC | 	wrlong	local13, objptr
029b4                 | '   putpixel:=p2
029b4     64 0E 06 F1 | 	add	objptr, #100
029b8     07 57 02 FB | 	rdlong	local02, objptr
029bc     08 0E 86 F1 | 	sub	objptr, #8
029c0     07 57 62 FC | 	wrlong	local02, objptr
029c4     0C 00 00 FF 
029c8     08 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
029cc     0B 6F 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
029d0                 | '   palette_ptr:=@fourcolors
029d0     C0 0E 86 F1 | 	sub	objptr, #192
029d4     07 6F 62 FC | 	wrlong	local14, objptr
029d8     18 0E 86 F1 | 	sub	objptr, #24
029dc     0C 00 00 FF 
029e0     08 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
029e4                 | LR__0061
029e4                 | ' 
029e4                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
029e4     2A 57 02 F6 | 	mov	local02, local01
029e8     01 00 00 FF 
029ec     30 56 06 F5 | 	and	local02, ##560
029f0     01 00 00 FF 
029f4     00 56 0E F2 | 	cmp	local02, ##512 wz
029f8     48 00 90 5D |  if_ne	jmp	#LR__0062
029fc                 | '   timings[5]:=32
029fc     64 0E 06 F1 | 	add	objptr, #100
02a00     07 41 68 FC | 	wrlong	#32, objptr
02a04     18 0E 06 F1 | 	add	objptr, #24
02a08     07 71 02 FB | 	rdlong	local15, objptr
02a0c     02 70 46 F0 | 	shr	local15, #2
02a10                 | '   timings[11]:=timings[11]>>2
02a10     07 71 62 FC | 	wrlong	local15, objptr
02a14                 | '   putpixel:=p1
02a14     60 0E 06 F1 | 	add	objptr, #96
02a18     07 57 02 FB | 	rdlong	local02, objptr
02a1c     04 0E 86 F1 | 	sub	objptr, #4
02a20     07 57 62 FC | 	wrlong	local02, objptr
02a24     0C 00 00 FF 
02a28     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02a2c     0B 73 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02a30                 | '   palette_ptr:=@twocolors
02a30     C0 0E 86 F1 | 	sub	objptr, #192
02a34     07 73 62 FC | 	wrlong	local16, objptr
02a38     18 0E 86 F1 | 	sub	objptr, #24
02a3c     0C 00 00 FF 
02a40     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02a44                 | LR__0062
02a44                 | ' 
02a44                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02a44     2A 57 02 F6 | 	mov	local02, local01
02a48     01 00 00 FF 
02a4c     30 56 06 F5 | 	and	local02, ##560
02a50     01 00 00 FF 
02a54     20 56 0E F2 | 	cmp	local02, ##544 wz
02a58     30 00 90 5D |  if_ne	jmp	#LR__0063
02a5c                 | '   putpixel:=p4
02a5c     E4 0E 06 F1 | 	add	objptr, #228
02a60     07 57 02 FB | 	rdlong	local02, objptr
02a64     0C 0E 86 F1 | 	sub	objptr, #12
02a68     07 57 62 FC | 	wrlong	local02, objptr
02a6c     0C 00 00 FF 
02a70     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02a74     0B 75 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02a78                 | '   palette_ptr:=@vga16
02a78     C0 0E 86 F1 | 	sub	objptr, #192
02a7c     07 75 62 FC | 	wrlong	local17, objptr
02a80     18 0E 86 F1 | 	sub	objptr, #24
02a84     0C 00 00 FF 
02a88     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02a8c                 | LR__0063
02a8c                 | ' 
02a8c                 | ' repeat i from 0 to 4
02a8c     00 76 06 F6 | 	mov	local18, #0
02a90     B0 D5 9F FE | 	loc	pa,	#(@LR__0065-@LR__0064)
02a94     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a98                 | LR__0064
02a98     3B 79 02 F6 | 	mov	local19, local18
02a9c     02 78 66 F0 | 	shl	local19, #2
02aa0     50 0E 06 F1 | 	add	objptr, #80
02aa4     07 79 02 F1 | 	add	local19, objptr
02aa8     2C 0E 86 F1 | 	sub	objptr, #44
02aac     07 7B 02 FB | 	rdlong	local20, objptr
02ab0     24 0E 86 F1 | 	sub	objptr, #36
02ab4     11 7A 66 F0 | 	shl	local20, #17
02ab8     3C 7D 02 FB | 	rdlong	local21, local19
02abc     3D 7D 02 F1 | 	add	local21, local20
02ac0     3E 7F 02 F6 | 	mov	local22, local21
02ac4     80 40 38 FF 
02ac8     00 7E 06 F1 | 	add	local22, ##1887502336
02acc                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02acc     3C 7F 62 FC | 	wrlong	local22, local19
02ad0     01 76 06 F1 | 	add	local18, #1
02ad4     05 76 5E F2 | 	cmps	local18, #5 wcz
02ad8     BC FF 9F CD |  if_b	jmp	#LR__0064
02adc                 | LR__0065
02adc     24 0E 06 F1 | 	add	objptr, #36
02ae0     07 81 02 FB | 	rdlong	local23, objptr
02ae4     11 80 66 F0 | 	shl	local23, #17
02ae8     40 0E 06 F1 | 	add	objptr, #64
02aec     07 83 02 FB | 	rdlong	local24, objptr
02af0     40 83 02 F1 | 	add	local24, local23
02af4                 | ' timings[5]:=timings[5]+hdmibase<<17
02af4     07 83 62 FC | 	wrlong	local24, objptr
02af8                 | ' clkfreq:=timings[13]
02af8     20 0E 06 F1 | 	add	objptr, #32
02afc     07 57 02 FB | 	rdlong	local02, objptr
02b00     14 56 66 FC | 	wrlong	local02, #20
02b04                 | ' hubset(timings[14])
02b04     04 0E 06 F1 | 	add	objptr, #4
02b08     07 4B 02 FB | 	rdlong	arg01, objptr
02b0c     88 0E 86 F1 | 	sub	objptr, #136
02b10     00 4A 62 FD | 	hubset	arg01
02b14                 | ' waitms(1)
02b14     01 4A 06 F6 | 	mov	arg01, #1
02b18     8C 10 B0 FD | 	call	#__system___waitms
02b1c     2A 85 02 F6 | 	mov	local25, local01
02b20     03 84 06 F5 | 	and	local25, #3
02b24     42 87 C2 F9 | 	decod	local26, local25
02b28                 | ' 
02b28                 | ' 
02b28                 | ' xzoom:=1<<(mode & 3)
02b28     CC 0E 06 F1 | 	add	objptr, #204
02b2c     07 87 62 FC | 	wrlong	local26, objptr
02b30                 | ' 
02b30                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02b30     43 63 02 F6 | 	mov	local08, local26
02b34     CC 0E 86 F1 | 	sub	objptr, #204
02b38     08 62 0E F2 | 	cmp	local08, #8 wz
02b3c     24 00 90 5D |  if_ne	jmp	#LR__0066
02b40     2A 65 02 F6 | 	mov	local09, local01
02b44     04 64 46 F0 | 	shr	local09, #4
02b48     03 64 06 F5 | 	and	local09, #3
02b4c     03 64 0E F2 | 	cmp	local09, #3 wz
02b50     10 00 90 AD |  if_e	jmp	#LR__0066
02b54                 | '   xzoom:=4
02b54     04 56 06 F6 | 	mov	local02, #4
02b58     CC 0E 06 F1 | 	add	objptr, #204
02b5c     07 09 68 FC | 	wrlong	#4, objptr
02b60     CC 0E 86 F1 | 	sub	objptr, #204
02b64                 | LR__0066
02b64     2A 89 02 F6 | 	mov	local27, local01
02b68     02 88 46 F0 | 	shr	local27, #2
02b6c     03 88 06 F5 | 	and	local27, #3
02b70     44 8B C2 F9 | 	decod	local28, local27
02b74                 | ' 
02b74                 | ' yzoom:=1<<((mode>>2) & 3)
02b74     D0 0E 06 F1 | 	add	objptr, #208
02b78     07 8B 62 FC | 	wrlong	local28, objptr
02b7c     04 0E 86 F1 | 	sub	objptr, #4
02b80     07 63 02 FB | 	rdlong	local08, objptr
02b84     04 0E 06 F1 | 	add	objptr, #4
02b88     07 5B 02 FB | 	rdlong	local04, objptr
02b8c     2D 63 02 FD | 	qmul	local08, local04
02b90     18 8C 62 FD | 	getqx	local29
02b94                 | ' azoom:=xzoom*yzoom
02b94     04 0E 06 F1 | 	add	objptr, #4
02b98     07 8D 62 FC | 	wrlong	local29, objptr
02b9c                 | ' 
02b9c                 | ' cpl:=timings[11]
02b9c     58 0E 86 F1 | 	sub	objptr, #88
02ba0     07 57 02 FB | 	rdlong	local02, objptr
02ba4     14 0E 06 F1 | 	add	objptr, #20
02ba8     07 57 62 FC | 	wrlong	local02, objptr
02bac     90 0E 86 F1 | 	sub	objptr, #144
02bb0                 | ' if (mode<512)
02bb0     01 00 00 FF 
02bb4     00 54 5E F2 | 	cmps	local01, ##512 wcz
02bb8     60 00 90 3D |  if_ae	jmp	#LR__0067
02bbc     80 0E 06 F1 | 	add	objptr, #128
02bc0     07 09 03 FB | 	rdlong	muldiva_, objptr
02bc4     04 08 47 F0 | 	shr	muldiva_, #4
02bc8     50 0E 06 F1 | 	add	objptr, #80
02bcc     07 0B 03 FB | 	rdlong	muldivb_, objptr
02bd0     D0 0E 86 F1 | 	sub	objptr, #208
02bd4     CC 00 A0 FD | 	call	#unsdivide_
02bd8                 | '   lines:=(timings[12]>>4)+/yzoom
02bd8     94 0E 06 F1 | 	add	objptr, #148
02bdc     07 0B 63 FC | 	wrlong	muldivb_, objptr
02be0                 | '   if ((timings[12]>>4)+//yzoom) <>0
02be0     14 0E 86 F1 | 	sub	objptr, #20
02be4     07 09 03 FB | 	rdlong	muldiva_, objptr
02be8     04 08 47 F0 | 	shr	muldiva_, #4
02bec     50 0E 06 F1 | 	add	objptr, #80
02bf0     07 0B 03 FB | 	rdlong	muldivb_, objptr
02bf4     D0 0E 86 F1 | 	sub	objptr, #208
02bf8     CC 00 A0 FD | 	call	#unsdivide_
02bfc     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02c00     AC 00 90 AD |  if_e	jmp	#LR__0070
02c04                 | '     lines +=1
02c04     94 0E 06 F1 | 	add	objptr, #148
02c08     07 57 02 FB | 	rdlong	local02, objptr
02c0c     01 56 06 F1 | 	add	local02, #1
02c10     07 57 62 FC | 	wrlong	local02, objptr
02c14     94 0E 86 F1 | 	sub	objptr, #148
02c18                 | ' 
02c18                 | ' else
02c18     94 00 90 FD | 	jmp	#LR__0070
02c1c                 | LR__0067
02c1c     80 0E 06 F1 | 	add	objptr, #128
02c20     07 09 03 FB | 	rdlong	muldiva_, objptr
02c24     50 0E 06 F1 | 	add	objptr, #80
02c28     07 0B 03 FB | 	rdlong	muldivb_, objptr
02c2c     D0 0E 86 F1 | 	sub	objptr, #208
02c30     D0 00 A0 FD | 	call	#divide_
02c34                 | '   lines:=timings[12]/yzoom
02c34     94 0E 06 F1 | 	add	objptr, #148
02c38     07 0B 63 FC | 	wrlong	muldivb_, objptr
02c3c                 | '   if cpl//xzoom==0
02c3c     04 0E 86 F1 | 	sub	objptr, #4
02c40     07 09 03 FB | 	rdlong	muldiva_, objptr
02c44     3C 0E 06 F1 | 	add	objptr, #60
02c48     07 0B 03 FB | 	rdlong	muldivb_, objptr
02c4c     CC 0E 86 F1 | 	sub	objptr, #204
02c50     D0 00 A0 FD | 	call	#divide_
02c54     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02c58     28 00 90 5D |  if_ne	jmp	#LR__0068
02c5c                 | '     cpl:=cpl/xzoom
02c5c     90 0E 06 F1 | 	add	objptr, #144
02c60     07 09 03 FB | 	rdlong	muldiva_, objptr
02c64     3C 0E 06 F1 | 	add	objptr, #60
02c68     07 0B 03 FB | 	rdlong	muldivb_, objptr
02c6c     CC 0E 86 F1 | 	sub	objptr, #204
02c70     D0 00 A0 FD | 	call	#divide_
02c74     90 0E 06 F1 | 	add	objptr, #144
02c78     07 0B 63 FC | 	wrlong	muldivb_, objptr
02c7c     90 0E 86 F1 | 	sub	objptr, #144
02c80                 | '   else
02c80     2C 00 90 FD | 	jmp	#LR__0069
02c84                 | LR__0068
02c84     90 0E 06 F1 | 	add	objptr, #144
02c88     07 09 03 FB | 	rdlong	muldiva_, objptr
02c8c     3C 0E 06 F1 | 	add	objptr, #60
02c90     07 0B 03 FB | 	rdlong	muldivb_, objptr
02c94     CC 0E 86 F1 | 	sub	objptr, #204
02c98     D0 00 A0 FD | 	call	#divide_
02c9c     85 8F 02 F6 | 	mov	local30, muldivb_
02ca0     01 8E 06 F1 | 	add	local30, #1
02ca4                 | '     cpl:=cpl/xzoom+1
02ca4     90 0E 06 F1 | 	add	objptr, #144
02ca8     07 8F 62 FC | 	wrlong	local30, objptr
02cac     90 0E 86 F1 | 	sub	objptr, #144
02cb0                 | LR__0069
02cb0                 | LR__0070
02cb0     90 0E 06 F1 | 	add	objptr, #144
02cb4     07 63 02 FB | 	rdlong	local08, objptr
02cb8     04 0E 06 F1 | 	add	objptr, #4
02cbc     07 5B 02 FB | 	rdlong	local04, objptr
02cc0     2D 63 02 FD | 	qmul	local08, local04
02cc4     18 90 62 FD | 	getqx	local31
02cc8                 | ' 
02cc8                 | ' buflen:=(cpl*lines)
02cc8     64 0E 86 F1 | 	sub	objptr, #100
02ccc     07 91 62 FC | 	wrlong	local31, objptr
02cd0     30 0E 86 F1 | 	sub	objptr, #48
02cd4     02 90 66 F0 | 	shl	local31, #2
02cd8     13 92 C6 F9 | 	decod	local32, #19
02cdc     48 93 82 F1 | 	sub	local32, local31
02ce0                 | ' buf_ptr:=$80000-4*buflen
02ce0     07 93 62 FC | 	wrlong	local32, objptr
02ce4     50 0E 06 F1 | 	add	objptr, #80
02ce8     07 95 02 F6 | 	mov	local33, objptr
02cec                 | ' mode_ptr:=@timings
02cec     3C 0E 86 F1 | 	sub	objptr, #60
02cf0     07 95 62 FC | 	wrlong	local33, objptr
02cf4                 | ' graphmode:=mode
02cf4     B0 0E 06 F1 | 	add	objptr, #176
02cf8     07 55 62 FC | 	wrlong	local01, objptr
02cfc     C4 0E 86 F1 | 	sub	objptr, #196
02d00                 | ' makedl(mode)
02d00     2A 4B 02 F6 | 	mov	arg01, local01
02d04                 | ' 
02d04                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02d04                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02d04                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02d04                 | ' 
02d04                 | ' '   0 - display a up/down border line
02d04                 | ' 
02d04                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02d04                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02d04                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02d04                 | ' '    nnnn - font line to display, 0..15
02d04                 | ' '    llllll - character line, determines the cursor Y position
02d04                 | ' 
02d04                 | ' 
02d04                 | ' if (mode &256==0)
02d04     00 4B CE F7 | 	test	arg01, #256 wz
02d08     1C 00 90 5D |  if_ne	jmp	#LR__0071
02d0c     07 97 02 FB | 	rdlong	local34, objptr
02d10     04 00 00 FF 
02d14     00 97 86 F1 | 	sub	local34, ##2304
02d18                 | '   dl_ptr:=buf_ptr-4*576
02d18     1C 0E 06 F1 | 	add	objptr, #28
02d1c     07 97 62 FC | 	wrlong	local34, objptr
02d20     1C 0E 86 F1 | 	sub	objptr, #28
02d24                 | ' else
02d24     18 00 90 FD | 	jmp	#LR__0072
02d28                 | LR__0071
02d28     07 99 02 FB | 	rdlong	local35, objptr
02d2c     03 00 00 FF 
02d30     C0 99 86 F1 | 	sub	local35, ##1984
02d34                 | '   dl_ptr:=buf_ptr-4*496
02d34     1C 0E 06 F1 | 	add	objptr, #28
02d38     07 99 62 FC | 	wrlong	local35, objptr
02d3c     1C 0E 86 F1 | 	sub	objptr, #28
02d40                 | LR__0072
02d40     25 9B 02 F6 | 	mov	local36, arg01
02d44     02 9A 46 F0 | 	shr	local36, #2
02d48     03 9A 06 F5 | 	and	local36, #3
02d4c                 | '  ' dl_ptr:=buf_ptr-4*540
02d4c                 | ' 
02d4c                 | ' vzoom:=((mode>>2) & 3)
02d4c                 | ' 
02d4c                 | ' 
02d4c                 | ' if mode<512 '' text modes
02d4c     01 00 00 FF 
02d50     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02d54     E4 01 90 3D |  if_ae	jmp	#LR__0080
02d58                 | ' 
02d58                 | '   if timings[6]>0 'borders
02d58     68 0E 06 F1 | 	add	objptr, #104
02d5c     07 9D 02 FB | 	rdlong	local37, objptr
02d60     68 0E 86 F1 | 	sub	objptr, #104
02d64     00 9C 5E F2 | 	cmps	local37, #0 wcz
02d68     D4 00 90 ED |  if_be	jmp	#LR__0077
02d6c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02d6c     00 9E 06 F6 | 	mov	local38, #0
02d70     68 0E 06 F1 | 	add	objptr, #104
02d74     07 A1 02 FB | 	rdlong	local39, objptr
02d78     68 0E 86 F1 | 	sub	objptr, #104
02d7c     01 A0 86 F1 | 	sub	local39, #1
02d80     00 A0 5E F2 | 	cmps	local39, #0 wcz
02d84     01 A2 06 16 |  if_a	mov	local40, #1
02d88     01 A2 66 E6 |  if_be	neg	local40, #1
02d8c     51 A5 02 F6 | 	mov	local41, local40
02d90     51 A1 02 F1 | 	add	local39, local40
02d94     90 D2 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
02d98     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d9c                 | LR__0073
02d9c     4F A7 02 F6 | 	mov	local42, local38
02da0     02 A6 66 F0 | 	shl	local42, #2
02da4     1C 0E 06 F1 | 	add	objptr, #28
02da8     07 A9 02 FB | 	rdlong	local43, objptr
02dac     1C 0E 86 F1 | 	sub	objptr, #28
02db0     53 A9 02 F1 | 	add	local43, local42
02db4                 | '       long[dl_ptr+4*i]:=$0
02db4     54 01 68 FC | 	wrlong	#0, local43
02db8     52 9F 02 F1 | 	add	local38, local41
02dbc     50 9F 0A F2 | 	cmp	local38, local39 wz
02dc0     D8 FF 9F 5D |  if_ne	jmp	#LR__0073
02dc4                 | LR__0074
02dc4                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02dc4     68 0E 06 F1 | 	add	objptr, #104
02dc8     07 9F 02 FB | 	rdlong	local38, objptr
02dcc     18 0E 06 F1 | 	add	objptr, #24
02dd0     07 A3 02 FB | 	rdlong	local40, objptr
02dd4     51 9F 02 F1 | 	add	local38, local40
02dd8     0C 0E 06 F1 | 	add	objptr, #12
02ddc     07 AB 02 FB | 	rdlong	local44, objptr
02de0     01 AA 86 F1 | 	sub	local44, #1
02de4     24 0E 86 F1 | 	sub	objptr, #36
02de8     07 AD 02 FB | 	rdlong	local45, objptr
02dec     18 0E 06 F1 | 	add	objptr, #24
02df0     07 AF 02 FB | 	rdlong	local46, objptr
02df4     80 0E 86 F1 | 	sub	objptr, #128
02df8     57 AD 02 F1 | 	add	local45, local46
02dfc     56 AB 5A F2 | 	cmps	local44, local45 wcz
02e00     01 B0 06 16 |  if_a	mov	local47, #1
02e04     01 B0 66 E6 |  if_be	neg	local47, #1
02e08     58 B3 02 F6 | 	mov	local48, local47
02e0c     58 AB 02 F1 | 	add	local44, local47
02e10     14 D2 9F FE | 	loc	pa,	#(@LR__0076-@LR__0075)
02e14     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e18                 | LR__0075
02e18     4F B5 02 F6 | 	mov	local49, local38
02e1c     02 B4 66 F0 | 	shl	local49, #2
02e20     1C 0E 06 F1 | 	add	objptr, #28
02e24     07 B7 02 FB | 	rdlong	local50, objptr
02e28     1C 0E 86 F1 | 	sub	objptr, #28
02e2c     5A B7 02 F1 | 	add	local50, local49
02e30                 | '       long[dl_ptr+4*i]:=$0
02e30     5B 01 68 FC | 	wrlong	#0, local50
02e34     59 9F 02 F1 | 	add	local38, local48
02e38     55 9F 0A F2 | 	cmp	local38, local44 wz
02e3c     D8 FF 9F 5D |  if_ne	jmp	#LR__0075
02e40                 | LR__0076
02e40                 | LR__0077
02e40     10 B8 06 F6 | 	mov	local51, #16
02e44     4D B9 62 F0 | 	shl	local51, local36
02e48                 | '   lpc:=16<<vzoom
02e48                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02e48     68 0E 06 F1 | 	add	objptr, #104
02e4c     07 9F 02 FB | 	rdlong	local38, objptr
02e50     4F BB 02 F6 | 	mov	local52, local38
02e54     18 0E 06 F1 | 	add	objptr, #24
02e58     07 BD 02 FB | 	rdlong	local53, objptr
02e5c     5E BB 02 F1 | 	add	local52, local53
02e60     01 BA 86 F1 | 	sub	local52, #1
02e64     18 0E 86 F1 | 	sub	objptr, #24
02e68     07 B1 02 FB | 	rdlong	local47, objptr
02e6c     68 0E 86 F1 | 	sub	objptr, #104
02e70     58 BB 5A F2 | 	cmps	local52, local47 wcz
02e74     01 BE 06 16 |  if_a	mov	local54, #1
02e78     01 BE 66 E6 |  if_be	neg	local54, #1
02e7c     5F C1 02 F6 | 	mov	local55, local54
02e80     5F BB 02 F1 | 	add	local52, local54
02e84     28 D2 9F FE | 	loc	pa,	#(@LR__0079-@LR__0078)
02e88     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e8c                 | LR__0078
02e8c     4F 09 03 F6 | 	mov	muldiva_, local38
02e90     68 0E 06 F1 | 	add	objptr, #104
02e94     07 C3 02 FB | 	rdlong	local56, objptr
02e98     68 0E 86 F1 | 	sub	objptr, #104
02e9c     61 09 83 F1 | 	sub	muldiva_, local56
02ea0     5C 0B 03 F6 | 	mov	muldivb_, local51
02ea4     CC 00 A0 FD | 	call	#unsdivide_
02ea8     4D 09 43 F0 | 	shr	muldiva_, local36
02eac                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02eac     84 C5 02 F6 | 	mov	local57, muldiva_
02eb0     4F 09 03 F6 | 	mov	muldiva_, local38
02eb4     68 0E 06 F1 | 	add	objptr, #104
02eb8     07 C3 02 FB | 	rdlong	local56, objptr
02ebc     68 0E 86 F1 | 	sub	objptr, #104
02ec0     61 09 83 F1 | 	sub	muldiva_, local56
02ec4     5C 0B 03 F6 | 	mov	muldivb_, local51
02ec8     CC 00 A0 FD | 	call	#unsdivide_
02ecc     85 C7 02 F6 | 	mov	local58, muldivb_
02ed0                 | '     charline:=(i-timings[6])+/lpc
02ed0     90 0E 06 F1 | 	add	objptr, #144
02ed4     07 C3 02 FB | 	rdlong	local56, objptr
02ed8     90 0E 86 F1 | 	sub	objptr, #144
02edc     63 C3 02 FD | 	qmul	local56, local58
02ee0     18 C8 62 FD | 	getqx	local59
02ee4     02 C8 66 F0 | 	shl	local59, #2
02ee8     07 CB 02 FB | 	rdlong	local60, objptr
02eec     64 CB 02 F1 | 	add	local60, local59
02ef0     25 CD 02 F6 | 	mov	local61, arg01
02ef4     03 CC 06 F5 | 	and	local61, #3
02ef8     66 CB 02 F1 | 	add	local60, local61
02efc                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02efc     0C CA 66 F0 | 	shl	local60, #12
02f00     08 C4 66 F0 | 	shl	local57, #8
02f04     62 CB 02 F1 | 	add	local60, local57
02f08     02 C6 66 F0 | 	shl	local58, #2
02f0c     63 CB 02 F1 | 	add	local60, local58
02f10     01 CA 06 F1 | 	add	local60, #1
02f14     4F CF 02 F6 | 	mov	local62, local38
02f18     02 CE 66 F0 | 	shl	local62, #2
02f1c     1C 0E 06 F1 | 	add	objptr, #28
02f20     07 D1 02 FB | 	rdlong	local63, objptr
02f24     1C 0E 86 F1 | 	sub	objptr, #28
02f28     67 D1 02 F1 | 	add	local63, local62
02f2c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02f2c     68 CB 62 FC | 	wrlong	local60, local63
02f30     60 9F 02 F1 | 	add	local38, local55
02f34     5D 9F 0A F2 | 	cmp	local38, local52 wz
02f38     50 FF 9F 5D |  if_ne	jmp	#LR__0078
02f3c                 | LR__0079
02f3c                 | LR__0080
02f3c                 | ' 
02f3c                 | ' 
02f3c                 | ' 
02f3c                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02f3c     01 00 00 FF 
02f40     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02f44     AC 01 90 CD |  if_b	jmp	#LR__0088
02f48                 | ' 
02f48                 | '   if timings[6]>0 'borders
02f48     68 0E 06 F1 | 	add	objptr, #104
02f4c     07 9D 02 FB | 	rdlong	local37, objptr
02f50     68 0E 86 F1 | 	sub	objptr, #104
02f54     00 9C 5E F2 | 	cmps	local37, #0 wcz
02f58     D4 00 90 ED |  if_be	jmp	#LR__0085
02f5c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02f5c     00 9E 06 F6 | 	mov	local38, #0
02f60     68 0E 06 F1 | 	add	objptr, #104
02f64     07 D3 02 FB | 	rdlong	local64, objptr
02f68     68 0E 86 F1 | 	sub	objptr, #104
02f6c     01 D2 86 F1 | 	sub	local64, #1
02f70     00 D2 5E F2 | 	cmps	local64, #0 wcz
02f74     01 A2 06 16 |  if_a	mov	local40, #1
02f78     01 A2 66 E6 |  if_be	neg	local40, #1
02f7c     51 D5 02 F6 | 	mov	local65, local40
02f80     51 D3 02 F1 | 	add	local64, local40
02f84     A0 D0 9F FE | 	loc	pa,	#(@LR__0082-@LR__0081)
02f88     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f8c                 | LR__0081
02f8c     4F D7 02 F6 | 	mov	local66, local38
02f90     02 D6 66 F0 | 	shl	local66, #2
02f94     1C 0E 06 F1 | 	add	objptr, #28
02f98     07 D9 02 FB | 	rdlong	local67, objptr
02f9c     1C 0E 86 F1 | 	sub	objptr, #28
02fa0     6B D9 02 F1 | 	add	local67, local66
02fa4                 | '       long[dl_ptr+4*i]:=$0
02fa4     6C 01 68 FC | 	wrlong	#0, local67
02fa8     6A 9F 02 F1 | 	add	local38, local65
02fac     69 9F 0A F2 | 	cmp	local38, local64 wz
02fb0     D8 FF 9F 5D |  if_ne	jmp	#LR__0081
02fb4                 | LR__0082
02fb4                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02fb4     68 0E 06 F1 | 	add	objptr, #104
02fb8     07 9F 02 FB | 	rdlong	local38, objptr
02fbc     18 0E 06 F1 | 	add	objptr, #24
02fc0     07 A3 02 FB | 	rdlong	local40, objptr
02fc4     51 9F 02 F1 | 	add	local38, local40
02fc8     0C 0E 06 F1 | 	add	objptr, #12
02fcc     07 DB 02 FB | 	rdlong	local68, objptr
02fd0     01 DA 86 F1 | 	sub	local68, #1
02fd4     24 0E 86 F1 | 	sub	objptr, #36
02fd8     07 AD 02 FB | 	rdlong	local45, objptr
02fdc     18 0E 06 F1 | 	add	objptr, #24
02fe0     07 AF 02 FB | 	rdlong	local46, objptr
02fe4     80 0E 86 F1 | 	sub	objptr, #128
02fe8     57 AD 02 F1 | 	add	local45, local46
02fec     56 DB 5A F2 | 	cmps	local68, local45 wcz
02ff0     01 B0 06 16 |  if_a	mov	local47, #1
02ff4     01 B0 66 E6 |  if_be	neg	local47, #1
02ff8     58 DD 02 F6 | 	mov	local69, local47
02ffc     58 DB 02 F1 | 	add	local68, local47
03000     24 D0 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
03004     93 00 A0 FD | 	call	#FCACHE_LOAD_
03008                 | LR__0083
03008     4F DF 02 F6 | 	mov	local70, local38
0300c     02 DE 66 F0 | 	shl	local70, #2
03010     1C 0E 06 F1 | 	add	objptr, #28
03014     07 E1 02 FB | 	rdlong	local71, objptr
03018     1C 0E 86 F1 | 	sub	objptr, #28
0301c     6F E1 02 F1 | 	add	local71, local70
03020                 | '       long[dl_ptr+4*i]:=$0
03020     70 01 68 FC | 	wrlong	#0, local71
03024     6E 9F 02 F1 | 	add	local38, local69
03028     6D 9F 0A F2 | 	cmp	local38, local68 wz
0302c     D8 FF 9F 5D |  if_ne	jmp	#LR__0083
03030                 | LR__0084
03030                 | LR__0085
03030                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03030     68 0E 06 F1 | 	add	objptr, #104
03034     07 9F 02 FB | 	rdlong	local38, objptr
03038     4F E3 02 F6 | 	mov	local72, local38
0303c     18 0E 06 F1 | 	add	objptr, #24
03040     07 BD 02 FB | 	rdlong	local53, objptr
03044     5E E3 02 F1 | 	add	local72, local53
03048     01 E2 86 F1 | 	sub	local72, #1
0304c     18 0E 86 F1 | 	sub	objptr, #24
03050     07 B1 02 FB | 	rdlong	local47, objptr
03054     68 0E 86 F1 | 	sub	objptr, #104
03058     58 E3 5A F2 | 	cmps	local72, local47 wcz
0305c     01 BE 06 16 |  if_a	mov	local54, #1
03060     01 BE 66 E6 |  if_be	neg	local54, #1
03064     5F E5 02 F6 | 	mov	local73, local54
03068     5F E3 02 F1 | 	add	local72, local54
0306c     10 D0 9F FE | 	loc	pa,	#(@LR__0087-@LR__0086)
03070     93 00 A0 FD | 	call	#FCACHE_LOAD_
03074                 | LR__0086
03074     4F E7 02 F6 | 	mov	local74, local38
03078     68 0E 06 F1 | 	add	objptr, #104
0307c     07 C3 02 FB | 	rdlong	local56, objptr
03080     61 E7 82 F1 | 	sub	local74, local56
03084     4D E7 42 F0 | 	shr	local74, local36
03088     28 0E 06 F1 | 	add	objptr, #40
0308c     07 C3 02 FB | 	rdlong	local56, objptr
03090     90 0E 86 F1 | 	sub	objptr, #144
03094     73 C3 02 FD | 	qmul	local56, local74
03098     18 E8 62 FD | 	getqx	local75
0309c     02 E8 66 F0 | 	shl	local75, #2
030a0     07 EB 02 FB | 	rdlong	local76, objptr
030a4     74 EB 02 F1 | 	add	local76, local75
030a8     25 ED 02 F6 | 	mov	local77, arg01
030ac     03 EC 06 F5 | 	and	local77, #3
030b0     76 EB 02 F1 | 	add	local76, local77
030b4                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
030b4     0C EA 66 F0 | 	shl	local76, #12
030b8     02 EA 06 F1 | 	add	local76, #2
030bc     25 EF 02 F6 | 	mov	local78, arg01
030c0     30 EE 06 F5 | 	and	local78, #48
030c4     02 EE 46 F0 | 	shr	local78, #2
030c8     77 EB 02 F1 | 	add	local76, local78
030cc     4F F1 02 F6 | 	mov	local79, local38
030d0     02 F0 66 F0 | 	shl	local79, #2
030d4     1C 0E 06 F1 | 	add	objptr, #28
030d8     07 F3 02 FB | 	rdlong	local80, objptr
030dc     1C 0E 86 F1 | 	sub	objptr, #28
030e0     78 F3 02 F1 | 	add	local80, local79
030e4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
030e4     79 EB 62 FC | 	wrlong	local76, local80
030e8     72 9F 02 F1 | 	add	local38, local73
030ec     71 9F 0A F2 | 	cmp	local38, local72 wz
030f0     80 FF 9F 5D |  if_ne	jmp	#LR__0086
030f4                 | LR__0087
030f4                 | LR__0088
030f4                 | LR__0089
030f4     AF F0 03 F6 | 	mov	ptra, fp
030f8     BF 00 A0 FD | 	call	#popregs_
030fc                 | _hng030rm_spin2_setmode_ret
030fc     2D 00 64 FD | 	ret
03100                 | 
03100                 | ' 
03100                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03100                 | _retrocog_spin2_serialcog
03100     1C 5A 05 F6 | 	mov	COUNT_, #28
03104     B0 00 A0 FD | 	call	#pushregs_
03108                 | ' 
03108                 | ' 'start serial and midi
03108                 | ' 
03108                 | ' serial_start(rxpin, txpin, baudrate)
03108     20 4A 06 F6 | 	mov	arg01, #32
0310c     21 4C 06 F6 | 	mov	arg02, #33
03110     A6 0E 00 FF 
03114     00 4E 06 F6 | 	mov	arg03, ##1920000
03118     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0311c                 | ' serial_start(midiin,midiout,mbaudrate)
0311c     1D 4A 06 F6 | 	mov	arg01, #29
03120     1E 4C 06 F6 | 	mov	arg02, #30
03124     3D 00 00 FF 
03128     12 4E 06 F6 | 	mov	arg03, ##31250
0312c     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03130                 | ' serial_start(srxpin,stxpin,sbaudrate)
03130     42 0F 00 FF 
03134     80 54 06 F6 | 	mov	local01, ##2000000
03138     3F 4A 06 F6 | 	mov	arg01, #63
0313c     3E 4C 06 F6 | 	mov	arg02, #62
03140     42 0F 00 FF 
03144     80 4E 06 F6 | 	mov	arg03, ##2000000
03148     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0314c                 | ' 
0314c                 | ' mb:=(-1)
0314c     01 56 66 F6 | 	neg	local02, #1
03150                 | ' b:=(-1)
03150     01 58 66 F6 | 	neg	local03, #1
03154                 | ' 
03154                 | ' mousefront:=0
03154     00 5A 06 F6 | 	mov	local04, #0
03158     08 0E 06 F1 | 	add	objptr, #8
0315c     07 01 68 FC | 	wrlong	#0, objptr
03160                 | ' mousetail:=0
03160     04 0E 06 F1 | 	add	objptr, #4
03164     07 01 68 FC | 	wrlong	#0, objptr
03168     0C 0E 86 F1 | 	sub	objptr, #12
0316c                 | ' kbdfront:=0
0316c     07 01 68 FC | 	wrlong	#0, objptr
03170                 | ' kbdtail:=0
03170     04 0E 06 F1 | 	add	objptr, #4
03174     07 01 68 FC | 	wrlong	#0, objptr
03178                 | ' midifront:=0
03178     0C 0E 06 F1 | 	add	objptr, #12
0317c     07 01 68 FC | 	wrlong	#0, objptr
03180                 | ' miditail:=0
03180     04 0E 06 F1 | 	add	objptr, #4
03184     07 01 68 FC | 	wrlong	#0, objptr
03188                 | ' serialfront:=0
03188     04 0E 06 F1 | 	add	objptr, #4
0318c     07 01 68 FC | 	wrlong	#0, objptr
03190                 | ' serialtail:=0
03190     04 0E 06 F1 | 	add	objptr, #4
03194     07 01 68 FC | 	wrlong	#0, objptr
03198                 | ' long[$30]:=0
03198     30 00 6C FC | 	wrlong	#0, #48
0319c                 | ' long[$34]:=0
0319c     34 00 6C FC | 	wrlong	#0, #52
031a0                 | ' long[$38]:=0
031a0     38 00 6C FC | 	wrlong	#0, #56
031a4     1C 0E 86 F1 | 	sub	objptr, #28
031a8                 | ' long[$3C]:=0
031a8     3C 00 6C FC | 	wrlong	#0, #60
031ac                 | ' 
031ac                 | ' repeat
031ac                 | LR__0090
031ac                 | ' 
031ac                 | ' '  repeat 
031ac                 | '   rr:=rxcheck(rxpin)
031ac     20 4A 06 F6 | 	mov	arg01, #32
031b0     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
031b4     12 5D 02 F6 | 	mov	local05, result1
031b8                 | '   mrr:=rxcheck(midiin)
031b8     1D 4A 06 F6 | 	mov	arg01, #29
031bc     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
031c0     12 5F 02 F6 | 	mov	local06, result1
031c4                 | '   srr:=rxcheck(srxpin)
031c4     3F 5A 06 F6 | 	mov	local04, #63
031c8     3F 4A 06 F6 | 	mov	arg01, #63
031cc     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
031d0     12 61 02 F6 | 	mov	local07, result1
031d4     30 63 02 F6 | 	mov	local08, local07
031d8                 | ' 
031d8                 | ' '  until rr>=0 || mrr>=0  || srr>=0
031d8                 | ' 
031d8                 | '   
031d8                 | ' ' midi. Must be >= $80 for a command
031d8                 | ' '$80-$8F - 3 bytes note off. note, velocity
031d8                 | ' '$90-$9F - 3 bytes note on, note, velocity
031d8                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
031d8                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
031d8                 | ' '$C0-$CF - 2 bytes program change
031d8                 | ' '$D0-$DF - 2 bytes mono aftertouch
031d8                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
031d8                 | ' '$F0-$FF - 1 byte
031d8                 | '   
031d8                 | '   if srr>=0
031d8     00 62 5E F2 | 	cmps	local08, #0 wcz
031dc     7C 00 90 CD |  if_b	jmp	#LR__0092
031e0                 | '   
031e0                 | '     if serialfront<>((serialtail-1) //32)
031e0     1C 0E 06 F1 | 	add	objptr, #28
031e4     07 61 02 FB | 	rdlong	local07, objptr
031e8     30 5B 02 F6 | 	mov	local04, local07
031ec     01 5A 86 F1 | 	sub	local04, #1
031f0     2D 55 52 F6 | 	abs	local01, local04 wc
031f4     1F 54 06 F5 | 	and	local01, #31
031f8     2A 55 62 C6 |  if_b	neg	local01, local01
031fc     04 0E 86 F1 | 	sub	objptr, #4
03200     07 65 02 FB | 	rdlong	local09, objptr
03204     18 0E 86 F1 | 	sub	objptr, #24
03208     32 67 02 F6 | 	mov	local10, local09
0320c     2A 67 0A F2 | 	cmp	local10, local01 wz
03210     48 00 90 AD |  if_e	jmp	#LR__0091
03214     18 0E 06 F1 | 	add	objptr, #24
03218     07 67 02 FB | 	rdlong	local10, objptr
0321c     01 00 00 FF 
03220     08 0F 06 F1 | 	add	objptr, ##776
03224     07 67 02 F1 | 	add	local10, objptr
03228     33 69 02 F6 | 	mov	local11, local10
0322c                 | '       serialbuf[serialfront]:=srr
0322c     34 63 42 FC | 	wrbyte	local08, local11
03230                 | '       serialfront+=1
03230     01 00 00 FF 
03234     08 0F 86 F1 | 	sub	objptr, ##776
03238     07 55 02 FB | 	rdlong	local01, objptr
0323c     01 54 06 F1 | 	add	local01, #1
03240     07 55 62 FC | 	wrlong	local01, objptr
03244                 | '       serialfront:=serialfront // 32
03244     2A 61 02 F6 | 	mov	local07, local01
03248     30 5B 52 F6 | 	abs	local04, local07 wc
0324c     1F 5A 06 F5 | 	and	local04, #31
03250     2D 5B 62 C6 |  if_b	neg	local04, local04
03254     07 5B 62 FC | 	wrlong	local04, objptr
03258     18 0E 86 F1 | 	sub	objptr, #24
0325c                 | LR__0091
0325c                 | LR__0092
0325c                 | '     
0325c                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
0325c     80 5E 5E F2 | 	cmps	local06, #128 wcz
03260     08 00 90 CD |  if_b	jmp	#LR__0093
03264     BF 5E 5E F2 | 	cmps	local06, #191 wcz
03268     10 00 90 ED |  if_be	jmp	#LR__0094
0326c                 | LR__0093
0326c     E0 5E 5E F2 | 	cmps	local06, #224 wcz
03270     1C 00 90 CD |  if_b	jmp	#LR__0095
03274     EF 5E 5E F2 | 	cmps	local06, #239 wcz
03278     14 00 90 1D |  if_a	jmp	#LR__0095
0327c                 | LR__0094
0327c                 | '     mb:=2
0327c     02 56 06 F6 | 	mov	local02, #2
03280     2F 5B 02 F6 | 	mov	local04, local06
03284     18 5A 66 F0 | 	shl	local04, #24
03288     2D 6B 02 F6 | 	mov	local12, local04
0328c                 | '     midireport:=mrr<<24
0328c     35 6D 02 F6 | 	mov	local13, local12
03290                 | LR__0095
03290                 | ' 
03290                 | '   if (mrr>=$C0) && (mrr<=$DF)
03290     C0 5E 5E F2 | 	cmps	local06, #192 wcz
03294     1C 00 90 CD |  if_b	jmp	#LR__0096
03298     DF 5E 5E F2 | 	cmps	local06, #223 wcz
0329c     14 00 90 1D |  if_a	jmp	#LR__0096
032a0                 | '     mb:=1
032a0     01 56 06 F6 | 	mov	local02, #1
032a4     2F 5B 02 F6 | 	mov	local04, local06
032a8     18 5A 66 F0 | 	shl	local04, #24
032ac     2D 6F 02 F6 | 	mov	local14, local04
032b0                 | '     midireport:=mrr<<24
032b0     37 6D 02 F6 | 	mov	local13, local14
032b4                 | LR__0096
032b4                 | '   
032b4                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
032b4     F0 5E 5E F2 | 	cmps	local06, #240 wcz
032b8     10 00 90 CD |  if_b	jmp	#LR__0097
032bc                 | '     mb:=4
032bc     04 56 06 F6 | 	mov	local02, #4
032c0     2F 71 02 F6 | 	mov	local15, local06
032c4     18 70 66 F0 | 	shl	local15, #24
032c8                 | '     midireport:=mrr<<24  
032c8     38 6D 02 F6 | 	mov	local13, local15
032cc                 | LR__0097
032cc                 | '   
032cc                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
032cc     80 5E 5E F2 | 	cmps	local06, #128 wcz
032d0     44 00 90 3D |  if_ae	jmp	#LR__0099
032d4     00 56 5E F2 | 	cmps	local02, #0 wcz
032d8     3C 00 90 ED |  if_be	jmp	#LR__0099
032dc     00 5E 5E F2 | 	cmps	local06, #0 wcz
032e0     34 00 90 CD |  if_b	jmp	#LR__0099
032e4                 | '     
032e4                 | '     mb--
032e4     2B 5B 02 F6 | 	mov	local04, local02
032e8     2B 61 02 F6 | 	mov	local07, local02
032ec     01 60 86 F1 | 	sub	local07, #1
032f0     30 57 02 F6 | 	mov	local02, local07
032f4                 | '     if mb<3
032f4     03 56 5E F2 | 	cmps	local02, #3 wcz
032f8     1C 00 90 3D |  if_ae	jmp	#LR__0098
032fc     2B 73 02 F6 | 	mov	local16, local02
03300     03 72 66 F0 | 	shl	local16, #3
03304     2F 75 02 F6 | 	mov	local17, local06
03308     39 75 62 F0 | 	shl	local17, local16
0330c                 | '       midireport+=mrr<<(mb<<3)
0330c     36 5B 02 F6 | 	mov	local04, local13
03310     3A 5B 02 F1 | 	add	local04, local17
03314     2D 6D 02 F6 | 	mov	local13, local04
03318                 | LR__0098
03318                 | LR__0099
03318                 | '   
03318                 | '   if mb==0
03318     00 56 0E F2 | 	cmp	local02, #0 wz
0331c     84 00 90 5D |  if_ne	jmp	#LR__0101
03320                 | '     
03320                 | '     if midifront<>((miditail-1) //32)
03320     14 0E 06 F1 | 	add	objptr, #20
03324     07 61 02 FB | 	rdlong	local07, objptr
03328     30 5B 02 F6 | 	mov	local04, local07
0332c     01 5A 86 F1 | 	sub	local04, #1
03330     2D 55 52 F6 | 	abs	local01, local04 wc
03334     1F 54 06 F5 | 	and	local01, #31
03338     2A 55 62 C6 |  if_b	neg	local01, local01
0333c     04 0E 86 F1 | 	sub	objptr, #4
03340     07 65 02 FB | 	rdlong	local09, objptr
03344     10 0E 86 F1 | 	sub	objptr, #16
03348     32 67 02 F6 | 	mov	local10, local09
0334c     2A 67 0A F2 | 	cmp	local10, local01 wz
03350     4C 00 90 AD |  if_e	jmp	#LR__0100
03354     10 0E 06 F1 | 	add	objptr, #16
03358     07 67 02 FB | 	rdlong	local10, objptr
0335c     02 66 66 F0 | 	shl	local10, #2
03360     01 00 00 FF 
03364     90 0E 06 F1 | 	add	objptr, ##656
03368     07 67 02 F1 | 	add	local10, objptr
0336c     33 77 02 F6 | 	mov	local18, local10
03370                 | '       midibuf[midifront]:=midireport
03370     3B 6D 62 FC | 	wrlong	local13, local18
03374                 | '       midifront+=1
03374     01 00 00 FF 
03378     90 0E 86 F1 | 	sub	objptr, ##656
0337c     07 55 02 FB | 	rdlong	local01, objptr
03380     01 54 06 F1 | 	add	local01, #1
03384     07 55 62 FC | 	wrlong	local01, objptr
03388                 | '       midifront:=midifront // 32
03388     2A 61 02 F6 | 	mov	local07, local01
0338c     30 5B 52 F6 | 	abs	local04, local07 wc
03390     1F 5A 06 F5 | 	and	local04, #31
03394     2D 5B 62 C6 |  if_b	neg	local04, local04
03398     07 5B 62 FC | 	wrlong	local04, objptr
0339c     10 0E 86 F1 | 	sub	objptr, #16
033a0                 | LR__0100
033a0                 | '     mb:=(-1)
033a0     01 56 66 F6 | 	neg	local02, #1
033a4                 | LR__0101
033a4                 | ' 
033a4                 | ' 'Keyboard and mouse
033a4                 | ' 
033a4                 | '   if (rr>=$80) && (rr<>$FF)
033a4     80 5C 5E F2 | 	cmps	local05, #128 wcz
033a8     1C 00 90 CD |  if_b	jmp	#LR__0102
033ac     FF 5C 0E F2 | 	cmp	local05, #255 wz
033b0     14 00 90 AD |  if_e	jmp	#LR__0102
033b4                 | '     b:=3
033b4     03 58 06 F6 | 	mov	local03, #3
033b8     2E 5B 02 F6 | 	mov	local04, local05
033bc     18 5A 66 F0 | 	shl	local04, #24
033c0     2D 79 02 F6 | 	mov	local19, local04
033c4                 | '     kbmreport:=rr<<24
033c4     3C 7B 02 F6 | 	mov	local20, local19
033c8                 | LR__0102
033c8                 | '   
033c8                 | '   if (rr<$80) && (b>0) && (rr>=0)
033c8     80 5C 5E F2 | 	cmps	local05, #128 wcz
033cc     38 00 90 3D |  if_ae	jmp	#LR__0103
033d0     00 58 5E F2 | 	cmps	local03, #0 wcz
033d4     30 00 90 ED |  if_be	jmp	#LR__0103
033d8     00 5C 5E F2 | 	cmps	local05, #0 wcz
033dc     28 00 90 CD |  if_b	jmp	#LR__0103
033e0                 | '     b--
033e0     2C 61 02 F6 | 	mov	local07, local03
033e4     01 60 86 F1 | 	sub	local07, #1
033e8     30 59 02 F6 | 	mov	local03, local07
033ec     2C 7D 02 F6 | 	mov	local21, local03
033f0     03 7C 66 F0 | 	shl	local21, #3
033f4     2E 7F 02 F6 | 	mov	local22, local05
033f8     3E 7F 62 F0 | 	shl	local22, local21
033fc                 | '     kbmreport+=rr<<(b<<3)  
033fc     3D 5B 02 F6 | 	mov	local04, local20
03400     3F 5B 02 F1 | 	add	local04, local22
03404     2D 7B 02 F6 | 	mov	local20, local04
03408                 | LR__0103
03408                 | '   
03408                 | '   if (rr==$FF)
03408     FF 5C 0E F2 | 	cmp	local05, #255 wz
0340c                 | '     b:=0   
0340c     00 58 06 A6 |  if_e	mov	local03, #0
03410                 | ' 
03410                 | '   if b==0  
03410     00 58 0E F2 | 	cmp	local03, #0 wz
03414     14 01 90 5D |  if_ne	jmp	#LR__0108
03418                 | '  
03418                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03418     00 00 40 FF 
0341c     00 7A 1E F2 | 	cmp	local20, ##-2147483648 wcz
03420     84 00 90 CD |  if_b	jmp	#LR__0105
03424     00 80 43 FF 
03428     00 7A 1E F2 | 	cmp	local20, ##-2030043136 wcz
0342c     78 00 90 3D |  if_ae	jmp	#LR__0105
03430                 | '       if mousefront<>((mousetail-1) //128)
03430     0C 0E 06 F1 | 	add	objptr, #12
03434     07 61 02 FB | 	rdlong	local07, objptr
03438     30 5B 02 F6 | 	mov	local04, local07
0343c     01 5A 86 F1 | 	sub	local04, #1
03440     2D 55 52 F6 | 	abs	local01, local04 wc
03444     7F 54 06 F5 | 	and	local01, #127
03448     2A 55 62 C6 |  if_b	neg	local01, local01
0344c     04 0E 86 F1 | 	sub	objptr, #4
03450     07 65 02 FB | 	rdlong	local09, objptr
03454     08 0E 86 F1 | 	sub	objptr, #8
03458     32 67 02 F6 | 	mov	local10, local09
0345c     2A 67 0A F2 | 	cmp	local10, local01 wz
03460     44 00 90 AD |  if_e	jmp	#LR__0104
03464     08 0E 06 F1 | 	add	objptr, #8
03468     07 67 02 FB | 	rdlong	local10, objptr
0346c     02 66 66 F0 | 	shl	local10, #2
03470     98 0E 06 F1 | 	add	objptr, #152
03474     07 67 02 F1 | 	add	local10, objptr
03478     33 81 02 F6 | 	mov	local23, local10
0347c                 | '         mousebuf[mousefront]:=kbmreport
0347c     40 7B 62 FC | 	wrlong	local20, local23
03480                 | '         mousefront+=1
03480     98 0E 86 F1 | 	sub	objptr, #152
03484     07 55 02 FB | 	rdlong	local01, objptr
03488     01 54 06 F1 | 	add	local01, #1
0348c     07 55 62 FC | 	wrlong	local01, objptr
03490                 | '         mousefront:=mousefront // 128
03490     2A 61 02 F6 | 	mov	local07, local01
03494     30 5B 52 F6 | 	abs	local04, local07 wc
03498     7F 5A 06 F5 | 	and	local04, #127
0349c     2D 5B 62 C6 |  if_b	neg	local04, local04
034a0     07 5B 62 FC | 	wrlong	local04, objptr
034a4     08 0E 86 F1 | 	sub	objptr, #8
034a8                 | LR__0104
034a8                 | LR__0105
034a8                 | '     b:=(-1)
034a8     01 58 66 F6 | 	neg	local03, #1
034ac                 | ' 
034ac                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
034ac     00 80 43 FF 
034b0     00 7A 1E F2 | 	cmp	local20, ##-2030043136 wcz
034b4     70 00 90 CD |  if_b	jmp	#LR__0107
034b8     00 00 45 FF 
034bc     00 7A 1E F2 | 	cmp	local20, ##-1979711488 wcz
034c0     64 00 90 3D |  if_ae	jmp	#LR__0107
034c4                 | '       if kbdfront<>((kbdtail-1) //32)
034c4     04 0E 06 F1 | 	add	objptr, #4
034c8     07 61 02 FB | 	rdlong	local07, objptr
034cc     04 0E 86 F1 | 	sub	objptr, #4
034d0     30 5B 02 F6 | 	mov	local04, local07
034d4     01 5A 86 F1 | 	sub	local04, #1
034d8     2D 55 52 F6 | 	abs	local01, local04 wc
034dc     1F 54 06 F5 | 	and	local01, #31
034e0     2A 55 62 C6 |  if_b	neg	local01, local01
034e4     07 67 02 FB | 	rdlong	local10, objptr
034e8     2A 67 0A F2 | 	cmp	local10, local01 wz
034ec     38 00 90 AD |  if_e	jmp	#LR__0106
034f0     07 55 02 FB | 	rdlong	local01, objptr
034f4     02 54 66 F0 | 	shl	local01, #2
034f8     20 0E 06 F1 | 	add	objptr, #32
034fc     07 55 02 F1 | 	add	local01, objptr
03500     2A 83 02 F6 | 	mov	local24, local01
03504                 | '         kbdbuf[kbdfront]:=kbmreport
03504     41 7B 62 FC | 	wrlong	local20, local24
03508                 | '         kbdfront+=1
03508     20 0E 86 F1 | 	sub	objptr, #32
0350c     07 61 02 FB | 	rdlong	local07, objptr
03510     01 60 06 F1 | 	add	local07, #1
03514     07 61 62 FC | 	wrlong	local07, objptr
03518                 | '         kbdfront:=kbdfront // 32
03518     30 5B 52 F6 | 	abs	local04, local07 wc
0351c     1F 5A 06 F5 | 	and	local04, #31
03520     2D 5B 62 C6 |  if_b	neg	local04, local04
03524     07 5B 62 FC | 	wrlong	local04, objptr
03528                 | LR__0106
03528                 | LR__0107
03528                 | '     b:=(-1)
03528     01 58 66 F6 | 	neg	local03, #1
0352c                 | LR__0108
0352c                 | ' 
0352c                 | ' 
0352c                 | '   if long[$30]==0
0352c     30 5A 0E FB | 	rdlong	local04, #48 wz
03530     5C 00 90 5D |  if_ne	jmp	#LR__0110
03534                 | '     if kbdfront<>kbdtail
03534     07 5B 02 FB | 	rdlong	local04, objptr
03538     04 0E 06 F1 | 	add	objptr, #4
0353c     07 55 02 FB | 	rdlong	local01, objptr
03540     04 0E 86 F1 | 	sub	objptr, #4
03544     2A 5B 0A F2 | 	cmp	local04, local01 wz
03548     44 00 90 AD |  if_e	jmp	#LR__0109
0354c     04 0E 06 F1 | 	add	objptr, #4
03550     07 85 02 FB | 	rdlong	local25, objptr
03554     02 84 66 F0 | 	shl	local25, #2
03558     1C 0E 06 F1 | 	add	objptr, #28
0355c     07 85 02 F1 | 	add	local25, objptr
03560                 | '       long[$30]:=kbdbuf[kbdtail]
03560     42 5B 02 FB | 	rdlong	local04, local25
03564     30 5A 66 FC | 	wrlong	local04, #48
03568                 | '       kbdtail++
03568     1C 0E 86 F1 | 	sub	objptr, #28
0356c     07 67 02 FB | 	rdlong	local10, objptr
03570     33 55 02 F6 | 	mov	local01, local10
03574     01 54 06 F1 | 	add	local01, #1
03578     07 55 62 FC | 	wrlong	local01, objptr
0357c                 | '       kbdtail:= kbdtail // 32
0357c     2A 5B 52 F6 | 	abs	local04, local01 wc
03580     1F 5A 06 F5 | 	and	local04, #31
03584     2D 5B 62 C6 |  if_b	neg	local04, local04
03588     07 5B 62 FC | 	wrlong	local04, objptr
0358c     04 0E 86 F1 | 	sub	objptr, #4
03590                 | LR__0109
03590                 | LR__0110
03590                 | '       
03590                 | '   if long[$34]==0
03590     34 5A 0E FB | 	rdlong	local04, #52 wz
03594     64 00 90 5D |  if_ne	jmp	#LR__0112
03598                 | '     if mousefront<>mousetail
03598     08 0E 06 F1 | 	add	objptr, #8
0359c     07 5B 02 FB | 	rdlong	local04, objptr
035a0     04 0E 06 F1 | 	add	objptr, #4
035a4     07 67 02 FB | 	rdlong	local10, objptr
035a8     0C 0E 86 F1 | 	sub	objptr, #12
035ac     33 55 02 F6 | 	mov	local01, local10
035b0     2A 5B 0A F2 | 	cmp	local04, local01 wz
035b4     44 00 90 AD |  if_e	jmp	#LR__0111
035b8     0C 0E 06 F1 | 	add	objptr, #12
035bc     07 87 02 FB | 	rdlong	local26, objptr
035c0     02 86 66 F0 | 	shl	local26, #2
035c4     94 0E 06 F1 | 	add	objptr, #148
035c8     07 87 02 F1 | 	add	local26, objptr
035cc                 | '       long[$34]:=mousebuf[mousetail]
035cc     43 5B 02 FB | 	rdlong	local04, local26
035d0     34 5A 66 FC | 	wrlong	local04, #52
035d4                 | '       mousetail++
035d4     94 0E 86 F1 | 	sub	objptr, #148
035d8     07 67 02 FB | 	rdlong	local10, objptr
035dc     33 55 02 F6 | 	mov	local01, local10
035e0     01 54 06 F1 | 	add	local01, #1
035e4     07 55 62 FC | 	wrlong	local01, objptr
035e8                 | '       mousetail:= mousetail // 128
035e8     2A 5B 52 F6 | 	abs	local04, local01 wc
035ec     7F 5A 06 F5 | 	and	local04, #127
035f0     2D 5B 62 C6 |  if_b	neg	local04, local04
035f4     07 5B 62 FC | 	wrlong	local04, objptr
035f8     0C 0E 86 F1 | 	sub	objptr, #12
035fc                 | LR__0111
035fc                 | LR__0112
035fc                 | ' 
035fc                 | '       
035fc                 | '   if long[$38]==0
035fc     38 5A 0E FB | 	rdlong	local04, #56 wz
03600     6C 00 90 5D |  if_ne	jmp	#LR__0114
03604                 | '     if midifront<>miditail
03604     10 0E 06 F1 | 	add	objptr, #16
03608     07 5B 02 FB | 	rdlong	local04, objptr
0360c     04 0E 06 F1 | 	add	objptr, #4
03610     07 67 02 FB | 	rdlong	local10, objptr
03614     14 0E 86 F1 | 	sub	objptr, #20
03618     33 55 02 F6 | 	mov	local01, local10
0361c     2A 5B 0A F2 | 	cmp	local04, local01 wz
03620     4C 00 90 AD |  if_e	jmp	#LR__0113
03624     14 0E 06 F1 | 	add	objptr, #20
03628     07 89 02 FB | 	rdlong	local27, objptr
0362c     02 88 66 F0 | 	shl	local27, #2
03630     01 00 00 FF 
03634     8C 0E 06 F1 | 	add	objptr, ##652
03638     07 89 02 F1 | 	add	local27, objptr
0363c                 | '       long[$38]:=midibuf[miditail]
0363c     44 5B 02 FB | 	rdlong	local04, local27
03640     38 5A 66 FC | 	wrlong	local04, #56
03644                 | '       miditail++
03644     01 00 00 FF 
03648     8C 0E 86 F1 | 	sub	objptr, ##652
0364c     07 67 02 FB | 	rdlong	local10, objptr
03650     33 55 02 F6 | 	mov	local01, local10
03654     01 54 06 F1 | 	add	local01, #1
03658     07 55 62 FC | 	wrlong	local01, objptr
0365c                 | '       miditail:= miditail // 32
0365c     2A 5B 52 F6 | 	abs	local04, local01 wc
03660     1F 5A 06 F5 | 	and	local04, #31
03664     2D 5B 62 C6 |  if_b	neg	local04, local04
03668     07 5B 62 FC | 	wrlong	local04, objptr
0366c     14 0E 86 F1 | 	sub	objptr, #20
03670                 | LR__0113
03670                 | LR__0114
03670                 | '       
03670                 | '   if long[$3c]==0
03670     3C 5A 0E FB | 	rdlong	local04, #60 wz
03674     34 FB 9F 5D |  if_ne	jmp	#LR__0090
03678                 | '     if serialfront<>serialtail
03678     18 0E 06 F1 | 	add	objptr, #24
0367c     07 5B 02 FB | 	rdlong	local04, objptr
03680     04 0E 06 F1 | 	add	objptr, #4
03684     07 67 02 FB | 	rdlong	local10, objptr
03688     1C 0E 86 F1 | 	sub	objptr, #28
0368c     33 55 02 F6 | 	mov	local01, local10
03690     2A 5B 0A F2 | 	cmp	local04, local01 wz
03694     14 FB 9F AD |  if_e	jmp	#LR__0090
03698                 | '       byte[$3c]:=255
03698     3C FE 4D FC | 	wrbyte	#255, #60
0369c     1C 0E 06 F1 | 	add	objptr, #28
036a0     07 8B 02 FB | 	rdlong	local28, objptr
036a4     01 00 00 FF 
036a8     04 0F 06 F1 | 	add	objptr, ##772
036ac     07 8B 02 F1 | 	add	local28, objptr
036b0                 | '       byte[$3D]:=serialbuf[serialtail]
036b0     45 5B C2 FA | 	rdbyte	local04, local28
036b4     3D 5A 46 FC | 	wrbyte	local04, #61
036b8                 | '       serialtail++
036b8     01 00 00 FF 
036bc     04 0F 86 F1 | 	sub	objptr, ##772
036c0     07 67 02 FB | 	rdlong	local10, objptr
036c4     33 55 02 F6 | 	mov	local01, local10
036c8     01 54 06 F1 | 	add	local01, #1
036cc     07 55 62 FC | 	wrlong	local01, objptr
036d0                 | '       serialtail:= serialtail // 32
036d0     2A 5B 52 F6 | 	abs	local04, local01 wc
036d4     1F 5A 06 F5 | 	and	local04, #31
036d8     2D 5B 62 C6 |  if_b	neg	local04, local04
036dc     07 5B 62 FC | 	wrlong	local04, objptr
036e0     1C 0E 86 F1 | 	sub	objptr, #28
036e4     C4 FA 9F FD | 	jmp	#LR__0090
036e8     AF F0 03 F6 | 	mov	ptra, fp
036ec     BF 00 A0 FD | 	call	#popregs_
036f0                 | _retrocog_spin2_serialcog_ret
036f0     2D 00 64 FD | 	ret
036f4                 | 
036f4                 | '       
036f4                 | ' 
036f4                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
036f4                 | ' 
036f4                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
036f4                 | _retrocog_spin2_serial_start
036f4     04 5A 05 F6 | 	mov	COUNT_, #4
036f8     B0 00 A0 FD | 	call	#pushregs_
036fc     25 55 02 F6 | 	mov	local01, arg01
03700     26 57 02 F6 | 	mov	local02, arg02
03704                 | ' 
03704                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03704     14 4A 06 FB | 	rdlong	arg01, #20
03708     10 4C C6 F9 | 	decod	arg02, #16
0370c     26 4B 02 FD | 	qmul	arg01, arg02
03710     19 58 62 FD | 	getqy	local03
03714     18 5A 62 FD | 	getqx	local04
03718     28 58 62 FD | 	setq	local03
0371c     27 5B 12 FD | 	qdiv	local04, arg03
03720     18 24 62 FD | 	getqx	result1
03724     12 4F 02 F6 | 	mov	arg03, result1
03728     FE FF 7F FF 
0372c     00 4E 06 F5 | 	and	arg03, ##-1024
03730                 | ' bitmode |= 7                                                  ' set bits (8)
03730     07 4E 46 F5 | 	or	arg03, #7
03734                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03734     40 54 62 FD | 	dirl	local01
03738     08 00 80 FF 
0373c     2A 7D 08 FC | 	wrpin	##4158, local01
03740     2A 4F 12 FC | 	wxpin	arg03, local01
03744     2A 01 28 FC | 	wypin	#0, local01
03748     41 54 62 FD | 	dirh	local01
0374c                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
0374c     40 56 62 FD | 	dirl	local02
03750     2B F9 08 FC | 	wrpin	#124, local02
03754     2B 4F 12 FC | 	wxpin	arg03, local02
03758     2B 01 28 FC | 	wypin	#0, local02
0375c     41 56 62 FD | 	dirh	local02
03760                 | ' pinhigh(rxpin)
03760     59 54 62 FD | 	drvh	local01
03764     AF F0 03 F6 | 	mov	ptra, fp
03768     BF 00 A0 FD | 	call	#popregs_
0376c                 | _retrocog_spin2_serial_start_ret
0376c     2D 00 64 FD | 	ret
03770                 | 
03770                 | ' 
03770                 | ' pub rxcheck(pin) : rxbyte | check
03770                 | _retrocog_spin2_rxcheck
03770     03 5A 05 F6 | 	mov	COUNT_, #3
03774     B0 00 A0 FD | 	call	#pushregs_
03778     25 55 02 F6 | 	mov	local01, arg01
0377c                 | ' 
0377c                 | ' '' Check for serial input
0377c                 | ' '' -- returns -1 if nothing available
0377c                 | ' 
0377c                 | '   rxbyte := -1
0377c     01 56 66 F6 | 	neg	local02, #1
03780                 | '   check := pinr(pin)
03780     2A 4B 02 F6 | 	mov	arg01, local01
03784     00 04 B0 FD | 	call	#__system___pinread
03788     12 59 0A F6 | 	mov	local03, result1 wz
0378c                 | '   if (check)
0378c                 | '     rxbyte := rdpin(pin) >> 24
0378c     00 56 06 56 |  if_ne	mov	local02, #0
03790     2A 57 8A 5A |  if_ne	rdpin	local02, local01
03794     18 56 46 50 |  if_ne	shr	local02, #24
03798     2B 25 02 F6 | 	mov	result1, local02
0379c     AF F0 03 F6 | 	mov	ptra, fp
037a0     BF 00 A0 FD | 	call	#popregs_
037a4                 | _retrocog_spin2_rxcheck_ret
037a4     2D 00 64 FD | 	ret
037a8                 | hubexit
037a8     81 00 80 FD | 	jmp	#cogexit
037ac                 | 
037ac                 | __system___setbaud
037ac     14 08 07 FB | 	rdlong	muldiva_, #20
037b0     25 0B 03 F6 | 	mov	muldivb_, arg01
037b4     D0 00 A0 FD | 	call	#divide_
037b8     40 7C 64 FD | 	dirl	#62
037bc     40 7E 64 FD | 	dirl	#63
037c0     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
037c4     10 0A 67 F0 | 	shl	muldivb_, #16
037c8     07 4C 06 F6 | 	mov	arg02, #7
037cc     85 4D 02 F1 | 	add	arg02, muldivb_
037d0     3E F8 0C FC | 	wrpin	#124, #62
037d4     3E 4C 16 FC | 	wxpin	arg02, #62
037d8     3F 7C 0C FC | 	wrpin	#62, #63
037dc     14 4C 06 F1 | 	add	arg02, #20
037e0     3F 4C 16 FC | 	wxpin	arg02, #63
037e4     41 7C 64 FD | 	dirh	#62
037e8     41 7E 64 FD | 	dirh	#63
037ec                 | __system___setbaud_ret
037ec     2D 00 64 FD | 	ret
037f0                 | 
037f0                 | __system___txraw
037f0     02 5A 05 F6 | 	mov	COUNT_, #2
037f4     B0 00 A0 FD | 	call	#pushregs_
037f8     25 55 02 F6 | 	mov	local01, arg01
037fc     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03800     0C 00 90 5D |  if_ne	jmp	#LR__0115
03804     42 0F 00 FF 
03808     80 4A 06 F6 | 	mov	arg01, ##2000000
0380c     9C FF BF FD | 	call	#__system___setbaud
03810                 | LR__0115
03810     3E 54 26 FC | 	wypin	local01, #62
03814     1F 02 64 FD | 	waitx	#1
03818     EC C7 9F FE | 	loc	pa,	#(@LR__0117-@LR__0116)
0381c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03820                 | LR__0116
03820     40 7C 74 FD | 	testp	#62 wc
03824     F8 FF 9F 3D |  if_nc	jmp	#LR__0116
03828                 | LR__0117
03828     01 24 06 F6 | 	mov	result1, #1
0382c     AF F0 03 F6 | 	mov	ptra, fp
03830     BF 00 A0 FD | 	call	#popregs_
03834                 | __system___txraw_ret
03834     2D 00 64 FD | 	ret
03838                 | 
03838                 | __system___rxraw
03838     0D 5A 05 F6 | 	mov	COUNT_, #13
0383c     B0 00 A0 FD | 	call	#pushregs_
03840     25 55 02 F6 | 	mov	local01, arg01
03844     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03848     0C 00 90 5D |  if_ne	jmp	#LR__0118
0384c     42 0F 00 FF 
03850     80 4A 06 F6 | 	mov	arg01, ##2000000
03854     54 FF BF FD | 	call	#__system___setbaud
03858                 | LR__0118
03858     00 54 0E F2 | 	cmp	local01, #0 wz
0385c     18 00 90 AD |  if_e	jmp	#LR__0119
03860     14 58 06 FB | 	rdlong	local03, #20
03864     0A 58 46 F0 | 	shr	local03, #10
03868     2C 55 02 FD | 	qmul	local01, local03
0386c     18 5A 62 FD | 	getqx	local04
03870     1A 5C 62 FD | 	getct	local05
03874     2D 5D 02 F1 | 	add	local05, local04
03878                 | LR__0119
03878     01 5E 66 F6 | 	neg	local06, #1
0387c     00 60 06 F6 | 	mov	local07, #0
03880     04 14 06 F1 | 	add	ptr___system__dat__, #4
03884     0A 63 02 FB | 	rdlong	local08, ptr___system__dat__
03888     04 14 86 F1 | 	sub	ptr___system__dat__, #4
0388c                 | LR__0120
0388c     08 62 16 F4 | 	testb	local08, #8 wc
03890     09 62 76 F4 | 	testbn	local08, #9 andc
03894     0A 62 46 F0 | 	shr	local08, #10
03898     01 60 06 C6 |  if_b	mov	local07, #1
0389c     10 00 90 CD |  if_b	jmp	#LR__0121
038a0     40 7E 6C FD | 	testp	#63 wz
038a4     01 60 06 A6 |  if_e	mov	local07, #1
038a8     3F 62 8E AA |  if_e	rdpin	local08, #63
038ac     04 62 46 A0 |  if_e	shr	local08, #4
038b0                 | LR__0121
038b0     00 56 06 F6 | 	mov	local02, #0
038b4     00 60 0E F2 | 	cmp	local07, #0 wz
038b8     01 56 66 56 |  if_ne	neg	local02, #1
038bc     00 64 06 F6 | 	mov	local09, #0
038c0     00 66 06 F6 | 	mov	local10, #0
038c4     00 54 0E F2 | 	cmp	local01, #0 wz
038c8     01 66 66 56 |  if_ne	neg	local10, #1
038cc     00 68 06 F6 | 	mov	local11, #0
038d0     00 6A 06 F6 | 	mov	local12, #0
038d4     1A 6C 62 FD | 	getct	local13
038d8     2E 6D 82 F1 | 	sub	local13, local05
038dc     00 6C 5E F2 | 	cmps	local13, #0 wcz
038e0     01 6A 66 C6 |  if_b	neg	local12, #1
038e4     00 6A 0E F2 | 	cmp	local12, #0 wz
038e8     01 68 66 56 |  if_ne	neg	local11, #1
038ec     34 67 CA F7 | 	test	local10, local11 wz
038f0     01 64 66 56 |  if_ne	neg	local09, #1
038f4     32 57 4A F5 | 	or	local02, local09 wz
038f8     90 FF 9F AD |  if_e	jmp	#LR__0120
038fc     00 60 0E F2 | 	cmp	local07, #0 wz
03900     31 5F 02 56 |  if_ne	mov	local06, local08
03904     FF 5E 06 55 |  if_ne	and	local06, #255
03908     04 14 06 F1 | 	add	ptr___system__dat__, #4
0390c     0A 63 62 FC | 	wrlong	local08, ptr___system__dat__
03910     04 14 86 F1 | 	sub	ptr___system__dat__, #4
03914     2F 25 02 F6 | 	mov	result1, local06
03918     AF F0 03 F6 | 	mov	ptra, fp
0391c     BF 00 A0 FD | 	call	#popregs_
03920                 | __system___rxraw_ret
03920     2D 00 64 FD | 	ret
03924                 | 
03924                 | __system____builtin_memmove
03924     25 2B 02 F6 | 	mov	_var01, arg01
03928     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
0392c     50 00 90 3D |  if_ae	jmp	#LR__0129
03930     EC C6 9F FE | 	loc	pa,	#(@LR__0123-@LR__0122)
03934     93 00 A0 FD | 	call	#FCACHE_LOAD_
03938                 | LR__0122
03938     03 4E 5E F2 | 	cmps	arg03, #3 wcz
0393c     18 00 90 ED |  if_be	jmp	#LR__0124
03940     26 2D 02 FB | 	rdlong	_var02, arg02
03944     25 2D 62 FC | 	wrlong	_var02, arg01
03948     04 4A 06 F1 | 	add	arg01, #4
0394c     04 4C 06 F1 | 	add	arg02, #4
03950     04 4E 86 F1 | 	sub	arg03, #4
03954     E0 FF 9F FD | 	jmp	#LR__0122
03958                 | LR__0123
03958                 | LR__0124
03958     27 2F 0A F6 | 	mov	_var03, arg03 wz
0395c     4C 00 90 AD |  if_e	jmp	#LR__0135
03960     B0 C6 9F FE | 	loc	pa,	#(@LR__0127-@LR__0125)
03964     93 00 A0 FD | 	call	#FCACHE_LOAD_
03968                 | LR__0125
03968     17 09 D8 FC | 	rep	@LR__0128, _var03
0396c                 | LR__0126
0396c     26 2D C2 FA | 	rdbyte	_var02, arg02
03970     25 2D 42 FC | 	wrbyte	_var02, arg01
03974     01 4A 06 F1 | 	add	arg01, #1
03978     01 4C 06 F1 | 	add	arg02, #1
0397c                 | LR__0127
0397c                 | LR__0128
0397c     2C 00 90 FD | 	jmp	#LR__0135
03980                 | LR__0129
03980     27 4B 02 F1 | 	add	arg01, arg03
03984     27 4D 02 F1 | 	add	arg02, arg03
03988     27 31 0A F6 | 	mov	_var04, arg03 wz
0398c     1C 00 90 AD |  if_e	jmp	#LR__0134
03990     80 C6 9F FE | 	loc	pa,	#(@LR__0132-@LR__0130)
03994     93 00 A0 FD | 	call	#FCACHE_LOAD_
03998                 | LR__0130
03998     18 09 D8 FC | 	rep	@LR__0133, _var04
0399c                 | LR__0131
0399c     01 4A 86 F1 | 	sub	arg01, #1
039a0     01 4C 86 F1 | 	sub	arg02, #1
039a4     26 2D C2 FA | 	rdbyte	_var02, arg02
039a8     25 2D 42 FC | 	wrbyte	_var02, arg01
039ac                 | LR__0132
039ac                 | LR__0133
039ac                 | LR__0134
039ac                 | LR__0135
039ac     15 25 02 F6 | 	mov	result1, _var01
039b0                 | __system____builtin_memmove_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | __system__longmove
039b4     25 2B 02 F6 | 	mov	_var01, arg01
039b8     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
039bc     28 00 90 3D |  if_ae	jmp	#LR__0140
039c0     27 2D 0A F6 | 	mov	_var02, arg03 wz
039c4     54 00 90 AD |  if_e	jmp	#LR__0146
039c8     48 C6 9F FE | 	loc	pa,	#(@LR__0138-@LR__0136)
039cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
039d0                 | LR__0136
039d0     16 09 D8 FC | 	rep	@LR__0139, _var02
039d4                 | LR__0137
039d4     26 2F 02 FB | 	rdlong	_var03, arg02
039d8     25 2F 62 FC | 	wrlong	_var03, arg01
039dc     04 4A 06 F1 | 	add	arg01, #4
039e0     04 4C 06 F1 | 	add	arg02, #4
039e4                 | LR__0138
039e4                 | LR__0139
039e4     34 00 90 FD | 	jmp	#LR__0146
039e8                 | LR__0140
039e8     27 31 02 F6 | 	mov	_var04, arg03
039ec     02 30 66 F0 | 	shl	_var04, #2
039f0     18 4B 02 F1 | 	add	arg01, _var04
039f4     18 4D 02 F1 | 	add	arg02, _var04
039f8     27 33 0A F6 | 	mov	_var05, arg03 wz
039fc     1C 00 90 AD |  if_e	jmp	#LR__0145
03a00     10 C6 9F FE | 	loc	pa,	#(@LR__0143-@LR__0141)
03a04     93 00 A0 FD | 	call	#FCACHE_LOAD_
03a08                 | LR__0141
03a08     19 09 D8 FC | 	rep	@LR__0144, _var05
03a0c                 | LR__0142
03a0c     04 4A 86 F1 | 	sub	arg01, #4
03a10     04 4C 86 F1 | 	sub	arg02, #4
03a14     26 2F 02 FB | 	rdlong	_var03, arg02
03a18     25 2F 62 FC | 	wrlong	_var03, arg01
03a1c                 | LR__0143
03a1c                 | LR__0144
03a1c                 | LR__0145
03a1c                 | LR__0146
03a1c     15 25 02 F6 | 	mov	result1, _var01
03a20                 | __system__longmove_ret
03a20     2D 00 64 FD | 	ret
03a24                 | 
03a24                 | __system____topofstack
03a24     00 5A 05 F6 | 	mov	COUNT_, #0
03a28     B0 00 A0 FD | 	call	#pushregs_
03a2c     0C F0 07 F1 | 	add	ptra, #12
03a30     04 5E 05 F1 | 	add	fp, #4
03a34     AF 4A 62 FC | 	wrlong	arg01, fp
03a38     AF 24 02 F6 | 	mov	result1, fp
03a3c     04 5E 85 F1 | 	sub	fp, #4
03a40     AF F0 03 F6 | 	mov	ptra, fp
03a44     BF 00 A0 FD | 	call	#popregs_
03a48                 | __system____topofstack_ret
03a48     2D 00 64 FD | 	ret
03a4c                 | 
03a4c                 | __system___make_methodptr
03a4c     04 5A 05 F6 | 	mov	COUNT_, #4
03a50     B0 00 A0 FD | 	call	#pushregs_
03a54     25 55 02 F6 | 	mov	local01, arg01
03a58     26 57 02 F6 | 	mov	local02, arg02
03a5c     08 4A 06 F6 | 	mov	arg01, #8
03a60     08 0B B0 FD | 	call	#__system___gc_alloc_managed
03a64     12 59 0A F6 | 	mov	local03, result1 wz
03a68     10 00 90 AD |  if_e	jmp	#LR__0147
03a6c     2C 55 62 FC | 	wrlong	local01, local03
03a70     2C 5B 02 F6 | 	mov	local04, local03
03a74     04 5A 06 F1 | 	add	local04, #4
03a78     2D 57 62 FC | 	wrlong	local02, local04
03a7c                 | LR__0147
03a7c     2C 25 02 F6 | 	mov	result1, local03
03a80     AF F0 03 F6 | 	mov	ptra, fp
03a84     BF 00 A0 FD | 	call	#popregs_
03a88                 | __system___make_methodptr_ret
03a88     2D 00 64 FD | 	ret
03a8c                 | 
03a8c                 | __system___lockmem
03a8c     02 5A 05 F6 | 	mov	COUNT_, #2
03a90     B0 00 A0 FD | 	call	#pushregs_
03a94     01 24 62 FD | 	cogid	result1
03a98     12 55 02 F6 | 	mov	local01, result1
03a9c     00 55 06 F1 | 	add	local01, #256
03aa0                 | LR__0148
03aa0     25 57 0A FB | 	rdlong	local02, arg01 wz
03aa4     25 55 62 AC |  if_e	wrlong	local01, arg01
03aa8     25 57 02 AB |  if_e	rdlong	local02, arg01
03aac     25 57 02 AB |  if_e	rdlong	local02, arg01
03ab0     2A 57 0A F2 | 	cmp	local02, local01 wz
03ab4     E8 FF 9F 5D |  if_ne	jmp	#LR__0148
03ab8     AF F0 03 F6 | 	mov	ptra, fp
03abc     BF 00 A0 FD | 	call	#popregs_
03ac0                 | __system___lockmem_ret
03ac0     2D 00 64 FD | 	ret
03ac4                 | 
03ac4                 | __system___tx
03ac4     02 5A 05 F6 | 	mov	COUNT_, #2
03ac8     B0 00 A0 FD | 	call	#pushregs_
03acc     25 55 02 F6 | 	mov	local01, arg01
03ad0     0A 54 0E F2 | 	cmp	local01, #10 wz
03ad4     20 00 90 5D |  if_ne	jmp	#LR__0149
03ad8     08 14 06 F1 | 	add	ptr___system__dat__, #8
03adc     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03ae0     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03ae4     02 56 CE F7 | 	test	local02, #2 wz
03ae8     0C 00 90 AD |  if_e	jmp	#LR__0149
03aec     0D 56 06 F6 | 	mov	local02, #13
03af0     0D 4A 06 F6 | 	mov	arg01, #13
03af4     F8 FC BF FD | 	call	#__system___txraw
03af8                 | LR__0149
03af8     2A 4B 02 F6 | 	mov	arg01, local01
03afc     F0 FC BF FD | 	call	#__system___txraw
03b00     AF F0 03 F6 | 	mov	ptra, fp
03b04     BF 00 A0 FD | 	call	#popregs_
03b08                 | __system___tx_ret
03b08     2D 00 64 FD | 	ret
03b0c                 | 
03b0c                 | __system___rx
03b0c     02 5A 05 F6 | 	mov	COUNT_, #2
03b10     B0 00 A0 FD | 	call	#pushregs_
03b14                 | LR__0150
03b14     00 4A 06 F6 | 	mov	arg01, #0
03b18     1C FD BF FD | 	call	#__system___rxraw
03b1c     12 55 02 F6 | 	mov	local01, result1
03b20     FF FF 7F FF 
03b24     FF 55 0E F2 | 	cmp	local01, ##-1 wz
03b28     E8 FF 9F AD |  if_e	jmp	#LR__0150
03b2c     0D 54 0E F2 | 	cmp	local01, #13 wz
03b30     14 00 90 5D |  if_ne	jmp	#LR__0151
03b34     08 14 06 F1 | 	add	ptr___system__dat__, #8
03b38     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03b3c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03b40     02 56 CE F7 | 	test	local02, #2 wz
03b44     0A 54 06 56 |  if_ne	mov	local01, #10
03b48                 | LR__0151
03b48     08 14 06 F1 | 	add	ptr___system__dat__, #8
03b4c     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03b50     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03b54     01 56 CE F7 | 	test	local02, #1 wz
03b58     1C 00 90 AD |  if_e	jmp	#LR__0154
03b5c     7F 54 0E F2 | 	cmp	local01, #127 wz
03b60     0C 00 90 5D |  if_ne	jmp	#LR__0152
03b64     08 4A 06 F6 | 	mov	arg01, #8
03b68     58 FF BF FD | 	call	#__system___tx
03b6c     08 00 90 FD | 	jmp	#LR__0153
03b70                 | LR__0152
03b70     2A 4B 02 F6 | 	mov	arg01, local01
03b74     4C FF BF FD | 	call	#__system___tx
03b78                 | LR__0153
03b78                 | LR__0154
03b78     2A 25 02 F6 | 	mov	result1, local01
03b7c     AF F0 03 F6 | 	mov	ptra, fp
03b80     BF 00 A0 FD | 	call	#popregs_
03b84                 | __system___rx_ret
03b84     2D 00 64 FD | 	ret
03b88                 | 
03b88                 | __system___pinread
03b88     20 4A CE F7 | 	test	arg01, #32 wz
03b8c     FF 2B 02 56 |  if_ne	mov	_var01, inb
03b90     FE 2B 02 A6 |  if_e	mov	_var01, ina
03b94     15 25 02 F6 | 	mov	result1, _var01
03b98     25 25 42 F0 | 	shr	result1, arg01
03b9c     06 4A 46 F0 | 	shr	arg01, #6
03ba0     25 25 42 F7 | 	zerox	result1, arg01
03ba4                 | __system___pinread_ret
03ba4     2D 00 64 FD | 	ret
03ba8                 | 
03ba8                 | __system___waitms
03ba8     03 5A 05 F6 | 	mov	COUNT_, #3
03bac     B0 00 A0 FD | 	call	#pushregs_
03bb0     25 55 02 F6 | 	mov	local01, arg01
03bb4     14 56 06 FB | 	rdlong	local02, #20
03bb8     5C C4 9F FE | 	loc	pa,	#(@LR__0156-@LR__0155)
03bbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bc0                 | LR__0155
03bc0     01 00 00 FF 
03bc4     E8 55 5E F2 | 	cmps	local01, ##1000 wcz
03bc8     1F 56 62 1D |  if_a	waitx	local02
03bcc     01 00 00 1F 
03bd0     E8 55 86 11 |  if_a	sub	local01, ##1000
03bd4     E8 FF 9F 1D |  if_a	jmp	#LR__0155
03bd8                 | LR__0156
03bd8     0C 14 06 F1 | 	add	ptr___system__dat__, #12
03bdc     0A 59 0A FB | 	rdlong	local03, ptr___system__dat__ wz
03be0     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
03be4     20 00 90 5D |  if_ne	jmp	#LR__0157
03be8     2B 09 03 F6 | 	mov	muldiva_, local02
03bec     01 00 00 FF 
03bf0     E8 0B 07 F6 | 	mov	muldivb_, ##1000
03bf4     CC 00 A0 FD | 	call	#unsdivide_
03bf8     85 59 02 F6 | 	mov	local03, muldivb_
03bfc     0C 14 06 F1 | 	add	ptr___system__dat__, #12
03c00     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
03c04     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
03c08                 | LR__0157
03c08     00 54 5E F2 | 	cmps	local01, #0 wcz
03c0c     2C 55 02 1D |  if_a	qmul	local01, local03
03c10     18 4A 62 1D |  if_a	getqx	arg01
03c14     1F 4A 62 1D |  if_a	waitx	arg01
03c18     AF F0 03 F6 | 	mov	ptra, fp
03c1c     BF 00 A0 FD | 	call	#popregs_
03c20                 | __system___waitms_ret
03c20     2D 00 64 FD | 	ret
03c24                 | 
03c24                 | __system___basic_open
03c24     05 5A 05 F6 | 	mov	COUNT_, #5
03c28     B0 00 A0 FD | 	call	#pushregs_
03c2c     26 55 02 F6 | 	mov	local01, arg02
03c30     27 57 02 F6 | 	mov	local02, arg03
03c34     28 59 02 F6 | 	mov	local03, arg04
03c38     34 11 B0 FD | 	call	#__system____getftab
03c3c     12 5B 0A F6 | 	mov	local04, result1 wz
03c40     18 00 90 5D |  if_ne	jmp	#LR__0158
03c44     03 4B 02 F6 | 	mov	arg01, abortchain
03c48     0C 4C 06 F6 | 	mov	arg02, #12
03c4c     01 4E 06 F6 | 	mov	arg03, #1
03c50     F0 00 A0 FD | 	call	#__longjmp
03c54     01 24 66 F6 | 	neg	result1, #1
03c58     70 00 90 FD | 	jmp	#LR__0162
03c5c                 | LR__0158
03c5c     00 54 0E F2 | 	cmp	local01, #0 wz
03c60     48 00 90 AD |  if_e	jmp	#LR__0160
03c64     04 4A 06 F6 | 	mov	arg01, #4
03c68     00 09 B0 FD | 	call	#__system___gc_alloc_managed
03c6c     12 5D 0A F6 | 	mov	local05, result1 wz
03c70     18 00 90 5D |  if_ne	jmp	#LR__0159
03c74     03 4B 02 F6 | 	mov	arg01, abortchain
03c78     07 4C 06 F6 | 	mov	arg02, #7
03c7c     01 4E 06 F6 | 	mov	arg03, #1
03c80     F0 00 A0 FD | 	call	#__longjmp
03c84     01 24 66 F6 | 	neg	result1, #1
03c88     40 00 90 FD | 	jmp	#LR__0162
03c8c                 | LR__0159
03c8c     2E 55 62 FC | 	wrlong	local01, local05
03c90     08 4D 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
03c94     2E 4B 02 F6 | 	mov	arg01, local05
03c98     B0 FD BF FD | 	call	#__system___make_methodptr
03c9c     18 5A 06 F1 | 	add	local04, #24
03ca0     2D 25 62 FC | 	wrlong	result1, local04
03ca4     18 5A 86 F1 | 	sub	local04, #24
03ca8     0C 00 90 FD | 	jmp	#LR__0161
03cac                 | LR__0160
03cac     18 5A 06 F1 | 	add	local04, #24
03cb0     2D 55 62 FC | 	wrlong	local01, local04
03cb4     18 5A 86 F1 | 	sub	local04, #24
03cb8                 | LR__0161
03cb8     1C 5A 06 F1 | 	add	local04, #28
03cbc     2D 57 62 FC | 	wrlong	local02, local04
03cc0     04 5A 06 F1 | 	add	local04, #4
03cc4     2D 59 62 FC | 	wrlong	local03, local04
03cc8     00 24 06 F6 | 	mov	result1, #0
03ccc                 | LR__0162
03ccc     AF F0 03 F6 | 	mov	ptra, fp
03cd0     BF 00 A0 FD | 	call	#popregs_
03cd4                 | __system___basic_open_ret
03cd4     2D 00 64 FD | 	ret
03cd8                 | 
03cd8                 | __system___basic_print_char
03cd8     05 5A 05 F6 | 	mov	COUNT_, #5
03cdc     B0 00 A0 FD | 	call	#pushregs_
03ce0     26 55 02 F6 | 	mov	local01, arg02
03ce4     4C 12 B0 FD | 	call	#__system___gettxfunc
03ce8     12 57 0A F6 | 	mov	local02, result1 wz
03cec     00 24 06 A6 |  if_e	mov	result1, #0
03cf0     24 00 90 AD |  if_e	jmp	#LR__0163
03cf4     2B 59 02 FB | 	rdlong	local03, local02
03cf8     04 56 06 F1 | 	add	local02, #4
03cfc     2B 5B 02 FB | 	rdlong	local04, local02
03d00     2A 4B 02 F6 | 	mov	arg01, local01
03d04     07 5D 02 F6 | 	mov	local05, objptr
03d08     2C 0F 02 F6 | 	mov	objptr, local03
03d0c     2D 5A 62 FD | 	call	local04
03d10     2E 0F 02 F6 | 	mov	objptr, local05
03d14     01 24 06 F6 | 	mov	result1, #1
03d18                 | LR__0163
03d18     AF F0 03 F6 | 	mov	ptra, fp
03d1c     BF 00 A0 FD | 	call	#popregs_
03d20                 | __system___basic_print_char_ret
03d20     2D 00 64 FD | 	ret
03d24                 | 
03d24                 | __system___basic_print_string
03d24     03 5A 05 F6 | 	mov	COUNT_, #3
03d28     B0 00 A0 FD | 	call	#pushregs_
03d2c     26 55 02 F6 | 	mov	local01, arg02
03d30     27 57 02 F6 | 	mov	local02, arg03
03d34     FC 11 B0 FD | 	call	#__system___gettxfunc
03d38     12 59 0A F6 | 	mov	local03, result1 wz
03d3c     00 24 06 A6 |  if_e	mov	result1, #0
03d40     1C 00 90 AD |  if_e	jmp	#LR__0164
03d44     00 54 0E F2 | 	cmp	local01, #0 wz
03d48     00 24 06 A6 |  if_e	mov	result1, #0
03d4c     10 00 90 AD |  if_e	jmp	#LR__0164
03d50     2C 4B 02 F6 | 	mov	arg01, local03
03d54     2B 4D 02 F6 | 	mov	arg02, local02
03d58     2A 4F 02 F6 | 	mov	arg03, local01
03d5c     F8 00 B0 FD | 	call	#__system___fmtstr
03d60                 | LR__0164
03d60     AF F0 03 F6 | 	mov	ptra, fp
03d64     BF 00 A0 FD | 	call	#popregs_
03d68                 | __system___basic_print_string_ret
03d68     2D 00 64 FD | 	ret
03d6c                 | 
03d6c                 | __system___basic_print_integer
03d6c     04 5A 05 F6 | 	mov	COUNT_, #4
03d70     B0 00 A0 FD | 	call	#pushregs_
03d74     26 55 02 F6 | 	mov	local01, arg02
03d78     27 57 02 F6 | 	mov	local02, arg03
03d7c     28 59 02 F6 | 	mov	local03, arg04
03d80     B0 11 B0 FD | 	call	#__system___gettxfunc
03d84     12 5B 0A F6 | 	mov	local04, result1 wz
03d88     00 24 06 A6 |  if_e	mov	result1, #0
03d8c     14 00 90 AD |  if_e	jmp	#LR__0165
03d90     2D 4B 02 F6 | 	mov	arg01, local04
03d94     2B 4D 02 F6 | 	mov	arg02, local02
03d98     2A 4F 02 F6 | 	mov	arg03, local01
03d9c     2C 51 02 F6 | 	mov	arg04, local03
03da0     A8 01 B0 FD | 	call	#__system___fmtnum
03da4                 | LR__0165
03da4     AF F0 03 F6 | 	mov	ptra, fp
03da8     BF 00 A0 FD | 	call	#popregs_
03dac                 | __system___basic_print_integer_ret
03dac     2D 00 64 FD | 	ret
03db0                 | 
03db0                 | __system___basic_print_unsigned
03db0     04 5A 05 F6 | 	mov	COUNT_, #4
03db4     B0 00 A0 FD | 	call	#pushregs_
03db8     26 55 02 F6 | 	mov	local01, arg02
03dbc     27 57 02 F6 | 	mov	local02, arg03
03dc0     28 59 02 F6 | 	mov	local03, arg04
03dc4     6C 11 B0 FD | 	call	#__system___gettxfunc
03dc8     12 5B 0A F6 | 	mov	local04, result1 wz
03dcc     00 24 06 A6 |  if_e	mov	result1, #0
03dd0     18 00 90 AD |  if_e	jmp	#LR__0166
03dd4     3A 56 26 F4 | 	bith	local02, #58
03dd8     2D 4B 02 F6 | 	mov	arg01, local04
03ddc     2B 4D 02 F6 | 	mov	arg02, local02
03de0     2A 4F 02 F6 | 	mov	arg03, local01
03de4     2C 51 02 F6 | 	mov	arg04, local03
03de8     60 01 B0 FD | 	call	#__system___fmtnum
03dec                 | LR__0166
03dec     AF F0 03 F6 | 	mov	ptra, fp
03df0     BF 00 A0 FD | 	call	#popregs_
03df4                 | __system___basic_print_unsigned_ret
03df4     2D 00 64 FD | 	ret
03df8                 | 
03df8                 | __system___fmtchar
03df8     00 5A 05 F6 | 	mov	COUNT_, #0
03dfc     B0 00 A0 FD | 	call	#pushregs_
03e00     18 F0 07 F1 | 	add	ptra, #24
03e04     04 5E 05 F1 | 	add	fp, #4
03e08     AF 4A 62 FC | 	wrlong	arg01, fp
03e0c     04 5E 05 F1 | 	add	fp, #4
03e10     AF 4C 62 FC | 	wrlong	arg02, fp
03e14     04 5E 05 F1 | 	add	fp, #4
03e18     AF 4E 62 FC | 	wrlong	arg03, fp
03e1c     04 5E 05 F1 | 	add	fp, #4
03e20     AF 4E 42 FC | 	wrbyte	arg03, fp
03e24     01 5E 05 F1 | 	add	fp, #1
03e28     AF 00 48 FC | 	wrbyte	#0, fp
03e2c     01 5E 85 F1 | 	sub	fp, #1
03e30     AF 4E 02 F6 | 	mov	arg03, fp
03e34     0C 5E 85 F1 | 	sub	fp, #12
03e38     AF 4A 02 FB | 	rdlong	arg01, fp
03e3c     04 5E 05 F1 | 	add	fp, #4
03e40     AF 4C 02 FB | 	rdlong	arg02, fp
03e44     08 5E 85 F1 | 	sub	fp, #8
03e48     0C 00 B0 FD | 	call	#__system___fmtstr
03e4c     AF F0 03 F6 | 	mov	ptra, fp
03e50     BF 00 A0 FD | 	call	#popregs_
03e54                 | __system___fmtchar_ret
03e54     2D 00 64 FD | 	ret
03e58                 | 
03e58                 | __system___fmtstr
03e58     0E 5A 05 F6 | 	mov	COUNT_, #14
03e5c     B0 00 A0 FD | 	call	#pushregs_
03e60     25 55 02 F6 | 	mov	local01, arg01
03e64     26 57 02 F6 | 	mov	local02, arg02
03e68     27 59 02 F6 | 	mov	local03, arg03
03e6c     2B 5B 02 F6 | 	mov	local04, local02
03e70     FF 5A 06 F5 | 	and	local04, #255
03e74     2C 4B 02 F6 | 	mov	arg01, local03
03e78     00 5C 06 F6 | 	mov	local05, #0
03e7c     90 C1 9F FE | 	loc	pa,	#(@LR__0168-@LR__0167)
03e80     93 00 A0 FD | 	call	#FCACHE_LOAD_
03e84                 | LR__0167
03e84     25 5F CA FA | 	rdbyte	local06, arg01 wz
03e88     01 5C 06 51 |  if_ne	add	local05, #1
03e8c     01 4A 06 51 |  if_ne	add	arg01, #1
03e90     F0 FF 9F 5D |  if_ne	jmp	#LR__0167
03e94                 | LR__0168
03e94     2E 25 02 F6 | 	mov	result1, local05
03e98     12 61 02 F6 | 	mov	local07, result1
03e9c     00 5A 0E F2 | 	cmp	local04, #0 wz
03ea0     04 00 90 AD |  if_e	jmp	#LR__0169
03ea4     2D 61 7A F3 | 	fles	local07, local04 wcz
03ea8                 | LR__0169
03ea8     2A 4B 02 F6 | 	mov	arg01, local01
03eac     2B 4D 02 F6 | 	mov	arg02, local02
03eb0     30 4F 02 F6 | 	mov	arg03, local07
03eb4     02 50 06 F6 | 	mov	arg04, #2
03eb8     2C 0F B0 FD | 	call	#__system___fmtpad
03ebc     12 63 02 F6 | 	mov	local08, result1
03ec0     00 62 5E F2 | 	cmps	local08, #0 wcz
03ec4     31 25 02 C6 |  if_b	mov	result1, local08
03ec8     74 00 90 CD |  if_b	jmp	#LR__0172
03ecc     00 60 5E F2 | 	cmps	local07, #0 wcz
03ed0     44 00 90 ED |  if_be	jmp	#LR__0171
03ed4     30 65 02 F6 | 	mov	local09, local07
03ed8                 | LR__0170
03ed8     2A 67 02 F6 | 	mov	local10, local01
03edc     33 69 02 FB | 	rdlong	local11, local10
03ee0     04 66 06 F1 | 	add	local10, #4
03ee4     33 6B 02 FB | 	rdlong	local12, local10
03ee8     2C 4B C2 FA | 	rdbyte	arg01, local03
03eec     07 6D 02 F6 | 	mov	local13, objptr
03ef0     34 0F 02 F6 | 	mov	objptr, local11
03ef4     01 58 06 F1 | 	add	local03, #1
03ef8     2D 6A 62 FD | 	call	local12
03efc     36 0F 02 F6 | 	mov	objptr, local13
03f00     12 6F 02 F6 | 	mov	local14, result1
03f04     00 6E 5E F2 | 	cmps	local14, #0 wcz
03f08     37 25 02 C6 |  if_b	mov	result1, local14
03f0c     30 00 90 CD |  if_b	jmp	#LR__0172
03f10     37 63 02 F1 | 	add	local08, local14
03f14     F0 65 6E FB | 	djnz	local09, #LR__0170
03f18                 | LR__0171
03f18     2A 4B 02 F6 | 	mov	arg01, local01
03f1c     2B 4D 02 F6 | 	mov	arg02, local02
03f20     30 4F 02 F6 | 	mov	arg03, local07
03f24     01 50 06 F6 | 	mov	arg04, #1
03f28     BC 0E B0 FD | 	call	#__system___fmtpad
03f2c     12 6F 02 F6 | 	mov	local14, result1
03f30     00 6E 5E F2 | 	cmps	local14, #0 wcz
03f34     37 25 02 C6 |  if_b	mov	result1, local14
03f38     37 63 02 31 |  if_ae	add	local08, local14
03f3c     31 25 02 36 |  if_ae	mov	result1, local08
03f40                 | LR__0172
03f40     AF F0 03 F6 | 	mov	ptra, fp
03f44     BF 00 A0 FD | 	call	#popregs_
03f48                 | __system___fmtstr_ret
03f48     2D 00 64 FD | 	ret
03f4c                 | 
03f4c                 | __system___fmtnum
03f4c     07 5A 05 F6 | 	mov	COUNT_, #7
03f50     B0 00 A0 FD | 	call	#pushregs_
03f54     78 F0 07 F1 | 	add	ptra, #120
03f58     04 5E 05 F1 | 	add	fp, #4
03f5c     AF 4A 62 FC | 	wrlong	arg01, fp
03f60     04 5E 05 F1 | 	add	fp, #4
03f64     AF 4C 62 FC | 	wrlong	arg02, fp
03f68     04 5E 05 F1 | 	add	fp, #4
03f6c     AF 4E 62 FC | 	wrlong	arg03, fp
03f70     04 5E 05 F1 | 	add	fp, #4
03f74     AF 50 62 FC | 	wrlong	arg04, fp
03f78     04 5E 05 F1 | 	add	fp, #4
03f7c     AF 54 02 F6 | 	mov	local01, fp
03f80     44 5E 05 F1 | 	add	fp, #68
03f84     AF 54 62 FC | 	wrlong	local01, fp
03f88     04 5E 05 F1 | 	add	fp, #4
03f8c     AF 00 68 FC | 	wrlong	#0, fp
03f90     54 5E 85 F1 | 	sub	fp, #84
03f94     AF 54 02 FB | 	rdlong	local01, fp
03f98     10 54 46 F0 | 	shr	local01, #16
03f9c     3F 54 06 F5 | 	and	local01, #63
03fa0     58 5E 05 F1 | 	add	fp, #88
03fa4     AF 54 62 FC | 	wrlong	local01, fp
03fa8     58 5E 85 F1 | 	sub	fp, #88
03fac     AF 54 02 FB | 	rdlong	local01, fp
03fb0     FF 54 06 F5 | 	and	local01, #255
03fb4     5C 5E 05 F1 | 	add	fp, #92
03fb8     AF 54 62 FC | 	wrlong	local01, fp
03fbc     5C 5E 85 F1 | 	sub	fp, #92
03fc0     AF 54 02 FB | 	rdlong	local01, fp
03fc4     1A 54 46 F0 | 	shr	local01, #26
03fc8     03 54 06 F5 | 	and	local01, #3
03fcc     60 5E 05 F1 | 	add	fp, #96
03fd0     AF 54 62 FC | 	wrlong	local01, fp
03fd4     08 5E 85 F1 | 	sub	fp, #8
03fd8     AF 54 02 FB | 	rdlong	local01, fp
03fdc     60 5E 85 F1 | 	sub	fp, #96
03fe0     00 54 5E F2 | 	cmps	local01, #0 wcz
03fe4     14 00 90 ED |  if_be	jmp	#LR__0173
03fe8     60 5E 05 F1 | 	add	fp, #96
03fec     AF 54 02 FB | 	rdlong	local01, fp
03ff0     01 54 86 F1 | 	sub	local01, #1
03ff4     AF 54 62 FC | 	wrlong	local01, fp
03ff8     60 5E 85 F1 | 	sub	fp, #96
03ffc                 | LR__0173
03ffc     64 5E 05 F1 | 	add	fp, #100
04000     AF 56 02 FB | 	rdlong	local02, fp
04004     64 5E 85 F1 | 	sub	fp, #100
04008     40 56 5E F2 | 	cmps	local02, #64 wcz
0400c     14 00 90 1D |  if_a	jmp	#LR__0174
04010     64 5E 05 F1 | 	add	fp, #100
04014     AF 58 02 FB | 	rdlong	local03, fp
04018     64 5E 85 F1 | 	sub	fp, #100
0401c     2C 5B 0A F6 | 	mov	local04, local03 wz
04020     0C 00 90 5D |  if_ne	jmp	#LR__0175
04024                 | LR__0174
04024     64 5E 05 F1 | 	add	fp, #100
04028     AF 80 68 FC | 	wrlong	#64, fp
0402c     64 5E 85 F1 | 	sub	fp, #100
04030                 | LR__0175
04030     68 5E 05 F1 | 	add	fp, #104
04034     AF 54 02 FB | 	rdlong	local01, fp
04038     68 5E 85 F1 | 	sub	fp, #104
0403c     03 54 0E F2 | 	cmp	local01, #3 wz
04040     10 00 90 5D |  if_ne	jmp	#LR__0176
04044     68 5E 05 F1 | 	add	fp, #104
04048     AF 00 68 FC | 	wrlong	#0, fp
0404c     68 5E 85 F1 | 	sub	fp, #104
04050     30 00 90 FD | 	jmp	#LR__0178
04054                 | LR__0176
04054     0C 5E 05 F1 | 	add	fp, #12
04058     AF 54 02 FB | 	rdlong	local01, fp
0405c     0C 5E 85 F1 | 	sub	fp, #12
04060     00 54 5E F2 | 	cmps	local01, #0 wcz
04064     1C 00 90 3D |  if_ae	jmp	#LR__0177
04068     68 5E 05 F1 | 	add	fp, #104
0406c     AF 08 68 FC | 	wrlong	#4, fp
04070     5C 5E 85 F1 | 	sub	fp, #92
04074     AF 54 02 FB | 	rdlong	local01, fp
04078     2A 55 62 F6 | 	neg	local01, local01
0407c     AF 54 62 FC | 	wrlong	local01, fp
04080     0C 5E 85 F1 | 	sub	fp, #12
04084                 | LR__0177
04084                 | LR__0178
04084     68 5E 05 F1 | 	add	fp, #104
04088     AF 54 0A FB | 	rdlong	local01, fp wz
0408c     68 5E 85 F1 | 	sub	fp, #104
04090     EC 00 90 AD |  if_e	jmp	#LR__0185
04094     5C 5E 05 F1 | 	add	fp, #92
04098     AF 5A 02 FB | 	rdlong	local04, fp
0409c     01 5A 06 F1 | 	add	local04, #1
040a0     AF 5A 62 FC | 	wrlong	local04, fp
040a4     04 5E 05 F1 | 	add	fp, #4
040a8     AF 54 02 FB | 	rdlong	local01, fp
040ac     04 5E 05 F1 | 	add	fp, #4
040b0     AF 5A 02 FB | 	rdlong	local04, fp
040b4     64 5E 85 F1 | 	sub	fp, #100
040b8     2D 55 0A F2 | 	cmp	local01, local04 wz
040bc     3C 00 90 5D |  if_ne	jmp	#LR__0180
040c0     60 5E 05 F1 | 	add	fp, #96
040c4     AF 5A 02 FB | 	rdlong	local04, fp
040c8     01 5A 86 F1 | 	sub	local04, #1
040cc     AF 5A 62 FC | 	wrlong	local04, fp
040d0     AF 54 0A FB | 	rdlong	local01, fp wz
040d4     60 5E 85 F1 | 	sub	fp, #96
040d8     20 00 90 5D |  if_ne	jmp	#LR__0179
040dc     04 5E 05 F1 | 	add	fp, #4
040e0     AF 4A 02 FB | 	rdlong	arg01, fp
040e4     04 5E 05 F1 | 	add	fp, #4
040e8     AF 4C 02 FB | 	rdlong	arg02, fp
040ec     08 5E 85 F1 | 	sub	fp, #8
040f0     23 4E 06 F6 | 	mov	arg03, #35
040f4     00 FD BF FD | 	call	#__system___fmtchar
040f8     70 01 90 FD | 	jmp	#LR__0190
040fc                 | LR__0179
040fc                 | LR__0180
040fc     68 5E 05 F1 | 	add	fp, #104
04100     AF 54 02 FB | 	rdlong	local01, fp
04104     68 5E 85 F1 | 	sub	fp, #104
04108     02 54 0E F2 | 	cmp	local01, #2 wz
0410c     20 00 90 5D |  if_ne	jmp	#LR__0181
04110     58 5E 05 F1 | 	add	fp, #88
04114     AF 54 02 FB | 	rdlong	local01, fp
04118     2A 5B 02 F6 | 	mov	local04, local01
0411c     01 5A 06 F1 | 	add	local04, #1
04120     AF 5A 62 FC | 	wrlong	local04, fp
04124     58 5E 85 F1 | 	sub	fp, #88
04128     2A 41 48 FC | 	wrbyte	#32, local01
0412c     50 00 90 FD | 	jmp	#LR__0184
04130                 | LR__0181
04130     68 5E 05 F1 | 	add	fp, #104
04134     AF 54 02 FB | 	rdlong	local01, fp
04138     68 5E 85 F1 | 	sub	fp, #104
0413c     04 54 0E F2 | 	cmp	local01, #4 wz
04140     20 00 90 5D |  if_ne	jmp	#LR__0182
04144     58 5E 05 F1 | 	add	fp, #88
04148     AF 54 02 FB | 	rdlong	local01, fp
0414c     2A 5B 02 F6 | 	mov	local04, local01
04150     01 5A 06 F1 | 	add	local04, #1
04154     AF 5A 62 FC | 	wrlong	local04, fp
04158     58 5E 85 F1 | 	sub	fp, #88
0415c     2A 5B 48 FC | 	wrbyte	#45, local01
04160     1C 00 90 FD | 	jmp	#LR__0183
04164                 | LR__0182
04164     58 5E 05 F1 | 	add	fp, #88
04168     AF 54 02 FB | 	rdlong	local01, fp
0416c     2A 5B 02 F6 | 	mov	local04, local01
04170     01 5A 06 F1 | 	add	local04, #1
04174     AF 5A 62 FC | 	wrlong	local04, fp
04178     58 5E 85 F1 | 	sub	fp, #88
0417c     2A 57 48 FC | 	wrbyte	#43, local01
04180                 | LR__0183
04180                 | LR__0184
04180                 | LR__0185
04180     58 5E 05 F1 | 	add	fp, #88
04184     AF 4A 02 FB | 	rdlong	arg01, fp
04188     4C 5E 85 F1 | 	sub	fp, #76
0418c     AF 4C 02 FB | 	rdlong	arg02, fp
04190     04 5E 05 F1 | 	add	fp, #4
04194     AF 4E 02 FB | 	rdlong	arg03, fp
04198     50 5E 05 F1 | 	add	fp, #80
0419c     AF 50 02 FB | 	rdlong	arg04, fp
041a0     00 5C 06 F6 | 	mov	local05, #0
041a4     58 5E 85 F1 | 	sub	fp, #88
041a8     AF 5E 02 FB | 	rdlong	local06, fp
041ac     08 5E 85 F1 | 	sub	fp, #8
041b0     1D 5E 2E F4 | 	testbn	local06, #29 wz
041b4     01 5C 06 56 |  if_ne	mov	local05, #1
041b8     2E 53 02 F6 | 	mov	arg05, local05
041bc     E8 0C B0 FD | 	call	#__system___uitoa
041c0     12 61 02 F6 | 	mov	local07, result1
041c4     5C 5E 05 F1 | 	add	fp, #92
041c8     AF 54 02 FB | 	rdlong	local01, fp
041cc     30 55 02 F1 | 	add	local01, local07
041d0     AF 54 62 FC | 	wrlong	local01, fp
041d4     08 5E 05 F1 | 	add	fp, #8
041d8     AF 5A 02 FB | 	rdlong	local04, fp
041dc     64 5E 85 F1 | 	sub	fp, #100
041e0     2D 55 5A F2 | 	cmps	local01, local04 wcz
041e4     64 00 90 ED |  if_be	jmp	#LR__0189
041e8     54 BE 9F FE | 	loc	pa,	#(@LR__0187-@LR__0186)
041ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
041f0                 | LR__0186
041f0     64 5E 05 F1 | 	add	fp, #100
041f4     AF 54 02 FB | 	rdlong	local01, fp
041f8     2A 5B 02 F6 | 	mov	local04, local01
041fc     01 5A 86 F1 | 	sub	local04, #1
04200     AF 5A 62 FC | 	wrlong	local04, fp
04204     64 5E 85 F1 | 	sub	fp, #100
04208     00 54 5E F2 | 	cmps	local01, #0 wcz
0420c     20 00 90 ED |  if_be	jmp	#LR__0188
04210     58 5E 05 F1 | 	add	fp, #88
04214     AF 54 02 FB | 	rdlong	local01, fp
04218     2A 5B 02 F6 | 	mov	local04, local01
0421c     01 5A 06 F1 | 	add	local04, #1
04220     AF 5A 62 FC | 	wrlong	local04, fp
04224     58 5E 85 F1 | 	sub	fp, #88
04228     2A 47 48 FC | 	wrbyte	#35, local01
0422c     C0 FF 9F FD | 	jmp	#LR__0186
04230                 | LR__0187
04230                 | LR__0188
04230     58 5E 05 F1 | 	add	fp, #88
04234     AF 54 02 FB | 	rdlong	local01, fp
04238     2A 5B 02 F6 | 	mov	local04, local01
0423c     01 5A 06 F1 | 	add	local04, #1
04240     AF 5A 62 FC | 	wrlong	local04, fp
04244     58 5E 85 F1 | 	sub	fp, #88
04248     2A 01 48 FC | 	wrbyte	#0, local01
0424c                 | LR__0189
0424c     14 5E 05 F1 | 	add	fp, #20
04250     AF 4E 02 F6 | 	mov	arg03, fp
04254     10 5E 85 F1 | 	sub	fp, #16
04258     AF 4A 02 FB | 	rdlong	arg01, fp
0425c     04 5E 05 F1 | 	add	fp, #4
04260     AF 4C 02 FB | 	rdlong	arg02, fp
04264     08 5E 85 F1 | 	sub	fp, #8
04268     EC FB BF FD | 	call	#__system___fmtstr
0426c                 | LR__0190
0426c     AF F0 03 F6 | 	mov	ptra, fp
04270     BF 00 A0 FD | 	call	#popregs_
04274                 | __system___fmtnum_ret
04274     2D 00 64 FD | 	ret
04278                 | 
04278                 | __system___gc_ptrs
04278     0A 5A 05 F6 | 	mov	COUNT_, #10
0427c     B0 00 A0 FD | 	call	#pushregs_
04280     02 55 02 F6 | 	mov	local01, __heap_ptr
04284     2A 57 02 F6 | 	mov	local02, local01
04288     07 00 00 FF 
0428c     F8 57 06 F1 | 	add	local02, ##4088
04290     2A 59 0A FB | 	rdlong	local03, local01 wz
04294     74 00 90 5D |  if_ne	jmp	#LR__0191
04298     2B 5B 02 F6 | 	mov	local04, local02
0429c     2A 5B 82 F1 | 	sub	local04, local01
042a0     2A 03 58 FC | 	wrword	#1, local01
042a4     2A 5D 02 F6 | 	mov	local05, local01
042a8     02 5C 06 F1 | 	add	local05, #2
042ac     36 00 80 FF 
042b0     2E 21 59 FC | 	wrword	##27792, local05
042b4     2A 5F 02 F6 | 	mov	local06, local01
042b8     04 5E 06 F1 | 	add	local06, #4
042bc     2F 01 58 FC | 	wrword	#0, local06
042c0     2A 61 02 F6 | 	mov	local07, local01
042c4     06 60 06 F1 | 	add	local07, #6
042c8     30 03 58 FC | 	wrword	#1, local07
042cc     10 54 06 F1 | 	add	local01, #16
042d0     2D 59 52 F6 | 	abs	local03, local04 wc
042d4     04 58 46 F0 | 	shr	local03, #4
042d8     2C 59 62 C6 |  if_b	neg	local03, local03
042dc     2A 59 52 FC | 	wrword	local03, local01
042e0     2A 63 02 F6 | 	mov	local08, local01
042e4     02 62 06 F1 | 	add	local08, #2
042e8     36 00 80 FF 
042ec     31 1F 59 FC | 	wrword	##27791, local08
042f0     2A 65 02 F6 | 	mov	local09, local01
042f4     04 64 06 F1 | 	add	local09, #4
042f8     32 01 58 FC | 	wrword	#0, local09
042fc     2A 67 02 F6 | 	mov	local10, local01
04300     06 66 06 F1 | 	add	local10, #6
04304     33 01 58 FC | 	wrword	#0, local10
04308     10 54 86 F1 | 	sub	local01, #16
0430c                 | LR__0191
0430c     2B 27 02 F6 | 	mov	result2, local02
04310     2A 25 02 F6 | 	mov	result1, local01
04314     AF F0 03 F6 | 	mov	ptra, fp
04318     BF 00 A0 FD | 	call	#popregs_
0431c                 | __system___gc_ptrs_ret
0431c     2D 00 64 FD | 	ret
04320                 | 
04320                 | __system___gc_nextBlockPtr
04320     02 5A 05 F6 | 	mov	COUNT_, #2
04324     B0 00 A0 FD | 	call	#pushregs_
04328     25 55 02 F6 | 	mov	local01, arg01
0432c     2A 57 EA FA | 	rdword	local02, local01 wz
04330     10 00 90 5D |  if_ne	jmp	#LR__0192
04334     2D 00 00 FF 
04338     E4 4A 06 F6 | 	mov	arg01, ##@LR__0304
0433c     F8 01 B0 FD | 	call	#__system___gc_errmsg
04340     0C 00 90 FD | 	jmp	#LR__0193
04344                 | LR__0192
04344     04 56 66 F0 | 	shl	local02, #4
04348     2A 25 02 F6 | 	mov	result1, local01
0434c     2B 25 02 F1 | 	add	result1, local02
04350                 | LR__0193
04350     AF F0 03 F6 | 	mov	ptra, fp
04354     BF 00 A0 FD | 	call	#popregs_
04358                 | __system___gc_nextBlockPtr_ret
04358     2D 00 64 FD | 	ret
0435c                 | 
0435c                 | __system___gc_tryalloc
0435c     1B 5A 05 F6 | 	mov	COUNT_, #27
04360     B0 00 A0 FD | 	call	#pushregs_
04364     25 55 02 F6 | 	mov	local01, arg01
04368     26 57 02 F6 | 	mov	local02, arg02
0436c     08 FF BF FD | 	call	#__system___gc_ptrs
04370     12 59 02 F6 | 	mov	local03, result1
04374     13 5B 02 F6 | 	mov	local04, result2
04378     2C 5D 02 F6 | 	mov	local05, local03
0437c     00 5E 06 F6 | 	mov	local06, #0
04380     D4 BC 9F FE | 	loc	pa,	#(@LR__0195-@LR__0194)
04384     93 00 A0 FD | 	call	#FCACHE_LOAD_
04388                 | LR__0194
04388     2E 61 02 F6 | 	mov	local07, local05
0438c     06 5C 06 F1 | 	add	local05, #6
04390     2E 63 02 F6 | 	mov	local08, local05
04394     2C 65 02 F6 | 	mov	local09, local03
04398     31 67 E2 FA | 	rdword	local10, local08
0439c     32 4B 02 F6 | 	mov	arg01, local09
043a0     33 4D 0A F6 | 	mov	arg02, local10 wz
043a4     00 24 06 A6 |  if_e	mov	result1, #0
043a8     04 4C 66 50 |  if_ne	shl	arg02, #4
043ac     26 4B 02 51 |  if_ne	add	arg01, arg02
043b0     25 25 02 56 |  if_ne	mov	result1, arg01
043b4     12 69 02 F6 | 	mov	local11, result1
043b8     34 5D 0A F6 | 	mov	local05, local11 wz
043bc     2E 65 02 56 |  if_ne	mov	local09, local05
043c0     32 6B 02 56 |  if_ne	mov	local12, local09
043c4     35 5F E2 5A |  if_ne	rdword	local06, local12
043c8     00 5C 0E F2 | 	cmp	local05, #0 wz
043cc     10 00 90 AD |  if_e	jmp	#LR__0196
043d0     2D 5D 5A F2 | 	cmps	local05, local04 wcz
043d4     08 00 90 3D |  if_ae	jmp	#LR__0196
043d8     2F 55 5A F2 | 	cmps	local01, local06 wcz
043dc     A8 FF 9F 1D |  if_a	jmp	#LR__0194
043e0                 | LR__0195
043e0                 | LR__0196
043e0     00 5C 0E F2 | 	cmp	local05, #0 wz
043e4     2E 25 02 A6 |  if_e	mov	result1, local05
043e8     40 01 90 AD |  if_e	jmp	#LR__0199
043ec     2E 6D 02 F6 | 	mov	local13, local05
043f0     06 6C 06 F1 | 	add	local13, #6
043f4     36 6F E2 FA | 	rdword	local14, local13
043f8     2F 55 5A F2 | 	cmps	local01, local06 wcz
043fc     CC 00 90 3D |  if_ae	jmp	#LR__0198
04400     2E 71 02 F6 | 	mov	local15, local05
04404     38 55 52 FC | 	wrword	local01, local15
04408     2A 73 02 F6 | 	mov	local16, local01
0440c     04 72 66 F0 | 	shl	local16, #4
04410     2E 75 02 F6 | 	mov	local17, local05
04414     39 75 02 F1 | 	add	local17, local16
04418     2F 77 02 F6 | 	mov	local18, local06
0441c     2A 77 82 F1 | 	sub	local18, local01
04420     3A 79 02 F6 | 	mov	local19, local17
04424     3C 77 52 FC | 	wrword	local18, local19
04428     3A 7B 02 F6 | 	mov	local20, local17
0442c     02 7A 06 F1 | 	add	local20, #2
04430     36 00 80 FF 
04434     3D 1F 59 FC | 	wrword	##27791, local20
04438     3A 7D 02 F6 | 	mov	local21, local17
0443c     04 7C 06 F1 | 	add	local21, #4
04440     2E 4D 0A F6 | 	mov	arg02, local05 wz
04444     00 24 06 A6 |  if_e	mov	result1, #0
04448     2C 4D 82 51 |  if_ne	sub	arg02, local03
0444c     04 4C 46 50 |  if_ne	shr	arg02, #4
04450     26 25 02 56 |  if_ne	mov	result1, arg02
04454     3E 25 52 FC | 	wrword	result1, local21
04458     3A 7F 02 F6 | 	mov	local22, local17
0445c     36 65 E2 FA | 	rdword	local09, local13
04460     06 7E 06 F1 | 	add	local22, #6
04464     3F 65 52 FC | 	wrword	local09, local22
04468     3A 81 02 F6 | 	mov	local23, local17
0446c     40 4D 0A F6 | 	mov	arg02, local23 wz
04470     00 24 06 A6 |  if_e	mov	result1, #0
04474     2C 4D 82 51 |  if_ne	sub	arg02, local03
04478     04 4C 46 50 |  if_ne	shr	arg02, #4
0447c     26 25 02 56 |  if_ne	mov	result1, arg02
04480     12 6F 02 F6 | 	mov	local14, result1
04484     3A 4B 02 F6 | 	mov	arg01, local17
04488     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
0448c     12 83 0A F6 | 	mov	local24, result1 wz
04490     38 00 90 AD |  if_e	jmp	#LR__0197
04494     2D 83 5A F2 | 	cmps	local24, local04 wcz
04498     30 00 90 3D |  if_ae	jmp	#LR__0197
0449c     41 85 02 F6 | 	mov	local25, local24
044a0     04 84 06 F1 | 	add	local25, #4
044a4     2C 65 02 F6 | 	mov	local09, local03
044a8     40 67 02 F6 | 	mov	local10, local23
044ac     32 4B 02 F6 | 	mov	arg01, local09
044b0     33 4D 0A F6 | 	mov	arg02, local10 wz
044b4     00 24 06 A6 |  if_e	mov	result1, #0
044b8     25 4D 82 51 |  if_ne	sub	arg02, arg01
044bc     04 4C 46 50 |  if_ne	shr	arg02, #4
044c0     26 25 02 56 |  if_ne	mov	result1, arg02
044c4     12 69 02 F6 | 	mov	local11, result1
044c8     42 69 52 FC | 	wrword	local11, local25
044cc                 | LR__0197
044cc                 | LR__0198
044cc     06 60 06 F1 | 	add	local07, #6
044d0     30 6F 52 FC | 	wrword	local14, local07
044d4     36 00 00 FF 
044d8     80 64 06 F6 | 	mov	local09, ##27776
044dc     2B 65 42 F5 | 	or	local09, local02
044e0     2E 87 02 F6 | 	mov	local26, local05
044e4     02 86 06 F1 | 	add	local26, #2
044e8     01 24 62 FD | 	cogid	result1
044ec     12 65 42 F5 | 	or	local09, result1
044f0     43 65 52 FC | 	wrword	local09, local26
044f4     2C 89 02 F6 | 	mov	local27, local03
044f8     08 88 06 F1 | 	add	local27, #8
044fc     44 65 E2 FA | 	rdword	local09, local27
04500     36 65 52 FC | 	wrword	local09, local13
04504     2E 4D 0A F6 | 	mov	arg02, local05 wz
04508     00 24 06 A6 |  if_e	mov	result1, #0
0450c     2C 4D 82 51 |  if_ne	sub	arg02, local03
04510     04 4C 46 50 |  if_ne	shr	arg02, #4
04514     26 25 02 56 |  if_ne	mov	result1, arg02
04518     44 25 52 FC | 	wrword	result1, local27
0451c     08 5C 06 F1 | 	add	local05, #8
04520     2E 25 02 F6 | 	mov	result1, local05
04524     00 C0 31 FF 
04528     00 24 46 F5 | 	or	result1, ##1669332992
0452c                 | LR__0199
0452c     AF F0 03 F6 | 	mov	ptra, fp
04530     BF 00 A0 FD | 	call	#popregs_
04534                 | __system___gc_tryalloc_ret
04534     2D 00 64 FD | 	ret
04538                 | 
04538                 | __system___gc_errmsg
04538     02 5A 05 F6 | 	mov	COUNT_, #2
0453c     B0 00 A0 FD | 	call	#pushregs_
04540     25 55 02 F6 | 	mov	local01, arg01
04544                 | LR__0200
04544     2A 57 CA FA | 	rdbyte	local02, local01 wz
04548     01 54 06 F1 | 	add	local01, #1
0454c     0C 00 90 AD |  if_e	jmp	#LR__0201
04550     2B 4B 02 F6 | 	mov	arg01, local02
04554     6C F5 BF FD | 	call	#__system___tx
04558     E8 FF 9F FD | 	jmp	#LR__0200
0455c                 | LR__0201
0455c     00 24 06 F6 | 	mov	result1, #0
04560     AF F0 03 F6 | 	mov	ptra, fp
04564     BF 00 A0 FD | 	call	#popregs_
04568                 | __system___gc_errmsg_ret
04568     2D 00 64 FD | 	ret
0456c                 | 
0456c                 | __system___gc_alloc_managed
0456c     02 5A 05 F6 | 	mov	COUNT_, #2
04570     B0 00 A0 FD | 	call	#pushregs_
04574     25 55 02 F6 | 	mov	local01, arg01
04578     00 4C 06 F6 | 	mov	arg02, #0
0457c     30 00 B0 FD | 	call	#__system___gc_doalloc
04580     12 57 0A F6 | 	mov	local02, result1 wz
04584     18 00 90 5D |  if_ne	jmp	#LR__0202
04588     00 54 5E F2 | 	cmps	local01, #0 wcz
0458c     10 00 90 ED |  if_be	jmp	#LR__0202
04590     2D 00 00 FF 
04594     00 4B 06 F6 | 	mov	arg01, ##@LR__0305
04598     9C FF BF FD | 	call	#__system___gc_errmsg
0459c     04 00 90 FD | 	jmp	#LR__0203
045a0                 | LR__0202
045a0     2B 25 02 F6 | 	mov	result1, local02
045a4                 | LR__0203
045a4     AF F0 03 F6 | 	mov	ptra, fp
045a8     BF 00 A0 FD | 	call	#popregs_
045ac                 | __system___gc_alloc_managed_ret
045ac     2D 00 64 FD | 	ret
045b0                 | 
045b0                 | __system___gc_doalloc
045b0     07 5A 05 F6 | 	mov	COUNT_, #7
045b4     B0 00 A0 FD | 	call	#pushregs_
045b8     25 55 0A F6 | 	mov	local01, arg01 wz
045bc     26 57 02 F6 | 	mov	local02, arg02
045c0     00 24 06 A6 |  if_e	mov	result1, #0
045c4     8C 00 90 AD |  if_e	jmp	#LR__0211
045c8     17 54 06 F1 | 	add	local01, #23
045cc     0F 54 26 F5 | 	andn	local01, #15
045d0     04 54 46 F0 | 	shr	local01, #4
045d4     14 14 06 F1 | 	add	ptr___system__dat__, #20
045d8     0A 59 02 F6 | 	mov	local03, ptr___system__dat__
045dc     2C 4B 02 F6 | 	mov	arg01, local03
045e0     14 14 86 F1 | 	sub	ptr___system__dat__, #20
045e4     A4 F4 BF FD | 	call	#__system___lockmem
045e8     2A 4B 02 F6 | 	mov	arg01, local01
045ec     2B 4D 02 F6 | 	mov	arg02, local02
045f0     68 FD BF FD | 	call	#__system___gc_tryalloc
045f4     12 5B 0A F6 | 	mov	local04, result1 wz
045f8     14 00 90 5D |  if_ne	jmp	#LR__0204
045fc     10 03 B0 FD | 	call	#__system___gc_docollect
04600     2A 4B 02 F6 | 	mov	arg01, local01
04604     2B 4D 02 F6 | 	mov	arg02, local02
04608     50 FD BF FD | 	call	#__system___gc_tryalloc
0460c     12 5B 02 F6 | 	mov	local04, result1
04610                 | LR__0204
04610     2C 01 68 FC | 	wrlong	#0, local03
04614     00 5A 0E F2 | 	cmp	local04, #0 wz
04618     34 00 90 AD |  if_e	jmp	#LR__0210
0461c     04 54 66 F0 | 	shl	local01, #4
04620     08 54 86 F1 | 	sub	local01, #8
04624     2A 5D 52 F6 | 	abs	local05, local01 wc
04628     02 5C 46 F0 | 	shr	local05, #2
0462c     2E 5D 62 C6 |  if_b	neg	local05, local05
04630     2E 5F 0A F6 | 	mov	local06, local05 wz
04634     2D 61 02 F6 | 	mov	local07, local04
04638     14 00 90 AD |  if_e	jmp	#LR__0209
0463c     CC B9 9F FE | 	loc	pa,	#(@LR__0207-@LR__0205)
04640     93 00 A0 FD | 	call	#FCACHE_LOAD_
04644                 | LR__0205
04644     2F 05 D8 FC | 	rep	@LR__0208, local06
04648                 | LR__0206
04648     30 01 68 FC | 	wrlong	#0, local07
0464c     04 60 06 F1 | 	add	local07, #4
04650                 | LR__0207
04650                 | LR__0208
04650                 | LR__0209
04650                 | LR__0210
04650     2D 25 02 F6 | 	mov	result1, local04
04654                 | LR__0211
04654     AF F0 03 F6 | 	mov	ptra, fp
04658     BF 00 A0 FD | 	call	#popregs_
0465c                 | __system___gc_doalloc_ret
0465c     2D 00 64 FD | 	ret
04660                 | 
04660                 | __system___gc_isvalidptr
04660     27 2B 02 F6 | 	mov	_var01, arg03
04664     15 2D 02 F6 | 	mov	_var02, _var01
04668     00 F8 7F FF 
0466c     00 2C 06 F5 | 	and	_var02, ##-1048576
04670     00 C0 31 FF 
04674     00 2C 0E F2 | 	cmp	_var02, ##1669332992 wz
04678     00 24 06 56 |  if_ne	mov	result1, #0
0467c     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
04680     08 2A 86 F1 | 	sub	_var01, #8
04684     15 2F 02 F6 | 	mov	_var03, _var01
04688     00 F8 7F FF 
0468c     00 2E 26 F5 | 	andn	_var03, ##-1048576
04690     25 2F 5A F2 | 	cmps	_var03, arg01 wcz
04694     08 00 90 CD |  if_b	jmp	#LR__0212
04698     26 2F 5A F2 | 	cmps	_var03, arg02 wcz
0469c     08 00 90 CD |  if_b	jmp	#LR__0213
046a0                 | LR__0212
046a0     00 24 06 F6 | 	mov	result1, #0
046a4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
046a8                 | LR__0213
046a8     17 2D 02 F6 | 	mov	_var02, _var03
046ac     25 2D 62 F5 | 	xor	_var02, arg01
046b0     0F 2C 0E F5 | 	and	_var02, #15 wz
046b4     00 24 06 56 |  if_ne	mov	result1, #0
046b8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
046bc     17 31 02 F6 | 	mov	_var04, _var03
046c0     02 30 06 F1 | 	add	_var04, #2
046c4     18 2D E2 FA | 	rdword	_var02, _var04
046c8     7F 00 00 FF 
046cc     C0 2D 06 F5 | 	and	_var02, ##65472
046d0     36 00 00 FF 
046d4     80 2C 0E F2 | 	cmp	_var02, ##27776 wz
046d8     00 24 06 56 |  if_ne	mov	result1, #0
046dc     17 25 02 A6 |  if_e	mov	result1, _var03
046e0                 | __system___gc_isvalidptr_ret
046e0     2D 00 64 FD | 	ret
046e4                 | 
046e4                 | __system___gc_dofree
046e4     1A 5A 05 F6 | 	mov	COUNT_, #26
046e8     B0 00 A0 FD | 	call	#pushregs_
046ec     25 55 02 F6 | 	mov	local01, arg01
046f0     84 FB BF FD | 	call	#__system___gc_ptrs
046f4     13 57 02 F6 | 	mov	local02, result2
046f8     12 59 02 F6 | 	mov	local03, result1
046fc     2A 5B 02 F6 | 	mov	local04, local01
04700     02 5A 06 F1 | 	add	local04, #2
04704     36 00 80 FF 
04708     2D 1F 59 FC | 	wrword	##27791, local04
0470c     2A 5D 02 F6 | 	mov	local05, local01
04710     2A 4B 02 F6 | 	mov	arg01, local01
04714     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
04718     12 5F 02 F6 | 	mov	local06, result1
0471c     30 B9 9F FE | 	loc	pa,	#(@LR__0215-@LR__0214)
04720     93 00 A0 FD | 	call	#FCACHE_LOAD_
04724                 | LR__0214
04724     04 5C 06 F1 | 	add	local05, #4
04728     2E 61 02 F6 | 	mov	local07, local05
0472c     30 4D EA FA | 	rdword	arg02, local07 wz
04730     2C 4B 02 F6 | 	mov	arg01, local03
04734     00 24 06 A6 |  if_e	mov	result1, #0
04738     04 4C 66 50 |  if_ne	shl	arg02, #4
0473c     26 4B 02 51 |  if_ne	add	arg01, arg02
04740     25 25 02 56 |  if_ne	mov	result1, arg01
04744     12 5D 0A F6 | 	mov	local05, result1 wz
04748     28 00 90 AD |  if_e	jmp	#LR__0216
0474c     2E 4B 02 F6 | 	mov	arg01, local05
04750     00 62 06 F6 | 	mov	local08, #0
04754     02 4A 06 F1 | 	add	arg01, #2
04758     25 65 E2 FA | 	rdword	local09, arg01
0475c     36 00 00 FF 
04760     8F 64 0E F2 | 	cmp	local09, ##27791 wz
04764     01 62 66 A6 |  if_e	neg	local08, #1
04768     31 25 02 F6 | 	mov	result1, local08
0476c     12 67 0A F6 | 	mov	local10, result1 wz
04770     B0 FF 9F AD |  if_e	jmp	#LR__0214
04774                 | LR__0215
04774                 | LR__0216
04774     00 5C 0E F2 | 	cmp	local05, #0 wz
04778     2C 5D 02 A6 |  if_e	mov	local05, local03
0477c     2E 69 02 F6 | 	mov	local11, local05
04780     06 68 06 F1 | 	add	local11, #6
04784     2A 6B 02 F6 | 	mov	local12, local01
04788     34 6D E2 FA | 	rdword	local13, local11
0478c     06 6A 06 F1 | 	add	local12, #6
04790     35 6D 52 FC | 	wrword	local13, local12
04794     2A 4D 0A F6 | 	mov	arg02, local01 wz
04798     00 24 06 A6 |  if_e	mov	result1, #0
0479c     2C 4D 82 51 |  if_ne	sub	arg02, local03
047a0     04 4C 46 50 |  if_ne	shr	arg02, #4
047a4     26 25 02 56 |  if_ne	mov	result1, arg02
047a8     12 6F 02 F6 | 	mov	local14, result1
047ac     34 6F 52 FC | 	wrword	local14, local11
047b0     2C 5D 0A F2 | 	cmp	local05, local03 wz
047b4     74 00 90 AD |  if_e	jmp	#LR__0219
047b8     2E 4B 02 F6 | 	mov	arg01, local05
047bc     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
047c0     2A 25 0A F2 | 	cmp	result1, local01 wz
047c4     64 00 90 5D |  if_ne	jmp	#LR__0218
047c8     2E 71 02 F6 | 	mov	local15, local05
047cc     38 73 E2 FA | 	rdword	local16, local15
047d0     2A 75 02 F6 | 	mov	local17, local01
047d4     3A 67 E2 FA | 	rdword	local10, local17
047d8     33 73 02 F1 | 	add	local16, local10
047dc     38 73 52 FC | 	wrword	local16, local15
047e0     2D 01 58 FC | 	wrword	#0, local04
047e4     2A 4B 02 F6 | 	mov	arg01, local01
047e8     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
047ec     12 5F 02 F6 | 	mov	local06, result1
047f0     2B 5F 5A F2 | 	cmps	local06, local02 wcz
047f4     24 00 90 3D |  if_ae	jmp	#LR__0217
047f8     2F 77 02 F6 | 	mov	local18, local06
047fc     04 76 06 F1 | 	add	local18, #4
04800     2E 4D 0A F6 | 	mov	arg02, local05 wz
04804     00 24 06 A6 |  if_e	mov	result1, #0
04808     2C 4D 82 51 |  if_ne	sub	arg02, local03
0480c     04 4C 46 50 |  if_ne	shr	arg02, #4
04810     26 25 02 56 |  if_ne	mov	result1, arg02
04814     12 6F 02 F6 | 	mov	local14, result1
04818     3B 6F 52 FC | 	wrword	local14, local18
0481c                 | LR__0217
0481c     35 6D E2 FA | 	rdword	local13, local12
04820     34 6D 52 FC | 	wrword	local13, local11
04824     35 01 58 FC | 	wrword	#0, local12
04828     2E 55 02 F6 | 	mov	local01, local05
0482c                 | LR__0218
0482c                 | LR__0219
0482c     2A 4B 02 F6 | 	mov	arg01, local01
04830     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
04834     12 79 0A F6 | 	mov	local19, result1 wz
04838     C4 00 90 AD |  if_e	jmp	#LR__0221
0483c     2B 79 5A F2 | 	cmps	local19, local02 wcz
04840     BC 00 90 3D |  if_ae	jmp	#LR__0221
04844     3C 4B 02 F6 | 	mov	arg01, local19
04848     00 62 06 F6 | 	mov	local08, #0
0484c     02 4A 06 F1 | 	add	arg01, #2
04850     25 65 E2 FA | 	rdword	local09, arg01
04854     36 00 00 FF 
04858     8F 64 0E F2 | 	cmp	local09, ##27791 wz
0485c     01 62 66 A6 |  if_e	neg	local08, #1
04860     31 25 0A F6 | 	mov	result1, local08 wz
04864     98 00 90 AD |  if_e	jmp	#LR__0221
04868     2A 5D 02 F6 | 	mov	local05, local01
0486c     3C 55 02 F6 | 	mov	local01, local19
04870     2E 7B 02 F6 | 	mov	local20, local05
04874     3D 7D E2 FA | 	rdword	local21, local20
04878     2A 7F 02 F6 | 	mov	local22, local01
0487c     3F 67 E2 FA | 	rdword	local10, local22
04880     33 7D 02 F1 | 	add	local21, local10
04884     3D 7D 52 FC | 	wrword	local21, local20
04888     2A 81 02 F6 | 	mov	local23, local01
0488c     06 80 06 F1 | 	add	local23, #6
04890     2E 83 02 F6 | 	mov	local24, local05
04894     40 6D E2 FA | 	rdword	local13, local23
04898     06 82 06 F1 | 	add	local24, #6
0489c     41 6D 52 FC | 	wrword	local13, local24
048a0     2A 85 02 F6 | 	mov	local25, local01
048a4     02 84 06 F1 | 	add	local25, #2
048a8     42 55 59 FC | 	wrword	#170, local25
048ac     40 01 58 FC | 	wrword	#0, local23
048b0     2A 6D 02 F6 | 	mov	local13, local01
048b4     36 4B 02 F6 | 	mov	arg01, local13
048b8     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
048bc     12 67 02 F6 | 	mov	local10, result1
048c0     33 5F 0A F6 | 	mov	local06, local10 wz
048c4     38 00 90 AD |  if_e	jmp	#LR__0220
048c8     2B 5F 5A F2 | 	cmps	local06, local02 wcz
048cc     30 00 90 3D |  if_ae	jmp	#LR__0220
048d0     2F 87 02 F6 | 	mov	local26, local06
048d4     04 86 06 F1 | 	add	local26, #4
048d8     2C 6D 02 F6 | 	mov	local13, local03
048dc     2E 67 02 F6 | 	mov	local10, local05
048e0     36 4B 02 F6 | 	mov	arg01, local13
048e4     33 4D 0A F6 | 	mov	arg02, local10 wz
048e8     00 24 06 A6 |  if_e	mov	result1, #0
048ec     25 4D 82 51 |  if_ne	sub	arg02, arg01
048f0     04 4C 46 50 |  if_ne	shr	arg02, #4
048f4     26 25 02 56 |  if_ne	mov	result1, arg02
048f8     12 6F 02 F6 | 	mov	local14, result1
048fc     43 6F 52 FC | 	wrword	local14, local26
04900                 | LR__0220
04900                 | LR__0221
04900     2F 25 02 F6 | 	mov	result1, local06
04904     AF F0 03 F6 | 	mov	ptra, fp
04908     BF 00 A0 FD | 	call	#popregs_
0490c                 | __system___gc_dofree_ret
0490c     2D 00 64 FD | 	ret
04910                 | 
04910                 | __system___gc_docollect
04910     0C 5A 05 F6 | 	mov	COUNT_, #12
04914     B0 00 A0 FD | 	call	#pushregs_
04918     5C F9 BF FD | 	call	#__system___gc_ptrs
0491c     13 55 02 F6 | 	mov	local01, result2
04920     12 57 02 F6 | 	mov	local02, result1
04924     2B 4B 02 F6 | 	mov	arg01, local02
04928     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0492c     12 59 0A F6 | 	mov	local03, result1 wz
04930     01 24 62 FD | 	cogid	result1
04934     12 5B 02 F6 | 	mov	local04, result1
04938     2C 00 90 AD |  if_e	jmp	#LR__0223
0493c                 | LR__0222
0493c     2A 59 5A F2 | 	cmps	local03, local01 wcz
04940     24 00 90 3D |  if_ae	jmp	#LR__0223
04944     2C 5D 02 F6 | 	mov	local05, local03
04948     02 5C 06 F1 | 	add	local05, #2
0494c     2E 5F E2 FA | 	rdword	local06, local05
04950     20 5E 26 F5 | 	andn	local06, #32
04954     2E 5F 52 FC | 	wrword	local06, local05
04958     2C 4B 02 F6 | 	mov	arg01, local03
0495c     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04960     12 59 0A F6 | 	mov	local03, result1 wz
04964     D4 FF 9F 5D |  if_ne	jmp	#LR__0222
04968                 | LR__0223
04968     00 60 06 F6 | 	mov	local07, #0
0496c     00 4A 06 F6 | 	mov	arg01, #0
04970     B0 F0 BF FD | 	call	#__system____topofstack
04974     12 63 02 F6 | 	mov	local08, result1
04978     30 4B 02 F6 | 	mov	arg01, local07
0497c     31 4D 02 F6 | 	mov	arg02, local08
04980     A0 00 B0 FD | 	call	#__system___gc_markhub
04984     2C 01 B0 FD | 	call	#__system___gc_markcog
04988     2B 4B 02 F6 | 	mov	arg01, local02
0498c     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04990     12 65 0A F6 | 	mov	local09, result1 wz
04994     10 00 90 5D |  if_ne	jmp	#LR__0224
04998     2D 00 00 FF 
0499c     1D 4B 06 F6 | 	mov	arg01, ##@LR__0306
049a0     94 FB BF FD | 	call	#__system___gc_errmsg
049a4     70 00 90 FD | 	jmp	#LR__0230
049a8                 | LR__0224
049a8                 | LR__0225
049a8     32 59 02 F6 | 	mov	local03, local09
049ac     2C 4B 02 F6 | 	mov	arg01, local03
049b0     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
049b4     12 65 02 F6 | 	mov	local09, result1
049b8     2C 67 02 F6 | 	mov	local10, local03
049bc     02 66 06 F1 | 	add	local10, #2
049c0     33 69 E2 FA | 	rdword	local11, local10
049c4     20 68 CE F7 | 	test	local11, #32 wz
049c8     3C 00 90 5D |  if_ne	jmp	#LR__0228
049cc     34 6B 02 F6 | 	mov	local12, local11
049d0     10 6A 0E F5 | 	and	local12, #16 wz
049d4     30 00 90 5D |  if_ne	jmp	#LR__0228
049d8     34 61 02 F6 | 	mov	local07, local11
049dc     0F 60 06 F5 | 	and	local07, #15
049e0     30 69 02 F6 | 	mov	local11, local07
049e4     2D 69 0A F2 | 	cmp	local11, local04 wz
049e8     08 00 90 AD |  if_e	jmp	#LR__0226
049ec     0E 68 0E F2 | 	cmp	local11, #14 wz
049f0     14 00 90 5D |  if_ne	jmp	#LR__0227
049f4                 | LR__0226
049f4     2C 61 02 F6 | 	mov	local07, local03
049f8     30 4B 02 F6 | 	mov	arg01, local07
049fc     E4 FC BF FD | 	call	#__system___gc_dofree
04a00     12 6B 02 F6 | 	mov	local12, result1
04a04     35 65 02 F6 | 	mov	local09, local12
04a08                 | LR__0227
04a08                 | LR__0228
04a08     00 64 0E F2 | 	cmp	local09, #0 wz
04a0c     08 00 90 AD |  if_e	jmp	#LR__0229
04a10     2A 65 5A F2 | 	cmps	local09, local01 wcz
04a14     90 FF 9F CD |  if_b	jmp	#LR__0225
04a18                 | LR__0229
04a18                 | LR__0230
04a18     AF F0 03 F6 | 	mov	ptra, fp
04a1c     BF 00 A0 FD | 	call	#popregs_
04a20                 | __system___gc_docollect_ret
04a20     2D 00 64 FD | 	ret
04a24                 | 
04a24                 | __system___gc_markhub
04a24     0A 5A 05 F6 | 	mov	COUNT_, #10
04a28     B0 00 A0 FD | 	call	#pushregs_
04a2c     25 55 02 F6 | 	mov	local01, arg01
04a30     26 57 02 F6 | 	mov	local02, arg02
04a34     40 F8 BF FD | 	call	#__system___gc_ptrs
04a38     12 59 02 F6 | 	mov	local03, result1
04a3c     13 5B 02 F6 | 	mov	local04, result2
04a40                 | LR__0231
04a40     2B 55 5A F2 | 	cmps	local01, local02 wcz
04a44     60 00 90 3D |  if_ae	jmp	#LR__0232
04a48     2A 4F 02 FB | 	rdlong	arg03, local01
04a4c     04 54 06 F1 | 	add	local01, #4
04a50     2C 4B 02 F6 | 	mov	arg01, local03
04a54     2D 4D 02 F6 | 	mov	arg02, local04
04a58     04 FC BF FD | 	call	#__system___gc_isvalidptr
04a5c     12 5D 0A F6 | 	mov	local05, result1 wz
04a60     DC FF 9F AD |  if_e	jmp	#LR__0231
04a64     2E 4B 02 F6 | 	mov	arg01, local05
04a68     00 5E 06 F6 | 	mov	local06, #0
04a6c     02 4A 06 F1 | 	add	arg01, #2
04a70     25 61 E2 FA | 	rdword	local07, arg01
04a74     36 00 00 FF 
04a78     8F 60 0E F2 | 	cmp	local07, ##27791 wz
04a7c     01 5E 66 A6 |  if_e	neg	local06, #1
04a80     2F 25 02 F6 | 	mov	result1, local06
04a84     12 63 0A F6 | 	mov	local08, result1 wz
04a88     B4 FF 9F 5D |  if_ne	jmp	#LR__0231
04a8c     2E 65 02 F6 | 	mov	local09, local05
04a90     02 64 06 F1 | 	add	local09, #2
04a94     32 67 E2 FA | 	rdword	local10, local09
04a98     0F 66 26 F5 | 	andn	local10, #15
04a9c     2E 66 46 F5 | 	or	local10, #46
04aa0     32 67 52 FC | 	wrword	local10, local09
04aa4     98 FF 9F FD | 	jmp	#LR__0231
04aa8                 | LR__0232
04aa8     AF F0 03 F6 | 	mov	ptra, fp
04aac     BF 00 A0 FD | 	call	#popregs_
04ab0                 | __system___gc_markhub_ret
04ab0     2D 00 64 FD | 	ret
04ab4                 | 
04ab4                 | __system___gc_markcog
04ab4     06 5A 05 F6 | 	mov	COUNT_, #6
04ab8     B0 00 A0 FD | 	call	#pushregs_
04abc     B8 F7 BF FD | 	call	#__system___gc_ptrs
04ac0     12 55 02 F6 | 	mov	local01, result1
04ac4     13 57 02 F6 | 	mov	local02, result2
04ac8     00 58 06 F6 | 	mov	local03, #0
04acc                 | LR__0233
04acc     F0 5B 06 F6 | 	mov	local04, #496
04ad0     2C 5B 82 F1 | 	sub	local04, local03
04ad4     F0 5B 06 F1 | 	add	local04, #496
04ad8                 | 	'.live	local04
04ad8     00 5A 96 F9 | 	alts	local04, #0
04adc     2D 5D 02 F6 | 	mov	local05, local04
04ae0     2B 4D 02 F6 | 	mov	arg02, local02
04ae4     2A 4B 02 F6 | 	mov	arg01, local01
04ae8     2E 4F 02 F6 | 	mov	arg03, local05
04aec     70 FB BF FD | 	call	#__system___gc_isvalidptr
04af0     12 5D 0A F6 | 	mov	local05, result1 wz
04af4     10 00 90 AD |  if_e	jmp	#LR__0234
04af8     02 5C 06 F1 | 	add	local05, #2
04afc     2E 5F E2 FA | 	rdword	local06, local05
04b00     20 5E 46 F5 | 	or	local06, #32
04b04     2E 5F 52 FC | 	wrword	local06, local05
04b08                 | LR__0234
04b08     01 58 06 F1 | 	add	local03, #1
04b0c     F0 59 5E F2 | 	cmps	local03, #496 wcz
04b10     B8 FF 9F CD |  if_b	jmp	#LR__0233
04b14     AF F0 03 F6 | 	mov	ptra, fp
04b18     BF 00 A0 FD | 	call	#popregs_
04b1c                 | __system___gc_markcog_ret
04b1c     2D 00 64 FD | 	ret
04b20                 | 
04b20                 | __system__write
04b20     03 5A 05 F6 | 	mov	COUNT_, #3
04b24     B0 00 A0 FD | 	call	#pushregs_
04b28     25 55 02 F6 | 	mov	local01, arg01
04b2c     26 57 02 F6 | 	mov	local02, arg02
04b30     27 59 02 F6 | 	mov	local03, arg03
04b34     0A 54 1E F2 | 	cmp	local01, #10 wcz
04b38     1C 00 90 CD |  if_b	jmp	#LR__0235
04b3c     01 00 00 FF 
04b40     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04b44     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04b48     01 00 00 FF 
04b4c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04b50     01 24 66 F6 | 	neg	result1, #1
04b54     28 00 90 FD | 	jmp	#LR__0236
04b58                 | LR__0235
04b58     2A 4B 02 F6 | 	mov	arg01, local01
04b5c     01 4A 66 F0 | 	shl	arg01, #1
04b60     2A 4B 02 F1 | 	add	arg01, local01
04b64     04 4A 66 F0 | 	shl	arg01, #4
04b68     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04b6c     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04b70     2B 4D 02 F6 | 	mov	arg02, local02
04b74     2C 4F 02 F6 | 	mov	arg03, local03
04b78     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04b7c     4C 09 B0 FD | 	call	#__system___vfswrite
04b80                 | LR__0236
04b80     AF F0 03 F6 | 	mov	ptra, fp
04b84     BF 00 A0 FD | 	call	#popregs_
04b88                 | __system__write_ret
04b88     2D 00 64 FD | 	ret
04b8c                 | 
04b8c                 | __system__read
04b8c     03 5A 05 F6 | 	mov	COUNT_, #3
04b90     B0 00 A0 FD | 	call	#pushregs_
04b94     25 55 02 F6 | 	mov	local01, arg01
04b98     26 57 02 F6 | 	mov	local02, arg02
04b9c     27 59 02 F6 | 	mov	local03, arg03
04ba0     0A 54 1E F2 | 	cmp	local01, #10 wcz
04ba4     1C 00 90 CD |  if_b	jmp	#LR__0237
04ba8     01 00 00 FF 
04bac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04bb0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04bb4     01 00 00 FF 
04bb8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04bbc     01 24 66 F6 | 	neg	result1, #1
04bc0     28 00 90 FD | 	jmp	#LR__0238
04bc4                 | LR__0237
04bc4     2A 4B 02 F6 | 	mov	arg01, local01
04bc8     01 4A 66 F0 | 	shl	arg01, #1
04bcc     2A 4B 02 F1 | 	add	arg01, local01
04bd0     04 4A 66 F0 | 	shl	arg01, #4
04bd4     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04bd8     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04bdc     2B 4D 02 F6 | 	mov	arg02, local02
04be0     2C 4F 02 F6 | 	mov	arg03, local03
04be4     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04be8     A4 0A B0 FD | 	call	#__system___vfsread
04bec                 | LR__0238
04bec     AF F0 03 F6 | 	mov	ptra, fp
04bf0     BF 00 A0 FD | 	call	#popregs_
04bf4                 | __system__read_ret
04bf4     2D 00 64 FD | 	ret
04bf8                 | 
04bf8                 | __system__close
04bf8     01 5A 05 F6 | 	mov	COUNT_, #1
04bfc     B0 00 A0 FD | 	call	#pushregs_
04c00     25 55 02 F6 | 	mov	local01, arg01
04c04     0A 54 1E F2 | 	cmp	local01, #10 wcz
04c08     1C 00 90 CD |  if_b	jmp	#LR__0239
04c0c     01 00 00 FF 
04c10     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04c14     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04c18     01 00 00 FF 
04c1c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04c20     01 24 66 F6 | 	neg	result1, #1
04c24     20 00 90 FD | 	jmp	#LR__0240
04c28                 | LR__0239
04c28     2A 4B 02 F6 | 	mov	arg01, local01
04c2c     01 4A 66 F0 | 	shl	arg01, #1
04c30     2A 4B 02 F1 | 	add	arg01, local01
04c34     04 4A 66 F0 | 	shl	arg01, #4
04c38     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04c3c     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04c40     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04c44     80 03 B0 FD | 	call	#__system___closeraw
04c48                 | LR__0240
04c48     AF F0 03 F6 | 	mov	ptra, fp
04c4c     BF 00 A0 FD | 	call	#popregs_
04c50                 | __system__close_ret
04c50     2D 00 64 FD | 	ret
04c54                 | 
04c54                 | __system__lseek
04c54     09 5A 05 F6 | 	mov	COUNT_, #9
04c58     B0 00 A0 FD | 	call	#pushregs_
04c5c     25 55 02 F6 | 	mov	local01, arg01
04c60     26 57 02 F6 | 	mov	local02, arg02
04c64     27 59 02 F6 | 	mov	local03, arg03
04c68     0A 54 1E F2 | 	cmp	local01, #10 wcz
04c6c     1C 00 90 CD |  if_b	jmp	#LR__0241
04c70     01 00 00 FF 
04c74     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04c78     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04c7c     01 00 00 FF 
04c80     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04c84     01 24 66 F6 | 	neg	result1, #1
04c88     D8 00 90 FD | 	jmp	#LR__0245
04c8c                 | LR__0241
04c8c     2A 5B 02 F6 | 	mov	local04, local01
04c90     01 5A 66 F0 | 	shl	local04, #1
04c94     2A 5B 02 F1 | 	add	local04, local01
04c98     04 5A 66 F0 | 	shl	local04, #4
04c9c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04ca0     0A 5B 02 F1 | 	add	local04, ptr___system__dat__
04ca4     2C 5A 06 F1 | 	add	local04, #44
04ca8     2D 5D 0A FB | 	rdlong	local05, local04 wz
04cac     2C 5A 86 F1 | 	sub	local04, #44
04cb0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04cb4     1C 00 90 5D |  if_ne	jmp	#LR__0242
04cb8     01 00 00 FF 
04cbc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04cc0     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
04cc4     01 00 00 FF 
04cc8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04ccc     01 24 66 F6 | 	neg	result1, #1
04cd0     90 00 90 FD | 	jmp	#LR__0245
04cd4                 | LR__0242
04cd4     08 5A 06 F1 | 	add	local04, #8
04cd8     2D 5D 02 FB | 	rdlong	local05, local04
04cdc     08 5A 86 F1 | 	sub	local04, #8
04ce0     40 5C CE F7 | 	test	local05, #64 wz
04ce4     14 00 90 AD |  if_e	jmp	#LR__0243
04ce8     08 5A 06 F1 | 	add	local04, #8
04cec     2D 5D 02 FB | 	rdlong	local05, local04
04cf0     80 5C 46 F5 | 	or	local05, #128
04cf4     2D 5D 62 FC | 	wrlong	local05, local04
04cf8     08 5A 86 F1 | 	sub	local04, #8
04cfc                 | LR__0243
04cfc     2C 5A 06 F1 | 	add	local04, #44
04d00     2D 5D 02 FB | 	rdlong	local05, local04
04d04     2C 5A 86 F1 | 	sub	local04, #44
04d08     2E 5F 02 FB | 	rdlong	local06, local05
04d0c     04 5C 06 F1 | 	add	local05, #4
04d10     2E 61 02 FB | 	rdlong	local07, local05
04d14     2D 4B 02 F6 | 	mov	arg01, local04
04d18     2B 4D 02 F6 | 	mov	arg02, local02
04d1c     2C 4F 02 F6 | 	mov	arg03, local03
04d20     07 63 02 F6 | 	mov	local08, objptr
04d24     2F 0F 02 F6 | 	mov	objptr, local06
04d28     2D 60 62 FD | 	call	local07
04d2c     31 0F 02 F6 | 	mov	objptr, local08
04d30     12 65 02 F6 | 	mov	local09, result1
04d34     00 64 5E F2 | 	cmps	local09, #0 wcz
04d38     24 00 90 3D |  if_ae	jmp	#LR__0244
04d3c     32 4B 6A F6 | 	neg	arg01, local09 wz
04d40     01 00 00 FF 
04d44     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04d48     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
04d4c     01 00 00 FF 
04d50     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04d54     01 24 66 56 |  if_ne	neg	result1, #1
04d58     00 24 06 A6 |  if_e	mov	result1, #0
04d5c     04 00 90 FD | 	jmp	#LR__0245
04d60                 | LR__0244
04d60     32 25 02 F6 | 	mov	result1, local09
04d64                 | LR__0245
04d64     AF F0 03 F6 | 	mov	ptra, fp
04d68     BF 00 A0 FD | 	call	#popregs_
04d6c                 | __system__lseek_ret
04d6c     2D 00 64 FD | 	ret
04d70                 | 
04d70                 | __system____getftab
04d70     0A 4A 1E F2 | 	cmp	arg01, #10 wcz
04d74     00 24 06 36 |  if_ae	mov	result1, #0
04d78     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
04d7c     25 25 02 F6 | 	mov	result1, arg01
04d80     01 24 66 F0 | 	shl	result1, #1
04d84     25 25 02 F1 | 	add	result1, arg01
04d88     04 24 66 F0 | 	shl	result1, #4
04d8c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04d90     0A 25 02 F1 | 	add	result1, ptr___system__dat__
04d94     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04d98                 | __system____getftab_ret
04d98     2D 00 64 FD | 	ret
04d9c                 | 
04d9c                 | __system___strrev
04d9c     25 2B CA FA | 	rdbyte	_var01, arg01 wz
04da0     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
04da4     25 2D 02 F6 | 	mov	_var02, arg01
04da8     60 B2 9F FE | 	loc	pa,	#(@LR__0247-@LR__0246)
04dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
04db0                 | LR__0246
04db0     16 2B CA FA | 	rdbyte	_var01, _var02 wz
04db4     01 2C 06 51 |  if_ne	add	_var02, #1
04db8     F4 FF 9F 5D |  if_ne	jmp	#LR__0246
04dbc                 | LR__0247
04dbc     01 2C 86 F1 | 	sub	_var02, #1
04dc0                 | LR__0248
04dc0     25 2D 5A F2 | 	cmps	_var02, arg01 wcz
04dc4     1C 00 90 ED |  if_be	jmp	#LR__0249
04dc8     25 2F C2 FA | 	rdbyte	_var03, arg01
04dcc     16 31 C2 FA | 	rdbyte	_var04, _var02
04dd0     25 31 42 FC | 	wrbyte	_var04, arg01
04dd4     16 2F 42 FC | 	wrbyte	_var03, _var02
04dd8     01 4A 06 F1 | 	add	arg01, #1
04ddc     01 2C 86 F1 | 	sub	_var02, #1
04de0     DC FF 9F FD | 	jmp	#LR__0248
04de4                 | LR__0249
04de4                 | __system___strrev_ret
04de4     2D 00 64 FD | 	ret
04de8                 | 
04de8                 | __system___fmtpad
04de8     0C 5A 05 F6 | 	mov	COUNT_, #12
04dec     B0 00 A0 FD | 	call	#pushregs_
04df0     25 55 02 F6 | 	mov	local01, arg01
04df4     26 57 02 F6 | 	mov	local02, arg02
04df8     28 59 02 F6 | 	mov	local03, arg04
04dfc     2B 5B EA F8 | 	getbyte	local04, local02, #1
04e00     16 56 46 F0 | 	shr	local02, #22
04e04     03 56 0E F5 | 	and	local02, #3 wz
04e08     00 5C 06 F6 | 	mov	local05, #0
04e0c     01 56 06 A6 |  if_e	mov	local02, #1
04e10     2C 57 CA F7 | 	test	local02, local03 wz
04e14     00 24 06 A6 |  if_e	mov	result1, #0
04e18     80 00 90 AD |  if_e	jmp	#LR__0253
04e1c     27 5B 82 F1 | 	sub	local04, arg03
04e20     2D 5F 02 F6 | 	mov	local06, local04
04e24     00 5E 5E F2 | 	cmps	local06, #0 wcz
04e28     00 24 06 E6 |  if_be	mov	result1, #0
04e2c     6C 00 90 ED |  if_be	jmp	#LR__0253
04e30     03 56 0E F2 | 	cmp	local02, #3 wz
04e34     18 00 90 5D |  if_ne	jmp	#LR__0250
04e38     01 58 0E F2 | 	cmp	local03, #1 wz
04e3c     6E 60 62 FD | 	wrz	local07
04e40     30 5F 02 F1 | 	add	local06, local07
04e44     2F 5F 52 F6 | 	abs	local06, local06 wc
04e48     01 5E 46 F0 | 	shr	local06, #1
04e4c     2F 5F 62 C6 |  if_b	neg	local06, local06
04e50                 | LR__0250
04e50     00 5E 5E F2 | 	cmps	local06, #0 wcz
04e54     40 00 90 ED |  if_be	jmp	#LR__0252
04e58     2F 63 02 F6 | 	mov	local08, local06
04e5c                 | LR__0251
04e5c     2A 65 02 F6 | 	mov	local09, local01
04e60     32 61 02 FB | 	rdlong	local07, local09
04e64     04 64 06 F1 | 	add	local09, #4
04e68     32 67 02 FB | 	rdlong	local10, local09
04e6c     20 4A 06 F6 | 	mov	arg01, #32
04e70     07 69 02 F6 | 	mov	local11, objptr
04e74     30 0F 02 F6 | 	mov	objptr, local07
04e78     2D 66 62 FD | 	call	local10
04e7c     34 0F 02 F6 | 	mov	objptr, local11
04e80     12 6B 02 F6 | 	mov	local12, result1
04e84     00 6A 5E F2 | 	cmps	local12, #0 wcz
04e88     35 25 02 C6 |  if_b	mov	result1, local12
04e8c     0C 00 90 CD |  if_b	jmp	#LR__0253
04e90     35 5D 02 F1 | 	add	local05, local12
04e94     F1 63 6E FB | 	djnz	local08, #LR__0251
04e98                 | LR__0252
04e98     2E 25 02 F6 | 	mov	result1, local05
04e9c                 | LR__0253
04e9c     AF F0 03 F6 | 	mov	ptra, fp
04ea0     BF 00 A0 FD | 	call	#popregs_
04ea4                 | __system___fmtpad_ret
04ea4     2D 00 64 FD | 	ret
04ea8                 | 
04ea8                 | __system___uitoa
04ea8     09 5A 05 F6 | 	mov	COUNT_, #9
04eac     B0 00 A0 FD | 	call	#pushregs_
04eb0     25 55 02 F6 | 	mov	local01, arg01
04eb4     26 57 02 F6 | 	mov	local02, arg02
04eb8     27 59 02 F6 | 	mov	local03, arg03
04ebc     28 5B 02 F6 | 	mov	local04, arg04
04ec0     29 5D 0A F6 | 	mov	local05, arg05 wz
04ec4     2A 5F 02 F6 | 	mov	local06, local01
04ec8     00 60 06 F6 | 	mov	local07, #0
04ecc     37 62 06 56 |  if_ne	mov	local08, #55
04ed0     57 62 06 A6 |  if_e	mov	local08, #87
04ed4                 | LR__0254
04ed4     2B 09 03 F6 | 	mov	muldiva_, local02
04ed8     2C 0B 03 F6 | 	mov	muldivb_, local03
04edc     CC 00 A0 FD | 	call	#unsdivide_
04ee0     84 65 02 F6 | 	mov	local09, muldiva_
04ee4     0A 64 1E F2 | 	cmp	local09, #10 wcz
04ee8     30 64 06 C1 |  if_b	add	local09, #48
04eec     31 65 02 31 |  if_ae	add	local09, local08
04ef0     2F 65 42 FC | 	wrbyte	local09, local06
04ef4     2B 09 03 F6 | 	mov	muldiva_, local02
04ef8     2C 0B 03 F6 | 	mov	muldivb_, local03
04efc     01 5E 06 F1 | 	add	local06, #1
04f00     CC 00 A0 FD | 	call	#unsdivide_
04f04     85 57 0A F6 | 	mov	local02, muldivb_ wz
04f08     01 60 06 F1 | 	add	local07, #1
04f0c     C4 FF 9F 5D |  if_ne	jmp	#LR__0254
04f10     2D 61 1A F2 | 	cmp	local07, local04 wcz
04f14     BC FF 9F CD |  if_b	jmp	#LR__0254
04f18     2F 01 48 FC | 	wrbyte	#0, local06
04f1c     2A 4B 02 F6 | 	mov	arg01, local01
04f20     78 FE BF FD | 	call	#__system___strrev
04f24     30 25 02 F6 | 	mov	result1, local07
04f28     AF F0 03 F6 | 	mov	ptra, fp
04f2c     BF 00 A0 FD | 	call	#popregs_
04f30                 | __system___uitoa_ret
04f30     2D 00 64 FD | 	ret
04f34                 | 
04f34                 | __system___gettxfunc
04f34     03 5A 05 F6 | 	mov	COUNT_, #3
04f38     B0 00 A0 FD | 	call	#pushregs_
04f3c     30 FE BF FD | 	call	#__system____getftab
04f40     12 55 0A F6 | 	mov	local01, result1 wz
04f44     14 00 90 AD |  if_e	jmp	#LR__0255
04f48     08 54 06 F1 | 	add	local01, #8
04f4c     2A 57 02 FB | 	rdlong	local02, local01
04f50     08 54 86 F1 | 	sub	local01, #8
04f54     2B 59 0A F6 | 	mov	local03, local02 wz
04f58     08 00 90 5D |  if_ne	jmp	#LR__0256
04f5c                 | LR__0255
04f5c     00 24 06 F6 | 	mov	result1, #0
04f60     0C 00 90 FD | 	jmp	#LR__0257
04f64                 | LR__0256
04f64     2A 4B 02 F6 | 	mov	arg01, local01
04f68     09 4D 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
04f6c     DC EA BF FD | 	call	#__system___make_methodptr
04f70                 | LR__0257
04f70     AF F0 03 F6 | 	mov	ptra, fp
04f74     BF 00 A0 FD | 	call	#popregs_
04f78                 | __system___gettxfunc_ret
04f78     2D 00 64 FD | 	ret
04f7c                 | 
04f7c                 | __system___getiolock_0102
04f7c     03 5A 05 F6 | 	mov	COUNT_, #3
04f80     B0 00 A0 FD | 	call	#pushregs_
04f84     E8 FD BF FD | 	call	#__system____getftab
04f88     12 55 0A F6 | 	mov	local01, result1 wz
04f8c     14 00 90 AD |  if_e	jmp	#LR__0258
04f90     08 54 06 F1 | 	add	local01, #8
04f94     2A 57 02 FB | 	rdlong	local02, local01
04f98     08 54 86 F1 | 	sub	local01, #8
04f9c     2B 59 0A F6 | 	mov	local03, local02 wz
04fa0     10 00 90 5D |  if_ne	jmp	#LR__0259
04fa4                 | LR__0258
04fa4     18 14 06 F1 | 	add	ptr___system__dat__, #24
04fa8     0A 25 02 F6 | 	mov	result1, ptr___system__dat__
04fac     18 14 86 F1 | 	sub	ptr___system__dat__, #24
04fb0     08 00 90 FD | 	jmp	#LR__0260
04fb4                 | LR__0259
04fb4     0C 54 06 F1 | 	add	local01, #12
04fb8     2A 25 02 F6 | 	mov	result1, local01
04fbc                 | LR__0260
04fbc     AF F0 03 F6 | 	mov	ptra, fp
04fc0     BF 00 A0 FD | 	call	#popregs_
04fc4                 | __system___getiolock_0102_ret
04fc4     2D 00 64 FD | 	ret
04fc8                 | 
04fc8                 | __system___closeraw
04fc8     06 5A 05 F6 | 	mov	COUNT_, #6
04fcc     B0 00 A0 FD | 	call	#pushregs_
04fd0     25 55 02 F6 | 	mov	local01, arg01
04fd4     00 56 06 F6 | 	mov	local02, #0
04fd8     08 54 06 F1 | 	add	local01, #8
04fdc     2A 59 0A FB | 	rdlong	local03, local01 wz
04fe0     08 54 86 F1 | 	sub	local01, #8
04fe4     1C 00 90 5D |  if_ne	jmp	#LR__0261
04fe8     01 00 00 FF 
04fec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04ff0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04ff4     01 00 00 FF 
04ff8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04ffc     01 24 66 F6 | 	neg	result1, #1
05000     90 00 90 FD | 	jmp	#LR__0264
05004                 | LR__0261
05004     28 54 06 F1 | 	add	local01, #40
05008     2A 59 0A FB | 	rdlong	local03, local01 wz
0500c     28 54 86 F1 | 	sub	local01, #40
05010     2C 00 90 AD |  if_e	jmp	#LR__0262
05014     28 54 06 F1 | 	add	local01, #40
05018     2A 59 02 FB | 	rdlong	local03, local01
0501c     28 54 86 F1 | 	sub	local01, #40
05020     2C 5B 02 FB | 	rdlong	local04, local03
05024     04 58 06 F1 | 	add	local03, #4
05028     2C 5D 02 FB | 	rdlong	local05, local03
0502c     2A 4B 02 F6 | 	mov	arg01, local01
05030     07 5F 02 F6 | 	mov	local06, objptr
05034     2D 0F 02 F6 | 	mov	objptr, local04
05038     2D 5C 62 FD | 	call	local05
0503c     2F 0F 02 F6 | 	mov	objptr, local06
05040                 | LR__0262
05040     20 54 06 F1 | 	add	local01, #32
05044     2A 59 0A FB | 	rdlong	local03, local01 wz
05048     20 54 86 F1 | 	sub	local01, #32
0504c     30 00 90 AD |  if_e	jmp	#LR__0263
05050     20 54 06 F1 | 	add	local01, #32
05054     2A 59 02 FB | 	rdlong	local03, local01
05058     20 54 86 F1 | 	sub	local01, #32
0505c     2C 5B 02 FB | 	rdlong	local04, local03
05060     04 58 06 F1 | 	add	local03, #4
05064     2C 5D 02 FB | 	rdlong	local05, local03
05068     2A 4B 02 F6 | 	mov	arg01, local01
0506c     07 5F 02 F6 | 	mov	local06, objptr
05070     2D 0F 02 F6 | 	mov	objptr, local04
05074     2D 5C 62 FD | 	call	local05
05078     2F 0F 02 F6 | 	mov	objptr, local06
0507c     12 57 02 F6 | 	mov	local02, result1
05080                 | LR__0263
05080     2A 4B 02 F6 | 	mov	arg01, local01
05084     00 4C 06 F6 | 	mov	arg02, #0
05088     30 4E 06 F6 | 	mov	arg03, #48
0508c     A0 00 A0 FD | 	call	#\builtin_bytefill_
05090     2B 25 02 F6 | 	mov	result1, local02
05094                 | LR__0264
05094     AF F0 03 F6 | 	mov	ptra, fp
05098     BF 00 A0 FD | 	call	#popregs_
0509c                 | __system___closeraw_ret
0509c     2D 00 64 FD | 	ret
050a0                 | 
050a0                 | __system____default_getc
050a0     0C 5A 05 F6 | 	mov	COUNT_, #12
050a4     B0 00 A0 FD | 	call	#pushregs_
050a8     25 55 02 F6 | 	mov	local01, arg01
050ac     2A 57 02 FB | 	rdlong	local02, local01
050b0     08 56 06 F1 | 	add	local02, #8
050b4     2B 59 02 FB | 	rdlong	local03, local02
050b8     08 56 86 F1 | 	sub	local02, #8
050bc     02 58 CE F7 | 	test	local03, #2 wz
050c0     08 00 90 AD |  if_e	jmp	#LR__0265
050c4     2A 4B 02 F6 | 	mov	arg01, local01
050c8     FC 01 B0 FD | 	call	#__system____default_flush
050cc                 | LR__0265
050cc     08 56 06 F1 | 	add	local02, #8
050d0     2B 59 02 FB | 	rdlong	local03, local02
050d4     01 58 46 F5 | 	or	local03, #1
050d8     2B 59 62 FC | 	wrlong	local03, local02
050dc     08 56 86 F1 | 	sub	local02, #8
050e0     2B 5B 0A FB | 	rdlong	local04, local02 wz
050e4     7C 00 90 5D |  if_ne	jmp	#LR__0267
050e8     2A 4B 02 F6 | 	mov	arg01, local01
050ec     25 5D 02 FB | 	rdlong	local05, arg01
050f0     0C 5C 06 F1 | 	add	local05, #12
050f4     2E 4D 02 F6 | 	mov	arg02, local05
050f8     0C 5C 86 F1 | 	sub	local05, #12
050fc     10 4A 06 F1 | 	add	arg01, #16
05100     25 5F 02 FB | 	rdlong	local06, arg01
05104     10 4A 86 F1 | 	sub	arg01, #16
05108     2F 61 02 FB | 	rdlong	local07, local06
0510c     04 5E 06 F1 | 	add	local06, #4
05110     2F 63 02 FB | 	rdlong	local08, local06
05114     0A 4E C6 F9 | 	decod	arg03, #10
05118     07 65 02 F6 | 	mov	local09, objptr
0511c     30 0F 02 F6 | 	mov	objptr, local07
05120     2D 62 62 FD | 	call	local08
05124     32 0F 02 F6 | 	mov	objptr, local09
05128     12 67 02 F6 | 	mov	local10, result1
0512c     00 66 5E F2 | 	cmps	local10, #0 wcz
05130     01 24 66 C6 |  if_b	neg	result1, #1
05134     28 00 90 CD |  if_b	jmp	#LR__0266
05138     2E 67 62 FC | 	wrlong	local10, local05
0513c     0C 5C 06 F1 | 	add	local05, #12
05140     2E 69 02 F6 | 	mov	local11, local05
05144     08 5C 86 F1 | 	sub	local05, #8
05148     2E 69 62 FC | 	wrlong	local11, local05
0514c     04 5C 06 F1 | 	add	local05, #4
05150     2E 5F 02 FB | 	rdlong	local06, local05
05154     01 5E 46 F5 | 	or	local06, #1
05158     2E 5F 62 FC | 	wrlong	local06, local05
0515c     33 25 02 F6 | 	mov	result1, local10
05160                 | LR__0266
05160     12 5B 02 F6 | 	mov	local04, result1
05164                 | LR__0267
05164     00 5A 5E F2 | 	cmps	local04, #0 wcz
05168     01 24 66 E6 |  if_be	neg	result1, #1
0516c     1C 00 90 ED |  if_be	jmp	#LR__0268
05170     01 5A 86 F1 | 	sub	local04, #1
05174     2B 5B 62 FC | 	wrlong	local04, local02
05178     04 56 06 F1 | 	add	local02, #4
0517c     2B 6B 02 FB | 	rdlong	local12, local02
05180     35 25 C2 FA | 	rdbyte	result1, local12
05184     01 6A 06 F1 | 	add	local12, #1
05188     2B 6B 62 FC | 	wrlong	local12, local02
0518c                 | LR__0268
0518c     AF F0 03 F6 | 	mov	ptra, fp
05190     BF 00 A0 FD | 	call	#popregs_
05194                 | __system____default_getc_ret
05194     2D 00 64 FD | 	ret
05198                 | 
05198                 | __system____default_putc
05198     06 5A 05 F6 | 	mov	COUNT_, #6
0519c     B0 00 A0 FD | 	call	#pushregs_
051a0     25 55 02 F6 | 	mov	local01, arg01
051a4     26 57 02 F6 | 	mov	local02, arg02
051a8     2B 59 02 FB | 	rdlong	local03, local02
051ac     08 58 06 F1 | 	add	local03, #8
051b0     2C 5B 02 FB | 	rdlong	local04, local03
051b4     08 58 86 F1 | 	sub	local03, #8
051b8     01 5A CE F7 | 	test	local04, #1 wz
051bc     08 00 90 AD |  if_e	jmp	#LR__0269
051c0     2B 4B 02 F6 | 	mov	arg01, local02
051c4     00 01 B0 FD | 	call	#__system____default_flush
051c8                 | LR__0269
051c8     08 58 06 F1 | 	add	local03, #8
051cc     2C 5B 02 FB | 	rdlong	local04, local03
051d0     02 5A 46 F5 | 	or	local04, #2
051d4     2C 5B 62 FC | 	wrlong	local04, local03
051d8     08 58 86 F1 | 	sub	local03, #8
051dc     2C 5D 02 FB | 	rdlong	local05, local03
051e0     2E 5F 02 F6 | 	mov	local06, local05
051e4     0C 58 06 F1 | 	add	local03, #12
051e8     2C 5F 02 F1 | 	add	local06, local03
051ec     2F 55 42 FC | 	wrbyte	local01, local06
051f0     FF 54 06 F5 | 	and	local01, #255
051f4     01 5C 06 F1 | 	add	local05, #1
051f8     0C 58 86 F1 | 	sub	local03, #12
051fc     2C 5D 62 FC | 	wrlong	local05, local03
05200     02 00 00 FF 
05204     00 5C 0E F2 | 	cmp	local05, ##1024 wz
05208     10 00 90 5D |  if_ne	jmp	#LR__0270
0520c     2B 4B 02 F6 | 	mov	arg01, local02
05210     B4 00 B0 FD | 	call	#__system____default_flush
05214     00 24 0E F2 | 	cmp	result1, #0 wz
05218     01 54 66 56 |  if_ne	neg	local01, #1
0521c                 | LR__0270
0521c     2A 25 02 F6 | 	mov	result1, local01
05220     AF F0 03 F6 | 	mov	ptra, fp
05224     BF 00 A0 FD | 	call	#popregs_
05228                 | __system____default_putc_ret
05228     2D 00 64 FD | 	ret
0522c                 | 
0522c                 | __system____default_putc_terminal
0522c     06 5A 05 F6 | 	mov	COUNT_, #6
05230     B0 00 A0 FD | 	call	#pushregs_
05234     25 55 02 F6 | 	mov	local01, arg01
05238     26 57 02 F6 | 	mov	local02, arg02
0523c     2B 59 02 FB | 	rdlong	local03, local02
05240     08 58 06 F1 | 	add	local03, #8
05244     2C 5B 02 FB | 	rdlong	local04, local03
05248     08 58 86 F1 | 	sub	local03, #8
0524c     01 5A CE F7 | 	test	local04, #1 wz
05250     08 00 90 AD |  if_e	jmp	#LR__0271
05254     2B 4B 02 F6 | 	mov	arg01, local02
05258     6C 00 B0 FD | 	call	#__system____default_flush
0525c                 | LR__0271
0525c     08 58 06 F1 | 	add	local03, #8
05260     2C 5B 02 FB | 	rdlong	local04, local03
05264     02 5A 46 F5 | 	or	local04, #2
05268     2C 5B 62 FC | 	wrlong	local04, local03
0526c     08 58 86 F1 | 	sub	local03, #8
05270     2C 5D 02 FB | 	rdlong	local05, local03
05274     2E 5F 02 F6 | 	mov	local06, local05
05278     0C 58 06 F1 | 	add	local03, #12
0527c     2C 5F 02 F1 | 	add	local06, local03
05280     2F 55 42 FC | 	wrbyte	local01, local06
05284     FF 54 06 F5 | 	and	local01, #255
05288     0C 58 86 F1 | 	sub	local03, #12
0528c     01 5C 06 F1 | 	add	local05, #1
05290     2C 5D 62 FC | 	wrlong	local05, local03
05294     0A 54 0E F2 | 	cmp	local01, #10 wz
05298     0C 00 90 AD |  if_e	jmp	#LR__0272
0529c     02 00 00 FF 
052a0     00 5C 0E F2 | 	cmp	local05, ##1024 wz
052a4     10 00 90 5D |  if_ne	jmp	#LR__0273
052a8                 | LR__0272
052a8     2B 4B 02 F6 | 	mov	arg01, local02
052ac     18 00 B0 FD | 	call	#__system____default_flush
052b0     00 24 0E F2 | 	cmp	result1, #0 wz
052b4     01 54 66 56 |  if_ne	neg	local01, #1
052b8                 | LR__0273
052b8     2A 25 02 F6 | 	mov	result1, local01
052bc     AF F0 03 F6 | 	mov	ptra, fp
052c0     BF 00 A0 FD | 	call	#popregs_
052c4                 | __system____default_putc_terminal_ret
052c4     2D 00 64 FD | 	ret
052c8                 | 
052c8                 | __system____default_flush
052c8     0F 5A 05 F6 | 	mov	COUNT_, #15
052cc     B0 00 A0 FD | 	call	#pushregs_
052d0     25 55 02 F6 | 	mov	local01, arg01
052d4     2A 57 02 FB | 	rdlong	local02, local01
052d8     2B 59 02 FB | 	rdlong	local03, local02
052dc     08 56 06 F1 | 	add	local02, #8
052e0     2B 5B 02 FB | 	rdlong	local04, local02
052e4     08 56 86 F1 | 	sub	local02, #8
052e8     02 5A CE F7 | 	test	local04, #2 wz
052ec     B8 00 90 AD |  if_e	jmp	#LR__0276
052f0     00 58 5E F2 | 	cmps	local03, #0 wcz
052f4     30 01 90 ED |  if_be	jmp	#LR__0278
052f8     08 54 06 F1 | 	add	local01, #8
052fc     2A 5B 02 FB | 	rdlong	local04, local01
05300     08 54 86 F1 | 	sub	local01, #8
05304     40 5A CE F7 | 	test	local04, #64 wz
05308     5C 00 90 AD |  if_e	jmp	#LR__0275
0530c     08 54 06 F1 | 	add	local01, #8
05310     2A 5B 02 FB | 	rdlong	local04, local01
05314     08 54 86 F1 | 	sub	local01, #8
05318     80 5A CE F7 | 	test	local04, #128 wz
0531c     48 00 90 AD |  if_e	jmp	#LR__0274
05320     2C 54 06 F1 | 	add	local01, #44
05324     2A 5B 02 FB | 	rdlong	local04, local01
05328     2C 54 86 F1 | 	sub	local01, #44
0532c     2D 5D 02 FB | 	rdlong	local05, local04
05330     04 5A 06 F1 | 	add	local04, #4
05334     2D 5F 02 FB | 	rdlong	local06, local04
05338     2A 4B 02 F6 | 	mov	arg01, local01
0533c     00 4C 06 F6 | 	mov	arg02, #0
05340     02 4E 06 F6 | 	mov	arg03, #2
05344     07 61 02 F6 | 	mov	local07, objptr
05348     2E 0F 02 F6 | 	mov	objptr, local05
0534c     2D 5E 62 FD | 	call	local06
05350     30 0F 02 F6 | 	mov	objptr, local07
05354     08 54 06 F1 | 	add	local01, #8
05358     2A 5B 02 FB | 	rdlong	local04, local01
0535c     80 5A 26 F5 | 	andn	local04, #128
05360     2A 5B 62 FC | 	wrlong	local04, local01
05364     08 54 86 F1 | 	sub	local01, #8
05368                 | LR__0274
05368                 | LR__0275
05368     0C 56 06 F1 | 	add	local02, #12
0536c     2B 4D 02 F6 | 	mov	arg02, local02
05370     0C 56 86 F1 | 	sub	local02, #12
05374     14 54 06 F1 | 	add	local01, #20
05378     2A 5B 02 FB | 	rdlong	local04, local01
0537c     14 54 86 F1 | 	sub	local01, #20
05380     2D 5D 02 FB | 	rdlong	local05, local04
05384     04 5A 06 F1 | 	add	local04, #4
05388     2D 5F 02 FB | 	rdlong	local06, local04
0538c     2A 4B 02 F6 | 	mov	arg01, local01
05390     2C 4F 02 F6 | 	mov	arg03, local03
05394     07 61 02 F6 | 	mov	local07, objptr
05398     2E 0F 02 F6 | 	mov	objptr, local05
0539c     2D 5E 62 FD | 	call	local06
053a0     30 0F 02 F6 | 	mov	objptr, local07
053a4     80 00 90 FD | 	jmp	#LR__0278
053a8                 | LR__0276
053a8     08 56 06 F1 | 	add	local02, #8
053ac     2B 5B 02 FB | 	rdlong	local04, local02
053b0     08 56 86 F1 | 	sub	local02, #8
053b4     01 5A CE F7 | 	test	local04, #1 wz
053b8     6C 00 90 AD |  if_e	jmp	#LR__0277
053bc     00 58 0E F2 | 	cmp	local03, #0 wz
053c0     64 00 90 AD |  if_e	jmp	#LR__0277
053c4     2C 54 06 F1 | 	add	local01, #44
053c8     2A 63 02 FB | 	rdlong	local08, local01
053cc     2C 54 86 F1 | 	sub	local01, #44
053d0     31 5B 02 F6 | 	mov	local04, local08
053d4     2D 5D 02 FB | 	rdlong	local05, local04
053d8     04 5A 06 F1 | 	add	local04, #4
053dc     2D 65 02 FB | 	rdlong	local09, local04
053e0     04 5A 86 F1 | 	sub	local04, #4
053e4     32 5F 02 F6 | 	mov	local06, local09
053e8     2A 67 02 F6 | 	mov	local10, local01
053ec     2C 69 02 F6 | 	mov	local11, local03
053f0     34 69 62 F6 | 	neg	local11, local11
053f4     34 6B 02 F6 | 	mov	local12, local11
053f8     01 60 06 F6 | 	mov	local07, #1
053fc     33 4B 02 F6 | 	mov	arg01, local10
05400     35 4D 02 F6 | 	mov	arg02, local12
05404     01 4E 06 F6 | 	mov	arg03, #1
05408     07 6D 02 F6 | 	mov	local13, objptr
0540c     2E 0F 02 F6 | 	mov	objptr, local05
05410     2D 5E 62 FD | 	call	local06
05414     36 0F 02 F6 | 	mov	objptr, local13
05418     12 6F 02 F6 | 	mov	local14, result1
0541c     37 71 02 F6 | 	mov	local15, local14
05420     00 70 5E F2 | 	cmps	local15, #0 wcz
05424     2C 71 02 36 |  if_ae	mov	local15, local03
05428                 | LR__0277
05428                 | LR__0278
05428     2B 01 68 FC | 	wrlong	#0, local02
0542c     04 56 06 F1 | 	add	local02, #4
05430     2B 01 68 FC | 	wrlong	#0, local02
05434     04 56 06 F1 | 	add	local02, #4
05438     2B 01 68 FC | 	wrlong	#0, local02
0543c     00 24 06 F6 | 	mov	result1, #0
05440     AF F0 03 F6 | 	mov	ptra, fp
05444     BF 00 A0 FD | 	call	#popregs_
05448                 | __system____default_flush_ret
05448     2D 00 64 FD | 	ret
0544c                 | 
0544c                 | __system___rxtxioctl_0131
0544c     02 5A 05 F6 | 	mov	COUNT_, #2
05450     B0 00 A0 FD | 	call	#pushregs_
05454     26 55 02 F6 | 	mov	local01, arg02
05458     27 57 02 F6 | 	mov	local02, arg03
0545c     00 55 0E F2 | 	cmp	local01, #256 wz
05460     0C 00 90 AD |  if_e	jmp	#LR__0279
05464     01 55 0E F2 | 	cmp	local01, #257 wz
05468     1C 00 90 AD |  if_e	jmp	#LR__0280
0546c     30 00 90 FD | 	jmp	#LR__0281
05470                 | LR__0279
05470     08 14 06 F1 | 	add	ptr___system__dat__, #8
05474     0A 25 02 FB | 	rdlong	result1, ptr___system__dat__
05478     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0547c     2B 25 62 FC | 	wrlong	result1, local02
05480     00 24 06 F6 | 	mov	result1, #0
05484     30 00 90 FD | 	jmp	#LR__0282
05488                 | LR__0280
05488     2B 4B 02 FB | 	rdlong	arg01, local02
0548c     08 14 06 F1 | 	add	ptr___system__dat__, #8
05490     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
05494     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05498     00 24 06 F6 | 	mov	result1, #0
0549c     18 00 90 FD | 	jmp	#LR__0282
054a0                 | LR__0281
054a0     01 00 00 FF 
054a4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
054a8     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
054ac     01 00 00 FF 
054b0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
054b4     01 24 66 F6 | 	neg	result1, #1
054b8                 | LR__0282
054b8     AF F0 03 F6 | 	mov	ptra, fp
054bc     BF 00 A0 FD | 	call	#popregs_
054c0                 | __system___rxtxioctl_0131_ret
054c0     2D 00 64 FD | 	ret
054c4                 | 
054c4                 | __system____dummy_flush_0132
054c4     00 24 06 F6 | 	mov	result1, #0
054c8                 | __system____dummy_flush_0132_ret
054c8     2D 00 64 FD | 	ret
054cc                 | 
054cc                 | __system___vfswrite
054cc     0B 5A 05 F6 | 	mov	COUNT_, #11
054d0     B0 00 A0 FD | 	call	#pushregs_
054d4     25 55 02 F6 | 	mov	local01, arg01
054d8     26 57 02 F6 | 	mov	local02, arg02
054dc     27 59 02 F6 | 	mov	local03, arg03
054e0     2B 5B 02 F6 | 	mov	local04, local02
054e4     08 54 06 F1 | 	add	local01, #8
054e8     2A 5D 02 FB | 	rdlong	local05, local01
054ec     08 54 86 F1 | 	sub	local01, #8
054f0     02 5C CE F7 | 	test	local05, #2 wz
054f4     1C 00 90 5D |  if_ne	jmp	#LR__0283
054f8     01 00 00 FF 
054fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05500     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05504     01 00 00 FF 
05508     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0550c     01 24 66 F6 | 	neg	result1, #1
05510     70 01 90 FD | 	jmp	#LR__0291
05514                 | LR__0283
05514     08 54 06 F1 | 	add	local01, #8
05518     2A 5D 02 FB | 	rdlong	local05, local01
0551c     08 54 86 F1 | 	sub	local01, #8
05520     40 5C CE F7 | 	test	local05, #64 wz
05524     5C 00 90 AD |  if_e	jmp	#LR__0285
05528     08 54 06 F1 | 	add	local01, #8
0552c     2A 5D 02 FB | 	rdlong	local05, local01
05530     08 54 86 F1 | 	sub	local01, #8
05534     80 5C CE F7 | 	test	local05, #128 wz
05538     48 00 90 AD |  if_e	jmp	#LR__0284
0553c     2C 54 06 F1 | 	add	local01, #44
05540     2A 5D 02 FB | 	rdlong	local05, local01
05544     2C 54 86 F1 | 	sub	local01, #44
05548     2E 5F 02 FB | 	rdlong	local06, local05
0554c     04 5C 06 F1 | 	add	local05, #4
05550     2E 61 02 FB | 	rdlong	local07, local05
05554     2A 4B 02 F6 | 	mov	arg01, local01
05558     00 4C 06 F6 | 	mov	arg02, #0
0555c     02 4E 06 F6 | 	mov	arg03, #2
05560     07 63 02 F6 | 	mov	local08, objptr
05564     2F 0F 02 F6 | 	mov	objptr, local06
05568     2D 60 62 FD | 	call	local07
0556c     31 0F 02 F6 | 	mov	objptr, local08
05570     08 54 06 F1 | 	add	local01, #8
05574     2A 5D 02 FB | 	rdlong	local05, local01
05578     80 5C 26 F5 | 	andn	local05, #128
0557c     2A 5D 62 FC | 	wrlong	local05, local01
05580     08 54 86 F1 | 	sub	local01, #8
05584                 | LR__0284
05584                 | LR__0285
05584     14 54 06 F1 | 	add	local01, #20
05588     2A 5D 0A FB | 	rdlong	local05, local01 wz
0558c     14 54 86 F1 | 	sub	local01, #20
05590     7C 00 90 AD |  if_e	jmp	#LR__0287
05594     14 54 06 F1 | 	add	local01, #20
05598     2A 5D 02 FB | 	rdlong	local05, local01
0559c     14 54 86 F1 | 	sub	local01, #20
055a0     2E 5F 02 FB | 	rdlong	local06, local05
055a4     04 5C 06 F1 | 	add	local05, #4
055a8     2E 61 02 FB | 	rdlong	local07, local05
055ac     2B 4D 02 F6 | 	mov	arg02, local02
055b0     2C 4F 02 F6 | 	mov	arg03, local03
055b4     2A 4B 02 F6 | 	mov	arg01, local01
055b8     07 63 02 F6 | 	mov	local08, objptr
055bc     2F 0F 02 F6 | 	mov	objptr, local06
055c0     2D 60 62 FD | 	call	local07
055c4     31 0F 02 F6 | 	mov	objptr, local08
055c8     12 65 02 F6 | 	mov	local09, result1
055cc     00 64 5E F2 | 	cmps	local09, #0 wcz
055d0     34 00 90 3D |  if_ae	jmp	#LR__0286
055d4     08 54 06 F1 | 	add	local01, #8
055d8     2A 5D 02 FB | 	rdlong	local05, local01
055dc     20 5C 46 F5 | 	or	local05, #32
055e0     2A 5D 62 FC | 	wrlong	local05, local01
055e4     01 00 00 FF 
055e8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055ec     0A 65 62 FC | 	wrlong	local09, ptr___system__dat__
055f0     01 00 00 FF 
055f4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
055f8     00 64 0E F2 | 	cmp	local09, #0 wz
055fc     01 24 66 56 |  if_ne	neg	result1, #1
05600     00 24 06 A6 |  if_e	mov	result1, #0
05604     7C 00 90 FD | 	jmp	#LR__0291
05608                 | LR__0286
05608     32 25 02 F6 | 	mov	result1, local09
0560c     74 00 90 FD | 	jmp	#LR__0291
05610                 | LR__0287
05610     18 54 06 F1 | 	add	local01, #24
05614     2A 67 0A FB | 	rdlong	local10, local01 wz
05618     18 54 86 F1 | 	sub	local01, #24
0561c     1C 00 90 5D |  if_ne	jmp	#LR__0288
05620     01 00 00 FF 
05624     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05628     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0562c     01 00 00 FF 
05630     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05634     01 24 66 F6 | 	neg	result1, #1
05638     48 00 90 FD | 	jmp	#LR__0291
0563c                 | LR__0288
0563c     00 64 06 F6 | 	mov	local09, #0
05640                 | LR__0289
05640     00 58 1E F2 | 	cmp	local03, #0 wcz
05644     38 00 90 ED |  if_be	jmp	#LR__0290
05648     33 5D 02 F6 | 	mov	local05, local10
0564c     2E 5F 02 FB | 	rdlong	local06, local05
05650     04 5C 06 F1 | 	add	local05, #4
05654     2E 61 02 FB | 	rdlong	local07, local05
05658     2D 4B C2 FA | 	rdbyte	arg01, local04
0565c     2A 4D 02 F6 | 	mov	arg02, local01
05660     07 69 02 F6 | 	mov	local11, objptr
05664     2F 0F 02 F6 | 	mov	objptr, local06
05668     01 5A 06 F1 | 	add	local04, #1
0566c     2D 60 62 FD | 	call	local07
05670     34 0F 02 F6 | 	mov	objptr, local11
05674     12 65 02 F1 | 	add	local09, result1
05678     01 58 86 F1 | 	sub	local03, #1
0567c     C0 FF 9F FD | 	jmp	#LR__0289
05680                 | LR__0290
05680     32 25 02 F6 | 	mov	result1, local09
05684                 | LR__0291
05684     AF F0 03 F6 | 	mov	ptra, fp
05688     BF 00 A0 FD | 	call	#popregs_
0568c                 | __system___vfswrite_ret
0568c     2D 00 64 FD | 	ret
05690                 | 
05690                 | __system___vfsread
05690     0F 5A 05 F6 | 	mov	COUNT_, #15
05694     B0 00 A0 FD | 	call	#pushregs_
05698     2C F0 07 F1 | 	add	ptra, #44
0569c     04 5E 05 F1 | 	add	fp, #4
056a0     AF 4A 62 FC | 	wrlong	arg01, fp
056a4     04 5E 05 F1 | 	add	fp, #4
056a8     AF 4C 62 FC | 	wrlong	arg02, fp
056ac     04 5E 05 F1 | 	add	fp, #4
056b0     AF 4E 62 FC | 	wrlong	arg03, fp
056b4     04 5E 85 F1 | 	sub	fp, #4
056b8     AF 54 02 FB | 	rdlong	local01, fp
056bc     14 5E 05 F1 | 	add	fp, #20
056c0     AF 54 62 FC | 	wrlong	local01, fp
056c4     04 5E 05 F1 | 	add	fp, #4
056c8     AF 00 68 FC | 	wrlong	#0, fp
056cc     1C 5E 85 F1 | 	sub	fp, #28
056d0     AF 56 02 FB | 	rdlong	local02, fp
056d4     04 5E 85 F1 | 	sub	fp, #4
056d8     08 56 06 F1 | 	add	local02, #8
056dc     2B 55 02 FB | 	rdlong	local01, local02
056e0     01 54 CE F7 | 	test	local01, #1 wz
056e4     1C 00 90 5D |  if_ne	jmp	#LR__0292
056e8     01 00 00 FF 
056ec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
056f0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
056f4     01 00 00 FF 
056f8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
056fc     01 24 66 F6 | 	neg	result1, #1
05700     9C 02 90 FD | 	jmp	#LR__0300
05704                 | LR__0292
05704     04 5E 05 F1 | 	add	fp, #4
05708     AF 54 02 FB | 	rdlong	local01, fp
0570c     04 5E 85 F1 | 	sub	fp, #4
05710     10 54 06 F1 | 	add	local01, #16
05714     2A 59 0A FB | 	rdlong	local03, local01 wz
05718     B4 00 90 AD |  if_e	jmp	#LR__0294
0571c     04 5E 05 F1 | 	add	fp, #4
05720     AF 5A 02 FB | 	rdlong	local04, fp
05724     10 5A 06 F1 | 	add	local04, #16
05728     2D 55 02 FB | 	rdlong	local01, local04
0572c     2A 57 02 FB | 	rdlong	local02, local01
05730     04 54 06 F1 | 	add	local01, #4
05734     2A 59 02 FB | 	rdlong	local03, local01
05738     AF 4A 02 FB | 	rdlong	arg01, fp
0573c     04 5E 05 F1 | 	add	fp, #4
05740     AF 4C 02 FB | 	rdlong	arg02, fp
05744     04 5E 05 F1 | 	add	fp, #4
05748     AF 4E 02 FB | 	rdlong	arg03, fp
0574c     0C 5E 85 F1 | 	sub	fp, #12
05750     07 5D 02 F6 | 	mov	local05, objptr
05754     2B 0F 02 F6 | 	mov	objptr, local02
05758     2D 58 62 FD | 	call	local03
0575c     2E 0F 02 F6 | 	mov	objptr, local05
05760     10 5E 05 F1 | 	add	fp, #16
05764     AF 24 62 FC | 	wrlong	result1, fp
05768     10 5E 85 F1 | 	sub	fp, #16
0576c     00 24 5E F2 | 	cmps	result1, #0 wcz
05770     4C 00 90 3D |  if_ae	jmp	#LR__0293
05774     04 5E 05 F1 | 	add	fp, #4
05778     AF 54 02 FB | 	rdlong	local01, fp
0577c     2A 5B 02 F6 | 	mov	local04, local01
05780     08 5A 06 F1 | 	add	local04, #8
05784     2D 59 02 FB | 	rdlong	local03, local04
05788     20 58 46 F5 | 	or	local03, #32
0578c     08 54 06 F1 | 	add	local01, #8
05790     2A 59 62 FC | 	wrlong	local03, local01
05794     0C 5E 05 F1 | 	add	fp, #12
05798     AF 4A 0A FB | 	rdlong	arg01, fp wz
0579c     10 5E 85 F1 | 	sub	fp, #16
057a0     01 00 00 FF 
057a4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
057a8     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
057ac     01 00 00 FF 
057b0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
057b4     01 24 66 56 |  if_ne	neg	result1, #1
057b8     00 24 06 A6 |  if_e	mov	result1, #0
057bc     E0 01 90 FD | 	jmp	#LR__0300
057c0                 | LR__0293
057c0     10 5E 05 F1 | 	add	fp, #16
057c4     AF 24 02 FB | 	rdlong	result1, fp
057c8     10 5E 85 F1 | 	sub	fp, #16
057cc     D0 01 90 FD | 	jmp	#LR__0300
057d0                 | LR__0294
057d0     04 5E 05 F1 | 	add	fp, #4
057d4     AF 54 02 FB | 	rdlong	local01, fp
057d8     1C 54 06 F1 | 	add	local01, #28
057dc     2A 59 02 FB | 	rdlong	local03, local01
057e0     14 5E 05 F1 | 	add	fp, #20
057e4     AF 58 62 FC | 	wrlong	local03, fp
057e8     AF 54 0A FB | 	rdlong	local01, fp wz
057ec     18 5E 85 F1 | 	sub	fp, #24
057f0     1C 00 90 5D |  if_ne	jmp	#LR__0295
057f4     01 00 00 FF 
057f8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
057fc     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05800     01 00 00 FF 
05804     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05808     01 24 66 F6 | 	neg	result1, #1
0580c     90 01 90 FD | 	jmp	#LR__0300
05810                 | LR__0295
05810     04 5E 05 F1 | 	add	fp, #4
05814     AF 54 02 FB | 	rdlong	local01, fp
05818     04 5E 85 F1 | 	sub	fp, #4
0581c     24 54 06 F1 | 	add	local01, #36
05820     2A 59 0A FB | 	rdlong	local03, local01 wz
05824     A0 00 90 AD |  if_e	jmp	#LR__0297
05828     24 5E 05 F1 | 	add	fp, #36
0582c     AF 5E 02 F6 | 	mov	local06, fp
05830     20 5E 85 F1 | 	sub	fp, #32
05834     AF 60 02 FB | 	rdlong	local07, fp
05838     30 5B 02 F6 | 	mov	local04, local07
0583c     24 5A 06 F1 | 	add	local04, #36
05840     2D 63 02 FB | 	rdlong	local08, local04
05844     31 55 02 F6 | 	mov	local01, local08
05848     2A 57 02 FB | 	rdlong	local02, local01
0584c     04 54 06 F1 | 	add	local01, #4
05850     2A 65 02 FB | 	rdlong	local09, local01
05854     32 59 02 F6 | 	mov	local03, local09
05858     30 67 02 F6 | 	mov	local10, local07
0585c     04 5E 85 F1 | 	sub	fp, #4
05860     33 69 02 F6 | 	mov	local11, local10
05864     00 6B 06 F6 | 	mov	local12, #256
05868     2F 6D 02 F6 | 	mov	local13, local06
0586c     34 4B 02 F6 | 	mov	arg01, local11
05870     00 4D 06 F6 | 	mov	arg02, #256
05874     36 4F 02 F6 | 	mov	arg03, local13
05878     07 6F 02 F6 | 	mov	local14, objptr
0587c     2B 0F 02 F6 | 	mov	objptr, local02
05880     2D 58 62 FD | 	call	local03
05884     37 0F 02 F6 | 	mov	objptr, local14
05888     12 71 02 F6 | 	mov	local15, result1
0588c     10 5E 05 F1 | 	add	fp, #16
05890     AF 70 62 FC | 	wrlong	local15, fp
05894     AF 56 0A FB | 	rdlong	local02, fp wz
05898     10 5E 85 F1 | 	sub	fp, #16
0589c     28 00 90 5D |  if_ne	jmp	#LR__0296
058a0     24 5E 05 F1 | 	add	fp, #36
058a4     AF 5A 02 FB | 	rdlong	local04, fp
058a8     24 5E 85 F1 | 	sub	fp, #36
058ac     2D 59 02 F6 | 	mov	local03, local04
058b0     02 58 0E F5 | 	and	local03, #2 wz
058b4     10 00 90 AD |  if_e	jmp	#LR__0296
058b8     01 54 06 F6 | 	mov	local01, #1
058bc     20 5E 05 F1 | 	add	fp, #32
058c0     AF 02 68 FC | 	wrlong	#1, fp
058c4     20 5E 85 F1 | 	sub	fp, #32
058c8                 | LR__0296
058c8                 | LR__0297
058c8     10 5E 05 F1 | 	add	fp, #16
058cc     AF 00 68 FC | 	wrlong	#0, fp
058d0     10 5E 85 F1 | 	sub	fp, #16
058d4                 | LR__0298
058d4     0C 5E 05 F1 | 	add	fp, #12
058d8     AF 54 02 FB | 	rdlong	local01, fp
058dc     0C 5E 85 F1 | 	sub	fp, #12
058e0     00 54 1E F2 | 	cmp	local01, #0 wcz
058e4     AC 00 90 ED |  if_be	jmp	#LR__0299
058e8     18 5E 05 F1 | 	add	fp, #24
058ec     AF 54 02 FB | 	rdlong	local01, fp
058f0     2A 57 02 FB | 	rdlong	local02, local01
058f4     04 54 06 F1 | 	add	local01, #4
058f8     2A 59 02 FB | 	rdlong	local03, local01
058fc     14 5E 85 F1 | 	sub	fp, #20
05900     AF 4A 02 FB | 	rdlong	arg01, fp
05904     04 5E 85 F1 | 	sub	fp, #4
05908     07 69 02 F6 | 	mov	local11, objptr
0590c     2B 0F 02 F6 | 	mov	objptr, local02
05910     2D 58 62 FD | 	call	local03
05914     34 0F 02 F6 | 	mov	objptr, local11
05918     12 67 02 F6 | 	mov	local10, result1
0591c     14 5E 05 F1 | 	add	fp, #20
05920     AF 66 62 FC | 	wrlong	local10, fp
05924     14 5E 85 F1 | 	sub	fp, #20
05928     00 66 5E F2 | 	cmps	local10, #0 wcz
0592c     64 00 90 CD |  if_b	jmp	#LR__0299
05930     1C 5E 05 F1 | 	add	fp, #28
05934     AF 54 02 FB | 	rdlong	local01, fp
05938     2A 59 02 F6 | 	mov	local03, local01
0593c     01 58 06 F1 | 	add	local03, #1
05940     AF 58 62 FC | 	wrlong	local03, fp
05944     08 5E 85 F1 | 	sub	fp, #8
05948     AF 60 02 FB | 	rdlong	local07, fp
0594c     2A 61 42 FC | 	wrbyte	local07, local01
05950     04 5E 85 F1 | 	sub	fp, #4
05954     AF 54 02 FB | 	rdlong	local01, fp
05958     01 54 06 F1 | 	add	local01, #1
0595c     AF 54 62 FC | 	wrlong	local01, fp
05960     04 5E 85 F1 | 	sub	fp, #4
05964     AF 54 02 FB | 	rdlong	local01, fp
05968     01 54 86 F1 | 	sub	local01, #1
0596c     AF 54 62 FC | 	wrlong	local01, fp
05970     14 5E 05 F1 | 	add	fp, #20
05974     AF 54 0A FB | 	rdlong	local01, fp wz
05978     20 5E 85 F1 | 	sub	fp, #32
0597c     54 FF 9F AD |  if_e	jmp	#LR__0298
05980     14 5E 05 F1 | 	add	fp, #20
05984     AF 58 02 FB | 	rdlong	local03, fp
05988     14 5E 85 F1 | 	sub	fp, #20
0598c     0A 58 0E F2 | 	cmp	local03, #10 wz
05990     40 FF 9F 5D |  if_ne	jmp	#LR__0298
05994                 | LR__0299
05994     10 5E 05 F1 | 	add	fp, #16
05998     AF 24 02 FB | 	rdlong	result1, fp
0599c     10 5E 85 F1 | 	sub	fp, #16
059a0                 | LR__0300
059a0     AF F0 03 F6 | 	mov	ptra, fp
059a4     BF 00 A0 FD | 	call	#popregs_
059a8                 | __system___vfsread_ret
059a8     2D 00 64 FD | 	ret
059ac                 | 
059ac                 | ' 	
059ac                 | ' 	FUNCTION pfunc(c as integer) as integer
059ac                 | ___strs_cl_pfunc
059ac                 | ' 		if (i < 16) then
059ac     04 0E 06 F1 | 	add	objptr, #4
059b0     07 2B 02 FB | 	rdlong	_var01, objptr
059b4     04 0E 86 F1 | 	sub	objptr, #4
059b8     10 2A 5E F2 | 	cmps	_var01, #16 wcz
059bc     2C 00 90 3D |  if_ae	jmp	#LR__0301
059c0     07 2D 02 FB | 	rdlong	_var02, objptr
059c4     04 0E 06 F1 | 	add	objptr, #4
059c8     07 2F 02 FB | 	rdlong	_var03, objptr
059cc     16 2F 02 F1 | 	add	_var03, _var02
059d0     17 4B 42 FC | 	wrbyte	arg01, _var03
059d4     07 2B 02 FB | 	rdlong	_var01, objptr
059d8     01 2A 06 F1 | 	add	_var01, #1
059dc     07 2B 62 FC | 	wrlong	_var01, objptr
059e0     04 0E 86 F1 | 	sub	objptr, #4
059e4                 | ' 			p(i) = c
059e4                 | ' 			i = i+1
059e4                 | ' 			return 1
059e4     01 24 06 F6 | 	mov	result1, #1
059e8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
059ec                 | LR__0301
059ec                 | ' 			return -1
059ec     01 24 66 F6 | 	neg	result1, #1
059f0                 | ___strs_cl_pfunc_ret
059f0     2D 00 64 FD | 	ret
059f4                 | 
059f4                 | __struct__s_vfs_file_t_putchar
059f4     04 5A 05 F6 | 	mov	COUNT_, #4
059f8     B0 00 A0 FD | 	call	#pushregs_
059fc     18 0E 06 F1 | 	add	objptr, #24
05a00     07 55 0A FB | 	rdlong	local01, objptr wz
05a04     18 0E 86 F1 | 	sub	objptr, #24
05a08     00 24 06 A6 |  if_e	mov	result1, #0
05a0c     3C 00 90 AD |  if_e	jmp	#LR__0302
05a10     18 0E 06 F1 | 	add	objptr, #24
05a14     07 55 02 FB | 	rdlong	local01, objptr
05a18     18 0E 86 F1 | 	sub	objptr, #24
05a1c     2A 57 02 FB | 	rdlong	local02, local01
05a20     04 54 06 F1 | 	add	local01, #4
05a24     2A 59 02 FB | 	rdlong	local03, local01
05a28     07 4D 02 F6 | 	mov	arg02, objptr
05a2c     07 5B 02 F6 | 	mov	local04, objptr
05a30     2B 0F 02 F6 | 	mov	objptr, local02
05a34     2D 58 62 FD | 	call	local03
05a38     2D 0F 02 F6 | 	mov	objptr, local04
05a3c     00 24 5E F2 | 	cmps	result1, #0 wcz
05a40     00 54 06 C6 |  if_b	mov	local01, #0
05a44     01 54 06 36 |  if_ae	mov	local01, #1
05a48     2A 25 02 F6 | 	mov	result1, local01
05a4c                 | LR__0302
05a4c     AF F0 03 F6 | 	mov	ptra, fp
05a50     BF 00 A0 FD | 	call	#popregs_
05a54                 | __struct__s_vfs_file_t_putchar_ret
05a54     2D 00 64 FD | 	ret
05a58                 | 
05a58                 | __struct__s_vfs_file_t_getchar
05a58     04 5A 05 F6 | 	mov	COUNT_, #4
05a5c     B0 00 A0 FD | 	call	#pushregs_
05a60     1C 0E 06 F1 | 	add	objptr, #28
05a64     07 55 0A FB | 	rdlong	local01, objptr wz
05a68     1C 0E 86 F1 | 	sub	objptr, #28
05a6c     01 24 66 A6 |  if_e	neg	result1, #1
05a70     2C 00 90 AD |  if_e	jmp	#LR__0303
05a74                 | '         return getcf(__this);
05a74     1C 0E 06 F1 | 	add	objptr, #28
05a78     07 55 02 FB | 	rdlong	local01, objptr
05a7c     1C 0E 86 F1 | 	sub	objptr, #28
05a80     2A 57 02 FB | 	rdlong	local02, local01
05a84     04 54 06 F1 | 	add	local01, #4
05a88     2A 59 02 FB | 	rdlong	local03, local01
05a8c     07 4B 02 F6 | 	mov	arg01, objptr
05a90     07 5B 02 F6 | 	mov	local04, objptr
05a94     2B 0F 02 F6 | 	mov	objptr, local02
05a98     2D 58 62 FD | 	call	local03
05a9c     2D 0F 02 F6 | 	mov	objptr, local04
05aa0                 | LR__0303
05aa0     AF F0 03 F6 | 	mov	ptra, fp
05aa4     BF 00 A0 FD | 	call	#popregs_
05aa8                 | __struct__s_vfs_file_t_getchar_ret
05aa8     2D 00 64 FD | 	ret
05aac                 | 
05aac                 | __struct___bas_wrap_sender_tx
05aac     04 5A 05 F6 | 	mov	COUNT_, #4
05ab0     B0 00 A0 FD | 	call	#pushregs_
05ab4     07 55 02 FB | 	rdlong	local01, objptr
05ab8     2A 57 02 FB | 	rdlong	local02, local01
05abc     04 54 06 F1 | 	add	local01, #4
05ac0     2A 59 02 FB | 	rdlong	local03, local01
05ac4     07 5B 02 F6 | 	mov	local04, objptr
05ac8     2B 0F 02 F6 | 	mov	objptr, local02
05acc     2D 58 62 FD | 	call	local03
05ad0     2D 0F 02 F6 | 	mov	objptr, local04
05ad4     01 24 06 F6 | 	mov	result1, #1
05ad8     AF F0 03 F6 | 	mov	ptra, fp
05adc     BF 00 A0 FD | 	call	#popregs_
05ae0                 | __struct___bas_wrap_sender_tx_ret
05ae0     2D 00 64 FD | 	ret
05ae4                 | 
05ae4                 | LR__0304
05ae4     20 21 21 21 
05ae8     20 63 6F 72 
05aec     72 75 70 74 
05af0     65 64 20 68 
05af4     65 61 70 3F 
05af8     3F 3F 20 21 
05afc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
05aff     00          | 	byte	0
05b00                 | LR__0305
05b00     20 21 21 21 
05b04     20 6F 75 74 
05b08     20 6F 66 20 
05b0c     68 65 61 70 
05b10     20 6D 65 6D 
05b14     6F 72 79 20 
05b18     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
05b1c     00          | 	byte	0
05b1d                 | LR__0306
05b1d     20 21 21 21 
05b21     20 63 6F 72 
05b25     72 75 70 74 
05b29     65 64 20 68 
05b2d     65 61 70 20 
05b31     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
05b35     00          | 	byte	0
05b36                 | LR__0307
05b36     42 61 73 69 
05b3a     63 20 74 65 
05b3e     73 74       | 	byte	"Basic test"
05b40     00          | 	byte	0
05b41                 | LR__0308
05b41     4B 65 79 62 
05b45     6F 61 72 64 
05b49     20 6B 65 79 
05b4d     20 72 65 6C 
05b51     65 61 73 65 
05b55     64 2C 20 73 
05b59     63 61 6E 63 
05b5d     6F 64 65 20 | 	byte	"Keyboard key released, scancode "
05b61     00          | 	byte	0
05b62                 | LR__0309
05b62     4B 65 79 62 
05b66     6F 61 72 64 
05b6a     20 6B 65 79 
05b6e     20 70 72 65 
05b72     73 73 65 64 
05b76     2C 20 20 73 
05b7a     63 61 6E 63 
05b7e     6F 64 65 20 | 	byte	"Keyboard key pressed,  scancode "
05b82     00          | 	byte	0
05b83                 | LR__0310
05b83     2C 20 63 68 
05b87     61 72 63 6F 
05b8b     64 65 20    | 	byte	", charcode "
05b8e     00          | 	byte	0
05b8f                 | LR__0311
05b8f     4B 65 79 62 
05b93     6F 61 72 64 
05b97     20 6D 6F 64 
05b9b     69 66 69 65 
05b9f     72 73 20 72 
05ba3     65 6C 65 61 
05ba7     73 65 64    | 	byte	"Keyboard modifiers released"
05baa     00          | 	byte	0
05bab                 | LR__0312
05bab     4B 65 79 62 
05baf     6F 61 72 64 
05bb3     20 6D 6F 64 
05bb7     69 66 69 65 
05bbb     72 73 20 70 
05bbf     72 65 73 73 
05bc3     65 64 3A 20 | 	byte	"Keyboard modifiers pressed: "
05bc7     00          | 	byte	0
05bc8                 | LR__0313
05bc8     4D 6F 75 73 
05bcc     65 20 6D 6F 
05bd0     76 65 64 2C 
05bd4     20 78 3D 20 | 	byte	"Mouse moved, x= "
05bd8     00          | 	byte	0
05bd9                 | LR__0314
05bd9     20 79 3D 20 | 	byte	" y= "
05bdd     00          | 	byte	0
05bde                 | LR__0315
05bde     4D 6F 75 73 
05be2     65 20 6D 6F 
05be6     76 65 64 2C 
05bea     20 78 3D 20 | 	byte	"Mouse moved, x= "
05bee     00          | 	byte	0
05bef                 | LR__0316
05bef     20 79 3D 20 | 	byte	" y= "
05bf3     00          | 	byte	0
05bf4                 | LR__0317
05bf4     4D 6F 75 73 
05bf8     65 77 68 65 
05bfc     65 6C 3A 20 | 	byte	"Mousewheel: "
05c00     00          | 	byte	0
05c01                 | LR__0318
05c01     4D 6F 75 73 
05c05     65 20 6B 65 
05c09     79 3A 20    | 	byte	"Mouse key: "
05c0c     00          | 	byte	0
05c0d                 | LR__0319
05c0d     4D 6F 75 73 
05c11     65 20 63 6C 
05c15     69 63 6B 65 
05c19     64          | 	byte	"Mouse clicked"
05c1a     00          | 	byte	0
05c1b                 | LR__0320
05c1b     4D 6F 75 73 
05c1f     65 20 64 6F 
05c23     75 62 6C 65 
05c27     20 63 6C 69 
05c2b     63 6B 65 64 | 	byte	"Mouse double clicked"
05c2f     00          | 	byte	0
05c30                 | LR__0321
05c30     4D 69 64 69 
05c34     20 6E 6F 74 
05c38     65 20 6F 66 
05c3c     66 2C 20 63 
05c40     68 61 6E 6E 
05c44     65 6C 20    | 	byte	"Midi note off, channel "
05c47     00          | 	byte	0
05c48                 | LR__0322
05c48     2C 20 6E 6F 
05c4c     74 65 20    | 	byte	", note "
05c4f     00          | 	byte	0
05c50                 | LR__0323
05c50     4D 69 64 69 
05c54     20 6E 6F 74 
05c58     65 20 6F 6E 
05c5c     2C 20 20 63 
05c60     68 61 6E 6E 
05c64     65 6C 20    | 	byte	"Midi note on,  channel "
05c67     00          | 	byte	0
05c68                 | LR__0324
05c68     2C 20 6E 6F 
05c6c     74 65 20    | 	byte	", note "
05c6f     00          | 	byte	0
05c70                 | LR__0325
05c70     2C 20 76 65 
05c74     6C 6F 63 69 
05c78     74 79 20    | 	byte	", velocity "
05c7b     00          | 	byte	0
05c7c                 | LR__0326
05c7c     4D 69 64 69 
05c80     20 70 6F 6C 
05c84     79 20 61 66 
05c88     74 65 72 74 
05c8c     6F 75 63 68 
05c90     2C 20 63 68 
05c94     61 6E 6E 65 
05c98     6C 20       | 	byte	"Midi poly aftertouch, channel "
05c9a     00          | 	byte	0
05c9b                 | LR__0327
05c9b     20 6E 6F 74 
05c9f     65 20       | 	byte	" note "
05ca1     00          | 	byte	0
05ca2                 | LR__0328
05ca2     2C 20 76 65 
05ca6     6C 6F 63 69 
05caa     74 79 20    | 	byte	", velocity "
05cad     00          | 	byte	0
05cae                 | LR__0329
05cae     4D 69 64 69 
05cb2     20 63 6F 6E 
05cb6     74 72 6F 6C 
05cba     20 63 68 61 
05cbe     6E 67 65 2C 
05cc2     20 63 68 61 
05cc6     6E 6E 65 6C 
05cca     20          | 	byte	"Midi control change, channel "
05ccb     00          | 	byte	0
05ccc                 | LR__0330
05ccc     20 63 6F 6E 
05cd0     74 72 6F 6C 
05cd4     6C 65 72 20 | 	byte	" controller "
05cd8     00          | 	byte	0
05cd9                 | LR__0331
05cd9     2C 20 76 61 
05cdd     6C 75 65 20 | 	byte	", value "
05ce1     00          | 	byte	0
05ce2                 | LR__0332
05ce2     4D 69 64 69 
05ce6     20 70 72 6F 
05cea     67 72 61 6D 
05cee     20 63 68 61 
05cf2     6E 67 65 2C 
05cf6     20 63 68 61 
05cfa     6E 6E 65 6C 
05cfe     20          | 	byte	"Midi program change, channel "
05cff     00          | 	byte	0
05d00                 | LR__0333
05d00     20 70 72 6F 
05d04     67 72 61 6D 
05d08     20          | 	byte	" program "
05d09     00          | 	byte	0
05d0a                 | LR__0334
05d0a     4D 69 64 69 
05d0e     20 6D 6F 6E 
05d12     6F 20 61 66 
05d16     74 65 72 74 
05d1a     6F 75 63 68 
05d1e     2C 20 63 68 
05d22     61 6E 6E 65 
05d26     6C 20       | 	byte	"Midi mono aftertouch, channel "
05d28     00          | 	byte	0
05d29                 | LR__0335
05d29     20 76 61 6C 
05d2d     75 65 20    | 	byte	" value "
05d30     00          | 	byte	0
05d31                 | LR__0336
05d31     4D 69 64 69 
05d35     20 70 69 74 
05d39     63 68 20 62 
05d3d     65 6E 64 2C 
05d41     20 63 68 61 
05d45     6E 6E 65 6C 
05d49     20          | 	byte	"Midi pitch bend, channel "
05d4a     00          | 	byte	0
05d4b                 | LR__0337
05d4b     20 76 61 6C 
05d4f     75 65 20    | 	byte	" value "
05d52     00          | 	byte	0
05d53                 | LR__0338
05d53     4E 6F 76 61 
05d57     74 69 6F 6E 
05d5b     20 63 6F 6E 
05d5f     74 72 6F 6C 
05d63     20 6B 65 79 
05d67     20          | 	byte	"Novation control key "
05d68     00          | 	byte	0
05d69                 | LR__0339
05d69     53 65 72 69 
05d6d     61 6C 20 62 
05d71     79 74 65 20 
05d75     72 65 61 64 
05d79     3A 20       | 	byte	"Serial byte read: "
05d7b     00          | 	byte	0
05d7c                 | 	alignl
05d7c                 | _hng030rm_spin2_dat_
05d7c     00 00 00 00 
05d80     00 00 00 00 
05d84     00 00 00 00 
05d88     00 00 00 00 
05d8c     00 00 00    | vga_font       file "vgafont.def"
05d8f     7E 81 A5 81 
05d93     81 BD 99 81 
05d97     81 7E 00 00 
05d9b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
05d9f     7E FF DB FF 
05da3     FF C3 E7 FF 
05da7     FF 7E 00 00 
05dab     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
05daf     00 36 7F 7F 
05db3     7F 7F 3E 1C 
05db7     08 00 00 00 
05dbb     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
05dbf     00 08 1C 3E 
05dc3     7F 3E 1C 08 
05dc7     00 00 00 00 
05dcb     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
05dcf     18 3C 3C E7 
05dd3     E7 E7 18 18 
05dd7     3C 00 00 00 
05ddb     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05ddf     18 3C 7E FF 
05de3     FF 7E 18 18 
05de7     3C 00 00 00 
05deb     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05def     00 00 00 18 
05df3     3C 3C 18 00 
05df7     00 00 00 00 
05dfb     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
05dff     FF FF FF E7 
05e03     C3 C3 E7 FF 
05e07     FF FF FF FF 
05e0b     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05e0f     00 00 3C 66 
05e13     42 42 66 3C 
05e17     00 00 00 00 
05e1b     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
05e1f     FF FF C3 99 
05e23     BD BD 99 C3 
05e27     FF FF FF FF 
05e2b     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05e2f     78 70 58 4C 
05e33     1E 33 33 33 
05e37     33 1E 00 00 
05e3b     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
05e3f     3C 66 66 66 
05e43     66 3C 18 7E 
05e47     18 18 00 00 
05e4b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
05e4f     FC CC FC 0C 
05e53     0C 0C 0C 0E 
05e57     0F 07 00 00 
05e5b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
05e5f     FE C6 FE C6 
05e63     C6 C6 C6 E6 
05e67     E7 67 03 00 
05e6b     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
05e6f     18 18 DB 3C 
05e73     E7 3C DB 18 
05e77     18 00 00 00 
05e7b     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
05e7f     03 07 0F 1F 
05e83     7F 1F 0F 07 
05e87     03 01 00 00 
05e8b     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
05e8f     60 70 78 7C 
05e93     7F 7C 78 70 
05e97     60 40 00 00 
05e9b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
05e9f     18 3C 7E 18 
05ea3     18 18 7E 3C 
05ea7     18 00 00 00 
05eab     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
05eaf     66 66 66 66 
05eb3     66 66 66    | 	byte	$66[7]
05eb6     00 66 66 00 
05eba     00 00 00 00 
05ebe     00 FE DB DB 
05ec2     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
05ec6     D8 D8 D8 00 
05eca     00 00 00 3E 
05ece     63 06 1C 36 
05ed2     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
05ed6     30 63 3E 00 
05eda     00 00 00 00 
05ede     00 00 00 00 
05ee2     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05ee6     7F 7F 7F 00 
05eea     00 00 00 00 
05eee     00 18 3C 7E 
05ef2     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
05ef6     3C 18 7E 00 
05efa     00 00 00 00 
05efe     00 18 3C 7E 
05f02     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
05f06     18 18 18 00 
05f0a     00 00 00 00 
05f0e     00 18 18 18 
05f12     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
05f16     7E 3C 18 00 
05f1a     00 00 00 00 
05f1e     00 00 00 18 
05f22     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
05f26     00 00 00 00 
05f2a     00 00 00 00 
05f2e     00 00 00    | 	byte	$00[11]
05f31     0C 06 7F 06 
05f35     0C 00 00 00 
05f39     00 00 00 00 
05f3d     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05f41     00 03 03 03 
05f45     7F 00 00 00 
05f49     00 00 00 00 
05f4d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05f51     14 36 7F 36 
05f55     14 00 00 00 
05f59     00 00 00 00 
05f5d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
05f61     1C 1C 3E 3E 
05f65     7F 7F 00 00 
05f69     00 00 00 00 
05f6d     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05f71     7F 3E 3E 1C 
05f75     1C 08 00 00 
05f79     00 00 00 00 
05f7d     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05f81     00 00 00 00 
05f85     00 00 00 00 
05f89     00 00 00 00 
05f8d     00 00       | 	byte	$00[14]
05f8f     18 3C 3C 3C 
05f93     18 18 18 00 
05f97     18 18 00 00 
05f9b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
05f9f     66 24 00 00 
05fa3     00 00 00 00 
05fa7     00 00 00 00 
05fab     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05faf     00 36 36 7F 
05fb3     36 36 36 7F 
05fb7     36 36 00 00 
05fbb     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
05fbf     3E 63 43 03 
05fc3     3E 60 60 61 
05fc7     63 3E 18 18 
05fcb     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
05fcf     00 00 43 63 
05fd3     30 18 0C 06 
05fd7     63 61 00 00 
05fdb     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
05fdf     1C 36 36 1C 
05fe3     6E 3B 33 33 
05fe7     33 6E 00 00 
05feb     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
05fef     0C 0C 0C 06 
05ff3     00 00 00 00 
05ff7     00 00 00 00 
05ffb     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05fff     30 18 0C 0C 
06003     0C 0C 0C 0C 
06007     18 30 00 00 
0600b     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
0600f     0C 18 30 30 
06013     30 30 30 30 
06017     18 0C 00 00 
0601b     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
0601f     00 00 00 66 
06023     3C FF 3C 66 
06027     00 00 00 00 
0602b     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
0602f     00 00 00 18 
06033     18 7E 18 18 
06037     00 00 00 00 
0603b     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0603f     00 00 00 00 
06043     00 00 00 00 | 	byte	$00[8]
06047     18 18 18 0C 
0604b     00 00 00 00 
0604f     00 00 00 00 
06053     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
06057     00 00 00 00 
0605b     00 00 00 00 
0605f     00 00 00 00 
06063     00 00 00 00 | 	byte	$00[16]
06067     18 18 00 00 
0606b     00 00 00 00 
0606f     00 00 40 60 
06073     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
06077     03 01 00 00 
0607b     00 00 00 00 
0607f     1C 36 63 63 
06083     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
06087     36 1C 00 00 
0608b     00 00 00 00 
0608f     18 1C 1E 18 
06093     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
06097     18 7E 00 00 
0609b     00 00 00 00 
0609f     3E 63 60 30 
060a3     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
060a7     63 7F 00 00 
060ab     00 00 00 00 
060af     3E 63 60 60 
060b3     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
060b7     63 3E 00 00 
060bb     00 00 00 00 
060bf     30 38 3C 36 
060c3     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
060c7     30 78 00 00 
060cb     00 00 00 00 
060cf     7F 03 03 03 
060d3     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
060d7     63 3E 00 00 
060db     00 00 00 00 
060df     1C 06 03 03 
060e3     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
060e7     63 3E 00 00 
060eb     00 00 00 00 
060ef     7F 63 60 60 
060f3     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
060f7     0C 0C 00 00 
060fb     00 00 00 00 
060ff     3E 63 63 63 
06103     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
06107     63 3E 00 00 
0610b     00 00 00 00 
0610f     3E 63 63 63 
06113     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
06117     30 1E 00 00 
0611b     00 00 00 00 
0611f     00 00 00 18 
06123     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
06127     18 18 00 00 
0612b     00 00 00 00 
0612f     00 00 00 18 
06133     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
06137     18 18 0C 00 
0613b     00 00 00 00 
0613f     00 60 30 18 
06143     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
06147     30 60 00 00 
0614b     00 00 00 00 
0614f     00 00 00 7E 
06153     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
06157     00 00 00 00 
0615b     00 00 00 00 
0615f     00          | 	byte	$00[9]
06160     06 0C 18 30 
06164     60 30 18 0C 
06168     06 00 00 00 
0616c     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
06170     63 63 30 18 
06174     18 18 00 18 
06178     18 00 00 00 
0617c     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
06180     3E 63 63 7B 
06184     7B 7B 3B 03 
06188     3E 00 00 00 
0618c     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
06190     1C 36 63 63 
06194     7F 63 63 63 
06198     63 00 00 00 
0619c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
061a0     66 66 66 3E 
061a4     66 66 66 66 
061a8     3F 00 00 00 
061ac     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
061b0     66 43 03 03 
061b4     03 03 43 66 
061b8     3C 00 00 00 
061bc     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
061c0     36 66 66 66 
061c4     66 66 66 36 
061c8     1F 00 00 00 
061cc     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
061d0     66 46 16 1E 
061d4     16 06 46 66 
061d8     7F 00 00 00 
061dc     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
061e0     66 46 16 1E 
061e4     16 06 06 06 
061e8     0F 00 00 00 
061ec     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
061f0     66 43 03 03 
061f4     7B 63 63 66 
061f8     5C 00 00 00 
061fc     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
06200     63 63 63 7F 
06204     63 63 63 63 
06208     63 00 00 00 
0620c     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
06210     18 18 18 18 
06214     18 18 18 18 | 	byte	$18[8]
06218     3C 00 00 00 
0621c     00 00 00 78 
06220     30 30 30 30 
06224     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
06228     1E 00 00 00 
0622c     00 00 00 67 
06230     66 66 36 1E 
06234     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
06238     67 00 00 00 
0623c     00 00 00 0F 
06240     06 06 06 06 
06244     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06248     7F 00 00 00 
0624c     00 00 00 63 
06250     77 7F 7F 6B 
06254     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
06258     63 00 00 00 
0625c     00 00 00 63 
06260     67 6F 7F 7B 
06264     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
06268     63 00 00 00 
0626c     00 00 00 3E 
06270     63 63 63 63 
06274     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06278     3E 00 00 00 
0627c     00 00 00 3F 
06280     66 66 66 3E 
06284     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
06288     0F 00 00 00 
0628c     00 00 00 3E 
06290     63 63 63 63 
06294     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
06298     3E 30 70 00 
0629c     00 00 00 3F 
062a0     66 66 66 3E 
062a4     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
062a8     67 00 00 00 
062ac     00 00 00 3E 
062b0     63 63 06 1C 
062b4     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
062b8     3E 00 00 00 
062bc     00 00 00 7E 
062c0     7E 5A 18 18 
062c4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
062c8     3C 00 00 00 
062cc     00 00 00 63 
062d0     63 63 63 63 
062d4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
062d8     3E 00 00 00 
062dc     00 00 00 63 
062e0     63 63 63 63 
062e4     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
062e8     08 00 00 00 
062ec     00 00 00 63 
062f0     63 63 63 6B 
062f4     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
062f8     36 00 00 00 
062fc     00 00 00 63 
06300     63 36 3E 1C 
06304     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
06308     63 00 00 00 
0630c     00 00 00 66 
06310     66 66 66 3C 
06314     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
06318     3C 00 00 00 
0631c     00 00 00 7F 
06320     63 61 30 18 
06324     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06328     7F 00 00 00 
0632c     00 00 00 3C 
06330     0C 0C 0C 0C 
06334     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
06338     3C 00 00 00 
0633c     00 00 00 00 
06340     01 03 07 0E 
06344     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
06348     40 00 00 00 
0634c     00 00 00 3C 
06350     30 30 30 30 
06354     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
06358     3C 00 00 00 
0635c     1C 36 00 00 
06360     00 00 00 00 
06364     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06368     00 00 00 00 
0636c     00 00 00 00 
06370     00 00 00 00 
06374     00 00 00 00 
06378     00          | 	byte	$00[17]
06379     FF 00 00 0C 
0637d     18 00 00 00 
06381     00 00 00 00 
06385     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06389     00 00 00 00 
0638d     00 00 00 00 
06391     00          | 	byte	$00[9]
06392     1E 30 3E 33 
06396     33 33 6E 00 
0639a     00 00 00 00 
0639e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
063a2     1E 36 66 66 
063a6     66 66 3E 00 
063aa     00 00 00 00 
063ae     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
063b2     3E 63 03 03 
063b6     03 63 3E 00 
063ba     00 00 00 00 
063be     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
063c2     3C 36 33 33 
063c6     33 33 6E 00 
063ca     00 00 00 00 
063ce     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
063d2     3E 63 7F 03 
063d6     03 63 3E 00 
063da     00 00 00 00 
063de     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
063e2     0C 1E 0C 0C 
063e6     0C 0C 1E 00 
063ea     00 00 00 00 
063ee     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
063f2     6E 33 33 33 
063f6     33 33 3E 30 
063fa     33 1E 00 00 
063fe     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
06402     36 6E 66 66 
06406     66 66 67 00 
0640a     00 00 00 00 
0640e     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
06412     1C 18 18 18 
06416     18 18 3C 00 
0641a     00 00 00 00 
0641e     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
06422     70 60 60 60 
06426     60 60 60 66 
0642a     66 3C 00 00 
0642e     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
06432     66 36 1E 1E 
06436     36 66 67 00 
0643a     00 00 00 00 
0643e     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
06442     18 18 18 18 
06446     18 18       | 	byte	$18[6]
06448     3C 00 00 00 
0644c     00 00 00 00 
06450     00 00 37 7F 
06454     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
06458     63 00 00 00 
0645c     00 00 00 00 
06460     00 00 3B 66 
06464     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06468     66 00 00 00 
0646c     00 00 00 00 
06470     00 00 3E 63 
06474     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
06478     3E 00 00 00 
0647c     00 00 00 00 
06480     00 00 3B 66 
06484     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06488     3E 06 06 0F 
0648c     00 00 00 00 
06490     00 00 6E 33 
06494     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
06498     3E 30 30 78 
0649c     00 00 00 00 
064a0     00 00 3B 6E 
064a4     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
064a8     0F 00 00 00 
064ac     00 00 00 00 
064b0     00 00 3E 63 
064b4     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
064b8     3E 00 00 00 
064bc     00 00 00 08 
064c0     0C 0C 3F 0C 
064c4     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
064c8     38 00 00 00 
064cc     00 00 00 00 
064d0     00 00 33 33 
064d4     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
064d8     6E 00 00 00 
064dc     00 00 00 00 
064e0     00 00 63 63 
064e4     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
064e8     1C 00 00 00 
064ec     00 00 00 00 
064f0     00 00 63 63 
064f4     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
064f8     36 00 00 00 
064fc     00 00 00 00 
06500     00 00 63 36 
06504     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
06508     63 00 00 00 
0650c     00 00 00 00 
06510     00 00 63 63 
06514     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
06518     7E 60 30 1F 
0651c     00 00 00 00 
06520     00 00 7F 33 
06524     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
06528     7F 00 00 00 
0652c     00 00 00 70 
06530     18 18 18 0E 
06534     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
06538     70 00 00 00 
0653c     00 00 00 18 
06540     18 18 18 18 
06544     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
06548     18 00 00 00 
0654c     00 00 00 0E 
06550     18 18 18 70 
06554     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
06558     0E 00 00 00 
0655c     6E 3B 00 00 
06560     00 00 00 00 
06564     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06568     00 00 00 00 
0656c     00 00 00 00 
06570     00 00       | 	byte	$00[10]
06572     08 1C 36 63 
06576     63 63 7F 00 
0657a     00 00 00 00 
0657e     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
06582     03 03 03 03 
06586     43 66 3C 18 
0658a     30 1E 00 00 
0658e     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
06592     33 33 33 33 
06596     33 33       | 	byte	$33[6]
06598     6E 00 00 00 
0659c     00 00 60 30 
065a0     18 00 3E 63 
065a4     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
065a8     3E 00 00 00 
065ac     00 00 08 1C 
065b0     36 00 1E 30 
065b4     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
065b8     6E 00 00 00 
065bc     00 00 00 00 
065c0     33 00 1E 30 
065c4     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
065c8     6E 00 00 00 
065cc     00 00 1C 36 
065d0     1C 00 33 33 
065d4     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
065d8     6E 00 00 00 
065dc     00 00 60 30 
065e0     18 00 3E 63 
065e4     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
065e8     3E 00 00 00 
065ec     00 00 00 00 
065f0     00 00 3E 63 
065f4     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
065f8     3E 18 30 1E 
065fc     00 00 00 1C 
06600     58 78 38 18 
06604     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
06608     3C 00 00 00 
0660c     00 00 00 00 
06610     63 00 3E 63 
06614     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
06618     3E 00 00 00 
0661c     66 33 00 3E 
06620     63 63 63 63 
06624     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06628     3E 00 00 00 
0662c     00 00 CC 66 
06630     33 00 3E 63 
06634     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
06638     3E 00 00 00 
0663c     00 00 18 3C 
06640     66 00 1C 18 
06644     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
06648     3C 00 00 00 
0664c     30 18 00 7F 
06650     63 61 30 18 
06654     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06658     7F 00 00 00 
0665c     00 63 00 08 
06660     1C 36 63 63 
06664     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
06668     63 00 00 00 
0666c     30 18 00 3C 
06670     66 43 03 03 
06674     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
06678     3C 00 00 00 
0667c     30 18 00 7F 
06680     66 46 16 1E 
06684     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
06688     7F 00 00 00 
0668c     0C 06 00 0F 
06690     06 06 06 06 
06694     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06698     7F 00 00 00 
0669c     30 18 00 1C 
066a0     18 18 18 18 
066a4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
066a8     3C 00 00 00 
066ac     00 00 08 1C 
066b0     36 00 3E 63 
066b4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
066b8     3E 00 00 00 
066bc     00 00 00 00 
066c0     63 00 3E 63 
066c4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
066c8     3E 00 00 00 
066cc     00 00 00 6F 
066d0     46 26 06 06 
066d4     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
066d8     7F 00 00 00 
066dc     00 00 00 6E 
066e0     4C 2C 0C 0C 
066e4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
066e8     1E 00 00 00 
066ec     30 18 00 3E 
066f0     63 63 06 1C 
066f4     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
066f8     3E 00 00 00 
066fc     00 00 60 30 
06700     18 00 3E 63 
06704     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
06708     3E 00 00 00 
0670c     00 63 00 3E 
06710     63 63 63 63 
06714     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06718     3E 00 00 00 
0671c     00 63 00 63 
06720     63 63 63 63 
06724     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
06728     3E 00 00 00 
0672c     6C 38 00 7E 
06730     7E 5A 18 18 
06734     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
06738     3C 00 00 00 
0673c     00 00 60 48 
06740     2C 0C 3F 0C 
06744     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
06748     38 00 00 00 
0674c     00 00 00 0F 
06750     26 36 1E 0E 
06754     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
06758     7F 00 00 00 
0675c     00 00 00 00 
06760     00 63 36 1C 
06764     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
06768     00 00 00 00 
0676c     00 00       | 	byte	$00[6]
0676e     36 1C 08 00 
06772     3E 63 03 03 
06776     03 63 3E 00 
0677a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0677e     30 18 0C 00 
06782     1E 30 3E 33 
06786     33 33 6E 00 
0678a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0678e     60 30 18 00 
06792     1C 18 18 18 
06796     18 18 3C 00 
0679a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0679e     60 30 18 00 
067a2     3E 63 63 63 
067a6     63 63 3E 00 
067aa     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
067ae     30 18 0C 00 
067b2     33 33 33 33 
067b6     33 33 6E 00 
067ba     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
067be     00 08 1C 36 
067c2     63 63 7F 63 
067c6     63 63 63 18 
067ca     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
067ce     00 00 00 00 
067d2     1E 30 3E 33 
067d6     33 33 6E 18 
067da     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
067de     00 7F 63 61 
067e2     30 18 0C 06 
067e6     43 63 7F 00 
067ea     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
067ee     36 1C 08 00 
067f2     7F 33 18 0C 
067f6     06 63 7F 00 
067fa     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
067fe     00 7F 66 46 
06802     16 1E 16 06 
06806     46 66 7F 18 
0680a     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0680e     00 00 00 00 
06812     3E 63 7F 03 
06816     03 63 3E 18 
0681a     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0681e     00 3C 66 03 
06822     1F 03 0F 03 
06826     03 66 3C 00 
0682a     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0682e     60 30 18 00 
06832     7F 33 18 0C 
06836     06 63 7F 00 
0683a     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0683e     00 3C 66 43 
06842     03 03 03 03 
06846     43 66 3C 00 
0684a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0684e     00 00 00 00 
06852     3E 63 06 1C 
06856     30 63 3E 18 
0685a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0685e     00 00 00 00 
06862     00 00       | 	byte	$00[6]
06864     6C 36 1B 36 
06868     6C 00 00 00 
0686c     00 00 00 00 
06870     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06874     1B 36 6C 36 
06878     1B 00 00 00 
0687c     88 22 88 22 
06880     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
06884     88 22 88 22 
06888     88 22 88 22 
0688c     AA 55 AA 55 
06890     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
06894     AA 55 AA 55 
06898     AA 55 AA 55 
0689c     BB EE BB EE 
068a0     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
068a4     BB EE BB EE 
068a8     BB EE BB EE 
068ac     18 18 18 18 
068b0     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
068b4     18 18 18 18 
068b8     18 18 18 18 
068bc     18 18 18 18 
068c0     18 18 18    | 	byte	$18[15]
068c3     1F 18 18 18 
068c7     18 18 18 18 
068cb     18 30 18 00 
068cf     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
068d3     63 7F 63 63 
068d7     63 63 00 00 
068db     00 1C 36 00 
068df     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
068e3     63 7F 63 63 
068e7     63 63 00 00 
068eb     00 36 1C 00 
068ef     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
068f3     1E 16 06 46 
068f7     66 7F 00 00 
068fb     00 00 00 00 
068ff     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
06903     1C 30 60 63 
06907     63 3E 18 30 
0690b     1E 6C 6C 6C 
0690f     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
06913     6F 6C 6C 6C 
06917     6C 6C 6C 6C 
0691b     6C 6C 6C 6C 
0691f     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06923     6C 6C 6C 6C 
06927     6C 6C 6C 6C 
0692b     6C          | 	byte	$6c[9]
0692c     00 00 00 00 
06930     00          | 	byte	$00[5]
06931     7F 60 6F 6C 
06935     6C 6C 6C 6C 
06939     6C 6C 6C 6C 
0693d     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06941     6F 60 7F 00 
06945     00 00 00 00 
06949     00 00 00 18 
0694d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
06951     61 30 18 0C 
06955     06 43 63 7F 
06959     00 00 00 00 
0695d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
06961     00 7F 33 18 
06965     0C 06 63 7F 
06969     00 00 00 00 
0696d     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
06971     00 00 1F 18 
06975     18 18 18 18 
06979     18 18 18 18 
0697d     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06981     18 18 F8 00 
06985     00 00 00 00 
06989     00 00 00 18 
0698d     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
06991     18 18 FF 00 
06995     00 00 00 00 
06999     00 00 00 00 
0699d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
069a1     00 00 FF 18 
069a5     18 18 18 18 
069a9     18 18 18 18 
069ad     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
069b1     18 18 F8 18 
069b5     18 18 18 18 
069b9     18 18 18 00 
069bd     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
069c1     00 00 FF 00 
069c5     00 00 00 00 
069c9     00 00 00 18 
069cd     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
069d1     18 18 FF 18 
069d5     18 18 18 18 
069d9     18 18 18 63 
069dd     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
069e1     36 63 63 7F 
069e5     63 63 63 63 
069e9     00 00 00 00 
069ed     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
069f1     00 1E 30 3E 
069f5     33 33 33 6E 
069f9     00 00 00 6C 
069fd     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
06a01     EC 0C FC 00 
06a05     00 00 00 00 
06a09     00 00 00 00 
06a0d     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a11     FC 0C EC 6C 
06a15     6C 6C 6C 6C 
06a19     6C 6C 6C 6C 
06a1d     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06a21     EF 00 FF 00 
06a25     00 00 00 00 
06a29     00 00 00 00 
06a2d     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a31     FF 00 EF 6C 
06a35     6C 6C 6C 6C 
06a39     6C 6C 6C 6C 
06a3d     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06a41     EC 0C EC 6C 
06a45     6C 6C 6C 6C 
06a49     6C 6C 6C 00 
06a4d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06a51     FF 00 FF 00 
06a55     00 00 00 00 
06a59     00 00 00 6C 
06a5d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
06a61     EF 00 EF 6C 
06a65     6C 6C 6C 6C 
06a69     6C 6C 6C 00 
06a6d     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06a71     63 3E 63 63 
06a75     63 63 3E 63 
06a79     00 00 00 00 
06a7d     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
06a81     30 3C 36 33 
06a85     33 33 33 6E 
06a89     00 00 00 00 
06a8d     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
06a91     66 66 6F 66 
06a95     66 66 36 1F 
06a99     00 00 00 36 
06a9d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
06aa1     66 66 66 66 
06aa5     66 66       | 	byte	$66[6]
06aa7     36 1F 00 00 
06aab     00 00 63 00 
06aaf     7F 66 46 16 
06ab3     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
06ab7     66 7F 00 00 
06abb     00 6C 38 00 
06abf     38 30 30 3C 
06ac3     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
06ac7     33 6E 00 00 
06acb     00 36 1C 00 
06acf     63 67 6F 7F 
06ad3     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
06ad7     63 63 00 00 
06adb     00 30 18 00 
06adf     3C 18 18 18 
06ae3     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
06ae7     18 3C 00 00 
06aeb     00 3C 66 00 
06aef     3C 18 18 18 
06af3     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
06af7     18 3C 00 00 
06afb     00 00 00 36 
06aff     1C 08 00 3E 
06b03     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
06b07     63 3E 00 00 
06b0b     00 18 18 18 
06b0f     18 18 18 18 
06b13     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
06b17     00 00 00 00 
06b1b     00 00 00 00 
06b1f     00 00 00 00 | 	byte	$00[12]
06b23     F8 18 18 18 
06b27     18 18 18 18 
06b2b     18 FF FF FF 
06b2f     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
06b33     FF FF FF FF 
06b37     FF FF FF FF 
06b3b     FF          | 	byte	$ff[9]
06b3c     00 00 00 00 
06b40     00 00 00    | 	byte	$00[7]
06b43     FF FF FF FF 
06b47     FF FF FF FF 
06b4b     FF          | 	byte	$ff[9]
06b4c     00 00 00 7E 
06b50     7E 5A 18 18 
06b54     18 18 18 18 
06b58     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
06b5c     1C 36 1C 63 
06b60     63 63 63 63 
06b64     63 63 63 63 
06b68     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06b6c     FF FF FF FF 
06b70     FF FF FF    | 	byte	$ff[7]
06b73     00 00 00 00 
06b77     00 00 00 00 
06b7b     00          | 	byte	$00[9]
06b7c     30 18 00 3E 
06b80     63 63 63 63 
06b84     63 63 63 63 
06b88     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06b8c     00 00 00 1E 
06b90     33 33 33 1B 
06b94     33 63 63 63 
06b98     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
06b9c     1C 36 00 3E 
06ba0     63 63 63 63 
06ba4     63 63 63 63 
06ba8     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06bac     30 18 00 63 
06bb0     67 6F 7F 7B 
06bb4     73 63 63 63 
06bb8     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
06bbc     00 00 60 30 
06bc0     18 00 3B 66 
06bc4     66 66 66 66 
06bc8     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
06bcc     00 00 36 1C 
06bd0     08 00 3B 66 
06bd4     66 66 66 66 
06bd8     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
06bdc     36 1C 00 3E 
06be0     63 63 06 1C 
06be4     30 60 63 63 
06be8     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
06bec     00 00 36 1C 
06bf0     08 00 3E 63 
06bf4     06 1C 30 63 
06bf8     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
06bfc     30 18 00 3F 
06c00     66 66 66 3E 
06c04     36 66 66 66 
06c08     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
06c0c     30 18 00 63 
06c10     63 63 63 63 
06c14     63 63 63 63 
06c18     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06c1c     00 00 60 30 
06c20     18 00 3B 6E 
06c24     66 06 06 06 
06c28     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
06c2c     66 33 00 63 
06c30     63 63 63 63 
06c34     63 63 63 63 
06c38     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06c3c     00 00 60 30 
06c40     18 00 63 63 
06c44     63 63 63 63 
06c48     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
06c4c     30 18 00 66 
06c50     66 66 66 3C 
06c54     18 18 18 18 
06c58     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
06c5c     00 00 00 08 
06c60     0C 0C 3F 0C 
06c64     0C 0C 0C 6C 
06c68     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
06c6c     30 18 00 00 
06c70     00 00 00 00 
06c74     00 00 00 00 
06c78     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06c7c     00 00 00 00 
06c80     00 00 00 00 | 	byte	$00[8]
06c84     7F 00 00 00 
06c88     00 00 00 00 
06c8c     66 33 00 00 
06c90     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
06c94     00 00 00 00 
06c98     00 00 00 00 
06c9c     00 00 00 00 
06ca0     00 00 00 00 
06ca4     00 00 00 00 
06ca8     00          | 	byte	$00[21]
06ca9     0C 06 3C 36 
06cad     1C 00 00 00 
06cb1     00 00 00 00 
06cb5     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06cb9     00 00 00 63 
06cbd     3E 00 00 00 
06cc1     00 00 00 00 
06cc5     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06cc9     00 00 00 00 
06ccd     3E 63 06 1C 
06cd1     36 63 63 36 
06cd5     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
06cd9     00 00 00 00 
06cdd     00 00 00 00 | 	byte	$00[8]
06ce1     18 00 7E 00 
06ce5     18 00 00 00 
06ce9     00 00 00 00 
06ced     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06cf1     00 00 00 00 
06cf5     00 00 00 00 | 	byte	$00[8]
06cf9     18 30 1E 00 
06cfd     00 00 1C 36 
06d01     36 1C 00 00 
06d05     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
06d09     00 00 00 00 
06d0d     63 00 00 00 
06d11     00 00 00 00 
06d15     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d19     00 00 00 18 
06d1d     18 00 00 00 
06d21     00 00 00 00 
06d25     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d29     00 00 00 00 
06d2d     00          | 	byte	$00[5]
06d2e     CC 66 33 00 
06d32     33 33 33 33 
06d36     33 33 6E 00 
06d3a     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
06d3e     00 3F 66 66 
06d42     66 3E 36 66 
06d46     66 66 6F 00 
06d4a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
06d4e     36 1C 08 00 
06d52     3B 6E 66 06 
06d56     06 06 0F 00 
06d5a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
06d5e     00 00 00 7E 
06d62     7E 7E 7E 7E 
06d66     7E 7E 00 00 
06d6a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
06d6e     00 00 00 00 
06d72     00 00 00 00 
06d76     00 00 00 00 
06d7a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d7c     00 00 00 00 
      ...             
06dac     00 00 00 00 
06db0     00 00 00    | st_font        file "st4font.def"
06db3     FF FF 00 00 
06db7     00 00 00 00 
06dbb     00 18 18 18 
06dbf     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06dc3     18 18 18 18 
06dc7     18 18 18 18 
06dcb     18          | 	byte	$18[9]
06dcc     00 00 00 00 
06dd0     00 00 00    | 	byte	$00[7]
06dd3     FF FF 18 18 
06dd7     18 18 18 18 
06ddb     18 18 18 18 
06ddf     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06de3     FF FF 00 00 
06de7     00 00 00 00 
06deb     00 18 18 18 
06def     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06df3     1F 1F 18 18 
06df7     18 18 18 18 
06dfb     18 18 18 18 
06dff     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06e03     F8 F8 18 18 
06e07     18 18 18 18 
06e0b     18 00 00 00 
06e0f     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06e13     1F 1F 18 18 
06e17     18 18 18 18 
06e1b     18 00 00 00 
06e1f     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06e23     F8 F8 18 18 
06e27     18 18 18 18 
06e2b     18 18 18 18 
06e2f     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06e33     1F 1F 00 00 
06e37     00 00 00 00 
06e3b     00 18 18 18 
06e3f     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06e43     F8 F8 00 00 
06e47     00 00 00 00 
06e4b     00 18 18 18 
06e4f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06e53     FF FF 18 18 
06e57     18 18 18 18 
06e5b     18 00 00 18 
06e5f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
06e63     66 7E 7E 66 
06e67     66 66 66 30 
06e6b     18 00 00 7E 
06e6f     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
06e73     3E 06 06 06 
06e77     06 7E 7E 18 
06e7b     0C 30 18 3C 
06e7f     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
06e83     06 06 06 66 
06e87     66 7E 3C 00 
06e8b     00 30 18 66 
06e8f     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
06e93     7E 7E 76 76 
06e97     66 66 66 00 
06e9b     00 30 18 7C 
06e9f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
06ea3     1C 38 70 60 
06ea7     60 7E 3E 00 
06eab     00 30 18 7E 
06eaf     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
06eb3     18 0C 0C 06 
06eb7     06 7E 7E 00 
06ebb     00 18 18 00 
06ebf     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
06ec3     18 18 0C 0C 
06ec7     06 7E 7E 00 
06ecb     00 30 18 3C 
06ecf     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
06ed3     66 66 66 66 
06ed7     66          | 	byte	$66[5]
06ed8     7E 3C 00 00 
06edc     00 00 06 06 
06ee0     06 06 16 1E 
06ee4     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
06ee8     7E 7E 00 00 
06eec     00 00 00 00 
06ef0     00 3C 7C 60 
06ef4     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
06ef8     7E 7C 30 18 
06efc     00 00 00 00 
06f00     00 3C 7E 66 
06f04     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
06f08     7E 7C 18 0C 
06f0c     00 00 30 18 
06f10     00 3C 3E 06 
06f14     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
06f18     7E 7C 00 00 
06f1c     00 00 30 18 
06f20     00 3E 7E 66 
06f24     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
06f28     66 66 00 00 
06f2c     00 00 30 18 
06f30     00 7C 7E 06 
06f34     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
06f38     7E 3E 00 00 
06f3c     00 00 30 18 
06f40     00 7E 7E 30 
06f44     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06f48     7E 7E 00 00 
06f4c     00 00 18 18 
06f50     00 7E 7E 30 
06f54     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06f58     7E 7E 00 00 
06f5c     00 00 30 18 
06f60     00 3C 7E 66 
06f64     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
06f68     7E 3C 00 00 
06f6c     00 00 1C 1C 
06f70     18 18 38 3C 
06f74     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
06f78     3C 3C 00 00 
06f7c     00 00 00 00 
06f80     00 00 00 00 
06f84     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06f88     00 00 00 00 
06f8c     00 00       | 	byte	$00[6]
06f8e     18 18 18 18 
06f92     18 18 18 18 | 	byte	$18[8]
06f96     00 00 18 18 
06f9a     00 00 00 00 
06f9e     66 66 66 66 
06fa2     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
06fa6     00 00 00 00 
06faa     00 00 00 00 
06fae     00          | 	byte	$00[9]
06faf     66 66 FF FF 
06fb3     66 66 FF FF 
06fb7     66 66 00 00 
06fbb     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
06fbf     7C 7E 06 06 
06fc3     3E 7C 60 60 
06fc7     7E 3E 18 18 
06fcb     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
06fcf     66 30 30 18 
06fd3     18 0C 0C 66 
06fd7     66 00 00 00 
06fdb     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
06fdf     66 66 3C 1C 
06fe3     1C FC FE 66 
06fe7     66 FE FC 00 
06feb     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
06fef     18 18 18 18 
06ff3     00 00 00 00 
06ff7     00 00 00 00 
06ffb     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
06fff     18 1C 0C 0C 
07003     0C 0C 0C 0C 
07007     1C 18 30 00 
0700b     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
0700f     18 38 30 30 
07013     30 30 30 30 
07017     38 18 0C 00 
0701b     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
0701f     66 66 3C 3C 
07023     FF FF 3C 3C 
07027     66 66 00 00 
0702b     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
0702f     00 18 18 18 
07033     7E 7E 18 18 
07037     18 00 00 00 
0703b     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0703f     00 00 00 00 
07043     00 00       | 	byte	$00[6]
07045     18 18 18 18 
07049     18          | 	byte	$18[5]
0704a     0C 04 00 00 
0704e     00 00 00 00 
07052     7E 7E 00 00 
07056     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
0705a     00 00 00 00 
0705e     00 00 00 00 
07062     00 00 00 00 
07066     00          | 	byte	$00[13]
07067     18 18 18 00 
0706b     00 00 00 60 
0706f     60 60 30 30 
07073     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
07077     06 06 06 00 
0707b     00 00 00 3C 
0707f     7E 66 66 66 
07083     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
07087     66 7E 3C 00 
0708b     00 00 00 18 
0708f     18 1C 1C 18 
07093     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
07097     18 7E 7E 00 
0709b     00 00 00 3C 
0709f     7E 66 66 30 
070a3     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
070a7     0C 7E 7E 00 
070ab     00 00 00 7E 
070af     7E 30 30 18 
070b3     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
070b7     66 7E 3C 00 
070bb     00 00 00 30 
070bf     30 38 38 3C 
070c3     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
070c7     7E 30 30 00 
070cb     00 00 00 7E 
070cf     7E 06 06 3E 
070d3     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
070d7     66 7E 3C 00 
070db     00 00 00 38 
070df     3C 0E 06 06 
070e3     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
070e7     66 7E 3C 00 
070eb     00 00 00 7E 
070ef     7E 60 60 30 
070f3     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
070f7     0C 0C 0C 00 
070fb     00 00 00 3C 
070ff     7E 66 66 3C 
07103     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
07107     66 7E 3C 00 
0710b     00 00 00 3C 
0710f     7E 66 66 7E 
07113     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
07117     70 3C 1C 00 
0711b     00 00 00 00 
0711f     00 00 18 18 
07123     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
07127     18 18 18 00 
0712b     00 00 00 00 
0712f     00 00 18 18 
07133     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
07137     18 18 18 0C 
0713b     04 00 00 00 
0713f     70 38 1C 0E 
07143     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
07147     70 00 00 00 
0714b     00 00 00 00 
0714f     00 00 7E 7E 
07153     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
07157     00 00 00 00 
0715b     00 00 00 00 | 	byte	$00[8]
0715f     0E 1C 38 70 
07163     E0 70 38 1C 
07167     0E 00 00 00 
0716b     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
0716f     7E 66 66 30 
07173     30 18 18 18 
07177     00 18 18 00 
0717b     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
0717f     7E 66 66 66 
07183     66 36 06 66 
07187     66 7E 3C 00 
0718b     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
0718f     3C 7E 66 66 
07193     66 7E 7E 66 
07197     66 66 66 00 
0719b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
0719f     7E 66 66 7E 
071a3     3E 66 66 66 
071a7     66 7E 3E 00 
071ab     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
071af     7E 66 66 06 
071b3     06 06 06 66 
071b7     66 7E 3C 00 
071bb     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
071bf     7E 66 66 66 
071c3     66 66 66 66 
071c7     66 7E 3E 00 
071cb     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
071cf     7E 06 06 3E 
071d3     3E 06 06 06 
071d7     06 7E 7E 00 
071db     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
071df     7E 06 06 3E 
071e3     3E 06 06 06 
071e7     06 06 06 00 
071eb     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
071ef     7E 06 06 76 
071f3     76 66 66 66 
071f7     66 7E 3C 00 
071fb     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
071ff     66 66 66 7E 
07203     7E 66 66 66 
07207     66 66 66 00 
0720b     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
0720f     7E 18 18 18 
07213     18 18 18 18 
07217     18 7E 7E 00 
0721b     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0721f     60 60 60 60 
07223     60 60 60    | 	byte	$60[7]
07226     66 66 7E 3C 
0722a     00 00 00 00 
0722e     66 66 36 36 
07232     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
07236     66 66 C6 C6 
0723a     00 00 00 00 
0723e     06 06 06 06 
07242     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
07246     06 06 7E 7E 
0724a     00 00 00 00 
0724e     C6 C6 EE EE 
07252     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
07256     C6 C6 C6 C6 
0725a     00 00 00 00 
0725e     66 66 66 6E 
07262     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
07266     76 66 66 66 
0726a     00 00 00 00 
0726e     3C 7E 66 66 
07272     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
07276     66 66 7E 3C 
0727a     00 00 00 00 
0727e     3E 7E 66 66 
07282     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
07286     06 06 06 06 
0728a     00 00 00 00 
0728e     3C 7E 66 66 
07292     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
07296     66 56 3E 6C 
0729a     00 00 00 00 
0729e     3E 7E 66 66 
072a2     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
072a6     66 66 C6 C6 
072aa     00 00 00 00 
072ae     7C 7E 06 06 
072b2     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
072b6     60 60 7E 3E 
072ba     00 00 00 00 
072be     7E 7E 18 18 
072c2     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
072c6     18 18 18 18 
072ca     00 00 00 00 
072ce     66 66 66 66 
072d2     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
072d6     66 66 7E 3C 
072da     00 00 00 00 
072de     66 66 66 66 
072e2     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
072e6     3C 3C 18 18 
072ea     00 00 00 00 
072ee     C6 C6 C6 C6 
072f2     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
072f6     FE EE C6 82 
072fa     00 00 00 00 
072fe     66 66 66 3C 
07302     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
07306     3C 66 66 66 
0730a     00 00 00 00 
0730e     66 66 66 66 
07312     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
07316     18 18 18 18 
0731a     00 00 00 00 
0731e     7E 7E 30 30 
07322     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
07326     06 06 7E 7E 
0732a     00 00 00 00 
0732e     3C 3C 0C 0C 
07332     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
07336     0C 0C 3C 3C 
0733a     00 00 00 00 
0733e     06 06 0C 0C 
07342     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
07346     60 60 C0 C0 
0734a     00 00 00 00 
0734e     3C 3C 30 30 
07352     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
07356     30 30 3C 3C 
0735a     00 00 00 00 
0735e     18 18 3C 3C 
07362     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
07366     00 00 00 00 
0736a     00 00 00 00 
0736e     00 00 00 00 
07372     00 00 00 00 
07376     00 00       | 	byte	$00[18]
07378     FE FE 00 00 
0737c     00 00 0C 0C 
07380     18 18 00 00 
07384     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
07388     00 00 00 00 
0738c     00 00 00 00 
07390     00          | 	byte	$00[9]
07391     3C 7C 60 7C 
07395     7E 66 66 7E 
07399     7C 00 00 00 
0739d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
073a1     3E 7E 66 66 
073a5     66 66 66 7E 
073a9     3E 00 00 00 
073ad     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
073b1     3C 3E 06 06 
073b5     06 06 06 7E 
073b9     7C 00 00 00 
073bd     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
073c1     7C 7E 66 66 
073c5     66 66 66 7E 
073c9     7C 00 00 00 
073cd     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
073d1     3C 7E 66 66 
073d5     7E 06 06 7E 
073d9     7C 00 00 00 
073dd     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
073e1     18 7E 7E 18 
073e5     18 18 18 18 
073e9     18 00 00 00 
073ed     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
073f1     7C 7E 66 66 
073f5     66 66 7E 7C 
073f9     60 7E 3E 00 
073fd     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
07401     3E 7E 66 66 
07405     66 66 66 66 
07409     66 00 00 00 
0740d     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
07411     1C 1C 18 18 
07415     18 18 18 3C 
07419     3C 00 00 00 
0741d     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
07421     30 30 30 30 
07425     30 30 30 30 
07429     30          | 	byte	$30[9]
0742a     3E 1E 00 00 
0742e     06 06 06 36 
07432     36 1E 1E 1E 
07436     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
0743a     00 00 00 00 
0743e     1C 1C 18 18 
07442     18 18 18 18 
07446     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0744a     00 00 00 00 
0744e     00 00 00    | 	byte	$00[7]
07451     6C FE FE D6 
07455     D6 C6 C6 C6 
07459     C6 00 00 00 
0745d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
07461     3E 7E 66 66 
07465     66 66 66 66 
07469     66 00 00 00 
0746d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
07471     3C 7E 66 66 
07475     66 66 66 7E 
07479     3C 00 00 00 
0747d     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
07481     3E 7E 66 66 
07485     66 66 66 7E 
07489     3E 06 06 00 
0748d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
07491     7C 7E 66 66 
07495     66 66 66 7E 
07499     7C 60 60 00 
0749d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
074a1     3E 7E 66 06 
074a5     06 06 06 06 
074a9     06 00 00 00 
074ad     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
074b1     7C 7E 06 0E 
074b5     3C 70 60 7E 
074b9     3E 00 00 00 
074bd     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
074c1     7E 7E 18 18 
074c5     18 18 18 78 
074c9     70 00 00 00 
074cd     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
074d1     66 66 66 66 
074d5     66 66 66    | 	byte	$66[7]
074d8     7E 7C 00 00 
074dc     00 00 00 00 
074e0     00 66 66 66 
074e4     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
074e8     18 18 00 00 
074ec     00 00 00 00 
074f0     00 C6 C6 D6 
074f4     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
074f8     C6 82 00 00 
074fc     00 00 00 00 
07500     00 66 66 3C 
07504     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
07508     66 66 00 00 
0750c     00 00 00 00 
07510     00 66 66 66 
07514     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
07518     7C 60 7E 3E 
0751c     00 00 00 00 
07520     00 7E 7E 30 
07524     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
07528     7E 7E 00 00 
0752c     00 00 30 18 
07530     18 18 18 0C 
07534     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
07538     18 30 00 00 
0753c     00 00 18 18 
07540     18 18 18 18 
07544     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
07548     18 18 00 00 
0754c     00 00 0C 18 
07550     18 18 18 30 
07554     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
07558     18 0C 00 00 
0755c     00 00 6C 7E 
07560     36 00 00 00 
07564     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
07568     00 00 00 00 
0756c     00 00 00 00 
07570     00          | 	byte	$00[9]
07571     18 18 18 18 
07575     18 18 00 00 
07579     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0757c     00 00 00 00 
07580     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
07584     00 00 00 00 
07588     00 80 80 80 
0758c     00 00 00 FF 
07590     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
07594     00 00 00 00 
07598     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
07599     80 00 00 00 
0759d     00 80 00 00 
075a1     80 80 00 00 
075a5     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
075a9     80 00 80 00 
075ad     00 40 80 00 
075b1     AA AA AA 00 
075b5     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
075b9     FF 00 00 00 
075bd     00 FF 00 00 
075c1     FF FF 00 00 
075c5     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
075c9     FF 00 FF 00 
075cd     00 FF FF 00 
075d1     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
075d4     00 00 00 00 
075d8     00          | ataripalette   file "ataripalettep2.def"
075d9     11 11 11 00 
075dd     22 22 22 00 
075e1     33 33 33 00 
075e5     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
075e9     55 55 55 00 
075ed     66 66 66 00 
075f1     77 77 77 00 
075f5     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
075f9     99 99 99 00 
075fd     AA AA AA 00 
07601     BB BB BB 00 
07605     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
07609     DD DD DD 00 
0760d     EE EE EE 00 
07611     FF FF FF 00 
07615     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
07619     00 14 40 00 
0761d     00 1E 60 00 
07621     00 28 80 00 
07625     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
07629     00 3C BF 00 
0762d     00 46 DF 00 
07631     00 50 FF 00 
07635     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
07639     39 77 FF 00 
0763d     55 8A FF 00 
07641     71 9E FF 00 
07645     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
07649     AA C5 FF 00 
0764d     C6 D8 FF 00 
07651     E3 EC FF 00 
07655     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07659     00 00 40 00 
0765d     00 00 60 00 
07661     00 00 80 00 
07665     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07669     00 00 BF 00 
0766d     00 00 DF 00 
07671     00 00 FF 00 
07675     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07679     39 39 FF 00 
0767d     55 55 FF 00 
07681     71 71 FF 00 
07685     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07689     AA AA FF 00 
0768d     C6 C6 FF 00 
07691     E3 E3 FF 00 
07695     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07699     20 00 40 00 
0769d     30 00 60 00 
076a1     40 00 80 00 
076a5     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
076a9     60 00 BF 00 
076ad     70 00 DF 00 
076b1     80 00 FF 00 
076b5     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
076b9     9C 39 FF 00 
076bd     AA 55 FF 00 
076c1     B8 71 FF 00 
076c5     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
076c9     D5 AA FF 00 
076cd     E3 C6 FF 00 
076d1     F1 E3 FF 00 
076d5     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
076d9     40 00 40 00 
076dd     60 00 60 00 
076e1     80 00 80 00 
076e5     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
076e9     BF 00 BF 00 
076ed     DF 00 DF 00 
076f1     FF 00 FF 00 
076f5     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
076f9     FF 39 FF 00 
076fd     FF 55 FF 00 
07701     FF 71 FF 00 
07705     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
07709     FF AA FF 00 
0770d     FF C6 FF 00 
07711     FF E3 FF 00 
07715     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
07719     40 00 20 00 
0771d     60 00 30 00 
07721     80 00 40 00 
07725     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
07729     BF 00 60 00 
0772d     DF 00 70 00 
07731     FF 00 80 00 
07735     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
07739     FF 39 9C 00 
0773d     FF 55 AA 00 
07741     FF 71 B8 00 
07745     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
07749     FF AA D5 00 
0774d     FF C6 E3 00 
07751     FF E3 F1 00 
07755     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07759     40 00 00 00 
0775d     60 00 00 00 
07761     80 00 00 00 
07765     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07769     BF 00 00 00 
0776d     DF 00 00 00 
07771     FF 00 00 00 
07775     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07779     FF 39 39 00 
0777d     FF 55 55 00 
07781     FF 71 71 00 
07785     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07789     FF AA AA 00 
0778d     FF C6 C6 00 
07791     FF E3 E3 00 
07795     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07799     40 10 00 00 
0779d     60 18 00 00 
077a1     80 20 00 00 
077a5     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
077a9     BF 30 00 00 
077ad     DF 38 00 00 
077b1     FF 40 00 00 
077b5     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
077b9     FF 6A 39 00 
077bd     FF 80 55 00 
077c1     FF 95 71 00 
077c5     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
077c9     FF BF AA 00 
077cd     FF D5 C6 00 
077d1     FF EA E3 00 
077d5     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
077d9     40 20 00 00 
077dd     60 30 00 00 
077e1     80 40 00 00 
077e5     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
077e9     BF 60 00 00 
077ed     DF 70 00 00 
077f1     FF 80 00 00 
077f5     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
077f9     FF 9C 39 00 
077fd     FF AA 55 00 
07801     FF B8 71 00 
07805     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
07809     FF D5 AA 00 
0780d     FF E3 C6 00 
07811     FF F1 E3 00 
07815     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
07819     40 30 00 00 
0781d     60 48 00 00 
07821     80 60 00 00 
07825     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
07829     BF 90 00 00 
0782d     DF A8 00 00 
07831     FF C0 00 00 
07835     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
07839     FF CE 39 00 
0783d     FF D5 55 00 
07841     FF DC 71 00 
07845     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
07849     FF EA AA 00 
0784d     FF F1 C6 00 
07851     FF F8 E3 00 
07855     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07859     30 40 00 00 
0785d     48 60 00 00 
07861     60 80 00 00 
07865     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07869     90 BF 00 00 
0786d     A8 DF 00 00 
07871     C0 FF 00 00 
07875     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07879     CE FF 39 00 
0787d     D5 FF 55 00 
07881     DC FF 71 00 
07885     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07889     EA FF AA 00 
0788d     F1 FF C6 00 
07891     F8 FF E3 00 
07895     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07899     00 40 00 00 
0789d     00 60 00 00 
078a1     00 80 00 00 
078a5     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
078a9     00 BF 00 00 
078ad     00 DF 00 00 
078b1     00 FF 00 00 
078b5     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
078b9     39 FF 39 00 
078bd     55 FF 55 00 
078c1     71 FF 71 00 
078c5     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
078c9     AA FF AA 00 
078cd     C6 FF C6 00 
078d1     E3 FF E3 00 
078d5     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
078d9     00 40 14 00 
078dd     00 60 1E 00 
078e1     00 80 28 00 
078e5     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
078e9     00 BF 3C 00 
078ed     00 DF 46 00 
078f1     00 FF 50 00 
078f5     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
078f9     39 FF 77 00 
078fd     55 FF 8A 00 
07901     71 FF 9E 00 
07905     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
07909     AA FF C5 00 
0790d     C6 FF D8 00 
07911     E3 FF EC 00 
07915     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
07919     00 40 28 00 
0791d     00 60 3C 00 
07921     00 80 50 00 
07925     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
07929     00 BF 78 00 
0792d     00 DF 8C 00 
07931     00 FF A0 00 
07935     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
07939     39 FF B5 00 
0793d     55 FF C0 00 
07941     71 FF CA 00 
07945     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
07949     AA FF DF 00 
0794d     C6 FF EA 00 
07951     E3 FF F4 00 
07955     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07959     00 40 40 00 
0795d     00 60 60 00 
07961     00 80 80 00 
07965     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07969     00 BF BF 00 
0796d     00 DF DF 00 
07971     00 FF FF 00 
07975     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07979     39 FF FF 00 
0797d     55 FF FF 00 
07981     71 FF FF 00 
07985     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07989     AA FF FF 00 
0798d     C6 FF FF 00 
07991     E3 FF FF 00 
07995     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07999     00 28 40 00 
0799d     00 3C 60 00 
079a1     00 50 80 00 
079a5     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
079a9     00 78 BF 00 
079ad     00 8C DF 00 
079b1     00 A0 FF 00 
079b5     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
079b9     39 B5 FF 00 
079bd     55 C0 FF 00 
079c1     71 CA FF 00 
079c5     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
079c9     AA DF FF 00 
079cd     C6 EA FF 00 
079d1     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
079d4                 | '**********************************************************************************
079d4                 | '
079d4                 | '        Timings and colors definitions
079d4                 | '
079d4                 | '**********************************************************************************
079d4                 | 
079d4                 |    'streamer sets for text mode, to add to timings[0..5]
079d4                 | ' todo for the retromachine: 768x576
079d4                 | 
079d4                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
079d4     10 00 00 00 
079d8     50 00 00 00 
079dc     14 00 00 00 
079e0     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
079e4     70 00 00 00 
079e8     08 00 00 00 
079ec     30 00 00 00 
079f0     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
079f4     10 00 00 00 
079f8     10 00 00 00 
079fc     00 00 00 00 
07a00     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
07a04     E0 01 00 00 
07a08     F6 32 24 15 
07a0c     FB 6C C3 01 
07a10     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
07a14     12 00 00 00 
07a18     30 00 00 00 
07a1c     10 00 00 00 
07a20     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
07a24     18 00 00 00 
07a28     08 00 00 00 
07a2c     18 00 00 00 
07a30     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
07a34     20 00 00 00 
07a38     18 00 00 00 
07a3c     40 00 00 00 
07a40     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
07a44     F0 01 00 00 
07a48     46 D8 06 13 
07a4c     FB 2D CB 01 
07a50     20 02 00 00 | 	byte	$f0, $01, $00, $00, $46, $d8, $06, $13, $fb, $2d, $cb, $01, $20, $02, $00, $00
07a54                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
07a54     10 00 00 00 
07a58     40 00 00 00 
07a5c     10 00 00 00 
07a60     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
07a64     08 00 00 00 
07a68     08 00 00 00 
07a6c     08 00 00 00 
07a70     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
07a74     40 00 00 00 
07a78     20 00 00 00 
07a7c     80 00 00 00 
07a80     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
07a84     E0 01 00 00 
07a88     70 AE E9 10 
07a8c     FB 8B FF 01 
07a90     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
07a94     10 00 00 00 
07a98     50 00 00 00 
07a9c     14 00 00 00 
07aa0     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
07aa4     00 00 00 00 
07aa8     08 00 00 00 
07aac     00 00 00 00 
07ab0     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
07ab4     10 00 00 00 
07ab8     10 00 00 00 
07abc     C0 00 00 00 
07ac0     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
07ac4     40 02 00 00 
07ac8     F6 32 24 15 
07acc     FB 6C C3 01 
07ad0     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
07ad4     50 00 00 00 
07ad8     A0 00 00 00 
07adc     54 00 00 00 
07ae0     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
07ae4     08 00 00 00 
07ae8     08 00 00 00 
07aec     08 00 00 00 
07af0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
07af4     0C 00 00 00 
07af8     08 00 00 00 
07afc     00 01 00 00 
07b00     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
07b04     E0 01 00 00 
07b08     10 06 56 15 
07b0c     FB 64 C3 01 
07b10     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
07b14     50 00 00 00 
07b18     32 00 00 00 
07b1c     50 00 00 00 
07b20     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
07b24     08 00 00 00 
07b28     08 00 00 00 
07b2c     08 00 00 00 
07b30     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
07b34     0C 00 00 00 
07b38     08 00 00 00 
07b3c     40 01 00 00 
07b40     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
07b44     E0 01 00 00 
07b48     F2 CD 33 13 
07b4c     FB 53 92 01 
07b50     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
07b54     18 00 00 00 
07b58     30 00 00 00 
07b5c     18 00 00 00 
07b60     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
07b64     08 00 00 00 
07b68     08 00 00 00 
07b6c     08 00 00 00 
07b70     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
07b74     0C 00 00 00 
07b78     08 00 00 00 
07b7c     80 01 00 00 
07b80     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
07b84     E0 01 00 00 
07b88     F4 8F 11 11 
07b8c     FB 3A 55 01 
07b90     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
07b94     20 00 00 00 
07b98     40 00 00 00 
07b9c     22 00 00 00 
07ba0     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
07ba4     00 00 00 00 
07ba8     08 00 00 00 
07bac     00 00 00 00 
07bb0     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
07bb4     0C 00 00 00 
07bb8     08 00 00 00 
07bbc     C0 01 00 00 
07bc0     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
07bc4     F0 01 00 00 
07bc8     F2 CD 33 13 
07bcc     FB 53 92 01 
07bd0     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
07bd4                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
07bd4     00 75 C7 97 
07bd8     27 47 F6 0A 
07bdc     05 79 CB 9B 
07be0     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
07be4                 | 
07be4     28 12 64 FD | hdmi            setq    #9
07be8     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
07bec                 |            '     setq2   #255
07bec                 |             '    rdlong  $100, paletteptr 
07bec     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
07bf0     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
07bf4     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
07bf8     78 F9 02 F1 |                 add     ii,hbase
07bfc     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
07c00     7B 0B 80 FF 
07c04     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
07c08                 | 
07c08     66 66 86 FF 
07c0c     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
07c10                 | 
07c10                 | 
07c10                 | ''--------  frame rendering main loop  ---------------------------------------------------
07c10                 | 
07c10                 | p101
07c10     28 14 64 FD |                 setq    #10
07c14     00 DF 06 FB |                 rdlong  framebuf,  ptra
07c18     28 1E 64 FD |                 setq    #15
07c1c     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
07c20     71 99 02 FB |                 rdlong  border,borderptr
07c24                 | 
07c24     01 C4 06 F1 |                 add     frames,#1
07c28     76 F5 02 F6 |                 mov     dlptr2,dlptr
07c2c                 | 
07c2c     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
07c30     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
07c34     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
07c38     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
07c3c                 |  '' up porch
07c3c                 | 
07c3c     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
07c40     49 FF 02 F6 |                 mov     hsync1,sync_001
07c44     37 A8 46 FB |                 callpa  i_upporch ,#blank
07c48     72 01 68 FC |                 wrlong  #0,vblankptr
07c4c                 |                 
07c4c     1F EA 16 F4 |                 testb   paletteptr,#31 wc
07c50     29 FE 65 3D |          if_nc  setq2   #255
07c54     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
07c58                 | 
07c58                 | '' cursor blinking
07c58                 | 
07c58     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
07c5c     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
07c60                 | 
07c60                 | '' main screen
07c60                 | 
07c60     00 BE 06 F6 |                 mov linenum,#0
07c64     00 18 07 F6 |                 mov rcnt,#0
07c68     00 1C 07 F6 |                 mov rcnt2a,#0
07c6c                 | 
07c6c                 | 
07c6c     00 18 0F F2 | p301            cmp rcnt,#0 wz
07c70     18 00 90 AD |         if_z    jmp #p306
07c74     01 18 87 F1 |                 sub rcnt,#1
07c78     90 F7 02 F6 |                 mov dl,rdl
07c7c     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
07c80     8F F7 02 A1 |    if_z        add dl,roffset  
07c84     7B 21 03 F6 |                 mov rdl,dl
07c88     04 00 90 FD |                 jmp #p307          
07c8c                 |           
07c8c                 |                 
07c8c     7A F7 02 FB | p306            rdlong  dl,dlptr2
07c90     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
07c94     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
07c98     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
07c9c                 | 
07c9c                 | '' Special entry:
07c9c                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
07c9c                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
07c9c                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
07c9c                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
07c9c                 | '' todo: set horizontal scroll (if needed)
07c9c                 | 
07c9c     02 FA 66 F0 |                 shl framebuf2,#2
07ca0     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
07ca4     04 22 0F F2 |                 cmp dlc,#%100 wz
07ca8                 |   
07ca8                 |                 
07ca8     04 F4 06 F1 |                 add dlptr2,#4
07cac     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
07cb0     7A 21 03 FB |                  rdlong rdl,dlptr2
07cb4     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
07cb8     04 18 47 F0 |                  shr rcnt,#4
07cbc                 |              
07cbc     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
07cc0     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
07cc4                 |                 
07cc4     04 1E 47 F0 |                  shr roffset,#4
07cc8     0C 1E 67 F0 |                  shl roffset,#12
07ccc                 |   
07ccc     9C FF 9F FD |                  jmp #p301
07cd0                 |                  
07cd0                 |                  
07cd0                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
07cd0     0C FA 46 F0 |                 shr     framebuf2,#12
07cd4     02 FA 66 F0 |                 shl     framebuf2,#2
07cd8                 | 
07cd8     7B 03 E3 F8 |                 getbyte t1,dl,#0
07cdc     00 02 0F F2 |                 cmp     t1,#0 wz
07ce0     34 00 90 AD |     if_z        jmp     #borderline
07ce4                 | 
07ce4     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
07ce8     50 00 90 CD |           if_c   jmp     #textline
07cec     50 02 90 3D |           if_nc  jmp     #graphline
07cf0                 | '
07cf0     01 BE 06 F1 | p302            add     linenum,#1
07cf4     04 F4 06 F1 |                 add     dlptr2,#4
07cf8     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
07cfc     6C FF 9F 5D |          if_nz  jmp     #p301
07d00                 | 
07d00     72 03 68 FC | p112            wrlong  #1,vblankptr
07d04     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
07d08                 | 
07d08     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
07d0c     4B FF 02 F6 |                 mov     hsync1,sync_223
07d10     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
07d14     F8 FE 9F FD |                 jmp     #p101
07d18                 | 
07d18                 | '' ---------------  END of frame rendering loop -------------------------------------------
07d18                 | 
07d18                 | 
07d18     14 00 B0 FD | borderline      call    #hsync                      ' make a border
07d1c     4C A1 C2 FC |                 xcont   m_vi,border
07d20     CC FF 9F FD |                 jmp     #p302
07d24                 | 
07d24                 | 
07d24     08 00 B0 FD | blank           call    #hsync                          'blank lines
07d28     7E A1 C2 FC |                 xcont   m_vi,hsync0
07d2c     FD ED 6F 0B |         _ret_   djnz    pa,#blank
07d30                 | 
07d30     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
07d34     7F 9D B2 FC |                 xzero   m_sn,hsync1
07d38     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
07d3c                 | 
07d3c                 | 
07d3c                 | 
07d3c                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
07d3c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
07d3c                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
07d3c                 | 
07d3c                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
07d3c                 | 
07d3c     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
07d40                 | 
07d40     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
07d44     7B 17 5B F8 |                 getnib  zoom, dl,#3
07d48     03 16 07 F5 |                 and             zoom, #3
07d4c                 | 
07d4c                 | 
07d4c                 | 
07d4c     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
07d50     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
07d54     3F BC 06 F5 |                 and     linestart,#63
07d58     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
07d5c     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
07d60                 | 
07d60     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
07d64                 | 
07d64                 |                        ' if fontline =0, get a border color
07d64                 | 
07d64     51 03 33 F9 | p102            getword t1,m_border,#0
07d68     00 02 0F F2 |                 cmp     t1, #0 wz
07d6c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07d70                 | 
07d70     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
07d74     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
07d78     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
07d7c     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
07d80     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
07d84     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
07d88     52 BB 02 F6 |                 mov m_lut2, m_lut1
07d8c     6A BB 02 F1 |                 add m_lut2, lutt1
07d90     58 0F 03 F6 |                 mov cpl2,i_cpl
07d94                 | 
07d94     02 16 0F F2 |                cmp zoom,#2 wz
07d98     E4 00 90 AD |           if_z jmp #p420
07d9c     01 16 0F F2 |                cmp zoom,#1 wz
07da0     64 00 90 AD |           if_z jmp #p410
07da4     00 16 0F F2 |                 cmp zoom,#0 wz
07da8     04 00 90 AD |           if_z jmp #p400
07dac     50 01 90 FD |                jmp #p430
07db0                 | 
07db0                 |                    '
07db0                 |  ''---------------------------------------------------------------------------------------------------------
07db0     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
07db4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07db8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07dbc     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07dc0     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07dc4     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07dc8     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07dcc     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07dd0     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07dd4     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07dd8                 | 
07dd8     81 BB C2 FC |                         xcont m_lut2,t1
07ddc                 | 
07ddc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07de0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07de4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07de8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07dec     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07df0     01 C0 86 F1 |                         sub     lutaddr,#1
07df4                 | 
07df4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07df8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07dfc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07e00                 | 
07e00     EB 0F 6F FB |                         djnz   cpl2,#p400
07e04     28 01 90 FD |  p401                   jmp    #p103
07e08                 | 
07e08                 | ''------------------------------------------------------------------------------------------------------------
07e08                 | 
07e08     01 0E 47 F0 |  p410                   shr cpl2,#1
07e0c                 | 
07e0c                 | ''---------------------------------------------------------------------------------------------------------
07e0c     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
07e10     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07e14     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07e18     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07e1c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07e20     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07e24     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07e28     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07e2c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07e30     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07e34                 | 
07e34                 | 
07e34     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
07e38     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
07e3c     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
07e40     03 02 07 FA |                         mul t1,#3
07e44     81 BB C2 FC |                         xcont m_lut2,t1
07e48     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07e4c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07e50     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07e54     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07e58     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07e5c     01 C0 86 F1 |                         sub     lutaddr,#1
07e60     63 06 63 FD |                         mergew t3
07e64     03 06 07 FA |                         mul t3,#3
07e68     83 BB C2 FC |                         xcont m_lut2,t3
07e6c                 | 
07e6c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07e70     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07e74                 | 
07e74     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07e78                 | 
07e78     E4 0F 6F FB |                         djnz   cpl2,#p412
07e7c     B0 00 90 FD |  p411                   jmp    #p103
07e80                 | 
07e80                 | ''------------------------------------------------------------------------------------------------------------
07e80                 | 
07e80     02 0E 47 F0 |  p420                   shr cpl2,#2
07e84                 | 
07e84                 | ''---------------------------------------------------------------------------------------
07e84     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
07e88     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07e8c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07e90     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07e94     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07e98     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07e9c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07ea0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07ea4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07ea8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07eac                 | 
07eac     61 02 63 FD |                         mergeb t1
07eb0     81 07 3B F9 |                         getword t3,t1,#1
07eb4     0F 02 07 FA |                         mul t1,#15
07eb8     81 BB C2 FC |                         xcont m_lut2,t1
07ebc                 | 
07ebc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07ec0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07ec4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07ec8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07ecc     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07ed0     01 C0 86 F1 |                         sub     lutaddr,#1
07ed4                 | 
07ed4     81 09 EB F8 |                         getbyte t4,t1,#1        '
07ed8     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
07edc                 | 
07edc     0F 06 07 FA |                         mul t3,#15
07ee0     83 BB C2 FC |                         xcont m_lut2,t3
07ee4                 | 
07ee4     83 0B EB F8 |                         getbyte t5,t3,#1
07ee8     85 BB C2 FC |                         xcont m_lut2, t5
07eec     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07ef0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07ef4                 | 
07ef4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07ef8                 | 
07ef8     E2 0F 6F FB |                         djnz   cpl2,#p422
07efc     30 00 90 FD |  p421                   jmp    #p103
07f00                 | 
07f00                 | '--------------------------------------------------------------------------------------------------------------
07f00                 | 
07f00     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
07f04     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07f08     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07f0c                 | 
07f0c     00 BA C6 FC |                         xcont m_lut2,#0
07f10                 | 
07f10     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07f14     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07f18     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07f1c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07f20     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07f24     01 C0 86 F1 |                         sub     lutaddr,#1
07f28                 | 
07f28     F5 0F 6F FB |                         djnz   cpl2,#p430
07f2c     00 00 90 FD |  p431                   jmp    #p103
07f30                 | 
07f30                 | ''------------------------------------------------------------------------------------------------------------
07f30                 | 
07f30                 | 
07f30                 | 
07f30     51 25 33 F9 | p103            getword  mb2,m_border,#0
07f34     00 24 0F F2 |                 cmp      mb2, #0 wz
07f38     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07f3c                 | 
07f3c     B0 FD 9F FD |                 jmp #p302
07f40                 | 
07f40                 | '' -------------------------------------- END of text line ---------------------------------
07f40                 | 
07f40                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
07f40                 | 
07f40     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
07f44                 | 
07f44                 | 
07f44     51 25 33 F9 | p202            getword mb2,m_border,#0
07f48     00 24 0F F2 |                 cmp     mb2, #0 wz
07f4c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07f50                 | 
07f50                 | '----------------------------------------- display pixels
07f50                 | 
07f50     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
07f54     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
07f58                 | 
07f58     7B 17 5B F8 |                 getnib  zoom, dl,#3
07f5c     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
07f60                 | 
07f60     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
07f64     0C BC 06 F5 |                 and     colordepth,#12
07f68                 | 
07f68     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
07f6c     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
07f70     64 00 90 AD |           if_z  jmp     #p240
07f74                 | 
07f74     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
07f78     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
07f7c     98 00 90 AD |           if_z  jmp     #p250
07f80                 | 
07f80     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
07f84     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
07f88     FC 00 90 AD |           if_z  jmp     #p260
07f8c                 | 
07f8c     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
07f90                 | 
07f90                 | '' --- 8 bit color modes
07f90                 | 
07f90     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
07f94     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07f98                 | 
07f98     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
07f9c     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
07fa0                 |        
07fa0                 |  '  
07fa0     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
07fa4     25 0C 07 A6 |                 if_z mov skippattern,#%100101
07fa8                 |     
07fa8                 |  
07fa8     05 0C 07 56 |                 if_nz mov skippattern,#%000101
07fac     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
07fb0                 |         
07fb0                 | 
07fb0                 |         
07fb0     7D 11 03 FB | p235               rdlong  char,framebuf2
07fb4     32 0C 63 FD |                    skipf skippattern
07fb8     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
07fbc     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
07fc0     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
07fc4     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
07fc8     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
07fcc     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
07fd0     F7 0F 6F FB |                    djnz    cpl2,#p235
07fd4                 | 
07fd4     20 01 90 FD |                jmp    #p203
07fd8                 |                   
07fd8                 | 
07fd8                 | 
07fd8                 | '' --- 1 bit color modes
07fd8                 | 
07fd8     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
07fdc     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07fe0                 | 
07fe0     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
07fe4     13 0C 07 A6 |        if_z   mov skippattern,#%10011
07fe8     08 0C 07 56 |        if_nz  mov skippattern,#%01000
07fec                 | 
07fec                 | 
07fec     7D 11 E3 FA | p241               rdword  char,framebuf2
07ff0     44 10 FF F9 |                    movbyts char,#%01000100
07ff4     63 10 63 FD |                    mergew  char
07ff8     32 0C 63 FD |                    skipf skippattern
07ffc     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
08000     63 10 63 FD |                    mergew  char                    ' 1 0
08004     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
08008     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
0800c     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
08010     F6 0F 6F FB |                    djnz   cpl2,#p241
08014                 | 
08014                 | 
08014     E0 00 90 FD |                jmp    #p203
08018                 | 
08018                 | '' --- 2 bit color modes
08018                 | 
08018     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
0801c     C8 00 90 AD |        if_z   jmp #p251
08020                 | 
08020     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
08024     30 00 90 AD |        if_z   jmp #p252
08028                 | 
08028                 | 
08028     7D 11 C3 FA | p254               rdbyte char,framebuf2
0802c     04 0A 07 F6 |                    mov  t5,#4
08030     02 10 67 F0 | p255               shl  char,#2
08034     88 03 53 F8 |                    getnib  t1,char,#2
08038     03 02 07 F5 |                    and     t1,#3
0803c     55 02 07 FA |                    mul     t1,#$55
08040     81 05 03 F9 |                    rolbyte  t2,t1,#0
08044     FA 0B 6F FB |                    djnz    t5,#p255
08048     82 BB C2 FC |                    xcont   m_lut2,t2
0804c     01 FA 06 F1 |                    add     framebuf2,#1
08050     F5 0F 6F FB |                    djnz    cpl2,#p254
08054     A0 00 90 FD |                    jmp     #p203
08058                 | 
08058     7D 11 E3 FA | p252               rdword char,framebuf2
0805c     08 0A 07 F6 |                    mov  t5,#8
08060     02 10 67 F0 | p253               shl  char,#2
08064     88 03 63 F8 |                    getnib  t1,char,#4
08068     03 02 07 F5 |                    and     t1,#3
0806c     05 02 07 FA |                    mul     t1,#5
08070     81 05 83 F8 |                    rolnib  t2,t1,#0
08074     FA 0B 6F FB |                    djnz    t5,#p253
08078     82 BB C2 FC |                    xcont   m_lut2,t2
0807c     02 FA 06 F1 |                    add     framebuf2,#2
08080     F5 0F 6F FB |                    djnz    cpl2,#p252
08084     70 00 90 FD |                    jmp     #p203
08088                 | 
08088                 | '' ------ 4 bit color modes
08088                 | 
08088     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
0808c     58 00 90 AD |        if_z   jmp #p251
08090                 | 
08090     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
08094     2C 00 90 AD |        if_z   jmp #p262
08098                 | 
08098                 | 
08098     7D 11 C3 FA | p263               rdbyte char,framebuf2
0809c     02 0A DC FC |                            rep #5,#2
080a0     88 05 8B F8 |                              rolnib t2,char,#1
080a4     88 05 8B F8 |                                  rolnib t2,char,#1
080a8     88 05 8B F8 |                              rolnib t2,char,#1
080ac     88 05 8B F8 |                                  rolnib t2,char,#1
080b0     04 10 67 F0 |                              shl char,#4
080b4     82 BB C2 FC |                    xcont   m_lut2,t2
080b8     01 FA 06 F1 |                    add     framebuf2,#1
080bc     F6 0F 6F FB |                    djnz    cpl2,#p263
080c0     34 00 90 FD |                    jmp     #p203
080c4                 | 
080c4     7D 11 E3 FA | p262               rdword  char,framebuf2
080c8     04 06 DC FC |                            rep #3,#4
080cc     88 05 9B F8 |                              rolnib t2,char,#3
080d0     88 05 9B F8 |                                  rolnib t2,char,#3
080d4     04 10 67 F0 |                              shl char,#4
080d8     82 BB C2 FC |                    xcont   m_lut2,t2
080dc     02 FA 06 F1 |                    add     framebuf2,#2
080e0     F8 0F 6F FB |                    djnz    cpl2,#p262
080e4     10 00 90 FD |                    jmp     #p203
080e8                 | 
080e8                 | ''---------- all color modes without zoom
080e8                 | 
080e8     87 07 D8 FC | p251               rep  #3,cpl2
080ec     7D 11 03 FB |                    rdlong  char,framebuf2
080f0     04 FA 06 F1 |                    add     framebuf2,#4
080f4     88 BB C2 FC |                    xcont   m_lut2,char
080f8                 |           
080f8                 |  ''-----------------------------------------------------------------------------------------
080f8                 | p203           ' getword  mb2,m_border,#0
080f8     00 24 0F F2 |                 cmp      mb2, #0 wz
080fc     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
08100                 | 
08100     EC FB 9F FD |                 jmp #p302
08104                 | 
08104                 | '' -------------------------------------- END of graph  line ---------------------------------
08104                 | 
08104                 | '' consts and vars
08104                 | 
08104     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
08108     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
0810c     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
08110     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
08114                 | 
08114     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
08118                 | 
08118                 | '------ these longs will be set by setmode function
08118                 | 
08118     00 00 00 00 | m_bs            long    0        'blanks before sync
0811c     00 00 00 00 | m_sn            long    0        'sync
08120     00 00 00 00 | m_bv            long    0        'blanks before visible
08124     00 00 00 00 | m_vi            long    0        'visible pixels #
08128     00 00 00 00 | m_border        long    0        'left/right borders
0812c     00 00 00 00 | m_lut1          long    0        'characters
08130     00 00 00 00 | i_vborder       long    0        'up/down borders
08134     00 00 00 00 | i_upporch       long    0        'up porch lines
08138     00 00 00 00 | i_vsync         long    0        'vsync lines
0813c     00 00 00 00 | i_downporch     long    0        'down porch lines
08140     00 00 00 00 | i_modenum       long    0        'mode #
08144     00 00 00 00 | i_cpl           long    0        'chars/longs per line
08148     00 00 00 00 | i_lines         long    0        'scanlines #
0814c     00 00 00 00 | i_clock         long    0
08150     00 00 00 00 | i_hubset        long    0
08154     00 00 00 00 | i_totalvis      long    0
08158                 | 
08158                 | '-------------------------------------
08158                 | 
08158     00 00 00 00 | m_lut2          long    0
0815c                 | 
0815c                 | colordepth
0815c     00 00 00 00 | linestart       long    0
08160     00 00 00 00 | linenum         long    0
08164     00 01 00 00 | lutaddr         long    256
08168                 | 
08168     0E 00 00 00 | cursorsh        long    14
0816c     00 00 00 00 | frames          long    0
08170     00 00 00 00 | cursorx         long    0
08174     00 00 00 00 | cursory         long    0
08178     00 00 00 00 | cursorpos       long    0
0817c     00 00 00 00 | cursorpos2      long    0
08180     00 00 00 00 | fontstart       long    0
08184     00 00 00 00 | border2         long 0
08188     00 00 81 70 | lutiv           long $70810000
0818c     00 00 88 00 | lutt1           long $00880000
08190     00 00 80 00 | lutg1           long $00800000
08194     00 00 80 10 | lutg2           long $10800000
08198     00 00 80 20 | lutg4           long $20800000
0819c     00 00 80 30 | lutg8           long $30800000
081a0     00 00 00 00 | framebuf        long 0
081a4     00 00 00 00 | fontbuf         long 0
081a8     00 00 00 00 | borderptr       long 0
081ac     00 00 00 00 | vblankptr       long 0
081b0     00 00 00 00 | cursorptr       long 0
081b4     00 00 00 00 | modeptr         long 0
081b8     00 00 00 00 | paletteptr      long 0
081bc     00 00 00 00 | dlptr           long 0
081c0                 | fontnumptr      res     1
081c0                 | fontnumptr      res     1
081c0                 | hbase           res     1
081c0                 | hbase           res     1
081c0                 | borderptr2      res     1
081c0                 | borderptr2      res     1
081c0                 | dlptr2 res 1
081c0                 | dlptr2 res 1
081c0                 | dl              res 1
081c0                 | dl              res 1
081c0                 | ii              res     1
081c0                 | ii              res     1
081c0                 | framebuf2       res     1
081c0                 | framebuf2       res     1
081c0                 | hsync0          res     1
081c0                 | hsync0          res     1
081c0                 | hsync1          res     1
081c0                 | hsync1          res     1
081c0                 | fontline        res     1
081c0                 | fontline        res     1
081c0                 | t1              res     1
081c0                 | t1              res     1
081c0                 | t2              res     1
081c0                 | t2              res     1
081c0                 | t3 res 1
081c0                 | t3 res 1
081c0                 | t4 res 1
081c0                 | t4 res 1
081c0                 | t5 res 1
081c0                 | t5 res 1
081c0                 | skippattern res 1
081c0                 | skippattern res 1
081c0                 | cpl2 res 1
081c0                 | cpl2 res 1
081c0                 | char            res     1
081c0                 | char            res     1
081c0                 | backcolor       res     1
081c0                 | backcolor       res     1
081c0                 | charcolor       res     1
081c0                 | charcolor       res     1
081c0                 | zoom res 1
081c0                 | zoom res 1
081c0     00 00 00 00 | rcnt long 0 'dl repeat count
081c4     00 00 00 00 | rcnt2 long 0
081c8     00 00 00 00 | rcnt2a long 0
081cc     00 00 00 00 | roffset long 0
081d0     00 00 00 00 | rdl long 0  'dl repeat line
081d4     00 00 00 00 | dlc long 0 'dl command
081d8     00 00 00 00 | mb2 long 0
081dc     00 00 00 00 | aend             long 0
081e0                 |                 fit     496                     '
081e0                 | __system__dat_
081e0     00 00 00 00 
081e4     00 00 00 00 | 	byte	$00[8]
081e8     03 00 00 00 
081ec     00 00 00 00 
081f0     00 00 00 00 
081f4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
081f8     00 00 00 00 
081fc     00 00 00 00 
08200     00 00 00 00 | 	byte	$00[12]
08204     05 00 00 00 
08208     00 00 00 00 
0820c     00 00 00 00 
08210     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08214     DC 83 00 00 | 	long	@@@__system__dat_ + 508
08218     E4 83 00 00 | 	long	@@@__system__dat_ + 516
0821c     00 00 00 00 | 	byte	$00, $00, $00, $00
08220     EC 83 00 00 | 	long	@@@__system__dat_ + 524
08224     F4 83 00 00 | 	long	@@@__system__dat_ + 532
08228     00 00 00 00 
0822c     00 00 00 00 | 	byte	$00[8]
08230     01 00 00 00 
08234     06 00 00 00 
08238     00 00 00 00 
0823c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08240     00 00 00 00 | 	byte	$00, $00, $00, $00
08244     FC 83 00 00 | 	long	@@@__system__dat_ + 540
08248     04 84 00 00 | 	long	@@@__system__dat_ + 548
0824c     00 00 00 00 | 	byte	$00, $00, $00, $00
08250     0C 84 00 00 | 	long	@@@__system__dat_ + 556
08254     14 84 00 00 | 	long	@@@__system__dat_ + 564
08258     00 00 00 00 
0825c     00 00 00 00 | 	byte	$00[8]
08260     01 00 00 00 
08264     06 00 00 00 
08268     00 00 00 00 
0826c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08270     00 00 00 00 | 	byte	$00, $00, $00, $00
08274     1C 84 00 00 | 	long	@@@__system__dat_ + 572
08278     24 84 00 00 | 	long	@@@__system__dat_ + 580
0827c     00 00 00 00 | 	byte	$00, $00, $00, $00
08280     2C 84 00 00 | 	long	@@@__system__dat_ + 588
08284     34 84 00 00 | 	long	@@@__system__dat_ + 596
08288     00 00 00 00 
      ...             
083d8     00 00 00 00 
083dc     00 00 00 00 | 	byte	$00[344]
083e0     C4 3A 00 00 | 	long	@@@__system___tx
083e4     00 00 00 00 | 	byte	$00, $00, $00, $00
083e8     0C 3B 00 00 | 	long	@@@__system___rx
083ec     00 00 00 00 | 	byte	$00, $00, $00, $00
083f0     4C 54 00 00 | 	long	@@@__system___rxtxioctl_0131
083f4     00 00 00 00 | 	byte	$00, $00, $00, $00
083f8     C4 54 00 00 | 	long	@@@__system____dummy_flush_0132
083fc     00 00 00 00 | 	byte	$00, $00, $00, $00
08400     C4 3A 00 00 | 	long	@@@__system___tx
08404     00 00 00 00 | 	byte	$00, $00, $00, $00
08408     0C 3B 00 00 | 	long	@@@__system___rx
0840c     00 00 00 00 | 	byte	$00, $00, $00, $00
08410     4C 54 00 00 | 	long	@@@__system___rxtxioctl_0131
08414     00 00 00 00 | 	byte	$00, $00, $00, $00
08418     C4 54 00 00 | 	long	@@@__system____dummy_flush_0132
0841c     00 00 00 00 | 	byte	$00, $00, $00, $00
08420     C4 3A 00 00 | 	long	@@@__system___tx
08424     00 00 00 00 | 	byte	$00, $00, $00, $00
08428     0C 3B 00 00 | 	long	@@@__system___rx
0842c     00 00 00 00 | 	byte	$00, $00, $00, $00
08430     4C 54 00 00 | 	long	@@@__system___rxtxioctl_0131
08434     00 00 00 00 | 	byte	$00, $00, $00, $00
08438     C4 54 00 00 | 	long	@@@__system____dummy_flush_0132
0843c     00 00 00 00 | 	byte	$00, $00, $00, $00
08440                 | __heap_base
08440     00 00 00 00 
      ...             
09440     00 00 00 00 
09444     00 00 00 00 | 	long	0[1026]
09448                 | objmem
09448     00 00 00 00 | 	long	0[1]
0944c 115             | 	org	COG_BSS_START
0944c 115             | _var01
0944c 115             | 	res	1
0944c 116             | _var02
0944c 116             | 	res	1
0944c 117             | _var03
0944c 117             | 	res	1
0944c 118             | _var04
0944c 118             | 	res	1
0944c 119             | _var05
0944c 119             | 	res	1
0944c 11a             | _var06
0944c 11a             | 	res	1
0944c 11b             | _var07
0944c 11b             | 	res	1
0944c 11c             | _var08
0944c 11c             | 	res	1
0944c 11d             | _var09
0944c 11d             | 	res	1
0944c 11e             | _var10
0944c 11e             | 	res	1
0944c 11f             | _var11
0944c 11f             | 	res	1
0944c 120             | _var12
0944c 120             | 	res	1
0944c 121             | _var13
0944c 121             | 	res	1
0944c 122             | _var14
0944c 122             | 	res	1
0944c 123             | _var15
0944c 123             | 	res	1
0944c 124             | _var16
0944c 124             | 	res	1
0944c 125             | arg01
0944c 125             | 	res	1
0944c 126             | arg02
0944c 126             | 	res	1
0944c 127             | arg03
0944c 127             | 	res	1
0944c 128             | arg04
0944c 128             | 	res	1
0944c 129             | arg05
0944c 129             | 	res	1
0944c 12a             | local01
0944c 12a             | 	res	1
0944c 12b             | local02
0944c 12b             | 	res	1
0944c 12c             | local03
0944c 12c             | 	res	1
0944c 12d             | local04
0944c 12d             | 	res	1
0944c 12e             | local05
0944c 12e             | 	res	1
0944c 12f             | local06
0944c 12f             | 	res	1
0944c 130             | local07
0944c 130             | 	res	1
0944c 131             | local08
0944c 131             | 	res	1
0944c 132             | local09
0944c 132             | 	res	1
0944c 133             | local10
0944c 133             | 	res	1
0944c 134             | local11
0944c 134             | 	res	1
0944c 135             | local12
0944c 135             | 	res	1
0944c 136             | local13
0944c 136             | 	res	1
0944c 137             | local14
0944c 137             | 	res	1
0944c 138             | local15
0944c 138             | 	res	1
0944c 139             | local16
0944c 139             | 	res	1
0944c 13a             | local17
0944c 13a             | 	res	1
0944c 13b             | local18
0944c 13b             | 	res	1
0944c 13c             | local19
0944c 13c             | 	res	1
0944c 13d             | local20
0944c 13d             | 	res	1
0944c 13e             | local21
0944c 13e             | 	res	1
0944c 13f             | local22
0944c 13f             | 	res	1
0944c 140             | local23
0944c 140             | 	res	1
0944c 141             | local24
0944c 141             | 	res	1
0944c 142             | local25
0944c 142             | 	res	1
0944c 143             | local26
0944c 143             | 	res	1
0944c 144             | local27
0944c 144             | 	res	1
0944c 145             | local28
0944c 145             | 	res	1
0944c 146             | local29
0944c 146             | 	res	1
0944c 147             | local30
0944c 147             | 	res	1
0944c 148             | local31
0944c 148             | 	res	1
0944c 149             | local32
0944c 149             | 	res	1
0944c 14a             | local33
0944c 14a             | 	res	1
0944c 14b             | local34
0944c 14b             | 	res	1
0944c 14c             | local35
0944c 14c             | 	res	1
0944c 14d             | local36
0944c 14d             | 	res	1
0944c 14e             | local37
0944c 14e             | 	res	1
0944c 14f             | local38
0944c 14f             | 	res	1
0944c 150             | local39
0944c 150             | 	res	1
0944c 151             | local40
0944c 151             | 	res	1
0944c 152             | local41
0944c 152             | 	res	1
0944c 153             | local42
0944c 153             | 	res	1
0944c 154             | local43
0944c 154             | 	res	1
0944c 155             | local44
0944c 155             | 	res	1
0944c 156             | local45
0944c 156             | 	res	1
0944c 157             | local46
0944c 157             | 	res	1
0944c 158             | local47
0944c 158             | 	res	1
0944c 159             | local48
0944c 159             | 	res	1
0944c 15a             | local49
0944c 15a             | 	res	1
0944c 15b             | local50
0944c 15b             | 	res	1
0944c 15c             | local51
0944c 15c             | 	res	1
0944c 15d             | local52
0944c 15d             | 	res	1
0944c 15e             | local53
0944c 15e             | 	res	1
0944c 15f             | local54
0944c 15f             | 	res	1
0944c 160             | local55
0944c 160             | 	res	1
0944c 161             | local56
0944c 161             | 	res	1
0944c 162             | local57
0944c 162             | 	res	1
0944c 163             | local58
0944c 163             | 	res	1
0944c 164             | local59
0944c 164             | 	res	1
0944c 165             | local60
0944c 165             | 	res	1
0944c 166             | local61
0944c 166             | 	res	1
0944c 167             | local62
0944c 167             | 	res	1
0944c 168             | local63
0944c 168             | 	res	1
0944c 169             | local64
0944c 169             | 	res	1
0944c 16a             | local65
0944c 16a             | 	res	1
0944c 16b             | local66
0944c 16b             | 	res	1
0944c 16c             | local67
0944c 16c             | 	res	1
0944c 16d             | local68
0944c 16d             | 	res	1
0944c 16e             | local69
0944c 16e             | 	res	1
0944c 16f             | local70
0944c 16f             | 	res	1
0944c 170             | local71
0944c 170             | 	res	1
0944c 171             | local72
0944c 171             | 	res	1
0944c 172             | local73
0944c 172             | 	res	1
0944c 173             | local74
0944c 173             | 	res	1
0944c 174             | local75
0944c 174             | 	res	1
0944c 175             | local76
0944c 175             | 	res	1
0944c 176             | local77
0944c 176             | 	res	1
0944c 177             | local78
0944c 177             | 	res	1
0944c 178             | local79
0944c 178             | 	res	1
0944c 179             | local80
0944c 179             | 	res	1
0944c 17a             | local81
0944c 17a             | 	res	1
0944c 17b             | local82
0944c 17b             | 	res	1
0944c 17c             | local83
0944c 17c             | 	res	1
0944c 17d             | local84
0944c 17d             | 	res	1
0944c 17e             | local85
0944c 17e             | 	res	1
0944c 17f             | local86
0944c 17f             | 	res	1
0944c 180             | local87
0944c 180             | 	res	1
0944c 181             | local88
0944c 181             | 	res	1
0944c 182             | local89
0944c 182             | 	res	1
0944c 183             | local90
0944c 183             | 	res	1
0944c 184             | muldiva_
0944c 184             | 	res	1
0944c 185             | muldivb_
0944c 185             | 	res	1
0944c 186             | 	fit	480
0944c 186             | 
