00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/player2.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 30 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 17 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 76 62 FD | 	cogid	arg01
00614 084 03 76 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 31 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 77 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 79 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 7B 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 7D 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 30 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 7A 56 F0 |         shr	arg03, #1 wc
00688 0a1 3B 79 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 76 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 78 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 7A 56 F0 |         shr	arg03, #1 wc
00698 0a5 3B 79 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 76 06 C1 |  if_c   add	arg01, #2
006a0 0a7 3C 79 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 3B 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 7A 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 3D 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 78 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 85 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 85 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 6D D9 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 DA 62 FD |        getqx   muldivb_
00740 0cf 19 D8 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 6C D9 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 6D DB 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 6C D9 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 6D DB 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 30 06 F6 |     mov result1, #0
00778 0dd 00 32 06 F6 |     mov result2, #0
0077c 0de 3B 07 02 F6 |     mov abortchain, arg01
00780 0df 3B 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 76 06 F1 |     add arg01, #4
00788 0e1 3B F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 76 06 F1 |     add arg01, #4
00790 0e3 3B 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 76 06 F1 |     add arg01, #4
00798 0e5 3B B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 3C 77 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 3B F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 76 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 76 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 3C 31 02 F6 |     mov result1, arg02
007d4 0f4 01 32 06 F6 |     mov result2, #1
007d8 0f5 3B 79 02 FB |     rdlong arg02, arg01
007dc 0f6 04 76 06 F1 |     add arg01, #4
007e0 0f7 3B F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 76 06 F1 |     add arg01, #4
007e8 0f9 3B 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 76 06 F1 |     add arg01, #4
007f0 0fb 3B B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 76 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 7A 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 1C 3C 02 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 24 4C 02 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 A4 F3 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 EC F2 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a E8 33 02 00 | 	long	@__system__dat_
00830 10b             | ptr__audio019_spin2_dat__
00830 10b D8 28 02 00 | 	long	@_audio019_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 00 F5 00 00 | 	long	@_dat_
00838 10d             | ptr__ff_cc_dat__
00838 10d 9C 3A 02 00 | 	long	@_ff_cc_dat_
0083c 10e             | ptr__hng030rm_spin2_dat__
0083c 10e 3C ED 01 00 | 	long	@_hng030rm_spin2_dat_
00840 10f             | ptr__hng030rm_spin2_putchar_
00840 10f 34 25 00 00 | 	long	@_hng030rm_spin2_putchar
00844 110             | ptr__hng030rm_spin2_putpixel1_
00844 110 40 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00848 111             | ptr__hng030rm_spin2_putpixel2_
00848 111 2C 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
0084c 112             | ptr__hng030rm_spin2_putpixel4_
0084c 112 18 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
00850 113             | ptr__hng030rm_spin2_putpixel8_
00850 113 04 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00854 114             | ptr__retrocog_spin2_serialcog_
00854 114 90 36 00 00 | 	long	@_retrocog_spin2_serialcog
00858 115             | ptr__shell_c_dat__
00858 115 A0 11 02 00 | 	long	@_shell_c_dat_
0085c 116             | ptr__trackerplayer_spin2_dat__
0085c 116 B4 17 02 00 | 	long	@_trackerplayer_spin2_dat_
00860 117             | ptr_stackspace_
00860 117 D4 5D 02 00 | 	long	@stackspace
00864 118             | result1
00864 118 00 00 00 00 | 	long	0
00868 119             | result2
00868 119 00 00 00 00 | 	long	0
0086c 11a             | result3
0086c 11a 00 00 00 00 | 	long	0
00870 11b             | COG_BSS_START
00870 11b             | 	fit	480
00870                 | 	orgh
00870                 | hubentry
00870                 | 
00870                 | ' 
00870                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00870                 | _startvideo
00870     10 2C B0 FD | 	call	#_hng030rm_spin2_start
00874     00 76 06 F6 | 	mov	arg01, #0
00878     00 78 06 F6 | 	mov	arg02, #0
0087c     00 7A 06 F6 | 	mov	arg03, #0
00880     78 1A B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00884                 | ' v030.start(mode,pin)
00884                 | ' v030.setbordercolor(0,0,0)
00884                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00884     07 77 02 F6 | 	mov	arg01, objptr
00888     0F 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
0088c     18 5C B0 FD | 	call	#__system___make_methodptr
00890     00 34 06 F6 | 	mov	result3, #0
00894     00 32 06 F6 | 	mov	result2, #0
00898     18 79 02 F6 | 	mov	arg02, result1
0089c     00 7A 06 F6 | 	mov	arg03, #0
008a0     00 7C 06 F6 | 	mov	arg04, #0
008a4     00 76 06 F6 | 	mov	arg01, #0
008a8     40 62 B0 FD | 	call	#__system___basic_open
008ac     00 30 06 F6 | 	mov	result1, #0
008b0                 | _startvideo_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' function addr(byref v as any)
008b4                 | _addr
008b4     00 5A 05 F6 | 	mov	COUNT_, #0
008b8     B0 00 A0 FD | 	call	#pushregs_
008bc     08 F0 07 F1 | 	add	ptra, #8
008c0     04 5E 05 F1 | 	add	fp, #4
008c4     AF 76 62 FC | 	wrlong	arg01, fp
008c8                 | ' 
008c8                 | ' return(cast(ulong,@v))
008c8     3B 31 02 F6 | 	mov	result1, arg01
008cc     04 5E 85 F1 | 	sub	fp, #4
008d0     AF F0 03 F6 | 	mov	ptra, fp
008d4     BF 00 A0 FD | 	call	#popregs_
008d8                 | _addr_ret
008d8     2D 00 64 FD | 	ret
008dc                 | 
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | _test
008dc     01 5A 05 F6 | 	mov	COUNT_, #1
008e0     B0 00 A0 FD | 	call	#pushregs_
008e4     1D 78 06 F6 | 	mov	arg02, #29
008e8                 | ' 
008e8                 | ' ''---------- Set the (x,y) position of cursor
008e8                 | ' 
008e8                 | ' cursor_x:=x
008e8     34 0E 06 F1 | 	add	objptr, #52
008ec     07 0B 48 FC | 	wrbyte	#5, objptr
008f0                 | ' cursor_y:=y
008f0     01 0E 06 F1 | 	add	objptr, #1
008f4     07 3B 48 FC | 	wrbyte	#29, objptr
008f8     02 00 00 FF 
008fc     D6 0F 06 F1 | 	add	objptr, ##1494
00900     07 85 C2 FA | 	rdbyte	local01, objptr
00904     02 84 66 F0 | 	shl	local01, #2
00908     01 00 00 FF 
0090c     65 0E 06 F1 | 	add	objptr, ##613
00910     07 85 02 F1 | 	add	local01, objptr
00914     42 77 02 FB | 	rdlong	arg01, local01
00918     04 00 00 FF 
0091c     70 0E 86 F1 | 	sub	objptr, ##2160
00920     9C 1D B0 FD | 	call	#_hng030rm_spin2_write
00924     04 00 00 FF 
00928     FC 0E 06 F1 | 	add	objptr, ##2300
0092c     07 77 02 FB | 	rdlong	arg01, objptr
00930     04 00 00 FF 
00934     FC 0E 86 F1 | 	sub	objptr, ##2300
00938     84 1D B0 FD | 	call	#_hng030rm_spin2_write
0093c                 | ' 
0093c                 | ' ''---------- Set the (x,y) position of cursor
0093c                 | ' 
0093c                 | ' cursor_x:=x
0093c     34 0E 06 F1 | 	add	objptr, #52
00940     07 03 48 FC | 	wrbyte	#1, objptr
00944                 | ' cursor_y:=y
00944     01 0E 06 F1 | 	add	objptr, #1
00948     07 3B 48 FC | 	wrbyte	#29, objptr
0094c     02 00 00 FF 
00950     FE 0F 06 F1 | 	add	objptr, ##1534
00954     07 77 02 FB | 	rdlong	arg01, objptr
00958     10 0E 06 F1 | 	add	objptr, #16
0095c     07 85 02 FB | 	rdlong	local01, objptr
00960     03 00 00 FF 
00964     43 0E 86 F1 | 	sub	objptr, ##1603
00968     42 77 02 F1 | 	add	arg01, local01
0096c     03 78 06 F6 | 	mov	arg02, #3
00970     74 20 B0 FD | 	call	#_hng030rm_spin2_inttostr2
00974     18 77 02 F6 | 	mov	arg01, result1
00978     44 1D B0 FD | 	call	#_hng030rm_spin2_write
0097c     1D 78 06 F6 | 	mov	arg02, #29
00980                 | ' 
00980                 | ' ''---------- Set the (x,y) position of cursor
00980                 | ' 
00980                 | ' cursor_x:=x
00980     34 0E 06 F1 | 	add	objptr, #52
00984     07 41 48 FC | 	wrbyte	#32, objptr
00988                 | ' cursor_y:=y
00988     01 0E 06 F1 | 	add	objptr, #1
0098c     07 3B 48 FC | 	wrbyte	#29, objptr
00990     02 00 00 FF 
00994     D7 0F 06 F1 | 	add	objptr, ##1495
00998     07 85 C2 FA | 	rdbyte	local01, objptr
0099c     02 84 66 F0 | 	shl	local01, #2
009a0     01 00 00 FF 
009a4     64 0E 06 F1 | 	add	objptr, ##612
009a8     07 85 02 F1 | 	add	local01, objptr
009ac     42 77 02 FB | 	rdlong	arg01, local01
009b0     04 00 00 FF 
009b4     70 0E 86 F1 | 	sub	objptr, ##2160
009b8     04 1D B0 FD | 	call	#_hng030rm_spin2_write
009bc     04 00 00 FF 
009c0     FC 0E 06 F1 | 	add	objptr, ##2300
009c4     07 77 02 FB | 	rdlong	arg01, objptr
009c8     04 00 00 FF 
009cc     FC 0E 86 F1 | 	sub	objptr, ##2300
009d0     EC 1C B0 FD | 	call	#_hng030rm_spin2_write
009d4                 | ' 
009d4                 | ' ''---------- Set the (x,y) position of cursor
009d4                 | ' 
009d4                 | ' cursor_x:=x
009d4     34 0E 06 F1 | 	add	objptr, #52
009d8     07 39 48 FC | 	wrbyte	#28, objptr
009dc                 | ' cursor_y:=y
009dc     01 0E 06 F1 | 	add	objptr, #1
009e0     07 3B 48 FC | 	wrbyte	#29, objptr
009e4     03 00 00 FF 
009e8     02 0E 06 F1 | 	add	objptr, ##1538
009ec     07 77 02 FB | 	rdlong	arg01, objptr
009f0     10 0E 06 F1 | 	add	objptr, #16
009f4     07 85 02 FB | 	rdlong	local01, objptr
009f8     03 00 00 FF 
009fc     47 0E 86 F1 | 	sub	objptr, ##1607
00a00     42 77 02 F1 | 	add	arg01, local01
00a04     03 78 06 F6 | 	mov	arg02, #3
00a08     DC 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a0c     18 77 02 F6 | 	mov	arg01, result1
00a10     AC 1C B0 FD | 	call	#_hng030rm_spin2_write
00a14     1D 78 06 F6 | 	mov	arg02, #29
00a18                 | ' 
00a18                 | ' ''---------- Set the (x,y) position of cursor
00a18                 | ' 
00a18                 | ' cursor_x:=x
00a18     34 0E 06 F1 | 	add	objptr, #52
00a1c     07 79 48 FC | 	wrbyte	#60, objptr
00a20                 | ' cursor_y:=y
00a20     01 0E 06 F1 | 	add	objptr, #1
00a24     07 3B 48 FC | 	wrbyte	#29, objptr
00a28     02 00 00 FF 
00a2c     D8 0F 06 F1 | 	add	objptr, ##1496
00a30     07 85 C2 FA | 	rdbyte	local01, objptr
00a34     02 84 66 F0 | 	shl	local01, #2
00a38     01 00 00 FF 
00a3c     63 0E 06 F1 | 	add	objptr, ##611
00a40     07 85 02 F1 | 	add	local01, objptr
00a44     42 77 02 FB | 	rdlong	arg01, local01
00a48     04 00 00 FF 
00a4c     70 0E 86 F1 | 	sub	objptr, ##2160
00a50     6C 1C B0 FD | 	call	#_hng030rm_spin2_write
00a54     04 00 00 FF 
00a58     FC 0E 06 F1 | 	add	objptr, ##2300
00a5c     07 77 02 FB | 	rdlong	arg01, objptr
00a60     04 00 00 FF 
00a64     FC 0E 86 F1 | 	sub	objptr, ##2300
00a68     54 1C B0 FD | 	call	#_hng030rm_spin2_write
00a6c                 | ' 
00a6c                 | ' ''---------- Set the (x,y) position of cursor
00a6c                 | ' 
00a6c                 | ' cursor_x:=x
00a6c     34 0E 06 F1 | 	add	objptr, #52
00a70     07 71 48 FC | 	wrbyte	#56, objptr
00a74                 | ' cursor_y:=y
00a74     01 0E 06 F1 | 	add	objptr, #1
00a78     07 3B 48 FC | 	wrbyte	#29, objptr
00a7c     03 00 00 FF 
00a80     06 0E 06 F1 | 	add	objptr, ##1542
00a84     07 77 02 FB | 	rdlong	arg01, objptr
00a88     10 0E 06 F1 | 	add	objptr, #16
00a8c     07 85 02 FB | 	rdlong	local01, objptr
00a90     03 00 00 FF 
00a94     4B 0E 86 F1 | 	sub	objptr, ##1611
00a98     42 77 02 F1 | 	add	arg01, local01
00a9c     03 78 06 F6 | 	mov	arg02, #3
00aa0     44 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00aa4     18 77 02 F6 | 	mov	arg01, result1
00aa8     14 1C B0 FD | 	call	#_hng030rm_spin2_write
00aac                 | ' 
00aac                 | ' ''---------- Set the (x,y) position of cursor
00aac                 | ' 
00aac                 | ' cursor_x:=x
00aac     34 0E 06 F1 | 	add	objptr, #52
00ab0     07 A9 48 FC | 	wrbyte	#84, objptr
00ab4                 | ' cursor_y:=y
00ab4     01 0E 06 F1 | 	add	objptr, #1
00ab8     07 3B 48 FC | 	wrbyte	#29, objptr
00abc     03 00 00 FF 
00ac0     0A 0E 06 F1 | 	add	objptr, ##1546
00ac4     07 77 02 FB | 	rdlong	arg01, objptr
00ac8     10 0E 06 F1 | 	add	objptr, #16
00acc     07 85 02 FB | 	rdlong	local01, objptr
00ad0     03 00 00 FF 
00ad4     4F 0E 86 F1 | 	sub	objptr, ##1615
00ad8     42 77 02 F1 | 	add	arg01, local01
00adc     03 78 06 F6 | 	mov	arg02, #3
00ae0     04 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00ae4     18 77 02 F6 | 	mov	arg01, result1
00ae8     D4 1B B0 FD | 	call	#_hng030rm_spin2_write
00aec     1D 78 06 F6 | 	mov	arg02, #29
00af0                 | ' 
00af0                 | ' ''---------- Set the (x,y) position of cursor
00af0                 | ' 
00af0                 | ' cursor_x:=x
00af0     34 0E 06 F1 | 	add	objptr, #52
00af4     07 B1 48 FC | 	wrbyte	#88, objptr
00af8                 | ' cursor_y:=y
00af8     01 0E 06 F1 | 	add	objptr, #1
00afc     07 3B 48 FC | 	wrbyte	#29, objptr
00b00     02 00 00 FF 
00b04     D9 0F 06 F1 | 	add	objptr, ##1497
00b08     07 85 C2 FA | 	rdbyte	local01, objptr
00b0c     02 84 66 F0 | 	shl	local01, #2
00b10     01 00 00 FF 
00b14     62 0E 06 F1 | 	add	objptr, ##610
00b18     07 85 02 F1 | 	add	local01, objptr
00b1c     42 77 02 FB | 	rdlong	arg01, local01
00b20     04 00 00 FF 
00b24     70 0E 86 F1 | 	sub	objptr, ##2160
00b28     94 1B B0 FD | 	call	#_hng030rm_spin2_write
00b2c     04 00 00 FF 
00b30     FC 0E 06 F1 | 	add	objptr, ##2300
00b34     07 77 02 FB | 	rdlong	arg01, objptr
00b38     04 00 00 FF 
00b3c     FC 0E 86 F1 | 	sub	objptr, ##2300
00b40     7C 1B B0 FD | 	call	#_hng030rm_spin2_write
00b44     AF F0 03 F6 | 	mov	ptra, fp
00b48     BF 00 A0 FD | 	call	#popregs_
00b4c                 | _test_ret
00b4c     2D 00 64 FD | 	ret
00b50                 | 
00b50                 | '     return (char *) &tempname1;
00b50                 | '     return (char *) &tempname1;
00b50                 | '     return (char *) &tempname1;
00b50                 | _getinfo
00b50     0F 5A 05 F6 | 	mov	COUNT_, #15
00b54     B0 00 A0 FD | 	call	#pushregs_
00b58     3B 85 02 F6 | 	mov	local01, arg01
00b5c     3C 87 02 F6 | 	mov	local02, arg02
00b60     04 78 06 F6 | 	mov	arg02, #4
00b64                 | ' 
00b64                 | ' ''---------- Set the (x,y) position of cursor
00b64                 | ' 
00b64                 | ' cursor_x:=x
00b64     34 0E 06 F1 | 	add	objptr, #52
00b68     07 03 48 FC | 	wrbyte	#1, objptr
00b6c                 | ' cursor_y:=y
00b6c     01 0E 06 F1 | 	add	objptr, #1
00b70     07 09 48 FC | 	wrbyte	#4, objptr
00b74     35 0E 86 F1 | 	sub	objptr, #53
00b78                 | '     return (char *) &tempname1;
00b78                 | '     return (char *) &tempname1;
00b78     00 76 06 F6 | 	mov	arg01, #0
00b7c     5C 78 B0 FD | 	call	#__system___getiolock_0223
00b80     18 77 02 F6 | 	mov	arg01, result1
00b84     60 59 B0 FD | 	call	#__system___lockmem
00b88     00 30 06 F6 | 	mov	result1, #0
00b8c     7A 00 00 FF 
00b90     5D 78 06 F6 | 	mov	arg02, ##@LR__0942
00b94     00 76 06 F6 | 	mov	arg01, #0
00b98     00 7A 06 F6 | 	mov	arg03, #0
00b9c     4C 60 B0 FD | 	call	#__system___basic_print_string
00ba0     00 76 06 F6 | 	mov	arg01, #0
00ba4     0A 78 06 F6 | 	mov	arg02, #10
00ba8     00 7A 06 F6 | 	mov	arg03, #0
00bac     F0 5F B0 FD | 	call	#__system___basic_print_char
00bb0     01 30 06 F6 | 	mov	result1, #1
00bb4     00 76 06 F6 | 	mov	arg01, #0
00bb8     20 78 B0 FD | 	call	#__system___getiolock_0223
00bbc     18 01 68 FC | 	wrlong	#0, result1
00bc0     00 30 06 F6 | 	mov	result1, #0
00bc4                 | '     return (char *) &tempname1;
00bc4                 | '     return (char *) &tempname1;
00bc4     00 88 06 F6 | 	mov	local03, #0
00bc8                 | LR__0001
00bc8     44 8B 02 F6 | 	mov	local04, local03
00bcc     02 8A 66 F0 | 	shl	local04, #2
00bd0     04 00 00 FF 
00bd4     70 0E 06 F1 | 	add	objptr, ##2160
00bd8     07 8B 02 F1 | 	add	local04, objptr
00bdc     7A 00 00 FF 
00be0     C6 8C 06 F6 | 	mov	local05, ##@LR__0943
00be4     44 77 02 F6 | 	mov	arg01, local03
00be8     02 78 06 F6 | 	mov	arg02, #2
00bec     04 00 00 FF 
00bf0     70 0E 86 F1 | 	sub	objptr, ##2160
00bf4     0A 7A 06 F6 | 	mov	arg03, #10
00bf8     00 65 B0 FD | 	call	#__system__Number_S
00bfc     18 79 02 F6 | 	mov	arg02, result1
00c00     46 77 02 F6 | 	mov	arg01, local05
00c04     18 59 B0 FD | 	call	#__system___string_concat
00c08     18 8F 02 F6 | 	mov	local06, result1
00c0c     13 76 06 F6 | 	mov	arg01, #19
00c10     79 00 00 FF 
00c14     DE 79 06 F6 | 	mov	arg02, ##@LR__0930
00c18     AC 65 B0 FD | 	call	#__system__String_S
00c1c     18 79 02 F6 | 	mov	arg02, result1
00c20     47 77 02 F6 | 	mov	arg01, local06
00c24     F8 58 B0 FD | 	call	#__system___string_concat
00c28     45 31 62 FC | 	wrlong	result1, local04
00c2c     01 88 06 F1 | 	add	local03, #1
00c30     20 88 5E F2 | 	cmps	local03, #32 wcz
00c34     90 FF 9F CD |  if_b	jmp	#LR__0001
00c38                 | '     return (char *) &tempname1;
00c38     01 88 06 F6 | 	mov	local03, #1
00c3c     01 86 06 F1 | 	add	local02, #1
00c40                 | LR__0002
00c40     43 89 5A F2 | 	cmps	local03, local02 wcz
00c44     54 08 90 3D |  if_ae	jmp	#LR__0007
00c48                 | '     return (char *) &tempname1;
00c48     00 90 06 F6 | 	mov	local07, #0
00c4c                 | LR__0003
00c4c     44 77 02 F6 | 	mov	arg01, local03
00c50     02 76 66 F0 | 	shl	arg01, #2
00c54     04 00 00 FF 
00c58     70 0E 06 F1 | 	add	objptr, ##2160
00c5c     07 77 02 F1 | 	add	arg01, objptr
00c60     04 00 00 FF 
00c64     70 0E 86 F1 | 	sub	objptr, ##2160
00c68     48 FC BF FD | 	call	#_addr
00c6c                 | ' asm
00c6c     18 93 02 FB | 	rdlong	local08, result1
00c70                 | ' return r
00c70     08 00 00 FF 
00c74     94 0F 06 F1 | 	add	objptr, ##4500
00c78     07 93 62 FC | 	wrlong	local08, objptr
00c7c     42 77 02 F6 | 	mov	arg01, local01
00c80     14 76 06 F1 | 	add	arg01, #20
00c84     44 95 02 F6 | 	mov	local09, local03
00c88     01 94 86 F1 | 	sub	local09, #1
00c8c     4A 97 02 F6 | 	mov	local10, local09
00c90     04 96 66 F0 | 	shl	local10, #4
00c94     4A 97 82 F1 | 	sub	local10, local09
00c98     01 96 66 F0 | 	shl	local10, #1
00c9c     4B 77 02 F1 | 	add	arg01, local10
00ca0     48 77 02 F1 | 	add	arg01, local07
00ca4                 | ' asm
00ca4     3B 31 C2 FA | 	rdbyte	result1, arg01
00ca8                 | ' return r
00ca8     18 99 02 F6 | 	mov	local11, result1
00cac     07 98 46 F7 | 	zerox	local11, #7
00cb0     04 0E 06 F1 | 	add	objptr, #4
00cb4     07 99 62 FC | 	wrlong	local11, objptr
00cb8                 | '     return (char *) &tempname1;
00cb8                 | '     return (char *) &tempname1;
00cb8                 | '     return (char *) &tempname1;
00cb8     08 00 00 FF 
00cbc     98 0F 86 F1 | 	sub	objptr, ##4504
00cc0     20 98 5E F2 | 	cmps	local11, #32 wcz
00cc4     24 00 90 CD |  if_b	jmp	#LR__0004
00cc8     08 00 00 FF 
00ccc     94 0F 06 F1 | 	add	objptr, ##4500
00cd0     07 77 02 FB | 	rdlong	arg01, objptr
00cd4     48 77 02 F1 | 	add	arg01, local07
00cd8     04 0E 06 F1 | 	add	objptr, #4
00cdc     07 79 02 FB | 	rdlong	arg02, objptr
00ce0     08 00 00 FF 
00ce4     98 0F 86 F1 | 	sub	objptr, ##4504
00ce8                 | ' asm
00ce8     3B 79 42 FC | 	wrbyte	arg02, arg01
00cec                 | LR__0004
00cec     01 90 06 F1 | 	add	local07, #1
00cf0     16 90 5E F2 | 	cmps	local07, #22 wcz
00cf4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cf8     42 77 02 F6 | 	mov	arg01, local01
00cfc     14 76 06 F1 | 	add	arg01, #20
00d00     44 97 02 F6 | 	mov	local10, local03
00d04     01 96 86 F1 | 	sub	local10, #1
00d08     4B 8D 02 F6 | 	mov	local05, local10
00d0c     04 8C 66 F0 | 	shl	local05, #4
00d10     4B 8D 82 F1 | 	sub	local05, local10
00d14     01 8C 66 F0 | 	shl	local05, #1
00d18     46 77 02 F1 | 	add	arg01, local05
00d1c     16 76 06 F1 | 	add	arg01, #22
00d20                 | ' asm
00d20     3B 9B C2 FA | 	rdbyte	local12, arg01
00d24                 | ' return r
00d24     07 9A 46 F7 | 	zerox	local12, #7
00d28     08 9A 66 F0 | 	shl	local12, #8
00d2c     42 77 02 F6 | 	mov	arg01, local01
00d30     14 76 06 F1 | 	add	arg01, #20
00d34     44 9D 02 F6 | 	mov	local13, local03
00d38     01 9C 86 F1 | 	sub	local13, #1
00d3c     4E 9F 02 F6 | 	mov	local14, local13
00d40     04 9E 66 F0 | 	shl	local14, #4
00d44     4E 9F 82 F1 | 	sub	local14, local13
00d48     01 9E 66 F0 | 	shl	local14, #1
00d4c     4F 77 02 F1 | 	add	arg01, local14
00d50     17 76 06 F1 | 	add	arg01, #23
00d54                 | ' asm
00d54     3B 8F C2 FA | 	rdbyte	local06, arg01
00d58                 | ' return r
00d58     07 8E 46 F7 | 	zerox	local06, #7
00d5c     47 9B 02 F1 | 	add	local12, local06
00d60     01 9A 66 F0 | 	shl	local12, #1
00d64     08 00 00 FF 
00d68     9C 0F 06 F1 | 	add	objptr, ##4508
00d6c     07 9B 62 FC | 	wrlong	local12, objptr
00d70     42 77 02 F6 | 	mov	arg01, local01
00d74     14 76 06 F1 | 	add	arg01, #20
00d78     44 97 02 F6 | 	mov	local10, local03
00d7c     01 96 86 F1 | 	sub	local10, #1
00d80     4B 8D 02 F6 | 	mov	local05, local10
00d84     04 8C 66 F0 | 	shl	local05, #4
00d88     4B 8D 82 F1 | 	sub	local05, local10
00d8c     01 8C 66 F0 | 	shl	local05, #1
00d90     46 77 02 F1 | 	add	arg01, local05
00d94     1A 76 06 F1 | 	add	arg01, #26
00d98                 | ' asm
00d98     3B 9B C2 FA | 	rdbyte	local12, arg01
00d9c                 | ' return r
00d9c     07 9A 46 F7 | 	zerox	local12, #7
00da0     08 9A 66 F0 | 	shl	local12, #8
00da4     42 77 02 F6 | 	mov	arg01, local01
00da8     14 76 06 F1 | 	add	arg01, #20
00dac     44 9D 02 F6 | 	mov	local13, local03
00db0     01 9C 86 F1 | 	sub	local13, #1
00db4     4E 9F 02 F6 | 	mov	local14, local13
00db8     04 9E 66 F0 | 	shl	local14, #4
00dbc     4E 9F 82 F1 | 	sub	local14, local13
00dc0     01 9E 66 F0 | 	shl	local14, #1
00dc4     4F 77 02 F1 | 	add	arg01, local14
00dc8     1B 76 06 F1 | 	add	arg01, #27
00dcc                 | ' asm
00dcc     3B 8F C2 FA | 	rdbyte	local06, arg01
00dd0                 | ' return r
00dd0     07 8E 46 F7 | 	zerox	local06, #7
00dd4     47 9B 02 F1 | 	add	local12, local06
00dd8     01 9A 66 F0 | 	shl	local12, #1
00ddc     04 0E 06 F1 | 	add	objptr, #4
00de0     07 9B 62 FC | 	wrlong	local12, objptr
00de4     42 77 02 F6 | 	mov	arg01, local01
00de8     14 76 06 F1 | 	add	arg01, #20
00dec     44 97 02 F6 | 	mov	local10, local03
00df0     01 96 86 F1 | 	sub	local10, #1
00df4     4B 8D 02 F6 | 	mov	local05, local10
00df8     04 8C 66 F0 | 	shl	local05, #4
00dfc     4B 8D 82 F1 | 	sub	local05, local10
00e00     01 8C 66 F0 | 	shl	local05, #1
00e04     46 77 02 F1 | 	add	arg01, local05
00e08     1C 76 06 F1 | 	add	arg01, #28
00e0c                 | ' asm
00e0c     3B 9B C2 FA | 	rdbyte	local12, arg01
00e10                 | ' return r
00e10     07 9A 46 F7 | 	zerox	local12, #7
00e14     08 9A 66 F0 | 	shl	local12, #8
00e18     42 77 02 F6 | 	mov	arg01, local01
00e1c     14 76 06 F1 | 	add	arg01, #20
00e20     44 9D 02 F6 | 	mov	local13, local03
00e24     01 9C 86 F1 | 	sub	local13, #1
00e28     4E 9F 02 F6 | 	mov	local14, local13
00e2c     04 9E 66 F0 | 	shl	local14, #4
00e30     4E 9F 82 F1 | 	sub	local14, local13
00e34     01 9E 66 F0 | 	shl	local14, #1
00e38     4F 77 02 F1 | 	add	arg01, local14
00e3c     1D 76 06 F1 | 	add	arg01, #29
00e40                 | ' asm
00e40     3B 8F C2 FA | 	rdbyte	local06, arg01
00e44                 | ' return r
00e44     07 8E 46 F7 | 	zerox	local06, #7
00e48     47 9B 02 F1 | 	add	local12, local06
00e4c     01 9A 66 F0 | 	shl	local12, #1
00e50     04 0E 06 F1 | 	add	objptr, #4
00e54     07 9B 62 FC | 	wrlong	local12, objptr
00e58     42 77 02 F6 | 	mov	arg01, local01
00e5c     14 76 06 F1 | 	add	arg01, #20
00e60     44 95 02 F6 | 	mov	local09, local03
00e64     01 94 86 F1 | 	sub	local09, #1
00e68     4A 97 02 F6 | 	mov	local10, local09
00e6c     04 96 66 F0 | 	shl	local10, #4
00e70     4A 97 82 F1 | 	sub	local10, local09
00e74     01 96 66 F0 | 	shl	local10, #1
00e78     4B 77 02 F1 | 	add	arg01, local10
00e7c     18 76 06 F1 | 	add	arg01, #24
00e80                 | ' asm
00e80     3B 99 C2 FA | 	rdbyte	local11, arg01
00e84                 | ' return r
00e84     07 98 46 F7 | 	zerox	local11, #7
00e88     04 0E 06 F1 | 	add	objptr, #4
00e8c     07 99 62 FC | 	wrlong	local11, objptr
00e90     42 77 02 F6 | 	mov	arg01, local01
00e94     14 76 06 F1 | 	add	arg01, #20
00e98     44 95 02 F6 | 	mov	local09, local03
00e9c     01 94 86 F1 | 	sub	local09, #1
00ea0     4A 97 02 F6 | 	mov	local10, local09
00ea4     04 96 66 F0 | 	shl	local10, #4
00ea8     4A 97 82 F1 | 	sub	local10, local09
00eac     01 96 66 F0 | 	shl	local10, #1
00eb0     4B 77 02 F1 | 	add	arg01, local10
00eb4     19 76 06 F1 | 	add	arg01, #25
00eb8                 | ' asm
00eb8     3B 31 C2 FA | 	rdbyte	result1, arg01
00ebc                 | ' return r
00ebc     18 99 02 F6 | 	mov	local11, result1
00ec0     07 98 46 F7 | 	zerox	local11, #7
00ec4     04 0E 06 F1 | 	add	objptr, #4
00ec8     07 99 62 FC | 	wrlong	local11, objptr
00ecc     08 00 00 FF 
00ed0     AC 0F 86 F1 | 	sub	objptr, ##4524
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4     10 88 5E F2 | 	cmps	local03, #16 wcz
00ed8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00edc     05 78 06 F6 | 	mov	arg02, #5
00ee0     44 79 02 F1 | 	add	arg02, local03
00ee4                 | ' 
00ee4                 | ' ''---------- Set the (x,y) position of cursor
00ee4                 | ' 
00ee4                 | ' cursor_x:=x
00ee4     34 0E 06 F1 | 	add	objptr, #52
00ee8     07 03 48 FC | 	wrbyte	#1, objptr
00eec                 | ' cursor_y:=y
00eec     01 0E 06 F1 | 	add	objptr, #1
00ef0     07 79 42 FC | 	wrbyte	arg02, objptr
00ef4     35 0E 86 F1 | 	sub	objptr, #53
00ef8     00 76 06 F6 | 	mov	arg01, #0
00efc     DC 74 B0 FD | 	call	#__system___getiolock_0223
00f00     18 77 02 F6 | 	mov	arg01, result1
00f04     E0 55 B0 FD | 	call	#__system___lockmem
00f08     00 30 06 F6 | 	mov	result1, #0
00f0c     44 A1 02 F6 | 	mov	local15, local03
00f10     02 A0 66 F0 | 	shl	local15, #2
00f14     04 00 00 FF 
00f18     70 0E 06 F1 | 	add	objptr, ##2160
00f1c     07 A1 02 F1 | 	add	local15, objptr
00f20     50 79 02 FB | 	rdlong	arg02, local15
00f24     00 76 06 F6 | 	mov	arg01, #0
00f28     00 7A 06 F6 | 	mov	arg03, #0
00f2c     04 00 00 FF 
00f30     70 0E 86 F1 | 	sub	objptr, ##2160
00f34     B4 5C B0 FD | 	call	#__system___basic_print_string
00f38     00 76 06 F6 | 	mov	arg01, #0
00f3c     0A 78 06 F6 | 	mov	arg02, #10
00f40     00 7A 06 F6 | 	mov	arg03, #0
00f44     58 5C B0 FD | 	call	#__system___basic_print_char
00f48     01 30 06 F6 | 	mov	result1, #1
00f4c     00 76 06 F6 | 	mov	arg01, #0
00f50     88 74 B0 FD | 	call	#__system___getiolock_0223
00f54     18 01 68 FC | 	wrlong	#0, result1
00f58     00 30 06 F6 | 	mov	result1, #0
00f5c     05 78 06 F6 | 	mov	arg02, #5
00f60     44 79 02 F1 | 	add	arg02, local03
00f64                 | ' 
00f64                 | ' ''---------- Set the (x,y) position of cursor
00f64                 | ' 
00f64                 | ' cursor_x:=x
00f64     34 0E 06 F1 | 	add	objptr, #52
00f68     07 31 48 FC | 	wrbyte	#24, objptr
00f6c                 | ' cursor_y:=y
00f6c     01 0E 06 F1 | 	add	objptr, #1
00f70     07 79 42 FC | 	wrbyte	arg02, objptr
00f74     35 0E 86 F1 | 	sub	objptr, #53
00f78     00 76 06 F6 | 	mov	arg01, #0
00f7c     5C 74 B0 FD | 	call	#__system___getiolock_0223
00f80     18 77 02 F6 | 	mov	arg01, result1
00f84     60 55 B0 FD | 	call	#__system___lockmem
00f88     00 30 06 F6 | 	mov	result1, #0
00f8c     08 00 00 FF 
00f90     9C 0F 06 F1 | 	add	objptr, ##4508
00f94     07 79 02 FB | 	rdlong	arg02, objptr
00f98     08 00 00 FF 
00f9c     9C 0F 86 F1 | 	sub	objptr, ##4508
00fa0     00 76 06 F6 | 	mov	arg01, #0
00fa4     00 7A 06 F6 | 	mov	arg03, #0
00fa8     0A 7C 06 F6 | 	mov	arg04, #10
00fac     84 5C B0 FD | 	call	#__system___basic_print_integer
00fb0     00 76 06 F6 | 	mov	arg01, #0
00fb4     0A 78 06 F6 | 	mov	arg02, #10
00fb8     00 7A 06 F6 | 	mov	arg03, #0
00fbc     E0 5B B0 FD | 	call	#__system___basic_print_char
00fc0     01 30 06 F6 | 	mov	result1, #1
00fc4     00 76 06 F6 | 	mov	arg01, #0
00fc8     10 74 B0 FD | 	call	#__system___getiolock_0223
00fcc     18 01 68 FC | 	wrlong	#0, result1
00fd0     00 30 06 F6 | 	mov	result1, #0
00fd4     05 78 06 F6 | 	mov	arg02, #5
00fd8     44 79 02 F1 | 	add	arg02, local03
00fdc                 | ' 
00fdc                 | ' ''---------- Set the (x,y) position of cursor
00fdc                 | ' 
00fdc                 | ' cursor_x:=x
00fdc     34 0E 06 F1 | 	add	objptr, #52
00fe0     07 3F 48 FC | 	wrbyte	#31, objptr
00fe4                 | ' cursor_y:=y
00fe4     01 0E 06 F1 | 	add	objptr, #1
00fe8     07 79 42 FC | 	wrbyte	arg02, objptr
00fec     35 0E 86 F1 | 	sub	objptr, #53
00ff0     00 76 06 F6 | 	mov	arg01, #0
00ff4     E4 73 B0 FD | 	call	#__system___getiolock_0223
00ff8     18 77 02 F6 | 	mov	arg01, result1
00ffc     E8 54 B0 FD | 	call	#__system___lockmem
01000     00 30 06 F6 | 	mov	result1, #0
01004     08 00 00 FF 
01008     A8 0F 06 F1 | 	add	objptr, ##4520
0100c     07 79 02 FB | 	rdlong	arg02, objptr
01010     08 00 00 FF 
01014     A8 0F 86 F1 | 	sub	objptr, ##4520
01018     00 76 06 F6 | 	mov	arg01, #0
0101c     00 7A 06 F6 | 	mov	arg03, #0
01020     0A 7C 06 F6 | 	mov	arg04, #10
01024     0C 5C B0 FD | 	call	#__system___basic_print_integer
01028     00 76 06 F6 | 	mov	arg01, #0
0102c     0A 78 06 F6 | 	mov	arg02, #10
01030     00 7A 06 F6 | 	mov	arg03, #0
01034     68 5B B0 FD | 	call	#__system___basic_print_char
01038     01 30 06 F6 | 	mov	result1, #1
0103c     00 76 06 F6 | 	mov	arg01, #0
01040     98 73 B0 FD | 	call	#__system___getiolock_0223
01044     18 01 68 FC | 	wrlong	#0, result1
01048     00 30 06 F6 | 	mov	result1, #0
0104c     05 78 06 F6 | 	mov	arg02, #5
01050     44 79 02 F1 | 	add	arg02, local03
01054                 | ' 
01054                 | ' ''---------- Set the (x,y) position of cursor
01054                 | ' 
01054                 | ' cursor_x:=x
01054     34 0E 06 F1 | 	add	objptr, #52
01058     07 45 48 FC | 	wrbyte	#34, objptr
0105c                 | ' cursor_y:=y
0105c     01 0E 06 F1 | 	add	objptr, #1
01060     07 79 42 FC | 	wrbyte	arg02, objptr
01064     35 0E 86 F1 | 	sub	objptr, #53
01068     00 76 06 F6 | 	mov	arg01, #0
0106c     6C 73 B0 FD | 	call	#__system___getiolock_0223
01070     18 77 02 F6 | 	mov	arg01, result1
01074     70 54 B0 FD | 	call	#__system___lockmem
01078     00 30 06 F6 | 	mov	result1, #0
0107c     08 00 00 FF 
01080     AC 0F 06 F1 | 	add	objptr, ##4524
01084     07 79 02 FB | 	rdlong	arg02, objptr
01088     08 00 00 FF 
0108c     AC 0F 86 F1 | 	sub	objptr, ##4524
01090     00 76 06 F6 | 	mov	arg01, #0
01094     00 7A 06 F6 | 	mov	arg03, #0
01098     0A 7C 06 F6 | 	mov	arg04, #10
0109c     94 5B B0 FD | 	call	#__system___basic_print_integer
010a0     00 76 06 F6 | 	mov	arg01, #0
010a4     0A 78 06 F6 | 	mov	arg02, #10
010a8     00 7A 06 F6 | 	mov	arg03, #0
010ac     F0 5A B0 FD | 	call	#__system___basic_print_char
010b0     01 30 06 F6 | 	mov	result1, #1
010b4     00 76 06 F6 | 	mov	arg01, #0
010b8     20 73 B0 FD | 	call	#__system___getiolock_0223
010bc     18 01 68 FC | 	wrlong	#0, result1
010c0     00 30 06 F6 | 	mov	result1, #0
010c4     05 78 06 F6 | 	mov	arg02, #5
010c8     44 79 02 F1 | 	add	arg02, local03
010cc                 | ' 
010cc                 | ' ''---------- Set the (x,y) position of cursor
010cc                 | ' 
010cc                 | ' cursor_x:=x
010cc     34 0E 06 F1 | 	add	objptr, #52
010d0     07 4B 48 FC | 	wrbyte	#37, objptr
010d4                 | ' cursor_y:=y
010d4     01 0E 06 F1 | 	add	objptr, #1
010d8     07 79 42 FC | 	wrbyte	arg02, objptr
010dc     35 0E 86 F1 | 	sub	objptr, #53
010e0     00 76 06 F6 | 	mov	arg01, #0
010e4     F4 72 B0 FD | 	call	#__system___getiolock_0223
010e8     18 77 02 F6 | 	mov	arg01, result1
010ec     F8 53 B0 FD | 	call	#__system___lockmem
010f0     00 30 06 F6 | 	mov	result1, #0
010f4     08 00 00 FF 
010f8     A0 0F 06 F1 | 	add	objptr, ##4512
010fc     07 79 02 FB | 	rdlong	arg02, objptr
01100     08 00 00 FF 
01104     A0 0F 86 F1 | 	sub	objptr, ##4512
01108     00 76 06 F6 | 	mov	arg01, #0
0110c     00 7A 06 F6 | 	mov	arg03, #0
01110     0A 7C 06 F6 | 	mov	arg04, #10
01114     1C 5B B0 FD | 	call	#__system___basic_print_integer
01118     00 76 06 F6 | 	mov	arg01, #0
0111c     0A 78 06 F6 | 	mov	arg02, #10
01120     00 7A 06 F6 | 	mov	arg03, #0
01124     78 5A B0 FD | 	call	#__system___basic_print_char
01128     01 30 06 F6 | 	mov	result1, #1
0112c     00 76 06 F6 | 	mov	arg01, #0
01130     A8 72 B0 FD | 	call	#__system___getiolock_0223
01134     18 01 68 FC | 	wrlong	#0, result1
01138     00 30 06 F6 | 	mov	result1, #0
0113c     05 78 06 F6 | 	mov	arg02, #5
01140     44 79 02 F1 | 	add	arg02, local03
01144                 | ' 
01144                 | ' ''---------- Set the (x,y) position of cursor
01144                 | ' 
01144                 | ' cursor_x:=x
01144     34 0E 06 F1 | 	add	objptr, #52
01148     07 57 48 FC | 	wrbyte	#43, objptr
0114c                 | ' cursor_y:=y
0114c     01 0E 06 F1 | 	add	objptr, #1
01150     07 79 42 FC | 	wrbyte	arg02, objptr
01154     35 0E 86 F1 | 	sub	objptr, #53
01158     00 76 06 F6 | 	mov	arg01, #0
0115c     7C 72 B0 FD | 	call	#__system___getiolock_0223
01160     18 77 02 F6 | 	mov	arg01, result1
01164     80 53 B0 FD | 	call	#__system___lockmem
01168     00 30 06 F6 | 	mov	result1, #0
0116c     08 00 00 FF 
01170     A4 0F 06 F1 | 	add	objptr, ##4516
01174     07 79 02 FB | 	rdlong	arg02, objptr
01178     08 00 00 FF 
0117c     A4 0F 86 F1 | 	sub	objptr, ##4516
01180     00 76 06 F6 | 	mov	arg01, #0
01184     00 7A 06 F6 | 	mov	arg03, #0
01188     0A 7C 06 F6 | 	mov	arg04, #10
0118c     A4 5A B0 FD | 	call	#__system___basic_print_integer
01190     00 76 06 F6 | 	mov	arg01, #0
01194     0A 78 06 F6 | 	mov	arg02, #10
01198     00 7A 06 F6 | 	mov	arg03, #0
0119c     00 5A B0 FD | 	call	#__system___basic_print_char
011a0     01 30 06 F6 | 	mov	result1, #1
011a4     00 76 06 F6 | 	mov	arg01, #0
011a8     30 72 B0 FD | 	call	#__system___getiolock_0223
011ac     18 01 68 FC | 	wrlong	#0, result1
011b0     00 30 06 F6 | 	mov	result1, #0
011b4                 | LR__0005
011b4                 | '     return (char *) &tempname1;
011b4     10 88 5E F2 | 	cmps	local03, #16 wcz
011b8     D8 02 90 CD |  if_b	jmp	#LR__0006
011bc     44 79 02 F6 | 	mov	arg02, local03
011c0     0B 78 86 F1 | 	sub	arg02, #11
011c4                 | ' 
011c4                 | ' ''---------- Set the (x,y) position of cursor
011c4                 | ' 
011c4                 | ' cursor_x:=x
011c4     34 0E 06 F1 | 	add	objptr, #52
011c8     07 73 48 FC | 	wrbyte	#57, objptr
011cc                 | ' cursor_y:=y
011cc     01 0E 06 F1 | 	add	objptr, #1
011d0     07 79 42 FC | 	wrbyte	arg02, objptr
011d4     35 0E 86 F1 | 	sub	objptr, #53
011d8     00 76 06 F6 | 	mov	arg01, #0
011dc     FC 71 B0 FD | 	call	#__system___getiolock_0223
011e0     18 77 02 F6 | 	mov	arg01, result1
011e4     00 53 B0 FD | 	call	#__system___lockmem
011e8     00 30 06 F6 | 	mov	result1, #0
011ec     44 A1 02 F6 | 	mov	local15, local03
011f0     02 A0 66 F0 | 	shl	local15, #2
011f4     04 00 00 FF 
011f8     70 0E 06 F1 | 	add	objptr, ##2160
011fc     07 A1 02 F1 | 	add	local15, objptr
01200     50 79 02 FB | 	rdlong	arg02, local15
01204     00 76 06 F6 | 	mov	arg01, #0
01208     00 7A 06 F6 | 	mov	arg03, #0
0120c     04 00 00 FF 
01210     70 0E 86 F1 | 	sub	objptr, ##2160
01214     D4 59 B0 FD | 	call	#__system___basic_print_string
01218     00 76 06 F6 | 	mov	arg01, #0
0121c     0A 78 06 F6 | 	mov	arg02, #10
01220     00 7A 06 F6 | 	mov	arg03, #0
01224     78 59 B0 FD | 	call	#__system___basic_print_char
01228     01 30 06 F6 | 	mov	result1, #1
0122c     00 76 06 F6 | 	mov	arg01, #0
01230     A8 71 B0 FD | 	call	#__system___getiolock_0223
01234     18 01 68 FC | 	wrlong	#0, result1
01238     00 30 06 F6 | 	mov	result1, #0
0123c     44 79 02 F6 | 	mov	arg02, local03
01240     0B 78 86 F1 | 	sub	arg02, #11
01244                 | ' 
01244                 | ' ''---------- Set the (x,y) position of cursor
01244                 | ' 
01244                 | ' cursor_x:=x
01244     34 0E 06 F1 | 	add	objptr, #52
01248     07 A1 48 FC | 	wrbyte	#80, objptr
0124c                 | ' cursor_y:=y
0124c     01 0E 06 F1 | 	add	objptr, #1
01250     07 79 42 FC | 	wrbyte	arg02, objptr
01254     35 0E 86 F1 | 	sub	objptr, #53
01258     00 76 06 F6 | 	mov	arg01, #0
0125c     7C 71 B0 FD | 	call	#__system___getiolock_0223
01260     18 77 02 F6 | 	mov	arg01, result1
01264     80 52 B0 FD | 	call	#__system___lockmem
01268     00 30 06 F6 | 	mov	result1, #0
0126c     08 00 00 FF 
01270     9C 0F 06 F1 | 	add	objptr, ##4508
01274     07 79 02 FB | 	rdlong	arg02, objptr
01278     08 00 00 FF 
0127c     9C 0F 86 F1 | 	sub	objptr, ##4508
01280     00 76 06 F6 | 	mov	arg01, #0
01284     00 7A 06 F6 | 	mov	arg03, #0
01288     0A 7C 06 F6 | 	mov	arg04, #10
0128c     A4 59 B0 FD | 	call	#__system___basic_print_integer
01290     00 76 06 F6 | 	mov	arg01, #0
01294     0A 78 06 F6 | 	mov	arg02, #10
01298     00 7A 06 F6 | 	mov	arg03, #0
0129c     00 59 B0 FD | 	call	#__system___basic_print_char
012a0     01 30 06 F6 | 	mov	result1, #1
012a4     00 76 06 F6 | 	mov	arg01, #0
012a8     30 71 B0 FD | 	call	#__system___getiolock_0223
012ac     18 01 68 FC | 	wrlong	#0, result1
012b0     00 30 06 F6 | 	mov	result1, #0
012b4     44 79 02 F6 | 	mov	arg02, local03
012b8     0B 78 86 F1 | 	sub	arg02, #11
012bc                 | ' 
012bc                 | ' ''---------- Set the (x,y) position of cursor
012bc                 | ' 
012bc                 | ' cursor_x:=x
012bc     34 0E 06 F1 | 	add	objptr, #52
012c0     07 AF 48 FC | 	wrbyte	#87, objptr
012c4                 | ' cursor_y:=y
012c4     01 0E 06 F1 | 	add	objptr, #1
012c8     07 79 42 FC | 	wrbyte	arg02, objptr
012cc     35 0E 86 F1 | 	sub	objptr, #53
012d0     00 76 06 F6 | 	mov	arg01, #0
012d4     04 71 B0 FD | 	call	#__system___getiolock_0223
012d8     18 77 02 F6 | 	mov	arg01, result1
012dc     08 52 B0 FD | 	call	#__system___lockmem
012e0     00 30 06 F6 | 	mov	result1, #0
012e4     08 00 00 FF 
012e8     A8 0F 06 F1 | 	add	objptr, ##4520
012ec     07 79 02 FB | 	rdlong	arg02, objptr
012f0     08 00 00 FF 
012f4     A8 0F 86 F1 | 	sub	objptr, ##4520
012f8     00 76 06 F6 | 	mov	arg01, #0
012fc     00 7A 06 F6 | 	mov	arg03, #0
01300     0A 7C 06 F6 | 	mov	arg04, #10
01304     2C 59 B0 FD | 	call	#__system___basic_print_integer
01308     00 76 06 F6 | 	mov	arg01, #0
0130c     0A 78 06 F6 | 	mov	arg02, #10
01310     00 7A 06 F6 | 	mov	arg03, #0
01314     88 58 B0 FD | 	call	#__system___basic_print_char
01318     01 30 06 F6 | 	mov	result1, #1
0131c     00 76 06 F6 | 	mov	arg01, #0
01320     B8 70 B0 FD | 	call	#__system___getiolock_0223
01324     18 01 68 FC | 	wrlong	#0, result1
01328     00 30 06 F6 | 	mov	result1, #0
0132c     44 79 02 F6 | 	mov	arg02, local03
01330     0B 78 86 F1 | 	sub	arg02, #11
01334                 | ' 
01334                 | ' ''---------- Set the (x,y) position of cursor
01334                 | ' 
01334                 | ' cursor_x:=x
01334     34 0E 06 F1 | 	add	objptr, #52
01338     07 B5 48 FC | 	wrbyte	#90, objptr
0133c                 | ' cursor_y:=y
0133c     01 0E 06 F1 | 	add	objptr, #1
01340     07 79 42 FC | 	wrbyte	arg02, objptr
01344     35 0E 86 F1 | 	sub	objptr, #53
01348     00 76 06 F6 | 	mov	arg01, #0
0134c     8C 70 B0 FD | 	call	#__system___getiolock_0223
01350     18 77 02 F6 | 	mov	arg01, result1
01354     90 51 B0 FD | 	call	#__system___lockmem
01358     00 30 06 F6 | 	mov	result1, #0
0135c     08 00 00 FF 
01360     AC 0F 06 F1 | 	add	objptr, ##4524
01364     07 79 02 FB | 	rdlong	arg02, objptr
01368     08 00 00 FF 
0136c     AC 0F 86 F1 | 	sub	objptr, ##4524
01370     00 76 06 F6 | 	mov	arg01, #0
01374     00 7A 06 F6 | 	mov	arg03, #0
01378     0A 7C 06 F6 | 	mov	arg04, #10
0137c     B4 58 B0 FD | 	call	#__system___basic_print_integer
01380     00 76 06 F6 | 	mov	arg01, #0
01384     0A 78 06 F6 | 	mov	arg02, #10
01388     00 7A 06 F6 | 	mov	arg03, #0
0138c     10 58 B0 FD | 	call	#__system___basic_print_char
01390     01 30 06 F6 | 	mov	result1, #1
01394     00 76 06 F6 | 	mov	arg01, #0
01398     40 70 B0 FD | 	call	#__system___getiolock_0223
0139c     18 01 68 FC | 	wrlong	#0, result1
013a0     00 30 06 F6 | 	mov	result1, #0
013a4     44 79 02 F6 | 	mov	arg02, local03
013a8     0B 78 86 F1 | 	sub	arg02, #11
013ac                 | ' 
013ac                 | ' ''---------- Set the (x,y) position of cursor
013ac                 | ' 
013ac                 | ' cursor_x:=x
013ac     34 0E 06 F1 | 	add	objptr, #52
013b0     07 BB 48 FC | 	wrbyte	#93, objptr
013b4                 | ' cursor_y:=y
013b4     01 0E 06 F1 | 	add	objptr, #1
013b8     07 79 42 FC | 	wrbyte	arg02, objptr
013bc     35 0E 86 F1 | 	sub	objptr, #53
013c0     00 76 06 F6 | 	mov	arg01, #0
013c4     14 70 B0 FD | 	call	#__system___getiolock_0223
013c8     18 77 02 F6 | 	mov	arg01, result1
013cc     18 51 B0 FD | 	call	#__system___lockmem
013d0     00 30 06 F6 | 	mov	result1, #0
013d4     08 00 00 FF 
013d8     A0 0F 06 F1 | 	add	objptr, ##4512
013dc     07 79 02 FB | 	rdlong	arg02, objptr
013e0     08 00 00 FF 
013e4     A0 0F 86 F1 | 	sub	objptr, ##4512
013e8     00 76 06 F6 | 	mov	arg01, #0
013ec     00 7A 06 F6 | 	mov	arg03, #0
013f0     0A 7C 06 F6 | 	mov	arg04, #10
013f4     3C 58 B0 FD | 	call	#__system___basic_print_integer
013f8     00 76 06 F6 | 	mov	arg01, #0
013fc     0A 78 06 F6 | 	mov	arg02, #10
01400     00 7A 06 F6 | 	mov	arg03, #0
01404     98 57 B0 FD | 	call	#__system___basic_print_char
01408     01 30 06 F6 | 	mov	result1, #1
0140c     00 76 06 F6 | 	mov	arg01, #0
01410     C8 6F B0 FD | 	call	#__system___getiolock_0223
01414     18 01 68 FC | 	wrlong	#0, result1
01418     00 30 06 F6 | 	mov	result1, #0
0141c     44 79 02 F6 | 	mov	arg02, local03
01420     0B 78 86 F1 | 	sub	arg02, #11
01424                 | ' 
01424                 | ' ''---------- Set the (x,y) position of cursor
01424                 | ' 
01424                 | ' cursor_x:=x
01424     34 0E 06 F1 | 	add	objptr, #52
01428     07 C7 48 FC | 	wrbyte	#99, objptr
0142c                 | ' cursor_y:=y
0142c     01 0E 06 F1 | 	add	objptr, #1
01430     07 79 42 FC | 	wrbyte	arg02, objptr
01434     35 0E 86 F1 | 	sub	objptr, #53
01438     00 76 06 F6 | 	mov	arg01, #0
0143c     9C 6F B0 FD | 	call	#__system___getiolock_0223
01440     18 77 02 F6 | 	mov	arg01, result1
01444     A0 50 B0 FD | 	call	#__system___lockmem
01448     00 30 06 F6 | 	mov	result1, #0
0144c     08 00 00 FF 
01450     A4 0F 06 F1 | 	add	objptr, ##4516
01454     07 79 02 FB | 	rdlong	arg02, objptr
01458     08 00 00 FF 
0145c     A4 0F 86 F1 | 	sub	objptr, ##4516
01460     00 76 06 F6 | 	mov	arg01, #0
01464     00 7A 06 F6 | 	mov	arg03, #0
01468     0A 7C 06 F6 | 	mov	arg04, #10
0146c     C4 57 B0 FD | 	call	#__system___basic_print_integer
01470     00 76 06 F6 | 	mov	arg01, #0
01474     0A 78 06 F6 | 	mov	arg02, #10
01478     00 7A 06 F6 | 	mov	arg03, #0
0147c     20 57 B0 FD | 	call	#__system___basic_print_char
01480     01 30 06 F6 | 	mov	result1, #1
01484     00 76 06 F6 | 	mov	arg01, #0
01488     50 6F B0 FD | 	call	#__system___getiolock_0223
0148c     18 01 68 FC | 	wrlong	#0, result1
01490     00 30 06 F6 | 	mov	result1, #0
01494                 | LR__0006
01494     01 88 06 F1 | 	add	local03, #1
01498     A4 F7 9F FD | 	jmp	#LR__0002
0149c                 | LR__0007
0149c                 | '     return (char *) &tempname1;
0149c     00 76 06 F6 | 	mov	arg01, #0
014a0     38 6F B0 FD | 	call	#__system___getiolock_0223
014a4     18 77 02 F6 | 	mov	arg01, result1
014a8     3C 50 B0 FD | 	call	#__system___lockmem
014ac     00 30 06 F6 | 	mov	result1, #0
014b0     00 76 06 F6 | 	mov	arg01, #0
014b4     0A 78 06 F6 | 	mov	arg02, #10
014b8     00 7A 06 F6 | 	mov	arg03, #0
014bc     E0 56 B0 FD | 	call	#__system___basic_print_char
014c0     01 30 06 F6 | 	mov	result1, #1
014c4     00 76 06 F6 | 	mov	arg01, #0
014c8     10 6F B0 FD | 	call	#__system___getiolock_0223
014cc     18 01 68 FC | 	wrlong	#0, result1
014d0     00 30 06 F6 | 	mov	result1, #0
014d4     AF F0 03 F6 | 	mov	ptra, fp
014d8     BF 00 A0 FD | 	call	#popregs_
014dc                 | _getinfo_ret
014dc     2D 00 64 FD | 	ret
014e0                 | 
014e0                 | _program
014e0     0C 5A 05 F6 | 	mov	COUNT_, #12
014e4     B0 00 A0 FD | 	call	#pushregs_
014e8     EC 0E 06 F1 | 	add	objptr, #236
014ec     50 21 B0 FD | 	call	#_retrocog_spin2_start
014f0     02 00 00 FF 
014f4     40 0E 06 F1 | 	add	objptr, ##1088
014f8     07 31 62 FC | 	wrlong	result1, objptr
014fc                 | ' c=rm.start()
014fc                 | ' return c
014fc     02 00 00 FF 
01500     2C 0F 86 F1 | 	sub	objptr, ##1324
01504     40 76 06 F6 | 	mov	arg01, #64
01508     00 78 06 F6 | 	mov	arg02, #0
0150c     60 F3 BF FD | 	call	#_startvideo
01510     64 76 06 F6 | 	mov	arg01, #100
01514     79 00 00 FF 
01518     DE 79 06 F6 | 	mov	arg02, ##@LR__0930
0151c     A8 5C B0 FD | 	call	#__system__String_S
01520     02 00 00 FF 
01524     34 0F 06 F1 | 	add	objptr, ##1332
01528     07 31 62 FC | 	wrlong	result1, objptr
0152c     02 00 00 FF 
01530     34 0F 86 F1 | 	sub	objptr, ##1332
01534     7A 00 00 FF 
01538     C8 84 06 F6 | 	mov	local01, ##@LR__0944
0153c     3D 76 06 F6 | 	mov	arg01, #61
01540     3C 78 06 F6 | 	mov	arg02, #60
01544     3B 7A 06 F6 | 	mov	arg03, #59
01548     3A 7C 06 F6 | 	mov	arg04, #58
0154c     24 67 B0 FD | 	call	#__system___vfs_open_sdcardx
01550     18 79 02 F6 | 	mov	arg02, result1
01554     42 77 02 F6 | 	mov	arg01, local01
01558     24 52 B0 FD | 	call	#__system___mount
0155c     7A 00 00 FF 
01560     CC 76 06 F6 | 	mov	arg01, ##@LR__0945
01564     B8 69 B0 FD | 	call	#__system__chdir
01568     7A 00 00 FF 
0156c     D0 76 06 F6 | 	mov	arg01, ##@LR__0946
01570     AC 69 B0 FD | 	call	#__system__chdir
01574     18 87 02 F6 | 	mov	local02, result1
01578     02 00 00 FF 
0157c     38 0F 06 F1 | 	add	objptr, ##1336
01580     07 87 62 FC | 	wrlong	local02, objptr
01584     02 00 00 FF 
01588     38 0F 86 F1 | 	sub	objptr, ##1336
0158c     9A 76 06 F6 | 	mov	arg01, #154
01590     93 78 06 F6 | 	mov	arg02, #147
01594     88 0D B0 FD | 	call	#_hng030rm_spin2_cls
01598     02 00 00 FF 
0159c     34 0F 06 F1 | 	add	objptr, ##1332
015a0     38 28 B0 FD | 	call	#_shell_c_cwd2
015a4     07 31 62 FC | 	wrlong	result1, objptr
015a8     02 00 00 FF 
015ac     34 0F 86 F1 | 	sub	objptr, ##1332
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0                 | '     return (char *) &tempname1;
015b0     00 76 06 F6 | 	mov	arg01, #0
015b4     24 6E B0 FD | 	call	#__system___getiolock_0223
015b8     18 77 02 F6 | 	mov	arg01, result1
015bc     28 4F B0 FD | 	call	#__system___lockmem
015c0     00 30 06 F6 | 	mov	result1, #0
015c4     02 00 00 FF 
015c8     34 0F 06 F1 | 	add	objptr, ##1332
015cc     07 79 02 FB | 	rdlong	arg02, objptr
015d0     02 00 00 FF 
015d4     34 0F 86 F1 | 	sub	objptr, ##1332
015d8     00 76 06 F6 | 	mov	arg01, #0
015dc     00 7A 06 F6 | 	mov	arg03, #0
015e0     08 56 B0 FD | 	call	#__system___basic_print_string
015e4     00 76 06 F6 | 	mov	arg01, #0
015e8     0A 78 06 F6 | 	mov	arg02, #10
015ec     00 7A 06 F6 | 	mov	arg03, #0
015f0     AC 55 B0 FD | 	call	#__system___basic_print_char
015f4     01 30 06 F6 | 	mov	result1, #1
015f8     00 76 06 F6 | 	mov	arg01, #0
015fc     DC 6D B0 FD | 	call	#__system___getiolock_0223
01600     18 01 68 FC | 	wrlong	#0, result1
01604     00 30 06 F6 | 	mov	result1, #0
01608     02 00 00 FF 
0160c     34 0F 06 F1 | 	add	objptr, ##1332
01610     07 77 02 FB | 	rdlong	arg01, objptr
01614     02 00 00 FF 
01618     34 0F 86 F1 | 	sub	objptr, ##1332
0161c     64 78 06 F6 | 	mov	arg02, #100
01620     44 68 B0 FD | 	call	#__system__getcwd
01624                 | '     return (char *) &tempname1;
01624                 | '     return (char *) &tempname1;
01624                 | '     return (char *) &tempname1;
01624     00 76 06 F6 | 	mov	arg01, #0
01628     B0 6D B0 FD | 	call	#__system___getiolock_0223
0162c     18 77 02 F6 | 	mov	arg01, result1
01630     B4 4E B0 FD | 	call	#__system___lockmem
01634     00 30 06 F6 | 	mov	result1, #0
01638     02 00 00 FF 
0163c     34 0F 06 F1 | 	add	objptr, ##1332
01640     07 79 02 FB | 	rdlong	arg02, objptr
01644     02 00 00 FF 
01648     34 0F 86 F1 | 	sub	objptr, ##1332
0164c     00 76 06 F6 | 	mov	arg01, #0
01650     00 7A 06 F6 | 	mov	arg03, #0
01654     94 55 B0 FD | 	call	#__system___basic_print_string
01658     00 76 06 F6 | 	mov	arg01, #0
0165c     0A 78 06 F6 | 	mov	arg02, #10
01660     00 7A 06 F6 | 	mov	arg03, #0
01664     38 55 B0 FD | 	call	#__system___basic_print_char
01668     01 30 06 F6 | 	mov	result1, #1
0166c     00 76 06 F6 | 	mov	arg01, #0
01670     68 6D B0 FD | 	call	#__system___getiolock_0223
01674     18 01 68 FC | 	wrlong	#0, result1
01678     00 30 06 F6 | 	mov	result1, #0
0167c     09 00 00 FF 
01680     88 77 06 F6 | 	mov	arg01, ##5000
01684     28 50 B0 FD | 	call	#__system___waitms
01688     9A 76 06 F6 | 	mov	arg01, #154
0168c     93 78 06 F6 | 	mov	arg02, #147
01690     8C 0C B0 FD | 	call	#_hng030rm_spin2_cls
01694     02 00 00 FF 
01698     3C 0F 06 F1 | 	add	objptr, ##1340
0169c     07 01 69 FC | 	wrlong	#128, objptr
016a0     04 0E 06 F1 | 	add	objptr, #4
016a4     07 7B 68 FC | 	wrlong	#61, objptr
016a8     04 0E 06 F1 | 	add	objptr, #4
016ac     07 79 68 FC | 	wrlong	#60, objptr
016b0     04 0E 06 F1 | 	add	objptr, #4
016b4     07 77 68 FC | 	wrlong	#59, objptr
016b8     04 0E 06 F1 | 	add	objptr, #4
016bc     07 75 68 FC | 	wrlong	#58, objptr
016c0     04 0E 06 F1 | 	add	objptr, #4
016c4     07 07 68 FC | 	wrlong	#3, objptr
016c8     7A 00 00 FF 
016cc     D4 88 06 F6 | 	mov	local03, ##@LR__0947
016d0     01 00 00 FF 
016d4     AC 0F 06 F1 | 	add	objptr, ##940
016d8     07 89 62 FC | 	wrlong	local03, objptr
016dc     04 00 00 FF 
016e0     FC 0E 86 F1 | 	sub	objptr, ##2300
016e4     0C 77 02 F6 | 	mov	arg01, ptr__dat__
016e8     C8 F1 BF FD | 	call	#_addr
016ec     04 00 00 FF 
016f0     00 0F 06 F1 | 	add	objptr, ##2304
016f4     07 31 62 FC | 	wrlong	result1, objptr
016f8     18 77 02 F6 | 	mov	arg01, result1
016fc     00 78 06 F6 | 	mov	arg02, #0
01700     01 00 00 FF 
01704     AC 0F 86 F1 | 	sub	objptr, ##940
01708     00 27 B0 FD | 	call	#_trackerplayer_spin2_initModule
0170c     01 78 06 F6 | 	mov	arg02, #1
01710                 | ' 
01710                 | ' ''---------- Set the (x,y) position of cursor
01710                 | ' 
01710                 | ' cursor_x:=x
01710     02 00 00 FF 
01714     20 0F 86 F1 | 	sub	objptr, ##1312
01718     07 03 48 FC | 	wrbyte	#1, objptr
0171c                 | ' cursor_y:=y
0171c     01 0E 06 F1 | 	add	objptr, #1
01720     07 03 48 FC | 	wrbyte	#1, objptr
01724                 | '     return (char *) &tempname1;
01724                 | '     return (char *) &tempname1;
01724                 | '     return (char *) &tempname1;
01724                 | '     return (char *) &tempname1;
01724                 | '     return (char *) &tempname1;
01724                 | '     return (char *) &tempname1;
01724                 | '     return (char *) &tempname1;
01724     04 00 00 FF 
01728     CB 0E 06 F1 | 	add	objptr, ##2251
0172c     07 8B 02 FB | 	rdlong	local04, objptr
01730     45 8D 02 F6 | 	mov	local05, local04
01734     04 00 00 FF 
01738     00 0F 86 F1 | 	sub	objptr, ##2304
0173c     14 8C 06 F1 | 	add	local05, #20
01740                 | LR__0008
01740     46 8B 5A F2 | 	cmps	local04, local05 wcz
01744     40 00 90 3D |  if_ae	jmp	#LR__0009
01748     00 76 06 F6 | 	mov	arg01, #0
0174c     8C 6C B0 FD | 	call	#__system___getiolock_0223
01750     18 77 02 F6 | 	mov	arg01, result1
01754     90 4D B0 FD | 	call	#__system___lockmem
01758                 | ' asm
01758     45 31 C2 FA | 	rdbyte	result1, local04
0175c                 | ' return r
0175c     18 79 02 F6 | 	mov	arg02, result1
01760     07 78 46 F7 | 	zerox	arg02, #7
01764     00 76 06 F6 | 	mov	arg01, #0
01768     00 7A 06 F6 | 	mov	arg03, #0
0176c     30 54 B0 FD | 	call	#__system___basic_print_char
01770     00 76 06 F6 | 	mov	arg01, #0
01774     64 6C B0 FD | 	call	#__system___getiolock_0223
01778     18 01 68 FC | 	wrlong	#0, result1
0177c     00 30 06 F6 | 	mov	result1, #0
01780     01 8A 06 F1 | 	add	local04, #1
01784     B8 FF 9F FD | 	jmp	#LR__0008
01788                 | LR__0009
01788     04 00 00 FF 
0178c     04 0F 06 F1 | 	add	objptr, ##2308
01790     07 1F 68 FC | 	wrlong	#15, objptr
01794                 | '     return (char *) &tempname1;
01794     00 88 06 F6 | 	mov	local03, #0
01798     04 0E 86 F1 | 	sub	objptr, #4
0179c     07 77 02 FB | 	rdlong	arg01, objptr
017a0     02 00 00 FF 
017a4     38 76 06 F1 | 	add	arg01, ##1080
017a8                 | ' asm
017a8     3B 85 C2 FA | 	rdbyte	local01, arg01
017ac                 | ' return r
017ac     07 84 46 F7 | 	zerox	local01, #7
017b0     4D 84 0E F2 | 	cmp	local01, #77 wz
017b4     01 88 66 A6 |  if_e	neg	local03, #1
017b8     00 8E 06 F6 | 	mov	local06, #0
017bc     07 77 02 FB | 	rdlong	arg01, objptr
017c0     04 00 00 FF 
017c4     00 0F 86 F1 | 	sub	objptr, ##2304
017c8     02 00 00 FF 
017cc     3A 76 06 F1 | 	add	arg01, ##1082
017d0                 | ' asm
017d0     3B 31 C2 FA | 	rdbyte	result1, arg01
017d4                 | ' return r
017d4     18 91 02 F6 | 	mov	local07, result1
017d8     07 90 46 F7 | 	zerox	local07, #7
017dc     4B 90 0E F2 | 	cmp	local07, #75 wz
017e0     01 8E 66 A6 |  if_e	neg	local06, #1
017e4     47 89 CA F7 | 	test	local03, local06 wz
017e8     04 00 00 5F 
017ec     04 0F 06 51 |  if_ne	add	objptr, ##2308
017f0     07 3F 68 5C |  if_ne	wrlong	#31, objptr
017f4     04 00 00 5F 
017f8     04 0F 86 51 |  if_ne	sub	objptr, ##2308
017fc     02 78 06 F6 | 	mov	arg02, #2
01800                 | ' 
01800                 | ' ''---------- Set the (x,y) position of cursor
01800                 | ' 
01800                 | ' cursor_x:=x
01800     34 0E 06 F1 | 	add	objptr, #52
01804     07 03 48 FC | 	wrbyte	#1, objptr
01808                 | ' cursor_y:=y
01808     01 0E 06 F1 | 	add	objptr, #1
0180c     07 05 48 FC | 	wrbyte	#2, objptr
01810     35 0E 86 F1 | 	sub	objptr, #53
01814                 | '     return (char *) &tempname1;
01814     00 76 06 F6 | 	mov	arg01, #0
01818     C0 6B B0 FD | 	call	#__system___getiolock_0223
0181c     18 77 02 F6 | 	mov	arg01, result1
01820     C4 4C B0 FD | 	call	#__system___lockmem
01824     00 30 06 F6 | 	mov	result1, #0
01828     04 00 00 FF 
0182c     04 0F 06 F1 | 	add	objptr, ##2308
01830     07 79 02 FB | 	rdlong	arg02, objptr
01834     04 00 00 FF 
01838     04 0F 86 F1 | 	sub	objptr, ##2308
0183c     00 76 06 F6 | 	mov	arg01, #0
01840     00 7A 06 F6 | 	mov	arg03, #0
01844     0A 7C 06 F6 | 	mov	arg04, #10
01848     E8 53 B0 FD | 	call	#__system___basic_print_integer
0184c     7A 00 00 FF 
01850     EB 78 06 F6 | 	mov	arg02, ##@LR__0948
01854     00 76 06 F6 | 	mov	arg01, #0
01858     00 7A 06 F6 | 	mov	arg03, #0
0185c     8C 53 B0 FD | 	call	#__system___basic_print_string
01860     7A 00 00 FF 
01864     ED 78 06 F6 | 	mov	arg02, ##@LR__0949
01868     00 76 06 F6 | 	mov	arg01, #0
0186c     00 7A 06 F6 | 	mov	arg03, #0
01870     78 53 B0 FD | 	call	#__system___basic_print_string
01874     00 76 06 F6 | 	mov	arg01, #0
01878     0A 78 06 F6 | 	mov	arg02, #10
0187c     00 7A 06 F6 | 	mov	arg03, #0
01880     1C 53 B0 FD | 	call	#__system___basic_print_char
01884     01 30 06 F6 | 	mov	result1, #1
01888     00 76 06 F6 | 	mov	arg01, #0
0188c     4C 6B B0 FD | 	call	#__system___getiolock_0223
01890     18 01 68 FC | 	wrlong	#0, result1
01894     00 30 06 F6 | 	mov	result1, #0
01898     04 00 00 FF 
0189c     00 0F 06 F1 | 	add	objptr, ##2304
018a0     07 77 02 FB | 	rdlong	arg01, objptr
018a4     04 0E 06 F1 | 	add	objptr, #4
018a8     07 79 02 FB | 	rdlong	arg02, objptr
018ac     04 00 00 FF 
018b0     04 0F 86 F1 | 	sub	objptr, ##2308
018b4     98 F2 BF FD | 	call	#_getinfo
018b8     03 00 00 FF 
018bc     50 0F 06 F1 | 	add	objptr, ##1872
018c0     B0 47 B0 FD | 	call	#_audio019_spin2_start
018c4     19 85 02 F6 | 	mov	local01, result2
018c8     A4 0F 06 F1 | 	add	objptr, #420
018cc     07 31 62 FC | 	wrlong	result1, objptr
018d0     04 0E 06 F1 | 	add	objptr, #4
018d4     07 85 62 FC | 	wrlong	local01, objptr
018d8     10 0E 06 F1 | 	add	objptr, #16
018dc     07 01 68 FC | 	wrlong	#0, objptr
018e0     04 0E 06 F1 | 	add	objptr, #4
018e4     07 01 68 FC | 	wrlong	#0, objptr
018e8     04 0E 06 F1 | 	add	objptr, #4
018ec     07 01 68 FC | 	wrlong	#0, objptr
018f0     04 0E 06 F1 | 	add	objptr, #4
018f4     07 01 68 FC | 	wrlong	#0, objptr
018f8     04 00 00 FF 
018fc     F8 0E 86 F1 | 	sub	objptr, ##2296
01900     07 89 02 FB | 	rdlong	local03, objptr
01904     08 00 00 FF 
01908     70 0F 06 F1 | 	add	objptr, ##4464
0190c     07 89 62 FC | 	wrlong	local03, objptr
01910     08 00 00 FF 
01914     8C 0F 86 F1 | 	sub	objptr, ##4492
01918                 | '     return (char *) &tempname1;
01918                 | '     return (char *) &tempname1;
01918     00 8A 06 F6 | 	mov	local04, #0
0191c     2C E7 9F FE | 	loc	pa,	#(@LR__0011-@LR__0010)
01920     93 00 A0 FD | 	call	#FCACHE_LOAD_
01924                 | LR__0010
01924     45 85 02 F6 | 	mov	local01, local04
01928     02 84 66 F0 | 	shl	local01, #2
0192c     04 00 00 FF 
01930     18 0F 06 F1 | 	add	objptr, ##2328
01934     07 85 02 F1 | 	add	local01, objptr
01938     04 00 00 FF 
0193c     74 0E 06 F1 | 	add	objptr, ##2164
01940     07 77 02 FB | 	rdlong	arg01, objptr
01944     08 00 00 FF 
01948     8C 0F 86 F1 | 	sub	objptr, ##4492
0194c     45 93 02 F6 | 	mov	local08, local04
01950     02 92 66 F0 | 	shl	local08, #2
01954     49 77 02 F1 | 	add	arg01, local08
01958                 | ' asm
01958     3B 31 02 FB | 	rdlong	result1, arg01
0195c                 | ' return r
0195c     42 31 62 FC | 	wrlong	result1, local01
01960     01 8A 06 F1 | 	add	local04, #1
01964     01 00 00 FF 
01968     1C 8A 5E F2 | 	cmps	local04, ##540 wcz
0196c     B4 FF 9F CD |  if_b	jmp	#LR__0010
01970                 | LR__0011
01970                 | '     return (char *) &tempname1;
01970                 | '     return (char *) &tempname1;
01970                 | LR__0012
01970     01 76 06 F6 | 	mov	arg01, #1
01974     10 09 B0 FD | 	call	#_hng030rm_spin2_waitvbl
01978     02 00 00 FF 
0197c     54 0F 06 F1 | 	add	objptr, ##1364
01980     68 2B B0 FD | 	call	#_trackerplayer_spin2_tick
01984     02 00 00 FF 
01988     54 0F 86 F1 | 	sub	objptr, ##1364
0198c     1B 30 62 FD | 	getrnd	result1
01990     18 D9 02 F6 | 	mov	muldiva_, result1
01994     01 00 00 FF 
01998     1C DA 06 F6 | 	mov	muldivb_, ##540
0199c     CC 00 A0 FD | 	call	#unsdivide_
019a0     08 00 00 FF 
019a4     90 0F 06 F1 | 	add	objptr, ##4496
019a8     07 D9 62 FC | 	wrlong	muldiva_, objptr
019ac                 | '     return (char *) &tempname1;
019ac                 | '     return (char *) &tempname1;
019ac                 | '     return (char *) &tempname1;
019ac                 | '     return (char *) &tempname1;
019ac     05 00 00 FF 
019b0     46 0E 86 F1 | 	sub	objptr, ##2630
019b4     07 89 C2 FA | 	rdbyte	local03, objptr
019b8     BE 0F 06 F1 | 	add	objptr, #446
019bc     07 87 02 FB | 	rdlong	local02, objptr
019c0     04 00 00 FF 
019c4     08 0F 86 F1 | 	sub	objptr, ##2312
019c8     43 89 0A F2 | 	cmp	local03, local02 wz
019cc     8C 00 90 AD |  if_e	jmp	#LR__0013
019d0     03 00 00 FF 
019d4     4A 0F 06 F1 | 	add	objptr, ##1866
019d8     07 89 C2 FA | 	rdbyte	local03, objptr
019dc     BE 0F 06 F1 | 	add	objptr, #446
019e0     07 89 62 FC | 	wrlong	local03, objptr
019e4     10 0E 86 F1 | 	sub	objptr, #16
019e8     07 77 02 FB | 	rdlong	arg01, objptr
019ec     08 76 06 F1 | 	add	arg01, #8
019f0     01 00 00 FF 
019f4     FD 0E 86 F1 | 	sub	objptr, ##765
019f8     07 79 02 FB | 	rdlong	arg02, objptr
019fc     1E 78 26 F4 | 	bith	arg02, #30
01a00                 | ' asm
01a00     3B 79 62 FC | 	wrlong	arg02, arg01
01a04     01 00 00 FF 
01a08     FD 0E 06 F1 | 	add	objptr, ##765
01a0c     07 77 02 FB | 	rdlong	arg01, objptr
01a10     0C 76 06 F1 | 	add	arg01, #12
01a14     01 00 00 FF 
01a18     E9 0E 86 F1 | 	sub	objptr, ##745
01a1c     07 79 E2 FA | 	rdword	arg02, objptr
01a20     08 0E 06 F1 | 	add	objptr, #8
01a24     07 93 02 FB | 	rdlong	local08, objptr
01a28     49 79 82 F1 | 	sub	arg02, local08
01a2c                 | ' asm
01a2c     3B 79 62 FC | 	wrlong	arg02, arg01
01a30     01 00 00 FF 
01a34     E1 0E 06 F1 | 	add	objptr, ##737
01a38     07 77 02 FB | 	rdlong	arg01, objptr
01a3c     10 76 06 F1 | 	add	arg01, #16
01a40     01 00 00 FF 
01a44     E9 0E 86 F1 | 	sub	objptr, ##745
01a48     07 79 E2 FA | 	rdword	arg02, objptr
01a4c     03 00 00 FF 
01a50     0F 0E 86 F1 | 	sub	objptr, ##1551
01a54     0F 78 46 F7 | 	zerox	arg02, #15
01a58                 | ' asm
01a58     3B 79 62 FC | 	wrlong	arg02, arg01
01a5c                 | LR__0013
01a5c     04 00 00 FF 
01a60     F8 0E 06 F1 | 	add	objptr, ##2296
01a64     07 77 02 FB | 	rdlong	arg01, objptr
01a68     14 76 06 F1 | 	add	arg01, #20
01a6c     01 00 00 FF 
01a70     A5 0E 86 F1 | 	sub	objptr, ##677
01a74     07 95 02 FB | 	rdlong	local09, objptr
01a78     10 0E 06 F1 | 	add	objptr, #16
01a7c     07 93 02 FB | 	rdlong	local08, objptr
01a80     49 95 02 F1 | 	add	local09, local08
01a84     27 0F 86 F1 | 	sub	objptr, #295
01a88     07 97 02 FB | 	rdlong	local10, objptr
01a8c     4B 95 02 FD | 	qmul	local09, local10
01a90     18 78 62 FD | 	getqx	arg02
01a94                 | ' asm
01a94     3B 79 52 FC | 	wrword	arg02, arg01
01a98     01 00 00 FF 
01a9c     BC 0F 06 F1 | 	add	objptr, ##956
01aa0     07 77 02 FB | 	rdlong	arg01, objptr
01aa4     16 76 06 F1 | 	add	arg01, #22
01aa8                 | ' asm
01aa8     0C 00 80 FF 
01aac     3B 01 58 FC | 	wrword	##6144, arg01
01ab0     07 77 02 FB | 	rdlong	arg01, objptr
01ab4     18 76 06 F1 | 	add	arg01, #24
01ab8     01 00 00 FF 
01abc     C5 0E 86 F1 | 	sub	objptr, ##709
01ac0     07 79 02 FB | 	rdlong	arg02, objptr
01ac4     10 0E 06 F1 | 	add	objptr, #16
01ac8     07 93 02 FB | 	rdlong	local08, objptr
01acc     49 79 02 F1 | 	add	arg02, local08
01ad0                 | ' asm
01ad0     3B 79 52 FC | 	wrword	arg02, arg01
01ad4     01 00 00 FF 
01ad8     B5 0E 06 F1 | 	add	objptr, ##693
01adc     07 77 02 FB | 	rdlong	arg01, objptr
01ae0     1A 76 06 F1 | 	add	arg01, #26
01ae4                 | ' asm
01ae4     3B 03 58 FC | 	wrword	#1, arg01
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8                 | '     return (char *) &tempname1;
01ae8     AD 0F 86 F1 | 	sub	objptr, #429
01aec     07 89 C2 FA | 	rdbyte	local03, objptr
01af0     C1 0F 06 F1 | 	add	objptr, #449
01af4     07 87 02 FB | 	rdlong	local02, objptr
01af8     04 00 00 FF 
01afc     0C 0F 86 F1 | 	sub	objptr, ##2316
01b00     43 89 0A F2 | 	cmp	local03, local02 wz
01b04     9C 00 90 AD |  if_e	jmp	#LR__0014
01b08     03 00 00 FF 
01b0c     4B 0F 06 F1 | 	add	objptr, ##1867
01b10     07 89 C2 FA | 	rdbyte	local03, objptr
01b14     C1 0F 06 F1 | 	add	objptr, #449
01b18     07 89 62 FC | 	wrlong	local03, objptr
01b1c     14 0E 86 F1 | 	sub	objptr, #20
01b20     07 77 02 FB | 	rdlong	arg01, objptr
01b24     28 76 06 F1 | 	add	arg01, #40
01b28     01 00 00 FF 
01b2c     F9 0E 86 F1 | 	sub	objptr, ##761
01b30     07 79 02 FB | 	rdlong	arg02, objptr
01b34     1E 78 26 F4 | 	bith	arg02, #30
01b38                 | ' asm
01b38     3B 79 62 FC | 	wrlong	arg02, arg01
01b3c     20 76 06 F6 | 	mov	arg01, #32
01b40     01 00 00 FF 
01b44     F9 0E 06 F1 | 	add	objptr, ##761
01b48     07 85 02 FB | 	rdlong	local01, objptr
01b4c     42 77 02 F1 | 	add	arg01, local01
01b50     0C 76 06 F1 | 	add	arg01, #12
01b54     01 00 00 FF 
01b58     E7 0E 86 F1 | 	sub	objptr, ##743
01b5c     07 79 E2 FA | 	rdword	arg02, objptr
01b60     0A 0E 06 F1 | 	add	objptr, #10
01b64     07 8F 02 FB | 	rdlong	local06, objptr
01b68     47 79 82 F1 | 	sub	arg02, local06
01b6c                 | ' asm
01b6c     3B 79 62 FC | 	wrlong	arg02, arg01
01b70     20 76 06 F6 | 	mov	arg01, #32
01b74     01 00 00 FF 
01b78     DD 0E 06 F1 | 	add	objptr, ##733
01b7c     07 85 02 FB | 	rdlong	local01, objptr
01b80     42 77 02 F1 | 	add	arg01, local01
01b84     10 76 06 F1 | 	add	arg01, #16
01b88     01 00 00 FF 
01b8c     E7 0E 86 F1 | 	sub	objptr, ##743
01b90     07 79 E2 FA | 	rdword	arg02, objptr
01b94     03 00 00 FF 
01b98     11 0E 86 F1 | 	sub	objptr, ##1553
01b9c     0F 78 46 F7 | 	zerox	arg02, #15
01ba0                 | ' asm
01ba0     3B 79 62 FC | 	wrlong	arg02, arg01
01ba4                 | LR__0014
01ba4     20 76 06 F6 | 	mov	arg01, #32
01ba8     04 00 00 FF 
01bac     F8 0E 06 F1 | 	add	objptr, ##2296
01bb0     07 85 02 FB | 	rdlong	local01, objptr
01bb4     42 77 02 F1 | 	add	arg01, local01
01bb8     14 76 06 F1 | 	add	arg01, #20
01bbc     01 00 00 FF 
01bc0     A1 0E 86 F1 | 	sub	objptr, ##673
01bc4     07 99 02 FB | 	rdlong	local11, objptr
01bc8     10 0E 06 F1 | 	add	objptr, #16
01bcc     07 8F 02 FB | 	rdlong	local06, objptr
01bd0     47 99 02 F1 | 	add	local11, local06
01bd4     2B 0F 86 F1 | 	sub	objptr, #299
01bd8     07 9B 02 FB | 	rdlong	local12, objptr
01bdc     4D 99 02 FD | 	qmul	local11, local12
01be0     18 78 62 FD | 	getqx	arg02
01be4                 | ' asm
01be4     3B 79 52 FC | 	wrword	arg02, arg01
01be8     20 76 06 F6 | 	mov	arg01, #32
01bec     01 00 00 FF 
01bf0     BC 0F 06 F1 | 	add	objptr, ##956
01bf4     07 85 02 FB | 	rdlong	local01, objptr
01bf8     42 77 02 F1 | 	add	arg01, local01
01bfc     16 76 06 F1 | 	add	arg01, #22
01c00                 | ' asm
01c00     14 00 80 FF 
01c04     3B 01 58 FC | 	wrword	##10240, arg01
01c08     20 76 06 F6 | 	mov	arg01, #32
01c0c     07 85 02 FB | 	rdlong	local01, objptr
01c10     42 77 02 F1 | 	add	arg01, local01
01c14     18 76 06 F1 | 	add	arg01, #24
01c18     01 00 00 FF 
01c1c     C1 0E 86 F1 | 	sub	objptr, ##705
01c20     07 79 02 FB | 	rdlong	arg02, objptr
01c24     10 0E 06 F1 | 	add	objptr, #16
01c28     07 8F 02 FB | 	rdlong	local06, objptr
01c2c     47 79 02 F1 | 	add	arg02, local06
01c30                 | ' asm
01c30     3B 79 52 FC | 	wrword	arg02, arg01
01c34     20 76 06 F6 | 	mov	arg01, #32
01c38     01 00 00 FF 
01c3c     B1 0E 06 F1 | 	add	objptr, ##689
01c40     07 85 02 FB | 	rdlong	local01, objptr
01c44     42 77 02 F1 | 	add	arg01, local01
01c48     1A 76 06 F1 | 	add	arg01, #26
01c4c                 | ' asm
01c4c     3B 03 58 FC | 	wrword	#1, arg01
01c50                 | '     return (char *) &tempname1;
01c50                 | '     return (char *) &tempname1;
01c50                 | '     return (char *) &tempname1;
01c50                 | '     return (char *) &tempname1;
01c50                 | '     return (char *) &tempname1;
01c50                 | '     return (char *) &tempname1;
01c50                 | '     return (char *) &tempname1;
01c50     AC 0F 86 F1 | 	sub	objptr, #428
01c54     07 89 C2 FA | 	rdbyte	local03, objptr
01c58     C4 0F 06 F1 | 	add	objptr, #452
01c5c     07 87 02 FB | 	rdlong	local02, objptr
01c60     04 00 00 FF 
01c64     10 0F 86 F1 | 	sub	objptr, ##2320
01c68     43 89 0A F2 | 	cmp	local03, local02 wz
01c6c     9C 00 90 AD |  if_e	jmp	#LR__0015
01c70     03 00 00 FF 
01c74     4C 0F 06 F1 | 	add	objptr, ##1868
01c78     07 89 C2 FA | 	rdbyte	local03, objptr
01c7c     C4 0F 06 F1 | 	add	objptr, #452
01c80     07 89 62 FC | 	wrlong	local03, objptr
01c84     18 0E 86 F1 | 	sub	objptr, #24
01c88     07 77 02 FB | 	rdlong	arg01, objptr
01c8c     48 76 06 F1 | 	add	arg01, #72
01c90     01 00 00 FF 
01c94     F5 0E 86 F1 | 	sub	objptr, ##757
01c98     07 79 02 FB | 	rdlong	arg02, objptr
01c9c     1E 78 26 F4 | 	bith	arg02, #30
01ca0                 | ' asm
01ca0     3B 79 62 FC | 	wrlong	arg02, arg01
01ca4     40 76 06 F6 | 	mov	arg01, #64
01ca8     01 00 00 FF 
01cac     F5 0E 06 F1 | 	add	objptr, ##757
01cb0     07 85 02 FB | 	rdlong	local01, objptr
01cb4     42 77 02 F1 | 	add	arg01, local01
01cb8     0C 76 06 F1 | 	add	arg01, #12
01cbc     01 00 00 FF 
01cc0     E5 0E 86 F1 | 	sub	objptr, ##741
01cc4     07 79 E2 FA | 	rdword	arg02, objptr
01cc8     0C 0E 06 F1 | 	add	objptr, #12
01ccc     07 8F 02 FB | 	rdlong	local06, objptr
01cd0     47 79 82 F1 | 	sub	arg02, local06
01cd4                 | ' asm
01cd4     3B 79 62 FC | 	wrlong	arg02, arg01
01cd8     40 76 06 F6 | 	mov	arg01, #64
01cdc     01 00 00 FF 
01ce0     D9 0E 06 F1 | 	add	objptr, ##729
01ce4     07 85 02 FB | 	rdlong	local01, objptr
01ce8     42 77 02 F1 | 	add	arg01, local01
01cec     10 76 06 F1 | 	add	arg01, #16
01cf0     01 00 00 FF 
01cf4     E5 0E 86 F1 | 	sub	objptr, ##741
01cf8     07 79 E2 FA | 	rdword	arg02, objptr
01cfc     03 00 00 FF 
01d00     13 0E 86 F1 | 	sub	objptr, ##1555
01d04     0F 78 46 F7 | 	zerox	arg02, #15
01d08                 | ' asm
01d08     3B 79 62 FC | 	wrlong	arg02, arg01
01d0c                 | LR__0015
01d0c     40 76 06 F6 | 	mov	arg01, #64
01d10     04 00 00 FF 
01d14     F8 0E 06 F1 | 	add	objptr, ##2296
01d18     07 85 02 FB | 	rdlong	local01, objptr
01d1c     42 77 02 F1 | 	add	arg01, local01
01d20     14 76 06 F1 | 	add	arg01, #20
01d24     01 00 00 FF 
01d28     9D 0E 86 F1 | 	sub	objptr, ##669
01d2c     07 99 02 FB | 	rdlong	local11, objptr
01d30     10 0E 06 F1 | 	add	objptr, #16
01d34     07 8F 02 FB | 	rdlong	local06, objptr
01d38     47 99 02 F1 | 	add	local11, local06
01d3c     2F 0F 86 F1 | 	sub	objptr, #303
01d40     07 9B 02 FB | 	rdlong	local12, objptr
01d44     4D 99 02 FD | 	qmul	local11, local12
01d48     18 78 62 FD | 	getqx	arg02
01d4c                 | ' asm
01d4c     3B 79 52 FC | 	wrword	arg02, arg01
01d50     40 76 06 F6 | 	mov	arg01, #64
01d54     01 00 00 FF 
01d58     BC 0F 06 F1 | 	add	objptr, ##956
01d5c     07 85 02 FB | 	rdlong	local01, objptr
01d60     42 77 02 F1 | 	add	arg01, local01
01d64     16 76 06 F1 | 	add	arg01, #22
01d68                 | ' asm
01d68     14 00 80 FF 
01d6c     3B 01 58 FC | 	wrword	##10240, arg01
01d70     40 76 06 F6 | 	mov	arg01, #64
01d74     07 85 02 FB | 	rdlong	local01, objptr
01d78     42 77 02 F1 | 	add	arg01, local01
01d7c     18 76 06 F1 | 	add	arg01, #24
01d80     01 00 00 FF 
01d84     BD 0E 86 F1 | 	sub	objptr, ##701
01d88     07 79 02 FB | 	rdlong	arg02, objptr
01d8c     10 0E 06 F1 | 	add	objptr, #16
01d90     07 8F 02 FB | 	rdlong	local06, objptr
01d94     47 79 02 F1 | 	add	arg02, local06
01d98                 | ' asm
01d98     3B 79 52 FC | 	wrword	arg02, arg01
01d9c     40 76 06 F6 | 	mov	arg01, #64
01da0     01 00 00 FF 
01da4     AD 0E 06 F1 | 	add	objptr, ##685
01da8     07 85 02 FB | 	rdlong	local01, objptr
01dac     42 77 02 F1 | 	add	arg01, local01
01db0     1A 76 06 F1 | 	add	arg01, #26
01db4                 | ' asm
01db4     3B 03 58 FC | 	wrword	#1, arg01
01db8                 | '     return (char *) &tempname1;
01db8                 | '     return (char *) &tempname1;
01db8                 | '     return (char *) &tempname1;
01db8                 | '     return (char *) &tempname1;
01db8                 | '     return (char *) &tempname1;
01db8                 | '     return (char *) &tempname1;
01db8                 | '     return (char *) &tempname1;
01db8     AB 0F 86 F1 | 	sub	objptr, #427
01dbc     07 89 C2 FA | 	rdbyte	local03, objptr
01dc0     C7 0F 06 F1 | 	add	objptr, #455
01dc4     07 87 02 FB | 	rdlong	local02, objptr
01dc8     04 00 00 FF 
01dcc     14 0F 86 F1 | 	sub	objptr, ##2324
01dd0     43 89 0A F2 | 	cmp	local03, local02 wz
01dd4     9C 00 90 AD |  if_e	jmp	#LR__0016
01dd8     03 00 00 FF 
01ddc     4D 0F 06 F1 | 	add	objptr, ##1869
01de0     07 89 C2 FA | 	rdbyte	local03, objptr
01de4     C7 0F 06 F1 | 	add	objptr, #455
01de8     07 89 62 FC | 	wrlong	local03, objptr
01dec     1C 0E 86 F1 | 	sub	objptr, #28
01df0     07 77 02 FB | 	rdlong	arg01, objptr
01df4     68 76 06 F1 | 	add	arg01, #104
01df8     01 00 00 FF 
01dfc     F1 0E 86 F1 | 	sub	objptr, ##753
01e00     07 79 02 FB | 	rdlong	arg02, objptr
01e04     1E 78 26 F4 | 	bith	arg02, #30
01e08                 | ' asm
01e08     3B 79 62 FC | 	wrlong	arg02, arg01
01e0c     60 76 06 F6 | 	mov	arg01, #96
01e10     01 00 00 FF 
01e14     F1 0E 06 F1 | 	add	objptr, ##753
01e18     07 85 02 FB | 	rdlong	local01, objptr
01e1c     42 77 02 F1 | 	add	arg01, local01
01e20     0C 76 06 F1 | 	add	arg01, #12
01e24     01 00 00 FF 
01e28     E3 0E 86 F1 | 	sub	objptr, ##739
01e2c     07 79 E2 FA | 	rdword	arg02, objptr
01e30     0E 0E 06 F1 | 	add	objptr, #14
01e34     07 8F 02 FB | 	rdlong	local06, objptr
01e38     47 79 82 F1 | 	sub	arg02, local06
01e3c                 | ' asm
01e3c     3B 79 62 FC | 	wrlong	arg02, arg01
01e40     60 76 06 F6 | 	mov	arg01, #96
01e44     01 00 00 FF 
01e48     D5 0E 06 F1 | 	add	objptr, ##725
01e4c     07 85 02 FB | 	rdlong	local01, objptr
01e50     42 77 02 F1 | 	add	arg01, local01
01e54     10 76 06 F1 | 	add	arg01, #16
01e58     01 00 00 FF 
01e5c     E3 0E 86 F1 | 	sub	objptr, ##739
01e60     07 79 E2 FA | 	rdword	arg02, objptr
01e64     03 00 00 FF 
01e68     15 0E 86 F1 | 	sub	objptr, ##1557
01e6c     0F 78 46 F7 | 	zerox	arg02, #15
01e70                 | ' asm
01e70     3B 79 62 FC | 	wrlong	arg02, arg01
01e74                 | LR__0016
01e74     60 76 06 F6 | 	mov	arg01, #96
01e78     04 00 00 FF 
01e7c     F8 0E 06 F1 | 	add	objptr, ##2296
01e80     07 85 02 FB | 	rdlong	local01, objptr
01e84     42 77 02 F1 | 	add	arg01, local01
01e88     14 76 06 F1 | 	add	arg01, #20
01e8c     01 00 00 FF 
01e90     99 0E 86 F1 | 	sub	objptr, ##665
01e94     07 99 02 FB | 	rdlong	local11, objptr
01e98     10 0E 06 F1 | 	add	objptr, #16
01e9c     07 8F 02 FB | 	rdlong	local06, objptr
01ea0     47 99 02 F1 | 	add	local11, local06
01ea4     33 0F 86 F1 | 	sub	objptr, #307
01ea8     07 9B 02 FB | 	rdlong	local12, objptr
01eac     4D 99 02 FD | 	qmul	local11, local12
01eb0     18 78 62 FD | 	getqx	arg02
01eb4                 | ' asm
01eb4     3B 79 52 FC | 	wrword	arg02, arg01
01eb8     60 76 06 F6 | 	mov	arg01, #96
01ebc     01 00 00 FF 
01ec0     BC 0F 06 F1 | 	add	objptr, ##956
01ec4     07 85 02 FB | 	rdlong	local01, objptr
01ec8     42 77 02 F1 | 	add	arg01, local01
01ecc     16 76 06 F1 | 	add	arg01, #22
01ed0                 | ' asm
01ed0     0C 00 80 FF 
01ed4     3B 01 58 FC | 	wrword	##6144, arg01
01ed8     60 76 06 F6 | 	mov	arg01, #96
01edc     07 85 02 FB | 	rdlong	local01, objptr
01ee0     42 77 02 F1 | 	add	arg01, local01
01ee4     18 76 06 F1 | 	add	arg01, #24
01ee8     01 00 00 FF 
01eec     B9 0E 86 F1 | 	sub	objptr, ##697
01ef0     07 79 02 FB | 	rdlong	arg02, objptr
01ef4     10 0E 06 F1 | 	add	objptr, #16
01ef8     07 8F 02 FB | 	rdlong	local06, objptr
01efc     47 79 02 F1 | 	add	arg02, local06
01f00                 | ' asm
01f00     3B 79 52 FC | 	wrword	arg02, arg01
01f04     60 76 06 F6 | 	mov	arg01, #96
01f08     01 00 00 FF 
01f0c     A9 0E 06 F1 | 	add	objptr, ##681
01f10     07 85 02 FB | 	rdlong	local01, objptr
01f14     04 00 00 FF 
01f18     F8 0E 86 F1 | 	sub	objptr, ##2296
01f1c     42 77 02 F1 | 	add	arg01, local01
01f20     1A 76 06 F1 | 	add	arg01, #26
01f24     01 78 06 F6 | 	mov	arg02, #1
01f28                 | ' asm
01f28     3B 03 58 FC | 	wrword	#1, arg01
01f2c     AC E9 BF FD | 	call	#_test
01f30     3C FA 9F FD | 	jmp	#LR__0012
01f34     AF F0 03 F6 | 	mov	ptra, fp
01f38     BF 00 A0 FD | 	call	#popregs_
01f3c                 | _program_ret
01f3c     2D 00 64 FD | 	ret
01f40                 | 
01f40                 | ' 
01f40                 | ' 
01f40                 | ' ''---------- putpixel - put a pixel on the screen
01f40                 | ' 
01f40                 | ' pub putpixel1(x,y,c) |byte b
01f40                 | _hng030rm_spin2_putpixel1
01f40                 | ' 
01f40                 | ' 
01f40                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f40     00 36 06 F6 | 	mov	_var01, #0
01f44     00 76 5E F2 | 	cmps	arg01, #0 wcz
01f48     01 36 66 36 |  if_ae	neg	_var01, #1
01f4c     00 38 06 F6 | 	mov	_var02, #0
01f50     90 0E 06 F1 | 	add	objptr, #144
01f54     07 3B 02 FB | 	rdlong	_var03, objptr
01f58     05 3A 66 F0 | 	shl	_var03, #5
01f5c     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
01f60     01 38 66 C6 |  if_b	neg	_var02, #1
01f64     1C 37 02 F5 | 	and	_var01, _var02
01f68     00 3C 06 F6 | 	mov	_var04, #0
01f6c     00 78 5E F2 | 	cmps	arg02, #0 wcz
01f70     01 3C 66 36 |  if_ae	neg	_var04, #1
01f74     1E 37 02 F5 | 	and	_var01, _var04
01f78     00 3E 06 F6 | 	mov	_var05, #0
01f7c     04 0E 06 F1 | 	add	objptr, #4
01f80     07 41 02 FB | 	rdlong	_var06, objptr
01f84     94 0E 86 F1 | 	sub	objptr, #148
01f88     20 79 5A F2 | 	cmps	arg02, _var06 wcz
01f8c     01 3E 66 C6 |  if_b	neg	_var05, #1
01f90     1F 37 CA F7 | 	test	_var01, _var05 wz
01f94     90 00 90 AD |  if_e	jmp	#LR__0019
01f98                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01f98     07 37 02 FB | 	rdlong	_var01, objptr
01f9c     90 0E 06 F1 | 	add	objptr, #144
01fa0     07 39 02 FB | 	rdlong	_var02, objptr
01fa4     90 0E 86 F1 | 	sub	objptr, #144
01fa8     02 38 66 F0 | 	shl	_var02, #2
01fac     3C 39 02 FD | 	qmul	_var02, arg02
01fb0     18 42 62 FD | 	getqx	_var07
01fb4     21 37 02 F1 | 	add	_var01, _var07
01fb8     3B 3D 02 F6 | 	mov	_var04, arg01
01fbc     03 3C 46 F0 | 	shr	_var04, #3
01fc0     1E 37 02 F1 | 	add	_var01, _var04
01fc4     1B 45 C2 FA | 	rdbyte	_var08, _var01
01fc8                 | '     if (c==0)
01fc8     00 7A 0E F2 | 	cmp	arg03, #0 wz
01fcc     18 00 90 5D |  if_ne	jmp	#LR__0017
01fd0                 | '       b:=b & !(1<<(x//8))
01fd0     3B 3B 52 F6 | 	abs	_var03, arg01 wc
01fd4     07 3A 06 F5 | 	and	_var03, #7
01fd8     1D 3B 62 C6 |  if_b	neg	_var03, _var03
01fdc     1D 39 C2 F9 | 	decod	_var02, _var03
01fe0     1C 45 22 F5 | 	andn	_var08, _var02
01fe4                 | '     else
01fe4     14 00 90 FD | 	jmp	#LR__0018
01fe8                 | LR__0017
01fe8                 | '       b:=b |(1<<(x//8))
01fe8     3B 3B 52 F6 | 	abs	_var03, arg01 wc
01fec     07 3A 06 F5 | 	and	_var03, #7
01ff0     1D 3B 62 C6 |  if_b	neg	_var03, _var03
01ff4     1D 39 C2 F9 | 	decod	_var02, _var03
01ff8     1C 45 42 F5 | 	or	_var08, _var02
01ffc                 | LR__0018
01ffc                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01ffc     07 37 02 FB | 	rdlong	_var01, objptr
02000     90 0E 06 F1 | 	add	objptr, #144
02004     07 39 02 FB | 	rdlong	_var02, objptr
02008     90 0E 86 F1 | 	sub	objptr, #144
0200c     02 38 66 F0 | 	shl	_var02, #2
02010     3C 39 02 FD | 	qmul	_var02, arg02
02014     18 42 62 FD | 	getqx	_var07
02018     21 37 02 F1 | 	add	_var01, _var07
0201c     03 76 46 F0 | 	shr	arg01, #3
02020     3B 37 02 F1 | 	add	_var01, arg01
02024     1B 45 42 FC | 	wrbyte	_var08, _var01
02028                 | LR__0019
02028                 | _hng030rm_spin2_putpixel1_ret
02028     2D 00 64 FD | 	ret
0202c                 | 
0202c                 | ' 
0202c                 | ' 
0202c                 | ' pub putpixel2(x,y,c) |byte b
0202c                 | _hng030rm_spin2_putpixel2
0202c                 | ' 
0202c                 | ' 
0202c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0202c     00 36 06 F6 | 	mov	_var01, #0
02030     00 76 5E F2 | 	cmps	arg01, #0 wcz
02034     01 36 66 36 |  if_ae	neg	_var01, #1
02038     00 38 06 F6 | 	mov	_var02, #0
0203c     90 0E 06 F1 | 	add	objptr, #144
02040     07 3B 02 FB | 	rdlong	_var03, objptr
02044     04 3A 66 F0 | 	shl	_var03, #4
02048     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
0204c     01 38 66 C6 |  if_b	neg	_var02, #1
02050     1C 37 02 F5 | 	and	_var01, _var02
02054     00 3C 06 F6 | 	mov	_var04, #0
02058     00 78 5E F2 | 	cmps	arg02, #0 wcz
0205c     01 3C 66 36 |  if_ae	neg	_var04, #1
02060     1E 37 02 F5 | 	and	_var01, _var04
02064     00 3E 06 F6 | 	mov	_var05, #0
02068     04 0E 06 F1 | 	add	objptr, #4
0206c     07 41 02 FB | 	rdlong	_var06, objptr
02070     94 0E 86 F1 | 	sub	objptr, #148
02074     20 79 5A F2 | 	cmps	arg02, _var06 wcz
02078     01 3E 66 C6 |  if_b	neg	_var05, #1
0207c     1F 37 CA F7 | 	test	_var01, _var05 wz
02080     90 00 90 AD |  if_e	jmp	#LR__0020
02084                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02084     07 37 02 FB | 	rdlong	_var01, objptr
02088     90 0E 06 F1 | 	add	objptr, #144
0208c     07 39 02 FB | 	rdlong	_var02, objptr
02090     90 0E 86 F1 | 	sub	objptr, #144
02094     02 38 66 F0 | 	shl	_var02, #2
02098     3C 39 02 FD | 	qmul	_var02, arg02
0209c     18 42 62 FD | 	getqx	_var07
020a0     21 37 02 F1 | 	add	_var01, _var07
020a4     3B 3D 02 F6 | 	mov	_var04, arg01
020a8     02 3C 46 F0 | 	shr	_var04, #2
020ac     1E 37 02 F1 | 	add	_var01, _var04
020b0     1B 45 C2 FA | 	rdbyte	_var08, _var01
020b4                 | '     b:=b & !(%11<<((x//4)<<1))
020b4     3B 3B 52 F6 | 	abs	_var03, arg01 wc
020b8     03 3A 06 F5 | 	and	_var03, #3
020bc     1D 3B 62 C6 |  if_b	neg	_var03, _var03
020c0     01 3A 66 F0 | 	shl	_var03, #1
020c4     03 38 06 F6 | 	mov	_var02, #3
020c8     1D 39 62 F0 | 	shl	_var02, _var03
020cc     1C 45 22 F5 | 	andn	_var08, _var02
020d0                 | '     b:=b |(c<<((x//4)<<1))
020d0     3B 3B 52 F6 | 	abs	_var03, arg01 wc
020d4     03 3A 06 F5 | 	and	_var03, #3
020d8     1D 3B 62 C6 |  if_b	neg	_var03, _var03
020dc     01 3A 66 F0 | 	shl	_var03, #1
020e0     1D 7B 62 F0 | 	shl	arg03, _var03
020e4     3D 45 42 F5 | 	or	_var08, arg03
020e8                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
020e8     07 37 02 FB | 	rdlong	_var01, objptr
020ec     90 0E 06 F1 | 	add	objptr, #144
020f0     07 39 02 FB | 	rdlong	_var02, objptr
020f4     90 0E 86 F1 | 	sub	objptr, #144
020f8     02 38 66 F0 | 	shl	_var02, #2
020fc     3C 39 02 FD | 	qmul	_var02, arg02
02100     18 42 62 FD | 	getqx	_var07
02104     21 37 02 F1 | 	add	_var01, _var07
02108     02 76 46 F0 | 	shr	arg01, #2
0210c     3B 37 02 F1 | 	add	_var01, arg01
02110     1B 45 42 FC | 	wrbyte	_var08, _var01
02114                 | LR__0020
02114                 | _hng030rm_spin2_putpixel2_ret
02114     2D 00 64 FD | 	ret
02118                 | 
02118                 | ' 
02118                 | ' 
02118                 | ' pub putpixel4(x,y,c) |byte b
02118                 | _hng030rm_spin2_putpixel4
02118                 | ' 
02118                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02118     00 36 06 F6 | 	mov	_var01, #0
0211c     00 76 5E F2 | 	cmps	arg01, #0 wcz
02120     01 36 66 36 |  if_ae	neg	_var01, #1
02124     00 38 06 F6 | 	mov	_var02, #0
02128     90 0E 06 F1 | 	add	objptr, #144
0212c     07 3B 02 FB | 	rdlong	_var03, objptr
02130     04 3A 66 F0 | 	shl	_var03, #4
02134     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
02138     01 38 66 C6 |  if_b	neg	_var02, #1
0213c     1C 37 02 F5 | 	and	_var01, _var02
02140     00 3C 06 F6 | 	mov	_var04, #0
02144     00 78 5E F2 | 	cmps	arg02, #0 wcz
02148     01 3C 66 36 |  if_ae	neg	_var04, #1
0214c     1E 37 02 F5 | 	and	_var01, _var04
02150     00 3E 06 F6 | 	mov	_var05, #0
02154     04 0E 06 F1 | 	add	objptr, #4
02158     07 41 02 FB | 	rdlong	_var06, objptr
0215c     94 0E 86 F1 | 	sub	objptr, #148
02160     20 79 5A F2 | 	cmps	arg02, _var06 wcz
02164     01 3E 66 C6 |  if_b	neg	_var05, #1
02168     1F 37 CA F7 | 	test	_var01, _var05 wz
0216c     90 00 90 AD |  if_e	jmp	#LR__0021
02170                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02170     07 37 02 FB | 	rdlong	_var01, objptr
02174     90 0E 06 F1 | 	add	objptr, #144
02178     07 39 02 FB | 	rdlong	_var02, objptr
0217c     90 0E 86 F1 | 	sub	objptr, #144
02180     02 38 66 F0 | 	shl	_var02, #2
02184     3C 39 02 FD | 	qmul	_var02, arg02
02188     18 42 62 FD | 	getqx	_var07
0218c     21 37 02 F1 | 	add	_var01, _var07
02190     3B 3D 02 F6 | 	mov	_var04, arg01
02194     01 3C 46 F0 | 	shr	_var04, #1
02198     1E 37 02 F1 | 	add	_var01, _var04
0219c     1B 45 C2 FA | 	rdbyte	_var08, _var01
021a0                 | '     b:=b & !(%1111<<((x//2)<<2))
021a0     3B 3B 52 F6 | 	abs	_var03, arg01 wc
021a4     01 3A 06 F5 | 	and	_var03, #1
021a8     1D 3B 62 C6 |  if_b	neg	_var03, _var03
021ac     02 3A 66 F0 | 	shl	_var03, #2
021b0     0F 38 06 F6 | 	mov	_var02, #15
021b4     1D 39 62 F0 | 	shl	_var02, _var03
021b8     1C 45 22 F5 | 	andn	_var08, _var02
021bc                 | '     b:=b |(c<<((x//2)<<2))
021bc     3B 3B 52 F6 | 	abs	_var03, arg01 wc
021c0     01 3A 06 F5 | 	and	_var03, #1
021c4     1D 3B 62 C6 |  if_b	neg	_var03, _var03
021c8     02 3A 66 F0 | 	shl	_var03, #2
021cc     1D 7B 62 F0 | 	shl	arg03, _var03
021d0     3D 45 42 F5 | 	or	_var08, arg03
021d4                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021d4     07 37 02 FB | 	rdlong	_var01, objptr
021d8     90 0E 06 F1 | 	add	objptr, #144
021dc     07 39 02 FB | 	rdlong	_var02, objptr
021e0     90 0E 86 F1 | 	sub	objptr, #144
021e4     02 38 66 F0 | 	shl	_var02, #2
021e8     3C 39 02 FD | 	qmul	_var02, arg02
021ec     18 42 62 FD | 	getqx	_var07
021f0     21 37 02 F1 | 	add	_var01, _var07
021f4     01 76 46 F0 | 	shr	arg01, #1
021f8     3B 37 02 F1 | 	add	_var01, arg01
021fc     1B 45 42 FC | 	wrbyte	_var08, _var01
02200                 | LR__0021
02200                 | _hng030rm_spin2_putpixel4_ret
02200     2D 00 64 FD | 	ret
02204                 | 
02204                 | ' 
02204                 | ' 
02204                 | ' pub putpixel8(x,y,c)
02204                 | _hng030rm_spin2_putpixel8
02204                 | ' 
02204                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02204     00 36 06 F6 | 	mov	_var01, #0
02208     00 76 5E F2 | 	cmps	arg01, #0 wcz
0220c     01 36 66 36 |  if_ae	neg	_var01, #1
02210     00 38 06 F6 | 	mov	_var02, #0
02214     90 0E 06 F1 | 	add	objptr, #144
02218     07 3B 02 FB | 	rdlong	_var03, objptr
0221c     02 3A 66 F0 | 	shl	_var03, #2
02220     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
02224     01 38 66 C6 |  if_b	neg	_var02, #1
02228     1C 37 02 F5 | 	and	_var01, _var02
0222c     00 3C 06 F6 | 	mov	_var04, #0
02230     00 78 5E F2 | 	cmps	arg02, #0 wcz
02234     01 3C 66 36 |  if_ae	neg	_var04, #1
02238     1E 37 02 F5 | 	and	_var01, _var04
0223c     00 3E 06 F6 | 	mov	_var05, #0
02240     04 0E 06 F1 | 	add	objptr, #4
02244     07 41 02 FB | 	rdlong	_var06, objptr
02248     94 0E 86 F1 | 	sub	objptr, #148
0224c     20 79 5A F2 | 	cmps	arg02, _var06 wcz
02250     01 3E 66 C6 |  if_b	neg	_var05, #1
02254     1F 37 CA F7 | 	test	_var01, _var05 wz
02258     28 00 90 AD |  if_e	jmp	#LR__0022
0225c                 | '     byte[buf_ptr+4*cpl*y+x]:=c
0225c     07 37 02 FB | 	rdlong	_var01, objptr
02260     90 0E 06 F1 | 	add	objptr, #144
02264     07 39 02 FB | 	rdlong	_var02, objptr
02268     90 0E 86 F1 | 	sub	objptr, #144
0226c     02 38 66 F0 | 	shl	_var02, #2
02270     3C 39 02 FD | 	qmul	_var02, arg02
02274     18 42 62 FD | 	getqx	_var07
02278     21 37 02 F1 | 	add	_var01, _var07
0227c     3B 37 02 F1 | 	add	_var01, arg01
02280     1B 7B 42 FC | 	wrbyte	arg03, _var01
02284                 | LR__0022
02284                 | _hng030rm_spin2_putpixel8_ret
02284     2D 00 64 FD | 	ret
02288                 | 
02288                 | ' 
02288                 | ' '*************************************************************************
02288                 | ' '                                                                        *
02288                 | ' '  VBlank functions                                                      *
02288                 | ' '                                                                        *
02288                 | ' '*************************************************************************
02288                 | ' 
02288                 | ' pub waitvbl(amount) | i
02288                 | _hng030rm_spin2_waitvbl
02288     04 5A 05 F6 | 	mov	COUNT_, #4
0228c     B0 00 A0 FD | 	call	#pushregs_
02290     3B 85 02 F6 | 	mov	local01, arg01
02294                 | ' 
02294                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02294                 | ' 
02294                 | ' repeat i from 1 to amount
02294     01 86 06 F6 | 	mov	local02, #1
02298     01 84 5E F2 | 	cmps	local01, #1 wcz
0229c     01 88 06 16 |  if_a	mov	local03, #1
022a0     01 88 66 E6 |  if_be	neg	local03, #1
022a4     44 85 02 F1 | 	add	local01, local03
022a8                 | LR__0023
022a8                 | '   repeat until vblank==0
022a8                 | LR__0024
022a8     40 0E 06 F1 | 	add	objptr, #64
022ac     07 8B 0A FB | 	rdlong	local04, objptr wz
022b0     40 0E 86 F1 | 	sub	objptr, #64
022b4     0C 00 90 AD |  if_e	jmp	#LR__0025
022b8                 | '     waitus(100)
022b8     64 76 06 F6 | 	mov	arg01, #100
022bc     6C 44 B0 FD | 	call	#__system___waitus
022c0     E4 FF 9F FD | 	jmp	#LR__0024
022c4                 | LR__0025
022c4                 | '   repeat until vblank==1
022c4                 | LR__0026
022c4     40 0E 06 F1 | 	add	objptr, #64
022c8     07 8B 02 FB | 	rdlong	local04, objptr
022cc     40 0E 86 F1 | 	sub	objptr, #64
022d0     01 8A 0E F2 | 	cmp	local04, #1 wz
022d4     0C 00 90 AD |  if_e	jmp	#LR__0027
022d8                 | '     waitus(100)
022d8     64 76 06 F6 | 	mov	arg01, #100
022dc     4C 44 B0 FD | 	call	#__system___waitus
022e0     E0 FF 9F FD | 	jmp	#LR__0026
022e4                 | LR__0027
022e4     44 87 02 F1 | 	add	local02, local03
022e8     42 87 0A F2 | 	cmp	local02, local01 wz
022ec     B8 FF 9F 5D |  if_ne	jmp	#LR__0023
022f0     AF F0 03 F6 | 	mov	ptra, fp
022f4     BF 00 A0 FD | 	call	#popregs_
022f8                 | _hng030rm_spin2_waitvbl_ret
022f8     2D 00 64 FD | 	ret
022fc                 | 
022fc                 | ' 
022fc                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
022fc                 | ' 
022fc                 | ' pub setbordercolor(r,g,b) | color
022fc                 | _hng030rm_spin2_setbordercolor
022fc                 | ' 
022fc                 | ' color:=r<<24+g<<16+b<<8
022fc     18 76 66 F0 | 	shl	arg01, #24
02300     10 78 66 F0 | 	shl	arg02, #16
02304     3C 77 02 F1 | 	add	arg01, arg02
02308     08 7A 66 F0 | 	shl	arg03, #8
0230c     3D 77 02 F1 | 	add	arg01, arg03
02310                 | ' bordercolor:=color
02310     2C 0E 06 F1 | 	add	objptr, #44
02314     07 77 62 FC | 	wrlong	arg01, objptr
02318     2C 0E 86 F1 | 	sub	objptr, #44
0231c                 | _hng030rm_spin2_setbordercolor_ret
0231c     2D 00 64 FD | 	ret
02320                 | 
02320                 | ' 
02320                 | ' 
02320                 | ' '*************************************************************************
02320                 | ' '                                                                        *
02320                 | ' '  Text functions                                                        *
02320                 | ' '                                                                        *
02320                 | ' '*************************************************************************
02320                 | ' 
02320                 | ' ''---------- Clear the screen, set its foreground/background color
02320                 | ' 
02320                 | ' pub cls(fc,bc)   :c
02320                 | _hng030rm_spin2_cls
02320     06 5A 05 F6 | 	mov	COUNT_, #6
02324     B0 00 A0 FD | 	call	#pushregs_
02328     3B 85 02 F6 | 	mov	local01, arg01
0232c     3C 87 02 F6 | 	mov	local02, arg02
02330                 | ' 
02330                 | ' if (graphmode<512)
02330     C4 0E 06 F1 | 	add	objptr, #196
02334     07 89 02 FB | 	rdlong	local03, objptr
02338     C4 0E 86 F1 | 	sub	objptr, #196
0233c     01 00 00 FF 
02340     00 88 5E F2 | 	cmps	local03, ##512 wcz
02344     34 00 90 3D |  if_ae	jmp	#LR__0028
02348                 | '   c:=fc<<24+bc<<16+$20
02348     42 8B 02 F6 | 	mov	local04, local01
0234c     18 8A 66 F0 | 	shl	local04, #24
02350     43 8D 02 F6 | 	mov	local05, local02
02354     10 8C 66 F0 | 	shl	local05, #16
02358     46 8B 02 F1 | 	add	local04, local05
0235c     20 8A 06 F1 | 	add	local04, #32
02360                 | '   longfill(buf_ptr,c,buflen)
02360     07 77 02 FB | 	rdlong	arg01, objptr
02364     30 0E 06 F1 | 	add	objptr, #48
02368     07 7B 02 FB | 	rdlong	arg03, objptr
0236c     30 0E 86 F1 | 	sub	objptr, #48
02370     45 79 02 F6 | 	mov	arg02, local04
02374     A8 00 A0 FD | 	call	#\builtin_longfill_
02378                 | ' else
02378     AC 00 90 FD | 	jmp	#LR__0034
0237c                 | LR__0028
0237c                 | '   if (graphmode & 48) ==48
0237c     C4 0E 06 F1 | 	add	objptr, #196
02380     07 89 02 FB | 	rdlong	local03, objptr
02384     C4 0E 86 F1 | 	sub	objptr, #196
02388     30 88 06 F5 | 	and	local03, #48
0238c     30 88 0E F2 | 	cmp	local03, #48 wz
02390                 | '     c:=bc
02390     43 8B 02 A6 |  if_e	mov	local04, local02
02394     74 00 90 AD |  if_e	jmp	#LR__0033
02398                 | '   elseif (graphmode & 48) ==32
02398     C4 0E 06 F1 | 	add	objptr, #196
0239c     07 89 02 FB | 	rdlong	local03, objptr
023a0     C4 0E 86 F1 | 	sub	objptr, #196
023a4     30 88 06 F5 | 	and	local03, #48
023a8     20 88 0E F2 | 	cmp	local03, #32 wz
023ac     10 00 90 5D |  if_ne	jmp	#LR__0029
023b0                 | '     c:=bc<<4+bc
023b0     43 8B 02 F6 | 	mov	local04, local02
023b4     04 8A 66 F0 | 	shl	local04, #4
023b8     43 8B 02 F1 | 	add	local04, local02
023bc     4C 00 90 FD | 	jmp	#LR__0032
023c0                 | LR__0029
023c0                 | '   elseif (graphmode & 48) ==16
023c0     C4 0E 06 F1 | 	add	objptr, #196
023c4     07 89 02 FB | 	rdlong	local03, objptr
023c8     C4 0E 86 F1 | 	sub	objptr, #196
023cc     30 88 06 F5 | 	and	local03, #48
023d0     10 88 0E F2 | 	cmp	local03, #16 wz
023d4     28 00 90 5D |  if_ne	jmp	#LR__0030
023d8                 | '     c:=bc<<6+bc<<4+bc<<2+bc
023d8     43 8B 02 F6 | 	mov	local04, local02
023dc     06 8A 66 F0 | 	shl	local04, #6
023e0     43 8D 02 F6 | 	mov	local05, local02
023e4     04 8C 66 F0 | 	shl	local05, #4
023e8     46 8B 02 F1 | 	add	local04, local05
023ec     43 8F 02 F6 | 	mov	local06, local02
023f0     02 8E 66 F0 | 	shl	local06, #2
023f4     47 8B 02 F1 | 	add	local04, local06
023f8     43 8B 02 F1 | 	add	local04, local02
023fc                 | '   else
023fc     0C 00 90 FD | 	jmp	#LR__0031
02400                 | LR__0030
02400                 | '     if bc==1
02400     01 86 0E F2 | 	cmp	local02, #1 wz
02404                 | '       c:=255
02404     FF 8A 06 A6 |  if_e	mov	local04, #255
02408                 | '     else
02408                 | '       c:=0
02408     00 8A 06 56 |  if_ne	mov	local04, #0
0240c                 | LR__0031
0240c                 | LR__0032
0240c                 | LR__0033
0240c                 | '   bytefill(buf_ptr,c,buflen*4)
0240c     07 77 02 FB | 	rdlong	arg01, objptr
02410     30 0E 06 F1 | 	add	objptr, #48
02414     07 7B 02 FB | 	rdlong	arg03, objptr
02418     30 0E 86 F1 | 	sub	objptr, #48
0241c     02 7A 66 F0 | 	shl	arg03, #2
02420     45 79 02 F6 | 	mov	arg02, local04
02424     A0 00 A0 FD | 	call	#\builtin_bytefill_
02428                 | LR__0034
02428                 | ' setwritecolors(fc,bc)
02428                 | ' 
02428                 | ' 
02428                 | ' write_color:=ff
02428     38 0E 06 F1 | 	add	objptr, #56
0242c     07 85 62 FC | 	wrlong	local01, objptr
02430                 | ' write_background:=bb
02430     04 0E 06 F1 | 	add	objptr, #4
02434     07 87 62 FC | 	wrlong	local02, objptr
02438                 | ' cursor_x:=0
02438     08 0E 86 F1 | 	sub	objptr, #8
0243c     07 01 48 FC | 	wrbyte	#0, objptr
02440                 | ' cursor_y:=0
02440     01 0E 06 F1 | 	add	objptr, #1
02444     07 01 48 FC | 	wrbyte	#0, objptr
02448     35 0E 86 F1 | 	sub	objptr, #53
0244c     45 31 02 F6 | 	mov	result1, local04
02450     AF F0 03 F6 | 	mov	ptra, fp
02454     BF 00 A0 FD | 	call	#popregs_
02458                 | _hng030rm_spin2_cls_ret
02458     2D 00 64 FD | 	ret
0245c                 | 
0245c                 | ' 
0245c                 | ' ''--------- Output a string at position x,y without changing colors
0245c                 | ' 
0245c                 | ' pub outtextxy(x,y,text) | iii
0245c                 | _hng030rm_spin2_outtextxy
0245c     0F 5A 05 F6 | 	mov	COUNT_, #15
02460     B0 00 A0 FD | 	call	#pushregs_
02464     3B 85 02 F6 | 	mov	local01, arg01
02468                 | ' 
02468                 | ' repeat iii from 0 to strsize(text)-1
02468     00 86 06 F6 | 	mov	local02, #0
0246c     3D 77 02 F6 | 	mov	arg01, arg03
02470     00 88 06 F6 | 	mov	local03, #0
02474     98 DB 9F FE | 	loc	pa,	#(@LR__0036-@LR__0035)
02478     93 00 A0 FD | 	call	#FCACHE_LOAD_
0247c                 | LR__0035
0247c     3B 8B CA FA | 	rdbyte	local04, arg01 wz
02480     01 88 06 51 |  if_ne	add	local03, #1
02484     01 76 06 51 |  if_ne	add	arg01, #1
02488     F0 FF 9F 5D |  if_ne	jmp	#LR__0035
0248c                 | LR__0036
0248c     44 31 02 F6 | 	mov	result1, local03
02490     18 8D 02 F6 | 	mov	local05, result1
02494     01 8C 86 F1 | 	sub	local05, #1
02498     00 8C 5E F2 | 	cmps	local05, #0 wcz
0249c     01 8E 06 16 |  if_a	mov	local06, #1
024a0     01 8E 66 E6 |  if_be	neg	local06, #1
024a4     47 8D 02 F1 | 	add	local05, local06
024a8     CC DB 9F FE | 	loc	pa,	#(@LR__0038-@LR__0037)
024ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
024b0                 | LR__0037
024b0                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
024b0     07 91 02 FB | 	rdlong	local07, objptr
024b4     90 0E 06 F1 | 	add	objptr, #144
024b8     07 93 02 FB | 	rdlong	local08, objptr
024bc     90 0E 86 F1 | 	sub	objptr, #144
024c0     3C 93 02 FD | 	qmul	local08, arg02
024c4     18 94 62 FD | 	getqx	local09
024c8     42 95 02 F1 | 	add	local09, local01
024cc     43 95 02 F1 | 	add	local09, local02
024d0     02 94 66 F0 | 	shl	local09, #2
024d4     4A 91 02 F1 | 	add	local07, local09
024d8     48 97 02 FB | 	rdlong	local10, local07
024dc     FF 96 26 F5 | 	andn	local10, #255
024e0     3D 99 02 F6 | 	mov	local11, arg03
024e4     43 99 02 F1 | 	add	local11, local02
024e8     4C 9B C2 FA | 	rdbyte	local12, local11
024ec     4D 97 42 F5 | 	or	local10, local12
024f0     07 9D 02 FB | 	rdlong	local13, objptr
024f4     90 0E 06 F1 | 	add	objptr, #144
024f8     07 9F 02 FB | 	rdlong	local14, objptr
024fc     90 0E 86 F1 | 	sub	objptr, #144
02500     3C 9F 02 FD | 	qmul	local14, arg02
02504     18 A0 62 FD | 	getqx	local15
02508     42 A1 02 F1 | 	add	local15, local01
0250c     43 A1 02 F1 | 	add	local15, local02
02510     02 A0 66 F0 | 	shl	local15, #2
02514     50 9D 02 F1 | 	add	local13, local15
02518     4E 97 62 FC | 	wrlong	local10, local13
0251c     47 87 02 F1 | 	add	local02, local06
02520     46 87 0A F2 | 	cmp	local02, local05 wz
02524     88 FF 9F 5D |  if_ne	jmp	#LR__0037
02528                 | LR__0038
02528     AF F0 03 F6 | 	mov	ptra, fp
0252c     BF 00 A0 FD | 	call	#popregs_
02530                 | _hng030rm_spin2_outtextxy_ret
02530     2D 00 64 FD | 	ret
02534                 | 
02534                 | ' 
02534                 | ' ''---------- Output a char at the cursor position, move the cursor
02534                 | ' 
02534                 | ' pub putchar(achar) | c,x,y
02534                 | _hng030rm_spin2_putchar
02534     0F 5A 05 F6 | 	mov	COUNT_, #15
02538     B0 00 A0 FD | 	call	#pushregs_
0253c     3B 85 02 F6 | 	mov	local01, arg01
02540                 | ' 
02540                 | ' if achar==10
02540     0A 84 0E F2 | 	cmp	local01, #10 wz
02544     08 00 90 5D |  if_ne	jmp	#LR__0039
02548                 | '   crlf()
02548     34 04 B0 FD | 	call	#_hng030rm_spin2_crlf
0254c                 | ' else  
0254c     64 01 90 FD | 	jmp	#LR__0042
02550                 | LR__0039
02550                 | '   x:=cursor_x
02550     34 0E 06 F1 | 	add	objptr, #52
02554     07 87 C2 FA | 	rdbyte	local02, objptr
02558                 | '   y:=cursor_y
02558     01 0E 06 F1 | 	add	objptr, #1
0255c     07 89 C2 FA | 	rdbyte	local03, objptr
02560                 | '   c:=write_color<<24+write_background<<16
02560     03 0E 06 F1 | 	add	objptr, #3
02564     07 8B 02 FB | 	rdlong	local04, objptr
02568     18 8A 66 F0 | 	shl	local04, #24
0256c     04 0E 06 F1 | 	add	objptr, #4
02570     07 8D 02 FB | 	rdlong	local05, objptr
02574     3C 0E 86 F1 | 	sub	objptr, #60
02578     10 8C 66 F0 | 	shl	local05, #16
0257c     46 8B 02 F1 | 	add	local04, local05
02580                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02580     07 8F 02 FB | 	rdlong	local06, objptr
02584     90 0E 06 F1 | 	add	objptr, #144
02588     07 91 02 FB | 	rdlong	local07, objptr
0258c     90 0E 86 F1 | 	sub	objptr, #144
02590     44 91 02 FD | 	qmul	local07, local03
02594     18 92 62 FD | 	getqx	local08
02598     43 93 02 F1 | 	add	local08, local02
0259c     02 92 66 F0 | 	shl	local08, #2
025a0     49 8F 02 F1 | 	add	local06, local08
025a4     47 95 02 FB | 	rdlong	local09, local06
025a8     7F 00 00 FF 
025ac     FF 95 06 F5 | 	and	local09, ##65535
025b0     45 95 42 F5 | 	or	local09, local04
025b4     07 97 02 FB | 	rdlong	local10, objptr
025b8     90 0E 06 F1 | 	add	objptr, #144
025bc     07 99 02 FB | 	rdlong	local11, objptr
025c0     90 0E 86 F1 | 	sub	objptr, #144
025c4     44 99 02 FD | 	qmul	local11, local03
025c8     18 9A 62 FD | 	getqx	local12
025cc     43 9B 02 F1 | 	add	local12, local02
025d0     02 9A 66 F0 | 	shl	local12, #2
025d4     4D 97 02 F1 | 	add	local10, local12
025d8     4B 95 62 FC | 	wrlong	local09, local10
025dc                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
025dc     07 8F 02 FB | 	rdlong	local06, objptr
025e0     90 0E 06 F1 | 	add	objptr, #144
025e4     07 91 02 FB | 	rdlong	local07, objptr
025e8     90 0E 86 F1 | 	sub	objptr, #144
025ec     44 91 02 FD | 	qmul	local07, local03
025f0     18 92 62 FD | 	getqx	local08
025f4     43 93 02 F1 | 	add	local08, local02
025f8     02 92 66 F0 | 	shl	local08, #2
025fc     49 8F 02 F1 | 	add	local06, local08
02600     47 95 02 FB | 	rdlong	local09, local06
02604     FF 94 26 F5 | 	andn	local09, #255
02608     42 97 02 F6 | 	mov	local10, local01
0260c     FF 96 06 F5 | 	and	local10, #255
02610     4B 95 42 F5 | 	or	local09, local10
02614     07 9D 02 FB | 	rdlong	local13, objptr
02618     90 0E 06 F1 | 	add	objptr, #144
0261c     07 9F 02 FB | 	rdlong	local14, objptr
02620     44 9F 02 FD | 	qmul	local14, local03
02624     18 A0 62 FD | 	getqx	local15
02628     43 A1 02 F1 | 	add	local15, local02
0262c     02 A0 66 F0 | 	shl	local15, #2
02630     50 9D 02 F1 | 	add	local13, local15
02634     4E 95 62 FC | 	wrlong	local09, local13
02638                 | '   cursor_x+=1
02638     5C 0E 86 F1 | 	sub	objptr, #92
0263c     07 95 C2 FA | 	rdbyte	local09, objptr
02640     01 94 06 F1 | 	add	local09, #1
02644     07 95 42 FC | 	wrbyte	local09, objptr
02648                 | '   if cursor_x==cpl
02648     07 95 C2 FA | 	rdbyte	local09, objptr
0264c     5C 0E 06 F1 | 	add	objptr, #92
02650     07 8D 02 FB | 	rdlong	local05, objptr
02654     90 0E 86 F1 | 	sub	objptr, #144
02658     46 95 0A F2 | 	cmp	local09, local05 wz
0265c     54 00 90 5D |  if_ne	jmp	#LR__0041
02660                 | '     cursor_x:=0
02660     34 0E 06 F1 | 	add	objptr, #52
02664     07 01 48 FC | 	wrbyte	#0, objptr
02668                 | '     cursor_y+=1
02668     01 0E 06 F1 | 	add	objptr, #1
0266c     07 95 C2 FA | 	rdbyte	local09, objptr
02670     01 94 06 F1 | 	add	local09, #1
02674     07 95 42 FC | 	wrbyte	local09, objptr
02678                 | '     if cursor_y>lines-1
02678     5F 0E 06 F1 | 	add	objptr, #95
0267c     07 95 02 FB | 	rdlong	local09, objptr
02680     01 94 86 F1 | 	sub	local09, #1
02684     5F 0E 86 F1 | 	sub	objptr, #95
02688     07 8D C2 FA | 	rdbyte	local05, objptr
0268c     35 0E 86 F1 | 	sub	objptr, #53
02690     4A 8D 5A F2 | 	cmps	local05, local09 wcz
02694     1C 00 90 ED |  if_be	jmp	#LR__0040
02698                 | '       scrollup()
02698     10 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
0269c                 | '       cursor_y:=lines-1
0269c     94 0E 06 F1 | 	add	objptr, #148
026a0     07 95 02 FB | 	rdlong	local09, objptr
026a4     01 94 86 F1 | 	sub	local09, #1
026a8     5F 0E 86 F1 | 	sub	objptr, #95
026ac     07 95 42 FC | 	wrbyte	local09, objptr
026b0     35 0E 86 F1 | 	sub	objptr, #53
026b4                 | LR__0040
026b4                 | LR__0041
026b4                 | LR__0042
026b4     AF F0 03 F6 | 	mov	ptra, fp
026b8     BF 00 A0 FD | 	call	#popregs_
026bc                 | _hng030rm_spin2_putchar_ret
026bc     2D 00 64 FD | 	ret
026c0                 | 
026c0                 | ' 
026c0                 | ' ''--------- Output a string at the cursor position, move the cursor
026c0                 | ' 
026c0                 | ' pub write(text) | iii,c,ncx,ncy
026c0                 | _hng030rm_spin2_write
026c0     17 5A 05 F6 | 	mov	COUNT_, #23
026c4     B0 00 A0 FD | 	call	#pushregs_
026c8     3B 85 02 F6 | 	mov	local01, arg01
026cc                 | ' 
026cc                 | ' c:=write_color<<24+write_background<<16
026cc     38 0E 06 F1 | 	add	objptr, #56
026d0     07 87 02 FB | 	rdlong	local02, objptr
026d4     18 86 66 F0 | 	shl	local02, #24
026d8     04 0E 06 F1 | 	add	objptr, #4
026dc     07 89 02 FB | 	rdlong	local03, objptr
026e0     10 88 66 F0 | 	shl	local03, #16
026e4     44 87 02 F1 | 	add	local02, local03
026e8                 | ' 'debug(uhex_long(write_color))
026e8                 | ' ncy:=cursor_y
026e8     07 0E 86 F1 | 	sub	objptr, #7
026ec     07 8B C2 FA | 	rdbyte	local04, objptr
026f0                 | ' ncx:=cursor_x+strsize(text)
026f0     01 0E 86 F1 | 	sub	objptr, #1
026f4     07 8D C2 FA | 	rdbyte	local05, objptr
026f8     34 0E 86 F1 | 	sub	objptr, #52
026fc     42 77 02 F6 | 	mov	arg01, local01
02700     00 8E 06 F6 | 	mov	local06, #0
02704     08 D9 9F FE | 	loc	pa,	#(@LR__0044-@LR__0043)
02708     93 00 A0 FD | 	call	#FCACHE_LOAD_
0270c                 | LR__0043
0270c     3B 91 CA FA | 	rdbyte	local07, arg01 wz
02710     01 8E 06 51 |  if_ne	add	local06, #1
02714     01 76 06 51 |  if_ne	add	arg01, #1
02718     F0 FF 9F 5D |  if_ne	jmp	#LR__0043
0271c                 | LR__0044
0271c     47 31 02 F6 | 	mov	result1, local06
02720     47 8D 02 F1 | 	add	local05, local06
02724     46 93 02 F6 | 	mov	local08, local05
02728     04 D9 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
0272c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02730                 | ' repeat while ncx>cpl-1
02730                 | LR__0045
02730     90 0E 06 F1 | 	add	objptr, #144
02734     07 8D 02 FB | 	rdlong	local05, objptr
02738     90 0E 86 F1 | 	sub	objptr, #144
0273c     01 8C 86 F1 | 	sub	local05, #1
02740     46 93 5A F2 | 	cmps	local08, local05 wcz
02744     18 00 90 ED |  if_be	jmp	#LR__0047
02748                 | '   ncx-=cpl
02748     90 0E 06 F1 | 	add	objptr, #144
0274c     07 95 02 FB | 	rdlong	local09, objptr
02750     90 0E 86 F1 | 	sub	objptr, #144
02754     4A 93 82 F1 | 	sub	local08, local09
02758                 | '   ncy+=1
02758     01 8A 06 F1 | 	add	local04, #1
0275c     D0 FF 9F FD | 	jmp	#LR__0045
02760                 | LR__0046
02760                 | LR__0047
02760                 | ' repeat while ncy>lines-1
02760                 | LR__0048
02760     94 0E 06 F1 | 	add	objptr, #148
02764     07 8D 02 FB | 	rdlong	local05, objptr
02768     94 0E 86 F1 | 	sub	objptr, #148
0276c     01 8C 86 F1 | 	sub	local05, #1
02770     46 8B 5A F2 | 	cmps	local04, local05 wcz
02774     20 00 90 ED |  if_be	jmp	#LR__0049
02778                 | '   ncy-=1
02778     01 8A 86 F1 | 	sub	local04, #1
0277c                 | '   scrollup()
0277c     2C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02780                 | '   cursor_y-=1
02780     35 0E 06 F1 | 	add	objptr, #53
02784     07 8D C2 FA | 	rdbyte	local05, objptr
02788     01 8C 86 F1 | 	sub	local05, #1
0278c     07 8D 42 FC | 	wrbyte	local05, objptr
02790     35 0E 86 F1 | 	sub	objptr, #53
02794     C8 FF 9F FD | 	jmp	#LR__0048
02798                 | LR__0049
02798                 | ' 
02798                 | ' repeat iii from 0 to strsize(text)-1
02798     00 96 06 F6 | 	mov	local10, #0
0279c     42 77 02 F6 | 	mov	arg01, local01
027a0     00 8E 06 F6 | 	mov	local06, #0
027a4     68 D8 9F FE | 	loc	pa,	#(@LR__0051-@LR__0050)
027a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
027ac                 | LR__0050
027ac     3B 91 CA FA | 	rdbyte	local07, arg01 wz
027b0     01 8E 06 51 |  if_ne	add	local06, #1
027b4     01 76 06 51 |  if_ne	add	arg01, #1
027b8     F0 FF 9F 5D |  if_ne	jmp	#LR__0050
027bc                 | LR__0051
027bc     47 31 02 F6 | 	mov	result1, local06
027c0     18 99 02 F6 | 	mov	local11, result1
027c4     01 98 86 F1 | 	sub	local11, #1
027c8     00 98 5E F2 | 	cmps	local11, #0 wcz
027cc     01 9A 06 16 |  if_a	mov	local12, #1
027d0     01 9A 66 E6 |  if_be	neg	local12, #1
027d4     4D 99 02 F1 | 	add	local11, local12
027d8     B4 D8 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
027dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
027e0                 | LR__0052
027e0                 | ' 
027e0                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
027e0     07 9D 02 FB | 	rdlong	local13, objptr
027e4     90 0E 06 F1 | 	add	objptr, #144
027e8     07 9F 02 FB | 	rdlong	local14, objptr
027ec     5B 0E 86 F1 | 	sub	objptr, #91
027f0     07 A1 C2 FA | 	rdbyte	local15, objptr
027f4     50 9F 02 FD | 	qmul	local14, local15
027f8     18 A2 62 FD | 	getqx	local16
027fc     01 0E 86 F1 | 	sub	objptr, #1
02800     07 A5 C2 FA | 	rdbyte	local17, objptr
02804     34 0E 86 F1 | 	sub	objptr, #52
02808     52 A3 02 F1 | 	add	local16, local17
0280c     4B A3 02 F1 | 	add	local16, local10
02810     02 A2 66 F0 | 	shl	local16, #2
02814     51 9D 02 F1 | 	add	local13, local16
02818     4E A7 02 FB | 	rdlong	local18, local13
0281c     7F 00 00 FF 
02820     FF A7 06 F5 | 	and	local18, ##65535
02824     43 A7 42 F5 | 	or	local18, local02
02828     07 A9 02 FB | 	rdlong	local19, objptr
0282c     90 0E 06 F1 | 	add	objptr, #144
02830     07 AB 02 FB | 	rdlong	local20, objptr
02834     5B 0E 86 F1 | 	sub	objptr, #91
02838     07 AD C2 FA | 	rdbyte	local21, objptr
0283c     56 AB 02 FD | 	qmul	local20, local21
02840     18 AE 62 FD | 	getqx	local22
02844     01 0E 86 F1 | 	sub	objptr, #1
02848     07 B1 C2 FA | 	rdbyte	local23, objptr
0284c     34 0E 86 F1 | 	sub	objptr, #52
02850     58 AF 02 F1 | 	add	local22, local23
02854     4B AF 02 F1 | 	add	local22, local10
02858     02 AE 66 F0 | 	shl	local22, #2
0285c     57 A9 02 F1 | 	add	local19, local22
02860     54 A7 62 FC | 	wrlong	local18, local19
02864     4D 97 02 F1 | 	add	local10, local12
02868     4C 97 0A F2 | 	cmp	local10, local11 wz
0286c     70 FF 9F 5D |  if_ne	jmp	#LR__0052
02870                 | LR__0053
02870                 | ' 
02870                 | ' outtextxy(cursor_x,cursor_y,text)
02870     34 0E 06 F1 | 	add	objptr, #52
02874     07 77 C2 FA | 	rdbyte	arg01, objptr
02878     01 0E 06 F1 | 	add	objptr, #1
0287c     07 79 C2 FA | 	rdbyte	arg02, objptr
02880     35 0E 86 F1 | 	sub	objptr, #53
02884     42 7B 02 F6 | 	mov	arg03, local01
02888     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
0288c                 | ' 
0288c                 | ' cursor_x:=ncx
0288c     34 0E 06 F1 | 	add	objptr, #52
02890     07 93 42 FC | 	wrbyte	local08, objptr
02894                 | ' cursor_y:=ncy
02894     01 0E 06 F1 | 	add	objptr, #1
02898     07 8B 42 FC | 	wrbyte	local04, objptr
0289c     35 0E 86 F1 | 	sub	objptr, #53
028a0     AF F0 03 F6 | 	mov	ptra, fp
028a4     BF 00 A0 FD | 	call	#popregs_
028a8                 | _hng030rm_spin2_write_ret
028a8     2D 00 64 FD | 	ret
028ac                 | 
028ac                 | ' 
028ac                 | ' ''-----------  Scroll the screen one line up
028ac                 | ' 
028ac                 | ' pub scrollup() | i
028ac                 | _hng030rm_spin2_scrollup
028ac     0C 5A 05 F6 | 	mov	COUNT_, #12
028b0     B0 00 A0 FD | 	call	#pushregs_
028b4                 | ' 
028b4                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
028b4     07 77 02 FB | 	rdlong	arg01, objptr
028b8     3B 79 02 F6 | 	mov	arg02, arg01
028bc     90 0E 06 F1 | 	add	objptr, #144
028c0     07 85 02 FB | 	rdlong	local01, objptr
028c4     02 84 66 F0 | 	shl	local01, #2
028c8     42 79 02 F1 | 	add	arg02, local01
028cc     60 0E 86 F1 | 	sub	objptr, #96
028d0     07 7B 02 FB | 	rdlong	arg03, objptr
028d4     60 0E 06 F1 | 	add	objptr, #96
028d8     07 87 02 FB | 	rdlong	local02, objptr
028dc     90 0E 86 F1 | 	sub	objptr, #144
028e0     43 7B 82 F1 | 	sub	arg03, local02
028e4     F8 3A B0 FD | 	call	#__system__longmove
028e8                 | ' repeat i from buflen-cpl to buflen-1
028e8     30 0E 06 F1 | 	add	objptr, #48
028ec     07 89 02 FB | 	rdlong	local03, objptr
028f0     60 0E 06 F1 | 	add	objptr, #96
028f4     07 85 02 FB | 	rdlong	local01, objptr
028f8     42 89 82 F1 | 	sub	local03, local01
028fc     60 0E 86 F1 | 	sub	objptr, #96
02900     07 8B 02 FB | 	rdlong	local04, objptr
02904     01 8A 86 F1 | 	sub	local04, #1
02908     07 8D 02 FB | 	rdlong	local05, objptr
0290c     60 0E 06 F1 | 	add	objptr, #96
02910     07 8F 02 FB | 	rdlong	local06, objptr
02914     90 0E 86 F1 | 	sub	objptr, #144
02918     47 8D 82 F1 | 	sub	local05, local06
0291c     46 8B 5A F2 | 	cmps	local04, local05 wcz
02920     01 90 06 16 |  if_a	mov	local07, #1
02924     01 90 66 E6 |  if_be	neg	local07, #1
02928     48 8B 02 F1 | 	add	local04, local07
0292c     10 D7 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
02930     93 00 A0 FD | 	call	#FCACHE_LOAD_
02934                 | LR__0054
02934                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02934     07 93 02 FB | 	rdlong	local08, objptr
02938     44 95 02 F6 | 	mov	local09, local03
0293c     02 94 66 F0 | 	shl	local09, #2
02940     4A 93 02 F1 | 	add	local08, local09
02944     49 97 02 FB | 	rdlong	local10, local08
02948     80 FF 7F FF 
0294c     00 96 06 F5 | 	and	local10, ##-65536
02950     20 96 46 F5 | 	or	local10, #32
02954     07 99 02 FB | 	rdlong	local11, objptr
02958     44 9B 02 F6 | 	mov	local12, local03
0295c     02 9A 66 F0 | 	shl	local12, #2
02960     4D 99 02 F1 | 	add	local11, local12
02964     4C 97 62 FC | 	wrlong	local10, local11
02968     48 89 02 F1 | 	add	local03, local07
0296c     45 89 0A F2 | 	cmp	local03, local04 wz
02970     C0 FF 9F 5D |  if_ne	jmp	#LR__0054
02974                 | LR__0055
02974     AF F0 03 F6 | 	mov	ptra, fp
02978     BF 00 A0 FD | 	call	#popregs_
0297c                 | _hng030rm_spin2_scrollup_ret
0297c     2D 00 64 FD | 	ret
02980                 | 
02980                 | ' 
02980                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
02980                 | ' 
02980                 | ' pub crlf()
02980                 | _hng030rm_spin2_crlf
02980     02 5A 05 F6 | 	mov	COUNT_, #2
02984     B0 00 A0 FD | 	call	#pushregs_
02988                 | ' 
02988                 | ' cursor_x:=0
02988     34 0E 06 F1 | 	add	objptr, #52
0298c     07 01 48 FC | 	wrbyte	#0, objptr
02990                 | ' cursor_y+=1
02990     01 0E 06 F1 | 	add	objptr, #1
02994     07 85 C2 FA | 	rdbyte	local01, objptr
02998     01 84 06 F1 | 	add	local01, #1
0299c     07 85 42 FC | 	wrbyte	local01, objptr
029a0                 | ' if cursor_y>lines-1
029a0     5F 0E 06 F1 | 	add	objptr, #95
029a4     07 85 02 FB | 	rdlong	local01, objptr
029a8     01 84 86 F1 | 	sub	local01, #1
029ac     5F 0E 86 F1 | 	sub	objptr, #95
029b0     07 87 C2 FA | 	rdbyte	local02, objptr
029b4     35 0E 86 F1 | 	sub	objptr, #53
029b8     42 87 5A F2 | 	cmps	local02, local01 wcz
029bc     1C 00 90 ED |  if_be	jmp	#LR__0056
029c0                 | '   scrollup()
029c0     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
029c4                 | '   cursor_y:=lines-1
029c4     94 0E 06 F1 | 	add	objptr, #148
029c8     07 85 02 FB | 	rdlong	local01, objptr
029cc     01 84 86 F1 | 	sub	local01, #1
029d0     5F 0E 86 F1 | 	sub	objptr, #95
029d4     07 85 42 FC | 	wrbyte	local01, objptr
029d8     35 0E 86 F1 | 	sub	objptr, #53
029dc                 | LR__0056
029dc     AF F0 03 F6 | 	mov	ptra, fp
029e0     BF 00 A0 FD | 	call	#popregs_
029e4                 | _hng030rm_spin2_crlf_ret
029e4     2D 00 64 FD | 	ret
029e8                 | 
029e8                 | ' 
029e8                 | ' 
029e8                 | ' 
029e8                 | ' pub inttostr2(i,d):result |q,pos,k,j
029e8                 | _hng030rm_spin2_inttostr2
029e8                 | ' 
029e8                 | ' j:=i
029e8                 | ' pos:=d-1
029e8     3C 37 02 F6 | 	mov	_var01, arg02
029ec     01 36 86 F1 | 	sub	_var01, #1
029f0                 | ' k:=0
029f0                 | ' 
029f0                 | ' n_string[d]:=0
029f0     3C 39 02 F6 | 	mov	_var02, arg02
029f4     44 0E 06 F1 | 	add	objptr, #68
029f8     07 3B 02 F6 | 	mov	_var03, objptr
029fc     07 39 02 F1 | 	add	_var02, objptr
02a00     1C 01 48 FC | 	wrbyte	#0, _var02
02a04                 | ' repeat k from 0 to d-1
02a04     00 3C 06 F6 | 	mov	_var04, #0
02a08     01 78 86 F1 | 	sub	arg02, #1
02a0c     3C 3F 02 F6 | 	mov	_var05, arg02
02a10     00 3E 5E F2 | 	cmps	_var05, #0 wcz
02a14     44 0E 86 F1 | 	sub	objptr, #68
02a18     01 3A 06 16 |  if_a	mov	_var03, #1
02a1c     01 3A 66 E6 |  if_be	neg	_var03, #1
02a20     1D 3F 02 F1 | 	add	_var05, _var03
02a24     F8 D5 9F FE | 	loc	pa,	#(@LR__0058-@LR__0057)
02a28     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a2c                 | LR__0057
02a2c                 | '   n_string[k]:=48
02a2c     1E 41 02 F6 | 	mov	_var06, _var04
02a30     44 0E 06 F1 | 	add	objptr, #68
02a34     07 41 02 F1 | 	add	_var06, objptr
02a38     20 61 48 FC | 	wrbyte	#48, _var06
02a3c     1D 3D 02 F1 | 	add	_var04, _var03
02a40     1F 3D 0A F2 | 	cmp	_var04, _var05 wz
02a44     44 0E 86 F1 | 	sub	objptr, #68
02a48     E0 FF 9F 5D |  if_ne	jmp	#LR__0057
02a4c                 | LR__0058
02a4c                 | ' 
02a4c                 | ' if (j<>0)
02a4c     00 76 0E F2 | 	cmp	arg01, #0 wz
02a50     40 00 90 AD |  if_e	jmp	#LR__0061
02a54                 | ' 
02a54                 | '   repeat while (pos>-1)
02a54                 | LR__0059
02a54     FF FF 7F FF 
02a58     FF 37 5E F2 | 	cmps	_var01, ##-1 wcz
02a5c     34 00 90 ED |  if_be	jmp	#LR__0060
02a60                 | '     q:=j+//10
02a60     3B D9 02 F6 | 	mov	muldiva_, arg01
02a64     0A DA 06 F6 | 	mov	muldivb_, #10
02a68     CC 00 A0 FD | 	call	#unsdivide_
02a6c                 | '     q:=48+q
02a6c     30 42 06 F6 | 	mov	_var07, #48
02a70     6C 43 02 F1 | 	add	_var07, muldiva_
02a74                 | '     n_string[pos]:=q
02a74     1B 79 02 F6 | 	mov	arg02, _var01
02a78     44 0E 06 F1 | 	add	objptr, #68
02a7c     07 79 02 F1 | 	add	arg02, objptr
02a80     3C 43 42 FC | 	wrbyte	_var07, arg02
02a84                 | '     j:=j+/10
02a84     6D 77 02 F6 | 	mov	arg01, muldivb_
02a88                 | '     pos-=1
02a88     01 36 86 F1 | 	sub	_var01, #1
02a8c     44 0E 86 F1 | 	sub	objptr, #68
02a90     C0 FF 9F FD | 	jmp	#LR__0059
02a94                 | LR__0060
02a94                 | LR__0061
02a94                 | ' 
02a94                 | ' 
02a94                 | ' q:=@n_string
02a94     44 0E 06 F1 | 	add	objptr, #68
02a98     07 31 02 F6 | 	mov	result1, objptr
02a9c     44 0E 86 F1 | 	sub	objptr, #68
02aa0                 | ' return q
02aa0                 | _hng030rm_spin2_inttostr2_ret
02aa0     2D 00 64 FD | 	ret
02aa4                 | 
02aa4                 | ' 
02aa4                 | ' 
02aa4                 | ' 
02aa4                 | ' '*************************************************************************
02aa4                 | ' '                                                                        *
02aa4                 | ' '  Mode setting and driver start                                                          *
02aa4                 | ' '                                                                        *
02aa4                 | ' '*************************************************************************
02aa4                 | ' 
02aa4                 | ' ''---------  Set the graphics mode
02aa4                 | ' 
02aa4                 | ' 
02aa4                 | ' 
02aa4                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02aa4                 | _hng030rm_spin2_setmode
02aa4     0A 5A 05 F6 | 	mov	COUNT_, #10
02aa8     B0 00 A0 FD | 	call	#pushregs_
02aac     3B 85 02 F6 | 	mov	local01, arg01
02ab0                 | ' 
02ab0                 | ' '' mode:tn_bb_cc_vv_hh
02ab0                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02ab0                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02ab0                 | ' 
02ab0                 | ' if mode==(512+192+48)
02ab0     01 00 00 FF 
02ab4     F0 84 0E F2 | 	cmp	local01, ##752 wz
02ab8                 | '   return 'no RAM
02ab8     C8 05 90 AD |  if_e	jmp	#LR__0084
02abc                 | ' 
02abc                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02abc     42 87 02 F6 | 	mov	local02, local01
02ac0     06 86 46 F0 | 	shr	local02, #6
02ac4     07 86 06 F5 | 	and	local02, #7
02ac8     08 86 26 F3 | 	fle	local02, #8
02acc     43 89 02 F6 | 	mov	local03, local02
02ad0     30 88 62 FD | 	jmprel	local03
02ad4                 | LR__0062
02ad4     20 00 90 FD | 	jmp	#LR__0063
02ad8     48 00 90 FD | 	jmp	#LR__0064
02adc     70 00 90 FD | 	jmp	#LR__0065
02ae0     98 00 90 FD | 	jmp	#LR__0066
02ae4     C0 00 90 FD | 	jmp	#LR__0067
02ae8     E8 00 90 FD | 	jmp	#LR__0068
02aec     10 01 90 FD | 	jmp	#LR__0069
02af0     38 01 90 FD | 	jmp	#LR__0070
02af4     70 01 90 FD | 	jmp	#LR__0071
02af8                 | LR__0063
02af8                 | ' 
02af8                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02af8     50 0E 06 F1 | 	add	objptr, #80
02afc     07 77 02 F6 | 	mov	arg01, objptr
02b00     50 0E 86 F1 | 	sub	objptr, #80
02b04     0E 00 00 FF 
02b08     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02b0c     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b10     0E 00 00 FF 
02b14     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02b18     10 7A 06 F6 | 	mov	arg03, #16
02b1c     C0 38 B0 FD | 	call	#__system__longmove
02b20     44 01 90 FD | 	jmp	#LR__0071
02b24                 | LR__0064
02b24                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02b24     50 0E 06 F1 | 	add	objptr, #80
02b28     07 77 02 F6 | 	mov	arg01, objptr
02b2c     50 0E 86 F1 | 	sub	objptr, #80
02b30     0E 00 00 FF 
02b34     98 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02b38     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b3c     0E 00 00 FF 
02b40     98 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02b44     10 7A 06 F6 | 	mov	arg03, #16
02b48     94 38 B0 FD | 	call	#__system__longmove
02b4c     18 01 90 FD | 	jmp	#LR__0071
02b50                 | LR__0065
02b50                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02b50     50 0E 06 F1 | 	add	objptr, #80
02b54     07 77 02 F6 | 	mov	arg01, objptr
02b58     50 0E 86 F1 | 	sub	objptr, #80
02b5c     0E 00 00 FF 
02b60     D8 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02b64     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b68     0E 00 00 FF 
02b6c     D8 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02b70     10 7A 06 F6 | 	mov	arg03, #16
02b74     68 38 B0 FD | 	call	#__system__longmove
02b78     EC 00 90 FD | 	jmp	#LR__0071
02b7c                 | LR__0066
02b7c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02b7c     50 0E 06 F1 | 	add	objptr, #80
02b80     07 77 02 F6 | 	mov	arg01, objptr
02b84     50 0E 86 F1 | 	sub	objptr, #80
02b88     0E 00 00 FF 
02b8c     18 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b90     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b94     0E 00 00 FF 
02b98     18 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b9c     10 7A 06 F6 | 	mov	arg03, #16
02ba0     3C 38 B0 FD | 	call	#__system__longmove
02ba4     C0 00 90 FD | 	jmp	#LR__0071
02ba8                 | LR__0067
02ba8                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02ba8     50 0E 06 F1 | 	add	objptr, #80
02bac     07 77 02 F6 | 	mov	arg01, objptr
02bb0     50 0E 86 F1 | 	sub	objptr, #80
02bb4     0E 00 00 FF 
02bb8     58 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02bbc     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02bc0     0E 00 00 FF 
02bc4     58 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02bc8     10 7A 06 F6 | 	mov	arg03, #16
02bcc     10 38 B0 FD | 	call	#__system__longmove
02bd0     94 00 90 FD | 	jmp	#LR__0071
02bd4                 | LR__0068
02bd4                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02bd4     50 0E 06 F1 | 	add	objptr, #80
02bd8     07 77 02 F6 | 	mov	arg01, objptr
02bdc     50 0E 86 F1 | 	sub	objptr, #80
02be0     0E 00 00 FF 
02be4     98 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02be8     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02bec     0E 00 00 FF 
02bf0     98 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02bf4     10 7A 06 F6 | 	mov	arg03, #16
02bf8     E4 37 B0 FD | 	call	#__system__longmove
02bfc     68 00 90 FD | 	jmp	#LR__0071
02c00                 | LR__0069
02c00                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02c00     50 0E 06 F1 | 	add	objptr, #80
02c04     07 77 02 F6 | 	mov	arg01, objptr
02c08     50 0E 86 F1 | 	sub	objptr, #80
02c0c     0E 00 00 FF 
02c10     D8 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02c14     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02c18     0E 00 00 FF 
02c1c     D8 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02c20     10 7A 06 F6 | 	mov	arg03, #16
02c24     B8 37 B0 FD | 	call	#__system__longmove
02c28     3C 00 90 FD | 	jmp	#LR__0071
02c2c                 | LR__0070
02c2c                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02c2c     50 0E 06 F1 | 	add	objptr, #80
02c30     07 8B 02 F6 | 	mov	local04, objptr
02c34     45 8D 02 F6 | 	mov	local05, local04
02c38     0F 00 00 FF 
02c3c     18 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02c40     0E 8F 02 F6 | 	mov	local06, ptr__hng030rm_spin2_dat__
02c44     47 91 02 F6 | 	mov	local07, local06
02c48     10 92 06 F6 | 	mov	local08, #16
02c4c     46 77 02 F6 | 	mov	arg01, local05
02c50     48 79 02 F6 | 	mov	arg02, local07
02c54     10 7A 06 F6 | 	mov	arg03, #16
02c58     50 0E 86 F1 | 	sub	objptr, #80
02c5c     0F 00 00 FF 
02c60     18 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02c64     78 37 B0 FD | 	call	#__system__longmove
02c68                 | LR__0071
02c68                 | ' 
02c68                 | ' ' 4-bit graphics: do nothing with timings :)
02c68                 | ' if mode<512
02c68     01 00 00 FF 
02c6c     00 84 5E F2 | 	cmps	local01, ##512 wcz
02c70     1C 00 90 3D |  if_ae	jmp	#LR__0072
02c74                 | '   palette_ptr:=@ataripalette
02c74     0C 00 00 FF 
02c78     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c7c     18 0E 06 F1 | 	add	objptr, #24
02c80     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c84     18 0E 86 F1 | 	sub	objptr, #24
02c88     0C 00 00 FF 
02c8c     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c90                 | LR__0072
02c90                 | ' 
02c90                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c90     42 87 02 F6 | 	mov	local02, local01
02c94     01 00 00 FF 
02c98     30 86 06 F5 | 	and	local02, ##560
02c9c     01 00 00 FF 
02ca0     30 86 0E F2 | 	cmp	local02, ##560 wz
02ca4     44 00 90 5D |  if_ne	jmp	#LR__0073
02ca8                 | '   timings[5]:=4
02ca8     64 0E 06 F1 | 	add	objptr, #100
02cac     07 09 68 FC | 	wrlong	#4, objptr
02cb0                 | '   timings[11]:=timings[11]<<1
02cb0     18 0E 06 F1 | 	add	objptr, #24
02cb4     07 87 02 FB | 	rdlong	local02, objptr
02cb8     01 86 66 F0 | 	shl	local02, #1
02cbc     07 87 62 FC | 	wrlong	local02, objptr
02cc0                 | '   putpixel:=p8
02cc0     6C 0E 06 F1 | 	add	objptr, #108
02cc4     07 87 02 FB | 	rdlong	local02, objptr
02cc8     10 0E 86 F1 | 	sub	objptr, #16
02ccc     07 87 62 FC | 	wrlong	local02, objptr
02cd0                 | '   palette_ptr:=@ataripalette
02cd0     0C 00 00 FF 
02cd4     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02cd8     C0 0E 86 F1 | 	sub	objptr, #192
02cdc     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02ce0     18 0E 86 F1 | 	sub	objptr, #24
02ce4     0C 00 00 FF 
02ce8     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02cec                 | LR__0073
02cec                 | ' 
02cec                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02cec     42 87 02 F6 | 	mov	local02, local01
02cf0     01 00 00 FF 
02cf4     30 86 06 F5 | 	and	local02, ##560
02cf8     01 00 00 FF 
02cfc     10 86 0E F2 | 	cmp	local02, ##528 wz
02d00     44 00 90 5D |  if_ne	jmp	#LR__0074
02d04                 | '   timings[5]:=16
02d04     64 0E 06 F1 | 	add	objptr, #100
02d08     07 21 68 FC | 	wrlong	#16, objptr
02d0c                 | '   timings[11]:=timings[11]>>1
02d0c     18 0E 06 F1 | 	add	objptr, #24
02d10     07 87 02 FB | 	rdlong	local02, objptr
02d14     01 86 46 F0 | 	shr	local02, #1
02d18     07 87 62 FC | 	wrlong	local02, objptr
02d1c                 | '   putpixel:=p2
02d1c     64 0E 06 F1 | 	add	objptr, #100
02d20     07 87 02 FB | 	rdlong	local02, objptr
02d24     08 0E 86 F1 | 	sub	objptr, #8
02d28     07 87 62 FC | 	wrlong	local02, objptr
02d2c                 | '   palette_ptr:=@fourcolors
02d2c     0C 00 00 FF 
02d30     08 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02d34     C0 0E 86 F1 | 	sub	objptr, #192
02d38     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d3c     18 0E 86 F1 | 	sub	objptr, #24
02d40     0C 00 00 FF 
02d44     08 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02d48                 | LR__0074
02d48                 | ' 
02d48                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02d48     42 87 02 F6 | 	mov	local02, local01
02d4c     01 00 00 FF 
02d50     30 86 06 F5 | 	and	local02, ##560
02d54     01 00 00 FF 
02d58     00 86 0E F2 | 	cmp	local02, ##512 wz
02d5c     44 00 90 5D |  if_ne	jmp	#LR__0075
02d60                 | '   timings[5]:=32
02d60     64 0E 06 F1 | 	add	objptr, #100
02d64     07 41 68 FC | 	wrlong	#32, objptr
02d68                 | '   timings[11]:=timings[11]>>2
02d68     18 0E 06 F1 | 	add	objptr, #24
02d6c     07 87 02 FB | 	rdlong	local02, objptr
02d70     02 86 46 F0 | 	shr	local02, #2
02d74     07 87 62 FC | 	wrlong	local02, objptr
02d78                 | '   putpixel:=p1
02d78     60 0E 06 F1 | 	add	objptr, #96
02d7c     07 87 02 FB | 	rdlong	local02, objptr
02d80     04 0E 86 F1 | 	sub	objptr, #4
02d84     07 87 62 FC | 	wrlong	local02, objptr
02d88                 | '   palette_ptr:=@twocolors
02d88     0C 00 00 FF 
02d8c     00 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d90     C0 0E 86 F1 | 	sub	objptr, #192
02d94     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d98     18 0E 86 F1 | 	sub	objptr, #24
02d9c     0C 00 00 FF 
02da0     00 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02da4                 | LR__0075
02da4                 | ' 
02da4                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02da4     42 87 02 F6 | 	mov	local02, local01
02da8     01 00 00 FF 
02dac     30 86 06 F5 | 	and	local02, ##560
02db0     01 00 00 FF 
02db4     20 86 0E F2 | 	cmp	local02, ##544 wz
02db8     2C 00 90 5D |  if_ne	jmp	#LR__0076
02dbc                 | '   putpixel:=p4
02dbc     E4 0E 06 F1 | 	add	objptr, #228
02dc0     07 87 02 FB | 	rdlong	local02, objptr
02dc4     0C 0E 86 F1 | 	sub	objptr, #12
02dc8     07 87 62 FC | 	wrlong	local02, objptr
02dcc                 | '   palette_ptr:=@vga16
02dcc     0C 00 00 FF 
02dd0     18 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02dd4     C0 0E 86 F1 | 	sub	objptr, #192
02dd8     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02ddc     18 0E 86 F1 | 	sub	objptr, #24
02de0     0C 00 00 FF 
02de4     18 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02de8                 | LR__0076
02de8                 | ' 
02de8                 | ' repeat i from 0 to 4
02de8     00 94 06 F6 | 	mov	local09, #0
02dec     6C D2 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
02df0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02df4                 | LR__0077
02df4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02df4     4A 8B 02 F6 | 	mov	local04, local09
02df8     02 8A 66 F0 | 	shl	local04, #2
02dfc     50 0E 06 F1 | 	add	objptr, #80
02e00     07 8D 02 F6 | 	mov	local05, objptr
02e04     07 8B 02 F1 | 	add	local04, objptr
02e08     2C 0E 86 F1 | 	sub	objptr, #44
02e0c     07 91 02 FB | 	rdlong	local07, objptr
02e10     48 8F 02 F6 | 	mov	local06, local07
02e14     11 8E 66 F0 | 	shl	local06, #17
02e18     45 87 02 FB | 	rdlong	local02, local04
02e1c     47 87 02 F1 | 	add	local02, local06
02e20     80 40 38 FF 
02e24     00 86 06 F1 | 	add	local02, ##1887502336
02e28     4A 93 02 F6 | 	mov	local08, local09
02e2c     02 92 66 F0 | 	shl	local08, #2
02e30     2C 0E 06 F1 | 	add	objptr, #44
02e34     07 97 02 F6 | 	mov	local10, objptr
02e38     07 93 02 F1 | 	add	local08, objptr
02e3c     49 87 62 FC | 	wrlong	local02, local08
02e40     01 94 06 F1 | 	add	local09, #1
02e44     05 94 5E F2 | 	cmps	local09, #5 wcz
02e48     50 0E 86 F1 | 	sub	objptr, #80
02e4c     A4 FF 9F CD |  if_b	jmp	#LR__0077
02e50                 | LR__0078
02e50                 | ' timings[5]:=timings[5]+hdmibase<<17
02e50     24 0E 06 F1 | 	add	objptr, #36
02e54     07 8B 02 FB | 	rdlong	local04, objptr
02e58     11 8A 66 F0 | 	shl	local04, #17
02e5c     40 0E 06 F1 | 	add	objptr, #64
02e60     07 8F 02 FB | 	rdlong	local06, objptr
02e64     47 87 02 F6 | 	mov	local02, local06
02e68     45 87 02 F1 | 	add	local02, local04
02e6c     07 87 62 FC | 	wrlong	local02, objptr
02e70                 | ' clkfreq:=timings[13]
02e70     20 0E 06 F1 | 	add	objptr, #32
02e74     07 87 02 FB | 	rdlong	local02, objptr
02e78     14 86 66 FC | 	wrlong	local02, #20
02e7c                 | ' hubset(timings[14])
02e7c     04 0E 06 F1 | 	add	objptr, #4
02e80     07 77 02 FB | 	rdlong	arg01, objptr
02e84     88 0E 86 F1 | 	sub	objptr, #136
02e88     00 76 62 FD | 	hubset	arg01
02e8c                 | ' waitms(1)
02e8c     01 76 06 F6 | 	mov	arg01, #1
02e90     1C 38 B0 FD | 	call	#__system___waitms
02e94                 | ' 
02e94                 | ' 
02e94                 | ' xzoom:=1<<(mode & 3)
02e94     42 8B 02 F6 | 	mov	local04, local01
02e98     03 8A 06 F5 | 	and	local04, #3
02e9c     45 87 C2 F9 | 	decod	local02, local04
02ea0     CC 0E 06 F1 | 	add	objptr, #204
02ea4     07 87 62 FC | 	wrlong	local02, objptr
02ea8                 | ' 
02ea8                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02ea8     43 8B 02 F6 | 	mov	local04, local02
02eac     CC 0E 86 F1 | 	sub	objptr, #204
02eb0     08 8A 0E F2 | 	cmp	local04, #8 wz
02eb4     24 00 90 5D |  if_ne	jmp	#LR__0079
02eb8     42 8D 02 F6 | 	mov	local05, local01
02ebc     04 8C 46 F0 | 	shr	local05, #4
02ec0     03 8C 06 F5 | 	and	local05, #3
02ec4     03 8C 0E F2 | 	cmp	local05, #3 wz
02ec8     10 00 90 AD |  if_e	jmp	#LR__0079
02ecc                 | '   xzoom:=4
02ecc     04 86 06 F6 | 	mov	local02, #4
02ed0     CC 0E 06 F1 | 	add	objptr, #204
02ed4     07 09 68 FC | 	wrlong	#4, objptr
02ed8     CC 0E 86 F1 | 	sub	objptr, #204
02edc                 | LR__0079
02edc                 | ' 
02edc                 | ' yzoom:=1<<((mode>>2) & 3)
02edc     42 8B 02 F6 | 	mov	local04, local01
02ee0     02 8A 46 F0 | 	shr	local04, #2
02ee4     03 8A 06 F5 | 	and	local04, #3
02ee8     45 87 C2 F9 | 	decod	local02, local04
02eec     D0 0E 06 F1 | 	add	objptr, #208
02ef0     07 87 62 FC | 	wrlong	local02, objptr
02ef4                 | ' azoom:=xzoom*yzoom
02ef4     04 0E 86 F1 | 	sub	objptr, #4
02ef8     07 8B 02 FB | 	rdlong	local04, objptr
02efc     04 0E 06 F1 | 	add	objptr, #4
02f00     07 8F 02 FB | 	rdlong	local06, objptr
02f04     47 8B 02 FD | 	qmul	local04, local06
02f08     18 86 62 FD | 	getqx	local02
02f0c     04 0E 06 F1 | 	add	objptr, #4
02f10     07 87 62 FC | 	wrlong	local02, objptr
02f14                 | ' 
02f14                 | ' cpl:=timings[11]
02f14     58 0E 86 F1 | 	sub	objptr, #88
02f18     07 87 02 FB | 	rdlong	local02, objptr
02f1c     14 0E 06 F1 | 	add	objptr, #20
02f20     07 87 62 FC | 	wrlong	local02, objptr
02f24     90 0E 86 F1 | 	sub	objptr, #144
02f28                 | ' if (mode<512)
02f28     01 00 00 FF 
02f2c     00 84 5E F2 | 	cmps	local01, ##512 wcz
02f30     60 00 90 3D |  if_ae	jmp	#LR__0080
02f34                 | '   lines:=(timings[12]>>4)+/yzoom
02f34     80 0E 06 F1 | 	add	objptr, #128
02f38     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f3c     04 D8 46 F0 | 	shr	muldiva_, #4
02f40     50 0E 06 F1 | 	add	objptr, #80
02f44     07 DB 02 FB | 	rdlong	muldivb_, objptr
02f48     D0 0E 86 F1 | 	sub	objptr, #208
02f4c     CC 00 A0 FD | 	call	#unsdivide_
02f50     94 0E 06 F1 | 	add	objptr, #148
02f54     07 DB 62 FC | 	wrlong	muldivb_, objptr
02f58                 | '   if ((timings[12]>>4)+//yzoom) <>0
02f58     14 0E 86 F1 | 	sub	objptr, #20
02f5c     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f60     04 D8 46 F0 | 	shr	muldiva_, #4
02f64     50 0E 06 F1 | 	add	objptr, #80
02f68     07 DB 02 FB | 	rdlong	muldivb_, objptr
02f6c     D0 0E 86 F1 | 	sub	objptr, #208
02f70     CC 00 A0 FD | 	call	#unsdivide_
02f74     00 D8 0E F2 | 	cmp	muldiva_, #0 wz
02f78     AC 00 90 AD |  if_e	jmp	#LR__0083
02f7c                 | '     lines +=1
02f7c     94 0E 06 F1 | 	add	objptr, #148
02f80     07 87 02 FB | 	rdlong	local02, objptr
02f84     01 86 06 F1 | 	add	local02, #1
02f88     07 87 62 FC | 	wrlong	local02, objptr
02f8c     94 0E 86 F1 | 	sub	objptr, #148
02f90                 | ' 
02f90                 | ' else
02f90     94 00 90 FD | 	jmp	#LR__0083
02f94                 | LR__0080
02f94                 | '   lines:=timings[12]/yzoom
02f94     80 0E 06 F1 | 	add	objptr, #128
02f98     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f9c     50 0E 06 F1 | 	add	objptr, #80
02fa0     07 DB 02 FB | 	rdlong	muldivb_, objptr
02fa4     D0 0E 86 F1 | 	sub	objptr, #208
02fa8     D0 00 A0 FD | 	call	#divide_
02fac     94 0E 06 F1 | 	add	objptr, #148
02fb0     07 DB 62 FC | 	wrlong	muldivb_, objptr
02fb4                 | '   if cpl//xzoom==0
02fb4     04 0E 86 F1 | 	sub	objptr, #4
02fb8     07 D9 02 FB | 	rdlong	muldiva_, objptr
02fbc     3C 0E 06 F1 | 	add	objptr, #60
02fc0     07 DB 02 FB | 	rdlong	muldivb_, objptr
02fc4     CC 0E 86 F1 | 	sub	objptr, #204
02fc8     D0 00 A0 FD | 	call	#divide_
02fcc     00 D8 0E F2 | 	cmp	muldiva_, #0 wz
02fd0     28 00 90 5D |  if_ne	jmp	#LR__0081
02fd4                 | '     cpl:=cpl/xzoom
02fd4     90 0E 06 F1 | 	add	objptr, #144
02fd8     07 D9 02 FB | 	rdlong	muldiva_, objptr
02fdc     3C 0E 06 F1 | 	add	objptr, #60
02fe0     07 DB 02 FB | 	rdlong	muldivb_, objptr
02fe4     CC 0E 86 F1 | 	sub	objptr, #204
02fe8     D0 00 A0 FD | 	call	#divide_
02fec     90 0E 06 F1 | 	add	objptr, #144
02ff0     07 DB 62 FC | 	wrlong	muldivb_, objptr
02ff4     90 0E 86 F1 | 	sub	objptr, #144
02ff8                 | '   else
02ff8     2C 00 90 FD | 	jmp	#LR__0082
02ffc                 | LR__0081
02ffc                 | '     cpl:=cpl/xzoom+1
02ffc     90 0E 06 F1 | 	add	objptr, #144
03000     07 D9 02 FB | 	rdlong	muldiva_, objptr
03004     3C 0E 06 F1 | 	add	objptr, #60
03008     07 DB 02 FB | 	rdlong	muldivb_, objptr
0300c     CC 0E 86 F1 | 	sub	objptr, #204
03010     D0 00 A0 FD | 	call	#divide_
03014     6D 87 02 F6 | 	mov	local02, muldivb_
03018     01 86 06 F1 | 	add	local02, #1
0301c     90 0E 06 F1 | 	add	objptr, #144
03020     07 87 62 FC | 	wrlong	local02, objptr
03024     90 0E 86 F1 | 	sub	objptr, #144
03028                 | LR__0082
03028                 | LR__0083
03028                 | ' 
03028                 | ' buflen:=(cpl*lines)
03028     90 0E 06 F1 | 	add	objptr, #144
0302c     07 8B 02 FB | 	rdlong	local04, objptr
03030     04 0E 06 F1 | 	add	objptr, #4
03034     07 8F 02 FB | 	rdlong	local06, objptr
03038     47 8B 02 FD | 	qmul	local04, local06
0303c     18 86 62 FD | 	getqx	local02
03040     64 0E 86 F1 | 	sub	objptr, #100
03044     07 87 62 FC | 	wrlong	local02, objptr
03048                 | ' buf_ptr:=$80000-4*buflen
03048     43 8B 02 F6 | 	mov	local04, local02
0304c     30 0E 86 F1 | 	sub	objptr, #48
03050     02 8A 66 F0 | 	shl	local04, #2
03054     13 86 C6 F9 | 	decod	local02, #19
03058     45 87 82 F1 | 	sub	local02, local04
0305c     07 87 62 FC | 	wrlong	local02, objptr
03060                 | ' mode_ptr:=@timings
03060     50 0E 06 F1 | 	add	objptr, #80
03064     07 87 02 F6 | 	mov	local02, objptr
03068     3C 0E 86 F1 | 	sub	objptr, #60
0306c     07 87 62 FC | 	wrlong	local02, objptr
03070                 | ' graphmode:=mode
03070     B0 0E 06 F1 | 	add	objptr, #176
03074     07 85 62 FC | 	wrlong	local01, objptr
03078     C4 0E 86 F1 | 	sub	objptr, #196
0307c                 | ' makedl(mode)
0307c     42 77 02 F6 | 	mov	arg01, local01
03080     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
03084                 | LR__0084
03084     AF F0 03 F6 | 	mov	ptra, fp
03088     BF 00 A0 FD | 	call	#popregs_
0308c                 | _hng030rm_spin2_setmode_ret
0308c     2D 00 64 FD | 	ret
03090                 | 
03090                 | ' 
03090                 | ' 
03090                 | ' 
03090                 | ' 
03090                 | ' '---------- Make a display list
03090                 | ' 
03090                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
03090                 | _hng030rm_spin2_makedl
03090                 | ' 
03090                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03090                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03090                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03090                 | ' 
03090                 | ' '   0 - display a up/down border line
03090                 | ' 
03090                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03090                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03090                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03090                 | ' '    nnnn - font line to display, 0..15
03090                 | ' '    llllll - character line, determines the cursor Y position
03090                 | ' 
03090                 | ' 
03090                 | ' if (mode &256==0)
03090     00 77 CE F7 | 	test	arg01, #256 wz
03094     1C 00 90 5D |  if_ne	jmp	#LR__0085
03098                 | '   dl_ptr:=buf_ptr-4*576
03098     07 37 02 FB | 	rdlong	_var01, objptr
0309c     04 00 00 FF 
030a0     00 37 86 F1 | 	sub	_var01, ##2304
030a4     1C 0E 06 F1 | 	add	objptr, #28
030a8     07 37 62 FC | 	wrlong	_var01, objptr
030ac     1C 0E 86 F1 | 	sub	objptr, #28
030b0                 | ' else
030b0     18 00 90 FD | 	jmp	#LR__0086
030b4                 | LR__0085
030b4                 | '   dl_ptr:=buf_ptr-4*496
030b4     07 37 02 FB | 	rdlong	_var01, objptr
030b8     03 00 00 FF 
030bc     C0 37 86 F1 | 	sub	_var01, ##1984
030c0     1C 0E 06 F1 | 	add	objptr, #28
030c4     07 37 62 FC | 	wrlong	_var01, objptr
030c8     1C 0E 86 F1 | 	sub	objptr, #28
030cc                 | LR__0086
030cc                 | '  ' dl_ptr:=buf_ptr-4*540
030cc                 | ' 
030cc                 | ' vzoom:=((mode>>2) & 3)
030cc     3B 39 02 F6 | 	mov	_var02, arg01
030d0     02 38 46 F0 | 	shr	_var02, #2
030d4     03 38 06 F5 | 	and	_var02, #3
030d8                 | ' 
030d8                 | ' 
030d8                 | ' if mode<512 '' text modes
030d8     01 00 00 FF 
030dc     00 76 5E F2 | 	cmps	arg01, ##512 wcz
030e0     E8 01 90 3D |  if_ae	jmp	#LR__0094
030e4                 | ' 
030e4                 | '   if timings[6]>0 'borders
030e4     68 0E 06 F1 | 	add	objptr, #104
030e8     07 37 02 FB | 	rdlong	_var01, objptr
030ec     68 0E 86 F1 | 	sub	objptr, #104
030f0     00 36 5E F2 | 	cmps	_var01, #0 wcz
030f4     D4 00 90 ED |  if_be	jmp	#LR__0091
030f8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
030f8     00 3A 06 F6 | 	mov	_var03, #0
030fc     68 0E 06 F1 | 	add	objptr, #104
03100     07 3D 02 FB | 	rdlong	_var04, objptr
03104     68 0E 86 F1 | 	sub	objptr, #104
03108     01 3C 86 F1 | 	sub	_var04, #1
0310c     00 3C 5E F2 | 	cmps	_var04, #0 wcz
03110     01 3E 06 16 |  if_a	mov	_var05, #1
03114     01 3E 66 E6 |  if_be	neg	_var05, #1
03118     1F 41 02 F6 | 	mov	_var06, _var05
0311c     1F 3D 02 F1 | 	add	_var04, _var05
03120     04 CF 9F FE | 	loc	pa,	#(@LR__0088-@LR__0087)
03124     93 00 A0 FD | 	call	#FCACHE_LOAD_
03128                 | LR__0087
03128                 | '       long[dl_ptr+4*i]:=$0
03128     1C 0E 06 F1 | 	add	objptr, #28
0312c     07 43 02 FB | 	rdlong	_var07, objptr
03130     1C 0E 86 F1 | 	sub	objptr, #28
03134     1D 45 02 F6 | 	mov	_var08, _var03
03138     02 44 66 F0 | 	shl	_var08, #2
0313c     22 43 02 F1 | 	add	_var07, _var08
03140     21 01 68 FC | 	wrlong	#0, _var07
03144     20 3B 02 F1 | 	add	_var03, _var06
03148     1E 3B 0A F2 | 	cmp	_var03, _var04 wz
0314c     D8 FF 9F 5D |  if_ne	jmp	#LR__0087
03150                 | LR__0088
03150                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03150     68 0E 06 F1 | 	add	objptr, #104
03154     07 3B 02 FB | 	rdlong	_var03, objptr
03158     18 0E 06 F1 | 	add	objptr, #24
0315c     07 3F 02 FB | 	rdlong	_var05, objptr
03160     1F 3B 02 F1 | 	add	_var03, _var05
03164     0C 0E 06 F1 | 	add	objptr, #12
03168     07 47 02 FB | 	rdlong	_var09, objptr
0316c     01 46 86 F1 | 	sub	_var09, #1
03170     24 0E 86 F1 | 	sub	objptr, #36
03174     07 49 02 FB | 	rdlong	_var10, objptr
03178     18 0E 06 F1 | 	add	objptr, #24
0317c     07 4B 02 FB | 	rdlong	_var11, objptr
03180     80 0E 86 F1 | 	sub	objptr, #128
03184     25 49 02 F1 | 	add	_var10, _var11
03188     24 47 5A F2 | 	cmps	_var09, _var10 wcz
0318c     01 44 06 16 |  if_a	mov	_var08, #1
03190     01 44 66 E6 |  if_be	neg	_var08, #1
03194     22 4D 02 F6 | 	mov	_var12, _var08
03198     22 47 02 F1 | 	add	_var09, _var08
0319c     88 CE 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
031a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
031a4                 | LR__0089
031a4                 | '       long[dl_ptr+4*i]:=$0
031a4     1C 0E 06 F1 | 	add	objptr, #28
031a8     07 4F 02 FB | 	rdlong	_var13, objptr
031ac     1C 0E 86 F1 | 	sub	objptr, #28
031b0     1D 51 02 F6 | 	mov	_var14, _var03
031b4     02 50 66 F0 | 	shl	_var14, #2
031b8     28 4F 02 F1 | 	add	_var13, _var14
031bc     27 01 68 FC | 	wrlong	#0, _var13
031c0     26 3B 02 F1 | 	add	_var03, _var12
031c4     23 3B 0A F2 | 	cmp	_var03, _var09 wz
031c8     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
031cc                 | LR__0090
031cc                 | LR__0091
031cc                 | '   lpc:=16<<vzoom
031cc     10 52 06 F6 | 	mov	_var15, #16
031d0     1C 53 62 F0 | 	shl	_var15, _var02
031d4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
031d4     68 0E 06 F1 | 	add	objptr, #104
031d8     07 3B 02 FB | 	rdlong	_var03, objptr
031dc     1D 55 02 F6 | 	mov	_var16, _var03
031e0     18 0E 06 F1 | 	add	objptr, #24
031e4     07 57 02 FB | 	rdlong	_var17, objptr
031e8     2B 55 02 F1 | 	add	_var16, _var17
031ec     01 54 86 F1 | 	sub	_var16, #1
031f0     18 0E 86 F1 | 	sub	objptr, #24
031f4     07 45 02 FB | 	rdlong	_var08, objptr
031f8     68 0E 86 F1 | 	sub	objptr, #104
031fc     22 55 5A F2 | 	cmps	_var16, _var08 wcz
03200     01 58 06 16 |  if_a	mov	_var18, #1
03204     01 58 66 E6 |  if_be	neg	_var18, #1
03208     2C 5B 02 F6 | 	mov	_var19, _var18
0320c     2C 55 02 F1 | 	add	_var16, _var18
03210     A0 CE 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
03214     93 00 A0 FD | 	call	#FCACHE_LOAD_
03218                 | LR__0092
03218                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03218     1D D9 02 F6 | 	mov	muldiva_, _var03
0321c     68 0E 06 F1 | 	add	objptr, #104
03220     07 5D 02 FB | 	rdlong	_var20, objptr
03224     68 0E 86 F1 | 	sub	objptr, #104
03228     2E D9 82 F1 | 	sub	muldiva_, _var20
0322c     29 DB 02 F6 | 	mov	muldivb_, _var15
03230     CC 00 A0 FD | 	call	#unsdivide_
03234     1C D9 42 F0 | 	shr	muldiva_, _var02
03238     6C 5F 02 F6 | 	mov	_var21, muldiva_
0323c                 | '     charline:=(i-timings[6])+/lpc
0323c     1D D9 02 F6 | 	mov	muldiva_, _var03
03240     68 0E 06 F1 | 	add	objptr, #104
03244     07 61 02 FB | 	rdlong	_var22, objptr
03248     68 0E 86 F1 | 	sub	objptr, #104
0324c     30 D9 82 F1 | 	sub	muldiva_, _var22
03250     29 DB 02 F6 | 	mov	muldivb_, _var15
03254     CC 00 A0 FD | 	call	#unsdivide_
03258     6D 63 02 F6 | 	mov	_var23, muldivb_
0325c                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
0325c     07 4B 02 FB | 	rdlong	_var11, objptr
03260     90 0E 06 F1 | 	add	objptr, #144
03264     07 5D 02 FB | 	rdlong	_var20, objptr
03268     31 5D 02 FD | 	qmul	_var20, _var23
0326c     18 64 62 FD | 	getqx	_var24
03270     02 64 66 F0 | 	shl	_var24, #2
03274     32 4B 02 F1 | 	add	_var11, _var24
03278     3B 51 02 F6 | 	mov	_var14, arg01
0327c     03 50 06 F5 | 	and	_var14, #3
03280     28 4B 02 F1 | 	add	_var11, _var14
03284                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03284     0C 4A 66 F0 | 	shl	_var11, #12
03288     2F 61 02 F6 | 	mov	_var22, _var21
0328c     08 60 66 F0 | 	shl	_var22, #8
03290     30 4B 02 F1 | 	add	_var11, _var22
03294     31 5D 02 F6 | 	mov	_var20, _var23
03298     02 5C 66 F0 | 	shl	_var20, #2
0329c     2E 4B 02 F1 | 	add	_var11, _var20
032a0     01 4A 06 F1 | 	add	_var11, #1
032a4     74 0E 86 F1 | 	sub	objptr, #116
032a8     07 4F 02 FB | 	rdlong	_var13, objptr
032ac     1C 0E 86 F1 | 	sub	objptr, #28
032b0     1D 51 02 F6 | 	mov	_var14, _var03
032b4     02 50 66 F0 | 	shl	_var14, #2
032b8     28 4F 02 F1 | 	add	_var13, _var14
032bc     27 4B 62 FC | 	wrlong	_var11, _var13
032c0     2D 3B 02 F1 | 	add	_var03, _var19
032c4     2A 3B 0A F2 | 	cmp	_var03, _var16 wz
032c8     4C FF 9F 5D |  if_ne	jmp	#LR__0092
032cc                 | LR__0093
032cc                 | LR__0094
032cc                 | ' 
032cc                 | ' 
032cc                 | ' 
032cc                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
032cc     01 00 00 FF 
032d0     00 76 5E F2 | 	cmps	arg01, ##512 wcz
032d4     A8 01 90 CD |  if_b	jmp	#LR__0102
032d8                 | ' 
032d8                 | '   if timings[6]>0 'borders
032d8     68 0E 06 F1 | 	add	objptr, #104
032dc     07 37 02 FB | 	rdlong	_var01, objptr
032e0     68 0E 86 F1 | 	sub	objptr, #104
032e4     00 36 5E F2 | 	cmps	_var01, #0 wcz
032e8     D4 00 90 ED |  if_be	jmp	#LR__0099
032ec                 | '     repeat i from 0 to timings[6]-1 '0 to -1
032ec     00 3A 06 F6 | 	mov	_var03, #0
032f0     68 0E 06 F1 | 	add	objptr, #104
032f4     07 67 02 FB | 	rdlong	_var25, objptr
032f8     68 0E 86 F1 | 	sub	objptr, #104
032fc     01 66 86 F1 | 	sub	_var25, #1
03300     00 66 5E F2 | 	cmps	_var25, #0 wcz
03304     01 3E 06 16 |  if_a	mov	_var05, #1
03308     01 3E 66 E6 |  if_be	neg	_var05, #1
0330c     1F 69 02 F6 | 	mov	_var26, _var05
03310     1F 67 02 F1 | 	add	_var25, _var05
03314     10 CD 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
03318     93 00 A0 FD | 	call	#FCACHE_LOAD_
0331c                 | LR__0095
0331c                 | '       long[dl_ptr+4*i]:=$0
0331c     1C 0E 06 F1 | 	add	objptr, #28
03320     07 43 02 FB | 	rdlong	_var07, objptr
03324     1C 0E 86 F1 | 	sub	objptr, #28
03328     1D 45 02 F6 | 	mov	_var08, _var03
0332c     02 44 66 F0 | 	shl	_var08, #2
03330     22 43 02 F1 | 	add	_var07, _var08
03334     21 01 68 FC | 	wrlong	#0, _var07
03338     34 3B 02 F1 | 	add	_var03, _var26
0333c     33 3B 0A F2 | 	cmp	_var03, _var25 wz
03340     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
03344                 | LR__0096
03344                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03344     68 0E 06 F1 | 	add	objptr, #104
03348     07 3B 02 FB | 	rdlong	_var03, objptr
0334c     18 0E 06 F1 | 	add	objptr, #24
03350     07 3F 02 FB | 	rdlong	_var05, objptr
03354     1F 3B 02 F1 | 	add	_var03, _var05
03358     0C 0E 06 F1 | 	add	objptr, #12
0335c     07 6B 02 FB | 	rdlong	_var27, objptr
03360     01 6A 86 F1 | 	sub	_var27, #1
03364     24 0E 86 F1 | 	sub	objptr, #36
03368     07 49 02 FB | 	rdlong	_var10, objptr
0336c     18 0E 06 F1 | 	add	objptr, #24
03370     07 4B 02 FB | 	rdlong	_var11, objptr
03374     80 0E 86 F1 | 	sub	objptr, #128
03378     25 49 02 F1 | 	add	_var10, _var11
0337c     24 6B 5A F2 | 	cmps	_var27, _var10 wcz
03380     01 44 06 16 |  if_a	mov	_var08, #1
03384     01 44 66 E6 |  if_be	neg	_var08, #1
03388     22 6D 02 F6 | 	mov	_var28, _var08
0338c     22 6B 02 F1 | 	add	_var27, _var08
03390     94 CC 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03394     93 00 A0 FD | 	call	#FCACHE_LOAD_
03398                 | LR__0097
03398                 | '       long[dl_ptr+4*i]:=$0
03398     1C 0E 06 F1 | 	add	objptr, #28
0339c     07 4F 02 FB | 	rdlong	_var13, objptr
033a0     1C 0E 86 F1 | 	sub	objptr, #28
033a4     1D 51 02 F6 | 	mov	_var14, _var03
033a8     02 50 66 F0 | 	shl	_var14, #2
033ac     28 4F 02 F1 | 	add	_var13, _var14
033b0     27 01 68 FC | 	wrlong	#0, _var13
033b4     36 3B 02 F1 | 	add	_var03, _var28
033b8     35 3B 0A F2 | 	cmp	_var03, _var27 wz
033bc     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
033c0                 | LR__0098
033c0                 | LR__0099
033c0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
033c0     68 0E 06 F1 | 	add	objptr, #104
033c4     07 3B 02 FB | 	rdlong	_var03, objptr
033c8     1D 6F 02 F6 | 	mov	_var29, _var03
033cc     18 0E 06 F1 | 	add	objptr, #24
033d0     07 57 02 FB | 	rdlong	_var17, objptr
033d4     2B 6F 02 F1 | 	add	_var29, _var17
033d8     01 6E 86 F1 | 	sub	_var29, #1
033dc     18 0E 86 F1 | 	sub	objptr, #24
033e0     07 45 02 FB | 	rdlong	_var08, objptr
033e4     68 0E 86 F1 | 	sub	objptr, #104
033e8     22 6F 5A F2 | 	cmps	_var29, _var08 wcz
033ec     01 58 06 16 |  if_a	mov	_var18, #1
033f0     01 58 66 E6 |  if_be	neg	_var18, #1
033f4     2C 71 02 F6 | 	mov	_var30, _var18
033f8     2C 6F 02 F1 | 	add	_var29, _var18
033fc     7C CC 9F FE | 	loc	pa,	#(@LR__0101-@LR__0100)
03400     93 00 A0 FD | 	call	#FCACHE_LOAD_
03404                 | LR__0100
03404                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03404     07 4B 02 FB | 	rdlong	_var11, objptr
03408     1D 61 02 F6 | 	mov	_var22, _var03
0340c     68 0E 06 F1 | 	add	objptr, #104
03410     07 5D 02 FB | 	rdlong	_var20, objptr
03414     2E 61 82 F1 | 	sub	_var22, _var20
03418     1C 61 42 F0 | 	shr	_var22, _var02
0341c     28 0E 06 F1 | 	add	objptr, #40
03420     07 51 02 FB | 	rdlong	_var14, objptr
03424     30 51 02 FD | 	qmul	_var14, _var22
03428     18 72 62 FD | 	getqx	_var31
0342c     02 72 66 F0 | 	shl	_var31, #2
03430     39 4B 02 F1 | 	add	_var11, _var31
03434     3B 75 02 F6 | 	mov	_var32, arg01
03438     03 74 06 F5 | 	and	_var32, #3
0343c     3A 4B 02 F1 | 	add	_var11, _var32
03440                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03440     0C 4A 66 F0 | 	shl	_var11, #12
03444     02 4A 06 F1 | 	add	_var11, #2
03448     3B 61 02 F6 | 	mov	_var22, arg01
0344c     30 60 06 F5 | 	and	_var22, #48
03450     02 60 46 F0 | 	shr	_var22, #2
03454     30 4B 02 F1 | 	add	_var11, _var22
03458     74 0E 86 F1 | 	sub	objptr, #116
0345c     07 5D 02 FB | 	rdlong	_var20, objptr
03460     1C 0E 86 F1 | 	sub	objptr, #28
03464     1D 65 02 F6 | 	mov	_var24, _var03
03468     02 64 66 F0 | 	shl	_var24, #2
0346c     32 5D 02 F1 | 	add	_var20, _var24
03470     2E 4B 62 FC | 	wrlong	_var11, _var20
03474     38 3B 02 F1 | 	add	_var03, _var30
03478     37 3B 0A F2 | 	cmp	_var03, _var29 wz
0347c     84 FF 9F 5D |  if_ne	jmp	#LR__0100
03480                 | LR__0101
03480                 | LR__0102
03480                 | _hng030rm_spin2_makedl_ret
03480     2D 00 64 FD | 	ret
03484                 | 
03484                 | '       
03484                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03484                 | ' 
03484                 | ' pub start(mode,base):result
03484                 | _hng030rm_spin2_start
03484     04 5A 05 F6 | 	mov	COUNT_, #4
03488     B0 00 A0 FD | 	call	#pushregs_
0348c     3B 85 02 F6 | 	mov	local01, arg01
03490                 | ' 
03490                 | ' ' initialize pointers and variables
03490                 | ' 
03490                 | ' border_ptr:=@bordercolor
03490     2C 0E 06 F1 | 	add	objptr, #44
03494     07 87 02 F6 | 	mov	local02, objptr
03498     24 0E 86 F1 | 	sub	objptr, #36
0349c     07 87 62 FC | 	wrlong	local02, objptr
034a0                 | ' font_ptr:=@st_font
034a0     08 00 00 FF 
034a4     00 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
034a8     04 0E 86 F1 | 	sub	objptr, #4
034ac     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
034b0                 | ' hdmibase:=base
034b0     20 0E 06 F1 | 	add	objptr, #32
034b4     07 79 62 FC | 	wrlong	arg02, objptr
034b8     24 0E 86 F1 | 	sub	objptr, #36
034bc                 | ' p1:=@putpixel1
034bc     07 77 02 F6 | 	mov	arg01, objptr
034c0     10 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
034c4     08 00 00 FF 
034c8     00 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
034cc     D8 2F B0 FD | 	call	#__system___make_methodptr
034d0     18 89 02 F6 | 	mov	local03, result1
034d4     DC 0E 06 F1 | 	add	objptr, #220
034d8     07 89 62 FC | 	wrlong	local03, objptr
034dc     DC 0E 86 F1 | 	sub	objptr, #220
034e0                 | ' p2:=@putpixel2
034e0     07 77 02 F6 | 	mov	arg01, objptr
034e4     11 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
034e8     BC 2F B0 FD | 	call	#__system___make_methodptr
034ec     18 89 02 F6 | 	mov	local03, result1
034f0     E0 0E 06 F1 | 	add	objptr, #224
034f4     07 89 62 FC | 	wrlong	local03, objptr
034f8     E0 0E 86 F1 | 	sub	objptr, #224
034fc                 | ' p4:=@putpixel4
034fc     07 77 02 F6 | 	mov	arg01, objptr
03500     12 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
03504     A0 2F B0 FD | 	call	#__system___make_methodptr
03508     18 89 02 F6 | 	mov	local03, result1
0350c     E4 0E 06 F1 | 	add	objptr, #228
03510     07 89 62 FC | 	wrlong	local03, objptr
03514     E4 0E 86 F1 | 	sub	objptr, #228
03518                 | ' p8:=@putpixel8
03518     07 77 02 F6 | 	mov	arg01, objptr
0351c     13 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
03520     84 2F B0 FD | 	call	#__system___make_methodptr
03524     18 89 02 F6 | 	mov	local03, result1
03528     E8 0E 06 F1 | 	add	objptr, #232
0352c     07 89 62 FC | 	wrlong	local03, objptr
03530     E8 0E 86 F1 | 	sub	objptr, #232
03534                 | ' 
03534                 | ' 
03534                 | ' ' the mode has to be set here to enable computing the buffer length
03534                 | ' 
03534                 | ' setmode(mode)
03534     42 77 02 F6 | 	mov	arg01, local01
03538     68 F5 BF FD | 	call	#_hng030rm_spin2_setmode
0353c                 | ' 
0353c                 | ' vblank_ptr:=@vblank
0353c     40 0E 06 F1 | 	add	objptr, #64
03540     07 87 02 F6 | 	mov	local02, objptr
03544     34 0E 86 F1 | 	sub	objptr, #52
03548     07 87 62 FC | 	wrlong	local02, objptr
0354c                 | ' cursor_ptr:=@cursor_x
0354c     28 0E 06 F1 | 	add	objptr, #40
03550     07 87 02 F6 | 	mov	local02, objptr
03554     24 0E 86 F1 | 	sub	objptr, #36
03558     07 87 62 FC | 	wrlong	local02, objptr
0355c                 | ' 
0355c                 | ' fontnum_ptr:=@fontnum
0355c     88 0E 06 F1 | 	add	objptr, #136
03560     07 87 02 F6 | 	mov	local02, objptr
03564     78 0E 86 F1 | 	sub	objptr, #120
03568     07 87 62 FC | 	wrlong	local02, objptr
0356c                 | ' 
0356c                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
0356c     78 0E 06 F1 | 	add	objptr, #120
03570     07 01 68 FC | 	wrlong	#0, objptr
03574                 | ' bytemove(@colors,@vgacolors,16)
03574     1C 0E 06 F1 | 	add	objptr, #28
03578     07 77 02 F6 | 	mov	arg01, objptr
0357c     B4 0E 86 F1 | 	sub	objptr, #180
03580     0F 00 00 FF 
03584     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
03588     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0358c     0F 00 00 FF 
03590     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03594     10 7A 06 F6 | 	mov	arg03, #16
03598     B4 2D B0 FD | 	call	#__system____builtin_memmove
0359c                 | ' 
0359c                 | ' ' initialize a cursor
0359c                 | ' 
0359c                 | ' cursor_x:=0
0359c     34 0E 06 F1 | 	add	objptr, #52
035a0     07 01 48 FC | 	wrbyte	#0, objptr
035a4                 | ' cursor_y:=0
035a4     01 0E 06 F1 | 	add	objptr, #1
035a8     07 01 48 FC | 	wrbyte	#0, objptr
035ac                 | ' cursor_sh:=14
035ac     01 0E 06 F1 | 	add	objptr, #1
035b0     07 1D 48 FC | 	wrbyte	#14, objptr
035b4     36 0E 86 F1 | 	sub	objptr, #54
035b8                 | ' 
035b8                 | ' 
035b8                 | ' ' start the cog
035b8                 | ' 
035b8                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
035b8     0F 00 00 FF 
035bc     68 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
035c0     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
035c4     0F 00 00 FF 
035c8     68 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
035cc     07 7B 02 F6 | 	mov	arg03, objptr
035d0     10 76 06 F6 | 	mov	arg01, #16
035d4     28 7A 62 FD | 	setq	arg03
035d8     3C 77 F2 FC | 	coginit	arg01, arg02 wc
035dc     01 76 66 C6 |  if_b	neg	arg01, #1
035e0     3B 31 02 F6 | 	mov	result1, arg01
035e4     18 8B 02 F6 | 	mov	local04, result1
035e8     28 0E 06 F1 | 	add	objptr, #40
035ec     07 8B 62 FC | 	wrlong	local04, objptr
035f0     28 0E 86 F1 | 	sub	objptr, #40
035f4                 | ' waitms(20)
035f4     14 76 06 F6 | 	mov	arg01, #20
035f8     B4 30 B0 FD | 	call	#__system___waitms
035fc                 | ' 
035fc                 | ' ' clear the screen and set the colors to green on black
035fc                 | ' 
035fc                 | ' cls(c_green,c_black)
035fc     C7 76 06 F6 | 	mov	arg01, #199
03600     00 78 06 F6 | 	mov	arg02, #0
03604     18 ED BF FD | 	call	#_hng030rm_spin2_cls
03608                 | ' setbordercolor(0,0,128)
03608     00 76 06 F6 | 	mov	arg01, #0
0360c     00 78 06 F6 | 	mov	arg02, #0
03610     80 7A 06 F6 | 	mov	arg03, #128
03614     E4 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
03618                 | ' setwritecolors(c_green,c_black)
03618                 | ' 
03618                 | ' 
03618                 | ' write_color:=ff
03618     38 0E 06 F1 | 	add	objptr, #56
0361c     07 8F 69 FC | 	wrlong	#199, objptr
03620                 | ' write_background:=bb
03620     04 0E 06 F1 | 	add	objptr, #4
03624     07 01 68 FC | 	wrlong	#0, objptr
03628                 | ' 
03628                 | ' return cog
03628     14 0E 86 F1 | 	sub	objptr, #20
0362c     07 31 02 FB | 	rdlong	result1, objptr
03630     28 0E 86 F1 | 	sub	objptr, #40
03634     AF F0 03 F6 | 	mov	ptra, fp
03638     BF 00 A0 FD | 	call	#popregs_
0363c                 | _hng030rm_spin2_start_ret
0363c     2D 00 64 FD | 	ret
03640                 | 
03640                 | ' 'this is the object and not a program
03640                 | ' 
03640                 | ' pub start() :cog
03640                 | _retrocog_spin2_start
03640     02 5A 05 F6 | 	mov	COUNT_, #2
03644     B0 00 A0 FD | 	call	#pushregs_
03648                 | ' 
03648                 | ' cog:=cogspin(16,serialcog(),@serialstack)
03648     07 85 02 F6 | 	mov	local01, objptr
0364c     01 00 00 FF 
03650     40 0F 06 F1 | 	add	objptr, ##832
03654     07 87 02 F6 | 	mov	local02, objptr
03658     43 85 62 FC | 	wrlong	local01, local02
0365c     04 86 06 F1 | 	add	local02, #4
03660     43 29 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
03664     07 7B 02 F6 | 	mov	arg03, objptr
03668     01 00 00 FF 
0366c     40 0F 86 F1 | 	sub	objptr, ##832
03670     10 76 06 F6 | 	mov	arg01, #16
03674     28 7A 62 FD | 	setq	arg03
03678     04 77 F2 FC | 	coginit	arg01, entryptr__ wc
0367c     01 76 66 C6 |  if_b	neg	arg01, #1
03680     3B 31 02 F6 | 	mov	result1, arg01
03684                 | ' return cog
03684     AF F0 03 F6 | 	mov	ptra, fp
03688     BF 00 A0 FD | 	call	#popregs_
0368c                 | _retrocog_spin2_start_ret
0368c     2D 00 64 FD | 	ret
03690                 | 
03690                 | ' 
03690                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03690                 | _retrocog_spin2_serialcog
03690     0C 5A 05 F6 | 	mov	COUNT_, #12
03694     B0 00 A0 FD | 	call	#pushregs_
03698                 | ' 
03698                 | ' 'start serial and midi
03698                 | ' 
03698                 | ' serial_start(rxpin, txpin, baudrate)
03698     20 76 06 F6 | 	mov	arg01, #32
0369c     21 78 06 F6 | 	mov	arg02, #33
036a0     A6 0E 00 FF 
036a4     00 7A 06 F6 | 	mov	arg03, ##1920000
036a8     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
036ac                 | ' serial_start(midiin,midiout,mbaudrate)
036ac     1D 76 06 F6 | 	mov	arg01, #29
036b0     1E 78 06 F6 | 	mov	arg02, #30
036b4     3D 00 00 FF 
036b8     12 7A 06 F6 | 	mov	arg03, ##31250
036bc     98 05 B0 FD | 	call	#_retrocog_spin2_serial_start
036c0                 | ' serial_start(srxpin,stxpin,sbaudrate)
036c0     42 0F 00 FF 
036c4     80 84 06 F6 | 	mov	local01, ##2000000
036c8     3F 76 06 F6 | 	mov	arg01, #63
036cc     3E 78 06 F6 | 	mov	arg02, #62
036d0     42 0F 00 FF 
036d4     80 7A 06 F6 | 	mov	arg03, ##2000000
036d8     7C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
036dc                 | ' 
036dc                 | ' mb:=(-1)
036dc     01 86 66 F6 | 	neg	local02, #1
036e0                 | ' b:=(-1)
036e0     01 88 66 F6 | 	neg	local03, #1
036e4                 | ' 
036e4                 | ' mousefront:=0
036e4     00 8A 06 F6 | 	mov	local04, #0
036e8     08 0E 06 F1 | 	add	objptr, #8
036ec     07 01 68 FC | 	wrlong	#0, objptr
036f0                 | ' mousetail:=0
036f0     04 0E 06 F1 | 	add	objptr, #4
036f4     07 01 68 FC | 	wrlong	#0, objptr
036f8     0C 0E 86 F1 | 	sub	objptr, #12
036fc                 | ' kbdfront:=0
036fc     07 01 68 FC | 	wrlong	#0, objptr
03700                 | ' kbdtail:=0
03700     04 0E 06 F1 | 	add	objptr, #4
03704     07 01 68 FC | 	wrlong	#0, objptr
03708                 | ' midifront:=0
03708     0C 0E 06 F1 | 	add	objptr, #12
0370c     07 01 68 FC | 	wrlong	#0, objptr
03710                 | ' miditail:=0
03710     04 0E 06 F1 | 	add	objptr, #4
03714     07 01 68 FC | 	wrlong	#0, objptr
03718                 | ' serialfront:=0
03718     04 0E 06 F1 | 	add	objptr, #4
0371c     07 01 68 FC | 	wrlong	#0, objptr
03720                 | ' serialtail:=0
03720     04 0E 06 F1 | 	add	objptr, #4
03724     07 01 68 FC | 	wrlong	#0, objptr
03728                 | ' long[$30]:=0
03728     30 00 6C FC | 	wrlong	#0, #48
0372c                 | ' long[$34]:=0
0372c     34 00 6C FC | 	wrlong	#0, #52
03730                 | ' long[$38]:=0
03730     38 00 6C FC | 	wrlong	#0, #56
03734     1C 0E 86 F1 | 	sub	objptr, #28
03738                 | ' long[$3C]:=0
03738     3C 00 6C FC | 	wrlong	#0, #60
0373c                 | ' 
0373c                 | ' repeat
0373c                 | LR__0103
0373c                 | ' 
0373c                 | ' '  repeat 
0373c                 | '   rr:=rxcheck(rxpin)
0373c     20 76 06 F6 | 	mov	arg01, #32
03740     90 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03744     18 8D 02 F6 | 	mov	local05, result1
03748                 | '   mrr:=rxcheck(midiin)
03748     1D 76 06 F6 | 	mov	arg01, #29
0374c     84 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03750     18 8F 02 F6 | 	mov	local06, result1
03754                 | '   srr:=rxcheck(srxpin)
03754     3F 8A 06 F6 | 	mov	local04, #63
03758     3F 76 06 F6 | 	mov	arg01, #63
0375c     74 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03760     18 91 02 F6 | 	mov	local07, result1
03764     48 93 02 F6 | 	mov	local08, local07
03768                 | ' 
03768                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03768                 | ' 
03768                 | '   
03768                 | ' ' midi. Must be >= $80 for a command
03768                 | ' '$80-$8F - 3 bytes note off. note, velocity
03768                 | ' '$90-$9F - 3 bytes note on, note, velocity
03768                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03768                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03768                 | ' '$C0-$CF - 2 bytes program change
03768                 | ' '$D0-$DF - 2 bytes mono aftertouch
03768                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03768                 | ' '$F0-$FF - 1 byte
03768                 | '   
03768                 | '   if srr>=0
03768     00 92 5E F2 | 	cmps	local08, #0 wcz
0376c     78 00 90 CD |  if_b	jmp	#LR__0105
03770                 | '   
03770                 | '     if serialfront<>((serialtail-1) //32)
03770     1C 0E 06 F1 | 	add	objptr, #28
03774     07 91 02 FB | 	rdlong	local07, objptr
03778     48 8B 02 F6 | 	mov	local04, local07
0377c     01 8A 86 F1 | 	sub	local04, #1
03780     45 85 52 F6 | 	abs	local01, local04 wc
03784     1F 84 06 F5 | 	and	local01, #31
03788     42 85 62 C6 |  if_b	neg	local01, local01
0378c     04 0E 86 F1 | 	sub	objptr, #4
03790     07 95 02 FB | 	rdlong	local09, objptr
03794     18 0E 86 F1 | 	sub	objptr, #24
03798     4A 97 02 F6 | 	mov	local10, local09
0379c     42 97 0A F2 | 	cmp	local10, local01 wz
037a0     44 00 90 AD |  if_e	jmp	#LR__0104
037a4                 | '       serialbuf[serialfront]:=srr
037a4     18 0E 06 F1 | 	add	objptr, #24
037a8     07 8B 02 FB | 	rdlong	local04, objptr
037ac     01 00 00 FF 
037b0     08 0F 06 F1 | 	add	objptr, ##776
037b4     07 8B 02 F1 | 	add	local04, objptr
037b8     45 93 42 FC | 	wrbyte	local08, local04
037bc                 | '       serialfront+=1
037bc     01 00 00 FF 
037c0     08 0F 86 F1 | 	sub	objptr, ##776
037c4     07 85 02 FB | 	rdlong	local01, objptr
037c8     01 84 06 F1 | 	add	local01, #1
037cc     07 85 62 FC | 	wrlong	local01, objptr
037d0                 | '       serialfront:=serialfront // 32
037d0     42 91 02 F6 | 	mov	local07, local01
037d4     48 8B 52 F6 | 	abs	local04, local07 wc
037d8     1F 8A 06 F5 | 	and	local04, #31
037dc     45 8B 62 C6 |  if_b	neg	local04, local04
037e0     07 8B 62 FC | 	wrlong	local04, objptr
037e4     18 0E 86 F1 | 	sub	objptr, #24
037e8                 | LR__0104
037e8                 | LR__0105
037e8                 | '     
037e8                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
037e8     80 8E 5E F2 | 	cmps	local06, #128 wcz
037ec     08 00 90 CD |  if_b	jmp	#LR__0106
037f0     BF 8E 5E F2 | 	cmps	local06, #191 wcz
037f4     10 00 90 ED |  if_be	jmp	#LR__0107
037f8                 | LR__0106
037f8     E0 8E 5E F2 | 	cmps	local06, #224 wcz
037fc     18 00 90 CD |  if_b	jmp	#LR__0108
03800     EF 8E 5E F2 | 	cmps	local06, #239 wcz
03804     10 00 90 1D |  if_a	jmp	#LR__0108
03808                 | LR__0107
03808                 | '     mb:=2
03808     02 86 06 F6 | 	mov	local02, #2
0380c                 | '     midireport:=mrr<<24
0380c     47 8B 02 F6 | 	mov	local04, local06
03810     18 8A 66 F0 | 	shl	local04, #24
03814     45 99 02 F6 | 	mov	local11, local04
03818                 | LR__0108
03818                 | ' 
03818                 | '   if (mrr>=$C0) && (mrr<=$DF)
03818     C0 8E 5E F2 | 	cmps	local06, #192 wcz
0381c     18 00 90 CD |  if_b	jmp	#LR__0109
03820     DF 8E 5E F2 | 	cmps	local06, #223 wcz
03824     10 00 90 1D |  if_a	jmp	#LR__0109
03828                 | '     mb:=1
03828     01 86 06 F6 | 	mov	local02, #1
0382c                 | '     midireport:=mrr<<24
0382c     47 8B 02 F6 | 	mov	local04, local06
03830     18 8A 66 F0 | 	shl	local04, #24
03834     45 99 02 F6 | 	mov	local11, local04
03838                 | LR__0109
03838                 | '   
03838                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03838     F0 8E 5E F2 | 	cmps	local06, #240 wcz
0383c                 | '     mb:=4
0383c     04 86 06 36 |  if_ae	mov	local02, #4
03840                 | '     midireport:=mrr<<24  
03840     47 99 02 36 |  if_ae	mov	local11, local06
03844     18 98 66 30 |  if_ae	shl	local11, #24
03848                 | '   
03848                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
03848     80 8E 5E F2 | 	cmps	local06, #128 wcz
0384c     44 00 90 3D |  if_ae	jmp	#LR__0111
03850     00 86 5E F2 | 	cmps	local02, #0 wcz
03854     3C 00 90 ED |  if_be	jmp	#LR__0111
03858     00 8E 5E F2 | 	cmps	local06, #0 wcz
0385c     34 00 90 CD |  if_b	jmp	#LR__0111
03860                 | '     
03860                 | '     mb--
03860     43 8B 02 F6 | 	mov	local04, local02
03864     43 91 02 F6 | 	mov	local07, local02
03868     01 90 86 F1 | 	sub	local07, #1
0386c     48 87 02 F6 | 	mov	local02, local07
03870                 | '     if mb<3
03870     03 86 5E F2 | 	cmps	local02, #3 wcz
03874     1C 00 90 3D |  if_ae	jmp	#LR__0110
03878                 | '       midireport+=mrr<<(mb<<3)
03878     4C 8B 02 F6 | 	mov	local04, local11
0387c     47 91 02 F6 | 	mov	local07, local06
03880     43 85 02 F6 | 	mov	local01, local02
03884     03 84 66 F0 | 	shl	local01, #3
03888     42 91 62 F0 | 	shl	local07, local01
0388c     48 8B 02 F1 | 	add	local04, local07
03890     45 99 02 F6 | 	mov	local11, local04
03894                 | LR__0110
03894                 | LR__0111
03894                 | '   
03894                 | '   if mb==0
03894     00 86 0E F2 | 	cmp	local02, #0 wz
03898     80 00 90 5D |  if_ne	jmp	#LR__0113
0389c                 | '     
0389c                 | '     if midifront<>((miditail-1) //32)
0389c     14 0E 06 F1 | 	add	objptr, #20
038a0     07 91 02 FB | 	rdlong	local07, objptr
038a4     48 8B 02 F6 | 	mov	local04, local07
038a8     01 8A 86 F1 | 	sub	local04, #1
038ac     45 85 52 F6 | 	abs	local01, local04 wc
038b0     1F 84 06 F5 | 	and	local01, #31
038b4     42 85 62 C6 |  if_b	neg	local01, local01
038b8     04 0E 86 F1 | 	sub	objptr, #4
038bc     07 95 02 FB | 	rdlong	local09, objptr
038c0     10 0E 86 F1 | 	sub	objptr, #16
038c4     4A 97 02 F6 | 	mov	local10, local09
038c8     42 97 0A F2 | 	cmp	local10, local01 wz
038cc     48 00 90 AD |  if_e	jmp	#LR__0112
038d0                 | '       midibuf[midifront]:=midireport
038d0     10 0E 06 F1 | 	add	objptr, #16
038d4     07 8B 02 FB | 	rdlong	local04, objptr
038d8     02 8A 66 F0 | 	shl	local04, #2
038dc     01 00 00 FF 
038e0     90 0E 06 F1 | 	add	objptr, ##656
038e4     07 8B 02 F1 | 	add	local04, objptr
038e8     45 99 62 FC | 	wrlong	local11, local04
038ec                 | '       midifront+=1
038ec     01 00 00 FF 
038f0     90 0E 86 F1 | 	sub	objptr, ##656
038f4     07 85 02 FB | 	rdlong	local01, objptr
038f8     01 84 06 F1 | 	add	local01, #1
038fc     07 85 62 FC | 	wrlong	local01, objptr
03900                 | '       midifront:=midifront // 32
03900     42 91 02 F6 | 	mov	local07, local01
03904     48 8B 52 F6 | 	abs	local04, local07 wc
03908     1F 8A 06 F5 | 	and	local04, #31
0390c     45 8B 62 C6 |  if_b	neg	local04, local04
03910     07 8B 62 FC | 	wrlong	local04, objptr
03914     10 0E 86 F1 | 	sub	objptr, #16
03918                 | LR__0112
03918                 | '     mb:=(-1)
03918     01 86 66 F6 | 	neg	local02, #1
0391c                 | LR__0113
0391c                 | ' 
0391c                 | ' 'Keyboard and mouse
0391c                 | ' 
0391c                 | '   if (rr>=$80) && (rr<>$FF)
0391c     80 8C 5E F2 | 	cmps	local05, #128 wcz
03920     18 00 90 CD |  if_b	jmp	#LR__0114
03924     FF 8C 0E F2 | 	cmp	local05, #255 wz
03928     10 00 90 AD |  if_e	jmp	#LR__0114
0392c                 | '     b:=3
0392c     03 88 06 F6 | 	mov	local03, #3
03930                 | '     kbmreport:=rr<<24
03930     46 8B 02 F6 | 	mov	local04, local05
03934     18 8A 66 F0 | 	shl	local04, #24
03938     45 9B 02 F6 | 	mov	local12, local04
0393c                 | LR__0114
0393c                 | '   
0393c                 | '   if (rr<$80) && (b>0) && (rr>=0)
0393c     80 8C 5E F2 | 	cmps	local05, #128 wcz
03940     30 00 90 3D |  if_ae	jmp	#LR__0115
03944     00 88 5E F2 | 	cmps	local03, #0 wcz
03948     28 00 90 ED |  if_be	jmp	#LR__0115
0394c     00 8C 5E F2 | 	cmps	local05, #0 wcz
03950     20 00 90 CD |  if_b	jmp	#LR__0115
03954                 | '     b--
03954     01 88 86 F1 | 	sub	local03, #1
03958                 | '     kbmreport+=rr<<(b<<3)  
03958     4D 8B 02 F6 | 	mov	local04, local12
0395c     46 91 02 F6 | 	mov	local07, local05
03960     44 85 02 F6 | 	mov	local01, local03
03964     03 84 66 F0 | 	shl	local01, #3
03968     42 91 62 F0 | 	shl	local07, local01
0396c     48 8B 02 F1 | 	add	local04, local07
03970     45 9B 02 F6 | 	mov	local12, local04
03974                 | LR__0115
03974                 | '   
03974                 | '   if (rr==$FF)
03974     FF 8C 0E F2 | 	cmp	local05, #255 wz
03978                 | '     b:=0   
03978     00 88 06 A6 |  if_e	mov	local03, #0
0397c                 | ' 
0397c                 | '   if b==0  
0397c     00 88 0E F2 | 	cmp	local03, #0 wz
03980     0C 01 90 5D |  if_ne	jmp	#LR__0120
03984                 | '  
03984                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03984     00 00 40 FF 
03988     00 9A 1E F2 | 	cmp	local12, ##-2147483648 wcz
0398c     80 00 90 CD |  if_b	jmp	#LR__0117
03990     00 80 43 FF 
03994     00 9A 1E F2 | 	cmp	local12, ##-2030043136 wcz
03998     74 00 90 3D |  if_ae	jmp	#LR__0117
0399c                 | '       if mousefront<>((mousetail-1) //128)
0399c     0C 0E 06 F1 | 	add	objptr, #12
039a0     07 91 02 FB | 	rdlong	local07, objptr
039a4     48 8B 02 F6 | 	mov	local04, local07
039a8     01 8A 86 F1 | 	sub	local04, #1
039ac     45 85 52 F6 | 	abs	local01, local04 wc
039b0     7F 84 06 F5 | 	and	local01, #127
039b4     42 85 62 C6 |  if_b	neg	local01, local01
039b8     04 0E 86 F1 | 	sub	objptr, #4
039bc     07 95 02 FB | 	rdlong	local09, objptr
039c0     08 0E 86 F1 | 	sub	objptr, #8
039c4     4A 97 02 F6 | 	mov	local10, local09
039c8     42 97 0A F2 | 	cmp	local10, local01 wz
039cc     40 00 90 AD |  if_e	jmp	#LR__0116
039d0                 | '         mousebuf[mousefront]:=kbmreport
039d0     08 0E 06 F1 | 	add	objptr, #8
039d4     07 8B 02 FB | 	rdlong	local04, objptr
039d8     02 8A 66 F0 | 	shl	local04, #2
039dc     98 0E 06 F1 | 	add	objptr, #152
039e0     07 8B 02 F1 | 	add	local04, objptr
039e4     45 9B 62 FC | 	wrlong	local12, local04
039e8                 | '         mousefront+=1
039e8     98 0E 86 F1 | 	sub	objptr, #152
039ec     07 85 02 FB | 	rdlong	local01, objptr
039f0     01 84 06 F1 | 	add	local01, #1
039f4     07 85 62 FC | 	wrlong	local01, objptr
039f8                 | '         mousefront:=mousefront // 128
039f8     42 91 02 F6 | 	mov	local07, local01
039fc     48 8B 52 F6 | 	abs	local04, local07 wc
03a00     7F 8A 06 F5 | 	and	local04, #127
03a04     45 8B 62 C6 |  if_b	neg	local04, local04
03a08     07 8B 62 FC | 	wrlong	local04, objptr
03a0c     08 0E 86 F1 | 	sub	objptr, #8
03a10                 | LR__0116
03a10                 | LR__0117
03a10                 | '     b:=(-1)
03a10     01 88 66 F6 | 	neg	local03, #1
03a14                 | ' 
03a14                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03a14     00 80 43 FF 
03a18     00 9A 1E F2 | 	cmp	local12, ##-2030043136 wcz
03a1c     6C 00 90 CD |  if_b	jmp	#LR__0119
03a20     00 00 45 FF 
03a24     00 9A 1E F2 | 	cmp	local12, ##-1979711488 wcz
03a28     60 00 90 3D |  if_ae	jmp	#LR__0119
03a2c                 | '       if kbdfront<>((kbdtail-1) //32)
03a2c     04 0E 06 F1 | 	add	objptr, #4
03a30     07 91 02 FB | 	rdlong	local07, objptr
03a34     04 0E 86 F1 | 	sub	objptr, #4
03a38     48 8B 02 F6 | 	mov	local04, local07
03a3c     01 8A 86 F1 | 	sub	local04, #1
03a40     45 85 52 F6 | 	abs	local01, local04 wc
03a44     1F 84 06 F5 | 	and	local01, #31
03a48     42 85 62 C6 |  if_b	neg	local01, local01
03a4c     07 97 02 FB | 	rdlong	local10, objptr
03a50     42 97 0A F2 | 	cmp	local10, local01 wz
03a54     34 00 90 AD |  if_e	jmp	#LR__0118
03a58                 | '         kbdbuf[kbdfront]:=kbmreport
03a58     07 8B 02 FB | 	rdlong	local04, objptr
03a5c     02 8A 66 F0 | 	shl	local04, #2
03a60     20 0E 06 F1 | 	add	objptr, #32
03a64     07 8B 02 F1 | 	add	local04, objptr
03a68     45 9B 62 FC | 	wrlong	local12, local04
03a6c                 | '         kbdfront+=1
03a6c     20 0E 86 F1 | 	sub	objptr, #32
03a70     07 91 02 FB | 	rdlong	local07, objptr
03a74     01 90 06 F1 | 	add	local07, #1
03a78     07 91 62 FC | 	wrlong	local07, objptr
03a7c                 | '         kbdfront:=kbdfront // 32
03a7c     48 8B 52 F6 | 	abs	local04, local07 wc
03a80     1F 8A 06 F5 | 	and	local04, #31
03a84     45 8B 62 C6 |  if_b	neg	local04, local04
03a88     07 8B 62 FC | 	wrlong	local04, objptr
03a8c                 | LR__0118
03a8c                 | LR__0119
03a8c                 | '     b:=(-1)
03a8c     01 88 66 F6 | 	neg	local03, #1
03a90                 | LR__0120
03a90                 | ' 
03a90                 | ' 
03a90                 | '   if long[$30]==0
03a90     30 8A 0E FB | 	rdlong	local04, #48 wz
03a94     5C 00 90 5D |  if_ne	jmp	#LR__0122
03a98                 | '     if kbdfront<>kbdtail
03a98     07 8B 02 FB | 	rdlong	local04, objptr
03a9c     04 0E 06 F1 | 	add	objptr, #4
03aa0     07 85 02 FB | 	rdlong	local01, objptr
03aa4     04 0E 86 F1 | 	sub	objptr, #4
03aa8     42 8B 0A F2 | 	cmp	local04, local01 wz
03aac     44 00 90 AD |  if_e	jmp	#LR__0121
03ab0                 | '       long[$30]:=kbdbuf[kbdtail]
03ab0     04 0E 06 F1 | 	add	objptr, #4
03ab4     07 8B 02 FB | 	rdlong	local04, objptr
03ab8     02 8A 66 F0 | 	shl	local04, #2
03abc     1C 0E 06 F1 | 	add	objptr, #28
03ac0     07 8B 02 F1 | 	add	local04, objptr
03ac4     45 97 02 FB | 	rdlong	local10, local04
03ac8     30 96 66 FC | 	wrlong	local10, #48
03acc                 | '       kbdtail++
03acc     1C 0E 86 F1 | 	sub	objptr, #28
03ad0     07 97 02 FB | 	rdlong	local10, objptr
03ad4     4B 85 02 F6 | 	mov	local01, local10
03ad8     01 84 06 F1 | 	add	local01, #1
03adc     07 85 62 FC | 	wrlong	local01, objptr
03ae0                 | '       kbdtail:= kbdtail // 32
03ae0     42 8B 52 F6 | 	abs	local04, local01 wc
03ae4     1F 8A 06 F5 | 	and	local04, #31
03ae8     45 8B 62 C6 |  if_b	neg	local04, local04
03aec     07 8B 62 FC | 	wrlong	local04, objptr
03af0     04 0E 86 F1 | 	sub	objptr, #4
03af4                 | LR__0121
03af4                 | LR__0122
03af4                 | '       
03af4                 | '   if long[$34]==0
03af4     34 8A 0E FB | 	rdlong	local04, #52 wz
03af8     64 00 90 5D |  if_ne	jmp	#LR__0124
03afc                 | '     if mousefront<>mousetail
03afc     08 0E 06 F1 | 	add	objptr, #8
03b00     07 8B 02 FB | 	rdlong	local04, objptr
03b04     04 0E 06 F1 | 	add	objptr, #4
03b08     07 97 02 FB | 	rdlong	local10, objptr
03b0c     0C 0E 86 F1 | 	sub	objptr, #12
03b10     4B 85 02 F6 | 	mov	local01, local10
03b14     42 8B 0A F2 | 	cmp	local04, local01 wz
03b18     44 00 90 AD |  if_e	jmp	#LR__0123
03b1c                 | '       long[$34]:=mousebuf[mousetail]
03b1c     0C 0E 06 F1 | 	add	objptr, #12
03b20     07 8B 02 FB | 	rdlong	local04, objptr
03b24     02 8A 66 F0 | 	shl	local04, #2
03b28     94 0E 06 F1 | 	add	objptr, #148
03b2c     07 8B 02 F1 | 	add	local04, objptr
03b30     45 97 02 FB | 	rdlong	local10, local04
03b34     34 96 66 FC | 	wrlong	local10, #52
03b38                 | '       mousetail++
03b38     94 0E 86 F1 | 	sub	objptr, #148
03b3c     07 97 02 FB | 	rdlong	local10, objptr
03b40     4B 85 02 F6 | 	mov	local01, local10
03b44     01 84 06 F1 | 	add	local01, #1
03b48     07 85 62 FC | 	wrlong	local01, objptr
03b4c                 | '       mousetail:= mousetail // 128
03b4c     42 8B 52 F6 | 	abs	local04, local01 wc
03b50     7F 8A 06 F5 | 	and	local04, #127
03b54     45 8B 62 C6 |  if_b	neg	local04, local04
03b58     07 8B 62 FC | 	wrlong	local04, objptr
03b5c     0C 0E 86 F1 | 	sub	objptr, #12
03b60                 | LR__0123
03b60                 | LR__0124
03b60                 | ' 
03b60                 | '       
03b60                 | '   if long[$38]==0
03b60     38 8A 0E FB | 	rdlong	local04, #56 wz
03b64     6C 00 90 5D |  if_ne	jmp	#LR__0126
03b68                 | '     if midifront<>miditail
03b68     10 0E 06 F1 | 	add	objptr, #16
03b6c     07 8B 02 FB | 	rdlong	local04, objptr
03b70     04 0E 06 F1 | 	add	objptr, #4
03b74     07 97 02 FB | 	rdlong	local10, objptr
03b78     14 0E 86 F1 | 	sub	objptr, #20
03b7c     4B 85 02 F6 | 	mov	local01, local10
03b80     42 8B 0A F2 | 	cmp	local04, local01 wz
03b84     4C 00 90 AD |  if_e	jmp	#LR__0125
03b88                 | '       long[$38]:=midibuf[miditail]
03b88     14 0E 06 F1 | 	add	objptr, #20
03b8c     07 8B 02 FB | 	rdlong	local04, objptr
03b90     02 8A 66 F0 | 	shl	local04, #2
03b94     01 00 00 FF 
03b98     8C 0E 06 F1 | 	add	objptr, ##652
03b9c     07 8B 02 F1 | 	add	local04, objptr
03ba0     45 97 02 FB | 	rdlong	local10, local04
03ba4     38 96 66 FC | 	wrlong	local10, #56
03ba8                 | '       miditail++
03ba8     01 00 00 FF 
03bac     8C 0E 86 F1 | 	sub	objptr, ##652
03bb0     07 97 02 FB | 	rdlong	local10, objptr
03bb4     4B 85 02 F6 | 	mov	local01, local10
03bb8     01 84 06 F1 | 	add	local01, #1
03bbc     07 85 62 FC | 	wrlong	local01, objptr
03bc0                 | '       miditail:= miditail // 32
03bc0     42 8B 52 F6 | 	abs	local04, local01 wc
03bc4     1F 8A 06 F5 | 	and	local04, #31
03bc8     45 8B 62 C6 |  if_b	neg	local04, local04
03bcc     07 8B 62 FC | 	wrlong	local04, objptr
03bd0     14 0E 86 F1 | 	sub	objptr, #20
03bd4                 | LR__0125
03bd4                 | LR__0126
03bd4                 | '       
03bd4                 | '   if long[$3c]==0
03bd4     3C 8A 0E FB | 	rdlong	local04, #60 wz
03bd8     60 FB 9F 5D |  if_ne	jmp	#LR__0103
03bdc                 | '     if serialfront<>serialtail
03bdc     18 0E 06 F1 | 	add	objptr, #24
03be0     07 8B 02 FB | 	rdlong	local04, objptr
03be4     04 0E 06 F1 | 	add	objptr, #4
03be8     07 97 02 FB | 	rdlong	local10, objptr
03bec     1C 0E 86 F1 | 	sub	objptr, #28
03bf0     4B 85 02 F6 | 	mov	local01, local10
03bf4     42 8B 0A F2 | 	cmp	local04, local01 wz
03bf8     40 FB 9F AD |  if_e	jmp	#LR__0103
03bfc                 | '       byte[$3c]:=255
03bfc     3C FE 4D FC | 	wrbyte	#255, #60
03c00                 | '       byte[$3D]:=serialbuf[serialtail]
03c00     1C 0E 06 F1 | 	add	objptr, #28
03c04     07 8B 02 FB | 	rdlong	local04, objptr
03c08     01 00 00 FF 
03c0c     04 0F 06 F1 | 	add	objptr, ##772
03c10     07 8B 02 F1 | 	add	local04, objptr
03c14     45 97 C2 FA | 	rdbyte	local10, local04
03c18     3D 96 46 FC | 	wrbyte	local10, #61
03c1c                 | '       serialtail++
03c1c     01 00 00 FF 
03c20     04 0F 86 F1 | 	sub	objptr, ##772
03c24     07 97 02 FB | 	rdlong	local10, objptr
03c28     4B 85 02 F6 | 	mov	local01, local10
03c2c     01 84 06 F1 | 	add	local01, #1
03c30     07 85 62 FC | 	wrlong	local01, objptr
03c34                 | '       serialtail:= serialtail // 32
03c34     42 8B 52 F6 | 	abs	local04, local01 wc
03c38     1F 8A 06 F5 | 	and	local04, #31
03c3c     45 8B 62 C6 |  if_b	neg	local04, local04
03c40     07 8B 62 FC | 	wrlong	local04, objptr
03c44     1C 0E 86 F1 | 	sub	objptr, #28
03c48     F0 FA 9F FD | 	jmp	#LR__0103
03c4c     AF F0 03 F6 | 	mov	ptra, fp
03c50     BF 00 A0 FD | 	call	#popregs_
03c54                 | _retrocog_spin2_serialcog_ret
03c54     2D 00 64 FD | 	ret
03c58                 | 
03c58                 | '       
03c58                 | ' 
03c58                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03c58                 | ' 
03c58                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03c58                 | _retrocog_spin2_serial_start
03c58     04 5A 05 F6 | 	mov	COUNT_, #4
03c5c     B0 00 A0 FD | 	call	#pushregs_
03c60     3B 85 02 F6 | 	mov	local01, arg01
03c64     3C 87 02 F6 | 	mov	local02, arg02
03c68                 | ' 
03c68                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03c68     14 76 06 FB | 	rdlong	arg01, #20
03c6c     10 78 C6 F9 | 	decod	arg02, #16
03c70     3C 77 02 FD | 	qmul	arg01, arg02
03c74     19 88 62 FD | 	getqy	local03
03c78     18 8A 62 FD | 	getqx	local04
03c7c     28 88 62 FD | 	setq	local03
03c80     3D 8B 12 FD | 	qdiv	local04, arg03
03c84     18 30 62 FD | 	getqx	result1
03c88     18 7B 02 F6 | 	mov	arg03, result1
03c8c     FE FF 7F FF 
03c90     00 7A 06 F5 | 	and	arg03, ##-1024
03c94                 | ' bitmode |= 7                                                  ' set bits (8)
03c94     07 7A 46 F5 | 	or	arg03, #7
03c98                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03c98     40 84 62 FD | 	dirl	local01
03c9c     08 00 80 FF 
03ca0     42 7D 08 FC | 	wrpin	##4158, local01
03ca4     42 7B 12 FC | 	wxpin	arg03, local01
03ca8     42 01 28 FC | 	wypin	#0, local01
03cac     41 84 62 FD | 	dirh	local01
03cb0                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03cb0     40 86 62 FD | 	dirl	local02
03cb4     43 F9 08 FC | 	wrpin	#124, local02
03cb8     43 7B 12 FC | 	wxpin	arg03, local02
03cbc     43 01 28 FC | 	wypin	#0, local02
03cc0     41 86 62 FD | 	dirh	local02
03cc4                 | ' pinhigh(rxpin)
03cc4     59 84 62 FD | 	drvh	local01
03cc8     AF F0 03 F6 | 	mov	ptra, fp
03ccc     BF 00 A0 FD | 	call	#popregs_
03cd0                 | _retrocog_spin2_serial_start_ret
03cd0     2D 00 64 FD | 	ret
03cd4                 | 
03cd4                 | ' 
03cd4                 | ' pub rxcheck(pin) : rxbyte | check
03cd4                 | _retrocog_spin2_rxcheck
03cd4     03 5A 05 F6 | 	mov	COUNT_, #3
03cd8     B0 00 A0 FD | 	call	#pushregs_
03cdc     3B 85 02 F6 | 	mov	local01, arg01
03ce0                 | ' 
03ce0                 | ' '' Check for serial input
03ce0                 | ' '' -- returns -1 if nothing available
03ce0                 | ' 
03ce0                 | '   rxbyte := -1
03ce0     01 86 66 F6 | 	neg	local02, #1
03ce4                 | '   check := pinr(pin)
03ce4     42 77 02 F6 | 	mov	arg01, local01
03ce8     A4 29 B0 FD | 	call	#__system___pinread
03cec     18 89 0A F6 | 	mov	local03, result1 wz
03cf0                 | '   if (check)
03cf0                 | '     rxbyte := rdpin(pin) >> 24
03cf0     00 86 06 56 |  if_ne	mov	local02, #0
03cf4     42 87 8A 5A |  if_ne	rdpin	local02, local01
03cf8     18 86 46 50 |  if_ne	shr	local02, #24
03cfc     43 31 02 F6 | 	mov	result1, local02
03d00     AF F0 03 F6 | 	mov	ptra, fp
03d04     BF 00 A0 FD | 	call	#popregs_
03d08                 | _retrocog_spin2_rxcheck_ret
03d08     2D 00 64 FD | 	ret
03d0c                 | 
03d0c                 | _shell_c_getcwd
03d0c     06 5A 05 F6 | 	mov	COUNT_, #6
03d10     B0 00 A0 FD | 	call	#pushregs_
03d14     3B 85 02 F6 | 	mov	local01, arg01
03d18     3C 87 02 F6 | 	mov	local02, arg02
03d1c     02 00 00 FF 
03d20     14 2A 06 F1 | 	add	ptr__shell_c_dat__, ##1044
03d24     15 77 02 F6 | 	mov	arg01, ptr__shell_c_dat__
03d28     02 00 00 FF 
03d2c     14 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##1044
03d30     00 88 06 F6 | 	mov	local03, #0
03d34     D8 C2 9F FE | 	loc	pa,	#(@LR__0128-@LR__0127)
03d38     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d3c                 | LR__0127
03d3c     3B 8B CA FA | 	rdbyte	local04, arg01 wz
03d40     01 88 06 51 |  if_ne	add	local03, #1
03d44     01 76 06 51 |  if_ne	add	arg01, #1
03d48     F0 FF 9F 5D |  if_ne	jmp	#LR__0127
03d4c                 | LR__0128
03d4c     44 31 02 F6 | 	mov	result1, local03
03d50     02 8C 06 F6 | 	mov	local05, #2
03d54     18 8D 02 F1 | 	add	local05, result1
03d58     43 8D 1A F2 | 	cmp	local05, local02 wcz
03d5c     1C 00 90 ED |  if_be	jmp	#LR__0129
03d60     01 00 00 FF 
03d64     40 14 06 F1 | 	add	ptr___system__dat__, ##576
03d68     0A 05 68 FC | 	wrlong	#2, ptr___system__dat__
03d6c     01 00 00 FF 
03d70     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
03d74                 | '         _seterror( 2 );
03d74                 | '         return  (0) ;
03d74     00 30 06 F6 | 	mov	result1, #0
03d78     54 00 90 FD | 	jmp	#LR__0132
03d7c                 | LR__0129
03d7c     02 00 00 FF 
03d80     14 2A 06 F1 | 	add	ptr__shell_c_dat__, ##1044
03d84     15 8F C2 FA | 	rdbyte	local06, ptr__shell_c_dat__
03d88     02 00 00 FF 
03d8c     14 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##1044
03d90     07 8E 46 F7 | 	zerox	local06, #7
03d94     2F 8E 0E F2 | 	cmp	local06, #47 wz
03d98     20 00 90 5D |  if_ne	jmp	#LR__0130
03d9c     02 00 00 FF 
03da0     14 2A 06 F1 | 	add	ptr__shell_c_dat__, ##1044
03da4     15 79 02 F6 | 	mov	arg02, ptr__shell_c_dat__
03da8     02 00 00 FF 
03dac     14 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##1044
03db0     42 77 02 F6 | 	mov	arg01, local01
03db4     A0 26 B0 FD | 	call	#__system____builtin_strcpy
03db8     10 00 90 FD | 	jmp	#LR__0131
03dbc                 | LR__0130
03dbc     7A 00 00 FF 
03dc0     FC 78 06 F6 | 	mov	arg02, ##@LR__0950
03dc4     42 77 02 F6 | 	mov	arg01, local01
03dc8     8C 26 B0 FD | 	call	#__system____builtin_strcpy
03dcc                 | LR__0131
03dcc                 | '         __builtin_strcpy(buf, "/") ;
03dcc                 | '     }
03dcc                 | '     return buf;
03dcc     42 31 02 F6 | 	mov	result1, local01
03dd0                 | LR__0132
03dd0     AF F0 03 F6 | 	mov	ptra, fp
03dd4     BF 00 A0 FD | 	call	#popregs_
03dd8                 | _shell_c_getcwd_ret
03dd8     2D 00 64 FD | 	ret
03ddc                 | 
03ddc                 | _shell_c_cwd2
03ddc     01 00 00 FF 
03de0     00 2A 06 F1 | 	add	ptr__shell_c_dat__, ##512
03de4     15 77 02 F6 | 	mov	arg01, ptr__shell_c_dat__
03de8     01 00 00 FF 
03dec     00 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##512
03df0     18 FF BF FD | 	call	#_shell_c_getcwd
03df4                 | '     getcwd(tempname1);
03df4                 | '     return (char *) &tempname1;
03df4     01 00 00 FF 
03df8     00 2A 06 F1 | 	add	ptr__shell_c_dat__, ##512
03dfc     15 31 02 F6 | 	mov	result1, ptr__shell_c_dat__
03e00     01 00 00 FF 
03e04     00 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##512
03e08                 | _shell_c_cwd2_ret
03e08     2D 00 64 FD | 	ret
03e0c                 | 
03e0c                 | _trackerplayer_spin2_initModule
03e0c     0B 5A 05 F6 | 	mov	COUNT_, #11
03e10     B0 00 A0 FD | 	call	#pushregs_
03e14     30 F0 07 F1 | 	add	ptra, #48
03e18     AF 76 62 FC | 	wrlong	arg01, fp
03e1c     04 5E 05 F1 | 	add	fp, #4
03e20     AF 78 62 FC | 	wrlong	arg02, fp
03e24     04 5E 85 F1 | 	sub	fp, #4
03e28                 | ' 
03e28                 | '   ' Set some data pointers
03e28                 | '   magicFour      := hubPtr + 1080
03e28     AF 84 02 FB | 	rdlong	local01, fp
03e2c     02 00 00 FF 
03e30     38 84 06 F1 | 	add	local01, ##1080
03e34     9D 0E 06 F1 | 	add	objptr, #157
03e38     07 85 62 FC | 	wrlong	local01, objptr
03e3c                 | '   nameStr        := hubPtr
03e3c     AF 84 02 FB | 	rdlong	local01, fp
03e40     97 0E 86 F1 | 	sub	objptr, #151
03e44     07 85 62 FC | 	wrlong	local01, objptr
03e48                 | '   samplesInfoLut := hubPtr + 20
03e48     AF 84 02 FB | 	rdlong	local01, fp
03e4c     14 84 06 F1 | 	add	local01, #20
03e50     04 0E 06 F1 | 	add	objptr, #4
03e54     07 85 62 FC | 	wrlong	local01, objptr
03e58                 | ' 
03e58                 | '   ' Is this a 31 sample module?
03e58                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03e58     93 0E 06 F1 | 	add	objptr, #147
03e5c     07 85 02 FB | 	rdlong	local01, objptr
03e60     9D 0E 86 F1 | 	sub	objptr, #157
03e64     42 87 C2 FA | 	rdbyte	local02, local01
03e68     4D 86 0E F2 | 	cmp	local02, #77 wz
03e6c     4C 01 90 5D |  if_ne	jmp	#LR__0136
03e70     9D 0E 06 F1 | 	add	objptr, #157
03e74     07 89 02 FB | 	rdlong	local03, objptr
03e78     9D 0E 86 F1 | 	sub	objptr, #157
03e7c     02 88 06 F1 | 	add	local03, #2
03e80     44 8B C2 FA | 	rdbyte	local04, local03
03e84     4B 8A 0E F2 | 	cmp	local04, #75 wz
03e88     30 01 90 5D |  if_ne	jmp	#LR__0136
03e8c                 | '     songLength          := byte[hubPtr + 950]
03e8c     AF 84 02 FB | 	rdlong	local01, fp
03e90     01 00 00 FF 
03e94     B6 85 06 F1 | 	add	local01, ##950
03e98     42 8D C2 FA | 	rdbyte	local05, local01
03e9c     9A 0E 06 F1 | 	add	objptr, #154
03ea0     07 8D 42 FC | 	wrbyte	local05, objptr
03ea4                 | '     unknown1            := byte[hubPtr + 951]
03ea4     AF 84 02 FB | 	rdlong	local01, fp
03ea8     01 00 00 FF 
03eac     B7 85 06 F1 | 	add	local01, ##951
03eb0     42 8D C2 FA | 	rdbyte	local05, local01
03eb4     02 0E 06 F1 | 	add	objptr, #2
03eb8     07 8D 42 FC | 	wrbyte	local05, objptr
03ebc                 | '     songPositionsLut    :=      hubPtr + 952
03ebc     AF 84 02 FB | 	rdlong	local01, fp
03ec0     01 00 00 FF 
03ec4     B8 85 06 F1 | 	add	local01, ##952
03ec8     06 0E 86 F1 | 	sub	objptr, #6
03ecc     07 85 62 FC | 	wrlong	local01, objptr
03ed0                 | '     patternsData        :=      hubPtr + 1084
03ed0     AF 84 02 FB | 	rdlong	local01, fp
03ed4     02 00 00 FF 
03ed8     3C 84 06 F1 | 	add	local01, ##1084
03edc     04 0E 86 F1 | 	sub	objptr, #4
03ee0     07 85 62 FC | 	wrlong	local01, objptr
03ee4                 | '     numberOfInstruments := 31
03ee4     14 0E 06 F1 | 	add	objptr, #20
03ee8     07 3F 48 FC | 	wrbyte	#31, objptr
03eec                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03eec     0B 0E 86 F1 | 	sub	objptr, #11
03ef0     07 01 48 FC | 	wrbyte	#0, objptr
03ef4     9B 0E 86 F1 | 	sub	objptr, #155
03ef8                 | '     repeat i from 952 to 1079
03ef8     08 5E 05 F1 | 	add	fp, #8
03efc     01 00 80 FF 
03f00     AF 70 6B FC | 	wrlong	##952, fp
03f04     08 5E 85 F1 | 	sub	fp, #8
03f08     64 C1 9F FE | 	loc	pa,	#(@LR__0135-@LR__0133)
03f0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03f10                 | LR__0133
03f10                 | '       if byte[hubPtr][i] > numberOfPatterns
03f10     AF 8E 02 FB | 	rdlong	local06, fp
03f14     08 5E 05 F1 | 	add	fp, #8
03f18     AF 86 02 FB | 	rdlong	local02, fp
03f1c     08 5E 85 F1 | 	sub	fp, #8
03f20     47 87 02 F1 | 	add	local02, local06
03f24     43 8B C2 FA | 	rdbyte	local04, local02
03f28     9B 0E 06 F1 | 	add	objptr, #155
03f2c     07 91 C2 FA | 	rdbyte	local07, objptr
03f30     9B 0E 86 F1 | 	sub	objptr, #155
03f34     48 8B 5A F2 | 	cmps	local04, local07 wcz
03f38     24 00 90 ED |  if_be	jmp	#LR__0134
03f3c                 | '         numberOfPatterns := byte[hubPtr][i]
03f3c     AF 8E 02 FB | 	rdlong	local06, fp
03f40     08 5E 05 F1 | 	add	fp, #8
03f44     AF 86 02 FB | 	rdlong	local02, fp
03f48     08 5E 85 F1 | 	sub	fp, #8
03f4c     47 87 02 F1 | 	add	local02, local06
03f50     43 8B C2 FA | 	rdbyte	local04, local02
03f54     9B 0E 06 F1 | 	add	objptr, #155
03f58     07 8B 42 FC | 	wrbyte	local04, objptr
03f5c     9B 0E 86 F1 | 	sub	objptr, #155
03f60                 | LR__0134
03f60     08 5E 05 F1 | 	add	fp, #8
03f64     AF 8C 02 FB | 	rdlong	local05, fp
03f68     01 8C 06 F1 | 	add	local05, #1
03f6c     AF 8C 62 FC | 	wrlong	local05, fp
03f70     08 5E 85 F1 | 	sub	fp, #8
03f74     02 00 00 FF 
03f78     38 8C 5E F2 | 	cmps	local05, ##1080 wcz
03f7c     90 FF 9F CD |  if_b	jmp	#LR__0133
03f80                 | LR__0135
03f80                 | '     numberOfPatterns++
03f80     9B 0E 06 F1 | 	add	objptr, #155
03f84     07 8D C2 FA | 	rdbyte	local05, objptr
03f88     07 87 C2 FA | 	rdbyte	local02, objptr
03f8c     01 86 06 F1 | 	add	local02, #1
03f90     07 87 42 FC | 	wrbyte	local02, objptr
03f94                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03f94     09 0E 86 F1 | 	sub	objptr, #9
03f98     07 85 02 FB | 	rdlong	local01, objptr
03f9c     09 0E 06 F1 | 	add	objptr, #9
03fa0     07 87 C2 FA | 	rdbyte	local02, objptr
03fa4     0A 86 66 F0 | 	shl	local02, #10
03fa8     43 85 02 F1 | 	add	local01, local02
03fac     8D 0E 86 F1 | 	sub	objptr, #141
03fb0     07 85 62 FC | 	wrlong	local01, objptr
03fb4     0E 0E 86 F1 | 	sub	objptr, #14
03fb8                 | ' 
03fb8                 | '   ' This must be an oldschool 15 sample soundtracker module
03fb8                 | '   else
03fb8     1C 01 90 FD | 	jmp	#LR__0140
03fbc                 | LR__0136
03fbc                 | '     songLength          := byte[hubPtr + 470]
03fbc     AF 84 02 FB | 	rdlong	local01, fp
03fc0     D6 85 06 F1 | 	add	local01, #470
03fc4     42 8D C2 FA | 	rdbyte	local05, local01
03fc8     9A 0E 06 F1 | 	add	objptr, #154
03fcc     07 8D 42 FC | 	wrbyte	local05, objptr
03fd0                 | '     unknown1            := byte[hubPtr + 471]
03fd0     AF 84 02 FB | 	rdlong	local01, fp
03fd4     D7 85 06 F1 | 	add	local01, #471
03fd8     42 8D C2 FA | 	rdbyte	local05, local01
03fdc     02 0E 06 F1 | 	add	objptr, #2
03fe0     07 8D 42 FC | 	wrbyte	local05, objptr
03fe4                 | '     songPositionsLut    :=      hubPtr + 472
03fe4     AF 84 02 FB | 	rdlong	local01, fp
03fe8     D8 85 06 F1 | 	add	local01, #472
03fec     06 0E 86 F1 | 	sub	objptr, #6
03ff0     07 85 62 FC | 	wrlong	local01, objptr
03ff4                 | '     patternsData        :=      hubPtr + 600
03ff4     AF 84 02 FB | 	rdlong	local01, fp
03ff8     01 00 00 FF 
03ffc     58 84 06 F1 | 	add	local01, ##600
04000     04 0E 86 F1 | 	sub	objptr, #4
04004     07 85 62 FC | 	wrlong	local01, objptr
04008                 | '     numberOfInstruments := 15
04008     14 0E 06 F1 | 	add	objptr, #20
0400c     07 1F 48 FC | 	wrbyte	#15, objptr
04010                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
04010     0B 0E 86 F1 | 	sub	objptr, #11
04014     07 01 48 FC | 	wrbyte	#0, objptr
04018     9B 0E 86 F1 | 	sub	objptr, #155
0401c                 | '     repeat i from 472 to 599
0401c     08 5E 05 F1 | 	add	fp, #8
04020     AF B0 6B FC | 	wrlong	#472, fp
04024     08 5E 85 F1 | 	sub	fp, #8
04028     44 C0 9F FE | 	loc	pa,	#(@LR__0139-@LR__0137)
0402c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04030                 | LR__0137
04030                 | '       if byte[hubPtr][i] > numberOfPatterns
04030     AF 8E 02 FB | 	rdlong	local06, fp
04034     08 5E 05 F1 | 	add	fp, #8
04038     AF 86 02 FB | 	rdlong	local02, fp
0403c     08 5E 85 F1 | 	sub	fp, #8
04040     47 87 02 F1 | 	add	local02, local06
04044     43 8B C2 FA | 	rdbyte	local04, local02
04048     9B 0E 06 F1 | 	add	objptr, #155
0404c     07 91 C2 FA | 	rdbyte	local07, objptr
04050     9B 0E 86 F1 | 	sub	objptr, #155
04054     48 8B 5A F2 | 	cmps	local04, local07 wcz
04058     24 00 90 ED |  if_be	jmp	#LR__0138
0405c                 | '         numberOfPatterns := byte[hubPtr][i]
0405c     AF 8E 02 FB | 	rdlong	local06, fp
04060     08 5E 05 F1 | 	add	fp, #8
04064     AF 86 02 FB | 	rdlong	local02, fp
04068     08 5E 85 F1 | 	sub	fp, #8
0406c     47 87 02 F1 | 	add	local02, local06
04070     43 8B C2 FA | 	rdbyte	local04, local02
04074     9B 0E 06 F1 | 	add	objptr, #155
04078     07 8B 42 FC | 	wrbyte	local04, objptr
0407c     9B 0E 86 F1 | 	sub	objptr, #155
04080                 | LR__0138
04080     08 5E 05 F1 | 	add	fp, #8
04084     AF 8C 02 FB | 	rdlong	local05, fp
04088     01 8C 06 F1 | 	add	local05, #1
0408c     AF 8C 62 FC | 	wrlong	local05, fp
04090     08 5E 85 F1 | 	sub	fp, #8
04094     01 00 00 FF 
04098     58 8C 5E F2 | 	cmps	local05, ##600 wcz
0409c     90 FF 9F CD |  if_b	jmp	#LR__0137
040a0                 | LR__0139
040a0                 | '     numberOfPatterns++
040a0     9B 0E 06 F1 | 	add	objptr, #155
040a4     07 8D C2 FA | 	rdbyte	local05, objptr
040a8     07 87 C2 FA | 	rdbyte	local02, objptr
040ac     01 86 06 F1 | 	add	local02, #1
040b0     07 87 42 FC | 	wrbyte	local02, objptr
040b4                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
040b4     09 0E 86 F1 | 	sub	objptr, #9
040b8     07 85 02 FB | 	rdlong	local01, objptr
040bc     09 0E 06 F1 | 	add	objptr, #9
040c0     07 87 C2 FA | 	rdbyte	local02, objptr
040c4     0A 86 66 F0 | 	shl	local02, #10
040c8     43 85 02 F1 | 	add	local01, local02
040cc     8D 0E 86 F1 | 	sub	objptr, #141
040d0     07 85 62 FC | 	wrlong	local01, objptr
040d4     0E 0E 86 F1 | 	sub	objptr, #14
040d8                 | LR__0140
040d8                 | ' 
040d8                 | '   ' Iterate through all samples and fill in the sample pointer LUT
040d8                 | '   tmpPtr := sampleDataPtr
040d8     0E 0E 06 F1 | 	add	objptr, #14
040dc     07 85 02 FB | 	rdlong	local01, objptr
040e0     0C 5E 05 F1 | 	add	fp, #12
040e4     AF 84 62 FC | 	wrlong	local01, fp
040e8                 | '   repeat i from 1 to numberOfInstruments
040e8     04 5E 85 F1 | 	sub	fp, #4
040ec     AF 02 68 FC | 	wrlong	#1, fp
040f0     08 5E 85 F1 | 	sub	fp, #8
040f4     98 0E 06 F1 | 	add	objptr, #152
040f8     07 87 C2 FA | 	rdbyte	local02, objptr
040fc     01 86 5E F2 | 	cmps	local02, #1 wcz
04100     01 8C 06 16 |  if_a	mov	local05, #1
04104     01 8C 66 E6 |  if_be	neg	local05, #1
04108     46 93 02 F6 | 	mov	local08, local05
0410c     07 95 C2 FA | 	rdbyte	local09, objptr
04110     A6 0E 86 F1 | 	sub	objptr, #166
04114     49 95 02 F1 | 	add	local09, local08
04118                 | LR__0141
04118                 | '     samplesPtrLut[i-1] := tmpPtr
04118     08 5E 05 F1 | 	add	fp, #8
0411c     AF 96 02 FB | 	rdlong	local10, fp
04120     01 96 86 F1 | 	sub	local10, #1
04124     02 96 66 F0 | 	shl	local10, #2
04128     12 0E 06 F1 | 	add	objptr, #18
0412c     07 97 02 F1 | 	add	local10, objptr
04130     04 5E 05 F1 | 	add	fp, #4
04134     AF 98 02 FB | 	rdlong	local11, fp
04138     4B 99 62 FC | 	wrlong	local11, local10
0413c                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
0413c     04 5E 85 F1 | 	sub	fp, #4
04140     AF 76 02 FB | 	rdlong	arg01, fp
04144     1C 5E 05 F1 | 	add	fp, #28
04148     AF 78 02 F6 | 	mov	arg02, fp
0414c     14 5E 85 F1 | 	sub	fp, #20
04150     AF 7A 02 F6 | 	mov	arg03, fp
04154     04 5E 05 F1 | 	add	fp, #4
04158     AF 7C 02 F6 | 	mov	arg04, fp
0415c     04 5E 05 F1 | 	add	fp, #4
04160     AF 7E 02 F6 | 	mov	arg05, fp
04164     04 5E 05 F1 | 	add	fp, #4
04168     AF 80 02 F6 | 	mov	arg06, fp
0416c     04 5E 05 F1 | 	add	fp, #4
04170     AF 82 02 F6 | 	mov	arg07, fp
04174     20 5E 85 F1 | 	sub	fp, #32
04178     12 0E 86 F1 | 	sub	objptr, #18
0417c     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04180                 | '     tmpPtr += samLength
04180     0C 5E 05 F1 | 	add	fp, #12
04184     AF 90 02 FB | 	rdlong	local07, fp
04188     04 5E 05 F1 | 	add	fp, #4
0418c     AF 96 02 FB | 	rdlong	local10, fp
04190     4B 91 02 F1 | 	add	local07, local10
04194     04 5E 85 F1 | 	sub	fp, #4
04198     AF 90 62 FC | 	wrlong	local07, fp
0419c     04 5E 85 F1 | 	sub	fp, #4
041a0     AF 90 02 FB | 	rdlong	local07, fp
041a4     49 91 02 F1 | 	add	local07, local08
041a8     AF 90 62 FC | 	wrlong	local07, fp
041ac     08 5E 85 F1 | 	sub	fp, #8
041b0     4A 91 0A F2 | 	cmp	local07, local09 wz
041b4     60 FF 9F 5D |  if_ne	jmp	#LR__0141
041b8                 | ' 
041b8                 | '   ' Below this point, all play routine variables are resest to their default values
041b8                 | '   tickCounter                 := 0
041b8     A1 0E 06 F1 | 	add	objptr, #161
041bc     07 01 48 FC | 	wrbyte	#0, objptr
041c0                 | '   patternRow                  := 0
041c0     01 0E 06 F1 | 	add	objptr, #1
041c4     07 01 48 FC | 	wrbyte	#0, objptr
041c8                 | '   songPosition                := startPattern
041c8     04 5E 05 F1 | 	add	fp, #4
041cc     AF 84 02 FB | 	rdlong	local01, fp
041d0     04 5E 85 F1 | 	sub	fp, #4
041d4     01 0E 06 F1 | 	add	objptr, #1
041d8     07 85 42 FC | 	wrbyte	local01, objptr
041dc                 | '   currentSongSpeed            := 6
041dc     01 0E 06 F1 | 	add	objptr, #1
041e0     07 0D 48 FC | 	wrbyte	#6, objptr
041e4                 | '   patternDelay                := 0
041e4     01 0E 06 F1 | 	add	objptr, #1
041e8     07 01 48 FC | 	wrbyte	#0, objptr
041ec                 | '   ticksPerMinute              := 50 * 60
041ec     02 0F 06 F1 | 	add	objptr, #258
041f0     05 00 80 FF 
041f4     07 71 6B FC | 	wrlong	##3000, objptr
041f8     A7 0F 86 F1 | 	sub	objptr, #423
041fc                 | '   cyclesToWait                := systemClock / 50
041fc     07 D9 02 FB | 	rdlong	muldiva_, objptr
04200     32 DA 06 F6 | 	mov	muldivb_, #50
04204     D0 00 A0 FD | 	call	#divide_
04208     AB 0F 06 F1 | 	add	objptr, #427
0420c     07 DB 62 FC | 	wrlong	muldivb_, objptr
04210                 | '   sampleNumber_memory         := 0
04210     35 0E 06 F1 | 	add	objptr, #53
04214     07 01 48 FC | 	wrbyte	#0, objptr
04218                 | '   lpFilter                    := 0
04218     25 0E 86 F1 | 	sub	objptr, #37
0421c     07 01 48 FC | 	wrbyte	#0, objptr
04220                 | '   cmdD_memoryX                := 0
04220     29 0E 06 F1 | 	add	objptr, #41
04224     07 01 48 FC | 	wrbyte	#0, objptr
04228                 | '   cmdD_memoryY                := 0
04228     01 0E 06 F1 | 	add	objptr, #1
0422c     07 01 48 FC | 	wrbyte	#0, objptr
04230                 | '   cmdD_updatePosition         := false
04230     01 0E 06 F1 | 	add	objptr, #1
04234     07 01 48 FC | 	wrbyte	#0, objptr
04238                 | '   cmdB_memoryZ                := 0
04238     01 0E 06 F1 | 	add	objptr, #1
0423c     07 01 48 FC | 	wrbyte	#0, objptr
04240                 | '   cmdB_updatePosition         := false
04240     01 0E 06 F1 | 	add	objptr, #1
04244     07 01 48 FC | 	wrbyte	#0, objptr
04248                 | '   cmdE6_updatePositionCommon  := false
04248     0D 0E 06 F1 | 	add	objptr, #13
0424c     07 01 48 FC | 	wrbyte	#0, objptr
04250     F5 0F 86 F1 | 	sub	objptr, #501
04254                 | ' 
04254                 | '   repeat i from 0 to LAST_CHANNEL
04254     08 5E 05 F1 | 	add	fp, #8
04258     AF 00 68 FC | 	wrlong	#0, fp
0425c     08 5E 85 F1 | 	sub	fp, #8
04260                 | LR__0142
04260                 | ' 
04260                 | '     currRepeatPoint[i]        := 0
04260     08 5E 05 F1 | 	add	fp, #8
04264     AF 88 02 FB | 	rdlong	local03, fp
04268     01 88 66 F0 | 	shl	local03, #1
0426c     D7 0E 06 F1 | 	add	objptr, #215
04270     07 89 02 F1 | 	add	local03, objptr
04274     44 01 58 FC | 	wrword	#0, local03
04278                 | '     currSampleLength[i]       := 4
04278     AF 88 02 FB | 	rdlong	local03, fp
0427c     01 88 66 F0 | 	shl	local03, #1
04280     1C 0E 86 F1 | 	sub	objptr, #28
04284     07 89 02 F1 | 	add	local03, objptr
04288     44 09 58 FC | 	wrword	#4, local03
0428c                 | '     currSamplePtr[i]          := @null
0428c     AF 86 02 FB | 	rdlong	local02, fp
04290     02 86 66 F0 | 	shl	local02, #2
04294     14 0E 86 F1 | 	sub	objptr, #20
04298     07 87 02 F1 | 	add	local02, objptr
0429c     43 2D 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
042a0                 | '     currSampleNr[i]           := 0
042a0     AF 8C 02 FB | 	rdlong	local05, fp
042a4     10 0E 06 F1 | 	add	objptr, #16
042a8     07 8D 02 F1 | 	add	local05, objptr
042ac     46 01 48 FC | 	wrbyte	#0, local05
042b0                 | '     currRepeatLength[i]       := 1
042b0     AF 8C 02 FB | 	rdlong	local05, fp
042b4     02 8C 66 F0 | 	shl	local05, #2
042b8     0C 0E 06 F1 | 	add	objptr, #12
042bc     07 8D 02 F1 | 	add	local05, objptr
042c0     46 03 68 FC | 	wrlong	#1, local05
042c4                 | '     currPeriod[i]             := 400
042c4     AF 8C 02 FB | 	rdlong	local05, fp
042c8     02 8C 66 F0 | 	shl	local05, #2
042cc     1C 0E 06 F1 | 	add	objptr, #28
042d0     07 8D 02 F1 | 	add	local05, objptr
042d4     46 21 6B FC | 	wrlong	#400, local05
042d8                 | '     lastSetPeriod[i]          := 400
042d8     AF 8C 02 FB | 	rdlong	local05, fp
042dc     02 8C 66 F0 | 	shl	local05, #2
042e0     48 0E 06 F1 | 	add	objptr, #72
042e4     07 8D 02 F1 | 	add	local05, objptr
042e8     46 21 6B FC | 	wrlong	#400, local05
042ec                 | '     lastSetSamplePtr[i]       := 0
042ec     AF 8C 02 FB | 	rdlong	local05, fp
042f0     02 8C 66 F0 | 	shl	local05, #2
042f4     10 0E 06 F1 | 	add	objptr, #16
042f8     07 8D 02 F1 | 	add	local05, objptr
042fc     46 01 68 FC | 	wrlong	#0, local05
04300                 | '     lastSetSampleNr[i]        := 0
04300     AF 8C 02 FB | 	rdlong	local05, fp
04304     02 8C 66 F0 | 	shl	local05, #2
04308     10 0E 06 F1 | 	add	objptr, #16
0430c     07 8D 02 F1 | 	add	local05, objptr
04310     46 01 68 FC | 	wrlong	#0, local05
04314                 | '     lastSetSampleLength[i]    := 0
04314     AF 8C 02 FB | 	rdlong	local05, fp
04318     02 8C 66 F0 | 	shl	local05, #2
0431c     10 0E 06 F1 | 	add	objptr, #16
04320     07 8D 02 F1 | 	add	local05, objptr
04324     46 01 68 FC | 	wrlong	#0, local05
04328                 | '     lastSetRepeatLength[i]    := 0
04328     AF 8C 02 FB | 	rdlong	local05, fp
0432c     02 8C 66 F0 | 	shl	local05, #2
04330     10 0E 06 F1 | 	add	objptr, #16
04334     07 8D 02 F1 | 	add	local05, objptr
04338     46 01 68 FC | 	wrlong	#0, local05
0433c                 | '     lastSetRepeatPoint[i]     := 0
0433c     AF 8C 02 FB | 	rdlong	local05, fp
04340     02 8C 66 F0 | 	shl	local05, #2
04344     10 0E 06 F1 | 	add	objptr, #16
04348     07 8D 02 F1 | 	add	local05, objptr
0434c     46 01 68 FC | 	wrlong	#0, local05
04350                 | '     currVolume[i]             := 0
04350     AF 8C 02 FB | 	rdlong	local05, fp
04354     02 8C 66 F0 | 	shl	local05, #2
04358     78 0E 86 F1 | 	sub	objptr, #120
0435c     07 8D 02 F1 | 	add	local05, objptr
04360     46 01 68 FC | 	wrlong	#0, local05
04364                 | '     currPanning[i]            := 0
04364     AF 88 02 FB | 	rdlong	local03, fp
04368     01 88 66 F0 | 	shl	local03, #1
0436c     20 0E 06 F1 | 	add	objptr, #32
04370     07 89 02 F1 | 	add	local03, objptr
04374     44 01 58 FC | 	wrword	#0, local03
04378                 | '     cmd3_memoryZ[i]           := 0
04378     AF 8C 02 FB | 	rdlong	local05, fp
0437c     A9 0E 06 F1 | 	add	objptr, #169
04380     07 8D 02 F1 | 	add	local05, objptr
04384     46 01 48 FC | 	wrbyte	#0, local05
04388                 | '     cmd4_memoryY[i]           := 0
04388     AF 8C 02 FB | 	rdlong	local05, fp
0438c     04 0E 06 F1 | 	add	objptr, #4
04390     07 8D 02 F1 | 	add	local05, objptr
04394     46 01 48 FC | 	wrbyte	#0, local05
04398                 | '     cmd4_memoryX[i]           := 0
04398     AF 8C 02 FB | 	rdlong	local05, fp
0439c     04 0E 06 F1 | 	add	objptr, #4
043a0     07 8D 02 F1 | 	add	local05, objptr
043a4     46 01 48 FC | 	wrbyte	#0, local05
043a8                 | '     cmd7_memoryY[i]           := 0
043a8     AF 8C 02 FB | 	rdlong	local05, fp
043ac     04 0E 06 F1 | 	add	objptr, #4
043b0     07 8D 02 F1 | 	add	local05, objptr
043b4     46 01 48 FC | 	wrbyte	#0, local05
043b8                 | '     cmd7_memoryX[i]           := 0
043b8     AF 8C 02 FB | 	rdlong	local05, fp
043bc     04 0E 06 F1 | 	add	objptr, #4
043c0     07 8D 02 F1 | 	add	local05, objptr
043c4     46 01 48 FC | 	wrbyte	#0, local05
043c8                 | '     cmd9_memoryZ[i]           := 0
043c8     AF 8C 02 FB | 	rdlong	local05, fp
043cc     04 0E 06 F1 | 	add	objptr, #4
043d0     07 8D 02 F1 | 	add	local05, objptr
043d4     46 01 48 FC | 	wrbyte	#0, local05
043d8                 | '     cmdE6_memory[i]           := 0
043d8     AF 8C 02 FB | 	rdlong	local05, fp
043dc     0D 0E 06 F1 | 	add	objptr, #13
043e0     07 8D 02 F1 | 	add	local05, objptr
043e4     46 01 48 FC | 	wrbyte	#0, local05
043e8                 | '     cmdE6_counter[i]          := 0
043e8     AF 8C 02 FB | 	rdlong	local05, fp
043ec     04 0E 06 F1 | 	add	objptr, #4
043f0     07 8D 02 F1 | 	add	local05, objptr
043f4     46 01 48 FC | 	wrbyte	#0, local05
043f8                 | '     cmdE6_updatePosition[i]   := false
043f8     AF 8C 02 FB | 	rdlong	local05, fp
043fc     04 0E 06 F1 | 	add	objptr, #4
04400     07 8D 02 F1 | 	add	local05, objptr
04404     46 01 48 FC | 	wrbyte	#0, local05
04408                 | '     sampleNumber_memory[i]    := 0
04408     AF 8C 02 FB | 	rdlong	local05, fp
0440c     11 0E 86 F1 | 	sub	objptr, #17
04410     07 8D 02 F1 | 	add	local05, objptr
04414     46 01 48 FC | 	wrbyte	#0, local05
04418                 | '     vibratoPos[i]             := 0
04418     AF 8C 02 FB | 	rdlong	local05, fp
0441c     59 0E 86 F1 | 	sub	objptr, #89
04420     07 8D 02 F1 | 	add	local05, objptr
04424     46 01 48 FC | 	wrbyte	#0, local05
04428                 | '     portamentoPeriodMemory[i] := 0
04428     AF 8C 02 FB | 	rdlong	local05, fp
0442c     02 8C 66 F0 | 	shl	local05, #2
04430     10 0E 06 F1 | 	add	objptr, #16
04434     07 8D 02 F1 | 	add	local05, objptr
04438     46 01 68 FC | 	wrlong	#0, local05
0443c                 | '     portaGlissando[i]         := 0
0443c     AF 8C 02 FB | 	rdlong	local05, fp
04440     25 0E 06 F1 | 	add	objptr, #37
04444     07 8D 02 F1 | 	add	local05, objptr
04448     46 01 48 FC | 	wrbyte	#0, local05
0444c                 | '     vibratoType[i]            := 0
0444c     AF 8C 02 FB | 	rdlong	local05, fp
04450     04 0E 06 F1 | 	add	objptr, #4
04454     07 8D 02 F1 | 	add	local05, objptr
04458     46 01 48 FC | 	wrbyte	#0, local05
0445c                 | '     tremoloType[i]            := 0
0445c     AF 8C 02 FB | 	rdlong	local05, fp
04460     04 0E 06 F1 | 	add	objptr, #4
04464     07 8D 02 F1 | 	add	local05, objptr
04468     46 01 48 FC | 	wrbyte	#0, local05
0446c                 | '     tremoloPos[i]             := 0
0446c     AF 8C 02 FB | 	rdlong	local05, fp
04470     39 0E 86 F1 | 	sub	objptr, #57
04474     07 8D 02 F1 | 	add	local05, objptr
04478     46 01 48 FC | 	wrbyte	#0, local05
0447c                 | '     deltaVolume[i]            := 0
0447c     AF 8C 02 FB | 	rdlong	local05, fp
04480     02 8C 66 F0 | 	shl	local05, #2
04484     7C 0E 86 F1 | 	sub	objptr, #124
04488     07 8D 02 F1 | 	add	local05, objptr
0448c     46 01 68 FC | 	wrlong	#0, local05
04490                 | '     deltaPeriod[i]            := 0
04490     AF 8C 02 FB | 	rdlong	local05, fp
04494     02 8C 66 F0 | 	shl	local05, #2
04498     20 0E 86 F1 | 	sub	objptr, #32
0449c     07 8D 02 F1 | 	add	local05, objptr
044a0     46 01 68 FC | 	wrlong	#0, local05
044a4                 | '     resetTremolo[i]           := 0
044a4     AF 8C 02 FB | 	rdlong	local05, fp
044a8     A0 0E 06 F1 | 	add	objptr, #160
044ac     07 8D 02 F1 | 	add	local05, objptr
044b0     46 01 48 FC | 	wrbyte	#0, local05
044b4                 | '     resetVibrato[i]           := 0
044b4     AF 8C 02 FB | 	rdlong	local05, fp
044b8     04 0E 06 F1 | 	add	objptr, #4
044bc     07 8D 02 F1 | 	add	local05, objptr
044c0     46 01 48 FC | 	wrbyte	#0, local05
044c4     AF 8C 02 FB | 	rdlong	local05, fp
044c8     01 8C 06 F1 | 	add	local05, #1
044cc     AF 8C 62 FC | 	wrlong	local05, fp
044d0     08 5E 85 F1 | 	sub	fp, #8
044d4     04 8C 5E F2 | 	cmps	local05, #4 wcz
044d8     93 0F 86 F1 | 	sub	objptr, #403
044dc     80 FD 9F CD |  if_b	jmp	#LR__0142
044e0     AF F0 03 F6 | 	mov	ptra, fp
044e4     BF 00 A0 FD | 	call	#popregs_
044e8                 | _trackerplayer_spin2_initModule_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | ' 
044ec                 | ' 
044ec                 | ' ' This routine needs to be ticked X number of times per second
044ec                 | ' ' in order to advance the tracker play routine
044ec                 | ' '
044ec                 | ' PUB tick() | channel, sampleNumber, period, effect, i
044ec                 | _trackerplayer_spin2_tick
044ec     05 5A 05 F6 | 	mov	COUNT_, #5
044f0     B0 00 A0 FD | 	call	#pushregs_
044f4     14 F0 07 F1 | 	add	ptra, #20
044f8                 | ' 
044f8                 | '   if currentSongSpeed == 0
044f8     A4 0E 06 F1 | 	add	objptr, #164
044fc     07 85 CA FA | 	rdbyte	local01, objptr wz
04500     A4 0E 86 F1 | 	sub	objptr, #164
04504                 | '     return
04504     88 02 90 AD |  if_e	jmp	#LR__0154
04508                 | ' 
04508                 | '   ' Iterate over the channels and process everything
04508                 | '   repeat channel from 0 to LAST_CHANNEL
04508     AF 00 68 FC | 	wrlong	#0, fp
0450c                 | LR__0143
0450c                 | ' 
0450c                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
0450c     AF 76 02 FB | 	rdlong	arg01, fp
04510     A3 0E 06 F1 | 	add	objptr, #163
04514     07 79 C2 FA | 	rdbyte	arg02, objptr
04518     01 0E 86 F1 | 	sub	objptr, #1
0451c     07 7B C2 FA | 	rdbyte	arg03, objptr
04520     A2 0E 86 F1 | 	sub	objptr, #162
04524     04 5E 05 F1 | 	add	fp, #4
04528     AF 7C 02 F6 | 	mov	arg04, fp
0452c     04 5E 05 F1 | 	add	fp, #4
04530     AF 7E 02 F6 | 	mov	arg05, fp
04534     04 5E 05 F1 | 	add	fp, #4
04538     AF 80 02 F6 | 	mov	arg06, fp
0453c     0C 5E 85 F1 | 	sub	fp, #12
04540     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
04544                 | '     processChannel(channel, sampleNumber, period, effect)
04544     AF 76 02 FB | 	rdlong	arg01, fp
04548     04 5E 05 F1 | 	add	fp, #4
0454c     AF 78 02 FB | 	rdlong	arg02, fp
04550     04 5E 05 F1 | 	add	fp, #4
04554     AF 7A 02 FB | 	rdlong	arg03, fp
04558     04 5E 05 F1 | 	add	fp, #4
0455c     AF 7C 02 FB | 	rdlong	arg04, fp
04560     0C 5E 85 F1 | 	sub	fp, #12
04564     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04568     AF 86 02 FB | 	rdlong	local02, fp
0456c     01 86 06 F1 | 	add	local02, #1
04570     AF 86 62 FC | 	wrlong	local02, fp
04574     04 86 5E F2 | 	cmps	local02, #4 wcz
04578     90 FF 9F CD |  if_b	jmp	#LR__0143
0457c                 | ' 
0457c                 | '   ' Incrementation the main counter that drives the whole play routine
0457c                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
0457c     A1 0E 06 F1 | 	add	objptr, #161
04580     07 85 C2 FA | 	rdbyte	local01, objptr
04584     01 84 06 F1 | 	add	local01, #1
04588     07 85 42 FC | 	wrbyte	local01, objptr
0458c     03 0E 06 F1 | 	add	objptr, #3
04590     07 89 C2 FA | 	rdbyte	local03, objptr
04594     01 0E 06 F1 | 	add	objptr, #1
04598     07 8B C2 FA | 	rdbyte	local04, objptr
0459c     45 89 02 F1 | 	add	local03, local04
045a0     04 0E 86 F1 | 	sub	objptr, #4
045a4     07 8D C2 FA | 	rdbyte	local05, objptr
045a8     A1 0E 86 F1 | 	sub	objptr, #161
045ac     44 8D 5A F2 | 	cmps	local05, local03 wcz
045b0                 | '     tickCounter := 0
045b0     A1 0E 06 31 |  if_ae	add	objptr, #161
045b4     07 01 48 3C |  if_ae	wrbyte	#0, objptr
045b8     A1 0E 86 31 |  if_ae	sub	objptr, #161
045bc                 | ' 
045bc                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
045bc                 | '   if tickCounter == 0
045bc     A1 0E 06 F1 | 	add	objptr, #161
045c0     07 85 CA FA | 	rdbyte	local01, objptr wz
045c4     A1 0E 86 F1 | 	sub	objptr, #161
045c8     C4 01 90 5D |  if_ne	jmp	#LR__0153
045cc                 | ' 
045cc                 | '     ' Handle the "pattern repeat" command, "E6"
045cc                 | '     if cmdE6_updatePositionCommon
045cc     F5 0F 06 F1 | 	add	objptr, #501
045d0     07 85 CA FA | 	rdbyte	local01, objptr wz
045d4     F5 0F 86 F1 | 	sub	objptr, #501
045d8     8C 00 90 AD |  if_e	jmp	#LR__0147
045dc                 | '       repeat i from 0 to LAST_CHANNEL
045dc     10 5E 05 F1 | 	add	fp, #16
045e0     AF 00 68 FC | 	wrlong	#0, fp
045e4     10 5E 85 F1 | 	sub	fp, #16
045e8     88 BA 9F FE | 	loc	pa,	#(@LR__0146-@LR__0144)
045ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
045f0                 | LR__0144
045f0                 | '         if cmdE6_updatePosition[i]
045f0     10 5E 05 F1 | 	add	fp, #16
045f4     AF 86 02 FB | 	rdlong	local02, fp
045f8     10 5E 85 F1 | 	sub	fp, #16
045fc     F1 0F 06 F1 | 	add	objptr, #497
04600     07 87 02 F1 | 	add	local02, objptr
04604     43 8B CA FA | 	rdbyte	local04, local02 wz
04608     F1 0F 86 F1 | 	sub	objptr, #497
0460c     24 00 90 AD |  if_e	jmp	#LR__0145
04610                 | '           patternRow := cmdE6_memory[i]
04610     10 5E 05 F1 | 	add	fp, #16
04614     AF 86 02 FB | 	rdlong	local02, fp
04618     10 5E 85 F1 | 	sub	fp, #16
0461c     E9 0F 06 F1 | 	add	objptr, #489
04620     07 87 02 F1 | 	add	local02, objptr
04624     43 8B C2 FA | 	rdbyte	local04, local02
04628     47 0F 86 F1 | 	sub	objptr, #327
0462c     07 8B 42 FC | 	wrbyte	local04, objptr
04630     A2 0E 86 F1 | 	sub	objptr, #162
04634                 | LR__0145
04634                 | '         cmdE6_updatePosition[i] := false
04634     10 5E 05 F1 | 	add	fp, #16
04638     AF 86 02 FB | 	rdlong	local02, fp
0463c     F1 0F 06 F1 | 	add	objptr, #497
04640     07 87 02 F1 | 	add	local02, objptr
04644     43 01 48 FC | 	wrbyte	#0, local02
04648     AF 86 02 FB | 	rdlong	local02, fp
0464c     01 86 06 F1 | 	add	local02, #1
04650     AF 86 62 FC | 	wrlong	local02, fp
04654     10 5E 85 F1 | 	sub	fp, #16
04658     04 86 5E F2 | 	cmps	local02, #4 wcz
0465c     F1 0F 86 F1 | 	sub	objptr, #497
04660     8C FF 9F CD |  if_b	jmp	#LR__0144
04664                 | LR__0146
04664     CC 00 90 FD | 	jmp	#LR__0151
04668                 | LR__0147
04668                 | ' 
04668                 | '     ' Handle the "skip to next pattern with offset command", "D"
04668                 | '     elseif cmdD_updatePosition
04668     E6 0F 06 F1 | 	add	objptr, #486
0466c     07 85 CA FA | 	rdbyte	local01, objptr wz
04670     E6 0F 86 F1 | 	sub	objptr, #486
04674     64 00 90 AD |  if_e	jmp	#LR__0148
04678                 | '       if ++songPosition >= songLength
04678     A3 0E 06 F1 | 	add	objptr, #163
0467c     07 85 C2 FA | 	rdbyte	local01, objptr
04680     01 84 06 F1 | 	add	local01, #1
04684     07 85 42 FC | 	wrbyte	local01, objptr
04688     07 89 C2 FA | 	rdbyte	local03, objptr
0468c     09 0E 86 F1 | 	sub	objptr, #9
04690     07 8B C2 FA | 	rdbyte	local04, objptr
04694     9A 0E 86 F1 | 	sub	objptr, #154
04698     45 89 5A F2 | 	cmps	local03, local04 wcz
0469c                 | '         songPosition := 0
0469c     A3 0E 06 31 |  if_ae	add	objptr, #163
046a0     07 01 48 3C |  if_ae	wrbyte	#0, objptr
046a4     A3 0E 86 31 |  if_ae	sub	objptr, #163
046a8                 | ' 
046a8                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
046a8     E4 0F 06 F1 | 	add	objptr, #484
046ac     07 89 C2 FA | 	rdbyte	local03, objptr
046b0     44 85 02 F6 | 	mov	local01, local03
046b4     02 84 66 F0 | 	shl	local01, #2
046b8     44 85 02 F1 | 	add	local01, local03
046bc     01 84 66 F0 | 	shl	local01, #1
046c0     01 0E 06 F1 | 	add	objptr, #1
046c4     07 8B C2 FA | 	rdbyte	local04, objptr
046c8     45 85 02 F1 | 	add	local01, local04
046cc     43 0F 86 F1 | 	sub	objptr, #323
046d0     07 85 42 FC | 	wrbyte	local01, objptr
046d4     A2 0E 86 F1 | 	sub	objptr, #162
046d8                 | ' 
046d8                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
046d8                 | '     else
046d8     58 00 90 FD | 	jmp	#LR__0150
046dc                 | LR__0148
046dc                 | '       if ++patternRow >= PATTERN_LENGTH
046dc     A2 0E 06 F1 | 	add	objptr, #162
046e0     07 85 C2 FA | 	rdbyte	local01, objptr
046e4     01 84 06 F1 | 	add	local01, #1
046e8     07 85 42 FC | 	wrbyte	local01, objptr
046ec     07 89 C2 FA | 	rdbyte	local03, objptr
046f0     A2 0E 86 F1 | 	sub	objptr, #162
046f4     40 88 5E F2 | 	cmps	local03, #64 wcz
046f8     38 00 90 CD |  if_b	jmp	#LR__0149
046fc                 | '         patternRow := 0
046fc     A2 0E 06 F1 | 	add	objptr, #162
04700     07 01 48 FC | 	wrbyte	#0, objptr
04704                 | ' 
04704                 | '         if ++songPosition >= songLength
04704     01 0E 06 F1 | 	add	objptr, #1
04708     07 85 C2 FA | 	rdbyte	local01, objptr
0470c     01 84 06 F1 | 	add	local01, #1
04710     07 85 42 FC | 	wrbyte	local01, objptr
04714     07 89 C2 FA | 	rdbyte	local03, objptr
04718     09 0E 86 F1 | 	sub	objptr, #9
0471c     07 8B C2 FA | 	rdbyte	local04, objptr
04720     9A 0E 86 F1 | 	sub	objptr, #154
04724     45 89 5A F2 | 	cmps	local03, local04 wcz
04728                 | '           songPosition := 0
04728     A3 0E 06 31 |  if_ae	add	objptr, #163
0472c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04730     A3 0E 86 31 |  if_ae	sub	objptr, #163
04734                 | LR__0149
04734                 | LR__0150
04734                 | LR__0151
04734                 | ' 
04734                 | '     ' Handle "jump to song position" command, "B"
04734                 | '     if cmdB_updatePosition
04734     E8 0F 06 F1 | 	add	objptr, #488
04738     07 85 CA FA | 	rdbyte	local01, objptr wz
0473c     E8 0F 86 F1 | 	sub	objptr, #488
04740     28 00 90 AD |  if_e	jmp	#LR__0152
04744                 | ' 
04744                 | '       songPosition := cmdB_memoryZ
04744     E7 0F 06 F1 | 	add	objptr, #487
04748     07 85 C2 FA | 	rdbyte	local01, objptr
0474c     44 0F 86 F1 | 	sub	objptr, #324
04750     07 85 42 FC | 	wrbyte	local01, objptr
04754                 | ' 
04754                 | '       ifnot cmdD_updatePosition
04754     43 0F 06 F1 | 	add	objptr, #323
04758     07 85 CA FA | 	rdbyte	local01, objptr wz
0475c     E6 0F 86 F1 | 	sub	objptr, #486
04760                 | '         patternRow := 0
04760     A2 0E 06 A1 |  if_e	add	objptr, #162
04764     07 01 48 AC |  if_e	wrbyte	#0, objptr
04768     A2 0E 86 A1 |  if_e	sub	objptr, #162
0476c                 | LR__0152
0476c                 | ' 
0476c                 | '     ' We need to be sure that all positioning commands are reset for the next tick
0476c                 | '     cmdE6_updatePositionCommon := false
0476c     F5 0F 06 F1 | 	add	objptr, #501
04770     07 01 48 FC | 	wrbyte	#0, objptr
04774                 | '     cmdB_updatePosition := false
04774     0D 0E 86 F1 | 	sub	objptr, #13
04778     07 01 48 FC | 	wrbyte	#0, objptr
0477c                 | '     cmdD_updatePosition := false
0477c     02 0E 86 F1 | 	sub	objptr, #2
04780     07 01 48 FC | 	wrbyte	#0, objptr
04784                 | '     patternDelay := 0
04784     41 0F 86 F1 | 	sub	objptr, #321
04788     07 01 48 FC | 	wrbyte	#0, objptr
0478c     A5 0E 86 F1 | 	sub	objptr, #165
04790                 | LR__0153
04790                 | LR__0154
04790     AF F0 03 F6 | 	mov	ptra, fp
04794     BF 00 A0 FD | 	call	#popregs_
04798                 | _trackerplayer_spin2_tick_ret
04798     2D 00 64 FD | 	ret
0479c                 | 
0479c                 | ' 
0479c                 | ' 
0479c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0479c                 | _trackerplayer_spin2_amigaPeriodToNote
0479c                 | ' 
0479c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0479c     00 36 06 F6 | 	mov	_var01, #0
047a0     A8 B8 9F FE | 	loc	pa,	#(@LR__0156-@LR__0155)
047a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
047a8                 | LR__0155
047a8                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
047a8     06 00 00 FF 
047ac     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
047b0     16 39 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
047b4     3C 3B 02 F6 | 	mov	_var03, arg02
047b8     03 3A 66 F0 | 	shl	_var03, #3
047bc     3C 3B 02 F1 | 	add	_var03, arg02
047c0     03 3A 66 F0 | 	shl	_var03, #3
047c4     1D 39 02 F1 | 	add	_var02, _var03
047c8     1B 3D 02 F6 | 	mov	_var04, _var01
047cc     01 3C 66 F0 | 	shl	_var04, #1
047d0     1C 3D 02 F1 | 	add	_var04, _var02
047d4     1E 3F E2 FA | 	rdword	_var05, _var04
047d8     3B 3F 5A F2 | 	cmps	_var05, arg01 wcz
047dc                 | '       quit
047dc     06 00 00 FF 
047e0     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
047e4     0C 00 90 ED |  if_be	jmp	#LR__0157
047e8     01 36 06 F1 | 	add	_var01, #1
047ec     24 36 5E F2 | 	cmps	_var01, #36 wcz
047f0     B4 FF 9F CD |  if_b	jmp	#LR__0155
047f4                 | LR__0156
047f4                 | LR__0157
047f4                 | ' 
047f4                 | '   return i
047f4     1B 31 02 F6 | 	mov	result1, _var01
047f8                 | _trackerplayer_spin2_amigaPeriodToNote_ret
047f8     2D 00 64 FD | 	ret
047fc                 | 
047fc                 | ' 
047fc                 | ' 
047fc                 | ' PRI retunePeriod(period, fTune) | noteNumber
047fc                 | _trackerplayer_spin2_retunePeriod
047fc     06 5A 05 F6 | 	mov	COUNT_, #6
04800     B0 00 A0 FD | 	call	#pushregs_
04804     3B 85 02 F6 | 	mov	local01, arg01
04808     3C 87 02 F6 | 	mov	local02, arg02
0480c                 | ' 
0480c                 | '   if period > 0 and fTune < 16
0480c     00 84 5E F2 | 	cmps	local01, #0 wcz
04810     50 00 90 ED |  if_be	jmp	#LR__0158
04814     10 86 5E F2 | 	cmps	local02, #16 wcz
04818     48 00 90 3D |  if_ae	jmp	#LR__0158
0481c                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
0481c     42 77 E2 FA | 	rdword	arg01, local01
04820     00 78 06 F6 | 	mov	arg02, #0
04824     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
04828     18 89 02 F6 | 	mov	local03, result1
0482c                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
0482c     06 00 00 FF 
04830     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04834     16 8B 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
04838     43 8D 02 F6 | 	mov	local05, local02
0483c     03 8C 66 F0 | 	shl	local05, #3
04840     43 8D 02 F1 | 	add	local05, local02
04844     03 8C 66 F0 | 	shl	local05, #3
04848     46 8B 02 F1 | 	add	local04, local05
0484c     01 88 66 F0 | 	shl	local03, #1
04850     45 89 02 F1 | 	add	local03, local04
04854     44 8F E2 FA | 	rdword	local06, local03
04858     42 8F 52 FC | 	wrword	local06, local01
0485c     06 00 00 FF 
04860     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04864                 | LR__0158
04864     AF F0 03 F6 | 	mov	ptra, fp
04868     BF 00 A0 FD | 	call	#popregs_
0486c                 | _trackerplayer_spin2_retunePeriod_ret
0486c     2D 00 64 FD | 	ret
04870                 | 
04870                 | ' 
04870                 | ' 
04870                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04870                 | _trackerplayer_spin2_getSampleInfo
04870     3B 37 0A F6 | 	mov	_var01, arg01 wz
04874                 | ' 
04874                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04874     08 00 90 AD |  if_e	jmp	#LR__0159
04878     1F 36 5E F2 | 	cmps	_var01, #31 wcz
0487c     08 00 90 ED |  if_be	jmp	#LR__0160
04880                 | LR__0159
04880                 | '     long[samplePtr] := 0
04880     3C 01 68 FC | 	wrlong	#0, arg02
04884                 | '     return
04884     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04888                 | LR__0160
04888                 | ' 
04888                 | '   sampleNumber--
04888     01 36 86 F1 | 	sub	_var01, #1
0488c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0488c     0A 0E 06 F1 | 	add	objptr, #10
04890     07 39 02 FB | 	rdlong	_var02, objptr
04894     1B 3B 02 F6 | 	mov	_var03, _var01
04898     04 3A 66 F0 | 	shl	_var03, #4
0489c     1B 3B 82 F1 | 	sub	_var03, _var01
048a0     01 3A 66 F0 | 	shl	_var03, #1
048a4     1D 39 02 F1 | 	add	_var02, _var03
048a8                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
048a8     1C 3D 02 F6 | 	mov	_var04, _var02
048ac     16 3C 06 F1 | 	add	_var04, #22
048b0     1E 3F C2 FA | 	rdbyte	_var05, _var04
048b4     08 3E 66 F0 | 	shl	_var05, #8
048b8     1C 3B 02 F6 | 	mov	_var03, _var02
048bc     17 3A 06 F1 | 	add	_var03, #23
048c0     1D 41 C2 FA | 	rdbyte	_var06, _var03
048c4     20 3F 42 F5 | 	or	_var05, _var06
048c8     01 3E 66 F0 | 	shl	_var05, #1
048cc     3D 3F 62 FC | 	wrlong	_var05, arg03
048d0                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
048d0     1C 3F 02 F6 | 	mov	_var05, _var02
048d4     18 3E 06 F1 | 	add	_var05, #24
048d8     1F 3D C2 FA | 	rdbyte	_var04, _var05
048dc     3E 3D 62 FC | 	wrlong	_var04, arg04
048e0                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
048e0     1C 3F 02 F6 | 	mov	_var05, _var02
048e4     19 3E 06 F1 | 	add	_var05, #25
048e8     1F 3D C2 FA | 	rdbyte	_var04, _var05
048ec     3F 3D 62 FC | 	wrlong	_var04, arg05
048f0                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
048f0     1C 3D 02 F6 | 	mov	_var04, _var02
048f4     1A 3C 06 F1 | 	add	_var04, #26
048f8     1E 3F C2 FA | 	rdbyte	_var05, _var04
048fc     08 3E 66 F0 | 	shl	_var05, #8
04900     1C 3B 02 F6 | 	mov	_var03, _var02
04904     1B 3A 06 F1 | 	add	_var03, #27
04908     1D 41 C2 FA | 	rdbyte	_var06, _var03
0490c     20 3F 42 F5 | 	or	_var05, _var06
04910     01 3E 66 F0 | 	shl	_var05, #1
04914     40 3F 62 FC | 	wrlong	_var05, arg06
04918                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
04918     1C 3D 02 F6 | 	mov	_var04, _var02
0491c     1C 3C 06 F1 | 	add	_var04, #28
04920     1E 3F C2 FA | 	rdbyte	_var05, _var04
04924     08 3E 66 F0 | 	shl	_var05, #8
04928     1D 38 06 F1 | 	add	_var02, #29
0492c     1C 41 C2 FA | 	rdbyte	_var06, _var02
04930     20 3F 42 F5 | 	or	_var05, _var06
04934     01 3E 66 F0 | 	shl	_var05, #1
04938     41 3F 62 FC | 	wrlong	_var05, arg07
0493c                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
0493c     02 36 66 F0 | 	shl	_var01, #2
04940     08 0E 06 F1 | 	add	objptr, #8
04944     07 37 02 F1 | 	add	_var01, objptr
04948     1B 3B 02 FB | 	rdlong	_var03, _var01
0494c     3C 3B 62 FC | 	wrlong	_var03, arg02
04950                 | ' 
04950                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04950     41 3F 02 FB | 	rdlong	_var05, arg07
04954     02 3E 0E F2 | 	cmp	_var05, #2 wz
04958     12 0E 86 F1 | 	sub	objptr, #18
0495c     08 00 90 5D |  if_ne	jmp	#LR__0161
04960     40 3D 0A FB | 	rdlong	_var04, arg06 wz
04964                 | '     long[repeatLength] := 1
04964     41 03 68 AC |  if_e	wrlong	#1, arg07
04968                 | LR__0161
04968                 | _trackerplayer_spin2_getSampleInfo_ret
04968     2D 00 64 FD | 	ret
0496c                 | 
0496c                 | ' 
0496c                 | ' 
0496c                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
0496c                 | _trackerplayer_spin2_getNoteData
0496c                 | ' 
0496c                 | '   ' Get the note data for a specific channel/song position/pattern row
0496c                 | '   patternNumber := byte[songPositionsLut][position & 127]
0496c     96 0E 06 F1 | 	add	objptr, #150
04970     07 37 02 FB | 	rdlong	_var01, objptr
04974     7F 78 06 F5 | 	and	arg02, #127
04978     1B 79 02 F1 | 	add	arg02, _var01
0497c     3C 39 C2 FA | 	rdbyte	_var02, arg02
04980                 | '   patternPtr    := patternsData + (patternNumber << 10)
04980     04 0E 86 F1 | 	sub	objptr, #4
04984     07 3B 02 FB | 	rdlong	_var03, objptr
04988     92 0E 86 F1 | 	sub	objptr, #146
0498c     0A 38 66 F0 | 	shl	_var02, #10
04990     1C 3B 02 F1 | 	add	_var03, _var02
04994                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04994     3F 7A 06 F5 | 	and	arg03, #63
04998     04 7A 66 F0 | 	shl	arg03, #4
0499c     3D 3B 02 F1 | 	add	_var03, arg03
049a0     03 76 06 F5 | 	and	arg01, #3
049a4     02 76 66 F0 | 	shl	arg01, #2
049a8     3B 3B 02 F1 | 	add	_var03, arg01
049ac                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
049ac     1D 3D C2 FA | 	rdbyte	_var04, _var03
049b0     18 3C 66 F0 | 	shl	_var04, #24
049b4     01 3A 06 F1 | 	add	_var03, #1
049b8     1D 3F C2 FA | 	rdbyte	_var05, _var03
049bc     10 3E 66 F0 | 	shl	_var05, #16
049c0     1F 3D 42 F5 | 	or	_var04, _var05
049c4     01 3A 06 F1 | 	add	_var03, #1
049c8     1D 41 C2 FA | 	rdbyte	_var06, _var03
049cc     08 40 66 F0 | 	shl	_var06, #8
049d0     20 3D 42 F5 | 	or	_var04, _var06
049d4     01 3A 06 F1 | 	add	_var03, #1
049d8     1D 43 C2 FA | 	rdbyte	_var07, _var03
049dc     21 3D 42 F5 | 	or	_var04, _var07
049e0                 | ' 
049e0                 | '   ' Extract the different sub parts from the data
049e0                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
049e0     1E 45 02 F6 | 	mov	_var08, _var04
049e4     0C 44 46 F0 | 	shr	_var08, #12
049e8     0F 44 06 F5 | 	and	_var08, #15
049ec     1E 3F 02 F6 | 	mov	_var05, _var04
049f0     18 3E 46 F0 | 	shr	_var05, #24
049f4     F0 3E 06 F5 | 	and	_var05, #240
049f8     1F 45 42 F5 | 	or	_var08, _var05
049fc     3E 45 62 FC | 	wrlong	_var08, arg04
04a00                 | '   long[period]       :=  (data >> 16) & $FFF
04a00     1E 45 02 F6 | 	mov	_var08, _var04
04a04     10 44 46 F0 | 	shr	_var08, #16
04a08     07 00 00 FF 
04a0c     FF 45 06 F5 | 	and	_var08, ##4095
04a10     3F 45 62 FC | 	wrlong	_var08, arg05
04a14                 | '   long[effect]       :=   data & $FFF
04a14     07 00 00 FF 
04a18     FF 3D 06 F5 | 	and	_var04, ##4095
04a1c     40 3D 62 FC | 	wrlong	_var04, arg06
04a20                 | _trackerplayer_spin2_getNoteData_ret
04a20     2D 00 64 FD | 	ret
04a24                 | 
04a24                 | ' 
04a24                 | ' 
04a24                 | ' PRI triggerNote(channel)
04a24                 | _trackerplayer_spin2_triggerNote
04a24                 | ' 
04a24                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04a24     3B 37 02 F6 | 	mov	_var01, arg01
04a28     02 36 66 F0 | 	shl	_var01, #2
04a2c     47 0F 06 F1 | 	add	objptr, #327
04a30     07 37 02 F1 | 	add	_var01, objptr
04a34     3B 39 02 F6 | 	mov	_var02, arg01
04a38     90 0E 86 F1 | 	sub	objptr, #144
04a3c     1B 3B 02 FB | 	rdlong	_var03, _var01
04a40     07 39 02 F1 | 	add	_var02, objptr
04a44     1C 3B 42 FC | 	wrbyte	_var03, _var02
04a48                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
04a48     3B 37 02 F6 | 	mov	_var01, arg01
04a4c     02 36 66 F0 | 	shl	_var01, #2
04a50     80 0E 06 F1 | 	add	objptr, #128
04a54     07 37 02 F1 | 	add	_var01, objptr
04a58     3B 39 02 F6 | 	mov	_var02, arg01
04a5c     02 38 66 F0 | 	shl	_var02, #2
04a60     90 0E 86 F1 | 	sub	objptr, #144
04a64     1B 3B 02 FB | 	rdlong	_var03, _var01
04a68     07 39 02 F1 | 	add	_var02, objptr
04a6c     1C 3B 62 FC | 	wrlong	_var03, _var02
04a70                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04a70     3B 37 02 F6 | 	mov	_var01, arg01
04a74     02 36 66 F0 | 	shl	_var01, #2
04a78     80 0E 06 F1 | 	add	objptr, #128
04a7c     07 37 02 F1 | 	add	_var01, objptr
04a80     3B 39 02 F6 | 	mov	_var02, arg01
04a84     02 38 66 F0 | 	shl	_var02, #2
04a88     48 0E 86 F1 | 	sub	objptr, #72
04a8c     1B 3B 02 FB | 	rdlong	_var03, _var01
04a90     07 39 02 F1 | 	add	_var02, objptr
04a94     1C 3B 62 FC | 	wrlong	_var03, _var02
04a98                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04a98     3B 37 02 F6 | 	mov	_var01, arg01
04a9c     02 36 66 F0 | 	shl	_var01, #2
04aa0     78 0E 06 F1 | 	add	objptr, #120
04aa4     07 37 02 F1 | 	add	_var01, objptr
04aa8     3B 3D 02 F6 | 	mov	_var04, arg01
04aac     01 3C 66 F0 | 	shl	_var04, #1
04ab0     9C 0E 86 F1 | 	sub	objptr, #156
04ab4     1B 3F 02 FB | 	rdlong	_var05, _var01
04ab8     07 3D 02 F1 | 	add	_var04, objptr
04abc     1E 3F 52 FC | 	wrword	_var05, _var04
04ac0                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04ac0     3B 37 02 F6 | 	mov	_var01, arg01
04ac4     02 36 66 F0 | 	shl	_var01, #2
04ac8     AC 0E 06 F1 | 	add	objptr, #172
04acc     07 37 02 F1 | 	add	_var01, objptr
04ad0     3B 39 02 F6 | 	mov	_var02, arg01
04ad4     02 38 66 F0 | 	shl	_var02, #2
04ad8     A4 0E 86 F1 | 	sub	objptr, #164
04adc     1B 3B 02 FB | 	rdlong	_var03, _var01
04ae0     07 39 02 F1 | 	add	_var02, objptr
04ae4     1C 3B 62 FC | 	wrlong	_var03, _var02
04ae8                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04ae8     3B 37 02 F6 | 	mov	_var01, arg01
04aec     02 36 66 F0 | 	shl	_var01, #2
04af0     B4 0E 06 F1 | 	add	objptr, #180
04af4     07 37 02 F1 | 	add	_var01, objptr
04af8     3B 3D 02 F6 | 	mov	_var04, arg01
04afc     01 3C 66 F0 | 	shl	_var04, #1
04b00     A0 0E 86 F1 | 	sub	objptr, #160
04b04     1B 3F 02 FB | 	rdlong	_var05, _var01
04b08     07 3D 02 F1 | 	add	_var04, objptr
04b0c     1E 3F 52 FC | 	wrword	_var05, _var04
04b10                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04b10     3B 41 02 F6 | 	mov	_var06, arg01
04b14     1F 0F 06 F1 | 	add	objptr, #287
04b18     07 41 02 F1 | 	add	_var06, objptr
04b1c     20 37 C2 FA | 	rdbyte	_var01, _var06
04b20     01 36 06 F1 | 	add	_var01, #1
04b24     07 77 02 F1 | 	add	arg01, objptr
04b28     3B 37 42 FC | 	wrbyte	_var01, arg01
04b2c     F6 0F 86 F1 | 	sub	objptr, #502
04b30                 | _trackerplayer_spin2_triggerNote_ret
04b30     2D 00 64 FD | 	ret
04b34                 | 
04b34                 | ' 
04b34                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04b34                 | _trackerplayer_spin2_processChannel
04b34     0F 5A 05 F6 | 	mov	COUNT_, #15
04b38     B0 00 A0 FD | 	call	#pushregs_
04b3c     24 F0 07 F1 | 	add	ptra, #36
04b40     AF 76 62 FC | 	wrlong	arg01, fp
04b44     04 5E 05 F1 | 	add	fp, #4
04b48     AF 78 62 FC | 	wrlong	arg02, fp
04b4c     04 5E 05 F1 | 	add	fp, #4
04b50     AF 7A 62 FC | 	wrlong	arg03, fp
04b54     04 5E 05 F1 | 	add	fp, #4
04b58     AF 7C 62 FC | 	wrlong	arg04, fp
04b5c     0C 5E 85 F1 | 	sub	fp, #12
04b60                 | ' 
04b60                 | '   channel := channel & 3
04b60     AF 84 02 FB | 	rdlong	local01, fp
04b64     03 84 06 F5 | 	and	local01, #3
04b68     AF 84 62 FC | 	wrlong	local01, fp
04b6c                 | '   cmd     := (effect >> 8) & $F
04b6c     0C 5E 05 F1 | 	add	fp, #12
04b70     AF 84 02 FB | 	rdlong	local01, fp
04b74     08 84 46 F0 | 	shr	local01, #8
04b78     0F 84 06 F5 | 	and	local01, #15
04b7c     BA 0F 06 F1 | 	add	objptr, #442
04b80     07 85 42 FC | 	wrbyte	local01, objptr
04b84                 | '   x       := (effect >> 4) & $F
04b84     AF 84 02 FB | 	rdlong	local01, fp
04b88     04 84 46 F0 | 	shr	local01, #4
04b8c     0F 84 06 F5 | 	and	local01, #15
04b90     03 0E 86 F1 | 	sub	objptr, #3
04b94     07 85 42 FC | 	wrbyte	local01, objptr
04b98                 | '   y       := (effect     ) & $F
04b98     AF 84 02 FB | 	rdlong	local01, fp
04b9c     0F 84 06 F5 | 	and	local01, #15
04ba0     01 0E 06 F1 | 	add	objptr, #1
04ba4     07 85 42 FC | 	wrbyte	local01, objptr
04ba8                 | '   z       := (effect     ) & $FF
04ba8     AF 84 02 FB | 	rdlong	local01, fp
04bac     0C 5E 85 F1 | 	sub	fp, #12
04bb0     FF 84 06 F5 | 	and	local01, #255
04bb4     01 0E 06 F1 | 	add	objptr, #1
04bb8     07 85 42 FC | 	wrbyte	local01, objptr
04bbc                 | ' 
04bbc                 | '   ' Handle everything that executes on "tick zero"
04bbc                 | '   if tickCounter == 0
04bbc     18 0F 86 F1 | 	sub	objptr, #280
04bc0     07 85 CA FA | 	rdbyte	local01, objptr wz
04bc4     A1 0E 86 F1 | 	sub	objptr, #161
04bc8     F8 03 90 5D |  if_ne	jmp	#LR__0172
04bcc                 | ' 
04bcc                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04bcc                 | '     deltaPeriod[channel] := 0
04bcc     AF 84 02 FB | 	rdlong	local01, fp
04bd0     02 84 66 F0 | 	shl	local01, #2
04bd4     EF 0E 06 F1 | 	add	objptr, #239
04bd8     07 85 02 F1 | 	add	local01, objptr
04bdc     42 01 68 FC | 	wrlong	#0, local01
04be0                 | '     deltaVolume[channel] := 0
04be0     AF 84 02 FB | 	rdlong	local01, fp
04be4     02 84 66 F0 | 	shl	local01, #2
04be8     20 0E 06 F1 | 	add	objptr, #32
04bec     07 85 02 F1 | 	add	local01, objptr
04bf0     42 01 68 FC | 	wrlong	#0, local01
04bf4                 | ' 
04bf4                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04bf4                 | '     if sampleNumber > 0
04bf4     04 5E 05 F1 | 	add	fp, #4
04bf8     AF 84 02 FB | 	rdlong	local01, fp
04bfc     04 5E 85 F1 | 	sub	fp, #4
04c00     00 84 5E F2 | 	cmps	local01, #0 wcz
04c04     0F 0F 86 F1 | 	sub	objptr, #271
04c08     20 00 90 ED |  if_be	jmp	#LR__0162
04c0c                 | '       sampleNumber_memory[channel] := sampleNumber
04c0c     AF 84 02 FB | 	rdlong	local01, fp
04c10     E0 0F 06 F1 | 	add	objptr, #480
04c14     07 85 02 F1 | 	add	local01, objptr
04c18     04 5E 05 F1 | 	add	fp, #4
04c1c     AF 86 02 FB | 	rdlong	local02, fp
04c20     04 5E 85 F1 | 	sub	fp, #4
04c24     42 87 42 FC | 	wrbyte	local02, local01
04c28     E0 0F 86 F1 | 	sub	objptr, #480
04c2c                 | LR__0162
04c2c                 | ' 
04c2c                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04c2c                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04c2c     AF 84 02 FB | 	rdlong	local01, fp
04c30     E0 0F 06 F1 | 	add	objptr, #480
04c34     07 85 02 F1 | 	add	local01, objptr
04c38     42 77 C2 FA | 	rdbyte	arg01, local01
04c3c     20 5E 05 F1 | 	add	fp, #32
04c40     AF 78 02 F6 | 	mov	arg02, fp
04c44     10 5E 85 F1 | 	sub	fp, #16
04c48     AF 88 02 F6 | 	mov	local03, fp
04c4c     31 0E 86 F1 | 	sub	objptr, #49
04c50     07 8B 02 F6 | 	mov	local04, objptr
04c54     45 8D 02 F6 | 	mov	local05, local04
04c58     04 5E 05 F1 | 	add	fp, #4
04c5c     AF 8E 02 F6 | 	mov	local06, fp
04c60     47 91 02 F6 | 	mov	local07, local06
04c64     04 5E 05 F1 | 	add	fp, #4
04c68     AF 92 02 F6 | 	mov	local08, fp
04c6c     49 95 02 F6 | 	mov	local09, local08
04c70     04 5E 05 F1 | 	add	fp, #4
04c74     AF 96 02 F6 | 	mov	local10, fp
04c78     4B 99 02 F6 | 	mov	local11, local10
04c7c     44 7B 02 F6 | 	mov	arg03, local03
04c80     46 7D 02 F6 | 	mov	arg04, local05
04c84     48 7F 02 F6 | 	mov	arg05, local07
04c88     4A 81 02 F6 | 	mov	arg06, local09
04c8c     4C 83 02 F6 | 	mov	arg07, local11
04c90     AF 0F 86 F1 | 	sub	objptr, #431
04c94     1C 5E 85 F1 | 	sub	fp, #28
04c98     D4 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04c9c                 | ' 
04c9c                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04c9c                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04c9c                 | '     if sampleNumber > 0
04c9c     04 5E 05 F1 | 	add	fp, #4
04ca0     AF 84 02 FB | 	rdlong	local01, fp
04ca4     04 5E 85 F1 | 	sub	fp, #4
04ca8     00 84 5E F2 | 	cmps	local01, #0 wcz
04cac     24 00 90 ED |  if_be	jmp	#LR__0163
04cb0                 | '       currVolume[channel] := volume
04cb0     AF 84 02 FB | 	rdlong	local01, fp
04cb4     02 84 66 F0 | 	shl	local01, #2
04cb8     FF 0E 06 F1 | 	add	objptr, #255
04cbc     07 85 02 F1 | 	add	local01, objptr
04cc0     14 5E 05 F1 | 	add	fp, #20
04cc4     AF 86 02 FB | 	rdlong	local02, fp
04cc8     14 5E 85 F1 | 	sub	fp, #20
04ccc     42 87 62 FC | 	wrlong	local02, local01
04cd0     FF 0E 86 F1 | 	sub	objptr, #255
04cd4                 | LR__0163
04cd4                 | ' 
04cd4                 | '     ' Handle all commands that executes on "zero tick"
04cd4                 | '     sampleOffset := 0
04cd4     B3 0F 06 F1 | 	add	objptr, #435
04cd8     07 01 68 FC | 	wrlong	#0, objptr
04cdc     B3 0F 86 F1 | 	sub	objptr, #435
04ce0                 | '     handleZeroTickCommands(channel)
04ce0     AF 76 02 FB | 	rdlong	arg01, fp
04ce4     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04ce8                 | ' 
04ce8                 | '     ' Prepare sample data for triggering (now or later)
04ce8                 | '     if period > 0
04ce8     08 5E 05 F1 | 	add	fp, #8
04cec     AF 84 02 FB | 	rdlong	local01, fp
04cf0     08 5E 85 F1 | 	sub	fp, #8
04cf4     00 84 5E F2 | 	cmps	local01, #0 wcz
04cf8     D0 02 90 ED |  if_be	jmp	#LR__0173
04cfc                 | ' 
04cfc                 | '       retunePeriod(@period, fineTune)
04cfc     08 5E 05 F1 | 	add	fp, #8
04d00     AF 76 02 F6 | 	mov	arg01, fp
04d04     08 5E 85 F1 | 	sub	fp, #8
04d08     AF 0F 06 F1 | 	add	objptr, #431
04d0c     07 79 02 FB | 	rdlong	arg02, objptr
04d10     AF 0F 86 F1 | 	sub	objptr, #431
04d14     E4 FA BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04d18                 | '       currFineTune[channel]        := fineTune
04d18     AF 84 02 FB | 	rdlong	local01, fp
04d1c     D3 0E 06 F1 | 	add	objptr, #211
04d20     07 85 02 F1 | 	add	local01, objptr
04d24     DC 0E 06 F1 | 	add	objptr, #220
04d28     07 87 02 FB | 	rdlong	local02, objptr
04d2c     42 87 42 FC | 	wrbyte	local02, local01
04d30                 | '       lastSetPeriod[channel]       := period
04d30     AF 84 02 FB | 	rdlong	local01, fp
04d34     02 84 66 F0 | 	shl	local01, #2
04d38     88 0E 86 F1 | 	sub	objptr, #136
04d3c     07 85 02 F1 | 	add	local01, objptr
04d40     08 5E 05 F1 | 	add	fp, #8
04d44     AF 86 02 FB | 	rdlong	local02, fp
04d48     42 87 62 FC | 	wrlong	local02, local01
04d4c     08 5E 85 F1 | 	sub	fp, #8
04d50                 | '       lastSetRepeatLength[channel] := repeatLength
04d50     AF 84 02 FB | 	rdlong	local01, fp
04d54     02 84 66 F0 | 	shl	local01, #2
04d58     40 0E 06 F1 | 	add	objptr, #64
04d5c     07 85 02 F1 | 	add	local01, objptr
04d60     1C 5E 05 F1 | 	add	fp, #28
04d64     AF 86 02 FB | 	rdlong	local02, fp
04d68     42 87 62 FC | 	wrlong	local02, local01
04d6c     1C 5E 85 F1 | 	sub	fp, #28
04d70                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04d70     AF 84 02 FB | 	rdlong	local01, fp
04d74     02 84 66 F0 | 	shl	local01, #2
04d78     10 0E 06 F1 | 	add	objptr, #16
04d7c     07 85 02 F1 | 	add	local01, objptr
04d80     18 5E 05 F1 | 	add	fp, #24
04d84     AF 86 02 FB | 	rdlong	local02, fp
04d88     42 87 62 FC | 	wrlong	local02, local01
04d8c                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04d8c     08 5E 05 F1 | 	add	fp, #8
04d90     AF 84 02 FB | 	rdlong	local01, fp
04d94     20 5E 85 F1 | 	sub	fp, #32
04d98     3C 0E 06 F1 | 	add	objptr, #60
04d9c     07 87 02 FB | 	rdlong	local02, objptr
04da0     43 85 02 F1 | 	add	local01, local02
04da4     AF 9A 02 FB | 	rdlong	local12, fp
04da8     02 9A 66 F0 | 	shl	local12, #2
04dac     7C 0E 86 F1 | 	sub	objptr, #124
04db0     07 9D 02 F6 | 	mov	local13, objptr
04db4     07 9B 02 F1 | 	add	local12, objptr
04db8     4D 85 62 FC | 	wrlong	local01, local12
04dbc                 | '       lastSetSampleNr[channel]     := sampleNumber
04dbc     AF 84 02 FB | 	rdlong	local01, fp
04dc0     02 84 66 F0 | 	shl	local01, #2
04dc4     10 0E 06 F1 | 	add	objptr, #16
04dc8     07 85 02 F1 | 	add	local01, objptr
04dcc     04 5E 05 F1 | 	add	fp, #4
04dd0     AF 86 02 FB | 	rdlong	local02, fp
04dd4     42 87 62 FC | 	wrlong	local02, local01
04dd8                 | ' 
04dd8                 | '       ' This calculates the correct sample length in all situations
04dd8                 | '       if repeatLength > 2
04dd8     18 5E 05 F1 | 	add	fp, #24
04ddc     AF 84 02 FB | 	rdlong	local01, fp
04de0     1C 5E 85 F1 | 	sub	fp, #28
04de4     02 84 5E F2 | 	cmps	local01, #2 wcz
04de8     47 0F 86 F1 | 	sub	objptr, #327
04dec     20 00 90 ED |  if_be	jmp	#LR__0164
04df0                 | '         sampleLength := repeatPoint + repeatLength
04df0     18 5E 05 F1 | 	add	fp, #24
04df4     AF 84 02 FB | 	rdlong	local01, fp
04df8     04 5E 05 F1 | 	add	fp, #4
04dfc     AF 86 02 FB | 	rdlong	local02, fp
04e00     43 85 02 F1 | 	add	local01, local02
04e04     0C 5E 85 F1 | 	sub	fp, #12
04e08     AF 84 62 FC | 	wrlong	local01, fp
04e0c     10 5E 85 F1 | 	sub	fp, #16
04e10                 | LR__0164
04e10                 | ' 
04e10                 | '       if sampleLength - sampleOffset < 1
04e10     10 5E 05 F1 | 	add	fp, #16
04e14     AF 84 02 FB | 	rdlong	local01, fp
04e18     10 5E 85 F1 | 	sub	fp, #16
04e1c     B3 0F 06 F1 | 	add	objptr, #435
04e20     07 87 02 FB | 	rdlong	local02, objptr
04e24     B3 0F 86 F1 | 	sub	objptr, #435
04e28     43 85 82 F1 | 	sub	local01, local02
04e2c     01 84 5E F2 | 	cmps	local01, #1 wcz
04e30     1C 00 90 3D |  if_ae	jmp	#LR__0165
04e34                 | '         lastSetSampleLength[channel] := 1
04e34     AF 84 02 FB | 	rdlong	local01, fp
04e38     02 84 66 F0 | 	shl	local01, #2
04e3c     57 0F 06 F1 | 	add	objptr, #343
04e40     07 85 02 F1 | 	add	local01, objptr
04e44     42 03 68 FC | 	wrlong	#1, local01
04e48                 | '       else
04e48     57 0F 86 F1 | 	sub	objptr, #343
04e4c     34 00 90 FD | 	jmp	#LR__0166
04e50                 | LR__0165
04e50                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04e50     10 5E 05 F1 | 	add	fp, #16
04e54     AF 84 02 FB | 	rdlong	local01, fp
04e58     10 5E 85 F1 | 	sub	fp, #16
04e5c     B3 0F 06 F1 | 	add	objptr, #435
04e60     07 87 02 FB | 	rdlong	local02, objptr
04e64     43 85 82 F1 | 	sub	local01, local02
04e68     AF 9A 02 FB | 	rdlong	local12, fp
04e6c     02 9A 66 F0 | 	shl	local12, #2
04e70     5C 0E 86 F1 | 	sub	objptr, #92
04e74     07 9D 02 F6 | 	mov	local13, objptr
04e78     07 9B 02 F1 | 	add	local12, objptr
04e7c     4D 85 62 FC | 	wrlong	local01, local12
04e80     57 0F 86 F1 | 	sub	objptr, #343
04e84                 | LR__0166
04e84                 | ' 
04e84                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04e84                 | '       if sampleOffset > sampleLength
04e84     B3 0F 06 F1 | 	add	objptr, #435
04e88     07 85 02 FB | 	rdlong	local01, objptr
04e8c     B3 0F 86 F1 | 	sub	objptr, #435
04e90     10 5E 05 F1 | 	add	fp, #16
04e94     AF 86 02 FB | 	rdlong	local02, fp
04e98     10 5E 85 F1 | 	sub	fp, #16
04e9c     43 85 5A F2 | 	cmps	local01, local02 wcz
04ea0     54 00 90 ED |  if_be	jmp	#LR__0167
04ea4                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04ea4     20 5E 05 F1 | 	add	fp, #32
04ea8     AF 84 02 FB | 	rdlong	local01, fp
04eac     08 5E 85 F1 | 	sub	fp, #8
04eb0     AF 86 02 FB | 	rdlong	local02, fp
04eb4     18 5E 85 F1 | 	sub	fp, #24
04eb8     43 85 02 F1 | 	add	local01, local02
04ebc     AF 9A 02 FB | 	rdlong	local12, fp
04ec0     02 9A 66 F0 | 	shl	local12, #2
04ec4     37 0F 06 F1 | 	add	objptr, #311
04ec8     07 9D 02 F6 | 	mov	local13, objptr
04ecc     07 9B 02 F1 | 	add	local12, objptr
04ed0     4D 85 62 FC | 	wrlong	local01, local12
04ed4                 | '         lastSetSampleLength[channel] := repeatLength
04ed4     AF 84 02 FB | 	rdlong	local01, fp
04ed8     02 84 66 F0 | 	shl	local01, #2
04edc     20 0E 06 F1 | 	add	objptr, #32
04ee0     07 85 02 F1 | 	add	local01, objptr
04ee4     1C 5E 05 F1 | 	add	fp, #28
04ee8     AF 86 02 FB | 	rdlong	local02, fp
04eec     1C 5E 85 F1 | 	sub	fp, #28
04ef0     42 87 62 FC | 	wrlong	local02, local01
04ef4     57 0F 86 F1 | 	sub	objptr, #343
04ef8                 | LR__0167
04ef8                 | ' 
04ef8                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04ef8                 | '       ifnot cmd == $3 || cmd == $5
04ef8     BA 0F 06 F1 | 	add	objptr, #442
04efc     07 85 C2 FA | 	rdbyte	local01, objptr
04f00     BA 0F 86 F1 | 	sub	objptr, #442
04f04     03 84 0E F2 | 	cmp	local01, #3 wz
04f08     54 00 90 AD |  if_e	jmp	#LR__0170
04f0c     BA 0F 06 F1 | 	add	objptr, #442
04f10     07 9F C2 FA | 	rdbyte	local14, objptr
04f14     BA 0F 86 F1 | 	sub	objptr, #442
04f18     4F 87 02 F6 | 	mov	local02, local14
04f1c     05 86 0E F2 | 	cmp	local02, #5 wz
04f20     3C 00 90 AD |  if_e	jmp	#LR__0170
04f24                 | '         ifnot cmd == $E && x == $D
04f24     BA 0F 06 F1 | 	add	objptr, #442
04f28     07 A1 C2 FA | 	rdbyte	local15, objptr
04f2c     BA 0F 86 F1 | 	sub	objptr, #442
04f30     50 85 02 F6 | 	mov	local01, local15
04f34     0E 84 0E F2 | 	cmp	local01, #14 wz
04f38     18 00 90 5D |  if_ne	jmp	#LR__0168
04f3c     B7 0F 06 F1 | 	add	objptr, #439
04f40     07 9F C2 FA | 	rdbyte	local14, objptr
04f44     B7 0F 86 F1 | 	sub	objptr, #439
04f48     4F 87 02 F6 | 	mov	local02, local14
04f4c     0D 86 0E F2 | 	cmp	local02, #13 wz
04f50     0C 00 90 AD |  if_e	jmp	#LR__0169
04f54                 | LR__0168
04f54                 | '           triggerNote(channel)
04f54     AF 84 02 FB | 	rdlong	local01, fp
04f58     42 77 02 F6 | 	mov	arg01, local01
04f5c     C4 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04f60                 | LR__0169
04f60                 | LR__0170
04f60                 | ' 
04f60                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04f60                 | '       if resetTremolo[channel] > 0
04f60     AF 84 02 FB | 	rdlong	local01, fp
04f64     8F 0F 06 F1 | 	add	objptr, #399
04f68     07 85 02 F1 | 	add	local01, objptr
04f6c     42 87 C2 FA | 	rdbyte	local02, local01
04f70     00 86 5E F2 | 	cmps	local02, #0 wcz
04f74     8F 0F 86 F1 | 	sub	objptr, #399
04f78     14 00 90 ED |  if_be	jmp	#LR__0171
04f7c                 | '         tremoloPos[channel] := 0
04f7c     AF 84 02 FB | 	rdlong	local01, fp
04f80     8B 0F 06 F1 | 	add	objptr, #395
04f84     07 85 02 F1 | 	add	local01, objptr
04f88     42 01 48 FC | 	wrbyte	#0, local01
04f8c     8B 0F 86 F1 | 	sub	objptr, #395
04f90                 | LR__0171
04f90                 | ' 
04f90                 | '       if resetVibrato[channel] > 0
04f90     AF 84 02 FB | 	rdlong	local01, fp
04f94     93 0F 06 F1 | 	add	objptr, #403
04f98     07 85 02 F1 | 	add	local01, objptr
04f9c     42 87 C2 FA | 	rdbyte	local02, local01
04fa0     00 86 5E F2 | 	cmps	local02, #0 wcz
04fa4     93 0F 86 F1 | 	sub	objptr, #403
04fa8     20 00 90 ED |  if_be	jmp	#LR__0173
04fac                 | '         vibratoPos[channel] := 0
04fac     AF 84 02 FB | 	rdlong	local01, fp
04fb0     87 0F 06 F1 | 	add	objptr, #391
04fb4     07 85 02 F1 | 	add	local01, objptr
04fb8     42 01 48 FC | 	wrbyte	#0, local01
04fbc     87 0F 86 F1 | 	sub	objptr, #391
04fc0                 | ' 
04fc0                 | '   else
04fc0     08 00 90 FD | 	jmp	#LR__0173
04fc4                 | LR__0172
04fc4                 | '     ' Handle commands that executes on all "non zero ticks"
04fc4                 | '     handleNonZeroTickCommands(channel)
04fc4     AF 76 02 FB | 	rdlong	arg01, fp
04fc8     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04fcc                 | LR__0173
04fcc                 | ' 
04fcc                 | '   ' Handle commands that executes on every tick
04fcc                 | '   handleEveryTickCommands(channel)
04fcc     AF 76 02 FB | 	rdlong	arg01, fp
04fd0     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04fd4                 | ' 
04fd4                 | '   ' Handle boundaries that should be kept
04fd4                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04fd4     AF A0 02 FB | 	rdlong	local15, fp
04fd8     02 A0 66 F0 | 	shl	local15, #2
04fdc     DF 0E 06 F1 | 	add	objptr, #223
04fe0     07 A1 02 F1 | 	add	local15, objptr
04fe4     50 85 02 FB | 	rdlong	local01, local15
04fe8     01 00 00 FF 
04fec     58 85 66 F3 | 	fles	local01, ##856
04ff0     AF 9E 02 FB | 	rdlong	local14, fp
04ff4     02 9E 66 F0 | 	shl	local14, #2
04ff8     07 9F 02 F1 | 	add	local14, objptr
04ffc     4F 85 62 FC | 	wrlong	local01, local14
05000                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
05000     AF A0 02 FB | 	rdlong	local15, fp
05004     02 A0 66 F0 | 	shl	local15, #2
05008     07 A1 02 F1 | 	add	local15, objptr
0500c     50 85 02 FB | 	rdlong	local01, local15
05010     71 84 46 F3 | 	fges	local01, #113
05014     AF 9E 02 FB | 	rdlong	local14, fp
05018     02 9E 66 F0 | 	shl	local14, #2
0501c     07 9F 02 F1 | 	add	local14, objptr
05020     4F 85 62 FC | 	wrlong	local01, local14
05024                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
05024     AF A0 02 FB | 	rdlong	local15, fp
05028     02 A0 66 F0 | 	shl	local15, #2
0502c     20 0E 06 F1 | 	add	objptr, #32
05030     07 A1 02 F1 | 	add	local15, objptr
05034     50 85 02 FB | 	rdlong	local01, local15
05038     40 84 66 F3 | 	fles	local01, #64
0503c     AF 9E 02 FB | 	rdlong	local14, fp
05040     02 9E 66 F0 | 	shl	local14, #2
05044     07 9F 02 F1 | 	add	local14, objptr
05048     4F 85 62 FC | 	wrlong	local01, local14
0504c                 | '   currVolume[channel] #>= MINIMUM_VOLUME
0504c     AF A0 02 FB | 	rdlong	local15, fp
05050     02 A0 66 F0 | 	shl	local15, #2
05054     07 A1 02 F1 | 	add	local15, objptr
05058     50 85 02 FB | 	rdlong	local01, local15
0505c     00 84 46 F3 | 	fges	local01, #0
05060     AF 9E 02 FB | 	rdlong	local14, fp
05064     02 9E 66 F0 | 	shl	local14, #2
05068     07 9F 02 F1 | 	add	local14, objptr
0506c     4F 85 62 FC | 	wrlong	local01, local14
05070     FF 0E 86 F1 | 	sub	objptr, #255
05074     AF F0 03 F6 | 	mov	ptra, fp
05078     BF 00 A0 FD | 	call	#popregs_
0507c                 | _trackerplayer_spin2_processChannel_ret
0507c     2D 00 64 FD | 	ret
05080                 | 
05080                 | ' 
05080                 | ' 
05080                 | ' ' Handle all commands that executes on tick zero
05080                 | ' '
05080                 | ' PRI handleZeroTickCommands(channel)
05080                 | _trackerplayer_spin2_handleZeroTickCommands
05080     3B 37 02 F6 | 	mov	_var01, arg01
05084                 | ' 
05084                 | '   CASE_FAST cmd
05084     BA 0F 06 F1 | 	add	objptr, #442
05088     07 39 C2 FA | 	rdbyte	_var02, objptr
0508c     BA 0F 86 F1 | 	sub	objptr, #442
05090     1C 3B 02 F6 | 	mov	_var03, _var02
05094     09 3A 86 F1 | 	sub	_var03, #9
05098     07 3A 26 F3 | 	fle	_var03, #7
0509c     1D 3D 02 F6 | 	mov	_var04, _var03
050a0     30 3C 62 FD | 	jmprel	_var04
050a4                 | LR__0174
050a4     1C 00 90 FD | 	jmp	#LR__0175
050a8     30 04 90 FD | 	jmp	#LR__0198
050ac     64 00 90 FD | 	jmp	#LR__0177
050b0     84 00 90 FD | 	jmp	#LR__0178
050b4     A0 00 90 FD | 	jmp	#LR__0179
050b8     D0 00 90 FD | 	jmp	#LR__0180
050bc     9C 03 90 FD | 	jmp	#LR__0195
050c0     18 04 90 FD | 	jmp	#LR__0198
050c4                 | LR__0175
050c4                 | ' 
050c4                 | '     $9:                          ' Set sample offset
050c4                 | '       if z > 0
050c4     B9 0F 06 F1 | 	add	objptr, #441
050c8     07 3F C2 FA | 	rdbyte	_var05, objptr
050cc     B9 0F 86 F1 | 	sub	objptr, #441
050d0     00 3E 5E F2 | 	cmps	_var05, #0 wcz
050d4     1C 00 90 ED |  if_be	jmp	#LR__0176
050d8                 | '         cmd9_memoryZ[channel] := z
050d8     1B 3F 02 F6 | 	mov	_var05, _var01
050dc     DC 0F 06 F1 | 	add	objptr, #476
050e0     07 3F 02 F1 | 	add	_var05, objptr
050e4     23 0E 86 F1 | 	sub	objptr, #35
050e8     07 41 C2 FA | 	rdbyte	_var06, objptr
050ec     B9 0F 86 F1 | 	sub	objptr, #441
050f0     1F 41 42 FC | 	wrbyte	_var06, _var05
050f4                 | LR__0176
050f4                 | ' 
050f4                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
050f4     DC 0F 06 F1 | 	add	objptr, #476
050f8     07 37 02 F1 | 	add	_var01, objptr
050fc     1B 3F C2 FA | 	rdbyte	_var05, _var01
05100     08 3E 66 F0 | 	shl	_var05, #8
05104     29 0E 86 F1 | 	sub	objptr, #41
05108     07 3F 62 FC | 	wrlong	_var05, objptr
0510c     B3 0F 86 F1 | 	sub	objptr, #435
05110     C8 03 90 FD | 	jmp	#LR__0198
05114                 | LR__0177
05114                 | ' 
05114                 | '     $B:                          ' Jump position
05114                 | '       cmdB_memoryZ := z
05114     B9 0F 06 F1 | 	add	objptr, #441
05118     07 3F C2 FA | 	rdbyte	_var05, objptr
0511c     2E 0E 06 F1 | 	add	objptr, #46
05120     07 3F 42 FC | 	wrbyte	_var05, objptr
05124                 | '       cmdB_updatePosition := true
05124     01 0E 06 F1 | 	add	objptr, #1
05128     FF FF FF FF 
0512c     07 FF 4B FC | 	wrbyte	##-1, objptr
05130     E8 0F 86 F1 | 	sub	objptr, #488
05134     A4 03 90 FD | 	jmp	#LR__0198
05138                 | LR__0178
05138                 | ' 
05138                 | '     $C:                          ' Set volume
05138                 | '       currVolume[channel] := z
05138     02 36 66 F0 | 	shl	_var01, #2
0513c     FF 0E 06 F1 | 	add	objptr, #255
05140     07 37 02 F1 | 	add	_var01, objptr
05144     BA 0E 06 F1 | 	add	objptr, #186
05148     07 41 C2 FA | 	rdbyte	_var06, objptr
0514c     B9 0F 86 F1 | 	sub	objptr, #441
05150     1B 41 62 FC | 	wrlong	_var06, _var01
05154     84 03 90 FD | 	jmp	#LR__0198
05158                 | LR__0179
05158                 | ' 
05158                 | '     $D:                          ' Pattern break
05158                 | '       cmdD_memoryX := x
05158     B7 0F 06 F1 | 	add	objptr, #439
0515c     07 3F C2 FA | 	rdbyte	_var05, objptr
05160     2D 0E 06 F1 | 	add	objptr, #45
05164     07 3F 42 FC | 	wrbyte	_var05, objptr
05168                 | '       cmdD_memoryY := y
05168     2C 0E 86 F1 | 	sub	objptr, #44
0516c     07 3F C2 FA | 	rdbyte	_var05, objptr
05170     2D 0E 06 F1 | 	add	objptr, #45
05174     07 3F 42 FC | 	wrbyte	_var05, objptr
05178                 | '       cmdD_updatePosition := true
05178     01 0E 06 F1 | 	add	objptr, #1
0517c     FF FF FF FF 
05180     07 FF 4B FC | 	wrbyte	##-1, objptr
05184     E6 0F 86 F1 | 	sub	objptr, #486
05188     50 03 90 FD | 	jmp	#LR__0198
0518c                 | LR__0180
0518c                 | ' 
0518c                 | '     $E:                          ' Handle "E commands" that execute on tick zero
0518c                 | ' 
0518c                 | '       CASE_FAST x
0518c     B7 0F 06 F1 | 	add	objptr, #439
05190     07 43 C2 FA | 	rdbyte	_var07, objptr
05194     B7 0F 86 F1 | 	sub	objptr, #439
05198     21 3F 02 F6 | 	mov	_var05, _var07
0519c     0F 3E 26 F3 | 	fle	_var05, #15
051a0     1F 45 02 F6 | 	mov	_var08, _var05
051a4     30 44 62 FD | 	jmprel	_var08
051a8                 | LR__0181
051a8     3C 00 90 FD | 	jmp	#LR__0182
051ac     58 00 90 FD | 	jmp	#LR__0183
051b0     8C 00 90 FD | 	jmp	#LR__0184
051b4     C0 00 90 FD | 	jmp	#LR__0185
051b8     DC 00 90 FD | 	jmp	#LR__0186
051bc     14 01 90 FD | 	jmp	#LR__0187
051c0     28 01 90 FD | 	jmp	#LR__0188
051c4     C0 01 90 FD | 	jmp	#LR__0191
051c8     10 03 90 FD | 	jmp	#LR__0198
051cc     0C 03 90 FD | 	jmp	#LR__0198
051d0     F0 01 90 FD | 	jmp	#LR__0192
051d4     24 02 90 FD | 	jmp	#LR__0193
051d8     00 03 90 FD | 	jmp	#LR__0198
051dc     FC 02 90 FD | 	jmp	#LR__0198
051e0     50 02 90 FD | 	jmp	#LR__0194
051e4     F4 02 90 FD | 	jmp	#LR__0198
051e8                 | LR__0182
051e8                 | ' 
051e8                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
051e8     B8 0F 06 F1 | 	add	objptr, #440
051ec     07 41 C2 FA | 	rdbyte	_var06, objptr
051f0     20 41 22 F6 | 	not	_var06, _var06
051f4     01 40 06 F5 | 	and	_var06, #1
051f8     03 0E 06 F1 | 	add	objptr, #3
051fc     07 41 42 FC | 	wrbyte	_var06, objptr
05200     BB 0F 86 F1 | 	sub	objptr, #443
05204     D4 02 90 FD | 	jmp	#LR__0198
05208                 | LR__0183
05208                 | ' 
05208                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
05208     1B 47 02 F6 | 	mov	_var09, _var01
0520c     02 46 66 F0 | 	shl	_var09, #2
05210     DF 0E 06 F1 | 	add	objptr, #223
05214     07 47 02 F1 | 	add	_var09, objptr
05218     23 41 02 FB | 	rdlong	_var06, _var09
0521c     D9 0E 06 F1 | 	add	objptr, #217
05220     07 49 C2 FA | 	rdbyte	_var10, objptr
05224     24 41 82 F1 | 	sub	_var06, _var10
05228     02 36 66 F0 | 	shl	_var01, #2
0522c     D9 0E 86 F1 | 	sub	objptr, #217
05230     07 37 02 F1 | 	add	_var01, objptr
05234     1B 41 62 FC | 	wrlong	_var06, _var01
05238     DF 0E 86 F1 | 	sub	objptr, #223
0523c     9C 02 90 FD | 	jmp	#LR__0198
05240                 | LR__0184
05240                 | ' 
05240                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
05240     1B 47 02 F6 | 	mov	_var09, _var01
05244     02 46 66 F0 | 	shl	_var09, #2
05248     DF 0E 06 F1 | 	add	objptr, #223
0524c     07 47 02 F1 | 	add	_var09, objptr
05250     23 41 02 FB | 	rdlong	_var06, _var09
05254     D9 0E 06 F1 | 	add	objptr, #217
05258     07 49 C2 FA | 	rdbyte	_var10, objptr
0525c     24 41 02 F1 | 	add	_var06, _var10
05260     02 36 66 F0 | 	shl	_var01, #2
05264     D9 0E 86 F1 | 	sub	objptr, #217
05268     07 37 02 F1 | 	add	_var01, objptr
0526c     1B 41 62 FC | 	wrlong	_var06, _var01
05270     DF 0E 86 F1 | 	sub	objptr, #223
05274     64 02 90 FD | 	jmp	#LR__0198
05278                 | LR__0185
05278                 | ' 
05278                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
05278     B8 0F 06 F1 | 	add	objptr, #440
0527c     07 41 C2 FA | 	rdbyte	_var06, objptr
05280     01 40 06 F5 | 	and	_var06, #1
05284     04 0E 06 F1 | 	add	objptr, #4
05288     07 37 02 F1 | 	add	_var01, objptr
0528c     1B 41 42 FC | 	wrbyte	_var06, _var01
05290     BC 0F 86 F1 | 	sub	objptr, #444
05294     44 02 90 FD | 	jmp	#LR__0198
05298                 | LR__0186
05298                 | ' 
05298                 | '         $4:                                      ' Set vibrato waveform type
05298                 | '           vibratoType[channel]  := y & 3
05298     B8 0F 06 F1 | 	add	objptr, #440
0529c     07 41 C2 FA | 	rdbyte	_var06, objptr
052a0     03 40 06 F5 | 	and	_var06, #3
052a4     1B 4B 02 F6 | 	mov	_var11, _var01
052a8     08 0E 06 F1 | 	add	objptr, #8
052ac     07 4B 02 F1 | 	add	_var11, objptr
052b0     25 41 42 FC | 	wrbyte	_var06, _var11
052b4                 | '           resetVibrato[channel] := y & 4
052b4     08 0E 86 F1 | 	sub	objptr, #8
052b8     07 41 C2 FA | 	rdbyte	_var06, objptr
052bc     04 40 06 F5 | 	and	_var06, #4
052c0     25 0E 86 F1 | 	sub	objptr, #37
052c4     07 37 02 F1 | 	add	_var01, objptr
052c8     1B 41 42 FC | 	wrbyte	_var06, _var01
052cc     93 0F 86 F1 | 	sub	objptr, #403
052d0     08 02 90 FD | 	jmp	#LR__0198
052d4                 | LR__0187
052d4                 | ' 
052d4                 | '         $5: fineTune := y                        ' Set finetune
052d4     B8 0F 06 F1 | 	add	objptr, #440
052d8     07 41 C2 FA | 	rdbyte	_var06, objptr
052dc     09 0E 86 F1 | 	sub	objptr, #9
052e0     07 41 62 FC | 	wrlong	_var06, objptr
052e4     AF 0F 86 F1 | 	sub	objptr, #431
052e8     F0 01 90 FD | 	jmp	#LR__0198
052ec                 | LR__0188
052ec                 | ' 
052ec                 | '         $6:                                      ' Pattern looping
052ec                 | '           if y == 0
052ec     B8 0F 06 F1 | 	add	objptr, #440
052f0     07 41 CA FA | 	rdbyte	_var06, objptr wz
052f4     B8 0F 86 F1 | 	sub	objptr, #440
052f8     1C 00 90 5D |  if_ne	jmp	#LR__0189
052fc                 | '             cmdE6_memory[channel] := patternRow
052fc     E9 0F 06 F1 | 	add	objptr, #489
05300     07 37 02 F1 | 	add	_var01, objptr
05304     47 0F 86 F1 | 	sub	objptr, #327
05308     07 4B C2 FA | 	rdbyte	_var11, objptr
0530c     A2 0E 86 F1 | 	sub	objptr, #162
05310     1B 4B 42 FC | 	wrbyte	_var11, _var01
05314                 | '           else
05314     C4 01 90 FD | 	jmp	#LR__0198
05318                 | LR__0189
05318                 | '             if ++cmdE6_counter[channel] <= y
05318     1B 47 02 F6 | 	mov	_var09, _var01
0531c     ED 0F 06 F1 | 	add	objptr, #493
05320     07 47 02 F1 | 	add	_var09, objptr
05324     23 41 C2 FA | 	rdbyte	_var06, _var09
05328     01 40 06 F1 | 	add	_var06, #1
0532c     1B 49 02 F6 | 	mov	_var10, _var01
05330     07 49 02 F1 | 	add	_var10, objptr
05334     24 41 42 FC | 	wrbyte	_var06, _var10
05338     24 4D C2 FA | 	rdbyte	_var12, _var10
0533c     35 0E 86 F1 | 	sub	objptr, #53
05340     07 4F C2 FA | 	rdbyte	_var13, objptr
05344     B8 0F 86 F1 | 	sub	objptr, #440
05348     27 4D 5A F2 | 	cmps	_var12, _var13 wcz
0534c     24 00 90 1D |  if_a	jmp	#LR__0190
05350                 | '               cmdE6_updatePosition[channel] := true
05350     F1 0F 06 F1 | 	add	objptr, #497
05354     07 37 02 F1 | 	add	_var01, objptr
05358     FF FF FF FF 
0535c     1B FF 4B FC | 	wrbyte	##-1, _var01
05360                 | '               cmdE6_updatePositionCommon    := true
05360     04 0E 06 F1 | 	add	objptr, #4
05364     FF FF FF FF 
05368     07 FF 4B FC | 	wrbyte	##-1, objptr
0536c     F5 0F 86 F1 | 	sub	objptr, #501
05370                 | '             else
05370     68 01 90 FD | 	jmp	#LR__0198
05374                 | LR__0190
05374                 | '               cmdE6_counter[channel] := 0
05374     ED 0F 06 F1 | 	add	objptr, #493
05378     07 37 02 F1 | 	add	_var01, objptr
0537c     1B 01 48 FC | 	wrbyte	#0, _var01
05380     ED 0F 86 F1 | 	sub	objptr, #493
05384     54 01 90 FD | 	jmp	#LR__0198
05388                 | LR__0191
05388                 | ' 
05388                 | '         $7:                                      ' Set tremolo waveform type
05388                 | '           tremoloType[channel] := y & 3
05388     B8 0F 06 F1 | 	add	objptr, #440
0538c     07 41 C2 FA | 	rdbyte	_var06, objptr
05390     03 40 06 F5 | 	and	_var06, #3
05394     1B 4B 02 F6 | 	mov	_var11, _var01
05398     0C 0E 06 F1 | 	add	objptr, #12
0539c     07 4B 02 F1 | 	add	_var11, objptr
053a0     25 41 42 FC | 	wrbyte	_var06, _var11
053a4                 | '           resetTremolo[channel] := y & 4
053a4     0C 0E 86 F1 | 	sub	objptr, #12
053a8     07 41 C2 FA | 	rdbyte	_var06, objptr
053ac     04 40 06 F5 | 	and	_var06, #4
053b0     29 0E 86 F1 | 	sub	objptr, #41
053b4     07 37 02 F1 | 	add	_var01, objptr
053b8     1B 41 42 FC | 	wrbyte	_var06, _var01
053bc     8F 0F 86 F1 | 	sub	objptr, #399
053c0     18 01 90 FD | 	jmp	#LR__0198
053c4                 | LR__0192
053c4                 | ' 
053c4                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
053c4     1B 47 02 F6 | 	mov	_var09, _var01
053c8     02 46 66 F0 | 	shl	_var09, #2
053cc     FF 0E 06 F1 | 	add	objptr, #255
053d0     07 47 02 F1 | 	add	_var09, objptr
053d4     23 41 02 FB | 	rdlong	_var06, _var09
053d8     B9 0E 06 F1 | 	add	objptr, #185
053dc     07 49 C2 FA | 	rdbyte	_var10, objptr
053e0     24 41 02 F1 | 	add	_var06, _var10
053e4     02 36 66 F0 | 	shl	_var01, #2
053e8     B9 0E 86 F1 | 	sub	objptr, #185
053ec     07 37 02 F1 | 	add	_var01, objptr
053f0     1B 41 62 FC | 	wrlong	_var06, _var01
053f4     FF 0E 86 F1 | 	sub	objptr, #255
053f8     E0 00 90 FD | 	jmp	#LR__0198
053fc                 | LR__0193
053fc                 | ' 
053fc                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
053fc     1B 47 02 F6 | 	mov	_var09, _var01
05400     02 46 66 F0 | 	shl	_var09, #2
05404     FF 0E 06 F1 | 	add	objptr, #255
05408     07 47 02 F1 | 	add	_var09, objptr
0540c     23 41 02 FB | 	rdlong	_var06, _var09
05410     B9 0E 06 F1 | 	add	objptr, #185
05414     07 49 C2 FA | 	rdbyte	_var10, objptr
05418     24 41 82 F1 | 	sub	_var06, _var10
0541c     02 36 66 F0 | 	shl	_var01, #2
05420     B9 0E 86 F1 | 	sub	objptr, #185
05424     07 37 02 F1 | 	add	_var01, objptr
05428     1B 41 62 FC | 	wrlong	_var06, _var01
0542c     FF 0E 86 F1 | 	sub	objptr, #255
05430     A8 00 90 FD | 	jmp	#LR__0198
05434                 | LR__0194
05434                 | ' 
05434                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05434     B8 0F 06 F1 | 	add	objptr, #440
05438     07 47 C2 FA | 	rdbyte	_var09, objptr
0543c     14 0F 86 F1 | 	sub	objptr, #276
05440     07 49 C2 FA | 	rdbyte	_var10, objptr
05444     24 47 02 FD | 	qmul	_var09, _var10
05448     18 40 62 FD | 	getqx	_var06
0544c     01 0E 06 F1 | 	add	objptr, #1
05450     07 41 42 FC | 	wrbyte	_var06, objptr
05454     A5 0E 86 F1 | 	sub	objptr, #165
05458     80 00 90 FD | 	jmp	#LR__0198
0545c                 | LR__0195
0545c                 | ' 
0545c                 | '     $F:                          ' Set speed
0545c                 | '       if z < 32
0545c     B9 0F 06 F1 | 	add	objptr, #441
05460     07 3F C2 FA | 	rdbyte	_var05, objptr
05464     B9 0F 86 F1 | 	sub	objptr, #441
05468     20 3E 5E F2 | 	cmps	_var05, #32 wcz
0546c     18 00 90 3D |  if_ae	jmp	#LR__0196
05470                 | '         currentSongSpeed := z
05470     B9 0F 06 F1 | 	add	objptr, #441
05474     07 3F C2 FA | 	rdbyte	_var05, objptr
05478     15 0F 86 F1 | 	sub	objptr, #277
0547c     07 3F 42 FC | 	wrbyte	_var05, objptr
05480     A4 0E 86 F1 | 	sub	objptr, #164
05484                 | '       else
05484     54 00 90 FD | 	jmp	#LR__0197
05488                 | LR__0196
05488                 | '         ticksPerMinute := z * 24
05488     B9 0F 06 F1 | 	add	objptr, #441
0548c     07 43 C2 FA | 	rdbyte	_var07, objptr
05490     21 3F 02 F6 | 	mov	_var05, _var07
05494     01 3E 66 F0 | 	shl	_var05, #1
05498     21 3F 02 F1 | 	add	_var05, _var07
0549c     03 3E 66 F0 | 	shl	_var05, #3
054a0     12 0E 86 F1 | 	sub	objptr, #18
054a4     07 3F 62 FC | 	wrlong	_var05, objptr
054a8     A7 0F 86 F1 | 	sub	objptr, #423
054ac                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
054ac     07 D9 02 FB | 	rdlong	muldiva_, objptr
054b0     A7 0F 06 F1 | 	add	objptr, #423
054b4     07 DB 02 FB | 	rdlong	muldivb_, objptr
054b8     A7 0F 86 F1 | 	sub	objptr, #423
054bc     D0 00 A0 FD | 	call	#divide_
054c0     6D 41 02 F6 | 	mov	_var06, muldivb_
054c4     04 40 66 F0 | 	shl	_var06, #4
054c8     6D 41 82 F1 | 	sub	_var06, muldivb_
054cc     02 40 66 F0 | 	shl	_var06, #2
054d0     AB 0F 06 F1 | 	add	objptr, #427
054d4     07 41 62 FC | 	wrlong	_var06, objptr
054d8     AB 0F 86 F1 | 	sub	objptr, #427
054dc                 | LR__0197
054dc                 | LR__0198
054dc                 | _trackerplayer_spin2_handleZeroTickCommands_ret
054dc     2D 00 64 FD | 	ret
054e0                 | 
054e0                 | ' 
054e0                 | ' 
054e0                 | ' ' Handle all commands that executes on "non zero ticks"
054e0                 | ' '
054e0                 | ' PRI handleNonZeroTickCommands(channel)
054e0                 | _trackerplayer_spin2_handleNonZeroTickCommands
054e0     0A 5A 05 F6 | 	mov	COUNT_, #10
054e4     B0 00 A0 FD | 	call	#pushregs_
054e8     3B 85 02 F6 | 	mov	local01, arg01
054ec                 | ' 
054ec                 | '   CASE_FAST cmd
054ec     BA 0F 06 F1 | 	add	objptr, #442
054f0     07 87 C2 FA | 	rdbyte	local02, objptr
054f4     BA 0F 86 F1 | 	sub	objptr, #442
054f8     43 89 02 F6 | 	mov	local03, local02
054fc     01 88 86 F1 | 	sub	local03, #1
05500     0E 88 26 F3 | 	fle	local03, #14
05504     44 8B 02 F6 | 	mov	local04, local03
05508     30 8A 62 FD | 	jmprel	local04
0550c                 | LR__0199
0550c     38 00 90 FD | 	jmp	#LR__0200
05510     A0 00 90 FD | 	jmp	#LR__0201
05514     D4 00 90 FD | 	jmp	#LR__0202
05518     1C 02 90 FD | 	jmp	#LR__0212
0551c     20 01 90 FD | 	jmp	#LR__0204
05520     48 01 90 FD | 	jmp	#LR__0205
05524     50 01 90 FD | 	jmp	#LR__0206
05528     0C 02 90 FD | 	jmp	#LR__0212
0552c     08 02 90 FD | 	jmp	#LR__0212
05530     B0 01 90 FD | 	jmp	#LR__0209
05534     00 02 90 FD | 	jmp	#LR__0212
05538     FC 01 90 FD | 	jmp	#LR__0212
0553c     F8 01 90 FD | 	jmp	#LR__0212
05540     AC 01 90 FD | 	jmp	#LR__0210
05544     F0 01 90 FD | 	jmp	#LR__0212
05548                 | LR__0200
05548                 | ' 
05548                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05548     42 8D 02 F6 | 	mov	local05, local01
0554c     02 8C 66 F0 | 	shl	local05, #2
05550     DF 0E 06 F1 | 	add	objptr, #223
05554     07 8D 02 F1 | 	add	local05, objptr
05558     46 8F 02 FB | 	rdlong	local06, local05
0555c     DA 0E 06 F1 | 	add	objptr, #218
05560     07 91 C2 FA | 	rdbyte	local07, objptr
05564     48 8F 82 F1 | 	sub	local06, local07
05568     42 93 02 F6 | 	mov	local08, local01
0556c     02 92 66 F0 | 	shl	local08, #2
05570     DA 0E 86 F1 | 	sub	objptr, #218
05574     07 93 02 F1 | 	add	local08, objptr
05578     49 8F 62 FC | 	wrlong	local06, local08
0557c                 | ' 
0557c                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
0557c                 | '       if currPeriod[channel] < 0
0557c     42 8F 02 F6 | 	mov	local06, local01
05580     02 8E 66 F0 | 	shl	local06, #2
05584     07 8F 02 F1 | 	add	local06, objptr
05588     47 95 02 FB | 	rdlong	local09, local06
0558c     00 94 5E F2 | 	cmps	local09, #0 wcz
05590     DF 0E 86 F1 | 	sub	objptr, #223
05594     A0 01 90 3D |  if_ae	jmp	#LR__0212
05598                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05598     02 84 66 F0 | 	shl	local01, #2
0559c     DF 0E 06 F1 | 	add	objptr, #223
055a0     07 85 02 F1 | 	add	local01, objptr
055a4     01 00 80 FF 
055a8     42 B1 6A FC | 	wrlong	##856, local01
055ac     DF 0E 86 F1 | 	sub	objptr, #223
055b0     84 01 90 FD | 	jmp	#LR__0212
055b4                 | LR__0201
055b4                 | ' 
055b4                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
055b4     42 8D 02 F6 | 	mov	local05, local01
055b8     02 8C 66 F0 | 	shl	local05, #2
055bc     DF 0E 06 F1 | 	add	objptr, #223
055c0     07 8D 02 F1 | 	add	local05, objptr
055c4     46 8F 02 FB | 	rdlong	local06, local05
055c8     DA 0E 06 F1 | 	add	objptr, #218
055cc     07 91 C2 FA | 	rdbyte	local07, objptr
055d0     48 8F 02 F1 | 	add	local06, local07
055d4     02 84 66 F0 | 	shl	local01, #2
055d8     DA 0E 86 F1 | 	sub	objptr, #218
055dc     07 85 02 F1 | 	add	local01, objptr
055e0     42 8F 62 FC | 	wrlong	local06, local01
055e4     DF 0E 86 F1 | 	sub	objptr, #223
055e8     4C 01 90 FD | 	jmp	#LR__0212
055ec                 | LR__0202
055ec                 | ' 
055ec                 | '     $3:                                 ' Slide to note (portamento)
055ec                 | '       if z > 0
055ec     B9 0F 06 F1 | 	add	objptr, #441
055f0     07 8F C2 FA | 	rdbyte	local06, objptr
055f4     B9 0F 86 F1 | 	sub	objptr, #441
055f8     00 8E 5E F2 | 	cmps	local06, #0 wcz
055fc     1C 00 90 ED |  if_be	jmp	#LR__0203
05600                 | '         cmd3_memoryZ[channel] := z
05600     42 8F 02 F6 | 	mov	local06, local01
05604     C8 0F 06 F1 | 	add	objptr, #456
05608     07 8F 02 F1 | 	add	local06, objptr
0560c     0F 0E 86 F1 | 	sub	objptr, #15
05610     07 95 C2 FA | 	rdbyte	local09, objptr
05614     B9 0F 86 F1 | 	sub	objptr, #441
05618     47 95 42 FC | 	wrbyte	local09, local06
0561c                 | LR__0203
0561c                 | ' 
0561c                 | '       doPortamento(channel, lastSetPeriod[channel])
0561c     42 8D 02 F6 | 	mov	local05, local01
05620     02 8C 66 F0 | 	shl	local05, #2
05624     27 0F 06 F1 | 	add	objptr, #295
05628     07 8D 02 F1 | 	add	local05, objptr
0562c     46 79 02 FB | 	rdlong	arg02, local05
05630     42 77 02 F6 | 	mov	arg01, local01
05634     27 0F 86 F1 | 	sub	objptr, #295
05638     74 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0563c     F8 00 90 FD | 	jmp	#LR__0212
05640                 | LR__0204
05640                 | ' 
05640                 | '     $5:                                 ' Volume slide + portamento
05640                 | '       doVolumeSlide(channel)
05640     42 77 02 F6 | 	mov	arg01, local01
05644     94 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05648                 | '       doPortamento(channel, lastSetPeriod[channel])
05648     42 8D 02 F6 | 	mov	local05, local01
0564c     02 8C 66 F0 | 	shl	local05, #2
05650     27 0F 06 F1 | 	add	objptr, #295
05654     07 8D 02 F1 | 	add	local05, objptr
05658     46 79 02 FB | 	rdlong	arg02, local05
0565c     42 77 02 F6 | 	mov	arg01, local01
05660     27 0F 86 F1 | 	sub	objptr, #295
05664     48 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05668     CC 00 90 FD | 	jmp	#LR__0212
0566c                 | LR__0205
0566c                 | ' 
0566c                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
0566c     42 77 02 F6 | 	mov	arg01, local01
05670     68 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05674     C0 00 90 FD | 	jmp	#LR__0212
05678                 | LR__0206
05678                 | ' 
05678                 | '     $7:                                 ' Tremolo
05678                 | '       if x > 0
05678     B7 0F 06 F1 | 	add	objptr, #439
0567c     07 8F C2 FA | 	rdbyte	local06, objptr
05680     B7 0F 86 F1 | 	sub	objptr, #439
05684     00 8E 5E F2 | 	cmps	local06, #0 wcz
05688     1C 00 90 ED |  if_be	jmp	#LR__0207
0568c                 | '         cmd7_memoryX[channel] := x
0568c     42 8F 02 F6 | 	mov	local06, local01
05690     D8 0F 06 F1 | 	add	objptr, #472
05694     07 8F 02 F1 | 	add	local06, objptr
05698     21 0E 86 F1 | 	sub	objptr, #33
0569c     07 95 C2 FA | 	rdbyte	local09, objptr
056a0     B7 0F 86 F1 | 	sub	objptr, #439
056a4     47 95 42 FC | 	wrbyte	local09, local06
056a8                 | LR__0207
056a8                 | '       if y > 0
056a8     B8 0F 06 F1 | 	add	objptr, #440
056ac     07 8F C2 FA | 	rdbyte	local06, objptr
056b0     B8 0F 86 F1 | 	sub	objptr, #440
056b4     00 8E 5E F2 | 	cmps	local06, #0 wcz
056b8     1C 00 90 ED |  if_be	jmp	#LR__0208
056bc                 | '         cmd7_memoryY[channel] := y
056bc     42 8F 02 F6 | 	mov	local06, local01
056c0     D4 0F 06 F1 | 	add	objptr, #468
056c4     07 8F 02 F1 | 	add	local06, objptr
056c8     1C 0E 86 F1 | 	sub	objptr, #28
056cc     07 95 C2 FA | 	rdbyte	local09, objptr
056d0     B8 0F 86 F1 | 	sub	objptr, #440
056d4     47 95 42 FC | 	wrbyte	local09, local06
056d8                 | LR__0208
056d8                 | ' 
056d8                 | '       doTremolo(channel)
056d8     42 77 02 F6 | 	mov	arg01, local01
056dc     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
056e0     54 00 90 FD | 	jmp	#LR__0212
056e4                 | LR__0209
056e4                 | ' 
056e4                 | '     $A: doVolumeSlide(channel)          ' Volume slide
056e4     42 77 02 F6 | 	mov	arg01, local01
056e8     F0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
056ec     48 00 90 FD | 	jmp	#LR__0212
056f0                 | LR__0210
056f0                 | ' 
056f0                 | '     $E:                                 ' Retrig every Y ticks
056f0                 | '       if (x == $9) && ((tickcounter // y) == 0)
056f0     B7 0F 06 F1 | 	add	objptr, #439
056f4     07 8D C2 FA | 	rdbyte	local05, objptr
056f8     B7 0F 86 F1 | 	sub	objptr, #439
056fc     09 8C 0E F2 | 	cmp	local05, #9 wz
05700     34 00 90 5D |  if_ne	jmp	#LR__0211
05704     A1 0E 06 F1 | 	add	objptr, #161
05708     07 91 C2 FA | 	rdbyte	local07, objptr
0570c     48 D9 02 F6 | 	mov	muldiva_, local07
05710     17 0F 06 F1 | 	add	objptr, #279
05714     07 97 C2 FA | 	rdbyte	local10, objptr
05718     B8 0F 86 F1 | 	sub	objptr, #440
0571c     4B DB 02 F6 | 	mov	muldivb_, local10
05720     D0 00 A0 FD | 	call	#divide_
05724     6C 95 0A F6 | 	mov	local09, muldiva_ wz
05728     0C 00 90 5D |  if_ne	jmp	#LR__0211
0572c                 | '         triggerNote(channel)
0572c     42 8F 02 F6 | 	mov	local06, local01
05730     47 77 02 F6 | 	mov	arg01, local06
05734     EC F2 BF FD | 	call	#_trackerplayer_spin2_triggerNote
05738                 | LR__0211
05738                 | LR__0212
05738     AF F0 03 F6 | 	mov	ptra, fp
0573c     BF 00 A0 FD | 	call	#popregs_
05740                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
05740     2D 00 64 FD | 	ret
05744                 | 
05744                 | ' 
05744                 | ' 
05744                 | ' ' Handle all commands that executes on every tick
05744                 | ' '
05744                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05744                 | _trackerplayer_spin2_handleEveryTickCommands
05744     12 5A 05 F6 | 	mov	COUNT_, #18
05748     B0 00 A0 FD | 	call	#pushregs_
0574c     3B 85 02 F6 | 	mov	local01, arg01
05750                 | ' 
05750                 | '   CASE_FAST cmd
05750     BA 0F 06 F1 | 	add	objptr, #442
05754     07 87 C2 FA | 	rdbyte	local02, objptr
05758     BA 0F 86 F1 | 	sub	objptr, #442
0575c     43 89 02 F6 | 	mov	local03, local02
05760     0F 88 26 F3 | 	fle	local03, #15
05764     44 8B 02 F6 | 	mov	local04, local03
05768     30 8A 62 FD | 	jmprel	local04
0576c                 | LR__0213
0576c     3C 00 90 FD | 	jmp	#LR__0214
05770     68 03 90 FD | 	jmp	#LR__0228
05774     64 03 90 FD | 	jmp	#LR__0228
05778     60 03 90 FD | 	jmp	#LR__0228
0577c     E8 01 90 FD | 	jmp	#LR__0217
05780     58 03 90 FD | 	jmp	#LR__0228
05784     4C 02 90 FD | 	jmp	#LR__0220
05788     50 03 90 FD | 	jmp	#LR__0228
0578c     4C 03 90 FD | 	jmp	#LR__0228
05790     48 03 90 FD | 	jmp	#LR__0228
05794     44 03 90 FD | 	jmp	#LR__0228
05798     40 03 90 FD | 	jmp	#LR__0228
0579c     3C 03 90 FD | 	jmp	#LR__0228
057a0     38 03 90 FD | 	jmp	#LR__0228
057a4     38 02 90 FD | 	jmp	#LR__0221
057a8     30 03 90 FD | 	jmp	#LR__0228
057ac                 | LR__0214
057ac                 | ' 
057ac                 | '     $0:                                 ' Arpeggio
057ac                 | '       arpCounter := tickCounter // 3
057ac     A1 0E 06 F1 | 	add	objptr, #161
057b0     07 D9 C2 FA | 	rdbyte	muldiva_, objptr
057b4     A1 0E 86 F1 | 	sub	objptr, #161
057b8     03 DA 06 F6 | 	mov	muldivb_, #3
057bc     D0 00 A0 FD | 	call	#divide_
057c0     6C 8D 02 F6 | 	mov	local05, muldiva_
057c4                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
057c4     42 8F 02 F6 | 	mov	local06, local01
057c8     02 8E 66 F0 | 	shl	local06, #2
057cc     DF 0E 06 F1 | 	add	objptr, #223
057d0     07 8F 02 F1 | 	add	local06, objptr
057d4     47 77 02 FB | 	rdlong	arg01, local06
057d8     42 91 02 F6 | 	mov	local07, local01
057dc     0C 0E 86 F1 | 	sub	objptr, #12
057e0     07 91 02 F1 | 	add	local07, objptr
057e4     48 79 C2 FA | 	rdbyte	arg02, local07
057e8     D3 0E 86 F1 | 	sub	objptr, #211
057ec     AC EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
057f0     18 93 02 F6 | 	mov	local08, result1
057f4     49 95 02 F6 | 	mov	local09, local08
057f8     24 92 5E F2 | 	cmps	local08, #36 wcz
057fc     DC 02 90 3D |  if_ae	jmp	#LR__0228
05800                 | '         if arpCounter == 1 and x > 0
05800     01 8C 0E F2 | 	cmp	local05, #1 wz
05804     8C 00 90 5D |  if_ne	jmp	#LR__0215
05808     B7 0F 06 F1 | 	add	objptr, #439
0580c     07 8F C2 FA | 	rdbyte	local06, objptr
05810     B7 0F 86 F1 | 	sub	objptr, #439
05814     00 8E 5E F2 | 	cmps	local06, #0 wcz
05818     78 00 90 ED |  if_be	jmp	#LR__0215
0581c                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
0581c     4A 97 02 F6 | 	mov	local10, local09
05820     B7 0F 06 F1 | 	add	objptr, #439
05824     07 91 C2 FA | 	rdbyte	local07, objptr
05828     48 99 02 F6 | 	mov	local11, local07
0582c     48 97 02 F1 | 	add	local10, local07
05830     4B 9B 02 F6 | 	mov	local12, local10
05834     4D 77 02 F6 | 	mov	arg01, local12
05838                 | ' 
05838                 | '   return word[@periodTable][noteNumber]
05838     06 00 00 FF 
0583c     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05840     01 76 66 F0 | 	shl	arg01, #1
05844     16 77 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05848     3B 31 E2 FA | 	rdword	result1, arg01
0584c     06 00 00 FF 
05850     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05854     18 9D 02 F6 | 	mov	local13, result1
05858     42 9F 02 F6 | 	mov	local14, local01
0585c     02 9E 66 F0 | 	shl	local14, #2
05860     D8 0E 86 F1 | 	sub	objptr, #216
05864     07 A1 02 F6 | 	mov	local15, objptr
05868     07 9F 02 F1 | 	add	local14, objptr
0586c     4E 8F 02 F6 | 	mov	local06, local13
05870     4F A3 02 FB | 	rdlong	local16, local14
05874     51 8F 82 F1 | 	sub	local06, local16
05878     42 A5 02 F6 | 	mov	local17, local01
0587c     02 A4 66 F0 | 	shl	local17, #2
05880     10 0E 06 F1 | 	add	objptr, #16
05884     07 A7 02 F6 | 	mov	local18, objptr
05888     07 A5 02 F1 | 	add	local17, objptr
0588c     52 8F 62 FC | 	wrlong	local06, local17
05890     EF 0E 86 F1 | 	sub	objptr, #239
05894                 | LR__0215
05894                 | '         if arpCounter == 2 and y > 0
05894     02 8C 0E F2 | 	cmp	local05, #2 wz
05898     8C 00 90 5D |  if_ne	jmp	#LR__0216
0589c     B8 0F 06 F1 | 	add	objptr, #440
058a0     07 8F C2 FA | 	rdbyte	local06, objptr
058a4     B8 0F 86 F1 | 	sub	objptr, #440
058a8     00 8E 5E F2 | 	cmps	local06, #0 wcz
058ac     78 00 90 ED |  if_be	jmp	#LR__0216
058b0                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
058b0     4A 97 02 F6 | 	mov	local10, local09
058b4     B8 0F 06 F1 | 	add	objptr, #440
058b8     07 91 C2 FA | 	rdbyte	local07, objptr
058bc     48 99 02 F6 | 	mov	local11, local07
058c0     48 97 02 F1 | 	add	local10, local07
058c4     4B 9B 02 F6 | 	mov	local12, local10
058c8     4D 77 02 F6 | 	mov	arg01, local12
058cc                 | ' 
058cc                 | '   return word[@periodTable][noteNumber]
058cc     06 00 00 FF 
058d0     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
058d4     01 76 66 F0 | 	shl	arg01, #1
058d8     16 77 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
058dc     3B 31 E2 FA | 	rdword	result1, arg01
058e0     06 00 00 FF 
058e4     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
058e8     18 9D 02 F6 | 	mov	local13, result1
058ec     42 9F 02 F6 | 	mov	local14, local01
058f0     02 9E 66 F0 | 	shl	local14, #2
058f4     D9 0E 86 F1 | 	sub	objptr, #217
058f8     07 A1 02 F6 | 	mov	local15, objptr
058fc     07 9F 02 F1 | 	add	local14, objptr
05900     4E 8F 02 F6 | 	mov	local06, local13
05904     4F A3 02 FB | 	rdlong	local16, local14
05908     51 8F 82 F1 | 	sub	local06, local16
0590c     42 A5 02 F6 | 	mov	local17, local01
05910     02 A4 66 F0 | 	shl	local17, #2
05914     10 0E 06 F1 | 	add	objptr, #16
05918     07 A7 02 F6 | 	mov	local18, objptr
0591c     07 A5 02 F1 | 	add	local17, objptr
05920     52 8F 62 FC | 	wrlong	local06, local17
05924     EF 0E 86 F1 | 	sub	objptr, #239
05928                 | LR__0216
05928                 | '         if arpCounter == 0 and (x + y) > 0
05928     00 8C 0E F2 | 	cmp	local05, #0 wz
0592c     AC 01 90 5D |  if_ne	jmp	#LR__0228
05930     B7 0F 06 F1 | 	add	objptr, #439
05934     07 8F C2 FA | 	rdbyte	local06, objptr
05938     01 0E 06 F1 | 	add	objptr, #1
0593c     07 91 C2 FA | 	rdbyte	local07, objptr
05940     B8 0F 86 F1 | 	sub	objptr, #440
05944     48 8F 02 F1 | 	add	local06, local07
05948     00 8E 5E F2 | 	cmps	local06, #0 wcz
0594c     8C 01 90 ED |  if_be	jmp	#LR__0228
05950                 | '           deltaPeriod[channel] := 0
05950     02 84 66 F0 | 	shl	local01, #2
05954     EF 0E 06 F1 | 	add	objptr, #239
05958     07 85 02 F1 | 	add	local01, objptr
0595c     42 01 68 FC | 	wrlong	#0, local01
05960     EF 0E 86 F1 | 	sub	objptr, #239
05964     74 01 90 FD | 	jmp	#LR__0228
05968                 | LR__0217
05968                 | ' 
05968                 | '     $4:                                 ' Vibrato
05968                 | '       if x > 0
05968     B7 0F 06 F1 | 	add	objptr, #439
0596c     07 8F C2 FA | 	rdbyte	local06, objptr
05970     B7 0F 86 F1 | 	sub	objptr, #439
05974     00 8E 5E F2 | 	cmps	local06, #0 wcz
05978     1C 00 90 ED |  if_be	jmp	#LR__0218
0597c                 | '         cmd4_memoryX[channel] := x
0597c     42 8F 02 F6 | 	mov	local06, local01
05980     D0 0F 06 F1 | 	add	objptr, #464
05984     07 8F 02 F1 | 	add	local06, objptr
05988     19 0E 86 F1 | 	sub	objptr, #25
0598c     07 99 C2 FA | 	rdbyte	local11, objptr
05990     B7 0F 86 F1 | 	sub	objptr, #439
05994     47 99 42 FC | 	wrbyte	local11, local06
05998                 | LR__0218
05998                 | '       if y > 0
05998     B8 0F 06 F1 | 	add	objptr, #440
0599c     07 8F C2 FA | 	rdbyte	local06, objptr
059a0     B8 0F 86 F1 | 	sub	objptr, #440
059a4     00 8E 5E F2 | 	cmps	local06, #0 wcz
059a8     1C 00 90 ED |  if_be	jmp	#LR__0219
059ac                 | '         cmd4_memoryY[channel] := y
059ac     42 8F 02 F6 | 	mov	local06, local01
059b0     CC 0F 06 F1 | 	add	objptr, #460
059b4     07 8F 02 F1 | 	add	local06, objptr
059b8     14 0E 86 F1 | 	sub	objptr, #20
059bc     07 99 C2 FA | 	rdbyte	local11, objptr
059c0     B8 0F 86 F1 | 	sub	objptr, #440
059c4     47 99 42 FC | 	wrbyte	local11, local06
059c8                 | LR__0219
059c8                 | ' 
059c8                 | '       doVibrato(channel)
059c8     42 77 02 F6 | 	mov	arg01, local01
059cc     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
059d0     08 01 90 FD | 	jmp	#LR__0228
059d4                 | LR__0220
059d4                 | ' 
059d4                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
059d4     42 77 02 F6 | 	mov	arg01, local01
059d8     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
059dc     FC 00 90 FD | 	jmp	#LR__0228
059e0                 | LR__0221
059e0                 | ' 
059e0                 | '     $E:
059e0                 | '       if x == $C                        ' Cut note after Y ticks
059e0     B7 0F 06 F1 | 	add	objptr, #439
059e4     07 8F C2 FA | 	rdbyte	local06, objptr
059e8     B7 0F 86 F1 | 	sub	objptr, #439
059ec     0C 8E 0E F2 | 	cmp	local06, #12 wz
059f0     34 00 90 5D |  if_ne	jmp	#LR__0222
059f4                 | '         if tickcounter == y
059f4     A1 0E 06 F1 | 	add	objptr, #161
059f8     07 8F C2 FA | 	rdbyte	local06, objptr
059fc     17 0F 06 F1 | 	add	objptr, #279
05a00     07 99 C2 FA | 	rdbyte	local11, objptr
05a04     B8 0F 86 F1 | 	sub	objptr, #440
05a08     4C 8F 0A F2 | 	cmp	local06, local11 wz
05a0c     CC 00 90 5D |  if_ne	jmp	#LR__0227
05a10                 | '           currVolume[channel] := 0
05a10     02 84 66 F0 | 	shl	local01, #2
05a14     FF 0E 06 F1 | 	add	objptr, #255
05a18     07 85 02 F1 | 	add	local01, objptr
05a1c     42 01 68 FC | 	wrlong	#0, local01
05a20     FF 0E 86 F1 | 	sub	objptr, #255
05a24     B4 00 90 FD | 	jmp	#LR__0227
05a28                 | LR__0222
05a28                 | ' 
05a28                 | '       elseif x == $D                    ' Delay note Y ticks
05a28     B7 0F 06 F1 | 	add	objptr, #439
05a2c     07 8F C2 FA | 	rdbyte	local06, objptr
05a30     B7 0F 86 F1 | 	sub	objptr, #439
05a34     0D 8E 0E F2 | 	cmp	local06, #13 wz
05a38     A0 00 90 5D |  if_ne	jmp	#LR__0226
05a3c                 | '         if tickcounter == y
05a3c     A1 0E 06 F1 | 	add	objptr, #161
05a40     07 8F C2 FA | 	rdbyte	local06, objptr
05a44     17 0F 06 F1 | 	add	objptr, #279
05a48     07 99 C2 FA | 	rdbyte	local11, objptr
05a4c     B8 0F 86 F1 | 	sub	objptr, #440
05a50     4C 8F 0A F2 | 	cmp	local06, local11 wz
05a54     0C 00 90 5D |  if_ne	jmp	#LR__0223
05a58                 | '           triggerNote(channel)
05a58     42 77 02 F6 | 	mov	arg01, local01
05a5c     C4 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05a60     78 00 90 FD | 	jmp	#LR__0225
05a64                 | LR__0223
05a64                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05a64                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05a64     B8 0F 06 F1 | 	add	objptr, #440
05a68     07 8F C2 FA | 	rdbyte	local06, objptr
05a6c     14 0F 86 F1 | 	sub	objptr, #276
05a70     07 99 C2 FA | 	rdbyte	local11, objptr
05a74     A4 0E 86 F1 | 	sub	objptr, #164
05a78     4C 8F 5A F2 | 	cmps	local06, local11 wcz
05a7c     5C 00 90 CD |  if_b	jmp	#LR__0224
05a80     A4 0E 06 F1 | 	add	objptr, #164
05a84     07 9D C2 FA | 	rdbyte	local13, objptr
05a88     4E 9B 02 F6 | 	mov	local12, local13
05a8c     01 9A 86 F1 | 	sub	local12, #1
05a90     03 0E 86 F1 | 	sub	objptr, #3
05a94     07 A1 C2 FA | 	rdbyte	local15, objptr
05a98     A1 0E 86 F1 | 	sub	objptr, #161
05a9c     50 9F 02 F6 | 	mov	local14, local15
05aa0     4D 9F 0A F2 | 	cmp	local14, local12 wz
05aa4     34 00 90 5D |  if_ne	jmp	#LR__0224
05aa8                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05aa8     42 8F 02 F6 | 	mov	local06, local01
05aac     02 8E 66 F0 | 	shl	local06, #2
05ab0     27 0F 06 F1 | 	add	objptr, #295
05ab4     07 97 02 F6 | 	mov	local10, objptr
05ab8     07 8F 02 F1 | 	add	local06, objptr
05abc     42 99 02 F6 | 	mov	local11, local01
05ac0     02 98 66 F0 | 	shl	local11, #2
05ac4     48 0E 86 F1 | 	sub	objptr, #72
05ac8     07 91 02 F6 | 	mov	local07, objptr
05acc     47 9B 02 FB | 	rdlong	local12, local06
05ad0     48 99 02 F1 | 	add	local11, local07
05ad4     4C 9B 62 FC | 	wrlong	local12, local11
05ad8     DF 0E 86 F1 | 	sub	objptr, #223
05adc                 | LR__0224
05adc                 | LR__0225
05adc                 | LR__0226
05adc                 | LR__0227
05adc                 | LR__0228
05adc     AF F0 03 F6 | 	mov	ptra, fp
05ae0     BF 00 A0 FD | 	call	#popregs_
05ae4                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05ae4     2D 00 64 FD | 	ret
05ae8                 | 
05ae8                 | ' 
05ae8                 | ' 
05ae8                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05ae8                 | _trackerplayer_spin2_doTremolo
05ae8     3B 37 02 F6 | 	mov	_var01, arg01
05aec                 | ' 
05aec                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05aec     05 00 00 FF 
05af0     A4 2D 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05af4     16 39 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05af8     1B 3B 02 F6 | 	mov	_var03, _var01
05afc     8B 0F 06 F1 | 	add	objptr, #395
05b00     07 3B 02 F1 | 	add	_var03, objptr
05b04     1D 3D C2 FA | 	rdbyte	_var04, _var03
05b08     02 3C 66 F0 | 	shl	_var04, #2
05b0c     1C 3D 02 F1 | 	add	_var04, _var02
05b10     1E 3F 02 FB | 	rdlong	_var05, _var04
05b14                 | '   depth    := cmd7_memoryY[channel]
05b14     1B 41 02 F6 | 	mov	_var06, _var01
05b18     49 0E 06 F1 | 	add	objptr, #73
05b1c     07 41 02 F1 | 	add	_var06, objptr
05b20     20 43 C2 FA | 	rdbyte	_var07, _var06
05b24                 | '   speed    := cmd7_memoryX[channel]
05b24     1B 41 02 F6 | 	mov	_var06, _var01
05b28     04 0E 06 F1 | 	add	objptr, #4
05b2c     07 41 02 F1 | 	add	_var06, objptr
05b30     20 45 C2 FA | 	rdbyte	_var08, _var06
05b34                 | ' 
05b34                 | '   CASE_FAST vibratoType[channel]
05b34     1B 3B 02 F6 | 	mov	_var03, _var01
05b38     18 0E 86 F1 | 	sub	objptr, #24
05b3c     07 47 02 F6 | 	mov	_var09, objptr
05b40     07 3B 02 F1 | 	add	_var03, objptr
05b44     1D 41 C2 FA | 	rdbyte	_var06, _var03
05b48     03 40 26 F3 | 	fle	_var06, #3
05b4c     20 49 02 F6 | 	mov	_var10, _var06
05b50     05 00 00 FF 
05b54     A4 2D 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05b58     C0 0F 86 F1 | 	sub	objptr, #448
05b5c     30 48 62 FD | 	jmprel	_var10
05b60                 | LR__0229
05b60     0C 00 90 FD | 	jmp	#LR__0230
05b64     30 00 90 FD | 	jmp	#LR__0231
05b68     6C 00 90 FD | 	jmp	#LR__0232
05b6c     B4 00 90 FD | 	jmp	#LR__0233
05b70                 | LR__0230
05b70                 | ' 
05b70                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05b70     1F 43 02 FD | 	qmul	_var07, _var05
05b74     18 3C 62 FD | 	getqx	_var04
05b78     06 3C C6 F0 | 	sar	_var04, #6
05b7c     1B 4B 02 F6 | 	mov	_var11, _var01
05b80     02 4A 66 F0 | 	shl	_var11, #2
05b84     0F 0F 06 F1 | 	add	objptr, #271
05b88     07 4B 02 F1 | 	add	_var11, objptr
05b8c     25 3D 62 FC | 	wrlong	_var04, _var11
05b90     0F 0F 86 F1 | 	sub	objptr, #271
05b94     8C 00 90 FD | 	jmp	#LR__0233
05b98                 | LR__0231
05b98                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05b98     1B 4B 02 F6 | 	mov	_var11, _var01
05b9c     8B 0F 06 F1 | 	add	objptr, #395
05ba0     07 4B 02 F1 | 	add	_var11, objptr
05ba4     25 39 C2 FA | 	rdbyte	_var02, _var11
05ba8     03 38 66 F0 | 	shl	_var02, #3
05bac     1C 43 02 FD | 	qmul	_var07, _var02
05bb0     18 3C 62 FD | 	getqx	_var04
05bb4     00 3D 86 F1 | 	sub	_var04, #256
05bb8     06 3C C6 F0 | 	sar	_var04, #6
05bbc     1B 4D 02 F6 | 	mov	_var12, _var01
05bc0     02 4C 66 F0 | 	shl	_var12, #2
05bc4     7C 0E 86 F1 | 	sub	objptr, #124
05bc8     07 4D 02 F1 | 	add	_var12, objptr
05bcc     26 3D 62 FC | 	wrlong	_var04, _var12
05bd0     0F 0F 86 F1 | 	sub	objptr, #271
05bd4     4C 00 90 FD | 	jmp	#LR__0233
05bd8                 | LR__0232
05bd8                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05bd8     1B 4B 02 F6 | 	mov	_var11, _var01
05bdc     8B 0F 06 F1 | 	add	objptr, #395
05be0     07 4F 02 F6 | 	mov	_var13, objptr
05be4     07 4B 02 F1 | 	add	_var11, objptr
05be8     25 39 C2 FA | 	rdbyte	_var02, _var11
05bec     20 38 06 F5 | 	and	_var02, #32
05bf0     04 38 66 F0 | 	shl	_var02, #4
05bf4     1C 43 02 FD | 	qmul	_var07, _var02
05bf8     18 50 62 FD | 	getqx	_var14
05bfc     28 3D 02 F6 | 	mov	_var04, _var14
05c00     00 3D 86 F1 | 	sub	_var04, #256
05c04     06 3C C6 F0 | 	sar	_var04, #6
05c08     1B 4D 02 F6 | 	mov	_var12, _var01
05c0c     02 4C 66 F0 | 	shl	_var12, #2
05c10     7C 0E 86 F1 | 	sub	objptr, #124
05c14     07 53 02 F6 | 	mov	_var15, objptr
05c18     07 4D 02 F1 | 	add	_var12, objptr
05c1c     26 3D 62 FC | 	wrlong	_var04, _var12
05c20     0F 0F 86 F1 | 	sub	objptr, #271
05c24                 | LR__0233
05c24                 | ' 
05c24                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05c24     1B 3B 02 F6 | 	mov	_var03, _var01
05c28     8B 0F 06 F1 | 	add	objptr, #395
05c2c     07 3B 02 F1 | 	add	_var03, objptr
05c30     1D 41 C2 FA | 	rdbyte	_var06, _var03
05c34     22 41 02 F1 | 	add	_var06, _var08
05c38     3F 40 06 F5 | 	and	_var06, #63
05c3c     07 37 02 F1 | 	add	_var01, objptr
05c40     1B 41 42 FC | 	wrbyte	_var06, _var01
05c44     8B 0F 86 F1 | 	sub	objptr, #395
05c48                 | _trackerplayer_spin2_doTremolo_ret
05c48     2D 00 64 FD | 	ret
05c4c                 | 
05c4c                 | ' 
05c4c                 | ' 
05c4c                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05c4c                 | _trackerplayer_spin2_doVibrato
05c4c     3B 37 02 F6 | 	mov	_var01, arg01
05c50                 | ' 
05c50                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05c50     05 00 00 FF 
05c54     A4 2D 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05c58     16 39 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05c5c     1B 3B 02 F6 | 	mov	_var03, _var01
05c60     87 0F 06 F1 | 	add	objptr, #391
05c64     07 3B 02 F1 | 	add	_var03, objptr
05c68     1D 3D C2 FA | 	rdbyte	_var04, _var03
05c6c     02 3C 66 F0 | 	shl	_var04, #2
05c70     1C 3D 02 F1 | 	add	_var04, _var02
05c74     1E 3F 02 FB | 	rdlong	_var05, _var04
05c78                 | '   depth    := cmd4_memoryY[channel]
05c78     1B 41 02 F6 | 	mov	_var06, _var01
05c7c     45 0E 06 F1 | 	add	objptr, #69
05c80     07 41 02 F1 | 	add	_var06, objptr
05c84     20 43 C2 FA | 	rdbyte	_var07, _var06
05c88                 | '   speed    := cmd4_memoryX[channel]
05c88     1B 41 02 F6 | 	mov	_var06, _var01
05c8c     04 0E 06 F1 | 	add	objptr, #4
05c90     07 41 02 F1 | 	add	_var06, objptr
05c94     20 45 C2 FA | 	rdbyte	_var08, _var06
05c98                 | ' 
05c98                 | '   CASE_FAST vibratoType[channel]
05c98     1B 3B 02 F6 | 	mov	_var03, _var01
05c9c     10 0E 86 F1 | 	sub	objptr, #16
05ca0     07 47 02 F6 | 	mov	_var09, objptr
05ca4     07 3B 02 F1 | 	add	_var03, objptr
05ca8     1D 41 C2 FA | 	rdbyte	_var06, _var03
05cac     03 40 26 F3 | 	fle	_var06, #3
05cb0     20 49 02 F6 | 	mov	_var10, _var06
05cb4     05 00 00 FF 
05cb8     A4 2D 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05cbc     C0 0F 86 F1 | 	sub	objptr, #448
05cc0     30 48 62 FD | 	jmprel	_var10
05cc4                 | LR__0234
05cc4     0C 00 90 FD | 	jmp	#LR__0235
05cc8     30 00 90 FD | 	jmp	#LR__0236
05ccc     6C 00 90 FD | 	jmp	#LR__0237
05cd0     B4 00 90 FD | 	jmp	#LR__0238
05cd4                 | LR__0235
05cd4                 | ' 
05cd4                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05cd4     1F 43 02 FD | 	qmul	_var07, _var05
05cd8     18 3C 62 FD | 	getqx	_var04
05cdc     07 3C C6 F0 | 	sar	_var04, #7
05ce0     1B 4B 02 F6 | 	mov	_var11, _var01
05ce4     02 4A 66 F0 | 	shl	_var11, #2
05ce8     EF 0E 06 F1 | 	add	objptr, #239
05cec     07 4B 02 F1 | 	add	_var11, objptr
05cf0     25 3D 62 FC | 	wrlong	_var04, _var11
05cf4     EF 0E 86 F1 | 	sub	objptr, #239
05cf8     8C 00 90 FD | 	jmp	#LR__0238
05cfc                 | LR__0236
05cfc                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05cfc     1B 4B 02 F6 | 	mov	_var11, _var01
05d00     87 0F 06 F1 | 	add	objptr, #391
05d04     07 4B 02 F1 | 	add	_var11, objptr
05d08     25 39 C2 FA | 	rdbyte	_var02, _var11
05d0c     03 38 66 F0 | 	shl	_var02, #3
05d10     1C 43 02 FD | 	qmul	_var07, _var02
05d14     18 3C 62 FD | 	getqx	_var04
05d18     00 3D 86 F1 | 	sub	_var04, #256
05d1c     07 3C C6 F0 | 	sar	_var04, #7
05d20     1B 4D 02 F6 | 	mov	_var12, _var01
05d24     02 4C 66 F0 | 	shl	_var12, #2
05d28     98 0E 86 F1 | 	sub	objptr, #152
05d2c     07 4D 02 F1 | 	add	_var12, objptr
05d30     26 3D 62 FC | 	wrlong	_var04, _var12
05d34     EF 0E 86 F1 | 	sub	objptr, #239
05d38     4C 00 90 FD | 	jmp	#LR__0238
05d3c                 | LR__0237
05d3c                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05d3c     1B 4B 02 F6 | 	mov	_var11, _var01
05d40     87 0F 06 F1 | 	add	objptr, #391
05d44     07 4F 02 F6 | 	mov	_var13, objptr
05d48     07 4B 02 F1 | 	add	_var11, objptr
05d4c     25 39 C2 FA | 	rdbyte	_var02, _var11
05d50     20 38 06 F5 | 	and	_var02, #32
05d54     04 38 66 F0 | 	shl	_var02, #4
05d58     1C 43 02 FD | 	qmul	_var07, _var02
05d5c     18 50 62 FD | 	getqx	_var14
05d60     28 3D 02 F6 | 	mov	_var04, _var14
05d64     00 3D 86 F1 | 	sub	_var04, #256
05d68     07 3C C6 F0 | 	sar	_var04, #7
05d6c     1B 4D 02 F6 | 	mov	_var12, _var01
05d70     02 4C 66 F0 | 	shl	_var12, #2
05d74     98 0E 86 F1 | 	sub	objptr, #152
05d78     07 53 02 F6 | 	mov	_var15, objptr
05d7c     07 4D 02 F1 | 	add	_var12, objptr
05d80     26 3D 62 FC | 	wrlong	_var04, _var12
05d84     EF 0E 86 F1 | 	sub	objptr, #239
05d88                 | LR__0238
05d88                 | ' 
05d88                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05d88     1B 3B 02 F6 | 	mov	_var03, _var01
05d8c     87 0F 06 F1 | 	add	objptr, #391
05d90     07 3B 02 F1 | 	add	_var03, objptr
05d94     1D 41 C2 FA | 	rdbyte	_var06, _var03
05d98     22 41 02 F1 | 	add	_var06, _var08
05d9c     3F 40 06 F5 | 	and	_var06, #63
05da0     07 37 02 F1 | 	add	_var01, objptr
05da4     1B 41 42 FC | 	wrbyte	_var06, _var01
05da8     87 0F 86 F1 | 	sub	objptr, #391
05dac                 | _trackerplayer_spin2_doVibrato_ret
05dac     2D 00 64 FD | 	ret
05db0                 | 
05db0                 | ' 
05db0                 | ' 
05db0                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05db0                 | _trackerplayer_spin2_doPortamento
05db0                 | ' 
05db0                 | '   if period == currPeriod[channel]
05db0     3B 37 02 F6 | 	mov	_var01, arg01
05db4     02 36 66 F0 | 	shl	_var01, #2
05db8     DF 0E 06 F1 | 	add	objptr, #223
05dbc     07 39 02 F6 | 	mov	_var02, objptr
05dc0     07 37 02 F1 | 	add	_var01, objptr
05dc4     1B 3B 02 FB | 	rdlong	_var03, _var01
05dc8     1D 79 0A F2 | 	cmp	arg02, _var03 wz
05dcc                 | '     return
05dcc     DF 0E 86 F1 | 	sub	objptr, #223
05dd0     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05dd4                 | ' 
05dd4                 | '   if period > 0
05dd4     00 78 5E F2 | 	cmps	arg02, #0 wcz
05dd8     1C 00 90 ED |  if_be	jmp	#LR__0239
05ddc                 | '     portamentoPeriodMemory[channel] := period
05ddc     3B 37 02 F6 | 	mov	_var01, arg01
05de0     02 36 66 F0 | 	shl	_var01, #2
05de4     97 0F 06 F1 | 	add	objptr, #407
05de8     07 37 02 F1 | 	add	_var01, objptr
05dec     1B 79 62 FC | 	wrlong	arg02, _var01
05df0                 | '   else
05df0     97 0F 86 F1 | 	sub	objptr, #407
05df4     18 00 90 FD | 	jmp	#LR__0240
05df8                 | LR__0239
05df8                 | '     period := portamentoPeriodMemory[channel]
05df8     3B 37 02 F6 | 	mov	_var01, arg01
05dfc     02 36 66 F0 | 	shl	_var01, #2
05e00     97 0F 06 F1 | 	add	objptr, #407
05e04     07 37 02 F1 | 	add	_var01, objptr
05e08     1B 79 02 FB | 	rdlong	arg02, _var01
05e0c     97 0F 86 F1 | 	sub	objptr, #407
05e10                 | LR__0240
05e10                 | ' 
05e10                 | '   if period > currPeriod[channel]
05e10     3B 37 02 F6 | 	mov	_var01, arg01
05e14     02 36 66 F0 | 	shl	_var01, #2
05e18     DF 0E 06 F1 | 	add	objptr, #223
05e1c     07 37 02 F1 | 	add	_var01, objptr
05e20     1B 3B 02 FB | 	rdlong	_var03, _var01
05e24     1D 79 5A F2 | 	cmps	arg02, _var03 wcz
05e28     DF 0E 86 F1 | 	sub	objptr, #223
05e2c     68 00 90 ED |  if_be	jmp	#LR__0241
05e30                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05e30     3B 39 02 F6 | 	mov	_var02, arg01
05e34     02 38 66 F0 | 	shl	_var02, #2
05e38     DF 0E 06 F1 | 	add	objptr, #223
05e3c     07 39 02 F1 | 	add	_var02, objptr
05e40     3B 3D 02 F6 | 	mov	_var04, arg01
05e44     E9 0E 06 F1 | 	add	objptr, #233
05e48     1C 37 02 FB | 	rdlong	_var01, _var02
05e4c     07 3D 02 F1 | 	add	_var04, objptr
05e50     1E 3F C2 FA | 	rdbyte	_var05, _var04
05e54     1F 37 02 F1 | 	add	_var01, _var05
05e58     3B 41 02 F6 | 	mov	_var06, arg01
05e5c     02 40 66 F0 | 	shl	_var06, #2
05e60     E9 0E 86 F1 | 	sub	objptr, #233
05e64     07 41 02 F1 | 	add	_var06, objptr
05e68     20 37 62 FC | 	wrlong	_var01, _var06
05e6c                 | '     currPeriod[channel] <#= period
05e6c     3B 39 02 F6 | 	mov	_var02, arg01
05e70     02 38 66 F0 | 	shl	_var02, #2
05e74     07 39 02 F1 | 	add	_var02, objptr
05e78     1C 37 02 FB | 	rdlong	_var01, _var02
05e7c     3C 37 62 F3 | 	fles	_var01, arg02
05e80     3B 3D 02 F6 | 	mov	_var04, arg01
05e84     02 3C 66 F0 | 	shl	_var04, #2
05e88     07 3D 02 F1 | 	add	_var04, objptr
05e8c     1E 37 62 FC | 	wrlong	_var01, _var04
05e90     DF 0E 86 F1 | 	sub	objptr, #223
05e94     84 00 90 FD | 	jmp	#LR__0243
05e98                 | LR__0241
05e98                 | ' 
05e98                 | '   elseif period < currPeriod[channel]
05e98     3B 37 02 F6 | 	mov	_var01, arg01
05e9c     02 36 66 F0 | 	shl	_var01, #2
05ea0     DF 0E 06 F1 | 	add	objptr, #223
05ea4     07 37 02 F1 | 	add	_var01, objptr
05ea8     1B 3B 02 FB | 	rdlong	_var03, _var01
05eac     1D 79 5A F2 | 	cmps	arg02, _var03 wcz
05eb0     DF 0E 86 F1 | 	sub	objptr, #223
05eb4     64 00 90 3D |  if_ae	jmp	#LR__0242
05eb8                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05eb8     3B 39 02 F6 | 	mov	_var02, arg01
05ebc     02 38 66 F0 | 	shl	_var02, #2
05ec0     DF 0E 06 F1 | 	add	objptr, #223
05ec4     07 39 02 F1 | 	add	_var02, objptr
05ec8     3B 3D 02 F6 | 	mov	_var04, arg01
05ecc     E9 0E 06 F1 | 	add	objptr, #233
05ed0     1C 37 02 FB | 	rdlong	_var01, _var02
05ed4     07 3D 02 F1 | 	add	_var04, objptr
05ed8     1E 3F C2 FA | 	rdbyte	_var05, _var04
05edc     1F 37 82 F1 | 	sub	_var01, _var05
05ee0     3B 41 02 F6 | 	mov	_var06, arg01
05ee4     02 40 66 F0 | 	shl	_var06, #2
05ee8     E9 0E 86 F1 | 	sub	objptr, #233
05eec     07 41 02 F1 | 	add	_var06, objptr
05ef0     20 37 62 FC | 	wrlong	_var01, _var06
05ef4                 | '     currPeriod[channel] #>= period
05ef4     3B 39 02 F6 | 	mov	_var02, arg01
05ef8     02 38 66 F0 | 	shl	_var02, #2
05efc     07 39 02 F1 | 	add	_var02, objptr
05f00     1C 37 02 FB | 	rdlong	_var01, _var02
05f04     3C 37 42 F3 | 	fges	_var01, arg02
05f08     3B 3D 02 F6 | 	mov	_var04, arg01
05f0c     02 3C 66 F0 | 	shl	_var04, #2
05f10     07 3D 02 F1 | 	add	_var04, objptr
05f14     1E 37 62 FC | 	wrlong	_var01, _var04
05f18     DF 0E 86 F1 | 	sub	objptr, #223
05f1c                 | LR__0242
05f1c                 | LR__0243
05f1c                 | ' 
05f1c                 | '   ' Handle glissando if activated
05f1c                 | '   if portaGlissando[channel] > 0
05f1c     3B 37 02 F6 | 	mov	_var01, arg01
05f20     BC 0F 06 F1 | 	add	objptr, #444
05f24     07 37 02 F1 | 	add	_var01, objptr
05f28     1B 3B C2 FA | 	rdbyte	_var03, _var01
05f2c     00 3A 5E F2 | 	cmps	_var03, #0 wcz
05f30     BC 0F 86 F1 | 	sub	objptr, #444
05f34     A0 00 90 ED |  if_be	jmp	#LR__0246
05f38                 | ' 
05f38                 | '     tempPeriod := currPeriod[channel]
05f38     3B 37 02 F6 | 	mov	_var01, arg01
05f3c     02 36 66 F0 | 	shl	_var01, #2
05f40     DF 0E 06 F1 | 	add	objptr, #223
05f44     07 37 02 F1 | 	add	_var01, objptr
05f48     1B 43 02 FB | 	rdlong	_var07, _var01
05f4c                 | ' 
05f4c                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05f4c     00 44 06 F6 | 	mov	_var08, #0
05f50     DF 0E 86 F1 | 	sub	objptr, #223
05f54     0C A1 9F FE | 	loc	pa,	#(@LR__0245-@LR__0244)
05f58     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f5c                 | LR__0244
05f5c                 | ' 
05f5c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05f5c     06 00 00 FF 
05f60     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05f64     16 47 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05f68     3B 3B 02 F6 | 	mov	_var03, arg01
05f6c     D3 0E 06 F1 | 	add	objptr, #211
05f70     07 3B 02 F1 | 	add	_var03, objptr
05f74     1D 3F C2 FA | 	rdbyte	_var05, _var03
05f78     1F 49 02 F6 | 	mov	_var10, _var05
05f7c     03 48 66 F0 | 	shl	_var10, #3
05f80     1F 49 02 F1 | 	add	_var10, _var05
05f84     03 48 66 F0 | 	shl	_var10, #3
05f88     24 47 02 F1 | 	add	_var09, _var10
05f8c     22 4B 02 F6 | 	mov	_var11, _var08
05f90     01 4A 66 F0 | 	shl	_var11, #1
05f94     23 4B 02 F1 | 	add	_var11, _var09
05f98     25 4D E2 FA | 	rdword	_var12, _var11
05f9c                 | '       if tempPeriod >= periodStep
05f9c     26 43 5A F2 | 	cmps	_var07, _var12 wcz
05fa0                 | '         i += 1000
05fa0     06 00 00 FF 
05fa4     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05fa8     D3 0E 86 F1 | 	sub	objptr, #211
05fac     01 00 00 3F 
05fb0     E8 45 06 31 |  if_ae	add	_var08, ##1000
05fb4     01 44 06 F1 | 	add	_var08, #1
05fb8     24 44 5E F2 | 	cmps	_var08, #36 wcz
05fbc     9C FF 9F CD |  if_b	jmp	#LR__0244
05fc0                 | LR__0245
05fc0                 | ' 
05fc0                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05fc0     21 4D 82 F1 | 	sub	_var12, _var07
05fc4     02 76 66 F0 | 	shl	arg01, #2
05fc8     EF 0E 06 F1 | 	add	objptr, #239
05fcc     07 77 02 F1 | 	add	arg01, objptr
05fd0     3B 4D 62 FC | 	wrlong	_var12, arg01
05fd4     EF 0E 86 F1 | 	sub	objptr, #239
05fd8                 | LR__0246
05fd8                 | _trackerplayer_spin2_doPortamento_ret
05fd8     2D 00 64 FD | 	ret
05fdc                 | 
05fdc                 | ' 
05fdc                 | ' 
05fdc                 | ' PRI doVolumeSlide(channel)
05fdc                 | _trackerplayer_spin2_doVolumeSlide
05fdc                 | ' 
05fdc                 | '   if x > 0
05fdc     B7 0F 06 F1 | 	add	objptr, #439
05fe0     07 37 C2 FA | 	rdbyte	_var01, objptr
05fe4     B7 0F 86 F1 | 	sub	objptr, #439
05fe8     00 36 5E F2 | 	cmps	_var01, #0 wcz
05fec     38 00 90 ED |  if_be	jmp	#LR__0247
05ff0                 | '     currVolume[channel] += x
05ff0     3B 39 02 F6 | 	mov	_var02, arg01
05ff4     02 38 66 F0 | 	shl	_var02, #2
05ff8     FF 0E 06 F1 | 	add	objptr, #255
05ffc     07 39 02 F1 | 	add	_var02, objptr
06000     1C 37 02 FB | 	rdlong	_var01, _var02
06004     B8 0E 06 F1 | 	add	objptr, #184
06008     07 3B C2 FA | 	rdbyte	_var03, objptr
0600c     1D 37 02 F1 | 	add	_var01, _var03
06010     3B 3D 02 F6 | 	mov	_var04, arg01
06014     02 3C 66 F0 | 	shl	_var04, #2
06018     B8 0E 86 F1 | 	sub	objptr, #184
0601c     07 3D 02 F1 | 	add	_var04, objptr
06020     1E 37 62 FC | 	wrlong	_var01, _var04
06024     FF 0E 86 F1 | 	sub	objptr, #255
06028                 | LR__0247
06028                 | '   if y > 0
06028     B8 0F 06 F1 | 	add	objptr, #440
0602c     07 37 C2 FA | 	rdbyte	_var01, objptr
06030     B8 0F 86 F1 | 	sub	objptr, #440
06034     00 36 5E F2 | 	cmps	_var01, #0 wcz
06038     34 00 90 ED |  if_be	jmp	#LR__0248
0603c                 | '     currVolume[channel] -= y
0603c     3B 39 02 F6 | 	mov	_var02, arg01
06040     02 38 66 F0 | 	shl	_var02, #2
06044     FF 0E 06 F1 | 	add	objptr, #255
06048     07 39 02 F1 | 	add	_var02, objptr
0604c     1C 37 02 FB | 	rdlong	_var01, _var02
06050     B9 0E 06 F1 | 	add	objptr, #185
06054     07 3B C2 FA | 	rdbyte	_var03, objptr
06058     1D 37 82 F1 | 	sub	_var01, _var03
0605c     02 76 66 F0 | 	shl	arg01, #2
06060     B9 0E 86 F1 | 	sub	objptr, #185
06064     07 77 02 F1 | 	add	arg01, objptr
06068     3B 37 62 FC | 	wrlong	_var01, arg01
0606c     FF 0E 86 F1 | 	sub	objptr, #255
06070                 | LR__0248
06070                 | _trackerplayer_spin2_doVolumeSlide_ret
06070     2D 00 64 FD | 	ret
06074                 | 
06074                 | ' 
06074                 | ' 
06074                 | ' '--------------------------------------------------------------
06074                 | ' '---------- Init the variables, start the cog. ----------------
06074                 | ' '--------------------------------------------------------------
06074                 | ' 
06074                 | ' pub start() :cog,base | iii
06074                 | _audio019_spin2_start
06074     07 5A 05 F6 | 	mov	COUNT_, #7
06078     B0 00 A0 FD | 	call	#pushregs_
0607c                 | ' 
0607c                 | ' base:=@channel1[0]
0607c     07 85 02 F6 | 	mov	local01, objptr
06080                 | ' 
06080                 | ' repeat iii from 0 to 7
06080     00 86 06 F6 | 	mov	local02, #0
06084     84 A0 9F FE | 	loc	pa,	#(@LR__0250-@LR__0249)
06088     93 00 A0 FD | 	call	#FCACHE_LOAD_
0608c                 | LR__0249
0608c                 | '   long [base+32*iii]:=0
0608c     42 89 02 F6 | 	mov	local03, local01
06090     43 8B 02 F6 | 	mov	local04, local02
06094     05 8A 66 F0 | 	shl	local04, #5
06098     45 89 02 F1 | 	add	local03, local04
0609c     44 01 68 FC | 	wrlong	#0, local03
060a0                 | '   long [base+32*iii+4]:=0
060a0     42 89 02 F6 | 	mov	local03, local01
060a4     43 8B 02 F6 | 	mov	local04, local02
060a8     05 8A 66 F0 | 	shl	local04, #5
060ac     45 89 02 F1 | 	add	local03, local04
060b0     04 88 06 F1 | 	add	local03, #4
060b4     44 01 68 FC | 	wrlong	#0, local03
060b8                 | '   long[base+32*iii+12]:=0
060b8     42 89 02 F6 | 	mov	local03, local01
060bc     43 8B 02 F6 | 	mov	local04, local02
060c0     05 8A 66 F0 | 	shl	local04, #5
060c4     45 89 02 F1 | 	add	local03, local04
060c8     0C 88 06 F1 | 	add	local03, #12
060cc     44 01 68 FC | 	wrlong	#0, local03
060d0                 | '   long[base+32*iii+16]:=2 
060d0     42 89 02 F6 | 	mov	local03, local01
060d4     43 8B 02 F6 | 	mov	local04, local02
060d8     05 8A 66 F0 | 	shl	local04, #5
060dc     45 89 02 F1 | 	add	local03, local04
060e0     10 88 06 F1 | 	add	local03, #16
060e4     44 05 68 FC | 	wrlong	#2, local03
060e8                 | '   word[base+32*iii+20]:=0
060e8     42 89 02 F6 | 	mov	local03, local01
060ec     43 8B 02 F6 | 	mov	local04, local02
060f0     05 8A 66 F0 | 	shl	local04, #5
060f4     45 89 02 F1 | 	add	local03, local04
060f8     14 88 06 F1 | 	add	local03, #20
060fc     44 01 58 FC | 	wrword	#0, local03
06100                 | '   word[base+32*iii+22]:=8192
06100     42 89 02 F6 | 	mov	local03, local01
06104     43 8B 02 F6 | 	mov	local04, local02
06108     05 8A 66 F0 | 	shl	local04, #5
0610c     45 89 02 F1 | 	add	local03, local04
06110     16 88 06 F1 | 	add	local03, #22
06114     10 00 80 FF 
06118     44 01 58 FC | 	wrword	##8192, local03
0611c                 | '   word[base+32*iii+24]:=100+2*iii
0611c     43 8B 02 F6 | 	mov	local04, local02
06120     01 8A 66 F0 | 	shl	local04, #1
06124     64 88 06 F6 | 	mov	local03, #100
06128     45 89 02 F1 | 	add	local03, local04
0612c     42 8D 02 F6 | 	mov	local05, local01
06130     43 8F 02 F6 | 	mov	local06, local02
06134     05 8E 66 F0 | 	shl	local06, #5
06138     47 8D 02 F1 | 	add	local05, local06
0613c     18 8C 06 F1 | 	add	local05, #24
06140     46 89 52 FC | 	wrword	local03, local05
06144                 | '   word[base+32*iii+26]:=2
06144     42 89 02 F6 | 	mov	local03, local01
06148     43 8B 02 F6 | 	mov	local04, local02
0614c     05 8A 66 F0 | 	shl	local04, #5
06150     45 89 02 F1 | 	add	local03, local04
06154     1A 88 06 F1 | 	add	local03, #26
06158     44 05 58 FC | 	wrword	#2, local03
0615c                 | '   long [base+32*iii+8]:=@null | $C0000000
0615c     01 00 00 FF 
06160     F8 16 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
06164     0B 89 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
06168     3E 88 26 F4 | 	bith	local03, #62
0616c     42 8D 02 F6 | 	mov	local05, local01
06170     43 8F 02 F6 | 	mov	local06, local02
06174     05 8E 66 F0 | 	shl	local06, #5
06178     47 8D 02 F1 | 	add	local05, local06
0617c     08 8C 06 F1 | 	add	local05, #8
06180     46 89 62 FC | 	wrlong	local03, local05
06184     01 86 06 F1 | 	add	local02, #1
06188     08 86 5E F2 | 	cmps	local02, #8 wcz
0618c     01 00 00 FF 
06190     F8 16 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
06194     F4 FE 9F CD |  if_b	jmp	#LR__0249
06198                 | LR__0250
06198                 | '   
06198                 | ' cog:=coginit(16,@audio,@channel1)
06198     0B 79 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
0619c     07 7B 02 F6 | 	mov	arg03, objptr
061a0     10 76 06 F6 | 	mov	arg01, #16
061a4     28 7A 62 FD | 	setq	arg03
061a8     3C 77 F2 FC | 	coginit	arg01, arg02 wc
061ac     01 76 66 C6 |  if_b	neg	arg01, #1
061b0     3B 31 02 F6 | 	mov	result1, arg01
061b4     18 91 02 F6 | 	mov	local07, result1
061b8                 | ' waitms(100)
061b8     64 76 06 F6 | 	mov	arg01, #100
061bc     F0 04 B0 FD | 	call	#__system___waitms
061c0                 | ' return cog,base
061c0     42 33 02 F6 | 	mov	result2, local01
061c4     48 31 02 F6 | 	mov	result1, local07
061c8     AF F0 03 F6 | 	mov	ptra, fp
061cc     BF 00 A0 FD | 	call	#popregs_
061d0                 | _audio019_spin2_start_ret
061d0     2D 00 64 FD | 	ret
061d4                 | hubexit
061d4     81 00 80 FD | 	jmp	#cogexit
061d8                 | 
061d8                 | __system___setbaud
061d8     14 D8 06 FB | 	rdlong	muldiva_, #20
061dc     3B DB 02 F6 | 	mov	muldivb_, arg01
061e0     D0 00 A0 FD | 	call	#divide_
061e4     40 7C 64 FD | 	dirl	#62
061e8     40 7E 64 FD | 	dirl	#63
061ec     0A DB 62 FC | 	wrlong	muldivb_, ptr___system__dat__
061f0     10 DA 66 F0 | 	shl	muldivb_, #16
061f4     07 78 06 F6 | 	mov	arg02, #7
061f8     6D 79 02 F1 | 	add	arg02, muldivb_
061fc     3E F8 0C FC | 	wrpin	#124, #62
06200     3E 78 16 FC | 	wxpin	arg02, #62
06204     3F 7C 0C FC | 	wrpin	#62, #63
06208     14 78 06 F1 | 	add	arg02, #20
0620c     3F 78 16 FC | 	wxpin	arg02, #63
06210     41 7C 64 FD | 	dirh	#62
06214     41 7E 64 FD | 	dirh	#63
06218                 | __system___setbaud_ret
06218     2D 00 64 FD | 	ret
0621c                 | 
0621c                 | __system___txraw
0621c     02 5A 05 F6 | 	mov	COUNT_, #2
06220     B0 00 A0 FD | 	call	#pushregs_
06224     3B 85 02 F6 | 	mov	local01, arg01
06228     0A 87 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0622c     0C 00 90 5D |  if_ne	jmp	#LR__0251
06230     C2 01 00 FF 
06234     00 76 06 F6 | 	mov	arg01, ##230400
06238     9C FF BF FD | 	call	#__system___setbaud
0623c                 | LR__0251
0623c     3E 84 26 FC | 	wypin	local01, #62
06240     1F 02 64 FD | 	waitx	#1
06244     C0 9D 9F FE | 	loc	pa,	#(@LR__0253-@LR__0252)
06248     93 00 A0 FD | 	call	#FCACHE_LOAD_
0624c                 | LR__0252
0624c     40 7C 74 FD | 	testp	#62 wc
06250     F8 FF 9F 3D |  if_nc	jmp	#LR__0252
06254                 | LR__0253
06254     01 30 06 F6 | 	mov	result1, #1
06258     AF F0 03 F6 | 	mov	ptra, fp
0625c     BF 00 A0 FD | 	call	#popregs_
06260                 | __system___txraw_ret
06260     2D 00 64 FD | 	ret
06264                 | 
06264                 | __system___rxraw
06264     0B 5A 05 F6 | 	mov	COUNT_, #11
06268     B0 00 A0 FD | 	call	#pushregs_
0626c     3B 85 02 F6 | 	mov	local01, arg01
06270     0A 87 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06274     0C 00 90 5D |  if_ne	jmp	#LR__0254
06278     C2 01 00 FF 
0627c     00 76 06 F6 | 	mov	arg01, ##230400
06280     54 FF BF FD | 	call	#__system___setbaud
06284                 | LR__0254
06284     00 84 0E F2 | 	cmp	local01, #0 wz
06288     18 00 90 AD |  if_e	jmp	#LR__0255
0628c     1A 88 62 FD | 	getct	local03
06290     14 8A 06 FB | 	rdlong	local04, #20
06294     0A 8A 46 F0 | 	shr	local04, #10
06298     45 85 02 FD | 	qmul	local01, local04
0629c     18 8C 62 FD | 	getqx	local05
062a0     46 89 02 F1 | 	add	local03, local05
062a4                 | LR__0255
062a4     01 8E 66 F6 | 	neg	local06, #1
062a8     00 90 06 F6 | 	mov	local07, #0
062ac     04 14 06 F1 | 	add	ptr___system__dat__, #4
062b0     0A 93 02 FB | 	rdlong	local08, ptr___system__dat__
062b4     04 14 86 F1 | 	sub	ptr___system__dat__, #4
062b8                 | LR__0256
062b8     08 92 16 F4 | 	testb	local08, #8 wc
062bc     09 92 76 F4 | 	testbn	local08, #9 andc
062c0     0A 92 46 F0 | 	shr	local08, #10
062c4     01 90 06 C6 |  if_b	mov	local07, #1
062c8     10 00 90 CD |  if_b	jmp	#LR__0257
062cc     40 7E 6C FD | 	testp	#63 wz
062d0     01 90 06 A6 |  if_e	mov	local07, #1
062d4     3F 92 8E AA |  if_e	rdpin	local08, #63
062d8     04 92 46 A0 |  if_e	shr	local08, #4
062dc                 | LR__0257
062dc     00 86 06 F6 | 	mov	local02, #0
062e0     00 90 0E F2 | 	cmp	local07, #0 wz
062e4     01 86 66 56 |  if_ne	neg	local02, #1
062e8     00 94 06 F6 | 	mov	local09, #0
062ec     00 8A 06 F6 | 	mov	local04, #0
062f0     00 84 0E F2 | 	cmp	local01, #0 wz
062f4     01 8A 66 56 |  if_ne	neg	local04, #1
062f8     00 8C 06 F6 | 	mov	local05, #0
062fc     00 96 06 F6 | 	mov	local10, #0
06300     1A 98 62 FD | 	getct	local11
06304     44 99 82 F1 | 	sub	local11, local03
06308     00 98 5E F2 | 	cmps	local11, #0 wcz
0630c     01 96 66 C6 |  if_b	neg	local10, #1
06310     00 96 0E F2 | 	cmp	local10, #0 wz
06314     01 8C 66 56 |  if_ne	neg	local05, #1
06318     46 8B CA F7 | 	test	local04, local05 wz
0631c     01 94 66 56 |  if_ne	neg	local09, #1
06320     4A 87 4A F5 | 	or	local02, local09 wz
06324     90 FF 9F AD |  if_e	jmp	#LR__0256
06328     00 90 0E F2 | 	cmp	local07, #0 wz
0632c     49 8F 02 56 |  if_ne	mov	local06, local08
06330     FF 8E 06 55 |  if_ne	and	local06, #255
06334     04 14 06 F1 | 	add	ptr___system__dat__, #4
06338     0A 93 62 FC | 	wrlong	local08, ptr___system__dat__
0633c     04 14 86 F1 | 	sub	ptr___system__dat__, #4
06340     47 31 02 F6 | 	mov	result1, local06
06344     AF F0 03 F6 | 	mov	ptra, fp
06348     BF 00 A0 FD | 	call	#popregs_
0634c                 | __system___rxraw_ret
0634c     2D 00 64 FD | 	ret
06350                 | 
06350                 | __system____builtin_memmove
06350     3B 37 02 F6 | 	mov	_var01, arg01
06354     3C 77 5A F2 | 	cmps	arg01, arg02 wcz
06358     50 00 90 3D |  if_ae	jmp	#LR__0265
0635c     C0 9C 9F FE | 	loc	pa,	#(@LR__0259-@LR__0258)
06360     93 00 A0 FD | 	call	#FCACHE_LOAD_
06364                 | LR__0258
06364     03 7A 5E F2 | 	cmps	arg03, #3 wcz
06368     18 00 90 ED |  if_be	jmp	#LR__0260
0636c     3C 39 02 FB | 	rdlong	_var02, arg02
06370     3B 39 62 FC | 	wrlong	_var02, arg01
06374     04 76 06 F1 | 	add	arg01, #4
06378     04 78 06 F1 | 	add	arg02, #4
0637c     04 7A 86 F1 | 	sub	arg03, #4
06380     E0 FF 9F FD | 	jmp	#LR__0258
06384                 | LR__0259
06384                 | LR__0260
06384     3D 3B 0A F6 | 	mov	_var03, arg03 wz
06388     4C 00 90 AD |  if_e	jmp	#LR__0271
0638c     84 9C 9F FE | 	loc	pa,	#(@LR__0263-@LR__0261)
06390     93 00 A0 FD | 	call	#FCACHE_LOAD_
06394                 | LR__0261
06394     1D 09 D8 FC | 	rep	@LR__0264, _var03
06398                 | LR__0262
06398     3C 39 C2 FA | 	rdbyte	_var02, arg02
0639c     3B 39 42 FC | 	wrbyte	_var02, arg01
063a0     01 76 06 F1 | 	add	arg01, #1
063a4     01 78 06 F1 | 	add	arg02, #1
063a8                 | LR__0263
063a8                 | LR__0264
063a8     2C 00 90 FD | 	jmp	#LR__0271
063ac                 | LR__0265
063ac     3D 77 02 F1 | 	add	arg01, arg03
063b0     3D 79 02 F1 | 	add	arg02, arg03
063b4     3D 3D 0A F6 | 	mov	_var04, arg03 wz
063b8     1C 00 90 AD |  if_e	jmp	#LR__0270
063bc     54 9C 9F FE | 	loc	pa,	#(@LR__0268-@LR__0266)
063c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
063c4                 | LR__0266
063c4     1E 09 D8 FC | 	rep	@LR__0269, _var04
063c8                 | LR__0267
063c8     01 76 86 F1 | 	sub	arg01, #1
063cc     01 78 86 F1 | 	sub	arg02, #1
063d0     3C 39 C2 FA | 	rdbyte	_var02, arg02
063d4     3B 39 42 FC | 	wrbyte	_var02, arg01
063d8                 | LR__0268
063d8                 | LR__0269
063d8                 | LR__0270
063d8                 | LR__0271
063d8     1B 31 02 F6 | 	mov	result1, _var01
063dc                 | __system____builtin_memmove_ret
063dc     2D 00 64 FD | 	ret
063e0                 | 
063e0                 | __system__longmove
063e0     3B 37 02 F6 | 	mov	_var01, arg01
063e4     3C 77 5A F2 | 	cmps	arg01, arg02 wcz
063e8     28 00 90 3D |  if_ae	jmp	#LR__0276
063ec     3D 39 0A F6 | 	mov	_var02, arg03 wz
063f0     5C 00 90 AD |  if_e	jmp	#LR__0282
063f4     1C 9C 9F FE | 	loc	pa,	#(@LR__0274-@LR__0272)
063f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
063fc                 | LR__0272
063fc     1C 09 D8 FC | 	rep	@LR__0275, _var02
06400                 | LR__0273
06400     3C 3B 02 FB | 	rdlong	_var03, arg02
06404     3B 3B 62 FC | 	wrlong	_var03, arg01
06408     04 76 06 F1 | 	add	arg01, #4
0640c     04 78 06 F1 | 	add	arg02, #4
06410                 | LR__0274
06410                 | LR__0275
06410     3C 00 90 FD | 	jmp	#LR__0282
06414                 | LR__0276
06414     3D 3D 02 F6 | 	mov	_var04, arg03
06418     02 3C 66 F0 | 	shl	_var04, #2
0641c     1E 77 02 F1 | 	add	arg01, _var04
06420     3D 3D 02 F6 | 	mov	_var04, arg03
06424     02 3C 66 F0 | 	shl	_var04, #2
06428     1E 79 02 F1 | 	add	arg02, _var04
0642c     3D 3F 0A F6 | 	mov	_var05, arg03 wz
06430     1C 00 90 AD |  if_e	jmp	#LR__0281
06434     DC 9B 9F FE | 	loc	pa,	#(@LR__0279-@LR__0277)
06438     93 00 A0 FD | 	call	#FCACHE_LOAD_
0643c                 | LR__0277
0643c     1F 09 D8 FC | 	rep	@LR__0280, _var05
06440                 | LR__0278
06440     04 76 86 F1 | 	sub	arg01, #4
06444     04 78 86 F1 | 	sub	arg02, #4
06448     3C 3B 02 FB | 	rdlong	_var03, arg02
0644c     3B 3B 62 FC | 	wrlong	_var03, arg01
06450                 | LR__0279
06450                 | LR__0280
06450                 | LR__0281
06450                 | LR__0282
06450     1B 31 02 F6 | 	mov	result1, _var01
06454                 | __system__longmove_ret
06454     2D 00 64 FD | 	ret
06458                 | 
06458                 | __system____builtin_strcpy
06458     3B 37 02 F6 | 	mov	_var01, arg01
0645c     B4 9B 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
06460     93 00 A0 FD | 	call	#FCACHE_LOAD_
06464                 | LR__0283
06464     3C 39 CA FA | 	rdbyte	_var02, arg02 wz
06468     3B 39 42 FC | 	wrbyte	_var02, arg01
0646c     01 78 06 F1 | 	add	arg02, #1
06470     01 76 06 F1 | 	add	arg01, #1
06474     EC FF 9F 5D |  if_ne	jmp	#LR__0283
06478                 | LR__0284
06478     1B 31 02 F6 | 	mov	result1, _var01
0647c                 | __system____builtin_strcpy_ret
0647c     2D 00 64 FD | 	ret
06480                 | 
06480                 | __system____topofstack
06480     00 5A 05 F6 | 	mov	COUNT_, #0
06484     B0 00 A0 FD | 	call	#pushregs_
06488     08 F0 07 F1 | 	add	ptra, #8
0648c     04 5E 05 F1 | 	add	fp, #4
06490     AF 76 62 FC | 	wrlong	arg01, fp
06494     AF 30 02 F6 | 	mov	result1, fp
06498     04 5E 85 F1 | 	sub	fp, #4
0649c     AF F0 03 F6 | 	mov	ptra, fp
064a0     BF 00 A0 FD | 	call	#popregs_
064a4                 | __system____topofstack_ret
064a4     2D 00 64 FD | 	ret
064a8                 | 
064a8                 | __system___make_methodptr
064a8     04 5A 05 F6 | 	mov	COUNT_, #4
064ac     B0 00 A0 FD | 	call	#pushregs_
064b0     3B 85 02 F6 | 	mov	local01, arg01
064b4     3C 87 02 F6 | 	mov	local02, arg02
064b8     08 76 06 F6 | 	mov	arg01, #8
064bc     98 10 B0 FD | 	call	#__system___gc_alloc_managed
064c0     18 89 0A F6 | 	mov	local03, result1 wz
064c4     10 00 90 AD |  if_e	jmp	#LR__0285
064c8     44 85 62 FC | 	wrlong	local01, local03
064cc     44 8B 02 F6 | 	mov	local04, local03
064d0     04 8A 06 F1 | 	add	local04, #4
064d4     45 87 62 FC | 	wrlong	local02, local04
064d8                 | LR__0285
064d8     44 31 02 F6 | 	mov	result1, local03
064dc     AF F0 03 F6 | 	mov	ptra, fp
064e0     BF 00 A0 FD | 	call	#popregs_
064e4                 | __system___make_methodptr_ret
064e4     2D 00 64 FD | 	ret
064e8                 | 
064e8                 | __system___lockmem
064e8     02 5A 05 F6 | 	mov	COUNT_, #2
064ec     B0 00 A0 FD | 	call	#pushregs_
064f0     01 30 62 FD | 	cogid	result1
064f4     18 85 02 F6 | 	mov	local01, result1
064f8     00 85 06 F1 | 	add	local01, #256
064fc                 | LR__0286
064fc     3B 87 0A FB | 	rdlong	local02, arg01 wz
06500     3B 85 62 AC |  if_e	wrlong	local01, arg01
06504     3B 87 02 AB |  if_e	rdlong	local02, arg01
06508     3B 87 02 AB |  if_e	rdlong	local02, arg01
0650c     42 87 0A F2 | 	cmp	local02, local01 wz
06510     E8 FF 9F 5D |  if_ne	jmp	#LR__0286
06514     AF F0 03 F6 | 	mov	ptra, fp
06518     BF 00 A0 FD | 	call	#popregs_
0651c                 | __system___lockmem_ret
0651c     2D 00 64 FD | 	ret
06520                 | 
06520                 | __system___string_concat
06520     07 5A 05 F6 | 	mov	COUNT_, #7
06524     B0 00 A0 FD | 	call	#pushregs_
06528     3B 85 02 F6 | 	mov	local01, arg01
0652c     3C 87 02 F6 | 	mov	local02, arg02
06530     42 77 02 F6 | 	mov	arg01, local01
06534     00 88 06 F6 | 	mov	local03, #0
06538     D4 9A 9F FE | 	loc	pa,	#(@LR__0288-@LR__0287)
0653c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06540                 | LR__0287
06540     3B 8B CA FA | 	rdbyte	local04, arg01 wz
06544     01 88 06 51 |  if_ne	add	local03, #1
06548     01 76 06 51 |  if_ne	add	arg01, #1
0654c     F0 FF 9F 5D |  if_ne	jmp	#LR__0287
06550                 | LR__0288
06550     44 8D 02 F6 | 	mov	local05, local03
06554     43 77 02 F6 | 	mov	arg01, local02
06558     00 88 06 F6 | 	mov	local03, #0
0655c     B0 9A 9F FE | 	loc	pa,	#(@LR__0290-@LR__0289)
06560     93 00 A0 FD | 	call	#FCACHE_LOAD_
06564                 | LR__0289
06564     3B 8B CA FA | 	rdbyte	local04, arg01 wz
06568     01 88 06 51 |  if_ne	add	local03, #1
0656c     01 76 06 51 |  if_ne	add	arg01, #1
06570     F0 FF 9F 5D |  if_ne	jmp	#LR__0289
06574                 | LR__0290
06574     44 31 02 F6 | 	mov	result1, local03
06578     18 8F 02 F6 | 	mov	local06, result1
0657c     46 77 02 F6 | 	mov	arg01, local05
06580     47 77 02 F1 | 	add	arg01, local06
06584     01 76 06 F1 | 	add	arg01, #1
06588     CC 0F B0 FD | 	call	#__system___gc_alloc_managed
0658c     18 91 0A F6 | 	mov	local07, result1 wz
06590     28 00 90 AD |  if_e	jmp	#LR__0291
06594     48 77 02 F6 | 	mov	arg01, local07
06598     42 79 02 F6 | 	mov	arg02, local01
0659c     46 7B 02 F6 | 	mov	arg03, local05
065a0     AC FD BF FD | 	call	#__system____builtin_memmove
065a4     48 77 02 F6 | 	mov	arg01, local07
065a8     46 77 02 F1 | 	add	arg01, local05
065ac     01 8E 06 F1 | 	add	local06, #1
065b0     43 79 02 F6 | 	mov	arg02, local02
065b4     47 7B 02 F6 | 	mov	arg03, local06
065b8     94 FD BF FD | 	call	#__system____builtin_memmove
065bc                 | LR__0291
065bc     48 31 02 F6 | 	mov	result1, local07
065c0     AF F0 03 F6 | 	mov	ptra, fp
065c4     BF 00 A0 FD | 	call	#popregs_
065c8                 | __system___string_concat_ret
065c8     2D 00 64 FD | 	ret
065cc                 | 
065cc                 | __system___tx
065cc     02 5A 05 F6 | 	mov	COUNT_, #2
065d0     B0 00 A0 FD | 	call	#pushregs_
065d4     3B 85 02 F6 | 	mov	local01, arg01
065d8     0A 84 0E F2 | 	cmp	local01, #10 wz
065dc     20 00 90 5D |  if_ne	jmp	#LR__0292
065e0     08 14 06 F1 | 	add	ptr___system__dat__, #8
065e4     0A 87 02 FB | 	rdlong	local02, ptr___system__dat__
065e8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
065ec     02 86 CE F7 | 	test	local02, #2 wz
065f0     0C 00 90 AD |  if_e	jmp	#LR__0292
065f4     0D 86 06 F6 | 	mov	local02, #13
065f8     0D 76 06 F6 | 	mov	arg01, #13
065fc     1C FC BF FD | 	call	#__system___txraw
06600                 | LR__0292
06600     42 77 02 F6 | 	mov	arg01, local01
06604     14 FC BF FD | 	call	#__system___txraw
06608     AF F0 03 F6 | 	mov	ptra, fp
0660c     BF 00 A0 FD | 	call	#popregs_
06610                 | __system___tx_ret
06610     2D 00 64 FD | 	ret
06614                 | 
06614                 | __system___rx
06614     02 5A 05 F6 | 	mov	COUNT_, #2
06618     B0 00 A0 FD | 	call	#pushregs_
0661c                 | LR__0293
0661c     00 76 06 F6 | 	mov	arg01, #0
06620     40 FC BF FD | 	call	#__system___rxraw
06624     18 85 02 F6 | 	mov	local01, result1
06628     FF FF 7F FF 
0662c     FF 85 0E F2 | 	cmp	local01, ##-1 wz
06630     E8 FF 9F AD |  if_e	jmp	#LR__0293
06634     0D 84 0E F2 | 	cmp	local01, #13 wz
06638     14 00 90 5D |  if_ne	jmp	#LR__0294
0663c     08 14 06 F1 | 	add	ptr___system__dat__, #8
06640     0A 87 02 FB | 	rdlong	local02, ptr___system__dat__
06644     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06648     02 86 CE F7 | 	test	local02, #2 wz
0664c     0A 84 06 56 |  if_ne	mov	local01, #10
06650                 | LR__0294
06650     08 14 06 F1 | 	add	ptr___system__dat__, #8
06654     0A 87 02 FB | 	rdlong	local02, ptr___system__dat__
06658     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0665c     01 86 CE F7 | 	test	local02, #1 wz
06660     1C 00 90 AD |  if_e	jmp	#LR__0297
06664     7F 84 0E F2 | 	cmp	local01, #127 wz
06668     0C 00 90 5D |  if_ne	jmp	#LR__0295
0666c     08 76 06 F6 | 	mov	arg01, #8
06670     58 FF BF FD | 	call	#__system___tx
06674     08 00 90 FD | 	jmp	#LR__0296
06678                 | LR__0295
06678     42 77 02 F6 | 	mov	arg01, local01
0667c     4C FF BF FD | 	call	#__system___tx
06680                 | LR__0296
06680                 | LR__0297
06680     42 31 02 F6 | 	mov	result1, local01
06684     AF F0 03 F6 | 	mov	ptra, fp
06688     BF 00 A0 FD | 	call	#popregs_
0668c                 | __system___rx_ret
0668c     2D 00 64 FD | 	ret
06690                 | 
06690                 | __system___pinread
06690     20 76 CE F7 | 	test	arg01, #32 wz
06694     FF 37 02 56 |  if_ne	mov	_var01, inb
06698     FE 37 02 A6 |  if_e	mov	_var01, ina
0669c     3B 37 42 F0 | 	shr	_var01, arg01
066a0     06 76 46 F0 | 	shr	arg01, #6
066a4     3B 37 42 F7 | 	zerox	_var01, arg01
066a8     1B 31 02 F6 | 	mov	result1, _var01
066ac                 | __system___pinread_ret
066ac     2D 00 64 FD | 	ret
066b0                 | 
066b0                 | __system___waitms
066b0     03 5A 05 F6 | 	mov	COUNT_, #3
066b4     B0 00 A0 FD | 	call	#pushregs_
066b8     3B 85 02 F6 | 	mov	local01, arg01
066bc     14 86 06 FB | 	rdlong	local02, #20
066c0     54 99 9F FE | 	loc	pa,	#(@LR__0299-@LR__0298)
066c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
066c8                 | LR__0298
066c8     01 00 00 FF 
066cc     E8 85 5E F2 | 	cmps	local01, ##1000 wcz
066d0     1F 86 62 1D |  if_a	waitx	local02
066d4     01 00 00 1F 
066d8     E8 85 86 11 |  if_a	sub	local01, ##1000
066dc     E8 FF 9F 1D |  if_a	jmp	#LR__0298
066e0                 | LR__0299
066e0     0C 14 06 F1 | 	add	ptr___system__dat__, #12
066e4     0A 89 0A FB | 	rdlong	local03, ptr___system__dat__ wz
066e8     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
066ec     20 00 90 5D |  if_ne	jmp	#LR__0300
066f0     43 D9 02 F6 | 	mov	muldiva_, local02
066f4     01 00 00 FF 
066f8     E8 DB 06 F6 | 	mov	muldivb_, ##1000
066fc     CC 00 A0 FD | 	call	#unsdivide_
06700     6D 89 02 F6 | 	mov	local03, muldivb_
06704     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06708     0A DB 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0670c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06710                 | LR__0300
06710     00 84 5E F2 | 	cmps	local01, #0 wcz
06714     44 85 02 1D |  if_a	qmul	local01, local03
06718     18 76 62 1D |  if_a	getqx	arg01
0671c     1F 76 62 1D |  if_a	waitx	arg01
06720     AF F0 03 F6 | 	mov	ptra, fp
06724     BF 00 A0 FD | 	call	#popregs_
06728                 | __system___waitms_ret
06728     2D 00 64 FD | 	ret
0672c                 | 
0672c                 | __system___waitus
0672c     02 5A 05 F6 | 	mov	COUNT_, #2
06730     B0 00 A0 FD | 	call	#pushregs_
06734     3B 85 02 F6 | 	mov	local01, arg01
06738     10 14 06 F1 | 	add	ptr___system__dat__, #16
0673c     0A 87 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06740     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06744     20 00 90 5D |  if_ne	jmp	#LR__0301
06748     14 D8 06 FB | 	rdlong	muldiva_, #20
0674c     A1 07 00 FF 
06750     40 DA 06 F6 | 	mov	muldivb_, ##1000000
06754     CC 00 A0 FD | 	call	#unsdivide_
06758     6D 87 02 F6 | 	mov	local02, muldivb_
0675c     10 14 06 F1 | 	add	ptr___system__dat__, #16
06760     0A DB 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06764     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06768                 | LR__0301
06768     43 85 02 FD | 	qmul	local01, local02
0676c     18 76 62 FD | 	getqx	arg01
06770     1F 76 62 FD | 	waitx	arg01
06774     AF F0 03 F6 | 	mov	ptra, fp
06778     BF 00 A0 FD | 	call	#popregs_
0677c                 | __system___waitus_ret
0677c     2D 00 64 FD | 	ret
06780                 | 
06780                 | __system___mount
06780     0B 5A 05 F6 | 	mov	COUNT_, #11
06784     B0 00 A0 FD | 	call	#pushregs_
06788     3B 85 02 F6 | 	mov	local01, arg01
0678c     3C 87 02 F6 | 	mov	local02, arg02
06790     01 88 66 F6 | 	neg	local03, #1
06794     42 8B C2 FA | 	rdbyte	local04, local01
06798     2F 8A 0E F2 | 	cmp	local04, #47 wz
0679c     1C 00 90 AD |  if_e	jmp	#LR__0302
067a0     01 00 00 FF 
067a4     40 14 06 F1 | 	add	ptr___system__dat__, ##576
067a8     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
067ac     01 00 00 FF 
067b0     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
067b4     01 30 66 F6 | 	neg	result1, #1
067b8     38 01 90 FD | 	jmp	#LR__0313
067bc                 | LR__0302
067bc     00 8C 06 F6 | 	mov	local05, #0
067c0                 | LR__0303
067c0     04 8C 5E F2 | 	cmps	local05, #4 wcz
067c4     B0 00 90 3D |  if_ae	jmp	#LR__0309
067c8     46 8B 02 F6 | 	mov	local04, local05
067cc     02 8A 66 F0 | 	shl	local04, #2
067d0     18 14 06 F1 | 	add	ptr___system__dat__, #24
067d4     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
067d8     45 8F 0A FB | 	rdlong	local06, local04 wz
067dc     18 14 86 F1 | 	sub	ptr___system__dat__, #24
067e0     0C 00 90 5D |  if_ne	jmp	#LR__0304
067e4     00 88 5E F2 | 	cmps	local03, #0 wcz
067e8     46 89 02 C6 |  if_b	mov	local03, local05
067ec     80 00 90 CD |  if_b	jmp	#LR__0308
067f0                 | LR__0304
067f0     46 8B 02 F6 | 	mov	local04, local05
067f4     02 8A 66 F0 | 	shl	local04, #2
067f8     18 14 06 F1 | 	add	ptr___system__dat__, #24
067fc     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
06800     45 77 02 FB | 	rdlong	arg01, local04
06804     18 14 86 F1 | 	sub	ptr___system__dat__, #24
06808     00 90 06 F6 | 	mov	local07, #0
0680c     00 98 9F FE | 	loc	pa,	#(@LR__0306-@LR__0305)
06810     93 00 A0 FD | 	call	#FCACHE_LOAD_
06814                 | LR__0305
06814     3B 93 CA FA | 	rdbyte	local08, arg01 wz
06818     01 90 06 51 |  if_ne	add	local07, #1
0681c     01 76 06 51 |  if_ne	add	arg01, #1
06820     F0 FF 9F 5D |  if_ne	jmp	#LR__0305
06824                 | LR__0306
06824     48 31 02 F6 | 	mov	result1, local07
06828     18 95 02 F6 | 	mov	local09, result1
0682c     4A 97 02 F6 | 	mov	local10, local09
06830     42 97 02 F1 | 	add	local10, local01
06834     4B 8B C2 FA | 	rdbyte	local04, local10
06838     2F 8A 0E F2 | 	cmp	local04, #47 wz
0683c     30 00 90 5D |  if_ne	jmp	#LR__0307
06840     42 77 02 F6 | 	mov	arg01, local01
06844     46 99 02 F6 | 	mov	local11, local05
06848     02 98 66 F0 | 	shl	local11, #2
0684c     18 14 06 F1 | 	add	ptr___system__dat__, #24
06850     0A 99 02 F1 | 	add	local11, ptr___system__dat__
06854     4C 79 02 FB | 	rdlong	arg02, local11
06858     4A 7B 02 F6 | 	mov	arg03, local09
0685c     18 14 86 F1 | 	sub	ptr___system__dat__, #24
06860     E0 18 B0 FD | 	call	#__system__strncmp
06864     00 30 0E F2 | 	cmp	result1, #0 wz
06868     46 89 02 A6 |  if_e	mov	local03, local05
0686c     08 00 90 AD |  if_e	jmp	#LR__0309
06870                 | LR__0307
06870                 | LR__0308
06870     01 8C 06 F1 | 	add	local05, #1
06874     48 FF 9F FD | 	jmp	#LR__0303
06878                 | LR__0309
06878     FF FF 7F FF 
0687c     FF 89 0E F2 | 	cmp	local03, ##-1 wz
06880     1C 00 90 5D |  if_ne	jmp	#LR__0310
06884     01 00 00 FF 
06888     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0688c     0A 17 68 FC | 	wrlong	#11, ptr___system__dat__
06890     01 00 00 FF 
06894     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
06898     01 30 66 F6 | 	neg	result1, #1
0689c     54 00 90 FD | 	jmp	#LR__0313
068a0                 | LR__0310
068a0     44 8D 02 F6 | 	mov	local05, local03
068a4     46 8B 02 F6 | 	mov	local04, local05
068a8     02 8A 66 F0 | 	shl	local04, #2
068ac     28 14 06 F1 | 	add	ptr___system__dat__, #40
068b0     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
068b4     45 87 62 FC | 	wrlong	local02, local04
068b8     00 86 0E F2 | 	cmp	local02, #0 wz
068bc     28 14 86 F1 | 	sub	ptr___system__dat__, #40
068c0     18 00 90 5D |  if_ne	jmp	#LR__0311
068c4     02 8C 66 F0 | 	shl	local05, #2
068c8     18 14 06 F1 | 	add	ptr___system__dat__, #24
068cc     0A 8D 02 F1 | 	add	local05, ptr___system__dat__
068d0     46 01 68 FC | 	wrlong	#0, local05
068d4     18 14 86 F1 | 	sub	ptr___system__dat__, #24
068d8     14 00 90 FD | 	jmp	#LR__0312
068dc                 | LR__0311
068dc     02 8C 66 F0 | 	shl	local05, #2
068e0     18 14 06 F1 | 	add	ptr___system__dat__, #24
068e4     0A 8D 02 F1 | 	add	local05, ptr___system__dat__
068e8     46 85 62 FC | 	wrlong	local01, local05
068ec     18 14 86 F1 | 	sub	ptr___system__dat__, #24
068f0                 | LR__0312
068f0     00 30 06 F6 | 	mov	result1, #0
068f4                 | LR__0313
068f4     AF F0 03 F6 | 	mov	ptra, fp
068f8     BF 00 A0 FD | 	call	#popregs_
068fc                 | __system___mount_ret
068fc     2D 00 64 FD | 	ret
06900                 | 
06900                 | __system____getvfsforfile
06900     12 5A 05 F6 | 	mov	COUNT_, #18
06904     B0 00 A0 FD | 	call	#pushregs_
06908     3B 85 02 F6 | 	mov	local01, arg01
0690c     3C 87 02 F6 | 	mov	local02, arg02
06910     3D 89 02 F6 | 	mov	local03, arg03
06914     43 8B C2 FA | 	rdbyte	local04, local02
06918     2F 8A 0E F2 | 	cmp	local04, #47 wz
0691c     14 00 90 5D |  if_ne	jmp	#LR__0314
06920     42 77 02 F6 | 	mov	arg01, local01
06924     43 79 02 F6 | 	mov	arg02, local02
06928     00 7B 06 F6 | 	mov	arg03, #256
0692c     44 17 B0 FD | 	call	#__system__strncpy
06930     3C 00 90 FD | 	jmp	#LR__0315
06934                 | LR__0314
06934     38 14 06 F1 | 	add	ptr___system__dat__, #56
06938     0A 79 02 F6 | 	mov	arg02, ptr___system__dat__
0693c     38 14 86 F1 | 	sub	ptr___system__dat__, #56
06940     42 77 02 F6 | 	mov	arg01, local01
06944     00 7B 06 F6 | 	mov	arg03, #256
06948     28 17 B0 FD | 	call	#__system__strncpy
0694c     79 00 00 FF 
06950     DC 79 06 F6 | 	mov	arg02, ##@LR__0929
06954     42 77 02 F6 | 	mov	arg01, local01
06958     00 7B 06 F6 | 	mov	arg03, #256
0695c     60 17 B0 FD | 	call	#__system__strncat
06960     42 77 02 F6 | 	mov	arg01, local01
06964     43 79 02 F6 | 	mov	arg02, local02
06968     00 7B 06 F6 | 	mov	arg03, #256
0696c     50 17 B0 FD | 	call	#__system__strncat
06970                 | LR__0315
06970     00 8C 06 F6 | 	mov	local05, #0
06974                 | LR__0316
06974     04 8C 5E F2 | 	cmps	local05, #4 wcz
06978     50 01 90 3D |  if_ae	jmp	#LR__0327
0697c     46 8B 02 F6 | 	mov	local04, local05
06980     02 8A 66 F0 | 	shl	local04, #2
06984     18 14 06 F1 | 	add	ptr___system__dat__, #24
06988     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
0698c     45 8F 0A FB | 	rdlong	local06, local04 wz
06990     18 14 86 F1 | 	sub	ptr___system__dat__, #24
06994     2C 01 90 AD |  if_e	jmp	#LR__0326
06998     46 8B 02 F6 | 	mov	local04, local05
0699c     02 8A 66 F0 | 	shl	local04, #2
069a0     18 14 06 F1 | 	add	ptr___system__dat__, #24
069a4     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
069a8     45 77 02 FB | 	rdlong	arg01, local04
069ac     18 14 86 F1 | 	sub	ptr___system__dat__, #24
069b0     00 90 06 F6 | 	mov	local07, #0
069b4     58 96 9F FE | 	loc	pa,	#(@LR__0318-@LR__0317)
069b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
069bc                 | LR__0317
069bc     3B 93 CA FA | 	rdbyte	local08, arg01 wz
069c0     01 90 06 51 |  if_ne	add	local07, #1
069c4     01 76 06 51 |  if_ne	add	arg01, #1
069c8     F0 FF 9F 5D |  if_ne	jmp	#LR__0317
069cc                 | LR__0318
069cc     48 31 02 F6 | 	mov	result1, local07
069d0     18 95 02 F6 | 	mov	local09, result1
069d4     4A 97 02 F6 | 	mov	local10, local09
069d8     42 97 02 F1 | 	add	local10, local01
069dc     4B 8B C2 FA | 	rdbyte	local04, local10
069e0     2F 8A 0E F2 | 	cmp	local04, #47 wz
069e4     10 00 90 AD |  if_e	jmp	#LR__0319
069e8     4A 99 02 F6 | 	mov	local11, local09
069ec     42 99 02 F1 | 	add	local11, local01
069f0     4C 9B CA FA | 	rdbyte	local12, local11 wz
069f4     CC 00 90 5D |  if_ne	jmp	#LR__0325
069f8                 | LR__0319
069f8     42 77 02 F6 | 	mov	arg01, local01
069fc     46 9D 02 F6 | 	mov	local13, local05
06a00     02 9C 66 F0 | 	shl	local13, #2
06a04     18 14 06 F1 | 	add	ptr___system__dat__, #24
06a08     0A 9D 02 F1 | 	add	local13, ptr___system__dat__
06a0c     4E 79 02 FB | 	rdlong	arg02, local13
06a10     4A 7B 02 F6 | 	mov	arg03, local09
06a14     18 14 86 F1 | 	sub	ptr___system__dat__, #24
06a18     28 17 B0 FD | 	call	#__system__strncmp
06a1c     18 9F 0A F6 | 	mov	local14, result1 wz
06a20     A0 00 90 5D |  if_ne	jmp	#LR__0325
06a24     46 8B 02 F6 | 	mov	local04, local05
06a28     02 8A 66 F0 | 	shl	local04, #2
06a2c     28 14 06 F1 | 	add	ptr___system__dat__, #40
06a30     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
06a34     45 A1 02 FB | 	rdlong	local15, local04
06a38     28 14 86 F1 | 	sub	ptr___system__dat__, #40
06a3c     0C 96 9F FE | 	loc	pa,	#(@LR__0322-@LR__0320)
06a40     93 00 A0 FD | 	call	#FCACHE_LOAD_
06a44                 | LR__0320
06a44     4A 8F 02 F6 | 	mov	local06, local09
06a48     01 8E 06 F1 | 	add	local06, #1
06a4c     42 8F 02 F1 | 	add	local06, local01
06a50     47 8B C2 FA | 	rdbyte	local04, local06
06a54     2E 8A 0E F2 | 	cmp	local04, #46 wz
06a58     34 00 90 5D |  if_ne	jmp	#LR__0323
06a5c     4A A3 02 F6 | 	mov	local16, local09
06a60     02 A2 06 F1 | 	add	local16, #2
06a64     42 A3 02 F1 | 	add	local16, local01
06a68     51 99 C2 FA | 	rdbyte	local11, local16
06a6c     2F 98 0E F2 | 	cmp	local11, #47 wz
06a70     14 00 90 AD |  if_e	jmp	#LR__0321
06a74     4A A5 02 F6 | 	mov	local17, local09
06a78     02 A4 06 F1 | 	add	local17, #2
06a7c     42 A5 02 F1 | 	add	local17, local01
06a80     52 A7 CA FA | 	rdbyte	local18, local17 wz
06a84     08 00 90 5D |  if_ne	jmp	#LR__0323
06a88                 | LR__0321
06a88     01 94 06 F1 | 	add	local09, #1
06a8c     B4 FF 9F FD | 	jmp	#LR__0320
06a90                 | LR__0322
06a90                 | LR__0323
06a90     00 88 0E F2 | 	cmp	local03, #0 wz
06a94     10 00 90 AD |  if_e	jmp	#LR__0324
06a98     44 77 02 F6 | 	mov	arg01, local03
06a9c     42 79 02 F6 | 	mov	arg02, local01
06aa0     00 7B 06 F6 | 	mov	arg03, #256
06aa4     CC 15 B0 FD | 	call	#__system__strncpy
06aa8                 | LR__0324
06aa8     42 77 02 F6 | 	mov	arg01, local01
06aac     42 79 02 F6 | 	mov	arg02, local01
06ab0     4A 79 02 F1 | 	add	arg02, local09
06ab4     01 78 06 F1 | 	add	arg02, #1
06ab8     9C F9 BF FD | 	call	#__system____builtin_strcpy
06abc     50 31 02 F6 | 	mov	result1, local15
06ac0     1C 00 90 FD | 	jmp	#LR__0328
06ac4                 | LR__0325
06ac4                 | LR__0326
06ac4     01 8C 06 F1 | 	add	local05, #1
06ac8     A8 FE 9F FD | 	jmp	#LR__0316
06acc                 | LR__0327
06acc     01 00 00 FF 
06ad0     3C 14 06 F1 | 	add	ptr___system__dat__, ##572
06ad4     0A 31 02 FB | 	rdlong	result1, ptr___system__dat__
06ad8     01 00 00 FF 
06adc     3C 14 86 F1 | 	sub	ptr___system__dat__, ##572
06ae0                 | LR__0328
06ae0     AF F0 03 F6 | 	mov	ptra, fp
06ae4     BF 00 A0 FD | 	call	#popregs_
06ae8                 | __system____getvfsforfile_ret
06ae8     2D 00 64 FD | 	ret
06aec                 | 
06aec                 | __system___basic_open
06aec     05 5A 05 F6 | 	mov	COUNT_, #5
06af0     B0 00 A0 FD | 	call	#pushregs_
06af4     3C 85 02 F6 | 	mov	local01, arg02
06af8     3D 87 02 F6 | 	mov	local02, arg03
06afc     3E 89 02 F6 | 	mov	local03, arg04
06b00     3C 15 B0 FD | 	call	#__system____getftab
06b04     18 8B 0A F6 | 	mov	local04, result1 wz
06b08     18 00 90 5D |  if_ne	jmp	#LR__0329
06b0c     03 77 02 F6 | 	mov	arg01, abortchain
06b10     0C 78 06 F6 | 	mov	arg02, #12
06b14     01 7A 06 F6 | 	mov	arg03, #1
06b18     F0 00 A0 FD | 	call	#__longjmp
06b1c     01 30 66 F6 | 	neg	result1, #1
06b20     70 00 90 FD | 	jmp	#LR__0333
06b24                 | LR__0329
06b24     00 84 0E F2 | 	cmp	local01, #0 wz
06b28     48 00 90 AD |  if_e	jmp	#LR__0331
06b2c     04 76 06 F6 | 	mov	arg01, #4
06b30     24 0A B0 FD | 	call	#__system___gc_alloc_managed
06b34     18 8D 0A F6 | 	mov	local05, result1 wz
06b38     18 00 90 5D |  if_ne	jmp	#LR__0330
06b3c     03 77 02 F6 | 	mov	arg01, abortchain
06b40     07 78 06 F6 | 	mov	arg02, #7
06b44     01 7A 06 F6 | 	mov	arg03, #1
06b48     F0 00 A0 FD | 	call	#__longjmp
06b4c     01 30 66 F6 | 	neg	result1, #1
06b50     40 00 90 FD | 	jmp	#LR__0333
06b54                 | LR__0330
06b54     46 85 62 FC | 	wrlong	local01, local05
06b58     08 79 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06b5c     46 77 02 F6 | 	mov	arg01, local05
06b60     44 F9 BF FD | 	call	#__system___make_methodptr
06b64     18 8A 06 F1 | 	add	local04, #24
06b68     45 31 62 FC | 	wrlong	result1, local04
06b6c     18 8A 86 F1 | 	sub	local04, #24
06b70     0C 00 90 FD | 	jmp	#LR__0332
06b74                 | LR__0331
06b74     18 8A 06 F1 | 	add	local04, #24
06b78     45 85 62 FC | 	wrlong	local01, local04
06b7c     18 8A 86 F1 | 	sub	local04, #24
06b80                 | LR__0332
06b80     1C 8A 06 F1 | 	add	local04, #28
06b84     45 87 62 FC | 	wrlong	local02, local04
06b88     04 8A 06 F1 | 	add	local04, #4
06b8c     45 89 62 FC | 	wrlong	local03, local04
06b90     00 30 06 F6 | 	mov	result1, #0
06b94                 | LR__0333
06b94     AF F0 03 F6 | 	mov	ptra, fp
06b98     BF 00 A0 FD | 	call	#popregs_
06b9c                 | __system___basic_open_ret
06b9c     2D 00 64 FD | 	ret
06ba0                 | 
06ba0                 | __system___basic_print_char
06ba0     05 5A 05 F6 | 	mov	COUNT_, #5
06ba4     B0 00 A0 FD | 	call	#pushregs_
06ba8     3C 85 02 F6 | 	mov	local01, arg02
06bac     E4 17 B0 FD | 	call	#__system___gettxfunc
06bb0     18 87 0A F6 | 	mov	local02, result1 wz
06bb4     00 30 06 A6 |  if_e	mov	result1, #0
06bb8     24 00 90 AD |  if_e	jmp	#LR__0334
06bbc     43 89 02 FB | 	rdlong	local03, local02
06bc0     04 86 06 F1 | 	add	local02, #4
06bc4     43 8B 02 FB | 	rdlong	local04, local02
06bc8     42 77 02 F6 | 	mov	arg01, local01
06bcc     07 8D 02 F6 | 	mov	local05, objptr
06bd0     44 0F 02 F6 | 	mov	objptr, local03
06bd4     2D 8A 62 FD | 	call	local04
06bd8     46 0F 02 F6 | 	mov	objptr, local05
06bdc     01 30 06 F6 | 	mov	result1, #1
06be0                 | LR__0334
06be0     AF F0 03 F6 | 	mov	ptra, fp
06be4     BF 00 A0 FD | 	call	#popregs_
06be8                 | __system___basic_print_char_ret
06be8     2D 00 64 FD | 	ret
06bec                 | 
06bec                 | __system___basic_print_string
06bec     03 5A 05 F6 | 	mov	COUNT_, #3
06bf0     B0 00 A0 FD | 	call	#pushregs_
06bf4     3C 85 02 F6 | 	mov	local01, arg02
06bf8     3D 87 02 F6 | 	mov	local02, arg03
06bfc     94 17 B0 FD | 	call	#__system___gettxfunc
06c00     18 89 0A F6 | 	mov	local03, result1 wz
06c04     00 30 06 A6 |  if_e	mov	result1, #0
06c08     1C 00 90 AD |  if_e	jmp	#LR__0335
06c0c     00 84 0E F2 | 	cmp	local01, #0 wz
06c10     00 30 06 A6 |  if_e	mov	result1, #0
06c14     10 00 90 AD |  if_e	jmp	#LR__0335
06c18     44 77 02 F6 | 	mov	arg01, local03
06c1c     43 79 02 F6 | 	mov	arg02, local02
06c20     42 7B 02 F6 | 	mov	arg03, local01
06c24     B0 00 B0 FD | 	call	#__system___fmtstr
06c28                 | LR__0335
06c28     AF F0 03 F6 | 	mov	ptra, fp
06c2c     BF 00 A0 FD | 	call	#popregs_
06c30                 | __system___basic_print_string_ret
06c30     2D 00 64 FD | 	ret
06c34                 | 
06c34                 | __system___basic_print_integer
06c34     04 5A 05 F6 | 	mov	COUNT_, #4
06c38     B0 00 A0 FD | 	call	#pushregs_
06c3c     3C 85 02 F6 | 	mov	local01, arg02
06c40     3D 87 02 F6 | 	mov	local02, arg03
06c44     3E 89 02 F6 | 	mov	local03, arg04
06c48     48 17 B0 FD | 	call	#__system___gettxfunc
06c4c     18 8B 0A F6 | 	mov	local04, result1 wz
06c50     00 30 06 A6 |  if_e	mov	result1, #0
06c54     14 00 90 AD |  if_e	jmp	#LR__0336
06c58     45 77 02 F6 | 	mov	arg01, local04
06c5c     43 79 02 F6 | 	mov	arg02, local02
06c60     42 7B 02 F6 | 	mov	arg03, local01
06c64     44 7D 02 F6 | 	mov	arg04, local03
06c68     64 01 B0 FD | 	call	#__system___fmtnum
06c6c                 | LR__0336
06c6c     AF F0 03 F6 | 	mov	ptra, fp
06c70     BF 00 A0 FD | 	call	#popregs_
06c74                 | __system___basic_print_integer_ret
06c74     2D 00 64 FD | 	ret
06c78                 | 
06c78                 | __system___fmtchar
06c78     00 5A 05 F6 | 	mov	COUNT_, #0
06c7c     B0 00 A0 FD | 	call	#pushregs_
06c80     14 F0 07 F1 | 	add	ptra, #20
06c84     04 5E 05 F1 | 	add	fp, #4
06c88     AF 76 62 FC | 	wrlong	arg01, fp
06c8c     04 5E 05 F1 | 	add	fp, #4
06c90     AF 78 62 FC | 	wrlong	arg02, fp
06c94     04 5E 05 F1 | 	add	fp, #4
06c98     AF 7A 62 FC | 	wrlong	arg03, fp
06c9c     04 5E 05 F1 | 	add	fp, #4
06ca0     AF 7A 42 FC | 	wrbyte	arg03, fp
06ca4     01 5E 05 F1 | 	add	fp, #1
06ca8     AF 00 48 FC | 	wrbyte	#0, fp
06cac     0D 5E 85 F1 | 	sub	fp, #13
06cb0     AF 76 02 FB | 	rdlong	arg01, fp
06cb4     04 5E 05 F1 | 	add	fp, #4
06cb8     AF 78 02 FB | 	rdlong	arg02, fp
06cbc     08 5E 05 F1 | 	add	fp, #8
06cc0     AF 7A 02 F6 | 	mov	arg03, fp
06cc4     10 5E 85 F1 | 	sub	fp, #16
06cc8     0C 00 B0 FD | 	call	#__system___fmtstr
06ccc     AF F0 03 F6 | 	mov	ptra, fp
06cd0     BF 00 A0 FD | 	call	#popregs_
06cd4                 | __system___fmtchar_ret
06cd4     2D 00 64 FD | 	ret
06cd8                 | 
06cd8                 | __system___fmtstr
06cd8     0E 5A 05 F6 | 	mov	COUNT_, #14
06cdc     B0 00 A0 FD | 	call	#pushregs_
06ce0     3B 85 02 F6 | 	mov	local01, arg01
06ce4     3C 87 02 F6 | 	mov	local02, arg02
06ce8     3D 89 02 F6 | 	mov	local03, arg03
06cec     43 8B 02 F6 | 	mov	local04, local02
06cf0     FF 8A 06 F5 | 	and	local04, #255
06cf4     44 77 02 F6 | 	mov	arg01, local03
06cf8     00 8C 06 F6 | 	mov	local05, #0
06cfc     10 93 9F FE | 	loc	pa,	#(@LR__0338-@LR__0337)
06d00     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d04                 | LR__0337
06d04     3B 8F CA FA | 	rdbyte	local06, arg01 wz
06d08     01 8C 06 51 |  if_ne	add	local05, #1
06d0c     01 76 06 51 |  if_ne	add	arg01, #1
06d10     F0 FF 9F 5D |  if_ne	jmp	#LR__0337
06d14                 | LR__0338
06d14     46 31 02 F6 | 	mov	result1, local05
06d18     18 91 02 F6 | 	mov	local07, result1
06d1c     00 8A 0E F2 | 	cmp	local04, #0 wz
06d20     04 00 90 AD |  if_e	jmp	#LR__0339
06d24     45 91 7A F3 | 	fles	local07, local04 wcz
06d28                 | LR__0339
06d28     42 77 02 F6 | 	mov	arg01, local01
06d2c     43 79 02 F6 | 	mov	arg02, local02
06d30     48 7B 02 F6 | 	mov	arg03, local07
06d34     02 7C 06 F6 | 	mov	arg04, #2
06d38     08 15 B0 FD | 	call	#__system___fmtpad
06d3c     18 93 02 F6 | 	mov	local08, result1
06d40     00 92 5E F2 | 	cmps	local08, #0 wcz
06d44     49 31 02 C6 |  if_b	mov	result1, local08
06d48     78 00 90 CD |  if_b	jmp	#LR__0342
06d4c     00 94 06 F6 | 	mov	local09, #0
06d50                 | LR__0340
06d50     48 95 5A F2 | 	cmps	local09, local07 wcz
06d54     44 00 90 3D |  if_ae	jmp	#LR__0341
06d58     42 97 02 F6 | 	mov	local10, local01
06d5c     4B 99 02 FB | 	rdlong	local11, local10
06d60     04 96 06 F1 | 	add	local10, #4
06d64     4B 9B 02 FB | 	rdlong	local12, local10
06d68     44 77 C2 FA | 	rdbyte	arg01, local03
06d6c     07 9D 02 F6 | 	mov	local13, objptr
06d70     4C 0F 02 F6 | 	mov	objptr, local11
06d74     01 88 06 F1 | 	add	local03, #1
06d78     2D 9A 62 FD | 	call	local12
06d7c     4E 0F 02 F6 | 	mov	objptr, local13
06d80     18 9F 02 F6 | 	mov	local14, result1
06d84     00 9E 5E F2 | 	cmps	local14, #0 wcz
06d88     4F 31 02 C6 |  if_b	mov	result1, local14
06d8c     34 00 90 CD |  if_b	jmp	#LR__0342
06d90     4F 93 02 F1 | 	add	local08, local14
06d94     01 94 06 F1 | 	add	local09, #1
06d98     B4 FF 9F FD | 	jmp	#LR__0340
06d9c                 | LR__0341
06d9c     42 77 02 F6 | 	mov	arg01, local01
06da0     43 79 02 F6 | 	mov	arg02, local02
06da4     48 7B 02 F6 | 	mov	arg03, local07
06da8     01 7C 06 F6 | 	mov	arg04, #1
06dac     94 14 B0 FD | 	call	#__system___fmtpad
06db0     18 9F 02 F6 | 	mov	local14, result1
06db4     00 9E 5E F2 | 	cmps	local14, #0 wcz
06db8     4F 31 02 C6 |  if_b	mov	result1, local14
06dbc     4F 93 02 31 |  if_ae	add	local08, local14
06dc0     49 31 02 36 |  if_ae	mov	result1, local08
06dc4                 | LR__0342
06dc4     AF F0 03 F6 | 	mov	ptra, fp
06dc8     BF 00 A0 FD | 	call	#popregs_
06dcc                 | __system___fmtstr_ret
06dcc     2D 00 64 FD | 	ret
06dd0                 | 
06dd0                 | __system___fmtnum
06dd0     07 5A 05 F6 | 	mov	COUNT_, #7
06dd4     B0 00 A0 FD | 	call	#pushregs_
06dd8     70 F0 07 F1 | 	add	ptra, #112
06ddc     04 5E 05 F1 | 	add	fp, #4
06de0     AF 76 62 FC | 	wrlong	arg01, fp
06de4     04 5E 05 F1 | 	add	fp, #4
06de8     AF 78 62 FC | 	wrlong	arg02, fp
06dec     04 5E 05 F1 | 	add	fp, #4
06df0     AF 7A 62 FC | 	wrlong	arg03, fp
06df4     04 5E 05 F1 | 	add	fp, #4
06df8     AF 7C 62 FC | 	wrlong	arg04, fp
06dfc     04 5E 05 F1 | 	add	fp, #4
06e00     AF 84 02 F6 | 	mov	local01, fp
06e04     44 5E 05 F1 | 	add	fp, #68
06e08     AF 84 62 FC | 	wrlong	local01, fp
06e0c     04 5E 05 F1 | 	add	fp, #4
06e10     AF 00 68 FC | 	wrlong	#0, fp
06e14     54 5E 85 F1 | 	sub	fp, #84
06e18     AF 84 02 FB | 	rdlong	local01, fp
06e1c     10 84 46 F0 | 	shr	local01, #16
06e20     3F 84 06 F5 | 	and	local01, #63
06e24     58 5E 05 F1 | 	add	fp, #88
06e28     AF 84 62 FC | 	wrlong	local01, fp
06e2c     58 5E 85 F1 | 	sub	fp, #88
06e30     AF 84 02 FB | 	rdlong	local01, fp
06e34     FF 84 06 F5 | 	and	local01, #255
06e38     5C 5E 05 F1 | 	add	fp, #92
06e3c     AF 84 62 FC | 	wrlong	local01, fp
06e40     5C 5E 85 F1 | 	sub	fp, #92
06e44     AF 84 02 FB | 	rdlong	local01, fp
06e48     1A 84 46 F0 | 	shr	local01, #26
06e4c     03 84 06 F5 | 	and	local01, #3
06e50     60 5E 05 F1 | 	add	fp, #96
06e54     AF 84 62 FC | 	wrlong	local01, fp
06e58     08 5E 85 F1 | 	sub	fp, #8
06e5c     AF 84 02 FB | 	rdlong	local01, fp
06e60     60 5E 85 F1 | 	sub	fp, #96
06e64     00 84 5E F2 | 	cmps	local01, #0 wcz
06e68     14 00 90 ED |  if_be	jmp	#LR__0343
06e6c     60 5E 05 F1 | 	add	fp, #96
06e70     AF 84 02 FB | 	rdlong	local01, fp
06e74     01 84 86 F1 | 	sub	local01, #1
06e78     AF 84 62 FC | 	wrlong	local01, fp
06e7c     60 5E 85 F1 | 	sub	fp, #96
06e80                 | LR__0343
06e80     64 5E 05 F1 | 	add	fp, #100
06e84     AF 86 02 FB | 	rdlong	local02, fp
06e88     64 5E 85 F1 | 	sub	fp, #100
06e8c     40 86 5E F2 | 	cmps	local02, #64 wcz
06e90     14 00 90 1D |  if_a	jmp	#LR__0344
06e94     64 5E 05 F1 | 	add	fp, #100
06e98     AF 88 02 FB | 	rdlong	local03, fp
06e9c     64 5E 85 F1 | 	sub	fp, #100
06ea0     44 8B 0A F6 | 	mov	local04, local03 wz
06ea4     0C 00 90 5D |  if_ne	jmp	#LR__0345
06ea8                 | LR__0344
06ea8     64 5E 05 F1 | 	add	fp, #100
06eac     AF 80 68 FC | 	wrlong	#64, fp
06eb0     64 5E 85 F1 | 	sub	fp, #100
06eb4                 | LR__0345
06eb4     68 5E 05 F1 | 	add	fp, #104
06eb8     AF 84 02 FB | 	rdlong	local01, fp
06ebc     68 5E 85 F1 | 	sub	fp, #104
06ec0     03 84 0E F2 | 	cmp	local01, #3 wz
06ec4     10 00 90 5D |  if_ne	jmp	#LR__0346
06ec8     68 5E 05 F1 | 	add	fp, #104
06ecc     AF 00 68 FC | 	wrlong	#0, fp
06ed0     68 5E 85 F1 | 	sub	fp, #104
06ed4     30 00 90 FD | 	jmp	#LR__0348
06ed8                 | LR__0346
06ed8     0C 5E 05 F1 | 	add	fp, #12
06edc     AF 84 02 FB | 	rdlong	local01, fp
06ee0     0C 5E 85 F1 | 	sub	fp, #12
06ee4     00 84 5E F2 | 	cmps	local01, #0 wcz
06ee8     1C 00 90 3D |  if_ae	jmp	#LR__0347
06eec     68 5E 05 F1 | 	add	fp, #104
06ef0     AF 08 68 FC | 	wrlong	#4, fp
06ef4     5C 5E 85 F1 | 	sub	fp, #92
06ef8     AF 84 02 FB | 	rdlong	local01, fp
06efc     42 85 62 F6 | 	neg	local01, local01
06f00     AF 84 62 FC | 	wrlong	local01, fp
06f04     0C 5E 85 F1 | 	sub	fp, #12
06f08                 | LR__0347
06f08                 | LR__0348
06f08     68 5E 05 F1 | 	add	fp, #104
06f0c     AF 84 0A FB | 	rdlong	local01, fp wz
06f10     68 5E 85 F1 | 	sub	fp, #104
06f14     EC 00 90 AD |  if_e	jmp	#LR__0355
06f18     5C 5E 05 F1 | 	add	fp, #92
06f1c     AF 8A 02 FB | 	rdlong	local04, fp
06f20     01 8A 06 F1 | 	add	local04, #1
06f24     AF 8A 62 FC | 	wrlong	local04, fp
06f28     04 5E 05 F1 | 	add	fp, #4
06f2c     AF 84 02 FB | 	rdlong	local01, fp
06f30     04 5E 05 F1 | 	add	fp, #4
06f34     AF 8A 02 FB | 	rdlong	local04, fp
06f38     64 5E 85 F1 | 	sub	fp, #100
06f3c     45 85 0A F2 | 	cmp	local01, local04 wz
06f40     3C 00 90 5D |  if_ne	jmp	#LR__0350
06f44     60 5E 05 F1 | 	add	fp, #96
06f48     AF 8A 02 FB | 	rdlong	local04, fp
06f4c     01 8A 86 F1 | 	sub	local04, #1
06f50     AF 8A 62 FC | 	wrlong	local04, fp
06f54     AF 84 0A FB | 	rdlong	local01, fp wz
06f58     60 5E 85 F1 | 	sub	fp, #96
06f5c     20 00 90 5D |  if_ne	jmp	#LR__0349
06f60     04 5E 05 F1 | 	add	fp, #4
06f64     AF 76 02 FB | 	rdlong	arg01, fp
06f68     04 5E 05 F1 | 	add	fp, #4
06f6c     AF 78 02 FB | 	rdlong	arg02, fp
06f70     08 5E 85 F1 | 	sub	fp, #8
06f74     23 7A 06 F6 | 	mov	arg03, #35
06f78     FC FC BF FD | 	call	#__system___fmtchar
06f7c     70 01 90 FD | 	jmp	#LR__0360
06f80                 | LR__0349
06f80                 | LR__0350
06f80     68 5E 05 F1 | 	add	fp, #104
06f84     AF 84 02 FB | 	rdlong	local01, fp
06f88     68 5E 85 F1 | 	sub	fp, #104
06f8c     02 84 0E F2 | 	cmp	local01, #2 wz
06f90     20 00 90 5D |  if_ne	jmp	#LR__0351
06f94     58 5E 05 F1 | 	add	fp, #88
06f98     AF 84 02 FB | 	rdlong	local01, fp
06f9c     42 8B 02 F6 | 	mov	local04, local01
06fa0     01 8A 06 F1 | 	add	local04, #1
06fa4     AF 8A 62 FC | 	wrlong	local04, fp
06fa8     58 5E 85 F1 | 	sub	fp, #88
06fac     42 41 48 FC | 	wrbyte	#32, local01
06fb0     50 00 90 FD | 	jmp	#LR__0354
06fb4                 | LR__0351
06fb4     68 5E 05 F1 | 	add	fp, #104
06fb8     AF 84 02 FB | 	rdlong	local01, fp
06fbc     68 5E 85 F1 | 	sub	fp, #104
06fc0     04 84 0E F2 | 	cmp	local01, #4 wz
06fc4     20 00 90 5D |  if_ne	jmp	#LR__0352
06fc8     58 5E 05 F1 | 	add	fp, #88
06fcc     AF 84 02 FB | 	rdlong	local01, fp
06fd0     42 8B 02 F6 | 	mov	local04, local01
06fd4     01 8A 06 F1 | 	add	local04, #1
06fd8     AF 8A 62 FC | 	wrlong	local04, fp
06fdc     58 5E 85 F1 | 	sub	fp, #88
06fe0     42 5B 48 FC | 	wrbyte	#45, local01
06fe4     1C 00 90 FD | 	jmp	#LR__0353
06fe8                 | LR__0352
06fe8     58 5E 05 F1 | 	add	fp, #88
06fec     AF 84 02 FB | 	rdlong	local01, fp
06ff0     42 8B 02 F6 | 	mov	local04, local01
06ff4     01 8A 06 F1 | 	add	local04, #1
06ff8     AF 8A 62 FC | 	wrlong	local04, fp
06ffc     58 5E 85 F1 | 	sub	fp, #88
07000     42 57 48 FC | 	wrbyte	#43, local01
07004                 | LR__0353
07004                 | LR__0354
07004                 | LR__0355
07004     58 5E 05 F1 | 	add	fp, #88
07008     AF 76 02 FB | 	rdlong	arg01, fp
0700c     4C 5E 85 F1 | 	sub	fp, #76
07010     AF 78 02 FB | 	rdlong	arg02, fp
07014     04 5E 05 F1 | 	add	fp, #4
07018     AF 7A 02 FB | 	rdlong	arg03, fp
0701c     50 5E 05 F1 | 	add	fp, #80
07020     AF 7C 02 FB | 	rdlong	arg04, fp
07024     00 8C 06 F6 | 	mov	local05, #0
07028     58 5E 85 F1 | 	sub	fp, #88
0702c     AF 8E 02 FB | 	rdlong	local06, fp
07030     08 5E 85 F1 | 	sub	fp, #8
07034     1D 8E 2E F4 | 	testbn	local06, #29 wz
07038     01 8C 06 56 |  if_ne	mov	local05, #1
0703c     46 7F 02 F6 | 	mov	arg05, local05
07040     C4 12 B0 FD | 	call	#__system___uitoa
07044     18 91 02 F6 | 	mov	local07, result1
07048     5C 5E 05 F1 | 	add	fp, #92
0704c     AF 84 02 FB | 	rdlong	local01, fp
07050     48 85 02 F1 | 	add	local01, local07
07054     AF 84 62 FC | 	wrlong	local01, fp
07058     08 5E 05 F1 | 	add	fp, #8
0705c     AF 8A 02 FB | 	rdlong	local04, fp
07060     64 5E 85 F1 | 	sub	fp, #100
07064     45 85 5A F2 | 	cmps	local01, local04 wcz
07068     64 00 90 ED |  if_be	jmp	#LR__0359
0706c     D0 8F 9F FE | 	loc	pa,	#(@LR__0357-@LR__0356)
07070     93 00 A0 FD | 	call	#FCACHE_LOAD_
07074                 | LR__0356
07074     64 5E 05 F1 | 	add	fp, #100
07078     AF 84 02 FB | 	rdlong	local01, fp
0707c     42 8B 02 F6 | 	mov	local04, local01
07080     01 8A 86 F1 | 	sub	local04, #1
07084     AF 8A 62 FC | 	wrlong	local04, fp
07088     64 5E 85 F1 | 	sub	fp, #100
0708c     00 84 5E F2 | 	cmps	local01, #0 wcz
07090     20 00 90 ED |  if_be	jmp	#LR__0358
07094     58 5E 05 F1 | 	add	fp, #88
07098     AF 84 02 FB | 	rdlong	local01, fp
0709c     42 8B 02 F6 | 	mov	local04, local01
070a0     01 8A 06 F1 | 	add	local04, #1
070a4     AF 8A 62 FC | 	wrlong	local04, fp
070a8     58 5E 85 F1 | 	sub	fp, #88
070ac     42 47 48 FC | 	wrbyte	#35, local01
070b0     C0 FF 9F FD | 	jmp	#LR__0356
070b4                 | LR__0357
070b4                 | LR__0358
070b4     58 5E 05 F1 | 	add	fp, #88
070b8     AF 84 02 FB | 	rdlong	local01, fp
070bc     42 8B 02 F6 | 	mov	local04, local01
070c0     01 8A 06 F1 | 	add	local04, #1
070c4     AF 8A 62 FC | 	wrlong	local04, fp
070c8     58 5E 85 F1 | 	sub	fp, #88
070cc     42 01 48 FC | 	wrbyte	#0, local01
070d0                 | LR__0359
070d0     04 5E 05 F1 | 	add	fp, #4
070d4     AF 76 02 FB | 	rdlong	arg01, fp
070d8     04 5E 05 F1 | 	add	fp, #4
070dc     AF 78 02 FB | 	rdlong	arg02, fp
070e0     0C 5E 05 F1 | 	add	fp, #12
070e4     AF 7A 02 F6 | 	mov	arg03, fp
070e8     14 5E 85 F1 | 	sub	fp, #20
070ec     E8 FB BF FD | 	call	#__system___fmtstr
070f0                 | LR__0360
070f0     AF F0 03 F6 | 	mov	ptra, fp
070f4     BF 00 A0 FD | 	call	#popregs_
070f8                 | __system___fmtnum_ret
070f8     2D 00 64 FD | 	ret
070fc                 | 
070fc                 | __system__Number_S
070fc     09 5A 05 F6 | 	mov	COUNT_, #9
07100     B0 00 A0 FD | 	call	#pushregs_
07104     3B 85 02 F6 | 	mov	local01, arg01
07108     3C 87 0A F6 | 	mov	local02, arg02 wz
0710c     3D 89 02 F6 | 	mov	local03, arg03
07110     40 00 90 5D |  if_ne	jmp	#LR__0363
07114     01 86 06 F6 | 	mov	local02, #1
07118     44 8B 02 F6 | 	mov	local04, local03
0711c     01 8C 06 F6 | 	mov	local05, #1
07120                 | LR__0361
07120     00 8E 06 F6 | 	mov	local06, #0
07124     42 8B 1A F2 | 	cmp	local04, local01 wcz
07128     01 8E 66 E6 |  if_be	neg	local06, #1
0712c     00 90 06 F6 | 	mov	local07, #0
07130     45 8D 1A F2 | 	cmp	local05, local04 wcz
07134     01 90 66 C6 |  if_b	neg	local07, #1
07138     48 8F CA F7 | 	test	local06, local07 wz
0713c     14 00 90 AD |  if_e	jmp	#LR__0362
07140     45 8D 02 F6 | 	mov	local05, local04
07144     44 8B 02 FD | 	qmul	local04, local03
07148     18 8A 62 FD | 	getqx	local04
0714c     01 86 06 F1 | 	add	local02, #1
07150     CC FF 9F FD | 	jmp	#LR__0361
07154                 | LR__0362
07154                 | LR__0363
07154     20 86 3E F3 | 	fle	local02, #32 wcz
07158     43 77 02 F6 | 	mov	arg01, local02
0715c     02 76 06 F1 | 	add	arg01, #2
07160     F4 03 B0 FD | 	call	#__system___gc_alloc_managed
07164     18 93 02 F6 | 	mov	local08, result1
07168     43 91 02 F6 | 	mov	local07, local02
0716c     49 91 02 F1 | 	add	local07, local08
07170     48 01 48 FC | 	wrbyte	#0, local07
07174     C4 8E 9F FE | 	loc	pa,	#(@LR__0365-@LR__0364)
07178     93 00 A0 FD | 	call	#FCACHE_LOAD_
0717c                 | LR__0364
0717c     00 86 1E F2 | 	cmp	local02, #0 wcz
07180     34 00 90 ED |  if_be	jmp	#LR__0366
07184     01 86 86 F1 | 	sub	local02, #1
07188     42 D9 02 F6 | 	mov	muldiva_, local01
0718c     44 DB 02 F6 | 	mov	muldivb_, local03
07190     CC 00 A0 FD | 	call	#unsdivide_
07194     6C 95 02 F6 | 	mov	local09, muldiva_
07198     6D 85 02 F6 | 	mov	local01, muldivb_
0719c     0A 94 1E F2 | 	cmp	local09, #10 wcz
071a0     30 94 06 C1 |  if_b	add	local09, #48
071a4     37 94 06 31 |  if_ae	add	local09, #55
071a8     43 91 02 F6 | 	mov	local07, local02
071ac     49 91 02 F1 | 	add	local07, local08
071b0     48 95 42 FC | 	wrbyte	local09, local07
071b4     C4 FF 9F FD | 	jmp	#LR__0364
071b8                 | LR__0365
071b8                 | LR__0366
071b8     49 31 02 F6 | 	mov	result1, local08
071bc     AF F0 03 F6 | 	mov	ptra, fp
071c0     BF 00 A0 FD | 	call	#popregs_
071c4                 | __system__Number_S_ret
071c4     2D 00 64 FD | 	ret
071c8                 | 
071c8                 | __system__String_S
071c8     05 5A 05 F6 | 	mov	COUNT_, #5
071cc     B0 00 A0 FD | 	call	#pushregs_
071d0     3B 85 02 F6 | 	mov	local01, arg01
071d4     3C 87 02 F6 | 	mov	local02, arg02
071d8     43 77 02 F6 | 	mov	arg01, local02
071dc     00 88 06 F6 | 	mov	local03, #0
071e0     2C 8E 9F FE | 	loc	pa,	#(@LR__0368-@LR__0367)
071e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
071e8                 | LR__0367
071e8     3B 8B CA FA | 	rdbyte	local04, arg01 wz
071ec     01 88 06 51 |  if_ne	add	local03, #1
071f0     01 76 06 51 |  if_ne	add	arg01, #1
071f4     F0 FF 9F 5D |  if_ne	jmp	#LR__0367
071f8                 | LR__0368
071f8     44 31 0A F6 | 	mov	result1, local03 wz
071fc     79 00 00 AF 
07200     E0 31 06 A6 |  if_e	mov	result1, ##@LR__0931
07204     4C 00 90 AD |  if_e	jmp	#LR__0370
07208     00 84 5E F2 | 	cmps	local01, #0 wcz
0720c     79 00 00 EF 
07210     E1 31 06 E6 |  if_be	mov	result1, ##@LR__0932
07214     3C 00 90 ED |  if_be	jmp	#LR__0370
07218     42 77 02 F6 | 	mov	arg01, local01
0721c     02 76 06 F1 | 	add	arg01, #2
07220     34 03 B0 FD | 	call	#__system___gc_alloc_managed
07224     18 8D 0A F6 | 	mov	local05, result1 wz
07228     24 00 90 AD |  if_e	jmp	#LR__0369
0722c     43 79 C2 FA | 	rdbyte	arg02, local02
07230     46 77 02 F6 | 	mov	arg01, local05
07234     42 7B 02 F6 | 	mov	arg03, local01
07238     A0 00 A0 FD | 	call	#\builtin_bytefill_
0723c     01 84 06 F1 | 	add	local01, #1
07240     46 85 02 F1 | 	add	local01, local05
07244     42 01 48 FC | 	wrbyte	#0, local01
07248     46 31 02 F6 | 	mov	result1, local05
0724c     04 00 90 FD | 	jmp	#LR__0370
07250                 | LR__0369
07250     46 31 02 F6 | 	mov	result1, local05
07254                 | LR__0370
07254     AF F0 03 F6 | 	mov	ptra, fp
07258     BF 00 A0 FD | 	call	#popregs_
0725c                 | __system__String_S_ret
0725c     2D 00 64 FD | 	ret
07260                 | 
07260                 | __system___gc_ptrs
07260     04 5A 05 F6 | 	mov	COUNT_, #4
07264     B0 00 A0 FD | 	call	#pushregs_
07268     02 85 02 F6 | 	mov	local01, __heap_ptr
0726c     42 87 02 F6 | 	mov	local02, local01
07270     07 00 00 FF 
07274     F8 87 06 F1 | 	add	local02, ##4088
07278     42 89 0A FB | 	rdlong	local03, local01 wz
0727c     74 00 90 5D |  if_ne	jmp	#LR__0371
07280     43 8B 02 F6 | 	mov	local04, local02
07284     42 8B 82 F1 | 	sub	local04, local01
07288     42 03 58 FC | 	wrword	#1, local01
0728c     42 89 02 F6 | 	mov	local03, local01
07290     02 88 06 F1 | 	add	local03, #2
07294     36 00 80 FF 
07298     44 21 59 FC | 	wrword	##27792, local03
0729c     42 89 02 F6 | 	mov	local03, local01
072a0     04 88 06 F1 | 	add	local03, #4
072a4     44 01 58 FC | 	wrword	#0, local03
072a8     42 89 02 F6 | 	mov	local03, local01
072ac     06 88 06 F1 | 	add	local03, #6
072b0     44 03 58 FC | 	wrword	#1, local03
072b4     10 84 06 F1 | 	add	local01, #16
072b8     45 89 52 F6 | 	abs	local03, local04 wc
072bc     04 88 46 F0 | 	shr	local03, #4
072c0     44 89 62 C6 |  if_b	neg	local03, local03
072c4     42 89 52 FC | 	wrword	local03, local01
072c8     42 89 02 F6 | 	mov	local03, local01
072cc     02 88 06 F1 | 	add	local03, #2
072d0     36 00 80 FF 
072d4     44 1F 59 FC | 	wrword	##27791, local03
072d8     42 89 02 F6 | 	mov	local03, local01
072dc     04 88 06 F1 | 	add	local03, #4
072e0     44 01 58 FC | 	wrword	#0, local03
072e4     42 89 02 F6 | 	mov	local03, local01
072e8     06 88 06 F1 | 	add	local03, #6
072ec     44 01 58 FC | 	wrword	#0, local03
072f0     10 84 86 F1 | 	sub	local01, #16
072f4                 | LR__0371
072f4     43 33 02 F6 | 	mov	result2, local02
072f8     42 31 02 F6 | 	mov	result1, local01
072fc     AF F0 03 F6 | 	mov	ptra, fp
07300     BF 00 A0 FD | 	call	#popregs_
07304                 | __system___gc_ptrs_ret
07304     2D 00 64 FD | 	ret
07308                 | 
07308                 | __system___gc_nextBlockPtr
07308     02 5A 05 F6 | 	mov	COUNT_, #2
0730c     B0 00 A0 FD | 	call	#pushregs_
07310     3B 85 02 F6 | 	mov	local01, arg01
07314     42 87 EA FA | 	rdword	local02, local01 wz
07318     10 00 90 5D |  if_ne	jmp	#LR__0372
0731c     79 00 00 FF 
07320     E2 77 06 F6 | 	mov	arg01, ##@LR__0933
07324     FC 01 B0 FD | 	call	#__system___gc_errmsg
07328     0C 00 90 FD | 	jmp	#LR__0373
0732c                 | LR__0372
0732c     42 31 02 F6 | 	mov	result1, local01
07330     04 86 66 F0 | 	shl	local02, #4
07334     43 31 02 F1 | 	add	result1, local02
07338                 | LR__0373
07338     AF F0 03 F6 | 	mov	ptra, fp
0733c     BF 00 A0 FD | 	call	#popregs_
07340                 | __system___gc_nextBlockPtr_ret
07340     2D 00 64 FD | 	ret
07344                 | 
07344                 | __system___gc_tryalloc
07344     0E 5A 05 F6 | 	mov	COUNT_, #14
07348     B0 00 A0 FD | 	call	#pushregs_
0734c     3B 85 02 F6 | 	mov	local01, arg01
07350     3C 87 02 F6 | 	mov	local02, arg02
07354     08 FF BF FD | 	call	#__system___gc_ptrs
07358     18 89 02 F6 | 	mov	local03, result1
0735c     19 8B 02 F6 | 	mov	local04, result2
07360     44 8D 02 F6 | 	mov	local05, local03
07364     00 8E 06 F6 | 	mov	local06, #0
07368     E8 8C 9F FE | 	loc	pa,	#(@LR__0375-@LR__0374)
0736c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07370                 | LR__0374
07370     46 91 02 F6 | 	mov	local07, local05
07374     44 93 02 F6 | 	mov	local08, local03
07378     46 95 02 F6 | 	mov	local09, local05
0737c     06 94 06 F1 | 	add	local09, #6
07380     4A 97 E2 FA | 	rdword	local10, local09
07384     49 77 02 F6 | 	mov	arg01, local08
07388     4B 79 0A F6 | 	mov	arg02, local10 wz
0738c     00 30 06 A6 |  if_e	mov	result1, #0
07390     04 78 66 50 |  if_ne	shl	arg02, #4
07394     3C 77 02 51 |  if_ne	add	arg01, arg02
07398     3B 31 02 56 |  if_ne	mov	result1, arg01
0739c     18 99 02 F6 | 	mov	local11, result1
073a0     4C 8D 0A F6 | 	mov	local05, local11 wz
073a4     46 93 02 56 |  if_ne	mov	local08, local05
073a8     49 8F E2 5A |  if_ne	rdword	local06, local08
073ac     00 8C 0E F2 | 	cmp	local05, #0 wz
073b0     10 00 90 AD |  if_e	jmp	#LR__0376
073b4     45 8D 5A F2 | 	cmps	local05, local04 wcz
073b8     08 00 90 3D |  if_ae	jmp	#LR__0376
073bc     47 85 5A F2 | 	cmps	local01, local06 wcz
073c0     AC FF 9F 1D |  if_a	jmp	#LR__0374
073c4                 | LR__0375
073c4                 | LR__0376
073c4     00 8C 0E F2 | 	cmp	local05, #0 wz
073c8     46 31 02 A6 |  if_e	mov	result1, local05
073cc     48 01 90 AD |  if_e	jmp	#LR__0379
073d0     46 93 02 F6 | 	mov	local08, local05
073d4     06 92 06 F1 | 	add	local08, #6
073d8     49 9B E2 FA | 	rdword	local12, local08
073dc     47 85 5A F2 | 	cmps	local01, local06 wcz
073e0     C8 00 90 3D |  if_ae	jmp	#LR__0378
073e4     46 85 52 FC | 	wrword	local01, local05
073e8     46 77 02 F6 | 	mov	arg01, local05
073ec     42 95 02 F6 | 	mov	local09, local01
073f0     04 94 66 F0 | 	shl	local09, #4
073f4     4A 77 02 F1 | 	add	arg01, local09
073f8     47 93 02 F6 | 	mov	local08, local06
073fc     42 93 82 F1 | 	sub	local08, local01
07400     3B 93 52 FC | 	wrword	local08, arg01
07404     3B 93 02 F6 | 	mov	local08, arg01
07408     02 92 06 F1 | 	add	local08, #2
0740c     36 00 80 FF 
07410     49 1F 59 FC | 	wrword	##27791, local08
07414     46 79 0A F6 | 	mov	arg02, local05 wz
07418     00 30 06 A6 |  if_e	mov	result1, #0
0741c     44 79 82 51 |  if_ne	sub	arg02, local03
07420     04 78 46 50 |  if_ne	shr	arg02, #4
07424     3C 31 02 56 |  if_ne	mov	result1, arg02
07428     3B 99 02 F6 | 	mov	local11, arg01
0742c     04 98 06 F1 | 	add	local11, #4
07430     4C 31 52 FC | 	wrword	result1, local11
07434     46 93 02 F6 | 	mov	local08, local05
07438     06 92 06 F1 | 	add	local08, #6
0743c     3B 95 02 F6 | 	mov	local09, arg01
07440     49 97 E2 FA | 	rdword	local10, local08
07444     06 94 06 F1 | 	add	local09, #6
07448     4A 97 52 FC | 	wrword	local10, local09
0744c     3B 9D 02 F6 | 	mov	local13, arg01
07450     4E 79 0A F6 | 	mov	arg02, local13 wz
07454     00 30 06 A6 |  if_e	mov	result1, #0
07458     44 79 82 51 |  if_ne	sub	arg02, local03
0745c     04 78 46 50 |  if_ne	shr	arg02, #4
07460     3C 31 02 56 |  if_ne	mov	result1, arg02
07464     18 9B 02 F6 | 	mov	local12, result1
07468     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
0746c     18 9F 0A F6 | 	mov	local14, result1 wz
07470     38 00 90 AD |  if_e	jmp	#LR__0377
07474     45 9F 5A F2 | 	cmps	local14, local04 wcz
07478     30 00 90 3D |  if_ae	jmp	#LR__0377
0747c     44 93 02 F6 | 	mov	local08, local03
07480     4E 95 02 F6 | 	mov	local09, local13
07484     49 77 02 F6 | 	mov	arg01, local08
07488     4A 79 0A F6 | 	mov	arg02, local09 wz
0748c     00 30 06 A6 |  if_e	mov	result1, #0
07490     3B 79 82 51 |  if_ne	sub	arg02, arg01
07494     04 78 46 50 |  if_ne	shr	arg02, #4
07498     3C 31 02 56 |  if_ne	mov	result1, arg02
0749c     18 97 02 F6 | 	mov	local10, result1
074a0     4F 99 02 F6 | 	mov	local11, local14
074a4     04 98 06 F1 | 	add	local11, #4
074a8     4C 97 52 FC | 	wrword	local10, local11
074ac                 | LR__0377
074ac                 | LR__0378
074ac     06 90 06 F1 | 	add	local07, #6
074b0     48 9B 52 FC | 	wrword	local12, local07
074b4     36 00 00 FF 
074b8     80 92 06 F6 | 	mov	local08, ##27776
074bc     43 93 42 F5 | 	or	local08, local02
074c0     01 30 62 FD | 	cogid	result1
074c4     18 93 42 F5 | 	or	local08, result1
074c8     46 97 02 F6 | 	mov	local10, local05
074cc     02 96 06 F1 | 	add	local10, #2
074d0     4B 93 52 FC | 	wrword	local08, local10
074d4     44 93 02 F6 | 	mov	local08, local03
074d8     08 92 06 F1 | 	add	local08, #8
074dc     46 95 02 F6 | 	mov	local09, local05
074e0     49 97 E2 FA | 	rdword	local10, local08
074e4     06 94 06 F1 | 	add	local09, #6
074e8     4A 97 52 FC | 	wrword	local10, local09
074ec     46 79 0A F6 | 	mov	arg02, local05 wz
074f0     00 30 06 A6 |  if_e	mov	result1, #0
074f4     44 79 82 51 |  if_ne	sub	arg02, local03
074f8     04 78 46 50 |  if_ne	shr	arg02, #4
074fc     3C 31 02 56 |  if_ne	mov	result1, arg02
07500     08 88 06 F1 | 	add	local03, #8
07504     44 31 52 FC | 	wrword	result1, local03
07508     46 31 02 F6 | 	mov	result1, local05
0750c     08 30 06 F1 | 	add	result1, #8
07510     00 C0 31 FF 
07514     00 30 46 F5 | 	or	result1, ##1669332992
07518                 | LR__0379
07518     AF F0 03 F6 | 	mov	ptra, fp
0751c     BF 00 A0 FD | 	call	#popregs_
07520                 | __system___gc_tryalloc_ret
07520     2D 00 64 FD | 	ret
07524                 | 
07524                 | __system___gc_errmsg
07524     02 5A 05 F6 | 	mov	COUNT_, #2
07528     B0 00 A0 FD | 	call	#pushregs_
0752c     3B 85 02 F6 | 	mov	local01, arg01
07530                 | LR__0380
07530     42 87 CA FA | 	rdbyte	local02, local01 wz
07534     01 84 06 F1 | 	add	local01, #1
07538     0C 00 90 AD |  if_e	jmp	#LR__0381
0753c     43 77 02 F6 | 	mov	arg01, local02
07540     88 F0 BF FD | 	call	#__system___tx
07544     E8 FF 9F FD | 	jmp	#LR__0380
07548                 | LR__0381
07548     00 30 06 F6 | 	mov	result1, #0
0754c     AF F0 03 F6 | 	mov	ptra, fp
07550     BF 00 A0 FD | 	call	#popregs_
07554                 | __system___gc_errmsg_ret
07554     2D 00 64 FD | 	ret
07558                 | 
07558                 | __system___gc_alloc_managed
07558     02 5A 05 F6 | 	mov	COUNT_, #2
0755c     B0 00 A0 FD | 	call	#pushregs_
07560     3B 85 02 F6 | 	mov	local01, arg01
07564     00 78 06 F6 | 	mov	arg02, #0
07568     30 00 B0 FD | 	call	#__system___gc_doalloc
0756c     18 87 0A F6 | 	mov	local02, result1 wz
07570     18 00 90 5D |  if_ne	jmp	#LR__0382
07574     00 84 5E F2 | 	cmps	local01, #0 wcz
07578     10 00 90 ED |  if_be	jmp	#LR__0382
0757c     79 00 00 FF 
07580     FE 77 06 F6 | 	mov	arg01, ##@LR__0934
07584     9C FF BF FD | 	call	#__system___gc_errmsg
07588     04 00 90 FD | 	jmp	#LR__0383
0758c                 | LR__0382
0758c     43 31 02 F6 | 	mov	result1, local02
07590                 | LR__0383
07590     AF F0 03 F6 | 	mov	ptra, fp
07594     BF 00 A0 FD | 	call	#popregs_
07598                 | __system___gc_alloc_managed_ret
07598     2D 00 64 FD | 	ret
0759c                 | 
0759c                 | __system___gc_doalloc
0759c     06 5A 05 F6 | 	mov	COUNT_, #6
075a0     B0 00 A0 FD | 	call	#pushregs_
075a4     3B 85 0A F6 | 	mov	local01, arg01 wz
075a8     3C 87 02 F6 | 	mov	local02, arg02
075ac     00 30 06 A6 |  if_e	mov	result1, #0
075b0     94 00 90 AD |  if_e	jmp	#LR__0391
075b4     17 84 06 F1 | 	add	local01, #23
075b8     0F 84 26 F5 | 	andn	local01, #15
075bc     04 84 46 F0 | 	shr	local01, #4
075c0     14 14 06 F1 | 	add	ptr___system__dat__, #20
075c4     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
075c8     14 14 86 F1 | 	sub	ptr___system__dat__, #20
075cc     18 EF BF FD | 	call	#__system___lockmem
075d0     42 77 02 F6 | 	mov	arg01, local01
075d4     43 79 02 F6 | 	mov	arg02, local02
075d8     68 FD BF FD | 	call	#__system___gc_tryalloc
075dc     18 89 0A F6 | 	mov	local03, result1 wz
075e0     14 00 90 5D |  if_ne	jmp	#LR__0384
075e4     8C 03 B0 FD | 	call	#__system___gc_docollect
075e8     42 77 02 F6 | 	mov	arg01, local01
075ec     43 79 02 F6 | 	mov	arg02, local02
075f0     50 FD BF FD | 	call	#__system___gc_tryalloc
075f4     18 89 02 F6 | 	mov	local03, result1
075f8                 | LR__0384
075f8     14 14 06 F1 | 	add	ptr___system__dat__, #20
075fc     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07600     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07604     3B 01 68 FC | 	wrlong	#0, arg01
07608     00 88 0E F2 | 	cmp	local03, #0 wz
0760c     34 00 90 AD |  if_e	jmp	#LR__0390
07610     04 84 66 F0 | 	shl	local01, #4
07614     08 84 86 F1 | 	sub	local01, #8
07618     42 8B 52 F6 | 	abs	local04, local01 wc
0761c     02 8A 46 F0 | 	shr	local04, #2
07620     45 8B 62 C6 |  if_b	neg	local04, local04
07624     45 8D 0A F6 | 	mov	local05, local04 wz
07628     44 8F 02 F6 | 	mov	local06, local03
0762c     14 00 90 AD |  if_e	jmp	#LR__0389
07630     D8 89 9F FE | 	loc	pa,	#(@LR__0387-@LR__0385)
07634     93 00 A0 FD | 	call	#FCACHE_LOAD_
07638                 | LR__0385
07638     46 05 D8 FC | 	rep	@LR__0388, local05
0763c                 | LR__0386
0763c     47 01 68 FC | 	wrlong	#0, local06
07640     04 8E 06 F1 | 	add	local06, #4
07644                 | LR__0387
07644                 | LR__0388
07644                 | LR__0389
07644                 | LR__0390
07644     44 31 02 F6 | 	mov	result1, local03
07648                 | LR__0391
07648     AF F0 03 F6 | 	mov	ptra, fp
0764c     BF 00 A0 FD | 	call	#popregs_
07650                 | __system___gc_doalloc_ret
07650     2D 00 64 FD | 	ret
07654                 | 
07654                 | __system___gc_isvalidptr
07654     3D 37 02 F6 | 	mov	_var01, arg03
07658     1B 39 02 F6 | 	mov	_var02, _var01
0765c     00 F8 7F FF 
07660     00 38 06 F5 | 	and	_var02, ##-1048576
07664     00 C0 31 FF 
07668     00 38 0E F2 | 	cmp	_var02, ##1669332992 wz
0766c     00 30 06 56 |  if_ne	mov	result1, #0
07670     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07674     08 36 86 F1 | 	sub	_var01, #8
07678     00 F8 7F FF 
0767c     00 36 26 F5 | 	andn	_var01, ##-1048576
07680     3B 37 5A F2 | 	cmps	_var01, arg01 wcz
07684     08 00 90 CD |  if_b	jmp	#LR__0392
07688     3C 37 5A F2 | 	cmps	_var01, arg02 wcz
0768c     08 00 90 CD |  if_b	jmp	#LR__0393
07690                 | LR__0392
07690     00 30 06 F6 | 	mov	result1, #0
07694     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
07698                 | LR__0393
07698     1B 39 02 F6 | 	mov	_var02, _var01
0769c     3B 39 62 F5 | 	xor	_var02, arg01
076a0     0F 38 0E F5 | 	and	_var02, #15 wz
076a4     00 30 06 56 |  if_ne	mov	result1, #0
076a8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
076ac     1B 39 02 F6 | 	mov	_var02, _var01
076b0     02 38 06 F1 | 	add	_var02, #2
076b4     1C 39 E2 FA | 	rdword	_var02, _var02
076b8     7F 00 00 FF 
076bc     C0 39 06 F5 | 	and	_var02, ##65472
076c0     36 00 00 FF 
076c4     80 38 0E F2 | 	cmp	_var02, ##27776 wz
076c8     00 30 06 56 |  if_ne	mov	result1, #0
076cc     1B 31 02 A6 |  if_e	mov	result1, _var01
076d0                 | __system___gc_isvalidptr_ret
076d0     2D 00 64 FD | 	ret
076d4                 | 
076d4                 | __system___gc_free
076d4     01 5A 05 F6 | 	mov	COUNT_, #1
076d8     B0 00 A0 FD | 	call	#pushregs_
076dc     3B 85 02 F6 | 	mov	local01, arg01
076e0     7C FB BF FD | 	call	#__system___gc_ptrs
076e4     18 77 02 F6 | 	mov	arg01, result1
076e8     19 79 02 F6 | 	mov	arg02, result2
076ec     42 7B 02 F6 | 	mov	arg03, local01
076f0     60 FF BF FD | 	call	#__system___gc_isvalidptr
076f4     18 85 0A F6 | 	mov	local01, result1 wz
076f8     28 00 90 AD |  if_e	jmp	#LR__0394
076fc     14 14 06 F1 | 	add	ptr___system__dat__, #20
07700     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07704     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07708     DC ED BF FD | 	call	#__system___lockmem
0770c     42 77 02 F6 | 	mov	arg01, local01
07710     1C 00 B0 FD | 	call	#__system___gc_dofree
07714     14 14 06 F1 | 	add	ptr___system__dat__, #20
07718     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
0771c     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07720     3B 01 68 FC | 	wrlong	#0, arg01
07724                 | LR__0394
07724     AF F0 03 F6 | 	mov	ptra, fp
07728     BF 00 A0 FD | 	call	#popregs_
0772c                 | __system___gc_free_ret
0772c     2D 00 64 FD | 	ret
07730                 | 
07730                 | __system___gc_dofree
07730     0D 5A 05 F6 | 	mov	COUNT_, #13
07734     B0 00 A0 FD | 	call	#pushregs_
07738     3B 85 02 F6 | 	mov	local01, arg01
0773c     20 FB BF FD | 	call	#__system___gc_ptrs
07740     18 87 02 F6 | 	mov	local02, result1
07744     19 89 02 F6 | 	mov	local03, result2
07748     42 8B 02 F6 | 	mov	local04, local01
0774c     02 8A 06 F1 | 	add	local04, #2
07750     36 00 80 FF 
07754     45 1F 59 FC | 	wrword	##27791, local04
07758     42 8D 02 F6 | 	mov	local05, local01
0775c     42 77 02 F6 | 	mov	arg01, local01
07760     A4 FB BF FD | 	call	#__system___gc_nextBlockPtr
07764     18 8F 02 F6 | 	mov	local06, result1
07768     E0 88 9F FE | 	loc	pa,	#(@LR__0396-@LR__0395)
0776c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07770                 | LR__0395
07770     04 8C 06 F1 | 	add	local05, #4
07774     46 79 EA FA | 	rdword	arg02, local05 wz
07778     43 77 02 F6 | 	mov	arg01, local02
0777c     00 30 06 A6 |  if_e	mov	result1, #0
07780     04 78 66 50 |  if_ne	shl	arg02, #4
07784     3C 77 02 51 |  if_ne	add	arg01, arg02
07788     3B 31 02 56 |  if_ne	mov	result1, arg01
0778c     18 8D 0A F6 | 	mov	local05, result1 wz
07790     28 00 90 AD |  if_e	jmp	#LR__0397
07794     46 77 02 F6 | 	mov	arg01, local05
07798     00 90 06 F6 | 	mov	local07, #0
0779c     02 76 06 F1 | 	add	arg01, #2
077a0     3B 93 E2 FA | 	rdword	local08, arg01
077a4     36 00 00 FF 
077a8     8F 92 0E F2 | 	cmp	local08, ##27791 wz
077ac     01 90 66 A6 |  if_e	neg	local07, #1
077b0     48 31 02 F6 | 	mov	result1, local07
077b4     18 95 0A F6 | 	mov	local09, result1 wz
077b8     B4 FF 9F AD |  if_e	jmp	#LR__0395
077bc                 | LR__0396
077bc                 | LR__0397
077bc     00 8C 0E F2 | 	cmp	local05, #0 wz
077c0     43 8D 02 A6 |  if_e	mov	local05, local02
077c4     46 8B 02 F6 | 	mov	local04, local05
077c8     06 8A 06 F1 | 	add	local04, #6
077cc     42 95 02 F6 | 	mov	local09, local01
077d0     45 97 E2 FA | 	rdword	local10, local04
077d4     06 94 06 F1 | 	add	local09, #6
077d8     4A 97 52 FC | 	wrword	local10, local09
077dc     42 79 0A F6 | 	mov	arg02, local01 wz
077e0     00 30 06 A6 |  if_e	mov	result1, #0
077e4     43 79 82 51 |  if_ne	sub	arg02, local02
077e8     04 78 46 50 |  if_ne	shr	arg02, #4
077ec     3C 31 02 56 |  if_ne	mov	result1, arg02
077f0     18 97 02 F6 | 	mov	local10, result1
077f4     46 99 02 F6 | 	mov	local11, local05
077f8     06 98 06 F1 | 	add	local11, #6
077fc     4C 97 52 FC | 	wrword	local10, local11
07800     43 8D 0A F2 | 	cmp	local05, local02 wz
07804     84 00 90 AD |  if_e	jmp	#LR__0400
07808     46 77 02 F6 | 	mov	arg01, local05
0780c     F8 FA BF FD | 	call	#__system___gc_nextBlockPtr
07810     42 31 0A F2 | 	cmp	result1, local01 wz
07814     74 00 90 5D |  if_ne	jmp	#LR__0399
07818     46 8B E2 FA | 	rdword	local04, local05
0781c     42 99 E2 FA | 	rdword	local11, local01
07820     4C 8B 02 F1 | 	add	local04, local11
07824     46 8B 52 FC | 	wrword	local04, local05
07828     42 8B 02 F6 | 	mov	local04, local01
0782c     02 8A 06 F1 | 	add	local04, #2
07830     45 01 58 FC | 	wrword	#0, local04
07834     42 77 02 F6 | 	mov	arg01, local01
07838     CC FA BF FD | 	call	#__system___gc_nextBlockPtr
0783c     18 8F 02 F6 | 	mov	local06, result1
07840     44 8F 5A F2 | 	cmps	local06, local03 wcz
07844     20 00 90 3D |  if_ae	jmp	#LR__0398
07848     46 79 0A F6 | 	mov	arg02, local05 wz
0784c     00 30 06 A6 |  if_e	mov	result1, #0
07850     43 79 82 51 |  if_ne	sub	arg02, local02
07854     04 78 46 50 |  if_ne	shr	arg02, #4
07858     3C 31 02 56 |  if_ne	mov	result1, arg02
0785c     47 99 02 F6 | 	mov	local11, local06
07860     04 98 06 F1 | 	add	local11, #4
07864     4C 31 52 FC | 	wrword	result1, local11
07868                 | LR__0398
07868     42 8B 02 F6 | 	mov	local04, local01
0786c     06 8A 06 F1 | 	add	local04, #6
07870     46 95 02 F6 | 	mov	local09, local05
07874     45 97 E2 FA | 	rdword	local10, local04
07878     06 94 06 F1 | 	add	local09, #6
0787c     4A 97 52 FC | 	wrword	local10, local09
07880     06 84 06 F1 | 	add	local01, #6
07884     42 01 58 FC | 	wrword	#0, local01
07888     46 85 02 F6 | 	mov	local01, local05
0788c                 | LR__0399
0788c                 | LR__0400
0788c     42 77 02 F6 | 	mov	arg01, local01
07890     74 FA BF FD | 	call	#__system___gc_nextBlockPtr
07894     18 9B 0A F6 | 	mov	local12, result1 wz
07898     C8 00 90 AD |  if_e	jmp	#LR__0402
0789c     44 9B 5A F2 | 	cmps	local12, local03 wcz
078a0     C0 00 90 3D |  if_ae	jmp	#LR__0402
078a4     4D 77 02 F6 | 	mov	arg01, local12
078a8     00 90 06 F6 | 	mov	local07, #0
078ac     02 76 06 F1 | 	add	arg01, #2
078b0     3B 93 E2 FA | 	rdword	local08, arg01
078b4     36 00 00 FF 
078b8     8F 92 0E F2 | 	cmp	local08, ##27791 wz
078bc     01 90 66 A6 |  if_e	neg	local07, #1
078c0     48 31 0A F6 | 	mov	result1, local07 wz
078c4     9C 00 90 AD |  if_e	jmp	#LR__0402
078c8     42 8D 02 F6 | 	mov	local05, local01
078cc     46 8B E2 FA | 	rdword	local04, local05
078d0     4D 85 02 F6 | 	mov	local01, local12
078d4     42 99 E2 FA | 	rdword	local11, local01
078d8     4C 8B 02 F1 | 	add	local04, local11
078dc     46 9D 02 F6 | 	mov	local13, local05
078e0     4E 8B 52 FC | 	wrword	local04, local13
078e4     42 8B 02 F6 | 	mov	local04, local01
078e8     06 8A 06 F1 | 	add	local04, #6
078ec     46 95 02 F6 | 	mov	local09, local05
078f0     45 97 E2 FA | 	rdword	local10, local04
078f4     06 94 06 F1 | 	add	local09, #6
078f8     4A 97 52 FC | 	wrword	local10, local09
078fc     42 8B 02 F6 | 	mov	local04, local01
07900     02 8A 06 F1 | 	add	local04, #2
07904     45 55 59 FC | 	wrword	#170, local04
07908     42 8B 02 F6 | 	mov	local04, local01
0790c     06 8A 06 F1 | 	add	local04, #6
07910     45 01 58 FC | 	wrword	#0, local04
07914     42 8B 02 F6 | 	mov	local04, local01
07918     45 77 02 F6 | 	mov	arg01, local04
0791c     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07920     18 95 02 F6 | 	mov	local09, result1
07924     4A 8F 0A F6 | 	mov	local06, local09 wz
07928     38 00 90 AD |  if_e	jmp	#LR__0401
0792c     44 8F 5A F2 | 	cmps	local06, local03 wcz
07930     30 00 90 3D |  if_ae	jmp	#LR__0401
07934     43 8B 02 F6 | 	mov	local04, local02
07938     46 95 02 F6 | 	mov	local09, local05
0793c     45 77 02 F6 | 	mov	arg01, local04
07940     4A 79 0A F6 | 	mov	arg02, local09 wz
07944     00 30 06 A6 |  if_e	mov	result1, #0
07948     3B 79 82 51 |  if_ne	sub	arg02, arg01
0794c     04 78 46 50 |  if_ne	shr	arg02, #4
07950     3C 31 02 56 |  if_ne	mov	result1, arg02
07954     18 97 02 F6 | 	mov	local10, result1
07958     47 99 02 F6 | 	mov	local11, local06
0795c     04 98 06 F1 | 	add	local11, #4
07960     4C 97 52 FC | 	wrword	local10, local11
07964                 | LR__0401
07964                 | LR__0402
07964     47 31 02 F6 | 	mov	result1, local06
07968     AF F0 03 F6 | 	mov	ptra, fp
0796c     BF 00 A0 FD | 	call	#popregs_
07970                 | __system___gc_dofree_ret
07970     2D 00 64 FD | 	ret
07974                 | 
07974                 | __system___gc_docollect
07974     09 5A 05 F6 | 	mov	COUNT_, #9
07978     B0 00 A0 FD | 	call	#pushregs_
0797c     E0 F8 BF FD | 	call	#__system___gc_ptrs
07980     19 85 02 F6 | 	mov	local01, result2
07984     18 87 02 F6 | 	mov	local02, result1
07988     43 77 02 F6 | 	mov	arg01, local02
0798c     78 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07990     18 89 0A F6 | 	mov	local03, result1 wz
07994     01 30 62 FD | 	cogid	result1
07998     18 8B 02 F6 | 	mov	local04, result1
0799c     34 00 90 AD |  if_e	jmp	#LR__0404
079a0                 | LR__0403
079a0     42 89 5A F2 | 	cmps	local03, local01 wcz
079a4     2C 00 90 3D |  if_ae	jmp	#LR__0404
079a8     44 8D 02 F6 | 	mov	local05, local03
079ac     02 8C 06 F1 | 	add	local05, #2
079b0     46 8F E2 FA | 	rdword	local06, local05
079b4     20 8E 26 F5 | 	andn	local06, #32
079b8     44 91 02 F6 | 	mov	local07, local03
079bc     02 90 06 F1 | 	add	local07, #2
079c0     48 8F 52 FC | 	wrword	local06, local07
079c4     44 77 02 F6 | 	mov	arg01, local03
079c8     3C F9 BF FD | 	call	#__system___gc_nextBlockPtr
079cc     18 89 0A F6 | 	mov	local03, result1 wz
079d0     CC FF 9F 5D |  if_ne	jmp	#LR__0403
079d4                 | LR__0404
079d4     00 8E 06 F6 | 	mov	local06, #0
079d8     00 76 06 F6 | 	mov	arg01, #0
079dc     A0 EA BF FD | 	call	#__system____topofstack
079e0     18 91 02 F6 | 	mov	local07, result1
079e4     47 77 02 F6 | 	mov	arg01, local06
079e8     48 79 02 F6 | 	mov	arg02, local07
079ec     A0 00 B0 FD | 	call	#__system___gc_markhub
079f0     34 01 B0 FD | 	call	#__system___gc_markcog
079f4     43 77 02 F6 | 	mov	arg01, local02
079f8     0C F9 BF FD | 	call	#__system___gc_nextBlockPtr
079fc     18 93 0A F6 | 	mov	local08, result1 wz
07a00     10 00 90 5D |  if_ne	jmp	#LR__0405
07a04     7A 00 00 FF 
07a08     1B 76 06 F6 | 	mov	arg01, ##@LR__0935
07a0c     14 FB BF FD | 	call	#__system___gc_errmsg
07a10     70 00 90 FD | 	jmp	#LR__0411
07a14                 | LR__0405
07a14                 | LR__0406
07a14     49 89 02 F6 | 	mov	local03, local08
07a18     44 77 02 F6 | 	mov	arg01, local03
07a1c     E8 F8 BF FD | 	call	#__system___gc_nextBlockPtr
07a20     18 93 02 F6 | 	mov	local08, result1
07a24     44 8F 02 F6 | 	mov	local06, local03
07a28     02 8E 06 F1 | 	add	local06, #2
07a2c     47 95 E2 FA | 	rdword	local09, local06
07a30     20 94 CE F7 | 	test	local09, #32 wz
07a34     3C 00 90 5D |  if_ne	jmp	#LR__0409
07a38     4A 8D 02 F6 | 	mov	local05, local09
07a3c     10 8C 0E F5 | 	and	local05, #16 wz
07a40     30 00 90 5D |  if_ne	jmp	#LR__0409
07a44     4A 8F 02 F6 | 	mov	local06, local09
07a48     0F 8E 06 F5 | 	and	local06, #15
07a4c     47 95 02 F6 | 	mov	local09, local06
07a50     45 95 0A F2 | 	cmp	local09, local04 wz
07a54     08 00 90 AD |  if_e	jmp	#LR__0407
07a58     0E 94 0E F2 | 	cmp	local09, #14 wz
07a5c     14 00 90 5D |  if_ne	jmp	#LR__0408
07a60                 | LR__0407
07a60     44 8F 02 F6 | 	mov	local06, local03
07a64     47 77 02 F6 | 	mov	arg01, local06
07a68     C4 FC BF FD | 	call	#__system___gc_dofree
07a6c     18 8D 02 F6 | 	mov	local05, result1
07a70     46 93 02 F6 | 	mov	local08, local05
07a74                 | LR__0408
07a74                 | LR__0409
07a74     00 92 0E F2 | 	cmp	local08, #0 wz
07a78     08 00 90 AD |  if_e	jmp	#LR__0410
07a7c     42 93 5A F2 | 	cmps	local08, local01 wcz
07a80     90 FF 9F CD |  if_b	jmp	#LR__0406
07a84                 | LR__0410
07a84                 | LR__0411
07a84     AF F0 03 F6 | 	mov	ptra, fp
07a88     BF 00 A0 FD | 	call	#popregs_
07a8c                 | __system___gc_docollect_ret
07a8c     2D 00 64 FD | 	ret
07a90                 | 
07a90                 | __system___gc_markhub
07a90     0A 5A 05 F6 | 	mov	COUNT_, #10
07a94     B0 00 A0 FD | 	call	#pushregs_
07a98     3B 85 02 F6 | 	mov	local01, arg01
07a9c     3C 87 02 F6 | 	mov	local02, arg02
07aa0     BC F7 BF FD | 	call	#__system___gc_ptrs
07aa4     18 89 02 F6 | 	mov	local03, result1
07aa8     19 8B 02 F6 | 	mov	local04, result2
07aac                 | LR__0412
07aac     43 85 5A F2 | 	cmps	local01, local02 wcz
07ab0     68 00 90 3D |  if_ae	jmp	#LR__0413
07ab4     42 7B 02 FB | 	rdlong	arg03, local01
07ab8     04 84 06 F1 | 	add	local01, #4
07abc     44 77 02 F6 | 	mov	arg01, local03
07ac0     45 79 02 F6 | 	mov	arg02, local04
07ac4     8C FB BF FD | 	call	#__system___gc_isvalidptr
07ac8     18 8D 0A F6 | 	mov	local05, result1 wz
07acc     DC FF 9F AD |  if_e	jmp	#LR__0412
07ad0     46 77 02 F6 | 	mov	arg01, local05
07ad4     00 8E 06 F6 | 	mov	local06, #0
07ad8     02 76 06 F1 | 	add	arg01, #2
07adc     3B 91 E2 FA | 	rdword	local07, arg01
07ae0     36 00 00 FF 
07ae4     8F 90 0E F2 | 	cmp	local07, ##27791 wz
07ae8     01 8E 66 A6 |  if_e	neg	local06, #1
07aec     47 31 02 F6 | 	mov	result1, local06
07af0     18 93 0A F6 | 	mov	local08, result1 wz
07af4     B4 FF 9F 5D |  if_ne	jmp	#LR__0412
07af8     46 95 02 F6 | 	mov	local09, local05
07afc     02 94 06 F1 | 	add	local09, #2
07b00     4A 97 E2 FA | 	rdword	local10, local09
07b04     0F 96 26 F5 | 	andn	local10, #15
07b08     2E 96 46 F5 | 	or	local10, #46
07b0c     46 95 02 F6 | 	mov	local09, local05
07b10     02 94 06 F1 | 	add	local09, #2
07b14     4A 97 52 FC | 	wrword	local10, local09
07b18     90 FF 9F FD | 	jmp	#LR__0412
07b1c                 | LR__0413
07b1c     AF F0 03 F6 | 	mov	ptra, fp
07b20     BF 00 A0 FD | 	call	#popregs_
07b24                 | __system___gc_markhub_ret
07b24     2D 00 64 FD | 	ret
07b28                 | 
07b28                 | __system___gc_markcog
07b28     06 5A 05 F6 | 	mov	COUNT_, #6
07b2c     B0 00 A0 FD | 	call	#pushregs_
07b30     2C F7 BF FD | 	call	#__system___gc_ptrs
07b34     18 85 02 F6 | 	mov	local01, result1
07b38     19 87 02 F6 | 	mov	local02, result2
07b3c     00 88 06 F6 | 	mov	local03, #0
07b40                 | LR__0414
07b40     F0 8B 06 F6 | 	mov	local04, #496
07b44     44 8B 82 F1 | 	sub	local04, local03
07b48     F0 8B 06 F1 | 	add	local04, #496
07b4c                 | 	'.live	local04
07b4c     00 8A 96 F9 | 	alts	local04, #0
07b50     45 8D 02 F6 | 	mov	local05, local04
07b54     42 77 02 F6 | 	mov	arg01, local01
07b58     43 79 02 F6 | 	mov	arg02, local02
07b5c     46 7B 02 F6 | 	mov	arg03, local05
07b60     F0 FA BF FD | 	call	#__system___gc_isvalidptr
07b64     18 8D 0A F6 | 	mov	local05, result1 wz
07b68     18 00 90 AD |  if_e	jmp	#LR__0415
07b6c     46 8F 02 F6 | 	mov	local06, local05
07b70     02 8E 06 F1 | 	add	local06, #2
07b74     47 8B E2 FA | 	rdword	local04, local06
07b78     20 8A 46 F5 | 	or	local04, #32
07b7c     02 8C 06 F1 | 	add	local05, #2
07b80     46 8B 52 FC | 	wrword	local04, local05
07b84                 | LR__0415
07b84     01 88 06 F1 | 	add	local03, #1
07b88     F0 89 5E F2 | 	cmps	local03, #496 wcz
07b8c     B0 FF 9F CD |  if_b	jmp	#LR__0414
07b90     AF F0 03 F6 | 	mov	ptra, fp
07b94     BF 00 A0 FD | 	call	#popregs_
07b98                 | __system___gc_markcog_ret
07b98     2D 00 64 FD | 	ret
07b9c                 | 
07b9c                 | __system___closeraw
07b9c     06 5A 05 F6 | 	mov	COUNT_, #6
07ba0     B0 00 A0 FD | 	call	#pushregs_
07ba4     3B 85 02 F6 | 	mov	local01, arg01
07ba8     00 86 06 F6 | 	mov	local02, #0
07bac     08 84 06 F1 | 	add	local01, #8
07bb0     42 89 0A FB | 	rdlong	local03, local01 wz
07bb4     08 84 86 F1 | 	sub	local01, #8
07bb8     1C 00 90 5D |  if_ne	jmp	#LR__0416
07bbc     01 00 00 FF 
07bc0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07bc4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07bc8     01 00 00 FF 
07bcc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07bd0     01 30 66 F6 | 	neg	result1, #1
07bd4     90 00 90 FD | 	jmp	#LR__0419
07bd8                 | LR__0416
07bd8     28 84 06 F1 | 	add	local01, #40
07bdc     42 89 0A FB | 	rdlong	local03, local01 wz
07be0     28 84 86 F1 | 	sub	local01, #40
07be4     2C 00 90 AD |  if_e	jmp	#LR__0417
07be8     28 84 06 F1 | 	add	local01, #40
07bec     42 89 02 FB | 	rdlong	local03, local01
07bf0     28 84 86 F1 | 	sub	local01, #40
07bf4     44 8B 02 FB | 	rdlong	local04, local03
07bf8     04 88 06 F1 | 	add	local03, #4
07bfc     44 8D 02 FB | 	rdlong	local05, local03
07c00     42 77 02 F6 | 	mov	arg01, local01
07c04     07 8F 02 F6 | 	mov	local06, objptr
07c08     45 0F 02 F6 | 	mov	objptr, local04
07c0c     2D 8C 62 FD | 	call	local05
07c10     47 0F 02 F6 | 	mov	objptr, local06
07c14                 | LR__0417
07c14     20 84 06 F1 | 	add	local01, #32
07c18     42 89 0A FB | 	rdlong	local03, local01 wz
07c1c     20 84 86 F1 | 	sub	local01, #32
07c20     30 00 90 AD |  if_e	jmp	#LR__0418
07c24     20 84 06 F1 | 	add	local01, #32
07c28     42 89 02 FB | 	rdlong	local03, local01
07c2c     20 84 86 F1 | 	sub	local01, #32
07c30     44 8B 02 FB | 	rdlong	local04, local03
07c34     04 88 06 F1 | 	add	local03, #4
07c38     44 8D 02 FB | 	rdlong	local05, local03
07c3c     42 77 02 F6 | 	mov	arg01, local01
07c40     07 8F 02 F6 | 	mov	local06, objptr
07c44     45 0F 02 F6 | 	mov	objptr, local04
07c48     2D 8C 62 FD | 	call	local05
07c4c     47 0F 02 F6 | 	mov	objptr, local06
07c50     18 87 02 F6 | 	mov	local02, result1
07c54                 | LR__0418
07c54     42 77 02 F6 | 	mov	arg01, local01
07c58     00 78 06 F6 | 	mov	arg02, #0
07c5c     30 7A 06 F6 | 	mov	arg03, #48
07c60     A0 00 A0 FD | 	call	#\builtin_bytefill_
07c64     43 31 02 F6 | 	mov	result1, local02
07c68                 | LR__0419
07c68     AF F0 03 F6 | 	mov	ptra, fp
07c6c     BF 00 A0 FD | 	call	#popregs_
07c70                 | __system___closeraw_ret
07c70     2D 00 64 FD | 	ret
07c74                 | 
07c74                 | __system___vfs_open_sdcardx
07c74     06 5A 05 F6 | 	mov	COUNT_, #6
07c78     B0 00 A0 FD | 	call	#pushregs_
07c7c     01 00 00 FF 
07c80     44 14 06 F1 | 	add	ptr___system__dat__, ##580
07c84     3B 85 02 F6 | 	mov	local01, arg01
07c88     3C 87 02 F6 | 	mov	local02, arg02
07c8c     3D 89 02 F6 | 	mov	local03, arg03
07c90     3E 7F 02 F6 | 	mov	arg05, arg04
07c94     00 76 06 F6 | 	mov	arg01, #0
07c98     42 79 02 F6 | 	mov	arg02, local01
07c9c     43 7B 02 F6 | 	mov	arg03, local02
07ca0     44 7D 02 F6 | 	mov	arg04, local03
07ca4     07 8B 02 F6 | 	mov	local04, objptr
07ca8     0A 0F 02 F6 | 	mov	objptr, ptr___system__dat__
07cac     01 00 00 FF 
07cb0     44 14 86 F1 | 	sub	ptr___system__dat__, ##580
07cb4     EC 0F B0 FD | 	call	#_ff_cc_disk_setpins
07cb8     45 0F 02 F6 | 	mov	objptr, local04
07cbc     18 8D 0A F6 | 	mov	local05, result1 wz
07cc0     38 00 90 5D |  if_ne	jmp	#LR__0420
07cc4     01 00 00 FF 
07cc8     44 14 06 F1 | 	add	ptr___system__dat__, ##580
07ccc     0A 8F 02 F6 | 	mov	local06, ptr___system__dat__
07cd0     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07cd4     01 00 00 FF 
07cd8     44 14 86 F1 | 	sub	ptr___system__dat__, ##580
07cdc     7A 00 00 FF 
07ce0     34 78 06 F6 | 	mov	arg02, ##@LR__0936
07ce4     00 7A 06 F6 | 	mov	arg03, #0
07ce8     07 8B 02 F6 | 	mov	local04, objptr
07cec     47 0F 02 F6 | 	mov	objptr, local06
07cf0     E4 34 B0 FD | 	call	#_ff_cc_f_mount
07cf4     45 0F 02 F6 | 	mov	objptr, local04
07cf8     18 8D 02 F6 | 	mov	local05, result1
07cfc                 | LR__0420
07cfc     00 8C 0E F2 | 	cmp	local05, #0 wz
07d00     20 00 90 AD |  if_e	jmp	#LR__0421
07d04     46 77 6A F6 | 	neg	arg01, local05 wz
07d08     01 00 00 FF 
07d0c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07d10     0A 77 62 FC | 	wrlong	arg01, ptr___system__dat__
07d14     01 00 00 FF 
07d18     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07d1c     00 30 06 F6 | 	mov	result1, #0
07d20     0C 00 90 FD | 	jmp	#LR__0422
07d24                 | LR__0421
07d24                 | ' get_vfs()
07d24                 | ' {
07d24                 | '     return &fat_vfs;
07d24     B4 1A 06 F1 | 	add	ptr__ff_cc_dat__, #180
07d28     0D 31 02 F6 | 	mov	result1, ptr__ff_cc_dat__
07d2c     B4 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #180
07d30                 | LR__0422
07d30     AF F0 03 F6 | 	mov	ptra, fp
07d34     BF 00 A0 FD | 	call	#popregs_
07d38                 | __system___vfs_open_sdcardx_ret
07d38     2D 00 64 FD | 	ret
07d3c                 | 
07d3c                 | __system____default_getc
07d3c                 | __system____default_getc_ret
07d3c     2D 00 64 FD | 	ret
07d40                 | 
07d40                 | __system____default_putc
07d40                 | __system____default_putc_ret
07d40     2D 00 64 FD | 	ret
07d44                 | 
07d44                 | __system____default_putc_terminal
07d44                 | __system____default_putc_terminal_ret
07d44     2D 00 64 FD | 	ret
07d48                 | 
07d48                 | __system____default_flush
07d48                 | __system____default_flush_ret
07d48     2D 00 64 FD | 	ret
07d4c                 | 
07d4c                 | __system__stat
07d4c     09 5A 05 F6 | 	mov	COUNT_, #9
07d50     B0 00 A0 FD | 	call	#pushregs_
07d54     3B 85 02 F6 | 	mov	local01, arg01
07d58     3C 87 02 F6 | 	mov	local02, arg02
07d5c     38 15 06 F1 | 	add	ptr___system__dat__, #312
07d60     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
07d64     38 15 86 F1 | 	sub	ptr___system__dat__, #312
07d68     18 89 02 F6 | 	mov	local03, result1
07d6c     44 77 02 F6 | 	mov	arg01, local03
07d70     42 79 02 F6 | 	mov	arg02, local01
07d74     00 7A 06 F6 | 	mov	arg03, #0
07d78     84 EB BF FD | 	call	#__system____getvfsforfile
07d7c     18 8B 0A F6 | 	mov	local04, result1 wz
07d80     14 00 90 AD |  if_e	jmp	#LR__0423
07d84     2C 8A 06 F1 | 	add	local04, #44
07d88     45 8D 02 FB | 	rdlong	local05, local04
07d8c     2C 8A 86 F1 | 	sub	local04, #44
07d90     46 8F 0A F6 | 	mov	local06, local05 wz
07d94     1C 00 90 5D |  if_ne	jmp	#LR__0424
07d98                 | LR__0423
07d98     01 00 00 FF 
07d9c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07da0     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07da4     01 00 00 FF 
07da8     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07dac     01 30 66 F6 | 	neg	result1, #1
07db0     44 00 90 FD | 	jmp	#LR__0425
07db4                 | LR__0424
07db4     43 77 02 F6 | 	mov	arg01, local02
07db8     00 78 06 F6 | 	mov	arg02, #0
07dbc     30 7A 06 F6 | 	mov	arg03, #48
07dc0     3B 91 02 F6 | 	mov	local07, arg01
07dc4     A0 00 A0 FD | 	call	#\builtin_bytefill_
07dc8     48 31 02 F6 | 	mov	result1, local07
07dcc     2C 8A 06 F1 | 	add	local04, #44
07dd0     45 8F 02 FB | 	rdlong	local06, local04
07dd4     47 8D 02 FB | 	rdlong	local05, local06
07dd8     04 8E 06 F1 | 	add	local06, #4
07ddc     47 93 02 FB | 	rdlong	local08, local06
07de0     44 77 02 F6 | 	mov	arg01, local03
07de4     43 79 02 F6 | 	mov	arg02, local02
07de8     07 95 02 F6 | 	mov	local09, objptr
07dec     46 0F 02 F6 | 	mov	objptr, local05
07df0     2D 92 62 FD | 	call	local08
07df4     4A 0F 02 F6 | 	mov	objptr, local09
07df8                 | LR__0425
07df8     AF F0 03 F6 | 	mov	ptra, fp
07dfc     BF 00 A0 FD | 	call	#popregs_
07e00                 | __system__stat_ret
07e00     2D 00 64 FD | 	ret
07e04                 | 
07e04                 | __system__close
07e04     01 5A 05 F6 | 	mov	COUNT_, #1
07e08     B0 00 A0 FD | 	call	#pushregs_
07e0c     3B 85 02 F6 | 	mov	local01, arg01
07e10     0A 84 1E F2 | 	cmp	local01, #10 wcz
07e14     1C 00 90 CD |  if_b	jmp	#LR__0426
07e18     01 00 00 FF 
07e1c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07e20     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07e24     01 00 00 FF 
07e28     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07e2c     01 30 66 F6 | 	neg	result1, #1
07e30     28 00 90 FD | 	jmp	#LR__0427
07e34                 | LR__0426
07e34     42 77 02 F6 | 	mov	arg01, local01
07e38     01 76 66 F0 | 	shl	arg01, #1
07e3c     42 77 02 F1 | 	add	arg01, local01
07e40     04 76 66 F0 | 	shl	arg01, #4
07e44     02 00 00 FF 
07e48     74 14 06 F1 | 	add	ptr___system__dat__, ##1140
07e4c     0A 77 02 F1 | 	add	arg01, ptr___system__dat__
07e50     02 00 00 FF 
07e54     74 14 86 F1 | 	sub	ptr___system__dat__, ##1140
07e58     40 FD BF FD | 	call	#__system___closeraw
07e5c                 | LR__0427
07e5c     AF F0 03 F6 | 	mov	ptra, fp
07e60     BF 00 A0 FD | 	call	#popregs_
07e64                 | __system__close_ret
07e64     2D 00 64 FD | 	ret
07e68                 | 
07e68                 | __system__getcwd
07e68     06 5A 05 F6 | 	mov	COUNT_, #6
07e6c     B0 00 A0 FD | 	call	#pushregs_
07e70     3B 85 02 F6 | 	mov	local01, arg01
07e74     3C 87 02 F6 | 	mov	local02, arg02
07e78     38 14 06 F1 | 	add	ptr___system__dat__, #56
07e7c     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07e80     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07e84     00 88 06 F6 | 	mov	local03, #0
07e88     84 81 9F FE | 	loc	pa,	#(@LR__0429-@LR__0428)
07e8c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07e90                 | LR__0428
07e90     3B 8B CA FA | 	rdbyte	local04, arg01 wz
07e94     01 88 06 51 |  if_ne	add	local03, #1
07e98     01 76 06 51 |  if_ne	add	arg01, #1
07e9c     F0 FF 9F 5D |  if_ne	jmp	#LR__0428
07ea0                 | LR__0429
07ea0     44 31 02 F6 | 	mov	result1, local03
07ea4     02 8C 06 F6 | 	mov	local05, #2
07ea8     18 8D 02 F1 | 	add	local05, result1
07eac     43 8D 1A F2 | 	cmp	local05, local02 wcz
07eb0     1C 00 90 ED |  if_be	jmp	#LR__0430
07eb4     01 00 00 FF 
07eb8     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07ebc     0A 05 68 FC | 	wrlong	#2, ptr___system__dat__
07ec0     01 00 00 FF 
07ec4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07ec8     00 30 06 F6 | 	mov	result1, #0
07ecc     44 00 90 FD | 	jmp	#LR__0433
07ed0                 | LR__0430
07ed0     38 14 06 F1 | 	add	ptr___system__dat__, #56
07ed4     0A 8F C2 FA | 	rdbyte	local06, ptr___system__dat__
07ed8     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07edc     07 8E 46 F7 | 	zerox	local06, #7
07ee0     2F 8E 0E F2 | 	cmp	local06, #47 wz
07ee4     18 00 90 5D |  if_ne	jmp	#LR__0431
07ee8     38 14 06 F1 | 	add	ptr___system__dat__, #56
07eec     0A 79 02 F6 | 	mov	arg02, ptr___system__dat__
07ef0     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07ef4     42 77 02 F6 | 	mov	arg01, local01
07ef8     5C E5 BF FD | 	call	#__system____builtin_strcpy
07efc     10 00 90 FD | 	jmp	#LR__0432
07f00                 | LR__0431
07f00     7A 00 00 FF 
07f04     36 78 06 F6 | 	mov	arg02, ##@LR__0937
07f08     42 77 02 F6 | 	mov	arg01, local01
07f0c     48 E5 BF FD | 	call	#__system____builtin_strcpy
07f10                 | LR__0432
07f10     42 31 02 F6 | 	mov	result1, local01
07f14                 | LR__0433
07f14     AF F0 03 F6 | 	mov	ptra, fp
07f18     BF 00 A0 FD | 	call	#popregs_
07f1c                 | __system__getcwd_ret
07f1c     2D 00 64 FD | 	ret
07f20                 | 
07f20                 | __system__chdir
07f20     02 5A 05 F6 | 	mov	COUNT_, #2
07f24     B0 00 A0 FD | 	call	#pushregs_
07f28     40 F0 07 F1 | 	add	ptra, #64
07f2c     04 5E 05 F1 | 	add	fp, #4
07f30     AF 76 62 FC | 	wrlong	arg01, fp
07f34     04 5E 05 F1 | 	add	fp, #4
07f38     AF 78 02 F6 | 	mov	arg02, fp
07f3c     08 5E 85 F1 | 	sub	fp, #8
07f40     08 FE BF FD | 	call	#__system__stat
07f44     3C 5E 05 F1 | 	add	fp, #60
07f48     AF 30 62 FC | 	wrlong	result1, fp
07f4c     AF 84 0A FB | 	rdlong	local01, fp wz
07f50     3C 5E 85 F1 | 	sub	fp, #60
07f54     10 00 90 AD |  if_e	jmp	#LR__0434
07f58     3C 5E 05 F1 | 	add	fp, #60
07f5c     AF 30 02 FB | 	rdlong	result1, fp
07f60     3C 5E 85 F1 | 	sub	fp, #60
07f64     CC 00 90 FD | 	jmp	#LR__0438
07f68                 | LR__0434
07f68     10 5E 05 F1 | 	add	fp, #16
07f6c     AF 84 02 FB | 	rdlong	local01, fp
07f70     10 5E 85 F1 | 	sub	fp, #16
07f74     78 00 00 FF 
07f78     00 84 06 F5 | 	and	local01, ##61440
07f7c     08 00 00 FF 
07f80     00 84 0E F2 | 	cmp	local01, ##4096 wz
07f84     1C 00 90 AD |  if_e	jmp	#LR__0435
07f88     01 00 00 FF 
07f8c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07f90     0A 1B 68 FC | 	wrlong	#13, ptr___system__dat__
07f94     01 00 00 FF 
07f98     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07f9c     01 30 66 F6 | 	neg	result1, #1
07fa0     90 00 90 FD | 	jmp	#LR__0438
07fa4                 | LR__0435
07fa4     04 5E 05 F1 | 	add	fp, #4
07fa8     AF 86 02 FB | 	rdlong	local02, fp
07fac     04 5E 85 F1 | 	sub	fp, #4
07fb0     43 85 C2 FA | 	rdbyte	local01, local02
07fb4     2F 84 0E F2 | 	cmp	local01, #47 wz
07fb8     24 00 90 5D |  if_ne	jmp	#LR__0436
07fbc     38 14 06 F1 | 	add	ptr___system__dat__, #56
07fc0     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07fc4     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07fc8     04 5E 05 F1 | 	add	fp, #4
07fcc     AF 78 02 FB | 	rdlong	arg02, fp
07fd0     04 5E 85 F1 | 	sub	fp, #4
07fd4     00 7B 06 F6 | 	mov	arg03, #256
07fd8     98 00 B0 FD | 	call	#__system__strncpy
07fdc     50 00 90 FD | 	jmp	#LR__0437
07fe0                 | LR__0436
07fe0     38 15 06 F1 | 	add	ptr___system__dat__, #312
07fe4     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
07fe8     38 5E 05 F1 | 	add	fp, #56
07fec     AF 30 62 FC | 	wrlong	result1, fp
07ff0     18 77 02 F6 | 	mov	arg01, result1
07ff4     38 5E 85 F1 | 	sub	fp, #56
07ff8     00 15 86 F1 | 	sub	ptr___system__dat__, #256
07ffc     0A 79 02 F6 | 	mov	arg02, ptr___system__dat__
08000     38 14 86 F1 | 	sub	ptr___system__dat__, #56
08004     00 7B 06 F6 | 	mov	arg03, #256
08008     68 00 B0 FD | 	call	#__system__strncpy
0800c     38 5E 05 F1 | 	add	fp, #56
08010     AF 76 02 FB | 	rdlong	arg01, fp
08014     34 5E 85 F1 | 	sub	fp, #52
08018     AF 78 02 FB | 	rdlong	arg02, fp
0801c     04 5E 85 F1 | 	sub	fp, #4
08020     38 14 06 F1 | 	add	ptr___system__dat__, #56
08024     0A 7B 02 F6 | 	mov	arg03, ptr___system__dat__
08028     38 14 86 F1 | 	sub	ptr___system__dat__, #56
0802c     D0 E8 BF FD | 	call	#__system____getvfsforfile
08030                 | LR__0437
08030     00 30 06 F6 | 	mov	result1, #0
08034                 | LR__0438
08034     AF F0 03 F6 | 	mov	ptra, fp
08038     BF 00 A0 FD | 	call	#popregs_
0803c                 | __system__chdir_ret
0803c     2D 00 64 FD | 	ret
08040                 | 
08040                 | __system____getftab
08040     0A 76 1E F2 | 	cmp	arg01, #10 wcz
08044     00 30 06 36 |  if_ae	mov	result1, #0
08048     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
0804c     3B 31 02 F6 | 	mov	result1, arg01
08050     01 30 66 F0 | 	shl	result1, #1
08054     3B 31 02 F1 | 	add	result1, arg01
08058     04 30 66 F0 | 	shl	result1, #4
0805c     02 00 00 FF 
08060     74 14 06 F1 | 	add	ptr___system__dat__, ##1140
08064     0A 31 02 F1 | 	add	result1, ptr___system__dat__
08068     02 00 00 FF 
0806c     74 14 86 F1 | 	sub	ptr___system__dat__, ##1140
08070                 | __system____getftab_ret
08070     2D 00 64 FD | 	ret
08074                 | 
08074                 | __system__strncpy
08074     3B 37 02 F6 | 	mov	_var01, arg01
08078                 | LR__0439
08078     01 7A 86 F1 | 	sub	arg03, #1
0807c     00 7A 5E F2 | 	cmps	arg03, #0 wcz
08080     18 00 90 CD |  if_b	jmp	#LR__0440
08084     3C 39 C2 FA | 	rdbyte	_var02, arg02
08088     1B 39 42 FC | 	wrbyte	_var02, _var01
0808c     01 78 06 F1 | 	add	arg02, #1
08090     1B 3B CA FA | 	rdbyte	_var03, _var01 wz
08094     01 36 06 F1 | 	add	_var01, #1
08098     DC FF 9F 5D |  if_ne	jmp	#LR__0439
0809c                 | LR__0440
0809c     74 7F 9F FE | 	loc	pa,	#(@LR__0442-@LR__0441)
080a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
080a4                 | LR__0441
080a4     01 7A 86 F1 | 	sub	arg03, #1
080a8     00 7A 5E F2 | 	cmps	arg03, #0 wcz
080ac     1B 01 48 3C |  if_ae	wrbyte	#0, _var01
080b0     01 36 06 31 |  if_ae	add	_var01, #1
080b4     EC FF 9F 3D |  if_ae	jmp	#LR__0441
080b8                 | LR__0442
080b8     3B 31 02 F6 | 	mov	result1, arg01
080bc                 | __system__strncpy_ret
080bc     2D 00 64 FD | 	ret
080c0                 | 
080c0                 | __system__strncat
080c0     3B 37 02 F6 | 	mov	_var01, arg01
080c4     3C 39 02 F6 | 	mov	_var02, arg02
080c8     3D 3B 02 F6 | 	mov	_var03, arg03
080cc     1C 3D 0A F6 | 	mov	_var04, _var02 wz
080d0     68 00 90 AD |  if_e	jmp	#LR__0447
080d4     00 3A 1E F2 | 	cmp	_var03, #0 wcz
080d8     60 00 90 ED |  if_be	jmp	#LR__0447
080dc     1B 3F 02 F6 | 	mov	_var05, _var01
080e0     68 7F 9F FE | 	loc	pa,	#(@LR__0445-@LR__0443)
080e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
080e8                 | LR__0443
080e8     1F 41 CA FA | 	rdbyte	_var06, _var05 wz
080ec     01 3E 06 51 |  if_ne	add	_var05, #1
080f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0443
080f4     1D 43 02 F6 | 	mov	_var07, _var03
080f8                 | LR__0444
080f8     1E 45 02 F6 | 	mov	_var08, _var04
080fc     1E 47 02 F6 | 	mov	_var09, _var04
08100     01 46 06 F1 | 	add	_var09, #1
08104     23 3D 02 F6 | 	mov	_var04, _var09
08108     22 49 C2 FA | 	rdbyte	_var10, _var08
0810c     24 41 02 F6 | 	mov	_var06, _var10
08110     07 40 4E F7 | 	zerox	_var06, #7 wz
08114     1C 00 90 AD |  if_e	jmp	#LR__0446
08118     21 4B 02 F6 | 	mov	_var11, _var07
0811c     01 4A 86 F1 | 	sub	_var11, #1
08120     25 43 02 F6 | 	mov	_var07, _var11
08124     00 42 5E F2 | 	cmps	_var07, #0 wcz
08128     1F 49 42 3C |  if_ae	wrbyte	_var10, _var05
0812c     01 3E 06 31 |  if_ae	add	_var05, #1
08130     C4 FF 9F 3D |  if_ae	jmp	#LR__0444
08134                 | LR__0445
08134                 | LR__0446
08134     00 40 06 F6 | 	mov	_var06, #0
08138     1F 01 48 FC | 	wrbyte	#0, _var05
0813c                 | LR__0447
0813c     1B 31 02 F6 | 	mov	result1, _var01
08140                 | __system__strncat_ret
08140     2D 00 64 FD | 	ret
08144                 | 
08144                 | __system__strncmp
08144     3B 37 0A F6 | 	mov	_var01, arg01 wz
08148     3C 39 02 F6 | 	mov	_var02, arg02
0814c     3D 3B 02 F6 | 	mov	_var03, arg03
08150     14 00 90 5D |  if_ne	jmp	#LR__0448
08154     00 38 0E F2 | 	cmp	_var02, #0 wz
08158     01 3C 66 56 |  if_ne	neg	_var04, #1
0815c     00 3C 06 A6 |  if_e	mov	_var04, #0
08160     1E 31 02 F6 | 	mov	result1, _var04
08164     8C 00 90 FD | 	jmp	#__system__strncmp_ret
08168                 | LR__0448
08168     00 38 0E F2 | 	cmp	_var02, #0 wz
0816c     01 30 06 A6 |  if_e	mov	result1, #1
08170     80 00 90 AD |  if_e	jmp	#__system__strncmp_ret
08174     1D 3F 02 F6 | 	mov	_var05, _var03
08178     C4 7E 9F FE | 	loc	pa,	#(@LR__0450-@LR__0449)
0817c     93 00 A0 FD | 	call	#FCACHE_LOAD_
08180                 | LR__0449
08180     1B 41 C2 FA | 	rdbyte	_var06, _var01
08184     1C 43 02 F6 | 	mov	_var07, _var02
08188     1C 45 02 F6 | 	mov	_var08, _var02
0818c     01 44 06 F1 | 	add	_var08, #1
08190     22 39 02 F6 | 	mov	_var02, _var08
08194     21 47 C2 FA | 	rdbyte	_var09, _var07
08198     1F 3D 02 F6 | 	mov	_var04, _var05
0819c     01 3C 86 F1 | 	sub	_var04, #1
081a0     1E 3F 02 F6 | 	mov	_var05, _var04
081a4     00 3E 5E F2 | 	cmps	_var05, #0 wcz
081a8     01 36 06 F1 | 	add	_var01, #1
081ac     10 00 90 CD |  if_b	jmp	#LR__0451
081b0     00 40 0E F2 | 	cmp	_var06, #0 wz
081b4     08 00 90 AD |  if_e	jmp	#LR__0451
081b8     23 41 0A F2 | 	cmp	_var06, _var09 wz
081bc     C0 FF 9F AD |  if_e	jmp	#LR__0449
081c0                 | LR__0450
081c0                 | LR__0451
081c0     00 3E 5E F2 | 	cmps	_var05, #0 wcz
081c4     00 30 06 C6 |  if_b	mov	result1, #0
081c8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
081cc     23 41 0A F2 | 	cmp	_var06, _var09 wz
081d0     00 30 06 A6 |  if_e	mov	result1, #0
081d4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
081d8     00 40 0E F2 | 	cmp	_var06, #0 wz
081dc     01 30 66 A6 |  if_e	neg	result1, #1
081e0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
081e4     00 46 0E F2 | 	cmp	_var09, #0 wz
081e8     01 30 06 A6 |  if_e	mov	result1, #1
081ec     20 31 02 56 |  if_ne	mov	result1, _var06
081f0     23 31 82 51 |  if_ne	sub	result1, _var09
081f4                 | __system__strncmp_ret
081f4     2D 00 64 FD | 	ret
081f8                 | 
081f8                 | __system___strrev
081f8     3B 37 CA FA | 	rdbyte	_var01, arg01 wz
081fc     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
08200     3B 39 02 F6 | 	mov	_var02, arg01
08204     04 7E 9F FE | 	loc	pa,	#(@LR__0453-@LR__0452)
08208     93 00 A0 FD | 	call	#FCACHE_LOAD_
0820c                 | LR__0452
0820c     1C 37 CA FA | 	rdbyte	_var01, _var02 wz
08210     01 38 06 51 |  if_ne	add	_var02, #1
08214     F4 FF 9F 5D |  if_ne	jmp	#LR__0452
08218                 | LR__0453
08218     01 38 86 F1 | 	sub	_var02, #1
0821c                 | LR__0454
0821c     3B 39 5A F2 | 	cmps	_var02, arg01 wcz
08220     1C 00 90 ED |  if_be	jmp	#LR__0455
08224     3B 3B C2 FA | 	rdbyte	_var03, arg01
08228     1C 3D C2 FA | 	rdbyte	_var04, _var02
0822c     3B 3D 42 FC | 	wrbyte	_var04, arg01
08230     1C 3B 42 FC | 	wrbyte	_var03, _var02
08234     01 76 06 F1 | 	add	arg01, #1
08238     01 38 86 F1 | 	sub	_var02, #1
0823c     DC FF 9F FD | 	jmp	#LR__0454
08240                 | LR__0455
08240                 | __system___strrev_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | __system___fmtpad
08244     0C 5A 05 F6 | 	mov	COUNT_, #12
08248     B0 00 A0 FD | 	call	#pushregs_
0824c     3B 85 02 F6 | 	mov	local01, arg01
08250     3C 87 02 F6 | 	mov	local02, arg02
08254     3E 89 02 F6 | 	mov	local03, arg04
08258     43 8B EA F8 | 	getbyte	local04, local02, #1
0825c     16 86 46 F0 | 	shr	local02, #22
08260     03 86 0E F5 | 	and	local02, #3 wz
08264     00 8C 06 F6 | 	mov	local05, #0
08268     01 86 06 A6 |  if_e	mov	local02, #1
0826c     44 87 CA F7 | 	test	local02, local03 wz
08270     00 30 06 A6 |  if_e	mov	result1, #0
08274     84 00 90 AD |  if_e	jmp	#LR__0459
08278     3D 8B 82 F1 | 	sub	local04, arg03
0827c     45 8F 02 F6 | 	mov	local06, local04
08280     00 8E 5E F2 | 	cmps	local06, #0 wcz
08284     00 30 06 E6 |  if_be	mov	result1, #0
08288     70 00 90 ED |  if_be	jmp	#LR__0459
0828c     03 86 0E F2 | 	cmp	local02, #3 wz
08290     18 00 90 5D |  if_ne	jmp	#LR__0456
08294     01 88 0E F2 | 	cmp	local03, #1 wz
08298     6E 90 62 FD | 	wrz	local07
0829c     48 8F 02 F1 | 	add	local06, local07
082a0     47 8F 52 F6 | 	abs	local06, local06 wc
082a4     01 8E 46 F0 | 	shr	local06, #1
082a8     47 8F 62 C6 |  if_b	neg	local06, local06
082ac                 | LR__0456
082ac     00 92 06 F6 | 	mov	local08, #0
082b0                 | LR__0457
082b0     47 93 5A F2 | 	cmps	local08, local06 wcz
082b4     40 00 90 3D |  if_ae	jmp	#LR__0458
082b8     42 95 02 F6 | 	mov	local09, local01
082bc     4A 91 02 FB | 	rdlong	local07, local09
082c0     04 94 06 F1 | 	add	local09, #4
082c4     4A 97 02 FB | 	rdlong	local10, local09
082c8     20 76 06 F6 | 	mov	arg01, #32
082cc     07 99 02 F6 | 	mov	local11, objptr
082d0     48 0F 02 F6 | 	mov	objptr, local07
082d4     2D 96 62 FD | 	call	local10
082d8     4C 0F 02 F6 | 	mov	objptr, local11
082dc     18 9B 02 F6 | 	mov	local12, result1
082e0     00 9A 5E F2 | 	cmps	local12, #0 wcz
082e4     4D 31 02 C6 |  if_b	mov	result1, local12
082e8     10 00 90 CD |  if_b	jmp	#LR__0459
082ec     4D 8D 02 F1 | 	add	local05, local12
082f0     01 92 06 F1 | 	add	local08, #1
082f4     B8 FF 9F FD | 	jmp	#LR__0457
082f8                 | LR__0458
082f8     46 31 02 F6 | 	mov	result1, local05
082fc                 | LR__0459
082fc     AF F0 03 F6 | 	mov	ptra, fp
08300     BF 00 A0 FD | 	call	#popregs_
08304                 | __system___fmtpad_ret
08304     2D 00 64 FD | 	ret
08308                 | 
08308                 | __system___uitoa
08308     09 5A 05 F6 | 	mov	COUNT_, #9
0830c     B0 00 A0 FD | 	call	#pushregs_
08310     3B 85 02 F6 | 	mov	local01, arg01
08314     3C 87 02 F6 | 	mov	local02, arg02
08318     3D 89 02 F6 | 	mov	local03, arg03
0831c     3E 8B 02 F6 | 	mov	local04, arg04
08320     3F 8D 0A F6 | 	mov	local05, arg05 wz
08324     42 8F 02 F6 | 	mov	local06, local01
08328     00 90 06 F6 | 	mov	local07, #0
0832c     37 92 06 56 |  if_ne	mov	local08, #55
08330     57 92 06 A6 |  if_e	mov	local08, #87
08334                 | LR__0460
08334     43 D9 02 F6 | 	mov	muldiva_, local02
08338     44 DB 02 F6 | 	mov	muldivb_, local03
0833c     CC 00 A0 FD | 	call	#unsdivide_
08340     6C 95 02 F6 | 	mov	local09, muldiva_
08344     0A 94 1E F2 | 	cmp	local09, #10 wcz
08348     30 94 06 C1 |  if_b	add	local09, #48
0834c     49 95 02 31 |  if_ae	add	local09, local08
08350     47 95 42 FC | 	wrbyte	local09, local06
08354     43 D9 02 F6 | 	mov	muldiva_, local02
08358     44 DB 02 F6 | 	mov	muldivb_, local03
0835c     01 8E 06 F1 | 	add	local06, #1
08360     CC 00 A0 FD | 	call	#unsdivide_
08364     6D 87 0A F6 | 	mov	local02, muldivb_ wz
08368     01 90 06 F1 | 	add	local07, #1
0836c     C4 FF 9F 5D |  if_ne	jmp	#LR__0460
08370     45 91 1A F2 | 	cmp	local07, local04 wcz
08374     BC FF 9F CD |  if_b	jmp	#LR__0460
08378     47 01 48 FC | 	wrbyte	#0, local06
0837c     42 77 02 F6 | 	mov	arg01, local01
08380     74 FE BF FD | 	call	#__system___strrev
08384     48 31 02 F6 | 	mov	result1, local07
08388     AF F0 03 F6 | 	mov	ptra, fp
0838c     BF 00 A0 FD | 	call	#popregs_
08390                 | __system___uitoa_ret
08390     2D 00 64 FD | 	ret
08394                 | 
08394                 | __system___gettxfunc
08394     03 5A 05 F6 | 	mov	COUNT_, #3
08398     B0 00 A0 FD | 	call	#pushregs_
0839c     A0 FC BF FD | 	call	#__system____getftab
083a0     18 85 0A F6 | 	mov	local01, result1 wz
083a4     14 00 90 AD |  if_e	jmp	#LR__0461
083a8     08 84 06 F1 | 	add	local01, #8
083ac     42 87 02 FB | 	rdlong	local02, local01
083b0     08 84 86 F1 | 	sub	local01, #8
083b4     43 89 0A F6 | 	mov	local03, local02 wz
083b8     08 00 90 5D |  if_ne	jmp	#LR__0462
083bc                 | LR__0461
083bc     00 30 06 F6 | 	mov	result1, #0
083c0     0C 00 90 FD | 	jmp	#LR__0463
083c4                 | LR__0462
083c4     42 77 02 F6 | 	mov	arg01, local01
083c8     09 79 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
083cc     D8 E0 BF FD | 	call	#__system___make_methodptr
083d0                 | LR__0463
083d0     AF F0 03 F6 | 	mov	ptra, fp
083d4     BF 00 A0 FD | 	call	#popregs_
083d8                 | __system___gettxfunc_ret
083d8     2D 00 64 FD | 	ret
083dc                 | 
083dc                 | __system___getiolock_0223
083dc     03 5A 05 F6 | 	mov	COUNT_, #3
083e0     B0 00 A0 FD | 	call	#pushregs_
083e4     58 FC BF FD | 	call	#__system____getftab
083e8     18 85 0A F6 | 	mov	local01, result1 wz
083ec     14 00 90 AD |  if_e	jmp	#LR__0464
083f0     08 84 06 F1 | 	add	local01, #8
083f4     42 87 02 FB | 	rdlong	local02, local01
083f8     08 84 86 F1 | 	sub	local01, #8
083fc     43 89 0A F6 | 	mov	local03, local02 wz
08400     18 00 90 5D |  if_ne	jmp	#LR__0465
08404                 | LR__0464
08404     01 00 00 FF 
08408     38 14 06 F1 | 	add	ptr___system__dat__, ##568
0840c     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
08410     01 00 00 FF 
08414     38 14 86 F1 | 	sub	ptr___system__dat__, ##568
08418     08 00 90 FD | 	jmp	#LR__0466
0841c                 | LR__0465
0841c     0C 84 06 F1 | 	add	local01, #12
08420     42 31 02 F6 | 	mov	result1, local01
08424                 | LR__0466
08424     AF F0 03 F6 | 	mov	ptra, fp
08428     BF 00 A0 FD | 	call	#popregs_
0842c                 | __system___getiolock_0223_ret
0842c     2D 00 64 FD | 	ret
08430                 | 
08430                 | __system___rxtxioctl_0619
08430     02 5A 05 F6 | 	mov	COUNT_, #2
08434     B0 00 A0 FD | 	call	#pushregs_
08438     3C 85 02 F6 | 	mov	local01, arg02
0843c     3D 87 02 F6 | 	mov	local02, arg03
08440     00 85 0E F2 | 	cmp	local01, #256 wz
08444     0C 00 90 AD |  if_e	jmp	#LR__0467
08448     01 85 0E F2 | 	cmp	local01, #257 wz
0844c     1C 00 90 AD |  if_e	jmp	#LR__0468
08450     30 00 90 FD | 	jmp	#LR__0469
08454                 | LR__0467
08454     08 14 06 F1 | 	add	ptr___system__dat__, #8
08458     0A 31 02 FB | 	rdlong	result1, ptr___system__dat__
0845c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
08460     43 31 62 FC | 	wrlong	result1, local02
08464     00 30 06 F6 | 	mov	result1, #0
08468     30 00 90 FD | 	jmp	#LR__0470
0846c                 | LR__0468
0846c     43 77 02 FB | 	rdlong	arg01, local02
08470     08 14 06 F1 | 	add	ptr___system__dat__, #8
08474     0A 77 62 FC | 	wrlong	arg01, ptr___system__dat__
08478     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0847c     00 30 06 F6 | 	mov	result1, #0
08480     18 00 90 FD | 	jmp	#LR__0470
08484                 | LR__0469
08484     01 00 00 FF 
08488     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0848c     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
08490     01 00 00 FF 
08494     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
08498     01 30 66 F6 | 	neg	result1, #1
0849c                 | LR__0470
0849c     AF F0 03 F6 | 	mov	ptra, fp
084a0     BF 00 A0 FD | 	call	#popregs_
084a4                 | __system___rxtxioctl_0619_ret
084a4     2D 00 64 FD | 	ret
084a8                 | 
084a8                 | __system____dummy_flush_0620
084a8     00 30 06 F6 | 	mov	result1, #0
084ac                 | __system____dummy_flush_0620_ret
084ac     2D 00 64 FD | 	ret
084b0                 | 
084b0                 | _ff_cc_disk_initialize
084b0     08 5A 05 F6 | 	mov	COUNT_, #8
084b4     B0 00 A0 FD | 	call	#pushregs_
084b8     30 F0 07 F1 | 	add	ptra, #48
084bc     04 5E 05 F1 | 	add	fp, #4
084c0     AF 76 42 FC | 	wrbyte	arg01, fp
084c4     70 1B 06 F1 | 	add	ptr__ff_cc_dat__, #368
084c8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084cc     1C 5E 05 F1 | 	add	fp, #28
084d0     AF 84 62 FC | 	wrlong	local01, fp
084d4     04 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #4
084d8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084dc     04 5E 05 F1 | 	add	fp, #4
084e0     AF 84 62 FC | 	wrlong	local01, fp
084e4     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
084e8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084ec     04 5E 05 F1 | 	add	fp, #4
084f0     AF 84 62 FC | 	wrlong	local01, fp
084f4     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
084f8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084fc     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
08500     04 5E 05 F1 | 	add	fp, #4
08504     AF 84 62 FC | 	wrlong	local01, fp
08508     28 5E 85 F1 | 	sub	fp, #40
0850c     AF 84 CA FA | 	rdbyte	local01, fp wz
08510     04 5E 85 F1 | 	sub	fp, #4
08514                 | ' #line 420 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
08514                 | '             return RES_NOTRDY;
08514     03 30 06 56 |  if_ne	mov	result1, #3
08518     2C 03 90 5D |  if_ne	jmp	#LR__0484
0851c     13 00 00 FF 
08520     10 77 06 F6 | 	mov	arg01, ##10000
08524     04 E2 BF FD | 	call	#__system___waitus
08528     20 5E 05 F1 | 	add	fp, #32
0852c     AF 76 02 FB | 	rdlong	arg01, fp
08530     41 76 62 FD | 	dirh	arg01
08534     59 76 62 FD | 	drvh	arg01
08538     1F 20 64 FD | 	waitx	#16
0853c     04 5E 05 F1 | 	add	fp, #4
08540     AF 76 02 FB | 	rdlong	arg01, fp
08544     41 76 62 FD | 	dirh	arg01
08548     58 76 62 FD | 	drvl	arg01
0854c     1F 20 64 FD | 	waitx	#16
08550     04 5E 05 F1 | 	add	fp, #4
08554     AF 76 02 FB | 	rdlong	arg01, fp
08558     41 76 62 FD | 	dirh	arg01
0855c     04 5E 05 F1 | 	add	fp, #4
08560     AF 76 02 FB | 	rdlong	arg01, fp
08564     50 76 62 FD | 	fltl	arg01
08568                 | '         }
08568                 | ' 
08568                 | ' 	dly_us(10000);
08568                 | ' 	_dirh(PIN_SS) ;  (_pinh(PIN_SS), (_waitx(16)) ) ;
08568                 | ' 	_dirh(PIN_CLK) ;  (_pinl(PIN_CLK), (_waitx(16)) ) ;
08568                 | ' 	_dirh(PIN_DI) ;
08568                 | ' 	_fltl(PIN_DO) ;
08568                 | ' 
08568                 | ' 	for (n = 100; n; n--) rcvr_mmc(buf, 1);
08568     24 5E 85 F1 | 	sub	fp, #36
0856c     AF C8 48 FC | 	wrbyte	#100, fp
08570     08 5E 85 F1 | 	sub	fp, #8
08574                 | LR__0471
08574     08 5E 05 F1 | 	add	fp, #8
08578     AF 86 CA FA | 	rdbyte	local02, fp wz
0857c     08 5E 85 F1 | 	sub	fp, #8
08580     34 00 90 AD |  if_e	jmp	#LR__0472
08584     14 5E 05 F1 | 	add	fp, #20
08588     AF 76 02 F6 | 	mov	arg01, fp
0858c     14 5E 85 F1 | 	sub	fp, #20
08590     01 78 06 F6 | 	mov	arg02, #1
08594     38 65 B0 FD | 	call	#_ff_cc_rcvr_mmc_0711
08598     08 5E 05 F1 | 	add	fp, #8
0859c     AF 88 C2 FA | 	rdbyte	local03, fp
085a0     AF 8A C2 FA | 	rdbyte	local04, fp
085a4     45 8D 02 F6 | 	mov	local05, local04
085a8     01 8C 86 F1 | 	sub	local05, #1
085ac     AF 8C 42 FC | 	wrbyte	local05, fp
085b0     08 5E 85 F1 | 	sub	fp, #8
085b4     BC FF 9F FD | 	jmp	#LR__0471
085b8                 | LR__0472
085b8     0C 5E 05 F1 | 	add	fp, #12
085bc     AF 00 48 FC | 	wrbyte	#0, fp
085c0     0C 5E 85 F1 | 	sub	fp, #12
085c4     00 76 06 F6 | 	mov	arg01, #0
085c8     00 78 06 F6 | 	mov	arg02, #0
085cc     D8 69 B0 FD | 	call	#_ff_cc_send_cmd_0732
085d0     18 85 02 F6 | 	mov	local01, result1
085d4     07 84 46 F7 | 	zerox	local01, #7
085d8     01 84 0E F2 | 	cmp	local01, #1 wz
085dc     20 02 90 5D |  if_ne	jmp	#LR__0483
085e0     08 76 06 F6 | 	mov	arg01, #8
085e4     AA 79 06 F6 | 	mov	arg02, #426
085e8     BC 69 B0 FD | 	call	#_ff_cc_send_cmd_0732
085ec     18 85 02 F6 | 	mov	local01, result1
085f0     07 84 46 F7 | 	zerox	local01, #7
085f4     01 84 0E F2 | 	cmp	local01, #1 wz
085f8     04 01 90 5D |  if_ne	jmp	#LR__0475
085fc     14 5E 05 F1 | 	add	fp, #20
08600     AF 76 02 F6 | 	mov	arg01, fp
08604     14 5E 85 F1 | 	sub	fp, #20
08608     04 78 06 F6 | 	mov	arg02, #4
0860c     C0 64 B0 FD | 	call	#_ff_cc_rcvr_mmc_0711
08610     16 5E 05 F1 | 	add	fp, #22
08614     AF 84 C2 FA | 	rdbyte	local01, fp
08618     16 5E 85 F1 | 	sub	fp, #22
0861c     07 84 46 F7 | 	zerox	local01, #7
08620     01 84 0E F2 | 	cmp	local01, #1 wz
08624     D8 01 90 5D |  if_ne	jmp	#LR__0482
08628     17 5E 05 F1 | 	add	fp, #23
0862c     AF 8E C2 FA | 	rdbyte	local06, fp
08630     17 5E 85 F1 | 	sub	fp, #23
08634     07 8E 46 F7 | 	zerox	local06, #7
08638     AA 8E 0E F2 | 	cmp	local06, #170 wz
0863c     C0 01 90 5D |  if_ne	jmp	#LR__0482
08640                 | ' 				for (tmr = 1000; tmr; tmr--) {
08640     18 5E 05 F1 | 	add	fp, #24
08644     01 00 80 FF 
08648     AF D0 6B FC | 	wrlong	##1000, fp
0864c     18 5E 85 F1 | 	sub	fp, #24
08650                 | LR__0473
08650     18 5E 05 F1 | 	add	fp, #24
08654     AF 8E 0A FB | 	rdlong	local06, fp wz
08658     18 5E 85 F1 | 	sub	fp, #24
0865c     3C 00 90 AD |  if_e	jmp	#LR__0474
08660     A9 76 06 F6 | 	mov	arg01, #169
08664     1E 78 C6 F9 | 	decod	arg02, #30
08668     3C 69 B0 FD | 	call	#_ff_cc_send_cmd_0732
0866c     18 91 02 F6 | 	mov	local07, result1
08670     07 90 4E F7 | 	zerox	local07, #7 wz
08674     24 00 90 AD |  if_e	jmp	#LR__0474
08678     01 00 00 FF 
0867c     E8 77 06 F6 | 	mov	arg01, ##1000
08680     A8 E0 BF FD | 	call	#__system___waitus
08684     18 5E 05 F1 | 	add	fp, #24
08688     AF 8C 02 FB | 	rdlong	local05, fp
0868c     01 8C 86 F1 | 	sub	local05, #1
08690     AF 8C 62 FC | 	wrlong	local05, fp
08694     18 5E 85 F1 | 	sub	fp, #24
08698     B4 FF 9F FD | 	jmp	#LR__0473
0869c                 | LR__0474
0869c     18 5E 05 F1 | 	add	fp, #24
086a0     AF 86 02 FB | 	rdlong	local02, fp
086a4     18 5E 85 F1 | 	sub	fp, #24
086a8     43 85 0A F6 | 	mov	local01, local02 wz
086ac     50 01 90 AD |  if_e	jmp	#LR__0482
086b0     3A 76 06 F6 | 	mov	arg01, #58
086b4     00 78 06 F6 | 	mov	arg02, #0
086b8     EC 68 B0 FD | 	call	#_ff_cc_send_cmd_0732
086bc     18 8F 02 F6 | 	mov	local06, result1
086c0     07 8E 4E F7 | 	zerox	local06, #7 wz
086c4     38 01 90 5D |  if_ne	jmp	#LR__0482
086c8     14 5E 05 F1 | 	add	fp, #20
086cc     AF 76 02 F6 | 	mov	arg01, fp
086d0     14 5E 85 F1 | 	sub	fp, #20
086d4     04 78 06 F6 | 	mov	arg02, #4
086d8     F4 63 B0 FD | 	call	#_ff_cc_rcvr_mmc_0711
086dc     14 5E 05 F1 | 	add	fp, #20
086e0     AF 86 C2 FA | 	rdbyte	local02, fp
086e4     40 86 CE F7 | 	test	local02, #64 wz
086e8     0C 84 06 56 |  if_ne	mov	local01, #12
086ec     04 84 06 A6 |  if_e	mov	local01, #4
086f0     08 5E 85 F1 | 	sub	fp, #8
086f4     AF 84 42 FC | 	wrbyte	local01, fp
086f8     0C 5E 85 F1 | 	sub	fp, #12
086fc     00 01 90 FD | 	jmp	#LR__0482
08700                 | LR__0475
08700     A9 76 06 F6 | 	mov	arg01, #169
08704     00 78 06 F6 | 	mov	arg02, #0
08708     9C 68 B0 FD | 	call	#_ff_cc_send_cmd_0732
0870c     18 85 02 F6 | 	mov	local01, result1
08710     07 84 46 F7 | 	zerox	local01, #7
08714     01 84 1E F2 | 	cmp	local01, #1 wcz
08718     18 00 90 1D |  if_a	jmp	#LR__0476
0871c     0C 5E 05 F1 | 	add	fp, #12
08720     AF 04 48 FC | 	wrbyte	#2, fp
08724     04 5E 05 F1 | 	add	fp, #4
08728     AF 52 49 FC | 	wrbyte	#169, fp
0872c     10 5E 85 F1 | 	sub	fp, #16
08730     14 00 90 FD | 	jmp	#LR__0477
08734                 | LR__0476
08734     0C 5E 05 F1 | 	add	fp, #12
08738     AF 02 48 FC | 	wrbyte	#1, fp
0873c     04 5E 05 F1 | 	add	fp, #4
08740     AF 02 48 FC | 	wrbyte	#1, fp
08744     10 5E 85 F1 | 	sub	fp, #16
08748                 | LR__0477
08748                 | ' 				ty =  0x01 ; cmd =  (1) ;
08748                 | ' 			}
08748                 | ' 			for (tmr = 1000; tmr; tmr--) {
08748     18 5E 05 F1 | 	add	fp, #24
0874c     01 00 80 FF 
08750     AF D0 6B FC | 	wrlong	##1000, fp
08754     18 5E 85 F1 | 	sub	fp, #24
08758                 | LR__0478
08758     18 5E 05 F1 | 	add	fp, #24
0875c     AF 86 0A FB | 	rdlong	local02, fp wz
08760     18 5E 85 F1 | 	sub	fp, #24
08764     54 00 90 AD |  if_e	jmp	#LR__0479
08768     10 5E 05 F1 | 	add	fp, #16
0876c     AF 76 C2 FA | 	rdbyte	arg01, fp
08770     10 5E 85 F1 | 	sub	fp, #16
08774     00 8A 06 F6 | 	mov	local04, #0
08778     00 78 06 F6 | 	mov	arg02, #0
0877c     28 68 B0 FD | 	call	#_ff_cc_send_cmd_0732
08780     18 93 02 F6 | 	mov	local08, result1
08784     49 91 02 F6 | 	mov	local07, local08
08788     07 90 4E F7 | 	zerox	local07, #7 wz
0878c     2C 00 90 AD |  if_e	jmp	#LR__0479
08790     01 00 00 FF 
08794     E8 77 06 F6 | 	mov	arg01, ##1000
08798     90 DF BF FD | 	call	#__system___waitus
0879c     18 5E 05 F1 | 	add	fp, #24
087a0     AF 88 02 FB | 	rdlong	local03, fp
087a4     44 8B 02 F6 | 	mov	local04, local03
087a8     45 8D 02 F6 | 	mov	local05, local04
087ac     01 8C 86 F1 | 	sub	local05, #1
087b0     AF 8C 62 FC | 	wrlong	local05, fp
087b4     18 5E 85 F1 | 	sub	fp, #24
087b8     9C FF 9F FD | 	jmp	#LR__0478
087bc                 | LR__0479
087bc     18 5E 05 F1 | 	add	fp, #24
087c0     AF 86 02 FB | 	rdlong	local02, fp
087c4     18 5E 85 F1 | 	sub	fp, #24
087c8     43 85 0A F6 | 	mov	local01, local02 wz
087cc     24 00 90 AD |  if_e	jmp	#LR__0480
087d0     10 90 06 F6 | 	mov	local07, #16
087d4     09 88 C6 F9 | 	decod	local03, #9
087d8     10 76 06 F6 | 	mov	arg01, #16
087dc     09 78 C6 F9 | 	decod	arg02, #9
087e0     C4 67 B0 FD | 	call	#_ff_cc_send_cmd_0732
087e4     18 8D 02 F6 | 	mov	local05, result1
087e8     46 8F 02 F6 | 	mov	local06, local05
087ec     07 8E 4E F7 | 	zerox	local06, #7 wz
087f0     0C 00 90 AD |  if_e	jmp	#LR__0481
087f4                 | LR__0480
087f4     0C 5E 05 F1 | 	add	fp, #12
087f8     AF 00 48 FC | 	wrbyte	#0, fp
087fc     0C 5E 85 F1 | 	sub	fp, #12
08800                 | LR__0481
08800                 | LR__0482
08800                 | LR__0483
08800     0C 5E 05 F1 | 	add	fp, #12
08804     AF 84 C2 FA | 	rdbyte	local01, fp
08808     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
0880c     0D 85 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
08810     AF 86 CA FA | 	rdbyte	local02, fp wz
08814     00 84 06 56 |  if_ne	mov	local01, #0
08818     01 84 06 A6 |  if_e	mov	local01, #1
0881c     10 5E 05 F1 | 	add	fp, #16
08820     AF 84 42 FC | 	wrbyte	local01, fp
08824     AF 84 C2 FA | 	rdbyte	local01, fp
08828     1C 5E 85 F1 | 	sub	fp, #28
0882c     01 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #1
08830     0D 85 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
08834     7C 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #380
08838     DC 64 B0 FD | 	call	#_ff_cc_deselect_0720
0883c                 | ' 
0883c                 | '                             ty = 0;
0883c                 | '                         }
0883c                 | ' 		}
0883c                 | ' 	}
0883c                 | ' #line 467 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
0883c                 | ' 	CardType = ty;
0883c                 | ' 	s = ty ? 0 :  0x01 ;
0883c                 | ' 	Stat = s;
0883c                 | ' 
0883c                 | ' 	deselect();
0883c                 | ' 
0883c                 | ' 	return s;
0883c     1C 5E 05 F1 | 	add	fp, #28
08840     AF 30 C2 FA | 	rdbyte	result1, fp
08844     1C 5E 85 F1 | 	sub	fp, #28
08848                 | LR__0484
08848     AF F0 03 F6 | 	mov	ptra, fp
0884c     BF 00 A0 FD | 	call	#popregs_
08850                 | _ff_cc_disk_initialize_ret
08850     2D 00 64 FD | 	ret
08854                 | 
08854                 | _ff_cc_disk_read
08854     05 5A 05 F6 | 	mov	COUNT_, #5
08858     B0 00 A0 FD | 	call	#pushregs_
0885c     3C 85 02 F6 | 	mov	local01, arg02
08860     3E 87 02 F6 | 	mov	local02, arg04
08864     3D 89 02 F6 | 	mov	local03, arg03
08868     00 76 0E F2 | 	cmp	arg01, #0 wz
0886c     01 30 06 56 |  if_ne	mov	result1, #1
08870                 | ' 
08870                 | ' 	return Stat;
08870     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08874     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
08878     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0887c     18 8B 02 F6 | 	mov	local04, result1
08880     07 8A 46 F7 | 	zerox	local04, #7
08884     01 8A CE F7 | 	test	local04, #1 wz
08888     03 30 06 56 |  if_ne	mov	result1, #3
0888c     88 00 90 5D |  if_ne	jmp	#LR__0488
08890     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
08894     0D 8B C2 FA | 	rdbyte	local04, ptr__ff_cc_dat__
08898     7D 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #381
0889c     07 8A 46 F7 | 	zerox	local04, #7
088a0     08 8A 0E F5 | 	and	local04, #8 wz
088a4     09 88 66 A0 |  if_e	shl	local03, #9
088a8     01 86 1E F2 | 	cmp	local02, #1 wcz
088ac     12 8A 06 16 |  if_a	mov	local04, #18
088b0     11 8A 06 E6 |  if_be	mov	local04, #17
088b4     45 8D 02 F6 | 	mov	local05, local04
088b8     46 77 02 F6 | 	mov	arg01, local05
088bc     44 79 02 F6 | 	mov	arg02, local03
088c0     E4 66 B0 FD | 	call	#_ff_cc_send_cmd_0732
088c4     18 8B 02 F6 | 	mov	local04, result1
088c8     07 8A 4E F7 | 	zerox	local04, #7 wz
088cc     34 00 90 5D |  if_ne	jmp	#LR__0487
088d0                 | ' 		do {
088d0                 | LR__0485
088d0     42 77 02 F6 | 	mov	arg01, local01
088d4     09 78 C6 F9 | 	decod	arg02, #9
088d8     18 65 B0 FD | 	call	#_ff_cc_rcvr_datablock_0726
088dc     00 30 0E F2 | 	cmp	result1, #0 wz
088e0     01 00 00 5F 
088e4     00 84 06 51 |  if_ne	add	local01, ##512
088e8     F9 87 6E 5B |  if_ne	djnz	local02, #LR__0485
088ec     07 8C 46 F7 | 	zerox	local05, #7
088f0     12 8C 0E F2 | 	cmp	local05, #18 wz
088f4     0C 00 90 5D |  if_ne	jmp	#LR__0486
088f8     0C 76 06 F6 | 	mov	arg01, #12
088fc     00 78 06 F6 | 	mov	arg02, #0
08900     A4 66 B0 FD | 	call	#_ff_cc_send_cmd_0732
08904                 | LR__0486
08904                 | LR__0487
08904     10 64 B0 FD | 	call	#_ff_cc_deselect_0720
08908                 | ' 	}
08908                 | ' 	deselect();
08908                 | ' 
08908                 | ' 	return count ? RES_ERROR : RES_OK;
08908     00 86 0E F2 | 	cmp	local02, #0 wz
0890c     01 8A 06 56 |  if_ne	mov	local04, #1
08910     00 8A 06 A6 |  if_e	mov	local04, #0
08914     45 31 02 F6 | 	mov	result1, local04
08918                 | LR__0488
08918     AF F0 03 F6 | 	mov	ptra, fp
0891c     BF 00 A0 FD | 	call	#popregs_
08920                 | _ff_cc_disk_read_ret
08920     2D 00 64 FD | 	ret
08924                 | 
08924                 | _ff_cc_disk_write
08924     07 5A 05 F6 | 	mov	COUNT_, #7
08928     B0 00 A0 FD | 	call	#pushregs_
0892c     3B 85 0A F6 | 	mov	local01, arg01 wz
08930     3C 87 02 F6 | 	mov	local02, arg02
08934     3D 89 02 F6 | 	mov	local03, arg03
08938     3E 8B 02 F6 | 	mov	local04, arg04
0893c     44 8D 02 F6 | 	mov	local05, local03
08940     01 30 06 56 |  if_ne	mov	result1, #1
08944                 | ' 
08944                 | ' 	return Stat;
08944     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08948     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0894c     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
08950     18 8F 02 F6 | 	mov	local06, result1
08954     07 8E 46 F7 | 	zerox	local06, #7
08958     01 8E CE F7 | 	test	local06, #1 wz
0895c     03 30 06 56 |  if_ne	mov	result1, #3
08960     D0 00 90 5D |  if_ne	jmp	#LR__0494
08964     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
08968     0D 8F C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
0896c     7D 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #381
08970     07 8E 46 F7 | 	zerox	local06, #7
08974     08 8E CE F7 | 	test	local06, #8 wz
08978     09 8C 66 A0 |  if_e	shl	local05, #9
0897c     01 8A 0E F2 | 	cmp	local04, #1 wz
08980     30 00 90 5D |  if_ne	jmp	#LR__0489
08984     46 79 02 F6 | 	mov	arg02, local05
08988     18 76 06 F6 | 	mov	arg01, #24
0898c     18 66 B0 FD | 	call	#_ff_cc_send_cmd_0732
08990     18 8F 02 F6 | 	mov	local06, result1
08994     07 8E 4E F7 | 	zerox	local06, #7 wz
08998     84 00 90 5D |  if_ne	jmp	#LR__0493
0899c     43 77 02 F6 | 	mov	arg01, local02
089a0     FE 78 06 F6 | 	mov	arg02, #254
089a4     2C 65 B0 FD | 	call	#_ff_cc_xmit_datablock_0728
089a8     18 91 0A F6 | 	mov	local07, result1 wz
089ac     00 8A 06 56 |  if_ne	mov	local04, #0
089b0     6C 00 90 FD | 	jmp	#LR__0493
089b4                 | LR__0489
089b4     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
089b8     0D 8F C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
089bc     7D 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #381
089c0     07 8E 46 F7 | 	zerox	local06, #7
089c4     06 8E CE F7 | 	test	local06, #6 wz
089c8     0C 00 90 AD |  if_e	jmp	#LR__0490
089cc     97 76 06 F6 | 	mov	arg01, #151
089d0     45 79 02 F6 | 	mov	arg02, local04
089d4     D0 65 B0 FD | 	call	#_ff_cc_send_cmd_0732
089d8                 | LR__0490
089d8     46 79 02 F6 | 	mov	arg02, local05
089dc     19 76 06 F6 | 	mov	arg01, #25
089e0     C4 65 B0 FD | 	call	#_ff_cc_send_cmd_0732
089e4     18 8F 02 F6 | 	mov	local06, result1
089e8     07 8E 4E F7 | 	zerox	local06, #7 wz
089ec     30 00 90 5D |  if_ne	jmp	#LR__0492
089f0                 | ' 			do {
089f0                 | LR__0491
089f0     43 77 02 F6 | 	mov	arg01, local02
089f4     FC 78 06 F6 | 	mov	arg02, #252
089f8     D8 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0728
089fc     00 30 0E F2 | 	cmp	result1, #0 wz
08a00     01 00 00 5F 
08a04     00 86 06 51 |  if_ne	add	local02, ##512
08a08     F9 8B 6E 5B |  if_ne	djnz	local04, #LR__0491
08a0c     00 76 06 F6 | 	mov	arg01, #0
08a10     FD 78 06 F6 | 	mov	arg02, #253
08a14     BC 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0728
08a18     00 30 0E F2 | 	cmp	result1, #0 wz
08a1c     01 8A 06 A6 |  if_e	mov	local04, #1
08a20                 | LR__0492
08a20                 | LR__0493
08a20     F4 62 B0 FD | 	call	#_ff_cc_deselect_0720
08a24                 | ' 				count = 1;
08a24                 | ' 		}
08a24                 | ' 	}
08a24                 | ' 	deselect();
08a24                 | ' 
08a24                 | ' 	return count ? RES_ERROR : RES_OK;
08a24     00 8A 0E F2 | 	cmp	local04, #0 wz
08a28     01 8E 06 56 |  if_ne	mov	local06, #1
08a2c     00 8E 06 A6 |  if_e	mov	local06, #0
08a30     47 31 02 F6 | 	mov	result1, local06
08a34                 | LR__0494
08a34     AF F0 03 F6 | 	mov	ptra, fp
08a38     BF 00 A0 FD | 	call	#popregs_
08a3c                 | _ff_cc_disk_write_ret
08a3c     2D 00 64 FD | 	ret
08a40                 | 
08a40                 | _ff_cc_disk_ioctl
08a40     07 5A 05 F6 | 	mov	COUNT_, #7
08a44     B0 00 A0 FD | 	call	#pushregs_
08a48     30 F0 07 F1 | 	add	ptra, #48
08a4c     04 5E 05 F1 | 	add	fp, #4
08a50     AF 76 42 FC | 	wrbyte	arg01, fp
08a54     04 5E 05 F1 | 	add	fp, #4
08a58     AF 78 42 FC | 	wrbyte	arg02, fp
08a5c     04 5E 05 F1 | 	add	fp, #4
08a60     AF 7A 62 FC | 	wrlong	arg03, fp
08a64     08 5E 85 F1 | 	sub	fp, #8
08a68     AF 84 C2 FA | 	rdbyte	local01, fp
08a6c     04 5E 85 F1 | 	sub	fp, #4
08a70     42 87 02 F6 | 	mov	local02, local01
08a74     43 77 0A F6 | 	mov	arg01, local02 wz
08a78     01 30 06 56 |  if_ne	mov	result1, #1
08a7c                 | ' 
08a7c                 | ' 	return Stat;
08a7c     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08a80     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
08a84     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
08a88     18 89 02 F6 | 	mov	local03, result1
08a8c     44 8B 02 F6 | 	mov	local04, local03
08a90     07 8A 46 F7 | 	zerox	local04, #7
08a94     01 8A CE F7 | 	test	local04, #1 wz
08a98     03 30 06 56 |  if_ne	mov	result1, #3
08a9c     F8 01 90 5D |  if_ne	jmp	#LR__0503
08aa0     10 5E 05 F1 | 	add	fp, #16
08aa4     AF 02 68 FC | 	wrlong	#1, fp
08aa8                 | ' 
08aa8                 | ' 	res = RES_ERROR;
08aa8                 | ' 	switch (ctrl) {
08aa8     08 5E 85 F1 | 	sub	fp, #8
08aac     AF 8A C2 FA | 	rdbyte	local04, fp
08ab0     08 5E 85 F1 | 	sub	fp, #8
08ab4     45 8D 02 F6 | 	mov	local05, local04
08ab8     07 8C 46 F7 | 	zerox	local05, #7
08abc     04 8C 26 F3 | 	fle	local05, #4
08ac0     30 8C 62 FD | 	jmprel	local05
08ac4                 | LR__0495
08ac4     10 00 90 FD | 	jmp	#LR__0496
08ac8     24 00 90 FD | 	jmp	#LR__0497
08acc     A8 01 90 FD | 	jmp	#LR__0501
08ad0     88 01 90 FD | 	jmp	#LR__0500
08ad4     A0 01 90 FD | 	jmp	#LR__0501
08ad8                 | LR__0496
08ad8     B8 62 B0 FD | 	call	#_ff_cc_select_0723
08adc     00 30 0E F2 | 	cmp	result1, #0 wz
08ae0     10 5E 05 51 |  if_ne	add	fp, #16
08ae4     AF 00 68 5C |  if_ne	wrlong	#0, fp
08ae8     10 5E 85 51 |  if_ne	sub	fp, #16
08aec                 | ' 			break;
08aec     98 01 90 FD | 	jmp	#LR__0502
08af0                 | LR__0497
08af0     09 76 06 F6 | 	mov	arg01, #9
08af4     00 78 06 F6 | 	mov	arg02, #0
08af8     AC 64 B0 FD | 	call	#_ff_cc_send_cmd_0732
08afc     18 87 02 F6 | 	mov	local02, result1
08b00     07 86 4E F7 | 	zerox	local02, #7 wz
08b04     80 01 90 5D |  if_ne	jmp	#LR__0502
08b08     18 5E 05 F1 | 	add	fp, #24
08b0c     AF 76 02 F6 | 	mov	arg01, fp
08b10     18 5E 85 F1 | 	sub	fp, #24
08b14     10 78 06 F6 | 	mov	arg02, #16
08b18     D8 62 B0 FD | 	call	#_ff_cc_rcvr_datablock_0726
08b1c     18 8F 0A F6 | 	mov	local06, result1 wz
08b20     64 01 90 AD |  if_e	jmp	#LR__0502
08b24     18 5E 05 F1 | 	add	fp, #24
08b28     AF 86 C2 FA | 	rdbyte	local02, fp
08b2c     18 5E 85 F1 | 	sub	fp, #24
08b30     07 86 46 F7 | 	zerox	local02, #7
08b34     06 86 46 F0 | 	shr	local02, #6
08b38     01 86 0E F2 | 	cmp	local02, #1 wz
08b3c     5C 00 90 5D |  if_ne	jmp	#LR__0498
08b40     21 5E 05 F1 | 	add	fp, #33
08b44     AF 86 C2 FA | 	rdbyte	local02, fp
08b48     01 5E 85 F1 | 	sub	fp, #1
08b4c     AF 88 C2 FA | 	rdbyte	local03, fp
08b50     0F 88 46 F7 | 	zerox	local03, #15
08b54     08 88 66 F0 | 	shl	local03, #8
08b58     44 87 02 F1 | 	add	local02, local03
08b5c     01 5E 85 F1 | 	sub	fp, #1
08b60     AF 90 C2 FA | 	rdbyte	local07, fp
08b64     3F 90 06 F5 | 	and	local07, #63
08b68     10 90 66 F0 | 	shl	local07, #16
08b6c     48 87 02 F1 | 	add	local02, local07
08b70     01 86 06 F1 | 	add	local02, #1
08b74     09 5E 05 F1 | 	add	fp, #9
08b78     AF 86 62 FC | 	wrlong	local02, fp
08b7c     1C 5E 85 F1 | 	sub	fp, #28
08b80     AF 84 02 FB | 	rdlong	local01, fp
08b84     1C 5E 05 F1 | 	add	fp, #28
08b88     AF 88 02 FB | 	rdlong	local03, fp
08b8c     28 5E 85 F1 | 	sub	fp, #40
08b90     0A 88 66 F0 | 	shl	local03, #10
08b94     42 89 62 FC | 	wrlong	local03, local01
08b98     B0 00 90 FD | 	jmp	#LR__0499
08b9c                 | LR__0498
08b9c     1D 5E 05 F1 | 	add	fp, #29
08ba0     AF 86 C2 FA | 	rdbyte	local02, fp
08ba4     0F 86 06 F5 | 	and	local02, #15
08ba8     05 5E 05 F1 | 	add	fp, #5
08bac     AF 88 C2 FA | 	rdbyte	local03, fp
08bb0     80 88 06 F5 | 	and	local03, #128
08bb4     07 88 C6 F0 | 	sar	local03, #7
08bb8     44 87 02 F1 | 	add	local02, local03
08bbc     01 5E 85 F1 | 	sub	fp, #1
08bc0     AF 90 C2 FA | 	rdbyte	local07, fp
08bc4     03 90 06 F5 | 	and	local07, #3
08bc8     01 90 66 F0 | 	shl	local07, #1
08bcc     48 87 02 F1 | 	add	local02, local07
08bd0     02 86 06 F1 | 	add	local02, #2
08bd4     0D 5E 85 F1 | 	sub	fp, #13
08bd8     AF 86 42 FC | 	wrbyte	local02, fp
08bdc     0C 5E 05 F1 | 	add	fp, #12
08be0     AF 86 C2 FA | 	rdbyte	local02, fp
08be4     06 86 46 F0 | 	shr	local02, #6
08be8     01 5E 85 F1 | 	sub	fp, #1
08bec     AF 88 C2 FA | 	rdbyte	local03, fp
08bf0     0F 88 46 F7 | 	zerox	local03, #15
08bf4     02 88 66 F0 | 	shl	local03, #2
08bf8     44 87 02 F1 | 	add	local02, local03
08bfc     01 5E 85 F1 | 	sub	fp, #1
08c00     AF 90 C2 FA | 	rdbyte	local07, fp
08c04     03 90 06 F5 | 	and	local07, #3
08c08     0F 90 46 F7 | 	zerox	local07, #15
08c0c     0A 90 66 F0 | 	shl	local07, #10
08c10     48 87 02 F1 | 	add	local02, local07
08c14     01 86 06 F1 | 	add	local02, #1
08c18     0A 5E 05 F1 | 	add	fp, #10
08c1c     AF 86 62 FC | 	wrlong	local02, fp
08c20     1C 5E 85 F1 | 	sub	fp, #28
08c24     AF 84 02 FB | 	rdlong	local01, fp
08c28     1C 5E 05 F1 | 	add	fp, #28
08c2c     AF 88 02 FB | 	rdlong	local03, fp
08c30     14 5E 85 F1 | 	sub	fp, #20
08c34     AF 90 C2 FA | 	rdbyte	local07, fp
08c38     14 5E 85 F1 | 	sub	fp, #20
08c3c     07 90 46 F7 | 	zerox	local07, #7
08c40     09 90 86 F1 | 	sub	local07, #9
08c44     48 89 62 F0 | 	shl	local03, local07
08c48     42 89 62 FC | 	wrlong	local03, local01
08c4c                 | LR__0499
08c4c     10 5E 05 F1 | 	add	fp, #16
08c50     AF 00 68 FC | 	wrlong	#0, fp
08c54     10 5E 85 F1 | 	sub	fp, #16
08c58                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
08c58                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
08c58                 | ' 					*(LBA_t*)buff = cs << (n - 9);
08c58                 | ' 				}
08c58                 | ' 				res = RES_OK;
08c58                 | ' 			}
08c58                 | ' 			break;
08c58     2C 00 90 FD | 	jmp	#LR__0502
08c5c                 | LR__0500
08c5c     0C 5E 05 F1 | 	add	fp, #12
08c60     AF 86 02 FB | 	rdlong	local02, fp
08c64     43 01 69 FC | 	wrlong	#128, local02
08c68     04 5E 05 F1 | 	add	fp, #4
08c6c     AF 00 68 FC | 	wrlong	#0, fp
08c70     10 5E 85 F1 | 	sub	fp, #16
08c74                 | ' 			*(DWORD*)buff = 128;
08c74                 | ' 			res = RES_OK;
08c74                 | ' 			break;
08c74     10 00 90 FD | 	jmp	#LR__0502
08c78                 | LR__0501
08c78     04 86 06 F6 | 	mov	local02, #4
08c7c     10 5E 05 F1 | 	add	fp, #16
08c80     AF 08 68 FC | 	wrlong	#4, fp
08c84     10 5E 85 F1 | 	sub	fp, #16
08c88                 | LR__0502
08c88     8C 60 B0 FD | 	call	#_ff_cc_deselect_0720
08c8c                 | ' 			res = RES_PARERR;
08c8c                 | ' 	}
08c8c                 | ' 
08c8c                 | ' 	deselect();
08c8c                 | ' 
08c8c                 | ' 	return res;
08c8c     10 5E 05 F1 | 	add	fp, #16
08c90     AF 30 02 FB | 	rdlong	result1, fp
08c94     10 5E 85 F1 | 	sub	fp, #16
08c98                 | LR__0503
08c98     AF F0 03 F6 | 	mov	ptra, fp
08c9c     BF 00 A0 FD | 	call	#popregs_
08ca0                 | _ff_cc_disk_ioctl_ret
08ca0     2D 00 64 FD | 	ret
08ca4                 | 
08ca4                 | _ff_cc_disk_setpins
08ca4     00 76 0E F2 | 	cmp	arg01, #0 wz
08ca8     01 30 66 56 |  if_ne	neg	result1, #1
08cac     28 00 90 5D |  if_ne	jmp	#_ff_cc_disk_setpins_ret
08cb0     6C 1B 06 F1 | 	add	ptr__ff_cc_dat__, #364
08cb4     0D 79 62 FC | 	wrlong	arg02, ptr__ff_cc_dat__
08cb8     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08cbc     0D 7B 62 FC | 	wrlong	arg03, ptr__ff_cc_dat__
08cc0     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08cc4     0D 7D 62 FC | 	wrlong	arg04, ptr__ff_cc_dat__
08cc8     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08ccc     0D 7F 62 FC | 	wrlong	arg05, ptr__ff_cc_dat__
08cd0     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
08cd4     00 30 06 F6 | 	mov	result1, #0
08cd8                 | _ff_cc_disk_setpins_ret
08cd8     2D 00 64 FD | 	ret
08cdc                 | 
08cdc                 | _ff_cc_ld_word_0253
08cdc     01 76 06 F1 | 	add	arg01, #1
08ce0     3B 31 C2 FA | 	rdbyte	result1, arg01
08ce4     01 76 86 F1 | 	sub	arg01, #1
08ce8     07 30 46 F7 | 	zerox	result1, #7
08cec     0F 30 46 F7 | 	zerox	result1, #15
08cf0     08 30 66 F0 | 	shl	result1, #8
08cf4     3B 37 C2 FA | 	rdbyte	_var01, arg01
08cf8     1B 31 42 F5 | 	or	result1, _var01
08cfc                 | ' {
08cfc                 | ' 	WORD rv;
08cfc                 | ' 
08cfc                 | ' 	rv = ptr[1];
08cfc                 | ' 	rv = rv << 8 | ptr[0];
08cfc                 | ' 	return rv;
08cfc                 | _ff_cc_ld_word_0253_ret
08cfc     2D 00 64 FD | 	ret
08d00                 | 
08d00                 | _ff_cc_ld_dword_0255
08d00     03 76 06 F1 | 	add	arg01, #3
08d04     3B 31 C2 FA | 	rdbyte	result1, arg01
08d08     08 30 66 F0 | 	shl	result1, #8
08d0c     01 76 86 F1 | 	sub	arg01, #1
08d10     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d14     1B 31 42 F5 | 	or	result1, _var01
08d18     08 30 66 F0 | 	shl	result1, #8
08d1c     01 76 86 F1 | 	sub	arg01, #1
08d20     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d24     01 76 86 F1 | 	sub	arg01, #1
08d28     07 36 46 F7 | 	zerox	_var01, #7
08d2c     1B 31 42 F5 | 	or	result1, _var01
08d30     08 30 66 F0 | 	shl	result1, #8
08d34     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d38     1B 31 42 F5 | 	or	result1, _var01
08d3c                 | ' {
08d3c                 | ' 	DWORD rv;
08d3c                 | ' 
08d3c                 | ' 	rv = ptr[3];
08d3c                 | ' 	rv = rv << 8 | ptr[2];
08d3c                 | ' 	rv = rv << 8 | ptr[1];
08d3c                 | ' 	rv = rv << 8 | ptr[0];
08d3c                 | ' 	return rv;
08d3c                 | _ff_cc_ld_dword_0255_ret
08d3c     2D 00 64 FD | 	ret
08d40                 | 
08d40                 | _ff_cc_st_word_0256
08d40     3C 37 02 F6 | 	mov	_var01, arg02
08d44     0F 36 46 F7 | 	zerox	_var01, #15
08d48     3B 37 42 FC | 	wrbyte	_var01, arg01
08d4c     0F 78 46 F7 | 	zerox	arg02, #15
08d50     08 78 46 F0 | 	shr	arg02, #8
08d54     01 76 06 F1 | 	add	arg01, #1
08d58     0F 78 46 F7 | 	zerox	arg02, #15
08d5c     3B 79 42 FC | 	wrbyte	arg02, arg01
08d60                 | _ff_cc_st_word_0256_ret
08d60     2D 00 64 FD | 	ret
08d64                 | 
08d64                 | _ff_cc_st_dword_0257
08d64     3B 79 42 FC | 	wrbyte	arg02, arg01
08d68     08 78 46 F0 | 	shr	arg02, #8
08d6c     01 76 06 F1 | 	add	arg01, #1
08d70     3B 79 42 FC | 	wrbyte	arg02, arg01
08d74     08 78 46 F0 | 	shr	arg02, #8
08d78     01 76 06 F1 | 	add	arg01, #1
08d7c     3B 79 42 FC | 	wrbyte	arg02, arg01
08d80     08 78 46 F0 | 	shr	arg02, #8
08d84     01 76 06 F1 | 	add	arg01, #1
08d88     3B 79 42 FC | 	wrbyte	arg02, arg01
08d8c                 | _ff_cc_st_dword_0257_ret
08d8c     2D 00 64 FD | 	ret
08d90                 | 
08d90                 | _ff_cc_mem_cpy_0260
08d90     00 7A 0E F2 | 	cmp	arg03, #0 wz
08d94     24 00 90 AD |  if_e	jmp	#LR__0508
08d98                 | ' 		do {
08d98     80 72 9F FE | 	loc	pa,	#(@LR__0506-@LR__0504)
08d9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
08da0                 | LR__0504
08da0     3D 0D D8 FC | 	rep	@LR__0507, arg03
08da4                 | LR__0505
08da4     3C 37 02 F6 | 	mov	_var01, arg02
08da8     01 36 06 F1 | 	add	_var01, #1
08dac     3C 39 C2 FA | 	rdbyte	_var02, arg02
08db0     1B 79 02 F6 | 	mov	arg02, _var01
08db4     3B 39 42 FC | 	wrbyte	_var02, arg01
08db8     01 76 06 F1 | 	add	arg01, #1
08dbc                 | LR__0506
08dbc                 | LR__0507
08dbc                 | LR__0508
08dbc                 | _ff_cc_mem_cpy_0260_ret
08dbc     2D 00 64 FD | 	ret
08dc0                 | 
08dc0                 | _ff_cc_mem_cmp_0266
08dc0     64 72 9F FE | 	loc	pa,	#(@LR__0510-@LR__0509)
08dc4     93 00 A0 FD | 	call	#FCACHE_LOAD_
08dc8                 | ' 
08dc8                 | ' 	do {
08dc8                 | LR__0509
08dc8     3B 37 C2 FA | 	rdbyte	_var01, arg01
08dcc     3C 39 C2 FA | 	rdbyte	_var02, arg02
08dd0     1C 37 82 F1 | 	sub	_var01, _var02
08dd4     01 7A 86 F1 | 	sub	arg03, #1
08dd8     3D 7B 0A F6 | 	mov	arg03, arg03 wz
08ddc     01 76 06 F1 | 	add	arg01, #1
08de0     01 78 06 F1 | 	add	arg02, #1
08de4     08 00 90 AD |  if_e	jmp	#LR__0511
08de8     00 36 0E F2 | 	cmp	_var01, #0 wz
08dec     D8 FF 9F AD |  if_e	jmp	#LR__0509
08df0                 | LR__0510
08df0                 | LR__0511
08df0                 | ' 
08df0                 | ' 	return r;
08df0     1B 31 02 F6 | 	mov	result1, _var01
08df4                 | _ff_cc_mem_cmp_0266_ret
08df4     2D 00 64 FD | 	ret
08df8                 | 
08df8                 | _ff_cc_chk_chr_0267
08df8     1C 72 9F FE | 	loc	pa,	#(@LR__0513-@LR__0512)
08dfc     93 00 A0 FD | 	call	#FCACHE_LOAD_
08e00                 | ' {
08e00                 | ' 	while (*str && *str != chr) str++;
08e00                 | LR__0512
08e00     3B 37 CA FA | 	rdbyte	_var01, arg01 wz
08e04     10 00 90 AD |  if_e	jmp	#LR__0514
08e08     3B 39 C2 FA | 	rdbyte	_var02, arg01
08e0c     3C 39 0A F2 | 	cmp	_var02, arg02 wz
08e10     01 76 06 51 |  if_ne	add	arg01, #1
08e14     E8 FF 9F 5D |  if_ne	jmp	#LR__0512
08e18                 | LR__0513
08e18                 | LR__0514
08e18                 | ' 	return *str;
08e18     3B 31 C2 FA | 	rdbyte	result1, arg01
08e1c                 | _ff_cc_chk_chr_0267_ret
08e1c     2D 00 64 FD | 	ret
08e20                 | 
08e20                 | _ff_cc_sync_window_0271
08e20     06 5A 05 F6 | 	mov	COUNT_, #6
08e24     B0 00 A0 FD | 	call	#pushregs_
08e28     3B 85 02 F6 | 	mov	local01, arg01
08e2c     00 86 06 F6 | 	mov	local02, #0
08e30     03 84 06 F1 | 	add	local01, #3
08e34     42 89 CA FA | 	rdbyte	local03, local01 wz
08e38     03 84 86 F1 | 	sub	local01, #3
08e3c     A8 00 90 AD |  if_e	jmp	#LR__0517
08e40     01 84 06 F1 | 	add	local01, #1
08e44     42 77 C2 FA | 	rdbyte	arg01, local01
08e48     2F 84 06 F1 | 	add	local01, #47
08e4c     42 79 02 F6 | 	mov	arg02, local01
08e50     04 84 86 F1 | 	sub	local01, #4
08e54     42 7B 02 FB | 	rdlong	arg03, local01
08e58     2C 84 86 F1 | 	sub	local01, #44
08e5c     01 7C 06 F6 | 	mov	arg04, #1
08e60     C0 FA BF FD | 	call	#_ff_cc_disk_write
08e64     00 30 0E F2 | 	cmp	result1, #0 wz
08e68     78 00 90 5D |  if_ne	jmp	#LR__0515
08e6c     03 84 06 F1 | 	add	local01, #3
08e70     42 01 48 FC | 	wrbyte	#0, local01
08e74     29 84 06 F1 | 	add	local01, #41
08e78     42 89 02 FB | 	rdlong	local03, local01
08e7c     0C 84 86 F1 | 	sub	local01, #12
08e80     42 8B 02 FB | 	rdlong	local04, local01
08e84     45 89 82 F1 | 	sub	local03, local04
08e88     08 84 86 F1 | 	sub	local01, #8
08e8c     42 8D 02 FB | 	rdlong	local05, local01
08e90     18 84 86 F1 | 	sub	local01, #24
08e94     46 89 1A F2 | 	cmp	local03, local05 wcz
08e98     4C 00 90 3D |  if_ae	jmp	#LR__0516
08e9c     02 84 06 F1 | 	add	local01, #2
08ea0     42 89 C2 FA | 	rdbyte	local03, local01
08ea4     02 84 86 F1 | 	sub	local01, #2
08ea8     07 88 46 F7 | 	zerox	local03, #7
08eac     02 88 0E F2 | 	cmp	local03, #2 wz
08eb0     34 00 90 5D |  if_ne	jmp	#LR__0516
08eb4     01 84 06 F1 | 	add	local01, #1
08eb8     42 77 C2 FA | 	rdbyte	arg01, local01
08ebc     2F 84 06 F1 | 	add	local01, #47
08ec0     42 79 02 F6 | 	mov	arg02, local01
08ec4     04 84 86 F1 | 	sub	local01, #4
08ec8     42 7B 02 FB | 	rdlong	arg03, local01
08ecc     14 84 86 F1 | 	sub	local01, #20
08ed0     42 8F 02 FB | 	rdlong	local06, local01
08ed4     47 7B 02 F1 | 	add	arg03, local06
08ed8     01 7C 06 F6 | 	mov	arg04, #1
08edc     44 FA BF FD | 	call	#_ff_cc_disk_write
08ee0     04 00 90 FD | 	jmp	#LR__0516
08ee4                 | LR__0515
08ee4     01 86 06 F6 | 	mov	local02, #1
08ee8                 | LR__0516
08ee8                 | LR__0517
08ee8                 | ' 			res = FR_DISK_ERR;
08ee8                 | ' 		}
08ee8                 | ' 	}
08ee8                 | ' 	return res;
08ee8     43 31 02 F6 | 	mov	result1, local02
08eec     AF F0 03 F6 | 	mov	ptra, fp
08ef0     BF 00 A0 FD | 	call	#popregs_
08ef4                 | _ff_cc_sync_window_0271_ret
08ef4     2D 00 64 FD | 	ret
08ef8                 | 
08ef8                 | _ff_cc_move_window_0273
08ef8     04 5A 05 F6 | 	mov	COUNT_, #4
08efc     B0 00 A0 FD | 	call	#pushregs_
08f00     3B 85 02 F6 | 	mov	local01, arg01
08f04     3C 87 02 F6 | 	mov	local02, arg02
08f08     00 88 06 F6 | 	mov	local03, #0
08f0c     2C 84 06 F1 | 	add	local01, #44
08f10     42 8B 02 FB | 	rdlong	local04, local01
08f14     2C 84 86 F1 | 	sub	local01, #44
08f18     45 87 0A F2 | 	cmp	local02, local04 wz
08f1c     44 00 90 AD |  if_e	jmp	#LR__0519
08f20     42 77 02 F6 | 	mov	arg01, local01
08f24     F8 FE BF FD | 	call	#_ff_cc_sync_window_0271
08f28     18 89 0A F6 | 	mov	local03, result1 wz
08f2c     34 00 90 5D |  if_ne	jmp	#LR__0518
08f30     01 84 06 F1 | 	add	local01, #1
08f34     42 77 C2 FA | 	rdbyte	arg01, local01
08f38     2F 84 06 F1 | 	add	local01, #47
08f3c     42 79 02 F6 | 	mov	arg02, local01
08f40     30 84 86 F1 | 	sub	local01, #48
08f44     43 7B 02 F6 | 	mov	arg03, local02
08f48     01 7C 06 F6 | 	mov	arg04, #1
08f4c     04 F9 BF FD | 	call	#_ff_cc_disk_read
08f50     00 30 0E F2 | 	cmp	result1, #0 wz
08f54     01 86 66 56 |  if_ne	neg	local02, #1
08f58     01 88 06 56 |  if_ne	mov	local03, #1
08f5c     2C 84 06 F1 | 	add	local01, #44
08f60     42 87 62 FC | 	wrlong	local02, local01
08f64                 | LR__0518
08f64                 | LR__0519
08f64                 | ' 				sect = (LBA_t)0 - 1;
08f64                 | ' 				res = FR_DISK_ERR;
08f64                 | ' 			}
08f64                 | ' 			fs->winsect = sect;
08f64                 | ' 		}
08f64                 | ' 	}
08f64                 | ' 	return res;
08f64     44 31 02 F6 | 	mov	result1, local03
08f68     AF F0 03 F6 | 	mov	ptra, fp
08f6c     BF 00 A0 FD | 	call	#popregs_
08f70                 | _ff_cc_move_window_0273_ret
08f70     2D 00 64 FD | 	ret
08f74                 | 
08f74                 | _ff_cc_sync_fs_0275
08f74     0A 5A 05 F6 | 	mov	COUNT_, #10
08f78     B0 00 A0 FD | 	call	#pushregs_
08f7c     3B 85 02 F6 | 	mov	local01, arg01
08f80     9C FE BF FD | 	call	#_ff_cc_sync_window_0271
08f84     18 87 0A F6 | 	mov	local02, result1 wz
08f88     54 01 90 5D |  if_ne	jmp	#LR__0525
08f8c     42 89 C2 FA | 	rdbyte	local03, local01
08f90     03 88 0E F2 | 	cmp	local03, #3 wz
08f94     2C 01 90 5D |  if_ne	jmp	#LR__0524
08f98     04 84 06 F1 | 	add	local01, #4
08f9c     42 8B C2 FA | 	rdbyte	local04, local01
08fa0     04 84 86 F1 | 	sub	local01, #4
08fa4     07 8A 46 F7 | 	zerox	local04, #7
08fa8     01 8A 0E F2 | 	cmp	local04, #1 wz
08fac     14 01 90 5D |  if_ne	jmp	#LR__0524
08fb0     30 84 06 F1 | 	add	local01, #48
08fb4     42 77 02 F6 | 	mov	arg01, local01
08fb8     30 84 86 F1 | 	sub	local01, #48
08fbc     00 78 06 F6 | 	mov	arg02, #0
08fc0     09 7A C6 F9 | 	decod	arg03, #9
08fc4                 | ' {
08fc4                 | ' 	BYTE *d = (BYTE*)dst;
08fc4                 | ' 
08fc4                 | ' 	do {
08fc4     44 70 9F FE | 	loc	pa,	#(@LR__0522-@LR__0520)
08fc8     93 00 A0 FD | 	call	#FCACHE_LOAD_
08fcc                 | LR__0520
08fcc     3D 05 D8 FC | 	rep	@LR__0523, arg03
08fd0                 | LR__0521
08fd0     3B 79 42 FC | 	wrbyte	arg02, arg01
08fd4     01 76 06 F1 | 	add	arg01, #1
08fd8                 | LR__0522
08fd8                 | LR__0523
08fd8     30 84 06 F1 | 	add	local01, #48
08fdc     42 77 02 F6 | 	mov	arg01, local01
08fe0     30 84 86 F1 | 	sub	local01, #48
08fe4     FE 77 06 F1 | 	add	arg01, #510
08fe8     55 00 00 FF 
08fec     55 78 06 F6 | 	mov	arg02, ##43605
08ff0     4C FD BF FD | 	call	#_ff_cc_st_word_0256
08ff4     30 84 06 F1 | 	add	local01, #48
08ff8     42 77 02 F6 | 	mov	arg01, local01
08ffc     30 84 86 F1 | 	sub	local01, #48
09000     A9 B0 20 FF 
09004     52 78 06 F6 | 	mov	arg02, ##1096897106
09008     58 FD BF FD | 	call	#_ff_cc_st_dword_0257
0900c     30 84 06 F1 | 	add	local01, #48
09010     42 77 02 F6 | 	mov	arg01, local01
09014     30 84 86 F1 | 	sub	local01, #48
09018     E4 77 06 F1 | 	add	arg01, #484
0901c     B9 A0 30 FF 
09020     72 78 06 F6 | 	mov	arg02, ##1631679090
09024     3C FD BF FD | 	call	#_ff_cc_st_dword_0257
09028     30 84 06 F1 | 	add	local01, #48
0902c     42 77 02 F6 | 	mov	arg01, local01
09030     E8 77 06 F1 | 	add	arg01, #488
09034     20 84 86 F1 | 	sub	local01, #32
09038     42 79 02 FB | 	rdlong	arg02, local01
0903c     10 84 86 F1 | 	sub	local01, #16
09040     20 FD BF FD | 	call	#_ff_cc_st_dword_0257
09044     30 84 06 F1 | 	add	local01, #48
09048     42 77 02 F6 | 	mov	arg01, local01
0904c     EC 77 06 F1 | 	add	arg01, #492
09050     24 84 86 F1 | 	sub	local01, #36
09054     42 79 02 FB | 	rdlong	arg02, local01
09058     0C 84 86 F1 | 	sub	local01, #12
0905c     04 FD BF FD | 	call	#_ff_cc_st_dword_0257
09060     1C 84 06 F1 | 	add	local01, #28
09064     42 89 02 FB | 	rdlong	local03, local01
09068     01 88 06 F1 | 	add	local03, #1
0906c     10 84 06 F1 | 	add	local01, #16
09070     42 89 62 FC | 	wrlong	local03, local01
09074     2B 84 86 F1 | 	sub	local01, #43
09078     42 8B C2 FA | 	rdbyte	local04, local01
0907c     2F 84 06 F1 | 	add	local01, #47
09080     42 8D 02 F6 | 	mov	local05, local01
09084     46 8F 02 F6 | 	mov	local06, local05
09088     04 84 86 F1 | 	sub	local01, #4
0908c     42 91 02 FB | 	rdlong	local07, local01
09090     2C 84 86 F1 | 	sub	local01, #44
09094     48 93 02 F6 | 	mov	local08, local07
09098     01 94 06 F6 | 	mov	local09, #1
0909c     45 77 02 F6 | 	mov	arg01, local04
090a0     47 79 02 F6 | 	mov	arg02, local06
090a4     49 7B 02 F6 | 	mov	arg03, local08
090a8     01 7C 06 F6 | 	mov	arg04, #1
090ac     74 F8 BF FD | 	call	#_ff_cc_disk_write
090b0     18 97 02 F6 | 	mov	local10, result1
090b4     00 88 06 F6 | 	mov	local03, #0
090b8     04 84 06 F1 | 	add	local01, #4
090bc     42 01 48 FC | 	wrbyte	#0, local01
090c0     04 84 86 F1 | 	sub	local01, #4
090c4                 | LR__0524
090c4     01 84 06 F1 | 	add	local01, #1
090c8     42 77 C2 FA | 	rdbyte	arg01, local01
090cc     00 78 06 F6 | 	mov	arg02, #0
090d0     00 7A 06 F6 | 	mov	arg03, #0
090d4     68 F9 BF FD | 	call	#_ff_cc_disk_ioctl
090d8     00 30 0E F2 | 	cmp	result1, #0 wz
090dc     01 86 06 56 |  if_ne	mov	local02, #1
090e0                 | LR__0525
090e0                 | ' 	}
090e0                 | ' 
090e0                 | ' 	return res;
090e0     43 31 02 F6 | 	mov	result1, local02
090e4     AF F0 03 F6 | 	mov	ptra, fp
090e8     BF 00 A0 FD | 	call	#popregs_
090ec                 | _ff_cc_sync_fs_0275_ret
090ec     2D 00 64 FD | 	ret
090f0                 | 
090f0                 | _ff_cc_clst2sect_0276
090f0     02 78 86 F1 | 	sub	arg02, #2
090f4     14 76 06 F1 | 	add	arg01, #20
090f8     3B 37 02 FB | 	rdlong	_var01, arg01
090fc     14 76 86 F1 | 	sub	arg01, #20
09100     02 36 86 F1 | 	sub	_var01, #2
09104     1B 79 1A F2 | 	cmp	arg02, _var01 wcz
09108     00 30 06 36 |  if_ae	mov	result1, #0
0910c     1C 00 90 3D |  if_ae	jmp	#_ff_cc_clst2sect_0276_ret
09110                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
09110     0A 76 06 F1 | 	add	arg01, #10
09114     3B 39 E2 FA | 	rdword	_var02, arg01
09118     3C 39 02 FD | 	qmul	_var02, arg02
0911c     18 3A 62 FD | 	getqx	_var03
09120     1E 76 06 F1 | 	add	arg01, #30
09124     3B 31 02 FB | 	rdlong	result1, arg01
09128     1D 31 02 F1 | 	add	result1, _var03
0912c                 | _ff_cc_clst2sect_0276_ret
0912c     2D 00 64 FD | 	ret
09130                 | 
09130                 | _ff_cc_get_fat_0281
09130     0C 5A 05 F6 | 	mov	COUNT_, #12
09134     B0 00 A0 FD | 	call	#pushregs_
09138     3B 85 02 F6 | 	mov	local01, arg01
0913c     3C 87 02 F6 | 	mov	local02, arg02
09140     42 89 02 FB | 	rdlong	local03, local01
09144     02 86 1E F2 | 	cmp	local02, #2 wcz
09148     18 00 90 CD |  if_b	jmp	#LR__0526
0914c     14 88 06 F1 | 	add	local03, #20
09150     44 8B 02 FB | 	rdlong	local04, local03
09154     14 88 86 F1 | 	sub	local03, #20
09158     45 8D 02 F6 | 	mov	local05, local04
0915c     46 87 1A F2 | 	cmp	local02, local05 wcz
09160     08 00 90 CD |  if_b	jmp	#LR__0527
09164                 | LR__0526
09164     01 8E 06 F6 | 	mov	local06, #1
09168     7C 01 90 FD | 	jmp	#LR__0534
0916c                 | LR__0527
0916c     01 8E 66 F6 | 	neg	local06, #1
09170                 | ' 		val = 0xFFFFFFFF;
09170                 | ' 
09170                 | ' 		switch (fs->fs_type) {
09170     44 91 C2 FA | 	rdbyte	local07, local03
09174     01 90 86 F1 | 	sub	local07, #1
09178     03 90 26 F3 | 	fle	local07, #3
0917c     30 90 62 FD | 	jmprel	local07
09180                 | LR__0528
09180     0C 00 90 FD | 	jmp	#LR__0529
09184     BC 00 90 FD | 	jmp	#LR__0530
09188     04 01 90 FD | 	jmp	#LR__0531
0918c     54 01 90 FD | 	jmp	#LR__0532
09190                 | LR__0529
09190     43 93 02 F6 | 	mov	local08, local02
09194     43 8B 02 F6 | 	mov	local04, local02
09198     01 8A 46 F0 | 	shr	local04, #1
0919c     45 93 02 F1 | 	add	local08, local04
091a0     44 77 02 F6 | 	mov	arg01, local03
091a4     49 95 02 F6 | 	mov	local09, local08
091a8     09 94 46 F0 | 	shr	local09, #9
091ac     20 88 06 F1 | 	add	local03, #32
091b0     44 79 02 FB | 	rdlong	arg02, local03
091b4     20 88 86 F1 | 	sub	local03, #32
091b8     4A 79 02 F1 | 	add	arg02, local09
091bc     38 FD BF FD | 	call	#_ff_cc_move_window_0273
091c0     00 30 0E F2 | 	cmp	result1, #0 wz
091c4     20 01 90 5D |  if_ne	jmp	#LR__0533
091c8     49 97 02 F6 | 	mov	local10, local08
091cc     FF 97 06 F5 | 	and	local10, #511
091d0     30 88 06 F1 | 	add	local03, #48
091d4     44 97 02 F1 | 	add	local10, local03
091d8     4B 99 C2 FA | 	rdbyte	local11, local10
091dc     30 88 86 F1 | 	sub	local03, #48
091e0     44 77 02 F6 | 	mov	arg01, local03
091e4     01 92 06 F1 | 	add	local08, #1
091e8     49 95 02 F6 | 	mov	local09, local08
091ec     09 94 46 F0 | 	shr	local09, #9
091f0     20 88 06 F1 | 	add	local03, #32
091f4     44 79 02 FB | 	rdlong	arg02, local03
091f8     20 88 86 F1 | 	sub	local03, #32
091fc     4A 79 02 F1 | 	add	arg02, local09
09200     F4 FC BF FD | 	call	#_ff_cc_move_window_0273
09204     00 30 0E F2 | 	cmp	result1, #0 wz
09208     DC 00 90 5D |  if_ne	jmp	#LR__0533
0920c     FF 93 06 F5 | 	and	local08, #511
09210     30 88 06 F1 | 	add	local03, #48
09214     44 93 02 F1 | 	add	local08, local03
09218     49 8B C2 FA | 	rdbyte	local04, local08
0921c     08 8A 66 F0 | 	shl	local04, #8
09220     45 99 42 F5 | 	or	local11, local04
09224     01 86 CE F7 | 	test	local02, #1 wz
09228     04 98 46 50 |  if_ne	shr	local11, #4
0922c     4C 8D 02 56 |  if_ne	mov	local05, local11
09230     07 00 00 AF 
09234     FF 99 06 A5 |  if_e	and	local11, ##4095
09238     4C 8D 02 A6 |  if_e	mov	local05, local11
0923c     46 8F 02 F6 | 	mov	local06, local05
09240                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
09240                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
09240                 | ' 			break;
09240     A4 00 90 FD | 	jmp	#LR__0533
09244                 | LR__0530
09244     44 77 02 F6 | 	mov	arg01, local03
09248     43 95 02 F6 | 	mov	local09, local02
0924c     08 94 46 F0 | 	shr	local09, #8
09250     20 88 06 F1 | 	add	local03, #32
09254     44 79 02 FB | 	rdlong	arg02, local03
09258     20 88 86 F1 | 	sub	local03, #32
0925c     4A 79 02 F1 | 	add	arg02, local09
09260     94 FC BF FD | 	call	#_ff_cc_move_window_0273
09264     00 30 0E F2 | 	cmp	result1, #0 wz
09268     7C 00 90 5D |  if_ne	jmp	#LR__0533
0926c     30 88 06 F1 | 	add	local03, #48
09270     01 86 66 F0 | 	shl	local02, #1
09274     FF 87 06 F5 | 	and	local02, #511
09278     43 89 02 F1 | 	add	local03, local02
0927c     44 77 02 F6 | 	mov	arg01, local03
09280     58 FA BF FD | 	call	#_ff_cc_ld_word_0253
09284     0F 30 46 F7 | 	zerox	result1, #15
09288     18 8F 02 F6 | 	mov	local06, result1
0928c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
0928c                 | ' 			break;
0928c     58 00 90 FD | 	jmp	#LR__0533
09290                 | LR__0531
09290     44 77 02 F6 | 	mov	arg01, local03
09294     43 95 02 F6 | 	mov	local09, local02
09298     07 94 46 F0 | 	shr	local09, #7
0929c     20 88 06 F1 | 	add	local03, #32
092a0     44 79 02 FB | 	rdlong	arg02, local03
092a4     20 88 86 F1 | 	sub	local03, #32
092a8     4A 79 02 F1 | 	add	arg02, local09
092ac     48 FC BF FD | 	call	#_ff_cc_move_window_0273
092b0     00 30 0E F2 | 	cmp	result1, #0 wz
092b4     30 00 90 5D |  if_ne	jmp	#LR__0533
092b8     30 88 06 F1 | 	add	local03, #48
092bc     44 77 02 F6 | 	mov	arg01, local03
092c0     43 9B 02 F6 | 	mov	local12, local02
092c4     02 9A 66 F0 | 	shl	local12, #2
092c8     FF 9B 06 F5 | 	and	local12, #511
092cc     4D 77 02 F1 | 	add	arg01, local12
092d0     2C FA BF FD | 	call	#_ff_cc_ld_dword_0255
092d4     18 8F 02 F6 | 	mov	local06, result1
092d8     FF FF 07 FF 
092dc     FF 8F 06 F5 | 	and	local06, ##268435455
092e0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
092e0                 | ' 			break;
092e0     04 00 90 FD | 	jmp	#LR__0533
092e4                 | LR__0532
092e4     01 8E 06 F6 | 	mov	local06, #1
092e8                 | LR__0533
092e8                 | LR__0534
092e8                 | ' 			val = 1;
092e8                 | ' 		}
092e8                 | ' 	}
092e8                 | ' 
092e8                 | ' 	return val;
092e8     47 31 02 F6 | 	mov	result1, local06
092ec     AF F0 03 F6 | 	mov	ptra, fp
092f0     BF 00 A0 FD | 	call	#popregs_
092f4                 | _ff_cc_get_fat_0281_ret
092f4     2D 00 64 FD | 	ret
092f8                 | 
092f8                 | _ff_cc_put_fat_0285
092f8     10 5A 05 F6 | 	mov	COUNT_, #16
092fc     B0 00 A0 FD | 	call	#pushregs_
09300     3B 85 02 F6 | 	mov	local01, arg01
09304     3C 87 02 F6 | 	mov	local02, arg02
09308     3D 89 02 F6 | 	mov	local03, arg03
0930c     02 8A 06 F6 | 	mov	local04, #2
09310     02 86 1E F2 | 	cmp	local02, #2 wcz
09314     D0 02 90 CD |  if_b	jmp	#LR__0544
09318     14 84 06 F1 | 	add	local01, #20
0931c     42 8D 02 FB | 	rdlong	local05, local01
09320     14 84 86 F1 | 	sub	local01, #20
09324     46 8F 02 F6 | 	mov	local06, local05
09328     47 87 1A F2 | 	cmp	local02, local06 wcz
0932c     B8 02 90 3D |  if_ae	jmp	#LR__0544
09330                 | ' 		switch (fs->fs_type) {
09330     42 91 C2 FA | 	rdbyte	local07, local01
09334     01 90 86 F1 | 	sub	local07, #1
09338     03 90 26 F3 | 	fle	local07, #3
0933c     30 90 62 FD | 	jmprel	local07
09340                 | LR__0535
09340     0C 00 90 FD | 	jmp	#LR__0536
09344     54 01 90 FD | 	jmp	#LR__0541
09348     D8 01 90 FD | 	jmp	#LR__0542
0934c     98 02 90 FD | 	jmp	#LR__0543
09350                 | LR__0536
09350     43 93 02 F6 | 	mov	local08, local02
09354     43 8D 02 F6 | 	mov	local05, local02
09358     01 8C 46 F0 | 	shr	local05, #1
0935c     46 93 02 F1 | 	add	local08, local05
09360     42 8F 02 F6 | 	mov	local06, local01
09364     49 95 02 F6 | 	mov	local09, local08
09368     09 94 46 F0 | 	shr	local09, #9
0936c     20 84 06 F1 | 	add	local01, #32
09370     42 97 02 FB | 	rdlong	local10, local01
09374     20 84 86 F1 | 	sub	local01, #32
09378     4B 8D 02 F6 | 	mov	local05, local10
0937c     4A 8D 02 F1 | 	add	local05, local09
09380     46 99 02 F6 | 	mov	local11, local05
09384     47 77 02 F6 | 	mov	arg01, local06
09388     4C 79 02 F6 | 	mov	arg02, local11
0938c     68 FB BF FD | 	call	#_ff_cc_move_window_0273
09390     18 9B 02 F6 | 	mov	local12, result1
09394     4D 8B 0A F6 | 	mov	local04, local12 wz
09398     4C 02 90 5D |  if_ne	jmp	#LR__0543
0939c     30 84 06 F1 | 	add	local01, #48
093a0     42 9D 02 F6 | 	mov	local13, local01
093a4     49 9B 02 F6 | 	mov	local12, local08
093a8     FF 9B 06 F5 | 	and	local12, #511
093ac     4D 9D 02 F1 | 	add	local13, local12
093b0     01 86 CE F7 | 	test	local02, #1 wz
093b4     30 84 86 F1 | 	sub	local01, #48
093b8     01 92 06 F1 | 	add	local08, #1
093bc     1C 00 90 AD |  if_e	jmp	#LR__0537
093c0     4E 8F C2 FA | 	rdbyte	local06, local13
093c4     0F 8E 06 F5 | 	and	local06, #15
093c8     44 97 02 F6 | 	mov	local10, local03
093cc     07 96 46 F7 | 	zerox	local10, #7
093d0     04 96 66 F0 | 	shl	local10, #4
093d4     4B 8F 42 F5 | 	or	local06, local10
093d8     04 00 90 FD | 	jmp	#LR__0538
093dc                 | LR__0537
093dc     44 8F 02 F6 | 	mov	local06, local03
093e0                 | LR__0538
093e0     4E 8F 42 FC | 	wrbyte	local06, local13
093e4     03 84 06 F1 | 	add	local01, #3
093e8     42 03 48 FC | 	wrbyte	#1, local01
093ec     03 84 86 F1 | 	sub	local01, #3
093f0     42 8F 02 F6 | 	mov	local06, local01
093f4     49 95 02 F6 | 	mov	local09, local08
093f8     09 94 46 F0 | 	shr	local09, #9
093fc     20 84 06 F1 | 	add	local01, #32
09400     42 97 02 FB | 	rdlong	local10, local01
09404     20 84 86 F1 | 	sub	local01, #32
09408     4B 8D 02 F6 | 	mov	local05, local10
0940c     4A 8D 02 F1 | 	add	local05, local09
09410     46 99 02 F6 | 	mov	local11, local05
09414     47 77 02 F6 | 	mov	arg01, local06
09418     4C 79 02 F6 | 	mov	arg02, local11
0941c     D8 FA BF FD | 	call	#_ff_cc_move_window_0273
09420     18 9B 02 F6 | 	mov	local12, result1
09424     4D 8B 0A F6 | 	mov	local04, local12 wz
09428     BC 01 90 5D |  if_ne	jmp	#LR__0543
0942c     30 84 06 F1 | 	add	local01, #48
09430     42 9D 02 F6 | 	mov	local13, local01
09434     49 95 02 F6 | 	mov	local09, local08
09438     FF 95 06 F5 | 	and	local09, #511
0943c     4A 97 02 F6 | 	mov	local10, local09
09440     4A 9D 02 F1 | 	add	local13, local09
09444     43 8D 02 F6 | 	mov	local05, local02
09448     01 8C 0E F5 | 	and	local05, #1 wz
0944c     30 84 86 F1 | 	sub	local01, #48
09450     10 00 90 AD |  if_e	jmp	#LR__0539
09454     44 95 02 F6 | 	mov	local09, local03
09458     04 94 46 F0 | 	shr	local09, #4
0945c     4A 8F 02 F6 | 	mov	local06, local09
09460     20 00 90 FD | 	jmp	#LR__0540
09464                 | LR__0539
09464     4E 97 C2 FA | 	rdbyte	local10, local13
09468     F0 96 06 F5 | 	and	local10, #240
0946c     44 99 02 F6 | 	mov	local11, local03
09470     08 98 46 F0 | 	shr	local11, #8
09474     07 98 46 F7 | 	zerox	local11, #7
09478     0F 98 06 F5 | 	and	local11, #15
0947c     4C 97 42 F5 | 	or	local10, local11
09480     4B 8F 02 F6 | 	mov	local06, local10
09484                 | LR__0540
09484     4E 8F 42 FC | 	wrbyte	local06, local13
09488     01 8E 06 F6 | 	mov	local06, #1
0948c     03 84 06 F1 | 	add	local01, #3
09490     42 03 48 FC | 	wrbyte	#1, local01
09494     03 84 86 F1 | 	sub	local01, #3
09498                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
09498                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
09498                 | ' 			fs->wflag = 1;
09498                 | ' 			break;
09498     4C 01 90 FD | 	jmp	#LR__0543
0949c                 | LR__0541
0949c     42 8F 02 F6 | 	mov	local06, local01
094a0     43 95 02 F6 | 	mov	local09, local02
094a4     08 94 46 F0 | 	shr	local09, #8
094a8     20 84 06 F1 | 	add	local01, #32
094ac     42 97 02 FB | 	rdlong	local10, local01
094b0     20 84 86 F1 | 	sub	local01, #32
094b4     4B 8D 02 F6 | 	mov	local05, local10
094b8     4A 8D 02 F1 | 	add	local05, local09
094bc     46 99 02 F6 | 	mov	local11, local05
094c0     47 77 02 F6 | 	mov	arg01, local06
094c4     4C 79 02 F6 | 	mov	arg02, local11
094c8     2C FA BF FD | 	call	#_ff_cc_move_window_0273
094cc     18 9B 02 F6 | 	mov	local12, result1
094d0     4D 8B 0A F6 | 	mov	local04, local12 wz
094d4     10 01 90 5D |  if_ne	jmp	#LR__0543
094d8     30 84 06 F1 | 	add	local01, #48
094dc     42 8D 02 F6 | 	mov	local05, local01
094e0     43 95 02 F6 | 	mov	local09, local02
094e4     01 94 66 F0 | 	shl	local09, #1
094e8     4A 97 02 F6 | 	mov	local10, local09
094ec     FF 97 06 F5 | 	and	local10, #511
094f0     4B 99 02 F6 | 	mov	local11, local10
094f4     46 9B 02 F6 | 	mov	local12, local05
094f8     4C 9B 02 F1 | 	add	local12, local11
094fc     44 9F 02 F6 | 	mov	local14, local03
09500     4D 77 02 F6 | 	mov	arg01, local12
09504     4F 79 02 F6 | 	mov	arg02, local14
09508     30 84 86 F1 | 	sub	local01, #48
0950c     30 F8 BF FD | 	call	#_ff_cc_st_word_0256
09510     01 8E 06 F6 | 	mov	local06, #1
09514     03 84 06 F1 | 	add	local01, #3
09518     42 03 48 FC | 	wrbyte	#1, local01
0951c     03 84 86 F1 | 	sub	local01, #3
09520                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
09520                 | ' 			fs->wflag = 1;
09520                 | ' 			break;
09520     C4 00 90 FD | 	jmp	#LR__0543
09524                 | LR__0542
09524     42 8F 02 F6 | 	mov	local06, local01
09528     43 95 02 F6 | 	mov	local09, local02
0952c     07 94 46 F0 | 	shr	local09, #7
09530     20 84 06 F1 | 	add	local01, #32
09534     42 97 02 FB | 	rdlong	local10, local01
09538     20 84 86 F1 | 	sub	local01, #32
0953c     4B 8D 02 F6 | 	mov	local05, local10
09540     4A 8D 02 F1 | 	add	local05, local09
09544     46 99 02 F6 | 	mov	local11, local05
09548     47 77 02 F6 | 	mov	arg01, local06
0954c     4C 79 02 F6 | 	mov	arg02, local11
09550     A4 F9 BF FD | 	call	#_ff_cc_move_window_0273
09554     18 9B 02 F6 | 	mov	local12, result1
09558     4D 8B 0A F6 | 	mov	local04, local12 wz
0955c     88 00 90 5D |  if_ne	jmp	#LR__0543
09560     FF FF 07 FF 
09564     FF 89 06 F5 | 	and	local03, ##268435455
09568     30 84 06 F1 | 	add	local01, #48
0956c     42 A1 02 F6 | 	mov	local15, local01
09570     43 9F 02 F6 | 	mov	local14, local02
09574     02 9E 66 F0 | 	shl	local14, #2
09578     FF 9F 06 F5 | 	and	local14, #511
0957c     4F A1 02 F1 | 	add	local15, local14
09580     50 77 02 F6 | 	mov	arg01, local15
09584     30 84 86 F1 | 	sub	local01, #48
09588     74 F7 BF FD | 	call	#_ff_cc_ld_dword_0255
0958c     18 A3 02 F6 | 	mov	local16, result1
09590     51 8D 02 F6 | 	mov	local05, local16
09594     00 00 78 FF 
09598     00 8C 06 F5 | 	and	local05, ##-268435456
0959c     46 89 42 F5 | 	or	local03, local05
095a0     30 84 06 F1 | 	add	local01, #48
095a4     42 8D 02 F6 | 	mov	local05, local01
095a8     43 95 02 F6 | 	mov	local09, local02
095ac     02 94 66 F0 | 	shl	local09, #2
095b0     4A 97 02 F6 | 	mov	local10, local09
095b4     FF 97 06 F5 | 	and	local10, #511
095b8     4B 99 02 F6 | 	mov	local11, local10
095bc     46 9B 02 F6 | 	mov	local12, local05
095c0     4C 9B 02 F1 | 	add	local12, local11
095c4     44 9F 02 F6 | 	mov	local14, local03
095c8     4D 77 02 F6 | 	mov	arg01, local12
095cc     4F 79 02 F6 | 	mov	arg02, local14
095d0     30 84 86 F1 | 	sub	local01, #48
095d4     8C F7 BF FD | 	call	#_ff_cc_st_dword_0257
095d8     01 8E 06 F6 | 	mov	local06, #1
095dc     03 84 06 F1 | 	add	local01, #3
095e0     42 03 48 FC | 	wrbyte	#1, local01
095e4     03 84 86 F1 | 	sub	local01, #3
095e8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
095e8                 | ' 			}
095e8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
095e8                 | ' 			fs->wflag = 1;
095e8                 | ' 			break;
095e8                 | LR__0543
095e8                 | LR__0544
095e8                 | ' 		}
095e8                 | ' 	}
095e8                 | ' 	return res;
095e8     45 31 02 F6 | 	mov	result1, local04
095ec     AF F0 03 F6 | 	mov	ptra, fp
095f0     BF 00 A0 FD | 	call	#popregs_
095f4                 | _ff_cc_put_fat_0285_ret
095f4     2D 00 64 FD | 	ret
095f8                 | 
095f8                 | _ff_cc_remove_chain_0289
095f8     09 5A 05 F6 | 	mov	COUNT_, #9
095fc     B0 00 A0 FD | 	call	#pushregs_
09600     3B 85 02 F6 | 	mov	local01, arg01
09604     3C 87 02 F6 | 	mov	local02, arg02
09608     3D 89 02 F6 | 	mov	local03, arg03
0960c     42 8B 02 FB | 	rdlong	local04, local01
09610     02 86 1E F2 | 	cmp	local02, #2 wcz
09614     14 00 90 CD |  if_b	jmp	#LR__0545
09618     14 8A 06 F1 | 	add	local04, #20
0961c     45 8D 02 FB | 	rdlong	local05, local04
09620     14 8A 86 F1 | 	sub	local04, #20
09624     46 87 1A F2 | 	cmp	local02, local05 wcz
09628     08 00 90 CD |  if_b	jmp	#LR__0546
0962c                 | LR__0545
0962c     02 30 06 F6 | 	mov	result1, #2
09630     D0 00 90 FD | 	jmp	#LR__0551
09634                 | LR__0546
09634     00 88 0E F2 | 	cmp	local03, #0 wz
09638     1C 00 90 AD |  if_e	jmp	#LR__0547
0963c     45 77 02 F6 | 	mov	arg01, local04
09640     44 79 02 F6 | 	mov	arg02, local03
09644     01 7A 66 F6 | 	neg	arg03, #1
09648     AC FC BF FD | 	call	#_ff_cc_put_fat_0285
0964c     18 8F 0A F6 | 	mov	local06, result1 wz
09650     47 31 02 56 |  if_ne	mov	result1, local06
09654     AC 00 90 5D |  if_ne	jmp	#LR__0551
09658                 | LR__0547
09658                 | ' 	}
09658                 | ' 
09658                 | ' 
09658                 | ' 	do {
09658                 | LR__0548
09658     43 79 02 F6 | 	mov	arg02, local02
0965c     42 77 02 F6 | 	mov	arg01, local01
09660     CC FA BF FD | 	call	#_ff_cc_get_fat_0281
09664     18 91 0A F6 | 	mov	local07, result1 wz
09668     94 00 90 AD |  if_e	jmp	#LR__0550
0966c     01 90 0E F2 | 	cmp	local07, #1 wz
09670     02 30 06 A6 |  if_e	mov	result1, #2
09674     8C 00 90 AD |  if_e	jmp	#LR__0551
09678     FF FF 7F FF 
0967c     FF 91 0E F2 | 	cmp	local07, ##-1 wz
09680     01 30 06 A6 |  if_e	mov	result1, #1
09684     7C 00 90 AD |  if_e	jmp	#LR__0551
09688     45 77 02 F6 | 	mov	arg01, local04
0968c     43 79 02 F6 | 	mov	arg02, local02
09690     00 7A 06 F6 | 	mov	arg03, #0
09694     60 FC BF FD | 	call	#_ff_cc_put_fat_0285
09698     18 8F 0A F6 | 	mov	local06, result1 wz
0969c     47 31 02 56 |  if_ne	mov	result1, local06
096a0     60 00 90 5D |  if_ne	jmp	#LR__0551
096a4     14 8A 06 F1 | 	add	local04, #20
096a8     45 8D 02 FB | 	rdlong	local05, local04
096ac     02 8C 86 F1 | 	sub	local05, #2
096b0     04 8A 86 F1 | 	sub	local04, #4
096b4     45 93 02 FB | 	rdlong	local08, local04
096b8     10 8A 86 F1 | 	sub	local04, #16
096bc     46 93 1A F2 | 	cmp	local08, local05 wcz
096c0     24 00 90 3D |  if_ae	jmp	#LR__0549
096c4     10 8A 06 F1 | 	add	local04, #16
096c8     45 95 02 FB | 	rdlong	local09, local04
096cc     01 94 06 F1 | 	add	local09, #1
096d0     45 95 62 FC | 	wrlong	local09, local04
096d4     0C 8A 86 F1 | 	sub	local04, #12
096d8     45 8D C2 FA | 	rdbyte	local05, local04
096dc     01 8C 46 F5 | 	or	local05, #1
096e0     45 8D 42 FC | 	wrbyte	local05, local04
096e4     04 8A 86 F1 | 	sub	local04, #4
096e8                 | LR__0549
096e8     48 87 02 F6 | 	mov	local02, local07
096ec     14 8A 06 F1 | 	add	local04, #20
096f0     45 8D 02 FB | 	rdlong	local05, local04
096f4     14 8A 86 F1 | 	sub	local04, #20
096f8     46 87 1A F2 | 	cmp	local02, local05 wcz
096fc     58 FF 9F CD |  if_b	jmp	#LR__0548
09700                 | LR__0550
09700                 | ' #line 1531 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09700                 | ' 	return FR_OK;
09700     00 30 06 F6 | 	mov	result1, #0
09704                 | LR__0551
09704     AF F0 03 F6 | 	mov	ptra, fp
09708     BF 00 A0 FD | 	call	#popregs_
0970c                 | _ff_cc_remove_chain_0289_ret
0970c     2D 00 64 FD | 	ret
09710                 | 
09710                 | _ff_cc_create_chain_0295
09710     0B 5A 05 F6 | 	mov	COUNT_, #11
09714     B0 00 A0 FD | 	call	#pushregs_
09718     3B 85 02 F6 | 	mov	local01, arg01
0971c     3C 87 0A F6 | 	mov	local02, arg02 wz
09720     42 89 02 FB | 	rdlong	local03, local01
09724     2C 00 90 5D |  if_ne	jmp	#LR__0553
09728     0C 88 06 F1 | 	add	local03, #12
0972c     44 8B 0A FB | 	rdlong	local04, local03 wz
09730     0C 88 86 F1 | 	sub	local03, #12
09734     14 00 90 AD |  if_e	jmp	#LR__0552
09738     14 88 06 F1 | 	add	local03, #20
0973c     44 8D 02 FB | 	rdlong	local05, local03
09740     14 88 86 F1 | 	sub	local03, #20
09744     46 8B 1A F2 | 	cmp	local04, local05 wcz
09748     50 00 90 CD |  if_b	jmp	#LR__0554
0974c                 | LR__0552
0974c     01 8A 06 F6 | 	mov	local04, #1
09750     48 00 90 FD | 	jmp	#LR__0554
09754                 | LR__0553
09754     42 77 02 F6 | 	mov	arg01, local01
09758     43 79 02 F6 | 	mov	arg02, local02
0975c     D0 F9 BF FD | 	call	#_ff_cc_get_fat_0281
09760     18 8F 02 F6 | 	mov	local06, result1
09764     02 8E 1E F2 | 	cmp	local06, #2 wcz
09768     01 30 06 C6 |  if_b	mov	result1, #1
0976c     F4 01 90 CD |  if_b	jmp	#LR__0570
09770     FF FF 7F FF 
09774     FF 8F 0E F2 | 	cmp	local06, ##-1 wz
09778     47 31 02 A6 |  if_e	mov	result1, local06
0977c     E4 01 90 AD |  if_e	jmp	#LR__0570
09780     14 88 06 F1 | 	add	local03, #20
09784     44 8D 02 FB | 	rdlong	local05, local03
09788     14 88 86 F1 | 	sub	local03, #20
0978c     46 8F 1A F2 | 	cmp	local06, local05 wcz
09790     47 31 02 C6 |  if_b	mov	result1, local06
09794     CC 01 90 CD |  if_b	jmp	#LR__0570
09798     43 8B 02 F6 | 	mov	local04, local02
0979c                 | LR__0554
0979c     10 88 06 F1 | 	add	local03, #16
097a0     44 8D 0A FB | 	rdlong	local05, local03 wz
097a4     10 88 86 F1 | 	sub	local03, #16
097a8     00 30 06 A6 |  if_e	mov	result1, #0
097ac     B4 01 90 AD |  if_e	jmp	#LR__0570
097b0     00 90 06 F6 | 	mov	local07, #0
097b4     43 8B 0A F2 | 	cmp	local04, local02 wz
097b8     80 00 90 5D |  if_ne	jmp	#LR__0559
097bc     45 91 02 F6 | 	mov	local07, local04
097c0     01 90 06 F1 | 	add	local07, #1
097c4     14 88 06 F1 | 	add	local03, #20
097c8     44 8D 02 FB | 	rdlong	local05, local03
097cc     14 88 86 F1 | 	sub	local03, #20
097d0     46 91 1A F2 | 	cmp	local07, local05 wcz
097d4     02 90 06 36 |  if_ae	mov	local07, #2
097d8     42 8D 02 F6 | 	mov	local05, local01
097dc     48 79 02 F6 | 	mov	arg02, local07
097e0     46 77 02 F6 | 	mov	arg01, local05
097e4     48 F9 BF FD | 	call	#_ff_cc_get_fat_0281
097e8     18 8F 02 F6 | 	mov	local06, result1
097ec     01 8E 0E F2 | 	cmp	local06, #1 wz
097f0     0C 00 90 AD |  if_e	jmp	#LR__0555
097f4     FF FF 7F FF 
097f8     FF 8F 0E F2 | 	cmp	local06, ##-1 wz
097fc     08 00 90 5D |  if_ne	jmp	#LR__0556
09800                 | LR__0555
09800     47 31 02 F6 | 	mov	result1, local06
09804     5C 01 90 FD | 	jmp	#LR__0570
09808                 | LR__0556
09808     00 8E 0E F2 | 	cmp	local06, #0 wz
0980c     2C 00 90 AD |  if_e	jmp	#LR__0558
09810     0C 88 06 F1 | 	add	local03, #12
09814     44 8F 02 FB | 	rdlong	local06, local03
09818     0C 88 86 F1 | 	sub	local03, #12
0981c     02 8E 1E F2 | 	cmp	local06, #2 wcz
09820     14 00 90 CD |  if_b	jmp	#LR__0557
09824     14 88 06 F1 | 	add	local03, #20
09828     44 8D 02 FB | 	rdlong	local05, local03
0982c     14 88 86 F1 | 	sub	local03, #20
09830     46 8F 1A F2 | 	cmp	local06, local05 wcz
09834     47 8B 02 C6 |  if_b	mov	local04, local06
09838                 | LR__0557
09838     00 90 06 F6 | 	mov	local07, #0
0983c                 | LR__0558
0983c                 | LR__0559
0983c     00 90 0E F2 | 	cmp	local07, #0 wz
09840     70 00 90 5D |  if_ne	jmp	#LR__0565
09844     45 91 02 F6 | 	mov	local07, local04
09848                 | ' 			ncl = scl;
09848                 | ' 			for (;;) {
09848                 | LR__0560
09848     01 90 06 F1 | 	add	local07, #1
0984c     14 88 06 F1 | 	add	local03, #20
09850     44 8D 02 FB | 	rdlong	local05, local03
09854     14 88 86 F1 | 	sub	local03, #20
09858     46 91 1A F2 | 	cmp	local07, local05 wcz
0985c     10 00 90 CD |  if_b	jmp	#LR__0561
09860     02 90 06 F6 | 	mov	local07, #2
09864     45 91 1A F2 | 	cmp	local07, local04 wcz
09868     00 30 06 16 |  if_a	mov	result1, #0
0986c     F4 00 90 1D |  if_a	jmp	#LR__0570
09870                 | LR__0561
09870     42 8D 02 F6 | 	mov	local05, local01
09874     48 79 02 F6 | 	mov	arg02, local07
09878     46 77 02 F6 | 	mov	arg01, local05
0987c     B0 F8 BF FD | 	call	#_ff_cc_get_fat_0281
09880     18 8F 0A F6 | 	mov	local06, result1 wz
09884     2C 00 90 AD |  if_e	jmp	#LR__0564
09888     01 8E 0E F2 | 	cmp	local06, #1 wz
0988c     0C 00 90 AD |  if_e	jmp	#LR__0562
09890     FF FF 7F FF 
09894     FF 8F 0E F2 | 	cmp	local06, ##-1 wz
09898     08 00 90 5D |  if_ne	jmp	#LR__0563
0989c                 | LR__0562
0989c     47 31 02 F6 | 	mov	result1, local06
098a0     C0 00 90 FD | 	jmp	#LR__0570
098a4                 | LR__0563
098a4     45 91 0A F2 | 	cmp	local07, local04 wz
098a8     00 30 06 A6 |  if_e	mov	result1, #0
098ac     B4 00 90 AD |  if_e	jmp	#LR__0570
098b0     94 FF 9F FD | 	jmp	#LR__0560
098b4                 | LR__0564
098b4                 | LR__0565
098b4     44 77 02 F6 | 	mov	arg01, local03
098b8     48 79 02 F6 | 	mov	arg02, local07
098bc     01 7A 66 F6 | 	neg	arg03, #1
098c0     34 FA BF FD | 	call	#_ff_cc_put_fat_0285
098c4     18 93 0A F6 | 	mov	local08, result1 wz
098c8     2C 00 90 5D |  if_ne	jmp	#LR__0566
098cc     00 86 0E F2 | 	cmp	local02, #0 wz
098d0     24 00 90 AD |  if_e	jmp	#LR__0566
098d4     44 8D 02 F6 | 	mov	local05, local03
098d8     43 95 02 F6 | 	mov	local09, local02
098dc     48 97 02 F6 | 	mov	local10, local07
098e0     46 77 02 F6 | 	mov	arg01, local05
098e4     4A 79 02 F6 | 	mov	arg02, local09
098e8     4B 7B 02 F6 | 	mov	arg03, local10
098ec     08 FA BF FD | 	call	#_ff_cc_put_fat_0285
098f0     18 99 02 F6 | 	mov	local11, result1
098f4     4C 93 02 F6 | 	mov	local08, local11
098f8                 | LR__0566
098f8     00 92 0E F2 | 	cmp	local08, #0 wz
098fc     50 00 90 5D |  if_ne	jmp	#LR__0568
09900     0C 88 06 F1 | 	add	local03, #12
09904     44 91 62 FC | 	wrlong	local07, local03
09908     08 88 06 F1 | 	add	local03, #8
0990c     44 8D 02 FB | 	rdlong	local05, local03
09910     02 8C 86 F1 | 	sub	local05, #2
09914     04 88 86 F1 | 	sub	local03, #4
09918     44 97 02 FB | 	rdlong	local10, local03
0991c     10 88 86 F1 | 	sub	local03, #16
09920     46 97 1A F2 | 	cmp	local10, local05 wcz
09924     14 00 90 1D |  if_a	jmp	#LR__0567
09928     10 88 06 F1 | 	add	local03, #16
0992c     44 97 02 FB | 	rdlong	local10, local03
09930     01 96 86 F1 | 	sub	local10, #1
09934     44 97 62 FC | 	wrlong	local10, local03
09938     10 88 86 F1 | 	sub	local03, #16
0993c                 | LR__0567
0993c     04 88 06 F1 | 	add	local03, #4
09940     44 8D C2 FA | 	rdbyte	local05, local03
09944     01 8C 46 F5 | 	or	local05, #1
09948     44 8D 42 FC | 	wrbyte	local05, local03
0994c     10 00 90 FD | 	jmp	#LR__0569
09950                 | LR__0568
09950     01 92 0E F2 | 	cmp	local08, #1 wz
09954     01 8C 66 A6 |  if_e	neg	local05, #1
09958     01 8C 06 56 |  if_ne	mov	local05, #1
0995c     46 91 02 F6 | 	mov	local07, local05
09960                 | LR__0569
09960                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
09960                 | ' 	}
09960                 | ' 
09960                 | ' 	return ncl;
09960     48 31 02 F6 | 	mov	result1, local07
09964                 | LR__0570
09964     AF F0 03 F6 | 	mov	ptra, fp
09968     BF 00 A0 FD | 	call	#popregs_
0996c                 | _ff_cc_create_chain_0295_ret
0996c     2D 00 64 FD | 	ret
09970                 | 
09970                 | _ff_cc_dir_clear_0300
09970     07 5A 05 F6 | 	mov	COUNT_, #7
09974     B0 00 A0 FD | 	call	#pushregs_
09978     3B 85 02 F6 | 	mov	local01, arg01
0997c     3C 87 02 F6 | 	mov	local02, arg02
09980     42 77 02 F6 | 	mov	arg01, local01
09984     98 F4 BF FD | 	call	#_ff_cc_sync_window_0271
09988     00 30 0E F2 | 	cmp	result1, #0 wz
0998c     01 30 06 56 |  if_ne	mov	result1, #1
09990     AC 00 90 5D |  if_ne	jmp	#LR__0577
09994     42 77 02 F6 | 	mov	arg01, local01
09998     43 79 02 F6 | 	mov	arg02, local02
0999c     50 F7 BF FD | 	call	#_ff_cc_clst2sect_0276
099a0     18 89 02 F6 | 	mov	local03, result1
099a4     2C 84 06 F1 | 	add	local01, #44
099a8     42 89 62 FC | 	wrlong	local03, local01
099ac     04 84 06 F1 | 	add	local01, #4
099b0     42 77 02 F6 | 	mov	arg01, local01
099b4     30 84 86 F1 | 	sub	local01, #48
099b8     00 78 06 F6 | 	mov	arg02, #0
099bc     09 7A C6 F9 | 	decod	arg03, #9
099c0                 | ' {
099c0                 | ' 	BYTE *d = (BYTE*)dst;
099c0                 | ' 
099c0                 | ' 	do {
099c0     48 66 9F FE | 	loc	pa,	#(@LR__0573-@LR__0571)
099c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
099c8                 | LR__0571
099c8     3D 05 D8 FC | 	rep	@LR__0574, arg03
099cc                 | LR__0572
099cc     3B 79 42 FC | 	wrbyte	arg02, arg01
099d0     01 76 06 F1 | 	add	arg01, #1
099d4                 | LR__0573
099d4                 | LR__0574
099d4     30 84 06 F1 | 	add	local01, #48
099d8     42 8B 02 F6 | 	mov	local04, local01
099dc                 | ' #line 1698 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
099dc                 | ' 	{
099dc                 | ' 		ibuf = fs->win; szb = 1;
099dc                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
099dc     00 8C 06 F6 | 	mov	local05, #0
099e0     30 84 86 F1 | 	sub	local01, #48
099e4                 | LR__0575
099e4     0A 84 06 F1 | 	add	local01, #10
099e8     42 8F E2 FA | 	rdword	local06, local01
099ec     0A 84 86 F1 | 	sub	local01, #10
099f0     0F 8E 46 F7 | 	zerox	local06, #15
099f4     47 8D 1A F2 | 	cmp	local05, local06 wcz
099f8     2C 00 90 3D |  if_ae	jmp	#LR__0576
099fc     01 84 06 F1 | 	add	local01, #1
09a00     42 77 C2 FA | 	rdbyte	arg01, local01
09a04     01 84 86 F1 | 	sub	local01, #1
09a08     45 79 02 F6 | 	mov	arg02, local04
09a0c     44 7B 02 F6 | 	mov	arg03, local03
09a10     46 7B 02 F1 | 	add	arg03, local05
09a14     01 7C 06 F6 | 	mov	arg04, #1
09a18     08 EF BF FD | 	call	#_ff_cc_disk_write
09a1c     00 30 0E F2 | 	cmp	result1, #0 wz
09a20     01 8C 06 A1 |  if_e	add	local05, #1
09a24     BC FF 9F AD |  if_e	jmp	#LR__0575
09a28                 | LR__0576
09a28                 | ' 	}
09a28                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
09a28     0A 84 06 F1 | 	add	local01, #10
09a2c     42 91 E2 FA | 	rdword	local07, local01
09a30     48 8D 0A F2 | 	cmp	local05, local07 wz
09a34     00 8E 06 A6 |  if_e	mov	local06, #0
09a38     01 8E 06 56 |  if_ne	mov	local06, #1
09a3c     47 31 02 F6 | 	mov	result1, local06
09a40                 | LR__0577
09a40     AF F0 03 F6 | 	mov	ptra, fp
09a44     BF 00 A0 FD | 	call	#popregs_
09a48                 | _ff_cc_dir_clear_0300_ret
09a48     2D 00 64 FD | 	ret
09a4c                 | 
09a4c                 | _ff_cc_dir_sdi_0304
09a4c     08 5A 05 F6 | 	mov	COUNT_, #8
09a50     B0 00 A0 FD | 	call	#pushregs_
09a54     3B 85 02 F6 | 	mov	local01, arg01
09a58     3C 87 02 F6 | 	mov	local02, arg02
09a5c     42 89 02 FB | 	rdlong	local03, local01
09a60     00 10 00 FF 
09a64     00 86 1E F2 | 	cmp	local02, ##2097152 wcz
09a68     08 00 90 3D |  if_ae	jmp	#LR__0578
09a6c     1F 86 CE F7 | 	test	local02, #31 wz
09a70     08 00 90 AD |  if_e	jmp	#LR__0579
09a74                 | LR__0578
09a74                 | ' 		return FR_INT_ERR;
09a74     02 30 06 F6 | 	mov	result1, #2
09a78     50 01 90 FD | 	jmp	#LR__0587
09a7c                 | LR__0579
09a7c     10 84 06 F1 | 	add	local01, #16
09a80     42 87 62 FC | 	wrlong	local02, local01
09a84     08 84 86 F1 | 	sub	local01, #8
09a88     42 8B 0A FB | 	rdlong	local04, local01 wz
09a8c     08 84 86 F1 | 	sub	local01, #8
09a90     1C 00 90 5D |  if_ne	jmp	#LR__0580
09a94     44 8D C2 FA | 	rdbyte	local05, local03
09a98     03 8C 1E F2 | 	cmp	local05, #3 wcz
09a9c     10 00 90 CD |  if_b	jmp	#LR__0580
09aa0     24 88 06 F1 | 	add	local03, #36
09aa4     44 8D 02 FB | 	rdlong	local05, local03
09aa8     24 88 86 F1 | 	sub	local03, #36
09aac     46 8B 02 F6 | 	mov	local04, local05
09ab0                 | LR__0580
09ab0     00 8A 0E F2 | 	cmp	local04, #0 wz
09ab4     40 00 90 5D |  if_ne	jmp	#LR__0581
09ab8     43 8D 02 F6 | 	mov	local05, local02
09abc     05 8C 46 F0 | 	shr	local05, #5
09ac0     08 88 06 F1 | 	add	local03, #8
09ac4     44 8F E2 FA | 	rdword	local06, local03
09ac8     08 88 86 F1 | 	sub	local03, #8
09acc     0F 8E 46 F7 | 	zerox	local06, #15
09ad0     47 8D 1A F2 | 	cmp	local05, local06 wcz
09ad4     02 30 06 36 |  if_ae	mov	result1, #2
09ad8     F0 00 90 3D |  if_ae	jmp	#LR__0587
09adc     24 88 06 F1 | 	add	local03, #36
09ae0     44 8D 02 FB | 	rdlong	local05, local03
09ae4     24 88 86 F1 | 	sub	local03, #36
09ae8     18 84 06 F1 | 	add	local01, #24
09aec     42 8D 62 FC | 	wrlong	local05, local01
09af0     18 84 86 F1 | 	sub	local01, #24
09af4     80 00 90 FD | 	jmp	#LR__0586
09af8                 | LR__0581
09af8     0A 88 06 F1 | 	add	local03, #10
09afc     44 91 E2 FA | 	rdword	local07, local03
09b00     0A 88 86 F1 | 	sub	local03, #10
09b04     0F 90 46 F7 | 	zerox	local07, #15
09b08     09 90 66 F0 | 	shl	local07, #9
09b0c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
09b0c                 | ' 		while (ofs >= csz) {
09b0c                 | LR__0582
09b0c     48 87 1A F2 | 	cmp	local02, local07 wcz
09b10     4C 00 90 CD |  if_b	jmp	#LR__0585
09b14     42 77 02 F6 | 	mov	arg01, local01
09b18     45 79 02 F6 | 	mov	arg02, local04
09b1c     10 F6 BF FD | 	call	#_ff_cc_get_fat_0281
09b20     18 8B 02 F6 | 	mov	local04, result1
09b24     FF FF 7F FF 
09b28     FF 8B 0E F2 | 	cmp	local04, ##-1 wz
09b2c     01 30 06 A6 |  if_e	mov	result1, #1
09b30     98 00 90 AD |  if_e	jmp	#LR__0587
09b34     02 8A 1E F2 | 	cmp	local04, #2 wcz
09b38     14 00 90 CD |  if_b	jmp	#LR__0583
09b3c     14 88 06 F1 | 	add	local03, #20
09b40     44 8D 02 FB | 	rdlong	local05, local03
09b44     14 88 86 F1 | 	sub	local03, #20
09b48     46 8B 1A F2 | 	cmp	local04, local05 wcz
09b4c     08 00 90 CD |  if_b	jmp	#LR__0584
09b50                 | LR__0583
09b50     02 30 06 F6 | 	mov	result1, #2
09b54     74 00 90 FD | 	jmp	#LR__0587
09b58                 | LR__0584
09b58     48 87 82 F1 | 	sub	local02, local07
09b5c     AC FF 9F FD | 	jmp	#LR__0582
09b60                 | LR__0585
09b60     44 77 02 F6 | 	mov	arg01, local03
09b64     45 79 02 F6 | 	mov	arg02, local04
09b68     84 F5 BF FD | 	call	#_ff_cc_clst2sect_0276
09b6c     18 84 06 F1 | 	add	local01, #24
09b70     42 31 62 FC | 	wrlong	result1, local01
09b74     18 84 86 F1 | 	sub	local01, #24
09b78                 | LR__0586
09b78     14 84 06 F1 | 	add	local01, #20
09b7c     42 8B 62 FC | 	wrlong	local04, local01
09b80     04 84 06 F1 | 	add	local01, #4
09b84     42 8D 0A FB | 	rdlong	local05, local01 wz
09b88     18 84 86 F1 | 	sub	local01, #24
09b8c     02 30 06 A6 |  if_e	mov	result1, #2
09b90     38 00 90 AD |  if_e	jmp	#LR__0587
09b94     43 8F 02 F6 | 	mov	local06, local02
09b98     09 8E 46 F0 | 	shr	local06, #9
09b9c     18 84 06 F1 | 	add	local01, #24
09ba0     42 8D 02 FB | 	rdlong	local05, local01
09ba4     47 8D 02 F1 | 	add	local05, local06
09ba8     42 8D 62 FC | 	wrlong	local05, local01
09bac     30 88 06 F1 | 	add	local03, #48
09bb0     44 8D 02 F6 | 	mov	local05, local03
09bb4     43 93 02 F6 | 	mov	local08, local02
09bb8     FF 93 06 F5 | 	and	local08, #511
09bbc     49 8D 02 F1 | 	add	local05, local08
09bc0     04 84 06 F1 | 	add	local01, #4
09bc4     42 8D 62 FC | 	wrlong	local05, local01
09bc8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
09bc8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
09bc8                 | ' 
09bc8                 | ' 	return FR_OK;
09bc8     00 30 06 F6 | 	mov	result1, #0
09bcc                 | LR__0587
09bcc     AF F0 03 F6 | 	mov	ptra, fp
09bd0     BF 00 A0 FD | 	call	#popregs_
09bd4                 | _ff_cc_dir_sdi_0304_ret
09bd4     2D 00 64 FD | 	ret
09bd8                 | 
09bd8                 | _ff_cc_dir_next_0308
09bd8     09 5A 05 F6 | 	mov	COUNT_, #9
09bdc     B0 00 A0 FD | 	call	#pushregs_
09be0     3B 85 02 F6 | 	mov	local01, arg01
09be4     3C 87 02 F6 | 	mov	local02, arg02
09be8     42 89 02 FB | 	rdlong	local03, local01
09bec     10 84 06 F1 | 	add	local01, #16
09bf0     42 8B 02 FB | 	rdlong	local04, local01
09bf4     10 84 86 F1 | 	sub	local01, #16
09bf8     20 8A 06 F1 | 	add	local04, #32
09bfc     00 10 00 FF 
09c00     00 8A 1E F2 | 	cmp	local04, ##2097152 wcz
09c04     18 84 06 31 |  if_ae	add	local01, #24
09c08     42 01 68 3C |  if_ae	wrlong	#0, local01
09c0c     18 84 86 31 |  if_ae	sub	local01, #24
09c10     18 84 06 F1 | 	add	local01, #24
09c14     42 8D 0A FB | 	rdlong	local05, local01 wz
09c18     18 84 86 F1 | 	sub	local01, #24
09c1c     04 30 06 A6 |  if_e	mov	result1, #4
09c20     7C 01 90 AD |  if_e	jmp	#LR__0594
09c24     FF 8B CE F7 | 	test	local04, #511 wz
09c28     4C 01 90 5D |  if_ne	jmp	#LR__0593
09c2c     18 84 06 F1 | 	add	local01, #24
09c30     42 8F 02 FB | 	rdlong	local06, local01
09c34     01 8E 06 F1 | 	add	local06, #1
09c38     42 8F 62 FC | 	wrlong	local06, local01
09c3c     04 84 86 F1 | 	sub	local01, #4
09c40     42 8D 0A FB | 	rdlong	local05, local01 wz
09c44     14 84 86 F1 | 	sub	local01, #20
09c48     30 00 90 5D |  if_ne	jmp	#LR__0588
09c4c     45 8D 02 F6 | 	mov	local05, local04
09c50     05 8C 46 F0 | 	shr	local05, #5
09c54     08 88 06 F1 | 	add	local03, #8
09c58     44 91 E2 FA | 	rdword	local07, local03
09c5c     08 88 86 F1 | 	sub	local03, #8
09c60     0F 90 46 F7 | 	zerox	local07, #15
09c64     48 8D 1A F2 | 	cmp	local05, local07 wcz
09c68     0C 01 90 CD |  if_b	jmp	#LR__0592
09c6c     18 84 06 F1 | 	add	local01, #24
09c70     42 01 68 FC | 	wrlong	#0, local01
09c74                 | ' 				dp->sect = 0; return FR_NO_FILE;
09c74     04 30 06 F6 | 	mov	result1, #4
09c78     24 01 90 FD | 	jmp	#LR__0594
09c7c                 | LR__0588
09c7c     45 8D 02 F6 | 	mov	local05, local04
09c80     09 8C 46 F0 | 	shr	local05, #9
09c84     0A 88 06 F1 | 	add	local03, #10
09c88     44 91 E2 FA | 	rdword	local07, local03
09c8c     0A 88 86 F1 | 	sub	local03, #10
09c90     0F 90 46 F7 | 	zerox	local07, #15
09c94     01 90 86 F1 | 	sub	local07, #1
09c98     48 8D CA F7 | 	test	local05, local07 wz
09c9c     D8 00 90 5D |  if_ne	jmp	#LR__0591
09ca0     42 77 02 F6 | 	mov	arg01, local01
09ca4     14 84 06 F1 | 	add	local01, #20
09ca8     42 79 02 FB | 	rdlong	arg02, local01
09cac     14 84 86 F1 | 	sub	local01, #20
09cb0     7C F4 BF FD | 	call	#_ff_cc_get_fat_0281
09cb4     18 93 02 F6 | 	mov	local08, result1
09cb8     01 92 1E F2 | 	cmp	local08, #1 wcz
09cbc     02 30 06 E6 |  if_be	mov	result1, #2
09cc0     DC 00 90 ED |  if_be	jmp	#LR__0594
09cc4     FF FF 7F FF 
09cc8     FF 93 0E F2 | 	cmp	local08, ##-1 wz
09ccc     01 30 06 A6 |  if_e	mov	result1, #1
09cd0     CC 00 90 AD |  if_e	jmp	#LR__0594
09cd4     14 88 06 F1 | 	add	local03, #20
09cd8     44 8D 02 FB | 	rdlong	local05, local03
09cdc     14 88 86 F1 | 	sub	local03, #20
09ce0     46 93 1A F2 | 	cmp	local08, local05 wcz
09ce4     6C 00 90 CD |  if_b	jmp	#LR__0590
09ce8     00 86 0E F2 | 	cmp	local02, #0 wz
09cec     10 00 90 5D |  if_ne	jmp	#LR__0589
09cf0     18 84 06 F1 | 	add	local01, #24
09cf4     42 01 68 FC | 	wrlong	#0, local01
09cf8                 | ' 						dp->sect = 0; return FR_NO_FILE;
09cf8     04 30 06 F6 | 	mov	result1, #4
09cfc     A0 00 90 FD | 	jmp	#LR__0594
09d00                 | LR__0589
09d00     42 77 02 F6 | 	mov	arg01, local01
09d04     14 84 06 F1 | 	add	local01, #20
09d08     42 79 02 FB | 	rdlong	arg02, local01
09d0c     14 84 86 F1 | 	sub	local01, #20
09d10     FC F9 BF FD | 	call	#_ff_cc_create_chain_0295
09d14     18 93 0A F6 | 	mov	local08, result1 wz
09d18     07 30 06 A6 |  if_e	mov	result1, #7
09d1c     80 00 90 AD |  if_e	jmp	#LR__0594
09d20     01 92 0E F2 | 	cmp	local08, #1 wz
09d24     02 30 06 A6 |  if_e	mov	result1, #2
09d28     74 00 90 AD |  if_e	jmp	#LR__0594
09d2c     FF FF 7F FF 
09d30     FF 93 0E F2 | 	cmp	local08, ##-1 wz
09d34     01 30 06 A6 |  if_e	mov	result1, #1
09d38     64 00 90 AD |  if_e	jmp	#LR__0594
09d3c     44 77 02 F6 | 	mov	arg01, local03
09d40     49 79 02 F6 | 	mov	arg02, local08
09d44     28 FC BF FD | 	call	#_ff_cc_dir_clear_0300
09d48     00 30 0E F2 | 	cmp	result1, #0 wz
09d4c     01 30 06 56 |  if_ne	mov	result1, #1
09d50     4C 00 90 5D |  if_ne	jmp	#LR__0594
09d54                 | LR__0590
09d54     14 84 06 F1 | 	add	local01, #20
09d58     42 93 62 FC | 	wrlong	local08, local01
09d5c     14 84 86 F1 | 	sub	local01, #20
09d60     44 77 02 F6 | 	mov	arg01, local03
09d64     49 79 02 F6 | 	mov	arg02, local08
09d68     84 F3 BF FD | 	call	#_ff_cc_clst2sect_0276
09d6c     18 84 06 F1 | 	add	local01, #24
09d70     42 31 62 FC | 	wrlong	result1, local01
09d74     18 84 86 F1 | 	sub	local01, #24
09d78                 | LR__0591
09d78                 | LR__0592
09d78                 | LR__0593
09d78     10 84 06 F1 | 	add	local01, #16
09d7c     42 8B 62 FC | 	wrlong	local04, local01
09d80     30 88 06 F1 | 	add	local03, #48
09d84     44 8D 02 F6 | 	mov	local05, local03
09d88     45 95 02 F6 | 	mov	local09, local04
09d8c     FF 95 06 F5 | 	and	local09, #511
09d90     4A 8D 02 F1 | 	add	local05, local09
09d94     0C 84 06 F1 | 	add	local01, #12
09d98     42 8D 62 FC | 	wrlong	local05, local01
09d9c                 | ' #line 1802 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09d9c                 | ' 				}
09d9c                 | ' 				dp->clust = clst;
09d9c                 | ' 				dp->sect = clst2sect(fs, clst);
09d9c                 | ' 			}
09d9c                 | ' 		}
09d9c                 | ' 	}
09d9c                 | ' 	dp->dptr = ofs;
09d9c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
09d9c                 | ' 
09d9c                 | ' 	return FR_OK;
09d9c     00 30 06 F6 | 	mov	result1, #0
09da0                 | LR__0594
09da0     AF F0 03 F6 | 	mov	ptra, fp
09da4     BF 00 A0 FD | 	call	#popregs_
09da8                 | _ff_cc_dir_next_0308_ret
09da8     2D 00 64 FD | 	ret
09dac                 | 
09dac                 | _ff_cc_dir_alloc_0312
09dac     0B 5A 05 F6 | 	mov	COUNT_, #11
09db0     B0 00 A0 FD | 	call	#pushregs_
09db4     3B 85 02 F6 | 	mov	local01, arg01
09db8     3C 87 02 F6 | 	mov	local02, arg02
09dbc     42 89 02 FB | 	rdlong	local03, local01
09dc0     42 77 02 F6 | 	mov	arg01, local01
09dc4     00 78 06 F6 | 	mov	arg02, #0
09dc8     80 FC BF FD | 	call	#_ff_cc_dir_sdi_0304
09dcc     18 8B 0A F6 | 	mov	local04, result1 wz
09dd0     88 00 90 5D |  if_ne	jmp	#LR__0600
09dd4     00 8C 06 F6 | 	mov	local05, #0
09dd8                 | ' 		n = 0;
09dd8                 | ' 		do {
09dd8                 | LR__0595
09dd8     44 77 02 F6 | 	mov	arg01, local03
09ddc     18 84 06 F1 | 	add	local01, #24
09de0     42 79 02 FB | 	rdlong	arg02, local01
09de4     18 84 86 F1 | 	sub	local01, #24
09de8     0C F1 BF FD | 	call	#_ff_cc_move_window_0273
09dec     18 8F 02 F6 | 	mov	local06, result1
09df0     47 8B 0A F6 | 	mov	local04, local06 wz
09df4     64 00 90 5D |  if_ne	jmp	#LR__0599
09df8     1C 84 06 F1 | 	add	local01, #28
09dfc     42 91 02 FB | 	rdlong	local07, local01
09e00     1C 84 86 F1 | 	sub	local01, #28
09e04     48 93 C2 FA | 	rdbyte	local08, local07
09e08     E5 92 0E F2 | 	cmp	local08, #229 wz
09e0c     18 00 90 AD |  if_e	jmp	#LR__0596
09e10     1C 84 06 F1 | 	add	local01, #28
09e14     42 95 02 FB | 	rdlong	local09, local01
09e18     1C 84 86 F1 | 	sub	local01, #28
09e1c     4A 97 02 F6 | 	mov	local10, local09
09e20     4B 8F CA FA | 	rdbyte	local06, local10 wz
09e24     10 00 90 5D |  if_ne	jmp	#LR__0597
09e28                 | LR__0596
09e28     01 8C 06 F1 | 	add	local05, #1
09e2c     43 8D 0A F2 | 	cmp	local05, local02 wz
09e30     28 00 90 AD |  if_e	jmp	#LR__0599
09e34     04 00 90 FD | 	jmp	#LR__0598
09e38                 | LR__0597
09e38     00 8C 06 F6 | 	mov	local05, #0
09e3c                 | LR__0598
09e3c     42 93 02 F6 | 	mov	local08, local01
09e40     01 90 06 F6 | 	mov	local07, #1
09e44     49 77 02 F6 | 	mov	arg01, local08
09e48     01 78 06 F6 | 	mov	arg02, #1
09e4c     88 FD BF FD | 	call	#_ff_cc_dir_next_0308
09e50     18 99 02 F6 | 	mov	local11, result1
09e54     4C 8B 0A F6 | 	mov	local04, local11 wz
09e58     7C FF 9F AD |  if_e	jmp	#LR__0595
09e5c                 | LR__0599
09e5c                 | LR__0600
09e5c     04 8A 0E F2 | 	cmp	local04, #4 wz
09e60     07 8A 06 A6 |  if_e	mov	local04, #7
09e64                 | ' 	return res;
09e64     45 31 02 F6 | 	mov	result1, local04
09e68     AF F0 03 F6 | 	mov	ptra, fp
09e6c     BF 00 A0 FD | 	call	#popregs_
09e70                 | _ff_cc_dir_alloc_0312_ret
09e70     2D 00 64 FD | 	ret
09e74                 | 
09e74                 | _ff_cc_ld_clust_0314
09e74     04 5A 05 F6 | 	mov	COUNT_, #4
09e78     B0 00 A0 FD | 	call	#pushregs_
09e7c     3B 85 02 F6 | 	mov	local01, arg01
09e80     3C 87 02 F6 | 	mov	local02, arg02
09e84     43 77 02 F6 | 	mov	arg01, local02
09e88     1A 76 06 F1 | 	add	arg01, #26
09e8c     4C EE BF FD | 	call	#_ff_cc_ld_word_0253
09e90     18 89 02 F6 | 	mov	local03, result1
09e94     0F 88 46 F7 | 	zerox	local03, #15
09e98     42 8B C2 FA | 	rdbyte	local04, local01
09e9c     03 8A 0E F2 | 	cmp	local04, #3 wz
09ea0     18 00 90 5D |  if_ne	jmp	#LR__0601
09ea4     14 86 06 F1 | 	add	local02, #20
09ea8     43 77 02 F6 | 	mov	arg01, local02
09eac     2C EE BF FD | 	call	#_ff_cc_ld_word_0253
09eb0     0F 30 46 F7 | 	zerox	result1, #15
09eb4     10 30 66 F0 | 	shl	result1, #16
09eb8     18 89 42 F5 | 	or	local03, result1
09ebc                 | LR__0601
09ebc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
09ebc                 | ' 	}
09ebc                 | ' 
09ebc                 | ' 	return cl;
09ebc     44 31 02 F6 | 	mov	result1, local03
09ec0     AF F0 03 F6 | 	mov	ptra, fp
09ec4     BF 00 A0 FD | 	call	#popregs_
09ec8                 | _ff_cc_ld_clust_0314_ret
09ec8     2D 00 64 FD | 	ret
09ecc                 | 
09ecc                 | _ff_cc_st_clust_0315
09ecc     04 5A 05 F6 | 	mov	COUNT_, #4
09ed0     B0 00 A0 FD | 	call	#pushregs_
09ed4     3B 85 02 F6 | 	mov	local01, arg01
09ed8     3C 87 02 F6 | 	mov	local02, arg02
09edc     3D 89 02 F6 | 	mov	local03, arg03
09ee0     43 77 02 F6 | 	mov	arg01, local02
09ee4     1A 76 06 F1 | 	add	arg01, #26
09ee8     44 79 02 F6 | 	mov	arg02, local03
09eec     50 EE BF FD | 	call	#_ff_cc_st_word_0256
09ef0     42 8B C2 FA | 	rdbyte	local04, local01
09ef4     03 8A 0E F2 | 	cmp	local04, #3 wz
09ef8     14 00 90 5D |  if_ne	jmp	#LR__0602
09efc     14 86 06 F1 | 	add	local02, #20
09f00     10 88 46 F0 | 	shr	local03, #16
09f04     43 77 02 F6 | 	mov	arg01, local02
09f08     44 79 02 F6 | 	mov	arg02, local03
09f0c     30 EE BF FD | 	call	#_ff_cc_st_word_0256
09f10                 | LR__0602
09f10     AF F0 03 F6 | 	mov	ptra, fp
09f14     BF 00 A0 FD | 	call	#popregs_
09f18                 | _ff_cc_st_clust_0315_ret
09f18     2D 00 64 FD | 	ret
09f1c                 | 
09f1c                 | _ff_cc_dir_read_0320
09f1c     0B 5A 05 F6 | 	mov	COUNT_, #11
09f20     B0 00 A0 FD | 	call	#pushregs_
09f24     3B 85 02 F6 | 	mov	local01, arg01
09f28     3C 87 02 F6 | 	mov	local02, arg02
09f2c     04 88 06 F6 | 	mov	local03, #4
09f30     42 8B 02 FB | 	rdlong	local04, local01
09f34                 | ' )
09f34                 | ' {
09f34                 | ' 	FRESULT res = FR_NO_FILE;
09f34                 | ' 	FATFS *fs = dp->obj.fs;
09f34                 | ' 	BYTE attr, b;
09f34                 | ' #line 2376 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09f34                 | ' 	while (dp->sect) {
09f34                 | LR__0603
09f34     18 84 06 F1 | 	add	local01, #24
09f38     42 8D 0A FB | 	rdlong	local05, local01 wz
09f3c     18 84 86 F1 | 	sub	local01, #24
09f40     C0 00 90 AD |  if_e	jmp	#LR__0605
09f44     45 77 02 F6 | 	mov	arg01, local04
09f48     18 84 06 F1 | 	add	local01, #24
09f4c     42 79 02 FB | 	rdlong	arg02, local01
09f50     18 84 86 F1 | 	sub	local01, #24
09f54     A0 EF BF FD | 	call	#_ff_cc_move_window_0273
09f58     18 89 0A F6 | 	mov	local03, result1 wz
09f5c     A4 00 90 5D |  if_ne	jmp	#LR__0605
09f60     1C 84 06 F1 | 	add	local01, #28
09f64     42 8D 02 FB | 	rdlong	local05, local01
09f68     1C 84 86 F1 | 	sub	local01, #28
09f6c     46 8F C2 FA | 	rdbyte	local06, local05
09f70     47 8D 02 F6 | 	mov	local05, local06
09f74     07 8C 4E F7 | 	zerox	local05, #7 wz
09f78     04 88 06 A6 |  if_e	mov	local03, #4
09f7c                 | ' 			res = FR_NO_FILE; break;
09f7c     84 00 90 AD |  if_e	jmp	#LR__0605
09f80     1C 84 06 F1 | 	add	local01, #28
09f84     42 91 02 FB | 	rdlong	local07, local01
09f88     0B 90 06 F1 | 	add	local07, #11
09f8c     48 93 C2 FA | 	rdbyte	local08, local07
09f90     3F 92 06 F5 | 	and	local08, #63
09f94     16 84 86 F1 | 	sub	local01, #22
09f98     42 93 42 FC | 	wrbyte	local08, local01
09f9c     06 84 86 F1 | 	sub	local01, #6
09fa0     47 8D 02 F6 | 	mov	local05, local06
09fa4     07 8C 46 F7 | 	zerox	local05, #7
09fa8     E5 8C 0E F2 | 	cmp	local05, #229 wz
09fac     40 00 90 AD |  if_e	jmp	#LR__0604
09fb0     47 91 02 F6 | 	mov	local07, local06
09fb4     07 90 46 F7 | 	zerox	local07, #7
09fb8     2E 90 0E F2 | 	cmp	local07, #46 wz
09fbc     30 00 90 AD |  if_e	jmp	#LR__0604
09fc0     49 95 02 F6 | 	mov	local09, local08
09fc4     07 94 46 F7 | 	zerox	local09, #7
09fc8     0F 94 0E F2 | 	cmp	local09, #15 wz
09fcc     20 00 90 AD |  if_e	jmp	#LR__0604
09fd0     00 96 06 F6 | 	mov	local10, #0
09fd4     49 99 02 F6 | 	mov	local11, local08
09fd8     07 98 46 F7 | 	zerox	local11, #7
09fdc     20 98 26 F5 | 	andn	local11, #32
09fe0     08 98 0E F2 | 	cmp	local11, #8 wz
09fe4     01 96 06 A6 |  if_e	mov	local10, #1
09fe8     43 97 0A F2 | 	cmp	local10, local02 wz
09fec                 | ' 				break;
09fec     14 00 90 AD |  if_e	jmp	#LR__0605
09ff0                 | LR__0604
09ff0     42 77 02 F6 | 	mov	arg01, local01
09ff4     00 78 06 F6 | 	mov	arg02, #0
09ff8     DC FB BF FD | 	call	#_ff_cc_dir_next_0308
09ffc     18 89 0A F6 | 	mov	local03, result1 wz
0a000     30 FF 9F AD |  if_e	jmp	#LR__0603
0a004                 | LR__0605
0a004     00 88 0E F2 | 	cmp	local03, #0 wz
0a008     18 84 06 51 |  if_ne	add	local01, #24
0a00c     42 01 68 5C |  if_ne	wrlong	#0, local01
0a010                 | ' 	return res;
0a010     44 31 02 F6 | 	mov	result1, local03
0a014     AF F0 03 F6 | 	mov	ptra, fp
0a018     BF 00 A0 FD | 	call	#popregs_
0a01c                 | _ff_cc_dir_read_0320_ret
0a01c     2D 00 64 FD | 	ret
0a020                 | 
0a020                 | _ff_cc_dir_find_0324
0a020     0E 5A 05 F6 | 	mov	COUNT_, #14
0a024     B0 00 A0 FD | 	call	#pushregs_
0a028     3B 85 02 F6 | 	mov	local01, arg01
0a02c     42 87 02 FB | 	rdlong	local02, local01
0a030     42 77 02 F6 | 	mov	arg01, local01
0a034     00 78 06 F6 | 	mov	arg02, #0
0a038     10 FA BF FD | 	call	#_ff_cc_dir_sdi_0304
0a03c     00 30 0E F2 | 	cmp	result1, #0 wz
0a040     D8 00 90 5D |  if_ne	jmp	#LR__0609
0a044                 | ' #line 2479 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a044                 | ' 	do {
0a044                 | LR__0606
0a044     43 77 02 F6 | 	mov	arg01, local02
0a048     18 84 06 F1 | 	add	local01, #24
0a04c     42 79 02 FB | 	rdlong	arg02, local01
0a050     18 84 86 F1 | 	sub	local01, #24
0a054     A0 EE BF FD | 	call	#_ff_cc_move_window_0273
0a058     18 89 0A F6 | 	mov	local03, result1 wz
0a05c     B8 00 90 5D |  if_ne	jmp	#LR__0608
0a060     1C 84 06 F1 | 	add	local01, #28
0a064     42 8B 02 FB | 	rdlong	local04, local01
0a068     1C 84 86 F1 | 	sub	local01, #28
0a06c     45 8D C2 FA | 	rdbyte	local05, local04
0a070     46 8B 02 F6 | 	mov	local04, local05
0a074     07 8A 4E F7 | 	zerox	local04, #7 wz
0a078     04 88 06 A6 |  if_e	mov	local03, #4
0a07c     98 00 90 AD |  if_e	jmp	#LR__0608
0a080     1C 84 06 F1 | 	add	local01, #28
0a084     42 8F 02 FB | 	rdlong	local06, local01
0a088     0B 8E 06 F1 | 	add	local06, #11
0a08c     47 8B C2 FA | 	rdbyte	local04, local06
0a090     3F 8A 06 F5 | 	and	local04, #63
0a094     16 84 86 F1 | 	sub	local01, #22
0a098     42 8B 42 FC | 	wrbyte	local04, local01
0a09c     16 84 06 F1 | 	add	local01, #22
0a0a0     42 8F 02 FB | 	rdlong	local06, local01
0a0a4     1C 84 86 F1 | 	sub	local01, #28
0a0a8     0B 8E 06 F1 | 	add	local06, #11
0a0ac     47 91 C2 FA | 	rdbyte	local07, local06
0a0b0     48 8B 02 F6 | 	mov	local04, local07
0a0b4     07 8A 46 F7 | 	zerox	local04, #7
0a0b8     08 8A CE F7 | 	test	local04, #8 wz
0a0bc     38 00 90 5D |  if_ne	jmp	#LR__0607
0a0c0     1C 84 06 F1 | 	add	local01, #28
0a0c4     42 93 02 FB | 	rdlong	local08, local01
0a0c8     49 95 02 F6 | 	mov	local09, local08
0a0cc     04 84 06 F1 | 	add	local01, #4
0a0d0     42 97 02 F6 | 	mov	local10, local01
0a0d4     4B 99 02 F6 | 	mov	local11, local10
0a0d8     0B 9A 06 F6 | 	mov	local12, #11
0a0dc     4A 77 02 F6 | 	mov	arg01, local09
0a0e0     4C 79 02 F6 | 	mov	arg02, local11
0a0e4     0B 7A 06 F6 | 	mov	arg03, #11
0a0e8     20 84 86 F1 | 	sub	local01, #32
0a0ec     D0 EC BF FD | 	call	#_ff_cc_mem_cmp_0266
0a0f0     18 9D 0A F6 | 	mov	local13, result1 wz
0a0f4     20 00 90 AD |  if_e	jmp	#LR__0608
0a0f8                 | LR__0607
0a0f8     42 8B 02 F6 | 	mov	local04, local01
0a0fc     00 8E 06 F6 | 	mov	local06, #0
0a100     45 77 02 F6 | 	mov	arg01, local04
0a104     00 78 06 F6 | 	mov	arg02, #0
0a108     CC FA BF FD | 	call	#_ff_cc_dir_next_0308
0a10c     18 9F 02 F6 | 	mov	local14, result1
0a110     4F 89 0A F6 | 	mov	local03, local14 wz
0a114     2C FF 9F AD |  if_e	jmp	#LR__0606
0a118                 | LR__0608
0a118                 | ' 
0a118                 | ' 	return res;
0a118     44 31 02 F6 | 	mov	result1, local03
0a11c                 | LR__0609
0a11c     AF F0 03 F6 | 	mov	ptra, fp
0a120     BF 00 A0 FD | 	call	#popregs_
0a124                 | _ff_cc_dir_find_0324_ret
0a124     2D 00 64 FD | 	ret
0a128                 | 
0a128                 | _ff_cc_dir_register_0327
0a128     03 5A 05 F6 | 	mov	COUNT_, #3
0a12c     B0 00 A0 FD | 	call	#pushregs_
0a130     3B 85 02 F6 | 	mov	local01, arg01
0a134     42 87 02 FB | 	rdlong	local02, local01
0a138     42 77 02 F6 | 	mov	arg01, local01
0a13c     01 78 06 F6 | 	mov	arg02, #1
0a140     68 FC BF FD | 	call	#_ff_cc_dir_alloc_0312
0a144     18 89 0A F6 | 	mov	local03, result1 wz
0a148     60 00 90 5D |  if_ne	jmp	#LR__0615
0a14c     18 84 06 F1 | 	add	local01, #24
0a150     42 79 02 FB | 	rdlong	arg02, local01
0a154     18 84 86 F1 | 	sub	local01, #24
0a158     43 77 02 F6 | 	mov	arg01, local02
0a15c     98 ED BF FD | 	call	#_ff_cc_move_window_0273
0a160     18 89 0A F6 | 	mov	local03, result1 wz
0a164     44 00 90 5D |  if_ne	jmp	#LR__0614
0a168     1C 84 06 F1 | 	add	local01, #28
0a16c     42 77 02 FB | 	rdlong	arg01, local01
0a170     1C 84 86 F1 | 	sub	local01, #28
0a174     00 78 06 F6 | 	mov	arg02, #0
0a178                 | ' {
0a178                 | ' 	BYTE *d = (BYTE*)dst;
0a178                 | ' 
0a178                 | ' 	do {
0a178     90 5E 9F FE | 	loc	pa,	#(@LR__0612-@LR__0610)
0a17c     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a180                 | LR__0610
0a180     20 04 DC FC | 	rep	@LR__0613, #32
0a184                 | LR__0611
0a184     3B 79 42 FC | 	wrbyte	arg02, arg01
0a188     01 76 06 F1 | 	add	arg01, #1
0a18c                 | LR__0612
0a18c                 | LR__0613
0a18c     1C 84 06 F1 | 	add	local01, #28
0a190     42 77 02 FB | 	rdlong	arg01, local01
0a194     04 84 06 F1 | 	add	local01, #4
0a198     42 79 02 F6 | 	mov	arg02, local01
0a19c     0B 7A 06 F6 | 	mov	arg03, #11
0a1a0     EC EB BF FD | 	call	#_ff_cc_mem_cpy_0260
0a1a4     03 86 06 F1 | 	add	local02, #3
0a1a8     43 03 48 FC | 	wrbyte	#1, local02
0a1ac                 | LR__0614
0a1ac                 | LR__0615
0a1ac                 | ' 			mem_set(dp->dir, 0,  32 );
0a1ac                 | ' 			mem_cpy(dp->dir +  0 , dp->fn, 11);
0a1ac                 | ' #line 2613 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a1ac                 | ' 			fs->wflag = 1;
0a1ac                 | ' 		}
0a1ac                 | ' 	}
0a1ac                 | ' 
0a1ac                 | ' 	return res;
0a1ac     44 31 02 F6 | 	mov	result1, local03
0a1b0     AF F0 03 F6 | 	mov	ptra, fp
0a1b4     BF 00 A0 FD | 	call	#popregs_
0a1b8                 | _ff_cc_dir_register_0327_ret
0a1b8     2D 00 64 FD | 	ret
0a1bc                 | 
0a1bc                 | _ff_cc_dir_remove_0330
0a1bc     04 5A 05 F6 | 	mov	COUNT_, #4
0a1c0     B0 00 A0 FD | 	call	#pushregs_
0a1c4     3B 85 02 F6 | 	mov	local01, arg01
0a1c8     42 87 02 FB | 	rdlong	local02, local01
0a1cc     18 84 06 F1 | 	add	local01, #24
0a1d0     42 79 02 FB | 	rdlong	arg02, local01
0a1d4     18 84 86 F1 | 	sub	local01, #24
0a1d8     43 77 02 F6 | 	mov	arg01, local02
0a1dc     18 ED BF FD | 	call	#_ff_cc_move_window_0273
0a1e0     18 89 0A F6 | 	mov	local03, result1 wz
0a1e4     14 00 90 5D |  if_ne	jmp	#LR__0616
0a1e8     1C 84 06 F1 | 	add	local01, #28
0a1ec     42 8B 02 FB | 	rdlong	local04, local01
0a1f0     45 CB 49 FC | 	wrbyte	#229, local04
0a1f4     03 86 06 F1 | 	add	local02, #3
0a1f8     43 03 48 FC | 	wrbyte	#1, local02
0a1fc                 | LR__0616
0a1fc                 | ' 		dp->dir[ 0 ] =  0xE5 ;
0a1fc                 | ' 		fs->wflag = 1;
0a1fc                 | ' 	}
0a1fc                 | ' 
0a1fc                 | ' 
0a1fc                 | ' 	return res;
0a1fc     44 31 02 F6 | 	mov	result1, local03
0a200     AF F0 03 F6 | 	mov	ptra, fp
0a204     BF 00 A0 FD | 	call	#popregs_
0a208                 | _ff_cc_dir_remove_0330_ret
0a208     2D 00 64 FD | 	ret
0a20c                 | 
0a20c                 | _ff_cc_get_fileinfo_0334
0a20c     0B 5A 05 F6 | 	mov	COUNT_, #11
0a210     B0 00 A0 FD | 	call	#pushregs_
0a214     3B 85 02 F6 | 	mov	local01, arg01
0a218     3C 87 02 F6 | 	mov	local02, arg02
0a21c     0C 86 06 F1 | 	add	local02, #12
0a220     43 01 48 FC | 	wrbyte	#0, local02
0a224     0C 86 86 F1 | 	sub	local02, #12
0a228     18 84 06 F1 | 	add	local01, #24
0a22c     42 89 02 FB | 	rdlong	local03, local01
0a230     18 84 86 F1 | 	sub	local01, #24
0a234     44 8B 0A F6 | 	mov	local04, local03 wz
0a238     00 01 90 AD |  if_e	jmp	#LR__0620
0a23c     00 8C 06 F6 | 	mov	local05, #0
0a240     00 8E 06 F6 | 	mov	local06, #0
0a244                 | ' #line 2755 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a244                 | ' 	si = di = 0;
0a244                 | ' 	while (si < 11) {
0a244                 | LR__0617
0a244     0B 8E 1E F2 | 	cmp	local06, #11 wcz
0a248     78 00 90 3D |  if_ae	jmp	#LR__0619
0a24c     1C 84 06 F1 | 	add	local01, #28
0a250     42 91 02 FB | 	rdlong	local07, local01
0a254     1C 84 86 F1 | 	sub	local01, #28
0a258     47 93 02 F6 | 	mov	local08, local06
0a25c     48 93 02 F1 | 	add	local08, local07
0a260     49 95 C2 FA | 	rdbyte	local09, local08
0a264     4A 8B 02 F6 | 	mov	local04, local09
0a268     07 8A 46 F7 | 	zerox	local04, #7
0a26c     20 8A 0E F2 | 	cmp	local04, #32 wz
0a270     01 8E 06 F1 | 	add	local06, #1
0a274     CC FF 9F AD |  if_e	jmp	#LR__0617
0a278     4A 8B 02 F6 | 	mov	local04, local09
0a27c     07 8A 46 F7 | 	zerox	local04, #7
0a280     05 8A 0E F2 | 	cmp	local04, #5 wz
0a284     E5 94 06 A6 |  if_e	mov	local09, #229
0a288     09 8E 0E F2 | 	cmp	local06, #9 wz
0a28c     18 00 90 5D |  if_ne	jmp	#LR__0618
0a290     46 97 02 F6 | 	mov	local10, local05
0a294     0C 86 06 F1 | 	add	local02, #12
0a298     43 97 02 F1 | 	add	local10, local02
0a29c     4B 5D 48 FC | 	wrbyte	#46, local10
0a2a0     01 8C 06 F1 | 	add	local05, #1
0a2a4     0C 86 86 F1 | 	sub	local02, #12
0a2a8                 | LR__0618
0a2a8     46 97 02 F6 | 	mov	local10, local05
0a2ac     0C 86 06 F1 | 	add	local02, #12
0a2b0     43 97 02 F1 | 	add	local10, local02
0a2b4     4B 95 42 FC | 	wrbyte	local09, local10
0a2b8     01 8C 06 F1 | 	add	local05, #1
0a2bc     0C 86 86 F1 | 	sub	local02, #12
0a2c0     80 FF 9F FD | 	jmp	#LR__0617
0a2c4                 | LR__0619
0a2c4     0C 86 06 F1 | 	add	local02, #12
0a2c8     43 8D 02 F1 | 	add	local05, local02
0a2cc     46 01 48 FC | 	wrbyte	#0, local05
0a2d0     1C 84 06 F1 | 	add	local01, #28
0a2d4     42 8B 02 FB | 	rdlong	local04, local01
0a2d8     0B 8A 06 F1 | 	add	local04, #11
0a2dc     45 97 C2 FA | 	rdbyte	local10, local04
0a2e0     04 86 86 F1 | 	sub	local02, #4
0a2e4     43 97 42 FC | 	wrbyte	local10, local02
0a2e8     08 86 86 F1 | 	sub	local02, #8
0a2ec     42 77 02 FB | 	rdlong	arg01, local01
0a2f0     1C 84 86 F1 | 	sub	local01, #28
0a2f4     1C 76 06 F1 | 	add	arg01, #28
0a2f8     04 EA BF FD | 	call	#_ff_cc_ld_dword_0255
0a2fc     43 31 62 FC | 	wrlong	result1, local02
0a300     1C 84 06 F1 | 	add	local01, #28
0a304     42 77 02 FB | 	rdlong	arg01, local01
0a308     1C 84 86 F1 | 	sub	local01, #28
0a30c     16 76 06 F1 | 	add	arg01, #22
0a310     C8 E9 BF FD | 	call	#_ff_cc_ld_word_0253
0a314     18 99 02 F6 | 	mov	local11, result1
0a318     06 86 06 F1 | 	add	local02, #6
0a31c     43 99 52 FC | 	wrword	local11, local02
0a320     06 86 86 F1 | 	sub	local02, #6
0a324     1C 84 06 F1 | 	add	local01, #28
0a328     42 77 02 FB | 	rdlong	arg01, local01
0a32c     18 76 06 F1 | 	add	arg01, #24
0a330     A8 E9 BF FD | 	call	#_ff_cc_ld_word_0253
0a334     04 86 06 F1 | 	add	local02, #4
0a338     43 31 52 FC | 	wrword	result1, local02
0a33c                 | LR__0620
0a33c     AF F0 03 F6 | 	mov	ptra, fp
0a340     BF 00 A0 FD | 	call	#popregs_
0a344                 | _ff_cc_get_fileinfo_0334_ret
0a344     2D 00 64 FD | 	ret
0a348                 | 
0a348                 | _ff_cc_create_name_0342
0a348     0E 5A 05 F6 | 	mov	COUNT_, #14
0a34c     B0 00 A0 FD | 	call	#pushregs_
0a350     3B 85 02 F6 | 	mov	local01, arg01
0a354     3C 87 02 F6 | 	mov	local02, arg02
0a358     43 89 02 FB | 	rdlong	local03, local02
0a35c     20 84 06 F1 | 	add	local01, #32
0a360     42 8B 02 F6 | 	mov	local04, local01
0a364     45 77 02 F6 | 	mov	arg01, local04
0a368     20 78 06 F6 | 	mov	arg02, #32
0a36c     0B 7A 06 F6 | 	mov	arg03, #11
0a370     20 84 86 F1 | 	sub	local01, #32
0a374                 | ' {
0a374                 | ' 	BYTE *d = (BYTE*)dst;
0a374                 | ' 
0a374                 | ' 	do {
0a374     94 5C 9F FE | 	loc	pa,	#(@LR__0623-@LR__0621)
0a378     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a37c                 | LR__0621
0a37c     0B 04 DC FC | 	rep	@LR__0624, #11
0a380                 | LR__0622
0a380     3B 79 42 FC | 	wrbyte	arg02, arg01
0a384     01 76 06 F1 | 	add	arg01, #1
0a388                 | LR__0623
0a388                 | LR__0624
0a388     00 8C 06 F6 | 	mov	local05, #0
0a38c     00 8E 06 F6 | 	mov	local06, #0
0a390     08 90 06 F6 | 	mov	local07, #8
0a394                 | ' 
0a394                 | ' 
0a394                 | ' 	p = *path; sfn = dp->fn;
0a394                 | ' 	mem_set(sfn, ' ', 11);
0a394                 | ' 	si = i = 0; ni = 8;
0a394                 | ' #line 3011 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a394                 | ' 	for (;;) {
0a394                 | LR__0625
0a394     47 93 02 F6 | 	mov	local08, local06
0a398     44 93 02 F1 | 	add	local08, local03
0a39c     49 95 C2 FA | 	rdbyte	local09, local08
0a3a0     4A 97 02 F6 | 	mov	local10, local09
0a3a4     07 96 46 F7 | 	zerox	local10, #7
0a3a8     20 96 1E F2 | 	cmp	local10, #32 wcz
0a3ac     01 8E 06 F1 | 	add	local06, #1
0a3b0     A4 01 90 ED |  if_be	jmp	#LR__0639
0a3b4     4A 97 02 F6 | 	mov	local10, local09
0a3b8     07 96 46 F7 | 	zerox	local10, #7
0a3bc     2F 96 0E F2 | 	cmp	local10, #47 wz
0a3c0     10 00 90 AD |  if_e	jmp	#LR__0626
0a3c4     4A 99 02 F6 | 	mov	local11, local09
0a3c8     07 98 46 F7 | 	zerox	local11, #7
0a3cc     5C 98 0E F2 | 	cmp	local11, #92 wz
0a3d0     30 00 90 5D |  if_ne	jmp	#LR__0629
0a3d4                 | LR__0626
0a3d4                 | ' 			while (p[si] == '/' || p[si] == '\\') si++;
0a3d4                 | LR__0627
0a3d4     47 99 02 F6 | 	mov	local11, local06
0a3d8     44 99 02 F1 | 	add	local11, local03
0a3dc     4C 97 C2 FA | 	rdbyte	local10, local11
0a3e0     2F 96 0E F2 | 	cmp	local10, #47 wz
0a3e4     14 00 90 AD |  if_e	jmp	#LR__0628
0a3e8     47 9B 02 F6 | 	mov	local12, local06
0a3ec     44 9B 02 F1 | 	add	local12, local03
0a3f0     4D 9D C2 FA | 	rdbyte	local13, local12
0a3f4     5C 9C 0E F2 | 	cmp	local13, #92 wz
0a3f8     5C 01 90 5D |  if_ne	jmp	#LR__0639
0a3fc                 | LR__0628
0a3fc     01 8E 06 F1 | 	add	local06, #1
0a400     D0 FF 9F FD | 	jmp	#LR__0627
0a404                 | ' 			break;
0a404                 | LR__0629
0a404     4A 97 02 F6 | 	mov	local10, local09
0a408     07 96 46 F7 | 	zerox	local10, #7
0a40c     2E 96 0E F2 | 	cmp	local10, #46 wz
0a410     08 00 90 AD |  if_e	jmp	#LR__0630
0a414     48 8D 1A F2 | 	cmp	local05, local07 wcz
0a418     28 00 90 CD |  if_b	jmp	#LR__0633
0a41c                 | LR__0630
0a41c     0B 90 0E F2 | 	cmp	local07, #11 wz
0a420     0C 00 90 AD |  if_e	jmp	#LR__0631
0a424     07 94 46 F7 | 	zerox	local09, #7
0a428     2E 94 0E F2 | 	cmp	local09, #46 wz
0a42c     08 00 90 AD |  if_e	jmp	#LR__0632
0a430                 | LR__0631
0a430     06 30 06 F6 | 	mov	result1, #6
0a434     60 01 90 FD | 	jmp	#LR__0640
0a438                 | LR__0632
0a438     08 8C 06 F6 | 	mov	local05, #8
0a43c     0B 90 06 F6 | 	mov	local07, #11
0a440                 | ' 			i = 8; ni = 11;
0a440                 | ' 			continue;
0a440     50 FF 9F FD | 	jmp	#LR__0625
0a444                 | LR__0633
0a444     4A 97 02 F6 | 	mov	local10, local09
0a448     07 96 46 F7 | 	zerox	local10, #7
0a44c     80 96 1E F2 | 	cmp	local10, #128 wcz
0a450     18 00 90 CD |  if_b	jmp	#LR__0634
0a454     07 94 46 F7 | 	zerox	local09, #7
0a458     7F 94 06 F5 | 	and	local09, #127
0a45c     06 1A 06 F1 | 	add	ptr__ff_cc_dat__, #6
0a460     0D 95 02 F1 | 	add	local09, ptr__ff_cc_dat__
0a464     4A 95 C2 FA | 	rdbyte	local09, local09
0a468     06 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #6
0a46c                 | LR__0634
0a46c     4A 77 02 F6 | 	mov	arg01, local09
0a470     07 76 4E F7 | 	zerox	arg01, #7 wz
0a474     00 30 06 56 |  if_ne	mov	result1, #0
0a478                 | ' 
0a478                 | ' 	return 0;
0a478     00 30 06 A6 |  if_e	mov	result1, #0
0a47c     00 30 0E F2 | 	cmp	result1, #0 wz
0a480     68 00 90 AD |  if_e	jmp	#LR__0637
0a484     47 93 02 F6 | 	mov	local08, local06
0a488     44 9D 02 F6 | 	mov	local13, local03
0a48c     44 93 02 F1 | 	add	local08, local03
0a490     49 9F C2 FA | 	rdbyte	local14, local08
0a494     4F 77 02 F6 | 	mov	arg01, local14
0a498     01 8E 06 F1 | 	add	local06, #1
0a49c     07 76 4E F7 | 	zerox	arg01, #7 wz
0a4a0     00 30 06 56 |  if_ne	mov	result1, #0
0a4a4                 | ' 
0a4a4                 | ' 	return 0;
0a4a4     00 30 06 A6 |  if_e	mov	result1, #0
0a4a8     18 99 0A F6 | 	mov	local11, result1 wz
0a4ac     10 00 90 AD |  if_e	jmp	#LR__0635
0a4b0     48 93 02 F6 | 	mov	local08, local07
0a4b4     01 92 86 F1 | 	sub	local08, #1
0a4b8     49 8D 1A F2 | 	cmp	local05, local08 wcz
0a4bc     08 00 90 CD |  if_b	jmp	#LR__0636
0a4c0                 | LR__0635
0a4c0     06 30 06 F6 | 	mov	result1, #6
0a4c4     D0 00 90 FD | 	jmp	#LR__0640
0a4c8                 | LR__0636
0a4c8     46 93 02 F6 | 	mov	local08, local05
0a4cc     45 93 02 F1 | 	add	local08, local04
0a4d0     49 95 42 FC | 	wrbyte	local09, local08
0a4d4     01 8C 06 F1 | 	add	local05, #1
0a4d8     46 93 02 F6 | 	mov	local08, local05
0a4dc     45 93 02 F1 | 	add	local08, local04
0a4e0     49 9F 42 FC | 	wrbyte	local14, local08
0a4e4     01 8C 06 F1 | 	add	local05, #1
0a4e8     A8 FE 9F FD | 	jmp	#LR__0625
0a4ec                 | LR__0637
0a4ec     7A 00 00 FF 
0a4f0     38 76 06 F6 | 	mov	arg01, ##@LR__0938
0a4f4     4A 93 02 F6 | 	mov	local08, local09
0a4f8     07 92 46 F7 | 	zerox	local08, #7
0a4fc     49 9D 02 F6 | 	mov	local13, local08
0a500     4E 79 02 F6 | 	mov	arg02, local13
0a504     F0 E8 BF FD | 	call	#_ff_cc_chk_chr_0267
0a508     18 9B 0A F6 | 	mov	local12, result1 wz
0a50c     06 30 06 56 |  if_ne	mov	result1, #6
0a510     84 00 90 5D |  if_ne	jmp	#LR__0640
0a514     4A 97 02 F6 | 	mov	local10, local09
0a518     07 96 46 F7 | 	zerox	local10, #7
0a51c     61 96 1E F2 | 	cmp	local10, #97 wcz
0a520     20 00 90 CD |  if_b	jmp	#LR__0638
0a524     4A 99 02 F6 | 	mov	local11, local09
0a528     07 98 46 F7 | 	zerox	local11, #7
0a52c     7A 98 1E F2 | 	cmp	local11, #122 wcz
0a530     10 00 90 1D |  if_a	jmp	#LR__0638
0a534     4A 97 02 F6 | 	mov	local10, local09
0a538     07 96 46 F7 | 	zerox	local10, #7
0a53c     20 96 86 F1 | 	sub	local10, #32
0a540     4B 95 02 F6 | 	mov	local09, local10
0a544                 | LR__0638
0a544     46 93 02 F6 | 	mov	local08, local05
0a548     45 93 02 F1 | 	add	local08, local04
0a54c     49 95 42 FC | 	wrbyte	local09, local08
0a550     01 8C 06 F1 | 	add	local05, #1
0a554     3C FE 9F FD | 	jmp	#LR__0625
0a558                 | LR__0639
0a558     47 89 02 F1 | 	add	local03, local06
0a55c     43 89 62 FC | 	wrlong	local03, local02
0a560     00 8C 0E F2 | 	cmp	local05, #0 wz
0a564     06 30 06 A6 |  if_e	mov	result1, #6
0a568     2C 00 90 AD |  if_e	jmp	#LR__0640
0a56c     45 97 C2 FA | 	rdbyte	local10, local04
0a570     E5 96 0E F2 | 	cmp	local10, #229 wz
0a574     45 0B 48 AC |  if_e	wrbyte	#5, local04
0a578     4A 99 02 F6 | 	mov	local11, local09
0a57c     07 98 46 F7 | 	zerox	local11, #7
0a580     20 98 1E F2 | 	cmp	local11, #32 wcz
0a584     04 96 06 E6 |  if_be	mov	local10, #4
0a588     00 96 06 16 |  if_a	mov	local10, #0
0a58c     0B 8A 06 F1 | 	add	local04, #11
0a590     45 97 42 FC | 	wrbyte	local10, local04
0a594                 | ' 	sfn[ 11 ] = (c <= ' ') ?  0x04  : 0;
0a594                 | ' 
0a594                 | ' 	return FR_OK;
0a594     00 30 06 F6 | 	mov	result1, #0
0a598                 | LR__0640
0a598     AF F0 03 F6 | 	mov	ptra, fp
0a59c     BF 00 A0 FD | 	call	#popregs_
0a5a0                 | _ff_cc_create_name_0342_ret
0a5a0     2D 00 64 FD | 	ret
0a5a4                 | 
0a5a4                 | _ff_cc_follow_path_0346
0a5a4     07 5A 05 F6 | 	mov	COUNT_, #7
0a5a8     B0 00 A0 FD | 	call	#pushregs_
0a5ac     18 F0 07 F1 | 	add	ptra, #24
0a5b0     04 5E 05 F1 | 	add	fp, #4
0a5b4     AF 76 62 FC | 	wrlong	arg01, fp
0a5b8     04 5E 05 F1 | 	add	fp, #4
0a5bc     AF 78 62 FC | 	wrlong	arg02, fp
0a5c0     04 5E 85 F1 | 	sub	fp, #4
0a5c4     AF 84 02 FB | 	rdlong	local01, fp
0a5c8     42 87 02 FB | 	rdlong	local02, local01
0a5cc     10 5E 05 F1 | 	add	fp, #16
0a5d0     AF 86 62 FC | 	wrlong	local02, fp
0a5d4     14 5E 85 F1 | 	sub	fp, #20
0a5d8     6C 5A 9F FE | 	loc	pa,	#(@LR__0643-@LR__0641)
0a5dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a5e0                 | ' )
0a5e0                 | ' {
0a5e0                 | ' 	FRESULT res;
0a5e0                 | ' 	BYTE ns;
0a5e0                 | ' 	FATFS *fs = dp->obj.fs;
0a5e0                 | ' #line 3075 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a5e0                 | ' 	{
0a5e0                 | ' 		while (*path == '/' || *path == '\\') path++;
0a5e0                 | LR__0641
0a5e0     08 5E 05 F1 | 	add	fp, #8
0a5e4     AF 88 02 FB | 	rdlong	local03, fp
0a5e8     08 5E 85 F1 | 	sub	fp, #8
0a5ec     44 85 C2 FA | 	rdbyte	local01, local03
0a5f0     2F 84 0E F2 | 	cmp	local01, #47 wz
0a5f4     18 00 90 AD |  if_e	jmp	#LR__0642
0a5f8     08 5E 05 F1 | 	add	fp, #8
0a5fc     AF 8A 02 FB | 	rdlong	local04, fp
0a600     08 5E 85 F1 | 	sub	fp, #8
0a604     45 8D C2 FA | 	rdbyte	local05, local04
0a608     5C 8C 0E F2 | 	cmp	local05, #92 wz
0a60c     18 00 90 5D |  if_ne	jmp	#LR__0644
0a610                 | LR__0642
0a610     08 5E 05 F1 | 	add	fp, #8
0a614     AF 86 02 FB | 	rdlong	local02, fp
0a618     01 86 06 F1 | 	add	local02, #1
0a61c     AF 86 62 FC | 	wrlong	local02, fp
0a620     08 5E 85 F1 | 	sub	fp, #8
0a624     B8 FF 9F FD | 	jmp	#LR__0641
0a628                 | LR__0643
0a628                 | LR__0644
0a628     04 5E 05 F1 | 	add	fp, #4
0a62c     AF 84 02 FB | 	rdlong	local01, fp
0a630     08 84 06 F1 | 	add	local01, #8
0a634     42 01 68 FC | 	wrlong	#0, local01
0a638     04 5E 05 F1 | 	add	fp, #4
0a63c     AF 88 02 FB | 	rdlong	local03, fp
0a640     08 5E 85 F1 | 	sub	fp, #8
0a644     44 85 C2 FA | 	rdbyte	local01, local03
0a648     20 84 1E F2 | 	cmp	local01, #32 wcz
0a64c     30 00 90 3D |  if_ae	jmp	#LR__0645
0a650     04 5E 05 F1 | 	add	fp, #4
0a654     AF 84 02 FB | 	rdlong	local01, fp
0a658     2B 84 06 F1 | 	add	local01, #43
0a65c     42 01 49 FC | 	wrbyte	#128, local01
0a660     AF 76 02 FB | 	rdlong	arg01, fp
0a664     04 5E 85 F1 | 	sub	fp, #4
0a668     00 78 06 F6 | 	mov	arg02, #0
0a66c     DC F3 BF FD | 	call	#_ff_cc_dir_sdi_0304
0a670     0C 5E 05 F1 | 	add	fp, #12
0a674     AF 30 62 FC | 	wrlong	result1, fp
0a678     0C 5E 85 F1 | 	sub	fp, #12
0a67c     30 01 90 FD | 	jmp	#LR__0650
0a680                 | LR__0645
0a680                 | ' 		for (;;) {
0a680                 | LR__0646
0a680     04 5E 05 F1 | 	add	fp, #4
0a684     AF 76 02 FB | 	rdlong	arg01, fp
0a688     04 5E 05 F1 | 	add	fp, #4
0a68c     AF 78 02 F6 | 	mov	arg02, fp
0a690     08 5E 85 F1 | 	sub	fp, #8
0a694     B0 FC BF FD | 	call	#_ff_cc_create_name_0342
0a698     18 8B 02 F6 | 	mov	local04, result1
0a69c     0C 5E 05 F1 | 	add	fp, #12
0a6a0     AF 8A 62 FC | 	wrlong	local04, fp
0a6a4     AF 84 0A FB | 	rdlong	local01, fp wz
0a6a8     0C 5E 85 F1 | 	sub	fp, #12
0a6ac     00 01 90 5D |  if_ne	jmp	#LR__0649
0a6b0     04 5E 05 F1 | 	add	fp, #4
0a6b4     AF 76 02 FB | 	rdlong	arg01, fp
0a6b8     04 5E 85 F1 | 	sub	fp, #4
0a6bc     60 F9 BF FD | 	call	#_ff_cc_dir_find_0324
0a6c0     0C 5E 05 F1 | 	add	fp, #12
0a6c4     AF 30 62 FC | 	wrlong	result1, fp
0a6c8     08 5E 85 F1 | 	sub	fp, #8
0a6cc     AF 84 02 FB | 	rdlong	local01, fp
0a6d0     2B 84 06 F1 | 	add	local01, #43
0a6d4     42 87 C2 FA | 	rdbyte	local02, local01
0a6d8     0C 5E 05 F1 | 	add	fp, #12
0a6dc     AF 86 42 FC | 	wrbyte	local02, fp
0a6e0     04 5E 85 F1 | 	sub	fp, #4
0a6e4     AF 84 0A FB | 	rdlong	local01, fp wz
0a6e8     0C 5E 85 F1 | 	sub	fp, #12
0a6ec     38 00 90 AD |  if_e	jmp	#LR__0647
0a6f0     0C 5E 05 F1 | 	add	fp, #12
0a6f4     AF 84 02 FB | 	rdlong	local01, fp
0a6f8     0C 5E 85 F1 | 	sub	fp, #12
0a6fc     04 84 0E F2 | 	cmp	local01, #4 wz
0a700     AC 00 90 5D |  if_ne	jmp	#LR__0649
0a704     10 5E 05 F1 | 	add	fp, #16
0a708     AF 84 C2 FA | 	rdbyte	local01, fp
0a70c     10 5E 85 F1 | 	sub	fp, #16
0a710     07 84 46 F7 | 	zerox	local01, #7
0a714     04 84 CE F7 | 	test	local01, #4 wz
0a718     0C 5E 05 A1 |  if_e	add	fp, #12
0a71c     AF 0A 68 AC |  if_e	wrlong	#5, fp
0a720     0C 5E 85 A1 |  if_e	sub	fp, #12
0a724                 | ' 					}
0a724                 | ' 				}
0a724                 | ' 				break;
0a724     88 00 90 FD | 	jmp	#LR__0649
0a728                 | LR__0647
0a728     10 5E 05 F1 | 	add	fp, #16
0a72c     AF 84 C2 FA | 	rdbyte	local01, fp
0a730     10 5E 85 F1 | 	sub	fp, #16
0a734     07 84 46 F7 | 	zerox	local01, #7
0a738     04 84 CE F7 | 	test	local01, #4 wz
0a73c     70 00 90 5D |  if_ne	jmp	#LR__0649
0a740     04 5E 05 F1 | 	add	fp, #4
0a744     AF 88 02 FB | 	rdlong	local03, fp
0a748     04 5E 85 F1 | 	sub	fp, #4
0a74c     06 88 06 F1 | 	add	local03, #6
0a750     44 85 C2 FA | 	rdbyte	local01, local03
0a754     10 84 CE F7 | 	test	local01, #16 wz
0a758     10 00 90 5D |  if_ne	jmp	#LR__0648
0a75c     0C 5E 05 F1 | 	add	fp, #12
0a760     AF 0A 68 FC | 	wrlong	#5, fp
0a764     0C 5E 85 F1 | 	sub	fp, #12
0a768                 | ' 				res = FR_NO_PATH; break;
0a768     44 00 90 FD | 	jmp	#LR__0649
0a76c                 | LR__0648
0a76c     04 5E 05 F1 | 	add	fp, #4
0a770     AF 84 02 FB | 	rdlong	local01, fp
0a774     10 5E 05 F1 | 	add	fp, #16
0a778     AF 76 02 FB | 	rdlong	arg01, fp
0a77c     3B 79 02 F6 | 	mov	arg02, arg01
0a780     30 78 06 F1 | 	add	arg02, #48
0a784     10 5E 85 F1 | 	sub	fp, #16
0a788     AF 8E 02 FB | 	rdlong	local06, fp
0a78c     04 5E 85 F1 | 	sub	fp, #4
0a790     10 8E 06 F1 | 	add	local06, #16
0a794     47 91 02 FB | 	rdlong	local07, local06
0a798     FF 91 06 F5 | 	and	local07, #511
0a79c     48 79 02 F1 | 	add	arg02, local07
0a7a0     D0 F6 BF FD | 	call	#_ff_cc_ld_clust_0314
0a7a4     08 84 06 F1 | 	add	local01, #8
0a7a8     42 31 62 FC | 	wrlong	result1, local01
0a7ac     D0 FE 9F FD | 	jmp	#LR__0646
0a7b0                 | LR__0649
0a7b0                 | LR__0650
0a7b0                 | ' 			}
0a7b0                 | ' #line 3131 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a7b0                 | ' 			{
0a7b0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
0a7b0                 | ' 			}
0a7b0                 | ' 		}
0a7b0                 | ' 	}
0a7b0                 | ' 
0a7b0                 | ' 	return res;
0a7b0     0C 5E 05 F1 | 	add	fp, #12
0a7b4     AF 30 02 FB | 	rdlong	result1, fp
0a7b8     0C 5E 85 F1 | 	sub	fp, #12
0a7bc     AF F0 03 F6 | 	mov	ptra, fp
0a7c0     BF 00 A0 FD | 	call	#popregs_
0a7c4                 | _ff_cc_follow_path_0346_ret
0a7c4     2D 00 64 FD | 	ret
0a7c8                 | 
0a7c8                 | _ff_cc_get_ldnumber_0352
0a7c8     3B 37 02 F6 | 	mov	_var01, arg01
0a7cc     01 38 66 F6 | 	neg	_var02, #1
0a7d0     1B 3B 0A FB | 	rdlong	_var03, _var01 wz
0a7d4     1D 3D 02 F6 | 	mov	_var04, _var03
0a7d8     01 30 66 A6 |  if_e	neg	result1, #1
0a7dc     8C 00 90 AD |  if_e	jmp	#_ff_cc_get_ldnumber_0352_ret
0a7e0     44 58 9F FE | 	loc	pa,	#(@LR__0652-@LR__0651)
0a7e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a7e8                 | ' 	do tc = *tt++; while ((UINT)tc >= ( 0  ? ' ' : '!') && tc != ':');
0a7e8                 | LR__0651
0a7e8     1E 3F C2 FA | 	rdbyte	_var05, _var04
0a7ec     1F 41 02 F6 | 	mov	_var06, _var05
0a7f0     07 40 46 F7 | 	zerox	_var06, #7
0a7f4     21 40 1E F2 | 	cmp	_var06, #33 wcz
0a7f8     01 3C 06 F1 | 	add	_var04, #1
0a7fc     10 00 90 CD |  if_b	jmp	#LR__0653
0a800     1F 43 02 F6 | 	mov	_var07, _var05
0a804     07 42 46 F7 | 	zerox	_var07, #7
0a808     3A 42 0E F2 | 	cmp	_var07, #58 wz
0a80c     D8 FF 9F 5D |  if_ne	jmp	#LR__0651
0a810                 | LR__0652
0a810                 | LR__0653
0a810     1F 41 02 F6 | 	mov	_var06, _var05
0a814     07 40 46 F7 | 	zerox	_var06, #7
0a818     3A 40 0E F2 | 	cmp	_var06, #58 wz
0a81c     48 00 90 5D |  if_ne	jmp	#LR__0655
0a820     01 44 06 F6 | 	mov	_var08, #1
0a824     1D 41 C2 FA | 	rdbyte	_var06, _var03
0a828     30 40 1E F2 | 	cmp	_var06, #48 wcz
0a82c     24 00 90 CD |  if_b	jmp	#LR__0654
0a830     1D 43 C2 FA | 	rdbyte	_var07, _var03
0a834     39 42 1E F2 | 	cmp	_var07, #57 wcz
0a838     18 00 90 1D |  if_a	jmp	#LR__0654
0a83c     1D 47 02 F6 | 	mov	_var09, _var03
0a840     02 46 06 F1 | 	add	_var09, #2
0a844     1E 47 0A F2 | 	cmp	_var09, _var04 wz
0a848     1D 41 C2 AA |  if_e	rdbyte	_var06, _var03
0a84c     30 40 86 A1 |  if_e	sub	_var06, #48
0a850     20 45 02 A6 |  if_e	mov	_var08, _var06
0a854                 | LR__0654
0a854     01 44 5E F2 | 	cmps	_var08, #1 wcz
0a858     22 39 02 C6 |  if_b	mov	_var02, _var08
0a85c     1B 3D 62 CC |  if_b	wrlong	_var04, _var01
0a860                 | ' 			vol = i;
0a860                 | ' 			*path = tt;
0a860                 | ' 		}
0a860                 | ' 		return vol;
0a860     1C 31 02 F6 | 	mov	result1, _var02
0a864     04 00 90 FD | 	jmp	#_ff_cc_get_ldnumber_0352_ret
0a868                 | LR__0655
0a868                 | ' 	}
0a868                 | ' #line 3209 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a868                 | ' 	vol = 0;
0a868                 | ' 
0a868                 | ' 	return vol;
0a868     00 30 06 F6 | 	mov	result1, #0
0a86c                 | _ff_cc_get_ldnumber_0352_ret
0a86c     2D 00 64 FD | 	ret
0a870                 | 
0a870                 | _ff_cc_check_fs_0353
0a870     08 5A 05 F6 | 	mov	COUNT_, #8
0a874     B0 00 A0 FD | 	call	#pushregs_
0a878     3B 85 02 F6 | 	mov	local01, arg01
0a87c     3C 87 02 F6 | 	mov	local02, arg02
0a880     03 84 06 F1 | 	add	local01, #3
0a884     42 01 48 FC | 	wrbyte	#0, local01
0a888     29 84 06 F1 | 	add	local01, #41
0a88c     FF FF FF FF 
0a890     42 FF 6B FC | 	wrlong	##-1, local01
0a894     2C 84 86 F1 | 	sub	local01, #44
0a898     42 77 02 F6 | 	mov	arg01, local01
0a89c     43 79 02 F6 | 	mov	arg02, local02
0a8a0     54 E6 BF FD | 	call	#_ff_cc_move_window_0273
0a8a4     00 30 0E F2 | 	cmp	result1, #0 wz
0a8a8     04 30 06 56 |  if_ne	mov	result1, #4
0a8ac     D8 00 90 5D |  if_ne	jmp	#LR__0658
0a8b0     30 84 06 F1 | 	add	local01, #48
0a8b4     42 77 02 F6 | 	mov	arg01, local01
0a8b8     FE 77 06 F1 | 	add	arg01, #510
0a8bc     30 84 86 F1 | 	sub	local01, #48
0a8c0     18 E4 BF FD | 	call	#_ff_cc_ld_word_0253
0a8c4     18 89 02 F6 | 	mov	local03, result1
0a8c8     0F 88 46 F7 | 	zerox	local03, #15
0a8cc     55 00 00 FF 
0a8d0     55 88 0E F2 | 	cmp	local03, ##43605 wz
0a8d4     03 30 06 56 |  if_ne	mov	result1, #3
0a8d8     AC 00 90 5D |  if_ne	jmp	#LR__0658
0a8dc     30 84 06 F1 | 	add	local01, #48
0a8e0     42 8B C2 FA | 	rdbyte	local04, local01
0a8e4     30 84 86 F1 | 	sub	local01, #48
0a8e8     45 89 02 F6 | 	mov	local03, local04
0a8ec     07 88 46 F7 | 	zerox	local03, #7
0a8f0     E9 88 0E F2 | 	cmp	local03, #233 wz
0a8f4     38 00 90 AD |  if_e	jmp	#LR__0656
0a8f8     30 84 06 F1 | 	add	local01, #48
0a8fc     42 8D C2 FA | 	rdbyte	local05, local01
0a900     30 84 86 F1 | 	sub	local01, #48
0a904     46 8F 02 F6 | 	mov	local06, local05
0a908     07 8E 46 F7 | 	zerox	local06, #7
0a90c     EB 8E 0E F2 | 	cmp	local06, #235 wz
0a910     1C 00 90 AD |  if_e	jmp	#LR__0656
0a914     30 84 06 F1 | 	add	local01, #48
0a918     42 91 C2 FA | 	rdbyte	local07, local01
0a91c     30 84 86 F1 | 	sub	local01, #48
0a920     48 93 02 F6 | 	mov	local08, local07
0a924     07 92 46 F7 | 	zerox	local08, #7
0a928     E8 92 0E F2 | 	cmp	local08, #232 wz
0a92c     54 00 90 5D |  if_ne	jmp	#LR__0657
0a930                 | LR__0656
0a930     30 84 06 F1 | 	add	local01, #48
0a934     42 77 02 F6 | 	mov	arg01, local01
0a938     30 84 86 F1 | 	sub	local01, #48
0a93c     36 76 06 F1 | 	add	arg01, #54
0a940     7A 00 00 FF 
0a944     53 78 06 F6 | 	mov	arg02, ##@LR__0940
0a948     03 7A 06 F6 | 	mov	arg03, #3
0a94c     70 E4 BF FD | 	call	#_ff_cc_mem_cmp_0266
0a950     00 30 0E F2 | 	cmp	result1, #0 wz
0a954     00 30 06 A6 |  if_e	mov	result1, #0
0a958     2C 00 90 AD |  if_e	jmp	#LR__0658
0a95c     30 84 06 F1 | 	add	local01, #48
0a960     42 77 02 F6 | 	mov	arg01, local01
0a964     52 76 06 F1 | 	add	arg01, #82
0a968     7A 00 00 FF 
0a96c     57 78 06 F6 | 	mov	arg02, ##@LR__0941
0a970     05 7A 06 F6 | 	mov	arg03, #5
0a974     48 E4 BF FD | 	call	#_ff_cc_mem_cmp_0266
0a978     00 30 0E F2 | 	cmp	result1, #0 wz
0a97c     00 30 06 A6 |  if_e	mov	result1, #0
0a980     04 00 90 AD |  if_e	jmp	#LR__0658
0a984                 | LR__0657
0a984                 | ' 	}
0a984                 | ' 	return 2;
0a984     02 30 06 F6 | 	mov	result1, #2
0a988                 | LR__0658
0a988     AF F0 03 F6 | 	mov	ptra, fp
0a98c     BF 00 A0 FD | 	call	#popregs_
0a990                 | _ff_cc_check_fs_0353_ret
0a990     2D 00 64 FD | 	ret
0a994                 | 
0a994                 | _ff_cc_find_volume_0357
0a994     0D 5A 05 F6 | 	mov	COUNT_, #13
0a998     B0 00 A0 FD | 	call	#pushregs_
0a99c     24 F0 07 F1 | 	add	ptra, #36
0a9a0     3B 85 02 F6 | 	mov	local01, arg01
0a9a4     3C 87 02 F6 | 	mov	local02, arg02
0a9a8     42 89 02 F6 | 	mov	local03, local01
0a9ac     44 77 02 F6 | 	mov	arg01, local03
0a9b0     00 78 06 F6 | 	mov	arg02, #0
0a9b4     B8 FE BF FD | 	call	#_ff_cc_check_fs_0353
0a9b8     18 8B 02 F6 | 	mov	local04, result1
0a9bc     02 8A 0E F2 | 	cmp	local04, #2 wz
0a9c0     18 00 90 AD |  if_e	jmp	#LR__0660
0a9c4     03 8A 1E F2 | 	cmp	local04, #3 wcz
0a9c8     08 00 90 3D |  if_ae	jmp	#LR__0659
0a9cc     00 86 0E F2 | 	cmp	local02, #0 wz
0a9d0     08 00 90 5D |  if_ne	jmp	#LR__0660
0a9d4                 | LR__0659
0a9d4     45 31 02 F6 | 	mov	result1, local04
0a9d8     F8 00 90 FD | 	jmp	#LR__0667
0a9dc                 | LR__0660
0a9dc                 | ' 	for (i = 0; i < 4; i++) {
0a9dc     00 8C 06 F6 | 	mov	local05, #0
0a9e0                 | LR__0661
0a9e0     04 8C 1E F2 | 	cmp	local05, #4 wcz
0a9e4     50 00 90 3D |  if_ae	jmp	#LR__0662
0a9e8     46 89 02 F6 | 	mov	local03, local05
0a9ec     02 88 66 F0 | 	shl	local03, #2
0a9f0     14 5E 05 F1 | 	add	fp, #20
0a9f4     AF 88 02 F1 | 	add	local03, fp
0a9f8     30 84 06 F1 | 	add	local01, #48
0a9fc     42 8F 02 F6 | 	mov	local06, local01
0aa00     BE 8F 06 F1 | 	add	local06, #446
0aa04     46 91 02 F6 | 	mov	local07, local05
0aa08     04 90 66 F0 | 	shl	local07, #4
0aa0c     48 93 02 F6 | 	mov	local08, local07
0aa10     48 8F 02 F1 | 	add	local06, local07
0aa14     08 8E 06 F1 | 	add	local06, #8
0aa18     47 77 02 F6 | 	mov	arg01, local06
0aa1c     14 5E 85 F1 | 	sub	fp, #20
0aa20     30 84 86 F1 | 	sub	local01, #48
0aa24     D8 E2 BF FD | 	call	#_ff_cc_ld_dword_0255
0aa28     18 95 02 F6 | 	mov	local09, result1
0aa2c     44 95 62 FC | 	wrlong	local09, local03
0aa30     01 8C 06 F1 | 	add	local05, #1
0aa34     A8 FF 9F FD | 	jmp	#LR__0661
0aa38                 | LR__0662
0aa38     00 86 0E F2 | 	cmp	local02, #0 wz
0aa3c     43 89 02 56 |  if_ne	mov	local03, local02
0aa40     01 88 86 51 |  if_ne	sub	local03, #1
0aa44     00 88 06 A6 |  if_e	mov	local03, #0
0aa48     44 8D 02 F6 | 	mov	local05, local03
0aa4c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
0aa4c                 | ' 	}
0aa4c                 | ' 	i = part ? part - 1 : 0;
0aa4c                 | ' 	do {
0aa4c                 | LR__0663
0aa4c     46 97 02 F6 | 	mov	local10, local05
0aa50     02 96 66 F0 | 	shl	local10, #2
0aa54     14 5E 05 F1 | 	add	fp, #20
0aa58     AF 98 02 F6 | 	mov	local11, fp
0aa5c     AF 96 02 F1 | 	add	local10, fp
0aa60     4B 9B 0A FB | 	rdlong	local12, local10 wz
0aa64     14 5E 85 F1 | 	sub	fp, #20
0aa68     38 00 90 AD |  if_e	jmp	#LR__0664
0aa6c     42 91 02 F6 | 	mov	local07, local01
0aa70     46 93 02 F6 | 	mov	local08, local05
0aa74     02 92 66 F0 | 	shl	local08, #2
0aa78     14 5E 05 F1 | 	add	fp, #20
0aa7c     AF 8E 02 F6 | 	mov	local06, fp
0aa80     AF 92 02 F1 | 	add	local08, fp
0aa84     49 95 02 FB | 	rdlong	local09, local08
0aa88     48 77 02 F6 | 	mov	arg01, local07
0aa8c     4A 79 02 F6 | 	mov	arg02, local09
0aa90     14 5E 85 F1 | 	sub	fp, #20
0aa94     D8 FD BF FD | 	call	#_ff_cc_check_fs_0353
0aa98     18 9D 02 F6 | 	mov	local13, result1
0aa9c     4E 89 02 F6 | 	mov	local03, local13
0aaa0     04 00 90 FD | 	jmp	#LR__0665
0aaa4                 | LR__0664
0aaa4     03 88 06 F6 | 	mov	local03, #3
0aaa8                 | LR__0665
0aaa8     44 8B 02 F6 | 	mov	local04, local03
0aaac     00 86 0E F2 | 	cmp	local02, #0 wz
0aab0     1C 00 90 5D |  if_ne	jmp	#LR__0666
0aab4     02 8A 1E F2 | 	cmp	local04, #2 wcz
0aab8     14 00 90 CD |  if_b	jmp	#LR__0666
0aabc     46 89 02 F6 | 	mov	local03, local05
0aac0     01 88 06 F1 | 	add	local03, #1
0aac4     44 8D 02 F6 | 	mov	local05, local03
0aac8     04 8C 1E F2 | 	cmp	local05, #4 wcz
0aacc     7C FF 9F CD |  if_b	jmp	#LR__0663
0aad0                 | LR__0666
0aad0                 | ' 	return fmt;
0aad0     45 31 02 F6 | 	mov	result1, local04
0aad4                 | LR__0667
0aad4     AF F0 03 F6 | 	mov	ptra, fp
0aad8     BF 00 A0 FD | 	call	#popregs_
0aadc                 | _ff_cc_find_volume_0357_ret
0aadc     2D 00 64 FD | 	ret
0aae0                 | 
0aae0                 | _ff_cc_mount_volume_0369
0aae0     1B 5A 05 F6 | 	mov	COUNT_, #27
0aae4     B0 00 A0 FD | 	call	#pushregs_
0aae8     3B 85 02 F6 | 	mov	local01, arg01
0aaec     3C 87 02 F6 | 	mov	local02, arg02
0aaf0     3D 89 02 F6 | 	mov	local03, arg03
0aaf4     43 01 68 FC | 	wrlong	#0, local02
0aaf8     42 77 02 F6 | 	mov	arg01, local01
0aafc     C8 FC BF FD | 	call	#_ff_cc_get_ldnumber_0352
0ab00     18 8B 02 F6 | 	mov	local04, result1
0ab04     00 8A 5E F2 | 	cmps	local04, #0 wcz
0ab08     0B 30 06 C6 |  if_b	mov	result1, #11
0ab0c     04 06 90 CD |  if_b	jmp	#LR__0683
0ab10     45 8D 02 F6 | 	mov	local05, local04
0ab14     02 8C 66 F0 | 	shl	local05, #2
0ab18     0D 8D 02 F1 | 	add	local05, ptr__ff_cc_dat__
0ab1c     46 8F 0A FB | 	rdlong	local06, local05 wz
0ab20     0C 30 06 A6 |  if_e	mov	result1, #12
0ab24     EC 05 90 AD |  if_e	jmp	#LR__0683
0ab28     43 8F 62 FC | 	wrlong	local06, local02
0ab2c     07 88 46 F7 | 	zerox	local03, #7
0ab30     FE 88 06 F5 | 	and	local03, #254
0ab34     47 8D CA FA | 	rdbyte	local05, local06 wz
0ab38     4C 00 90 AD |  if_e	jmp	#LR__0670
0ab3c     01 8E 06 F1 | 	add	local06, #1
0ab40     47 77 CA FA | 	rdbyte	arg01, local06 wz
0ab44     01 8E 86 F1 | 	sub	local06, #1
0ab48     01 30 06 56 |  if_ne	mov	result1, #1
0ab4c                 | ' 
0ab4c                 | ' 	return Stat;
0ab4c     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
0ab50     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0ab54     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0ab58     18 8D 02 F6 | 	mov	local05, result1
0ab5c     07 8C 46 F7 | 	zerox	local05, #7
0ab60     01 8C CE F7 | 	test	local05, #1 wz
0ab64     20 00 90 5D |  if_ne	jmp	#LR__0669
0ab68     00 88 0E F2 | 	cmp	local03, #0 wz
0ab6c     10 00 90 AD |  if_e	jmp	#LR__0668
0ab70     07 30 46 F7 | 	zerox	result1, #7
0ab74     04 30 0E F5 | 	and	result1, #4 wz
0ab78                 | ' 				return FR_WRITE_PROTECTED;
0ab78     0A 30 06 56 |  if_ne	mov	result1, #10
0ab7c     94 05 90 5D |  if_ne	jmp	#LR__0683
0ab80                 | LR__0668
0ab80                 | ' 			}
0ab80                 | ' 			return FR_OK;
0ab80     00 30 06 F6 | 	mov	result1, #0
0ab84     8C 05 90 FD | 	jmp	#LR__0683
0ab88                 | LR__0669
0ab88                 | LR__0670
0ab88     47 01 48 FC | 	wrbyte	#0, local06
0ab8c     01 8E 06 F1 | 	add	local06, #1
0ab90     47 8B 42 FC | 	wrbyte	local04, local06
0ab94     47 77 C2 FA | 	rdbyte	arg01, local06
0ab98     01 8E 86 F1 | 	sub	local06, #1
0ab9c     10 D9 BF FD | 	call	#_ff_cc_disk_initialize
0aba0     18 91 02 F6 | 	mov	local07, result1
0aba4     48 8D 02 F6 | 	mov	local05, local07
0aba8     07 8C 46 F7 | 	zerox	local05, #7
0abac     01 8C CE F7 | 	test	local05, #1 wz
0abb0                 | ' 		return FR_NOT_READY;
0abb0     03 30 06 56 |  if_ne	mov	result1, #3
0abb4     5C 05 90 5D |  if_ne	jmp	#LR__0683
0abb8     00 88 0E F2 | 	cmp	local03, #0 wz
0abbc     14 00 90 AD |  if_e	jmp	#LR__0671
0abc0     48 8D 02 F6 | 	mov	local05, local07
0abc4     07 8C 46 F7 | 	zerox	local05, #7
0abc8     04 8C CE F7 | 	test	local05, #4 wz
0abcc                 | ' 		return FR_WRITE_PROTECTED;
0abcc     0A 30 06 56 |  if_ne	mov	result1, #10
0abd0     40 05 90 5D |  if_ne	jmp	#LR__0683
0abd4                 | LR__0671
0abd4     47 77 02 F6 | 	mov	arg01, local06
0abd8     00 78 06 F6 | 	mov	arg02, #0
0abdc     B4 FD BF FD | 	call	#_ff_cc_find_volume_0357
0abe0     18 93 02 F6 | 	mov	local08, result1
0abe4     04 92 0E F2 | 	cmp	local08, #4 wz
0abe8     01 30 06 A6 |  if_e	mov	result1, #1
0abec     24 05 90 AD |  if_e	jmp	#LR__0683
0abf0     02 92 1E F2 | 	cmp	local08, #2 wcz
0abf4     0D 30 06 36 |  if_ae	mov	result1, #13
0abf8     18 05 90 3D |  if_ae	jmp	#LR__0683
0abfc     2C 8E 06 F1 | 	add	local06, #44
0ac00     47 95 02 FB | 	rdlong	local09, local06
0ac04     04 8E 06 F1 | 	add	local06, #4
0ac08     47 77 02 F6 | 	mov	arg01, local06
0ac0c     30 8E 86 F1 | 	sub	local06, #48
0ac10     0B 76 06 F1 | 	add	arg01, #11
0ac14     C4 E0 BF FD | 	call	#_ff_cc_ld_word_0253
0ac18     18 8D 02 F6 | 	mov	local05, result1
0ac1c     0F 8C 46 F7 | 	zerox	local05, #15
0ac20     01 00 00 FF 
0ac24     00 8C 0E F2 | 	cmp	local05, ##512 wz
0ac28     0D 30 06 56 |  if_ne	mov	result1, #13
0ac2c     E4 04 90 5D |  if_ne	jmp	#LR__0683
0ac30     30 8E 06 F1 | 	add	local06, #48
0ac34     47 77 02 F6 | 	mov	arg01, local06
0ac38     30 8E 86 F1 | 	sub	local06, #48
0ac3c     16 76 06 F1 | 	add	arg01, #22
0ac40     98 E0 BF FD | 	call	#_ff_cc_ld_word_0253
0ac44     18 97 02 F6 | 	mov	local10, result1
0ac48     0F 96 4E F7 | 	zerox	local10, #15 wz
0ac4c     18 00 90 5D |  if_ne	jmp	#LR__0672
0ac50     30 8E 06 F1 | 	add	local06, #48
0ac54     47 77 02 F6 | 	mov	arg01, local06
0ac58     30 8E 86 F1 | 	sub	local06, #48
0ac5c     24 76 06 F1 | 	add	arg01, #36
0ac60     9C E0 BF FD | 	call	#_ff_cc_ld_dword_0255
0ac64     18 97 02 F6 | 	mov	local10, result1
0ac68                 | LR__0672
0ac68     18 8E 06 F1 | 	add	local06, #24
0ac6c     47 97 62 FC | 	wrlong	local10, local06
0ac70     28 8E 06 F1 | 	add	local06, #40
0ac74     47 8D C2 FA | 	rdbyte	local05, local06
0ac78     3E 8E 86 F1 | 	sub	local06, #62
0ac7c     47 8D 42 FC | 	wrbyte	local05, local06
0ac80     47 8D C2 FA | 	rdbyte	local05, local06
0ac84     02 8E 86 F1 | 	sub	local06, #2
0ac88     07 8C 46 F7 | 	zerox	local05, #7
0ac8c     01 8C 0E F2 | 	cmp	local05, #1 wz
0ac90     1C 00 90 AD |  if_e	jmp	#LR__0673
0ac94     02 8E 06 F1 | 	add	local06, #2
0ac98     47 99 C2 FA | 	rdbyte	local11, local06
0ac9c     02 8E 86 F1 | 	sub	local06, #2
0aca0     07 98 46 F7 | 	zerox	local11, #7
0aca4     02 98 0E F2 | 	cmp	local11, #2 wz
0aca8     0D 30 06 56 |  if_ne	mov	result1, #13
0acac     64 04 90 5D |  if_ne	jmp	#LR__0683
0acb0                 | LR__0673
0acb0     02 8E 06 F1 | 	add	local06, #2
0acb4     47 8D C2 FA | 	rdbyte	local05, local06
0acb8     46 97 02 FD | 	qmul	local10, local05
0acbc     18 96 62 FD | 	getqx	local10
0acc0     3B 8E 06 F1 | 	add	local06, #59
0acc4     47 8D C2 FA | 	rdbyte	local05, local06
0acc8     33 8E 86 F1 | 	sub	local06, #51
0accc     47 8D 52 FC | 	wrword	local05, local06
0acd0     47 8D E2 FA | 	rdword	local05, local06
0acd4     0A 8E 86 F1 | 	sub	local06, #10
0acd8     0F 8C 4E F7 | 	zerox	local05, #15 wz
0acdc     20 00 90 AD |  if_e	jmp	#LR__0674
0ace0     0A 8E 06 F1 | 	add	local06, #10
0ace4     47 99 E2 FA | 	rdword	local11, local06
0ace8     47 9B E2 FA | 	rdword	local12, local06
0acec     0A 8E 86 F1 | 	sub	local06, #10
0acf0     0F 9A 46 F7 | 	zerox	local12, #15
0acf4     01 9A 86 F1 | 	sub	local12, #1
0acf8     4D 99 CA F7 | 	test	local11, local12 wz
0acfc     08 00 90 AD |  if_e	jmp	#LR__0675
0ad00                 | LR__0674
0ad00     0D 30 06 F6 | 	mov	result1, #13
0ad04     0C 04 90 FD | 	jmp	#LR__0683
0ad08                 | LR__0675
0ad08     30 8E 06 F1 | 	add	local06, #48
0ad0c     47 77 02 F6 | 	mov	arg01, local06
0ad10     30 8E 86 F1 | 	sub	local06, #48
0ad14     11 76 06 F1 | 	add	arg01, #17
0ad18     C0 DF BF FD | 	call	#_ff_cc_ld_word_0253
0ad1c     08 8E 06 F1 | 	add	local06, #8
0ad20     47 31 52 FC | 	wrword	result1, local06
0ad24     47 8D E2 FA | 	rdword	local05, local06
0ad28     08 8E 86 F1 | 	sub	local06, #8
0ad2c     0F 8C 46 F7 | 	zerox	local05, #15
0ad30     46 99 52 F6 | 	abs	local11, local05 wc
0ad34     0F 98 06 F5 | 	and	local11, #15
0ad38     4C 99 62 C6 |  if_b	neg	local11, local11
0ad3c     00 98 0E F2 | 	cmp	local11, #0 wz
0ad40     0D 30 06 56 |  if_ne	mov	result1, #13
0ad44     CC 03 90 5D |  if_ne	jmp	#LR__0683
0ad48     30 8E 06 F1 | 	add	local06, #48
0ad4c     47 77 02 F6 | 	mov	arg01, local06
0ad50     30 8E 86 F1 | 	sub	local06, #48
0ad54     13 76 06 F1 | 	add	arg01, #19
0ad58     80 DF BF FD | 	call	#_ff_cc_ld_word_0253
0ad5c     18 9D 02 F6 | 	mov	local13, result1
0ad60     0F 9C 4E F7 | 	zerox	local13, #15 wz
0ad64     18 00 90 5D |  if_ne	jmp	#LR__0676
0ad68     30 8E 06 F1 | 	add	local06, #48
0ad6c     47 77 02 F6 | 	mov	arg01, local06
0ad70     30 8E 86 F1 | 	sub	local06, #48
0ad74     20 76 06 F1 | 	add	arg01, #32
0ad78     84 DF BF FD | 	call	#_ff_cc_ld_dword_0255
0ad7c     18 9D 02 F6 | 	mov	local13, result1
0ad80                 | LR__0676
0ad80     30 8E 06 F1 | 	add	local06, #48
0ad84     47 77 02 F6 | 	mov	arg01, local06
0ad88     30 8E 86 F1 | 	sub	local06, #48
0ad8c     0E 76 06 F1 | 	add	arg01, #14
0ad90     48 DF BF FD | 	call	#_ff_cc_ld_word_0253
0ad94     18 9F 02 F6 | 	mov	local14, result1
0ad98     4F 8D 02 F6 | 	mov	local05, local14
0ad9c     0F 8C 4E F7 | 	zerox	local05, #15 wz
0ada0     0D 30 06 A6 |  if_e	mov	result1, #13
0ada4     6C 03 90 AD |  if_e	jmp	#LR__0683
0ada8     4F A1 02 F6 | 	mov	local15, local14
0adac     0F A0 46 F7 | 	zerox	local15, #15
0adb0     4B A1 02 F1 | 	add	local15, local10
0adb4     08 8E 06 F1 | 	add	local06, #8
0adb8     47 A3 E2 FA | 	rdword	local16, local06
0adbc     08 8E 86 F1 | 	sub	local06, #8
0adc0     0F A2 46 F7 | 	zerox	local16, #15
0adc4     51 A5 52 F6 | 	abs	local17, local16 wc
0adc8     04 A4 46 F0 | 	shr	local17, #4
0adcc     52 A5 62 C6 |  if_b	neg	local17, local17
0add0     52 A1 02 F1 | 	add	local15, local17
0add4     50 9D 1A F2 | 	cmp	local13, local15 wcz
0add8     0D 30 06 C6 |  if_b	mov	result1, #13
0addc     34 03 90 CD |  if_b	jmp	#LR__0683
0ade0     4E D9 02 F6 | 	mov	muldiva_, local13
0ade4     50 D9 82 F1 | 	sub	muldiva_, local15
0ade8     0A 8E 06 F1 | 	add	local06, #10
0adec     47 DB E2 FA | 	rdword	muldivb_, local06
0adf0     0A 8E 86 F1 | 	sub	local06, #10
0adf4     0F DA 46 F7 | 	zerox	muldivb_, #15
0adf8     CC 00 A0 FD | 	call	#unsdivide_
0adfc     6D A7 0A F6 | 	mov	local18, muldivb_ wz
0ae00     0D 30 06 A6 |  if_e	mov	result1, #13
0ae04     0C 03 90 AD |  if_e	jmp	#LR__0683
0ae08     00 92 06 F6 | 	mov	local08, #0
0ae0c     FF FF 07 FF 
0ae10     F5 A7 1E F2 | 	cmp	local18, ##268435445 wcz
0ae14     03 92 06 E6 |  if_be	mov	local08, #3
0ae18     7F 00 00 FF 
0ae1c     F5 A7 1E F2 | 	cmp	local18, ##65525 wcz
0ae20     02 92 06 E6 |  if_be	mov	local08, #2
0ae24     07 00 00 FF 
0ae28     F5 A7 1E F2 | 	cmp	local18, ##4085 wcz
0ae2c     01 92 06 E6 |  if_be	mov	local08, #1
0ae30     00 92 0E F2 | 	cmp	local08, #0 wz
0ae34     0D 30 06 A6 |  if_e	mov	result1, #13
0ae38     D8 02 90 AD |  if_e	jmp	#LR__0683
0ae3c     53 8D 02 F6 | 	mov	local05, local18
0ae40     02 8C 06 F1 | 	add	local05, #2
0ae44     14 8E 06 F1 | 	add	local06, #20
0ae48     47 8D 62 FC | 	wrlong	local05, local06
0ae4c     08 8E 06 F1 | 	add	local06, #8
0ae50     47 95 62 FC | 	wrlong	local09, local06
0ae54     4A 8D 02 F6 | 	mov	local05, local09
0ae58     4F A3 02 F6 | 	mov	local16, local14
0ae5c     0F A2 46 F7 | 	zerox	local16, #15
0ae60     51 8D 02 F1 | 	add	local05, local16
0ae64     04 8E 06 F1 | 	add	local06, #4
0ae68     47 8D 62 FC | 	wrlong	local05, local06
0ae6c     4A 8D 02 F6 | 	mov	local05, local09
0ae70     50 8D 02 F1 | 	add	local05, local15
0ae74     08 8E 06 F1 | 	add	local06, #8
0ae78     47 8D 62 FC | 	wrlong	local05, local06
0ae7c     28 8E 86 F1 | 	sub	local06, #40
0ae80     03 92 0E F2 | 	cmp	local08, #3 wz
0ae84     6C 00 90 5D |  if_ne	jmp	#LR__0677
0ae88     30 8E 06 F1 | 	add	local06, #48
0ae8c     47 77 02 F6 | 	mov	arg01, local06
0ae90     30 8E 86 F1 | 	sub	local06, #48
0ae94     2A 76 06 F1 | 	add	arg01, #42
0ae98     40 DE BF FD | 	call	#_ff_cc_ld_word_0253
0ae9c     18 8D 02 F6 | 	mov	local05, result1
0aea0     0F 8C 4E F7 | 	zerox	local05, #15 wz
0aea4     0D 30 06 56 |  if_ne	mov	result1, #13
0aea8     68 02 90 5D |  if_ne	jmp	#LR__0683
0aeac     08 8E 06 F1 | 	add	local06, #8
0aeb0     47 8D E2 FA | 	rdword	local05, local06
0aeb4     08 8E 86 F1 | 	sub	local06, #8
0aeb8     0F 8C 4E F7 | 	zerox	local05, #15 wz
0aebc     0D 30 06 56 |  if_ne	mov	result1, #13
0aec0     50 02 90 5D |  if_ne	jmp	#LR__0683
0aec4     30 8E 06 F1 | 	add	local06, #48
0aec8     47 77 02 F6 | 	mov	arg01, local06
0aecc     30 8E 86 F1 | 	sub	local06, #48
0aed0     2C 76 06 F1 | 	add	arg01, #44
0aed4     28 DE BF FD | 	call	#_ff_cc_ld_dword_0255
0aed8     24 8E 06 F1 | 	add	local06, #36
0aedc     47 31 62 FC | 	wrlong	result1, local06
0aee0     10 8E 86 F1 | 	sub	local06, #16
0aee4     47 A9 02 FB | 	rdlong	local19, local06
0aee8     14 8E 86 F1 | 	sub	local06, #20
0aeec     02 A8 66 F0 | 	shl	local19, #2
0aef0     74 00 90 FD | 	jmp	#LR__0680
0aef4                 | LR__0677
0aef4     08 8E 06 F1 | 	add	local06, #8
0aef8     47 8D E2 FA | 	rdword	local05, local06
0aefc     08 8E 86 F1 | 	sub	local06, #8
0af00     0F 8C 4E F7 | 	zerox	local05, #15 wz
0af04     0D 30 06 A6 |  if_e	mov	result1, #13
0af08     08 02 90 AD |  if_e	jmp	#LR__0683
0af0c     20 8E 06 F1 | 	add	local06, #32
0af10     47 8D 02 FB | 	rdlong	local05, local06
0af14     4B 8D 02 F1 | 	add	local05, local10
0af18     04 8E 06 F1 | 	add	local06, #4
0af1c     47 8D 62 FC | 	wrlong	local05, local06
0af20     24 8E 86 F1 | 	sub	local06, #36
0af24     02 92 0E F2 | 	cmp	local08, #2 wz
0af28     14 00 90 5D |  if_ne	jmp	#LR__0678
0af2c     14 8E 06 F1 | 	add	local06, #20
0af30     47 8D 02 FB | 	rdlong	local05, local06
0af34     14 8E 86 F1 | 	sub	local06, #20
0af38     01 8C 66 F0 | 	shl	local05, #1
0af3c     24 00 90 FD | 	jmp	#LR__0679
0af40                 | LR__0678
0af40     14 8E 06 F1 | 	add	local06, #20
0af44     47 AB 02 FB | 	rdlong	local20, local06
0af48     55 8D 02 F6 | 	mov	local05, local20
0af4c     01 8C 66 F0 | 	shl	local05, #1
0af50     55 8D 02 F1 | 	add	local05, local20
0af54     01 8C 46 F0 | 	shr	local05, #1
0af58     14 8E 86 F1 | 	sub	local06, #20
0af5c     01 AA CE F7 | 	test	local20, #1 wz
0af60     01 8C 06 51 |  if_ne	add	local05, #1
0af64                 | LR__0679
0af64     46 A9 02 F6 | 	mov	local19, local05
0af68                 | LR__0680
0af68     54 A3 02 F6 | 	mov	local16, local19
0af6c     FF A3 06 F1 | 	add	local16, #511
0af70     09 A2 46 F0 | 	shr	local16, #9
0af74     18 8E 06 F1 | 	add	local06, #24
0af78     47 99 02 FB | 	rdlong	local11, local06
0af7c     18 8E 86 F1 | 	sub	local06, #24
0af80     51 99 1A F2 | 	cmp	local11, local16 wcz
0af84     0D 30 06 C6 |  if_b	mov	result1, #13
0af88     88 01 90 CD |  if_b	jmp	#LR__0683
0af8c     10 8E 06 F1 | 	add	local06, #16
0af90     FF FF FF FF 
0af94     47 FF 6B FC | 	wrlong	##-1, local06
0af98     04 8E 86 F1 | 	sub	local06, #4
0af9c     FF FF FF FF 
0afa0     47 FF 6B FC | 	wrlong	##-1, local06
0afa4     08 8E 86 F1 | 	sub	local06, #8
0afa8     47 01 49 FC | 	wrbyte	#128, local06
0afac     04 8E 86 F1 | 	sub	local06, #4
0afb0     03 92 0E F2 | 	cmp	local08, #3 wz
0afb4     34 01 90 5D |  if_ne	jmp	#LR__0682
0afb8     30 8E 06 F1 | 	add	local06, #48
0afbc     47 77 02 F6 | 	mov	arg01, local06
0afc0     30 8E 86 F1 | 	sub	local06, #48
0afc4     30 76 06 F1 | 	add	arg01, #48
0afc8     10 DD BF FD | 	call	#_ff_cc_ld_word_0253
0afcc     18 8D 02 F6 | 	mov	local05, result1
0afd0     0F 8C 46 F7 | 	zerox	local05, #15
0afd4     01 8C 0E F2 | 	cmp	local05, #1 wz
0afd8     10 01 90 5D |  if_ne	jmp	#LR__0682
0afdc     47 AD 02 F6 | 	mov	local21, local06
0afe0     4A AF 02 F6 | 	mov	local22, local09
0afe4     01 AE 06 F1 | 	add	local22, #1
0afe8     57 B1 02 F6 | 	mov	local23, local22
0afec     56 77 02 F6 | 	mov	arg01, local21
0aff0     58 79 02 F6 | 	mov	arg02, local23
0aff4     00 DF BF FD | 	call	#_ff_cc_move_window_0273
0aff8     18 B3 0A F6 | 	mov	local24, result1 wz
0affc     EC 00 90 5D |  if_ne	jmp	#LR__0682
0b000     04 8E 06 F1 | 	add	local06, #4
0b004     47 01 48 FC | 	wrbyte	#0, local06
0b008     2C 8E 06 F1 | 	add	local06, #44
0b00c     47 99 02 F6 | 	mov	local11, local06
0b010     4C A3 02 F6 | 	mov	local16, local11
0b014     FE A3 06 F1 | 	add	local16, #510
0b018     51 A5 02 F6 | 	mov	local17, local16
0b01c     52 77 02 F6 | 	mov	arg01, local17
0b020     30 8E 86 F1 | 	sub	local06, #48
0b024     B4 DC BF FD | 	call	#_ff_cc_ld_word_0253
0b028     18 9B 02 F6 | 	mov	local12, result1
0b02c     4D 8D 02 F6 | 	mov	local05, local12
0b030     0F 8C 46 F7 | 	zerox	local05, #15
0b034     55 00 00 FF 
0b038     55 8C 0E F2 | 	cmp	local05, ##43605 wz
0b03c     AC 00 90 5D |  if_ne	jmp	#LR__0681
0b040     30 8E 06 F1 | 	add	local06, #48
0b044     47 AF 02 F6 | 	mov	local22, local06
0b048     57 AD 02 F6 | 	mov	local21, local22
0b04c     56 B1 02 F6 | 	mov	local23, local21
0b050     58 77 02 F6 | 	mov	arg01, local23
0b054     30 8E 86 F1 | 	sub	local06, #48
0b058     A4 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b05c     18 B3 02 F6 | 	mov	local24, result1
0b060     A9 B0 20 FF 
0b064     52 B2 0E F2 | 	cmp	local24, ##1096897106 wz
0b068     80 00 90 5D |  if_ne	jmp	#LR__0681
0b06c     30 8E 06 F1 | 	add	local06, #48
0b070     47 B5 02 F6 | 	mov	local25, local06
0b074     5A AB 02 F6 | 	mov	local20, local25
0b078     E4 AB 06 F1 | 	add	local20, #484
0b07c     55 B7 02 F6 | 	mov	local26, local20
0b080     5B 77 02 F6 | 	mov	arg01, local26
0b084     30 8E 86 F1 | 	sub	local06, #48
0b088     74 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b08c     18 B9 02 F6 | 	mov	local27, result1
0b090     B9 A0 30 FF 
0b094     72 B8 0E F2 | 	cmp	local27, ##1631679090 wz
0b098     50 00 90 5D |  if_ne	jmp	#LR__0681
0b09c     30 8E 06 F1 | 	add	local06, #48
0b0a0     47 77 02 F6 | 	mov	arg01, local06
0b0a4     30 8E 86 F1 | 	sub	local06, #48
0b0a8     E8 77 06 F1 | 	add	arg01, #488
0b0ac     50 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b0b0     18 A5 02 F6 | 	mov	local17, result1
0b0b4     10 8E 06 F1 | 	add	local06, #16
0b0b8     47 A5 62 FC | 	wrlong	local17, local06
0b0bc     20 8E 06 F1 | 	add	local06, #32
0b0c0     47 A3 02 F6 | 	mov	local16, local06
0b0c4     51 8D 02 F6 | 	mov	local05, local16
0b0c8     EC 8D 06 F1 | 	add	local05, #492
0b0cc     46 99 02 F6 | 	mov	local11, local05
0b0d0     4C 77 02 F6 | 	mov	arg01, local11
0b0d4     30 8E 86 F1 | 	sub	local06, #48
0b0d8     24 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b0dc     18 A5 02 F6 | 	mov	local17, result1
0b0e0     0C 8E 06 F1 | 	add	local06, #12
0b0e4     47 A5 62 FC | 	wrlong	local17, local06
0b0e8     0C 8E 86 F1 | 	sub	local06, #12
0b0ec                 | LR__0681
0b0ec                 | LR__0682
0b0ec     47 93 42 FC | 	wrbyte	local08, local06
0b0f0     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
0b0f4     0D 8D E2 FA | 	rdword	local05, ptr__ff_cc_dat__
0b0f8     01 8C 06 F1 | 	add	local05, #1
0b0fc     0D 8D 52 FC | 	wrword	local05, ptr__ff_cc_dat__
0b100     0D 99 E2 FA | 	rdword	local11, ptr__ff_cc_dat__
0b104     04 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0b108     06 8E 06 F1 | 	add	local06, #6
0b10c     47 99 52 FC | 	wrword	local11, local06
0b110                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
0b110                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
0b110                 | ' 			{
0b110                 | ' 
0b110                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
0b110                 | ' 
0b110                 | ' 
0b110                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
0b110                 | ' 
0b110                 | ' 			}
0b110                 | ' 		}
0b110                 | ' 
0b110                 | ' 
0b110                 | ' 	}
0b110                 | ' 
0b110                 | ' 	fs->fs_type = (BYTE)fmt;
0b110                 | ' 	fs->id = ++Fsid;
0b110                 | ' #line 3589 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b110                 | ' 	return FR_OK;
0b110     00 30 06 F6 | 	mov	result1, #0
0b114                 | LR__0683
0b114     AF F0 03 F6 | 	mov	ptra, fp
0b118     BF 00 A0 FD | 	call	#popregs_
0b11c                 | _ff_cc_mount_volume_0369_ret
0b11c     2D 00 64 FD | 	ret
0b120                 | 
0b120                 | _ff_cc_validate_0371
0b120     0B 5A 05 F6 | 	mov	COUNT_, #11
0b124     B0 00 A0 FD | 	call	#pushregs_
0b128     3B 85 0A F6 | 	mov	local01, arg01 wz
0b12c     3C 87 02 F6 | 	mov	local02, arg02
0b130     09 88 06 F6 | 	mov	local03, #9
0b134     80 00 90 AD |  if_e	jmp	#LR__0684
0b138     42 8B 0A FB | 	rdlong	local04, local01 wz
0b13c     78 00 90 AD |  if_e	jmp	#LR__0684
0b140     42 8D 02 FB | 	rdlong	local05, local01
0b144     46 8F CA FA | 	rdbyte	local06, local05 wz
0b148     6C 00 90 AD |  if_e	jmp	#LR__0684
0b14c     04 84 06 F1 | 	add	local01, #4
0b150     42 91 E2 FA | 	rdword	local07, local01
0b154     04 84 86 F1 | 	sub	local01, #4
0b158     0F 90 46 F7 | 	zerox	local07, #15
0b15c     42 93 02 FB | 	rdlong	local08, local01
0b160     06 92 06 F1 | 	add	local08, #6
0b164     49 95 E2 FA | 	rdword	local09, local08
0b168     06 92 86 F1 | 	sub	local08, #6
0b16c     4A 97 02 F6 | 	mov	local10, local09
0b170     0F 96 46 F7 | 	zerox	local10, #15
0b174     4B 91 0A F2 | 	cmp	local07, local10 wz
0b178     3C 00 90 5D |  if_ne	jmp	#LR__0684
0b17c     42 8D 02 FB | 	rdlong	local05, local01
0b180     01 8C 06 F1 | 	add	local05, #1
0b184     46 91 C2 FA | 	rdbyte	local07, local05
0b188     01 8C 86 F1 | 	sub	local05, #1
0b18c     48 8F 02 F6 | 	mov	local06, local07
0b190     47 77 0A F6 | 	mov	arg01, local06 wz
0b194     01 30 06 56 |  if_ne	mov	result1, #1
0b198                 | ' 
0b198                 | ' 	return Stat;
0b198     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
0b19c     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0b1a0     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0b1a4     18 99 02 F6 | 	mov	local11, result1
0b1a8     4C 8B 02 F6 | 	mov	local04, local11
0b1ac     07 8A 46 F7 | 	zerox	local04, #7
0b1b0     01 8A 0E F5 | 	and	local04, #1 wz
0b1b4     00 88 06 A6 |  if_e	mov	local03, #0
0b1b8                 | LR__0684
0b1b8     00 88 0E F2 | 	cmp	local03, #0 wz
0b1bc     42 8B 02 AB |  if_e	rdlong	local04, local01
0b1c0     00 8A 06 56 |  if_ne	mov	local04, #0
0b1c4     43 8B 62 FC | 	wrlong	local04, local02
0b1c8                 | ' 			res = FR_OK;
0b1c8                 | ' 		}
0b1c8                 | ' 
0b1c8                 | ' 	}
0b1c8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
0b1c8                 | ' 	return res;
0b1c8     44 31 02 F6 | 	mov	result1, local03
0b1cc     AF F0 03 F6 | 	mov	ptra, fp
0b1d0     BF 00 A0 FD | 	call	#popregs_
0b1d4                 | _ff_cc_validate_0371_ret
0b1d4     2D 00 64 FD | 	ret
0b1d8                 | 
0b1d8                 | _ff_cc_f_mount
0b1d8     02 5A 05 F6 | 	mov	COUNT_, #2
0b1dc     B0 00 A0 FD | 	call	#pushregs_
0b1e0     20 F0 07 F1 | 	add	ptra, #32
0b1e4     04 5E 05 F1 | 	add	fp, #4
0b1e8     AF 76 62 FC | 	wrlong	arg01, fp
0b1ec     04 5E 05 F1 | 	add	fp, #4
0b1f0     AF 78 62 FC | 	wrlong	arg02, fp
0b1f4     04 5E 05 F1 | 	add	fp, #4
0b1f8     AF 7A 42 FC | 	wrbyte	arg03, fp
0b1fc     04 5E 85 F1 | 	sub	fp, #4
0b200     AF 84 02 FB | 	rdlong	local01, fp
0b204     14 5E 05 F1 | 	add	fp, #20
0b208     AF 84 62 FC | 	wrlong	local01, fp
0b20c     AF 76 02 F6 | 	mov	arg01, fp
0b210     1C 5E 85 F1 | 	sub	fp, #28
0b214     B0 F5 BF FD | 	call	#_ff_cc_get_ldnumber_0352
0b218     14 5E 05 F1 | 	add	fp, #20
0b21c     AF 30 62 FC | 	wrlong	result1, fp
0b220     18 85 02 F6 | 	mov	local01, result1
0b224     14 5E 85 F1 | 	sub	fp, #20
0b228     00 84 5E F2 | 	cmps	local01, #0 wcz
0b22c     0B 30 06 C6 |  if_b	mov	result1, #11
0b230     B4 00 90 CD |  if_b	jmp	#LR__0687
0b234     14 5E 05 F1 | 	add	fp, #20
0b238     AF 84 02 FB | 	rdlong	local01, fp
0b23c     02 84 66 F0 | 	shl	local01, #2
0b240     0D 85 02 F1 | 	add	local01, ptr__ff_cc_dat__
0b244     42 87 02 FB | 	rdlong	local02, local01
0b248     04 5E 85 F1 | 	sub	fp, #4
0b24c     AF 86 62 FC | 	wrlong	local02, fp
0b250     AF 84 0A FB | 	rdlong	local01, fp wz
0b254     10 5E 85 F1 | 	sub	fp, #16
0b258     10 00 90 AD |  if_e	jmp	#LR__0685
0b25c     10 5E 05 F1 | 	add	fp, #16
0b260     AF 84 02 FB | 	rdlong	local01, fp
0b264     10 5E 85 F1 | 	sub	fp, #16
0b268     42 01 48 FC | 	wrbyte	#0, local01
0b26c                 | LR__0685
0b26c     04 5E 05 F1 | 	add	fp, #4
0b270     AF 84 0A FB | 	rdlong	local01, fp wz
0b274     04 5E 85 F1 | 	sub	fp, #4
0b278     10 00 90 AD |  if_e	jmp	#LR__0686
0b27c     04 5E 05 F1 | 	add	fp, #4
0b280     AF 84 02 FB | 	rdlong	local01, fp
0b284     04 5E 85 F1 | 	sub	fp, #4
0b288     42 01 48 FC | 	wrbyte	#0, local01
0b28c                 | LR__0686
0b28c     14 5E 05 F1 | 	add	fp, #20
0b290     AF 84 02 FB | 	rdlong	local01, fp
0b294     02 84 66 F0 | 	shl	local01, #2
0b298     0D 85 02 F1 | 	add	local01, ptr__ff_cc_dat__
0b29c     10 5E 85 F1 | 	sub	fp, #16
0b2a0     AF 86 02 FB | 	rdlong	local02, fp
0b2a4     42 87 62 FC | 	wrlong	local02, local01
0b2a8     08 5E 05 F1 | 	add	fp, #8
0b2ac     AF 84 C2 FA | 	rdbyte	local01, fp
0b2b0     0C 5E 85 F1 | 	sub	fp, #12
0b2b4     07 84 4E F7 | 	zerox	local01, #7 wz
0b2b8     00 30 06 A6 |  if_e	mov	result1, #0
0b2bc     28 00 90 AD |  if_e	jmp	#LR__0687
0b2c0     08 5E 05 F1 | 	add	fp, #8
0b2c4     AF 76 02 F6 | 	mov	arg01, fp
0b2c8     04 5E 85 F1 | 	sub	fp, #4
0b2cc     AF 78 02 F6 | 	mov	arg02, fp
0b2d0     04 5E 85 F1 | 	sub	fp, #4
0b2d4     00 7A 06 F6 | 	mov	arg03, #0
0b2d8     04 F8 BF FD | 	call	#_ff_cc_mount_volume_0369
0b2dc     18 5E 05 F1 | 	add	fp, #24
0b2e0     AF 30 62 FC | 	wrlong	result1, fp
0b2e4                 | ' 
0b2e4                 | ' 	res = mount_volume(&path, &fs, 0);
0b2e4                 | ' 	return res ;
0b2e4     18 5E 85 F1 | 	sub	fp, #24
0b2e8                 | LR__0687
0b2e8     AF F0 03 F6 | 	mov	ptra, fp
0b2ec     BF 00 A0 FD | 	call	#popregs_
0b2f0                 | _ff_cc_f_mount_ret
0b2f0     2D 00 64 FD | 	ret
0b2f4                 | 
0b2f4                 | _ff_cc_f_open
0b2f4     10 5A 05 F6 | 	mov	COUNT_, #16
0b2f8     B0 00 A0 FD | 	call	#pushregs_
0b2fc     58 F0 07 F1 | 	add	ptra, #88
0b300     04 5E 05 F1 | 	add	fp, #4
0b304     AF 76 62 FC | 	wrlong	arg01, fp
0b308     04 5E 05 F1 | 	add	fp, #4
0b30c     AF 78 62 FC | 	wrlong	arg02, fp
0b310     04 5E 05 F1 | 	add	fp, #4
0b314     AF 7A 42 FC | 	wrbyte	arg03, fp
0b318     08 5E 85 F1 | 	sub	fp, #8
0b31c     AF 84 0A FB | 	rdlong	local01, fp wz
0b320     04 5E 85 F1 | 	sub	fp, #4
0b324     09 30 06 A6 |  if_e	mov	result1, #9
0b328     FC 06 90 AD |  if_e	jmp	#LR__0711
0b32c     0C 5E 05 F1 | 	add	fp, #12
0b330     AF 84 C2 FA | 	rdbyte	local01, fp
0b334     3F 84 06 F5 | 	and	local01, #63
0b338     AF 84 42 FC | 	wrbyte	local01, fp
0b33c     04 5E 85 F1 | 	sub	fp, #4
0b340     AF 76 02 F6 | 	mov	arg01, fp
0b344     38 5E 05 F1 | 	add	fp, #56
0b348     AF 78 02 F6 | 	mov	arg02, fp
0b34c     34 5E 85 F1 | 	sub	fp, #52
0b350     AF 86 C2 FA | 	rdbyte	local02, fp
0b354     0C 5E 85 F1 | 	sub	fp, #12
0b358     43 7B 02 F6 | 	mov	arg03, local02
0b35c     80 F7 BF FD | 	call	#_ff_cc_mount_volume_0369
0b360     18 89 02 F6 | 	mov	local03, result1
0b364     10 5E 05 F1 | 	add	fp, #16
0b368     AF 88 62 FC | 	wrlong	local03, fp
0b36c     AF 84 0A FB | 	rdlong	local01, fp wz
0b370     10 5E 85 F1 | 	sub	fp, #16
0b374     84 06 90 5D |  if_ne	jmp	#LR__0709
0b378     40 5E 05 F1 | 	add	fp, #64
0b37c     AF 84 02 FB | 	rdlong	local01, fp
0b380     2C 5E 85 F1 | 	sub	fp, #44
0b384     AF 84 62 FC | 	wrlong	local01, fp
0b388     AF 76 02 F6 | 	mov	arg01, fp
0b38c     0C 5E 85 F1 | 	sub	fp, #12
0b390     AF 8A 02 FB | 	rdlong	local04, fp
0b394     08 5E 85 F1 | 	sub	fp, #8
0b398     45 8D 02 F6 | 	mov	local05, local04
0b39c     46 79 02 F6 | 	mov	arg02, local05
0b3a0     00 F2 BF FD | 	call	#_ff_cc_follow_path_0346
0b3a4     18 8F 02 F6 | 	mov	local06, result1
0b3a8     10 5E 05 F1 | 	add	fp, #16
0b3ac     AF 8E 62 FC | 	wrlong	local06, fp
0b3b0     AF 84 0A FB | 	rdlong	local01, fp wz
0b3b4     10 5E 85 F1 | 	sub	fp, #16
0b3b8     20 00 90 5D |  if_ne	jmp	#LR__0688
0b3bc     3F 5E 05 F1 | 	add	fp, #63
0b3c0     AF 84 C2 FA | 	rdbyte	local01, fp
0b3c4     3F 5E 85 F1 | 	sub	fp, #63
0b3c8     07 84 46 F7 | 	zerox	local01, #7
0b3cc     80 84 CE F7 | 	test	local01, #128 wz
0b3d0     10 5E 05 51 |  if_ne	add	fp, #16
0b3d4     AF 0C 68 5C |  if_ne	wrlong	#6, fp
0b3d8     10 5E 85 51 |  if_ne	sub	fp, #16
0b3dc                 | LR__0688
0b3dc     0C 5E 05 F1 | 	add	fp, #12
0b3e0     AF 84 C2 FA | 	rdbyte	local01, fp
0b3e4     0C 5E 85 F1 | 	sub	fp, #12
0b3e8     07 84 46 F7 | 	zerox	local01, #7
0b3ec     1C 84 CE F7 | 	test	local01, #28 wz
0b3f0     04 02 90 AD |  if_e	jmp	#LR__0694
0b3f4     10 5E 05 F1 | 	add	fp, #16
0b3f8     AF 84 0A FB | 	rdlong	local01, fp wz
0b3fc     10 5E 85 F1 | 	sub	fp, #16
0b400     48 00 90 AD |  if_e	jmp	#LR__0690
0b404     10 5E 05 F1 | 	add	fp, #16
0b408     AF 84 02 FB | 	rdlong	local01, fp
0b40c     10 5E 85 F1 | 	sub	fp, #16
0b410     04 84 0E F2 | 	cmp	local01, #4 wz
0b414     1C 00 90 5D |  if_ne	jmp	#LR__0689
0b418     14 5E 05 F1 | 	add	fp, #20
0b41c     AF 76 02 F6 | 	mov	arg01, fp
0b420     14 5E 85 F1 | 	sub	fp, #20
0b424     00 ED BF FD | 	call	#_ff_cc_dir_register_0327
0b428     10 5E 05 F1 | 	add	fp, #16
0b42c     AF 30 62 FC | 	wrlong	result1, fp
0b430     10 5E 85 F1 | 	sub	fp, #16
0b434                 | LR__0689
0b434     0C 5E 05 F1 | 	add	fp, #12
0b438     AF 84 C2 FA | 	rdbyte	local01, fp
0b43c     08 84 46 F5 | 	or	local01, #8
0b440     AF 84 42 FC | 	wrbyte	local01, fp
0b444     0C 5E 85 F1 | 	sub	fp, #12
0b448     48 00 90 FD | 	jmp	#LR__0693
0b44c                 | LR__0690
0b44c     1A 5E 05 F1 | 	add	fp, #26
0b450     AF 84 C2 FA | 	rdbyte	local01, fp
0b454     1A 5E 85 F1 | 	sub	fp, #26
0b458     07 84 46 F7 | 	zerox	local01, #7
0b45c     11 84 CE F7 | 	test	local01, #17 wz
0b460     10 00 90 AD |  if_e	jmp	#LR__0691
0b464     10 5E 05 F1 | 	add	fp, #16
0b468     AF 0E 68 FC | 	wrlong	#7, fp
0b46c     10 5E 85 F1 | 	sub	fp, #16
0b470     20 00 90 FD | 	jmp	#LR__0692
0b474                 | LR__0691
0b474     0C 5E 05 F1 | 	add	fp, #12
0b478     AF 84 C2 FA | 	rdbyte	local01, fp
0b47c     0C 5E 85 F1 | 	sub	fp, #12
0b480     07 84 46 F7 | 	zerox	local01, #7
0b484     04 84 CE F7 | 	test	local01, #4 wz
0b488     10 5E 05 51 |  if_ne	add	fp, #16
0b48c     AF 10 68 5C |  if_ne	wrlong	#8, fp
0b490     10 5E 85 51 |  if_ne	sub	fp, #16
0b494                 | LR__0692
0b494                 | LR__0693
0b494     10 5E 05 F1 | 	add	fp, #16
0b498     AF 84 0A FB | 	rdlong	local01, fp wz
0b49c     10 5E 85 F1 | 	sub	fp, #16
0b4a0     D4 01 90 5D |  if_ne	jmp	#LR__0699
0b4a4     0C 5E 05 F1 | 	add	fp, #12
0b4a8     AF 8C C2 FA | 	rdbyte	local05, fp
0b4ac     0C 5E 85 F1 | 	sub	fp, #12
0b4b0     07 8C 46 F7 | 	zerox	local05, #7
0b4b4     08 8C CE F7 | 	test	local05, #8 wz
0b4b8     BC 01 90 AD |  if_e	jmp	#LR__0699
0b4bc     40 5E 05 F1 | 	add	fp, #64
0b4c0     AF 76 02 FB | 	rdlong	arg01, fp
0b4c4     10 5E 85 F1 | 	sub	fp, #16
0b4c8     AF 78 02 FB | 	rdlong	arg02, fp
0b4cc     30 5E 85 F1 | 	sub	fp, #48
0b4d0     A0 E9 BF FD | 	call	#_ff_cc_ld_clust_0314
0b4d4     18 8F 02 F6 | 	mov	local06, result1
0b4d8     44 5E 05 F1 | 	add	fp, #68
0b4dc     AF 8E 62 FC | 	wrlong	local06, fp
0b4e0     14 5E 85 F1 | 	sub	fp, #20
0b4e4     AF 76 02 FB | 	rdlong	arg01, fp
0b4e8     30 5E 85 F1 | 	sub	fp, #48
0b4ec     0E 76 06 F1 | 	add	arg01, #14
0b4f0     80 10 27 FF 
0b4f4     00 78 06 F6 | 	mov	arg02, ##1310785536
0b4f8     68 D8 BF FD | 	call	#_ff_cc_st_dword_0257
0b4fc     30 5E 05 F1 | 	add	fp, #48
0b500     AF 84 02 FB | 	rdlong	local01, fp
0b504     0B 84 06 F1 | 	add	local01, #11
0b508     42 41 48 FC | 	wrbyte	#32, local01
0b50c     10 5E 05 F1 | 	add	fp, #16
0b510     AF 76 02 FB | 	rdlong	arg01, fp
0b514     10 5E 85 F1 | 	sub	fp, #16
0b518     AF 78 02 FB | 	rdlong	arg02, fp
0b51c     30 5E 85 F1 | 	sub	fp, #48
0b520     00 7A 06 F6 | 	mov	arg03, #0
0b524     A4 E9 BF FD | 	call	#_ff_cc_st_clust_0315
0b528     30 5E 05 F1 | 	add	fp, #48
0b52c     AF 76 02 FB | 	rdlong	arg01, fp
0b530     30 5E 85 F1 | 	sub	fp, #48
0b534     1C 76 06 F1 | 	add	arg01, #28
0b538     00 78 06 F6 | 	mov	arg02, #0
0b53c     24 D8 BF FD | 	call	#_ff_cc_st_dword_0257
0b540     40 5E 05 F1 | 	add	fp, #64
0b544     AF 84 02 FB | 	rdlong	local01, fp
0b548     03 84 06 F1 | 	add	local01, #3
0b54c     42 03 48 FC | 	wrbyte	#1, local01
0b550     04 5E 05 F1 | 	add	fp, #4
0b554     AF 90 02 FB | 	rdlong	local07, fp
0b558     44 5E 85 F1 | 	sub	fp, #68
0b55c     48 85 0A F6 | 	mov	local01, local07 wz
0b560     14 01 90 AD |  if_e	jmp	#LR__0699
0b564     40 5E 05 F1 | 	add	fp, #64
0b568     AF 84 02 FB | 	rdlong	local01, fp
0b56c     2C 84 06 F1 | 	add	local01, #44
0b570     42 8D 02 FB | 	rdlong	local05, local01
0b574     10 5E 05 F1 | 	add	fp, #16
0b578     AF 8C 62 FC | 	wrlong	local05, fp
0b57c     3C 5E 85 F1 | 	sub	fp, #60
0b580     AF 76 02 F6 | 	mov	arg01, fp
0b584     30 5E 05 F1 | 	add	fp, #48
0b588     AF 78 02 FB | 	rdlong	arg02, fp
0b58c     44 5E 85 F1 | 	sub	fp, #68
0b590     00 7A 06 F6 | 	mov	arg03, #0
0b594     60 E0 BF FD | 	call	#_ff_cc_remove_chain_0289
0b598     18 91 02 F6 | 	mov	local07, result1
0b59c     10 5E 05 F1 | 	add	fp, #16
0b5a0     AF 90 62 FC | 	wrlong	local07, fp
0b5a4     10 5E 85 F1 | 	sub	fp, #16
0b5a8     48 85 0A F6 | 	mov	local01, local07 wz
0b5ac     C8 00 90 5D |  if_ne	jmp	#LR__0699
0b5b0     40 5E 05 F1 | 	add	fp, #64
0b5b4     AF 76 02 FB | 	rdlong	arg01, fp
0b5b8     10 5E 05 F1 | 	add	fp, #16
0b5bc     AF 78 02 FB | 	rdlong	arg02, fp
0b5c0     50 5E 85 F1 | 	sub	fp, #80
0b5c4     30 D9 BF FD | 	call	#_ff_cc_move_window_0273
0b5c8     18 8F 02 F6 | 	mov	local06, result1
0b5cc     10 5E 05 F1 | 	add	fp, #16
0b5d0     AF 8E 62 FC | 	wrlong	local06, fp
0b5d4     30 5E 05 F1 | 	add	fp, #48
0b5d8     AF 84 02 FB | 	rdlong	local01, fp
0b5dc     04 5E 05 F1 | 	add	fp, #4
0b5e0     AF 8C 02 FB | 	rdlong	local05, fp
0b5e4     44 5E 85 F1 | 	sub	fp, #68
0b5e8     01 8C 86 F1 | 	sub	local05, #1
0b5ec     0C 84 06 F1 | 	add	local01, #12
0b5f0     42 8D 62 FC | 	wrlong	local05, local01
0b5f4     80 00 90 FD | 	jmp	#LR__0699
0b5f8                 | LR__0694
0b5f8     10 5E 05 F1 | 	add	fp, #16
0b5fc     AF 84 0A FB | 	rdlong	local01, fp wz
0b600     10 5E 85 F1 | 	sub	fp, #16
0b604     70 00 90 5D |  if_ne	jmp	#LR__0698
0b608     1A 5E 05 F1 | 	add	fp, #26
0b60c     AF 84 C2 FA | 	rdbyte	local01, fp
0b610     1A 5E 85 F1 | 	sub	fp, #26
0b614     07 84 46 F7 | 	zerox	local01, #7
0b618     10 84 CE F7 | 	test	local01, #16 wz
0b61c     10 00 90 AD |  if_e	jmp	#LR__0695
0b620     10 5E 05 F1 | 	add	fp, #16
0b624     AF 08 68 FC | 	wrlong	#4, fp
0b628     10 5E 85 F1 | 	sub	fp, #16
0b62c     48 00 90 FD | 	jmp	#LR__0697
0b630                 | LR__0695
0b630     0C 5E 05 F1 | 	add	fp, #12
0b634     AF 90 C2 FA | 	rdbyte	local07, fp
0b638     0C 5E 85 F1 | 	sub	fp, #12
0b63c     48 85 02 F6 | 	mov	local01, local07
0b640     07 84 46 F7 | 	zerox	local01, #7
0b644     02 84 CE F7 | 	test	local01, #2 wz
0b648     2C 00 90 AD |  if_e	jmp	#LR__0696
0b64c     1A 5E 05 F1 | 	add	fp, #26
0b650     AF 8A C2 FA | 	rdbyte	local04, fp
0b654     1A 5E 85 F1 | 	sub	fp, #26
0b658     45 8D 02 F6 | 	mov	local05, local04
0b65c     07 8C 46 F7 | 	zerox	local05, #7
0b660     01 8C 0E F5 | 	and	local05, #1 wz
0b664     10 00 90 AD |  if_e	jmp	#LR__0696
0b668     07 84 06 F6 | 	mov	local01, #7
0b66c     10 5E 05 F1 | 	add	fp, #16
0b670     AF 0E 68 FC | 	wrlong	#7, fp
0b674     10 5E 85 F1 | 	sub	fp, #16
0b678                 | LR__0696
0b678                 | LR__0697
0b678                 | LR__0698
0b678                 | LR__0699
0b678     10 5E 05 F1 | 	add	fp, #16
0b67c     AF 84 0A FB | 	rdlong	local01, fp wz
0b680     10 5E 85 F1 | 	sub	fp, #16
0b684     68 00 90 5D |  if_ne	jmp	#LR__0701
0b688     0C 5E 05 F1 | 	add	fp, #12
0b68c     AF 84 C2 FA | 	rdbyte	local01, fp
0b690     0C 5E 85 F1 | 	sub	fp, #12
0b694     07 84 46 F7 | 	zerox	local01, #7
0b698     08 84 CE F7 | 	test	local01, #8 wz
0b69c     14 00 90 AD |  if_e	jmp	#LR__0700
0b6a0     0C 5E 05 F1 | 	add	fp, #12
0b6a4     AF 84 C2 FA | 	rdbyte	local01, fp
0b6a8     40 84 46 F5 | 	or	local01, #64
0b6ac     AF 84 42 FC | 	wrbyte	local01, fp
0b6b0     0C 5E 85 F1 | 	sub	fp, #12
0b6b4                 | LR__0700
0b6b4     04 5E 05 F1 | 	add	fp, #4
0b6b8     AF 84 02 FB | 	rdlong	local01, fp
0b6bc     3C 5E 05 F1 | 	add	fp, #60
0b6c0     AF 8C 02 FB | 	rdlong	local05, fp
0b6c4     2C 8C 06 F1 | 	add	local05, #44
0b6c8     46 8F 02 FB | 	rdlong	local06, local05
0b6cc     20 84 06 F1 | 	add	local01, #32
0b6d0     42 8F 62 FC | 	wrlong	local06, local01
0b6d4     3C 5E 85 F1 | 	sub	fp, #60
0b6d8     AF 84 02 FB | 	rdlong	local01, fp
0b6dc     2C 5E 05 F1 | 	add	fp, #44
0b6e0     AF 8C 02 FB | 	rdlong	local05, fp
0b6e4     30 5E 85 F1 | 	sub	fp, #48
0b6e8     24 84 06 F1 | 	add	local01, #36
0b6ec     42 8D 62 FC | 	wrlong	local05, local01
0b6f0                 | LR__0701
0b6f0     10 5E 05 F1 | 	add	fp, #16
0b6f4     AF 84 0A FB | 	rdlong	local01, fp wz
0b6f8     10 5E 85 F1 | 	sub	fp, #16
0b6fc     FC 02 90 5D |  if_ne	jmp	#LR__0708
0b700     04 5E 05 F1 | 	add	fp, #4
0b704     AF 84 02 FB | 	rdlong	local01, fp
0b708     3C 5E 05 F1 | 	add	fp, #60
0b70c     AF 76 02 FB | 	rdlong	arg01, fp
0b710     10 5E 85 F1 | 	sub	fp, #16
0b714     AF 78 02 FB | 	rdlong	arg02, fp
0b718     30 5E 85 F1 | 	sub	fp, #48
0b71c     54 E7 BF FD | 	call	#_ff_cc_ld_clust_0314
0b720     18 89 02 F6 | 	mov	local03, result1
0b724     08 84 06 F1 | 	add	local01, #8
0b728     42 89 62 FC | 	wrlong	local03, local01
0b72c     04 5E 05 F1 | 	add	fp, #4
0b730     AF 84 02 FB | 	rdlong	local01, fp
0b734     2C 5E 05 F1 | 	add	fp, #44
0b738     AF 76 02 FB | 	rdlong	arg01, fp
0b73c     30 5E 85 F1 | 	sub	fp, #48
0b740     1C 76 06 F1 | 	add	arg01, #28
0b744     B8 D5 BF FD | 	call	#_ff_cc_ld_dword_0255
0b748     0C 84 06 F1 | 	add	local01, #12
0b74c     42 31 62 FC | 	wrlong	result1, local01
0b750     04 5E 05 F1 | 	add	fp, #4
0b754     AF 84 02 FB | 	rdlong	local01, fp
0b758     3C 5E 05 F1 | 	add	fp, #60
0b75c     AF 8C 02 FB | 	rdlong	local05, fp
0b760     42 8D 62 FC | 	wrlong	local05, local01
0b764     3C 5E 85 F1 | 	sub	fp, #60
0b768     AF 84 02 FB | 	rdlong	local01, fp
0b76c     3C 5E 05 F1 | 	add	fp, #60
0b770     AF 8C 02 FB | 	rdlong	local05, fp
0b774     06 8C 06 F1 | 	add	local05, #6
0b778     46 8F E2 FA | 	rdword	local06, local05
0b77c     04 84 06 F1 | 	add	local01, #4
0b780     42 8F 52 FC | 	wrword	local06, local01
0b784     3C 5E 85 F1 | 	sub	fp, #60
0b788     AF 84 02 FB | 	rdlong	local01, fp
0b78c     08 5E 05 F1 | 	add	fp, #8
0b790     AF 8C C2 FA | 	rdbyte	local05, fp
0b794     10 84 06 F1 | 	add	local01, #16
0b798     42 8D 42 FC | 	wrbyte	local05, local01
0b79c     08 5E 85 F1 | 	sub	fp, #8
0b7a0     AF 84 02 FB | 	rdlong	local01, fp
0b7a4     11 84 06 F1 | 	add	local01, #17
0b7a8     42 01 48 FC | 	wrbyte	#0, local01
0b7ac     AF 84 02 FB | 	rdlong	local01, fp
0b7b0     1C 84 06 F1 | 	add	local01, #28
0b7b4     42 01 68 FC | 	wrlong	#0, local01
0b7b8     AF 84 02 FB | 	rdlong	local01, fp
0b7bc     14 84 06 F1 | 	add	local01, #20
0b7c0     42 01 68 FC | 	wrlong	#0, local01
0b7c4     08 5E 05 F1 | 	add	fp, #8
0b7c8     AF 84 C2 FA | 	rdbyte	local01, fp
0b7cc     0C 5E 85 F1 | 	sub	fp, #12
0b7d0     07 84 46 F7 | 	zerox	local01, #7
0b7d4     20 84 CE F7 | 	test	local01, #32 wz
0b7d8     20 02 90 AD |  if_e	jmp	#LR__0707
0b7dc     04 5E 05 F1 | 	add	fp, #4
0b7e0     AF 8C 02 FB | 	rdlong	local05, fp
0b7e4     04 5E 85 F1 | 	sub	fp, #4
0b7e8     0C 8C 06 F1 | 	add	local05, #12
0b7ec     46 87 02 FB | 	rdlong	local02, local05
0b7f0     00 86 1E F2 | 	cmp	local02, #0 wcz
0b7f4     04 02 90 ED |  if_be	jmp	#LR__0707
0b7f8     04 5E 05 F1 | 	add	fp, #4
0b7fc     AF 84 02 FB | 	rdlong	local01, fp
0b800     42 8D 02 F6 | 	mov	local05, local01
0b804     0C 8C 06 F1 | 	add	local05, #12
0b808     46 8F 02 FB | 	rdlong	local06, local05
0b80c     14 84 06 F1 | 	add	local01, #20
0b810     42 8F 62 FC | 	wrlong	local06, local01
0b814     3C 5E 05 F1 | 	add	fp, #60
0b818     AF 90 02 FB | 	rdlong	local07, fp
0b81c     0A 90 06 F1 | 	add	local07, #10
0b820     48 8F E2 FA | 	rdword	local06, local07
0b824     09 8E 66 F0 | 	shl	local06, #9
0b828     08 5E 05 F1 | 	add	fp, #8
0b82c     AF 8E 62 FC | 	wrlong	local06, fp
0b830     44 5E 85 F1 | 	sub	fp, #68
0b834     AF 84 02 FB | 	rdlong	local01, fp
0b838     08 84 06 F1 | 	add	local01, #8
0b83c     42 8D 02 FB | 	rdlong	local05, local01
0b840     48 5E 05 F1 | 	add	fp, #72
0b844     AF 8C 62 FC | 	wrlong	local05, fp
0b848                 | ' 				fp->fptr = fp->obj.objsize;
0b848                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
0b848                 | ' 				clst = fp->obj.sclust;
0b848                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
0b848     48 5E 85 F1 | 	sub	fp, #72
0b84c     AF 84 02 FB | 	rdlong	local01, fp
0b850     0C 84 06 F1 | 	add	local01, #12
0b854     42 8D 02 FB | 	rdlong	local05, local01
0b858     50 5E 05 F1 | 	add	fp, #80
0b85c     AF 8C 62 FC | 	wrlong	local05, fp
0b860     54 5E 85 F1 | 	sub	fp, #84
0b864                 | LR__0702
0b864     10 5E 05 F1 | 	add	fp, #16
0b868     AF 8E 02 FB | 	rdlong	local06, fp
0b86c     10 5E 85 F1 | 	sub	fp, #16
0b870     47 8B 0A F6 | 	mov	local04, local06 wz
0b874     B0 00 90 5D |  if_ne	jmp	#LR__0703
0b878     54 5E 05 F1 | 	add	fp, #84
0b87c     AF 88 02 FB | 	rdlong	local03, fp
0b880     44 87 02 F6 | 	mov	local02, local03
0b884     0C 5E 85 F1 | 	sub	fp, #12
0b888     AF 92 02 FB | 	rdlong	local08, fp
0b88c     48 5E 85 F1 | 	sub	fp, #72
0b890     49 95 02 F6 | 	mov	local09, local08
0b894     4A 87 1A F2 | 	cmp	local02, local09 wcz
0b898     8C 00 90 ED |  if_be	jmp	#LR__0703
0b89c     04 5E 05 F1 | 	add	fp, #4
0b8a0     AF 76 02 FB | 	rdlong	arg01, fp
0b8a4     48 5E 05 F1 | 	add	fp, #72
0b8a8     AF 96 02 FB | 	rdlong	local10, fp
0b8ac     4C 5E 85 F1 | 	sub	fp, #76
0b8b0     4B 99 02 F6 | 	mov	local11, local10
0b8b4     4C 79 02 F6 | 	mov	arg02, local11
0b8b8     74 D8 BF FD | 	call	#_ff_cc_get_fat_0281
0b8bc     18 9B 02 F6 | 	mov	local12, result1
0b8c0     4C 5E 05 F1 | 	add	fp, #76
0b8c4     AF 9A 62 FC | 	wrlong	local12, fp
0b8c8     4C 5E 85 F1 | 	sub	fp, #76
0b8cc     01 9A 1E F2 | 	cmp	local12, #1 wcz
0b8d0     10 5E 05 E1 |  if_be	add	fp, #16
0b8d4     AF 04 68 EC |  if_be	wrlong	#2, fp
0b8d8     10 5E 85 E1 |  if_be	sub	fp, #16
0b8dc     4C 5E 05 F1 | 	add	fp, #76
0b8e0     AF 9C 02 FB | 	rdlong	local13, fp
0b8e4     4C 5E 85 F1 | 	sub	fp, #76
0b8e8     FF FF 7F FF 
0b8ec     FF 9D 0E F2 | 	cmp	local13, ##-1 wz
0b8f0     10 5E 05 A1 |  if_e	add	fp, #16
0b8f4     AF 02 68 AC |  if_e	wrlong	#1, fp
0b8f8     10 5E 85 A1 |  if_e	sub	fp, #16
0b8fc     54 5E 05 F1 | 	add	fp, #84
0b900     AF 9E 02 FB | 	rdlong	local14, fp
0b904     4F 9D 02 F6 | 	mov	local13, local14
0b908     0C 5E 85 F1 | 	sub	fp, #12
0b90c     AF A0 02 FB | 	rdlong	local15, fp
0b910     50 A3 02 F6 | 	mov	local16, local15
0b914     51 9D 82 F1 | 	sub	local13, local16
0b918     0C 5E 05 F1 | 	add	fp, #12
0b91c     AF 9C 62 FC | 	wrlong	local13, fp
0b920     54 5E 85 F1 | 	sub	fp, #84
0b924     3C FF 9F FD | 	jmp	#LR__0702
0b928                 | LR__0703
0b928     04 5E 05 F1 | 	add	fp, #4
0b92c     AF 84 02 FB | 	rdlong	local01, fp
0b930     48 5E 05 F1 | 	add	fp, #72
0b934     AF 8C 02 FB | 	rdlong	local05, fp
0b938     18 84 06 F1 | 	add	local01, #24
0b93c     42 8D 62 FC | 	wrlong	local05, local01
0b940     3C 5E 85 F1 | 	sub	fp, #60
0b944     AF 90 02 FB | 	rdlong	local07, fp
0b948     10 5E 85 F1 | 	sub	fp, #16
0b94c     48 85 0A F6 | 	mov	local01, local07 wz
0b950     A8 00 90 5D |  if_ne	jmp	#LR__0706
0b954     54 5E 05 F1 | 	add	fp, #84
0b958     AF 8E 02 FB | 	rdlong	local06, fp
0b95c     54 5E 85 F1 | 	sub	fp, #84
0b960     47 8B 02 F6 | 	mov	local04, local06
0b964     45 8D 02 F6 | 	mov	local05, local04
0b968     FF 8D 0E F5 | 	and	local05, #511 wz
0b96c     8C 00 90 AD |  if_e	jmp	#LR__0706
0b970     40 5E 05 F1 | 	add	fp, #64
0b974     AF 76 02 FB | 	rdlong	arg01, fp
0b978     0C 5E 05 F1 | 	add	fp, #12
0b97c     AF 8A 02 FB | 	rdlong	local04, fp
0b980     4C 5E 85 F1 | 	sub	fp, #76
0b984     45 8D 02 F6 | 	mov	local05, local04
0b988     46 79 02 F6 | 	mov	arg02, local05
0b98c     60 D7 BF FD | 	call	#_ff_cc_clst2sect_0276
0b990     18 8F 02 F6 | 	mov	local06, result1
0b994     50 5E 05 F1 | 	add	fp, #80
0b998     AF 8E 62 FC | 	wrlong	local06, fp
0b99c     AF 90 0A FB | 	rdlong	local07, fp wz
0b9a0     50 5E 85 F1 | 	sub	fp, #80
0b9a4     14 00 90 5D |  if_ne	jmp	#LR__0704
0b9a8     02 84 06 F6 | 	mov	local01, #2
0b9ac     10 5E 05 F1 | 	add	fp, #16
0b9b0     AF 04 68 FC | 	wrlong	#2, fp
0b9b4     10 5E 85 F1 | 	sub	fp, #16
0b9b8     40 00 90 FD | 	jmp	#LR__0705
0b9bc                 | LR__0704
0b9bc     04 5E 05 F1 | 	add	fp, #4
0b9c0     AF 90 02 FB | 	rdlong	local07, fp
0b9c4     48 85 02 F6 | 	mov	local01, local07
0b9c8     4C 5E 05 F1 | 	add	fp, #76
0b9cc     AF 8A 02 FB | 	rdlong	local04, fp
0b9d0     45 8D 02 F6 | 	mov	local05, local04
0b9d4     04 5E 05 F1 | 	add	fp, #4
0b9d8     AF 88 02 FB | 	rdlong	local03, fp
0b9dc     54 5E 85 F1 | 	sub	fp, #84
0b9e0     44 87 02 F6 | 	mov	local02, local03
0b9e4     43 8F 02 F6 | 	mov	local06, local02
0b9e8     09 8E 46 F0 | 	shr	local06, #9
0b9ec     47 8D 02 F1 | 	add	local05, local06
0b9f0     1C 84 06 F1 | 	add	local01, #28
0b9f4     42 8D 62 FC | 	wrlong	local05, local01
0b9f8     1C 84 86 F1 | 	sub	local01, #28
0b9fc                 | LR__0705
0b9fc                 | LR__0706
0b9fc                 | LR__0707
0b9fc                 | LR__0708
0b9fc                 | LR__0709
0b9fc     10 5E 05 F1 | 	add	fp, #16
0ba00     AF 84 0A FB | 	rdlong	local01, fp wz
0ba04     10 5E 85 F1 | 	sub	fp, #16
0ba08     10 00 90 AD |  if_e	jmp	#LR__0710
0ba0c     04 5E 05 F1 | 	add	fp, #4
0ba10     AF 84 02 FB | 	rdlong	local01, fp
0ba14     04 5E 85 F1 | 	sub	fp, #4
0ba18     42 01 68 FC | 	wrlong	#0, local01
0ba1c                 | LR__0710
0ba1c                 | ' 
0ba1c                 | ' 	return res ;
0ba1c     10 5E 05 F1 | 	add	fp, #16
0ba20     AF 30 02 FB | 	rdlong	result1, fp
0ba24     10 5E 85 F1 | 	sub	fp, #16
0ba28                 | LR__0711
0ba28     AF F0 03 F6 | 	mov	ptra, fp
0ba2c     BF 00 A0 FD | 	call	#popregs_
0ba30                 | _ff_cc_f_open_ret
0ba30     2D 00 64 FD | 	ret
0ba34                 | 
0ba34                 | _ff_cc_f_read
0ba34     19 5A 05 F6 | 	mov	COUNT_, #25
0ba38     B0 00 A0 FD | 	call	#pushregs_
0ba3c     38 F0 07 F1 | 	add	ptra, #56
0ba40     04 5E 05 F1 | 	add	fp, #4
0ba44     AF 76 62 FC | 	wrlong	arg01, fp
0ba48     04 5E 05 F1 | 	add	fp, #4
0ba4c     AF 78 62 FC | 	wrlong	arg02, fp
0ba50     04 5E 05 F1 | 	add	fp, #4
0ba54     AF 7A 62 FC | 	wrlong	arg03, fp
0ba58     04 5E 05 F1 | 	add	fp, #4
0ba5c     AF 7C 62 FC | 	wrlong	arg04, fp
0ba60     18 5E 05 F1 | 	add	fp, #24
0ba64     AF 00 68 FC | 	wrlong	#0, fp
0ba68     20 5E 85 F1 | 	sub	fp, #32
0ba6c     AF 84 02 FB | 	rdlong	local01, fp
0ba70     2C 5E 05 F1 | 	add	fp, #44
0ba74     AF 84 62 FC | 	wrlong	local01, fp
0ba78     24 5E 85 F1 | 	sub	fp, #36
0ba7c     AF 84 02 FB | 	rdlong	local01, fp
0ba80     42 01 68 FC | 	wrlong	#0, local01
0ba84     0C 5E 85 F1 | 	sub	fp, #12
0ba88     AF 76 02 FB | 	rdlong	arg01, fp
0ba8c     14 5E 05 F1 | 	add	fp, #20
0ba90     AF 78 02 F6 | 	mov	arg02, fp
0ba94     18 5E 85 F1 | 	sub	fp, #24
0ba98     84 F6 BF FD | 	call	#_ff_cc_validate_0371
0ba9c     14 5E 05 F1 | 	add	fp, #20
0baa0     AF 30 62 FC | 	wrlong	result1, fp
0baa4     18 87 02 F6 | 	mov	local02, result1
0baa8     14 5E 85 F1 | 	sub	fp, #20
0baac     43 85 0A F6 | 	mov	local01, local02 wz
0bab0     2C 00 90 5D |  if_ne	jmp	#LR__0712
0bab4     04 5E 05 F1 | 	add	fp, #4
0bab8     AF 88 02 FB | 	rdlong	local03, fp
0babc     11 88 06 F1 | 	add	local03, #17
0bac0     44 8B C2 FA | 	rdbyte	local04, local03
0bac4     45 8D 02 F6 | 	mov	local05, local04
0bac8     07 8C 46 F7 | 	zerox	local05, #7
0bacc     10 5E 05 F1 | 	add	fp, #16
0bad0     AF 8C 62 FC | 	wrlong	local05, fp
0bad4     14 5E 85 F1 | 	sub	fp, #20
0bad8     46 8F 0A F6 | 	mov	local06, local05 wz
0badc     10 00 90 AD |  if_e	jmp	#LR__0713
0bae0                 | LR__0712
0bae0     14 5E 05 F1 | 	add	fp, #20
0bae4     AF 30 02 FB | 	rdlong	result1, fp
0bae8     14 5E 85 F1 | 	sub	fp, #20
0baec     84 05 90 FD | 	jmp	#LR__0731
0baf0                 | LR__0713
0baf0     04 5E 05 F1 | 	add	fp, #4
0baf4     AF 86 02 FB | 	rdlong	local02, fp
0baf8     04 5E 85 F1 | 	sub	fp, #4
0bafc     10 86 06 F1 | 	add	local02, #16
0bb00     43 85 C2 FA | 	rdbyte	local01, local02
0bb04     01 84 CE F7 | 	test	local01, #1 wz
0bb08     07 30 06 A6 |  if_e	mov	result1, #7
0bb0c     64 05 90 AD |  if_e	jmp	#LR__0731
0bb10     04 5E 05 F1 | 	add	fp, #4
0bb14     AF 86 02 FB | 	rdlong	local02, fp
0bb18     43 89 02 F6 | 	mov	local03, local02
0bb1c     0C 86 06 F1 | 	add	local02, #12
0bb20     43 85 02 FB | 	rdlong	local01, local02
0bb24     14 88 06 F1 | 	add	local03, #20
0bb28     44 8F 02 FB | 	rdlong	local06, local03
0bb2c     47 85 82 F1 | 	sub	local01, local06
0bb30     20 5E 05 F1 | 	add	fp, #32
0bb34     AF 84 62 FC | 	wrlong	local01, fp
0bb38     18 5E 85 F1 | 	sub	fp, #24
0bb3c     AF 84 02 FB | 	rdlong	local01, fp
0bb40     18 5E 05 F1 | 	add	fp, #24
0bb44     AF 90 02 FB | 	rdlong	local07, fp
0bb48     24 5E 85 F1 | 	sub	fp, #36
0bb4c     48 85 1A F2 | 	cmp	local01, local07 wcz
0bb50     14 00 90 ED |  if_be	jmp	#LR__0714
0bb54     24 5E 05 F1 | 	add	fp, #36
0bb58     AF 84 02 FB | 	rdlong	local01, fp
0bb5c     18 5E 85 F1 | 	sub	fp, #24
0bb60     AF 84 62 FC | 	wrlong	local01, fp
0bb64     0C 5E 85 F1 | 	sub	fp, #12
0bb68                 | LR__0714
0bb68                 | ' 
0bb68                 | ' 	for ( ; btr;
0bb68                 | LR__0715
0bb68     0C 5E 05 F1 | 	add	fp, #12
0bb6c     AF 86 02 FB | 	rdlong	local02, fp
0bb70     0C 5E 85 F1 | 	sub	fp, #12
0bb74     43 85 0A F6 | 	mov	local01, local02 wz
0bb78     F4 04 90 AD |  if_e	jmp	#LR__0730
0bb7c     04 5E 05 F1 | 	add	fp, #4
0bb80     AF 90 02 FB | 	rdlong	local07, fp
0bb84     04 5E 85 F1 | 	sub	fp, #4
0bb88     14 90 06 F1 | 	add	local07, #20
0bb8c     48 93 02 FB | 	rdlong	local08, local07
0bb90     FF 93 CE F7 | 	test	local08, #511 wz
0bb94     64 03 90 5D |  if_ne	jmp	#LR__0726
0bb98     04 5E 05 F1 | 	add	fp, #4
0bb9c     AF 88 02 FB | 	rdlong	local03, fp
0bba0     14 88 06 F1 | 	add	local03, #20
0bba4     44 91 02 FB | 	rdlong	local07, local03
0bba8     09 90 46 F0 | 	shr	local07, #9
0bbac     14 5E 05 F1 | 	add	fp, #20
0bbb0     AF 94 02 FB | 	rdlong	local09, fp
0bbb4     4A 97 02 F6 | 	mov	local10, local09
0bbb8     0A 96 06 F1 | 	add	local10, #10
0bbbc     4B 99 E2 FA | 	rdword	local11, local10
0bbc0     4C 8D 02 F6 | 	mov	local05, local11
0bbc4     0F 8C 46 F7 | 	zerox	local05, #15
0bbc8     01 8C 86 F1 | 	sub	local05, #1
0bbcc     46 91 02 F5 | 	and	local07, local05
0bbd0     18 5E 05 F1 | 	add	fp, #24
0bbd4     AF 90 62 FC | 	wrlong	local07, fp
0bbd8     AF 90 0A FB | 	rdlong	local07, fp wz
0bbdc     30 5E 85 F1 | 	sub	fp, #48
0bbe0     E0 00 90 5D |  if_ne	jmp	#LR__0720
0bbe4     04 5E 05 F1 | 	add	fp, #4
0bbe8     AF 90 02 FB | 	rdlong	local07, fp
0bbec     04 5E 85 F1 | 	sub	fp, #4
0bbf0     14 90 06 F1 | 	add	local07, #20
0bbf4     48 93 0A FB | 	rdlong	local08, local07 wz
0bbf8     20 00 90 5D |  if_ne	jmp	#LR__0716
0bbfc     04 5E 05 F1 | 	add	fp, #4
0bc00     AF 90 02 FB | 	rdlong	local07, fp
0bc04     08 90 06 F1 | 	add	local07, #8
0bc08     48 93 02 FB | 	rdlong	local08, local07
0bc0c     18 5E 05 F1 | 	add	fp, #24
0bc10     AF 92 62 FC | 	wrlong	local08, fp
0bc14     1C 5E 85 F1 | 	sub	fp, #28
0bc18     28 00 90 FD | 	jmp	#LR__0717
0bc1c                 | LR__0716
0bc1c     04 5E 05 F1 | 	add	fp, #4
0bc20     AF 76 02 FB | 	rdlong	arg01, fp
0bc24     3B 8F 02 F6 | 	mov	local06, arg01
0bc28     04 5E 85 F1 | 	sub	fp, #4
0bc2c     18 8E 06 F1 | 	add	local06, #24
0bc30     47 79 02 FB | 	rdlong	arg02, local06
0bc34     F8 D4 BF FD | 	call	#_ff_cc_get_fat_0281
0bc38     1C 5E 05 F1 | 	add	fp, #28
0bc3c     AF 30 62 FC | 	wrlong	result1, fp
0bc40     1C 5E 85 F1 | 	sub	fp, #28
0bc44                 | LR__0717
0bc44     1C 5E 05 F1 | 	add	fp, #28
0bc48     AF 90 02 FB | 	rdlong	local07, fp
0bc4c     1C 5E 85 F1 | 	sub	fp, #28
0bc50     02 90 1E F2 | 	cmp	local07, #2 wcz
0bc54     1C 00 90 3D |  if_ae	jmp	#LR__0718
0bc58     04 5E 05 F1 | 	add	fp, #4
0bc5c     AF 90 02 FB | 	rdlong	local07, fp
0bc60     04 5E 85 F1 | 	sub	fp, #4
0bc64     11 90 06 F1 | 	add	local07, #17
0bc68     48 05 48 FC | 	wrbyte	#2, local07
0bc6c     02 30 06 F6 | 	mov	result1, #2
0bc70     00 04 90 FD | 	jmp	#LR__0731
0bc74                 | LR__0718
0bc74     1C 5E 05 F1 | 	add	fp, #28
0bc78     AF 90 02 FB | 	rdlong	local07, fp
0bc7c     1C 5E 85 F1 | 	sub	fp, #28
0bc80     FF FF 7F FF 
0bc84     FF 91 0E F2 | 	cmp	local07, ##-1 wz
0bc88     1C 00 90 5D |  if_ne	jmp	#LR__0719
0bc8c     04 5E 05 F1 | 	add	fp, #4
0bc90     AF 90 02 FB | 	rdlong	local07, fp
0bc94     04 5E 85 F1 | 	sub	fp, #4
0bc98     11 90 06 F1 | 	add	local07, #17
0bc9c     48 03 48 FC | 	wrbyte	#1, local07
0bca0     01 30 06 F6 | 	mov	result1, #1
0bca4     CC 03 90 FD | 	jmp	#LR__0731
0bca8                 | LR__0719
0bca8     04 5E 05 F1 | 	add	fp, #4
0bcac     AF 90 02 FB | 	rdlong	local07, fp
0bcb0     18 5E 05 F1 | 	add	fp, #24
0bcb4     AF 92 02 FB | 	rdlong	local08, fp
0bcb8     1C 5E 85 F1 | 	sub	fp, #28
0bcbc     18 90 06 F1 | 	add	local07, #24
0bcc0     48 93 62 FC | 	wrlong	local08, local07
0bcc4                 | LR__0720
0bcc4     18 5E 05 F1 | 	add	fp, #24
0bcc8     AF 76 02 FB | 	rdlong	arg01, fp
0bccc     14 5E 85 F1 | 	sub	fp, #20
0bcd0     AF 92 02 FB | 	rdlong	local08, fp
0bcd4     04 5E 85 F1 | 	sub	fp, #4
0bcd8     18 92 06 F1 | 	add	local08, #24
0bcdc     49 79 02 FB | 	rdlong	arg02, local08
0bce0     0C D4 BF FD | 	call	#_ff_cc_clst2sect_0276
0bce4     20 5E 05 F1 | 	add	fp, #32
0bce8     AF 30 62 FC | 	wrlong	result1, fp
0bcec     AF 90 0A FB | 	rdlong	local07, fp wz
0bcf0     20 5E 85 F1 | 	sub	fp, #32
0bcf4     1C 00 90 5D |  if_ne	jmp	#LR__0721
0bcf8     04 5E 05 F1 | 	add	fp, #4
0bcfc     AF 90 02 FB | 	rdlong	local07, fp
0bd00     04 5E 85 F1 | 	sub	fp, #4
0bd04     11 90 06 F1 | 	add	local07, #17
0bd08     48 05 48 FC | 	wrbyte	#2, local07
0bd0c     02 30 06 F6 | 	mov	result1, #2
0bd10     60 03 90 FD | 	jmp	#LR__0731
0bd14                 | LR__0721
0bd14     20 5E 05 F1 | 	add	fp, #32
0bd18     AF 90 02 FB | 	rdlong	local07, fp
0bd1c     10 5E 05 F1 | 	add	fp, #16
0bd20     AF 92 02 FB | 	rdlong	local08, fp
0bd24     49 91 02 F1 | 	add	local07, local08
0bd28     10 5E 85 F1 | 	sub	fp, #16
0bd2c     AF 90 62 FC | 	wrlong	local07, fp
0bd30     14 5E 85 F1 | 	sub	fp, #20
0bd34     AF 90 02 FB | 	rdlong	local07, fp
0bd38     09 90 46 F0 | 	shr	local07, #9
0bd3c     20 5E 05 F1 | 	add	fp, #32
0bd40     AF 90 62 FC | 	wrlong	local07, fp
0bd44     2C 5E 85 F1 | 	sub	fp, #44
0bd48     00 90 1E F2 | 	cmp	local07, #0 wcz
0bd4c     90 01 90 ED |  if_be	jmp	#LR__0725
0bd50     30 5E 05 F1 | 	add	fp, #48
0bd54     AF 90 02 FB | 	rdlong	local07, fp
0bd58     04 5E 85 F1 | 	sub	fp, #4
0bd5c     AF 92 02 FB | 	rdlong	local08, fp
0bd60     49 91 02 F1 | 	add	local07, local08
0bd64     14 5E 85 F1 | 	sub	fp, #20
0bd68     AF 8C 02 FB | 	rdlong	local05, fp
0bd6c     18 5E 85 F1 | 	sub	fp, #24
0bd70     0A 8C 06 F1 | 	add	local05, #10
0bd74     46 8F E2 FA | 	rdword	local06, local05
0bd78     47 91 1A F2 | 	cmp	local07, local06 wcz
0bd7c     28 00 90 ED |  if_be	jmp	#LR__0722
0bd80     18 5E 05 F1 | 	add	fp, #24
0bd84     AF 88 02 FB | 	rdlong	local03, fp
0bd88     0A 88 06 F1 | 	add	local03, #10
0bd8c     44 91 E2 FA | 	rdword	local07, local03
0bd90     18 5E 05 F1 | 	add	fp, #24
0bd94     AF 8E 02 FB | 	rdlong	local06, fp
0bd98     47 91 82 F1 | 	sub	local07, local06
0bd9c     04 5E 85 F1 | 	sub	fp, #4
0bda0     AF 90 62 FC | 	wrlong	local07, fp
0bda4     2C 5E 85 F1 | 	sub	fp, #44
0bda8                 | LR__0722
0bda8     18 5E 05 F1 | 	add	fp, #24
0bdac     AF 90 02 FB | 	rdlong	local07, fp
0bdb0     01 90 06 F1 | 	add	local07, #1
0bdb4     48 77 C2 FA | 	rdbyte	arg01, local07
0bdb8     1C 5E 05 F1 | 	add	fp, #28
0bdbc     AF 78 02 FB | 	rdlong	arg02, fp
0bdc0     14 5E 85 F1 | 	sub	fp, #20
0bdc4     AF 7A 02 FB | 	rdlong	arg03, fp
0bdc8     0C 5E 05 F1 | 	add	fp, #12
0bdcc     AF 7C 02 FB | 	rdlong	arg04, fp
0bdd0     2C 5E 85 F1 | 	sub	fp, #44
0bdd4     7C CA BF FD | 	call	#_ff_cc_disk_read
0bdd8     00 30 0E F2 | 	cmp	result1, #0 wz
0bddc     1C 00 90 AD |  if_e	jmp	#LR__0723
0bde0     04 5E 05 F1 | 	add	fp, #4
0bde4     AF 90 02 FB | 	rdlong	local07, fp
0bde8     04 5E 85 F1 | 	sub	fp, #4
0bdec     11 90 06 F1 | 	add	local07, #17
0bdf0     48 03 48 FC | 	wrbyte	#1, local07
0bdf4     01 30 06 F6 | 	mov	result1, #1
0bdf8     78 02 90 FD | 	jmp	#LR__0731
0bdfc                 | LR__0723
0bdfc     18 5E 05 F1 | 	add	fp, #24
0be00     AF 90 02 FB | 	rdlong	local07, fp
0be04     18 5E 85 F1 | 	sub	fp, #24
0be08     03 90 06 F1 | 	add	local07, #3
0be0c     48 93 CA FA | 	rdbyte	local08, local07 wz
0be10     B0 00 90 AD |  if_e	jmp	#LR__0724
0be14     18 5E 05 F1 | 	add	fp, #24
0be18     AF 8C 02 FB | 	rdlong	local05, fp
0be1c     2C 8C 06 F1 | 	add	local05, #44
0be20     46 8F 02 FB | 	rdlong	local06, local05
0be24     08 5E 05 F1 | 	add	fp, #8
0be28     AF 98 02 FB | 	rdlong	local11, fp
0be2c     4C 8F 82 F1 | 	sub	local06, local11
0be30     0C 5E 05 F1 | 	add	fp, #12
0be34     AF 9A 02 FB | 	rdlong	local12, fp
0be38     2C 5E 85 F1 | 	sub	fp, #44
0be3c     4D 8F 1A F2 | 	cmp	local06, local12 wcz
0be40     80 00 90 3D |  if_ae	jmp	#LR__0724
0be44     34 5E 05 F1 | 	add	fp, #52
0be48     AF 88 02 FB | 	rdlong	local03, fp
0be4c     44 91 02 F6 | 	mov	local07, local03
0be50     1C 5E 85 F1 | 	sub	fp, #28
0be54     AF 8E 02 FB | 	rdlong	local06, fp
0be58     47 8B 02 F6 | 	mov	local04, local06
0be5c     2C 8A 06 F1 | 	add	local04, #44
0be60     45 8D 02 FB | 	rdlong	local05, local04
0be64     2C 8A 86 F1 | 	sub	local04, #44
0be68     46 93 02 F6 | 	mov	local08, local05
0be6c     08 5E 05 F1 | 	add	fp, #8
0be70     AF 94 02 FB | 	rdlong	local09, fp
0be74     4A 97 02 F6 | 	mov	local10, local09
0be78     4B 93 82 F1 | 	sub	local08, local10
0be7c     49 99 02 F6 | 	mov	local11, local08
0be80     09 98 66 F0 | 	shl	local11, #9
0be84     4C 9D 02 F6 | 	mov	local13, local11
0be88     4C 91 02 F1 | 	add	local07, local11
0be8c     48 9B 02 F6 | 	mov	local12, local07
0be90     08 5E 85 F1 | 	sub	fp, #8
0be94     AF 9E 02 FB | 	rdlong	local14, fp
0be98     18 5E 85 F1 | 	sub	fp, #24
0be9c     4F A1 02 F6 | 	mov	local15, local14
0bea0     30 A0 06 F1 | 	add	local15, #48
0bea4     50 A3 02 F6 | 	mov	local16, local15
0bea8     51 A5 02 F6 | 	mov	local17, local16
0beac     09 A6 C6 F9 | 	decod	local18, #9
0beb0     4D 77 02 F6 | 	mov	arg01, local12
0beb4     52 79 02 F6 | 	mov	arg02, local17
0beb8     09 7A C6 F9 | 	decod	arg03, #9
0bebc     30 A0 86 F1 | 	sub	local15, #48
0bec0     CC CE BF FD | 	call	#_ff_cc_mem_cpy_0260
0bec4                 | LR__0724
0bec4     2C 5E 05 F1 | 	add	fp, #44
0bec8     AF 90 02 FB | 	rdlong	local07, fp
0becc     09 90 66 F0 | 	shl	local07, #9
0bed0     04 5E 85 F1 | 	sub	fp, #4
0bed4     AF 90 62 FC | 	wrlong	local07, fp
0bed8     28 5E 85 F1 | 	sub	fp, #40
0bedc                 | ' 					mem_cpy(rbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ), fs->win,  ((UINT) 512 ) );
0bedc                 | ' 				}
0bedc                 | ' #line 3949 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0bedc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
0bedc                 | ' 				continue;
0bedc     E8 00 90 FD | 	jmp	#LR__0729
0bee0                 | LR__0725
0bee0     04 5E 05 F1 | 	add	fp, #4
0bee4     AF 90 02 FB | 	rdlong	local07, fp
0bee8     1C 5E 05 F1 | 	add	fp, #28
0beec     AF 92 02 FB | 	rdlong	local08, fp
0bef0     20 5E 85 F1 | 	sub	fp, #32
0bef4     1C 90 06 F1 | 	add	local07, #28
0bef8     48 93 62 FC | 	wrlong	local08, local07
0befc                 | LR__0726
0befc     04 5E 05 F1 | 	add	fp, #4
0bf00     AF 88 02 FB | 	rdlong	local03, fp
0bf04     14 88 06 F1 | 	add	local03, #20
0bf08     44 8B 02 FB | 	rdlong	local04, local03
0bf0c     FF 8B 06 F5 | 	and	local04, #511
0bf10     09 90 C6 F9 | 	decod	local07, #9
0bf14     45 91 82 F1 | 	sub	local07, local04
0bf18     24 5E 05 F1 | 	add	fp, #36
0bf1c     AF 90 62 FC | 	wrlong	local07, fp
0bf20     1C 5E 85 F1 | 	sub	fp, #28
0bf24     AF 92 02 FB | 	rdlong	local08, fp
0bf28     0C 5E 85 F1 | 	sub	fp, #12
0bf2c     49 91 1A F2 | 	cmp	local07, local08 wcz
0bf30     14 00 90 ED |  if_be	jmp	#LR__0727
0bf34     0C 5E 05 F1 | 	add	fp, #12
0bf38     AF 90 02 FB | 	rdlong	local07, fp
0bf3c     1C 5E 05 F1 | 	add	fp, #28
0bf40     AF 90 62 FC | 	wrlong	local07, fp
0bf44     28 5E 85 F1 | 	sub	fp, #40
0bf48                 | LR__0727
0bf48     18 5E 05 F1 | 	add	fp, #24
0bf4c     AF 76 02 FB | 	rdlong	arg01, fp
0bf50     14 5E 85 F1 | 	sub	fp, #20
0bf54     AF 92 02 FB | 	rdlong	local08, fp
0bf58     04 5E 85 F1 | 	sub	fp, #4
0bf5c     1C 92 06 F1 | 	add	local08, #28
0bf60     49 79 02 FB | 	rdlong	arg02, local08
0bf64     90 CF BF FD | 	call	#_ff_cc_move_window_0273
0bf68     00 30 0E F2 | 	cmp	result1, #0 wz
0bf6c     1C 00 90 AD |  if_e	jmp	#LR__0728
0bf70     04 5E 05 F1 | 	add	fp, #4
0bf74     AF 90 02 FB | 	rdlong	local07, fp
0bf78     04 5E 85 F1 | 	sub	fp, #4
0bf7c     11 90 06 F1 | 	add	local07, #17
0bf80     48 03 48 FC | 	wrbyte	#1, local07
0bf84     01 30 06 F6 | 	mov	result1, #1
0bf88     E8 00 90 FD | 	jmp	#LR__0731
0bf8c                 | LR__0728
0bf8c     34 5E 05 F1 | 	add	fp, #52
0bf90     AF 76 02 FB | 	rdlong	arg01, fp
0bf94     1C 5E 85 F1 | 	sub	fp, #28
0bf98     AF 78 02 FB | 	rdlong	arg02, fp
0bf9c     30 78 06 F1 | 	add	arg02, #48
0bfa0     14 5E 85 F1 | 	sub	fp, #20
0bfa4     AF 96 02 FB | 	rdlong	local10, fp
0bfa8     14 96 06 F1 | 	add	local10, #20
0bfac     4B A1 02 FB | 	rdlong	local15, local10
0bfb0     FF A1 06 F5 | 	and	local15, #511
0bfb4     50 79 02 F1 | 	add	arg02, local15
0bfb8     24 5E 05 F1 | 	add	fp, #36
0bfbc     AF 7A 02 FB | 	rdlong	arg03, fp
0bfc0     28 5E 85 F1 | 	sub	fp, #40
0bfc4     C8 CD BF FD | 	call	#_ff_cc_mem_cpy_0260
0bfc8                 | LR__0729
0bfc8     0C 5E 05 F1 | 	add	fp, #12
0bfcc     AF 90 02 FB | 	rdlong	local07, fp
0bfd0     1C 5E 05 F1 | 	add	fp, #28
0bfd4     AF 8A 02 FB | 	rdlong	local04, fp
0bfd8     45 91 82 F1 | 	sub	local07, local04
0bfdc     1C 5E 85 F1 | 	sub	fp, #28
0bfe0     AF 90 62 FC | 	wrlong	local07, fp
0bfe4     04 5E 05 F1 | 	add	fp, #4
0bfe8     AF 8E 02 FB | 	rdlong	local06, fp
0bfec     47 97 02 FB | 	rdlong	local10, local06
0bff0     18 5E 05 F1 | 	add	fp, #24
0bff4     AF 9A 02 FB | 	rdlong	local12, fp
0bff8     4D 9D 02 F6 | 	mov	local13, local12
0bffc     4D 97 02 F1 | 	add	local10, local12
0c000     47 97 62 FC | 	wrlong	local10, local06
0c004     0C 5E 05 F1 | 	add	fp, #12
0c008     AF 9E 02 FB | 	rdlong	local14, fp
0c00c     4F A1 02 F6 | 	mov	local15, local14
0c010     0C 5E 85 F1 | 	sub	fp, #12
0c014     AF A4 02 FB | 	rdlong	local17, fp
0c018     52 A3 02 F6 | 	mov	local16, local17
0c01c     52 A1 02 F1 | 	add	local15, local17
0c020     0C 5E 05 F1 | 	add	fp, #12
0c024     AF A0 62 FC | 	wrlong	local15, fp
0c028     30 5E 85 F1 | 	sub	fp, #48
0c02c     AF A8 02 FB | 	rdlong	local19, fp
0c030     54 A7 02 F6 | 	mov	local18, local19
0c034     54 AB 02 F6 | 	mov	local20, local19
0c038     55 AD 02 F6 | 	mov	local21, local20
0c03c     14 AC 06 F1 | 	add	local21, #20
0c040     56 AF 02 FB | 	rdlong	local22, local21
0c044     14 AC 86 F1 | 	sub	local21, #20
0c048     57 B1 02 F6 | 	mov	local23, local22
0c04c     24 5E 05 F1 | 	add	fp, #36
0c050     AF B2 02 FB | 	rdlong	local24, fp
0c054     28 5E 85 F1 | 	sub	fp, #40
0c058     59 B5 02 F6 | 	mov	local25, local24
0c05c     59 B1 02 F1 | 	add	local23, local24
0c060     14 A6 06 F1 | 	add	local18, #20
0c064     53 B1 62 FC | 	wrlong	local23, local18
0c068     14 A6 86 F1 | 	sub	local18, #20
0c06c     F8 FA 9F FD | 	jmp	#LR__0715
0c070                 | LR__0730
0c070                 | ' 		mem_cpy(rbuff, fs->win + fp->fptr %  ((UINT) 512 ) , rcnt);
0c070                 | ' #line 3973 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c070                 | ' 	}
0c070                 | ' 
0c070                 | ' 	return FR_OK ;
0c070     00 30 06 F6 | 	mov	result1, #0
0c074                 | LR__0731
0c074     AF F0 03 F6 | 	mov	ptra, fp
0c078     BF 00 A0 FD | 	call	#popregs_
0c07c                 | _ff_cc_f_read_ret
0c07c     2D 00 64 FD | 	ret
0c080                 | 
0c080                 | _ff_cc_f_write
0c080     2A 5A 05 F6 | 	mov	COUNT_, #42
0c084     B0 00 A0 FD | 	call	#pushregs_
0c088     34 F0 07 F1 | 	add	ptra, #52
0c08c     04 5E 05 F1 | 	add	fp, #4
0c090     AF 76 62 FC | 	wrlong	arg01, fp
0c094     04 5E 05 F1 | 	add	fp, #4
0c098     AF 78 62 FC | 	wrlong	arg02, fp
0c09c     04 5E 05 F1 | 	add	fp, #4
0c0a0     AF 7A 62 FC | 	wrlong	arg03, fp
0c0a4     04 5E 05 F1 | 	add	fp, #4
0c0a8     AF 7C 62 FC | 	wrlong	arg04, fp
0c0ac     14 5E 05 F1 | 	add	fp, #20
0c0b0     AF 00 68 FC | 	wrlong	#0, fp
0c0b4     1C 5E 85 F1 | 	sub	fp, #28
0c0b8     AF 84 02 FB | 	rdlong	local01, fp
0c0bc     28 5E 05 F1 | 	add	fp, #40
0c0c0     AF 84 62 FC | 	wrlong	local01, fp
0c0c4     20 5E 85 F1 | 	sub	fp, #32
0c0c8     AF 84 02 FB | 	rdlong	local01, fp
0c0cc     42 01 68 FC | 	wrlong	#0, local01
0c0d0     0C 5E 85 F1 | 	sub	fp, #12
0c0d4     AF 76 02 FB | 	rdlong	arg01, fp
0c0d8     14 5E 05 F1 | 	add	fp, #20
0c0dc     AF 78 02 F6 | 	mov	arg02, fp
0c0e0     18 5E 85 F1 | 	sub	fp, #24
0c0e4     38 F0 BF FD | 	call	#_ff_cc_validate_0371
0c0e8     14 5E 05 F1 | 	add	fp, #20
0c0ec     AF 30 62 FC | 	wrlong	result1, fp
0c0f0     18 87 02 F6 | 	mov	local02, result1
0c0f4     14 5E 85 F1 | 	sub	fp, #20
0c0f8     43 85 0A F6 | 	mov	local01, local02 wz
0c0fc     24 00 90 5D |  if_ne	jmp	#LR__0732
0c100     04 5E 05 F1 | 	add	fp, #4
0c104     AF 88 02 FB | 	rdlong	local03, fp
0c108     11 88 06 F1 | 	add	local03, #17
0c10c     44 8B C2 FA | 	rdbyte	local04, local03
0c110     10 5E 05 F1 | 	add	fp, #16
0c114     AF 8A 62 FC | 	wrlong	local04, fp
0c118     14 5E 85 F1 | 	sub	fp, #20
0c11c     45 8D 0A F6 | 	mov	local05, local04 wz
0c120     10 00 90 AD |  if_e	jmp	#LR__0733
0c124                 | LR__0732
0c124     14 5E 05 F1 | 	add	fp, #20
0c128     AF 30 02 FB | 	rdlong	result1, fp
0c12c     14 5E 85 F1 | 	sub	fp, #20
0c130     6C 07 90 FD | 	jmp	#LR__0757
0c134                 | LR__0733
0c134     04 5E 05 F1 | 	add	fp, #4
0c138     AF 86 02 FB | 	rdlong	local02, fp
0c13c     04 5E 85 F1 | 	sub	fp, #4
0c140     10 86 06 F1 | 	add	local02, #16
0c144     43 85 C2 FA | 	rdbyte	local01, local02
0c148     02 84 CE F7 | 	test	local01, #2 wz
0c14c     07 30 06 A6 |  if_e	mov	result1, #7
0c150     4C 07 90 AD |  if_e	jmp	#LR__0757
0c154     04 5E 05 F1 | 	add	fp, #4
0c158     AF 8E 02 FB | 	rdlong	local06, fp
0c15c     47 91 02 F6 | 	mov	local07, local06
0c160     14 90 06 F1 | 	add	local07, #20
0c164     48 89 02 FB | 	rdlong	local03, local07
0c168     08 5E 05 F1 | 	add	fp, #8
0c16c     AF 92 02 FB | 	rdlong	local08, fp
0c170     49 8B 02 F6 | 	mov	local04, local08
0c174     49 89 02 F1 | 	add	local03, local08
0c178     08 5E 85 F1 | 	sub	fp, #8
0c17c     AF 94 02 FB | 	rdlong	local09, fp
0c180     04 5E 85 F1 | 	sub	fp, #4
0c184     4A 97 02 F6 | 	mov	local10, local09
0c188     14 96 06 F1 | 	add	local10, #20
0c18c     4B 99 02 FB | 	rdlong	local11, local10
0c190     14 96 86 F1 | 	sub	local10, #20
0c194     4C 9B 02 F6 | 	mov	local12, local11
0c198     4D 89 1A F2 | 	cmp	local03, local12 wcz
0c19c     24 00 90 3D |  if_ae	jmp	#LR__0734
0c1a0     04 5E 05 F1 | 	add	fp, #4
0c1a4     AF 86 02 FB | 	rdlong	local02, fp
0c1a8     01 84 66 F6 | 	neg	local01, #1
0c1ac     14 86 06 F1 | 	add	local02, #20
0c1b0     43 89 02 FB | 	rdlong	local03, local02
0c1b4     44 85 82 F1 | 	sub	local01, local03
0c1b8     08 5E 05 F1 | 	add	fp, #8
0c1bc     AF 84 62 FC | 	wrlong	local01, fp
0c1c0     0C 5E 85 F1 | 	sub	fp, #12
0c1c4                 | LR__0734
0c1c4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
0c1c4                 | ' 	}
0c1c4                 | ' 
0c1c4                 | ' 	for ( ; btw;
0c1c4                 | LR__0735
0c1c4     0C 5E 05 F1 | 	add	fp, #12
0c1c8     AF 86 02 FB | 	rdlong	local02, fp
0c1cc     0C 5E 85 F1 | 	sub	fp, #12
0c1d0     43 85 0A F6 | 	mov	local01, local02 wz
0c1d4     A0 06 90 AD |  if_e	jmp	#LR__0756
0c1d8     04 5E 05 F1 | 	add	fp, #4
0c1dc     AF 9C 02 FB | 	rdlong	local13, fp
0c1e0     04 5E 85 F1 | 	sub	fp, #4
0c1e4     14 9C 06 F1 | 	add	local13, #20
0c1e8     4E 91 02 FB | 	rdlong	local07, local13
0c1ec     FF 91 CE F7 | 	test	local07, #511 wz
0c1f0     64 04 90 5D |  if_ne	jmp	#LR__0750
0c1f4     04 5E 05 F1 | 	add	fp, #4
0c1f8     AF 88 02 FB | 	rdlong	local03, fp
0c1fc     14 88 06 F1 | 	add	local03, #20
0c200     44 9D 02 FB | 	rdlong	local13, local03
0c204     09 9C 46 F0 | 	shr	local13, #9
0c208     14 5E 05 F1 | 	add	fp, #20
0c20c     AF 92 02 FB | 	rdlong	local08, fp
0c210     0A 92 06 F1 | 	add	local08, #10
0c214     49 95 E2 FA | 	rdword	local09, local08
0c218     4A 8B 02 F6 | 	mov	local04, local09
0c21c     0F 8A 46 F7 | 	zerox	local04, #15
0c220     01 8A 86 F1 | 	sub	local04, #1
0c224     45 9D 02 F5 | 	and	local13, local04
0c228     14 5E 05 F1 | 	add	fp, #20
0c22c     AF 9C 62 FC | 	wrlong	local13, fp
0c230     AF 9C 0A FB | 	rdlong	local13, fp wz
0c234     2C 5E 85 F1 | 	sub	fp, #44
0c238     4C 01 90 5D |  if_ne	jmp	#LR__0741
0c23c     04 5E 05 F1 | 	add	fp, #4
0c240     AF 9C 02 FB | 	rdlong	local13, fp
0c244     04 5E 85 F1 | 	sub	fp, #4
0c248     14 9C 06 F1 | 	add	local13, #20
0c24c     4E 91 0A FB | 	rdlong	local07, local13 wz
0c250     48 00 90 5D |  if_ne	jmp	#LR__0736
0c254     04 5E 05 F1 | 	add	fp, #4
0c258     AF 9C 02 FB | 	rdlong	local13, fp
0c25c     08 9C 06 F1 | 	add	local13, #8
0c260     4E 91 02 FB | 	rdlong	local07, local13
0c264     18 5E 05 F1 | 	add	fp, #24
0c268     AF 90 62 FC | 	wrlong	local07, fp
0c26c     AF 9C 0A FB | 	rdlong	local13, fp wz
0c270     1C 5E 85 F1 | 	sub	fp, #28
0c274     50 00 90 5D |  if_ne	jmp	#LR__0737
0c278     04 5E 05 F1 | 	add	fp, #4
0c27c     AF 76 02 FB | 	rdlong	arg01, fp
0c280     04 5E 85 F1 | 	sub	fp, #4
0c284     00 78 06 F6 | 	mov	arg02, #0
0c288     84 D4 BF FD | 	call	#_ff_cc_create_chain_0295
0c28c     1C 5E 05 F1 | 	add	fp, #28
0c290     AF 30 62 FC | 	wrlong	result1, fp
0c294     1C 5E 85 F1 | 	sub	fp, #28
0c298     2C 00 90 FD | 	jmp	#LR__0737
0c29c                 | LR__0736
0c29c     04 5E 05 F1 | 	add	fp, #4
0c2a0     AF 76 02 FB | 	rdlong	arg01, fp
0c2a4     3B 8D 02 F6 | 	mov	local05, arg01
0c2a8     04 5E 85 F1 | 	sub	fp, #4
0c2ac     18 8C 06 F1 | 	add	local05, #24
0c2b0     46 79 02 FB | 	rdlong	arg02, local05
0c2b4     58 D4 BF FD | 	call	#_ff_cc_create_chain_0295
0c2b8     18 95 02 F6 | 	mov	local09, result1
0c2bc     1C 5E 05 F1 | 	add	fp, #28
0c2c0     AF 94 62 FC | 	wrlong	local09, fp
0c2c4     1C 5E 85 F1 | 	sub	fp, #28
0c2c8                 | LR__0737
0c2c8     1C 5E 05 F1 | 	add	fp, #28
0c2cc     AF 9C 0A FB | 	rdlong	local13, fp wz
0c2d0     1C 5E 85 F1 | 	sub	fp, #28
0c2d4     A0 05 90 AD |  if_e	jmp	#LR__0756
0c2d8     1C 5E 05 F1 | 	add	fp, #28
0c2dc     AF 9C 02 FB | 	rdlong	local13, fp
0c2e0     1C 5E 85 F1 | 	sub	fp, #28
0c2e4     01 9C 0E F2 | 	cmp	local13, #1 wz
0c2e8     1C 00 90 5D |  if_ne	jmp	#LR__0738
0c2ec     04 5E 05 F1 | 	add	fp, #4
0c2f0     AF 9C 02 FB | 	rdlong	local13, fp
0c2f4     04 5E 85 F1 | 	sub	fp, #4
0c2f8     11 9C 06 F1 | 	add	local13, #17
0c2fc     4E 05 48 FC | 	wrbyte	#2, local13
0c300     02 30 06 F6 | 	mov	result1, #2
0c304     98 05 90 FD | 	jmp	#LR__0757
0c308                 | LR__0738
0c308     1C 5E 05 F1 | 	add	fp, #28
0c30c     AF 9C 02 FB | 	rdlong	local13, fp
0c310     1C 5E 85 F1 | 	sub	fp, #28
0c314     FF FF 7F FF 
0c318     FF 9D 0E F2 | 	cmp	local13, ##-1 wz
0c31c     1C 00 90 5D |  if_ne	jmp	#LR__0739
0c320     04 5E 05 F1 | 	add	fp, #4
0c324     AF 9C 02 FB | 	rdlong	local13, fp
0c328     04 5E 85 F1 | 	sub	fp, #4
0c32c     11 9C 06 F1 | 	add	local13, #17
0c330     4E 03 48 FC | 	wrbyte	#1, local13
0c334     01 30 06 F6 | 	mov	result1, #1
0c338     64 05 90 FD | 	jmp	#LR__0757
0c33c                 | LR__0739
0c33c     04 5E 05 F1 | 	add	fp, #4
0c340     AF 9C 02 FB | 	rdlong	local13, fp
0c344     18 5E 05 F1 | 	add	fp, #24
0c348     AF 90 02 FB | 	rdlong	local07, fp
0c34c     18 9C 06 F1 | 	add	local13, #24
0c350     4E 91 62 FC | 	wrlong	local07, local13
0c354     18 5E 85 F1 | 	sub	fp, #24
0c358     AF 9C 02 FB | 	rdlong	local13, fp
0c35c     04 5E 85 F1 | 	sub	fp, #4
0c360     08 9C 06 F1 | 	add	local13, #8
0c364     4E 91 0A FB | 	rdlong	local07, local13 wz
0c368     1C 00 90 5D |  if_ne	jmp	#LR__0740
0c36c     04 5E 05 F1 | 	add	fp, #4
0c370     AF 9C 02 FB | 	rdlong	local13, fp
0c374     18 5E 05 F1 | 	add	fp, #24
0c378     AF 90 02 FB | 	rdlong	local07, fp
0c37c     1C 5E 85 F1 | 	sub	fp, #28
0c380     08 9C 06 F1 | 	add	local13, #8
0c384     4E 91 62 FC | 	wrlong	local07, local13
0c388                 | LR__0740
0c388                 | LR__0741
0c388     18 5E 05 F1 | 	add	fp, #24
0c38c     AF 9C 02 FB | 	rdlong	local13, fp
0c390     14 5E 85 F1 | 	sub	fp, #20
0c394     AF 90 02 FB | 	rdlong	local07, fp
0c398     04 5E 85 F1 | 	sub	fp, #4
0c39c     2C 9C 06 F1 | 	add	local13, #44
0c3a0     4E 8D 02 FB | 	rdlong	local05, local13
0c3a4     1C 90 06 F1 | 	add	local07, #28
0c3a8     48 93 02 FB | 	rdlong	local08, local07
0c3ac     49 8D 0A F2 | 	cmp	local05, local08 wz
0c3b0     34 00 90 5D |  if_ne	jmp	#LR__0742
0c3b4     18 5E 05 F1 | 	add	fp, #24
0c3b8     AF 76 02 FB | 	rdlong	arg01, fp
0c3bc     18 5E 85 F1 | 	sub	fp, #24
0c3c0     5C CA BF FD | 	call	#_ff_cc_sync_window_0271
0c3c4     00 30 0E F2 | 	cmp	result1, #0 wz
0c3c8     1C 00 90 AD |  if_e	jmp	#LR__0742
0c3cc     04 5E 05 F1 | 	add	fp, #4
0c3d0     AF 9C 02 FB | 	rdlong	local13, fp
0c3d4     04 5E 85 F1 | 	sub	fp, #4
0c3d8     11 9C 06 F1 | 	add	local13, #17
0c3dc     4E 03 48 FC | 	wrbyte	#1, local13
0c3e0     01 30 06 F6 | 	mov	result1, #1
0c3e4     B8 04 90 FD | 	jmp	#LR__0757
0c3e8                 | LR__0742
0c3e8     18 5E 05 F1 | 	add	fp, #24
0c3ec     AF 76 02 FB | 	rdlong	arg01, fp
0c3f0     14 5E 85 F1 | 	sub	fp, #20
0c3f4     AF 90 02 FB | 	rdlong	local07, fp
0c3f8     04 5E 85 F1 | 	sub	fp, #4
0c3fc     18 90 06 F1 | 	add	local07, #24
0c400     48 79 02 FB | 	rdlong	arg02, local07
0c404     E8 CC BF FD | 	call	#_ff_cc_clst2sect_0276
0c408     20 5E 05 F1 | 	add	fp, #32
0c40c     AF 30 62 FC | 	wrlong	result1, fp
0c410     AF 9C 0A FB | 	rdlong	local13, fp wz
0c414     20 5E 85 F1 | 	sub	fp, #32
0c418     1C 00 90 5D |  if_ne	jmp	#LR__0743
0c41c     04 5E 05 F1 | 	add	fp, #4
0c420     AF 9C 02 FB | 	rdlong	local13, fp
0c424     04 5E 85 F1 | 	sub	fp, #4
0c428     11 9C 06 F1 | 	add	local13, #17
0c42c     4E 05 48 FC | 	wrbyte	#2, local13
0c430     02 30 06 F6 | 	mov	result1, #2
0c434     68 04 90 FD | 	jmp	#LR__0757
0c438                 | LR__0743
0c438     20 5E 05 F1 | 	add	fp, #32
0c43c     AF 9C 02 FB | 	rdlong	local13, fp
0c440     0C 5E 05 F1 | 	add	fp, #12
0c444     AF 90 02 FB | 	rdlong	local07, fp
0c448     48 9D 02 F1 | 	add	local13, local07
0c44c     0C 5E 85 F1 | 	sub	fp, #12
0c450     AF 9C 62 FC | 	wrlong	local13, fp
0c454     14 5E 85 F1 | 	sub	fp, #20
0c458     AF 9C 02 FB | 	rdlong	local13, fp
0c45c     09 9C 46 F0 | 	shr	local13, #9
0c460     1C 5E 05 F1 | 	add	fp, #28
0c464     AF 9C 62 FC | 	wrlong	local13, fp
0c468     28 5E 85 F1 | 	sub	fp, #40
0c46c     00 9C 1E F2 | 	cmp	local13, #0 wcz
0c470     50 01 90 ED |  if_be	jmp	#LR__0747
0c474     2C 5E 05 F1 | 	add	fp, #44
0c478     AF 9C 02 FB | 	rdlong	local13, fp
0c47c     04 5E 85 F1 | 	sub	fp, #4
0c480     AF 90 02 FB | 	rdlong	local07, fp
0c484     48 9D 02 F1 | 	add	local13, local07
0c488     10 5E 85 F1 | 	sub	fp, #16
0c48c     AF 8A 02 FB | 	rdlong	local04, fp
0c490     18 5E 85 F1 | 	sub	fp, #24
0c494     0A 8A 06 F1 | 	add	local04, #10
0c498     45 8D E2 FA | 	rdword	local05, local04
0c49c     46 9D 1A F2 | 	cmp	local13, local05 wcz
0c4a0     28 00 90 ED |  if_be	jmp	#LR__0744
0c4a4     18 5E 05 F1 | 	add	fp, #24
0c4a8     AF 88 02 FB | 	rdlong	local03, fp
0c4ac     0A 88 06 F1 | 	add	local03, #10
0c4b0     44 9D E2 FA | 	rdword	local13, local03
0c4b4     14 5E 05 F1 | 	add	fp, #20
0c4b8     AF 8C 02 FB | 	rdlong	local05, fp
0c4bc     46 9D 82 F1 | 	sub	local13, local05
0c4c0     04 5E 85 F1 | 	sub	fp, #4
0c4c4     AF 9C 62 FC | 	wrlong	local13, fp
0c4c8     28 5E 85 F1 | 	sub	fp, #40
0c4cc                 | LR__0744
0c4cc     18 5E 05 F1 | 	add	fp, #24
0c4d0     AF 9C 02 FB | 	rdlong	local13, fp
0c4d4     01 9C 06 F1 | 	add	local13, #1
0c4d8     4E 77 C2 FA | 	rdbyte	arg01, local13
0c4dc     18 5E 05 F1 | 	add	fp, #24
0c4e0     AF 78 02 FB | 	rdlong	arg02, fp
0c4e4     10 5E 85 F1 | 	sub	fp, #16
0c4e8     AF 7A 02 FB | 	rdlong	arg03, fp
0c4ec     08 5E 05 F1 | 	add	fp, #8
0c4f0     AF 7C 02 FB | 	rdlong	arg04, fp
0c4f4     28 5E 85 F1 | 	sub	fp, #40
0c4f8     28 C4 BF FD | 	call	#_ff_cc_disk_write
0c4fc     00 30 0E F2 | 	cmp	result1, #0 wz
0c500     1C 00 90 AD |  if_e	jmp	#LR__0745
0c504     04 5E 05 F1 | 	add	fp, #4
0c508     AF 9C 02 FB | 	rdlong	local13, fp
0c50c     04 5E 85 F1 | 	sub	fp, #4
0c510     11 9C 06 F1 | 	add	local13, #17
0c514     4E 03 48 FC | 	wrbyte	#1, local13
0c518     01 30 06 F6 | 	mov	result1, #1
0c51c     80 03 90 FD | 	jmp	#LR__0757
0c520                 | LR__0745
0c520     18 5E 05 F1 | 	add	fp, #24
0c524     AF 88 02 FB | 	rdlong	local03, fp
0c528     2C 88 06 F1 | 	add	local03, #44
0c52c     44 9D 02 FB | 	rdlong	local13, local03
0c530     08 5E 05 F1 | 	add	fp, #8
0c534     AF 8C 02 FB | 	rdlong	local05, fp
0c538     46 9D 82 F1 | 	sub	local13, local05
0c53c     08 5E 05 F1 | 	add	fp, #8
0c540     AF 92 02 FB | 	rdlong	local08, fp
0c544     28 5E 85 F1 | 	sub	fp, #40
0c548     49 9D 1A F2 | 	cmp	local13, local08 wcz
0c54c     58 00 90 3D |  if_ae	jmp	#LR__0746
0c550     18 5E 05 F1 | 	add	fp, #24
0c554     AF 76 02 FB | 	rdlong	arg01, fp
0c558     30 76 06 F1 | 	add	arg01, #48
0c55c     18 5E 05 F1 | 	add	fp, #24
0c560     AF 78 02 FB | 	rdlong	arg02, fp
0c564     18 5E 85 F1 | 	sub	fp, #24
0c568     AF 96 02 FB | 	rdlong	local10, fp
0c56c     2C 96 06 F1 | 	add	local10, #44
0c570     4B 9F 02 FB | 	rdlong	local14, local10
0c574     08 5E 05 F1 | 	add	fp, #8
0c578     AF 98 02 FB | 	rdlong	local11, fp
0c57c     20 5E 85 F1 | 	sub	fp, #32
0c580     4C 9F 82 F1 | 	sub	local14, local11
0c584     09 9E 66 F0 | 	shl	local14, #9
0c588     4F 79 02 F1 | 	add	arg02, local14
0c58c     09 7A C6 F9 | 	decod	arg03, #9
0c590     FC C7 BF FD | 	call	#_ff_cc_mem_cpy_0260
0c594     18 5E 05 F1 | 	add	fp, #24
0c598     AF 9C 02 FB | 	rdlong	local13, fp
0c59c     18 5E 85 F1 | 	sub	fp, #24
0c5a0     03 9C 06 F1 | 	add	local13, #3
0c5a4     4E 01 48 FC | 	wrbyte	#0, local13
0c5a8                 | LR__0746
0c5a8     28 5E 05 F1 | 	add	fp, #40
0c5ac     AF 9C 02 FB | 	rdlong	local13, fp
0c5b0     09 9C 66 F0 | 	shl	local13, #9
0c5b4     04 5E 85 F1 | 	sub	fp, #4
0c5b8     AF 9C 62 FC | 	wrlong	local13, fp
0c5bc     24 5E 85 F1 | 	sub	fp, #36
0c5c0                 | ' 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ),  ((UINT) 512 ) );
0c5c0                 | ' 					fs->wflag = 0;
0c5c0                 | ' 				}
0c5c0                 | ' #line 4067 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c5c0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
0c5c0                 | ' 				continue;
0c5c0     74 01 90 FD | 	jmp	#LR__0753
0c5c4                 | LR__0747
0c5c4     04 5E 05 F1 | 	add	fp, #4
0c5c8     AF 9C 02 FB | 	rdlong	local13, fp
0c5cc     4E 91 02 F6 | 	mov	local07, local13
0c5d0     04 5E 85 F1 | 	sub	fp, #4
0c5d4     14 9C 06 F1 | 	add	local13, #20
0c5d8     4E 8D 02 FB | 	rdlong	local05, local13
0c5dc     0C 90 06 F1 | 	add	local07, #12
0c5e0     48 93 02 FB | 	rdlong	local08, local07
0c5e4     49 8D 1A F2 | 	cmp	local05, local08 wcz
0c5e8     50 00 90 CD |  if_b	jmp	#LR__0749
0c5ec     18 5E 05 F1 | 	add	fp, #24
0c5f0     AF 76 02 FB | 	rdlong	arg01, fp
0c5f4     18 5E 85 F1 | 	sub	fp, #24
0c5f8     24 C8 BF FD | 	call	#_ff_cc_sync_window_0271
0c5fc     00 30 0E F2 | 	cmp	result1, #0 wz
0c600     1C 00 90 AD |  if_e	jmp	#LR__0748
0c604     04 5E 05 F1 | 	add	fp, #4
0c608     AF 9C 02 FB | 	rdlong	local13, fp
0c60c     04 5E 85 F1 | 	sub	fp, #4
0c610     11 9C 06 F1 | 	add	local13, #17
0c614     4E 03 48 FC | 	wrbyte	#1, local13
0c618     01 30 06 F6 | 	mov	result1, #1
0c61c     80 02 90 FD | 	jmp	#LR__0757
0c620                 | LR__0748
0c620     18 5E 05 F1 | 	add	fp, #24
0c624     AF 9C 02 FB | 	rdlong	local13, fp
0c628     08 5E 05 F1 | 	add	fp, #8
0c62c     AF 90 02 FB | 	rdlong	local07, fp
0c630     20 5E 85 F1 | 	sub	fp, #32
0c634     2C 9C 06 F1 | 	add	local13, #44
0c638     4E 91 62 FC | 	wrlong	local07, local13
0c63c                 | LR__0749
0c63c     04 5E 05 F1 | 	add	fp, #4
0c640     AF 9C 02 FB | 	rdlong	local13, fp
0c644     1C 5E 05 F1 | 	add	fp, #28
0c648     AF 90 02 FB | 	rdlong	local07, fp
0c64c     20 5E 85 F1 | 	sub	fp, #32
0c650     1C 9C 06 F1 | 	add	local13, #28
0c654     4E 91 62 FC | 	wrlong	local07, local13
0c658                 | LR__0750
0c658     04 5E 05 F1 | 	add	fp, #4
0c65c     AF 88 02 FB | 	rdlong	local03, fp
0c660     14 88 06 F1 | 	add	local03, #20
0c664     44 8F 02 FB | 	rdlong	local06, local03
0c668     FF 8F 06 F5 | 	and	local06, #511
0c66c     09 9C C6 F9 | 	decod	local13, #9
0c670     47 9D 82 F1 | 	sub	local13, local06
0c674     20 5E 05 F1 | 	add	fp, #32
0c678     AF 9C 62 FC | 	wrlong	local13, fp
0c67c     18 5E 85 F1 | 	sub	fp, #24
0c680     AF 90 02 FB | 	rdlong	local07, fp
0c684     0C 5E 85 F1 | 	sub	fp, #12
0c688     48 9D 1A F2 | 	cmp	local13, local07 wcz
0c68c     14 00 90 ED |  if_be	jmp	#LR__0751
0c690     0C 5E 05 F1 | 	add	fp, #12
0c694     AF 9C 02 FB | 	rdlong	local13, fp
0c698     18 5E 05 F1 | 	add	fp, #24
0c69c     AF 9C 62 FC | 	wrlong	local13, fp
0c6a0     24 5E 85 F1 | 	sub	fp, #36
0c6a4                 | LR__0751
0c6a4     18 5E 05 F1 | 	add	fp, #24
0c6a8     AF 76 02 FB | 	rdlong	arg01, fp
0c6ac     14 5E 85 F1 | 	sub	fp, #20
0c6b0     AF 90 02 FB | 	rdlong	local07, fp
0c6b4     04 5E 85 F1 | 	sub	fp, #4
0c6b8     1C 90 06 F1 | 	add	local07, #28
0c6bc     48 79 02 FB | 	rdlong	arg02, local07
0c6c0     34 C8 BF FD | 	call	#_ff_cc_move_window_0273
0c6c4     00 30 0E F2 | 	cmp	result1, #0 wz
0c6c8     1C 00 90 AD |  if_e	jmp	#LR__0752
0c6cc     04 5E 05 F1 | 	add	fp, #4
0c6d0     AF 9C 02 FB | 	rdlong	local13, fp
0c6d4     04 5E 85 F1 | 	sub	fp, #4
0c6d8     11 9C 06 F1 | 	add	local13, #17
0c6dc     4E 03 48 FC | 	wrbyte	#1, local13
0c6e0     01 30 06 F6 | 	mov	result1, #1
0c6e4     B8 01 90 FD | 	jmp	#LR__0757
0c6e8                 | LR__0752
0c6e8     18 5E 05 F1 | 	add	fp, #24
0c6ec     AF 76 02 FB | 	rdlong	arg01, fp
0c6f0     30 76 06 F1 | 	add	arg01, #48
0c6f4     14 5E 85 F1 | 	sub	fp, #20
0c6f8     AF 8C 02 FB | 	rdlong	local05, fp
0c6fc     14 8C 06 F1 | 	add	local05, #20
0c700     46 9B 02 FB | 	rdlong	local12, local05
0c704     FF 9B 06 F5 | 	and	local12, #511
0c708     4D 77 02 F1 | 	add	arg01, local12
0c70c     2C 5E 05 F1 | 	add	fp, #44
0c710     AF 78 02 FB | 	rdlong	arg02, fp
0c714     0C 5E 85 F1 | 	sub	fp, #12
0c718     AF 7A 02 FB | 	rdlong	arg03, fp
0c71c     24 5E 85 F1 | 	sub	fp, #36
0c720     6C C6 BF FD | 	call	#_ff_cc_mem_cpy_0260
0c724     18 5E 05 F1 | 	add	fp, #24
0c728     AF 9C 02 FB | 	rdlong	local13, fp
0c72c     18 5E 85 F1 | 	sub	fp, #24
0c730     03 9C 06 F1 | 	add	local13, #3
0c734     4E 03 48 FC | 	wrbyte	#1, local13
0c738                 | LR__0753
0c738     0C 5E 05 F1 | 	add	fp, #12
0c73c     AF 9C 02 FB | 	rdlong	local13, fp
0c740     18 5E 05 F1 | 	add	fp, #24
0c744     AF 8E 02 FB | 	rdlong	local06, fp
0c748     47 9D 82 F1 | 	sub	local13, local06
0c74c     18 5E 85 F1 | 	sub	fp, #24
0c750     AF 9C 62 FC | 	wrlong	local13, fp
0c754     04 5E 05 F1 | 	add	fp, #4
0c758     AF 8C 02 FB | 	rdlong	local05, fp
0c75c     46 97 02 F6 | 	mov	local10, local05
0c760     4B 93 02 FB | 	rdlong	local08, local10
0c764     14 5E 05 F1 | 	add	fp, #20
0c768     AF 98 02 FB | 	rdlong	local11, fp
0c76c     4C 9B 02 F6 | 	mov	local12, local11
0c770     4C 93 02 F1 | 	add	local08, local11
0c774     46 93 62 FC | 	wrlong	local08, local05
0c778     0C 5E 05 F1 | 	add	fp, #12
0c77c     AF A0 02 FB | 	rdlong	local15, fp
0c780     50 A3 02 F6 | 	mov	local16, local15
0c784     0C 5E 85 F1 | 	sub	fp, #12
0c788     AF A4 02 FB | 	rdlong	local17, fp
0c78c     52 9F 02 F6 | 	mov	local14, local17
0c790     52 A3 02 F1 | 	add	local16, local17
0c794     0C 5E 05 F1 | 	add	fp, #12
0c798     AF A2 62 FC | 	wrlong	local16, fp
0c79c     2C 5E 85 F1 | 	sub	fp, #44
0c7a0     AF A6 02 FB | 	rdlong	local18, fp
0c7a4     53 A9 02 F6 | 	mov	local19, local18
0c7a8     53 AB 02 F6 | 	mov	local20, local18
0c7ac     55 AD 02 F6 | 	mov	local21, local20
0c7b0     14 AC 06 F1 | 	add	local21, #20
0c7b4     56 AF 02 FB | 	rdlong	local22, local21
0c7b8     14 AC 86 F1 | 	sub	local21, #20
0c7bc     57 B1 02 F6 | 	mov	local23, local22
0c7c0     20 5E 05 F1 | 	add	fp, #32
0c7c4     AF B2 02 FB | 	rdlong	local24, fp
0c7c8     59 B5 02 F6 | 	mov	local25, local24
0c7cc     59 B1 02 F1 | 	add	local23, local24
0c7d0     14 A8 06 F1 | 	add	local19, #20
0c7d4     54 B1 62 FC | 	wrlong	local23, local19
0c7d8     14 A8 86 F1 | 	sub	local19, #20
0c7dc     20 5E 85 F1 | 	sub	fp, #32
0c7e0     AF B6 02 FB | 	rdlong	local26, fp
0c7e4     5B B9 02 F6 | 	mov	local27, local26
0c7e8     5B BB 02 F6 | 	mov	local28, local26
0c7ec     5D BD 02 F6 | 	mov	local29, local28
0c7f0     5B BF 02 F6 | 	mov	local30, local26
0c7f4     04 5E 85 F1 | 	sub	fp, #4
0c7f8     5F C1 02 F6 | 	mov	local31, local30
0c7fc     14 BC 06 F1 | 	add	local29, #20
0c800     5E C3 02 FB | 	rdlong	local32, local29
0c804     14 BC 86 F1 | 	sub	local29, #20
0c808     61 C5 02 F6 | 	mov	local33, local32
0c80c     0C C0 06 F1 | 	add	local31, #12
0c810     60 C7 02 FB | 	rdlong	local34, local31
0c814     0C C0 86 F1 | 	sub	local31, #12
0c818     63 C9 02 F6 | 	mov	local35, local34
0c81c     64 C5 1A F2 | 	cmp	local33, local35 wcz
0c820     24 00 90 ED |  if_be	jmp	#LR__0754
0c824     04 5E 05 F1 | 	add	fp, #4
0c828     AF CA 02 FB | 	rdlong	local36, fp
0c82c     04 5E 85 F1 | 	sub	fp, #4
0c830     65 CD 02 F6 | 	mov	local37, local36
0c834     14 CC 06 F1 | 	add	local37, #20
0c838     66 CF 02 FB | 	rdlong	local38, local37
0c83c     14 CC 86 F1 | 	sub	local37, #20
0c840     67 D1 02 F6 | 	mov	local39, local38
0c844     20 00 90 FD | 	jmp	#LR__0755
0c848                 | LR__0754
0c848     04 5E 05 F1 | 	add	fp, #4
0c84c     AF D2 02 FB | 	rdlong	local40, fp
0c850     04 5E 85 F1 | 	sub	fp, #4
0c854     69 D5 02 F6 | 	mov	local41, local40
0c858     0C D4 06 F1 | 	add	local41, #12
0c85c     6A D7 02 FB | 	rdlong	local42, local41
0c860     0C D4 86 F1 | 	sub	local41, #12
0c864     6B D1 02 F6 | 	mov	local39, local42
0c868                 | LR__0755
0c868     0C B8 06 F1 | 	add	local27, #12
0c86c     5C D1 62 FC | 	wrlong	local39, local27
0c870     0C B8 86 F1 | 	sub	local27, #12
0c874     4C F9 9F FD | 	jmp	#LR__0735
0c878                 | LR__0756
0c878     04 5E 05 F1 | 	add	fp, #4
0c87c     AF 84 02 FB | 	rdlong	local01, fp
0c880     42 89 02 F6 | 	mov	local03, local01
0c884     04 5E 85 F1 | 	sub	fp, #4
0c888     10 88 06 F1 | 	add	local03, #16
0c88c     44 9D C2 FA | 	rdbyte	local13, local03
0c890     40 9C 46 F5 | 	or	local13, #64
0c894     10 84 06 F1 | 	add	local01, #16
0c898     42 9D 42 FC | 	wrbyte	local13, local01
0c89c                 | ' 		mem_cpy(fs->win + fp->fptr %  ((UINT) 512 ) , wbuff, wcnt);
0c89c                 | ' 		fs->wflag = 1;
0c89c                 | ' #line 4094 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c89c                 | ' 	}
0c89c                 | ' 
0c89c                 | ' 	fp->flag |=  0x40 ;
0c89c                 | ' 
0c89c                 | ' 	return FR_OK ;
0c89c     00 30 06 F6 | 	mov	result1, #0
0c8a0                 | LR__0757
0c8a0     AF F0 03 F6 | 	mov	ptra, fp
0c8a4     BF 00 A0 FD | 	call	#popregs_
0c8a8                 | _ff_cc_f_write_ret
0c8a8     2D 00 64 FD | 	ret
0c8ac                 | 
0c8ac                 | _ff_cc_f_sync
0c8ac     06 5A 05 F6 | 	mov	COUNT_, #6
0c8b0     B0 00 A0 FD | 	call	#pushregs_
0c8b4     18 F0 07 F1 | 	add	ptra, #24
0c8b8     04 5E 05 F1 | 	add	fp, #4
0c8bc     AF 76 62 FC | 	wrlong	arg01, fp
0c8c0     08 5E 05 F1 | 	add	fp, #8
0c8c4     AF 78 02 F6 | 	mov	arg02, fp
0c8c8     0C 5E 85 F1 | 	sub	fp, #12
0c8cc     50 E8 BF FD | 	call	#_ff_cc_validate_0371
0c8d0     18 85 02 F6 | 	mov	local01, result1
0c8d4     08 5E 05 F1 | 	add	fp, #8
0c8d8     AF 84 62 FC | 	wrlong	local01, fp
0c8dc     AF 86 0A FB | 	rdlong	local02, fp wz
0c8e0     08 5E 85 F1 | 	sub	fp, #8
0c8e4     58 01 90 5D |  if_ne	jmp	#LR__0760
0c8e8     04 5E 05 F1 | 	add	fp, #4
0c8ec     AF 88 02 FB | 	rdlong	local03, fp
0c8f0     04 5E 85 F1 | 	sub	fp, #4
0c8f4     10 88 06 F1 | 	add	local03, #16
0c8f8     44 87 C2 FA | 	rdbyte	local02, local03
0c8fc     40 86 CE F7 | 	test	local02, #64 wz
0c900     3C 01 90 AD |  if_e	jmp	#LR__0759
0c904     10 5E 05 F1 | 	add	fp, #16
0c908     80 10 A7 FF 
0c90c     AF 00 68 FC | 	wrlong	##1310785536, fp
0c910     04 5E 85 F1 | 	sub	fp, #4
0c914     AF 76 02 FB | 	rdlong	arg01, fp
0c918     08 5E 85 F1 | 	sub	fp, #8
0c91c     AF 8A 02 FB | 	rdlong	local04, fp
0c920     04 5E 85 F1 | 	sub	fp, #4
0c924     20 8A 06 F1 | 	add	local04, #32
0c928     45 79 02 FB | 	rdlong	arg02, local04
0c92c     C8 C5 BF FD | 	call	#_ff_cc_move_window_0273
0c930     08 5E 05 F1 | 	add	fp, #8
0c934     AF 30 62 FC | 	wrlong	result1, fp
0c938     AF 86 0A FB | 	rdlong	local02, fp wz
0c93c     08 5E 85 F1 | 	sub	fp, #8
0c940     FC 00 90 5D |  if_ne	jmp	#LR__0758
0c944     04 5E 05 F1 | 	add	fp, #4
0c948     AF 86 02 FB | 	rdlong	local02, fp
0c94c     24 86 06 F1 | 	add	local02, #36
0c950     43 87 02 FB | 	rdlong	local02, local02
0c954     10 5E 05 F1 | 	add	fp, #16
0c958     AF 86 62 FC | 	wrlong	local02, fp
0c95c     43 8D 02 F6 | 	mov	local05, local02
0c960     0B 8C 06 F1 | 	add	local05, #11
0c964     46 8B C2 FA | 	rdbyte	local04, local05
0c968     20 8A 46 F5 | 	or	local04, #32
0c96c     0B 86 06 F1 | 	add	local02, #11
0c970     43 8B 42 FC | 	wrbyte	local04, local02
0c974     10 5E 85 F1 | 	sub	fp, #16
0c978     AF 86 02 FB | 	rdlong	local02, fp
0c97c     43 77 02 FB | 	rdlong	arg01, local02
0c980     10 5E 05 F1 | 	add	fp, #16
0c984     AF 78 02 FB | 	rdlong	arg02, fp
0c988     10 5E 85 F1 | 	sub	fp, #16
0c98c     AF 8E 02 FB | 	rdlong	local06, fp
0c990     04 5E 85 F1 | 	sub	fp, #4
0c994     08 8E 06 F1 | 	add	local06, #8
0c998     47 7B 02 FB | 	rdlong	arg03, local06
0c99c     2C D5 BF FD | 	call	#_ff_cc_st_clust_0315
0c9a0     14 5E 05 F1 | 	add	fp, #20
0c9a4     AF 76 02 FB | 	rdlong	arg01, fp
0c9a8     1C 76 06 F1 | 	add	arg01, #28
0c9ac     10 5E 85 F1 | 	sub	fp, #16
0c9b0     AF 8C 02 FB | 	rdlong	local05, fp
0c9b4     04 5E 85 F1 | 	sub	fp, #4
0c9b8     0C 8C 06 F1 | 	add	local05, #12
0c9bc     46 79 02 FB | 	rdlong	arg02, local05
0c9c0     A0 C3 BF FD | 	call	#_ff_cc_st_dword_0257
0c9c4     14 5E 05 F1 | 	add	fp, #20
0c9c8     AF 76 02 FB | 	rdlong	arg01, fp
0c9cc     16 76 06 F1 | 	add	arg01, #22
0c9d0     04 5E 85 F1 | 	sub	fp, #4
0c9d4     AF 78 02 FB | 	rdlong	arg02, fp
0c9d8     10 5E 85 F1 | 	sub	fp, #16
0c9dc     84 C3 BF FD | 	call	#_ff_cc_st_dword_0257
0c9e0     14 5E 05 F1 | 	add	fp, #20
0c9e4     AF 76 02 FB | 	rdlong	arg01, fp
0c9e8     14 5E 85 F1 | 	sub	fp, #20
0c9ec     12 76 06 F1 | 	add	arg01, #18
0c9f0     00 78 06 F6 | 	mov	arg02, #0
0c9f4     48 C3 BF FD | 	call	#_ff_cc_st_word_0256
0c9f8     0C 5E 05 F1 | 	add	fp, #12
0c9fc     AF 86 02 FB | 	rdlong	local02, fp
0ca00     03 86 06 F1 | 	add	local02, #3
0ca04     43 03 48 FC | 	wrbyte	#1, local02
0ca08     AF 76 02 FB | 	rdlong	arg01, fp
0ca0c     0C 5E 85 F1 | 	sub	fp, #12
0ca10     60 C5 BF FD | 	call	#_ff_cc_sync_fs_0275
0ca14     08 5E 05 F1 | 	add	fp, #8
0ca18     AF 30 62 FC | 	wrlong	result1, fp
0ca1c     04 5E 85 F1 | 	sub	fp, #4
0ca20     AF 86 02 FB | 	rdlong	local02, fp
0ca24     43 8D 02 F6 | 	mov	local05, local02
0ca28     04 5E 85 F1 | 	sub	fp, #4
0ca2c     10 8C 06 F1 | 	add	local05, #16
0ca30     46 8B C2 FA | 	rdbyte	local04, local05
0ca34     BF 8A 06 F5 | 	and	local04, #191
0ca38     10 86 06 F1 | 	add	local02, #16
0ca3c     43 8B 42 FC | 	wrbyte	local04, local02
0ca40                 | LR__0758
0ca40                 | LR__0759
0ca40                 | LR__0760
0ca40                 | ' 					dir = fp->dir_ptr;
0ca40                 | ' 					dir[ 11 ] |=  0x20 ;
0ca40                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
0ca40                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
0ca40                 | ' 					st_dword(dir +  22 , tm);
0ca40                 | ' 					st_word(dir +  18 , 0);
0ca40                 | ' 					fs->wflag = 1;
0ca40                 | ' 					res = sync_fs(fs);
0ca40                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
0ca40                 | ' 				}
0ca40                 | ' 			}
0ca40                 | ' 		}
0ca40                 | ' 	}
0ca40                 | ' 
0ca40                 | ' 	return res ;
0ca40     08 5E 05 F1 | 	add	fp, #8
0ca44     AF 30 02 FB | 	rdlong	result1, fp
0ca48     08 5E 85 F1 | 	sub	fp, #8
0ca4c     AF F0 03 F6 | 	mov	ptra, fp
0ca50     BF 00 A0 FD | 	call	#popregs_
0ca54                 | _ff_cc_f_sync_ret
0ca54     2D 00 64 FD | 	ret
0ca58                 | 
0ca58                 | _ff_cc_f_close
0ca58     02 5A 05 F6 | 	mov	COUNT_, #2
0ca5c     B0 00 A0 FD | 	call	#pushregs_
0ca60     10 F0 07 F1 | 	add	ptra, #16
0ca64     04 5E 05 F1 | 	add	fp, #4
0ca68     AF 76 62 FC | 	wrlong	arg01, fp
0ca6c     04 5E 85 F1 | 	sub	fp, #4
0ca70     38 FE BF FD | 	call	#_ff_cc_f_sync
0ca74     08 5E 05 F1 | 	add	fp, #8
0ca78     AF 30 62 FC | 	wrlong	result1, fp
0ca7c     AF 84 0A FB | 	rdlong	local01, fp wz
0ca80     08 5E 85 F1 | 	sub	fp, #8
0ca84     40 00 90 5D |  if_ne	jmp	#LR__0762
0ca88     04 5E 05 F1 | 	add	fp, #4
0ca8c     AF 76 02 FB | 	rdlong	arg01, fp
0ca90     08 5E 05 F1 | 	add	fp, #8
0ca94     AF 78 02 F6 | 	mov	arg02, fp
0ca98     0C 5E 85 F1 | 	sub	fp, #12
0ca9c     80 E6 BF FD | 	call	#_ff_cc_validate_0371
0caa0     18 87 02 F6 | 	mov	local02, result1
0caa4     08 5E 05 F1 | 	add	fp, #8
0caa8     AF 86 62 FC | 	wrlong	local02, fp
0caac     AF 84 0A FB | 	rdlong	local01, fp wz
0cab0     08 5E 85 F1 | 	sub	fp, #8
0cab4     10 00 90 5D |  if_ne	jmp	#LR__0761
0cab8     04 5E 05 F1 | 	add	fp, #4
0cabc     AF 84 02 FB | 	rdlong	local01, fp
0cac0     04 5E 85 F1 | 	sub	fp, #4
0cac4     42 01 68 FC | 	wrlong	#0, local01
0cac8                 | LR__0761
0cac8                 | LR__0762
0cac8                 | ' 
0cac8                 | ' 
0cac8                 | ' 
0cac8                 | ' 
0cac8                 | ' 			fp->obj.fs = 0;
0cac8                 | ' #line 4212 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0cac8                 | ' 		}
0cac8                 | ' 	}
0cac8                 | ' 	return res;
0cac8     08 5E 05 F1 | 	add	fp, #8
0cacc     AF 30 02 FB | 	rdlong	result1, fp
0cad0     08 5E 85 F1 | 	sub	fp, #8
0cad4     AF F0 03 F6 | 	mov	ptra, fp
0cad8     BF 00 A0 FD | 	call	#popregs_
0cadc                 | _ff_cc_f_close_ret
0cadc     2D 00 64 FD | 	ret
0cae0                 | 
0cae0                 | _ff_cc_f_lseek
0cae0     0B 5A 05 F6 | 	mov	COUNT_, #11
0cae4     B0 00 A0 FD | 	call	#pushregs_
0cae8     24 F0 07 F1 | 	add	ptra, #36
0caec     04 5E 05 F1 | 	add	fp, #4
0caf0     AF 76 62 FC | 	wrlong	arg01, fp
0caf4     04 5E 05 F1 | 	add	fp, #4
0caf8     AF 78 62 FC | 	wrlong	arg02, fp
0cafc     04 5E 85 F1 | 	sub	fp, #4
0cb00     AF 76 02 FB | 	rdlong	arg01, fp
0cb04     0C 5E 05 F1 | 	add	fp, #12
0cb08     AF 78 02 F6 | 	mov	arg02, fp
0cb0c     10 5E 85 F1 | 	sub	fp, #16
0cb10     0C E6 BF FD | 	call	#_ff_cc_validate_0371
0cb14     18 85 02 F6 | 	mov	local01, result1
0cb18     0C 5E 05 F1 | 	add	fp, #12
0cb1c     AF 84 62 FC | 	wrlong	local01, fp
0cb20     AF 86 0A FB | 	rdlong	local02, fp wz
0cb24     0C 5E 85 F1 | 	sub	fp, #12
0cb28     1C 00 90 5D |  if_ne	jmp	#LR__0763
0cb2c     04 5E 05 F1 | 	add	fp, #4
0cb30     AF 88 02 FB | 	rdlong	local03, fp
0cb34     11 88 06 F1 | 	add	local03, #17
0cb38     44 87 C2 FA | 	rdbyte	local02, local03
0cb3c     08 5E 05 F1 | 	add	fp, #8
0cb40     AF 86 62 FC | 	wrlong	local02, fp
0cb44     0C 5E 85 F1 | 	sub	fp, #12
0cb48                 | LR__0763
0cb48     0C 5E 05 F1 | 	add	fp, #12
0cb4c     AF 86 0A FB | 	rdlong	local02, fp wz
0cb50     0C 5E 85 F1 | 	sub	fp, #12
0cb54     10 00 90 AD |  if_e	jmp	#LR__0764
0cb58     0C 5E 05 F1 | 	add	fp, #12
0cb5c     AF 30 02 FB | 	rdlong	result1, fp
0cb60     0C 5E 85 F1 | 	sub	fp, #12
0cb64     A0 05 90 FD | 	jmp	#LR__0784
0cb68                 | LR__0764
0cb68     04 5E 05 F1 | 	add	fp, #4
0cb6c     AF 86 02 FB | 	rdlong	local02, fp
0cb70     04 5E 05 F1 | 	add	fp, #4
0cb74     AF 8A 02 FB | 	rdlong	local04, fp
0cb78     08 5E 85 F1 | 	sub	fp, #8
0cb7c     0C 86 06 F1 | 	add	local02, #12
0cb80     43 8D 02 FB | 	rdlong	local05, local02
0cb84     46 8F 02 F6 | 	mov	local06, local05
0cb88     47 8B 1A F2 | 	cmp	local04, local06 wcz
0cb8c     50 00 90 ED |  if_be	jmp	#LR__0765
0cb90     04 5E 05 F1 | 	add	fp, #4
0cb94     AF 90 02 FB | 	rdlong	local07, fp
0cb98     04 5E 85 F1 | 	sub	fp, #4
0cb9c     48 93 02 F6 | 	mov	local08, local07
0cba0     10 92 06 F1 | 	add	local08, #16
0cba4     49 95 C2 FA | 	rdbyte	local09, local08
0cba8     10 92 86 F1 | 	sub	local08, #16
0cbac     4A 85 02 F6 | 	mov	local01, local09
0cbb0     07 84 46 F7 | 	zerox	local01, #7
0cbb4     02 84 0E F5 | 	and	local01, #2 wz
0cbb8     24 00 90 5D |  if_ne	jmp	#LR__0765
0cbbc     04 5E 05 F1 | 	add	fp, #4
0cbc0     AF 88 02 FB | 	rdlong	local03, fp
0cbc4     44 87 02 F6 | 	mov	local02, local03
0cbc8     0C 86 06 F1 | 	add	local02, #12
0cbcc     43 97 02 FB | 	rdlong	local10, local02
0cbd0     0C 86 86 F1 | 	sub	local02, #12
0cbd4     04 5E 05 F1 | 	add	fp, #4
0cbd8     AF 96 62 FC | 	wrlong	local10, fp
0cbdc     08 5E 85 F1 | 	sub	fp, #8
0cbe0                 | LR__0765
0cbe0     04 5E 05 F1 | 	add	fp, #4
0cbe4     AF 86 02 FB | 	rdlong	local02, fp
0cbe8     14 86 06 F1 | 	add	local02, #20
0cbec     43 97 02 FB | 	rdlong	local10, local02
0cbf0     1C 5E 05 F1 | 	add	fp, #28
0cbf4     AF 96 62 FC | 	wrlong	local10, fp
0cbf8     1C 5E 85 F1 | 	sub	fp, #28
0cbfc     AF 86 02 FB | 	rdlong	local02, fp
0cc00     18 5E 05 F1 | 	add	fp, #24
0cc04     AF 00 68 FC | 	wrlong	#0, fp
0cc08     14 86 06 F1 | 	add	local02, #20
0cc0c     43 01 68 FC | 	wrlong	#0, local02
0cc10     14 5E 85 F1 | 	sub	fp, #20
0cc14     AF 86 02 FB | 	rdlong	local02, fp
0cc18     08 5E 85 F1 | 	sub	fp, #8
0cc1c     00 86 1E F2 | 	cmp	local02, #0 wcz
0cc20     FC 03 90 ED |  if_be	jmp	#LR__0781
0cc24     10 5E 05 F1 | 	add	fp, #16
0cc28     AF 88 02 FB | 	rdlong	local03, fp
0cc2c     0A 88 06 F1 | 	add	local03, #10
0cc30     44 8F E2 FA | 	rdword	local06, local03
0cc34     09 8E 66 F0 | 	shl	local06, #9
0cc38     08 5E 05 F1 | 	add	fp, #8
0cc3c     AF 8E 62 FC | 	wrlong	local06, fp
0cc40     08 5E 05 F1 | 	add	fp, #8
0cc44     AF 86 02 FB | 	rdlong	local02, fp
0cc48     20 5E 85 F1 | 	sub	fp, #32
0cc4c     00 86 1E F2 | 	cmp	local02, #0 wcz
0cc50     BC 00 90 ED |  if_be	jmp	#LR__0766
0cc54     08 5E 05 F1 | 	add	fp, #8
0cc58     AF D8 02 FB | 	rdlong	muldiva_, fp
0cc5c     01 D8 86 F1 | 	sub	muldiva_, #1
0cc60     10 5E 05 F1 | 	add	fp, #16
0cc64     AF DA 02 FB | 	rdlong	muldivb_, fp
0cc68     18 5E 85 F1 | 	sub	fp, #24
0cc6c     CC 00 A0 FD | 	call	#unsdivide_
0cc70     6D 8F 02 F6 | 	mov	local06, muldivb_
0cc74     20 5E 05 F1 | 	add	fp, #32
0cc78     AF D8 02 FB | 	rdlong	muldiva_, fp
0cc7c     01 D8 86 F1 | 	sub	muldiva_, #1
0cc80     08 5E 85 F1 | 	sub	fp, #8
0cc84     AF 94 02 FB | 	rdlong	local09, fp
0cc88     18 5E 85 F1 | 	sub	fp, #24
0cc8c     4A DB 02 F6 | 	mov	muldivb_, local09
0cc90     CC 00 A0 FD | 	call	#unsdivide_
0cc94     6D 91 02 F6 | 	mov	local07, muldivb_
0cc98     48 8F 1A F2 | 	cmp	local06, local07 wcz
0cc9c     70 00 90 CD |  if_b	jmp	#LR__0766
0cca0     04 5E 05 F1 | 	add	fp, #4
0cca4     AF 86 02 FB | 	rdlong	local02, fp
0cca8     1C 5E 05 F1 | 	add	fp, #28
0ccac     AF 96 02 FB | 	rdlong	local10, fp
0ccb0     01 96 86 F1 | 	sub	local10, #1
0ccb4     08 5E 85 F1 | 	sub	fp, #8
0ccb8     AF 8E 02 FB | 	rdlong	local06, fp
0ccbc     01 8E 86 F1 | 	sub	local06, #1
0ccc0     47 97 22 F5 | 	andn	local10, local06
0ccc4     14 86 06 F1 | 	add	local02, #20
0ccc8     43 97 62 FC | 	wrlong	local10, local02
0cccc     10 5E 85 F1 | 	sub	fp, #16
0ccd0     AF 86 02 FB | 	rdlong	local02, fp
0ccd4     04 5E 85 F1 | 	sub	fp, #4
0ccd8     AF 96 02 FB | 	rdlong	local10, fp
0ccdc     14 96 06 F1 | 	add	local10, #20
0cce0     4B 8F 02 FB | 	rdlong	local06, local10
0cce4     47 87 82 F1 | 	sub	local02, local06
0cce8     04 5E 05 F1 | 	add	fp, #4
0ccec     AF 86 62 FC | 	wrlong	local02, fp
0ccf0     04 5E 85 F1 | 	sub	fp, #4
0ccf4     AF 86 02 FB | 	rdlong	local02, fp
0ccf8     18 86 06 F1 | 	add	local02, #24
0ccfc     43 97 02 FB | 	rdlong	local10, local02
0cd00     10 5E 05 F1 | 	add	fp, #16
0cd04     AF 96 62 FC | 	wrlong	local10, fp
0cd08     14 5E 85 F1 | 	sub	fp, #20
0cd0c     D4 00 90 FD | 	jmp	#LR__0770
0cd10                 | LR__0766
0cd10     04 5E 05 F1 | 	add	fp, #4
0cd14     AF 86 02 FB | 	rdlong	local02, fp
0cd18     08 86 06 F1 | 	add	local02, #8
0cd1c     43 97 02 FB | 	rdlong	local10, local02
0cd20     10 5E 05 F1 | 	add	fp, #16
0cd24     AF 96 62 FC | 	wrlong	local10, fp
0cd28     AF 86 0A FB | 	rdlong	local02, fp wz
0cd2c     14 5E 85 F1 | 	sub	fp, #20
0cd30     94 00 90 5D |  if_ne	jmp	#LR__0769
0cd34     04 5E 05 F1 | 	add	fp, #4
0cd38     AF 76 02 FB | 	rdlong	arg01, fp
0cd3c     04 5E 85 F1 | 	sub	fp, #4
0cd40     00 78 06 F6 | 	mov	arg02, #0
0cd44     C8 C9 BF FD | 	call	#_ff_cc_create_chain_0295
0cd48     14 5E 05 F1 | 	add	fp, #20
0cd4c     AF 30 62 FC | 	wrlong	result1, fp
0cd50     14 5E 85 F1 | 	sub	fp, #20
0cd54     01 30 0E F2 | 	cmp	result1, #1 wz
0cd58     1C 00 90 5D |  if_ne	jmp	#LR__0767
0cd5c     04 5E 05 F1 | 	add	fp, #4
0cd60     AF 86 02 FB | 	rdlong	local02, fp
0cd64     04 5E 85 F1 | 	sub	fp, #4
0cd68     11 86 06 F1 | 	add	local02, #17
0cd6c     43 05 48 FC | 	wrbyte	#2, local02
0cd70     02 30 06 F6 | 	mov	result1, #2
0cd74     90 03 90 FD | 	jmp	#LR__0784
0cd78                 | LR__0767
0cd78     14 5E 05 F1 | 	add	fp, #20
0cd7c     AF 86 02 FB | 	rdlong	local02, fp
0cd80     14 5E 85 F1 | 	sub	fp, #20
0cd84     FF FF 7F FF 
0cd88     FF 87 0E F2 | 	cmp	local02, ##-1 wz
0cd8c     1C 00 90 5D |  if_ne	jmp	#LR__0768
0cd90     04 5E 05 F1 | 	add	fp, #4
0cd94     AF 86 02 FB | 	rdlong	local02, fp
0cd98     04 5E 85 F1 | 	sub	fp, #4
0cd9c     11 86 06 F1 | 	add	local02, #17
0cda0     43 03 48 FC | 	wrbyte	#1, local02
0cda4     01 30 06 F6 | 	mov	result1, #1
0cda8     5C 03 90 FD | 	jmp	#LR__0784
0cdac                 | LR__0768
0cdac     04 5E 05 F1 | 	add	fp, #4
0cdb0     AF 86 02 FB | 	rdlong	local02, fp
0cdb4     10 5E 05 F1 | 	add	fp, #16
0cdb8     AF 96 02 FB | 	rdlong	local10, fp
0cdbc     14 5E 85 F1 | 	sub	fp, #20
0cdc0     08 86 06 F1 | 	add	local02, #8
0cdc4     43 97 62 FC | 	wrlong	local10, local02
0cdc8                 | LR__0769
0cdc8     04 5E 05 F1 | 	add	fp, #4
0cdcc     AF 86 02 FB | 	rdlong	local02, fp
0cdd0     10 5E 05 F1 | 	add	fp, #16
0cdd4     AF 96 02 FB | 	rdlong	local10, fp
0cdd8     14 5E 85 F1 | 	sub	fp, #20
0cddc     18 86 06 F1 | 	add	local02, #24
0cde0     43 97 62 FC | 	wrlong	local10, local02
0cde4                 | LR__0770
0cde4     14 5E 05 F1 | 	add	fp, #20
0cde8     AF 86 0A FB | 	rdlong	local02, fp wz
0cdec     14 5E 85 F1 | 	sub	fp, #20
0cdf0     2C 02 90 AD |  if_e	jmp	#LR__0780
0cdf4                 | ' 				while (ofs > bcs) {
0cdf4                 | LR__0771
0cdf4     08 5E 05 F1 | 	add	fp, #8
0cdf8     AF 86 02 FB | 	rdlong	local02, fp
0cdfc     10 5E 05 F1 | 	add	fp, #16
0ce00     AF 96 02 FB | 	rdlong	local10, fp
0ce04     18 5E 85 F1 | 	sub	fp, #24
0ce08     4B 87 1A F2 | 	cmp	local02, local10 wcz
0ce0c     6C 01 90 ED |  if_be	jmp	#LR__0777
0ce10     08 5E 05 F1 | 	add	fp, #8
0ce14     AF 86 02 FB | 	rdlong	local02, fp
0ce18     10 5E 05 F1 | 	add	fp, #16
0ce1c     AF 96 02 FB | 	rdlong	local10, fp
0ce20     4B 87 82 F1 | 	sub	local02, local10
0ce24     10 5E 85 F1 | 	sub	fp, #16
0ce28     AF 86 62 FC | 	wrlong	local02, fp
0ce2c     04 5E 85 F1 | 	sub	fp, #4
0ce30     AF 86 02 FB | 	rdlong	local02, fp
0ce34     43 8B 02 F6 | 	mov	local04, local02
0ce38     14 8A 06 F1 | 	add	local04, #20
0ce3c     45 8D 02 FB | 	rdlong	local05, local04
0ce40     46 97 02 F6 | 	mov	local10, local05
0ce44     14 5E 05 F1 | 	add	fp, #20
0ce48     AF 92 02 FB | 	rdlong	local08, fp
0ce4c     49 97 02 F1 | 	add	local10, local08
0ce50     14 86 06 F1 | 	add	local02, #20
0ce54     43 97 62 FC | 	wrlong	local10, local02
0ce58     14 5E 85 F1 | 	sub	fp, #20
0ce5c     AF 88 02 FB | 	rdlong	local03, fp
0ce60     04 5E 85 F1 | 	sub	fp, #4
0ce64     10 88 06 F1 | 	add	local03, #16
0ce68     44 87 C2 FA | 	rdbyte	local02, local03
0ce6c     02 86 CE F7 | 	test	local02, #2 wz
0ce70     3C 00 90 AD |  if_e	jmp	#LR__0772
0ce74     04 5E 05 F1 | 	add	fp, #4
0ce78     AF 76 02 FB | 	rdlong	arg01, fp
0ce7c     10 5E 05 F1 | 	add	fp, #16
0ce80     AF 78 02 FB | 	rdlong	arg02, fp
0ce84     14 5E 85 F1 | 	sub	fp, #20
0ce88     84 C8 BF FD | 	call	#_ff_cc_create_chain_0295
0ce8c     14 5E 05 F1 | 	add	fp, #20
0ce90     AF 30 62 FC | 	wrlong	result1, fp
0ce94     AF 86 0A FB | 	rdlong	local02, fp wz
0ce98     14 5E 85 F1 | 	sub	fp, #20
0ce9c     34 00 90 5D |  if_ne	jmp	#LR__0773
0cea0     08 5E 05 F1 | 	add	fp, #8
0cea4     AF 00 68 FC | 	wrlong	#0, fp
0cea8     08 5E 85 F1 | 	sub	fp, #8
0ceac                 | ' 							ofs = 0; break;
0ceac     CC 00 90 FD | 	jmp	#LR__0777
0ceb0                 | LR__0772
0ceb0     04 5E 05 F1 | 	add	fp, #4
0ceb4     AF 76 02 FB | 	rdlong	arg01, fp
0ceb8     10 5E 05 F1 | 	add	fp, #16
0cebc     AF 78 02 FB | 	rdlong	arg02, fp
0cec0     14 5E 85 F1 | 	sub	fp, #20
0cec4     68 C2 BF FD | 	call	#_ff_cc_get_fat_0281
0cec8     14 5E 05 F1 | 	add	fp, #20
0cecc     AF 30 62 FC | 	wrlong	result1, fp
0ced0     14 5E 85 F1 | 	sub	fp, #20
0ced4                 | LR__0773
0ced4     14 5E 05 F1 | 	add	fp, #20
0ced8     AF 86 02 FB | 	rdlong	local02, fp
0cedc     14 5E 85 F1 | 	sub	fp, #20
0cee0     FF FF 7F FF 
0cee4     FF 87 0E F2 | 	cmp	local02, ##-1 wz
0cee8     1C 00 90 5D |  if_ne	jmp	#LR__0774
0ceec     04 5E 05 F1 | 	add	fp, #4
0cef0     AF 86 02 FB | 	rdlong	local02, fp
0cef4     04 5E 85 F1 | 	sub	fp, #4
0cef8     11 86 06 F1 | 	add	local02, #17
0cefc     43 03 48 FC | 	wrbyte	#1, local02
0cf00     01 30 06 F6 | 	mov	result1, #1
0cf04     00 02 90 FD | 	jmp	#LR__0784
0cf08                 | LR__0774
0cf08     14 5E 05 F1 | 	add	fp, #20
0cf0c     AF 86 02 FB | 	rdlong	local02, fp
0cf10     14 5E 85 F1 | 	sub	fp, #20
0cf14     01 86 1E F2 | 	cmp	local02, #1 wcz
0cf18     24 00 90 ED |  if_be	jmp	#LR__0775
0cf1c     10 5E 05 F1 | 	add	fp, #16
0cf20     AF 96 02 FB | 	rdlong	local10, fp
0cf24     04 5E 05 F1 | 	add	fp, #4
0cf28     AF 8E 02 FB | 	rdlong	local06, fp
0cf2c     14 5E 85 F1 | 	sub	fp, #20
0cf30     14 96 06 F1 | 	add	local10, #20
0cf34     4B 85 02 FB | 	rdlong	local01, local10
0cf38     42 8F 1A F2 | 	cmp	local06, local01 wcz
0cf3c     1C 00 90 CD |  if_b	jmp	#LR__0776
0cf40                 | LR__0775
0cf40     04 5E 05 F1 | 	add	fp, #4
0cf44     AF 86 02 FB | 	rdlong	local02, fp
0cf48     04 5E 85 F1 | 	sub	fp, #4
0cf4c     11 86 06 F1 | 	add	local02, #17
0cf50     43 05 48 FC | 	wrbyte	#2, local02
0cf54     02 30 06 F6 | 	mov	result1, #2
0cf58     AC 01 90 FD | 	jmp	#LR__0784
0cf5c                 | LR__0776
0cf5c     04 5E 05 F1 | 	add	fp, #4
0cf60     AF 86 02 FB | 	rdlong	local02, fp
0cf64     10 5E 05 F1 | 	add	fp, #16
0cf68     AF 96 02 FB | 	rdlong	local10, fp
0cf6c     14 5E 85 F1 | 	sub	fp, #20
0cf70     18 86 06 F1 | 	add	local02, #24
0cf74     43 97 62 FC | 	wrlong	local10, local02
0cf78     78 FE 9F FD | 	jmp	#LR__0771
0cf7c                 | LR__0777
0cf7c     04 5E 05 F1 | 	add	fp, #4
0cf80     AF 86 02 FB | 	rdlong	local02, fp
0cf84     43 8B 02 F6 | 	mov	local04, local02
0cf88     14 8A 06 F1 | 	add	local04, #20
0cf8c     45 97 02 FB | 	rdlong	local10, local04
0cf90     04 5E 05 F1 | 	add	fp, #4
0cf94     AF 84 02 FB | 	rdlong	local01, fp
0cf98     42 97 02 F1 | 	add	local10, local01
0cf9c     14 86 06 F1 | 	add	local02, #20
0cfa0     43 97 62 FC | 	wrlong	local10, local02
0cfa4     AF 86 02 FB | 	rdlong	local02, fp
0cfa8     08 5E 85 F1 | 	sub	fp, #8
0cfac     FF 87 CE F7 | 	test	local02, #511 wz
0cfb0     6C 00 90 AD |  if_e	jmp	#LR__0779
0cfb4     10 5E 05 F1 | 	add	fp, #16
0cfb8     AF 76 02 FB | 	rdlong	arg01, fp
0cfbc     04 5E 05 F1 | 	add	fp, #4
0cfc0     AF 78 02 FB | 	rdlong	arg02, fp
0cfc4     14 5E 85 F1 | 	sub	fp, #20
0cfc8     24 C1 BF FD | 	call	#_ff_cc_clst2sect_0276
0cfcc     1C 5E 05 F1 | 	add	fp, #28
0cfd0     AF 30 62 FC | 	wrlong	result1, fp
0cfd4     AF 86 0A FB | 	rdlong	local02, fp wz
0cfd8     1C 5E 85 F1 | 	sub	fp, #28
0cfdc     1C 00 90 5D |  if_ne	jmp	#LR__0778
0cfe0     04 5E 05 F1 | 	add	fp, #4
0cfe4     AF 86 02 FB | 	rdlong	local02, fp
0cfe8     04 5E 85 F1 | 	sub	fp, #4
0cfec     11 86 06 F1 | 	add	local02, #17
0cff0     43 05 48 FC | 	wrbyte	#2, local02
0cff4     02 30 06 F6 | 	mov	result1, #2
0cff8     0C 01 90 FD | 	jmp	#LR__0784
0cffc                 | LR__0778
0cffc     1C 5E 05 F1 | 	add	fp, #28
0d000     AF 86 02 FB | 	rdlong	local02, fp
0d004     14 5E 85 F1 | 	sub	fp, #20
0d008     AF 96 02 FB | 	rdlong	local10, fp
0d00c     09 96 46 F0 | 	shr	local10, #9
0d010     4B 87 02 F1 | 	add	local02, local10
0d014     14 5E 05 F1 | 	add	fp, #20
0d018     AF 86 62 FC | 	wrlong	local02, fp
0d01c     1C 5E 85 F1 | 	sub	fp, #28
0d020                 | LR__0779
0d020                 | LR__0780
0d020                 | LR__0781
0d020     04 5E 05 F1 | 	add	fp, #4
0d024     AF 86 02 FB | 	rdlong	local02, fp
0d028     43 97 02 F6 | 	mov	local10, local02
0d02c     04 5E 85 F1 | 	sub	fp, #4
0d030     14 86 06 F1 | 	add	local02, #20
0d034     43 8F 02 FB | 	rdlong	local06, local02
0d038     0C 96 06 F1 | 	add	local10, #12
0d03c     4B 85 02 FB | 	rdlong	local01, local10
0d040     42 8F 1A F2 | 	cmp	local06, local01 wcz
0d044     3C 00 90 ED |  if_be	jmp	#LR__0782
0d048     04 5E 05 F1 | 	add	fp, #4
0d04c     AF 86 02 FB | 	rdlong	local02, fp
0d050     43 97 02 F6 | 	mov	local10, local02
0d054     14 96 06 F1 | 	add	local10, #20
0d058     4B 8F 02 FB | 	rdlong	local06, local10
0d05c     0C 86 06 F1 | 	add	local02, #12
0d060     43 8F 62 FC | 	wrlong	local06, local02
0d064     AF 86 02 FB | 	rdlong	local02, fp
0d068     43 8B 02 F6 | 	mov	local04, local02
0d06c     04 5E 85 F1 | 	sub	fp, #4
0d070     10 8A 06 F1 | 	add	local04, #16
0d074     45 97 C2 FA | 	rdbyte	local10, local04
0d078     40 96 46 F5 | 	or	local10, #64
0d07c     10 86 06 F1 | 	add	local02, #16
0d080     43 97 42 FC | 	wrbyte	local10, local02
0d084                 | LR__0782
0d084     04 5E 05 F1 | 	add	fp, #4
0d088     AF 86 02 FB | 	rdlong	local02, fp
0d08c     04 5E 85 F1 | 	sub	fp, #4
0d090     14 86 06 F1 | 	add	local02, #20
0d094     43 8F 02 FB | 	rdlong	local06, local02
0d098     47 8B 02 F6 | 	mov	local04, local06
0d09c     FF 8B CE F7 | 	test	local04, #511 wz
0d0a0     58 00 90 AD |  if_e	jmp	#LR__0783
0d0a4     04 5E 05 F1 | 	add	fp, #4
0d0a8     AF 84 02 FB | 	rdlong	local01, fp
0d0ac     42 8D 02 F6 | 	mov	local05, local01
0d0b0     18 5E 05 F1 | 	add	fp, #24
0d0b4     AF 90 02 FB | 	rdlong	local07, fp
0d0b8     1C 5E 85 F1 | 	sub	fp, #28
0d0bc     48 93 02 F6 | 	mov	local08, local07
0d0c0     1C 8C 06 F1 | 	add	local05, #28
0d0c4     46 99 02 FB | 	rdlong	local11, local05
0d0c8     1C 8C 86 F1 | 	sub	local05, #28
0d0cc     4C 95 02 F6 | 	mov	local09, local11
0d0d0     4A 93 0A F2 | 	cmp	local08, local09 wz
0d0d4     24 00 90 AD |  if_e	jmp	#LR__0783
0d0d8     04 5E 05 F1 | 	add	fp, #4
0d0dc     AF 88 02 FB | 	rdlong	local03, fp
0d0e0     44 87 02 F6 | 	mov	local02, local03
0d0e4     18 5E 05 F1 | 	add	fp, #24
0d0e8     AF 96 02 FB | 	rdlong	local10, fp
0d0ec     1C 5E 85 F1 | 	sub	fp, #28
0d0f0     1C 86 06 F1 | 	add	local02, #28
0d0f4     43 97 62 FC | 	wrlong	local10, local02
0d0f8     1C 86 86 F1 | 	sub	local02, #28
0d0fc                 | LR__0783
0d0fc                 | ' #line 4553 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0d0fc                 | ' 			fp->sect = nsect;
0d0fc                 | ' 		}
0d0fc                 | ' 	}
0d0fc                 | ' 
0d0fc                 | ' 	return res ;
0d0fc     0C 5E 05 F1 | 	add	fp, #12
0d100     AF 30 02 FB | 	rdlong	result1, fp
0d104     0C 5E 85 F1 | 	sub	fp, #12
0d108                 | LR__0784
0d108     AF F0 03 F6 | 	mov	ptra, fp
0d10c     BF 00 A0 FD | 	call	#popregs_
0d110                 | _ff_cc_f_lseek_ret
0d110     2D 00 64 FD | 	ret
0d114                 | 
0d114                 | _ff_cc_f_opendir
0d114     05 5A 05 F6 | 	mov	COUNT_, #5
0d118     B0 00 A0 FD | 	call	#pushregs_
0d11c     14 F0 07 F1 | 	add	ptra, #20
0d120     04 5E 05 F1 | 	add	fp, #4
0d124     AF 76 62 FC | 	wrlong	arg01, fp
0d128     04 5E 05 F1 | 	add	fp, #4
0d12c     AF 78 62 FC | 	wrlong	arg02, fp
0d130     04 5E 85 F1 | 	sub	fp, #4
0d134     AF 84 0A FB | 	rdlong	local01, fp wz
0d138     04 5E 85 F1 | 	sub	fp, #4
0d13c     09 30 06 A6 |  if_e	mov	result1, #9
0d140     84 01 90 AD |  if_e	jmp	#LR__0792
0d144     08 5E 05 F1 | 	add	fp, #8
0d148     AF 76 02 F6 | 	mov	arg01, fp
0d14c     08 5E 05 F1 | 	add	fp, #8
0d150     AF 78 02 F6 | 	mov	arg02, fp
0d154     10 5E 85 F1 | 	sub	fp, #16
0d158     00 7A 06 F6 | 	mov	arg03, #0
0d15c     80 D9 BF FD | 	call	#_ff_cc_mount_volume_0369
0d160     18 87 02 F6 | 	mov	local02, result1
0d164     0C 5E 05 F1 | 	add	fp, #12
0d168     AF 86 62 FC | 	wrlong	local02, fp
0d16c     AF 84 0A FB | 	rdlong	local01, fp wz
0d170     0C 5E 85 F1 | 	sub	fp, #12
0d174     24 01 90 5D |  if_ne	jmp	#LR__0790
0d178     04 5E 05 F1 | 	add	fp, #4
0d17c     AF 84 02 FB | 	rdlong	local01, fp
0d180     0C 5E 05 F1 | 	add	fp, #12
0d184     AF 88 02 FB | 	rdlong	local03, fp
0d188     42 89 62 FC | 	wrlong	local03, local01
0d18c     0C 5E 85 F1 | 	sub	fp, #12
0d190     AF 76 02 FB | 	rdlong	arg01, fp
0d194     04 5E 05 F1 | 	add	fp, #4
0d198     AF 78 02 FB | 	rdlong	arg02, fp
0d19c     08 5E 85 F1 | 	sub	fp, #8
0d1a0     00 D4 BF FD | 	call	#_ff_cc_follow_path_0346
0d1a4     0C 5E 05 F1 | 	add	fp, #12
0d1a8     AF 30 62 FC | 	wrlong	result1, fp
0d1ac     AF 84 0A FB | 	rdlong	local01, fp wz
0d1b0     0C 5E 85 F1 | 	sub	fp, #12
0d1b4     C8 00 90 5D |  if_ne	jmp	#LR__0789
0d1b8     04 5E 05 F1 | 	add	fp, #4
0d1bc     AF 8A 02 FB | 	rdlong	local04, fp
0d1c0     04 5E 85 F1 | 	sub	fp, #4
0d1c4     2B 8A 06 F1 | 	add	local04, #43
0d1c8     45 85 C2 FA | 	rdbyte	local01, local04
0d1cc     80 84 CE F7 | 	test	local01, #128 wz
0d1d0     5C 00 90 5D |  if_ne	jmp	#LR__0787
0d1d4     04 5E 05 F1 | 	add	fp, #4
0d1d8     AF 8A 02 FB | 	rdlong	local04, fp
0d1dc     04 5E 85 F1 | 	sub	fp, #4
0d1e0     06 8A 06 F1 | 	add	local04, #6
0d1e4     45 85 C2 FA | 	rdbyte	local01, local04
0d1e8     10 84 CE F7 | 	test	local01, #16 wz
0d1ec     34 00 90 AD |  if_e	jmp	#LR__0785
0d1f0     04 5E 05 F1 | 	add	fp, #4
0d1f4     AF 84 02 FB | 	rdlong	local01, fp
0d1f8     0C 5E 05 F1 | 	add	fp, #12
0d1fc     AF 76 02 FB | 	rdlong	arg01, fp
0d200     0C 5E 85 F1 | 	sub	fp, #12
0d204     AF 8C 02 FB | 	rdlong	local05, fp
0d208     04 5E 85 F1 | 	sub	fp, #4
0d20c     1C 8C 06 F1 | 	add	local05, #28
0d210     46 79 02 FB | 	rdlong	arg02, local05
0d214     5C CC BF FD | 	call	#_ff_cc_ld_clust_0314
0d218     08 84 06 F1 | 	add	local01, #8
0d21c     42 31 62 FC | 	wrlong	result1, local01
0d220     0C 00 90 FD | 	jmp	#LR__0786
0d224                 | LR__0785
0d224     0C 5E 05 F1 | 	add	fp, #12
0d228     AF 0A 68 FC | 	wrlong	#5, fp
0d22c     0C 5E 85 F1 | 	sub	fp, #12
0d230                 | LR__0786
0d230                 | LR__0787
0d230     0C 5E 05 F1 | 	add	fp, #12
0d234     AF 84 0A FB | 	rdlong	local01, fp wz
0d238     0C 5E 85 F1 | 	sub	fp, #12
0d23c     40 00 90 5D |  if_ne	jmp	#LR__0788
0d240     04 5E 05 F1 | 	add	fp, #4
0d244     AF 84 02 FB | 	rdlong	local01, fp
0d248     0C 5E 05 F1 | 	add	fp, #12
0d24c     AF 88 02 FB | 	rdlong	local03, fp
0d250     06 88 06 F1 | 	add	local03, #6
0d254     44 8D E2 FA | 	rdword	local05, local03
0d258     04 84 06 F1 | 	add	local01, #4
0d25c     42 8D 52 FC | 	wrword	local05, local01
0d260     0C 5E 85 F1 | 	sub	fp, #12
0d264     AF 76 02 FB | 	rdlong	arg01, fp
0d268     04 5E 85 F1 | 	sub	fp, #4
0d26c     00 78 06 F6 | 	mov	arg02, #0
0d270     D8 C7 BF FD | 	call	#_ff_cc_dir_sdi_0304
0d274     0C 5E 05 F1 | 	add	fp, #12
0d278     AF 30 62 FC | 	wrlong	result1, fp
0d27c     0C 5E 85 F1 | 	sub	fp, #12
0d280                 | LR__0788
0d280                 | LR__0789
0d280     0C 5E 05 F1 | 	add	fp, #12
0d284     AF 84 02 FB | 	rdlong	local01, fp
0d288     0C 5E 85 F1 | 	sub	fp, #12
0d28c     04 84 0E F2 | 	cmp	local01, #4 wz
0d290     0C 5E 05 A1 |  if_e	add	fp, #12
0d294     AF 0A 68 AC |  if_e	wrlong	#5, fp
0d298     0C 5E 85 A1 |  if_e	sub	fp, #12
0d29c                 | LR__0790
0d29c     0C 5E 05 F1 | 	add	fp, #12
0d2a0     AF 84 0A FB | 	rdlong	local01, fp wz
0d2a4     0C 5E 85 F1 | 	sub	fp, #12
0d2a8     10 00 90 AD |  if_e	jmp	#LR__0791
0d2ac     04 5E 05 F1 | 	add	fp, #4
0d2b0     AF 84 02 FB | 	rdlong	local01, fp
0d2b4     04 5E 85 F1 | 	sub	fp, #4
0d2b8     42 01 68 FC | 	wrlong	#0, local01
0d2bc                 | LR__0791
0d2bc                 | ' 
0d2bc                 | ' 	return res ;
0d2bc     0C 5E 05 F1 | 	add	fp, #12
0d2c0     AF 30 02 FB | 	rdlong	result1, fp
0d2c4     0C 5E 85 F1 | 	sub	fp, #12
0d2c8                 | LR__0792
0d2c8     AF F0 03 F6 | 	mov	ptra, fp
0d2cc     BF 00 A0 FD | 	call	#popregs_
0d2d0                 | _ff_cc_f_opendir_ret
0d2d0     2D 00 64 FD | 	ret
0d2d4                 | 
0d2d4                 | _ff_cc_f_closedir
0d2d4     02 5A 05 F6 | 	mov	COUNT_, #2
0d2d8     B0 00 A0 FD | 	call	#pushregs_
0d2dc     10 F0 07 F1 | 	add	ptra, #16
0d2e0     04 5E 05 F1 | 	add	fp, #4
0d2e4     AF 76 62 FC | 	wrlong	arg01, fp
0d2e8     08 5E 05 F1 | 	add	fp, #8
0d2ec     AF 78 02 F6 | 	mov	arg02, fp
0d2f0     0C 5E 85 F1 | 	sub	fp, #12
0d2f4     28 DE BF FD | 	call	#_ff_cc_validate_0371
0d2f8     18 85 02 F6 | 	mov	local01, result1
0d2fc     08 5E 05 F1 | 	add	fp, #8
0d300     AF 84 62 FC | 	wrlong	local01, fp
0d304     AF 86 0A FB | 	rdlong	local02, fp wz
0d308     08 5E 85 F1 | 	sub	fp, #8
0d30c     10 00 90 5D |  if_ne	jmp	#LR__0793
0d310     04 5E 05 F1 | 	add	fp, #4
0d314     AF 86 02 FB | 	rdlong	local02, fp
0d318     04 5E 85 F1 | 	sub	fp, #4
0d31c     43 01 68 FC | 	wrlong	#0, local02
0d320                 | LR__0793
0d320                 | ' 
0d320                 | ' 
0d320                 | ' 
0d320                 | ' 
0d320                 | ' 		dp->obj.fs = 0;
0d320                 | ' #line 4652 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0d320                 | ' 	}
0d320                 | ' 	return res;
0d320     08 5E 05 F1 | 	add	fp, #8
0d324     AF 30 02 FB | 	rdlong	result1, fp
0d328     08 5E 85 F1 | 	sub	fp, #8
0d32c     AF F0 03 F6 | 	mov	ptra, fp
0d330     BF 00 A0 FD | 	call	#popregs_
0d334                 | _ff_cc_f_closedir_ret
0d334     2D 00 64 FD | 	ret
0d338                 | 
0d338                 | _ff_cc_f_readdir
0d338     02 5A 05 F6 | 	mov	COUNT_, #2
0d33c     B0 00 A0 FD | 	call	#pushregs_
0d340     14 F0 07 F1 | 	add	ptra, #20
0d344     04 5E 05 F1 | 	add	fp, #4
0d348     AF 76 62 FC | 	wrlong	arg01, fp
0d34c     04 5E 05 F1 | 	add	fp, #4
0d350     AF 78 62 FC | 	wrlong	arg02, fp
0d354     04 5E 85 F1 | 	sub	fp, #4
0d358     AF 76 02 FB | 	rdlong	arg01, fp
0d35c     0C 5E 05 F1 | 	add	fp, #12
0d360     AF 78 02 F6 | 	mov	arg02, fp
0d364     10 5E 85 F1 | 	sub	fp, #16
0d368     B4 DD BF FD | 	call	#_ff_cc_validate_0371
0d36c     18 85 02 F6 | 	mov	local01, result1
0d370     0C 5E 05 F1 | 	add	fp, #12
0d374     AF 84 62 FC | 	wrlong	local01, fp
0d378     AF 86 0A FB | 	rdlong	local02, fp wz
0d37c     0C 5E 85 F1 | 	sub	fp, #12
0d380     BC 00 90 5D |  if_ne	jmp	#LR__0797
0d384     08 5E 05 F1 | 	add	fp, #8
0d388     AF 86 0A FB | 	rdlong	local02, fp wz
0d38c     08 5E 85 F1 | 	sub	fp, #8
0d390     24 00 90 5D |  if_ne	jmp	#LR__0794
0d394     04 5E 05 F1 | 	add	fp, #4
0d398     AF 76 02 FB | 	rdlong	arg01, fp
0d39c     04 5E 85 F1 | 	sub	fp, #4
0d3a0     00 78 06 F6 | 	mov	arg02, #0
0d3a4     A4 C6 BF FD | 	call	#_ff_cc_dir_sdi_0304
0d3a8     0C 5E 05 F1 | 	add	fp, #12
0d3ac     AF 30 62 FC | 	wrlong	result1, fp
0d3b0     0C 5E 85 F1 | 	sub	fp, #12
0d3b4     88 00 90 FD | 	jmp	#LR__0796
0d3b8                 | LR__0794
0d3b8     04 5E 05 F1 | 	add	fp, #4
0d3bc     AF 76 02 FB | 	rdlong	arg01, fp
0d3c0     04 5E 85 F1 | 	sub	fp, #4
0d3c4     00 78 06 F6 | 	mov	arg02, #0
0d3c8     50 CB BF FD | 	call	#_ff_cc_dir_read_0320
0d3cc     0C 5E 05 F1 | 	add	fp, #12
0d3d0     AF 30 62 FC | 	wrlong	result1, fp
0d3d4     0C 5E 85 F1 | 	sub	fp, #12
0d3d8     04 30 0E F2 | 	cmp	result1, #4 wz
0d3dc     0C 5E 05 A1 |  if_e	add	fp, #12
0d3e0     AF 00 68 AC |  if_e	wrlong	#0, fp
0d3e4     0C 5E 85 A1 |  if_e	sub	fp, #12
0d3e8     0C 5E 05 F1 | 	add	fp, #12
0d3ec     AF 86 0A FB | 	rdlong	local02, fp wz
0d3f0     0C 5E 85 F1 | 	sub	fp, #12
0d3f4     48 00 90 5D |  if_ne	jmp	#LR__0795
0d3f8     04 5E 05 F1 | 	add	fp, #4
0d3fc     AF 76 02 FB | 	rdlong	arg01, fp
0d400     04 5E 05 F1 | 	add	fp, #4
0d404     AF 78 02 FB | 	rdlong	arg02, fp
0d408     08 5E 85 F1 | 	sub	fp, #8
0d40c     FC CD BF FD | 	call	#_ff_cc_get_fileinfo_0334
0d410     04 5E 05 F1 | 	add	fp, #4
0d414     AF 76 02 FB | 	rdlong	arg01, fp
0d418     04 5E 85 F1 | 	sub	fp, #4
0d41c     00 78 06 F6 | 	mov	arg02, #0
0d420     B4 C7 BF FD | 	call	#_ff_cc_dir_next_0308
0d424     0C 5E 05 F1 | 	add	fp, #12
0d428     AF 30 62 FC | 	wrlong	result1, fp
0d42c     0C 5E 85 F1 | 	sub	fp, #12
0d430     04 30 0E F2 | 	cmp	result1, #4 wz
0d434     0C 5E 05 A1 |  if_e	add	fp, #12
0d438     AF 00 68 AC |  if_e	wrlong	#0, fp
0d43c     0C 5E 85 A1 |  if_e	sub	fp, #12
0d440                 | LR__0795
0d440                 | LR__0796
0d440                 | LR__0797
0d440                 | ' 			}
0d440                 | ' 			;
0d440                 | ' 		}
0d440                 | ' 	}
0d440                 | ' 	return res ;
0d440     0C 5E 05 F1 | 	add	fp, #12
0d444     AF 30 02 FB | 	rdlong	result1, fp
0d448     0C 5E 85 F1 | 	sub	fp, #12
0d44c     AF F0 03 F6 | 	mov	ptra, fp
0d450     BF 00 A0 FD | 	call	#popregs_
0d454                 | _ff_cc_f_readdir_ret
0d454     2D 00 64 FD | 	ret
0d458                 | 
0d458                 | _ff_cc_f_stat
0d458     03 5A 05 F6 | 	mov	COUNT_, #3
0d45c     B0 00 A0 FD | 	call	#pushregs_
0d460     3C F0 07 F1 | 	add	ptra, #60
0d464     04 5E 05 F1 | 	add	fp, #4
0d468     AF 76 62 FC | 	wrlong	arg01, fp
0d46c     04 5E 05 F1 | 	add	fp, #4
0d470     AF 78 62 FC | 	wrlong	arg02, fp
0d474     04 5E 85 F1 | 	sub	fp, #4
0d478     AF 76 02 F6 | 	mov	arg01, fp
0d47c     0C 5E 05 F1 | 	add	fp, #12
0d480     AF 78 02 F6 | 	mov	arg02, fp
0d484     10 5E 85 F1 | 	sub	fp, #16
0d488     00 7A 06 F6 | 	mov	arg03, #0
0d48c     50 D6 BF FD | 	call	#_ff_cc_mount_volume_0369
0d490     18 85 02 F6 | 	mov	local01, result1
0d494     0C 5E 05 F1 | 	add	fp, #12
0d498     AF 84 62 FC | 	wrlong	local01, fp
0d49c     AF 86 0A FB | 	rdlong	local02, fp wz
0d4a0     0C 5E 85 F1 | 	sub	fp, #12
0d4a4     80 00 90 5D |  if_ne	jmp	#LR__0802
0d4a8     10 5E 05 F1 | 	add	fp, #16
0d4ac     AF 76 02 F6 | 	mov	arg01, fp
0d4b0     0C 5E 85 F1 | 	sub	fp, #12
0d4b4     AF 78 02 FB | 	rdlong	arg02, fp
0d4b8     04 5E 85 F1 | 	sub	fp, #4
0d4bc     E4 D0 BF FD | 	call	#_ff_cc_follow_path_0346
0d4c0     18 89 02 F6 | 	mov	local03, result1
0d4c4     0C 5E 05 F1 | 	add	fp, #12
0d4c8     AF 88 62 FC | 	wrlong	local03, fp
0d4cc     AF 86 0A FB | 	rdlong	local02, fp wz
0d4d0     0C 5E 85 F1 | 	sub	fp, #12
0d4d4     50 00 90 5D |  if_ne	jmp	#LR__0801
0d4d8     3B 5E 05 F1 | 	add	fp, #59
0d4dc     AF 86 C2 FA | 	rdbyte	local02, fp
0d4e0     3B 5E 85 F1 | 	sub	fp, #59
0d4e4     07 86 46 F7 | 	zerox	local02, #7
0d4e8     80 86 CE F7 | 	test	local02, #128 wz
0d4ec     10 00 90 AD |  if_e	jmp	#LR__0798
0d4f0     0C 5E 05 F1 | 	add	fp, #12
0d4f4     AF 0C 68 FC | 	wrlong	#6, fp
0d4f8     0C 5E 85 F1 | 	sub	fp, #12
0d4fc     28 00 90 FD | 	jmp	#LR__0800
0d500                 | LR__0798
0d500     08 5E 05 F1 | 	add	fp, #8
0d504     AF 86 0A FB | 	rdlong	local02, fp wz
0d508     08 5E 85 F1 | 	sub	fp, #8
0d50c     18 00 90 AD |  if_e	jmp	#LR__0799
0d510     10 5E 05 F1 | 	add	fp, #16
0d514     AF 76 02 F6 | 	mov	arg01, fp
0d518     08 5E 85 F1 | 	sub	fp, #8
0d51c     AF 78 02 FB | 	rdlong	arg02, fp
0d520     08 5E 85 F1 | 	sub	fp, #8
0d524     E4 CC BF FD | 	call	#_ff_cc_get_fileinfo_0334
0d528                 | LR__0799
0d528                 | LR__0800
0d528                 | LR__0801
0d528                 | LR__0802
0d528                 | ' 			}
0d528                 | ' 		}
0d528                 | ' 		;
0d528                 | ' 	}
0d528                 | ' 
0d528                 | ' 	return res ;
0d528     0C 5E 05 F1 | 	add	fp, #12
0d52c     AF 30 02 FB | 	rdlong	result1, fp
0d530     0C 5E 85 F1 | 	sub	fp, #12
0d534     AF F0 03 F6 | 	mov	ptra, fp
0d538     BF 00 A0 FD | 	call	#popregs_
0d53c                 | _ff_cc_f_stat_ret
0d53c     2D 00 64 FD | 	ret
0d540                 | 
0d540                 | _ff_cc_f_unlink
0d540     06 5A 05 F6 | 	mov	COUNT_, #6
0d544     B0 00 A0 FD | 	call	#pushregs_
0d548     6C F0 07 F1 | 	add	ptra, #108
0d54c     04 5E 05 F1 | 	add	fp, #4
0d550     AF 76 62 FC | 	wrlong	arg01, fp
0d554     60 5E 05 F1 | 	add	fp, #96
0d558     AF 00 68 FC | 	wrlong	#0, fp
0d55c     60 5E 85 F1 | 	sub	fp, #96
0d560     AF 76 02 F6 | 	mov	arg01, fp
0d564     64 5E 05 F1 | 	add	fp, #100
0d568     AF 78 02 F6 | 	mov	arg02, fp
0d56c     68 5E 85 F1 | 	sub	fp, #104
0d570     02 7A 06 F6 | 	mov	arg03, #2
0d574     68 D5 BF FD | 	call	#_ff_cc_mount_volume_0369
0d578     18 85 02 F6 | 	mov	local01, result1
0d57c     08 5E 05 F1 | 	add	fp, #8
0d580     AF 84 62 FC | 	wrlong	local01, fp
0d584     AF 86 0A FB | 	rdlong	local02, fp wz
0d588     08 5E 85 F1 | 	sub	fp, #8
0d58c     18 02 90 5D |  if_ne	jmp	#LR__0812
0d590     68 5E 05 F1 | 	add	fp, #104
0d594     AF 86 02 FB | 	rdlong	local02, fp
0d598     5C 5E 85 F1 | 	sub	fp, #92
0d59c     AF 86 62 FC | 	wrlong	local02, fp
0d5a0     AF 76 02 F6 | 	mov	arg01, fp
0d5a4     08 5E 85 F1 | 	sub	fp, #8
0d5a8     AF 78 02 FB | 	rdlong	arg02, fp
0d5ac     04 5E 85 F1 | 	sub	fp, #4
0d5b0     F0 CF BF FD | 	call	#_ff_cc_follow_path_0346
0d5b4     18 89 02 F6 | 	mov	local03, result1
0d5b8     08 5E 05 F1 | 	add	fp, #8
0d5bc     AF 88 62 FC | 	wrlong	local03, fp
0d5c0     AF 86 0A FB | 	rdlong	local02, fp wz
0d5c4     08 5E 85 F1 | 	sub	fp, #8
0d5c8     DC 01 90 5D |  if_ne	jmp	#LR__0811
0d5cc     37 5E 05 F1 | 	add	fp, #55
0d5d0     AF 86 C2 FA | 	rdbyte	local02, fp
0d5d4     37 5E 85 F1 | 	sub	fp, #55
0d5d8     07 86 46 F7 | 	zerox	local02, #7
0d5dc     80 86 CE F7 | 	test	local02, #128 wz
0d5e0     10 00 90 AD |  if_e	jmp	#LR__0803
0d5e4     08 5E 05 F1 | 	add	fp, #8
0d5e8     AF 0C 68 FC | 	wrlong	#6, fp
0d5ec     08 5E 85 F1 | 	sub	fp, #8
0d5f0     20 00 90 FD | 	jmp	#LR__0804
0d5f4                 | LR__0803
0d5f4     12 5E 05 F1 | 	add	fp, #18
0d5f8     AF 86 C2 FA | 	rdbyte	local02, fp
0d5fc     12 5E 85 F1 | 	sub	fp, #18
0d600     07 86 46 F7 | 	zerox	local02, #7
0d604     01 86 CE F7 | 	test	local02, #1 wz
0d608     08 5E 05 51 |  if_ne	add	fp, #8
0d60c     AF 0E 68 5C |  if_ne	wrlong	#7, fp
0d610     08 5E 85 51 |  if_ne	sub	fp, #8
0d614                 | LR__0804
0d614     08 5E 05 F1 | 	add	fp, #8
0d618     AF 86 0A FB | 	rdlong	local02, fp wz
0d61c     08 5E 85 F1 | 	sub	fp, #8
0d620     D4 00 90 5D |  if_ne	jmp	#LR__0807
0d624     68 5E 05 F1 | 	add	fp, #104
0d628     AF 76 02 FB | 	rdlong	arg01, fp
0d62c     40 5E 85 F1 | 	sub	fp, #64
0d630     AF 78 02 FB | 	rdlong	arg02, fp
0d634     28 5E 85 F1 | 	sub	fp, #40
0d638     38 C8 BF FD | 	call	#_ff_cc_ld_clust_0314
0d63c     18 89 02 F6 | 	mov	local03, result1
0d640     64 5E 05 F1 | 	add	fp, #100
0d644     AF 88 62 FC | 	wrlong	local03, fp
0d648     52 5E 85 F1 | 	sub	fp, #82
0d64c     AF 86 C2 FA | 	rdbyte	local02, fp
0d650     12 5E 85 F1 | 	sub	fp, #18
0d654     07 86 46 F7 | 	zerox	local02, #7
0d658     10 86 CE F7 | 	test	local02, #16 wz
0d65c     98 00 90 AD |  if_e	jmp	#LR__0806
0d660     68 5E 05 F1 | 	add	fp, #104
0d664     AF 86 02 FB | 	rdlong	local02, fp
0d668     30 5E 85 F1 | 	sub	fp, #48
0d66c     AF 86 62 FC | 	wrlong	local02, fp
0d670     2C 5E 05 F1 | 	add	fp, #44
0d674     AF 86 02 FB | 	rdlong	local02, fp
0d678     24 5E 85 F1 | 	sub	fp, #36
0d67c     AF 86 62 FC | 	wrlong	local02, fp
0d680     08 5E 85 F1 | 	sub	fp, #8
0d684     AF 76 02 F6 | 	mov	arg01, fp
0d688     38 5E 85 F1 | 	sub	fp, #56
0d68c     00 78 06 F6 | 	mov	arg02, #0
0d690     B8 C3 BF FD | 	call	#_ff_cc_dir_sdi_0304
0d694     18 8B 02 F6 | 	mov	local04, result1
0d698     08 5E 05 F1 | 	add	fp, #8
0d69c     AF 8A 62 FC | 	wrlong	local04, fp
0d6a0     AF 86 0A FB | 	rdlong	local02, fp wz
0d6a4     08 5E 85 F1 | 	sub	fp, #8
0d6a8     4C 00 90 5D |  if_ne	jmp	#LR__0805
0d6ac     38 5E 05 F1 | 	add	fp, #56
0d6b0     AF 76 02 F6 | 	mov	arg01, fp
0d6b4     38 5E 85 F1 | 	sub	fp, #56
0d6b8     00 78 06 F6 | 	mov	arg02, #0
0d6bc     5C C8 BF FD | 	call	#_ff_cc_dir_read_0320
0d6c0     08 5E 05 F1 | 	add	fp, #8
0d6c4     AF 30 62 FC | 	wrlong	result1, fp
0d6c8     AF 86 0A FB | 	rdlong	local02, fp wz
0d6cc     08 5E 85 F1 | 	sub	fp, #8
0d6d0     08 5E 05 A1 |  if_e	add	fp, #8
0d6d4     AF 0E 68 AC |  if_e	wrlong	#7, fp
0d6d8     08 5E 85 A1 |  if_e	sub	fp, #8
0d6dc     08 5E 05 F1 | 	add	fp, #8
0d6e0     AF 86 02 FB | 	rdlong	local02, fp
0d6e4     08 5E 85 F1 | 	sub	fp, #8
0d6e8     04 86 0E F2 | 	cmp	local02, #4 wz
0d6ec     08 5E 05 A1 |  if_e	add	fp, #8
0d6f0     AF 00 68 AC |  if_e	wrlong	#0, fp
0d6f4     08 5E 85 A1 |  if_e	sub	fp, #8
0d6f8                 | LR__0805
0d6f8                 | LR__0806
0d6f8                 | LR__0807
0d6f8     08 5E 05 F1 | 	add	fp, #8
0d6fc     AF 86 0A FB | 	rdlong	local02, fp wz
0d700     08 5E 85 F1 | 	sub	fp, #8
0d704     A0 00 90 5D |  if_ne	jmp	#LR__0810
0d708     0C 5E 05 F1 | 	add	fp, #12
0d70c     AF 76 02 F6 | 	mov	arg01, fp
0d710     0C 5E 85 F1 | 	sub	fp, #12
0d714     A4 CA BF FD | 	call	#_ff_cc_dir_remove_0330
0d718     08 5E 05 F1 | 	add	fp, #8
0d71c     AF 30 62 FC | 	wrlong	result1, fp
0d720     AF 86 0A FB | 	rdlong	local02, fp wz
0d724     08 5E 85 F1 | 	sub	fp, #8
0d728     50 00 90 5D |  if_ne	jmp	#LR__0808
0d72c     64 5E 05 F1 | 	add	fp, #100
0d730     AF 8C 0A FB | 	rdlong	local05, fp wz
0d734     64 5E 85 F1 | 	sub	fp, #100
0d738     40 00 90 AD |  if_e	jmp	#LR__0808
0d73c     0C 5E 05 F1 | 	add	fp, #12
0d740     AF 86 02 F6 | 	mov	local02, fp
0d744     43 8F 02 F6 | 	mov	local06, local02
0d748     58 5E 05 F1 | 	add	fp, #88
0d74c     AF 8A 02 FB | 	rdlong	local04, fp
0d750     64 5E 85 F1 | 	sub	fp, #100
0d754     45 8D 02 F6 | 	mov	local05, local04
0d758     00 88 06 F6 | 	mov	local03, #0
0d75c     47 77 02 F6 | 	mov	arg01, local06
0d760     46 79 02 F6 | 	mov	arg02, local05
0d764     00 7A 06 F6 | 	mov	arg03, #0
0d768     8C BE BF FD | 	call	#_ff_cc_remove_chain_0289
0d76c     18 85 02 F6 | 	mov	local01, result1
0d770     08 5E 05 F1 | 	add	fp, #8
0d774     AF 84 62 FC | 	wrlong	local01, fp
0d778     08 5E 85 F1 | 	sub	fp, #8
0d77c                 | LR__0808
0d77c     08 5E 05 F1 | 	add	fp, #8
0d780     AF 86 0A FB | 	rdlong	local02, fp wz
0d784     08 5E 85 F1 | 	sub	fp, #8
0d788     1C 00 90 5D |  if_ne	jmp	#LR__0809
0d78c     68 5E 05 F1 | 	add	fp, #104
0d790     AF 76 02 FB | 	rdlong	arg01, fp
0d794     68 5E 85 F1 | 	sub	fp, #104
0d798     D8 B7 BF FD | 	call	#_ff_cc_sync_fs_0275
0d79c     08 5E 05 F1 | 	add	fp, #8
0d7a0     AF 30 62 FC | 	wrlong	result1, fp
0d7a4     08 5E 85 F1 | 	sub	fp, #8
0d7a8                 | LR__0809
0d7a8                 | LR__0810
0d7a8                 | LR__0811
0d7a8                 | LR__0812
0d7a8                 | ' 			}
0d7a8                 | ' 		}
0d7a8                 | ' 		;
0d7a8                 | ' 	}
0d7a8                 | ' 
0d7a8                 | ' 	return res ;
0d7a8     08 5E 05 F1 | 	add	fp, #8
0d7ac     AF 30 02 FB | 	rdlong	result1, fp
0d7b0     08 5E 85 F1 | 	sub	fp, #8
0d7b4     AF F0 03 F6 | 	mov	ptra, fp
0d7b8     BF 00 A0 FD | 	call	#popregs_
0d7bc                 | _ff_cc_f_unlink_ret
0d7bc     2D 00 64 FD | 	ret
0d7c0                 | 
0d7c0                 | _ff_cc_f_mkdir
0d7c0     06 5A 05 F6 | 	mov	COUNT_, #6
0d7c4     B0 00 A0 FD | 	call	#pushregs_
0d7c8     58 F0 07 F1 | 	add	ptra, #88
0d7cc     04 5E 05 F1 | 	add	fp, #4
0d7d0     AF 76 62 FC | 	wrlong	arg01, fp
0d7d4     AF 76 02 F6 | 	mov	arg01, fp
0d7d8     44 5E 05 F1 | 	add	fp, #68
0d7dc     AF 78 02 F6 | 	mov	arg02, fp
0d7e0     48 5E 85 F1 | 	sub	fp, #72
0d7e4     02 7A 06 F6 | 	mov	arg03, #2
0d7e8     F4 D2 BF FD | 	call	#_ff_cc_mount_volume_0369
0d7ec     18 85 02 F6 | 	mov	local01, result1
0d7f0     08 5E 05 F1 | 	add	fp, #8
0d7f4     AF 84 62 FC | 	wrlong	local01, fp
0d7f8     AF 86 0A FB | 	rdlong	local02, fp wz
0d7fc     08 5E 85 F1 | 	sub	fp, #8
0d800     04 03 90 5D |  if_ne	jmp	#LR__0822
0d804     48 5E 05 F1 | 	add	fp, #72
0d808     AF 86 02 FB | 	rdlong	local02, fp
0d80c     3C 5E 85 F1 | 	sub	fp, #60
0d810     AF 86 62 FC | 	wrlong	local02, fp
0d814     AF 76 02 F6 | 	mov	arg01, fp
0d818     08 5E 85 F1 | 	sub	fp, #8
0d81c     AF 88 02 FB | 	rdlong	local03, fp
0d820     04 5E 85 F1 | 	sub	fp, #4
0d824     44 79 02 F6 | 	mov	arg02, local03
0d828     78 CD BF FD | 	call	#_ff_cc_follow_path_0346
0d82c     18 8B 02 F6 | 	mov	local04, result1
0d830     08 5E 05 F1 | 	add	fp, #8
0d834     AF 8A 62 FC | 	wrlong	local04, fp
0d838     45 8D 02 F6 | 	mov	local05, local04
0d83c     08 5E 85 F1 | 	sub	fp, #8
0d840     46 87 0A F6 | 	mov	local02, local05 wz
0d844     08 5E 05 A1 |  if_e	add	fp, #8
0d848     AF 10 68 AC |  if_e	wrlong	#8, fp
0d84c     08 5E 85 A1 |  if_e	sub	fp, #8
0d850     08 5E 05 F1 | 	add	fp, #8
0d854     AF 86 02 FB | 	rdlong	local02, fp
0d858     08 5E 85 F1 | 	sub	fp, #8
0d85c     04 86 0E F2 | 	cmp	local02, #4 wz
0d860     A4 02 90 5D |  if_ne	jmp	#LR__0821
0d864     48 5E 05 F1 | 	add	fp, #72
0d868     AF 86 02 FB | 	rdlong	local02, fp
0d86c     10 5E 85 F1 | 	sub	fp, #16
0d870     AF 86 62 FC | 	wrlong	local02, fp
0d874     AF 76 02 F6 | 	mov	arg01, fp
0d878     38 5E 85 F1 | 	sub	fp, #56
0d87c     00 78 06 F6 | 	mov	arg02, #0
0d880     8C BE BF FD | 	call	#_ff_cc_create_chain_0295
0d884     18 8F 02 F6 | 	mov	local06, result1
0d888     4C 5E 05 F1 | 	add	fp, #76
0d88c     AF 8E 62 FC | 	wrlong	local06, fp
0d890     44 5E 85 F1 | 	sub	fp, #68
0d894     AF 00 68 FC | 	wrlong	#0, fp
0d898     44 5E 05 F1 | 	add	fp, #68
0d89c     AF 86 0A FB | 	rdlong	local02, fp wz
0d8a0     4C 5E 85 F1 | 	sub	fp, #76
0d8a4     08 5E 05 A1 |  if_e	add	fp, #8
0d8a8     AF 0E 68 AC |  if_e	wrlong	#7, fp
0d8ac     08 5E 85 A1 |  if_e	sub	fp, #8
0d8b0     4C 5E 05 F1 | 	add	fp, #76
0d8b4     AF 86 02 FB | 	rdlong	local02, fp
0d8b8     4C 5E 85 F1 | 	sub	fp, #76
0d8bc     01 86 0E F2 | 	cmp	local02, #1 wz
0d8c0     08 5E 05 A1 |  if_e	add	fp, #8
0d8c4     AF 04 68 AC |  if_e	wrlong	#2, fp
0d8c8     08 5E 85 A1 |  if_e	sub	fp, #8
0d8cc     4C 5E 05 F1 | 	add	fp, #76
0d8d0     AF 86 02 FB | 	rdlong	local02, fp
0d8d4     4C 5E 85 F1 | 	sub	fp, #76
0d8d8     FF FF 7F FF 
0d8dc     FF 87 0E F2 | 	cmp	local02, ##-1 wz
0d8e0     08 5E 05 A1 |  if_e	add	fp, #8
0d8e4     AF 02 68 AC |  if_e	wrlong	#1, fp
0d8e8     08 5E 85 A1 |  if_e	sub	fp, #8
0d8ec     54 5E 05 F1 | 	add	fp, #84
0d8f0     80 10 A7 FF 
0d8f4     AF 00 68 FC | 	wrlong	##1310785536, fp
0d8f8     4C 5E 85 F1 | 	sub	fp, #76
0d8fc     AF 86 0A FB | 	rdlong	local02, fp wz
0d900     08 5E 85 F1 | 	sub	fp, #8
0d904     48 01 90 5D |  if_ne	jmp	#LR__0818
0d908     48 5E 05 F1 | 	add	fp, #72
0d90c     AF 76 02 FB | 	rdlong	arg01, fp
0d910     04 5E 05 F1 | 	add	fp, #4
0d914     AF 8E 02 FB | 	rdlong	local06, fp
0d918     4C 5E 85 F1 | 	sub	fp, #76
0d91c     47 89 02 F6 | 	mov	local03, local06
0d920     44 79 02 F6 | 	mov	arg02, local03
0d924     48 C0 BF FD | 	call	#_ff_cc_dir_clear_0300
0d928     18 8B 02 F6 | 	mov	local04, result1
0d92c     08 5E 05 F1 | 	add	fp, #8
0d930     AF 8A 62 FC | 	wrlong	local04, fp
0d934     45 8D 02 F6 | 	mov	local05, local04
0d938     08 5E 85 F1 | 	sub	fp, #8
0d93c     46 87 0A F6 | 	mov	local02, local05 wz
0d940     0C 01 90 5D |  if_ne	jmp	#LR__0817
0d944     48 5E 05 F1 | 	add	fp, #72
0d948     AF 76 02 FB | 	rdlong	arg01, fp
0d94c     48 5E 85 F1 | 	sub	fp, #72
0d950     30 76 06 F1 | 	add	arg01, #48
0d954     20 78 06 F6 | 	mov	arg02, #32
0d958     0B 7A 06 F6 | 	mov	arg03, #11
0d95c                 | ' {
0d95c                 | ' 	BYTE *d = (BYTE*)dst;
0d95c                 | ' 
0d95c                 | ' 	do {
0d95c     AC 26 9F FE | 	loc	pa,	#(@LR__0815-@LR__0813)
0d960     93 00 A0 FD | 	call	#FCACHE_LOAD_
0d964                 | LR__0813
0d964     0B 04 DC FC | 	rep	@LR__0816, #11
0d968                 | LR__0814
0d968     3B 79 42 FC | 	wrbyte	arg02, arg01
0d96c     01 76 06 F1 | 	add	arg01, #1
0d970                 | LR__0815
0d970                 | LR__0816
0d970     48 5E 05 F1 | 	add	fp, #72
0d974     AF 86 02 FB | 	rdlong	local02, fp
0d978     30 86 06 F1 | 	add	local02, #48
0d97c     43 5D 48 FC | 	wrbyte	#46, local02
0d980     AF 86 02 FB | 	rdlong	local02, fp
0d984     3B 86 06 F1 | 	add	local02, #59
0d988     43 21 48 FC | 	wrbyte	#16, local02
0d98c     AF 76 02 FB | 	rdlong	arg01, fp
0d990     46 76 06 F1 | 	add	arg01, #70
0d994     0C 5E 05 F1 | 	add	fp, #12
0d998     AF 78 02 FB | 	rdlong	arg02, fp
0d99c     54 5E 85 F1 | 	sub	fp, #84
0d9a0     C0 B3 BF FD | 	call	#_ff_cc_st_dword_0257
0d9a4     48 5E 05 F1 | 	add	fp, #72
0d9a8     AF 76 02 FB | 	rdlong	arg01, fp
0d9ac     3B 79 02 F6 | 	mov	arg02, arg01
0d9b0     30 78 06 F1 | 	add	arg02, #48
0d9b4     04 5E 05 F1 | 	add	fp, #4
0d9b8     AF 7A 02 FB | 	rdlong	arg03, fp
0d9bc     4C 5E 85 F1 | 	sub	fp, #76
0d9c0     08 C5 BF FD | 	call	#_ff_cc_st_clust_0315
0d9c4     48 5E 05 F1 | 	add	fp, #72
0d9c8     AF 76 02 FB | 	rdlong	arg01, fp
0d9cc     50 76 06 F1 | 	add	arg01, #80
0d9d0     AF 78 02 FB | 	rdlong	arg02, fp
0d9d4     48 5E 85 F1 | 	sub	fp, #72
0d9d8     30 78 06 F1 | 	add	arg02, #48
0d9dc     20 7A 06 F6 | 	mov	arg03, #32
0d9e0     AC B3 BF FD | 	call	#_ff_cc_mem_cpy_0260
0d9e4     48 5E 05 F1 | 	add	fp, #72
0d9e8     AF 86 02 FB | 	rdlong	local02, fp
0d9ec     51 86 06 F1 | 	add	local02, #81
0d9f0     43 5D 48 FC | 	wrbyte	#46, local02
0d9f4     34 5E 85 F1 | 	sub	fp, #52
0d9f8     AF 86 02 FB | 	rdlong	local02, fp
0d9fc     3C 5E 05 F1 | 	add	fp, #60
0da00     AF 86 62 FC | 	wrlong	local02, fp
0da04     08 5E 85 F1 | 	sub	fp, #8
0da08     AF 76 02 FB | 	rdlong	arg01, fp
0da0c     3B 79 02 F6 | 	mov	arg02, arg01
0da10     50 78 06 F1 | 	add	arg02, #80
0da14     08 5E 05 F1 | 	add	fp, #8
0da18     AF 7A 02 FB | 	rdlong	arg03, fp
0da1c     50 5E 85 F1 | 	sub	fp, #80
0da20     A8 C4 BF FD | 	call	#_ff_cc_st_clust_0315
0da24     48 5E 05 F1 | 	add	fp, #72
0da28     AF 86 02 FB | 	rdlong	local02, fp
0da2c     03 86 06 F1 | 	add	local02, #3
0da30     43 03 48 FC | 	wrbyte	#1, local02
0da34     3C 5E 85 F1 | 	sub	fp, #60
0da38     AF 76 02 F6 | 	mov	arg01, fp
0da3c     0C 5E 85 F1 | 	sub	fp, #12
0da40     E4 C6 BF FD | 	call	#_ff_cc_dir_register_0327
0da44     08 5E 05 F1 | 	add	fp, #8
0da48     AF 30 62 FC | 	wrlong	result1, fp
0da4c     08 5E 85 F1 | 	sub	fp, #8
0da50                 | LR__0817
0da50                 | LR__0818
0da50     08 5E 05 F1 | 	add	fp, #8
0da54     AF 86 0A FB | 	rdlong	local02, fp wz
0da58     08 5E 85 F1 | 	sub	fp, #8
0da5c     8C 00 90 5D |  if_ne	jmp	#LR__0819
0da60     28 5E 05 F1 | 	add	fp, #40
0da64     AF 76 02 FB | 	rdlong	arg01, fp
0da68     16 76 06 F1 | 	add	arg01, #22
0da6c     2C 5E 05 F1 | 	add	fp, #44
0da70     AF 78 02 FB | 	rdlong	arg02, fp
0da74     54 5E 85 F1 | 	sub	fp, #84
0da78     E8 B2 BF FD | 	call	#_ff_cc_st_dword_0257
0da7c     48 5E 05 F1 | 	add	fp, #72
0da80     AF 76 02 FB | 	rdlong	arg01, fp
0da84     20 5E 85 F1 | 	sub	fp, #32
0da88     AF 78 02 FB | 	rdlong	arg02, fp
0da8c     24 5E 05 F1 | 	add	fp, #36
0da90     AF 7A 02 FB | 	rdlong	arg03, fp
0da94     4C 5E 85 F1 | 	sub	fp, #76
0da98     30 C4 BF FD | 	call	#_ff_cc_st_clust_0315
0da9c     28 5E 05 F1 | 	add	fp, #40
0daa0     AF 86 02 FB | 	rdlong	local02, fp
0daa4     0B 86 06 F1 | 	add	local02, #11
0daa8     43 21 48 FC | 	wrbyte	#16, local02
0daac     20 5E 05 F1 | 	add	fp, #32
0dab0     AF 86 02 FB | 	rdlong	local02, fp
0dab4     03 86 06 F1 | 	add	local02, #3
0dab8     43 03 48 FC | 	wrbyte	#1, local02
0dabc     40 5E 85 F1 | 	sub	fp, #64
0dac0     AF 86 0A FB | 	rdlong	local02, fp wz
0dac4     08 5E 85 F1 | 	sub	fp, #8
0dac8     3C 00 90 5D |  if_ne	jmp	#LR__0820
0dacc     48 5E 05 F1 | 	add	fp, #72
0dad0     AF 76 02 FB | 	rdlong	arg01, fp
0dad4     48 5E 85 F1 | 	sub	fp, #72
0dad8     98 B4 BF FD | 	call	#_ff_cc_sync_fs_0275
0dadc     08 5E 05 F1 | 	add	fp, #8
0dae0     AF 30 62 FC | 	wrlong	result1, fp
0dae4     08 5E 85 F1 | 	sub	fp, #8
0dae8     1C 00 90 FD | 	jmp	#LR__0820
0daec                 | LR__0819
0daec     38 5E 05 F1 | 	add	fp, #56
0daf0     AF 76 02 F6 | 	mov	arg01, fp
0daf4     14 5E 05 F1 | 	add	fp, #20
0daf8     AF 78 02 FB | 	rdlong	arg02, fp
0dafc     4C 5E 85 F1 | 	sub	fp, #76
0db00     00 7A 06 F6 | 	mov	arg03, #0
0db04     F0 BA BF FD | 	call	#_ff_cc_remove_chain_0289
0db08                 | LR__0820
0db08                 | LR__0821
0db08                 | LR__0822
0db08                 | ' 				remove_chain(&sobj, dcl, 0);
0db08                 | ' 			}
0db08                 | ' 		}
0db08                 | ' 		;
0db08                 | ' 	}
0db08                 | ' 
0db08                 | ' 	return res ;
0db08     08 5E 05 F1 | 	add	fp, #8
0db0c     AF 30 02 FB | 	rdlong	result1, fp
0db10     08 5E 85 F1 | 	sub	fp, #8
0db14     AF F0 03 F6 | 	mov	ptra, fp
0db18     BF 00 A0 FD | 	call	#popregs_
0db1c                 | _ff_cc_f_mkdir_ret
0db1c     2D 00 64 FD | 	ret
0db20                 | 
0db20                 | _ff_cc_f_rename
0db20     09 5A 05 F6 | 	mov	COUNT_, #9
0db24     B0 00 A0 FD | 	call	#pushregs_
0db28     94 F0 07 F1 | 	add	ptra, #148
0db2c     04 5E 05 F1 | 	add	fp, #4
0db30     AF 76 62 FC | 	wrlong	arg01, fp
0db34     04 5E 05 F1 | 	add	fp, #4
0db38     AF 78 62 FC | 	wrlong	arg02, fp
0db3c     AF 76 02 F6 | 	mov	arg01, fp
0db40     08 5E 85 F1 | 	sub	fp, #8
0db44     80 CC BF FD | 	call	#_ff_cc_get_ldnumber_0352
0db48     04 5E 05 F1 | 	add	fp, #4
0db4c     AF 76 02 F6 | 	mov	arg01, fp
0db50     64 5E 05 F1 | 	add	fp, #100
0db54     AF 78 02 F6 | 	mov	arg02, fp
0db58     68 5E 85 F1 | 	sub	fp, #104
0db5c     02 7A 06 F6 | 	mov	arg03, #2
0db60     7C CF BF FD | 	call	#_ff_cc_mount_volume_0369
0db64     18 85 02 F6 | 	mov	local01, result1
0db68     0C 5E 05 F1 | 	add	fp, #12
0db6c     AF 84 62 FC | 	wrlong	local01, fp
0db70     AF 86 0A FB | 	rdlong	local02, fp wz
0db74     0C 5E 85 F1 | 	sub	fp, #12
0db78     B8 03 90 5D |  if_ne	jmp	#LR__0837
0db7c     68 5E 05 F1 | 	add	fp, #104
0db80     AF 86 02 FB | 	rdlong	local02, fp
0db84     58 5E 85 F1 | 	sub	fp, #88
0db88     AF 86 62 FC | 	wrlong	local02, fp
0db8c     AF 76 02 F6 | 	mov	arg01, fp
0db90     0C 5E 85 F1 | 	sub	fp, #12
0db94     AF 78 02 FB | 	rdlong	arg02, fp
0db98     04 5E 85 F1 | 	sub	fp, #4
0db9c     04 CA BF FD | 	call	#_ff_cc_follow_path_0346
0dba0     18 89 02 F6 | 	mov	local03, result1
0dba4     0C 5E 05 F1 | 	add	fp, #12
0dba8     AF 88 62 FC | 	wrlong	local03, fp
0dbac     AF 8A 0A FB | 	rdlong	local04, fp wz
0dbb0     0C 5E 85 F1 | 	sub	fp, #12
0dbb4     2C 00 90 5D |  if_ne	jmp	#LR__0823
0dbb8     3B 5E 05 F1 | 	add	fp, #59
0dbbc     AF 8C C2 FA | 	rdbyte	local05, fp
0dbc0     3B 5E 85 F1 | 	sub	fp, #59
0dbc4     46 8F 02 F6 | 	mov	local06, local05
0dbc8     07 8E 46 F7 | 	zerox	local06, #7
0dbcc     A0 8E 0E F5 | 	and	local06, #160 wz
0dbd0     10 00 90 AD |  if_e	jmp	#LR__0823
0dbd4     06 86 06 F6 | 	mov	local02, #6
0dbd8     0C 5E 05 F1 | 	add	fp, #12
0dbdc     AF 0C 68 FC | 	wrlong	#6, fp
0dbe0     0C 5E 85 F1 | 	sub	fp, #12
0dbe4                 | LR__0823
0dbe4     0C 5E 05 F1 | 	add	fp, #12
0dbe8     AF 86 0A FB | 	rdlong	local02, fp wz
0dbec     0C 5E 85 F1 | 	sub	fp, #12
0dbf0     40 03 90 5D |  if_ne	jmp	#LR__0836
0dbf4     6C 5E 05 F1 | 	add	fp, #108
0dbf8     AF 76 02 F6 | 	mov	arg01, fp
0dbfc     40 5E 85 F1 | 	sub	fp, #64
0dc00     AF 78 02 FB | 	rdlong	arg02, fp
0dc04     2C 5E 85 F1 | 	sub	fp, #44
0dc08     20 7A 06 F6 | 	mov	arg03, #32
0dc0c     80 B1 BF FD | 	call	#_ff_cc_mem_cpy_0260
0dc10     3C 5E 05 F1 | 	add	fp, #60
0dc14     AF 76 02 F6 | 	mov	arg01, fp
0dc18     2C 5E 85 F1 | 	sub	fp, #44
0dc1c     AF 78 02 F6 | 	mov	arg02, fp
0dc20     10 5E 85 F1 | 	sub	fp, #16
0dc24     2C 7A 06 F6 | 	mov	arg03, #44
0dc28     64 B1 BF FD | 	call	#_ff_cc_mem_cpy_0260
0dc2c     3C 5E 05 F1 | 	add	fp, #60
0dc30     AF 76 02 F6 | 	mov	arg01, fp
0dc34     34 5E 85 F1 | 	sub	fp, #52
0dc38     AF 78 02 FB | 	rdlong	arg02, fp
0dc3c     08 5E 85 F1 | 	sub	fp, #8
0dc40     60 C9 BF FD | 	call	#_ff_cc_follow_path_0346
0dc44     0C 5E 05 F1 | 	add	fp, #12
0dc48     AF 30 62 FC | 	wrlong	result1, fp
0dc4c     AF 86 0A FB | 	rdlong	local02, fp wz
0dc50     0C 5E 85 F1 | 	sub	fp, #12
0dc54     4C 00 90 5D |  if_ne	jmp	#LR__0826
0dc58     44 5E 05 F1 | 	add	fp, #68
0dc5c     AF 8A 02 FB | 	rdlong	local04, fp
0dc60     2C 5E 85 F1 | 	sub	fp, #44
0dc64     AF 8C 02 FB | 	rdlong	local05, fp
0dc68     18 5E 85 F1 | 	sub	fp, #24
0dc6c     46 8B 0A F2 | 	cmp	local04, local05 wz
0dc70     20 00 90 5D |  if_ne	jmp	#LR__0824
0dc74     4C 5E 05 F1 | 	add	fp, #76
0dc78     AF 84 02 FB | 	rdlong	local01, fp
0dc7c     2C 5E 85 F1 | 	sub	fp, #44
0dc80     AF 90 02 FB | 	rdlong	local07, fp
0dc84     20 5E 85 F1 | 	sub	fp, #32
0dc88     48 85 0A F2 | 	cmp	local01, local07 wz
0dc8c     04 86 06 A6 |  if_e	mov	local02, #4
0dc90     04 00 90 AD |  if_e	jmp	#LR__0825
0dc94                 | LR__0824
0dc94     08 86 06 F6 | 	mov	local02, #8
0dc98                 | LR__0825
0dc98     0C 5E 05 F1 | 	add	fp, #12
0dc9c     AF 86 62 FC | 	wrlong	local02, fp
0dca0     0C 5E 85 F1 | 	sub	fp, #12
0dca4                 | LR__0826
0dca4     0C 5E 05 F1 | 	add	fp, #12
0dca8     AF 86 02 FB | 	rdlong	local02, fp
0dcac     0C 5E 85 F1 | 	sub	fp, #12
0dcb0     04 86 0E F2 | 	cmp	local02, #4 wz
0dcb4     28 02 90 5D |  if_ne	jmp	#LR__0833
0dcb8     3C 5E 05 F1 | 	add	fp, #60
0dcbc     AF 76 02 F6 | 	mov	arg01, fp
0dcc0     3C 5E 85 F1 | 	sub	fp, #60
0dcc4     60 C4 BF FD | 	call	#_ff_cc_dir_register_0327
0dcc8     0C 5E 05 F1 | 	add	fp, #12
0dccc     AF 30 62 FC | 	wrlong	result1, fp
0dcd0     AF 86 0A FB | 	rdlong	local02, fp wz
0dcd4     0C 5E 85 F1 | 	sub	fp, #12
0dcd8     04 02 90 5D |  if_ne	jmp	#LR__0832
0dcdc     58 5E 05 F1 | 	add	fp, #88
0dce0     AF 76 02 FB | 	rdlong	arg01, fp
0dce4     34 5E 05 F1 | 	add	fp, #52
0dce8     AF 76 62 FC | 	wrlong	arg01, fp
0dcec     0D 76 06 F1 | 	add	arg01, #13
0dcf0     20 5E 85 F1 | 	sub	fp, #32
0dcf4     AF 78 02 F6 | 	mov	arg02, fp
0dcf8     6C 5E 85 F1 | 	sub	fp, #108
0dcfc     0D 78 06 F1 | 	add	arg02, #13
0dd00     13 7A 06 F6 | 	mov	arg03, #19
0dd04     88 B0 BF FD | 	call	#_ff_cc_mem_cpy_0260
0dd08     8C 5E 05 F1 | 	add	fp, #140
0dd0c     AF 86 02 FB | 	rdlong	local02, fp
0dd10     15 5E 85 F1 | 	sub	fp, #21
0dd14     AF 8E C2 FA | 	rdbyte	local06, fp
0dd18     0B 86 06 F1 | 	add	local02, #11
0dd1c     43 8F 42 FC | 	wrbyte	local06, local02
0dd20     15 5E 05 F1 | 	add	fp, #21
0dd24     AF 8A 02 FB | 	rdlong	local04, fp
0dd28     8C 5E 85 F1 | 	sub	fp, #140
0dd2c     0B 8A 06 F1 | 	add	local04, #11
0dd30     45 87 C2 FA | 	rdbyte	local02, local04
0dd34     10 86 CE F7 | 	test	local02, #16 wz
0dd38     24 00 90 5D |  if_ne	jmp	#LR__0827
0dd3c     8C 5E 05 F1 | 	add	fp, #140
0dd40     AF 86 02 FB | 	rdlong	local02, fp
0dd44     43 8D 02 F6 | 	mov	local05, local02
0dd48     8C 5E 85 F1 | 	sub	fp, #140
0dd4c     0B 8C 06 F1 | 	add	local05, #11
0dd50     46 8F C2 FA | 	rdbyte	local06, local05
0dd54     20 8E 46 F5 | 	or	local06, #32
0dd58     0B 86 06 F1 | 	add	local02, #11
0dd5c     43 8F 42 FC | 	wrbyte	local06, local02
0dd60                 | LR__0827
0dd60     68 5E 05 F1 | 	add	fp, #104
0dd64     AF 86 02 FB | 	rdlong	local02, fp
0dd68     03 86 06 F1 | 	add	local02, #3
0dd6c     43 03 48 FC | 	wrbyte	#1, local02
0dd70     24 5E 05 F1 | 	add	fp, #36
0dd74     AF 8A 02 FB | 	rdlong	local04, fp
0dd78     8C 5E 85 F1 | 	sub	fp, #140
0dd7c     0B 8A 06 F1 | 	add	local04, #11
0dd80     45 87 C2 FA | 	rdbyte	local02, local04
0dd84     10 86 CE F7 | 	test	local02, #16 wz
0dd88     54 01 90 AD |  if_e	jmp	#LR__0831
0dd8c     18 5E 05 F1 | 	add	fp, #24
0dd90     AF 88 02 FB | 	rdlong	local03, fp
0dd94     2C 5E 05 F1 | 	add	fp, #44
0dd98     AF 92 02 FB | 	rdlong	local08, fp
0dd9c     44 5E 85 F1 | 	sub	fp, #68
0dda0     49 89 0A F2 | 	cmp	local03, local08 wz
0dda4     38 01 90 AD |  if_e	jmp	#LR__0831
0dda8     68 5E 05 F1 | 	add	fp, #104
0ddac     AF 86 02 FB | 	rdlong	local02, fp
0ddb0     43 8D 02 F6 | 	mov	local05, local02
0ddb4     46 8F 02 F6 | 	mov	local06, local05
0ddb8     24 5E 05 F1 | 	add	fp, #36
0ddbc     AF 84 02 FB | 	rdlong	local01, fp
0ddc0     8C 5E 85 F1 | 	sub	fp, #140
0ddc4     42 89 02 F6 | 	mov	local03, local01
0ddc8     47 77 02 F6 | 	mov	arg01, local06
0ddcc     44 79 02 F6 | 	mov	arg02, local03
0ddd0     A0 C0 BF FD | 	call	#_ff_cc_ld_clust_0314
0ddd4     18 93 02 F6 | 	mov	local08, result1
0ddd8     43 77 02 F6 | 	mov	arg01, local02
0dddc     49 79 02 F6 | 	mov	arg02, local08
0dde0     0C B3 BF FD | 	call	#_ff_cc_clst2sect_0276
0dde4     18 95 02 F6 | 	mov	local09, result1
0dde8     90 5E 05 F1 | 	add	fp, #144
0ddec     AF 94 62 FC | 	wrlong	local09, fp
0ddf0     AF 8A 0A FB | 	rdlong	local04, fp wz
0ddf4     90 5E 85 F1 | 	sub	fp, #144
0ddf8     14 00 90 5D |  if_ne	jmp	#LR__0828
0ddfc     02 86 06 F6 | 	mov	local02, #2
0de00     0C 5E 05 F1 | 	add	fp, #12
0de04     AF 04 68 FC | 	wrlong	#2, fp
0de08     0C 5E 85 F1 | 	sub	fp, #12
0de0c     D0 00 90 FD | 	jmp	#LR__0830
0de10                 | LR__0828
0de10     68 5E 05 F1 | 	add	fp, #104
0de14     AF 76 02 FB | 	rdlong	arg01, fp
0de18     28 5E 05 F1 | 	add	fp, #40
0de1c     AF 78 02 FB | 	rdlong	arg02, fp
0de20     90 5E 85 F1 | 	sub	fp, #144
0de24     D0 B0 BF FD | 	call	#_ff_cc_move_window_0273
0de28     18 89 02 F6 | 	mov	local03, result1
0de2c     0C 5E 05 F1 | 	add	fp, #12
0de30     AF 88 62 FC | 	wrlong	local03, fp
0de34     5C 5E 05 F1 | 	add	fp, #92
0de38     AF 8E 02 FB | 	rdlong	local06, fp
0de3c     47 8D 02 F6 | 	mov	local05, local06
0de40     30 8C 06 F1 | 	add	local05, #48
0de44     46 87 02 F6 | 	mov	local02, local05
0de48     20 86 06 F1 | 	add	local02, #32
0de4c     24 5E 05 F1 | 	add	fp, #36
0de50     AF 86 62 FC | 	wrlong	local02, fp
0de54     80 5E 85 F1 | 	sub	fp, #128
0de58     AF 8A 02 FB | 	rdlong	local04, fp
0de5c     0C 5E 85 F1 | 	sub	fp, #12
0de60     45 87 0A F6 | 	mov	local02, local04 wz
0de64     78 00 90 5D |  if_ne	jmp	#LR__0829
0de68     8C 5E 05 F1 | 	add	fp, #140
0de6c     AF 88 02 FB | 	rdlong	local03, fp
0de70     8C 5E 85 F1 | 	sub	fp, #140
0de74     44 8D 02 F6 | 	mov	local05, local03
0de78     01 8C 06 F1 | 	add	local05, #1
0de7c     46 85 C2 FA | 	rdbyte	local01, local05
0de80     01 8C 86 F1 | 	sub	local05, #1
0de84     42 8F 02 F6 | 	mov	local06, local01
0de88     07 8E 46 F7 | 	zerox	local06, #7
0de8c     2E 8E 0E F2 | 	cmp	local06, #46 wz
0de90     4C 00 90 5D |  if_ne	jmp	#LR__0829
0de94     68 5E 05 F1 | 	add	fp, #104
0de98     AF 76 02 FB | 	rdlong	arg01, fp
0de9c     24 5E 05 F1 | 	add	fp, #36
0dea0     AF 8C 02 FB | 	rdlong	local05, fp
0dea4     48 5E 85 F1 | 	sub	fp, #72
0dea8     AF 84 02 FB | 	rdlong	local01, fp
0deac     44 5E 85 F1 | 	sub	fp, #68
0deb0     42 89 02 F6 | 	mov	local03, local01
0deb4     46 79 02 F6 | 	mov	arg02, local05
0deb8     44 7B 02 F6 | 	mov	arg03, local03
0debc     0C C0 BF FD | 	call	#_ff_cc_st_clust_0315
0dec0     68 5E 05 F1 | 	add	fp, #104
0dec4     AF 8A 02 FB | 	rdlong	local04, fp
0dec8     68 5E 85 F1 | 	sub	fp, #104
0decc     45 87 02 F6 | 	mov	local02, local04
0ded0     01 8E 06 F6 | 	mov	local06, #1
0ded4     03 86 06 F1 | 	add	local02, #3
0ded8     43 03 48 FC | 	wrbyte	#1, local02
0dedc     03 86 86 F1 | 	sub	local02, #3
0dee0                 | LR__0829
0dee0                 | LR__0830
0dee0                 | LR__0831
0dee0                 | LR__0832
0dee0                 | LR__0833
0dee0     0C 5E 05 F1 | 	add	fp, #12
0dee4     AF 86 0A FB | 	rdlong	local02, fp wz
0dee8     0C 5E 85 F1 | 	sub	fp, #12
0deec     44 00 90 5D |  if_ne	jmp	#LR__0835
0def0     10 5E 05 F1 | 	add	fp, #16
0def4     AF 76 02 F6 | 	mov	arg01, fp
0def8     10 5E 85 F1 | 	sub	fp, #16
0defc     BC C2 BF FD | 	call	#_ff_cc_dir_remove_0330
0df00     18 8F 02 F6 | 	mov	local06, result1
0df04     0C 5E 05 F1 | 	add	fp, #12
0df08     AF 8E 62 FC | 	wrlong	local06, fp
0df0c     AF 86 0A FB | 	rdlong	local02, fp wz
0df10     0C 5E 85 F1 | 	sub	fp, #12
0df14     1C 00 90 5D |  if_ne	jmp	#LR__0834
0df18     68 5E 05 F1 | 	add	fp, #104
0df1c     AF 76 02 FB | 	rdlong	arg01, fp
0df20     68 5E 85 F1 | 	sub	fp, #104
0df24     4C B0 BF FD | 	call	#_ff_cc_sync_fs_0275
0df28     0C 5E 05 F1 | 	add	fp, #12
0df2c     AF 30 62 FC | 	wrlong	result1, fp
0df30     0C 5E 85 F1 | 	sub	fp, #12
0df34                 | LR__0834
0df34                 | LR__0835
0df34                 | LR__0836
0df34                 | LR__0837
0df34                 | ' 					res = sync_fs(fs);
0df34                 | ' 				}
0df34                 | ' 			}
0df34                 | ' 
0df34                 | ' 		}
0df34                 | ' 		;
0df34                 | ' 	}
0df34                 | ' 
0df34                 | ' 	return res ;
0df34     0C 5E 05 F1 | 	add	fp, #12
0df38     AF 30 02 FB | 	rdlong	result1, fp
0df3c     0C 5E 85 F1 | 	sub	fp, #12
0df40     AF F0 03 F6 | 	mov	ptra, fp
0df44     BF 00 A0 FD | 	call	#popregs_
0df48                 | _ff_cc_f_rename_ret
0df48     2D 00 64 FD | 	ret
0df4c                 | 
0df4c                 | _ff_cc_stat
0df4c     09 5A 05 F6 | 	mov	COUNT_, #9
0df50     B0 00 A0 FD | 	call	#pushregs_
0df54     3B 85 02 F6 | 	mov	local01, arg01
0df58     3C 87 02 F6 | 	mov	local02, arg02
0df5c     38 15 06 F1 | 	add	ptr___system__dat__, #312
0df60     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
0df64     38 15 86 F1 | 	sub	ptr___system__dat__, #312
0df68     18 89 02 F6 | 	mov	local03, result1
0df6c     44 77 02 F6 | 	mov	arg01, local03
0df70     42 79 02 F6 | 	mov	arg02, local01
0df74     00 7A 06 F6 | 	mov	arg03, #0
0df78     84 89 BF FD | 	call	#__system____getvfsforfile
0df7c     18 8B 0A F6 | 	mov	local04, result1 wz
0df80     14 00 90 AD |  if_e	jmp	#LR__0838
0df84     2C 8A 06 F1 | 	add	local04, #44
0df88     45 8D 02 FB | 	rdlong	local05, local04
0df8c     2C 8A 86 F1 | 	sub	local04, #44
0df90     46 8F 0A F6 | 	mov	local06, local05 wz
0df94     1C 00 90 5D |  if_ne	jmp	#LR__0839
0df98                 | LR__0838
0df98                 | ' #line 19 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0df98                 | '         return _seterror( 16 );
0df98     01 00 00 FF 
0df9c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0dfa0     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
0dfa4     01 00 00 FF 
0dfa8     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0dfac     01 30 66 F6 | 	neg	result1, #1
0dfb0     44 00 90 FD | 	jmp	#LR__0840
0dfb4                 | LR__0839
0dfb4     43 77 02 F6 | 	mov	arg01, local02
0dfb8     00 78 06 F6 | 	mov	arg02, #0
0dfbc     30 7A 06 F6 | 	mov	arg03, #48
0dfc0     3B 91 02 F6 | 	mov	local07, arg01
0dfc4     A0 00 A0 FD | 	call	#\builtin_bytefill_
0dfc8     48 31 02 F6 | 	mov	result1, local07
0dfcc     2C 8A 06 F1 | 	add	local04, #44
0dfd0     45 8F 02 FB | 	rdlong	local06, local04
0dfd4     47 8D 02 FB | 	rdlong	local05, local06
0dfd8     04 8E 06 F1 | 	add	local06, #4
0dfdc     47 93 02 FB | 	rdlong	local08, local06
0dfe0     44 77 02 F6 | 	mov	arg01, local03
0dfe4     43 79 02 F6 | 	mov	arg02, local02
0dfe8     07 95 02 F6 | 	mov	local09, objptr
0dfec     46 0F 02 F6 | 	mov	objptr, local05
0dff0     2D 92 62 FD | 	call	local08
0dff4     4A 0F 02 F6 | 	mov	objptr, local09
0dff8                 | ' #line 29 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0dff8                 | '     r = v->stat(name, buf);
0dff8                 | ' #line 33 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0dff8                 | '     return r;
0dff8                 | LR__0840
0dff8     AF F0 03 F6 | 	mov	ptra, fp
0dffc     BF 00 A0 FD | 	call	#popregs_
0e000                 | _ff_cc_stat_ret
0e000     2D 00 64 FD | 	ret
0e004                 | 
0e004                 | _ff_cc__set_dos_error_0498
0e004     03 5A 05 F6 | 	mov	COUNT_, #3
0e008     B0 00 A0 FD | 	call	#pushregs_
0e00c     3B 85 02 F6 | 	mov	local01, arg01
0e010                 | ' #line 6871 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0e010                 | '     switch (derr) {
0e010     42 87 02 F6 | 	mov	local02, local01
0e014     14 86 26 F3 | 	fle	local02, #20
0e018     30 86 62 FD | 	jmprel	local02
0e01c                 | LR__0841
0e01c     50 00 90 FD | 	jmp	#LR__0842
0e020     84 00 90 FD | 	jmp	#LR__0856
0e024     80 00 90 FD | 	jmp	#LR__0857
0e028     7C 00 90 FD | 	jmp	#LR__0858
0e02c     48 00 90 FD | 	jmp	#LR__0843
0e030     44 00 90 FD | 	jmp	#LR__0844
0e034     40 00 90 FD | 	jmp	#LR__0845
0e038     44 00 90 FD | 	jmp	#LR__0846
0e03c     48 00 90 FD | 	jmp	#LR__0848
0e040     54 00 90 FD | 	jmp	#LR__0851
0e044     38 00 90 FD | 	jmp	#LR__0847
0e048     4C 00 90 FD | 	jmp	#LR__0852
0e04c     48 00 90 FD | 	jmp	#LR__0853
0e050     44 00 90 FD | 	jmp	#LR__0854
0e054     50 00 90 FD | 	jmp	#LR__0859
0e058     4C 00 90 FD | 	jmp	#LR__0859
0e05c     48 00 90 FD | 	jmp	#LR__0859
0e060     2C 00 90 FD | 	jmp	#LR__0849
0e064     38 00 90 FD | 	jmp	#LR__0855
0e068     2C 00 90 FD | 	jmp	#LR__0850
0e06c     38 00 90 FD | 	jmp	#LR__0859
0e070                 | LR__0842
0e070     00 88 06 F6 | 	mov	local03, #0
0e074                 | '         r = 0;
0e074                 | '         break;
0e074     34 00 90 FD | 	jmp	#LR__0860
0e078                 | LR__0843
0e078                 | LR__0844
0e078                 | LR__0845
0e078     04 88 06 F6 | 	mov	local03, #4
0e07c                 | '         r =  4 ;
0e07c                 | '         break;
0e07c     2C 00 90 FD | 	jmp	#LR__0860
0e080                 | LR__0846
0e080                 | LR__0847
0e080     06 88 06 F6 | 	mov	local03, #6
0e084                 | '         r =  6 ;
0e084                 | '         break;
0e084     24 00 90 FD | 	jmp	#LR__0860
0e088                 | LR__0848
0e088     09 88 06 F6 | 	mov	local03, #9
0e08c                 | '         r =  9 ;
0e08c                 | '         break;
0e08c     1C 00 90 FD | 	jmp	#LR__0860
0e090                 | LR__0849
0e090     07 88 06 F6 | 	mov	local03, #7
0e094                 | '         r =  7 ;
0e094                 | '         break;
0e094     14 00 90 FD | 	jmp	#LR__0860
0e098                 | LR__0850
0e098                 | LR__0851
0e098                 | LR__0852
0e098                 | LR__0853
0e098                 | LR__0854
0e098     0A 88 06 F6 | 	mov	local03, #10
0e09c                 | '         r =  10 ;
0e09c                 | '         break;
0e09c     0C 00 90 FD | 	jmp	#LR__0860
0e0a0                 | LR__0855
0e0a0     0B 88 06 F6 | 	mov	local03, #11
0e0a4                 | '         r =  11 ;
0e0a4                 | '         break;
0e0a4     04 00 90 FD | 	jmp	#LR__0860
0e0a8                 | LR__0856
0e0a8                 | LR__0857
0e0a8                 | LR__0858
0e0a8                 | LR__0859
0e0a8     0C 88 06 F6 | 	mov	local03, #12
0e0ac                 | '         r =  12 ;
0e0ac                 | '         break;
0e0ac                 | LR__0860
0e0ac                 | '     }
0e0ac                 | '     return _seterror(r);
0e0ac     01 00 00 FF 
0e0b0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e0b4     0A 89 62 FC | 	wrlong	local03, ptr___system__dat__
0e0b8     01 00 00 FF 
0e0bc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e0c0     00 88 0E F2 | 	cmp	local03, #0 wz
0e0c4     01 30 66 56 |  if_ne	neg	result1, #1
0e0c8     00 30 06 A6 |  if_e	mov	result1, #0
0e0cc     AF F0 03 F6 | 	mov	ptra, fp
0e0d0     BF 00 A0 FD | 	call	#popregs_
0e0d4                 | _ff_cc__set_dos_error_0498_ret
0e0d4     2D 00 64 FD | 	ret
0e0d8                 | 
0e0d8                 | _ff_cc_v_creat_0502
0e0d8     04 5A 05 F6 | 	mov	COUNT_, #4
0e0dc     B0 00 A0 FD | 	call	#pushregs_
0e0e0     3B 85 02 F6 | 	mov	local01, arg01
0e0e4     3C 87 02 F6 | 	mov	local02, arg02
0e0e8     02 00 00 FF 
0e0ec     34 76 06 F6 | 	mov	arg01, ##1076
0e0f0                 | '     return _gc_alloc(size);
0e0f0     10 78 06 F6 | 	mov	arg02, #16
0e0f4     A4 94 BF FD | 	call	#__system___gc_doalloc
0e0f8     18 89 0A F6 | 	mov	local03, result1 wz
0e0fc     1C 00 90 5D |  if_ne	jmp	#LR__0861
0e100                 | '       return _seterror( 7 );
0e100     01 00 00 FF 
0e104     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e108     0A 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0e10c     01 00 00 FF 
0e110     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e114     01 30 66 F6 | 	neg	result1, #1
0e118     58 00 90 FD | 	jmp	#LR__0863
0e11c                 | LR__0861
0e11c     44 77 02 F6 | 	mov	arg01, local03
0e120     00 78 06 F6 | 	mov	arg02, #0
0e124     02 00 00 FF 
0e128     34 7A 06 F6 | 	mov	arg03, ##1076
0e12c     C0 10 B0 FD | 	call	#_ff_cc_memset
0e130     02 00 00 FF 
0e134     0C 88 06 F1 | 	add	local03, ##1036
0e138     44 77 02 F6 | 	mov	arg01, local03
0e13c     02 00 00 FF 
0e140     0C 88 86 F1 | 	sub	local03, ##1036
0e144     43 79 02 F6 | 	mov	arg02, local02
0e148     07 7A 06 F6 | 	mov	arg03, #7
0e14c     A4 D1 BF FD | 	call	#_ff_cc_f_open
0e150     18 8B 0A F6 | 	mov	local04, result1 wz
0e154     14 00 90 AD |  if_e	jmp	#LR__0862
0e158     44 77 02 F6 | 	mov	arg01, local03
0e15c                 | '     return _gc_free(ptr);
0e15c     74 95 BF FD | 	call	#__system___gc_free
0e160                 | '     free(f);
0e160                 | '     return _set_dos_error(r);
0e160     45 77 02 F6 | 	mov	arg01, local04
0e164     9C FE BF FD | 	call	#_ff_cc__set_dos_error_0498
0e168     08 00 90 FD | 	jmp	#LR__0863
0e16c                 | LR__0862
0e16c     42 89 62 FC | 	wrlong	local03, local01
0e170                 | '   }
0e170                 | '   fil->vfsdata = f;
0e170                 | '   return 0;
0e170     00 30 06 F6 | 	mov	result1, #0
0e174                 | LR__0863
0e174     AF F0 03 F6 | 	mov	ptra, fp
0e178     BF 00 A0 FD | 	call	#popregs_
0e17c                 | _ff_cc_v_creat_0502_ret
0e17c     2D 00 64 FD | 	ret
0e180                 | 
0e180                 | _ff_cc_v_close_0505
0e180     02 5A 05 F6 | 	mov	COUNT_, #2
0e184     B0 00 A0 FD | 	call	#pushregs_
0e188     3B 85 02 FB | 	rdlong	local01, arg01
0e18c     02 00 00 FF 
0e190     0C 84 06 F1 | 	add	local01, ##1036
0e194     42 77 02 F6 | 	mov	arg01, local01
0e198     02 00 00 FF 
0e19c     0C 84 86 F1 | 	sub	local01, ##1036
0e1a0     B4 E8 BF FD | 	call	#_ff_cc_f_close
0e1a4     18 87 02 F6 | 	mov	local02, result1
0e1a8     42 77 02 F6 | 	mov	arg01, local01
0e1ac                 | '     return _gc_free(ptr);
0e1ac     24 95 BF FD | 	call	#__system___gc_free
0e1b0                 | '     FAT_FIL *f = fil->vfsdata;
0e1b0                 | '     r=f_close(&f->fil);
0e1b0                 | '     free(f);
0e1b0                 | '     return _set_dos_error(r);
0e1b0     43 77 02 F6 | 	mov	arg01, local02
0e1b4     4C FE BF FD | 	call	#_ff_cc__set_dos_error_0498
0e1b8     AF F0 03 F6 | 	mov	ptra, fp
0e1bc     BF 00 A0 FD | 	call	#popregs_
0e1c0                 | _ff_cc_v_close_0505_ret
0e1c0     2D 00 64 FD | 	ret
0e1c4                 | 
0e1c4                 | _ff_cc_v_opendir_0508
0e1c4     04 5A 05 F6 | 	mov	COUNT_, #4
0e1c8     B0 00 A0 FD | 	call	#pushregs_
0e1cc     3B 85 02 F6 | 	mov	local01, arg01
0e1d0     3C 87 02 F6 | 	mov	local02, arg02
0e1d4     2C 76 06 F6 | 	mov	arg01, #44
0e1d8                 | '     return _gc_alloc(size);
0e1d8     10 78 06 F6 | 	mov	arg02, #16
0e1dc     BC 93 BF FD | 	call	#__system___gc_doalloc
0e1e0     18 89 0A F6 | 	mov	local03, result1 wz
0e1e4     1C 00 90 5D |  if_ne	jmp	#LR__0864
0e1e8                 | ' #line 6955 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0e1e8                 | '       return _seterror( 7 );
0e1e8     01 00 00 FF 
0e1ec     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e1f0     0A 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0e1f4     01 00 00 FF 
0e1f8     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e1fc     01 30 66 F6 | 	neg	result1, #1
0e200     34 00 90 FD | 	jmp	#LR__0866
0e204                 | LR__0864
0e204     44 77 02 F6 | 	mov	arg01, local03
0e208     43 79 02 F6 | 	mov	arg02, local02
0e20c     04 EF BF FD | 	call	#_ff_cc_f_opendir
0e210     18 8B 0A F6 | 	mov	local04, result1 wz
0e214     14 00 90 AD |  if_e	jmp	#LR__0865
0e218     44 77 02 F6 | 	mov	arg01, local03
0e21c                 | '     return _gc_free(ptr);
0e21c     B4 94 BF FD | 	call	#__system___gc_free
0e220                 | '         free(f);
0e220                 | '         return _set_dos_error(r);
0e220     45 77 02 F6 | 	mov	arg01, local04
0e224     DC FD BF FD | 	call	#_ff_cc__set_dos_error_0498
0e228     0C 00 90 FD | 	jmp	#LR__0866
0e22c                 | LR__0865
0e22c     04 84 06 F1 | 	add	local01, #4
0e230     42 89 62 FC | 	wrlong	local03, local01
0e234                 | '     }
0e234                 | '     dir->vfsdata = f;
0e234                 | '     return 0;
0e234     00 30 06 F6 | 	mov	result1, #0
0e238                 | LR__0866
0e238     AF F0 03 F6 | 	mov	ptra, fp
0e23c     BF 00 A0 FD | 	call	#popregs_
0e240                 | _ff_cc_v_opendir_0508_ret
0e240     2D 00 64 FD | 	ret
0e244                 | 
0e244                 | _ff_cc_v_closedir_0511
0e244     02 5A 05 F6 | 	mov	COUNT_, #2
0e248     B0 00 A0 FD | 	call	#pushregs_
0e24c     04 76 06 F1 | 	add	arg01, #4
0e250     3B 85 02 FB | 	rdlong	local01, arg01
0e254     42 77 02 F6 | 	mov	arg01, local01
0e258     78 F0 BF FD | 	call	#_ff_cc_f_closedir
0e25c     18 87 02 F6 | 	mov	local02, result1
0e260     42 77 02 F6 | 	mov	arg01, local01
0e264                 | '     return _gc_free(ptr);
0e264     6C 94 BF FD | 	call	#__system___gc_free
0e268     00 86 0E F2 | 	cmp	local02, #0 wz
0e26c     08 00 90 AD |  if_e	jmp	#LR__0867
0e270     43 77 02 F6 | 	mov	arg01, local02
0e274     8C FD BF FD | 	call	#_ff_cc__set_dos_error_0498
0e278                 | LR__0867
0e278                 | '     return r;
0e278     43 31 02 F6 | 	mov	result1, local02
0e27c     AF F0 03 F6 | 	mov	ptra, fp
0e280     BF 00 A0 FD | 	call	#popregs_
0e284                 | _ff_cc_v_closedir_0511_ret
0e284     2D 00 64 FD | 	ret
0e288                 | 
0e288                 | _ff_cc_v_readdir_0514
0e288     02 5A 05 F6 | 	mov	COUNT_, #2
0e28c     B0 00 A0 FD | 	call	#pushregs_
0e290     2C F0 07 F1 | 	add	ptra, #44
0e294     04 5E 05 F1 | 	add	fp, #4
0e298     AF 76 62 FC | 	wrlong	arg01, fp
0e29c     04 5E 05 F1 | 	add	fp, #4
0e2a0     AF 78 62 FC | 	wrlong	arg02, fp
0e2a4     04 5E 85 F1 | 	sub	fp, #4
0e2a8     AF 84 02 FB | 	rdlong	local01, fp
0e2ac     04 84 06 F1 | 	add	local01, #4
0e2b0     42 77 02 FB | 	rdlong	arg01, local01
0e2b4     08 5E 05 F1 | 	add	fp, #8
0e2b8     AF 78 02 F6 | 	mov	arg02, fp
0e2bc     0C 5E 85 F1 | 	sub	fp, #12
0e2c0     74 F0 BF FD | 	call	#_ff_cc_f_readdir
0e2c4     18 87 02 F6 | 	mov	local02, result1
0e2c8     28 5E 05 F1 | 	add	fp, #40
0e2cc     AF 86 62 FC | 	wrlong	local02, fp
0e2d0     AF 84 0A FB | 	rdlong	local01, fp wz
0e2d4     28 5E 85 F1 | 	sub	fp, #40
0e2d8     14 00 90 AD |  if_e	jmp	#LR__0868
0e2dc                 | '         return _set_dos_error(r);
0e2dc     28 5E 05 F1 | 	add	fp, #40
0e2e0     AF 76 02 FB | 	rdlong	arg01, fp
0e2e4     28 5E 85 F1 | 	sub	fp, #40
0e2e8     18 FD BF FD | 	call	#_ff_cc__set_dos_error_0498
0e2ec     34 00 90 FD | 	jmp	#LR__0869
0e2f0                 | LR__0868
0e2f0     18 5E 05 F1 | 	add	fp, #24
0e2f4     AF 84 C2 FA | 	rdbyte	local01, fp
0e2f8     18 5E 85 F1 | 	sub	fp, #24
0e2fc     07 84 4E F7 | 	zerox	local01, #7 wz
0e300                 | '         return -1;
0e300     01 30 66 A6 |  if_e	neg	result1, #1
0e304     1C 00 90 AD |  if_e	jmp	#LR__0869
0e308     08 5E 05 F1 | 	add	fp, #8
0e30c     AF 76 02 FB | 	rdlong	arg01, fp
0e310     10 5E 05 F1 | 	add	fp, #16
0e314     AF 78 02 F6 | 	mov	arg02, fp
0e318     18 5E 85 F1 | 	sub	fp, #24
0e31c     9C 0E B0 FD | 	call	#_ff_cc_strcpy
0e320                 | '     }
0e320                 | ' 
0e320                 | ' 
0e320                 | ' 
0e320                 | ' 
0e320                 | '     strcpy(ent->d_name, finfo.fname);
0e320                 | ' 
0e320                 | '     return 0;
0e320     00 30 06 F6 | 	mov	result1, #0
0e324                 | LR__0869
0e324     AF F0 03 F6 | 	mov	ptra, fp
0e328     BF 00 A0 FD | 	call	#popregs_
0e32c                 | _ff_cc_v_readdir_0514_ret
0e32c     2D 00 64 FD | 	ret
0e330                 | 
0e330                 | _ff_cc_unixtime_0522
0e330     3C 37 02 F6 | 	mov	_var01, arg02
0e334     0B 36 46 F0 | 	shr	_var01, #11
0e338     1F 36 06 F5 | 	and	_var01, #31
0e33c     3C 39 02 F6 | 	mov	_var02, arg02
0e340     05 38 46 F0 | 	shr	_var02, #5
0e344     3F 38 06 F5 | 	and	_var02, #63
0e348     1F 78 06 F5 | 	and	arg02, #31
0e34c     01 78 66 F0 | 	shl	arg02, #1
0e350     1C 3B 02 F6 | 	mov	_var03, _var02
0e354     04 3A 66 F0 | 	shl	_var03, #4
0e358     1C 3B 82 F1 | 	sub	_var03, _var02
0e35c     02 3A 66 F0 | 	shl	_var03, #2
0e360     1D 79 02 F1 | 	add	arg02, _var03
0e364     07 00 00 FF 
0e368     10 36 06 FD | 	qmul	_var01, ##3600
0e36c     18 3C 62 FD | 	getqx	_var04
0e370     1E 79 02 F1 | 	add	arg02, _var04
0e374                 | ' 
0e374                 | '     t = second + minute*60 + hour * 3600;
0e374                 | '     return t;
0e374     3C 31 02 F6 | 	mov	result1, arg02
0e378                 | _ff_cc_unixtime_0522_ret
0e378     2D 00 64 FD | 	ret
0e37c                 | 
0e37c                 | _ff_cc_v_stat_0526
0e37c     08 5A 05 F6 | 	mov	COUNT_, #8
0e380     B0 00 A0 FD | 	call	#pushregs_
0e384     30 F0 07 F1 | 	add	ptra, #48
0e388     04 5E 05 F1 | 	add	fp, #4
0e38c     AF 76 62 FC | 	wrlong	arg01, fp
0e390     04 5E 05 F1 | 	add	fp, #4
0e394     AF 78 62 FC | 	wrlong	arg02, fp
0e398     3C 77 02 F6 | 	mov	arg01, arg02
0e39c     08 5E 85 F1 | 	sub	fp, #8
0e3a0     00 78 06 F6 | 	mov	arg02, #0
0e3a4     30 7A 06 F6 | 	mov	arg03, #48
0e3a8     44 0E B0 FD | 	call	#_ff_cc_memset
0e3ac     04 5E 05 F1 | 	add	fp, #4
0e3b0     AF 84 02 FB | 	rdlong	local01, fp
0e3b4     04 5E 85 F1 | 	sub	fp, #4
0e3b8     42 87 CA FA | 	rdbyte	local02, local01 wz
0e3bc     30 00 90 AD |  if_e	jmp	#LR__0870
0e3c0     04 5E 05 F1 | 	add	fp, #4
0e3c4     AF 88 02 FB | 	rdlong	local03, fp
0e3c8     04 5E 85 F1 | 	sub	fp, #4
0e3cc     44 8B C2 FA | 	rdbyte	local04, local03
0e3d0     2E 8A 0E F2 | 	cmp	local04, #46 wz
0e3d4     30 00 90 5D |  if_ne	jmp	#LR__0871
0e3d8     04 5E 05 F1 | 	add	fp, #4
0e3dc     AF 8C 02 FB | 	rdlong	local05, fp
0e3e0     04 5E 85 F1 | 	sub	fp, #4
0e3e4     01 8C 06 F1 | 	add	local05, #1
0e3e8     46 8F CA FA | 	rdbyte	local06, local05 wz
0e3ec     18 00 90 5D |  if_ne	jmp	#LR__0871
0e3f0                 | LR__0870
0e3f0     18 5E 05 F1 | 	add	fp, #24
0e3f4     AF 20 48 FC | 	wrbyte	#16, fp
0e3f8     0C 5E 85 F1 | 	sub	fp, #12
0e3fc     AF 00 68 FC | 	wrlong	#0, fp
0e400     0C 5E 85 F1 | 	sub	fp, #12
0e404     24 00 90 FD | 	jmp	#LR__0872
0e408                 | LR__0871
0e408     04 5E 05 F1 | 	add	fp, #4
0e40c     AF 76 02 FB | 	rdlong	arg01, fp
0e410     0C 5E 05 F1 | 	add	fp, #12
0e414     AF 78 02 F6 | 	mov	arg02, fp
0e418     10 5E 85 F1 | 	sub	fp, #16
0e41c     38 F0 BF FD | 	call	#_ff_cc_f_stat
0e420     0C 5E 05 F1 | 	add	fp, #12
0e424     AF 30 62 FC | 	wrlong	result1, fp
0e428     0C 5E 85 F1 | 	sub	fp, #12
0e42c                 | LR__0872
0e42c     0C 5E 05 F1 | 	add	fp, #12
0e430     AF 86 0A FB | 	rdlong	local02, fp wz
0e434     0C 5E 85 F1 | 	sub	fp, #12
0e438     14 00 90 AD |  if_e	jmp	#LR__0873
0e43c                 | '         return _set_dos_error(r);
0e43c     0C 5E 05 F1 | 	add	fp, #12
0e440     AF 76 02 FB | 	rdlong	arg01, fp
0e444     0C 5E 85 F1 | 	sub	fp, #12
0e448     B8 FB BF FD | 	call	#_ff_cc__set_dos_error_0498
0e44c     24 01 90 FD | 	jmp	#LR__0876
0e450                 | LR__0873
0e450     2C 5E 05 F1 | 	add	fp, #44
0e454     AF 48 6A FC | 	wrlong	#292, fp
0e458     14 5E 85 F1 | 	sub	fp, #20
0e45c     AF 86 C2 FA | 	rdbyte	local02, fp
0e460     18 5E 85 F1 | 	sub	fp, #24
0e464     07 86 46 F7 | 	zerox	local02, #7
0e468     01 86 CE F7 | 	test	local02, #1 wz
0e46c     14 00 90 AD |  if_e	jmp	#LR__0874
0e470     2C 5E 05 F1 | 	add	fp, #44
0e474     AF 86 02 FB | 	rdlong	local02, fp
0e478     92 86 46 F5 | 	or	local02, #146
0e47c     AF 86 62 FC | 	wrlong	local02, fp
0e480     2C 5E 85 F1 | 	sub	fp, #44
0e484                 | LR__0874
0e484     18 5E 05 F1 | 	add	fp, #24
0e488     AF 86 C2 FA | 	rdbyte	local02, fp
0e48c     18 5E 85 F1 | 	sub	fp, #24
0e490     07 86 46 F7 | 	zerox	local02, #7
0e494     10 86 CE F7 | 	test	local02, #16 wz
0e498     18 00 90 AD |  if_e	jmp	#LR__0875
0e49c     2C 5E 05 F1 | 	add	fp, #44
0e4a0     AF 86 02 FB | 	rdlong	local02, fp
0e4a4     08 00 00 FF 
0e4a8     49 86 46 F5 | 	or	local02, ##4169
0e4ac     AF 86 62 FC | 	wrlong	local02, fp
0e4b0     2C 5E 85 F1 | 	sub	fp, #44
0e4b4                 | LR__0875
0e4b4     08 5E 05 F1 | 	add	fp, #8
0e4b8     AF 86 02 FB | 	rdlong	local02, fp
0e4bc     24 5E 05 F1 | 	add	fp, #36
0e4c0     AF 90 02 FB | 	rdlong	local07, fp
0e4c4     08 86 06 F1 | 	add	local02, #8
0e4c8     43 91 62 FC | 	wrlong	local07, local02
0e4cc     24 5E 85 F1 | 	sub	fp, #36
0e4d0     AF 86 02 FB | 	rdlong	local02, fp
0e4d4     0C 86 06 F1 | 	add	local02, #12
0e4d8     43 03 68 FC | 	wrlong	#1, local02
0e4dc     AF 86 02 FB | 	rdlong	local02, fp
0e4e0     08 5E 05 F1 | 	add	fp, #8
0e4e4     AF 90 02 FB | 	rdlong	local07, fp
0e4e8     18 86 06 F1 | 	add	local02, #24
0e4ec     43 91 62 FC | 	wrlong	local07, local02
0e4f0     08 5E 85 F1 | 	sub	fp, #8
0e4f4     AF 86 02 FB | 	rdlong	local02, fp
0e4f8     1C 86 06 F1 | 	add	local02, #28
0e4fc     01 00 80 FF 
0e500     43 01 68 FC | 	wrlong	##512, local02
0e504     AF 86 02 FB | 	rdlong	local02, fp
0e508     43 91 02 F6 | 	mov	local07, local02
0e50c     18 90 06 F1 | 	add	local07, #24
0e510     48 93 02 FB | 	rdlong	local08, local07
0e514     49 89 52 F6 | 	abs	local03, local08 wc
0e518     09 88 46 F0 | 	shr	local03, #9
0e51c     44 89 62 C6 |  if_b	neg	local03, local03
0e520     20 86 06 F1 | 	add	local02, #32
0e524     43 89 62 FC | 	wrlong	local03, local02
0e528     AF 86 02 FB | 	rdlong	local02, fp
0e52c     43 91 02 F6 | 	mov	local07, local02
0e530     43 89 02 F6 | 	mov	local03, local02
0e534     0C 5E 05 F1 | 	add	fp, #12
0e538     AF 76 E2 FA | 	rdword	arg01, fp
0e53c     02 5E 05 F1 | 	add	fp, #2
0e540     AF 78 E2 FA | 	rdword	arg02, fp
0e544     16 5E 85 F1 | 	sub	fp, #22
0e548     0F 78 46 F7 | 	zerox	arg02, #15
0e54c     E0 FD BF FD | 	call	#_ff_cc_unixtime_0522
0e550     2C 88 06 F1 | 	add	local03, #44
0e554     44 31 62 FC | 	wrlong	result1, local03
0e558     28 90 06 F1 | 	add	local07, #40
0e55c     48 31 62 FC | 	wrlong	result1, local07
0e560     24 86 06 F1 | 	add	local02, #36
0e564     43 31 62 FC | 	wrlong	result1, local02
0e568                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0e568                 | '     }
0e568                 | '     buf->st_mode = mode;
0e568                 | '     buf->st_nlink = 1;
0e568                 | '     buf->st_size = finfo.fsize;
0e568                 | '     buf->st_blksize = 512;
0e568                 | '     buf->st_blocks = buf->st_size / 512;
0e568                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0e568                 | ' #line 7053 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0e568                 | '     return r;
0e568     0C 5E 05 F1 | 	add	fp, #12
0e56c     AF 30 02 FB | 	rdlong	result1, fp
0e570     0C 5E 85 F1 | 	sub	fp, #12
0e574                 | LR__0876
0e574     AF F0 03 F6 | 	mov	ptra, fp
0e578     BF 00 A0 FD | 	call	#popregs_
0e57c                 | _ff_cc_v_stat_0526_ret
0e57c     2D 00 64 FD | 	ret
0e580                 | 
0e580                 | _ff_cc_v_read_0530
0e580     04 5A 05 F6 | 	mov	COUNT_, #4
0e584     B0 00 A0 FD | 	call	#pushregs_
0e588     1C F0 07 F1 | 	add	ptra, #28
0e58c     04 5E 05 F1 | 	add	fp, #4
0e590     AF 76 62 FC | 	wrlong	arg01, fp
0e594     04 5E 05 F1 | 	add	fp, #4
0e598     AF 78 62 FC | 	wrlong	arg02, fp
0e59c     04 5E 05 F1 | 	add	fp, #4
0e5a0     AF 7A 62 FC | 	wrlong	arg03, fp
0e5a4     08 5E 85 F1 | 	sub	fp, #8
0e5a8     AF 84 02 FB | 	rdlong	local01, fp
0e5ac     42 87 02 FB | 	rdlong	local02, local01
0e5b0     0C 5E 05 F1 | 	add	fp, #12
0e5b4     AF 86 62 FC | 	wrlong	local02, fp
0e5b8     AF 84 0A FB | 	rdlong	local01, fp wz
0e5bc     10 5E 85 F1 | 	sub	fp, #16
0e5c0     1C 00 90 5D |  if_ne	jmp	#LR__0877
0e5c4                 | '         return _seterror( 5 );
0e5c4     01 00 00 FF 
0e5c8     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e5cc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0e5d0     01 00 00 FF 
0e5d4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e5d8     01 30 66 F6 | 	neg	result1, #1
0e5dc     BC 00 90 FD | 	jmp	#LR__0880
0e5e0                 | LR__0877
0e5e0     10 5E 05 F1 | 	add	fp, #16
0e5e4     AF 76 02 FB | 	rdlong	arg01, fp
0e5e8     02 00 00 FF 
0e5ec     0C 76 06 F1 | 	add	arg01, ##1036
0e5f0     08 5E 85 F1 | 	sub	fp, #8
0e5f4     AF 78 02 FB | 	rdlong	arg02, fp
0e5f8     04 5E 05 F1 | 	add	fp, #4
0e5fc     AF 7A 02 FB | 	rdlong	arg03, fp
0e600     0C 5E 05 F1 | 	add	fp, #12
0e604     AF 7C 02 F6 | 	mov	arg04, fp
0e608     18 5E 85 F1 | 	sub	fp, #24
0e60c     24 D4 BF FD | 	call	#_ff_cc_f_read
0e610     18 89 02 F6 | 	mov	local03, result1
0e614     14 5E 05 F1 | 	add	fp, #20
0e618     AF 88 62 FC | 	wrlong	local03, fp
0e61c     AF 84 0A FB | 	rdlong	local01, fp wz
0e620     14 5E 85 F1 | 	sub	fp, #20
0e624     34 00 90 AD |  if_e	jmp	#LR__0878
0e628     04 5E 05 F1 | 	add	fp, #4
0e62c     AF 84 02 FB | 	rdlong	local01, fp
0e630     42 8B 02 F6 | 	mov	local04, local01
0e634     08 8A 06 F1 | 	add	local04, #8
0e638     45 87 02 FB | 	rdlong	local02, local04
0e63c     20 86 46 F5 | 	or	local02, #32
0e640     08 84 06 F1 | 	add	local01, #8
0e644     42 87 62 FC | 	wrlong	local02, local01
0e648                 | '         fil->state |=  (0x20) ;
0e648                 | '         return _set_dos_error(r);
0e648     10 5E 05 F1 | 	add	fp, #16
0e64c     AF 76 02 FB | 	rdlong	arg01, fp
0e650     14 5E 85 F1 | 	sub	fp, #20
0e654     AC F9 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e658     40 00 90 FD | 	jmp	#LR__0880
0e65c                 | LR__0878
0e65c     18 5E 05 F1 | 	add	fp, #24
0e660     AF 84 0A FB | 	rdlong	local01, fp wz
0e664     18 5E 85 F1 | 	sub	fp, #24
0e668     24 00 90 5D |  if_ne	jmp	#LR__0879
0e66c     04 5E 05 F1 | 	add	fp, #4
0e670     AF 84 02 FB | 	rdlong	local01, fp
0e674     42 8B 02 F6 | 	mov	local04, local01
0e678     04 5E 85 F1 | 	sub	fp, #4
0e67c     08 8A 06 F1 | 	add	local04, #8
0e680     45 87 02 FB | 	rdlong	local02, local04
0e684     10 86 46 F5 | 	or	local02, #16
0e688     08 84 06 F1 | 	add	local01, #8
0e68c     42 87 62 FC | 	wrlong	local02, local01
0e690                 | LR__0879
0e690                 | '         fil->state |=  (0x10) ;
0e690                 | '     }
0e690                 | '     return x;
0e690     18 5E 05 F1 | 	add	fp, #24
0e694     AF 30 02 FB | 	rdlong	result1, fp
0e698     18 5E 85 F1 | 	sub	fp, #24
0e69c                 | LR__0880
0e69c     AF F0 03 F6 | 	mov	ptra, fp
0e6a0     BF 00 A0 FD | 	call	#popregs_
0e6a4                 | _ff_cc_v_read_0530_ret
0e6a4     2D 00 64 FD | 	ret
0e6a8                 | 
0e6a8                 | _ff_cc_v_write_0534
0e6a8     04 5A 05 F6 | 	mov	COUNT_, #4
0e6ac     B0 00 A0 FD | 	call	#pushregs_
0e6b0     1C F0 07 F1 | 	add	ptra, #28
0e6b4     04 5E 05 F1 | 	add	fp, #4
0e6b8     AF 76 62 FC | 	wrlong	arg01, fp
0e6bc     04 5E 05 F1 | 	add	fp, #4
0e6c0     AF 78 62 FC | 	wrlong	arg02, fp
0e6c4     04 5E 05 F1 | 	add	fp, #4
0e6c8     AF 7A 62 FC | 	wrlong	arg03, fp
0e6cc     08 5E 85 F1 | 	sub	fp, #8
0e6d0     AF 84 02 FB | 	rdlong	local01, fp
0e6d4     42 87 02 FB | 	rdlong	local02, local01
0e6d8     0C 5E 05 F1 | 	add	fp, #12
0e6dc     AF 86 62 FC | 	wrlong	local02, fp
0e6e0     AF 84 0A FB | 	rdlong	local01, fp wz
0e6e4     10 5E 85 F1 | 	sub	fp, #16
0e6e8     1C 00 90 5D |  if_ne	jmp	#LR__0881
0e6ec                 | '         return _seterror( 5 );
0e6ec     01 00 00 FF 
0e6f0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e6f4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0e6f8     01 00 00 FF 
0e6fc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e700     01 30 66 F6 | 	neg	result1, #1
0e704     88 00 90 FD | 	jmp	#LR__0883
0e708                 | LR__0881
0e708     10 5E 05 F1 | 	add	fp, #16
0e70c     AF 76 02 FB | 	rdlong	arg01, fp
0e710     02 00 00 FF 
0e714     0C 76 06 F1 | 	add	arg01, ##1036
0e718     08 5E 85 F1 | 	sub	fp, #8
0e71c     AF 78 02 FB | 	rdlong	arg02, fp
0e720     04 5E 05 F1 | 	add	fp, #4
0e724     AF 7A 02 FB | 	rdlong	arg03, fp
0e728     0C 5E 05 F1 | 	add	fp, #12
0e72c     AF 7C 02 F6 | 	mov	arg04, fp
0e730     18 5E 85 F1 | 	sub	fp, #24
0e734     48 D9 BF FD | 	call	#_ff_cc_f_write
0e738     18 89 02 F6 | 	mov	local03, result1
0e73c     14 5E 05 F1 | 	add	fp, #20
0e740     AF 88 62 FC | 	wrlong	local03, fp
0e744     AF 84 0A FB | 	rdlong	local01, fp wz
0e748     14 5E 85 F1 | 	sub	fp, #20
0e74c     34 00 90 AD |  if_e	jmp	#LR__0882
0e750     04 5E 05 F1 | 	add	fp, #4
0e754     AF 84 02 FB | 	rdlong	local01, fp
0e758     42 8B 02 F6 | 	mov	local04, local01
0e75c     08 8A 06 F1 | 	add	local04, #8
0e760     45 87 02 FB | 	rdlong	local02, local04
0e764     20 86 46 F5 | 	or	local02, #32
0e768     08 84 06 F1 | 	add	local01, #8
0e76c     42 87 62 FC | 	wrlong	local02, local01
0e770                 | '         fil->state |=  (0x20) ;
0e770                 | '         return _set_dos_error(r);
0e770     10 5E 05 F1 | 	add	fp, #16
0e774     AF 76 02 FB | 	rdlong	arg01, fp
0e778     14 5E 85 F1 | 	sub	fp, #20
0e77c     84 F8 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e780     0C 00 90 FD | 	jmp	#LR__0883
0e784                 | LR__0882
0e784                 | '     }
0e784                 | '     return x;
0e784     18 5E 05 F1 | 	add	fp, #24
0e788     AF 30 02 FB | 	rdlong	result1, fp
0e78c     18 5E 85 F1 | 	sub	fp, #24
0e790                 | LR__0883
0e790     AF F0 03 F6 | 	mov	ptra, fp
0e794     BF 00 A0 FD | 	call	#popregs_
0e798                 | _ff_cc_v_write_0534_ret
0e798     2D 00 64 FD | 	ret
0e79c                 | 
0e79c                 | _ff_cc_v_lseek_0538
0e79c     05 5A 05 F6 | 	mov	COUNT_, #5
0e7a0     B0 00 A0 FD | 	call	#pushregs_
0e7a4     3C 85 02 F6 | 	mov	local01, arg02
0e7a8     3D 87 02 F6 | 	mov	local02, arg03
0e7ac     3B 89 02 FB | 	rdlong	local03, arg01
0e7b0     02 00 00 FF 
0e7b4     0C 88 0E F1 | 	add	local03, ##1036 wz
0e7b8     1C 00 90 5D |  if_ne	jmp	#LR__0884
0e7bc                 | '         return _seterror( 5 );
0e7bc     01 00 00 FF 
0e7c0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e7c4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0e7c8     01 00 00 FF 
0e7cc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e7d0     01 30 66 F6 | 	neg	result1, #1
0e7d4     58 00 90 FD | 	jmp	#LR__0889
0e7d8                 | LR__0884
0e7d8     00 86 0E F2 | 	cmp	local02, #0 wz
0e7dc     2C 00 90 AD |  if_e	jmp	#LR__0887
0e7e0     01 86 0E F2 | 	cmp	local02, #1 wz
0e7e4     14 00 90 5D |  if_ne	jmp	#LR__0885
0e7e8     14 88 06 F1 | 	add	local03, #20
0e7ec     44 8B 02 FB | 	rdlong	local04, local03
0e7f0     14 88 86 F1 | 	sub	local03, #20
0e7f4     45 85 02 F1 | 	add	local01, local04
0e7f8     10 00 90 FD | 	jmp	#LR__0886
0e7fc                 | LR__0885
0e7fc     0C 88 06 F1 | 	add	local03, #12
0e800     44 8B 02 FB | 	rdlong	local04, local03
0e804     0C 88 86 F1 | 	sub	local03, #12
0e808     45 85 02 F1 | 	add	local01, local04
0e80c                 | LR__0886
0e80c                 | LR__0887
0e80c     44 77 02 F6 | 	mov	arg01, local03
0e810     42 79 02 F6 | 	mov	arg02, local01
0e814     C8 E2 BF FD | 	call	#_ff_cc_f_lseek
0e818     18 8D 0A F6 | 	mov	local05, result1 wz
0e81c     0C 00 90 AD |  if_e	jmp	#LR__0888
0e820                 | '         return _set_dos_error(result);
0e820     46 77 02 F6 | 	mov	arg01, local05
0e824     DC F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e828     04 00 90 FD | 	jmp	#LR__0889
0e82c                 | LR__0888
0e82c                 | '     }
0e82c                 | '     return offset;
0e82c     42 31 02 F6 | 	mov	result1, local01
0e830                 | LR__0889
0e830     AF F0 03 F6 | 	mov	ptra, fp
0e834     BF 00 A0 FD | 	call	#popregs_
0e838                 | _ff_cc_v_lseek_0538_ret
0e838     2D 00 64 FD | 	ret
0e83c                 | 
0e83c                 | _ff_cc_v_ioctl
0e83c                 | ' {
0e83c                 | '     return _seterror( 10 );
0e83c     01 00 00 FF 
0e840     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e844     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
0e848     01 00 00 FF 
0e84c     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e850     01 30 66 F6 | 	neg	result1, #1
0e854                 | _ff_cc_v_ioctl_ret
0e854     2D 00 64 FD | 	ret
0e858                 | 
0e858                 | _ff_cc_v_mkdir
0e858     64 EF BF FD | 	call	#_ff_cc_f_mkdir
0e85c     18 77 02 F6 | 	mov	arg01, result1
0e860                 | ' 
0e860                 | '     r = f_mkdir(name);
0e860                 | '     return _set_dos_error(r);
0e860     A0 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e864                 | _ff_cc_v_mkdir_ret
0e864     2D 00 64 FD | 	ret
0e868                 | 
0e868                 | _ff_cc_v_remove
0e868     D4 EC BF FD | 	call	#_ff_cc_f_unlink
0e86c     18 77 02 F6 | 	mov	arg01, result1
0e870                 | ' 
0e870                 | '     r = f_unlink(name);
0e870                 | '     return _set_dos_error(r);
0e870     90 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e874                 | _ff_cc_v_remove_ret
0e874     2D 00 64 FD | 	ret
0e878                 | 
0e878                 | _ff_cc_v_rmdir_0542
0e878     C4 EC BF FD | 	call	#_ff_cc_f_unlink
0e87c     18 77 02 F6 | 	mov	arg01, result1
0e880                 | ' 
0e880                 | '     r = f_unlink(name);
0e880                 | '     return _set_dos_error(r);
0e880     80 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e884                 | _ff_cc_v_rmdir_0542_ret
0e884     2D 00 64 FD | 	ret
0e888                 | 
0e888                 | _ff_cc_v_rename_0544
0e888     94 F2 BF FD | 	call	#_ff_cc_f_rename
0e88c     18 77 02 F6 | 	mov	arg01, result1
0e890                 | '     return _set_dos_error(r);
0e890     70 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e894                 | _ff_cc_v_rename_0544_ret
0e894     2D 00 64 FD | 	ret
0e898                 | 
0e898                 | _ff_cc_v_open_0548
0e898     0A 5A 05 F6 | 	mov	COUNT_, #10
0e89c     B0 00 A0 FD | 	call	#pushregs_
0e8a0     3B 85 02 F6 | 	mov	local01, arg01
0e8a4     3C 87 02 F6 | 	mov	local02, arg02
0e8a8     3D 89 02 F6 | 	mov	local03, arg03
0e8ac     02 00 00 FF 
0e8b0     34 76 06 F6 | 	mov	arg01, ##1076
0e8b4                 | '     return _gc_alloc(size);
0e8b4     10 78 06 F6 | 	mov	arg02, #16
0e8b8     E0 8C BF FD | 	call	#__system___gc_doalloc
0e8bc     18 8B 0A F6 | 	mov	local04, result1 wz
0e8c0     1C 00 90 5D |  if_ne	jmp	#LR__0890
0e8c4                 | '       return _seterror( 7 );
0e8c4     01 00 00 FF 
0e8c8     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e8cc     0A 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0e8d0     01 00 00 FF 
0e8d4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e8d8     01 30 66 F6 | 	neg	result1, #1
0e8dc     A8 00 90 FD | 	jmp	#LR__0897
0e8e0                 | LR__0890
0e8e0     45 8D 02 F6 | 	mov	local05, local04
0e8e4     00 8E 06 F6 | 	mov	local06, #0
0e8e8     02 00 00 FF 
0e8ec     34 90 06 F6 | 	mov	local07, ##1076
0e8f0     46 77 02 F6 | 	mov	arg01, local05
0e8f4     00 78 06 F6 | 	mov	arg02, #0
0e8f8     02 00 00 FF 
0e8fc     34 7A 06 F6 | 	mov	arg03, ##1076
0e900     EC 08 B0 FD | 	call	#_ff_cc_memset
0e904                 | '   switch (flags & 3) {
0e904     44 93 02 F6 | 	mov	local08, local03
0e908     03 92 0E F5 | 	and	local08, #3 wz
0e90c     0C 00 90 AD |  if_e	jmp	#LR__0891
0e910     01 92 0E F2 | 	cmp	local08, #1 wz
0e914     0C 00 90 AD |  if_e	jmp	#LR__0892
0e918     10 00 90 FD | 	jmp	#LR__0893
0e91c                 | LR__0891
0e91c     01 94 06 F6 | 	mov	local09, #1
0e920                 | '       fs_flags =  0x01 ;
0e920                 | '       break;
0e920     0C 00 90 FD | 	jmp	#LR__0894
0e924                 | LR__0892
0e924     02 94 06 F6 | 	mov	local09, #2
0e928                 | '       fs_flags =  0x02 ;
0e928                 | '       break;
0e928     04 00 90 FD | 	jmp	#LR__0894
0e92c                 | LR__0893
0e92c     03 94 06 F6 | 	mov	local09, #3
0e930                 | '       fs_flags =  0x01  |  0x02 ;
0e930                 | '       break;
0e930                 | LR__0894
0e930     08 88 CE F7 | 	test	local03, #8 wz
0e934     18 94 46 55 |  if_ne	or	local09, #24
0e938     08 00 90 5D |  if_ne	jmp	#LR__0895
0e93c     20 88 CE F7 | 	test	local03, #32 wz
0e940     30 94 46 55 |  if_ne	or	local09, #48
0e944                 | LR__0895
0e944     02 00 00 FF 
0e948     0C 8A 06 F1 | 	add	local04, ##1036
0e94c     45 77 02 F6 | 	mov	arg01, local04
0e950     02 00 00 FF 
0e954     0C 8A 86 F1 | 	sub	local04, ##1036
0e958     43 79 02 F6 | 	mov	arg02, local02
0e95c     4A 7B 02 F6 | 	mov	arg03, local09
0e960     90 C9 BF FD | 	call	#_ff_cc_f_open
0e964     18 97 0A F6 | 	mov	local10, result1 wz
0e968     14 00 90 AD |  if_e	jmp	#LR__0896
0e96c     45 77 02 F6 | 	mov	arg01, local04
0e970                 | '     return _gc_free(ptr);
0e970     60 8D BF FD | 	call	#__system___gc_free
0e974                 | '     free(f);
0e974                 | '     return _set_dos_error(r);
0e974     4B 77 02 F6 | 	mov	arg01, local10
0e978     88 F6 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e97c     08 00 90 FD | 	jmp	#LR__0897
0e980                 | LR__0896
0e980     42 8B 62 FC | 	wrlong	local04, local01
0e984                 | '   }
0e984                 | '   fil->vfsdata = f;
0e984                 | '   return 0;
0e984     00 30 06 F6 | 	mov	result1, #0
0e988                 | LR__0897
0e988     AF F0 03 F6 | 	mov	ptra, fp
0e98c     BF 00 A0 FD | 	call	#popregs_
0e990                 | _ff_cc_v_open_0548_ret
0e990     2D 00 64 FD | 	ret
0e994                 | 
0e994                 | _ff_cc_xmit_mmc_0705
0e994     04 5A 05 F6 | 	mov	COUNT_, #4
0e998     B0 00 A0 FD | 	call	#pushregs_
0e99c     6C 1B 06 F1 | 	add	ptr__ff_cc_dat__, #364
0e9a0     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0e9a4     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
0e9a8     0D 87 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0e9ac     74 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #372
0e9b0     58 17 9F FE | 	loc	pa,	#(@LR__0899-@LR__0898)
0e9b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
0e9b8                 | ' 
0e9b8                 | ' 	do {
0e9b8                 | LR__0898
0e9b8     3B 89 C2 FA | 	rdbyte	local03, arg01
0e9bc     44 8B 02 F6 | 	mov	local04, local03
0e9c0     07 8A 46 F7 | 	zerox	local04, #7
0e9c4     80 8A CE F7 | 	test	local04, #128 wz
0e9c8     01 76 06 F1 | 	add	arg01, #1
0e9cc     5D 86 62 FD | 	drvnz	local02
0e9d0     59 84 62 FD | 	drvh	local01
0e9d4     1F 20 64 FD | 	waitx	#16
0e9d8     58 84 62 FD | 	drvl	local01
0e9dc     1F 20 64 FD | 	waitx	#16
0e9e0     44 8B 02 F6 | 	mov	local04, local03
0e9e4     07 8A 46 F7 | 	zerox	local04, #7
0e9e8     40 8A CE F7 | 	test	local04, #64 wz
0e9ec     5D 86 62 FD | 	drvnz	local02
0e9f0     59 84 62 FD | 	drvh	local01
0e9f4     1F 20 64 FD | 	waitx	#16
0e9f8     58 84 62 FD | 	drvl	local01
0e9fc     1F 20 64 FD | 	waitx	#16
0ea00     44 8B 02 F6 | 	mov	local04, local03
0ea04     07 8A 46 F7 | 	zerox	local04, #7
0ea08     20 8A CE F7 | 	test	local04, #32 wz
0ea0c     5D 86 62 FD | 	drvnz	local02
0ea10     59 84 62 FD | 	drvh	local01
0ea14     1F 20 64 FD | 	waitx	#16
0ea18     58 84 62 FD | 	drvl	local01
0ea1c     1F 20 64 FD | 	waitx	#16
0ea20     44 8B 02 F6 | 	mov	local04, local03
0ea24     07 8A 46 F7 | 	zerox	local04, #7
0ea28     10 8A CE F7 | 	test	local04, #16 wz
0ea2c     5D 86 62 FD | 	drvnz	local02
0ea30     59 84 62 FD | 	drvh	local01
0ea34     1F 20 64 FD | 	waitx	#16
0ea38     58 84 62 FD | 	drvl	local01
0ea3c     1F 20 64 FD | 	waitx	#16
0ea40     44 8B 02 F6 | 	mov	local04, local03
0ea44     07 8A 46 F7 | 	zerox	local04, #7
0ea48     08 8A CE F7 | 	test	local04, #8 wz
0ea4c     5D 86 62 FD | 	drvnz	local02
0ea50     59 84 62 FD | 	drvh	local01
0ea54     1F 20 64 FD | 	waitx	#16
0ea58     58 84 62 FD | 	drvl	local01
0ea5c     1F 20 64 FD | 	waitx	#16
0ea60     44 8B 02 F6 | 	mov	local04, local03
0ea64     07 8A 46 F7 | 	zerox	local04, #7
0ea68     04 8A CE F7 | 	test	local04, #4 wz
0ea6c     5D 86 62 FD | 	drvnz	local02
0ea70     59 84 62 FD | 	drvh	local01
0ea74     1F 20 64 FD | 	waitx	#16
0ea78     58 84 62 FD | 	drvl	local01
0ea7c     1F 20 64 FD | 	waitx	#16
0ea80     44 8B 02 F6 | 	mov	local04, local03
0ea84     07 8A 46 F7 | 	zerox	local04, #7
0ea88     02 8A CE F7 | 	test	local04, #2 wz
0ea8c     5D 86 62 FD | 	drvnz	local02
0ea90     59 84 62 FD | 	drvh	local01
0ea94     1F 20 64 FD | 	waitx	#16
0ea98     58 84 62 FD | 	drvl	local01
0ea9c     1F 20 64 FD | 	waitx	#16
0eaa0     07 88 46 F7 | 	zerox	local03, #7
0eaa4     01 88 CE F7 | 	test	local03, #1 wz
0eaa8     5D 86 62 FD | 	drvnz	local02
0eaac     59 84 62 FD | 	drvh	local01
0eab0     1F 20 64 FD | 	waitx	#16
0eab4     58 84 62 FD | 	drvl	local01
0eab8     1F 20 64 FD | 	waitx	#16
0eabc     01 78 8E F1 | 	sub	arg02, #1 wz
0eac0     F4 FE 9F 5D |  if_ne	jmp	#LR__0898
0eac4                 | LR__0899
0eac4     AF F0 03 F6 | 	mov	ptra, fp
0eac8     BF 00 A0 FD | 	call	#popregs_
0eacc                 | _ff_cc_xmit_mmc_0705_ret
0eacc     2D 00 64 FD | 	ret
0ead0                 | 
0ead0                 | _ff_cc_rcvr_mmc_0711
0ead0     04 5A 05 F6 | 	mov	COUNT_, #4
0ead4     B0 00 A0 FD | 	call	#pushregs_
0ead8     3B 85 02 F6 | 	mov	local01, arg01
0eadc     6C 1B 06 F1 | 	add	ptr__ff_cc_dat__, #364
0eae0     0D 87 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0eae4     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
0eae8     0D 77 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0eaec     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
0eaf0     0D 89 02 FB | 	rdlong	local03, ptr__ff_cc_dat__
0eaf4     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0eaf8     59 76 62 FD | 	drvh	arg01
0eafc     6C 16 9F FE | 	loc	pa,	#(@LR__0901-@LR__0900)
0eb00     93 00 A0 FD | 	call	#FCACHE_LOAD_
0eb04                 | ' 
0eb04                 | ' 	(_pinh(PIN_DI)) ;
0eb04                 | ' 
0eb04                 | ' 	do {
0eb04                 | LR__0900
0eb04     00 8A 06 F6 | 	mov	local04, #0
0eb08     1F 10 64 FD | 	waitx	#8
0eb0c     40 88 72 FD | 	testp	local03 wc
0eb10     6C 30 62 FD | 	wrc	result1
0eb14     01 30 CE F7 | 	test	result1, #1 wz
0eb18     01 8A 06 56 |  if_ne	mov	local04, #1
0eb1c     59 86 62 FD | 	drvh	local02
0eb20     1F 20 64 FD | 	waitx	#16
0eb24     58 86 62 FD | 	drvl	local02
0eb28     1F 20 64 FD | 	waitx	#16
0eb2c     07 8A 46 F7 | 	zerox	local04, #7
0eb30     01 8A 66 F0 | 	shl	local04, #1
0eb34     1F 10 64 FD | 	waitx	#8
0eb38     40 88 72 FD | 	testp	local03 wc
0eb3c     6C 30 62 FD | 	wrc	result1
0eb40     01 30 CE F7 | 	test	result1, #1 wz
0eb44     01 8A 06 51 |  if_ne	add	local04, #1
0eb48     59 86 62 FD | 	drvh	local02
0eb4c     1F 20 64 FD | 	waitx	#16
0eb50     58 86 62 FD | 	drvl	local02
0eb54     1F 20 64 FD | 	waitx	#16
0eb58     07 8A 46 F7 | 	zerox	local04, #7
0eb5c     01 8A 66 F0 | 	shl	local04, #1
0eb60     1F 10 64 FD | 	waitx	#8
0eb64     40 88 72 FD | 	testp	local03 wc
0eb68     6C 30 62 FD | 	wrc	result1
0eb6c     01 30 CE F7 | 	test	result1, #1 wz
0eb70     01 8A 06 51 |  if_ne	add	local04, #1
0eb74     59 86 62 FD | 	drvh	local02
0eb78     1F 20 64 FD | 	waitx	#16
0eb7c     58 86 62 FD | 	drvl	local02
0eb80     1F 20 64 FD | 	waitx	#16
0eb84     07 8A 46 F7 | 	zerox	local04, #7
0eb88     01 8A 66 F0 | 	shl	local04, #1
0eb8c     1F 10 64 FD | 	waitx	#8
0eb90     40 88 72 FD | 	testp	local03 wc
0eb94     6C 30 62 FD | 	wrc	result1
0eb98     01 30 CE F7 | 	test	result1, #1 wz
0eb9c     01 8A 06 51 |  if_ne	add	local04, #1
0eba0     59 86 62 FD | 	drvh	local02
0eba4     1F 20 64 FD | 	waitx	#16
0eba8     58 86 62 FD | 	drvl	local02
0ebac     1F 20 64 FD | 	waitx	#16
0ebb0     07 8A 46 F7 | 	zerox	local04, #7
0ebb4     01 8A 66 F0 | 	shl	local04, #1
0ebb8     1F 10 64 FD | 	waitx	#8
0ebbc     40 88 72 FD | 	testp	local03 wc
0ebc0     6C 30 62 FD | 	wrc	result1
0ebc4     01 30 CE F7 | 	test	result1, #1 wz
0ebc8     01 8A 06 51 |  if_ne	add	local04, #1
0ebcc     59 86 62 FD | 	drvh	local02
0ebd0     1F 20 64 FD | 	waitx	#16
0ebd4     58 86 62 FD | 	drvl	local02
0ebd8     1F 20 64 FD | 	waitx	#16
0ebdc     07 8A 46 F7 | 	zerox	local04, #7
0ebe0     01 8A 66 F0 | 	shl	local04, #1
0ebe4     1F 10 64 FD | 	waitx	#8
0ebe8     40 88 72 FD | 	testp	local03 wc
0ebec     6C 30 62 FD | 	wrc	result1
0ebf0     01 30 CE F7 | 	test	result1, #1 wz
0ebf4     01 8A 06 51 |  if_ne	add	local04, #1
0ebf8     59 86 62 FD | 	drvh	local02
0ebfc     1F 20 64 FD | 	waitx	#16
0ec00     58 86 62 FD | 	drvl	local02
0ec04     1F 20 64 FD | 	waitx	#16
0ec08     07 8A 46 F7 | 	zerox	local04, #7
0ec0c     01 8A 66 F0 | 	shl	local04, #1
0ec10     1F 10 64 FD | 	waitx	#8
0ec14     40 88 72 FD | 	testp	local03 wc
0ec18     6C 30 62 FD | 	wrc	result1
0ec1c     01 30 CE F7 | 	test	result1, #1 wz
0ec20     01 8A 06 51 |  if_ne	add	local04, #1
0ec24     59 86 62 FD | 	drvh	local02
0ec28     1F 20 64 FD | 	waitx	#16
0ec2c     58 86 62 FD | 	drvl	local02
0ec30     1F 20 64 FD | 	waitx	#16
0ec34     07 8A 46 F7 | 	zerox	local04, #7
0ec38     01 8A 66 F0 | 	shl	local04, #1
0ec3c     1F 10 64 FD | 	waitx	#8
0ec40     40 88 72 FD | 	testp	local03 wc
0ec44     6C 30 62 FD | 	wrc	result1
0ec48     01 30 CE F7 | 	test	result1, #1 wz
0ec4c     01 8A 06 51 |  if_ne	add	local04, #1
0ec50     59 86 62 FD | 	drvh	local02
0ec54     1F 20 64 FD | 	waitx	#16
0ec58     58 86 62 FD | 	drvl	local02
0ec5c     1F 20 64 FD | 	waitx	#16
0ec60     42 8B 42 FC | 	wrbyte	local04, local01
0ec64     01 78 8E F1 | 	sub	arg02, #1 wz
0ec68     01 84 06 F1 | 	add	local01, #1
0ec6c     94 FE 9F 5D |  if_ne	jmp	#LR__0900
0ec70                 | LR__0901
0ec70     AF F0 03 F6 | 	mov	ptra, fp
0ec74     BF 00 A0 FD | 	call	#popregs_
0ec78                 | _ff_cc_rcvr_mmc_0711_ret
0ec78     2D 00 64 FD | 	ret
0ec7c                 | 
0ec7c                 | _ff_cc_wait_ready_0714
0ec7c     04 5A 05 F6 | 	mov	COUNT_, #4
0ec80     B0 00 A0 FD | 	call	#pushregs_
0ec84     0C F0 07 F1 | 	add	ptra, #12
0ec88                 | ' {
0ec88                 | ' 	BYTE d;
0ec88                 | ' 	UINT tmr;
0ec88                 | ' 
0ec88                 | ' 
0ec88                 | ' 	for (tmr = 5000; tmr; tmr--) {
0ec88     08 5E 05 F1 | 	add	fp, #8
0ec8c     09 00 80 FF 
0ec90     AF 10 6B FC | 	wrlong	##5000, fp
0ec94     08 5E 85 F1 | 	sub	fp, #8
0ec98                 | LR__0902
0ec98     08 5E 05 F1 | 	add	fp, #8
0ec9c     AF 84 0A FB | 	rdlong	local01, fp wz
0eca0     08 5E 85 F1 | 	sub	fp, #8
0eca4     4C 00 90 AD |  if_e	jmp	#LR__0903
0eca8     04 5E 05 F1 | 	add	fp, #4
0ecac     AF 76 02 F6 | 	mov	arg01, fp
0ecb0     04 5E 85 F1 | 	sub	fp, #4
0ecb4     01 78 06 F6 | 	mov	arg02, #1
0ecb8     14 FE BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ecbc     04 5E 05 F1 | 	add	fp, #4
0ecc0     AF 86 C2 FA | 	rdbyte	local02, fp
0ecc4     04 5E 85 F1 | 	sub	fp, #4
0ecc8     07 86 46 F7 | 	zerox	local02, #7
0eccc     FF 86 0E F2 | 	cmp	local02, #255 wz
0ecd0     20 00 90 AD |  if_e	jmp	#LR__0903
0ecd4     64 76 06 F6 | 	mov	arg01, #100
0ecd8     50 7A BF FD | 	call	#__system___waitus
0ecdc     08 5E 05 F1 | 	add	fp, #8
0ece0     AF 88 02 FB | 	rdlong	local03, fp
0ece4     01 88 86 F1 | 	sub	local03, #1
0ece8     AF 88 62 FC | 	wrlong	local03, fp
0ecec     08 5E 85 F1 | 	sub	fp, #8
0ecf0     A4 FF 9F FD | 	jmp	#LR__0902
0ecf4                 | LR__0903
0ecf4                 | ' 		dly_us(100);
0ecf4                 | ' 	}
0ecf4                 | ' 
0ecf4                 | ' 	return tmr ? 1 : 0;
0ecf4     08 5E 05 F1 | 	add	fp, #8
0ecf8     AF 84 0A FB | 	rdlong	local01, fp wz
0ecfc     08 5E 85 F1 | 	sub	fp, #8
0ed00     01 8A 06 56 |  if_ne	mov	local04, #1
0ed04     00 8A 06 A6 |  if_e	mov	local04, #0
0ed08     45 31 02 F6 | 	mov	result1, local04
0ed0c     AF F0 03 F6 | 	mov	ptra, fp
0ed10     BF 00 A0 FD | 	call	#popregs_
0ed14                 | _ff_cc_wait_ready_0714_ret
0ed14     2D 00 64 FD | 	ret
0ed18                 | 
0ed18                 | _ff_cc_deselect_0720
0ed18     01 5A 05 F6 | 	mov	COUNT_, #1
0ed1c     B0 00 A0 FD | 	call	#pushregs_
0ed20     14 F0 07 F1 | 	add	ptra, #20
0ed24     70 1B 06 F1 | 	add	ptr__ff_cc_dat__, #368
0ed28     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed2c     04 5E 05 F1 | 	add	fp, #4
0ed30     AF 84 62 FC | 	wrlong	local01, fp
0ed34     04 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0ed38     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed3c     04 5E 05 F1 | 	add	fp, #4
0ed40     AF 84 62 FC | 	wrlong	local01, fp
0ed44     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
0ed48     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed4c     04 5E 05 F1 | 	add	fp, #4
0ed50     AF 84 62 FC | 	wrlong	local01, fp
0ed54     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
0ed58     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed5c     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0ed60     04 5E 05 F1 | 	add	fp, #4
0ed64     AF 84 62 FC | 	wrlong	local01, fp
0ed68     0C 5E 85 F1 | 	sub	fp, #12
0ed6c     AF 76 02 FB | 	rdlong	arg01, fp
0ed70     04 5E 85 F1 | 	sub	fp, #4
0ed74     59 76 62 FD | 	drvh	arg01
0ed78     1F 20 64 FD | 	waitx	#16
0ed7c     AF 76 02 F6 | 	mov	arg01, fp
0ed80     01 78 06 F6 | 	mov	arg02, #1
0ed84     48 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ed88     AF F0 03 F6 | 	mov	ptra, fp
0ed8c     BF 00 A0 FD | 	call	#popregs_
0ed90                 | _ff_cc_deselect_0720_ret
0ed90     2D 00 64 FD | 	ret
0ed94                 | 
0ed94                 | _ff_cc_select_0723
0ed94     00 5A 05 F6 | 	mov	COUNT_, #0
0ed98     B0 00 A0 FD | 	call	#pushregs_
0ed9c     0C F0 07 F1 | 	add	ptra, #12
0eda0     70 1B 06 F1 | 	add	ptr__ff_cc_dat__, #368
0eda4     0D 77 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0eda8     70 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #368
0edac     08 5E 05 F1 | 	add	fp, #8
0edb0     AF 76 62 FC | 	wrlong	arg01, fp
0edb4     58 76 62 FD | 	drvl	arg01
0edb8     1F 20 64 FD | 	waitx	#16
0edbc     04 5E 85 F1 | 	sub	fp, #4
0edc0     AF 76 02 F6 | 	mov	arg01, fp
0edc4     04 5E 85 F1 | 	sub	fp, #4
0edc8     01 78 06 F6 | 	mov	arg02, #1
0edcc     00 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0edd0     A8 FE BF FD | 	call	#_ff_cc_wait_ready_0714
0edd4     00 30 0E F2 | 	cmp	result1, #0 wz
0edd8     01 30 06 56 |  if_ne	mov	result1, #1
0eddc     08 00 90 5D |  if_ne	jmp	#LR__0904
0ede0     34 FF BF FD | 	call	#_ff_cc_deselect_0720
0ede4                 | ' 
0ede4                 | ' 	deselect();
0ede4                 | ' 	return 0;
0ede4     00 30 06 F6 | 	mov	result1, #0
0ede8                 | LR__0904
0ede8     AF F0 03 F6 | 	mov	ptra, fp
0edec     BF 00 A0 FD | 	call	#popregs_
0edf0                 | _ff_cc_select_0723_ret
0edf0     2D 00 64 FD | 	ret
0edf4                 | 
0edf4                 | _ff_cc_rcvr_datablock_0726
0edf4     04 5A 05 F6 | 	mov	COUNT_, #4
0edf8     B0 00 A0 FD | 	call	#pushregs_
0edfc     14 F0 07 F1 | 	add	ptra, #20
0ee00     04 5E 05 F1 | 	add	fp, #4
0ee04     AF 76 62 FC | 	wrlong	arg01, fp
0ee08     04 5E 05 F1 | 	add	fp, #4
0ee0c     AF 78 62 FC | 	wrlong	arg02, fp
0ee10                 | ' 	BYTE *buff,
0ee10                 | ' 	UINT btr
0ee10                 | ' )
0ee10                 | ' {
0ee10                 | ' 	BYTE d[2];
0ee10                 | ' 	UINT tmr;
0ee10                 | ' 
0ee10                 | ' 
0ee10                 | ' 	for (tmr = 1000; tmr; tmr--) {
0ee10     08 5E 05 F1 | 	add	fp, #8
0ee14     01 00 80 FF 
0ee18     AF D0 6B FC | 	wrlong	##1000, fp
0ee1c     10 5E 85 F1 | 	sub	fp, #16
0ee20                 | LR__0905
0ee20     10 5E 05 F1 | 	add	fp, #16
0ee24     AF 84 0A FB | 	rdlong	local01, fp wz
0ee28     10 5E 85 F1 | 	sub	fp, #16
0ee2c     4C 00 90 AD |  if_e	jmp	#LR__0906
0ee30     0C 5E 05 F1 | 	add	fp, #12
0ee34     AF 76 02 F6 | 	mov	arg01, fp
0ee38     0C 5E 85 F1 | 	sub	fp, #12
0ee3c     01 78 06 F6 | 	mov	arg02, #1
0ee40     8C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ee44     0C 5E 05 F1 | 	add	fp, #12
0ee48     AF 86 C2 FA | 	rdbyte	local02, fp
0ee4c     0C 5E 85 F1 | 	sub	fp, #12
0ee50     07 86 46 F7 | 	zerox	local02, #7
0ee54     FF 86 0E F2 | 	cmp	local02, #255 wz
0ee58     20 00 90 5D |  if_ne	jmp	#LR__0906
0ee5c     64 76 06 F6 | 	mov	arg01, #100
0ee60     C8 78 BF FD | 	call	#__system___waitus
0ee64     10 5E 05 F1 | 	add	fp, #16
0ee68     AF 88 02 FB | 	rdlong	local03, fp
0ee6c     01 88 86 F1 | 	sub	local03, #1
0ee70     AF 88 62 FC | 	wrlong	local03, fp
0ee74     10 5E 85 F1 | 	sub	fp, #16
0ee78     A4 FF 9F FD | 	jmp	#LR__0905
0ee7c                 | LR__0906
0ee7c     0C 5E 05 F1 | 	add	fp, #12
0ee80     AF 8A C2 FA | 	rdbyte	local04, fp
0ee84     0C 5E 85 F1 | 	sub	fp, #12
0ee88     07 8A 46 F7 | 	zerox	local04, #7
0ee8c     FE 8A 0E F2 | 	cmp	local04, #254 wz
0ee90     00 30 06 56 |  if_ne	mov	result1, #0
0ee94     30 00 90 5D |  if_ne	jmp	#LR__0907
0ee98     04 5E 05 F1 | 	add	fp, #4
0ee9c     AF 76 02 FB | 	rdlong	arg01, fp
0eea0     04 5E 05 F1 | 	add	fp, #4
0eea4     AF 78 02 FB | 	rdlong	arg02, fp
0eea8     08 5E 85 F1 | 	sub	fp, #8
0eeac     20 FC BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0eeb0     0C 5E 05 F1 | 	add	fp, #12
0eeb4     AF 76 02 F6 | 	mov	arg01, fp
0eeb8     0C 5E 85 F1 | 	sub	fp, #12
0eebc     02 78 06 F6 | 	mov	arg02, #2
0eec0     0C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0eec4                 | ' 
0eec4                 | ' 	rcvr_mmc(buff, btr);
0eec4                 | ' 	rcvr_mmc(d, 2);
0eec4                 | ' 
0eec4                 | ' 	return 1;
0eec4     01 30 06 F6 | 	mov	result1, #1
0eec8                 | LR__0907
0eec8     AF F0 03 F6 | 	mov	ptra, fp
0eecc     BF 00 A0 FD | 	call	#popregs_
0eed0                 | _ff_cc_rcvr_datablock_0726_ret
0eed0     2D 00 64 FD | 	ret
0eed4                 | 
0eed4                 | _ff_cc_xmit_datablock_0728
0eed4     01 5A 05 F6 | 	mov	COUNT_, #1
0eed8     B0 00 A0 FD | 	call	#pushregs_
0eedc     10 F0 07 F1 | 	add	ptra, #16
0eee0     04 5E 05 F1 | 	add	fp, #4
0eee4     AF 76 62 FC | 	wrlong	arg01, fp
0eee8     04 5E 05 F1 | 	add	fp, #4
0eeec     AF 78 42 FC | 	wrbyte	arg02, fp
0eef0     08 5E 85 F1 | 	sub	fp, #8
0eef4     84 FD BF FD | 	call	#_ff_cc_wait_ready_0714
0eef8     00 30 0E F2 | 	cmp	result1, #0 wz
0eefc     00 30 06 A6 |  if_e	mov	result1, #0
0ef00     98 00 90 AD |  if_e	jmp	#LR__0909
0ef04     08 5E 05 F1 | 	add	fp, #8
0ef08     AF 84 C2 FA | 	rdbyte	local01, fp
0ef0c     04 5E 05 F1 | 	add	fp, #4
0ef10     AF 84 42 FC | 	wrbyte	local01, fp
0ef14     AF 76 02 F6 | 	mov	arg01, fp
0ef18     0C 5E 85 F1 | 	sub	fp, #12
0ef1c     01 78 06 F6 | 	mov	arg02, #1
0ef20     70 FA BF FD | 	call	#_ff_cc_xmit_mmc_0705
0ef24     08 5E 05 F1 | 	add	fp, #8
0ef28     AF 84 C2 FA | 	rdbyte	local01, fp
0ef2c     08 5E 85 F1 | 	sub	fp, #8
0ef30     07 84 46 F7 | 	zerox	local01, #7
0ef34     FD 84 0E F2 | 	cmp	local01, #253 wz
0ef38     5C 00 90 AD |  if_e	jmp	#LR__0908
0ef3c     04 5E 05 F1 | 	add	fp, #4
0ef40     AF 76 02 FB | 	rdlong	arg01, fp
0ef44     04 5E 85 F1 | 	sub	fp, #4
0ef48     09 78 C6 F9 | 	decod	arg02, #9
0ef4c     44 FA BF FD | 	call	#_ff_cc_xmit_mmc_0705
0ef50     0C 5E 05 F1 | 	add	fp, #12
0ef54     AF 76 02 F6 | 	mov	arg01, fp
0ef58     0C 5E 85 F1 | 	sub	fp, #12
0ef5c     02 78 06 F6 | 	mov	arg02, #2
0ef60     6C FB BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ef64     0C 5E 05 F1 | 	add	fp, #12
0ef68     AF 76 02 F6 | 	mov	arg01, fp
0ef6c     0C 5E 85 F1 | 	sub	fp, #12
0ef70     01 78 06 F6 | 	mov	arg02, #1
0ef74     58 FB BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ef78     0C 5E 05 F1 | 	add	fp, #12
0ef7c     AF 84 C2 FA | 	rdbyte	local01, fp
0ef80     0C 5E 85 F1 | 	sub	fp, #12
0ef84     07 84 46 F7 | 	zerox	local01, #7
0ef88     1F 84 06 F5 | 	and	local01, #31
0ef8c     05 84 0E F2 | 	cmp	local01, #5 wz
0ef90                 | ' 			return 0;
0ef90     00 30 06 56 |  if_ne	mov	result1, #0
0ef94     04 00 90 5D |  if_ne	jmp	#LR__0909
0ef98                 | LR__0908
0ef98                 | ' 	}
0ef98                 | ' 
0ef98                 | ' 	return 1;
0ef98     01 30 06 F6 | 	mov	result1, #1
0ef9c                 | LR__0909
0ef9c     AF F0 03 F6 | 	mov	ptra, fp
0efa0     BF 00 A0 FD | 	call	#popregs_
0efa4                 | _ff_cc_xmit_datablock_0728_ret
0efa4     2D 00 64 FD | 	ret
0efa8                 | 
0efa8                 | _ff_cc_send_cmd_0732
0efa8     05 5A 05 F6 | 	mov	COUNT_, #5
0efac     B0 00 A0 FD | 	call	#pushregs_
0efb0     1C F0 07 F1 | 	add	ptra, #28
0efb4                 | _ff_cc_send_cmd_0732_enter
0efb4     04 5E 05 F1 | 	add	fp, #4
0efb8     AF 76 42 FC | 	wrbyte	arg01, fp
0efbc     04 5E 05 F1 | 	add	fp, #4
0efc0     AF 78 62 FC | 	wrlong	arg02, fp
0efc4     04 5E 85 F1 | 	sub	fp, #4
0efc8     AF 84 C2 FA | 	rdbyte	local01, fp
0efcc     04 5E 85 F1 | 	sub	fp, #4
0efd0     07 84 46 F7 | 	zerox	local01, #7
0efd4     80 84 CE F7 | 	test	local01, #128 wz
0efd8     4C 00 90 AD |  if_e	jmp	#LR__0911
0efdc     04 5E 05 F1 | 	add	fp, #4
0efe0     AF 84 C2 FA | 	rdbyte	local01, fp
0efe4     7F 84 06 F5 | 	and	local01, #127
0efe8     AF 84 42 FC | 	wrbyte	local01, fp
0efec     04 5E 85 F1 | 	sub	fp, #4
0eff0     37 76 06 F6 | 	mov	arg01, #55
0eff4     00 78 06 F6 | 	mov	arg02, #0
0eff8     AC FF BF FD | 	call	#_ff_cc_send_cmd_0732
0effc     0C 5E 05 F1 | 	add	fp, #12
0f000     AF 30 42 FC | 	wrbyte	result1, fp
0f004     AF 84 C2 FA | 	rdbyte	local01, fp
0f008     0C 5E 85 F1 | 	sub	fp, #12
0f00c     07 84 46 F7 | 	zerox	local01, #7
0f010     01 84 1E F2 | 	cmp	local01, #1 wcz
0f014     10 00 90 ED |  if_be	jmp	#LR__0910
0f018     0C 5E 05 F1 | 	add	fp, #12
0f01c     AF 30 C2 FA | 	rdbyte	result1, fp
0f020     0C 5E 85 F1 | 	sub	fp, #12
0f024     88 01 90 FD | 	jmp	#LR__0916
0f028                 | LR__0910
0f028                 | LR__0911
0f028     04 5E 05 F1 | 	add	fp, #4
0f02c     AF 84 C2 FA | 	rdbyte	local01, fp
0f030     04 5E 85 F1 | 	sub	fp, #4
0f034     07 84 46 F7 | 	zerox	local01, #7
0f038     0C 84 0E F2 | 	cmp	local01, #12 wz
0f03c     14 00 90 AD |  if_e	jmp	#LR__0912
0f040     D4 FC BF FD | 	call	#_ff_cc_deselect_0720
0f044     4C FD BF FD | 	call	#_ff_cc_select_0723
0f048     00 30 0E F2 | 	cmp	result1, #0 wz
0f04c     FF 30 06 A6 |  if_e	mov	result1, #255
0f050     5C 01 90 AD |  if_e	jmp	#LR__0916
0f054                 | LR__0912
0f054     04 5E 05 F1 | 	add	fp, #4
0f058     AF 86 C2 FA | 	rdbyte	local02, fp
0f05c     40 84 06 F6 | 	mov	local01, #64
0f060     43 85 42 F5 | 	or	local01, local02
0f064     10 5E 05 F1 | 	add	fp, #16
0f068     AF 84 42 FC | 	wrbyte	local01, fp
0f06c     0C 5E 85 F1 | 	sub	fp, #12
0f070     AF 84 02 FB | 	rdlong	local01, fp
0f074     18 84 46 F0 | 	shr	local01, #24
0f078     0D 5E 05 F1 | 	add	fp, #13
0f07c     AF 84 42 FC | 	wrbyte	local01, fp
0f080     0D 5E 85 F1 | 	sub	fp, #13
0f084     AF 84 02 FB | 	rdlong	local01, fp
0f088     10 84 46 F0 | 	shr	local01, #16
0f08c     0E 5E 05 F1 | 	add	fp, #14
0f090     AF 84 42 FC | 	wrbyte	local01, fp
0f094     0E 5E 85 F1 | 	sub	fp, #14
0f098     AF 84 02 FB | 	rdlong	local01, fp
0f09c     08 84 46 F0 | 	shr	local01, #8
0f0a0     0F 5E 05 F1 | 	add	fp, #15
0f0a4     AF 84 42 FC | 	wrbyte	local01, fp
0f0a8     0F 5E 85 F1 | 	sub	fp, #15
0f0ac     AF 84 02 FB | 	rdlong	local01, fp
0f0b0     10 5E 05 F1 | 	add	fp, #16
0f0b4     AF 84 42 FC | 	wrbyte	local01, fp
0f0b8     0C 5E 85 F1 | 	sub	fp, #12
0f0bc     AF 02 48 FC | 	wrbyte	#1, fp
0f0c0     08 5E 85 F1 | 	sub	fp, #8
0f0c4     AF 84 C2 FA | 	rdbyte	local01, fp
0f0c8     04 5E 85 F1 | 	sub	fp, #4
0f0cc     07 84 4E F7 | 	zerox	local01, #7 wz
0f0d0     0C 5E 05 A1 |  if_e	add	fp, #12
0f0d4     AF 2A 49 AC |  if_e	wrbyte	#149, fp
0f0d8     0C 5E 85 A1 |  if_e	sub	fp, #12
0f0dc     04 5E 05 F1 | 	add	fp, #4
0f0e0     AF 84 C2 FA | 	rdbyte	local01, fp
0f0e4     04 5E 85 F1 | 	sub	fp, #4
0f0e8     07 84 46 F7 | 	zerox	local01, #7
0f0ec     08 84 0E F2 | 	cmp	local01, #8 wz
0f0f0     0C 5E 05 A1 |  if_e	add	fp, #12
0f0f4     AF 0E 49 AC |  if_e	wrbyte	#135, fp
0f0f8     0C 5E 85 A1 |  if_e	sub	fp, #12
0f0fc     0C 5E 05 F1 | 	add	fp, #12
0f100     AF 84 C2 FA | 	rdbyte	local01, fp
0f104     0D 5E 05 F1 | 	add	fp, #13
0f108     AF 84 42 FC | 	wrbyte	local01, fp
0f10c     05 5E 85 F1 | 	sub	fp, #5
0f110     AF 76 02 F6 | 	mov	arg01, fp
0f114     14 5E 85 F1 | 	sub	fp, #20
0f118     06 78 06 F6 | 	mov	arg02, #6
0f11c     74 F8 BF FD | 	call	#_ff_cc_xmit_mmc_0705
0f120     04 5E 05 F1 | 	add	fp, #4
0f124     AF 84 C2 FA | 	rdbyte	local01, fp
0f128     04 5E 85 F1 | 	sub	fp, #4
0f12c     07 84 46 F7 | 	zerox	local01, #7
0f130     0C 84 0E F2 | 	cmp	local01, #12 wz
0f134     14 00 90 5D |  if_ne	jmp	#LR__0913
0f138     10 5E 05 F1 | 	add	fp, #16
0f13c     AF 76 02 F6 | 	mov	arg01, fp
0f140     10 5E 85 F1 | 	sub	fp, #16
0f144     01 78 06 F6 | 	mov	arg02, #1
0f148     84 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0f14c                 | LR__0913
0f14c     0C 5E 05 F1 | 	add	fp, #12
0f150     AF 14 48 FC | 	wrbyte	#10, fp
0f154     0C 5E 85 F1 | 	sub	fp, #12
0f158                 | ' 	n = 10;
0f158                 | ' 	do
0f158                 | LR__0914
0f158     10 5E 05 F1 | 	add	fp, #16
0f15c     AF 76 02 F6 | 	mov	arg01, fp
0f160     10 5E 85 F1 | 	sub	fp, #16
0f164     01 78 06 F6 | 	mov	arg02, #1
0f168     64 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0f16c     10 5E 05 F1 | 	add	fp, #16
0f170     AF 84 C2 FA | 	rdbyte	local01, fp
0f174     10 5E 85 F1 | 	sub	fp, #16
0f178     07 84 46 F7 | 	zerox	local01, #7
0f17c     80 84 CE F7 | 	test	local01, #128 wz
0f180     20 00 90 AD |  if_e	jmp	#LR__0915
0f184     0C 5E 05 F1 | 	add	fp, #12
0f188     AF 88 C2 FA | 	rdbyte	local03, fp
0f18c     01 88 86 F1 | 	sub	local03, #1
0f190     AF 88 42 FC | 	wrbyte	local03, fp
0f194     AF 8A C2 FA | 	rdbyte	local04, fp
0f198     0C 5E 85 F1 | 	sub	fp, #12
0f19c     45 8D 0A F6 | 	mov	local05, local04 wz
0f1a0     B4 FF 9F 5D |  if_ne	jmp	#LR__0914
0f1a4                 | LR__0915
0f1a4                 | ' 
0f1a4                 | ' 	return d;
0f1a4     10 5E 05 F1 | 	add	fp, #16
0f1a8     AF 30 C2 FA | 	rdbyte	result1, fp
0f1ac     10 5E 85 F1 | 	sub	fp, #16
0f1b0                 | LR__0916
0f1b0     AF F0 03 F6 | 	mov	ptra, fp
0f1b4     BF 00 A0 FD | 	call	#popregs_
0f1b8                 | _ff_cc_send_cmd_0732_ret
0f1b8     2D 00 64 FD | 	ret
0f1bc                 | 
0f1bc                 | _ff_cc_strcpy
0f1bc     3B 37 02 F6 | 	mov	_var01, arg01
0f1c0     00 78 0E F2 | 	cmp	arg02, #0 wz
0f1c4     3B 31 02 A6 |  if_e	mov	result1, arg01
0f1c8     20 00 90 AD |  if_e	jmp	#_ff_cc_strcpy_ret
0f1cc     44 0E 9F FE | 	loc	pa,	#(@LR__0918-@LR__0917)
0f1d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
0f1d4                 | '         do {
0f1d4                 | LR__0917
0f1d4     3C 39 CA FA | 	rdbyte	_var02, arg02 wz
0f1d8     1B 39 42 FC | 	wrbyte	_var02, _var01
0f1dc     01 78 06 F1 | 	add	arg02, #1
0f1e0     01 36 06 F1 | 	add	_var01, #1
0f1e4     EC FF 9F 5D |  if_ne	jmp	#LR__0917
0f1e8                 | LR__0918
0f1e8                 | ' 	return(dst);
0f1e8     3B 31 02 F6 | 	mov	result1, arg01
0f1ec                 | _ff_cc_strcpy_ret
0f1ec     2D 00 64 FD | 	ret
0f1f0                 | 
0f1f0                 | _ff_cc_memset
0f1f0     3B 37 02 F6 | 	mov	_var01, arg01
0f1f4     3C 39 02 F6 | 	mov	_var02, arg02
0f1f8     3D 3B 02 F6 | 	mov	_var03, arg03
0f1fc     1B 3D 02 F6 | 	mov	_var04, _var01
0f200     03 3E 06 F6 | 	mov	_var05, #3
0f204     1B 3F CA F7 | 	test	_var05, _var01 wz
0f208     70 00 90 5D |  if_ne	jmp	#LR__0922
0f20c     04 3A 1E F2 | 	cmp	_var03, #4 wcz
0f210     68 00 90 ED |  if_be	jmp	#LR__0922
0f214     1B 41 02 F6 | 	mov	_var06, _var01
0f218     FF 38 06 F5 | 	and	_var02, #255
0f21c     1C 3F 02 F6 | 	mov	_var05, _var02
0f220     18 3E 66 F0 | 	shl	_var05, #24
0f224     1C 43 02 F6 | 	mov	_var07, _var02
0f228     10 42 66 F0 | 	shl	_var07, #16
0f22c     21 3F 42 F5 | 	or	_var05, _var07
0f230     1C 45 02 F6 | 	mov	_var08, _var02
0f234     08 44 66 F0 | 	shl	_var08, #8
0f238     22 3F 42 F5 | 	or	_var05, _var08
0f23c     1C 3F 42 F5 | 	or	_var05, _var02
0f240     1F 47 02 F6 | 	mov	_var09, _var05
0f244     E4 0D 9F FE | 	loc	pa,	#(@LR__0920-@LR__0919)
0f248     93 00 A0 FD | 	call	#FCACHE_LOAD_
0f24c                 | '     {
0f24c                 | '       uint32_t lc;
0f24c                 | '       uint32_t *dstl = dest_p;
0f24c                 | '       c &= 0xff;
0f24c                 | '       lc = (c<<24)|(c<<16)|(c<<8)|c;
0f24c                 | '       while (n >= sizeof(uint32_t))
0f24c                 | LR__0919
0f24c     04 3A 1E F2 | 	cmp	_var03, #4 wcz
0f250     24 00 90 CD |  if_b	jmp	#LR__0921
0f254     20 3F 02 F6 | 	mov	_var05, _var06
0f258     20 43 02 F6 | 	mov	_var07, _var06
0f25c     04 42 06 F1 | 	add	_var07, #4
0f260     21 41 02 F6 | 	mov	_var06, _var07
0f264     1F 47 62 FC | 	wrlong	_var09, _var05
0f268     1D 3F 02 F6 | 	mov	_var05, _var03
0f26c     04 3E 86 F1 | 	sub	_var05, #4
0f270     1F 3B 02 F6 | 	mov	_var03, _var05
0f274     D4 FF 9F FD | 	jmp	#LR__0919
0f278                 | LR__0920
0f278                 | LR__0921
0f278     20 37 02 F6 | 	mov	_var01, _var06
0f27c                 | LR__0922
0f27c     98 0D 9F FE | 	loc	pa,	#(@LR__0924-@LR__0923)
0f280     93 00 A0 FD | 	call	#FCACHE_LOAD_
0f284                 | ' 	}
0f284                 | '       dest_p = dstl;
0f284                 | '     }
0f284                 | ' 
0f284                 | '   dst = dest_p;
0f284                 | '   while (n > 0) {
0f284                 | LR__0923
0f284     00 3A 1E F2 | 	cmp	_var03, #0 wcz
0f288     10 00 90 ED |  if_be	jmp	#LR__0925
0f28c     1B 39 42 FC | 	wrbyte	_var02, _var01
0f290     01 3A 86 F1 | 	sub	_var03, #1
0f294     01 36 06 F1 | 	add	_var01, #1
0f298     E8 FF 9F FD | 	jmp	#LR__0923
0f29c                 | LR__0924
0f29c                 | LR__0925
0f29c                 | '     *dst++ = c;
0f29c                 | '     --n;
0f29c                 | '   }
0f29c                 | ' 
0f29c                 | '   return orig_dest;
0f29c     1E 31 02 F6 | 	mov	result1, _var04
0f2a0                 | _ff_cc_memset_ret
0f2a0     2D 00 64 FD | 	ret
0f2a4                 | 
0f2a4                 | ' 	
0f2a4                 | ' 	FUNCTION pfunc(c as integer) as integer
0f2a4                 | ___strs_cl_pfunc
0f2a4                 | ' 		if (i < 16) then
0f2a4     04 0E 06 F1 | 	add	objptr, #4
0f2a8     07 37 02 FB | 	rdlong	_var01, objptr
0f2ac     04 0E 86 F1 | 	sub	objptr, #4
0f2b0     10 36 5E F2 | 	cmps	_var01, #16 wcz
0f2b4     2C 00 90 3D |  if_ae	jmp	#LR__0926
0f2b8     07 39 02 FB | 	rdlong	_var02, objptr
0f2bc     04 0E 06 F1 | 	add	objptr, #4
0f2c0     07 3B 02 FB | 	rdlong	_var03, objptr
0f2c4     1C 3B 02 F1 | 	add	_var03, _var02
0f2c8     1D 77 42 FC | 	wrbyte	arg01, _var03
0f2cc     07 37 02 FB | 	rdlong	_var01, objptr
0f2d0     01 36 06 F1 | 	add	_var01, #1
0f2d4     07 37 62 FC | 	wrlong	_var01, objptr
0f2d8     04 0E 86 F1 | 	sub	objptr, #4
0f2dc                 | ' 			p(i) = c
0f2dc                 | ' 			i = i+1
0f2dc                 | ' 			return 1
0f2dc     01 30 06 F6 | 	mov	result1, #1
0f2e0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
0f2e4                 | LR__0926
0f2e4                 | ' 			return -1
0f2e4     01 30 66 F6 | 	neg	result1, #1
0f2e8                 | ___strs_cl_pfunc_ret
0f2e8     2D 00 64 FD | 	ret
0f2ec                 | 
0f2ec                 | __struct__s_vfs_file_t_putchar
0f2ec     04 5A 05 F6 | 	mov	COUNT_, #4
0f2f0     B0 00 A0 FD | 	call	#pushregs_
0f2f4     18 0E 06 F1 | 	add	objptr, #24
0f2f8     07 85 0A FB | 	rdlong	local01, objptr wz
0f2fc     18 0E 86 F1 | 	sub	objptr, #24
0f300     00 30 06 A6 |  if_e	mov	result1, #0
0f304     3C 00 90 AD |  if_e	jmp	#LR__0927
0f308     18 0E 06 F1 | 	add	objptr, #24
0f30c     07 85 02 FB | 	rdlong	local01, objptr
0f310     18 0E 86 F1 | 	sub	objptr, #24
0f314     42 87 02 FB | 	rdlong	local02, local01
0f318     04 84 06 F1 | 	add	local01, #4
0f31c     42 89 02 FB | 	rdlong	local03, local01
0f320     07 79 02 F6 | 	mov	arg02, objptr
0f324     07 8B 02 F6 | 	mov	local04, objptr
0f328     43 0F 02 F6 | 	mov	objptr, local02
0f32c     2D 88 62 FD | 	call	local03
0f330     45 0F 02 F6 | 	mov	objptr, local04
0f334     00 30 5E F2 | 	cmps	result1, #0 wcz
0f338     00 84 06 C6 |  if_b	mov	local01, #0
0f33c     01 84 06 36 |  if_ae	mov	local01, #1
0f340     42 31 02 F6 | 	mov	result1, local01
0f344                 | LR__0927
0f344     AF F0 03 F6 | 	mov	ptra, fp
0f348     BF 00 A0 FD | 	call	#popregs_
0f34c                 | __struct__s_vfs_file_t_putchar_ret
0f34c     2D 00 64 FD | 	ret
0f350                 | 
0f350                 | __struct__s_vfs_file_t_getchar
0f350     04 5A 05 F6 | 	mov	COUNT_, #4
0f354     B0 00 A0 FD | 	call	#pushregs_
0f358     1C 0E 06 F1 | 	add	objptr, #28
0f35c     07 85 0A FB | 	rdlong	local01, objptr wz
0f360     1C 0E 86 F1 | 	sub	objptr, #28
0f364     01 30 66 A6 |  if_e	neg	result1, #1
0f368     2C 00 90 AD |  if_e	jmp	#LR__0928
0f36c                 | '         return getcf(__this);
0f36c     1C 0E 06 F1 | 	add	objptr, #28
0f370     07 85 02 FB | 	rdlong	local01, objptr
0f374     1C 0E 86 F1 | 	sub	objptr, #28
0f378     42 87 02 FB | 	rdlong	local02, local01
0f37c     04 84 06 F1 | 	add	local01, #4
0f380     42 89 02 FB | 	rdlong	local03, local01
0f384     07 77 02 F6 | 	mov	arg01, objptr
0f388     07 8B 02 F6 | 	mov	local04, objptr
0f38c     43 0F 02 F6 | 	mov	objptr, local02
0f390     2D 88 62 FD | 	call	local03
0f394     45 0F 02 F6 | 	mov	objptr, local04
0f398                 | LR__0928
0f398     AF F0 03 F6 | 	mov	ptra, fp
0f39c     BF 00 A0 FD | 	call	#popregs_
0f3a0                 | __struct__s_vfs_file_t_getchar_ret
0f3a0     2D 00 64 FD | 	ret
0f3a4                 | 
0f3a4                 | __struct___bas_wrap_sender_tx
0f3a4     04 5A 05 F6 | 	mov	COUNT_, #4
0f3a8     B0 00 A0 FD | 	call	#pushregs_
0f3ac     07 85 02 FB | 	rdlong	local01, objptr
0f3b0     42 87 02 FB | 	rdlong	local02, local01
0f3b4     04 84 06 F1 | 	add	local01, #4
0f3b8     42 89 02 FB | 	rdlong	local03, local01
0f3bc     07 8B 02 F6 | 	mov	local04, objptr
0f3c0     43 0F 02 F6 | 	mov	objptr, local02
0f3c4     2D 88 62 FD | 	call	local03
0f3c8     45 0F 02 F6 | 	mov	objptr, local04
0f3cc     01 30 06 F6 | 	mov	result1, #1
0f3d0     AF F0 03 F6 | 	mov	ptra, fp
0f3d4     BF 00 A0 FD | 	call	#popregs_
0f3d8                 | __struct___bas_wrap_sender_tx_ret
0f3d8     2D 00 64 FD | 	ret
0f3dc                 | 
0f3dc                 | LR__0929
0f3dc     2F          | 	byte	"/"
0f3dd     00          | 	byte	0
0f3de                 | LR__0930
0f3de     20          | 	byte	" "
0f3df     00          | 	byte	0
0f3e0                 | LR__0931
0f3e0                 | 	byte	
0f3e0     00          | 	byte	0
0f3e1                 | LR__0932
0f3e1                 | 	byte	
0f3e1     00          | 	byte	0
0f3e2                 | LR__0933
0f3e2     20 21 21 21 
0f3e6     20 63 6F 72 
0f3ea     72 75 70 74 
0f3ee     65 64 20 68 
0f3f2     65 61 70 3F 
0f3f6     3F 3F 20 21 
0f3fa     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0f3fd     00          | 	byte	0
0f3fe                 | LR__0934
0f3fe     20 21 21 21 
0f402     20 6F 75 74 
0f406     20 6F 66 20 
0f40a     68 65 61 70 
0f40e     20 6D 65 6D 
0f412     6F 72 79 20 
0f416     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0f41a     00          | 	byte	0
0f41b                 | LR__0935
0f41b     20 21 21 21 
0f41f     20 63 6F 72 
0f423     72 75 70 74 
0f427     65 64 20 68 
0f42b     65 61 70 20 
0f42f     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0f433     00          | 	byte	0
0f434                 | LR__0936
0f434     00          | 	byte	0
0f435     00          | 	byte	0
0f436                 | LR__0937
0f436     2F          | 	byte	"/"
0f437     00          | 	byte	0
0f438                 | LR__0938
0f438     22 2A 2B 2C 
0f43c     3A 3B 3C 3D 
0f440     3E 3F 5B 5D 
0f444     7C 7F       | 	byte	34,"*+,:;<=>?[]|",127
0f446     00          | 	byte	0
0f447                 | LR__0939
0f447     EB 76 90 45 
0f44b     58 46 41 54 
0f44f     20 20 20    | 	byte	-21,"v",-112,"EXFAT   "
0f452     00          | 	byte	0
0f453                 | LR__0940
0f453     46 41 54    | 	byte	"FAT"
0f456     00          | 	byte	0
0f457                 | LR__0941
0f457     46 41 54 33 
0f45b     32          | 	byte	"FAT32"
0f45c     00          | 	byte	0
0f45d                 | LR__0942
0f45d     4E 61 6D 65 
0f461     20 20 20 20 
0f465     20 20 20 20 
0f469     20 20 20 20 
0f46d     20 20 20 20 
0f471     20 20 20 6C 
0f475     65 6E 20 20 
0f479     20 66 74 20 
0f47d     76 6F 6C 20 
0f481     72 65 70 20 
0f485     20 20 72 2E 
0f489     6C 65 6E 20 
0f48d     20 20 20 20 
0f491     20 20 20 20 
0f495     4E 61 6D 65 
0f499     20 20 20 20 
0f49d     20 20 20 20 
0f4a1     20 20 20 20 
0f4a5     20 20 20 20 
0f4a9     20 20 20 6C 
0f4ad     65 6E 20 20 
0f4b1     20 66 74 20 
0f4b5     76 6F 6C 20 
0f4b9     72 65 70 20 
0f4bd     20 20 72 2E 
0f4c1     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0f4c5     00          | 	byte	0
0f4c6                 | LR__0943
0f4c6     53          | 	byte	"S"
0f4c7     00          | 	byte	0
0f4c8                 | LR__0944
0f4c8     2F 73 64    | 	byte	"/sd"
0f4cb     00          | 	byte	0
0f4cc                 | LR__0945
0f4cc     2F 73 64    | 	byte	"/sd"
0f4cf     00          | 	byte	0
0f4d0                 | LR__0946
0f4d0     4D 4F 44    | 	byte	"MOD"
0f4d3     00          | 	byte	0
0f4d4                 | LR__0947
0f4d4     20 20 20 20 
0f4d8     20 20 20 20 
0f4dc     20 20 20 20 
0f4e0     20 20 20 20 
0f4e4     20 20 20 20 
0f4e8     20 20       | 	byte	"                      "
0f4ea     00          | 	byte	0
0f4eb                 | LR__0948
0f4eb     20          | 	byte	" "
0f4ec     00          | 	byte	0
0f4ed                 | LR__0949
0f4ed     73 61 6D 70 
0f4f1     6C 65 73 20 
0f4f5     6D 6F 64 75 
0f4f9     6C 65       | 	byte	"samples module"
0f4fb     00          | 	byte	0
0f4fc                 | LR__0950
0f4fc     2F          | 	byte	"/"
0f4fd     00          | 	byte	0
0f4fe     00 00       | 	alignl
0f500                 | _dat_
0f500     23 23 20 62 
0f504     61 6C 6C 61 
0f508     64 61 20 23 
0f50c     23 00 00 00 |     return (char *) &tempname1;
0f510     00 00 00 00 
0f514     78 74 64 20 
0f518     2F 20 75 6E 
0f51c     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
0f520     28 63 69 61 
0f524     29 00 00 00 
0f528     00 00 0A ED 
0f52c     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
0f530     00 87 2A 2A 
0f534     20 31 38 2E 
0f538     30 31 2E 31 
0f53c     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
0f540     2A 2A 00 00 
0f544     00 00 00 00 
0f548     09 FE 00 40 
0f54c     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
0f550     00 00 00 00 
0f554     00 00 00 00 
0f558     00 00 00 00 
0f55c     00 00 00 00 
0f560     00 00 00 00 
0f564     00 00       | 	byte	$00[22]
0f566     05 07 00 40 
0f56a     00 00 00 01 
0f56e     00 00 00 00 
0f572     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0f576     00 00 00 00 
0f57a     00 00 00 00 
0f57e     00 00 00 00 
0f582     00 00       | 	byte	$00[14]
0f584     03 2A 00 40 
0f588     02 C5 00 65 
0f58c     00 00 00 00 
0f590     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
0f594     00 00 00 00 
0f598     00 00 00 00 
0f59c     00 00 00 00 
0f5a0     00 00       | 	byte	$00[14]
0f5a2     0A 01 00 30 
0f5a6     03 55 06 AC 
0f5aa     00 00 00 00 
0f5ae     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
0f5b2     00 00 00 00 
0f5b6     00 00 00 00 
0f5ba     00 00 00 00 
0f5be     00 00       | 	byte	$00[14]
0f5c0     09 AA 00 30 
0f5c4     03 F4 05 B6 
0f5c8     00 00 00 00 
0f5cc     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
0f5d0     00 00 00 00 
0f5d4     00 00 00 00 
0f5d8     00 00 00 00 
0f5dc     00 00       | 	byte	$00[14]
0f5de     01 E6 00 40 
0f5e2     01 97 00 4F 
0f5e6     00 00 00 00 
0f5ea     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
0f5ee     00 00 00 00 
0f5f2     00 00 00 00 
0f5f6     00 00 00 00 
0f5fa     00 00 00 00 
0f5fe     00 00 00 00 
0f602     00          | 	byte	$00[21]
0f603     01 00 00 00 
0f607     00 00 00 00 
0f60b     00 00 00 00 
0f60f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f613     00 00 00 00 
0f617     00 00 00    | 	byte	$00[7]
0f61a     08 FB 00 40 
0f61e     01 EA 07 11 
0f622     00 00 00 00 
0f626     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
0f62a     00 00 00 00 
0f62e     00 00 00 00 
0f632     00 00 00 00 
0f636     00 00       | 	byte	$00[14]
0f638     04 5E 00 40 
0f63c     00 00 00 01 
0f640     00 00 00 00 
0f644     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0f648     00 00 00 00 
0f64c     00 00 00 00 
0f650     00 00 00 00 
0f654     00 00       | 	byte	$00[14]
0f656     08 EC 00 40 
0f65a     03 5C 05 90 
0f65e     00 00 00 00 
0f662     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
0f666     00 00 00 00 
0f66a     00 00 00 00 
0f66e     00 00 00 00 
0f672     00 00 00 00 
0f676     00 00 00 00 
0f67a     00          | 	byte	$00[21]
0f67b     01 00 00 00 
0f67f     00 00 00 00 
0f683     00 00 00 00 
0f687     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f68b     00 00 00 00 
0f68f     00 00 00    | 	byte	$00[7]
0f692     07 0E 00 30 
0f696     00 00 00 01 
0f69a     00 00 00 00 
0f69e     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0f6a2     00 00 00 00 
0f6a6     00 00 00 00 
0f6aa     00 00 00 00 
0f6ae     00 00 00 00 
0f6b2     00 00 00 00 
0f6b6     00          | 	byte	$00[21]
0f6b7     01 00 00 00 
0f6bb     00 00 00 00 
0f6bf     00 00 00 00 
0f6c3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f6c7     00 00 00 00 
0f6cb     00 00 00 00 
0f6cf     00 00 00 00 
0f6d3     00 00       | 	byte	$00[14]
0f6d5     01 00 00 00 
0f6d9     00 00 00 00 
0f6dd     00 00 00 00 
0f6e1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f6e5     00 00 00 00 
0f6e9     00 00 00 00 
0f6ed     00 00 00 00 
0f6f1     00 00       | 	byte	$00[14]
0f6f3     01 00 00 00 
0f6f7     00 00 00 00 
0f6fb     00 00 00 00 
0f6ff     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f703     00 00 00 00 
0f707     00 00 00 00 
0f70b     00 00 00 00 
0f70f     00 00       | 	byte	$00[14]
0f711     01 00 00 00 
0f715     00 00 00 00 
0f719     00 00 00 00 
0f71d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f721     00 00 00 00 
0f725     00 00 00 00 
0f729     00 00 00 00 
0f72d     00 00       | 	byte	$00[14]
0f72f     01 00 00 00 
0f733     00 00 00 00 
0f737     00 00 00 00 
0f73b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f73f     00 00 00 00 
0f743     00 00 00 00 
0f747     00 00 00 00 
0f74b     00 00       | 	byte	$00[14]
0f74d     01 00 00 00 
0f751     00 00 00 00 
0f755     00 00 00 00 
0f759     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f75d     00 00 00 00 
0f761     00 00 00 00 
0f765     00 00 00 00 
0f769     00 00       | 	byte	$00[14]
0f76b     01 00 00 00 
0f76f     00 00 00 00 
0f773     00 00 00 00 
0f777     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f77b     00 00 00 00 
0f77f     00 00 00 00 
0f783     00 00 00 00 
0f787     00 00       | 	byte	$00[14]
0f789     01 00 00 00 
0f78d     00 00 00 00 
0f791     00 00 00 00 
0f795     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f799     00 00 00 00 
0f79d     00 00 00 00 
0f7a1     00 00 00 00 
0f7a5     00 00       | 	byte	$00[14]
0f7a7     01 00 00 00 
0f7ab     00 00 00 00 
0f7af     00 00 00 00 
0f7b3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7b7     00 00 00 00 
0f7bb     00 00 00 00 
0f7bf     00 00 00 00 
0f7c3     00 00       | 	byte	$00[14]
0f7c5     01 00 00 00 
0f7c9     00 00 00 00 
0f7cd     00 00 00 00 
0f7d1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7d5     00 00 00 00 
0f7d9     00 00 00 00 
0f7dd     00 00 00 00 
0f7e1     00 00       | 	byte	$00[14]
0f7e3     01 00 00 00 
0f7e7     00 00 00 00 
0f7eb     00 00 00 00 
0f7ef     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7f3     00 00 00 00 
0f7f7     00 00 00 00 
0f7fb     00 00 00 00 
0f7ff     00 00       | 	byte	$00[14]
0f801     01 00 00 00 
0f805     00 00 00 00 
0f809     00 00 00 00 
0f80d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f811     00 00 00 00 
0f815     00 00 00 00 
0f819     00 00 00 00 
0f81d     00 00       | 	byte	$00[14]
0f81f     01 00 00 00 
0f823     00 00 00 00 
0f827     00 00 00 00 
0f82b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f82f     00 00 00 00 
0f833     00 00 00 00 
0f837     00 00 00 00 
0f83b     00 00       | 	byte	$00[14]
0f83d     01 00 00 00 
0f841     00 00 00 00 
0f845     00 00 00 00 
0f849     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f84d     00 00 00 00 
0f851     00 00 00 00 
0f855     00 00 00 00 
0f859     00 00       | 	byte	$00[14]
0f85b     01 00 00 00 
0f85f     00 00 00 00 
0f863     00 00 00 00 
0f867     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f86b     00 00 00 00 
0f86f     00 00 00 00 
0f873     00 00 00 00 
0f877     00 00       | 	byte	$00[14]
0f879     01 00 00 00 
0f87d     00 00 00 00 
0f881     00 00 00 00 
0f885     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f889     00 00 00 00 
0f88d     00 00 00 00 
0f891     00 00 00 00 
0f895     00 00       | 	byte	$00[14]
0f897     01 00 00 00 
0f89b     00 00 00 00 
0f89f     00 00 00 00 
0f8a3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f8a7     00 00 00 00 
0f8ab     00 00 00 00 
0f8af     00 00 00 00 
0f8b3     00 00       | 	byte	$00[14]
0f8b5     01 19 7F 00 
0f8b9     01 02 04 03 
0f8bd     05 06 07 03 
0f8c1     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
0f8c5     0C 0D 0E 0F 
0f8c9     0C 0D 10 11 
0f8cd     12 14 12 13 
0f8d1     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
0f8d5     00 00 00 00 
      ...             
0f931     00 00 00 00 
0f935     00 00 00    | 	byte	$00[99]
0f938     4D 2E 4B 2E 
0f93c     01 7D 1C 10 
0f940     00 00 0F 05 
0f944     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
0f948     00 00 0C 00 
0f94c     00 00 00 00 
0f950     00 00 0C 00 
0f954     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
0f958     00 00 00 00 
      ...             
0f980     00 00 00 00 
0f984     00 00 00 00 | 	byte	$00[48]
0f988     01 7D 1C 10 
0f98c     01 53 1C 18 
0f990     00 00 00 00 
0f994     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
0f998     00 00 00 00 
0f99c     00 00       | 	byte	$00[6]
0f99e     0C 10 00 00 
0f9a2     00 00 00 00 
0f9a6     00 00 01 40 
0f9aa     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
0f9ae     00 00 00 00 
0f9b2     00 00 00 00 
0f9b6     00 00 00 00 
0f9ba     00 00 00    | 	byte	$00[15]
0f9bd     FE 1C 30 00 
0f9c1     00 00 00 00 
0f9c5     00 00 00 00 
0f9c9     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
0f9cd     00 00 00 00 
0f9d1     00 00 00 00 
0f9d5     00 00 00 00 
0f9d9     00 00 00 00 
0f9dd     00          | 	byte	$00[17]
0f9de     0C 20 00 00 
0f9e2     00 00 00 00 
0f9e6     00 00 01 1D 
0f9ea     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
0f9ee     00 00 00 00 
0f9f2     00 00 00 00 
0f9f6     00 00 00 00 
0f9fa     00 00 00    | 	byte	$00[15]
0f9fd     BE 10 00 00 
0fa01     00 00 00 00 
0fa05     00 00 00 01 
0fa09     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
0fa0d     00 00 00 00 
0fa11     00 00 00 00 
0fa15     00 00 00 00 
0fa19     00 00 00 00 | 	byte	$00[16]
0fa1d     BE 1A 06 00 
0fa21     00 00 00 00 
0fa25     00 00 00 00 
0fa29     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa2d     A0 0E 93 00 
0fa31     00 00 00 00 
0fa35     00 00 00 00 
0fa39     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa3d     7F 10 00 00 
0fa41     00 00 00 00 
0fa45     00 00 00 00 
0fa49     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa4d     00 00 00 00 
0fa51     00 00 00 00 
0fa55     00 00 00 00 | 	byte	$00[12]
0fa59     BE 1C 20 00 
0fa5d     8F 10 00 00 
0fa61     00 00 00 00 
0fa65     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fa69     AC 1C 30 00 
0fa6d     00 00 00 00 
0fa71     00 00 00 00 
0fa75     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa79     00 00 00 00 
0fa7d     A0 0E 93 00 
0fa81     00 00 00 00 
0fa85     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa89     00 00 00 00 
0fa8d     A0 10 00 00 
0fa91     00 00 00 00 
0fa95     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa99     00 00 00 00 
0fa9d     AA 10 00 00 
0faa1     00 00 00 00 
0faa5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0faa9     00 00 00 00 
0faad     00          | 	byte	$00[5]
0faae     0A 06 00 00 
0fab2     00 00 00 00 
0fab6     00 00 00 00 
0faba     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fabe     10 00 00 00 
0fac2     00 00 00 00 
0fac6     00 00 01 7D 
0faca     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0face     00 00 00 00 
0fad2     00 00 00 00 
0fad6     00 00 00 00 
0fada     00 00 00    | 	byte	$00[15]
0fadd     FE 10 00 00 
0fae1     00 00 00 00 
0fae5     00 00 00 00 
0fae9     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0faed     00 00 00 00 
0faf1     00 00 00 00 
0faf5     00 00 00 00 
0faf9     00 00 00 00 
0fafd     00 00 00 00 
0fb01     00 00 00 00 
0fb05     00 00 00 00 | 	byte	$00[28]
0fb09     BE 10 00 00 
0fb0d     FE 1C 20 00 
0fb11     00 00 00 00 
0fb15     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb19     00 00 00 00 
0fb1d     AA 10 00 00 
0fb21     00 00 00 00 
0fb25     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fb29     AC 10 00 00 
0fb2d     00 00 00 00 
0fb31     00 00 00 00 
0fb35     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb39     00 00 00 00 
0fb3d     D6 10 00 00 
0fb41     00 00 00 00 
0fb45     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb49     00 00 00 00 
      ...             
0fb61     00 00 00 00 
0fb65     00 00 00 00 | 	byte	$00[32]
0fb69     AA 10 00 00 
0fb6d     00 00 00 00 
0fb71     00 00 00 00 
0fb75     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb79     00 00 00 00 
0fb7d     A0 10 00 00 
0fb81     00 00 00 00 
0fb85     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fb89     E0 1C 30 00 
0fb8d     00 00 00 00 
0fb91     00 00 00 00 
0fb95     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb99     00 00 00 00 
0fb9d     AA 10 00 00 
0fba1     00 00 00 00 
0fba5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fba9     00 00 00 00 
0fbad     00 00 00 00 
0fbb1     00 00 00 00 
0fbb5     00 00 00 00 | 	byte	$00[16]
0fbb9     BE 10 00 00 
0fbbd     AA 10 00 00 
0fbc1     00 00 00 00 
0fbc5     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fbc9     AC 10 00 00 
0fbcd     00 00 00 00 
0fbd1     00 00 00 00 
0fbd5     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fbd9     00 00 00 00 
0fbdd     BE 14 C1 00 
0fbe1     00 00 00 00 
0fbe5     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fbe9     7D 10 00 00 
0fbed     00 06 02 00 
0fbf1     00 00 00 00 
0fbf5     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fbf9     00 0A 02 00 
0fbfd     00 06 02 00 
0fc01     00 00 00 00 
0fc05     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc09     00 0A 02 00 
0fc0d     00 06 02 00 
0fc11     00 00 00 00 
0fc15     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc19     00 0A 02 00 
0fc1d     A0 10 00 00 
0fc21     00 00 00 00 
0fc25     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc29     00 0A 02 00 
0fc2d     8F 1D 01 00 
0fc31     00 00 00 00 
0fc35     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc39     00 0A 02 00 
0fc3d     00 00 00 00 
0fc41     00 00 00 00 
0fc45     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc49     00 00 00 00 
      ...             
0fd39     00 00 00 00 
0fd3d     00          | 	byte	$00[245]
0fd3e     0B 01 00 00 
0fd42     00 00 00 00 
0fd46     00 00 00 00 
0fd4a     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0fd4e     1F 05 00 BE 
0fd52     2A 02 00 00 
0fd56     00 00 01 7D 
0fd5a     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0fd5e     00 00 00 00 
0fd62     0A 02 00 00 
0fd66     00 00 00 00 
0fd6a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fd6e     10 00 00 00 
0fd72     0A 02 00 00 
0fd76     00 00 00 00 
0fd7a     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0fd7e     1C 20 00 00 
0fd82     0A 02 00 00 
0fd86     00 00 00 00 
0fd8a     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fd8e     10 00 00 BE 
0fd92     0A 02 00 00 
0fd96     00 00 00 00 
0fd9a     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0fd9e     00 00 00 00 
0fda2     0A 02 00 00 
0fda6     00 00 00 00 
0fdaa     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
0fdae     40 00 00 F0 
0fdb2     2A 02 00 00 
0fdb6     00 00 01 E0 
0fdba     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
0fdbe     00 00 00 00 
0fdc2     0A 02 00 00 
0fdc6     00 00 00 00 
0fdca     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0fdce     4A 06 00 00 
0fdd2     0A 02 00 00 
0fdd6     00 00 00 00 
0fdda     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
0fdde     0E 93 00 00 
0fde2     0A 02 00 00 
0fde6     00 00 00 00 
0fdea     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
0fdee     40 00 00 00 
0fdf2     0A 02 00 00 
0fdf6     00 00 00 00 
0fdfa     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0fdfe     00 00 00 00 
0fe02     0A 02 00 00 
0fe06     00 00 00 F0 
0fe0a     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
0fe0e     10 00 00 BE 
0fe12     2A 02 00 00 
0fe16     00 00 01 7D 
0fe1a     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0fe1e     00 00 00 00 
0fe22     0A 02 00 00 
0fe26     00 00 00 00 
0fe2a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fe2e     10 00 00 00 
0fe32     0A 02 00 00 
0fe36     00 00 00 00 
0fe3a     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0fe3e     1C 20 00 00 
0fe42     0A 02 00 00 
0fe46     00 00 00 00 
0fe4a     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fe4e     10 00 00 BE 
0fe52     00 00 00 00 
0fe56     00 00 01 7D 
0fe5a     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
0fe5e     1C 30 00 BE 
0fe62     0E 93 00 00 
0fe66     00 00 00 00 
0fe6a     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fe6e     10 00 00 D6 
0fe72     2A 02 00 00 
0fe76     00 00 01 AC 
0fe7a     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
0fe7e     1C 30 00 00 
0fe82     0A 02 00 00 
0fe86     00 00 00 00 
0fe8a     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0fe8e     10 00 00 00 
0fe92     0A 02 00 00 
0fe96     00 00 00 00 
0fe9a     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fe9e     10 00 00 D6 
0fea2     2C 20 00 00 
0fea6     00 00 00 00 
0feaa     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0feae     10 00 00 D6 
0feb2     2A 04 00 00 
0feb6     00 00 00 00 
0feba     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0febe     00 00 00 00 
0fec2     0A 04 00 00 
0fec6     00 00 00 00 
0feca     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
0fece     10 00 00 F0 
0fed2     2A 02 00 00 
0fed6     00 00 01 E0 
0feda     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
0fede     0C 20 00 00 
0fee2     0A 02 00 00 
0fee6     00 00 00 00 
0feea     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0feee     0E 93 00 00 
0fef2     0A 02 00 00 
0fef6     00 00 00 00 
0fefa     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fefe     1C 20 00 00 
0ff02     0A 02 00 00 
0ff06     00 00 00 F0 
0ff0a     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
0ff0e     10 00 00 F0 
0ff12     2A 02 00 00 
0ff16     00 00 00 00 
0ff1a     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ff1e     00 00 00 00 
0ff22     0A 02 00 00 
0ff26     00 00 00 00 
0ff2a     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff2e     10 00 00 D6 
0ff32     2A 01 00 00 
0ff36     00 00 01 AC 
0ff3a     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
0ff3e     0C 20 00 00 
0ff42     0A 01 00 00 
0ff46     00 00 00 00 
0ff4a     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff4e     0E 93 00 00 
0ff52     0A 01 00 00 
0ff56     00 00 00 00 
0ff5a     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0ff5e     10 00 00 00 
0ff62     0A 01 00 00 
0ff66     00 00 00 00 
0ff6a     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff6e     10 00 00 00 
0ff72     0A 01 00 00 
0ff76     00 00 01 AC 
0ff7a     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0ff7e     1C 20 00 00 
0ff82     0A 01 00 00 
0ff86     00 00 00 00 
0ff8a     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff8e     10 00 00 BE 
0ff92     2A 01 00 00 
0ff96     00 00 01 7D 
0ff9a     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0ff9e     00 00 00 00 
0ffa2     0A 01 00 00 
0ffa6     00 00 00 00 
0ffaa     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0ffae     10 00 01 7D 
0ffb2     2A 01 00 00 
0ffb6     00 00 00 00 
0ffba     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ffbe     00 00 00 D6 
0ffc2     2C 38 00 00 
0ffc6     00 00 01 AC 
0ffca     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0ffce     10 00 00 00 
0ffd2     0A 06 00 00 
0ffd6     00 00 00 00 
0ffda     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ffde     00 00 00 D6 
0ffe2     0E 93 00 00 
0ffe6     00 00 00 00 
0ffea     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0ffee     10 00 00 BE 
0fff2     2C 30 00 00 
0fff6     00 00 01 7D 
0fffa     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0fffe     00 00 00 00 
10002     0A 02 00 00 
10006     00 00 00 00 
1000a     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1000e     00 00 00 00 
10012     0A 02 00 00 
10016     00 00 00 00 
1001a     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1001e     00 00 00 00 
10022     0A 02 00 00 
10026     00 00 00 00 
1002a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
1002e     10 00 00 00 
10032     0A 02 00 00 
10036     00 00 00 00 
1003a     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
1003e     1D 00 00 00 
10042     0A 02 00 00 
10046     00 00 00 00 
1004a     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1004e     00 00 00 00 
      ...             
10136     00 00 00 00 
1013a     00 00 00    | 	byte	$00[239]
1013d     7F 1F 05 00 
10141     BE 2A 02 00 
10145     00 00 00 01 
10149     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
1014d     00 00 00 00 
10151     00          | 	byte	$00[5]
10152     0A 02 00 00 
10156     00 00 00 00 
1015a     00 00 00 A0 
1015e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10162     0A 02 00 00 
10166     00 00 00 00 
1016a     00 00 00 7F 
1016e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
10172     0A 02 00 00 
10176     00 00 00 00 
1017a     00 00 00 BE 
1017e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10182     0A 02 00 00 
10186     00 00 00 00 
1018a     0A 02 00 00 
1018e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
10192     0A 02 00 00 
10196     00 00 00 00 
1019a     0A 02 00 F0 
1019e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
101a2     2A 02 00 00 
101a6     00 00 01 E0 
101aa     10 00 00 00 
101ae     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
101b2     0A 02 00 00 
101b6     00 00 00 00 
101ba     00 00 00 D6 
101be     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
101c2     0A 02 00 00 
101c6     00 00 00 00 
101ca     00 00 00 F0 
101ce     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
101d2     0A 02 00 00 
101d6     00 00 00 00 
101da     00 00 00 F0 
101de     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
101e2     0A 02 00 00 
101e6     00 00 00 00 
101ea     0A 02 00 00 
101ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
101f2     0A 02 00 00 
101f6     00 00 00 F0 
101fa     1A 02 00 7F 
101fe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
10202     2A 02 00 00 
10206     00 00 01 7D 
1020a     10 00 00 00 
1020e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10212     0A 02 00 00 
10216     00 00 00 00 
1021a     00 00 00 A0 
1021e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10222     0A 02 00 00 
10226     00 00 00 00 
1022a     00 00 00 7F 
1022e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
10232     0A 02 00 00 
10236     00 00 00 00 
1023a     00 00 00 BE 
1023e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10242     00 00 00 00 
10246     00 00       | 	byte	$00[6]
10248     01 7D 10 00 
1024c     00 AA 1C 30 
10250     00 BE 0E 93 
10254     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
10258     00 00 00 00 
1025c     00          | 	byte	$00[5]
1025d     A0 10 00 00 
10261     D6 2A 02 00 
10265     00 00 00 01 
10269     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
1026d     A0 1C 30 00 
10271     00 0A 02 00 
10275     00 00 00 00 
10279     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1027d     AA 10 00 00 
10281     00 0A 02 00 
10285     00 00 00 00 
10289     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1028d     BE 10 00 00 
10291     D6 2C 20 00 
10295     00 00 00 00 
10299     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
1029d     AA 10 00 00 
102a1     D6 2A 04 00 
102a5     00 00 00 00 
102a9     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
102ad     00 00 00 00 
102b1     00          | 	byte	$00[5]
102b2     0A 04 00 00 
102b6     00 00 00 00 
102ba     0A 02 00 A0 
102be     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
102c2     2A 02 00 00 
102c6     00 00 01 E0 
102ca     10 00 00 00 
102ce     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
102d2     0A 02 00 00 
102d6     00 00 00 00 
102da     00 00 00 A0 
102de     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
102e2     0A 02 00 00 
102e6     00 00 00 00 
102ea     00 00 00 A0 
102ee     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
102f2     0A 02 00 00 
102f6     00 00 00 F0 
102fa     10 00 00 A0 
102fe     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
10302     2A 02 00 00 
10306     00 00 00 00 
1030a     00 00 00 00 
1030e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10312     0A 02 00 00 
10316     00 00 00 00 
1031a     00 00 00 8F 
1031e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
10322     2A 01 00 00 
10326     00 00 01 AC 
1032a     10 00 00 00 
1032e     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
10332     0A 01 00 00 
10336     00 00 00 00 
1033a     00 00 00 8F 
1033e     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
10342     0A 01 00 00 
10346     00 00 00 00 
1034a     00 00 00 A0 
1034e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10352     0A 01 00 00 
10356     00 00 00 00 
1035a     00 00 00 8F 
1035e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10362     0A 01 00 00 
10366     00 00 01 AC 
1036a     10 00 00 00 
1036e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
10372     0A 01 00 00 
10376     00 00 00 00 
1037a     00 00 00 BE 
1037e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10382     2A 01 00 00 
10386     00 00 01 7D 
1038a     10 00 00 00 
1038e     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10392     0A 01 00 00 
10396     00 00 00 00 
1039a     00 00 00 A0 
1039e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
103a2     2A 01 00 00 
103a6     00 00 00 00 
103aa     00 00 00 00 
103ae     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
103b2     2C 38 00 00 
103b6     00 00 01 AC 
103ba     10 00 00 AA 
103be     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
103c2     0A 06 00 00 
103c6     00 00 00 00 
103ca     00 00 00 00 
103ce     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
103d2     0E 93 00 00 
103d6     00 00 00 00 
103da     00 00 00 BE 
103de     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
103e2     2C 30 01 7D 
103e6     2A 02 01 7D 
103ea     10 00 00 00 
103ee     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
103f2     0A 02 00 00 
103f6     0A 02 00 00 
103fa     00 00 00 00 
103fe     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10402     0A 02 00 00 
10406     0A 02 00 00 
1040a     00 00 00 BE 
1040e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
10412     0A 02 00 00 
10416     0A 02 00 00 
1041a     00 00 00 A0 
1041e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
10422     0A 02 00 00 
10426     0A 02 00 00 
1042a     00 00 00 8F 
1042e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10432     0A 02 00 00 
10436     0A 02 00 00 
1043a     0D 00 00 00 
1043e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
10442     00 00 00 00 
      ...             
10536     00 00 00 00 
1053a     00 00 00    | 	byte	$00[251]
1053d     7F 1F 05 00 
10541     BE 2A 02 00 
10545     CA 50 00 01 
10549     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
1054d     7F 1C 30 00 
10551     00 0A 02 00 
10555     00 00 00 00 
10559     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1055d     A0 10 00 00 
10561     00 0A 02 00 
10565     00 00 00 00 
10569     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1056d     7F 1C 30 00 
10571     00 0A 02 00 
10575     00 00 00 00 
10579     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1057d     BE 10 00 00 
10581     BE 0A 02 00 
10585     00 00 00 00 
10589     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
1058d     A0 1C 30 00 
10591     00 0A 02 00 
10595     00 00 00 00 
10599     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
1059d     F0 40 00 00 
105a1     F0 2A 02 00 
105a5     FE 60 00 01 
105a9     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
105ad     00 00 00 00 
105b1     00          | 	byte	$00[5]
105b2     0A 02 00 00 
105b6     00 00 00 00 
105ba     00 00 00 D6 
105be     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
105c2     0A 02 00 00 
105c6     00 00 00 00 
105ca     00 00 00 D6 
105ce     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
105d2     0A 02 00 00 
105d6     00 00 00 00 
105da     00 00 00 F0 
105de     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
105e2     0A 02 00 00 
105e6     00 00 00 00 
105ea     0A 02 00 00 
105ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
105f2     0A 02 00 00 
105f6     00 00 00 F0 
105fa     1A 02 00 7F 
105fe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
10602     2A 02 00 CA 
10606     50 00 01 7D 
1060a     10 00 00 00 
1060e     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10612     0A 02 00 00 
10616     00 00 00 00 
1061a     00 00 00 A0 
1061e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10622     0A 02 00 00 
10626     00 00 00 00 
1062a     00 00 00 7F 
1062e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
10632     0A 02 00 00 
10636     00 00 00 00 
1063a     00 00 00 BE 
1063e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10642     00 00 00 00 
10646     00 00       | 	byte	$00[6]
10648     01 7D 10 00 
1064c     00 AA 1C 30 
10650     00 BE 0E 93 
10654     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
10658     00 00 00 00 
1065c     00          | 	byte	$00[5]
1065d     A0 10 00 00 
10661     D6 2A 02 00 
10665     E2 60 00 01 
10669     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
1066d     A0 1C 30 00 
10671     00 0A 02 00 
10675     00 00 00 00 
10679     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1067d     AA 10 00 00 
10681     00 0A 02 00 
10685     00 00 00 00 
10689     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1068d     BE 10 00 00 
10691     D6 2C 20 00 
10695     00 00 00 00 
10699     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
1069d     AA 10 00 00 
106a1     D6 2A 04 00 
106a5     00 00 00 00 
106a9     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
106ad     00 00 00 00 
106b1     00          | 	byte	$00[5]
106b2     0A 04 00 00 
106b6     00 00 00 00 
106ba     0A 02 00 A0 
106be     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
106c2     2A 02 00 FE 
106c6     60 00 01 E0 
106ca     10 00 00 00 
106ce     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
106d2     0A 02 00 00 
106d6     00 00 00 00 
106da     00 00 00 A0 
106de     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
106e2     0A 02 00 00 
106e6     00 00 00 00 
106ea     00 00 00 A0 
106ee     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
106f2     0A 02 00 00 
106f6     00 00 00 F0 
106fa     10 00 00 A0 
106fe     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
10702     2A 02 00 00 
10706     00 00 00 00 
1070a     00 00 00 00 
1070e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10712     0A 02 00 00 
10716     00 00 00 00 
1071a     00 00 00 AA 
1071e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
10722     2A 01 00 E2 
10726     60 00 01 AC 
1072a     10 00 00 00 
1072e     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
10732     0A 01 00 00 
10736     00 00 00 00 
1073a     00 00 00 AA 
1073e     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
10742     0A 01 00 00 
10746     00 00 00 00 
1074a     00 00 00 BE 
1074e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
10752     0A 01 00 00 
10756     00 00 00 00 
1075a     00 00 00 AA 
1075e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
10762     0A 01 00 00 
10766     00 00 01 AC 
1076a     10 00 00 00 
1076e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
10772     0A 01 00 00 
10776     00 00 00 00 
1077a     00 00 00 BE 
1077e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10782     2A 01 00 CA 
10786     50 00 01 7D 
1078a     10 00 00 00 
1078e     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10792     0A 01 00 00 
10796     00 00 00 00 
1079a     00 00 00 A0 
1079e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
107a2     2A 01 00 00 
107a6     00 00 00 00 
107aa     00 00 00 00 
107ae     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
107b2     2C 38 00 00 
107b6     00 00 01 AC 
107ba     10 00 00 AA 
107be     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
107c2     0A 06 00 00 
107c6     00 00 00 00 
107ca     00 00 00 AA 
107ce     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
107d2     0E 93 00 00 
107d6     00 00 00 00 
107da     00 00 00 BE 
107de     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
107e2     2C 30 00 00 
107e6     00 00 01 7D 
107ea     10 00 00 00 
107ee     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
107f2     0A 02 00 00 
107f6     00 00 00 00 
107fa     00 00 00 00 
107fe     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10802     0A 02 00 00 
10806     00 00 00 00 
1080a     00 00 00 00 
1080e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10812     0A 02 00 00 
10816     00 00 00 00 
1081a     00 00 00 00 
1081e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10822     0A 02 00 00 
10826     00 00 00 00 
1082a     00 00 00 00 
1082e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10832     0A 02 00 00 
10836     00 00 00 00 
1083a     0D 00 00 00 
1083e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
10842     00 00 00 00 
      ...             
10936     00 00 00 00 
1093a     00 00 00    | 	byte	$00[251]
1093d     7F 1F 05 00 
10941     BE 2A 02 00 
10945     CA 5C 10 01 
10949     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
1094d     00 00 00 00 
10951     00          | 	byte	$00[5]
10952     0A 02 00 00 
10956     0A 10 00 00 
1095a     00 00 00 A0 
1095e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10962     0A 02 00 00 
10966     0A 10 00 00 
1096a     00 00 00 7F 
1096e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
10972     0A 02 00 00 
10976     0A 10 00 00 
1097a     00 00 00 BE 
1097e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10982     0A 02 00 00 
10986     0A 10 00 00 
1098a     0A 02 00 00 
1098e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
10992     0A 02 00 00 
10996     0A 10 00 00 
1099a     0A 02 00 F0 
1099e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
109a2     2A 02 00 FE 
109a6     6C 20 01 E0 
109aa     10 00 00 00 
109ae     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
109b2     0A 02 00 00 
109b6     0A 10 00 00 
109ba     00 00 00 D6 
109be     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
109c2     0A 02 00 00 
109c6     0A 10 00 00 
109ca     00 00 00 F0 
109ce     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
109d2     0A 02 00 00 
109d6     0A 10 00 00 
109da     00 00 00 F0 
109de     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
109e2     0A 02 00 00 
109e6     0A 10 00 00 
109ea     0A 02 00 00 
109ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
109f2     0A 02 00 00 
109f6     0A 10 00 F0 
109fa     1A 02 00 7F 
109fe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
10a02     2A 02 00 CA 
10a06     50 00 01 7D 
10a0a     10 00 00 00 
10a0e     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10a12     0A 02 00 00 
10a16     00 00 00 00 
10a1a     00 00 00 A0 
10a1e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10a22     0A 02 00 00 
10a26     00 00 00 00 
10a2a     00 00 00 7F 
10a2e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
10a32     0A 02 00 00 
10a36     00 00 00 00 
10a3a     00 00 00 BE 
10a3e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10a42     00 00 00 00 
10a46     00 00       | 	byte	$00[6]
10a48     01 7D 10 00 
10a4c     00 AA 1C 30 
10a50     00 BE 0E 93 
10a54     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
10a58     00 00 00 00 
10a5c     00          | 	byte	$00[5]
10a5d     A0 10 00 00 
10a61     D6 2A 02 00 
10a65     E2 60 00 01 
10a69     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
10a6d     A0 1C 30 00 
10a71     00 0A 02 00 
10a75     00 00 00 00 
10a79     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10a7d     AA 10 00 00 
10a81     00 0A 02 00 
10a85     00 00 00 00 
10a89     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10a8d     BE 10 00 00 
10a91     D6 2C 20 00 
10a95     00 00 00 00 
10a99     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
10a9d     AA 10 00 00 
10aa1     D6 2A 04 00 
10aa5     00 00 00 00 
10aa9     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
10aad     00 00 00 00 
10ab1     00          | 	byte	$00[5]
10ab2     0A 04 00 00 
10ab6     00 00 00 00 
10aba     0A 02 00 A0 
10abe     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
10ac2     2A 02 00 FE 
10ac6     60 00 01 E0 
10aca     10 00 00 00 
10ace     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
10ad2     0A 02 00 00 
10ad6     00 00 00 00 
10ada     00 00 00 A0 
10ade     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
10ae2     0A 02 00 00 
10ae6     00 00 00 00 
10aea     00 00 00 A0 
10aee     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
10af2     0A 02 00 00 
10af6     00 00 00 F0 
10afa     10 00 00 A0 
10afe     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
10b02     2A 02 00 00 
10b06     00 00 00 00 
10b0a     00 00 00 00 
10b0e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10b12     0A 02 00 00 
10b16     00 00 00 00 
10b1a     00 00 00 8F 
10b1e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
10b22     2A 01 00 E2 
10b26     60 00 01 AC 
10b2a     10 00 00 00 
10b2e     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
10b32     0A 01 00 00 
10b36     00 00 00 00 
10b3a     00 00 00 8F 
10b3e     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
10b42     0A 01 00 00 
10b46     00 00 00 00 
10b4a     00 00 00 A0 
10b4e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10b52     0A 01 00 00 
10b56     00 00 00 00 
10b5a     00 00 00 8F 
10b5e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10b62     0A 01 00 00 
10b66     00 00 01 AC 
10b6a     10 00 00 00 
10b6e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
10b72     0A 01 00 00 
10b76     00 00 00 00 
10b7a     00 00 00 BE 
10b7e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10b82     2A 01 00 CA 
10b86     50 00 01 7D 
10b8a     10 00 00 00 
10b8e     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10b92     0A 01 00 00 
10b96     00 00 00 00 
10b9a     00 00 00 A0 
10b9e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
10ba2     2A 01 00 00 
10ba6     00 00 00 00 
10baa     00 00 00 00 
10bae     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
10bb2     2C 38 00 00 
10bb6     00 00 01 AC 
10bba     10 00 00 8F 
10bbe     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
10bc2     0A 06 00 00 
10bc6     00 00 00 00 
10bca     00 00 00 00 
10bce     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
10bd2     0E 93 00 00 
10bd6     00 00 00 00 
10bda     00 00 00 7F 
10bde     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
10be2     2C 30 00 00 
10be6     00 00 01 7D 
10bea     10 00 00 00 
10bee     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10bf2     0A 02 00 00 
10bf6     00 00 00 00 
10bfa     00 00 00 00 
10bfe     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10c02     0A 02 00 00 
10c06     00 00 00 00 
10c0a     00 00 00 00 
10c0e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10c12     0A 02 00 00 
10c16     00 00 00 00 
10c1a     00 00 00 A0 
10c1e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
10c22     0A 02 00 00 
10c26     00 00 00 00 
10c2a     00 00 00 8F 
10c2e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
10c32     0A 02 00 00 
10c36     00 00 00 00 
10c3a     0D 00 00 00 
10c3e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
10c42     00 00 00 00 
      ...             
10d36     00 00 00 00 
10d3a     00 00 00    | 	byte	$00[251]
10d3d     7F 1F 05 00 
10d41     BE 2A 02 00 
10d45     CA 50 00 01 
10d49     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
10d4d     00 0A 06 00 
10d51     00 0A 02 00 
10d55     00 00 00 00 
10d59     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d5d     7F 0E 93 00 
10d61     00 0A 02 00 
10d65     00 00 00 00 
10d69     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d6d     8F 1C 30 00 
10d71     00 0A 02 00 
10d75     00 00 00 00 
10d79     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d7d     BE 10 00 00 
10d81     BE 2A 02 00 
10d85     00 00 00 00 
10d89     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d8d     00 00 00 00 
10d91     00          | 	byte	$00[5]
10d92     0A 02 00 00 
10d96     00 00 00 00 
10d9a     00 00 00 7F 
10d9e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
10da2     0A 02 00 00 
10da6     00 00 01 40 
10daa     10 00 00 00 
10dae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
10db2     0A 02 00 00 
10db6     00 00 00 00 
10dba     00 00 00 F0 
10dbe     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
10dc2     2A 02 00 00 
10dc6     00 00 00 00 
10dca     00 00 00 F0 
10dce     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
10dd2     2C 20 00 00 
10dd6     00 00 01 40 
10dda     1A 08 00 FE 
10dde     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
10de2     2A 02 00 00 
10de6     00 00 01 40 
10dea     10 00 00 FE 
10dee     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
10df2     0A 02 00 00 
10df6     00 00 01 1D 
10dfa     1C 20 00 8F 
10dfe     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
10e02     2A 02 00 E2 
10e06     60 00 01 1D 
10e0a     10 00 00 8F 
10e0e     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
10e12     0A 02 00 00 
10e16     00 00 00 00 
10e1a     0A 06 00 A0 
10e1e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
10e22     0A 02 00 00 
10e26     00 00 01 1D 
10e2a     0E 93 00 8F 
10e2e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
10e32     0A 02 00 00 
10e36     00 00 01 1D 
10e3a     10 00 00 AA 
10e3e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
10e42     2A 08 00 00 
10e46     00 00 01 40 
10e4a     1A 08 00 A0 
10e4e     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
10e52     2C 30 00 00 
10e56     00 00 00 00 
10e5a     0A 08 00 BE 
10e5e     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
10e62     2A 02 00 CA 
10e66     50 00 01 7D 
10e6a     10 00 00 BE 
10e6e     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
10e72     0A 02 00 00 
10e76     00 00 00 00 
10e7a     00 00 00 A0 
10e7e     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
10e82     0A 02 00 00 
10e86     00 00 00 00 
10e8a     00 00 00 A0 
10e8e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10e92     0A 02 00 00 
10e96     00 00 00 00 
10e9a     00 00 00 8F 
10e9e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10ea2     0A 02 00 00 
10ea6     00 00 00 00 
10eaa     00 00 00 A0 
10eae     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
10eb2     0A 02 00 00 
10eb6     00 00 00 00 
10eba     00 00 00 7F 
10ebe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
10ec2     2A 02 00 00 
10ec6     00 00 01 7D 
10eca     10 00 00 7F 
10ece     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
10ed2     0A 02 00 00 
10ed6     00 00 00 00 
10eda     00 00 00 8F 
10ede     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10ee2     0A 02 00 00 
10ee6     00 00 00 00 
10eea     00 00 00 8F 
10eee     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
10ef2     0A 02 00 00 
10ef6     00 00 00 00 
10efa     00 00 00 A0 
10efe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
10f02     2A 02 00 00 
10f06     00 00 00 00 
10f0a     00 00 00 A0 
10f0e     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
10f12     0A 02 00 00 
10f16     00 00 00 00 
10f1a     00 00 00 F0 
10f1e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
10f22     2A 02 00 FE 
10f26     60 00 01 E0 
10f2a     10 00 00 F0 
10f2e     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
10f32     0A 02 00 00 
10f36     00 00 00 00 
10f3a     00 00 00 7F 
10f3e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
10f42     0A 02 00 00 
10f46     00 00 00 00 
10f4a     00 00 00 7F 
10f4e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
10f52     0A 02 00 00 
10f56     00 00 00 00 
10f5a     00 00 00 8F 
10f5e     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
10f62     2A 02 00 00 
10f66     00 00 00 00 
10f6a     00 00 00 7F 
10f6e     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
10f72     0A 02 00 00 
10f76     00 00 00 00 
10f7a     00 00 00 7F 
10f7e     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
10f82     2A 02 00 CA 
10f86     50 00 01 7D 
10f8a     10 00 00 00 
10f8e     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
10f92     0A 02 00 00 
10f96     00 00 00 00 
10f9a     00 00 00 00 
10f9e     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
10fa2     0A 02 00 00 
10fa6     00 00 01 40 
10faa     10 00 00 00 
10fae     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
10fb2     0A 02 00 00 
10fb6     00 00 00 00 
10fba     00 00 00 00 
10fbe     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10fc2     0A 02 00 00 
10fc6     00 00 01 53 
10fca     19 02 00 00 
10fce     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
10fd2     0A 02 00 00 
10fd6     00 00 00 00 
10fda     00 00 00 7F 
10fde     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
10fe2     2A 02 00 00 
10fe6     00 00 01 7D 
10fea     10 00 00 00 
10fee     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10ff2     0A 02 00 00 
10ff6     00 00 00 00 
10ffa     00 00 00 A0 
10ffe     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11002     0A 02 00 00 
11006     00 00 00 00 
1100a     00 00 00 A0 
1100e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
11012     0A 02 00 00 
11016     00 00 00 00 
1101a     00 00 00 8F 
1101e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11022     0A 02 00 00 
11026     00 00 00 00 
1102a     00 00 00 A0 
1102e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
11032     0A 02 00 00 
11036     00 00 00 00 
1103a     0D 00 00 00 
1103e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
11042     00 00 00 00 
      ...             
11136     00 00 00 00 
1113a     00 00 00    | 	byte	$00[251]
1113d     7F 1F 05 00 
11141     BE 2A 02 00 
11145     CA 50 00 01 
11149     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
1114d     00 0A 06 00 
11151     00 0A 02 00 
11155     00 00 00 00 
11159     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1115d     7F 0E 93 00 
11161     00 0A 02 00 
11165     00 00 00 00 
11169     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1116d     8F 1C 30 00 
11171     00 0A 02 00 
11175     00 00 00 00 
11179     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1117d     BE 10 00 00 
11181     BE 2A 02 00 
11185     00 00 00 00 
11189     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1118d     00 00 00 00 
11191     00          | 	byte	$00[5]
11192     0A 02 00 00 
11196     00 00 00 00 
1119a     00 00 00 7F 
1119e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
111a2     0A 02 00 00 
111a6     00 00 01 40 
111aa     10 00 00 00 
111ae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
111b2     0A 02 00 00 
111b6     00 00 00 00 
111ba     00 00 00 F0 
111be     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
111c2     2A 02 00 00 
111c6     00 00 00 00 
111ca     00 00 00 F0 
111ce     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
111d2     2C 20 00 00 
111d6     00 00 01 40 
111da     1A 08 00 FE 
111de     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
111e2     2A 02 00 00 
111e6     00 00 01 40 
111ea     10 00 00 FE 
111ee     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
111f2     0A 02 00 00 
111f6     00 00 01 1D 
111fa     1C 20 00 8F 
111fe     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
11202     2A 02 00 E2 
11206     60 00 01 1D 
1120a     10 00 00 8F 
1120e     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
11212     0A 02 00 00 
11216     00 00 00 00 
1121a     0A 06 00 A0 
1121e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
11222     0A 02 00 00 
11226     00 00 01 1D 
1122a     0E 93 00 8F 
1122e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
11232     0A 02 00 00 
11236     00 00 01 1D 
1123a     10 00 00 AA 
1123e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
11242     2A 08 00 00 
11246     00 00 01 40 
1124a     1A 08 00 A0 
1124e     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
11252     2C 30 00 00 
11256     00 00 00 00 
1125a     0A 08 00 BE 
1125e     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
11262     2A 02 00 CA 
11266     50 00 01 7D 
1126a     10 00 00 BE 
1126e     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
11272     0A 02 00 00 
11276     00 00 00 00 
1127a     00 00 00 7F 
1127e     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
11282     0A 02 00 00 
11286     00 00 00 00 
1128a     00 00 00 7F 
1128e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
11292     0A 02 00 00 
11296     00 00 00 00 
1129a     00 00 00 8F 
1129e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
112a2     0A 02 00 00 
112a6     00 00 00 00 
112aa     00 00 00 7F 
112ae     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
112b2     0A 02 00 00 
112b6     00 00 00 00 
112ba     00 00 00 A0 
112be     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
112c2     2A 02 00 00 
112c6     00 00 01 7D 
112ca     10 00 00 A0 
112ce     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
112d2     0A 02 00 00 
112d6     00 00 00 00 
112da     00 00 00 AA 
112de     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
112e2     0A 02 00 00 
112e6     00 00 00 00 
112ea     00 00 00 AA 
112ee     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
112f2     0A 02 00 00 
112f6     00 00 00 00 
112fa     00 00 00 BE 
112fe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
11302     2A 02 00 00 
11306     00 00 00 00 
1130a     00 00 00 BE 
1130e     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
11312     0A 02 00 00 
11316     00 00 00 00 
1131a     00 00 00 D6 
1131e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
11322     2A 02 00 E2 
11326     60 00 01 AC 
1132a     10 00 00 D6 
1132e     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
11332     0A 02 00 00 
11336     00 00 00 00 
1133a     00 00 00 FE 
1133e     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
11342     0A 02 00 00 
11346     00 00 00 00 
1134a     00 00 00 FE 
1134e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
11352     0A 02 00 00 
11356     00 00 00 00 
1135a     00 00 00 A0 
1135e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
11362     2A 02 00 00 
11366     00 00 01 AC 
1136a     1C 30 00 A0 
1136e     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
11372     0A 02 00 00 
11376     00 00 00 00 
1137a     00 00 00 BE 
1137e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
11382     2A 02 00 CA 
11386     50 00 01 7D 
1138a     10 00 00 00 
1138e     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
11392     0A 02 00 00 
11396     00 00 00 00 
1139a     00 00 00 00 
1139e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
113a2     0A 02 00 00 
113a6     00 00 00 00 
113aa     00 00 00 00 
113ae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
113b2     0A 02 00 00 
113b6     00 00 00 00 
113ba     00 00 00 BE 
113be     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
113c2     0A 02 00 00 
113c6     00 00 01 AC 
113ca     19 02 00 00 
113ce     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
113d2     0A 02 00 00 
113d6     00 00 00 00 
113da     00 00 00 00 
113de     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
113e2     2A 02 00 00 
113e6     00 00 01 7D 
113ea     10 00 00 00 
113ee     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
113f2     0A 02 00 00 
113f6     00 00 00 00 
113fa     00 00 00 00 
113fe     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
11402     0A 02 00 00 
11406     00 00 00 00 
1140a     00 00 00 00 
1140e     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
11412     0A 02 00 00 
11416     00 00 00 00 
1141a     00 00 00 A0 
1141e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11422     0A 02 00 00 
11426     00 00 00 00 
1142a     00 00 00 8F 
1142e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11432     0A 02 00 00 
11436     00 00 00 00 
1143a     0D 00 00 00 
1143e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
11442     00 00 00 00 
      ...             
11536     00 00 00 00 
1153a     00 00 00    | 	byte	$00[251]
1153d     7F 1F 05 00 
11541     BE 2A 02 00 
11545     CA 50 00 01 
11549     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
1154d     00 00 00 00 
11551     00          | 	byte	$00[5]
11552     0A 02 00 00 
11556     00 00 00 00 
1155a     00 00 00 A0 
1155e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11562     0A 02 00 00 
11566     00 00 00 00 
1156a     00 00 00 7F 
1156e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
11572     0A 02 00 00 
11576     00 00 00 00 
1157a     00 00 00 BE 
1157e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
11582     0A 02 00 00 
11586     00 00 00 00 
1158a     0A 02 00 00 
1158e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
11592     0A 02 00 00 
11596     00 00 00 00 
1159a     0A 02 00 F0 
1159e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
115a2     2A 02 00 FE 
115a6     60 00 01 E0 
115aa     10 00 00 00 
115ae     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
115b2     0A 02 00 00 
115b6     00 00 00 00 
115ba     00 00 00 D6 
115be     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
115c2     0A 02 00 00 
115c6     00 00 00 00 
115ca     00 00 00 F0 
115ce     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
115d2     0A 02 00 00 
115d6     00 00 00 00 
115da     00 00 00 F0 
115de     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
115e2     0A 02 00 00 
115e6     00 00 00 00 
115ea     0A 02 00 00 
115ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
115f2     0A 02 00 00 
115f6     00 00 00 F0 
115fa     1A 02 00 7F 
115fe     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
11602     2A 02 00 CA 
11606     50 00 01 7D 
1160a     10 00 00 00 
1160e     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
11612     0A 02 00 00 
11616     00 00 00 00 
1161a     00 00 00 A0 
1161e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11622     0A 02 00 00 
11626     00 00 00 00 
1162a     00 00 00 7F 
1162e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
11632     0A 02 00 00 
11636     00 00 00 00 
1163a     00 00 00 BE 
1163e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
11642     00 00 00 00 
11646     00 00       | 	byte	$00[6]
11648     01 7D 10 00 
1164c     00 AA 1C 30 
11650     00 BE 0E 93 
11654     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
11658     00 00 00 00 
1165c     00          | 	byte	$00[5]
1165d     A0 10 00 00 
11661     D6 2A 02 00 
11665     E2 60 00 01 
11669     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
1166d     A0 1C 30 00 
11671     00 0A 02 00 
11675     00 00 00 00 
11679     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1167d     AA 10 00 00 
11681     00 0A 02 00 
11685     00 00 00 00 
11689     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1168d     BE 10 00 00 
11691     D6 2C 20 00 
11695     00 00 00 00 
11699     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
1169d     AA 10 00 00 
116a1     D6 2A 04 00 
116a5     00 00 00 00 
116a9     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
116ad     00 00 00 00 
116b1     00          | 	byte	$00[5]
116b2     0A 04 00 00 
116b6     00 00 00 00 
116ba     0A 02 00 A0 
116be     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
116c2     2A 02 00 FE 
116c6     60 00 01 E0 
116ca     10 00 00 00 
116ce     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
116d2     0A 02 00 00 
116d6     00 00 00 00 
116da     00 00 00 A0 
116de     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
116e2     0A 02 00 00 
116e6     00 00 00 00 
116ea     00 00 00 A0 
116ee     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
116f2     0A 02 00 00 
116f6     00 00 00 F0 
116fa     10 00 00 A0 
116fe     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
11702     2A 02 00 00 
11706     00 00 00 00 
1170a     00 00 00 00 
1170e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11712     0A 02 00 00 
11716     00 00 00 00 
1171a     00 00 00 8F 
1171e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
11722     2A 01 00 E2 
11726     60 00 01 AC 
1172a     10 00 00 00 
1172e     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
11732     0A 01 00 00 
11736     00 00 00 00 
1173a     00 00 00 8F 
1173e     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
11742     0A 01 00 00 
11746     00 00 00 00 
1174a     00 00 00 A0 
1174e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11752     0A 01 00 00 
11756     00 00 00 00 
1175a     00 00 00 8F 
1175e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11762     0A 01 00 00 
11766     00 00 01 AC 
1176a     10 00 00 00 
1176e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
11772     0A 01 00 00 
11776     00 00 00 00 
1177a     00 00 00 BE 
1177e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
11782     2A 01 00 CA 
11786     50 00 01 7D 
1178a     10 00 00 00 
1178e     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
11792     0A 01 00 00 
11796     00 00 00 00 
1179a     00 00 00 A0 
1179e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
117a2     2A 01 00 00 
117a6     00 00 00 00 
117aa     00 00 00 00 
117ae     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
117b2     2C 38 00 00 
117b6     00 00 01 AC 
117ba     10 00 00 8F 
117be     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
117c2     0A 06 00 00 
117c6     00 00 00 00 
117ca     00 00 00 00 
117ce     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
117d2     0E 93 00 00 
117d6     00 00 00 00 
117da     00 00 00 7F 
117de     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
117e2     2C 30 00 00 
117e6     00 00 01 7D 
117ea     10 00 00 00 
117ee     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
117f2     0A 02 00 00 
117f6     00 00 00 00 
117fa     00 00 00 00 
117fe     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11802     0A 02 00 00 
11806     00 00 00 00 
1180a     00 00 00 00 
1180e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11812     0A 02 00 00 
11816     00 00 00 00 
1181a     00 00 00 A0 
1181e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
11822     0A 02 00 00 
11826     00 00 00 00 
1182a     00 00 00 8F 
1182e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
11832     0A 02 00 00 
11836     00 00 00 00 
1183a     0D 00 00 00 
1183e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
11842     00 00 00 00 
      ...             
11936     00 00 00 00 
1193a     00 00 00    | 	byte	$00[251]
1193d     7F 1F 05 01 
11941     1D 71 08 00 
11945     CA 50 00 01 
11949     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
1194d     00 0A 06 01 
11951     0D 73 F0 00 
11955     00 00 00 00 
11959     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
1195d     7F 0E 93 00 
11961     00 04 A1 00 
11965     00 00 00 00 
11969     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
1196d     8F 1C 30 00 
11971     00 04 A1 00 
11975     00 00 00 00 
11979     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
1197d     BE 10 00 00 
11981     00 04 B2 00 
11985     00 00 00 00 
11989     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
1198d     00 00 00 00 
11991     00          | 	byte	$00[5]
11992     04 B2 00 00 
11996     00 00 00 00 
1199a     00 00 00 7F 
1199e     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
119a2     04 C2 00 00 
119a6     00 00 01 40 
119aa     10 00 00 00 
119ae     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
119b2     04 C2 00 00 
119b6     00 00 00 00 
119ba     00 00 00 F0 
119be     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
119c2     70 00 00 00 
119c6     00 00 00 00 
119ca     00 00 00 F0 
119ce     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
119d2     0C 18 00 00 
119d6     00 00 01 40 
119da     1A 08 00 FE 
119de     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
119e2     70 00 00 00 
119e6     00 00 01 40 
119ea     10 00 00 FE 
119ee     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
119f2     0C 18 00 00 
119f6     00 00 01 1D 
119fa     1C 20 00 8F 
119fe     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
11a02     71 08 00 E2 
11a06     60 00 01 1D 
11a0a     10 00 00 8F 
11a0e     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
11a12     73 F0 00 00 
11a16     00 00 00 00 
11a1a     0A 06 00 A0 
11a1e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
11a22     04 C2 00 00 
11a26     00 00 01 1D 
11a2a     0E 93 00 8F 
11a2e     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
11a32     74 C4 00 00 
11a36     00 00 01 1D 
11a3a     10 00 00 AA 
11a3e     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
11a42     73 F0 00 00 
11a46     00 00 01 40 
11a4a     1A 08 00 A0 
11a4e     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
11a52     7C 18 00 00 
11a56     00 00 00 00 
11a5a     0A 08 00 BE 
11a5e     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
11a62     71 04 00 CA 
11a66     50 00 01 7D 
11a6a     10 00 00 BE 
11a6e     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
11a72     73 F0 00 00 
11a76     00 00 00 00 
11a7a     00 00 00 A0 
11a7e     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
11a82     74 C1 00 00 
11a86     00 00 00 00 
11a8a     00 00 00 A0 
11a8e     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11a92     04 C1 00 00 
11a96     00 00 00 00 
11a9a     00 00 00 8F 
11a9e     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
11aa2     71 04 00 00 
11aa6     00 00 00 00 
11aaa     00 00 00 A0 
11aae     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
11ab2     73 F0 00 00 
11ab6     00 00 00 00 
11aba     00 00 00 7F 
11abe     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
11ac2     71 02 00 00 
11ac6     00 00 01 7D 
11aca     10 00 00 7F 
11ace     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
11ad2     73 F0 00 00 
11ad6     00 00 00 00 
11ada     00 00 00 8F 
11ade     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11ae2     04 C1 00 00 
11ae6     00 00 00 00 
11aea     00 00 00 8F 
11aee     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
11af2     04 C1 00 00 
11af6     00 00 00 00 
11afa     00 00 00 A0 
11afe     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
11b02     70 00 00 00 
11b06     00 00 00 00 
11b0a     00 00 00 A0 
11b0e     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
11b12     73 F0 00 00 
11b16     00 00 00 00 
11b1a     00 00 00 F0 
11b1e     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
11b22     73 F0 00 FE 
11b26     60 00 01 E0 
11b2a     10 00 00 F0 
11b2e     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
11b32     04 C1 00 00 
11b36     00 00 00 00 
11b3a     00 00 00 7F 
11b3e     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
11b42     73 F0 00 00 
11b46     00 00 00 00 
11b4a     00 00 00 7F 
11b4e     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
11b52     04 C1 00 00 
11b56     00 00 00 00 
11b5a     00 00 00 8F 
11b5e     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
11b62     73 F0 00 00 
11b66     00 00 00 00 
11b6a     00 00 00 7F 
11b6e     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
11b72     04 C1 00 00 
11b76     00 00 00 00 
11b7a     00 00 00 7F 
11b7e     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
11b82     71 04 00 CA 
11b86     50 00 01 7D 
11b8a     10 00 00 00 
11b8e     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
11b92     73 F0 00 00 
11b96     00 00 00 00 
11b9a     00 00 00 00 
11b9e     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
11ba2     73 F0 00 00 
11ba6     00 00 01 40 
11baa     10 00 00 00 
11bae     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
11bb2     7C 18 00 00 
11bb6     00 00 00 00 
11bba     00 00 00 00 
11bbe     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
11bc2     70 00 00 00 
11bc6     00 00 01 53 
11bca     19 02 00 00 
11bce     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
11bd2     7C 18 00 00 
11bd6     00 00 00 00 
11bda     00 00 00 7F 
11bde     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
11be2     71 04 00 00 
11be6     00 00 01 7D 
11bea     10 00 00 00 
11bee     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
11bf2     73 F0 00 00 
11bf6     00 00 00 00 
11bfa     00 00 00 A0 
11bfe     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11c02     04 C2 00 00 
11c06     00 00 00 00 
11c0a     00 00 00 A0 
11c0e     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
11c12     06 01 00 00 
11c16     00 00 00 00 
11c1a     00 00 00 8F 
11c1e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11c22     06 01 00 00 
11c26     00 00 00 00 
11c2a     00 00 00 A0 
11c2e     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
11c32     06 01 00 00 
11c36     00 00 00 00 
11c3a     0D 00 00 00 
11c3e     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
11c42     00 00 00 00 
      ...             
11d36     00 00 00 00 
11d3a     00 00 00    | 	byte	$00[251]
11d3d     7F 1F 05 00 
11d41     B4 71 03 00 
11d45     CA 50 00 01 
11d49     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11d4d     00 0A 06 00 
11d51     AA 73 F0 00 
11d55     00 00 00 00 
11d59     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d5d     7F 0E 93 00 
11d61     00 04 C2 00 
11d65     00 00 00 00 
11d69     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d6d     8F 1C 30 00 
11d71     00 04 C2 00 
11d75     00 00 00 00 
11d79     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d7d     BE 10 00 00 
11d81     00 04 C2 00 
11d85     00 00 00 00 
11d89     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d8d     00 00 00 00 
11d91     00          | 	byte	$00[5]
11d92     04 C2 00 00 
11d96     00 00 00 00 
11d9a     00 00 00 7F 
11d9e     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
11da2     74 C1 00 00 
11da6     00 00 01 40 
11daa     10 00 00 00 
11dae     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
11db2     04 C2 00 00 
11db6     00 00 00 00 
11dba     00 00 00 F0 
11dbe     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
11dc2     04 C2 00 00 
11dc6     00 00 00 00 
11dca     00 00 00 F0 
11dce     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
11dd2     73 F0 00 00 
11dd6     00 00 01 40 
11dda     1A 08 00 FE 
11dde     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
11de2     73 F0 00 00 
11de6     00 00 01 40 
11dea     10 00 00 FE 
11dee     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
11df2     73 F0 00 00 
11df6     00 00 01 1D 
11dfa     1C 20 00 8F 
11dfe     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
11e02     73 F0 00 E2 
11e06     60 00 01 1D 
11e0a     10 00 00 8F 
11e0e     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
11e12     04 C1 00 00 
11e16     00 00 00 00 
11e1a     0A 06 00 A0 
11e1e     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
11e22     02 06 00 00 
11e26     00 00 01 1D 
11e2a     0E 93 00 8F 
11e2e     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
11e32     73 F0 00 00 
11e36     00 00 01 1D 
11e3a     10 00 00 AA 
11e3e     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
11e42     70 00 00 00 
11e46     00 00 01 40 
11e4a     1A 08 00 A0 
11e4e     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
11e52     7C 20 00 00 
11e56     00 00 00 00 
11e5a     0A 08 00 BE 
11e5e     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
11e62     71 06 00 CA 
11e66     50 00 01 7D 
11e6a     10 00 00 BE 
11e6e     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
11e72     73 F0 00 00 
11e76     00 00 00 00 
11e7a     00 00 00 7F 
11e7e     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
11e82     70 00 00 00 
11e86     00 00 00 00 
11e8a     00 00 00 7F 
11e8e     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
11e92     7C 20 00 00 
11e96     00 00 00 00 
11e9a     00 00 00 8F 
11e9e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
11ea2     70 00 00 00 
11ea6     00 00 00 00 
11eaa     00 00 00 7F 
11eae     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
11eb2     7C 20 00 00 
11eb6     00 00 00 00 
11eba     00 00 00 A0 
11ebe     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
11ec2     70 00 00 00 
11ec6     00 00 01 7D 
11eca     10 00 00 A0 
11ece     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
11ed2     00 00 00 00 
11ed6     00 00 00 00 
11eda     00 00 00    | 	byte	$00[11]
11edd     AA 10 00 00 
11ee1     B4 70 00 00 
11ee5     00 00 00 00 
11ee9     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11eed     AA 1C 30 00 
11ef1     AA 7C 20 00 
11ef5     00 00 00 00 
11ef9     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11efd     BE 10 00 00 
11f01     AA 70 00 00 
11f05     00 00 00 00 
11f09     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f0d     BE 1C 30 00 
11f11     B4 7C 20 00 
11f15     00 00 00 00 
11f19     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f1d     D6 10 00 00 
11f21     97 70 00 00 
11f25     E2 60 00 01 
11f29     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
11f2d     D6 1C 30 00 
11f31     AA 7C 20 00 
11f35     00 00 00 00 
11f39     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f3d     FE 1A 04 00 
11f41     AA 70 00 00 
11f45     00 00 00 00 
11f49     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f4d     FE 0E 93 00 
11f51     97 7C 20 00 
11f55     00 00 00 00 
11f59     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f5d     A0 10 00 00 
11f61     B4 70 00 00 
11f65     00 00 00 01 
11f69     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
11f6d     A0 1C 30 00 
11f71     AA 7C 20 00 
11f75     00 00 00 00 
11f79     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f7d     BE 10 00 00 
11f81     AA 70 00 00 
11f85     CA 50 00 01 
11f89     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11f8d     00 00 00 00 
11f91     B4 73 F0 00 
11f95     00 00 00 00 
11f99     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f9d     00 00 00 00 
11fa1     CA 73 F0 00 
11fa5     00 00 00 00 
11fa9     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11fad     00 00 00 00 
11fb1     00 00 00 00 
11fb5     00 00 00 00 
11fb9     00 00 00 00 | 	byte	$00[16]
11fbd     BE 1A 02 00 
11fc1     F0 71 0A 00 
11fc5     00 0F 03 01 
11fc9     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
11fcd     00 0A 02 00 
11fd1     E2 73 F0 00 
11fd5     00 0F 02 00 
11fd9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
11fdd     00 0A 02 00 
11fe1     00 0C 10 00 
11fe5     00 0F 03 00 
11fe9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
11fed     00 0A 02 00 
11ff1     00 00 00 00 
11ff5     00 0F 02 00 
11ff9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
11ffd     00 0A 02 00 
12001     D6 71 0A 00 
12005     00 0F 03 01 
12009     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
1200d     00 0A 02 00 
12011     CA 73 F0 00 
12015     00 0F 02 00 
12019     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
1201d     00 0A 02 00 
12021     00 04 C2 00 
12025     00 0F 03 00 
12029     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
1202d     00 0A 02 00 
12031     00 06 02 00 
12035     00 0F 02 00 
12039     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
1203d     00 0A 02 00 
12041     00 06 02 00 
12045     00 0F 03 00 
12049     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
1204d     00 0A 02 00 
12051     00 06 02 00 
12055     00 0F 02 00 
12059     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
1205d     00 0A 02 00 
12061     00 06 02 00 
12065     00 0F 03 00 
12069     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
1206d     00 0A 02 00 
12071     00 06 02 00 
12075     00 0F 02 00 
12079     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
1207d     A0 10 00 00 
12081     AA 70 00 00 
12085     00 0F 03 00 
12089     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
1208d     A0 1C 30 00 
12091     00 00 00 00 
12095     00 0F 02 00 
12099     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
1209d     8F 10 00 00 
120a1     97 70 00 00 
120a5     00 0F 03 00 
120a9     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
120ad     00 00 00 00 
120b1     00 00 00 00 
120b5     00          | 	byte	$00[9]
120b6     0F 02 00 00 
120ba     0D 00 00 00 
120be     00 00 00 00 
120c2     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
120c6     00 00 00 00 
      ...             
12136     00 00 00 00 
1213a     00 00 00    | 	byte	$00[119]
1213d     7F 1F 05 00 
12141     8F 71 02 00 
12145     CA 50 00 01 
12149     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
1214d     00 00 00 00 
12151     87 73 F0 00 
12155     00 00 00 00 
12159     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
1215d     A0 10 00 00 
12161     00 04 C1 00 
12165     00 00 00 00 
12169     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
1216d     7F 1C 20 00 
12171     00 04 C1 00 
12175     00 00 00 00 
12179     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
1217d     BE 10 00 00 
12181     00 04 C1 00 
12185     00 00 00 00 
12189     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
1218d     00 00 00 00 
12191     00          | 	byte	$00[5]
12192     04 C1 00 00 
12196     00 00 00 00 
1219a     0A 02 00 F0 
1219e     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
121a2     70 00 00 FE 
121a6     60 00 01 E0 
121aa     10 00 00 00 
121ae     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
121b2     73 F0 00 00 
121b6     00 00 00 00 
121ba     00 00 00 D6 
121be     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
121c2     73 F0 00 00 
121c6     00 00 00 00 
121ca     00 00 00 F0 
121ce     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
121d2     0C 10 00 00 
121d6     00 00 00 00 
121da     00 00 00 F0 
121de     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
121e2     73 F0 00 00 
121e6     00 00 00 00 
121ea     0A 02 00 00 
121ee     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
121f2     0C 10 00 00 
121f6     00 00 00 F0 
121fa     1A 02 00 7F 
121fe     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
12202     71 06 00 CA 
12206     50 00 01 7D 
1220a     10 00 00 00 
1220e     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
12212     73 F0 00 00 
12216     00 00 00 00 
1221a     00 00 00 A0 
1221e     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
12222     70 00 00 00 
12226     00 00 00 00 
1222a     00 00 00 7F 
1222e     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
12232     7C 20 00 00 
12236     00 00 00 00 
1223a     00 00 00 BE 
1223e     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
12242     70 00 00 00 
12246     00 00 01 7D 
1224a     10 00 00 AA 
1224e     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
12252     7C 20 00 00 
12256     00 00 00 00 
1225a     00 00 00 A0 
1225e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
12262     70 00 00 E2 
12266     60 00 01 AC 
1226a     10 00 00 A0 
1226e     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
12272     0C 10 00 00 
12276     00 00 00 00 
1227a     00 00 00 AA 
1227e     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
12282     73 F0 00 00 
12286     00 00 00 00 
1228a     00 00 00 BE 
1228e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
12292     0C 10 00 00 
12296     00 00 00 00 
1229a     00 00 00 AA 
1229e     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
122a2     70 00 00 00 
122a6     00 00 00 00 
122aa     0A 02 00 00 
122ae     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
122b2     7C 20 00 00 
122b6     00 00 00 00 
122ba     0A 02 00 A0 
122be     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
122c2     74 C1 00 FE 
122c6     60 00 01 E0 
122ca     10 00 00 00 
122ce     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
122d2     04 C1 00 00 
122d6     00 00 00 00 
122da     00 00 00 A0 
122de     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
122e2     04 C2 00 00 
122e6     00 00 00 00 
122ea     00 00 00 A0 
122ee     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
122f2     04 C2 00 00 
122f6     00 00 00 F0 
122fa     10 00 00 A0 
122fe     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
12302     73 F0 00 00 
12306     00 00 00 00 
1230a     00 00 00 00 
1230e     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
12312     70 00 00 00 
12316     00 00 00 00 
1231a     00 00 00 8F 
1231e     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
12322     71 04 00 E2 
12326     60 00 01 AC 
1232a     10 00 00 00 
1232e     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
12332     73 F0 00 00 
12336     00 00 00 00 
1233a     00 00 00 8F 
1233e     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
12342     73 F0 00 00 
12346     00 00 00 00 
1234a     00 00 00 A0 
1234e     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
12352     7C 20 00 00 
12356     00 00 00 00 
1235a     00 00 00 8F 
1235e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
12362     70 00 00 00 
12366     00 00 01 AC 
1236a     10 00 00 00 
1236e     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
12372     7C 20 00 00 
12376     00 00 00 00 
1237a     00 00 00 BE 
1237e     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
12382     70 00 00 CA 
12386     50 00 01 7D 
1238a     10 00 00 00 
1238e     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
12392     7C 20 00 00 
12396     00 00 00 00 
1239a     00 00 00 A0 
1239e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
123a2     70 00 00 00 
123a6     00 00 00 00 
123aa     00 00 00 00 
123ae     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
123b2     70 00 00 00 
123b6     00 00 01 AC 
123ba     10 00 00 8F 
123be     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
123c2     71 08 00 00 
123c6     00 00 00 00 
123ca     00 00 00 00 
123ce     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
123d2     73 F0 00 00 
123d6     00 00 00 00 
123da     00 00 00 00 
123de     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
123e2     0C 10 00 00 
123e6     00 00 00 00 
123ea     00 00 00 7F 
123ee     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
123f2     71 06 00 00 
123f6     00 00 01 7D 
123fa     10 00 00 00 
123fe     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
12402     73 F0 00 00 
12406     00 00 00 00 
1240a     00 00 00 00 
1240e     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12412     04 C1 00 00 
12416     00 00 00 00 
1241a     00 00 00 00 
1241e     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12422     06 02 00 00 
12426     00 00 00 00 
1242a     00 00 00 A0 
1242e     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
12432     06 02 00 00 
12436     00 00 00 00 
1243a     00 00 00 8F 
1243e     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
12442     06 02 00 00 
12446     00 00 00 00 
1244a     0D 00 00 00 
1244e     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
12452     00 00 00 00 
      ...             
12536     00 00 00 00 
1253a     00 00 00    | 	byte	$00[235]
1253d     7F 1F 05 00 
12541     8F 71 04 00 
12545     CA 50 00 01 
12549     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
1254d     7F 1C 30 00 
12551     87 73 F0 00 
12555     00 00 00 00 
12559     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
1255d     A0 10 00 00 
12561     00 04 C1 00 
12565     00 00 00 00 
12569     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
1256d     7F 1C 30 00 
12571     00 04 C1 00 
12575     00 00 00 00 
12579     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
1257d     BE 10 00 00 
12581     AA 70 00 00 
12585     00 00 00 00 
12589     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
1258d     A0 1C 30 00 
12591     87 7C 20 00 
12595     00 00 00 00 
12599     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
1259d     F0 40 00 00 
125a1     97 70 00 00 
125a5     FE 60 00 01 
125a9     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
125ad     00 00 00 00 
125b1     AA 73 F0 00 
125b5     00 00 00 00 
125b9     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
125bd     D6 4A 06 00 
125c1     97 73 F0 00 
125c5     00 00 00 00 
125c9     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
125cd     D6 0E 93 00 
125d1     00 0C 10 00 
125d5     00 00 00 00 
125d9     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
125dd     F0 40 00 00 
125e1     AA 73 F0 00 
125e5     00 00 00 00 
125e9     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
125ed     00 00 00 00 
125f1     00          | 	byte	$00[5]
125f2     0C 10 00 00 
125f6     00 00 00 F0 
125fa     1A 02 00 7F 
125fe     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
12602     71 06 00 CA 
12606     50 00 01 7D 
1260a     10 00 00 00 
1260e     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
12612     73 F0 00 00 
12616     00 00 00 00 
1261a     00 00 00 A0 
1261e     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
12622     70 00 00 00 
12626     00 00 00 00 
1262a     00 00 00 7F 
1262e     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
12632     7C 20 00 00 
12636     00 00 00 00 
1263a     00 00 00 BE 
1263e     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
12642     70 00 00 00 
12646     00 00 01 7D 
1264a     10 00 00 AA 
1264e     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
12652     7C 20 00 00 
12656     00 00 00 00 
1265a     00 00 00 A0 
1265e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
12662     70 00 00 E2 
12666     60 00 01 AC 
1266a     10 00 00 A0 
1266e     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
12672     0C 10 00 00 
12676     00 00 00 00 
1267a     00 00 00 AA 
1267e     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
12682     73 F0 00 00 
12686     00 00 00 00 
1268a     00 00 00 BE 
1268e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
12692     0C 10 00 00 
12696     00 00 00 00 
1269a     00 00 00 AA 
1269e     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
126a2     70 00 00 00 
126a6     00 00 00 00 
126aa     0A 02 00 00 
126ae     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
126b2     7C 20 00 00 
126b6     00 00 00 00 
126ba     0A 02 00 A0 
126be     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
126c2     74 C1 00 FE 
126c6     60 00 01 E0 
126ca     10 00 00 00 
126ce     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
126d2     04 C1 00 00 
126d6     00 00 00 00 
126da     00 00 00 A0 
126de     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
126e2     04 C2 00 00 
126e6     00 00 00 00 
126ea     00 00 00 A0 
126ee     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
126f2     04 C2 00 00 
126f6     00 00 00 F0 
126fa     10 00 00 A0 
126fe     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
12702     73 F0 00 00 
12706     00 00 00 00 
1270a     00 00 00 00 
1270e     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
12712     70 00 00 00 
12716     00 00 00 00 
1271a     00 00 00 AA 
1271e     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
12722     71 04 00 E2 
12726     60 00 01 AC 
1272a     10 00 00 00 
1272e     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
12732     73 F0 00 00 
12736     00 00 00 00 
1273a     00 00 00 AA 
1273e     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
12742     73 F0 00 00 
12746     00 00 00 00 
1274a     00 00 00 BE 
1274e     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
12752     7C 20 00 00 
12756     00 00 00 00 
1275a     00 00 00 AA 
1275e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
12762     70 00 00 00 
12766     00 00 01 AC 
1276a     10 00 00 00 
1276e     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
12772     7C 20 00 00 
12776     00 00 00 00 
1277a     00 00 00 BE 
1277e     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
12782     70 00 00 CA 
12786     50 00 01 7D 
1278a     10 00 00 00 
1278e     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
12792     7C 20 00 00 
12796     00 00 00 00 
1279a     0F 06 00 A0 
1279e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
127a2     70 00 00 00 
127a6     00 00 00 00 
127aa     00 00 00 00 
127ae     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
127b2     70 00 00 00 
127b6     00 00 00 00 
127ba     00 00 00 00 
127be     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
127c2     74 C2 00 00 
127c6     00 00 01 AC 
127ca     10 00 00 AA 
127ce     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
127d2     04 C2 00 00 
127d6     00 00 00 00 
127da     0F 07 00 AA 
127de     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
127e2     0C 10 00 00 
127e6     00 00 00 00 
127ea     0F 08 00 BE 
127ee     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
127f2     71 02 00 00 
127f6     00 00 01 7D 
127fa     1F 0A 00 00 
127fe     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
12802     73 F0 00 00 
12806     00 00 00 00 
1280a     04 A2 00 00 
1280e     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
12812     04 C1 00 00 
12816     0F 02 00 00 
1281a     06 02 00 00 
1281e     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
12822     06 02 00 00 
12826     0E 60 00 00 
1282a     06 02 00 00 
1282e     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
12832     06 02 00 00 
12836     0A 02 00 00 
1283a     06 02 00 00 
1283e     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
12842     06 02 00 00 
12846     0E 6F 00 00 
1284a     06 02 00 BE 
1284e     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
12852     7F 05 00 00 
12856     00 00 00 00 
1285a     06 02 00 BE 
1285e     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
12862     73 F0 00 00 
12866     0D 00 00 00 
1286a     06 02 00 00 
1286e     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
12872     00 00 00 00 
      ...             
12936     00 00 00 00 
1293a     00 00 00    | 	byte	$00[203]
1293d     7F 1F 05 00 
12941     8F 71 04 00 
12945     CA 90 00 00 
12949     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1294d     00 00 00 00 
12951     87 73 F0 00 
12955     00 00 00 00 
12959     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
1295d     A0 10 00 00 
12961     00 04 C2 00 
12965     00 00 00 00 
12969     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1296d     7F 1C 20 00 
12971     00 04 C2 00 
12975     00 00 00 00 
12979     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1297d     BE 10 00 00 
12981     97 73 F0 00 
12985     00 00 00 00 
12989     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
1298d     00 00 00 00 
12991     AA 73 F0 00 
12995     00 00 00 00 
12999     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1299d     F0 40 00 00 
129a1     97 70 00 00 
129a5     FE B0 00 00 
129a9     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
129ad     00 00 00 00 
129b1     AA 7C 20 00 
129b5     00 00 00 00 
129b9     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
129bd     D6 4A 06 00 
129c1     AA 70 00 00 
129c5     00 00 00 00 
129c9     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
129cd     F0 0E 93 00 
129d1     97 7C 20 00 
129d5     00 00 00 00 
129d9     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
129dd     F0 40 00 00 
129e1     B4 70 00 00 
129e5     00 00 00 00 
129e9     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
129ed     00 00 00 00 
129f1     AA 7C 20 00 
129f5     00 00 00 00 
129f9     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
129fd     7F 10 00 00 
12a01     CA 74 C1 00 
12a05     CA 90 00 00 
12a09     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12a0d     00 00 00 00 
12a11     00          | 	byte	$00[5]
12a12     06 01 00 00 
12a16     00 00 00 00 
12a1a     00 00 00 A0 
12a1e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
12a22     06 01 00 00 
12a26     00 00 00 BE 
12a2a     A0 00 00 7F 
12a2e     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
12a32     06 01 00 00 
12a36     00 00 00 BE 
12a3a     A0 00 00 BE 
12a3e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
12a42     06 01 00 00 
12a46     00 00 00 BE 
12a4a     3C 20 00 AA 
12a4e     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
12a52     06 01 00 00 
12a56     00 00 00 BE 
12a5a     A0 00 00 A0 
12a5e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
12a62     06 01 00 E2 
12a66     B0 00 00 BE 
12a6a     D0 00 00 A0 
12a6e     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
12a72     06 01 00 00 
12a76     00 00 00 00 
12a7a     00 00 00 AA 
12a7e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
12a82     06 01 00 00 
12a86     00 00 00 BE 
12a8a     A0 00 00 BE 
12a8e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
12a92     06 01 00 00 
12a96     00 00 00 00 
12a9a     00 00 00 AA 
12a9e     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
12aa2     70 00 00 00 
12aa6     00 00 00 BE 
12aaa     30 00 00 00 
12aae     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
12ab2     7C 20 00 00 
12ab6     00 00 00 BE 
12aba     A0 00 00 A0 
12abe     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
12ac2     71 04 00 FE 
12ac6     B0 00 00 BE 
12aca     30 00 00 00 
12ace     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
12ad2     73 F0 00 00 
12ad6     00 00 00 00 
12ada     00 00 00 A0 
12ade     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
12ae2     04 C1 00 00 
12ae6     00 00 00 BE 
12aea     A0 00 00 A0 
12aee     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
12af2     04 C1 00 00 
12af6     00 00 00 BE 
12afa     A0 00 00 A0 
12afe     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
12b02     70 00 00 00 
12b06     00 00 00 BE 
12b0a     3C 20 00 00 
12b0e     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
12b12     73 F0 00 00 
12b16     00 00 00 BE 
12b1a     A0 00 00 8F 
12b1e     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
12b22     73 F0 00 E2 
12b26     B0 00 00 BE 
12b2a     D0 00 00 00 
12b2e     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
12b32     0C 10 00 00 
12b36     00 00 00 00 
12b3a     00 00 00 8F 
12b3e     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
12b42     73 F0 00 00 
12b46     00 00 00 BE 
12b4a     A0 00 00 A0 
12b4e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
12b52     0C 10 00 00 
12b56     00 00 00 00 
12b5a     00 00 00 8F 
12b5e     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
12b62     74 C1 00 00 
12b66     00 00 00 BE 
12b6a     30 00 00 00 
12b6e     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
12b72     04 C1 00 00 
12b76     00 00 00 BE 
12b7a     A0 00 00 BE 
12b7e     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
12b82     70 00 00 CA 
12b86     90 00 00 BE 
12b8a     30 00 00 00 
12b8e     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
12b92     73 F0 00 00 
12b96     00 00 00 00 
12b9a     00 00 00 A0 
12b9e     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
12ba2     73 F0 00 00 
12ba6     00 00 00 BE 
12baa     A0 00 00 00 
12bae     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
12bb2     04 C1 00 00 
12bb6     00 00 00 BE 
12bba     A0 00 00 8F 
12bbe     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
12bc2     06 01 00 00 
12bc6     00 00 00 BE 
12bca     3C 20 00 00 
12bce     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
12bd2     06 01 00 00 
12bd6     00 00 00 BE 
12bda     A0 00 00 7F 
12bde     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
12be2     06 01 00 00 
12be6     00 00 00 BE 
12bea     D0 00 00 00 
12bee     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
12bf2     04 C2 00 00 
12bf6     00 00 00 00 
12bfa     00 00 00 00 
12bfe     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12c02     06 01 00 00 
12c06     00 00 00 BE 
12c0a     A0 00 00 00 
12c0e     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
12c12     06 01 00 00 
12c16     00 00 00 00 
12c1a     00 00 00 A0 
12c1e     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
12c22     70 00 00 00 
12c26     00 00 00 BE 
12c2a     30 00 00 8F 
12c2e     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
12c32     73 F0 00 00 
12c36     0D 00 00 BE 
12c3a     A0 00 00 00 
12c3e     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
12c42     00 00 00 00 
      ...             
12d36     00 00 00 00 
12d3a     00 00 00    | 	byte	$00[251]
12d3d     7F 1F 05 00 
12d41     87 74 C2 00 
12d45     CA 90 00 00 
12d49     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12d4d     7F 1C 30 00 
12d51     00 04 C2 00 
12d55     00 00 00 00 
12d59     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
12d5d     A0 10 00 00 
12d61     00 04 C2 00 
12d65     00 00 00 00 
12d69     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12d6d     7F 1C 30 00 
12d71     00 04 C2 00 
12d75     00 00 00 00 
12d79     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12d7d     BE 10 00 00 
12d81     97 73 F0 00 
12d85     00 00 00 00 
12d89     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
12d8d     A0 1C 30 00 
12d91     87 73 F0 00 
12d95     00 00 00 00 
12d99     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12d9d     F0 40 00 00 
12da1     7F 70 00 00 
12da5     FE B0 00 00 
12da9     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
12dad     00 00 00 00 
12db1     87 7C 20 00 
12db5     00 00 00 00 
12db9     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
12dbd     D6 4A 06 00 
12dc1     87 70 00 00 
12dc5     00 00 00 00 
12dc9     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12dcd     D6 0E 93 00 
12dd1     7F 7C 20 00 
12dd5     00 00 00 00 
12dd9     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
12ddd     F0 40 00 00 
12de1     97 70 00 00 
12de5     00 00 00 00 
12de9     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
12ded     00 00 00 00 
12df1     87 7C 20 00 
12df5     00 00 00 00 
12df9     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12dfd     7F 10 00 00 
12e01     8F 71 04 00 
12e05     CA 90 00 00 
12e09     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12e0d     00 00 00 00 
12e11     87 73 F0 00 
12e15     00 00 00 00 
12e19     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12e1d     A0 10 00 00 
12e21     00 04 C2 00 
12e25     00 00 00 00 
12e29     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e2d     7F 1C 20 00 
12e31     00 06 01 00 
12e35     00 00 00 00 
12e39     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e3d     BE 10 00 00 
12e41     00 06 01 00 
12e45     00 00 00 00 
12e49     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
12e4d     AA 1C 30 00 
12e51     00 06 01 00 
12e55     00 00 00 00 
12e59     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e5d     A0 10 00 00 
12e61     00 06 01 00 
12e65     E2 B0 00 00 
12e69     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
12e6d     A0 1C 30 00 
12e71     00 06 01 00 
12e75     00 00 00 00 
12e79     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
12e7d     AA 10 00 00 
12e81     B4 71 03 00 
12e85     00 00 00 00 
12e89     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e8d     BE 10 00 00 
12e91     AA 73 F0 00 
12e95     00 00 00 00 
12e99     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12e9d     AA 10 00 00 
12ea1     B4 73 F0 00 
12ea5     00 00 00 00 
12ea9     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
12ead     00 00 00 00 
12eb1     00 00 00 00 
12eb5     00 00 00 00 | 	byte	$00[12]
12eb9     BE A0 00 00 
12ebd     A0 10 00 00 
12ec1     D6 71 06 00 
12ec5     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
12ec9     BE 30 00 00 
12ecd     00 0C 20 00 
12ed1     CA 73 F0 00 
12ed5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
12ed9     00 00 00 00 
12edd     A0 0E 93 00 
12ee1     00 04 C2 00 
12ee5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
12ee9     BE A0 00 00 
12eed     A0 1C 20 00 
12ef1     00 04 C2 00 
12ef5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
12ef9     BE A0 00 00 
12efd     A0 10 00 00 
12f01     B4 73 F0 00 
12f05     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
12f09     BE 3C 20 00 
12f0d     00 00 00 00 
12f11     CA 73 F0 00 
12f15     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
12f19     BE A0 00 00 
12f1d     AA 10 00 00 
12f21     E2 74 C2 00 
12f25     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
12f29     BE D0 00 00 
12f2d     00 0C 20 00 
12f31     00 06 01 00 
12f35     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
12f39     00 00 00 00 
12f3d     AA 1E 93 01 
12f41     0D 74 C2 00 
12f45     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
12f49     BE A0 00 00 
12f4d     BE 10 00 00 
12f51     00 0C 10 00 
12f55     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
12f59     00 00 00 00 
12f5d     AA 10 00 00 
12f61     E2 74 C2 00 
12f65     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
12f69     BE 30 00 00 
12f6d     00 00 00 00 
12f71     00 0C 10 00 
12f75     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
12f79     BE A0 00 00 
12f7d     BE 10 00 00 
12f81     D6 71 08 00 
12f85     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
12f89     BE 30 00 00 
12f8d     00 00 00 00 
12f91     CA 73 F0 00 
12f95     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
12f99     00 00 00 00 
12f9d     A0 10 00 00 
12fa1     00 04 C2 00 
12fa5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
12fa9     BE A0 00 00 
12fad     00 00 00 00 
12fb1     00 06 01 00 
12fb5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fb9     BE A0 00 00 
12fbd     AA 10 00 00 
12fc1     00 06 01 00 
12fc5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fc9     BE 3C 20 00 
12fcd     AA 1E 93 00 
12fd1     00 06 01 00 
12fd5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fd9     BE A0 00 00 
12fdd     BE 10 00 00 
12fe1     00 06 01 00 
12fe5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fe9     BE D0 00 00 
12fed     00 04 A1 00 
12ff1     00 06 01 00 
12ff5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
12ff9     BE A0 00 00 
12ffd     00 06 01 00 
13001     00 06 01 00 
13005     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
13009     BE AC 20 00 
1300d     00 06 01 00 
13011     00 06 01 00 
13015     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
13019     BE 3C 20 00 
1301d     00 06 01 00 
13021     00 06 01 00 
13025     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
13029     BE D0 00 00 
1302d     00 06 01 00 
13031     00 06 01 00 
13035     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
13039     00 00 00 00 
      ...             
13135     00 00 00 00 
13139     00 00 00 00 | 	byte	$00[260]
1313d     BE 10 00 00 
13141     00 06 01 00 
13145     CA 90 00 00 
13149     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1314d     00 00 00 00 
13151     00          | 	byte	$00[5]
13152     06 01 00 00 
13156     00 00 00 00 
1315a     00 00 00 A0 
1315e     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
13162     06 01 00 00 
13166     00 00 00 BE 
1316a     A0 00 00 8F 
1316e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
13172     06 01 00 00 
13176     00 00 00 BE 
1317a     A0 00 00 A0 
1317e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
13182     06 01 00 00 
13186     00 00 00 BE 
1318a     3C 20 00 AA 
1318e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
13192     06 01 00 00 
13196     00 00 00 BE 
1319a     A0 00 00 A0 
1319e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
131a2     06 01 00 00 
131a6     00 00 00 BE 
131aa     D0 00 00 A0 
131ae     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
131b2     06 01 00 00 
131b6     00 00 00 00 
131ba     00 00 00 AA 
131be     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
131c2     06 01 00 00 
131c6     00 00 00 BE 
131ca     A0 00 00 AA 
131ce     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
131d2     06 01 00 00 
131d6     00 00 00 00 
131da     00 00 00 BE 
131de     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
131e2     06 01 00 00 
131e6     00 00 00 BE 
131ea     30 00 00 BE 
131ee     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
131f2     0C 00 00 00 
131f6     00 00 00 BE 
131fa     A0 00 00 AA 
131fe     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
13202     00 00 01 0D 
13206     B0 00 00 BE 
1320a     30 00 00 00 
1320e     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
13212     00 00 00 00 
13216     00 00 00 00 
1321a     00 00 00    | 	byte	$00[11]
1321d     AA 1E 93 00 
13221     00 00 00 00 
13225     00 00 00 00 
13229     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1322d     A0 10 00 00 
13231     00 00 00 00 
13235     00 00 00 00 
13239     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1323d     AA 10 00 00 
13241     00 00 00 00 
13245     00 00 00 00 
13249     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
1324d     BE 10 00 00 
13251     00 00 00 00 
13255     00 00 00 00 
13259     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1325d     AA 10 00 00 
13261     00 00 00 00 
13265     00 00 00 00 
13269     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
1326d     00 04 82 00 
13271     00 00 00 00 
13275     00 00 00 00 
13279     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1327d     00 06 01 00 
13281     00 00 00 00 
13285     00 00 00 00 
13289     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1328d     00 06 01 00 
13291     00 00 00 00 
13295     00 00 00 00 
13299     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1329d     00 06 01 00 
132a1     00 00 00 00 
132a5     00 00 00 00 
132a9     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
132ad     00 06 01 00 
132b1     00 00 00 00 
132b5     00 00 00 00 
132b9     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
132bd     A0 10 00 00 
132c1     00 00 00 00 
132c5     CA 90 00 00 
132c9     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
132cd     00 00 00 00 
132d1     00 00 00 00 
132d5     00 00 00 00 
132d9     00 00 00 00 | 	byte	$00[16]
132dd     BE 1E 93 00 
132e1     00 00 00 00 
132e5     00 00 00 00 
132e9     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
132ed     A0 10 00 00 
132f1     00 00 00 00 
132f5     00 00 00 00 
132f9     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
132fd     8F 10 00 00 
13301     00 00 00 00 
13305     00 00 00 00 
13309     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
1330d     A0 10 00 00 
13311     00 00 00 00 
13315     00 00 00 00 
13319     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1331d     7F 10 00 00 
13321     00 00 00 00 
13325     00 00 00 00 
13329     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
1332d     7F 1C 30 00 
13331     00 00 00 00 
13335     00 00 00 00 
13339     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1333d     BE 40 00 00 
13341     00 00 00 00 
13345     00 00 00 00 
13349     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1334d     BE 4A 08 00 
13351     00 00 00 00 
13355     00 00 00 00 
13359     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1335d     D6 40 00 00 
13361     00 00 00 00 
13365     00 00 00 00 
13369     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
1336d     BE 40 00 00 
13371     00 00 00 00 
13375     00 00 00 00 
13379     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1337d     7F 10 00 00 
13381     00 00 00 01 
13385     0D B0 00 00 
13389     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
1338d     7F 1C 30 00 
13391     00 00 00 00 
13395     00 00 00 00 
13399     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1339d     7F 1E 93 00 
133a1     00 00 00 00 
133a5     00 00 00 00 
133a9     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
133ad     F0 40 00 00 
133b1     00 00 00 00 
133b5     00 00 00 00 
133b9     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
133bd     7F 10 00 00 
133c1     00 00 00 00 
133c5     00 00 00 00 
133c9     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
133cd     8F 10 00 00 
133d1     00 00 00 00 
133d5     00 00 00 00 
133d9     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
133dd     7F 10 00 00 
133e1     00 00 00 00 
133e5     00 00 00 00 
133e9     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
133ed     00 04 81 00 
133f1     00 00 00 00 
133f5     00 00 00 00 
133f9     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
133fd     00 06 01 00 
13401     00 00 00 00 
13405     00 00 00 00 
13409     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1340d     00 06 01 00 
13411     00 00 00 00 
13415     00 00 00 00 
13419     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1341d     00 06 01 00 
13421     00 00 00 00 
13425     00 00 00 00 
13429     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
1342d     00 06 01 00 
13431     00 0D 00 00 
13435     00 00 00 00 
13439     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1343d     00 00 00 00 
      ...             
13535     00 00 00 00 
13539     00 00 00 00 | 	byte	$00[256]
1353d     BE 10 00 00 
13541     00 00 00 00 
13545     CA 90 00 00 
13549     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1354d     00 00 00 00 
13551     00 00 00 00 
13555     00 00 00 00 
13559     00 00 00 00 | 	byte	$00[16]
1355d     A0 1E 93 00 
13561     00 00 00 00 
13565     00 00 00 00 
13569     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1356d     8F 10 00 00 
13571     00 00 00 00 
13575     00 00 00 00 
13579     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1357d     A0 10 00 00 
13581     00 00 00 00 
13585     00 00 00 00 
13589     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
1358d     AA 10 00 00 
13591     00 00 00 00 
13595     00 00 00 00 
13599     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1359d     A0 10 00 00 
135a1     00 00 00 00 
135a5     00 00 00 00 
135a9     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
135ad     A0 1C 30 00 
135b1     00 00 00 00 
135b5     00 00 00 00 
135b9     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
135bd     AA 10 00 00 
135c1     00 00 00 00 
135c5     00 00 00 00 
135c9     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
135cd     AA 1C 30 00 
135d1     00 00 00 00 
135d5     00 00 00 00 
135d9     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
135dd     BE 10 00 00 
135e1     00 00 00 00 
135e5     00 00 00 00 
135e9     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
135ed     BE 1C 30 00 
135f1     00 00 00 00 
135f5     00 00 00 00 
135f9     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
135fd     AA 10 00 00 
13601     00 00 00 01 
13605     0D B0 00 00 
13609     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
1360d     00 00 00 00 
13611     00 00 00 00 
13615     00 00 00 00 
13619     00 00 00 00 | 	byte	$00[16]
1361d     AA 1E 93 00 
13621     00 00 00 00 
13625     00 00 00 00 
13629     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1362d     A0 10 00 00 
13631     00 00 00 00 
13635     00 00 00 00 
13639     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1363d     AA 10 00 00 
13641     00 00 00 00 
13645     00 00 00 00 
13649     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
1364d     BE 10 00 00 
13651     00 00 00 00 
13655     00 00 00 00 
13659     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1365d     AA 10 00 00 
13661     00 00 00 00 
13665     00 00 00 00 
13669     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
1366d     00 04 82 00 
13671     00 00 00 00 
13675     00 00 00 00 
13679     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1367d     00 06 01 00 
13681     00 00 00 00 
13685     00 00 00 00 
13689     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
1368d     00 06 01 00 
13691     00 00 00 00 
13695     00 00 00 00 
13699     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1369d     00 06 01 00 
136a1     00 00 00 00 
136a5     00 00 00 00 
136a9     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
136ad     00 06 01 00 
136b1     00 00 00 00 
136b5     00 00 00 00 
136b9     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
136bd     A0 10 00 00 
136c1     00 00 00 00 
136c5     FE B0 00 00 
136c9     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
136cd     00 0C 20 00 
136d1     00 00 00 00 
136d5     00 00 00 00 
136d9     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
136dd     A0 0E 93 00 
136e1     00 00 00 00 
136e5     00 00 00 00 
136e9     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
136ed     A0 1C 20 00 
136f1     00 00 00 00 
136f5     00 00 00 00 
136f9     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
136fd     A0 10 00 00 
13701     00 00 00 00 
13705     00 00 00 00 
13709     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
1370d     00 00 00 00 
13711     00 00 00 00 
13715     00 00 00 00 | 	byte	$00[12]
13719     BE A0 00 00 
1371d     AA 10 00 00 
13721     00 00 00 00 
13725     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
13729     BE D0 00 00 
1372d     00 0C 20 00 
13731     00 00 00 00 
13735     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
13739     00 00 00 00 
1373d     AA 1E 93 00 
13741     00 00 00 00 
13745     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
13749     BE A0 00 00 
1374d     BE 10 00 00 
13751     00 00 00 00 
13755     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13759     00 00 00 00 
1375d     AA 10 00 00 
13761     00 00 00 00 
13765     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13769     BE 30 00 00 
1376d     00 00 00 00 
13771     00 00 00 00 
13775     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13779     BE A0 00 00 
1377d     BE 10 00 00 
13781     00 00 00 00 
13785     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
13789     BE 30 00 00 
1378d     00 00 00 00 
13791     00 00 00 00 
13795     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13799     00 00 00 00 
1379d     A0 10 00 00 
137a1     00 00 00 00 
137a5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137a9     BE A0 00 00 
137ad     00 00 00 00 
137b1     00 00 00 00 
137b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137b9     BE A0 00 00 
137bd     AA 10 00 00 
137c1     00 00 00 00 
137c5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137c9     BE 3C 20 00 
137cd     AA 1E 93 00 
137d1     00 00 00 00 
137d5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
137d9     BE A0 00 00 
137dd     BE 10 00 00 
137e1     00 00 00 00 
137e5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137e9     BE D0 00 00 
137ed     00 04 A1 00 
137f1     00 00 00 00 
137f5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
137f9     BE A0 00 00 
137fd     00 06 01 00 
13801     00 00 00 00 
13805     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
13809     BE AC 20 00 
1380d     00 06 01 00 
13811     00 00 00 00 
13815     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
13819     BE 3C 20 00 
1381d     00 06 01 00 
13821     AA 70 00 00 
13825     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
13829     BE D0 00 00 
1382d     00 06 01 00 
13831     97 73 F0 00 
13835     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
13839     00 00 00 00 
      ...             
13935     00 00 00 00 
13939     00 00 00 00 | 	byte	$00[260]
1393d     BE 10 00 00 
13941     CA 70 00 00 
13945     CA 90 00 00 
13949     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1394d     00 00 00 00 
13951     00          | 	byte	$00[5]
13952     04 C2 00 00 
13956     00 00 00 00 
1395a     00 00 00 A0 
1395e     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
13962     04 C2 00 00 
13966     00 00 00 BE 
1396a     A0 00 00 8F 
1396e     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
13972     70 00 00 00 
13976     00 00 00 BE 
1397a     A0 00 00 A0 
1397e     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
13982     73 F0 00 00 
13986     00 00 00 BE 
1398a     3C 20 00 AA 
1398e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
13992     0C 10 00 00 
13996     00 00 00 BE 
1399a     A0 00 00 A0 
1399e     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
139a2     71 04 00 00 
139a6     00 00 00 BE 
139aa     D0 00 00 A0 
139ae     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
139b2     73 F0 00 00 
139b6     00 00 00 00 
139ba     00 00 00 AA 
139be     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
139c2     04 C2 00 00 
139c6     00 00 00 BE 
139ca     A0 00 00 AA 
139ce     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
139d2     04 C2 00 00 
139d6     00 00 00 00 
139da     00 00 00 BE 
139de     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
139e2     70 00 00 00 
139e6     00 00 00 BE 
139ea     30 00 00 BE 
139ee     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
139f2     00 00 00 00 
139f6     00 00 00    | 	byte	$00[7]
139f9     BE A0 00 00 
139fd     AA 10 00 00 
13a01     8F 71 03 01 
13a05     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
13a09     BE 30 00 00 
13a0d     00 00 00 00 
13a11     87 73 F0 00 
13a15     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
13a19     00 00 00 00 
13a1d     AA 1E 93 00 
13a21     00 04 C1 00 
13a25     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
13a29     BE A0 00 00 
13a2d     A0 10 00 00 
13a31     00 06 01 00 
13a35     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a39     BE A0 00 00 
13a3d     AA 10 00 00 
13a41     00 06 01 00 
13a45     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a49     BE 3C 20 00 
13a4d     BE 10 00 00 
13a51     00 06 01 00 
13a55     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a59     BE A0 00 00 
13a5d     AA 10 00 00 
13a61     00 04 A2 00 
13a65     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
13a69     BE D0 00 00 
13a6d     00 04 82 00 
13a71     00 06 01 00 
13a75     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a79     00 00 00 00 
13a7d     00          | 	byte	$00[5]
13a7e     06 01 00 00 
13a82     06 01 00 00 
13a86     00 00 00 BE 
13a8a     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13a8e     06 01 00 00 
13a92     06 01 00 00 
13a96     00 00 00 00 
13a9a     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13a9e     06 01 00 00 
13aa2     06 01 00 00 
13aa6     00 00 00 BE 
13aaa     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13aae     06 01 00 00 
13ab2     06 01 00 00 
13ab6     00 00 00 BE 
13aba     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
13abe     10 00 00 AA 
13ac2     70 00 00 CA 
13ac6     90 00 00 BE 
13aca     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
13ace     00 00 00 00 
13ad2     04 C2 00 00 
13ad6     00 00 00 00 
13ada     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
13ade     1E 93 00 00 
13ae2     04 C2 00 00 
13ae6     00 00 00 BE 
13aea     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
13aee     10 00 00 B4 
13af2     73 F0 00 00 
13af6     00 00 00 BE 
13afa     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
13afe     10 00 00 CA 
13b02     73 F0 00 00 
13b06     00 00 00 BE 
13b0a     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
13b0e     10 00 00 00 
13b12     0C 10 00 00 
13b16     00 00 00 BE 
13b1a     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13b1e     10 00 00 BE 
13b22     71 06 00 00 
13b26     00 00 00 BE 
13b2a     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
13b2e     1C 30 00 B4 
13b32     73 F0 00 00 
13b36     00 00 00 00 
13b3a     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
13b3e     40 00 00 CA 
13b42     70 00 00 00 
13b46     00 00 00 BE 
13b4a     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13b4e     4A 08 00 AA 
13b52     73 F0 00 00 
13b56     00 00 00 00 
13b5a     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
13b5e     40 00 00 97 
13b62     73 F0 00 00 
13b66     00 00 00 BE 
13b6a     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
13b6e     40 00 00 00 
13b72     0C 10 00 00 
13b76     00 00 00 BE 
13b7a     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13b7e     10 00 00 8F 
13b82     71 02 01 0D 
13b86     B0 00 00 BE 
13b8a     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
13b8e     1C 30 00 87 
13b92     73 F0 00 00 
13b96     00 00 00 00 
13b9a     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
13b9e     1E 93 00 00 
13ba2     04 C1 00 00 
13ba6     00 00 00 BE 
13baa     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
13bae     40 00 00 00 
13bb2     04 C1 00 00 
13bb6     00 00 00 BE 
13bba     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13bbe     10 00 00 7F 
13bc2     73 F0 00 00 
13bc6     00 00 00 BE 
13bca     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
13bce     10 00 00 00 
13bd2     0C 10 00 00 
13bd6     00 00 00 BE 
13bda     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13bde     10 00 00 8F 
13be2     71 03 00 00 
13be6     00 00 00 BE 
13bea     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
13bee     04 81 00 87 
13bf2     73 F0 00 00 
13bf6     00 00 00 00 
13bfa     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13bfe     06 01 00 00 
13c02     04 C1 00 00 
13c06     00 00 00 BE 
13c0a     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13c0e     06 01 00 00 
13c12     06 01 00 00 
13c16     00 00 00 00 
13c1a     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13c1e     06 01 00 00 
13c22     04 C2 00 00 
13c26     00 00 00 BE 
13c2a     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13c2e     06 01 00 00 
13c32     06 01 00 00 
13c36     0D 00 00 BE 
13c3a     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
13c3e     00 00 00 00 
      ...             
13d36     00 00 00 00 
13d3a     00 00 00    | 	byte	$00[255]
13d3d     A0 10 00 00 
13d41     7F 74 C1 00 
13d45     FE B0 00 00 
13d49     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
13d4d     00 00 00 00 
13d51     00          | 	byte	$00[5]
13d52     04 C2 00 00 
13d56     00 00 00 00 
13d5a     00 00 00 A0 
13d5e     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
13d62     04 C2 00 00 
13d66     00 00 00 BE 
13d6a     A0 00 00 8F 
13d6e     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
13d72     70 00 00 00 
13d76     00 00 00 BE 
13d7a     A0 00 00 A0 
13d7e     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
13d82     73 F0 00 00 
13d86     00 00 00 BE 
13d8a     3C 20 00 AA 
13d8e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
13d92     0C 10 00 00 
13d96     00 00 00 BE 
13d9a     A0 00 00 A0 
13d9e     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
13da2     71 03 00 00 
13da6     00 00 00 BE 
13daa     D0 00 00 A0 
13dae     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
13db2     73 F0 00 00 
13db6     00 00 00 00 
13dba     00 00 00 AA 
13dbe     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
13dc2     04 C1 00 00 
13dc6     00 00 00 BE 
13dca     A0 00 00 AA 
13dce     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
13dd2     04 C1 00 00 
13dd6     00 00 00 00 
13dda     00 00 00 BE 
13dde     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
13de2     73 F0 00 00 
13de6     00 00 00 BE 
13dea     30 00 00 BE 
13dee     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
13df2     0C 10 00 00 
13df6     00 00 00 BE 
13dfa     A0 00 00 AA 
13dfe     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
13e02     71 02 01 0D 
13e06     B0 00 00 BE 
13e0a     30 00 00 00 
13e0e     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
13e12     73 F0 00 00 
13e16     00 00 00 00 
13e1a     00 00 00 AA 
13e1e     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
13e22     04 C1 00 00 
13e26     00 00 00 BE 
13e2a     A0 00 00 A0 
13e2e     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
13e32     04 C1 00 00 
13e36     00 00 00 BE 
13e3a     A0 00 00 AA 
13e3e     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
13e42     71 03 00 00 
13e46     00 00 00 BE 
13e4a     3C 20 00 BE 
13e4e     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
13e52     7C 10 00 00 
13e56     00 00 00 BE 
13e5a     A0 00 00 AA 
13e5e     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
13e62     00 00 00 00 
13e66     00 00 00    | 	byte	$00[7]
13e69     BE D0 00 00 
13e6d     00 04 82 00 
13e71     00 00 00 00 
13e75     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
13e79     00 00 00 00 
13e7d     00          | 	byte	$00[5]
13e7e     06 01 00 B4 
13e82     74 C2 00 00 
13e86     00 00 00 BE 
13e8a     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13e8e     06 01 00 00 
13e92     04 C2 00 00 
13e96     00 00 00 00 
13e9a     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13e9e     06 01 00 00 
13ea2     04 C2 00 00 
13ea6     00 00 00 BE 
13eaa     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13eae     06 01 00 00 
13eb2     04 C2 00 00 
13eb6     00 00 00 BE 
13eba     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13ebe     10 00 00 D6 
13ec2     71 04 00 CA 
13ec6     90 00 00 BE 
13eca     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
13ece     0C 20 00 CA 
13ed2     73 F0 00 00 
13ed6     00 00 00 00 
13eda     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
13ede     0E 93 00 00 
13ee2     04 C2 00 00 
13ee6     00 00 00 BE 
13eea     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13eee     1C 20 00 00 
13ef2     06 01 00 00 
13ef6     00 00 00 BE 
13efa     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13efe     10 00 00 00 
13f02     06 01 00 00 
13f06     00 00 00 BE 
13f0a     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
13f0e     00 00 00 00 
13f12     06 01 00 00 
13f16     00 00 00 BE 
13f1a     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
13f1e     10 00 00 00 
13f22     06 01 00 E2 
13f26     B0 00 00 BE 
13f2a     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
13f2e     0C 20 00 00 
13f32     06 01 00 00 
13f36     00 00 00 00 
13f3a     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
13f3e     1E 93 00 00 
13f42     06 01 00 00 
13f46     00 00 00 BE 
13f4a     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
13f4e     10 00 00 00 
13f52     06 01 00 00 
13f56     00 00 00 00 
13f5a     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
13f5e     10 00 00 00 
13f62     06 01 00 00 
13f66     00 00 00 BE 
13f6a     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13f6e     00 00 00 00 
13f72     06 01 00 00 
13f76     00 00 00 BE 
13f7a     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13f7e     10 00 00 00 
13f82     06 01 00 CA 
13f86     90 00 00 BE 
13f8a     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
13f8e     00 00 00 00 
13f92     06 01 00 00 
13f96     00 00 00 00 
13f9a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
13f9e     10 00 00 00 
13fa2     06 01 00 00 
13fa6     00 00 00 BE 
13faa     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13fae     00 00 00 00 
13fb2     06 01 00 00 
13fb6     00 00 00 BE 
13fba     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
13fbe     10 00 00 00 
13fc2     06 01 00 00 
13fc6     00 00 00 BE 
13fca     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
13fce     1E 93 00 00 
13fd2     06 01 00 00 
13fd6     00 00 00 BE 
13fda     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13fde     10 00 00 00 
13fe2     06 01 00 00 
13fe6     00 00 00 BE 
13fea     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
13fee     04 A1 00 00 
13ff2     06 01 00 00 
13ff6     00 00 00 BE 
13ffa     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13ffe     06 01 00 00 
14002     06 01 00 00 
14006     00 00 00 BE 
1400a     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
1400e     06 01 00 00 
14012     06 01 00 00 
14016     00 00 00 BE 
1401a     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
1401e     06 01 00 00 
14022     06 01 00 00 
14026     00 00 00 BE 
1402a     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
1402e     06 01 00 00 
14032     06 01 00 00 
14036     0D 00 00 00 
1403a     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1403e     00 00 00 00 
      ...             
14136     00 00 00 00 
1413a     00 00 00    | 	byte	$00[255]
1413d     7F 1F 05 00 
14141     BE 20 00 00 
14145     CA 90 00 00 
14149     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1414d     00 00 00 00 
14151     00          | 	byte	$00[5]
14152     0A 02 00 00 
14156     00 00 00 00 
1415a     00 00 00 A0 
1415e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14162     0A 02 00 00 
14166     00 00 00 BE 
1416a     A0 00 00 7F 
1416e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
14172     0A 02 00 00 
14176     00 00 00 BE 
1417a     A0 00 00 BE 
1417e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14182     0A 02 00 00 
14186     00 00 00 BE 
1418a     3C 20 00 00 
1418e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
14192     0A 02 00 00 
14196     00 00 00 BE 
1419a     A0 00 00 F0 
1419e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
141a2     20 00 00 FE 
141a6     B0 00 00 BE 
141aa     D0 00 00 00 
141ae     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
141b2     00 00 00 00 
141b6     00 00 00 00 
141ba     00 00 00    | 	byte	$00[11]
141bd     D6 4A 06 00 
141c1     BE 2E 93 00 
141c5     00 00 00 00 
141c9     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
141cd     F0 0E 93 00 
141d1     BE 20 00 00 
141d5     00 00 00 00 
141d9     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
141dd     F0 40 00 00 
141e1     D6 20 00 00 
141e5     00 00 00 00 
141e9     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
141ed     00 00 00 00 
141f1     00          | 	byte	$00[5]
141f2     0C 20 00 00 
141f6     00 00 00 BE 
141fa     A0 00 00 7F 
141fe     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
14202     20 00 00 CA 
14206     90 00 00 BE 
1420a     30 00 00 00 
1420e     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
14212     0A 02 00 00 
14216     00 00 00 00 
1421a     00 00 00 A0 
1421e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14222     0A 02 00 00 
14226     00 00 00 BE 
1422a     A0 00 00 7F 
1422e     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
14232     0A 02 00 00 
14236     00 00 00 BE 
1423a     A0 00 00 BE 
1423e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14242     00 00 00 00 
14246     00 00 00    | 	byte	$00[7]
14249     BE 3C 20 00 
1424d     AA 1C 30 00 
14251     BE 0E 93 00 
14255     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
14259     BE A0 00 00 
1425d     A0 10 00 00 
14261     D6 20 00 00 
14265     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14269     BE D0 00 00 
1426d     A0 1C 30 00 
14271     00 0A 02 00 
14275     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14279     00 00 00 00 
1427d     AA 10 00 00 
14281     00 0A 02 00 
14285     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14289     BE A0 00 00 
1428d     BE 10 00 00 
14291     D6 2C 20 00 
14295     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
14299     00 00 00 00 
1429d     AA 10 00 00 
142a1     D6 2A 04 00 
142a5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
142a9     BE 30 00 00 
142ad     00 00 00 00 
142b1     00 0A 04 00 
142b5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
142b9     BE A0 00 00 
142bd     A0 10 00 00 
142c1     F0 20 00 00 
142c5     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
142c9     BE 30 00 00 
142cd     00 0C 20 00 
142d1     00 00 00 00 
142d5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
142d9     00 00 00 00 
142dd     A0 0E 93 00 
142e1     F0 20 00 00 
142e5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
142e9     BE A0 00 00 
142ed     A0 1C 20 00 
142f1     F0 2C 30 00 
142f5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
142f9     BE A0 00 00 
142fd     A0 10 00 00 
14301     F0 20 00 00 
14305     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14309     BE 3C 20 00 
1430d     00 00 00 00 
14311     00 00 00 00 
14315     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14319     BE A0 00 00 
1431d     8F 10 00 00 
14321     D6 20 00 00 
14325     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14329     BE D0 00 00 
1432d     00 0C 20 00 
14331     00 00 00 00 
14335     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14339     00 00 00 00 
1433d     8F 1E 93 00 
14341     D6 20 00 00 
14345     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14349     BE A0 00 00 
1434d     A0 10 00 00 
14351     BE 2C 30 00 
14355     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14359     00 00 00 00 
1435d     8F 10 00 00 
14361     D6 20 00 00 
14365     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14369     BE 30 00 00 
1436d     00 00 00 00 
14371     00 00 00 00 
14375     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14379     BE A0 00 00 
1437d     BE 10 00 00 
14381     BE 20 00 00 
14385     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
14389     BE 30 00 00 
1438d     00 00 00 00 
14391     BE 2C 30 00 
14395     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14399     00 00 00 00 
1439d     A0 10 00 01 
143a1     7D 20 00 00 
143a5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
143a9     BE A0 00 00 
143ad     00 00 00 00 
143b1     BE 2C 30 00 
143b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
143b9     BE A0 00 00 
143bd     8F 10 00 00 
143c1     00 0A 06 00 
143c5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
143c9     BE 3C 20 00 
143cd     00 00 00 00 
143d1     BE 0E 93 00 
143d5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
143d9     BE A0 00 00 
143dd     7F 10 00 00 
143e1     BE 2C 30 00 
143e5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
143e9     BE D0 00 00 
143ed     00 00 00 00 
143f1     00 0A 02 00 
143f5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
143f9     00 00 00 00 
143fd     00 00 00 00 
14401     00          | 	byte	$00[9]
14402     0A 02 00 00 
14406     00 00 00 BE 
1440a     A0 00 00 00 
1440e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
14412     0A 02 00 00 
14416     00 00 00 00 
1441a     00 00 00 A0 
1441e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
14422     0A 02 00 00 
14426     00 00 00 BE 
1442a     30 00 00 8F 
1442e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
14432     0A 02 00 00 
14436     0D 00 00 BE 
1443a     A0 00 00 00 
1443e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
14442     00 00 00 00 
      ...             
14536     00 00 00 00 
1453a     00 00 00    | 	byte	$00[251]
1453d     7F 1F 05 00 
14541     BE 20 00 00 
14545     CA 90 00 00 
14549     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1454d     00 00 00 00 
14551     00          | 	byte	$00[5]
14552     0A 02 00 00 
14556     00 00 00 00 
1455a     00 00 00 A0 
1455e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14562     0A 02 00 00 
14566     00 00 00 BE 
1456a     A0 00 00 7F 
1456e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
14572     0A 02 00 00 
14576     00 00 00 BE 
1457a     A0 00 00 BE 
1457e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14582     0A 02 00 00 
14586     00 00 00 BE 
1458a     3C 20 00 00 
1458e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
14592     0A 02 00 00 
14596     00 00 00 BE 
1459a     A0 00 00 F0 
1459e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
145a2     20 00 00 FE 
145a6     B0 00 00 BE 
145aa     D0 00 00 00 
145ae     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
145b2     00 00 00 00 
145b6     00 00 00 00 
145ba     00 00 00    | 	byte	$00[11]
145bd     D6 4A 06 00 
145c1     BE 2E 93 00 
145c5     00 00 00 00 
145c9     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
145cd     F0 0E 93 00 
145d1     BE 20 00 00 
145d5     00 00 00 00 
145d9     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
145dd     F0 40 00 00 
145e1     D6 20 00 00 
145e5     00 00 00 00 
145e9     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
145ed     00 00 00 00 
145f1     00          | 	byte	$00[5]
145f2     0C 20 00 00 
145f6     00 00 00 BE 
145fa     A0 00 00 7F 
145fe     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
14602     20 00 00 CA 
14606     90 00 00 BE 
1460a     30 00 00 00 
1460e     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
14612     0A 02 00 00 
14616     00 00 00 00 
1461a     00 00 00 A0 
1461e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14622     0A 02 00 00 
14626     00 00 00 BE 
1462a     A0 00 00 7F 
1462e     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
14632     0A 02 00 00 
14636     00 00 00 BE 
1463a     A0 00 00 BE 
1463e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14642     00 00 00 00 
14646     00 00 00    | 	byte	$00[7]
14649     BE 3C 20 00 
1464d     AA 1C 30 00 
14651     BE 0E 93 00 
14655     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
14659     BE A0 00 00 
1465d     A0 10 00 00 
14661     D6 20 00 00 
14665     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14669     BE D0 00 00 
1466d     A0 1C 30 00 
14671     00 0A 02 00 
14675     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14679     00 00 00 00 
1467d     AA 10 00 00 
14681     00 0A 02 00 
14685     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14689     BE A0 00 00 
1468d     BE 10 00 00 
14691     D6 2C 20 00 
14695     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
14699     00 00 00 00 
1469d     AA 10 00 00 
146a1     D6 2A 04 00 
146a5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
146a9     BE 30 00 00 
146ad     00 00 00 00 
146b1     00 0A 04 00 
146b5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
146b9     BE A0 00 00 
146bd     A0 10 00 00 
146c1     F0 20 00 00 
146c5     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
146c9     BE 30 00 00 
146cd     00 0C 20 00 
146d1     00 00 00 00 
146d5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
146d9     00 00 00 00 
146dd     A0 0E 93 00 
146e1     F0 20 00 00 
146e5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
146e9     BE A0 00 00 
146ed     A0 1C 20 00 
146f1     F0 2C 30 00 
146f5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
146f9     BE A0 00 00 
146fd     A0 10 00 00 
14701     F0 20 00 00 
14705     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14709     BE 3C 20 00 
1470d     00 00 00 00 
14711     00 00 00 00 
14715     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14719     BE A0 00 00 
1471d     8F 10 00 00 
14721     D6 20 00 00 
14725     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14729     BE D0 00 00 
1472d     00 0C 20 00 
14731     00 00 00 00 
14735     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14739     00 00 00 00 
1473d     8F 1E 93 00 
14741     D6 20 00 00 
14745     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14749     BE A0 00 00 
1474d     A0 10 00 00 
14751     BE 2C 30 00 
14755     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14759     00 00 00 00 
1475d     8F 10 00 00 
14761     D6 20 00 00 
14765     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14769     BE 30 00 00 
1476d     00 00 00 00 
14771     00 00 00 00 
14775     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14779     BE A0 00 00 
1477d     BE 10 00 01 
14781     1D 20 00 00 
14785     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
14789     BE 30 00 00 
1478d     BE 1C 30 00 
14791     00 00 00 00 
14795     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
14799     00 00 00 00 
1479d     BE 10 00 00 
147a1     00 00 00 00 
147a5     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
147a9     BE A0 00 00 
147ad     BE 1C 30 01 
147b1     1D 2C 30 00 
147b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
147b9     BE A0 00 00 
147bd     D6 10 00 00 
147c1     00 00 00 00 
147c5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
147c9     BE 3C 20 00 
147cd     BE 1E D4 00 
147d1     00 00 00 00 
147d5     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
147d9     BE A0 00 00 
147dd     BE 10 00 01 
147e1     1D 0C 20 00 
147e5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
147e9     BE D0 00 00 
147ed     00 0A 01 00 
147f1     00 00 00 00 
147f5     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
147f9     00 00 00 00 
147fd     00          | 	byte	$00[5]
147fe     0A 01 00 00 
14802     00 00 00 00 
14806     0A 01 00 00 
1480a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1480e     0A 01 01 1D 
14812     0C 10 00 00 
14816     0A 01 00 00 
1481a     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1481e     0A 01 00 00 
14822     00 00 00 00 
14826     0A 01 00 00 
1482a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1482e     0A 01 00 00 
14832     00 00 00 00 
14836     0A 01 00 00 
1483a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1483e     0A 01 00 00 
14842     0C 00 00 00 
14846     0A 01 00 00 
1484a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1484e     0A 01 00 00 
14852     0E 60 00 00 
14856     0A 01 00 00 
1485a     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
1485e     0A 01 00 00 
14862     0E 6F 00 00 
14866     0A 01 00 00 
1486a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1486e     0C 00 00 00 
14872     00 00 00 00 
14876     0C 00 00 00 
1487a     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
1487e     0F 1F 00 00 
14882     00 00 00 00 
14886     00 00 00 00 
1488a     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1488e     00 00 00 00 
      ...             
14936     00 00 00 00 
1493a     00 00 00    | 	byte	$00[175]
1493d     7F 1F 05 00 
14941     BE 20 00 00 
14945     CA 90 00 00 
14949     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
1494d     00 00 00 00 
14951     00          | 	byte	$00[5]
14952     0A 02 00 00 
14956     00 00 00 00 
1495a     00 00 00 A0 
1495e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14962     0A 02 00 00 
14966     00 00 00 BE 
1496a     A0 00 00 7F 
1496e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
14972     0A 02 00 00 
14976     00 00 00 BE 
1497a     A0 00 00 BE 
1497e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14982     0A 02 00 00 
14986     00 00 00 BE 
1498a     3C 20 00 00 
1498e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
14992     0A 02 00 00 
14996     00 00 00 BE 
1499a     A0 00 00 F0 
1499e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
149a2     20 00 00 FE 
149a6     B0 00 00 BE 
149aa     D0 00 00 00 
149ae     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
149b2     00 00 00 00 
149b6     00 00 00 00 
149ba     00 00 00    | 	byte	$00[11]
149bd     D6 4A 06 00 
149c1     BE 2E 93 00 
149c5     00 00 00 00 
149c9     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
149cd     F0 0E 93 00 
149d1     BE 20 00 00 
149d5     00 00 00 00 
149d9     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
149dd     F0 40 00 00 
149e1     D6 20 00 00 
149e5     00 00 00 00 
149e9     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
149ed     00 00 00 00 
149f1     00          | 	byte	$00[5]
149f2     0C 20 00 00 
149f6     00 00 00 BE 
149fa     A0 00 00 7F 
149fe     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
14a02     20 00 00 CA 
14a06     90 00 00 BE 
14a0a     30 00 00 00 
14a0e     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
14a12     0A 02 00 00 
14a16     00 00 00 00 
14a1a     00 00 00 A0 
14a1e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14a22     0A 02 00 00 
14a26     00 00 00 BE 
14a2a     A0 00 00 7F 
14a2e     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
14a32     0A 02 00 00 
14a36     00 00 00 BE 
14a3a     A0 00 00 BE 
14a3e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14a42     00 00 00 00 
14a46     00 00 00    | 	byte	$00[7]
14a49     BE 3C 20 00 
14a4d     AA 1C 30 00 
14a51     BE 0E 93 00 
14a55     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
14a59     BE A0 00 00 
14a5d     A0 10 00 00 
14a61     D6 20 00 00 
14a65     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14a69     BE D0 00 00 
14a6d     A0 1C 30 00 
14a71     00 0A 02 00 
14a75     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14a79     00 00 00 00 
14a7d     AA 10 00 00 
14a81     00 0A 02 00 
14a85     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14a89     BE A0 00 00 
14a8d     BE 10 00 00 
14a91     D6 2C 20 00 
14a95     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
14a99     00 00 00 00 
14a9d     AA 10 00 00 
14aa1     D6 2A 04 00 
14aa5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
14aa9     BE 30 00 00 
14aad     00 00 00 00 
14ab1     00 0A 04 00 
14ab5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
14ab9     BE A0 00 00 
14abd     A0 10 00 00 
14ac1     F0 20 00 00 
14ac5     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
14ac9     BE 30 00 00 
14acd     00 0C 20 00 
14ad1     00 00 00 00 
14ad5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14ad9     00 00 00 00 
14add     A0 0E 93 00 
14ae1     F0 20 00 00 
14ae5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14ae9     BE A0 00 00 
14aed     A0 1C 20 00 
14af1     F0 2C 30 00 
14af5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
14af9     BE A0 00 00 
14afd     A0 10 00 00 
14b01     F0 20 00 00 
14b05     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14b09     BE 3C 20 00 
14b0d     00 00 00 00 
14b11     00 00 00 00 
14b15     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b19     BE A0 00 00 
14b1d     8F 10 00 00 
14b21     D6 20 00 00 
14b25     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14b29     BE D0 00 00 
14b2d     00 0C 20 00 
14b31     00 00 00 00 
14b35     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b39     00 00 00 00 
14b3d     8F 1E 93 00 
14b41     D6 20 00 00 
14b45     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14b49     BE A0 00 00 
14b4d     A0 10 00 00 
14b51     BE 2C 30 00 
14b55     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14b59     00 00 00 00 
14b5d     8F 10 00 00 
14b61     D6 20 00 00 
14b65     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14b69     BE 30 00 00 
14b6d     00 00 00 00 
14b71     00 00 00 00 
14b75     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b79     BE A0 00 00 
14b7d     BE 10 00 01 
14b81     1D 20 00 00 
14b85     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
14b89     BE 30 00 00 
14b8d     00 00 00 00 
14b91     00 00 00 00 
14b95     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b99     00 00 00 00 
14b9d     BE 10 00 00 
14ba1     00 00 00 00 
14ba5     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14ba9     BE A0 00 00 
14bad     00 00 00 01 
14bb1     1D 2C 30 00 
14bb5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
14bb9     BE A0 00 00 
14bbd     D6 10 00 00 
14bc1     00 00 00 00 
14bc5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14bc9     BE 3C 20 00 
14bcd     00 00 00 00 
14bd1     00 00 00 00 
14bd5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14bd9     BE A0 00 00 
14bdd     BE 10 00 01 
14be1     1D 0C 20 00 
14be5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
14be9     BE D0 00 00 
14bed     00 00 00 00 
14bf1     00 00 00 00 
14bf5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14bf9     00 00 00 00 
14bfd     BE 10 00 00 
14c01     00 00 00 00 
14c05     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c09     BE A0 00 00 
14c0d     BE 1E D3 01 
14c11     1D 0C 10 00 
14c15     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
14c19     BE AC 20 00 
14c1d     A0 10 00 00 
14c21     00 00 00 00 
14c25     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c29     BE 30 00 00 
14c2d     00 00 00 00 
14c31     00 00 00 00 
14c35     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c39     BE AD 00 00 
14c3d     00 00 00 00 
14c41     00 00 00 00 
14c45     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c49     00 00 00 00 
      ...             
14d39     00 00 00 00 
14d3d     00          | 	byte	$00[245]
14d3e     08 09 06 07 
14d42     06 08 09 08 
14d46     09 0C 0A 09 
14d4a     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
14d4e     07 07 0A 0C 
14d52     0A 09 0A 08 
14d56     0A 09 0A 0C 
14d5a     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
14d5e     0D 0E 0C 0C 
14d62     12 04 1B 08 
14d66     04 08 13 21 
14d6a     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
14d6e     F7 FF F1 FD 
14d72     09 FE 08 08 
14d76     F3 FF FF 00 
14d7a     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
14d7e     22 12 2B 31 
14d82     00 F7 FF 30 
14d86     18 38 26 31 
14d8a     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
14d8e     13 25 26 1C 
14d92     01 1B 13 FF 
14d96     ED EC EB E0 
14d9a     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
14d9e     D0 D9 F6 E4 
14da2     CF FF ED DE 
14da6     FF C7 C1 D9 
14daa     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
14dae     F0 F6 FF E4 
14db2     E7 F9 DF EC 
14db6     0C 09 12 2E 
14dba     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
14dbe     1C 34 3C 18 
14dc2     2E 26 1B 39 
14dc6     25 4B 39 38 
14dca     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
14dce     2B 33 48 1C 
14dd2     2E 39 2A 34 
14dd6     34 32 1E 1C 
14dda     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
14dde     09 25 30 00 
14de2     E2 FA 00 CF 
14de6     EA C8 E2 FF 
14dea     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
14dee     FD F6 F2 D0 
14df2     CF E2 E4 B0 
14df6     D9 DA C6 E0 
14dfa     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
14dfe     CF F6 E8 F6 
14e02     20 2A 46 4C 
14e06     26 20 2C 18 
14e0a     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
14e0e     2E 48 39 3D 
14e12     4C 36 42 4E 
14e16     39 2A 42 46 
14e1a     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
14e1e     1E 00 DA C6 
14e22     F3 EE EC F2 
14e26     DB F1 FC 02 
14e2a     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
14e2e     DA C0 CF D5 
14e32     C9 C4 BD B8 
14e36     C1 C0 A6 C6 
14e3a     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
14e3e     EC EE FA 09 
14e42     F9 12 33 13 
14e46     FD FD 12 20 
14e4a     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
14e4e     49 4C 3E 4B 
14e52     51 39 42 56 
14e56     26 2E 3D 26 
14e5a     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
14e5e     43 26 28 38 
14e62     45 39 2C 3A 
14e66     3A 36 32 18 
14e6a     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
14e6e     00 FF 12 2C 
14e72     20 33 43 2B 
14e76     2A 26 09 00 
14e7a     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
14e7e     00 DA EC FE 
14e82     F2 F0 F0 DA 
14e86     F6 16 0C 08 
14e8a     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
14e8e     13 F7 EC F0 
14e92     EA F1 F0 E6 
14e96     F1 0D 0A 06 
14e9a     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
14e9e     13 12 25 2D 
14ea2     21 09 ED F6 
14ea6     F2 DA D4 D0 
14eaa     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
14eae     EB FD 00 ED 
14eb2     E4 EA DC CF 
14eb6     D6 DA D0 CF 
14eba     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
14ebe     CC B4 B2 CF 
14ec2     D6 D9 E4 DE 
14ec6     FF 10 04 19 
14eca     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
14ece     0F 19 28 26 
14ed2     36 44 3E 46 
14ed6     5E 58 49 4B 
14eda     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
14ede     20 38 40 30 
14ee2     32 26 21 2D 
14ee6     28 13 16 2B 
14eea     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
14eee     10 16 13 00 
14ef2     FF 00 E1 F1 
14ef6     06 01 0A 25 
14efa     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
14efe     0E 14 20 13 
14f02     00 FD 02 02 
14f06     00 01 F9 F8 
14f0a     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
14f0e     1B 33 3F 4A 
14f12     3E 27 2E 32 
14f16     1F 09 FE FF 
14f1a     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
14f1e     0D 21 1F 13 
14f22     14 1B 2A 2B 
14f26     26 1F 26 13 
14f2a     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
14f2e     DB D9 D0 CA 
14f32     E1 E5 DF F1 
14f36     F9 F8 F6 E4 
14f3a     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
14f3e     C4 CD C9 C3 
14f42     BD B4 BA C2 
14f46     C1 BE C1 C1 
14f4a     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
14f4e     FF 07 02 00 
14f52     F2 F6 06 00 
14f56     F3 FF 14 20 
14f5a     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
14f5e     58 4C 30 2C 
14f62     2C 28 2D 26 
14f66     13 25 38 2B 
14f6a     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
14f6e     25 24 26 26 
14f72     26 27 26 1C 
14f76     0E 04 02 FC 
14f7a     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
14f7e     18 18 1B 1C 
14f82     12 20 1C 0E 
14f86     0D 04 F7 FD 
14f8a     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
14f8e     04 00 FD FE 
14f92     08 25 32 2D 
14f96     36 4B 54 56 
14f9a     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
14f9e     21 13 09 12 
14fa2     18 14 1F 1E 
14fa6     20 24 20 24 
14faa     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
14fae     13 14 13 00 
14fb2     F2 E4 E1 DC 
14fb6     C7 C6 CF E2 
14fba     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
14fbe     F0 ED F1 EB 
14fc2     E5 E5 E4 DA 
14fc6     CD C4 C4 CF 
14fca     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
14fce     D4 CF D6 EA 
14fd2     F6 07 06 06 
14fd6     19 1F 10 0D 
14fda     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
14fde     04 0D 20 38 
14fe2     42 40 40 45 
14fe6     44 3C 2D 21 
14fea     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
14fee     1F 20 19 16 
14ff2     25 1C 0D 19 
14ff6     26 26 1A 13 
14ffa     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
14ffe     F7 E6 DA D4 
15002     E1 ED EE F7 
15006     FD FF 0F 13 
1500a     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
1500e     E8 E2 F3 FE 
15012     00 F6 E6 E4 
15016     F1 FC F7 FE 
1501a     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
1501e     42 48 46 43 
15022     36 2D 26 20 
15026     21 1A 1B 27 
1502a     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
1502e     3A 3A 31 2E 
15032     38 31 26 1B 
15036     18 16 0E 00 
1503a     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
1503e     DE DC D9 DB 
15042     EC ED E4 E7 
15046     F1 F0 F1 E8 
1504a     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
1504e     C6 CD CF CC 
15052     C8 CD D6 DE 
15056     E4 E6 F1 08 
1505a     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
1505e     22 28 27 26 
15062     16 19 20 21 
15066     20 2E 3C 44 
1506a     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
1506e     37 38 38 32 
15072     26 20 2D 30 
15076     26 1A 19 22 
1507a     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
1507e     18 20 2A 28 
15082     1E 0E 01 F7 
15086     ED E6 E6 EB 
1508a     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
1508e     08 16 15 04 
15092     F4 F2 F1 F1 
15096     EE EA E6 E6 
1509a     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
1509e     EB EC EE FD 
150a2     0F 1E 2D 33 
150a6     32 30 26 1C 
150aa     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
150ae     03 08 0E 18 
150b2     1F 20 20 27 
150b6     2C 2D 26 1B 
150ba     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
150be     00 ED ED EA 
150c2     DF DA D9 E6 
150c6     DE D8 D6 DE 
150ca     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
150ce     F1 ED DF D8 
150d2     D9 DB D0 C8 
150d6     CC CF D3 D5 
150da     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
150de     F8 FF 03 0A 
150e2     16 1F 20 20 
150e6     22 26 2B 28 
150ea     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
150ee     46 48 46 4F 
150f2     56 51 4C 3C 
150f6     34 36 34 30 
150fa     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
150fe     30 30 27 1C 
15102     18 1B 24 26 
15106     22 27 27 1C 
1510a     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
1510e     F4 EB EC F1 
15112     FD 0D 16 10 
15116     0A 0D 09 02 
1511a     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
1511e     F2 F1 F3 F3 
15122     ED EC F0 EE 
15126     F3 FF 0D 20 
1512a     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
1512e     2A 2D 26 18 
15132     06 02 07 07 
15136     08 09 10 1C 
1513a     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
1513e     20 1F 15 10 
15142     0A 04 FC ED 
15146     DE DF DF DA 
1514a     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
1514e     C4 C9 D6 DF 
15152     DC D8 D9 DE 
15156     E1 DA CD C7 
1515a     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
1515e     BD BC C6 CD 
15162     D5 DC E2 EC 
15166     FC 02 03 07 
1516a     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
1516e     18 16 1B 21 
15172     27 2A 31 3D 
15176     4B 50 51 50 
1517a     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
1517e     39 30 2A 32 
15182     3A 34 30 34 
15186     34 2D 28 2A 
1518a     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
1518e     27 22 1F 1C 
15192     13 00 F4 F4 
15196     F9 FD 03 0D 
1519a     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
1519e     14 0C 06 01 
151a2     FD F9 F7 F7 
151a6     F9 F9 F7 F2 
151aa     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
151ae     16 20 26 27 
151b2     33 3A 34 2B 
151b6     26 22 18 0E 
151ba     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
151be     18 19 20 24 
151c2     26 26 26 26 
151c6     24 1C 13 0A 
151ca     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
151ce     EB E8 DF D3 
151d2     D0 D3 D6 D8 
151d6     D9 DA DC E2 
151da     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
151de     D6 D8 D5 CC 
151e2     C3 C0 C4 C6 
151e6     C3 C4 CF E0 
151ea     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
151ee     F9 03 0E 10 
151f2     0F 13 13 0F 
151f6     0E 0F 0F 16 
151fa     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
151fe     3A 44 44 3E 
15202     34 2B 27 24 
15206     1F 1E 22 27 
1520a     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
1520e     20 2A 2B 26 
15212     26 28 27 27 
15216     1F 15 0A 02 
1521a     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
1521e     03 0E 14 1B 
15222     1F 1F 1C 18 
15226     13 0A 07 00 
1522a     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
1522e     F4 F0 F1 FA 
15232     03 0A 15 24 
15236     30 34 36 3C 
1523a     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
1523e     24 1E 18 18 
15242     19 1C 1F 20 
15246     24 2A 2E 30 
1524a     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
1524e     1C 0E 04 00 
15252     FD F7 EE E5 
15256     DF DA D9 D9 
1525a     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
1525e     E1 E0 E1 E2 
15262     E6 E6 E0 D8 
15266     D3 D0 CC C4 
1526a     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
1526e     D9 E2 E6 E7 
15272     EB F6 FF 01 
15276     06 0D 16 19 
1527a     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
1527e     18 19 1B 22 
15282     2E 38 43 44 
15286     44 44 3D 30 
1528a     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
1528e     26 22 1C 1B 
15292     1E 22 26 1F 
15296     1E 24 27 25 
1529a     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
1529e     0C 00 F4 F0 
152a2     F0 F1 FA FF 
152a6     07 0A 10 16 
152aa     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
152ae     FC FD FC F7 
152b2     F2 F0 EA E5 
152b6     E6 EA F2 FA 
152ba     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
152be     2B 33 37 34 
152c2     2D 22 1C 1C 
152c6     18 14 12 15 
152ca     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
152ce     27 30 34 36 
152d2     34 27 1C 18 
152d6     13 0F 04 FA 
152da     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
152de     E0 DE E0 E1 
152e2     E0 DF E7 EE 
152e6     F4 F2 F0 EE 
152ea     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
152ee     D3 C8 C6 CC 
152f2     D2 D6 D9 E0 
152f6     EC F1 F3 F7 
152fa     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
152fe     13 13 15 19 
15302     18 14 13 18 
15306     1B 20 2A 33 
1530a     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
1530e     32 2B 28 28 
15312     26 20 19 19 
15316     1B 1A 19 1A 
1531a     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
1531e     21 21 22 21 
15322     1C 15 09 00 
15326     F3 F2 F2 F1 
1532a     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
1532e     10 13 10 0E 
15332     09 04 00 00 
15336     FE F9 F2 E8 
1533a     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
1533e     F2 F6 FD 02 
15342     10 20 2C 30 
15346     32 31 2D 26 
1534a     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
1534e     0E 10 14 13 
15352     14 1B 27 2E 
15356     30 2B 26 22 
1535a     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
1535e     FE F9 F1 E7 
15362     E4 E1 DF DA 
15366     D3 D0 D2 D8 
1536a     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
1536e     E5 EC EE E8 
15372     DC D3 CC C7 
15376     C3 C3 C8 CF 
1537a     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
1537e     F1 FA FF 04 
15382     09 10 16 1A 
15386     1B 1C 1E 1E 
1538a     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
1538e     33 43 4F 4F 
15392     4C 49 48 45 
15396     3D 37 31 2B 
1539a     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
1539e     25 27 27 28 
153a2     27 28 2D 32 
153a6     31 2C 26 1A 
153aa     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
153ae     F2 F2 F4 F7 
153b2     FF 08 0F 10 
153b6     0C 09 09 04 
153ba     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
153be     ED E5 E4 E5 
153c2     E6 E6 E6 EA 
153c6     F3 FC 08 16 
153ca     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
153ce     2E 28 1F 18 
153d2     16 18 13 0C 
153d6     0A 0F 18 21 
153da     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
153de     2D 2B 21 1E 
153e2     16 0E 04 FA 
153e6     F3 EE EC E8 
153ea     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
153ee     D9 D8 D5 D8 
153f2     DE E2 EA EB 
153f6     EA EA E4 D5 
153fa     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
153fe     C6 C9 CE D4 
15402     DB E5 E8 ED 
15406     F4 FC 02 06 
1540a     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
1540e     18 13 0C 0C 
15412     16 20 2A 34 
15416     3C 3D 42 44 
1541a     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
1541e     31 2B 26 21 
15422     22 25 24 21 
15426     1F 20 25 2B 
1542a     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
1542e     2B 26 1C 13 
15432     0A 01 F9 F7 
15436     F9 FF 08 0F 
1543a     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
1543e     18 19 18 10 
15442     09 00 FC F6 
15446     F4 F3 F2 ED 
1544a     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
1544e     0D 1A 25 32 
15452     36 34 32 31 
15456     30 2B 26 1A 
1545a     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
1545e     18 20 26 2C 
15462     2E 2D 2C 2C 
15466     2C 26 18 0C 
1546a     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
1546e     E5 DF DA D6 
15472     D5 D0 CD CD 
15476     CD CE D0 D6 
1547a     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
1547e     DA CE C7 C2 
15482     BD BB BB C1 
15486     CA CE D2 D9 
1548a     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
1548e     F8 FD 08 12 
15492     18 14 13 0C 
15496     0C 13 1A 20 
1549a     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
1549e     43 42 40 42 
154a2     3E 39 30 2B 
154a6     28 27 26 1E 
154aa     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
154ae     21 25 2A 2D 
154b2     2E 2C 2A 26 
154b6     1B 15 09 FD 
154ba     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
154be     FF 02 06 09 
154c2     0C 12 14 15 
154c6     13 09 01 FD 
154ca     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
154ce     EA EC EB EB 
154d2     EE F8 06 12 
154d6     1E 26 2C 31 
154da     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
154de     26 21 18 14 
154e2     15 16 20 26 
154e6     2A 2C 33 3C 
154ea     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
154ee     26 20 19 0E 
154f2     04 00 F8 F0 
154f6     EA E6 E2 E1 
154fa     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
154fe     D9 E5 EC EC 
15502     ED EB E6 DA 
15506     D0 C9 C7 C8 
1550a     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
1550e     D4 DE E4 E8 
15512     EA EC F3 FE 
15516     07 0A 0C 09 
1551a     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
1551e     0A 14 1E 24 
15522     27 2E 36 39 
15526     3C 36 33 30 
1552a     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
1552e     15 14 13 12 
15532     0E 10 18 1A 
15536     21 24 25 27 
1553a     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
1553e     07 00 F9 F7 
15542     FA FC FE FF 
15546     03 09 12 16 
1554a     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
1554e     0F 07 02 FD 
15552     FA F7 F2 ED 
15556     E8 EC F4 FD 
1555a     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
1555e     2B 30 33 34 
15562     34 30 28 1E 
15566     18 14 18 13 
1556a     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
1556e     2D 32 36 36 
15572     32 30 26 1C 
15576     14 0D 06 FD 
1557a     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
1557e     E1 DB D6 D0 
15582     D0 D2 D6 DC 
15586     E7 EE F0 EA 
1558a     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
1558e     CE C9 C3 C7 
15592     CD D4 DC E1 
15596     E5 E7 F0 F6 
1559a     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
1559e     1A 18 13 12 
155a2     13 14 16 1E 
155a6     22 2A 31 3C 
155aa     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
155ae     3E 39 34 31 
155b2     2C 26 21 1C 
155b6     18 13 14 19 
155ba     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
155be     28 2A 2B 26 
155c2     1C 13 06 00 
155c6     FC F7 F4 F3 
155ca     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
155ce     08 0D 0F 13 
155d2     10 0C 07 04 
155d6     00 FC F7 EE 
155da     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
155de     E7 F0 F6 FF 
155e2     0A 14 1E 2A 
155e6     31 32 30 27 
155ea     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
155ee     13 10 13 15 
155f2     1E 22 28 31 
155f6     36 37 32 2E 
155fa     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
155fe     09 03 00 F7 
15602     F1 EA E4 DF 
15606     DA D0 CD D0 
1560a     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
1560e     EB E8 E8 E6 
15612     DB D5 CE C7 
15616     C6 C9 CF D3 
1561a     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
1561e     EA F1 FA 03 
15622     09 0F 13 0F 
15626     10 12 10 10 
1562a     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
1562e     2E 33 3A 3F 
15632     44 43 3E 3A 
15636     39 37 30 28 
1563a     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
1563e     16 19 1B 1C 
15642     20 28 2E 33 
15646     30 2A 24 1E 
1564a     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
1564e     FE FA FA FA 
15652     FF 06 0E 10 
15656     16 16 15 13 
1565a     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
1565e     01 F8 F2 ED 
15662     EC EB EE F1 
15666     F4 FD 06 12 
1566a     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
1566e     30 30 2B 26 
15672     1C 18 14 13 
15676     0E 0F 19 21 
1567a     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
1567e     32 32 2D 26 
15682     1C 14 0C 04 
15686     FD F4 F1 EE 
1568a     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
1568e     C4 CA CF D4 
15692     D9 DB DE E1 
15696     E0 DC D5 CC 
1569a     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
1569e     C3 C8 CA CE 
156a2     D0 D6 E0 EC 
156a6     F6 FD 02 07 
156aa     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
156ae     10 0D 12 15 
156b2     19 22 2E 36 
156b6     3C 42 42 46 
156ba     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
156be     34 2C 26 21 
156c2     20 1F 18 13 
156c6     16 1C 22 27 
156ca     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
156ce     28 21 1C 16 
156d2     0F 09 00 FC 
156d6     FC FF FF 06 
156da     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
156de     15 15 14 13 
156e2     0E 07 00 FA 
156e6     F3 F1 F0 ED 
156ea     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
156ee     FF 0A 14 1E 
156f2     26 2D 2C 2C 
156f6     2B 26 21 1C 
156fa     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
156fe     1B 1F 28 31 
15702     33 38 3D 32 
15706     32 30 28 21 
1570a     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
1570e     07 00 ED DF 
15712     D6 D2 D4 D4 
15716     D5 DB DF E2 
1571a     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
1571e     DA D2 C8 C4 
15722     C3 C9 C8 C9 
15726     C7 C9 CD D4 
1572a     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
1572e     FA 02 06 08 
15732     0C 0A 07 07 
15736     08 08 12 16 
1573a     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
1573e     36 36 37 38 
15742     34 2C 27 22 
15746     21 1C 13 0C 
1574a     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
1574e     16 18 1E 26 
15752     21 20 21 1F 
15756     1A 15 0C 07 
1575a     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
1575e     FF 09 10 16 
15762     19 1B 1F 20 
15766     22 1F 18 0F 
1576a     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
1576e     FC F9 F7 F4 
15772     FA FF 07 12 
15776     1E 26 2D 32 
1577a     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
1577e     26 1E 1A 13 
15782     14 12 15 1E 
15786     26 2C 31 32 
1578a     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
1578e     21 1C 16 15 
15792     13 09 00 F7 
15796     EB E1 D8 D0 
1579a     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
1579e     D8 DB E0 E7 
157a2     E4 DC DA CE 
157a6     CD CA C7 C6 
157aa     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
157ae     CC D4 D9 E2 
157b2     EB F3 FE 06 
157b6     0C 0D 0E 0D 
157ba     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
157be     18 22 26 2A 
157c2     2E 37 3C 42 
157c6     3F 39 3A 39 
157ca     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
157ce     19 13 0E 0D 
157d2     0E 13 14 15 
157d6     15 15 18 1C 
157da     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
157de     03 FC F2 EA 
157e2     E8 EB F1 F6 
157e6     F8 FA 01 08 
157ea     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
157ee     0E 0A 07 06 
157f2     00 F7 F4 F3 
157f6     F0 F0 F6 FF 
157fa     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
157fe     25 33 39 3E 
15802     3E 39 34 2E 
15806     26 1A 19 19 
1580a     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
1580e     37 3D 40 3E 
15812     36 31 2C 27 
15816     24 1F 1A 15 
1581a     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
1581e     E2 DC D5 D2 
15822     D0 D4 DE E2 
15826     E4 E7 E7 E1 
1582a     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
1582e     CE CC CC C8 
15832     C9 CA CF CF 
15836     D6 DE E7 EC 
1583a     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
1583e     0D 0C 08 09 
15842     0D 10 13 15 
15846     1A 24 2D 32 
1584a     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
1584e     3C 39 36 32 
15852     28 20 18 13 
15856     13 10 13 12 
1585a     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
1585e     18 1B 16 18 
15862     13 10 09 00 
15866     F9 F3 F2 F1 
1586a     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
1586e     03 0A 12 13 
15872     15 15 13 0E 
15876     0C 09 04 FC 
1587a     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
1587e     F4 F6 FD 03 
15882     0A 16 20 2A 
15886     33 3A 3C 3C 
1588a     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
1588e     18 13 13 1A 
15892     1F 2A 33 39 
15896     3A 3A 36 33 
1589a     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
1589e     1C 18 0C 02 
158a2     00 F0 E4 D5 
158a6     D2 CC CC D0 
158aa     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
158ae     E1 E4 DC DB 
158b2     DA D3 CD CE 
158b6     CC CC C8 C9 
158ba     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
158be     E6 EC F9 FF 
158c2     07 09 08 0E 
158c6     0F 0E 10 13 
158ca     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
158ce     2E 32 36 3D 
158d2     3F 3F 42 40 
158d6     3E 36 2B 26 
158da     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
158de     14 18 18 1A 
158e2     1E 1E 1F 22 
158e6     22 21 1A 14 
158ea     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
158ee     F8 F7 F7 F4 
158f2     F7 FC FF 07 
158f6     0C 0D 13 13 
158fa     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
158fe     00 F9 F3 EE 
15902     ED EC F0 F0 
15906     F4 F9 FF 07 
1590a     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
1590e     36 32 30 2C 
15912     26 1C 13 0F 
15916     0F 16 1C 25 
1591a     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
1591e     38 34 33 31 
15922     2B 27 21 1C 
15926     18 0E 01 F9 
1592a     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
1592e     D2 D8 DA DA 
15932     E0 E1 E5 E2 
15936     E0 DC DA D4 
1593a     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
1593e     C4 C8 CA CF 
15942     D3 D8 DE E6 
15946     EC F6 FE FE 
1594a     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
1594e     0D 0C 0F 16 
15952     16 1B 25 2B 
15956     2E 36 3C 40 
1595a     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
1595e     2D 26 1E 18 
15962     0F 0C 0C 0F 
15966     0E 0E 14 18 
1596a     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
1596e     18 13 0F 0E 
15972     09 07 01 F9 
15976     F7 F8 FA FF 
1597a     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
1597e     1B 21 26 20 
15982     1E 14 13 09 
15986     02 00 FE FA 
1598a     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
1598e     03 0F 1B 24 
15992     2E 36 36 40 
15996     39 32 2B 21 
1599a     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
1599e     15 20 28 2E 
159a2     34 39 37 36 
159a6     31 27 26 27 
159aa     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
159ae     06 F9 ED E1 
159b2     DA CF CF C8 
159b6     CF D6 DB DC 
159ba     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
159be     D2 CE CA C7 
159c2     C1 C0 C1 C2 
159c6     C3 CA CC D8 
159ca     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
159ce     FA 08 09 09 
159d2     0F 14 14 19 
159d6     16 19 24 28 
159da     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
159de     49 4F 4C 48 
159e2     4C 45 39 32 
159e6     2B 1F 1C 13 
159ea     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
159ee     10 13 14 16 
159f2     14 10 0C 0A 
159f6     09 04 00 F9 
159fa     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
159fe     E8 E8 F1 F9 
15a02     FC 07 12 15 
15a06     18 19 13 0C 
15a0a     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
15a0e     FD F9 F9 F9 
15a12     F7 FA 03 09 
15a16     12 1B 27 31 
15a1a     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
15a1e     34 2B 1F 1A 
15a22     19 19 1C 22 
15a26     2A 2E 38 3F 
15a2a     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
15a2e     31 2E 2B 28 
15a32     26 18 0D 04 
15a36     F9 ED E2 DA 
15a3a     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
15a3e     DC DE DF E1 
15a42     DC D9 D8 D0 
15a46     C8 C8 C2 BB 
15a4a     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
15a4e     C4 C6 CE D9 
15a52     E2 EB F1 F8 
15a56     FD 06 04 FF 
15a5a     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
15a5e     13 15 1E 24 
15a62     2C 32 38 42 
15a66     49 4C 4C 48 
15a6a     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
15a6e     21 1E 19 14 
15a72     16 1B 1A 1F 
15a76     21 1C 1B 1E 
15a7a     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
15a7e     0C 07 00 F8 
15a82     F4 F2 F1 ED 
15a86     F0 F6 F9 FF 
15a8a     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
15a8e     15 0E 09 04 
15a92     00 FC F9 F7 
15a96     F2 F7 F6 F8 
15a9a     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
15a9e     1E 2A 37 3D 
15aa2     3D 39 31 2D 
15aa6     26 19 19 16 
15aaa     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
15aae     2E 33 37 2E 
15ab2     30 34 32 31 
15ab6     31 26 21 1C 
15aba     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
15abe     E2 DB D4 D3 
15ac2     D4 D8 D8 DE 
15ac6     E2 E1 E0 E1 
15aca     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
15ace     C6 C4 C2 C1 
15ad2     C0 BE C3 C9 
15ad6     CF D5 D9 E7 
15ada     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
15ade     03 09 08 0D 
15ae2     0E 0F 15 18 
15ae6     1A 21 28 2C 
15aea     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
15aee     46 48 45 3F 
15af2     3A 32 26 1A 
15af6     15 10 14 16 
15afa     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
15afe     1A 18 18 13 
15b02     0D 09 03 00 
15b06     00 FA F2 EE 
15b0a     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
15b0e     F1 FC 03 0E 
15b12     0D 12 14 13 
15b16     0C 0A 06 04 
15b1a     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
15b1e     F8 F8 F9 FF 
15b22     08 12 20 27 
15b26     2E 3A 3E 39 
15b2a     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
15b2e     20 1A 18 1A 
15b32     24 28 2E 33 
15b36     36 39 3A 39 
15b3a     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
15b3e     2C 28 1F 13 
15b42     04 F7 EA E2 
15b46     DA D4 D3 D5 
15b4a     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
15b4e     DE DE DF D5 
15b52     CE CE C9 BD 
15b56     BA B7 B7 B7 
15b5a     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
15b5e     D6 DE E6 EE 
15b62     F2 F8 FF 01 
15b66     04 0A 0D 0E 
15b6a     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
15b6e     21 2A 33 3D 
15b72     42 46 49 4C 
15b76     4C 4A 40 34 
15b7a     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
15b7e     19 1A 1A 1A 
15b82     1B 1C 21 1F 
15b86     1C 15 13 12 
15b8a     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
15b8e     01 F8 F4 EE 
15b92     EE F2 F4 FA 
15b96     03 0E 10 14 
15b9a     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
15b9e     09 00 FD F9 
15ba2     F3 F1 F2 F0 
15ba6     F1 F8 FA 03 
15baa     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
15bae     33 34 34 30 
15bb2     27 21 1B 19 
15bb6     18 16 1B 21 
15bba     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
15bbe     38 3A 39 37 
15bc2     38 37 30 2A 
15bc6     26 1C 10 01 
15bca     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
15bce     D6 D3 D2 D5 
15bd2     D9 DE DE DF 
15bd6     E1 DC D6 D2 
15bda     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
15bde     BB BA BA BE 
15be2     C3 C9 D4 DE 
15be6     E6 F1 F6 FA 
15bea     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
15bee     0E 13 13 15 
15bf2     18 1C 21 2A 
15bf6     2B 31 3C 42 
15bfa     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
15bfe     44 39 30 27 
15c02     22 1F 19 14 
15c06     15 15 19 1A 
15c0a     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
15c0e     0C 0D 0C 0A 
15c12     07 00 F9 F3 
15c16     F2 EB E6 EB 
15c1a     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
15c1e     08 12 14 14 
15c22     15 13 0F 0A 
15c26     04 00 FD FA 
15c2a     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
15c2e     FF 0A 14 1F 
15c32     2A 33 38 3C 
15c36     39 36 34 2B 
15c3a     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
15c3e     1C 20 26 2A 
15c42     2D 31 33 37 
15c46     3A 36 39 36 
15c4a     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
15c4e     13 04 F9 ED 
15c52     E0 DC DA D0 
15c56     D2 D4 D4 DC 
15c5a     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
15c5e     D8 D9 D3 CC 
15c62     C7 C0 BD B8 
15c66     B6 B8 BE C1 
15c6a     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
15c6e     F1 F8 FA FF 
15c72     07 07 0A 0D 
15c76     10 16 1A 1B 
15c7a     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
15c7e     36 3D 45 4B 
15c82     4C 49 45 3D 
15c86     36 30 26 21 
15c8a     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
15c8e     1A 18 18 13 
15c92     10 0F 0F 0C 
15c96     0D 0A 07 03 
15c9a     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
15c9e     EC EC EC F3 
15ca2     FA FF 09 0C 
15ca6     14 1A 19 18 
15caa     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
15cae     02 FE FA F8 
15cb2     F8 F9 FF 07 
15cb6     0F 1A 20 2C 
15cba     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
15cbe     31 2B 26 1E 
15cc2     1A 18 19 1A 
15cc6     1B 1F 27 2B 
15cca     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
15cce     36 34 34 33 
15cd2     2B 26 15 07 
15cd6     FC F2 E8 E0 
15cda     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
15cde     D8 D9 DB E0 
15ce2     DE DC DE DA 
15ce6     D8 D4 CE C7 
15cea     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
15cee     BE C3 CE D5 
15cf2     DE E6 F0 F8 
15cf6     FD 01 07 0C 
15cfa     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
15cfe     1B 20 20 22 
15d02     27 2D 37 3E 
15d06     46 4A 4E 4E 
15d0a     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
15d0e     2B 26 1C 19 
15d12     1A 1A 18 13 
15d16     13 10 0E 0C 
15d1a     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
15d1e     04 00 FA F7 
15d22     F0 E8 E4 E4 
15d26     E6 EA EC F6 
15d2a     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
15d2e     10 12 13 0E 
15d32     0C 07 02 01 
15d36     FC FA F9 F8 
15d3a     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
15d3e     1B 25 2E 33 
15d42     3A 39 33 31 
15d46     2D 27 21 1A 
15d4a     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
15d4e     25 2A 2D 30 
15d52     34 36 37 3D 
15d56     3F 39 32 28 
15d5a     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
15d5e     F0 E6 DE D5 
15d62     D4 D3 D3 D9 
15d66     D9 D9 D9 DB 
15d6a     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
15d6e     CA C4 BD B8 
15d72     B6 B6 B6 BB 
15d76     C1 CC D4 DB 
15d7a     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
15d7e     FD 02 06 0C 
15d82     10 12 15 18 
15d86     19 1A 20 25 
15d8a     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
15d8e     4C 4E 50 4C 
15d92     40 36 32 2D 
15d96     26 22 21 20 
15d9a     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
15d9e     18 16 15 13 
15da2     10 0E 0E 09 
15da6     02 FD FC F4 
15daa     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
15dae     F6 FA FF 0A 
15db2     0F 15 18 1A 
15db6     18 16 10 0C 
15dba     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
15dbe     F8 FC FF 02 
15dc2     07 0E 19 22 
15dc6     2A 31 33 37 
15dca     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
15dce     1C 19 18 14 
15dd2     16 1B 21 24 
15dd6     22 25 28 31 
15dda     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
15dde     31 2B 26 15 
15de2     09 01 F7 E8 
15de6     DF D8 D8 D6 
15dea     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
15dee     DE DF DF DF 
15df2     DB D8 D3 CC 
15df6     C4 C0 BC B7 
15dfa     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
15dfe     D3 DB E2 EB 
15e02     F1 F6 FA FF 
15e06     06 09 0C 12 
15e0a     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
15e0e     20 26 2A 30 
15e12     3A 44 46 49 
15e16     4C 48 40 39 
15e1a     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
15e1e     1E 19 16 15 
15e22     14 14 10 0D 
15e26     0E 0C 09 07 
15e2a     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
15e2e     F4 EE EC E8 
15e32     E7 EB F1 F4 
15e36     FA 03 0D 14 
15e3a     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
15e3e     19 15 0F 09 
15e42     06 03 03 01 
15e46     01 07 0D 16 
15e4a     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
15e4e     39 3C 3A 39 
15e52     36 2D 26 1E 
15e56     1B 1E 1F 1F 
15e5a     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
15e5e     28 2C 31 34 
15e62     36 36 32 2E 
15e66     2B 21 13 04 
15e6a     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
15e6e     DB D6 D4 D5 
15e72     D5 D6 D9 DB 
15e76     DA DB DB DA 
15e7a     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
15e7e     B8 B6 B4 B5 
15e82     BC C3 C9 D2 
15e86     D9 E2 EA EC 
15e8a     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
15e8e     08 0D 10 12 
15e92     14 18 1A 1F 
15e96     26 2D 38 42 
15e9a     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
15e9e     44 3E 3A 34 
15ea2     30 26 21 1F 
15ea6     19 18 16 18 
15eaa     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
15eae     0C 0A 08 07 
15eb2     02 FC F4 F1 
15eb6     ED EB E8 E5 
15eba     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
15ebe     06 0D 10 1A 
15ec2     1C 1C 16 16 
15ec6     13 0E 07 02 
15eca     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
15ece     06 0D 16 1E 
15ed2     26 2D 33 39 
15ed6     3C 34 30 2A 
15eda     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
15ede     1E 19 19 18 
15ee2     19 1E 25 2A 
15ee6     30 34 37 39 
15eea     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
15eee     1C 0E 04 F9 
15ef2     F2 ED E6 DF 
15ef6     DB DA DB D9 
15efa     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
15efe     E4 DF DC DA 
15f02     D0 C4 BE BA 
15f06     B8 B5 BA BE 
15f0a     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
15f0e     E5 E7 EE F3 
15f12     F9 FF 02 06 
15f16     08 0A 0C 10 
15f1a     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
15f1e     2C 36 3F 43 
15f22     44 46 43 3E 
15f26     39 32 28 26 
15f2a     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
15f2e     16 18 13 0F 
15f32     0D 0F 0E 0E 
15f36     0A 06 03 FF 
15f3a     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
15f3e     E8 EA EA EC 
15f42     F3 FA 03 0A 
15f46     10 18 1C 20 
15f4a     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
15f4e     0D 09 09 04 
15f52     04 07 09 0E 
15f56     14 1A 24 2D 
15f5a     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
15f5e     34 31 30 28 
15f62     26 24 1F 1A 
15f66     18 16 19 1B 
15f6a     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
15f6e     33 36 38 38 
15f72     32 27 21 15 
15f76     09 00 F4 ED 
15f7a     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
15f7e     D9 DB DA DE 
15f82     E2 E6 E7 E5 
15f86     E0 DF D5 CE 
15f8a     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
15f8e     BE C2 C8 CE 
15f92     D5 D9 E0 E6 
15f96     EE F6 FA FF 
15f9a     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
15f9e     0F 0F 10 15 
15fa2     19 24 2C 32 
15fa6     38 3F 44 44 
15faa     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
15fae     32 2B 24 1F 
15fb2     1C 19 16 15 
15fb6     13 10 10 10 
15fba     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
15fbe     04 00 FC F7 
15fc2     F0 E8 E4 E5 
15fc6     E4 E6 ED F2 
15fca     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
15fce     14 1A 19 18 
15fd2     19 13 0E 0C 
15fd6     07 04 04 03 
15fda     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
15fde     20 27 2D 31 
15fe2     34 36 32 32 
15fe6     30 30 28 26 
15fea     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
15fee     18 19 1B 1E 
15ff2     24 2A 31 36 
15ff6     3A 3C 36 31 
15ffa     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
15ffe     00 F4 ED E6 
16002     E1 DE DC DC 
16006     DF E0 E2 E6 
1600a     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
1600e     DB D5 CD C7 
16012     C1 BE BC C1 
16016     C6 C9 D0 D6 
1601a     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
1601e     F6 FF 06 08 
16022     09 09 0A 0C 
16026     10 12 16 1E 
1602a     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
1602e     3F 42 45 44 
16032     40 3C 39 30 
16036     28 26 21 1B 
1603a     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
1603e     13 13 10 0E 
16042     0D 09 09 03 
16046     00 FC F3 ED 
1604a     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
1604e     EB F1 F7 FE 
16052     06 0C 12 16 
16056     1A 1B 18 15 
1605a     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
1605e     03 03 03 03 
16062     08 10 1B 24 
16066     28 2D 32 32 
1606a     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
1606e     2B 26 21 1C 
16072     18 15 14 13 
16076     14 19 1E 24 
1607a     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
1607e     30 2B 26 1A 
16082     13 06 00 F2 
16086     E8 E1 DC D8 
1608a     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
1608e     DC E0 E1 E2 
16092     E0 DE DA D3 
16096     CA C3 BE BC 
1609a     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
1609e     C9 CF D6 DA 
160a2     E2 EC F3 FA 
160a6     FF 04 08 08 
160aa     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
160ae     15 1B 25 2A 
160b2     31 37 3D 42 
160b6     46 45 43 3F 
160ba     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
160be     26 20 1C 1C 
160c2     18 18 19 18 
160c6     13 0F 10 10 
160ca     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
160ce     F9 F3 EE EA 
160d2     E8 EA EB EE 
160d6     F3 FA 03 0C 
160da     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
160de     19 16 15 14 
160e2     10 0C 04 03 
160e6     02 04 09 12 
160ea     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
160ee     30 33 36 36 
160f2     36 34 30 2D 
160f6     27 24 1F 1B 
160fa     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
160fe     1F 25 2C 34 
16102     38 39 39 34 
16106     2E 26 1C 13 
1610a     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
1610e     E5 DE DA D9 
16112     DA DB DE E1 
16116     E5 E8 E7 E5 
1611a     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
1611e     C7 C2 BE BE 
16122     C0 C2 C7 CD 
16126     D2 D8 DE E8 
1612a     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
1612e     03 06 04 06 
16132     08 0D 10 15 
16136     1A 21 2A 31 
1613a     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
1613e     3E 3C 39 36 
16142     32 2B 26 20 
16146     1C 1A 1A 16 
1614a     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
1614e     13 0F 0D 0C 
16152     09 00 FC F7 
16156     F2 F0 EC EA 
1615a     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
1615e     FF 09 0F 14 
16162     18 1A 1E 1B 
16166     1B 1A 15 13 
1616a     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
1616e     0C 10 15 1B 
16172     22 2B 2D 32 
16176     38 38 36 37 
1617a     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
1617e     20 1A 15 13 
16182     10 13 19 20 
16186     27 2D 31 32 
1618a     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
1618e     21 18 0F 04 
16192     FC F0 E6 E1 
16196     DB D6 D8 D9 
1619a     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
1619e     E6 E4 DF DB 
161a2     D5 CE CC C7 
161a6     C2 C0 C1 C1 
161aa     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
161ae     D9 E2 EC F3 
161b2     F8 FC FE FF 
161b6     02 03 03 08 
161ba     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
161be     22 2A 32 36 
161c2     3A 3C 3E 3D 
161c6     3C 37 31 2B 
161ca     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
161ce     16 14 14 13 
161d2     0F 0F 12 13 
161d6     0D 09 07 02 
161da     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
161de     EA E7 E7 EC 
161e2     F1 F6 FC 03 
161e6     0A 0D 13 16 
161ea     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
161ee     15 13 0C 0A 
161f2     09 07 09 0E 
161f6     14 19 1F 26 
161fa     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
161fe     36 34 37 34 
16202     30 2B 26 1E 
16206     18 13 13 14 
1620a     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
1620e     2E 31 33 31 
16212     30 2D 26 1E 
16216     13 0C 02 F8 
1621a     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
1621e     DB DE E2 E5 
16222     E7 E8 E7 E8 
16226     E5 DF DA D5 
1622a     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
1622e     C6 C8 C7 C8 
16232     CD D3 D9 E4 
16236     EC F1 F8 FD 
1623a     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
1623e     03 08 0A 0E 
16242     14 1B 24 27 
16246     2C 32 36 3C 
1624a     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
1624e     30 2B 26 20 
16252     1F 1C 18 13 
16256     12 0F 0F 0F 
1625a     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
1625e     06 02 FE F8 
16262     F1 ED E8 E6 
16266     E6 EA EE F3 
1626a     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
1626e     12 18 1A 1B 
16272     1E 1A 16 13 
16276     0E 0D 0D 0D 
1627a     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
1627e     20 26 2B 2E 
16282     34 36 36 37 
16286     39 38 33 2D 
1628a     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
1628e     13 14 19 1E 
16292     21 25 2A 2E 
16296     30 30 2D 28 
1629a     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
1629e     03 F9 F0 E6 
162a2     DF DB D9 DA 
162a6     D9 DC E1 E5 
162aa     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
162ae     DC D5 D3 CD 
162b2     CA C9 C7 C3 
162b6     C4 C8 CE D3 
162ba     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
162be     F6 FA FF 03 
162c2     03 06 06 04 
162c6     0C 12 14 18 
162ca     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
162ce     34 38 3C 3D 
162d2     3A 39 33 2E 
162d6     2D 26 1F 1C 
162da     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
162de     13 13 0F 0D 
162e2     0D 0A 07 01 
162e6     00 FA F4 F0 
162ea     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
162ee     E8 ED F3 F6 
162f2     FD 01 0C 0F 
162f6     15 19 1A 19 
162fa     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
162fe     0C 0A 0D 0D 
16302     10 15 19 21 
16306     28 2B 2D 32 
1630a     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
1630e     33 30 28 20 
16312     18 16 13 12 
16316     00 00 0D 08 
1631a     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
1631e     16 18 1E 18 
16322     1C 1A 1F 18 
16326     12 19 14 13 
1632a     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
1632e     15 13 0D 14 
16332     1C 1E 1B 18 
16336     18 1F 13 16 
1633a     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
1633e     F3 F2 EB F1 
16342     EA F7 F2 F6 
16346     F0 F7 F2 F7 
1634a     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
1634e     E8 D8 DC DF 
16352     DF D3 DB E6 
16356     E8 E4 DE EB 
1635a     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
1635e     F7 F7 F8 00 
16362     00 FE 07 01 
16366     01 06 15 1C 
1636a     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
1636e     1A 21 1E 1F 
16372     10 14 12 0E 
16376     08 13 18 0C 
1637a     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
1637e     09 08 0A 08 
16382     00 03 00 FA 
16386     F4 FC FA F8 
1638a     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
1638e     00 0C 0D 0D 
16392     0F 13 14 0E 
16396     10 18 12 0E 
1639a     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
1639e     19 15 0E 13 
163a2     14 1A 14 1C 
163a6     20 22 21 26 
163aa     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
163ae     14 10 07 06 
163b2     00 00 F3 1A 
163b6     F7 2A EB 2A 
163ba     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
163be     10 3E 30 2A 
163c2     00 13 1A 0E 
163c6     F3 E6 DB FC 
163ca     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
163ce     CE D5 F7 D6 
163d2     C7 C9 CE D5 
163d6     D6 C7 BB D8 
163da     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
163de     D0 D2 E4 D6 
163e2     CC FC CC C7 
163e6     B5 D5 00 EB 
163ea     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
163ee     1E 1E 2A 4A 
163f2     3E 4A 37 48 
163f6     54 2A 21 37 
163fa     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
163fe     2C 2A 0C 09 
16402     25 1A FE 0E 
16406     1A FC 00 09 
1640a     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
1640e     E1 EB EC DF 
16412     BD B0 00 EC 
16416     EC E6 00 2A 
1641a     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
1641e     10 2A 1F 0F 
16422     13 2A F7 EB 
16426     F7 EB 00 06 
1642a     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
1642e     0E 13 09 F8 
16432     13 12 F7 F2 
16436     F4 F7 EA FC 
1643a     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
1643e     E1 D8 CC 09 
16442     EB EC FC 00 
16446     25 1F 2A 00 
1644a     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
1644e     F7 2A 18 F2 
16452     F1 F7 FC 00 
16456     09 06 0D 09 
1645a     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
1645e     DE F3 F2 E2 
16462     ED F1 EC F3 
16466     00 EC F7 00 
1646a     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
1646e     EC E2 E0 E1 
16472     00 2A 2A 3F 
16476     1F 1C 39 3F 
1647a     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
1647e     00 0E 01 00 
16482     FE 07 1A 0E 
16486     00 F2 00 0E 
1648a     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
1648e     E2 EE FF E7 
16492     D9 F6 C8 F0 
16496     E4 C1 D5 B6 
1649a     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
1649e     EB 13 1A 46 
164a2     40 2E 24 3F 
164a6     44 20 34 39 
164aa     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
164ae     14 21 2A 34 
164b2     39 32 2A 3E 
164b6     30 0D 19 2C 
164ba     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
164be     1A 10 1A 09 
164c2     15 14 F8 00 
164c6     EB F7 00 F7 
164ca     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
164ce     2A 1F 09 0D 
164d2     00 09 ED 09 
164d6     04 DB DA D6 
164da     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
164de     00 FA DF C6 
164e2     E8 D9 B0 C8 
164e6     DB D5 CF ED 
164ea     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
164ee     F3 00 E1 E0 
164f2     C6 D4 E0 D5 
164f6     D6 D6 00 1C 
164fa     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
164fe     2D 3E 34 2A 
16502     3E 34 07 12 
16506     1E 13 14 1A 
1650a     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
1650e     00 18 00 EC 
16512     0E 08 00 09 
16516     13 1A 00 09 
1651a     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
1651e     EC DA E0 DE 
16522     DB E8 CC 00 
16526     1B 32 34 2A 
1652a     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
1652e     06 2A 14 FC 
16532     F7 00 06 09 
16536     0E 1C 2B 36 
1653a     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
1653e     FC 0D 0F FC 
16542     0D 1E 09 13 
16546     00 FD 13 14 
1654a     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
1654e     04 F7 F2 EB 
16552     1B 2A 2B 34 
16556     1C 1A 19 14 
1655a     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
1655e     D9 E8 F2 E6 
16562     EB F1 00 00 
16566     00 E4 F1 ED 
1656a     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
1656e     E0 E6 09 F7 
16572     04 EE E0 18 
16576     F4 EB E1 EB 
1657a     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
1657e     EB 0E 2B 3E 
16582     3F 3C 32 43 
16586     34 1A 2A 30 
1658a     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
1658e     00 03 0E 08 
16592     19 09 FE 03 
16596     00 E0 EB FE 
1659a     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
1659e     00 F2 E6 D5 
165a2     F2 E1 E1 CC 
165a6     D0 E6 E0 F2 
165aa     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
165ae     3E 34 30 2B 
165b2     3C 2A 03 31 
165b6     30 0A 06 12 
165ba     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
165be     2E 3E 2A 27 
165c2     3C 14 13 13 
165c6     14 14 01 27 
165ca     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
165ce     0E 14 09 F7 
165d2     EC 00 04 0E 
165d6     00 ED 00 1C 
165da     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
165de     19 18 00 FC 
165e2     0E 00 EC E4 
165e6     E6 E0 E4 EB 
165ea     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
165ee     E0 F2 CE C1 
165f2     D5 D0 D6 D5 
165f6     EC EB EB EC 
165fa     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
165fe     D9 D0 EB DE 
16602     F9 DB DB 00 
16606     0E 32 3C 3D 
1660a     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
1660e     2A 43 30 1A 
16612     13 0E 14 0E 
16616     19 18 2A 21 
1661a     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
1661e     FC 01 09 EE 
16622     10 00 00 0E 
16626     F2 E6 F2 F2 
1662a     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
1662e     EB F2 DE E0 
16632     00 13 31 37 
16636     2A 25 34 2A 
1663a     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
1663e     00 09 08 04 
16642     09 1F 24 2D 
16646     2C 13 30 21 
1664a     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
1664e     00 09 14 09 
16652     15 F2 06 03 
16656     00 FC E1 00 
1665a     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
1665e     F7 00 19 21 
16662     30 1A 0A 22 
16666     09 F3 09 09 
1666a     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
1666e     EC F7 F6 00 
16672     01 00 F1 F2 
16676     EC D2 D9 EB 
1667a     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
1667e     F7 00 E4 F1 
16682     F0 F0 EC D5 
16686     EC EB FD EE 
1668a     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
1668e     34 34 30 34 
16692     48 2A 1E 38 
16696     39 1A 14 18 
1669a     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
1669e     1B 2B 04 0F 
166a2     18 00 00 F3 
166a6     0E FC FC 00 
166aa     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
166ae     EC E8 EB D6 
166b2     D5 D9 E8 F7 
166b6     E1 DB EE 09 
166ba     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
166be     2A 34 0E 13 
166c2     27 2A 0D 09 
166c6     0E 09 0E 12 
166ca     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
166ce     26 30 0E 09 
166d2     24 14 09 13 
166d6     18 09 1F 00 
166da     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
166de     EC 00 FE 06 
166e2     0D EC F7 F7 
166e6     0D 22 28 1F 
166ea     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
166ee     FA 0E 00 ED 
166f2     E8 F7 E4 ED 
166f6     F3 F1 0A F3 
166fa     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
166fe     CC E2 E1 DB 
16702     EB E1 F7 00 
16706     E2 E6 EC F1 
1670a     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
1670e     F7 F7 DB E4 
16712     FC 0E 26 36 
16716     2A 24 44 2A 
1671a     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
1671e     14 13 14 0E 
16722     04 14 13 26 
16726     10 01 1F 09 
1672a     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
1672e     F7 09 F8 12 
16732     00 E7 F3 E4 
16736     FA DB D5 E1 
1673a     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
1673e     EB FE 13 2A 
16742     37 21 24 3F 
16746     21 10 26 2A 
1674a     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
1674e     14 19 18 2A 
16752     2A 2A 2A 2A 
16756     25 09 13 18 
1675a     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
1675e     1F 09 FE 04 
16762     00 09 F7 FA 
16766     FC FE 14 FC 
1676a     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
1676e     1E 1F 09 13 
16772     1A 00 F4 09 
16776     00 F7 EB F7 
1677a     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
1677e     00 00 DB F7 
16782     ED DF CC DF 
16786     E1 D2 EB E1 
1678a     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
1678e     DA F1 EC DE 
16792     E0 DB F7 F7 
16796     E6 E4 EB 00 
1679a     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
1679e     3E 39 1F 1E 
167a2     37 2B 14 22 
167a6     16 14 0E 0D 
167aa     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
167ae     13 13 00 FE 
167b2     09 01 FC 09 
167b6     FD 09 0D ED 
167ba     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
167be     D8 E6 DB FD 
167c2     F9 E8 EA F1 
167c6     02 1C 34 2A 
167ca     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
167ce     24 25 21 0C 
167d2     0F 15 09 1C 
167d6     0E 1B 3E 1F 
167da     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
167de     0E 1F 09 13 
167e2     14 0C 1E 14 
167e6     06 00 00 06 
167ea     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
167ee     10 04 F4 F2 
167f2     FC 00 10 25 
167f6     0D 10 1F 0E 
167fa     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
167fe     F7 F2 F9 EB 
16802     EC F7 00 04 
16806     ED F2 F7 EC 
1680a     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
1680e     F0 EA E8 06 
16812     ED F3 E1 F2 
16816     FA DF ED DE 
1681a     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
1681e     E8 F3 03 24 
16822     2C 1B 2E 3C 
16826     2A 1E 26 34 
1682a     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
1682e     14 0E 01 1C 
16832     14 06 03 0E 
16836     04 F2 00 00 
1683a     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
1683e     04 F6 EC E0 
16842     EA EC D5 D6 
16846     D3 EB FC ED 
1684a     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
1684e     26 2A 1C 2E 
16852     39 15 18 2A 
16856     2A 19 0C 1F 
1685a     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
1685e     3C 2B 25 2A 
16862     30 2A 0E 2A 
16866     14 1A 1C 0A 
1686a     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
1686e     00 13 00 00 
16872     FC FF 13 0D 
16876     00 F8 FC FD 
1687a     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
1687e     1E 14 00 FC 
16882     0F 00 F2 FC 
16886     EB EE F3 E7 
1688a     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
1688e     EB ED D6 D0 
16892     E1 D9 E0 E1 
16896     DB F8 ED EC 
1689a     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
1689e     E2 D8 DE F2 
168a2     F3 E6 E0 ED 
168a6     F3 0E 2A 1C 
168aa     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
168ae     24 30 2C 13 
168b2     1A 1A 10 14 
168b6     01 1E 1E 14 
168ba     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
168be     09 09 00 10 
168c2     00 00 09 0D 
168c6     FC E6 F7 F2 
168ca     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
168ce     00 F8 EE ED 
168d2     F7 FE 1E 25 
168d6     1F 2A 37 2A 
168da     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
168de     13 0F 10 0E 
168e2     0E 0E 27 2C 
168e6     1F 1E 26 2A 
168ea     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
168ee     1A 01 18 13 
168f2     0D 04 F3 09 
168f6     FE FD F7 F1 
168fa     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
168fe     F7 F6 FC 1A 
16902     1A 04 1C 1A 
16906     09 FC 01 0E 
1690a     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
1690e     FC EC F7 00 
16912     01 F2 EE FE 
16916     E1 DE EB E1 
1691a     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
1691e     FD 00 EC E8 
16922     F8 F0 F2 E1 
16926     E4 F7 FD F7 
1692a     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
1692e     24 21 1C 39 
16932     3E 1A 22 34 
16936     2A 1A 14 18 
1693a     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
1693e     19 14 08 03 
16942     14 F9 FC 04 
16946     F7 0E F3 FF 
1694a     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
1694e     E6 EB E0 DB 
16952     D0 D5 F0 F7 
16956     EC E2 F0 EB 
1695a     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
1695e     2A 30 1A 13 
16962     2B 1A 14 13 
16966     0D 13 14 13 
1696a     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
1696e     2A 2C 18 1E 
16972     25 13 2A 15 
16976     19 1F 1C 14 
1697a     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
1697e     01 F7 00 0E 
16982     10 00 FC F7 
16986     FC 0E 25 08 
1698a     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
1698e     00 09 00 F2 
16992     FA ED F8 EC 
16996     ED FC F7 F7 
1699a     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
1699e     E0 D6 E8 E4 
169a2     E0 EB ED FD 
169a6     EC DC EC E6 
169aa     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
169ae     F3 F6 E1 E8 
169b2     E1 F7 13 14 
169b6     1C 2A 34 2A 
169ba     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
169be     18 14 13 14 
169c2     09 09 1B 18 
169c6     14 09 1A 09 
169ca     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
169ce     06 01 0D 06 
169d2     09 F2 EB EE 
169d6     ED F0 DC E0 
169da     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
169de     F3 F1 FA 27 
169e2     1E 18 34 32 
169e6     25 13 27 27 
169ea     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
169ee     12 0D 19 21 
169f2     2E 1A 24 2A 
169f6     14 1E 14 13 
169fa     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
169fe     18 14 F9 00 
16a02     00 00 00 F2 
16a06     F1 00 0D 00 
16a0a     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
16a0e     0F 09 09 1C 
16a12     1A 00 00 04 
16a16     04 F4 F9 ED 
16a1a     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
16a1e     FC FC E8 F3 
16a22     F9 D9 F0 E1 
16a26     EB F3 E5 F6 
16a2a     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
16a2e     F1 ED F7 ED 
16a32     DE E8 F8 01 
16a36     F1 F2 F6 E6 
16a3a     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
16a3e     38 39 1C 24 
16a42     32 2A 1E 14 
16a46     13 13 09 09 
16a4a     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
16a4e     0E 09 FC 04 
16a52     FD 00 04 FE 
16a56     00 FE 07 EE 
16a5a     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
16a5e     DB D3 DB F1 
16a62     F2 F2 EB E6 
16a66     EB 09 1A 0E 
16a6a     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
16a6e     1E 2A 18 1C 
16a72     0E 13 1E 0D 
16a76     19 20 32 24 
16a7a     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
16a7e     21 1C 2A 1F 
16a82     1C 1C 22 2A 
16a86     0E 09 06 09 
16a8a     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
16a8e     1C 0E 04 07 
16a92     ED FE 13 14 
16a96     0C 18 26 09 
16a9a     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
16a9e     F9 F2 F3 F3 
16aa2     E7 F0 F7 F7 
16aa6     EC EB F7 D9 
16aaa     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
16aae     DF EA E6 FC 
16ab2     F7 E2 E5 E4 
16ab6     EA EC D6 D9 
16aba     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
16abe     EC E0 F7 19 
16ac2     0D 15 2A 37 
16ac6     22 19 2D 21 
16aca     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
16ace     0D 0C 08 1A 
16ad2     18 04 13 0E 
16ad6     08 0D 01 0D 
16ada     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
16ade     13 00 F4 F1 
16ae2     EA F2 EC E4 
16ae6     D9 F7 FF F3 
16aea     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
16aee     1A 18 19 34 
16af2     30 1F 19 2A 
16af6     1E 18 14 0E 
16afa     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
16afe     24 25 13 32 
16b02     1B 19 1F 13 
16b06     1E 18 18 0D 
16b0a     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
16b0e     00 FF 09 FA 
16b12     F2 F7 01 09 
16b16     00 01 ED E8 
16b1a     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
16b1e     1C 14 00 00 
16b22     00 FF FC F0 
16b26     F3 F2 F0 E8 
16b2a     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
16b2e     FC E6 EB E4 
16b32     E8 F3 EB F2 
16b36     F0 00 00 F2 
16b3a     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
16b3e     F7 DE EB 00 
16b42     00 00 F9 EC 
16b46     F7 13 1B 14 
16b4a     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
16b4e     2C 27 22 20 
16b52     0D 1C 0D 04 
16b56     04 0D 1C 00 
16b5a     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
16b5e     FC 00 01 00 
16b62     00 F6 03 00 
16b66     EC E8 DB EB 
16b6a     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
16b6e     F7 ED F8 F2 
16b72     DE F7 09 12 
16b76     0C 2A 34 1F 
16b7a     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
16b7e     18 0E 14 15 
16b82     09 16 24 2A 
16b86     1C 33 2A 26 
16b8a     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
16b8e     21 1A 16 26 
16b92     18 09 09 09 
16b96     04 10 00 F9 
16b9a     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
16b9e     04 F0 00 13 
16ba2     0A 09 1C 2A 
16ba6     04 03 04 00 
16baa     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
16bae     EE E8 E6 00 
16bb2     EC E6 FA E4 
16bb6     E6 DF DB E6 
16bba     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
16bbe     F8 EE EB E1 
16bc2     EC EB EC DE 
16bc6     D5 F4 F2 F6 
16bca     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
16bce     10 06 19 31 
16bd2     30 1C 22 2A 
16bd6     1E 25 10 14 
16bda     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
16bde     1F 07 09 14 
16be2     07 0F 00 06 
16be6     0E 0D 0D FD 
16bea     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
16bee     F1 ED F7 EC 
16bf2     E1 E0 F8 FD 
16bf6     FF 04 EC F3 
16bfa     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
16bfe     3C 30 21 26 
16c02     1F 24 1A 13 
16c06     10 14 0F 09 
16c0a     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
16c0e     2A 1E 21 14 
16c12     1E 1A 1C 14 
16c16     0D 13 14 0A 
16c1a     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
16c1e     00 EC FE 06 
16c22     06 0E 04 ED 
16c26     F1 09 01 00 
16c2a     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
16c2e     07 FD 06 F7 
16c32     EE F7 ED EE 
16c36     E4 FE F9 EB 
16c3a     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
16c3e     E0 EB EA F7 
16c42     EB EB 00 F8 
16c46     F2 F1 EE F8 
16c4a     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
16c4e     00 FD 07 F7 
16c52     ED F7 0E 0E 
16c56     12 2A 37 2A 
16c5a     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
16c5e     1C 10 14 0F 
16c62     04 00 1A 09 
16c66     03 0E 06 0E 
16c6a     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
16c6e     04 FC 00 04 
16c72     FD EC E8 E4 
16c76     E8 ED D9 DA 
16c7a     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
16c7e     EE E4 00 09 
16c82     0A 0E 2E 30 
16c86     1A 22 18 22 
16c8a     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
16c8e     15 09 13 26 
16c92     1A 24 2A 24 
16c96     2A 1A 1E 1C 
16c9a     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
16c9e     1A 14 08 00 
16ca2     08 09 0E FC 
16ca6     FC 0C 0C 13 
16caa     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
16cae     09 01 09 1C 
16cb2     1A 04 09 03 
16cb6     04 04 F4 F8 
16cba     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
16cbe     00 EC F7 EC 
16cc2     F2 EC DA E5 
16cc6     EA ED EC E0 
16cca     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
16cce     E4 E8 F1 EC 
16cd2     DB E0 F2 F1 
16cd6     00 FC E4 EB 
16cda     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
16cde     31 2A 24 1F 
16ce2     22 24 1A 18 
16ce6     12 10 09 FE 
16cea     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
16cee     08 0E 04 00 
16cf2     01 08 13 00 
16cf6     00 03 04 F7 
16cfa     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
16cfe     E6 DE E8 EC 
16d02     F8 02 00 E6 
16d06     F7 09 0A 0C 
16d0a     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
16d0e     22 1E 25 15 
16d12     19 14 1A 09 
16d16     09 25 1C 24 
16d1a     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
16d1e     1B 1E 1E 2A 
16d22     0E 12 1C 14 
16d26     09 00 FC 00 
16d2a     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
16d2e     01 09 0E 04 
16d32     F1 F7 09 00 
16d36     FE 13 14 09 
16d3a     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
16d3e     F7 F8 F4 F9 
16d42     E1 EB FD ED 
16d46     F7 F2 F1 F2 
16d4a     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
16d4e     F2 EE F3 01 
16d52     FC F2 F1 EB 
16d56     F7 F7 EC E6 
16d5a     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
16d5e     F2 EB FE 09 
16d62     04 09 34 2A 
16d66     26 28 21 27 
16d6a     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
16d6e     0E FA 09 09 
16d72     03 0D 00 0D 
16d76     06 00 03 FF 
16d7a     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
16d7e     01 FC ED E7 
16d82     E2 F0 E8 D6 
16d86     E4 E6 EB F7 
16d8a     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
16d8e     04 01 13 2C 
16d92     27 20 1F 1E 
16d96     26 18 18 13 
16d9a     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
16d9e     1C 22 2A 26 
16da2     2D 2A 25 25 
16da6     26 2A 21 1A 
16daa     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
16dae     02 08 0E 09 
16db2     FC 04 06 07 
16db6     18 0E 00 F8 
16dba     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
16dbe     19 0E 09 04 
16dc2     06 04 FA F7 
16dc6     F4 FC E6 E6 
16dca     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
16dce     ED ED E4 E8 
16dd2     DE F0 ED E8 
16dd6     EB F8 F8 F0 
16dda     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
16dde     EC E4 EA ED 
16de2     F1 00 F9 E6 
16de6     F3 00 04 00 
16dea     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
16dee     21 2B 22 1F 
16df2     14 1B 1C 00 
16df6     0C 10 06 10 
16dfa     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
16dfe     09 06 0D 0E 
16e02     01 06 0A 04 
16e06     FA F2 EA F1 
16e0a     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
16e0e     E8 F7 00 F9 
16e12     E7 F7 09 00 
16e16     09 24 2A 21 
16e1a     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
16e1e     15 0E 19 14 
16e22     04 13 14 1C 
16e26     1F 20 26 1F 
16e2a     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
16e2e     1A 13 18 1C 
16e32     14 0A 00 FF 
16e36     09 09 F7 F8 
16e3a     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
16e3e     00 F8 FC 09 
16e42     F7 09 16 14 
16e46     0C 01 04 04 
16e4a     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
16e4e     F2 E7 F7 ED 
16e52     F6 F2 EE F7 
16e56     ED F2 E6 EB 
16e5a     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
16e5e     00 FC F7 EE 
16e62     ED FE F3 E8 
16e66     F0 ED F4 FF 
16e6a     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
16e6e     04 00 13 2A 
16e72     25 27 1C 27 
16e76     21 1F 14 0E 
16e7a     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
16e7e     02 04 01 03 
16e82     00 03 00 FD 
16e86     00 04 FD FC 
16e8a     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
16e8e     E7 E6 F7 E8 
16e92     DC EB E4 F6 
16e96     00 FC F2 F1 
16e9a     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
16e9e     2B 2D 2A 27 
16ea2     25 27 21 0D 
16ea6     1C 1F 09 13 
16eaa     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
16eae     2A 21 2A 1F 
16eb2     18 24 20 15 
16eb6     16 21 1F 15 
16eba     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
16ebe     00 FD 00 00 
16ec2     08 18 09 F9 
16ec6     00 0F 00 00 
16eca     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
16ece     09 06 03 00 
16ed2     F1 FE F7 E8 
16ed6     F6 F0 F1 EE 
16eda     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
16ede     DE DB ED EC 
16ee2     E1 EB F8 FC 
16ee6     F3 EE E0 F3 
16eea     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
16eee     E8 FC 00 F9 
16ef2     E8 FC 07 F9 
16ef6     00 21 24 25 
16efa     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
16efe     14 0E 1E 09 
16f02     09 0C 06 0D 
16f06     04 0D 04 08 
16f0a     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
16f0e     04 F9 00 09 
16f12     06 FE EC EA 
16f16     F7 F7 E0 EC 
16f1a     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
16f1e     00 F0 09 0A 
16f22     00 13 26 30 
16f26     2A 26 2A 24 
16f2a     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
16f2e     0A 12 18 13 
16f32     1F 1A 21 1E 
16f36     21 21 0F 1A 
16f3a     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
16f3e     1C 14 0E FC 
16f42     FD 09 00 FE 
16f46     F8 F7 FE 09 
16f4a     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
16f4e     01 F8 0D 10 
16f52     0E 09 09 01 
16f56     03 01 F0 00 
16f5a     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
16f5e     FA F3 F3 F2 
16f62     F0 F2 EC E0 
16f66     EB F3 E8 EB 
16f6a     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
16f6e     EA EB FF ED 
16f72     ED F2 E5 F3 
16f76     00 07 F2 F7 
16f7a     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
16f7e     26 28 20 2A 
16f82     20 26 1F 09 
16f86     1E 0E 03 0A 
16f8a     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
16f8e     04 04 09 00 
16f92     FF 00 06 F9 
16f96     FD 06 01 00 
16f9a     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
16f9e     E4 DF E1 DB 
16fa2     EA FC 00 E8 
16fa6     F7 07 F7 06 
16faa     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
16fae     21 1C 26 14 
16fb2     0E 1C 10 0E 
16fb6     15 1C 21 1C 
16fba     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
16fbe     1C 1C 25 1F 
16fc2     18 19 21 1F 
16fc6     1F 0E FF 12 
16fca     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
16fce     00 04 19 0D 
16fd2     FD 09 09 00 
16fd6     03 0F 15 09 
16fda     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
16fde     EC F7 F9 E8 
16fe2     F1 EC F7 F2 
16fe6     F0 F3 EC F0 
16fea     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
16fee     EA E6 F1 FC 
16ff2     00 F8 EC EB 
16ff6     F4 F2 E6 EE 
16ffa     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
16ffe     F7 F1 09 00 
17002     FF 0E 1E 25 
17006     21 21 1F 24 
1700a     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
1700e     04 09 08 0F 
17012     09 09 0E 06 
17016     09 04 00 00 
1701a     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
1701e     08 09 01 EC 
17022     F4 FA F2 EA 
17026     E8 E7 E8 FC 
1702a     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
1702e     01 00 0E 22 
17032     20 1C 1F 14 
17036     24 14 09 13 
1703a     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
1703e     1B 19 24 22 
17042     21 22 21 19 
17046     21 1F 14 13 
1704a     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
1704e     FE 07 0C 00 
17052     00 FC FE 00 
17056     10 12 00 09 
1705a     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
1705e     14 0E 0A 04 
17062     FE 09 F9 F2 
17066     FC EE F3 EB 
1706a     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
1706e     F3 F3 F0 EC 
17072     EA F3 F3 E4 
17076     F6 FC 00 01 
1707a     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
1707e     ED EC E8 EC 
17082     F3 00 00 EB 
17086     00 04 FF 01 
1708a     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
1708e     14 19 1F 0E 
17092     0D 09 06 01 
17096     02 04 04 04 
1709a     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
1709e     00 00 06 04 
170a2     FC FF 09 08 
170a6     07 F2 ED F8 
170aa     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
170ae     E7 F7 06 F7 
170b2     F7 09 04 03 
170b6     09 21 27 24 
170ba     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
170be     14 1C 0E 13 
170c2     0E 13 1C 1A 
170c6     22 22 25 26 
170ca     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
170ce     15 18 19 1C 
170d2     22 18 04 02 
170d6     09 01 00 FC 
170da     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
170de     00 00 0D 00 
170e2     FD 00 0E 0D 
170e6     0E 09 FF 06 
170ea     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
170ee     ED E8 ED F4 
170f2     F0 F3 EE F0 
170f6     F2 E6 E8 EB 
170fa     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
170fe     F8 04 F8 EC 
17102     F3 F7 F2 ED 
17106     F0 E8 EB 00 
1710a     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
1710e     02 00 0E 21 
17112     1C 2B 1F 1E 
17116     2B 1B 19 14 
1711a     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
1711e     0D 0E 0A 09 
17122     09 10 03 00 
17126     0D 04 FF FF 
1712a     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
1712e     EB F7 EE EE 
17132     E7 E4 E4 E6 
17136     FF FC EB FE 
1713a     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
1713e     1C 1E 27 1A 
17142     1E 25 12 15 
17146     0E 0D 09 08 
1714a     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
1714e     1F 26 1F 1F 
17152     18 22 1B 0E 
17156     16 15 21 1F 
1715a     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
1715e     00 00 FF F8 
17162     00 16 09 00 
17166     09 0A 00 00 
1716a     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
1716e     06 0E 09 00 
17172     FE F7 F4 F2 
17176     F1 F7 F8 FA 
1717a     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
1717e     EC F1 F3 EE 
17182     E8 F3 F8 01 
17186     01 EC F3 F3 
1718a     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
1718e     E4 F4 02 EE 
17192     F4 FF FF FC 
17196     FE 13 13 21 
1719a     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
1719e     10 0A 06 04 
171a2     FC 00 01 08 
171a6     04 04 06 07 
171aa     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
171ae     FC FD 00 08 
171b2     0D 04 F1 F8 
171b6     FA F2 F2 ED 
171ba     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
171be     F1 F8 03 04 
171c2     00 09 1B 21 
171c6     2B 25 24 2C 
171ca     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
171ce     14 0A 14 19 
171d2     1F 26 1E 27 
171d6     2A 1F 1A 21 
171da     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
171de     1C 22 14 08 
171e2     08 09 06 00 
171e6     00 F7 F7 10 
171ea     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
171ee     01 F7 03 07 
171f2     0D 12 00 08 
171f6     04 FD F9 F2 
171fa     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
171fe     F3 F7 F7 F2 
17202     F3 F7 E6 E6 
17206     F0 EC EA ED 
1720a     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
1720e     F2 FA F7 F7 
17212     F1 F2 E6 EB 
17216     03 00 F8 01 
1721a     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
1721e     19 24 2A 1C 
17222     2B 22 1C 1A 
17226     14 10 04 07 
1722a     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
1722e     0A 0E 0D 00 
17232     FF 08 00 FF 
17236     FF 01 09 09 
1723a     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
1723e     EC E8 E7 D6 
17242     EB F7 EC F1 
17246     FA 01 F8 00 
1724a     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
1724e     1C 26 1F 1A 
17252     18 12 0E 0C 
17256     09 13 19 21 
1725a     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
1725e     1A 1E 21 18 
17262     15 19 15 26 
17266     1F 09 09 07 
1726a     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
1726e     ED 00 0D 00 
17272     03 08 09 FE 
17276     02 09 0C 19 
1727a     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
1727e     01 FC FE F2 
17282     F2 F3 F0 FE 
17286     F8 F9 F7 FD 
1728a     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
1728e     F0 ED F7 FC 
17292     07 00 F4 F7 
17296     F9 F2 F2 F3 
1729a     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
1729e     F3 F7 00 00 
172a2     F8 06 0A 16 
172a6     1F 16 21 21 
172aa     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
172ae     08 00 01 00 
172b2     09 0C 04 09 
172b6     09 01 FC 03 
172ba     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
172be     03 0E 00 F4 
172c2     F3 F2 EE E7 
172c6     EE DB E0 F8 
172ca     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
172ce     00 FF 0E 13 
172d2     2A 2A 21 2B 
172d6     2A 25 1C 1E 
172da     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
172de     19 21 27 20 
172e2     28 2B 21 1E 
172e6     21 20 18 1B 
172ea     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
172ee     09 09 03 00 
172f2     FE 00 F2 FC 
172f6     08 00 00 03 
172fa     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
172fe     03 13 09 04 
17302     0C 01 04 FC 
17306     FC F7 ED F2 
1730a     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
1730e     F2 F4 F8 E8 
17312     F0 F0 EC F0 
17316     ED F3 00 01 
1731a     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
1731e     EC F1 EC E2 
17322     F7 FA F8 F3 
17326     00 01 F8 00 
1732a     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
1732e     1E 26 22 1A 
17332     19 14 0E 08 
17336     04 03 06 10 
1733a     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
1733e     00 02 07 00 
17342     00 00 01 10 
17346     09 F9 F7 F4 
1734a     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
1734e     DB F3 F7 F2 
17352     F3 00 00 F7 
17356     06 08 1C 21 
1735a     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
1735e     1C 1C 19 0F 
17362     13 0D 0E 18 
17366     20 1E 1E 2A 
1736a     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
1736e     16 15 14 19 
17372     21 1A 09 06 
17376     09 00 00 00 
1737a     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
1737e     00 00 0D 00 
17382     FE 00 00 15 
17386     14 08 0E 0C 
1738a     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
1738e     F8 F7 F1 F2 
17392     FC FA F8 F7 
17396     00 F3 EE F6 
1739a     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
1739e     FE 03 FC F2 
173a2     F0 F3 E8 ED 
173a6     EE DE EB F7 
173aa     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
173ae     F7 FC FD 09 
173b2     19 18 1C 1A 
173b6     21 1A 14 13 
173ba     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
173be     00 08 06 01 
173c2     09 06 00 00 
173c6     04 FF FD FC 
173ca     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
173ce     F4 F4 F2 EA 
173d2     F0 EC DB E8 
173d6     F7 F4 F2 FE 
173da     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
173de     13 28 21 2A 
173e2     2B 2C 2A 21 
173e6     25 1C 1C 15 
173ea     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
173ee     24 2C 2B 1F 
173f2     26 25 1C 1C 
173f6     14 16 21 1B 
173fa     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
173fe     FA 03 F2 F1 
17402     FC 03 FF F8 
17406     08 00 FC FA 
1740a     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
1740e     07 0A 09 00 
17412     FF FA FA F3 
17416     F0 E8 F4 F8 
1741a     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
1741e     EB F2 F2 EB 
17422     EE EC F7 00 
17426     FD F7 F0 F3 
1742a     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
1742e     E4 F4 F9 F3 
17432     F7 04 FA FD 
17436     00 01 1C 1B 
1743a     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
1743e     1A 1E 14 14 
17442     0A 04 03 09 
17446     12 09 0C 10 
1744a     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
1744e     00 00 F9 00 
17452     08 04 F7 F4 
17456     F6 E6 EB EC 
1745a     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
1745e     EC F7 00 F8 
17462     FC FD 00 1A 
17466     1E 1E 27 27 
1746a     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
1746e     1A 18 0E 13 
17472     1C 1F 1E 24 
17476     2A 1F 21 26 
1747a     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
1747e     1C 1E 1A 07 
17482     07 04 FC 04 
17486     FC F0 FA 00 
1748a     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
1748e     00 00 F7 09 
17492     0E 0F 0F 0F 
17496     15 0D 09 04 
1749a     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
1749e     F6 00 FC FC 
174a2     00 FD F3 FA 
174a6     F7 F2 F7 F2 
174aa     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
174ae     F1 F7 EE EB 
174b2     F3 EC E2 EB 
174b6     F7 F7 F1 FF 
174ba     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
174be     09 13 14 1C 
174c2     1E 22 1B 1A 
174c6     13 0E 0C 01 
174ca     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
174ce     06 0D 09 00 
174d2     06 00 FE 00 
174d6     F3 FE 03 06 
174da     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
174de     F0 F2 E6 E2 
174e2     EB F7 EE F7 
174e6     00 FD 00 FC 
174ea     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
174ee     25 2D 30 2B 
174f2     25 26 20 1C 
174f6     18 10 1C 21 
174fa     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
174fe     20 25 1F 1C 
17502     1A 0E 15 1C 
17506     1B 0A 04 06 
1750a     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
1750e     F7 FD 06 FA 
17512     03 06 FE 01 
17516     F6 FD 09 09 
1751a     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
1751e     0A 07 00 01 
17522     FC F7 F1 FA 
17526     FC F7 FD FF 
1752a     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
1752e     F7 EE ED F8 
17532     00 00 F2 F7 
17536     F2 EB F7 F0 
1753a     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
1753e     F2 FE FC FC 
17542     FC F8 00 0F 
17546     15 1A 1E 24 
1754a     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
1754e     0E 0D 00 00 
17552     06 04 04 0C 
17556     0D 00 03 03 
1755a     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
1755e     00 04 01 F3 
17562     F8 EC EB F2 
17566     EC E4 E0 F6 
1756a     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
1756e     00 FC FC 09 
17572     19 21 21 2A 
17576     2B 2C 2A 26 
1757a     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
1757e     16 20 1C 1E 
17582     28 25 1F 25 
17586     1F 1C 1C 10 
1758a     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
1758e     08 09 FD 00 
17592     04 FC F7 F8 
17596     00 FD 00 04 
1759a     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
1759e     00 08 0E 0D 
175a2     0F 10 09 09 
175a6     01 00 FF F7 
175aa     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
175ae     F7 FE F4 F1 
175b2     F7 ED F2 EE 
175b6     E6 ED F8 00 
175ba     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
175be     F1 F2 EC DF 
175c2     F0 F4 ED F8 
175c6     F8 FC FE F7 
175ca     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
175ce     1E 21 25 21 
175d2     1E 19 14 12 
175d6     06 00 06 09 
175da     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
175de     08 09 00 02 
175e2     FD F7 FC 06 
175e6     07 F9 FD F7 
175ea     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
175ee     E4 F1 F2 EB 
175f2     FC F8 FE 00 
175f6     F7 00 0E 1C 
175fa     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
175fe     28 26 21 20 
17602     1B 14 10 1C 
17606     1B 18 24 26 
1760a     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
1760e     1C 14 0E 0F 
17612     1C 14 09 0D 
17616     00 FE 01 01 
1761a     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
1761e     FE 00 00 01 
17622     00 F4 FF 08 
17626     0D 0F 10 18 
1762a     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
1762e     02 00 F4 F6 
17632     FC F7 F7 00 
17636     00 F7 FC F7 
1763a     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
1763e     F7 06 00 FA 
17642     FD EE F6 F7 
17646     F3 E7 E8 F8 
1764a     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
1764e     FD F7 F7 FF 
17652     0E 13 18 1E 
17656     21 1F 1C 18 
1765a     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
1765e     00 07 01 03 
17662     0D 04 06 04 
17666     00 02 FD F3 
1766a     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
1766e     F9 F7 EB EE 
17672     F3 EE E4 EA 
17676     F0 ED F7 F7 
1767a     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
1767e     08 14 1E 21 
17682     2E 30 2B 2A 
17686     25 24 22 1A 
1768a     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
1768e     24 2E 21 27 
17692     26 20 25 1A 
17696     14 0D 1C 1A 
1769a     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
1769e     01 06 00 F6 
176a2     00 00 FE 00 
176a6     00 00 00 FA 
176aa     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
176ae     12 16 14 0E 
176b2     0D 04 04 00 
176b6     F7 EE F8 F7 
176ba     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
176be     F8 F2 F3 F3 
176c2     EC E6 E6 FC 
176c6     FC F3 F9 EE 
176ca     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
176ce     E4 F2 EC F0 
176d2     F8 F2 FE F7 
176d6     F7 FC 06 13 
176da     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
176de     20 1B 15 15 
176e2     0E 04 00 09 
176e6     07 03 13 09 
176ea     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
176ee     01 FE F2 F7 
176f2     03 00 FE FC 
176f6     F2 ED F3 F3 
176fa     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
176fe     F2 F9 F7 00 
17702     FE FA 03 0E 
17706     1A 20 2A 30 
1770a     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
1770e     25 1F 14 EB 
17712     00 00 34 39 
17716     33 37 4C 5D 
1771a     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
1771e     A5 CF 2E 57 
17722     36 18 0F 00 
17726     AC 87 CF 5E 
1772a     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
1772e     FF 7F 60 DB 
17732     3C 0C 16 30 
17736     A0 CF 30 E7 
1773a     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
1773e     AB E7 D0 CF 
17742     18 A0 9F BE 
17746     B7 B8 B7 CF 
1774a     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
1774e     D0 FF 00 B7 
17752     FF 30 0F 00 
17756     06 D0 CF F4 
1775a     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
1775e     AC 81 CF 00 
17762     C7 A0 9F 06 
17766     A0 9F D0 87 
1776a     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
1776e     18 FF E8 AC 
17772     B7 FF 00 BD 
17776     DC CF F1 B8 
1777a     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
1777e     18 EE D2 F3 
17782     09 E8 EB B8 
17786     CF E8 FF 0A 
1778a     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
1778e     10 28 34 5E 
17792     48 2E 5E 7F 
17796     60 0A 52 30 
1779a     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
1779e     3C 2E 5E 6C 
177a2     30 46 3C 5E 
177a6     60 72 30 22 
177aa     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
177ae     7F 60 46 55 
177b2     48 5E 60 7F 
177b6     7F 7F 4F 7F 
177ba     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
177be     78 66 30 0A 
177c2     46 30 2E 7F 
177c6     60 5E 60 5E 
177ca     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
177ce     66 76 7F 7F 
177d2     6F 49 7B 30 
177d6     46 60 42 46 
177da     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
177de     46 46 69 48 
177e2     28 5E 3C 46 
177e6     60 30 3A 3C 
177ea     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
177ee     22 36 1E 37 
177f2     18 2E 18 10 
177f6     2E 48 2A 1E 
177fa     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
177fe     00 EE A0 CF 
17802     00 DF E7 DC 
17806     B7 FF 0C EE 
1780a     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
1780e     0C FD 12 E8 
17812     FF 00 E8 BD 
17816     E1 EE D0 AB 
1781a     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
1781e     C3 C4 A0 B7 
17822     E8 A0 9F B8 
17826     BE A0 AC A0 
1782a     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
1782e     A0 87 C0 A3 
17832     C9 A0 9F B4 
17836     AC 80 9F AC 
1783a     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
1783e     87 80 84 80 
17842     84 80 80 9F 
17846     80 80 80 80 
1784a     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
1784e     93 80 99 A0 
17852     80 80 80 80 
17856     93 80 80 80 
1785a     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
1785e     93 80 80 80 
17862     9F 80 80 B8 
17866     80 80 A0 80 
1786a     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
1786e     80 8E 80 80 
17872     9D 80 9F 88 
17876     88 80 99 80 
1787a     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
1787e     81 9F 80 93 
17882     94 82 93 A6 
17886     91 9F 91 97 
1788a     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
1788e     BD CA 93 CF 
17892     A0 B7 B1 AC 
17896     B1 D3 A0 CF 
1789a     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
1789e     F0 E4 DC C9 
178a2     E7 F4 D0 DB 
178a6     FF 00 D2 F3 
178aa     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
178ae     0A 16 18 E4 
178b2     2E 18 2E 2E 
178b6     18 F3 52 00 
178ba     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
178be     2E 1B 24 0A 
178c2     3C 28 76 30 
178c6     3F 36 2A 46 
178ca     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
178ce     24 2E 5E 60 
178d2     6A 7C 6C 48 
178d6     40 46 5E 6C 
178da     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
178de     48 76 6C 60 
178e2     5E 7F 60 7F 
178e6     60 6A 7F 73 
178ea     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
178ee     76 7F 7F 7F 
178f2     7C 7F 78 7F 
178f6     7F 7F 7F 7F 
178fa     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
178fe     7F 7F 7F 7F 
17902     7F 7F 7F 7F | 	byte	$7f[8]
17906     76 7F 7E 7F 
1790a     7F 7F 7F 7F 
1790e     7F 7F 64 7F 
17912     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
17916     7F 7F 7F 7F 
1791a     7F 7F       | 	byte	$7f[6]
1791c     79 7F 66 64 
17920     6D 73 7F 7F 
17924     64 7F 60 6A 
17928     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
1792c     76 7F 7F 78 
17930     58 78 60 75 
17934     6C 46 66 48 
17938     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
1793c     45 51 5E 60 
17940     3A 5E 4E 40 
17944     5E 42 3F 3D 
17948     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
1794c     42 0C 28 28 
17950     3C 30 1F 40 
17954     48 43 42 22 
17958     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
1795c     0C 18 0C 04 
17960     24 DB 1E F3 
17964     00 FF 0C E7 
17968     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
1796c     00 F3 18 D0 
17970     EE F3 E8 DB 
17974     E1 D8 E7 E2 
17978     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
1797c     E8 BD D3 D5 
17980     CD DB DC C3 
17984     CA B7 D0 C3 
17988     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
1798c     C0 B8 88 9F 
17990     C1 A0 C3 D0 
17994     88 9F B8 A0 
17998     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
1799c     A0 80 82 80 
179a0     93 A0 87 94 
179a4     80 87 94 80 
179a8     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
179ac     88 8D 9F 97 
179b0     90 9C 94 80 
179b4     8B 87 80 87 
179b8     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
179bc     8E 9A 94 84 
179c0     9F A6 80 88 
179c4     80 81 8D 80 
179c8     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
179cc     82 80 8D 80 
179d0     80 AC 80 9A 
179d4     9F 90 94 80 
179d8     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
179dc     9F 94 80 80 
179e0     8E 80 80 80 
179e4     80 AC 8D 94 
179e8     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
179ec     9F A0 80 AC 
179f0     87 8E 9F AC 
179f4     94 9A 91 93 
179f8     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
179fc     A0 9C C3 AF 
17a00     A8 BB AF A3 
17a04     AF AB B7 B8 
17a08     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
17a0c     BE C3 D2 BE 
17a10     C3 D0 BD D9 
17a14     DF BE C3 DC 
17a18     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
17a1c     EE DF D9 E4 
17a20     E4 DE F3 EE 
17a24     E7 00 FF 0C 
17a28     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
17a2c     06 07 06 FF 
17a30     18 0C FF 1C 
17a34     15 1B 27 1F 
17a38     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
17a3c     2E 48 13 2A 
17a40     2E 3C 30 3A 
17a44     48 3D 3F 40 
17a48     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
17a4c     5A 48 3A 5B 
17a50     5A 5E 60 52 
17a54     61 69 60 6A 
17a58     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
17a5c     69 66 6A 6F 
17a60     76 7F 7F 78 
17a64     6C 6A 78 64 
17a68     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
17a6c     7F 7F 78 7B 
17a70     7F 7F 7F 7F 
17a74     7F 7F 7F 7E 
17a78     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
17a7c     7F 79 7F 7F 
17a80     7F 7F 7F 7F 
17a84     7F 7F 7F 7F 
17a88     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
17a8c     7F 7F 7F 7F 
17a90     7F 7F 7F 7F 
17a94     7F 7F 7F 7F | 	byte	$7f[12]
17a98     7E 7F 7F 7F 
17a9c     7E 7F 7F 76 
17aa0     78 76 6C 7F 
17aa4     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
17aa8     6A 78 67 60 
17aac     64 64 6C 7C 
17ab0     60 5E 78 60 
17ab4     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
17ab8     60 52 66 5A 
17abc     4E 4B 48 3C 
17ac0     37 46 30 2E 
17ac4     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
17ac8     3F 30 2A 2D 
17acc     24 22 3A 3C 
17ad0     28 2A 12 22 
17ad4     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
17ad8     1B 1E 1F 1E 
17adc     0C 00 10 00 
17ae0     FF 18 0A 06 
17ae4     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
17ae8     F4 F3 EE DC 
17aec     DE E5 E7 E7 
17af0     F9 E8 D8 E1 
17af4     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
17af8     E8 D2 CA DB 
17afc     D0 CF D0 C9 
17b00     C4 B8 B7 C9 
17b04     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
17b08     BD BA B2 AE 
17b0c     A9 AF AC AF 
17b10     A8 B7 AC 9F 
17b14     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
17b18     9C 94 8D 94 
17b1c     9F A0 A0 94 
17b20     93 9F 97 9C 
17b24     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
17b28     87 91 80 80 
17b2c     80 80 80 87 
17b30     88 87 80 81 
17b34     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
17b38     80 80 87 80 
17b3c     80 80 81 82 
17b40     80 80 80 81 
17b44     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
17b48     84 87 80 80 
17b4c     87 8E 93 88 
17b50     80 81 85 8D 
17b54     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
17b58     8B 8E 93 8B 
17b5c     93 96 8E 93 
17b60     9A 9F 99 97 
17b64     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
17b68     A0 9F A8 A6 
17b6c     A5 A8 A8 A8 
17b70     A0 9F A3 AB 
17b74     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
17b78     B4 A6 B7 B8 
17b7c     AB B1 B8 B1 
17b80     B7 B8 B7 BA 
17b84     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
17b88     C7 C6 CA C4 
17b8c     CF C4 CF D0 
17b90     DB D0 CF D0 
17b94     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
17b98     DF DE DC DE 
17b9c     E4 E2 F3 DC 
17ba0     E7 E8 ED E8 
17ba4     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
17ba8     E8 FF 00 FF 
17bac     00 FF 01 04 
17bb0     07 07 13 12 
17bb4     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
17bb8     07 16 18 18 
17bbc     13 19 19 22 
17bc0     27 34 30 22 
17bc4     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
17bc8     36 33 37 37 
17bcc     37 30 34 30 
17bd0     2E 40 36 46 
17bd4     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
17bd8     4C 4B 4C 5B 
17bdc     55 5E 60 52 
17be0     57 4E 52 61 
17be4     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
17be8     58 5E 60 5E 
17bec     66 69 6A 6F 
17bf0     69 6A 66 67 
17bf4     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
17bf8     73 73 76 78 
17bfc     7C 7F 7B 79 
17c00     78 7B 6D 73 
17c04     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
17c08     76 72 73 76 
17c0c     72 6D 67 70 
17c10     72 7B 78 7C 
17c14     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
17c18     72 75 78 6F 
17c1c     70 6F 6F 67 
17c20     6A 79 72 67 
17c24     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
17c28     70 6F 67 6A 
17c2c     60 64 60 57 
17c30     57 5E 5A 5D 
17c34     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
17c38     54 4F 58 54 
17c3c     51 52 4F 52 
17c40     4F 4F 4F 51 
17c44     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
17c48     3D 3F 3F 3C 
17c4c     3F 36 37 30 
17c50     34 3C 36 33 
17c54     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
17c58     27 2B 1E 22 
17c5c     1E 1E 18 0F 
17c60     0D 0C 10 10 
17c64     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
17c68     0F 06 0A 06 
17c6c     0A 0A 00 F4 
17c70     F6 F0 F3 FD 
17c74     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
17c78     EE EE EE E8 
17c7c     E7 ED E8 E7 
17c80     E5 DF E1 DE 
17c84     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
17c88     D8 DB D3 D8 
17c8c     D0 C9 C7 C9 
17c90     CF D0 CF CF 
17c94     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
17c98     BE C0 C1 C1 
17c9c     C3 C1 C0 BE 
17ca0     C1 BB BE BB 
17ca4     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
17ca8     B8 B7 B5 AE 
17cac     B1 AF B5 AC 
17cb0     A8 AB AE B1 
17cb4     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
17cb8     9F 9D 9F A5 
17cbc     A8 AC A3 A5 
17cc0     A6 A6 A2 A3 
17cc4     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
17cc8     B1 AC A6 A6 
17ccc     A5 A6 A5 A8 
17cd0     A3 A8 A8 A3 
17cd4     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
17cd8     A5 A3 9D 9F 
17cdc     A9 A8 AB A0 
17ce0     9F A8 A2 AB 
17ce4     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
17ce8     B2 AE B4 AF 
17cec     B1 AE B5 AF 
17cf0     AE B7 B2 AF 
17cf4     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
17cf8     AF B5 B7 B2 
17cfc     B4 B8 BB BD 
17d00     C6 C4 C4 C6 
17d04     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
17d08     C6 C7 CC CC 
17d0c     C7 C9 D0 C7 
17d10     CF CC CD CF 
17d14     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
17d18     DE DB DC DF 
17d1c     DE DB E1 E4 
17d20     E7 ED EA E5 
17d24     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
17d28     ED EE EB EB 
17d2c     F0 F3 F7 F6 
17d30     FC FF 00 01 
17d34     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
17d38     01 07 06 07 
17d3c     04 07 06 09 
17d40     0C 0C 0C 0D 
17d44     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
17d48     19 18 18 18 
17d4c     10 19 18 1B 
17d50     19 1B 18 19 
17d54     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
17d58     25 28 27 27 
17d5c     2A 2E 30 30 
17d60     30 2A 28 2E 
17d64     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
17d68     2B 28 2A 2D 
17d6c     30 30 30 33 
17d70     36 37 36 37 
17d74     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
17d78     3A 3C 36 3C 
17d7c     3C 3C 3A 3C 
17d80     39 3D 3C 3C 
17d84     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
17d88     40 46 43 40 
17d8c     3F 40 40 3F 
17d90     42 3F 40 42 
17d94     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
17d98     4C 4B 4E 4B 
17d9c     49 4F 4B 4B 
17da0     48 48 45 48 
17da4     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
17da8     45 48 42 3F 
17dac     43 43 46 48 
17db0     49 49 49 4B 
17db4     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
17db8     43 45 43 42 
17dbc     3F 3F 3D 3F 
17dc0     45 43 43 3F 
17dc4     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
17dc8     3D 3D 40 3F 
17dcc     3F 39 3A 3A 
17dd0     39 3C 3D 3C 
17dd4     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
17dd8     33 33 34 36 
17ddc     36 31 30 30 
17de0     2D 2A 28 27 
17de4     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
17de8     28 28 24 22 
17dec     22 21 21 21 
17df0     22 1F 1F 21 
17df4     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
17df8     21 1B 19 18 
17dfc     12 10 0F 0C 
17e00     0C 0D 0C 0F 
17e04     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
17e08     0C 0A 09 06 
17e0c     07 06 03 03 
17e10     01 01 01 00 
17e14     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
17e18     FA F7 F7 F7 
17e1c     F6 F4 F1 F0 
17e20     F3 F3 F6 F1 
17e24     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
17e28     E5 E7 E8 E7 
17e2c     E5 E4 E4 E5 
17e30     E4 E7 E5 E4 
17e34     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
17e38     DE DB DB D9 
17e3c     D9 DB D9 D6 
17e40     D8 D8 D8 D9 
17e44     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
17e48     DC DC DE DC 
17e4c     D9 D6 D6 D5 
17e50     D5 D5 D6 D3 
17e54     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
17e58     CF D0 D2 D2 
17e5c     D2 D2 D3 D2 
17e60     D2 D2 D2 D0 
17e64     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
17e68     D2 D3 D2 D2 
17e6c     D2 D2 D3 D3 
17e70     D3 D5 D6 D8 
17e74     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
17e78     D3 D5 D6 D6 
17e7c     D5 D5 D5 D5 
17e80     D5 D3 D5 D5 
17e84     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
17e88     D6 D6 D5 D5 
17e8c     D3 D5 D6 D6 
17e90     D6 D8 D8 D9 
17e94     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
17e98     D8 DB DE DF 
17e9c     DF DF DF DF 
17ea0     DF DF E1 DF 
17ea4     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
17ea8     E5 E4 E4 E4 
17eac     E2 E2 DE DF 
17eb0     E1 E1 E4 E4 
17eb4     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
17eb8     E7 E8 EA EA 
17ebc     EA ED EE ED 
17ec0     ED EB ED F0 
17ec4     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
17ec8     F1 F1 F1 F0 
17ecc     EE F0 F0 F0 
17ed0     F1 F1 F1 F1 
17ed4     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
17ed8     F3 F4 F7 F9 
17edc     FD FF FF FF 
17ee0     FF 00 00 00 
17ee4     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
17ee8     FD FC FA FA 
17eec     FA FC FD FD 
17ef0     FD FD FF 00 
17ef4     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
17ef8     04 04 07 09 
17efc     09 0A 0C 0C 
17f00     0A 0A 09 09 
17f04     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
17f08     03 04 06 07 
17f0c     0A 0C 0C 0D 
17f10     0D 0C 0A 0A 
17f14     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
17f18     0F 0F 0D 0C 
17f1c     0D 0F 0D 0F 
17f20     0F 0F 0F 10 
17f24     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
17f28     0D 0C 0D 0D 
17f2c     0D 0F 0D 0C 
17f30     0C 0C 0C 0F 
17f34     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
17f38     12 12 10 10 
17f3c     10 12 13 13 
17f40     13 15 16 18 
17f44     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
17f48     19 19 18 13 
17f4c     13 12 10 10 
17f50     0F 0F 0F 0F 
17f54     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
17f58     0D 0C 0D 0D 
17f5c     0F 10 12 10 
17f60     10 0F 0F 0F 
17f64     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
17f68     10 10 12 12 
17f6c     10 12 12 10 
17f70     12 12 10 0F 
17f74     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
17f78     0A 0C 0D 0F 
17f7c     10 12 12 12 
17f80     0F 0D 0C 0A 
17f84     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
17f88     0C 09 09 09 
17f8c     09 09 09 09 
17f90     09 0A 0A 0C 
17f94     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
17f98     0D 0D 0D 0C 
17f9c     0C 0A 09 09 
17fa0     09 09 09 09 
17fa4     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
17fa8     07 06 03 03 
17fac     03 06 06 07 
17fb0     07 06 06 06 
17fb4     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
17fb8     03 01 01 00 
17fbc     01 01 01 03 
17fc0     03 06 09 09 
17fc4     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
17fc8     03 01 01 01 
17fcc     03 03 03 01 
17fd0     01 01 01 00 
17fd4     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
17fd8     01 03 01 00 
17fdc     00 FD FD FC 
17fe0     FC FC FC FA 
17fe4     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
17fe8     FF 01 03 03 
17fec     04 04 04 03 
17ff0     00 FD FC FC 
17ff4     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
17ff8     FD FD FD FC 
17ffc     FC FA FA F9 
18000     F7 F9 FA FC 
18004     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
18008     FA FA F9 FA 
1800c     FA FA FC FC 
18010     FC FD FD FD 
18014     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
18018     F7 F6 F6 F6 
1801c     F6 F7 F9 FA 
18020     FC FD FD FF 
18024     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
18028     FF FF 00 00 
1802c     00 00 00 FF 
18030     FC FA FA F9 
18034     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
18038     F7 F7 F9 F9 
1803c     F9 FA FA F9 
18040     F9 F9 F7 F7 
18044     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
18048     FA FA FA FA 
1804c     FA FA       | 	byte	$fa[6]
1804e     F9 F9 F7 F7 
18052     F7 F9 F9 FA 
18056     FA FA F9 F9 
1805a     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
1805e     FC FC FC FD 
18062     FC FD FD FC 
18066     FC FC FD FD 
1806a     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
1806e     F7 F9 FA FC 
18072     FC FC FC FC 
18076     FC FC FC FC 
1807a     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
1807e     F9 F9 F9 F7 
18082     F7 F7 F7 F6 
18086     F7 F7 F7 F7 
1808a     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
1808e     F7 F9 F9 F9 
18092     F9 F9 F9 F9 
18096     F9 F9 F9 F7 
1809a     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
1809e     FA FC FC FA 
180a2     FC FC FA FA 
180a6     FA FA FA FA 
180aa     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
180ae     F7 F9 F9 F9 
180b2     F9 F7 F7 F6 
180b6     F7 F9 FC 00 
180ba     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
180be     FA FA F9 F9 
180c2     F9 FA FC FC 
180c6     FC FC FC FD 
180ca     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
180ce     FC FC FD FD 
180d2     FC FA F9 F7 
180d6     F7 F9 FA FC 
180da     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
180de     FC FC FC FC 
180e2     FA FA F9 F9 
180e6     F9 F9 F9 F7 
180ea     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
180ee     F7 F7 F7 F7 
180f2     F7 F7 F7 F7 
180f6     F7          | 	byte	$f7[9]
180f7     F9 F9 F9 F9 
180fb     F9 F9 F9 F9 
180ff     F9 F9       | 	byte	$f9[10]
18101     F7 F7 F7 F7 
18105     F9 FA FC FC 
18109     FA FC FC FA 
1810d     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
18111     FA F9 F7 F7 
18115     F7 F7 F9 F9 
18119     F9 F9 F7 F7 
1811d     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
18121     00 05 05 08 
18125     08 09 0A 0B 
18129     06 09 09 09 
1812d     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
18131     0B 0A 0F 17 
18135     04 10 FF 08 
18139     F8 F3 08 07 
1813d     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
18141     1D 24 00 FF 
18145     14 20 0F 12 
18149     10 20 01 10 
1814d     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
18151     D8 F7 D7 F0 
18155     FF CB F7 F7 
18159     F2 FF EB E4 
1815d     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
18161     18 32 27 17 
18165     1F 30 40 4C 
18169     24 3C 27 23 
1816d     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
18171     08 28 E7 00 
18175     ED E7 F8 F0 
18179     FD F4 D7 E8 
1817d     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
18181     D7 EC 1B 3B 
18185     20 25 16 13 
18189     27 30 40 37 
1818d     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
18191     19 E0 F5 EF 
18195     E1 FC F0 F2 
18199     E0 D7 D2 C8 
1819d     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
181a1     EF FB FA 2B 
181a5     FD 0F 1F 31 
181a9     3D 34 44 37 
181ad     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
181b1     38 22 3A 25 
181b5     31 2A 00 0C 
181b9     00 0F 1B 38 
181bd     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
181c1     00 EF F4 F2 
181c5     F7 0A 17 14 
181c9     10 EF ED F2 
181cd     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
181d1     10 1F 1C F0 
181d5     F4 DB DF D9 
181d9     EE 00 E8 E2 
181dd     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
181e1     D4 BF DD E8 
181e5     FF 04 18 0E 
181e9     0D 22 2D 34 
181ed     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
181f1     1B 36 2A 1C 
181f5     22 13 2B 28 
181f9     0E 10 FF E6 
181fd     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
18201     0C 1B 00 02 
18205     00 FA FB 0B 
18209     17 35 34 27 
1820d     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
18211     0B 1A 11 23 
18215     20 20 02 FA 
18219     E1 D8 E6 E4 
1821d     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
18221     CE D2 C8 C5 
18225     CB CB CF EC 
18229     FF 02 F4 05 
1822d     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
18231     4A 28 25 26 
18235     10 2F 1D 14 
18239     1F 20 20 20 
1823d     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
18241     14 17 0F 18 
18245     0B F8 04 FC 
18249     04 FD 07 2A 
1824d     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
18251     1C 08 14 1A 
18255     1B 1B 20 1C 
18259     10 10 F4 E6 
1825d     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
18261     F2 F3 E9 E8 
18265     D5 CE D8 D7 
18269     DB DD F7 05 
1826d     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
18271     04 1B 37 36 
18275     39 26 19 23 
18279     1A 15 1F 0B 
1827d     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
18281     F8 E0 E6 F1 
18285     FD 0D 09 02 
18289     EC F5 00 EA 
1828d     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
18291     37 3B 2D 20 
18295     1C 17 20 27 
18299     31 29 2F 20 
1829d     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
182a1     E3 DF EF E8 
182a5     F3 F3 E0 E0 
182a9     CF D7 D1 DD 
182ad     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
182b1     1D 21 13 1B 
182b5     1B 32 43 40 
182b9     2E 2F 20 26 
182bd     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
182c1     14 23 19 01 
182c5     F0 EA F3 F5 
182c9     07 12 F6 F3 
182cd     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
182d1     EE F1 0D 26 
182d5     2A 20 13 10 
182d9     03 0C 1A 1B 
182dd     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
182e1     00 F0 E4 DF 
182e5     E3 DD E9 F1 
182e9     F3 E4 DF D8 
182ed     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
182f1     F9 03 13 1B 
182f5     1D 24 1C 1F 
182f9     3B 3B 48 40 
182fd     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
18301     28 21 14 1E 
18305     1D 21 0A F9 
18309     F6 EF FD 13 
1830d     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
18311     F4 F5 F0 F2 
18315     F5 0B 28 26 
18319     23 20 05 06 
1831d     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
18321     1B 12 09 FC 
18325     E3 E4 D9 D9 
18329     CE DD E2 DF 
1832d     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
18331     C8 CF DC E7 
18335     FC 03 0E 20 
18339     14 17 21 29 
1833d     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
18341     30 23 31 28 
18345     2C 22 29 30 
18349     21 1A 10 F6 
1834d     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
18351     11 05 FD F8 
18355     FA F8 EC F5 
18359     13 20 2B 2C 
1835d     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
18361     14 1B 20 20 
18365     1E 10 02 F0 
18369     EE E4 D8 DD 
1836d     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
18371     DD DC CD CE 
18375     CD D7 EE ED 
18379     FA 0C 0D 10 
1837d     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
18381     31 39 2C 21 
18385     1A 1D 20 18 
18389     1B 24 20 21 
1838d     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
18391     03 11 1A 18 
18395     10 06 FF 07 
18399     F6 F3 03 12 
1839d     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
183a1     1E 14 15 1A 
183a5     1E 27 26 25 
183a9     18 04 FD F1 
183ad     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
183b1     E6 E6 EA E5 
183b5     DA D4 C7 CF 
183b9     DF EA EE FF 
183bd     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
183c1     14 17 27 38 
183c5     39 33 1E 1C 
183c9     20 18 19 20 
183cd     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
183d1     0A F6 F2 FB 
183d5     06 0E 14 04 
183d9     FC FC F4 ED 
183dd     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
183e1     24 2E 26 18 
183e5     14 0F 16 1B 
183e9     21 2C 2C 18 
183ed     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
183f1     E5 E5 E5 EB 
183f5     F6 F2 F0 EC 
183f9     DA CF D9 DF 
183fd     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
18401     10 12 14 10 
18405     17 23 36 3E 
18409     2A 22 20 15 
1840d     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
18411     1C 1D 18 08 
18415     F5 F4 F3 FF 
18419     0E 0E 08 00 
1841d     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
18421     F4 FD 0E 25 
18425     2A 26 1B 10 
18429     0C 11 11 21 
1842d     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
18431     FE F3 E8 E4 
18435     DA D9 E2 E5 
18439     E9 F1 E2 D4 
1843d     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
18441     F3 FF 08 13 
18445     17 19 18 18 
18449     2B 42 40 3C 
1844d     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
18451     1F 21 21 26 
18455     29 20 10 00 
18459     F4 F6 FF 0D 
1845d     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
18461     F0 E8 EA EA 
18465     F5 07 1B 25 
18469     27 1A 13 10 
1846d     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
18471     26 1C 13 04 
18475     F5 EF E4 DF 
18479     DF DC E3 ED 
1847d     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
18481     CF D6 E1 EC 
18485     F6 02 09 13 
18489     14 0A 13 23 
1848d     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
18491     29 20 1D 1E 
18495     1A 1F 26 29 
18499     24 18 09 FA 
1849d     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
184a1     14 14 08 FC 
184a5     F6 F4 F1 FD 
184a9     0B 1F 2D 2A 
184ad     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
184b1     14 20 27 25 
184b5     25 14 04 FA 
184b9     E9 E0 DC D5 
184bd     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
184c1     E0 D0 C8 C6 
184c5     D3 D9 E9 F2 
184c9     F9 07 14 10 
184cd     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
184d1     38 36 34 28 
184d5     22 20 18 1A 
184d9     1C 23 27 23 
184dd     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
184e1     FF 05 0A 11 
184e5     10 01 FC F5 
184e9     ED EE F1 05 
184ed     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
184f1     20 14 12 1B 
184f5     23 2B 33 2C 
184f9     20 15 04 F9 
184fd     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
18501     DF EF F0 EA 
18505     D8 D0 CD D2 
18509     DB E8 ED F5 
1850d     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
18511     09 19 21 2D 
18515     32 2B 23 1B 
18519     12 10 0C 14 
1851d     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
18521     06 FA FB FE 
18525     03 0F 15 11 
18529     0D 02 FB F4 
1852d     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
18531     24 2B 2C 22 
18535     14 14 10 1A 
18539     26 2D 2A 20 
1853d     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
18541     E6 DD D8 DD 
18545     EB F2 E8 E0 
18549     D6 CD D5 E2 
1854d     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
18551     16 10 10 13 
18555     1D 29 35 38 
18559     34 2C 25 1C 
1855d     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
18561     22 24 18 05 
18565     FC F6 F4 FB 
18569     07 0D 0E 06 
1856d     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
18571     EB F7 09 19 
18575     29 28 1E 17 
18579     10 10 19 22 
1857d     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
18581     08 00 F3 E8 
18585     E0 D5 DF ED 
18589     EE EC E1 D6 
1858d     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
18591     ED FB 08 10 
18595     0E 0E 0D 1B 
18599     27 31 39 34 
1859d     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
185a1     13 17 1B 27 
185a5     28 1E 14 06 
185a9     FE FB FF 0C 
185ad     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
185b1     01 F4 EF F1 
185b5     F6 05 1B 27 
185b9     28 24 18 11 
185bd     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
185c1     2A 26 18 0A 
185c5     FD F3 E8 D4 
185c9     CE D7 DF E3 
185cd     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
185d1     CD D3 D8 E5 
185d5     F7 02 0E 0E 
185d9     0E 0F 15 27 
185dd     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
185e1     2C 20 1B 14 
185e5     13 1D 25 26 
185e9     22 18 0D 00 
185ed     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
185f1     12 11 0C 00 
185f5     F5 F2 EC EF 
185f9     FF 11 20 25 
185fd     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
18601     17 22 2B 33 
18605     2A 22 15 0C 
18609     06 F0 DD DB 
1860d     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
18611     E0 D1 CD D1 
18615     D0 D5 DF EB 
18619     FB 05 0A 06 
1861d     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
18621     2D 2E 2C 21 
18625     1C 10 07 0D 
18629     13 19 1C 1C 
1862d     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
18631     FF 0E 15 1A 
18635     1D 14 0D 05 
18639     FC F8 FB 06 
1863d     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
18641     20 16 11 12 
18645     20 29 2D 2A 
18649     1C 13 10 00 
1864d     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
18651     DE E5 E8 E0 
18655     D5 D0 D1 D4 
18659     D4 DF EE FE 
1865d     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
18661     14 20 27 32 
18665     35 31 2C 20 
18669     15 0C 0C 11 
1866d     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
18671     03 F4 EC F3 
18675     F9 01 0C 0F 
18679     0C 06 00 F6 
1867d     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
18681     1F 30 34 2C 
18685     20 15 1A 23 
18689     2E 36 2D 25 
1868d     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
18691     E7 DC D8 E3 
18695     E8 EB E3 DA 
18699     D6 D4 D2 D7 
1869d     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
186a1     0B 07 0B 10 
186a5     16 26 2E 33 
186a9     32 2D 22 14 
186ad     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
186b1     14 13 10 08 
186b5     FA F4 F4 F7 
186b9     03 0F 12 10 
186bd     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
186c1     F6 FD 09 1B 
186c5     2B 32 2C 20 
186c9     14 10 1A 2B 
186cd     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
186d1     18 0A 00 E8 
186d5     D9 D4 DE E7 
186d9     E6 E2 E0 D5 
186dd     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
186e1     EA FA 06 07 
186e5     0D 0E 0E 19 
186e9     27 2D 35 37 
186ed     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
186f1     11 14 19 1A 
186f5     1D 16 0C 04 
186f9     F9 F8 F8 FF 
186fd     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
18701     00 F5 F0 F2 
18705     F6 FF 0F 23 
18709     2D 28 20 10 
1870d     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
18711     2F 2B 24 1C 
18715     14 01 F2 E1 
18719     D9 E0 E5 E9 
1871d     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
18721     CE D3 DA E3 
18725     EF FE FF 0B 
18729     0B 0D 13 1F 
1872d     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
18731     26 19 0D 0A 
18735     0C 11 17 17 
18739     14 0D 08 01 
1873d     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
18741     17 20 19 10 
18745     02 FE FD FD 
18749     03 17 27 2D 
1874d     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
18751     12 22 2C 2E 
18755     29 20 19 16 
18759     05 F0 E0 D7 
1875d     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
18761     D9 D3 CB CB 
18765     CD D4 E3 EF 
18769     FB 08 0D 11 
1876d     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
18771     3D 40 40 00 
18775     00 FF FF FE 
18779     FF FF 00 00 
1877d     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
18781     03 05 05 05 
18785     06 09 09 07 
18789     05 02 03 06 
1878d     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
18791     0E 06 FD F4 
18795     F3 F0 F0 F2 
18799     FA FF FF FE 
1879d     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
187a1     FE F6 F0 F0 
187a5     EB EC E4 DE 
187a9     DD D5 D4 C9 
187ad     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
187b1     E1 DD DC DD 
187b5     E0 F5 07 17 
187b9     19 18 16 FC 
187bd     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
187c1     EE F9 FC FE 
187c5     09 F6 F2 E1 
187c9     CE C3 BE BD 
187cd     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
187d1     FD 00 18 1E 
187d5     2B 25 1B 0C 
187d9     03 FF FE F4 
187dd     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
187e1     F2 01 12 14 
187e5     14 02 EC D1 
187e9     CC CC CA CA 
187ed     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
187f1     BD B7 B8 BD 
187f5     C8 D1 E3 EC 
187f9     F7 02 08 07 
187fd     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
18801     FB FE 09 17 
18805     2B 32 38 39 
18809     36 35 36 34 
1880d     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
18811     EC E2 D4 DC 
18815     E0 E7 F0 F8 
18819     01 F9 F7 F2 
1881d     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
18821     F1 FB FB 05 
18825     00 F0 E2 D5 
18829     D7 CD CE C6 
1882d     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
18831     D8 C7 BD B8 
18835     BE D2 E8 FE 
18839     04 08 07 0C 
1883d     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
18841     2E 29 23 0E 
18845     FE E4 DF CB 
18849     BA B9 B4 B8 
1884d     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
18851     ED F2 F8 01 
18855     07 07 0F 14 
18859     1B 22 21 11 
1885d     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
18861     0F 14 12 FD 
18865     DC C9 AF 9F 
18869     9E 9E A5 B4 
1886d     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
18871     D4 D9 E2 EF 
18875     F4 FB 00 06 
18879     0B 0A 09 04 
1887d     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
18881     F3 FD 05 17 
18885     28 29 28 23 
18889     19 20 29 37 
1888d     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
18891     FD 01 01 0D 
18895     1D 1D 24 16 
18899     0D FA F3 DC 
1889d     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
188a1     CD DF E8 ED 
188a5     E7 EA ED ED 
188a9     EE ED E3 DB 
188ad     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
188b1     D7 C7 C4 C5 
188b5     C7 DB E6 EA 
188b9     E6 E5 E4 EB 
188bd     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
188c1     2C 2F 2E 2D 
188c5     21 09 F9 E4 
188c9     DE DF E4 E6 
188cd     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
188d1     E4 E4 D9 D8 
188d5     D6 D4 DC F1 
188d9     FC 12 1D 27 
188dd     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
188e1     37 30 08 E6 
188e5     C3 B0 A0 9F 
188e9     A3 AA B8 C5 
188ed     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
188f1     C7 C6 C9 D4 
188f5     E3 01 15 27 
188f9     35 38 35 30 
188fd     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
18901     00 03 05 0A 
18905     15 08 FD F3 
18909     F3 F8 01 0C 
1890d     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
18911     0C 24 3A 41 
18915     4C 4A 38 2A 
18919     17 F8 E3 CE 
1891d     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
18921     D5 D0 D0 CF 
18925     CC CB CE CB 
18929     C4 C7 CC DF 
1892d     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
18931     0A 04 FF FE 
18935     FE 01 00 EF 
18939     EC E7 E6 E4 
1893d     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
18941     FD FD F3 ED 
18945     E7 E2 DB E6 
18949     F3 FC 11 19 
1894d     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
18951     FB F3 DC CC 
18955     C4 C7 CA E1 
18959     ED 03 08 0B 
1895d     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
18961     18 0C FD F0 
18965     E6 E2 E4 EE 
18969     F2 F8 EC E7 
1896d     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
18971     A8 9E AD BD 
18975     D8 ED FA 0D 
18979     15 1B 2A 27 
1897d     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
18981     1A 21 23 20 
18985     1B 12 03 F2 
18989     F1 E8 EA E3 
1898d     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
18991     1E 33 4C 53 
18995     51 51 4A 41 
18999     3C 1D 09 FF 
1899d     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
189a1     DF CF C8 BB 
189a5     BF A6 A3 9D 
189a9     94 9C A5 B5 
189ad     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
189b1     FC FE 08 0E 
189b5     18 0F 0F 08 
189b9     01 03 03 08 
189bd     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
189c1     DD D4 C7 C2 
189c5     BC BF C9 D6 
189c9     ED FA 0D 1B 
189cd     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
189d1     36 1F 0E FC 
189d5     EE EC F3 FC 
189d9     09 0B 04 F6 
189dd     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
189e1     CA B9 B7 B5 
189e5     C5 D2 EE FD 
189e9     14 08 09 09 
189ed     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
189f1     D7 D6 CE CF 
189f5     DA D3 D7 E3 
189f9     EB F3 02 04 
189fd     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
18a01     1F 32 47 49 
18a05     4F 44 3C 2F 
18a09     21 14 FE F4 
18a0d     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
18a11     0E 18 26 18 
18a15     10 0A 04 FB 
18a19     F5 F5 F3 F6 
18a1d     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
18a21     F5 EB E2 DA 
18a25     D5 C7 C2 AA 
18a29     A0 96 98 9B 
18a2d     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
18a31     F0 FC 0F 1A 
18a35     17 1E 27 2D 
18a39     3C 3A 45 46 
18a3d     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
18a41     F6 E9 E2 DA 
18a45     D5 CA C6 CC 
18a49     CE CF D4 DA 
18a4d     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
18a51     F2 F0 EE E9 
18a55     F7 F7 06 18 
18a59     13 1F 1C 1B 
18a5d     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
18a61     B1 9F A2 A5 
18a65     B5 D7 EE F3 
18a69     FD FD 03 11 
18a6d     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
18a71     1A 17 16 09 
18a75     04 05 06 09 
18a79     0E 0F FD F4 
18a7d     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
18a81     E7 ED FD 05 
18a85     08 0A 1A 23 
18a89     21 21 1F 1C 
18a8d     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
18a91     3B 33 22 07 
18a95     F2 E2 D4 CC 
18a99     CF D7 E6 FA 
18a9d     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
18aa1     05 0A 0B 06 
18aa5     FF F3 E0 C9 
18aa9     B9 BA BA CA 
18aad     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
18ab1     E6 F0 ED F4 
18ab5     ED ED EE F0 
18ab9     FB 00 07 17 
18abd     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
18ac1     F4 F7 F6 F7 
18ac5     F9 FE FE 04 
18ac9     F8 EF E6 DD 
18acd     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
18ad1     DD E5 E5 ED 
18ad5     FE 0A 1C 2E 
18ad9     2A 2F 2D 2A 
18add     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
18ae1     E8 E4 EF F7 
18ae5     EB F0 E6 D4 
18ae9     D2 D3 D3 D4 
18aed     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
18af1     F5 FF 02 01 
18af5     00 03 05 07 
18af9     07 0A 05 FE 
18afd     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
18b01     EA E9 E9 EE 
18b05     F7 0A 1A 28 
18b09     39 44 49 58 
18b0d     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
18b11     32 16 02 FC 
18b15     EF F5 F5 FF 
18b19     04 02 02 01 
18b1d     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
18b21     D2 D4 D3 D0 
18b25     CF CC C5 C6 
18b29     BB C3 CC D0 
18b2d     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
18b31     FD 00 0C 0F 
18b35     09 02 F9 F1 
18b39     EC F0 F0 F2 
18b3d     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
18b41     31 32 30 2D 
18b45     21 18 06 FD 
18b49     F9 F4 F5 FF 
18b4d     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
18b51     DD D5 C8 C1 
18b55     C6 C7 CF D8 
18b59     DD EB F4 F8 
18b5d     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
18b61     F4 F2 E8 E9 
18b65     E2 DB DB DD 
18b69     ED EF F9 F6 
18b6d     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
18b71     03 0A 14 1D 
18b75     25 2A 34 35 
18b79     25 23 15 03 
18b7d     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
18b81     09 16 1D 1A 
18b85     18 18 1A 25 
18b89     29 2A 29 28 
18b8d     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
18b91     EC E5 E0 E7 
18b95     E8 ED F1 F8 
18b99     FF 04 00 F8 
18b9d     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
18ba1     D7 D3 C9 CA 
18ba5     C7 C6 C9 D9 
18ba9     DE F1 FE 02 
18bad     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
18bb1     07 0C 1B 1D 
18bb5     1F 20 1B 1B 
18bb9     06 EC E3 DE 
18bbd     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
18bc1     02 00 03 05 
18bc5     03 01 FE F4 
18bc9     F5 F2 F0 F0 
18bcd     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
18bd1     D2 D0 D3 D3 
18bd5     D8 D7 E2 E3 
18bd9     EE ED F4 03 
18bdd     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
18be1     28 17 0A F4 
18be5     E2 E0 E0 EC 
18be9     FA 08 15 13 
18bed     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
18bf1     0D FF 01 FE 
18bf5     FB FA F7 F5 
18bf9     E8 E9 E6 E3 
18bfd     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
18c01     FB 00 06 0B 
18c05     11 1C 31 46 
18c09     4C 48 3D 29 
18c0d     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
18c11     E4 EE FE 0F 
18c15     18 23 21 23 
18c19     24 10 0D 08 
18c1d     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
18c21     00 00 F0 E6 
18c25     D8 CB C4 C0 
18c29     C2 C7 CB CF 
18c2d     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
18c31     FC 00 07 07 
18c35     07 F7 F4 DB 
18c39     CB CF D7 E6 
18c3d     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
18c41     25 20 1F 0D 
18c45     08 01 03 06 
18c49     10 0D 0B 00 
18c4d     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
18c51     D3 D3 D0 DA 
18c55     E3 F5 0C 02 
18c59     02 03 0B 19 
18c5d     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
18c61     FC E0 D0 CD 
18c65     C8 CC D8 E3 
18c69     E9 F2 F8 F6 
18c6d     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
18c71     F9 00 09 0F 
18c75     18 18 18 16 
18c79     0C 06 01 03 
18c7d     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
18c81     1B 1C 12 1E 
18c85     2D 3A 4E 56 
18c89     53 43 3C 1F 
18c8d     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
18c91     E0 F0 F4 03 
18c95     08 12 0D 08 
18c99     FF F7 F2 E1 
18c9d     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
18ca1     CE CB C6 C0 
18ca5     BB BD C2 D1 
18ca9     D5 E4 EB F3 
18cad     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
18cb1     1C 1E 27 25 
18cb5     1B F7 E5 D5 
18cb9     DB EC FE 15 
18cbd     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
18cc1     4A 38 2E 1E 
18cc5     11 04 00 F4 
18cc9     EC E8 E6 DA 
18ccd     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
18cd1     AA AF B1 C2 
18cd5     D1 DB D3 DC 
18cd9     EB EF 04 12 
18cdd     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
18ce1     03 F9 F6 F7 
18ce5     F7 06 0B 14 
18ce9     19 18 0E FF 
18ced     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
18cf1     0A 14 18 1A 
18cf5     21 1F 12 07 
18cf9     02 01 FE 00 
18cfd     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
18d01     21 20 20 2A 
18d05     29 29 1E 10 
18d09     07 EB D6 CE 
18d0d     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
18d11     E7 FE 14 2A 
18d15     2F 2E 2E 2E 
18d19     26 1F 16 0E 
18d1d     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
18d21     DE D5 CD CC 
18d25     CF E0 E5 EF 
18d29     FD 02 FC F3 
18d2d     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
18d31     05 06 05 F4 
18d35     E6 E2 D7 DC 
18d39     E7 ED F7 02 
18d3d     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
18d41     06 05 F9 FB 
18d45     F1 ED ED ED 
18d49     EE F3 F3 F2 
18d4d     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
18d51     D7 E8 F2 F6 
18d55     E8 E4 E6 00 
18d59     0F 21 36 38 
18d5d     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
18d61     04 FC FD FA 
18d65     FF 06 05 15 
18d69     0C 05 06 01 
18d6d     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
18d71     E0 DE DF DF 
18d75     E0 E3 E5 E3 
18d79     E6 EB F7 0E 
18d7d     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
18d81     37 47 4B 51 
18d85     44 3E 2E 0C 
18d89     FA DE D0 C9 
18d8d     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
18d91     2E 43 48 3E 
18d95     34 24 1D 10 
18d99     09 01 F9 F0 
18d9d     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
18da1     E4 D6 D6 C4 
18da5     BB BD BE BD 
18da9     BC B9 BC CD 
18dad     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
18db1     FE FB F9 F6 
18db5     F9 FE 08 16 
18db9     22 2C 39 37 
18dbd     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
18dc1     04 02 02 05 
18dc5     07 09 07 09 
18dc9     07 F8 EA D8 
18dcd     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
18dd1     ED EE EE EE 
18dd5     F3 FC 07 0F 
18dd9     0F 0A 01 ED 
18ddd     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
18de1     D9 E1 EA F2 
18de5     05 0D 13 14 
18de9     16 17 1A 1C 
18ded     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
18df1     02 00 F2 E8 
18df5     E4 E5 EA F9 
18df9     0D 24 42 4D 
18dfd     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
18e01     31 2C 2D 22 
18e05     15 02 F1 E8 
18e09     E4 E4 E5 ED 
18e0d     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
18e11     0A 00 FA F9 
18e15     F9 F7 FF F8 
18e19     F9 FA F5 FB 
18e1d     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
18e21     F6 EC EC EC 
18e25     E9 E4 DB CD 
18e29     C3 BE CC E1 
18e2d     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
18e31     18 17 12 02 
18e35     05 02 05 0F 
18e39     1D 2A 2A 27 
18e3d     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
18e41     FE F4 E5 CF 
18e45     C4 B7 B4 AF 
18e49     AF AD AD B2 
18e4d     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
18e51     FC 09 0E 15 
18e55     1F 31 3D 44 
18e59     41 27 11 07 
18e5d     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
18e61     E8 FD 12 29 
18e65     33 36 35 2A 
18e69     1A 15 0E 09 
18e6d     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
18e71     06 07 06 07 
18e75     06 03 01 01 
18e79     02 02 00 FD 
18e7d     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
18e81     FD 03 05 F9 
18e85     F1 F3 F6 FB 
18e89     04 0A 19 23 
18e8d     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
18e91     1D 0F 00 FC 
18e95     FB FD 0C 11 
18e99     1C 27 27 27 
18e9d     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
18ea1     D0 CB CC C9 
18ea5     C9 D0 D0 D3 
18ea9     DD E8 F8 02 
18ead     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
18eb1     D1 D3 D8 DE 
18eb5     EC F9 05 1C 
18eb9     2B 2D 33 34 
18ebd     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
18ec1     03 FB EE E4 
18ec5     E0 CF C8 C2 
18ec9     BC BE C9 DB 
18ecd     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
18ed1     24 16 16 14 
18ed5     1F 27 25 1B 
18ed9     15 0F 0A 0D 
18edd     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
18ee1     FC FE F6 F1 
18ee5     E8 E4 DB D7 
18ee9     DB DC E6 EE 
18eed     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
18ef1     1F 2C 2F 30 
18ef5     2D 2D 2E 26 
18ef9     24 1F 0C 03 
18efd     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
18f01     08 0C 13 14 
18f05     1E 1F 15 17 
18f09     0F 15 14 16 
18f0d     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
18f11     21 1A 1A 12 
18f15     0D 04 FE F4 
18f19     EB E5 E0 DF 
18f1d     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
18f21     BF BD C2 D2 
18f25     D5 DC DD EA 
18f29     FE 0C 09 0A 
18f2d     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
18f31     F3 F8 F9 04 
18f35     11 24 39 4A 
18f39     51 50 44 23 
18f3d     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
18f41     D5 CE CE CC 
18f45     CE DA E0 E7 
18f49     E5 DE D7 D6 
18f4d     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
18f51     DB E2 F3 05 
18f55     07 10 18 17 
18f59     22 26 28 33 
18f5d     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
18f61     13 0F 09 00 
18f65     F3 EA E7 E9 
18f69     EA F5 09 15 
18f6d     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
18f71     37 30 27 1F 
18f75     19 17 14 16 
18f79     16 11 FE FA 
18f7d     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
18f81     E4 DA D6 D4 
18f85     DE E6 EE F9 
18f89     F9 FE 07 16 
18f8d     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
18f91     2D 32 2C 22 
18f95     1E 0F 05 00 
18f99     F2 E8 E4 DB 
18f9d     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
18fa1     DA E3 F6 FD 
18fa5     EF EE EE FE 
18fa9     FA FD FE 00 
18fad     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
18fb1     1A 18 25 20 
18fb5     1B 1B 13 0E 
18fb9     00 EF DD D1 
18fbd     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
18fc1     C8 CD D8 E3 
18fc5     FB FE 0C 01 
18fc9     F3 EC E8 E9 
18fcd     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
18fd1     F3 07 0B 19 
18fd5     2B 33 3D 48 
18fd9     4B 3D 35 21 
18fdd     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
18fe1     00 00 02 01 
18fe5     00 FE 06 06 
18fe9     05 03 03 FC 
18fed     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
18ff1     06 05 03 01 
18ff5     02 07 0E 0D 
18ff9     05 03 03 0B 
18ffd     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
19001     FC FA F7 F9 
19005     09 0C 0B 0D 
19009     0D 15 24 38 
1900d     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
19011     2B 24 18 15 
19015     0F 09 04 03 
19019     03 00 F8 F1 
1901d     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
19021     AE A5 A1 9B 
19025     9F BA C1 D1 
19029     E4 F6 FF 08 
1902d     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
19031     38 37 35 25 
19035     23 15 11 F9 
19039     E3 DE D4 D8 
1903d     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
19041     ED FC 09 10 
19045     14 04 FF EA 
19049     E7 E5 ED EE 
1904d     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
19051     19 1C 22 24 
19055     21 1F 15 0F 
19059     0F 05 05 F9 
1905d     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
19061     F8 F9 FA F9 
19065     03 08 0F 14 
19069     13 14 12 12 
1906d     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
19071     27 1F 19 17 
19075     17 14 13 08 
19079     FD FA F4 F3 
1907d     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
19081     05 0F 1F 29 
19085     27 28 1E 16 
19089     12 10 0F 08 
1908d     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
19091     FB FE 04 06 
19095     07 0C 0A 14 
19099     12 07 FC E4 
1909d     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
190a1     AD A2 A7 B7 
190a5     C5 D8 F3 03 
190a9     09 17 1B 25 
190ad     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
190b1     30 2C 23 1F 
190b5     1A 10 0A F6 
190b9     EE EB E2 E3 
190bd     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
190c1     D7 E2 EB EA 
190c5     E5 D5 D1 CB 
190c9     DB DE EF F4 
190cd     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
190d1     24 23 24 23 
190d5     18 17 0D 0F 
190d9     0D 0F 0F 0A 
190dd     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
190e1     05 06 03 05 
190e5     07 0A 0D 14 
190e9     14 1E 24 2E 
190ed     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
190f1     19 0B FF FA 
190f5     F1 E6 DB D7 
190f9     D2 D3 DD E8 
190fd     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
19101     1F 2D 2F 2E 
19105     22 19 10 07 
19109     01 00 00 FE 
1910d     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
19111     27 2B 31 2E 
19115     23 2A 2A 1E 
19119     0F F1 D9 BC 
1911d     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
19121     BE C2 CC CC 
19125     DE EC F1 FB 
19129     FA FF 00 08 
1912d     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
19131     0A 0B 09 07 
19135     00 FC FA F0 
19139     EC EE E7 E9 
1913d     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
19141     EF F6 F3 EB 
19145     E4 DE E0 EB 
19149     EF FD 0E 19 
1914d     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
19151     30 33 31 2E 
19155     2E 30 31 34 
19159     2A 18 0B F2 
1915d     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
19161     DB DC E7 ED 
19165     F7 06 18 21 
19169     30 39 41 45 
1916d     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
19171     E8 DE D1 D4 
19175     D4 D4 D3 CE 
19179     DF F5 0B 1B 
1917d     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
19181     3A 39 31 22 
19185     15 0C FE 00 
19189     F9 FF 04 0D 
1918d     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
19191     21 21 20 20 
19195     1F 1C 11 FD 
19199     E3 C5 B5 B4 
1919d     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
191a1     D8 CC CE D0 
191a5     DD E8 E8 ED 
191a9     ED F8 FE 07 
191ad     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
191b1     1F 14 0C 04 
191b5     FF FE F4 F0 
191b9     F0 F2 F3 F8 
191bd     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
191c1     13 10 F9 E1 
191c5     D0 BF BE CB 
191c9     DB EE FE F7 
191cd     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
191d1     35 38 39 36 
191d5     3B 3A 37 2F 
191d9     17 FD EC DB 
191dd     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
191e1     CA D6 ED 03 
191e5     1C 32 48 4E 
191e9     5C 5E 60 50 
191ed     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
191f1     D3 D3 D8 E9 
191f5     EE EE ED F4 
191f9     FF 0C 11 10 
191fd     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
19201     28 28 23 19 
19205     18 13 09 0B 
19209     06 07 07 06 
1920d     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
19211     0D 0F 12 13 
19215     09 01 ED D6 
19219     C6 C2 C2 CC 
1921d     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
19221     E0 DA D9 DC 
19225     E6 E4 EB EA 
19229     F2 00 11 14 
1922d     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
19231     F4 E2 E0 DB 
19235     DC E1 EC F9 
19239     06 12 28 2F 
1923d     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
19241     0A E5 CC AF 
19245     A6 AC BC D3 
19249     E9 EF E5 E9 
1924d     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
19251     37 41 44 46 
19255     52 4E 42 32 
19259     1C 0B F1 E5 
1925d     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
19261     DE F4 05 17 
19265     1F 2A 37 37 
19269     37 37 2C 17 
1926d     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
19271     F9 01 0E 15 
19275     07 F8 F6 F7 
19279     F6 F9 00 FD 
1927d     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
19281     FE FD FE 01 
19285     02 07 0E 0F 
19289     1A 22 1F 20 
1928d     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
19291     27 1F 19 10 
19295     02 F4 E2 D0 
19299     CD C6 CA D4 
1929d     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
192a1     DA E7 EF FE 
192a5     0A 0E 0F 12 
192a9     10 0D 0B 01 
192ad     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
192b1     C9 CB CA CB 
192b5     C9 D0 DF ED 
192b9     08 1C 2B 3B 
192bd     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
192c1     F8 DC CA C3 
192c5     C5 CD DE E8 
192c9     EB E8 EA F7 
192cd     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
192d1     20 21 24 29 
192d5     29 2E 30 2E 
192d9     30 2E 2D 1D 
192dd     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
192e1     FB FD 03 0C 
192e5     11 18 1D 17 
192e9     16 FB E5 D5 
192ed     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
192f1     F6 10 24 24 
192f5     24 21 1F 26 
192f9     27 27 24 18 
192fd     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
19301     E7 ED F1 F2 
19305     F2 F5 F7 FA 
19309     FB 05 0D 21 
1930d     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
19311     53 4B 3B 28 
19315     08 F6 DD CC 
19319     CA C9 CC DC 
1931d     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
19321     BE C6 CC D6 
19325     DE E6 EB F9 
19329     02 06 03 03 
1932d     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
19331     F4 E3 DA DB 
19335     D9 E6 F4 07 
19339     18 24 29 27 
1933d     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
19341     EA E7 ED F4 
19345     03 14 1D 18 
19349     0E 08 02 05 
1934d     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
19351     0A 0A 0A 02 
19355     FC FB F6 F7 
19359     F7 F9 FE 07 
1935d     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
19361     1C 27 28 32 
19365     2D 22 13 FD 
19369     E8 DE D0 CD 
1936d     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
19371     0D 15 13 16 
19375     18 22 30 47 
19379     4E 56 51 3D 
1937d     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
19381     EE E4 E5 E3 
19385     E4 E9 ED EE 
19389     F3 F0 F7 F9 
1938d     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
19391     01 0B 0F 14 
19395     12 0A 09 09 
19399     14 14 19 11 
1939d     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
193a1     C4 CB DA DC 
193a5     DB E0 E0 DD 
193a9     DF EB EF 00 
193ad     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
193b1     24 19 18 17 
193b5     14 13 16 16 
193b9     16 14 04 00 
193bd     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
193c1     BC B9 BA BD 
193c5     CE E1 E5 EF 
193c9     03 06 0B 14 
193cd     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
193d1     23 1E 09 FE 
193d5     FA F4 F5 FC 
193d9     03 0C 19 1D 
193dd     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
193e1     37 3F 3D 33 
193e5     2B 1D 0A FE 
193e9     F5 F6 F7 F7 
193ed     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
193f1     13 0E 05 FD 
193f5     F9 FD FE 06 
193f9     05 02 FA FA 
193fd     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
19401     E8 E8 E9 FD 
19405     05 0A 0B 0B 
19409     0B 06 00 F9 
1940d     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
19411     F7 FE 09 16 
19415     1F 2D 34 3D 
19419     43 41 2D 15 
1941d     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
19421     E8 EA EF E7 
19425     E6 DB CD C8 
19429     BD B9 BC BA 
1942d     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
19431     FF 0C 1E 26 
19435     24 19 1A 12 
19439     12 08 07 FD 
1943d     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
19441     DE DC DB E2 
19445     E9 E5 F0 F9 
19449     06 1A 2B 39 
1944d     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
19451     26 18 07 05 
19455     05 06 10 18 
19459     26 2B 31 31 
1945d     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
19461     EA D2 C3 C0 
19465     BF BE CE E5 
19469     F7 00 06 07 
1946d     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
19471     1B 1A 15 0E 
19475     12 14 1C 1C 
19479     12 0E 05 00 
1947d     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
19481     03 0F 15 1C 
19485     22 20 21 1F 
19489     1C 15 07 04 
1948d     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
19491     00 06 05 07 
19495     06 01 00 F9 
19499     F4 E6 E2 DB 
1949d     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
194a1     DF E0 EA E3 
194a5     E4 DA D6 D6 
194a9     D4 CD D0 D8 
194ad     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
194b1     25 2C 37 3B 
194b5     3A 37 30 1B 
194b9     12 FF F9 F6 
194bd     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
194c1     FB FE 01 FE 
194c5     FD FA FA F5 
194c9     F1 F3 F2 F3 
194cd     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
194d1     EA F2 FC FB 
194d5     FE 08 10 1E 
194d9     2C 36 3A 40 
194dd     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
194e1     EF DC D4 D1 
194e5     D7 E8 FB 12 
194e9     21 31 3D 49 
194ed     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
194f1     18 13 14 17 
194f5     2B 33 31 31 
194f9     27 1E 10 02 
194fd     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
19501     C2 C6 C7 D1 
19505     DA EC F4 01 
19509     F6 EB E7 E0 
1950d     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
19511     14 1E 2B 32 
19515     30 30 23 0A 
19519     FB F8 EF EE 
1951d     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
19521     0B 0A 05 F4 
19525     E6 DA D7 D7 
19529     D9 E9 F5 0B 
1952d     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
19531     36 2B 1C 09 
19535     F9 DD C4 BD 
19539     B8 BA CE DB 
1953d     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
19541     EE E4 E0 E6 
19545     EF F8 01 07 
19549     15 1F 25 24 
1954d     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
19551     09 0E 15 24 
19555     2B 3A 3F 3F 
19559     3E 2E 25 1F 
1955d     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
19561     F1 EC F0 F8 
19565     04 12 14 16 
19569     14 13 10 FA 
1956d     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
19571     EA F2 F8 06 
19575     0A 0B 0B 06 
19579     02 02 00 00 
1957d     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
19581     07 06 05 06 
19585     09 0A 0A 0B 
19589     0A 09 04 FE 
1958d     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
19591     1B 28 37 3A 
19595     3F 2F 21 18 
19599     10 03 F9 E6 
1959d     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
195a1     D2 C3 BA B4 
195a5     AE B1 B6 B8 
195a9     C4 D6 E8 F6 
195ad     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
195b1     1C 22 23 1E 
195b5     12 FE ED E9 
195b9     EA F5 03 08 
195bd     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
195c1     FF FC FA FA 
195c5     FA F9 00 10 
195c9     21 31 30 31 
195cd     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
195d1     19 18 16 13 
195d5     10 0D 03 F6 
195d9     F1 E2 DE D8 
195dd     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
195e1     C8 CF E0 F4 
195e5     05 1C 2C 3A 
195e9     43 3F 2F 22 
195ed     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
195f1     16 1E 27 28 
195f5     25 1E 10 04 
195f9     FF FA F9 FB 
195fd     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
19601     1D 1B 1A 17 
19605     0D 00 F8 F9 
19609     EF E1 D4 D2 
1960d     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
19611     FF FD FE F3 
19615     EB E2 DA DD 
19619     DB DD E7 ED 
1961d     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
19621     08 FD F0 EB 
19625     EA F2 F8 01 
19629     0C 11 18 14 
1962d     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
19631     11 10 10 0D 
19635     00 00 00 07 
19639     0E 14 13 0E 
1963d     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
19641     D9 DB D6 D6 
19645     D6 D6 DE EC 
19649     F1 F7 F5 F5 
1964d     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
19651     2C 37 41 3F 
19655     3E 2E 1B 0B 
19659     00 FC FE FE 
1965d     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
19661     F6 FB 04 12 
19665     20 2C 38 30 
19669     2E 2D 2D 32 
1966d     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
19671     12 10 08 01 
19675     FA E9 E2 D5 
19679     D7 D8 D3 CD 
1967d     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
19681     DF DD E5 EB 
19685     01 11 1F 27 
19689     23 19 1A 18 
1968d     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
19691     2E 13 02 F4 
19695     EA E7 E2 E3 
19699     E0 E3 F4 05 
1969d     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
196a1     08 00 01 00 
196a5     F9 FA FA F9 
196a9     FA F9 F1 E8 
196ad     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
196b1     CB C1 BD BC 
196b5     BD C2 D1 E8 
196b9     03 12 1E 1A 
196bd     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
196c1     1A 18 17 14 
196c5     16 22 23 20 
196c9     1B 11 09 0A 
196cd     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
196d1     33 32 31 2C 
196d5     1D 10 09 01 
196d9     FE 01 01 F9 
196dd     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
196e1     F0 F7 FC 03 
196e5     F8 E4 DB DC 
196e9     DC E7 F0 F8 
196ed     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
196f1     30 33 34 2A 
196f5     1C 10 0E 10 
196f9     10 0F 05 05 
196fd     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
19701     E4 E6 F3 03 
19705     17 1E 21 20 
19709     28 25 28 38 
1970d     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
19711     F0 E0 D3 D3 
19715     D3 CE CA C6 
19719     C0 C6 C6 D1 
1971d     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
19721     CC E0 F6 10 
19725     1F 32 36 35 
19729     30 25 1D 0F 
1972d     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
19731     EA DF D7 D3 
19735     DA F2 01 12 
19739     14 0E 08 06 
1973d     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
19741     26 21 16 22 
19745     1B 1B 1A 10 
19749     08 02 FE 00 
1974d     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
19751     D4 CA C4 C2 
19755     BB BF D1 EE 
19759     08 1D 2E 3F 
1975d     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
19761     3A 45 37 27 
19765     11 01 F8 FA 
19769     FB 07 0B 09 
1976d     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
19771     26 24 19 18 
19775     13 16 17 17 
19779     12 09 FC F0 
1977d     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
19781     D9 DE D8 D6 
19785     D3 D4 D6 D9 
19789     E3 F0 02 12 
1978d     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
19791     0B 0B 0D 0D 
19795     0B 0A 07 07 
19799     07 09 07 F7 
1979d     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
197a1     FB 09 1B 26 
197a5     21 1F 1C 1B 
197a9     18 0E 00 FE 
197ad     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
197b1     DB DB DD E7 
197b5     EF FC EC D0 
197b9     C1 B6 AD B1 
197bd     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
197c1     F9 0E 25 3F 
197c5     57 5D 5B 58 
197c9     50 46 46 3C 
197cd     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
197d1     DB CB C9 CC 
197d5     D9 F2 03 13 
197d9     24 30 33 31 
197dd     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
197e1     32 24 12 06 
197e5     FD FA FE 04 
197e9     00 F8 EF E0 
197ed     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
197f1     CC CB CB D6 
197f5     E4 F1 03 0E 
197f9     1B 1A 1B 1B 
197fd     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
19801     1E 17 1A 15 
19805     09 FE F9 F9 
19809     00 0E 0B 06 
1980d     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
19811     F6 00 04 0A 
19815     09 04 03 06 
19819     0E 0D 05 FE 
1981d     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
19821     F4 E3 D9 CE 
19825     C3 C0 C2 BF 
19829     C2 CD CE DF 
1982d     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
19831     26 2B 34 35 
19835     2B 17 05 F7 
19839     E1 D6 D6 D8 
1983d     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
19841     19 2F 3F 4A 
19845     51 4C 45 3E 
19849     38 2E 21 18 
1984d     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
19851     D3 D6 D9 E3 
19855     E7 DB DF E0 
19859     E3 E5 E6 EB 
1985d     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
19861     0E 15 1E 2C 
19865     3A 44 43 44 
19869     3D 2A 19 11 
1986d     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
19871     E2 E4 E9 F3 
19875     02 0C 11 0F 
19879     08 07 0A 0B 
1987d     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
19881     0F 14 12 12 
19885     12 0F 0F 0A 
19889     FB E5 C5 AC 
1988d     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
19891     AE C2 D4 DF 
19895     EB FF 17 30 
19899     41 48 46 44 
1989d     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
198a1     20 09 F9 E1 
198a5     D2 C7 C5 CB 
198a9     D1 D7 E8 F2 
198ad     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
198b1     26 25 19 0C 
198b5     00 EF E7 E2 
198b9     E3 EB FA 06 
198bd     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
198c1     F6 F6 F7 FC 
198c5     FA F7 F7 F7 
198c9     FC FE FE 00 
198cd     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
198d1     22 2F 32 2C 
198d5     2D 26 24 1C 
198d9     15 04 00 FC 
198dd     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
198e1     0A 15 22 29 
198e5     2D 32 32 22 
198e9     10 04 06 06 
198ed     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
198f1     06 05 00 F5 
198f5     DC C3 AF A5 
198f9     A1 AA BB CD 
198fd     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
19901     20 31 41 49 
19905     4F 4E 3A 2D 
19909     1B 01 EC DC 
1990d     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
19911     DB E1 E7 F5 
19915     03 17 29 3A 
19919     3C 3A 39 37 
1991d     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
19921     FE F5 F0 E1 
19925     E6 E9 E4 DB 
19929     D2 C4 BD BE 
1992d     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
19931     C5 CD D8 DD 
19935     DF E7 FA 0A 
19939     22 39 4A 53 
1993d     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
19941     3A 33 2A 18 
19945     05 FC F1 F2 
19949     F0 EB EC EE 
1994d     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
19951     1E 1C 1B 1A 
19955     1B 22 23 24 
19959     24 23 0E 05 
1995d     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
19961     CC C9 C7 CF 
19965     DB E0 E7 E9 
19969     F9 06 1C 32 
1996d     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
19971     3D 39 2E 17 
19975     05 F5 E9 E2 
19979     DE E5 E5 E4 
1997d     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
19981     19 1E 29 28 
19985     14 0C FF F3 
19989     E5 D9 D2 D4 
1998d     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
19991     0C 0D 0A FF 
19995     00 FD F3 EB 
19999     E3 D5 D7 DC 
1999d     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
199a1     03 05 0F 15 
199a5     1B 15 11 08 
199a9     02 03 02 01 
199ad     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
199b1     DB DC DB DB 
199b5     E0 E7 FA 0F 
199b9     21 39 37 36 
199bd     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
199c1     3A 33 2C 1D 
199c5     0A 06 FF EF 
199c9     DC C5 BB B7 
199cd     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
199d1     E3 F5 05 18 
199d5     29 3B 47 4C 
199d9     3F 32 2B 23 
199dd     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
199e1     EE F2 F7 FB 
199e5     FB F9 F4 FA 
199e9     0A 1E 2A 2D 
199ed     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
199f1     15 0D 00 FE 
199f5     F5 F6 F6 00 
199f9     00 01 FE 01 
199fd     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
19a01     E0 D7 C3 B1 
19a05     AF B2 BF CC 
19a09     D1 DF EB 02 
19a0d     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
19a11     3F 3D 3E 3D 
19a15     3D 38 29 1D 
19a19     0A FA F3 F0 
19a1d     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
19a21     EE F6 F6 F3 
19a25     F2 F0 EB F1 
19a29     F8 01 09 0F 
19a2d     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
19a31     EB E5 D6 CC 
19a35     C4 C0 CC D9 
19a39     DD ED F7 02 
19a3d     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
19a41     46 3E 34 27 
19a45     1E 14 0C FF 
19a49     FA F1 F3 F5 
19a4d     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
19a51     05 07 0F 1D 
19a55     27 2D 2D 19 
19a59     15 07 0A 07 
19a5d     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
19a61     F6 00 03 05 
19a65     06 09 0A 11 
19a69     12 12 07 F2 
19a6d     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
19a71     E4 F1 00 0C 
19a75     1A 1D 24 25 
19a79     20 1F 0F 03 
19a7d     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
19a81     F6 EA E4 DE 
19a85     DC D7 D8 D6 
19a89     D3 D6 E1 F6 
19a8d     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
19a91     2A 37 44 47 
19a95     44 3D 2A 10 
19a99     02 FC FE 00 
19a9d     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
19aa1     C4 B2 AB A7 
19aa5     A9 BB CE E9 
19aa9     07 19 1E 16 
19aad     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
19ab1     01 F5 EB E7 
19ab5     EA FA 0D 1E 
19ab9     2A 2D 2A 2D 
19abd     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
19ac1     15 03 FD F8 
19ac5     FA FA 02 03 
19ac9     08 0F 15 13 
19acd     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
19ad1     07 06 06 09 
19ad5     06 EF DF CF 
19ad9     CE D5 DE EC 
19add     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
19ae1     07 0C 16 1E 
19ae5     1F 1F 21 26 
19ae9     25 23 19 11 
19aed     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
19af1     13 16 1B 18 
19af5     17 12 03 FE 
19af9     F4 E6 E2 DB 
19afd     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
19b01     E9 E6 E4 E5 
19b05     E8 E8 E0 D4 
19b09     D4 D6 D8 E3 
19b0d     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
19b11     2B 3D 50 57 
19b15     4E 3A 24 13 
19b19     0F 0A 0D 0B 
19b1d     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
19b21     E3 DC DF DC 
19b25     DD E7 EF FD 
19b29     00 FE F4 EB 
19b2d     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
19b31     E3 D9 DC EC 
19b35     FA 0B 1C 25 
19b39     29 2F 2D 23 
19b3d     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
19b41     E8 DD DA DD 
19b45     EF 02 13 24 
19b49     2F 33 27 1F 
19b4d     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
19b51     01 06 0A 07 
19b55     FD FD FE 08 
19b59     0E 1A 16 0C 
19b5d     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
19b61     F6 F9 00 06 
19b65     05 07 0F 19 
19b69     1D 1C 17 16 
19b6d     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
19b71     1B 16 16 09 
19b75     FC 00 00 E0 
19b79     F6 F5 04 0D 
19b7d     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
19b81     0E 0F 12 17 
19b85     17 0C FD F0 
19b89     EC EE F8 08 
19b8d     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
19b91     0A 07 06 01 
19b95     01 FF FF F8 
19b99     F7 F2 E3 D9 
19b9d     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
19ba1     AB AC B8 C6 
19ba5     DA ED FD 05 
19ba9     12 1C 2B 39 
19bad     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
19bb1     35 16 F7 EE 
19bb5     E9 EA E9 DF 
19bb9     D1 CE CE CE 
19bbd     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
19bc1     0E 1F 20 29 
19bc5     2D 27 1B 16 
19bc9     0D 09 FF F9 
19bcd     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
19bd1     DF E3 E4 EE 
19bd5     F7 04 12 20 
19bd9     2A 2E 2A 2D 
19bdd     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
19be1     3F 38 1A 06 
19be5     F1 E0 D7 DB 
19be9     CE D3 DA DC 
19bed     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
19bf1     E7 E2 D9 DD 
19bf5     D1 CD CE CB 
19bf9     D0 D7 DE ED 
19bfd     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
19c01     06 0E 06 05 
19c05     05 0A 0E 15 
19c09     24 2E 33 38 
19c0d     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
19c11     2C 2A 22 21 
19c15     10 03 F9 EA 
19c19     E7 E2 C4 B9 
19c1d     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
19c21     AF B1 BB C9 
19c25     D6 EA E4 EF 
19c29     EE FE 01 11 
19c2d     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
19c31     1C 12 0D 04 
19c35     F7 E9 D5 D3 
19c39     C2 CC D3 DD 
19c3d     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
19c41     41 5D 69 6E 
19c45     62 4A 3A 1F 
19c49     07 F9 E8 DF 
19c4d     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
19c51     E4 EB ED F2 
19c55     F6 FA 01 08 
19c59     07 07 0C 10 
19c5d     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
19c61     15 0C FF F5 
19c65     F2 DA CF D3 
19c69     C9 D1 E5 F6 
19c6d     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
19c71     07 05 07 0C 
19c75     10 0F 0E FE 
19c79     F9 F2 E1 DE 
19c7d     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
19c81     E7 F2 00 08 
19c85     1B 2B 2D 32 
19c89     38 36 1F 0C 
19c8d     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
19c91     D5 DC E2 F0 
19c95     F4 FF 09 06 
19c99     F2 D7 C7 B5 
19c9d     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
19ca1     E0 E7 FB 12 
19ca5     19 31 32 34 
19ca9     2C 26 18 11 
19cad     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
19cb1     03 FE FF FE 
19cb5     F6 EF DC D4 
19cb9     CF C5 CC DB 
19cbd     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
19cc1     20 2D 2F 21 
19cc5     21 16 1A 1A 
19cc9     17 14 0C F6 
19ccd     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
19cd1     E3 E4 EF EE 
19cd5     FB 08 15 2E 
19cd9     48 58 63 60 
19cdd     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
19ce1     FB E7 E1 C5 
19ce5     C5 C3 CB DB 
19ce9     EE FA 0B 12 
19ced     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
19cf1     BB B9 B9 BC 
19cf5     BF C7 D1 DE 
19cf9     E8 F5 FF 03 
19cfd     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
19d01     E0 F0 04 1E 
19d05     36 4E 67 6D 
19d09     75 6E 64 4C 
19d0d     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
19d11     D0 CD C8 D1 
19d15     DF E4 E9 D6 
19d19     D1 CA CA CA 
19d1d     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
19d21     E3 DC E8 ED 
19d25     EE F3 F0 E3 
19d29     E4 E4 EB F2 
19d2d     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
19d31     09 FE F8 E9 
19d35     DC D2 CD CB 
19d39     D5 DA F8 0E 
19d3d     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
19d41     6C 52 43 28 
19d45     19 12 0D 0D 
19d49     01 FD FE F9 
19d4d     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
19d51     E3 D4 C8 B5 
19d55     B6 C5 D8 EF 
19d59     06 17 23 31 
19d5d     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
19d61     1D 01 EE D7 
19d65     D2 D3 D6 E8 
19d69     03 17 1E 1D 
19d6d     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
19d71     FE F9 F4 EA 
19d75     E4 DE DC D7 
19d79     D8 DB D6 CA 
19d7d     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
19d81     F7 11 20 37 
19d85     37 39 3E 38 
19d89     31 1C 09 ED 
19d8d     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
19d91     C4 D6 DF F4 
19d95     F7 EC DE D4 
19d99     CC CB D0 DB 
19d9d     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
19da1     32 36 3B 3A 
19da5     30 1B 0A F4 
19da9     EE E1 DF EC 
19dad     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
19db1     EF FB FA F2 
19db5     E8 DA C1 A7 
19db9     A3 A4 B4 C7 
19dbd     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
19dc1     1D 1D 25 2B 
19dc5     31 3B 37 37 
19dc9     30 27 1A 07 
19dcd     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
19dd1     E0 DE DD E8 
19dd5     F5 11 1F 2A 
19dd9     33 32 32 35 
19ddd     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
19de1     EA D9 D6 D6 
19de5     E6 F3 00 13 
19de9     0E FD DC CF 
19ded     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
19df1     B1 C1 C8 DC 
19df5     E5 EB FA FC 
19df9     F9 EF DD D1 
19dfd     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
19e01     07 2B 3E 54 
19e05     60 6C 78 75 
19e09     65 4F 20 FD 
19e0d     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
19e11     C2 CC D0 D2 
19e15     CF CF D0 D2 
19e19     D7 DD DB D6 
19e1d     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
19e21     E9 EA E8 E9 
19e25     E9 E4 E8 E0 
19e29     E7 EE F3 02 
19e2d     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
19e31     F5 FC FD FD 
19e35     EB E4 DB D7 
19e39     E3 F0 02 14 
19e3d     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
19e41     26 25 1B 1D 
19e45     1D 27 25 2A 
19e49     29 24 15 0B 
19e4d     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
19e51     AB A7 AB BD 
19e55     CC E2 F8 04 
19e59     0D 1D 2A 38 
19e5d     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
19e61     F8 E9 EA EA 
19e65     FA 06 10 0F 
19e69     04 FF F5 F0 
19e6d     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
19e71     FF 01 00 FD 
19e75     E8 DD D6 C9 
19e79     C4 C3 C3 C6 
19e7d     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
19e81     F9 01 01 08 
19e85     12 1C 21 1D 
19e89     04 ED D6 C9 
19e8d     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
19e91     ED F1 ED ED 
19e95     EC EA EF F1 
19e99     FC 07 0F 18 
19e9d     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
19ea1     1A 1A 10 0F 
19ea5     08 F2 E6 CF 
19ea9     D6 D3 D2 DD 
19ead     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
19eb1     01 F5 E1 C6 
19eb5     B8 A8 A7 AB 
19eb9     B7 C6 DA ED 
19ebd     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
19ec1     1E 30 41 4D 
19ec5     51 56 4F 3F 
19ec9     28 18 06 EC 
19ecd     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
19ed1     DD E6 FE 0F 
19ed5     20 32 39 31 
19ed9     28 28 20 23 
19edd     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
19ee1     E8 E9 F3 EC 
19ee5     E5 D5 C2 B6 
19ee9     B1 AB AF B2 
19eed     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
19ef1     FC 00 FD FE 
19ef5     FD FB F4 F2 
19ef9     E8 E3 E5 E8 
19efd     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
19f01     1D 2A 34 42 
19f05     58 5A 53 3D 
19f09     1D 03 DE C5 
19f0d     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
19f11     B9 BE C8 D7 
19f15     E1 DA DC E1 
19f19     EB F1 F7 F3 
19f1d     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
19f21     E5 EA EC E4 
19f25     DB DB E0 E1 
19f29     E9 EE F0 F2 
19f2d     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
19f31     05 F9 EB E2 
19f35     E3 E1 F5 05 
19f39     18 28 21 26 
19f3d     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
19f41     1D 26 35 3C 
19f45     44 3D 2A 09 
19f49     EC D3 C5 B2 
19f4d     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
19f51     B9 C6 DC F3 
19f55     03 0C 1B 27 
19f59     3E 4B 50 40 
19f5d     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
19f61     FE F9 F7 EB 
19f65     D7 CB CF D2 
19f69     E3 EC FF 0F 
19f6d     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
19f71     F9 E8 D1 CC 
19f75     C8 CC CE D8 
19f79     D4 CA CC CC 
19f7d     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
19f81     F5 02 10 1D 
19f85     21 1B 10 00 
19f89     EF E6 DE E3 
19f8d     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
19f91     D8 DB E2 E7 
19f95     EE FC 08 16 
19f99     28 30 2D 2C 
19f9d     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
19fa1     1A FD E2 CF 
19fa5     BF B8 BC BF 
19fa9     C7 D1 DA D3 
19fad     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
19fb1     C8 C7 B7 B9 
19fb5     BA C7 DB E9 
19fb9     EB F9 02 16 
19fbd     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
19fc1     64 66 66 5A 
19fc5     41 21 08 F4 
19fc9     E5 E2 E0 EA 
19fcd     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
19fd1     0E 1A 12 12 
19fd5     08 0A 0D 18 
19fd9     1C 11 16 0B 
19fdd     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
19fe1     CB C6 A9 A8 
19fe5     A1 A5 AF BD 
19fe9     D4 E4 FB 0B 
19fed     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
19ff1     12 FD FC EE 
19ff5     F2 F0 DE E0 
19ff9     D6 DB E6 EF 
19ffd     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
1a001     49 56 5A 4F 
1a005     3B 1C 03 E5 
1a009     CE C7 C2 C1 
1a00d     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
1a011     B6 B9 C4 CD 
1a015     DB ED FD 00 
1a019     FF F4 F5 ED 
1a01d     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
1a021     F5 F5 EB E7 
1a025     E9 E8 E9 E9 
1a029     E2 E3 E4 F4 
1a02d     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
1a031     FD FD FF 09 
1a035     0F 0F 04 FF 
1a039     FF 01 08 11 
1a03d     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
1a041     4C 40 27 0E 
1a045     F9 E0 CD C8 
1a049     C9 C6 C5 C5 
1a04d     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
1a051     F7 09 15 28 
1a055     34 46 42 44 
1a059     33 25 17 FC 
1a05d     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
1a061     BF BD C8 D7 
1a065     E9 FE 0A 16 
1a069     1B 22 21 1F 
1a06d     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
1a071     D9 DD D6 C8 
1a075     C6 BC B3 AB 
1a079     B3 B4 C6 D5 
1a07d     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
1a081     19 27 2A 29 
1a085     1F 1A 10 07 
1a089     FA EB D4 C5 
1a08d     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
1a091     E9 F9 0A 21 
1a095     36 42 3F 42 
1a099     35 2A 17 0B 
1a09d     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
1a0a1     BE BB B0 B7 
1a0a5     B5 B4 B6 B6 
1a0a9     B6 C3 CB DA 
1a0ad     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
1a0b1     DC E6 E6 E8 
1a0b5     ED F4 05 1B 
1a0b9     2B 3B 3E 4A 
1a0bd     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
1a0c1     31 2A 1C 10 
1a0c5     07 02 06 09 
1a0c9     11 13 0E FF 
1a0cd     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
1a0d1     00 04 03 0D 
1a0d5     0D 15 0E 05 
1a0d9     FB EB D8 C5 
1a0dd     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
1a0e1     9A A6 BA CF 
1a0e5     DC F7 06 1B 
1a0e9     2D 38 36 36 
1a0ed     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
1a0f1     E7 E2 E5 E4 
1a0f5     E5 E6 E6 EE 
1a0f9     FD 0F 21 2D 
1a0fd     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
1a101     1F 15 0D FD 
1a105     F0 E2 DE C0 
1a109     B0 A4 A2 A4 
1a10d     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
1a111     E8 F4 02 0B 
1a115     0E 0E 0F 0D 
1a119     0F 0D 08 07 
1a11d     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
1a121     C5 BC B9 BF 
1a125     CE D5 E2 E7 
1a129     EE FD 0A 14 
1a12d     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
1a131     0A F8 F5 F7 
1a135     01 07 17 21 
1a139     2F 2A 2A 27 
1a13d     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
1a141     F4 EF E8 DE 
1a145     E0 E0 EB E8 
1a149     E9 E6 E6 F0 
1a14d     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
1a151     35 27 1F 16 
1a155     17 17 12 0E 
1a159     FD EF E2 CF 
1a15d     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
1a161     F0 F4 03 07 
1a165     11 12 14 12 
1a169     13 09 05 ED 
1a16d     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
1a171     BC B9 BA B9 
1a175     B6 B9 CA D6 
1a179     F3 FC 09 0E 
1a17d     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
1a181     42 34 1F 03 
1a185     E5 C7 B3 B1 
1a189     B4 BF D3 E5 
1a18d     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
1a191     4A 43 42 3D 
1a195     32 2C 1D 0B 
1a199     FB F8 F1 E7 
1a19d     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
1a1a1     91 93 A0 A5 
1a1a5     B3 B1 B9 C5 
1a1a9     DC E9 F6 FB 
1a1ad     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
1a1b1     F3 04 12 1F 
1a1b5     29 28 2A 2D 
1a1b9     32 36 36 31 
1a1bd     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
1a1c1     28 29 28 28 
1a1c5     1D 1C 0C FB 
1a1c9     E9 DD DF EF 
1a1cd     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
1a1d1     F4 EF F2 F5 
1a1d5     FA F7 E5 D6 
1a1d9     BD AD A6 A9 
1a1dd     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
1a1e1     FD 13 24 39 
1a1e5     37 35 2A 1A 
1a1e9     09 FB EF E3 
1a1ed     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
1a1f1     F0 ED E8 E9 
1a1f5     EE 01 00 11 
1a1f9     15 0E 08 0A 
1a1fd     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
1a201     1E 01 E6 B9 
1a205     AA 9B 9A 9B 
1a209     9E B3 BF D8 
1a20d     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
1a211     10 15 24 2E 
1a215     31 2B 22 19 
1a219     02 F8 E4 C9 
1a21d     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
1a221     CD E4 EF EC 
1a225     E7 F3 00 11 
1a229     1D 1A 1C 12 
1a22d     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
1a231     F2 06 0F 0D 
1a235     10 13 13 13 
1a239     0E 0A 06 05 
1a23d     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
1a241     14 0F 0F 0E 
1a245     0E 0D 01 FD 
1a249     F8 FF FE FF 
1a24d     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
1a251     F7 0B 1E 26 
1a255     21 11 FF E7 
1a259     DA DF DF E1 
1a25d     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
1a261     16 1C 1A 1C 
1a265     15 FF F7 EF 
1a269     E0 DB CC C8 
1a26d     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
1a271     BF BE BE C6 
1a275     CD E8 F5 02 
1a279     04 0A 19 2B 
1a27d     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
1a281     FC E7 D7 D6 
1a285     DD DF EA F2 
1a289     F8 0D 1B 2D 
1a28d     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
1a291     23 21 21 11 
1a295     0D 08 FE E7 
1a299     D7 C7 B5 A3 
1a29d     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
1a2a1     B7 BD BD C4 
1a2a5     CE DE F1 03 
1a2a9     11 13 14 02 
1a2ad     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
1a2b1     F5 FA 00 0E 
1a2b5     1B 2D 31 42 
1a2b9     3F 41 43 44 
1a2bd     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
1a2c1     3E 2E 27 13 
1a2c5     02 F2 EA E5 
1a2c9     E5 E8 E8 E0 
1a2cd     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
1a2d1     DE EC EF EE 
1a2d5     EE D7 D0 CB 
1a2d9     CE D8 E7 F3 
1a2dd     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
1a2e1     20 16 0D 04 
1a2e5     00 00 07 0E 
1a2e9     0E 15 14 0D 
1a2ed     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
1a2f1     DE DB DF E4 
1a2f5     EA EC E7 E6 
1a2f9     EB F7 0B 12 
1a2fd     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
1a301     D1 C8 BC B9 
1a305     BA BD C9 D7 
1a309     EA F3 FD 03 
1a30d     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
1a311     2F 23 1E 0B 
1a315     FF F2 E5 DE 
1a319     DD D8 D9 DB 
1a31d     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
1a321     F0 EE E7 EE 
1a325     F8 05 0A 11 
1a329     17 FB F9 F4 
1a32d     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
1a331     F3 F2 F3 F2 
1a335     F3 F6 FE 0C 
1a339     15 29 3E 40 
1a33d     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
1a341     40 31 1F 05 
1a345     F1 D7 CC C4 
1a349     CB D4 D8 DD 
1a34d     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
1a351     20 21 21 0A 
1a355     FE F4 F6 F9 
1a359     FB FB FE FE 
1a35d     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
1a361     FF F8 F7 F5 
1a365     F5 F0 EC ED 
1a369     E5 E8 E8 E8 
1a36d     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
1a371     D4 D6 DE E4 
1a375     E1 E3 DE DF 
1a379     E7 F6 03 16 
1a37d     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
1a381     1D 20 1B 12 
1a385     09 FE F9 F0 
1a389     F8 F5 F6 00 
1a38d     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
1a391     16 0B 0A FF 
1a395     F7 EA E1 D4 
1a399     C8 BA B5 AF 
1a39d     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
1a3a1     CF D4 DE ED 
1a3a5     F4 09 0A FF 
1a3a9     F4 E7 EA ED 
1a3ad     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
1a3b1     17 1C 2A 2D 
1a3b5     3C 43 42 4E 
1a3b9     4B 50 59 58 
1a3bd     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
1a3c1     33 25 12 F3 
1a3c5     DA C7 BF B9 
1a3c9     AF AF B0 AB 
1a3cd     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
1a3d1     F9 FB F7 F5 
1a3d5     FF 03 11 18 
1a3d9     16 11 02 FE 
1a3dd     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
1a3e1     04 0D 1A 1E 
1a3e5     2C 2F 2C 2C 
1a3e9     1F 11 04 FC 
1a3ed     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
1a3f1     C9 C9 C6 CD 
1a3f5     D3 D2 D3 DE 
1a3f9     ED FF 08 0E 
1a3fd     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
1a401     FF 04 05 FB 
1a405     F1 EB E4 DF 
1a409     E3 E5 ED F2 
1a40d     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
1a411     00 02 01 08 
1a415     09 0E 18 13 
1a419     12 07 FF F4 
1a41d     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
1a421     D9 D8 E3 F3 
1a425     F8 01 F9 E9 
1a429     E4 E5 EA F5 
1a42d     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
1a431     F2 F3 FF 12 
1a435     24 35 41 4F 
1a439     59 5D 5E 5E 
1a43d     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
1a441     19 11 F8 E6 
1a445     D3 C8 BF C3 
1a449     C6 CD DC E8 
1a44d     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
1a451     FE F9 F2 F5 
1a455     00 08 10 14 
1a459     0E 08 FA F6 
1a45d     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
1a461     03 0B 0A 0D 
1a465     0F 10 0D 03 
1a469     FF FE F4 F0 
1a46d     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
1a471     AF AB B2 BE 
1a475     CD D9 E6 FF 
1a479     14 30 32 37 
1a47d     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
1a481     38 29 12 FE 
1a485     E9 DC D2 CD 
1a489     CF D9 E7 EB 
1a48d     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
1a491     FB FB F9 FB 
1a495     FD FE FD F8 
1a499     E9 E5 DE DC 
1a49d     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
1a4a1     D4 D4 DF EC 
1a4a5     EF E9 E8 EA 
1a4a9     EC F7 00 0B 
1a4ad     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
1a4b1     21 31 36 35 
1a4b5     40 44 49 4F 
1a4b9     54 5A 58 57 
1a4bd     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
1a4c1     12 01 E9 D2 
1a4c5     C2 B1 AA AC 
1a4c9     B3 BA CA D1 
1a4cd     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
1a4d1     F2 F2 F3 F2 
1a4d5     F7 00 03 08 
1a4d9     0E 0E 13 13 
1a4dd     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
1a4e1     1B 26 33 30 
1a4e5     31 20 11 04 
1a4e9     F8 F4 EA E1 
1a4ed     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
1a4f1     A4 A1 AA B4 
1a4f5     C6 D8 EF 06 
1a4f9     1D 22 25 25 
1a4fd     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
1a501     16 0B FE FA 
1a505     E5 DA D1 CD 
1a509     CF D7 E3 E7 
1a50d     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
1a511     FF 06 05 10 
1a515     19 1E 1D 0D 
1a519     FF EE E6 E0 
1a51d     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
1a521     E2 F0 F2 E2 
1a525     DB D5 D6 D1 
1a529     DD E2 F0 04 
1a52d     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
1a531     31 2E 36 34 
1a535     35 3A 3B 40 
1a539     47 40 42 3D 
1a53d     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
1a541     15 FC E3 D3 
1a545     BC B7 BC C7 
1a549     D7 E3 E1 E4 
1a54d     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
1a551     F3 EB ED EE 
1a555     ED EC ED F8 
1a559     05 11 18 1E 
1a55d     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
1a561     25 27 25 15 
1a565     08 FC EF E3 
1a569     DE DC D5 CC 
1a56d     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
1a571     C0 CE DC E6 
1a575     F5 FA 0F 20 
1a579     1F 29 2D 21 
1a57d     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
1a581     04 08 07 06 
1a585     FF F9 F0 DC 
1a589     D4 CC CC D1 
1a58d     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
1a591     06 0C 15 14 
1a595     14 08 F8 E6 
1a599     D5 CD CA CE 
1a59d     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
1a5a1     FA 04 01 FE 
1a5a5     EE E1 D3 C7 
1a5a9     C5 D1 E5 00 
1a5ad     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
1a5b1     3B 3D 3F 47 
1a5b5     4C 51 51 53 
1a5b9     50 3E 28 19 
1a5bd     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
1a5c1     FF F3 E8 DA 
1a5c5     D8 DC E1 E7 
1a5c9     E8 E3 E6 E8 
1a5cd     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
1a5d1     DA D8 DD E7 
1a5d5     FE 0E 25 2B 
1a5d9     29 28 1E 15 
1a5dd     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
1a5e1     14 0D 08 FC 
1a5e5     FD F3 F5 F2 
1a5e9     ED E9 E2 C4 
1a5ed     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
1a5f1     B3 D5 EF 09 
1a5f5     21 3C 40 3F 
1a5f9     35 1E FF E3 
1a5fd     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
1a601     F3 04 07 09 
1a605     10 12 10 12 
1a609     02 F8 E9 DF 
1a60d     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
1a611     F0 FD 01 0B 
1a615     07 FD F5 E6 
1a619     E4 E8 EF F8 
1a61d     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
1a621     ED E5 DF DF 
1a625     D4 D3 D8 DC 
1a629     ED 03 12 23 
1a62d     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
1a631     2D 30 37 37 
1a635     3F 41 41 42 
1a639     43 3E 34 2B 
1a63d     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
1a641     D7 C5 C1 C8 
1a645     D1 E3 F0 F7 
1a649     F6 00 06 05 
1a64d     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
1a651     C2 B7 BF D3 
1a655     EE 0C 21 37 
1a659     46 4E 4B 48 
1a65d     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
1a661     F3 EB E1 E3 
1a665     DE DF E1 E6 
1a669     E6 E6 E8 DE 
1a66d     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
1a671     DA E9 F5 03 
1a675     14 15 17 0D 
1a679     F5 E4 CD CF 
1a67d     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
1a681     1F 1B 11 08 
1a685     00 01 FA F1 
1a689     F2 F3 F5 F7 
1a68d     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
1a691     F0 F0 ED F0 
1a695     F1 E9 DF DB 
1a699     E1 EA F8 09 
1a69d     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
1a6a1     0D F9 D8 C1 
1a6a5     A6 A4 AD C3 
1a6a9     E3 FC 0A 16 
1a6ad     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
1a6b1     52 56 5C 56 
1a6b5     3D 2C 1B 09 
1a6b9     FB FE FD 07 
1a6bd     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
1a6c1     01 F4 EB EE 
1a6c5     F3 02 06 0F 
1a6c9     0D 05 FC F3 
1a6cd     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
1a6d1     E0 F2 FE 12 
1a6d5     13 10 12 0F 
1a6d9     10 13 18 0C 
1a6dd     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
1a6e1     EC EE EE F1 
1a6e5     F6 FA E7 DD 
1a6e9     D5 C7 B9 B7 
1a6ed     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
1a6f1     23 36 42 33 
1a6f5     24 09 FB E0 
1a6f9     CD C7 C4 D0 
1a6fd     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
1a701     1F 26 3A 3E 
1a705     3D 2B 15 FB 
1a709     E5 CF C2 BA 
1a70d     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
1a711     D2 E2 EF FC 
1a715     FF FF 06 07 
1a719     05 02 03 08 
1a71d     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
1a721     F9 F1 E8 E8 
1a725     E5 E6 EE F8 
1a729     05 0C 1B 22 
1a72d     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
1a731     44 46 46 46 
1a735     3C 2E 1C 04 
1a739     F5 E9 DA D7 
1a73d     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
1a741     D5 E1 F0 FE 
1a745     11 1F 30 31 
1a749     26 1E FF E9 
1a74d     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
1a751     DB F2 08 21 
1a755     2C 2E 33 34 
1a759     2A 21 19 11 
1a75d     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
1a761     EE E2 E0 DF 
1a765     E1 EE F9 FE 
1a769     F8 EE E1 DC 
1a76d     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
1a771     FF FA F2 E6 
1a775     E6 D4 CD C9 
1a779     D4 E3 FA 0F 
1a77d     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
1a781     13 18 21 1D 
1a785     1C 1B 18 0D 
1a789     FF F3 DA C8 
1a78d     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
1a791     E8 FA F9 F9 
1a795     F9 F7 FC 07 
1a799     17 29 2D 29 
1a79d     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
1a7a1     C3 BB B8 BA 
1a7a5     CA D4 F0 FF 
1a7a9     0A 1E 30 42 
1a7ad     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
1a7b1     49 3B 28 17 
1a7b5     00 F1 EA E2 
1a7b9     E5 EF F7 04 
1a7bd     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
1a7c1     0D 24 2B 31 
1a7c5     38 34 1A 04 
1a7c9     F8 F0 EB ED 
1a7cd     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
1a7d1     F7 F7 F0 F0 
1a7d5     ED EA EA EF 
1a7d9     F1 F3 F8 FA 
1a7dd     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
1a7e1     F7 E9 E2 E1 
1a7e5     DF E4 E4 E5 
1a7e9     E5 F0 F6 00 
1a7ed     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
1a7f1     06 FA F3 E1 
1a7f5     E0 E0 DF E0 
1a7f9     EB F1 00 0C 
1a7fd     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
1a801     3A 33 1F 0C 
1a805     FA EA D9 C6 
1a809     B4 A8 A1 A0 
1a80d     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
1a811     02 14 13 13 
1a815     13 16 1B 1D 
1a819     20 1D 09 FC 
1a81d     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
1a821     EA EC EE F9 
1a825     08 0F 1F 2C 
1a829     2E 3D 3B 3D 
1a82d     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
1a831     3E 33 1B 01 
1a835     EC CC B9 AF 
1a839     B4 B2 B4 C5 
1a83d     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
1a841     1F 3B 51 56 
1a845     3E 24 0F 02 
1a849     F9 F1 E8 E9 
1a84d     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
1a851     01 07 03 08 
1a855     0C 10 17 17 
1a859     16 1B 18 16 
1a85d     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
1a861     E2 E1 E4 F4 
1a865     F1 F2 F2 E8 
1a869     E2 E3 E4 E4 
1a86d     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
1a871     C3 CB CC DE 
1a875     F0 02 03 0A 
1a879     11 10 12 14 
1a87d     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
1a881     16 0E 0D 0B 
1a885     01 FC EE E9 
1a889     D8 D3 C9 CE 
1a88d     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
1a891     F6 F6 01 0C 
1a895     1A 28 2F 2A 
1a899     11 F8 DF D3 
1a89d     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
1a8a1     C9 DA E7 F9 
1a8a5     09 1B 32 47 
1a8a9     47 4D 52 51 
1a8ad     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
1a8b1     0E FD E5 D9 
1a8b5     D5 CF D7 E2 
1a8b9     EF FD 0A 17 
1a8bd     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
1a8c1     48 43 28 16 
1a8c5     01 F7 FA FB 
1a8c9     FD FD F8 F1 
1a8cd     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
1a8d1     C2 C1 C3 D0 
1a8d5     DB F0 F9 03 
1a8d9     16 24 1A 18 
1a8dd     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
1a8e1     EC E7 E8 E8 
1a8e5     E9 EE F0 F8 
1a8e9     06 12 20 22 
1a8ed     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
1a8f1     E9 EC F3 FA 
1a8f5     F9 FA 01 FF 
1a8f9     09 0F 18 18 
1a8fd     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
1a901     EC D8 CD C3 
1a905     BB BA B9 BA 
1a909     BD C7 DE F5 
1a90d     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
1a911     1C 1B 1D 1F 
1a915     20 16 FE EF 
1a919     E6 E0 EB F9 
1a91d     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
1a921     1B 1B 20 24 
1a925     2A 2A 29 2A 
1a929     2C 2A 2D 2D 
1a92d     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
1a931     DB C6 B0 A4 
1a935     9C A3 B2 C3 
1a939     E3 00 13 23 
1a93d     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
1a941     4D 3C 29 19 
1a945     11 0D 06 FD 
1a949     F8 F1 E8 E9 
1a94d     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
1a951     06 07 0F 0F 
1a955     12 12 10 0F 
1a959     05 FD F4 EB 
1a95d     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
1a961     DF E6 E8 E9 
1a965     DF D6 D1 D2 
1a969     DD DB DD DF 
1a96d     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
1a971     10 1A 25 28 
1a975     22 19 18 17 
1a979     14 09 FE F4 
1a97d     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
1a981     08 07 07 FF 
1a985     F8 EF E0 DB 
1a989     DB DD E2 EB 
1a98d     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
1a991     08 0A 11 03 
1a995     F6 E4 CD BB 
1a999     BC C2 D1 E3 
1a99d     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
1a9a1     21 2D 3F 46 
1a9a5     4B 4B 48 47 
1a9a9     42 38 29 0E 
1a9ad     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
1a9b1     CF D5 DE EB 
1a9b5     F5 0A 21 36 
1a9b9     3B 34 34 32 
1a9bd     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
1a9c1     07 FB FD FB 
1a9c5     00 FF FD EB 
1a9c9     D7 C5 B2 B6 
1a9cd     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
1a9d1     E8 FA 0D 15 
1a9d5     28 24 27 24 
1a9d9     1A 0D FF ED 
1a9dd     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
1a9e1     E4 F0 02 09 
1a9e5     0F 19 1D 12 
1a9e9     0D 06 FD EF 
1a9ed     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
1a9f1     14 14 04 00 
1a9f5     FA FE 01 FA 
1a9f9     F1 E1 CF CB 
1a9fd     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
1aa01     D5 DA E1 E6 
1aa05     EB EA F7 FC 
1aa09     02 0C 1E 2A 
1aa0d     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
1aa11     08 F5 EE E9 
1aa15     E9 F3 FC 0C 
1aa19     20 2C 31 2D 
1aa1d     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
1aa21     1B 1C 1F 1F 
1aa25     17 16 0E 0D 
1aa29     05 FC EE D8 
1aa2d     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
1aa31     AD B3 C2 E2 
1aa35     08 28 39 40 
1aa39     45 50 4F 3F 
1aa3d     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
1aa41     14 0C 0D 0F 
1aa45     0D 05 FF F8 
1aa49     F1 FC 02 08 
1aa4d     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
1aa51     01 06 07 06 
1aa55     06 FF F9 EF 
1aa59     E2 D6 CD C3 
1aa5d     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
1aa61     CD D4 D4 D9 
1aa65     D9 D7 DE E7 
1aa69     EF FD 09 20 
1aa6d     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
1aa71     33 1F 0C 05 
1aa75     00 FA EB E8 
1aa79     EA ED F8 03 
1aa7d     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
1aa81     01 F9 EA E5 
1aa85     E0 DF DA DD 
1aa89     EF FD 07 0B 
1aa8d     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
1aa91     C8 BF C2 C3 
1aa95     CD DC F3 08 
1aa99     1F 2E 27 28 
1aa9d     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
1aaa1     3F 3A 30 1C 
1aaa5     10 07 FF 00 
1aaa9     F5 F5 F2 F2 
1aaad     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
1aab1     09 10 1E 2C 
1aab5     2E 35 31 29 
1aab9     1D 0A 0B 0B 
1aabd     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
1aac1     00 F8 F1 E8 
1aac5     D4 C3 B7 B9 
1aac9     BE D4 E0 EF 
1aacd     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
1aad1     26 2F 2D 2A 
1aad5     1A 0C FA EE 
1aad9     E1 D5 C9 CE 
1aadd     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
1aae1     1F 22 0F FB 
1aae5     F0 ED F1 FC 
1aae9     00 06 12 20 
1aaed     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
1aaf1     FE F3 E7 D1 
1aaf5     C2 BA B2 AE 
1aaf9     AF BA CA E1 
1aafd     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
1ab01     0A 0F 14 0D 
1ab05     06 06 05 06 
1ab09     11 10 10 0E 
1ab0d     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
1ab11     04 17 28 39 
1ab15     3B 40 47 43 
1ab19     37 23 17 08 
1ab1d     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
1ab21     FD F0 E7 DE 
1ab25     D5 CD C8 C7 
1ab29     C0 C3 C5 C7 
1ab2d     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
1ab31     0D 1E 38 46 
1ab35     51 51 38 26 
1ab39     1D 17 1E 22 
1ab3d     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
1ab41     28 2D 29 1D 
1ab45     14 06 FF FF 
1ab49     FD F8 F7 F5 
1ab4d     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
1ab51     02 01 01 FA 
1ab55     F0 E3 DA BD 
1ab59     AD A6 A7 A9 
1ab5d     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
1ab61     DF D5 C8 D6 
1ab65     EF 0E 27 3B 
1ab69     43 4E 51 4E 
1ab6d     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
1ab71     FD EF EC E7 
1ab75     E8 E9 EA F2 
1ab79     F8 01 06 0C 
1ab7d     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
1ab81     FD EE EB E2 
1ab85     E3 E5 EA F3 
1ab89     F3 E7 D3 B3 
1ab8d     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
1ab91     F8 11 24 3B 
1ab95     3C 43 49 47 
1ab99     42 32 2B 19 
1ab9d     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
1aba1     F9 EA E5 E6 
1aba5     EB F7 04 10 
1aba9     19 23 28 22 
1abad     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
1abb1     1A 1D 25 1F 
1abb5     14 FC ED EE 
1abb9     F8 03 0D 0A 
1abbd     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
1abc1     F0 E9 DF D6 
1abc5     D8 DB D9 E1 
1abc9     EA F5 00 01 
1abcd     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
1abd1     19 18 1B 1A 
1abd5     17 06 FA F3 
1abd9     EB EE F6 00 
1abdd     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
1abe1     D4 D3 DE F2 
1abe5     08 1D 2D 38 
1abe9     3C 3E 3B 2B 
1abed     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
1abf1     AB A6 A2 A4 
1abf5     AC B1 BF D3 
1abf9     DE EC FA 06 
1abfd     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
1ac01     11 07 01 FA 
1ac05     FA 04 0A 11 
1ac09     0E FA F1 F5 
1ac0d     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
1ac11     4E 52 51 54 
1ac15     4D 3F 31 16 
1ac19     06 F8 EE E3 
1ac1d     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
1ac21     AC 9F A0 A3 
1ac25     B5 C9 E3 FC 
1ac29     10 21 1D 20 
1ac2d     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
1ac31     22 29 25 0B 
1ac35     00 02 05 20 
1ac39     36 45 53 53 
1ac3d     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
1ac41     2D 16 FD EC 
1ac45     E3 DF DF DF 
1ac49     E0 DF DF DF 
1ac4d     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
1ac51     FC F6 F5 E5 
1ac55     D3 C2 BA B7 
1ac59     B6 C1 D1 E4 
1ac5d     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
1ac61     D1 EA 08 22 
1ac65     37 48 54 5E 
1ac69     61 61 55 48 
1ac6d     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
1ac71     EB EC E2 D9 
1ac75     D3 D2 D2 D9 
1ac79     E0 F0 FC 05 
1ac7d     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
1ac81     FC EE E0 CC 
1ac85     C5 C9 C4 B3 
1ac89     AF B0 C1 E3 
1ac8d     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
1ac91     55 5A 57 54 
1ac95     44 36 20 0E 
1ac99     FE F8 FB FE 
1ac9d     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
1aca1     F1 F0 F7 03 
1aca5     0B 16 23 28 
1aca9     2D 2E 2C 27 
1acad     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
1acb1     01 F2 E6 DD 
1acb5     DA E1 EA F9 
1acb9     03 08 0F 15 
1acbd     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
1acc1     0A F7 E6 D5 
1acc5     CE D3 D4 DC 
1acc9     DD E2 EB F8 
1accd     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
1acd1     3A 3E 38 31 
1acd5     22 10 FD EA 
1acd9     DC D8 DC DB 
1acdd     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
1ace1     ED 05 1B 32 
1ace5     41 3D 44 38 
1ace9     2A 1D 01 E3 
1aced     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
1acf1     C1 CF CC CC 
1acf5     CB CB CA D5 
1acf9     E4 F7 09 1B 
1acfd     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
1ad01     1A 0D 09 09 
1ad05     0A 0A FF F9 
1ad09     F4 F6 01 16 
1ad0d     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
1ad11     54 4D 41 32 
1ad15     1F 04 F1 DB 
1ad19     D1 C8 C4 C5 
1ad1d     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
1ad21     B6 CB E5 08 
1ad25     19 29 32 2D 
1ad29     2D 22 14 06 
1ad2d     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
1ad31     00 00 FF 02 
1ad35     13 30 46 5C 
1ad39     6C 6B 65 5A 
1ad3d     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
1ad41     F8 E1 D5 D1 
1ad45     CA CE CB CB 
1ad49     CA CC D1 D2 
1ad4d     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
1ad51     ED EA E8 E6 
1ad55     E4 E4 E3 D9 
1ad59     DC DD D1 C3 
1ad5d     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
1ad61     12 35 53 62 
1ad65     6B 66 66 69 
1ad69     68 56 3D 1C 
1ad6d     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
1ad71     BE B9 B8 B8 
1ad75     BF C6 D5 DF 
1ad79     F2 03 0B 0A 
1ad7d     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
1ad81     E2 DB D6 D1 
1ad85     CA CA CB D8 
1ad89     EC FA 0D 25 
1ad8d     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
1ad91     34 35 34 2F 
1ad95     26 17 03 FC 
1ad99     FD FF 0B 0A 
1ad9d     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
1ada1     FD FF 01 0B 
1ada5     11 12 17 17 
1ada9     12 07 FA F0 
1adad     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
1adb1     CC C3 C5 CA 
1adb5     DA F3 0C 20 
1adb9     35 3D 42 3E 
1adbd     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
1adc1     E4 D5 CC CF 
1adc5     DA E2 EA EE 
1adc9     F4 F6 02 10 
1adcd     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
1add1     21 0E FC E9 
1add5     D7 D3 D2 D7 
1add9     DE DC D9 CE 
1addd     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
1ade1     10 30 34 38 
1ade5     36 35 32 30 
1ade9     1E 03 EE DF 
1aded     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
1adf1     B5 AE AC AC 
1adf5     BC D0 EA 09 
1adf9     17 23 26 20 
1adfd     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
1ae01     30 36 36 24 
1ae05     10 FA E9 D9 
1ae09     D8 E5 F5 09 
1ae0d     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
1ae11     0E 0F 0D 00 
1ae15     F0 DF D7 D6 
1ae19     DC DC DB DB 
1ae1d     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
1ae21     00 08 0E 0E 
1ae25     04 FF FF FD 
1ae29     FE 01 0C 1A 
1ae2d     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
1ae31     02 FD 03 13 
1ae35     25 36 46 48 
1ae39     46 36 29 26 
1ae3d     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
1ae41     E9 DC D2 D3 
1ae45     CE CF CA CA 
1ae49     CC D8 E1 F0 
1ae4d     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
1ae51     CD C5 B6 B9 
1ae55     BE CF E5 E7 
1ae59     E9 EC F1 F1 
1ae5d     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
1ae61     3D 4B 57 55 
1ae65     5A 63 62 52 
1ae69     39 1D FF E3 
1ae6d     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
1ae71     AA A8 AB B2 
1ae75     CA D5 E7 F5 
1ae79     F0 EB E4 E8 
1ae7d     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
1ae81     23 26 23 16 
1ae85     FA E4 D4 CD 
1ae89     D4 DF EC FF 
1ae8d     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
1ae91     30 32 27 1A 
1ae95     11 0D 0E 15 
1ae99     12 14 12 08 
1ae9d     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
1aea1     06 05 F3 E7 
1aea5     DD D2 CE C9 
1aea9     CC E0 F1 FC 
1aead     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
1aeb1     ED E8 E9 F1 
1aeb5     00 09 0C 0A 
1aeb9     05 07 12 1C 
1aebd     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
1aec1     20 20 1F 17 
1aec5     0E 03 FD FB 
1aec9     FE 00 00 29 
1aecd     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
1aed1     37 2A 25 2A 
1aed5     25 18 0F 00 
1aed9     EA EF F1 E2 
1aedd     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
1aee1     EA FE 1A 13 
1aee5     00 05 16 29 
1aee9     49 46 2E 31 
1aeed     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
1aef1     3D 2E 31 2E 
1aef5     25 1A 05 E8 
1aef9     E2 E6 DF EF 
1aefd     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
1af01     EA 00 1A 08 
1af05     00 07 1A 37 
1af09     4F 38 2E 37 
1af0d     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
1af11     35 2A 31 29 
1af15     1D 16 00 E3 
1af19     E3 E3 E2 F2 
1af1d     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
1af21     EF 0E 13 01 
1af25     00 0E 1E 3F 
1af29     46 35 2E 38 
1af2d     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
1af31     2A 29 2A 21 
1af35     18 0F F1 E2 
1af39     E3 E3 EA F1 
1af3d     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
1af41     FE 16 0F 00 
1af45     01 11 29 45 
1af49     3D 2E 35 3C 
1af4d     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
1af51     25 2A 25 21 
1af55     13 00 ED E3 
1af59     E3 E2 EF EA 
1af5d     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
1af61     00 11 05 00 
1af65     02 16 31 46 
1af69     38 31 37 44 
1af6d     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
1af71     25 2A 24 18 
1af75     0F 00 E8 E2 
1af79     E3 E3 F1 E3 
1af7d     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
1af81     08 08 00 00 
1af85     08 1E 3C 46 
1af89     37 37 3C 46 
1af8d     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
1af91     25 29 21 13 
1af95     05 F1 E8 E2 
1af99     E3 EA EA D6 
1af9d     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
1afa1     08 05 00 00 
1afa5     11 29 44 3D 
1afa9     37 3C 44 4D 
1afad     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
1afb1     29 25 1A 0F 
1afb5     00 F1 E3 DF 
1afb9     E2 EF E2 CF 
1afbd     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
1afc1     05 01 00 02 
1afc5     1A 31 44 3C 
1afc9     38 3D 49 4F 
1afcd     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
1afd1     2A 21 18 0F 
1afd5     FB EF E2 DF 
1afd9     E3 EA D6 C8 
1afdd     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
1afe1     01 00 00 0E 
1afe5     1E 3C 3F 3C 
1afe9     3D 44 4F 54 
1afed     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
1aff1     2A 21 13 05 
1aff5     F8 ED DF DF 
1aff9     E8 E3 CF C8 
1affd     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
1b001     00 00 01 13 
1b005     2E 3F 3D 3D 
1b009     3F 49 54 54 
1b00d     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
1b011     25 1D 0F 00 
1b015     F2 E8 DC DF 
1b019     E8 D7 C8 C9 
1b01d     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
1b021     00 00 07 1D 
1b025     31 3F 3D 3F 
1b029     45 4F 54 54 
1b02d     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
1b031     24 18 05 FB 
1b035     F2 DF DB E3 
1b039     E3 CB C4 CB 
1b03d     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
1b041     00 00 0E 24 
1b045     3C 3D 3F 45 
1b049     49 54 58 4F 
1b04d     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
1b051     21 11 01 FB 
1b055     F1 DB DC E6 
1b059     DF C4 C4 CF 
1b05d     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
1b061     00 02 16 2E 
1b065     3C 3D 44 46 
1b069     4F 58 5A 4F 
1b06d     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
1b071     1D 08 00 F9 
1b075     E8 DB DC E3 
1b079     D2 C1 C8 D2 
1b07d     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
1b081     00 07 1E 31 
1b085     3C 3F 46 4D 
1b089     54 5A 5A 4D 
1b08d     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
1b091     18 05 FF F8 
1b095     E2 D7 E2 DF 
1b099     C8 C1 C9 DB 
1b09d     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
1b0a1     01 11 29 38 
1b0a5     3C 44 49 4F 
1b0a9     58 5C 54 49 
1b0ad     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
1b0b1     0F 00 FE F1 
1b0b5     DF D7 E3 D6 
1b0b9     BC C1 D2 DC 
1b0bd     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
1b0c1     05 18 2E 38 
1b0c5     3D 46 4D 54 
1b0c9     5C 5C 54 46 
1b0cd     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
1b0d1     07 00 FE EA 
1b0d5     D7 DC DF CB 
1b0d9     BA C8 D2 E3 
1b0dd     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
1b0e1     0E 1E 31 38 
1b0e5     3F 49 4F 58 
1b0e9     5E 5A 4F 46 
1b0ed     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
1b0f1     01 00 F9 E3 
1b0f5     D6 DC DB C3 
1b0f9     B7 C9 DB E6 
1b0fd     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
1b101     11 29 35 3C 
1b105     45 4F 54 5C 
1b109     5E 5A 4D 38 
1b10d     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
1b111     00 00 F1 DF 
1b115     D6 DF D2 BA 
1b119     BC D2 DC E6 
1b11d     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
1b121     1A 2E 37 3C 
1b125     49 4F 58 5E 
1b129     5E 54 46 35 
1b12d     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
1b131     00 FF ED D7 
1b135     D7 DB C8 B7 
1b139     C4 D7 DF E6 
1b13d     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
1b141     1E 2E 37 3F 
1b145     4D 54 5C 60 
1b149     5E 54 46 2E 
1b14d     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
1b151     00 FB E8 D6 
1b155     DC D6 BC B7 
1b159     CF DB DF EA 
1b15d     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
1b161     29 31 38 45 
1b165     4F 58 5E 64 
1b169     5C 4F 3D 2E 
1b16d     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
1b171     00 F2 DF D6 
1b175     DB CB BA BB 
1b179     D2 DB E2 EF 
1b17d     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
1b181     2E 31 3C 49 
1b185     54 5C 64 64 
1b189     5A 4D 35 2E 
1b18d     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
1b191     00 F1 DB D7 
1b195     D7 C3 B3 C4 
1b199     D6 DB E6 F9 
1b19d     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
1b1a1     2E 35 3F 4F 
1b1a5     58 5E 65 5E 
1b1a9     54 46 35 2E 
1b1ad     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
1b1b1     FB E8 D6 D7 
1b1b5     D2 BB B7 C9 
1b1b9     D6 DC EA FE 
1b1bd     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
1b1c1     2E 37 45 54 
1b1c5     5C 64 65 5E 
1b1c9     4F 3D 2E 2A 
1b1cd     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
1b1d1     F8 E3 D6 D6 
1b1d5     CB BA BB D2 
1b1d9     D7 DC EF 00 
1b1dd     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
1b1e1     2E 3C 4D 58 
1b1e5     5E 65 64 5A 
1b1e9     4D 37 2E 25 
1b1ed     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
1b1f1     F1 DF D6 D2 
1b1f5     C3 B3 C4 D2 
1b1f9     D7 E6 F9 00 
1b1fd     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
1b201     31 3F 4F 5A 
1b205     64 65 64 5A 
1b209     46 35 2A 21 
1b20d     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
1b211     EA D7 D2 CB 
1b215     BA B7 C9 D2 
1b219     DB EA FE 02 
1b21d     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
1b221     37 45 54 5E 
1b225     65 66 5E 54 
1b229     3D 2E 2A 18 
1b22d     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
1b231     E6 D6 D2 C8 
1b235     BA BC C9 D2 
1b239     DC EF 00 07 
1b23d     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
1b241     3C 4D 58 60 
1b245     66 65 5C 4D 
1b249     37 2E 24 11 
1b24d     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
1b251     DF D2 CF BC 
1b255     B3 C1 CB D6 
1b259     E6 F9 01 0E 
1b25d     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
1b261     3F 54 5C 65 
1b265     66 64 5A 46 
1b269     35 2A 21 08 
1b26d     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
1b271     DF D2 CB BA 
1b275     B7 C4 CF DB 
1b279     EA FF 07 11 
1b27d     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
1b281     45 58 60 66 
1b285     66 60 54 46 
1b289     2E 25 18 05 
1b28d     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
1b291     D7 CF C4 B3 
1b295     BB 00 00 F9 
1b299     FC FC FD FF 
1b29d     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
1b2a1     04 07 09 0A 
1b2a5     0D 0D 0E 13 
1b2a9     13 13 10 0E 
1b2ad     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
1b2b1     21 20 1E 16 
1b2b5     0E 07 07 03 
1b2b9     03 03 FD EA 
1b2bd     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
1b2c1     B1 B1 B3 AD 
1b2c5     A7 A9 A6 A9 
1b2c9     A2 9D 9D 9A 
1b2cd     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
1b2d1     A0 A9 B1 AD 
1b2d5     AF B1 B5 CC 
1b2d9     E0 F2 F6 F6 
1b2dd     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
1b2e1     CC CF DA E6 
1b2e5     EC F0 FC EC 
1b2e9     EA DA CA C0 
1b2ed     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
1b2f1     E0 F3 04 09 
1b2f5     21 2A 37 34 
1b2f9     2C 20 18 16 
1b2fd     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
1b301     01 09 16 26 
1b305     37 3B 3D 2D 
1b309     18 01 FF 00 
1b30d     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
1b311     09 00 FC F7 
1b315     F9 FF 07 10 
1b319     24 2D 3A 44 
1b31d     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
1b321     27 14 FF F2 
1b325     F6 01 14 1D 
1b329     21 21 20 20 
1b32d     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
1b331     04 ED DC D3 
1b335     C5 CC D3 D9 
1b339     E2 EA F3 EC 
1b33d     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
1b341     E0 E2 E8 F2 
1b345     F3 FD F9 EA 
1b349     DF D0 D4 CA 
1b34d     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
1b351     D6 DA DC CA 
1b355     C3 BF C6 DA 
1b359     F0 04 0D 10 
1b35d     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
1b361     36 3B 3D 3A 
1b365     34 20 13 FC 
1b369     F7 E6 D6 D6 
1b36d     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
1b371     FF 03 00 F6 
1b375     E6 DC D3 CA 
1b379     D3 DA E2 EC 
1b37d     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
1b381     D4 E0 E6 EC 
1b385     EC DA BC AC 
1b389     92 84 86 89 
1b38d     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
1b391     B9 BC C6 CC 
1b395     D9 E6 EC F3 
1b399     F9 00 04 04 
1b39d     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
1b3a1     F9 F9 F9 03 
1b3a5     0A 1D 2D 30 
1b3a9     30 2C 24 2C 
1b3ad     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
1b3b1     30 1E 0D 13 
1b3b5     13 1E 2D 30 
1b3b9     36 27 20 07 
1b3bd     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
1b3c1     80 80 83 94 
1b3c5     9D A6 A0 A6 
1b3c9     A9 AC AD AD 
1b3cd     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
1b3d1     A2 A3 A3 96 
1b3d5     96 98 9C B1 
1b3d9     BD C3 C0 C0 
1b3dd     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
1b3e1     F0 01 10 16 
1b3e5     16 18 0E FC 
1b3e9     ED DA D6 DA 
1b3ed     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
1b3f1     F2 F3 EC ED 
1b3f5     E3 E6 E6 E6 
1b3f9     F0 03 0E 27 
1b3fd     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
1b401     53 59 57 51 
1b405     2C 0D ED DC 
1b409     CF CF D4 DF 
1b40d     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
1b411     FF 00 01 01 
1b415     04 10 20 40 
1b419     54 66 74 77 
1b41d     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
1b421     4B 37 1E 0D 
1b425     FF F9 00 F6 
1b429     EA E0 E0 E6 
1b42d     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
1b431     F0 F6 FC 10 
1b435     26 2D 3A 37 
1b439     26 18 07 EC 
1b43d     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
1b441     B1 BC CC C9 
1b445     C9 C9 C6 C6 
1b449     C9 C6 C0 C5 
1b44d     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
1b451     0D 0E 09 04 
1b455     01 01 01 04 
1b459     04 F7 F6 F2 
1b45d     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
1b461     0A 10 0D 0D 
1b465     03 00 FD F9 
1b469     F3 FF 0A 14 
1b46d     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
1b471     27 20 18 04 
1b475     E0 BC A0 96 
1b479     90 A6 B3 CA 
1b47d     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
1b481     E3 ED ED E2 
1b485     D6 CA C3 C0 
1b489     C5 D0 D6 DC 
1b48d     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
1b491     B1 A6 9A 92 
1b495     A2 B3 CF E6 
1b499     F3 04 0E 14 
1b49d     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
1b4a1     1A 1A 1D 24 
1b4a5     26 24 20 1A 
1b4a9     0A FD FD F6 
1b4ad     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
1b4b1     03 10 2D 43 
1b4b5     5A 63 60 63 
1b4b9     5A 53 4D 2D 
1b4bd     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
1b4c1     A6 9A 92 83 
1b4c5     80 80 80 80 
1b4c9     80 80 80 80 
1b4cd     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
1b4d1     B1 C5 C6 CA 
1b4d5     D6 DF EA E2 
1b4d9     E3 E0 DA DF 
1b4dd     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
1b4e1     E6 D3 C5 BF 
1b4e5     B3 B1 AC B1 
1b4e9     BD CA E3 F2 
1b4ed     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
1b4f1     37 3A 37 24 
1b4f5     14 04 FC FC 
1b4f9     01 0D 1A 20 
1b4fd     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
1b501     10 00 ED DF 
1b505     DF DF F0 FD 
1b509     18 27 40 36 
1b50d     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
1b511     1D 10 0E 0E 
1b515     09 0D 18 10 
1b519     16 21 2C 34 
1b51d     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
1b521     49 4B 44 41 
1b525     41 37 3A 2D 
1b529     26 1A 0A 00 
1b52d     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
1b531     F0 F6 FD 04 
1b535     13 04 FF FC 
1b539     F6 ED E8 E8 
1b53d     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
1b541     FC F2 EC E2 
1b545     DA D3 CF C0 
1b549     BD A6 9D 94 
1b54d     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
1b551     CF E2 F2 FD 
1b555     10 1A 18 20 
1b559     2A 31 41 40 
1b55d     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
1b561     27 0D 04 FC 
1b565     F6 ED EA E0 
1b569     DF E6 E8 EA 
1b56d     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
1b571     0D 0E 10 0E 
1b575     04 F3 ED DA 
1b579     D9 E0 D9 E6 
1b57d     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
1b581     BD A0 86 80 
1b585     80 80 92 B5 
1b589     CC D4 E0 E2 
1b58d     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
1b591     04 04 07 04 
1b595     04 FD F9 FC 
1b599     FD 01 04 09 
1b59d     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
1b5a1     DF E2 EC F3 
1b5a5     01 0A 0E 10 
1b5a9     21 2A 2A 2A 
1b5ad     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
1b5b1     37 41 49 41 
1b5b5     31 16 03 F6 
1b5b9     EA E2 E6 EA 
1b5bd     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
1b5c1     B9 B5 B5 BC 
1b5c5     BF BC B5 AC 
1b5c9     9C 86 80 80 
1b5cd     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
1b5d1     B5 B1 B1 BD 
1b5d5     BC C3 BF C0 
1b5d9     C3 C6 D4 DA 
1b5dd     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
1b5e1     E2 DF DC E0 
1b5e5     E2 E3 E8 F0 
1b5e9     F2 F9 ED E8 
1b5ed     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
1b5f1     DA E0 E3 ED 
1b5f5     F0 F9 09 16 
1b5f9     2A 3D 3B 41 
1b5fd     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
1b601     14 0E 09 07 
1b605     13 1D 13 18 
1b609     10 01 01 03 
1b60d     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
1b611     16 24 2D 37 
1b615     3B 3D 3D 41 
1b619     43 47 47 4B 
1b61d     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
1b621     31 16 03 F0 
1b625     E0 DC E3 F7 
1b629     04 13 21 2D 
1b62d     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
1b631     3A 30 1D 03 
1b635     F2 EC E0 E6 
1b639     E6 F0 F6 F6 
1b63d     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
1b641     D0 CF C9 CC 
1b645     CC C9 C9 C6 
1b649     C0 C3 B9 C0 
1b64d     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
1b651     E3 F0 FF 01 
1b655     0D 10 0D 07 
1b659     00 F9 F6 FC 
1b65d     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
1b661     20 2D 40 41 
1b665     41 40 34 2C 
1b669     1D 14 10 0D 
1b66d     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
1b671     1A 10 00 F9 
1b675     ED E6 E2 D4 
1b679     CA BF B5 B7 
1b67d     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
1b681     CC CC C9 C9 
1b685     C0 C3 BD B9 
1b689     BC BF CF D3 
1b68d     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
1b691     E0 EC F0 F9 
1b695     03 0D 14 1D 
1b699     26 2A 1D 1A 
1b69d     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
1b6a1     FC FF 09 16 
1b6a5     1E 1D 1D 1D 
1b6a9     20 2C 30 31 
1b6ad     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
1b6b1     0E FF FC F6 
1b6b5     F2 F9 F9 FF 
1b6b9     01 09 0A 01 
1b6bd     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
1b6c1     9C 8F 89 86 
1b6c5     80 80 80 80 
1b6c9     84 96 9C AF 
1b6cd     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
1b6d1     CF CF D0 D6 
1b6d5     E8 EC F0 F2 
1b6d9     F0 F2 DF C6 
1b6dd     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
1b6e1     DA E2 EA EA 
1b6e5     ED F2 F2 F2 
1b6e9     F2 EA EC EC 
1b6ed     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
1b6f1     E2 DF DA D9 
1b6f5     DF E0 E6 E8 
1b6f9     F3 F6 01 01 
1b6fd     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
1b701     47 4B 47 3A 
1b705     2D 18 09 09 
1b709     0A 18 26 36 
1b70d     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
1b711     4D 49 43 37 
1b715     3B 3A 37 37 
1b719     36 34 27 2A 
1b71d     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
1b721     16 07 FF F6 
1b725     F3 F7 FD 07 
1b729     1A 30 36 31 
1b72d     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
1b731     D9 D0 D4 DF 
1b735     ED FF 04 10 
1b739     0E 13 13 00 
1b73d     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
1b741     F6 F6 F7 F7 
1b745     EA E0 D3 C6 
1b749     C0 BD C0 C6 
1b74d     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
1b751     E0 F2 FF 03 
1b755     0A 0A 0D FF 
1b759     FD E6 D9 DF 
1b75d     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
1b761     2C 36 36 31 
1b765     31 20 1E 18 
1b769     1A 1E 2A 27 
1b76d     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
1b771     03 F9 F7 F9 
1b775     F7 01 09 1A 
1b779     2A 10 01 F2 
1b77d     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
1b781     E6 D6 CF B5 
1b785     A7 A6 A2 A7 
1b789     B5 C3 C9 D4 
1b78d     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
1b791     E0 E2 E6 ED 
1b795     F9 FF 09 09 
1b799     0A 0A 01 FF 
1b79d     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
1b7a1     14 20 18 1D 
1b7a5     13 1E 2D 3B 
1b7a9     51 59 57 47 
1b7ad     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
1b7b1     F2 F0 ED FF 
1b7b5     01 0E 14 1E 
1b7b9     1A 14 01 E8 
1b7bd     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
1b7c1     80 80 80 80 
1b7c5     80 80 80 80 
1b7c9     80          | 	byte	$80[9]
1b7ca     8C 92 A2 AC 
1b7ce     B3 B5 BC C6 
1b7d2     CF E3 E8 F2 
1b7d6     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
1b7da     AC B3 C5 D9 
1b7de     F2 0A 1A 24 
1b7e2     2C 2C 1D 14 
1b7e6     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
1b7ea     E8 E2 E0 E0 
1b7ee     D6 D4 C6 C5 
1b7f2     BD B1 B9 BC 
1b7f6     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
1b7fa     F0 FF 03 18 
1b7fe     27 30 37 3B 
1b802     2C 21 1A 18 
1b806     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
1b80a     3D 43 44 3D 
1b80e     30 2D 2D 31 
1b812     3A 40 4B 51 
1b816     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
1b81a     44 41 41 40 
1b81e     41 49 4B 44 
1b822     31 1D 0E 09 
1b826     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
1b82a     FC F3 D9 C5 
1b82e     BD AD AF B1 
1b832     C3 D6 ED 01 
1b836     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
1b83a     1D 14 0E 07 
1b83e     00 F9 F6 F0 
1b842     E3 D6 CC C6 
1b846     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
1b84a     EC F9 FF FC 
1b84e     F3 F3 FC 00 
1b852     07 07 09 09 
1b856     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
1b85a     E8 F3 F9 03 
1b85e     0E 14 1D 1D 
1b862     18 18 18 0E 
1b866     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
1b86a     07 09 0E 10 
1b86e     10 07 FC FC 
1b872     F7 FD 0D 18 
1b876     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
1b87a     2A 37 41 47 
1b87e     37 2C 0E F2 
1b882     E3 D3 CC D0 
1b886     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
1b88a     F2 EA E3 E6 
1b88e     E3 E3 E3 DA 
1b892     DC CA CA CC 
1b896     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
1b89a     D9 DC E2 F0 
1b89e     04 16 27 2C 
1b8a2     2D 31 43 47 
1b8a6     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
1b8aa     0E FF E6 D9 
1b8ae     D3 DA EC FF 
1b8b2     21 36 49 4F 
1b8b6     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
1b8ba     1A 0D F3 D6 
1b8be     B7 A7 98 98 
1b8c2     98 92 86 89 
1b8c6     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
1b8ca     80 80 80 80 
1b8ce     8C 9C AC B9 
1b8d2     BF C5 C5 C5 
1b8d6     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
1b8da     EA F7 00 0E 
1b8de     0E 0E 00 F6 
1b8e2     EA E8 E8 EA 
1b8e6     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
1b8ea     F9 FC ED E2 
1b8ee     D3 CC C9 D0 
1b8f2     DC F0 F3 F6 
1b8f6     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
1b8fa     1D 1E 1D 14 
1b8fe     03 FC F2 F6 
1b902     F6 F9 01 0A 
1b906     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
1b90a     3D 40 43 47 
1b90e     4B 51 4D 4B 
1b912     43 37 36 2A 
1b916     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
1b91a     36 4B 63 7F 
1b91e     7F 7F 7F 6A 
1b922     4F 37 20 16 
1b926     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
1b92a     D4 D0 D0 D3 
1b92e     DA E3 EC F6 
1b932     FC F7 ED E8 
1b936     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
1b93a     EA EC EC E8 
1b93e     ED F3 F2 F6 
1b942     F3 EC E3 E3 
1b946     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
1b94a     CA C0 BD CA 
1b94e     E0 F7 0D 1A 
1b952     18 18 18 14 
1b956     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
1b95a     16 26 34 34 
1b95e     31 2D 26 1E 
1b962     20 10 07 FC 
1b966     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
1b96a     CC CF CC CF 
1b96e     D4 E0 F6 04 
1b972     13 20 2D 34 
1b976     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
1b97a     6C 6A 51 3D 
1b97e     34 18 04 F0 
1b982     DF D0 D6 E3 
1b986     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
1b98a     00 F3 F0 EC 
1b98e     E8 EA E8 EA 
1b992     EA ED F0 F0 
1b996     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
1b99a     F2 F3 F6 F3 
1b99e     F2 F2 E8 EC 
1b9a2     ED F7 FF 01 
1b9a6     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
1b9aa     FD 04 0A 1A 
1b9ae     24 30 3B 37 
1b9b2     31 21 14 07 
1b9b6     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
1b9ba     1A 24 27 18 
1b9be     03 E0 C0 9A 
1b9c2     84 80 80 80 
1b9c6     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
1b9ca     89 94 A0 B1 
1b9ce     BD BC AD A6 
1b9d2     9C 96 9A A0 
1b9d6     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
1b9da     EC FC FF 04 
1b9de     09 03 FC F2 
1b9e2     EA E3 DF D4 
1b9e6     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
1b9ea     B1 AD B1 BD 
1b9ee     D0 E6 F9 07 
1b9f2     1A 20 14 16 
1b9f6     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
1b9fa     24 20 1D 1A 
1b9fe     1E 20 1D 1A 
1ba02     1A 16 1A 14 
1ba06     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
1ba0a     FF 03 04 10 
1ba0e     1A 20 30 3B 
1ba12     44 51 5E 63 
1ba16     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
1ba1a     60 5E 5A 49 
1ba1e     41 2D 27 2D 
1ba22     36 2D 1E 13 
1ba26     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
1ba2a     00 F9 00 FF 
1ba2e     00 04 04 0A 
1ba32     0A 0A 04 04 
1ba36     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
1ba3a     E3 DC D6 D3 
1ba3e     D3 C5 BF B1 
1ba42     B3 B5 B3 B9 
1ba46     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
1ba4a     E6 F9 04 04 
1ba4e     04 00 00 F7 
1ba52     F2 F6 FC FD 
1ba56     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
1ba5a     4F 57 54 4B 
1ba5e     2C 14 03 F6 
1ba62     EC E8 E2 E2 
1ba66     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
1ba6a     00 FF FC F3 
1ba6e     F6 F7 F9 FC 
1ba72     00 FF 04 16 
1ba76     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
1ba7a     40 4B 4F 53 
1ba7e     5E 5A 54 51 
1ba82     4D 34 20 09 
1ba86     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
1ba8a     BD BF CA E0 
1ba8e     ED 00 0E 13 
1ba92     14 16 10 09 
1ba96     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
1ba9a     01 01 FF F0 
1ba9e     EC EC F7 E6 
1baa2     E2 DC D4 D0 
1baa6     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
1baaa     F9 F9 FF 07 
1baae     16 1E 2C 34 
1bab2     34 30 36 30 
1bab6     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
1baba     09 FD F3 F0 
1babe     E2 CA AC 98 
1bac2     84 86 8C 9D 
1bac6     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
1baca     AD AC B1 B3 
1bace     B7 BC BC C0 
1bad2     CC D9 D9 E6 
1bad6     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
1bada     D9 CC BF AF 
1bade     A6 9D 9C 9A 
1bae2     9C A6 AC B9 
1bae6     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
1baea     EA DF D9 D6 
1baee     DA DC DA DA 
1baf2     DC ED 01 07 
1baf6     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
1bafa     4B 51 43 3D 
1bafe     2C 27 1D 10 
1bb02     14 14 16 1A 
1bb06     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
1bb0a     27 27 27 27 
1bb0e     24 24 24 2A 
1bb12     31 36 36 36 
1bb16     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
1bb1a     44 3D 3D 40 
1bb1e     47 47 47 47 
1bb22     41 3D 36 26 
1bb26     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
1bb2a     F7 F7 FF 0D 
1bb2e     20 27 2C 26 
1bb32     16 14 0E 03 
1bb36     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
1bb3a     F2 F2 F0 E8 
1bb3e     E2 CF B7 AD 
1bb42     A6 A3 9A 98 
1bb46     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
1bb4a     CA DF F0 F9 
1bb4e     01 0E 14 24 
1bb52     2D 34 34 31 
1bb56     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
1bb5a     FF EC E6 DF 
1bb5e     E2 E3 E3 E8 
1bb62     EA FC 0A 18 
1bb66     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
1bb6a     00 FF FD 04 
1bb6e     07 0A 14 1A 
1bb72     2A 37 3B 41 
1bb76     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
1bb7a     34 36 2C 2D 
1bb7e     21 1E 18 1A 
1bb82     1E 26 26 21 
1bb86     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
1bb8a     F2 E8 E6 E6 
1bb8e     E8 E8 F0 FF 
1bb92     03 03 FF F9 
1bb96     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
1bb9a     F0 E8 E6 E0 
1bb9e     E0 E6 E8 EA 
1bba2     F0 F9 03 13 
1bba6     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
1bbaa     10 0D 0D 0D 
1bbae     04 00 FD FF 
1bbb2     FC FF 01 07 
1bbb6     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
1bbba     1A 18 0E 04 
1bbbe     F0 D4 CA B9 
1bbc2     A6 90 80 80 
1bbc6     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
1bbca     AF B7 C5 CA 
1bbce     D6 E8 E8 EC 
1bbd2     F2 EA E6 E0 
1bbd6     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
1bbda     BD B5 B5 AD 
1bbde     B1 AC A7 A7 
1bbe2     A9 AD BC C5 
1bbe6     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
1bbea     AF C0 C6 D9 
1bbee     E0 EA FC FF 
1bbf2     04 16 16 1A 
1bbf6     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
1bbfa     0E 0E 13 14 
1bbfe     13 13 10 10 
1bc02     10 16 16 16 
1bc06     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
1bc0a     30 31 3D 44 
1bc0e     51 60 64 64 
1bc12     54 43 37 2D 
1bc16     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
1bc1a     0D 09 0A 16 
1bc1e     21 30 3B 44 
1bc22     53 5D 6C 6E 
1bc26     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
1bc2a     0D F9 F0 EC 
1bc2e     EA E8 ED F7 
1bc32     03 0E 14 1A 
1bc36     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
1bc3a     09 FC E0 C9 
1bc3e     AD A2 A3 A2 
1bc42     A6 B1 B5 C0 
1bc46     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
1bc4a     F2 F2 F6 F7 
1bc4e     00 09 0A 0D 
1bc52     0A 04 07 04 
1bc56     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
1bc5a     F3 F2 F3 ED 
1bc5e     F2 EC EC F0 
1bc62     F6 FC 01 00 
1bc66     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
1bc6a     FF 03 10 21 
1bc6e     2D 2C 2C 31 
1bc72     3B 49 4F 4D 
1bc76     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
1bc7a     54 4D 3B 31 
1bc7e     18 0E 0D 04 
1bc82     07 07 09 14 
1bc86     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
1bc8a     21 1E 18 16 
1bc8e     14 13 01 EC 
1bc92     D3 C3 BC AF 
1bc96     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
1bc9a     B5 C6 DF F6 
1bc9e     03 16 13 16 
1bca2     27 27 27 21 
1bca6     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
1bcaa     FC F3 FC 00 
1bcae     09 0E 16 1D 
1bcb2     1E 20 21 21 
1bcb6     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
1bcba     03 EC CF C0 
1bcbe     BF BC C9 D0 
1bcc2     DC DF C6 B5 
1bcc6     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
1bcca     96 98 A6 AC 
1bcce     B7 C5 CA CC 
1bcd2     D0 D6 CC C6 
1bcd6     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
1bcda     B3 B5 B7 BC 
1bcde     C0 CA D0 E0 
1bce2     E3 E3 E3 CF 
1bce6     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
1bcea     AC BD D0 E2 
1bcee     DF E3 ED 04 
1bcf2     14 21 27 2A 
1bcf6     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
1bcfa     2A 14 FF F2 
1bcfe     E2 D9 D0 D4 
1bd02     D6 DA E8 FF 
1bd06     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
1bd0a     66 76 77 7C 
1bd0e     6E 4D 34 18 
1bd12     07 FF FF 04 
1bd16     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
1bd1a     26 31 40 44 
1bd1e     47 4D 4F 54 
1bd22     5D 63 64 60 
1bd26     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
1bd2a     34 1D 0A FD 
1bd2e     F3 F3 F3 F6 
1bd32     F6 F7 F9 FD 
1bd36     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
1bd3a     C5 B5 B1 B3 
1bd3e     BD CA D6 E3 
1bd42     E6 D3 CC CC 
1bd46     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
1bd4a     E0 E8 F6 04 
1bd4e     09 14 13 09 
1bd52     FD F0 DF DF 
1bd56     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
1bd5a     FC 07 13 2A 
1bd5e     31 3B 3B 3A 
1bd62     26 13 F2 DA 
1bd66     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
1bd6a     E6 FC 01 FC 
1bd6e     FF 0A 1A 3A 
1bd72     47 4F 5A 5E 
1bd76     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
1bd7a     53 3D 2D 16 
1bd7e     0A 01 FC FC 
1bd82     03 09 20 31 
1bd86     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
1bd8a     51 43 31 18 
1bd8e     F7 D9 C6 BF 
1bd92     C3 D0 DA E8 
1bd96     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
1bd9a     DA DA E0 E8 
1bd9e     E6 EA F0 F0 
1bda2     EC F0 ED F2 
1bda6     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
1bdaa     04 10 1A 18 
1bdae     1A 20 21 26 
1bdb2     24 24 1E 1A 
1bdb6     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
1bdba     D9 D4 CF D3 
1bdbe     DF EC F6 F0 
1bdc2     F0 E6 F0 EC 
1bdc6     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
1bdca     BC B7 B7 B5 
1bdce     AD A6 9A 94 
1bdd2     89 80 83 84 
1bdd6     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
1bdda     AD CA E0 F0 
1bdde     00 01 01 FC 
1bde2     E6 C9 AF A0 
1bde6     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
1bdea     C5 CA C9 CC 
1bdee     DC F0 FD 04 
1bdf2     0A 0A 0E 13 
1bdf6     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
1bdfa     26 2A 2A 2C 
1bdfe     1E 18 10 04 
1be02     04 07 09 13 
1be06     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
1be0a     2D 30 16 03 
1be0e     F7 F2 ED F3 
1be12     07 1D 37 4D 
1be16     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
1be1a     57 59 5A 59 
1be1e     4D 40 34 27 
1be22     26 21 2A 2D 
1be26     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
1be2a     30 21 1A 0E 
1be2e     14 16 2A 34 
1be32     37 3A 31 21 
1be36     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
1be3a     BC B9 B7 BC 
1be3e     CA D0 C9 C0 
1be42     B3 AF B9 BF 
1be46     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
1be4a     ED F7 FC F9 
1be4e     F9 FC F3 F6 
1be52     F3 F0 E0 D9 
1be56     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
1be5a     04 16 24 2A 
1be5e     27 26 18 04 
1be62     00 F6 F3 F9 
1be66     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
1be6a     26 1E 18 14 
1be6e     18 1D 21 20 
1be72     26 24 24 26 
1be76     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
1be7a     18 18 1D 21 
1be7e     2C 2C 3A 43 
1be82     43 44 51 53 
1be86     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
1be8a     27 0D F6 D9 
1be8e     C5 B9 B7 BF 
1be92     CF E2 EC EC 
1be96     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
1be9a     24 2C 36 34 
1be9e     20 10 00 EC 
1bea2     EA DC D4 D6 
1bea6     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
1beaa     E6 EC EA F2 
1beae     F6 F6 F9 F9 
1beb2     FF 00 0A 0E 
1beb6     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
1beba     0D 18 18 1E 
1bebe     16 00 EC DC 
1bec2     D4 D0 D4 DA 
1bec6     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
1beca     8A 89 94 9A 
1bece     AC B1 C0 C9 
1bed2     CF D6 CC CF 
1bed6     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
1beda     D4 D6 D6 C9 
1bede     C6 B7 AC 9C 
1bee2     9A 8C 8C 8F 
1bee6     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
1beea     CA E2 E6 ED 
1beee     F7 00 0A 14 
1bef2     16 0D 0A F9 
1bef6     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
1befa     F6 FF 09 16 
1befe     1D 24 27 3A 
1bf02     3D 40 49 49 
1bf06     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
1bf0a     14 0D 10 13 
1bf0e     14 1A 26 30 
1bf12     3A 3A 36 2D 
1bf16     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
1bf1a     36 36 36 2D 
1bf1e     30 27 2D 30 
1bf22     26 24 24 27 
1bf26     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
1bf2a     3D 30 18 01 
1bf2e     F0 E2 D9 D9 
1bf32     DF E2 E8 F3 
1bf36     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
1bf3a     26 2C 2A 16 
1bf3e     00 F3 E2 D6 
1bf42     D9 D9 DC E0 
1bf46     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
1bf4a     BD B5 B1 B3 
1bf4e     B3 B5 C5 D6 
1bf52     E0 F9 04 18 
1bf56     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
1bf5a     10 13 09 09 
1bf5e     01 FF FF F3 
1bf62     EC E8 E8 E8 
1bf66     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
1bf6a     09 16 2A 3D 
1bf6e     4B 5D 5A 5D 
1bf72     51 40 31 21 
1bf76     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
1bf7a     3A 47 4D 54 
1bf7e     54 54 47 3A 
1bf82     27 14 00 F3 
1bf86     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
1bf8a     16 21 20 16 
1bf8e     09 03 03 FD 
1bf92     F6 F0 F0 ED 
1bf96     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
1bf9a     FC F3 F2 EA 
1bf9e     E8 E2 E8 EA 
1bfa2     ED F2 FD 03 
1bfa6     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
1bfaa     13 10 0A 00 
1bfae     FF F7 F3 F9 
1bfb2     F7 FF 04 04 
1bfb6     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
1bfba     FF F9 ED EA 
1bfbe     E2 E6 E6 E3 
1bfc2     E6 E8 E3 DF 
1bfc6     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
1bfca     80 80 80 80 
1bfce     84 8C A3 B1 
1bfd2     BF D6 E0 EC 
1bfd6     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
1bfda     D9 D3 C0 BD 
1bfde     BD BF C3 C5 
1bfe2     C6 CA CF D4 
1bfe6     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
1bfea     D3 D0 D3 D4 
1bfee     D6 D9 D6 D9 
1bff2     D9 D9 E2 ED 
1bff6     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
1bffa     16 26 31 37 
1bffe     40 36 30 1E 
1c002     09 FC EC E6 
1c006     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
1c00a     27 3A 4B 57 
1c00e     64 64 5A 4F 
1c012     47 3D 3A 3D 
1c016     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
1c01a     60 59 51 43 
1c01e     37 26 18 0E 
1c022     03 00 04 04 
1c026     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
1c02a     26 09 F0 DC 
1c02e     CC C5 CA D6 
1c032     E6 FD 04 13 
1c036     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
1c03a     F6 E8 E6 DC 
1c03e     DC DC DC ED 
1c042     F7 FC FC F6 
1c046     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
1c04a     CC D0 E0 EC 
1c04e     00 10 21 2D 
1c052     2C 2D 24 16 
1c056     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
1c05a     C0 BD C0 D4 
1c05e     E2 F2 F6 F3 
1c062     F7 F9 F2 ED 
1c066     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
1c06a     18 26 31 37 
1c06e     37 2D 27 21 
1c072     21 24 2A 31 
1c076     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
1c07a     60 60 53 4B 
1c07e     44 37 2D 2A 
1c082     21 1E 1A 1E 
1c086     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
1c08a     49 47 41 36 
1c08e     14 FD E6 D3 
1c092     CC C5 CA D0 
1c096     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
1c09a     E6 E3 E6 E6 
1c09e     E8 EA EC ED 
1c0a2     F3 F6 F6 F6 
1c0a6     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
1c0aa     00 00 00 FD 
1c0ae     F7 F0 F6 FD 
1c0b2     09 16 24 34 
1c0b6     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
1c0ba     18 13 04 FD 
1c0be     EC E3 E2 E0 
1c0c2     DF D0 B5 9A 
1c0c6     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
1c0ca     80 80 80 94 
1c0ce     A2 AD B7 C5 
1c0d2     C9 CF D6 DA 
1c0d6     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
1c0da     A9 AC B9 C9 
1c0de     CF DF E2 E2 
1c0e2     D9 CF CC CC 
1c0e6     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
1c0ea     EC FF 0E 10 
1c0ee     13 13 0E 10 
1c0f2     0A 04 04 04 
1c0f6     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
1c0fa     F2 F0 E2 E0 
1c0fe     DC DA D9 DA 
1c102     DC D6 E0 F2 
1c106     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
1c10a     51 5A 59 4B 
1c10e     40 40 37 3A 
1c112     3A 3B 44 4F 
1c116     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
1c11a     34 31 2C 2D 
1c11e     30 37 40 49 
1c122     51 57 57 57 
1c126     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
1c12a     0E F6 D9 C3 
1c12e     BD BC C5 D3 
1c132     DF E8 E8 E8 
1c136     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
1c13a     CA C9 CA D4 
1c13e     DA EC FF 04 
1c142     01 F7 ED E2 
1c146     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
1c14a     F6 00 04 0D 
1c14e     0A 09 01 01 
1c152     03 0A 0A 0D 
1c156     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
1c15a     07 10 16 16 
1c15e     13 0A F7 F2 
1c162     ED E6 EA E6 
1c166     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
1c16a     00 04 0D 0A 
1c16e     0D 0E 1A 26 
1c172     36 47 54 5E 
1c176     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
1c17a     30 26 21 24 
1c17e     26 2C 2C 21 
1c182     21 24 2A 34 
1c186     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
1c18a     63 63 60 60 
1c18e     60 54 41 27 
1c192     0E FD F2 E3 
1c196     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
1c19a     B5 B9 BC B7 
1c19e     B3 BD BF C9 
1c1a2     C9 CC CA D4 
1c1a6     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
1c1aa     18 16 0D 0E 
1c1ae     0E 13 1E 26 
1c1b2     27 27 0E 00 
1c1b6     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
1c1ba     E6 E3 E6 F7 
1c1be     07 13 1A 18 
1c1c2     13 00 EA D9 
1c1c6     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
1c1ca     9D A0 A2 9A 
1c1ce     94 8C 86 8C 
1c1d2     80 80 80 80 
1c1d6     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
1c1da     A7 C3 D4 E0 
1c1de     E0 DF E0 E3 
1c1e2     E3 E8 E8 E8 
1c1e6     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
1c1ea     FC F7 F0 EA 
1c1ee     ED F6 00 0D 
1c1f2     14 1D 1E 1E 
1c1f6     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
1c1fa     FC FC FF 00 
1c1fe     FC FF FC FC 
1c202     FD FC 03 0A 
1c206     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
1c20a     F6 F7 01 0D 
1c20e     14 1E 24 2D 
1c212     43 54 59 5A 
1c216     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
1c21a     40 40 41 37 
1c21e     3A 2D 27 20 
1c222     1D 1E 21 30 
1c226     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
1c22a     34 2C 1A 13 
1c22e     1D 1E 1D 10 
1c232     F6 DA CA BD 
1c236     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
1c23a     B3 AD B3 B5 
1c23e     BF C6 C3 BC 
1c242     BC BD D3 E8 
1c246     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
1c24a     26 21 18 10 
1c24e     04 FC FD F9 
1c252     F0 E6 DF D6 
1c256     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
1c25a     13 14 0E 0A 
1c25e     0A 0D 14 1E 
1c262     26 30 2A 21 
1c266     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
1c26a     21 1A 16 13 
1c26e     16 18 10 04 
1c272     FF F3 EC E6 
1c276     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
1c27a     13 2D 43 54 
1c27e     66 68 63 5E 
1c282     63 66 71 64 
1c286     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
1c28a     2D 30 3B 41 
1c28e     40 41 44 41 
1c292     3D 31 21 09 
1c296     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
1c29a     F3 F0 EA DF 
1c29e     D3 CA C9 C3 
1c2a2     C5 C5 CA C6 
1c2a6     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
1c2aa     CC D9 E6 F7 
1c2ae     07 09 0A 07 
1c2b2     04 04 04 07 
1c2b6     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
1c2ba     04 04 09 07 
1c2be     F9 E8 DF E0 
1c2c2     EA F9 FC FC 
1c2c6     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
1c2ca     BD BC B3 A7 
1c2ce     A6 A0 9C 94 
1c2d2     94 8C 8F 92 
1c2d6     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
1c2da     8C 80 80 80 
1c2de     80 89 96 A9 
1c2e2     BD C5 DC F3 
1c2e6     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
1c2ea     2D 27 20 21 
1c2ee     1A 0E 07 F0 
1c2f2     D9 C6 B9 B9 
1c2f6     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
1c2fa     09 1A 27 2D 
1c2fe     2D 30 34 3D 
1c302     43 37 2C 1D 
1c306     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
1c30a     18 16 0E 09 
1c30e     FD ED EC F2 
1c312     F2 F3 F3 F6 
1c316     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
1c31a     3B 49 49 4B 
1c31e     4D 54 54 54 
1c322     59 54 4F 54 
1c326     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
1c32a     1E 14 13 00 
1c32e     F3 EC E2 DC 
1c332     DF DF E8 ED 
1c336     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
1c33a     F0 F9 F7 F2 
1c33e     EA E6 E3 E3 
1c342     E8 E2 D3 CA 
1c346     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
1c34a     B3 B7 C3 C5 
1c34e     D6 E3 FD 09 
1c352     16 1E 24 2D 
1c356     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
1c35a     F7 E3 DA DC 
1c35e     DF EA FC 0A 
1c362     0E 20 37 47 
1c366     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
1c36a     4D 49 40 34 
1c36e     2C 1A 0A FC 
1c372     F2 F2 F6 F9 
1c376     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
1c37a     03 09 0A 0D 
1c37e     13 21 2C 2D 
1c382     31 3B 43 4D 
1c386     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
1c38a     76 70 5E 4F 
1c38e     47 41 41 36 
1c392     26 13 0A 03 
1c396     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
1c39a     ED E3 E2 E8 
1c39e     EA F6 FC F6 
1c3a2     F3 F6 FC FC 
1c3a6     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
1c3aa     F9 EC D9 B9 
1c3ae     A2 96 86 92 
1c3b2     9C A9 BD D0 
1c3b6     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
1c3ba     2C 3D 43 43 
1c3be     41 40 40 3A 
1c3c2     2C 20 07 F2 
1c3c6     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
1c3ca     80 80 80 8C 
1c3ce     98 AC BC C0 
1c3d2     C9 D3 D3 C9 
1c3d6     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
1c3da     9C 9D A7 B7 
1c3de     C5 CF CC C6 
1c3e2     BC BF C0 C3 
1c3e6     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
1c3ea     CC D3 D9 D9 
1c3ee     DF E0 E3 ED 
1c3f2     F9 07 14 18 
1c3f6     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
1c3fa     0D 09 FD F9 
1c3fe     F9 F3 F9 03 
1c402     0A 0E 1A 27 
1c406     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
1c40a     31 21 18 1A 
1c40e     1D 20 24 26 
1c412     26 26 26 21 
1c416     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
1c41a     D4 D0 DA EC 
1c41e     FF 0A 18 2D 
1c422     3B 54 66 77 
1c426     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
1c42a     64 4B 24 01 
1c42e     E2 C9 B7 B5 
1c432     B7 C3 C9 D0 
1c436     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
1c43a     20 21 20 20 
1c43e     1E 13 0A 00 
1c442     FC EC E3 E0 
1c446     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
1c44a     CF C6 B9 B3 
1c44e     B5 B3 B7 BC 
1c452     C6 BF C9 D4 
1c456     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
1c45a     07 20 37 49 
1c45e     53 4F 47 47 
1c462     40 40 3A 31 
1c466     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
1c46a     01 00 FF 00 
1c46e     01 04 10 20 
1c472     2D 36 34 36 
1c476     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
1c47a     43 44 44 31 
1c47e     2A 2D 24 0D 
1c482     00 F9 F7 F7 
1c486     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
1c48a     1A 2C 00 00 
1c48e     FC FF 02 04 
1c492     05 07 07 09 
1c496     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
1c49a     08 07 06 06 
1c49e     05 04 04 04 
1c4a2     03 00 F4 EC 
1c4a6     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
1c4aa     00 BF FF 00 
1c4ae     CF FF E0 FF 
1c4b2     20 C0 FF 20 
1c4b6     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
1c4ba     10 FF 50 00 
1c4be     0F 20 07 18 
1c4c2     10 17 10 FF 
1c4c6     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
1c4ca     28 F0 FF 10 
1c4ce     F3 F1 FF 00 
1c4d2     DF F8 F0 F3 
1c4d6     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
1c4da     DF 10 F7 00 
1c4de     DF 1B 00 DF 
1c4e2     20 EB FC 1F 
1c4e6     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
1c4ea     08 EF 0F 14 
1c4ee     01 FF 10 03 
1c4f2     17 00 FF 30 
1c4f6     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
1c4fa     00 FB 0F 00 
1c4fe     EF F0 EF 00 
1c502     FF 00 FF 00 
1c506     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
1c50a     E8 F7 00 EB 
1c50e     FB 02 F0 E0 
1c512     FF 10 FF 30 
1c516     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
1c51a     FF 1B 08 0F 
1c51e     20 FF 10 FF 
1c522     10 FF 17 20 
1c526     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
1c52a     F3 0E 00 EB 
1c52e     D0 DF 06 00 
1c532     E0 FF 00 DF 
1c536     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
1c53a     F0 EF FF 20 
1c53e     E1 FF 10 FF 
1c542     10 FF 00 FF 
1c546     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
1c54a     0B 08 F7 09 
1c54e     2E 00 EF 20 
1c552     F3 FF 00 EB 
1c556     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
1c55a     0D 00 E7 FF 
1c55e     10 FF 10 F7 
1c562     07 20 00 EF 
1c566     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
1c56a     E5 EF F0 F7 
1c56e     10 00 FB F8 
1c572     F5 FD 06 00 
1c576     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
1c57a     08 FF 18 08 
1c57e     07 18 00 F7 
1c582     00 FF 09 12 
1c586     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
1c58a     FF 00 FF 08 
1c58e     F9 E4 E5 F7 
1c592     F4 E0 EF F0 
1c596     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
1c59a     00 FF 1F 00 
1c59e     EF 20 07 00 
1c5a2     FE F0 FF 00 
1c5a6     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
1c5aa     FF 00 FF 00 
1c5ae     F7 0B 10 F0 
1c5b2     FF 10 FB 00 
1c5b6     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
1c5ba     0F 10 0F 04 
1c5be     E8 FF 00 DF 
1c5c2     FC F0 DF E4 
1c5c6     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
1c5ca     F7 06 00 EF 
1c5ce     FE F4 FF 10 
1c5d2     FF 07 08 07 
1c5d6     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
1c5da     0F E0 FF 20 
1c5de     D7 1F 10 DF 
1c5e2     20 FF 03 1F 
1c5e6     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
1c5ea     00 EF FF F0 
1c5ee     EF 00 FF F1 
1c5f2     FF 00 FF 0F 
1c5f6     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
1c5fa     00 EF 00 F4 
1c5fe     EF FF F8 FF 
1c602     00 FE F7 FF 
1c606     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
1c60a     00 FF 10 FF 
1c60e     00 06 03 17 
1c612     00 F7 08 05 
1c616     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
1c61a     FF F0 F7 0F 
1c61e     00 F7 0B 10 
1c622     F0 F7 08 FF 
1c626     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
1c62a     08 F0 FF 00 
1c62e     F7 FF 08 E5 
1c632     FF 00 EF 0F 
1c636     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
1c63a     FF 00 12 00 
1c63e     FF 00 FF 10 
1c642     04 FF 02 0D 
1c646     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
1c64a     FF 08 FB 05 
1c64e     10 08 F8 FB 
1c652     FD 0B 00 EF 
1c656     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
1c65a     10 00 EF 0F 
1c65e     00 FF 00 FF 
1c662     07 00 EF 00 
1c666     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
1c66a     00 FF 00 FF 
1c66e     00 EF 17 10 
1c672     FF 10 F0 FF 
1c676     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
1c67a     04 08 F0 FF 
1c67e     00 FD F0 FF 
1c682     00 EF FF 00 
1c686     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
1c68a     00 FF 08 F8 
1c68e     EB FF 00 FB 
1c692     FB 0D 00 FF 
1c696     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
1c69a     07 04 03 0A 
1c69e     F0 FF 08 F7 
1c6a2     0F 08 FF 09 
1c6a6     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
1c6aa     00 0F 00 FF 
1c6ae     00 F0 FF 00 
1c6b2     F5 FF 00 0B 
1c6b6     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
1c6ba     F0 FF 08 F1 
1c6be     FF 00 FD FB 
1c6c2     00 0B 00 F5 
1c6c6     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
1c6ca     0A 04 F8 FF 
1c6ce     08 FB 07 00 
1c6d2     FF 08 FF 0F 
1c6d6     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
1c6da     0F 00 FF 00 
1c6de     FC F7 0C F2 
1c6e2     FF 04 04 FF 
1c6e6     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
1c6ea     FF 03 08 FC 
1c6ee     FA F2 FB FF 
1c6f2     F8 EF FF F0 
1c6f6     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
1c6fa     00 FB 07 02 
1c6fe     0F 00 0F 09 
1c702     16 00 17 08 
1c706     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
1c70a     09 00 EF 0F 
1c70e     00 EF 0B 00 
1c712     FF 00 00 F7 
1c716     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
1c71a     FE FF F8 FF 
1c71e     00 F7 FF 00 
1c722     FB F9 FC FF 
1c726     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
1c72a     FF 03 0C F2 
1c72e     FF 09 08 FB 
1c732     15 00 FF 00 
1c736     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
1c73a     FD 15 00 FF 
1c73e     00 04 03 0A 
1c742     F4 FF 00 FF 
1c746     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
1c74a     E5 FF 00 F7 
1c74e     FF 00 FF 00 
1c752     FF 0E 00 FF 
1c756     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
1c75a     14 00 FF 00 
1c75e     F5 0F 00 FF 
1c762     F3 FF FB 04 
1c766     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
1c76a     00 FE F7 06 
1c76e     00 FF 09 00 
1c772     07 00 ED FF 
1c776     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
1c77a     F6 FF 05 00 
1c77e     FF 00 FD 04 
1c782     F4 F9 F7 FD 
1c786     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
1c78a     F7 08 F0 FD 
1c78e     FF 00 F3 0B 
1c792     00 FF 07 00 
1c796     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
1c79a     08 04 FF 08 
1c79e     F9 0C F7 12 
1c7a2     F1 0F 00 FF 
1c7a6     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
1c7aa     FF 02 F8 FF 
1c7ae     00 FD FF 00 
1c7b2     FC FD 01 F8 
1c7b6     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
1c7ba     F9 02 FA F7 
1c7be     06 00 02 FB 
1c7c2     04 07 04 FB 
1c7c6     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
1c7ca     04 00 FF F8 
1c7ce     FF 07 00 FB 
1c7d2     0E F2 FF 00 
1c7d6     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
1c7da     F4 FA FF 00 
1c7de     FC FB 08 00 
1c7e2     FF 03 00 FB 
1c7e6     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
1c7ea     01 00 00 FB 
1c7ee     04 FD 04 00 
1c7f2     FB 04 FA FF 
1c7f6     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
1c7fa     00 FF 03 08 
1c7fe     01 0A 00 08 
1c802     01 00 F7 0B 
1c806     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
1c80a     FF F5 FB FD 
1c80e     F8 FE FB FF 
1c812     FA F9 FF 05 
1c816     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
1c81a     06 01 04 FF 
1c81e     08 F8 FF 00 
1c822     F6 FF FB 02 
1c826     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
1c82a     00 EF 0D 00 
1c82e     F6 FF 00 FB 
1c832     0A F3 08 03 
1c836     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
1c83a     FB FF 00 F3 
1c83e     FF FA F4 F7 
1c842     FF 00 F6 F9 
1c846     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
1c84a     FA FF 00 FD 
1c84e     08 F9 05 03 
1c852     04 00 FF 04 
1c856     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
1c85a     F3 0E FB 08 
1c85e     01 03 06 06 
1c862     02 FD 04 F9 
1c866     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
1c86a     FE 00 F8 FB 
1c86e     04 00 F8 FF 
1c872     04 00 F9 FF 
1c876     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
1c87a     02 00 F9 FF 
1c87e     01 00 FD 05 
1c882     04 04 04 00 
1c886     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
1c88a     02 FF 0C FB 
1c88e     08 03 04 00 
1c892     FD FE F9 FA 
1c896     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
1c89a     F9 FF 00 F8 
1c89e     FE FD 00 FE 
1c8a2     FB FF 00 FA 
1c8a6     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
1c8aa     00 FB 04 03 
1c8ae     08 01 04 FF 
1c8b2     04 FC FF 02 
1c8b6     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
1c8ba     02 00 00 03 
1c8be     04 00 FF 08 
1c8c2     00 FF 06 00 
1c8c6     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
1c8ca     FD FF 00 01 
1c8ce     00 FB 00 F5 
1c8d2     FD F7 F6 FA 
1c8d6     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
1c8da     04 02 04 00 
1c8de     FF 03 00 FF 
1c8e2     08 F7 FF 02 
1c8e6     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
1c8ea     00 F9 FF FE 
1c8ee     00 FF 01 FE 
1c8f2     03 00 FB 06 
1c8f6     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
1c8fa     FF 05 01 00 
1c8fe     FF 00 FB FF 
1c902     FF FC FF 00 
1c906     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
1c90a     FD 00 FB 00 
1c90e     FF 00 FB 03 
1c912     03 01 06 04 
1c916     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
1c91a     FB 08 01 00 
1c91e     FF 00 FB FF 
1c922     00 F7 08 F7 
1c926     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
1c92a     FB F9 FB FE 
1c92e     FA FD FF 01 
1c932     00 FF 02 00 
1c936     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
1c93a     00 FF 04 FD 
1c93e     05 08 00 00 
1c942     02 00 FF 00 
1c946     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
1c94a     FD 05 04 FD 
1c94e     09 08 01 02 
1c952     03 00 FD FE 
1c956     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
1c95a     FF 00 F7 FE 
1c95e     FC F5 FA FD 
1c962     F8 FB FF FD 
1c966     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
1c96a     04 05 08 03 
1c96e     07 04 01 04 
1c972     02 00 FE FC 
1c976     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
1c97a     00 FF 00 FF 
1c97e     04 00 FF 02 
1c982     FF 02 FF 03 
1c986     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
1c98a     02 00 00 FF 
1c98e     00 FE FC FD 
1c992     FE FC FD FC 
1c996     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
1c99a     FA FF 02 FD 
1c99e     FE 03 04 00 
1c9a2     04 05 02 05 
1c9a6     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
1c9aa     01 03 01 01 
1c9ae     01 FF 00 FF 
1c9b2     02 FA FD 00 
1c9b6     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
1c9ba     00 FE FF 04 
1c9be     02 FF 01 02 
1c9c2     00 FD FE FC 
1c9c6     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
1c9ca     FE 00 00 FD 
1c9ce     FF 00 01 00 
1c9d2     FF 02 00 FF 
1c9d6     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
1c9da     01 00 FF 00 
1c9de     03 00 FD FE 
1c9e2     FF FD FF 00 
1c9e6     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
1c9ea     FF 02 FD FE 
1c9ee     FE FE FE FD 
1c9f2     FC FC FF 00 
1c9f6     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
1c9fa     04 02 01 00 
1c9fe     FE FF FC FC 
1ca02     FD FF FD FE 
1ca06     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
1ca0a     01 00 00 FF 
1ca0e     03 01 FF 03 
1ca12     02 FF 03 02 
1ca16     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
1ca1a     00 00 FD 00 
1ca1e     FF FC FA FC 
1ca22     FC FB FE FD 
1ca26     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
1ca2a     FE FF 00 03 
1ca2e     02 01 03 02 
1ca32     01 00 01 00 
1ca36     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
1ca3a     00 00 FD FF 
1ca3e     00 FF 00 FF 
1ca42     02 02 02 02 
1ca46     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
1ca4a     00 FD FE FE 
1ca4e     FF 00 FF 02 
1ca52     01 01 00 FD 
1ca56     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
1ca5a     FB FD F8 FB 
1ca5e     FD FD FF 00 
1ca62     03 01 03 02 
1ca66     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
1ca6a     00 FF 04 01 
1ca6e     03 04 00 FF 
1ca72     00 FF 01 00 
1ca76     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
1ca7a     FD FE FF 01 
1ca7e     02 00 FE FE 
1ca82     FF FE FF 00 
1ca86     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
1ca8a     FF 01 FF FF 
1ca8e     00 FE FF 01 
1ca92     01 01 01 01 
1ca96     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
1ca9a     04 05 06 02 
1ca9e     03 02 00 00 
1caa2     00 FF 00 FE 
1caa6     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
1caaa     FF 00 FE FD 
1caae     FE FC FA FB 
1cab2     FC FC FD FD 
1cab6     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
1caba     FE FF FF 01 
1cabe     01 02 02 02 
1cac2     02 02 01 01 
1cac6     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
1caca     00 FF 00 FE 
1cace     FF 00 FE FF 
1cad2     FF FF FF FF 
1cad6     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
1cada     03 03 02 02 
1cade     00 FF 00 FD 
1cae2     FD FD FC FB 
1cae6     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
1caea     FC FD FE FF 
1caee     00 00 02 03 
1caf2     01 03 00 FF 
1caf6     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
1cafa     FE FE FE FE 
1cafe     FD FE FF 00 
1cb02     FE FF 00 FF 
1cb06     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
1cb0a     03 03 02 02 
1cb0e     02 02 01 01 
1cb12     02 00 FF 00 
1cb16     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
1cb1a     FF FE FD FD 
1cb1e     FC FB FB FC 
1cb22     FD FF 00 FE 
1cb26     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
1cb2a     01 02 01 01 
1cb2e     01 01 02 02 
1cb32     02 03 02 01 
1cb36     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
1cb3a     00 00 FF FE 
1cb3e     FF 00 01 01 
1cb42     02 00 01 00 
1cb46     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
1cb4a     00 FE FE FE 
1cb4e     FE FD FE FD 
1cb52     FD FD FD FD 
1cb56     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
1cb5a     FE FF FF 01 
1cb5e     02 02 03 02 
1cb62     03 04 02 02 
1cb66     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
1cb6a     FE FE FE FF 
1cb6e     00 FF 00 00 
1cb72     FF 00 FD FD 
1cb76     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
1cb7a     FE FF FE FE 
1cb7e     FD FD FD FF 
1cb82     FE FF 00 FE 
1cb86     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
1cb8a     00 FF FE FE 
1cb8e     FD FE FF FF 
1cb92     01 01 01 02 
1cb96     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
1cb9a     06 04 03 02 
1cb9e     00 FF FF FF 
1cba2     FC FA FA F9 
1cba6     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
1cbaa     FA FB FB FB 
1cbae     FC FC FD FE 
1cbb2     FF 01 01 01 
1cbb6     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
1cbba     01 02 03 04 
1cbbe     02 01 00 FF 
1cbc2     00 00 FF FF 
1cbc6     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
1cbca     FF 00 00 00 
1cbce     00 00 00 00 
1cbd2     00 FF 00 FF 
1cbd6     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
1cbda     FA FB FC FB 
1cbde     FC FC FD FD 
1cbe2     FE FF FF 01 
1cbe6     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
1cbea     FF 01 02 02 
1cbee     02 04 03 02 
1cbf2     02 02 02 02 
1cbf6     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
1cbfa     00 00 FE FE 
1cbfe     FE FE FE FD 
1cc02     FD FE FE FF 
1cc06     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
1cc0a     00 00 00 00 
1cc0e     00 00 00 00 
1cc12     00          | 	byte	$00[9]
1cc13     FF FE FC FC 
1cc17     FC FC FD FE 
1cc1b     FF FF 00 00 
1cc1f     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
1cc23     01 01 01 00 
1cc27     00 00 01 01 
1cc2b     01 01 00 00 
1cc2f     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
1cc33     00 FF FF FF 
1cc37     FE FE FE FF 
1cc3b     FF FF 01 00 
1cc3f     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
1cc43     02 03 03 02 
1cc47     01 01 01 01 
1cc4b     01 01 01 00 
1cc4f     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
1cc53     FF FF 00 00 
1cc57     01 03 05 06 
1cc5b     06 05 05 04 
1cc5f     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
1cc63     00 FE FE FD 
1cc67     FC FC FB FA 
1cc6b     FA FA FB FB 
1cc6f     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
1cc73     FE FF 01 01 
1cc77     01 02 02 01 
1cc7b     02 02 03 04 
1cc7f     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
1cc83     02 01 00 01 
1cc87     01 01 00 00 
1cc8b     00 FF FF FF 
1cc8f     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
1cc93     02 03 03 02 
1cc97     02 00 00 FF 
1cc9b     FF FF FF FF 
1cc9f     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
1cca3     FD FD FD FC 
1cca7     FD FE FE FF 
1ccab     FE FE FF 01 
1ccaf     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
1ccb3     04 04 04 02 
1ccb7     02 02 02 01 
1ccbb     02 00 00 FE 
1ccbf     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
1ccc3     FD FC FC FD 
1ccc7     FD FD FD FF 
1cccb     00 00 01 02 
1cccf     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
1ccd3     00 00 00 00 
1ccd7     00          | 	byte	$00[5]
1ccd8     01 00 00 FF 
1ccdc     FE FE FE FD 
1cce0     FE FF FF 00 
1cce4     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
1cce8     05 06 05 04 
1ccec     04 04 02 02 
1ccf0     00 00 00 FF 
1ccf4     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
1ccf8     FD FE FE FE 
1ccfc     FE FE FF FF 
1cd00     FE FD FD FD 
1cd04     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
1cd08     FF FF FF FF 
1cd0c     FF          | 	byte	$ff[5]
1cd0d     00 00 FF FF 
1cd11     FF FE FE FE 
1cd15     FE FD FD FE 
1cd19     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
1cd1d     01 02 02 02 
1cd21     02 02 03 02 
1cd25     02 01 01 00 
1cd29     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
1cd2d     FC FD FE FD 
1cd31     FE FD FD FE 
1cd35     FE FE FF FE 
1cd39     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
1cd3d     01 01 01 02 
1cd41     03 04 03 02 
1cd45     02 01 FE 00 
1cd49     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
1cd4d     01 0A 10 13 
1cd51     16 0E 10 13 
1cd55     16 1D 1E 14 
1cd59     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
1cd5d     04 14 13 1D 
1cd61     1E 1D 1A 18 
1cd65     16 13 13 13 
1cd69     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
1cd6d     E8 C5 8F 80 
1cd71     80 80 80 80 
1cd75     80 80 92 A7 
1cd79     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
1cd7d     EA FC 0A 18 
1cd81     1D 13 FD E2 
1cd85     C6 BF BC BD 
1cd89     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
1cd8d     AC AD B5 C6 
1cd91     CA E3 F6 04 
1cd95     09 13 18 14 
1cd99     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
1cd9d     F9 F6 F6 ED 
1cda1     E6 ED E6 EC 
1cda5     ED F9 03 10 
1cda9     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
1cdad     40 43 41 47 
1cdb1     53 5D 5D 59 
1cdb5     3D 2A 18 09 
1cdb9     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
1cdbd     0A 0E 24 31 
1cdc1     34 30 20 1D 
1cdc5     14 1A 0E 0D 
1cdc9     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
1cdcd     20 30 36 3D 
1cdd1     47 44 34 26 
1cdd5     07 F9 F2 F7 
1cdd9     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
1cddd     1E 21 1E 14 
1cde1     18 18 18 16 
1cde5     0E 0E FF F3 
1cde9     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
1cded     B7 AD A9 A2 
1cdf1     A3 A6 A7 A9 
1cdf5     B3 C0 CF E3 
1cdf9     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
1cdfd     FD 0A 14 1A 
1ce01     1A 1A 1A 10 
1ce05     0D 04 FC F0 
1ce09     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
1ce0d     DF E8 FD 0E 
1ce11     21 3A 4D 68 
1ce15     76 7C 70 5A 
1ce19     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
1ce1d     01 FC FD FC 
1ce21     F7 07 03 07 
1ce25     00 F6 E3 D4 
1ce29     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
1ce2d     D4 DA E3 EA 
1ce31     F2 ED E8 E2 
1ce35     D6 CF CC B7 
1ce39     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
1ce3d     CA DF F3 FD 
1ce41     FD F3 F6 F6 
1ce45     F9 FF 03 03 
1ce49     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
1ce4d     DF DC D9 DA 
1ce51     E2 E3 EC F7 
1ce55     03 0D 20 30 
1ce59     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
1ce5d     2A 18 07 FD 
1ce61     F2 ED E8 F0 
1ce65     F6 01 07 10 
1ce69     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
1ce6d     DF C5 B1 A0 
1ce71     89 89 92 9A 
1ce75     AF C6 CF E8 
1ce79     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
1ce7d     D6 D0 C6 BF 
1ce81     C3 BD CA C9 
1ce85     CA CC C6 C0 
1ce89     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
1ce8d     A7 B7 C0 CF 
1ce91     DF ED 03 10 
1ce95     14 09 0A 03 
1ce99     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
1ce9d     01 F0 EC E6 
1cea1     E2 E2 E6 EA 
1cea5     F6 F7 03 13 
1cea9     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
1cead     74 74 71 63 
1ceb1     44 31 18 07 
1ceb5     03 EC EC EC 
1ceb9     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
1cebd     37 41 36 2A 
1cec1     18 00 F6 F3 
1cec5     F6 F9 FD 04 
1cec9     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
1cecd     40 44 43 31 
1ced1     27 24 21 24 
1ced5     21 26 2C 3A 
1ced9     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
1cedd     4D 36 20 01 
1cee1     E2 D0 C0 BD 
1cee5     B9 C3 D0 D4 
1cee9     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
1ceed     BD BF C0 C5 
1cef1     C5 D0 D9 D3 
1cef5     E0 E3 E6 EC 
1cef9     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
1cefd     E6 ED F9 04 
1cf01     0E 07 07 FF 
1cf05     F9 EC E0 D9 
1cf09     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
1cf0d     00 14 30 4D 
1cf11     64 71 76 5E 
1cf15     51 36 27 24 
1cf19     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
1cf1d     14 10 13 0D 
1cf21     0D 09 00 F6 
1cf25     E8 CA BC B5 
1cf29     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
1cf2d     E8 F7 00 07 
1cf31     FF F9 ED D4 
1cf35     C5 AF AD AF 
1cf39     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
1cf3d     00 00 FD F6 
1cf41     F0 F2 EC E8 
1cf45     E3 DC D9 D4 
1cf49     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
1cf4d     D3 C9 C0 C3 
1cf51     CF E8 FC 13 
1cf55     21 3A 3A 3D 
1cf59     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
1cf5d     13 FC E0 CC 
1cf61     C9 CA D6 E8 
1cf65     F2 04 09 00 
1cf69     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
1cf6d     E6 F0 F6 F6 
1cf71     ED E3 E8 E6 
1cf75     EC EC E3 D0 
1cf79     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
1cf7d     9D AC A9 AD 
1cf81     B1 B1 B7 C5 
1cf85     C5 BF B7 AC 
1cf89     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
1cf8d     90 A3 BF DA 
1cf91     F3 FC FF 00 
1cf95     09 10 18 24 
1cf99     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
1cf9d     0E FF F9 F0 
1cfa1     F0 F2 E2 E2 
1cfa5     E3 F0 FF 1A 
1cfa9     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
1cfad     43 49 49 44 
1cfb1     2D 20 07 FC 
1cfb5     F9 FC 0A 18 
1cfb9     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
1cfbd     09 00 ED E3 
1cfc1     E2 E8 EA FC 
1cfc5     01 14 20 27 
1cfc9     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
1cfcd     1E 13 0D 0E 
1cfd1     20 3B 49 63 
1cfd5     63 63 5A 59 
1cfd9     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
1cfdd     0A EA CF BD 
1cfe1     B5 AF B1 BC 
1cfe5     C0 C3 C0 C0 
1cfe9     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
1cfed     CF C9 CA CF 
1cff1     D9 D6 DF E0 
1cff5     DF E0 E0 DC 
1cff9     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
1cffd     ED FD FC F3 
1d001     F6 F2 F6 FD 
1d005     FD FF F0 E8 
1d009     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
1d00d     09 1A 36 3A 
1d011     3D 3A 31 31 
1d015     27 2C 2D 37 
1d019     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
1d01d     2C 21 16 F9 
1d021     E2 D0 CC C9 
1d025     CF DF E6 EC 
1d029     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
1d02d     F0 FD 00 01 
1d031     EC DC C9 BC 
1d035     BF BF D3 E0 
1d039     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
1d03d     D9 D4 D0 DA 
1d041     DC EA EC ED 
1d045     F0 ED DA D3 
1d049     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
1d04d     BF C3 D6 E2 
1d051     F6 F7 FC 03 
1d055     03 0A 16 20 
1d059     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
1d05d     E2 D6 D4 D4 
1d061     E2 EC FD 01 
1d065     FF FF FF FD 
1d069     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
1d06d     21 27 1E 07 
1d071     F2 DA CC CA 
1d075     C0 C0 BC A7 
1d079     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
1d07d     90 9C 9D A6 
1d081     B1 BF C9 BD 
1d085     AC 94 89 80 
1d089     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
1d08d     B3 C6 CC D6 
1d091     F0 F2 00 13 
1d095     24 31 37 40 
1d099     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
1d09d     FC E3 DF D3 
1d0a1     D0 D0 DF EA 
1d0a5     01 14 26 3A 
1d0a9     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
1d0ad     31 36 2C 1D 
1d0b1     0A 09 04 09 
1d0b5     14 0E 09 FD 
1d0b9     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
1d0bd     E0 E3 F2 04 
1d0c1     16 20 31 37 
1d0c5     36 37 37 37 
1d0c9     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
1d0cd     26 2A 36 40 
1d0d1     4D 54 5A 57 
1d0d5     4B 44 49 43 
1d0d9     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
1d0dd     CC B3 A7 A6 
1d0e1     A7 A9 A9 AD 
1d0e5     B7 C6 D3 CA 
1d0e9     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
1d0ed     EA E6 E6 DA 
1d0f1     DA DA DA E0 
1d0f5     E2 DC D4 D4 
1d0f9     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
1d0fd     EC F0 F0 F9 
1d101     01 01 03 FC 
1d105     ED E6 E8 E6 
1d109     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
1d10d     27 2D 26 1E 
1d111     21 1E 2A 34 
1d115     43 4B 54 4F 
1d119     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
1d11d     E0 CF CC C9 
1d121     C9 CA DC EA 
1d125     FF 14 26 2D 
1d129     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
1d12d     21 07 F7 ED 
1d131     D4 D3 CF CA 
1d135     CA C0 AF A6 
1d139     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
1d13d     E0 F2 FD 09 
1d141     07 F6 E3 D4 
1d145     BF BD BC BF 
1d149     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
1d14d     C6 C9 CC D6 
1d151     E3 EA F6 01 
1d155     10 1E 21 1E 
1d159     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
1d15d     EA ED F6 F6 
1d161     EA EA E8 EC 
1d165     F2 F7 FF 0A 
1d169     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
1d16d     37 27 10 F9 
1d171     E2 D9 C9 AC 
1d175     94 83 80 80 
1d179     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
1d17d     98 92 98 A0 
1d181     A0 96 90 92 
1d185     83 86 8A 98 
1d189     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
1d18d     DA F0 FF 16 
1d191     26 36 43 47 
1d195     49 40 27 0A 
1d199     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
1d19d     D9 E3 E2 E8 
1d1a1     F3 01 0E 1D 
1d1a5     16 16 0E 13 
1d1a9     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
1d1ad     27 1E 18 07 
1d1b1     FC F9 EC E8 
1d1b5     CC CF C9 CF 
1d1b9     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
1d1bd     27 3A 4B 51 
1d1c1     53 49 47 34 
1d1c5     34 27 2C 2C 
1d1c9     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
1d1cd     26 30 40 54 
1d1d1     64 6A 71 6A 
1d1d5     5A 40 24 04 
1d1d9     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
1d1dd     B1 AF A6 A6 
1d1e1     A7 A6 A6 A9 
1d1e5     B5 BD CC DF 
1d1e9     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
1d1ed     E8 E0 E3 E6 
1d1f1     F2 F0 EA EC 
1d1f5     E2 E0 E2 E2 
1d1f9     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
1d1fd     E2 F2 F9 F9 
1d201     FD FD FF 00 
1d205     01 0A 13 13 
1d209     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
1d20d     13 1D 2C 3D 
1d211     47 5A 59 4D 
1d215     37 20 0D F7 
1d219     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
1d21d     E2 E3 E2 ED 
1d221     FD 03 16 2A 
1d225     36 4B 57 6A 
1d229     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
1d22d     14 EA D0 BC 
1d231     AC 98 8F 8F 
1d235     9C AC BF D6 
1d239     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
1d23d     FF FF F6 EA 
1d241     DF D4 C5 C9 
1d245     C5 B7 B7 AF 
1d249     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
1d24d     BF CF DF F2 
1d251     FC 14 14 24 
1d255     27 27 1E 1A 
1d259     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
1d25d     DF CF D0 D0 
1d261     D6 E2 F6 03 
1d265     14 2C 41 4D 
1d269     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
1d26d     18 FC D3 B1 
1d271     94 80 80 80 
1d275     80 80 80 80 
1d279     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1d27d     89 98 9D A2 
1d281     A2 A2 A3 AD 
1d285     AF B3 B9 C3 
1d289     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
1d28d     10 1E 1D 20 
1d291     26 1D 10 0A 
1d295     00 F7 F2 ED 
1d299     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
1d29d     01 F7 F7 F0 
1d2a1     F3 F9 00 04 
1d2a5     07 13 13 1D 
1d2a9     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
1d2ad     ED DC D4 BF 
1d2b1     B9 B7 BC C9 
1d2b5     DF F3 00 1D 
1d2b9     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
1d2bd     60 63 53 43 
1d2c1     30 21 1D 18 
1d2c5     1D 1D 1E 20 
1d2c9     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
1d2cd     60 6C 6C 6A 
1d2d1     60 53 43 24 
1d2d5     09 ED DC CF 
1d2d9     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
1d2dd     90 94 96 A2 
1d2e1     B3 C5 D6 E2 
1d2e5     F0 F9 FD FD 
1d2e9     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
1d2ed     F9 F9 FC F0 
1d2f1     E2 CC BC B3 
1d2f5     B1 B7 C6 CF 
1d2f9     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
1d2fd     04 0E 18 18 
1d301     10 04 09 FC 
1d305     F9 FC 04 0D 
1d309     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
1d30d     31 30 27 20 
1d311     14 10 04 01 
1d315     FD F3 F7 F7 
1d319     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
1d31d     01 0D 1A 2D 
1d321     4B 51 54 49 
1d325     41 3A 3B 3B 
1d329     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
1d32d     0A F3 E2 D0 
1d331     CA C3 C5 C5 
1d335     D3 D9 E3 E6 
1d339     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
1d33d     E2 CC BD AD 
1d341     A0 A6 A6 A3 
1d345     A6 A6 A6 A9 
1d349     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
1d34d     FD 03 0D 1D 
1d351     26 36 3B 2D 
1d355     1A 01 E6 C9 
1d359     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
1d35d     DA EC 03 18 
1d361     2D 3D 4F 49 
1d365     49 43 3A 36 
1d369     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
1d36d     F7 DA B5 80 
1d371     80 80 80 80 
1d375     80 80 80 80 
1d379     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
1d37d     AF B7 B7 B9 
1d381     B3 B5 B7 CA 
1d385     D9 E8 F3 F3 
1d389     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
1d38d     09 04 0D 0A 
1d391     0D 0E 04 09 
1d395     09 0A 03 03 
1d399     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
1d39d     D4 E6 F6 01 
1d3a1     09 FC F3 F0 
1d3a5     F6 F9 00 FF 
1d3a9     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
1d3ad     B9 BF C5 DA 
1d3b1     E8 FF 18 2D 
1d3b5     41 57 57 57 
1d3b9     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
1d3bd     1A 10 0E 10 
1d3c1     14 21 21 20 
1d3c5     1E 1E 26 3A 
1d3c9     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
1d3cd     44 49 4F 5E 
1d3d1     6A 68 4B 1D 
1d3d5     F0 B3 9A 89 
1d3d9     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
1d3dd     AD C5 DA F2 
1d3e1     F2 F7 FD 00 
1d3e5     0E 18 1D 16 
1d3e9     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
1d3ed     D6 BD AF A3 
1d3f1     A7 B3 C3 DA 
1d3f5     E6 E3 DF EC 
1d3f9     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
1d3fd     16 0D FF E8 
1d401     E3 EC F3 07 
1d405     0E 0E 13 16 
1d409     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
1d40d     0E 0E 13 18 
1d411     21 24 21 20 
1d415     20 20 21 21 
1d419     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
1d41d     18 1A 1E 14 
1d421     09 10 18 2D 
1d425     41 49 44 36 
1d429     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
1d42d     0A 0D 1A 27 
1d431     27 26 1E 10 
1d435     00 F6 E6 D0 
1d439     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
1d43d     A7 A3 A0 A2 
1d441     A2 A2 A6 A6 
1d445     A7 AF B7 D4 
1d449     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
1d44d     09 1A 1E 20 
1d451     1D 0A F6 E2 
1d455     D3 D4 DC DF 
1d459     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
1d45d     1D 2D 2A 30 
1d461     27 2C 27 26 
1d465     26 16 14 0E 
1d469     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
1d46d     C3 A9 92 80 
1d471     80 80 80 80 
1d475     80 80 80 8F 
1d479     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
1d47d     C9 B9 B9 B3 
1d481     B7 B5 B5 BD 
1d485     C5 D3 E2 F6 
1d489     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
1d48d     10 14 21 21 
1d491     24 1A 18 0A 
1d495     04 F6 E8 DA 
1d499     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
1d49d     D9 D3 CF C3 
1d4a1     C3 CF DA EA 
1d4a5     ED F0 F2 DC 
1d4a9     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
1d4ad     F6 01 14 21 
1d4b1     30 36 36 2D 
1d4b5     26 20 1E 20 
1d4b9     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
1d4bd     3B 36 2D 26 
1d4c1     21 16 0E 0D 
1d4c5     13 18 20 21 
1d4c9     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
1d4cd     47 4F 53 51 
1d4d1     49 2C 10 00 
1d4d5     E6 D0 BF B1 
1d4d9     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
1d4dd     E8 F0 F7 04 
1d4e1     07 14 18 0D 
1d4e5     09 F7 ED E0 
1d4e9     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
1d4ed     CA CC D6 DC 
1d4f1     E3 E3 E3 E3 
1d4f5     DC E3 ED FC 
1d4f9     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
1d4fd     F3 F0 F9 F3 
1d501     F6 F3 F3 F3 
1d505     F6 F6 F7 FC 
1d509     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
1d50d     43 44 4D 54 
1d511     54 51 4B 3D 
1d515     2D 16 03 ED 
1d519     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
1d51d     F3 F9 04 14 
1d521     27 3B 40 40 
1d525     41 2C 21 18 
1d529     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
1d52d     27 27 2C 30 
1d531     34 2C 2D 21 
1d535     18 07 F7 E2 
1d539     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
1d53d     BD BF C0 BC 
1d541     B7 AF B5 B9 
1d545     C0 C9 C6 CA 
1d549     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
1d54d     F0 03 0D 0A 
1d551     0D 0D 10 14 
1d555     10 09 01 F9 
1d559     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
1d55d     F7 00 FF 0E 
1d561     10 16 18 0E 
1d565     0E 03 FF F3 
1d569     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
1d56d     C0 BC C6 CA 
1d571     C0 B3 9C 8F 
1d575     8A 96 9C B3 
1d579     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
1d57d     9C A2 AD B5 
1d581     BF C0 D3 D9 
1d585     E8 EC FD 03 
1d589     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
1d58d     21 21 24 26 
1d591     20 13 07 FD 
1d595     ED D0 BC A9 
1d599     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
1d59d     9C 9A A7 B7 
1d5a1     C6 E3 F0 F3 
1d5a5     F2 F2 FD 01 
1d5a9     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
1d5ad     09 07 07 04 
1d5b1     09 0E 16 20 
1d5b5     2D 34 43 49 
1d5b9     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
1d5bd     27 20 14 0A 
1d5c1     01 FC F9 F9 
1d5c5     F9 00 07 07 
1d5c9     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
1d5cd     41 49 3B 3A 
1d5d1     3B 3A 40 44 
1d5d5     44 37 20 09 
1d5d9     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
1d5dd     D9 DF DF E6 
1d5e1     E3 EC EC ED 
1d5e5     ED F6 F6 FC 
1d5e9     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
1d5ed     ED E3 DA D4 
1d5f1     D0 CC CA CA 
1d5f5     D6 E6 EC F6 
1d5f9     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
1d5fd     E3 ED F2 F6 
1d601     F6 EC F0 F2 
1d605     FF 10 21 34 
1d609     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
1d60d     60 60 5A 51 
1d611     43 34 24 1D 
1d615     04 F7 E6 DC 
1d619     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
1d61d     F3 00 0D 18 
1d621     1A 21 1A 16 
1d625     10 14 20 2A 
1d629     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
1d62d     20 1E 1E 20 
1d631     2A 2C 30 37 
1d635     37 3A 36 2C 
1d639     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
1d63d     CA C3 B7 AC 
1d641     9A 92 8C 8A 
1d645     92 A0 AF BD 
1d649     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
1d64d     18 1E 21 24 
1d651     30 30 26 18 
1d655     04 F3 E0 D6 
1d659     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
1d65d     E3 EA EA ED 
1d661     F6 F6 FD FD 
1d665     FD FF 01 03 
1d669     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
1d66d     E8 E6 E2 E3 
1d671     E2 DF D9 CA 
1d675     C0 B9 A9 96 
1d679     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
1d67d     AD B9 BF C6 
1d681     C9 D6 D6 E8 
1d685     F0 F0 FC 00 
1d689     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
1d68d     1A 1D 18 0E 
1d691     FD F6 E3 D6 
1d695     BF AC 9D 8F 
1d699     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
1d69d     B1 B9 C9 DF 
1d6a1     E8 EA E3 E6 
1d6a5     E8 E8 F0 F9 
1d6a9     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
1d6ad     14 16 1A 1D 
1d6b1     20 21 27 34 
1d6b5     43 40 43 36 
1d6b9     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
1d6bd     09 01 F9 ED 
1d6c1     E2 DF D0 CF 
1d6c5     DA E3 F7 09 
1d6c9     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
1d6cd     5A 5A 5E 5D 
1d6d1     53 54 51 49 
1d6d5     3B 3A 26 1A 
1d6d9     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
1d6dd     DC D6 DC E3 
1d6e1     EC EA EA F2 
1d6e5     F0 FC 03 07 
1d6e9     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
1d6ed     D4 D0 CA CA 
1d6f1     CC CC D4 E2 
1d6f5     E3 D4 CF C9 
1d6f9     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
1d6fd     E8 FC 03 13 
1d701     1E 21 2A 26 
1d705     30 2D 30 36 
1d709     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
1d70d     43 40 3A 36 
1d711     36 2A 1D 04 
1d715     F0 E2 CC C9 
1d719     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
1d71d     F7 FC 0A 0E 
1d721     0D 0E 0D 04 
1d725     09 0A 0A 0A 
1d729     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
1d72d     3B 41 44 44 
1d731     49 4B 4D 51 
1d735     4F 41 36 2A 
1d739     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
1d73d     C9 B1 9D 98 
1d741     8C 8F 98 A7 
1d745     B7 C3 D3 DA 
1d749     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
1d74d     10 07 00 F2 
1d751     F2 EC F3 F7 
1d755     F9 F9 F3 F0 
1d759     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
1d75d     C9 CF E0 E6 
1d761     F6 00 04 0A 
1d765     14 14 16 0A 
1d769     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
1d76d     D4 D9 DA E6 
1d771     EC F6 03 0D 
1d775     04 F7 D4 B1 
1d779     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
1d77d     90 AD C6 E0 
1d781     E6 ED ED F2 
1d785     F6 FD 03 09 
1d789     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
1d78d     EC DF D4 D3 
1d791     D6 D3 CC C3 
1d795     BC AF AF B5 
1d799     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
1d79d     C9 CA CF D0 
1d7a1     CA CC C9 C9 
1d7a5     CF DA F3 01 
1d7a9     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
1d7ad     1D 14 13 13 
1d7b1     13 1E 1D 18 
1d7b5     14 0A 0D 04 
1d7b9     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
1d7bd     00 E3 CF BD 
1d7c1     BC C9 DC FF 
1d7c5     18 31 4B 66 
1d7c9     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
1d7cd     31 18 0E 09 
1d7d1     10 1D 2D 40 
1d7d5     43 44 4F 51 
1d7d9     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
1d7dd     01 E6 D3 C5 
1d7e1     C5 CF DC E8 
1d7e5     EC F6 F3 EA 
1d7e9     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
1d7ed     DC E6 EC EA 
1d7f1     E0 E0 DF D6 
1d7f5     D0 D0 C6 C6 
1d7f9     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
1d7fd     04 16 18 1D 
1d801     1E 21 24 27 
1d805     2D 30 37 3B 
1d809     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
1d80d     34 2C 1A 0A 
1d811     01 F0 E0 D0 
1d815     CC D4 E0 F2 
1d819     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
1d81d     16 16 13 13 
1d821     00 ED DF D4 
1d825     DC F2 0A 2A 
1d829     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
1d82d     6C 6A 5A 4F 
1d831     37 2C 1D 14 
1d835     0D 0E 0A 0D 
1d839     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
1d83d     F7 DF C0 B5 
1d841     A7 A9 AF BF 
1d845     CC DC ED F2 
1d849     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
1d84d     B3 B7 BF D6 
1d851     ED FF 09 07 
1d855     00 F9 F3 F6 
1d859     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
1d85d     F0 F3 F6 F6 
1d861     F6 F2 F2 F2 
1d865     ED F2 F6 ED 
1d869     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
1d86d     FF 0E 1A 24 
1d871     30 24 14 01 
1d875     E3 CA A6 90 
1d879     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
1d87d     B1 BF CC D9 
1d881     EA F7 00 04 
1d885     0D 09 F3 E3 
1d889     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
1d88d     BF CA D9 DF 
1d891     E2 DF CC C3 
1d895     BC C0 C6 D9 
1d899     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
1d89d     DA D4 C6 BC 
1d8a1     B5 B9 CA DF 
1d8a5     EC 00 03 01 
1d8a9     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
1d8ad     13 09 0A 03 
1d8b1     FD F7 F6 F9 
1d8b5     FC FF 04 0A 
1d8b9     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
1d8bd     D6 D6 DF F2 
1d8c1     0D 27 44 5A 
1d8c5     66 59 4D 34 
1d8c9     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
1d8cd     FC 04 16 31 
1d8d1     40 49 57 5E 
1d8d5     74 77 77 68 
1d8d9     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
1d8dd     EC D3 C3 AC 
1d8e1     AD B3 BD CC 
1d8e5     DA E6 EA EA 
1d8e9     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
1d8ed     F0 F6 F9 ED 
1d8f1     EC E6 E8 E2 
1d8f5     D9 DA D6 D9 
1d8f9     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
1d8fd     0D 14 26 2A 
1d901     34 37 3A 3D 
1d905     3D 3D 36 27 
1d909     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
1d90d     DC DA DC DF 
1d911     E0 D6 DF EA 
1d915     FC 07 1A 2A 
1d919     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
1d91d     10 FD E2 DA 
1d921     D9 DA F6 0A 
1d925     21 3B 47 49 
1d929     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
1d92d     3A 34 34 2D 
1d931     2A 21 16 0D 
1d935     0A 0A 0E 1D 
1d939     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
1d93d     04 F3 DF CC 
1d941     C6 C9 D4 CF 
1d945     C6 BD BF AF 
1d949     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
1d94d     DC F2 FC FF 
1d951     FD FD FD 03 
1d955     0D 0A 0A 0A 
1d959     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
1d95d     D3 C3 C0 BC 
1d961     C9 D9 E8 F9 
1d965     F9 FC FC F9 
1d969     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
1d96d     30 2C 18 00 
1d971     F0 D9 CC C6 
1d975     C5 C5 CA C5 
1d979     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
1d97d     D6 EA FC 07 
1d981     03 FF F7 EC 
1d985     DA CA B7 A9 
1d989     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
1d98d     B7 C6 C3 C0 
1d991     C6 CA D9 F0 
1d995     F9 00 07 04 
1d999     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
1d99d     CA CF CF CF 
1d9a1     DA DA E2 E2 
1d9a5     DF E0 DF DF 
1d9a9     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
1d9ad     F6 F9 03 04 
1d9b1     09 0A FF F3 
1d9b5     F0 F0 F0 F6 
1d9b9     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
1d9bd     0E 1A 26 37 
1d9c1     3B 3B 27 1E 
1d9c5     1A 09 09 0A 
1d9c9     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
1d9cd     31 40 49 59 
1d9d1     60 6E 71 6A 
1d9d5     59 47 37 2A 
1d9d9     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
1d9dd     CA B7 B1 A9 
1d9e1     BD D9 EC FD 
1d9e5     FD FD FD 00 
1d9e9     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
1d9ed     F6 EA DF D9 
1d9f1     DC DC DA DC 
1d9f5     DF EA F9 FF 
1d9f9     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
1d9fd     2D 30 34 36 
1da01     3A 37 34 2A 
1da05     13 FD EA CA 
1da09     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
1da0d     B9 CA D6 E6 
1da11     00 14 24 40 
1da15     57 5D 44 2D 
1da19     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
1da1d     FC FD FD 01 
1da21     09 10 18 1E 
1da25     1D 21 27 2C 
1da29     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
1da2d     3A 3A 30 21 
1da31     16 0E 0A 0D 
1da35     0E 20 1E 20 
1da39     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
1da3d     0E 04 FD EC 
1da41     C9 B9 A2 A3 
1da45     A3 B5 C9 DC 
1da49     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
1da4d     F3 F7 F7 FD 
1da51     03 FF 00 FC 
1da55     FC F9 F2 ED 
1da59     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
1da5d     C3 C9 D0 E0 
1da61     E6 F0 F6 F6 
1da65     00 0A 18 27 
1da69     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
1da6d     E6 DA D3 CF 
1da71     CF D0 D3 E3 
1da75     F0 FC FD FD 
1da79     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
1da7d     F7 F9 F7 ED 
1da81     E2 D0 BD AF 
1da85     98 90 8C 89 
1da89     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
1da8d     CA D9 E6 F2 
1da91     FD 04 10 0D 
1da95     F6 E6 D4 CC 
1da99     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
1da9d     D6 D0 CA BD 
1daa1     BD B1 AD AF 
1daa5     B3 C0 CC E3 
1daa9     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
1daad     14 14 0D 04 
1dab1     00 F6 F6 F3 
1dab5     F6 F7 F9 00 
1dab9     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
1dabd     37 3B 31 24 
1dac1     13 07 0D 10 
1dac5     1A 21 21 24 
1dac9     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
1dacd     49 4B 49 41 
1dad1     36 30 26 13 
1dad5     0A 01 FC FC 
1dad9     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
1dadd     F3 F9 ED F3 
1dae1     FC FF 03 03 
1dae5     04 07 07 00 
1dae9     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
1daed     D9 E6 F0 FC 
1daf1     01 01 07 09 
1daf5     0D 13 18 18 
1daf9     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
1dafd     20 20 18 0D 
1db01     FD ED D6 C3 
1db05     AD A3 9C A3 
1db09     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
1db0d     13 24 3B 4D 
1db11     59 59 51 43 
1db15     31 21 1D 18 
1db19     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
1db1d     FD FF 00 07 
1db21     16 18 1E 20 
1db25     2A 2A 2D 30 
1db29     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
1db2d     18 10 04 04 
1db31     04 07 0A 13 
1db35     14 16 0E 07 
1db39     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
1db3d     10 0E 01 F9 
1db41     FF FF FD FD 
1db45     FF FF F9 F3 
1db49     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
1db4d     E0 D9 DA DA 
1db51     E3 EC F3 F3 
1db55     F6 ED E8 E0 
1db59     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
1db5d     DA E3 ED FD 
1db61     FD FF 03 04 
1db65     0D 00 F6 E6 
1db69     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
1db6d     D6 E8 F2 FF 
1db71     07 14 24 30 
1db75     3A 31 24 10 
1db79     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
1db7d     D0 B7 A9 9A 
1db81     90 84 80 89 
1db85     92 A2 AD C3 
1db89     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
1db8d     F3 F3 FC EA 
1db91     E6 E0 D3 C9 
1db95     CC CC D3 D4 
1db99     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
1db9d     94 9A A0 AC 
1dba1     B3 C5 D3 E6 
1dba5     FC 03 16 14 
1dba9     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
1dbad     FD ED DF D6 
1dbb1     D6 DC ED FC 
1dbb5     0D 16 1D 2A 
1dbb9     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
1dbbd     16 0A 0E 16 
1dbc1     26 2C 37 37 
1dbc5     2A 27 24 27 
1dbc9     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
1dbcd     03 00 F9 FF 
1dbd1     01 09 0E 14 
1dbd5     1D 21 27 27 
1dbd9     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
1dbdd     20 1D 14 0D 
1dbe1     01 F9 F2 DF 
1dbe5     D9 D4 D4 DF 
1dbe9     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
1dbed     1A 16 0D 00 
1dbf1     FF 00 07 09 
1dbf5     0D 0D 07 04 
1dbf9     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
1dbfd     E3 CF C0 B1 
1dc01     A7 A2 A9 B1 
1dc05     C0 E0 04 24 
1dc09     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
1dc0d     4F 40 40 3B 
1dc11     34 24 1D 14 
1dc15     16 1A 18 13 
1dc19     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
1dc1d     14 1D 1E 1E 
1dc21     1E 1D 1D 21 
1dc25     24 24 24 1E 
1dc29     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
1dc2d     F7 ED E8 E3 
1dc31     EA F6 FC 01 
1dc35     03 09 09 07 
1dc39     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
1dc3d     3D 54 64 70 
1dc41     6C 59 37 16 
1dc45     F7 E6 DC D4 
1dc49     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
1dc4d     D9 E6 F3 F9 
1dc51     FC F2 EC E3 
1dc55     D6 D3 CF D0 
1dc59     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
1dc5d     FD 00 FD F9 
1dc61     EA D3 C5 BD 
1dc65     C0 C3 CC DC 
1dc69     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
1dc6d     26 27 27 31 
1dc71     36 40 40 3A 
1dc75     26 03 E6 CA 
1dc79     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
1dc7d     98 9A A0 A6 
1dc81     B1 B5 B9 C0 
1dc85     D0 E0 E3 EC 
1dc89     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
1dc8d     CA CC CC D0 
1dc91     C9 CC CC C5 
1dc95     C0 B9 A7 9A 
1dc99     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
1dc9d     BD CF D3 E3 
1dca1     F0 FF 0D 16 
1dca5     16 16 09 FF 
1dca9     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
1dcad     C6 CF DA F3 
1dcb1     09 1A 24 2A 
1dcb5     18 07 00 FF 
1dcb9     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
1dcbd     2A 3A 44 44 
1dcc1     3D 31 20 16 
1dcc5     0D FC ED E8 
1dcc9     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
1dccd     FD 14 26 31 
1dcd1     31 3A 41 47 
1dcd5     4D 47 43 43 
1dcd9     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
1dcdd     14 03 E8 D6 
1dce1     D0 DC ED FF 
1dce5     0E 1E 20 26 
1dce9     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
1dced     01 F3 F2 F0 
1dcf1     F0 ED EC E0 
1dcf5     D9 D0 C6 C0 
1dcf9     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
1dcfd     BC BF CF D4 
1dd01     E6 F7 04 16 
1dd05     30 40 4B 4B 
1dd09     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
1dd0d     1E 21 2C 2C 
1dd11     2C 2D 2D 36 
1dd15     31 26 20 13 
1dd19     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
1dd1d     0A 09 09 0A 
1dd21     0D 14 1D 1D 
1dd25     1D 18 0E 03 
1dd29     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
1dd2d     D0 D4 E6 F9 
1dd31     03 0E 0A 03 
1dd35     F9 04 1E 3D 
1dd39     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
1dd3d     7F 7F 77 68 
1dd41     57 41 26 0D 
1dd45     FC E8 DA D0 
1dd49     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
1dd4d     E3 EC EC EC 
1dd51     EA EA E3 D6 
1dd55     D6 CF D0 D4 
1dd59     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
1dd5d     C9 A9 A6 A9 
1dd61     B7 D9 F2 09 
1dd65     1D 34 36 3D 
1dd69     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
1dd6d     27 18 16 0E 
1dd71     03 00 FC ED 
1dd75     E3 DA CC C5 
1dd79     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
1dd7d     CA C6 C0 BD 
1dd81     C3 C3 C6 CA 
1dd85     D4 D0 C6 B1 
1dd89     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
1dd8d     CA CA C6 C0 
1dd91     BF BC B9 B5 
1dd95     AC A6 A9 AD 
1dd99     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
1dd9d     DC DF E6 EA 
1dda1     ED F9 FF 00 
1dda5     03 04 03 F6 
1dda9     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
1ddad     F0 FC 03 04 
1ddb1     FF ED DA DC 
1ddb5     E8 FD 13 27 
1ddb9     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
1ddbd     4F 41 30 13 
1ddc1     FC E0 CF CC 
1ddc5     CA CC D6 DC 
1ddc9     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
1ddcd     2A 36 49 54 
1ddd1     5A 54 47 3D 
1ddd5     3A 34 36 40 
1ddd9     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
1dddd     04 FC F7 03 
1dde1     16 26 31 36 
1dde5     36 37 31 24 
1dde9     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
1dded     DA CF CC CC 
1ddf1     BC A9 9C 90 
1ddf5     90 94 A7 BC 
1ddf9     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
1ddfd     0E 13 10 10 
1de01     0E 13 18 20 
1de05     1D 04 FD FF 
1de09     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
1de0d     51 53 54 57 
1de11     57 44 31 1D 
1de15     04 F7 F0 ED 
1de19     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
1de1d     F3 F6 F7 00 
1de21     04 10 14 10 
1de25     10 03 F3 E3 
1de29     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
1de2d     F9 0A 0E 03 
1de31     F9 F9 FF 16 
1de35     36 4F 64 76 
1de39     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
1de3d     7F 7C 66 4D 
1de41     3A 2C 24 24 
1de45     13 00 F0 E0 
1de49     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
1de4d     D9 E0 ED F3 
1de51     ED EA E0 D4 
1de55     C9 B5 AF B5 
1de59     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
1de5d     B3 D6 F9 1E 
1de61     36 43 47 4D 
1de65     4B 49 3B 2D 
1de69     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
1de6d     FC FD FF FF 
1de71     F6 F2 F3 F3 
1de75     F9 01 01 FF 
1de79     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
1de7d     CF C9 B7 AC 
1de81     A6 A7 AC 9D 
1de85     94 8C 8A 94 
1de89     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
1de8d     C9 D0 DA DF 
1de91     E3 E3 CF BF 
1de95     AF A0 9A A2 
1de99     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
1de9d     C3 D3 DC ED 
1dea1     FC 0A 18 20 
1dea5     1D 16 09 FC 
1dea9     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
1dead     D4 D4 CF CC 
1deb1     C9 DC F0 07 
1deb5     1E 36 47 43 
1deb9     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
1debd     13 F9 DF D3 
1dec1     CC D4 E2 F0 
1dec5     F0 F0 F2 F2 
1dec9     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
1decd     34 47 4F 57 
1ded1     5D 57 4D 41 
1ded5     40 40 41 43 
1ded9     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
1dedd     31 3A 3B 3D 
1dee1     40 37 37 30 
1dee5     24 16 04 EC 
1dee9     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
1deed     AF B1 A2 9D 
1def1     98 9A A6 B9 
1def5     D3 F7 04 16 
1def9     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
1defd     04 F9 F2 F0 
1df01     F6 FC F7 F9 
1df05     F7 FC 0A 27 
1df09     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
1df0d     60 57 47 36 
1df11     26 10 FF EA 
1df15     DF DC D6 DC 
1df19     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
1df1d     E3 E6 ED 00 
1df21     00 F4 E0 C7 
1df25     F0 DF 5F 40 
1df29     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
1df2d     1F 7F 00 DF 
1df31     7F 20 E0 BF 
1df35     3F 40 0B 10 
1df39     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
1df3d     E2 DA D5 D3 
1df41     DF F9 E8 C8 
1df45     AF CA CB D5 
1df49     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
1df4d     21 20 19 33 
1df51     4B 7F 7F 60 
1df55     2A 3F 40 4F 
1df59     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
1df5d     A0 DF 00 EA 
1df61     D0 AF FF 00 
1df65     80 83 DF D8 
1df69     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
1df6d     EF 1A 1C 08 
1df71     0B 10 03 1B 
1df75     3F 70 40 28 
1df79     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
1df7d     47 34 00 CD 
1df81     EF 2A 08 C0 
1df85     97 BF C0 CF 
1df89     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
1df8d     F8 C5 DF 17 
1df91     04 07 F0 D7 
1df95     FF 0F 5F 7F 
1df99     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
1df9d     F0 FF 6F 60 
1dfa1     E0 FF 40 1F 
1dfa5     3C 20 18 1A 
1dfa9     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
1dfad     00 E0 B4 C5 
1dfb1     B0 AF EB D8 
1dfb5     E7 FC FA 07 
1dfb9     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
1dfbd     3C 43 54 40 
1dfc1     10 0F 00 E7 
1dfc5     13 00 FF 00 
1dfc9     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
1dfcd     14 00 E8 B0 
1dfd1     A9 B7 DB F7 
1dfd5     16 00 E0 C0 
1dfd9     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
1dfdd     29 35 20 E0 
1dfe1     D7 FF 4F 7C 
1dfe5     5A 60 40 00 
1dfe9     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
1dfed     37 2F 28 00 
1dff1     F0 D0 DF 0C 
1dff5     E0 C4 CF E0 
1dff9     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
1dffd     E0 D7 FF 3F 
1e001     38 4B 40 2D 
1e005     34 10 0F 04 
1e009     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
1e00d     E0 80 81 BF 
1e011     A0 BF 37 00 
1e015     95 BF EF 28 
1e019     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
1e01d     2B 20 FB 02 
1e021     E4 EB 1B 08 
1e025     FF 24 19 19 
1e029     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
1e02d     F0 2F 60 A0 
1e031     FF 20 A0 B7 
1e035     DF E8 A4 AF 
1e039     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
1e03d     18 02 1F 20 
1e041     00 EF 35 10 
1e045     09 E8 B4 B7 
1e049     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
1e04d     40 DB 1F 30 
1e051     3F 7D 70 20 
1e055     0F 20 F7 2F 
1e059     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
1e05d     00 B7 FE D0 
1e061     EF 0F 04 1F 
1e065     20 D3 F3 E0 
1e069     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
1e06d     02 FF 3B 20 
1e071     E0 C8 CF 17 
1e075     14 10 08 11 
1e079     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
1e07d     C7 D8 A7 FF 
1e081     E0 DF 20 E0 
1e085     EF 40 E0 BF 
1e089     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
1e08d     1F 14 1F 7F 
1e091     10 FF 7F 60 
1e095     2F 60 2B 47 
1e099     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
1e09d     F0 E0 BC AE 
1e0a1     C7 DF E8 C4 
1e0a5     A0 9F F7 4F 
1e0a9     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
1e0ad     FF 7F 20 12 
1e0b1     D0 EF 30 E0 
1e0b5     BF 3F 20 80 
1e0b9     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
1e0bd     CC FF 10 C0 
1e0c1     CF 14 F0 CC 
1e0c5     C2 CF C0 9B 
1e0c9     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
1e0cd     20 D4 CB FF 
1e0d1     60 00 3F 60 
1e0d5     01 00 0D 00 
1e0d9     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
1e0dd     1F 20 0F 3F 
1e0e1     20 FF 10 BB 
1e0e5     EF 17 20 E8 
1e0e9     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
1e0ed     E8 E2 E7 EC 
1e0f1     C8 EF 1F 6F 
1e0f5     50 E0 C7 17 
1e0f9     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
1e0fd     1F 30 E4 FF 
1e101     5F 50 00 2F 
1e105     7F 40 06 00 
1e109     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
1e10d     3F 00 9F FF 
1e111     08 0A F0 B7 
1e115     1F 00 FF 6E 
1e119     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
1e11d     2C E0 BF 14 
1e121     F0 F7 10 90 
1e125     9F 3F 40 10 
1e129     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
1e12d     2A 2F 08 DE 
1e131     D4 DF 17 3F 
1e135     00 BF FF 00 
1e139     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
1e13d     FF 10 F3 E0 
1e141     BF 00 80 BF 
1e145     18 D8 CC B4 
1e149     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
1e14d     20 9F FF E0 
1e151     BF FF 30 D4 
1e155     FF 50 00 EF 
1e159     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
1e15d     08 F0 EB 00 
1e161     C9 2F 20 9F 
1e165     3F 20 C7 FA 
1e169     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
1e16d     B9 FF 58 00 
1e171     B7 F7 33 3B 
1e175     54 10 EA EF 
1e179     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
1e17d     20 0F 4F 08 
1e181     FF 30 17 3F 
1e185     20 1F 40 E0 
1e189     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
1e18d     00 B0 8B BF 
1e191     10 00 E9 E0 
1e195     C4 D7 FF 54 
1e199     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
1e19d     10 00 FF 2F 
1e1a1     6F 68 20 FF 
1e1a5     4F 60 13 3E 
1e1a9     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
1e1ad     F6 1B 28 D0 
1e1b1     B7 E4 C7 F7 
1e1b5     D0 BF F9 E2 
1e1b9     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
1e1bd     FF 24 20 27 
1e1c1     6C 20 1D 20 
1e1c5     10 F3 1F 28 
1e1c9     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
1e1cd     EB 1F 40 E0 
1e1d1     EF 14 D0 A0 
1e1d5     D7 00 C0 D7 
1e1d9     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
1e1dd     C0 DF 70 00 
1e1e1     B6 DF EF 1F 
1e1e5     00 FF 30 FF 
1e1e9     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
1e1ed     FF 3F 40 D0 
1e1f1     FF FB 2D 00 
1e1f5     CF 0D E8 C0 
1e1f9     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
1e1fd     00 FF E0 D7 
1e201     FF 28 3F 20 
1e205     D5 FF 1F 10 
1e209     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
1e20d     E0 BF 37 E0 
1e211     EF F2 F9 0F 
1e215     14 EB 13 00 
1e219     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
1e21d     EF 40 00 A0 
1e221     BF DA C2 DF 
1e225     0F 10 FF 37 
1e229     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
1e22d     35 48 10 DF 
1e231     F7 FC E8 EF 
1e235     2F 20 E8 C0 
1e239     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
1e23d     F7 E8 B8 D7 
1e241     D0 C0 CF 13 
1e245     00 D1 FF F0 
1e249     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
1e24d     30 04 FF 27 
1e251     2F 04 0F 48 
1e255     25 40 00 B3 
1e259     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
1e25d     1F 30 00 9F 
1e261     1F 20 F8 FB 
1e265     0B E0 B7 D7 
1e269     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
1e26d     20 E3 1F 00 
1e271     C1 1F 74 20 
1e275     F0 FF 00 1F 
1e279     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
1e27d     AF FF F7 08 
1e281     D3 FF 00 CF 
1e285     FF 1F 1C 08 
1e289     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
1e28d     14 00 FF 44 
1e291     F0 1F 20 EF 
1e295     4D 10 E2 C0 
1e299     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
1e29d     10 E4 C8 C0 
1e2a1     BB CF CB DB 
1e2a5     F7 0B 00 EF 
1e2a9     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
1e2ad     1B 57 10 FF 
1e2b1     20 1F 20 27 
1e2b5     30 1F 30 00 
1e2b9     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
1e2bd     34 E0 D7 0F 
1e2c1     08 1B 10 17 
1e2c5     20 3F 40 F0 
1e2c9     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
1e2cd     C7 FF 08 00 
1e2d1     FF 30 00 E9 
1e2d5     D4 FF 40 1B 
1e2d9     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
1e2dd     DF 3F 00 08 
1e2e1     E8 EF E8 E7 
1e2e5     08 D0 CF E2 
1e2e9     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
1e2ed     10 D0 C2 A8 
1e2f1     AF F7 0B 10 
1e2f5     E0 B0 AF 1F 
1e2f9     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
1e2fd     34 00 FF 3F 
1e301     28 24 00 FF 
1e305     5F 40 DF F4 
1e309     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
1e30d     10 C8 DF 0F 
1e311     00 ED F0 FF 
1e315     00 FF E0 DF 
1e319     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
1e31d     2F 44 20 CB 
1e321     FF 14 1F 50 
1e325     00 DF F4 FF 
1e329     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
1e32d     34 E0 CF F4 
1e331     DC FF 00 EB 
1e335     12 0B F0 BF 
1e339     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
1e33d     B7 FF 00 C7 
1e341     FF F0 DF 02 
1e345     F8 FB 02 F7 
1e349     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
1e34d     E7 0F 20 D0 
1e351     DF 38 C0 9F 
1e355     0F 00 B7 C8 
1e359     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
1e35d     00 C1 EE E5 
1e361     0E 05 10 E8 
1e365     E8 E7 3F 40 
1e369     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
1e36d     20 F0 FF 1E 
1e371     F0 BF FF 38 
1e375     00 EF 20 08 
1e379     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
1e37d     08 F7 3F 30 
1e381     F7 37 38 2F 
1e385     3C 28 08 13 
1e389     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
1e38d     1F 20 F0 F7 
1e391     04 F0 EB FD 
1e395     04 D0 D7 DB 
1e399     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
1e39d     00 D7 2A E8 
1e3a1     DF 1F 20 FF 
1e3a5     00 DD C0 AF 
1e3a9     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
1e3ad     D0 D7 FF 29 
1e3b1     14 2F 64 00 
1e3b5     BF 1F 61 40 
1e3b9     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
1e3bd     ED 0F 26 20 
1e3c1     F7 1F 40 08 
1e3c5     DF 0F 2C 02 
1e3c9     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
1e3cd     D1 EF F7 2A 
1e3d1     00 FF 10 0F 
1e3d5     20 E8 EF ED 
1e3d9     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
1e3dd     30 00 CF 35 
1e3e1     04 F9 FF 03 
1e3e5     27 E0 BF 17 
1e3e9     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
1e3ed     E8 FF 14 00 
1e3f1     ED FF 2C 00 
1e3f5     E0 EF 13 0C 
1e3f9     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
1e3fd     F7 E0 EF F0 
1e401     EF C4 DF D0 
1e405     BF C8 D7 F4 
1e409     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
1e40d     27 30 18 F8 
1e411     FF 2F 40 08 
1e415     1B 08 CF FF 
1e419     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
1e41d     F7 F0 FF 1B 
1e421     2C 00 EF E0 
1e425     D7 0C EA E4 
1e429     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
1e42d     D0 AB FF 18 
1e431     0F 00 FF FB 
1e435     11 F0 FF 00 
1e439     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
1e43d     E8 D5 E7 F8 
1e441     B0 D7 F0 CF 
1e445     0F 07 2B 10 
1e449     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
1e44d     08 E8 1F 60 
1e451     20 FE 02 E8 
1e455     D1 F7 0C E0 
1e459     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
1e45d     EB E1 FB 00 
1e461     C0 DF 08 D0 
1e465     EF 08 F3 0D 
1e469     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
1e46d     EB 0F 08 E0 
1e471     DD EF F3 0F 
1e475     00 CD DF E3 
1e479     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
1e47d     1F 20 00 04 
1e481     E8 17 30 18 
1e485     00 BF F7 FD 
1e489     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
1e48d     17 2A 10 E8 
1e491     F7 10 E8 FF 
1e495     17 00 CA DF 
1e499     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
1e49d     1D 10 0F 2A 
1e4a1     20 1B 2D 30 
1e4a5     22 22 24 04 
1e4a9     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
1e4ad     EC E4 DF DD 
1e4b1     FF 10 FF 00 
1e4b5     E1 FF 10 F1 
1e4b9     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
1e4bd     10 07 10 0A 
1e4c1     FD 17 10 F4 
1e4c5     D9 FF 00 FF 
1e4c9     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
1e4cd     FB 20 E8 E7 
1e4d1     1F 20 13 27 
1e4d5     28 0C 1F 4A 
1e4d9     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
1e4dd     1F 00 FF 20 
1e4e1     FE F8 FF 20 
1e4e5     F0 DF 0F 2B 
1e4e9     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
1e4ed     FB 00 F5 1F 
1e4f1     10 DF 17 00 
1e4f5     E7 FE F3 0F 
1e4f9     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
1e4fd     05 0D 0C F4 
1e501     E7 FF 00 F7 
1e505     FC F5 F2 EA 
1e509     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
1e50d     14 17 33 28 
1e511     03 2F 20 1F 
1e515     2E 20 08 00 
1e519     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
1e51d     00 17 12 1E 
1e521     E8 DB 0F 1F 
1e525     10 EF 0B 00 
1e529     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
1e52d     1F 20 F0 DF 
1e531     17 10 F0 D3 
1e535     FF 07 04 E1 
1e539     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
1e53d     DF FF EC FF 
1e541     20 00 F8 D7 
1e545     FF 03 17 04 
1e549     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
1e54d     04 0B 00 FB 
1e551     F0 FB E0 EF 
1e555     08 00 F4 F3 
1e559     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
1e55d     F7 16 00 EB 
1e561     F0 E3 EB FF 
1e565     F0 C8 DB EF 
1e569     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
1e56d     20 E4 DC BB 
1e571     DF FA E9 E7 
1e575     FB 00 E0 EB 
1e579     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
1e57d     08 0F 30 00 
1e581     F8 E9 FE 0F 
1e585     08 DD FB E8 
1e589     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
1e58d     CF EF F0 C4 
1e591     CF ED FB 06 
1e595     E0 DF F3 1F 
1e599     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
1e59d     03 F8 F7 00 
1e5a1     F8 FB 0F 08 
1e5a5     F3 F2 FF 16 
1e5a9     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
1e5ad     E8 EB F5 FF 
1e5b1     16 08 F8 E4 
1e5b5     FD E8 DB FF 
1e5b9     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
1e5bd     E3 F0 E0 D0 
1e5c1     F7 14 E8 F7 
1e5c5     00 EF 11 04 
1e5c9     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
1e5cd     12 00 F2 FD 
1e5d1     0B 00 E8 D7 
1e5d5     FF 10 F3 FF 
1e5d9     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
1e5dd     00 FB 12 00 
1e5e1     FF 14 E8 FF 
1e5e5     08 FF 12 00 
1e5e9     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
1e5ed     22 1B 28 1D 
1e5f1     12 0B 04 05 
1e5f5     0E 00 06 07 
1e5f9     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
1e5fd     EF 1C 00 F0 
1e601     D7 FF 10 F5 
1e605     FF 1A 16 04 
1e609     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
1e60d     27 28 F0 F7 
1e611     2F 20 15 22 
1e615     10 00 F5 F7 
1e619     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
1e61d     D7 F7 14 E8 
1e621     DF FF 08 E8 
1e625     EF 14 E8 E7 
1e629     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
1e62d     15 00 EF FF 
1e631     17 12 12 1B 
1e635     20 F4 17 14 
1e639     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
1e63d     2F 28 00 03 
1e641     0D 13 21 08 
1e645     FB 0E 13 18 
1e649     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
1e64d     1E 18 02 07 
1e651     14 0B 0A 0B 
1e655     27 20 00 06 
1e659     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
1e65d     00 F4 FF 20 
1e661     F0 FF 10 F7 
1e665     12 F0 DF 08 
1e669     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
1e66d     0F 24 00 F3 
1e671     FF 07 10 00 
1e675     F3 02 FF 04 
1e679     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
1e67d     FD 0A F0 E7 
1e681     17 00 EF F4 
1e685     D9 FF 00 E8 
1e689     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
1e68d     D3 FF F0 D7 
1e691     FF 08 F8 DA 
1e695     EF 07 1E 00 
1e699     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
1e69d     FB 17 10 13 
1e6a1     10 07 08 0E 
1e6a5     17 08 E8 E7 
1e6a9     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
1e6ad     00 F3 E8 DB 
1e6b1     FF E4 FF 18 
1e6b5     E8 DE DC E9 
1e6b9     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
1e6bd     FF F0 DF 17 
1e6c1     00 F8 FB 1F 
1e6c5     10 F0 FB 00 
1e6c9     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
1e6cd     F8 EB F0 DE 
1e6d1     ED EC EA E8 
1e6d5     EF EB F7 18 
1e6d9     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
1e6dd     13 00 FB 10 
1e6e1     F6 F9 FF 08 
1e6e5     E0 D3 FF 00 
1e6e9     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
1e6ed     14 E0 EF 0A 
1e6f1     F5 FF 04 E0 
1e6f5     F7 0D 07 25 
1e6f9     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
1e6fd     E7 FB 0E 0C 
1e701     0F 22 00 F7 
1e705     08 02 05 08 
1e709     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
1e70d     F7 0E F9 07 
1e711     08 FC F8 0B 
1e715     00 F3 0D 0C 
1e719     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
1e71d     FC F0 D7 EB 
1e721     F7 0B F4 EF 
1e725     FE 00 EC F3 
1e729     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
1e72d     02 FF F0 DB 
1e731     FF 00 F8 FB 
1e735     04 F5 0F 04 
1e739     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
1e73d     18 00 E8 EF 
1e741     0A 00 03 F8 
1e745     EF 0F 24 00 
1e749     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
1e74d     20 08 FF 0A 
1e751     F8 EB FF 20 
1e755     00 EF 10 EC 
1e759     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
1e75d     E8 FF 18 02 
1e761     F4 F5 FB 12 
1e765     04 F8 F0 EF 
1e769     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
1e76d     20 00 EF 1F 
1e771     10 FB 00 FF 
1e775     10 00 FF 18 
1e779     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
1e77d     FF 09 06 0F 
1e781     20 01 0F 00 
1e785     0F 04 F2 ED 
1e789     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
1e78d     19 00 D7 FF 
1e791     17 1A 10 F0 
1e795     D7 1F 24 00 
1e799     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
1e79d     04 0F 08 FD 
1e7a1     0B 10 02 1B 
1e7a5     10 0F 1C 00 
1e7a9     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
1e7ad     13 10 00 0B 
1e7b1     10 ED FF 0B 
1e7b5     15 00 EB FC 
1e7b9     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
1e7bd     00 FD 00 E5 
1e7c1     FF 00 E4 FF 
1e7c5     10 F6 F6 FF 
1e7c9     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
1e7cd     04 0C 04 FB 
1e7d1     0C FB 0F 14 
1e7d5     10 F4 F7 08 
1e7d9     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
1e7dd     FF 0A E8 F5 
1e7e1     F8 F7 F0 FF 
1e7e5     00 F7 04 F7 
1e7e9     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
1e7ed     FB 02 0B 11 
1e7f1     0C 06 0B 14 
1e7f5     F8 FF 10 00 
1e7f9     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
1e7fd     FF 03 0D 04 
1e801     F6 FF FA FD 
1e805     00 E5 EF FF 
1e809     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
1e80d     FD F0 EF FA 
1e811     01 07 16 00 
1e815     F3 FE FF 04 
1e819     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
1e81d     EF FF 00 F7 
1e821     13 18 08 0D 
1e825     08 F5 07 10 
1e829     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
1e82d     F0 FF 0C FA 
1e831     F6 FF 0C 04 
1e835     07 21 10 0A 
1e839     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
1e83d     0C F8 FF 08 
1e841     FF 0C F0 F7 
1e845     FC FB 06 F4 
1e849     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
1e84d     FD E8 F7 00 
1e851     E5 E9 F7 F0 
1e855     E7 0A 00 F0 
1e859     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
1e85d     FF 2B 10 03 
1e861     17 08 FF 0D 
1e865     10 04 EE FF 
1e869     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
1e86d     09 06 00 F3 
1e871     FB 0F 10 E9 
1e875     F7 F0 ED F5 
1e879     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
1e87d     00 FC F0 F7 
1e881     15 16 08 EC 
1e885     FF 04 FE FF 
1e889     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
1e88d     F5 F2 F3 F8 
1e891     FD 04 EB EB 
1e895     FB 04 FC E8 
1e899     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
1e89d     F0 FF 00 F7 
1e8a1     FA 06 02 07 
1e8a5     02 06 0E 0E 
1e8a9     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
1e8ad     0A 08 FC FA 
1e8b1     FF 00 E0 F7 
1e8b5     08 F6 FB F4 
1e8b9     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
1e8bd     F8 FA FB 07 
1e8c1     04 EA FD 08 
1e8c5     02 08 0D 08 
1e8c9     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
1e8cd     08 FF 04 0F 
1e8d1     18 00 0C F1 
1e8d5     FB F4 FF 0A 
1e8d9     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
1e8dd     F0 EF F0 D4 
1e8e1     E7 F2 F0 EF 
1e8e5     F4 ED F9 F8 
1e8e9     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
1e8ed     02 FF 04 06 
1e8f1     02 FF 1A 10 
1e8f5     09 1A 12 04 
1e8f9     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
1e8fd     1F 00 FF 08 
1e901     01 0F 04 F9 
1e905     05 00 FB F2 
1e909     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
1e90d     EA FF 10 04 
1e911     EC FF 18 15 
1e915     1A 16 10 09 
1e919     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
1e91d     FF 14 00 EE 
1e921     E7 FB FE F4 
1e925     E5 FF 06 06 
1e929     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
1e92d     08 F8 0F 10 
1e931     F0 FF 00 FF 
1e935     1E 10 FF 13 
1e939     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
1e93d     1A 00 13 10 
1e941     0C 02 02 00 
1e945     F9 0A F0 EF 
1e949     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
1e94d     FF 00 E4 F3 
1e951     00 F7 07 13 
1e955     14 00 05 02 
1e959     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
1e95d     0D 11 0D 04 
1e961     FF 08 F8 FF 
1e965     0A 00 FB F8 
1e969     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
1e96d     0F 04 FB 06 
1e971     00 F3 FF 0C 
1e975     00 09 F2 EF 
1e979     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
1e97d     14 00 02 00 
1e981     FD 07 12 10 
1e985     0A 0C 04 0F 
1e989     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
1e98d     00 FF 0F 10 
1e991     0C FC FF 00 
1e995     F9 FF 08 00 
1e999     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
1e99d     DD EF F0 EF 
1e9a1     08 F0 F7 F0 
1e9a5     EF 06 09 05 
1e9a9     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
1e9ad     F8 F5 01 FF 
1e9b1     14 00 ED ED 
1e9b5     EE F5 F4 EA 
1e9b9     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
1e9bd     F0 EB FC EF 
1e9c1     F8 E0 FF 10 
1e9c5     F0 ED 0B 1C 
1e9c9     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
1e9cd     13 18 FD 0A 
1e9d1     F8 0B 10 02 
1e9d5     F4 F6 FB FA 
1e9d9     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
1e9dd     04 FA FF 04 
1e9e1     F8 EF 0D 10 
1e9e5     04 F0 0F 08 
1e9e9     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
1e9ed     00 FF F0 F7 
1e9f1     F4 EF 17 0C 
1e9f5     07 16 00 FB 
1e9f9     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
1e9fd     0B 18 F0 EF 
1ea01     ED EF FF F2 
1ea05     F1 F6 F0 EA 
1ea09     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
1ea0d     F1 FE E4 EF 
1ea11     10 00 F3 FF 
1ea15     08 FA FD FF 
1ea19     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
1ea1d     00 F9 F0 FF 
1ea21     18 00 FF 0C 
1ea25     E8 F5 F8 F7 
1ea29     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
1ea2d     0E F0 F7 12 
1ea31     02 03 0F 18 
1ea35     FD 23 10 05 
1ea39     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
1ea3d     F2 FD 14 00 
1ea41     F3 FD F7 F8 
1ea45     EB FF F8 FB 
1ea49     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
1ea4d     FB 14 04 0F 
1ea51     10 F9 17 20 
1ea55     10 12 09 27 
1ea59     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
1ea5d     F7 05 15 08 
1ea61     E9 F2 F7 01 
1ea65     F0 ED FF 04 
1ea69     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
1ea6d     E7 FF 10 F0 
1ea71     F5 03 F8 E9 
1ea75     FF 00 ED F3 
1ea79     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
1ea7d     EF FF 10 00 
1ea81     07 14 00 FB 
1ea85     00 07 10 00 
1ea89     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
1ea8d     14 1A 00 FF 
1ea91     0D 10 F8 FE 
1ea95     FE FF 08 00 
1ea99     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
1ea9d     F9 0F 14 04 
1eaa1     00 FF 26 08 
1eaa5     FF 2D 20 FC 
1eaa9     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
1eaad     F8 F7 F0 EB 
1eab1     00 EA F9 E0 
1eab5     D7 F3 F8 F0 
1eab9     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
1eabd     FF 16 10 0D 
1eac1     14 0B 0A 01 
1eac5     11 10 0D 08 
1eac9     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
1eacd     F9 FB 00 ED 
1ead1     EF F3 07 08 
1ead5     02 07 08 F3 
1ead9     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
1eadd     04 FF 10 F0 
1eae1     F5 06 0A F8 
1eae5     EF 0D 08 FB 
1eae9     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
1eaed     03 08 F8 FF 
1eaf1     04 F7 0B 14 
1eaf5     08 EA F7 1C 
1eaf9     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
1eafd     F8 F6 F7 FC 
1eb01     F2 F5 F8 E0 
1eb05     DF EA E4 E0 
1eb09     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
1eb0d     FD 08 F0 FB 
1eb11     00 03 0F 16 
1eb15     08 07 1B 20 
1eb19     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
1eb1d     12 04 0D 0C 
1eb21     E8 EF 04 EA 
1eb25     EF FE F8 EF 
1eb29     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
1eb2d     04 F7 0F 00 
1eb31     FD 05 0D 13 
1eb35     06 00 F1 FF 
1eb39     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
1eb3d     EF FF FC F3 
1eb41     FE FC F6 FF 
1eb45     00 07 00 F9 
1eb49     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
1eb4d     09 04 EE FF 
1eb51     00 FB 07 03 
1eb55     00 F6 FD FA 
1eb59     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
1eb5d     00 E9 F5 07 
1eb61     00 EF 0F 00 
1eb65     FA 01 FD FF 
1eb69     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
1eb6d     0D 0D 08 00 
1eb71     F7 0B 10 F0 
1eb75     E7 FC F1 FF 
1eb79     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
1eb7d     01 09 01 0F 
1eb81     18 07 1D 18 
1eb85     08 0F 1A 14 
1eb89     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
1eb8d     0C 00 F4 0F 
1eb91     04 EB FD E4 
1eb95     DF F7 F8 EA 
1eb99     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
1eb9d     FA FF F8 FF 
1eba1     0C 04 08 F0 
1eba5     FF 0C 00 F6 
1eba9     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
1ebad     FC F6 F6 F7 
1ebb1     05 0E 00 FB 
1ebb5     12 10 0C 02 
1ebb9     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
1ebbd     08 04 00 F2 
1ebc1     FF 08 02 00 
1ebc5     FF 18 00 FE 
1ebc9     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
1ebcd     05 00 F0 F3 
1ebd1     F6 F7 07 12 
1ebd5     00 E5 FF 10 
1ebd9     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
1ebdd     01 FA FF 00 
1ebe1     FB 09 04 04 
1ebe5     F8 EA EB EF 
1ebe9     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
1ebed     08 F2 FF 16 
1ebf1     0E 0C 02 0B 
1ebf5     0C 08 06 08 
1ebf9     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
1ebfd     F9 F4 F1 F1 
1ec01     FF EC E4 E2 
1ec05     EB F2 E9 EC 
1ec09     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
1ec0d     F4 FF 1B 10 
1ec11     00 0F 18 01 
1ec15     0F 04 05 12 
1ec19     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
1ec1d     00 EC F3 F8 
1ec21     EB F7 08 00 
1ec25     F7 F2 F3 02 
1ec29     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
1ec2d     FF 06 00 FD 
1ec31     00 FF 12 08 
1ec35     F9 15 0A FA 
1ec39     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
1ec3d     FF 08 E9 F3 
1ec41     FA F7 F6 F2 
1ec45     F2 FD 0C F0 
1ec49     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
1ec4d     F6 FB FD 0B 
1ec51     08 FD F9 F7 
1ec55     02 F0 F7 04 
1ec59     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
1ec5d     FF 02 09 08 
1ec61     0D 10 F0 FF 
1ec65     14 02 0F 10 
1ec69     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
1ec6d     FF 00 F1 F6 
1ec71     EF FF 00 E8 
1ec75     F7 04 ED FF 
1ec79     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
1ec7d     14 02 02 09 
1ec81     0C 08 0F 10 
1ec85     F4 F1 F7 0F 
1ec89     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
1ec8d     F6 F6 FF 00 
1ec91     F7 09 00 F9 
1ec95     FD 02 00 F6 
1ec99     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
1ec9d     00 FF 06 00 
1eca1     FF 11 00 FF 
1eca5     0D 00 FF 15 
1eca9     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
1ecad     FD FA FF 00 
1ecb1     F9 FF FC 05 
1ecb5     08 0A 00 FF 
1ecb9     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
1ecbd     0C 09 09 0C 
1ecc1     04 FF 04 FB 
1ecc5     08 00 F8 F2 
1ecc9     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
1eccd     FD F0 E9 EB 
1ecd1     FF 00 FB 00 
1ecd5     FF 0E 00 FF 
1ecd9     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
1ecdd     08 F8 FF 00 
1ece1     EA EF 05 00 
1ece5     EF FB F6 FB 
1ece9     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
1eced     08 07 02 FE 
1ecf1     05 04 00 FB 
1ecf5     FC EC F5 F5 
1ecf9     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
1ecfd     F7 FF 08 FA 
1ed01     F1 0B 0A 00 
1ed05     FC F1 FF 00 
1ed09     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
1ed0d     F7 05 05 0B 
1ed11     00 FF 16 08 
1ed15     01 06 00 F8 
1ed19     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
1ed1d     00 F7 0B 08 
1ed21     05 09 12 08 
1ed25     09 0C 05 04 
1ed29     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
1ed2d     05 09 00 F5 
1ed31     FB 05 F4 F5 
1ed35     04 00 F4 F4 
1ed39     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
1ed3c                 | 	alignl
1ed3c                 | _hng030rm_spin2_dat_
1ed3c     00 00 00 00 
1ed40     00 00 00 00 
1ed44     00 00 00 00 
1ed48     00 00 00 00 
1ed4c     00 00 00    | vga_font       file "vgafont.def"
1ed4f     7E 81 A5 81 
1ed53     81 BD 99 81 
1ed57     81 7E 00 00 
1ed5b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1ed5f     7E FF DB FF 
1ed63     FF C3 E7 FF 
1ed67     FF 7E 00 00 
1ed6b     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1ed6f     00 36 7F 7F 
1ed73     7F 7F 3E 1C 
1ed77     08 00 00 00 
1ed7b     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1ed7f     00 08 1C 3E 
1ed83     7F 3E 1C 08 
1ed87     00 00 00 00 
1ed8b     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1ed8f     18 3C 3C E7 
1ed93     E7 E7 18 18 
1ed97     3C 00 00 00 
1ed9b     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1ed9f     18 3C 7E FF 
1eda3     FF 7E 18 18 
1eda7     3C 00 00 00 
1edab     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1edaf     00 00 00 18 
1edb3     3C 3C 18 00 
1edb7     00 00 00 00 
1edbb     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1edbf     FF FF FF E7 
1edc3     C3 C3 E7 FF 
1edc7     FF FF FF FF 
1edcb     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1edcf     00 00 3C 66 
1edd3     42 42 66 3C 
1edd7     00 00 00 00 
1eddb     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1eddf     FF FF C3 99 
1ede3     BD BD 99 C3 
1ede7     FF FF FF FF 
1edeb     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1edef     78 70 58 4C 
1edf3     1E 33 33 33 
1edf7     33 1E 00 00 
1edfb     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1edff     3C 66 66 66 
1ee03     66 3C 18 7E 
1ee07     18 18 00 00 
1ee0b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1ee0f     FC CC FC 0C 
1ee13     0C 0C 0C 0E 
1ee17     0F 07 00 00 
1ee1b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1ee1f     FE C6 FE C6 
1ee23     C6 C6 C6 E6 
1ee27     E7 67 03 00 
1ee2b     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1ee2f     18 18 DB 3C 
1ee33     E7 3C DB 18 
1ee37     18 00 00 00 
1ee3b     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1ee3f     03 07 0F 1F 
1ee43     7F 1F 0F 07 
1ee47     03 01 00 00 
1ee4b     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1ee4f     60 70 78 7C 
1ee53     7F 7C 78 70 
1ee57     60 40 00 00 
1ee5b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1ee5f     18 3C 7E 18 
1ee63     18 18 7E 3C 
1ee67     18 00 00 00 
1ee6b     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1ee6f     66 66 66 66 
1ee73     66 66 66    | 	byte	$66[7]
1ee76     00 66 66 00 
1ee7a     00 00 00 00 
1ee7e     00 FE DB DB 
1ee82     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1ee86     D8 D8 D8 00 
1ee8a     00 00 00 3E 
1ee8e     63 06 1C 36 
1ee92     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1ee96     30 63 3E 00 
1ee9a     00 00 00 00 
1ee9e     00 00 00 00 
1eea2     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1eea6     7F 7F 7F 00 
1eeaa     00 00 00 00 
1eeae     00 18 3C 7E 
1eeb2     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1eeb6     3C 18 7E 00 
1eeba     00 00 00 00 
1eebe     00 18 3C 7E 
1eec2     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1eec6     18 18 18 00 
1eeca     00 00 00 00 
1eece     00 18 18 18 
1eed2     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1eed6     7E 3C 18 00 
1eeda     00 00 00 00 
1eede     00 00 00 18 
1eee2     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1eee6     00 00 00 00 
1eeea     00 00 00 00 
1eeee     00 00 00    | 	byte	$00[11]
1eef1     0C 06 7F 06 
1eef5     0C 00 00 00 
1eef9     00 00 00 00 
1eefd     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef01     00 03 03 03 
1ef05     7F 00 00 00 
1ef09     00 00 00 00 
1ef0d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef11     14 36 7F 36 
1ef15     14 00 00 00 
1ef19     00 00 00 00 
1ef1d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1ef21     1C 1C 3E 3E 
1ef25     7F 7F 00 00 
1ef29     00 00 00 00 
1ef2d     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1ef31     7F 3E 3E 1C 
1ef35     1C 08 00 00 
1ef39     00 00 00 00 
1ef3d     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef41     00 00 00 00 
1ef45     00 00 00 00 
1ef49     00 00 00 00 
1ef4d     00 00       | 	byte	$00[14]
1ef4f     18 3C 3C 3C 
1ef53     18 18 18 00 
1ef57     18 18 00 00 
1ef5b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1ef5f     66 24 00 00 
1ef63     00 00 00 00 
1ef67     00 00 00 00 
1ef6b     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef6f     00 36 36 7F 
1ef73     36 36 36 7F 
1ef77     36 36 00 00 
1ef7b     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1ef7f     3E 63 43 03 
1ef83     3E 60 60 61 
1ef87     63 3E 18 18 
1ef8b     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1ef8f     00 00 43 63 
1ef93     30 18 0C 06 
1ef97     63 61 00 00 
1ef9b     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1ef9f     1C 36 36 1C 
1efa3     6E 3B 33 33 
1efa7     33 6E 00 00 
1efab     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1efaf     0C 0C 0C 06 
1efb3     00 00 00 00 
1efb7     00 00 00 00 
1efbb     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1efbf     30 18 0C 0C 
1efc3     0C 0C 0C 0C 
1efc7     18 30 00 00 
1efcb     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1efcf     0C 18 30 30 
1efd3     30 30 30 30 
1efd7     18 0C 00 00 
1efdb     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1efdf     00 00 00 66 
1efe3     3C FF 3C 66 
1efe7     00 00 00 00 
1efeb     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1efef     00 00 00 18 
1eff3     18 7E 18 18 
1eff7     00 00 00 00 
1effb     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1efff     00 00 00 00 
1f003     00 00 00 00 | 	byte	$00[8]
1f007     18 18 18 0C 
1f00b     00 00 00 00 
1f00f     00 00 00 00 
1f013     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1f017     00 00 00 00 
1f01b     00 00 00 00 
1f01f     00 00 00 00 
1f023     00 00 00 00 | 	byte	$00[16]
1f027     18 18 00 00 
1f02b     00 00 00 00 
1f02f     00 00 40 60 
1f033     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1f037     03 01 00 00 
1f03b     00 00 00 00 
1f03f     1C 36 63 63 
1f043     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1f047     36 1C 00 00 
1f04b     00 00 00 00 
1f04f     18 1C 1E 18 
1f053     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1f057     18 7E 00 00 
1f05b     00 00 00 00 
1f05f     3E 63 60 30 
1f063     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1f067     63 7F 00 00 
1f06b     00 00 00 00 
1f06f     3E 63 60 60 
1f073     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1f077     63 3E 00 00 
1f07b     00 00 00 00 
1f07f     30 38 3C 36 
1f083     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1f087     30 78 00 00 
1f08b     00 00 00 00 
1f08f     7F 03 03 03 
1f093     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1f097     63 3E 00 00 
1f09b     00 00 00 00 
1f09f     1C 06 03 03 
1f0a3     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1f0a7     63 3E 00 00 
1f0ab     00 00 00 00 
1f0af     7F 63 60 60 
1f0b3     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1f0b7     0C 0C 00 00 
1f0bb     00 00 00 00 
1f0bf     3E 63 63 63 
1f0c3     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1f0c7     63 3E 00 00 
1f0cb     00 00 00 00 
1f0cf     3E 63 63 63 
1f0d3     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1f0d7     30 1E 00 00 
1f0db     00 00 00 00 
1f0df     00 00 00 18 
1f0e3     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1f0e7     18 18 00 00 
1f0eb     00 00 00 00 
1f0ef     00 00 00 18 
1f0f3     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1f0f7     18 18 0C 00 
1f0fb     00 00 00 00 
1f0ff     00 60 30 18 
1f103     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1f107     30 60 00 00 
1f10b     00 00 00 00 
1f10f     00 00 00 7E 
1f113     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1f117     00 00 00 00 
1f11b     00 00 00 00 
1f11f     00          | 	byte	$00[9]
1f120     06 0C 18 30 
1f124     60 30 18 0C 
1f128     06 00 00 00 
1f12c     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1f130     63 63 30 18 
1f134     18 18 00 18 
1f138     18 00 00 00 
1f13c     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1f140     3E 63 63 7B 
1f144     7B 7B 3B 03 
1f148     3E 00 00 00 
1f14c     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1f150     1C 36 63 63 
1f154     7F 63 63 63 
1f158     63 00 00 00 
1f15c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1f160     66 66 66 3E 
1f164     66 66 66 66 
1f168     3F 00 00 00 
1f16c     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1f170     66 43 03 03 
1f174     03 03 43 66 
1f178     3C 00 00 00 
1f17c     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1f180     36 66 66 66 
1f184     66 66 66 36 
1f188     1F 00 00 00 
1f18c     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1f190     66 46 16 1E 
1f194     16 06 46 66 
1f198     7F 00 00 00 
1f19c     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1f1a0     66 46 16 1E 
1f1a4     16 06 06 06 
1f1a8     0F 00 00 00 
1f1ac     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1f1b0     66 43 03 03 
1f1b4     7B 63 63 66 
1f1b8     5C 00 00 00 
1f1bc     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1f1c0     63 63 63 7F 
1f1c4     63 63 63 63 
1f1c8     63 00 00 00 
1f1cc     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1f1d0     18 18 18 18 
1f1d4     18 18 18 18 | 	byte	$18[8]
1f1d8     3C 00 00 00 
1f1dc     00 00 00 78 
1f1e0     30 30 30 30 
1f1e4     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1f1e8     1E 00 00 00 
1f1ec     00 00 00 67 
1f1f0     66 66 36 1E 
1f1f4     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1f1f8     67 00 00 00 
1f1fc     00 00 00 0F 
1f200     06 06 06 06 
1f204     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1f208     7F 00 00 00 
1f20c     00 00 00 63 
1f210     77 7F 7F 6B 
1f214     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1f218     63 00 00 00 
1f21c     00 00 00 63 
1f220     67 6F 7F 7B 
1f224     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1f228     63 00 00 00 
1f22c     00 00 00 3E 
1f230     63 63 63 63 
1f234     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f238     3E 00 00 00 
1f23c     00 00 00 3F 
1f240     66 66 66 3E 
1f244     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1f248     0F 00 00 00 
1f24c     00 00 00 3E 
1f250     63 63 63 63 
1f254     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1f258     3E 30 70 00 
1f25c     00 00 00 3F 
1f260     66 66 66 3E 
1f264     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1f268     67 00 00 00 
1f26c     00 00 00 3E 
1f270     63 63 06 1C 
1f274     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1f278     3E 00 00 00 
1f27c     00 00 00 7E 
1f280     7E 5A 18 18 
1f284     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1f288     3C 00 00 00 
1f28c     00 00 00 63 
1f290     63 63 63 63 
1f294     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1f298     3E 00 00 00 
1f29c     00 00 00 63 
1f2a0     63 63 63 63 
1f2a4     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1f2a8     08 00 00 00 
1f2ac     00 00 00 63 
1f2b0     63 63 63 6B 
1f2b4     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1f2b8     36 00 00 00 
1f2bc     00 00 00 63 
1f2c0     63 36 3E 1C 
1f2c4     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1f2c8     63 00 00 00 
1f2cc     00 00 00 66 
1f2d0     66 66 66 3C 
1f2d4     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1f2d8     3C 00 00 00 
1f2dc     00 00 00 7F 
1f2e0     63 61 30 18 
1f2e4     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1f2e8     7F 00 00 00 
1f2ec     00 00 00 3C 
1f2f0     0C 0C 0C 0C 
1f2f4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1f2f8     3C 00 00 00 
1f2fc     00 00 00 00 
1f300     01 03 07 0E 
1f304     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1f308     40 00 00 00 
1f30c     00 00 00 3C 
1f310     30 30 30 30 
1f314     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1f318     3C 00 00 00 
1f31c     1C 36 00 00 
1f320     00 00 00 00 
1f324     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f328     00 00 00 00 
1f32c     00 00 00 00 
1f330     00 00 00 00 
1f334     00 00 00 00 
1f338     00          | 	byte	$00[17]
1f339     FF 00 00 0C 
1f33d     18 00 00 00 
1f341     00 00 00 00 
1f345     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f349     00 00 00 00 
1f34d     00 00 00 00 
1f351     00          | 	byte	$00[9]
1f352     1E 30 3E 33 
1f356     33 33 6E 00 
1f35a     00 00 00 00 
1f35e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1f362     1E 36 66 66 
1f366     66 66 3E 00 
1f36a     00 00 00 00 
1f36e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f372     3E 63 03 03 
1f376     03 63 3E 00 
1f37a     00 00 00 00 
1f37e     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1f382     3C 36 33 33 
1f386     33 33 6E 00 
1f38a     00 00 00 00 
1f38e     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f392     3E 63 7F 03 
1f396     03 63 3E 00 
1f39a     00 00 00 00 
1f39e     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1f3a2     0C 1E 0C 0C 
1f3a6     0C 0C 1E 00 
1f3aa     00 00 00 00 
1f3ae     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f3b2     6E 33 33 33 
1f3b6     33 33 3E 30 
1f3ba     33 1E 00 00 
1f3be     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1f3c2     36 6E 66 66 
1f3c6     66 66 67 00 
1f3ca     00 00 00 00 
1f3ce     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1f3d2     1C 18 18 18 
1f3d6     18 18 3C 00 
1f3da     00 00 00 00 
1f3de     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1f3e2     70 60 60 60 
1f3e6     60 60 60 66 
1f3ea     66 3C 00 00 
1f3ee     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1f3f2     66 36 1E 1E 
1f3f6     36 66 67 00 
1f3fa     00 00 00 00 
1f3fe     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1f402     18 18 18 18 
1f406     18 18       | 	byte	$18[6]
1f408     3C 00 00 00 
1f40c     00 00 00 00 
1f410     00 00 37 7F 
1f414     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1f418     63 00 00 00 
1f41c     00 00 00 00 
1f420     00 00 3B 66 
1f424     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f428     66 00 00 00 
1f42c     00 00 00 00 
1f430     00 00 3E 63 
1f434     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1f438     3E 00 00 00 
1f43c     00 00 00 00 
1f440     00 00 3B 66 
1f444     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f448     3E 06 06 0F 
1f44c     00 00 00 00 
1f450     00 00 6E 33 
1f454     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1f458     3E 30 30 78 
1f45c     00 00 00 00 
1f460     00 00 3B 6E 
1f464     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1f468     0F 00 00 00 
1f46c     00 00 00 00 
1f470     00 00 3E 63 
1f474     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1f478     3E 00 00 00 
1f47c     00 00 00 08 
1f480     0C 0C 3F 0C 
1f484     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f488     38 00 00 00 
1f48c     00 00 00 00 
1f490     00 00 33 33 
1f494     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1f498     6E 00 00 00 
1f49c     00 00 00 00 
1f4a0     00 00 63 63 
1f4a4     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1f4a8     1C 00 00 00 
1f4ac     00 00 00 00 
1f4b0     00 00 63 63 
1f4b4     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1f4b8     36 00 00 00 
1f4bc     00 00 00 00 
1f4c0     00 00 63 36 
1f4c4     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1f4c8     63 00 00 00 
1f4cc     00 00 00 00 
1f4d0     00 00 63 63 
1f4d4     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1f4d8     7E 60 30 1F 
1f4dc     00 00 00 00 
1f4e0     00 00 7F 33 
1f4e4     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1f4e8     7F 00 00 00 
1f4ec     00 00 00 70 
1f4f0     18 18 18 0E 
1f4f4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1f4f8     70 00 00 00 
1f4fc     00 00 00 18 
1f500     18 18 18 18 
1f504     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f508     18 00 00 00 
1f50c     00 00 00 0E 
1f510     18 18 18 70 
1f514     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1f518     0E 00 00 00 
1f51c     6E 3B 00 00 
1f520     00 00 00 00 
1f524     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f528     00 00 00 00 
1f52c     00 00 00 00 
1f530     00 00       | 	byte	$00[10]
1f532     08 1C 36 63 
1f536     63 63 7F 00 
1f53a     00 00 00 00 
1f53e     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1f542     03 03 03 03 
1f546     43 66 3C 18 
1f54a     30 1E 00 00 
1f54e     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1f552     33 33 33 33 
1f556     33 33       | 	byte	$33[6]
1f558     6E 00 00 00 
1f55c     00 00 60 30 
1f560     18 00 3E 63 
1f564     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1f568     3E 00 00 00 
1f56c     00 00 08 1C 
1f570     36 00 1E 30 
1f574     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1f578     6E 00 00 00 
1f57c     00 00 00 00 
1f580     33 00 1E 30 
1f584     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1f588     6E 00 00 00 
1f58c     00 00 1C 36 
1f590     1C 00 33 33 
1f594     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1f598     6E 00 00 00 
1f59c     00 00 60 30 
1f5a0     18 00 3E 63 
1f5a4     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1f5a8     3E 00 00 00 
1f5ac     00 00 00 00 
1f5b0     00 00 3E 63 
1f5b4     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1f5b8     3E 18 30 1E 
1f5bc     00 00 00 1C 
1f5c0     58 78 38 18 
1f5c4     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1f5c8     3C 00 00 00 
1f5cc     00 00 00 00 
1f5d0     63 00 3E 63 
1f5d4     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1f5d8     3E 00 00 00 
1f5dc     66 33 00 3E 
1f5e0     63 63 63 63 
1f5e4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f5e8     3E 00 00 00 
1f5ec     00 00 CC 66 
1f5f0     33 00 3E 63 
1f5f4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1f5f8     3E 00 00 00 
1f5fc     00 00 18 3C 
1f600     66 00 1C 18 
1f604     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1f608     3C 00 00 00 
1f60c     30 18 00 7F 
1f610     63 61 30 18 
1f614     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1f618     7F 00 00 00 
1f61c     00 63 00 08 
1f620     1C 36 63 63 
1f624     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1f628     63 00 00 00 
1f62c     30 18 00 3C 
1f630     66 43 03 03 
1f634     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1f638     3C 00 00 00 
1f63c     30 18 00 7F 
1f640     66 46 16 1E 
1f644     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1f648     7F 00 00 00 
1f64c     0C 06 00 0F 
1f650     06 06 06 06 
1f654     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1f658     7F 00 00 00 
1f65c     30 18 00 1C 
1f660     18 18 18 18 
1f664     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1f668     3C 00 00 00 
1f66c     00 00 08 1C 
1f670     36 00 3E 63 
1f674     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1f678     3E 00 00 00 
1f67c     00 00 00 00 
1f680     63 00 3E 63 
1f684     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1f688     3E 00 00 00 
1f68c     00 00 00 6F 
1f690     46 26 06 06 
1f694     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1f698     7F 00 00 00 
1f69c     00 00 00 6E 
1f6a0     4C 2C 0C 0C 
1f6a4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1f6a8     1E 00 00 00 
1f6ac     30 18 00 3E 
1f6b0     63 63 06 1C 
1f6b4     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1f6b8     3E 00 00 00 
1f6bc     00 00 60 30 
1f6c0     18 00 3E 63 
1f6c4     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1f6c8     3E 00 00 00 
1f6cc     00 63 00 3E 
1f6d0     63 63 63 63 
1f6d4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f6d8     3E 00 00 00 
1f6dc     00 63 00 63 
1f6e0     63 63 63 63 
1f6e4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1f6e8     3E 00 00 00 
1f6ec     6C 38 00 7E 
1f6f0     7E 5A 18 18 
1f6f4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1f6f8     3C 00 00 00 
1f6fc     00 00 60 48 
1f700     2C 0C 3F 0C 
1f704     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f708     38 00 00 00 
1f70c     00 00 00 0F 
1f710     26 36 1E 0E 
1f714     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1f718     7F 00 00 00 
1f71c     00 00 00 00 
1f720     00 63 36 1C 
1f724     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1f728     00 00 00 00 
1f72c     00 00       | 	byte	$00[6]
1f72e     36 1C 08 00 
1f732     3E 63 03 03 
1f736     03 63 3E 00 
1f73a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1f73e     30 18 0C 00 
1f742     1E 30 3E 33 
1f746     33 33 6E 00 
1f74a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f74e     60 30 18 00 
1f752     1C 18 18 18 
1f756     18 18 3C 00 
1f75a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1f75e     60 30 18 00 
1f762     3E 63 63 63 
1f766     63 63 3E 00 
1f76a     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1f76e     30 18 0C 00 
1f772     33 33 33 33 
1f776     33 33 6E 00 
1f77a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f77e     00 08 1C 36 
1f782     63 63 7F 63 
1f786     63 63 63 18 
1f78a     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1f78e     00 00 00 00 
1f792     1E 30 3E 33 
1f796     33 33 6E 18 
1f79a     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1f79e     00 7F 63 61 
1f7a2     30 18 0C 06 
1f7a6     43 63 7F 00 
1f7aa     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1f7ae     36 1C 08 00 
1f7b2     7F 33 18 0C 
1f7b6     06 63 7F 00 
1f7ba     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1f7be     00 7F 66 46 
1f7c2     16 1E 16 06 
1f7c6     46 66 7F 18 
1f7ca     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1f7ce     00 00 00 00 
1f7d2     3E 63 7F 03 
1f7d6     03 63 3E 18 
1f7da     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1f7de     00 3C 66 03 
1f7e2     1F 03 0F 03 
1f7e6     03 66 3C 00 
1f7ea     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1f7ee     60 30 18 00 
1f7f2     7F 33 18 0C 
1f7f6     06 63 7F 00 
1f7fa     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1f7fe     00 3C 66 43 
1f802     03 03 03 03 
1f806     43 66 3C 00 
1f80a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1f80e     00 00 00 00 
1f812     3E 63 06 1C 
1f816     30 63 3E 18 
1f81a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1f81e     00 00 00 00 
1f822     00 00       | 	byte	$00[6]
1f824     6C 36 1B 36 
1f828     6C 00 00 00 
1f82c     00 00 00 00 
1f830     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f834     1B 36 6C 36 
1f838     1B 00 00 00 
1f83c     88 22 88 22 
1f840     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1f844     88 22 88 22 
1f848     88 22 88 22 
1f84c     AA 55 AA 55 
1f850     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1f854     AA 55 AA 55 
1f858     AA 55 AA 55 
1f85c     BB EE BB EE 
1f860     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1f864     BB EE BB EE 
1f868     BB EE BB EE 
1f86c     18 18 18 18 
1f870     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1f874     18 18 18 18 
1f878     18 18 18 18 
1f87c     18 18 18 18 
1f880     18 18 18    | 	byte	$18[15]
1f883     1F 18 18 18 
1f887     18 18 18 18 
1f88b     18 30 18 00 
1f88f     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1f893     63 7F 63 63 
1f897     63 63 00 00 
1f89b     00 1C 36 00 
1f89f     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1f8a3     63 7F 63 63 
1f8a7     63 63 00 00 
1f8ab     00 36 1C 00 
1f8af     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1f8b3     1E 16 06 46 
1f8b7     66 7F 00 00 
1f8bb     00 00 00 00 
1f8bf     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1f8c3     1C 30 60 63 
1f8c7     63 3E 18 30 
1f8cb     1E 6C 6C 6C 
1f8cf     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1f8d3     6F 6C 6C 6C 
1f8d7     6C 6C 6C 6C 
1f8db     6C 6C 6C 6C 
1f8df     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f8e3     6C 6C 6C 6C 
1f8e7     6C 6C 6C 6C 
1f8eb     6C          | 	byte	$6c[9]
1f8ec     00 00 00 00 
1f8f0     00          | 	byte	$00[5]
1f8f1     7F 60 6F 6C 
1f8f5     6C 6C 6C 6C 
1f8f9     6C 6C 6C 6C 
1f8fd     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f901     6F 60 7F 00 
1f905     00 00 00 00 
1f909     00 00 00 18 
1f90d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1f911     61 30 18 0C 
1f915     06 43 63 7F 
1f919     00 00 00 00 
1f91d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1f921     00 7F 33 18 
1f925     0C 06 63 7F 
1f929     00 00 00 00 
1f92d     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1f931     00 00 1F 18 
1f935     18 18 18 18 
1f939     18 18 18 18 
1f93d     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f941     18 18 F8 00 
1f945     00 00 00 00 
1f949     00 00 00 18 
1f94d     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f951     18 18 FF 00 
1f955     00 00 00 00 
1f959     00 00 00 00 
1f95d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f961     00 00 FF 18 
1f965     18 18 18 18 
1f969     18 18 18 18 
1f96d     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f971     18 18 F8 18 
1f975     18 18 18 18 
1f979     18 18 18 00 
1f97d     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1f981     00 00 FF 00 
1f985     00 00 00 00 
1f989     00 00 00 18 
1f98d     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f991     18 18 FF 18 
1f995     18 18 18 18 
1f999     18 18 18 63 
1f99d     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1f9a1     36 63 63 7F 
1f9a5     63 63 63 63 
1f9a9     00 00 00 00 
1f9ad     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1f9b1     00 1E 30 3E 
1f9b5     33 33 33 6E 
1f9b9     00 00 00 6C 
1f9bd     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1f9c1     EC 0C FC 00 
1f9c5     00 00 00 00 
1f9c9     00 00 00 00 
1f9cd     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f9d1     FC 0C EC 6C 
1f9d5     6C 6C 6C 6C 
1f9d9     6C 6C 6C 6C 
1f9dd     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f9e1     EF 00 FF 00 
1f9e5     00 00 00 00 
1f9e9     00 00 00 00 
1f9ed     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f9f1     FF 00 EF 6C 
1f9f5     6C 6C 6C 6C 
1f9f9     6C 6C 6C 6C 
1f9fd     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1fa01     EC 0C EC 6C 
1fa05     6C 6C 6C 6C 
1fa09     6C 6C 6C 00 
1fa0d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1fa11     FF 00 FF 00 
1fa15     00 00 00 00 
1fa19     00 00 00 6C 
1fa1d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1fa21     EF 00 EF 6C 
1fa25     6C 6C 6C 6C 
1fa29     6C 6C 6C 00 
1fa2d     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1fa31     63 3E 63 63 
1fa35     63 63 3E 63 
1fa39     00 00 00 00 
1fa3d     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1fa41     30 3C 36 33 
1fa45     33 33 33 6E 
1fa49     00 00 00 00 
1fa4d     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1fa51     66 66 6F 66 
1fa55     66 66 36 1F 
1fa59     00 00 00 36 
1fa5d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1fa61     66 66 66 66 
1fa65     66 66       | 	byte	$66[6]
1fa67     36 1F 00 00 
1fa6b     00 00 63 00 
1fa6f     7F 66 46 16 
1fa73     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1fa77     66 7F 00 00 
1fa7b     00 6C 38 00 
1fa7f     38 30 30 3C 
1fa83     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1fa87     33 6E 00 00 
1fa8b     00 36 1C 00 
1fa8f     63 67 6F 7F 
1fa93     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1fa97     63 63 00 00 
1fa9b     00 30 18 00 
1fa9f     3C 18 18 18 
1faa3     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1faa7     18 3C 00 00 
1faab     00 3C 66 00 
1faaf     3C 18 18 18 
1fab3     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1fab7     18 3C 00 00 
1fabb     00 00 00 36 
1fabf     1C 08 00 3E 
1fac3     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1fac7     63 3E 00 00 
1facb     00 18 18 18 
1facf     18 18 18 18 
1fad3     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1fad7     00 00 00 00 
1fadb     00 00 00 00 
1fadf     00 00 00 00 | 	byte	$00[12]
1fae3     F8 18 18 18 
1fae7     18 18 18 18 
1faeb     18 FF FF FF 
1faef     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1faf3     FF FF FF FF 
1faf7     FF FF FF FF 
1fafb     FF          | 	byte	$ff[9]
1fafc     00 00 00 00 
1fb00     00 00 00    | 	byte	$00[7]
1fb03     FF FF FF FF 
1fb07     FF FF FF FF 
1fb0b     FF          | 	byte	$ff[9]
1fb0c     00 00 00 7E 
1fb10     7E 5A 18 18 
1fb14     18 18 18 18 
1fb18     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1fb1c     1C 36 1C 63 
1fb20     63 63 63 63 
1fb24     63 63 63 63 
1fb28     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fb2c     FF FF FF FF 
1fb30     FF FF FF    | 	byte	$ff[7]
1fb33     00 00 00 00 
1fb37     00 00 00 00 
1fb3b     00          | 	byte	$00[9]
1fb3c     30 18 00 3E 
1fb40     63 63 63 63 
1fb44     63 63 63 63 
1fb48     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fb4c     00 00 00 1E 
1fb50     33 33 33 1B 
1fb54     33 63 63 63 
1fb58     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1fb5c     1C 36 00 3E 
1fb60     63 63 63 63 
1fb64     63 63 63 63 
1fb68     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fb6c     30 18 00 63 
1fb70     67 6F 7F 7B 
1fb74     73 63 63 63 
1fb78     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1fb7c     00 00 60 30 
1fb80     18 00 3B 66 
1fb84     66 66 66 66 
1fb88     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1fb8c     00 00 36 1C 
1fb90     08 00 3B 66 
1fb94     66 66 66 66 
1fb98     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1fb9c     36 1C 00 3E 
1fba0     63 63 06 1C 
1fba4     30 60 63 63 
1fba8     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1fbac     00 00 36 1C 
1fbb0     08 00 3E 63 
1fbb4     06 1C 30 63 
1fbb8     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1fbbc     30 18 00 3F 
1fbc0     66 66 66 3E 
1fbc4     36 66 66 66 
1fbc8     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1fbcc     30 18 00 63 
1fbd0     63 63 63 63 
1fbd4     63 63 63 63 
1fbd8     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fbdc     00 00 60 30 
1fbe0     18 00 3B 6E 
1fbe4     66 06 06 06 
1fbe8     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1fbec     66 33 00 63 
1fbf0     63 63 63 63 
1fbf4     63 63 63 63 
1fbf8     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fbfc     00 00 60 30 
1fc00     18 00 63 63 
1fc04     63 63 63 63 
1fc08     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1fc0c     30 18 00 66 
1fc10     66 66 66 3C 
1fc14     18 18 18 18 
1fc18     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1fc1c     00 00 00 08 
1fc20     0C 0C 3F 0C 
1fc24     0C 0C 0C 6C 
1fc28     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1fc2c     30 18 00 00 
1fc30     00 00 00 00 
1fc34     00 00 00 00 
1fc38     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fc3c     00 00 00 00 
1fc40     00 00 00 00 | 	byte	$00[8]
1fc44     7F 00 00 00 
1fc48     00 00 00 00 
1fc4c     66 33 00 00 
1fc50     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1fc54     00 00 00 00 
1fc58     00 00 00 00 
1fc5c     00 00 00 00 
1fc60     00 00 00 00 
1fc64     00 00 00 00 
1fc68     00          | 	byte	$00[21]
1fc69     0C 06 3C 36 
1fc6d     1C 00 00 00 
1fc71     00 00 00 00 
1fc75     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fc79     00 00 00 63 
1fc7d     3E 00 00 00 
1fc81     00 00 00 00 
1fc85     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fc89     00 00 00 00 
1fc8d     3E 63 06 1C 
1fc91     36 63 63 36 
1fc95     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1fc99     00 00 00 00 
1fc9d     00 00 00 00 | 	byte	$00[8]
1fca1     18 00 7E 00 
1fca5     18 00 00 00 
1fca9     00 00 00 00 
1fcad     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fcb1     00 00 00 00 
1fcb5     00 00 00 00 | 	byte	$00[8]
1fcb9     18 30 1E 00 
1fcbd     00 00 1C 36 
1fcc1     36 1C 00 00 
1fcc5     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1fcc9     00 00 00 00 
1fccd     63 00 00 00 
1fcd1     00 00 00 00 
1fcd5     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fcd9     00 00 00 18 
1fcdd     18 00 00 00 
1fce1     00 00 00 00 
1fce5     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fce9     00 00 00 00 
1fced     00          | 	byte	$00[5]
1fcee     CC 66 33 00 
1fcf2     33 33 33 33 
1fcf6     33 33 6E 00 
1fcfa     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1fcfe     00 3F 66 66 
1fd02     66 3E 36 66 
1fd06     66 66 6F 00 
1fd0a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1fd0e     36 1C 08 00 
1fd12     3B 6E 66 06 
1fd16     06 06 0F 00 
1fd1a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1fd1e     00 00 00 7E 
1fd22     7E 7E 7E 7E 
1fd26     7E 7E 00 00 
1fd2a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1fd2e     00 00 00 00 
1fd32     00 00 00 00 
1fd36     00 00 00 00 
1fd3a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fd3c     00 00 00 00 
      ...             
1fd6c     00 00 00 00 
1fd70     00 00 00    | st_font        file "st4font.def"
1fd73     FF FF 00 00 
1fd77     00 00 00 00 
1fd7b     00 18 18 18 
1fd7f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fd83     18 18 18 18 
1fd87     18 18 18 18 
1fd8b     18          | 	byte	$18[9]
1fd8c     00 00 00 00 
1fd90     00 00 00    | 	byte	$00[7]
1fd93     FF FF 18 18 
1fd97     18 18 18 18 
1fd9b     18 18 18 18 
1fd9f     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fda3     FF FF 00 00 
1fda7     00 00 00 00 
1fdab     00 18 18 18 
1fdaf     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fdb3     1F 1F 18 18 
1fdb7     18 18 18 18 
1fdbb     18 18 18 18 
1fdbf     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fdc3     F8 F8 18 18 
1fdc7     18 18 18 18 
1fdcb     18 00 00 00 
1fdcf     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fdd3     1F 1F 18 18 
1fdd7     18 18 18 18 
1fddb     18 00 00 00 
1fddf     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fde3     F8 F8 18 18 
1fde7     18 18 18 18 
1fdeb     18 18 18 18 
1fdef     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fdf3     1F 1F 00 00 
1fdf7     00 00 00 00 
1fdfb     00 18 18 18 
1fdff     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fe03     F8 F8 00 00 
1fe07     00 00 00 00 
1fe0b     00 18 18 18 
1fe0f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fe13     FF FF 18 18 
1fe17     18 18 18 18 
1fe1b     18 00 00 18 
1fe1f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1fe23     66 7E 7E 66 
1fe27     66 66 66 30 
1fe2b     18 00 00 7E 
1fe2f     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1fe33     3E 06 06 06 
1fe37     06 7E 7E 18 
1fe3b     0C 30 18 3C 
1fe3f     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1fe43     06 06 06 66 
1fe47     66 7E 3C 00 
1fe4b     00 30 18 66 
1fe4f     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1fe53     7E 7E 76 76 
1fe57     66 66 66 00 
1fe5b     00 30 18 7C 
1fe5f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1fe63     1C 38 70 60 
1fe67     60 7E 3E 00 
1fe6b     00 30 18 7E 
1fe6f     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1fe73     18 0C 0C 06 
1fe77     06 7E 7E 00 
1fe7b     00 18 18 00 
1fe7f     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1fe83     18 18 0C 0C 
1fe87     06 7E 7E 00 
1fe8b     00 30 18 3C 
1fe8f     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1fe93     66 66 66 66 
1fe97     66          | 	byte	$66[5]
1fe98     7E 3C 00 00 
1fe9c     00 00 06 06 
1fea0     06 06 16 1E 
1fea4     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1fea8     7E 7E 00 00 
1feac     00 00 00 00 
1feb0     00 3C 7C 60 
1feb4     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1feb8     7E 7C 30 18 
1febc     00 00 00 00 
1fec0     00 3C 7E 66 
1fec4     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1fec8     7E 7C 18 0C 
1fecc     00 00 30 18 
1fed0     00 3C 3E 06 
1fed4     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1fed8     7E 7C 00 00 
1fedc     00 00 30 18 
1fee0     00 3E 7E 66 
1fee4     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1fee8     66 66 00 00 
1feec     00 00 30 18 
1fef0     00 7C 7E 06 
1fef4     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1fef8     7E 3E 00 00 
1fefc     00 00 30 18 
1ff00     00 7E 7E 30 
1ff04     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1ff08     7E 7E 00 00 
1ff0c     00 00 18 18 
1ff10     00 7E 7E 30 
1ff14     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1ff18     7E 7E 00 00 
1ff1c     00 00 30 18 
1ff20     00 3C 7E 66 
1ff24     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1ff28     7E 3C 00 00 
1ff2c     00 00 1C 1C 
1ff30     18 18 38 3C 
1ff34     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1ff38     3C 3C 00 00 
1ff3c     00 00 00 00 
1ff40     00 00 00 00 
1ff44     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ff48     00 00 00 00 
1ff4c     00 00       | 	byte	$00[6]
1ff4e     18 18 18 18 
1ff52     18 18 18 18 | 	byte	$18[8]
1ff56     00 00 18 18 
1ff5a     00 00 00 00 
1ff5e     66 66 66 66 
1ff62     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1ff66     00 00 00 00 
1ff6a     00 00 00 00 
1ff6e     00          | 	byte	$00[9]
1ff6f     66 66 FF FF 
1ff73     66 66 FF FF 
1ff77     66 66 00 00 
1ff7b     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1ff7f     7C 7E 06 06 
1ff83     3E 7C 60 60 
1ff87     7E 3E 18 18 
1ff8b     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1ff8f     66 30 30 18 
1ff93     18 0C 0C 66 
1ff97     66 00 00 00 
1ff9b     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1ff9f     66 66 3C 1C 
1ffa3     1C FC FE 66 
1ffa7     66 FE FC 00 
1ffab     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1ffaf     18 18 18 18 
1ffb3     00 00 00 00 
1ffb7     00 00 00 00 
1ffbb     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1ffbf     18 1C 0C 0C 
1ffc3     0C 0C 0C 0C 
1ffc7     1C 18 30 00 
1ffcb     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1ffcf     18 38 30 30 
1ffd3     30 30 30 30 
1ffd7     38 18 0C 00 
1ffdb     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1ffdf     66 66 3C 3C 
1ffe3     FF FF 3C 3C 
1ffe7     66 66 00 00 
1ffeb     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1ffef     00 18 18 18 
1fff3     7E 7E 18 18 
1fff7     18 00 00 00 
1fffb     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1ffff     00 00 00 00 
20003     00 00       | 	byte	$00[6]
20005     18 18 18 18 
20009     18          | 	byte	$18[5]
2000a     0C 04 00 00 
2000e     00 00 00 00 
20012     7E 7E 00 00 
20016     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2001a     00 00 00 00 
2001e     00 00 00 00 
20022     00 00 00 00 
20026     00          | 	byte	$00[13]
20027     18 18 18 00 
2002b     00 00 00 60 
2002f     60 60 30 30 
20033     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
20037     06 06 06 00 
2003b     00 00 00 3C 
2003f     7E 66 66 66 
20043     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
20047     66 7E 3C 00 
2004b     00 00 00 18 
2004f     18 1C 1C 18 
20053     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
20057     18 7E 7E 00 
2005b     00 00 00 3C 
2005f     7E 66 66 30 
20063     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
20067     0C 7E 7E 00 
2006b     00 00 00 7E 
2006f     7E 30 30 18 
20073     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
20077     66 7E 3C 00 
2007b     00 00 00 30 
2007f     30 38 38 3C 
20083     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
20087     7E 30 30 00 
2008b     00 00 00 7E 
2008f     7E 06 06 3E 
20093     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
20097     66 7E 3C 00 
2009b     00 00 00 38 
2009f     3C 0E 06 06 
200a3     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
200a7     66 7E 3C 00 
200ab     00 00 00 7E 
200af     7E 60 60 30 
200b3     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
200b7     0C 0C 0C 00 
200bb     00 00 00 3C 
200bf     7E 66 66 3C 
200c3     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
200c7     66 7E 3C 00 
200cb     00 00 00 3C 
200cf     7E 66 66 7E 
200d3     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
200d7     70 3C 1C 00 
200db     00 00 00 00 
200df     00 00 18 18 
200e3     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
200e7     18 18 18 00 
200eb     00 00 00 00 
200ef     00 00 18 18 
200f3     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
200f7     18 18 18 0C 
200fb     04 00 00 00 
200ff     70 38 1C 0E 
20103     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
20107     70 00 00 00 
2010b     00 00 00 00 
2010f     00 00 7E 7E 
20113     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
20117     00 00 00 00 
2011b     00 00 00 00 | 	byte	$00[8]
2011f     0E 1C 38 70 
20123     E0 70 38 1C 
20127     0E 00 00 00 
2012b     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2012f     7E 66 66 30 
20133     30 18 18 18 
20137     00 18 18 00 
2013b     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2013f     7E 66 66 66 
20143     66 36 06 66 
20147     66 7E 3C 00 
2014b     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2014f     3C 7E 66 66 
20153     66 7E 7E 66 
20157     66 66 66 00 
2015b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2015f     7E 66 66 7E 
20163     3E 66 66 66 
20167     66 7E 3E 00 
2016b     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2016f     7E 66 66 06 
20173     06 06 06 66 
20177     66 7E 3C 00 
2017b     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2017f     7E 66 66 66 
20183     66 66 66 66 
20187     66 7E 3E 00 
2018b     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2018f     7E 06 06 3E 
20193     3E 06 06 06 
20197     06 7E 7E 00 
2019b     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2019f     7E 06 06 3E 
201a3     3E 06 06 06 
201a7     06 06 06 00 
201ab     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
201af     7E 06 06 76 
201b3     76 66 66 66 
201b7     66 7E 3C 00 
201bb     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
201bf     66 66 66 7E 
201c3     7E 66 66 66 
201c7     66 66 66 00 
201cb     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
201cf     7E 18 18 18 
201d3     18 18 18 18 
201d7     18 7E 7E 00 
201db     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
201df     60 60 60 60 
201e3     60 60 60    | 	byte	$60[7]
201e6     66 66 7E 3C 
201ea     00 00 00 00 
201ee     66 66 36 36 
201f2     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
201f6     66 66 C6 C6 
201fa     00 00 00 00 
201fe     06 06 06 06 
20202     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
20206     06 06 7E 7E 
2020a     00 00 00 00 
2020e     C6 C6 EE EE 
20212     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
20216     C6 C6 C6 C6 
2021a     00 00 00 00 
2021e     66 66 66 6E 
20222     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
20226     76 66 66 66 
2022a     00 00 00 00 
2022e     3C 7E 66 66 
20232     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
20236     66 66 7E 3C 
2023a     00 00 00 00 
2023e     3E 7E 66 66 
20242     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
20246     06 06 06 06 
2024a     00 00 00 00 
2024e     3C 7E 66 66 
20252     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
20256     66 56 3E 6C 
2025a     00 00 00 00 
2025e     3E 7E 66 66 
20262     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
20266     66 66 C6 C6 
2026a     00 00 00 00 
2026e     7C 7E 06 06 
20272     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
20276     60 60 7E 3E 
2027a     00 00 00 00 
2027e     7E 7E 18 18 
20282     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
20286     18 18 18 18 
2028a     00 00 00 00 
2028e     66 66 66 66 
20292     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
20296     66 66 7E 3C 
2029a     00 00 00 00 
2029e     66 66 66 66 
202a2     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
202a6     3C 3C 18 18 
202aa     00 00 00 00 
202ae     C6 C6 C6 C6 
202b2     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
202b6     FE EE C6 82 
202ba     00 00 00 00 
202be     66 66 66 3C 
202c2     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
202c6     3C 66 66 66 
202ca     00 00 00 00 
202ce     66 66 66 66 
202d2     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
202d6     18 18 18 18 
202da     00 00 00 00 
202de     7E 7E 30 30 
202e2     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
202e6     06 06 7E 7E 
202ea     00 00 00 00 
202ee     3C 3C 0C 0C 
202f2     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
202f6     0C 0C 3C 3C 
202fa     00 00 00 00 
202fe     06 06 0C 0C 
20302     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
20306     60 60 C0 C0 
2030a     00 00 00 00 
2030e     3C 3C 30 30 
20312     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
20316     30 30 3C 3C 
2031a     00 00 00 00 
2031e     18 18 3C 3C 
20322     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
20326     00 00 00 00 
2032a     00 00 00 00 
2032e     00 00 00 00 
20332     00 00 00 00 
20336     00 00       | 	byte	$00[18]
20338     FE FE 00 00 
2033c     00 00 0C 0C 
20340     18 18 00 00 
20344     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
20348     00 00 00 00 
2034c     00 00 00 00 
20350     00          | 	byte	$00[9]
20351     3C 7C 60 7C 
20355     7E 66 66 7E 
20359     7C 00 00 00 
2035d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
20361     3E 7E 66 66 
20365     66 66 66 7E 
20369     3E 00 00 00 
2036d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
20371     3C 3E 06 06 
20375     06 06 06 7E 
20379     7C 00 00 00 
2037d     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
20381     7C 7E 66 66 
20385     66 66 66 7E 
20389     7C 00 00 00 
2038d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
20391     3C 7E 66 66 
20395     7E 06 06 7E 
20399     7C 00 00 00 
2039d     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
203a1     18 7E 7E 18 
203a5     18 18 18 18 
203a9     18 00 00 00 
203ad     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
203b1     7C 7E 66 66 
203b5     66 66 7E 7C 
203b9     60 7E 3E 00 
203bd     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
203c1     3E 7E 66 66 
203c5     66 66 66 66 
203c9     66 00 00 00 
203cd     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
203d1     1C 1C 18 18 
203d5     18 18 18 3C 
203d9     3C 00 00 00 
203dd     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
203e1     30 30 30 30 
203e5     30 30 30 30 
203e9     30          | 	byte	$30[9]
203ea     3E 1E 00 00 
203ee     06 06 06 36 
203f2     36 1E 1E 1E 
203f6     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
203fa     00 00 00 00 
203fe     1C 1C 18 18 
20402     18 18 18 18 
20406     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2040a     00 00 00 00 
2040e     00 00 00    | 	byte	$00[7]
20411     6C FE FE D6 
20415     D6 C6 C6 C6 
20419     C6 00 00 00 
2041d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
20421     3E 7E 66 66 
20425     66 66 66 66 
20429     66 00 00 00 
2042d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
20431     3C 7E 66 66 
20435     66 66 66 7E 
20439     3C 00 00 00 
2043d     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
20441     3E 7E 66 66 
20445     66 66 66 7E 
20449     3E 06 06 00 
2044d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
20451     7C 7E 66 66 
20455     66 66 66 7E 
20459     7C 60 60 00 
2045d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
20461     3E 7E 66 06 
20465     06 06 06 06 
20469     06 00 00 00 
2046d     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
20471     7C 7E 06 0E 
20475     3C 70 60 7E 
20479     3E 00 00 00 
2047d     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
20481     7E 7E 18 18 
20485     18 18 18 78 
20489     70 00 00 00 
2048d     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
20491     66 66 66 66 
20495     66 66 66    | 	byte	$66[7]
20498     7E 7C 00 00 
2049c     00 00 00 00 
204a0     00 66 66 66 
204a4     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
204a8     18 18 00 00 
204ac     00 00 00 00 
204b0     00 C6 C6 D6 
204b4     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
204b8     C6 82 00 00 
204bc     00 00 00 00 
204c0     00 66 66 3C 
204c4     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
204c8     66 66 00 00 
204cc     00 00 00 00 
204d0     00 66 66 66 
204d4     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
204d8     7C 60 7E 3E 
204dc     00 00 00 00 
204e0     00 7E 7E 30 
204e4     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
204e8     7E 7E 00 00 
204ec     00 00 30 18 
204f0     18 18 18 0C 
204f4     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
204f8     18 30 00 00 
204fc     00 00 18 18 
20500     18 18 18 18 
20504     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
20508     18 18 00 00 
2050c     00 00 0C 18 
20510     18 18 18 30 
20514     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
20518     18 0C 00 00 
2051c     00 00 6C 7E 
20520     36 00 00 00 
20524     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
20528     00 00 00 00 
2052c     00 00 00 00 
20530     00          | 	byte	$00[9]
20531     18 18 18 18 
20535     18 18 00 00 
20539     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2053c     00 00 00 00 
20540     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
20544     00 00 00 00 
20548     00 80 80 80 
2054c     00 00 00 FF 
20550     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
20554     00 00 00 00 
20558     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
20559     80 00 00 00 
2055d     00 80 00 00 
20561     80 80 00 00 
20565     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
20569     80 00 80 00 
2056d     00 40 80 00 
20571     AA AA AA 00 
20575     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
20579     FF 00 00 00 
2057d     00 FF 00 00 
20581     FF FF 00 00 
20585     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
20589     FF 00 FF 00 
2058d     00 FF FF 00 
20591     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
20594     00 00 00 00 
20598     00          | ataripalette   file "ataripalettep2.def"
20599     11 11 11 00 
2059d     22 22 22 00 
205a1     33 33 33 00 
205a5     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
205a9     55 55 55 00 
205ad     66 66 66 00 
205b1     77 77 77 00 
205b5     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
205b9     99 99 99 00 
205bd     AA AA AA 00 
205c1     BB BB BB 00 
205c5     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
205c9     DD DD DD 00 
205cd     EE EE EE 00 
205d1     FF FF FF 00 
205d5     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
205d9     00 14 40 00 
205dd     00 1E 60 00 
205e1     00 28 80 00 
205e5     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
205e9     00 3C BF 00 
205ed     00 46 DF 00 
205f1     00 50 FF 00 
205f5     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
205f9     39 77 FF 00 
205fd     55 8A FF 00 
20601     71 9E FF 00 
20605     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
20609     AA C5 FF 00 
2060d     C6 D8 FF 00 
20611     E3 EC FF 00 
20615     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
20619     00 00 40 00 
2061d     00 00 60 00 
20621     00 00 80 00 
20625     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
20629     00 00 BF 00 
2062d     00 00 DF 00 
20631     00 00 FF 00 
20635     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
20639     39 39 FF 00 
2063d     55 55 FF 00 
20641     71 71 FF 00 
20645     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
20649     AA AA FF 00 
2064d     C6 C6 FF 00 
20651     E3 E3 FF 00 
20655     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
20659     20 00 40 00 
2065d     30 00 60 00 
20661     40 00 80 00 
20665     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
20669     60 00 BF 00 
2066d     70 00 DF 00 
20671     80 00 FF 00 
20675     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
20679     9C 39 FF 00 
2067d     AA 55 FF 00 
20681     B8 71 FF 00 
20685     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
20689     D5 AA FF 00 
2068d     E3 C6 FF 00 
20691     F1 E3 FF 00 
20695     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
20699     40 00 40 00 
2069d     60 00 60 00 
206a1     80 00 80 00 
206a5     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
206a9     BF 00 BF 00 
206ad     DF 00 DF 00 
206b1     FF 00 FF 00 
206b5     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
206b9     FF 39 FF 00 
206bd     FF 55 FF 00 
206c1     FF 71 FF 00 
206c5     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
206c9     FF AA FF 00 
206cd     FF C6 FF 00 
206d1     FF E3 FF 00 
206d5     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
206d9     40 00 20 00 
206dd     60 00 30 00 
206e1     80 00 40 00 
206e5     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
206e9     BF 00 60 00 
206ed     DF 00 70 00 
206f1     FF 00 80 00 
206f5     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
206f9     FF 39 9C 00 
206fd     FF 55 AA 00 
20701     FF 71 B8 00 
20705     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
20709     FF AA D5 00 
2070d     FF C6 E3 00 
20711     FF E3 F1 00 
20715     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
20719     40 00 00 00 
2071d     60 00 00 00 
20721     80 00 00 00 
20725     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
20729     BF 00 00 00 
2072d     DF 00 00 00 
20731     FF 00 00 00 
20735     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
20739     FF 39 39 00 
2073d     FF 55 55 00 
20741     FF 71 71 00 
20745     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
20749     FF AA AA 00 
2074d     FF C6 C6 00 
20751     FF E3 E3 00 
20755     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
20759     40 10 00 00 
2075d     60 18 00 00 
20761     80 20 00 00 
20765     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
20769     BF 30 00 00 
2076d     DF 38 00 00 
20771     FF 40 00 00 
20775     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
20779     FF 6A 39 00 
2077d     FF 80 55 00 
20781     FF 95 71 00 
20785     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
20789     FF BF AA 00 
2078d     FF D5 C6 00 
20791     FF EA E3 00 
20795     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
20799     40 20 00 00 
2079d     60 30 00 00 
207a1     80 40 00 00 
207a5     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
207a9     BF 60 00 00 
207ad     DF 70 00 00 
207b1     FF 80 00 00 
207b5     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
207b9     FF 9C 39 00 
207bd     FF AA 55 00 
207c1     FF B8 71 00 
207c5     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
207c9     FF D5 AA 00 
207cd     FF E3 C6 00 
207d1     FF F1 E3 00 
207d5     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
207d9     40 30 00 00 
207dd     60 48 00 00 
207e1     80 60 00 00 
207e5     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
207e9     BF 90 00 00 
207ed     DF A8 00 00 
207f1     FF C0 00 00 
207f5     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
207f9     FF CE 39 00 
207fd     FF D5 55 00 
20801     FF DC 71 00 
20805     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
20809     FF EA AA 00 
2080d     FF F1 C6 00 
20811     FF F8 E3 00 
20815     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
20819     30 40 00 00 
2081d     48 60 00 00 
20821     60 80 00 00 
20825     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
20829     90 BF 00 00 
2082d     A8 DF 00 00 
20831     C0 FF 00 00 
20835     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
20839     CE FF 39 00 
2083d     D5 FF 55 00 
20841     DC FF 71 00 
20845     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
20849     EA FF AA 00 
2084d     F1 FF C6 00 
20851     F8 FF E3 00 
20855     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
20859     00 40 00 00 
2085d     00 60 00 00 
20861     00 80 00 00 
20865     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
20869     00 BF 00 00 
2086d     00 DF 00 00 
20871     00 FF 00 00 
20875     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
20879     39 FF 39 00 
2087d     55 FF 55 00 
20881     71 FF 71 00 
20885     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
20889     AA FF AA 00 
2088d     C6 FF C6 00 
20891     E3 FF E3 00 
20895     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
20899     00 40 14 00 
2089d     00 60 1E 00 
208a1     00 80 28 00 
208a5     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
208a9     00 BF 3C 00 
208ad     00 DF 46 00 
208b1     00 FF 50 00 
208b5     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
208b9     39 FF 77 00 
208bd     55 FF 8A 00 
208c1     71 FF 9E 00 
208c5     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
208c9     AA FF C5 00 
208cd     C6 FF D8 00 
208d1     E3 FF EC 00 
208d5     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
208d9     00 40 28 00 
208dd     00 60 3C 00 
208e1     00 80 50 00 
208e5     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
208e9     00 BF 78 00 
208ed     00 DF 8C 00 
208f1     00 FF A0 00 
208f5     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
208f9     39 FF B5 00 
208fd     55 FF C0 00 
20901     71 FF CA 00 
20905     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
20909     AA FF DF 00 
2090d     C6 FF EA 00 
20911     E3 FF F4 00 
20915     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
20919     00 40 40 00 
2091d     00 60 60 00 
20921     00 80 80 00 
20925     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
20929     00 BF BF 00 
2092d     00 DF DF 00 
20931     00 FF FF 00 
20935     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
20939     39 FF FF 00 
2093d     55 FF FF 00 
20941     71 FF FF 00 
20945     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
20949     AA FF FF 00 
2094d     C6 FF FF 00 
20951     E3 FF FF 00 
20955     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
20959     00 28 40 00 
2095d     00 3C 60 00 
20961     00 50 80 00 
20965     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
20969     00 78 BF 00 
2096d     00 8C DF 00 
20971     00 A0 FF 00 
20975     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
20979     39 B5 FF 00 
2097d     55 C0 FF 00 
20981     71 CA FF 00 
20985     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
20989     AA DF FF 00 
2098d     C6 EA FF 00 
20991     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
20994                 | '**********************************************************************************
20994                 | '
20994                 | '        Timings and colors definitions
20994                 | '
20994                 | '**********************************************************************************
20994                 | 
20994                 |    'streamer sets for text mode, to add to timings[0..5]
20994                 | ' todo for the retromachine: 768x576
20994                 | 
20994                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
20994     10 00 00 00 
20998     50 00 00 00 
2099c     14 00 00 00 
209a0     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
209a4     70 00 00 00 
209a8     08 00 00 00 
209ac     30 00 00 00 
209b0     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
209b4     10 00 00 00 
209b8     10 00 00 00 
209bc     00 00 00 00 
209c0     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
209c4     E0 01 00 00 
209c8     F6 32 24 15 
209cc     FB 6C C3 01 
209d0     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
209d4                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
209d4                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
209d4     30 00 00 00 
209d8     50 00 00 00 
209dc     34 00 00 00 
209e0     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
209e4     20 00 00 00 
209e8     08 00 00 00 
209ec     16 00 00 00 
209f0     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
209f4     24 00 00 00 
209f8     18 00 00 00 
209fc     40 00 00 00 
20a00     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
20a04     F0 01 00 00 
20a08     F6 32 24 15 
20a0c     FB 6C C3 01 
20a10     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
20a14                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
20a14     10 00 00 00 
20a18     40 00 00 00 
20a1c     10 00 00 00 
20a20     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
20a24     08 00 00 00 
20a28     08 00 00 00 
20a2c     08 00 00 00 
20a30     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
20a34     40 00 00 00 
20a38     20 00 00 00 
20a3c     80 00 00 00 
20a40     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
20a44     E0 01 00 00 
20a48     70 AE E9 10 
20a4c     FB 8B FF 01 
20a50     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
20a54     10 00 00 00 
20a58     42 00 00 00 
20a5c     14 00 00 00 
20a60     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
20a64     00 00 00 00 
20a68     08 00 00 00 
20a6c     00 00 00 00 
20a70     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
20a74     10 00 00 00 
20a78     10 00 00 00 
20a7c     C0 00 00 00 
20a80     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
20a84     40 02 00 00 
20a88     F6 32 24 15 
20a8c     FB 6C C3 01 
20a90     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
20a94     50 00 00 00 
20a98     A0 00 00 00 
20a9c     54 00 00 00 
20aa0     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
20aa4     08 00 00 00 
20aa8     08 00 00 00 
20aac     08 00 00 00 
20ab0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20ab4     0C 00 00 00 
20ab8     08 00 00 00 
20abc     00 01 00 00 
20ac0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
20ac4     E0 01 00 00 
20ac8     10 06 56 15 
20acc     FB 64 C3 01 
20ad0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
20ad4     50 00 00 00 
20ad8     32 00 00 00 
20adc     50 00 00 00 
20ae0     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20ae4     08 00 00 00 
20ae8     08 00 00 00 
20aec     08 00 00 00 
20af0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20af4     0C 00 00 00 
20af8     08 00 00 00 
20afc     40 01 00 00 
20b00     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
20b04     E0 01 00 00 
20b08     F2 CD 33 13 
20b0c     FB 53 92 01 
20b10     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20b14     18 00 00 00 
20b18     30 00 00 00 
20b1c     18 00 00 00 
20b20     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
20b24     08 00 00 00 
20b28     08 00 00 00 
20b2c     08 00 00 00 
20b30     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20b34     0C 00 00 00 
20b38     08 00 00 00 
20b3c     80 01 00 00 
20b40     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
20b44     E0 01 00 00 
20b48     F4 8F 11 11 
20b4c     FB 3A 55 01 
20b50     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
20b54     20 00 00 00 
20b58     40 00 00 00 
20b5c     22 00 00 00 
20b60     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20b64     00 00 00 00 
20b68     08 00 00 00 
20b6c     00 00 00 00 
20b70     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
20b74     0C 00 00 00 
20b78     08 00 00 00 
20b7c     C0 01 00 00 
20b80     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
20b84     F0 01 00 00 
20b88     F2 CD 33 13 
20b8c     FB 53 92 01 
20b90     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20b94                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
20b94     00 75 C7 97 
20b98     27 47 F6 0A 
20b9c     05 79 CB 9B 
20ba0     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
20ba4                 | 
20ba4     28 12 64 FD | hdmi            setq    #9
20ba8     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
20bac                 |            '     setq2   #255
20bac                 |             '    rdlong  $100, paletteptr 
20bac     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
20bb0     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
20bb4     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
20bb8     78 F9 02 F1 |                 add     ii,hbase
20bbc     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
20bc0     7B 0B 80 FF 
20bc4     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
20bc8                 | 
20bc8     66 66 86 FF 
20bcc     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
20bd0                 | 
20bd0                 | 
20bd0                 | ''--------  frame rendering main loop  ---------------------------------------------------
20bd0                 | 
20bd0                 | p101
20bd0     28 14 64 FD |                 setq    #10
20bd4     00 DF 06 FB |                 rdlong  framebuf,  ptra
20bd8     28 1E 64 FD |                 setq    #15
20bdc     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
20be0     71 99 02 FB |                 rdlong  border,borderptr
20be4                 | 
20be4     01 C4 06 F1 |                 add     frames,#1
20be8     76 F5 02 F6 |                 mov     dlptr2,dlptr
20bec                 | 
20bec     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
20bf0     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
20bf4     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
20bf8     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
20bfc                 |  '' up porch
20bfc                 | 
20bfc     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
20c00     49 FF 02 F6 |                 mov     hsync1,sync_001
20c04     37 A8 46 FB |                 callpa  i_upporch ,#blank
20c08     72 01 68 FC |                 wrlong  #0,vblankptr
20c0c                 |                 
20c0c     1F EA 16 F4 |                 testb   paletteptr,#31 wc
20c10     29 FE 65 3D |          if_nc  setq2   #255
20c14     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
20c18                 | 
20c18                 | '' cursor blinking
20c18                 | 
20c18     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
20c1c     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
20c20                 | 
20c20                 | '' main screen
20c20                 | 
20c20     00 BE 06 F6 |                 mov linenum,#0
20c24     00 18 07 F6 |                 mov rcnt,#0
20c28     00 1C 07 F6 |                 mov rcnt2a,#0
20c2c                 | 
20c2c                 | 
20c2c     00 18 0F F2 | p301            cmp rcnt,#0 wz
20c30     18 00 90 AD |         if_z    jmp #p306
20c34     01 18 87 F1 |                 sub rcnt,#1
20c38     90 F7 02 F6 |                 mov dl,rdl
20c3c     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
20c40     8F F7 02 A1 |    if_z        add dl,roffset  
20c44     7B 21 03 F6 |                 mov rdl,dl
20c48     04 00 90 FD |                 jmp #p307          
20c4c                 |           
20c4c                 |                 
20c4c     7A F7 02 FB | p306            rdlong  dl,dlptr2
20c50     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
20c54     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
20c58     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
20c5c                 | 
20c5c                 | '' Special entry:
20c5c                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
20c5c                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
20c5c                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
20c5c                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
20c5c                 | '' todo: set horizontal scroll (if needed)
20c5c                 | 
20c5c     02 FA 66 F0 |                 shl framebuf2,#2
20c60     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
20c64     04 22 0F F2 |                 cmp dlc,#%100 wz
20c68                 |   
20c68                 |                 
20c68     04 F4 06 F1 |                 add dlptr2,#4
20c6c     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
20c70     7A 21 03 FB |                  rdlong rdl,dlptr2
20c74     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
20c78     04 18 47 F0 |                  shr rcnt,#4
20c7c                 |              
20c7c     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
20c80     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
20c84                 |                 
20c84     04 1E 47 F0 |                  shr roffset,#4
20c88     0C 1E 67 F0 |                  shl roffset,#12
20c8c                 |   
20c8c     9C FF 9F FD |                  jmp #p301
20c90                 |                  
20c90                 |                  
20c90                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
20c90     0C FA 46 F0 |                 shr     framebuf2,#12
20c94     02 FA 66 F0 |                 shl     framebuf2,#2
20c98                 | 
20c98     7B 03 E3 F8 |                 getbyte t1,dl,#0
20c9c     00 02 0F F2 |                 cmp     t1,#0 wz
20ca0     34 00 90 AD |     if_z        jmp     #borderline
20ca4                 | 
20ca4     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
20ca8     50 00 90 CD |           if_c   jmp     #textline
20cac     50 02 90 3D |           if_nc  jmp     #graphline
20cb0                 | '
20cb0     01 BE 06 F1 | p302            add     linenum,#1
20cb4     04 F4 06 F1 |                 add     dlptr2,#4
20cb8     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
20cbc     6C FF 9F 5D |          if_nz  jmp     #p301
20cc0                 | 
20cc0     72 03 68 FC | p112            wrlong  #1,vblankptr
20cc4     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
20cc8                 | 
20cc8     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
20ccc     4B FF 02 F6 |                 mov     hsync1,sync_223
20cd0     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
20cd4     F8 FE 9F FD |                 jmp     #p101
20cd8                 | 
20cd8                 | '' ---------------  END of frame rendering loop -------------------------------------------
20cd8                 | 
20cd8                 | 
20cd8     14 00 B0 FD | borderline      call    #hsync                      ' make a border
20cdc     4C A1 C2 FC |                 xcont   m_vi,border
20ce0     CC FF 9F FD |                 jmp     #p302
20ce4                 | 
20ce4                 | 
20ce4     08 00 B0 FD | blank           call    #hsync                          'blank lines
20ce8     7E A1 C2 FC |                 xcont   m_vi,hsync0
20cec     FD ED 6F 0B |         _ret_   djnz    pa,#blank
20cf0                 | 
20cf0     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
20cf4     7F 9D B2 FC |                 xzero   m_sn,hsync1
20cf8     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
20cfc                 | 
20cfc                 | 
20cfc                 | 
20cfc                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
20cfc                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
20cfc                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
20cfc                 | 
20cfc                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
20cfc                 | 
20cfc     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
20d00                 | 
20d00     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
20d04     7B 17 5B F8 |                 getnib  zoom, dl,#3
20d08     03 16 07 F5 |                 and             zoom, #3
20d0c                 | 
20d0c                 | 
20d0c                 | 
20d0c     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
20d10     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
20d14     3F BC 06 F5 |                 and     linestart,#63
20d18     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
20d1c     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
20d20                 | 
20d20     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
20d24                 | 
20d24                 |                        ' if fontline =0, get a border color
20d24                 | 
20d24     51 03 33 F9 | p102            getword t1,m_border,#0
20d28     00 02 0F F2 |                 cmp     t1, #0 wz
20d2c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20d30                 | 
20d30     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
20d34     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
20d38     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
20d3c     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
20d40     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
20d44     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
20d48     52 BB 02 F6 |                 mov m_lut2, m_lut1
20d4c     6A BB 02 F1 |                 add m_lut2, lutt1
20d50     58 0F 03 F6 |                 mov cpl2,i_cpl
20d54                 | 
20d54     02 16 0F F2 |                cmp zoom,#2 wz
20d58     E4 00 90 AD |           if_z jmp #p420
20d5c     01 16 0F F2 |                cmp zoom,#1 wz
20d60     64 00 90 AD |           if_z jmp #p410
20d64     00 16 0F F2 |                 cmp zoom,#0 wz
20d68     04 00 90 AD |           if_z jmp #p400
20d6c     50 01 90 FD |                jmp #p430
20d70                 | 
20d70                 |                    '
20d70                 |  ''---------------------------------------------------------------------------------------------------------
20d70     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
20d74     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20d78     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20d7c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20d80     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20d84     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
20d88     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20d8c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20d90     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20d94     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20d98                 | 
20d98     81 BB C2 FC |                         xcont m_lut2,t1
20d9c                 | 
20d9c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20da0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20da4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20da8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20dac     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20db0     01 C0 86 F1 |                         sub     lutaddr,#1
20db4                 | 
20db4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20db8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20dbc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20dc0                 | 
20dc0     EB 0F 6F FB |                         djnz   cpl2,#p400
20dc4     28 01 90 FD |  p401                   jmp    #p103
20dc8                 | 
20dc8                 | ''------------------------------------------------------------------------------------------------------------
20dc8                 | 
20dc8     01 0E 47 F0 |  p410                   shr cpl2,#1
20dcc                 | 
20dcc                 | ''---------------------------------------------------------------------------------------------------------
20dcc     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
20dd0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20dd4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20dd8     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20ddc     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20de0     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
20de4     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20de8     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20dec     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20df0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20df4                 | 
20df4                 | 
20df4     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
20df8     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
20dfc     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
20e00     03 02 07 FA |                         mul t1,#3
20e04     81 BB C2 FC |                         xcont m_lut2,t1
20e08     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e0c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e10     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20e14     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e18     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e1c     01 C0 86 F1 |                         sub     lutaddr,#1
20e20     63 06 63 FD |                         mergew t3
20e24     03 06 07 FA |                         mul t3,#3
20e28     83 BB C2 FC |                         xcont m_lut2,t3
20e2c                 | 
20e2c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20e30     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20e34                 | 
20e34     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20e38                 | 
20e38     E4 0F 6F FB |                         djnz   cpl2,#p412
20e3c     B0 00 90 FD |  p411                   jmp    #p103
20e40                 | 
20e40                 | ''------------------------------------------------------------------------------------------------------------
20e40                 | 
20e40     02 0E 47 F0 |  p420                   shr cpl2,#2
20e44                 | 
20e44                 | ''---------------------------------------------------------------------------------------
20e44     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
20e48     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20e4c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20e50     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20e54     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20e58     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
20e5c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20e60     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20e64     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20e68     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20e6c                 | 
20e6c     61 02 63 FD |                         mergeb t1
20e70     81 07 3B F9 |                         getword t3,t1,#1
20e74     0F 02 07 FA |                         mul t1,#15
20e78     81 BB C2 FC |                         xcont m_lut2,t1
20e7c                 | 
20e7c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e80     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e84     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20e88     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e8c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e90     01 C0 86 F1 |                         sub     lutaddr,#1
20e94                 | 
20e94     81 09 EB F8 |                         getbyte t4,t1,#1        '
20e98     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
20e9c                 | 
20e9c     0F 06 07 FA |                         mul t3,#15
20ea0     83 BB C2 FC |                         xcont m_lut2,t3
20ea4                 | 
20ea4     83 0B EB F8 |                         getbyte t5,t3,#1
20ea8     85 BB C2 FC |                         xcont m_lut2, t5
20eac     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20eb0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20eb4                 | 
20eb4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20eb8                 | 
20eb8     E2 0F 6F FB |                         djnz   cpl2,#p422
20ebc     30 00 90 FD |  p421                   jmp    #p103
20ec0                 | 
20ec0                 | '--------------------------------------------------------------------------------------------------------------
20ec0                 | 
20ec0     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
20ec4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20ec8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20ecc                 | 
20ecc     00 BA C6 FC |                         xcont m_lut2,#0
20ed0                 | 
20ed0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20ed4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20ed8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20edc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20ee0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20ee4     01 C0 86 F1 |                         sub     lutaddr,#1
20ee8                 | 
20ee8     F5 0F 6F FB |                         djnz   cpl2,#p430
20eec     00 00 90 FD |  p431                   jmp    #p103
20ef0                 | 
20ef0                 | ''------------------------------------------------------------------------------------------------------------
20ef0                 | 
20ef0                 | 
20ef0                 | 
20ef0     51 25 33 F9 | p103            getword  mb2,m_border,#0
20ef4     00 24 0F F2 |                 cmp      mb2, #0 wz
20ef8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
20efc                 | 
20efc     B0 FD 9F FD |                 jmp #p302
20f00                 | 
20f00                 | '' -------------------------------------- END of text line ---------------------------------
20f00                 | 
20f00                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
20f00                 | 
20f00     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
20f04                 | 
20f04                 | 
20f04     51 25 33 F9 | p202            getword mb2,m_border,#0
20f08     00 24 0F F2 |                 cmp     mb2, #0 wz
20f0c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20f10                 | 
20f10                 | '----------------------------------------- display pixels
20f10                 | 
20f10     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
20f14     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
20f18                 | 
20f18     7B 17 5B F8 |                 getnib  zoom, dl,#3
20f1c     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
20f20                 | 
20f20     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
20f24     0C BC 06 F5 |                 and     colordepth,#12
20f28                 | 
20f28     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
20f2c     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
20f30     64 00 90 AD |           if_z  jmp     #p240
20f34                 | 
20f34     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
20f38     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
20f3c     98 00 90 AD |           if_z  jmp     #p250
20f40                 | 
20f40     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
20f44     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
20f48     FC 00 90 AD |           if_z  jmp     #p260
20f4c                 | 
20f4c     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
20f50                 | 
20f50                 | '' --- 8 bit color modes
20f50                 | 
20f50     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
20f54     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20f58                 | 
20f58     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
20f5c     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
20f60                 |        
20f60                 |  '  
20f60     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
20f64     25 0C 07 A6 |                 if_z mov skippattern,#%100101
20f68                 |     
20f68                 |  
20f68     05 0C 07 56 |                 if_nz mov skippattern,#%000101
20f6c     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
20f70                 |         
20f70                 | 
20f70                 |         
20f70     7D 11 03 FB | p235               rdlong  char,framebuf2
20f74     32 0C 63 FD |                    skipf skippattern
20f78     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
20f7c     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
20f80     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
20f84     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
20f88     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
20f8c     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
20f90     F7 0F 6F FB |                    djnz    cpl2,#p235
20f94                 | 
20f94     20 01 90 FD |                jmp    #p203
20f98                 |                   
20f98                 | 
20f98                 | 
20f98                 | '' --- 1 bit color modes
20f98                 | 
20f98     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
20f9c     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20fa0                 | 
20fa0     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
20fa4     13 0C 07 A6 |        if_z   mov skippattern,#%10011
20fa8     08 0C 07 56 |        if_nz  mov skippattern,#%01000
20fac                 | 
20fac                 | 
20fac     7D 11 E3 FA | p241               rdword  char,framebuf2
20fb0     44 10 FF F9 |                    movbyts char,#%01000100
20fb4     63 10 63 FD |                    mergew  char
20fb8     32 0C 63 FD |                    skipf skippattern
20fbc     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
20fc0     63 10 63 FD |                    mergew  char                    ' 1 0
20fc4     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
20fc8     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
20fcc     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
20fd0     F6 0F 6F FB |                    djnz   cpl2,#p241
20fd4                 | 
20fd4                 | 
20fd4     E0 00 90 FD |                jmp    #p203
20fd8                 | 
20fd8                 | '' --- 2 bit color modes
20fd8                 | 
20fd8     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
20fdc     C8 00 90 AD |        if_z   jmp #p251
20fe0                 | 
20fe0     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
20fe4     30 00 90 AD |        if_z   jmp #p252
20fe8                 | 
20fe8                 | 
20fe8     7D 11 C3 FA | p254               rdbyte char,framebuf2
20fec     04 0A 07 F6 |                    mov  t5,#4
20ff0     02 10 67 F0 | p255               shl  char,#2
20ff4     88 03 53 F8 |                    getnib  t1,char,#2
20ff8     03 02 07 F5 |                    and     t1,#3
20ffc     55 02 07 FA |                    mul     t1,#$55
21000     81 05 03 F9 |                    rolbyte  t2,t1,#0
21004     FA 0B 6F FB |                    djnz    t5,#p255
21008     82 BB C2 FC |                    xcont   m_lut2,t2
2100c     01 FA 06 F1 |                    add     framebuf2,#1
21010     F5 0F 6F FB |                    djnz    cpl2,#p254
21014     A0 00 90 FD |                    jmp     #p203
21018                 | 
21018     7D 11 E3 FA | p252               rdword char,framebuf2
2101c     08 0A 07 F6 |                    mov  t5,#8
21020     02 10 67 F0 | p253               shl  char,#2
21024     88 03 63 F8 |                    getnib  t1,char,#4
21028     03 02 07 F5 |                    and     t1,#3
2102c     05 02 07 FA |                    mul     t1,#5
21030     81 05 83 F8 |                    rolnib  t2,t1,#0
21034     FA 0B 6F FB |                    djnz    t5,#p253
21038     82 BB C2 FC |                    xcont   m_lut2,t2
2103c     02 FA 06 F1 |                    add     framebuf2,#2
21040     F5 0F 6F FB |                    djnz    cpl2,#p252
21044     70 00 90 FD |                    jmp     #p203
21048                 | 
21048                 | '' ------ 4 bit color modes
21048                 | 
21048     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
2104c     58 00 90 AD |        if_z   jmp #p251
21050                 | 
21050     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
21054     2C 00 90 AD |        if_z   jmp #p262
21058                 | 
21058                 | 
21058     7D 11 C3 FA | p263               rdbyte char,framebuf2
2105c     02 0A DC FC |                            rep #5,#2
21060     88 05 8B F8 |                              rolnib t2,char,#1
21064     88 05 8B F8 |                                  rolnib t2,char,#1
21068     88 05 8B F8 |                              rolnib t2,char,#1
2106c     88 05 8B F8 |                                  rolnib t2,char,#1
21070     04 10 67 F0 |                              shl char,#4
21074     82 BB C2 FC |                    xcont   m_lut2,t2
21078     01 FA 06 F1 |                    add     framebuf2,#1
2107c     F6 0F 6F FB |                    djnz    cpl2,#p263
21080     34 00 90 FD |                    jmp     #p203
21084                 | 
21084     7D 11 E3 FA | p262               rdword  char,framebuf2
21088     04 06 DC FC |                            rep #3,#4
2108c     88 05 9B F8 |                              rolnib t2,char,#3
21090     88 05 9B F8 |                                  rolnib t2,char,#3
21094     04 10 67 F0 |                              shl char,#4
21098     82 BB C2 FC |                    xcont   m_lut2,t2
2109c     02 FA 06 F1 |                    add     framebuf2,#2
210a0     F8 0F 6F FB |                    djnz    cpl2,#p262
210a4     10 00 90 FD |                    jmp     #p203
210a8                 | 
210a8                 | ''---------- all color modes without zoom
210a8                 | 
210a8     87 07 D8 FC | p251               rep  #3,cpl2
210ac     7D 11 03 FB |                    rdlong  char,framebuf2
210b0     04 FA 06 F1 |                    add     framebuf2,#4
210b4     88 BB C2 FC |                    xcont   m_lut2,char
210b8                 |           
210b8                 |  ''-----------------------------------------------------------------------------------------
210b8                 | p203           ' getword  mb2,m_border,#0
210b8     00 24 0F F2 |                 cmp      mb2, #0 wz
210bc     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
210c0                 | 
210c0     EC FB 9F FD |                 jmp #p302
210c4                 | 
210c4                 | '' -------------------------------------- END of graph  line ---------------------------------
210c4                 | 
210c4                 | '' consts and vars
210c4                 | 
210c4     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
210c8     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
210cc     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
210d0     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
210d4                 | 
210d4     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
210d8                 | 
210d8                 | '------ these longs will be set by setmode function
210d8                 | 
210d8     00 00 00 00 | m_bs            long    0        'blanks before sync
210dc     00 00 00 00 | m_sn            long    0        'sync
210e0     00 00 00 00 | m_bv            long    0        'blanks before visible
210e4     00 00 00 00 | m_vi            long    0        'visible pixels #
210e8     00 00 00 00 | m_border        long    0        'left/right borders
210ec     00 00 00 00 | m_lut1          long    0        'characters
210f0     00 00 00 00 | i_vborder       long    0        'up/down borders
210f4     00 00 00 00 | i_upporch       long    0        'up porch lines
210f8     00 00 00 00 | i_vsync         long    0        'vsync lines
210fc     00 00 00 00 | i_downporch     long    0        'down porch lines
21100     00 00 00 00 | i_modenum       long    0        'mode #
21104     00 00 00 00 | i_cpl           long    0        'chars/longs per line
21108     00 00 00 00 | i_lines         long    0        'scanlines #
2110c     00 00 00 00 | i_clock         long    0
21110     00 00 00 00 | i_hubset        long    0
21114     00 00 00 00 | i_totalvis      long    0
21118                 | 
21118                 | '-------------------------------------
21118                 | 
21118     00 00 00 00 | m_lut2          long    0
2111c                 | 
2111c                 | colordepth
2111c     00 00 00 00 | linestart       long    0
21120     00 00 00 00 | linenum         long    0
21124     00 01 00 00 | lutaddr         long    256
21128                 | 
21128     0E 00 00 00 | cursorsh        long    14
2112c     00 00 00 00 | frames          long    0
21130     00 00 00 00 | cursorx         long    0
21134     00 00 00 00 | cursory         long    0
21138     00 00 00 00 | cursorpos       long    0
2113c     00 00 00 00 | cursorpos2      long    0
21140     00 00 00 00 | fontstart       long    0
21144     00 00 00 00 | border2         long 0
21148     00 00 81 70 | lutiv           long $70810000
2114c     00 00 88 00 | lutt1           long $00880000
21150     00 00 80 00 | lutg1           long $00800000
21154     00 00 80 10 | lutg2           long $10800000
21158     00 00 80 20 | lutg4           long $20800000
2115c     00 00 80 30 | lutg8           long $30800000
21160     00 00 00 00 | framebuf        long 0
21164     00 00 00 00 | fontbuf         long 0
21168     00 00 00 00 | borderptr       long 0
2116c     00 00 00 00 | vblankptr       long 0
21170     00 00 00 00 | cursorptr       long 0
21174     00 00 00 00 | modeptr         long 0
21178     00 00 00 00 | paletteptr      long 0
2117c     00 00 00 00 | dlptr           long 0
21180                 | fontnumptr      res     1
21180                 | fontnumptr      res     1
21180                 | hbase           res     1
21180                 | hbase           res     1
21180                 | borderptr2      res     1
21180                 | borderptr2      res     1
21180                 | dlptr2 res 1
21180                 | dlptr2 res 1
21180                 | dl              res 1
21180                 | dl              res 1
21180                 | ii              res     1
21180                 | ii              res     1
21180                 | framebuf2       res     1
21180                 | framebuf2       res     1
21180                 | hsync0          res     1
21180                 | hsync0          res     1
21180                 | hsync1          res     1
21180                 | hsync1          res     1
21180                 | fontline        res     1
21180                 | fontline        res     1
21180                 | t1              res     1
21180                 | t1              res     1
21180                 | t2              res     1
21180                 | t2              res     1
21180                 | t3 res 1
21180                 | t3 res 1
21180                 | t4 res 1
21180                 | t4 res 1
21180                 | t5 res 1
21180                 | t5 res 1
21180                 | skippattern res 1
21180                 | skippattern res 1
21180                 | cpl2 res 1
21180                 | cpl2 res 1
21180                 | char            res     1
21180                 | char            res     1
21180                 | backcolor       res     1
21180                 | backcolor       res     1
21180                 | charcolor       res     1
21180                 | charcolor       res     1
21180                 | zoom res 1
21180                 | zoom res 1
21180     00 00 00 00 | rcnt long 0 'dl repeat count
21184     00 00 00 00 | rcnt2 long 0
21188     00 00 00 00 | rcnt2a long 0
2118c     00 00 00 00 | roffset long 0
21190     00 00 00 00 | rdl long 0  'dl repeat line
21194     00 00 00 00 | dlc long 0 'dl command
21198     00 00 00 00 | mb2 long 0
2119c     00 00 00 00 | aend             long 0
211a0                 |                 fit     496                     '
211a0                 | _shell_c_dat_
211a0     00 00 00 00 
      ...             
217ac     00 00 00 00 
217b0     00 00 00 00 | 	byte	$00[1556]
217b4                 | 	alignl
217b4                 | _trackerplayer_spin2_dat_
217b4                 | 
217b4     00 00 00 00 | null             long  0
217b8     46 52 45 51 
217bc     46 52 45 51 
217c0     46 52 45 51 
217c4     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
217c8     46 52 45 51 
217cc     46 52 45 51 
217d0     46 52 45 51 
217d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217d8     46 52 45 51 
217dc     46 52 45 51 
217e0     46 52 45 51 
217e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217e8     46 52 45 51 
217ec     46 52 45 51 
217f0     46 52 45 51 
217f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217f8     46 52 45 51 
217fc     46 52 45 51 
21800     46 52 45 51 
21804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21808     46 52 45 51 
2180c     46 52 45 51 
21810     46 52 45 51 
21814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21818     46 52 45 51 
2181c     46 52 45 51 
21820     46 52 45 51 
21824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21828     46 52 45 51 
2182c     46 52 45 51 
21830     46 52 45 51 
21834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21838     46 52 45 51 
2183c     46 52 45 51 
21840     46 52 45 51 
21844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21848     46 52 45 51 
2184c     46 52 45 51 
21850     46 52 45 51 
21854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21858     46 52 45 51 
2185c     46 52 45 51 
21860     46 52 45 51 
21864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21868     46 52 45 51 
2186c     46 52 45 51 
21870     46 52 45 51 
21874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21878     46 52 45 51 
2187c     46 52 45 51 
21880     46 52 45 51 
21884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21888     46 52 45 51 
2188c     46 52 45 51 
21890     46 52 45 51 
21894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21898     46 52 45 51 
2189c     46 52 45 51 
218a0     46 52 45 51 
218a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218a8     46 52 45 51 
218ac     46 52 45 51 
218b0     46 52 45 51 
218b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218b8     46 52 45 51 
218bc     46 52 45 51 
218c0     46 52 45 51 
218c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218c8     46 52 45 51 
218cc     46 52 45 51 
218d0     46 52 45 51 
218d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218d8     46 52 45 51 
218dc     46 52 45 51 
218e0     46 52 45 51 
218e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218e8     46 52 45 51 
218ec     46 52 45 51 
218f0     46 52 45 51 
218f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218f8     46 52 45 51 
218fc     46 52 45 51 
21900     46 52 45 51 
21904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21908     46 52 45 51 
2190c     46 52 45 51 
21910     46 52 45 51 
21914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21918     46 52 45 51 
2191c     46 52 45 51 
21920     46 52 45 51 
21924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21928     46 52 45 51 
2192c     46 52 45 51 
21930     46 52 45 51 
21934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21938     46 52 45 51 
2193c     46 52 45 51 
21940     46 52 45 51 
21944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21948     46 52 45 51 
2194c     46 52 45 51 
21950     46 52 45 51 
21954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21958     46 52 45 51 
2195c     46 52 45 51 
21960     46 52 45 51 
21964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21968     46 52 45 51 
2196c     46 52 45 51 
21970     46 52 45 51 
21974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21978     46 52 45 51 
2197c     46 52 45 51 
21980     46 52 45 51 
21984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21988     46 52 45 51 
2198c     46 52 45 51 
21990     46 52 45 51 
21994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21998     46 52 45 51 
2199c     46 52 45 51 
219a0     46 52 45 51 
219a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219a8     46 52 45 51 
219ac     46 52 45 51 
219b0     46 52 45 51 
219b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219b8     46 52 45 51 
219bc     46 52 45 51 
219c0     46 52 45 51 
219c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219c8     46 52 45 51 
219cc     46 52 45 51 
219d0     46 52 45 51 
219d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219d8     46 52 45 51 
219dc     46 52 45 51 
219e0     46 52 45 51 
219e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219e8     46 52 45 51 
219ec     46 52 45 51 
219f0     46 52 45 51 
219f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219f8     46 52 45 51 
219fc     46 52 45 51 
21a00     46 52 45 51 
21a04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a08     46 52 45 51 
21a0c     46 52 45 51 
21a10     46 52 45 51 
21a14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a18     46 52 45 51 
21a1c     46 52 45 51 
21a20     46 52 45 51 
21a24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a28     46 52 45 51 
21a2c     46 52 45 51 
21a30     46 52 45 51 
21a34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a38     46 52 45 51 
21a3c     46 52 45 51 
21a40     46 52 45 51 
21a44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a48     46 52 45 51 
21a4c     46 52 45 51 
21a50     46 52 45 51 
21a54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a58     46 52 45 51 
21a5c     46 52 45 51 
21a60     46 52 45 51 
21a64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a68     46 52 45 51 
21a6c     46 52 45 51 
21a70     46 52 45 51 
21a74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a78     46 52 45 51 
21a7c     46 52 45 51 
21a80     46 52 45 51 
21a84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a88     46 52 45 51 
21a8c     46 52 45 51 
21a90     46 52 45 51 
21a94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a98     46 52 45 51 
21a9c     46 52 45 51 
21aa0     46 52 45 51 
21aa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21aa8     46 52 45 51 
21aac     46 52 45 51 
21ab0     46 52 45 51 
21ab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ab8     46 52 45 51 
21abc     46 52 45 51 
21ac0     46 52 45 51 
21ac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ac8     46 52 45 51 
21acc     46 52 45 51 
21ad0     46 52 45 51 
21ad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ad8     46 52 45 51 
21adc     46 52 45 51 
21ae0     46 52 45 51 
21ae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ae8     46 52 45 51 
21aec     46 52 45 51 
21af0     46 52 45 51 
21af4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21af8     46 52 45 51 
21afc     46 52 45 51 
21b00     46 52 45 51 
21b04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b08     46 52 45 51 
21b0c     46 52 45 51 
21b10     46 52 45 51 
21b14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b18     46 52 45 51 
21b1c     46 52 45 51 
21b20     46 52 45 51 
21b24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b28     46 52 45 51 
21b2c     46 52 45 51 
21b30     46 52 45 51 
21b34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b38     46 52 45 51 
21b3c     46 52 45 51 
21b40     46 52 45 51 
21b44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b48     46 52 45 51 
21b4c     46 52 45 51 
21b50     46 52 45 51 
21b54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b58     46 52 45 51 
21b5c     46 52 45 51 
21b60     46 52 45 51 
21b64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b68     46 52 45 51 
21b6c     46 52 45 51 
21b70     46 52 45 51 
21b74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b78     46 52 45 51 
21b7c     46 52 45 51 
21b80     46 52 45 51 
21b84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b88     46 52 45 51 
21b8c     46 52 45 51 
21b90     46 52 45 51 
21b94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b98     46 52 45 51 
21b9c     46 52 45 51 
21ba0     46 52 45 51 
21ba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ba8     46 52 45 51 
21bac     46 52 45 51 
21bb0     46 52 45 51 
21bb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bb8     46 52 45 51 
21bbc     46 52 45 51 
21bc0     46 52 45 51 
21bc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bc8     46 52 45 51 
21bcc     46 52 45 51 
21bd0     46 52 45 51 
21bd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bd8     46 52 45 51 
21bdc     46 52 45 51 
21be0     46 52 45 51 
21be4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21be8     46 52 45 51 
21bec     46 52 45 51 
21bf0     46 52 45 51 
21bf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bf8     46 52 45 51 
21bfc     46 52 45 51 
21c00     46 52 45 51 
21c04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c08     46 52 45 51 
21c0c     46 52 45 51 
21c10     46 52 45 51 
21c14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c18     46 52 45 51 
21c1c     46 52 45 51 
21c20     46 52 45 51 
21c24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c28     46 52 45 51 
21c2c     46 52 45 51 
21c30     46 52 45 51 
21c34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c38     46 52 45 51 
21c3c     46 52 45 51 
21c40     46 52 45 51 
21c44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c48     46 52 45 51 
21c4c     46 52 45 51 
21c50     46 52 45 51 
21c54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c58     46 52 45 51 
21c5c     46 52 45 51 
21c60     46 52 45 51 
21c64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c68     46 52 45 51 
21c6c     46 52 45 51 
21c70     46 52 45 51 
21c74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c78     46 52 45 51 
21c7c     46 52 45 51 
21c80     46 52 45 51 
21c84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c88     46 52 45 51 
21c8c     46 52 45 51 
21c90     46 52 45 51 
21c94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c98     46 52 45 51 
21c9c     46 52 45 51 
21ca0     46 52 45 51 
21ca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ca8     46 52 45 51 
21cac     46 52 45 51 
21cb0     46 52 45 51 
21cb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cb8     46 52 45 51 
21cbc     46 52 45 51 
21cc0     46 52 45 51 
21cc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cc8     46 52 45 51 
21ccc     46 52 45 51 
21cd0     46 52 45 51 
21cd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cd8     46 52 45 51 
21cdc     46 52 45 51 
21ce0     46 52 45 51 
21ce4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ce8     46 52 45 51 
21cec     46 52 45 51 
21cf0     46 52 45 51 
21cf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cf8     46 52 45 51 
21cfc     46 52 45 51 
21d00     46 52 45 51 
21d04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d08     46 52 45 51 
21d0c     46 52 45 51 
21d10     46 52 45 51 
21d14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d18     46 52 45 51 
21d1c     46 52 45 51 
21d20     46 52 45 51 
21d24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d28     46 52 45 51 
21d2c     46 52 45 51 
21d30     46 52 45 51 
21d34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d38     46 52 45 51 
21d3c     46 52 45 51 
21d40     46 52 45 51 
21d44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d48     46 52 45 51 
21d4c     46 52 45 51 
21d50     46 52 45 51 
21d54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d58     46 52 45 51 
21d5c     46 52 45 51 
21d60     46 52 45 51 
21d64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d68     46 52 45 51 
21d6c     46 52 45 51 
21d70     46 52 45 51 
21d74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d78     46 52 45 51 
21d7c     46 52 45 51 
21d80     46 52 45 51 
21d84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d88     46 52 45 51 
21d8c     46 52 45 51 
21d90     46 52 45 51 
21d94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d98     46 52 45 51 
21d9c     46 52 45 51 
21da0     46 52 45 51 
21da4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21da8     46 52 45 51 
21dac     46 52 45 51 
21db0     46 52 45 51 
21db4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21db8     46 52 45 51 
21dbc     46 52 45 51 
21dc0     46 52 45 51 
21dc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21dc8     46 52 45 51 
21dcc     46 52 45 51 
21dd0     46 52 45 51 
21dd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21dd8     46 52 45 51 
21ddc     46 52 45 51 
21de0     46 52 45 51 
21de4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21de8     46 52 45 51 
21dec     46 52 45 51 
21df0     46 52 45 51 
21df4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21df8     46 52 45 51 
21dfc     46 52 45 51 
21e00     46 52 45 51 
21e04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e08     46 52 45 51 
21e0c     46 52 45 51 
21e10     46 52 45 51 
21e14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e18     46 52 45 51 
21e1c     46 52 45 51 
21e20     46 52 45 51 
21e24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e28     46 52 45 51 
21e2c     46 52 45 51 
21e30     46 52 45 51 
21e34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e38     46 52 45 51 
21e3c     46 52 45 51 
21e40     46 52 45 51 
21e44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e48     46 52 45 51 
21e4c     46 52 45 51 
21e50     46 52 45 51 
21e54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e58     46 52 45 51 
21e5c     46 52 45 51 
21e60     46 52 45 51 
21e64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e68     46 52 45 51 
21e6c     46 52 45 51 
21e70     46 52 45 51 
21e74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e78     46 52 45 51 
21e7c     46 52 45 51 
21e80     46 52 45 51 
21e84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e88     46 52 45 51 
21e8c     46 52 45 51 
21e90     46 52 45 51 
21e94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e98     46 52 45 51 
21e9c     46 52 45 51 
21ea0     46 52 45 51 
21ea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ea8     46 52 45 51 
21eac     46 52 45 51 
21eb0     46 52 45 51 
21eb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21eb8     46 52 45 51 
21ebc     46 52 45 51 
21ec0     46 52 45 51 
21ec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ec8     46 52 45 51 
21ecc     46 52 45 51 
21ed0     46 52 45 51 
21ed4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ed8     46 52 45 51 
21edc     46 52 45 51 
21ee0     46 52 45 51 
21ee4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ee8     46 52 45 51 
21eec     46 52 45 51 
21ef0     46 52 45 51 
21ef4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ef8     46 52 45 51 
21efc     46 52 45 51 
21f00     46 52 45 51 
21f04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f08     46 52 45 51 
21f0c     46 52 45 51 
21f10     46 52 45 51 
21f14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f18     46 52 45 51 
21f1c     46 52 45 51 
21f20     46 52 45 51 
21f24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f28     46 52 45 51 
21f2c     46 52 45 51 
21f30     46 52 45 51 
21f34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f38     46 52 45 51 
21f3c     46 52 45 51 
21f40     46 52 45 51 
21f44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f48     46 52 45 51 
21f4c     46 52 45 51 
21f50     46 52 45 51 
21f54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f58     46 52 45 51 
21f5c     46 52 45 51 
21f60     46 52 45 51 
21f64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f68     46 52 45 51 
21f6c     46 52 45 51 
21f70     46 52 45 51 
21f74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f78     46 52 45 51 
21f7c     46 52 45 51 
21f80     46 52 45 51 
21f84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f88     46 52 45 51 
21f8c     46 52 45 51 
21f90     46 52 45 51 
21f94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f98     46 52 45 51 
21f9c     46 52 45 51 
21fa0     46 52 45 51 
21fa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fa8     46 52 45 51 
21fac     46 52 45 51 
21fb0     46 52 45 51 
21fb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fb8     46 52 45 51 
21fbc     46 52 45 51 
21fc0     46 52 45 51 
21fc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fc8     46 52 45 51 
21fcc     46 52 45 51 
21fd0     46 52 45 51 
21fd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fd8     46 52 45 51 
21fdc     46 52 45 51 
21fe0     46 52 45 51 
21fe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fe8     46 52 45 51 
21fec     46 52 45 51 
21ff0     46 52 45 51 
21ff4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ff8     46 52 45 51 
21ffc     46 52 45 51 
22000     46 52 45 51 
22004     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22008     46 52 45 51 
2200c     46 52 45 51 
22010     46 52 45 51 
22014     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22018     46 52 45 51 
2201c     46 52 45 51 
22020     46 52 45 51 
22024     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22028     46 52 45 51 
2202c     46 52 45 51 
22030     46 52 45 51 
22034     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22038     46 52 45 51 
2203c     46 52 45 51 
22040     46 52 45 51 
22044     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22048     46 52 45 51 
2204c     46 52 45 51 
22050     46 52 45 51 
22054     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22058     46 52 45 51 
2205c     46 52 45 51 
22060     46 52 45 51 
22064     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22068     46 52 45 51 
2206c     46 52 45 51 
22070     46 52 45 51 
22074     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22078     46 52 45 51 
2207c     46 52 45 51 
22080     46 52 45 51 
22084     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22088     46 52 45 51 
2208c     46 52 45 51 
22090     46 52 45 51 
22094     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22098     46 52 45 51 
2209c     46 52 45 51 
220a0     46 52 45 51 
220a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220a8     46 52 45 51 
220ac     46 52 45 51 
220b0     46 52 45 51 
220b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220b8     46 52 45 51 
220bc     46 52 45 51 
220c0     46 52 45 51 
220c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220c8     46 52 45 51 
220cc     46 52 45 51 
220d0     46 52 45 51 
220d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220d8     46 52 45 51 
220dc     46 52 45 51 
220e0     46 52 45 51 
220e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220e8     46 52 45 51 
220ec     46 52 45 51 
220f0     46 52 45 51 
220f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220f8     46 52 45 51 
220fc     46 52 45 51 
22100     46 52 45 51 
22104     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22108     46 52 45 51 
2210c     46 52 45 51 
22110     46 52 45 51 
22114     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22118     46 52 45 51 
2211c     46 52 45 51 
22120     46 52 45 51 
22124     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22128     46 52 45 51 
2212c     46 52 45 51 
22130     46 52 45 51 
22134     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22138     46 52 45 51 
2213c     46 52 45 51 
22140     46 52 45 51 
22144     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22148     46 52 45 51 
2214c     46 52 45 51 
22150     46 52 45 51 
22154     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22158     46 52 45 51 
2215c     46 52 45 51 
22160     46 52 45 51 
22164     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22168     46 52 45 51 
2216c     46 52 45 51 
22170     46 52 45 51 
22174     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22178     46 52 45 51 
2217c     46 52 45 51 
22180     46 52 45 51 
22184     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22188     46 52 45 51 
2218c     46 52 45 51 
22190     46 52 45 51 
22194     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22198     46 52 45 51 
2219c     46 52 45 51 
221a0     46 52 45 51 
221a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221a8     46 52 45 51 
221ac     46 52 45 51 
221b0     46 52 45 51 
221b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221b8     46 52 45 51 
221bc     46 52 45 51 
221c0     46 52 45 51 
221c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221c8     46 52 45 51 
221cc     46 52 45 51 
221d0     46 52 45 51 
221d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221d8     46 52 45 51 
221dc     46 52 45 51 
221e0     46 52 45 51 
221e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221e8     46 52 45 51 
221ec     46 52 45 51 
221f0     46 52 45 51 
221f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221f8     46 52 45 51 
221fc     46 52 45 51 
22200     46 52 45 51 
22204     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22208     46 52 45 51 
2220c     46 52 45 51 
22210     46 52 45 51 
22214     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22218     46 52 45 51 
2221c     46 52 45 51 
22220     46 52 45 51 
22224     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22228     46 52 45 51 
2222c     46 52 45 51 
22230     46 52 45 51 
22234     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22238     46 52 45 51 
2223c     46 52 45 51 
22240     46 52 45 51 
22244     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22248     46 52 45 51 
2224c     46 52 45 51 
22250     46 52 45 51 
22254     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22258     46 52 45 51 
2225c     46 52 45 51 
22260     46 52 45 51 
22264     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22268     46 52 45 51 
2226c     46 52 45 51 
22270     46 52 45 51 
22274     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22278     46 52 45 51 
2227c     46 52 45 51 
22280     46 52 45 51 
22284     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22288     46 52 45 51 
2228c     46 52 45 51 
22290     46 52 45 51 
22294     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22298     46 52 45 51 
2229c     46 52 45 51 
222a0     46 52 45 51 
222a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222a8     46 52 45 51 
222ac     46 52 45 51 
222b0     46 52 45 51 
222b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222b8     46 52 45 51 
222bc     46 52 45 51 
222c0     46 52 45 51 
222c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222c8     46 52 45 51 
222cc     46 52 45 51 
222d0     46 52 45 51 
222d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222d8     46 52 45 51 
222dc     46 52 45 51 
222e0     46 52 45 51 
222e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222e8     46 52 45 51 
222ec     46 52 45 51 
222f0     46 52 45 51 
222f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222f8     46 52 45 51 
222fc     46 52 45 51 
22300     46 52 45 51 
22304     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22308     46 52 45 51 
2230c     46 52 45 51 
22310     46 52 45 51 
22314     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22318     46 52 45 51 
2231c     46 52 45 51 
22320     46 52 45 51 
22324     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22328     46 52 45 51 
2232c     46 52 45 51 
22330     46 52 45 51 
22334     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22338     46 52 45 51 
2233c     46 52 45 51 
22340     46 52 45 51 
22344     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22348     46 52 45 51 
2234c     46 52 45 51 
22350     46 52 45 51 
22354     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22358                 | 
22358     00 00 00 00 
2235c     18 00 00 00 
22360     31 00 00 00 
22364     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
22368     61 00 00 00 
2236c     78 00 00 00 
22370     8D 00 00 00 
22374     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
22378     B4 00 00 00 
2237c     C5 00 00 00 
22380     D4 00 00 00 
22384     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
22388     EB 00 00 00 
2238c     F4 00 00 00 
22390     FA 00 00 00 
22394     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
22398     FF 00 00 00 
2239c     FD 00 00 00 
223a0     FA 00 00 00 
223a4     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
223a8     EB 00 00 00 
223ac     E0 00 00 00 
223b0     D4 00 00 00 
223b4     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
223b8     B4 00 00 00 
223bc     A1 00 00 00 
223c0     8D 00 00 00 
223c4     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
223c8     61 00 00 00 
223cc     4A 00 00 00 
223d0     31 00 00 00 
223d4     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
223d8     00 00 00 00 
223dc     E8 FF FF FF 
223e0     CF FF FF FF 
223e4     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
223e8     9F FF FF FF 
223ec     88 FF FF FF 
223f0     73 FF FF FF 
223f4     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
223f8     4C FF FF FF 
223fc     3B FF FF FF 
22400     2C FF FF FF 
22404     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
22408     15 FF FF FF 
2240c     0C FF FF FF 
22410     06 FF FF FF 
22414     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
22418     01 FF FF FF 
2241c     03 FF FF FF 
22420     06 FF FF FF 
22424     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
22428     15 FF FF FF 
2242c     20 FF FF FF 
22430     2C FF FF FF 
22434     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
22438     4C FF FF FF 
2243c     5F FF FF FF 
22440     73 FF FF FF 
22444     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
22448     9F FF FF FF 
2244c     B6 FF FF FF 
22450     CF FF FF FF 
22454     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
22458                 | 
22458     58 03 28 03 
2245c     FA 02 D0 02 
22460     A6 02 80 02 
22464     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
22468     1A 02 FC 01 
2246c     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
22470     AC 01 94 01 
22474     7D 01 68 01 
22478     53 01 40 01 
2247c     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
22480     0D 01 FE 00 
22484     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
22488     D6 00 CA 00 
2248c     BE 00 B4 00 
22490     AA 00 A0 00 
22494     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
22498     87 00 7F 00 
2249c     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
224a0     6B 00 22 03 
224a4     F5 02 CB 02 
224a8     A2 02 7D 02 
224ac     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
224b0     17 02 F9 01 
224b4     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
224b8     A9 01 91 01 
224bc     7B 01 65 01 
224c0     51 01 3E 01 
224c4     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
224c8     0C 01 FD 00 
224cc     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
224d0     D5 00 C9 00 
224d4     BD 00 B3 00 
224d8     A9 00 9F 00 
224dc     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
224e0     86 00 7E 00 
224e4     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
224e8     4C 03 1C 03 
224ec     F0 02 C5 02 
224f0     9E 02 78 02 
224f4     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
224f8     14 02 F6 01 
224fc     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
22500     A6 01 8E 01 
22504     78 01 63 01 
22508     4F 01 3C 01 
2250c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
22510     0A 01 FB 00 
22514     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
22518     D3 00 C7 00 
2251c     BC 00 B1 00 
22520     A7 00 9E 00 
22524     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
22528     85 00 7D 00 
2252c     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
22530     46 03 17 03 
22534     EA 02 C0 02 
22538     99 02 74 02 
2253c     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
22540     10 02 F2 01 
22544     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
22548     A3 01 8B 01 
2254c     75 01 60 01 
22550     4C 01 3A 01 
22554     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
22558     08 01 F9 00 
2255c     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
22560     D1 00 C6 00 
22564     BB 00 B0 00 
22568     A6 00 9D 00 
2256c     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
22570     84 00 7D 00 
22574     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
22578     40 03 11 03 
2257c     E5 02 BB 02 
22580     94 02 6F 02 
22584     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
22588     0C 02 EF 01 
2258c     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
22590     A0 01 88 01 
22594     72 01 5E 01 
22598     4A 01 38 01 
2259c     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
225a0     06 01 F7 00 
225a4     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
225a8     D0 00 C4 00 
225ac     B9 00 AF 00 
225b0     A5 00 9C 00 
225b4     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
225b8     83 00 7C 00 
225bc     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
225c0     3A 03 0B 03 
225c4     E0 02 B6 02 
225c8     8F 02 6B 02 
225cc     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
225d0     08 02 EB 01 
225d4     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
225d8     9D 01 86 01 
225dc     70 01 5B 01 
225e0     48 01 35 01 
225e4     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
225e8     04 01 F5 00 
225ec     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
225f0     CE 00 C3 00 
225f4     B8 00 AE 00 
225f8     A4 00 9B 00 
225fc     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
22600     82 00 7B 00 
22604     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
22608     34 03 06 03 
2260c     DA 02 B1 02 
22610     8B 02 66 02 
22614     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
22618     04 02 E7 01 
2261c     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
22620     9A 01 83 01 
22624     6D 01 59 01 
22628     45 01 33 01 
2262c     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
22630     02 01 F4 00 
22634     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
22638     CD 00 C1 00 
2263c     B7 00 AC 00 
22640     A3 00 9A 00 
22644     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
22648     81 00 7A 00 
2264c     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
22650     2E 03 00 03 
22654     D5 02 AC 02 
22658     86 02 62 02 
2265c     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
22660     01 02 E4 01 
22664     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
22668     97 01 80 01 
2266c     6B 01 56 01 
22670     43 01 31 01 
22674     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
22678     00 01 F2 00 
2267c     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
22680     CC 00 C0 00 
22684     B5 00 AB 00 
22688     A1 00 98 00 
2268c     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
22690     80 00 79 00 
22694     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
22698     8B 03 58 03 
2269c     28 03 FA 02 
226a0     D0 02 A6 02 
226a4     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
226a8     3A 02 1A 02 
226ac     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
226b0     C5 01 AC 01 
226b4     94 01 7D 01 
226b8     68 01 53 01 
226bc     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
226c0     1D 01 0D 01 
226c4     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
226c8     E2 00 D6 00 
226cc     CA 00 BE 00 
226d0     B4 00 AA 00 
226d4     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
226d8     8F 00 87 00 
226dc     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
226e0     84 03 52 03 
226e4     22 03 F5 02 
226e8     CB 02 A3 02 
226ec     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
226f0     37 02 17 02 
226f4     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
226f8     C2 01 A9 01 
226fc     91 01 7B 01 
22700     65 01 51 01 
22704     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
22708     1C 01 0C 01 
2270c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
22710     E1 00 D4 00 
22714     C8 00 BD 00 
22718     B3 00 A9 00 
2271c     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
22720     8E 00 86 00 
22724     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
22728     7E 03 4C 03 
2272c     1C 03 F0 02 
22730     C5 02 9E 02 
22734     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
22738     33 02 14 02 
2273c     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
22740     BF 01 A6 01 
22744     8E 01 78 01 
22748     63 01 4F 01 
2274c     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
22750     1A 01 0A 01 
22754     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
22758     DF 00 D3 00 
2275c     C7 00 BC 00 
22760     B1 00 A7 00 
22764     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
22768     8D 00 85 00 
2276c     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
22770     77 03 46 03 
22774     17 03 EA 02 
22778     C0 02 99 02 
2277c     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
22780     2F 02 10 02 
22784     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
22788     BC 01 A3 01 
2278c     8B 01 75 01 
22790     60 01 4C 01 
22794     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
22798     18 01 08 01 
2279c     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
227a0     DE 00 D1 00 
227a4     C6 00 BB 00 
227a8     B0 00 A6 00 
227ac     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
227b0     8C 00 84 00 
227b4     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
227b8     71 03 40 03 
227bc     11 03 E5 02 
227c0     BB 02 94 02 
227c4     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
227c8     2B 02 0C 02 
227cc     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
227d0     B9 01 A0 01 
227d4     88 01 72 01 
227d8     5E 01 4A 01 
227dc     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
227e0     16 01 06 01 
227e4     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
227e8     DC 00 D0 00 
227ec     C4 00 B9 00 
227f0     AF 00 A5 00 
227f4     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
227f8     8B 00 83 00 
227fc     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
22800     6B 03 3A 03 
22804     0B 03 E0 02 
22808     B6 02 8F 02 
2280c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
22810     27 02 08 02 
22814     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
22818     B5 01 9D 01 
2281c     86 01 70 01 
22820     5B 01 48 01 
22824     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
22828     14 01 04 01 
2282c     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
22830     DB 00 CE 00 
22834     C3 00 B8 00 
22838     AE 00 A4 00 
2283c     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
22840     8A 00 82 00 
22844     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
22848     64 03 34 03 
2284c     06 03 DA 02 
22850     B1 02 8B 02 
22854     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
22858     23 02 04 02 
2285c     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
22860     B2 01 9A 01 
22864     83 01 6D 01 
22868     59 01 45 01 
2286c     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
22870     12 01 02 01 
22874     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
22878     D9 00 CD 00 
2287c     C1 00 B7 00 
22880     AC 00 A3 00 
22884     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
22888     89 00 81 00 
2288c     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
22890     5E 03 2E 03 
22894     00 03 D5 02 
22898     AC 02 86 02 
2289c     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
228a0     1F 02 01 02 
228a4     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
228a8     AF 01 97 01 
228ac     80 01 6B 01 
228b0     56 01 43 01 
228b4     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
228b8     10 01 00 01 
228bc     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
228c0     D8 00 CB 00 
228c4     C0 00 B5 00 
228c8     AB 00 A1 00 
228cc     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
228d0     88 00 80 00 
228d4     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
228d8                 | 	alignl
228d8                 | _audio019_spin2_dat_
228d8                 | 
228d8                 | audio       org     0
228d8     00 F2 07 F6 | 			mov     ptrb,#0
228dc     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
228e0     0E C8 1C FC |             wxpin   #100,#left
228e4     0F 7A 05 FC |             wrpin   dac,#right
228e8     0F C8 1C FC |             wxpin   #100,#right
228ec     41 9C 64 FD |             dirh    #left addpins 1
228f0     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
228f4     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
228f8     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
228fc                 |             
228fc                 | '---------------------------------------------------------------------------------        
228fc                 | '----------------- The main loop -------------------------------------------------
228fc                 | '---------------------------------------------------------------------------------
228fc                 | 
228fc     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
22900     10 00 90 CD |       if_c  jmp     #loop1
22904                 |   
22904     09 4A 05 F6 |             mov     cn,#9
22908     81 4A 8D F9 | p402        altd    cn,#a21000000
2290c     80 00 80 F1 |             sub     0-0,a20000000
22910     FD 4B 6D FB |             djnz    cn,#p402
22914                 |     
22914     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
22918     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
2291c     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
22920     01 4A 05 C6 |     if_c    mov     cn,#1
22924     85 4C 39 F3 |             fle     ct,time3 wcz
22928     02 4A 05 C6 |     if_c    mov     cn,#2     
2292c     86 4C 39 F3 |             fle     ct,time4 wcz
22930     03 4A 05 C6 |     if_c    mov     cn,#3
22934     87 4C 39 F3 |             fle     ct,time5 wcz
22938     04 4A 05 C6 |     if_c    mov     cn,#4
2293c     88 4C 39 F3 |             fle     ct,time6 wcz
22940     05 4A 05 C6 |     if_c    mov     cn,#5
22944     89 4C 39 F3 |             fle     ct,time7 wcz
22948     06 4A 05 C6 |     if_c    mov     cn,#6
2294c     8A 4C 39 F3 |             fle     ct,time8 wcz
22950     07 4A 05 C6 |     if_c    mov     cn,#7
22954                 | 
22954                 | 
22954                 | '----------------------------------------------------------------------------------
22954                 | '------------- Compute channel samples --------------------------------------------
22954                 | '----------------------------------------------------------------------------------
22954                 | 
22954                 | 
22954     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
22958     05 20 65 F0 |             shl     channeladd,#5
2295c     90 F0 03 F1 |             add     ptra,channeladd
22960                 | 
22960     28 0E 64 FD |             setq    #7               
22964     00 31 05 FB |             rdlong  pointer0,ptra
22968                 |             
22968     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
2296c     9D 44 31 F9 |     	    getword avol0,volpan0,#0
22970     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
22974     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
22978                 | 
22978     83 4A 95 F9 |             alts    cn, #time1
2297c     00 4E 01 F6 |             mov     dt0,0-0   
22980     82 4E 81 F1 |             sub     dt0,time0
22984                 | 
22984     83 4A 8D F9 |             altd    cn, #time1
22988     A0 00 00 F1 |             add     0-0,afreq0  	
2298c                 | 
2298c     A1 30 01 F1 |             add     pointer0,askip0
22990     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
22994     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
22998     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
2299c     98 24 01 F6 |             mov     qq,pointer0
229a0     9A 24 01 F1 |             add     qq,sstart0
229a4                 | 
229a4     1F 34 0D F4 |             testb   sstart0,#31 wz
229a8                 | 
229a8     92 26 C1 5A |     if_nz   rdbyte  spl,qq
229ac     08 26 65 50 |     if_nz   shl     spl,#8
229b0     92 26 E1 AA |     if_z    rdword  spl,qq
229b4                 | 
229b4     A2 26 31 FA |             scas    spl,avol0
229b8     00 26 01 F6 |             mov     spl,0-0
229bc                 |  
229bc     A3 26 31 FA |             scas    spl,apan0
229c0     00 50 01 F6 |             mov     ls0,0-0
229c4                 |  
229c4     AD 4A 8D F9 |             altd    cn,#ls1
229c8     A8 00 00 F6 |             mov     0-0,ls0
229cc                 |              
229cc     20 00 00 FF 
229d0     00 24 05 F6 |             mov     qq,##16384
229d4     A3 24 81 F1 |             sub     qq,apan0
229d8     92 26 31 FA |             scas    spl,qq
229dc     00 52 01 F6 |             mov     rs0, 0-0
229e0                 | 
229e0     B5 4A 8D F9 |             altd    cn,#rs1
229e4     A9 00 00 F6 |             mov     0-0,rs0
229e8                 | 
229e8     A9 32 29 F9 |             setword sample0,rs0,#1
229ec     A8 32 21 F9 |             setword sample0,ls0,#0
229f0                 |             
229f0                 | 
229f0     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
229f4     00 30 05 A6 |     if_z    mov    pointer0, #0  
229f8     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
229fc     28 02 64 FD | p403        setq #1
22a00                 |      
22a00     00 31 65 FC |             wrlong  pointer0,ptra
22a04     90 F0 83 F1 |             sub     ptra, channeladd
22a08     00 00 90 FD |             jmp     #p101
22a0c                 |                        
22a0c                 |             
22a0c                 |           
22a0c                 |             
22a0c                 | '------------------------ Channels end here --------------------       
22a0c                 | 
22a0c                 | ' Now add all channels and put the sample to the buffer    
22a0c                 | 
22a0c                 | 
22a0c     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
22a10     01 22 85 A1 |     if_z    sub     front,#1         ' 
22a14     FF 23 05 A5 |     if_z    and     front,#511     
22a18                 |            
22a18                 |     
22a18     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
22a1c     00 56 05 F6 |             mov     ls,#0
22a20     B5 58 01 F1 |             add     rs,rs1
22a24     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
22a28     B7 58 01 F1 |             add     rs,rs3
22a2c     B8 58 01 F1 |             add     rs,rs4
22a30     B9 58 01 F1 |             add     rs,rs5
22a34     BA 58 01 F1 |             add     rs,rs6
22a38     BB 58 01 F1 |             add     rs,rs7
22a3c     BC 58 01 F1 |             add     rs,rs8
22a40                 | 
22a40                 |            
22a40     AD 56 01 F1 |             add     ls,ls1
22a44     AE 56 01 F1 |             add     ls,ls2
22a48     AF 56 01 F1 |             add     ls,ls3
22a4c     B0 56 01 F1 |             add     ls,ls4
22a50     B1 56 01 F1 |             add     ls,ls5
22a54     B2 56 01 F1 |             add     ls,ls6
22a58     B3 56 01 F1 |             add     ls,ls7
22a5c     B4 56 01 F1 |             add     ls,ls8
22a60                 | 
22a60                 |  		
22a60     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
22a64     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
22a68                 | 		    
22a68     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
22a6c     AC 16 01 F6 |             mov newsample, rs
22a70                 | 
22a70     82 48 01 F6 |             mov     oldt0,time0      ' update global time
22a74     A7 04 01 F1 |             add     time0,dt0    
22a78                 | 
22a78                 |             
22a78                 |  
22a78                 |                                      ' now push dt0 samples to the buffer
22a78     00 4E 0D F2 |             cmp      dt0,#0 wz
22a7c     94 FE 9F AD |     if_z    jmp      #loop1
22a80     A7 18 01 F6 |             mov      t1,dt0
22a84                 |   
22a84     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
22a88     01 1A 85 F1 |             sub     t2,#1
22a8c     FF 1B 05 F5 |             and     t2,#511
22a90     91 1A 19 F2 |             cmp     t2,front wcz
22a94     EC FF 9F AD |     if_e    jmp     #p301    
22a98                 |     
22a98     91 16 31 FC |             wrlut   newsample, front
22a9c     01 22 05 F1 |             add     front,#1
22aa0     FF 23 05 F5 |             and     front,#511
22aa4     F7 19 6D FB |             djnz    t1,#p301
22aa8                 |             
22aa8     50 FE 9F FD |             jmp     #loop            'loop
22aac                 | 
22aac                 | '-------------------------------------------------------------------------
22aac                 | '------------------ This is the end of the main loop ---------------------
22aac                 | '-------------------------------------------------------------------------
22aac                 | 
22aac                 | '--------------------------------------------------------------------------
22aac                 | '------ Interrupt service -------------------------------------------------
22aac                 | '------ Output the sample, get the next one if exists ---------------------
22aac                 | '--------------------------------------------------------------------------
22aac                 | 
22aac     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
22ab0     0F 2A 25 FC |             wypin   rsample,#right       '4
22ab4                 |            
22ab4     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
22ab8     F5 FF 3B AB |     if_e    reti1                        '8/10
22abc                 | 
22abc     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
22ac0     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
22ac4     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
22ac8     F5 FF 3B FB |             reti1                        '17/19 
22acc                 |           
22acc                 | '---------------------------------------------------------------------------
22acc                 | '-------- End of interrupt -------------------------------------------------
22acc                 | '---------------------------------------------------------------------------    
22acc                 | 
22acc                 | 
22acc                 | '---------------------------------------------------------------------------
22acc                 | '------- Variables ---------------------------------------------------------
22acc                 | '---------------------------------------------------------------------------
22acc                 | 
22acc                 | ' constants
22acc                 | 
22acc     00 00 00 00 | hp long 0
22ad0     00 00 00 00 | lp long 0
22ad4     00 00 00 00 | bp long 0
22ad8     00 00 00 10 | a20000000   long $10000000
22adc     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
22ae0                 | 
22ae0                 | ' Time variables
22ae0                 | 
22ae0     00 00 00 00 | time0       long 0    ' Global sample computing time
22ae4     01 00 00 00 | time1       long 1    ' Local channels time
22ae8     02 00 00 00 | time2       long 2
22aec     03 00 00 00 | time3       long 3
22af0     04 00 00 00 | time4       long 4
22af4     05 00 00 00 | time5       long 5
22af8     06 00 00 00 | time6       long 6
22afc     07 00 00 00 | time7       long 7
22b00     08 00 00 00 | time8       long 8
22b04                 | 
22b04                 | 
22b04                 | 
22b04     00 00 00 00 | newsample long 0
22b08                 | '
22b08     00 00 00 00 | t1 long 0
22b0c     00 00 00 00 | t2 long 0
22b10                 | '
22b10     00 00 00 00 | nrsample long 0
22b14     00 00 00 00 | nlsample long 0
22b18                 | '
22b18     00 00 00 00 | channeladd long 0
22b1c                 | 
22b1c                 | 
22b1c     00 00 00 00 | front       long 0
22b20                 | 
22b20                 | ' temporary variables 
22b20                 | '
22b20     00 00 00 00 | qq          long 0
22b24     00 00 00 00 | spl         long 0
22b28                 | 
22b28                 | ' circular buffer in LUT
22b28                 | 
22b28                 | 
22b28                 | '
22b28                 | 
22b28                 | ' Interrupt ISR variables
22b28                 | 
22b28                 | 
22b28     00 00 00 00 | lsample     long 0
22b2c     00 00 00 00 | rsample     long 0
22b30     00 00 00 00 | lsnext      long 0
22b34     00 00 00 00 | rsnext      long 0 
22b38                 | 
22b38                 | 
22b38     00 00 00 00 | pointer0    long 0
22b3c     00 00 00 00 | sample0     long 0
22b40     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
22b44     00 00 00 00 | lstart0     long 0
22b48     00 00 00 00 | lend0       long 0
22b4c     00 00 00 00 | volpan0     long 0
22b50     00 00 00 00 | freqskip0   long 0
22b54     00 00 00 00 | dummy0      long 0
22b58                 | 
22b58     00 00 00 00 | afreq0      long 0
22b5c     00 00 00 00 | askip0      long 0
22b60     00 00 00 00 | avol0       long 0
22b64     00 00 00 00 | apan0       long 0
22b68                 | 
22b68     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
22b6c     00 00 00 00 | cn          long 0
22b70     00 00 00 00 | ct          long 0
22b74     00 00 00 00 | dt0         long 0
22b78                 | 
22b78                 | ' Samples
22b78     00 00 00 00 | ls0         long 0
22b7c     00 00 00 00 | rs0         long 0
22b80     00 00 00 00 | channel     long 0
22b84     00 00 00 00 | ls          long 0    ' Global sample variable
22b88     00 00 00 00 | rs          long 0
22b8c                 | 
22b8c     00 00 00 00 | ls1         long 0    ' Channel samples
22b90     00 00 00 00 | ls2         long 0
22b94     00 00 00 00 | ls3         long 0
22b98     00 00 00 00 | ls4         long 0
22b9c     00 00 00 00 | ls5         long 0
22ba0     00 00 00 00 | ls6         long 0
22ba4     00 00 00 00 | ls7         long 0
22ba8     00 00 00 00 | ls8         long 0
22bac     00 00 00 00 | rs1         long 0
22bb0     00 00 00 00 | rs2         long 0
22bb4     00 00 00 00 | rs3         long 0
22bb8     00 00 00 00 | rs4         long 0
22bbc     00 00 00 00 | rs5         long 0
22bc0     00 00 00 00 | rs6         long 0
22bc4     00 00 00 00 | rs7         long 0
22bc8     00 00 00 00 | rs8         long 0
22bcc                 | 
22bcc     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
22bd0                 | 
22bd0     00 00 00 00 
22bd4     00 00 00 00 | null  			long 	0,0           ' for channel reset
22bd8     73 32 00 04 
22bdc     00 00 10 00 
22be0     00 00 00 00 
22be4     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
22be8     00 00 C9 00 
22bec     92 01 5B 02 
22bf0     24 03 ED 03 
22bf4     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
22bf8     48 06 11 07 
22bfc     D9 07 A2 08 
22c00     6A 09 33 0A 
22c04     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
22c08     8C 0C 54 0D 
22c0c     1C 0E E3 0E 
22c10     AB 0F 72 10 
22c14     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
22c18     C8 12 8F 13 
22c1c     55 14 1C 15 
22c20     E2 15 A8 16 
22c24     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
22c28     F9 18 BE 19 
22c2c     82 1A 47 1B 
22c30     0B 1C CF 1C 
22c34     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
22c38     1A 1F DD 1F 
22c3c     9F 20 61 21 
22c40     23 22 E5 22 
22c44     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
22c48     28 25 E8 25 
22c4c     A8 26 67 27 
22c50     26 28 E5 28 
22c54     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
22c58     1F 2B DC 2B 
22c5c     99 2C 55 2D 
22c60     11 2E CC 2E 
22c64     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
22c68     FB 30 B5 31 
22c6c     6E 32 26 33 
22c70     DF 33 96 34 
22c74     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
22c78     BA 36 6F 37 
22c7c     24 38 D9 38 
22c80     8C 39 40 3A 
22c84     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
22c88     56 3C 07 3D 
22c8c     B8 3D 68 3E 
22c90     17 3F C5 3F 
22c94     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
22c98     CE 41 7A 42 
22c9c     25 43 D0 43 
22ca0     7A 44 24 45 
22ca4     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
22ca8     1C 47 C3 47 
22cac     69 48 0F 49 
22cb0     B4 49 58 4A 
22cb4     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
22cb8     3F 4C E0 4C 
22cbc     81 4D 20 4E 
22cc0     BF 4E 5D 4F 
22cc4     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
22cc8     33 51 CE 51 
22ccc     68 52 02 53 
22cd0     9B 53 32 54 
22cd4     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
22cd8     F5 55 8A 56 
22cdc     1D 57 B0 57 
22ce0     42 58 D3 58 
22ce4     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
22ce8     82 5A 0F 5B 
22cec     9C 5B 28 5C 
22cf0     B3 5C 3E 5D 
22cf4     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
22cf8     D7 5E 5D 5F 
22cfc     E3 5F 68 60 
22d00     EB 60 6E 61 
22d04     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
22d08     F1 62 70 63 
22d0c     EE 63 6C 64 
22d10     E8 64 63 65 
22d14     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
22d18     CF 66 46 67 
22d1c     BC 67 32 68 
22d20     A6 68 19 69 
22d24     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
22d28     6D 6A DC 6A 
22d2c     4A 6B B7 6B 
22d30     23 6C 8E 6C 
22d34     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
22d38     C9 6D 30 6E 
22d3c     96 6E FB 6E 
22d40     5E 6F C1 6F 
22d44     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
22d48     E2 70 40 71 
22d4c     9D 71 F9 71 
22d50     54 72 AE 72 
22d54     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
22d58     B5 73 0A 74 
22d5c     5F 74 B2 74 
22d60     04 75 55 75 
22d64     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
22d68     41 76 8D 76 
22d6c     D8 76 22 77 
22d70     6B 77 B3 77 
22d74     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
22d78     84 78 C7 78 
22d7c     09 79 4A 79 
22d80     89 79 C8 79 
22d84     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
22d88     7C 7A B6 7A 
22d8c     EE 7A 26 7B 
22d90     5C 7B 91 7B 
22d94     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
22d98     29 7C 59 7C 
22d9c     88 7C B6 7C 
22da0     E3 7C 0E 7D 
22da4     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
22da8     89 7D B0 7D 
22dac     D5 7D FA 7D 
22db0     1D 7E 3E 7E 
22db4     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
22db8     9C 7E B9 7E 
22dbc     D5 7E EF 7E 
22dc0     09 7F 21 7F 
22dc4     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
22dc8     61 7F 74 7F 
22dcc     86 7F 97 7F 
22dd0     A6 7F B4 7F 
22dd4     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
22dd8     D8 7F E1 7F 
22ddc     E9 7F F0 7F 
22de0     F5 7F F9 7F 
22de4     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
22de8     FF 7F FE 7F 
22dec     FD 7F F9 7F 
22df0     F5 7F F0 7F 
22df4     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
22df8     D8 7F CD 7F 
22dfc     C1 7F B4 7F 
22e00     A6 7F 97 7F 
22e04     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
22e08     61 7F 4D 7F 
22e0c     37 7F 21 7F 
22e10     09 7F EF 7E 
22e14     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
22e18     9C 7E 7E 7E 
22e1c     5F 7E 3E 7E 
22e20     1D 7E FA 7D 
22e24     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
22e28     89 7D 62 7D 
22e2c     39 7D 0E 7D 
22e30     E3 7C B6 7C 
22e34     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
22e38     29 7C F8 7B 
22e3c     C5 7B 91 7B 
22e40     5C 7B 26 7B 
22e44     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
22e48     7C 7A 41 7A 
22e4c     05 7A C8 79 
22e50     89 79 4A 79 
22e54     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
22e58     84 78 3F 78 
22e5c     FA 77 B3 77 
22e60     6B 77 22 77 
22e64     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
22e68     41 76 F3 75 
22e6c     A5 75 55 75 
22e70     04 75 B2 74 
22e74     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
22e78     B5 73 5E 73 
22e7c     07 73 AE 72 
22e80     54 72 F9 71 
22e84     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
22e88     E2 70 83 70 
22e8c     22 70 C1 6F 
22e90     5E 6F FB 6E 
22e94     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
22e98     C9 6D 61 6D 
22e9c     F8 6C 8E 6C 
22ea0     23 6C B7 6B 
22ea4     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
22ea8     6D 6A FD 69 
22eac     8B 69 19 69 
22eb0     A6 68 32 68 
22eb4     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
22eb8     CF 66 56 66 
22ebc     DD 65 63 65 
22ec0     E8 64 6C 64 
22ec4     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
22ec8     F1 62 71 62 
22ecc     F0 61 6E 61 
22ed0     EB 60 68 60 
22ed4     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
22ed8     D7 5E 4F 5E 
22edc     C7 5D 3E 5D 
22ee0     B3 5C 28 5C 
22ee4     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
22ee8     82 5A F3 59 
22eec     64 59 D3 58 
22ef0     42 58 B0 57 
22ef4     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
22ef8     F5 55 60 55 
22efc     C9 54 32 54 
22f00     9B 53 02 53 
22f04     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
22f08     33 51 97 50 
22f0c     FB 4F 5D 4F 
22f10     BF 4E 20 4E 
22f14     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
22f18     3F 4C 9D 4B 
22f1c     FB 4A 58 4A 
22f20     B4 49 0F 49 
22f24     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
22f28     1C 47 75 46 
22f2c     CD 45 24 45 
22f30     7A 44 D0 43 
22f34     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
22f38     CE 41 21 41 
22f3c     73 40 C5 3F 
22f40     17 3F 68 3E 
22f44     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
22f48     56 3C A5 3B 
22f4c     F2 3A 40 3A 
22f50     8C 39 D9 38 
22f54     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
22f58     BA 36 04 36 
22f5c     4D 35 96 34 
22f60     DF 33 26 33 
22f64     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
22f68     FB 30 41 30 
22f6c     87 2F CC 2E 
22f70     11 2E 55 2D 
22f74     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
22f78     1F 2B 61 2A 
22f7c     A3 29 E5 28 
22f80     26 28 67 27 
22f84     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
22f88     28 25 67 24 
22f8c     A6 23 E5 22 
22f90     23 22 61 21 
22f94     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
22f98     1A 1F 57 1E 
22f9c     93 1D CF 1C 
22fa0     0B 1C 47 1B 
22fa4     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
22fa8     F9 18 33 18 
22fac     6E 17 A8 16 
22fb0     E2 15 1C 15 
22fb4     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
22fb8     C8 12 01 12 
22fbc     3A 11 72 10 
22fc0     AB 0F E3 0E 
22fc4     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
22fc8     8C 0C C4 0B 
22fcc     FB 0A 33 0A 
22fd0     6A 09 A2 08 
22fd4     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
22fd8     48 06 7F 05 
22fdc     B6 04 ED 03 
22fe0     24 03 5B 02 
22fe4     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
22fe8     00 00 37 FF 
22fec     6E FE A5 FD 
22ff0     DC FC 13 FC 
22ff4     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
22ff8     B8 F9 EF F8 
22ffc     27 F8 5E F7 
23000     96 F6 CD F5 
23004     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
23008     74 F3 AC F2 
2300c     E4 F1 1D F1 
23010     55 F0 8E EF 
23014     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
23018     38 ED 71 EC 
2301c     AB EB E4 EA 
23020     1E EA 58 E9 
23024     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
23028     07 E7 42 E6 
2302c     7E E5 B9 E4 
23030     F5 E3 31 E3 
23034     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
23038     E6 E0 23 E0 
2303c     61 DF 9F DE 
23040     DD DD 1B DD 
23044     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
23048     D8 DA 18 DA 
2304c     58 D9 99 D8 
23050     DA D7 1B D7 
23054     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
23058     E1 D4 24 D4 
2305c     67 D3 AB D2 
23060     EF D1 34 D1 
23064     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
23068     05 CF 4B CE 
2306c     92 CD DA CC 
23070     21 CC 6A CB 
23074     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
23078     46 C9 91 C8 
2307c     DC C7 27 C7 
23080     74 C6 C0 C5 
23084     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
23088     AA C3 F9 C2 
2308c     48 C2 98 C1 
23090     E9 C0 3B C0 
23094     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
23098     32 BE 86 BD 
2309c     DB BC 30 BC 
230a0     86 BB DC BA 
230a4     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
230a8     E4 B8 3D B8 
230ac     97 B7 F1 B6 
230b0     4C B6 A8 B5 
230b4     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
230b8     C1 B3 20 B3 
230bc     7F B2 E0 B1 
230c0     41 B1 A3 B0 
230c4     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
230c8     CD AE 32 AE 
230cc     98 AD FE AC 
230d0     65 AC CE AB 
230d4     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
230d8     0B AA 76 A9 
230dc     E3 A8 50 A8 
230e0     BE A7 2D A7 
230e4     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
230e8     7E A5 F1 A4 
230ec     64 A4 D8 A3 
230f0     4D A3 C2 A2 
230f4     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
230f8     29 A1 A3 A0 
230fc     1D A0 98 9F 
23100     15 9F 92 9E 
23104     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
23108     0F 9D 90 9C 
2310c     12 9C 94 9B 
23110     18 9B 9D 9A 
23114     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
23118     31 99 BA 98 
2311c     44 98 CE 97 
23120     5A 97 E7 96 
23124     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
23128     93 95 24 95 
2312c     B6 94 49 94 
23130     DD 93 72 93 
23134     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
23138     37 92 D0 91 
2313c     6A 91 05 91 
23140     A2 90 3F 90 
23144     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
23148     1E 8F C0 8E 
2314c     63 8E 07 8E 
23150     AC 8D 52 8D 
23154     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
23158     4B 8C F6 8B 
2315c     A1 8B 4E 8B 
23160     FC 8A AB 8A 
23164     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
23168     BF 89 73 89 
2316c     28 89 DE 88 
23170     95 88 4D 88 
23174     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
23178     7C 87 39 87 
2317c     F7 86 B6 86 
23180     77 86 38 86 
23184     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
23188     84 85 4A 85 
2318c     12 85 DA 84 
23190     A4 84 6F 84 
23194     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
23198     D7 83 A7 83 
2319c     78 83 4A 83 
231a0     1D 83 F2 82 
231a4     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
231a8     77 82 50 82 
231ac     2B 82 06 82 
231b0     E3 81 C2 81 
231b4     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
231b8     64 81 47 81 
231bc     2B 81 11 81 
231c0     F7 80 DF 80 
231c4     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
231c8     9F 80 8C 80 
231cc     7A 80 69 80 
231d0     5A 80 4C 80 
231d4     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
231d8     28 80 1F 80 
231dc     17 80 10 80 
231e0     0B 80 07 80 
231e4     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
231e8     01 80 02 80 
231ec     03 80 07 80 
231f0     0B 80 10 80 
231f4     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
231f8     28 80 33 80 
231fc     3F 80 4C 80 
23200     5A 80 69 80 
23204     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
23208     9F 80 B3 80 
2320c     C9 80 DF 80 
23210     F7 80 11 81 
23214     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
23218     64 81 82 81 
2321c     A1 81 C2 81 
23220     E3 81 06 82 
23224     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
23228     77 82 9E 82 
2322c     C7 82 F2 82 
23230     1D 83 4A 83 
23234     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
23238     D7 83 08 84 
2323c     3B 84 6F 84 
23240     A4 84 DA 84 
23244     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
23248     84 85 BF 85 
2324c     FB 85 38 86 
23250     77 86 B6 86 
23254     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
23258     7C 87 C1 87 
2325c     06 88 4D 88 
23260     95 88 DE 88 
23264     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
23268     BF 89 0D 8A 
2326c     5B 8A AB 8A 
23270     FC 8A 4E 8B 
23274     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
23278     4B 8C A2 8C 
2327c     F9 8C 52 8D 
23280     AC 8D 07 8E 
23284     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
23288     1E 8F 7D 8F 
2328c     DE 8F 3F 90 
23290     A2 90 05 91 
23294     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
23298     37 92 9F 92 
2329c     08 93 72 93 
232a0     DD 93 49 94 
232a4     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
232a8     93 95 03 96 
232ac     75 96 E7 96 
232b0     5A 97 CE 97 
232b4     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
232b8     31 99 AA 99 
232bc     23 9A 9D 9A 
232c0     18 9B 94 9B 
232c4     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
232c8     0F 9D 8F 9D 
232cc     10 9E 92 9E 
232d0     15 9F 98 9F 
232d4     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
232d8     29 A1 B1 A1 
232dc     39 A2 C2 A2 
232e0     4D A3 D8 A3 
232e4     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
232e8     7E A5 0D A6 
232ec     9C A6 2D A7 
232f0     BE A7 50 A8 
232f4     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
232f8     0B AA A0 AA 
232fc     37 AB CE AB 
23300     65 AC FE AC 
23304     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
23308     CD AE 69 AF 
2330c     05 B0 A3 B0 
23310     41 B1 E0 B1 
23314     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
23318     C1 B3 63 B4 
2331c     05 B5 A8 B5 
23320     4C B6 F1 B6 
23324     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
23328     E4 B8 8B B9 
2332c     33 BA DC BA 
23330     86 BB 30 BC 
23334     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
23338     32 BE DF BE 
2333c     8D BF 3B C0 
23340     E9 C0 98 C1 
23344     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
23348     AA C3 5B C4 
2334c     0E C5 C0 C5 
23350     74 C6 27 C7 
23354     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
23358     46 C9 FC C9 
2335c     B3 CA 6A CB 
23360     21 CC DA CC 
23364     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
23368     05 CF BF CF 
2336c     79 D0 34 D1 
23370     EF D1 AB D2 
23374     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
23378     E1 D4 9F D5 
2337c     5D D6 1B D7 
23380     DA D7 99 D8 
23384     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
23388     D8 DA 99 DB 
2338c     5A DC 1B DD 
23390     DD DD 9F DE 
23394     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
23398     E6 E0 A9 E1 
2339c     6D E2 31 E3 
233a0     F5 E3 B9 E4 
233a4     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
233a8     07 E7 CD E7 
233ac     92 E8 58 E9 
233b0     1E EA E4 EA 
233b4     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
233b8     38 ED FF ED 
233bc     C6 EE 8E EF 
233c0     55 F0 1D F1 
233c4     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
233c8     74 F3 3C F4 
233cc     05 F5 CD F5 
233d0     96 F6 5E F7 
233d4     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
233d8     B8 F9 81 FA 
233dc     4A FB 13 FC 
233e0     DC FC A5 FD 
233e4     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
233e8                 | 	alignl
233e8                 | __system__dat_
233e8     00 00 00 00 
233ec     00 00 00 00 | 	byte	$00[8]
233f0     03 00 00 00 
233f4     00 00 00 00 
233f8     00 00 00 00 
233fc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
23400     00 00 00 00 
      ...             
2385c     00 00 00 00 
23860     00 00 00 00 | 	byte	$00[1124]
23864     05 00 00 00 
23868     00 00 00 00 
2386c     00 00 00 00 
23870     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
23874     3C 3A 02 00 | 	long	@@@__system__dat_ + 1620
23878     44 3A 02 00 | 	long	@@@__system__dat_ + 1628
2387c     00 00 00 00 | 	byte	$00, $00, $00, $00
23880     4C 3A 02 00 | 	long	@@@__system__dat_ + 1636
23884     54 3A 02 00 | 	long	@@@__system__dat_ + 1644
23888     00 00 00 00 
2388c     00 00 00 00 | 	byte	$00[8]
23890     01 00 00 00 
23894     06 00 00 00 
23898     00 00 00 00 
2389c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
238a0     00 00 00 00 | 	byte	$00, $00, $00, $00
238a4     5C 3A 02 00 | 	long	@@@__system__dat_ + 1652
238a8     64 3A 02 00 | 	long	@@@__system__dat_ + 1660
238ac     00 00 00 00 | 	byte	$00, $00, $00, $00
238b0     6C 3A 02 00 | 	long	@@@__system__dat_ + 1668
238b4     74 3A 02 00 | 	long	@@@__system__dat_ + 1676
238b8     00 00 00 00 
238bc     00 00 00 00 | 	byte	$00[8]
238c0     01 00 00 00 
238c4     06 00 00 00 
238c8     00 00 00 00 
238cc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
238d0     00 00 00 00 | 	byte	$00, $00, $00, $00
238d4     7C 3A 02 00 | 	long	@@@__system__dat_ + 1684
238d8     84 3A 02 00 | 	long	@@@__system__dat_ + 1692
238dc     00 00 00 00 | 	byte	$00, $00, $00, $00
238e0     8C 3A 02 00 | 	long	@@@__system__dat_ + 1700
238e4     94 3A 02 00 | 	long	@@@__system__dat_ + 1708
238e8     00 00 00 00 
      ...             
23a38     00 00 00 00 
23a3c     00 00 00 00 | 	byte	$00[344]
23a40     CC 65 00 00 | 	long	@@@__system___tx
23a44     00 00 00 00 | 	byte	$00, $00, $00, $00
23a48     14 66 00 00 | 	long	@@@__system___rx
23a4c     00 00 00 00 | 	byte	$00, $00, $00, $00
23a50     30 84 00 00 | 	long	@@@__system___rxtxioctl_0619
23a54     00 00 00 00 | 	byte	$00, $00, $00, $00
23a58     A8 84 00 00 | 	long	@@@__system____dummy_flush_0620
23a5c     00 00 00 00 | 	byte	$00, $00, $00, $00
23a60     CC 65 00 00 | 	long	@@@__system___tx
23a64     00 00 00 00 | 	byte	$00, $00, $00, $00
23a68     14 66 00 00 | 	long	@@@__system___rx
23a6c     00 00 00 00 | 	byte	$00, $00, $00, $00
23a70     30 84 00 00 | 	long	@@@__system___rxtxioctl_0619
23a74     00 00 00 00 | 	byte	$00, $00, $00, $00
23a78     A8 84 00 00 | 	long	@@@__system____dummy_flush_0620
23a7c     00 00 00 00 | 	byte	$00, $00, $00, $00
23a80     CC 65 00 00 | 	long	@@@__system___tx
23a84     00 00 00 00 | 	byte	$00, $00, $00, $00
23a88     14 66 00 00 | 	long	@@@__system___rx
23a8c     00 00 00 00 | 	byte	$00, $00, $00, $00
23a90     30 84 00 00 | 	long	@@@__system___rxtxioctl_0619
23a94     00 00 00 00 | 	byte	$00, $00, $00, $00
23a98     A8 84 00 00 | 	long	@@@__system____dummy_flush_0620
23a9c                 | 	alignl
23a9c                 | _ff_cc_dat_
23a9c     00 00 00 00 
23aa0     00 00       | 	byte	$00[6]
23aa2     43 55 45 41 
23aa6     41 41 41 43 
23aaa     45 45 45 49 
23aae     49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
23ab2     45 92 92 4F 
23ab6     4F 4F 55 55 
23aba     59 4F 55 4F 
23abe     9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
23ac2     41 49 4F 55 
23ac6     A5 A5 A6 A7 
23aca     A8 A9 AA AB 
23ace     AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
23ad2     B0 B1 B2 B3 
23ad6     B4 41 41 41 
23ada     B8 B9 BA BB 
23ade     BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
23ae2     C0 C1 C2 C3 
23ae6     C4 C5 41 41 
23aea     C8 C9 CA CB 
23aee     CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
23af2     D1 D1 45 45 
23af6     45 49 49 49 
23afa     49 D9 DA DB 
23afe     DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
23b02     4F E1 4F 4F 
23b06     4F 4F E6 E8 
23b0a     E8 55 55 55 
23b0e     59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
23b12     F0 F1 F2 F3 
23b16     F4 F5 F6 F7 
23b1a     F8 F9 FA FB 
23b1e     FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
23b22     01 00 04 00 
23b26     10 00 40 00 
23b2a     00 01 00 02 
23b2e     00 00 01 00 | 	byte	$01, $00, $04, $00, $10, $00, $40, $00, $00, $01, $00, $02, $00, $00, $01, $00
23b32     02 00 04 00 
23b36     08 00 10 00 
23b3a     20 00 00 00 
23b3e     00 00 07 00 | 	byte	$02, $00, $04, $00, $08, $00, $10, $00, $20, $00, $00, $00, $00, $00, $07, $00
23b42     00 00 00 00 
23b46     00 00 00 00 
23b4a     00 00 00 00 
23b4e     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
23b50     90 3B 02 00 | 	long	@@@_ff_cc_dat_ + 244
23b54     98 3B 02 00 | 	long	@@@_ff_cc_dat_ + 252
23b58     A0 3B 02 00 | 	long	@@@_ff_cc_dat_ + 260
23b5c     A8 3B 02 00 | 	long	@@@_ff_cc_dat_ + 268
23b60     B0 3B 02 00 | 	long	@@@_ff_cc_dat_ + 276
23b64     B8 3B 02 00 | 	long	@@@_ff_cc_dat_ + 284
23b68     C0 3B 02 00 | 	long	@@@_ff_cc_dat_ + 292
23b6c     00 00 00 00 | 	byte	$00, $00, $00, $00
23b70     C8 3B 02 00 | 	long	@@@_ff_cc_dat_ + 300
23b74     D0 3B 02 00 | 	long	@@@_ff_cc_dat_ + 308
23b78     D8 3B 02 00 | 	long	@@@_ff_cc_dat_ + 316
23b7c     E0 3B 02 00 | 	long	@@@_ff_cc_dat_ + 324
23b80     E8 3B 02 00 | 	long	@@@_ff_cc_dat_ + 332
23b84     F0 3B 02 00 | 	long	@@@_ff_cc_dat_ + 340
23b88     F8 3B 02 00 | 	long	@@@_ff_cc_dat_ + 348
23b8c     00 3C 02 00 | 	long	@@@_ff_cc_dat_ + 356
23b90     00 00 00 00 | 	byte	$00, $00, $00, $00
23b94     98 E8 00 00 | 	long	@@@_ff_cc_v_open_0548
23b98     00 00 00 00 | 	byte	$00, $00, $00, $00
23b9c     D8 E0 00 00 | 	long	@@@_ff_cc_v_creat_0502
23ba0     00 00 00 00 | 	byte	$00, $00, $00, $00
23ba4     80 E1 00 00 | 	long	@@@_ff_cc_v_close_0505
23ba8     00 00 00 00 | 	byte	$00, $00, $00, $00
23bac     80 E5 00 00 | 	long	@@@_ff_cc_v_read_0530
23bb0     00 00 00 00 | 	byte	$00, $00, $00, $00
23bb4     A8 E6 00 00 | 	long	@@@_ff_cc_v_write_0534
23bb8     00 00 00 00 | 	byte	$00, $00, $00, $00
23bbc     9C E7 00 00 | 	long	@@@_ff_cc_v_lseek_0538
23bc0     00 00 00 00 | 	byte	$00, $00, $00, $00
23bc4     3C E8 00 00 | 	long	@@@_ff_cc_v_ioctl
23bc8     00 00 00 00 | 	byte	$00, $00, $00, $00
23bcc     C4 E1 00 00 | 	long	@@@_ff_cc_v_opendir_0508
23bd0     00 00 00 00 | 	byte	$00, $00, $00, $00
23bd4     44 E2 00 00 | 	long	@@@_ff_cc_v_closedir_0511
23bd8     00 00 00 00 | 	byte	$00, $00, $00, $00
23bdc     88 E2 00 00 | 	long	@@@_ff_cc_v_readdir_0514
23be0     00 00 00 00 | 	byte	$00, $00, $00, $00
23be4     7C E3 00 00 | 	long	@@@_ff_cc_v_stat_0526
23be8     00 00 00 00 | 	byte	$00, $00, $00, $00
23bec     58 E8 00 00 | 	long	@@@_ff_cc_v_mkdir
23bf0     00 00 00 00 | 	byte	$00, $00, $00, $00
23bf4     78 E8 00 00 | 	long	@@@_ff_cc_v_rmdir_0542
23bf8     00 00 00 00 | 	byte	$00, $00, $00, $00
23bfc     68 E8 00 00 | 	long	@@@_ff_cc_v_remove
23c00     00 00 00 00 | 	byte	$00, $00, $00, $00
23c04     88 E8 00 00 | 	long	@@@_ff_cc_v_rename_0544
23c08     00 00 00 00 
23c0c     00 00 00 00 
23c10     00 00 00 00 
23c14     00 00 00 00 | 	byte	$00[16]
23c18     01 00 00 00 | 	byte	$01, $00, $00, $00
23c1c                 | __heap_base
23c1c     00 00 00 00 
      ...             
24c1c     00 00 00 00 
24c20     00 00 00 00 | 	long	0[1026]
24c24                 | objmem
24c24     00 00 00 00 
      ...             
25dcc     00 00 00 00 
25dd0     00 00 00 00 | 	long	0[1132]
25dd4                 | stackspace
25dd4     00 00 00 00 | 	long	0[1]
25dd8 11b             | 	org	COG_BSS_START
25dd8 11b             | _var01
25dd8 11b             | 	res	1
25dd8 11c             | _var02
25dd8 11c             | 	res	1
25dd8 11d             | _var03
25dd8 11d             | 	res	1
25dd8 11e             | _var04
25dd8 11e             | 	res	1
25dd8 11f             | _var05
25dd8 11f             | 	res	1
25dd8 120             | _var06
25dd8 120             | 	res	1
25dd8 121             | _var07
25dd8 121             | 	res	1
25dd8 122             | _var08
25dd8 122             | 	res	1
25dd8 123             | _var09
25dd8 123             | 	res	1
25dd8 124             | _var10
25dd8 124             | 	res	1
25dd8 125             | _var11
25dd8 125             | 	res	1
25dd8 126             | _var12
25dd8 126             | 	res	1
25dd8 127             | _var13
25dd8 127             | 	res	1
25dd8 128             | _var14
25dd8 128             | 	res	1
25dd8 129             | _var15
25dd8 129             | 	res	1
25dd8 12a             | _var16
25dd8 12a             | 	res	1
25dd8 12b             | _var17
25dd8 12b             | 	res	1
25dd8 12c             | _var18
25dd8 12c             | 	res	1
25dd8 12d             | _var19
25dd8 12d             | 	res	1
25dd8 12e             | _var20
25dd8 12e             | 	res	1
25dd8 12f             | _var21
25dd8 12f             | 	res	1
25dd8 130             | _var22
25dd8 130             | 	res	1
25dd8 131             | _var23
25dd8 131             | 	res	1
25dd8 132             | _var24
25dd8 132             | 	res	1
25dd8 133             | _var25
25dd8 133             | 	res	1
25dd8 134             | _var26
25dd8 134             | 	res	1
25dd8 135             | _var27
25dd8 135             | 	res	1
25dd8 136             | _var28
25dd8 136             | 	res	1
25dd8 137             | _var29
25dd8 137             | 	res	1
25dd8 138             | _var30
25dd8 138             | 	res	1
25dd8 139             | _var31
25dd8 139             | 	res	1
25dd8 13a             | _var32
25dd8 13a             | 	res	1
25dd8 13b             | arg01
25dd8 13b             | 	res	1
25dd8 13c             | arg02
25dd8 13c             | 	res	1
25dd8 13d             | arg03
25dd8 13d             | 	res	1
25dd8 13e             | arg04
25dd8 13e             | 	res	1
25dd8 13f             | arg05
25dd8 13f             | 	res	1
25dd8 140             | arg06
25dd8 140             | 	res	1
25dd8 141             | arg07
25dd8 141             | 	res	1
25dd8 142             | local01
25dd8 142             | 	res	1
25dd8 143             | local02
25dd8 143             | 	res	1
25dd8 144             | local03
25dd8 144             | 	res	1
25dd8 145             | local04
25dd8 145             | 	res	1
25dd8 146             | local05
25dd8 146             | 	res	1
25dd8 147             | local06
25dd8 147             | 	res	1
25dd8 148             | local07
25dd8 148             | 	res	1
25dd8 149             | local08
25dd8 149             | 	res	1
25dd8 14a             | local09
25dd8 14a             | 	res	1
25dd8 14b             | local10
25dd8 14b             | 	res	1
25dd8 14c             | local11
25dd8 14c             | 	res	1
25dd8 14d             | local12
25dd8 14d             | 	res	1
25dd8 14e             | local13
25dd8 14e             | 	res	1
25dd8 14f             | local14
25dd8 14f             | 	res	1
25dd8 150             | local15
25dd8 150             | 	res	1
25dd8 151             | local16
25dd8 151             | 	res	1
25dd8 152             | local17
25dd8 152             | 	res	1
25dd8 153             | local18
25dd8 153             | 	res	1
25dd8 154             | local19
25dd8 154             | 	res	1
25dd8 155             | local20
25dd8 155             | 	res	1
25dd8 156             | local21
25dd8 156             | 	res	1
25dd8 157             | local22
25dd8 157             | 	res	1
25dd8 158             | local23
25dd8 158             | 	res	1
25dd8 159             | local24
25dd8 159             | 	res	1
25dd8 15a             | local25
25dd8 15a             | 	res	1
25dd8 15b             | local26
25dd8 15b             | 	res	1
25dd8 15c             | local27
25dd8 15c             | 	res	1
25dd8 15d             | local28
25dd8 15d             | 	res	1
25dd8 15e             | local29
25dd8 15e             | 	res	1
25dd8 15f             | local30
25dd8 15f             | 	res	1
25dd8 160             | local31
25dd8 160             | 	res	1
25dd8 161             | local32
25dd8 161             | 	res	1
25dd8 162             | local33
25dd8 162             | 	res	1
25dd8 163             | local34
25dd8 163             | 	res	1
25dd8 164             | local35
25dd8 164             | 	res	1
25dd8 165             | local36
25dd8 165             | 	res	1
25dd8 166             | local37
25dd8 166             | 	res	1
25dd8 167             | local38
25dd8 167             | 	res	1
25dd8 168             | local39
25dd8 168             | 	res	1
25dd8 169             | local40
25dd8 169             | 	res	1
25dd8 16a             | local41
25dd8 16a             | 	res	1
25dd8 16b             | local42
25dd8 16b             | 	res	1
25dd8 16c             | muldiva_
25dd8 16c             | 	res	1
25dd8 16d             | muldivb_
25dd8 16d             | 	res	1
25dd8 16e             | 	fit	480
25dd8 16e             | 
