00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player1.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 2C F1 07 F1 | 	add	ptra, ##2348
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 B2 E1 80 FF 
00428 009 00 F0 65 FD | 	hubset	##29582584
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c B2 E1 00 FF 
00438 00d FB EC 07 F6 | 	mov	pa, ##29582587
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 19 92 8A FF 
00448 011 14 1E 6C FC | 	wrlong	##354693647, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 20 19 02 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 28 29 02 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 78 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 C0 7F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a C0 16 02 00 | 	long	@__system__dat_
00830 10b             | ptr__audio016_spin2_dat__
00830 10b B8 07 02 00 | 	long	@_audio016_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 9C 81 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 30 D2 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e BC 24 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 90 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 78 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 50 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 28 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 B8 33 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 94 F6 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     36 5A 05 F6 | 	mov	COUNT_, #54
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     AC 55 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     90 55 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     74 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     58 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     F4 1F B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     B8 53 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     88 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     80 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     4C 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     20 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     2C 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     E8 56 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     0C 18 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     02 00 00 FF 
00ac8     30 0F 06 F1 | 	add	objptr, ##1328
00acc     07 01 69 FC | 	wrlong	#128, objptr
00ad0     04 0E 06 F1 | 	add	objptr, #4
00ad4     07 7B 68 FC | 	wrlong	#61, objptr
00ad8     04 0E 06 F1 | 	add	objptr, #4
00adc     07 79 68 FC | 	wrlong	#60, objptr
00ae0     04 0E 06 F1 | 	add	objptr, #4
00ae4     07 77 68 FC | 	wrlong	#59, objptr
00ae8     04 0E 06 F1 | 	add	objptr, #4
00aec     07 75 68 FC | 	wrlong	#58, objptr
00af0     04 0E 06 F1 | 	add	objptr, #4
00af4     07 07 68 FC | 	wrlong	#3, objptr
00af8     40 00 00 FF 
00afc     71 7D 06 F6 | 	mov	local10, ##@LR__0453
00b00     01 00 00 FF 
00b04     A4 0F 06 F1 | 	add	objptr, ##932
00b08     07 7D 62 FC | 	wrlong	local10, objptr
00b0c     04 00 00 FF 
00b10     E8 0E 86 F1 | 	sub	objptr, ##2280
00b14     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00b18     3F 5D 02 F6 | 	mov	arg01, local11
00b1c     44 FD BF FD | 	call	#_addr
00b20     04 00 00 FF 
00b24     EC 0E 06 F1 | 	add	objptr, ##2284
00b28     07 2B 62 FC | 	wrlong	result1, objptr
00b2c     15 5D 02 F6 | 	mov	arg01, result1
00b30     00 5E 06 F6 | 	mov	arg02, #0
00b34     01 00 00 FF 
00b38     A4 0F 86 F1 | 	sub	objptr, ##932
00b3c     20 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b40     01 5E 06 F6 | 	mov	arg02, #1
00b44                 | ' 
00b44                 | ' ''---------- Set the (x,y) position of cursor
00b44                 | ' 
00b44                 | ' cursor_x:=x
00b44     02 00 00 FF 
00b48     14 0F 86 F1 | 	sub	objptr, ##1300
00b4c     07 03 48 FC | 	wrbyte	#1, objptr
00b50                 | ' cursor_y:=y
00b50     01 0E 06 F1 | 	add	objptr, #1
00b54     07 03 48 FC | 	wrbyte	#1, objptr
00b58                 | ' 
00b58                 | ' emptystr$="                      "
00b58                 | ' 
00b58                 | ' ma=addr(module)
00b58                 | ' tracker.initmodule(ma,0)
00b58                 | ' 
00b58                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b58     04 00 00 FF 
00b5c     B7 0E 06 F1 | 	add	objptr, ##2231
00b60     07 81 02 FB | 	rdlong	local12, objptr
00b64     40 83 02 F6 | 	mov	local13, local12
00b68     04 00 00 FF 
00b6c     EC 0E 86 F1 | 	sub	objptr, ##2284
00b70     14 82 06 F1 | 	add	local13, #20
00b74                 | LR__0001
00b74     41 81 5A F2 | 	cmps	local12, local13 wcz
00b78     44 00 90 3D |  if_ae	jmp	#LR__0002
00b7c     00 5C 06 F6 | 	mov	arg01, #0
00b80     C4 69 B0 FD | 	call	#__system___getiolock_0145
00b84     15 5D 02 F6 | 	mov	arg01, result1
00b88     78 53 B0 FD | 	call	#__system___lockmem
00b8c     00 84 06 F6 | 	mov	local14, #0
00b90                 | ' asm
00b90     40 2B C2 FA | 	rdbyte	result1, local12
00b94                 | ' return r
00b94     15 5F 02 F6 | 	mov	arg02, result1
00b98     07 5E 46 F7 | 	zerox	arg02, #7
00b9c     00 5C 06 F6 | 	mov	arg01, #0
00ba0     00 60 06 F6 | 	mov	arg03, #0
00ba4     A8 56 B0 FD | 	call	#__system___basic_print_char
00ba8     00 5C 06 F6 | 	mov	arg01, #0
00bac     98 69 B0 FD | 	call	#__system___getiolock_0145
00bb0     15 01 68 FC | 	wrlong	#0, result1
00bb4     00 2A 06 F6 | 	mov	result1, #0
00bb8     01 80 06 F1 | 	add	local12, #1
00bbc     B4 FF 9F FD | 	jmp	#LR__0001
00bc0                 | LR__0002
00bc0     04 00 00 FF 
00bc4     F0 0E 06 F1 | 	add	objptr, ##2288
00bc8     07 1F 68 FC | 	wrlong	#15, objptr
00bcc                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00bcc     00 7C 06 F6 | 	mov	local10, #0
00bd0     04 0E 86 F1 | 	sub	objptr, #4
00bd4     07 5D 02 FB | 	rdlong	arg01, objptr
00bd8     02 00 00 FF 
00bdc     38 5C 06 F1 | 	add	arg01, ##1080
00be0                 | ' asm
00be0     2E 87 C2 FA | 	rdbyte	local15, arg01
00be4                 | ' return r
00be4     07 86 46 F7 | 	zerox	local15, #7
00be8     4D 86 0E F2 | 	cmp	local15, #77 wz
00bec     01 7C 66 A6 |  if_e	neg	local10, #1
00bf0     00 88 06 F6 | 	mov	local16, #0
00bf4     07 5D 02 FB | 	rdlong	arg01, objptr
00bf8     04 00 00 FF 
00bfc     EC 0E 86 F1 | 	sub	objptr, ##2284
00c00     02 00 00 FF 
00c04     3A 5C 06 F1 | 	add	arg01, ##1082
00c08                 | ' asm
00c08     2E 2B C2 FA | 	rdbyte	result1, arg01
00c0c                 | ' return r
00c0c     15 8B 02 F6 | 	mov	local17, result1
00c10     07 8A 46 F7 | 	zerox	local17, #7
00c14     4B 8A 0E F2 | 	cmp	local17, #75 wz
00c18     01 88 66 A6 |  if_e	neg	local16, #1
00c1c     44 7D CA F7 | 	test	local10, local16 wz
00c20     04 00 00 5F 
00c24     F0 0E 06 51 |  if_ne	add	objptr, ##2288
00c28     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00c2c     04 00 00 5F 
00c30     F0 0E 86 51 |  if_ne	sub	objptr, ##2288
00c34     02 5E 06 F6 | 	mov	arg02, #2
00c38                 | ' 
00c38                 | ' ''---------- Set the (x,y) position of cursor
00c38                 | ' 
00c38                 | ' cursor_x:=x
00c38     34 0E 06 F1 | 	add	objptr, #52
00c3c     07 03 48 FC | 	wrbyte	#1, objptr
00c40                 | ' cursor_y:=y
00c40     01 0E 06 F1 | 	add	objptr, #1
00c44     07 05 48 FC | 	wrbyte	#2, objptr
00c48     35 0E 86 F1 | 	sub	objptr, #53
00c4c                 | ' position 1,2 : print samples;" ";"samples module"
00c4c     00 5C 06 F6 | 	mov	arg01, #0
00c50     F4 68 B0 FD | 	call	#__system___getiolock_0145
00c54     15 5D 02 F6 | 	mov	arg01, result1
00c58     A8 52 B0 FD | 	call	#__system___lockmem
00c5c     00 2A 06 F6 | 	mov	result1, #0
00c60     04 00 00 FF 
00c64     F0 0E 06 F1 | 	add	objptr, ##2288
00c68     07 5F 02 FB | 	rdlong	arg02, objptr
00c6c     04 00 00 FF 
00c70     F0 0E 86 F1 | 	sub	objptr, ##2288
00c74     00 5C 06 F6 | 	mov	arg01, #0
00c78     00 60 06 F6 | 	mov	arg03, #0
00c7c     0A 62 06 F6 | 	mov	arg04, #10
00c80     60 56 B0 FD | 	call	#__system___basic_print_integer
00c84     40 00 00 FF 
00c88     88 5F 06 F6 | 	mov	arg02, ##@LR__0454
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     00 60 06 F6 | 	mov	arg03, #0
00c94     04 56 B0 FD | 	call	#__system___basic_print_string
00c98     40 00 00 FF 
00c9c     8A 5F 06 F6 | 	mov	arg02, ##@LR__0455
00ca0     00 5C 06 F6 | 	mov	arg01, #0
00ca4     00 60 06 F6 | 	mov	arg03, #0
00ca8     F0 55 B0 FD | 	call	#__system___basic_print_string
00cac     00 5C 06 F6 | 	mov	arg01, #0
00cb0     0A 5E 06 F6 | 	mov	arg02, #10
00cb4     00 60 06 F6 | 	mov	arg03, #0
00cb8     94 55 B0 FD | 	call	#__system___basic_print_char
00cbc     01 2A 06 F6 | 	mov	result1, #1
00cc0     00 5C 06 F6 | 	mov	arg01, #0
00cc4     80 68 B0 FD | 	call	#__system___getiolock_0145
00cc8     15 01 68 FC | 	wrlong	#0, result1
00ccc     00 2A 06 F6 | 	mov	result1, #0
00cd0     04 00 00 FF 
00cd4     EC 0E 06 F1 | 	add	objptr, ##2284
00cd8     07 8D 02 FB | 	rdlong	local18, objptr
00cdc     04 0E 06 F1 | 	add	objptr, #4
00ce0     07 8F 02 FB | 	rdlong	local19, objptr
00ce4     04 5E 06 F6 | 	mov	arg02, #4
00ce8                 | ' 
00ce8                 | ' ''---------- Set the (x,y) position of cursor
00ce8                 | ' 
00ce8                 | ' cursor_x:=x
00ce8     04 00 00 FF 
00cec     BC 0E 86 F1 | 	sub	objptr, ##2236
00cf0     07 03 48 FC | 	wrbyte	#1, objptr
00cf4                 | ' cursor_y:=y
00cf4     01 0E 06 F1 | 	add	objptr, #1
00cf8     07 09 48 FC | 	wrbyte	#4, objptr
00cfc     35 0E 86 F1 | 	sub	objptr, #53
00d00                 | ' 'v030. setwritecolors(170,147):
00d00                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00d00     00 5C 06 F6 | 	mov	arg01, #0
00d04     40 68 B0 FD | 	call	#__system___getiolock_0145
00d08     15 5D 02 F6 | 	mov	arg01, result1
00d0c     F4 51 B0 FD | 	call	#__system___lockmem
00d10     00 2A 06 F6 | 	mov	result1, #0
00d14     40 00 00 FF 
00d18     06 5F 06 F6 | 	mov	arg02, ##@LR__0451
00d1c     00 5C 06 F6 | 	mov	arg01, #0
00d20     00 60 06 F6 | 	mov	arg03, #0
00d24     74 55 B0 FD | 	call	#__system___basic_print_string
00d28     00 5C 06 F6 | 	mov	arg01, #0
00d2c     0A 5E 06 F6 | 	mov	arg02, #10
00d30     00 60 06 F6 | 	mov	arg03, #0
00d34     18 55 B0 FD | 	call	#__system___basic_print_char
00d38     01 2A 06 F6 | 	mov	result1, #1
00d3c     00 5C 06 F6 | 	mov	arg01, #0
00d40     04 68 B0 FD | 	call	#__system___getiolock_0145
00d44     15 01 68 FC | 	wrlong	#0, result1
00d48     00 2A 06 F6 | 	mov	result1, #0
00d4c     04 00 00 FF 
00d50     64 0E 06 F1 | 	add	objptr, ##2148
00d54     07 91 02 F6 | 	mov	local20, objptr
00d58     00 92 06 F6 | 	mov	local21, #0
00d5c     04 00 00 FF 
00d60     64 0E 86 F1 | 	sub	objptr, ##2148
00d64                 | LR__0003
00d64     40 00 00 FF 
00d68     6F 95 06 F6 | 	mov	local22, ##@LR__0452
00d6c     49 97 02 F6 | 	mov	local23, local21
00d70     02 5E 06 F6 | 	mov	arg02, #2
00d74     0A 60 06 F6 | 	mov	arg03, #10
00d78     02 98 0E F6 | 	mov	local24, #2 wz
00d7c     34 00 90 FD | 	jmp	#LR__0006
00d80                 | LR__0004
00d80     00 9A 06 F6 | 	mov	local25, #0
00d84     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d88     01 9A 66 E6 |  if_be	neg	local25, #1
00d8c     00 9E 06 F6 | 	mov	local27, #0
00d90     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d94     01 9E 66 C6 |  if_b	neg	local27, #1
00d98     4F 9B CA F7 | 	test	local25, local27 wz
00d9c     14 00 90 AD |  if_e	jmp	#LR__0005
00da0     4E A1 02 F6 | 	mov	local28, local26
00da4     0A 9C 06 FD | 	qmul	local26, #10
00da8     18 9C 62 FD | 	getqx	local26
00dac     01 98 06 F1 | 	add	local24, #1
00db0     CC FF 9F FD | 	jmp	#LR__0004
00db4                 | LR__0005
00db4                 | LR__0006
00db4     20 98 3E F3 | 	fle	local24, #32 wcz
00db8     4C 5D 02 F6 | 	mov	arg01, local24
00dbc     02 5C 06 F1 | 	add	arg01, #2
00dc0     74 5D B0 FD | 	call	#__system___gc_alloc_managed
00dc4     15 A3 02 F6 | 	mov	local29, result1
00dc8     4C A5 02 F6 | 	mov	local30, local24
00dcc     51 A5 02 F1 | 	add	local30, local29
00dd0     52 01 48 FC | 	wrbyte	#0, local30
00dd4     64 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00dd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ddc                 | LR__0007
00ddc     00 98 1E F2 | 	cmp	local24, #0 wcz
00de0     34 00 90 ED |  if_be	jmp	#LR__0009
00de4     01 98 86 F1 | 	sub	local24, #1
00de8     4B 0B 03 F6 | 	mov	muldiva_, local23
00dec     0A 0C 07 F6 | 	mov	muldivb_, #10
00df0     CC 00 A0 FD | 	call	#unsdivide_
00df4     85 A7 02 F6 | 	mov	local31, muldiva_
00df8     86 97 02 F6 | 	mov	local23, muldivb_
00dfc     0A A6 1E F2 | 	cmp	local31, #10 wcz
00e00     30 A6 06 C1 |  if_b	add	local31, #48
00e04     37 A6 06 31 |  if_ae	add	local31, #55
00e08     4C A9 02 F6 | 	mov	local32, local24
00e0c     51 A9 02 F1 | 	add	local32, local29
00e10     54 A7 42 FC | 	wrbyte	local31, local32
00e14     C4 FF 9F FD | 	jmp	#LR__0007
00e18                 | LR__0008
00e18                 | LR__0009
00e18     51 2B 02 F6 | 	mov	result1, local29
00e1c     15 5F 02 F6 | 	mov	arg02, result1
00e20     4A 5D 02 F6 | 	mov	arg01, local22
00e24     14 51 B0 FD | 	call	#__system___string_concat
00e28     15 AB 02 F6 | 	mov	local33, result1
00e2c     13 5C 06 F6 | 	mov	arg01, #19
00e30     40 00 00 FF 
00e34     B0 5E 06 F6 | 	mov	arg02, ##@LR__0445
00e38     6C 59 B0 FD | 	call	#__system__String_S
00e3c     15 5F 02 F6 | 	mov	arg02, result1
00e40     55 5D 02 F6 | 	mov	arg01, local33
00e44     F4 50 B0 FD | 	call	#__system___string_concat
00e48     48 2B 62 FC | 	wrlong	result1, local20
00e4c     01 92 06 F1 | 	add	local21, #1
00e50     04 90 06 F1 | 	add	local20, #4
00e54     20 92 5E F2 | 	cmps	local21, #32 wcz
00e58     08 FF 9F CD |  if_b	jmp	#LR__0003
00e5c                 | ' for i=1 to num
00e5c     01 92 06 F6 | 	mov	local21, #1
00e60     01 8E 06 F1 | 	add	local19, #1
00e64     46 AD 02 F6 | 	mov	local34, local18
00e68     14 AC 06 F1 | 	add	local34, #20
00e6c     00 AE 06 F6 | 	mov	local35, #0
00e70     04 00 00 FF 
00e74     68 0E 06 F1 | 	add	objptr, ##2152
00e78     07 B1 02 F6 | 	mov	local36, objptr
00e7c     14 8C 06 F1 | 	add	local18, #20
00e80     00 B2 06 F6 | 	mov	local37, #0
00e84     04 00 00 FF 
00e88     68 0E 86 F1 | 	sub	objptr, ##2152
00e8c                 | LR__0010
00e8c     47 93 5A F2 | 	cmps	local21, local19 wcz
00e90     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e94     56 B5 02 F6 | 	mov	local38, local34
00e98     57 B5 02 F1 | 	add	local38, local35
00e9c     00 B6 06 F6 | 	mov	local39, #0
00ea0                 | LR__0011
00ea0     58 5D 02 F6 | 	mov	arg01, local36
00ea4     BC F9 BF FD | 	call	#_addr
00ea8                 | ' asm
00ea8     15 B9 02 FB | 	rdlong	local40, result1
00eac                 | ' return r
00eac     04 00 00 FF 
00eb0     10 0F 06 F1 | 	add	objptr, ##2320
00eb4     07 B9 62 FC | 	wrlong	local40, objptr
00eb8     5A 5D 02 F6 | 	mov	arg01, local38
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0                 | ' asm
00ec0     2E 2B C2 FA | 	rdbyte	result1, arg01
00ec4                 | ' return r
00ec4     15 95 02 F6 | 	mov	local22, result1
00ec8     07 94 46 F7 | 	zerox	local22, #7
00ecc     04 0E 06 F1 | 	add	objptr, #4
00ed0     07 95 62 FC | 	wrlong	local22, objptr
00ed4                 | '     a=lpeek(addr(sn$(i)))
00ed4                 | '     b=(peek(ma+20+30*(i-1)+j))
00ed4                 | '     if b>=32 then poke a+j,b
00ed4     04 00 00 FF 
00ed8     14 0F 86 F1 | 	sub	objptr, ##2324
00edc     20 94 5E F2 | 	cmps	local22, #32 wcz
00ee0     24 00 90 CD |  if_b	jmp	#LR__0012
00ee4     04 00 00 FF 
00ee8     10 0F 06 F1 | 	add	objptr, ##2320
00eec     07 5D 02 FB | 	rdlong	arg01, objptr
00ef0     5B 5D 02 F1 | 	add	arg01, local39
00ef4     04 0E 06 F1 | 	add	objptr, #4
00ef8     07 5F 02 FB | 	rdlong	arg02, objptr
00efc     04 00 00 FF 
00f00     14 0F 86 F1 | 	sub	objptr, ##2324
00f04                 | ' asm
00f04     2E 5F 42 FC | 	wrbyte	arg02, arg01
00f08                 | LR__0012
00f08     01 B6 06 F1 | 	add	local39, #1
00f0c     16 B6 5E F2 | 	cmps	local39, #22 wcz
00f10     8C FF 9F CD |  if_b	jmp	#LR__0011
00f14     46 BB 02 F6 | 	mov	local41, local18
00f18     59 BB 02 F1 | 	add	local41, local37
00f1c     5D 5D 02 F6 | 	mov	arg01, local41
00f20     16 5C 06 F1 | 	add	arg01, #22
00f24     5D BD 02 F6 | 	mov	local42, local41
00f28     17 BC 06 F1 | 	add	local42, #23
00f2c                 | ' asm
00f2c     2E AB C2 FA | 	rdbyte	local33, arg01
00f30                 | ' return r
00f30     07 AA 46 F7 | 	zerox	local33, #7
00f34     08 AA 66 F0 | 	shl	local33, #8
00f38                 | ' asm
00f38     5E BF C2 FA | 	rdbyte	local43, local42
00f3c                 | ' return r
00f3c     07 BE 46 F7 | 	zerox	local43, #7
00f40     5F AB 02 F1 | 	add	local33, local43
00f44     01 AA 66 F0 | 	shl	local33, #1
00f48     04 00 00 FF 
00f4c     18 0F 06 F1 | 	add	objptr, ##2328
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1A 5C 06 F1 | 	add	arg01, #26
00f5c     5D C1 02 F6 | 	mov	local44, local41
00f60     1B C0 06 F1 | 	add	local44, #27
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     60 BF C2 FA | 	rdbyte	local43, local44
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     1C 5C 06 F1 | 	add	arg01, #28
00f90     5D C3 02 F6 | 	mov	local45, local41
00f94     1D C2 06 F1 | 	add	local45, #29
00f98                 | ' asm
00f98     2E AB C2 FA | 	rdbyte	local33, arg01
00f9c                 | ' return r
00f9c     07 AA 46 F7 | 	zerox	local33, #7
00fa0     08 AA 66 F0 | 	shl	local33, #8
00fa4                 | ' asm
00fa4     61 BF C2 FA | 	rdbyte	local43, local45
00fa8                 | ' return r
00fa8     07 BE 46 F7 | 	zerox	local43, #7
00fac     5F AB 02 F1 | 	add	local33, local43
00fb0     01 AA 66 F0 | 	shl	local33, #1
00fb4     04 0E 06 F1 | 	add	objptr, #4
00fb8     07 AB 62 FC | 	wrlong	local33, objptr
00fbc     5D 5D 02 F6 | 	mov	arg01, local41
00fc0     18 5C 06 F1 | 	add	arg01, #24
00fc4                 | ' asm
00fc4     2E 95 C2 FA | 	rdbyte	local22, arg01
00fc8                 | ' return r
00fc8     07 94 46 F7 | 	zerox	local22, #7
00fcc     04 0E 06 F1 | 	add	objptr, #4
00fd0     07 95 62 FC | 	wrlong	local22, objptr
00fd4     19 BA 06 F1 | 	add	local41, #25
00fd8                 | ' asm
00fd8     5D 2B C2 FA | 	rdbyte	result1, local41
00fdc                 | ' return r
00fdc     15 95 02 F6 | 	mov	local22, result1
00fe0     07 94 46 F7 | 	zerox	local22, #7
00fe4     04 0E 06 F1 | 	add	objptr, #4
00fe8     07 95 62 FC | 	wrlong	local22, objptr
00fec     04 00 00 FF 
00ff0     28 0F 86 F1 | 	sub	objptr, ##2344
00ff4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ff4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ff4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ff4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ff4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ff4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ff4     10 92 5E F2 | 	cmps	local21, #16 wcz
00ff8     C4 02 90 3D |  if_ae	jmp	#LR__0013
00ffc     05 C4 06 F6 | 	mov	local46, #5
01000     49 C5 02 F1 | 	add	local46, local21
01004     62 5F 02 F6 | 	mov	arg02, local46
01008                 | ' 
01008                 | ' ''---------- Set the (x,y) position of cursor
01008                 | ' 
01008                 | ' cursor_x:=x
01008     34 0E 06 F1 | 	add	objptr, #52
0100c     07 03 48 FC | 	wrbyte	#1, objptr
01010                 | ' cursor_y:=y
01010     01 0E 06 F1 | 	add	objptr, #1
01014     07 5F 42 FC | 	wrbyte	arg02, objptr
01018     49 C7 02 F6 | 	mov	local47, local21
0101c     02 C6 66 F0 | 	shl	local47, #2
01020     04 00 00 FF 
01024     2F 0E 06 F1 | 	add	objptr, ##2095
01028     07 C7 02 F1 | 	add	local47, objptr
0102c     00 5C 06 F6 | 	mov	arg01, #0
01030     04 00 00 FF 
01034     64 0E 86 F1 | 	sub	objptr, ##2148
01038     0C 65 B0 FD | 	call	#__system___getiolock_0145
0103c     15 5D 02 F6 | 	mov	arg01, result1
01040     C0 4E B0 FD | 	call	#__system___lockmem
01044     00 2A 06 F6 | 	mov	result1, #0
01048     63 5F 02 FB | 	rdlong	arg02, local47
0104c     00 5C 06 F6 | 	mov	arg01, #0
01050     00 60 06 F6 | 	mov	arg03, #0
01054     44 52 B0 FD | 	call	#__system___basic_print_string
01058     00 5C 06 F6 | 	mov	arg01, #0
0105c     0A 5E 06 F6 | 	mov	arg02, #10
01060     00 60 06 F6 | 	mov	arg03, #0
01064     E8 51 B0 FD | 	call	#__system___basic_print_char
01068     01 2A 06 F6 | 	mov	result1, #1
0106c     00 5C 06 F6 | 	mov	arg01, #0
01070     D4 64 B0 FD | 	call	#__system___getiolock_0145
01074     15 01 68 FC | 	wrlong	#0, result1
01078     00 2A 06 F6 | 	mov	result1, #0
0107c     62 5F 02 F6 | 	mov	arg02, local46
01080                 | ' 
01080                 | ' ''---------- Set the (x,y) position of cursor
01080                 | ' 
01080                 | ' cursor_x:=x
01080     34 0E 06 F1 | 	add	objptr, #52
01084     07 31 48 FC | 	wrbyte	#24, objptr
01088                 | ' cursor_y:=y
01088     01 0E 06 F1 | 	add	objptr, #1
0108c     07 5F 42 FC | 	wrbyte	arg02, objptr
01090     35 0E 86 F1 | 	sub	objptr, #53
01094     00 5C 06 F6 | 	mov	arg01, #0
01098     AC 64 B0 FD | 	call	#__system___getiolock_0145
0109c     15 5D 02 F6 | 	mov	arg01, result1
010a0     60 4E B0 FD | 	call	#__system___lockmem
010a4     00 2A 06 F6 | 	mov	result1, #0
010a8     04 00 00 FF 
010ac     18 0F 06 F1 | 	add	objptr, ##2328
010b0     07 5F 02 FB | 	rdlong	arg02, objptr
010b4     04 00 00 FF 
010b8     18 0F 86 F1 | 	sub	objptr, ##2328
010bc     00 5C 06 F6 | 	mov	arg01, #0
010c0     00 60 06 F6 | 	mov	arg03, #0
010c4     0A 62 06 F6 | 	mov	arg04, #10
010c8     18 52 B0 FD | 	call	#__system___basic_print_integer
010cc     00 5C 06 F6 | 	mov	arg01, #0
010d0     0A 5E 06 F6 | 	mov	arg02, #10
010d4     00 60 06 F6 | 	mov	arg03, #0
010d8     74 51 B0 FD | 	call	#__system___basic_print_char
010dc     01 2A 06 F6 | 	mov	result1, #1
010e0     00 5C 06 F6 | 	mov	arg01, #0
010e4     60 64 B0 FD | 	call	#__system___getiolock_0145
010e8     15 01 68 FC | 	wrlong	#0, result1
010ec     00 2A 06 F6 | 	mov	result1, #0
010f0     62 5F 02 F6 | 	mov	arg02, local46
010f4                 | ' 
010f4                 | ' ''---------- Set the (x,y) position of cursor
010f4                 | ' 
010f4                 | ' cursor_x:=x
010f4     34 0E 06 F1 | 	add	objptr, #52
010f8     07 3F 48 FC | 	wrbyte	#31, objptr
010fc                 | ' cursor_y:=y
010fc     01 0E 06 F1 | 	add	objptr, #1
01100     07 5F 42 FC | 	wrbyte	arg02, objptr
01104     35 0E 86 F1 | 	sub	objptr, #53
01108     00 5C 06 F6 | 	mov	arg01, #0
0110c     38 64 B0 FD | 	call	#__system___getiolock_0145
01110     15 5D 02 F6 | 	mov	arg01, result1
01114     EC 4D B0 FD | 	call	#__system___lockmem
01118     00 2A 06 F6 | 	mov	result1, #0
0111c     04 00 00 FF 
01120     24 0F 06 F1 | 	add	objptr, ##2340
01124     07 5F 02 FB | 	rdlong	arg02, objptr
01128     04 00 00 FF 
0112c     24 0F 86 F1 | 	sub	objptr, ##2340
01130     00 5C 06 F6 | 	mov	arg01, #0
01134     00 60 06 F6 | 	mov	arg03, #0
01138     0A 62 06 F6 | 	mov	arg04, #10
0113c     A4 51 B0 FD | 	call	#__system___basic_print_integer
01140     00 5C 06 F6 | 	mov	arg01, #0
01144     0A 5E 06 F6 | 	mov	arg02, #10
01148     00 60 06 F6 | 	mov	arg03, #0
0114c     00 51 B0 FD | 	call	#__system___basic_print_char
01150     01 2A 06 F6 | 	mov	result1, #1
01154     00 5C 06 F6 | 	mov	arg01, #0
01158     EC 63 B0 FD | 	call	#__system___getiolock_0145
0115c     15 01 68 FC | 	wrlong	#0, result1
01160     00 2A 06 F6 | 	mov	result1, #0
01164     62 5F 02 F6 | 	mov	arg02, local46
01168                 | ' 
01168                 | ' ''---------- Set the (x,y) position of cursor
01168                 | ' 
01168                 | ' cursor_x:=x
01168     34 0E 06 F1 | 	add	objptr, #52
0116c     07 45 48 FC | 	wrbyte	#34, objptr
01170                 | ' cursor_y:=y
01170     01 0E 06 F1 | 	add	objptr, #1
01174     07 5F 42 FC | 	wrbyte	arg02, objptr
01178     35 0E 86 F1 | 	sub	objptr, #53
0117c     00 5C 06 F6 | 	mov	arg01, #0
01180     C4 63 B0 FD | 	call	#__system___getiolock_0145
01184     15 5D 02 F6 | 	mov	arg01, result1
01188     78 4D B0 FD | 	call	#__system___lockmem
0118c     00 2A 06 F6 | 	mov	result1, #0
01190     04 00 00 FF 
01194     28 0F 06 F1 | 	add	objptr, ##2344
01198     07 5F 02 FB | 	rdlong	arg02, objptr
0119c     04 00 00 FF 
011a0     28 0F 86 F1 | 	sub	objptr, ##2344
011a4     00 5C 06 F6 | 	mov	arg01, #0
011a8     00 60 06 F6 | 	mov	arg03, #0
011ac     0A 62 06 F6 | 	mov	arg04, #10
011b0     30 51 B0 FD | 	call	#__system___basic_print_integer
011b4     00 5C 06 F6 | 	mov	arg01, #0
011b8     0A 5E 06 F6 | 	mov	arg02, #10
011bc     00 60 06 F6 | 	mov	arg03, #0
011c0     8C 50 B0 FD | 	call	#__system___basic_print_char
011c4     01 2A 06 F6 | 	mov	result1, #1
011c8     00 5C 06 F6 | 	mov	arg01, #0
011cc     78 63 B0 FD | 	call	#__system___getiolock_0145
011d0     15 01 68 FC | 	wrlong	#0, result1
011d4     00 2A 06 F6 | 	mov	result1, #0
011d8     62 5F 02 F6 | 	mov	arg02, local46
011dc                 | ' 
011dc                 | ' ''---------- Set the (x,y) position of cursor
011dc                 | ' 
011dc                 | ' cursor_x:=x
011dc     34 0E 06 F1 | 	add	objptr, #52
011e0     07 4B 48 FC | 	wrbyte	#37, objptr
011e4                 | ' cursor_y:=y
011e4     01 0E 06 F1 | 	add	objptr, #1
011e8     07 5F 42 FC | 	wrbyte	arg02, objptr
011ec     35 0E 86 F1 | 	sub	objptr, #53
011f0     00 5C 06 F6 | 	mov	arg01, #0
011f4     50 63 B0 FD | 	call	#__system___getiolock_0145
011f8     15 5D 02 F6 | 	mov	arg01, result1
011fc     04 4D B0 FD | 	call	#__system___lockmem
01200     00 2A 06 F6 | 	mov	result1, #0
01204     04 00 00 FF 
01208     1C 0F 06 F1 | 	add	objptr, ##2332
0120c     07 5F 02 FB | 	rdlong	arg02, objptr
01210     04 00 00 FF 
01214     1C 0F 86 F1 | 	sub	objptr, ##2332
01218     00 5C 06 F6 | 	mov	arg01, #0
0121c     00 60 06 F6 | 	mov	arg03, #0
01220     0A 62 06 F6 | 	mov	arg04, #10
01224     BC 50 B0 FD | 	call	#__system___basic_print_integer
01228     00 5C 06 F6 | 	mov	arg01, #0
0122c     0A 5E 06 F6 | 	mov	arg02, #10
01230     00 60 06 F6 | 	mov	arg03, #0
01234     18 50 B0 FD | 	call	#__system___basic_print_char
01238     01 2A 06 F6 | 	mov	result1, #1
0123c     00 5C 06 F6 | 	mov	arg01, #0
01240     04 63 B0 FD | 	call	#__system___getiolock_0145
01244     15 01 68 FC | 	wrlong	#0, result1
01248     00 2A 06 F6 | 	mov	result1, #0
0124c     62 5F 02 F6 | 	mov	arg02, local46
01250                 | ' 
01250                 | ' ''---------- Set the (x,y) position of cursor
01250                 | ' 
01250                 | ' cursor_x:=x
01250     34 0E 06 F1 | 	add	objptr, #52
01254     07 57 48 FC | 	wrbyte	#43, objptr
01258                 | ' cursor_y:=y
01258     01 0E 06 F1 | 	add	objptr, #1
0125c     07 5F 42 FC | 	wrbyte	arg02, objptr
01260     35 0E 86 F1 | 	sub	objptr, #53
01264     00 5C 06 F6 | 	mov	arg01, #0
01268     DC 62 B0 FD | 	call	#__system___getiolock_0145
0126c     15 5D 02 F6 | 	mov	arg01, result1
01270     90 4C B0 FD | 	call	#__system___lockmem
01274     00 2A 06 F6 | 	mov	result1, #0
01278     04 00 00 FF 
0127c     20 0F 06 F1 | 	add	objptr, ##2336
01280     07 5F 02 FB | 	rdlong	arg02, objptr
01284     04 00 00 FF 
01288     20 0F 86 F1 | 	sub	objptr, ##2336
0128c     00 5C 06 F6 | 	mov	arg01, #0
01290     00 60 06 F6 | 	mov	arg03, #0
01294     0A 62 06 F6 | 	mov	arg04, #10
01298     48 50 B0 FD | 	call	#__system___basic_print_integer
0129c     00 5C 06 F6 | 	mov	arg01, #0
012a0     0A 5E 06 F6 | 	mov	arg02, #10
012a4     00 60 06 F6 | 	mov	arg03, #0
012a8     A4 4F B0 FD | 	call	#__system___basic_print_char
012ac     01 2A 06 F6 | 	mov	result1, #1
012b0     00 5C 06 F6 | 	mov	arg01, #0
012b4     90 62 B0 FD | 	call	#__system___getiolock_0145
012b8     15 01 68 FC | 	wrlong	#0, result1
012bc     00 2A 06 F6 | 	mov	result1, #0
012c0                 | LR__0013
012c0                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
012c0     10 92 5E F2 | 	cmps	local21, #16 wcz
012c4     C4 02 90 CD |  if_b	jmp	#LR__0014
012c8     49 C9 02 F6 | 	mov	local48, local21
012cc     0B C8 86 F1 | 	sub	local48, #11
012d0     64 5F 02 F6 | 	mov	arg02, local48
012d4                 | ' 
012d4                 | ' ''---------- Set the (x,y) position of cursor
012d4                 | ' 
012d4                 | ' cursor_x:=x
012d4     34 0E 06 F1 | 	add	objptr, #52
012d8     07 73 48 FC | 	wrbyte	#57, objptr
012dc                 | ' cursor_y:=y
012dc     01 0E 06 F1 | 	add	objptr, #1
012e0     07 5F 42 FC | 	wrbyte	arg02, objptr
012e4     49 CB 02 F6 | 	mov	local49, local21
012e8     02 CA 66 F0 | 	shl	local49, #2
012ec     04 00 00 FF 
012f0     2F 0E 06 F1 | 	add	objptr, ##2095
012f4     07 CB 02 F1 | 	add	local49, objptr
012f8     00 5C 06 F6 | 	mov	arg01, #0
012fc     04 00 00 FF 
01300     64 0E 86 F1 | 	sub	objptr, ##2148
01304     40 62 B0 FD | 	call	#__system___getiolock_0145
01308     15 5D 02 F6 | 	mov	arg01, result1
0130c     F4 4B B0 FD | 	call	#__system___lockmem
01310     00 2A 06 F6 | 	mov	result1, #0
01314     65 5F 02 FB | 	rdlong	arg02, local49
01318     00 5C 06 F6 | 	mov	arg01, #0
0131c     00 60 06 F6 | 	mov	arg03, #0
01320     78 4F B0 FD | 	call	#__system___basic_print_string
01324     00 5C 06 F6 | 	mov	arg01, #0
01328     0A 5E 06 F6 | 	mov	arg02, #10
0132c     00 60 06 F6 | 	mov	arg03, #0
01330     1C 4F B0 FD | 	call	#__system___basic_print_char
01334     01 2A 06 F6 | 	mov	result1, #1
01338     00 5C 06 F6 | 	mov	arg01, #0
0133c     08 62 B0 FD | 	call	#__system___getiolock_0145
01340     15 01 68 FC | 	wrlong	#0, result1
01344     00 2A 06 F6 | 	mov	result1, #0
01348     64 5F 02 F6 | 	mov	arg02, local48
0134c                 | ' 
0134c                 | ' ''---------- Set the (x,y) position of cursor
0134c                 | ' 
0134c                 | ' cursor_x:=x
0134c     34 0E 06 F1 | 	add	objptr, #52
01350     07 A1 48 FC | 	wrbyte	#80, objptr
01354                 | ' cursor_y:=y
01354     01 0E 06 F1 | 	add	objptr, #1
01358     07 5F 42 FC | 	wrbyte	arg02, objptr
0135c     35 0E 86 F1 | 	sub	objptr, #53
01360     00 5C 06 F6 | 	mov	arg01, #0
01364     E0 61 B0 FD | 	call	#__system___getiolock_0145
01368     15 5D 02 F6 | 	mov	arg01, result1
0136c     94 4B B0 FD | 	call	#__system___lockmem
01370     00 2A 06 F6 | 	mov	result1, #0
01374     04 00 00 FF 
01378     18 0F 06 F1 | 	add	objptr, ##2328
0137c     07 5F 02 FB | 	rdlong	arg02, objptr
01380     04 00 00 FF 
01384     18 0F 86 F1 | 	sub	objptr, ##2328
01388     00 5C 06 F6 | 	mov	arg01, #0
0138c     00 60 06 F6 | 	mov	arg03, #0
01390     0A 62 06 F6 | 	mov	arg04, #10
01394     4C 4F B0 FD | 	call	#__system___basic_print_integer
01398     00 5C 06 F6 | 	mov	arg01, #0
0139c     0A 5E 06 F6 | 	mov	arg02, #10
013a0     00 60 06 F6 | 	mov	arg03, #0
013a4     A8 4E B0 FD | 	call	#__system___basic_print_char
013a8     01 2A 06 F6 | 	mov	result1, #1
013ac     00 5C 06 F6 | 	mov	arg01, #0
013b0     94 61 B0 FD | 	call	#__system___getiolock_0145
013b4     15 01 68 FC | 	wrlong	#0, result1
013b8     00 2A 06 F6 | 	mov	result1, #0
013bc     64 5F 02 F6 | 	mov	arg02, local48
013c0                 | ' 
013c0                 | ' ''---------- Set the (x,y) position of cursor
013c0                 | ' 
013c0                 | ' cursor_x:=x
013c0     34 0E 06 F1 | 	add	objptr, #52
013c4     07 AF 48 FC | 	wrbyte	#87, objptr
013c8                 | ' cursor_y:=y
013c8     01 0E 06 F1 | 	add	objptr, #1
013cc     07 5F 42 FC | 	wrbyte	arg02, objptr
013d0     35 0E 86 F1 | 	sub	objptr, #53
013d4     00 5C 06 F6 | 	mov	arg01, #0
013d8     6C 61 B0 FD | 	call	#__system___getiolock_0145
013dc     15 5D 02 F6 | 	mov	arg01, result1
013e0     20 4B B0 FD | 	call	#__system___lockmem
013e4     00 2A 06 F6 | 	mov	result1, #0
013e8     04 00 00 FF 
013ec     24 0F 06 F1 | 	add	objptr, ##2340
013f0     07 5F 02 FB | 	rdlong	arg02, objptr
013f4     04 00 00 FF 
013f8     24 0F 86 F1 | 	sub	objptr, ##2340
013fc     00 5C 06 F6 | 	mov	arg01, #0
01400     00 60 06 F6 | 	mov	arg03, #0
01404     0A 62 06 F6 | 	mov	arg04, #10
01408     D8 4E B0 FD | 	call	#__system___basic_print_integer
0140c     00 5C 06 F6 | 	mov	arg01, #0
01410     0A 5E 06 F6 | 	mov	arg02, #10
01414     00 60 06 F6 | 	mov	arg03, #0
01418     34 4E B0 FD | 	call	#__system___basic_print_char
0141c     01 2A 06 F6 | 	mov	result1, #1
01420     00 5C 06 F6 | 	mov	arg01, #0
01424     20 61 B0 FD | 	call	#__system___getiolock_0145
01428     15 01 68 FC | 	wrlong	#0, result1
0142c     00 2A 06 F6 | 	mov	result1, #0
01430     64 5F 02 F6 | 	mov	arg02, local48
01434                 | ' 
01434                 | ' ''---------- Set the (x,y) position of cursor
01434                 | ' 
01434                 | ' cursor_x:=x
01434     34 0E 06 F1 | 	add	objptr, #52
01438     07 B5 48 FC | 	wrbyte	#90, objptr
0143c                 | ' cursor_y:=y
0143c     01 0E 06 F1 | 	add	objptr, #1
01440     07 5F 42 FC | 	wrbyte	arg02, objptr
01444     35 0E 86 F1 | 	sub	objptr, #53
01448     00 5C 06 F6 | 	mov	arg01, #0
0144c     F8 60 B0 FD | 	call	#__system___getiolock_0145
01450     15 5D 02 F6 | 	mov	arg01, result1
01454     AC 4A B0 FD | 	call	#__system___lockmem
01458     00 2A 06 F6 | 	mov	result1, #0
0145c     04 00 00 FF 
01460     28 0F 06 F1 | 	add	objptr, ##2344
01464     07 5F 02 FB | 	rdlong	arg02, objptr
01468     04 00 00 FF 
0146c     28 0F 86 F1 | 	sub	objptr, ##2344
01470     00 5C 06 F6 | 	mov	arg01, #0
01474     00 60 06 F6 | 	mov	arg03, #0
01478     0A 62 06 F6 | 	mov	arg04, #10
0147c     64 4E B0 FD | 	call	#__system___basic_print_integer
01480     00 5C 06 F6 | 	mov	arg01, #0
01484     0A 5E 06 F6 | 	mov	arg02, #10
01488     00 60 06 F6 | 	mov	arg03, #0
0148c     C0 4D B0 FD | 	call	#__system___basic_print_char
01490     01 2A 06 F6 | 	mov	result1, #1
01494     00 5C 06 F6 | 	mov	arg01, #0
01498     AC 60 B0 FD | 	call	#__system___getiolock_0145
0149c     15 01 68 FC | 	wrlong	#0, result1
014a0     00 2A 06 F6 | 	mov	result1, #0
014a4     64 5F 02 F6 | 	mov	arg02, local48
014a8                 | ' 
014a8                 | ' ''---------- Set the (x,y) position of cursor
014a8                 | ' 
014a8                 | ' cursor_x:=x
014a8     34 0E 06 F1 | 	add	objptr, #52
014ac     07 BB 48 FC | 	wrbyte	#93, objptr
014b0                 | ' cursor_y:=y
014b0     01 0E 06 F1 | 	add	objptr, #1
014b4     07 5F 42 FC | 	wrbyte	arg02, objptr
014b8     35 0E 86 F1 | 	sub	objptr, #53
014bc     00 5C 06 F6 | 	mov	arg01, #0
014c0     84 60 B0 FD | 	call	#__system___getiolock_0145
014c4     15 5D 02 F6 | 	mov	arg01, result1
014c8     38 4A B0 FD | 	call	#__system___lockmem
014cc     00 2A 06 F6 | 	mov	result1, #0
014d0     04 00 00 FF 
014d4     1C 0F 06 F1 | 	add	objptr, ##2332
014d8     07 5F 02 FB | 	rdlong	arg02, objptr
014dc     04 00 00 FF 
014e0     1C 0F 86 F1 | 	sub	objptr, ##2332
014e4     00 5C 06 F6 | 	mov	arg01, #0
014e8     00 60 06 F6 | 	mov	arg03, #0
014ec     0A 62 06 F6 | 	mov	arg04, #10
014f0     F0 4D B0 FD | 	call	#__system___basic_print_integer
014f4     00 5C 06 F6 | 	mov	arg01, #0
014f8     0A 5E 06 F6 | 	mov	arg02, #10
014fc     00 60 06 F6 | 	mov	arg03, #0
01500     4C 4D B0 FD | 	call	#__system___basic_print_char
01504     01 2A 06 F6 | 	mov	result1, #1
01508     00 5C 06 F6 | 	mov	arg01, #0
0150c     38 60 B0 FD | 	call	#__system___getiolock_0145
01510     15 01 68 FC | 	wrlong	#0, result1
01514     00 2A 06 F6 | 	mov	result1, #0
01518     64 5F 02 F6 | 	mov	arg02, local48
0151c                 | ' 
0151c                 | ' ''---------- Set the (x,y) position of cursor
0151c                 | ' 
0151c                 | ' cursor_x:=x
0151c     34 0E 06 F1 | 	add	objptr, #52
01520     07 C7 48 FC | 	wrbyte	#99, objptr
01524                 | ' cursor_y:=y
01524     01 0E 06 F1 | 	add	objptr, #1
01528     07 5F 42 FC | 	wrbyte	arg02, objptr
0152c     35 0E 86 F1 | 	sub	objptr, #53
01530     00 5C 06 F6 | 	mov	arg01, #0
01534     10 60 B0 FD | 	call	#__system___getiolock_0145
01538     15 5D 02 F6 | 	mov	arg01, result1
0153c     C4 49 B0 FD | 	call	#__system___lockmem
01540     00 2A 06 F6 | 	mov	result1, #0
01544     04 00 00 FF 
01548     20 0F 06 F1 | 	add	objptr, ##2336
0154c     07 5F 02 FB | 	rdlong	arg02, objptr
01550     04 00 00 FF 
01554     20 0F 86 F1 | 	sub	objptr, ##2336
01558     00 5C 06 F6 | 	mov	arg01, #0
0155c     00 60 06 F6 | 	mov	arg03, #0
01560     0A 62 06 F6 | 	mov	arg04, #10
01564     7C 4D B0 FD | 	call	#__system___basic_print_integer
01568     00 5C 06 F6 | 	mov	arg01, #0
0156c     0A 5E 06 F6 | 	mov	arg02, #10
01570     00 60 06 F6 | 	mov	arg03, #0
01574     D8 4C B0 FD | 	call	#__system___basic_print_char
01578     01 2A 06 F6 | 	mov	result1, #1
0157c     00 5C 06 F6 | 	mov	arg01, #0
01580     C4 5F B0 FD | 	call	#__system___getiolock_0145
01584     15 01 68 FC | 	wrlong	#0, result1
01588     00 2A 06 F6 | 	mov	result1, #0
0158c                 | LR__0014
0158c     01 92 06 F1 | 	add	local21, #1
01590     1E AE 06 F1 | 	add	local35, #30
01594     04 B0 06 F1 | 	add	local36, #4
01598     1E B2 06 F1 | 	add	local37, #30
0159c     EC F8 9F FD | 	jmp	#LR__0010
015a0                 | LR__0015
015a0                 | ' print
015a0     00 5C 06 F6 | 	mov	arg01, #0
015a4     A0 5F B0 FD | 	call	#__system___getiolock_0145
015a8     15 5D 02 F6 | 	mov	arg01, result1
015ac     54 49 B0 FD | 	call	#__system___lockmem
015b0     00 2A 06 F6 | 	mov	result1, #0
015b4     00 5C 06 F6 | 	mov	arg01, #0
015b8     0A 5E 06 F6 | 	mov	arg02, #10
015bc     00 60 06 F6 | 	mov	arg03, #0
015c0     8C 4C B0 FD | 	call	#__system___basic_print_char
015c4     01 2A 06 F6 | 	mov	result1, #1
015c8     00 5C 06 F6 | 	mov	arg01, #0
015cc     78 5F B0 FD | 	call	#__system___getiolock_0145
015d0     15 01 68 FC | 	wrlong	#0, result1
015d4     03 00 00 FF 
015d8     44 0F 06 F1 | 	add	objptr, ##1860
015dc     03 00 00 FF 
015e0     F0 16 06 F1 | 	add	ptr__audio016_spin2_dat__, ##1776
015e4                 | ' 
015e4                 | ' 
015e4                 | ' channel1[0]:=@null
015e4     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
015e8                 | ' channel1[1]:=0
015e8     04 0E 06 F1 | 	add	objptr, #4
015ec     07 01 68 FC | 	wrlong	#0, objptr
015f0                 | ' channel1[2]:=0
015f0     04 0E 06 F1 | 	add	objptr, #4
015f4     07 01 68 FC | 	wrlong	#0, objptr
015f8                 | ' channel1[3]:=2
015f8     04 0E 06 F1 | 	add	objptr, #4
015fc     07 05 68 FC | 	wrlong	#2, objptr
01600                 | ' channel1[4]:=0
01600     04 0E 06 F1 | 	add	objptr, #4
01604     07 01 68 FC | 	wrlong	#0, objptr
01608                 | ' channel1[5]:=8192
01608     04 0E 06 F1 | 	add	objptr, #4
0160c     10 00 80 FF 
01610     07 01 68 FC | 	wrlong	##8192, objptr
01614                 | ' channel1[6]:=101
01614     04 0E 06 F1 | 	add	objptr, #4
01618     07 CB 68 FC | 	wrlong	#101, objptr
0161c                 | ' channel1[7]:=2
0161c     04 0E 06 F1 | 	add	objptr, #4
01620     07 05 68 FC | 	wrlong	#2, objptr
01624                 | ' 
01624                 | ' channel2[0]:=@null
01624     08 0E 06 F1 | 	add	objptr, #8
01628     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
0162c                 | ' channel2[1]:=0
0162c     04 0E 06 F1 | 	add	objptr, #4
01630     07 01 68 FC | 	wrlong	#0, objptr
01634                 | ' channel2[2]:=0
01634     04 0E 06 F1 | 	add	objptr, #4
01638     07 01 68 FC | 	wrlong	#0, objptr
0163c                 | ' channel2[3]:=2
0163c     04 0E 06 F1 | 	add	objptr, #4
01640     07 05 68 FC | 	wrlong	#2, objptr
01644                 | ' channel2[4]:=0
01644     04 0E 06 F1 | 	add	objptr, #4
01648     07 01 68 FC | 	wrlong	#0, objptr
0164c                 | ' channel2[5]:=8192
0164c     04 0E 06 F1 | 	add	objptr, #4
01650     10 00 80 FF 
01654     07 01 68 FC | 	wrlong	##8192, objptr
01658                 | ' channel2[6]:=103
01658     04 0E 06 F1 | 	add	objptr, #4
0165c     07 CF 68 FC | 	wrlong	#103, objptr
01660                 | ' channel2[7]:=2
01660     04 0E 06 F1 | 	add	objptr, #4
01664     07 05 68 FC | 	wrlong	#2, objptr
01668                 | ' 
01668                 | ' channel3[0]:=@null
01668     08 0E 06 F1 | 	add	objptr, #8
0166c     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01670                 | ' channel3[1]:=0
01670     04 0E 06 F1 | 	add	objptr, #4
01674     07 01 68 FC | 	wrlong	#0, objptr
01678                 | ' channel3[2]:=0
01678     04 0E 06 F1 | 	add	objptr, #4
0167c     07 01 68 FC | 	wrlong	#0, objptr
01680                 | ' channel3[3]:=2
01680     04 0E 06 F1 | 	add	objptr, #4
01684     07 05 68 FC | 	wrlong	#2, objptr
01688                 | ' channel3[4]:=0
01688     04 0E 06 F1 | 	add	objptr, #4
0168c     07 01 68 FC | 	wrlong	#0, objptr
01690                 | ' channel3[5]:=8192
01690     04 0E 06 F1 | 	add	objptr, #4
01694     10 00 80 FF 
01698     07 01 68 FC | 	wrlong	##8192, objptr
0169c                 | ' channel3[6]:=107
0169c     04 0E 06 F1 | 	add	objptr, #4
016a0     07 D7 68 FC | 	wrlong	#107, objptr
016a4                 | ' channel3[7]:=2
016a4     04 0E 06 F1 | 	add	objptr, #4
016a8     07 05 68 FC | 	wrlong	#2, objptr
016ac                 | ' 
016ac                 | ' channel4[0]:=@null
016ac     08 0E 06 F1 | 	add	objptr, #8
016b0     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
016b4                 | ' channel4[1]:=0
016b4     04 0E 06 F1 | 	add	objptr, #4
016b8     07 01 68 FC | 	wrlong	#0, objptr
016bc                 | ' channel4[2]:=0
016bc     04 0E 06 F1 | 	add	objptr, #4
016c0     07 01 68 FC | 	wrlong	#0, objptr
016c4                 | ' channel4[3]:=2
016c4     04 0E 06 F1 | 	add	objptr, #4
016c8     07 05 68 FC | 	wrlong	#2, objptr
016cc                 | ' channel4[4]:=0
016cc     04 0E 06 F1 | 	add	objptr, #4
016d0     07 01 68 FC | 	wrlong	#0, objptr
016d4                 | ' channel4[5]:=8192
016d4     04 0E 06 F1 | 	add	objptr, #4
016d8     10 00 80 FF 
016dc     07 01 68 FC | 	wrlong	##8192, objptr
016e0                 | ' channel4[6]:=109
016e0     04 0E 06 F1 | 	add	objptr, #4
016e4     07 DB 68 FC | 	wrlong	#109, objptr
016e8                 | ' channel4[7]:=2
016e8     04 0E 06 F1 | 	add	objptr, #4
016ec     07 05 68 FC | 	wrlong	#2, objptr
016f0                 | ' channel4[8]:=1
016f0     04 0E 06 F1 | 	add	objptr, #4
016f4     07 03 68 FC | 	wrlong	#1, objptr
016f8                 | ' 
016f8                 | ' channel5[0]:=@null
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01700                 | ' channel5[1]:=0
01700     04 0E 06 F1 | 	add	objptr, #4
01704     07 01 68 FC | 	wrlong	#0, objptr
01708                 | ' channel5[2]:=0
01708     04 0E 06 F1 | 	add	objptr, #4
0170c     07 01 68 FC | 	wrlong	#0, objptr
01710                 | ' channel5[3]:=2
01710     04 0E 06 F1 | 	add	objptr, #4
01714     07 05 68 FC | 	wrlong	#2, objptr
01718                 | ' channel5[4]:=0
01718     04 0E 06 F1 | 	add	objptr, #4
0171c     07 01 68 FC | 	wrlong	#0, objptr
01720                 | ' channel5[5]:=8192
01720     04 0E 06 F1 | 	add	objptr, #4
01724     10 00 80 FF 
01728     07 01 68 FC | 	wrlong	##8192, objptr
0172c                 | ' channel5[6]:=113
0172c     04 0E 06 F1 | 	add	objptr, #4
01730     07 E3 68 FC | 	wrlong	#113, objptr
01734                 | ' channel5[7]:=2
01734     04 0E 06 F1 | 	add	objptr, #4
01738     07 05 68 FC | 	wrlong	#2, objptr
0173c                 | ' 
0173c                 | ' channel6[0]:=@null
0173c     08 0E 06 F1 | 	add	objptr, #8
01740     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01744                 | ' channel6[1]:=0
01744     04 0E 06 F1 | 	add	objptr, #4
01748     07 01 68 FC | 	wrlong	#0, objptr
0174c                 | ' channel6[2]:=0
0174c     04 0E 06 F1 | 	add	objptr, #4
01750     07 01 68 FC | 	wrlong	#0, objptr
01754                 | ' channel6[3]:=2
01754     04 0E 06 F1 | 	add	objptr, #4
01758     07 05 68 FC | 	wrlong	#2, objptr
0175c                 | ' channel6[4]:=0
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 01 68 FC | 	wrlong	#0, objptr
01764                 | ' channel6[5]:=8192
01764     04 0E 06 F1 | 	add	objptr, #4
01768     10 00 80 FF 
0176c     07 01 68 FC | 	wrlong	##8192, objptr
01770                 | ' channel6[6]:=127
01770     04 0E 06 F1 | 	add	objptr, #4
01774     07 FF 68 FC | 	wrlong	#127, objptr
01778                 | ' channel6[7]:=2
01778     04 0E 06 F1 | 	add	objptr, #4
0177c     07 05 68 FC | 	wrlong	#2, objptr
01780                 | ' 
01780                 | ' channel7[0]:=@null
01780     08 0E 06 F1 | 	add	objptr, #8
01784     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01788                 | ' channel7[1]:=0
01788     04 0E 06 F1 | 	add	objptr, #4
0178c     07 01 68 FC | 	wrlong	#0, objptr
01790                 | ' channel7[2]:=0
01790     04 0E 06 F1 | 	add	objptr, #4
01794     07 01 68 FC | 	wrlong	#0, objptr
01798                 | ' channel7[3]:=2
01798     04 0E 06 F1 | 	add	objptr, #4
0179c     07 05 68 FC | 	wrlong	#2, objptr
017a0                 | ' channel7[4]:=0
017a0     04 0E 06 F1 | 	add	objptr, #4
017a4     07 01 68 FC | 	wrlong	#0, objptr
017a8                 | ' channel7[5]:=8192
017a8     04 0E 06 F1 | 	add	objptr, #4
017ac     10 00 80 FF 
017b0     07 01 68 FC | 	wrlong	##8192, objptr
017b4                 | ' channel7[6]:=131
017b4     04 0E 06 F1 | 	add	objptr, #4
017b8     07 07 69 FC | 	wrlong	#131, objptr
017bc                 | ' channel7[7]:=2
017bc     04 0E 06 F1 | 	add	objptr, #4
017c0     07 05 68 FC | 	wrlong	#2, objptr
017c4                 | ' 
017c4                 | ' channel8[0]:=@null
017c4     08 0E 06 F1 | 	add	objptr, #8
017c8     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
017cc                 | ' channel8[1]:=0
017cc     04 0E 06 F1 | 	add	objptr, #4
017d0     07 01 68 FC | 	wrlong	#0, objptr
017d4                 | ' channel8[2]:=0
017d4     04 0E 06 F1 | 	add	objptr, #4
017d8     07 01 68 FC | 	wrlong	#0, objptr
017dc                 | ' channel8[3]:=2
017dc     04 0E 06 F1 | 	add	objptr, #4
017e0     07 05 68 FC | 	wrlong	#2, objptr
017e4                 | ' channel8[4]:=0
017e4     04 0E 06 F1 | 	add	objptr, #4
017e8     07 01 68 FC | 	wrlong	#0, objptr
017ec                 | ' channel8[5]:=8192
017ec     04 0E 06 F1 | 	add	objptr, #4
017f0     10 00 80 FF 
017f4     07 01 68 FC | 	wrlong	##8192, objptr
017f8                 | ' channel8[6]:=137
017f8     04 0E 06 F1 | 	add	objptr, #4
017fc     07 13 69 FC | 	wrlong	#137, objptr
01800                 | ' channel8[7]:=2
01800     04 0E 06 F1 | 	add	objptr, #4
01804     07 05 68 FC | 	wrlong	#2, objptr
01808                 | ' 
01808                 | ' channel1[8]:=1
01808     F8 0E 86 F1 | 	sub	objptr, #248
0180c     07 03 68 FC | 	wrlong	#1, objptr
01810                 | ' channel2[8]:=1
01810     24 0E 06 F1 | 	add	objptr, #36
01814     07 03 68 FC | 	wrlong	#1, objptr
01818                 | ' channel3[8]:=1
01818     24 0E 06 F1 | 	add	objptr, #36
0181c     07 03 68 FC | 	wrlong	#1, objptr
01820                 | ' channel4[8]:=1
01820     24 0E 06 F1 | 	add	objptr, #36
01824     07 03 68 FC | 	wrlong	#1, objptr
01828                 | ' channel5[8]:=1
01828     24 0E 06 F1 | 	add	objptr, #36
0182c     07 03 68 FC | 	wrlong	#1, objptr
01830                 | ' channel6[8]:=1
01830     24 0E 06 F1 | 	add	objptr, #36
01834     07 03 68 FC | 	wrlong	#1, objptr
01838                 | ' channel7[8]:=1
01838     24 0E 06 F1 | 	add	objptr, #36
0183c     07 03 68 FC | 	wrlong	#1, objptr
01840                 | ' channel8[8]:=1
01840     24 0E 06 F1 | 	add	objptr, #36
01844     07 03 68 FC | 	wrlong	#1, objptr
01848     1C 0F 86 F1 | 	sub	objptr, #284
0184c                 | ' 
0184c                 | ' cog:=coginit(16,@audio,@channel1)
0184c     03 00 00 FF 
01850     F0 16 86 F1 | 	sub	ptr__audio016_spin2_dat__, ##1776
01854     0B 5F 02 F6 | 	mov	arg02, ptr__audio016_spin2_dat__
01858     07 61 02 F6 | 	mov	arg03, objptr
0185c     10 5C 06 F6 | 	mov	arg01, #16
01860     28 60 62 FD | 	setq	arg03
01864     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01868     01 5C 66 C6 |  if_b	neg	arg01, #1
0186c     2E 2B 02 F6 | 	mov	result1, arg01
01870                 | ' return cog
01870     B0 0F 06 F1 | 	add	objptr, #432
01874     07 01 68 FC | 	wrlong	#0, objptr
01878     04 0E 06 F1 | 	add	objptr, #4
0187c     07 01 68 FC | 	wrlong	#0, objptr
01880     04 0E 06 F1 | 	add	objptr, #4
01884     07 01 68 FC | 	wrlong	#0, objptr
01888     04 0E 06 F1 | 	add	objptr, #4
0188c     07 01 68 FC | 	wrlong	#0, objptr
01890     04 00 00 FF 
01894     00 0F 86 F1 | 	sub	objptr, ##2304
01898                 | ' getinfo(ma,samples)
01898                 | ' 
01898                 | ' paula.start
01898                 | ' 
01898                 | ' old1=0 : old2=0 :old3=0 : old4=0
01898                 | ' 
01898                 | ' do
01898                 | LR__0016
01898                 | ' 
01898                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01898                 | ' 
01898                 | ' repeat i from 1 to amount
01898     01 CC 06 F6 | 	mov	local50, #1
0189c                 | LR__0017
0189c                 | '   repeat until vblank==0
0189c                 | LR__0018
0189c     40 0E 06 F1 | 	add	objptr, #64
018a0     07 CF 0A FB | 	rdlong	local51, objptr wz
018a4     40 0E 86 F1 | 	sub	objptr, #64
018a8     0C 00 90 AD |  if_e	jmp	#LR__0019
018ac                 | '     waitus(100)
018ac     64 5C 06 F6 | 	mov	arg01, #100
018b0     94 48 B0 FD | 	call	#__system___waitus
018b4     E4 FF 9F FD | 	jmp	#LR__0018
018b8                 | LR__0019
018b8                 | '   repeat until vblank==1
018b8                 | LR__0020
018b8     40 0E 06 F1 | 	add	objptr, #64
018bc     07 CF 02 FB | 	rdlong	local51, objptr
018c0     40 0E 86 F1 | 	sub	objptr, #64
018c4     01 CE 0E F2 | 	cmp	local51, #1 wz
018c8     0C 00 90 AD |  if_e	jmp	#LR__0021
018cc                 | '     waitus(100)
018cc     64 5C 06 F6 | 	mov	arg01, #100
018d0     74 48 B0 FD | 	call	#__system___waitus
018d4     E0 FF 9F FD | 	jmp	#LR__0020
018d8                 | LR__0021
018d8     F0 CD 6E FB | 	djnz	local50, #LR__0017
018dc     02 00 00 FF 
018e0     48 0F 06 F1 | 	add	objptr, ##1352
018e4     54 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018e8     A7 0E 06 F1 | 	add	objptr, #167
018ec     07 7D 02 FB | 	rdlong	local10, objptr
018f0     1F 7C 26 F4 | 	bith	local10, #31
018f4     55 0F 06 F1 | 	add	objptr, #341
018f8     07 7D 62 FC | 	wrlong	local10, objptr
018fc     04 0E 06 F1 | 	add	objptr, #4
01900     07 03 68 FC | 	wrlong	#1, objptr
01904     45 0F 86 F1 | 	sub	objptr, #325
01908     07 7D E2 FA | 	rdword	local10, objptr
0190c     08 0E 06 F1 | 	add	objptr, #8
01910     07 D1 02 FB | 	rdlong	local52, objptr
01914     68 7D 82 F1 | 	sub	local10, local52
01918     41 0F 06 F1 | 	add	objptr, #321
0191c     07 7D 62 FC | 	wrlong	local10, objptr
01920     49 0F 86 F1 | 	sub	objptr, #329
01924     07 7D E2 FA | 	rdword	local10, objptr
01928     4D 0F 06 F1 | 	add	objptr, #333
0192c     07 7D 62 FC | 	wrlong	local10, objptr
01930     09 0F 86 F1 | 	sub	objptr, #265
01934     07 7D 02 FB | 	rdlong	local10, objptr
01938     10 0E 06 F1 | 	add	objptr, #16
0193c     07 D1 02 FB | 	rdlong	local52, objptr
01940     68 7D 02 F1 | 	add	local10, local52
01944     27 0F 86 F1 | 	sub	objptr, #295
01948     07 85 02 FB | 	rdlong	local14, objptr
0194c     42 7D 02 FD | 	qmul	local10, local14
01950     18 D2 62 FD | 	getqx	local53
01954     01 00 00 FF 
01958     24 0E 06 F1 | 	add	objptr, ##548
0195c     07 D3 62 FC | 	wrlong	local53, objptr
01960     04 0E 06 F1 | 	add	objptr, #4
01964     0C 00 80 FF 
01968     07 01 68 FC | 	wrlong	##6144, objptr
0196c     31 0F 86 F1 | 	sub	objptr, #305
01970     07 7D 02 FB | 	rdlong	local10, objptr
01974     10 0E 06 F1 | 	add	objptr, #16
01978     07 D1 02 FB | 	rdlong	local52, objptr
0197c     68 7D 02 F1 | 	add	local10, local52
01980     25 0F 06 F1 | 	add	objptr, #293
01984     07 7D 62 FC | 	wrlong	local10, objptr
01988     04 0E 06 F1 | 	add	objptr, #4
0198c     07 03 68 FC | 	wrlong	#1, objptr
01990     08 0E 06 F1 | 	add	objptr, #8
01994     07 7D 02 FB | 	rdlong	local10, objptr
01998     1F 7C 26 F4 | 	bith	local10, #31
0199c     9C 0F 06 F1 | 	add	objptr, #412
019a0     07 7D 62 FC | 	wrlong	local10, objptr
019a4     01 00 00 FF 
019a8     11 0F 86 F1 | 	sub	objptr, ##785
019ac     07 7D 02 FB | 	rdlong	local10, objptr
019b0     75 0F 06 F1 | 	add	objptr, #373
019b4     07 7D 62 FC | 	wrlong	local10, objptr
019b8     04 0E 06 F1 | 	add	objptr, #4
019bc     07 03 68 FC | 	wrlong	#1, objptr
019c0     67 0F 86 F1 | 	sub	objptr, #359
019c4     07 7D E2 FA | 	rdword	local10, objptr
019c8     0A 0E 06 F1 | 	add	objptr, #10
019cc     07 D1 02 FB | 	rdlong	local52, objptr
019d0     68 7D 82 F1 | 	sub	local10, local52
019d4     61 0F 06 F1 | 	add	objptr, #353
019d8     07 7D 62 FC | 	wrlong	local10, objptr
019dc     6B 0F 86 F1 | 	sub	objptr, #363
019e0     07 7D E2 FA | 	rdword	local10, objptr
019e4     6F 0F 06 F1 | 	add	objptr, #367
019e8     07 7D 62 FC | 	wrlong	local10, objptr
019ec     29 0F 86 F1 | 	sub	objptr, #297
019f0     07 7D 02 FB | 	rdlong	local10, objptr
019f4     10 0E 06 F1 | 	add	objptr, #16
019f8     07 D1 02 FB | 	rdlong	local52, objptr
019fc     68 7D 02 F1 | 	add	local10, local52
01a00     2B 0F 86 F1 | 	sub	objptr, #299
01a04     07 85 02 FB | 	rdlong	local14, objptr
01a08     42 7D 02 FD | 	qmul	local10, local14
01a0c     18 D2 62 FD | 	getqx	local53
01a10     01 00 00 FF 
01a14     48 0E 06 F1 | 	add	objptr, ##584
01a18     07 D3 62 FC | 	wrlong	local53, objptr
01a1c     04 0E 06 F1 | 	add	objptr, #4
01a20     14 00 80 FF 
01a24     07 01 68 FC | 	wrlong	##10240, objptr
01a28     51 0F 86 F1 | 	sub	objptr, #337
01a2c     07 7D 02 FB | 	rdlong	local10, objptr
01a30     10 0E 06 F1 | 	add	objptr, #16
01a34     07 D1 02 FB | 	rdlong	local52, objptr
01a38     68 7D 02 F1 | 	add	local10, local52
01a3c     45 0F 06 F1 | 	add	objptr, #325
01a40     07 7D 62 FC | 	wrlong	local10, objptr
01a44     04 0E 06 F1 | 	add	objptr, #4
01a48     07 03 68 FC | 	wrlong	#1, objptr
01a4c     08 0E 06 F1 | 	add	objptr, #8
01a50     07 7D 02 FB | 	rdlong	local10, objptr
01a54     1F 7C 26 F4 | 	bith	local10, #31
01a58     7C 0F 06 F1 | 	add	objptr, #380
01a5c     07 7D 62 FC | 	wrlong	local10, objptr
01a60     01 00 00 FF 
01a64     11 0F 86 F1 | 	sub	objptr, ##785
01a68     07 7D 02 FB | 	rdlong	local10, objptr
01a6c     95 0F 06 F1 | 	add	objptr, #405
01a70     07 7D 62 FC | 	wrlong	local10, objptr
01a74     04 0E 06 F1 | 	add	objptr, #4
01a78     07 03 68 FC | 	wrlong	#1, objptr
01a7c     89 0F 86 F1 | 	sub	objptr, #393
01a80     07 7D E2 FA | 	rdword	local10, objptr
01a84     0C 0E 06 F1 | 	add	objptr, #12
01a88     07 D1 02 FB | 	rdlong	local52, objptr
01a8c     68 7D 82 F1 | 	sub	local10, local52
01a90     81 0F 06 F1 | 	add	objptr, #385
01a94     07 7D 62 FC | 	wrlong	local10, objptr
01a98     8D 0F 86 F1 | 	sub	objptr, #397
01a9c     07 7D E2 FA | 	rdword	local10, objptr
01aa0     91 0F 06 F1 | 	add	objptr, #401
01aa4     07 7D 62 FC | 	wrlong	local10, objptr
01aa8     49 0F 86 F1 | 	sub	objptr, #329
01aac     07 7D 02 FB | 	rdlong	local10, objptr
01ab0     10 0E 06 F1 | 	add	objptr, #16
01ab4     07 D1 02 FB | 	rdlong	local52, objptr
01ab8     68 7D 02 F1 | 	add	local10, local52
01abc     2F 0F 86 F1 | 	sub	objptr, #303
01ac0     07 85 02 FB | 	rdlong	local14, objptr
01ac4     42 7D 02 FD | 	qmul	local10, local14
01ac8     18 D2 62 FD | 	getqx	local53
01acc     01 00 00 FF 
01ad0     6C 0E 06 F1 | 	add	objptr, ##620
01ad4     07 D3 62 FC | 	wrlong	local53, objptr
01ad8     04 0E 06 F1 | 	add	objptr, #4
01adc     14 00 80 FF 
01ae0     07 01 68 FC | 	wrlong	##10240, objptr
01ae4     71 0F 86 F1 | 	sub	objptr, #369
01ae8     07 7D 02 FB | 	rdlong	local10, objptr
01aec     10 0E 06 F1 | 	add	objptr, #16
01af0     07 D1 02 FB | 	rdlong	local52, objptr
01af4     68 7D 02 F1 | 	add	local10, local52
01af8     65 0F 06 F1 | 	add	objptr, #357
01afc     07 7D 62 FC | 	wrlong	local10, objptr
01b00     04 0E 06 F1 | 	add	objptr, #4
01b04     07 03 68 FC | 	wrlong	#1, objptr
01b08     08 0E 06 F1 | 	add	objptr, #8
01b0c     07 7D 02 FB | 	rdlong	local10, objptr
01b10     1F 7C 26 F4 | 	bith	local10, #31
01b14     5C 0F 06 F1 | 	add	objptr, #348
01b18     07 7D 62 FC | 	wrlong	local10, objptr
01b1c     01 00 00 FF 
01b20     11 0F 86 F1 | 	sub	objptr, ##785
01b24     07 7D 02 FB | 	rdlong	local10, objptr
01b28     B5 0F 06 F1 | 	add	objptr, #437
01b2c     07 7D 62 FC | 	wrlong	local10, objptr
01b30     04 0E 06 F1 | 	add	objptr, #4
01b34     07 03 68 FC | 	wrlong	#1, objptr
01b38     AB 0F 86 F1 | 	sub	objptr, #427
01b3c     07 7D E2 FA | 	rdword	local10, objptr
01b40     0E 0E 06 F1 | 	add	objptr, #14
01b44     07 D1 02 FB | 	rdlong	local52, objptr
01b48     68 7D 82 F1 | 	sub	local10, local52
01b4c     A1 0F 06 F1 | 	add	objptr, #417
01b50     07 7D 62 FC | 	wrlong	local10, objptr
01b54     AF 0F 86 F1 | 	sub	objptr, #431
01b58     07 7D E2 FA | 	rdword	local10, objptr
01b5c     B3 0F 06 F1 | 	add	objptr, #435
01b60     07 7D 62 FC | 	wrlong	local10, objptr
01b64     69 0F 86 F1 | 	sub	objptr, #361
01b68     07 7D 02 FB | 	rdlong	local10, objptr
01b6c     10 0E 06 F1 | 	add	objptr, #16
01b70     07 D1 02 FB | 	rdlong	local52, objptr
01b74     68 7D 02 F1 | 	add	local10, local52
01b78     33 0F 86 F1 | 	sub	objptr, #307
01b7c     07 85 02 FB | 	rdlong	local14, objptr
01b80     42 7D 02 FD | 	qmul	local10, local14
01b84     18 D2 62 FD | 	getqx	local53
01b88     01 00 00 FF 
01b8c     90 0E 06 F1 | 	add	objptr, ##656
01b90     07 D3 62 FC | 	wrlong	local53, objptr
01b94     04 0E 06 F1 | 	add	objptr, #4
01b98     0C 00 80 FF 
01b9c     07 01 68 FC | 	wrlong	##6144, objptr
01ba0     91 0F 86 F1 | 	sub	objptr, #401
01ba4     07 7D 02 FB | 	rdlong	local10, objptr
01ba8     10 0E 06 F1 | 	add	objptr, #16
01bac     07 D1 02 FB | 	rdlong	local52, objptr
01bb0     68 7D 02 F1 | 	add	local10, local52
01bb4     85 0F 06 F1 | 	add	objptr, #389
01bb8     07 7D 62 FC | 	wrlong	local10, objptr
01bbc     04 0E 06 F1 | 	add	objptr, #4
01bc0     07 03 68 FC | 	wrlong	#1, objptr
01bc4                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01bc4                 | ' 	paula.channel4(1)=1
01bc4                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01bc4                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01bc4                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*mainvolume
01bc4                 | ' 	paula.channel4(5)=8192-2048
01bc4                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01bc4                 | ' 	paula.channel4(7)=1
01bc4                 | ' 
01bc4                 | '  
01bc4                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 : old1=tracker.trigger(0)
01bc4     8E 0E 86 F1 | 	sub	objptr, #142
01bc8     07 7D C2 FA | 	rdbyte	local10, objptr
01bcc     B6 0F 06 F1 | 	add	objptr, #438
01bd0     07 D1 02 FB | 	rdlong	local52, objptr
01bd4     04 00 00 FF 
01bd8     F4 0E 86 F1 | 	sub	objptr, ##2292
01bdc     68 7D 0A F2 | 	cmp	local10, local52 wz
01be0     24 00 90 AD |  if_e	jmp	#LR__0022
01be4     03 00 00 FF 
01be8     64 0F 06 F1 | 	add	objptr, ##1892
01bec     07 01 68 FC | 	wrlong	#0, objptr
01bf0     26 0E 86 F1 | 	sub	objptr, #38
01bf4     07 7D C2 FA | 	rdbyte	local10, objptr
01bf8     B6 0F 06 F1 | 	add	objptr, #438
01bfc     07 7D 62 FC | 	wrlong	local10, objptr
01c00     04 00 00 FF 
01c04     F4 0E 86 F1 | 	sub	objptr, ##2292
01c08                 | LR__0022
01c08                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 : old2=tracker.trigger(1)  
01c08     03 00 00 FF 
01c0c     3F 0F 06 F1 | 	add	objptr, ##1855
01c10     07 7D C2 FA | 	rdbyte	local10, objptr
01c14     B9 0F 06 F1 | 	add	objptr, #441
01c18     07 D1 02 FB | 	rdlong	local52, objptr
01c1c     04 00 00 FF 
01c20     F8 0E 86 F1 | 	sub	objptr, ##2296
01c24     68 7D 0A F2 | 	cmp	local10, local52 wz
01c28     24 00 90 AD |  if_e	jmp	#LR__0023
01c2c     03 00 00 FF 
01c30     88 0F 06 F1 | 	add	objptr, ##1928
01c34     07 01 68 FC | 	wrlong	#0, objptr
01c38     49 0E 86 F1 | 	sub	objptr, #73
01c3c     07 7D C2 FA | 	rdbyte	local10, objptr
01c40     B9 0F 06 F1 | 	add	objptr, #441
01c44     07 7D 62 FC | 	wrlong	local10, objptr
01c48     04 00 00 FF 
01c4c     F8 0E 86 F1 | 	sub	objptr, ##2296
01c50                 | LR__0023
01c50                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 : old3=tracker.trigger(2)  
01c50     03 00 00 FF 
01c54     40 0F 06 F1 | 	add	objptr, ##1856
01c58     07 7D C2 FA | 	rdbyte	local10, objptr
01c5c     BC 0F 06 F1 | 	add	objptr, #444
01c60     07 D1 02 FB | 	rdlong	local52, objptr
01c64     04 00 00 FF 
01c68     FC 0E 86 F1 | 	sub	objptr, ##2300
01c6c     68 7D 0A F2 | 	cmp	local10, local52 wz
01c70     24 00 90 AD |  if_e	jmp	#LR__0024
01c74     03 00 00 FF 
01c78     AC 0F 06 F1 | 	add	objptr, ##1964
01c7c     07 01 68 FC | 	wrlong	#0, objptr
01c80     6C 0E 86 F1 | 	sub	objptr, #108
01c84     07 7D C2 FA | 	rdbyte	local10, objptr
01c88     BC 0F 06 F1 | 	add	objptr, #444
01c8c     07 7D 62 FC | 	wrlong	local10, objptr
01c90     04 00 00 FF 
01c94     FC 0E 86 F1 | 	sub	objptr, ##2300
01c98                 | LR__0024
01c98                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 : old4=tracker.trigger(3) 
01c98     03 00 00 FF 
01c9c     41 0F 06 F1 | 	add	objptr, ##1857
01ca0     07 7D C2 FA | 	rdbyte	local10, objptr
01ca4     BF 0F 06 F1 | 	add	objptr, #447
01ca8     07 D1 02 FB | 	rdlong	local52, objptr
01cac     04 00 00 FF 
01cb0     00 0F 86 F1 | 	sub	objptr, ##2304
01cb4     68 7D 0A F2 | 	cmp	local10, local52 wz
01cb8     24 00 90 AD |  if_e	jmp	#LR__0025
01cbc     03 00 00 FF 
01cc0     D0 0F 06 F1 | 	add	objptr, ##2000
01cc4     07 01 68 FC | 	wrlong	#0, objptr
01cc8     8F 0E 86 F1 | 	sub	objptr, #143
01ccc     07 7D C2 FA | 	rdbyte	local10, objptr
01cd0     BF 0F 06 F1 | 	add	objptr, #447
01cd4     07 7D 62 FC | 	wrlong	local10, objptr
01cd8     04 00 00 FF 
01cdc     00 0F 86 F1 | 	sub	objptr, ##2304
01ce0                 | LR__0025
01ce0     2C 5D 06 F6 | 	mov	arg01, #300
01ce4     60 44 B0 FD | 	call	#__system___waitus
01ce8     03 00 00 FF 
01cec     64 0F 06 F1 | 	add	objptr, ##1892
01cf0     FF FF FF FF 
01cf4     07 FF 6B FC | 	wrlong	##-1, objptr
01cf8     24 0E 06 F1 | 	add	objptr, #36
01cfc     FF FF FF FF 
01d00     07 FF 6B FC | 	wrlong	##-1, objptr
01d04     24 0E 06 F1 | 	add	objptr, #36
01d08     FF FF FF FF 
01d0c     07 FF 6B FC | 	wrlong	##-1, objptr
01d10     24 0E 06 F1 | 	add	objptr, #36
01d14     FF FF FF FF 
01d18     07 FF 6B FC | 	wrlong	##-1, objptr
01d1c     1D 5E 06 F6 | 	mov	arg02, #29
01d20                 | ' 
01d20                 | ' ''---------- Set the (x,y) position of cursor
01d20                 | ' 
01d20                 | ' cursor_x:=x
01d20     03 00 00 FF 
01d24     9C 0F 86 F1 | 	sub	objptr, ##1948
01d28     07 0B 48 FC | 	wrbyte	#5, objptr
01d2c                 | ' cursor_y:=y
01d2c     01 0E 06 F1 | 	add	objptr, #1
01d30     07 3B 48 FC | 	wrbyte	#29, objptr
01d34     02 00 00 FF 
01d38     CA 0F 06 F1 | 	add	objptr, ##1482
01d3c     07 D5 C2 FA | 	rdbyte	local54, objptr
01d40     02 D4 66 F0 | 	shl	local54, #2
01d44     01 00 00 FF 
01d48     65 0E 06 F1 | 	add	objptr, ##613
01d4c     07 D5 02 F1 | 	add	local54, objptr
01d50     6A 5D 02 FB | 	rdlong	arg01, local54
01d54     04 00 00 FF 
01d58     64 0E 86 F1 | 	sub	objptr, ##2148
01d5c     EC 08 B0 FD | 	call	#_hng030rm_spin2_write
01d60     04 00 00 FF 
01d64     E8 0E 06 F1 | 	add	objptr, ##2280
01d68     07 5D 02 FB | 	rdlong	arg01, objptr
01d6c     04 00 00 FF 
01d70     E8 0E 86 F1 | 	sub	objptr, ##2280
01d74     D4 08 B0 FD | 	call	#_hng030rm_spin2_write
01d78                 | ' 
01d78                 | ' ''---------- Set the (x,y) position of cursor
01d78                 | ' 
01d78                 | ' cursor_x:=x
01d78     34 0E 06 F1 | 	add	objptr, #52
01d7c     07 03 48 FC | 	wrbyte	#1, objptr
01d80                 | ' cursor_y:=y
01d80     01 0E 06 F1 | 	add	objptr, #1
01d84     07 3B 48 FC | 	wrbyte	#29, objptr
01d88     02 00 00 FF 
01d8c     F2 0F 06 F1 | 	add	objptr, ##1522
01d90     07 5D 02 FB | 	rdlong	arg01, objptr
01d94     10 0E 06 F1 | 	add	objptr, #16
01d98     07 D5 02 FB | 	rdlong	local54, objptr
01d9c     03 00 00 FF 
01da0     37 0E 86 F1 | 	sub	objptr, ##1591
01da4     6A 5D 02 F1 | 	add	arg01, local54
01da8     03 5E 06 F6 | 	mov	arg02, #3
01dac     18 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01db0     15 5D 02 F6 | 	mov	arg01, result1
01db4     94 08 B0 FD | 	call	#_hng030rm_spin2_write
01db8     1D 5E 06 F6 | 	mov	arg02, #29
01dbc                 | ' 
01dbc                 | ' ''---------- Set the (x,y) position of cursor
01dbc                 | ' 
01dbc                 | ' cursor_x:=x
01dbc     34 0E 06 F1 | 	add	objptr, #52
01dc0     07 41 48 FC | 	wrbyte	#32, objptr
01dc4                 | ' cursor_y:=y
01dc4     01 0E 06 F1 | 	add	objptr, #1
01dc8     07 3B 48 FC | 	wrbyte	#29, objptr
01dcc     02 00 00 FF 
01dd0     CB 0F 06 F1 | 	add	objptr, ##1483
01dd4     07 D5 C2 FA | 	rdbyte	local54, objptr
01dd8     02 D4 66 F0 | 	shl	local54, #2
01ddc     01 00 00 FF 
01de0     64 0E 06 F1 | 	add	objptr, ##612
01de4     07 D5 02 F1 | 	add	local54, objptr
01de8     6A 5D 02 FB | 	rdlong	arg01, local54
01dec     04 00 00 FF 
01df0     64 0E 86 F1 | 	sub	objptr, ##2148
01df4     54 08 B0 FD | 	call	#_hng030rm_spin2_write
01df8     04 00 00 FF 
01dfc     E8 0E 06 F1 | 	add	objptr, ##2280
01e00     07 5D 02 FB | 	rdlong	arg01, objptr
01e04     04 00 00 FF 
01e08     E8 0E 86 F1 | 	sub	objptr, ##2280
01e0c     3C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e10                 | ' 
01e10                 | ' ''---------- Set the (x,y) position of cursor
01e10                 | ' 
01e10                 | ' cursor_x:=x
01e10     34 0E 06 F1 | 	add	objptr, #52
01e14     07 39 48 FC | 	wrbyte	#28, objptr
01e18                 | ' cursor_y:=y
01e18     01 0E 06 F1 | 	add	objptr, #1
01e1c     07 3B 48 FC | 	wrbyte	#29, objptr
01e20     02 00 00 FF 
01e24     F6 0F 06 F1 | 	add	objptr, ##1526
01e28     07 5D 02 FB | 	rdlong	arg01, objptr
01e2c     10 0E 06 F1 | 	add	objptr, #16
01e30     07 D5 02 FB | 	rdlong	local54, objptr
01e34     03 00 00 FF 
01e38     3B 0E 86 F1 | 	sub	objptr, ##1595
01e3c     6A 5D 02 F1 | 	add	arg01, local54
01e40     03 5E 06 F6 | 	mov	arg02, #3
01e44     80 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e48     15 5D 02 F6 | 	mov	arg01, result1
01e4c     FC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e50     1D 5E 06 F6 | 	mov	arg02, #29
01e54                 | ' 
01e54                 | ' ''---------- Set the (x,y) position of cursor
01e54                 | ' 
01e54                 | ' cursor_x:=x
01e54     34 0E 06 F1 | 	add	objptr, #52
01e58     07 79 48 FC | 	wrbyte	#60, objptr
01e5c                 | ' cursor_y:=y
01e5c     01 0E 06 F1 | 	add	objptr, #1
01e60     07 3B 48 FC | 	wrbyte	#29, objptr
01e64     02 00 00 FF 
01e68     CC 0F 06 F1 | 	add	objptr, ##1484
01e6c     07 D5 C2 FA | 	rdbyte	local54, objptr
01e70     02 D4 66 F0 | 	shl	local54, #2
01e74     01 00 00 FF 
01e78     63 0E 06 F1 | 	add	objptr, ##611
01e7c     07 D5 02 F1 | 	add	local54, objptr
01e80     6A 5D 02 FB | 	rdlong	arg01, local54
01e84     04 00 00 FF 
01e88     64 0E 86 F1 | 	sub	objptr, ##2148
01e8c     BC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e90     04 00 00 FF 
01e94     E8 0E 06 F1 | 	add	objptr, ##2280
01e98     07 5D 02 FB | 	rdlong	arg01, objptr
01e9c     04 00 00 FF 
01ea0     E8 0E 86 F1 | 	sub	objptr, ##2280
01ea4     A4 07 B0 FD | 	call	#_hng030rm_spin2_write
01ea8                 | ' 
01ea8                 | ' ''---------- Set the (x,y) position of cursor
01ea8                 | ' 
01ea8                 | ' cursor_x:=x
01ea8     34 0E 06 F1 | 	add	objptr, #52
01eac     07 71 48 FC | 	wrbyte	#56, objptr
01eb0                 | ' cursor_y:=y
01eb0     01 0E 06 F1 | 	add	objptr, #1
01eb4     07 3B 48 FC | 	wrbyte	#29, objptr
01eb8     02 00 00 FF 
01ebc     FA 0F 06 F1 | 	add	objptr, ##1530
01ec0     07 5D 02 FB | 	rdlong	arg01, objptr
01ec4     10 0E 06 F1 | 	add	objptr, #16
01ec8     07 D5 02 FB | 	rdlong	local54, objptr
01ecc     03 00 00 FF 
01ed0     3F 0E 86 F1 | 	sub	objptr, ##1599
01ed4     6A 5D 02 F1 | 	add	arg01, local54
01ed8     03 5E 06 F6 | 	mov	arg02, #3
01edc     E8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ee0     15 5D 02 F6 | 	mov	arg01, result1
01ee4     64 07 B0 FD | 	call	#_hng030rm_spin2_write
01ee8                 | ' 
01ee8                 | ' ''---------- Set the (x,y) position of cursor
01ee8                 | ' 
01ee8                 | ' cursor_x:=x
01ee8     34 0E 06 F1 | 	add	objptr, #52
01eec     07 A9 48 FC | 	wrbyte	#84, objptr
01ef0                 | ' cursor_y:=y
01ef0     01 0E 06 F1 | 	add	objptr, #1
01ef4     07 3B 48 FC | 	wrbyte	#29, objptr
01ef8     02 00 00 FF 
01efc     FE 0F 06 F1 | 	add	objptr, ##1534
01f00     07 5D 02 FB | 	rdlong	arg01, objptr
01f04     10 0E 06 F1 | 	add	objptr, #16
01f08     07 D5 02 FB | 	rdlong	local54, objptr
01f0c     03 00 00 FF 
01f10     43 0E 86 F1 | 	sub	objptr, ##1603
01f14     6A 5D 02 F1 | 	add	arg01, local54
01f18     03 5E 06 F6 | 	mov	arg02, #3
01f1c     A8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01f20     15 5D 02 F6 | 	mov	arg01, result1
01f24     24 07 B0 FD | 	call	#_hng030rm_spin2_write
01f28     1D 5E 06 F6 | 	mov	arg02, #29
01f2c                 | ' 
01f2c                 | ' ''---------- Set the (x,y) position of cursor
01f2c                 | ' 
01f2c                 | ' cursor_x:=x
01f2c     34 0E 06 F1 | 	add	objptr, #52
01f30     07 B1 48 FC | 	wrbyte	#88, objptr
01f34                 | ' cursor_y:=y
01f34     01 0E 06 F1 | 	add	objptr, #1
01f38     07 3B 48 FC | 	wrbyte	#29, objptr
01f3c     02 00 00 FF 
01f40     CD 0F 06 F1 | 	add	objptr, ##1485
01f44     07 D5 C2 FA | 	rdbyte	local54, objptr
01f48     02 D4 66 F0 | 	shl	local54, #2
01f4c     01 00 00 FF 
01f50     62 0E 06 F1 | 	add	objptr, ##610
01f54     07 D5 02 F1 | 	add	local54, objptr
01f58     6A 5D 02 FB | 	rdlong	arg01, local54
01f5c     04 00 00 FF 
01f60     64 0E 86 F1 | 	sub	objptr, ##2148
01f64     E4 06 B0 FD | 	call	#_hng030rm_spin2_write
01f68     04 00 00 FF 
01f6c     E8 0E 06 F1 | 	add	objptr, ##2280
01f70     07 5D 02 FB | 	rdlong	arg01, objptr
01f74     04 00 00 FF 
01f78     E8 0E 86 F1 | 	sub	objptr, ##2280
01f7c     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01f80     14 F9 9F FD | 	jmp	#LR__0016
01f84     AF F0 03 F6 | 	mov	ptra, fp
01f88     BF 00 A0 FD | 	call	#popregs_
01f8c                 | _program_ret
01f8c     2D 00 64 FD | 	ret
01f90                 | 
01f90                 | ' 
01f90                 | ' 
01f90                 | ' ''---------- putpixel - put a pixel on the screen
01f90                 | ' 
01f90                 | ' pub putpixel1(x,y,c) |byte b
01f90                 | _hng030rm_spin2_putpixel1
01f90                 | ' 
01f90                 | ' 
01f90                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f90     00 30 06 F6 | 	mov	_var01, #0
01f94     00 5C 5E F2 | 	cmps	arg01, #0 wcz
01f98     01 30 66 36 |  if_ae	neg	_var01, #1
01f9c     00 32 06 F6 | 	mov	_var02, #0
01fa0     90 0E 06 F1 | 	add	objptr, #144
01fa4     07 35 02 FB | 	rdlong	_var03, objptr
01fa8     05 34 66 F0 | 	shl	_var03, #5
01fac     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
01fb0     01 32 66 C6 |  if_b	neg	_var02, #1
01fb4     19 31 02 F5 | 	and	_var01, _var02
01fb8     00 36 06 F6 | 	mov	_var04, #0
01fbc     00 5E 5E F2 | 	cmps	arg02, #0 wcz
01fc0     01 36 66 36 |  if_ae	neg	_var04, #1
01fc4     1B 31 02 F5 | 	and	_var01, _var04
01fc8     00 38 06 F6 | 	mov	_var05, #0
01fcc     04 0E 06 F1 | 	add	objptr, #4
01fd0     07 3B 02 FB | 	rdlong	_var06, objptr
01fd4     94 0E 86 F1 | 	sub	objptr, #148
01fd8     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
01fdc     01 38 66 C6 |  if_b	neg	_var05, #1
01fe0     1C 31 CA F7 | 	test	_var01, _var05 wz
01fe4     8C 00 90 AD |  if_e	jmp	#LR__0028
01fe8     90 0E 06 F1 | 	add	objptr, #144
01fec     07 3D 02 FB | 	rdlong	_var07, objptr
01ff0     90 0E 86 F1 | 	sub	objptr, #144
01ff4     02 3C 66 F0 | 	shl	_var07, #2
01ff8     2F 3D 02 FD | 	qmul	_var07, arg02
01ffc     18 3E 62 FD | 	getqx	_var08
02000     07 41 02 FB | 	rdlong	_var09, objptr
02004     1F 41 02 F1 | 	add	_var09, _var08
02008     2E 43 02 F6 | 	mov	_var10, arg01
0200c     03 42 46 F0 | 	shr	_var10, #3
02010     21 41 02 F1 | 	add	_var09, _var10
02014                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02014     20 45 C2 FA | 	rdbyte	_var11, _var09
02018                 | '     if (c==0)
02018     00 60 0E F2 | 	cmp	arg03, #0 wz
0201c     18 00 90 5D |  if_ne	jmp	#LR__0026
02020     2E 31 52 F6 | 	abs	_var01, arg01 wc
02024     07 30 06 F5 | 	and	_var01, #7
02028     18 31 62 C6 |  if_b	neg	_var01, _var01
0202c     18 47 C2 F9 | 	decod	_var12, _var01
02030                 | '       b:=b & !(1<<(x//8))
02030     23 45 22 F5 | 	andn	_var11, _var12
02034                 | '     else
02034     14 00 90 FD | 	jmp	#LR__0027
02038                 | LR__0026
02038     2E 31 52 F6 | 	abs	_var01, arg01 wc
0203c     07 30 06 F5 | 	and	_var01, #7
02040     18 31 62 C6 |  if_b	neg	_var01, _var01
02044     18 49 C2 F9 | 	decod	_var13, _var01
02048                 | '       b:=b |(1<<(x//8))
02048     24 45 42 F5 | 	or	_var11, _var13
0204c                 | LR__0027
0204c     90 0E 06 F1 | 	add	objptr, #144
02050     07 4B 02 FB | 	rdlong	_var14, objptr
02054     90 0E 86 F1 | 	sub	objptr, #144
02058     02 4A 66 F0 | 	shl	_var14, #2
0205c     2F 4B 02 FD | 	qmul	_var14, arg02
02060     18 4C 62 FD | 	getqx	_var15
02064     07 4F 02 FB | 	rdlong	_var16, objptr
02068     26 4F 02 F1 | 	add	_var16, _var15
0206c     21 4F 02 F1 | 	add	_var16, _var10
02070                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02070     27 45 42 FC | 	wrbyte	_var11, _var16
02074                 | LR__0028
02074                 | _hng030rm_spin2_putpixel1_ret
02074     2D 00 64 FD | 	ret
02078                 | 
02078                 | ' 
02078                 | ' 
02078                 | ' pub putpixel2(x,y,c) |byte b
02078                 | _hng030rm_spin2_putpixel2
02078                 | ' 
02078                 | ' 
02078                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02078     00 30 06 F6 | 	mov	_var01, #0
0207c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02080     01 30 66 36 |  if_ae	neg	_var01, #1
02084     00 32 06 F6 | 	mov	_var02, #0
02088     90 0E 06 F1 | 	add	objptr, #144
0208c     07 35 02 FB | 	rdlong	_var03, objptr
02090     04 34 66 F0 | 	shl	_var03, #4
02094     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02098     01 32 66 C6 |  if_b	neg	_var02, #1
0209c     19 31 02 F5 | 	and	_var01, _var02
020a0     00 36 06 F6 | 	mov	_var04, #0
020a4     00 5E 5E F2 | 	cmps	arg02, #0 wcz
020a8     01 36 66 36 |  if_ae	neg	_var04, #1
020ac     1B 31 02 F5 | 	and	_var01, _var04
020b0     00 38 06 F6 | 	mov	_var05, #0
020b4     04 0E 06 F1 | 	add	objptr, #4
020b8     07 3B 02 FB | 	rdlong	_var06, objptr
020bc     94 0E 86 F1 | 	sub	objptr, #148
020c0     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
020c4     01 38 66 C6 |  if_b	neg	_var05, #1
020c8     1C 31 CA F7 | 	test	_var01, _var05 wz
020cc     7C 00 90 AD |  if_e	jmp	#LR__0029
020d0     90 0E 06 F1 | 	add	objptr, #144
020d4     07 3D 02 FB | 	rdlong	_var07, objptr
020d8     90 0E 86 F1 | 	sub	objptr, #144
020dc     02 3C 66 F0 | 	shl	_var07, #2
020e0     2F 3D 02 FD | 	qmul	_var07, arg02
020e4     18 3E 62 FD | 	getqx	_var08
020e8     07 41 02 FB | 	rdlong	_var09, objptr
020ec     1F 41 02 F1 | 	add	_var09, _var08
020f0     2E 43 02 F6 | 	mov	_var10, arg01
020f4     02 42 46 F0 | 	shr	_var10, #2
020f8     21 41 02 F1 | 	add	_var09, _var10
020fc                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
020fc     20 45 C2 FA | 	rdbyte	_var11, _var09
02100     2E 31 52 F6 | 	abs	_var01, arg01 wc
02104     03 30 06 F5 | 	and	_var01, #3
02108     18 31 62 C6 |  if_b	neg	_var01, _var01
0210c     01 30 66 F0 | 	shl	_var01, #1
02110     03 46 06 F6 | 	mov	_var12, #3
02114     18 47 62 F0 | 	shl	_var12, _var01
02118                 | '     b:=b & !(%11<<((x//4)<<1))
02118     23 45 22 F5 | 	andn	_var11, _var12
0211c     18 61 62 F0 | 	shl	arg03, _var01
02120                 | '     b:=b |(c<<((x//4)<<1))
02120     30 45 42 F5 | 	or	_var11, arg03
02124     90 0E 06 F1 | 	add	objptr, #144
02128     07 49 02 FB | 	rdlong	_var13, objptr
0212c     90 0E 86 F1 | 	sub	objptr, #144
02130     02 48 66 F0 | 	shl	_var13, #2
02134     2F 49 02 FD | 	qmul	_var13, arg02
02138     18 4A 62 FD | 	getqx	_var14
0213c     07 4D 02 FB | 	rdlong	_var15, objptr
02140     25 4D 02 F1 | 	add	_var15, _var14
02144     21 4D 02 F1 | 	add	_var15, _var10
02148                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02148     26 45 42 FC | 	wrbyte	_var11, _var15
0214c                 | LR__0029
0214c                 | _hng030rm_spin2_putpixel2_ret
0214c     2D 00 64 FD | 	ret
02150                 | 
02150                 | ' 
02150                 | ' 
02150                 | ' pub putpixel4(x,y,c) |byte b
02150                 | _hng030rm_spin2_putpixel4
02150                 | ' 
02150                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02150     00 30 06 F6 | 	mov	_var01, #0
02154     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02158     01 30 66 36 |  if_ae	neg	_var01, #1
0215c     00 32 06 F6 | 	mov	_var02, #0
02160     90 0E 06 F1 | 	add	objptr, #144
02164     07 35 02 FB | 	rdlong	_var03, objptr
02168     04 34 66 F0 | 	shl	_var03, #4
0216c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02170     01 32 66 C6 |  if_b	neg	_var02, #1
02174     19 31 02 F5 | 	and	_var01, _var02
02178     00 36 06 F6 | 	mov	_var04, #0
0217c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02180     01 36 66 36 |  if_ae	neg	_var04, #1
02184     1B 31 02 F5 | 	and	_var01, _var04
02188     00 38 06 F6 | 	mov	_var05, #0
0218c     04 0E 06 F1 | 	add	objptr, #4
02190     07 3B 02 FB | 	rdlong	_var06, objptr
02194     94 0E 86 F1 | 	sub	objptr, #148
02198     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
0219c     01 38 66 C6 |  if_b	neg	_var05, #1
021a0     1C 31 CA F7 | 	test	_var01, _var05 wz
021a4     7C 00 90 AD |  if_e	jmp	#LR__0030
021a8     90 0E 06 F1 | 	add	objptr, #144
021ac     07 3D 02 FB | 	rdlong	_var07, objptr
021b0     90 0E 86 F1 | 	sub	objptr, #144
021b4     02 3C 66 F0 | 	shl	_var07, #2
021b8     2F 3D 02 FD | 	qmul	_var07, arg02
021bc     18 3E 62 FD | 	getqx	_var08
021c0     07 41 02 FB | 	rdlong	_var09, objptr
021c4     1F 41 02 F1 | 	add	_var09, _var08
021c8     2E 43 02 F6 | 	mov	_var10, arg01
021cc     01 42 46 F0 | 	shr	_var10, #1
021d0     21 41 02 F1 | 	add	_var09, _var10
021d4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
021d4     20 45 C2 FA | 	rdbyte	_var11, _var09
021d8     2E 31 52 F6 | 	abs	_var01, arg01 wc
021dc     01 30 06 F5 | 	and	_var01, #1
021e0     18 31 62 C6 |  if_b	neg	_var01, _var01
021e4     02 30 66 F0 | 	shl	_var01, #2
021e8     0F 46 06 F6 | 	mov	_var12, #15
021ec     18 47 62 F0 | 	shl	_var12, _var01
021f0                 | '     b:=b & !(%1111<<((x//2)<<2))
021f0     23 45 22 F5 | 	andn	_var11, _var12
021f4     18 61 62 F0 | 	shl	arg03, _var01
021f8                 | '     b:=b |(c<<((x//2)<<2))
021f8     30 45 42 F5 | 	or	_var11, arg03
021fc     90 0E 06 F1 | 	add	objptr, #144
02200     07 49 02 FB | 	rdlong	_var13, objptr
02204     90 0E 86 F1 | 	sub	objptr, #144
02208     02 48 66 F0 | 	shl	_var13, #2
0220c     2F 49 02 FD | 	qmul	_var13, arg02
02210     18 4A 62 FD | 	getqx	_var14
02214     07 4D 02 FB | 	rdlong	_var15, objptr
02218     25 4D 02 F1 | 	add	_var15, _var14
0221c     21 4D 02 F1 | 	add	_var15, _var10
02220                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02220     26 45 42 FC | 	wrbyte	_var11, _var15
02224                 | LR__0030
02224                 | _hng030rm_spin2_putpixel4_ret
02224     2D 00 64 FD | 	ret
02228                 | 
02228                 | ' 
02228                 | ' 
02228                 | ' pub putpixel8(x,y,c)
02228                 | _hng030rm_spin2_putpixel8
02228                 | ' 
02228                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02228     00 30 06 F6 | 	mov	_var01, #0
0222c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02230     01 30 66 36 |  if_ae	neg	_var01, #1
02234     00 32 06 F6 | 	mov	_var02, #0
02238     90 0E 06 F1 | 	add	objptr, #144
0223c     07 35 02 FB | 	rdlong	_var03, objptr
02240     02 34 66 F0 | 	shl	_var03, #2
02244     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02248     01 32 66 C6 |  if_b	neg	_var02, #1
0224c     19 31 02 F5 | 	and	_var01, _var02
02250     00 36 06 F6 | 	mov	_var04, #0
02254     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02258     01 36 66 36 |  if_ae	neg	_var04, #1
0225c     1B 31 02 F5 | 	and	_var01, _var04
02260     00 38 06 F6 | 	mov	_var05, #0
02264     04 0E 06 F1 | 	add	objptr, #4
02268     07 3B 02 FB | 	rdlong	_var06, objptr
0226c     94 0E 86 F1 | 	sub	objptr, #148
02270     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02274     01 38 66 C6 |  if_b	neg	_var05, #1
02278     1C 31 CA F7 | 	test	_var01, _var05 wz
0227c     28 00 90 AD |  if_e	jmp	#LR__0031
02280     90 0E 06 F1 | 	add	objptr, #144
02284     07 3D 02 FB | 	rdlong	_var07, objptr
02288     90 0E 86 F1 | 	sub	objptr, #144
0228c     02 3C 66 F0 | 	shl	_var07, #2
02290     2F 3D 02 FD | 	qmul	_var07, arg02
02294     18 3E 62 FD | 	getqx	_var08
02298     07 41 02 FB | 	rdlong	_var09, objptr
0229c     1F 41 02 F1 | 	add	_var09, _var08
022a0     2E 41 02 F1 | 	add	_var09, arg01
022a4                 | '     byte[buf_ptr+4*cpl*y+x]:=c
022a4     20 61 42 FC | 	wrbyte	arg03, _var09
022a8                 | LR__0031
022a8                 | _hng030rm_spin2_putpixel8_ret
022a8     2D 00 64 FD | 	ret
022ac                 | 
022ac                 | ' 
022ac                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
022ac                 | ' 
022ac                 | ' pub setbordercolor(r,g,b) | color
022ac                 | _hng030rm_spin2_setbordercolor
022ac     18 5C 66 F0 | 	shl	arg01, #24
022b0     10 5E 66 F0 | 	shl	arg02, #16
022b4     2F 5D 02 F1 | 	add	arg01, arg02
022b8     08 60 66 F0 | 	shl	arg03, #8
022bc     30 5D 02 F1 | 	add	arg01, arg03
022c0                 | ' 
022c0                 | ' color:=r<<24+g<<16+b<<8
022c0                 | ' bordercolor:=color
022c0     2C 0E 06 F1 | 	add	objptr, #44
022c4     07 5D 62 FC | 	wrlong	arg01, objptr
022c8     2C 0E 86 F1 | 	sub	objptr, #44
022cc                 | _hng030rm_spin2_setbordercolor_ret
022cc     2D 00 64 FD | 	ret
022d0                 | 
022d0                 | ' 
022d0                 | ' 
022d0                 | ' '*************************************************************************
022d0                 | ' '                                                                        *
022d0                 | ' '  Text functions                                                        *
022d0                 | ' '                                                                        *
022d0                 | ' '*************************************************************************
022d0                 | ' 
022d0                 | ' ''---------- Clear the screen, set its foreground/background color
022d0                 | ' 
022d0                 | ' pub cls(fc,bc)   :c
022d0                 | _hng030rm_spin2_cls
022d0     07 5A 05 F6 | 	mov	COUNT_, #7
022d4     B0 00 A0 FD | 	call	#pushregs_
022d8     2E 6B 02 F6 | 	mov	local01, arg01
022dc     2F 6D 02 F6 | 	mov	local02, arg02
022e0                 | ' 
022e0                 | ' if (graphmode<512)
022e0     C4 0E 06 F1 | 	add	objptr, #196
022e4     07 6F 02 FB | 	rdlong	local03, objptr
022e8     C4 0E 86 F1 | 	sub	objptr, #196
022ec     01 00 00 FF 
022f0     00 6E 5E F2 | 	cmps	local03, ##512 wcz
022f4     34 00 90 3D |  if_ae	jmp	#LR__0032
022f8     35 71 02 F6 | 	mov	local04, local01
022fc     18 70 66 F0 | 	shl	local04, #24
02300     36 73 02 F6 | 	mov	local05, local02
02304     10 72 66 F0 | 	shl	local05, #16
02308     39 71 02 F1 | 	add	local04, local05
0230c     20 70 06 F1 | 	add	local04, #32
02310                 | '   c:=fc<<24+bc<<16+$20
02310                 | '   longfill(buf_ptr,c,buflen)
02310     07 5D 02 FB | 	rdlong	arg01, objptr
02314     30 0E 06 F1 | 	add	objptr, #48
02318     07 61 02 FB | 	rdlong	arg03, objptr
0231c     30 0E 86 F1 | 	sub	objptr, #48
02320     38 5F 02 F6 | 	mov	arg02, local04
02324     A8 00 A0 FD | 	call	#\builtin_longfill_
02328                 | ' else
02328     AC 00 90 FD | 	jmp	#LR__0038
0232c                 | LR__0032
0232c                 | '   if (graphmode & 48) ==48
0232c     C4 0E 06 F1 | 	add	objptr, #196
02330     07 6F 02 FB | 	rdlong	local03, objptr
02334     C4 0E 86 F1 | 	sub	objptr, #196
02338     30 6E 06 F5 | 	and	local03, #48
0233c     30 6E 0E F2 | 	cmp	local03, #48 wz
02340                 | '     c:=bc
02340     36 71 02 A6 |  if_e	mov	local04, local02
02344     74 00 90 AD |  if_e	jmp	#LR__0037
02348                 | '   elseif (graphmode & 48) ==32
02348     C4 0E 06 F1 | 	add	objptr, #196
0234c     07 6F 02 FB | 	rdlong	local03, objptr
02350     C4 0E 86 F1 | 	sub	objptr, #196
02354     30 6E 06 F5 | 	and	local03, #48
02358     20 6E 0E F2 | 	cmp	local03, #32 wz
0235c     10 00 90 5D |  if_ne	jmp	#LR__0033
02360     36 71 02 F6 | 	mov	local04, local02
02364     04 70 66 F0 | 	shl	local04, #4
02368     36 71 02 F1 | 	add	local04, local02
0236c                 | '     c:=bc<<4+bc
0236c     4C 00 90 FD | 	jmp	#LR__0036
02370                 | LR__0033
02370                 | '   elseif (graphmode & 48) ==16
02370     C4 0E 06 F1 | 	add	objptr, #196
02374     07 6F 02 FB | 	rdlong	local03, objptr
02378     C4 0E 86 F1 | 	sub	objptr, #196
0237c     30 6E 06 F5 | 	and	local03, #48
02380     10 6E 0E F2 | 	cmp	local03, #16 wz
02384     28 00 90 5D |  if_ne	jmp	#LR__0034
02388     36 71 02 F6 | 	mov	local04, local02
0238c     06 70 66 F0 | 	shl	local04, #6
02390     36 75 02 F6 | 	mov	local06, local02
02394     04 74 66 F0 | 	shl	local06, #4
02398     3A 71 02 F1 | 	add	local04, local06
0239c     36 77 02 F6 | 	mov	local07, local02
023a0     02 76 66 F0 | 	shl	local07, #2
023a4     3B 71 02 F1 | 	add	local04, local07
023a8     36 71 02 F1 | 	add	local04, local02
023ac                 | '     c:=bc<<6+bc<<4+bc<<2+bc
023ac                 | '   else
023ac     0C 00 90 FD | 	jmp	#LR__0035
023b0                 | LR__0034
023b0                 | '     if bc==1
023b0     01 6C 0E F2 | 	cmp	local02, #1 wz
023b4                 | '       c:=255
023b4     FF 70 06 A6 |  if_e	mov	local04, #255
023b8                 | '     else
023b8                 | '       c:=0
023b8     00 70 06 56 |  if_ne	mov	local04, #0
023bc                 | LR__0035
023bc                 | LR__0036
023bc                 | LR__0037
023bc     30 0E 06 F1 | 	add	objptr, #48
023c0     07 61 02 FB | 	rdlong	arg03, objptr
023c4     30 0E 86 F1 | 	sub	objptr, #48
023c8     02 60 66 F0 | 	shl	arg03, #2
023cc                 | '   bytefill(buf_ptr,c,buflen*4)
023cc     07 5D 02 FB | 	rdlong	arg01, objptr
023d0     38 5F 02 F6 | 	mov	arg02, local04
023d4     A0 00 A0 FD | 	call	#\builtin_bytefill_
023d8                 | LR__0038
023d8                 | ' setwritecolors(fc,bc)
023d8                 | ' 
023d8                 | ' 
023d8                 | ' write_color:=ff
023d8     38 0E 06 F1 | 	add	objptr, #56
023dc     07 6B 62 FC | 	wrlong	local01, objptr
023e0                 | ' write_background:=bb
023e0     04 0E 06 F1 | 	add	objptr, #4
023e4     07 6D 62 FC | 	wrlong	local02, objptr
023e8                 | ' cursor_x:=0
023e8     08 0E 86 F1 | 	sub	objptr, #8
023ec     07 01 48 FC | 	wrbyte	#0, objptr
023f0                 | ' cursor_y:=0
023f0     01 0E 06 F1 | 	add	objptr, #1
023f4     07 01 48 FC | 	wrbyte	#0, objptr
023f8     35 0E 86 F1 | 	sub	objptr, #53
023fc     38 2B 02 F6 | 	mov	result1, local04
02400     AF F0 03 F6 | 	mov	ptra, fp
02404     BF 00 A0 FD | 	call	#popregs_
02408                 | _hng030rm_spin2_cls_ret
02408     2D 00 64 FD | 	ret
0240c                 | 
0240c                 | ' 
0240c                 | ' ''--------- Output a string at position x,y without changing colors
0240c                 | ' 
0240c                 | ' pub outtextxy(x,y,text) | iii
0240c                 | _hng030rm_spin2_outtextxy
0240c     0B 5A 05 F6 | 	mov	COUNT_, #11
02410     B0 00 A0 FD | 	call	#pushregs_
02414     2E 6B 02 F6 | 	mov	local01, arg01
02418                 | ' 
02418                 | ' repeat iii from 0 to strsize(text)-1
02418     00 6C 06 F6 | 	mov	local02, #0
0241c     30 5D 02 F6 | 	mov	arg01, arg03
02420     00 6E 06 F6 | 	mov	local03, #0
02424     E8 DB 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
02428     93 00 A0 FD | 	call	#FCACHE_LOAD_
0242c                 | LR__0039
0242c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
02430     01 6E 06 51 |  if_ne	add	local03, #1
02434     01 5C 06 51 |  if_ne	add	arg01, #1
02438     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
0243c                 | LR__0040
0243c     37 2B 02 F6 | 	mov	result1, local03
02440     15 73 02 F6 | 	mov	local05, result1
02444     01 72 86 F1 | 	sub	local05, #1
02448     00 72 5E F2 | 	cmps	local05, #0 wcz
0244c     01 74 06 16 |  if_a	mov	local06, #1
02450     01 74 66 E6 |  if_be	neg	local06, #1
02454     3A 73 02 F1 | 	add	local05, local06
02458     F4 DB 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
0245c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02460                 | LR__0041
02460     90 0E 06 F1 | 	add	objptr, #144
02464     07 77 02 FB | 	rdlong	local07, objptr
02468     90 0E 86 F1 | 	sub	objptr, #144
0246c     2F 77 02 FD | 	qmul	local07, arg02
02470     18 78 62 FD | 	getqx	local08
02474     35 79 02 F1 | 	add	local08, local01
02478     36 79 02 F1 | 	add	local08, local02
0247c     02 78 66 F0 | 	shl	local08, #2
02480     07 7B 02 FB | 	rdlong	local09, objptr
02484     3C 7B 02 F1 | 	add	local09, local08
02488     3D 7D 02 FB | 	rdlong	local10, local09
0248c     FF 7C 26 F5 | 	andn	local10, #255
02490     30 7F 02 F6 | 	mov	local11, arg03
02494     36 7F 02 F1 | 	add	local11, local02
02498     3F 77 C2 FA | 	rdbyte	local07, local11
0249c     3B 7D 42 F5 | 	or	local10, local07
024a0                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
024a0     3D 7D 62 FC | 	wrlong	local10, local09
024a4     3A 6D 02 F1 | 	add	local02, local06
024a8     39 6D 0A F2 | 	cmp	local02, local05 wz
024ac     B0 FF 9F 5D |  if_ne	jmp	#LR__0041
024b0                 | LR__0042
024b0     AF F0 03 F6 | 	mov	ptra, fp
024b4     BF 00 A0 FD | 	call	#popregs_
024b8                 | _hng030rm_spin2_outtextxy_ret
024b8     2D 00 64 FD | 	ret
024bc                 | 
024bc                 | ' 
024bc                 | ' ''---------- Output a char at the cursor position, move the cursor
024bc                 | ' 
024bc                 | ' pub putchar(achar) | c,x,y
024bc                 | _hng030rm_spin2_putchar
024bc     12 5A 05 F6 | 	mov	COUNT_, #18
024c0     B0 00 A0 FD | 	call	#pushregs_
024c4     2E 6B 02 F6 | 	mov	local01, arg01
024c8                 | ' 
024c8                 | ' if achar==10
024c8     0A 6A 0E F2 | 	cmp	local01, #10 wz
024cc     58 00 90 5D |  if_ne	jmp	#LR__0043
024d0                 | '   crlf()
024d0                 | ' 
024d0                 | ' cursor_x:=0
024d0     34 0E 06 F1 | 	add	objptr, #52
024d4     07 01 48 FC | 	wrbyte	#0, objptr
024d8                 | ' cursor_y+=1
024d8     01 0E 06 F1 | 	add	objptr, #1
024dc     07 6D C2 FA | 	rdbyte	local02, objptr
024e0     01 6C 06 F1 | 	add	local02, #1
024e4     07 6D 42 FC | 	wrbyte	local02, objptr
024e8                 | ' if cursor_y>lines-1
024e8     5F 0E 06 F1 | 	add	objptr, #95
024ec     07 6D 02 FB | 	rdlong	local02, objptr
024f0     01 6C 86 F1 | 	sub	local02, #1
024f4     5F 0E 86 F1 | 	sub	objptr, #95
024f8     07 6F C2 FA | 	rdbyte	local03, objptr
024fc     35 0E 86 F1 | 	sub	objptr, #53
02500     36 6F 5A F2 | 	cmps	local03, local02 wcz
02504     38 01 90 ED |  if_be	jmp	#LR__0046
02508                 | '   scrollup()
02508     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
0250c     94 0E 06 F1 | 	add	objptr, #148
02510     07 71 02 FB | 	rdlong	local04, objptr
02514     01 70 86 F1 | 	sub	local04, #1
02518                 | '   cursor_y:=lines-1
02518     5F 0E 86 F1 | 	sub	objptr, #95
0251c     07 71 42 FC | 	wrbyte	local04, objptr
02520     35 0E 86 F1 | 	sub	objptr, #53
02524                 | ' else  
02524     18 01 90 FD | 	jmp	#LR__0046
02528                 | LR__0043
02528                 | '   x:=cursor_x
02528     34 0E 06 F1 | 	add	objptr, #52
0252c     07 73 C2 FA | 	rdbyte	local05, objptr
02530                 | '   y:=cursor_y
02530     01 0E 06 F1 | 	add	objptr, #1
02534     07 75 C2 FA | 	rdbyte	local06, objptr
02538     03 0E 06 F1 | 	add	objptr, #3
0253c     07 77 02 FB | 	rdlong	local07, objptr
02540     18 76 66 F0 | 	shl	local07, #24
02544     04 0E 06 F1 | 	add	objptr, #4
02548     07 79 02 FB | 	rdlong	local08, objptr
0254c     10 78 66 F0 | 	shl	local08, #16
02550     3C 77 02 F1 | 	add	local07, local08
02554                 | '   c:=write_color<<24+write_background<<16
02554     54 0E 06 F1 | 	add	objptr, #84
02558     07 7B 02 FB | 	rdlong	local09, objptr
0255c     90 0E 86 F1 | 	sub	objptr, #144
02560     3A 7B 02 FD | 	qmul	local09, local06
02564     18 7C 62 FD | 	getqx	local10
02568     39 7D 02 F1 | 	add	local10, local05
0256c     02 7C 66 F0 | 	shl	local10, #2
02570     07 7F 02 FB | 	rdlong	local11, objptr
02574     3E 7F 02 F1 | 	add	local11, local10
02578     3F 81 02 FB | 	rdlong	local12, local11
0257c     7F 00 00 FF 
02580     FF 81 06 F5 | 	and	local12, ##65535
02584     3B 81 42 F5 | 	or	local12, local07
02588                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02588     3F 81 62 FC | 	wrlong	local12, local11
0258c     90 0E 06 F1 | 	add	objptr, #144
02590     07 7B 02 FB | 	rdlong	local09, objptr
02594     90 0E 86 F1 | 	sub	objptr, #144
02598     3A 7B 02 FD | 	qmul	local09, local06
0259c     18 82 62 FD | 	getqx	local13
025a0     39 83 02 F1 | 	add	local13, local05
025a4     02 82 66 F0 | 	shl	local13, #2
025a8     07 85 02 FB | 	rdlong	local14, objptr
025ac     41 85 02 F1 | 	add	local14, local13
025b0     42 87 02 FB | 	rdlong	local15, local14
025b4     FF 86 26 F5 | 	andn	local15, #255
025b8     FF 6A 06 F5 | 	and	local01, #255
025bc     35 87 42 F5 | 	or	local15, local01
025c0                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
025c0     42 87 62 FC | 	wrlong	local15, local14
025c4                 | '   cursor_x+=1
025c4     34 0E 06 F1 | 	add	objptr, #52
025c8     07 89 C2 FA | 	rdbyte	local16, objptr
025cc     01 88 06 F1 | 	add	local16, #1
025d0     07 89 42 FC | 	wrbyte	local16, objptr
025d4                 | '   if cursor_x==cpl
025d4     07 89 C2 FA | 	rdbyte	local16, objptr
025d8     5C 0E 06 F1 | 	add	objptr, #92
025dc     07 8B 02 FB | 	rdlong	local17, objptr
025e0     90 0E 86 F1 | 	sub	objptr, #144
025e4     45 89 0A F2 | 	cmp	local16, local17 wz
025e8     54 00 90 5D |  if_ne	jmp	#LR__0045
025ec                 | '     cursor_x:=0
025ec     34 0E 06 F1 | 	add	objptr, #52
025f0     07 01 48 FC | 	wrbyte	#0, objptr
025f4                 | '     cursor_y+=1
025f4     01 0E 06 F1 | 	add	objptr, #1
025f8     07 89 C2 FA | 	rdbyte	local16, objptr
025fc     01 88 06 F1 | 	add	local16, #1
02600     07 89 42 FC | 	wrbyte	local16, objptr
02604                 | '     if cursor_y>lines-1
02604     5F 0E 06 F1 | 	add	objptr, #95
02608     07 89 02 FB | 	rdlong	local16, objptr
0260c     01 88 86 F1 | 	sub	local16, #1
02610     5F 0E 86 F1 | 	sub	objptr, #95
02614     07 8B C2 FA | 	rdbyte	local17, objptr
02618     35 0E 86 F1 | 	sub	objptr, #53
0261c     44 8B 5A F2 | 	cmps	local17, local16 wcz
02620     1C 00 90 ED |  if_be	jmp	#LR__0044
02624                 | '       scrollup()
02624     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02628     94 0E 06 F1 | 	add	objptr, #148
0262c     07 8D 02 FB | 	rdlong	local18, objptr
02630     01 8C 86 F1 | 	sub	local18, #1
02634                 | '       cursor_y:=lines-1
02634     5F 0E 86 F1 | 	sub	objptr, #95
02638     07 8D 42 FC | 	wrbyte	local18, objptr
0263c     35 0E 86 F1 | 	sub	objptr, #53
02640                 | LR__0044
02640                 | LR__0045
02640                 | LR__0046
02640     AF F0 03 F6 | 	mov	ptra, fp
02644     BF 00 A0 FD | 	call	#popregs_
02648                 | _hng030rm_spin2_putchar_ret
02648     2D 00 64 FD | 	ret
0264c                 | 
0264c                 | ' 
0264c                 | ' ''--------- Output a string at the cursor position, move the cursor
0264c                 | ' 
0264c                 | ' pub write(text) | iii,c,ncx,ncy
0264c                 | _hng030rm_spin2_write
0264c     11 5A 05 F6 | 	mov	COUNT_, #17
02650     B0 00 A0 FD | 	call	#pushregs_
02654     2E 6B 02 F6 | 	mov	local01, arg01
02658     38 0E 06 F1 | 	add	objptr, #56
0265c     07 6D 02 FB | 	rdlong	local02, objptr
02660     18 6C 66 F0 | 	shl	local02, #24
02664     04 0E 06 F1 | 	add	objptr, #4
02668     07 6F 02 FB | 	rdlong	local03, objptr
0266c     10 6E 66 F0 | 	shl	local03, #16
02670     37 6D 02 F1 | 	add	local02, local03
02674                 | ' 
02674                 | ' c:=write_color<<24+write_background<<16
02674                 | ' 'debug(uhex_long(write_color))
02674                 | ' ncy:=cursor_y
02674     07 0E 86 F1 | 	sub	objptr, #7
02678     07 71 C2 FA | 	rdbyte	local04, objptr
0267c                 | ' ncx:=cursor_x+strsize(text)
0267c     01 0E 86 F1 | 	sub	objptr, #1
02680     07 73 C2 FA | 	rdbyte	local05, objptr
02684     34 0E 86 F1 | 	sub	objptr, #52
02688     35 5D 02 F6 | 	mov	arg01, local01
0268c     00 74 06 F6 | 	mov	local06, #0
02690     7C D9 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
02694     93 00 A0 FD | 	call	#FCACHE_LOAD_
02698                 | LR__0047
02698     2E 77 CA FA | 	rdbyte	local07, arg01 wz
0269c     01 74 06 51 |  if_ne	add	local06, #1
026a0     01 5C 06 51 |  if_ne	add	arg01, #1
026a4     F0 FF 9F 5D |  if_ne	jmp	#LR__0047
026a8                 | LR__0048
026a8     3A 2B 02 F6 | 	mov	result1, local06
026ac     3A 73 02 F1 | 	add	local05, local06
026b0     39 79 02 F6 | 	mov	local08, local05
026b4     78 D9 9F FE | 	loc	pa,	#(@LR__0050-@LR__0049)
026b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
026bc                 | ' repeat while ncx>cpl-1
026bc                 | LR__0049
026bc     90 0E 06 F1 | 	add	objptr, #144
026c0     07 73 02 FB | 	rdlong	local05, objptr
026c4     90 0E 86 F1 | 	sub	objptr, #144
026c8     01 72 86 F1 | 	sub	local05, #1
026cc     39 79 5A F2 | 	cmps	local08, local05 wcz
026d0     18 00 90 ED |  if_be	jmp	#LR__0051
026d4                 | '   ncx-=cpl
026d4     90 0E 06 F1 | 	add	objptr, #144
026d8     07 7B 02 FB | 	rdlong	local09, objptr
026dc     90 0E 86 F1 | 	sub	objptr, #144
026e0     3D 79 82 F1 | 	sub	local08, local09
026e4                 | '   ncy+=1
026e4     01 70 06 F1 | 	add	local04, #1
026e8     D0 FF 9F FD | 	jmp	#LR__0049
026ec                 | LR__0050
026ec                 | LR__0051
026ec                 | ' repeat while ncy>lines-1
026ec                 | LR__0052
026ec     94 0E 06 F1 | 	add	objptr, #148
026f0     07 73 02 FB | 	rdlong	local05, objptr
026f4     94 0E 86 F1 | 	sub	objptr, #148
026f8     01 72 86 F1 | 	sub	local05, #1
026fc     39 71 5A F2 | 	cmps	local04, local05 wcz
02700     20 00 90 ED |  if_be	jmp	#LR__0053
02704                 | '   ncy-=1
02704     01 70 86 F1 | 	sub	local04, #1
02708                 | '   scrollup()
02708     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
0270c                 | '   cursor_y-=1
0270c     35 0E 06 F1 | 	add	objptr, #53
02710     07 73 C2 FA | 	rdbyte	local05, objptr
02714     01 72 86 F1 | 	sub	local05, #1
02718     07 73 42 FC | 	wrbyte	local05, objptr
0271c     35 0E 86 F1 | 	sub	objptr, #53
02720     C8 FF 9F FD | 	jmp	#LR__0052
02724                 | LR__0053
02724                 | ' 
02724                 | ' repeat iii from 0 to strsize(text)-1
02724     00 7C 06 F6 | 	mov	local10, #0
02728     35 5D 02 F6 | 	mov	arg01, local01
0272c     00 74 06 F6 | 	mov	local06, #0
02730     DC D8 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
02734     93 00 A0 FD | 	call	#FCACHE_LOAD_
02738                 | LR__0054
02738     2E 77 CA FA | 	rdbyte	local07, arg01 wz
0273c     01 74 06 51 |  if_ne	add	local06, #1
02740     01 5C 06 51 |  if_ne	add	arg01, #1
02744     F0 FF 9F 5D |  if_ne	jmp	#LR__0054
02748                 | LR__0055
02748     3A 2B 02 F6 | 	mov	result1, local06
0274c     15 7F 02 F6 | 	mov	local11, result1
02750     01 7E 86 F1 | 	sub	local11, #1
02754     00 7E 5E F2 | 	cmps	local11, #0 wcz
02758     01 80 06 16 |  if_a	mov	local12, #1
0275c     01 80 66 E6 |  if_be	neg	local12, #1
02760     40 7F 02 F1 | 	add	local11, local12
02764     F0 D8 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
02768     93 00 A0 FD | 	call	#FCACHE_LOAD_
0276c                 | LR__0056
0276c     90 0E 06 F1 | 	add	objptr, #144
02770     07 83 02 FB | 	rdlong	local13, objptr
02774     5B 0E 86 F1 | 	sub	objptr, #91
02778     07 85 C2 FA | 	rdbyte	local14, objptr
0277c     42 83 02 FD | 	qmul	local13, local14
02780     18 86 62 FD | 	getqx	local15
02784     01 0E 86 F1 | 	sub	objptr, #1
02788     07 83 C2 FA | 	rdbyte	local13, objptr
0278c     34 0E 86 F1 | 	sub	objptr, #52
02790     41 87 02 F1 | 	add	local15, local13
02794     3E 87 02 F1 | 	add	local15, local10
02798     02 86 66 F0 | 	shl	local15, #2
0279c     07 89 02 FB | 	rdlong	local16, objptr
027a0     43 89 02 F1 | 	add	local16, local15
027a4     44 8B 02 FB | 	rdlong	local17, local16
027a8     7F 00 00 FF 
027ac     FF 8B 06 F5 | 	and	local17, ##65535
027b0     36 8B 42 F5 | 	or	local17, local02
027b4                 | ' 
027b4                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
027b4     44 8B 62 FC | 	wrlong	local17, local16
027b8     40 7D 02 F1 | 	add	local10, local12
027bc     3F 7D 0A F2 | 	cmp	local10, local11 wz
027c0     A8 FF 9F 5D |  if_ne	jmp	#LR__0056
027c4                 | LR__0057
027c4                 | ' 
027c4                 | ' outtextxy(cursor_x,cursor_y,text)
027c4     34 0E 06 F1 | 	add	objptr, #52
027c8     07 5D C2 FA | 	rdbyte	arg01, objptr
027cc     01 0E 06 F1 | 	add	objptr, #1
027d0     07 5F C2 FA | 	rdbyte	arg02, objptr
027d4     35 0E 86 F1 | 	sub	objptr, #53
027d8     35 61 02 F6 | 	mov	arg03, local01
027dc     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
027e0                 | ' 
027e0                 | ' cursor_x:=ncx
027e0     34 0E 06 F1 | 	add	objptr, #52
027e4     07 79 42 FC | 	wrbyte	local08, objptr
027e8                 | ' cursor_y:=ncy
027e8     01 0E 06 F1 | 	add	objptr, #1
027ec     07 71 42 FC | 	wrbyte	local04, objptr
027f0     35 0E 86 F1 | 	sub	objptr, #53
027f4     AF F0 03 F6 | 	mov	ptra, fp
027f8     BF 00 A0 FD | 	call	#popregs_
027fc                 | _hng030rm_spin2_write_ret
027fc     2D 00 64 FD | 	ret
02800                 | 
02800                 | ' 
02800                 | ' ''-----------  Scroll the screen one line up
02800                 | ' 
02800                 | ' pub scrollup() | i
02800                 | _hng030rm_spin2_scrollup
02800     0A 5A 05 F6 | 	mov	COUNT_, #10
02804     B0 00 A0 FD | 	call	#pushregs_
02808     90 0E 06 F1 | 	add	objptr, #144
0280c     07 6B 02 FB | 	rdlong	local01, objptr
02810     90 0E 86 F1 | 	sub	objptr, #144
02814     02 6A 66 F0 | 	shl	local01, #2
02818     07 5F 02 FB | 	rdlong	arg02, objptr
0281c     35 5F 02 F1 | 	add	arg02, local01
02820     30 0E 06 F1 | 	add	objptr, #48
02824     07 61 02 FB | 	rdlong	arg03, objptr
02828     60 0E 06 F1 | 	add	objptr, #96
0282c     07 6D 02 FB | 	rdlong	local02, objptr
02830     90 0E 86 F1 | 	sub	objptr, #144
02834     36 61 82 F1 | 	sub	arg03, local02
02838                 | ' 
02838                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02838     07 5D 02 FB | 	rdlong	arg01, objptr
0283c     EC 35 B0 FD | 	call	#__system__longmove
02840                 | ' repeat i from buflen-cpl to buflen-1
02840     30 0E 06 F1 | 	add	objptr, #48
02844     07 6F 02 FB | 	rdlong	local03, objptr
02848     60 0E 06 F1 | 	add	objptr, #96
0284c     07 6D 02 FB | 	rdlong	local02, objptr
02850     36 6F 82 F1 | 	sub	local03, local02
02854     60 0E 86 F1 | 	sub	objptr, #96
02858     07 71 02 FB | 	rdlong	local04, objptr
0285c     01 70 86 F1 | 	sub	local04, #1
02860     07 73 02 FB | 	rdlong	local05, objptr
02864     60 0E 06 F1 | 	add	objptr, #96
02868     07 75 02 FB | 	rdlong	local06, objptr
0286c     90 0E 86 F1 | 	sub	objptr, #144
02870     3A 73 82 F1 | 	sub	local05, local06
02874     39 71 5A F2 | 	cmps	local04, local05 wcz
02878     01 76 06 16 |  if_a	mov	local07, #1
0287c     01 76 66 E6 |  if_be	neg	local07, #1
02880     3B 71 02 F1 | 	add	local04, local07
02884     A8 D7 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
02888     93 00 A0 FD | 	call	#FCACHE_LOAD_
0288c                 | LR__0058
0288c     37 79 02 F6 | 	mov	local08, local03
02890     02 78 66 F0 | 	shl	local08, #2
02894     07 7B 02 FB | 	rdlong	local09, objptr
02898     3C 7B 02 F1 | 	add	local09, local08
0289c     3D 7D 02 FB | 	rdlong	local10, local09
028a0     80 FF 7F FF 
028a4     00 7C 06 F5 | 	and	local10, ##-65536
028a8     20 7C 46 F5 | 	or	local10, #32
028ac                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
028ac     3D 7D 62 FC | 	wrlong	local10, local09
028b0     3B 6F 02 F1 | 	add	local03, local07
028b4     38 6F 0A F2 | 	cmp	local03, local04 wz
028b8     D0 FF 9F 5D |  if_ne	jmp	#LR__0058
028bc                 | LR__0059
028bc     AF F0 03 F6 | 	mov	ptra, fp
028c0     BF 00 A0 FD | 	call	#popregs_
028c4                 | _hng030rm_spin2_scrollup_ret
028c4     2D 00 64 FD | 	ret
028c8                 | 
028c8                 | ' 
028c8                 | ' 
028c8                 | ' 
028c8                 | ' pub inttostr2(i,d):result |q,pos,k,j
028c8                 | _hng030rm_spin2_inttostr2
028c8                 | ' 
028c8                 | ' j:=i
028c8     2F 31 02 F6 | 	mov	_var01, arg02
028cc     01 30 86 F1 | 	sub	_var01, #1
028d0                 | ' pos:=d-1
028d0     18 33 02 F6 | 	mov	_var02, _var01
028d4                 | ' k:=0
028d4     44 0E 06 F1 | 	add	objptr, #68
028d8     07 5F 02 F1 | 	add	arg02, objptr
028dc                 | ' 
028dc                 | ' n_string[d]:=0
028dc     2F 01 48 FC | 	wrbyte	#0, arg02
028e0                 | ' repeat k from 0 to d-1
028e0     00 34 06 F6 | 	mov	_var03, #0
028e4     00 30 5E F2 | 	cmps	_var01, #0 wcz
028e8     44 0E 86 F1 | 	sub	objptr, #68
028ec     01 36 06 16 |  if_a	mov	_var04, #1
028f0     01 36 66 E6 |  if_be	neg	_var04, #1
028f4     1B 31 02 F1 | 	add	_var01, _var04
028f8     24 D7 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
028fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02900                 | LR__0060
02900     1A 39 02 F6 | 	mov	_var05, _var03
02904     44 0E 06 F1 | 	add	objptr, #68
02908     07 39 02 F1 | 	add	_var05, objptr
0290c                 | '   n_string[k]:=48
0290c     1C 61 48 FC | 	wrbyte	#48, _var05
02910     1B 35 02 F1 | 	add	_var03, _var04
02914     18 35 0A F2 | 	cmp	_var03, _var01 wz
02918     44 0E 86 F1 | 	sub	objptr, #68
0291c     E0 FF 9F 5D |  if_ne	jmp	#LR__0060
02920                 | LR__0061
02920                 | ' 
02920                 | ' if (j<>0)
02920     00 5C 0E F2 | 	cmp	arg01, #0 wz
02924     40 00 90 AD |  if_e	jmp	#LR__0064
02928                 | ' 
02928                 | '   repeat while (pos>-1)
02928                 | LR__0062
02928     FF FF 7F FF 
0292c     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
02930     34 00 90 ED |  if_be	jmp	#LR__0063
02934     2E 0B 03 F6 | 	mov	muldiva_, arg01
02938     0A 0C 07 F6 | 	mov	muldivb_, #10
0293c     CC 00 A0 FD | 	call	#unsdivide_
02940     85 3B 02 F6 | 	mov	_var06, muldiva_
02944                 | '     q:=j+//10
02944                 | '     q:=48+q
02944     30 3A 06 F1 | 	add	_var06, #48
02948     19 3D 02 F6 | 	mov	_var07, _var02
0294c     44 0E 06 F1 | 	add	objptr, #68
02950     07 3D 02 F1 | 	add	_var07, objptr
02954                 | '     n_string[pos]:=q
02954     1E 3B 42 FC | 	wrbyte	_var06, _var07
02958                 | '     j:=j+/10
02958     86 5D 02 F6 | 	mov	arg01, muldivb_
0295c                 | '     pos-=1
0295c     01 32 86 F1 | 	sub	_var02, #1
02960     44 0E 86 F1 | 	sub	objptr, #68
02964     C0 FF 9F FD | 	jmp	#LR__0062
02968                 | LR__0063
02968                 | LR__0064
02968     44 0E 06 F1 | 	add	objptr, #68
0296c     07 2B 02 F6 | 	mov	result1, objptr
02970     44 0E 86 F1 | 	sub	objptr, #68
02974                 | ' 
02974                 | ' 
02974                 | ' q:=@n_string
02974                 | ' return q
02974                 | _hng030rm_spin2_inttostr2_ret
02974     2D 00 64 FD | 	ret
02978                 | 
02978                 | ' 
02978                 | ' 
02978                 | ' 
02978                 | ' '*************************************************************************
02978                 | ' '                                                                        *
02978                 | ' '  Mode setting and driver start                                                          *
02978                 | ' '                                                                        *
02978                 | ' '*************************************************************************
02978                 | ' 
02978                 | ' ''---------  Set the graphics mode
02978                 | ' 
02978                 | ' 
02978                 | ' 
02978                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02978                 | _hng030rm_spin2_setmode
02978     50 5A 05 F6 | 	mov	COUNT_, #80
0297c     B0 00 A0 FD | 	call	#pushregs_
02980     2E 6B 02 F6 | 	mov	local01, arg01
02984                 | ' 
02984                 | ' '' mode:tn_bb_cc_vv_hh
02984                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02984                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02984                 | ' 
02984                 | ' if mode==(512+192+48)
02984     01 00 00 FF 
02988     F0 6A 0E F2 | 	cmp	local01, ##752 wz
0298c                 | '   return 'no RAM
0298c     1C 0A 90 AD |  if_e	jmp	#LR__0105
02990                 | ' 
02990                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02990     35 6D 02 F6 | 	mov	local02, local01
02994     06 6C 46 F0 | 	shr	local02, #6
02998     07 6C 06 F5 | 	and	local02, #7
0299c     08 6C 26 F3 | 	fle	local02, #8
029a0     36 6F 02 F6 | 	mov	local03, local02
029a4     30 6E 62 FD | 	jmprel	local03
029a8                 | LR__0065
029a8     20 00 90 FD | 	jmp	#LR__0066
029ac     58 00 90 FD | 	jmp	#LR__0067
029b0     90 00 90 FD | 	jmp	#LR__0068
029b4     C8 00 90 FD | 	jmp	#LR__0069
029b8     00 01 90 FD | 	jmp	#LR__0070
029bc     38 01 90 FD | 	jmp	#LR__0071
029c0     70 01 90 FD | 	jmp	#LR__0072
029c4     A8 01 90 FD | 	jmp	#LR__0073
029c8     E4 01 90 FD | 	jmp	#LR__0074
029cc                 | LR__0066
029cc                 | ' 
029cc                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
029cc     50 0E 06 F1 | 	add	objptr, #80
029d0     07 5D 02 F6 | 	mov	arg01, objptr
029d4     50 0E 86 F1 | 	sub	objptr, #80
029d8     0E 00 00 FF 
029dc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
029e0     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029e4     38 73 02 F6 | 	mov	local05, local04
029e8     10 74 06 F6 | 	mov	local06, #16
029ec     39 5F 02 F6 | 	mov	arg02, local05
029f0     10 60 06 F6 | 	mov	arg03, #16
029f4     0E 00 00 FF 
029f8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029fc     2C 34 B0 FD | 	call	#__system__longmove
02a00     15 77 02 F6 | 	mov	local07, result1
02a04     A8 01 90 FD | 	jmp	#LR__0074
02a08                 | LR__0067
02a08                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02a08     50 0E 06 F1 | 	add	objptr, #80
02a0c     07 5D 02 F6 | 	mov	arg01, objptr
02a10     50 0E 86 F1 | 	sub	objptr, #80
02a14     0E 00 00 FF 
02a18     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02a1c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a20     38 73 02 F6 | 	mov	local05, local04
02a24     10 74 06 F6 | 	mov	local06, #16
02a28     39 5F 02 F6 | 	mov	arg02, local05
02a2c     10 60 06 F6 | 	mov	arg03, #16
02a30     0E 00 00 FF 
02a34     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02a38     F0 33 B0 FD | 	call	#__system__longmove
02a3c     15 77 02 F6 | 	mov	local07, result1
02a40     6C 01 90 FD | 	jmp	#LR__0074
02a44                 | LR__0068
02a44                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02a44     50 0E 06 F1 | 	add	objptr, #80
02a48     07 5D 02 F6 | 	mov	arg01, objptr
02a4c     50 0E 86 F1 | 	sub	objptr, #80
02a50     0E 00 00 FF 
02a54     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a58     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a5c     38 73 02 F6 | 	mov	local05, local04
02a60     10 74 06 F6 | 	mov	local06, #16
02a64     39 5F 02 F6 | 	mov	arg02, local05
02a68     10 60 06 F6 | 	mov	arg03, #16
02a6c     0E 00 00 FF 
02a70     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a74     B4 33 B0 FD | 	call	#__system__longmove
02a78     15 77 02 F6 | 	mov	local07, result1
02a7c     30 01 90 FD | 	jmp	#LR__0074
02a80                 | LR__0069
02a80                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a80     50 0E 06 F1 | 	add	objptr, #80
02a84     07 5D 02 F6 | 	mov	arg01, objptr
02a88     50 0E 86 F1 | 	sub	objptr, #80
02a8c     0E 00 00 FF 
02a90     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a94     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a98     38 73 02 F6 | 	mov	local05, local04
02a9c     10 74 06 F6 | 	mov	local06, #16
02aa0     39 5F 02 F6 | 	mov	arg02, local05
02aa4     10 60 06 F6 | 	mov	arg03, #16
02aa8     0E 00 00 FF 
02aac     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02ab0     78 33 B0 FD | 	call	#__system__longmove
02ab4     15 77 02 F6 | 	mov	local07, result1
02ab8     F4 00 90 FD | 	jmp	#LR__0074
02abc                 | LR__0070
02abc                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02abc     50 0E 06 F1 | 	add	objptr, #80
02ac0     07 5D 02 F6 | 	mov	arg01, objptr
02ac4     50 0E 86 F1 | 	sub	objptr, #80
02ac8     0E 00 00 FF 
02acc     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02ad0     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02ad4     38 73 02 F6 | 	mov	local05, local04
02ad8     10 74 06 F6 | 	mov	local06, #16
02adc     39 5F 02 F6 | 	mov	arg02, local05
02ae0     10 60 06 F6 | 	mov	arg03, #16
02ae4     0E 00 00 FF 
02ae8     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02aec     3C 33 B0 FD | 	call	#__system__longmove
02af0     15 77 02 F6 | 	mov	local07, result1
02af4     B8 00 90 FD | 	jmp	#LR__0074
02af8                 | LR__0071
02af8                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02af8     50 0E 06 F1 | 	add	objptr, #80
02afc     07 5D 02 F6 | 	mov	arg01, objptr
02b00     50 0E 86 F1 | 	sub	objptr, #80
02b04     0E 00 00 FF 
02b08     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b0c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b10     38 73 02 F6 | 	mov	local05, local04
02b14     10 74 06 F6 | 	mov	local06, #16
02b18     39 5F 02 F6 | 	mov	arg02, local05
02b1c     10 60 06 F6 | 	mov	arg03, #16
02b20     0E 00 00 FF 
02b24     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b28     00 33 B0 FD | 	call	#__system__longmove
02b2c     15 77 02 F6 | 	mov	local07, result1
02b30     7C 00 90 FD | 	jmp	#LR__0074
02b34                 | LR__0072
02b34                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02b34     50 0E 06 F1 | 	add	objptr, #80
02b38     07 5D 02 F6 | 	mov	arg01, objptr
02b3c     50 0E 86 F1 | 	sub	objptr, #80
02b40     0E 00 00 FF 
02b44     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02b48     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b4c     38 73 02 F6 | 	mov	local05, local04
02b50     10 74 06 F6 | 	mov	local06, #16
02b54     39 5F 02 F6 | 	mov	arg02, local05
02b58     10 60 06 F6 | 	mov	arg03, #16
02b5c     0E 00 00 FF 
02b60     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02b64     C4 32 B0 FD | 	call	#__system__longmove
02b68     15 77 02 F6 | 	mov	local07, result1
02b6c     40 00 90 FD | 	jmp	#LR__0074
02b70                 | LR__0073
02b70                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02b70     50 0E 06 F1 | 	add	objptr, #80
02b74     07 79 02 F6 | 	mov	local08, objptr
02b78     3C 7B 02 F6 | 	mov	local09, local08
02b7c     0F 00 00 FF 
02b80     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02b84     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b88     38 73 02 F6 | 	mov	local05, local04
02b8c     10 74 06 F6 | 	mov	local06, #16
02b90     3D 5D 02 F6 | 	mov	arg01, local09
02b94     39 5F 02 F6 | 	mov	arg02, local05
02b98     10 60 06 F6 | 	mov	arg03, #16
02b9c     50 0E 86 F1 | 	sub	objptr, #80
02ba0     0F 00 00 FF 
02ba4     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02ba8     80 32 B0 FD | 	call	#__system__longmove
02bac     15 77 02 F6 | 	mov	local07, result1
02bb0                 | LR__0074
02bb0                 | ' 
02bb0                 | ' ' 4-bit graphics: do nothing with timings :)
02bb0                 | ' if mode<512
02bb0     01 00 00 FF 
02bb4     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02bb8     20 00 90 3D |  if_ae	jmp	#LR__0075
02bbc     0C 00 00 FF 
02bc0     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02bc4     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02bc8                 | '   palette_ptr:=@ataripalette
02bc8     18 0E 06 F1 | 	add	objptr, #24
02bcc     07 7D 62 FC | 	wrlong	local10, objptr
02bd0     18 0E 86 F1 | 	sub	objptr, #24
02bd4     0C 00 00 FF 
02bd8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02bdc                 | LR__0075
02bdc                 | ' 
02bdc                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02bdc     35 6D 02 F6 | 	mov	local02, local01
02be0     01 00 00 FF 
02be4     30 6C 06 F5 | 	and	local02, ##560
02be8     01 00 00 FF 
02bec     30 6C 0E F2 | 	cmp	local02, ##560 wz
02bf0     48 00 90 5D |  if_ne	jmp	#LR__0076
02bf4                 | '   timings[5]:=4
02bf4     64 0E 06 F1 | 	add	objptr, #100
02bf8     07 09 68 FC | 	wrlong	#4, objptr
02bfc     18 0E 06 F1 | 	add	objptr, #24
02c00     07 7F 02 FB | 	rdlong	local11, objptr
02c04     01 7E 66 F0 | 	shl	local11, #1
02c08                 | '   timings[11]:=timings[11]<<1
02c08     07 7F 62 FC | 	wrlong	local11, objptr
02c0c                 | '   putpixel:=p8
02c0c     6C 0E 06 F1 | 	add	objptr, #108
02c10     07 6D 02 FB | 	rdlong	local02, objptr
02c14     10 0E 86 F1 | 	sub	objptr, #16
02c18     07 6D 62 FC | 	wrlong	local02, objptr
02c1c     0C 00 00 FF 
02c20     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c24     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02c28                 | '   palette_ptr:=@ataripalette
02c28     C0 0E 86 F1 | 	sub	objptr, #192
02c2c     07 81 62 FC | 	wrlong	local12, objptr
02c30     18 0E 86 F1 | 	sub	objptr, #24
02c34     0C 00 00 FF 
02c38     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c3c                 | LR__0076
02c3c                 | ' 
02c3c                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02c3c     35 6D 02 F6 | 	mov	local02, local01
02c40     01 00 00 FF 
02c44     30 6C 06 F5 | 	and	local02, ##560
02c48     01 00 00 FF 
02c4c     10 6C 0E F2 | 	cmp	local02, ##528 wz
02c50     48 00 90 5D |  if_ne	jmp	#LR__0077
02c54                 | '   timings[5]:=16
02c54     64 0E 06 F1 | 	add	objptr, #100
02c58     07 21 68 FC | 	wrlong	#16, objptr
02c5c     18 0E 06 F1 | 	add	objptr, #24
02c60     07 83 02 FB | 	rdlong	local13, objptr
02c64     01 82 46 F0 | 	shr	local13, #1
02c68                 | '   timings[11]:=timings[11]>>1
02c68     07 83 62 FC | 	wrlong	local13, objptr
02c6c                 | '   putpixel:=p2
02c6c     64 0E 06 F1 | 	add	objptr, #100
02c70     07 6D 02 FB | 	rdlong	local02, objptr
02c74     08 0E 86 F1 | 	sub	objptr, #8
02c78     07 6D 62 FC | 	wrlong	local02, objptr
02c7c     0C 00 00 FF 
02c80     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02c84     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02c88                 | '   palette_ptr:=@fourcolors
02c88     C0 0E 86 F1 | 	sub	objptr, #192
02c8c     07 85 62 FC | 	wrlong	local14, objptr
02c90     18 0E 86 F1 | 	sub	objptr, #24
02c94     0C 00 00 FF 
02c98     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02c9c                 | LR__0077
02c9c                 | ' 
02c9c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02c9c     35 6D 02 F6 | 	mov	local02, local01
02ca0     01 00 00 FF 
02ca4     30 6C 06 F5 | 	and	local02, ##560
02ca8     01 00 00 FF 
02cac     00 6C 0E F2 | 	cmp	local02, ##512 wz
02cb0     48 00 90 5D |  if_ne	jmp	#LR__0078
02cb4                 | '   timings[5]:=32
02cb4     64 0E 06 F1 | 	add	objptr, #100
02cb8     07 41 68 FC | 	wrlong	#32, objptr
02cbc     18 0E 06 F1 | 	add	objptr, #24
02cc0     07 87 02 FB | 	rdlong	local15, objptr
02cc4     02 86 46 F0 | 	shr	local15, #2
02cc8                 | '   timings[11]:=timings[11]>>2
02cc8     07 87 62 FC | 	wrlong	local15, objptr
02ccc                 | '   putpixel:=p1
02ccc     60 0E 06 F1 | 	add	objptr, #96
02cd0     07 6D 02 FB | 	rdlong	local02, objptr
02cd4     04 0E 86 F1 | 	sub	objptr, #4
02cd8     07 6D 62 FC | 	wrlong	local02, objptr
02cdc     0C 00 00 FF 
02ce0     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02ce4     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02ce8                 | '   palette_ptr:=@twocolors
02ce8     C0 0E 86 F1 | 	sub	objptr, #192
02cec     07 89 62 FC | 	wrlong	local16, objptr
02cf0     18 0E 86 F1 | 	sub	objptr, #24
02cf4     0C 00 00 FF 
02cf8     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02cfc                 | LR__0078
02cfc                 | ' 
02cfc                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02cfc     35 6D 02 F6 | 	mov	local02, local01
02d00     01 00 00 FF 
02d04     30 6C 06 F5 | 	and	local02, ##560
02d08     01 00 00 FF 
02d0c     20 6C 0E F2 | 	cmp	local02, ##544 wz
02d10     30 00 90 5D |  if_ne	jmp	#LR__0079
02d14                 | '   putpixel:=p4
02d14     E4 0E 06 F1 | 	add	objptr, #228
02d18     07 6D 02 FB | 	rdlong	local02, objptr
02d1c     0C 0E 86 F1 | 	sub	objptr, #12
02d20     07 6D 62 FC | 	wrlong	local02, objptr
02d24     0C 00 00 FF 
02d28     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02d2c     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02d30                 | '   palette_ptr:=@vga16
02d30     C0 0E 86 F1 | 	sub	objptr, #192
02d34     07 8B 62 FC | 	wrlong	local17, objptr
02d38     18 0E 86 F1 | 	sub	objptr, #24
02d3c     0C 00 00 FF 
02d40     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d44                 | LR__0079
02d44                 | ' 
02d44                 | ' repeat i from 0 to 4
02d44     00 8C 06 F6 | 	mov	local18, #0
02d48     F8 D2 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
02d4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d50                 | LR__0080
02d50     46 8F 02 F6 | 	mov	local19, local18
02d54     02 8E 66 F0 | 	shl	local19, #2
02d58     50 0E 06 F1 | 	add	objptr, #80
02d5c     07 8F 02 F1 | 	add	local19, objptr
02d60     2C 0E 86 F1 | 	sub	objptr, #44
02d64     07 91 02 FB | 	rdlong	local20, objptr
02d68     24 0E 86 F1 | 	sub	objptr, #36
02d6c     11 90 66 F0 | 	shl	local20, #17
02d70     47 93 02 FB | 	rdlong	local21, local19
02d74     48 93 02 F1 | 	add	local21, local20
02d78     49 95 02 F6 | 	mov	local22, local21
02d7c     80 40 38 FF 
02d80     00 94 06 F1 | 	add	local22, ##1887502336
02d84                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d84     47 95 62 FC | 	wrlong	local22, local19
02d88     01 8C 06 F1 | 	add	local18, #1
02d8c     05 8C 5E F2 | 	cmps	local18, #5 wcz
02d90     BC FF 9F CD |  if_b	jmp	#LR__0080
02d94                 | LR__0081
02d94     24 0E 06 F1 | 	add	objptr, #36
02d98     07 97 02 FB | 	rdlong	local23, objptr
02d9c     11 96 66 F0 | 	shl	local23, #17
02da0     40 0E 06 F1 | 	add	objptr, #64
02da4     07 99 02 FB | 	rdlong	local24, objptr
02da8     4B 99 02 F1 | 	add	local24, local23
02dac                 | ' timings[5]:=timings[5]+hdmibase<<17
02dac     07 99 62 FC | 	wrlong	local24, objptr
02db0                 | ' clkfreq:=timings[13]
02db0     20 0E 06 F1 | 	add	objptr, #32
02db4     07 6D 02 FB | 	rdlong	local02, objptr
02db8     14 6C 66 FC | 	wrlong	local02, #20
02dbc                 | ' hubset(timings[14])
02dbc     04 0E 06 F1 | 	add	objptr, #4
02dc0     07 5D 02 FB | 	rdlong	arg01, objptr
02dc4     88 0E 86 F1 | 	sub	objptr, #136
02dc8     00 5C 62 FD | 	hubset	arg01
02dcc                 | ' waitms(1)
02dcc     01 5C 06 F6 | 	mov	arg01, #1
02dd0     F8 32 B0 FD | 	call	#__system___waitms
02dd4     35 9B 02 F6 | 	mov	local25, local01
02dd8     03 9A 06 F5 | 	and	local25, #3
02ddc     4D 9D C2 F9 | 	decod	local26, local25
02de0                 | ' 
02de0                 | ' 
02de0                 | ' xzoom:=1<<(mode & 3)
02de0     CC 0E 06 F1 | 	add	objptr, #204
02de4     07 9D 62 FC | 	wrlong	local26, objptr
02de8                 | ' 
02de8                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02de8     4E 79 02 F6 | 	mov	local08, local26
02dec     CC 0E 86 F1 | 	sub	objptr, #204
02df0     08 78 0E F2 | 	cmp	local08, #8 wz
02df4     24 00 90 5D |  if_ne	jmp	#LR__0082
02df8     35 7B 02 F6 | 	mov	local09, local01
02dfc     04 7A 46 F0 | 	shr	local09, #4
02e00     03 7A 06 F5 | 	and	local09, #3
02e04     03 7A 0E F2 | 	cmp	local09, #3 wz
02e08     10 00 90 AD |  if_e	jmp	#LR__0082
02e0c                 | '   xzoom:=4
02e0c     04 6C 06 F6 | 	mov	local02, #4
02e10     CC 0E 06 F1 | 	add	objptr, #204
02e14     07 09 68 FC | 	wrlong	#4, objptr
02e18     CC 0E 86 F1 | 	sub	objptr, #204
02e1c                 | LR__0082
02e1c     35 9F 02 F6 | 	mov	local27, local01
02e20     02 9E 46 F0 | 	shr	local27, #2
02e24     03 9E 06 F5 | 	and	local27, #3
02e28     4F A1 C2 F9 | 	decod	local28, local27
02e2c                 | ' 
02e2c                 | ' yzoom:=1<<((mode>>2) & 3)
02e2c     D0 0E 06 F1 | 	add	objptr, #208
02e30     07 A1 62 FC | 	wrlong	local28, objptr
02e34     04 0E 86 F1 | 	sub	objptr, #4
02e38     07 79 02 FB | 	rdlong	local08, objptr
02e3c     04 0E 06 F1 | 	add	objptr, #4
02e40     07 71 02 FB | 	rdlong	local04, objptr
02e44     38 79 02 FD | 	qmul	local08, local04
02e48     18 A2 62 FD | 	getqx	local29
02e4c                 | ' azoom:=xzoom*yzoom
02e4c     04 0E 06 F1 | 	add	objptr, #4
02e50     07 A3 62 FC | 	wrlong	local29, objptr
02e54                 | ' 
02e54                 | ' cpl:=timings[11]
02e54     58 0E 86 F1 | 	sub	objptr, #88
02e58     07 6D 02 FB | 	rdlong	local02, objptr
02e5c     14 0E 06 F1 | 	add	objptr, #20
02e60     07 6D 62 FC | 	wrlong	local02, objptr
02e64     90 0E 86 F1 | 	sub	objptr, #144
02e68                 | ' if (mode<512)
02e68     01 00 00 FF 
02e6c     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02e70     60 00 90 3D |  if_ae	jmp	#LR__0083
02e74     80 0E 06 F1 | 	add	objptr, #128
02e78     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e7c     04 0A 47 F0 | 	shr	muldiva_, #4
02e80     50 0E 06 F1 | 	add	objptr, #80
02e84     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e88     D0 0E 86 F1 | 	sub	objptr, #208
02e8c     CC 00 A0 FD | 	call	#unsdivide_
02e90                 | '   lines:=(timings[12]>>4)+/yzoom
02e90     94 0E 06 F1 | 	add	objptr, #148
02e94     07 0D 63 FC | 	wrlong	muldivb_, objptr
02e98                 | '   if ((timings[12]>>4)+//yzoom) <>0
02e98     14 0E 86 F1 | 	sub	objptr, #20
02e9c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ea0     04 0A 47 F0 | 	shr	muldiva_, #4
02ea4     50 0E 06 F1 | 	add	objptr, #80
02ea8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02eac     D0 0E 86 F1 | 	sub	objptr, #208
02eb0     CC 00 A0 FD | 	call	#unsdivide_
02eb4     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02eb8     AC 00 90 AD |  if_e	jmp	#LR__0086
02ebc                 | '     lines +=1
02ebc     94 0E 06 F1 | 	add	objptr, #148
02ec0     07 6D 02 FB | 	rdlong	local02, objptr
02ec4     01 6C 06 F1 | 	add	local02, #1
02ec8     07 6D 62 FC | 	wrlong	local02, objptr
02ecc     94 0E 86 F1 | 	sub	objptr, #148
02ed0                 | ' 
02ed0                 | ' else
02ed0     94 00 90 FD | 	jmp	#LR__0086
02ed4                 | LR__0083
02ed4     80 0E 06 F1 | 	add	objptr, #128
02ed8     07 0B 03 FB | 	rdlong	muldiva_, objptr
02edc     50 0E 06 F1 | 	add	objptr, #80
02ee0     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ee4     D0 0E 86 F1 | 	sub	objptr, #208
02ee8     D0 00 A0 FD | 	call	#divide_
02eec                 | '   lines:=timings[12]/yzoom
02eec     94 0E 06 F1 | 	add	objptr, #148
02ef0     07 0D 63 FC | 	wrlong	muldivb_, objptr
02ef4                 | '   if cpl//xzoom==0
02ef4     04 0E 86 F1 | 	sub	objptr, #4
02ef8     07 0B 03 FB | 	rdlong	muldiva_, objptr
02efc     3C 0E 06 F1 | 	add	objptr, #60
02f00     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f04     CC 0E 86 F1 | 	sub	objptr, #204
02f08     D0 00 A0 FD | 	call	#divide_
02f0c     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f10     28 00 90 5D |  if_ne	jmp	#LR__0084
02f14                 | '     cpl:=cpl/xzoom
02f14     90 0E 06 F1 | 	add	objptr, #144
02f18     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f1c     3C 0E 06 F1 | 	add	objptr, #60
02f20     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f24     CC 0E 86 F1 | 	sub	objptr, #204
02f28     D0 00 A0 FD | 	call	#divide_
02f2c     90 0E 06 F1 | 	add	objptr, #144
02f30     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f34     90 0E 86 F1 | 	sub	objptr, #144
02f38                 | '   else
02f38     2C 00 90 FD | 	jmp	#LR__0085
02f3c                 | LR__0084
02f3c     90 0E 06 F1 | 	add	objptr, #144
02f40     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f44     3C 0E 06 F1 | 	add	objptr, #60
02f48     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f4c     CC 0E 86 F1 | 	sub	objptr, #204
02f50     D0 00 A0 FD | 	call	#divide_
02f54     86 A5 02 F6 | 	mov	local30, muldivb_
02f58     01 A4 06 F1 | 	add	local30, #1
02f5c                 | '     cpl:=cpl/xzoom+1
02f5c     90 0E 06 F1 | 	add	objptr, #144
02f60     07 A5 62 FC | 	wrlong	local30, objptr
02f64     90 0E 86 F1 | 	sub	objptr, #144
02f68                 | LR__0085
02f68                 | LR__0086
02f68     90 0E 06 F1 | 	add	objptr, #144
02f6c     07 79 02 FB | 	rdlong	local08, objptr
02f70     04 0E 06 F1 | 	add	objptr, #4
02f74     07 71 02 FB | 	rdlong	local04, objptr
02f78     38 79 02 FD | 	qmul	local08, local04
02f7c     18 A6 62 FD | 	getqx	local31
02f80                 | ' 
02f80                 | ' buflen:=(cpl*lines)
02f80     64 0E 86 F1 | 	sub	objptr, #100
02f84     07 A7 62 FC | 	wrlong	local31, objptr
02f88     30 0E 86 F1 | 	sub	objptr, #48
02f8c     02 A6 66 F0 | 	shl	local31, #2
02f90     13 A8 C6 F9 | 	decod	local32, #19
02f94     53 A9 82 F1 | 	sub	local32, local31
02f98                 | ' buf_ptr:=$80000-4*buflen
02f98     07 A9 62 FC | 	wrlong	local32, objptr
02f9c     50 0E 06 F1 | 	add	objptr, #80
02fa0     07 AB 02 F6 | 	mov	local33, objptr
02fa4                 | ' mode_ptr:=@timings
02fa4     3C 0E 86 F1 | 	sub	objptr, #60
02fa8     07 AB 62 FC | 	wrlong	local33, objptr
02fac                 | ' graphmode:=mode
02fac     B0 0E 06 F1 | 	add	objptr, #176
02fb0     07 6B 62 FC | 	wrlong	local01, objptr
02fb4     C4 0E 86 F1 | 	sub	objptr, #196
02fb8                 | ' makedl(mode)
02fb8     35 5D 02 F6 | 	mov	arg01, local01
02fbc                 | ' 
02fbc                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02fbc                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02fbc                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02fbc                 | ' 
02fbc                 | ' '   0 - display a up/down border line
02fbc                 | ' 
02fbc                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02fbc                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02fbc                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02fbc                 | ' '    nnnn - font line to display, 0..15
02fbc                 | ' '    llllll - character line, determines the cursor Y position
02fbc                 | ' 
02fbc                 | ' 
02fbc                 | ' if (mode &256==0)
02fbc     00 5D CE F7 | 	test	arg01, #256 wz
02fc0     1C 00 90 5D |  if_ne	jmp	#LR__0087
02fc4     07 AD 02 FB | 	rdlong	local34, objptr
02fc8     04 00 00 FF 
02fcc     00 AD 86 F1 | 	sub	local34, ##2304
02fd0                 | '   dl_ptr:=buf_ptr-4*576
02fd0     1C 0E 06 F1 | 	add	objptr, #28
02fd4     07 AD 62 FC | 	wrlong	local34, objptr
02fd8     1C 0E 86 F1 | 	sub	objptr, #28
02fdc                 | ' else
02fdc     18 00 90 FD | 	jmp	#LR__0088
02fe0                 | LR__0087
02fe0     07 AF 02 FB | 	rdlong	local35, objptr
02fe4     03 00 00 FF 
02fe8     C0 AF 86 F1 | 	sub	local35, ##1984
02fec                 | '   dl_ptr:=buf_ptr-4*496
02fec     1C 0E 06 F1 | 	add	objptr, #28
02ff0     07 AF 62 FC | 	wrlong	local35, objptr
02ff4     1C 0E 86 F1 | 	sub	objptr, #28
02ff8                 | LR__0088
02ff8     2E B1 02 F6 | 	mov	local36, arg01
02ffc     02 B0 46 F0 | 	shr	local36, #2
03000     03 B0 06 F5 | 	and	local36, #3
03004                 | '  ' dl_ptr:=buf_ptr-4*540
03004                 | ' 
03004                 | ' vzoom:=((mode>>2) & 3)
03004                 | ' 
03004                 | ' 
03004                 | ' if mode<512 '' text modes
03004     01 00 00 FF 
03008     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
0300c     E4 01 90 3D |  if_ae	jmp	#LR__0096
03010                 | ' 
03010                 | '   if timings[6]>0 'borders
03010     68 0E 06 F1 | 	add	objptr, #104
03014     07 B3 02 FB | 	rdlong	local37, objptr
03018     68 0E 86 F1 | 	sub	objptr, #104
0301c     00 B2 5E F2 | 	cmps	local37, #0 wcz
03020     D4 00 90 ED |  if_be	jmp	#LR__0093
03024                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03024     00 B4 06 F6 | 	mov	local38, #0
03028     68 0E 06 F1 | 	add	objptr, #104
0302c     07 B7 02 FB | 	rdlong	local39, objptr
03030     68 0E 86 F1 | 	sub	objptr, #104
03034     01 B6 86 F1 | 	sub	local39, #1
03038     00 B6 5E F2 | 	cmps	local39, #0 wcz
0303c     01 B8 06 16 |  if_a	mov	local40, #1
03040     01 B8 66 E6 |  if_be	neg	local40, #1
03044     5C BB 02 F6 | 	mov	local41, local40
03048     5C B7 02 F1 | 	add	local39, local40
0304c     D8 CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
03050     93 00 A0 FD | 	call	#FCACHE_LOAD_
03054                 | LR__0089
03054     5A BD 02 F6 | 	mov	local42, local38
03058     02 BC 66 F0 | 	shl	local42, #2
0305c     1C 0E 06 F1 | 	add	objptr, #28
03060     07 BF 02 FB | 	rdlong	local43, objptr
03064     1C 0E 86 F1 | 	sub	objptr, #28
03068     5E BF 02 F1 | 	add	local43, local42
0306c                 | '       long[dl_ptr+4*i]:=$0
0306c     5F 01 68 FC | 	wrlong	#0, local43
03070     5D B5 02 F1 | 	add	local38, local41
03074     5B B5 0A F2 | 	cmp	local38, local39 wz
03078     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
0307c                 | LR__0090
0307c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0307c     68 0E 06 F1 | 	add	objptr, #104
03080     07 B5 02 FB | 	rdlong	local38, objptr
03084     18 0E 06 F1 | 	add	objptr, #24
03088     07 B9 02 FB | 	rdlong	local40, objptr
0308c     5C B5 02 F1 | 	add	local38, local40
03090     0C 0E 06 F1 | 	add	objptr, #12
03094     07 C1 02 FB | 	rdlong	local44, objptr
03098     01 C0 86 F1 | 	sub	local44, #1
0309c     24 0E 86 F1 | 	sub	objptr, #36
030a0     07 C3 02 FB | 	rdlong	local45, objptr
030a4     18 0E 06 F1 | 	add	objptr, #24
030a8     07 C5 02 FB | 	rdlong	local46, objptr
030ac     80 0E 86 F1 | 	sub	objptr, #128
030b0     62 C3 02 F1 | 	add	local45, local46
030b4     61 C1 5A F2 | 	cmps	local44, local45 wcz
030b8     01 C6 06 16 |  if_a	mov	local47, #1
030bc     01 C6 66 E6 |  if_be	neg	local47, #1
030c0     63 C9 02 F6 | 	mov	local48, local47
030c4     63 C1 02 F1 | 	add	local44, local47
030c8     5C CF 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
030cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
030d0                 | LR__0091
030d0     5A CB 02 F6 | 	mov	local49, local38
030d4     02 CA 66 F0 | 	shl	local49, #2
030d8     1C 0E 06 F1 | 	add	objptr, #28
030dc     07 CD 02 FB | 	rdlong	local50, objptr
030e0     1C 0E 86 F1 | 	sub	objptr, #28
030e4     65 CD 02 F1 | 	add	local50, local49
030e8                 | '       long[dl_ptr+4*i]:=$0
030e8     66 01 68 FC | 	wrlong	#0, local50
030ec     64 B5 02 F1 | 	add	local38, local48
030f0     60 B5 0A F2 | 	cmp	local38, local44 wz
030f4     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
030f8                 | LR__0092
030f8                 | LR__0093
030f8     10 CE 06 F6 | 	mov	local51, #16
030fc     58 CF 62 F0 | 	shl	local51, local36
03100                 | '   lpc:=16<<vzoom
03100                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03100     68 0E 06 F1 | 	add	objptr, #104
03104     07 B5 02 FB | 	rdlong	local38, objptr
03108     5A D1 02 F6 | 	mov	local52, local38
0310c     18 0E 06 F1 | 	add	objptr, #24
03110     07 D3 02 FB | 	rdlong	local53, objptr
03114     69 D1 02 F1 | 	add	local52, local53
03118     01 D0 86 F1 | 	sub	local52, #1
0311c     18 0E 86 F1 | 	sub	objptr, #24
03120     07 C7 02 FB | 	rdlong	local47, objptr
03124     68 0E 86 F1 | 	sub	objptr, #104
03128     63 D1 5A F2 | 	cmps	local52, local47 wcz
0312c     01 D4 06 16 |  if_a	mov	local54, #1
03130     01 D4 66 E6 |  if_be	neg	local54, #1
03134     6A D7 02 F6 | 	mov	local55, local54
03138     6A D1 02 F1 | 	add	local52, local54
0313c     70 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
03140     93 00 A0 FD | 	call	#FCACHE_LOAD_
03144                 | LR__0094
03144     5A 0B 03 F6 | 	mov	muldiva_, local38
03148     68 0E 06 F1 | 	add	objptr, #104
0314c     07 D9 02 FB | 	rdlong	local56, objptr
03150     68 0E 86 F1 | 	sub	objptr, #104
03154     6C 0B 83 F1 | 	sub	muldiva_, local56
03158     67 0D 03 F6 | 	mov	muldivb_, local51
0315c     CC 00 A0 FD | 	call	#unsdivide_
03160     58 0B 43 F0 | 	shr	muldiva_, local36
03164                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03164     85 DB 02 F6 | 	mov	local57, muldiva_
03168     5A 0B 03 F6 | 	mov	muldiva_, local38
0316c     68 0E 06 F1 | 	add	objptr, #104
03170     07 D9 02 FB | 	rdlong	local56, objptr
03174     68 0E 86 F1 | 	sub	objptr, #104
03178     6C 0B 83 F1 | 	sub	muldiva_, local56
0317c     67 0D 03 F6 | 	mov	muldivb_, local51
03180     CC 00 A0 FD | 	call	#unsdivide_
03184     86 DD 02 F6 | 	mov	local58, muldivb_
03188                 | '     charline:=(i-timings[6])+/lpc
03188     90 0E 06 F1 | 	add	objptr, #144
0318c     07 D9 02 FB | 	rdlong	local56, objptr
03190     90 0E 86 F1 | 	sub	objptr, #144
03194     6E D9 02 FD | 	qmul	local56, local58
03198     18 DE 62 FD | 	getqx	local59
0319c     02 DE 66 F0 | 	shl	local59, #2
031a0     07 E1 02 FB | 	rdlong	local60, objptr
031a4     6F E1 02 F1 | 	add	local60, local59
031a8     2E E3 02 F6 | 	mov	local61, arg01
031ac     03 E2 06 F5 | 	and	local61, #3
031b0     71 E1 02 F1 | 	add	local60, local61
031b4                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
031b4     0C E0 66 F0 | 	shl	local60, #12
031b8     08 DA 66 F0 | 	shl	local57, #8
031bc     6D E1 02 F1 | 	add	local60, local57
031c0     02 DC 66 F0 | 	shl	local58, #2
031c4     6E E1 02 F1 | 	add	local60, local58
031c8     01 E0 06 F1 | 	add	local60, #1
031cc     5A E5 02 F6 | 	mov	local62, local38
031d0     02 E4 66 F0 | 	shl	local62, #2
031d4     1C 0E 06 F1 | 	add	objptr, #28
031d8     07 E7 02 FB | 	rdlong	local63, objptr
031dc     1C 0E 86 F1 | 	sub	objptr, #28
031e0     72 E7 02 F1 | 	add	local63, local62
031e4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
031e4     73 E1 62 FC | 	wrlong	local60, local63
031e8     6B B5 02 F1 | 	add	local38, local55
031ec     68 B5 0A F2 | 	cmp	local38, local52 wz
031f0     50 FF 9F 5D |  if_ne	jmp	#LR__0094
031f4                 | LR__0095
031f4                 | LR__0096
031f4                 | ' 
031f4                 | ' 
031f4                 | ' 
031f4                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
031f4     01 00 00 FF 
031f8     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
031fc     AC 01 90 CD |  if_b	jmp	#LR__0104
03200                 | ' 
03200                 | '   if timings[6]>0 'borders
03200     68 0E 06 F1 | 	add	objptr, #104
03204     07 B3 02 FB | 	rdlong	local37, objptr
03208     68 0E 86 F1 | 	sub	objptr, #104
0320c     00 B2 5E F2 | 	cmps	local37, #0 wcz
03210     D4 00 90 ED |  if_be	jmp	#LR__0101
03214                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03214     00 B4 06 F6 | 	mov	local38, #0
03218     68 0E 06 F1 | 	add	objptr, #104
0321c     07 E9 02 FB | 	rdlong	local64, objptr
03220     68 0E 86 F1 | 	sub	objptr, #104
03224     01 E8 86 F1 | 	sub	local64, #1
03228     00 E8 5E F2 | 	cmps	local64, #0 wcz
0322c     01 B8 06 16 |  if_a	mov	local40, #1
03230     01 B8 66 E6 |  if_be	neg	local40, #1
03234     5C EB 02 F6 | 	mov	local65, local40
03238     5C E9 02 F1 | 	add	local64, local40
0323c     E8 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03240     93 00 A0 FD | 	call	#FCACHE_LOAD_
03244                 | LR__0097
03244     5A ED 02 F6 | 	mov	local66, local38
03248     02 EC 66 F0 | 	shl	local66, #2
0324c     1C 0E 06 F1 | 	add	objptr, #28
03250     07 EF 02 FB | 	rdlong	local67, objptr
03254     1C 0E 86 F1 | 	sub	objptr, #28
03258     76 EF 02 F1 | 	add	local67, local66
0325c                 | '       long[dl_ptr+4*i]:=$0
0325c     77 01 68 FC | 	wrlong	#0, local67
03260     75 B5 02 F1 | 	add	local38, local65
03264     74 B5 0A F2 | 	cmp	local38, local64 wz
03268     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
0326c                 | LR__0098
0326c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0326c     68 0E 06 F1 | 	add	objptr, #104
03270     07 B5 02 FB | 	rdlong	local38, objptr
03274     18 0E 06 F1 | 	add	objptr, #24
03278     07 B9 02 FB | 	rdlong	local40, objptr
0327c     5C B5 02 F1 | 	add	local38, local40
03280     0C 0E 06 F1 | 	add	objptr, #12
03284     07 F1 02 FB | 	rdlong	local68, objptr
03288     01 F0 86 F1 | 	sub	local68, #1
0328c     24 0E 86 F1 | 	sub	objptr, #36
03290     07 C3 02 FB | 	rdlong	local45, objptr
03294     18 0E 06 F1 | 	add	objptr, #24
03298     07 C5 02 FB | 	rdlong	local46, objptr
0329c     80 0E 86 F1 | 	sub	objptr, #128
032a0     62 C3 02 F1 | 	add	local45, local46
032a4     61 F1 5A F2 | 	cmps	local68, local45 wcz
032a8     01 C6 06 16 |  if_a	mov	local47, #1
032ac     01 C6 66 E6 |  if_be	neg	local47, #1
032b0     63 F3 02 F6 | 	mov	local69, local47
032b4     63 F1 02 F1 | 	add	local68, local47
032b8     6C CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
032bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
032c0                 | LR__0099
032c0     5A F5 02 F6 | 	mov	local70, local38
032c4     02 F4 66 F0 | 	shl	local70, #2
032c8     1C 0E 06 F1 | 	add	objptr, #28
032cc     07 F7 02 FB | 	rdlong	local71, objptr
032d0     1C 0E 86 F1 | 	sub	objptr, #28
032d4     7A F7 02 F1 | 	add	local71, local70
032d8                 | '       long[dl_ptr+4*i]:=$0
032d8     7B 01 68 FC | 	wrlong	#0, local71
032dc     79 B5 02 F1 | 	add	local38, local69
032e0     78 B5 0A F2 | 	cmp	local38, local68 wz
032e4     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
032e8                 | LR__0100
032e8                 | LR__0101
032e8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
032e8     68 0E 06 F1 | 	add	objptr, #104
032ec     07 B5 02 FB | 	rdlong	local38, objptr
032f0     5A F9 02 F6 | 	mov	local72, local38
032f4     18 0E 06 F1 | 	add	objptr, #24
032f8     07 D3 02 FB | 	rdlong	local53, objptr
032fc     69 F9 02 F1 | 	add	local72, local53
03300     01 F8 86 F1 | 	sub	local72, #1
03304     18 0E 86 F1 | 	sub	objptr, #24
03308     07 C7 02 FB | 	rdlong	local47, objptr
0330c     68 0E 86 F1 | 	sub	objptr, #104
03310     63 F9 5A F2 | 	cmps	local72, local47 wcz
03314     01 D4 06 16 |  if_a	mov	local54, #1
03318     01 D4 66 E6 |  if_be	neg	local54, #1
0331c     6A FB 02 F6 | 	mov	local73, local54
03320     6A F9 02 F1 | 	add	local72, local54
03324     58 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
03328     93 00 A0 FD | 	call	#FCACHE_LOAD_
0332c                 | LR__0102
0332c     5A FD 02 F6 | 	mov	local74, local38
03330     68 0E 06 F1 | 	add	objptr, #104
03334     07 D9 02 FB | 	rdlong	local56, objptr
03338     6C FD 82 F1 | 	sub	local74, local56
0333c     58 FD 42 F0 | 	shr	local74, local36
03340     28 0E 06 F1 | 	add	objptr, #40
03344     07 D9 02 FB | 	rdlong	local56, objptr
03348     90 0E 86 F1 | 	sub	objptr, #144
0334c     7E D9 02 FD | 	qmul	local56, local74
03350     18 FE 62 FD | 	getqx	local75
03354     02 FE 66 F0 | 	shl	local75, #2
03358     07 01 03 FB | 	rdlong	local76, objptr
0335c     7F 01 03 F1 | 	add	local76, local75
03360     2E 03 03 F6 | 	mov	local77, arg01
03364     03 02 07 F5 | 	and	local77, #3
03368     81 01 03 F1 | 	add	local76, local77
0336c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
0336c     0C 00 67 F0 | 	shl	local76, #12
03370     02 00 07 F1 | 	add	local76, #2
03374     2E 05 03 F6 | 	mov	local78, arg01
03378     30 04 07 F5 | 	and	local78, #48
0337c     02 04 47 F0 | 	shr	local78, #2
03380     82 01 03 F1 | 	add	local76, local78
03384     5A 07 03 F6 | 	mov	local79, local38
03388     02 06 67 F0 | 	shl	local79, #2
0338c     1C 0E 06 F1 | 	add	objptr, #28
03390     07 09 03 FB | 	rdlong	local80, objptr
03394     1C 0E 86 F1 | 	sub	objptr, #28
03398     83 09 03 F1 | 	add	local80, local79
0339c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0339c     84 01 63 FC | 	wrlong	local76, local80
033a0     7D B5 02 F1 | 	add	local38, local73
033a4     7C B5 0A F2 | 	cmp	local38, local72 wz
033a8     80 FF 9F 5D |  if_ne	jmp	#LR__0102
033ac                 | LR__0103
033ac                 | LR__0104
033ac                 | LR__0105
033ac     AF F0 03 F6 | 	mov	ptra, fp
033b0     BF 00 A0 FD | 	call	#popregs_
033b4                 | _hng030rm_spin2_setmode_ret
033b4     2D 00 64 FD | 	ret
033b8                 | 
033b8                 | ' 
033b8                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
033b8                 | _retrocog_spin2_serialcog
033b8     1C 5A 05 F6 | 	mov	COUNT_, #28
033bc     B0 00 A0 FD | 	call	#pushregs_
033c0                 | ' 
033c0                 | ' 'start serial and midi
033c0                 | ' 
033c0                 | ' serial_start(rxpin, txpin, baudrate)
033c0     20 5C 06 F6 | 	mov	arg01, #32
033c4     21 5E 06 F6 | 	mov	arg02, #33
033c8     A6 0E 00 FF 
033cc     00 60 06 F6 | 	mov	arg03, ##1920000
033d0     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033d4                 | ' serial_start(midiin,midiout,mbaudrate)
033d4     1D 5C 06 F6 | 	mov	arg01, #29
033d8     1E 5E 06 F6 | 	mov	arg02, #30
033dc     3D 00 00 FF 
033e0     12 60 06 F6 | 	mov	arg03, ##31250
033e4     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033e8                 | ' serial_start(srxpin,stxpin,sbaudrate)
033e8     42 0F 00 FF 
033ec     80 6A 06 F6 | 	mov	local01, ##2000000
033f0     3F 5C 06 F6 | 	mov	arg01, #63
033f4     3E 5E 06 F6 | 	mov	arg02, #62
033f8     42 0F 00 FF 
033fc     80 60 06 F6 | 	mov	arg03, ##2000000
03400     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03404                 | ' 
03404                 | ' mb:=(-1)
03404     01 6C 66 F6 | 	neg	local02, #1
03408                 | ' b:=(-1)
03408     01 6E 66 F6 | 	neg	local03, #1
0340c                 | ' 
0340c                 | ' mousefront:=0
0340c     00 70 06 F6 | 	mov	local04, #0
03410     08 0E 06 F1 | 	add	objptr, #8
03414     07 01 68 FC | 	wrlong	#0, objptr
03418                 | ' mousetail:=0
03418     04 0E 06 F1 | 	add	objptr, #4
0341c     07 01 68 FC | 	wrlong	#0, objptr
03420     0C 0E 86 F1 | 	sub	objptr, #12
03424                 | ' kbdfront:=0
03424     07 01 68 FC | 	wrlong	#0, objptr
03428                 | ' kbdtail:=0
03428     04 0E 06 F1 | 	add	objptr, #4
0342c     07 01 68 FC | 	wrlong	#0, objptr
03430                 | ' midifront:=0
03430     0C 0E 06 F1 | 	add	objptr, #12
03434     07 01 68 FC | 	wrlong	#0, objptr
03438                 | ' miditail:=0
03438     04 0E 06 F1 | 	add	objptr, #4
0343c     07 01 68 FC | 	wrlong	#0, objptr
03440                 | ' serialfront:=0
03440     04 0E 06 F1 | 	add	objptr, #4
03444     07 01 68 FC | 	wrlong	#0, objptr
03448                 | ' serialtail:=0
03448     04 0E 06 F1 | 	add	objptr, #4
0344c     07 01 68 FC | 	wrlong	#0, objptr
03450                 | ' long[$30]:=0
03450     30 00 6C FC | 	wrlong	#0, #48
03454                 | ' long[$34]:=0
03454     34 00 6C FC | 	wrlong	#0, #52
03458                 | ' long[$38]:=0
03458     38 00 6C FC | 	wrlong	#0, #56
0345c     1C 0E 86 F1 | 	sub	objptr, #28
03460                 | ' long[$3C]:=0
03460     3C 00 6C FC | 	wrlong	#0, #60
03464                 | ' 
03464                 | ' repeat
03464                 | LR__0106
03464                 | ' 
03464                 | ' '  repeat 
03464                 | '   rr:=rxcheck(rxpin)
03464     20 5C 06 F6 | 	mov	arg01, #32
03468     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
0346c     15 73 02 F6 | 	mov	local05, result1
03470                 | '   mrr:=rxcheck(midiin)
03470     1D 5C 06 F6 | 	mov	arg01, #29
03474     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03478     15 75 02 F6 | 	mov	local06, result1
0347c                 | '   srr:=rxcheck(srxpin)
0347c     3F 70 06 F6 | 	mov	local04, #63
03480     3F 5C 06 F6 | 	mov	arg01, #63
03484     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03488     15 77 02 F6 | 	mov	local07, result1
0348c     3B 79 02 F6 | 	mov	local08, local07
03490                 | ' 
03490                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03490                 | ' 
03490                 | '   
03490                 | ' ' midi. Must be >= $80 for a command
03490                 | ' '$80-$8F - 3 bytes note off. note, velocity
03490                 | ' '$90-$9F - 3 bytes note on, note, velocity
03490                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03490                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03490                 | ' '$C0-$CF - 2 bytes program change
03490                 | ' '$D0-$DF - 2 bytes mono aftertouch
03490                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03490                 | ' '$F0-$FF - 1 byte
03490                 | '   
03490                 | '   if srr>=0
03490     00 78 5E F2 | 	cmps	local08, #0 wcz
03494     7C 00 90 CD |  if_b	jmp	#LR__0108
03498                 | '   
03498                 | '     if serialfront<>((serialtail-1) //32)
03498     1C 0E 06 F1 | 	add	objptr, #28
0349c     07 77 02 FB | 	rdlong	local07, objptr
034a0     3B 71 02 F6 | 	mov	local04, local07
034a4     01 70 86 F1 | 	sub	local04, #1
034a8     38 6B 52 F6 | 	abs	local01, local04 wc
034ac     1F 6A 06 F5 | 	and	local01, #31
034b0     35 6B 62 C6 |  if_b	neg	local01, local01
034b4     04 0E 86 F1 | 	sub	objptr, #4
034b8     07 7B 02 FB | 	rdlong	local09, objptr
034bc     18 0E 86 F1 | 	sub	objptr, #24
034c0     3D 7D 02 F6 | 	mov	local10, local09
034c4     35 7D 0A F2 | 	cmp	local10, local01 wz
034c8     48 00 90 AD |  if_e	jmp	#LR__0107
034cc     18 0E 06 F1 | 	add	objptr, #24
034d0     07 7D 02 FB | 	rdlong	local10, objptr
034d4     01 00 00 FF 
034d8     08 0F 06 F1 | 	add	objptr, ##776
034dc     07 7D 02 F1 | 	add	local10, objptr
034e0     3E 7F 02 F6 | 	mov	local11, local10
034e4                 | '       serialbuf[serialfront]:=srr
034e4     3F 79 42 FC | 	wrbyte	local08, local11
034e8                 | '       serialfront+=1
034e8     01 00 00 FF 
034ec     08 0F 86 F1 | 	sub	objptr, ##776
034f0     07 6B 02 FB | 	rdlong	local01, objptr
034f4     01 6A 06 F1 | 	add	local01, #1
034f8     07 6B 62 FC | 	wrlong	local01, objptr
034fc                 | '       serialfront:=serialfront // 32
034fc     35 77 02 F6 | 	mov	local07, local01
03500     3B 71 52 F6 | 	abs	local04, local07 wc
03504     1F 70 06 F5 | 	and	local04, #31
03508     38 71 62 C6 |  if_b	neg	local04, local04
0350c     07 71 62 FC | 	wrlong	local04, objptr
03510     18 0E 86 F1 | 	sub	objptr, #24
03514                 | LR__0107
03514                 | LR__0108
03514                 | '     
03514                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03514     80 74 5E F2 | 	cmps	local06, #128 wcz
03518     08 00 90 CD |  if_b	jmp	#LR__0109
0351c     BF 74 5E F2 | 	cmps	local06, #191 wcz
03520     10 00 90 ED |  if_be	jmp	#LR__0110
03524                 | LR__0109
03524     E0 74 5E F2 | 	cmps	local06, #224 wcz
03528     1C 00 90 CD |  if_b	jmp	#LR__0111
0352c     EF 74 5E F2 | 	cmps	local06, #239 wcz
03530     14 00 90 1D |  if_a	jmp	#LR__0111
03534                 | LR__0110
03534                 | '     mb:=2
03534     02 6C 06 F6 | 	mov	local02, #2
03538     3A 71 02 F6 | 	mov	local04, local06
0353c     18 70 66 F0 | 	shl	local04, #24
03540     38 81 02 F6 | 	mov	local12, local04
03544                 | '     midireport:=mrr<<24
03544     40 83 02 F6 | 	mov	local13, local12
03548                 | LR__0111
03548                 | ' 
03548                 | '   if (mrr>=$C0) && (mrr<=$DF)
03548     C0 74 5E F2 | 	cmps	local06, #192 wcz
0354c     1C 00 90 CD |  if_b	jmp	#LR__0112
03550     DF 74 5E F2 | 	cmps	local06, #223 wcz
03554     14 00 90 1D |  if_a	jmp	#LR__0112
03558                 | '     mb:=1
03558     01 6C 06 F6 | 	mov	local02, #1
0355c     3A 71 02 F6 | 	mov	local04, local06
03560     18 70 66 F0 | 	shl	local04, #24
03564     38 85 02 F6 | 	mov	local14, local04
03568                 | '     midireport:=mrr<<24
03568     42 83 02 F6 | 	mov	local13, local14
0356c                 | LR__0112
0356c                 | '   
0356c                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
0356c     F0 74 5E F2 | 	cmps	local06, #240 wcz
03570     10 00 90 CD |  if_b	jmp	#LR__0113
03574                 | '     mb:=4
03574     04 6C 06 F6 | 	mov	local02, #4
03578     3A 87 02 F6 | 	mov	local15, local06
0357c     18 86 66 F0 | 	shl	local15, #24
03580                 | '     midireport:=mrr<<24  
03580     43 83 02 F6 | 	mov	local13, local15
03584                 | LR__0113
03584                 | '   
03584                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
03584     80 74 5E F2 | 	cmps	local06, #128 wcz
03588     44 00 90 3D |  if_ae	jmp	#LR__0115
0358c     00 6C 5E F2 | 	cmps	local02, #0 wcz
03590     3C 00 90 ED |  if_be	jmp	#LR__0115
03594     00 74 5E F2 | 	cmps	local06, #0 wcz
03598     34 00 90 CD |  if_b	jmp	#LR__0115
0359c                 | '     
0359c                 | '     mb--
0359c     36 71 02 F6 | 	mov	local04, local02
035a0     36 77 02 F6 | 	mov	local07, local02
035a4     01 76 86 F1 | 	sub	local07, #1
035a8     3B 6D 02 F6 | 	mov	local02, local07
035ac                 | '     if mb<3
035ac     03 6C 5E F2 | 	cmps	local02, #3 wcz
035b0     1C 00 90 3D |  if_ae	jmp	#LR__0114
035b4     36 89 02 F6 | 	mov	local16, local02
035b8     03 88 66 F0 | 	shl	local16, #3
035bc     3A 8B 02 F6 | 	mov	local17, local06
035c0     44 8B 62 F0 | 	shl	local17, local16
035c4                 | '       midireport+=mrr<<(mb<<3)
035c4     41 71 02 F6 | 	mov	local04, local13
035c8     45 71 02 F1 | 	add	local04, local17
035cc     38 83 02 F6 | 	mov	local13, local04
035d0                 | LR__0114
035d0                 | LR__0115
035d0                 | '   
035d0                 | '   if mb==0
035d0     00 6C 0E F2 | 	cmp	local02, #0 wz
035d4     84 00 90 5D |  if_ne	jmp	#LR__0117
035d8                 | '     
035d8                 | '     if midifront<>((miditail-1) //32)
035d8     14 0E 06 F1 | 	add	objptr, #20
035dc     07 77 02 FB | 	rdlong	local07, objptr
035e0     3B 71 02 F6 | 	mov	local04, local07
035e4     01 70 86 F1 | 	sub	local04, #1
035e8     38 6B 52 F6 | 	abs	local01, local04 wc
035ec     1F 6A 06 F5 | 	and	local01, #31
035f0     35 6B 62 C6 |  if_b	neg	local01, local01
035f4     04 0E 86 F1 | 	sub	objptr, #4
035f8     07 7B 02 FB | 	rdlong	local09, objptr
035fc     10 0E 86 F1 | 	sub	objptr, #16
03600     3D 7D 02 F6 | 	mov	local10, local09
03604     35 7D 0A F2 | 	cmp	local10, local01 wz
03608     4C 00 90 AD |  if_e	jmp	#LR__0116
0360c     10 0E 06 F1 | 	add	objptr, #16
03610     07 7D 02 FB | 	rdlong	local10, objptr
03614     02 7C 66 F0 | 	shl	local10, #2
03618     01 00 00 FF 
0361c     90 0E 06 F1 | 	add	objptr, ##656
03620     07 7D 02 F1 | 	add	local10, objptr
03624     3E 8D 02 F6 | 	mov	local18, local10
03628                 | '       midibuf[midifront]:=midireport
03628     46 83 62 FC | 	wrlong	local13, local18
0362c                 | '       midifront+=1
0362c     01 00 00 FF 
03630     90 0E 86 F1 | 	sub	objptr, ##656
03634     07 6B 02 FB | 	rdlong	local01, objptr
03638     01 6A 06 F1 | 	add	local01, #1
0363c     07 6B 62 FC | 	wrlong	local01, objptr
03640                 | '       midifront:=midifront // 32
03640     35 77 02 F6 | 	mov	local07, local01
03644     3B 71 52 F6 | 	abs	local04, local07 wc
03648     1F 70 06 F5 | 	and	local04, #31
0364c     38 71 62 C6 |  if_b	neg	local04, local04
03650     07 71 62 FC | 	wrlong	local04, objptr
03654     10 0E 86 F1 | 	sub	objptr, #16
03658                 | LR__0116
03658                 | '     mb:=(-1)
03658     01 6C 66 F6 | 	neg	local02, #1
0365c                 | LR__0117
0365c                 | ' 
0365c                 | ' 'Keyboard and mouse
0365c                 | ' 
0365c                 | '   if (rr>=$80) && (rr<>$FF)
0365c     80 72 5E F2 | 	cmps	local05, #128 wcz
03660     1C 00 90 CD |  if_b	jmp	#LR__0118
03664     FF 72 0E F2 | 	cmp	local05, #255 wz
03668     14 00 90 AD |  if_e	jmp	#LR__0118
0366c                 | '     b:=3
0366c     03 6E 06 F6 | 	mov	local03, #3
03670     39 71 02 F6 | 	mov	local04, local05
03674     18 70 66 F0 | 	shl	local04, #24
03678     38 8F 02 F6 | 	mov	local19, local04
0367c                 | '     kbmreport:=rr<<24
0367c     47 91 02 F6 | 	mov	local20, local19
03680                 | LR__0118
03680                 | '   
03680                 | '   if (rr<$80) && (b>0) && (rr>=0)
03680     80 72 5E F2 | 	cmps	local05, #128 wcz
03684     38 00 90 3D |  if_ae	jmp	#LR__0119
03688     00 6E 5E F2 | 	cmps	local03, #0 wcz
0368c     30 00 90 ED |  if_be	jmp	#LR__0119
03690     00 72 5E F2 | 	cmps	local05, #0 wcz
03694     28 00 90 CD |  if_b	jmp	#LR__0119
03698                 | '     b--
03698     37 77 02 F6 | 	mov	local07, local03
0369c     01 76 86 F1 | 	sub	local07, #1
036a0     3B 6F 02 F6 | 	mov	local03, local07
036a4     37 93 02 F6 | 	mov	local21, local03
036a8     03 92 66 F0 | 	shl	local21, #3
036ac     39 95 02 F6 | 	mov	local22, local05
036b0     49 95 62 F0 | 	shl	local22, local21
036b4                 | '     kbmreport+=rr<<(b<<3)  
036b4     48 71 02 F6 | 	mov	local04, local20
036b8     4A 71 02 F1 | 	add	local04, local22
036bc     38 91 02 F6 | 	mov	local20, local04
036c0                 | LR__0119
036c0                 | '   
036c0                 | '   if (rr==$FF)
036c0     FF 72 0E F2 | 	cmp	local05, #255 wz
036c4                 | '     b:=0   
036c4     00 6E 06 A6 |  if_e	mov	local03, #0
036c8                 | ' 
036c8                 | '   if b==0  
036c8     00 6E 0E F2 | 	cmp	local03, #0 wz
036cc     14 01 90 5D |  if_ne	jmp	#LR__0124
036d0                 | '  
036d0                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
036d0     00 00 40 FF 
036d4     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
036d8     84 00 90 CD |  if_b	jmp	#LR__0121
036dc     00 80 43 FF 
036e0     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
036e4     78 00 90 3D |  if_ae	jmp	#LR__0121
036e8                 | '       if mousefront<>((mousetail-1) //128)
036e8     0C 0E 06 F1 | 	add	objptr, #12
036ec     07 77 02 FB | 	rdlong	local07, objptr
036f0     3B 71 02 F6 | 	mov	local04, local07
036f4     01 70 86 F1 | 	sub	local04, #1
036f8     38 6B 52 F6 | 	abs	local01, local04 wc
036fc     7F 6A 06 F5 | 	and	local01, #127
03700     35 6B 62 C6 |  if_b	neg	local01, local01
03704     04 0E 86 F1 | 	sub	objptr, #4
03708     07 7B 02 FB | 	rdlong	local09, objptr
0370c     08 0E 86 F1 | 	sub	objptr, #8
03710     3D 7D 02 F6 | 	mov	local10, local09
03714     35 7D 0A F2 | 	cmp	local10, local01 wz
03718     44 00 90 AD |  if_e	jmp	#LR__0120
0371c     08 0E 06 F1 | 	add	objptr, #8
03720     07 7D 02 FB | 	rdlong	local10, objptr
03724     02 7C 66 F0 | 	shl	local10, #2
03728     98 0E 06 F1 | 	add	objptr, #152
0372c     07 7D 02 F1 | 	add	local10, objptr
03730     3E 97 02 F6 | 	mov	local23, local10
03734                 | '         mousebuf[mousefront]:=kbmreport
03734     4B 91 62 FC | 	wrlong	local20, local23
03738                 | '         mousefront+=1
03738     98 0E 86 F1 | 	sub	objptr, #152
0373c     07 6B 02 FB | 	rdlong	local01, objptr
03740     01 6A 06 F1 | 	add	local01, #1
03744     07 6B 62 FC | 	wrlong	local01, objptr
03748                 | '         mousefront:=mousefront // 128
03748     35 77 02 F6 | 	mov	local07, local01
0374c     3B 71 52 F6 | 	abs	local04, local07 wc
03750     7F 70 06 F5 | 	and	local04, #127
03754     38 71 62 C6 |  if_b	neg	local04, local04
03758     07 71 62 FC | 	wrlong	local04, objptr
0375c     08 0E 86 F1 | 	sub	objptr, #8
03760                 | LR__0120
03760                 | LR__0121
03760                 | '     b:=(-1)
03760     01 6E 66 F6 | 	neg	local03, #1
03764                 | ' 
03764                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03764     00 80 43 FF 
03768     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
0376c     70 00 90 CD |  if_b	jmp	#LR__0123
03770     00 00 45 FF 
03774     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03778     64 00 90 3D |  if_ae	jmp	#LR__0123
0377c                 | '       if kbdfront<>((kbdtail-1) //32)
0377c     04 0E 06 F1 | 	add	objptr, #4
03780     07 77 02 FB | 	rdlong	local07, objptr
03784     04 0E 86 F1 | 	sub	objptr, #4
03788     3B 71 02 F6 | 	mov	local04, local07
0378c     01 70 86 F1 | 	sub	local04, #1
03790     38 6B 52 F6 | 	abs	local01, local04 wc
03794     1F 6A 06 F5 | 	and	local01, #31
03798     35 6B 62 C6 |  if_b	neg	local01, local01
0379c     07 7D 02 FB | 	rdlong	local10, objptr
037a0     35 7D 0A F2 | 	cmp	local10, local01 wz
037a4     38 00 90 AD |  if_e	jmp	#LR__0122
037a8     07 6B 02 FB | 	rdlong	local01, objptr
037ac     02 6A 66 F0 | 	shl	local01, #2
037b0     20 0E 06 F1 | 	add	objptr, #32
037b4     07 6B 02 F1 | 	add	local01, objptr
037b8     35 99 02 F6 | 	mov	local24, local01
037bc                 | '         kbdbuf[kbdfront]:=kbmreport
037bc     4C 91 62 FC | 	wrlong	local20, local24
037c0                 | '         kbdfront+=1
037c0     20 0E 86 F1 | 	sub	objptr, #32
037c4     07 77 02 FB | 	rdlong	local07, objptr
037c8     01 76 06 F1 | 	add	local07, #1
037cc     07 77 62 FC | 	wrlong	local07, objptr
037d0                 | '         kbdfront:=kbdfront // 32
037d0     3B 71 52 F6 | 	abs	local04, local07 wc
037d4     1F 70 06 F5 | 	and	local04, #31
037d8     38 71 62 C6 |  if_b	neg	local04, local04
037dc     07 71 62 FC | 	wrlong	local04, objptr
037e0                 | LR__0122
037e0                 | LR__0123
037e0                 | '     b:=(-1)
037e0     01 6E 66 F6 | 	neg	local03, #1
037e4                 | LR__0124
037e4                 | ' 
037e4                 | ' 
037e4                 | '   if long[$30]==0
037e4     30 70 0E FB | 	rdlong	local04, #48 wz
037e8     5C 00 90 5D |  if_ne	jmp	#LR__0126
037ec                 | '     if kbdfront<>kbdtail
037ec     07 71 02 FB | 	rdlong	local04, objptr
037f0     04 0E 06 F1 | 	add	objptr, #4
037f4     07 6B 02 FB | 	rdlong	local01, objptr
037f8     04 0E 86 F1 | 	sub	objptr, #4
037fc     35 71 0A F2 | 	cmp	local04, local01 wz
03800     44 00 90 AD |  if_e	jmp	#LR__0125
03804     04 0E 06 F1 | 	add	objptr, #4
03808     07 9B 02 FB | 	rdlong	local25, objptr
0380c     02 9A 66 F0 | 	shl	local25, #2
03810     1C 0E 06 F1 | 	add	objptr, #28
03814     07 9B 02 F1 | 	add	local25, objptr
03818                 | '       long[$30]:=kbdbuf[kbdtail]
03818     4D 71 02 FB | 	rdlong	local04, local25
0381c     30 70 66 FC | 	wrlong	local04, #48
03820                 | '       kbdtail++
03820     1C 0E 86 F1 | 	sub	objptr, #28
03824     07 7D 02 FB | 	rdlong	local10, objptr
03828     3E 6B 02 F6 | 	mov	local01, local10
0382c     01 6A 06 F1 | 	add	local01, #1
03830     07 6B 62 FC | 	wrlong	local01, objptr
03834                 | '       kbdtail:= kbdtail // 32
03834     35 71 52 F6 | 	abs	local04, local01 wc
03838     1F 70 06 F5 | 	and	local04, #31
0383c     38 71 62 C6 |  if_b	neg	local04, local04
03840     07 71 62 FC | 	wrlong	local04, objptr
03844     04 0E 86 F1 | 	sub	objptr, #4
03848                 | LR__0125
03848                 | LR__0126
03848                 | '       
03848                 | '   if long[$34]==0
03848     34 70 0E FB | 	rdlong	local04, #52 wz
0384c     64 00 90 5D |  if_ne	jmp	#LR__0128
03850                 | '     if mousefront<>mousetail
03850     08 0E 06 F1 | 	add	objptr, #8
03854     07 71 02 FB | 	rdlong	local04, objptr
03858     04 0E 06 F1 | 	add	objptr, #4
0385c     07 7D 02 FB | 	rdlong	local10, objptr
03860     0C 0E 86 F1 | 	sub	objptr, #12
03864     3E 6B 02 F6 | 	mov	local01, local10
03868     35 71 0A F2 | 	cmp	local04, local01 wz
0386c     44 00 90 AD |  if_e	jmp	#LR__0127
03870     0C 0E 06 F1 | 	add	objptr, #12
03874     07 9D 02 FB | 	rdlong	local26, objptr
03878     02 9C 66 F0 | 	shl	local26, #2
0387c     94 0E 06 F1 | 	add	objptr, #148
03880     07 9D 02 F1 | 	add	local26, objptr
03884                 | '       long[$34]:=mousebuf[mousetail]
03884     4E 71 02 FB | 	rdlong	local04, local26
03888     34 70 66 FC | 	wrlong	local04, #52
0388c                 | '       mousetail++
0388c     94 0E 86 F1 | 	sub	objptr, #148
03890     07 7D 02 FB | 	rdlong	local10, objptr
03894     3E 6B 02 F6 | 	mov	local01, local10
03898     01 6A 06 F1 | 	add	local01, #1
0389c     07 6B 62 FC | 	wrlong	local01, objptr
038a0                 | '       mousetail:= mousetail // 128
038a0     35 71 52 F6 | 	abs	local04, local01 wc
038a4     7F 70 06 F5 | 	and	local04, #127
038a8     38 71 62 C6 |  if_b	neg	local04, local04
038ac     07 71 62 FC | 	wrlong	local04, objptr
038b0     0C 0E 86 F1 | 	sub	objptr, #12
038b4                 | LR__0127
038b4                 | LR__0128
038b4                 | ' 
038b4                 | '       
038b4                 | '   if long[$38]==0
038b4     38 70 0E FB | 	rdlong	local04, #56 wz
038b8     6C 00 90 5D |  if_ne	jmp	#LR__0130
038bc                 | '     if midifront<>miditail
038bc     10 0E 06 F1 | 	add	objptr, #16
038c0     07 71 02 FB | 	rdlong	local04, objptr
038c4     04 0E 06 F1 | 	add	objptr, #4
038c8     07 7D 02 FB | 	rdlong	local10, objptr
038cc     14 0E 86 F1 | 	sub	objptr, #20
038d0     3E 6B 02 F6 | 	mov	local01, local10
038d4     35 71 0A F2 | 	cmp	local04, local01 wz
038d8     4C 00 90 AD |  if_e	jmp	#LR__0129
038dc     14 0E 06 F1 | 	add	objptr, #20
038e0     07 9F 02 FB | 	rdlong	local27, objptr
038e4     02 9E 66 F0 | 	shl	local27, #2
038e8     01 00 00 FF 
038ec     8C 0E 06 F1 | 	add	objptr, ##652
038f0     07 9F 02 F1 | 	add	local27, objptr
038f4                 | '       long[$38]:=midibuf[miditail]
038f4     4F 71 02 FB | 	rdlong	local04, local27
038f8     38 70 66 FC | 	wrlong	local04, #56
038fc                 | '       miditail++
038fc     01 00 00 FF 
03900     8C 0E 86 F1 | 	sub	objptr, ##652
03904     07 7D 02 FB | 	rdlong	local10, objptr
03908     3E 6B 02 F6 | 	mov	local01, local10
0390c     01 6A 06 F1 | 	add	local01, #1
03910     07 6B 62 FC | 	wrlong	local01, objptr
03914                 | '       miditail:= miditail // 32
03914     35 71 52 F6 | 	abs	local04, local01 wc
03918     1F 70 06 F5 | 	and	local04, #31
0391c     38 71 62 C6 |  if_b	neg	local04, local04
03920     07 71 62 FC | 	wrlong	local04, objptr
03924     14 0E 86 F1 | 	sub	objptr, #20
03928                 | LR__0129
03928                 | LR__0130
03928                 | '       
03928                 | '   if long[$3c]==0
03928     3C 70 0E FB | 	rdlong	local04, #60 wz
0392c     34 FB 9F 5D |  if_ne	jmp	#LR__0106
03930                 | '     if serialfront<>serialtail
03930     18 0E 06 F1 | 	add	objptr, #24
03934     07 71 02 FB | 	rdlong	local04, objptr
03938     04 0E 06 F1 | 	add	objptr, #4
0393c     07 7D 02 FB | 	rdlong	local10, objptr
03940     1C 0E 86 F1 | 	sub	objptr, #28
03944     3E 6B 02 F6 | 	mov	local01, local10
03948     35 71 0A F2 | 	cmp	local04, local01 wz
0394c     14 FB 9F AD |  if_e	jmp	#LR__0106
03950                 | '       byte[$3c]:=255
03950     3C FE 4D FC | 	wrbyte	#255, #60
03954     1C 0E 06 F1 | 	add	objptr, #28
03958     07 A1 02 FB | 	rdlong	local28, objptr
0395c     01 00 00 FF 
03960     04 0F 06 F1 | 	add	objptr, ##772
03964     07 A1 02 F1 | 	add	local28, objptr
03968                 | '       byte[$3D]:=serialbuf[serialtail]
03968     50 71 C2 FA | 	rdbyte	local04, local28
0396c     3D 70 46 FC | 	wrbyte	local04, #61
03970                 | '       serialtail++
03970     01 00 00 FF 
03974     04 0F 86 F1 | 	sub	objptr, ##772
03978     07 7D 02 FB | 	rdlong	local10, objptr
0397c     3E 6B 02 F6 | 	mov	local01, local10
03980     01 6A 06 F1 | 	add	local01, #1
03984     07 6B 62 FC | 	wrlong	local01, objptr
03988                 | '       serialtail:= serialtail // 32
03988     35 71 52 F6 | 	abs	local04, local01 wc
0398c     1F 70 06 F5 | 	and	local04, #31
03990     38 71 62 C6 |  if_b	neg	local04, local04
03994     07 71 62 FC | 	wrlong	local04, objptr
03998     1C 0E 86 F1 | 	sub	objptr, #28
0399c     C4 FA 9F FD | 	jmp	#LR__0106
039a0     AF F0 03 F6 | 	mov	ptra, fp
039a4     BF 00 A0 FD | 	call	#popregs_
039a8                 | _retrocog_spin2_serialcog_ret
039a8     2D 00 64 FD | 	ret
039ac                 | 
039ac                 | '       
039ac                 | ' 
039ac                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
039ac                 | ' 
039ac                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
039ac                 | _retrocog_spin2_serial_start
039ac     04 5A 05 F6 | 	mov	COUNT_, #4
039b0     B0 00 A0 FD | 	call	#pushregs_
039b4     2E 6B 02 F6 | 	mov	local01, arg01
039b8     2F 6D 02 F6 | 	mov	local02, arg02
039bc                 | ' 
039bc                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
039bc     14 5C 06 FB | 	rdlong	arg01, #20
039c0     10 5E C6 F9 | 	decod	arg02, #16
039c4     2F 5D 02 FD | 	qmul	arg01, arg02
039c8     19 6E 62 FD | 	getqy	local03
039cc     18 70 62 FD | 	getqx	local04
039d0     28 6E 62 FD | 	setq	local03
039d4     30 71 12 FD | 	qdiv	local04, arg03
039d8     18 2A 62 FD | 	getqx	result1
039dc     15 61 02 F6 | 	mov	arg03, result1
039e0     FE FF 7F FF 
039e4     00 60 06 F5 | 	and	arg03, ##-1024
039e8                 | ' bitmode |= 7                                                  ' set bits (8)
039e8     07 60 46 F5 | 	or	arg03, #7
039ec                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
039ec     40 6A 62 FD | 	dirl	local01
039f0     08 00 80 FF 
039f4     35 7D 08 FC | 	wrpin	##4158, local01
039f8     35 61 12 FC | 	wxpin	arg03, local01
039fc     35 01 28 FC | 	wypin	#0, local01
03a00     41 6A 62 FD | 	dirh	local01
03a04                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03a04     40 6C 62 FD | 	dirl	local02
03a08     36 F9 08 FC | 	wrpin	#124, local02
03a0c     36 61 12 FC | 	wxpin	arg03, local02
03a10     36 01 28 FC | 	wypin	#0, local02
03a14     41 6C 62 FD | 	dirh	local02
03a18                 | ' pinhigh(rxpin)
03a18     59 6A 62 FD | 	drvh	local01
03a1c     AF F0 03 F6 | 	mov	ptra, fp
03a20     BF 00 A0 FD | 	call	#popregs_
03a24                 | _retrocog_spin2_serial_start_ret
03a24     2D 00 64 FD | 	ret
03a28                 | 
03a28                 | ' 
03a28                 | ' pub rxcheck(pin) : rxbyte | check
03a28                 | _retrocog_spin2_rxcheck
03a28     03 5A 05 F6 | 	mov	COUNT_, #3
03a2c     B0 00 A0 FD | 	call	#pushregs_
03a30     2E 6B 02 F6 | 	mov	local01, arg01
03a34                 | ' 
03a34                 | ' '' Check for serial input
03a34                 | ' '' -- returns -1 if nothing available
03a34                 | ' 
03a34                 | '   rxbyte := -1
03a34     01 6C 66 F6 | 	neg	local02, #1
03a38                 | '   check := pinr(pin)
03a38     35 5D 02 F6 | 	mov	arg01, local01
03a3c     6C 26 B0 FD | 	call	#__system___pinread
03a40     15 6F 0A F6 | 	mov	local03, result1 wz
03a44                 | '   if (check)
03a44                 | '     rxbyte := rdpin(pin) >> 24
03a44     00 6C 06 56 |  if_ne	mov	local02, #0
03a48     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03a4c     18 6C 46 50 |  if_ne	shr	local02, #24
03a50     36 2B 02 F6 | 	mov	result1, local02
03a54     AF F0 03 F6 | 	mov	ptra, fp
03a58     BF 00 A0 FD | 	call	#popregs_
03a5c                 | _retrocog_spin2_rxcheck_ret
03a5c     2D 00 64 FD | 	ret
03a60                 | 
03a60                 | _trackerplayer_spin2_initModule
03a60     3E 5A 05 F6 | 	mov	COUNT_, #62
03a64     B0 00 A0 FD | 	call	#pushregs_
03a68     24 F1 07 F1 | 	add	ptra, #292
03a6c     AF 5C 62 FC | 	wrlong	arg01, fp
03a70     04 5E 05 F1 | 	add	fp, #4
03a74     AF 5E 62 FC | 	wrlong	arg02, fp
03a78     04 5E 85 F1 | 	sub	fp, #4
03a7c     AF 6A 02 FB | 	rdlong	local01, fp
03a80     02 00 00 FF 
03a84     38 6A 06 F1 | 	add	local01, ##1080
03a88                 | ' 
03a88                 | '   ' Set some data pointers
03a88                 | '   magicFour      := hubPtr + 1080
03a88     9D 0E 06 F1 | 	add	objptr, #157
03a8c     07 6B 62 FC | 	wrlong	local01, objptr
03a90                 | '   nameStr        := hubPtr
03a90     AF 6C 02 FB | 	rdlong	local02, fp
03a94     97 0E 86 F1 | 	sub	objptr, #151
03a98     07 6D 62 FC | 	wrlong	local02, objptr
03a9c     AF 6E 02 FB | 	rdlong	local03, fp
03aa0     14 6E 06 F1 | 	add	local03, #20
03aa4                 | '   samplesInfoLut := hubPtr + 20
03aa4     04 0E 06 F1 | 	add	objptr, #4
03aa8     07 6F 62 FC | 	wrlong	local03, objptr
03aac                 | ' 
03aac                 | '   ' Is this a 31 sample module?
03aac                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03aac     93 0E 06 F1 | 	add	objptr, #147
03ab0     07 6D 02 FB | 	rdlong	local02, objptr
03ab4     9D 0E 86 F1 | 	sub	objptr, #157
03ab8     36 71 C2 FA | 	rdbyte	local04, local02
03abc     4D 70 0E F2 | 	cmp	local04, #77 wz
03ac0     48 01 90 5D |  if_ne	jmp	#LR__0134
03ac4     9D 0E 06 F1 | 	add	objptr, #157
03ac8     07 73 02 FB | 	rdlong	local05, objptr
03acc     9D 0E 86 F1 | 	sub	objptr, #157
03ad0     02 72 06 F1 | 	add	local05, #2
03ad4     39 75 C2 FA | 	rdbyte	local06, local05
03ad8     4B 74 0E F2 | 	cmp	local06, #75 wz
03adc     2C 01 90 5D |  if_ne	jmp	#LR__0134
03ae0     AF 76 02 FB | 	rdlong	local07, fp
03ae4     01 00 00 FF 
03ae8     B6 77 06 F1 | 	add	local07, ##950
03aec                 | '     songLength          := byte[hubPtr + 950]
03aec     3B 6D C2 FA | 	rdbyte	local02, local07
03af0     9A 0E 06 F1 | 	add	objptr, #154
03af4     07 6D 42 FC | 	wrbyte	local02, objptr
03af8     AF 78 02 FB | 	rdlong	local08, fp
03afc     01 00 00 FF 
03b00     B7 79 06 F1 | 	add	local08, ##951
03b04                 | '     unknown1            := byte[hubPtr + 951]
03b04     3C 6D C2 FA | 	rdbyte	local02, local08
03b08     02 0E 06 F1 | 	add	objptr, #2
03b0c     07 6D 42 FC | 	wrbyte	local02, objptr
03b10     AF 7A 02 FB | 	rdlong	local09, fp
03b14     01 00 00 FF 
03b18     B8 7B 06 F1 | 	add	local09, ##952
03b1c                 | '     songPositionsLut    :=      hubPtr + 952
03b1c     06 0E 86 F1 | 	sub	objptr, #6
03b20     07 7B 62 FC | 	wrlong	local09, objptr
03b24     AF 7C 02 FB | 	rdlong	local10, fp
03b28     02 00 00 FF 
03b2c     3C 7C 06 F1 | 	add	local10, ##1084
03b30                 | '     patternsData        :=      hubPtr + 1084
03b30     04 0E 86 F1 | 	sub	objptr, #4
03b34     07 7D 62 FC | 	wrlong	local10, objptr
03b38                 | '     numberOfInstruments := 31
03b38     14 0E 06 F1 | 	add	objptr, #20
03b3c     07 3F 48 FC | 	wrbyte	#31, objptr
03b40                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03b40     0B 0E 86 F1 | 	sub	objptr, #11
03b44     07 01 48 FC | 	wrbyte	#0, objptr
03b48     9B 0E 86 F1 | 	sub	objptr, #155
03b4c                 | '     repeat i from 952 to 1079
03b4c     08 5E 05 F1 | 	add	fp, #8
03b50     01 00 80 FF 
03b54     AF 70 6B FC | 	wrlong	##952, fp
03b58     08 5E 85 F1 | 	sub	fp, #8
03b5c     10 C5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
03b60     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b64                 | LR__0131
03b64                 | '       if byte[hubPtr][i] > numberOfPatterns
03b64     AF 7E 02 FB | 	rdlong	local11, fp
03b68     08 5E 05 F1 | 	add	fp, #8
03b6c     AF 70 02 FB | 	rdlong	local04, fp
03b70     08 5E 85 F1 | 	sub	fp, #8
03b74     3F 71 02 F1 | 	add	local04, local11
03b78     38 75 C2 FA | 	rdbyte	local06, local04
03b7c     9B 0E 06 F1 | 	add	objptr, #155
03b80     07 81 C2 FA | 	rdbyte	local12, objptr
03b84     9B 0E 86 F1 | 	sub	objptr, #155
03b88     40 75 5A F2 | 	cmps	local06, local12 wcz
03b8c     24 00 90 ED |  if_be	jmp	#LR__0132
03b90     AF 7E 02 FB | 	rdlong	local11, fp
03b94     08 5E 05 F1 | 	add	fp, #8
03b98     AF 82 02 FB | 	rdlong	local13, fp
03b9c     08 5E 85 F1 | 	sub	fp, #8
03ba0     3F 83 02 F1 | 	add	local13, local11
03ba4                 | '         numberOfPatterns := byte[hubPtr][i]
03ba4     41 85 C2 FA | 	rdbyte	local14, local13
03ba8     9B 0E 06 F1 | 	add	objptr, #155
03bac     07 85 42 FC | 	wrbyte	local14, objptr
03bb0     9B 0E 86 F1 | 	sub	objptr, #155
03bb4                 | LR__0132
03bb4     08 5E 05 F1 | 	add	fp, #8
03bb8     AF 84 02 FB | 	rdlong	local14, fp
03bbc     01 84 06 F1 | 	add	local14, #1
03bc0     AF 84 62 FC | 	wrlong	local14, fp
03bc4     08 5E 85 F1 | 	sub	fp, #8
03bc8     02 00 00 FF 
03bcc     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03bd0     90 FF 9F CD |  if_b	jmp	#LR__0131
03bd4                 | LR__0133
03bd4                 | '     numberOfPatterns++
03bd4     9B 0E 06 F1 | 	add	objptr, #155
03bd8     07 85 C2 FA | 	rdbyte	local14, objptr
03bdc     07 71 C2 FA | 	rdbyte	local04, objptr
03be0     01 70 06 F1 | 	add	local04, #1
03be4     07 71 42 FC | 	wrbyte	local04, objptr
03be8     07 87 C2 FA | 	rdbyte	local15, objptr
03bec     0A 86 66 F0 | 	shl	local15, #10
03bf0     09 0E 86 F1 | 	sub	objptr, #9
03bf4     07 89 02 FB | 	rdlong	local16, objptr
03bf8     43 89 02 F1 | 	add	local16, local15
03bfc                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03bfc     84 0E 86 F1 | 	sub	objptr, #132
03c00     07 89 62 FC | 	wrlong	local16, objptr
03c04     0E 0E 86 F1 | 	sub	objptr, #14
03c08                 | ' 
03c08                 | '   ' This must be an oldschool 15 sample soundtracker module
03c08                 | '   else
03c08     18 01 90 FD | 	jmp	#LR__0138
03c0c                 | LR__0134
03c0c     AF 8A 02 FB | 	rdlong	local17, fp
03c10     D6 8B 06 F1 | 	add	local17, #470
03c14                 | '     songLength          := byte[hubPtr + 470]
03c14     45 6D C2 FA | 	rdbyte	local02, local17
03c18     9A 0E 06 F1 | 	add	objptr, #154
03c1c     07 6D 42 FC | 	wrbyte	local02, objptr
03c20     AF 8C 02 FB | 	rdlong	local18, fp
03c24     D7 8D 06 F1 | 	add	local18, #471
03c28                 | '     unknown1            := byte[hubPtr + 471]
03c28     46 6D C2 FA | 	rdbyte	local02, local18
03c2c     02 0E 06 F1 | 	add	objptr, #2
03c30     07 6D 42 FC | 	wrbyte	local02, objptr
03c34     AF 8E 02 FB | 	rdlong	local19, fp
03c38     D8 8F 06 F1 | 	add	local19, #472
03c3c                 | '     songPositionsLut    :=      hubPtr + 472
03c3c     06 0E 86 F1 | 	sub	objptr, #6
03c40     07 8F 62 FC | 	wrlong	local19, objptr
03c44     AF 90 02 FB | 	rdlong	local20, fp
03c48     01 00 00 FF 
03c4c     58 90 06 F1 | 	add	local20, ##600
03c50                 | '     patternsData        :=      hubPtr + 600
03c50     04 0E 86 F1 | 	sub	objptr, #4
03c54     07 91 62 FC | 	wrlong	local20, objptr
03c58                 | '     numberOfInstruments := 15
03c58     14 0E 06 F1 | 	add	objptr, #20
03c5c     07 1F 48 FC | 	wrbyte	#15, objptr
03c60                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c60     0B 0E 86 F1 | 	sub	objptr, #11
03c64     07 01 48 FC | 	wrbyte	#0, objptr
03c68     9B 0E 86 F1 | 	sub	objptr, #155
03c6c                 | '     repeat i from 472 to 599
03c6c     08 5E 05 F1 | 	add	fp, #8
03c70     AF B0 6B FC | 	wrlong	#472, fp
03c74     08 5E 85 F1 | 	sub	fp, #8
03c78     F4 C3 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
03c7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c80                 | LR__0135
03c80                 | '       if byte[hubPtr][i] > numberOfPatterns
03c80     AF 7E 02 FB | 	rdlong	local11, fp
03c84     08 5E 05 F1 | 	add	fp, #8
03c88     AF 70 02 FB | 	rdlong	local04, fp
03c8c     08 5E 85 F1 | 	sub	fp, #8
03c90     3F 71 02 F1 | 	add	local04, local11
03c94     38 75 C2 FA | 	rdbyte	local06, local04
03c98     9B 0E 06 F1 | 	add	objptr, #155
03c9c     07 81 C2 FA | 	rdbyte	local12, objptr
03ca0     9B 0E 86 F1 | 	sub	objptr, #155
03ca4     40 75 5A F2 | 	cmps	local06, local12 wcz
03ca8     24 00 90 ED |  if_be	jmp	#LR__0136
03cac     AF 7E 02 FB | 	rdlong	local11, fp
03cb0     08 5E 05 F1 | 	add	fp, #8
03cb4     AF 92 02 FB | 	rdlong	local21, fp
03cb8     08 5E 85 F1 | 	sub	fp, #8
03cbc     3F 93 02 F1 | 	add	local21, local11
03cc0                 | '         numberOfPatterns := byte[hubPtr][i]
03cc0     49 85 C2 FA | 	rdbyte	local14, local21
03cc4     9B 0E 06 F1 | 	add	objptr, #155
03cc8     07 85 42 FC | 	wrbyte	local14, objptr
03ccc     9B 0E 86 F1 | 	sub	objptr, #155
03cd0                 | LR__0136
03cd0     08 5E 05 F1 | 	add	fp, #8
03cd4     AF 84 02 FB | 	rdlong	local14, fp
03cd8     01 84 06 F1 | 	add	local14, #1
03cdc     AF 84 62 FC | 	wrlong	local14, fp
03ce0     08 5E 85 F1 | 	sub	fp, #8
03ce4     01 00 00 FF 
03ce8     58 84 5E F2 | 	cmps	local14, ##600 wcz
03cec     90 FF 9F CD |  if_b	jmp	#LR__0135
03cf0                 | LR__0137
03cf0                 | '     numberOfPatterns++
03cf0     9B 0E 06 F1 | 	add	objptr, #155
03cf4     07 85 C2 FA | 	rdbyte	local14, objptr
03cf8     07 71 C2 FA | 	rdbyte	local04, objptr
03cfc     01 70 06 F1 | 	add	local04, #1
03d00     07 71 42 FC | 	wrbyte	local04, objptr
03d04     07 95 C2 FA | 	rdbyte	local22, objptr
03d08     0A 94 66 F0 | 	shl	local22, #10
03d0c     09 0E 86 F1 | 	sub	objptr, #9
03d10     07 97 02 FB | 	rdlong	local23, objptr
03d14     4A 97 02 F1 | 	add	local23, local22
03d18                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d18     84 0E 86 F1 | 	sub	objptr, #132
03d1c     07 97 62 FC | 	wrlong	local23, objptr
03d20     0E 0E 86 F1 | 	sub	objptr, #14
03d24                 | LR__0138
03d24                 | ' 
03d24                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03d24                 | '   tmpPtr := sampleDataPtr
03d24     0E 0E 06 F1 | 	add	objptr, #14
03d28     07 6D 02 FB | 	rdlong	local02, objptr
03d2c     0C 5E 05 F1 | 	add	fp, #12
03d30     AF 6C 62 FC | 	wrlong	local02, fp
03d34                 | '   repeat i from 1 to numberOfInstruments
03d34     04 5E 85 F1 | 	sub	fp, #4
03d38     AF 02 68 FC | 	wrlong	#1, fp
03d3c     08 5E 85 F1 | 	sub	fp, #8
03d40     98 0E 06 F1 | 	add	objptr, #152
03d44     07 71 C2 FA | 	rdbyte	local04, objptr
03d48     01 70 5E F2 | 	cmps	local04, #1 wcz
03d4c     01 84 06 16 |  if_a	mov	local14, #1
03d50     01 84 66 E6 |  if_be	neg	local14, #1
03d54     42 99 02 F6 | 	mov	local24, local14
03d58     07 9B C2 FA | 	rdbyte	local25, objptr
03d5c     A6 0E 86 F1 | 	sub	objptr, #166
03d60     4C 9B 02 F1 | 	add	local25, local24
03d64                 | LR__0139
03d64     08 5E 05 F1 | 	add	fp, #8
03d68     AF 9C 02 FB | 	rdlong	local26, fp
03d6c     01 9C 86 F1 | 	sub	local26, #1
03d70     02 9C 66 F0 | 	shl	local26, #2
03d74     12 0E 06 F1 | 	add	objptr, #18
03d78     07 9D 02 F1 | 	add	local26, objptr
03d7c                 | '     samplesPtrLut[i-1] := tmpPtr
03d7c     04 5E 05 F1 | 	add	fp, #4
03d80     AF 80 02 FB | 	rdlong	local12, fp
03d84     4E 81 62 FC | 	wrlong	local12, local26
03d88     18 5E 05 F1 | 	add	fp, #24
03d8c     AF 5E 02 F6 | 	mov	arg02, fp
03d90     14 5E 85 F1 | 	sub	fp, #20
03d94     AF 60 02 F6 | 	mov	arg03, fp
03d98     04 5E 05 F1 | 	add	fp, #4
03d9c     AF 62 02 F6 | 	mov	arg04, fp
03da0     04 5E 05 F1 | 	add	fp, #4
03da4     AF 64 02 F6 | 	mov	arg05, fp
03da8     04 5E 05 F1 | 	add	fp, #4
03dac     AF 66 02 F6 | 	mov	arg06, fp
03db0     04 5E 05 F1 | 	add	fp, #4
03db4     AF 68 02 F6 | 	mov	arg07, fp
03db8                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03db8     18 5E 85 F1 | 	sub	fp, #24
03dbc     AF 5C 02 FB | 	rdlong	arg01, fp
03dc0     08 5E 85 F1 | 	sub	fp, #8
03dc4     12 0E 86 F1 | 	sub	objptr, #18
03dc8     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03dcc                 | '     tmpPtr += samLength
03dcc     0C 5E 05 F1 | 	add	fp, #12
03dd0     AF 80 02 FB | 	rdlong	local12, fp
03dd4     04 5E 05 F1 | 	add	fp, #4
03dd8     AF 9E 02 FB | 	rdlong	local27, fp
03ddc     4F 81 02 F1 | 	add	local12, local27
03de0     04 5E 85 F1 | 	sub	fp, #4
03de4     AF 80 62 FC | 	wrlong	local12, fp
03de8     04 5E 85 F1 | 	sub	fp, #4
03dec     AF 80 02 FB | 	rdlong	local12, fp
03df0     4C 81 02 F1 | 	add	local12, local24
03df4     AF 80 62 FC | 	wrlong	local12, fp
03df8     08 5E 85 F1 | 	sub	fp, #8
03dfc     4D 81 0A F2 | 	cmp	local12, local25 wz
03e00     60 FF 9F 5D |  if_ne	jmp	#LR__0139
03e04                 | ' 
03e04                 | '   ' Below this point, all play routine variables are resest to their default values
03e04                 | '   tickCounter                 := 0
03e04     A1 0E 06 F1 | 	add	objptr, #161
03e08     07 01 48 FC | 	wrbyte	#0, objptr
03e0c                 | '   patternRow                  := 0
03e0c     01 0E 06 F1 | 	add	objptr, #1
03e10     07 01 48 FC | 	wrbyte	#0, objptr
03e14                 | '   songPosition                := startPattern
03e14     04 5E 05 F1 | 	add	fp, #4
03e18     AF 6C 02 FB | 	rdlong	local02, fp
03e1c     04 5E 85 F1 | 	sub	fp, #4
03e20     01 0E 06 F1 | 	add	objptr, #1
03e24     07 6D 42 FC | 	wrbyte	local02, objptr
03e28                 | '   currentSongSpeed            := 6
03e28     01 0E 06 F1 | 	add	objptr, #1
03e2c     07 0D 48 FC | 	wrbyte	#6, objptr
03e30                 | '   patternDelay                := 0
03e30     01 0E 06 F1 | 	add	objptr, #1
03e34     07 01 48 FC | 	wrbyte	#0, objptr
03e38                 | '   ticksPerMinute              := 50 * 60
03e38     02 0F 06 F1 | 	add	objptr, #258
03e3c     05 00 80 FF 
03e40     07 71 6B FC | 	wrlong	##3000, objptr
03e44     A7 0F 86 F1 | 	sub	objptr, #423
03e48     07 0B 03 FB | 	rdlong	muldiva_, objptr
03e4c     32 0C 07 F6 | 	mov	muldivb_, #50
03e50     D0 00 A0 FD | 	call	#divide_
03e54                 | '   cyclesToWait                := systemClock / 50
03e54     AB 0F 06 F1 | 	add	objptr, #427
03e58     07 0D 63 FC | 	wrlong	muldivb_, objptr
03e5c                 | '   sampleNumber_memory         := 0
03e5c     35 0E 06 F1 | 	add	objptr, #53
03e60     07 01 48 FC | 	wrbyte	#0, objptr
03e64                 | '   lpFilter                    := 0
03e64     25 0E 86 F1 | 	sub	objptr, #37
03e68     07 01 48 FC | 	wrbyte	#0, objptr
03e6c                 | '   cmdD_memoryX                := 0
03e6c     29 0E 06 F1 | 	add	objptr, #41
03e70     07 01 48 FC | 	wrbyte	#0, objptr
03e74                 | '   cmdD_memoryY                := 0
03e74     01 0E 06 F1 | 	add	objptr, #1
03e78     07 01 48 FC | 	wrbyte	#0, objptr
03e7c                 | '   cmdD_updatePosition         := false
03e7c     01 0E 06 F1 | 	add	objptr, #1
03e80     07 01 48 FC | 	wrbyte	#0, objptr
03e84                 | '   cmdB_memoryZ                := 0
03e84     01 0E 06 F1 | 	add	objptr, #1
03e88     07 01 48 FC | 	wrbyte	#0, objptr
03e8c                 | '   cmdB_updatePosition         := false
03e8c     01 0E 06 F1 | 	add	objptr, #1
03e90     07 01 48 FC | 	wrbyte	#0, objptr
03e94                 | '   cmdE6_updatePositionCommon  := false
03e94     0D 0E 06 F1 | 	add	objptr, #13
03e98     07 01 48 FC | 	wrbyte	#0, objptr
03e9c     F5 0F 86 F1 | 	sub	objptr, #501
03ea0                 | ' 
03ea0                 | '   repeat i from 0 to LAST_CHANNEL
03ea0     08 5E 05 F1 | 	add	fp, #8
03ea4     AF 00 68 FC | 	wrlong	#0, fp
03ea8     08 5E 85 F1 | 	sub	fp, #8
03eac                 | LR__0140
03eac     08 5E 05 F1 | 	add	fp, #8
03eb0     AF A0 02 FB | 	rdlong	local28, fp
03eb4     01 A0 66 F0 | 	shl	local28, #1
03eb8     D7 0E 06 F1 | 	add	objptr, #215
03ebc     07 A1 02 F1 | 	add	local28, objptr
03ec0                 | ' 
03ec0                 | '     currRepeatPoint[i]        := 0
03ec0     50 01 58 FC | 	wrword	#0, local28
03ec4     AF A2 02 FB | 	rdlong	local29, fp
03ec8     01 A2 66 F0 | 	shl	local29, #1
03ecc     1C 0E 86 F1 | 	sub	objptr, #28
03ed0     07 A3 02 F1 | 	add	local29, objptr
03ed4                 | '     currSampleLength[i]       := 4
03ed4     51 09 58 FC | 	wrword	#4, local29
03ed8     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03edc     AF A6 02 FB | 	rdlong	local31, fp
03ee0     02 A6 66 F0 | 	shl	local31, #2
03ee4     14 0E 86 F1 | 	sub	objptr, #20
03ee8     07 A7 02 F1 | 	add	local31, objptr
03eec                 | '     currSamplePtr[i]          := @null
03eec     53 A5 62 FC | 	wrlong	local30, local31
03ef0     AF A8 02 FB | 	rdlong	local32, fp
03ef4     10 0E 06 F1 | 	add	objptr, #16
03ef8     07 A9 02 F1 | 	add	local32, objptr
03efc                 | '     currSampleNr[i]           := 0
03efc     54 01 48 FC | 	wrbyte	#0, local32
03f00     AF AA 02 FB | 	rdlong	local33, fp
03f04     02 AA 66 F0 | 	shl	local33, #2
03f08     0C 0E 06 F1 | 	add	objptr, #12
03f0c     07 AB 02 F1 | 	add	local33, objptr
03f10                 | '     currRepeatLength[i]       := 1
03f10     55 03 68 FC | 	wrlong	#1, local33
03f14     AF AC 02 FB | 	rdlong	local34, fp
03f18     02 AC 66 F0 | 	shl	local34, #2
03f1c     1C 0E 06 F1 | 	add	objptr, #28
03f20     07 AD 02 F1 | 	add	local34, objptr
03f24                 | '     currPeriod[i]             := 400
03f24     56 21 6B FC | 	wrlong	#400, local34
03f28     AF AE 02 FB | 	rdlong	local35, fp
03f2c     02 AE 66 F0 | 	shl	local35, #2
03f30     48 0E 06 F1 | 	add	objptr, #72
03f34     07 AF 02 F1 | 	add	local35, objptr
03f38                 | '     lastSetPeriod[i]          := 400
03f38     57 21 6B FC | 	wrlong	#400, local35
03f3c     AF B0 02 FB | 	rdlong	local36, fp
03f40     02 B0 66 F0 | 	shl	local36, #2
03f44     10 0E 06 F1 | 	add	objptr, #16
03f48     07 B1 02 F1 | 	add	local36, objptr
03f4c                 | '     lastSetSamplePtr[i]       := 0
03f4c     58 01 68 FC | 	wrlong	#0, local36
03f50     AF B2 02 FB | 	rdlong	local37, fp
03f54     02 B2 66 F0 | 	shl	local37, #2
03f58     10 0E 06 F1 | 	add	objptr, #16
03f5c     07 B3 02 F1 | 	add	local37, objptr
03f60                 | '     lastSetSampleNr[i]        := 0
03f60     59 01 68 FC | 	wrlong	#0, local37
03f64     AF B4 02 FB | 	rdlong	local38, fp
03f68     02 B4 66 F0 | 	shl	local38, #2
03f6c     10 0E 06 F1 | 	add	objptr, #16
03f70     07 B5 02 F1 | 	add	local38, objptr
03f74                 | '     lastSetSampleLength[i]    := 0
03f74     5A 01 68 FC | 	wrlong	#0, local38
03f78     AF B6 02 FB | 	rdlong	local39, fp
03f7c     02 B6 66 F0 | 	shl	local39, #2
03f80     10 0E 06 F1 | 	add	objptr, #16
03f84     07 B7 02 F1 | 	add	local39, objptr
03f88                 | '     lastSetRepeatLength[i]    := 0
03f88     5B 01 68 FC | 	wrlong	#0, local39
03f8c     AF B8 02 FB | 	rdlong	local40, fp
03f90     02 B8 66 F0 | 	shl	local40, #2
03f94     10 0E 06 F1 | 	add	objptr, #16
03f98     07 B9 02 F1 | 	add	local40, objptr
03f9c                 | '     lastSetRepeatPoint[i]     := 0
03f9c     5C 01 68 FC | 	wrlong	#0, local40
03fa0     AF BA 02 FB | 	rdlong	local41, fp
03fa4     02 BA 66 F0 | 	shl	local41, #2
03fa8     78 0E 86 F1 | 	sub	objptr, #120
03fac     07 BB 02 F1 | 	add	local41, objptr
03fb0                 | '     currVolume[i]             := 0
03fb0     5D 01 68 FC | 	wrlong	#0, local41
03fb4     AF BC 02 FB | 	rdlong	local42, fp
03fb8     01 BC 66 F0 | 	shl	local42, #1
03fbc     20 0E 06 F1 | 	add	objptr, #32
03fc0     07 BD 02 F1 | 	add	local42, objptr
03fc4                 | '     currPanning[i]            := 0
03fc4     5E 01 58 FC | 	wrword	#0, local42
03fc8     AF BE 02 FB | 	rdlong	local43, fp
03fcc     A9 0E 06 F1 | 	add	objptr, #169
03fd0     07 BF 02 F1 | 	add	local43, objptr
03fd4                 | '     cmd3_memoryZ[i]           := 0
03fd4     5F 01 48 FC | 	wrbyte	#0, local43
03fd8     AF C0 02 FB | 	rdlong	local44, fp
03fdc     04 0E 06 F1 | 	add	objptr, #4
03fe0     07 C1 02 F1 | 	add	local44, objptr
03fe4                 | '     cmd4_memoryY[i]           := 0
03fe4     60 01 48 FC | 	wrbyte	#0, local44
03fe8     AF C2 02 FB | 	rdlong	local45, fp
03fec     04 0E 06 F1 | 	add	objptr, #4
03ff0     07 C3 02 F1 | 	add	local45, objptr
03ff4                 | '     cmd4_memoryX[i]           := 0
03ff4     61 01 48 FC | 	wrbyte	#0, local45
03ff8     AF C4 02 FB | 	rdlong	local46, fp
03ffc     04 0E 06 F1 | 	add	objptr, #4
04000     07 C5 02 F1 | 	add	local46, objptr
04004                 | '     cmd7_memoryY[i]           := 0
04004     62 01 48 FC | 	wrbyte	#0, local46
04008     AF C6 02 FB | 	rdlong	local47, fp
0400c     04 0E 06 F1 | 	add	objptr, #4
04010     07 C7 02 F1 | 	add	local47, objptr
04014                 | '     cmd7_memoryX[i]           := 0
04014     63 01 48 FC | 	wrbyte	#0, local47
04018     AF C8 02 FB | 	rdlong	local48, fp
0401c     04 0E 06 F1 | 	add	objptr, #4
04020     07 C9 02 F1 | 	add	local48, objptr
04024                 | '     cmd9_memoryZ[i]           := 0
04024     64 01 48 FC | 	wrbyte	#0, local48
04028     AF CA 02 FB | 	rdlong	local49, fp
0402c     0D 0E 06 F1 | 	add	objptr, #13
04030     07 CB 02 F1 | 	add	local49, objptr
04034                 | '     cmdE6_memory[i]           := 0
04034     65 01 48 FC | 	wrbyte	#0, local49
04038     AF CC 02 FB | 	rdlong	local50, fp
0403c     04 0E 06 F1 | 	add	objptr, #4
04040     07 CD 02 F1 | 	add	local50, objptr
04044                 | '     cmdE6_counter[i]          := 0
04044     66 01 48 FC | 	wrbyte	#0, local50
04048     AF CE 02 FB | 	rdlong	local51, fp
0404c     04 0E 06 F1 | 	add	objptr, #4
04050     07 CF 02 F1 | 	add	local51, objptr
04054                 | '     cmdE6_updatePosition[i]   := false
04054     67 01 48 FC | 	wrbyte	#0, local51
04058     AF D0 02 FB | 	rdlong	local52, fp
0405c     11 0E 86 F1 | 	sub	objptr, #17
04060     07 D1 02 F1 | 	add	local52, objptr
04064                 | '     sampleNumber_memory[i]    := 0
04064     68 01 48 FC | 	wrbyte	#0, local52
04068     AF D2 02 FB | 	rdlong	local53, fp
0406c     59 0E 86 F1 | 	sub	objptr, #89
04070     07 D3 02 F1 | 	add	local53, objptr
04074                 | '     vibratoPos[i]             := 0
04074     69 01 48 FC | 	wrbyte	#0, local53
04078     AF D4 02 FB | 	rdlong	local54, fp
0407c     02 D4 66 F0 | 	shl	local54, #2
04080     10 0E 06 F1 | 	add	objptr, #16
04084     07 D5 02 F1 | 	add	local54, objptr
04088                 | '     portamentoPeriodMemory[i] := 0
04088     6A 01 68 FC | 	wrlong	#0, local54
0408c     AF D6 02 FB | 	rdlong	local55, fp
04090     25 0E 06 F1 | 	add	objptr, #37
04094     07 D7 02 F1 | 	add	local55, objptr
04098                 | '     portaGlissando[i]         := 0
04098     6B 01 48 FC | 	wrbyte	#0, local55
0409c     AF D8 02 FB | 	rdlong	local56, fp
040a0     04 0E 06 F1 | 	add	objptr, #4
040a4     07 D9 02 F1 | 	add	local56, objptr
040a8                 | '     vibratoType[i]            := 0
040a8     6C 01 48 FC | 	wrbyte	#0, local56
040ac     AF DA 02 FB | 	rdlong	local57, fp
040b0     04 0E 06 F1 | 	add	objptr, #4
040b4     07 DB 02 F1 | 	add	local57, objptr
040b8                 | '     tremoloType[i]            := 0
040b8     6D 01 48 FC | 	wrbyte	#0, local57
040bc     AF DC 02 FB | 	rdlong	local58, fp
040c0     39 0E 86 F1 | 	sub	objptr, #57
040c4     07 DD 02 F1 | 	add	local58, objptr
040c8                 | '     tremoloPos[i]             := 0
040c8     6E 01 48 FC | 	wrbyte	#0, local58
040cc     AF DE 02 FB | 	rdlong	local59, fp
040d0     02 DE 66 F0 | 	shl	local59, #2
040d4     7C 0E 86 F1 | 	sub	objptr, #124
040d8     07 DF 02 F1 | 	add	local59, objptr
040dc                 | '     deltaVolume[i]            := 0
040dc     6F 01 68 FC | 	wrlong	#0, local59
040e0     AF E0 02 FB | 	rdlong	local60, fp
040e4     02 E0 66 F0 | 	shl	local60, #2
040e8     20 0E 86 F1 | 	sub	objptr, #32
040ec     07 E1 02 F1 | 	add	local60, objptr
040f0                 | '     deltaPeriod[i]            := 0
040f0     70 01 68 FC | 	wrlong	#0, local60
040f4     AF E2 02 FB | 	rdlong	local61, fp
040f8     A0 0E 06 F1 | 	add	objptr, #160
040fc     07 E3 02 F1 | 	add	local61, objptr
04100                 | '     resetTremolo[i]           := 0
04100     71 01 48 FC | 	wrbyte	#0, local61
04104     AF E4 02 FB | 	rdlong	local62, fp
04108     04 0E 06 F1 | 	add	objptr, #4
0410c     07 E5 02 F1 | 	add	local62, objptr
04110                 | '     resetVibrato[i]           := 0
04110     72 01 48 FC | 	wrbyte	#0, local62
04114     AF 84 02 FB | 	rdlong	local14, fp
04118     01 84 06 F1 | 	add	local14, #1
0411c     AF 84 62 FC | 	wrlong	local14, fp
04120     08 5E 85 F1 | 	sub	fp, #8
04124     04 84 5E F2 | 	cmps	local14, #4 wcz
04128     93 0F 86 F1 | 	sub	objptr, #403
0412c     7C FD 9F CD |  if_b	jmp	#LR__0140
04130     AF F0 03 F6 | 	mov	ptra, fp
04134     BF 00 A0 FD | 	call	#popregs_
04138                 | _trackerplayer_spin2_initModule_ret
04138     2D 00 64 FD | 	ret
0413c                 | 
0413c                 | ' 
0413c                 | ' 
0413c                 | ' ' This routine needs to be ticked X number of times per second
0413c                 | ' ' in order to advance the tracker play routine
0413c                 | ' '
0413c                 | ' PUB tick() | channel, sampleNumber, period, effect, i
0413c                 | _trackerplayer_spin2_tick
0413c     12 5A 05 F6 | 	mov	COUNT_, #18
04140     B0 00 A0 FD | 	call	#pushregs_
04144     30 F0 07 F1 | 	add	ptra, #48
04148                 | ' 
04148                 | '   if currentSongSpeed == 0
04148     A4 0E 06 F1 | 	add	objptr, #164
0414c     07 6B CA FA | 	rdbyte	local01, objptr wz
04150     A4 0E 86 F1 | 	sub	objptr, #164
04154                 | '     return
04154     34 03 90 AD |  if_e	jmp	#LR__0152
04158                 | ' 
04158                 | '   ' Iterate over the channels and process everything
04158                 | '   repeat channel from 0 to LAST_CHANNEL
04158     AF 00 68 FC | 	wrlong	#0, fp
0415c                 | LR__0141
0415c     04 5E 05 F1 | 	add	fp, #4
04160     AF 62 02 F6 | 	mov	arg04, fp
04164     04 5E 05 F1 | 	add	fp, #4
04168     AF 64 02 F6 | 	mov	arg05, fp
0416c     04 5E 05 F1 | 	add	fp, #4
04170     AF 66 02 F6 | 	mov	arg06, fp
04174     0C 5E 85 F1 | 	sub	fp, #12
04178                 | ' 
04178                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04178     AF 5C 02 FB | 	rdlong	arg01, fp
0417c     A3 0E 06 F1 | 	add	objptr, #163
04180     07 5F C2 FA | 	rdbyte	arg02, objptr
04184     01 0E 86 F1 | 	sub	objptr, #1
04188     07 61 C2 FA | 	rdbyte	arg03, objptr
0418c     7F 5E 06 F5 | 	and	arg02, #127
04190     0C 0E 86 F1 | 	sub	objptr, #12
04194     07 6D 02 FB | 	rdlong	local02, objptr
04198     36 5F 02 F1 | 	add	arg02, local02
0419c                 | ' 
0419c                 | '   ' Get the note data for a specific channel/song position/pattern row
0419c                 | '   patternNumber := byte[songPositionsLut][position & 127]
0419c     2F 6F C2 FA | 	rdbyte	local03, arg02
041a0     0A 6E 66 F0 | 	shl	local03, #10
041a4     04 0E 86 F1 | 	sub	objptr, #4
041a8     07 71 02 FB | 	rdlong	local04, objptr
041ac     92 0E 86 F1 | 	sub	objptr, #146
041b0     37 71 02 F1 | 	add	local04, local03
041b4                 | '   patternPtr    := patternsData + (patternNumber << 10)
041b4     3F 60 06 F5 | 	and	arg03, #63
041b8     04 60 66 F0 | 	shl	arg03, #4
041bc     30 71 02 F1 | 	add	local04, arg03
041c0     03 5C 06 F5 | 	and	arg01, #3
041c4     02 5C 66 F0 | 	shl	arg01, #2
041c8     2E 71 02 F1 | 	add	local04, arg01
041cc                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
041cc     38 73 C2 FA | 	rdbyte	local05, local04
041d0     18 72 66 F0 | 	shl	local05, #24
041d4     01 70 06 F1 | 	add	local04, #1
041d8     38 75 C2 FA | 	rdbyte	local06, local04
041dc     10 74 66 F0 | 	shl	local06, #16
041e0     3A 73 42 F5 | 	or	local05, local06
041e4     01 70 06 F1 | 	add	local04, #1
041e8     38 77 C2 FA | 	rdbyte	local07, local04
041ec     08 76 66 F0 | 	shl	local07, #8
041f0     3B 73 42 F5 | 	or	local05, local07
041f4     01 70 06 F1 | 	add	local04, #1
041f8     38 79 C2 FA | 	rdbyte	local08, local04
041fc     3C 73 42 F5 | 	or	local05, local08
04200                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04200     39 7B 02 F6 | 	mov	local09, local05
04204     0C 7A 46 F0 | 	shr	local09, #12
04208     0F 7A 06 F5 | 	and	local09, #15
0420c     39 7D 02 F6 | 	mov	local10, local05
04210     18 7C 46 F0 | 	shr	local10, #24
04214     F0 7C 06 F5 | 	and	local10, #240
04218     3E 7B 42 F5 | 	or	local09, local10
0421c                 | ' 
0421c                 | '   ' Extract the different sub parts from the data
0421c                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
0421c     31 7B 62 FC | 	wrlong	local09, arg04
04220     39 7F 02 F6 | 	mov	local11, local05
04224     10 7E 46 F0 | 	shr	local11, #16
04228     07 00 00 FF 
0422c     FF 7F 06 F5 | 	and	local11, ##4095
04230                 | '   long[period]       :=  (data >> 16) & $FFF
04230     32 7F 62 FC | 	wrlong	local11, arg05
04234     07 00 00 FF 
04238     FF 73 06 F5 | 	and	local05, ##4095
0423c                 | '   long[effect]       :=   data & $FFF
0423c     33 73 62 FC | 	wrlong	local05, arg06
04240                 | '     processChannel(channel, sampleNumber, period, effect)
04240     AF 5C 02 FB | 	rdlong	arg01, fp
04244     04 5E 05 F1 | 	add	fp, #4
04248     AF 5E 02 FB | 	rdlong	arg02, fp
0424c     04 5E 05 F1 | 	add	fp, #4
04250     AF 60 02 FB | 	rdlong	arg03, fp
04254     04 5E 05 F1 | 	add	fp, #4
04258     AF 62 02 FB | 	rdlong	arg04, fp
0425c     0C 5E 85 F1 | 	sub	fp, #12
04260     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04264     AF 80 02 FB | 	rdlong	local12, fp
04268     01 80 06 F1 | 	add	local12, #1
0426c     AF 80 62 FC | 	wrlong	local12, fp
04270     04 80 5E F2 | 	cmps	local12, #4 wcz
04274     E4 FE 9F CD |  if_b	jmp	#LR__0141
04278                 | ' 
04278                 | '   ' Incrementation the main counter that drives the whole play routine
04278                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04278     A1 0E 06 F1 | 	add	objptr, #161
0427c     07 6B C2 FA | 	rdbyte	local01, objptr
04280     01 6A 06 F1 | 	add	local01, #1
04284     07 6B 42 FC | 	wrbyte	local01, objptr
04288     03 0E 06 F1 | 	add	objptr, #3
0428c     07 83 C2 FA | 	rdbyte	local13, objptr
04290     01 0E 06 F1 | 	add	objptr, #1
04294     07 85 C2 FA | 	rdbyte	local14, objptr
04298     42 83 02 F1 | 	add	local13, local14
0429c     04 0E 86 F1 | 	sub	objptr, #4
042a0     07 87 C2 FA | 	rdbyte	local15, objptr
042a4     A1 0E 86 F1 | 	sub	objptr, #161
042a8     41 87 5A F2 | 	cmps	local15, local13 wcz
042ac                 | '     tickCounter := 0
042ac     A1 0E 06 31 |  if_ae	add	objptr, #161
042b0     07 01 48 3C |  if_ae	wrbyte	#0, objptr
042b4     A1 0E 86 31 |  if_ae	sub	objptr, #161
042b8                 | ' 
042b8                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
042b8                 | '   if tickCounter == 0
042b8     A1 0E 06 F1 | 	add	objptr, #161
042bc     07 6B CA FA | 	rdbyte	local01, objptr wz
042c0     A1 0E 86 F1 | 	sub	objptr, #161
042c4     C4 01 90 5D |  if_ne	jmp	#LR__0151
042c8                 | ' 
042c8                 | '     ' Handle the "pattern repeat" command, "E6"
042c8                 | '     if cmdE6_updatePositionCommon
042c8     F5 0F 06 F1 | 	add	objptr, #501
042cc     07 6B CA FA | 	rdbyte	local01, objptr wz
042d0     F5 0F 86 F1 | 	sub	objptr, #501
042d4     8C 00 90 AD |  if_e	jmp	#LR__0145
042d8                 | '       repeat i from 0 to LAST_CHANNEL
042d8     10 5E 05 F1 | 	add	fp, #16
042dc     AF 00 68 FC | 	wrlong	#0, fp
042e0     10 5E 85 F1 | 	sub	fp, #16
042e4     8C BD 9F FE | 	loc	pa,	#(@LR__0144-@LR__0142)
042e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
042ec                 | LR__0142
042ec                 | '         if cmdE6_updatePosition[i]
042ec     10 5E 05 F1 | 	add	fp, #16
042f0     AF 80 02 FB | 	rdlong	local12, fp
042f4     10 5E 85 F1 | 	sub	fp, #16
042f8     F1 0F 06 F1 | 	add	objptr, #497
042fc     07 81 02 F1 | 	add	local12, objptr
04300     40 85 CA FA | 	rdbyte	local14, local12 wz
04304     F1 0F 86 F1 | 	sub	objptr, #497
04308     24 00 90 AD |  if_e	jmp	#LR__0143
0430c     10 5E 05 F1 | 	add	fp, #16
04310     AF 88 02 FB | 	rdlong	local16, fp
04314     10 5E 85 F1 | 	sub	fp, #16
04318     E9 0F 06 F1 | 	add	objptr, #489
0431c     07 89 02 F1 | 	add	local16, objptr
04320                 | '           patternRow := cmdE6_memory[i]
04320     44 81 C2 FA | 	rdbyte	local12, local16
04324     47 0F 86 F1 | 	sub	objptr, #327
04328     07 81 42 FC | 	wrbyte	local12, objptr
0432c     A2 0E 86 F1 | 	sub	objptr, #162
04330                 | LR__0143
04330     10 5E 05 F1 | 	add	fp, #16
04334     AF 8A 02 FB | 	rdlong	local17, fp
04338     F1 0F 06 F1 | 	add	objptr, #497
0433c     07 8B 02 F1 | 	add	local17, objptr
04340                 | '         cmdE6_updatePosition[i] := false
04340     45 01 48 FC | 	wrbyte	#0, local17
04344     AF 80 02 FB | 	rdlong	local12, fp
04348     01 80 06 F1 | 	add	local12, #1
0434c     AF 80 62 FC | 	wrlong	local12, fp
04350     10 5E 85 F1 | 	sub	fp, #16
04354     04 80 5E F2 | 	cmps	local12, #4 wcz
04358     F1 0F 86 F1 | 	sub	objptr, #497
0435c     8C FF 9F CD |  if_b	jmp	#LR__0142
04360                 | LR__0144
04360     CC 00 90 FD | 	jmp	#LR__0149
04364                 | LR__0145
04364                 | ' 
04364                 | '     ' Handle the "skip to next pattern with offset command", "D"
04364                 | '     elseif cmdD_updatePosition
04364     E6 0F 06 F1 | 	add	objptr, #486
04368     07 6B CA FA | 	rdbyte	local01, objptr wz
0436c     E6 0F 86 F1 | 	sub	objptr, #486
04370     64 00 90 AD |  if_e	jmp	#LR__0146
04374                 | '       if ++songPosition >= songLength
04374     A3 0E 06 F1 | 	add	objptr, #163
04378     07 6B C2 FA | 	rdbyte	local01, objptr
0437c     01 6A 06 F1 | 	add	local01, #1
04380     07 6B 42 FC | 	wrbyte	local01, objptr
04384     07 83 C2 FA | 	rdbyte	local13, objptr
04388     09 0E 86 F1 | 	sub	objptr, #9
0438c     07 85 C2 FA | 	rdbyte	local14, objptr
04390     9A 0E 86 F1 | 	sub	objptr, #154
04394     42 83 5A F2 | 	cmps	local13, local14 wcz
04398                 | '         songPosition := 0
04398     A3 0E 06 31 |  if_ae	add	objptr, #163
0439c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
043a0     A3 0E 86 31 |  if_ae	sub	objptr, #163
043a4     E4 0F 06 F1 | 	add	objptr, #484
043a8     07 81 C2 FA | 	rdbyte	local12, objptr
043ac     40 8D 02 F6 | 	mov	local18, local12
043b0     02 8C 66 F0 | 	shl	local18, #2
043b4     40 8D 02 F1 | 	add	local18, local12
043b8     01 8C 66 F0 | 	shl	local18, #1
043bc     01 0E 06 F1 | 	add	objptr, #1
043c0     07 81 C2 FA | 	rdbyte	local12, objptr
043c4     40 8D 02 F1 | 	add	local18, local12
043c8                 | ' 
043c8                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
043c8     43 0F 86 F1 | 	sub	objptr, #323
043cc     07 8D 42 FC | 	wrbyte	local18, objptr
043d0     A2 0E 86 F1 | 	sub	objptr, #162
043d4                 | ' 
043d4                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
043d4                 | '     else
043d4     58 00 90 FD | 	jmp	#LR__0148
043d8                 | LR__0146
043d8                 | '       if ++patternRow >= PATTERN_LENGTH
043d8     A2 0E 06 F1 | 	add	objptr, #162
043dc     07 6B C2 FA | 	rdbyte	local01, objptr
043e0     01 6A 06 F1 | 	add	local01, #1
043e4     07 6B 42 FC | 	wrbyte	local01, objptr
043e8     07 83 C2 FA | 	rdbyte	local13, objptr
043ec     A2 0E 86 F1 | 	sub	objptr, #162
043f0     40 82 5E F2 | 	cmps	local13, #64 wcz
043f4     38 00 90 CD |  if_b	jmp	#LR__0147
043f8                 | '         patternRow := 0
043f8     A2 0E 06 F1 | 	add	objptr, #162
043fc     07 01 48 FC | 	wrbyte	#0, objptr
04400                 | ' 
04400                 | '         if ++songPosition >= songLength
04400     01 0E 06 F1 | 	add	objptr, #1
04404     07 6B C2 FA | 	rdbyte	local01, objptr
04408     01 6A 06 F1 | 	add	local01, #1
0440c     07 6B 42 FC | 	wrbyte	local01, objptr
04410     07 83 C2 FA | 	rdbyte	local13, objptr
04414     09 0E 86 F1 | 	sub	objptr, #9
04418     07 85 C2 FA | 	rdbyte	local14, objptr
0441c     9A 0E 86 F1 | 	sub	objptr, #154
04420     42 83 5A F2 | 	cmps	local13, local14 wcz
04424                 | '           songPosition := 0
04424     A3 0E 06 31 |  if_ae	add	objptr, #163
04428     07 01 48 3C |  if_ae	wrbyte	#0, objptr
0442c     A3 0E 86 31 |  if_ae	sub	objptr, #163
04430                 | LR__0147
04430                 | LR__0148
04430                 | LR__0149
04430                 | ' 
04430                 | '     ' Handle "jump to song position" command, "B"
04430                 | '     if cmdB_updatePosition
04430     E8 0F 06 F1 | 	add	objptr, #488
04434     07 6B CA FA | 	rdbyte	local01, objptr wz
04438     E8 0F 86 F1 | 	sub	objptr, #488
0443c     28 00 90 AD |  if_e	jmp	#LR__0150
04440                 | ' 
04440                 | '       songPosition := cmdB_memoryZ
04440     E7 0F 06 F1 | 	add	objptr, #487
04444     07 6B C2 FA | 	rdbyte	local01, objptr
04448     44 0F 86 F1 | 	sub	objptr, #324
0444c     07 6B 42 FC | 	wrbyte	local01, objptr
04450                 | ' 
04450                 | '       ifnot cmdD_updatePosition
04450     43 0F 06 F1 | 	add	objptr, #323
04454     07 6B CA FA | 	rdbyte	local01, objptr wz
04458     E6 0F 86 F1 | 	sub	objptr, #486
0445c                 | '         patternRow := 0
0445c     A2 0E 06 A1 |  if_e	add	objptr, #162
04460     07 01 48 AC |  if_e	wrbyte	#0, objptr
04464     A2 0E 86 A1 |  if_e	sub	objptr, #162
04468                 | LR__0150
04468                 | ' 
04468                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04468                 | '     cmdE6_updatePositionCommon := false
04468     F5 0F 06 F1 | 	add	objptr, #501
0446c     07 01 48 FC | 	wrbyte	#0, objptr
04470                 | '     cmdB_updatePosition := false
04470     0D 0E 86 F1 | 	sub	objptr, #13
04474     07 01 48 FC | 	wrbyte	#0, objptr
04478                 | '     cmdD_updatePosition := false
04478     02 0E 86 F1 | 	sub	objptr, #2
0447c     07 01 48 FC | 	wrbyte	#0, objptr
04480                 | '     patternDelay := 0
04480     41 0F 86 F1 | 	sub	objptr, #321
04484     07 01 48 FC | 	wrbyte	#0, objptr
04488     A5 0E 86 F1 | 	sub	objptr, #165
0448c                 | LR__0151
0448c                 | LR__0152
0448c     AF F0 03 F6 | 	mov	ptra, fp
04490     BF 00 A0 FD | 	call	#popregs_
04494                 | _trackerplayer_spin2_tick_ret
04494     2D 00 64 FD | 	ret
04498                 | 
04498                 | ' 
04498                 | ' 
04498                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04498                 | _trackerplayer_spin2_amigaPeriodToNote
04498                 | ' 
04498                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04498     00 30 06 F6 | 	mov	_var01, #0
0449c     AC BB 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
044a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
044a4                 | LR__0153
044a4                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
044a4     06 00 00 FF 
044a8     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
044ac     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
044b0     2F 35 02 F6 | 	mov	_var03, arg02
044b4     03 34 66 F0 | 	shl	_var03, #3
044b8     2F 35 02 F1 | 	add	_var03, arg02
044bc     03 34 66 F0 | 	shl	_var03, #3
044c0     1A 33 02 F1 | 	add	_var02, _var03
044c4     18 37 02 F6 | 	mov	_var04, _var01
044c8     01 36 66 F0 | 	shl	_var04, #1
044cc     19 37 02 F1 | 	add	_var04, _var02
044d0     1B 39 E2 FA | 	rdword	_var05, _var04
044d4     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
044d8                 | '       quit
044d8     06 00 00 FF 
044dc     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
044e0     0C 00 90 ED |  if_be	jmp	#LR__0155
044e4     01 30 06 F1 | 	add	_var01, #1
044e8     24 30 5E F2 | 	cmps	_var01, #36 wcz
044ec     B4 FF 9F CD |  if_b	jmp	#LR__0153
044f0                 | LR__0154
044f0                 | LR__0155
044f0                 | ' 
044f0                 | '   return i
044f0     18 2B 02 F6 | 	mov	result1, _var01
044f4                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044f4     2D 00 64 FD | 	ret
044f8                 | 
044f8                 | ' 
044f8                 | ' 
044f8                 | ' PRI retunePeriod(period, fTune) | noteNumber
044f8                 | _trackerplayer_spin2_retunePeriod
044f8     06 5A 05 F6 | 	mov	COUNT_, #6
044fc     B0 00 A0 FD | 	call	#pushregs_
04500     2E 6B 02 F6 | 	mov	local01, arg01
04504     2F 6D 02 F6 | 	mov	local02, arg02
04508                 | ' 
04508                 | '   if period > 0 and fTune < 16
04508     00 6A 5E F2 | 	cmps	local01, #0 wcz
0450c     50 00 90 ED |  if_be	jmp	#LR__0156
04510     10 6C 5E F2 | 	cmps	local02, #16 wcz
04514     48 00 90 3D |  if_ae	jmp	#LR__0156
04518                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
04518     35 5D E2 FA | 	rdword	arg01, local01
0451c     00 5E 06 F6 | 	mov	arg02, #0
04520     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
04524     15 6F 02 F6 | 	mov	local03, result1
04528     06 00 00 FF 
0452c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04530     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
04534     36 73 02 F6 | 	mov	local05, local02
04538     03 72 66 F0 | 	shl	local05, #3
0453c     36 73 02 F1 | 	add	local05, local02
04540     03 72 66 F0 | 	shl	local05, #3
04544     39 71 02 F1 | 	add	local04, local05
04548     01 6E 66 F0 | 	shl	local03, #1
0454c     38 6F 02 F1 | 	add	local03, local04
04550                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
04550     37 75 E2 FA | 	rdword	local06, local03
04554     35 75 52 FC | 	wrword	local06, local01
04558     06 00 00 FF 
0455c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04560                 | LR__0156
04560     AF F0 03 F6 | 	mov	ptra, fp
04564     BF 00 A0 FD | 	call	#popregs_
04568                 | _trackerplayer_spin2_retunePeriod_ret
04568     2D 00 64 FD | 	ret
0456c                 | 
0456c                 | ' 
0456c                 | ' 
0456c                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
0456c                 | _trackerplayer_spin2_getSampleInfo
0456c     2E 31 0A F6 | 	mov	_var01, arg01 wz
04570                 | ' 
04570                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04570     08 00 90 AD |  if_e	jmp	#LR__0157
04574     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04578     08 00 90 ED |  if_be	jmp	#LR__0158
0457c                 | LR__0157
0457c                 | '     long[samplePtr] := 0
0457c     2F 01 68 FC | 	wrlong	#0, arg02
04580                 | '     return
04580     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04584                 | LR__0158
04584                 | ' 
04584                 | '   sampleNumber--
04584     01 30 86 F1 | 	sub	_var01, #1
04588     18 33 02 F6 | 	mov	_var02, _var01
0458c     04 32 66 F0 | 	shl	_var02, #4
04590     18 33 82 F1 | 	sub	_var02, _var01
04594     01 32 66 F0 | 	shl	_var02, #1
04598     0A 0E 06 F1 | 	add	objptr, #10
0459c     07 35 02 FB | 	rdlong	_var03, objptr
045a0     19 35 02 F1 | 	add	_var03, _var02
045a4                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
045a4     1A 37 02 F6 | 	mov	_var04, _var03
045a8     16 36 06 F1 | 	add	_var04, #22
045ac     1B 39 C2 FA | 	rdbyte	_var05, _var04
045b0     08 38 66 F0 | 	shl	_var05, #8
045b4     1A 3B 02 F6 | 	mov	_var06, _var03
045b8     17 3A 06 F1 | 	add	_var06, #23
045bc     1D 3D C2 FA | 	rdbyte	_var07, _var06
045c0     1E 39 42 F5 | 	or	_var05, _var07
045c4     01 38 66 F0 | 	shl	_var05, #1
045c8                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
045c8     30 39 62 FC | 	wrlong	_var05, arg03
045cc     1A 3F 02 F6 | 	mov	_var08, _var03
045d0     18 3E 06 F1 | 	add	_var08, #24
045d4                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
045d4     1F 41 C2 FA | 	rdbyte	_var09, _var08
045d8     31 41 62 FC | 	wrlong	_var09, arg04
045dc     1A 43 02 F6 | 	mov	_var10, _var03
045e0     19 42 06 F1 | 	add	_var10, #25
045e4                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
045e4     21 41 C2 FA | 	rdbyte	_var09, _var10
045e8     32 41 62 FC | 	wrlong	_var09, arg05
045ec     1A 45 02 F6 | 	mov	_var11, _var03
045f0     1A 44 06 F1 | 	add	_var11, #26
045f4     22 47 C2 FA | 	rdbyte	_var12, _var11
045f8     08 46 66 F0 | 	shl	_var12, #8
045fc     1A 49 02 F6 | 	mov	_var13, _var03
04600     1B 48 06 F1 | 	add	_var13, #27
04604     24 3D C2 FA | 	rdbyte	_var07, _var13
04608     1E 47 42 F5 | 	or	_var12, _var07
0460c     01 46 66 F0 | 	shl	_var12, #1
04610                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04610     33 47 62 FC | 	wrlong	_var12, arg06
04614     1A 4B 02 F6 | 	mov	_var14, _var03
04618     1C 4A 06 F1 | 	add	_var14, #28
0461c     25 4D C2 FA | 	rdbyte	_var15, _var14
04620     08 4C 66 F0 | 	shl	_var15, #8
04624     1D 34 06 F1 | 	add	_var03, #29
04628     1A 3D C2 FA | 	rdbyte	_var07, _var03
0462c     1E 4D 42 F5 | 	or	_var15, _var07
04630     01 4C 66 F0 | 	shl	_var15, #1
04634                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
04634     34 4D 62 FC | 	wrlong	_var15, arg07
04638     02 30 66 F0 | 	shl	_var01, #2
0463c     08 0E 06 F1 | 	add	objptr, #8
04640     07 31 02 F1 | 	add	_var01, objptr
04644                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
04644     18 41 02 FB | 	rdlong	_var09, _var01
04648     2F 41 62 FC | 	wrlong	_var09, arg02
0464c                 | ' 
0464c                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
0464c     34 41 02 FB | 	rdlong	_var09, arg07
04650     02 40 0E F2 | 	cmp	_var09, #2 wz
04654     12 0E 86 F1 | 	sub	objptr, #18
04658     08 00 90 5D |  if_ne	jmp	#LR__0159
0465c     33 3D 0A FB | 	rdlong	_var07, arg06 wz
04660                 | '     long[repeatLength] := 1
04660     34 03 68 AC |  if_e	wrlong	#1, arg07
04664                 | LR__0159
04664                 | _trackerplayer_spin2_getSampleInfo_ret
04664     2D 00 64 FD | 	ret
04668                 | 
04668                 | ' 
04668                 | ' 
04668                 | ' PRI triggerNote(channel)
04668                 | _trackerplayer_spin2_triggerNote
04668     2E 31 02 F6 | 	mov	_var01, arg01
0466c     02 30 66 F0 | 	shl	_var01, #2
04670     47 0F 06 F1 | 	add	objptr, #327
04674     07 31 02 F1 | 	add	_var01, objptr
04678     2E 33 02 F6 | 	mov	_var02, arg01
0467c     90 0E 86 F1 | 	sub	objptr, #144
04680                 | ' 
04680                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04680     18 35 02 FB | 	rdlong	_var03, _var01
04684     07 33 02 F1 | 	add	_var02, objptr
04688     19 35 42 FC | 	wrbyte	_var03, _var02
0468c     2E 37 02 F6 | 	mov	_var04, arg01
04690     02 36 66 F0 | 	shl	_var04, #2
04694     80 0E 06 F1 | 	add	objptr, #128
04698     07 37 02 F1 | 	add	_var04, objptr
0469c     2E 39 02 F6 | 	mov	_var05, arg01
046a0     02 38 66 F0 | 	shl	_var05, #2
046a4     90 0E 86 F1 | 	sub	objptr, #144
046a8                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
046a8     1B 35 02 FB | 	rdlong	_var03, _var04
046ac     07 39 02 F1 | 	add	_var05, objptr
046b0     1C 35 62 FC | 	wrlong	_var03, _var05
046b4     2E 3B 02 F6 | 	mov	_var06, arg01
046b8     02 3A 66 F0 | 	shl	_var06, #2
046bc     80 0E 06 F1 | 	add	objptr, #128
046c0     07 3B 02 F1 | 	add	_var06, objptr
046c4     2E 3D 02 F6 | 	mov	_var07, arg01
046c8     02 3C 66 F0 | 	shl	_var07, #2
046cc     48 0E 86 F1 | 	sub	objptr, #72
046d0                 | '   currPeriod[channel]       := lastSetPeriod[channel]
046d0     1D 35 02 FB | 	rdlong	_var03, _var06
046d4     07 3D 02 F1 | 	add	_var07, objptr
046d8     1E 35 62 FC | 	wrlong	_var03, _var07
046dc     2E 3F 02 F6 | 	mov	_var08, arg01
046e0     02 3E 66 F0 | 	shl	_var08, #2
046e4     78 0E 06 F1 | 	add	objptr, #120
046e8     07 3F 02 F1 | 	add	_var08, objptr
046ec     2E 41 02 F6 | 	mov	_var09, arg01
046f0     01 40 66 F0 | 	shl	_var09, #1
046f4     9C 0E 86 F1 | 	sub	objptr, #156
046f8                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
046f8     1F 35 02 FB | 	rdlong	_var03, _var08
046fc     07 41 02 F1 | 	add	_var09, objptr
04700     20 35 52 FC | 	wrword	_var03, _var09
04704     2E 43 02 F6 | 	mov	_var10, arg01
04708     02 42 66 F0 | 	shl	_var10, #2
0470c     AC 0E 06 F1 | 	add	objptr, #172
04710     07 43 02 F1 | 	add	_var10, objptr
04714     2E 45 02 F6 | 	mov	_var11, arg01
04718     02 44 66 F0 | 	shl	_var11, #2
0471c     A4 0E 86 F1 | 	sub	objptr, #164
04720                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04720     21 35 02 FB | 	rdlong	_var03, _var10
04724     07 45 02 F1 | 	add	_var11, objptr
04728     22 35 62 FC | 	wrlong	_var03, _var11
0472c     2E 47 02 F6 | 	mov	_var12, arg01
04730     02 46 66 F0 | 	shl	_var12, #2
04734     B4 0E 06 F1 | 	add	objptr, #180
04738     07 47 02 F1 | 	add	_var12, objptr
0473c     2E 49 02 F6 | 	mov	_var13, arg01
04740     01 48 66 F0 | 	shl	_var13, #1
04744     A0 0E 86 F1 | 	sub	objptr, #160
04748                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04748     23 35 02 FB | 	rdlong	_var03, _var12
0474c     07 49 02 F1 | 	add	_var13, objptr
04750     24 35 52 FC | 	wrword	_var03, _var13
04754     1F 0F 06 F1 | 	add	objptr, #287
04758     07 5D 02 F1 | 	add	arg01, objptr
0475c     2E 4B C2 FA | 	rdbyte	_var14, arg01
04760     01 4A 06 F1 | 	add	_var14, #1
04764                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04764     2E 4B 42 FC | 	wrbyte	_var14, arg01
04768     F6 0F 86 F1 | 	sub	objptr, #502
0476c                 | _trackerplayer_spin2_triggerNote_ret
0476c     2D 00 64 FD | 	ret
04770                 | 
04770                 | ' 
04770                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04770                 | _trackerplayer_spin2_processChannel
04770     31 5A 05 F6 | 	mov	COUNT_, #49
04774     B0 00 A0 FD | 	call	#pushregs_
04778     D0 F0 07 F1 | 	add	ptra, #208
0477c     AF 5C 62 FC | 	wrlong	arg01, fp
04780     04 5E 05 F1 | 	add	fp, #4
04784     AF 5E 62 FC | 	wrlong	arg02, fp
04788     04 5E 05 F1 | 	add	fp, #4
0478c     AF 60 62 FC | 	wrlong	arg03, fp
04790     04 5E 05 F1 | 	add	fp, #4
04794     AF 62 62 FC | 	wrlong	arg04, fp
04798     0C 5E 85 F1 | 	sub	fp, #12
0479c                 | ' 
0479c                 | '   channel := channel & 3
0479c     AF 6A 02 FB | 	rdlong	local01, fp
047a0     03 6A 06 F5 | 	and	local01, #3
047a4     AF 6A 62 FC | 	wrlong	local01, fp
047a8     0C 5E 05 F1 | 	add	fp, #12
047ac     AF 6C 02 FB | 	rdlong	local02, fp
047b0     08 6C 46 F0 | 	shr	local02, #8
047b4     36 6F 02 F6 | 	mov	local03, local02
047b8     0F 6E 06 F5 | 	and	local03, #15
047bc                 | '   cmd     := (effect >> 8) & $F
047bc     BA 0F 06 F1 | 	add	objptr, #442
047c0     07 6F 42 FC | 	wrbyte	local03, objptr
047c4     AF 70 02 FB | 	rdlong	local04, fp
047c8     04 70 46 F0 | 	shr	local04, #4
047cc     38 73 02 F6 | 	mov	local05, local04
047d0     0F 72 06 F5 | 	and	local05, #15
047d4                 | '   x       := (effect >> 4) & $F
047d4     03 0E 86 F1 | 	sub	objptr, #3
047d8     07 73 42 FC | 	wrbyte	local05, objptr
047dc     AF 74 02 FB | 	rdlong	local06, fp
047e0     0F 74 06 F5 | 	and	local06, #15
047e4                 | '   y       := (effect     ) & $F
047e4     01 0E 06 F1 | 	add	objptr, #1
047e8     07 75 42 FC | 	wrbyte	local06, objptr
047ec     AF 76 02 FB | 	rdlong	local07, fp
047f0     0C 5E 85 F1 | 	sub	fp, #12
047f4     FF 76 06 F5 | 	and	local07, #255
047f8                 | '   z       := (effect     ) & $FF
047f8     01 0E 06 F1 | 	add	objptr, #1
047fc     07 77 42 FC | 	wrbyte	local07, objptr
04800                 | ' 
04800                 | '   ' Handle everything that executes on "tick zero"
04800                 | '   if tickCounter == 0
04800     18 0F 86 F1 | 	sub	objptr, #280
04804     07 6B CA FA | 	rdbyte	local01, objptr wz
04808     A1 0E 86 F1 | 	sub	objptr, #161
0480c     F0 03 90 5D |  if_ne	jmp	#LR__0170
04810     AF 78 02 FB | 	rdlong	local08, fp
04814     02 78 66 F0 | 	shl	local08, #2
04818     EF 0E 06 F1 | 	add	objptr, #239
0481c     07 79 02 F1 | 	add	local08, objptr
04820                 | ' 
04820                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04820                 | '     deltaPeriod[channel] := 0
04820     3C 01 68 FC | 	wrlong	#0, local08
04824     AF 7A 02 FB | 	rdlong	local09, fp
04828     02 7A 66 F0 | 	shl	local09, #2
0482c     20 0E 06 F1 | 	add	objptr, #32
04830     07 7B 02 F1 | 	add	local09, objptr
04834                 | '     deltaVolume[channel] := 0
04834     3D 01 68 FC | 	wrlong	#0, local09
04838                 | ' 
04838                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04838                 | '     if sampleNumber > 0
04838     04 5E 05 F1 | 	add	fp, #4
0483c     AF 6A 02 FB | 	rdlong	local01, fp
04840     04 5E 85 F1 | 	sub	fp, #4
04844     00 6A 5E F2 | 	cmps	local01, #0 wcz
04848     0F 0F 86 F1 | 	sub	objptr, #271
0484c     20 00 90 ED |  if_be	jmp	#LR__0160
04850     AF 7C 02 FB | 	rdlong	local10, fp
04854     E0 0F 06 F1 | 	add	objptr, #480
04858     07 7D 02 F1 | 	add	local10, objptr
0485c                 | '       sampleNumber_memory[channel] := sampleNumber
0485c     04 5E 05 F1 | 	add	fp, #4
04860     AF 6A 02 FB | 	rdlong	local01, fp
04864     04 5E 85 F1 | 	sub	fp, #4
04868     3E 6B 42 FC | 	wrbyte	local01, local10
0486c     E0 0F 86 F1 | 	sub	objptr, #480
04870                 | LR__0160
04870     AF 7E 02 FB | 	rdlong	local11, fp
04874     E0 0F 06 F1 | 	add	objptr, #480
04878     07 7F 02 F1 | 	add	local11, objptr
0487c     20 5E 05 F1 | 	add	fp, #32
04880     AF 80 02 F6 | 	mov	local12, fp
04884     10 5E 85 F1 | 	sub	fp, #16
04888     AF 82 02 F6 | 	mov	local13, fp
0488c     31 0E 86 F1 | 	sub	objptr, #49
04890     07 85 02 F6 | 	mov	local14, objptr
04894     04 5E 05 F1 | 	add	fp, #4
04898     AF 86 02 F6 | 	mov	local15, fp
0489c     04 5E 05 F1 | 	add	fp, #4
048a0     AF 88 02 F6 | 	mov	local16, fp
048a4     04 5E 05 F1 | 	add	fp, #4
048a8     AF 8A 02 F6 | 	mov	local17, fp
048ac                 | ' 
048ac                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
048ac                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
048ac     3F 5D C2 FA | 	rdbyte	arg01, local11
048b0     42 63 02 F6 | 	mov	arg04, local14
048b4     43 8D 02 F6 | 	mov	local18, local15
048b8     44 8F 02 F6 | 	mov	local19, local16
048bc     45 91 02 F6 | 	mov	local20, local17
048c0     40 5F 02 F6 | 	mov	arg02, local12
048c4     41 61 02 F6 | 	mov	arg03, local13
048c8     46 65 02 F6 | 	mov	arg05, local18
048cc     47 67 02 F6 | 	mov	arg06, local19
048d0     48 69 02 F6 | 	mov	arg07, local20
048d4     AF 0F 86 F1 | 	sub	objptr, #431
048d8     1C 5E 85 F1 | 	sub	fp, #28
048dc     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
048e0                 | ' 
048e0                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
048e0                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
048e0                 | '     if sampleNumber > 0
048e0     04 5E 05 F1 | 	add	fp, #4
048e4     AF 6A 02 FB | 	rdlong	local01, fp
048e8     04 5E 85 F1 | 	sub	fp, #4
048ec     00 6A 5E F2 | 	cmps	local01, #0 wcz
048f0     24 00 90 ED |  if_be	jmp	#LR__0161
048f4     AF 92 02 FB | 	rdlong	local21, fp
048f8     02 92 66 F0 | 	shl	local21, #2
048fc     FF 0E 06 F1 | 	add	objptr, #255
04900     07 93 02 F1 | 	add	local21, objptr
04904                 | '       currVolume[channel] := volume
04904     14 5E 05 F1 | 	add	fp, #20
04908     AF 6A 02 FB | 	rdlong	local01, fp
0490c     14 5E 85 F1 | 	sub	fp, #20
04910     49 6B 62 FC | 	wrlong	local01, local21
04914     FF 0E 86 F1 | 	sub	objptr, #255
04918                 | LR__0161
04918                 | ' 
04918                 | '     ' Handle all commands that executes on "zero tick"
04918                 | '     sampleOffset := 0
04918     B3 0F 06 F1 | 	add	objptr, #435
0491c     07 01 68 FC | 	wrlong	#0, objptr
04920     B3 0F 86 F1 | 	sub	objptr, #435
04924                 | '     handleZeroTickCommands(channel)
04924     AF 5C 02 FB | 	rdlong	arg01, fp
04928     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
0492c                 | ' 
0492c                 | '     ' Prepare sample data for triggering (now or later)
0492c                 | '     if period > 0
0492c     08 5E 05 F1 | 	add	fp, #8
04930     AF 6A 02 FB | 	rdlong	local01, fp
04934     08 5E 85 F1 | 	sub	fp, #8
04938     00 6A 5E F2 | 	cmps	local01, #0 wcz
0493c     C8 02 90 ED |  if_be	jmp	#LR__0171
04940     08 5E 05 F1 | 	add	fp, #8
04944     AF 94 02 F6 | 	mov	local22, fp
04948                 | ' 
04948                 | '       retunePeriod(@period, fineTune)
04948     AF 0F 06 F1 | 	add	objptr, #431
0494c     07 5F 02 FB | 	rdlong	arg02, objptr
04950     AF 0F 86 F1 | 	sub	objptr, #431
04954     4A 5D 02 F6 | 	mov	arg01, local22
04958     08 5E 85 F1 | 	sub	fp, #8
0495c     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04960     AF 96 02 FB | 	rdlong	local23, fp
04964     D3 0E 06 F1 | 	add	objptr, #211
04968     07 97 02 F1 | 	add	local23, objptr
0496c                 | '       currFineTune[channel]        := fineTune
0496c     DC 0E 06 F1 | 	add	objptr, #220
04970     07 6B 02 FB | 	rdlong	local01, objptr
04974     4B 6B 42 FC | 	wrbyte	local01, local23
04978     AF 98 02 FB | 	rdlong	local24, fp
0497c     02 98 66 F0 | 	shl	local24, #2
04980     88 0E 86 F1 | 	sub	objptr, #136
04984     07 99 02 F1 | 	add	local24, objptr
04988                 | '       lastSetPeriod[channel]       := period
04988     08 5E 05 F1 | 	add	fp, #8
0498c     AF 6A 02 FB | 	rdlong	local01, fp
04990     4C 6B 62 FC | 	wrlong	local01, local24
04994     08 5E 85 F1 | 	sub	fp, #8
04998     AF 9A 02 FB | 	rdlong	local25, fp
0499c     02 9A 66 F0 | 	shl	local25, #2
049a0     40 0E 06 F1 | 	add	objptr, #64
049a4     07 9B 02 F1 | 	add	local25, objptr
049a8                 | '       lastSetRepeatLength[channel] := repeatLength
049a8     1C 5E 05 F1 | 	add	fp, #28
049ac     AF 6A 02 FB | 	rdlong	local01, fp
049b0     4D 6B 62 FC | 	wrlong	local01, local25
049b4     1C 5E 85 F1 | 	sub	fp, #28
049b8     AF 9C 02 FB | 	rdlong	local26, fp
049bc     02 9C 66 F0 | 	shl	local26, #2
049c0     10 0E 06 F1 | 	add	objptr, #16
049c4     07 9D 02 F1 | 	add	local26, objptr
049c8                 | '       lastSetRepeatPoint[channel]  := repeatPoint
049c8     18 5E 05 F1 | 	add	fp, #24
049cc     AF 6A 02 FB | 	rdlong	local01, fp
049d0     4E 6B 62 FC | 	wrlong	local01, local26
049d4     08 5E 05 F1 | 	add	fp, #8
049d8     AF 9E 02 FB | 	rdlong	local27, fp
049dc     20 5E 85 F1 | 	sub	fp, #32
049e0     3C 0E 06 F1 | 	add	objptr, #60
049e4     07 A1 02 FB | 	rdlong	local28, objptr
049e8     50 9F 02 F1 | 	add	local27, local28
049ec     AF A2 02 FB | 	rdlong	local29, fp
049f0     02 A2 66 F0 | 	shl	local29, #2
049f4     7C 0E 86 F1 | 	sub	objptr, #124
049f8     07 A3 02 F1 | 	add	local29, objptr
049fc                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
049fc     51 9F 62 FC | 	wrlong	local27, local29
04a00     AF A4 02 FB | 	rdlong	local30, fp
04a04     02 A4 66 F0 | 	shl	local30, #2
04a08     10 0E 06 F1 | 	add	objptr, #16
04a0c     07 A5 02 F1 | 	add	local30, objptr
04a10                 | '       lastSetSampleNr[channel]     := sampleNumber
04a10     04 5E 05 F1 | 	add	fp, #4
04a14     AF 6A 02 FB | 	rdlong	local01, fp
04a18     52 6B 62 FC | 	wrlong	local01, local30
04a1c                 | ' 
04a1c                 | '       ' This calculates the correct sample length in all situations
04a1c                 | '       if repeatLength > 2
04a1c     18 5E 05 F1 | 	add	fp, #24
04a20     AF 6A 02 FB | 	rdlong	local01, fp
04a24     1C 5E 85 F1 | 	sub	fp, #28
04a28     02 6A 5E F2 | 	cmps	local01, #2 wcz
04a2c     47 0F 86 F1 | 	sub	objptr, #327
04a30     20 00 90 ED |  if_be	jmp	#LR__0162
04a34     18 5E 05 F1 | 	add	fp, #24
04a38     AF A6 02 FB | 	rdlong	local31, fp
04a3c     04 5E 05 F1 | 	add	fp, #4
04a40     AF A0 02 FB | 	rdlong	local28, fp
04a44     50 A7 02 F1 | 	add	local31, local28
04a48                 | '         sampleLength := repeatPoint + repeatLength
04a48     0C 5E 85 F1 | 	sub	fp, #12
04a4c     AF A6 62 FC | 	wrlong	local31, fp
04a50     10 5E 85 F1 | 	sub	fp, #16
04a54                 | LR__0162
04a54                 | ' 
04a54                 | '       if sampleLength - sampleOffset < 1
04a54     10 5E 05 F1 | 	add	fp, #16
04a58     AF 6A 02 FB | 	rdlong	local01, fp
04a5c     10 5E 85 F1 | 	sub	fp, #16
04a60     B3 0F 06 F1 | 	add	objptr, #435
04a64     07 A1 02 FB | 	rdlong	local28, objptr
04a68     B3 0F 86 F1 | 	sub	objptr, #435
04a6c     50 6B 82 F1 | 	sub	local01, local28
04a70     01 6A 5E F2 | 	cmps	local01, #1 wcz
04a74     1C 00 90 3D |  if_ae	jmp	#LR__0163
04a78     AF A8 02 FB | 	rdlong	local32, fp
04a7c     02 A8 66 F0 | 	shl	local32, #2
04a80     57 0F 06 F1 | 	add	objptr, #343
04a84     07 A9 02 F1 | 	add	local32, objptr
04a88                 | '         lastSetSampleLength[channel] := 1
04a88     54 03 68 FC | 	wrlong	#1, local32
04a8c                 | '       else
04a8c     57 0F 86 F1 | 	sub	objptr, #343
04a90     30 00 90 FD | 	jmp	#LR__0164
04a94                 | LR__0163
04a94     10 5E 05 F1 | 	add	fp, #16
04a98     AF AA 02 FB | 	rdlong	local33, fp
04a9c     10 5E 85 F1 | 	sub	fp, #16
04aa0     B3 0F 06 F1 | 	add	objptr, #435
04aa4     07 A1 02 FB | 	rdlong	local28, objptr
04aa8     50 AB 82 F1 | 	sub	local33, local28
04aac     AF AC 02 FB | 	rdlong	local34, fp
04ab0     02 AC 66 F0 | 	shl	local34, #2
04ab4     5C 0E 86 F1 | 	sub	objptr, #92
04ab8     07 AD 02 F1 | 	add	local34, objptr
04abc                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04abc     56 AB 62 FC | 	wrlong	local33, local34
04ac0     57 0F 86 F1 | 	sub	objptr, #343
04ac4                 | LR__0164
04ac4                 | ' 
04ac4                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04ac4                 | '       if sampleOffset > sampleLength
04ac4     B3 0F 06 F1 | 	add	objptr, #435
04ac8     07 6B 02 FB | 	rdlong	local01, objptr
04acc     B3 0F 86 F1 | 	sub	objptr, #435
04ad0     10 5E 05 F1 | 	add	fp, #16
04ad4     AF A0 02 FB | 	rdlong	local28, fp
04ad8     10 5E 85 F1 | 	sub	fp, #16
04adc     50 6B 5A F2 | 	cmps	local01, local28 wcz
04ae0     50 00 90 ED |  if_be	jmp	#LR__0165
04ae4     20 5E 05 F1 | 	add	fp, #32
04ae8     AF AE 02 FB | 	rdlong	local35, fp
04aec     08 5E 85 F1 | 	sub	fp, #8
04af0     AF A0 02 FB | 	rdlong	local28, fp
04af4     18 5E 85 F1 | 	sub	fp, #24
04af8     50 AF 02 F1 | 	add	local35, local28
04afc     AF B0 02 FB | 	rdlong	local36, fp
04b00     02 B0 66 F0 | 	shl	local36, #2
04b04     37 0F 06 F1 | 	add	objptr, #311
04b08     07 B1 02 F1 | 	add	local36, objptr
04b0c                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04b0c     58 AF 62 FC | 	wrlong	local35, local36
04b10     AF B2 02 FB | 	rdlong	local37, fp
04b14     02 B2 66 F0 | 	shl	local37, #2
04b18     20 0E 06 F1 | 	add	objptr, #32
04b1c     07 B3 02 F1 | 	add	local37, objptr
04b20                 | '         lastSetSampleLength[channel] := repeatLength
04b20     1C 5E 05 F1 | 	add	fp, #28
04b24     AF 6A 02 FB | 	rdlong	local01, fp
04b28     1C 5E 85 F1 | 	sub	fp, #28
04b2c     59 6B 62 FC | 	wrlong	local01, local37
04b30     57 0F 86 F1 | 	sub	objptr, #343
04b34                 | LR__0165
04b34                 | ' 
04b34                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04b34                 | '       ifnot cmd == $3 || cmd == $5
04b34     BA 0F 06 F1 | 	add	objptr, #442
04b38     07 6B C2 FA | 	rdbyte	local01, objptr
04b3c     BA 0F 86 F1 | 	sub	objptr, #442
04b40     03 6A 0E F2 | 	cmp	local01, #3 wz
04b44     54 00 90 AD |  if_e	jmp	#LR__0168
04b48     BA 0F 06 F1 | 	add	objptr, #442
04b4c     07 B5 C2 FA | 	rdbyte	local38, objptr
04b50     BA 0F 86 F1 | 	sub	objptr, #442
04b54     5A A1 02 F6 | 	mov	local28, local38
04b58     05 A0 0E F2 | 	cmp	local28, #5 wz
04b5c     3C 00 90 AD |  if_e	jmp	#LR__0168
04b60                 | '         ifnot cmd == $E && x == $D
04b60     BA 0F 06 F1 | 	add	objptr, #442
04b64     07 B7 C2 FA | 	rdbyte	local39, objptr
04b68     BA 0F 86 F1 | 	sub	objptr, #442
04b6c     5B 6B 02 F6 | 	mov	local01, local39
04b70     0E 6A 0E F2 | 	cmp	local01, #14 wz
04b74     18 00 90 5D |  if_ne	jmp	#LR__0166
04b78     B7 0F 06 F1 | 	add	objptr, #439
04b7c     07 B5 C2 FA | 	rdbyte	local38, objptr
04b80     B7 0F 86 F1 | 	sub	objptr, #439
04b84     5A A1 02 F6 | 	mov	local28, local38
04b88     0D A0 0E F2 | 	cmp	local28, #13 wz
04b8c     0C 00 90 AD |  if_e	jmp	#LR__0167
04b90                 | LR__0166
04b90                 | '           triggerNote(channel)
04b90     AF 6A 02 FB | 	rdlong	local01, fp
04b94     35 5D 02 F6 | 	mov	arg01, local01
04b98     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04b9c                 | LR__0167
04b9c                 | LR__0168
04b9c                 | ' 
04b9c                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04b9c                 | '       if resetTremolo[channel] > 0
04b9c     AF 6A 02 FB | 	rdlong	local01, fp
04ba0     8F 0F 06 F1 | 	add	objptr, #399
04ba4     07 6B 02 F1 | 	add	local01, objptr
04ba8     35 A1 C2 FA | 	rdbyte	local28, local01
04bac     00 A0 5E F2 | 	cmps	local28, #0 wcz
04bb0     8F 0F 86 F1 | 	sub	objptr, #399
04bb4     14 00 90 ED |  if_be	jmp	#LR__0169
04bb8     AF B8 02 FB | 	rdlong	local40, fp
04bbc     8B 0F 06 F1 | 	add	objptr, #395
04bc0     07 B9 02 F1 | 	add	local40, objptr
04bc4                 | '         tremoloPos[channel] := 0
04bc4     5C 01 48 FC | 	wrbyte	#0, local40
04bc8     8B 0F 86 F1 | 	sub	objptr, #395
04bcc                 | LR__0169
04bcc                 | ' 
04bcc                 | '       if resetVibrato[channel] > 0
04bcc     AF 6A 02 FB | 	rdlong	local01, fp
04bd0     93 0F 06 F1 | 	add	objptr, #403
04bd4     07 6B 02 F1 | 	add	local01, objptr
04bd8     35 A1 C2 FA | 	rdbyte	local28, local01
04bdc     00 A0 5E F2 | 	cmps	local28, #0 wcz
04be0     93 0F 86 F1 | 	sub	objptr, #403
04be4     20 00 90 ED |  if_be	jmp	#LR__0171
04be8     AF BA 02 FB | 	rdlong	local41, fp
04bec     87 0F 06 F1 | 	add	objptr, #391
04bf0     07 BB 02 F1 | 	add	local41, objptr
04bf4                 | '         vibratoPos[channel] := 0
04bf4     5D 01 48 FC | 	wrbyte	#0, local41
04bf8     87 0F 86 F1 | 	sub	objptr, #391
04bfc                 | ' 
04bfc                 | '   else
04bfc     08 00 90 FD | 	jmp	#LR__0171
04c00                 | LR__0170
04c00                 | '     ' Handle commands that executes on all "non zero ticks"
04c00                 | '     handleNonZeroTickCommands(channel)
04c00     AF 5C 02 FB | 	rdlong	arg01, fp
04c04     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04c08                 | LR__0171
04c08                 | ' 
04c08                 | '   ' Handle commands that executes on every tick
04c08                 | '   handleEveryTickCommands(channel)
04c08     AF 5C 02 FB | 	rdlong	arg01, fp
04c0c     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04c10     AF BC 02 FB | 	rdlong	local42, fp
04c14     02 BC 66 F0 | 	shl	local42, #2
04c18     DF 0E 06 F1 | 	add	objptr, #223
04c1c     07 BD 02 F1 | 	add	local42, objptr
04c20     5E BF 02 FB | 	rdlong	local43, local42
04c24     01 00 00 FF 
04c28     58 BF 66 F3 | 	fles	local43, ##856
04c2c                 | ' 
04c2c                 | '   ' Handle boundaries that should be kept
04c2c                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04c2c     5E BF 62 FC | 	wrlong	local43, local42
04c30     AF C0 02 FB | 	rdlong	local44, fp
04c34     02 C0 66 F0 | 	shl	local44, #2
04c38     07 C1 02 F1 | 	add	local44, objptr
04c3c     60 C3 02 FB | 	rdlong	local45, local44
04c40     71 C2 46 F3 | 	fges	local45, #113
04c44                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04c44     60 C3 62 FC | 	wrlong	local45, local44
04c48     AF C4 02 FB | 	rdlong	local46, fp
04c4c     02 C4 66 F0 | 	shl	local46, #2
04c50     20 0E 06 F1 | 	add	objptr, #32
04c54     07 C5 02 F1 | 	add	local46, objptr
04c58     62 C7 02 FB | 	rdlong	local47, local46
04c5c     40 C6 66 F3 | 	fles	local47, #64
04c60                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04c60     62 C7 62 FC | 	wrlong	local47, local46
04c64     AF C8 02 FB | 	rdlong	local48, fp
04c68     02 C8 66 F0 | 	shl	local48, #2
04c6c     07 C9 02 F1 | 	add	local48, objptr
04c70     64 CB 02 FB | 	rdlong	local49, local48
04c74     00 CA 46 F3 | 	fges	local49, #0
04c78                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04c78     64 CB 62 FC | 	wrlong	local49, local48
04c7c     FF 0E 86 F1 | 	sub	objptr, #255
04c80     AF F0 03 F6 | 	mov	ptra, fp
04c84     BF 00 A0 FD | 	call	#popregs_
04c88                 | _trackerplayer_spin2_processChannel_ret
04c88     2D 00 64 FD | 	ret
04c8c                 | 
04c8c                 | ' 
04c8c                 | ' 
04c8c                 | ' ' Handle all commands that executes on tick zero
04c8c                 | ' '
04c8c                 | ' PRI handleZeroTickCommands(channel)
04c8c                 | _trackerplayer_spin2_handleZeroTickCommands
04c8c     2E 31 02 F6 | 	mov	_var01, arg01
04c90                 | ' 
04c90                 | '   CASE_FAST cmd
04c90     BA 0F 06 F1 | 	add	objptr, #442
04c94     07 33 C2 FA | 	rdbyte	_var02, objptr
04c98     BA 0F 86 F1 | 	sub	objptr, #442
04c9c     19 35 02 F6 | 	mov	_var03, _var02
04ca0     09 34 86 F1 | 	sub	_var03, #9
04ca4     07 34 26 F3 | 	fle	_var03, #7
04ca8     1A 37 02 F6 | 	mov	_var04, _var03
04cac     30 36 62 FD | 	jmprel	_var04
04cb0                 | LR__0172
04cb0     1C 00 90 FD | 	jmp	#LR__0173
04cb4     30 04 90 FD | 	jmp	#LR__0196
04cb8     64 00 90 FD | 	jmp	#LR__0175
04cbc     84 00 90 FD | 	jmp	#LR__0176
04cc0     A0 00 90 FD | 	jmp	#LR__0177
04cc4     D0 00 90 FD | 	jmp	#LR__0178
04cc8     9C 03 90 FD | 	jmp	#LR__0193
04ccc     18 04 90 FD | 	jmp	#LR__0196
04cd0                 | LR__0173
04cd0                 | ' 
04cd0                 | '     $9:                          ' Set sample offset
04cd0                 | '       if z > 0
04cd0     B9 0F 06 F1 | 	add	objptr, #441
04cd4     07 39 C2 FA | 	rdbyte	_var05, objptr
04cd8     B9 0F 86 F1 | 	sub	objptr, #441
04cdc     00 38 5E F2 | 	cmps	_var05, #0 wcz
04ce0     1C 00 90 ED |  if_be	jmp	#LR__0174
04ce4                 | '         cmd9_memoryZ[channel] := z
04ce4     18 39 02 F6 | 	mov	_var05, _var01
04ce8     DC 0F 06 F1 | 	add	objptr, #476
04cec     07 39 02 F1 | 	add	_var05, objptr
04cf0     23 0E 86 F1 | 	sub	objptr, #35
04cf4     07 3B C2 FA | 	rdbyte	_var06, objptr
04cf8     B9 0F 86 F1 | 	sub	objptr, #441
04cfc     1C 3B 42 FC | 	wrbyte	_var06, _var05
04d00                 | LR__0174
04d00                 | ' 
04d00                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04d00     DC 0F 06 F1 | 	add	objptr, #476
04d04     07 31 02 F1 | 	add	_var01, objptr
04d08     18 39 C2 FA | 	rdbyte	_var05, _var01
04d0c     08 38 66 F0 | 	shl	_var05, #8
04d10     29 0E 86 F1 | 	sub	objptr, #41
04d14     07 39 62 FC | 	wrlong	_var05, objptr
04d18     B3 0F 86 F1 | 	sub	objptr, #435
04d1c     C8 03 90 FD | 	jmp	#LR__0196
04d20                 | LR__0175
04d20                 | ' 
04d20                 | '     $B:                          ' Jump position
04d20                 | '       cmdB_memoryZ := z
04d20     B9 0F 06 F1 | 	add	objptr, #441
04d24     07 39 C2 FA | 	rdbyte	_var05, objptr
04d28     2E 0E 06 F1 | 	add	objptr, #46
04d2c     07 39 42 FC | 	wrbyte	_var05, objptr
04d30                 | '       cmdB_updatePosition := true
04d30     01 0E 06 F1 | 	add	objptr, #1
04d34     FF FF FF FF 
04d38     07 FF 4B FC | 	wrbyte	##-1, objptr
04d3c     E8 0F 86 F1 | 	sub	objptr, #488
04d40     A4 03 90 FD | 	jmp	#LR__0196
04d44                 | LR__0176
04d44                 | ' 
04d44                 | '     $C:                          ' Set volume
04d44                 | '       currVolume[channel] := z
04d44     02 30 66 F0 | 	shl	_var01, #2
04d48     FF 0E 06 F1 | 	add	objptr, #255
04d4c     07 31 02 F1 | 	add	_var01, objptr
04d50     BA 0E 06 F1 | 	add	objptr, #186
04d54     07 3B C2 FA | 	rdbyte	_var06, objptr
04d58     B9 0F 86 F1 | 	sub	objptr, #441
04d5c     18 3B 62 FC | 	wrlong	_var06, _var01
04d60     84 03 90 FD | 	jmp	#LR__0196
04d64                 | LR__0177
04d64                 | ' 
04d64                 | '     $D:                          ' Pattern break
04d64                 | '       cmdD_memoryX := x
04d64     B7 0F 06 F1 | 	add	objptr, #439
04d68     07 39 C2 FA | 	rdbyte	_var05, objptr
04d6c     2D 0E 06 F1 | 	add	objptr, #45
04d70     07 39 42 FC | 	wrbyte	_var05, objptr
04d74                 | '       cmdD_memoryY := y
04d74     2C 0E 86 F1 | 	sub	objptr, #44
04d78     07 39 C2 FA | 	rdbyte	_var05, objptr
04d7c     2D 0E 06 F1 | 	add	objptr, #45
04d80     07 39 42 FC | 	wrbyte	_var05, objptr
04d84                 | '       cmdD_updatePosition := true
04d84     01 0E 06 F1 | 	add	objptr, #1
04d88     FF FF FF FF 
04d8c     07 FF 4B FC | 	wrbyte	##-1, objptr
04d90     E6 0F 86 F1 | 	sub	objptr, #486
04d94     50 03 90 FD | 	jmp	#LR__0196
04d98                 | LR__0178
04d98                 | ' 
04d98                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04d98                 | ' 
04d98                 | '       CASE_FAST x
04d98     B7 0F 06 F1 | 	add	objptr, #439
04d9c     07 3D C2 FA | 	rdbyte	_var07, objptr
04da0     B7 0F 86 F1 | 	sub	objptr, #439
04da4     1E 39 02 F6 | 	mov	_var05, _var07
04da8     0F 38 26 F3 | 	fle	_var05, #15
04dac     1C 3F 02 F6 | 	mov	_var08, _var05
04db0     30 3E 62 FD | 	jmprel	_var08
04db4                 | LR__0179
04db4     3C 00 90 FD | 	jmp	#LR__0180
04db8     58 00 90 FD | 	jmp	#LR__0181
04dbc     8C 00 90 FD | 	jmp	#LR__0182
04dc0     C0 00 90 FD | 	jmp	#LR__0183
04dc4     DC 00 90 FD | 	jmp	#LR__0184
04dc8     14 01 90 FD | 	jmp	#LR__0185
04dcc     28 01 90 FD | 	jmp	#LR__0186
04dd0     C0 01 90 FD | 	jmp	#LR__0189
04dd4     10 03 90 FD | 	jmp	#LR__0196
04dd8     0C 03 90 FD | 	jmp	#LR__0196
04ddc     F0 01 90 FD | 	jmp	#LR__0190
04de0     24 02 90 FD | 	jmp	#LR__0191
04de4     00 03 90 FD | 	jmp	#LR__0196
04de8     FC 02 90 FD | 	jmp	#LR__0196
04dec     50 02 90 FD | 	jmp	#LR__0192
04df0     F4 02 90 FD | 	jmp	#LR__0196
04df4                 | LR__0180
04df4                 | ' 
04df4                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04df4     B8 0F 06 F1 | 	add	objptr, #440
04df8     07 3B C2 FA | 	rdbyte	_var06, objptr
04dfc     1D 3B 22 F6 | 	not	_var06, _var06
04e00     01 3A 06 F5 | 	and	_var06, #1
04e04     03 0E 06 F1 | 	add	objptr, #3
04e08     07 3B 42 FC | 	wrbyte	_var06, objptr
04e0c     BB 0F 86 F1 | 	sub	objptr, #443
04e10     D4 02 90 FD | 	jmp	#LR__0196
04e14                 | LR__0181
04e14                 | ' 
04e14                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04e14     18 41 02 F6 | 	mov	_var09, _var01
04e18     02 40 66 F0 | 	shl	_var09, #2
04e1c     DF 0E 06 F1 | 	add	objptr, #223
04e20     07 41 02 F1 | 	add	_var09, objptr
04e24     20 3B 02 FB | 	rdlong	_var06, _var09
04e28     D9 0E 06 F1 | 	add	objptr, #217
04e2c     07 43 C2 FA | 	rdbyte	_var10, objptr
04e30     21 3B 82 F1 | 	sub	_var06, _var10
04e34     02 30 66 F0 | 	shl	_var01, #2
04e38     D9 0E 86 F1 | 	sub	objptr, #217
04e3c     07 31 02 F1 | 	add	_var01, objptr
04e40     18 3B 62 FC | 	wrlong	_var06, _var01
04e44     DF 0E 86 F1 | 	sub	objptr, #223
04e48     9C 02 90 FD | 	jmp	#LR__0196
04e4c                 | LR__0182
04e4c                 | ' 
04e4c                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04e4c     18 41 02 F6 | 	mov	_var09, _var01
04e50     02 40 66 F0 | 	shl	_var09, #2
04e54     DF 0E 06 F1 | 	add	objptr, #223
04e58     07 41 02 F1 | 	add	_var09, objptr
04e5c     20 3B 02 FB | 	rdlong	_var06, _var09
04e60     D9 0E 06 F1 | 	add	objptr, #217
04e64     07 43 C2 FA | 	rdbyte	_var10, objptr
04e68     21 3B 02 F1 | 	add	_var06, _var10
04e6c     02 30 66 F0 | 	shl	_var01, #2
04e70     D9 0E 86 F1 | 	sub	objptr, #217
04e74     07 31 02 F1 | 	add	_var01, objptr
04e78     18 3B 62 FC | 	wrlong	_var06, _var01
04e7c     DF 0E 86 F1 | 	sub	objptr, #223
04e80     64 02 90 FD | 	jmp	#LR__0196
04e84                 | LR__0183
04e84                 | ' 
04e84                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04e84     B8 0F 06 F1 | 	add	objptr, #440
04e88     07 3B C2 FA | 	rdbyte	_var06, objptr
04e8c     01 3A 06 F5 | 	and	_var06, #1
04e90     04 0E 06 F1 | 	add	objptr, #4
04e94     07 31 02 F1 | 	add	_var01, objptr
04e98     18 3B 42 FC | 	wrbyte	_var06, _var01
04e9c     BC 0F 86 F1 | 	sub	objptr, #444
04ea0     44 02 90 FD | 	jmp	#LR__0196
04ea4                 | LR__0184
04ea4                 | ' 
04ea4                 | '         $4:                                      ' Set vibrato waveform type
04ea4                 | '           vibratoType[channel]  := y & 3
04ea4     B8 0F 06 F1 | 	add	objptr, #440
04ea8     07 3B C2 FA | 	rdbyte	_var06, objptr
04eac     03 3A 06 F5 | 	and	_var06, #3
04eb0     18 45 02 F6 | 	mov	_var11, _var01
04eb4     08 0E 06 F1 | 	add	objptr, #8
04eb8     07 45 02 F1 | 	add	_var11, objptr
04ebc     22 3B 42 FC | 	wrbyte	_var06, _var11
04ec0                 | '           resetVibrato[channel] := y & 4
04ec0     08 0E 86 F1 | 	sub	objptr, #8
04ec4     07 3B C2 FA | 	rdbyte	_var06, objptr
04ec8     04 3A 06 F5 | 	and	_var06, #4
04ecc     25 0E 86 F1 | 	sub	objptr, #37
04ed0     07 31 02 F1 | 	add	_var01, objptr
04ed4     18 3B 42 FC | 	wrbyte	_var06, _var01
04ed8     93 0F 86 F1 | 	sub	objptr, #403
04edc     08 02 90 FD | 	jmp	#LR__0196
04ee0                 | LR__0185
04ee0                 | ' 
04ee0                 | '         $5: fineTune := y                        ' Set finetune
04ee0     B8 0F 06 F1 | 	add	objptr, #440
04ee4     07 3B C2 FA | 	rdbyte	_var06, objptr
04ee8     09 0E 86 F1 | 	sub	objptr, #9
04eec     07 3B 62 FC | 	wrlong	_var06, objptr
04ef0     AF 0F 86 F1 | 	sub	objptr, #431
04ef4     F0 01 90 FD | 	jmp	#LR__0196
04ef8                 | LR__0186
04ef8                 | ' 
04ef8                 | '         $6:                                      ' Pattern looping
04ef8                 | '           if y == 0
04ef8     B8 0F 06 F1 | 	add	objptr, #440
04efc     07 3B CA FA | 	rdbyte	_var06, objptr wz
04f00     B8 0F 86 F1 | 	sub	objptr, #440
04f04     1C 00 90 5D |  if_ne	jmp	#LR__0187
04f08                 | '             cmdE6_memory[channel] := patternRow
04f08     E9 0F 06 F1 | 	add	objptr, #489
04f0c     07 31 02 F1 | 	add	_var01, objptr
04f10     47 0F 86 F1 | 	sub	objptr, #327
04f14     07 45 C2 FA | 	rdbyte	_var11, objptr
04f18     A2 0E 86 F1 | 	sub	objptr, #162
04f1c     18 45 42 FC | 	wrbyte	_var11, _var01
04f20                 | '           else
04f20     C4 01 90 FD | 	jmp	#LR__0196
04f24                 | LR__0187
04f24                 | '             if ++cmdE6_counter[channel] <= y
04f24     18 41 02 F6 | 	mov	_var09, _var01
04f28     ED 0F 06 F1 | 	add	objptr, #493
04f2c     07 41 02 F1 | 	add	_var09, objptr
04f30     20 3B C2 FA | 	rdbyte	_var06, _var09
04f34     01 3A 06 F1 | 	add	_var06, #1
04f38     18 43 02 F6 | 	mov	_var10, _var01
04f3c     07 43 02 F1 | 	add	_var10, objptr
04f40     21 3B 42 FC | 	wrbyte	_var06, _var10
04f44     21 47 C2 FA | 	rdbyte	_var12, _var10
04f48     35 0E 86 F1 | 	sub	objptr, #53
04f4c     07 49 C2 FA | 	rdbyte	_var13, objptr
04f50     B8 0F 86 F1 | 	sub	objptr, #440
04f54     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04f58     24 00 90 1D |  if_a	jmp	#LR__0188
04f5c                 | '               cmdE6_updatePosition[channel] := true
04f5c     F1 0F 06 F1 | 	add	objptr, #497
04f60     07 31 02 F1 | 	add	_var01, objptr
04f64     FF FF FF FF 
04f68     18 FF 4B FC | 	wrbyte	##-1, _var01
04f6c                 | '               cmdE6_updatePositionCommon    := true
04f6c     04 0E 06 F1 | 	add	objptr, #4
04f70     FF FF FF FF 
04f74     07 FF 4B FC | 	wrbyte	##-1, objptr
04f78     F5 0F 86 F1 | 	sub	objptr, #501
04f7c                 | '             else
04f7c     68 01 90 FD | 	jmp	#LR__0196
04f80                 | LR__0188
04f80                 | '               cmdE6_counter[channel] := 0
04f80     ED 0F 06 F1 | 	add	objptr, #493
04f84     07 31 02 F1 | 	add	_var01, objptr
04f88     18 01 48 FC | 	wrbyte	#0, _var01
04f8c     ED 0F 86 F1 | 	sub	objptr, #493
04f90     54 01 90 FD | 	jmp	#LR__0196
04f94                 | LR__0189
04f94                 | ' 
04f94                 | '         $7:                                      ' Set tremolo waveform type
04f94                 | '           tremoloType[channel] := y & 3
04f94     B8 0F 06 F1 | 	add	objptr, #440
04f98     07 3B C2 FA | 	rdbyte	_var06, objptr
04f9c     03 3A 06 F5 | 	and	_var06, #3
04fa0     18 45 02 F6 | 	mov	_var11, _var01
04fa4     0C 0E 06 F1 | 	add	objptr, #12
04fa8     07 45 02 F1 | 	add	_var11, objptr
04fac     22 3B 42 FC | 	wrbyte	_var06, _var11
04fb0                 | '           resetTremolo[channel] := y & 4
04fb0     0C 0E 86 F1 | 	sub	objptr, #12
04fb4     07 3B C2 FA | 	rdbyte	_var06, objptr
04fb8     04 3A 06 F5 | 	and	_var06, #4
04fbc     29 0E 86 F1 | 	sub	objptr, #41
04fc0     07 31 02 F1 | 	add	_var01, objptr
04fc4     18 3B 42 FC | 	wrbyte	_var06, _var01
04fc8     8F 0F 86 F1 | 	sub	objptr, #399
04fcc     18 01 90 FD | 	jmp	#LR__0196
04fd0                 | LR__0190
04fd0                 | ' 
04fd0                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
04fd0     18 41 02 F6 | 	mov	_var09, _var01
04fd4     02 40 66 F0 | 	shl	_var09, #2
04fd8     FF 0E 06 F1 | 	add	objptr, #255
04fdc     07 41 02 F1 | 	add	_var09, objptr
04fe0     20 3B 02 FB | 	rdlong	_var06, _var09
04fe4     B9 0E 06 F1 | 	add	objptr, #185
04fe8     07 43 C2 FA | 	rdbyte	_var10, objptr
04fec     21 3B 02 F1 | 	add	_var06, _var10
04ff0     02 30 66 F0 | 	shl	_var01, #2
04ff4     B9 0E 86 F1 | 	sub	objptr, #185
04ff8     07 31 02 F1 | 	add	_var01, objptr
04ffc     18 3B 62 FC | 	wrlong	_var06, _var01
05000     FF 0E 86 F1 | 	sub	objptr, #255
05004     E0 00 90 FD | 	jmp	#LR__0196
05008                 | LR__0191
05008                 | ' 
05008                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05008     18 41 02 F6 | 	mov	_var09, _var01
0500c     02 40 66 F0 | 	shl	_var09, #2
05010     FF 0E 06 F1 | 	add	objptr, #255
05014     07 41 02 F1 | 	add	_var09, objptr
05018     20 3B 02 FB | 	rdlong	_var06, _var09
0501c     B9 0E 06 F1 | 	add	objptr, #185
05020     07 43 C2 FA | 	rdbyte	_var10, objptr
05024     21 3B 82 F1 | 	sub	_var06, _var10
05028     02 30 66 F0 | 	shl	_var01, #2
0502c     B9 0E 86 F1 | 	sub	objptr, #185
05030     07 31 02 F1 | 	add	_var01, objptr
05034     18 3B 62 FC | 	wrlong	_var06, _var01
05038     FF 0E 86 F1 | 	sub	objptr, #255
0503c     A8 00 90 FD | 	jmp	#LR__0196
05040                 | LR__0192
05040                 | ' 
05040                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05040     B8 0F 06 F1 | 	add	objptr, #440
05044     07 41 C2 FA | 	rdbyte	_var09, objptr
05048     14 0F 86 F1 | 	sub	objptr, #276
0504c     07 43 C2 FA | 	rdbyte	_var10, objptr
05050     21 41 02 FD | 	qmul	_var09, _var10
05054     18 3A 62 FD | 	getqx	_var06
05058     01 0E 06 F1 | 	add	objptr, #1
0505c     07 3B 42 FC | 	wrbyte	_var06, objptr
05060     A5 0E 86 F1 | 	sub	objptr, #165
05064     80 00 90 FD | 	jmp	#LR__0196
05068                 | LR__0193
05068                 | ' 
05068                 | '     $F:                          ' Set speed
05068                 | '       if z < 32
05068     B9 0F 06 F1 | 	add	objptr, #441
0506c     07 39 C2 FA | 	rdbyte	_var05, objptr
05070     B9 0F 86 F1 | 	sub	objptr, #441
05074     20 38 5E F2 | 	cmps	_var05, #32 wcz
05078     18 00 90 3D |  if_ae	jmp	#LR__0194
0507c                 | '         currentSongSpeed := z
0507c     B9 0F 06 F1 | 	add	objptr, #441
05080     07 39 C2 FA | 	rdbyte	_var05, objptr
05084     15 0F 86 F1 | 	sub	objptr, #277
05088     07 39 42 FC | 	wrbyte	_var05, objptr
0508c     A4 0E 86 F1 | 	sub	objptr, #164
05090                 | '       else
05090     54 00 90 FD | 	jmp	#LR__0195
05094                 | LR__0194
05094                 | '         ticksPerMinute := z * 24
05094     B9 0F 06 F1 | 	add	objptr, #441
05098     07 3D C2 FA | 	rdbyte	_var07, objptr
0509c     1E 39 02 F6 | 	mov	_var05, _var07
050a0     01 38 66 F0 | 	shl	_var05, #1
050a4     1E 39 02 F1 | 	add	_var05, _var07
050a8     03 38 66 F0 | 	shl	_var05, #3
050ac     12 0E 86 F1 | 	sub	objptr, #18
050b0     07 39 62 FC | 	wrlong	_var05, objptr
050b4     A7 0F 86 F1 | 	sub	objptr, #423
050b8                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
050b8     07 0B 03 FB | 	rdlong	muldiva_, objptr
050bc     A7 0F 06 F1 | 	add	objptr, #423
050c0     07 0D 03 FB | 	rdlong	muldivb_, objptr
050c4     A7 0F 86 F1 | 	sub	objptr, #423
050c8     D0 00 A0 FD | 	call	#divide_
050cc     86 3B 02 F6 | 	mov	_var06, muldivb_
050d0     04 3A 66 F0 | 	shl	_var06, #4
050d4     86 3B 82 F1 | 	sub	_var06, muldivb_
050d8     02 3A 66 F0 | 	shl	_var06, #2
050dc     AB 0F 06 F1 | 	add	objptr, #427
050e0     07 3B 62 FC | 	wrlong	_var06, objptr
050e4     AB 0F 86 F1 | 	sub	objptr, #427
050e8                 | LR__0195
050e8                 | LR__0196
050e8                 | _trackerplayer_spin2_handleZeroTickCommands_ret
050e8     2D 00 64 FD | 	ret
050ec                 | 
050ec                 | ' 
050ec                 | ' 
050ec                 | ' ' Handle all commands that executes on "non zero ticks"
050ec                 | ' '
050ec                 | ' PRI handleNonZeroTickCommands(channel)
050ec                 | _trackerplayer_spin2_handleNonZeroTickCommands
050ec     0A 5A 05 F6 | 	mov	COUNT_, #10
050f0     B0 00 A0 FD | 	call	#pushregs_
050f4     2E 6B 02 F6 | 	mov	local01, arg01
050f8                 | ' 
050f8                 | '   CASE_FAST cmd
050f8     BA 0F 06 F1 | 	add	objptr, #442
050fc     07 6D C2 FA | 	rdbyte	local02, objptr
05100     BA 0F 86 F1 | 	sub	objptr, #442
05104     36 6F 02 F6 | 	mov	local03, local02
05108     01 6E 86 F1 | 	sub	local03, #1
0510c     0E 6E 26 F3 | 	fle	local03, #14
05110     37 71 02 F6 | 	mov	local04, local03
05114     30 70 62 FD | 	jmprel	local04
05118                 | LR__0197
05118     38 00 90 FD | 	jmp	#LR__0198
0511c     A0 00 90 FD | 	jmp	#LR__0199
05120     D4 00 90 FD | 	jmp	#LR__0200
05124     1C 02 90 FD | 	jmp	#LR__0210
05128     20 01 90 FD | 	jmp	#LR__0202
0512c     48 01 90 FD | 	jmp	#LR__0203
05130     50 01 90 FD | 	jmp	#LR__0204
05134     0C 02 90 FD | 	jmp	#LR__0210
05138     08 02 90 FD | 	jmp	#LR__0210
0513c     B0 01 90 FD | 	jmp	#LR__0207
05140     00 02 90 FD | 	jmp	#LR__0210
05144     FC 01 90 FD | 	jmp	#LR__0210
05148     F8 01 90 FD | 	jmp	#LR__0210
0514c     AC 01 90 FD | 	jmp	#LR__0208
05150     F0 01 90 FD | 	jmp	#LR__0210
05154                 | LR__0198
05154                 | ' 
05154                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05154     35 73 02 F6 | 	mov	local05, local01
05158     02 72 66 F0 | 	shl	local05, #2
0515c     DF 0E 06 F1 | 	add	objptr, #223
05160     07 73 02 F1 | 	add	local05, objptr
05164     39 75 02 FB | 	rdlong	local06, local05
05168     DA 0E 06 F1 | 	add	objptr, #218
0516c     07 77 C2 FA | 	rdbyte	local07, objptr
05170     3B 75 82 F1 | 	sub	local06, local07
05174     35 79 02 F6 | 	mov	local08, local01
05178     02 78 66 F0 | 	shl	local08, #2
0517c     DA 0E 86 F1 | 	sub	objptr, #218
05180     07 79 02 F1 | 	add	local08, objptr
05184     3C 75 62 FC | 	wrlong	local06, local08
05188                 | ' 
05188                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05188                 | '       if currPeriod[channel] < 0
05188     35 75 02 F6 | 	mov	local06, local01
0518c     02 74 66 F0 | 	shl	local06, #2
05190     07 75 02 F1 | 	add	local06, objptr
05194     3A 7B 02 FB | 	rdlong	local09, local06
05198     00 7A 5E F2 | 	cmps	local09, #0 wcz
0519c     DF 0E 86 F1 | 	sub	objptr, #223
051a0     A0 01 90 3D |  if_ae	jmp	#LR__0210
051a4                 | '         currPeriod[channel] := MAXIMUM_PERIOD
051a4     02 6A 66 F0 | 	shl	local01, #2
051a8     DF 0E 06 F1 | 	add	objptr, #223
051ac     07 6B 02 F1 | 	add	local01, objptr
051b0     01 00 80 FF 
051b4     35 B1 6A FC | 	wrlong	##856, local01
051b8     DF 0E 86 F1 | 	sub	objptr, #223
051bc     84 01 90 FD | 	jmp	#LR__0210
051c0                 | LR__0199
051c0                 | ' 
051c0                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
051c0     35 73 02 F6 | 	mov	local05, local01
051c4     02 72 66 F0 | 	shl	local05, #2
051c8     DF 0E 06 F1 | 	add	objptr, #223
051cc     07 73 02 F1 | 	add	local05, objptr
051d0     39 75 02 FB | 	rdlong	local06, local05
051d4     DA 0E 06 F1 | 	add	objptr, #218
051d8     07 77 C2 FA | 	rdbyte	local07, objptr
051dc     3B 75 02 F1 | 	add	local06, local07
051e0     02 6A 66 F0 | 	shl	local01, #2
051e4     DA 0E 86 F1 | 	sub	objptr, #218
051e8     07 6B 02 F1 | 	add	local01, objptr
051ec     35 75 62 FC | 	wrlong	local06, local01
051f0     DF 0E 86 F1 | 	sub	objptr, #223
051f4     4C 01 90 FD | 	jmp	#LR__0210
051f8                 | LR__0200
051f8                 | ' 
051f8                 | '     $3:                                 ' Slide to note (portamento)
051f8                 | '       if z > 0
051f8     B9 0F 06 F1 | 	add	objptr, #441
051fc     07 75 C2 FA | 	rdbyte	local06, objptr
05200     B9 0F 86 F1 | 	sub	objptr, #441
05204     00 74 5E F2 | 	cmps	local06, #0 wcz
05208     1C 00 90 ED |  if_be	jmp	#LR__0201
0520c                 | '         cmd3_memoryZ[channel] := z
0520c     35 75 02 F6 | 	mov	local06, local01
05210     C8 0F 06 F1 | 	add	objptr, #456
05214     07 75 02 F1 | 	add	local06, objptr
05218     0F 0E 86 F1 | 	sub	objptr, #15
0521c     07 7B C2 FA | 	rdbyte	local09, objptr
05220     B9 0F 86 F1 | 	sub	objptr, #441
05224     3A 7B 42 FC | 	wrbyte	local09, local06
05228                 | LR__0201
05228                 | ' 
05228                 | '       doPortamento(channel, lastSetPeriod[channel])
05228     35 73 02 F6 | 	mov	local05, local01
0522c     02 72 66 F0 | 	shl	local05, #2
05230     27 0F 06 F1 | 	add	objptr, #295
05234     07 73 02 F1 | 	add	local05, objptr
05238     39 5F 02 FB | 	rdlong	arg02, local05
0523c     35 5D 02 F6 | 	mov	arg01, local01
05240     27 0F 86 F1 | 	sub	objptr, #295
05244     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05248     F8 00 90 FD | 	jmp	#LR__0210
0524c                 | LR__0202
0524c                 | ' 
0524c                 | '     $5:                                 ' Volume slide + portamento
0524c                 | '       doVolumeSlide(channel)
0524c     35 5D 02 F6 | 	mov	arg01, local01
05250     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05254                 | '       doPortamento(channel, lastSetPeriod[channel])
05254     35 73 02 F6 | 	mov	local05, local01
05258     02 72 66 F0 | 	shl	local05, #2
0525c     27 0F 06 F1 | 	add	objptr, #295
05260     07 73 02 F1 | 	add	local05, objptr
05264     39 5F 02 FB | 	rdlong	arg02, local05
05268     35 5D 02 F6 | 	mov	arg01, local01
0526c     27 0F 86 F1 | 	sub	objptr, #295
05270     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05274     CC 00 90 FD | 	jmp	#LR__0210
05278                 | LR__0203
05278                 | ' 
05278                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05278     35 5D 02 F6 | 	mov	arg01, local01
0527c     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05280     C0 00 90 FD | 	jmp	#LR__0210
05284                 | LR__0204
05284                 | ' 
05284                 | '     $7:                                 ' Tremolo
05284                 | '       if x > 0
05284     B7 0F 06 F1 | 	add	objptr, #439
05288     07 75 C2 FA | 	rdbyte	local06, objptr
0528c     B7 0F 86 F1 | 	sub	objptr, #439
05290     00 74 5E F2 | 	cmps	local06, #0 wcz
05294     1C 00 90 ED |  if_be	jmp	#LR__0205
05298                 | '         cmd7_memoryX[channel] := x
05298     35 75 02 F6 | 	mov	local06, local01
0529c     D8 0F 06 F1 | 	add	objptr, #472
052a0     07 75 02 F1 | 	add	local06, objptr
052a4     21 0E 86 F1 | 	sub	objptr, #33
052a8     07 7B C2 FA | 	rdbyte	local09, objptr
052ac     B7 0F 86 F1 | 	sub	objptr, #439
052b0     3A 7B 42 FC | 	wrbyte	local09, local06
052b4                 | LR__0205
052b4                 | '       if y > 0
052b4     B8 0F 06 F1 | 	add	objptr, #440
052b8     07 75 C2 FA | 	rdbyte	local06, objptr
052bc     B8 0F 86 F1 | 	sub	objptr, #440
052c0     00 74 5E F2 | 	cmps	local06, #0 wcz
052c4     1C 00 90 ED |  if_be	jmp	#LR__0206
052c8                 | '         cmd7_memoryY[channel] := y
052c8     35 75 02 F6 | 	mov	local06, local01
052cc     D4 0F 06 F1 | 	add	objptr, #468
052d0     07 75 02 F1 | 	add	local06, objptr
052d4     1C 0E 86 F1 | 	sub	objptr, #28
052d8     07 7B C2 FA | 	rdbyte	local09, objptr
052dc     B8 0F 86 F1 | 	sub	objptr, #440
052e0     3A 7B 42 FC | 	wrbyte	local09, local06
052e4                 | LR__0206
052e4                 | ' 
052e4                 | '       doTremolo(channel)
052e4     35 5D 02 F6 | 	mov	arg01, local01
052e8     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
052ec     54 00 90 FD | 	jmp	#LR__0210
052f0                 | LR__0207
052f0                 | ' 
052f0                 | '     $A: doVolumeSlide(channel)          ' Volume slide
052f0     35 5D 02 F6 | 	mov	arg01, local01
052f4     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052f8     48 00 90 FD | 	jmp	#LR__0210
052fc                 | LR__0208
052fc                 | ' 
052fc                 | '     $E:                                 ' Retrig every Y ticks
052fc                 | '       if (x == $9) && ((tickcounter // y) == 0)
052fc     B7 0F 06 F1 | 	add	objptr, #439
05300     07 73 C2 FA | 	rdbyte	local05, objptr
05304     B7 0F 86 F1 | 	sub	objptr, #439
05308     09 72 0E F2 | 	cmp	local05, #9 wz
0530c     34 00 90 5D |  if_ne	jmp	#LR__0209
05310     A1 0E 06 F1 | 	add	objptr, #161
05314     07 77 C2 FA | 	rdbyte	local07, objptr
05318     3B 0B 03 F6 | 	mov	muldiva_, local07
0531c     17 0F 06 F1 | 	add	objptr, #279
05320     07 7D C2 FA | 	rdbyte	local10, objptr
05324     B8 0F 86 F1 | 	sub	objptr, #440
05328     3E 0D 03 F6 | 	mov	muldivb_, local10
0532c     D0 00 A0 FD | 	call	#divide_
05330     85 7B 0A F6 | 	mov	local09, muldiva_ wz
05334     0C 00 90 5D |  if_ne	jmp	#LR__0209
05338                 | '         triggerNote(channel)
05338     35 75 02 F6 | 	mov	local06, local01
0533c     3A 5D 02 F6 | 	mov	arg01, local06
05340     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
05344                 | LR__0209
05344                 | LR__0210
05344     AF F0 03 F6 | 	mov	ptra, fp
05348     BF 00 A0 FD | 	call	#popregs_
0534c                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
0534c     2D 00 64 FD | 	ret
05350                 | 
05350                 | ' 
05350                 | ' 
05350                 | ' ' Handle all commands that executes on every tick
05350                 | ' '
05350                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05350                 | _trackerplayer_spin2_handleEveryTickCommands
05350     12 5A 05 F6 | 	mov	COUNT_, #18
05354     B0 00 A0 FD | 	call	#pushregs_
05358     2E 6B 02 F6 | 	mov	local01, arg01
0535c                 | ' 
0535c                 | '   CASE_FAST cmd
0535c     BA 0F 06 F1 | 	add	objptr, #442
05360     07 6D C2 FA | 	rdbyte	local02, objptr
05364     BA 0F 86 F1 | 	sub	objptr, #442
05368     36 6F 02 F6 | 	mov	local03, local02
0536c     0F 6E 26 F3 | 	fle	local03, #15
05370     37 71 02 F6 | 	mov	local04, local03
05374     30 70 62 FD | 	jmprel	local04
05378                 | LR__0211
05378     3C 00 90 FD | 	jmp	#LR__0212
0537c     68 03 90 FD | 	jmp	#LR__0226
05380     64 03 90 FD | 	jmp	#LR__0226
05384     60 03 90 FD | 	jmp	#LR__0226
05388     E8 01 90 FD | 	jmp	#LR__0215
0538c     58 03 90 FD | 	jmp	#LR__0226
05390     4C 02 90 FD | 	jmp	#LR__0218
05394     50 03 90 FD | 	jmp	#LR__0226
05398     4C 03 90 FD | 	jmp	#LR__0226
0539c     48 03 90 FD | 	jmp	#LR__0226
053a0     44 03 90 FD | 	jmp	#LR__0226
053a4     40 03 90 FD | 	jmp	#LR__0226
053a8     3C 03 90 FD | 	jmp	#LR__0226
053ac     38 03 90 FD | 	jmp	#LR__0226
053b0     38 02 90 FD | 	jmp	#LR__0219
053b4     30 03 90 FD | 	jmp	#LR__0226
053b8                 | LR__0212
053b8                 | ' 
053b8                 | '     $0:                                 ' Arpeggio
053b8                 | '       arpCounter := tickCounter // 3
053b8     A1 0E 06 F1 | 	add	objptr, #161
053bc     07 0B C3 FA | 	rdbyte	muldiva_, objptr
053c0     A1 0E 86 F1 | 	sub	objptr, #161
053c4     03 0C 07 F6 | 	mov	muldivb_, #3
053c8     D0 00 A0 FD | 	call	#divide_
053cc     85 73 02 F6 | 	mov	local05, muldiva_
053d0                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
053d0     35 75 02 F6 | 	mov	local06, local01
053d4     02 74 66 F0 | 	shl	local06, #2
053d8     DF 0E 06 F1 | 	add	objptr, #223
053dc     07 75 02 F1 | 	add	local06, objptr
053e0     3A 5D 02 FB | 	rdlong	arg01, local06
053e4     35 77 02 F6 | 	mov	local07, local01
053e8     0C 0E 86 F1 | 	sub	objptr, #12
053ec     07 77 02 F1 | 	add	local07, objptr
053f0     3B 5F C2 FA | 	rdbyte	arg02, local07
053f4     D3 0E 86 F1 | 	sub	objptr, #211
053f8     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
053fc     15 79 02 F6 | 	mov	local08, result1
05400     3C 7B 02 F6 | 	mov	local09, local08
05404     24 78 5E F2 | 	cmps	local08, #36 wcz
05408     DC 02 90 3D |  if_ae	jmp	#LR__0226
0540c                 | '         if arpCounter == 1 and x > 0
0540c     01 72 0E F2 | 	cmp	local05, #1 wz
05410     8C 00 90 5D |  if_ne	jmp	#LR__0213
05414     B7 0F 06 F1 | 	add	objptr, #439
05418     07 75 C2 FA | 	rdbyte	local06, objptr
0541c     B7 0F 86 F1 | 	sub	objptr, #439
05420     00 74 5E F2 | 	cmps	local06, #0 wcz
05424     78 00 90 ED |  if_be	jmp	#LR__0213
05428                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05428     3D 7D 02 F6 | 	mov	local10, local09
0542c     B7 0F 06 F1 | 	add	objptr, #439
05430     07 77 C2 FA | 	rdbyte	local07, objptr
05434     3B 7F 02 F6 | 	mov	local11, local07
05438     3B 7D 02 F1 | 	add	local10, local07
0543c     3E 81 02 F6 | 	mov	local12, local10
05440     40 5D 02 F6 | 	mov	arg01, local12
05444     06 00 00 FF 
05448     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
0544c     01 5C 66 F0 | 	shl	arg01, #1
05450     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05454                 | ' 
05454                 | '   return word[@periodTable][noteNumber]
05454     2E 2B E2 FA | 	rdword	result1, arg01
05458     06 00 00 FF 
0545c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05460     15 83 02 F6 | 	mov	local13, result1
05464     35 85 02 F6 | 	mov	local14, local01
05468     02 84 66 F0 | 	shl	local14, #2
0546c     D8 0E 86 F1 | 	sub	objptr, #216
05470     07 87 02 F6 | 	mov	local15, objptr
05474     07 85 02 F1 | 	add	local14, objptr
05478     41 75 02 F6 | 	mov	local06, local13
0547c     42 89 02 FB | 	rdlong	local16, local14
05480     44 75 82 F1 | 	sub	local06, local16
05484     35 8B 02 F6 | 	mov	local17, local01
05488     02 8A 66 F0 | 	shl	local17, #2
0548c     10 0E 06 F1 | 	add	objptr, #16
05490     07 8D 02 F6 | 	mov	local18, objptr
05494     07 8B 02 F1 | 	add	local17, objptr
05498     45 75 62 FC | 	wrlong	local06, local17
0549c     EF 0E 86 F1 | 	sub	objptr, #239
054a0                 | LR__0213
054a0                 | '         if arpCounter == 2 and y > 0
054a0     02 72 0E F2 | 	cmp	local05, #2 wz
054a4     8C 00 90 5D |  if_ne	jmp	#LR__0214
054a8     B8 0F 06 F1 | 	add	objptr, #440
054ac     07 75 C2 FA | 	rdbyte	local06, objptr
054b0     B8 0F 86 F1 | 	sub	objptr, #440
054b4     00 74 5E F2 | 	cmps	local06, #0 wcz
054b8     78 00 90 ED |  if_be	jmp	#LR__0214
054bc                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
054bc     3D 7D 02 F6 | 	mov	local10, local09
054c0     B8 0F 06 F1 | 	add	objptr, #440
054c4     07 77 C2 FA | 	rdbyte	local07, objptr
054c8     3B 7F 02 F6 | 	mov	local11, local07
054cc     3B 7D 02 F1 | 	add	local10, local07
054d0     3E 81 02 F6 | 	mov	local12, local10
054d4     40 5D 02 F6 | 	mov	arg01, local12
054d8     06 00 00 FF 
054dc     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054e0     01 5C 66 F0 | 	shl	arg01, #1
054e4     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054e8                 | ' 
054e8                 | '   return word[@periodTable][noteNumber]
054e8     2E 2B E2 FA | 	rdword	result1, arg01
054ec     06 00 00 FF 
054f0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054f4     15 83 02 F6 | 	mov	local13, result1
054f8     35 85 02 F6 | 	mov	local14, local01
054fc     02 84 66 F0 | 	shl	local14, #2
05500     D9 0E 86 F1 | 	sub	objptr, #217
05504     07 87 02 F6 | 	mov	local15, objptr
05508     07 85 02 F1 | 	add	local14, objptr
0550c     41 75 02 F6 | 	mov	local06, local13
05510     42 89 02 FB | 	rdlong	local16, local14
05514     44 75 82 F1 | 	sub	local06, local16
05518     35 8B 02 F6 | 	mov	local17, local01
0551c     02 8A 66 F0 | 	shl	local17, #2
05520     10 0E 06 F1 | 	add	objptr, #16
05524     07 8D 02 F6 | 	mov	local18, objptr
05528     07 8B 02 F1 | 	add	local17, objptr
0552c     45 75 62 FC | 	wrlong	local06, local17
05530     EF 0E 86 F1 | 	sub	objptr, #239
05534                 | LR__0214
05534                 | '         if arpCounter == 0 and (x + y) > 0
05534     00 72 0E F2 | 	cmp	local05, #0 wz
05538     AC 01 90 5D |  if_ne	jmp	#LR__0226
0553c     B7 0F 06 F1 | 	add	objptr, #439
05540     07 75 C2 FA | 	rdbyte	local06, objptr
05544     01 0E 06 F1 | 	add	objptr, #1
05548     07 77 C2 FA | 	rdbyte	local07, objptr
0554c     B8 0F 86 F1 | 	sub	objptr, #440
05550     3B 75 02 F1 | 	add	local06, local07
05554     00 74 5E F2 | 	cmps	local06, #0 wcz
05558     8C 01 90 ED |  if_be	jmp	#LR__0226
0555c                 | '           deltaPeriod[channel] := 0
0555c     02 6A 66 F0 | 	shl	local01, #2
05560     EF 0E 06 F1 | 	add	objptr, #239
05564     07 6B 02 F1 | 	add	local01, objptr
05568     35 01 68 FC | 	wrlong	#0, local01
0556c     EF 0E 86 F1 | 	sub	objptr, #239
05570     74 01 90 FD | 	jmp	#LR__0226
05574                 | LR__0215
05574                 | ' 
05574                 | '     $4:                                 ' Vibrato
05574                 | '       if x > 0
05574     B7 0F 06 F1 | 	add	objptr, #439
05578     07 75 C2 FA | 	rdbyte	local06, objptr
0557c     B7 0F 86 F1 | 	sub	objptr, #439
05580     00 74 5E F2 | 	cmps	local06, #0 wcz
05584     1C 00 90 ED |  if_be	jmp	#LR__0216
05588                 | '         cmd4_memoryX[channel] := x
05588     35 75 02 F6 | 	mov	local06, local01
0558c     D0 0F 06 F1 | 	add	objptr, #464
05590     07 75 02 F1 | 	add	local06, objptr
05594     19 0E 86 F1 | 	sub	objptr, #25
05598     07 7F C2 FA | 	rdbyte	local11, objptr
0559c     B7 0F 86 F1 | 	sub	objptr, #439
055a0     3A 7F 42 FC | 	wrbyte	local11, local06
055a4                 | LR__0216
055a4                 | '       if y > 0
055a4     B8 0F 06 F1 | 	add	objptr, #440
055a8     07 75 C2 FA | 	rdbyte	local06, objptr
055ac     B8 0F 86 F1 | 	sub	objptr, #440
055b0     00 74 5E F2 | 	cmps	local06, #0 wcz
055b4     1C 00 90 ED |  if_be	jmp	#LR__0217
055b8                 | '         cmd4_memoryY[channel] := y
055b8     35 75 02 F6 | 	mov	local06, local01
055bc     CC 0F 06 F1 | 	add	objptr, #460
055c0     07 75 02 F1 | 	add	local06, objptr
055c4     14 0E 86 F1 | 	sub	objptr, #20
055c8     07 7F C2 FA | 	rdbyte	local11, objptr
055cc     B8 0F 86 F1 | 	sub	objptr, #440
055d0     3A 7F 42 FC | 	wrbyte	local11, local06
055d4                 | LR__0217
055d4                 | ' 
055d4                 | '       doVibrato(channel)
055d4     35 5D 02 F6 | 	mov	arg01, local01
055d8     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055dc     08 01 90 FD | 	jmp	#LR__0226
055e0                 | LR__0218
055e0                 | ' 
055e0                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
055e0     35 5D 02 F6 | 	mov	arg01, local01
055e4     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055e8     FC 00 90 FD | 	jmp	#LR__0226
055ec                 | LR__0219
055ec                 | ' 
055ec                 | '     $E:
055ec                 | '       if x == $C                        ' Cut note after Y ticks
055ec     B7 0F 06 F1 | 	add	objptr, #439
055f0     07 75 C2 FA | 	rdbyte	local06, objptr
055f4     B7 0F 86 F1 | 	sub	objptr, #439
055f8     0C 74 0E F2 | 	cmp	local06, #12 wz
055fc     34 00 90 5D |  if_ne	jmp	#LR__0220
05600                 | '         if tickcounter == y
05600     A1 0E 06 F1 | 	add	objptr, #161
05604     07 75 C2 FA | 	rdbyte	local06, objptr
05608     17 0F 06 F1 | 	add	objptr, #279
0560c     07 7F C2 FA | 	rdbyte	local11, objptr
05610     B8 0F 86 F1 | 	sub	objptr, #440
05614     3F 75 0A F2 | 	cmp	local06, local11 wz
05618     CC 00 90 5D |  if_ne	jmp	#LR__0225
0561c                 | '           currVolume[channel] := 0
0561c     02 6A 66 F0 | 	shl	local01, #2
05620     FF 0E 06 F1 | 	add	objptr, #255
05624     07 6B 02 F1 | 	add	local01, objptr
05628     35 01 68 FC | 	wrlong	#0, local01
0562c     FF 0E 86 F1 | 	sub	objptr, #255
05630     B4 00 90 FD | 	jmp	#LR__0225
05634                 | LR__0220
05634                 | ' 
05634                 | '       elseif x == $D                    ' Delay note Y ticks
05634     B7 0F 06 F1 | 	add	objptr, #439
05638     07 75 C2 FA | 	rdbyte	local06, objptr
0563c     B7 0F 86 F1 | 	sub	objptr, #439
05640     0D 74 0E F2 | 	cmp	local06, #13 wz
05644     A0 00 90 5D |  if_ne	jmp	#LR__0224
05648                 | '         if tickcounter == y
05648     A1 0E 06 F1 | 	add	objptr, #161
0564c     07 75 C2 FA | 	rdbyte	local06, objptr
05650     17 0F 06 F1 | 	add	objptr, #279
05654     07 7F C2 FA | 	rdbyte	local11, objptr
05658     B8 0F 86 F1 | 	sub	objptr, #440
0565c     3F 75 0A F2 | 	cmp	local06, local11 wz
05660     0C 00 90 5D |  if_ne	jmp	#LR__0221
05664                 | '           triggerNote(channel)
05664     35 5D 02 F6 | 	mov	arg01, local01
05668     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
0566c     78 00 90 FD | 	jmp	#LR__0223
05670                 | LR__0221
05670                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05670                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05670     B8 0F 06 F1 | 	add	objptr, #440
05674     07 75 C2 FA | 	rdbyte	local06, objptr
05678     14 0F 86 F1 | 	sub	objptr, #276
0567c     07 7F C2 FA | 	rdbyte	local11, objptr
05680     A4 0E 86 F1 | 	sub	objptr, #164
05684     3F 75 5A F2 | 	cmps	local06, local11 wcz
05688     5C 00 90 CD |  if_b	jmp	#LR__0222
0568c     A4 0E 06 F1 | 	add	objptr, #164
05690     07 83 C2 FA | 	rdbyte	local13, objptr
05694     41 81 02 F6 | 	mov	local12, local13
05698     01 80 86 F1 | 	sub	local12, #1
0569c     03 0E 86 F1 | 	sub	objptr, #3
056a0     07 87 C2 FA | 	rdbyte	local15, objptr
056a4     A1 0E 86 F1 | 	sub	objptr, #161
056a8     43 85 02 F6 | 	mov	local14, local15
056ac     40 85 0A F2 | 	cmp	local14, local12 wz
056b0     34 00 90 5D |  if_ne	jmp	#LR__0222
056b4                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
056b4     35 75 02 F6 | 	mov	local06, local01
056b8     02 74 66 F0 | 	shl	local06, #2
056bc     27 0F 06 F1 | 	add	objptr, #295
056c0     07 7D 02 F6 | 	mov	local10, objptr
056c4     07 75 02 F1 | 	add	local06, objptr
056c8     35 7F 02 F6 | 	mov	local11, local01
056cc     02 7E 66 F0 | 	shl	local11, #2
056d0     48 0E 86 F1 | 	sub	objptr, #72
056d4     07 77 02 F6 | 	mov	local07, objptr
056d8     3A 81 02 FB | 	rdlong	local12, local06
056dc     3B 7F 02 F1 | 	add	local11, local07
056e0     3F 81 62 FC | 	wrlong	local12, local11
056e4     DF 0E 86 F1 | 	sub	objptr, #223
056e8                 | LR__0222
056e8                 | LR__0223
056e8                 | LR__0224
056e8                 | LR__0225
056e8                 | LR__0226
056e8     AF F0 03 F6 | 	mov	ptra, fp
056ec     BF 00 A0 FD | 	call	#popregs_
056f0                 | _trackerplayer_spin2_handleEveryTickCommands_ret
056f0     2D 00 64 FD | 	ret
056f4                 | 
056f4                 | ' 
056f4                 | ' 
056f4                 | ' PRI doTremolo(channel) | depth, sineWave, speed
056f4                 | _trackerplayer_spin2_doTremolo
056f4     2E 31 02 F6 | 	mov	_var01, arg01
056f8     18 33 02 F6 | 	mov	_var02, _var01
056fc     8B 0F 06 F1 | 	add	objptr, #395
05700     07 33 02 F1 | 	add	_var02, objptr
05704     05 00 00 FF 
05708     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
0570c     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05710     19 37 C2 FA | 	rdbyte	_var04, _var02
05714     02 36 66 F0 | 	shl	_var04, #2
05718     1A 37 02 F1 | 	add	_var04, _var03
0571c                 | ' 
0571c                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
0571c     1B 39 02 FB | 	rdlong	_var05, _var04
05720     18 3B 02 F6 | 	mov	_var06, _var01
05724     49 0E 06 F1 | 	add	objptr, #73
05728     07 3B 02 F1 | 	add	_var06, objptr
0572c                 | '   depth    := cmd7_memoryY[channel]
0572c     1D 3D C2 FA | 	rdbyte	_var07, _var06
05730     18 3F 02 F6 | 	mov	_var08, _var01
05734     04 0E 06 F1 | 	add	objptr, #4
05738     07 3F 02 F1 | 	add	_var08, objptr
0573c                 | '   speed    := cmd7_memoryX[channel]
0573c     1F 41 C2 FA | 	rdbyte	_var09, _var08
05740                 | ' 
05740                 | '   CASE_FAST vibratoType[channel]
05740     18 43 02 F6 | 	mov	_var10, _var01
05744     18 0E 86 F1 | 	sub	objptr, #24
05748     07 45 02 F6 | 	mov	_var11, objptr
0574c     07 43 02 F1 | 	add	_var10, objptr
05750     21 47 C2 FA | 	rdbyte	_var12, _var10
05754     03 46 26 F3 | 	fle	_var12, #3
05758     23 49 02 F6 | 	mov	_var13, _var12
0575c     05 00 00 FF 
05760     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05764     C0 0F 86 F1 | 	sub	objptr, #448
05768     30 48 62 FD | 	jmprel	_var13
0576c                 | LR__0227
0576c     0C 00 90 FD | 	jmp	#LR__0228
05770     30 00 90 FD | 	jmp	#LR__0229
05774     6C 00 90 FD | 	jmp	#LR__0230
05778     B4 00 90 FD | 	jmp	#LR__0231
0577c                 | LR__0228
0577c                 | ' 
0577c                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
0577c     1C 3D 02 FD | 	qmul	_var07, _var05
05780     18 4A 62 FD | 	getqx	_var14
05784     06 4A C6 F0 | 	sar	_var14, #6
05788     18 4D 02 F6 | 	mov	_var15, _var01
0578c     02 4C 66 F0 | 	shl	_var15, #2
05790     0F 0F 06 F1 | 	add	objptr, #271
05794     07 4D 02 F1 | 	add	_var15, objptr
05798     26 4B 62 FC | 	wrlong	_var14, _var15
0579c     0F 0F 86 F1 | 	sub	objptr, #271
057a0     8C 00 90 FD | 	jmp	#LR__0231
057a4                 | LR__0229
057a4                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
057a4     18 4D 02 F6 | 	mov	_var15, _var01
057a8     8B 0F 06 F1 | 	add	objptr, #395
057ac     07 4D 02 F1 | 	add	_var15, objptr
057b0     26 4F C2 FA | 	rdbyte	_var16, _var15
057b4     03 4E 66 F0 | 	shl	_var16, #3
057b8     27 3D 02 FD | 	qmul	_var07, _var16
057bc     18 4A 62 FD | 	getqx	_var14
057c0     00 4B 86 F1 | 	sub	_var14, #256
057c4     06 4A C6 F0 | 	sar	_var14, #6
057c8     18 51 02 F6 | 	mov	_var17, _var01
057cc     02 50 66 F0 | 	shl	_var17, #2
057d0     7C 0E 86 F1 | 	sub	objptr, #124
057d4     07 51 02 F1 | 	add	_var17, objptr
057d8     28 4B 62 FC | 	wrlong	_var14, _var17
057dc     0F 0F 86 F1 | 	sub	objptr, #271
057e0     4C 00 90 FD | 	jmp	#LR__0231
057e4                 | LR__0230
057e4                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
057e4     18 4D 02 F6 | 	mov	_var15, _var01
057e8     8B 0F 06 F1 | 	add	objptr, #395
057ec     07 53 02 F6 | 	mov	_var18, objptr
057f0     07 4D 02 F1 | 	add	_var15, objptr
057f4     26 4F C2 FA | 	rdbyte	_var16, _var15
057f8     20 4E 06 F5 | 	and	_var16, #32
057fc     04 4E 66 F0 | 	shl	_var16, #4
05800     27 3D 02 FD | 	qmul	_var07, _var16
05804     18 54 62 FD | 	getqx	_var19
05808     2A 4B 02 F6 | 	mov	_var14, _var19
0580c     00 4B 86 F1 | 	sub	_var14, #256
05810     06 4A C6 F0 | 	sar	_var14, #6
05814     18 51 02 F6 | 	mov	_var17, _var01
05818     02 50 66 F0 | 	shl	_var17, #2
0581c     7C 0E 86 F1 | 	sub	objptr, #124
05820     07 57 02 F6 | 	mov	_var20, objptr
05824     07 51 02 F1 | 	add	_var17, objptr
05828     28 4B 62 FC | 	wrlong	_var14, _var17
0582c     0F 0F 86 F1 | 	sub	objptr, #271
05830                 | LR__0231
05830     8B 0F 06 F1 | 	add	objptr, #395
05834     07 31 02 F1 | 	add	_var01, objptr
05838     18 59 C2 FA | 	rdbyte	_var21, _var01
0583c     20 59 02 F1 | 	add	_var21, _var09
05840     3F 58 06 F5 | 	and	_var21, #63
05844                 | ' 
05844                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05844     18 59 42 FC | 	wrbyte	_var21, _var01
05848     8B 0F 86 F1 | 	sub	objptr, #395
0584c                 | _trackerplayer_spin2_doTremolo_ret
0584c     2D 00 64 FD | 	ret
05850                 | 
05850                 | ' 
05850                 | ' 
05850                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05850                 | _trackerplayer_spin2_doVibrato
05850     2E 31 02 F6 | 	mov	_var01, arg01
05854     18 33 02 F6 | 	mov	_var02, _var01
05858     87 0F 06 F1 | 	add	objptr, #391
0585c     07 33 02 F1 | 	add	_var02, objptr
05860     05 00 00 FF 
05864     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05868     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
0586c     19 37 C2 FA | 	rdbyte	_var04, _var02
05870     02 36 66 F0 | 	shl	_var04, #2
05874     1A 37 02 F1 | 	add	_var04, _var03
05878                 | ' 
05878                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05878     1B 39 02 FB | 	rdlong	_var05, _var04
0587c     18 3B 02 F6 | 	mov	_var06, _var01
05880     45 0E 06 F1 | 	add	objptr, #69
05884     07 3B 02 F1 | 	add	_var06, objptr
05888                 | '   depth    := cmd4_memoryY[channel]
05888     1D 3D C2 FA | 	rdbyte	_var07, _var06
0588c     18 3F 02 F6 | 	mov	_var08, _var01
05890     04 0E 06 F1 | 	add	objptr, #4
05894     07 3F 02 F1 | 	add	_var08, objptr
05898                 | '   speed    := cmd4_memoryX[channel]
05898     1F 41 C2 FA | 	rdbyte	_var09, _var08
0589c                 | ' 
0589c                 | '   CASE_FAST vibratoType[channel]
0589c     18 43 02 F6 | 	mov	_var10, _var01
058a0     10 0E 86 F1 | 	sub	objptr, #16
058a4     07 45 02 F6 | 	mov	_var11, objptr
058a8     07 43 02 F1 | 	add	_var10, objptr
058ac     21 47 C2 FA | 	rdbyte	_var12, _var10
058b0     03 46 26 F3 | 	fle	_var12, #3
058b4     23 49 02 F6 | 	mov	_var13, _var12
058b8     05 00 00 FF 
058bc     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
058c0     C0 0F 86 F1 | 	sub	objptr, #448
058c4     30 48 62 FD | 	jmprel	_var13
058c8                 | LR__0232
058c8     0C 00 90 FD | 	jmp	#LR__0233
058cc     30 00 90 FD | 	jmp	#LR__0234
058d0     6C 00 90 FD | 	jmp	#LR__0235
058d4     B4 00 90 FD | 	jmp	#LR__0236
058d8                 | LR__0233
058d8                 | ' 
058d8                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
058d8     1C 3D 02 FD | 	qmul	_var07, _var05
058dc     18 4A 62 FD | 	getqx	_var14
058e0     07 4A C6 F0 | 	sar	_var14, #7
058e4     18 4D 02 F6 | 	mov	_var15, _var01
058e8     02 4C 66 F0 | 	shl	_var15, #2
058ec     EF 0E 06 F1 | 	add	objptr, #239
058f0     07 4D 02 F1 | 	add	_var15, objptr
058f4     26 4B 62 FC | 	wrlong	_var14, _var15
058f8     EF 0E 86 F1 | 	sub	objptr, #239
058fc     8C 00 90 FD | 	jmp	#LR__0236
05900                 | LR__0234
05900                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05900     18 4D 02 F6 | 	mov	_var15, _var01
05904     87 0F 06 F1 | 	add	objptr, #391
05908     07 4D 02 F1 | 	add	_var15, objptr
0590c     26 4F C2 FA | 	rdbyte	_var16, _var15
05910     03 4E 66 F0 | 	shl	_var16, #3
05914     27 3D 02 FD | 	qmul	_var07, _var16
05918     18 4A 62 FD | 	getqx	_var14
0591c     00 4B 86 F1 | 	sub	_var14, #256
05920     07 4A C6 F0 | 	sar	_var14, #7
05924     18 51 02 F6 | 	mov	_var17, _var01
05928     02 50 66 F0 | 	shl	_var17, #2
0592c     98 0E 86 F1 | 	sub	objptr, #152
05930     07 51 02 F1 | 	add	_var17, objptr
05934     28 4B 62 FC | 	wrlong	_var14, _var17
05938     EF 0E 86 F1 | 	sub	objptr, #239
0593c     4C 00 90 FD | 	jmp	#LR__0236
05940                 | LR__0235
05940                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05940     18 4D 02 F6 | 	mov	_var15, _var01
05944     87 0F 06 F1 | 	add	objptr, #391
05948     07 53 02 F6 | 	mov	_var18, objptr
0594c     07 4D 02 F1 | 	add	_var15, objptr
05950     26 4F C2 FA | 	rdbyte	_var16, _var15
05954     20 4E 06 F5 | 	and	_var16, #32
05958     04 4E 66 F0 | 	shl	_var16, #4
0595c     27 3D 02 FD | 	qmul	_var07, _var16
05960     18 54 62 FD | 	getqx	_var19
05964     2A 4B 02 F6 | 	mov	_var14, _var19
05968     00 4B 86 F1 | 	sub	_var14, #256
0596c     07 4A C6 F0 | 	sar	_var14, #7
05970     18 51 02 F6 | 	mov	_var17, _var01
05974     02 50 66 F0 | 	shl	_var17, #2
05978     98 0E 86 F1 | 	sub	objptr, #152
0597c     07 57 02 F6 | 	mov	_var20, objptr
05980     07 51 02 F1 | 	add	_var17, objptr
05984     28 4B 62 FC | 	wrlong	_var14, _var17
05988     EF 0E 86 F1 | 	sub	objptr, #239
0598c                 | LR__0236
0598c     87 0F 06 F1 | 	add	objptr, #391
05990     07 31 02 F1 | 	add	_var01, objptr
05994     18 59 C2 FA | 	rdbyte	_var21, _var01
05998     20 59 02 F1 | 	add	_var21, _var09
0599c     3F 58 06 F5 | 	and	_var21, #63
059a0                 | ' 
059a0                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
059a0     18 59 42 FC | 	wrbyte	_var21, _var01
059a4     87 0F 86 F1 | 	sub	objptr, #391
059a8                 | _trackerplayer_spin2_doVibrato_ret
059a8     2D 00 64 FD | 	ret
059ac                 | 
059ac                 | ' 
059ac                 | ' 
059ac                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
059ac                 | _trackerplayer_spin2_doPortamento
059ac                 | ' 
059ac                 | '   if period == currPeriod[channel]
059ac     2E 31 02 F6 | 	mov	_var01, arg01
059b0     02 30 66 F0 | 	shl	_var01, #2
059b4     DF 0E 06 F1 | 	add	objptr, #223
059b8     07 33 02 F6 | 	mov	_var02, objptr
059bc     07 31 02 F1 | 	add	_var01, objptr
059c0     18 35 02 FB | 	rdlong	_var03, _var01
059c4     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
059c8                 | '     return
059c8     DF 0E 86 F1 | 	sub	objptr, #223
059cc     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
059d0                 | ' 
059d0                 | '   if period > 0
059d0     00 5E 5E F2 | 	cmps	arg02, #0 wcz
059d4     1C 00 90 ED |  if_be	jmp	#LR__0237
059d8     2E 37 02 F6 | 	mov	_var04, arg01
059dc     02 36 66 F0 | 	shl	_var04, #2
059e0     97 0F 06 F1 | 	add	objptr, #407
059e4     07 37 02 F1 | 	add	_var04, objptr
059e8                 | '     portamentoPeriodMemory[channel] := period
059e8     1B 5F 62 FC | 	wrlong	arg02, _var04
059ec                 | '   else
059ec     97 0F 86 F1 | 	sub	objptr, #407
059f0     18 00 90 FD | 	jmp	#LR__0238
059f4                 | LR__0237
059f4     2E 39 02 F6 | 	mov	_var05, arg01
059f8     02 38 66 F0 | 	shl	_var05, #2
059fc     97 0F 06 F1 | 	add	objptr, #407
05a00     07 39 02 F1 | 	add	_var05, objptr
05a04                 | '     period := portamentoPeriodMemory[channel]
05a04     1C 5F 02 FB | 	rdlong	arg02, _var05
05a08     97 0F 86 F1 | 	sub	objptr, #407
05a0c                 | LR__0238
05a0c                 | ' 
05a0c                 | '   if period > currPeriod[channel]
05a0c     2E 31 02 F6 | 	mov	_var01, arg01
05a10     02 30 66 F0 | 	shl	_var01, #2
05a14     DF 0E 06 F1 | 	add	objptr, #223
05a18     07 31 02 F1 | 	add	_var01, objptr
05a1c     18 35 02 FB | 	rdlong	_var03, _var01
05a20     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a24     DF 0E 86 F1 | 	sub	objptr, #223
05a28     50 00 90 ED |  if_be	jmp	#LR__0239
05a2c     2E 3B 02 F6 | 	mov	_var06, arg01
05a30     02 3A 66 F0 | 	shl	_var06, #2
05a34     DF 0E 06 F1 | 	add	objptr, #223
05a38     07 3B 02 F1 | 	add	_var06, objptr
05a3c     2E 3D 02 F6 | 	mov	_var07, arg01
05a40     E9 0E 06 F1 | 	add	objptr, #233
05a44     1D 3F 02 FB | 	rdlong	_var08, _var06
05a48     07 3D 02 F1 | 	add	_var07, objptr
05a4c     1E 33 C2 FA | 	rdbyte	_var02, _var07
05a50     19 3F 02 F1 | 	add	_var08, _var02
05a54                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05a54     1D 3F 62 FC | 	wrlong	_var08, _var06
05a58     2E 41 02 F6 | 	mov	_var09, arg01
05a5c     02 40 66 F0 | 	shl	_var09, #2
05a60     E9 0E 86 F1 | 	sub	objptr, #233
05a64     07 41 02 F1 | 	add	_var09, objptr
05a68     20 43 02 FB | 	rdlong	_var10, _var09
05a6c     2F 43 62 F3 | 	fles	_var10, arg02
05a70                 | '     currPeriod[channel] <#= period
05a70     20 43 62 FC | 	wrlong	_var10, _var09
05a74     DF 0E 86 F1 | 	sub	objptr, #223
05a78     6C 00 90 FD | 	jmp	#LR__0241
05a7c                 | LR__0239
05a7c                 | ' 
05a7c                 | '   elseif period < currPeriod[channel]
05a7c     2E 31 02 F6 | 	mov	_var01, arg01
05a80     02 30 66 F0 | 	shl	_var01, #2
05a84     DF 0E 06 F1 | 	add	objptr, #223
05a88     07 31 02 F1 | 	add	_var01, objptr
05a8c     18 35 02 FB | 	rdlong	_var03, _var01
05a90     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a94     DF 0E 86 F1 | 	sub	objptr, #223
05a98     4C 00 90 3D |  if_ae	jmp	#LR__0240
05a9c     2E 45 02 F6 | 	mov	_var11, arg01
05aa0     02 44 66 F0 | 	shl	_var11, #2
05aa4     DF 0E 06 F1 | 	add	objptr, #223
05aa8     07 45 02 F1 | 	add	_var11, objptr
05aac     2E 47 02 F6 | 	mov	_var12, arg01
05ab0     E9 0E 06 F1 | 	add	objptr, #233
05ab4     22 49 02 FB | 	rdlong	_var13, _var11
05ab8     07 47 02 F1 | 	add	_var12, objptr
05abc     23 33 C2 FA | 	rdbyte	_var02, _var12
05ac0     19 49 82 F1 | 	sub	_var13, _var02
05ac4                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05ac4     22 49 62 FC | 	wrlong	_var13, _var11
05ac8     2E 4B 02 F6 | 	mov	_var14, arg01
05acc     02 4A 66 F0 | 	shl	_var14, #2
05ad0     E9 0E 86 F1 | 	sub	objptr, #233
05ad4     07 4B 02 F1 | 	add	_var14, objptr
05ad8     25 4D 02 FB | 	rdlong	_var15, _var14
05adc     2F 4D 42 F3 | 	fges	_var15, arg02
05ae0                 | '     currPeriod[channel] #>= period
05ae0     25 4D 62 FC | 	wrlong	_var15, _var14
05ae4     DF 0E 86 F1 | 	sub	objptr, #223
05ae8                 | LR__0240
05ae8                 | LR__0241
05ae8                 | ' 
05ae8                 | '   ' Handle glissando if activated
05ae8                 | '   if portaGlissando[channel] > 0
05ae8     2E 31 02 F6 | 	mov	_var01, arg01
05aec     BC 0F 06 F1 | 	add	objptr, #444
05af0     07 31 02 F1 | 	add	_var01, objptr
05af4     18 35 C2 FA | 	rdbyte	_var03, _var01
05af8     00 34 5E F2 | 	cmps	_var03, #0 wcz
05afc     BC 0F 86 F1 | 	sub	objptr, #444
05b00     A0 00 90 ED |  if_be	jmp	#LR__0244
05b04     2E 4F 02 F6 | 	mov	_var16, arg01
05b08     02 4E 66 F0 | 	shl	_var16, #2
05b0c     DF 0E 06 F1 | 	add	objptr, #223
05b10     07 4F 02 F1 | 	add	_var16, objptr
05b14                 | ' 
05b14                 | '     tempPeriod := currPeriod[channel]
05b14     27 51 02 FB | 	rdlong	_var17, _var16
05b18                 | ' 
05b18                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05b18     00 52 06 F6 | 	mov	_var18, #0
05b1c     DF 0E 86 F1 | 	sub	objptr, #223
05b20     40 A5 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
05b24     93 00 A0 FD | 	call	#FCACHE_LOAD_
05b28                 | LR__0242
05b28     06 00 00 FF 
05b2c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05b30     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05b34     2E 55 02 F6 | 	mov	_var19, arg01
05b38     D3 0E 06 F1 | 	add	objptr, #211
05b3c     07 55 02 F1 | 	add	_var19, objptr
05b40     2A 33 C2 FA | 	rdbyte	_var02, _var19
05b44     19 57 02 F6 | 	mov	_var20, _var02
05b48     03 56 66 F0 | 	shl	_var20, #3
05b4c     19 57 02 F1 | 	add	_var20, _var02
05b50     03 56 66 F0 | 	shl	_var20, #3
05b54     2B 35 02 F1 | 	add	_var03, _var20
05b58     29 59 02 F6 | 	mov	_var21, _var18
05b5c     01 58 66 F0 | 	shl	_var21, #1
05b60     1A 59 02 F1 | 	add	_var21, _var03
05b64                 | ' 
05b64                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05b64     2C 5B E2 FA | 	rdword	_var22, _var21
05b68                 | '       if tempPeriod >= periodStep
05b68     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05b6c                 | '         i += 1000
05b6c     06 00 00 FF 
05b70     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05b74     D3 0E 86 F1 | 	sub	objptr, #211
05b78     01 00 00 3F 
05b7c     E8 53 06 31 |  if_ae	add	_var18, ##1000
05b80     01 52 06 F1 | 	add	_var18, #1
05b84     24 52 5E F2 | 	cmps	_var18, #36 wcz
05b88     9C FF 9F CD |  if_b	jmp	#LR__0242
05b8c                 | LR__0243
05b8c     28 5B 82 F1 | 	sub	_var22, _var17
05b90     02 5C 66 F0 | 	shl	arg01, #2
05b94     EF 0E 06 F1 | 	add	objptr, #239
05b98     07 5D 02 F1 | 	add	arg01, objptr
05b9c                 | ' 
05b9c                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05b9c     2E 5B 62 FC | 	wrlong	_var22, arg01
05ba0     EF 0E 86 F1 | 	sub	objptr, #239
05ba4                 | LR__0244
05ba4                 | _trackerplayer_spin2_doPortamento_ret
05ba4     2D 00 64 FD | 	ret
05ba8                 | 
05ba8                 | ' 
05ba8                 | ' 
05ba8                 | ' PRI doVolumeSlide(channel)
05ba8                 | _trackerplayer_spin2_doVolumeSlide
05ba8                 | ' 
05ba8                 | '   if x > 0
05ba8     B7 0F 06 F1 | 	add	objptr, #439
05bac     07 31 C2 FA | 	rdbyte	_var01, objptr
05bb0     B7 0F 86 F1 | 	sub	objptr, #439
05bb4     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bb8     28 00 90 ED |  if_be	jmp	#LR__0245
05bbc     2E 33 02 F6 | 	mov	_var02, arg01
05bc0     02 32 66 F0 | 	shl	_var02, #2
05bc4     FF 0E 06 F1 | 	add	objptr, #255
05bc8     07 33 02 F1 | 	add	_var02, objptr
05bcc     19 35 02 FB | 	rdlong	_var03, _var02
05bd0     B8 0E 06 F1 | 	add	objptr, #184
05bd4     07 37 C2 FA | 	rdbyte	_var04, objptr
05bd8     B7 0F 86 F1 | 	sub	objptr, #439
05bdc     1B 35 02 F1 | 	add	_var03, _var04
05be0                 | '     currVolume[channel] += x
05be0     19 35 62 FC | 	wrlong	_var03, _var02
05be4                 | LR__0245
05be4                 | '   if y > 0
05be4     B8 0F 06 F1 | 	add	objptr, #440
05be8     07 31 C2 FA | 	rdbyte	_var01, objptr
05bec     B8 0F 86 F1 | 	sub	objptr, #440
05bf0     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bf4     24 00 90 ED |  if_be	jmp	#LR__0246
05bf8     02 5C 66 F0 | 	shl	arg01, #2
05bfc     FF 0E 06 F1 | 	add	objptr, #255
05c00     07 5D 02 F1 | 	add	arg01, objptr
05c04     2E 39 02 FB | 	rdlong	_var05, arg01
05c08     B9 0E 06 F1 | 	add	objptr, #185
05c0c     07 37 C2 FA | 	rdbyte	_var04, objptr
05c10     B8 0F 86 F1 | 	sub	objptr, #440
05c14     1B 39 82 F1 | 	sub	_var05, _var04
05c18                 | '     currVolume[channel] -= y
05c18     2E 39 62 FC | 	wrlong	_var05, arg01
05c1c                 | LR__0246
05c1c                 | _trackerplayer_spin2_doVolumeSlide_ret
05c1c     2D 00 64 FD | 	ret
05c20                 | hubexit
05c20     81 00 80 FD | 	jmp	#cogexit
05c24                 | 
05c24                 | __system___setbaud
05c24     14 0A 07 FB | 	rdlong	muldiva_, #20
05c28     2E 0D 03 F6 | 	mov	muldivb_, arg01
05c2c     D0 00 A0 FD | 	call	#divide_
05c30     40 7C 64 FD | 	dirl	#62
05c34     40 7E 64 FD | 	dirl	#63
05c38     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05c3c     10 0C 67 F0 | 	shl	muldivb_, #16
05c40     07 5E 06 F6 | 	mov	arg02, #7
05c44     86 5F 02 F1 | 	add	arg02, muldivb_
05c48     3E F8 0C FC | 	wrpin	#124, #62
05c4c     3E 5E 16 FC | 	wxpin	arg02, #62
05c50     3F 7C 0C FC | 	wrpin	#62, #63
05c54     14 5E 06 F1 | 	add	arg02, #20
05c58     3F 5E 16 FC | 	wxpin	arg02, #63
05c5c     41 7C 64 FD | 	dirh	#62
05c60     41 7E 64 FD | 	dirh	#63
05c64                 | __system___setbaud_ret
05c64     2D 00 64 FD | 	ret
05c68                 | 
05c68                 | __system___txraw
05c68     02 5A 05 F6 | 	mov	COUNT_, #2
05c6c     B0 00 A0 FD | 	call	#pushregs_
05c70     2E 6B 02 F6 | 	mov	local01, arg01
05c74     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c78     0C 00 90 5D |  if_ne	jmp	#LR__0247
05c7c     42 0F 00 FF 
05c80     80 5C 06 F6 | 	mov	arg01, ##2000000
05c84     9C FF BF FD | 	call	#__system___setbaud
05c88                 | LR__0247
05c88     3E 6A 26 FC | 	wypin	local01, #62
05c8c     1F 02 64 FD | 	waitx	#1
05c90     74 A3 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
05c94     93 00 A0 FD | 	call	#FCACHE_LOAD_
05c98                 | LR__0248
05c98     40 7C 74 FD | 	testp	#62 wc
05c9c     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
05ca0                 | LR__0249
05ca0     01 2A 06 F6 | 	mov	result1, #1
05ca4     AF F0 03 F6 | 	mov	ptra, fp
05ca8     BF 00 A0 FD | 	call	#popregs_
05cac                 | __system___txraw_ret
05cac     2D 00 64 FD | 	ret
05cb0                 | 
05cb0                 | __system___rxraw
05cb0     0D 5A 05 F6 | 	mov	COUNT_, #13
05cb4     B0 00 A0 FD | 	call	#pushregs_
05cb8     2E 6B 02 F6 | 	mov	local01, arg01
05cbc     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05cc0     0C 00 90 5D |  if_ne	jmp	#LR__0250
05cc4     42 0F 00 FF 
05cc8     80 5C 06 F6 | 	mov	arg01, ##2000000
05ccc     54 FF BF FD | 	call	#__system___setbaud
05cd0                 | LR__0250
05cd0     00 6A 0E F2 | 	cmp	local01, #0 wz
05cd4     18 00 90 AD |  if_e	jmp	#LR__0251
05cd8     14 6E 06 FB | 	rdlong	local03, #20
05cdc     0A 6E 46 F0 | 	shr	local03, #10
05ce0     37 6B 02 FD | 	qmul	local01, local03
05ce4     18 70 62 FD | 	getqx	local04
05ce8     1A 72 62 FD | 	getct	local05
05cec     38 73 02 F1 | 	add	local05, local04
05cf0                 | LR__0251
05cf0     01 74 66 F6 | 	neg	local06, #1
05cf4     00 76 06 F6 | 	mov	local07, #0
05cf8     04 14 06 F1 | 	add	ptr___system__dat__, #4
05cfc     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05d00     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d04                 | LR__0252
05d04     08 78 16 F4 | 	testb	local08, #8 wc
05d08     09 78 76 F4 | 	testbn	local08, #9 andc
05d0c     0A 78 46 F0 | 	shr	local08, #10
05d10     01 76 06 C6 |  if_b	mov	local07, #1
05d14     10 00 90 CD |  if_b	jmp	#LR__0253
05d18     40 7E 6C FD | 	testp	#63 wz
05d1c     01 76 06 A6 |  if_e	mov	local07, #1
05d20     3F 78 8E AA |  if_e	rdpin	local08, #63
05d24     04 78 46 A0 |  if_e	shr	local08, #4
05d28                 | LR__0253
05d28     00 6C 06 F6 | 	mov	local02, #0
05d2c     00 76 0E F2 | 	cmp	local07, #0 wz
05d30     01 6C 66 56 |  if_ne	neg	local02, #1
05d34     00 7A 06 F6 | 	mov	local09, #0
05d38     00 7C 06 F6 | 	mov	local10, #0
05d3c     00 6A 0E F2 | 	cmp	local01, #0 wz
05d40     01 7C 66 56 |  if_ne	neg	local10, #1
05d44     00 7E 06 F6 | 	mov	local11, #0
05d48     00 80 06 F6 | 	mov	local12, #0
05d4c     1A 82 62 FD | 	getct	local13
05d50     39 83 82 F1 | 	sub	local13, local05
05d54     00 82 5E F2 | 	cmps	local13, #0 wcz
05d58     01 80 66 C6 |  if_b	neg	local12, #1
05d5c     00 80 0E F2 | 	cmp	local12, #0 wz
05d60     01 7E 66 56 |  if_ne	neg	local11, #1
05d64     3F 7D CA F7 | 	test	local10, local11 wz
05d68     01 7A 66 56 |  if_ne	neg	local09, #1
05d6c     3D 6D 4A F5 | 	or	local02, local09 wz
05d70     90 FF 9F AD |  if_e	jmp	#LR__0252
05d74     00 76 0E F2 | 	cmp	local07, #0 wz
05d78     3C 75 02 56 |  if_ne	mov	local06, local08
05d7c     FF 74 06 55 |  if_ne	and	local06, #255
05d80     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d84     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05d88     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d8c     3A 2B 02 F6 | 	mov	result1, local06
05d90     AF F0 03 F6 | 	mov	ptra, fp
05d94     BF 00 A0 FD | 	call	#popregs_
05d98                 | __system___rxraw_ret
05d98     2D 00 64 FD | 	ret
05d9c                 | 
05d9c                 | __system____builtin_memmove
05d9c     2E 31 02 F6 | 	mov	_var01, arg01
05da0     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05da4     50 00 90 3D |  if_ae	jmp	#LR__0261
05da8     74 A2 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
05dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
05db0                 | LR__0254
05db0     03 60 5E F2 | 	cmps	arg03, #3 wcz
05db4     18 00 90 ED |  if_be	jmp	#LR__0256
05db8     2F 33 02 FB | 	rdlong	_var02, arg02
05dbc     2E 33 62 FC | 	wrlong	_var02, arg01
05dc0     04 5C 06 F1 | 	add	arg01, #4
05dc4     04 5E 06 F1 | 	add	arg02, #4
05dc8     04 60 86 F1 | 	sub	arg03, #4
05dcc     E0 FF 9F FD | 	jmp	#LR__0254
05dd0                 | LR__0255
05dd0                 | LR__0256
05dd0     30 35 0A F6 | 	mov	_var03, arg03 wz
05dd4     4C 00 90 AD |  if_e	jmp	#LR__0267
05dd8     38 A2 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
05ddc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05de0                 | LR__0257
05de0     1A 09 D8 FC | 	rep	@LR__0260, _var03
05de4                 | LR__0258
05de4     2F 33 C2 FA | 	rdbyte	_var02, arg02
05de8     2E 33 42 FC | 	wrbyte	_var02, arg01
05dec     01 5C 06 F1 | 	add	arg01, #1
05df0     01 5E 06 F1 | 	add	arg02, #1
05df4                 | LR__0259
05df4                 | LR__0260
05df4     2C 00 90 FD | 	jmp	#LR__0267
05df8                 | LR__0261
05df8     30 5D 02 F1 | 	add	arg01, arg03
05dfc     30 5F 02 F1 | 	add	arg02, arg03
05e00     30 37 0A F6 | 	mov	_var04, arg03 wz
05e04     1C 00 90 AD |  if_e	jmp	#LR__0266
05e08     08 A2 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05e0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e10                 | LR__0262
05e10     1B 09 D8 FC | 	rep	@LR__0265, _var04
05e14                 | LR__0263
05e14     01 5C 86 F1 | 	sub	arg01, #1
05e18     01 5E 86 F1 | 	sub	arg02, #1
05e1c     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e20     2E 33 42 FC | 	wrbyte	_var02, arg01
05e24                 | LR__0264
05e24                 | LR__0265
05e24                 | LR__0266
05e24                 | LR__0267
05e24     18 2B 02 F6 | 	mov	result1, _var01
05e28                 | __system____builtin_memmove_ret
05e28     2D 00 64 FD | 	ret
05e2c                 | 
05e2c                 | __system__longmove
05e2c     2E 31 02 F6 | 	mov	_var01, arg01
05e30     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e34     28 00 90 3D |  if_ae	jmp	#LR__0272
05e38     30 33 0A F6 | 	mov	_var02, arg03 wz
05e3c     54 00 90 AD |  if_e	jmp	#LR__0278
05e40     D0 A1 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
05e44     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e48                 | LR__0268
05e48     19 09 D8 FC | 	rep	@LR__0271, _var02
05e4c                 | LR__0269
05e4c     2F 35 02 FB | 	rdlong	_var03, arg02
05e50     2E 35 62 FC | 	wrlong	_var03, arg01
05e54     04 5C 06 F1 | 	add	arg01, #4
05e58     04 5E 06 F1 | 	add	arg02, #4
05e5c                 | LR__0270
05e5c                 | LR__0271
05e5c     34 00 90 FD | 	jmp	#LR__0278
05e60                 | LR__0272
05e60     30 37 02 F6 | 	mov	_var04, arg03
05e64     02 36 66 F0 | 	shl	_var04, #2
05e68     1B 5D 02 F1 | 	add	arg01, _var04
05e6c     1B 5F 02 F1 | 	add	arg02, _var04
05e70     30 39 0A F6 | 	mov	_var05, arg03 wz
05e74     1C 00 90 AD |  if_e	jmp	#LR__0277
05e78     98 A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05e7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e80                 | LR__0273
05e80     1C 09 D8 FC | 	rep	@LR__0276, _var05
05e84                 | LR__0274
05e84     04 5C 86 F1 | 	sub	arg01, #4
05e88     04 5E 86 F1 | 	sub	arg02, #4
05e8c     2F 35 02 FB | 	rdlong	_var03, arg02
05e90     2E 35 62 FC | 	wrlong	_var03, arg01
05e94                 | LR__0275
05e94                 | LR__0276
05e94                 | LR__0277
05e94                 | LR__0278
05e94     18 2B 02 F6 | 	mov	result1, _var01
05e98                 | __system__longmove_ret
05e98     2D 00 64 FD | 	ret
05e9c                 | 
05e9c                 | __system____topofstack
05e9c     00 5A 05 F6 | 	mov	COUNT_, #0
05ea0     B0 00 A0 FD | 	call	#pushregs_
05ea4     0C F0 07 F1 | 	add	ptra, #12
05ea8     04 5E 05 F1 | 	add	fp, #4
05eac     AF 5C 62 FC | 	wrlong	arg01, fp
05eb0     AF 2A 02 F6 | 	mov	result1, fp
05eb4     04 5E 85 F1 | 	sub	fp, #4
05eb8     AF F0 03 F6 | 	mov	ptra, fp
05ebc     BF 00 A0 FD | 	call	#popregs_
05ec0                 | __system____topofstack_ret
05ec0     2D 00 64 FD | 	ret
05ec4                 | 
05ec4                 | __system___make_methodptr
05ec4     04 5A 05 F6 | 	mov	COUNT_, #4
05ec8     B0 00 A0 FD | 	call	#pushregs_
05ecc     2E 6B 02 F6 | 	mov	local01, arg01
05ed0     2F 6D 02 F6 | 	mov	local02, arg02
05ed4     08 5C 06 F6 | 	mov	arg01, #8
05ed8     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05edc     15 6F 0A F6 | 	mov	local03, result1 wz
05ee0     10 00 90 AD |  if_e	jmp	#LR__0279
05ee4     37 6B 62 FC | 	wrlong	local01, local03
05ee8     37 71 02 F6 | 	mov	local04, local03
05eec     04 70 06 F1 | 	add	local04, #4
05ef0     38 6D 62 FC | 	wrlong	local02, local04
05ef4                 | LR__0279
05ef4     37 2B 02 F6 | 	mov	result1, local03
05ef8     AF F0 03 F6 | 	mov	ptra, fp
05efc     BF 00 A0 FD | 	call	#popregs_
05f00                 | __system___make_methodptr_ret
05f00     2D 00 64 FD | 	ret
05f04                 | 
05f04                 | __system___lockmem
05f04     02 5A 05 F6 | 	mov	COUNT_, #2
05f08     B0 00 A0 FD | 	call	#pushregs_
05f0c     01 2A 62 FD | 	cogid	result1
05f10     15 6B 02 F6 | 	mov	local01, result1
05f14     00 6B 06 F1 | 	add	local01, #256
05f18                 | LR__0280
05f18     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05f1c     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05f20     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f24     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f28     35 6D 0A F2 | 	cmp	local02, local01 wz
05f2c     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
05f30     AF F0 03 F6 | 	mov	ptra, fp
05f34     BF 00 A0 FD | 	call	#popregs_
05f38                 | __system___lockmem_ret
05f38     2D 00 64 FD | 	ret
05f3c                 | 
05f3c                 | __system___string_concat
05f3c     07 5A 05 F6 | 	mov	COUNT_, #7
05f40     B0 00 A0 FD | 	call	#pushregs_
05f44     2E 6B 02 F6 | 	mov	local01, arg01
05f48     2F 6D 02 F6 | 	mov	local02, arg02
05f4c     35 5D 02 F6 | 	mov	arg01, local01
05f50     00 6E 06 F6 | 	mov	local03, #0
05f54     B8 A0 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
05f58     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f5c                 | LR__0281
05f5c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f60     01 6E 06 51 |  if_ne	add	local03, #1
05f64     01 5C 06 51 |  if_ne	add	arg01, #1
05f68     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
05f6c                 | LR__0282
05f6c     37 73 02 F6 | 	mov	local05, local03
05f70     36 5D 02 F6 | 	mov	arg01, local02
05f74     00 6E 06 F6 | 	mov	local03, #0
05f78     94 A0 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
05f7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f80                 | LR__0283
05f80     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f84     01 6E 06 51 |  if_ne	add	local03, #1
05f88     01 5C 06 51 |  if_ne	add	arg01, #1
05f8c     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
05f90                 | LR__0284
05f90     37 2B 02 F6 | 	mov	result1, local03
05f94     15 75 02 F6 | 	mov	local06, result1
05f98     39 5D 02 F6 | 	mov	arg01, local05
05f9c     3A 5D 02 F1 | 	add	arg01, local06
05fa0     01 5C 06 F1 | 	add	arg01, #1
05fa4     90 0B B0 FD | 	call	#__system___gc_alloc_managed
05fa8     15 77 0A F6 | 	mov	local07, result1 wz
05fac     28 00 90 AD |  if_e	jmp	#LR__0285
05fb0     3B 5D 02 F6 | 	mov	arg01, local07
05fb4     35 5F 02 F6 | 	mov	arg02, local01
05fb8     39 61 02 F6 | 	mov	arg03, local05
05fbc     DC FD BF FD | 	call	#__system____builtin_memmove
05fc0     3B 5D 02 F6 | 	mov	arg01, local07
05fc4     39 5D 02 F1 | 	add	arg01, local05
05fc8     01 74 06 F1 | 	add	local06, #1
05fcc     36 5F 02 F6 | 	mov	arg02, local02
05fd0     3A 61 02 F6 | 	mov	arg03, local06
05fd4     C4 FD BF FD | 	call	#__system____builtin_memmove
05fd8                 | LR__0285
05fd8     3B 2B 02 F6 | 	mov	result1, local07
05fdc     AF F0 03 F6 | 	mov	ptra, fp
05fe0     BF 00 A0 FD | 	call	#popregs_
05fe4                 | __system___string_concat_ret
05fe4     2D 00 64 FD | 	ret
05fe8                 | 
05fe8                 | __system___tx
05fe8     02 5A 05 F6 | 	mov	COUNT_, #2
05fec     B0 00 A0 FD | 	call	#pushregs_
05ff0     2E 6B 02 F6 | 	mov	local01, arg01
05ff4     0A 6A 0E F2 | 	cmp	local01, #10 wz
05ff8     20 00 90 5D |  if_ne	jmp	#LR__0286
05ffc     08 14 06 F1 | 	add	ptr___system__dat__, #8
06000     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06004     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06008     02 6C CE F7 | 	test	local02, #2 wz
0600c     0C 00 90 AD |  if_e	jmp	#LR__0286
06010     0D 6C 06 F6 | 	mov	local02, #13
06014     0D 5C 06 F6 | 	mov	arg01, #13
06018     4C FC BF FD | 	call	#__system___txraw
0601c                 | LR__0286
0601c     35 5D 02 F6 | 	mov	arg01, local01
06020     44 FC BF FD | 	call	#__system___txraw
06024     AF F0 03 F6 | 	mov	ptra, fp
06028     BF 00 A0 FD | 	call	#popregs_
0602c                 | __system___tx_ret
0602c     2D 00 64 FD | 	ret
06030                 | 
06030                 | __system___rx
06030     02 5A 05 F6 | 	mov	COUNT_, #2
06034     B0 00 A0 FD | 	call	#pushregs_
06038                 | LR__0287
06038     00 5C 06 F6 | 	mov	arg01, #0
0603c     70 FC BF FD | 	call	#__system___rxraw
06040     15 6B 02 F6 | 	mov	local01, result1
06044     FF FF 7F FF 
06048     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
0604c     E8 FF 9F AD |  if_e	jmp	#LR__0287
06050     0D 6A 0E F2 | 	cmp	local01, #13 wz
06054     14 00 90 5D |  if_ne	jmp	#LR__0288
06058     08 14 06 F1 | 	add	ptr___system__dat__, #8
0605c     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06060     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06064     02 6C CE F7 | 	test	local02, #2 wz
06068     0A 6A 06 56 |  if_ne	mov	local01, #10
0606c                 | LR__0288
0606c     08 14 06 F1 | 	add	ptr___system__dat__, #8
06070     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06074     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06078     01 6C CE F7 | 	test	local02, #1 wz
0607c     1C 00 90 AD |  if_e	jmp	#LR__0291
06080     7F 6A 0E F2 | 	cmp	local01, #127 wz
06084     0C 00 90 5D |  if_ne	jmp	#LR__0289
06088     08 5C 06 F6 | 	mov	arg01, #8
0608c     58 FF BF FD | 	call	#__system___tx
06090     08 00 90 FD | 	jmp	#LR__0290
06094                 | LR__0289
06094     35 5D 02 F6 | 	mov	arg01, local01
06098     4C FF BF FD | 	call	#__system___tx
0609c                 | LR__0290
0609c                 | LR__0291
0609c     35 2B 02 F6 | 	mov	result1, local01
060a0     AF F0 03 F6 | 	mov	ptra, fp
060a4     BF 00 A0 FD | 	call	#popregs_
060a8                 | __system___rx_ret
060a8     2D 00 64 FD | 	ret
060ac                 | 
060ac                 | __system___pinread
060ac     20 5C CE F7 | 	test	arg01, #32 wz
060b0     FF 31 02 56 |  if_ne	mov	_var01, inb
060b4     FE 31 02 A6 |  if_e	mov	_var01, ina
060b8     18 2B 02 F6 | 	mov	result1, _var01
060bc     2E 2B 42 F0 | 	shr	result1, arg01
060c0     06 5C 46 F0 | 	shr	arg01, #6
060c4     2E 2B 42 F7 | 	zerox	result1, arg01
060c8                 | __system___pinread_ret
060c8     2D 00 64 FD | 	ret
060cc                 | 
060cc                 | __system___waitms
060cc     03 5A 05 F6 | 	mov	COUNT_, #3
060d0     B0 00 A0 FD | 	call	#pushregs_
060d4     2E 6B 02 F6 | 	mov	local01, arg01
060d8     14 6C 06 FB | 	rdlong	local02, #20
060dc     38 9F 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
060e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
060e4                 | LR__0292
060e4     01 00 00 FF 
060e8     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
060ec     1F 6C 62 1D |  if_a	waitx	local02
060f0     01 00 00 1F 
060f4     E8 6B 86 11 |  if_a	sub	local01, ##1000
060f8     E8 FF 9F 1D |  if_a	jmp	#LR__0292
060fc                 | LR__0293
060fc     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06100     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06104     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06108     20 00 90 5D |  if_ne	jmp	#LR__0294
0610c     36 0B 03 F6 | 	mov	muldiva_, local02
06110     01 00 00 FF 
06114     E8 0D 07 F6 | 	mov	muldivb_, ##1000
06118     CC 00 A0 FD | 	call	#unsdivide_
0611c     86 6F 02 F6 | 	mov	local03, muldivb_
06120     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06124     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06128     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
0612c                 | LR__0294
0612c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06130     37 6B 02 1D |  if_a	qmul	local01, local03
06134     18 5C 62 1D |  if_a	getqx	arg01
06138     1F 5C 62 1D |  if_a	waitx	arg01
0613c     AF F0 03 F6 | 	mov	ptra, fp
06140     BF 00 A0 FD | 	call	#popregs_
06144                 | __system___waitms_ret
06144     2D 00 64 FD | 	ret
06148                 | 
06148                 | __system___waitus
06148     02 5A 05 F6 | 	mov	COUNT_, #2
0614c     B0 00 A0 FD | 	call	#pushregs_
06150     2E 6B 02 F6 | 	mov	local01, arg01
06154     10 14 06 F1 | 	add	ptr___system__dat__, #16
06158     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0615c     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06160     20 00 90 5D |  if_ne	jmp	#LR__0295
06164     14 0A 07 FB | 	rdlong	muldiva_, #20
06168     A1 07 00 FF 
0616c     40 0C 07 F6 | 	mov	muldivb_, ##1000000
06170     CC 00 A0 FD | 	call	#unsdivide_
06174     86 6D 02 F6 | 	mov	local02, muldivb_
06178     10 14 06 F1 | 	add	ptr___system__dat__, #16
0617c     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06180     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06184                 | LR__0295
06184     36 6B 02 FD | 	qmul	local01, local02
06188     18 5C 62 FD | 	getqx	arg01
0618c     1F 5C 62 FD | 	waitx	arg01
06190     AF F0 03 F6 | 	mov	ptra, fp
06194     BF 00 A0 FD | 	call	#popregs_
06198                 | __system___waitus_ret
06198     2D 00 64 FD | 	ret
0619c                 | 
0619c                 | __system___basic_open
0619c     05 5A 05 F6 | 	mov	COUNT_, #5
061a0     B0 00 A0 FD | 	call	#pushregs_
061a4     2F 6B 02 F6 | 	mov	local01, arg02
061a8     30 6D 02 F6 | 	mov	local02, arg03
061ac     31 6F 02 F6 | 	mov	local03, arg04
061b0     88 11 B0 FD | 	call	#__system____getftab
061b4     15 71 0A F6 | 	mov	local04, result1 wz
061b8     18 00 90 5D |  if_ne	jmp	#LR__0296
061bc     03 5D 02 F6 | 	mov	arg01, abortchain
061c0     0C 5E 06 F6 | 	mov	arg02, #12
061c4     01 60 06 F6 | 	mov	arg03, #1
061c8     F0 00 A0 FD | 	call	#__longjmp
061cc     01 2A 66 F6 | 	neg	result1, #1
061d0     70 00 90 FD | 	jmp	#LR__0300
061d4                 | LR__0296
061d4     00 6A 0E F2 | 	cmp	local01, #0 wz
061d8     48 00 90 AD |  if_e	jmp	#LR__0298
061dc     04 5C 06 F6 | 	mov	arg01, #4
061e0     54 09 B0 FD | 	call	#__system___gc_alloc_managed
061e4     15 73 0A F6 | 	mov	local05, result1 wz
061e8     18 00 90 5D |  if_ne	jmp	#LR__0297
061ec     03 5D 02 F6 | 	mov	arg01, abortchain
061f0     07 5E 06 F6 | 	mov	arg02, #7
061f4     01 60 06 F6 | 	mov	arg03, #1
061f8     F0 00 A0 FD | 	call	#__longjmp
061fc     01 2A 66 F6 | 	neg	result1, #1
06200     40 00 90 FD | 	jmp	#LR__0300
06204                 | LR__0297
06204     39 6B 62 FC | 	wrlong	local01, local05
06208     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
0620c     39 5D 02 F6 | 	mov	arg01, local05
06210     B0 FC BF FD | 	call	#__system___make_methodptr
06214     18 70 06 F1 | 	add	local04, #24
06218     38 2B 62 FC | 	wrlong	result1, local04
0621c     18 70 86 F1 | 	sub	local04, #24
06220     0C 00 90 FD | 	jmp	#LR__0299
06224                 | LR__0298
06224     18 70 06 F1 | 	add	local04, #24
06228     38 6B 62 FC | 	wrlong	local01, local04
0622c     18 70 86 F1 | 	sub	local04, #24
06230                 | LR__0299
06230     1C 70 06 F1 | 	add	local04, #28
06234     38 6D 62 FC | 	wrlong	local02, local04
06238     04 70 06 F1 | 	add	local04, #4
0623c     38 6F 62 FC | 	wrlong	local03, local04
06240     00 2A 06 F6 | 	mov	result1, #0
06244                 | LR__0300
06244     AF F0 03 F6 | 	mov	ptra, fp
06248     BF 00 A0 FD | 	call	#popregs_
0624c                 | __system___basic_open_ret
0624c     2D 00 64 FD | 	ret
06250                 | 
06250                 | __system___basic_print_char
06250     05 5A 05 F6 | 	mov	COUNT_, #5
06254     B0 00 A0 FD | 	call	#pushregs_
06258     2F 6B 02 F6 | 	mov	local01, arg02
0625c     A0 12 B0 FD | 	call	#__system___gettxfunc
06260     15 6D 0A F6 | 	mov	local02, result1 wz
06264     00 2A 06 A6 |  if_e	mov	result1, #0
06268     24 00 90 AD |  if_e	jmp	#LR__0301
0626c     36 6F 02 FB | 	rdlong	local03, local02
06270     04 6C 06 F1 | 	add	local02, #4
06274     36 71 02 FB | 	rdlong	local04, local02
06278     35 5D 02 F6 | 	mov	arg01, local01
0627c     07 73 02 F6 | 	mov	local05, objptr
06280     37 0F 02 F6 | 	mov	objptr, local03
06284     2D 70 62 FD | 	call	local04
06288     39 0F 02 F6 | 	mov	objptr, local05
0628c     01 2A 06 F6 | 	mov	result1, #1
06290                 | LR__0301
06290     AF F0 03 F6 | 	mov	ptra, fp
06294     BF 00 A0 FD | 	call	#popregs_
06298                 | __system___basic_print_char_ret
06298     2D 00 64 FD | 	ret
0629c                 | 
0629c                 | __system___basic_print_string
0629c     03 5A 05 F6 | 	mov	COUNT_, #3
062a0     B0 00 A0 FD | 	call	#pushregs_
062a4     2F 6B 02 F6 | 	mov	local01, arg02
062a8     30 6D 02 F6 | 	mov	local02, arg03
062ac     50 12 B0 FD | 	call	#__system___gettxfunc
062b0     15 6F 0A F6 | 	mov	local03, result1 wz
062b4     00 2A 06 A6 |  if_e	mov	result1, #0
062b8     1C 00 90 AD |  if_e	jmp	#LR__0302
062bc     00 6A 0E F2 | 	cmp	local01, #0 wz
062c0     00 2A 06 A6 |  if_e	mov	result1, #0
062c4     10 00 90 AD |  if_e	jmp	#LR__0302
062c8     37 5D 02 F6 | 	mov	arg01, local03
062cc     36 5F 02 F6 | 	mov	arg02, local02
062d0     35 61 02 F6 | 	mov	arg03, local01
062d4     B0 00 B0 FD | 	call	#__system___fmtstr
062d8                 | LR__0302
062d8     AF F0 03 F6 | 	mov	ptra, fp
062dc     BF 00 A0 FD | 	call	#popregs_
062e0                 | __system___basic_print_string_ret
062e0     2D 00 64 FD | 	ret
062e4                 | 
062e4                 | __system___basic_print_integer
062e4     04 5A 05 F6 | 	mov	COUNT_, #4
062e8     B0 00 A0 FD | 	call	#pushregs_
062ec     2F 6B 02 F6 | 	mov	local01, arg02
062f0     30 6D 02 F6 | 	mov	local02, arg03
062f4     31 6F 02 F6 | 	mov	local03, arg04
062f8     04 12 B0 FD | 	call	#__system___gettxfunc
062fc     15 71 0A F6 | 	mov	local04, result1 wz
06300     00 2A 06 A6 |  if_e	mov	result1, #0
06304     14 00 90 AD |  if_e	jmp	#LR__0303
06308     38 5D 02 F6 | 	mov	arg01, local04
0630c     36 5F 02 F6 | 	mov	arg02, local02
06310     35 61 02 F6 | 	mov	arg03, local01
06314     37 63 02 F6 | 	mov	arg04, local03
06318     60 01 B0 FD | 	call	#__system___fmtnum
0631c                 | LR__0303
0631c     AF F0 03 F6 | 	mov	ptra, fp
06320     BF 00 A0 FD | 	call	#popregs_
06324                 | __system___basic_print_integer_ret
06324     2D 00 64 FD | 	ret
06328                 | 
06328                 | __system___fmtchar
06328     00 5A 05 F6 | 	mov	COUNT_, #0
0632c     B0 00 A0 FD | 	call	#pushregs_
06330     18 F0 07 F1 | 	add	ptra, #24
06334     04 5E 05 F1 | 	add	fp, #4
06338     AF 5C 62 FC | 	wrlong	arg01, fp
0633c     04 5E 05 F1 | 	add	fp, #4
06340     AF 5E 62 FC | 	wrlong	arg02, fp
06344     04 5E 05 F1 | 	add	fp, #4
06348     AF 60 62 FC | 	wrlong	arg03, fp
0634c     04 5E 05 F1 | 	add	fp, #4
06350     AF 60 42 FC | 	wrbyte	arg03, fp
06354     01 5E 05 F1 | 	add	fp, #1
06358     AF 00 48 FC | 	wrbyte	#0, fp
0635c     01 5E 85 F1 | 	sub	fp, #1
06360     AF 60 02 F6 | 	mov	arg03, fp
06364     0C 5E 85 F1 | 	sub	fp, #12
06368     AF 5C 02 FB | 	rdlong	arg01, fp
0636c     04 5E 05 F1 | 	add	fp, #4
06370     AF 5E 02 FB | 	rdlong	arg02, fp
06374     08 5E 85 F1 | 	sub	fp, #8
06378     0C 00 B0 FD | 	call	#__system___fmtstr
0637c     AF F0 03 F6 | 	mov	ptra, fp
06380     BF 00 A0 FD | 	call	#popregs_
06384                 | __system___fmtchar_ret
06384     2D 00 64 FD | 	ret
06388                 | 
06388                 | __system___fmtstr
06388     0E 5A 05 F6 | 	mov	COUNT_, #14
0638c     B0 00 A0 FD | 	call	#pushregs_
06390     2E 6B 02 F6 | 	mov	local01, arg01
06394     2F 6D 02 F6 | 	mov	local02, arg02
06398     30 6F 02 F6 | 	mov	local03, arg03
0639c     36 71 02 F6 | 	mov	local04, local02
063a0     FF 70 06 F5 | 	and	local04, #255
063a4     37 5D 02 F6 | 	mov	arg01, local03
063a8     00 72 06 F6 | 	mov	local05, #0
063ac     60 9C 9F FE | 	loc	pa,	#(@LR__0305-@LR__0304)
063b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
063b4                 | LR__0304
063b4     2E 75 CA FA | 	rdbyte	local06, arg01 wz
063b8     01 72 06 51 |  if_ne	add	local05, #1
063bc     01 5C 06 51 |  if_ne	add	arg01, #1
063c0     F0 FF 9F 5D |  if_ne	jmp	#LR__0304
063c4                 | LR__0305
063c4     39 2B 02 F6 | 	mov	result1, local05
063c8     15 77 02 F6 | 	mov	local07, result1
063cc     00 70 0E F2 | 	cmp	local04, #0 wz
063d0     04 00 90 AD |  if_e	jmp	#LR__0306
063d4     38 77 7A F3 | 	fles	local07, local04 wcz
063d8                 | LR__0306
063d8     35 5D 02 F6 | 	mov	arg01, local01
063dc     36 5F 02 F6 | 	mov	arg02, local02
063e0     3B 61 02 F6 | 	mov	arg03, local07
063e4     02 62 06 F6 | 	mov	arg04, #2
063e8     C8 0F B0 FD | 	call	#__system___fmtpad
063ec     15 79 02 F6 | 	mov	local08, result1
063f0     00 78 5E F2 | 	cmps	local08, #0 wcz
063f4     3C 2B 02 C6 |  if_b	mov	result1, local08
063f8     74 00 90 CD |  if_b	jmp	#LR__0309
063fc     00 76 5E F2 | 	cmps	local07, #0 wcz
06400     44 00 90 ED |  if_be	jmp	#LR__0308
06404     3B 7B 02 F6 | 	mov	local09, local07
06408                 | LR__0307
06408     35 7D 02 F6 | 	mov	local10, local01
0640c     3E 7F 02 FB | 	rdlong	local11, local10
06410     04 7C 06 F1 | 	add	local10, #4
06414     3E 81 02 FB | 	rdlong	local12, local10
06418     37 5D C2 FA | 	rdbyte	arg01, local03
0641c     07 83 02 F6 | 	mov	local13, objptr
06420     3F 0F 02 F6 | 	mov	objptr, local11
06424     01 6E 06 F1 | 	add	local03, #1
06428     2D 80 62 FD | 	call	local12
0642c     41 0F 02 F6 | 	mov	objptr, local13
06430     15 85 02 F6 | 	mov	local14, result1
06434     00 84 5E F2 | 	cmps	local14, #0 wcz
06438     42 2B 02 C6 |  if_b	mov	result1, local14
0643c     30 00 90 CD |  if_b	jmp	#LR__0309
06440     42 79 02 F1 | 	add	local08, local14
06444     F0 7B 6E FB | 	djnz	local09, #LR__0307
06448                 | LR__0308
06448     35 5D 02 F6 | 	mov	arg01, local01
0644c     36 5F 02 F6 | 	mov	arg02, local02
06450     3B 61 02 F6 | 	mov	arg03, local07
06454     01 62 06 F6 | 	mov	arg04, #1
06458     58 0F B0 FD | 	call	#__system___fmtpad
0645c     15 85 02 F6 | 	mov	local14, result1
06460     00 84 5E F2 | 	cmps	local14, #0 wcz
06464     42 2B 02 C6 |  if_b	mov	result1, local14
06468     42 79 02 31 |  if_ae	add	local08, local14
0646c     3C 2B 02 36 |  if_ae	mov	result1, local08
06470                 | LR__0309
06470     AF F0 03 F6 | 	mov	ptra, fp
06474     BF 00 A0 FD | 	call	#popregs_
06478                 | __system___fmtstr_ret
06478     2D 00 64 FD | 	ret
0647c                 | 
0647c                 | __system___fmtnum
0647c     07 5A 05 F6 | 	mov	COUNT_, #7
06480     B0 00 A0 FD | 	call	#pushregs_
06484     78 F0 07 F1 | 	add	ptra, #120
06488     04 5E 05 F1 | 	add	fp, #4
0648c     AF 5C 62 FC | 	wrlong	arg01, fp
06490     04 5E 05 F1 | 	add	fp, #4
06494     AF 5E 62 FC | 	wrlong	arg02, fp
06498     04 5E 05 F1 | 	add	fp, #4
0649c     AF 60 62 FC | 	wrlong	arg03, fp
064a0     04 5E 05 F1 | 	add	fp, #4
064a4     AF 62 62 FC | 	wrlong	arg04, fp
064a8     04 5E 05 F1 | 	add	fp, #4
064ac     AF 6A 02 F6 | 	mov	local01, fp
064b0     44 5E 05 F1 | 	add	fp, #68
064b4     AF 6A 62 FC | 	wrlong	local01, fp
064b8     04 5E 05 F1 | 	add	fp, #4
064bc     AF 00 68 FC | 	wrlong	#0, fp
064c0     54 5E 85 F1 | 	sub	fp, #84
064c4     AF 6A 02 FB | 	rdlong	local01, fp
064c8     10 6A 46 F0 | 	shr	local01, #16
064cc     3F 6A 06 F5 | 	and	local01, #63
064d0     58 5E 05 F1 | 	add	fp, #88
064d4     AF 6A 62 FC | 	wrlong	local01, fp
064d8     58 5E 85 F1 | 	sub	fp, #88
064dc     AF 6A 02 FB | 	rdlong	local01, fp
064e0     FF 6A 06 F5 | 	and	local01, #255
064e4     5C 5E 05 F1 | 	add	fp, #92
064e8     AF 6A 62 FC | 	wrlong	local01, fp
064ec     5C 5E 85 F1 | 	sub	fp, #92
064f0     AF 6A 02 FB | 	rdlong	local01, fp
064f4     1A 6A 46 F0 | 	shr	local01, #26
064f8     03 6A 06 F5 | 	and	local01, #3
064fc     60 5E 05 F1 | 	add	fp, #96
06500     AF 6A 62 FC | 	wrlong	local01, fp
06504     08 5E 85 F1 | 	sub	fp, #8
06508     AF 6A 02 FB | 	rdlong	local01, fp
0650c     60 5E 85 F1 | 	sub	fp, #96
06510     00 6A 5E F2 | 	cmps	local01, #0 wcz
06514     14 00 90 ED |  if_be	jmp	#LR__0310
06518     60 5E 05 F1 | 	add	fp, #96
0651c     AF 6A 02 FB | 	rdlong	local01, fp
06520     01 6A 86 F1 | 	sub	local01, #1
06524     AF 6A 62 FC | 	wrlong	local01, fp
06528     60 5E 85 F1 | 	sub	fp, #96
0652c                 | LR__0310
0652c     64 5E 05 F1 | 	add	fp, #100
06530     AF 6C 02 FB | 	rdlong	local02, fp
06534     64 5E 85 F1 | 	sub	fp, #100
06538     40 6C 5E F2 | 	cmps	local02, #64 wcz
0653c     14 00 90 1D |  if_a	jmp	#LR__0311
06540     64 5E 05 F1 | 	add	fp, #100
06544     AF 6E 02 FB | 	rdlong	local03, fp
06548     64 5E 85 F1 | 	sub	fp, #100
0654c     37 71 0A F6 | 	mov	local04, local03 wz
06550     0C 00 90 5D |  if_ne	jmp	#LR__0312
06554                 | LR__0311
06554     64 5E 05 F1 | 	add	fp, #100
06558     AF 80 68 FC | 	wrlong	#64, fp
0655c     64 5E 85 F1 | 	sub	fp, #100
06560                 | LR__0312
06560     68 5E 05 F1 | 	add	fp, #104
06564     AF 6A 02 FB | 	rdlong	local01, fp
06568     68 5E 85 F1 | 	sub	fp, #104
0656c     03 6A 0E F2 | 	cmp	local01, #3 wz
06570     10 00 90 5D |  if_ne	jmp	#LR__0313
06574     68 5E 05 F1 | 	add	fp, #104
06578     AF 00 68 FC | 	wrlong	#0, fp
0657c     68 5E 85 F1 | 	sub	fp, #104
06580     30 00 90 FD | 	jmp	#LR__0315
06584                 | LR__0313
06584     0C 5E 05 F1 | 	add	fp, #12
06588     AF 6A 02 FB | 	rdlong	local01, fp
0658c     0C 5E 85 F1 | 	sub	fp, #12
06590     00 6A 5E F2 | 	cmps	local01, #0 wcz
06594     1C 00 90 3D |  if_ae	jmp	#LR__0314
06598     68 5E 05 F1 | 	add	fp, #104
0659c     AF 08 68 FC | 	wrlong	#4, fp
065a0     5C 5E 85 F1 | 	sub	fp, #92
065a4     AF 6A 02 FB | 	rdlong	local01, fp
065a8     35 6B 62 F6 | 	neg	local01, local01
065ac     AF 6A 62 FC | 	wrlong	local01, fp
065b0     0C 5E 85 F1 | 	sub	fp, #12
065b4                 | LR__0314
065b4                 | LR__0315
065b4     68 5E 05 F1 | 	add	fp, #104
065b8     AF 6A 0A FB | 	rdlong	local01, fp wz
065bc     68 5E 85 F1 | 	sub	fp, #104
065c0     EC 00 90 AD |  if_e	jmp	#LR__0322
065c4     5C 5E 05 F1 | 	add	fp, #92
065c8     AF 70 02 FB | 	rdlong	local04, fp
065cc     01 70 06 F1 | 	add	local04, #1
065d0     AF 70 62 FC | 	wrlong	local04, fp
065d4     04 5E 05 F1 | 	add	fp, #4
065d8     AF 6A 02 FB | 	rdlong	local01, fp
065dc     04 5E 05 F1 | 	add	fp, #4
065e0     AF 70 02 FB | 	rdlong	local04, fp
065e4     64 5E 85 F1 | 	sub	fp, #100
065e8     38 6B 0A F2 | 	cmp	local01, local04 wz
065ec     3C 00 90 5D |  if_ne	jmp	#LR__0317
065f0     60 5E 05 F1 | 	add	fp, #96
065f4     AF 70 02 FB | 	rdlong	local04, fp
065f8     01 70 86 F1 | 	sub	local04, #1
065fc     AF 70 62 FC | 	wrlong	local04, fp
06600     AF 6A 0A FB | 	rdlong	local01, fp wz
06604     60 5E 85 F1 | 	sub	fp, #96
06608     20 00 90 5D |  if_ne	jmp	#LR__0316
0660c     04 5E 05 F1 | 	add	fp, #4
06610     AF 5C 02 FB | 	rdlong	arg01, fp
06614     04 5E 05 F1 | 	add	fp, #4
06618     AF 5E 02 FB | 	rdlong	arg02, fp
0661c     08 5E 85 F1 | 	sub	fp, #8
06620     23 60 06 F6 | 	mov	arg03, #35
06624     00 FD BF FD | 	call	#__system___fmtchar
06628     70 01 90 FD | 	jmp	#LR__0327
0662c                 | LR__0316
0662c                 | LR__0317
0662c     68 5E 05 F1 | 	add	fp, #104
06630     AF 6A 02 FB | 	rdlong	local01, fp
06634     68 5E 85 F1 | 	sub	fp, #104
06638     02 6A 0E F2 | 	cmp	local01, #2 wz
0663c     20 00 90 5D |  if_ne	jmp	#LR__0318
06640     58 5E 05 F1 | 	add	fp, #88
06644     AF 6A 02 FB | 	rdlong	local01, fp
06648     35 71 02 F6 | 	mov	local04, local01
0664c     01 70 06 F1 | 	add	local04, #1
06650     AF 70 62 FC | 	wrlong	local04, fp
06654     58 5E 85 F1 | 	sub	fp, #88
06658     35 41 48 FC | 	wrbyte	#32, local01
0665c     50 00 90 FD | 	jmp	#LR__0321
06660                 | LR__0318
06660     68 5E 05 F1 | 	add	fp, #104
06664     AF 6A 02 FB | 	rdlong	local01, fp
06668     68 5E 85 F1 | 	sub	fp, #104
0666c     04 6A 0E F2 | 	cmp	local01, #4 wz
06670     20 00 90 5D |  if_ne	jmp	#LR__0319
06674     58 5E 05 F1 | 	add	fp, #88
06678     AF 6A 02 FB | 	rdlong	local01, fp
0667c     35 71 02 F6 | 	mov	local04, local01
06680     01 70 06 F1 | 	add	local04, #1
06684     AF 70 62 FC | 	wrlong	local04, fp
06688     58 5E 85 F1 | 	sub	fp, #88
0668c     35 5B 48 FC | 	wrbyte	#45, local01
06690     1C 00 90 FD | 	jmp	#LR__0320
06694                 | LR__0319
06694     58 5E 05 F1 | 	add	fp, #88
06698     AF 6A 02 FB | 	rdlong	local01, fp
0669c     35 71 02 F6 | 	mov	local04, local01
066a0     01 70 06 F1 | 	add	local04, #1
066a4     AF 70 62 FC | 	wrlong	local04, fp
066a8     58 5E 85 F1 | 	sub	fp, #88
066ac     35 57 48 FC | 	wrbyte	#43, local01
066b0                 | LR__0320
066b0                 | LR__0321
066b0                 | LR__0322
066b0     58 5E 05 F1 | 	add	fp, #88
066b4     AF 5C 02 FB | 	rdlong	arg01, fp
066b8     4C 5E 85 F1 | 	sub	fp, #76
066bc     AF 5E 02 FB | 	rdlong	arg02, fp
066c0     04 5E 05 F1 | 	add	fp, #4
066c4     AF 60 02 FB | 	rdlong	arg03, fp
066c8     50 5E 05 F1 | 	add	fp, #80
066cc     AF 62 02 FB | 	rdlong	arg04, fp
066d0     00 72 06 F6 | 	mov	local05, #0
066d4     58 5E 85 F1 | 	sub	fp, #88
066d8     AF 74 02 FB | 	rdlong	local06, fp
066dc     08 5E 85 F1 | 	sub	fp, #8
066e0     1D 74 2E F4 | 	testbn	local06, #29 wz
066e4     01 72 06 56 |  if_ne	mov	local05, #1
066e8     39 65 02 F6 | 	mov	arg05, local05
066ec     84 0D B0 FD | 	call	#__system___uitoa
066f0     15 77 02 F6 | 	mov	local07, result1
066f4     5C 5E 05 F1 | 	add	fp, #92
066f8     AF 6A 02 FB | 	rdlong	local01, fp
066fc     3B 6B 02 F1 | 	add	local01, local07
06700     AF 6A 62 FC | 	wrlong	local01, fp
06704     08 5E 05 F1 | 	add	fp, #8
06708     AF 70 02 FB | 	rdlong	local04, fp
0670c     64 5E 85 F1 | 	sub	fp, #100
06710     38 6B 5A F2 | 	cmps	local01, local04 wcz
06714     64 00 90 ED |  if_be	jmp	#LR__0326
06718     24 99 9F FE | 	loc	pa,	#(@LR__0324-@LR__0323)
0671c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06720                 | LR__0323
06720     64 5E 05 F1 | 	add	fp, #100
06724     AF 6A 02 FB | 	rdlong	local01, fp
06728     35 71 02 F6 | 	mov	local04, local01
0672c     01 70 86 F1 | 	sub	local04, #1
06730     AF 70 62 FC | 	wrlong	local04, fp
06734     64 5E 85 F1 | 	sub	fp, #100
06738     00 6A 5E F2 | 	cmps	local01, #0 wcz
0673c     20 00 90 ED |  if_be	jmp	#LR__0325
06740     58 5E 05 F1 | 	add	fp, #88
06744     AF 6A 02 FB | 	rdlong	local01, fp
06748     35 71 02 F6 | 	mov	local04, local01
0674c     01 70 06 F1 | 	add	local04, #1
06750     AF 70 62 FC | 	wrlong	local04, fp
06754     58 5E 85 F1 | 	sub	fp, #88
06758     35 47 48 FC | 	wrbyte	#35, local01
0675c     C0 FF 9F FD | 	jmp	#LR__0323
06760                 | LR__0324
06760                 | LR__0325
06760     58 5E 05 F1 | 	add	fp, #88
06764     AF 6A 02 FB | 	rdlong	local01, fp
06768     35 71 02 F6 | 	mov	local04, local01
0676c     01 70 06 F1 | 	add	local04, #1
06770     AF 70 62 FC | 	wrlong	local04, fp
06774     58 5E 85 F1 | 	sub	fp, #88
06778     35 01 48 FC | 	wrbyte	#0, local01
0677c                 | LR__0326
0677c     14 5E 05 F1 | 	add	fp, #20
06780     AF 60 02 F6 | 	mov	arg03, fp
06784     10 5E 85 F1 | 	sub	fp, #16
06788     AF 5C 02 FB | 	rdlong	arg01, fp
0678c     04 5E 05 F1 | 	add	fp, #4
06790     AF 5E 02 FB | 	rdlong	arg02, fp
06794     08 5E 85 F1 | 	sub	fp, #8
06798     EC FB BF FD | 	call	#__system___fmtstr
0679c                 | LR__0327
0679c     AF F0 03 F6 | 	mov	ptra, fp
067a0     BF 00 A0 FD | 	call	#popregs_
067a4                 | __system___fmtnum_ret
067a4     2D 00 64 FD | 	ret
067a8                 | 
067a8                 | __system__String_S
067a8     06 5A 05 F6 | 	mov	COUNT_, #6
067ac     B0 00 A0 FD | 	call	#pushregs_
067b0     2E 6B 02 F6 | 	mov	local01, arg01
067b4     2F 6D 02 F6 | 	mov	local02, arg02
067b8     36 5D 02 F6 | 	mov	arg01, local02
067bc     00 6E 06 F6 | 	mov	local03, #0
067c0     4C 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
067c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
067c8                 | LR__0328
067c8     2E 71 CA FA | 	rdbyte	local04, arg01 wz
067cc     01 6E 06 51 |  if_ne	add	local03, #1
067d0     01 5C 06 51 |  if_ne	add	arg01, #1
067d4     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
067d8                 | LR__0329
067d8     37 2B 0A F6 | 	mov	result1, local03 wz
067dc     40 00 00 AF 
067e0     B2 2A 06 A6 |  if_e	mov	result1, ##@LR__0446
067e4     50 00 90 AD |  if_e	jmp	#LR__0331
067e8     00 6A 5E F2 | 	cmps	local01, #0 wcz
067ec     40 00 00 EF 
067f0     B3 2A 06 E6 |  if_be	mov	result1, ##@LR__0447
067f4     40 00 90 ED |  if_be	jmp	#LR__0331
067f8     35 73 02 F6 | 	mov	local05, local01
067fc     01 72 06 F1 | 	add	local05, #1
06800     39 5D 02 F6 | 	mov	arg01, local05
06804     01 5C 06 F1 | 	add	arg01, #1
06808     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
0680c     15 75 0A F6 | 	mov	local06, result1 wz
06810     20 00 90 AD |  if_e	jmp	#LR__0330
06814     36 5F C2 FA | 	rdbyte	arg02, local02
06818     3A 5D 02 F6 | 	mov	arg01, local06
0681c     35 61 02 F6 | 	mov	arg03, local01
06820     A0 00 A0 FD | 	call	#\builtin_bytefill_
06824     3A 73 02 F1 | 	add	local05, local06
06828     39 01 48 FC | 	wrbyte	#0, local05
0682c     3A 2B 02 F6 | 	mov	result1, local06
06830     04 00 90 FD | 	jmp	#LR__0331
06834                 | LR__0330
06834     3A 2B 02 F6 | 	mov	result1, local06
06838                 | LR__0331
06838     AF F0 03 F6 | 	mov	ptra, fp
0683c     BF 00 A0 FD | 	call	#popregs_
06840                 | __system__String_S_ret
06840     2D 00 64 FD | 	ret
06844                 | 
06844                 | __system___gc_ptrs
06844     0A 5A 05 F6 | 	mov	COUNT_, #10
06848     B0 00 A0 FD | 	call	#pushregs_
0684c     02 6B 02 F6 | 	mov	local01, __heap_ptr
06850     35 6D 02 F6 | 	mov	local02, local01
06854     07 00 00 FF 
06858     F8 6D 06 F1 | 	add	local02, ##4088
0685c     35 6F 0A FB | 	rdlong	local03, local01 wz
06860     74 00 90 5D |  if_ne	jmp	#LR__0332
06864     36 71 02 F6 | 	mov	local04, local02
06868     35 71 82 F1 | 	sub	local04, local01
0686c     35 03 58 FC | 	wrword	#1, local01
06870     35 73 02 F6 | 	mov	local05, local01
06874     02 72 06 F1 | 	add	local05, #2
06878     36 00 80 FF 
0687c     39 21 59 FC | 	wrword	##27792, local05
06880     35 75 02 F6 | 	mov	local06, local01
06884     04 74 06 F1 | 	add	local06, #4
06888     3A 01 58 FC | 	wrword	#0, local06
0688c     35 77 02 F6 | 	mov	local07, local01
06890     06 76 06 F1 | 	add	local07, #6
06894     3B 03 58 FC | 	wrword	#1, local07
06898     10 6A 06 F1 | 	add	local01, #16
0689c     38 6F 52 F6 | 	abs	local03, local04 wc
068a0     04 6E 46 F0 | 	shr	local03, #4
068a4     37 6F 62 C6 |  if_b	neg	local03, local03
068a8     35 6F 52 FC | 	wrword	local03, local01
068ac     35 79 02 F6 | 	mov	local08, local01
068b0     02 78 06 F1 | 	add	local08, #2
068b4     36 00 80 FF 
068b8     3C 1F 59 FC | 	wrword	##27791, local08
068bc     35 7B 02 F6 | 	mov	local09, local01
068c0     04 7A 06 F1 | 	add	local09, #4
068c4     3D 01 58 FC | 	wrword	#0, local09
068c8     35 7D 02 F6 | 	mov	local10, local01
068cc     06 7C 06 F1 | 	add	local10, #6
068d0     3E 01 58 FC | 	wrword	#0, local10
068d4     10 6A 86 F1 | 	sub	local01, #16
068d8                 | LR__0332
068d8     36 2D 02 F6 | 	mov	result2, local02
068dc     35 2B 02 F6 | 	mov	result1, local01
068e0     AF F0 03 F6 | 	mov	ptra, fp
068e4     BF 00 A0 FD | 	call	#popregs_
068e8                 | __system___gc_ptrs_ret
068e8     2D 00 64 FD | 	ret
068ec                 | 
068ec                 | __system___gc_nextBlockPtr
068ec     02 5A 05 F6 | 	mov	COUNT_, #2
068f0     B0 00 A0 FD | 	call	#pushregs_
068f4     2E 6B 02 F6 | 	mov	local01, arg01
068f8     35 6D EA FA | 	rdword	local02, local01 wz
068fc     10 00 90 5D |  if_ne	jmp	#LR__0333
06900     40 00 00 FF 
06904     B4 5C 06 F6 | 	mov	arg01, ##@LR__0448
06908     F8 01 B0 FD | 	call	#__system___gc_errmsg
0690c     0C 00 90 FD | 	jmp	#LR__0334
06910                 | LR__0333
06910     04 6C 66 F0 | 	shl	local02, #4
06914     35 2B 02 F6 | 	mov	result1, local01
06918     36 2B 02 F1 | 	add	result1, local02
0691c                 | LR__0334
0691c     AF F0 03 F6 | 	mov	ptra, fp
06920     BF 00 A0 FD | 	call	#popregs_
06924                 | __system___gc_nextBlockPtr_ret
06924     2D 00 64 FD | 	ret
06928                 | 
06928                 | __system___gc_tryalloc
06928     1B 5A 05 F6 | 	mov	COUNT_, #27
0692c     B0 00 A0 FD | 	call	#pushregs_
06930     2E 6B 02 F6 | 	mov	local01, arg01
06934     2F 6D 02 F6 | 	mov	local02, arg02
06938     08 FF BF FD | 	call	#__system___gc_ptrs
0693c     15 6F 02 F6 | 	mov	local03, result1
06940     16 71 02 F6 | 	mov	local04, result2
06944     37 73 02 F6 | 	mov	local05, local03
06948     00 74 06 F6 | 	mov	local06, #0
0694c     08 97 9F FE | 	loc	pa,	#(@LR__0336-@LR__0335)
06950     93 00 A0 FD | 	call	#FCACHE_LOAD_
06954                 | LR__0335
06954     39 77 02 F6 | 	mov	local07, local05
06958     06 72 06 F1 | 	add	local05, #6
0695c     39 79 02 F6 | 	mov	local08, local05
06960     37 7B 02 F6 | 	mov	local09, local03
06964     3C 7D E2 FA | 	rdword	local10, local08
06968     3D 5D 02 F6 | 	mov	arg01, local09
0696c     3E 5F 0A F6 | 	mov	arg02, local10 wz
06970     00 2A 06 A6 |  if_e	mov	result1, #0
06974     04 5E 66 50 |  if_ne	shl	arg02, #4
06978     2F 5D 02 51 |  if_ne	add	arg01, arg02
0697c     2E 2B 02 56 |  if_ne	mov	result1, arg01
06980     15 7F 02 F6 | 	mov	local11, result1
06984     3F 73 0A F6 | 	mov	local05, local11 wz
06988     39 7B 02 56 |  if_ne	mov	local09, local05
0698c     3D 81 02 56 |  if_ne	mov	local12, local09
06990     40 75 E2 5A |  if_ne	rdword	local06, local12
06994     00 72 0E F2 | 	cmp	local05, #0 wz
06998     10 00 90 AD |  if_e	jmp	#LR__0337
0699c     38 73 5A F2 | 	cmps	local05, local04 wcz
069a0     08 00 90 3D |  if_ae	jmp	#LR__0337
069a4     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069a8     A8 FF 9F 1D |  if_a	jmp	#LR__0335
069ac                 | LR__0336
069ac                 | LR__0337
069ac     00 72 0E F2 | 	cmp	local05, #0 wz
069b0     39 2B 02 A6 |  if_e	mov	result1, local05
069b4     40 01 90 AD |  if_e	jmp	#LR__0340
069b8     39 83 02 F6 | 	mov	local13, local05
069bc     06 82 06 F1 | 	add	local13, #6
069c0     41 85 E2 FA | 	rdword	local14, local13
069c4     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069c8     CC 00 90 3D |  if_ae	jmp	#LR__0339
069cc     39 87 02 F6 | 	mov	local15, local05
069d0     43 6B 52 FC | 	wrword	local01, local15
069d4     35 89 02 F6 | 	mov	local16, local01
069d8     04 88 66 F0 | 	shl	local16, #4
069dc     39 8B 02 F6 | 	mov	local17, local05
069e0     44 8B 02 F1 | 	add	local17, local16
069e4     3A 8D 02 F6 | 	mov	local18, local06
069e8     35 8D 82 F1 | 	sub	local18, local01
069ec     45 8F 02 F6 | 	mov	local19, local17
069f0     47 8D 52 FC | 	wrword	local18, local19
069f4     45 91 02 F6 | 	mov	local20, local17
069f8     02 90 06 F1 | 	add	local20, #2
069fc     36 00 80 FF 
06a00     48 1F 59 FC | 	wrword	##27791, local20
06a04     45 93 02 F6 | 	mov	local21, local17
06a08     04 92 06 F1 | 	add	local21, #4
06a0c     39 5F 0A F6 | 	mov	arg02, local05 wz
06a10     00 2A 06 A6 |  if_e	mov	result1, #0
06a14     37 5F 82 51 |  if_ne	sub	arg02, local03
06a18     04 5E 46 50 |  if_ne	shr	arg02, #4
06a1c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a20     49 2B 52 FC | 	wrword	result1, local21
06a24     45 95 02 F6 | 	mov	local22, local17
06a28     41 7B E2 FA | 	rdword	local09, local13
06a2c     06 94 06 F1 | 	add	local22, #6
06a30     4A 7B 52 FC | 	wrword	local09, local22
06a34     45 97 02 F6 | 	mov	local23, local17
06a38     4B 5F 0A F6 | 	mov	arg02, local23 wz
06a3c     00 2A 06 A6 |  if_e	mov	result1, #0
06a40     37 5F 82 51 |  if_ne	sub	arg02, local03
06a44     04 5E 46 50 |  if_ne	shr	arg02, #4
06a48     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a4c     15 85 02 F6 | 	mov	local14, result1
06a50     45 5D 02 F6 | 	mov	arg01, local17
06a54     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06a58     15 99 0A F6 | 	mov	local24, result1 wz
06a5c     38 00 90 AD |  if_e	jmp	#LR__0338
06a60     38 99 5A F2 | 	cmps	local24, local04 wcz
06a64     30 00 90 3D |  if_ae	jmp	#LR__0338
06a68     4C 9B 02 F6 | 	mov	local25, local24
06a6c     04 9A 06 F1 | 	add	local25, #4
06a70     37 7B 02 F6 | 	mov	local09, local03
06a74     4B 7D 02 F6 | 	mov	local10, local23
06a78     3D 5D 02 F6 | 	mov	arg01, local09
06a7c     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a80     00 2A 06 A6 |  if_e	mov	result1, #0
06a84     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06a88     04 5E 46 50 |  if_ne	shr	arg02, #4
06a8c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a90     15 7F 02 F6 | 	mov	local11, result1
06a94     4D 7F 52 FC | 	wrword	local11, local25
06a98                 | LR__0338
06a98                 | LR__0339
06a98     06 76 06 F1 | 	add	local07, #6
06a9c     3B 85 52 FC | 	wrword	local14, local07
06aa0     36 00 00 FF 
06aa4     80 7A 06 F6 | 	mov	local09, ##27776
06aa8     36 7B 42 F5 | 	or	local09, local02
06aac     39 9D 02 F6 | 	mov	local26, local05
06ab0     02 9C 06 F1 | 	add	local26, #2
06ab4     01 2A 62 FD | 	cogid	result1
06ab8     15 7B 42 F5 | 	or	local09, result1
06abc     4E 7B 52 FC | 	wrword	local09, local26
06ac0     37 9F 02 F6 | 	mov	local27, local03
06ac4     08 9E 06 F1 | 	add	local27, #8
06ac8     4F 7B E2 FA | 	rdword	local09, local27
06acc     41 7B 52 FC | 	wrword	local09, local13
06ad0     39 5F 0A F6 | 	mov	arg02, local05 wz
06ad4     00 2A 06 A6 |  if_e	mov	result1, #0
06ad8     37 5F 82 51 |  if_ne	sub	arg02, local03
06adc     04 5E 46 50 |  if_ne	shr	arg02, #4
06ae0     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ae4     4F 2B 52 FC | 	wrword	result1, local27
06ae8     08 72 06 F1 | 	add	local05, #8
06aec     39 2B 02 F6 | 	mov	result1, local05
06af0     00 C0 31 FF 
06af4     00 2A 46 F5 | 	or	result1, ##1669332992
06af8                 | LR__0340
06af8     AF F0 03 F6 | 	mov	ptra, fp
06afc     BF 00 A0 FD | 	call	#popregs_
06b00                 | __system___gc_tryalloc_ret
06b00     2D 00 64 FD | 	ret
06b04                 | 
06b04                 | __system___gc_errmsg
06b04     02 5A 05 F6 | 	mov	COUNT_, #2
06b08     B0 00 A0 FD | 	call	#pushregs_
06b0c     2E 6B 02 F6 | 	mov	local01, arg01
06b10                 | LR__0341
06b10     35 6D CA FA | 	rdbyte	local02, local01 wz
06b14     01 6A 06 F1 | 	add	local01, #1
06b18     0C 00 90 AD |  if_e	jmp	#LR__0342
06b1c     36 5D 02 F6 | 	mov	arg01, local02
06b20     C4 F4 BF FD | 	call	#__system___tx
06b24     E8 FF 9F FD | 	jmp	#LR__0341
06b28                 | LR__0342
06b28     00 2A 06 F6 | 	mov	result1, #0
06b2c     AF F0 03 F6 | 	mov	ptra, fp
06b30     BF 00 A0 FD | 	call	#popregs_
06b34                 | __system___gc_errmsg_ret
06b34     2D 00 64 FD | 	ret
06b38                 | 
06b38                 | __system___gc_alloc_managed
06b38     02 5A 05 F6 | 	mov	COUNT_, #2
06b3c     B0 00 A0 FD | 	call	#pushregs_
06b40     2E 6B 02 F6 | 	mov	local01, arg01
06b44     00 5E 06 F6 | 	mov	arg02, #0
06b48     30 00 B0 FD | 	call	#__system___gc_doalloc
06b4c     15 6D 0A F6 | 	mov	local02, result1 wz
06b50     18 00 90 5D |  if_ne	jmp	#LR__0343
06b54     00 6A 5E F2 | 	cmps	local01, #0 wcz
06b58     10 00 90 ED |  if_be	jmp	#LR__0343
06b5c     40 00 00 FF 
06b60     D0 5C 06 F6 | 	mov	arg01, ##@LR__0449
06b64     9C FF BF FD | 	call	#__system___gc_errmsg
06b68     04 00 90 FD | 	jmp	#LR__0344
06b6c                 | LR__0343
06b6c     36 2B 02 F6 | 	mov	result1, local02
06b70                 | LR__0344
06b70     AF F0 03 F6 | 	mov	ptra, fp
06b74     BF 00 A0 FD | 	call	#popregs_
06b78                 | __system___gc_alloc_managed_ret
06b78     2D 00 64 FD | 	ret
06b7c                 | 
06b7c                 | __system___gc_doalloc
06b7c     07 5A 05 F6 | 	mov	COUNT_, #7
06b80     B0 00 A0 FD | 	call	#pushregs_
06b84     2E 6B 0A F6 | 	mov	local01, arg01 wz
06b88     2F 6D 02 F6 | 	mov	local02, arg02
06b8c     00 2A 06 A6 |  if_e	mov	result1, #0
06b90     8C 00 90 AD |  if_e	jmp	#LR__0352
06b94     17 6A 06 F1 | 	add	local01, #23
06b98     0F 6A 26 F5 | 	andn	local01, #15
06b9c     04 6A 46 F0 | 	shr	local01, #4
06ba0     14 14 06 F1 | 	add	ptr___system__dat__, #20
06ba4     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06ba8     37 5D 02 F6 | 	mov	arg01, local03
06bac     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06bb0     50 F3 BF FD | 	call	#__system___lockmem
06bb4     35 5D 02 F6 | 	mov	arg01, local01
06bb8     36 5F 02 F6 | 	mov	arg02, local02
06bbc     68 FD BF FD | 	call	#__system___gc_tryalloc
06bc0     15 71 0A F6 | 	mov	local04, result1 wz
06bc4     14 00 90 5D |  if_ne	jmp	#LR__0345
06bc8     10 03 B0 FD | 	call	#__system___gc_docollect
06bcc     35 5D 02 F6 | 	mov	arg01, local01
06bd0     36 5F 02 F6 | 	mov	arg02, local02
06bd4     50 FD BF FD | 	call	#__system___gc_tryalloc
06bd8     15 71 02 F6 | 	mov	local04, result1
06bdc                 | LR__0345
06bdc     37 01 68 FC | 	wrlong	#0, local03
06be0     00 70 0E F2 | 	cmp	local04, #0 wz
06be4     34 00 90 AD |  if_e	jmp	#LR__0351
06be8     04 6A 66 F0 | 	shl	local01, #4
06bec     08 6A 86 F1 | 	sub	local01, #8
06bf0     35 73 52 F6 | 	abs	local05, local01 wc
06bf4     02 72 46 F0 | 	shr	local05, #2
06bf8     39 73 62 C6 |  if_b	neg	local05, local05
06bfc     39 75 0A F6 | 	mov	local06, local05 wz
06c00     38 77 02 F6 | 	mov	local07, local04
06c04     14 00 90 AD |  if_e	jmp	#LR__0350
06c08     00 94 9F FE | 	loc	pa,	#(@LR__0348-@LR__0346)
06c0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c10                 | LR__0346
06c10     3A 05 D8 FC | 	rep	@LR__0349, local06
06c14                 | LR__0347
06c14     3B 01 68 FC | 	wrlong	#0, local07
06c18     04 76 06 F1 | 	add	local07, #4
06c1c                 | LR__0348
06c1c                 | LR__0349
06c1c                 | LR__0350
06c1c                 | LR__0351
06c1c     38 2B 02 F6 | 	mov	result1, local04
06c20                 | LR__0352
06c20     AF F0 03 F6 | 	mov	ptra, fp
06c24     BF 00 A0 FD | 	call	#popregs_
06c28                 | __system___gc_doalloc_ret
06c28     2D 00 64 FD | 	ret
06c2c                 | 
06c2c                 | __system___gc_isvalidptr
06c2c     30 31 02 F6 | 	mov	_var01, arg03
06c30     18 33 02 F6 | 	mov	_var02, _var01
06c34     00 F8 7F FF 
06c38     00 32 06 F5 | 	and	_var02, ##-1048576
06c3c     00 C0 31 FF 
06c40     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06c44     00 2A 06 56 |  if_ne	mov	result1, #0
06c48     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c4c     08 30 86 F1 | 	sub	_var01, #8
06c50     18 35 02 F6 | 	mov	_var03, _var01
06c54     00 F8 7F FF 
06c58     00 34 26 F5 | 	andn	_var03, ##-1048576
06c5c     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06c60     08 00 90 CD |  if_b	jmp	#LR__0353
06c64     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06c68     08 00 90 CD |  if_b	jmp	#LR__0354
06c6c                 | LR__0353
06c6c     00 2A 06 F6 | 	mov	result1, #0
06c70     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06c74                 | LR__0354
06c74     1A 33 02 F6 | 	mov	_var02, _var03
06c78     2E 33 62 F5 | 	xor	_var02, arg01
06c7c     0F 32 0E F5 | 	and	_var02, #15 wz
06c80     00 2A 06 56 |  if_ne	mov	result1, #0
06c84     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c88     1A 37 02 F6 | 	mov	_var04, _var03
06c8c     02 36 06 F1 | 	add	_var04, #2
06c90     1B 33 E2 FA | 	rdword	_var02, _var04
06c94     7F 00 00 FF 
06c98     C0 33 06 F5 | 	and	_var02, ##65472
06c9c     36 00 00 FF 
06ca0     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06ca4     00 2A 06 56 |  if_ne	mov	result1, #0
06ca8     1A 2B 02 A6 |  if_e	mov	result1, _var03
06cac                 | __system___gc_isvalidptr_ret
06cac     2D 00 64 FD | 	ret
06cb0                 | 
06cb0                 | __system___gc_dofree
06cb0     1A 5A 05 F6 | 	mov	COUNT_, #26
06cb4     B0 00 A0 FD | 	call	#pushregs_
06cb8     2E 6B 02 F6 | 	mov	local01, arg01
06cbc     84 FB BF FD | 	call	#__system___gc_ptrs
06cc0     16 6D 02 F6 | 	mov	local02, result2
06cc4     15 6F 02 F6 | 	mov	local03, result1
06cc8     35 71 02 F6 | 	mov	local04, local01
06ccc     02 70 06 F1 | 	add	local04, #2
06cd0     36 00 80 FF 
06cd4     38 1F 59 FC | 	wrword	##27791, local04
06cd8     35 73 02 F6 | 	mov	local05, local01
06cdc     35 5D 02 F6 | 	mov	arg01, local01
06ce0     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06ce4     15 75 02 F6 | 	mov	local06, result1
06ce8     64 93 9F FE | 	loc	pa,	#(@LR__0356-@LR__0355)
06cec     93 00 A0 FD | 	call	#FCACHE_LOAD_
06cf0                 | LR__0355
06cf0     04 72 06 F1 | 	add	local05, #4
06cf4     39 77 02 F6 | 	mov	local07, local05
06cf8     3B 5F EA FA | 	rdword	arg02, local07 wz
06cfc     37 5D 02 F6 | 	mov	arg01, local03
06d00     00 2A 06 A6 |  if_e	mov	result1, #0
06d04     04 5E 66 50 |  if_ne	shl	arg02, #4
06d08     2F 5D 02 51 |  if_ne	add	arg01, arg02
06d0c     2E 2B 02 56 |  if_ne	mov	result1, arg01
06d10     15 73 0A F6 | 	mov	local05, result1 wz
06d14     28 00 90 AD |  if_e	jmp	#LR__0357
06d18     39 5D 02 F6 | 	mov	arg01, local05
06d1c     00 78 06 F6 | 	mov	local08, #0
06d20     02 5C 06 F1 | 	add	arg01, #2
06d24     2E 7B E2 FA | 	rdword	local09, arg01
06d28     36 00 00 FF 
06d2c     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06d30     01 78 66 A6 |  if_e	neg	local08, #1
06d34     3C 2B 02 F6 | 	mov	result1, local08
06d38     15 7D 0A F6 | 	mov	local10, result1 wz
06d3c     B0 FF 9F AD |  if_e	jmp	#LR__0355
06d40                 | LR__0356
06d40                 | LR__0357
06d40     00 72 0E F2 | 	cmp	local05, #0 wz
06d44     37 73 02 A6 |  if_e	mov	local05, local03
06d48     39 7F 02 F6 | 	mov	local11, local05
06d4c     06 7E 06 F1 | 	add	local11, #6
06d50     35 81 02 F6 | 	mov	local12, local01
06d54     3F 83 E2 FA | 	rdword	local13, local11
06d58     06 80 06 F1 | 	add	local12, #6
06d5c     40 83 52 FC | 	wrword	local13, local12
06d60     35 5F 0A F6 | 	mov	arg02, local01 wz
06d64     00 2A 06 A6 |  if_e	mov	result1, #0
06d68     37 5F 82 51 |  if_ne	sub	arg02, local03
06d6c     04 5E 46 50 |  if_ne	shr	arg02, #4
06d70     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d74     15 85 02 F6 | 	mov	local14, result1
06d78     3F 85 52 FC | 	wrword	local14, local11
06d7c     37 73 0A F2 | 	cmp	local05, local03 wz
06d80     74 00 90 AD |  if_e	jmp	#LR__0360
06d84     39 5D 02 F6 | 	mov	arg01, local05
06d88     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d8c     35 2B 0A F2 | 	cmp	result1, local01 wz
06d90     64 00 90 5D |  if_ne	jmp	#LR__0359
06d94     39 87 02 F6 | 	mov	local15, local05
06d98     43 89 E2 FA | 	rdword	local16, local15
06d9c     35 8B 02 F6 | 	mov	local17, local01
06da0     45 7D E2 FA | 	rdword	local10, local17
06da4     3E 89 02 F1 | 	add	local16, local10
06da8     43 89 52 FC | 	wrword	local16, local15
06dac     38 01 58 FC | 	wrword	#0, local04
06db0     35 5D 02 F6 | 	mov	arg01, local01
06db4     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06db8     15 75 02 F6 | 	mov	local06, result1
06dbc     36 75 5A F2 | 	cmps	local06, local02 wcz
06dc0     24 00 90 3D |  if_ae	jmp	#LR__0358
06dc4     3A 8D 02 F6 | 	mov	local18, local06
06dc8     04 8C 06 F1 | 	add	local18, #4
06dcc     39 5F 0A F6 | 	mov	arg02, local05 wz
06dd0     00 2A 06 A6 |  if_e	mov	result1, #0
06dd4     37 5F 82 51 |  if_ne	sub	arg02, local03
06dd8     04 5E 46 50 |  if_ne	shr	arg02, #4
06ddc     2F 2B 02 56 |  if_ne	mov	result1, arg02
06de0     15 85 02 F6 | 	mov	local14, result1
06de4     46 85 52 FC | 	wrword	local14, local18
06de8                 | LR__0358
06de8     40 83 E2 FA | 	rdword	local13, local12
06dec     3F 83 52 FC | 	wrword	local13, local11
06df0     40 01 58 FC | 	wrword	#0, local12
06df4     39 6B 02 F6 | 	mov	local01, local05
06df8                 | LR__0359
06df8                 | LR__0360
06df8     35 5D 02 F6 | 	mov	arg01, local01
06dfc     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06e00     15 8F 0A F6 | 	mov	local19, result1 wz
06e04     C4 00 90 AD |  if_e	jmp	#LR__0362
06e08     36 8F 5A F2 | 	cmps	local19, local02 wcz
06e0c     BC 00 90 3D |  if_ae	jmp	#LR__0362
06e10     47 5D 02 F6 | 	mov	arg01, local19
06e14     00 78 06 F6 | 	mov	local08, #0
06e18     02 5C 06 F1 | 	add	arg01, #2
06e1c     2E 7B E2 FA | 	rdword	local09, arg01
06e20     36 00 00 FF 
06e24     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06e28     01 78 66 A6 |  if_e	neg	local08, #1
06e2c     3C 2B 0A F6 | 	mov	result1, local08 wz
06e30     98 00 90 AD |  if_e	jmp	#LR__0362
06e34     35 73 02 F6 | 	mov	local05, local01
06e38     47 6B 02 F6 | 	mov	local01, local19
06e3c     39 91 02 F6 | 	mov	local20, local05
06e40     48 93 E2 FA | 	rdword	local21, local20
06e44     35 95 02 F6 | 	mov	local22, local01
06e48     4A 7D E2 FA | 	rdword	local10, local22
06e4c     3E 93 02 F1 | 	add	local21, local10
06e50     48 93 52 FC | 	wrword	local21, local20
06e54     35 97 02 F6 | 	mov	local23, local01
06e58     06 96 06 F1 | 	add	local23, #6
06e5c     39 99 02 F6 | 	mov	local24, local05
06e60     4B 83 E2 FA | 	rdword	local13, local23
06e64     06 98 06 F1 | 	add	local24, #6
06e68     4C 83 52 FC | 	wrword	local13, local24
06e6c     35 9B 02 F6 | 	mov	local25, local01
06e70     02 9A 06 F1 | 	add	local25, #2
06e74     4D 55 59 FC | 	wrword	#170, local25
06e78     4B 01 58 FC | 	wrword	#0, local23
06e7c     35 83 02 F6 | 	mov	local13, local01
06e80     41 5D 02 F6 | 	mov	arg01, local13
06e84     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06e88     15 7D 02 F6 | 	mov	local10, result1
06e8c     3E 75 0A F6 | 	mov	local06, local10 wz
06e90     38 00 90 AD |  if_e	jmp	#LR__0361
06e94     36 75 5A F2 | 	cmps	local06, local02 wcz
06e98     30 00 90 3D |  if_ae	jmp	#LR__0361
06e9c     3A 9D 02 F6 | 	mov	local26, local06
06ea0     04 9C 06 F1 | 	add	local26, #4
06ea4     37 83 02 F6 | 	mov	local13, local03
06ea8     39 7D 02 F6 | 	mov	local10, local05
06eac     41 5D 02 F6 | 	mov	arg01, local13
06eb0     3E 5F 0A F6 | 	mov	arg02, local10 wz
06eb4     00 2A 06 A6 |  if_e	mov	result1, #0
06eb8     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06ebc     04 5E 46 50 |  if_ne	shr	arg02, #4
06ec0     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ec4     15 85 02 F6 | 	mov	local14, result1
06ec8     4E 85 52 FC | 	wrword	local14, local26
06ecc                 | LR__0361
06ecc                 | LR__0362
06ecc     3A 2B 02 F6 | 	mov	result1, local06
06ed0     AF F0 03 F6 | 	mov	ptra, fp
06ed4     BF 00 A0 FD | 	call	#popregs_
06ed8                 | __system___gc_dofree_ret
06ed8     2D 00 64 FD | 	ret
06edc                 | 
06edc                 | __system___gc_docollect
06edc     0C 5A 05 F6 | 	mov	COUNT_, #12
06ee0     B0 00 A0 FD | 	call	#pushregs_
06ee4     5C F9 BF FD | 	call	#__system___gc_ptrs
06ee8     16 6B 02 F6 | 	mov	local01, result2
06eec     15 6D 02 F6 | 	mov	local02, result1
06ef0     36 5D 02 F6 | 	mov	arg01, local02
06ef4     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ef8     15 6F 0A F6 | 	mov	local03, result1 wz
06efc     01 2A 62 FD | 	cogid	result1
06f00     15 71 02 F6 | 	mov	local04, result1
06f04     2C 00 90 AD |  if_e	jmp	#LR__0364
06f08                 | LR__0363
06f08     35 6F 5A F2 | 	cmps	local03, local01 wcz
06f0c     24 00 90 3D |  if_ae	jmp	#LR__0364
06f10     37 73 02 F6 | 	mov	local05, local03
06f14     02 72 06 F1 | 	add	local05, #2
06f18     39 75 E2 FA | 	rdword	local06, local05
06f1c     20 74 26 F5 | 	andn	local06, #32
06f20     39 75 52 FC | 	wrword	local06, local05
06f24     37 5D 02 F6 | 	mov	arg01, local03
06f28     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f2c     15 6F 0A F6 | 	mov	local03, result1 wz
06f30     D4 FF 9F 5D |  if_ne	jmp	#LR__0363
06f34                 | LR__0364
06f34     00 76 06 F6 | 	mov	local07, #0
06f38     00 5C 06 F6 | 	mov	arg01, #0
06f3c     5C EF BF FD | 	call	#__system____topofstack
06f40     15 79 02 F6 | 	mov	local08, result1
06f44     3B 5D 02 F6 | 	mov	arg01, local07
06f48     3C 5F 02 F6 | 	mov	arg02, local08
06f4c     A0 00 B0 FD | 	call	#__system___gc_markhub
06f50     2C 01 B0 FD | 	call	#__system___gc_markcog
06f54     36 5D 02 F6 | 	mov	arg01, local02
06f58     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f5c     15 7B 0A F6 | 	mov	local09, result1 wz
06f60     10 00 90 5D |  if_ne	jmp	#LR__0365
06f64     40 00 00 FF 
06f68     ED 5C 06 F6 | 	mov	arg01, ##@LR__0450
06f6c     94 FB BF FD | 	call	#__system___gc_errmsg
06f70     70 00 90 FD | 	jmp	#LR__0371
06f74                 | LR__0365
06f74                 | LR__0366
06f74     3D 6F 02 F6 | 	mov	local03, local09
06f78     37 5D 02 F6 | 	mov	arg01, local03
06f7c     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f80     15 7B 02 F6 | 	mov	local09, result1
06f84     37 7D 02 F6 | 	mov	local10, local03
06f88     02 7C 06 F1 | 	add	local10, #2
06f8c     3E 7F E2 FA | 	rdword	local11, local10
06f90     20 7E CE F7 | 	test	local11, #32 wz
06f94     3C 00 90 5D |  if_ne	jmp	#LR__0369
06f98     3F 81 02 F6 | 	mov	local12, local11
06f9c     10 80 0E F5 | 	and	local12, #16 wz
06fa0     30 00 90 5D |  if_ne	jmp	#LR__0369
06fa4     3F 77 02 F6 | 	mov	local07, local11
06fa8     0F 76 06 F5 | 	and	local07, #15
06fac     3B 7F 02 F6 | 	mov	local11, local07
06fb0     38 7F 0A F2 | 	cmp	local11, local04 wz
06fb4     08 00 90 AD |  if_e	jmp	#LR__0367
06fb8     0E 7E 0E F2 | 	cmp	local11, #14 wz
06fbc     14 00 90 5D |  if_ne	jmp	#LR__0368
06fc0                 | LR__0367
06fc0     37 77 02 F6 | 	mov	local07, local03
06fc4     3B 5D 02 F6 | 	mov	arg01, local07
06fc8     E4 FC BF FD | 	call	#__system___gc_dofree
06fcc     15 81 02 F6 | 	mov	local12, result1
06fd0     40 7B 02 F6 | 	mov	local09, local12
06fd4                 | LR__0368
06fd4                 | LR__0369
06fd4     00 7A 0E F2 | 	cmp	local09, #0 wz
06fd8     08 00 90 AD |  if_e	jmp	#LR__0370
06fdc     35 7B 5A F2 | 	cmps	local09, local01 wcz
06fe0     90 FF 9F CD |  if_b	jmp	#LR__0366
06fe4                 | LR__0370
06fe4                 | LR__0371
06fe4     AF F0 03 F6 | 	mov	ptra, fp
06fe8     BF 00 A0 FD | 	call	#popregs_
06fec                 | __system___gc_docollect_ret
06fec     2D 00 64 FD | 	ret
06ff0                 | 
06ff0                 | __system___gc_markhub
06ff0     0A 5A 05 F6 | 	mov	COUNT_, #10
06ff4     B0 00 A0 FD | 	call	#pushregs_
06ff8     2E 6B 02 F6 | 	mov	local01, arg01
06ffc     2F 6D 02 F6 | 	mov	local02, arg02
07000     40 F8 BF FD | 	call	#__system___gc_ptrs
07004     15 6F 02 F6 | 	mov	local03, result1
07008     16 71 02 F6 | 	mov	local04, result2
0700c                 | LR__0372
0700c     36 6B 5A F2 | 	cmps	local01, local02 wcz
07010     60 00 90 3D |  if_ae	jmp	#LR__0373
07014     35 61 02 FB | 	rdlong	arg03, local01
07018     04 6A 06 F1 | 	add	local01, #4
0701c     37 5D 02 F6 | 	mov	arg01, local03
07020     38 5F 02 F6 | 	mov	arg02, local04
07024     04 FC BF FD | 	call	#__system___gc_isvalidptr
07028     15 73 0A F6 | 	mov	local05, result1 wz
0702c     DC FF 9F AD |  if_e	jmp	#LR__0372
07030     39 5D 02 F6 | 	mov	arg01, local05
07034     00 74 06 F6 | 	mov	local06, #0
07038     02 5C 06 F1 | 	add	arg01, #2
0703c     2E 77 E2 FA | 	rdword	local07, arg01
07040     36 00 00 FF 
07044     8F 76 0E F2 | 	cmp	local07, ##27791 wz
07048     01 74 66 A6 |  if_e	neg	local06, #1
0704c     3A 2B 02 F6 | 	mov	result1, local06
07050     15 79 0A F6 | 	mov	local08, result1 wz
07054     B4 FF 9F 5D |  if_ne	jmp	#LR__0372
07058     39 7B 02 F6 | 	mov	local09, local05
0705c     02 7A 06 F1 | 	add	local09, #2
07060     3D 7D E2 FA | 	rdword	local10, local09
07064     0F 7C 26 F5 | 	andn	local10, #15
07068     2E 7C 46 F5 | 	or	local10, #46
0706c     3D 7D 52 FC | 	wrword	local10, local09
07070     98 FF 9F FD | 	jmp	#LR__0372
07074                 | LR__0373
07074     AF F0 03 F6 | 	mov	ptra, fp
07078     BF 00 A0 FD | 	call	#popregs_
0707c                 | __system___gc_markhub_ret
0707c     2D 00 64 FD | 	ret
07080                 | 
07080                 | __system___gc_markcog
07080     06 5A 05 F6 | 	mov	COUNT_, #6
07084     B0 00 A0 FD | 	call	#pushregs_
07088     B8 F7 BF FD | 	call	#__system___gc_ptrs
0708c     15 6B 02 F6 | 	mov	local01, result1
07090     16 6D 02 F6 | 	mov	local02, result2
07094     00 6E 06 F6 | 	mov	local03, #0
07098                 | LR__0374
07098     F0 71 06 F6 | 	mov	local04, #496
0709c     37 71 82 F1 | 	sub	local04, local03
070a0     F0 71 06 F1 | 	add	local04, #496
070a4                 | 	'.live	local04
070a4     00 70 96 F9 | 	alts	local04, #0
070a8     38 73 02 F6 | 	mov	local05, local04
070ac     36 5F 02 F6 | 	mov	arg02, local02
070b0     35 5D 02 F6 | 	mov	arg01, local01
070b4     39 61 02 F6 | 	mov	arg03, local05
070b8     70 FB BF FD | 	call	#__system___gc_isvalidptr
070bc     15 73 0A F6 | 	mov	local05, result1 wz
070c0     10 00 90 AD |  if_e	jmp	#LR__0375
070c4     02 72 06 F1 | 	add	local05, #2
070c8     39 75 E2 FA | 	rdword	local06, local05
070cc     20 74 46 F5 | 	or	local06, #32
070d0     39 75 52 FC | 	wrword	local06, local05
070d4                 | LR__0375
070d4     01 6E 06 F1 | 	add	local03, #1
070d8     F0 6F 5E F2 | 	cmps	local03, #496 wcz
070dc     B8 FF 9F CD |  if_b	jmp	#LR__0374
070e0     AF F0 03 F6 | 	mov	ptra, fp
070e4     BF 00 A0 FD | 	call	#popregs_
070e8                 | __system___gc_markcog_ret
070e8     2D 00 64 FD | 	ret
070ec                 | 
070ec                 | __system__write
070ec     03 5A 05 F6 | 	mov	COUNT_, #3
070f0     B0 00 A0 FD | 	call	#pushregs_
070f4     2E 6B 02 F6 | 	mov	local01, arg01
070f8     2F 6D 02 F6 | 	mov	local02, arg02
070fc     30 6F 02 F6 | 	mov	local03, arg03
07100     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07104     1C 00 90 CD |  if_b	jmp	#LR__0376
07108     01 00 00 FF 
0710c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07110     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07114     01 00 00 FF 
07118     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0711c     01 2A 66 F6 | 	neg	result1, #1
07120     28 00 90 FD | 	jmp	#LR__0377
07124                 | LR__0376
07124     35 5D 02 F6 | 	mov	arg01, local01
07128     01 5C 66 F0 | 	shl	arg01, #1
0712c     35 5D 02 F1 | 	add	arg01, local01
07130     04 5C 66 F0 | 	shl	arg01, #4
07134     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07138     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
0713c     36 5F 02 F6 | 	mov	arg02, local02
07140     37 61 02 F6 | 	mov	arg03, local03
07144     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07148     4C 09 B0 FD | 	call	#__system___vfswrite
0714c                 | LR__0377
0714c     AF F0 03 F6 | 	mov	ptra, fp
07150     BF 00 A0 FD | 	call	#popregs_
07154                 | __system__write_ret
07154     2D 00 64 FD | 	ret
07158                 | 
07158                 | __system__read
07158     03 5A 05 F6 | 	mov	COUNT_, #3
0715c     B0 00 A0 FD | 	call	#pushregs_
07160     2E 6B 02 F6 | 	mov	local01, arg01
07164     2F 6D 02 F6 | 	mov	local02, arg02
07168     30 6F 02 F6 | 	mov	local03, arg03
0716c     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07170     1C 00 90 CD |  if_b	jmp	#LR__0378
07174     01 00 00 FF 
07178     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0717c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07180     01 00 00 FF 
07184     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07188     01 2A 66 F6 | 	neg	result1, #1
0718c     28 00 90 FD | 	jmp	#LR__0379
07190                 | LR__0378
07190     35 5D 02 F6 | 	mov	arg01, local01
07194     01 5C 66 F0 | 	shl	arg01, #1
07198     35 5D 02 F1 | 	add	arg01, local01
0719c     04 5C 66 F0 | 	shl	arg01, #4
071a0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071a4     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071a8     36 5F 02 F6 | 	mov	arg02, local02
071ac     37 61 02 F6 | 	mov	arg03, local03
071b0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071b4     A4 0A B0 FD | 	call	#__system___vfsread
071b8                 | LR__0379
071b8     AF F0 03 F6 | 	mov	ptra, fp
071bc     BF 00 A0 FD | 	call	#popregs_
071c0                 | __system__read_ret
071c0     2D 00 64 FD | 	ret
071c4                 | 
071c4                 | __system__close
071c4     01 5A 05 F6 | 	mov	COUNT_, #1
071c8     B0 00 A0 FD | 	call	#pushregs_
071cc     2E 6B 02 F6 | 	mov	local01, arg01
071d0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071d4     1C 00 90 CD |  if_b	jmp	#LR__0380
071d8     01 00 00 FF 
071dc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071e0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071e4     01 00 00 FF 
071e8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071ec     01 2A 66 F6 | 	neg	result1, #1
071f0     20 00 90 FD | 	jmp	#LR__0381
071f4                 | LR__0380
071f4     35 5D 02 F6 | 	mov	arg01, local01
071f8     01 5C 66 F0 | 	shl	arg01, #1
071fc     35 5D 02 F1 | 	add	arg01, local01
07200     04 5C 66 F0 | 	shl	arg01, #4
07204     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07208     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
0720c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07210     80 03 B0 FD | 	call	#__system___closeraw
07214                 | LR__0381
07214     AF F0 03 F6 | 	mov	ptra, fp
07218     BF 00 A0 FD | 	call	#popregs_
0721c                 | __system__close_ret
0721c     2D 00 64 FD | 	ret
07220                 | 
07220                 | __system__lseek
07220     09 5A 05 F6 | 	mov	COUNT_, #9
07224     B0 00 A0 FD | 	call	#pushregs_
07228     2E 6B 02 F6 | 	mov	local01, arg01
0722c     2F 6D 02 F6 | 	mov	local02, arg02
07230     30 6F 02 F6 | 	mov	local03, arg03
07234     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07238     1C 00 90 CD |  if_b	jmp	#LR__0382
0723c     01 00 00 FF 
07240     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07244     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07248     01 00 00 FF 
0724c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07250     01 2A 66 F6 | 	neg	result1, #1
07254     D8 00 90 FD | 	jmp	#LR__0386
07258                 | LR__0382
07258     35 71 02 F6 | 	mov	local04, local01
0725c     01 70 66 F0 | 	shl	local04, #1
07260     35 71 02 F1 | 	add	local04, local01
07264     04 70 66 F0 | 	shl	local04, #4
07268     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0726c     0A 71 02 F1 | 	add	local04, ptr___system__dat__
07270     2C 70 06 F1 | 	add	local04, #44
07274     38 73 0A FB | 	rdlong	local05, local04 wz
07278     2C 70 86 F1 | 	sub	local04, #44
0727c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07280     1C 00 90 5D |  if_ne	jmp	#LR__0383
07284     01 00 00 FF 
07288     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0728c     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07290     01 00 00 FF 
07294     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07298     01 2A 66 F6 | 	neg	result1, #1
0729c     90 00 90 FD | 	jmp	#LR__0386
072a0                 | LR__0383
072a0     08 70 06 F1 | 	add	local04, #8
072a4     38 73 02 FB | 	rdlong	local05, local04
072a8     08 70 86 F1 | 	sub	local04, #8
072ac     40 72 CE F7 | 	test	local05, #64 wz
072b0     14 00 90 AD |  if_e	jmp	#LR__0384
072b4     08 70 06 F1 | 	add	local04, #8
072b8     38 73 02 FB | 	rdlong	local05, local04
072bc     80 72 46 F5 | 	or	local05, #128
072c0     38 73 62 FC | 	wrlong	local05, local04
072c4     08 70 86 F1 | 	sub	local04, #8
072c8                 | LR__0384
072c8     2C 70 06 F1 | 	add	local04, #44
072cc     38 73 02 FB | 	rdlong	local05, local04
072d0     2C 70 86 F1 | 	sub	local04, #44
072d4     39 75 02 FB | 	rdlong	local06, local05
072d8     04 72 06 F1 | 	add	local05, #4
072dc     39 77 02 FB | 	rdlong	local07, local05
072e0     38 5D 02 F6 | 	mov	arg01, local04
072e4     36 5F 02 F6 | 	mov	arg02, local02
072e8     37 61 02 F6 | 	mov	arg03, local03
072ec     07 79 02 F6 | 	mov	local08, objptr
072f0     3A 0F 02 F6 | 	mov	objptr, local06
072f4     2D 76 62 FD | 	call	local07
072f8     3C 0F 02 F6 | 	mov	objptr, local08
072fc     15 7B 02 F6 | 	mov	local09, result1
07300     00 7A 5E F2 | 	cmps	local09, #0 wcz
07304     24 00 90 3D |  if_ae	jmp	#LR__0385
07308     3D 5D 6A F6 | 	neg	arg01, local09 wz
0730c     01 00 00 FF 
07310     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07314     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07318     01 00 00 FF 
0731c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07320     01 2A 66 56 |  if_ne	neg	result1, #1
07324     00 2A 06 A6 |  if_e	mov	result1, #0
07328     04 00 90 FD | 	jmp	#LR__0386
0732c                 | LR__0385
0732c     3D 2B 02 F6 | 	mov	result1, local09
07330                 | LR__0386
07330     AF F0 03 F6 | 	mov	ptra, fp
07334     BF 00 A0 FD | 	call	#popregs_
07338                 | __system__lseek_ret
07338     2D 00 64 FD | 	ret
0733c                 | 
0733c                 | __system____getftab
0733c     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
07340     00 2A 06 36 |  if_ae	mov	result1, #0
07344     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07348     2E 2B 02 F6 | 	mov	result1, arg01
0734c     01 2A 66 F0 | 	shl	result1, #1
07350     2E 2B 02 F1 | 	add	result1, arg01
07354     04 2A 66 F0 | 	shl	result1, #4
07358     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0735c     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
07360     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07364                 | __system____getftab_ret
07364     2D 00 64 FD | 	ret
07368                 | 
07368                 | __system___strrev
07368     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
0736c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07370     2E 33 02 F6 | 	mov	_var02, arg01
07374     94 8C 9F FE | 	loc	pa,	#(@LR__0388-@LR__0387)
07378     93 00 A0 FD | 	call	#FCACHE_LOAD_
0737c                 | LR__0387
0737c     19 31 CA FA | 	rdbyte	_var01, _var02 wz
07380     01 32 06 51 |  if_ne	add	_var02, #1
07384     F4 FF 9F 5D |  if_ne	jmp	#LR__0387
07388                 | LR__0388
07388     01 32 86 F1 | 	sub	_var02, #1
0738c                 | LR__0389
0738c     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07390     1C 00 90 ED |  if_be	jmp	#LR__0390
07394     2E 35 C2 FA | 	rdbyte	_var03, arg01
07398     19 37 C2 FA | 	rdbyte	_var04, _var02
0739c     2E 37 42 FC | 	wrbyte	_var04, arg01
073a0     19 35 42 FC | 	wrbyte	_var03, _var02
073a4     01 5C 06 F1 | 	add	arg01, #1
073a8     01 32 86 F1 | 	sub	_var02, #1
073ac     DC FF 9F FD | 	jmp	#LR__0389
073b0                 | LR__0390
073b0                 | __system___strrev_ret
073b0     2D 00 64 FD | 	ret
073b4                 | 
073b4                 | __system___fmtpad
073b4     0C 5A 05 F6 | 	mov	COUNT_, #12
073b8     B0 00 A0 FD | 	call	#pushregs_
073bc     2E 6B 02 F6 | 	mov	local01, arg01
073c0     2F 6D 02 F6 | 	mov	local02, arg02
073c4     31 6F 02 F6 | 	mov	local03, arg04
073c8     36 71 EA F8 | 	getbyte	local04, local02, #1
073cc     16 6C 46 F0 | 	shr	local02, #22
073d0     03 6C 0E F5 | 	and	local02, #3 wz
073d4     00 72 06 F6 | 	mov	local05, #0
073d8     01 6C 06 A6 |  if_e	mov	local02, #1
073dc     37 6D CA F7 | 	test	local02, local03 wz
073e0     00 2A 06 A6 |  if_e	mov	result1, #0
073e4     80 00 90 AD |  if_e	jmp	#LR__0394
073e8     30 71 82 F1 | 	sub	local04, arg03
073ec     38 75 02 F6 | 	mov	local06, local04
073f0     00 74 5E F2 | 	cmps	local06, #0 wcz
073f4     00 2A 06 E6 |  if_be	mov	result1, #0
073f8     6C 00 90 ED |  if_be	jmp	#LR__0394
073fc     03 6C 0E F2 | 	cmp	local02, #3 wz
07400     18 00 90 5D |  if_ne	jmp	#LR__0391
07404     01 6E 0E F2 | 	cmp	local03, #1 wz
07408     6E 76 62 FD | 	wrz	local07
0740c     3B 75 02 F1 | 	add	local06, local07
07410     3A 75 52 F6 | 	abs	local06, local06 wc
07414     01 74 46 F0 | 	shr	local06, #1
07418     3A 75 62 C6 |  if_b	neg	local06, local06
0741c                 | LR__0391
0741c     00 74 5E F2 | 	cmps	local06, #0 wcz
07420     40 00 90 ED |  if_be	jmp	#LR__0393
07424     3A 79 02 F6 | 	mov	local08, local06
07428                 | LR__0392
07428     35 7B 02 F6 | 	mov	local09, local01
0742c     3D 77 02 FB | 	rdlong	local07, local09
07430     04 7A 06 F1 | 	add	local09, #4
07434     3D 7D 02 FB | 	rdlong	local10, local09
07438     20 5C 06 F6 | 	mov	arg01, #32
0743c     07 7F 02 F6 | 	mov	local11, objptr
07440     3B 0F 02 F6 | 	mov	objptr, local07
07444     2D 7C 62 FD | 	call	local10
07448     3F 0F 02 F6 | 	mov	objptr, local11
0744c     15 81 02 F6 | 	mov	local12, result1
07450     00 80 5E F2 | 	cmps	local12, #0 wcz
07454     40 2B 02 C6 |  if_b	mov	result1, local12
07458     0C 00 90 CD |  if_b	jmp	#LR__0394
0745c     40 73 02 F1 | 	add	local05, local12
07460     F1 79 6E FB | 	djnz	local08, #LR__0392
07464                 | LR__0393
07464     39 2B 02 F6 | 	mov	result1, local05
07468                 | LR__0394
07468     AF F0 03 F6 | 	mov	ptra, fp
0746c     BF 00 A0 FD | 	call	#popregs_
07470                 | __system___fmtpad_ret
07470     2D 00 64 FD | 	ret
07474                 | 
07474                 | __system___uitoa
07474     09 5A 05 F6 | 	mov	COUNT_, #9
07478     B0 00 A0 FD | 	call	#pushregs_
0747c     2E 6B 02 F6 | 	mov	local01, arg01
07480     2F 6D 02 F6 | 	mov	local02, arg02
07484     30 6F 02 F6 | 	mov	local03, arg03
07488     31 71 02 F6 | 	mov	local04, arg04
0748c     32 73 0A F6 | 	mov	local05, arg05 wz
07490     35 75 02 F6 | 	mov	local06, local01
07494     00 76 06 F6 | 	mov	local07, #0
07498     37 78 06 56 |  if_ne	mov	local08, #55
0749c     57 78 06 A6 |  if_e	mov	local08, #87
074a0                 | LR__0395
074a0     36 0B 03 F6 | 	mov	muldiva_, local02
074a4     37 0D 03 F6 | 	mov	muldivb_, local03
074a8     CC 00 A0 FD | 	call	#unsdivide_
074ac     85 7B 02 F6 | 	mov	local09, muldiva_
074b0     0A 7A 1E F2 | 	cmp	local09, #10 wcz
074b4     30 7A 06 C1 |  if_b	add	local09, #48
074b8     3C 7B 02 31 |  if_ae	add	local09, local08
074bc     3A 7B 42 FC | 	wrbyte	local09, local06
074c0     36 0B 03 F6 | 	mov	muldiva_, local02
074c4     37 0D 03 F6 | 	mov	muldivb_, local03
074c8     01 74 06 F1 | 	add	local06, #1
074cc     CC 00 A0 FD | 	call	#unsdivide_
074d0     86 6D 0A F6 | 	mov	local02, muldivb_ wz
074d4     01 76 06 F1 | 	add	local07, #1
074d8     C4 FF 9F 5D |  if_ne	jmp	#LR__0395
074dc     38 77 1A F2 | 	cmp	local07, local04 wcz
074e0     BC FF 9F CD |  if_b	jmp	#LR__0395
074e4     3A 01 48 FC | 	wrbyte	#0, local06
074e8     35 5D 02 F6 | 	mov	arg01, local01
074ec     78 FE BF FD | 	call	#__system___strrev
074f0     3B 2B 02 F6 | 	mov	result1, local07
074f4     AF F0 03 F6 | 	mov	ptra, fp
074f8     BF 00 A0 FD | 	call	#popregs_
074fc                 | __system___uitoa_ret
074fc     2D 00 64 FD | 	ret
07500                 | 
07500                 | __system___gettxfunc
07500     03 5A 05 F6 | 	mov	COUNT_, #3
07504     B0 00 A0 FD | 	call	#pushregs_
07508     30 FE BF FD | 	call	#__system____getftab
0750c     15 6B 0A F6 | 	mov	local01, result1 wz
07510     14 00 90 AD |  if_e	jmp	#LR__0396
07514     08 6A 06 F1 | 	add	local01, #8
07518     35 6D 02 FB | 	rdlong	local02, local01
0751c     08 6A 86 F1 | 	sub	local01, #8
07520     36 6F 0A F6 | 	mov	local03, local02 wz
07524     08 00 90 5D |  if_ne	jmp	#LR__0397
07528                 | LR__0396
07528     00 2A 06 F6 | 	mov	result1, #0
0752c     0C 00 90 FD | 	jmp	#LR__0398
07530                 | LR__0397
07530     35 5D 02 F6 | 	mov	arg01, local01
07534     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07538     88 E9 BF FD | 	call	#__system___make_methodptr
0753c                 | LR__0398
0753c     AF F0 03 F6 | 	mov	ptra, fp
07540     BF 00 A0 FD | 	call	#popregs_
07544                 | __system___gettxfunc_ret
07544     2D 00 64 FD | 	ret
07548                 | 
07548                 | __system___getiolock_0145
07548     03 5A 05 F6 | 	mov	COUNT_, #3
0754c     B0 00 A0 FD | 	call	#pushregs_
07550     E8 FD BF FD | 	call	#__system____getftab
07554     15 6B 0A F6 | 	mov	local01, result1 wz
07558     14 00 90 AD |  if_e	jmp	#LR__0399
0755c     08 6A 06 F1 | 	add	local01, #8
07560     35 6D 02 FB | 	rdlong	local02, local01
07564     08 6A 86 F1 | 	sub	local01, #8
07568     36 6F 0A F6 | 	mov	local03, local02 wz
0756c     10 00 90 5D |  if_ne	jmp	#LR__0400
07570                 | LR__0399
07570     18 14 06 F1 | 	add	ptr___system__dat__, #24
07574     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07578     18 14 86 F1 | 	sub	ptr___system__dat__, #24
0757c     08 00 90 FD | 	jmp	#LR__0401
07580                 | LR__0400
07580     0C 6A 06 F1 | 	add	local01, #12
07584     35 2B 02 F6 | 	mov	result1, local01
07588                 | LR__0401
07588     AF F0 03 F6 | 	mov	ptra, fp
0758c     BF 00 A0 FD | 	call	#popregs_
07590                 | __system___getiolock_0145_ret
07590     2D 00 64 FD | 	ret
07594                 | 
07594                 | __system___closeraw
07594     06 5A 05 F6 | 	mov	COUNT_, #6
07598     B0 00 A0 FD | 	call	#pushregs_
0759c     2E 6B 02 F6 | 	mov	local01, arg01
075a0     00 6C 06 F6 | 	mov	local02, #0
075a4     08 6A 06 F1 | 	add	local01, #8
075a8     35 6F 0A FB | 	rdlong	local03, local01 wz
075ac     08 6A 86 F1 | 	sub	local01, #8
075b0     1C 00 90 5D |  if_ne	jmp	#LR__0402
075b4     01 00 00 FF 
075b8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
075bc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075c0     01 00 00 FF 
075c4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
075c8     01 2A 66 F6 | 	neg	result1, #1
075cc     90 00 90 FD | 	jmp	#LR__0405
075d0                 | LR__0402
075d0     28 6A 06 F1 | 	add	local01, #40
075d4     35 6F 0A FB | 	rdlong	local03, local01 wz
075d8     28 6A 86 F1 | 	sub	local01, #40
075dc     2C 00 90 AD |  if_e	jmp	#LR__0403
075e0     28 6A 06 F1 | 	add	local01, #40
075e4     35 6F 02 FB | 	rdlong	local03, local01
075e8     28 6A 86 F1 | 	sub	local01, #40
075ec     37 71 02 FB | 	rdlong	local04, local03
075f0     04 6E 06 F1 | 	add	local03, #4
075f4     37 73 02 FB | 	rdlong	local05, local03
075f8     35 5D 02 F6 | 	mov	arg01, local01
075fc     07 75 02 F6 | 	mov	local06, objptr
07600     38 0F 02 F6 | 	mov	objptr, local04
07604     2D 72 62 FD | 	call	local05
07608     3A 0F 02 F6 | 	mov	objptr, local06
0760c                 | LR__0403
0760c     20 6A 06 F1 | 	add	local01, #32
07610     35 6F 0A FB | 	rdlong	local03, local01 wz
07614     20 6A 86 F1 | 	sub	local01, #32
07618     30 00 90 AD |  if_e	jmp	#LR__0404
0761c     20 6A 06 F1 | 	add	local01, #32
07620     35 6F 02 FB | 	rdlong	local03, local01
07624     20 6A 86 F1 | 	sub	local01, #32
07628     37 71 02 FB | 	rdlong	local04, local03
0762c     04 6E 06 F1 | 	add	local03, #4
07630     37 73 02 FB | 	rdlong	local05, local03
07634     35 5D 02 F6 | 	mov	arg01, local01
07638     07 75 02 F6 | 	mov	local06, objptr
0763c     38 0F 02 F6 | 	mov	objptr, local04
07640     2D 72 62 FD | 	call	local05
07644     3A 0F 02 F6 | 	mov	objptr, local06
07648     15 6D 02 F6 | 	mov	local02, result1
0764c                 | LR__0404
0764c     35 5D 02 F6 | 	mov	arg01, local01
07650     00 5E 06 F6 | 	mov	arg02, #0
07654     30 60 06 F6 | 	mov	arg03, #48
07658     A0 00 A0 FD | 	call	#\builtin_bytefill_
0765c     36 2B 02 F6 | 	mov	result1, local02
07660                 | LR__0405
07660     AF F0 03 F6 | 	mov	ptra, fp
07664     BF 00 A0 FD | 	call	#popregs_
07668                 | __system___closeraw_ret
07668     2D 00 64 FD | 	ret
0766c                 | 
0766c                 | __system____default_getc
0766c     0C 5A 05 F6 | 	mov	COUNT_, #12
07670     B0 00 A0 FD | 	call	#pushregs_
07674     2E 6B 02 F6 | 	mov	local01, arg01
07678     35 6D 02 FB | 	rdlong	local02, local01
0767c     08 6C 06 F1 | 	add	local02, #8
07680     36 6F 02 FB | 	rdlong	local03, local02
07684     08 6C 86 F1 | 	sub	local02, #8
07688     02 6E CE F7 | 	test	local03, #2 wz
0768c     08 00 90 AD |  if_e	jmp	#LR__0406
07690     35 5D 02 F6 | 	mov	arg01, local01
07694     FC 01 B0 FD | 	call	#__system____default_flush
07698                 | LR__0406
07698     08 6C 06 F1 | 	add	local02, #8
0769c     36 6F 02 FB | 	rdlong	local03, local02
076a0     01 6E 46 F5 | 	or	local03, #1
076a4     36 6F 62 FC | 	wrlong	local03, local02
076a8     08 6C 86 F1 | 	sub	local02, #8
076ac     36 71 0A FB | 	rdlong	local04, local02 wz
076b0     7C 00 90 5D |  if_ne	jmp	#LR__0408
076b4     35 5D 02 F6 | 	mov	arg01, local01
076b8     2E 73 02 FB | 	rdlong	local05, arg01
076bc     0C 72 06 F1 | 	add	local05, #12
076c0     39 5F 02 F6 | 	mov	arg02, local05
076c4     0C 72 86 F1 | 	sub	local05, #12
076c8     10 5C 06 F1 | 	add	arg01, #16
076cc     2E 75 02 FB | 	rdlong	local06, arg01
076d0     10 5C 86 F1 | 	sub	arg01, #16
076d4     3A 77 02 FB | 	rdlong	local07, local06
076d8     04 74 06 F1 | 	add	local06, #4
076dc     3A 79 02 FB | 	rdlong	local08, local06
076e0     0A 60 C6 F9 | 	decod	arg03, #10
076e4     07 7B 02 F6 | 	mov	local09, objptr
076e8     3B 0F 02 F6 | 	mov	objptr, local07
076ec     2D 78 62 FD | 	call	local08
076f0     3D 0F 02 F6 | 	mov	objptr, local09
076f4     15 7D 02 F6 | 	mov	local10, result1
076f8     00 7C 5E F2 | 	cmps	local10, #0 wcz
076fc     01 2A 66 C6 |  if_b	neg	result1, #1
07700     28 00 90 CD |  if_b	jmp	#LR__0407
07704     39 7D 62 FC | 	wrlong	local10, local05
07708     0C 72 06 F1 | 	add	local05, #12
0770c     39 7F 02 F6 | 	mov	local11, local05
07710     08 72 86 F1 | 	sub	local05, #8
07714     39 7F 62 FC | 	wrlong	local11, local05
07718     04 72 06 F1 | 	add	local05, #4
0771c     39 75 02 FB | 	rdlong	local06, local05
07720     01 74 46 F5 | 	or	local06, #1
07724     39 75 62 FC | 	wrlong	local06, local05
07728     3E 2B 02 F6 | 	mov	result1, local10
0772c                 | LR__0407
0772c     15 71 02 F6 | 	mov	local04, result1
07730                 | LR__0408
07730     00 70 5E F2 | 	cmps	local04, #0 wcz
07734     01 2A 66 E6 |  if_be	neg	result1, #1
07738     1C 00 90 ED |  if_be	jmp	#LR__0409
0773c     01 70 86 F1 | 	sub	local04, #1
07740     36 71 62 FC | 	wrlong	local04, local02
07744     04 6C 06 F1 | 	add	local02, #4
07748     36 81 02 FB | 	rdlong	local12, local02
0774c     40 2B C2 FA | 	rdbyte	result1, local12
07750     01 80 06 F1 | 	add	local12, #1
07754     36 81 62 FC | 	wrlong	local12, local02
07758                 | LR__0409
07758     AF F0 03 F6 | 	mov	ptra, fp
0775c     BF 00 A0 FD | 	call	#popregs_
07760                 | __system____default_getc_ret
07760     2D 00 64 FD | 	ret
07764                 | 
07764                 | __system____default_putc
07764     06 5A 05 F6 | 	mov	COUNT_, #6
07768     B0 00 A0 FD | 	call	#pushregs_
0776c     2E 6B 02 F6 | 	mov	local01, arg01
07770     2F 6D 02 F6 | 	mov	local02, arg02
07774     36 6F 02 FB | 	rdlong	local03, local02
07778     08 6E 06 F1 | 	add	local03, #8
0777c     37 71 02 FB | 	rdlong	local04, local03
07780     08 6E 86 F1 | 	sub	local03, #8
07784     01 70 CE F7 | 	test	local04, #1 wz
07788     08 00 90 AD |  if_e	jmp	#LR__0410
0778c     36 5D 02 F6 | 	mov	arg01, local02
07790     00 01 B0 FD | 	call	#__system____default_flush
07794                 | LR__0410
07794     08 6E 06 F1 | 	add	local03, #8
07798     37 71 02 FB | 	rdlong	local04, local03
0779c     02 70 46 F5 | 	or	local04, #2
077a0     37 71 62 FC | 	wrlong	local04, local03
077a4     08 6E 86 F1 | 	sub	local03, #8
077a8     37 73 02 FB | 	rdlong	local05, local03
077ac     39 75 02 F6 | 	mov	local06, local05
077b0     0C 6E 06 F1 | 	add	local03, #12
077b4     37 75 02 F1 | 	add	local06, local03
077b8     3A 6B 42 FC | 	wrbyte	local01, local06
077bc     FF 6A 06 F5 | 	and	local01, #255
077c0     01 72 06 F1 | 	add	local05, #1
077c4     0C 6E 86 F1 | 	sub	local03, #12
077c8     37 73 62 FC | 	wrlong	local05, local03
077cc     02 00 00 FF 
077d0     00 72 0E F2 | 	cmp	local05, ##1024 wz
077d4     10 00 90 5D |  if_ne	jmp	#LR__0411
077d8     36 5D 02 F6 | 	mov	arg01, local02
077dc     B4 00 B0 FD | 	call	#__system____default_flush
077e0     00 2A 0E F2 | 	cmp	result1, #0 wz
077e4     01 6A 66 56 |  if_ne	neg	local01, #1
077e8                 | LR__0411
077e8     35 2B 02 F6 | 	mov	result1, local01
077ec     AF F0 03 F6 | 	mov	ptra, fp
077f0     BF 00 A0 FD | 	call	#popregs_
077f4                 | __system____default_putc_ret
077f4     2D 00 64 FD | 	ret
077f8                 | 
077f8                 | __system____default_putc_terminal
077f8     06 5A 05 F6 | 	mov	COUNT_, #6
077fc     B0 00 A0 FD | 	call	#pushregs_
07800     2E 6B 02 F6 | 	mov	local01, arg01
07804     2F 6D 02 F6 | 	mov	local02, arg02
07808     36 6F 02 FB | 	rdlong	local03, local02
0780c     08 6E 06 F1 | 	add	local03, #8
07810     37 71 02 FB | 	rdlong	local04, local03
07814     08 6E 86 F1 | 	sub	local03, #8
07818     01 70 CE F7 | 	test	local04, #1 wz
0781c     08 00 90 AD |  if_e	jmp	#LR__0412
07820     36 5D 02 F6 | 	mov	arg01, local02
07824     6C 00 B0 FD | 	call	#__system____default_flush
07828                 | LR__0412
07828     08 6E 06 F1 | 	add	local03, #8
0782c     37 71 02 FB | 	rdlong	local04, local03
07830     02 70 46 F5 | 	or	local04, #2
07834     37 71 62 FC | 	wrlong	local04, local03
07838     08 6E 86 F1 | 	sub	local03, #8
0783c     37 73 02 FB | 	rdlong	local05, local03
07840     39 75 02 F6 | 	mov	local06, local05
07844     0C 6E 06 F1 | 	add	local03, #12
07848     37 75 02 F1 | 	add	local06, local03
0784c     3A 6B 42 FC | 	wrbyte	local01, local06
07850     FF 6A 06 F5 | 	and	local01, #255
07854     0C 6E 86 F1 | 	sub	local03, #12
07858     01 72 06 F1 | 	add	local05, #1
0785c     37 73 62 FC | 	wrlong	local05, local03
07860     0A 6A 0E F2 | 	cmp	local01, #10 wz
07864     0C 00 90 AD |  if_e	jmp	#LR__0413
07868     02 00 00 FF 
0786c     00 72 0E F2 | 	cmp	local05, ##1024 wz
07870     10 00 90 5D |  if_ne	jmp	#LR__0414
07874                 | LR__0413
07874     36 5D 02 F6 | 	mov	arg01, local02
07878     18 00 B0 FD | 	call	#__system____default_flush
0787c     00 2A 0E F2 | 	cmp	result1, #0 wz
07880     01 6A 66 56 |  if_ne	neg	local01, #1
07884                 | LR__0414
07884     35 2B 02 F6 | 	mov	result1, local01
07888     AF F0 03 F6 | 	mov	ptra, fp
0788c     BF 00 A0 FD | 	call	#popregs_
07890                 | __system____default_putc_terminal_ret
07890     2D 00 64 FD | 	ret
07894                 | 
07894                 | __system____default_flush
07894     0F 5A 05 F6 | 	mov	COUNT_, #15
07898     B0 00 A0 FD | 	call	#pushregs_
0789c     2E 6B 02 F6 | 	mov	local01, arg01
078a0     35 6D 02 FB | 	rdlong	local02, local01
078a4     36 6F 02 FB | 	rdlong	local03, local02
078a8     08 6C 06 F1 | 	add	local02, #8
078ac     36 71 02 FB | 	rdlong	local04, local02
078b0     08 6C 86 F1 | 	sub	local02, #8
078b4     02 70 CE F7 | 	test	local04, #2 wz
078b8     B8 00 90 AD |  if_e	jmp	#LR__0417
078bc     00 6E 5E F2 | 	cmps	local03, #0 wcz
078c0     30 01 90 ED |  if_be	jmp	#LR__0419
078c4     08 6A 06 F1 | 	add	local01, #8
078c8     35 71 02 FB | 	rdlong	local04, local01
078cc     08 6A 86 F1 | 	sub	local01, #8
078d0     40 70 CE F7 | 	test	local04, #64 wz
078d4     5C 00 90 AD |  if_e	jmp	#LR__0416
078d8     08 6A 06 F1 | 	add	local01, #8
078dc     35 71 02 FB | 	rdlong	local04, local01
078e0     08 6A 86 F1 | 	sub	local01, #8
078e4     80 70 CE F7 | 	test	local04, #128 wz
078e8     48 00 90 AD |  if_e	jmp	#LR__0415
078ec     2C 6A 06 F1 | 	add	local01, #44
078f0     35 71 02 FB | 	rdlong	local04, local01
078f4     2C 6A 86 F1 | 	sub	local01, #44
078f8     38 73 02 FB | 	rdlong	local05, local04
078fc     04 70 06 F1 | 	add	local04, #4
07900     38 75 02 FB | 	rdlong	local06, local04
07904     35 5D 02 F6 | 	mov	arg01, local01
07908     00 5E 06 F6 | 	mov	arg02, #0
0790c     02 60 06 F6 | 	mov	arg03, #2
07910     07 77 02 F6 | 	mov	local07, objptr
07914     39 0F 02 F6 | 	mov	objptr, local05
07918     2D 74 62 FD | 	call	local06
0791c     3B 0F 02 F6 | 	mov	objptr, local07
07920     08 6A 06 F1 | 	add	local01, #8
07924     35 71 02 FB | 	rdlong	local04, local01
07928     80 70 26 F5 | 	andn	local04, #128
0792c     35 71 62 FC | 	wrlong	local04, local01
07930     08 6A 86 F1 | 	sub	local01, #8
07934                 | LR__0415
07934                 | LR__0416
07934     0C 6C 06 F1 | 	add	local02, #12
07938     36 5F 02 F6 | 	mov	arg02, local02
0793c     0C 6C 86 F1 | 	sub	local02, #12
07940     14 6A 06 F1 | 	add	local01, #20
07944     35 71 02 FB | 	rdlong	local04, local01
07948     14 6A 86 F1 | 	sub	local01, #20
0794c     38 73 02 FB | 	rdlong	local05, local04
07950     04 70 06 F1 | 	add	local04, #4
07954     38 75 02 FB | 	rdlong	local06, local04
07958     35 5D 02 F6 | 	mov	arg01, local01
0795c     37 61 02 F6 | 	mov	arg03, local03
07960     07 77 02 F6 | 	mov	local07, objptr
07964     39 0F 02 F6 | 	mov	objptr, local05
07968     2D 74 62 FD | 	call	local06
0796c     3B 0F 02 F6 | 	mov	objptr, local07
07970     80 00 90 FD | 	jmp	#LR__0419
07974                 | LR__0417
07974     08 6C 06 F1 | 	add	local02, #8
07978     36 71 02 FB | 	rdlong	local04, local02
0797c     08 6C 86 F1 | 	sub	local02, #8
07980     01 70 CE F7 | 	test	local04, #1 wz
07984     6C 00 90 AD |  if_e	jmp	#LR__0418
07988     00 6E 0E F2 | 	cmp	local03, #0 wz
0798c     64 00 90 AD |  if_e	jmp	#LR__0418
07990     2C 6A 06 F1 | 	add	local01, #44
07994     35 79 02 FB | 	rdlong	local08, local01
07998     2C 6A 86 F1 | 	sub	local01, #44
0799c     3C 71 02 F6 | 	mov	local04, local08
079a0     38 73 02 FB | 	rdlong	local05, local04
079a4     04 70 06 F1 | 	add	local04, #4
079a8     38 7B 02 FB | 	rdlong	local09, local04
079ac     04 70 86 F1 | 	sub	local04, #4
079b0     3D 75 02 F6 | 	mov	local06, local09
079b4     35 7D 02 F6 | 	mov	local10, local01
079b8     37 7F 02 F6 | 	mov	local11, local03
079bc     3F 7F 62 F6 | 	neg	local11, local11
079c0     3F 81 02 F6 | 	mov	local12, local11
079c4     01 76 06 F6 | 	mov	local07, #1
079c8     3E 5D 02 F6 | 	mov	arg01, local10
079cc     40 5F 02 F6 | 	mov	arg02, local12
079d0     01 60 06 F6 | 	mov	arg03, #1
079d4     07 83 02 F6 | 	mov	local13, objptr
079d8     39 0F 02 F6 | 	mov	objptr, local05
079dc     2D 74 62 FD | 	call	local06
079e0     41 0F 02 F6 | 	mov	objptr, local13
079e4     15 85 02 F6 | 	mov	local14, result1
079e8     42 87 02 F6 | 	mov	local15, local14
079ec     00 86 5E F2 | 	cmps	local15, #0 wcz
079f0     37 87 02 36 |  if_ae	mov	local15, local03
079f4                 | LR__0418
079f4                 | LR__0419
079f4     36 01 68 FC | 	wrlong	#0, local02
079f8     04 6C 06 F1 | 	add	local02, #4
079fc     36 01 68 FC | 	wrlong	#0, local02
07a00     04 6C 06 F1 | 	add	local02, #4
07a04     36 01 68 FC | 	wrlong	#0, local02
07a08     00 2A 06 F6 | 	mov	result1, #0
07a0c     AF F0 03 F6 | 	mov	ptra, fp
07a10     BF 00 A0 FD | 	call	#popregs_
07a14                 | __system____default_flush_ret
07a14     2D 00 64 FD | 	ret
07a18                 | 
07a18                 | __system___rxtxioctl_0174
07a18     02 5A 05 F6 | 	mov	COUNT_, #2
07a1c     B0 00 A0 FD | 	call	#pushregs_
07a20     2F 6B 02 F6 | 	mov	local01, arg02
07a24     30 6D 02 F6 | 	mov	local02, arg03
07a28     00 6B 0E F2 | 	cmp	local01, #256 wz
07a2c     0C 00 90 AD |  if_e	jmp	#LR__0420
07a30     01 6B 0E F2 | 	cmp	local01, #257 wz
07a34     1C 00 90 AD |  if_e	jmp	#LR__0421
07a38     30 00 90 FD | 	jmp	#LR__0422
07a3c                 | LR__0420
07a3c     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a40     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07a44     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a48     36 2B 62 FC | 	wrlong	result1, local02
07a4c     00 2A 06 F6 | 	mov	result1, #0
07a50     30 00 90 FD | 	jmp	#LR__0423
07a54                 | LR__0421
07a54     36 5D 02 FB | 	rdlong	arg01, local02
07a58     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a5c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07a60     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a64     00 2A 06 F6 | 	mov	result1, #0
07a68     18 00 90 FD | 	jmp	#LR__0423
07a6c                 | LR__0422
07a6c     01 00 00 FF 
07a70     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a74     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07a78     01 00 00 FF 
07a7c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a80     01 2A 66 F6 | 	neg	result1, #1
07a84                 | LR__0423
07a84     AF F0 03 F6 | 	mov	ptra, fp
07a88     BF 00 A0 FD | 	call	#popregs_
07a8c                 | __system___rxtxioctl_0174_ret
07a8c     2D 00 64 FD | 	ret
07a90                 | 
07a90                 | __system____dummy_flush_0175
07a90     00 2A 06 F6 | 	mov	result1, #0
07a94                 | __system____dummy_flush_0175_ret
07a94     2D 00 64 FD | 	ret
07a98                 | 
07a98                 | __system___vfswrite
07a98     0B 5A 05 F6 | 	mov	COUNT_, #11
07a9c     B0 00 A0 FD | 	call	#pushregs_
07aa0     2E 6B 02 F6 | 	mov	local01, arg01
07aa4     2F 6D 02 F6 | 	mov	local02, arg02
07aa8     30 6F 02 F6 | 	mov	local03, arg03
07aac     36 71 02 F6 | 	mov	local04, local02
07ab0     08 6A 06 F1 | 	add	local01, #8
07ab4     35 73 02 FB | 	rdlong	local05, local01
07ab8     08 6A 86 F1 | 	sub	local01, #8
07abc     02 72 CE F7 | 	test	local05, #2 wz
07ac0     1C 00 90 5D |  if_ne	jmp	#LR__0424
07ac4     01 00 00 FF 
07ac8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07acc     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07ad0     01 00 00 FF 
07ad4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07ad8     01 2A 66 F6 | 	neg	result1, #1
07adc     70 01 90 FD | 	jmp	#LR__0432
07ae0                 | LR__0424
07ae0     08 6A 06 F1 | 	add	local01, #8
07ae4     35 73 02 FB | 	rdlong	local05, local01
07ae8     08 6A 86 F1 | 	sub	local01, #8
07aec     40 72 CE F7 | 	test	local05, #64 wz
07af0     5C 00 90 AD |  if_e	jmp	#LR__0426
07af4     08 6A 06 F1 | 	add	local01, #8
07af8     35 73 02 FB | 	rdlong	local05, local01
07afc     08 6A 86 F1 | 	sub	local01, #8
07b00     80 72 CE F7 | 	test	local05, #128 wz
07b04     48 00 90 AD |  if_e	jmp	#LR__0425
07b08     2C 6A 06 F1 | 	add	local01, #44
07b0c     35 73 02 FB | 	rdlong	local05, local01
07b10     2C 6A 86 F1 | 	sub	local01, #44
07b14     39 75 02 FB | 	rdlong	local06, local05
07b18     04 72 06 F1 | 	add	local05, #4
07b1c     39 77 02 FB | 	rdlong	local07, local05
07b20     35 5D 02 F6 | 	mov	arg01, local01
07b24     00 5E 06 F6 | 	mov	arg02, #0
07b28     02 60 06 F6 | 	mov	arg03, #2
07b2c     07 79 02 F6 | 	mov	local08, objptr
07b30     3A 0F 02 F6 | 	mov	objptr, local06
07b34     2D 76 62 FD | 	call	local07
07b38     3C 0F 02 F6 | 	mov	objptr, local08
07b3c     08 6A 06 F1 | 	add	local01, #8
07b40     35 73 02 FB | 	rdlong	local05, local01
07b44     80 72 26 F5 | 	andn	local05, #128
07b48     35 73 62 FC | 	wrlong	local05, local01
07b4c     08 6A 86 F1 | 	sub	local01, #8
07b50                 | LR__0425
07b50                 | LR__0426
07b50     14 6A 06 F1 | 	add	local01, #20
07b54     35 73 0A FB | 	rdlong	local05, local01 wz
07b58     14 6A 86 F1 | 	sub	local01, #20
07b5c     7C 00 90 AD |  if_e	jmp	#LR__0428
07b60     14 6A 06 F1 | 	add	local01, #20
07b64     35 73 02 FB | 	rdlong	local05, local01
07b68     14 6A 86 F1 | 	sub	local01, #20
07b6c     39 75 02 FB | 	rdlong	local06, local05
07b70     04 72 06 F1 | 	add	local05, #4
07b74     39 77 02 FB | 	rdlong	local07, local05
07b78     36 5F 02 F6 | 	mov	arg02, local02
07b7c     37 61 02 F6 | 	mov	arg03, local03
07b80     35 5D 02 F6 | 	mov	arg01, local01
07b84     07 79 02 F6 | 	mov	local08, objptr
07b88     3A 0F 02 F6 | 	mov	objptr, local06
07b8c     2D 76 62 FD | 	call	local07
07b90     3C 0F 02 F6 | 	mov	objptr, local08
07b94     15 7B 02 F6 | 	mov	local09, result1
07b98     00 7A 5E F2 | 	cmps	local09, #0 wcz
07b9c     34 00 90 3D |  if_ae	jmp	#LR__0427
07ba0     08 6A 06 F1 | 	add	local01, #8
07ba4     35 73 02 FB | 	rdlong	local05, local01
07ba8     20 72 46 F5 | 	or	local05, #32
07bac     35 73 62 FC | 	wrlong	local05, local01
07bb0     01 00 00 FF 
07bb4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bb8     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07bbc     01 00 00 FF 
07bc0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bc4     00 7A 0E F2 | 	cmp	local09, #0 wz
07bc8     01 2A 66 56 |  if_ne	neg	result1, #1
07bcc     00 2A 06 A6 |  if_e	mov	result1, #0
07bd0     7C 00 90 FD | 	jmp	#LR__0432
07bd4                 | LR__0427
07bd4     3D 2B 02 F6 | 	mov	result1, local09
07bd8     74 00 90 FD | 	jmp	#LR__0432
07bdc                 | LR__0428
07bdc     18 6A 06 F1 | 	add	local01, #24
07be0     35 7D 0A FB | 	rdlong	local10, local01 wz
07be4     18 6A 86 F1 | 	sub	local01, #24
07be8     1C 00 90 5D |  if_ne	jmp	#LR__0429
07bec     01 00 00 FF 
07bf0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bf4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07bf8     01 00 00 FF 
07bfc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c00     01 2A 66 F6 | 	neg	result1, #1
07c04     48 00 90 FD | 	jmp	#LR__0432
07c08                 | LR__0429
07c08     00 7A 06 F6 | 	mov	local09, #0
07c0c                 | LR__0430
07c0c     00 6E 1E F2 | 	cmp	local03, #0 wcz
07c10     38 00 90 ED |  if_be	jmp	#LR__0431
07c14     3E 73 02 F6 | 	mov	local05, local10
07c18     39 75 02 FB | 	rdlong	local06, local05
07c1c     04 72 06 F1 | 	add	local05, #4
07c20     39 77 02 FB | 	rdlong	local07, local05
07c24     38 5D C2 FA | 	rdbyte	arg01, local04
07c28     35 5F 02 F6 | 	mov	arg02, local01
07c2c     07 7F 02 F6 | 	mov	local11, objptr
07c30     3A 0F 02 F6 | 	mov	objptr, local06
07c34     01 70 06 F1 | 	add	local04, #1
07c38     2D 76 62 FD | 	call	local07
07c3c     3F 0F 02 F6 | 	mov	objptr, local11
07c40     15 7B 02 F1 | 	add	local09, result1
07c44     01 6E 86 F1 | 	sub	local03, #1
07c48     C0 FF 9F FD | 	jmp	#LR__0430
07c4c                 | LR__0431
07c4c     3D 2B 02 F6 | 	mov	result1, local09
07c50                 | LR__0432
07c50     AF F0 03 F6 | 	mov	ptra, fp
07c54     BF 00 A0 FD | 	call	#popregs_
07c58                 | __system___vfswrite_ret
07c58     2D 00 64 FD | 	ret
07c5c                 | 
07c5c                 | __system___vfsread
07c5c     0F 5A 05 F6 | 	mov	COUNT_, #15
07c60     B0 00 A0 FD | 	call	#pushregs_
07c64     2C F0 07 F1 | 	add	ptra, #44
07c68     04 5E 05 F1 | 	add	fp, #4
07c6c     AF 5C 62 FC | 	wrlong	arg01, fp
07c70     04 5E 05 F1 | 	add	fp, #4
07c74     AF 5E 62 FC | 	wrlong	arg02, fp
07c78     04 5E 05 F1 | 	add	fp, #4
07c7c     AF 60 62 FC | 	wrlong	arg03, fp
07c80     04 5E 85 F1 | 	sub	fp, #4
07c84     AF 6A 02 FB | 	rdlong	local01, fp
07c88     14 5E 05 F1 | 	add	fp, #20
07c8c     AF 6A 62 FC | 	wrlong	local01, fp
07c90     04 5E 05 F1 | 	add	fp, #4
07c94     AF 00 68 FC | 	wrlong	#0, fp
07c98     1C 5E 85 F1 | 	sub	fp, #28
07c9c     AF 6C 02 FB | 	rdlong	local02, fp
07ca0     04 5E 85 F1 | 	sub	fp, #4
07ca4     08 6C 06 F1 | 	add	local02, #8
07ca8     36 6B 02 FB | 	rdlong	local01, local02
07cac     01 6A CE F7 | 	test	local01, #1 wz
07cb0     1C 00 90 5D |  if_ne	jmp	#LR__0433
07cb4     01 00 00 FF 
07cb8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07cbc     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07cc0     01 00 00 FF 
07cc4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07cc8     01 2A 66 F6 | 	neg	result1, #1
07ccc     9C 02 90 FD | 	jmp	#LR__0441
07cd0                 | LR__0433
07cd0     04 5E 05 F1 | 	add	fp, #4
07cd4     AF 6A 02 FB | 	rdlong	local01, fp
07cd8     04 5E 85 F1 | 	sub	fp, #4
07cdc     10 6A 06 F1 | 	add	local01, #16
07ce0     35 6F 0A FB | 	rdlong	local03, local01 wz
07ce4     B4 00 90 AD |  if_e	jmp	#LR__0435
07ce8     04 5E 05 F1 | 	add	fp, #4
07cec     AF 70 02 FB | 	rdlong	local04, fp
07cf0     10 70 06 F1 | 	add	local04, #16
07cf4     38 6B 02 FB | 	rdlong	local01, local04
07cf8     35 6D 02 FB | 	rdlong	local02, local01
07cfc     04 6A 06 F1 | 	add	local01, #4
07d00     35 6F 02 FB | 	rdlong	local03, local01
07d04     AF 5C 02 FB | 	rdlong	arg01, fp
07d08     04 5E 05 F1 | 	add	fp, #4
07d0c     AF 5E 02 FB | 	rdlong	arg02, fp
07d10     04 5E 05 F1 | 	add	fp, #4
07d14     AF 60 02 FB | 	rdlong	arg03, fp
07d18     0C 5E 85 F1 | 	sub	fp, #12
07d1c     07 73 02 F6 | 	mov	local05, objptr
07d20     36 0F 02 F6 | 	mov	objptr, local02
07d24     2D 6E 62 FD | 	call	local03
07d28     39 0F 02 F6 | 	mov	objptr, local05
07d2c     10 5E 05 F1 | 	add	fp, #16
07d30     AF 2A 62 FC | 	wrlong	result1, fp
07d34     10 5E 85 F1 | 	sub	fp, #16
07d38     00 2A 5E F2 | 	cmps	result1, #0 wcz
07d3c     4C 00 90 3D |  if_ae	jmp	#LR__0434
07d40     04 5E 05 F1 | 	add	fp, #4
07d44     AF 6A 02 FB | 	rdlong	local01, fp
07d48     35 71 02 F6 | 	mov	local04, local01
07d4c     08 70 06 F1 | 	add	local04, #8
07d50     38 6F 02 FB | 	rdlong	local03, local04
07d54     20 6E 46 F5 | 	or	local03, #32
07d58     08 6A 06 F1 | 	add	local01, #8
07d5c     35 6F 62 FC | 	wrlong	local03, local01
07d60     0C 5E 05 F1 | 	add	fp, #12
07d64     AF 5C 0A FB | 	rdlong	arg01, fp wz
07d68     10 5E 85 F1 | 	sub	fp, #16
07d6c     01 00 00 FF 
07d70     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d74     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07d78     01 00 00 FF 
07d7c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d80     01 2A 66 56 |  if_ne	neg	result1, #1
07d84     00 2A 06 A6 |  if_e	mov	result1, #0
07d88     E0 01 90 FD | 	jmp	#LR__0441
07d8c                 | LR__0434
07d8c     10 5E 05 F1 | 	add	fp, #16
07d90     AF 2A 02 FB | 	rdlong	result1, fp
07d94     10 5E 85 F1 | 	sub	fp, #16
07d98     D0 01 90 FD | 	jmp	#LR__0441
07d9c                 | LR__0435
07d9c     04 5E 05 F1 | 	add	fp, #4
07da0     AF 6A 02 FB | 	rdlong	local01, fp
07da4     1C 6A 06 F1 | 	add	local01, #28
07da8     35 6F 02 FB | 	rdlong	local03, local01
07dac     14 5E 05 F1 | 	add	fp, #20
07db0     AF 6E 62 FC | 	wrlong	local03, fp
07db4     AF 6A 0A FB | 	rdlong	local01, fp wz
07db8     18 5E 85 F1 | 	sub	fp, #24
07dbc     1C 00 90 5D |  if_ne	jmp	#LR__0436
07dc0     01 00 00 FF 
07dc4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07dc8     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07dcc     01 00 00 FF 
07dd0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07dd4     01 2A 66 F6 | 	neg	result1, #1
07dd8     90 01 90 FD | 	jmp	#LR__0441
07ddc                 | LR__0436
07ddc     04 5E 05 F1 | 	add	fp, #4
07de0     AF 6A 02 FB | 	rdlong	local01, fp
07de4     04 5E 85 F1 | 	sub	fp, #4
07de8     24 6A 06 F1 | 	add	local01, #36
07dec     35 6F 0A FB | 	rdlong	local03, local01 wz
07df0     A0 00 90 AD |  if_e	jmp	#LR__0438
07df4     24 5E 05 F1 | 	add	fp, #36
07df8     AF 74 02 F6 | 	mov	local06, fp
07dfc     20 5E 85 F1 | 	sub	fp, #32
07e00     AF 76 02 FB | 	rdlong	local07, fp
07e04     3B 71 02 F6 | 	mov	local04, local07
07e08     24 70 06 F1 | 	add	local04, #36
07e0c     38 79 02 FB | 	rdlong	local08, local04
07e10     3C 6B 02 F6 | 	mov	local01, local08
07e14     35 6D 02 FB | 	rdlong	local02, local01
07e18     04 6A 06 F1 | 	add	local01, #4
07e1c     35 7B 02 FB | 	rdlong	local09, local01
07e20     3D 6F 02 F6 | 	mov	local03, local09
07e24     3B 7D 02 F6 | 	mov	local10, local07
07e28     04 5E 85 F1 | 	sub	fp, #4
07e2c     3E 7F 02 F6 | 	mov	local11, local10
07e30     00 81 06 F6 | 	mov	local12, #256
07e34     3A 83 02 F6 | 	mov	local13, local06
07e38     3F 5D 02 F6 | 	mov	arg01, local11
07e3c     00 5F 06 F6 | 	mov	arg02, #256
07e40     41 61 02 F6 | 	mov	arg03, local13
07e44     07 85 02 F6 | 	mov	local14, objptr
07e48     36 0F 02 F6 | 	mov	objptr, local02
07e4c     2D 6E 62 FD | 	call	local03
07e50     42 0F 02 F6 | 	mov	objptr, local14
07e54     15 87 02 F6 | 	mov	local15, result1
07e58     10 5E 05 F1 | 	add	fp, #16
07e5c     AF 86 62 FC | 	wrlong	local15, fp
07e60     AF 6C 0A FB | 	rdlong	local02, fp wz
07e64     10 5E 85 F1 | 	sub	fp, #16
07e68     28 00 90 5D |  if_ne	jmp	#LR__0437
07e6c     24 5E 05 F1 | 	add	fp, #36
07e70     AF 70 02 FB | 	rdlong	local04, fp
07e74     24 5E 85 F1 | 	sub	fp, #36
07e78     38 6F 02 F6 | 	mov	local03, local04
07e7c     02 6E 0E F5 | 	and	local03, #2 wz
07e80     10 00 90 AD |  if_e	jmp	#LR__0437
07e84     01 6A 06 F6 | 	mov	local01, #1
07e88     20 5E 05 F1 | 	add	fp, #32
07e8c     AF 02 68 FC | 	wrlong	#1, fp
07e90     20 5E 85 F1 | 	sub	fp, #32
07e94                 | LR__0437
07e94                 | LR__0438
07e94     10 5E 05 F1 | 	add	fp, #16
07e98     AF 00 68 FC | 	wrlong	#0, fp
07e9c     10 5E 85 F1 | 	sub	fp, #16
07ea0                 | LR__0439
07ea0     0C 5E 05 F1 | 	add	fp, #12
07ea4     AF 6A 02 FB | 	rdlong	local01, fp
07ea8     0C 5E 85 F1 | 	sub	fp, #12
07eac     00 6A 1E F2 | 	cmp	local01, #0 wcz
07eb0     AC 00 90 ED |  if_be	jmp	#LR__0440
07eb4     18 5E 05 F1 | 	add	fp, #24
07eb8     AF 6A 02 FB | 	rdlong	local01, fp
07ebc     35 6D 02 FB | 	rdlong	local02, local01
07ec0     04 6A 06 F1 | 	add	local01, #4
07ec4     35 6F 02 FB | 	rdlong	local03, local01
07ec8     14 5E 85 F1 | 	sub	fp, #20
07ecc     AF 5C 02 FB | 	rdlong	arg01, fp
07ed0     04 5E 85 F1 | 	sub	fp, #4
07ed4     07 7F 02 F6 | 	mov	local11, objptr
07ed8     36 0F 02 F6 | 	mov	objptr, local02
07edc     2D 6E 62 FD | 	call	local03
07ee0     3F 0F 02 F6 | 	mov	objptr, local11
07ee4     15 7D 02 F6 | 	mov	local10, result1
07ee8     14 5E 05 F1 | 	add	fp, #20
07eec     AF 7C 62 FC | 	wrlong	local10, fp
07ef0     14 5E 85 F1 | 	sub	fp, #20
07ef4     00 7C 5E F2 | 	cmps	local10, #0 wcz
07ef8     64 00 90 CD |  if_b	jmp	#LR__0440
07efc     1C 5E 05 F1 | 	add	fp, #28
07f00     AF 6A 02 FB | 	rdlong	local01, fp
07f04     35 6F 02 F6 | 	mov	local03, local01
07f08     01 6E 06 F1 | 	add	local03, #1
07f0c     AF 6E 62 FC | 	wrlong	local03, fp
07f10     08 5E 85 F1 | 	sub	fp, #8
07f14     AF 76 02 FB | 	rdlong	local07, fp
07f18     35 77 42 FC | 	wrbyte	local07, local01
07f1c     04 5E 85 F1 | 	sub	fp, #4
07f20     AF 6A 02 FB | 	rdlong	local01, fp
07f24     01 6A 06 F1 | 	add	local01, #1
07f28     AF 6A 62 FC | 	wrlong	local01, fp
07f2c     04 5E 85 F1 | 	sub	fp, #4
07f30     AF 6A 02 FB | 	rdlong	local01, fp
07f34     01 6A 86 F1 | 	sub	local01, #1
07f38     AF 6A 62 FC | 	wrlong	local01, fp
07f3c     14 5E 05 F1 | 	add	fp, #20
07f40     AF 6A 0A FB | 	rdlong	local01, fp wz
07f44     20 5E 85 F1 | 	sub	fp, #32
07f48     54 FF 9F AD |  if_e	jmp	#LR__0439
07f4c     14 5E 05 F1 | 	add	fp, #20
07f50     AF 6E 02 FB | 	rdlong	local03, fp
07f54     14 5E 85 F1 | 	sub	fp, #20
07f58     0A 6E 0E F2 | 	cmp	local03, #10 wz
07f5c     40 FF 9F 5D |  if_ne	jmp	#LR__0439
07f60                 | LR__0440
07f60     10 5E 05 F1 | 	add	fp, #16
07f64     AF 2A 02 FB | 	rdlong	result1, fp
07f68     10 5E 85 F1 | 	sub	fp, #16
07f6c                 | LR__0441
07f6c     AF F0 03 F6 | 	mov	ptra, fp
07f70     BF 00 A0 FD | 	call	#popregs_
07f74                 | __system___vfsread_ret
07f74     2D 00 64 FD | 	ret
07f78                 | 
07f78                 | ' 	
07f78                 | ' 	FUNCTION pfunc(c as integer) as integer
07f78                 | ___strs_cl_pfunc
07f78                 | ' 		if (i < 16) then
07f78     04 0E 06 F1 | 	add	objptr, #4
07f7c     07 31 02 FB | 	rdlong	_var01, objptr
07f80     04 0E 86 F1 | 	sub	objptr, #4
07f84     10 30 5E F2 | 	cmps	_var01, #16 wcz
07f88     2C 00 90 3D |  if_ae	jmp	#LR__0442
07f8c     07 33 02 FB | 	rdlong	_var02, objptr
07f90     04 0E 06 F1 | 	add	objptr, #4
07f94     07 35 02 FB | 	rdlong	_var03, objptr
07f98     19 35 02 F1 | 	add	_var03, _var02
07f9c     1A 5D 42 FC | 	wrbyte	arg01, _var03
07fa0     07 31 02 FB | 	rdlong	_var01, objptr
07fa4     01 30 06 F1 | 	add	_var01, #1
07fa8     07 31 62 FC | 	wrlong	_var01, objptr
07fac     04 0E 86 F1 | 	sub	objptr, #4
07fb0                 | ' 			p(i) = c
07fb0                 | ' 			i = i+1
07fb0                 | ' 			return 1
07fb0     01 2A 06 F6 | 	mov	result1, #1
07fb4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
07fb8                 | LR__0442
07fb8                 | ' 			return -1
07fb8     01 2A 66 F6 | 	neg	result1, #1
07fbc                 | ___strs_cl_pfunc_ret
07fbc     2D 00 64 FD | 	ret
07fc0                 | 
07fc0                 | __struct__s_vfs_file_t_putchar
07fc0     04 5A 05 F6 | 	mov	COUNT_, #4
07fc4     B0 00 A0 FD | 	call	#pushregs_
07fc8     18 0E 06 F1 | 	add	objptr, #24
07fcc     07 6B 0A FB | 	rdlong	local01, objptr wz
07fd0     18 0E 86 F1 | 	sub	objptr, #24
07fd4     00 2A 06 A6 |  if_e	mov	result1, #0
07fd8     3C 00 90 AD |  if_e	jmp	#LR__0443
07fdc     18 0E 06 F1 | 	add	objptr, #24
07fe0     07 6B 02 FB | 	rdlong	local01, objptr
07fe4     18 0E 86 F1 | 	sub	objptr, #24
07fe8     35 6D 02 FB | 	rdlong	local02, local01
07fec     04 6A 06 F1 | 	add	local01, #4
07ff0     35 6F 02 FB | 	rdlong	local03, local01
07ff4     07 5F 02 F6 | 	mov	arg02, objptr
07ff8     07 71 02 F6 | 	mov	local04, objptr
07ffc     36 0F 02 F6 | 	mov	objptr, local02
08000     2D 6E 62 FD | 	call	local03
08004     38 0F 02 F6 | 	mov	objptr, local04
08008     00 2A 5E F2 | 	cmps	result1, #0 wcz
0800c     00 6A 06 C6 |  if_b	mov	local01, #0
08010     01 6A 06 36 |  if_ae	mov	local01, #1
08014     35 2B 02 F6 | 	mov	result1, local01
08018                 | LR__0443
08018     AF F0 03 F6 | 	mov	ptra, fp
0801c     BF 00 A0 FD | 	call	#popregs_
08020                 | __struct__s_vfs_file_t_putchar_ret
08020     2D 00 64 FD | 	ret
08024                 | 
08024                 | __struct__s_vfs_file_t_getchar
08024     04 5A 05 F6 | 	mov	COUNT_, #4
08028     B0 00 A0 FD | 	call	#pushregs_
0802c     1C 0E 06 F1 | 	add	objptr, #28
08030     07 6B 0A FB | 	rdlong	local01, objptr wz
08034     1C 0E 86 F1 | 	sub	objptr, #28
08038     01 2A 66 A6 |  if_e	neg	result1, #1
0803c     2C 00 90 AD |  if_e	jmp	#LR__0444
08040                 | '         return getcf(__this);
08040     1C 0E 06 F1 | 	add	objptr, #28
08044     07 6B 02 FB | 	rdlong	local01, objptr
08048     1C 0E 86 F1 | 	sub	objptr, #28
0804c     35 6D 02 FB | 	rdlong	local02, local01
08050     04 6A 06 F1 | 	add	local01, #4
08054     35 6F 02 FB | 	rdlong	local03, local01
08058     07 5D 02 F6 | 	mov	arg01, objptr
0805c     07 71 02 F6 | 	mov	local04, objptr
08060     36 0F 02 F6 | 	mov	objptr, local02
08064     2D 6E 62 FD | 	call	local03
08068     38 0F 02 F6 | 	mov	objptr, local04
0806c                 | LR__0444
0806c     AF F0 03 F6 | 	mov	ptra, fp
08070     BF 00 A0 FD | 	call	#popregs_
08074                 | __struct__s_vfs_file_t_getchar_ret
08074     2D 00 64 FD | 	ret
08078                 | 
08078                 | __struct___bas_wrap_sender_tx
08078     04 5A 05 F6 | 	mov	COUNT_, #4
0807c     B0 00 A0 FD | 	call	#pushregs_
08080     07 6B 02 FB | 	rdlong	local01, objptr
08084     35 6D 02 FB | 	rdlong	local02, local01
08088     04 6A 06 F1 | 	add	local01, #4
0808c     35 6F 02 FB | 	rdlong	local03, local01
08090     07 71 02 F6 | 	mov	local04, objptr
08094     36 0F 02 F6 | 	mov	objptr, local02
08098     2D 6E 62 FD | 	call	local03
0809c     38 0F 02 F6 | 	mov	objptr, local04
080a0     01 2A 06 F6 | 	mov	result1, #1
080a4     AF F0 03 F6 | 	mov	ptra, fp
080a8     BF 00 A0 FD | 	call	#popregs_
080ac                 | __struct___bas_wrap_sender_tx_ret
080ac     2D 00 64 FD | 	ret
080b0                 | 
080b0                 | LR__0445
080b0     20          | 	byte	" "
080b1     00          | 	byte	0
080b2                 | LR__0446
080b2                 | 	byte	
080b2     00          | 	byte	0
080b3                 | LR__0447
080b3                 | 	byte	
080b3     00          | 	byte	0
080b4                 | LR__0448
080b4     20 21 21 21 
080b8     20 63 6F 72 
080bc     72 75 70 74 
080c0     65 64 20 68 
080c4     65 61 70 3F 
080c8     3F 3F 20 21 
080cc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
080cf     00          | 	byte	0
080d0                 | LR__0449
080d0     20 21 21 21 
080d4     20 6F 75 74 
080d8     20 6F 66 20 
080dc     68 65 61 70 
080e0     20 6D 65 6D 
080e4     6F 72 79 20 
080e8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
080ec     00          | 	byte	0
080ed                 | LR__0450
080ed     20 21 21 21 
080f1     20 63 6F 72 
080f5     72 75 70 74 
080f9     65 64 20 68 
080fd     65 61 70 20 
08101     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
08105     00          | 	byte	0
08106                 | LR__0451
08106     4E 61 6D 65 
0810a     20 20 20 20 
0810e     20 20 20 20 
08112     20 20 20 20 
08116     20 20 20 20 
0811a     20 20 20 6C 
0811e     65 6E 20 20 
08122     20 66 74 20 
08126     76 6F 6C 20 
0812a     72 65 70 20 
0812e     20 20 72 2E 
08132     6C 65 6E 20 
08136     20 20 20 20 
0813a     20 20 20 20 
0813e     4E 61 6D 65 
08142     20 20 20 20 
08146     20 20 20 20 
0814a     20 20 20 20 
0814e     20 20 20 20 
08152     20 20 20 6C 
08156     65 6E 20 20 
0815a     20 66 74 20 
0815e     76 6F 6C 20 
08162     72 65 70 20 
08166     20 20 72 2E 
0816a     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0816e     00          | 	byte	0
0816f                 | LR__0452
0816f     53          | 	byte	"S"
08170     00          | 	byte	0
08171                 | LR__0453
08171     20 20 20 20 
08175     20 20 20 20 
08179     20 20 20 20 
0817d     20 20 20 20 
08181     20 20 20 20 
08185     20 20       | 	byte	"                      "
08187     00          | 	byte	0
08188                 | LR__0454
08188     20          | 	byte	" "
08189     00          | 	byte	0
0818a                 | LR__0455
0818a     73 61 6D 70 
0818e     6C 65 73 20 
08192     6D 6F 64 75 
08196     6C 65       | 	byte	"samples module"
08198     00          | 	byte	0
08199     00 00 00    | 	alignl
0819c                 | _dat_
0819c     6E 68 00 00 
081a0     00 00 00 00 
081a4     00 00 00 00 
081a8     00 00 00 00 | module file "../../../mod/enha.mod"
081ac     00 00 00 00 
081b0     73 74 2D 30 
081b4     31 3A 6D 6F 
081b8     6E 73 74 65 | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $31, $3a, $6d, $6f, $6e, $73, $74, $65
081bc     72 62 61 73 
081c0     73 00 00 00 
081c4     00 00 11 94 
081c8     00 3C 00 00 | 	byte	$72, $62, $61, $73, $73, $00, $00, $00, $00, $00, $11, $94, $00, $3c, $00, $00
081cc     00 01 73 74 
081d0     2D 30 31 3A 
081d4     73 74 72 69 
081d8     6E 67 73 37 | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $73, $74, $72, $69, $6e, $67, $73, $37
081dc     00 00 00 00 
081e0     00 00 00 00 | 	byte	$00[8]
081e4     13 56 00 40 
081e8     01 F4 11 17 
081ec     73 74 2D 30 
081f0     31 3A 66 75 | 	byte	$13, $56, $00, $40, $01, $f4, $11, $17, $73, $74, $2d, $30, $31, $3a, $66, $75
081f4     6E 62 61 73 
081f8     73 00 00 00 
081fc     00 00 00 00 
08200     00 00 0C B2 | 	byte	$6e, $62, $61, $73, $73, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $b2
08204     00 40 00 00 
08208     00 01 73 74 
0820c     2D 30 33 3A 
08210     72 6F 6F 6D | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $33, $3a, $72, $6f, $6f, $6d
08214     62 72 61 73 
08218     73 31 00 00 
0821c     00 00 00 00 
08220     12 2A 00 3C | 	byte	$62, $72, $61, $73, $73, $31, $00, $00, $00, $00, $00, $00, $12, $2a, $00, $3c
08224     00 00 00 01 
08228     73 74 2D 30 
0822c     31 3A 62 61 
08230     73 73 64 72 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $62, $61, $73, $73, $64, $72
08234     75 6D 33 00 
08238     00 00 00 00 
0823c     00 00 06 A4 
08240     00 40 00 00 | 	byte	$75, $6d, $33, $00, $00, $00, $00, $00, $00, $00, $06, $a4, $00, $40, $00, $00
08244     00 01 73 74 
08248     2D 30 31 3A 
0824c     70 6F 70 73 
08250     6E 61 72 65 | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $70, $6f, $70, $73, $6e, $61, $72, $65
08254     32 00 00 00 
08258     00 00 00 00 
0825c     07 D0 00 37 
08260     00 00 00 01 | 	byte	$32, $00, $00, $00, $00, $00, $00, $00, $07, $d0, $00, $37, $00, $00, $00, $01
08264     73 74 2D 30 
08268     33 3A 73 6E 
0826c     61 70 32 00 
08270     00 00 00 00 | 	byte	$73, $74, $2d, $30, $33, $3a, $73, $6e, $61, $70, $32, $00, $00, $00, $00, $00
08274     00 00 00 00 
08278     00 00       | 	byte	$00[6]
0827a     04 88 00 37 
0827e     00 00 00 01 
08282     73 74 2D 30 
08286     31 3A 6B 6F | 	byte	$04, $88, $00, $37, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $6b, $6f
0828a     72 67 62 65 
0828e     61 75 00 00 
08292     00 00 00 00 
08296     00 00 0D AC | 	byte	$72, $67, $62, $65, $61, $75, $00, $00, $00, $00, $00, $00, $00, $00, $0d, $ac
0829a     00 3C 00 00 
0829e     00 01 73 74 
082a2     2D 30 31 3A 
082a6     68 61 6C 6C | 	byte	$00, $3c, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $68, $61, $6c, $6c
082aa     62 72 61 73 
082ae     73 00 00 00 
082b2     00 00 00 00 
082b6     12 5C 00 40 | 	byte	$62, $72, $61, $73, $73, $00, $00, $00, $00, $00, $00, $00, $12, $5c, $00, $40
082ba     00 00 00 01 
082be     73 74 2D 30 
082c2     31 3A 73 74 
082c6     72 69 6E 67 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $73, $74, $72, $69, $6e, $67
082ca     73 31 00 00 
082ce     00 00 00 00 
082d2     00 00 11 62 
082d6     00 37 00 00 | 	byte	$73, $31, $00, $00, $00, $00, $00, $00, $00, $00, $11, $62, $00, $37, $00, $00
082da     00 01 73 74 
082de     2D 30 31 3A 
082e2     00 00 00 00 
082e6     00 00 00 00 | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00, $00, $00, $00
082ea     00 00 00 00 
082ee     00 00 00 00 
082f2     00 00 00    | 	byte	$00[11]
082f5     40 00 00 00 
082f9     01 73 74 2D 
082fd     30 31 3A 00 
08301     00 00 00 00 | 	byte	$40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00
08305     00 00 00 00 
08309     00 00 00 00 
0830d     00 00 00 00 
08311     00 00       | 	byte	$00[14]
08313     40 00 00 00 
08317     01 73 74 2D 
0831b     30 31 3A 00 
0831f     00 00 00 00 | 	byte	$40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00
08323     00 00 00 00 
08327     00 00 00 00 
0832b     00 00 00 00 
0832f     00 00       | 	byte	$00[14]
08331     40 00 00 00 
08335     01 73 74 2D 
08339     30 31 3A 00 
0833d     00 00 00 00 | 	byte	$40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00
08341     00 00 00 00 
08345     00 00 00 00 
08349     00 00 00 00 
0834d     00 00       | 	byte	$00[14]
0834f     40 00 00 00 
08353     01 73 74 2D 
08357     30 31 3A 00 
0835b     00 00 00 00 | 	byte	$40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00
0835f     00 00 00 00 
08363     00 00 00 00 
08367     00 00 00 00 
0836b     00 00       | 	byte	$00[14]
0836d     40 00 00 00 
08371     01 00 00 00 
08375     00 00 00 00 
08379     00 00 00 00 | 	byte	$40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0837d     00 00 00 00 
08381     00 00 00 00 
08385     00 00 00 00 
08389     00 00 00 00 
0838d     00 00       | 	byte	$00[18]
0838f     01 00 00 00 
08393     00 00 00 00 
08397     00 00 00 00 
0839b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0839f     00 00 00 00 
083a3     00 00 00 00 
083a7     00 00 00 00 
083ab     00 00       | 	byte	$00[14]
083ad     01 00 00 00 
083b1     00 00 00 00 
083b5     00 00 00 00 
083b9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083bd     00 00 00 00 
083c1     00 00 00 00 
083c5     00 00 00 00 
083c9     00 00       | 	byte	$00[14]
083cb     01 00 00 00 
083cf     00 00 00 00 
083d3     00 00 00 00 
083d7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083db     00 00 00 00 
083df     00 00 00 00 
083e3     00 00 00 00 
083e7     00 00       | 	byte	$00[14]
083e9     01 00 00 00 
083ed     00 00 00 00 
083f1     00 00 00 00 
083f5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083f9     00 00 00 00 
083fd     00 00 00 00 
08401     00 00 00 00 
08405     00 00       | 	byte	$00[14]
08407     01 00 00 00 
0840b     00 00 00 00 
0840f     00 00 00 00 
08413     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08417     00 00 00 00 
0841b     00 00 00 00 
0841f     00 00 00 00 
08423     00 00       | 	byte	$00[14]
08425     01 00 00 00 
08429     00 00 00 00 
0842d     00 00 00 00 
08431     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08435     00 00 00 00 
08439     00 00 00 00 
0843d     00 00 00 00 
08441     00 00       | 	byte	$00[14]
08443     01 00 00 00 
08447     00 00 00 00 
0844b     00 00 00 00 
0844f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08453     00 00 00 00 
08457     00 00 00 00 
0845b     00 00 00 00 
0845f     00 00       | 	byte	$00[14]
08461     01 00 00 00 
08465     00 00 00 00 
08469     00 00 00 00 
0846d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08471     00 00 00 00 
08475     00 00 00 00 
08479     00 00 00 00 
0847d     00 00       | 	byte	$00[14]
0847f     01 00 00 00 
08483     00 00 00 00 
08487     00 00 00 00 
0848b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0848f     00 00 00 00 
08493     00 00 00 00 
08497     00 00 00 00 
0849b     00 00       | 	byte	$00[14]
0849d     01 00 00 00 
084a1     00 00 00 00 
084a5     00 00 00 00 
084a9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084ad     00 00 00 00 
084b1     00 00 00 00 
084b5     00 00 00 00 
084b9     00 00       | 	byte	$00[14]
084bb     01 00 00 00 
084bf     00 00 00 00 
084c3     00 00 00 00 
084c7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084cb     00 00 00 00 
084cf     00 00 00 00 
084d3     00 00 00 00 
084d7     00 00       | 	byte	$00[14]
084d9     01 00 00 00 
084dd     00 00 00 00 
084e1     00 00 00 00 
084e5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084e9     00 00 00 00 
084ed     00 00 00 00 
084f1     00 00 00 00 
084f5     00 00       | 	byte	$00[14]
084f7     01 00 00 00 
084fb     00 00 00 00 
084ff     00 00 00 00 
08503     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08507     00 00 00 00 
0850b     00 00 00 00 
0850f     00 00 00 00 
08513     00 00       | 	byte	$00[14]
08515     01 00 00 00 
08519     00 00 00 00 
0851d     00 00 00 00 
08521     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08525     00 00 00 00 
08529     00 00 00 00 
0852d     00 00 00 00 
08531     00 00       | 	byte	$00[14]
08533     01 00 00 00 
08537     00 00 00 00 
0853b     00 00 00 00 
0853f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08543     00 00 00 00 
08547     00 00 00 00 
0854b     00 00 00 00 
0854f     00 00       | 	byte	$00[14]
08551     01 17 7F 00 
08555     01 02 03 04 
08559     04 05 05 06 
0855d     07 07 06 08 | 	byte	$01, $17, $7f, $00, $01, $02, $03, $04, $04, $05, $05, $06, $07, $07, $06, $08
08561     08 09 0A 0B 
08565     0C 06 07 08 
08569     0D 0E 00 00 
0856d     00 00 00 00 | 	byte	$08, $09, $0a, $0b, $0c, $06, $07, $08, $0d, $0e, $00, $00, $00, $00, $00, $00
08571     00 00 00 00 
      ...             
085cd     00 00 00 00 
085d1     00 00 00    | 	byte	$00[99]
085d4     4D 2E 4B 2E 
085d8     00 00 00 00 
085dc     01 AC 1C 03 
085e0     00 00 0F 06 | 	byte	$4d, $2e, $4b, $2e, $00, $00, $00, $00, $01, $ac, $1c, $03, $00, $00, $0f, $06
085e4     01 AC 1C 40 
085e8     00 00 00 00 
085ec     00 00 0C 04 
085f0     00 00 00 00 | 	byte	$01, $ac, $1c, $40, $00, $00, $00, $00, $00, $00, $0c, $04, $00, $00, $00, $00
085f4     00 00 0C 3C 
085f8     00 00 00 00 
085fc     00 00 0C 08 
08600     00 00 00 00 | 	byte	$00, $00, $0c, $3c, $00, $00, $00, $00, $00, $00, $0c, $08, $00, $00, $00, $00
08604     00 00 0C 38 
08608     00 00 00 00 
0860c     00 00 0C 0C 
08610     00 00 00 00 | 	byte	$00, $00, $0c, $38, $00, $00, $00, $00, $00, $00, $0c, $0c, $00, $00, $00, $00
08614     00 00 0C 34 
08618     00 00 00 00 
0861c     00 00 0C 10 
08620     00 00 00 00 | 	byte	$00, $00, $0c, $34, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00
08624     00 00 0C 30 
08628     00 00 00 00 
0862c     00 00 0C 14 
08630     00 00 00 00 | 	byte	$00, $00, $0c, $30, $00, $00, $00, $00, $00, $00, $0c, $14, $00, $00, $00, $00
08634     00 00 0C 2C 
08638     00 00 00 00 
0863c     01 AC 0C 18 
08640     00 00 00 00 | 	byte	$00, $00, $0c, $2c, $00, $00, $00, $00, $01, $ac, $0c, $18, $00, $00, $00, $00
08644     01 AC 0C 28 
08648     00 00 00 00 
0864c     00 00 0C 1C 
08650     00 00 00 00 | 	byte	$01, $ac, $0c, $28, $00, $00, $00, $00, $00, $00, $0c, $1c, $00, $00, $00, $00
08654     00 00 0C 24 
08658     00 00 00 00 
0865c     01 AC 0C 20 
08660     00 00 00 00 | 	byte	$00, $00, $0c, $24, $00, $00, $00, $00, $01, $ac, $0c, $20, $00, $00, $00, $00
08664     01 AC 0C 20 
08668     00 00 00 00 
0866c     00 00 0C 24 
08670     00 00 00 00 | 	byte	$01, $ac, $0c, $20, $00, $00, $00, $00, $00, $00, $0c, $24, $00, $00, $00, $00
08674     00 00 0C 1C 
08678     00 00 00 00 
0867c     00 00 0C 28 
08680     00 00 00 00 | 	byte	$00, $00, $0c, $1c, $00, $00, $00, $00, $00, $00, $0c, $28, $00, $00, $00, $00
08684     00 00 0C 18 
08688     00 00 00 00 
0868c     00 00 0C 2C 
08690     00 00 00 00 | 	byte	$00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $0c, $2c, $00, $00, $00, $00
08694     00 00 0C 14 
08698     00 00 00 00 
0869c     01 AC 0C 30 
086a0     00 00 00 00 | 	byte	$00, $00, $0c, $14, $00, $00, $00, $00, $01, $ac, $0c, $30, $00, $00, $00, $00
086a4     01 AC 0C 10 
086a8     00 00 00 00 
086ac     00 00 0C 34 
086b0     00 00 00 00 | 	byte	$01, $ac, $0c, $10, $00, $00, $00, $00, $00, $00, $0c, $34, $00, $00, $00, $00
086b4     00 00 0C 0C 
086b8     00 00 00 00 
086bc     00 00 0C 38 
086c0     00 00 00 00 | 	byte	$00, $00, $0c, $0c, $00, $00, $00, $00, $00, $00, $0c, $38, $00, $00, $00, $00
086c4     00 00 0C 08 
086c8     00 00 00 00 
086cc     00 00 0C 3C 
086d0     00 00 00 00 | 	byte	$00, $00, $0c, $08, $00, $00, $00, $00, $00, $00, $0c, $3c, $00, $00, $00, $00
086d4     00 00 0C 04 
086d8     00 00 00 00 
086dc     01 AC 0C 40 
086e0     00 00 00 00 | 	byte	$00, $00, $0c, $04, $00, $00, $00, $00, $01, $ac, $0c, $40, $00, $00, $00, $00
086e4     01 AC 0C 03 
086e8     00 00 00 00 
086ec     00 00 0C 3C 
086f0     00 00 00 00 | 	byte	$01, $ac, $0c, $03, $00, $00, $00, $00, $00, $00, $0c, $3c, $00, $00, $00, $00
086f4     00 00 0C 04 
086f8     00 00 00 00 
086fc     00 00 0C 38 
08700     00 00 00 00 | 	byte	$00, $00, $0c, $04, $00, $00, $00, $00, $00, $00, $0c, $38, $00, $00, $00, $00
08704     00 00 0C 08 
08708     00 00 00 00 
0870c     00 00 0C 34 
08710     00 00 00 00 | 	byte	$00, $00, $0c, $08, $00, $00, $00, $00, $00, $00, $0c, $34, $00, $00, $00, $00
08714     00 00 0C 0C 
08718     00 00 00 00 
0871c     00 00 0C 30 
08720     00 00 00 00 | 	byte	$00, $00, $0c, $0c, $00, $00, $00, $00, $00, $00, $0c, $30, $00, $00, $00, $00
08724     00 00 0C 10 
08728     00 00 00 00 
0872c     00 00 0C 2C 
08730     00 00 00 00 | 	byte	$00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $0c, $2c, $00, $00, $00, $00
08734     00 00 0C 14 
08738     00 00 00 00 
0873c     01 AC 0C 28 
08740     00 00 00 00 | 	byte	$00, $00, $0c, $14, $00, $00, $00, $00, $01, $ac, $0c, $28, $00, $00, $00, $00
08744     01 AC 0C 18 
08748     00 00 00 00 
0874c     00 00 0C 24 
08750     00 00 00 00 | 	byte	$01, $ac, $0c, $18, $00, $00, $00, $00, $00, $00, $0c, $24, $00, $00, $00, $00
08754     00 00 0C 1C 
08758     00 00 00 00 
0875c     01 AC 0C 20 
08760     00 00 00 00 | 	byte	$00, $00, $0c, $1c, $00, $00, $00, $00, $01, $ac, $0c, $20, $00, $00, $00, $00
08764     01 AC 0C 20 
08768     00 00 00 00 
0876c     00 00 0C 1C 
08770     00 00 00 00 | 	byte	$01, $ac, $0c, $20, $00, $00, $00, $00, $00, $00, $0c, $1c, $00, $00, $00, $00
08774     00 00 0C 24 
08778     00 00 00 00 
0877c     00 00 0C 18 
08780     00 00 00 00 | 	byte	$00, $00, $0c, $24, $00, $00, $00, $00, $00, $00, $0c, $18, $00, $00, $00, $00
08784     00 00 0C 28 
08788     00 00 00 00 
0878c     00 00 0C 14 
08790     00 00 00 00 | 	byte	$00, $00, $0c, $28, $00, $00, $00, $00, $00, $00, $0c, $14, $00, $00, $00, $00
08794     00 00 0C 2C 
08798     00 00 00 00 
0879c     01 AC 0C 10 
087a0     00 00 00 00 | 	byte	$00, $00, $0c, $2c, $00, $00, $00, $00, $01, $ac, $0c, $10, $00, $00, $00, $00
087a4     01 AC 0C 30 
087a8     00 00 00 00 
087ac     00 00 0C 0C 
087b0     00 00 00 00 | 	byte	$01, $ac, $0c, $30, $00, $00, $00, $00, $00, $00, $0c, $0c, $00, $00, $00, $00
087b4     00 00 0C 34 
087b8     00 00 00 00 
087bc     00 00 0C 08 
087c0     00 00 00 00 | 	byte	$00, $00, $0c, $34, $00, $00, $00, $00, $00, $00, $0c, $08, $00, $00, $00, $00
087c4     00 00 0C 38 
087c8     00 00 00 00 
087cc     00 00 0C 04 
087d0     00 00 00 00 | 	byte	$00, $00, $0c, $38, $00, $00, $00, $00, $00, $00, $0c, $04, $00, $00, $00, $00
087d4     00 00 0C 3C 
087d8     01 AC 2C 03 
087dc     01 AC 0C 03 
087e0     01 AC 2C 40 | 	byte	$00, $00, $0c, $3c, $01, $ac, $2c, $03, $01, $ac, $0c, $03, $01, $ac, $2c, $40
087e4     01 AC 0C 40 
087e8     00 00 0C 04 
087ec     00 00 0C 04 
087f0     00 00 0C 3C | 	byte	$01, $ac, $0c, $40, $00, $00, $0c, $04, $00, $00, $0c, $04, $00, $00, $0c, $3c
087f4     00 00 0C 3C 
087f8     00 00 0C 08 
087fc     00 00 0C 08 
08800     00 00 0C 38 | 	byte	$00, $00, $0c, $3c, $00, $00, $0c, $08, $00, $00, $0c, $08, $00, $00, $0c, $38
08804     00 00 0C 38 
08808     00 00 0C 0C 
0880c     00 00 0C 0C 
08810     00 00 0C 34 | 	byte	$00, $00, $0c, $38, $00, $00, $0c, $0c, $00, $00, $0c, $0c, $00, $00, $0c, $34
08814     00 00 0C 34 
08818     00 00 0C 10 
0881c     00 00 0C 10 
08820     00 00 0C 30 | 	byte	$00, $00, $0c, $34, $00, $00, $0c, $10, $00, $00, $0c, $10, $00, $00, $0c, $30
08824     00 00 0C 30 
08828     00 00 0C 14 
0882c     00 00 0C 14 
08830     00 00 0C 2C | 	byte	$00, $00, $0c, $30, $00, $00, $0c, $14, $00, $00, $0c, $14, $00, $00, $0c, $2c
08834     00 00 0C 2C 
08838     00 00 0C 18 
0883c     01 AC 0C 18 
08840     00 00 0C 28 | 	byte	$00, $00, $0c, $2c, $00, $00, $0c, $18, $01, $ac, $0c, $18, $00, $00, $0c, $28
08844     01 AC 0C 28 
08848     00 00 0C 1C 
0884c     00 00 0C 1C 
08850     00 00 0C 24 | 	byte	$01, $ac, $0c, $28, $00, $00, $0c, $1c, $00, $00, $0c, $1c, $00, $00, $0c, $24
08854     00 00 0C 24 
08858     00 00 0C 20 
0885c     01 AC 0C 20 
08860     00 00 0C 20 | 	byte	$00, $00, $0c, $24, $00, $00, $0c, $20, $01, $ac, $0c, $20, $00, $00, $0c, $20
08864     01 AC 0C 20 
08868     00 00 0C 24 
0886c     00 00 0C 24 
08870     00 00 0C 1C | 	byte	$01, $ac, $0c, $20, $00, $00, $0c, $24, $00, $00, $0c, $24, $00, $00, $0c, $1c
08874     00 00 0C 1C 
08878     00 00 0C 28 
0887c     00 00 0C 28 
08880     00 00 0C 18 | 	byte	$00, $00, $0c, $1c, $00, $00, $0c, $28, $00, $00, $0c, $28, $00, $00, $0c, $18
08884     00 00 0C 18 
08888     00 00 0C 2C 
0888c     00 00 0C 2C 
08890     00 00 0C 14 | 	byte	$00, $00, $0c, $18, $00, $00, $0c, $2c, $00, $00, $0c, $2c, $00, $00, $0c, $14
08894     00 00 0C 14 
08898     00 00 0C 30 
0889c     01 AC 0C 30 
088a0     00 00 0C 10 | 	byte	$00, $00, $0c, $14, $00, $00, $0c, $30, $01, $ac, $0c, $30, $00, $00, $0c, $10
088a4     01 AC 0C 10 
088a8     00 00 0C 34 
088ac     00 00 0C 34 
088b0     00 00 0C 0C | 	byte	$01, $ac, $0c, $10, $00, $00, $0c, $34, $00, $00, $0c, $34, $00, $00, $0c, $0c
088b4     00 00 0C 0C 
088b8     00 00 0C 38 
088bc     00 00 0C 38 
088c0     00 00 0C 08 | 	byte	$00, $00, $0c, $0c, $00, $00, $0c, $38, $00, $00, $0c, $38, $00, $00, $0c, $08
088c4     00 00 0C 08 
088c8     00 00 0C 3C 
088cc     00 00 0C 3C 
088d0     00 00 0C 04 | 	byte	$00, $00, $0c, $08, $00, $00, $0c, $3c, $00, $00, $0c, $3c, $00, $00, $0c, $04
088d4     00 00 0C 04 
088d8     00 00 0C 40 
088dc     01 AC 0C 40 
088e0     00 00 0C 00 | 	byte	$00, $00, $0c, $04, $00, $00, $0c, $40, $01, $ac, $0c, $40, $00, $00, $0c, $00
088e4     01 AC 0C 03 
088e8     00 00 0C 3C 
088ec     00 00 0C 3C 
088f0     00 00 0C 04 | 	byte	$01, $ac, $0c, $03, $00, $00, $0c, $3c, $00, $00, $0c, $3c, $00, $00, $0c, $04
088f4     00 00 0C 04 
088f8     00 00 0C 38 
088fc     00 00 0C 38 
08900     00 00 0C 08 | 	byte	$00, $00, $0c, $04, $00, $00, $0c, $38, $00, $00, $0c, $38, $00, $00, $0c, $08
08904     00 00 0C 08 
08908     00 00 0C 34 
0890c     00 00 0C 34 
08910     00 00 0C 0C | 	byte	$00, $00, $0c, $08, $00, $00, $0c, $34, $00, $00, $0c, $34, $00, $00, $0c, $0c
08914     00 00 0C 0C 
08918     00 00 0C 30 
0891c     00 00 0C 30 
08920     00 00 0C 10 | 	byte	$00, $00, $0c, $0c, $00, $00, $0c, $30, $00, $00, $0c, $30, $00, $00, $0c, $10
08924     00 00 0C 10 
08928     00 00 0C 2C 
0892c     00 00 0C 2C 
08930     00 00 0C 14 | 	byte	$00, $00, $0c, $10, $00, $00, $0c, $2c, $00, $00, $0c, $2c, $00, $00, $0c, $14
08934     00 00 0C 14 
08938     00 00 0C 28 
0893c     01 AC 0C 28 
08940     00 00 0C 18 | 	byte	$00, $00, $0c, $14, $00, $00, $0c, $28, $01, $ac, $0c, $28, $00, $00, $0c, $18
08944     01 AC 0C 18 
08948     00 00 0C 24 
0894c     00 00 0C 24 
08950     00 00 0C 1C | 	byte	$01, $ac, $0c, $18, $00, $00, $0c, $24, $00, $00, $0c, $24, $00, $00, $0c, $1c
08954     00 00 0C 1C 
08958     00 00 0C 20 
0895c     01 AC 0C 20 
08960     00 00 0C 20 | 	byte	$00, $00, $0c, $1c, $00, $00, $0c, $20, $01, $ac, $0c, $20, $00, $00, $0c, $20
08964     01 AC 0C 20 
08968     00 00 0C 1C 
0896c     00 00 0C 1C 
08970     00 00 0C 24 | 	byte	$01, $ac, $0c, $20, $00, $00, $0c, $1c, $00, $00, $0c, $1c, $00, $00, $0c, $24
08974     00 00 0C 24 
08978     00 00 0C 18 
0897c     00 00 0C 18 
08980     00 00 0C 28 | 	byte	$00, $00, $0c, $24, $00, $00, $0c, $18, $00, $00, $0c, $18, $00, $00, $0c, $28
08984     00 00 0C 28 
08988     00 00 0C 14 
0898c     00 00 0C 14 
08990     00 00 0C 2C | 	byte	$00, $00, $0c, $28, $00, $00, $0c, $14, $00, $00, $0c, $14, $00, $00, $0c, $2c
08994     00 00 0C 2C 
08998     00 00 0C 10 
0899c     01 AC 0C 10 
089a0     00 00 0C 30 | 	byte	$00, $00, $0c, $2c, $00, $00, $0c, $10, $01, $ac, $0c, $10, $00, $00, $0c, $30
089a4     01 AC 0C 30 
089a8     00 00 0C 0C 
089ac     00 00 0C 0C 
089b0     00 00 0C 34 | 	byte	$01, $ac, $0c, $30, $00, $00, $0c, $0c, $00, $00, $0c, $0c, $00, $00, $0c, $34
089b4     00 00 0C 34 
089b8     00 00 0C 08 
089bc     00 00 0C 08 
089c0     00 00 0C 38 | 	byte	$00, $00, $0c, $34, $00, $00, $0c, $08, $00, $00, $0c, $08, $00, $00, $0c, $38
089c4     00 00 0C 38 
089c8     00 00 0C 04 
089cc     00 00 0C 04 
089d0     00 00 0C 3C | 	byte	$00, $00, $0c, $38, $00, $00, $0c, $04, $00, $00, $0c, $04, $00, $00, $0c, $3c
089d4     00 00 0C 3C 
089d8     01 68 2C 03 
089dc     01 AC 1C 03 
089e0     01 68 2C 40 | 	byte	$00, $00, $0c, $3c, $01, $68, $2c, $03, $01, $ac, $1c, $03, $01, $68, $2c, $40
089e4     01 AC 1C 40 
089e8     00 00 0C 04 
089ec     00 00 0C 04 
089f0     00 00 0C 3C | 	byte	$01, $ac, $1c, $40, $00, $00, $0c, $04, $00, $00, $0c, $04, $00, $00, $0c, $3c
089f4     00 00 0C 3C 
089f8     00 00 0C 08 
089fc     00 00 0C 08 
08a00     00 00 0C 38 | 	byte	$00, $00, $0c, $3c, $00, $00, $0c, $08, $00, $00, $0c, $08, $00, $00, $0c, $38
08a04     00 00 0C 38 
08a08     00 00 0C 0C 
08a0c     00 00 0C 0C 
08a10     00 00 0C 34 | 	byte	$00, $00, $0c, $38, $00, $00, $0c, $0c, $00, $00, $0c, $0c, $00, $00, $0c, $34
08a14     00 00 0C 34 
08a18     00 00 0C 10 
08a1c     00 00 0C 10 
08a20     00 00 0C 30 | 	byte	$00, $00, $0c, $34, $00, $00, $0c, $10, $00, $00, $0c, $10, $00, $00, $0c, $30
08a24     00 00 0C 30 
08a28     00 00 0C 14 
08a2c     00 00 0C 14 
08a30     00 00 0C 2C | 	byte	$00, $00, $0c, $30, $00, $00, $0c, $14, $00, $00, $0c, $14, $00, $00, $0c, $2c
08a34     00 00 0C 2C 
08a38     00 00 0C 18 
08a3c     01 AC 0C 18 
08a40     00 00 0C 28 | 	byte	$00, $00, $0c, $2c, $00, $00, $0c, $18, $01, $ac, $0c, $18, $00, $00, $0c, $28
08a44     01 AC 0C 28 
08a48     00 00 0C 1C 
08a4c     00 00 0C 1C 
08a50     00 00 0C 24 | 	byte	$01, $ac, $0c, $28, $00, $00, $0c, $1c, $00, $00, $0c, $1c, $00, $00, $0c, $24
08a54     00 00 0C 24 
08a58     00 00 0C 20 
08a5c     01 AC 0C 20 
08a60     00 00 0C 20 | 	byte	$00, $00, $0c, $24, $00, $00, $0c, $20, $01, $ac, $0c, $20, $00, $00, $0c, $20
08a64     01 AC 0C 20 
08a68     00 00 0C 24 
08a6c     00 00 0C 24 
08a70     00 00 0C 1C | 	byte	$01, $ac, $0c, $20, $00, $00, $0c, $24, $00, $00, $0c, $24, $00, $00, $0c, $1c
08a74     00 00 0C 1C 
08a78     00 00 0C 28 
08a7c     00 00 0C 28 
08a80     00 00 0C 18 | 	byte	$00, $00, $0c, $1c, $00, $00, $0c, $28, $00, $00, $0c, $28, $00, $00, $0c, $18
08a84     00 00 0C 18 
08a88     00 00 0C 2C 
08a8c     00 00 0C 2C 
08a90     00 00 0C 14 | 	byte	$00, $00, $0c, $18, $00, $00, $0c, $2c, $00, $00, $0c, $2c, $00, $00, $0c, $14
08a94     00 00 0C 14 
08a98     00 00 0C 30 
08a9c     01 AC 0C 30 
08aa0     00 00 0C 10 | 	byte	$00, $00, $0c, $14, $00, $00, $0c, $30, $01, $ac, $0c, $30, $00, $00, $0c, $10
08aa4     01 AC 0C 10 
08aa8     00 00 0C 34 
08aac     00 00 0C 34 
08ab0     00 00 0C 0C | 	byte	$01, $ac, $0c, $10, $00, $00, $0c, $34, $00, $00, $0c, $34, $00, $00, $0c, $0c
08ab4     00 00 0C 0C 
08ab8     00 00 0C 38 
08abc     00 00 0C 38 
08ac0     00 00 0C 08 | 	byte	$00, $00, $0c, $0c, $00, $00, $0c, $38, $00, $00, $0c, $38, $00, $00, $0c, $08
08ac4     00 00 0C 08 
08ac8     00 00 0C 3C 
08acc     00 00 0C 3C 
08ad0     00 00 0C 04 | 	byte	$00, $00, $0c, $08, $00, $00, $0c, $3c, $00, $00, $0c, $3c, $00, $00, $0c, $04
08ad4     00 00 0C 04 
08ad8     00 00 0C 40 
08adc     01 AC 0C 40 
08ae0     00 00 0C 03 | 	byte	$00, $00, $0c, $04, $00, $00, $0c, $40, $01, $ac, $0c, $40, $00, $00, $0c, $03
08ae4     01 AC 0C 03 
08ae8     00 00 0C 3C 
08aec     00 00 0C 3C 
08af0     00 00 0C 04 | 	byte	$01, $ac, $0c, $03, $00, $00, $0c, $3c, $00, $00, $0c, $3c, $00, $00, $0c, $04
08af4     00 00 0C 04 
08af8     00 00 0C 38 
08afc     00 00 0C 38 
08b00     00 00 0C 08 | 	byte	$00, $00, $0c, $04, $00, $00, $0c, $38, $00, $00, $0c, $38, $00, $00, $0c, $08
08b04     00 00 0C 08 
08b08     00 00 0C 34 
08b0c     00 00 0C 34 
08b10     00 00 0C 0C | 	byte	$00, $00, $0c, $08, $00, $00, $0c, $34, $00, $00, $0c, $34, $00, $00, $0c, $0c
08b14     00 00 0C 0C 
08b18     00 00 0C 30 
08b1c     00 00 0C 30 
08b20     00 00 0C 10 | 	byte	$00, $00, $0c, $0c, $00, $00, $0c, $30, $00, $00, $0c, $30, $00, $00, $0c, $10
08b24     00 00 0C 10 
08b28     00 00 0C 2C 
08b2c     00 00 0C 2C 
08b30     00 00 0C 14 | 	byte	$00, $00, $0c, $10, $00, $00, $0c, $2c, $00, $00, $0c, $2c, $00, $00, $0c, $14
08b34     00 00 0C 14 
08b38     00 00 0C 28 
08b3c     01 AC 0C 28 
08b40     00 00 0C 18 | 	byte	$00, $00, $0c, $14, $00, $00, $0c, $28, $01, $ac, $0c, $28, $00, $00, $0c, $18
08b44     01 AC 0C 18 
08b48     00 00 0C 24 
08b4c     00 00 0C 24 
08b50     00 00 0C 1C | 	byte	$01, $ac, $0c, $18, $00, $00, $0c, $24, $00, $00, $0c, $24, $00, $00, $0c, $1c
08b54     00 00 0C 1C 
08b58     00 00 0C 20 
08b5c     01 AC 0C 20 
08b60     00 00 0C 20 | 	byte	$00, $00, $0c, $1c, $00, $00, $0c, $20, $01, $ac, $0c, $20, $00, $00, $0c, $20
08b64     01 AC 0C 20 
08b68     00 00 0C 1C 
08b6c     00 00 0C 1C 
08b70     00 00 0C 24 | 	byte	$01, $ac, $0c, $20, $00, $00, $0c, $1c, $00, $00, $0c, $1c, $00, $00, $0c, $24
08b74     00 00 0C 24 
08b78     00 00 0C 18 
08b7c     00 00 0C 18 
08b80     00 00 0C 28 | 	byte	$00, $00, $0c, $24, $00, $00, $0c, $18, $00, $00, $0c, $18, $00, $00, $0c, $28
08b84     00 00 0C 28 
08b88     00 00 0C 14 
08b8c     00 00 0C 14 
08b90     00 00 0C 2C | 	byte	$00, $00, $0c, $28, $00, $00, $0c, $14, $00, $00, $0c, $14, $00, $00, $0c, $2c
08b94     00 00 0C 2C 
08b98     00 00 0C 10 
08b9c     01 AC 0C 10 
08ba0     00 00 0C 30 | 	byte	$00, $00, $0c, $2c, $00, $00, $0c, $10, $01, $ac, $0c, $10, $00, $00, $0c, $30
08ba4     01 AC 0C 30 
08ba8     00 00 0C 0C 
08bac     00 00 0C 0C 
08bb0     00 00 0C 34 | 	byte	$01, $ac, $0c, $30, $00, $00, $0c, $0c, $00, $00, $0c, $0c, $00, $00, $0c, $34
08bb4     00 00 0C 34 
08bb8     00 00 0C 08 
08bbc     00 00 0C 08 
08bc0     00 00 0C 38 | 	byte	$00, $00, $0c, $34, $00, $00, $0c, $08, $00, $00, $0c, $08, $00, $00, $0c, $38
08bc4     00 00 0C 38 
08bc8     00 00 0C 04 
08bcc     00 00 0C 04 
08bd0     00 00 0C 3C | 	byte	$00, $00, $0c, $38, $00, $00, $0c, $04, $00, $00, $0c, $04, $00, $00, $0c, $3c
08bd4     00 00 0C 3C 
08bd8     01 7D 2C 03 
08bdc     01 AC 0C 03 
08be0     01 7D 2C 40 | 	byte	$00, $00, $0c, $3c, $01, $7d, $2c, $03, $01, $ac, $0c, $03, $01, $7d, $2c, $40
08be4     01 AC 0C 40 
08be8     00 00 0C 04 
08bec     00 00 0C 04 
08bf0     00 00 0C 3C | 	byte	$01, $ac, $0c, $40, $00, $00, $0c, $04, $00, $00, $0c, $04, $00, $00, $0c, $3c
08bf4     00 00 0C 3C 
08bf8     00 00 0C 08 
08bfc     00 00 0C 08 
08c00     00 00 0C 38 | 	byte	$00, $00, $0c, $3c, $00, $00, $0c, $08, $00, $00, $0c, $08, $00, $00, $0c, $38
08c04     00 00 0C 38 
08c08     00 00 0C 0C 
08c0c     00 00 0C 0C 
08c10     00 00 0C 34 | 	byte	$00, $00, $0c, $38, $00, $00, $0c, $0c, $00, $00, $0c, $0c, $00, $00, $0c, $34
08c14     00 00 0C 34 
08c18     00 00 0C 10 
08c1c     00 00 0C 10 
08c20     00 00 0C 30 | 	byte	$00, $00, $0c, $34, $00, $00, $0c, $10, $00, $00, $0c, $10, $00, $00, $0c, $30
08c24     00 00 0C 30 
08c28     00 00 0C 14 
08c2c     00 00 0C 14 
08c30     00 00 0C 2C | 	byte	$00, $00, $0c, $30, $00, $00, $0c, $14, $00, $00, $0c, $14, $00, $00, $0c, $2c
08c34     00 00 0C 2C 
08c38     00 00 0C 18 
08c3c     01 AC 0C 18 
08c40     00 00 0C 28 | 	byte	$00, $00, $0c, $2c, $00, $00, $0c, $18, $01, $ac, $0c, $18, $00, $00, $0c, $28
08c44     01 AC 0C 28 
08c48     00 00 0C 1C 
08c4c     00 00 0C 1C 
08c50     00 00 0C 24 | 	byte	$01, $ac, $0c, $28, $00, $00, $0c, $1c, $00, $00, $0c, $1c, $00, $00, $0c, $24
08c54     00 00 0C 24 
08c58     00 00 0C 20 
08c5c     01 AC 0C 20 
08c60     00 00 0C 20 | 	byte	$00, $00, $0c, $24, $00, $00, $0c, $20, $01, $ac, $0c, $20, $00, $00, $0c, $20
08c64     01 AC 0C 20 
08c68     00 00 0C 24 
08c6c     00 00 0C 24 
08c70     00 00 0C 1C | 	byte	$01, $ac, $0c, $20, $00, $00, $0c, $24, $00, $00, $0c, $24, $00, $00, $0c, $1c
08c74     00 00 0C 1C 
08c78     00 00 0C 28 
08c7c     00 00 0C 28 
08c80     00 00 0C 18 | 	byte	$00, $00, $0c, $1c, $00, $00, $0c, $28, $00, $00, $0c, $28, $00, $00, $0c, $18
08c84     00 00 0C 18 
08c88     00 00 0C 2C 
08c8c     00 00 0C 2C 
08c90     00 00 0C 14 | 	byte	$00, $00, $0c, $18, $00, $00, $0c, $2c, $00, $00, $0c, $2c, $00, $00, $0c, $14
08c94     00 00 0C 14 
08c98     00 00 0C 30 
08c9c     01 AC 0C 30 
08ca0     00 00 0C 10 | 	byte	$00, $00, $0c, $14, $00, $00, $0c, $30, $01, $ac, $0c, $30, $00, $00, $0c, $10
08ca4     01 AC 0C 10 
08ca8     00 00 0C 34 
08cac     00 00 0C 34 
08cb0     00 00 0C 0C | 	byte	$01, $ac, $0c, $10, $00, $00, $0c, $34, $00, $00, $0c, $34, $00, $00, $0c, $0c
08cb4     00 00 0C 0C 
08cb8     00 00 0C 38 
08cbc     00 00 0C 38 
08cc0     00 00 0C 08 | 	byte	$00, $00, $0c, $0c, $00, $00, $0c, $38, $00, $00, $0c, $38, $00, $00, $0c, $08
08cc4     00 00 0C 08 
08cc8     00 00 0C 3C 
08ccc     00 00 0C 3C 
08cd0     00 00 0C 04 | 	byte	$00, $00, $0c, $08, $00, $00, $0c, $3c, $00, $00, $0c, $3c, $00, $00, $0c, $04
08cd4     00 00 0C 04 
08cd8     00 00 0C 40 
08cdc     01 AC 0C 40 
08ce0     00 00 0C 03 | 	byte	$00, $00, $0c, $04, $00, $00, $0c, $40, $01, $ac, $0c, $40, $00, $00, $0c, $03
08ce4     01 AC 0C 03 
08ce8     00 00 0C 3C 
08cec     00 00 0C 3C 
08cf0     00 00 0C 04 | 	byte	$01, $ac, $0c, $03, $00, $00, $0c, $3c, $00, $00, $0c, $3c, $00, $00, $0c, $04
08cf4     00 00 0C 04 
08cf8     00 00 0C 38 
08cfc     00 00 0C 38 
08d00     00 00 0C 08 | 	byte	$00, $00, $0c, $04, $00, $00, $0c, $38, $00, $00, $0c, $38, $00, $00, $0c, $08
08d04     00 00 0C 08 
08d08     00 00 0C 34 
08d0c     00 00 0C 34 
08d10     00 00 0C 0C | 	byte	$00, $00, $0c, $08, $00, $00, $0c, $34, $00, $00, $0c, $34, $00, $00, $0c, $0c
08d14     00 00 0C 0C 
08d18     00 00 0C 30 
08d1c     00 00 0C 30 
08d20     00 00 0C 10 | 	byte	$00, $00, $0c, $0c, $00, $00, $0c, $30, $00, $00, $0c, $30, $00, $00, $0c, $10
08d24     00 00 0C 10 
08d28     00 00 0C 2C 
08d2c     00 00 0C 2C 
08d30     00 00 0C 14 | 	byte	$00, $00, $0c, $10, $00, $00, $0c, $2c, $00, $00, $0c, $2c, $00, $00, $0c, $14
08d34     00 00 0C 14 
08d38     00 00 0C 28 
08d3c     01 AC 0C 28 
08d40     00 00 0C 18 | 	byte	$00, $00, $0c, $14, $00, $00, $0c, $28, $01, $ac, $0c, $28, $00, $00, $0c, $18
08d44     01 AC 0C 18 
08d48     00 00 0C 24 
08d4c     00 00 0C 24 
08d50     00 00 0C 1C | 	byte	$01, $ac, $0c, $18, $00, $00, $0c, $24, $00, $00, $0c, $24, $00, $00, $0c, $1c
08d54     00 00 0C 1C 
08d58     00 00 0C 20 
08d5c     01 AC 0C 20 
08d60     00 00 0C 20 | 	byte	$00, $00, $0c, $1c, $00, $00, $0c, $20, $01, $ac, $0c, $20, $00, $00, $0c, $20
08d64     01 AC 0C 20 
08d68     00 00 0C 1C 
08d6c     00 00 0C 1C 
08d70     00 00 0C 24 | 	byte	$01, $ac, $0c, $20, $00, $00, $0c, $1c, $00, $00, $0c, $1c, $00, $00, $0c, $24
08d74     00 00 0C 24 
08d78     00 00 0C 18 
08d7c     00 00 0C 18 
08d80     00 00 0C 28 | 	byte	$00, $00, $0c, $24, $00, $00, $0c, $18, $00, $00, $0c, $18, $00, $00, $0c, $28
08d84     00 00 0C 28 
08d88     00 00 0C 14 
08d8c     00 00 0C 14 
08d90     00 00 0C 2C | 	byte	$00, $00, $0c, $28, $00, $00, $0c, $14, $00, $00, $0c, $14, $00, $00, $0c, $2c
08d94     00 00 0C 2C 
08d98     00 00 0C 10 
08d9c     01 AC 0C 10 
08da0     00 00 0C 30 | 	byte	$00, $00, $0c, $2c, $00, $00, $0c, $10, $01, $ac, $0c, $10, $00, $00, $0c, $30
08da4     01 AC 0C 30 
08da8     00 00 0C 0C 
08dac     00 00 0C 0C 
08db0     00 00 0C 34 | 	byte	$01, $ac, $0c, $30, $00, $00, $0c, $0c, $00, $00, $0c, $0c, $00, $00, $0c, $34
08db4     00 00 0C 34 
08db8     00 00 0C 08 
08dbc     00 00 0C 08 
08dc0     00 00 0C 38 | 	byte	$00, $00, $0c, $34, $00, $00, $0c, $08, $00, $00, $0c, $08, $00, $00, $0c, $38
08dc4     00 00 0C 38 
08dc8     00 00 0C 04 
08dcc     00 00 0C 04 
08dd0     00 00 0C 3C | 	byte	$00, $00, $0c, $38, $00, $00, $0c, $04, $00, $00, $0c, $04, $00, $00, $0c, $3c
08dd4     00 00 0C 3C 
08dd8     00 00 00 00 
08ddc     01 AC 3C 35 
08de0     01 AC 20 00 | 	byte	$00, $00, $0c, $3c, $00, $00, $00, $00, $01, $ac, $3c, $35, $01, $ac, $20, $00
08de4     01 AC 10 00 
08de8     00 00 00 00 
08dec     00 00 00 00 
08df0     00 00 00 00 | 	byte	$01, $ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08df4     00 00 00 00 
08df8     00 00 00 00 | 	byte	$00[8]
08dfc     01 AC 00 00 
08e00     00 00 00 00 
08e04     00 00 00 00 
08e08     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e0c     01 AC 00 00 
08e10     00 00 00 00 
08e14     00 00 00 00 
08e18     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e1c     01 AC 00 00 
08e20     00 00 00 00 
08e24     00 00 00 00 
08e28     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e2c     00 00 00 00 
08e30     00 00 00 00 
08e34     00 00 00 00 
08e38     00 00 00 00 
08e3c     00          | 	byte	$00[17]
08e3d     D6 00 00 00 
08e41     00 00 00 01 
08e45     AC 10 00 00 
08e49     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
08e4d     00 00 00 00 
08e51     00 00 00 00 
08e55     00 00 00 00 
08e59     00 00 00    | 	byte	$00[15]
08e5c     01 AC 00 00 
08e60     00 00 00 00 
08e64     01 AC 10 00 
08e68     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
08e6c     00 00 00 00 
08e70     00 00 00 00 
08e74     00 00 00 00 
08e78     00 00 00 00 
08e7c     00          | 	byte	$00[17]
08e7d     D6 00 00 00 
08e81     00 00 00 00 
08e85     00 00 00 00 
08e89     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e8d     00 00 00 00 
08e91     00 00 00 00 
08e95     00 00 00 00 
08e99     00 00 00    | 	byte	$00[15]
08e9c     01 AC 00 00 
08ea0     00 00 00 00 
08ea4     01 AC 10 00 
08ea8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
08eac     00 00 00 00 
08eb0     00 00 00 00 
08eb4     00 00 00 00 
08eb8     00 00 00 00 
08ebc     00          | 	byte	$00[17]
08ebd     D6 00 00 00 
08ec1     00 00 00 00 
08ec5     00 00 00 00 
08ec9     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ecd     00 00 00 00 
08ed1     00 00 00 00 
08ed5     00 00 00 00 
08ed9     00 00 00    | 	byte	$00[15]
08edc     01 AC 00 00 
08ee0     00 00 00 00 
08ee4     01 AC 10 00 
08ee8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
08eec     00 00 00 00 
08ef0     00 00 00 00 
08ef4     00 00 00 00 
08ef8     00 00 00 00 | 	byte	$00[16]
08efc     01 AC 00 00 
08f00     00 00 00 00 
08f04     00 00 00 00 
08f08     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f0c     01 AC 00 00 
08f10     00 00 00 00 
08f14     00 00 00 00 
08f18     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f1c     01 AC 00 00 
08f20     00 00 00 00 
08f24     00 00 00 00 
08f28     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f2c     00 00 00 00 
08f30     00 00 00 00 
08f34     00 00 00 00 
08f38     00 00 00 00 
08f3c     00          | 	byte	$00[17]
08f3d     D6 00 00 00 
08f41     00 00 00 01 
08f45     AC 10 00 00 
08f49     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
08f4d     00 00 00 00 
08f51     00 00 00 00 
08f55     00 00 00 00 
08f59     00 00 00    | 	byte	$00[15]
08f5c     01 AC 00 00 
08f60     00 00 00 00 
08f64     01 AC 10 00 
08f68     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
08f6c     00 00 00 00 
08f70     00 00 00 00 
08f74     00 00 00 00 
08f78     00 00 00 00 
08f7c     00          | 	byte	$00[17]
08f7d     D6 00 00 00 
08f81     00 00 00 00 
08f85     00 00 00 00 
08f89     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f8d     00 00 00 00 
08f91     00 00 00 00 
08f95     00 00 00 00 
08f99     00 00 00    | 	byte	$00[15]
08f9c     01 AC 00 00 
08fa0     00 00 00 00 
08fa4     01 AC 10 00 
08fa8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
08fac     00 00 00 00 
08fb0     00 00 00 00 
08fb4     00 00 00 00 
08fb8     00 00 00 00 
08fbc     00          | 	byte	$00[17]
08fbd     D6 00 00 00 
08fc1     00 00 00 00 
08fc5     00 00 00 00 
08fc9     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fcd     00 00 00 00 
08fd1     00 00 00 00 
08fd5     00 00 00 00 
08fd9     00 00 00    | 	byte	$00[15]
08fdc     01 68 00 00 
08fe0     00 00 00 00 
08fe4     01 AC 10 00 
08fe8     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
08fec     00 00 00 00 
08ff0     00 00 00 00 
08ff4     00 00 00 00 
08ff8     00 00 00 00 | 	byte	$00[16]
08ffc     01 68 00 00 
09000     00 00 00 00 
09004     00 00 00 00 
09008     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0900c     01 68 00 00 
09010     00 00 00 00 
09014     00 00 00 00 
09018     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0901c     01 68 00 00 
09020     00 00 00 00 
09024     00 00 00 00 
09028     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0902c     00 00 00 00 
09030     00 00 00 00 
09034     00 00 00 00 
09038     00 00 00 00 
0903c     00          | 	byte	$00[17]
0903d     B4 00 00 00 
09041     00 00 00 01 
09045     AC 10 00 00 
09049     00 00 00 00 | 	byte	$b4, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0904d     00 00 00 00 
09051     00 00 00 00 
09055     00 00 00 00 
09059     00 00 00    | 	byte	$00[15]
0905c     01 68 00 00 
09060     00 00 00 00 
09064     01 AC 10 00 
09068     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0906c     00 00 00 00 
09070     00 00 00 00 
09074     00 00 00 00 
09078     00 00 00 00 
0907c     00          | 	byte	$00[17]
0907d     B4 00 00 00 
09081     00 00 00 00 
09085     00 00 00 00 
09089     00 00 00 00 | 	byte	$b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0908d     00 00 00 00 
09091     00 00 00 00 
09095     00 00 00 00 
09099     00 00 00    | 	byte	$00[15]
0909c     01 68 00 00 
090a0     00 00 00 00 
090a4     01 AC 10 00 
090a8     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
090ac     00 00 00 00 
090b0     00 00 00 00 
090b4     00 00 00 00 
090b8     00 00 00 00 
090bc     00          | 	byte	$00[17]
090bd     B4 00 00 00 
090c1     00 00 00 00 
090c5     00 00 00 00 
090c9     00 00 00 00 | 	byte	$b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090cd     00 00 00 00 
090d1     00 00 00 00 
090d5     00 00 00 00 
090d9     00 00 00    | 	byte	$00[15]
090dc     01 68 00 00 
090e0     00 00 00 00 
090e4     01 AC 10 00 
090e8     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
090ec     00 00 00 00 
090f0     00 00 00 00 
090f4     00 00 00 00 
090f8     00 00 00 00 | 	byte	$00[16]
090fc     01 68 00 00 
09100     00 00 00 00 
09104     00 00 00 00 
09108     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0910c     01 68 00 00 
09110     00 00 00 00 
09114     00 00 00 00 
09118     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0911c     01 68 00 00 
09120     00 00 00 00 
09124     00 00 00 00 
09128     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0912c     00 00 00 00 
09130     00 00 00 00 
09134     00 00 00 00 
09138     00 00 00 00 
0913c     00          | 	byte	$00[17]
0913d     B4 00 00 00 
09141     00 00 00 01 
09145     AC 10 00 00 
09149     00 00 00 00 | 	byte	$b4, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0914d     00 00 00 00 
09151     00 00 00 00 
09155     00 00 00 00 
09159     00 00 00    | 	byte	$00[15]
0915c     01 68 00 00 
09160     00 00 00 00 
09164     01 AC 10 00 
09168     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0916c     00 00 00 00 
09170     00 00 00 00 
09174     00 00 00 00 
09178     00 00 00 00 
0917c     00          | 	byte	$00[17]
0917d     B4 00 00 00 
09181     00 00 00 00 
09185     00 00 00 00 
09189     00 00 00 00 | 	byte	$b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0918d     00 00 00 00 
09191     00 00 00 00 
09195     00 00 00 00 
09199     00 00 00    | 	byte	$00[15]
0919c     01 68 00 00 
091a0     00 00 00 00 
091a4     01 AC 10 00 
091a8     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
091ac     00 00 00 00 
091b0     00 00 00 00 
091b4     00 00 00 00 
091b8     00 00 00 00 
091bc     00          | 	byte	$00[17]
091bd     B4 00 00 00 
091c1     00 00 00 00 
091c5     00 00 00 00 
091c9     00 00 00 00 | 	byte	$b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091cd     00 00 00 00 
091d1     00 00 00 00 
091d5     00 00 00 00 
091d9     00 00 00    | 	byte	$00[15]
091dc     01 7D 00 00 
091e0     00 00 00 00 
091e4     01 AC 10 00 
091e8     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
091ec     00 00 00 00 
091f0     00 00 00 00 
091f4     00 00 00 00 
091f8     00 00 00 00 | 	byte	$00[16]
091fc     01 7D 00 00 
09200     00 00 00 00 
09204     00 00 00 00 
09208     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0920c     01 7D 00 00 
09210     00 00 00 00 
09214     00 00 00 00 
09218     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0921c     01 7D 00 00 
09220     00 00 00 00 
09224     00 00 00 00 
09228     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0922c     00 00 00 00 
09230     00 00 00 00 
09234     00 00 00 00 
09238     00 00 00 00 
0923c     00          | 	byte	$00[17]
0923d     BE 00 00 00 
09241     00 00 00 01 
09245     AC 10 00 00 
09249     00 00 00 00 | 	byte	$be, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0924d     00 00 00 00 
09251     00 00 00 00 
09255     00 00 00 00 
09259     00 00 00    | 	byte	$00[15]
0925c     01 7D 00 00 
09260     00 00 00 00 
09264     01 AC 10 00 
09268     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0926c     00 00 00 00 
09270     00 00 00 00 
09274     00 00 00 00 
09278     00 00 00 00 
0927c     00          | 	byte	$00[17]
0927d     BE 00 00 00 
09281     00 00 00 00 
09285     00 00 00 00 
09289     00 00 00 00 | 	byte	$be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0928d     00 00 00 00 
09291     00 00 00 00 
09295     00 00 00 00 
09299     00 00 00    | 	byte	$00[15]
0929c     01 7D 00 00 
092a0     00 00 00 00 
092a4     01 AC 10 00 
092a8     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
092ac     00 00 00 00 
092b0     00 00 00 00 
092b4     00 00 00 00 
092b8     00 00 00 00 
092bc     00          | 	byte	$00[17]
092bd     BE 00 00 00 
092c1     00 00 00 00 
092c5     00 00 00 00 
092c9     00 00 00 00 | 	byte	$be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092cd     00 00 00 00 
092d1     00 00 00 00 
092d5     00 00 00 00 
092d9     00 00 00    | 	byte	$00[15]
092dc     01 7D 00 00 
092e0     00 00 00 00 
092e4     01 AC 10 00 
092e8     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
092ec     00 00 00 00 
092f0     00 00 00 00 
092f4     00 00 00 00 
092f8     00 00 00 00 | 	byte	$00[16]
092fc     01 7D 00 00 
09300     00 00 00 00 
09304     00 00 00 00 
09308     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0930c     01 7D 00 00 
09310     00 00 00 00 
09314     00 00 00 00 
09318     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0931c     01 7D 00 00 
09320     00 00 00 00 
09324     00 00 00 00 
09328     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0932c     00 00 00 00 
09330     00 00 00 00 
09334     00 00 00 00 
09338     00 00 00 00 
0933c     00          | 	byte	$00[17]
0933d     BE 00 00 00 
09341     00 00 00 01 
09345     AC 10 00 00 
09349     00 00 00 00 | 	byte	$be, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0934d     00 00 00 00 
09351     00 00 00 00 
09355     00 00 00 00 
09359     00 00 00    | 	byte	$00[15]
0935c     01 7D 00 00 
09360     00 00 00 00 
09364     01 AC 10 00 
09368     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0936c     00 00 00 00 
09370     00 00 00 00 
09374     00 00 00 00 
09378     00 00 00 00 
0937c     00          | 	byte	$00[17]
0937d     BE 00 00 00 
09381     00 00 00 00 
09385     00 00 00 00 
09389     00 00 00 00 | 	byte	$be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0938d     00 00 00 00 
09391     00 00 00 00 
09395     00 00 00 00 
09399     00 00 00    | 	byte	$00[15]
0939c     01 7D 00 00 
093a0     00 00 00 00 
093a4     01 AC 10 00 
093a8     00 00 00 00 | 	byte	$01, $7d, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
093ac     00 00 00 00 
093b0     00 00 00 00 
093b4     00 00 00 00 
093b8     00 00 00 00 
093bc     00          | 	byte	$00[17]
093bd     BE 00 00 00 
093c1     00 00 00 00 
093c5     00 00 00 00 
093c9     00 00 00 00 | 	byte	$be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093cd     00 00 00 00 
093d1     00 00 00 00 
093d5     00 00 00 00 
093d9     00 00 00    | 	byte	$00[15]
093dc     01 AC 00 00 
093e0     00 00 00 00 
093e4     01 AC 10 00 
093e8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
093ec     00 00 00 00 
093f0     00 00 00 00 
093f4     00 00 00 00 
093f8     00 00 00 00 | 	byte	$00[16]
093fc     01 AC 00 00 
09400     00 00 00 00 
09404     00 00 00 00 
09408     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0940c     01 AC 00 00 
09410     00 00 00 00 
09414     00 00 00 00 
09418     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0941c     01 AC 00 00 
09420     00 00 00 00 
09424     00 00 00 00 
09428     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0942c     00 00 00 00 
09430     00 00 00 00 
09434     00 00 00 00 
09438     00 00 00 00 | 	byte	$00[16]
0943c     01 AC 00 00 
09440     00 00 00 00 
09444     01 AC 10 00 
09448     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0944c     00 00 00 00 
09450     00 00 00 00 
09454     00 00 00 00 
09458     00 00 00 00 | 	byte	$00[16]
0945c     01 AC 00 00 
09460     00 00 00 00 
09464     01 AC 10 00 
09468     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0946c     00 00 00 00 
09470     00 00 00 00 
09474     00 00 00 00 
09478     00 00 00 00 | 	byte	$00[16]
0947c     01 AC 00 00 
09480     00 00 00 00 
09484     00 00 00 00 
09488     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0948c     00 00 00 00 
09490     00 00 00 00 
09494     00 00 00 00 
09498     00 00 00 00 
0949c     00          | 	byte	$00[17]
0949d     D6 00 00 00 
094a1     00 00 00 01 
094a5     AC 10 00 00 
094a9     00 00 00 00 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
094ad     00 00 00 00 
094b1     00 00 00 00 
094b5     00 00 00 00 
094b9     00 00 00    | 	byte	$00[15]
094bc     01 AC 00 00 
094c0     00 00 00 00 
094c4     00 00 00 00 
094c8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094cc     00 00 00 00 
094d0     00 00 00 00 
094d4     00 00 00 00 
094d8     00 00 00 00 | 	byte	$00[16]
094dc     01 AC 00 00 
094e0     00 00 00 00 
094e4     01 AC 10 00 
094e8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
094ec     00 00 00 00 
094f0     00 00 00 00 
094f4     00 00 00 00 
094f8     00 00 00 00 | 	byte	$00[16]
094fc     01 AC 00 00 
09500     00 00 00 00 
09504     00 00 00 00 
09508     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0950c     01 AC 00 00 
09510     00 00 00 00 
09514     00 00 00 00 
09518     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0951c     01 AC 00 00 
09520     00 00 00 00 
09524     00 00 00 00 
09528     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0952c     00 00 00 00 
09530     00 00 00 00 
09534     00 00 00 00 
09538     00 00 00 00 | 	byte	$00[16]
0953c     01 AC 00 00 
09540     00 00 00 00 
09544     01 AC 10 00 
09548     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0954c     00 00 00 00 
09550     00 00 00 00 
09554     00 00 00 00 
09558     00 00 00 00 | 	byte	$00[16]
0955c     01 AC 00 00 
09560     00 00 00 00 
09564     01 AC 10 00 
09568     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0956c     00 00 00 00 
09570     00 00 00 00 
09574     00 00 00 00 
09578     00 00 00 00 | 	byte	$00[16]
0957c     01 AC 00 00 
09580     00 00 00 00 
09584     00 00 00 00 
09588     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0958c     00 00 00 00 
09590     00 00 00 00 
09594     00 00 00 00 
09598     00 00 00 00 | 	byte	$00[16]
0959c     01 AC 00 00 
095a0     00 00 00 00 
095a4     01 AC 10 00 
095a8     00 00 00 00 | 	byte	$01, $ac, $00, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
095ac     00 00 00 00 
095b0     00 00 00 00 
095b4     00 00 00 00 
095b8     00 00 00 00 
095bc     00          | 	byte	$00[17]
095bd     8F 00 00 00 
095c1     00 00 00 00 
095c5     00 00 00 00 
095c9     00 00 00 00 | 	byte	$8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095cd     00 00 00 00 
095d1     00 00 00 00 
095d5     00 00 00    | 	byte	$00[11]
095d8     01 AC 40 00 
095dc     01 AC 30 00 
095e0     01 AC 20 00 
095e4     01 AC 10 00 | 	byte	$01, $ac, $40, $00, $01, $ac, $30, $00, $01, $ac, $20, $00, $01, $ac, $10, $00
095e8     00 00 00 00 
095ec     00 00 00 00 
095f0     00 00 00 00 
095f4     00 00 00 00 
095f8     00 00 00 00 | 	byte	$00[20]
095fc     01 AC 30 00 
09600     00 00 00 00 
09604     00 00 00 00 
09608     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0960c     01 AC 30 00 
09610     00 00 00 00 
09614     00 00 00 00 
09618     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0961c     01 AC 30 00 
09620     00 00 00 00 
09624     00 00 00 00 
09628     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0962c     00 00 00 00 
09630     00 00 00 00 
09634     00 00 00 00 
09638     00 00 00 00 
0963c     00          | 	byte	$00[17]
0963d     D6 30 00 00 
09641     00 00 00 01 
09645     AC 10 00 00 
09649     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0964d     00 00 00 00 
09651     00 00 00 00 
09655     00 00 00 00 
09659     00 00 00    | 	byte	$00[15]
0965c     01 AC 30 00 
09660     00 00 00 00 
09664     01 AC 10 00 
09668     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0966c     00 00 00 00 
09670     00 00 00 00 
09674     00 00 00 00 
09678     00 00 00 00 
0967c     00          | 	byte	$00[17]
0967d     D6 30 00 00 
09681     00 00 00 00 
09685     00 00 00 00 
09689     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0968d     00 00 00 00 
09691     00 00 00 00 
09695     00 00 00    | 	byte	$00[11]
09698     01 1D 40 00 
0969c     01 AC 30 00 
096a0     00 00 00 00 
096a4     01 AC 10 00 | 	byte	$01, $1d, $40, $00, $01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00
096a8     00 00 00 00 
096ac     00 00 00 00 
096b0     00 00 00 00 
096b4     00 00 00 00 | 	byte	$00[16]
096b8     01 0D 40 00 
096bc     00 D6 30 00 
096c0     00 00 00 00 
096c4     00 00 00 00 | 	byte	$01, $0d, $40, $00, $00, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
096c8     00 00 00 00 
096cc     00 00 00 00 
096d0     00 00 00 00 
096d4     00 00 00 00 | 	byte	$00[16]
096d8     01 1D 40 00 
096dc     01 AC 30 00 
096e0     00 00 00 00 
096e4     01 AC 10 00 | 	byte	$01, $1d, $40, $00, $01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00
096e8     00 00 00 00 
096ec     00 00 00 00 
096f0     00 00 00 00 
096f4     00 00 00 00 
096f8     00 00 00 00 | 	byte	$00[20]
096fc     01 AC 30 00 
09700     00 00 00 00 
09704     00 00 00 00 
09708     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0970c     01 AC 30 00 
09710     00 00 00 00 
09714     00 00 00 00 
09718     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0971c     01 AC 30 00 
09720     00 00 00 00 
09724     00 00 00 00 
09728     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0972c     00 00 00 00 
09730     00 00 00 00 
09734     00 00 00 00 
09738     00 00 00 00 
0973c     00          | 	byte	$00[17]
0973d     D6 30 00 00 
09741     00 00 00 01 
09745     AC 10 00 00 
09749     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0974d     00 00 00 00 
09751     00 00 00 00 
09755     00 00 00 00 
09759     00 00 00    | 	byte	$00[15]
0975c     01 AC 30 00 
09760     00 00 00 00 
09764     01 AC 10 00 
09768     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0976c     00 00 00 00 
09770     00 00 00 00 
09774     00 00 00 00 
09778     00 00 00 00 
0977c     00          | 	byte	$00[17]
0977d     D6 30 00 00 
09781     00 00 00 00 
09785     00 00 00 00 
09789     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0978d     00 00 00 00 
09791     00 00 00 00 
09795     00 00 00    | 	byte	$00[11]
09798     01 40 40 00 
0979c     01 AC 30 00 
097a0     00 00 00 00 
097a4     01 AC 10 00 | 	byte	$01, $40, $40, $00, $01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00
097a8     00 00 00 00 
097ac     00 00 00 00 
097b0     00 00 00 00 
097b4     00 00 00 00 | 	byte	$00[16]
097b8     01 68 40 00 
097bc     00 D6 30 00 
097c0     00 00 00 00 
097c4     00 00 00 00 | 	byte	$01, $68, $40, $00, $00, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
097c8     00 00 00 00 
097cc     00 00 00 00 
097d0     00 00 00 00 
097d4     00 00 00 00 | 	byte	$00[16]
097d8     01 40 40 00 
097dc     01 40 30 00 
097e0     01 40 20 00 
097e4     01 40 10 00 | 	byte	$01, $40, $40, $00, $01, $40, $30, $00, $01, $40, $20, $00, $01, $40, $10, $00
097e8     00 00 00 00 
097ec     00 00 00 00 
097f0     00 00 00 00 
097f4     00 00 00 00 
097f8     00 00 00 00 | 	byte	$00[20]
097fc     01 40 30 00 
09800     00 00 00 00 
09804     00 00 00 00 
09808     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0980c     01 40 30 00 
09810     00 00 00 00 
09814     00 00 00 00 
09818     01 AC 40 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
0981c     01 40 30 00 
09820     00 00 00 00 
09824     00 00 00 00 
09828     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0982c     00 00 00 00 
09830     00 00 00 00 
09834     00 00 00 00 
09838     00 00 00 00 
0983c     00          | 	byte	$00[17]
0983d     A0 30 00 00 
09841     00 00 00 01 
09845     40 10 00 00 
09849     00 00 00 00 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
0984d     00 00 00 00 
09851     00 00 00 00 
09855     00 00 00 00 
09859     00 00 00    | 	byte	$00[15]
0985c     01 40 30 00 
09860     00 00 00 00 
09864     01 40 10 00 
09868     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00
0986c     00 00 00 00 
09870     00 00 00 00 
09874     00 00 00 00 
09878     00 00 00 00 
0987c     00          | 	byte	$00[17]
0987d     A0 30 00 00 
09881     00 00 00 00 
09885     00 00 00 00 
09889     00 00 00 00 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0988d     00 00 00 00 
09891     00 00 00 00 
09895     00 00 00    | 	byte	$00[11]
09898     01 68 40 00 
0989c     01 40 30 00 
098a0     00 00 00 00 
098a4     01 40 10 00 | 	byte	$01, $68, $40, $00, $01, $40, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00
098a8     00 00 00 00 
098ac     00 00 00 00 
098b0     00 00 00 00 
098b4     00 00 00 00 | 	byte	$00[16]
098b8     01 40 40 00 
098bc     00 A0 30 00 
098c0     00 00 00 00 
098c4     00 00 00 00 | 	byte	$01, $40, $40, $00, $00, $a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
098c8     00 00 00 00 
098cc     00 00 00 00 
098d0     00 00 00 00 
098d4     00 00 00 00 | 	byte	$00[16]
098d8     01 0D 40 00 
098dc     01 40 30 00 
098e0     00 00 00 00 
098e4     01 40 10 00 | 	byte	$01, $0d, $40, $00, $01, $40, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00
098e8     00 00 00 00 
098ec     00 00 00 00 
098f0     00 00 00 00 
098f4     00 00 00 00 
098f8     00 00 00 00 | 	byte	$00[20]
098fc     01 40 30 00 
09900     00 00 00 00 
09904     00 00 00 00 
09908     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0990c     01 40 30 00 
09910     00 00 00 00 
09914     00 00 00 00 
09918     01 1D 40 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $40, $00
0991c     01 40 30 00 
09920     00 00 00 00 
09924     00 00 00 00 
09928     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0992c     00 00 00 00 
09930     00 00 00 00 
09934     00 00 00 00 
09938     00 00 00 00 
0993c     00          | 	byte	$00[17]
0993d     A0 30 00 00 
09941     00 00 00 01 
09945     40 10 00 00 
09949     00 00 00 00 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
0994d     00 00 00 00 
09951     00 00 00 00 
09955     00 00 00    | 	byte	$00[11]
09958     01 40 40 00 
0995c     01 40 30 00 
09960     00 00 00 00 
09964     01 40 10 00 | 	byte	$01, $40, $40, $00, $01, $40, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00
09968     00 00 00 00 
0996c     00 00 00 00 
09970     00 00 00 00 
09974     00 00 00 00 
09978     00 00 00 00 
0997c     00          | 	byte	$00[21]
0997d     A0 30 00 00 
09981     00 00 00 00 
09985     00 00 00 00 
09989     00 00 00 00 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0998d     00 00 00 00 
09991     00 00 00 00 
09995     00 00 00    | 	byte	$00[11]
09998     01 1D 40 00 
0999c     01 40 30 00 
099a0     00 00 00 00 
099a4     01 40 10 00 | 	byte	$01, $1d, $40, $00, $01, $40, $30, $00, $00, $00, $00, $00, $01, $40, $10, $00
099a8     00 00 00 00 
099ac     00 00 00 00 
099b0     00 00 00 00 
099b4     00 00 00 00 
099b8     00 00 00 00 
099bc     00          | 	byte	$00[21]
099bd     A0 30 00 00 
099c1     00 00 00 00 
099c5     00 00 00 00 
099c9     00 00 00 00 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099cd     00 00 00 00 
099d1     00 00 00 00 
099d5     00 00 00    | 	byte	$00[11]
099d8     01 1D 40 00 
099dc     01 AC 30 00 
099e0     00 D6 2C 2D 
099e4     01 AC 10 00 | 	byte	$01, $1d, $40, $00, $01, $ac, $30, $00, $00, $d6, $2c, $2d, $01, $ac, $10, $00
099e8     00 00 00 00 
099ec     00 00 00 00 
099f0     00 00 00 00 
099f4     00 00 00 00 
099f8     00 00 00 00 | 	byte	$00[20]
099fc     01 AC 30 00 
09a00     00 B4 0C 37 
09a04     00 00 00 00 
09a08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $b4, $0c, $37, $00, $00, $00, $00, $00, $00, $00, $00
09a0c     01 AC 30 00 
09a10     00 00 00 00 
09a14     00 00 00 00 
09a18     01 AC 40 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
09a1c     01 AC 30 00 
09a20     00 A0 0C 40 
09a24     00 00 00 00 
09a28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $a0, $0c, $40, $00, $00, $00, $00, $00, $00, $00, $00
09a2c     00 00 00 00 
09a30     00 00 00 00 
09a34     00 00 00 00 
09a38     00 00 00 00 
09a3c     00          | 	byte	$00[17]
09a3d     D6 30 00 00 
09a41     D6 00 00 01 
09a45     AC 10 00 00 
09a49     00 00 00 00 | 	byte	$d6, $30, $00, $00, $d6, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
09a4d     00 00 00 00 
09a51     00 00 00 00 
09a55     00 00 00 00 
09a59     00 00 00    | 	byte	$00[15]
09a5c     01 AC 30 00 
09a60     00 B4 00 00 
09a64     01 AC 10 00 
09a68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $b4, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
09a6c     00 00 00 00 
09a70     00 00 00 00 
09a74     00 00 00 00 
09a78     00 00 00 00 
09a7c     00          | 	byte	$00[17]
09a7d     D6 30 00 00 
09a81     A0 00 00 00 
09a85     00 00 00 00 
09a89     00 00 00 00 | 	byte	$d6, $30, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a8d     00 00 00 00 
09a91     00 00 00 00 
09a95     00 00 00    | 	byte	$00[11]
09a98     01 0D 40 00 
09a9c     01 AC 30 00 
09aa0     00 D6 00 00 
09aa4     01 AC 10 00 | 	byte	$01, $0d, $40, $00, $01, $ac, $30, $00, $00, $d6, $00, $00, $01, $ac, $10, $00
09aa8     01 1D 40 00 
09aac     00 00 00 00 
09ab0     00 00 00 00 
09ab4     00 00 00 00 | 	byte	$01, $1d, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ab8     01 40 40 00 
09abc     00 D6 30 00 
09ac0     00 B4 00 00 
09ac4     00 00 00 00 | 	byte	$01, $40, $40, $00, $00, $d6, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00
09ac8     01 68 40 00 
09acc     00 D6 30 00 
09ad0     00 00 00 00 
09ad4     00 00 00 00 | 	byte	$01, $68, $40, $00, $00, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ad8     01 40 40 00 
09adc     01 40 30 00 
09ae0     00 87 00 00 
09ae4     01 40 10 00 | 	byte	$01, $40, $40, $00, $01, $40, $30, $00, $00, $87, $00, $00, $01, $40, $10, $00
09ae8     00 00 00 00 
09aec     00 00 00 00 
09af0     00 00 00 00 
09af4     00 00 00 00 
09af8     00 00 00 00 | 	byte	$00[20]
09afc     01 40 30 00 
09b00     00 8F 00 00 
09b04     00 00 00 00 
09b08     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b0c     01 40 30 00 
09b10     00 00 00 00 
09b14     00 00 00 00 
09b18     01 AC 40 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
09b1c     01 40 30 00 
09b20     00 B4 00 00 
09b24     00 00 00 00 
09b28     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b2c     00 00 00 00 
09b30     00 00 00 00 
09b34     00 00 00 00 
09b38     00 00 00 00 
09b3c     00          | 	byte	$00[17]
09b3d     A0 30 00 00 
09b41     87 00 00 01 
09b45     40 10 00 00 
09b49     00 00 00 00 | 	byte	$a0, $30, $00, $00, $87, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
09b4d     00 00 00 00 
09b51     00 00 00 00 
09b55     00 00 00 00 
09b59     00 00 00    | 	byte	$00[15]
09b5c     01 40 30 00 
09b60     00 8F 00 00 
09b64     01 40 10 00 
09b68     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $8f, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00
09b6c     00 00 00 00 
09b70     00 00 00 00 
09b74     00 00 00 00 
09b78     00 00 00 00 
09b7c     00          | 	byte	$00[17]
09b7d     A0 30 00 00 
09b81     B4 00 00 00 
09b85     00 00 00 00 
09b89     00 00 00 00 | 	byte	$a0, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b8d     00 00 00 00 
09b91     00 00 00 00 
09b95     00 00 00    | 	byte	$00[11]
09b98     01 40 40 00 
09b9c     01 40 30 00 
09ba0     00 87 00 00 
09ba4     01 40 10 00 | 	byte	$01, $40, $40, $00, $01, $40, $30, $00, $00, $87, $00, $00, $01, $40, $10, $00
09ba8     00 00 00 00 
09bac     00 00 00 00 
09bb0     00 00 00 00 
09bb4     00 00 00 00 | 	byte	$00[16]
09bb8     01 1D 40 00 
09bbc     00 A0 30 00 
09bc0     00 8F 00 00 
09bc4     00 00 00 00 | 	byte	$01, $1d, $40, $00, $00, $a0, $30, $00, $00, $8f, $00, $00, $00, $00, $00, $00
09bc8     00 00 00 00 
09bcc     00          | 	byte	$00[5]
09bcd     A0 30 00 00 
09bd1     00 00 00 00 
09bd5     00 00 00 01 
09bd9     0D 40 00 01 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $01
09bdd     0D 30 00 00 
09be1     87 00 00 01 
09be5     0D 10 00 00 
09be9     00 00 00 00 | 	byte	$0d, $30, $00, $00, $87, $00, $00, $01, $0d, $10, $00, $00, $00, $00, $00, $00
09bed     00 00 00 00 
09bf1     00 00 00 00 
09bf5     00 00 00 00 
09bf9     00 00 00    | 	byte	$00[15]
09bfc     01 0D 30 00 
09c00     00 B4 00 00 
09c04     00 00 00 00 
09c08     00 00 00 00 | 	byte	$01, $0d, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c0c     01 0D 30 00 
09c10     00 00 00 00 
09c14     00 00 00 00 
09c18     00 00 00 00 | 	byte	$01, $0d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c1c     01 0D 30 00 
09c20     00 A0 00 00 
09c24     00 00 00 00 
09c28     00 00 00 00 | 	byte	$01, $0d, $30, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c2c     00 00 00 00 
09c30     00 00 00 00 
09c34     00 00 00 00 
09c38     00          | 	byte	$00[13]
09c39     F0 40 00 00 
09c3d     87 30 00 00 
09c41     87 00 00 01 
09c45     0D 10 00 01 | 	byte	$f0, $40, $00, $00, $87, $30, $00, $00, $87, $00, $00, $01, $0d, $10, $00, $01
09c49     0D 40 00 00 
09c4d     00 00 00 00 
09c51     00 00 00 00 
09c55     00 00 00 01 | 	byte	$0d, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09c59     1D 40 00 01 
09c5d     0D 30 00 00 
09c61     B4 00 00 01 
09c65     0D 10 00 00 | 	byte	$1d, $40, $00, $01, $0d, $30, $00, $00, $b4, $00, $00, $01, $0d, $10, $00, $00
09c69     00 00 00 00 
09c6d     00 00 00 00 
09c71     00 00 00 00 
09c75     00 00 00 00 
09c79     00 00 00 00 | 	byte	$00[20]
09c7d     87 30 00 00 
09c81     A0 00 00 00 
09c85     00 00 00 00 
09c89     00 00 00 00 | 	byte	$87, $30, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c8d     00 00 00 00 
09c91     00 00 00 00 
09c95     00 00 00    | 	byte	$00[11]
09c98     01 0D 40 00 
09c9c     01 0D 30 00 
09ca0     00 87 00 00 
09ca4     01 0D 10 00 | 	byte	$01, $0d, $40, $00, $01, $0d, $30, $00, $00, $87, $00, $00, $01, $0d, $10, $00
09ca8     00 00 00 00 
09cac     00 00 00 00 
09cb0     00 00 00 00 
09cb4     00 00 00 00 
09cb8     00 00 00 00 
09cbc     00          | 	byte	$00[21]
09cbd     87 30 00 00 
09cc1     B4 00 00 00 
09cc5     00 00 00 00 
09cc9     00 00 00 00 | 	byte	$87, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ccd     00 00 00 00 
09cd1     00 00 00 00 
09cd5     00 00 00    | 	byte	$00[11]
09cd8     01 1D 40 00 
09cdc     01 AC 30 00 
09ce0     00 8F 00 00 
09ce4     01 AC 10 00 | 	byte	$01, $1d, $40, $00, $01, $ac, $30, $00, $00, $8f, $00, $00, $01, $ac, $10, $00
09ce8     00 00 00 00 
09cec     00 00 00 00 
09cf0     00 00 00 00 
09cf4     00 00 00 00 
09cf8     00 00 00 00 | 	byte	$00[20]
09cfc     01 AC 30 00 
09d00     00 B4 00 00 
09d04     00 00 00 00 
09d08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d0c     01 AC 30 00 
09d10     00 00 00 00 
09d14     00 00 00 00 
09d18     01 AC 40 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
09d1c     01 AC 30 00 
09d20     00 D6 00 00 
09d24     00 00 00 00 
09d28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d2c     00 00 00 00 
09d30     00 00 00 00 
09d34     00 00 00 00 
09d38     00 00 00 00 
09d3c     00          | 	byte	$00[17]
09d3d     D6 30 00 00 
09d41     8F 0C 37 01 
09d45     AC 10 00 00 
09d49     00 00 00 00 | 	byte	$d6, $30, $00, $00, $8f, $0c, $37, $01, $ac, $10, $00, $00, $00, $00, $00, $00
09d4d     00 00 00 00 
09d51     00 00 00 00 
09d55     00 00 00 00 
09d59     00 00 00    | 	byte	$00[15]
09d5c     01 AC 30 00 
09d60     00 B4 0C 32 
09d64     01 AC 10 00 
09d68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $b4, $0c, $32, $01, $ac, $10, $00, $00, $00, $00, $00
09d6c     00 00 00 00 
09d70     00 00 00 00 
09d74     00 00 00 00 
09d78     00 00 00 00 
09d7c     00          | 	byte	$00[17]
09d7d     D6 30 00 00 
09d81     D6 0C 2D 00 
09d85     00 00 00 00 
09d89     00 00 00 00 | 	byte	$d6, $30, $00, $00, $d6, $0c, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d8d     D6 30 00 00 
09d91     00 00 00 00 
09d95     00 00 00 00 
09d99     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d9d     00 00 00 00 
09da1     8F 0C 28 01 
09da5     AC 10 00 00 
09da9     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $0c, $28, $01, $ac, $10, $00, $00, $00, $00, $00, $00
09dad     D6 30 00 00 
09db1     00 00 00 00 
09db5     00 00 00 00 
09db9     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dbd     8F 30 00 00 
09dc1     B4 00 00 00 
09dc5     00 00 00 00 
09dc9     00 00 00 00 | 	byte	$8f, $30, $00, $00, $b4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dcd     00 00 00 00 
09dd1     00 00 00 00 
09dd5     00 00 00    | 	byte	$00[11]
09dd8     01 1D 40 00 
09ddc     01 AC 30 00 
09de0     00 AA 50 00 
09de4     01 AC 10 00 | 	byte	$01, $1d, $40, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00
09de8     00 00 00 00 
09dec     00 00 00 00 
09df0     00 00 00 00 
09df4     00 00 00 00 
09df8     00 00 00 00 | 	byte	$00[20]
09dfc     01 AC 30 00 
09e00     00 00 00 00 
09e04     00 00 00 00 
09e08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e0c     01 AC 30 00 
09e10     00 00 00 00 
09e14     00 00 00 00 
09e18     01 AC 40 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
09e1c     01 AC 30 00 
09e20     00 FE 60 00 
09e24     00 00 00 00 
09e28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e2c     00 00 00 00 
09e30     00 00 00 00 
09e34     00 00 00 00 
09e38     00 00 00 00 
09e3c     00          | 	byte	$00[17]
09e3d     D6 30 00 00 
09e41     AA 50 00 01 
09e45     AC 10 00 00 
09e49     00 00 00 00 | 	byte	$d6, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
09e4d     00 00 00 00 
09e51     00 00 00 00 
09e55     00 00 00 00 
09e59     00 00 00    | 	byte	$00[15]
09e5c     01 AC 30 00 
09e60     00 AA 50 00 
09e64     01 AC 10 00 
09e68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00
09e6c     00 00 00 00 
09e70     00 00 00 00 
09e74     00 00 00 00 
09e78     00 00 00 00 
09e7c     00          | 	byte	$00[17]
09e7d     D6 30 00 00 
09e81     FE 60 00 00 
09e85     00 00 00 00 
09e89     00 00 00 00 | 	byte	$d6, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e8d     00 00 00 00 
09e91     00 00 00 00 
09e95     00 00 00    | 	byte	$00[11]
09e98     01 0D 40 00 
09e9c     01 AC 30 00 
09ea0     00 AA 50 00 
09ea4     01 AC 10 00 | 	byte	$01, $0d, $40, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00
09ea8     01 1D 40 00 
09eac     00 00 00 00 
09eb0     00 00 00 00 
09eb4     00 00 00 00 | 	byte	$01, $1d, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09eb8     01 40 40 00 
09ebc     00 D6 30 00 
09ec0     00 FE 60 00 
09ec4     00 00 00 00 | 	byte	$01, $40, $40, $00, $00, $d6, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00
09ec8     01 68 40 00 
09ecc     00 D6 30 00 
09ed0     00 00 00 00 
09ed4     00 00 00 00 | 	byte	$01, $68, $40, $00, $00, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ed8     01 40 40 00 
09edc     01 40 30 00 
09ee0     00 AA 50 00 
09ee4     01 40 10 00 | 	byte	$01, $40, $40, $00, $01, $40, $30, $00, $00, $aa, $50, $00, $01, $40, $10, $00
09ee8     00 00 00 00 
09eec     00 00 00 00 
09ef0     00 00 00 00 
09ef4     00 00 00 00 
09ef8     00 00 00 00 | 	byte	$00[20]
09efc     01 40 30 00 
09f00     00 00 00 00 
09f04     00 00 00 00 
09f08     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f0c     01 40 30 00 
09f10     00 00 00 00 
09f14     00 00 00 00 
09f18     01 AC 40 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
09f1c     01 40 30 00 
09f20     00 FE 60 00 
09f24     00 00 00 00 
09f28     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f2c     00 00 00 00 
09f30     00 00 00 00 
09f34     00 00 00 00 
09f38     00 00 00 00 
09f3c     00          | 	byte	$00[17]
09f3d     A0 30 00 00 
09f41     AA 50 00 01 
09f45     40 10 00 00 
09f49     00 00 00 00 | 	byte	$a0, $30, $00, $00, $aa, $50, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
09f4d     00 00 00 00 
09f51     00 00 00 00 
09f55     00 00 00 00 
09f59     00 00 00    | 	byte	$00[15]
09f5c     01 40 30 00 
09f60     00 AA 50 00 
09f64     01 40 10 00 
09f68     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $50, $00, $01, $40, $10, $00, $00, $00, $00, $00
09f6c     00 00 00 00 
09f70     00 00 00 00 
09f74     00 00 00 00 
09f78     00 00 00 00 
09f7c     00          | 	byte	$00[17]
09f7d     A0 30 00 00 
09f81     FE 60 00 00 
09f85     00 00 00 00 
09f89     00 00 00 00 | 	byte	$a0, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f8d     00 00 00 00 
09f91     00 00 00 00 
09f95     00 00 00    | 	byte	$00[11]
09f98     01 40 40 00 
09f9c     01 40 30 00 
09fa0     00 AA 50 00 
09fa4     01 40 10 00 | 	byte	$01, $40, $40, $00, $01, $40, $30, $00, $00, $aa, $50, $00, $01, $40, $10, $00
09fa8     00 00 00 00 
09fac     00 00 00 00 
09fb0     00 00 00 00 
09fb4     00 00 00 00 | 	byte	$00[16]
09fb8     01 1D 40 00 
09fbc     00 A0 30 00 
09fc0     00 FE 60 00 
09fc4     00 00 00 00 | 	byte	$01, $1d, $40, $00, $00, $a0, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00
09fc8     00 00 00 00 
09fcc     00          | 	byte	$00[5]
09fcd     A0 30 00 00 
09fd1     00 00 00 00 
09fd5     00 00 00 01 
09fd9     0D 40 00 01 | 	byte	$a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $01
09fdd     0D 30 00 00 
09fe1     AA 50 00 01 
09fe5     0D 10 00 00 
09fe9     00 00 00 00 | 	byte	$0d, $30, $00, $00, $aa, $50, $00, $01, $0d, $10, $00, $00, $00, $00, $00, $00
09fed     00 00 00 00 
09ff1     00 00 00 00 
09ff5     00 00 00 00 
09ff9     00 00 00    | 	byte	$00[15]
09ffc     01 0D 30 00 
0a000     00 00 00 00 
0a004     00 00 00 00 
0a008     00 00 00 00 | 	byte	$01, $0d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a00c     01 0D 30 00 
0a010     00 00 00 00 
0a014     00 00 00 00 
0a018     00 00 00 00 | 	byte	$01, $0d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a01c     01 0D 30 00 
0a020     00 FE 60 00 
0a024     00 00 00 00 
0a028     00 00 00 00 | 	byte	$01, $0d, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a02c     00 00 00 00 
0a030     00 00 00 00 
0a034     00 00 00 00 
0a038     00          | 	byte	$00[13]
0a039     F0 40 00 00 
0a03d     87 30 00 00 
0a041     AA 50 00 01 
0a045     0D 10 00 01 | 	byte	$f0, $40, $00, $00, $87, $30, $00, $00, $aa, $50, $00, $01, $0d, $10, $00, $01
0a049     0D 40 00 00 
0a04d     00 00 00 00 
0a051     00 00 00 00 
0a055     00 00 00 01 | 	byte	$0d, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a059     1D 40 00 01 
0a05d     0D 30 00 00 
0a061     AA 50 00 01 
0a065     0D 10 00 00 | 	byte	$1d, $40, $00, $01, $0d, $30, $00, $00, $aa, $50, $00, $01, $0d, $10, $00, $00
0a069     00 00 00 00 
0a06d     00 00 00 00 
0a071     00 00 00 00 
0a075     00 00 00 00 
0a079     00 00 00 00 | 	byte	$00[20]
0a07d     87 30 00 00 
0a081     FE 60 00 00 
0a085     00 00 00 00 
0a089     00 00 00 00 | 	byte	$87, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a08d     00 00 00 00 
0a091     00 00 00 00 
0a095     00 00 00    | 	byte	$00[11]
0a098     01 0D 40 00 
0a09c     01 0D 30 00 
0a0a0     00 AA 50 00 
0a0a4     01 0D 10 00 | 	byte	$01, $0d, $40, $00, $01, $0d, $30, $00, $00, $aa, $50, $00, $01, $0d, $10, $00
0a0a8     00 00 00 00 
0a0ac     00 00 00 00 
0a0b0     00 00 00 00 
0a0b4     00 00 00 00 
0a0b8     00 00 00 00 
0a0bc     00          | 	byte	$00[21]
0a0bd     87 30 00 00 
0a0c1     FE 60 00 00 
0a0c5     00 00 00 00 
0a0c9     00 00 00 00 | 	byte	$87, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0cd     00 00 00 00 
0a0d1     00 00 00 00 
0a0d5     00 00 00    | 	byte	$00[11]
0a0d8     01 1D 40 00 
0a0dc     01 AC 30 00 
0a0e0     00 AA 50 00 
0a0e4     01 AC 10 00 | 	byte	$01, $1d, $40, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00
0a0e8     00 00 00 00 
0a0ec     00 00 00 00 
0a0f0     00 00 00 00 
0a0f4     00 00 00 00 
0a0f8     00 00 00 00 | 	byte	$00[20]
0a0fc     01 AC 30 00 
0a100     00 00 00 00 
0a104     00 00 00 00 
0a108     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a10c     01 AC 30 00 
0a110     00 00 00 00 
0a114     00 00 00 00 
0a118     01 AC 40 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $40, $00
0a11c     01 AC 30 00 
0a120     00 FE 60 00 
0a124     00 00 00 00 
0a128     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a12c     00 00 00 00 
0a130     00 00 00 00 
0a134     00 00 00 00 
0a138     00 00 00 00 
0a13c     00          | 	byte	$00[17]
0a13d     D6 30 00 00 
0a141     AA 50 00 01 
0a145     AC 10 00 00 
0a149     00 00 00 00 | 	byte	$d6, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0a14d     00 00 00 00 
0a151     00 00 00 00 
0a155     00 00 00 00 
0a159     00 00 00    | 	byte	$00[15]
0a15c     01 AC 30 00 
0a160     00 AA 50 00 
0a164     01 AC 10 00 
0a168     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0a16c     00 00 00 00 
0a170     00 00 00 00 
0a174     00 00 00 00 
0a178     00 00 00 00 
0a17c     00          | 	byte	$00[17]
0a17d     D6 30 00 00 
0a181     FE 60 00 00 
0a185     00 00 00 00 
0a189     00 00 00 00 | 	byte	$d6, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a18d     D6 30 00 00 
0a191     00 00 00 00 
0a195     00 00 00 00 
0a199     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a19d     00 00 00 00 
0a1a1     FE 60 00 01 
0a1a5     AC 10 00 00 
0a1a9     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $60, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0a1ad     D6 30 00 00 
0a1b1     00 00 00 00 
0a1b5     00 00 00 00 
0a1b9     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1bd     8F 30 00 00 
0a1c1     FE 60 00 00 
0a1c5     00 00 00 00 
0a1c9     00 00 00 00 | 	byte	$8f, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1cd     00 00 00 00 
0a1d1     FE 60 00 00 
0a1d5     00 00 00 00 
0a1d9     8F 80 00 01 | 	byte	$00, $00, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $8f, $80, $00, $01
0a1dd     AC 30 00 00 
0a1e1     AA 50 00 01 
0a1e5     AC 10 00 00 
0a1e9     00 00 00 00 | 	byte	$ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0a1ed     00 00 00 00 
0a1f1     00 00 00 00 
0a1f5     00 00 00 00 | 	byte	$00[12]
0a1f9     B4 80 00 01 
0a1fd     AC 30 00 00 
0a201     D6 70 00 00 
0a205     00 00 00 00 | 	byte	$b4, $80, $00, $01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a209     A0 80 00 01 
0a20d     AC 30 00 00 
0a211     D6 70 00 00 
0a215     00 00 00 00 | 	byte	$a0, $80, $00, $01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a219     8F 80 00 01 
0a21d     AC 30 00 00 
0a221     FE 60 00 00 
0a225     00 00 00 00 | 	byte	$8f, $80, $00, $01, $ac, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00
0a229     00 00 00 00 
0a22d     00 00 00 00 
0a231     00 00 00 00 
0a235     00 00 00 00 | 	byte	$00[16]
0a239     B4 80 00 00 
0a23d     D6 30 00 00 
0a241     D6 70 00 01 
0a245     AC 10 00 00 | 	byte	$b4, $80, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $01, $ac, $10, $00, $00
0a249     00 00 00 00 
0a24d     00 00 00 00 
0a251     00 00 00 00 
0a255     00 00 00 00 | 	byte	$00[16]
0a259     8F 80 00 01 
0a25d     AC 30 00 00 
0a261     AA 50 00 01 
0a265     AC 10 00 00 | 	byte	$8f, $80, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00
0a269     00 00 00 00 
0a26d     00 00 00 00 
0a271     00 00 00 00 
0a275     00 00 00 00 | 	byte	$00[16]
0a279     B4 80 00 00 
0a27d     D6 30 00 00 
0a281     D6 70 00 00 
0a285     00 00 00 00 | 	byte	$b4, $80, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a289     00 00 00 00 
0a28d     00 00 00 00 
0a291     00 00 00 00 
0a295     00 00 00 00 | 	byte	$00[16]
0a299     B4 80 00 01 
0a29d     AC 30 00 00 
0a2a1     FE 60 00 01 
0a2a5     AC 10 00 00 | 	byte	$b4, $80, $00, $01, $ac, $30, $00, $00, $fe, $60, $00, $01, $ac, $10, $00, $00
0a2a9     00 00 00 00 
0a2ad     00 00 00 00 
0a2b1     00 00 00 00 
0a2b5     00 00 00 00 | 	byte	$00[16]
0a2b9     A0 80 00 00 
0a2bd     D6 30 00 00 
0a2c1     D6 70 00 00 
0a2c5     00 00 00 00 | 	byte	$a0, $80, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a2c9     00 00 00 00 
0a2cd     D6 30 00 00 
0a2d1     00 00 00 00 
0a2d5     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2d9     87 80 00 01 
0a2dd     40 30 00 00 
0a2e1     AA 50 00 01 
0a2e5     40 10 00 00 | 	byte	$87, $80, $00, $01, $40, $30, $00, $00, $aa, $50, $00, $01, $40, $10, $00, $00
0a2e9     00 00 00 00 
0a2ed     00 00 00 00 
0a2f1     00 00 00 00 
0a2f5     00 00 00 00 | 	byte	$00[16]
0a2f9     A0 80 00 01 
0a2fd     40 30 00 00 
0a301     D6 70 00 00 
0a305     00 00 00 00 | 	byte	$a0, $80, $00, $01, $40, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a309     8F 80 00 01 
0a30d     40 30 00 00 
0a311     D6 70 00 00 
0a315     00 00 00 00 | 	byte	$8f, $80, $00, $01, $40, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a319     87 80 00 01 
0a31d     40 30 00 00 
0a321     FE 60 00 00 
0a325     00 00 00 00 | 	byte	$87, $80, $00, $01, $40, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00
0a329     00 00 00 00 
0a32d     00 00 00 00 
0a331     00 00 00 00 
0a335     00 00 00 00 | 	byte	$00[16]
0a339     A0 80 00 00 
0a33d     A0 30 00 00 
0a341     D6 70 00 01 
0a345     40 10 00 00 | 	byte	$a0, $80, $00, $00, $a0, $30, $00, $00, $d6, $70, $00, $01, $40, $10, $00, $00
0a349     00 00 00 00 
0a34d     00 00 00 00 
0a351     00 00 00 00 
0a355     00 00 00 00 | 	byte	$00[16]
0a359     87 80 00 01 
0a35d     40 30 00 00 
0a361     AA 50 00 01 
0a365     40 10 00 00 | 	byte	$87, $80, $00, $01, $40, $30, $00, $00, $aa, $50, $00, $01, $40, $10, $00, $00
0a369     00 00 00 00 
0a36d     00 00 00 00 
0a371     00 00 00 00 
0a375     00 00 00 00 | 	byte	$00[16]
0a379     A0 80 00 00 
0a37d     A0 30 00 00 
0a381     D6 70 00 00 
0a385     00 00 00 00 | 	byte	$a0, $80, $00, $00, $a0, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a389     00 00 00 00 
0a38d     00 00 00 00 
0a391     00 00 00 00 
0a395     00 00 00 00 | 	byte	$00[16]
0a399     78 80 00 01 
0a39d     40 30 00 00 
0a3a1     FE 60 00 01 
0a3a5     40 10 00 00 | 	byte	$78, $80, $00, $01, $40, $30, $00, $00, $fe, $60, $00, $01, $40, $10, $00, $00
0a3a9     00 00 00 00 
0a3ad     00 00 00 00 
0a3b1     00 00 00 00 
0a3b5     00 00 00 00 | 	byte	$00[16]
0a3b9     87 80 00 00 
0a3bd     A0 30 00 00 
0a3c1     D6 70 00 00 
0a3c5     00 00 00 00 | 	byte	$87, $80, $00, $00, $a0, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a3c9     00 00 00 00 
0a3cd     A0 30 00 00 
0a3d1     00 00 00 00 
0a3d5     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3d9     B4 80 00 01 
0a3dd     0D 30 00 00 
0a3e1     AA 50 00 01 
0a3e5     0D 10 00 00 | 	byte	$b4, $80, $00, $01, $0d, $30, $00, $00, $aa, $50, $00, $01, $0d, $10, $00, $00
0a3e9     00 00 00 00 
0a3ed     00 00 00 00 
0a3f1     00 00 00 00 
0a3f5     00 00 00 00 | 	byte	$00[16]
0a3f9     D6 80 00 01 
0a3fd     0D 30 00 00 
0a401     D6 70 00 00 
0a405     00 00 00 00 | 	byte	$d6, $80, $00, $01, $0d, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a409     BE 80 00 01 
0a40d     0D 30 00 00 
0a411     D6 70 00 00 
0a415     00 00 00 00 | 	byte	$be, $80, $00, $01, $0d, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a419     B4 80 00 01 
0a41d     0D 30 00 00 
0a421     FE 60 00 00 
0a425     00 00 00 00 | 	byte	$b4, $80, $00, $01, $0d, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00
0a429     00 00 00 00 
0a42d     00 00 00 00 
0a431     00 00 00 00 
0a435     00 00 00 00 | 	byte	$00[16]
0a439     D6 80 00 00 
0a43d     87 30 00 00 
0a441     D6 70 00 01 
0a445     0D 10 00 00 | 	byte	$d6, $80, $00, $00, $87, $30, $00, $00, $d6, $70, $00, $01, $0d, $10, $00, $00
0a449     00 00 00 00 
0a44d     00 00 00 00 
0a451     00 00 00 00 
0a455     00 00 00 00 | 	byte	$00[16]
0a459     A0 80 00 01 
0a45d     0D 30 00 00 
0a461     AA 50 00 01 
0a465     0D 10 00 00 | 	byte	$a0, $80, $00, $01, $0d, $30, $00, $00, $aa, $50, $00, $01, $0d, $10, $00, $00
0a469     00 00 00 00 
0a46d     00 00 00 00 
0a471     00 00 00 00 
0a475     00 00 00 00 | 	byte	$00[16]
0a479     B4 80 00 00 
0a47d     87 30 00 00 
0a481     D6 70 00 00 
0a485     00 00 00 00 | 	byte	$b4, $80, $00, $00, $87, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a489     00 00 00 00 
0a48d     00 00 00 00 
0a491     00 00 00 00 
0a495     00 00 00 00 | 	byte	$00[16]
0a499     BE 80 00 01 
0a49d     0D 30 00 00 
0a4a1     FE 60 00 01 
0a4a5     0D 10 00 00 | 	byte	$be, $80, $00, $01, $0d, $30, $00, $00, $fe, $60, $00, $01, $0d, $10, $00, $00
0a4a9     00 00 00 00 
0a4ad     00 00 00 00 
0a4b1     00 00 00 00 
0a4b5     00 00 00 00 | 	byte	$00[16]
0a4b9     B4 80 00 00 
0a4bd     87 30 00 00 
0a4c1     D6 70 00 00 
0a4c5     00 00 00 00 | 	byte	$b4, $80, $00, $00, $87, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a4c9     00 00 00 00 
0a4cd     00 00 00 00 
0a4d1     00 00 00 00 
0a4d5     00 00 00 00 | 	byte	$00[16]
0a4d9     B4 80 00 01 
0a4dd     AC 30 00 00 
0a4e1     AA 50 00 01 
0a4e5     AC 10 00 00 | 	byte	$b4, $80, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00
0a4e9     00 00 00 00 
0a4ed     00 00 00 00 
0a4f1     00 00 00 00 
0a4f5     00 00 00 00 | 	byte	$00[16]
0a4f9     BE 80 00 01 
0a4fd     AC 30 00 00 
0a501     D6 70 00 00 
0a505     00 00 00 00 | 	byte	$be, $80, $00, $01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a509     D6 80 00 01 
0a50d     AC 30 00 00 
0a511     D6 70 00 00 
0a515     00 00 00 00 | 	byte	$d6, $80, $00, $01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
0a519     BE 80 00 01 
0a51d     AC 30 00 00 
0a521     FE 60 00 00 
0a525     00 00 00 00 | 	byte	$be, $80, $00, $01, $ac, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00
0a529     00 00 00 00 
0a52d     00 00 00 00 
0a531     00 00 00 00 
0a535     00 00 00 00 | 	byte	$00[16]
0a539     B4 80 00 00 
0a53d     D6 30 00 00 
0a541     D6 70 00 01 
0a545     AC 10 00 00 | 	byte	$b4, $80, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $01, $ac, $10, $00, $00
0a549     00 00 00 00 
0a54d     00 00 00 00 
0a551     00 00 00 00 
0a555     00 00 00 00 | 	byte	$00[16]
0a559     D6 80 00 01 
0a55d     AC 30 00 00 
0a561     AA 50 00 01 
0a565     AC 10 00 00 | 	byte	$d6, $80, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00
0a569     00 00 00 00 
0a56d     00 00 00 00 
0a571     00 00 00 00 
0a575     00 00 00 00 
0a579     00 00 00 00 | 	byte	$00[20]
0a57d     D6 30 00 00 
0a581     FE 60 00 00 
0a585     00 00 00 00 
0a589     00 00 00 00 | 	byte	$d6, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a58d     D6 30 00 00 
0a591     00 00 00 00 
0a595     00 00 00 00 
0a599     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a59d     00 00 00 00 
0a5a1     FE 60 00 01 
0a5a5     AC 10 00 00 
0a5a9     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $60, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0a5ad     D6 30 00 00 
0a5b1     00 00 00 00 
0a5b5     00 00 00 00 
0a5b9     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5bd     8F 30 00 00 
0a5c1     D6 70 00 00 
0a5c5     00 00 00 00 
0a5c9     00 00 00 00 | 	byte	$8f, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5cd     00 00 00 00 
0a5d1     00 00 00 00 
0a5d5     00 00 00    | 	byte	$00[11]
0a5d8     01 1D A0 00 
0a5dc     01 AC 30 00 
0a5e0     00 AA 50 00 
0a5e4     01 AC 10 00 | 	byte	$01, $1d, $a0, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00
0a5e8     00 00 00 00 
0a5ec     00 00 00 00 
0a5f0     00 00 00 00 
0a5f4     00 00 00 00 
0a5f8     00 00 00 00 | 	byte	$00[20]
0a5fc     01 AC 30 00 
0a600     00 D6 70 00 
0a604     00 00 00 00 
0a608     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a60c     01 AC 30 00 
0a610     00 D6 70 00 
0a614     00 00 00 00 
0a618     01 AC A0 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $01, $ac, $a0, $00
0a61c     01 AC 30 00 
0a620     00 FE 60 00 
0a624     00 00 00 00 
0a628     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a62c     00 00 00 00 
0a630     00 00 00 00 
0a634     00 00 00 00 
0a638     00 00 00 00 
0a63c     00          | 	byte	$00[17]
0a63d     D6 30 00 00 
0a641     D6 70 00 01 
0a645     AC 10 00 00 
0a649     00 00 00 00 | 	byte	$d6, $30, $00, $00, $d6, $70, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0a64d     00 00 00 00 
0a651     00 00 00 00 
0a655     00 00 00 00 
0a659     00 00 00    | 	byte	$00[15]
0a65c     01 AC 30 00 
0a660     00 AA 50 00 
0a664     01 AC 10 00 
0a668     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0a66c     00 00 00 00 
0a670     00 00 00 00 
0a674     00 00 00 00 | 	byte	$00[12]
0a678     01 AC A0 00 
0a67c     00 D6 30 00 
0a680     00 D6 70 00 
0a684     00 00 00 00 | 	byte	$01, $ac, $a0, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a688     00 00 00 00 
0a68c     00 00 00 00 
0a690     00 00 00 00 
0a694     00 00 00 00 | 	byte	$00[16]
0a698     01 68 A0 00 
0a69c     01 AC 30 00 
0a6a0     00 FE 60 00 
0a6a4     01 AC 10 00 | 	byte	$01, $68, $a0, $00, $01, $ac, $30, $00, $00, $fe, $60, $00, $01, $ac, $10, $00
0a6a8     00 00 00 00 
0a6ac     00 00 00 00 
0a6b0     00 00 00 00 
0a6b4     00 00 00 00 | 	byte	$00[16]
0a6b8     01 40 A0 00 
0a6bc     00 D6 30 00 
0a6c0     00 D6 70 00 
0a6c4     00 00 00 00 | 	byte	$01, $40, $a0, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a6c8     00 00 00 00 
0a6cc     00          | 	byte	$00[5]
0a6cd     D6 30 00 00 
0a6d1     00 00 00 00 
0a6d5     00 00 00 01 
0a6d9     0D A0 00 01 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $a0, $00, $01
0a6dd     68 30 00 00 
0a6e1     AA 50 00 01 
0a6e5     68 10 00 00 
0a6e9     00 00 00 00 | 	byte	$68, $30, $00, $00, $aa, $50, $00, $01, $68, $10, $00, $00, $00, $00, $00, $00
0a6ed     00 00 00 00 
0a6f1     00 00 00 00 
0a6f5     00 00 00    | 	byte	$00[11]
0a6f8     01 1D A0 00 
0a6fc     01 68 30 00 
0a700     00 D6 70 00 
0a704     00 00 00 00 | 	byte	$01, $1d, $a0, $00, $01, $68, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a708     00 00 00 00 
0a70c     01 68 30 00 
0a710     00 D6 70 00 
0a714     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $68, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a718     01 40 A0 00 
0a71c     01 68 30 00 
0a720     00 FE 60 00 
0a724     00 00 00 00 | 	byte	$01, $40, $a0, $00, $01, $68, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00
0a728     00 00 00 00 
0a72c     00 00 00 00 
0a730     00 00 00 00 
0a734     00 00 00 00 | 	byte	$00[16]
0a738     01 1D A0 00 
0a73c     00 B4 30 00 
0a740     00 D6 70 00 
0a744     01 68 10 00 | 	byte	$01, $1d, $a0, $00, $00, $b4, $30, $00, $00, $d6, $70, $00, $01, $68, $10, $00
0a748     00 00 00 00 
0a74c     00 00 00 00 
0a750     00 00 00 00 
0a754     00 00 00 00 
0a758     00 00 00 00 | 	byte	$00[20]
0a75c     01 68 30 00 
0a760     00 AA 50 00 
0a764     01 68 10 00 
0a768     00 00 00 00 | 	byte	$01, $68, $30, $00, $00, $aa, $50, $00, $01, $68, $10, $00, $00, $00, $00, $00
0a76c     00 00 00 00 
0a770     00 00 00 00 
0a774     00 00 00 00 | 	byte	$00[12]
0a778     01 40 A0 00 
0a77c     00 B4 30 00 
0a780     00 D6 70 00 
0a784     00 00 00 00 | 	byte	$01, $40, $a0, $00, $00, $b4, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a788     00 00 00 00 
0a78c     00 00 00 00 
0a790     00 00 00 00 
0a794     00 00 00 00 | 	byte	$00[16]
0a798     01 7D A0 00 
0a79c     01 68 30 00 
0a7a0     00 FE 60 00 
0a7a4     01 68 10 00 | 	byte	$01, $7d, $a0, $00, $01, $68, $30, $00, $00, $fe, $60, $00, $01, $68, $10, $00
0a7a8     00 00 00 00 
0a7ac     00 00 00 00 
0a7b0     00 00 00 00 
0a7b4     00 00 00 00 | 	byte	$00[16]
0a7b8     01 68 A0 00 
0a7bc     00 B4 30 00 
0a7c0     00 D6 70 00 
0a7c4     00 00 00 00 | 	byte	$01, $68, $a0, $00, $00, $b4, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a7c8     00 00 00 00 
0a7cc     00          | 	byte	$00[5]
0a7cd     B4 30 00 00 
0a7d1     00 00 00 00 
0a7d5     00 00 00 01 
0a7d9     40 A0 00 01 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $a0, $00, $01
0a7dd     E0 30 00 00 
0a7e1     AA 50 00 01 
0a7e5     E0 10 00 00 
0a7e9     00 00 00 00 | 	byte	$e0, $30, $00, $00, $aa, $50, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00
0a7ed     00 00 00 00 
0a7f1     00 00 00 00 
0a7f5     00 00 00 00 
0a7f9     00 00 00 00 | 	byte	$00[16]
0a7fd     F0 30 00 00 
0a801     D6 70 00 00 
0a805     00 00 00 00 
0a809     00 00 00 00 | 	byte	$f0, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a80d     F0 30 00 00 
0a811     D6 70 00 00 
0a815     00 00 00 01 
0a819     E0 A0 00 01 | 	byte	$f0, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $01, $e0, $a0, $00, $01
0a81d     E0 30 00 00 
0a821     FE 60 00 00 
0a825     00 00 00 00 
0a829     00 00 00 00 | 	byte	$e0, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a82d     00 00 00 00 
0a831     00 00 00 00 
0a835     00 00 00 00 
0a839     00 00 00 00 | 	byte	$00[16]
0a83d     F0 30 00 00 
0a841     D6 70 00 01 
0a845     E0 10 00 00 
0a849     00 00 00 00 | 	byte	$f0, $30, $00, $00, $d6, $70, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00
0a84d     00 00 00 00 
0a851     00 00 00 00 
0a855     00 00 00 00 
0a859     00 00 00    | 	byte	$00[15]
0a85c     01 E0 30 00 
0a860     00 AA 50 00 
0a864     01 E0 10 00 
0a868     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $50, $00, $01, $e0, $10, $00, $00, $00, $00, $00
0a86c     00 00 00 00 
0a870     00 00 00 00 
0a874     00 00 00 00 | 	byte	$00[12]
0a878     01 40 A0 00 
0a87c     00 F0 30 00 
0a880     00 D6 70 00 
0a884     00 00 00 00 | 	byte	$01, $40, $a0, $00, $00, $f0, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a888     00 00 00 00 
0a88c     00 00 00 00 
0a890     00 00 00 00 
0a894     00 00 00 00 | 	byte	$00[16]
0a898     01 68 A0 00 
0a89c     01 E0 30 00 
0a8a0     00 FE 60 00 
0a8a4     01 E0 10 00 | 	byte	$01, $68, $a0, $00, $01, $e0, $30, $00, $00, $fe, $60, $00, $01, $e0, $10, $00
0a8a8     00 00 00 00 
0a8ac     00 00 00 00 
0a8b0     00 00 00 00 
0a8b4     00 00 00 00 | 	byte	$00[16]
0a8b8     01 7D A0 00 
0a8bc     00 F0 30 00 
0a8c0     00 D6 70 00 
0a8c4     00 00 00 00 | 	byte	$01, $7d, $a0, $00, $00, $f0, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00
0a8c8     00 00 00 00 
0a8cc     00 00 00 00 
0a8d0     00 00 00 00 
0a8d4     00 00 00 00 | 	byte	$00[16]
0a8d8     01 AC A0 00 
0a8dc     01 AC 30 00 
0a8e0     00 AA 50 00 
0a8e4     01 AC 10 00 | 	byte	$01, $ac, $a0, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00
0a8e8     00 00 00 00 
0a8ec     00 00 00 00 
0a8f0     00 00 00 00 
0a8f4     00 00 00 00 
0a8f8     00 00 00 00 
0a8fc     00          | 	byte	$00[21]
0a8fd     D6 30 00 00 
0a901     D6 70 00 00 
0a905     00 00 00 00 
0a909     00 00 00 00 | 	byte	$d6, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a90d     D6 30 00 00 
0a911     D6 70 00 00 
0a915     00 00 00 01 
0a919     1D 40 00 01 | 	byte	$d6, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $01, $1d, $40, $00, $01
0a91d     AC 30 00 00 
0a921     FE 60 00 00 
0a925     00 00 00 00 
0a929     00 00 00 00 | 	byte	$ac, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a92d     00 00 00 00 
0a931     00 00 00 00 
0a935     00 00 00    | 	byte	$00[11]
0a938     01 68 00 00 
0a93c     00 D6 30 00 
0a940     00 D6 70 00 
0a944     01 AC 10 00 | 	byte	$01, $68, $00, $00, $00, $d6, $30, $00, $00, $d6, $70, $00, $01, $ac, $10, $00
0a948     00 00 00 00 
0a94c     00 00 00 00 
0a950     00 00 00 00 
0a954     00 00 00 00 
0a958     00 00 00 00 | 	byte	$00[20]
0a95c     01 AC 30 00 
0a960     00 AA 50 00 
0a964     01 AC 10 00 
0a968     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0a96c     00 00 00 00 
0a970     00 00 00 00 
0a974     00 00 00 00 | 	byte	$00[12]
0a978     01 68 00 00 
0a97c     00 D6 30 00 
0a980     00 FE 60 00 
0a984     00 00 00 00 | 	byte	$01, $68, $00, $00, $00, $d6, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00
0a988     00 00 00 00 
0a98c     00          | 	byte	$00[5]
0a98d     D6 30 00 00 
0a991     00 00 00 00 
0a995     00 00 00 01 
0a999     7D 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $00, $00, $00
0a99d     00 00 00 00 
0a9a1     FE 60 00 01 
0a9a5     AC 10 00 00 
0a9a9     00 00 00 01 | 	byte	$00, $00, $00, $00, $fe, $60, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $01
0a9ad     AC 30 00 00 
0a9b1     00 00 00 00 
0a9b5     00 00 00 00 
0a9b9     00 00 00 00 | 	byte	$ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9bd     8F 30 00 00 
0a9c1     D6 70 00 00 
0a9c5     00 00 00 00 
0a9c9     00 00 00 00 | 	byte	$8f, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9cd     00 00 00 00 
0a9d1     00 00 00 00 
0a9d5     00 00 00    | 	byte	$00[11]
0a9d8     01 AC 4C 30 
0a9dc     01 AC 30 00 
0a9e0     00 AA 5C 32 
0a9e4     01 AC 20 00 | 	byte	$01, $ac, $4c, $30, $01, $ac, $30, $00, $00, $aa, $5c, $32, $01, $ac, $20, $00
0a9e8     00 00 00 00 
0a9ec     00 00 00 00 
0a9f0     00 00 00 00 
0a9f4     00 00 00 00 
0a9f8     00 00 00 00 | 	byte	$00[20]
0a9fc     01 AC 30 00 
0aa00     00 00 00 00 
0aa04     00 00 00 00 
0aa08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa0c     01 AC 30 00 
0aa10     00 00 00 00 
0aa14     00 00 00 00 
0aa18     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa1c     01 AC 30 00 
0aa20     00 00 00 00 
0aa24     00 00 00 00 
0aa28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa2c     00 00 00 00 
0aa30     00 00 00 00 
0aa34     00 00 00 00 
0aa38     00 00 00 00 | 	byte	$00[16]
0aa3c     01 AC 30 00 
0aa40     00 AA 00 00 
0aa44     00 00 00 00 
0aa48     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa4c     00 00 00 00 
0aa50     00 00 00 00 
0aa54     00 00 00 00 
0aa58     00 00 00 00 | 	byte	$00[16]
0aa5c     01 AC 30 00 
0aa60     00 AA 00 00 
0aa64     00 00 00 00 
0aa68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa6c     00 00 00 00 
0aa70     00 00 00 00 
0aa74     00 00 00 00 
0aa78     00 00 00 00 | 	byte	$00[16]
0aa7c     01 AC 30 00 
0aa80     00 00 00 00 
0aa84     00 00 00 00 
0aa88     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa8c     00 00 00 00 
0aa90     00 00 00 00 
0aa94     00 00 00 00 
0aa98     00 00 00 00 | 	byte	$00[16]
0aa9c     01 AC 30 00 
0aaa0     00 AA 00 00 
0aaa4     00 00 00 00 
0aaa8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aaac     00 00 00 00 
0aab0     00 00 00 00 
0aab4     00 00 00 00 
0aab8     00 00 00 00 | 	byte	$00[16]
0aabc     01 AC 30 00 
0aac0     00 00 00 00 
0aac4     00 00 00 00 
0aac8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aacc     00 00 00 00 
0aad0     00 00 00 00 
0aad4     00 00 00 00 
0aad8     00 00 00 00 | 	byte	$00[16]
0aadc     01 AC 30 00 
0aae0     00 AA 00 00 
0aae4     00 00 00 00 
0aae8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aaec     00 00 00 00 
0aaf0     00 00 00 00 
0aaf4     00 00 00 00 
0aaf8     00 00 00 00 | 	byte	$00[16]
0aafc     01 AC 30 00 
0ab00     00 00 00 00 
0ab04     00 00 00 00 
0ab08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab0c     01 AC 30 00 
0ab10     00 00 00 00 
0ab14     00 00 00 00 
0ab18     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab1c     01 AC 30 00 
0ab20     00 00 00 00 
0ab24     00 00 00 00 
0ab28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab2c     00 00 00 00 
0ab30     00 00 00 00 
0ab34     00 00 00 00 
0ab38     00 00 00 00 | 	byte	$00[16]
0ab3c     01 AC 30 00 
0ab40     00 AA 00 00 
0ab44     00 00 00 00 
0ab48     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab4c     00 00 00 00 
0ab50     00 00 00 00 
0ab54     00 00 00 00 
0ab58     00 00 00 00 | 	byte	$00[16]
0ab5c     01 AC 30 00 
0ab60     00 AA 00 00 
0ab64     00 00 00 00 
0ab68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab6c     00 00 00 00 
0ab70     00 00 00 00 
0ab74     00 00 00 00 
0ab78     00 00 00 00 | 	byte	$00[16]
0ab7c     01 AC 30 00 
0ab80     00 00 00 00 
0ab84     00 00 00 00 
0ab88     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab8c     00 00 00 00 
0ab90     00 00 00 00 
0ab94     00 00 00 00 
0ab98     00 00 00 00 | 	byte	$00[16]
0ab9c     01 AC 30 00 
0aba0     00 AA 00 00 
0aba4     00 00 00 00 
0aba8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abac     00 00 00 00 
0abb0     00 00 00 00 
0abb4     00 00 00 00 
0abb8     00 00 00 00 | 	byte	$00[16]
0abbc     01 AC 30 00 
0abc0     00 00 00 00 
0abc4     00 00 00 00 
0abc8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abcc     00 00 00 00 
0abd0     00 00 00 00 
0abd4     00 00 00 00 | 	byte	$00[12]
0abd8     01 40 20 00 
0abdc     01 40 30 00 
0abe0     00 AA 00 00 
0abe4     01 AC 2C 00 | 	byte	$01, $40, $20, $00, $01, $40, $30, $00, $00, $aa, $00, $00, $01, $ac, $2c, $00
0abe8     00 00 00 00 
0abec     00 00 00 00 
0abf0     00 00 00 00 
0abf4     00 00 00 00 
0abf8     00 00 00 00 | 	byte	$00[20]
0abfc     01 40 30 00 
0ac00     00 00 00 00 
0ac04     00 00 00 00 
0ac08     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac0c     01 40 30 00 
0ac10     00 00 00 00 
0ac14     00 00 00 00 
0ac18     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac1c     01 40 30 00 
0ac20     00 00 00 00 
0ac24     00 00 00 00 
0ac28     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac2c     00 00 00 00 
0ac30     00 00 00 00 
0ac34     00 00 00 00 
0ac38     00 00 00 00 | 	byte	$00[16]
0ac3c     01 40 30 00 
0ac40     00 AA 00 00 
0ac44     00 00 00 00 
0ac48     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac4c     00 00 00 00 
0ac50     00 00 00 00 
0ac54     00 00 00 00 
0ac58     00 00 00 00 | 	byte	$00[16]
0ac5c     01 40 30 00 
0ac60     00 AA 00 00 
0ac64     00 00 00 00 
0ac68     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac6c     00 00 00 00 
0ac70     00 00 00 00 
0ac74     00 00 00 00 
0ac78     00 00 00 00 | 	byte	$00[16]
0ac7c     01 40 30 00 
0ac80     00 00 00 00 
0ac84     00 00 00 00 
0ac88     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac8c     00 00 00 00 
0ac90     00 00 00 00 
0ac94     00 00 00 00 
0ac98     00 00 00 00 | 	byte	$00[16]
0ac9c     01 40 30 00 
0aca0     00 AA 00 00 
0aca4     00 00 00 00 
0aca8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acac     00 00 00 00 
0acb0     00 00 00 00 
0acb4     00 00 00 00 
0acb8     00 00 00 00 | 	byte	$00[16]
0acbc     01 40 30 00 
0acc0     00 00 00 00 
0acc4     00 00 00 00 
0acc8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0accc     00 00 00 00 
0acd0     00 00 00 00 
0acd4     00 00 00 00 
0acd8     00 00 00 00 | 	byte	$00[16]
0acdc     01 40 30 00 
0ace0     00 AA 00 00 
0ace4     00 00 00 00 
0ace8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acec     00 00 00 00 
0acf0     00 00 00 00 
0acf4     00 00 00 00 
0acf8     00 00 00 00 | 	byte	$00[16]
0acfc     01 40 30 00 
0ad00     00 00 00 00 
0ad04     00 00 00 00 
0ad08     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad0c     01 40 30 00 
0ad10     00 00 00 00 
0ad14     00 00 00 00 
0ad18     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad1c     01 40 30 00 
0ad20     00 00 00 00 
0ad24     00 00 00 00 
0ad28     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad2c     00 00 00 00 
0ad30     00 00 00 00 
0ad34     00 00 00 00 
0ad38     00 00 00 00 | 	byte	$00[16]
0ad3c     01 40 30 00 
0ad40     00 AA 00 00 
0ad44     00 00 00 00 
0ad48     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad4c     00 00 00 00 
0ad50     00 00 00 00 
0ad54     00 00 00 00 
0ad58     00 00 00 00 | 	byte	$00[16]
0ad5c     01 40 30 00 
0ad60     00 AA 00 00 
0ad64     00 00 00 00 
0ad68     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad6c     00 00 00 00 
0ad70     00 00 00 00 
0ad74     00 00 00 00 
0ad78     00 00 00 00 | 	byte	$00[16]
0ad7c     01 40 30 00 
0ad80     00 00 00 00 
0ad84     00 00 00 00 
0ad88     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad8c     00 00 00 00 
0ad90     00 00 00 00 
0ad94     00 00 00 00 
0ad98     00 00 00 00 | 	byte	$00[16]
0ad9c     01 40 30 00 
0ada0     00 AA 00 00 
0ada4     00 00 00 00 
0ada8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adac     00 00 00 00 
0adb0     00 00 00 00 
0adb4     00 00 00 00 
0adb8     00 00 00 00 | 	byte	$00[16]
0adbc     01 40 30 00 
0adc0     00 00 00 00 
0adc4     00 00 00 00 
0adc8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adcc     00 00 00 00 
0add0     00 00 00 00 
0add4     00 00 00 00 | 	byte	$00[12]
0add8     01 E0 20 00 
0addc     01 E0 30 00 
0ade0     00 AA 5C 32 
0ade4     00 00 00 00 | 	byte	$01, $e0, $20, $00, $01, $e0, $30, $00, $00, $aa, $5c, $32, $00, $00, $00, $00
0ade8     00 00 00 00 
0adec     00 00 00 00 
0adf0     00 00 00 00 
0adf4     00 00 00 00 
0adf8     00 00 00 00 | 	byte	$00[20]
0adfc     01 E0 30 00 
0ae00     00 00 00 00 
0ae04     00 00 00 00 
0ae08     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae0c     01 E0 30 00 
0ae10     00 00 00 00 
0ae14     00 00 00 00 
0ae18     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae1c     01 E0 30 00 
0ae20     00 00 00 00 
0ae24     00 00 00 00 
0ae28     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae2c     00 00 00 00 
0ae30     00 00 00 00 
0ae34     00 00 00 00 
0ae38     00 00 00 00 | 	byte	$00[16]
0ae3c     01 E0 30 00 
0ae40     00 AA 00 00 
0ae44     00 00 00 00 
0ae48     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae4c     00 00 00 00 
0ae50     00 00 00 00 
0ae54     00 00 00 00 
0ae58     00 00 00 00 | 	byte	$00[16]
0ae5c     01 E0 30 00 
0ae60     00 AA 00 00 
0ae64     00 00 00 00 
0ae68     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae6c     00 00 00 00 
0ae70     00 00 00 00 
0ae74     00 00 00 00 
0ae78     00 00 00 00 | 	byte	$00[16]
0ae7c     01 E0 30 00 
0ae80     00 00 00 00 
0ae84     00 00 00 00 
0ae88     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae8c     00 00 00 00 
0ae90     00 00 00 00 
0ae94     00 00 00 00 
0ae98     00 00 00 00 | 	byte	$00[16]
0ae9c     01 E0 30 00 
0aea0     00 AA 00 00 
0aea4     00 00 00 00 
0aea8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aeac     00 00 00 00 
0aeb0     00 00 00 00 
0aeb4     00 00 00 00 
0aeb8     00 00 00 00 | 	byte	$00[16]
0aebc     01 E0 30 00 
0aec0     00 00 00 00 
0aec4     00 00 00 00 
0aec8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aecc     00 00 00 00 
0aed0     00 00 00 00 
0aed4     00 00 00 00 
0aed8     00 00 00 00 | 	byte	$00[16]
0aedc     01 E0 30 00 
0aee0     00 AA 00 00 
0aee4     00 00 00 00 
0aee8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aeec     00 00 00 00 
0aef0     00 00 00 00 
0aef4     00 00 00 00 
0aef8     00 00 00 00 | 	byte	$00[16]
0aefc     01 E0 30 00 
0af00     00 00 00 00 
0af04     00 00 00 00 
0af08     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af0c     01 E0 30 00 
0af10     00 00 00 00 
0af14     00 00 00 00 
0af18     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af1c     01 E0 30 00 
0af20     00 00 00 00 
0af24     00 00 00 00 
0af28     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af2c     00 00 00 00 
0af30     00 00 00 00 
0af34     00 00 00 00 
0af38     00 00 00 00 | 	byte	$00[16]
0af3c     01 E0 30 00 
0af40     00 AA 00 00 
0af44     00 00 00 00 
0af48     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af4c     00 00 00 00 
0af50     00 00 00 00 
0af54     00 00 00 00 
0af58     00 00 00 00 | 	byte	$00[16]
0af5c     01 E0 30 00 
0af60     00 AA 00 00 
0af64     00 00 00 00 
0af68     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af6c     00 00 00 00 
0af70     00 00 00 00 
0af74     00 00 00 00 
0af78     00 00 00 00 | 	byte	$00[16]
0af7c     01 E0 30 00 
0af80     00 00 00 00 
0af84     00 00 00 00 
0af88     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af8c     00 00 00 00 
0af90     00 00 00 00 
0af94     00 00 00 00 
0af98     00 00 00 00 | 	byte	$00[16]
0af9c     01 E0 30 00 
0afa0     00 AA 00 00 
0afa4     00 00 00 00 
0afa8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afac     00 00 00 00 
0afb0     00 00 00 00 
0afb4     00 00 00 00 
0afb8     00 00 00 00 | 	byte	$00[16]
0afbc     01 E0 30 00 
0afc0     00 00 00 00 
0afc4     00 00 00 00 
0afc8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afcc     00 00 00 00 
0afd0     00 00 00 00 
0afd4     00 00 00 00 | 	byte	$00[12]
0afd8     01 AC 20 00 
0afdc     01 AC 30 00 
0afe0     00 AA 00 00 
0afe4     00 00 00 00 | 	byte	$01, $ac, $20, $00, $01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00
0afe8     00 00 00 00 
0afec     00 00 00 00 
0aff0     00 00 00 00 
0aff4     00 00 00 00 
0aff8     00 00 00 00 | 	byte	$00[20]
0affc     01 AC 30 00 
0b000     00 00 00 00 
0b004     00 00 00 00 
0b008     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b00c     01 AC 30 00 
0b010     00 00 00 00 
0b014     00 00 00 00 
0b018     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b01c     01 AC 30 00 
0b020     00 00 00 00 
0b024     00 00 00 00 
0b028     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b02c     00 00 00 00 
0b030     00 00 00 00 
0b034     00 00 00 00 
0b038     00 00 00 00 | 	byte	$00[16]
0b03c     01 AC 30 00 
0b040     00 AA 00 00 
0b044     00 00 00 00 
0b048     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b04c     00 00 00 00 
0b050     00 00 00 00 
0b054     00 00 00 00 
0b058     00 00 00 00 | 	byte	$00[16]
0b05c     01 AC 30 00 
0b060     00 AA 00 00 
0b064     00 00 00 00 
0b068     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b06c     00 00 00 00 
0b070     00 00 00 00 
0b074     00 00 00 00 
0b078     00 00 00 00 | 	byte	$00[16]
0b07c     01 AC 30 00 
0b080     00 00 00 00 
0b084     00 00 00 00 
0b088     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b08c     00 00 00 00 
0b090     00 00 00 00 
0b094     00 00 00 00 
0b098     00 00 00 00 | 	byte	$00[16]
0b09c     01 AC 30 00 
0b0a0     00 AA 00 00 
0b0a4     00 00 00 00 
0b0a8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0ac     00 00 00 00 
0b0b0     00 00 00 00 
0b0b4     00 00 00 00 
0b0b8     00 00 00 00 | 	byte	$00[16]
0b0bc     01 AC 30 00 
0b0c0     00 00 00 00 
0b0c4     00 00 00 00 
0b0c8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0cc     00 00 00 00 
0b0d0     00 00 00 00 
0b0d4     00 00 00 00 
0b0d8     00 00 00 00 | 	byte	$00[16]
0b0dc     01 AC 30 00 
0b0e0     00 AA 00 00 
0b0e4     00 00 00 00 
0b0e8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0ec     00 00 00 00 
0b0f0     00 00 00 00 
0b0f4     00 00 00 00 
0b0f8     00 00 00 00 | 	byte	$00[16]
0b0fc     01 AC 30 00 
0b100     00 00 00 00 
0b104     00 00 00 00 
0b108     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b10c     01 AC 30 00 
0b110     00 00 00 00 
0b114     00 00 00 00 
0b118     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b11c     01 AC 30 00 
0b120     00 00 00 00 
0b124     00 00 00 00 
0b128     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b12c     00 00 00 00 
0b130     00 00 00 00 
0b134     00 00 00 00 
0b138     00 00 00 00 | 	byte	$00[16]
0b13c     01 AC 30 00 
0b140     00 AA 0C 34 
0b144     00 00 00 00 
0b148     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $0c, $34, $00, $00, $00, $00, $00, $00, $00, $00
0b14c     00 00 00 00 
0b150     00 00 00 00 
0b154     00 00 00 00 
0b158     00 00 00 00 | 	byte	$00[16]
0b15c     01 AC 30 00 
0b160     00 AA 0C 3C 
0b164     00 00 00 00 
0b168     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $0c, $3c, $00, $00, $00, $00, $00, $00, $00, $00
0b16c     00 00 00 00 
0b170     00 00 00 00 
0b174     00 00 00 00 
0b178     00 00 00 00 | 	byte	$00[16]
0b17c     01 AC 30 00 
0b180     00 00 00 00 
0b184     00 00 00 00 
0b188     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b18c     00 00 00 00 
0b190     00 00 00 00 
0b194     00 00 00 00 
0b198     00 00 00 00 | 	byte	$00[16]
0b19c     01 AC 30 00 
0b1a0     00 AA 0C 40 
0b1a4     00 00 00 00 
0b1a8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $0c, $40, $00, $00, $00, $00, $00, $00, $00, $00
0b1ac     00 00 00 00 
0b1b0     00 00 00 00 
0b1b4     00 00 00 00 
0b1b8     00 00 00 00 | 	byte	$00[16]
0b1bc     01 AC 30 00 
0b1c0     00 00 00 00 
0b1c4     00 00 00 00 
0b1c8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1cc     00 00 00 00 
0b1d0     00 00 00 00 
0b1d4     00 00 00 00 | 	byte	$00[12]
0b1d8     01 AC 20 00 
0b1dc     01 AC 30 00 
0b1e0     00 AA 50 00 
0b1e4     01 1D 90 00 | 	byte	$01, $ac, $20, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $1d, $90, $00
0b1e8     00 00 00 00 
0b1ec     00 00 00 00 
0b1f0     00 00 00 00 
0b1f4     00 00 00 00 
0b1f8     00 00 00 00 | 	byte	$00[20]
0b1fc     01 AC 30 00 
0b200     00 D6 7C 28 
0b204     00 00 00 00 
0b208     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b20c     01 AC 30 00 
0b210     00 D6 00 00 
0b214     00 00 00 00 
0b218     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b21c     01 AC 30 00 
0b220     00 D6 00 00 
0b224     01 1D 90 00 
0b228     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $01, $1d, $90, $00, $00, $00, $00, $00
0b22c     00 00 00 00 
0b230     00 00 00 00 
0b234     00 00 00 00 
0b238     00 00 00 00 | 	byte	$00[16]
0b23c     01 AC 30 00 
0b240     00 D6 00 00 
0b244     01 AC 90 00 
0b248     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $01, $ac, $90, $00, $00, $00, $00, $00
0b24c     00 00 00 00 
0b250     00 00 00 00 
0b254     00 00 00 00 
0b258     00 00 00 00 | 	byte	$00[16]
0b25c     01 AC 30 00 
0b260     00 AA 50 00 
0b264     00 00 00 00 
0b268     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b26c     00 00 00 00 
0b270     00 00 00 00 
0b274     00 00 00 00 
0b278     00 00 00 00 | 	byte	$00[16]
0b27c     01 AC 30 00 
0b280     00 D6 7C 28 
0b284     01 AC 90 00 
0b288     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $01, $ac, $90, $00, $00, $00, $00, $00
0b28c     00 00 00 00 
0b290     00 00 00 00 
0b294     00 00 00 00 
0b298     00 00 00 00 | 	byte	$00[16]
0b29c     01 AC 30 00 
0b2a0     00 AA 50 00 
0b2a4     01 68 90 00 
0b2a8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $68, $90, $00, $00, $00, $00, $00
0b2ac     00 00 00 00 
0b2b0     00 00 00 00 
0b2b4     00 00 00 00 
0b2b8     00 00 00 00 | 	byte	$00[16]
0b2bc     01 AC 30 00 
0b2c0     00 D6 7C 28 
0b2c4     00 00 00 00 
0b2c8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b2cc     00 00 00 00 
0b2d0     00 00 00 00 
0b2d4     00 00 00 00 
0b2d8     00 00 00 00 | 	byte	$00[16]
0b2dc     01 AC 30 00 
0b2e0     00 AA 50 00 
0b2e4     01 1D 90 00 
0b2e8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $1d, $90, $00, $00, $00, $00, $00
0b2ec     00 00 00 00 
0b2f0     00 00 00 00 
0b2f4     00 00 00 00 
0b2f8     00 00 00 00 | 	byte	$00[16]
0b2fc     01 AC 30 00 
0b300     00 D6 7C 28 
0b304     00 00 00 00 
0b308     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b30c     01 AC 30 00 
0b310     00 D6 00 00 
0b314     00 00 00 00 
0b318     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b31c     01 AC 30 00 
0b320     00 D6 00 00 
0b324     01 1D 90 00 
0b328     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $01, $1d, $90, $00, $00, $00, $00, $00
0b32c     00 00 00 00 
0b330     00 00 00 00 
0b334     00 00 00 00 
0b338     00 00 00 00 | 	byte	$00[16]
0b33c     01 AC 30 00 
0b340     00 D6 00 00 
0b344     01 AC 90 00 
0b348     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $01, $ac, $90, $00, $00, $00, $00, $00
0b34c     00 00 00 00 
0b350     00 00 00 00 
0b354     00 00 00 00 
0b358     00 00 00 00 | 	byte	$00[16]
0b35c     01 AC 30 00 
0b360     00 AA 50 00 
0b364     00 00 00 00 
0b368     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b36c     00 00 00 00 
0b370     00 00 00 00 
0b374     00 00 00 00 
0b378     00 00 00 00 | 	byte	$00[16]
0b37c     01 AC 30 00 
0b380     00 D6 7C 28 
0b384     01 AC 90 00 
0b388     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $01, $ac, $90, $00, $00, $00, $00, $00
0b38c     00 00 00 00 
0b390     00 00 00 00 
0b394     00 00 00 00 
0b398     00 00 00 00 | 	byte	$00[16]
0b39c     01 AC 30 00 
0b3a0     00 AA 50 00 
0b3a4     01 68 90 00 
0b3a8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $68, $90, $00, $00, $00, $00, $00
0b3ac     00 00 00 00 
0b3b0     00 00 00 00 
0b3b4     00 00 00 00 
0b3b8     00 00 00 00 | 	byte	$00[16]
0b3bc     01 AC 30 00 
0b3c0     00 D6 7C 28 
0b3c4     00 00 00 00 
0b3c8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b3cc     00 00 00 00 
0b3d0     00 00 00 00 
0b3d4     00 00 00 00 | 	byte	$00[12]
0b3d8     01 40 20 00 
0b3dc     01 40 30 00 
0b3e0     00 AA 50 00 
0b3e4     01 0D 90 00 | 	byte	$01, $40, $20, $00, $01, $40, $30, $00, $00, $aa, $50, $00, $01, $0d, $90, $00
0b3e8     00 00 00 00 
0b3ec     00 00 00 00 
0b3f0     00 00 00 00 
0b3f4     00 00 00 00 
0b3f8     00 00 00 00 | 	byte	$00[20]
0b3fc     01 40 30 00 
0b400     00 D6 7C 28 
0b404     01 0D 90 00 
0b408     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $01, $0d, $90, $00, $00, $00, $00, $00
0b40c     01 40 30 00 
0b410     00 D6 70 00 
0b414     01 1D 90 00 
0b418     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $70, $00, $01, $1d, $90, $00, $00, $00, $00, $00
0b41c     01 40 30 00 
0b420     00 D6 00 00 
0b424     01 68 90 00 
0b428     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $01, $68, $90, $00, $00, $00, $00, $00
0b42c     00 00 00 00 
0b430     00 00 00 00 
0b434     00 00 00 00 
0b438     00 00 00 00 | 	byte	$00[16]
0b43c     01 40 30 00 
0b440     00 D6 00 00 
0b444     00 00 00 00 
0b448     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b44c     00 00 00 00 
0b450     00 00 00 00 
0b454     00 00 00 00 
0b458     00 00 00 00 | 	byte	$00[16]
0b45c     01 40 30 00 
0b460     00 AA 50 00 
0b464     00 00 00 00 
0b468     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b46c     00 00 00 00 
0b470     00 00 00 00 
0b474     00 00 00 00 
0b478     00 00 00 00 | 	byte	$00[16]
0b47c     01 40 30 00 
0b480     00 D6 7C 28 
0b484     01 68 90 00 
0b488     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $01, $68, $90, $00, $00, $00, $00, $00
0b48c     00 00 00 00 
0b490     00 00 00 00 
0b494     00 00 00 00 
0b498     00 00 00 00 | 	byte	$00[16]
0b49c     01 40 30 00 
0b4a0     00 AA 50 00 
0b4a4     01 40 90 00 
0b4a8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $50, $00, $01, $40, $90, $00, $00, $00, $00, $00
0b4ac     00 00 00 00 
0b4b0     00 00 00 00 
0b4b4     00 00 00 00 
0b4b8     00 00 00 00 | 	byte	$00[16]
0b4bc     01 40 30 00 
0b4c0     00 D6 7C 28 
0b4c4     01 1D 90 00 
0b4c8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $01, $1d, $90, $00, $00, $00, $00, $00
0b4cc     00 00 00 00 
0b4d0     00 00 00 00 
0b4d4     00 00 00 00 
0b4d8     00 00 00 00 | 	byte	$00[16]
0b4dc     01 40 30 00 
0b4e0     00 AA 50 00 
0b4e4     01 0D 90 00 
0b4e8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $50, $00, $01, $0d, $90, $00, $00, $00, $00, $00
0b4ec     00 00 00 00 
0b4f0     00 00 00 00 
0b4f4     00 00 00 00 
0b4f8     00 00 00 00 | 	byte	$00[16]
0b4fc     01 40 30 00 
0b500     00 D6 7C 28 
0b504     01 0D 90 00 
0b508     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $01, $0d, $90, $00, $00, $00, $00, $00
0b50c     01 40 30 00 
0b510     00 D6 00 00 
0b514     01 1D 90 00 
0b518     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $01, $1d, $90, $00, $00, $00, $00, $00
0b51c     01 40 30 00 
0b520     00 D6 00 00 
0b524     01 68 90 00 
0b528     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $01, $68, $90, $00, $00, $00, $00, $00
0b52c     00 00 00 00 
0b530     00 00 00 00 
0b534     00 00 00 00 
0b538     00 00 00 00 | 	byte	$00[16]
0b53c     01 40 30 00 
0b540     00 D6 00 00 
0b544     00 00 00 00 
0b548     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b54c     00 00 00 00 
0b550     00 00 00 00 
0b554     00 00 00 00 
0b558     00 00 00 00 | 	byte	$00[16]
0b55c     01 40 30 00 
0b560     00 AA 50 00 
0b564     00 00 00 00 
0b568     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b56c     00 00 00 00 
0b570     00 00 00 00 
0b574     00 00 00 00 
0b578     00 00 00 00 | 	byte	$00[16]
0b57c     01 40 30 00 
0b580     00 D6 7C 28 
0b584     01 40 90 00 
0b588     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $01, $40, $90, $00, $00, $00, $00, $00
0b58c     00 00 00 00 
0b590     00 00 00 00 
0b594     00 00 00 00 
0b598     00 00 00 00 | 	byte	$00[16]
0b59c     01 40 30 00 
0b5a0     00 AA 50 00 
0b5a4     01 AC 90 00 
0b5a8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $aa, $50, $00, $01, $ac, $90, $00, $00, $00, $00, $00
0b5ac     00 00 00 00 
0b5b0     00 00 00 00 
0b5b4     00 00 00 00 
0b5b8     00 00 00 00 | 	byte	$00[16]
0b5bc     01 40 30 00 
0b5c0     00 D6 7C 28 
0b5c4     01 7D 90 00 
0b5c8     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $01, $7d, $90, $00, $00, $00, $00, $00
0b5cc     00 00 00 00 
0b5d0     00 00 00 00 
0b5d4     00 00 00 00 | 	byte	$00[12]
0b5d8     01 E0 20 00 
0b5dc     01 E0 30 00 
0b5e0     00 AA 50 00 
0b5e4     01 E0 90 00 | 	byte	$01, $e0, $20, $00, $01, $e0, $30, $00, $00, $aa, $50, $00, $01, $e0, $90, $00
0b5e8     00 00 00 00 
0b5ec     00 00 00 00 
0b5f0     00 00 00 00 
0b5f4     00 00 00 00 
0b5f8     00 00 00 00 | 	byte	$00[20]
0b5fc     01 E0 30 00 
0b600     00 D6 7C 28 
0b604     00 00 00 00 
0b608     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b60c     01 E0 30 00 
0b610     00 D6 00 00 
0b614     00 00 00 00 
0b618     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b61c     01 E0 30 00 
0b620     00 D6 00 00 
0b624     00 00 00 00 
0b628     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b62c     00 00 00 00 
0b630     00 00 00 00 
0b634     00 00 00 00 
0b638     00 00 00 00 | 	byte	$00[16]
0b63c     01 E0 30 00 
0b640     00 D6 00 00 
0b644     01 E0 90 00 
0b648     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $00, $00, $01, $e0, $90, $00, $00, $00, $00, $00
0b64c     00 00 00 00 
0b650     00 00 00 00 
0b654     00 00 00 00 
0b658     00 00 00 00 | 	byte	$00[16]
0b65c     01 E0 30 00 
0b660     00 AA 50 00 
0b664     01 E0 90 00 
0b668     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $50, $00, $01, $e0, $90, $00, $00, $00, $00, $00
0b66c     00 00 00 00 
0b670     00 00 00 00 
0b674     00 00 00 00 
0b678     00 00 00 00 | 	byte	$00[16]
0b67c     01 E0 30 00 
0b680     00 D6 7C 28 
0b684     01 7D 90 00 
0b688     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $7c, $28, $01, $7d, $90, $00, $00, $00, $00, $00
0b68c     00 00 00 00 
0b690     00 00 00 00 
0b694     00 00 00 00 
0b698     00 00 00 00 | 	byte	$00[16]
0b69c     01 E0 30 00 
0b6a0     00 AA 50 00 
0b6a4     01 68 90 00 
0b6a8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $50, $00, $01, $68, $90, $00, $00, $00, $00, $00
0b6ac     00 00 00 00 
0b6b0     00 00 00 00 
0b6b4     00 00 00 00 
0b6b8     00 00 00 00 | 	byte	$00[16]
0b6bc     01 E0 30 00 
0b6c0     00 D6 7C 28 
0b6c4     01 40 90 00 
0b6c8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $7c, $28, $01, $40, $90, $00, $00, $00, $00, $00
0b6cc     00 00 00 00 
0b6d0     00 00 00 00 
0b6d4     00 00 00 00 
0b6d8     00 00 00 00 | 	byte	$00[16]
0b6dc     01 E0 30 00 
0b6e0     00 AA 50 00 
0b6e4     00 00 00 00 
0b6e8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6ec     00 00 00 00 
0b6f0     00 00 00 00 
0b6f4     00 00 00 00 
0b6f8     00 00 00 00 | 	byte	$00[16]
0b6fc     01 E0 30 00 
0b700     00 D6 7C 28 
0b704     00 00 00 00 
0b708     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b70c     01 E0 30 00 
0b710     00 D6 00 00 
0b714     00 00 00 00 
0b718     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b71c     01 E0 30 00 
0b720     00 D6 00 00 
0b724     00 00 00 00 
0b728     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b72c     00 00 00 00 
0b730     00 00 00 00 
0b734     00 00 00 00 
0b738     00 00 00 00 | 	byte	$00[16]
0b73c     01 E0 30 00 
0b740     00 D6 00 00 
0b744     01 40 90 00 
0b748     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $00, $00, $01, $40, $90, $00, $00, $00, $00, $00
0b74c     00 00 00 00 
0b750     00 00 00 00 
0b754     00 00 00 00 
0b758     00 00 00 00 | 	byte	$00[16]
0b75c     01 E0 30 00 
0b760     00 AA 50 00 
0b764     01 68 90 00 
0b768     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $50, $00, $01, $68, $90, $00, $00, $00, $00, $00
0b76c     00 00 00 00 
0b770     00 00 00 00 
0b774     00 00 00 00 
0b778     00 00 00 00 | 	byte	$00[16]
0b77c     01 E0 30 00 
0b780     00 D6 7C 28 
0b784     00 00 00 00 
0b788     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b78c     00 00 00 00 
0b790     00 00 00 00 
0b794     00 00 00 00 
0b798     00 00 00 00 | 	byte	$00[16]
0b79c     01 E0 30 00 
0b7a0     00 AA 50 00 
0b7a4     01 7D 90 00 
0b7a8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $aa, $50, $00, $01, $7d, $90, $00, $00, $00, $00, $00
0b7ac     00 00 00 00 
0b7b0     00 00 00 00 
0b7b4     00 00 00 00 
0b7b8     00 00 00 00 | 	byte	$00[16]
0b7bc     01 E0 30 00 
0b7c0     00 D6 7C 28 
0b7c4     00 00 00 00 
0b7c8     00 00 00 00 | 	byte	$01, $e0, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b7cc     00 00 00 00 
0b7d0     00 00 00 00 
0b7d4     00 00 00 00 | 	byte	$00[12]
0b7d8     01 AC 20 00 
0b7dc     01 AC 30 00 
0b7e0     00 AA 50 00 
0b7e4     01 1D 40 00 | 	byte	$01, $ac, $20, $00, $01, $ac, $30, $00, $00, $aa, $50, $00, $01, $1d, $40, $00
0b7e8     00 00 00 00 
0b7ec     00 00 00 00 
0b7f0     00 00 00 00 
0b7f4     00 00 00 00 
0b7f8     00 00 00 00 | 	byte	$00[20]
0b7fc     01 AC 30 00 
0b800     00 D6 7C 28 
0b804     00 00 00 00 
0b808     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b80c     01 AC 30 00 
0b810     00 D6 70 00 
0b814     00 00 00 00 
0b818     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b81c     01 AC 30 00 
0b820     00 D6 00 00 
0b824     01 AC 40 00 
0b828     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $01, $ac, $40, $00, $00, $00, $00, $00
0b82c     00 00 00 00 
0b830     00 00 00 00 
0b834     00 00 00 00 
0b838     00 00 00 00 | 	byte	$00[16]
0b83c     01 AC 30 00 
0b840     00 D6 00 00 
0b844     00 00 00 00 
0b848     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b84c     00 00 00 00 
0b850     00 00 00 00 
0b854     00 00 00 00 
0b858     00 00 00 00 | 	byte	$00[16]
0b85c     01 AC 30 00 
0b860     00 AA 50 00 
0b864     00 00 00 00 
0b868     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b86c     00 00 00 00 
0b870     00 00 00 00 
0b874     00 00 00 00 
0b878     00 00 00 00 | 	byte	$00[16]
0b87c     01 AC 30 00 
0b880     00 D6 7C 28 
0b884     00 00 00 00 
0b888     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b88c     00 00 00 00 
0b890     00 00 00 00 
0b894     00 00 00 00 
0b898     00 00 00 00 | 	byte	$00[16]
0b89c     01 AC 30 00 
0b8a0     00 AA 50 00 
0b8a4     01 40 40 00 
0b8a8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $aa, $50, $00, $01, $40, $40, $00, $00, $00, $00, $00
0b8ac     00 00 00 00 
0b8b0     00 00 00 00 
0b8b4     00 00 00 00 
0b8b8     00 00 00 00 | 	byte	$00[16]
0b8bc     01 AC 30 00 
0b8c0     00 D6 7C 28 
0b8c4     01 1D 40 00 
0b8c8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $d6, $7c, $28, $01, $1d, $40, $00, $00, $00, $00, $00
0b8cc     00 00 00 00 
0b8d0     00 00 00 00 
0b8d4     00 00 00 00 | 	byte	$00[12]
0b8d8     01 40 20 00 
0b8dc     01 40 30 00 
0b8e0     00 AA 50 00 
0b8e4     01 0D 40 00 | 	byte	$01, $40, $20, $00, $01, $40, $30, $00, $00, $aa, $50, $00, $01, $0d, $40, $00
0b8e8     00 00 00 00 
0b8ec     00 00 00 00 
0b8f0     00 00 00 00 
0b8f4     00 00 00 00 
0b8f8     00 00 00 00 | 	byte	$00[20]
0b8fc     01 40 30 00 
0b900     00 D6 7C 28 
0b904     00 00 00 00 
0b908     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00
0b90c     01 40 30 00 
0b910     00 D6 00 00 
0b914     00 00 00 00 
0b918     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b91c     01 40 30 00 
0b920     00 D6 00 00 
0b924     01 1D 40 00 
0b928     00 00 00 00 | 	byte	$01, $40, $30, $00, $00, $d6, $00, $00, $01, $1d, $40, $00, $00, $00, $00, $00
0b92c     00 00 00 00 
0b930     00 00 00 00 
0b934     00 00 00 00 
0b938     00 00 00 00 
0b93c     00          | 	byte	$00[17]
0b93d     A0 30 00 00 
0b941     D6 00 00 00 
0b945     00 00 00 00 
0b949     00 00 00 00 | 	byte	$a0, $30, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b94d     00 00 00 00 
0b951     00 00 00 00 
0b955     00 00 00    | 	byte	$00[11]
0b958     01 E0 20 00 
0b95c     00 F0 30 00 
0b960     00 AA 50 00 
0b964     01 68 40 00 | 	byte	$01, $e0, $20, $00, $00, $f0, $30, $00, $00, $aa, $50, $00, $01, $68, $40, $00
0b968     00 00 00 00 
0b96c     00 00 00 00 
0b970     00 00 00 00 
0b974     00 00 00 00 
0b978     00 00 00 00 
0b97c     00          | 	byte	$00[21]
0b97d     F0 30 00 00 
0b981     D6 7C 28 00 
0b985     00 00 00 00 
0b989     00 00 00 00 | 	byte	$f0, $30, $00, $00, $d6, $7c, $28, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b98d     00 00 00 00 
0b991     FE 60 00 00 
0b995     00 00 00 00 
0b999     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b99d     F0 30 00 00 
0b9a1     FE 60 00 01 
0b9a5     40 40 00 00 
0b9a9     00 00 00 00 | 	byte	$f0, $30, $00, $00, $fe, $60, $00, $01, $40, $40, $00, $00, $00, $00, $00, $00
0b9ad     00 00 00 00 
0b9b1     00 00 00 00 
0b9b5     00 00 00 00 
0b9b9     00 00 00 00 | 	byte	$00[16]
0b9bd     F0 30 00 00 
0b9c1     FE 60 00 00 
0b9c5     00 00 00 00 
0b9c9     00 00 00 00 | 	byte	$f0, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9cd     F0 30 00 00 
0b9d1     00 00 00 00 
0b9d5     00 00 00 01 
0b9d9     AC 4C 30 01 | 	byte	$f0, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $ac, $4c, $30, $01
0b9dd     AC 30 00 01 
0b9e1     AC 20 00 01 
0b9e5     AC 10 00 00 
0b9e9     00 00 00 00 | 	byte	$ac, $30, $00, $01, $ac, $20, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0b9ed     00 00 00 00 
0b9f1     00 00 00 00 
0b9f5     00 00 00 00 
0b9f9     00 00 00    | 	byte	$00[15]
0b9fc     01 AC 30 00 
0ba00     00 00 00 00 
0ba04     00 00 00 00 
0ba08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba0c     01 AC 30 00 
0ba10     00 00 00 00 
0ba14     00 00 00 00 
0ba18     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba1c     01 AC 30 00 
0ba20     00 00 00 00 
0ba24     00 00 00 00 
0ba28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba2c     00 00 00 00 
0ba30     00 00 00 00 
0ba34     00 00 00 00 
0ba38     00 00 00 00 
0ba3c     00          | 	byte	$00[17]
0ba3d     D6 30 00 00 
0ba41     00 00 00 01 
0ba45     AC 10 00 00 
0ba49     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0ba4d     00 00 00 00 
0ba51     00 00 00 00 
0ba55     00 00 00 00 
0ba59     00 00 00    | 	byte	$00[15]
0ba5c     01 AC 30 00 
0ba60     00 00 00 00 
0ba64     01 AC 10 00 
0ba68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0ba6c     00 00 00 00 
0ba70     00 00 00 00 
0ba74     00 00 00 00 
0ba78     00 00 00 00 
0ba7c     00          | 	byte	$00[17]
0ba7d     D6 30 00 00 
0ba81     00 00 00 00 
0ba85     00 00 00 00 
0ba89     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba8d     00 00 00 00 
0ba91     00 00 00 00 
0ba95     00 00 00 00 
0ba99     00 00 00    | 	byte	$00[15]
0ba9c     01 AC 30 00 
0baa0     00 00 00 00 
0baa4     01 AC 10 00 
0baa8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0baac     00 00 00 00 
0bab0     00 00 00 00 
0bab4     00 00 00 00 
0bab8     00 00 00 00 
0babc     00          | 	byte	$00[17]
0babd     D6 30 00 00 
0bac1     00 00 00 00 
0bac5     00 00 00 00 
0bac9     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bacd     D6 30 00 00 
0bad1     00 00 00 00 
0bad5     00 00 00 00 
0bad9     00 00 00 01 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0badd     AC 30 00 01 
0bae1     68 20 00 01 
0bae5     AC 10 00 00 
0bae9     00 00 00 00 | 	byte	$ac, $30, $00, $01, $68, $20, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0baed     00 00 00 00 
0baf1     00 00 00 00 
0baf5     00 00 00 00 
0baf9     00 00 00    | 	byte	$00[15]
0bafc     01 AC 30 00 
0bb00     00 00 00 00 
0bb04     00 00 00 00 
0bb08     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb0c     01 AC 30 00 
0bb10     00 00 00 00 
0bb14     00 00 00 00 
0bb18     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb1c     01 AC 30 00 
0bb20     00 00 00 00 
0bb24     00 00 00 00 
0bb28     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb2c     00 00 00 00 
0bb30     00 00 00 00 
0bb34     00 00 00 00 
0bb38     00 00 00 00 
0bb3c     00          | 	byte	$00[17]
0bb3d     D6 30 00 00 
0bb41     00 00 00 01 
0bb45     AC 10 00 00 
0bb49     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00
0bb4d     00 00 00 00 
0bb51     00 00 00 00 
0bb55     00 00 00 00 
0bb59     00 00 00    | 	byte	$00[15]
0bb5c     01 AC 30 00 
0bb60     00 00 00 00 
0bb64     01 AC 10 00 
0bb68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bb6c     00 00 00 00 
0bb70     00 00 00 00 
0bb74     00 00 00 00 
0bb78     00 00 00 00 
0bb7c     00          | 	byte	$00[17]
0bb7d     D6 30 00 00 
0bb81     00 00 00 00 
0bb85     00 00 00 00 
0bb89     00 00 00 00 | 	byte	$d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb8d     00 00 00 00 
0bb91     00 00 00 00 
0bb95     00 00 00 00 
0bb99     00 00 00    | 	byte	$00[15]
0bb9c     01 AC 30 00 
0bba0     00 00 00 00 
0bba4     01 AC 10 00 
0bba8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bbac     01 AC 30 00 
0bbb0     00 00 00 00 
0bbb4     00 00 00 00 
0bbb8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbbc     00 D6 30 00 
0bbc0     00 00 00 00 
0bbc4     00 00 00 00 
0bbc8     00 00 00 00 | 	byte	$00, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbcc     01 AC 30 00 
0bbd0     00 00 00 00 
0bbd4     00 00 00 00 
0bbd8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbdc     01 AC 30 00 
0bbe0     01 7D 20 00 
0bbe4     01 AC 10 00 
0bbe8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $01, $7d, $20, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bbec     00 00 00 00 
      ...             
0bc34     00 00 00 00 
0bc38     00 00 00 00 | 	byte	$00[80]
0bc3c     01 AC 30 00 
0bc40     00 00 00 00 
0bc44     01 AC 10 00 
0bc48     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bc4c     00 00 00 00 
0bc50     00 00 00 00 
0bc54     00 00 00 00 
0bc58     00 00 00 00 | 	byte	$00[16]
0bc5c     01 AC 30 00 
0bc60     00 00 00 00 
0bc64     01 AC 10 00 
0bc68     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bc6c     00 00 00 00 
      ...             
0bc94     00 00 00 00 
0bc98     00 00 00 00 | 	byte	$00[48]
0bc9c     01 AC 30 00 
0bca0     00 00 00 00 
0bca4     01 AC 10 00 
0bca8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bcac     00 00 00 00 
      ...             
0bcd4     00 00 00 00 
0bcd8     00 00 00 00 | 	byte	$00[48]
0bcdc     01 AC 30 00 
0bce0     01 AC 20 00 
0bce4     01 AC 10 00 
0bce8     00 00 00 00 | 	byte	$01, $ac, $30, $00, $01, $ac, $20, $00, $01, $ac, $10, $00, $00, $00, $00, $00
0bcec     00 00 00 00 
      ...             
0bd3c     00 00 00 00 
0bd40     00 00 00 00 | 	byte	$00[88]
0bd44     01 AC 10 00 
0bd48     00 00 00 00 
0bd4c     00 00 00 00 
0bd50     00 00 00 00 | 	byte	$01, $ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd54     00 00 00 00 
0bd58     00 00 00 00 
0bd5c     00 00 00 00 
0bd60     00 00 00 00 | 	byte	$00[16]
0bd64     01 AC 10 00 
0bd68     00 00 00 00 
0bd6c     00 00 00 00 
0bd70     00 00 00 00 | 	byte	$01, $ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd74     00 00 00 00 
      ...             
0bd9c     00 00 00 00 
0bda0     00 00 00 00 | 	byte	$00[48]
0bda4     01 AC 10 00 
0bda8     00 00 00 00 
0bdac     00 00 00 00 
0bdb0     00 00 00 00 | 	byte	$01, $ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdb4     00 00 00 00 
      ...             
0bdd8     00 00 00 00 
0bddc     00 00 00 00 | 	byte	$00[44]
0bde0     01 AC 1C 20 
0bde4     01 AC 1C 30 
0bde8     00 00 00 00 
0bdec     00 00 00 00 | 	byte	$01, $ac, $1c, $20, $01, $ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00
0bdf0     00 00 00 00 
0bdf4     00 00 00 00 
0bdf8     00 00 00 00 
0bdfc     00 00 00 00 
0be00     00 00 00 00 
0be04     00 00 00 00 
0be08     00 00       | 	byte	$00[26]
0be0a     0C 00 00 00 
0be0e     0C 00 00 00 
0be12     00 00 00 00 
0be16     00 00 00 00 | 	byte	$0c, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be1a     00 00 00 00 
0be1e     00 00       | 	byte	$00[6]
0be20     01 AC 1C 20 
0be24     00 00 00 00 
0be28     00 00 00 00 
0be2c     00 00 00 00 | 	byte	$01, $ac, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be30     00 00 00 00 
      ...             
0be58     00 00 00 00 
0be5c     00 00 00 00 | 	byte	$00[48]
0be60     01 AC 1C 1A 
0be64     00 00 00 00 
0be68     00 00 00 00 
0be6c     00 00 00 00 | 	byte	$01, $ac, $1c, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be70     00 00 00 00 
      ...             
0be98     00 00 00 00 
0be9c     00 00 00 00 | 	byte	$00[48]
0bea0     01 AC 1C 0A 
0bea4     00 00 00 00 
0bea8     00 00 00 00 
0beac     00 00 00 00 | 	byte	$01, $ac, $1c, $0a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0beb0     00 00 00 00 
      ...             
0bed8     00 00 00 00 
0bedc     00 00 00 00 | 	byte	$00[48]
0bee0     01 AC 1C 05 
0bee4     00 00 00 00 
0bee8     00 00 00 00 
0beec     00 00 00 00 | 	byte	$01, $ac, $1c, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bef0     00 00 00 00 
      ...             
0c1d4     00 00 00 00 
0c1d8     00 00 00 00 | 	byte	$00[748]
0c1dc     33 2D 25 1F 
0c1e0     17 10 0A 0B 
0c1e4     10 16 1D 24 
0c1e8     21 02 E4 DF | 	byte	$33, $2d, $25, $1f, $17, $10, $0a, $0b, $10, $16, $1d, $24, $21, $02, $e4, $df
0c1ec     DB D4 D7 D9 
0c1f0     DC E2 E9 EE 
0c1f4     F3 F8 FB FF 
0c1f8     02 05 08 0B | 	byte	$db, $d4, $d7, $d9, $dc, $e2, $e9, $ee, $f3, $f8, $fb, $ff, $02, $05, $08, $0b
0c1fc     0C FD E0 D4 
0c200     D0 CA C9 CC 
0c204     D0 DA E5 EF 
0c208     F9 03 06 F9 | 	byte	$0c, $fd, $e0, $d4, $d0, $ca, $c9, $cc, $d0, $da, $e5, $ef, $f9, $03, $06, $f9
0c20c     EE EF EF ED 
0c210     EF F1 F2 F3 
0c214     F6 FC 01 05 
0c218     08 0C 0F 12 | 	byte	$ee, $ef, $ef, $ed, $ef, $f1, $f2, $f3, $f6, $fc, $01, $05, $08, $0c, $0f, $12
0c21c     14 15 0B EF 
0c220     DD D5 CC C3 
0c224     C0 BD BA B7 
0c228     B6 B5 B4 B4 | 	byte	$14, $15, $0b, $ef, $dd, $d5, $cc, $c3, $c0, $bd, $ba, $b7, $b6, $b5, $b4, $b4
0c22c     B2 AD 9B 86 
0c230     81 81 81 81 
0c234     81 81 81 81 
0c238     81 81 81 81 | 	byte	$b2, $ad, $9b, $86, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
0c23c     81 81 81 81 
0c240     81 81 81 81 
0c244     81 81 81 81 
0c248     81 81       | 	byte	$81[14]
0c24a     89 98 D2 24 
0c24e     4C 49 46 46 
0c252     45 42 3A 34 
0c256     2F 29 24 1F | 	byte	$89, $98, $d2, $24, $4c, $49, $46, $46, $45, $42, $3a, $34, $2f, $29, $24, $1f
0c25a     1B 17 14 11 
0c25e     0F 0D 1C 50 
0c262     74 72 6B 68 
0c266     69 67 39 F6 | 	byte	$1b, $17, $14, $11, $0f, $0d, $1c, $50, $74, $72, $6b, $68, $69, $67, $39, $f6
0c26a     DB E3 E9 02 
0c26e     2A 40 3D 3A 
0c272     36 30 2A 25 
0c276     20 1B 19 17 | 	byte	$db, $e3, $e9, $02, $2a, $40, $3d, $3a, $36, $30, $2a, $25, $20, $1b, $19, $17
0c27a     18 19 09 DC 
0c27e     BA C0 CA E8 
0c282     1C 39 3E 41 
0c286     46 4A 4D 38 | 	byte	$18, $19, $09, $dc, $ba, $c0, $ca, $e8, $1c, $39, $3e, $41, $46, $4a, $4d, $38
0c28a     17 0B 13 1A 
0c28e     22 29 36 5B 
0c292     7F 7F 7F 7F 
0c296     7F 7F 7F 7F | 	byte	$17, $0b, $13, $1a, $22, $29, $36, $5b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
0c29a     7C 76 6F 4D 
0c29e     1B 04 FF FC 
0c2a2     FB FD FF 00 
0c2a6     FE FD F9 F4 | 	byte	$7c, $76, $6f, $4d, $1b, $04, $ff, $fc, $fb, $fd, $ff, $00, $fe, $fd, $f9, $f4
0c2aa     ED E7 DA B3 
0c2ae     91 8A 8C 8B 
0c2b2     8C 8E 8F 8E 
0c2b6     8F 91 92 91 | 	byte	$ed, $e7, $da, $b3, $91, $8a, $8c, $8b, $8c, $8e, $8f, $8e, $8f, $91, $92, $91
0c2ba     8E 8B 89 88 
0c2be     85 83 82 82 
0c2c2     83 87 8F 9B 
0c2c6     AC BB CA D3 | 	byte	$8e, $8b, $89, $88, $85, $83, $82, $82, $83, $87, $8f, $9b, $ac, $bb, $ca, $d3
0c2ca     DB FF 4D 73 
0c2ce     6B 60 58 52 
0c2d2     4D 45 3E 3A 
0c2d6     39 38 36 34 | 	byte	$db, $ff, $4d, $73, $6b, $60, $58, $52, $4d, $45, $3e, $3a, $39, $38, $36, $34
0c2da     32 30 2D 2B 
0c2de     2A 35 60 7F 
0c2e2     7F 7F 7E 7E 
0c2e6     7F 7F 58 18 | 	byte	$32, $30, $2d, $2b, $2a, $35, $60, $7f, $7f, $7f, $7e, $7e, $7f, $7f, $58, $18
0c2ea     FB 03 1F 46 
0c2ee     50 49 42 3B 
0c2f2     34 2E 29 26 
0c2f6     24 24 26 2A | 	byte	$fb, $03, $1f, $46, $50, $49, $42, $3b, $34, $2e, $29, $26, $24, $24, $26, $2a
0c2fa     2E 33 26 F9 
0c2fe     DD E4 07 38 
0c302     4B 4F 53 57 
0c306     5B 5E 59 3B | 	byte	$2e, $33, $26, $f9, $dd, $e4, $07, $38, $4b, $4f, $53, $57, $5b, $5e, $59, $3b
0c30a     20 1E 26 2C 
0c30e     31 3D 5F 7C 
0c312     7E 78 76 74 
0c316     70 6D 68 63 | 	byte	$20, $1e, $26, $2c, $31, $3d, $5f, $7c, $7e, $78, $76, $74, $70, $6d, $68, $63
0c31a     5E 59 4B 21 
0c31e     F9 EE EA EA 
0c322     E9 EA EB E9 
0c326     E7 E6 E3 DD | 	byte	$5e, $59, $4b, $21, $f9, $ee, $ea, $ea, $e9, $ea, $eb, $e9, $e7, $e6, $e3, $dd
0c32a     D7 D3 BF 9C 
0c32e     83 82 84 85 
0c332     85 84 83 83 
0c336     83 83 82 82 | 	byte	$d7, $d3, $bf, $9c, $83, $82, $84, $85, $85, $84, $83, $83, $83, $83, $82, $82
0c33a     82 82 83 83 
0c33e     84 87 88 8C 
0c342     92 9A A4 B0 
0c346     BD C7 CF D4 | 	byte	$82, $82, $83, $83, $84, $87, $88, $8c, $92, $9a, $a4, $b0, $bd, $c7, $cf, $d4
0c34a     EC 31 5A 54 
0c34e     49 42 3A 33 
0c352     2C 27 23 20 
0c356     1F 1D 1C 1C | 	byte	$ec, $31, $5a, $54, $49, $42, $3a, $33, $2c, $27, $23, $20, $1f, $1d, $1c, $1c
0c35a     1C 1C 1D 1E 
0c35e     27 53 7D 7F 
0c362     7F 7F 7C 7C 
0c366     7D 7D 72 35 | 	byte	$1c, $1c, $1d, $1e, $27, $53, $7d, $7f, $7f, $7f, $7c, $7c, $7d, $7d, $72, $35
0c36a     FE 0F 34 38 
0c36e     32 2E 2A 26 
0c372     23 20 1E 1F 
0c376     20 23 28 2D | 	byte	$fe, $0f, $34, $38, $32, $2e, $2a, $26, $23, $20, $1e, $1f, $20, $23, $28, $2d
0c37a     33 37 38 1C 
0c37e     F9 0C 38 46 
0c382     4A 50 53 56 
0c386     58 59 56 41 | 	byte	$33, $37, $38, $1c, $f9, $0c, $38, $46, $4a, $50, $53, $56, $58, $59, $56, $41
0c38a     1F 14 19 1C 
0c38e     2B 4B 63 60 
0c392     5B 58 55 4F 
0c396     4B 48 42 3E | 	byte	$1f, $14, $19, $1c, $2b, $4b, $63, $60, $5b, $58, $55, $4f, $4b, $48, $42, $3e
0c39a     3A 36 2B 0B 
0c39e     E1 D4 D4 D0 
0c3a2     D1 D4 D3 D1 
0c3a6     D1 D1 CD C8 | 	byte	$3a, $36, $2b, $0b, $e1, $d4, $d4, $d0, $d1, $d4, $d3, $d1, $d1, $d1, $cd, $c8
0c3aa     C4 C0 B6 96 
0c3ae     80 80 81 81 
0c3b2     81 81 81 81 
0c3b6     81 81 81 81 | 	byte	$c4, $c0, $b6, $96, $80, $80, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
0c3ba     81 82 82 83 
0c3be     85 8C 8F 91 
0c3c2     97 A4 AC B0 
0c3c6     B7 BD BF CE | 	byte	$81, $82, $82, $83, $85, $8c, $8f, $91, $97, $a4, $ac, $b0, $b7, $bd, $bf, $ce
0c3ca     0A 3A 39 2E 
0c3ce     27 23 1C 12 
0c3d2     0E 0E 0A 06 
0c3d6     07 08 09 0C | 	byte	$0a, $3a, $39, $2e, $27, $23, $1c, $12, $0e, $0e, $0a, $06, $07, $08, $09, $0c
0c3da     0E 11 14 1D 
0c3de     41 72 7E 79 
0c3e2     78 77 72 6D 
0c3e6     6C 6B 63 3D | 	byte	$0e, $11, $14, $1d, $41, $72, $7e, $79, $78, $77, $72, $6d, $6c, $6b, $63, $3d
0c3ea     1C 22 26 23 
0c3ee     22 22 20 1F 
0c3f2     1F 20 20 21 
0c3f6     25 29 2C 30 | 	byte	$1c, $22, $26, $23, $22, $22, $20, $1f, $1f, $20, $20, $21, $25, $29, $2c, $30
0c3fa     35 39 3B 36 
0c3fe     31 37 3E 42 
0c402     49 4D 4F 4F 
0c406     51 51 4D 30 | 	byte	$35, $39, $3b, $36, $31, $37, $3e, $42, $49, $4d, $4f, $4f, $51, $51, $4d, $30
0c40a     13 09 0A 1C 
0c40e     3C 4D 48 44 
0c412     43 3F 39 36 
0c416     33 2D 26 21 | 	byte	$13, $09, $0a, $1c, $3c, $4d, $48, $44, $43, $3f, $39, $36, $33, $2d, $26, $21
0c41a     1F 1B 10 EE 
0c41e     D1 C8 C8 C9 
0c422     CB CA C7 C8 
0c426     C9 C7 C1 BB | 	byte	$1f, $1b, $10, $ee, $d1, $c8, $c8, $c9, $cb, $ca, $c7, $c8, $c9, $c7, $c1, $bb
0c42a     B7 B3 A7 8B 
0c42e     80 81 81 81 
0c432     81 81 81 81 
0c436     81 81 81 81 | 	byte	$b7, $b3, $a7, $8b, $80, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
0c43a     81 82 82 84 
0c43e     89 92 98 9C 
0c442     A3 A9 AD B1 
0c446     B3 B3 BE EE | 	byte	$81, $82, $82, $84, $89, $92, $98, $9c, $a3, $a9, $ad, $b1, $b3, $b3, $be, $ee
0c44a     25 2C 23 1B 
0c44e     16 12 0C 06 
0c452     04 03 03 04 
0c456     08 0B 0F 12 | 	byte	$25, $2c, $23, $1b, $16, $12, $0c, $06, $04, $03, $03, $04, $08, $0b, $0f, $12
0c45a     15 18 1E 3C 
0c45e     6D 7D 78 74 
0c462     73 71 6C 64 
0c466     5E 5A 62 65 | 	byte	$15, $18, $1e, $3c, $6d, $7d, $78, $74, $73, $71, $6c, $64, $5e, $5a, $62, $65
0c46a     42 1B 1A 1C 
0c46e     1D 1D 1C 1B 
0c472     1C 1E 1E 1F 
0c476     22 27 2D 31 | 	byte	$42, $1b, $1a, $1c, $1d, $1d, $1c, $1b, $1c, $1e, $1e, $1f, $22, $27, $2d, $31
0c47a     35 39 4F 6A 
0c47e     59 38 39 42 
0c482     47 48 46 44 
0c486     42 40 39 1D | 	byte	$35, $39, $4f, $6a, $59, $38, $39, $42, $47, $48, $46, $44, $42, $40, $39, $1d
0c48a     FC F6 0C 2A 
0c48e     37 32 2F 2F 
0c492     2C 25 22 21 
0c496     1D 18 12 0F | 	byte	$fc, $f6, $0c, $2a, $37, $32, $2f, $2f, $2c, $25, $22, $21, $1d, $18, $12, $0f
0c49a     0E 0D 07 E7 
0c49e     C6 C0 C7 CC 
0c4a2     C9 C4 C3 C4 
0c4a6     C4 C0 B9 B3 | 	byte	$0e, $0d, $07, $e7, $c6, $c0, $c7, $cc, $c9, $c4, $c3, $c4, $c4, $c0, $b9, $b3
0c4aa     AE AD A4 89 
0c4ae     80 81 81 81 
0c4b2     81 81 81 81 
0c4b6     81 81 81 82 | 	byte	$ae, $ad, $a4, $89, $80, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $82
0c4ba     84 8B 8F 92 
0c4be     99 A4 AB AB 
0c4c2     A9 AB B0 B5 
0c4c6     B3 B4 DA 14 | 	byte	$84, $8b, $8f, $92, $99, $a4, $ab, $ab, $a9, $ab, $b0, $b5, $b3, $b4, $da, $14
0c4ca     23 1D 16 10 
0c4ce     0D 0D 0B 05 
0c4d2     02 05 09 0C 
0c4d6     0F 12 15 19 | 	byte	$23, $1d, $16, $10, $0d, $0d, $0b, $05, $02, $05, $09, $0c, $0f, $12, $15, $19
0c4da     1C 1D 34 62 
0c4de     78 76 6E 67 
0c4e2     65 64 5F 57 
0c4e6     52 60 7F 7F | 	byte	$1c, $1d, $34, $62, $78, $76, $6e, $67, $65, $64, $5f, $57, $52, $60, $7f, $7f
0c4ea     7F 4D 19 16 
0c4ee     1C 1D 1C 1E 
0c4f2     20 22 22 22 
0c4f6     28 2E 34 38 | 	byte	$7f, $4d, $19, $16, $1c, $1d, $1c, $1e, $20, $22, $22, $22, $28, $2e, $34, $38
0c4fa     3D 54 79 7F 
0c4fe     7F 62 3D 38 
0c502     3C 3B 35 30 
0c506     31 31 2F 24 | 	byte	$3d, $54, $79, $7f, $7f, $62, $3d, $38, $3c, $3b, $35, $30, $31, $31, $2f, $24
0c50a     09 02 19 22 
0c50e     1D 1A 1B 19 
0c512     14 0F 0B 09 
0c516     06 02 FD FB | 	byte	$09, $02, $19, $22, $1d, $1a, $1b, $19, $14, $0f, $0b, $09, $06, $02, $fd, $fb
0c51a     FD FF FE F5 
0c51e     D4 BD C0 C3 
0c522     BF B8 B4 B5 
0c526     B6 B2 AC A7 | 	byte	$fd, $ff, $fe, $f5, $d4, $bd, $c0, $c3, $bf, $b8, $b4, $b5, $b6, $b2, $ac, $a7
0c52a     A5 A3 A0 94 
0c52e     82 81 81 81 
0c532     81 81 81 81 
0c536     81 81 82 86 | 	byte	$a5, $a3, $a0, $94, $82, $81, $81, $81, $81, $81, $81, $81, $81, $81, $82, $86
0c53a     8F 97 9D A1 
0c53e     AB B2 B3 B1 
0c542     AA A9 AD B1 
0c546     B3 D0 04 1A | 	byte	$8f, $97, $9d, $a1, $ab, $b2, $b3, $b1, $aa, $a9, $ad, $b1, $b3, $d0, $04, $1a
0c54a     17 14 10 0A 
0c54e     09 0A 08 05 
0c552     05 08 0C 10 
0c556     13 14 15 17 | 	byte	$17, $14, $10, $0a, $09, $0a, $08, $05, $05, $08, $0c, $10, $13, $14, $15, $17
0c55a     19 2C 53 6F 
0c55e     6E 69 61 59 
0c562     53 52 4F 4D 
0c566     5C 77 7F 7F | 	byte	$19, $2c, $53, $6f, $6e, $69, $61, $59, $53, $52, $4f, $4d, $5c, $77, $7f, $7f
0c56a     7E 5D 2B 15 
0c56e     1A 1D 1E 20 
0c572     22 23 25 29 
0c576     2C 30 33 3C | 	byte	$7e, $5d, $2b, $15, $1a, $1d, $1e, $20, $22, $23, $25, $29, $2c, $30, $33, $3c
0c57a     57 76 7D 7C 
0c57e     7B 69 42 2C 
0c582     2D 2B 26 22 
0c586     23 21 1D 1A | 	byte	$57, $76, $7d, $7c, $7b, $69, $42, $2c, $2d, $2b, $26, $22, $23, $21, $1d, $1a
0c58a     19 17 13 0F 
0c58e     0C 0B 09 07 
0c592     05 02 FC F9 
0c596     F7 F4 F4 F6 | 	byte	$19, $17, $13, $0f, $0c, $0b, $09, $07, $05, $02, $fc, $f9, $f7, $f4, $f4, $f6
0c59a     F7 F7 F6 EF 
0c59e     D4 BE BC BB 
0c5a2     B6 B1 AF AD 
0c5a6     AB A7 A3 9E | 	byte	$f7, $f7, $f6, $ef, $d4, $be, $bc, $bb, $b6, $b1, $af, $ad, $ab, $a7, $a3, $9e
0c5aa     9B 97 94 8D 
0c5ae     81 81 81 81 
0c5b2     81 81 81 81 
0c5b6     82 84 87 8D | 	byte	$9b, $97, $94, $8d, $81, $81, $81, $81, $81, $81, $81, $81, $82, $84, $87, $8d
0c5ba     96 9E A5 AC 
0c5be     AF AF AD AB 
0c5c2     A8 A7 A9 AD 
0c5c6     C6 FB 14 0F | 	byte	$96, $9e, $a5, $ac, $af, $af, $ad, $ab, $a8, $a7, $a9, $ad, $c6, $fb, $14, $0f
0c5ca     0D 0D 0C 0B 
0c5ce     0B 0B 0D 0F 
0c5d2     12 14 17 1C 
0c5d6     21 22 20 20 | 	byte	$0d, $0d, $0c, $0b, $0b, $0b, $0d, $0f, $12, $14, $17, $1c, $21, $22, $20, $20
0c5da     2D 52 6B 6C 
0c5de     69 67 60 58 
0c5e2     54 52 56 6D 
0c5e6     7F 7F 7F 7F | 	byte	$2d, $52, $6b, $6c, $69, $67, $60, $58, $54, $52, $56, $6d, $7f, $7f, $7f, $7f
0c5ea     7F 6D 39 1A 
0c5ee     1A 1D 1E 1F 
0c5f2     21 22 26 29 
0c5f6     2A 2B 37 56 | 	byte	$7f, $6d, $39, $1a, $1a, $1d, $1e, $1f, $21, $22, $26, $29, $2a, $2b, $37, $56
0c5fa     6D 70 6C 6A 
0c5fe     68 5A 37 1C 
0c602     18 15 11 0F 
0c606     0D 09 0E 20 | 	byte	$6d, $70, $6c, $6a, $68, $5a, $37, $1c, $18, $15, $11, $0f, $0d, $09, $0e, $20
0c60a     1F 09 01 00 
0c60e     FE FD FC FB 
0c612     FC F9 F4 F1 
0c616     F0 F2 F4 F2 | 	byte	$1f, $09, $01, $00, $fe, $fd, $fc, $fb, $fc, $f9, $f4, $f1, $f0, $f2, $f4, $f2
0c61a     F2 F0 EE E4 
0c61e     CC B6 B1 B0 
0c622     AD AA A6 A3 
0c626     A2 A1 9D 95 | 	byte	$f2, $f0, $ee, $e4, $cc, $b6, $b1, $b0, $ad, $aa, $a6, $a3, $a2, $a1, $9d, $95
0c62a     93 94 93 8C 
0c62e     81 81 81 81 
0c632     81 81 82 88 
0c636     8F 95 9A 9F | 	byte	$93, $94, $93, $8c, $81, $81, $81, $81, $81, $81, $82, $88, $8f, $95, $9a, $9f
0c63a     A6 AF B5 B8 
0c63e     B8 B8 B6 B4 
0c642     B0 AD AF C7 
0c646     F5 16 14 0F | 	byte	$a6, $af, $b5, $b8, $b8, $b8, $b6, $b4, $b0, $ad, $af, $c7, $f5, $16, $14, $0f
0c64a     0D 0F 11 11 
0c64e     10 14 17 19 
0c652     1B 1C 1E 22 
0c656     25 23 20 28 | 	byte	$0d, $0f, $11, $11, $10, $14, $17, $19, $1b, $1c, $1e, $22, $25, $23, $20, $28
0c65a     47 5D 5C 5C 
0c65e     5C 59 53 4D 
0c662     49 4E 68 7D 
0c666     7F 7D 7A 7A | 	byte	$47, $5d, $5c, $5c, $5c, $59, $53, $4d, $49, $4e, $68, $7d, $7f, $7d, $7a, $7a
0c66a     76 56 27 18 
0c66e     19 1B 1C 1F 
0c672     22 26 29 2A 
0c676     2A 36 53 65 | 	byte	$76, $56, $27, $18, $19, $1b, $1c, $1f, $22, $26, $29, $2a, $2a, $36, $53, $65
0c67a     66 63 61 5F 
0c67e     5B 46 21 10 
0c682     0E 0D 0C 0A 
0c686     05 0A 23 28 | 	byte	$66, $63, $61, $5f, $5b, $46, $21, $10, $0e, $0d, $0c, $0a, $05, $0a, $23, $28
0c68a     10 02 FF FC 
0c68e     F9 F6 F6 F9 
0c692     F9 F5 EF EC 
0c696     ED ED E9 E7 | 	byte	$10, $02, $ff, $fc, $f9, $f6, $f6, $f9, $f9, $f5, $ef, $ec, $ed, $ed, $e9, $e7
0c69a     E4 E2 E0 C9 
0c69e     AA 9C 99 98 
0c6a2     98 97 95 95 
0c6a6     96 92 8B 8B | 	byte	$e4, $e2, $e0, $c9, $aa, $9c, $99, $98, $98, $97, $95, $95, $96, $92, $8b, $8b
0c6aa     8E 8F 8D 82 
0c6ae     81 81 81 81 
0c6b2     81 82 87 8F 
0c6b6     98 A0 A6 AF | 	byte	$8e, $8f, $8d, $82, $81, $81, $81, $81, $81, $82, $87, $8f, $98, $a0, $a6, $af
0c6ba     B9 BD C2 C7 
0c6be     C9 CA CA C8 
0c6c2     C5 C5 D7 01 
0c6c6     29 2D 2A 26 | 	byte	$b9, $bd, $c2, $c7, $c9, $ca, $ca, $c8, $c5, $c5, $d7, $01, $29, $2d, $2a, $26
0c6ca     22 21 23 24 
0c6ce     26 29 2D 31 
0c6d2     2F 2B 2C 2D 
0c6d6     2C 2B 2F 45 | 	byte	$22, $21, $23, $24, $26, $29, $2d, $31, $2f, $2b, $2c, $2d, $2c, $2b, $2f, $45
0c6da     5E 5D 56 54 
0c6de     52 4E 49 48 
0c6e2     4E 64 74 78 
0c6e6     78 76 74 73 | 	byte	$5e, $5d, $56, $54, $52, $4e, $49, $48, $4e, $64, $74, $78, $78, $76, $74, $73
0c6ea     72 72 6C 4B 
0c6ee     1E 0E 12 16 
0c6f2     1A 1D 1E 20 
0c6f6     32 4B 58 57 | 	byte	$72, $72, $6c, $4b, $1e, $0e, $12, $16, $1a, $1d, $1e, $20, $32, $4b, $58, $57
0c6fa     55 55 56 56 
0c6fe     53 50 4D 36 
0c702     11 04 05 02 
0c706     09 22 34 35 | 	byte	$55, $55, $56, $56, $53, $50, $4d, $36, $11, $04, $05, $02, $09, $22, $34, $35
0c70a     2D 14 FA F1 
0c70e     EE ED EF F0 
0c712     ED EB EA EA 
0c716     E8 E4 DF DB | 	byte	$2d, $14, $fa, $f1, $ee, $ed, $ef, $f0, $ed, $eb, $ea, $ea, $e8, $e4, $df, $db
0c71a     D9 DB DD D9 
0c71e     C4 9C 87 8A 
0c722     8F 93 97 96 
0c726     91 8B 88 88 | 	byte	$d9, $db, $dd, $d9, $c4, $9c, $87, $8a, $8f, $93, $97, $96, $91, $8b, $88, $88
0c72a     8A 8D 91 97 
0c72e     92 83 80 81 
0c732     81 82 82 89 
0c736     95 A0 AB B0 | 	byte	$8a, $8d, $91, $97, $92, $83, $80, $81, $81, $82, $82, $89, $95, $a0, $ab, $b0
0c73a     B3 B6 B6 B6 
0c73e     B7 BB C0 C2 
0c742     C1 C8 EC 0E 
0c746     16 15 15 14 | 	byte	$b3, $b6, $b6, $b6, $b7, $bb, $c0, $c2, $c1, $c8, $ec, $0e, $16, $15, $15, $14
0c74a     13 13 11 10 
0c74e     15 1A 1F 21 
0c752     20 21 23 21 
0c756     21 2A 43 58 | 	byte	$13, $13, $11, $10, $15, $1a, $1f, $21, $20, $21, $23, $21, $21, $2a, $43, $58
0c75a     59 51 4B 49 
0c75e     49 47 45 50 
0c762     66 6E 6F 76 
0c766     7E 7F 7F 7A | 	byte	$59, $51, $4b, $49, $49, $47, $45, $50, $66, $6e, $6f, $76, $7e, $7f, $7f, $7a
0c76a     75 75 79 70 
0c76e     46 24 22 28 
0c772     2B 2C 2E 40 
0c776     59 61 61 61 | 	byte	$75, $75, $79, $70, $46, $24, $22, $28, $2b, $2c, $2e, $40, $59, $61, $61, $61
0c77a     5E 5E 5E 5B 
0c77e     56 52 4E 44 
0c782     26 0E 0B 16 
0c786     2B 35 33 31 | 	byte	$5e, $5e, $5e, $5b, $56, $52, $4e, $44, $26, $0e, $0b, $16, $2b, $35, $33, $31
0c78a     2B 16 FB EC 
0c78e     E6 E6 E5 E1 
0c792     E0 E2 E3 E1 
0c796     DC D8 D4 CF | 	byte	$2b, $16, $fb, $ec, $e6, $e6, $e5, $e1, $e0, $e2, $e3, $e1, $dc, $d8, $d4, $cf
0c79a     CE D1 D2 CB 
0c79e     B7 98 81 82 
0c7a2     88 91 95 92 
0c7a6     8E 8A 88 86 | 	byte	$ce, $d1, $d2, $cb, $b7, $98, $81, $82, $88, $91, $95, $92, $8e, $8a, $88, $86
0c7aa     89 93 9E A3 
0c7ae     9E 8E 82 81 
0c7b2     82 82 84 91 
0c7b6     A0 AB B1 B2 | 	byte	$89, $93, $9e, $a3, $9e, $8e, $82, $81, $82, $82, $84, $91, $a0, $ab, $b1, $b2
0c7ba     B3 B4 B2 B1 
0c7be     B5 BE C2 C4 
0c7c2     C8 E2 05 0D 
0c7c6     09 09 08 08 | 	byte	$b3, $b4, $b2, $b1, $b5, $be, $c2, $c4, $c8, $e2, $05, $0d, $09, $09, $08, $08
0c7ca     0A 0B 08 06 
0c7ce     0A 0F 10 0E 
0c7d2     10 14 15 14 
0c7d6     18 2E 4B 4D | 	byte	$0a, $0b, $08, $06, $0a, $0f, $10, $0e, $10, $14, $15, $14, $18, $2e, $4b, $4d
0c7da     44 3C 37 32 
0c7de     30 34 46 5A 
0c7e2     61 60 63 6B 
0c7e6     72 75 75 72 | 	byte	$44, $3c, $37, $32, $30, $34, $46, $5a, $61, $60, $63, $6b, $72, $75, $75, $72
0c7ea     66 47 25 1E 
0c7ee     21 25 28 2B 
0c7f2     2B 30 46 5B 
0c7f6     5F 61 65 67 | 	byte	$66, $47, $25, $1e, $21, $25, $28, $2b, $2b, $30, $46, $5b, $5f, $61, $65, $67
0c7fa     67 65 63 60 
0c7fe     58 3C 21 1A 
0c802     1E 21 2C 3B 
0c806     3C 32 1D 03 | 	byte	$67, $65, $63, $60, $58, $3c, $21, $1a, $1e, $21, $2c, $3b, $3c, $32, $1d, $03
0c80a     FA F9 F7 F2 
0c80e     EB E8 E4 E0 
0c812     E1 E3 E5 E1 
0c816     DB D7 D2 CD | 	byte	$fa, $f9, $f7, $f2, $eb, $e8, $e4, $e0, $e1, $e3, $e5, $e1, $db, $d7, $d2, $cd
0c81a     C8 BE A5 8C 
0c81e     83 82 82 83 
0c822     8A 90 92 8F 
0c826     89 87 89 8D | 	byte	$c8, $be, $a5, $8c, $83, $82, $82, $83, $8a, $90, $92, $8f, $89, $87, $89, $8d
0c82a     97 9E 97 87 
0c82e     82 82 83 84 
0c832     89 90 9F AF 
0c836     BA C0 C1 BE | 	byte	$97, $9e, $97, $87, $82, $82, $83, $84, $89, $90, $9f, $af, $ba, $c0, $c1, $be
0c83a     BA BC C1 C6 
0c83e     CB D0 D4 D8 
0c842     EF 0B 17 16 
0c846     18 1A 1A 19 | 	byte	$ba, $bc, $c1, $c6, $cb, $d0, $d4, $d8, $ef, $0b, $17, $16, $18, $1a, $1a, $19
0c84a     17 17 17 17 
0c84e     1B 1F 20 22 
0c852     21 1E 1F 25 
0c856     36 52 5C 57 | 	byte	$17, $17, $17, $17, $1b, $1f, $20, $22, $21, $1e, $1f, $25, $36, $52, $5c, $57
0c85a     51 49 41 3A 
0c85e     3A 50 67 6E 
0c862     6D 6F 70 71 
0c866     74 76 69 46 | 	byte	$51, $49, $41, $3a, $3a, $50, $67, $6e, $6d, $6f, $70, $71, $74, $76, $69, $46
0c86a     28 26 29 2A 
0c86e     2C 2F 33 36 
0c872     3B 4D 5E 62 
0c876     60 61 64 65 | 	byte	$28, $26, $29, $2a, $2c, $2f, $33, $36, $3b, $4d, $5e, $62, $60, $61, $64, $65
0c87a     63 62 5D 42 
0c87e     24 17 19 1C 
0c882     22 33 3B 2A 
0c886     0D FF FE F9 | 	byte	$63, $62, $5d, $42, $24, $17, $19, $1c, $22, $33, $3b, $2a, $0d, $ff, $fe, $f9
0c88a     F4 F0 EE EB 
0c88e     E7 E4 E0 DC 
0c892     DC DE DE DB 
0c896     D8 D5 CF C0 | 	byte	$f4, $f0, $ee, $eb, $e7, $e4, $e0, $dc, $dc, $de, $de, $db, $d8, $d5, $cf, $c0
0c89a     A7 97 95 91 
0c89e     8D 8B 8D 8E 
0c8a2     90 96 9A 99 
0c8a6     99 9A 95 89 | 	byte	$a7, $97, $95, $91, $8d, $8b, $8d, $8e, $90, $96, $9a, $99, $99, $9a, $95, $89
0c8aa     83 8C 96 9A 
0c8ae     99 96 96 9A 
0c8b2     A0 AA B9 C1 
0c8b6     C3 C5 C6 C0 | 	byte	$83, $8c, $96, $9a, $99, $96, $96, $9a, $a0, $aa, $b9, $c1, $c3, $c5, $c6, $c0
0c8ba     BA BD C5 C9 
0c8be     CA CA D0 E9 
0c8c2     08 16 12 0F 
0c8c6     0D 10 13 14 | 	byte	$ba, $bd, $c5, $c9, $ca, $ca, $d0, $e9, $08, $16, $12, $0f, $0d, $10, $13, $14
0c8ca     14 16 19 1B 
0c8ce     1C 1B 1D 20 
0c8d2     1E 1D 22 29 
0c8d6     36 4D 5C 59 | 	byte	$14, $16, $19, $1b, $1c, $1b, $1d, $20, $1e, $1d, $22, $29, $36, $4d, $5c, $59
0c8da     52 4C 46 4A 
0c8de     5B 6F 73 72 
0c8e2     75 78 78 76 
0c8e6     6F 54 36 32 | 	byte	$52, $4c, $46, $4a, $5b, $6f, $73, $72, $75, $78, $78, $76, $6f, $54, $36, $32
0c8ea     39 3B 3B 3A 
0c8ee     3A 3E 40 3F 
0c8f2     43 56 64 64 
0c8f6     60 60 61 61 | 	byte	$39, $3b, $3b, $3a, $3a, $3e, $40, $3f, $43, $56, $64, $64, $60, $60, $61, $61
0c8fa     61 5D 48 27 
0c8fe     15 16 22 34 
0c902     3B 27 0C FD 
0c906     F6 F1 EC E9 | 	byte	$61, $5d, $48, $27, $15, $16, $22, $34, $3b, $27, $0c, $fd, $f6, $f1, $ec, $e9
0c90a     E7 E5 E5 E5 
0c90e     E2 DD DA DB 
0c912     DF E1 E3 E5 
0c916     E6 E1 CC B0 | 	byte	$e7, $e5, $e5, $e5, $e2, $dd, $da, $db, $df, $e1, $e3, $e5, $e6, $e1, $cc, $b0
0c91a     A4 A5 A4 A3 
0c91e     A3 A2 9F 9E 
0c922     9F A1 A4 9F 
0c926     91 88 8C 93 | 	byte	$a4, $a5, $a4, $a3, $a3, $a2, $9f, $9e, $9f, $a1, $a4, $9f, $91, $88, $8c, $93
0c92a     9B A4 A9 AC 
0c92e     AA A9 AC B3 
0c932     BD C6 CA CA 
0c936     CB CA C6 BF | 	byte	$9b, $a4, $a9, $ac, $aa, $a9, $ac, $b3, $bd, $c6, $ca, $ca, $cb, $ca, $c6, $bf
0c93a     B9 B9 BF C4 
0c93e     C8 C9 DA F9 
0c942     0F 0B 08 07 
0c946     09 0E 12 11 | 	byte	$b9, $b9, $bf, $c4, $c8, $c9, $da, $f9, $0f, $0b, $08, $07, $09, $0e, $12, $11
0c94a     10 13 16 16 
0c94e     13 15 1C 1F 
0c952     20 24 28 2B 
0c956     32 45 52 53 | 	byte	$10, $13, $16, $16, $13, $15, $1c, $1f, $20, $24, $28, $2b, $32, $45, $52, $53
0c95a     51 4F 55 66 
0c95e     70 6F 6D 6F 
0c962     70 6F 6D 57 
0c966     38 2B 31 37 | 	byte	$51, $4f, $55, $66, $70, $6f, $6d, $6f, $70, $6f, $6d, $57, $38, $2b, $31, $37
0c96a     3D 40 3E 3C 
0c96e     3E 41 42 41 
0c972     4B 60 68 64 
0c976     62 61 5F 5C | 	byte	$3d, $40, $3e, $3c, $3e, $41, $42, $41, $4b, $60, $68, $64, $62, $61, $5f, $5c
0c97a     59 4F 36 1C 
0c97e     21 36 3F 30 
0c982     19 0C 08 01 
0c986     F9 F2 ED EC | 	byte	$59, $4f, $36, $1c, $21, $36, $3f, $30, $19, $0c, $08, $01, $f9, $f2, $ed, $ec
0c98a     ED EF F1 EF 
0c98e     EB E9 E9 EB 
0c992     ED EC EC EF 
0c996     ED DA C1 AF | 	byte	$ed, $ef, $f1, $ef, $eb, $e9, $e9, $eb, $ed, $ec, $ec, $ef, $ed, $da, $c1, $af
0c99a     AD AE AA A7 
0c99e     A7 A7 A6 A6 
0c9a2     9F 8A 82 8A 
0c9a6     97 9D 9E A1 | 	byte	$ad, $ae, $aa, $a7, $a7, $a7, $a6, $a6, $9f, $8a, $82, $8a, $97, $9d, $9e, $a1
0c9aa     A6 AC AF B2 
0c9ae     B3 B4 BA C1 
0c9b2     C7 C9 C8 CA 
0c9b6     CB C6 BE B8 | 	byte	$a6, $ac, $af, $b2, $b3, $b4, $ba, $c1, $c7, $c9, $c8, $ca, $cb, $c6, $be, $b8
0c9ba     B5 B9 BE C2 
0c9be     C2 CD EC 04 
0c9c2     09 07 06 07 
0c9c6     0E 17 1B 18 | 	byte	$b5, $b9, $be, $c2, $c2, $cd, $ec, $04, $09, $07, $06, $07, $0e, $17, $1b, $18
0c9ca     10 11 17 1A 
0c9ce     19 1E 25 28 
0c9d2     2A 2B 2B 29 
0c9d6     2B 3E 50 56 | 	byte	$10, $11, $17, $1a, $19, $1e, $25, $28, $2a, $2b, $2b, $29, $2b, $3e, $50, $56
0c9da     55 5F 6F 75 
0c9de     6D 64 61 5D 
0c9e2     46 2A 26 2B 
0c9e6     2E 31 37 3B | 	byte	$55, $5f, $6f, $75, $6d, $64, $61, $5d, $46, $2a, $26, $2b, $2e, $31, $37, $3b
0c9ea     3E 3E 3B 3A 
0c9ee     3D 3E 3E 3F 
0c9f2     48 57 5B 58 
0c9f6     56 53 4E 3D | 	byte	$3e, $3e, $3b, $3a, $3d, $3e, $3e, $3f, $48, $57, $5b, $58, $56, $53, $4e, $3d
0c9fa     23 13 1C 22 
0c9fe     15 0A 0A 0A 
0ca02     08 07 06 02 
0ca06     F9 F0 EE EF | 	byte	$23, $13, $1c, $22, $15, $0a, $0a, $0a, $08, $07, $06, $02, $f9, $f0, $ee, $ef
0ca0a     F1 F5 F5 F1 
0ca0e     EF EE EF EF 
0ca12     F0 F1 ED DB 
0ca16     CB C6 C4 C0 | 	byte	$f1, $f5, $f5, $f1, $ef, $ee, $ef, $ef, $f0, $f1, $ed, $db, $cb, $c6, $c4, $c0
0ca1a     BB B7 B7 B3 
0ca1e     A2 8F 89 8A 
0ca22     8A 8A 90 9D 
0ca26     A7 AD B1 B5 | 	byte	$bb, $b7, $b7, $b3, $a2, $8f, $89, $8a, $8a, $8a, $90, $9d, $a7, $ad, $b1, $b5
0ca2a     B8 B9 B9 BA 
0ca2e     C0 C4 C7 CB 
0ca32     CC C9 C8 C9 
0ca36     C8 C3 BA B1 | 	byte	$b8, $b9, $b9, $ba, $c0, $c4, $c7, $cb, $cc, $c9, $c8, $c9, $c8, $c3, $ba, $b1
0ca3a     AF B1 B4 B7 
0ca3e     C1 E3 FF 08 
0ca42     08 08 09 10 
0ca46     19 1E 1F 1D | 	byte	$af, $b1, $b4, $b7, $c1, $e3, $ff, $08, $08, $08, $09, $10, $19, $1e, $1f, $1d
0ca4a     1B 1C 1F 25 
0ca4e     2A 2D 2E 2E 
0ca52     30 32 31 2D 
0ca56     2D 3F 53 5E | 	byte	$1b, $1c, $1f, $25, $2a, $2d, $2e, $2e, $30, $32, $31, $2d, $2d, $3f, $53, $5e
0ca5a     68 79 7F 78 
0ca5e     6C 5F 46 2F 
0ca62     2C 31 37 3D 
0ca66     3F 40 44 47 | 	byte	$68, $79, $7f, $78, $6c, $5f, $46, $2f, $2c, $31, $37, $3d, $3f, $40, $44, $47
0ca6a     49 49 47 44 
0ca6e     42 41 40 44 
0ca72     4E 56 58 56 
0ca76     54 4B 35 22 | 	byte	$49, $49, $47, $44, $42, $41, $40, $44, $4e, $56, $58, $56, $54, $4b, $35, $22
0ca7a     1F 1F 11 09 
0ca7e     08 06 05 05 
0ca82     06 08 09 07 
0ca86     00 F8 F3 F3 | 	byte	$1f, $1f, $11, $09, $08, $06, $05, $05, $06, $08, $09, $07, $00, $f8, $f3, $f3
0ca8a     F7 FA F6 F2 
0ca8e     F2 F2 F2 F3 
0ca92     F7 EE D8 CC 
0ca96     CB CA C8 C3 | 	byte	$f7, $fa, $f6, $f2, $f2, $f2, $f2, $f3, $f7, $ee, $d8, $cc, $cb, $ca, $c8, $c3
0ca9a     B9 A8 9C 96 
0ca9e     94 93 91 90 
0caa2     92 96 9C A3 
0caa6     AD B8 BD BD | 	byte	$b9, $a8, $9c, $96, $94, $93, $91, $90, $92, $96, $9c, $a3, $ad, $b8, $bd, $bd
0caaa     BF BF BE C0 
0caae     C3 C3 C6 CA 
0cab2     C7 C2 BF BC 
0cab6     B7 B0 AC A9 | 	byte	$bf, $bf, $be, $c0, $c3, $c3, $c6, $ca, $c7, $c2, $bf, $bc, $b7, $b0, $ac, $a9
0caba     AB AE B1 B9 
0cabe     D8 FA 02 03 
0cac2     07 0A 10 1B 
0cac6     25 2A 2A 28 | 	byte	$ab, $ae, $b1, $b9, $d8, $fa, $02, $03, $07, $0a, $10, $1b, $25, $2a, $2a, $28
0caca     29 29 2A 30 
0cace     36 36 36 39 
0cad2     3C 39 33 2A 
0cad6     27 35 4B 5A | 	byte	$29, $29, $2a, $30, $36, $36, $36, $39, $3c, $39, $33, $2a, $27, $35, $4b, $5a
0cada     67 79 7E 6F 
0cade     4F 2D 22 28 
0cae2     2D 31 33 38 
0cae6     3C 3B 3D 40 | 	byte	$67, $79, $7e, $6f, $4f, $2d, $22, $28, $2d, $31, $33, $38, $3c, $3b, $3d, $40
0caea     40 3D 3E 3D 
0caee     3B 3A 3C 3B 
0caf2     36 3B 47 50 
0caf6     4D 3B 22 1E | 	byte	$40, $3d, $3e, $3d, $3b, $3a, $3c, $3b, $36, $3b, $47, $50, $4d, $3b, $22, $1e
0cafa     25 1E 13 14 
0cafe     12 0F 0D 0D 
0cb02     11 12 11 11 
0cb06     0D 06 FE FD | 	byte	$25, $1e, $13, $14, $12, $0f, $0d, $0d, $11, $12, $11, $11, $0d, $06, $fe, $fd
0cb0a     FE FD F9 F9 
0cb0e     FA FB FF 02 
0cb12     04 FE EC D8 
0cb16     D2 D4 D0 C1 | 	byte	$fe, $fd, $f9, $f9, $fa, $fb, $ff, $02, $04, $fe, $ec, $d8, $d2, $d4, $d0, $c1
0cb1a     AF A6 A6 A6 
0cb1e     A6 A2 A0 A1 
0cb22     A2 A5 A9 B1 
0cb26     BB C1 C3 C2 | 	byte	$af, $a6, $a6, $a6, $a6, $a2, $a0, $a1, $a2, $a5, $a9, $b1, $bb, $c1, $c3, $c2
0cb2a     C2 C1 C3 C6 
0cb2e     C9 CC CF CD 
0cb32     C8 C2 BD B9 
0cb36     B4 AC A8 A9 | 	byte	$c2, $c1, $c3, $c6, $c9, $cc, $cf, $cd, $c8, $c2, $bd, $b9, $b4, $ac, $a8, $a9
0cb3a     AB AB AF C4 
0cb3e     E5 F9 FD 00 
0cb42     03 09 14 1D 
0cb46     26 29 2A 2B | 	byte	$ab, $ab, $af, $c4, $e5, $f9, $fd, $00, $03, $09, $14, $1d, $26, $29, $2a, $2b
0cb4a     2E 2F 30 34 
0cb4e     38 3B 3E 3F 
0cb52     3C 33 2B 24 
0cb56     22 2F 47 58 | 	byte	$2e, $2f, $30, $34, $38, $3b, $3e, $3f, $3c, $33, $2b, $24, $22, $2f, $47, $58
0cb5a     60 65 57 39 
0cb5e     2C 2A 29 2B 
0cb62     2E 31 33 37 
0cb66     3C 3C 3B 3C | 	byte	$60, $65, $57, $39, $2c, $2a, $29, $2b, $2e, $31, $33, $37, $3c, $3c, $3b, $3c
0cb6a     3A 3A 3D 3D 
0cb6e     3C 3C 3C 39 
0cb72     33 2D 31 3C 
0cb76     3D 27 18 1F | 	byte	$3a, $3a, $3d, $3d, $3c, $3c, $3c, $39, $33, $2d, $31, $3c, $3d, $27, $18, $1f
0cb7a     20 15 10 0F 
0cb7e     09 05 05 07 
0cb82     08 06 04 05 
0cb86     06 02 FD FB | 	byte	$20, $15, $10, $0f, $09, $05, $05, $07, $08, $06, $04, $05, $06, $02, $fd, $fb
0cb8a     F8 F6 F6 F7 
0cb8e     F6 F6 F8 FA 
0cb92     F8 F4 E7 D5 
0cb96     CC C5 B3 A6 | 	byte	$f8, $f6, $f6, $f7, $f6, $f6, $f8, $fa, $f8, $f4, $e7, $d5, $cc, $c5, $b3, $a6
0cb9a     A7 AC AF AF 
0cb9e     B0 AF AC AA 
0cba2     AD B0 B5 BE 
0cba6     C7 CB CC CA | 	byte	$a7, $ac, $af, $af, $b0, $af, $ac, $aa, $ad, $b0, $b5, $be, $c7, $cb, $cc, $ca
0cbaa     C7 C6 CA CF 
0cbae     D4 D6 D7 D8 
0cbb2     D6 CE C3 BA 
0cbb6     B2 AC AC AF | 	byte	$c7, $c6, $ca, $cf, $d4, $d6, $d7, $d8, $d6, $ce, $c3, $ba, $b2, $ac, $ac, $af
0cbba     AD AC C1 DF 
0cbbe     F1 F4 FB 02 
0cbc2     08 0E 17 1F 
0cbc6     24 27 2A 2E | 	byte	$ad, $ac, $c1, $df, $f1, $f4, $fb, $02, $08, $0e, $17, $1f, $24, $27, $2a, $2e
0cbca     30 32 33 35 
0cbce     38 3E 42 3F 
0cbd2     37 2E 25 21 
0cbd6     23 30 43 4B | 	byte	$30, $32, $33, $35, $38, $3e, $42, $3f, $37, $2e, $25, $21, $23, $30, $43, $4b
0cbda     39 27 2B 2F 
0cbde     2E 2E 2F 31 
0cbe2     35 38 3B 3E 
0cbe6     3F 40 3E 3A | 	byte	$39, $27, $2b, $2f, $2e, $2e, $2f, $31, $35, $38, $3b, $3e, $3f, $40, $3e, $3a
0cbea     3C 41 42 44 
0cbee     45 43 3E 3B 
0cbf2     39 37 2D 1A 
0cbf6     15 1D 21 1C | 	byte	$3c, $41, $42, $44, $45, $43, $3e, $3b, $39, $37, $2d, $1a, $15, $1d, $21, $1c
0cbfa     16 14 14 0E 
0cbfe     07 04 04 06 
0cc02     05 02 04 08 
0cc06     09 05 01 FA | 	byte	$16, $14, $14, $0e, $07, $04, $04, $06, $05, $02, $04, $08, $09, $05, $01, $fa
0cc0a     F5 F7 FA FA 
0cc0e     F8 F9 F9 F5 
0cc12     F0 E4 D4 CB 
0cc16     C3 B6 AC AE | 	byte	$f5, $f7, $fa, $fa, $f8, $f9, $f9, $f5, $f0, $e4, $d4, $cb, $c3, $b6, $ac, $ae
0cc1a     B3 B4 B3 B2 
0cc1e     B2 B3 B3 B6 
0cc22     B9 BE C2 C6 
0cc26     CA CB C9 CA | 	byte	$b3, $b4, $b3, $b2, $b2, $b3, $b3, $b6, $b9, $be, $c2, $c6, $ca, $cb, $c9, $ca
0cc2a     CB CA CD D4 
0cc2e     D9 D9 D6 D4 
0cc32     D2 C9 BF B8 
0cc36     B4 B2 B5 B6 | 	byte	$cb, $ca, $cd, $d4, $d9, $d9, $d6, $d4, $d2, $c9, $bf, $b8, $b4, $b2, $b5, $b6
0cc3a     B3 BC D7 EC 
0cc3e     F0 F3 FA 06 
0cc42     0F 14 19 1F 
0cc46     23 26 2C 31 | 	byte	$b3, $bc, $d7, $ec, $f0, $f3, $fa, $06, $0f, $14, $19, $1f, $23, $26, $2c, $31
0cc4a     34 35 36 38 
0cc4e     3A 3D 3F 3C 
0cc52     32 28 1F 1C 
0cc56     24 32 2C 19 | 	byte	$34, $35, $36, $38, $3a, $3d, $3f, $3c, $32, $28, $1f, $1c, $24, $32, $2c, $19
0cc5a     11 11 1A 24 
0cc5e     28 27 2A 30 
0cc62     34 36 36 36 
0cc66     36 36 34 35 | 	byte	$11, $11, $1a, $24, $28, $27, $2a, $30, $34, $36, $36, $36, $36, $36, $34, $35
0cc6a     3A 3D 3E 40 
0cc6e     42 41 3E 3E 
0cc72     3C 2A 14 07 
0cc76     0B 17 1B 11 | 	byte	$3a, $3d, $3e, $40, $42, $41, $3e, $3e, $3c, $2a, $14, $07, $0b, $17, $1b, $11
0cc7a     0D 11 10 0B 
0cc7e     08 08 0B 0B 
0cc82     09 06 06 09 
0cc86     0C 0D 07 FF | 	byte	$0d, $11, $10, $0b, $08, $08, $0b, $0b, $09, $06, $06, $09, $0c, $0d, $07, $ff
0cc8a     FB FE 03 04 
0cc8e     01 00 FD F9 
0cc92     F3 E9 DA D0 
0cc96     C5 B8 B1 B5 | 	byte	$fb, $fe, $03, $04, $01, $00, $fd, $f9, $f3, $e9, $da, $d0, $c5, $b8, $b1, $b5
0cc9a     B8 B9 B9 BB 
0cc9e     BD BF C2 C3 
0cca2     C3 C5 C8 CA 
0cca6     CB CB CB CE | 	byte	$b8, $b9, $b9, $bb, $bd, $bf, $c2, $c3, $c3, $c5, $c8, $ca, $cb, $cb, $cb, $ce
0ccaa     D0 D0 D3 D9 
0ccae     DB D8 D4 D3 
0ccb2     CE C4 BC BB 
0ccb6     BC B9 B7 B8 | 	byte	$d0, $d0, $d3, $d9, $db, $d8, $d4, $d3, $ce, $c4, $bc, $bb, $bc, $b9, $b7, $b8
0ccba     C2 D6 E7 EB 
0ccbe     EE F4 FB 03 
0ccc2     0D 13 1A 20 
0ccc6     25 28 2C 33 | 	byte	$c2, $d6, $e7, $eb, $ee, $f4, $fb, $03, $0d, $13, $1a, $20, $25, $28, $2c, $33
0ccca     36 35 35 39 
0ccce     3A 39 37 2F 
0ccd2     27 21 1B 1B 
0ccd6     18 0E 04 06 | 	byte	$36, $35, $35, $39, $3a, $39, $37, $2f, $27, $21, $1b, $1b, $18, $0e, $04, $06
0ccda     09 08 0E 1B 
0ccde     23 24 27 2D 
0cce2     2F 2F 30 31 
0cce6     31 32 32 33 | 	byte	$09, $08, $0e, $1b, $23, $24, $27, $2d, $2f, $2f, $30, $31, $31, $32, $32, $33
0ccea     36 3A 3D 3F 
0ccee     3F 3A 37 2B 
0ccf2     1B 0F 09 07 
0ccf6     08 0E 0C 06 | 	byte	$36, $3a, $3d, $3f, $3f, $3a, $37, $2b, $1b, $0f, $09, $07, $08, $0e, $0c, $06
0ccfa     08 10 10 0D 
0ccfe     0A 0D 10 0D 
0cd02     09 06 05 07 
0cd06     0D 0F 0D 09 | 	byte	$08, $10, $10, $0d, $0a, $0d, $10, $0d, $09, $06, $05, $07, $0d, $0f, $0d, $09
0cd0a     06 08 0B 0D 
0cd0e     0D 09 06 03 
0cd12     FB ED E3 D8 
0cd16     CA C1 C3 C6 | 	byte	$06, $08, $0b, $0d, $0d, $09, $06, $03, $fb, $ed, $e3, $d8, $ca, $c1, $c3, $c6
0cd1a     C9 CC CF D0 
0cd1e     D1 D5 D8 D8 
0cd22     D7 D3 D3 D6 
0cd26     D7 D4 D4 D9 | 	byte	$c9, $cc, $cf, $d0, $d1, $d5, $d8, $d8, $d7, $d3, $d3, $d6, $d7, $d4, $d4, $d9
0cd2a     DC DC DC DC 
0cd2e     D9 D8 D6 CF 
0cd32     C6 C0 BE BE 
0cd36     C0 BE BA C1 | 	byte	$dc, $dc, $dc, $dc, $d9, $d8, $d6, $cf, $c6, $c0, $be, $be, $c0, $be, $ba, $c1
0cd3a     D6 E5 E6 E6 
0cd3e     EA F2 FC 05 
0cd42     0C 12 15 18 
0cd46     1C 21 2B 34 | 	byte	$d6, $e5, $e6, $e6, $ea, $f2, $fc, $05, $0c, $12, $15, $18, $1c, $21, $2b, $34
0cd4a     38 37 38 3A 
0cd4e     38 33 2E 27 
0cd52     21 1D 21 2A 
0cd56     2A 1A 06 03 | 	byte	$38, $37, $38, $3a, $38, $33, $2e, $27, $21, $1d, $21, $2a, $2a, $1a, $06, $03
0cd5a     04 0A 16 23 
0cd5e     26 27 2D 32 
0cd62     35 34 33 34 
0cd66     36 37 37 38 | 	byte	$04, $0a, $16, $23, $26, $27, $2d, $32, $35, $34, $33, $34, $36, $37, $37, $38
0cd6a     38 3C 42 41 
0cd6e     38 31 2F 29 
0cd72     19 07 03 03 
0cd76     06 0C 0F 0C | 	byte	$38, $3c, $42, $41, $38, $31, $2f, $29, $19, $07, $03, $03, $06, $0c, $0f, $0c
0cd7a     0A 0A 07 06 
0cd7e     07 09 08 06 
0cd82     04 01 FC FC 
0cd86     03 08 08 08 | 	byte	$0a, $0a, $07, $06, $07, $09, $08, $06, $04, $01, $fc, $fc, $03, $08, $08, $08
0cd8a     09 09 09 09 
0cd8e     07 05 04 02 
0cd92     02 FC EE E1 
0cd96     D4 CC C9 CB | 	byte	$09, $09, $09, $09, $07, $05, $04, $02, $02, $fc, $ee, $e1, $d4, $cc, $c9, $cb
0cd9a     CD CE CF CF 
0cd9e     D0 D2 D4 D5 
0cda2     D4 D3 D3 D1 
0cda6     D0 D4 DA DE | 	byte	$cd, $ce, $cf, $cf, $d0, $d2, $d4, $d5, $d4, $d3, $d3, $d1, $d0, $d4, $da, $de
0cdaa     DB D7 D6 D4 
0cdae     D2 D0 CA C2 
0cdb2     BA B7 B9 C0 
0cdb6     C2 BF BF CD | 	byte	$db, $d7, $d6, $d4, $d2, $d0, $ca, $c2, $ba, $b7, $b9, $c0, $c2, $bf, $bf, $cd
0cdba     DF E2 DF E2 
0cdbe     EA F4 FD 05 
0cdc2     0B 10 14 15 
0cdc6     19 1F 29 31 | 	byte	$df, $e2, $df, $e2, $ea, $f4, $fd, $05, $0b, $10, $14, $15, $19, $1f, $29, $31
0cdca     37 39 39 37 
0cdce     33 2D 27 22 
0cdd2     1E 1C 24 2F 
0cdd6     2B 18 04 FC | 	byte	$37, $39, $39, $37, $33, $2d, $27, $22, $1e, $1c, $24, $2f, $2b, $18, $04, $fc
0cdda     FB 09 1A 23 
0cdde     24 27 2B 2D 
0cde2     30 31 33 34 
0cde6     35 34 33 35 | 	byte	$fb, $09, $1a, $23, $24, $27, $2b, $2d, $30, $31, $33, $34, $35, $34, $33, $35
0cdea     3A 41 44 3E 
0cdee     34 2F 2E 26 
0cdf2     12 04 01 00 
0cdf6     03 0A 11 13 | 	byte	$3a, $41, $44, $3e, $34, $2f, $2e, $26, $12, $04, $01, $00, $03, $0a, $11, $13
0cdfa     10 08 05 07 
0cdfe     0A 06 FF FE 
0ce02     00 FE FC FD 
0ce06     00 03 08 0D | 	byte	$10, $08, $05, $07, $0a, $06, $ff, $fe, $00, $fe, $fc, $fd, $00, $03, $08, $0d
0ce0a     0C 0A 0B 0B 
0ce0e     08 05 04 05 
0ce12     06 00 F2 E4 
0ce16     DB D1 C7 C8 | 	byte	$0c, $0a, $0b, $0b, $08, $05, $04, $05, $06, $00, $f2, $e4, $db, $d1, $c7, $c8
0ce1a     CB CC CB CB 
0ce1e     CD D0 D4 D6 
0ce22     D4 D2 D1 D0 
0ce26     D1 D4 D5 D6 | 	byte	$cb, $cc, $cb, $cb, $cd, $d0, $d4, $d6, $d4, $d2, $d1, $d0, $d1, $d4, $d5, $d6
0ce2a     D6 D4 CF CC 
0ce2e     CC C8 C2 BB 
0ce32     B7 BA C1 C5 
0ce36     C4 C2 CB DC | 	byte	$d6, $d4, $cf, $cc, $cc, $c8, $c2, $bb, $b7, $ba, $c1, $c5, $c4, $c2, $cb, $dc
0ce3a     E4 E4 E8 ED 
0ce3e     F5 FB FF 04 
0ce42     09 0B 0D 11 
0ce46     15 1E 27 2F | 	byte	$e4, $e4, $e8, $ed, $f5, $fb, $ff, $04, $09, $0b, $0d, $11, $15, $1e, $27, $2f
0ce4a     37 3C 3B 32 
0ce4e     29 24 21 1D 
0ce52     1B 20 29 2D 
0ce56     1F 07 F2 ED | 	byte	$37, $3c, $3b, $32, $29, $24, $21, $1d, $1b, $20, $29, $2d, $1f, $07, $f2, $ed
0ce5a     F1 FF 11 18 
0ce5e     1B 1E 24 27 
0ce62     29 2E 31 2F 
0ce66     2F 30 30 32 | 	byte	$f1, $ff, $11, $18, $1b, $1e, $24, $27, $29, $2e, $31, $2f, $2f, $30, $30, $32
0ce6a     38 3C 38 31 
0ce6e     2C 28 25 1D 
0ce72     0C FF F8 FB 
0ce76     02 0C 14 16 | 	byte	$38, $3c, $38, $31, $2c, $28, $25, $1d, $0c, $ff, $f8, $fb, $02, $0c, $14, $16
0ce7a     0F 05 03 05 
0ce7e     03 FE FC FE 
0ce82     FE FC FB FB 
0ce86     FC FE 03 08 | 	byte	$0f, $05, $03, $05, $03, $fe, $fc, $fe, $fe, $fc, $fb, $fb, $fc, $fe, $03, $08
0ce8a     0A 09 06 06 
0ce8e     06 04 03 04 
0ce92     04 FF F4 E7 
0ce96     DC D2 C9 C7 | 	byte	$0a, $09, $06, $06, $06, $04, $03, $04, $04, $ff, $f4, $e7, $dc, $d2, $c9, $c7
0ce9a     CB CE CD CE 
0ce9e     D3 D8 DB DB 
0cea2     D9 D7 D7 D8 
0cea6     DA DD DC DB | 	byte	$cb, $ce, $cd, $ce, $d3, $d8, $db, $db, $d9, $d7, $d7, $d8, $da, $dd, $dc, $db
0ceaa     DA D7 D3 D1 
0ceae     CF C9 C3 C0 
0ceb2     C2 C8 CB C9 
0ceb6     C7 D1 E1 E9 | 	byte	$da, $d7, $d3, $d1, $cf, $c9, $c3, $c0, $c2, $c8, $cb, $c9, $c7, $d1, $e1, $e9
0ceba     ED F4 F9 FC 
0cebe     FE 00 04 0A 
0cec2     0C 0C 0E 13 
0cec6     1B 24 2E 36 | 	byte	$ed, $f4, $f9, $fc, $fe, $00, $04, $0a, $0c, $0c, $0e, $13, $1b, $24, $2e, $36
0ceca     3A 39 33 2B 
0cece     21 1A 18 17 
0ced2     19 21 27 23 
0ced6     12 FC E9 E7 | 	byte	$3a, $39, $33, $2b, $21, $1a, $18, $17, $19, $21, $27, $23, $12, $fc, $e9, $e7
0ceda     F0 FD 0B 15 
0cede     1B 20 25 25 
0cee2     26 28 28 29 
0cee6     2A 2C 2E 2E | 	byte	$f0, $fd, $0b, $15, $1b, $20, $25, $25, $26, $28, $28, $29, $2a, $2c, $2e, $2e
0ceea     2F 2E 2A 25 
0ceee     21 1F 1B 0F 
0cef2     FF F3 F2 F9 
0cef6     03 0D 13 12 | 	byte	$2f, $2e, $2a, $25, $21, $1f, $1b, $0f, $ff, $f3, $f2, $f9, $03, $0d, $13, $12
0cefa     07 FC FC FE 
0cefe     FF 00 00 FD 
0cf02     FA FB FA FA 
0cf06     FC FF 03 05 | 	byte	$07, $fc, $fc, $fe, $ff, $00, $00, $fd, $fa, $fb, $fa, $fa, $fc, $ff, $03, $05
0cf0a     05 04 03 04 
0cf0e     04 02 02 04 
0cf12     04 02 FB F0 
0cf16     E4 DA D3 D0 | 	byte	$05, $04, $03, $04, $04, $02, $02, $04, $04, $02, $fb, $f0, $e4, $da, $d3, $d0
0cf1a     D0 D3 D7 D7 
0cf1e     D8 DA DB DB 
0cf22     DD DE DE DD 
0cf26     DE DF DF DD | 	byte	$d0, $d3, $d7, $d7, $d8, $da, $db, $db, $dd, $de, $de, $dd, $de, $df, $df, $dd
0cf2a     DB D9 D7 D2 
0cf2e     CD C9 C9 CA 
0cf32     CD D0 D0 D0 
0cf36     D8 EA F4 F5 | 	byte	$db, $d9, $d7, $d2, $cd, $c9, $c9, $ca, $cd, $d0, $d0, $d0, $d8, $ea, $f4, $f5
0cf3a     F6 FB 00 01 
0cf3e     FE 00 04 08 
0cf42     0A 0C 11 1B 
0cf46     23 2A 2D 2F | 	byte	$f6, $fb, $00, $01, $fe, $00, $04, $08, $0a, $0c, $11, $1b, $23, $2a, $2d, $2f
0cf4a     2F 2D 29 1F 
0cf4e     14 10 11 15 
0cf52     1B 21 22 1E 
0cf56     19 0F FB EC | 	byte	$2f, $2d, $29, $1f, $14, $10, $11, $15, $1b, $21, $22, $1e, $19, $0f, $fb, $ec
0cf5a     F2 02 0E 13 
0cf5e     18 1C 1D 1E 
0cf62     22 26 2A 2C 
0cf66     2A 2A 2D 2E | 	byte	$f2, $02, $0e, $13, $18, $1c, $1d, $1e, $22, $26, $2a, $2c, $2a, $2a, $2d, $2e
0cf6a     2C 28 24 21 
0cf6e     1E 19 15 12 
0cf72     10 05 FC FE 
0cf76     08 11 15 15 | 	byte	$2c, $28, $24, $21, $1e, $19, $15, $12, $10, $05, $fc, $fe, $08, $11, $15, $15
0cf7a     11 0D 06 00 
0cf7e     00 00 FE FB 
0cf82     F9 F9 F7 F8 
0cf86     FA FB FB FB | 	byte	$11, $0d, $06, $00, $00, $00, $fe, $fb, $f9, $f9, $f7, $f8, $fa, $fb, $fb, $fb
0cf8a     FD FE FF 00 
0cf8e     02 04 03 01 
0cf92     01 03 03 01 
0cf96     F8 EF E6 DD | 	byte	$fd, $fe, $ff, $00, $02, $04, $03, $01, $01, $03, $03, $01, $f8, $ef, $e6, $dd
0cf9a     D5 D6 D7 D7 
0cf9e     D9 D8 D7 D9 
0cfa2     DE DF DD DC 
0cfa6     DE DD DB DB | 	byte	$d5, $d6, $d7, $d7, $d9, $d8, $d7, $d9, $de, $df, $dd, $dc, $de, $dd, $db, $db
0cfaa     DC DC DB D4 
0cfae     CC CC D1 D5 
0cfb2     D6 D5 D3 DB 
0cfb6     EC F9 F8 F8 | 	byte	$dc, $dc, $db, $d4, $cc, $cc, $d1, $d5, $d6, $d5, $d3, $db, $ec, $f9, $f8, $f8
0cfba     FB FE FD FB 
0cfbe     FC 01 03 05 
0cfc2     08 0D 16 1B 
0cfc6     1F 21 21 1F | 	byte	$fb, $fe, $fd, $fb, $fc, $01, $03, $05, $08, $0d, $16, $1b, $1f, $21, $21, $1f
0cfca     1F 1F 19 14 
0cfce     0E 0C 0F 18 
0cfd2     22 23 1E 17 
0cfd6     12 0F 03 F8 | 	byte	$1f, $1f, $19, $14, $0e, $0c, $0f, $18, $22, $23, $1e, $17, $12, $0f, $03, $f8
0cfda     FB 09 0F 13 
0cfde     17 18 19 1E 
0cfe2     23 26 29 2A 
0cfe6     2B 2E 2E 2E | 	byte	$fb, $09, $0f, $13, $17, $18, $19, $1e, $23, $26, $29, $2a, $2b, $2e, $2e, $2e
0cfea     2A 25 1F 1A 
0cfee     19 17 15 14 
0cff2     13 0A 02 02 
0cff6     09 0F 11 11 | 	byte	$2a, $25, $1f, $1a, $19, $17, $15, $14, $13, $0a, $02, $02, $09, $0f, $11, $11
0cffa     11 11 09 FE 
0cffe     F9 F9 F7 F4 
0d002     F1 F1 F2 F5 
0d006     F6 F5 F4 F3 | 	byte	$11, $11, $09, $fe, $f9, $f9, $f7, $f4, $f1, $f1, $f2, $f5, $f6, $f5, $f4, $f3
0d00a     F5 F8 FA FD 
0d00e     00 00 FD FC 
0d012     FF 01 02 01 
0d016     00 FD F7 EC | 	byte	$f5, $f8, $fa, $fd, $00, $00, $fd, $fc, $ff, $01, $02, $01, $00, $fd, $f7, $ec
0d01a     E2 DB DA D9 
0d01e     D7 D6 D8 DC 
0d022     DE DE DE DE 
0d026     E0 E1 DF DD | 	byte	$e2, $db, $da, $d9, $d7, $d6, $d8, $dc, $de, $de, $de, $de, $e0, $e1, $df, $dd
0d02a     DF E0 DF DA 
0d02e     D5 D3 D5 D8 
0d032     D8 D5 DB E9 
0d036     F6 F7 F4 F4 | 	byte	$df, $e0, $df, $da, $d5, $d3, $d5, $d8, $d8, $d5, $db, $e9, $f6, $f7, $f4, $f4
0d03a     F7 FA F7 F4 
0d03e     F6 F9 FB FD 
0d042     00 07 0E 11 
0d046     13 12 0F 0D | 	byte	$f7, $fa, $f7, $f4, $f6, $f9, $fb, $fd, $00, $07, $0e, $11, $13, $12, $0f, $0d
0d04a     0C 0C 0B 08 
0d04e     09 0D 15 1E 
0d052     1E 18 15 13 
0d056     14 17 15 0D | 	byte	$0c, $0c, $0b, $08, $09, $0d, $15, $1e, $1e, $18, $15, $13, $14, $17, $15, $0d
0d05a     0A 0E 12 16 
0d05e     19 1C 1C 1E 
0d062     21 26 2A 2F 
0d066     33 35 32 2D | 	byte	$0a, $0e, $12, $16, $19, $1c, $1c, $1e, $21, $26, $2a, $2f, $33, $35, $32, $2d
0d06a     25 21 20 21 
0d06e     20 1B 15 11 
0d072     0E 0B 05 FD 
0d076     FE 05 09 09 | 	byte	$25, $21, $20, $21, $20, $1b, $15, $11, $0e, $0b, $05, $fd, $fe, $05, $09, $09
0d07a     0A 09 05 FD 
0d07e     F4 F0 EF ED 
0d082     EB EB EC EC 
0d086     EB EC ED ED | 	byte	$0a, $09, $05, $fd, $f4, $f0, $ef, $ed, $eb, $eb, $ec, $ec, $eb, $ec, $ed, $ed
0d08a     EE F1 F4 F5 
0d08e     F4 F5 F7 F9 
0d092     FB FD FC FF 
0d096     03 04 FD F3 | 	byte	$ee, $f1, $f4, $f5, $f4, $f5, $f7, $f9, $fb, $fd, $fc, $ff, $03, $04, $fd, $f3
0d09a     E5 DB D7 D8 
0d09e     D9 D9 DC DE 
0d0a2     DE E0 E4 E5 
0d0a6     E6 E4 E1 DF | 	byte	$e5, $db, $d7, $d8, $d9, $d9, $dc, $de, $de, $e0, $e4, $e5, $e6, $e4, $e1, $df
0d0aa     E1 E3 E5 E4 
0d0ae     E0 DB DD E0 
0d0b2     E0 E2 EF FC 
0d0b6     01 FC FA FB | 	byte	$e1, $e3, $e5, $e4, $e0, $db, $dd, $e0, $e0, $e2, $ef, $fc, $01, $fc, $fa, $fb
0d0ba     FC FD FC FB 
0d0be     FA FC 01 05 
0d0c2     08 0C 0F 10 
0d0c6     0F 0C 0A 09 | 	byte	$fc, $fd, $fc, $fb, $fa, $fc, $01, $05, $08, $0c, $0f, $10, $0f, $0c, $0a, $09
0d0ca     0A 0A 09 09 
0d0ce     0E 13 19 1B 
0d0d2     1A 18 16 17 
0d0d6     1B 1E 22 26 | 	byte	$0a, $0a, $09, $09, $0e, $13, $19, $1b, $1a, $18, $16, $17, $1b, $1e, $22, $26
0d0da     21 17 12 11 
0d0de     13 16 17 19 
0d0e2     1F 28 2E 30 
0d0e6     32 32 2B 24 | 	byte	$21, $17, $12, $11, $13, $16, $17, $19, $1f, $28, $2e, $30, $32, $32, $2b, $24
0d0ea     20 20 20 1D 
0d0ee     19 16 12 0B 
0d0f2     07 08 09 05 
0d0f6     00 01 05 06 | 	byte	$20, $20, $20, $1d, $19, $16, $12, $0b, $07, $08, $09, $05, $00, $01, $05, $06
0d0fa     06 05 03 02 
0d0fe     FE F5 EC E8 
0d102     EA EA E8 E7 
0d106     E9 EB EB EB | 	byte	$06, $05, $03, $02, $fe, $f5, $ec, $e8, $ea, $ea, $e8, $e7, $e9, $eb, $eb, $eb
0d10a     EC EE EF EF 
0d10e     EF F3 F8 FB 
0d112     FC FB FB FE 
0d116     02 02 00 FC | 	byte	$ec, $ee, $ef, $ef, $ef, $f3, $f8, $fb, $fc, $fb, $fb, $fe, $02, $02, $00, $fc
0d11a     F6 ED E0 D7 
0d11e     D5 D9 DB DA 
0d122     DB DE E1 E2 
0d126     E0 DE DD DD | 	byte	$f6, $ed, $e0, $d7, $d5, $d9, $db, $da, $db, $de, $e1, $e2, $e0, $de, $dd, $dd
0d12a     DD E0 E2 E1 
0d12e     DF DE DD DD 
0d132     E2 EE FB FF 
0d136     FE FD FC FB | 	byte	$dd, $e0, $e2, $e1, $df, $de, $dd, $dd, $e2, $ee, $fb, $ff, $fe, $fd, $fc, $fb
0d13a     F9 F7 F8 FB 
0d13e     FF 03 04 07 
0d142     09 09 09 09 
0d146     09 09 09 08 | 	byte	$f9, $f7, $f8, $fb, $ff, $03, $04, $07, $09, $09, $09, $09, $09, $09, $09, $08
0d14a     07 06 07 0C 
0d14e     14 1D 1F 1C 
0d152     1B 1A 1B 1E 
0d156     20 20 25 2F | 	byte	$07, $06, $07, $0c, $14, $1d, $1f, $1c, $1b, $1a, $1b, $1e, $20, $20, $25, $2f
0d15a     30 22 14 0E 
0d15e     0F 13 19 1F 
0d162     24 28 2B 2B 
0d166     2A 26 22 1F | 	byte	$30, $22, $14, $0e, $0f, $13, $19, $1f, $24, $28, $2b, $2b, $2a, $26, $22, $1f
0d16a     1D 1D 19 14 
0d16e     12 0F 07 00 
0d172     FD FE 02 06 
0d176     04 01 FF FF | 	byte	$1d, $1d, $19, $14, $12, $0f, $07, $00, $fd, $fe, $02, $06, $04, $01, $ff, $ff
0d17a     FC F8 F5 F3 
0d17e     F3 F2 EE E9 
0d182     E8 E9 E8 E7 
0d186     E9 E8 E7 E8 | 	byte	$fc, $f8, $f5, $f3, $f3, $f2, $ee, $e9, $e8, $e9, $e8, $e7, $e9, $e8, $e7, $e8
0d18a     EB EC ED EE 
0d18e     F2 F8 FD 01 
0d192     01 00 01 03 
0d196     04 04 04 05 | 	byte	$eb, $ec, $ed, $ee, $f2, $f8, $fd, $01, $01, $00, $01, $03, $04, $04, $04, $05
0d19a     03 FE F3 E8 
0d19e     E1 DF DE DF 
0d1a2     E0 E2 E3 E3 
0d1a6     E1 E1 E2 E2 | 	byte	$03, $fe, $f3, $e8, $e1, $df, $de, $df, $e0, $e2, $e3, $e3, $e1, $e1, $e2, $e2
0d1aa     E1 E0 E1 E4 
0d1ae     E6 E4 E1 E1 
0d1b2     EB F9 FF FE 
0d1b6     FD FD FB F7 | 	byte	$e1, $e0, $e1, $e4, $e6, $e4, $e1, $e1, $eb, $f9, $ff, $fe, $fd, $fd, $fb, $f7
0d1ba     F2 F2 F5 FB 
0d1be     FE FF 00 02 
0d1c2     02 01 03 07 
0d1c6     09 07 05 03 | 	byte	$f2, $f2, $f5, $fb, $fe, $ff, $00, $02, $02, $01, $03, $07, $09, $07, $05, $03
0d1ca     01 03 08 0F 
0d1ce     18 1D 1C 1B 
0d1d2     1B 1A 1A 1B 
0d1d6     1C 20 2A 34 | 	byte	$01, $03, $08, $0f, $18, $1d, $1c, $1b, $1b, $1a, $1a, $1b, $1c, $20, $2a, $34
0d1da     31 23 16 11 
0d1de     14 19 1F 23 
0d1e2     25 24 24 24 
0d1e6     21 20 1E 1C | 	byte	$31, $23, $16, $11, $14, $19, $1f, $23, $25, $24, $24, $24, $21, $20, $1e, $1c
0d1ea     18 16 13 11 
0d1ee     0F 08 FF F8 
0d1f2     F5 F9 01 07 
0d1f6     06 00 FA F8 | 	byte	$18, $16, $13, $11, $0f, $08, $ff, $f8, $f5, $f9, $01, $07, $06, $00, $fa, $f8
0d1fa     F5 F2 F0 EF 
0d1fe     EF EF ED EB 
0d202     EA EA E8 E8 
0d206     E6 E4 E4 E6 | 	byte	$f5, $f2, $f0, $ef, $ef, $ef, $ed, $eb, $ea, $ea, $e8, $e8, $e6, $e4, $e4, $e6
0d20a     EA ED F0 F2 
0d20e     F6 FA FF 02 
0d212     02 01 02 04 
0d216     04 05 06 08 | 	byte	$ea, $ed, $f0, $f2, $f6, $fa, $ff, $02, $02, $01, $02, $04, $04, $05, $06, $08
0d21a     0B 07 FF F3 
0d21e     EA E5 E2 E2 
0d222     E2 E3 E4 E5 
0d226     E6 E5 E4 E4 | 	byte	$0b, $07, $ff, $f3, $ea, $e5, $e2, $e2, $e2, $e3, $e4, $e5, $e6, $e5, $e4, $e4
0d22a     E4 E3 E3 E4 
0d22e     E6 E5 E3 E9 
0d232     F8 02 01 FF 
0d236     FF FE FB F6 | 	byte	$e4, $e3, $e3, $e4, $e6, $e5, $e3, $e9, $f8, $02, $01, $ff, $ff, $fe, $fb, $f6
0d23a     F3 F3 F7 FA 
0d23e     FC FE FE FF 
0d242     01 03 04 05 
0d246     05 06 03 00 | 	byte	$f3, $f3, $f7, $fa, $fc, $fe, $fe, $ff, $01, $03, $04, $05, $05, $06, $03, $00
0d24a     FE FF 05 0E 
0d24e     15 18 18 16 
0d252     13 13 14 15 
0d256     18 21 2B 31 | 	byte	$fe, $ff, $05, $0e, $15, $18, $18, $16, $13, $13, $14, $15, $18, $21, $2b, $31
0d25a     2E 22 15 12 
0d25e     15 19 1E 20 
0d262     1F 1E 1D 1D 
0d266     1E 1D 1B 18 | 	byte	$2e, $22, $15, $12, $15, $19, $1e, $20, $1f, $1e, $1d, $1d, $1e, $1d, $1b, $18
0d26a     18 16 12 0D 
0d26e     08 03 FD F9 
0d272     F9 FC 07 0D 
0d276     09 FE F4 F2 | 	byte	$18, $16, $12, $0d, $08, $03, $fd, $f9, $f9, $fc, $07, $0d, $09, $fe, $f4, $f2
0d27a     F4 F4 F0 EF 
0d27e     F1 F4 F7 F5 
0d282     EF EB EA EA 
0d286     E8 E6 E7 EB | 	byte	$f4, $f4, $f0, $ef, $f1, $f4, $f7, $f5, $ef, $eb, $ea, $ea, $e8, $e6, $e7, $eb
0d28a     EC ED EE F1 
0d28e     F4 F8 FB FC 
0d292     FE FF 01 02 
0d296     02 03 06 0B | 	byte	$ec, $ed, $ee, $f1, $f4, $f8, $fb, $fc, $fe, $ff, $01, $02, $02, $03, $06, $0b
0d29a     0F 0E 07 F9 
0d29e     EB E3 E0 E0 
0d2a2     E2 E3 E4 E4 
0d2a6     E5 E5 E5 E2 | 	byte	$0f, $0e, $07, $f9, $eb, $e3, $e0, $e0, $e2, $e3, $e4, $e4, $e5, $e5, $e5, $e2
0d2aa     E1 E0 E1 E4 
0d2ae     E6 E7 ED F7 
0d2b2     01 03 01 FF 
0d2b6     FE FD FB F9 | 	byte	$e1, $e0, $e1, $e4, $e6, $e7, $ed, $f7, $01, $03, $01, $ff, $fe, $fd, $fb, $f9
0d2ba     F7 F7 F8 FB 
0d2be     FE 00 02 02 
0d2c2     02 02 02 03 
0d2c6     03 03 02 FF | 	byte	$f7, $f7, $f8, $fb, $fe, $00, $02, $02, $02, $02, $02, $03, $03, $03, $02, $ff
0d2ca     FE 01 08 10 
0d2ce     15 15 15 14 
0d2d2     14 15 14 15 
0d2d6     1A 22 23 1B | 	byte	$fe, $01, $08, $10, $15, $15, $15, $14, $14, $15, $14, $15, $1a, $22, $23, $1b
0d2da     11 11 16 19 
0d2de     1A 1C 20 23 
0d2e2     22 1F 1C 1B 
0d2e6     1C 1C 1A 19 | 	byte	$11, $11, $16, $19, $1a, $1c, $20, $23, $22, $1f, $1c, $1b, $1c, $1c, $1a, $19
0d2ea     17 14 0E 09 
0d2ee     04 01 FF FD 
0d2f2     FC FD FB F9 
0d2f6     F7 F5 F1 F1 | 	byte	$17, $14, $0e, $09, $04, $01, $ff, $fd, $fc, $fd, $fb, $f9, $f7, $f5, $f1, $f1
0d2fa     F3 F3 F3 F5 
0d2fe     F5 F2 EE EC 
0d302     EC EB EA EA 
0d306     E9 E8 E9 EB | 	byte	$f3, $f3, $f3, $f5, $f5, $f2, $ee, $ec, $ec, $eb, $ea, $ea, $e9, $e8, $e9, $eb
0d30a     EC EB EC F1 
0d30e     F4 F6 F6 F9 
0d312     FE 02 05 07 
0d316     09 0A 0E 0F | 	byte	$ec, $eb, $ec, $f1, $f4, $f6, $f6, $f9, $fe, $02, $05, $07, $09, $0a, $0e, $0f
0d31a     08 FD F4 EF 
0d31e     E9 E5 E5 E6 
0d322     E9 E9 E8 E7 
0d326     E7 E5 E4 E4 | 	byte	$08, $fd, $f4, $ef, $e9, $e5, $e5, $e6, $e9, $e9, $e8, $e7, $e7, $e5, $e4, $e4
0d32a     E6 E7 E9 E9 
0d32e     E9 ED F9 04 
0d332     07 03 02 02 
0d336     02 FF FC FB | 	byte	$e6, $e7, $e9, $e9, $e9, $ed, $f9, $04, $07, $03, $02, $02, $02, $ff, $fc, $fb
0d33a     FA FA FC FF 
0d33e     02 04 03 00 
0d342     FE FF 00 01 
0d346     03 04 04 02 | 	byte	$fa, $fa, $fc, $ff, $02, $04, $03, $00, $fe, $ff, $00, $01, $03, $04, $04, $02
0d34a     02 07 0F 16 
0d34e     18 18 18 1A 
0d352     1A 17 16 16 
0d356     15 14 14 17 | 	byte	$02, $07, $0f, $16, $18, $18, $18, $1a, $1a, $17, $16, $16, $15, $14, $14, $17
0d35a     19 1C 1C 1C 
0d35e     1E 21 25 26 
0d362     26 23 1F 1E 
0d366     1F 1D 1E 1D | 	byte	$19, $1c, $1c, $1c, $1e, $21, $25, $26, $26, $23, $1f, $1e, $1f, $1d, $1e, $1d
0d36a     1B 17 11 0A 
0d36e     05 01 FF FB 
0d372     F6 F3 F6 FB 
0d376     FA F6 F3 F2 | 	byte	$1b, $17, $11, $0a, $05, $01, $ff, $fb, $f6, $f3, $f6, $fb, $fa, $f6, $f3, $f2
0d37a     F4 F7 F8 F4 
0d37e     EE EA E8 E8 
0d382     E9 E9 EA EB 
0d386     EC EA EA EB | 	byte	$f4, $f7, $f8, $f4, $ee, $ea, $e8, $e8, $e9, $e9, $ea, $eb, $ec, $ea, $ea, $eb
0d38a     EB EA EB EE 
0d38e     F1 F4 F8 FC 
0d392     01 06 08 09 
0d396     09 09 06 00 | 	byte	$eb, $ea, $eb, $ee, $f1, $f4, $f8, $fc, $01, $06, $08, $09, $09, $09, $06, $00
0d39a     F7 F3 F1 F1 
0d39e     F0 EE EB EA 
0d3a2     E9 E8 E9 E9 
0d3a6     E8 E6 E8 EB | 	byte	$f7, $f3, $f1, $f1, $f0, $ee, $eb, $ea, $e9, $e8, $e9, $e9, $e8, $e6, $e8, $eb
0d3aa     EE F1 F2 F1 
0d3ae     F3 FE 09 0D 
0d3b2     0A 08 07 06 
0d3b6     06 05 05 03 | 	byte	$ee, $f1, $f2, $f1, $f3, $fe, $09, $0d, $0a, $08, $07, $06, $06, $05, $05, $03
0d3ba     02 03 05 07 
0d3be     08 05 01 FF 
0d3c2     FF 02 05 07 
0d3c6     06 06 07 08 | 	byte	$02, $03, $05, $07, $08, $05, $01, $ff, $ff, $02, $05, $07, $06, $06, $07, $08
0d3ca     0A 11 16 17 
0d3ce     19 1A 1B 1C 
0d3d2     1A 14 0D 05 
0d3d6     07 10 17 19 | 	byte	$0a, $11, $16, $17, $19, $1a, $1b, $1c, $1a, $14, $0d, $05, $07, $10, $17, $19
0d3da     19 19 18 19 
0d3de     1B 1E 20 20 
0d3e2     1E 1D 1C 1A 
0d3e6     18 19 18 16 | 	byte	$19, $19, $18, $19, $1b, $1e, $20, $20, $1e, $1d, $1c, $1a, $18, $19, $18, $16
0d3ea     12 10 0B 05 
0d3ee     FC F2 E9 E5 
0d3f2     EA F3 F8 F7 
0d3f6     F2 F0 F1 F3 | 	byte	$12, $10, $0b, $05, $fc, $f2, $e9, $e5, $ea, $f3, $f8, $f7, $f2, $f0, $f1, $f3
0d3fa     F5 F4 F0 E9 
0d3fe     E6 E5 E6 E7 
0d402     E9 EC ED ED 
0d406     EE EE ED EC | 	byte	$f5, $f4, $f0, $e9, $e6, $e5, $e6, $e7, $e9, $ec, $ed, $ed, $ee, $ee, $ed, $ec
0d40a     EB EA EC F1 
0d40e     F5 FA FE 03 
0d412     07 0D 0F 0E 
0d416     0A 03 FB F5 | 	byte	$eb, $ea, $ec, $f1, $f5, $fa, $fe, $03, $07, $0d, $0f, $0e, $0a, $03, $fb, $f5
0d41a     F4 F5 F5 F6 
0d41e     F6 F2 EE EB 
0d422     E8 E7 EA EC 
0d426     EC ED EE F1 | 	byte	$f4, $f5, $f5, $f6, $f6, $f2, $ee, $eb, $e8, $e7, $ea, $ec, $ec, $ed, $ee, $f1
0d42a     F3 F5 F4 F4 
0d42e     FD 08 0E 0B 
0d432     07 05 04 04 
0d436     05 07 07 05 | 	byte	$f3, $f5, $f4, $f4, $fd, $08, $0e, $0b, $07, $05, $04, $04, $05, $07, $07, $05
0d43a     05 04 05 06 
0d43e     04 FF FC FD 
0d442     FE 00 04 08 
0d446     09 08 0A 0D | 	byte	$05, $04, $05, $06, $04, $ff, $fc, $fd, $fe, $00, $04, $08, $09, $08, $0a, $0d
0d44a     15 1A 1A 19 
0d44e     1A 1C 1D 1C 
0d452     14 09 01 07 
0d456     12 19 1A 1B | 	byte	$15, $1a, $1a, $19, $1a, $1c, $1d, $1c, $14, $09, $01, $07, $12, $19, $1a, $1b
0d45a     1B 1A 1B 1E 
0d45e     20 20 22 23 
0d462     22 21 1F 1C 
0d466     1A 18 15 13 | 	byte	$1b, $1a, $1b, $1e, $20, $20, $22, $23, $22, $21, $1f, $1c, $1a, $18, $15, $13
0d46a     11 0C 03 FA 
0d46e     EC E1 DF E6 
0d472     EF F4 F4 EF 
0d476     EB EB ED EE | 	byte	$11, $0c, $03, $fa, $ec, $e1, $df, $e6, $ef, $f4, $f4, $ef, $eb, $eb, $ed, $ee
0d47a     EA E5 E2 E3 
0d47e     E3 E2 E3 E5 
0d482     E6 E7 E9 EA 
0d486     EC ED EC EB | 	byte	$ea, $e5, $e2, $e3, $e3, $e2, $e3, $e5, $e6, $e7, $e9, $ea, $ec, $ed, $ec, $eb
0d48a     EB ED F2 F5 
0d48e     F8 FC 00 06 
0d492     0B 0E 0F 0A 
0d496     01 F7 F4 F7 | 	byte	$eb, $ed, $f2, $f5, $f8, $fc, $00, $06, $0b, $0e, $0f, $0a, $01, $f7, $f4, $f7
0d49a     FA FC FD FC 
0d49e     F9 F5 F2 F0 
0d4a2     F0 F1 F2 F3 
0d4a6     F2 F1 F2 F4 | 	byte	$fa, $fc, $fd, $fc, $f9, $f5, $f2, $f0, $f0, $f1, $f2, $f3, $f2, $f1, $f2, $f4
0d4aa     F5 F3 F4 FD 
0d4ae     07 0D 0C 09 
0d4b2     05 04 04 05 
0d4b6     07 07 05 03 | 	byte	$f5, $f3, $f4, $fd, $07, $0d, $0c, $09, $05, $04, $04, $05, $07, $07, $05, $03
0d4ba     04 05 04 02 
0d4be     FF FD FC FD 
0d4c2     FE FE 00 03 
0d4c6     06 08 0C 13 | 	byte	$04, $05, $04, $02, $ff, $fd, $fc, $fd, $fe, $fe, $00, $03, $06, $08, $0c, $13
0d4ca     18 1B 19 16 
0d4ce     14 11 0A 02 
0d4d2     FF 01 06 0E 
0d4d6     15 18 18 18 | 	byte	$18, $1b, $19, $16, $14, $11, $0a, $02, $ff, $01, $06, $0e, $15, $18, $18, $18
0d4da     1A 1B 1C 1F 
0d4de     22 23 23 23 
0d4e2     25 25 22 1D 
0d4e6     1A 16 13 10 | 	byte	$1a, $1b, $1c, $1f, $22, $23, $23, $23, $25, $25, $22, $1d, $1a, $16, $13, $10
0d4ea     0A 01 F4 EB 
0d4ee     E6 E1 E2 EB 
0d4f2     F5 F8 F3 EE 
0d4f6     ED ED E9 E4 | 	byte	$0a, $01, $f4, $eb, $e6, $e1, $e2, $eb, $f5, $f8, $f3, $ee, $ed, $ed, $e9, $e4
0d4fa     E4 E6 E8 E9 
0d4fe     EA E9 E9 E9 
0d502     E9 EB EE F0 
0d506     EF EE EE EF | 	byte	$e4, $e6, $e8, $e9, $ea, $e9, $e9, $e9, $e9, $eb, $ee, $f0, $ef, $ee, $ee, $ef
0d50a     EF F3 F6 F7 
0d50e     F8 FB 00 04 
0d512     04 FF FA F5 
0d516     F2 F2 F6 FA | 	byte	$ef, $f3, $f6, $f7, $f8, $fb, $00, $04, $04, $ff, $fa, $f5, $f2, $f2, $f6, $fa
0d51a     FB FA FA F8 
0d51e     F5 F3 F0 EE 
0d522     EE EE EE EF 
0d526     EE ED EE F0 | 	byte	$fb, $fa, $fa, $f8, $f5, $f3, $f0, $ee, $ee, $ee, $ee, $ef, $ee, $ed, $ee, $f0
0d52a     F0 F0 F9 04 
0d52e     0B 0C 0A 07 
0d532     05 07 08 09 
0d536     09 08 08 08 | 	byte	$f0, $f0, $f9, $04, $0b, $0c, $0a, $07, $05, $07, $08, $09, $09, $08, $08, $08
0d53a     08 07 05 03 
0d53e     03 04 04 04 
0d542     04 05 07 0B 
0d546     0C 0F 16 1D | 	byte	$08, $07, $05, $03, $03, $04, $04, $04, $04, $05, $07, $0b, $0c, $0f, $16, $1d
0d54a     1F 1C 1A 12 
0d54e     08 00 FF 03 
0d552     06 09 0E 16 
0d556     1C 1D 1C 1B | 	byte	$1f, $1c, $1a, $12, $08, $00, $ff, $03, $06, $09, $0e, $16, $1c, $1d, $1c, $1b
0d55a     1A 1A 1C 1F 
0d55e     22 24 24 24 
0d562     26 25 22 1D 
0d566     17 12 0E 07 | 	byte	$1a, $1a, $1c, $1f, $22, $24, $24, $24, $26, $25, $22, $1d, $17, $12, $0e, $07
0d56a     FC F5 F1 EC 
0d56e     E5 E2 E5 EE 
0d572     F7 FA F8 F3 
0d576     EC E6 E5 E8 | 	byte	$fc, $f5, $f1, $ec, $e5, $e2, $e5, $ee, $f7, $fa, $f8, $f3, $ec, $e6, $e5, $e8
0d57a     EB ED EF F0 
0d57e     F0 F2 F2 F1 
0d582     F2 F4 F6 F7 
0d586     F7 F6 F5 F4 | 	byte	$eb, $ed, $ef, $f0, $f0, $f2, $f2, $f1, $f2, $f4, $f6, $f7, $f7, $f6, $f5, $f4
0d58a     F5 F7 FA FC 
0d58e     FD 00 02 FF 
0d592     F9 F3 F2 F5 
0d596     F7 F9 FB F9 | 	byte	$f5, $f7, $fa, $fc, $fd, $00, $02, $ff, $f9, $f3, $f2, $f5, $f7, $f9, $fb, $f9
0d59a     F7 F6 F5 F4 
0d59e     F3 F1 EE ED 
0d5a2     EC EB EC ED 
0d5a6     EC EA EA EA | 	byte	$f7, $f6, $f5, $f4, $f3, $f1, $ee, $ed, $ec, $eb, $ec, $ed, $ec, $ea, $ea, $ea
0d5aa     EB F3 FE 07 
0d5ae     07 06 06 05 
0d5b2     05 07 0A 0B 
0d5b6     0A 09 0B 0C | 	byte	$eb, $f3, $fe, $07, $07, $06, $06, $05, $05, $07, $0a, $0b, $0a, $09, $0b, $0c
0d5ba     0B 0A 08 06 
0d5be     06 08 0A 09 
0d5c2     09 0A 0C 0E 
0d5c6     10 17 1D 20 | 	byte	$0b, $0a, $08, $06, $06, $08, $0a, $09, $09, $0a, $0c, $0e, $10, $17, $1d, $20
0d5ca     1E 16 0A 02 
0d5ce     FF 00 04 09 
0d5d2     0C 10 15 19 
0d5d6     1D 1E 1E 1C | 	byte	$1e, $16, $0a, $02, $ff, $00, $04, $09, $0c, $10, $15, $19, $1d, $1e, $1e, $1c
0d5da     1B 1D 1F 22 
0d5de     25 26 26 25 
0d5e2     25 22 1F 18 
0d5e6     12 09 FF F8 | 	byte	$1b, $1d, $1f, $22, $25, $26, $26, $25, $25, $22, $1f, $18, $12, $09, $ff, $f8
0d5ea     F5 F1 ED E7 
0d5ee     E3 E3 E9 F3 
0d5f2     F9 F9 F2 E9 
0d5f6     E5 E5 E5 E6 | 	byte	$f5, $f1, $ed, $e7, $e3, $e3, $e9, $f3, $f9, $f9, $f2, $e9, $e5, $e5, $e5, $e6
0d5fa     E9 EE F1 F3 
0d5fe     F5 F5 F5 F4 
0d602     F5 F6 F8 FB 
0d606     FB F8 F5 F4 | 	byte	$e9, $ee, $f1, $f3, $f5, $f5, $f5, $f4, $f5, $f6, $f8, $fb, $fb, $f8, $f5, $f4
0d60a     F5 F7 FB FD 
0d60e     00 FF F9 F1 
0d612     F0 F3 F7 F8 
0d616     F9 FA F8 F6 | 	byte	$f5, $f7, $fb, $fd, $00, $ff, $f9, $f1, $f0, $f3, $f7, $f8, $f9, $fa, $f8, $f6
0d61a     F4 F3 F2 F1 
0d61e     F1 F0 F0 F0 
0d622     EE EC EB EA 
0d626     EA E9 E9 E9 | 	byte	$f4, $f3, $f2, $f1, $f1, $f0, $f0, $f0, $ee, $ec, $eb, $ea, $ea, $e9, $e9, $e9
0d62a     EF FA 03 06 
0d62e     07 07 07 07 
0d632     07 09 0A 0D 
0d636     0E 0E 0E 0F | 	byte	$ef, $fa, $03, $06, $07, $07, $07, $07, $07, $09, $0a, $0d, $0e, $0e, $0e, $0f
0d63a     0E 0D 0B 09 
0d63e     09 0C 0D 0C 
0d642     0C 0C 0C 0D 
0d646     13 1A 1B 13 | 	byte	$0e, $0d, $0b, $09, $09, $0c, $0d, $0c, $0c, $0c, $0c, $0d, $13, $1a, $1b, $13
0d64a     08 02 01 02 
0d64e     02 03 05 08 
0d652     0C 14 1B 1E 
0d656     1E 1F 1F 1E | 	byte	$08, $02, $01, $02, $02, $03, $05, $08, $0c, $14, $1b, $1e, $1e, $1f, $1f, $1e
0d65a     1D 1F 22 24 
0d65e     25 25 27 26 
0d662     24 1F 17 0B 
0d666     01 FA F8 F7 | 	byte	$1d, $1f, $22, $24, $25, $25, $27, $26, $24, $1f, $17, $0b, $01, $fa, $f8, $f7
0d66a     F4 EF EB E8 
0d66e     E8 EC F3 F8 
0d672     F4 EF EB EA 
0d676     E9 E9 E9 EB | 	byte	$f4, $ef, $eb, $e8, $e8, $ec, $f3, $f8, $f4, $ef, $eb, $ea, $e9, $e9, $e9, $eb
0d67a     EF F3 F7 FB 
0d67e     FB F9 F6 F6 
0d682     F7 F9 F9 FA 
0d686     F9 F7 F6 F6 | 	byte	$ef, $f3, $f7, $fb, $fb, $f9, $f6, $f6, $f7, $f9, $f9, $fa, $f9, $f7, $f6, $f6
0d68a     F7 FA FB F7 
0d68e     F0 EA E8 EA 
0d692     ED F1 F4 F6 
0d696     F6 F4 F1 EF | 	byte	$f7, $fa, $fb, $f7, $f0, $ea, $e8, $ea, $ed, $f1, $f4, $f6, $f6, $f4, $f1, $ef
0d69a     EE ED EC EC 
0d69e     ED F1 F3 F0 
0d6a2     EC E9 E8 E8 
0d6a6     E8 E9 E9 EC | 	byte	$ee, $ed, $ec, $ec, $ed, $f1, $f3, $f0, $ec, $e9, $e8, $e8, $e8, $e9, $e9, $ec
0d6aa     F6 FD 02 04 
0d6ae     05 07 07 07 
0d6b2     09 0B 0E 10 
0d6b6     11 11 10 0F | 	byte	$f6, $fd, $02, $04, $05, $07, $07, $07, $09, $0b, $0e, $10, $11, $11, $10, $0f
0d6ba     0E 0E 0F 11 
0d6be     11 10 0F 0E 
0d6c2     0D 0B 09 0B 
0d6c6     0F 0E 08 04 | 	byte	$0e, $0e, $0f, $11, $11, $10, $0f, $0e, $0d, $0b, $09, $0b, $0f, $0e, $08, $04
0d6ca     03 02 02 01 
0d6ce     03 05 08 0A 
0d6d2     0E 13 1A 1D 
0d6d6     1D 1D 20 21 | 	byte	$03, $02, $02, $01, $03, $05, $08, $0a, $0e, $13, $1a, $1d, $1d, $1d, $20, $21
0d6da     20 21 23 24 
0d6de     23 23 24 22 
0d6e2     1D 14 0A 03 
0d6e6     FE FA F8 F5 | 	byte	$20, $21, $23, $24, $23, $23, $24, $22, $1d, $14, $0a, $03, $fe, $fa, $f8, $f5
0d6ea     F2 EE EB EA 
0d6ee     ED F3 F7 F2 
0d6f2     EE EF F2 F2 
0d6f6     F0 EF EE F1 | 	byte	$f2, $ee, $eb, $ea, $ed, $f3, $f7, $f2, $ee, $ef, $f2, $f2, $f0, $ef, $ee, $f1
0d6fa     F4 F9 FE 01 
0d6fe     01 FF FB FA 
0d702     FC FE FE FD 
0d706     FB FA F9 FA | 	byte	$f4, $f9, $fe, $01, $01, $ff, $fb, $fa, $fc, $fe, $fe, $fd, $fb, $fa, $f9, $fa
0d70a     FB F9 F5 EE 
0d70e     EA E9 EB EE 
0d712     EF F0 F1 F3 
0d716     F5 F4 F4 F2 | 	byte	$fb, $f9, $f5, $ee, $ea, $e9, $eb, $ee, $ef, $f0, $f1, $f3, $f5, $f4, $f4, $f2
0d71a     F0 EF EF EE 
0d71e     F0 F3 F3 F0 
0d722     EC EB E9 EA 
0d726     EC EB EB F2 | 	byte	$f0, $ef, $ef, $ee, $f0, $f3, $f3, $f0, $ec, $eb, $e9, $ea, $ec, $eb, $eb, $f2
0d72a     FA 00 02 04 
0d72e     06 08 08 08 
0d732     0A 0F 12 12 
0d736     11 11 0F 0E | 	byte	$fa, $00, $02, $04, $06, $08, $08, $08, $0a, $0f, $12, $12, $11, $11, $0f, $0e
0d73a     0E 0D 0D 0E 
0d73e     0E 0D 0B 09 
0d742     08 06 05 04 
0d746     00 FE FF 01 | 	byte	$0e, $0d, $0d, $0e, $0e, $0d, $0b, $09, $08, $06, $05, $04, $00, $fe, $ff, $01
0d74a     01 03 02 03 
0d74e     06 09 0A 0A 
0d752     0C 12 18 1C 
0d756     1E 1F 20 21 | 	byte	$01, $03, $02, $03, $06, $09, $0a, $0a, $0c, $12, $18, $1c, $1e, $1f, $20, $21
0d75a     21 24 25 24 
0d75e     23 23 21 1B 
0d762     13 0C 07 02 
0d766     FD FA F7 F4 | 	byte	$21, $24, $25, $24, $23, $23, $21, $1b, $13, $0c, $07, $02, $fd, $fa, $f7, $f4
0d76a     F3 F1 ED ED 
0d76e     F1 F6 F6 F3 
0d772     F3 F4 F4 F3 
0d776     F2 F1 F2 F5 | 	byte	$f3, $f1, $ed, $ed, $f1, $f6, $f6, $f3, $f3, $f4, $f4, $f3, $f2, $f1, $f2, $f5
0d77a     F8 FB FF 02 
0d77e     03 01 00 FF 
0d782     00 00 00 FE 
0d786     FC FB FA FA | 	byte	$f8, $fb, $ff, $02, $03, $01, $00, $ff, $00, $00, $00, $fe, $fc, $fb, $fa, $fa
0d78a     F7 F1 EB E8 
0d78e     E7 E9 EA EB 
0d792     EA EA ED F0 
0d796     F2 F3 F3 F2 | 	byte	$f7, $f1, $eb, $e8, $e7, $e9, $ea, $eb, $ea, $ea, $ed, $f0, $f2, $f3, $f3, $f2
0d79a     F2 F2 F1 F1 
0d79e     F4 F7 F7 F4 
0d7a2     F1 F0 F0 F1 
0d7a6     F1 F3 F8 FC | 	byte	$f2, $f2, $f1, $f1, $f4, $f7, $f7, $f4, $f1, $f0, $f0, $f1, $f1, $f3, $f8, $fc
0d7aa     00 02 02 02 
0d7ae     02 04 07 09 
0d7b2     0C 0C 0B 09 
0d7b6     08 08 08 08 | 	byte	$00, $02, $02, $02, $02, $04, $07, $09, $0c, $0c, $0b, $09, $08, $08, $08, $08
0d7ba     08 08 07 07 
0d7be     07 08 07 05 
0d7c2     03 FF FC FA 
0d7c6     FB FC FF 01 | 	byte	$08, $08, $07, $07, $07, $08, $07, $05, $03, $ff, $fc, $fa, $fb, $fc, $ff, $01
0d7ca     02 03 02 03 
0d7ce     05 05 04 03 
0d7d2     04 0A 11 15 
0d7d6     16 15 15 18 | 	byte	$02, $03, $02, $03, $05, $05, $04, $03, $04, $0a, $11, $15, $16, $15, $15, $18
0d7da     1B 1D 1C 1B 
0d7de     1A 18 14 10 
0d7e2     0C 07 03 FE 
0d7e6     FB FC FB F8 | 	byte	$1b, $1d, $1c, $1b, $1a, $18, $14, $10, $0c, $07, $03, $fe, $fb, $fc, $fb, $f8
0d7ea     F6 F4 F3 F4 
0d7ee     F6 F8 F8 F8 
0d7f2     F7 F6 F5 F5 
0d7f6     F6 F7 F7 F8 | 	byte	$f6, $f4, $f3, $f4, $f6, $f8, $f8, $f8, $f7, $f6, $f5, $f5, $f6, $f7, $f7, $f8
0d7fa     FC FF 00 01 
0d7fe     02 03 02 01 
0d802     01 02 02 02 
0d806     01 00 00 FF | 	byte	$fc, $ff, $00, $01, $02, $03, $02, $01, $01, $02, $02, $02, $01, $00, $00, $ff
0d80a     FB F4 F0 EF 
0d80e     F0 EF EE EC 
0d812     EB EC EE F1 
0d816     F5 F7 F7 F8 | 	byte	$fb, $f4, $f0, $ef, $f0, $ef, $ee, $ec, $eb, $ec, $ee, $f1, $f5, $f7, $f7, $f8
0d81a     F7 F7 F9 FC 
0d81e     FD F9 F8 F9 
0d822     F9 F7 F5 F4 
0d826     F5 F9 FE 01 | 	byte	$f7, $f7, $f9, $fc, $fd, $f9, $f8, $f9, $f9, $f7, $f5, $f4, $f5, $f9, $fe, $01
0d82a     03 02 00 01 
0d82e     04 07 08 08 
0d832     07 03 FF FE 
0d836     FF 01 03 03 | 	byte	$03, $02, $00, $01, $04, $07, $08, $08, $07, $03, $ff, $fe, $ff, $01, $03, $03
0d83a     00 FE FD FD 
0d83e     FF FE FC F9 
0d842     F8 F8 F8 F9 
0d846     F9 FA FB FD | 	byte	$00, $fe, $fd, $fd, $ff, $fe, $fc, $f9, $f8, $f8, $f8, $f9, $f9, $fa, $fb, $fd
0d84a     FF 00 FF FF 
0d84e     00 00 00 00 
0d852     04 08 0D 0F 
0d856     10 11 11 14 | 	byte	$ff, $00, $ff, $ff, $00, $00, $00, $00, $04, $08, $0d, $0f, $10, $11, $11, $14
0d85a     17 18 18 16 
0d85e     14 11 0D 08 
0d862     05 00 FC FA 
0d866     F9 F7 F7 F6 | 	byte	$17, $18, $18, $16, $14, $11, $0d, $08, $05, $00, $fc, $fa, $f9, $f7, $f7, $f6
0d86a     F6 F6 F6 F6 
0d86e     F7 F8 F9 F9 
0d872     F9 F9 F9 FA 
0d876     FB FB FB FD | 	byte	$f6, $f6, $f6, $f6, $f7, $f8, $f9, $f9, $f9, $f9, $f9, $fa, $fb, $fb, $fb, $fd
0d87a     00 02 02 01 
0d87e     02 04 03 02 
0d882     02 03 03 01 
0d886     00 FF FF FE | 	byte	$00, $02, $02, $01, $02, $04, $03, $02, $02, $03, $03, $01, $00, $ff, $ff, $fe
0d88a     FB F8 F5 F3 
0d88e     F0 EC E8 E7 
0d892     E8 EB ED F1 
0d896     F7 FB FD FD | 	byte	$fb, $f8, $f5, $f3, $f0, $ec, $e8, $e7, $e8, $eb, $ed, $f1, $f7, $fb, $fd, $fd
0d89a     FD FD FF 01 
0d89e     01 01 01 01 
0d8a2     01 01 01 00 
0d8a6     03 05 07 09 | 	byte	$fd, $fd, $ff, $01, $01, $01, $01, $01, $01, $01, $01, $00, $03, $05, $07, $09
0d8aa     09 08 08 08 
0d8ae     09 09 08 06 
0d8b2     02 FF FE 00 
0d8b6     01 03 03 03 | 	byte	$09, $08, $08, $08, $09, $09, $08, $06, $02, $ff, $fe, $00, $01, $03, $03, $03
0d8ba     02 02 02 00 
0d8be     FD FC FC FD 
0d8c2     FD FE FF FE 
0d8c6     FC FB FA FC | 	byte	$02, $02, $02, $00, $fd, $fc, $fc, $fd, $fd, $fe, $ff, $fe, $fc, $fb, $fa, $fc
0d8ca     00 00 FD FC 
0d8ce     FE 01 03 04 
0d8d2     07 0B 0C 0D 
0d8d6     0F 12 17 19 | 	byte	$00, $00, $fd, $fc, $fe, $01, $03, $04, $07, $0b, $0c, $0d, $0f, $12, $17, $19
0d8da     19 19 18 16 
0d8de     14 11 0B 06 
0d8e2     02 00 FE FD 
0d8e6     FC FB FA FA | 	byte	$19, $19, $18, $16, $14, $11, $0b, $06, $02, $00, $fe, $fd, $fc, $fb, $fa, $fa
0d8ea     FC FC FC FA 
0d8ee     F9 FB FE 01 
0d8f2     03 03 03 02 
0d8f6     02 04 05 05 | 	byte	$fc, $fc, $fc, $fa, $f9, $fb, $fe, $01, $03, $03, $03, $02, $02, $04, $05, $05
0d8fa     06 07 07 07 
0d8fe     08 09 09 09 
0d902     08 08 07 05 
0d906     01 00 FE FD | 	byte	$06, $07, $07, $07, $08, $09, $09, $09, $08, $08, $07, $05, $01, $00, $fe, $fd
0d90a     FD FC F9 F7 
0d90e     F6 F4 EE EB 
0d912     EA EA EA ED 
0d916     F3 FA 00 01 | 	byte	$fd, $fc, $f9, $f7, $f6, $f4, $ee, $eb, $ea, $ea, $ea, $ed, $f3, $fa, $00, $01
0d91a     FE FD FF 01 
0d91e     02 02 02 04 
0d922     05 05 05 06 
0d926     07 07 09 0A | 	byte	$fe, $fd, $ff, $01, $02, $02, $02, $04, $05, $05, $05, $06, $07, $07, $09, $0a
0d92a     0B 0B 0B 0A 
0d92e     08 06 05 06 
0d932     07 06 06 07 
0d936     08 08 09 0A | 	byte	$0b, $0b, $0b, $0a, $08, $06, $05, $06, $07, $06, $06, $07, $08, $08, $09, $0a
0d93a     0A 08 04 02 
0d93e     02 03 02 04 
0d942     05 04 02 00 
0d946     FD FD FD FC | 	byte	$0a, $08, $04, $02, $02, $03, $02, $04, $05, $04, $02, $00, $fd, $fd, $fd, $fc
0d94a     FC FB FB FD 
0d94e     01 03 03 04 
0d952     05 06 06 09 
0d956     0C 0F 13 14 | 	byte	$fc, $fb, $fb, $fd, $01, $03, $03, $04, $05, $06, $06, $09, $0c, $0f, $13, $14
0d95a     14 13 10 0F 
0d95e     0C 09 04 FF 
0d962     FD FD FD FC 
0d966     FB FA F9 F9 | 	byte	$14, $13, $10, $0f, $0c, $09, $04, $ff, $fd, $fd, $fd, $fc, $fb, $fa, $f9, $f9
0d96a     F8 F8 F7 F7 
0d96e     FA FD FE FF 
0d972     00 01 04 06 
0d976     08 09 09 07 | 	byte	$f8, $f8, $f7, $f7, $fa, $fd, $fe, $ff, $00, $01, $04, $06, $08, $09, $09, $07
0d97a     06 08 09 0A 
0d97e     0A 09 08 08 
0d982     08 07 04 03 
0d986     01 FE FC FB | 	byte	$06, $08, $09, $0a, $0a, $09, $08, $08, $08, $07, $04, $03, $01, $fe, $fc, $fb
0d98a     FA F8 F7 F6 
0d98e     F7 F5 F2 EE 
0d992     EB E9 EA EC 
0d996     F1 F7 FB FB | 	byte	$fa, $f8, $f7, $f6, $f7, $f5, $f2, $ee, $eb, $e9, $ea, $ec, $f1, $f7, $fb, $fb
0d99a     FA F9 FA FC 
0d99e     FF 01 02 04 
0d9a2     05 05 06 05 
0d9a6     04 04 07 0B | 	byte	$fa, $f9, $fa, $fc, $ff, $01, $02, $04, $05, $05, $06, $05, $04, $04, $07, $0b
0d9aa     0C 0B 09 06 
0d9ae     04 05 06 07 
0d9b2     09 0B 0B 0B 
0d9b6     0B 0C 0E 0E | 	byte	$0c, $0b, $09, $06, $04, $05, $06, $07, $09, $0b, $0b, $0b, $0b, $0c, $0e, $0e
0d9ba     0C 09 06 05 
0d9be     05 05 06 08 
0d9c2     08 08 05 02 
0d9c6     00 FF FE FB | 	byte	$0c, $09, $06, $05, $05, $05, $06, $08, $08, $08, $05, $02, $00, $ff, $fe, $fb
0d9ca     FB FD FD FC 
0d9ce     FD FE FF 00 
0d9d2     00 01 02 04 
0d9d6     06 08 0A 0C | 	byte	$fb, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02, $04, $06, $08, $0a, $0c
0d9da     0F 0E 0B 07 
0d9de     04 00 FD FC 
0d9e2     FB FC FD FB 
0d9e6     F9 F6 F4 F3 | 	byte	$0f, $0e, $0b, $07, $04, $00, $fd, $fc, $fb, $fc, $fd, $fb, $f9, $f6, $f4, $f3
0d9ea     F4 F5 F6 F9 
0d9ee     FC FD FD FE 
0d9f2     00 03 06 09 
0d9f6     0A 0B 0B 0B | 	byte	$f4, $f5, $f6, $f9, $fc, $fd, $fd, $fe, $00, $03, $06, $09, $0a, $0b, $0b, $0b
0d9fa     0B 0B 0C 0B 
0d9fe     09 07 06 06 
0da02     06 05 02 00 
0da06     FF FD FC F9 | 	byte	$0b, $0b, $0c, $0b, $09, $07, $06, $06, $06, $05, $02, $00, $ff, $fd, $fc, $f9
0da0a     F8 F7 F7 F8 
0da0e     F7 F5 F3 F1 
0da12     F1 F2 F3 F6 
0da16     F6 F6 F6 F6 | 	byte	$f8, $f7, $f7, $f8, $f7, $f5, $f3, $f1, $f1, $f2, $f3, $f6, $f6, $f6, $f6, $f6
0da1a     F6 F6 F7 F9 
0da1e     FC FF 01 03 
0da22     03 01 00 00 
0da26     00 03 06 08 | 	byte	$f6, $f6, $f7, $f9, $fc, $ff, $01, $03, $03, $01, $00, $00, $00, $03, $06, $08
0da2a     07 04 02 00 
0da2e     00 02 04 05 
0da32     07 09 0A 09 
0da36     09 0A 0B 09 | 	byte	$07, $04, $02, $00, $00, $02, $04, $05, $07, $09, $0a, $09, $09, $0a, $0b, $09
0da3a     06 05 04 03 
0da3e     02 01 01 02 
0da42     03 04 04 03 
0da46     00 FD FC FE | 	byte	$06, $05, $04, $03, $02, $01, $01, $02, $03, $04, $04, $03, $00, $fd, $fc, $fe
0da4a     FE FE FD FB 
0da4e     F9 F9 FB FD 
0da52     FD FE FF FF 
0da56     01 04 07 09 | 	byte	$fe, $fe, $fd, $fb, $f9, $f9, $fb, $fd, $fd, $fe, $ff, $ff, $01, $04, $07, $09
0da5a     08 07 03 00 
0da5e     FF FF FF FF 
0da62     FE FD FD FB 
0da66     F9 F6 F4 F4 | 	byte	$08, $07, $03, $00, $ff, $ff, $ff, $ff, $fe, $fd, $fd, $fb, $f9, $f6, $f4, $f4
0da6a     F6 F7 F9 FC 
0da6e     FE FE FD FE 
0da72     01 04 06 08 
0da76     0A 0D 0E 0F | 	byte	$f6, $f7, $f9, $fc, $fe, $fe, $fd, $fe, $01, $04, $06, $08, $0a, $0d, $0e, $0f
0da7a     0E 0D 0B 0A 
0da7e     08 06 05 05 
0da82     04 01 00 00 
0da86     FF FD FC FB | 	byte	$0e, $0d, $0b, $0a, $08, $06, $05, $05, $04, $01, $00, $00, $ff, $fd, $fc, $fb
0da8a     F9 F8 F8 F9 
0da8e     F8 F8 F8 F8 
0da92     F9 FA FA FB 
0da96     F9 F8 F7 F8 | 	byte	$f9, $f8, $f8, $f9, $f8, $f8, $f8, $f8, $f9, $fa, $fa, $fb, $f9, $f8, $f7, $f8
0da9a     F9 F9 F8 FA 
0da9e     FE 01 02 00 
0daa2     00 00 FF FE 
0daa6     FF 02 04 04 | 	byte	$f9, $f9, $f8, $fa, $fe, $01, $02, $00, $00, $00, $ff, $fe, $ff, $02, $04, $04
0daaa     02 FF FE FE 
0daae     FF FF 00 03 
0dab2     07 0A 0A 08 
0dab6     06 05 04 03 | 	byte	$02, $ff, $fe, $fe, $ff, $ff, $00, $03, $07, $0a, $0a, $08, $06, $05, $04, $03
0daba     03 02 01 00 
0dabe     FF FF FF 00 
0dac2     00 01 01 00 
0dac6     FE FD FE FD | 	byte	$03, $02, $01, $00, $ff, $ff, $ff, $00, $00, $01, $01, $00, $fe, $fd, $fe, $fd
0daca     FC FB F9 F6 
0dace     F5 F6 F6 F8 
0dad2     FB FD FE 00 
0dad6     01 02 03 02 | 	byte	$fc, $fb, $f9, $f6, $f5, $f6, $f6, $f8, $fb, $fd, $fe, $00, $01, $02, $03, $02
0dada     01 02 02 02 
0dade     02 03 02 01 
0dae2     00 FE FC FA 
0dae6     F9 F8 F8 F9 | 	byte	$01, $02, $02, $02, $02, $03, $02, $01, $00, $fe, $fc, $fa, $f9, $f8, $f8, $f9
0daea     F9 F9 FB FE 
0daee     FF FF FE 00 
0daf2     03 06 09 0B 
0daf6     0D 0D 0D 0D | 	byte	$f9, $f9, $fb, $fe, $ff, $ff, $fe, $00, $03, $06, $09, $0b, $0d, $0d, $0d, $0d
0dafa     0C 0A 08 07 
0dafe     06 04 03 02 
0db02     01 00 FF FF 
0db06     FE FD FB F9 | 	byte	$0c, $0a, $08, $07, $06, $04, $03, $02, $01, $00, $ff, $ff, $fe, $fd, $fb, $f9
0db0a     F7 F7 F8 F9 
0db0e     FB FB FB FC 
0db12     FD FE FD FB 
0db16     F9 F8 FA FD | 	byte	$f7, $f7, $f8, $f9, $fb, $fb, $fb, $fc, $fd, $fe, $fd, $fb, $f9, $f8, $fa, $fd
0db1a     FC FC FD FE 
0db1e     00 00 FF FF 
0db22     FF FD FC FC 
0db26     FD FF FF FF | 	byte	$fc, $fc, $fd, $fe, $00, $00, $ff, $ff, $ff, $fd, $fc, $fc, $fd, $ff, $ff, $ff
0db2a     FD FC FC FD 
0db2e     FE 00 01 04 
0db32     07 08 07 04 
0db36     03 01 01 01 | 	byte	$fd, $fc, $fc, $fd, $fe, $00, $01, $04, $07, $08, $07, $04, $03, $01, $01, $01
0db3a     01 02 01 00 
0db3e     FE FD FD FD 
0db42     FD FF 00 01 
0db46     01 FF FE FD | 	byte	$01, $02, $01, $00, $fe, $fd, $fd, $fd, $fd, $ff, $00, $01, $01, $ff, $fe, $fd
0db4a     FB FB FB FA 
0db4e     F8 F8 F8 F9 
0db52     FC FE 00 01 
0db56     FF FE FE FF | 	byte	$fb, $fb, $fb, $fa, $f8, $f8, $f8, $f9, $fc, $fe, $00, $01, $ff, $fe, $fe, $ff
0db5a     00 03 06 07 
0db5e     06 05 04 03 
0db62     01 FF FD FC 
0db66     FC FC FD FD | 	byte	$00, $03, $06, $07, $06, $05, $04, $03, $01, $ff, $fd, $fc, $fc, $fc, $fd, $fd
0db6a     FE FF 00 00 
0db6e     FF FF 00 01 
0db72     03 05 07 09 
0db76     08 07 07 08 | 	byte	$fe, $ff, $00, $00, $ff, $ff, $00, $01, $03, $05, $07, $09, $08, $07, $07, $08
0db7a     08 05 02 01 
0db7e     01 01 01 01 
0db82     FE FD FD FC 
0db86     FB F9 F8 F6 | 	byte	$08, $05, $02, $01, $01, $01, $01, $01, $fe, $fd, $fd, $fc, $fb, $f9, $f8, $f6
0db8a     F5 F6 F8 FA 
0db8e     FB FD FD FE 
0db92     FE FF FE FD 
0db96     FC FC FE FF | 	byte	$f5, $f6, $f8, $fa, $fb, $fd, $fd, $fe, $fe, $ff, $fe, $fd, $fc, $fc, $fe, $ff
0db9a     FF 00 01 01 
0db9e     01 01 02 01 
0dba2     FF FD FD FE 
0dba6     FE FF FF FE | 	byte	$ff, $00, $01, $01, $01, $01, $02, $01, $ff, $fd, $fd, $fe, $fe, $ff, $ff, $fe
0dbaa     FE FC FC FC 
0dbae     FF 02 03 05 
0dbb2     05 05 05 04 
0dbb6     02 01 02 03 | 	byte	$fe, $fc, $fc, $fc, $ff, $02, $03, $05, $05, $05, $05, $04, $02, $01, $02, $03
0dbba     03 03 01 FF 
0dbbe     FE FE FD FD 
0dbc2     FF 02 04 05 
0dbc6     04 03 01 00 | 	byte	$03, $03, $01, $ff, $fe, $fe, $fd, $fd, $ff, $02, $04, $05, $04, $03, $01, $00
0dbca     FF FD FC FB 
0dbce     FA FA FA FB 
0dbd2     FE 01 01 00 
0dbd6     FE FD FD FE | 	byte	$ff, $fd, $fc, $fb, $fa, $fa, $fa, $fb, $fe, $01, $01, $00, $fe, $fd, $fd, $fe
0dbda     00 03 06 08 
0dbde     09 07 05 03 
0dbe2     03 01 01 01 
0dbe6     02 03 02 02 | 	byte	$00, $03, $06, $08, $09, $07, $05, $03, $03, $01, $01, $01, $02, $03, $02, $02
0dbea     02 03 02 01 
0dbee     00 01 01 02 
0dbf2     03 04 06 06 
0dbf6     06 06 05 05 | 	byte	$02, $03, $02, $01, $00, $01, $01, $02, $03, $04, $06, $06, $06, $06, $05, $05
0dbfa     04 03 03 03 
0dbfe     03 02 00 FE 
0dc02     FD FD FD FB 
0dc06     FA FA F9 F9 | 	byte	$04, $03, $03, $03, $03, $02, $00, $fe, $fd, $fd, $fd, $fb, $fa, $fa, $f9, $f9
0dc0a     F9 F9 FA FC 
0dc0e     FD FE FF 00 
0dc12     00 00 00 FF 
0dc16     FF FF FF FF | 	byte	$f9, $f9, $fa, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff
0dc1a     FF 00 00 02 
0dc1e     02 01 00 FF 
0dc22     FE FE FE FD 
0dc26     FC FC FC FB | 	byte	$ff, $00, $00, $02, $02, $01, $00, $ff, $fe, $fe, $fe, $fd, $fc, $fc, $fc, $fb
0dc2a     FA F9 FB FC 
0dc2e     FE 00 02 02 
0dc32     01 02 01 01 
0dc36     00 00 00 01 | 	byte	$fa, $f9, $fb, $fc, $fe, $00, $02, $02, $01, $02, $01, $01, $00, $00, $00, $01
0dc3a     02 02 01 FF 
0dc3e     FC FC FB FC 
0dc42     FF 02 02 02 
0dc46     02 03 01 FE | 	byte	$02, $02, $01, $ff, $fc, $fc, $fb, $fc, $ff, $02, $02, $02, $02, $03, $01, $fe
0dc4a     FC FA FA FA 
0dc4e     FA FA FA FB 
0dc52     FC FD FC FB 
0dc56     FA FA FB FB | 	byte	$fc, $fa, $fa, $fa, $fa, $fa, $fa, $fb, $fc, $fd, $fc, $fb, $fa, $fa, $fb, $fb
0dc5a     FC FE 01 04 
0dc5e     04 02 01 01 
0dc62     01 02 03 04 
0dc66     04 04 04 03 | 	byte	$fc, $fe, $01, $04, $04, $02, $01, $01, $01, $02, $03, $04, $04, $04, $04, $03
0dc6a     02 01 00 01 
0dc6e     01 01 01 01 
0dc72     01 03 04 04 
0dc76     02 01 02 03 | 	byte	$02, $01, $00, $01, $01, $01, $01, $01, $01, $03, $04, $04, $02, $01, $02, $03
0dc7a     02 02 03 04 
0dc7e     04 03 01 FF 
0dc82     FE FE FD FD 
0dc86     FD FE FF 00 | 	byte	$02, $02, $03, $04, $04, $03, $01, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $ff, $00
0dc8a     FF FE FF FF 
0dc8e     FF FF FF FF 
0dc92     FF 00 01 01 
0dc96     01 00 FE FE | 	byte	$ff, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $01, $01, $01, $00, $fe, $fe
0dc9a     FF 00 01 01 
0dc9e     01 01 02 01 
0dca2     00 FF FE FD 
0dca6     FA F9 FA FA | 	byte	$ff, $00, $01, $01, $01, $01, $02, $01, $00, $ff, $fe, $fd, $fa, $f9, $fa, $fa
0dcaa     F9 F9 FA FC 
0dcae     FD FF 01 00 
0dcb2     00 00 01 01 
0dcb6     01 01 01 02 | 	byte	$f9, $f9, $fa, $fc, $fd, $ff, $01, $00, $00, $00, $01, $01, $01, $01, $01, $02
0dcba     02 02 01 00 
0dcbe     FF FD FC FE 
0dcc2     FF 01 01 01 
0dcc6     01 00 FF FD | 	byte	$02, $02, $01, $00, $ff, $fd, $fc, $fe, $ff, $01, $01, $01, $01, $00, $ff, $fd
0dcca     FC FB FB FC 
0dcce     FD FD FC FB 
0dcd2     FA F9 F9 F9 
0dcd6     FA FA F9 FA | 	byte	$fc, $fb, $fb, $fc, $fd, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $fa, $fa, $f9, $fa
0dcda     FC FD FE FF 
0dcde     FF FE FE FE 
0dce2     00 01 02 03 
0dce6     03 03 02 02 | 	byte	$fc, $fd, $fe, $ff, $ff, $fe, $fe, $fe, $00, $01, $02, $03, $03, $03, $02, $02
0dcea     00 FF 00 00 
0dcee     01 01 01 01 
0dcf2     02 02 00 FF 
0dcf6     FF 00 01 02 | 	byte	$00, $ff, $00, $00, $01, $01, $01, $01, $02, $02, $00, $ff, $ff, $00, $01, $02
0dcfa     02 03 04 04 
0dcfe     03 01 00 FF 
0dd02     FD FD FE FF 
0dd06     01 03 04 04 | 	byte	$02, $03, $04, $04, $03, $01, $00, $ff, $fd, $fd, $fe, $ff, $01, $03, $04, $04
0dd0a     03 03 03 03 
0dd0e     02 01 02 02 
0dd12     01 01 02 02 
0dd16     FF FC FC FD | 	byte	$03, $03, $03, $03, $02, $01, $02, $02, $01, $01, $02, $02, $ff, $fc, $fc, $fd
0dd1a     FF 00 00 00 
0dd1e     01 02 02 01 
0dd22     00 FE FC FB 
0dd26     F9 F7 F7 F8 | 	byte	$ff, $00, $00, $00, $01, $02, $02, $01, $00, $fe, $fc, $fb, $f9, $f7, $f7, $f8
0dd2a     F8 F7 F9 FB 
0dd2e     FC FD FD FE 
0dd32     FF 01 02 01 
0dd36     00 01 02 02 | 	byte	$f8, $f7, $f9, $fb, $fc, $fd, $fd, $fe, $ff, $01, $02, $01, $00, $01, $02, $02
0dd3a     01 01 01 00 
0dd3e     FE FC FC FC 
0dd42     FC FE FF 00 
0dd46     FF FE FE FD | 	byte	$01, $01, $01, $00, $fe, $fc, $fc, $fc, $fc, $fe, $ff, $00, $ff, $fe, $fe, $fd
0dd4a     FC FD FD FF 
0dd4e     00 FF FD FB 
0dd52     FB FB FC FC 
0dd56     FD FD FD FC | 	byte	$fc, $fd, $fd, $ff, $00, $ff, $fd, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fd, $fc
0dd5a     FB FB FC FC 
0dd5e     FD FD FD FE 
0dd62     00 03 03 02 
0dd66     03 04 06 05 | 	byte	$fb, $fb, $fc, $fc, $fd, $fd, $fd, $fe, $00, $03, $03, $02, $03, $04, $06, $05
0dd6a     04 03 03 03 
0dd6e     03 04 03 01 
0dd72     FF FE FE FE 
0dd76     00 02 03 02 | 	byte	$04, $03, $03, $03, $03, $04, $03, $01, $ff, $fe, $fe, $fe, $00, $02, $03, $02
0dd7a     02 03 03 03 
0dd7e     01 00 FF FE 
0dd82     FE FF 01 03 
0dd86     04 05 06 05 | 	byte	$02, $03, $03, $03, $01, $00, $ff, $fe, $fe, $ff, $01, $03, $04, $05, $06, $05
0dd8a     05 04 02 02 
0dd8e     02 02 02 01 
0dd92     00 00 FF FD 
0dd96     FB FB FC FE | 	byte	$05, $04, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $fd, $fb, $fb, $fc, $fe
0dd9a     FF 00 01 02 
0dd9e     02 02 02 02 
0dda2     00 FE FC FB 
0dda6     FA FA F9 F9 | 	byte	$ff, $00, $01, $02, $02, $02, $02, $02, $00, $fe, $fc, $fb, $fa, $fa, $f9, $f9
0ddaa     FA FB FC FD 
0ddae     FE FE FE FF 
0ddb2     01 04 04 03 
0ddb6     02 02 03 03 | 	byte	$fa, $fb, $fc, $fd, $fe, $fe, $fe, $ff, $01, $04, $04, $03, $02, $02, $03, $03
0ddba     03 03 01 FF 
0ddbe     FC FB FB FB 
0ddc2     FB FB FB F9 
0ddc6     F8 F8 F8 F9 | 	byte	$03, $03, $01, $ff, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $f9, $f8, $f8, $f8, $f9
0ddca     FA FB FB FC 
0ddce     FE FD FC FC 
0ddd2     FC FD FE FE 
0ddd6     FD FD FD FB | 	byte	$fa, $fb, $fb, $fc, $fe, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $fd, $fd, $fd, $fb
0ddda     F9 F8 F8 FA 
0ddde     FD FE FF 00 
0dde2     01 02 02 04 
0dde6     05 06 06 06 | 	byte	$f9, $f8, $f8, $fa, $fd, $fe, $ff, $00, $01, $02, $02, $04, $05, $06, $06, $06
0ddea     06 05 06 06 
0ddee     05 03 02 02 
0ddf2     01 01 01 02 
0ddf6     03 04 03 02 | 	byte	$06, $05, $06, $06, $05, $03, $02, $02, $01, $01, $01, $02, $03, $04, $03, $02
0ddfa     02 02 02 01 
0ddfe     00 00 00 01 
0de02     01 02 04 05 
0de06     06 05 04 05 | 	byte	$02, $02, $02, $01, $00, $00, $00, $01, $01, $02, $04, $05, $06, $05, $04, $05
0de0a     05 04 02 01 
0de0e     00 01 01 FF 
0de12     FD FB FA F9 
0de16     F9 FB FD FE | 	byte	$05, $04, $02, $01, $00, $01, $01, $ff, $fd, $fb, $fa, $f9, $f9, $fb, $fd, $fe
0de1a     FD FD FE FF 
0de1e     00 01 01 00 
0de22     FF FE FE FF 
0de26     FF FE FE FE | 	byte	$fd, $fd, $fe, $ff, $00, $01, $01, $00, $ff, $fe, $fe, $ff, $ff, $fe, $fe, $fe
0de2a     FF 01 01 02 
0de2e     02 01 03 05 
0de32     06 06 05 05 
0de36     05 06 07 06 | 	byte	$ff, $01, $01, $02, $02, $01, $03, $05, $06, $06, $05, $05, $05, $06, $07, $06
0de3a     04 02 00 FF 
0de3e     FF FE FD FB 
0de42     FA F9 F8 F6 
0de46     F6 F7 F8 FA | 	byte	$04, $02, $00, $ff, $ff, $fe, $fd, $fb, $fa, $f9, $f8, $f6, $f6, $f7, $f8, $fa
0de4a     FB FC FE FF 
0de4e     FF FE FE FD 
0de52     FD FE FF FF 
0de56     FE FD FD FB | 	byte	$fb, $fc, $fe, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $ff, $ff, $fe, $fd, $fd, $fb
0de5a     F9 F7 F8 FB 
0de5e     FD FF 00 01 
0de62     02 02 03 04 
0de66     06 06 07 07 | 	byte	$f9, $f7, $f8, $fb, $fd, $ff, $00, $01, $02, $02, $03, $04, $06, $06, $07, $07
0de6a     07 06 06 05 
0de6e     03 01 00 00 
0de72     FF FF FF FF 
0de76     FF FF FF 00 | 	byte	$07, $06, $06, $05, $03, $01, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
0de7a     00 00 00 00 
0de7e     01 03 03 03 
0de82     03 04 04 03 
0de86     02 03 03 04 | 	byte	$00, $00, $00, $00, $01, $03, $03, $03, $03, $04, $04, $03, $02, $03, $03, $04
0de8a     04 03 02 02 
0de8e     01 FF FD FB 
0de92     FA FA F9 F9 
0de96     FA FC FE FE | 	byte	$04, $03, $02, $02, $01, $ff, $fd, $fb, $fa, $fa, $f9, $f9, $fa, $fc, $fe, $fe
0de9a     FD FC FC FD 
0de9e     FE FE FF 00 
0dea2     01 02 04 04 
0dea6     03 02 01 01 | 	byte	$fd, $fc, $fc, $fd, $fe, $fe, $ff, $00, $01, $02, $04, $04, $03, $02, $01, $01
0deaa     03 05 05 04 
0deae     04 05 05 06 
0deb2     07 06 07 07 
0deb6     07 07 06 05 | 	byte	$03, $05, $05, $04, $04, $05, $05, $06, $07, $06, $07, $07, $07, $07, $06, $05
0deba     03 01 01 01 
0debe     01 01 FE FB 
0dec2     FA F9 F7 F6 
0dec6     F6 F8 FA FB | 	byte	$03, $01, $01, $01, $01, $01, $fe, $fb, $fa, $f9, $f7, $f6, $f6, $f8, $fa, $fb
0deca     FD FF 00 00 
0dece     FF FF FE FF 
0ded2     00 01 01 01 
0ded6     00 FF FE FD | 	byte	$fd, $ff, $00, $00, $ff, $ff, $fe, $ff, $00, $01, $01, $01, $00, $ff, $fe, $fd
0deda     FA F9 FA FB 
0dede     FC FF 01 01 
0dee2     02 02 03 04 
0dee6     05 06 08 0A | 	byte	$fa, $f9, $fa, $fb, $fc, $ff, $01, $01, $02, $02, $03, $04, $05, $06, $08, $0a
0deea     09 06 03 02 
0deee     00 FF FE FF 
0def2     FE FD FC FC 
0def6     FC FC FD FE | 	byte	$09, $06, $03, $02, $00, $ff, $fe, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fe
0defa     FE FD FD FF 
0defe     00 02 03 04 
0df02     03 02 00 FF 
0df06     FF FF 00 01 | 	byte	$fe, $fd, $fd, $ff, $00, $02, $03, $04, $03, $02, $00, $ff, $ff, $ff, $00, $01
0df0a     01 02 02 01 
0df0e     FE FB FB FA 
0df12     FA FB FA FB 
0df16     FB FB FC FC | 	byte	$01, $02, $02, $01, $fe, $fb, $fb, $fa, $fa, $fb, $fa, $fb, $fb, $fb, $fc, $fc
0df1a     FB FB FA FA 
0df1e     FC FE FF 01 
0df22     03 05 05 04 
0df26     04 05 07 08 | 	byte	$fb, $fb, $fa, $fa, $fc, $fe, $ff, $01, $03, $05, $05, $04, $04, $05, $07, $08
0df2a     08 07 07 05 
0df2e     05 05 05 05 
0df32     05 06 06 07 
0df36     07 06 05 03 | 	byte	$08, $07, $07, $05, $05, $05, $05, $05, $05, $06, $06, $07, $07, $06, $05, $03
0df3a     02 01 01 01 
0df3e     00 FE FC FA 
0df42     F9 F9 F8 F7 
0df46     F7 F9 FB FC | 	byte	$02, $01, $01, $01, $00, $fe, $fc, $fa, $f9, $f9, $f8, $f7, $f7, $f9, $fb, $fc
0df4a     FE 00 02 01 
0df4e     01 00 00 02 
0df52     03 03 02 01 
0df56     FF FE FD FB | 	byte	$fe, $00, $02, $01, $01, $00, $00, $02, $03, $03, $02, $01, $ff, $fe, $fd, $fb
0df5a     FB FA FB FB 
0df5e     FD FF 01 01 
0df62     00 01 02 03 
0df66     05 07 09 09 | 	byte	$fb, $fa, $fb, $fb, $fd, $ff, $01, $01, $00, $01, $02, $03, $05, $07, $09, $09
0df6a     07 04 01 00 
0df6e     00 FF FE FE 
0df72     FE FE FD FC 
0df76     FC FD FE FF | 	byte	$07, $04, $01, $00, $00, $ff, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $fd, $fe, $ff
0df7a     FE FE FF 01 
0df7e     03 03 03 03 
0df82     03 03 01 00 
0df86     FF FF 00 01 | 	byte	$fe, $fe, $ff, $01, $03, $03, $03, $03, $03, $03, $01, $00, $ff, $ff, $00, $01
0df8a     01 01 FF FD 
0df8e     FC FB FB FC 
0df92     FD FC FC FB 
0df96     FA FA FA FA | 	byte	$01, $01, $ff, $fd, $fc, $fb, $fb, $fc, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fa
0df9a     F9 F9 F9 FA 
0df9e     FD 01 03 04 
0dfa2     05 05 06 06 
0dfa6     07 08 09 0A | 	byte	$f9, $f9, $f9, $fa, $fd, $01, $03, $04, $05, $05, $06, $06, $07, $08, $09, $0a
0dfaa     0A 09 07 06 
0dfae     05 04 04 03 
0dfb2     04 05 06 06 
0dfb6     05 04 03 02 | 	byte	$0a, $09, $07, $06, $05, $04, $04, $03, $04, $05, $06, $06, $05, $04, $03, $02
0dfba     00 FE FC FC 
0dfbe     FB FA F9 F9 
0dfc2     F9 F8 F7 F8 
0dfc6     FA FB FC FD | 	byte	$00, $fe, $fc, $fc, $fb, $fa, $f9, $f9, $f9, $f8, $f7, $f8, $fa, $fb, $fc, $fd
0dfca     FF 01 02 02 
0dfce     03 02 03 03 
0dfd2     04 04 03 02 
0dfd6     01 FE FC FB | 	byte	$ff, $01, $02, $02, $03, $02, $03, $03, $04, $04, $03, $02, $01, $fe, $fc, $fb
0dfda     FD FD FC FB 
0dfde     FC FD FE FE 
0dfe2     FD FE 01 02 
0dfe6     03 04 05 05 | 	byte	$fd, $fd, $fc, $fb, $fc, $fd, $fe, $fe, $fd, $fe, $01, $02, $03, $04, $05, $05
0dfea     03 00 FF FE 
0dfee     FE FE FD FC 
0dff2     FD FD FC FC 
0dff6     FB FC FD FF | 	byte	$03, $00, $ff, $fe, $fe, $fe, $fd, $fc, $fd, $fd, $fc, $fc, $fb, $fc, $fd, $ff
0dffa     FF FF 00 01 
0dffe     01 01 02 03 
0e002     04 03 01 01 
0e006     00 01 01 02 | 	byte	$ff, $ff, $00, $01, $01, $01, $02, $03, $04, $03, $01, $01, $00, $01, $01, $02
0e00a     02 00 FF FE 
0e00e     FD FD FD FD 
0e012     FC FC FB F9 
0e016     F8 F8 F8 F8 | 	byte	$02, $00, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fb, $f9, $f8, $f8, $f8, $f8
0e01a     F8 F9 FC FE 
0e01e     00 01 03 04 
0e022     05 05 06 08 
0e026     09 0B 0B 0B | 	byte	$f8, $f9, $fc, $fe, $00, $01, $03, $04, $05, $05, $06, $08, $09, $0b, $0b, $0b
0e02a     0B 09 08 06 
0e02e     05 04 03 03 
0e032     04 05 04 03 
0e036     01 00 FF FE | 	byte	$0b, $09, $08, $06, $05, $04, $03, $03, $04, $05, $04, $03, $01, $00, $ff, $fe
0e03a     FD FC FB FA 
0e03e     FA FB FC FC 
0e042     FB FB FC FE 
0e046     FF FF 00 01 | 	byte	$fd, $fc, $fb, $fa, $fa, $fb, $fc, $fc, $fb, $fb, $fc, $fe, $ff, $ff, $00, $01
0e04a     02 03 04 06 
0e04e     05 05 05 05 
0e052     06 06 05 03 
0e056     01 00 01 01 | 	byte	$02, $03, $04, $06, $05, $05, $05, $05, $06, $06, $05, $03, $01, $00, $01, $01
0e05a     00 FF FE FE 
0e05e     FE FD FD FE 
0e062     00 00 01 02 
0e066     03 03 03 02 | 	byte	$00, $ff, $fe, $fe, $fe, $fd, $fd, $fe, $00, $00, $01, $02, $03, $03, $03, $02
0e06a     01 01 00 FF 
0e06e     FE FE FE FE 
0e072     FF FF FE FE 
0e076     FD FD FE 00 | 	byte	$01, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $00
0e07a     00 FF FF FF 
0e07e     FF 00 01 03 
0e082     03 02 01 00 
0e086     00 01 01 00 | 	byte	$00, $ff, $ff, $ff, $ff, $00, $01, $03, $03, $02, $01, $00, $00, $01, $01, $00
0e08a     FD FC FC FD 
0e08e     FD FB F9 F7 
0e092     F8 F9 F8 F8 
0e096     F7 F7 F7 F9 | 	byte	$fd, $fc, $fc, $fd, $fd, $fb, $f9, $f7, $f8, $f9, $f8, $f8, $f7, $f7, $f7, $f9
0e09a     FA FC FE FF 
0e09e     00 00 00 03 
0e0a2     05 08 09 09 
0e0a6     0B 0C 0D 0C | 	byte	$fa, $fc, $fe, $ff, $00, $00, $00, $03, $05, $08, $09, $09, $0b, $0c, $0d, $0c
0e0aa     0C 0A 08 05 
0e0ae     05 04 04 05 
0e0b2     05 03 02 01 
0e0b6     00 FF FE FE | 	byte	$0c, $0a, $08, $05, $05, $04, $04, $05, $05, $03, $02, $01, $00, $ff, $fe, $fe
0e0ba     FD FB FA FA 
0e0be     FC FE FE FD 
0e0c2     FD FD FF 01 
0e0c6     01 01 01 02 | 	byte	$fd, $fb, $fa, $fa, $fc, $fe, $fe, $fd, $fd, $fd, $ff, $01, $01, $01, $01, $02
0e0ca     03 04 04 04 
0e0ce     05 06 06 05 
0e0d2     04 03 02 01 
0e0d6     01 00 01 01 | 	byte	$03, $04, $04, $04, $05, $06, $06, $05, $04, $03, $02, $01, $01, $00, $01, $01
0e0da     00 FF FE FD 
0e0de     FE FD FD FE 
0e0e2     FF FF FF 01 
0e0e6     02 01 01 01 | 	byte	$00, $ff, $fe, $fd, $fe, $fd, $fd, $fe, $ff, $ff, $ff, $01, $02, $01, $01, $01
0e0ea     02 02 01 01 
0e0ee     02 02 02 02 
0e0f2     03 03 02 01 
0e0f6     00 00 00 01 | 	byte	$02, $02, $01, $01, $02, $02, $02, $02, $03, $03, $02, $01, $00, $00, $00, $01
0e0fa     01 00 FF FF 
0e0fe     00 00 01 02 
0e102     02 03 03 03 
0e106     01 FF FD FB | 	byte	$01, $00, $ff, $ff, $00, $00, $01, $02, $02, $03, $03, $03, $01, $ff, $fd, $fb
0e10a     FA FA FA FA 
0e10e     F9 F7 F6 F5 
0e112     F5 F5 F5 F4 
0e116     F4 F4 F6 F8 | 	byte	$fa, $fa, $fa, $fa, $f9, $f7, $f6, $f5, $f5, $f5, $f5, $f4, $f4, $f4, $f6, $f8
0e11a     FA FB FC FD 
0e11e     FD FE FF 02 
0e122     05 07 08 09 
0e126     0B 0C 0B 0A | 	byte	$fa, $fb, $fc, $fd, $fd, $fe, $ff, $02, $05, $07, $08, $09, $0b, $0c, $0b, $0a
0e12a     0A 09 08 08 
0e12e     07 06 05 04 
0e132     02 00 FF FE 
0e136     FD FC FA FA | 	byte	$0a, $09, $08, $08, $07, $06, $05, $04, $02, $00, $ff, $fe, $fd, $fc, $fa, $fa
0e13a     FB FB FB FC 
0e13e     FD FE FE FF 
0e142     01 03 03 03 
0e146     03 03 03 03 | 	byte	$fb, $fb, $fb, $fc, $fd, $fe, $fe, $ff, $01, $03, $03, $03, $03, $03, $03, $03
0e14a     04 04 03 04 
0e14e     06 07 06 05 
0e152     03 03 02 01 
0e156     00 00 01 FF | 	byte	$04, $04, $03, $04, $06, $07, $06, $05, $03, $03, $02, $01, $00, $00, $01, $ff
0e15a     FD FD FD FE 
0e15e     FE FD FC FC 
0e162     FC FC FD FD 
0e166     FE FF 01 02 | 	byte	$fd, $fd, $fd, $fe, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $01, $02
0e16a     02 02 03 03 
0e16e     04 04 04 04 
0e172     03 03 01 01 
0e176     00 FF FF FF | 	byte	$02, $02, $03, $03, $04, $04, $04, $04, $03, $03, $01, $01, $00, $ff, $ff, $ff
0e17a     FE FE FE FE 
0e17e     FE          | 	byte	$fe[5]
0e17f     FF FF 02 03 
0e183     04 05 02 FF 
0e187     FD FC FB FA 
0e18b     F9 FA FA F9 | 	byte	$ff, $ff, $02, $03, $04, $05, $02, $ff, $fd, $fc, $fb, $fa, $f9, $fa, $fa, $f9
0e18f     F7 F6 F5 F5 
0e193     F4 F5 F4 F6 
0e197     F8 FA FB FC 
0e19b     FD FE 00 01 | 	byte	$f7, $f6, $f5, $f5, $f4, $f5, $f4, $f6, $f8, $fa, $fb, $fc, $fd, $fe, $00, $01
0e19f     01 03 05 06 
0e1a3     07 09 0B 0A 
0e1a7     0A 09 09 0A 
0e1ab     0A 0A 09 08 | 	byte	$01, $03, $05, $06, $07, $09, $0b, $0a, $0a, $09, $09, $0a, $0a, $0a, $09, $08
0e1af     06 04 01 00 
0e1b3     FE FD FB F9 
0e1b7     F9 F9 FA FB 
0e1bb     FB FC FE FE | 	byte	$06, $04, $01, $00, $fe, $fd, $fb, $f9, $f9, $f9, $fa, $fb, $fb, $fc, $fe, $fe
0e1bf     FD FE 00 02 
0e1c3     04 04 05 05 
0e1c7     04 03 03 03 
0e1cb     03 03 04 05 | 	byte	$fd, $fe, $00, $02, $04, $04, $05, $05, $04, $03, $03, $03, $03, $03, $04, $05
0e1cf     05 05 05 04 
0e1d3     03 01 00 FF 
0e1d7     FF FE FE FD 
0e1db     FD FE FE FD | 	byte	$05, $05, $05, $04, $03, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fd
0e1df     FC FB FC FC 
0e1e3     FD FD FE FF 
0e1e7     00 02 02 03 
0e1eb     03 05 07 07 | 	byte	$fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $00, $02, $02, $03, $03, $05, $07, $07
0e1ef     07 07 06 04 
0e1f3     03 01 01 00 
0e1f7     FE FD FC FC 
0e1fb     FC FC FC FD | 	byte	$07, $07, $06, $04, $03, $01, $01, $00, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fd
0e1ff     FE FF 00 02 
0e203     03 03 00 FE 
0e207     FC FB FA F9 
0e20b     F8 F7 F6 F6 | 	byte	$fe, $ff, $00, $02, $03, $03, $00, $fe, $fc, $fb, $fa, $f9, $f8, $f7, $f6, $f6
0e20f     F5 F5 F4 F3 
0e213     F3 F4 F6 F8 
0e217     FA FB FB FD 
0e21b     FE 00 02 04 | 	byte	$f5, $f5, $f4, $f3, $f3, $f4, $f6, $f8, $fa, $fb, $fb, $fd, $fe, $00, $02, $04
0e21f     05 06 08 09 
0e223     0A 0B 0B 0A 
0e227     0A 0B 0C 0B 
0e22b     0B 0B 0A 08 | 	byte	$05, $06, $08, $09, $0a, $0b, $0b, $0a, $0a, $0b, $0c, $0b, $0b, $0b, $0a, $08
0e22f     06 03 01 FE 
0e233     FC FA F9 FA 
0e237     FB FB FC FC 
0e23b     FC FD FF FE | 	byte	$06, $03, $01, $fe, $fc, $fa, $f9, $fa, $fb, $fb, $fc, $fc, $fc, $fd, $ff, $fe
0e23f     FF 00 02 05 
0e243     06 06 06 05 
0e247     04 03 03 03 
0e24b     03 03 03 04 | 	byte	$ff, $00, $02, $05, $06, $06, $06, $05, $04, $03, $03, $03, $03, $03, $03, $04
0e24f     04 04 03 01 
0e253     FF FE FE FE 
0e257     FE FE FE FF 
0e25b     FF FE FD FD | 	byte	$04, $04, $03, $01, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd
0e25f     FC FC FC FD 
0e263     FE FF 00 01 
0e267     01 02 03 04 
0e26b     06 08 09 0A | 	byte	$fc, $fc, $fc, $fd, $fe, $ff, $00, $01, $01, $02, $03, $04, $06, $08, $09, $0a
0e26f     09 08 06 05 
0e273     03 01 00 FF 
0e277     FE FD FC FB 
0e27b     FA FB FC FE | 	byte	$09, $08, $06, $05, $03, $01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fb, $fc, $fe
0e27f     FE FF 00 00 
0e283     00 FF FE FD 
0e287     FB F9 F8 F7 
0e28b     F6 F6 F5 F6 | 	byte	$fe, $ff, $00, $00, $00, $ff, $fe, $fd, $fb, $f9, $f8, $f7, $f6, $f6, $f5, $f6
0e28f     F5 F4 F3 F4 
0e293     F6 F8 FA FB 
0e297     FC FC FD FF 
0e29b     01 03 05 07 | 	byte	$f5, $f4, $f3, $f4, $f6, $f8, $fa, $fb, $fc, $fc, $fd, $ff, $01, $03, $05, $07
0e29f     09 09 09 09 
0e2a3     0A 0A 0A 0A 
0e2a7     0A 0B 0B 09 
0e2ab     07 06 06 05 | 	byte	$09, $09, $09, $09, $0a, $0a, $0a, $0a, $0a, $0b, $0b, $09, $07, $06, $06, $05
0e2af     03 00 FD FA 
0e2b3     FA F9 FA FA 
0e2b7     FB FC FB FB 
0e2bb     FB FC FE FF | 	byte	$03, $00, $fd, $fa, $fa, $f9, $fa, $fa, $fb, $fc, $fb, $fb, $fb, $fc, $fe, $ff
0e2bf     00 01 03 05 
0e2c3     07 07 06 05 
0e2c7     04 03 03 02 
0e2cb     02 02 03 04 | 	byte	$00, $01, $03, $05, $07, $07, $06, $05, $04, $03, $03, $02, $02, $02, $03, $04
0e2cf     03 02 00 FF 
0e2d3     FD FD FE FF 
0e2d7     FF FF 00 00 
0e2db     00 FF FE FD | 	byte	$03, $02, $00, $ff, $fd, $fd, $fe, $ff, $ff, $ff, $00, $00, $00, $ff, $fe, $fd
0e2df     FC FC FC FE 
0e2e3     FE FF 00 00 
0e2e7     01 02 05 06 
0e2eb     08 09 09 09 | 	byte	$fc, $fc, $fc, $fe, $fe, $ff, $00, $00, $01, $02, $05, $06, $08, $09, $09, $09
0e2ef     07 06 06 04 
0e2f3     01 00 FE FD 
0e2f7     FD FC FB FA 
0e2fb     FB FB FC FC | 	byte	$07, $06, $06, $04, $01, $00, $fe, $fd, $fd, $fc, $fb, $fa, $fb, $fb, $fc, $fc
0e2ff     FC FD FE FE 
0e303     FE FE FE FC 
0e307     FA F9 F8 F8 
0e30b     F8 F7 F6 F6 | 	byte	$fc, $fd, $fe, $fe, $fe, $fe, $fe, $fc, $fa, $f9, $f8, $f8, $f8, $f7, $f6, $f6
0e30f     F7 F6 F6 F8 
0e313     F9 FA FB FD 
0e317     FE FF 01 03 
0e31b     04 06 09 0B | 	byte	$f7, $f6, $f6, $f8, $f9, $fa, $fb, $fd, $fe, $ff, $01, $03, $04, $06, $09, $0b
0e31f     0B 0B 0A 0A 
0e323     0A 0A 09 0A 
0e327     0A 0A 09 07 
0e32b     05 05 04 03 | 	byte	$0b, $0b, $0a, $0a, $0a, $0a, $09, $0a, $0a, $0a, $09, $07, $05, $05, $04, $03
0e32f     00 FE FB FA 
0e333     F9 F9 FA FB 
0e337     FB FB FB FB 
0e33b     FB FD FF 01 | 	byte	$00, $fe, $fb, $fa, $f9, $f9, $fa, $fb, $fb, $fb, $fb, $fb, $fb, $fd, $ff, $01
0e33f     02 03 05 06 
0e343     07 07 06 05 
0e347     04 04 03 03 
0e34b     03 04 04 02 | 	byte	$02, $03, $05, $06, $07, $07, $06, $05, $04, $04, $03, $03, $03, $04, $04, $02
0e34f     01 00 FF FE 
0e353     FE FF 00 01 
0e357     02 03 03 02 
0e35b     02 01 00 FF | 	byte	$01, $00, $ff, $fe, $fe, $ff, $00, $01, $02, $03, $03, $02, $02, $01, $00, $ff
0e35f     FE FD FD FE 
0e363     FE FF FF 00 
0e367     02 03 05 07 
0e36b     08 08 08 07 | 	byte	$fe, $fd, $fd, $fe, $fe, $ff, $ff, $00, $02, $03, $05, $07, $08, $08, $08, $07
0e36f     06 06 04 02 
0e373     FF FD FC FC 
0e377     FC FB FA FA 
0e37b     F9 FA FA FB | 	byte	$06, $06, $04, $02, $ff, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $f9, $fa, $fa, $fb
0e37f     FB FB FB FB 
0e383     FB          | 	byte	$fb[5]
0e384     FC FC FA FA 
0e388     F9 FA F9 F7 
0e38c     F6 F6 F5 F5 
0e390     F7 F8 F9 FA | 	byte	$fc, $fc, $fa, $fa, $f9, $fa, $f9, $f7, $f6, $f6, $f5, $f5, $f7, $f8, $f9, $fa
0e394     FC FD FE FF 
0e398     01 02 03 05 
0e39c     07 09 0A 0A 
0e3a0     09 08 08 08 | 	byte	$fc, $fd, $fe, $ff, $01, $02, $03, $05, $07, $09, $0a, $0a, $09, $08, $08, $08
0e3a4     08 07 07 09 
0e3a8     08 07 06 05 
0e3ac     03 02 01 00 
0e3b0     FE FD FD FC | 	byte	$08, $07, $07, $09, $08, $07, $06, $05, $03, $02, $01, $00, $fe, $fd, $fd, $fc
0e3b4     FC FB FC FC 
0e3b8     FD FD FD FE 
0e3bc     FE 01 02 03 
0e3c0     04 05 05 05 | 	byte	$fc, $fb, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $01, $02, $03, $04, $05, $05, $05
0e3c4     05 04 05 05 
0e3c8     05 05 05 04 
0e3cc     03 01 00 FF 
0e3d0     FF FF FF 00 | 	byte	$05, $04, $05, $05, $05, $05, $05, $04, $03, $01, $00, $ff, $ff, $ff, $ff, $00
0e3d4     02 03 04 04 
0e3d8     04 03 01 00 
0e3dc     00 00 00 FF 
0e3e0     FE FD FD FE | 	byte	$02, $03, $04, $04, $04, $03, $01, $00, $00, $00, $00, $ff, $fe, $fd, $fd, $fe
0e3e4     FE 00 01 02 
0e3e8     03 05 07 08 
0e3ec     08 08 07 06 
0e3f0     04 02 00 FE | 	byte	$fe, $00, $01, $02, $03, $05, $07, $08, $08, $08, $07, $06, $04, $02, $00, $fe
0e3f4     FC FC FB FB 
0e3f8     FA F9 F9 F9 
0e3fc     FA FA FB FB 
0e400     FB FA F9 FA | 	byte	$fc, $fc, $fb, $fb, $fa, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fb, $fa, $f9, $fa
0e404     FA FA FB FB 
0e408     FA F9 F8 F7 
0e40c     F6 F6 F6 F6 
0e410     F8 F9 FA FC | 	byte	$fa, $fa, $fb, $fb, $fa, $f9, $f8, $f7, $f6, $f6, $f6, $f6, $f8, $f9, $fa, $fc
0e414     FE FE FF 00 
0e418     01 02 04 04 
0e41c     05 06 07 07 
0e420     07 06 06 06 | 	byte	$fe, $fe, $ff, $00, $01, $02, $04, $04, $05, $06, $07, $07, $07, $06, $06, $06
0e424     06 06 06 06 
0e428     05 04 02 01 
0e42c     00 00 FF FF 
0e430     FE FE FE FD | 	byte	$06, $06, $06, $06, $05, $04, $02, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fd
0e434     FD FC FD FD 
0e438     FE FF 00 01 
0e43c     02 03 04 05 
0e440     06 05 05 05 | 	byte	$fd, $fc, $fd, $fd, $fe, $ff, $00, $01, $02, $03, $04, $05, $06, $05, $05, $05
0e444     05 05 07 08 
0e448     07 07 05 04 
0e44c     03 02 01 00 
0e450     00 02 03 04 | 	byte	$05, $05, $07, $08, $07, $07, $05, $04, $03, $02, $01, $00, $00, $02, $03, $04
0e454     04 05 05 04 
0e458     03 02 01 01 
0e45c     01 01 00 FF 
0e460     FF FE FE FE | 	byte	$04, $05, $05, $04, $03, $02, $01, $01, $01, $01, $00, $ff, $ff, $fe, $fe, $fe
0e464     FF FF 00 01 
0e468     02 04 05 05 
0e46c     04 03 02 01 
0e470     00 FE FD FC | 	byte	$ff, $ff, $00, $01, $02, $04, $05, $05, $04, $03, $02, $01, $00, $fe, $fd, $fc
0e474     FB FB FA F9 
0e478     F8 F7 F7 F8 
0e47c     F9 F9 F9 F9 
0e480     F8 F8 F9 F9 | 	byte	$fb, $fb, $fa, $f9, $f8, $f7, $f7, $f8, $f9, $f9, $f9, $f9, $f8, $f8, $f9, $f9
0e484     F9 F8 F8 F9 
0e488     F9 F8 F7 F6 
0e48c     F6 F7 F8 F9 
0e490     FA FB FC FE | 	byte	$f9, $f8, $f8, $f9, $f9, $f8, $f7, $f6, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fe
0e494     FF FF 00 02 
0e498     03 04 04 04 
0e49c     05 06 06 05 
0e4a0     05 05 05 04 | 	byte	$ff, $ff, $00, $02, $03, $04, $04, $04, $05, $06, $06, $05, $05, $05, $05, $04
0e4a4     05 05 05 04 
0e4a8     03 02 01 00 
0e4ac     FF FF FE FE 
0e4b0     FE FF 00 FF | 	byte	$05, $05, $05, $04, $03, $02, $01, $00, $ff, $ff, $fe, $fe, $fe, $ff, $00, $ff
0e4b4     FE FD FD FE 
0e4b8     00 02 02 02 
0e4bc     03 04 04 04 
0e4c0     04 04 04 04 | 	byte	$fe, $fd, $fd, $fe, $00, $02, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04
0e4c4     04 04 05 05 
0e4c8     06 05 04 02 
0e4cc     01 01 00 01 
0e4d0     02 04 04 04 | 	byte	$04, $04, $05, $05, $06, $05, $04, $02, $01, $01, $00, $01, $02, $04, $04, $04
0e4d4     04 04 03 02 
0e4d8     01 01 01 02 
0e4dc     02 01 00 00 
0e4e0     FF FE FE FE | 	byte	$04, $04, $03, $02, $01, $01, $01, $02, $02, $01, $00, $00, $ff, $fe, $fe, $fe
0e4e4     FF 00 01 03 
0e4e8     04 04 04 02 
0e4ec     01 01 00 FF 
0e4f0     FE FE FD FD | 	byte	$ff, $00, $01, $03, $04, $04, $04, $02, $01, $01, $00, $ff, $fe, $fe, $fd, $fd
0e4f4     FD FC FA F8 
0e4f8     F8 F8 F7 F8 
0e4fc     F9 F9 F9 F9 
0e500     00 00 00 00 | 	byte	$fd, $fc, $fa, $f8, $f8, $f8, $f7, $f8, $f9, $f9, $f9, $f9, $00, $00, $00, $00
0e504     E1 DF DC DA 
0e508     D7 D6 DD F6 
0e50c     16 2A 2B 23 
0e510     1E 1A 16 11 | 	byte	$e1, $df, $dc, $da, $d7, $d6, $dd, $f6, $16, $2a, $2b, $23, $1e, $1a, $16, $11
0e514     0F 10 12 12 
0e518     0F 0A 07 04 
0e51c     04 0E 1F 2B 
0e520     2C 27 21 1D | 	byte	$0f, $10, $12, $12, $0f, $0a, $07, $04, $04, $0e, $1f, $2b, $2c, $27, $21, $1d
0e524     18 16 19 1E 
0e528     21 1E 19 16 
0e52c     11 0C 08 05 
0e530     01 FA F0 E9 | 	byte	$18, $16, $19, $1e, $21, $1e, $19, $16, $11, $0c, $08, $05, $01, $fa, $f0, $e9
0e534     E5 E3 E1 DE 
0e538     DB DA D9 D8 
0e53c     DC E3 EA EB 
0e540     E8 E6 E4 E2 | 	byte	$e5, $e3, $e1, $de, $db, $da, $d9, $d8, $dc, $e3, $ea, $eb, $e8, $e6, $e4, $e2
0e544     DF DE DB D8 
0e548     D6 D4 D5 E7 
0e54c     04 21 2B 24 
0e550     1E 19 15 13 | 	byte	$df, $de, $db, $d8, $d6, $d4, $d5, $e7, $04, $21, $2b, $24, $1e, $19, $15, $13
0e554     13 16 15 12 
0e558     0D 0A 06 03 
0e55c     05 12 22 2D 
0e560     2B 25 20 1D | 	byte	$13, $16, $15, $12, $0d, $0a, $06, $03, $05, $12, $22, $2d, $2b, $25, $20, $1d
0e564     18 14 16 1B 
0e568     1F 1F 1B 16 
0e56c     11 0D 09 06 
0e570     00 F6 EE E9 | 	byte	$18, $14, $16, $1b, $1f, $1f, $1b, $16, $11, $0d, $09, $06, $00, $f6, $ee, $e9
0e574     E7 E4 E1 DF 
0e578     DC DA D9 E1 
0e57c     EE F6 F3 E9 
0e580     E5 E3 E2 E0 | 	byte	$e7, $e4, $e1, $df, $dc, $da, $d9, $e1, $ee, $f6, $f3, $e9, $e5, $e3, $e2, $e0
0e584     DE DC DA D7 
0e588     D5 D3 D3 D9 
0e58c     F2 11 25 26 
0e590     1F 19 17 17 | 	byte	$de, $dc, $da, $d7, $d5, $d3, $d3, $d9, $f2, $11, $25, $26, $1f, $19, $17, $17
0e594     19 19 16 11 
0e598     0D 09 06 04 
0e59c     07 14 24 2C 
0e5a0     2A 25 20 1C | 	byte	$19, $19, $16, $11, $0d, $09, $06, $04, $07, $14, $24, $2c, $2a, $25, $20, $1c
0e5a4     18 14 13 17 
0e5a8     1D 1F 1C 17 
0e5ac     13 0E 0A 04 
0e5b0     FA F2 ED EA | 	byte	$18, $14, $13, $17, $1d, $1f, $1c, $17, $13, $0e, $0a, $04, $fa, $f2, $ed, $ea
0e5b4     E8 E5 E2 DF 
0e5b8     DD DC E1 F1 
0e5bc     00 01 F5 E9 
0e5c0     E3 E2 E1 DF | 	byte	$e8, $e5, $e2, $df, $dd, $dc, $e1, $f1, $00, $01, $f5, $e9, $e3, $e2, $e1, $df
0e5c4     DC DA D8 D6 
0e5c8     D4 D2 D3 D4 
0e5cc     E1 FB 17 26 
0e5d0     21 1B 1B 1D | 	byte	$dc, $da, $d8, $d6, $d4, $d2, $d3, $d4, $e1, $fb, $17, $26, $21, $1b, $1b, $1d
0e5d4     1D 19 15 12 
0e5d8     0E 0A 07 06 
0e5dc     0B 18 25 2B 
0e5e0     29 25 21 1C | 	byte	$1d, $19, $15, $12, $0e, $0a, $07, $06, $0b, $18, $25, $2b, $29, $25, $21, $1c
0e5e4     18 14 13 17 
0e5e8     1D 20 1E 18 
0e5ec     14 10 0A 01 
0e5f0     F7 F1 EE EC | 	byte	$18, $14, $13, $17, $1d, $20, $1e, $18, $14, $10, $0a, $01, $f7, $f1, $ee, $ec
0e5f4     E9 E7 E3 E0 
0e5f8     DE E1 F0 01 
0e5fc     09 04 F7 EB 
0e600     E2 E0 DE DC | 	byte	$e9, $e7, $e3, $e0, $de, $e1, $f0, $01, $09, $04, $f7, $eb, $e2, $e0, $de, $dc
0e604     DA D8 D7 D5 
0e608     D3 D1 D1 D2 
0e60c     D6 EA 09 1F 
0e610     23 20 20 1F | 	byte	$da, $d8, $d7, $d5, $d3, $d1, $d1, $d2, $d6, $ea, $09, $1f, $23, $20, $20, $1f
0e614     1C 18 14 10 
0e618     0D 09 08 0B 
0e61c     0E 17 20 29 
0e620     29 24 20 1B | 	byte	$1c, $18, $14, $10, $0d, $09, $08, $0b, $0e, $17, $20, $29, $29, $24, $20, $1b
0e624     17 13 11 16 
0e628     1D 21 1E 18 
0e62c     13 0F 06 FC 
0e630     F5 F2 F0 ED | 	byte	$17, $13, $11, $16, $1d, $21, $1e, $18, $13, $0f, $06, $fc, $f5, $f2, $f0, $ed
0e634     EA E7 E4 E1 
0e638     E2 EE FE 0A 
0e63c     0A 05 FB EF 
0e640     E3 DE DE DC | 	byte	$ea, $e7, $e4, $e1, $e2, $ee, $fe, $0a, $0a, $05, $fb, $ef, $e3, $de, $de, $dc
0e644     D9 D7 D6 D4 
0e648     D2 D1 D1 D2 
0e64c     D2 DC F5 13 
0e650     26 27 24 20 | 	byte	$d9, $d7, $d6, $d4, $d2, $d1, $d1, $d2, $d2, $dc, $f5, $13, $26, $27, $24, $20
0e654     1B 17 15 11 
0e658     0D 0B 0E 11 
0e65c     11 14 1C 24 
0e660     28 24 1F 1B | 	byte	$1b, $17, $15, $11, $0d, $0b, $0e, $11, $11, $14, $1c, $24, $28, $24, $1f, $1b
0e664     17 13 11 15 
0e668     1C 21 1E 18 
0e66c     12 0A 01 FA 
0e670     F6 F4 F0 EE | 	byte	$17, $13, $11, $15, $1c, $21, $1e, $18, $12, $0a, $01, $fa, $f6, $f4, $f0, $ee
0e674     EB E8 E5 E3 
0e678     ED FC 0B 0D 
0e67c     08 04 FF F3 
0e680     E7 DE DB DA | 	byte	$eb, $e8, $e5, $e3, $ed, $fc, $0b, $0d, $08, $04, $ff, $f3, $e7, $de, $db, $da
0e684     D7 D5 D4 D3 
0e688     D1 D0 D0 D1 
0e68c     D0 D3 EA 09 
0e690     25 2B 25 1E | 	byte	$d7, $d5, $d4, $d3, $d1, $d0, $d0, $d1, $d0, $d3, $ea, $09, $25, $2b, $25, $1e
0e694     1A 16 13 10 
0e698     0F 11 13 12 
0e69c     10 11 17 20 
0e6a0     26 24 1F 1A | 	byte	$1a, $16, $13, $10, $0f, $11, $13, $12, $10, $11, $17, $20, $26, $24, $1f, $1a
0e6a4     16 13 12 15 
0e6a8     1B 1F 1F 18 
0e6ac     0E 05 FF FC 
0e6b0     F9 F5 F2 EE | 	byte	$16, $13, $12, $15, $1b, $1f, $1f, $18, $0e, $05, $ff, $fc, $f9, $f5, $f2, $ee
0e6b4     EC EA E6 EB 
0e6b8     F8 09 0F 0B 
0e6bc     06 04 00 F8 
0e6c0     EB DF DA D9 | 	byte	$ec, $ea, $e6, $eb, $f8, $09, $0f, $0b, $06, $04, $00, $f8, $eb, $df, $da, $d9
0e6c4     D7 D4 D4 D2 
0e6c8     D1 CF D0 D0 
0e6cc     CF D0 E0 02 
0e6d0     21 2C 25 1F | 	byte	$d7, $d4, $d4, $d2, $d1, $cf, $d0, $d0, $cf, $d0, $e0, $02, $21, $2c, $25, $1f
0e6d4     1A 17 13 13 
0e6d8     15 16 15 11 
0e6dc     0F 10 14 1C 
0e6e0     21 23 1F 1A | 	byte	$1a, $17, $13, $13, $15, $16, $15, $11, $0f, $10, $14, $1c, $21, $23, $1f, $1a
0e6e4     16 13 12 13 
0e6e8     18 1C 1D 13 
0e6ec     09 02 FF FD 
0e6f0     FA F5 F1 EF | 	byte	$16, $13, $12, $13, $18, $1c, $1d, $13, $09, $02, $ff, $fd, $fa, $f5, $f1, $ef
0e6f4     ED EA EB F5 
0e6f8     07 10 0F 09 
0e6fc     05 03 00 FA 
0e700     ED E2 D9 D6 | 	byte	$ed, $ea, $eb, $f5, $07, $10, $0f, $09, $05, $03, $00, $fa, $ed, $e2, $d9, $d6
0e704     D6 D4 D3 D1 
0e708     D0 CF CF CF 
0e70c     CF D1 DE FC 
0e710     1A 29 25 1F | 	byte	$d6, $d4, $d3, $d1, $d0, $cf, $cf, $cf, $cf, $d1, $de, $fc, $1a, $29, $25, $1f
0e714     1A 17 16 18 
0e718     19 17 13 10 
0e71c     0F 0F 11 16 
0e720     1B 1F 1F 1A | 	byte	$1a, $17, $16, $18, $19, $17, $13, $10, $0f, $0f, $11, $16, $1b, $1f, $1f, $1a
0e724     17 15 14 12 
0e728     14 19 19 10 
0e72c     08 03 01 FF 
0e730     FB F7 F3 F0 | 	byte	$17, $15, $14, $12, $14, $19, $19, $10, $08, $03, $01, $ff, $fb, $f7, $f3, $f0
0e734     EE EC F2 01 
0e738     0F 13 0D 08 
0e73c     05 02 00 FB 
0e740     F1 E4 D9 D6 | 	byte	$ee, $ec, $f2, $01, $0f, $13, $0d, $08, $05, $02, $00, $fb, $f1, $e4, $d9, $d6
0e744     D5 D4 D2 D0 
0e748     CF CE CE CE 
0e74c     D1 D6 DE F3 
0e750     10 23 27 1F | 	byte	$d5, $d4, $d2, $d0, $cf, $ce, $ce, $ce, $d1, $d6, $de, $f3, $10, $23, $27, $1f
0e754     1B 1B 1C 1D 
0e758     1A 16 12 0F 
0e75c     0F 10 11 12 
0e760     17 1C 1D 1B | 	byte	$1b, $1b, $1c, $1d, $1a, $16, $12, $0f, $0f, $10, $11, $12, $17, $1c, $1d, $1b
0e764     18 16 14 10 
0e768     11 13 12 0E 
0e76c     07 04 02 FE 
0e770     FB F7 F4 F1 | 	byte	$18, $16, $14, $10, $11, $13, $12, $0e, $07, $04, $02, $fe, $fb, $f7, $f4, $f1
0e774     EE F1 FE 0C 
0e778     14 10 0C 08 
0e77c     05 02 FF FC 
0e780     F3 E6 DA D5 | 	byte	$ee, $f1, $fe, $0c, $14, $10, $0c, $08, $05, $02, $ff, $fc, $f3, $e6, $da, $d5
0e784     D5 D3 D1 CF 
0e788     CE CD CE D1 
0e78c     D6 D9 DC EB 
0e790     08 1E 26 21 | 	byte	$d5, $d3, $d1, $cf, $ce, $cd, $ce, $d1, $d6, $d9, $dc, $eb, $08, $1e, $26, $21
0e794     1F 21 22 1E 
0e798     1A 16 12 0F 
0e79c     0F 11 10 0F 
0e7a0     11 18 1C 1C | 	byte	$1f, $21, $22, $1e, $1a, $16, $12, $0f, $0f, $11, $10, $0f, $11, $18, $1c, $1c
0e7a4     1A 17 13 10 
0e7a8     0D 0C 0C 0C 
0e7ac     0A 07 02 FF 
0e7b0     FC F9 F5 F1 | 	byte	$1a, $17, $13, $10, $0d, $0c, $0c, $0c, $0a, $07, $02, $ff, $fc, $f9, $f5, $f1
0e7b4     F0 F9 07 13 
0e7b8     14 0F 0C 08 
0e7bc     04 01 FE FA 
0e7c0     F4 E7 DB D5 | 	byte	$f0, $f9, $07, $13, $14, $0f, $0c, $08, $04, $01, $fe, $fa, $f4, $e7, $db, $d5
0e7c4     D3 D2 D0 CE 
0e7c8     CC CC CF D5 
0e7cc     D9 DA D8 E4 
0e7d0     FE 1A 26 24 | 	byte	$d3, $d2, $d0, $ce, $cc, $cc, $cf, $d5, $d9, $da, $d8, $e4, $fe, $1a, $26, $24
0e7d4     24 25 22 1D 
0e7d8     19 15 11 10 
0e7dc     10 11 0F 0C 
0e7e0     0E 13 1B 1D | 	byte	$24, $25, $22, $1d, $19, $15, $11, $10, $10, $11, $0f, $0c, $0e, $13, $1b, $1d
0e7e4     1B 17 13 0F 
0e7e8     08 07 09 0C 
0e7ec     0B 07 03 FF 
0e7f0     FC F9 F5 F1 | 	byte	$1b, $17, $13, $0f, $08, $07, $09, $0c, $0b, $07, $03, $ff, $fc, $f9, $f5, $f1
0e7f4     F5 02 10 16 
0e7f8     12 0E 0B 08 
0e7fc     04 00 FC F9 
0e800     F4 E8 DD D5 | 	byte	$f5, $02, $10, $16, $12, $0e, $0b, $08, $04, $00, $fc, $f9, $f4, $e8, $dd, $d5
0e804     D3 D1 CF CD 
0e808     CC CD D2 D8 
0e80c     DB D9 D7 DF 
0e810     FA 15 29 2B | 	byte	$d3, $d1, $cf, $cd, $cc, $cd, $d2, $d8, $db, $d9, $d7, $df, $fa, $15, $29, $2b
0e814     28 25 21 1D 
0e818     1A 15 11 10 
0e81c     11 11 0F 0B 
0e820     0B 12 19 1E | 	byte	$28, $25, $21, $1d, $1a, $15, $11, $10, $11, $11, $0f, $0b, $0b, $12, $19, $1e
0e824     1B 17 12 0B 
0e828     04 02 06 0C 
0e82c     0C 08 03 00 
0e830     FD F9 F6 F3 | 	byte	$1b, $17, $12, $0b, $04, $02, $06, $0c, $0c, $08, $03, $00, $fd, $f9, $f6, $f3
0e834     FA 0A 15 16 
0e838     11 0E 0B 07 
0e83c     03 FF FC F9 
0e840     F4 EB DF D6 | 	byte	$fa, $0a, $15, $16, $11, $0e, $0b, $07, $03, $ff, $fc, $f9, $f4, $eb, $df, $d6
0e844     D2 D0 CE CC 
0e848     CC D0 D6 DA 
0e84c     DA D7 D6 DD 
0e850     F8 17 2D 2F | 	byte	$d2, $d0, $ce, $cc, $cc, $d0, $d6, $da, $da, $d7, $d6, $dd, $f8, $17, $2d, $2f
0e854     29 24 20 1D 
0e858     1A 15 12 12 
0e85c     12 11 0D 0A 
0e860     0A 10 18 1E | 	byte	$29, $24, $20, $1d, $1a, $15, $12, $12, $12, $11, $0d, $0a, $0a, $10, $18, $1e
0e864     1C 16 10 08 
0e868     00 00 06 0C 
0e86c     0C 08 04 00 
0e870     FD F9 F5 F6 | 	byte	$1c, $16, $10, $08, $00, $00, $06, $0c, $0c, $08, $04, $00, $fd, $f9, $f5, $f6
0e874     FF 0F 17 15 
0e878     10 0D 0A 06 
0e87c     02 FF FB F8 
0e880     F4 EB DF D6 | 	byte	$ff, $0f, $17, $15, $10, $0d, $0a, $06, $02, $ff, $fb, $f8, $f4, $eb, $df, $d6
0e884     D1 CF CD CC 
0e888     CE D2 D8 DA 
0e88c     D9 D7 D5 DD 
0e890     FB 1B 31 2F | 	byte	$d1, $cf, $cd, $cc, $ce, $d2, $d8, $da, $d9, $d7, $d5, $dd, $fb, $1b, $31, $2f
0e894     27 22 1F 1D 
0e898     19 16 14 13 
0e89c     12 10 0C 08 
0e8a0     07 0D 16 1C | 	byte	$27, $22, $1f, $1d, $19, $16, $14, $13, $12, $10, $0c, $08, $07, $0d, $16, $1c
0e8a4     1A 15 0D 04 
0e8a8     FD FF 05 0B 
0e8ac     0B 07 04 00 
0e8b0     FC F7 F4 F7 | 	byte	$1a, $15, $0d, $04, $fd, $ff, $05, $0b, $0b, $07, $04, $00, $fc, $f7, $f4, $f7
0e8b4     03 12 18 14 
0e8b8     0F 0C 09 05 
0e8bc     02 FE FB F8 
0e8c0     F4 EB E0 D5 | 	byte	$03, $12, $18, $14, $0f, $0c, $09, $05, $02, $fe, $fb, $f8, $f4, $eb, $e0, $d5
0e8c4     D0 CE CC CD 
0e8c8     D1 D4 D7 D8 
0e8cc     D8 D7 D5 E0 
0e8d0     FD 20 33 2E | 	byte	$d0, $ce, $cc, $cd, $d1, $d4, $d7, $d8, $d8, $d7, $d5, $e0, $fd, $20, $33, $2e
0e8d4     26 21 1E 1B 
0e8d8     19 16 16 15 
0e8dc     13 0F 0B 08 
0e8e0     07 0D 15 1B | 	byte	$26, $21, $1e, $1b, $19, $16, $16, $15, $13, $0f, $0b, $08, $07, $0d, $15, $1b
0e8e4     1A 14 0A 01 
0e8e8     FC FE 05 0A 
0e8ec     0A 08 05 01 
0e8f0     FC F7 F5 FB | 	byte	$1a, $14, $0a, $01, $fc, $fe, $05, $0a, $0a, $08, $05, $01, $fc, $f7, $f5, $fb
0e8f4     08 16 19 13 
0e8f8     0E 0A 07 05 
0e8fc     01 FE FB F7 
0e900     F4 EB DE D5 | 	byte	$08, $16, $19, $13, $0e, $0a, $07, $05, $01, $fe, $fb, $f7, $f4, $eb, $de, $d5
0e904     CF CE CE D1 
0e908     D3 D5 D6 D7 
0e90c     D7 D6 D7 E4 
0e910     05 25 33 2D | 	byte	$cf, $ce, $ce, $d1, $d3, $d5, $d6, $d7, $d7, $d6, $d7, $e4, $05, $25, $33, $2d
0e914     26 21 1D 1B 
0e918     18 18 18 16 
0e91c     12 0E 0A 07 
0e920     07 0B 14 19 | 	byte	$26, $21, $1d, $1b, $18, $18, $18, $16, $12, $0e, $0a, $07, $07, $0b, $14, $19
0e924     19 11 08 FF 
0e928     FA FE 05 0A 
0e92c     0B 08 04 00 
0e930     FA F6 F4 FC | 	byte	$19, $11, $08, $ff, $fa, $fe, $05, $0a, $0b, $08, $04, $00, $fa, $f6, $f4, $fc
0e934     0C 18 18 12 
0e938     0D 09 06 04 
0e93c     01 FF FB F8 
0e940     F3 E9 DC D3 | 	byte	$0c, $18, $18, $12, $0d, $09, $06, $04, $01, $ff, $fb, $f8, $f3, $e9, $dc, $d3
0e944     CF CF D1 D4 
0e948     D6 D6 D4 D5 
0e94c     D6 D6 DA EB 
0e950     09 28 33 2D | 	byte	$cf, $cf, $d1, $d4, $d6, $d6, $d4, $d5, $d6, $d6, $da, $eb, $09, $28, $33, $2d
0e954     25 21 1D 1A 
0e958     1A 1A 1A 17 
0e95c     11 0D 0A 07 
0e960     06 0B 13 19 | 	byte	$25, $21, $1d, $1a, $1a, $1a, $1a, $17, $11, $0d, $0a, $07, $06, $0b, $13, $19
0e964     18 10 05 FD 
0e968     FA FE 05 0B 
0e96c     0B 07 04 FF 
0e970     FA F5 F4 FE | 	byte	$18, $10, $05, $fd, $fa, $fe, $05, $0b, $0b, $07, $04, $ff, $fa, $f5, $f4, $fe
0e974     0E 19 18 11 
0e978     0C 07 05 03 
0e97c     01 FE FB F7 
0e980     F1 E5 DA D1 | 	byte	$0e, $19, $18, $11, $0c, $07, $05, $03, $01, $fe, $fb, $f7, $f1, $e5, $da, $d1
0e984     CF D0 D3 D6 
0e988     D6 D5 D3 D3 
0e98c     D5 D8 DE F5 
0e990     12 2C 33 2A | 	byte	$cf, $d0, $d3, $d6, $d6, $d5, $d3, $d3, $d5, $d8, $de, $f5, $12, $2c, $33, $2a
0e994     24 20 1C 1B 
0e998     1B 1C 1A 15 
0e99c     11 0C 09 07 
0e9a0     06 0B 13 19 | 	byte	$24, $20, $1c, $1b, $1b, $1c, $1a, $15, $11, $0c, $09, $07, $06, $0b, $13, $19
0e9a4     16 0C 01 FB 
0e9a8     FA FF 06 0C 
0e9ac     0A 06 01 FE 
0e9b0     F9 F4 F4 FE | 	byte	$16, $0c, $01, $fb, $fa, $ff, $06, $0c, $0a, $06, $01, $fe, $f9, $f4, $f4, $fe
0e9b4     0F 19 16 0F 
0e9b8     0A 06 04 03 
0e9bc     01 FF FA F6 
0e9c0     EF E3 D7 D0 | 	byte	$0f, $19, $16, $0f, $0a, $06, $04, $03, $01, $ff, $fa, $f6, $ef, $e3, $d7, $d0
0e9c4     CF D1 D5 D8 
0e9c8     D7 D4 D2 D2 
0e9cc     D5 DA E3 F9 
0e9d0     18 2F 32 29 | 	byte	$cf, $d1, $d5, $d8, $d7, $d4, $d2, $d2, $d5, $da, $e3, $f9, $18, $2f, $32, $29
0e9d4     23 1F 1D 1D 
0e9d8     1E 1D 1A 14 
0e9dc     10 0C 09 07 
0e9e0     06 0C 14 19 | 	byte	$23, $1f, $1d, $1d, $1e, $1d, $1a, $14, $10, $0c, $09, $07, $06, $0c, $14, $19
0e9e4     14 09 00 FB 
0e9e8     FB 02 09 0C 
0e9ec     08 03 00 FC 
0e9f0     F8 F3 F4 00 | 	byte	$14, $09, $00, $fb, $fb, $02, $09, $0c, $08, $03, $00, $fc, $f8, $f3, $f4, $00
0e9f4     10 18 15 0E 
0e9f8     09 06 04 03 
0e9fc     01 FE F9 F5 
0ea00     ED E1 D6 CF | 	byte	$10, $18, $15, $0e, $09, $06, $04, $03, $01, $fe, $f9, $f5, $ed, $e1, $d6, $cf
0ea04     CF D3 D7 D9 
0ea08     D7 D3 D2 D1 
0ea0c     D5 DD E8 04 
0ea10     21 32 30 27 | 	byte	$cf, $d3, $d7, $d9, $d7, $d3, $d2, $d1, $d5, $dd, $e8, $04, $21, $32, $30, $27
0ea14     22 1F 1E 1F 
0ea18     1F 1D 18 14 
0ea1c     10 0B 09 07 
0ea20     07 0D 14 18 | 	byte	$22, $1f, $1e, $1f, $1f, $1d, $18, $14, $10, $0b, $09, $07, $07, $0d, $14, $18
0ea24     12 08 FE FA 
0ea28     FD 04 0B 0B 
0ea2c     06 02 FE FB 
0ea30     F7 F2 F3 00 | 	byte	$12, $08, $fe, $fa, $fd, $04, $0b, $0b, $06, $02, $fe, $fb, $f7, $f2, $f3, $00
0ea34     10 17 14 0D 
0ea38     09 07 05 03 
0ea3c     00 FD F8 F4 
0ea40     EA DE D3 CF | 	byte	$10, $17, $14, $0d, $09, $07, $05, $03, $00, $fd, $f8, $f4, $ea, $de, $d3, $cf
0ea44     D1 D6 D9 D9 
0ea48     D6 D3 D1 D2 
0ea4c     D7 DF F0 0B 
0ea50     27 33 2D 26 | 	byte	$d1, $d6, $d9, $d9, $d6, $d3, $d1, $d2, $d7, $df, $f0, $0b, $27, $33, $2d, $26
0ea54     21 1F 20 21 
0ea58     20 1B 17 12 
0ea5c     0E 0B 07 06 
0ea60     08 0E 15 17 | 	byte	$21, $1f, $20, $21, $20, $1b, $17, $12, $0e, $0b, $07, $06, $08, $0e, $15, $17
0ea64     10 04 FC FA 
0ea68     FE 07 0B 09 
0ea6c     04 FF FC F9 
0ea70     F5 F1 F2 FF | 	byte	$10, $04, $fc, $fa, $fe, $07, $0b, $09, $04, $ff, $fc, $f9, $f5, $f1, $f2, $ff
0ea74     0D 16 13 0C 
0ea78     08 06 04 01 
0ea7c     FF FB F8 F2 
0ea80     E8 DA D1 CE | 	byte	$0d, $16, $13, $0c, $08, $06, $04, $01, $ff, $fb, $f8, $f2, $e8, $da, $d1, $ce
0ea84     D3 D7 DA D9 
0ea88     D5 D3 D1 D3 
0ea8c     DA E3 FB 1A 
0ea90     2F 32 29 24 | 	byte	$d3, $d7, $da, $d9, $d5, $d3, $d1, $d3, $da, $e3, $fb, $1a, $2f, $32, $29, $24
0ea94     20 20 22 22 
0ea98     1F 19 15 11 
0ea9c     0D 0A 07 06 
0eaa0     08 0F 16 16 | 	byte	$20, $20, $22, $22, $1f, $19, $15, $11, $0d, $0a, $07, $06, $08, $0f, $16, $16
0eaa4     0D 01 FA FB 
0eaa8     02 08 0B 07 
0eaac     02 FD FA F7 
0eab0     F3 F0 EF FA | 	byte	$0d, $01, $fa, $fb, $02, $08, $0b, $07, $02, $fd, $fa, $f7, $f3, $f0, $ef, $fa
0eab4     09 13 13 0D 
0eab8     09 06 03 01 
0eabc     FD FA F6 EF 
0eac0     E4 D6 CF CF | 	byte	$09, $13, $13, $0d, $09, $06, $03, $01, $fd, $fa, $f6, $ef, $e4, $d6, $cf, $cf
0eac4     D4 D9 DB D8 
0eac8     D5 D3 D2 D6 
0eacc     DC EB 09 27 
0ead0     34 2F 27 23 | 	byte	$d4, $d9, $db, $d8, $d5, $d3, $d2, $d6, $dc, $eb, $09, $27, $34, $2f, $27, $23
0ead4     21 22 23 21 
0ead8     1D 19 15 11 
0eadc     0D 09 07 05 
0eae0     09 12 19 16 | 	byte	$21, $22, $23, $21, $1d, $19, $15, $11, $0d, $09, $07, $05, $09, $12, $19, $16
0eae4     0B 00 FA FD 
0eae8     05 0B 0A 05 
0eaec     00 FB F8 F4 
0eaf0     F1 EE EE F7 | 	byte	$0b, $00, $fa, $fd, $05, $0b, $0a, $05, $00, $fb, $f8, $f4, $f1, $ee, $ee, $f7
0eaf4     05 11 13 0D 
0eaf8     08 05 02 FF 
0eafc     FD F9 F5 EC 
0eb00     DF D4 CF D1 | 	byte	$05, $11, $13, $0d, $08, $05, $02, $ff, $fd, $f9, $f5, $ec, $df, $d4, $cf, $d1
0eb04     D5 DA DB D9 
0eb08     D5 D3 D4 D8 
0eb0c     E0 FA 18 32 
0eb10     35 2C 25 22 | 	byte	$d5, $da, $db, $d9, $d5, $d3, $d4, $d8, $e0, $fa, $18, $32, $35, $2c, $25, $22
0eb14     22 23 23 21 
0eb18     1C 18 14 0F 
0eb1c     0B 08 05 05 
0eb20     0B 14 1A 15 | 	byte	$22, $23, $23, $21, $1c, $18, $14, $0f, $0b, $08, $05, $05, $0b, $14, $1a, $15
0eb24     0A 00 FB 00 
0eb28     08 0B 08 03 
0eb2c     FE FA F5 F2 
0eb30     EF ED EC F1 | 	byte	$0a, $00, $fb, $00, $08, $0b, $08, $03, $fe, $fa, $f5, $f2, $ef, $ed, $ec, $f1
0eb34     00 0D 12 0D 
0eb38     07 04 02 FF 
0eb3c     FB F8 F2 E7 
0eb40     DA D1 CF D2 | 	byte	$00, $0d, $12, $0d, $07, $04, $02, $ff, $fb, $f8, $f2, $e7, $da, $d1, $cf, $d2
0eb44     D7 DA DA D8 
0eb48     D5 D3 D5 DB 
0eb4c     EA 0B 27 37 
0eb50     31 29 24 22 | 	byte	$d7, $da, $da, $d8, $d5, $d3, $d5, $db, $ea, $0b, $27, $37, $31, $29, $24, $22
0eb54     23 24 23 1F 
0eb58     1B 16 12 0E 
0eb5c     0B 08 04 06 
0eb60     0E 16 1A 14 | 	byte	$23, $24, $23, $1f, $1b, $16, $12, $0e, $0b, $08, $04, $06, $0e, $16, $1a, $14
0eb64     09 FF FE 05 
0eb68     0A 0A 05 00 
0eb6c     FC F7 F3 F0 
0eb70     ED EB EA EE | 	byte	$09, $ff, $fe, $05, $0a, $0a, $05, $00, $fc, $f7, $f3, $f0, $ed, $eb, $ea, $ee
0eb74     FA 09 10 0B 
0eb78     07 04 01 FE 
0eb7c     F9 F6 ED E1 
0eb80     D6 D1 D1 D3 | 	byte	$fa, $09, $10, $0b, $07, $04, $01, $fe, $f9, $f6, $ed, $e1, $d6, $d1, $d1, $d3
0eb84     D7 DA DB D9 
0eb88     D6 D5 D8 E1 
0eb8c     FC 1C 34 37 
0eb90     2E 28 23 22 | 	byte	$d7, $da, $db, $d9, $d6, $d5, $d8, $e1, $fc, $1c, $34, $37, $2e, $28, $23, $22
0eb94     24 24 22 1E 
0eb98     1A 15 11 0E 
0eb9c     0A 07 04 07 
0eba0     10 19 19 12 | 	byte	$24, $24, $22, $1e, $1a, $15, $11, $0e, $0a, $07, $04, $07, $10, $19, $19, $12
0eba4     09 01 02 07 
0eba8     0B 09 03 FE 
0ebac     FA F6 F2 EE 
0ebb0     EB E9 E9 E9 | 	byte	$09, $01, $02, $07, $0b, $09, $03, $fe, $fa, $f6, $f2, $ee, $eb, $e9, $e9, $e9
0ebb4     F3 02 0B 0C 
0ebb8     07 03 00 FC 
0ebbc     F9 F2 E7 DB 
0ebc0     D3 D2 D1 D3 | 	byte	$f3, $02, $0b, $0c, $07, $03, $00, $fc, $f9, $f2, $e7, $db, $d3, $d2, $d1, $d3
0ebc4     D7 DA DB D8 
0ebc8     D6 D6 DB EF 
0ebcc     10 2C 38 32 
0ebd0     2C 26 23 23 | 	byte	$d7, $da, $db, $d8, $d6, $d6, $db, $ef, $10, $2c, $38, $32, $2c, $26, $23, $23
0ebd4     25 25 22 1D 
0ebd8     18 15 11 0E 
0ebdc     0B 06 05 0B 
0ebe0     15 1B 18 11 | 	byte	$25, $25, $22, $1d, $18, $15, $11, $0e, $0b, $06, $05, $0b, $15, $1b, $18, $11
0ebe4     0A 06 08 0B 
0ebe8     0A 06 01 FD 
0ebec     F8 F4 F0 ED 
0ebf0     EA E8 E7 E6 | 	byte	$0a, $06, $08, $0b, $0a, $06, $01, $fd, $f8, $f4, $f0, $ed, $ea, $e8, $e7, $e6
0ebf4     EC F9 07 0B 
0ebf8     06 02 FE FB 
0ebfc     F6 EE E1 D7 
0ec00     D3 D3 D2 D3 | 	byte	$ec, $f9, $07, $0b, $06, $02, $fe, $fb, $f6, $ee, $e1, $d7, $d3, $d3, $d2, $d3
0ec04     D7 DB DC D9 
0ec08     D6 D7 E4 05 
0ec0c     25 38 35 2F 
0ec10     2B 25 23 24 | 	byte	$d7, $db, $dc, $d9, $d6, $d7, $e4, $05, $25, $38, $35, $2f, $2b, $25, $23, $24
0ec14     25 24 20 1B 
0ec18     17 13 10 0D 
0ec1c     09 06 07 0F 
0ec20     18 1A 16 10 | 	byte	$25, $24, $20, $1b, $17, $13, $10, $0d, $09, $06, $07, $0f, $18, $1a, $16, $10
0ec24     0C 0B 0C 0B 
0ec28     07 03 FE FA 
0ec2c     F6 F2 EE EB 
0ec30     E8 E6 E4 E2 | 	byte	$0c, $0b, $0c, $0b, $07, $03, $fe, $fa, $f6, $f2, $ee, $eb, $e8, $e6, $e4, $e2
0ec34     E4 F1 FF 08 
0ec38     06 01 FD FA 
0ec3c     F2 E5 DA D5 
0ec40     D4 D3 D1 D2 | 	byte	$e4, $f1, $ff, $08, $06, $01, $fd, $fa, $f2, $e5, $da, $d5, $d4, $d3, $d1, $d2
0ec44     D6 DA DB D9 
0ec48     D7 DA F5 17 
0ec4c     33 37 31 2D 
0ec50     29 25 23 25 | 	byte	$d6, $da, $db, $d9, $d7, $da, $f5, $17, $33, $37, $31, $2d, $29, $25, $23, $25
0ec54     25 23 1F 1A 
0ec58     16 13 0F 0C 
0ec5c     08 08 0D 14 
0ec60     19 17 14 13 | 	byte	$25, $23, $1f, $1a, $16, $13, $0f, $0c, $08, $08, $0d, $14, $19, $17, $14, $13
0ec64     13 13 0E 08 
0ec68     05 00 FC F8 
0ec6c     F4 F1 ED EA 
0ec70     E6 E3 E2 E0 | 	byte	$13, $13, $0e, $08, $05, $00, $fc, $f8, $f4, $f1, $ed, $ea, $e6, $e3, $e2, $e0
0ec74     DF E8 F8 04 
0ec78     06 01 FC F6 
0ec7c     EC DF D7 D5 
0ec80     D5 D3 D1 D1 | 	byte	$df, $e8, $f8, $04, $06, $01, $fc, $f6, $ec, $df, $d7, $d5, $d5, $d3, $d1, $d1
0ec84     D5 D9 DB DA 
0ec88     DA E9 0D 2C 
0ec8c     39 34 2F 2C 
0ec90     27 24 24 24 | 	byte	$d5, $d9, $db, $da, $da, $e9, $0d, $2c, $39, $34, $2f, $2c, $27, $24, $24, $24
0ec94     25 23 1E 1A 
0ec98     16 12 0F 0C 
0ec9c     0A 0D 14 18 
0eca0     18 15 14 17 | 	byte	$25, $23, $1e, $1a, $16, $12, $0f, $0c, $0a, $0d, $14, $18, $18, $15, $14, $17
0eca4     1A 16 0E 05 
0eca8     02 FE FA F6 
0ecac     F2 EF EB E7 
0ecb0     E4 E1 E0 DE | 	byte	$1a, $16, $0e, $05, $02, $fe, $fa, $f6, $f2, $ef, $eb, $e7, $e4, $e1, $e0, $de
0ecb4     DB E1 F0 FF 
0ecb8     05 00 F9 EF 
0ecbc     E3 DB D7 D7 
0ecc0     D5 D3 D2 D1 | 	byte	$db, $e1, $f0, $ff, $05, $00, $f9, $ef, $e3, $db, $d7, $d7, $d5, $d3, $d2, $d1
0ecc4     D5 D9 DB DB 
0ecc8     E1 FE 1E 36 
0eccc     37 32 2E 2B 
0ecd0     27 24 23 25 | 	byte	$d5, $d9, $db, $db, $e1, $fe, $1e, $36, $37, $32, $2e, $2b, $27, $24, $23, $25
0ecd4     25 21 1E 19 
0ecd8     15 12 0F 0C 
0ecdc     0E 14 19 19 
0ece0     15 14 19 1F | 	byte	$25, $21, $1e, $19, $15, $12, $0f, $0c, $0e, $14, $19, $19, $15, $14, $19, $1f
0ece4     20 18 0C 04 
0ece8     00 FC F8 F5 
0ecec     F1 ED EA E6 
0ecf0     E3 E0 DE DB | 	byte	$20, $18, $0c, $04, $00, $fc, $f8, $f5, $f1, $ed, $ea, $e6, $e3, $e0, $de, $db
0ecf4     D9 DC E9 FA 
0ecf8     02 FE F4 E7 
0ecfc     DD D8 D8 D7 
0ed00     D5 D3 D1 D1 | 	byte	$d9, $dc, $e9, $fa, $02, $fe, $f4, $e7, $dd, $d8, $d8, $d7, $d5, $d3, $d1, $d1
0ed04     D3 D7 DB DE 
0ed08     F1 0E 2C 36 
0ed0c     33 30 2D 2A 
0ed10     26 23 23 24 | 	byte	$d3, $d7, $db, $de, $f1, $0e, $2c, $36, $33, $30, $2d, $2a, $26, $23, $23, $24
0ed14     24 21 1D 18 
0ed18     15 11 0F 0F 
0ed1c     15 1A 1C 18 
0ed20     14 18 1F 23 | 	byte	$24, $21, $1d, $18, $15, $11, $0f, $0f, $15, $1a, $1c, $18, $14, $18, $1f, $23
0ed24     20 17 0B 03 
0ed28     FD F9 F6 F3 
0ed2c     EF EB E7 E4 
0ed30     E1 DE DB D9 | 	byte	$20, $17, $0b, $03, $fd, $f9, $f6, $f3, $ef, $eb, $e7, $e4, $e1, $de, $db, $d9
0ed34     D7 D8 E3 F3 
0ed38     FD FA ED DF 
0ed3c     DA D9 D8 D7 
0ed40     D4 D3 D2 D2 | 	byte	$d7, $d8, $e3, $f3, $fd, $fa, $ed, $df, $da, $d9, $d8, $d7, $d4, $d3, $d2, $d2
0ed44     D2 D6 DB E7 
0ed48     03 1E 32 33 
0ed4c     31 2F 2C 29 
0ed50     25 23 22 23 | 	byte	$d2, $d6, $db, $e7, $03, $1e, $32, $33, $31, $2f, $2c, $29, $25, $23, $22, $23
0ed54     23 21 1D 18 
0ed58     14 11 11 15 
0ed5c     1C 1F 1B 17 
0ed60     18 1E 23 23 | 	byte	$23, $21, $1d, $18, $14, $11, $11, $15, $1c, $1f, $1b, $17, $18, $1e, $23, $23
0ed64     1D 16 0C 01 
0ed68     FB F8 F6 F2 
0ed6c     EE EA E6 E3 
0ed70     E0 DC D9 D7 | 	byte	$1d, $16, $0c, $01, $fb, $f8, $f6, $f2, $ee, $ea, $e6, $e3, $e0, $dc, $d9, $d7
0ed74     D6 D5 DF ED 
0ed78     F8 F4 E6 DB 
0ed7c     DA DA D8 D6 
0ed80     D4 D3 D3 D1 | 	byte	$d6, $d5, $df, $ed, $f8, $f4, $e6, $db, $da, $da, $d8, $d6, $d4, $d3, $d3, $d1
0ed84     D1 D5 DC F6 
0ed88     12 2A 31 2F 
0ed8c     30 2F 2C 28 
0ed90     25 21 21 23 | 	byte	$d1, $d5, $dc, $f6, $12, $2a, $31, $2f, $30, $2f, $2c, $28, $25, $21, $21, $23
0ed94     23 20 1C 18 
0ed98     15 13 17 1E 
0ed9c     22 1F 1A 1B 
0eda0     20 23 23 1F | 	byte	$23, $20, $1c, $18, $15, $13, $17, $1e, $22, $1f, $1a, $1b, $20, $23, $23, $1f
0eda4     1B 15 0B 01 
0eda8     FA F7 F4 F1 
0edac     EC E8 E5 E2 
0edb0     DE DB D8 D6 | 	byte	$1b, $15, $0b, $01, $fa, $f7, $f4, $f1, $ec, $e8, $e5, $e2, $de, $db, $d8, $d6
0edb4     D5 D4 D8 E6 
0edb8     EF EC E0 DB 
0edbc     DB D9 D8 D6 
0edc0     D4 D4 D4 D2 | 	byte	$d5, $d4, $d8, $e6, $ef, $ec, $e0, $db, $db, $d9, $d8, $d6, $d4, $d4, $d4, $d2
0edc4     D1 D4 E5 04 
0edc8     23 30 2E 2D 
0edcc     2F 2F 2C 28 
0edd0     24 20 20 22 | 	byte	$d1, $d4, $e5, $04, $23, $30, $2e, $2d, $2f, $2f, $2c, $28, $24, $20, $20, $22
0edd4     23 1F 1B 17 
0edd8     14 18 1F 24 
0eddc     23 1E 1D 23 
0ede0     26 24 1F 1B | 	byte	$23, $1f, $1b, $17, $14, $18, $1f, $24, $23, $1e, $1d, $23, $26, $24, $1f, $1b
0ede4     18 14 0B 00 
0ede8     F8 F4 F2 EE 
0edec     EA E7 E3 E0 
0edf0     DC D9 D7 D5 | 	byte	$18, $14, $0b, $00, $f8, $f4, $f2, $ee, $ea, $e7, $e3, $e0, $dc, $d9, $d7, $d5
0edf4     D4 D2 D6 E0 
0edf8     E7 E5 DD DA 
0edfc     DA D9 D7 D5 
0ee00     D4 D4 D3 D2 | 	byte	$d4, $d2, $d6, $e0, $e7, $e5, $dd, $da, $da, $d9, $d7, $d5, $d4, $d4, $d3, $d2
0ee04     D0 D4 EF 11 
0ee08     2C 30 2A 2B 
0ee0c     2D 2E 2B 26 
0ee10     23 1F 1F 20 | 	byte	$d0, $d4, $ef, $11, $2c, $30, $2a, $2b, $2d, $2e, $2b, $26, $23, $1f, $1f, $20
0ee14     22 1F 1B 18 
0ee18     18 1F 25 26 
0ee1c     21 20 25 29 
0ee20     28 22 1D 19 | 	byte	$22, $1f, $1b, $18, $18, $1f, $25, $26, $21, $20, $25, $29, $28, $22, $1d, $19
0ee24     16 12 0A FF 
0ee28     F7 F4 F1 ED 
0ee2c     E9 E5 E2 DF 
0ee30     DC D9 D6 D4 | 	byte	$16, $12, $0a, $ff, $f7, $f4, $f1, $ed, $e9, $e5, $e2, $df, $dc, $d9, $d6, $d4
0ee34     D2 D0 D2 D8 
0ee38     DE E0 DD DB 
0ee3c     DA D8 D6 D5 
0ee40     D4 D4 D4 D2 | 	byte	$d2, $d0, $d2, $d8, $de, $e0, $dd, $db, $da, $d8, $d6, $d5, $d4, $d4, $d4, $d2
0ee44     D1 DA F8 1D 
0ee48     30 2E 28 2B 
0ee4c     2F 2F 2B 25 
0ee50     21 1E 1E 20 | 	byte	$d1, $da, $f8, $1d, $30, $2e, $28, $2b, $2f, $2f, $2b, $25, $21, $1e, $1e, $20
0ee54     20 1F 1B 19 
0ee58     1F 26 29 25 
0ee5c     23 27 2B 2B 
0ee60     25 1F 1A 17 | 	byte	$20, $1f, $1b, $19, $1f, $26, $29, $25, $23, $27, $2b, $2b, $25, $1f, $1a, $17
0ee64     14 10 09 FF 
0ee68     F6 F2 F0 EC 
0ee6c     E8 E3 E0 DE 
0ee70     DB D9 D5 D3 | 	byte	$14, $10, $09, $ff, $f6, $f2, $f0, $ec, $e8, $e3, $e0, $de, $db, $d9, $d5, $d3
0ee74     D1 CF CE D2 
0ee78     D9 DE DE DB 
0ee7c     D9 D8 D6 D5 
0ee80     D4 D4 D3 D2 | 	byte	$d1, $cf, $ce, $d2, $d9, $de, $de, $db, $d9, $d8, $d6, $d5, $d4, $d4, $d3, $d2
0ee84     D1 E1 01 24 
0ee88     32 2B 28 2B 
0ee8c     2F 2E 29 25 
0ee90     21 1E 1D 1E | 	byte	$d1, $e1, $01, $24, $32, $2b, $28, $2b, $2f, $2e, $29, $25, $21, $1e, $1d, $1e
0ee94     1F 1E 1B 1E 
0ee98     25 2A 29 26 
0ee9c     28 2D 2E 29 
0eea0     22 1D 18 15 | 	byte	$1f, $1e, $1b, $1e, $25, $2a, $29, $26, $28, $2d, $2e, $29, $22, $1d, $18, $15
0eea4     12 0F 07 FE 
0eea8     F5 F1 EF EC 
0eeac     E7 E3 DF DE 
0eeb0     DC D8 D4 D2 | 	byte	$12, $0f, $07, $fe, $f5, $f1, $ef, $ec, $e7, $e3, $df, $de, $dc, $d8, $d4, $d2
0eeb4     D0 CD C9 CC 
0eeb8     D6 DE DE DA 
0eebc     D8 D6 D5 D4 
0eec0     D4 D4 D3 D2 | 	byte	$d0, $cd, $c9, $cc, $d6, $de, $de, $da, $d8, $d6, $d5, $d4, $d4, $d4, $d3, $d2
0eec4     D3 E6 06 26 
0eec8     31 2A 29 2D 
0eecc     2F 2D 28 23 
0eed0     20 1D 1B 1C | 	byte	$d3, $e6, $06, $26, $31, $2a, $29, $2d, $2f, $2d, $28, $23, $20, $1d, $1b, $1c
0eed4     1E 1D 1F 24 
0eed8     2A 2C 29 2A 
0eedc     2F 31 2E 26 
0eee0     21 1C 17 13 | 	byte	$1e, $1d, $1f, $24, $2a, $2c, $29, $2a, $2f, $31, $2e, $26, $21, $1c, $17, $13
0eee4     0F 0C 06 FD 
0eee8     F5 F1 EE EA 
0eeec     E5 E1 DF DD 
0eef0     DB D7 D4 D1 | 	byte	$0f, $0c, $06, $fd, $f5, $f1, $ee, $ea, $e5, $e1, $df, $dd, $db, $d7, $d4, $d1
0eef4     CF C9 C5 CA 
0eef8     D6 DF DD DA 
0eefc     D8 D7 D6 D5 
0ef00     D4 D4 D3 D2 | 	byte	$cf, $c9, $c5, $ca, $d6, $df, $dd, $da, $d8, $d7, $d6, $d5, $d4, $d4, $d3, $d2
0ef04     D6 ED 0D 29 
0ef08     2F 2A 2A 2D 
0ef0c     2F 2C 27 22 
0ef10     1F 1C 1A 1A | 	byte	$d6, $ed, $0d, $29, $2f, $2a, $2a, $2d, $2f, $2c, $27, $22, $1f, $1c, $1a, $1a
0ef14     1C 1E 24 2A 
0ef18     2D 2B 2B 30 
0ef1c     33 31 2A 25 
0ef20     1F 1B 16 11 | 	byte	$1c, $1e, $24, $2a, $2d, $2b, $2b, $30, $33, $31, $2a, $25, $1f, $1b, $16, $11
0ef24     0D 0A 04 FC 
0ef28     F5 F0 ED E9 
0ef2c     E5 E2 E0 DD 
0ef30     DA D7 D4 D2 | 	byte	$0d, $0a, $04, $fc, $f5, $f0, $ed, $e9, $e5, $e2, $e0, $dd, $da, $d7, $d4, $d2
0ef34     CE C6 C2 C9 
0ef38     D7 E0 DD D9 
0ef3c     D7 D6 D5 D5 
0ef40     D4 D3 D3 D3 | 	byte	$ce, $c6, $c2, $c9, $d7, $e0, $dd, $d9, $d7, $d6, $d5, $d5, $d4, $d3, $d3, $d3
0ef44     D8 EE 11 28 
0ef48     2F 2C 2C 2E 
0ef4c     2E 2B 26 23 
0ef50     1F 1C 19 19 | 	byte	$d8, $ee, $11, $28, $2f, $2c, $2c, $2e, $2e, $2b, $26, $23, $1f, $1c, $19, $19
0ef54     1A 20 28 2F 
0ef58     2F 2D 31 36 
0ef5c     36 2F 29 23 
0ef60     1F 1A 15 10 | 	byte	$1a, $20, $28, $2f, $2f, $2d, $31, $36, $36, $2f, $29, $23, $1f, $1a, $15, $10
0ef64     0B 07 02 FB 
0ef68     F4 F0 ED E9 
0ef6c     E5 E2 DF DC 
0ef70     DA D7 D5 D2 | 	byte	$0b, $07, $02, $fb, $f4, $f0, $ed, $e9, $e5, $e2, $df, $dc, $da, $d7, $d5, $d2
0ef74     CC C3 C1 CD 
0ef78     DB E0 DC D8 
0ef7c     D7 D7 D6 D5 
0ef80     D4 D3 D3 D2 | 	byte	$cc, $c3, $c1, $cd, $db, $e0, $dc, $d8, $d7, $d7, $d6, $d5, $d4, $d3, $d3, $d2
0ef84     D9 F4 13 2B 
0ef88     30 2D 2D 2E 
0ef8c     2E 2A 26 22 
0ef90     1F 1B 18 17 | 	byte	$d9, $f4, $13, $2b, $30, $2d, $2d, $2e, $2e, $2a, $26, $22, $1f, $1b, $18, $17
0ef94     1A 23 2E 31 
0ef98     2F 30 36 38 
0ef9c     33 2D 26 22 
0efa0     1D 19 13 0E | 	byte	$1a, $23, $2e, $31, $2f, $30, $36, $38, $33, $2d, $26, $22, $1d, $19, $13, $0e
0efa4     09 05 00 F9 
0efa8     F3 EF EC E9 
0efac     E5 E1 DE DB 
0efb0     D9 D7 D4 D2 | 	byte	$09, $05, $00, $f9, $f3, $ef, $ec, $e9, $e5, $e1, $de, $db, $d9, $d7, $d4, $d2
0efb4     CA C0 C2 CF 
0efb8     DD DF DA D8 
0efbc     D7 D7 D6 D4 
0efc0     D3 D2 D2 D2 | 	byte	$ca, $c0, $c2, $cf, $dd, $df, $da, $d8, $d7, $d7, $d6, $d4, $d3, $d2, $d2, $d2
0efc4     D8 F5 15 2E 
0efc8     31 2E 2C 2D 
0efcc     2D 29 25 22 
0efd0     1E 1B 17 15 | 	byte	$d8, $f5, $15, $2e, $31, $2e, $2c, $2d, $2d, $29, $25, $22, $1e, $1b, $17, $15
0efd4     19 25 2F 32 
0efd8     31 35 3A 39 
0efdc     32 2B 26 22 
0efe0     1D 17 13 0D | 	byte	$19, $25, $2f, $32, $31, $35, $3a, $39, $32, $2b, $26, $22, $1d, $17, $13, $0d
0efe4     08 03 FD F7 
0efe8     F3 EF ED E9 
0efec     E5 E0 DD DB 
0eff0     D9 D7 D5 D2 | 	byte	$08, $03, $fd, $f7, $f3, $ef, $ed, $e9, $e5, $e0, $dd, $db, $d9, $d7, $d5, $d2
0eff4     C9 C0 C5 D3 
0eff8     DE DE DA D7 
0effc     D6 D6 D5 D4 
0f000     D3 D2 D2 D1 | 	byte	$c9, $c0, $c5, $d3, $de, $de, $da, $d7, $d6, $d6, $d5, $d4, $d3, $d2, $d2, $d1
0f004     DA F7 1B 31 
0f008     32 2E 2D 2E 
0f00c     2D 29 25 21 
0f010     1E 1A 17 15 | 	byte	$da, $f7, $1b, $31, $32, $2e, $2d, $2e, $2d, $29, $25, $21, $1e, $1a, $17, $15
0f014     1A 26 2F 33 
0f018     34 39 3B 37 
0f01c     2F 2A 26 20 
0f020     1C 16 11 0B | 	byte	$1a, $26, $2f, $33, $34, $39, $3b, $37, $2f, $2a, $26, $20, $1c, $16, $11, $0b
0f024     07 01 FB F5 
0f028     F1 EF ED E9 
0f02c     E5 E1 DD DB 
0f030     D8 D6 D5 D1 | 	byte	$07, $01, $fb, $f5, $f1, $ef, $ed, $e9, $e5, $e1, $dd, $db, $d8, $d6, $d5, $d1
0f034     C8 C3 CB D8 
0f038     E0 DC D9 D7 
0f03c     D6 D5 D5 D4 
0f040     D3 D2 D1 D0 | 	byte	$c8, $c3, $cb, $d8, $e0, $dc, $d9, $d7, $d6, $d5, $d5, $d4, $d3, $d2, $d1, $d0
0f044     DA F6 1D 32 
0f048     32 2D 2E 2F 
0f04c     2D 28 25 21 
0f050     1D 1A 17 17 | 	byte	$da, $f6, $1d, $32, $32, $2d, $2e, $2f, $2d, $28, $25, $21, $1d, $1a, $17, $17
0f054     1C 25 2E 33 
0f058     38 3C 3C 35 
0f05c     2E 2A 25 20 
0f060     1B 16 11 0B | 	byte	$1c, $25, $2e, $33, $38, $3c, $3c, $35, $2e, $2a, $25, $20, $1b, $16, $11, $0b
0f064     06 00 F9 F3 
0f068     F1 EF EC E9 
0f06c     E5 E1 DE DA 
0f070     D8 D6 D5 D0 | 	byte	$06, $00, $f9, $f3, $f1, $ef, $ec, $e9, $e5, $e1, $de, $da, $d8, $d6, $d5, $d0
0f074     C8 C8 D2 DD 
0f078     DF DA D8 D6 
0f07c     D5 D4 D4 D3 
0f080     D2 D1 D0 CF | 	byte	$c8, $c8, $d2, $dd, $df, $da, $d8, $d6, $d5, $d4, $d4, $d3, $d2, $d1, $d0, $cf
0f084     DA F9 1F 33 
0f088     33 2E 2F 2F 
0f08c     2B 27 23 20 
0f090     1C 19 16 17 | 	byte	$da, $f9, $1f, $33, $33, $2e, $2f, $2f, $2b, $27, $23, $20, $1c, $19, $16, $17
0f094     1E 25 2C 31 
0f098     3A 3D 3A 33 
0f09c     2D 29 24 1F 
0f0a0     1A 15 0E 0A | 	byte	$1e, $25, $2c, $31, $3a, $3d, $3a, $33, $2d, $29, $24, $1f, $1a, $15, $0e, $0a
0f0a4     04 FD F6 F2 
0f0a8     F1 EF EC E8 
0f0ac     E4 E1 DD DA 
0f0b0     D8 D6 D4 D0 | 	byte	$04, $fd, $f6, $f2, $f1, $ef, $ec, $e8, $e4, $e1, $dd, $da, $d8, $d6, $d4, $d0
0f0b4     CC D0 D9 E0 
0f0b8     DD D9 D8 D6 
0f0bc     D5 D4 D3 D2 
0f0c0     D2 D0 D0 D0 | 	byte	$cc, $d0, $d9, $e0, $dd, $d9, $d8, $d6, $d5, $d4, $d3, $d2, $d2, $d0, $d0, $d0
0f0c4     D9 F7 19 31 
0f0c8     35 31 31 2F 
0f0cc     2A 26 23 1F 
0f0d0     1C 19 17 19 | 	byte	$d9, $f7, $19, $31, $35, $31, $31, $2f, $2a, $26, $23, $1f, $1c, $19, $17, $19
0f0d4     20 26 2B 32 
0f0d8     3B 3E 3A 33 
0f0dc     2D 29 24 1E 
0f0e0     19 13 0F 0A | 	byte	$20, $26, $2b, $32, $3b, $3e, $3a, $33, $2d, $29, $24, $1e, $19, $13, $0f, $0a
0f0e4     04 FB F4 F1 
0f0e8     F1 EF ED E9 
0f0ec     E5 E1 DD DB 
0f0f0     D9 D7 D5 D2 | 	byte	$04, $fb, $f4, $f1, $f1, $ef, $ed, $e9, $e5, $e1, $dd, $db, $d9, $d7, $d5, $d2
0f0f4     D4 DB E0 E0 
0f0f8     DB D8 D7 D6 
0f0fc     D4 D3 D2 D1 
0f100     D0 D0 CF D1 | 	byte	$d4, $db, $e0, $e0, $db, $d8, $d7, $d6, $d4, $d3, $d2, $d1, $d0, $d0, $cf, $d1
0f104     D8 F1 14 2F 
0f108     36 33 31 2D 
0f10c     29 26 22 1F 
0f110     1C 19 17 1A | 	byte	$d8, $f1, $14, $2f, $36, $33, $31, $2d, $29, $26, $22, $1f, $1c, $19, $17, $1a
0f114     21 27 2B 32 
0f118     3A 3E 39 32 
0f11c     2D 28 23 1D 
0f120     18 13 0E 09 | 	byte	$21, $27, $2b, $32, $3a, $3e, $39, $32, $2d, $28, $23, $1d, $18, $13, $0e, $09
0f124     01 F9 F3 F2 
0f128     F2 EF EC E9 
0f12c     E6 E1 DE DB 
0f130     DA D8 D6 D7 | 	byte	$01, $f9, $f3, $f2, $f2, $ef, $ec, $e9, $e6, $e1, $de, $db, $da, $d8, $d6, $d7
0f134     DD E3 E3 DE 
0f138     DB D8 D7 D5 
0f13c     D4 D3 D1 D0 
0f140     CF D0 D1 D2 | 	byte	$dd, $e3, $e3, $de, $db, $d8, $d7, $d5, $d4, $d3, $d1, $d0, $cf, $d0, $d1, $d2
0f144     D6 EC 0C 2C 
0f148     39 36 31 2D 
0f14c     29 25 21 1F 
0f150     1C 18 17 1B | 	byte	$d6, $ec, $0c, $2c, $39, $36, $31, $2d, $29, $25, $21, $1f, $1c, $18, $17, $1b
0f154     23 28 2D 33 
0f158     3A 3C 38 31 
0f15c     2B 27 21 1D 
0f160     17 12 0E 08 | 	byte	$23, $28, $2d, $33, $3a, $3c, $38, $31, $2b, $27, $21, $1d, $17, $12, $0e, $08
0f164     FE F6 F2 F2 
0f168     F1 EE EC E9 
0f16c     E6 E3 DF DD 
0f170     DA D9 DA E4 | 	byte	$fe, $f6, $f2, $f2, $f1, $ee, $ec, $e9, $e6, $e3, $df, $dd, $da, $d9, $da, $e4
0f174     EA EA E2 DC 
0f178     DA D8 D6 D4 
0f17c     D3 D2 D0 CF 
0f180     CE CF D1 D3 | 	byte	$ea, $ea, $e2, $dc, $da, $d8, $d6, $d4, $d3, $d2, $d0, $cf, $ce, $cf, $d1, $d3
0f184     D7 E6 04 26 
0f188     39 39 31 2B 
0f18c     27 24 21 1E 
0f190     1B 18 16 1B | 	byte	$d7, $e6, $04, $26, $39, $39, $31, $2b, $27, $24, $21, $1e, $1b, $18, $16, $1b
0f194     22 28 2E 33 
0f198     39 3A 37 31 
0f19c     2C 27 21 1C 
0f1a0     17 13 0D 05 | 	byte	$22, $28, $2e, $33, $39, $3a, $37, $31, $2c, $27, $21, $1c, $17, $13, $0d, $05
0f1a4     FC F6 F4 F4 
0f1a8     F2 EF EC EA 
0f1ac     E7 E4 E2 DE 
0f1b0     DB DA E3 F0 | 	byte	$fc, $f6, $f4, $f4, $f2, $ef, $ec, $ea, $e7, $e4, $e2, $de, $db, $da, $e3, $f0
0f1b4     F3 EB E0 DB 
0f1b8     DA D8 D6 D4 
0f1bc     D3 D1 D0 CE 
0f1c0     CE D0 D2 D5 | 	byte	$f3, $eb, $e0, $db, $da, $d8, $d6, $d4, $d3, $d1, $d0, $ce, $ce, $d0, $d2, $d5
0f1c4     D9 E0 F9 1C 
0f1c8     36 3B 32 2B 
0f1cc     27 24 21 1E 
0f1d0     1A 17 16 1C | 	byte	$d9, $e0, $f9, $1c, $36, $3b, $32, $2b, $27, $24, $21, $1e, $1a, $17, $16, $1c
0f1d4     22 2A 30 35 
0f1d8     39 38 35 31 
0f1dc     2C 26 21 1B 
0f1e0     16 12 0A 01 | 	byte	$22, $2a, $30, $35, $39, $38, $35, $31, $2c, $26, $21, $1b, $16, $12, $0a, $01
0f1e4     F9 F5 F5 F4 
0f1e8     F1 EF ED EA 
0f1ec     E7 E5 E3 E0 
0f1f0     DD E3 F2 FD | 	byte	$f9, $f5, $f5, $f4, $f1, $ef, $ed, $ea, $e7, $e5, $e3, $e0, $dd, $e3, $f2, $fd
0f1f4     FA EC DF DB 
0f1f8     DA D8 D6 D3 
0f1fc     D2 D1 CE CD 
0f200     CE D0 D2 D6 | 	byte	$fa, $ec, $df, $db, $da, $d8, $d6, $d3, $d2, $d1, $ce, $cd, $ce, $d0, $d2, $d6
0f204     DA E0 F2 0F 
0f208     2D 39 32 2B 
0f20c     26 22 20 1D 
0f210     1A 17 15 1A | 	byte	$da, $e0, $f2, $0f, $2d, $39, $32, $2b, $26, $22, $20, $1d, $1a, $17, $15, $1a
0f214     21 29 31 35 
0f218     37 36 34 31 
0f21c     2B 26 21 1B 
0f220     17 10 07 FE | 	byte	$21, $29, $31, $35, $37, $36, $34, $31, $2b, $26, $21, $1b, $17, $10, $07, $fe
0f224     F9 F7 F7 F5 
0f228     F2 EF ED EB 
0f22c     E9 E6 E4 E1 
0f230     E3 EF FD 04 | 	byte	$f9, $f7, $f7, $f5, $f2, $ef, $ed, $eb, $e9, $e6, $e4, $e1, $e3, $ef, $fd, $04
0f234     FA EA E0 D9 
0f238     D8 D7 D5 D3 
0f23c     D1 CF CD CD 
0f240     CE D0 D3 D8 | 	byte	$fa, $ea, $e0, $d9, $d8, $d7, $d5, $d3, $d1, $cf, $cd, $cd, $ce, $d0, $d3, $d8
0f244     DD E2 EA 01 
0f248     1F 32 33 2A 
0f24c     25 22 1F 1C 
0f250     19 16 15 18 | 	byte	$dd, $e2, $ea, $01, $1f, $32, $33, $2a, $25, $22, $1f, $1c, $19, $16, $15, $18
0f254     20 2A 31 36 
0f258     36 35 33 30 
0f25c     2B 25 20 1B 
0f260     16 0D 03 FC | 	byte	$20, $2a, $31, $36, $36, $35, $33, $30, $2b, $25, $20, $1b, $16, $0d, $03, $fc
0f264     F9 F9 F8 F6 
0f268     F2 EF ED EC 
0f26c     EA E8 E5 E6 
0f270     F1 FF 07 03 | 	byte	$f9, $f9, $f8, $f6, $f2, $ef, $ed, $ec, $ea, $e8, $e5, $e6, $f1, $ff, $07, $03
0f274     FB EE E2 DA 
0f278     D8 D7 D5 D3 
0f27c     D0 CE CD CE 
0f280     CF D1 D5 DB | 	byte	$fb, $ee, $e2, $da, $d8, $d7, $d5, $d3, $d0, $ce, $cd, $ce, $cf, $d1, $d5, $db
0f284     E1 E5 E7 F3 
0f288     0E 27 33 2C 
0f28c     25 21 1F 1B 
0f290     18 14 13 16 | 	byte	$e1, $e5, $e7, $f3, $0e, $27, $33, $2c, $25, $21, $1f, $1b, $18, $14, $13, $16
0f294     1E 27 30 35 
0f298     36 33 31 2F 
0f29c     2A 26 20 1B 
0f2a0     12 08 01 FD | 	byte	$1e, $27, $30, $35, $36, $33, $31, $2f, $2a, $26, $20, $1b, $12, $08, $01, $fd
0f2a4     FC FB F9 F7 
0f2a8     F3 F0 EE ED 
0f2ac     EC EA E9 F1 
0f2b0     01 0A 09 02 | 	byte	$fc, $fb, $f9, $f7, $f3, $f0, $ee, $ed, $ec, $ea, $e9, $f1, $01, $0a, $09, $02
0f2b4     FB F0 E5 DB 
0f2b8     D8 D7 D5 D3 
0f2bc     CF CE CD CE 
0f2c0     D0 D4 D9 DF | 	byte	$fb, $f0, $e5, $db, $d8, $d7, $d5, $d3, $cf, $ce, $cd, $ce, $d0, $d4, $d9, $df
0f2c4     E4 E5 E4 E6 
0f2c8     F9 17 2B 2E 
0f2cc     26 21 1D 1A 
0f2d0     17 14 12 14 | 	byte	$e4, $e5, $e4, $e6, $f9, $17, $2b, $2e, $26, $21, $1d, $1a, $17, $14, $12, $14
0f2d4     1C 26 30 35 
0f2d8     35 32 30 2F 
0f2dc     2B 26 20 18 
0f2e0     0E 06 02 FF | 	byte	$1c, $26, $30, $35, $35, $32, $30, $2f, $2b, $26, $20, $18, $0e, $06, $02, $ff
0f2e4     FE FD FB F7 
0f2e8     F4 F1 F0 EF 
0f2ec     EE ED F5 04 
0f2f0     0E 0E 07 01 | 	byte	$fe, $fd, $fb, $f7, $f4, $f1, $f0, $ef, $ee, $ed, $f5, $04, $0e, $0e, $07, $01
0f2f4     FC F4 E8 DD 
0f2f8     D7 D6 D5 D3 
0f2fc     D0 CE CE CF 
0f300     D3 D8 DE E3 | 	byte	$fc, $f4, $e8, $dd, $d7, $d6, $d5, $d3, $d0, $ce, $ce, $cf, $d3, $d8, $de, $e3
0f304     E5 E4 E1 E0 
0f308     EA 06 1F 2D 
0f30c     27 21 1C 19 
0f310     16 13 11 12 | 	byte	$e5, $e4, $e1, $e0, $ea, $06, $1f, $2d, $27, $21, $1c, $19, $16, $13, $11, $12
0f314     18 22 2C 33 
0f318     34 32 30 2E 
0f31c     2B 25 1D 12 
0f320     0A 05 03 02 | 	byte	$18, $22, $2c, $33, $34, $32, $30, $2e, $2b, $25, $1d, $12, $0a, $05, $03, $02
0f324     00 FE FC F8 
0f328     F5 F3 F1 F1 
0f32c     F0 F6 04 11 
0f330     14 0C 05 01 | 	byte	$00, $fe, $fc, $f8, $f5, $f3, $f1, $f1, $f0, $f6, $04, $11, $14, $0c, $05, $01
0f334     FD F7 EC E0 
0f338     D7 D4 D4 D2 
0f33c     CF CD CE D1 
0f340     D8 DE E3 E4 | 	byte	$fd, $f7, $ec, $e0, $d7, $d4, $d4, $d2, $cf, $cd, $ce, $d1, $d8, $de, $e3, $e4
0f344     E3 E0 DE DD 
0f348     DE EF 0D 24 
0f34c     29 21 1C 18 
0f350     15 12 11 10 | 	byte	$e3, $e0, $de, $dd, $de, $ef, $0d, $24, $29, $21, $1c, $18, $15, $12, $11, $10
0f354     16 1F 29 33 
0f358     34 33 31 2F 
0f35c     2A 23 18 0F 
0f360     0A 07 06 04 | 	byte	$16, $1f, $29, $33, $34, $33, $31, $2f, $2a, $23, $18, $0f, $0a, $07, $06, $04
0f364     03 01 FD FA 
0f368     F7 F4 F4 F3 
0f36c     F9 07 14 18 
0f370     11 0A 05 01 | 	byte	$03, $01, $fd, $fa, $f7, $f4, $f4, $f3, $f9, $07, $14, $18, $11, $0a, $05, $01
0f374     FD F9 F1 E5 
0f378     D9 D4 D3 D1 
0f37c     CF CE D1 D7 
0f380     DF E3 E5 E3 | 	byte	$fd, $f9, $f1, $e5, $d9, $d4, $d3, $d1, $cf, $ce, $d1, $d7, $df, $e3, $e5, $e3
0f384     E0 DE DC DB 
0f388     DA E2 FE 17 
0f38c     26 22 1B 17 
0f390     15 12 10 10 | 	byte	$e0, $de, $dc, $db, $da, $e2, $fe, $17, $26, $22, $1b, $17, $15, $12, $10, $10
0f394     12 19 24 2F 
0f398     33 34 32 2F 
0f39c     27 1D 13 0E 
0f3a0     0B 08 07 06 | 	byte	$12, $19, $24, $2f, $33, $34, $32, $2f, $27, $1d, $13, $0e, $0b, $08, $07, $06
0f3a4     05 02 FE FB 
0f3a8     F9 F7 F6 F9 
0f3ac     05 15 1C 18 
0f3b0     0F 0A 05 02 | 	byte	$05, $02, $fe, $fb, $f9, $f7, $f6, $f9, $05, $15, $1c, $18, $0f, $0a, $05, $02
0f3b4     FE FA F5 E9 
0f3b8     DD D5 D2 D1 
0f3bc     D0 D1 D8 E0 
0f3c0     E6 E6 E4 E0 | 	byte	$fe, $fa, $f5, $e9, $dd, $d5, $d2, $d1, $d0, $d1, $d8, $e0, $e6, $e6, $e4, $e0
0f3c4     DE DC DB D9 
0f3c8     D7 D9 ED 07 
0f3cc     1E 23 1C 17 
0f3d0     15 12 10 0F | 	byte	$de, $dc, $db, $d9, $d7, $d9, $ed, $07, $1e, $23, $1c, $17, $15, $12, $10, $0f
0f3d4     0F 14 1F 2A 
0f3d8     33 34 32 2D 
0f3dc     23 19 11 0F 
0f3e0     0C 0A 09 08 | 	byte	$0f, $14, $1f, $2a, $33, $34, $32, $2d, $23, $19, $11, $0f, $0c, $0a, $09, $08
0f3e4     07 03 00 FD 
0f3e8     FB F9 FA 05 
0f3ec     14 1F 1D 15 
0f3f0     0F 09 05 02 | 	byte	$07, $03, $00, $fd, $fb, $f9, $fa, $05, $14, $1f, $1d, $15, $0f, $09, $05, $02
0f3f4     FE FB F6 ED 
0f3f8     E1 D6 D0 CF 
0f3fc     D1 D7 E0 E7 
0f400     E8 E4 E1 DE | 	byte	$fe, $fb, $f6, $ed, $e1, $d6, $d0, $cf, $d1, $d7, $e0, $e7, $e8, $e4, $e1, $de
0f404     DC DA D9 D7 
0f408     D5 D4 E0 F8 
0f40c     14 21 1C 16 
0f410     14 12 0F 0D | 	byte	$dc, $da, $d9, $d7, $d5, $d4, $e0, $f8, $14, $21, $1c, $16, $14, $12, $0f, $0d
0f414     0B 0E 17 25 
0f418     2F 34 32 29 
0f41c     1F 17 12 0F 
0f420     0C 0B 0B 09 | 	byte	$0b, $0e, $17, $25, $2f, $34, $32, $29, $1f, $17, $12, $0f, $0c, $0b, $0b, $09
0f424     07 04 01 FE 
0f428     FC FB 02 12 
0f42c     1F 22 1A 14 
0f430     0E 0A 06 02 | 	byte	$07, $04, $01, $fe, $fc, $fb, $02, $12, $1f, $22, $1a, $14, $0e, $0a, $06, $02
0f434     FF FB F8 F2 
0f438     E7 DB D2 D1 
0f43c     D7 E2 E9 EA 
0f440     E7 E3 DF DD | 	byte	$ff, $fb, $f8, $f2, $e7, $db, $d2, $d1, $d7, $e2, $e9, $ea, $e7, $e3, $df, $dd
0f444     DB D9 D7 D5 
0f448     D3 D1 D5 EB 
0f44c     09 1B 1D 18 
0f450     14 11 0E 0B | 	byte	$db, $d9, $d7, $d5, $d3, $d1, $d5, $eb, $09, $1b, $1d, $18, $14, $11, $0e, $0b
0f454     09 09 10 1C 
0f458     2C 34 32 27 
0f45c     1C 16 12 0F 
0f460     0D 0C 0B 0A | 	byte	$09, $09, $10, $1c, $2c, $34, $32, $27, $1c, $16, $12, $0f, $0d, $0c, $0b, $0a
0f464     08 05 02 00 
0f468     FE 02 10 1E 
0f46c     25 20 19 13 
0f470     0E 09 06 03 | 	byte	$08, $05, $02, $00, $fe, $02, $10, $1e, $25, $20, $19, $13, $0e, $09, $06, $03
0f474     FF FB F7 F3 
0f478     ED E1 D7 D6 
0f47c     E1 E9 EB E8 
0f480     E4 E0 DE DC | 	byte	$ff, $fb, $f7, $f3, $ed, $e1, $d7, $d6, $e1, $e9, $eb, $e8, $e4, $e0, $de, $dc
0f484     DA D7 D5 D3 
0f488     D1 CF D0 E3 
0f48c     FD 16 1E 18 
0f490     13 10 0C 09 | 	byte	$da, $d7, $d5, $d3, $d1, $cf, $d0, $e3, $fd, $16, $1e, $18, $13, $10, $0c, $09
0f494     08 06 09 15 
0f498     26 31 2F 25 
0f49c     1C 17 13 10 
0f4a0     0F 0E 0D 0A | 	byte	$08, $06, $09, $15, $26, $31, $2f, $25, $1c, $17, $13, $10, $0f, $0e, $0d, $0a
0f4a4     08 07 04 02 
0f4a8     02 0B 1B 26 
0f4ac     25 1E 18 13 
0f4b0     0F 0A 07 03 | 	byte	$08, $07, $04, $02, $02, $0b, $1b, $26, $25, $1e, $18, $13, $0f, $0a, $07, $03
0f4b4     00 FC F7 F3 
0f4b8     EF E8 E3 E3 
0f4bc     E8 EB EA E7 
0f4c0     E3 DF DD DB | 	byte	$00, $fc, $f7, $f3, $ef, $e8, $e3, $e3, $e8, $eb, $ea, $e7, $e3, $df, $dd, $db
0f4c4     D9 D6 D3 D1 
0f4c8     CF CE CD D9 
0f4cc     F3 11 1D 19 
0f4d0     13 0E 0B 08 | 	byte	$d9, $d6, $d3, $d1, $cf, $ce, $cd, $d9, $f3, $11, $1d, $19, $13, $0e, $0b, $08
0f4d4     05 04 07 10 
0f4d8     1F 2A 2B 23 
0f4dc     1C 17 14 11 
0f4e0     10 0F 0C 0A | 	byte	$05, $04, $07, $10, $1f, $2a, $2b, $23, $1c, $17, $14, $11, $10, $0f, $0c, $0a
0f4e4     09 07 05 03 
0f4e8     07 17 24 29 
0f4ec     23 1D 18 13 
0f4f0     0E 0A 07 04 | 	byte	$09, $07, $05, $03, $07, $17, $24, $29, $23, $1d, $18, $13, $0e, $0a, $07, $04
0f4f4     00 FC F7 F3 
0f4f8     F2 F1 EE EB 
0f4fc     E8 E9 E8 E5 
0f500     E1 DE DC DA | 	byte	$00, $fc, $f7, $f3, $f2, $f1, $ee, $eb, $e8, $e9, $e8, $e5, $e1, $de, $dc, $da
0f504     D7 D5 D2 CF 
0f508     CD CC CB D2 
0f50c     ED 0C 1B 19 
0f510     12 0D 0A 07 | 	byte	$d7, $d5, $d2, $cf, $cd, $cc, $cb, $d2, $ed, $0c, $1b, $19, $12, $0d, $0a, $07
0f514     04 03 05 0E 
0f518     18 21 24 22 
0f51c     1D 19 16 14 
0f520     12 0F 0D 0B | 	byte	$04, $03, $05, $0e, $18, $21, $24, $22, $1d, $19, $16, $14, $12, $0f, $0d, $0b
0f524     0A 09 05 05 
0f528     10 1E 2A 28 
0f52c     22 1D 18 13 
0f530     0E 0B 07 04 | 	byte	$0a, $09, $05, $05, $10, $1e, $2a, $28, $22, $1d, $18, $13, $0e, $0b, $07, $04
0f534     00 FB F8 F7 
0f538     F8 FB F7 EF 
0f53c     EA E7 E6 E3 
0f540     E0 DE DB D9 | 	byte	$00, $fb, $f8, $f7, $f8, $fb, $f7, $ef, $ea, $e7, $e6, $e3, $e0, $de, $db, $d9
0f544     D6 D3 D1 CE 
0f548     CC CB CA D0 
0f54c     EB 06 1A 17 
0f550     11 0C 08 05 | 	byte	$d6, $d3, $d1, $ce, $cc, $cb, $ca, $d0, $eb, $06, $1a, $17, $11, $0c, $08, $05
0f554     03 02 04 0C 
0f558     15 1C 20 20 
0f55c     1E 1A 17 15 
0f560     12 0F 0C 0B | 	byte	$03, $02, $04, $0c, $15, $1c, $20, $20, $1e, $1a, $17, $15, $12, $0f, $0c, $0b
0f564     0A 08 06 09 
0f568     17 24 2C 27 
0f56c     22 1C 17 13 
0f570     0F 0B 07 04 | 	byte	$0a, $08, $06, $09, $17, $24, $2c, $27, $22, $1c, $17, $13, $0f, $0b, $07, $04
0f574     00 FC FA FB 
0f578     FE 01 FD F3 
0f57c     EA E4 E4 E3 
0f580     E0 DE DA D8 | 	byte	$00, $fc, $fa, $fb, $fe, $01, $fd, $f3, $ea, $e4, $e4, $e3, $e0, $de, $da, $d8
0f584     D6 D3 D0 CE 
0f588     CC CB CA CF 
0f58c     E8 07 18 17 
0f590     0F 0B 07 05 | 	byte	$d6, $d3, $d0, $ce, $cc, $cb, $ca, $cf, $e8, $07, $18, $17, $0f, $0b, $07, $05
0f594     02 01 03 0B 
0f598     12 19 1D 20 
0f59c     1E 1B 19 17 
0f5a0     13 0F 0D 0C | 	byte	$02, $01, $03, $0b, $12, $19, $1d, $20, $1e, $1b, $19, $17, $13, $0f, $0d, $0c
0f5a4     0A 08 06 0C 
0f5a8     1A 29 2D 27 
0f5ac     21 1C 17 12 
0f5b0     0E 0A 08 04 | 	byte	$0a, $08, $06, $0c, $1a, $29, $2d, $27, $21, $1c, $17, $12, $0e, $0a, $08, $04
0f5b4     00 FF 00 02 
0f5b8     04 04 00 F4 
0f5bc     E8 E2 E2 E2 
0f5c0     DF DB D9 D6 | 	byte	$00, $ff, $00, $02, $04, $04, $00, $f4, $e8, $e2, $e2, $e2, $df, $db, $d9, $d6
0f5c4     D4 D1 CF CD 
0f5c8     CC CA C8 CE 
0f5cc     E6 02 16 16 
0f5d0     0E 09 05 03 | 	byte	$d4, $d1, $cf, $cd, $cc, $ca, $c8, $ce, $e6, $02, $16, $16, $0e, $09, $05, $03
0f5d4     01 00 05 0C 
0f5d8     13 19 1C 1F 
0f5dc     1C 1A 19 17 
0f5e0     13 10 0D 0B | 	byte	$01, $00, $05, $0c, $13, $19, $1c, $1f, $1c, $1a, $19, $17, $13, $10, $0d, $0b
0f5e4     09 07 06 11 
0f5e8     1F 2B 2B 26 
0f5ec     20 1B 15 11 
0f5f0     0D 0A 07 04 | 	byte	$09, $07, $06, $11, $1f, $2b, $2b, $26, $20, $1b, $15, $11, $0d, $0a, $07, $04
0f5f4     04 05 06 07 
0f5f8     07 05 FF F3 
0f5fc     E8 E0 E0 E0 
0f600     DD DA D7 D5 | 	byte	$04, $05, $06, $07, $07, $05, $ff, $f3, $e8, $e0, $e0, $e0, $dd, $da, $d7, $d5
0f604     D3 D1 CF CD 
0f608     CB C8 C7 CE 
0f60c     E5 04 14 13 
0f610     0D 07 04 02 | 	byte	$d3, $d1, $cf, $cd, $cb, $c8, $c7, $ce, $e5, $04, $14, $13, $0d, $07, $04, $02
0f614     FF 00 06 0E 
0f618     14 18 1C 1E 
0f61c     1C 1A 19 17 
0f620     14 11 0E 0B | 	byte	$ff, $00, $06, $0e, $14, $18, $1c, $1e, $1c, $1a, $19, $17, $14, $11, $0e, $0b
0f624     08 06 07 12 
0f628     22 2C 2A 25 
0f62c     1F 1A 15 10 
0f630     0D 0A 07 08 | 	byte	$08, $06, $07, $12, $22, $2c, $2a, $25, $1f, $1a, $15, $10, $0d, $0a, $07, $08
0f634     09 0A 0B 0A 
0f638     08 03 FD F3 
0f63c     E7 DF DD DD 
0f640     DB D8 D6 D4 | 	byte	$09, $0a, $0b, $0a, $08, $03, $fd, $f3, $e7, $df, $dd, $dd, $db, $d8, $d6, $d4
0f644     D3 D1 CF CC 
0f648     CA C7 C6 CC 
0f64c     E6 02 14 12 
0f650     0B 07 04 01 | 	byte	$d3, $d1, $cf, $cc, $ca, $c7, $c6, $cc, $e6, $02, $14, $12, $0b, $07, $04, $01
0f654     FF 01 0B 11 
0f658     15 19 1C 1E 
0f65c     1C 1A 19 17 
0f660     14 11 0E 0A | 	byte	$ff, $01, $0b, $11, $15, $19, $1c, $1e, $1c, $1a, $19, $17, $14, $11, $0e, $0a
0f664     07 04 08 15 
0f668     25 2D 29 24 
0f66c     1F 19 15 10 
0f670     0C 0A 0B 0C | 	byte	$07, $04, $08, $15, $25, $2d, $29, $24, $1f, $19, $15, $10, $0c, $0a, $0b, $0c
0f674     0D 0E 0D 0B 
0f678     05 01 FC F3 
0f67c     E6 DD DA DB 
0f680     DA D8 D6 D5 | 	byte	$0d, $0e, $0d, $0b, $05, $01, $fc, $f3, $e6, $dd, $da, $db, $da, $d8, $d6, $d5
0f684     D2 D0 CE CB 
0f688     C8 C6 C5 CD 
0f68c     E8 04 14 10 
0f690     0A 05 03 00 | 	byte	$d2, $d0, $ce, $cb, $c8, $c6, $c5, $cd, $e8, $04, $14, $10, $0a, $05, $03, $00
0f694     FF 06 0F 14 
0f698     16 18 1D 1E 
0f69c     1B 1A 18 16 
0f6a0     14 10 0D 09 | 	byte	$ff, $06, $0f, $14, $16, $18, $1d, $1e, $1b, $1a, $18, $16, $14, $10, $0d, $09
0f6a4     06 03 09 16 
0f6a8     26 2C 28 22 
0f6ac     1D 19 14 10 
0f6b0     0D 0E 0F 10 | 	byte	$06, $03, $09, $16, $26, $2c, $28, $22, $1d, $19, $14, $10, $0d, $0e, $0f, $10
0f6b4     10 10 0E 09 
0f6b8     03 FF FA F1 
0f6bc     E4 DA D7 D8 
0f6c0     D9 D7 D5 D4 | 	byte	$10, $10, $0e, $09, $03, $ff, $fa, $f1, $e4, $da, $d7, $d8, $d9, $d7, $d5, $d4
0f6c4     D1 CF CC C9 
0f6c8     C7 C5 C4 CF 
0f6cc     EB 05 13 0E 
0f6d0     08 05 02 00 | 	byte	$d1, $cf, $cc, $c9, $c7, $c5, $c4, $cf, $eb, $05, $13, $0e, $08, $05, $02, $00
0f6d4     03 0C 15 16 
0f6d8     17 1B 1E 1D 
0f6dc     1B 1A 18 16 
0f6e0     13 10 0C 09 | 	byte	$03, $0c, $15, $16, $17, $1b, $1e, $1d, $1b, $1a, $18, $16, $13, $10, $0c, $09
0f6e4     06 03 0A 18 
0f6e8     27 2B 26 21 
0f6ec     1C 17 13 10 
0f6f0     10 11 12 12 | 	byte	$06, $03, $0a, $18, $27, $2b, $26, $21, $1c, $17, $13, $10, $10, $11, $12, $12
0f6f4     12 11 0D 07 
0f6f8     02 FD F8 EE 
0f6fc     E2 D8 D5 D7 
0f700     D8 D7 D5 D3 | 	byte	$12, $11, $0d, $07, $02, $fd, $f8, $ee, $e2, $d8, $d5, $d7, $d8, $d7, $d5, $d3
0f704     D0 CE CB C8 
0f708     C6 C4 C4 D4 
0f70c     F2 0A 12 0C 
0f710     07 04 01 01 | 	byte	$d0, $ce, $cb, $c8, $c6, $c4, $c4, $d4, $f2, $0a, $12, $0c, $07, $04, $01, $01
0f714     09 13 18 17 
0f718     18 1C 1E 1D 
0f71c     1B 19 17 14 
0f720     12 0F 0B 08 | 	byte	$09, $13, $18, $17, $18, $1c, $1e, $1d, $1b, $19, $17, $14, $12, $0f, $0b, $08
0f724     05 02 09 19 
0f728     27 2A 24 20 
0f72c     1B 17 13 12 
0f730     14 14 14 14 | 	byte	$05, $02, $09, $19, $27, $2a, $24, $20, $1b, $17, $13, $12, $14, $14, $14, $14
0f734     14 11 0B 05 
0f738     00 FB F7 ED 
0f73c     E0 D6 D3 D5 
0f740     D7 D7 D5 D3 | 	byte	$14, $11, $0b, $05, $00, $fb, $f7, $ed, $e0, $d6, $d3, $d5, $d7, $d7, $d5, $d3
0f744     D0 CD C9 C7 
0f748     C5 C3 C5 D9 
0f74c     F4 0D 12 0B 
0f750     06 03 02 06 | 	byte	$d0, $cd, $c9, $c7, $c5, $c3, $c5, $d9, $f4, $0d, $12, $0b, $06, $03, $02, $06
0f754     10 19 1A 19 
0f758     1A 1E 1E 1C 
0f75c     1A 19 16 13 
0f760     11 0E 0B 07 | 	byte	$10, $19, $1a, $19, $1a, $1e, $1e, $1c, $1a, $19, $16, $13, $11, $0e, $0b, $07
0f764     03 01 0B 1A 
0f768     26 28 23 1F 
0f76c     1A 16 14 15 
0f770     16 15 14 15 | 	byte	$03, $01, $0b, $1a, $26, $28, $23, $1f, $1a, $16, $14, $15, $16, $15, $14, $15
0f774     14 0F 08 03 
0f778     FE F9 F5 EA 
0f77c     DE D4 D2 D3 
0f780     D5 D6 D4 D1 | 	byte	$14, $0f, $08, $03, $fe, $f9, $f5, $ea, $de, $d4, $d2, $d3, $d5, $d6, $d4, $d1
0f784     CE CA C8 C6 
0f788     C4 C3 C9 E3 
0f78c     01 11 0F 08 
0f790     05 02 03 0C | 	byte	$ce, $ca, $c8, $c6, $c4, $c3, $c9, $e3, $01, $11, $0f, $08, $05, $02, $03, $0c
0f794     17 1D 1A 1A 
0f798     1C 1E 1C 1A 
0f79c     19 18 15 12 
0f7a0     0F 0C 08 05 | 	byte	$17, $1d, $1a, $1a, $1c, $1e, $1c, $1a, $19, $18, $15, $12, $0f, $0c, $08, $05
0f7a4     01 FF 08 17 
0f7a8     24 26 21 1D 
0f7ac     19 17 18 18 
0f7b0     17 15 16 16 | 	byte	$01, $ff, $08, $17, $24, $26, $21, $1d, $19, $17, $18, $18, $17, $15, $16, $16
0f7b4     13 0C 06 01 
0f7b8     FD F9 F3 E7 
0f7bc     DC D3 D1 D3 
0f7c0     D4 D5 D3 D0 | 	byte	$13, $0c, $06, $01, $fd, $f9, $f3, $e7, $dc, $d3, $d1, $d3, $d4, $d5, $d3, $d0
0f7c4     CD C9 C7 C6 
0f7c8     C4 C3 D2 ED 
0f7cc     08 12 0C 07 
0f7d0     04 03 09 14 | 	byte	$cd, $c9, $c7, $c6, $c4, $c3, $d2, $ed, $08, $12, $0c, $07, $04, $03, $09, $14
0f7d4     1C 1E 1D 1D 
0f7d8     1E 1C 1A 19 
0f7dc     18 17 13 11 
0f7e0     0E 0B 08 04 | 	byte	$1c, $1e, $1d, $1d, $1e, $1c, $1a, $19, $18, $17, $13, $11, $0e, $0b, $08, $04
0f7e4     01 FF 07 15 
0f7e8     22 24 1F 1B 
0f7ec     19 19 1A 19 
0f7f0     17 16 17 15 | 	byte	$01, $ff, $07, $15, $22, $24, $1f, $1b, $19, $19, $1a, $19, $17, $16, $17, $15
0f7f4     10 0A 05 00 
0f7f8     FC F7 F0 E6 
0f7fc     D9 D1 D0 D1 
0f800     D3 D3 D2 CF | 	byte	$10, $0a, $05, $00, $fc, $f7, $f0, $e6, $d9, $d1, $d0, $d1, $d3, $d3, $d2, $cf
0f804     CB C9 C6 C5 
0f808     C4 C7 DD FC 
0f80c     10 11 09 06 
0f810     03 07 11 1B | 	byte	$cb, $c9, $c6, $c5, $c4, $c7, $dd, $fc, $10, $11, $09, $06, $03, $07, $11, $1b
0f814     1F 1F 1F 21 
0f818     1E 1A 18 18 
0f81c     17 15 13 10 
0f820     0C 09 05 02 | 	byte	$1f, $1f, $1f, $21, $1e, $1a, $18, $18, $17, $15, $13, $10, $0c, $09, $05, $02
0f824     FF FD 03 12 
0f828     1E 22 1E 1A 
0f82c     1A 1B 1B 19 
0f830     17 17 17 14 | 	byte	$ff, $fd, $03, $12, $1e, $22, $1e, $1a, $1a, $1b, $1b, $19, $17, $17, $17, $14
0f834     0E 08 03 FF 
0f838     FB F5 ED E1 
0f83c     D7 D0 D1 D1 
0f840     D2 D1 D1 CD | 	byte	$0e, $08, $03, $ff, $fb, $f5, $ed, $e1, $d7, $d0, $d1, $d1, $d2, $d1, $d1, $cd
0f844     CA C8 C6 C4 
0f848     C3 CF ED 07 
0f84c     13 0E 07 05 
0f850     06 0E 19 1F | 	byte	$ca, $c8, $c6, $c4, $c3, $cf, $ed, $07, $13, $0e, $07, $05, $06, $0e, $19, $1f
0f854     1F 21 24 23 
0f858     1D 17 16 15 
0f85c     15 14 11 0E 
0f860     0A 06 03 01 | 	byte	$1f, $21, $24, $23, $1d, $17, $16, $15, $15, $14, $11, $0e, $0a, $06, $03, $01
0f864     FE FC FF 0C 
0f868     1A 20 1C 19 
0f86c     1A 1C 1B 18 
0f870     17 17 16 11 | 	byte	$fe, $fc, $ff, $0c, $1a, $20, $1c, $19, $1a, $1c, $1b, $18, $17, $17, $16, $11
0f874     0B 06 01 FD 
0f878     F9 F4 EA DD 
0f87c     D3 CF D0 D0 
0f880     D0 CF CE CC | 	byte	$0b, $06, $01, $fd, $f9, $f4, $ea, $dd, $d3, $cf, $d0, $d0, $d0, $cf, $ce, $cc
0f884     C9 C7 C6 C4 
0f888     C7 DE FD 11 
0f88c     12 0A 06 05 
0f890     0B 17 1F 20 | 	byte	$c9, $c7, $c6, $c4, $c7, $de, $fd, $11, $12, $0a, $06, $05, $0b, $17, $1f, $20
0f894     20 26 29 24 
0f898     1B 16 15 15 
0f89c     14 13 10 0C 
0f8a0     08 05 01 FF | 	byte	$20, $26, $29, $24, $1b, $16, $15, $15, $14, $13, $10, $0c, $08, $05, $01, $ff
0f8a4     FD FB FA 05 
0f8a8     15 1E 1C 1A 
0f8ac     1C 1D 1A 18 
0f8b0     17 17 14 0F | 	byte	$fd, $fb, $fa, $05, $15, $1e, $1c, $1a, $1c, $1d, $1a, $18, $17, $17, $14, $0f
0f8b4     0A 04 00 FC 
0f8b8     F8 F1 E5 D9 
0f8bc     D0 CF D0 CF 
0f8c0     CF CE CD CC | 	byte	$0a, $04, $00, $fc, $f8, $f1, $e5, $d9, $d0, $cf, $d0, $cf, $cf, $ce, $cd, $cc
0f8c4     CA C8 C5 C5 
0f8c8     D2 F0 09 14 
0f8cc     0E 09 06 0A 
0f8d0     15 20 22 21 | 	byte	$ca, $c8, $c5, $c5, $d2, $f0, $09, $14, $0e, $09, $06, $0a, $15, $20, $22, $21
0f8d4     25 2C 2B 23 
0f8d8     19 14 12 12 
0f8dc     12 11 0E 0A 
0f8e0     06 03 00 FE | 	byte	$25, $2c, $2b, $23, $19, $14, $12, $12, $12, $11, $0e, $0a, $06, $03, $00, $fe
0f8e4     FB F8 F6 FF 
0f8e8     0E 1A 1C 1B 
0f8ec     1B 1B 18 17 
0f8f0     18 17 13 0E | 	byte	$fb, $f8, $f6, $ff, $0e, $1a, $1c, $1b, $1b, $1b, $18, $17, $18, $17, $13, $0e
0f8f4     08 03 FF FB 
0f8f8     F6 EE E0 D5 
0f8fc     CF D0 D0 CF 
0f900     CD CD CC CB | 	byte	$08, $03, $ff, $fb, $f6, $ee, $e0, $d5, $cf, $d0, $d0, $cf, $cd, $cd, $cc, $cb
0f904     CA C8 C6 CB 
0f908     E2 02 14 13 
0f90c     0B 08 0A 14 
0f910     1E 23 22 25 | 	byte	$ca, $c8, $c6, $cb, $e2, $02, $14, $13, $0b, $08, $0a, $14, $1e, $23, $22, $25
0f914     2C 30 2C 21 
0f918     19 13 11 11 
0f91c     10 0F 0C 08 
0f920     04 01 FE FC | 	byte	$2c, $30, $2c, $21, $19, $13, $11, $11, $10, $0f, $0c, $08, $04, $01, $fe, $fc
0f924     F9 F5 F2 F8 
0f928     05 14 1C 1B 
0f92c     1B 18 16 16 
0f930     17 15 11 0B | 	byte	$f9, $f5, $f2, $f8, $05, $14, $1c, $1b, $1b, $18, $16, $16, $17, $15, $11, $0b
0f934     06 01 FD F9 
0f938     F3 E9 DB D2 
0f93c     CF CF CF CE 
0f940     CC CC CC CB | 	byte	$06, $01, $fd, $f9, $f3, $e9, $db, $d2, $cf, $cf, $cf, $ce, $cc, $cc, $cc, $cb
0f944     CA C8 C9 DD 
0f948     FC 11 16 0F 
0f94c     0A 0B 13 1C 
0f950     22 23 26 2C | 	byte	$ca, $c8, $c9, $dd, $fc, $11, $16, $0f, $0a, $0b, $13, $1c, $22, $23, $26, $2c
0f954     30 30 2B 21 
0f958     18 11 0F 0D 
0f95c     0C 0B 08 05 
0f960     02 FE FC F9 | 	byte	$30, $30, $2b, $21, $18, $11, $0f, $0d, $0c, $0b, $08, $05, $02, $fe, $fc, $f9
0f964     F6 F3 EF F1 
0f968     FD 0E 1A 1C 
0f96c     19 15 14 16 
0f970     16 14 0F 09 | 	byte	$f6, $f3, $ef, $f1, $fd, $0e, $1a, $1c, $19, $15, $14, $16, $16, $14, $0f, $09
0f974     05 00 FC F7 
0f978     EF E4 D7 D0 
0f97c     CF CF CF CD 
0f980     CC CC CC CC | 	byte	$05, $00, $fc, $f7, $ef, $e4, $d7, $d0, $cf, $cf, $cf, $cd, $cc, $cc, $cc, $cc
0f984     CA CA D9 F7 
0f988     0F 18 11 0C 
0f98c     0E 14 1B 1F 
0f990     21 26 2C 31 | 	byte	$ca, $ca, $d9, $f7, $0f, $18, $11, $0c, $0e, $14, $1b, $1f, $21, $26, $2c, $31
0f994     31 2D 28 21 
0f998     18 10 0C 0A 
0f99c     09 08 06 03 
0f9a0     FF FC F9 F6 | 	byte	$31, $2d, $28, $21, $18, $10, $0c, $0a, $09, $08, $06, $03, $ff, $fc, $f9, $f6
0f9a4     F3 F0 ED EB 
0f9a8     F4 05 17 1C 
0f9ac     17 13 13 15 
0f9b0     16 12 0D 08 | 	byte	$f3, $f0, $ed, $eb, $f4, $05, $17, $1c, $17, $13, $13, $15, $16, $12, $0d, $08
0f9b4     03 FE FA F4 
0f9b8     EA DD D3 D0 
0f9bc     D0 CF CE CC 
0f9c0     CB CC CD CC | 	byte	$03, $fe, $fa, $f4, $ea, $dd, $d3, $d0, $d0, $cf, $ce, $cc, $cb, $cc, $cd, $cc
0f9c4     CB D3 EF 0C 
0f9c8     19 14 0F 10 
0f9cc     17 1C 1F 1F 
0f9d0     26 2E 33 34 | 	byte	$cb, $d3, $ef, $0c, $19, $14, $0f, $10, $17, $1c, $1f, $1f, $26, $2e, $33, $34
0f9d4     30 2B 26 21 
0f9d8     19 11 09 06 
0f9dc     06 05 03 00 
0f9e0     FD FA F7 F3 | 	byte	$30, $2b, $26, $21, $19, $11, $09, $06, $06, $05, $03, $00, $fd, $fa, $f7, $f3
0f9e4     F0 ED EB E7 
0f9e8     EC FD 11 1A 
0f9ec     16 10 11 14 
0f9f0     14 11 0B 07 | 	byte	$f0, $ed, $eb, $e7, $ec, $fd, $11, $1a, $16, $10, $11, $14, $14, $11, $0b, $07
0f9f4     01 FD F8 EE 
0f9f8     E3 D7 D2 D1 
0f9fc     D0 D0 CE CC 
0fa00     CC CD CD CD | 	byte	$01, $fd, $f8, $ee, $e3, $d7, $d2, $d1, $d0, $d0, $ce, $cc, $cc, $cd, $cd, $cd
0fa04     D0 E7 04 19 
0fa08     19 12 13 1A 
0fa0c     1F 1F 1D 22 
0fa10     2C 35 35 31 | 	byte	$d0, $e7, $04, $19, $19, $12, $13, $1a, $1f, $1f, $1d, $22, $2c, $35, $35, $31
0fa14     2D 29 26 21 
0fa18     19 0F 08 03 
0fa1c     02 01 00 FD 
0fa20     FB F7 F4 F0 | 	byte	$2d, $29, $26, $21, $19, $0f, $08, $03, $02, $01, $00, $fd, $fb, $f7, $f4, $f0
0fa24     EE EB E7 E3 
0fa28     E5 F4 0A 16 
0fa2c     14 0F 10 12 
0fa30     12 0F 0A 04 | 	byte	$ee, $eb, $e7, $e3, $e5, $f4, $0a, $16, $14, $0f, $10, $12, $12, $0f, $0a, $04
0fa34     FF FB F2 E6 
0fa38     DB D3 D2 D2 
0fa3c     D1 D0 CE CC 
0fa40     CD CD CE CF | 	byte	$ff, $fb, $f2, $e6, $db, $d3, $d2, $d2, $d1, $d0, $ce, $cc, $cd, $cd, $ce, $cf
0fa44     DD FC 14 1D 
0fa48     17 18 1E 22 
0fa4c     21 1D 21 2D 
0fa50     36 38 34 2F | 	byte	$dd, $fc, $14, $1d, $17, $18, $1e, $22, $21, $1d, $21, $2d, $36, $38, $34, $2f
0fa54     2B 28 25 20 
0fa58     1A 10 07 01 
0fa5c     FF FE FD FB 
0fa60     F9 F5 F1 EE | 	byte	$2b, $28, $25, $20, $1a, $10, $07, $01, $ff, $fe, $fd, $fb, $f9, $f5, $f1, $ee
0fa64     EB E8 E4 E0 
0fa68     E1 F0 03 12 
0fa6c     12 0D 0D 10 
0fa70     11 0D 07 02 | 	byte	$eb, $e8, $e4, $e0, $e1, $f0, $03, $12, $12, $0d, $0d, $10, $11, $0d, $07, $02
0fa74     FE F8 EE E0 
0fa78     D6 D3 D3 D2 
0fa7c     D1 CF CE CD 
0fa80     CD CE CF D6 | 	byte	$fe, $f8, $ee, $e0, $d6, $d3, $d3, $d2, $d1, $cf, $ce, $cd, $cd, $ce, $cf, $d6
0fa84     F1 0D 1D 1C 
0fa88     1E 23 26 23 
0fa8c     1F 22 2C 35 
0fa90     39 35 31 2E | 	byte	$f1, $0d, $1d, $1c, $1e, $23, $26, $23, $1f, $22, $2c, $35, $39, $35, $31, $2e
0fa94     2A 27 22 1D 
0fa98     19 10 07 FE 
0fa9c     FA F9 F9 F8 
0faa0     F5 F2 EF EB | 	byte	$2a, $27, $22, $1d, $19, $10, $07, $fe, $fa, $f9, $f9, $f8, $f5, $f2, $ef, $eb
0faa4     E9 E4 E1 DE 
0faa8     DE E8 FC 0C 
0faac     10 0C 0C 0F 
0fab0     10 0C 06 01 | 	byte	$e9, $e4, $e1, $de, $de, $e8, $fc, $0c, $10, $0c, $0c, $0f, $10, $0c, $06, $01
0fab4     FD F3 E6 DA 
0fab8     D4 D4 D3 D2 
0fabc     D1 D0 CE CE 
0fac0     CE CF D2 E7 | 	byte	$fd, $f3, $e6, $da, $d4, $d4, $d3, $d2, $d1, $d0, $ce, $ce, $ce, $cf, $d2, $e7
0fac4     02 1B 23 26 
0fac8     2A 2A 25 22 
0facc     26 2E 35 37 
0fad0     37 35 30 2D | 	byte	$02, $1b, $23, $26, $2a, $2a, $25, $22, $26, $2e, $35, $37, $37, $35, $30, $2d
0fad4     29 24 20 1C 
0fad8     18 11 06 FD 
0fadc     F7 F6 F6 F5 
0fae0     F3 EF EC E9 | 	byte	$29, $24, $20, $1c, $18, $11, $06, $fd, $f7, $f6, $f6, $f5, $f3, $ef, $ec, $e9
0fae4     E5 E1 DE DB 
0fae8     DC E4 F6 05 
0faec     0C 0A 0A 0D 
0faf0     0D 09 04 FF | 	byte	$e5, $e1, $de, $db, $dc, $e4, $f6, $05, $0c, $0a, $0a, $0d, $0d, $09, $04, $ff
0faf4     F9 ED E0 D6 
0faf8     D4 D3 D2 D1 
0fafc     D2 D0 CF CE 
0fb00     CF D0 DA F6 | 	byte	$f9, $ed, $e0, $d6, $d4, $d3, $d2, $d1, $d2, $d0, $cf, $ce, $cf, $d0, $da, $f6
0fb04     14 26 2C 2E 
0fb08     2D 27 26 2A 
0fb0c     30 34 34 35 
0fb10     36 34 2F 2A | 	byte	$14, $26, $2c, $2e, $2d, $27, $26, $2a, $30, $34, $34, $35, $36, $34, $2f, $2a
0fb14     26 22 1E 1A 
0fb18     15 0F 05 FC 
0fb1c     F4 F2 F1 F1 
0fb20     EF ED E9 E6 | 	byte	$26, $22, $1e, $1a, $15, $0f, $05, $fc, $f4, $f2, $f1, $f1, $ef, $ed, $e9, $e6
0fb24     E2 DF DB D9 
0fb28     DA E1 F1 FF 
0fb2c     09 0A 0A 0B 
0fb30     0B 07 03 FE | 	byte	$e2, $df, $db, $d9, $da, $e1, $f1, $ff, $09, $0a, $0a, $0b, $0b, $07, $03, $fe
0fb34     F4 E7 DB D5 
0fb38     D4 D3 D2 D2 
0fb3c     D3 D1 D0 CF 
0fb40     D1 D5 E7 08 | 	byte	$f4, $e7, $db, $d5, $d4, $d3, $d2, $d2, $d3, $d1, $d0, $cf, $d1, $d5, $e7, $08
0fb44     25 34 33 2F 
0fb48     2A 29 2E 34 
0fb4c     36 33 33 35 
0fb50     36 32 2C 28 | 	byte	$25, $34, $33, $2f, $2a, $29, $2e, $34, $36, $33, $33, $35, $36, $32, $2c, $28
0fb54     24 20 1C 17 
0fb58     13 0D 05 FC 
0fb5c     F3 EF EE ED 
0fb60     EC EB E8 E3 | 	byte	$24, $20, $1c, $17, $13, $0d, $05, $fc, $f3, $ef, $ee, $ed, $ec, $eb, $e8, $e3
0fb64     E0 DD D9 D8 
0fb68     D9 DF EE FD 
0fb6c     07 08 08 0A 
0fb70     0A 06 01 FB | 	byte	$e0, $dd, $d9, $d8, $d9, $df, $ee, $fd, $07, $08, $08, $0a, $0a, $06, $01, $fb
0fb74     EF E2 D8 D4 
0fb78     D3 D2 D2 D3 
0fb7c     D3 D1 D0 D1 
0fb80     D3 DA F5 1B | 	byte	$ef, $e2, $d8, $d4, $d3, $d2, $d2, $d3, $d3, $d1, $d0, $d1, $d3, $da, $f5, $1b
0fb84     34 3A 33 2E 
0fb88     2D 31 37 39 
0fb8c     37 34 33 34 
0fb90     33 30 2B 27 | 	byte	$34, $3a, $33, $2e, $2d, $31, $37, $39, $37, $34, $33, $34, $33, $30, $2b, $27
0fb94     23 1F 1A 15 
0fb98     10 0B 04 FB 
0fb9c     F2 ED EA E9 
0fba0     E9 E8 E6 E1 | 	byte	$23, $1f, $1a, $15, $10, $0b, $04, $fb, $f2, $ed, $ea, $e9, $e9, $e8, $e6, $e1
0fba4     DD DA D7 D7 
0fba8     D9 DF EB FB 
0fbac     05 08 07 09 
0fbb0     08 05 00 F7 | 	byte	$dd, $da, $d7, $d7, $d9, $df, $eb, $fb, $05, $08, $07, $09, $08, $05, $00, $f7
0fbb4     EB DE D7 D5 
0fbb8     D3 D3 D3 D3 
0fbbc     D3 D2 D2 D3 
0fbc0     D4 E6 09 2C | 	byte	$eb, $de, $d7, $d5, $d3, $d3, $d3, $d3, $d3, $d2, $d2, $d3, $d4, $e6, $09, $2c
0fbc4     3E 38 31 30 
0fbc8     34 3A 3C 39 
0fbcc     36 33 31 30 
0fbd0     31 2E 2A 25 | 	byte	$3e, $38, $31, $30, $34, $3a, $3c, $39, $36, $33, $31, $30, $31, $2e, $2a, $25
0fbd4     20 1B 17 12 
0fbd8     0D 08 03 FA 
0fbdc     F1 EB E7 E6 
0fbe0     E4 E4 E3 DF | 	byte	$20, $1b, $17, $12, $0d, $08, $03, $fa, $f1, $eb, $e7, $e6, $e4, $e4, $e3, $df
0fbe4     DC D8 D5 D6 
0fbe8     D8 DE EC FA 
0fbec     05 06 06 07 
0fbf0     07 03 FD F3 | 	byte	$dc, $d8, $d5, $d6, $d8, $de, $ec, $fa, $05, $06, $06, $07, $07, $03, $fd, $f3
0fbf4     E5 DB D5 D4 
0fbf8     D3 D3 D3 D2 
0fbfc     D2 D2 D4 D4 
0fc00     DA F2 1A 36 | 	byte	$e5, $db, $d5, $d4, $d3, $d3, $d3, $d2, $d2, $d2, $d4, $d4, $da, $f2, $1a, $36
0fc04     3D 35 32 36 
0fc08     3C 3F 3D 3A 
0fc0c     36 31 2F 2E 
0fc10     2F 2D 28 23 | 	byte	$3d, $35, $32, $36, $3c, $3f, $3d, $3a, $36, $31, $2f, $2e, $2f, $2d, $28, $23
0fc14     1E 19 15 10 
0fc18     0B 06 01 F8 
0fc1c     EF E9 E5 E3 
0fc20     E2 E2 E1 DD | 	byte	$1e, $19, $15, $10, $0b, $06, $01, $f8, $ef, $e9, $e5, $e3, $e2, $e2, $e1, $dd
0fc24     DA D6 D5 D6 
0fc28     D8 DE EB FB 
0fc2c     05 06 05 06 
0fc30     05 01 FB EE | 	byte	$da, $d6, $d5, $d6, $d8, $de, $eb, $fb, $05, $06, $05, $06, $05, $01, $fb, $ee
0fc34     E2 D9 D5 D4 
0fc38     D4 D3 D3 D3 
0fc3c     D3 D5 D6 DA 
0fc40     E4 02 25 39 | 	byte	$e2, $d9, $d5, $d4, $d4, $d3, $d3, $d3, $d3, $d5, $d6, $da, $e4, $02, $25, $39
0fc44     3C 36 38 3E 
0fc48     42 3F 3B 38 
0fc4c     34 30 2D 2C 
0fc50     2C 2A 26 21 | 	byte	$3c, $36, $38, $3e, $42, $3f, $3b, $38, $34, $30, $2d, $2c, $2c, $2a, $26, $21
0fc54     1B 17 12 0E 
0fc58     08 04 FF F7 
0fc5c     EE E7 E3 E0 
0fc60     DF DF DE DC | 	byte	$1b, $17, $12, $0e, $08, $04, $ff, $f7, $ee, $e7, $e3, $e0, $df, $df, $de, $dc
0fc64     D8 D5 D4 D6 
0fc68     D8 DF EE FE 
0fc6c     05 04 05 06 
0fc70     04 01 F8 EC | 	byte	$d8, $d5, $d4, $d6, $d8, $df, $ee, $fe, $05, $04, $05, $06, $04, $01, $f8, $ec
0fc74     DF D8 D6 D5 
0fc78     D5 D4 D2 D3 
0fc7c     D4 D7 DB E3 
0fc80     F1 0E 27 3A | 	byte	$df, $d8, $d6, $d5, $d5, $d4, $d2, $d3, $d4, $d7, $db, $e3, $f1, $0e, $27, $3a
0fc84     3C 3B 41 45 
0fc88     43 3E 3A 37 
0fc8c     33 2F 2B 29 
0fc90     28 27 25 1F | 	byte	$3c, $3b, $41, $45, $43, $3e, $3a, $37, $33, $2f, $2b, $29, $28, $27, $25, $1f
0fc94     1A 15 10 0C 
0fc98     06 02 FC F5 
0fc9c     EC E5 E2 DF 
0fca0     DD DC DB DA | 	byte	$1a, $15, $10, $0c, $06, $02, $fc, $f5, $ec, $e5, $e2, $df, $dd, $dc, $db, $da
0fca4     D7 D4 D5 D7 
0fca8     D9 E1 F0 FE 
0fcac     05 05 05 05 
0fcb0     02 FF F6 E9 | 	byte	$d7, $d4, $d5, $d7, $d9, $e1, $f0, $fe, $05, $05, $05, $05, $02, $ff, $f6, $e9
0fcb4     DC D7 D6 D6 
0fcb8     D5 D3 D2 D3 
0fcbc     D6 DB E4 EC 
0fcc0     F7 0F 29 3C | 	byte	$dc, $d7, $d6, $d6, $d5, $d3, $d2, $d3, $d6, $db, $e4, $ec, $f7, $0f, $29, $3c
0fcc4     40 43 47 45 
0fcc8     40 3C 39 35 
0fccc     32 2D 29 26 
0fcd0     24 24 22 1E | 	byte	$40, $43, $47, $45, $40, $3c, $39, $35, $32, $2d, $29, $26, $24, $24, $22, $1e
0fcd4     17 13 0E 0A 
0fcd8     04 FF FA F3 
0fcdc     E9 E3 DF DD 
0fce0     DB DA D9 D8 | 	byte	$17, $13, $0e, $0a, $04, $ff, $fa, $f3, $e9, $e3, $df, $dd, $db, $da, $d9, $d8
0fce4     D6 D5 D7 D9 
0fce8     DB E3 F4 02 
0fcec     06 05 06 05 
0fcf0     01 FD F4 E8 | 	byte	$d6, $d5, $d7, $d9, $db, $e3, $f4, $02, $06, $05, $06, $05, $01, $fd, $f4, $e8
0fcf4     DC D7 D7 D6 
0fcf8     D5 D3 D4 D5 
0fcfc     D9 E1 EA F0 
0fd00     F8 10 2D 3D | 	byte	$dc, $d7, $d7, $d6, $d5, $d3, $d4, $d5, $d9, $e1, $ea, $f0, $f8, $10, $2d, $3d
0fd04     43 45 47 43 
0fd08     3F 3C 39 35 
0fd0c     31 2C 28 25 
0fd10     22 22 20 1D | 	byte	$43, $45, $47, $43, $3f, $3c, $39, $35, $31, $2c, $28, $25, $22, $22, $20, $1d
0fd14     17 12 0E 09 
0fd18     03 FF F9 F0 
0fd1c     E8 E2 DF DD 
0fd20     DB DA D9 D8 | 	byte	$17, $12, $0e, $09, $03, $ff, $f9, $f0, $e8, $e2, $df, $dd, $db, $da, $d9, $d8
0fd24     D6 D5 D6 D9 
0fd28     DC E8 F9 03 
0fd2c     04 03 04 04 
0fd30     01 FC F3 E7 | 	byte	$d6, $d5, $d6, $d9, $dc, $e8, $f9, $03, $04, $03, $04, $04, $01, $fc, $f3, $e7
0fd34     DD D8 D7 D6 
0fd38     D5 D5 D6 D7 
0fd3c     DA E1 EB F0 
0fd40     F8 11 2B 3E | 	byte	$dd, $d8, $d7, $d6, $d5, $d5, $d6, $d7, $da, $e1, $eb, $f0, $f8, $11, $2b, $3e
0fd44     43 45 47 44 
0fd48     40 3D 39 36 
0fd4c     32 2D 28 24 
0fd50     20 1F 1E 1C | 	byte	$43, $45, $47, $44, $40, $3d, $39, $36, $32, $2d, $28, $24, $20, $1f, $1e, $1c
0fd54     18 12 0D 08 
0fd58     03 FE F9 F0 
0fd5c     E6 E1 DF DE 
0fd60     DB D9 D7 D7 | 	byte	$18, $12, $0d, $08, $03, $fe, $f9, $f0, $e6, $e1, $df, $de, $db, $d9, $d7, $d7
0fd64     D6 D4 D7 D9 
0fd68     E1 EF FE 05 
0fd6c     02 02 04 04 
0fd70     01 FC F3 E8 | 	byte	$d6, $d4, $d7, $d9, $e1, $ef, $fe, $05, $02, $02, $04, $04, $01, $fc, $f3, $e8
0fd74     DD D8 D7 D6 
0fd78     D6 D7 D8 D8 
0fd7c     DA E2 EB F1 
0fd80     F9 10 2E 3F | 	byte	$dd, $d8, $d7, $d6, $d6, $d7, $d8, $d8, $da, $e2, $eb, $f1, $f9, $10, $2e, $3f
0fd84     43 44 46 44 
0fd88     41 3C 39 35 
0fd8c     31 2D 28 23 
0fd90     1F 1C 1B 19 | 	byte	$43, $44, $46, $44, $41, $3c, $39, $35, $31, $2d, $28, $23, $1f, $1c, $1b, $19
0fd94     17 11 0C 07 
0fd98     02 FE F7 EE 
0fd9c     E6 E0 DE DC 
0fda0     DA D8 D7 D6 | 	byte	$17, $11, $0c, $07, $02, $fe, $f7, $ee, $e6, $e0, $de, $dc, $da, $d8, $d7, $d6
0fda4     D5 D5 D7 DB 
0fda8     E6 F7 03 05 
0fdac     01 01 03 03 
0fdb0     00 FC F3 E7 | 	byte	$d5, $d5, $d7, $db, $e6, $f7, $03, $05, $01, $01, $03, $03, $00, $fc, $f3, $e7
0fdb4     DE D8 D7 D6 
0fdb8     D7 D9 D9 D8 
0fdbc     DA E1 EB F0 
0fdc0     F6 0B 29 3D | 	byte	$de, $d8, $d7, $d6, $d7, $d9, $d9, $d8, $da, $e1, $eb, $f0, $f6, $0b, $29, $3d
0fdc4     43 44 46 45 
0fdc8     41 3D 39 35 
0fdcc     31 2D 28 23 
0fdd0     1E 1A 19 18 | 	byte	$43, $44, $46, $45, $41, $3d, $39, $35, $31, $2d, $28, $23, $1e, $1a, $19, $18
0fdd4     17 12 0C 07 
0fdd8     02 FD F6 ED 
0fddc     E5 E0 DE DC 
0fde0     DA D8 D7 D6 | 	byte	$17, $12, $0c, $07, $02, $fd, $f6, $ed, $e5, $e0, $de, $dc, $da, $d8, $d7, $d6
0fde4     D5 D5 D8 DF 
0fde8     F0 FF 07 03 
0fdec     00 01 03 02 
0fdf0     00 FC F4 E9 | 	byte	$d5, $d5, $d8, $df, $f0, $ff, $07, $03, $00, $01, $03, $02, $00, $fc, $f4, $e9
0fdf4     DE D9 D8 D8 
0fdf8     D9 DA D9 D8 
0fdfc     D9 E0 EA F0 
0fe00     F4 08 23 3A | 	byte	$de, $d9, $d8, $d8, $d9, $da, $d9, $d8, $d9, $e0, $ea, $f0, $f4, $08, $23, $3a
0fe04     41 42 45 45 
0fe08     41 3D 39 35 
0fe0c     31 2C 27 22 
0fe10     1E 19 16 15 | 	byte	$41, $42, $45, $45, $41, $3d, $39, $35, $31, $2c, $27, $22, $1e, $19, $16, $15
0fe14     14 11 0C 06 
0fe18     02 FC F5 EC 
0fe1c     E4 E0 DE DC 
0fe20     DA D8 D7 D6 | 	byte	$14, $11, $0c, $06, $02, $fc, $f5, $ec, $e4, $e0, $de, $dc, $da, $d8, $d7, $d6
0fe24     D5 D6 DA E7 
0fe28     FA 06 09 03 
0fe2c     00 02 03 03 
0fe30     00 FC F4 EA | 	byte	$d5, $d6, $da, $e7, $fa, $06, $09, $03, $00, $02, $03, $03, $00, $fc, $f4, $ea
0fe34     DE DA DA DA 
0fe38     DB DB D9 D8 
0fe3c     D9 E0 E9 EF 
0fe40     F2 00 1C 34 | 	byte	$de, $da, $da, $da, $db, $db, $d9, $d8, $d9, $e0, $e9, $ef, $f2, $00, $1c, $34
0fe44     40 42 45 46 
0fe48     43 3D 39 35 
0fe4c     30 2C 27 22 
0fe50     1E 19 15 13 | 	byte	$40, $42, $45, $46, $43, $3d, $39, $35, $30, $2c, $27, $22, $1e, $19, $15, $13
0fe54     12 11 0C 07 
0fe58     02 FC F4 EA 
0fe5c     E4 E0 DE DC 
0fe60     DA D9 D8 D7 | 	byte	$12, $11, $0c, $07, $02, $fc, $f4, $ea, $e4, $e0, $de, $dc, $da, $d9, $d8, $d7
0fe64     D6 D8 E0 F3 
0fe68     03 0B 07 02 
0fe6c     00 01 02 03 
0fe70     00 FD F7 EB | 	byte	$d6, $d8, $e0, $f3, $03, $0b, $07, $02, $00, $01, $02, $03, $00, $fd, $f7, $eb
0fe74     E0 DA DB DC 
0fe78     DB D9 D7 D6 
0fe7c     D7 DD E7 ED 
0fe80     EF F9 14 2D | 	byte	$e0, $da, $db, $dc, $db, $d9, $d7, $d6, $d7, $dd, $e7, $ed, $ef, $f9, $14, $2d
0fe84     3D 40 43 45 
0fe88     43 3E 39 34 
0fe8c     2F 2B 27 22 
0fe90     1D 18 14 11 | 	byte	$3d, $40, $43, $45, $43, $3e, $39, $34, $2f, $2b, $27, $22, $1d, $18, $14, $11
0fe94     0F 0F 0C 08 
0fe98     02 FB F1 E9 
0fe9c     E3 E1 DE DC 
0fea0     DA D9 D9 D8 | 	byte	$0f, $0f, $0c, $08, $02, $fb, $f1, $e9, $e3, $e1, $de, $dc, $da, $d9, $d9, $d8
0fea4     D8 DC EA FE 
0fea8     0B 0C 06 03 
0feac     00 02 03 03 
0feb0     00 FD F8 EE | 	byte	$d8, $dc, $ea, $fe, $0b, $0c, $06, $03, $00, $02, $03, $03, $00, $fd, $f8, $ee
0feb4     E2 DD DD DE 
0feb8     DB D9 D6 D5 
0febc     D6 DC E5 EC 
0fec0     ED F2 07 24 | 	byte	$e2, $dd, $dd, $de, $db, $d9, $d6, $d5, $d6, $dc, $e5, $ec, $ed, $f2, $07, $24
0fec4     39 3F 43 45 
0fec8     43 3D 39 34 
0fecc     30 2B 26 22 
0fed0     1D 19 15 10 | 	byte	$39, $3f, $43, $45, $43, $3d, $39, $34, $30, $2b, $26, $22, $1d, $19, $15, $10
0fed4     0E 0E 0C 08 
0fed8     02 FA F0 E8 
0fedc     E4 E2 DF DD 
0fee0     DB DA DA DA | 	byte	$0e, $0e, $0c, $08, $02, $fa, $f0, $e8, $e4, $e2, $df, $dd, $db, $da, $da, $da
0fee4     DB E4 F9 0A 
0fee8     0F 0B 06 03 
0feec     01 03 04 03 
0fef0     00 FD F9 F1 | 	byte	$db, $e4, $f9, $0a, $0f, $0b, $06, $03, $01, $03, $04, $03, $00, $fd, $f9, $f1
0fef4     E7 E0 DD DD 
0fef8     DB D8 D6 D4 
0fefc     D4 D9 E2 E9 
0ff00     EC ED FE 1B | 	byte	$e7, $e0, $dd, $dd, $db, $d8, $d6, $d4, $d4, $d9, $e2, $e9, $ec, $ed, $fe, $1b
0ff04     31 3D 40 44 
0ff08     43 3E 39 34 
0ff0c     2F 2B 27 22 
0ff10     1D 19 14 10 | 	byte	$31, $3d, $40, $44, $43, $3e, $39, $34, $2f, $2b, $27, $22, $1d, $19, $14, $10
0ff14     0D 0C 0B 09 
0ff18     01 F8 EF E8 
0ff1c     E5 E3 E0 DE 
0ff20     DB DB DC DC | 	byte	$0d, $0c, $0b, $09, $01, $f8, $ef, $e8, $e5, $e3, $e0, $de, $db, $db, $dc, $dc
0ff24     E1 F3 06 11 
0ff28     0E 0A 06 04 
0ff2c     03 04 06 04 
0ff30     01 FD FA F5 | 	byte	$e1, $f3, $06, $11, $0e, $0a, $06, $04, $03, $04, $06, $04, $01, $fd, $fa, $f5
0ff34     EC E3 DD DC 
0ff38     DB D8 D5 D3 
0ff3c     D2 D6 DE E5 
0ff40     E9 E9 F3 0B | 	byte	$ec, $e3, $dd, $dc, $db, $d8, $d5, $d3, $d2, $d6, $de, $e5, $e9, $e9, $f3, $0b
0ff44     28 38 3E 41 
0ff48     42 3E 38 33 
0ff4c     2F 2B 27 22 
0ff50     1D 19 14 0F | 	byte	$28, $38, $3e, $41, $42, $3e, $38, $33, $2f, $2b, $27, $22, $1d, $19, $14, $0f
0ff54     0C 0B 0A 08 
0ff58     01 F6 ED E9 
0ff5c     E6 E3 E0 DE 
0ff60     DC DC DE E1 | 	byte	$0c, $0b, $0a, $08, $01, $f6, $ed, $e9, $e6, $e3, $e0, $de, $dc, $dc, $de, $e1
0ff64     EF 03 13 13 
0ff68     0D 0A 07 05 
0ff6c     04 06 06 04 
0ff70     00 FD FB F8 | 	byte	$ef, $03, $13, $13, $0d, $0a, $07, $05, $04, $06, $06, $04, $00, $fd, $fb, $f8
0ff74     F0 E6 DD DA 
0ff78     D9 D7 D4 D3 
0ff7c     D1 D2 D8 E1 
0ff80     E7 E7 EA 00 | 	byte	$f0, $e6, $dd, $da, $d9, $d7, $d4, $d3, $d1, $d2, $d8, $e1, $e7, $e7, $ea, $00
0ff84     1B 31 3B 3D 
0ff88     3F 3E 39 34 
0ff8c     2F 2B 27 23 
0ff90     1E 19 14 10 | 	byte	$1b, $31, $3b, $3d, $3f, $3e, $39, $34, $2f, $2b, $27, $23, $1e, $19, $14, $10
0ff94     0C 0B 0B 07 
0ff98     FD F5 EE EB 
0ff9c     E8 E5 E1 DF 
0ffa0     DE DF E1 EC | 	byte	$0c, $0b, $0b, $07, $fd, $f5, $ee, $eb, $e8, $e5, $e1, $df, $de, $df, $e1, $ec
0ffa4     01 12 18 12 
0ffa8     0D 0B 08 05 
0ffac     06 07 08 04 
0ffb0     00 FD FD FB | 	byte	$01, $12, $18, $12, $0d, $0b, $08, $05, $06, $07, $08, $04, $00, $fd, $fd, $fb
0ffb4     F5 E9 DD D9 
0ffb8     D7 D6 D4 D2 
0ffbc     D0 CF D3 DC 
0ffc0     E3 E6 E5 F1 | 	byte	$f5, $e9, $dd, $d9, $d7, $d6, $d4, $d2, $d0, $cf, $d3, $dc, $e3, $e6, $e5, $f1
0ffc4     0C 27 36 3A 
0ffc8     3C 3D 39 34 
0ffcc     2F 2B 27 23 
0ffd0     1E 1A 14 0F | 	byte	$0c, $27, $36, $3a, $3c, $3d, $39, $34, $2f, $2b, $27, $23, $1e, $1a, $14, $0f
0ffd4     0B 0A 09 04 
0ffd8     FC F4 EF EC 
0ffdc     E9 E6 E3 E1 
0ffe0     E1 E2 EA FF | 	byte	$0b, $0a, $09, $04, $fc, $f4, $ef, $ec, $e9, $e6, $e3, $e1, $e1, $e2, $ea, $ff
0ffe4     13 1C 17 12 
0ffe8     0E 0B 08 07 
0ffec     08 09 08 05 
0fff0     00 FE FD FD | 	byte	$13, $1c, $17, $12, $0e, $0b, $08, $07, $08, $09, $08, $05, $00, $fe, $fd, $fd
0fff4     F8 EC E1 D8 
0fff8     D6 D5 D3 D2 
0fffc     CF CD CF D6 
10000     DE E3 E3 E6 | 	byte	$f8, $ec, $e1, $d8, $d6, $d5, $d3, $d2, $cf, $cd, $cf, $d6, $de, $e3, $e3, $e6
10004     F9 14 2C 36 
10008     38 3A 39 35 
1000c     30 2C 27 23 
10010     1F 1A 15 11 | 	byte	$f9, $14, $2c, $36, $38, $3a, $39, $35, $30, $2c, $27, $23, $1f, $1a, $15, $11
10014     0D 0B 07 02 
10018     FA F5 F1 EE 
1001c     EB E8 E5 E3 
10020     E4 EB FE 14 | 	byte	$0d, $0b, $07, $02, $fa, $f5, $f1, $ee, $eb, $e8, $e5, $e3, $e4, $eb, $fe, $14
10024     1E 1B 15 12 
10028     0F 0C 09 09 
1002c     0A 0B 08 04 
10030     00 FE FE FD | 	byte	$1e, $1b, $15, $12, $0f, $0c, $09, $09, $0a, $0b, $08, $04, $00, $fe, $fe, $fd
10034     F9 EF E4 D9 
10038     D4 D3 D1 D0 
1003c     CE CB CA D0 
10040     D8 DF E1 E0 | 	byte	$f9, $ef, $e4, $d9, $d4, $d3, $d1, $d0, $ce, $cb, $ca, $d0, $d8, $df, $e1, $e0
10044     E7 01 1B 2F 
10048     35 37 38 35 
1004c     30 2C 29 23 
10050     20 1B 16 11 | 	byte	$e7, $01, $1b, $2f, $35, $37, $38, $35, $30, $2c, $29, $23, $20, $1b, $16, $11
10054     0D 09 05 00 
10058     FB F7 F4 F0 
1005c     EC E9 E8 E7 
10060     ED FF 14 22 | 	byte	$0d, $09, $05, $00, $fb, $f7, $f4, $f0, $ec, $e9, $e8, $e7, $ed, $ff, $14, $22
10064     20 1B 16 13 
10068     10 0D 0B 0C 
1006c     0D 0C 08 04 
10070     01 FF FE FD | 	byte	$20, $1b, $16, $13, $10, $0d, $0b, $0c, $0d, $0c, $08, $04, $01, $ff, $fe, $fd
10074     FA F3 E8 DC 
10078     D4 D1 D0 CF 
1007c     CC CA C7 CA 
10080     D1 DA DF DF | 	byte	$fa, $f3, $e8, $dc, $d4, $d1, $d0, $cf, $cc, $ca, $c7, $ca, $d1, $da, $df, $df
10084     E0 EF 0C 26 
10088     30 31 34 35 
1008c     31 2D 28 24 
10090     20 1B 16 12 | 	byte	$e0, $ef, $0c, $26, $30, $31, $34, $35, $31, $2d, $28, $24, $20, $1b, $16, $12
10094     0C 07 02 FF 
10098     FC F9 F6 F2 
1009c     EF EC EA EE 
100a0     FE 13 24 25 | 	byte	$0c, $07, $02, $ff, $fc, $f9, $f6, $f2, $ef, $ec, $ea, $ee, $fe, $13, $24, $25
100a4     20 1A 17 14 
100a8     11 0E 0D 0F 
100ac     0F 0B 07 04 
100b0     01 00 FE FD | 	byte	$20, $1a, $17, $14, $11, $0e, $0d, $0f, $0f, $0b, $07, $04, $01, $00, $fe, $fd
100b4     FA F5 ED E0 
100b8     D6 CF CE CD 
100bc     CA C8 C6 C6 
100c0     CB D3 DB DD | 	byte	$fa, $f5, $ed, $e0, $d6, $cf, $ce, $cd, $ca, $c8, $c6, $c6, $cb, $d3, $db, $dd
100c4     DB E1 FB 18 
100c8     29 2D 2F 32 
100cc     32 2E 29 25 
100d0     1F 1C 18 12 | 	byte	$db, $e1, $fb, $18, $29, $2d, $2f, $32, $32, $2e, $29, $25, $1f, $1c, $18, $12
100d4     0A 03 00 00 
100d8     FF FC F7 F4 
100dc     F1 EF F0 FE 
100e0     12 26 2A 25 | 	byte	$0a, $03, $00, $00, $ff, $fc, $f7, $f4, $f1, $ef, $f0, $fe, $12, $26, $2a, $25
100e4     1F 1B 18 15 
100e8     12 10 11 13 
100ec     11 0C 07 04 
100f0     02 01 00 FD | 	byte	$1f, $1b, $18, $15, $12, $10, $11, $13, $11, $0c, $07, $04, $02, $01, $00, $fd
100f4     F9 F5 F0 E8 
100f8     DB D0 CC CB 
100fc     CA C7 C5 C3 
10100     C5 CC D5 DA | 	byte	$f9, $f5, $f0, $e8, $db, $d0, $cc, $cb, $ca, $c7, $c5, $c3, $c5, $cc, $d5, $da
10104     D9 DA EC 09 
10108     20 29 28 2C 
1010c     2F 2E 29 25 
10110     20 1C 16 0F | 	byte	$d9, $da, $ec, $09, $20, $29, $28, $2c, $2f, $2e, $29, $25, $20, $1c, $16, $0f
10114     06 01 01 02 
10118     00 FD F9 F6 
1011c     F3 F2 FB 10 
10120     24 2E 2C 25 | 	byte	$06, $01, $01, $02, $00, $fd, $f9, $f6, $f3, $f2, $fb, $10, $24, $2e, $2c, $25
10124     20 1C 19 16 
10128     13 13 15 15 
1012c     12 0B 07 03 
10130     02 01 00 FD | 	byte	$20, $1c, $19, $16, $13, $13, $15, $15, $12, $0b, $07, $03, $02, $01, $00, $fd
10134     F8 F4 F0 E9 
10138     DF D3 CB C9 
1013c     C8 C6 C4 C1 
10140     C0 C4 CC D4 | 	byte	$f8, $f4, $f0, $e9, $df, $d3, $cb, $c9, $c8, $c6, $c4, $c1, $c0, $c4, $cc, $d4
10144     D8 D6 DF FA 
10148     15 25 24 25 
1014c     2B 2D 2A 25 
10150     21 1C 15 0C | 	byte	$d8, $d6, $df, $fa, $15, $25, $24, $25, $2b, $2d, $2a, $25, $21, $1c, $15, $0c
10154     05 02 04 05 
10158     03 FF FB F9 
1015c     F7 FC 0D 23 
10160     32 31 2B 26 | 	byte	$05, $02, $04, $05, $03, $ff, $fb, $f9, $f7, $fc, $0d, $23, $32, $31, $2b, $26
10164     21 1E 1A 17 
10168     16 18 19 17 
1016c     11 0C 07 03 
10170     02 02 00 FD | 	byte	$21, $1e, $1a, $17, $16, $18, $19, $17, $11, $0c, $07, $03, $02, $02, $00, $fd
10174     F8 F3 EF EC 
10178     E4 D8 CE C7 
1017c     C6 C5 C3 C0 
10180     BE BE C4 CD | 	byte	$f8, $f3, $ef, $ec, $e4, $d8, $ce, $c7, $c6, $c5, $c3, $c0, $be, $be, $c4, $cd
10184     D3 D3 D6 EB 
10188     0A 1F 23 1F 
1018c     22 28 29 25 
10190     20 1B 12 09 | 	byte	$d3, $d3, $d6, $eb, $0a, $1f, $23, $1f, $22, $28, $29, $25, $20, $1b, $12, $09
10194     03 03 06 07 
10198     04 01 FD FB 
1019c     FC 0A 1F 32 
101a0     37 32 2B 27 | 	byte	$03, $03, $06, $07, $04, $01, $fd, $fb, $fc, $0a, $1f, $32, $37, $32, $2b, $27
101a4     23 1F 1C 1A 
101a8     1A 1C 1B 17 
101ac     11 0C 06 03 
101b0     02 01 00 FC | 	byte	$23, $1f, $1c, $1a, $1a, $1c, $1b, $17, $11, $0c, $06, $03, $02, $01, $00, $fc
101b4     F8 F3 EF EB 
101b8     E7 DD D1 C8 
101bc     C4 C3 C1 BF 
101c0     BD BB BE C5 | 	byte	$f8, $f3, $ef, $eb, $e7, $dd, $d1, $c8, $c4, $c3, $c1, $bf, $bd, $bb, $be, $c5
101c4     CD D0 D1 E1 
101c8     FC 19 23 1D 
101cc     1C 21 26 26 
101d0     21 18 10 08 | 	byte	$cd, $d0, $d1, $e1, $fc, $19, $23, $1d, $1c, $21, $26, $26, $21, $18, $10, $08
101d4     05 07 08 09 
101d8     05 03 00 FE 
101dc     08 1C 31 3B 
101e0     37 30 2C 28 | 	byte	$05, $07, $08, $09, $05, $03, $00, $fe, $08, $1c, $31, $3b, $37, $30, $2c, $28
101e4     24 20 1D 1C 
101e8     1E 1F 1B 16 
101ec     10 0C 06 03 
101f0     02 02 00 FC | 	byte	$24, $20, $1d, $1c, $1e, $1f, $1b, $16, $10, $0c, $06, $03, $02, $02, $00, $fc
101f4     F7 F2 EE EA 
101f8     E7 DF D4 C9 
101fc     C2 C2 C0 BD 
10200     BA B9 B9 BD | 	byte	$f7, $f2, $ee, $ea, $e7, $df, $d4, $c9, $c2, $c2, $c0, $bd, $ba, $b9, $b9, $bd
10204     C5 CB CD D8 
10208     F1 11 20 1D 
1020c     17 19 1E 22 
10210     1F 15 0D 08 | 	byte	$c5, $cb, $cd, $d8, $f1, $11, $20, $1d, $17, $19, $1e, $22, $1f, $15, $0d, $08
10214     08 09 0A 0A 
10218     07 05 01 04 
1021c     15 2D 3C 3D 
10220     37 31 2C 29 | 	byte	$08, $09, $0a, $0a, $07, $05, $01, $04, $15, $2d, $3c, $3d, $37, $31, $2c, $29
10224     25 22 1F 21 
10228     22 21 1C 16 
1022c     11 0C 07 04 
10230     02 01 00 FC | 	byte	$25, $22, $1f, $21, $22, $21, $1c, $16, $11, $0c, $07, $04, $02, $01, $00, $fc
10234     F7 F2 ED EA 
10238     E7 E1 D7 CA 
1023c     C3 C0 BF BC 
10240     B9 B8 B7 B8 | 	byte	$f7, $f2, $ed, $ea, $e7, $e1, $d7, $ca, $c3, $c0, $bf, $bc, $b9, $b8, $b7, $b8
10244     BE C5 CA D2 
10248     EC 0A 1F 1E 
1024c     16 14 17 1C 
10250     1B 13 0C 09 | 	byte	$be, $c5, $ca, $d2, $ec, $0a, $1f, $1e, $16, $14, $17, $1c, $1b, $13, $0c, $09
10254     0A 0C 0D 0C 
10258     08 06 04 0D 
1025c     25 39 42 3D 
10260     36 32 2D 29 | 	byte	$0a, $0c, $0d, $0c, $08, $06, $04, $0d, $25, $39, $42, $3d, $36, $32, $2d, $29
10264     26 23 23 24 
10268     24 20 1B 16 
1026c     10 0B 06 04 
10270     03 01 FE FA | 	byte	$26, $23, $23, $24, $24, $20, $1b, $16, $10, $0b, $06, $04, $03, $01, $fe, $fa
10274     F6 F2 EE E9 
10278     E6 E3 DA CF 
1027c     C4 BE BD BB 
10280     B8 B6 B4 B4 | 	byte	$f6, $f2, $ee, $e9, $e6, $e3, $da, $cf, $c4, $be, $bd, $bb, $b8, $b6, $b4, $b4
10284     B8 BF C6 CF 
10288     E7 05 1C 1E 
1028c     16 11 12 14 
10290     14 11 0D 0C | 	byte	$b8, $bf, $c6, $cf, $e7, $05, $1c, $1e, $16, $11, $12, $14, $14, $11, $0d, $0c
10294     0D 0E 0F 0D 
10298     0A 08 0A 1B 
1029c     31 43 44 3D 
102a0     37 32 2E 2A | 	byte	$0d, $0e, $0f, $0d, $0a, $08, $0a, $1b, $31, $43, $44, $3d, $37, $32, $2e, $2a
102a4     27 25 26 27 
102a8     26 21 1B 15 
102ac     11 0C 07 04 
102b0     02 01 FE FA | 	byte	$27, $25, $26, $27, $26, $21, $1b, $15, $11, $0c, $07, $04, $02, $01, $fe, $fa
102b4     F6 F2 EE E9 
102b8     E5 E2 DB D0 
102bc     C5 BD BB B9 
102c0     B7 B5 B4 B2 | 	byte	$f6, $f2, $ee, $e9, $e5, $e2, $db, $d0, $c5, $bd, $bb, $b9, $b7, $b5, $b4, $b2
102c4     B3 B9 C1 CB 
102c8     E3 00 18 1C 
102cc     15 10 0D 0B 
102d0     0C 0D 0E 0D | 	byte	$b3, $b9, $c1, $cb, $e3, $00, $18, $1c, $15, $10, $0d, $0b, $0c, $0d, $0e, $0d
102d4     0F 11 10 0E 
102d8     0B 0A 11 26 
102dc     3E 48 43 3C 
102e0     37 33 2F 2B | 	byte	$0f, $11, $10, $0e, $0b, $0a, $11, $26, $3e, $48, $43, $3c, $37, $33, $2f, $2b
102e4     28 28 29 2A 
102e8     26 20 1A 15 
102ec     10 0C 08 04 
102f0     01 00 FE FA | 	byte	$28, $28, $29, $2a, $26, $20, $1a, $15, $10, $0c, $08, $04, $01, $00, $fe, $fa
102f4     F6 F1 ED E8 
102f8     E5 E1 DB D1 
102fc     C5 BC BA B8 
10300     B6 B4 B2 B1 | 	byte	$f6, $f1, $ed, $e8, $e5, $e1, $db, $d1, $c5, $bc, $ba, $b8, $b6, $b4, $b2, $b1
10304     B0 B4 BC C8 
10308     E2 FE 16 1C 
1030c     16 10 09 03 
10310     04 0A 0F 11 | 	byte	$b0, $b4, $bc, $c8, $e2, $fe, $16, $1c, $16, $10, $09, $03, $04, $0a, $0f, $11
10314     12 13 12 0F 
10318     0D 0E 1B 32 
1031c     46 4A 43 3D 
10320     38 34 2F 2B | 	byte	$12, $13, $12, $0f, $0d, $0e, $1b, $32, $46, $4a, $43, $3d, $38, $34, $2f, $2b
10324     2A 2B 2D 2B 
10328     26 1F 1B 15 
1032c     11 0C 08 04 
10330     01 FF FC F9 | 	byte	$2a, $2b, $2d, $2b, $26, $1f, $1b, $15, $11, $0c, $08, $04, $01, $ff, $fc, $f9
10334     F5 F2 EE E9 
10338     E4 E0 D9 CF 
1033c     C3 BB B9 B8 
10340     B6 B4 B1 B0 | 	byte	$f5, $f2, $ee, $e9, $e4, $e0, $d9, $cf, $c3, $bb, $b9, $b8, $b6, $b4, $b1, $b0
10344     AF B0 B9 C5 
10348     DD FD 13 1A 
1034c     14 0E 06 FE 
10350     FE 06 0F 14 | 	byte	$af, $b0, $b9, $c5, $dd, $fd, $13, $1a, $14, $0e, $06, $fe, $fe, $06, $0f, $14
10354     15 14 12 10 
10358     0E 12 25 3E 
1035c     4C 4A 44 3E 
10360     3A 35 30 2C | 	byte	$15, $14, $12, $10, $0e, $12, $25, $3e, $4c, $4a, $44, $3e, $3a, $35, $30, $2c
10364     2B 2D 2E 2C 
10368     26 20 1B 16 
1036c     12 0D 09 03 
10370     00 FE FC F9 | 	byte	$2b, $2d, $2e, $2c, $26, $20, $1b, $16, $12, $0d, $09, $03, $00, $fe, $fc, $f9
10374     F4 F1 ED E9 
10378     E4 DF D8 CC 
1037c     C2 BA B8 B7 
10380     B6 B4 B1 AF | 	byte	$f4, $f1, $ed, $e9, $e4, $df, $d8, $cc, $c2, $ba, $b8, $b7, $b6, $b4, $b1, $af
10384     AD AE B4 C1 
10388     DB FE 15 1A 
1038c     12 0A 02 FC 
10390     FD 05 10 17 | 	byte	$ad, $ae, $b4, $c1, $db, $fe, $15, $1a, $12, $0a, $02, $fc, $fd, $05, $10, $17
10394     18 15 12 10 
10398     10 19 2D 43 
1039c     4E 4A 44 3F 
103a0     3B 36 30 2C | 	byte	$18, $15, $12, $10, $10, $19, $2d, $43, $4e, $4a, $44, $3f, $3b, $36, $30, $2c
103a4     2D 30 30 2C 
103a8     25 20 1A 16 
103ac     11 0C 07 03 
103b0     FF FC FB F8 | 	byte	$2d, $30, $30, $2c, $25, $20, $1a, $16, $11, $0c, $07, $03, $ff, $fc, $fb, $f8
103b4     F4 F0 ED E7 
103b8     E3 DE D6 C9 
103bc     BE B9 B8 B7 
103c0     B5 B3 B0 AE | 	byte	$f4, $f0, $ed, $e7, $e3, $de, $d6, $c9, $be, $b9, $b8, $b7, $b5, $b3, $b0, $ae
103c4     AD AC AF BC 
103c8     DA FF 17 19 
103cc     0E 06 FF FB 
103d0     FE 07 13 1A | 	byte	$ad, $ac, $af, $bc, $da, $ff, $17, $19, $0e, $06, $ff, $fb, $fe, $07, $13, $1a
103d4     19 16 12 10 
103d8     11 1D 33 47 
103dc     4F 4B 45 41 
103e0     3B 36 30 2E | 	byte	$19, $16, $12, $10, $11, $1d, $33, $47, $4f, $4b, $45, $41, $3b, $36, $30, $2e
103e4     30 33 31 2B 
103e8     25 20 1B 16 
103ec     11 0C 08 03 
103f0     FE FB F9 F7 | 	byte	$30, $33, $31, $2b, $25, $20, $1b, $16, $11, $0c, $08, $03, $fe, $fb, $f9, $f7
103f4     F4 F0 EC E7 
103f8     E3 DD D2 C6 
103fc     BC B8 B8 B7 
10400     B5 B2 AF AD | 	byte	$f4, $f0, $ec, $e7, $e3, $dd, $d2, $c6, $bc, $b8, $b8, $b7, $b5, $b2, $af, $ad
10404     AC AB AD BA 
10408     DA 03 18 17 
1040c     0C 03 FD FC 
10410     00 0A 15 1C | 	byte	$ac, $ab, $ad, $ba, $da, $03, $18, $17, $0c, $03, $fd, $fc, $00, $0a, $15, $1c
10414     1A 16 13 12 
10418     14 21 38 4B 
1041c     51 4C 46 41 
10420     3B 36 31 30 | 	byte	$1a, $16, $13, $12, $14, $21, $38, $4b, $51, $4c, $46, $41, $3b, $36, $31, $30
10424     33 34 31 2B 
10428     25 1F 1A 16 
1042c     11 0C 07 02 
10430     FE FA F7 F6 | 	byte	$33, $34, $31, $2b, $25, $1f, $1a, $16, $11, $0c, $07, $02, $fe, $fa, $f7, $f6
10434     F3 EF EB E7 
10438     E3 DB D0 C3 
1043c     BA B8 B8 B7 
10440     B5 B2 AF AC | 	byte	$f3, $ef, $eb, $e7, $e3, $db, $d0, $c3, $ba, $b8, $b8, $b7, $b5, $b2, $af, $ac
10444     AB AB AC B6 
10448     DA FF 19 15 
1044c     09 FF FC FD 
10450     03 0E 18 1C | 	byte	$ab, $ab, $ac, $b6, $da, $ff, $19, $15, $09, $ff, $fc, $fd, $03, $0e, $18, $1c
10454     1B 17 14 12 
10458     16 24 3B 4D 
1045c     52 4D 47 41 
10460     3C 36 32 32 | 	byte	$1b, $17, $14, $12, $16, $24, $3b, $4d, $52, $4d, $47, $41, $3c, $36, $32, $32
10464     34 34 30 2A 
10468     25 20 1B 16 
1046c     10 0C 07 02 
10470     FD F8 F6 F5 | 	byte	$34, $34, $30, $2a, $25, $20, $1b, $16, $10, $0c, $07, $02, $fd, $f8, $f6, $f5
10474     F2 EF EB E6 
10478     E2 DA CC C0 
1047c     B9 B8 B8 B6 
10480     B4 B1 AE AB | 	byte	$f2, $ef, $eb, $e6, $e2, $da, $cc, $c0, $b9, $b8, $b8, $b6, $b4, $b1, $ae, $ab
10484     AA AA AC BC 
10488     DE 07 19 11 
1048c     05 FD FC FF 
10490     06 0F 18 1C | 	byte	$aa, $aa, $ac, $bc, $de, $07, $19, $11, $05, $fd, $fc, $ff, $06, $0f, $18, $1c
10494     19 16 14 12 
10498     15 23 3B 4D 
1049c     53 4D 46 40 
104a0     3B 37 34 34 | 	byte	$19, $16, $14, $12, $15, $23, $3b, $4d, $53, $4d, $46, $40, $3b, $37, $34, $34
104a4     35 34 2F 29 
104a8     24 20 1A 15 
104ac     10 0B 07 01 
104b0     FB F7 F4 F3 | 	byte	$35, $34, $2f, $29, $24, $20, $1a, $15, $10, $0b, $07, $01, $fb, $f7, $f4, $f3
104b4     F1 EE EA E6 
104b8     E1 D6 C9 BE 
104bc     B9 B9 B8 B6 
104c0     B3 B0 AD AB | 	byte	$f1, $ee, $ea, $e6, $e1, $d6, $c9, $be, $b9, $b9, $b8, $b6, $b3, $b0, $ad, $ab
104c4     AB AB AD BF 
104c8     E4 07 17 0F 
104cc     04 FE FF 02 
104d0     09 12 19 1D | 	byte	$ab, $ab, $ad, $bf, $e4, $07, $17, $0f, $04, $fe, $ff, $02, $09, $12, $19, $1d
104d4     1A 17 15 13 
104d8     16 24 3D 4E 
104dc     53 4D 46 41 
104e0     3C 37 36 36 | 	byte	$1a, $17, $15, $13, $16, $24, $3d, $4e, $53, $4d, $46, $41, $3c, $37, $36, $36
104e4     36 33 2E 29 
104e8     24 1F 1A 15 
104ec     10 0B 06 00 
104f0     FB F6 F3 F1 | 	byte	$36, $33, $2e, $29, $24, $1f, $1a, $15, $10, $0b, $06, $00, $fb, $f6, $f3, $f1
104f4     F0 EE E9 E5 
104f8     DF D3 C7 BC 
104fc     BA B9 B7 B6 
10500     B3 AF AC AB | 	byte	$f0, $ee, $e9, $e5, $df, $d3, $c7, $bc, $ba, $b9, $b7, $b6, $b3, $af, $ac, $ab
10504     AB AB B2 CC 
10508     F0 0B 11 0B 
1050c     02 FE 01 05 
10510     0A 12 19 1D | 	byte	$ab, $ab, $b2, $cc, $f0, $0b, $11, $0b, $02, $fe, $01, $05, $0a, $12, $19, $1d
10514     1A 17 14 13 
10518     15 23 38 4C 
1051c     52 4D 47 41 
10520     3C 37 37 38 | 	byte	$1a, $17, $14, $13, $15, $23, $38, $4c, $52, $4d, $47, $41, $3c, $37, $37, $38
10524     37 33 2D 29 
10528     24 1F 1A 14 
1052c     10 0B 05 00 
10530     FA F5 F2 F0 | 	byte	$37, $33, $2d, $29, $24, $1f, $1a, $14, $10, $0b, $05, $00, $fa, $f5, $f2, $f0
10534     EF EC E8 E4 
10538     DC CE C2 BC 
1053c     BB BA B8 B6 
10540     B2 AF AD AC | 	byte	$ef, $ec, $e8, $e4, $dc, $ce, $c2, $bc, $bb, $ba, $b8, $b6, $b2, $af, $ad, $ac
10544     AC AD BC D8 
10548     F7 0B 0D 08 
1054c     02 01 04 07 
10550     0C 13 1B 1D | 	byte	$ac, $ad, $bc, $d8, $f7, $0b, $0d, $08, $02, $01, $04, $07, $0c, $13, $1b, $1d
10554     1A 16 14 13 
10558     15 23 36 4A 
1055c     50 4D 46 40 
10560     3B 38 37 39 | 	byte	$1a, $16, $14, $13, $15, $23, $36, $4a, $50, $4d, $46, $40, $3b, $38, $37, $39
10564     37 32 2C 27 
10568     23 1E 19 14 
1056c     0F 0A 04 FE 
10570     F9 F5 F1 EE | 	byte	$37, $32, $2c, $27, $23, $1e, $19, $14, $0f, $0a, $04, $fe, $f9, $f5, $f1, $ee
10574     ED EB E7 E2 
10578     D7 C9 C0 BC 
1057c     BC BA B7 B5 
10580     B2 AF AD AC | 	byte	$ed, $eb, $e7, $e2, $d7, $c9, $c0, $bc, $bc, $ba, $b7, $b5, $b2, $af, $ad, $ac
10584     AC B2 CB E8 
10588     FF 06 06 05 
1058c     02 03 05 07 
10590     0C 14 1C 1C | 	byte	$ac, $b2, $cb, $e8, $ff, $06, $06, $05, $02, $03, $05, $07, $0c, $14, $1c, $1c
10594     18 15 14 14 
10598     15 1F 31 45 
1059c     4F 4C 46 40 
105a0     3B 38 38 39 | 	byte	$18, $15, $14, $14, $15, $1f, $31, $45, $4f, $4c, $46, $40, $3b, $38, $38, $39
105a4     36 31 2B 27 
105a8     22 1D 19 14 
105ac     0F 09 03 FE 
105b0     F9 F5 F0 EE | 	byte	$36, $31, $2b, $27, $22, $1d, $19, $14, $0f, $09, $03, $fe, $f9, $f5, $f0, $ee
105b4     EC EA E6 DD 
105b8     D0 C6 BF BD 
105bc     BC BA B8 B5 
105c0     B1 AF AE AD | 	byte	$ec, $ea, $e6, $dd, $d0, $c6, $bf, $bd, $bc, $ba, $b8, $b5, $b1, $af, $ae, $ad
105c4     AE BD D9 F5 
105c8     02 03 04 04 
105cc     04 05 07 09 
105d0     0F 18 1C 1B | 	byte	$ae, $bd, $d9, $f5, $02, $03, $04, $04, $04, $05, $07, $09, $0f, $18, $1c, $1b
105d4     18 15 14 14 
105d8     15 1D 2B 3F 
105dc     4B 4B 46 3F 
105e0     3A 38 38 38 | 	byte	$18, $15, $14, $14, $15, $1d, $2b, $3f, $4b, $4b, $46, $3f, $3a, $38, $38, $38
105e4     36 2F 2A 26 
105e8     21 1D 18 13 
105ec     0E 08 02 FD 
105f0     F7 F4 EF EC | 	byte	$36, $2f, $2a, $26, $21, $1d, $18, $13, $0e, $08, $02, $fd, $f7, $f4, $ef, $ec
105f4     EB E9 E3 D8 
105f8     CC C4 C0 BE 
105fc     BC BA B7 B4 
10600     B1 B0 AF AF | 	byte	$eb, $e9, $e3, $d8, $cc, $c4, $c0, $be, $bc, $ba, $b7, $b4, $b1, $b0, $af, $af
10604     B6 D0 EC 00 
10608     01 FF 00 03 
1060c     05 07 08 0B 
10610     12 19 1C 1A | 	byte	$b6, $d0, $ec, $00, $01, $ff, $00, $03, $05, $07, $08, $0b, $12, $19, $1c, $1a
10614     17 15 14 14 
10618     15 17 24 35 
1061c     46 4A 45 3F 
10620     3A 38 38 38 | 	byte	$17, $15, $14, $14, $15, $17, $24, $35, $46, $4a, $45, $3f, $3a, $38, $38, $38
10624     35 2F 29 25 
10628     21 1C 18 12 
1062c     0D 07 01 FD 
10630     F8 F3 EF EC | 	byte	$35, $2f, $29, $25, $21, $1c, $18, $12, $0d, $07, $01, $fd, $f8, $f3, $ef, $ec
10634     EB E6 DD D1 
10638     C8 C4 C2 BF 
1063c     BD BA B7 B5 
10640     B2 B1 B0 B2 | 	byte	$eb, $e6, $dd, $d1, $c8, $c4, $c2, $bf, $bd, $ba, $b7, $b5, $b2, $b1, $b0, $b2
10644     C5 E2 FC 03 
10648     FE FE 00 03 
1064c     06 08 09 0C 
10650     14 1A 1B 18 | 	byte	$c5, $e2, $fc, $03, $fe, $fe, $00, $03, $06, $08, $09, $0c, $14, $1a, $1b, $18
10654     15 14 12 12 
10658     12 13 1B 2B 
1065c     3E 46 44 3F 
10660     39 36 36 37 | 	byte	$15, $14, $12, $12, $12, $13, $1b, $2b, $3e, $46, $44, $3f, $39, $36, $36, $37
10664     34 2E 28 23 
10668     1F 1B 17 11 
1066c     0C 06 01 FC 
10670     F7 F2 EE EB | 	byte	$34, $2e, $28, $23, $1f, $1b, $17, $11, $0c, $06, $01, $fc, $f7, $f2, $ee, $eb
10674     E9 E2 D6 CC 
10678     C6 C5 C3 C0 
1067c     BD BB B8 B5 
10680     B3 B1 B2 BE | 	byte	$e9, $e2, $d6, $cc, $c6, $c5, $c3, $c0, $bd, $bb, $b8, $b5, $b3, $b1, $b2, $be
10684     DD F7 05 00 
10688     FD FD 00 04 
1068c     08 09 0A 0F 
10690     17 1B 1A 17 | 	byte	$dd, $f7, $05, $00, $fd, $fd, $00, $04, $08, $09, $0a, $0f, $17, $1b, $1a, $17
10694     16 14 12 11 
10698     11 10 13 21 
1069c     32 41 43 3E 
106a0     38 35 35 36 | 	byte	$16, $14, $12, $11, $11, $10, $13, $21, $32, $41, $43, $3e, $38, $35, $35, $36
106a4     33 2C 28 22 
106a8     1E 1A 16 11 
106ac     0B 05 01 FB 
106b0     F7 F3 EE EB | 	byte	$33, $2c, $28, $22, $1e, $1a, $16, $11, $0b, $05, $01, $fb, $f7, $f3, $ee, $eb
106b4     E6 DC D1 C9 
106b8     C8 C7 C4 C1 
106bc     BE BB B9 B6 
106c0     B5 B3 BB D7 | 	byte	$e6, $dc, $d1, $c9, $c8, $c7, $c4, $c1, $be, $bb, $b9, $b6, $b5, $b3, $bb, $d7
106c4     F3 05 03 FE 
106c8     FD FF 02 06 
106cc     08 09 0D 14 
106d0     1A 1B 18 16 | 	byte	$f3, $05, $03, $fe, $fd, $ff, $02, $06, $08, $09, $0d, $14, $1a, $1b, $18, $16
106d4     14 13 10 0F 
106d8     0E 0E 0E 15 
106dc     26 38 3F 3D 
106e0     38 34 33 34 | 	byte	$14, $13, $10, $0f, $0e, $0e, $0e, $15, $26, $38, $3f, $3d, $38, $34, $33, $34
106e4     32 2D 27 22 
106e8     1D 19 15 10 
106ec     0A 05 01 FB 
106f0     F7 F2 EE E9 | 	byte	$32, $2d, $27, $22, $1d, $19, $15, $10, $0a, $05, $01, $fb, $f7, $f2, $ee, $e9
106f4     DF D4 CD CA 
106f8     CA C8 C5 C2 
106fc     BF BD BB B8 
10700     B6 BA D3 EF | 	byte	$df, $d4, $cd, $ca, $ca, $c8, $c5, $c2, $bf, $bd, $bb, $b8, $b6, $ba, $d3, $ef
10704     05 08 01 FE 
10708     FD 00 05 08 
1070c     08 0A 10 18 
10710     1C 19 16 15 | 	byte	$05, $08, $01, $fe, $fd, $00, $05, $08, $08, $0a, $10, $18, $1c, $19, $16, $15
10714     13 11 0E 0C 
10718     0C 0B 0A 0D 
1071c     1A 2C 38 3B 
10720     36 32 31 31 | 	byte	$13, $11, $0e, $0c, $0c, $0b, $0a, $0d, $1a, $2c, $38, $3b, $36, $32, $31, $31
10724     30 2C 26 20 
10728     1B 17 13 0F 
1072c     0A 04 FF FA 
10730     F6 F2 EB E1 | 	byte	$30, $2c, $26, $20, $1b, $17, $13, $0f, $0a, $04, $ff, $fa, $f6, $f2, $eb, $e1
10734     D6 CF CD CC 
10738     CB C8 C5 C3 
1073c     C0 BE BB B9 
10740     BA CA E8 03 | 	byte	$d6, $cf, $cd, $cc, $cb, $c8, $c5, $c3, $c0, $be, $bb, $b9, $ba, $ca, $e8, $03
10744     0B 05 01 FE 
10748     FE 03 0A 0B 
1074c     0A 0D 16 1C 
10750     1B 17 14 13 | 	byte	$0b, $05, $01, $fe, $fe, $03, $0a, $0b, $0a, $0d, $16, $1c, $1b, $17, $14, $13
10754     11 0F 0D 0A 
10758     09 09 08 08 
1075c     12 22 30 37 
10760     34 30 2E 2E | 	byte	$11, $0f, $0d, $0a, $09, $09, $08, $08, $12, $22, $30, $37, $34, $30, $2e, $2e
10764     2E 2B 26 1F 
10768     1A 15 12 0F 
1076c     0A 04 FF FA 
10770     F6 EF E4 D9 | 	byte	$2e, $2b, $26, $1f, $1a, $15, $12, $0f, $0a, $04, $ff, $fa, $f6, $ef, $e4, $d9
10774     D2 D1 CF CE 
10778     CC C9 C7 C4 
1077c     C2 BF BC BB 
10780     C6 E3 FE 0C | 	byte	$d2, $d1, $cf, $ce, $cc, $c9, $c7, $c4, $c2, $bf, $bc, $bb, $c6, $e3, $fe, $0c
10784     09 04 01 FE 
10788     00 06 0D 0E 
1078c     0D 13 1A 1C 
10790     19 15 13 12 | 	byte	$09, $04, $01, $fe, $00, $06, $0d, $0e, $0d, $13, $1a, $1c, $19, $15, $13, $12
10794     10 0E 0B 08 
10798     07 06 05 04 
1079c     0A 18 27 30 
107a0     30 2D 2A 2A | 	byte	$10, $0e, $0b, $08, $07, $06, $05, $04, $0a, $18, $27, $30, $30, $2d, $2a, $2a
107a4     2B 29 24 1D 
107a8     19 14 11 0D 
107ac     09 04 FF F9 
107b0     F3 E7 DB D4 | 	byte	$2b, $29, $24, $1d, $19, $14, $11, $0d, $09, $04, $ff, $f9, $f3, $e7, $db, $d4
107b4     D3 D3 D1 CF 
107b8     CD CA C7 C5 
107bc     C3 C1 BF C2 
107c0     D9 F5 0C 0E | 	byte	$d3, $d3, $d1, $cf, $cd, $ca, $c7, $c5, $c3, $c1, $bf, $c2, $d9, $f5, $0c, $0e
107c4     08 04 02 00 
107c8     03 0B 11 13 
107cc     15 19 1D 1A 
107d0     17 14 12 11 | 	byte	$08, $04, $02, $00, $03, $0b, $11, $13, $15, $19, $1d, $1a, $17, $14, $12, $11
107d4     0F 0C 0A 07 
107d8     05 03 02 01 
107dc     05 13 21 29 
107e0     2A 28 27 27 | 	byte	$0f, $0c, $0a, $07, $05, $03, $02, $01, $05, $13, $21, $29, $2a, $28, $27, $27
107e4     27 27 23 1D 
107e8     18 14 10 0D 
107ec     08 03 FE F7 
107f0     ED E0 D7 D5 | 	byte	$27, $27, $23, $1d, $18, $14, $10, $0d, $08, $03, $fe, $f7, $ed, $e0, $d7, $d5
107f4     D5 D4 D2 D0 
107f8     CD CB C9 C6 
107fc     C4 C2 C2 D0 
10800     EE 07 11 0C | 	byte	$d5, $d4, $d2, $d0, $cd, $cb, $c9, $c6, $c4, $c2, $c2, $d0, $ee, $07, $11, $0c
10804     07 04 01 01 
10808     07 0E 14 19 
1080c     1B 1D 1B 18 
10810     15 13 11 0F | 	byte	$07, $04, $01, $01, $07, $0e, $14, $19, $1b, $1d, $1b, $18, $15, $13, $11, $0f
10814     0D 0B 08 05 
10818     03 00 FF FE 
1081c     00 0C 1A 24 
10820     23 22 22 23 | 	byte	$0d, $0b, $08, $05, $03, $00, $ff, $fe, $00, $0c, $1a, $24, $23, $22, $22, $23
10824     23 23 20 1B 
10828     17 13 0F 0B 
1082c     07 02 FC F1 
10830     E4 D9 D7 D8 | 	byte	$23, $23, $20, $1b, $17, $13, $0f, $0b, $07, $02, $fc, $f1, $e4, $d9, $d7, $d8
10834     D7 D5 D3 D1 
10838     CF CC CA C8 
1083c     C6 C4 CB E1 
10840     FF 12 11 0B | 	byte	$d7, $d5, $d3, $d1, $cf, $cc, $ca, $c8, $c6, $c4, $cb, $e1, $ff, $12, $11, $0b
10844     07 04 02 04 
10848     0C 13 1C 21 
1084c     22 1E 19 16 
10850     15 13 10 0F | 	byte	$07, $04, $02, $04, $0c, $13, $1c, $21, $22, $1e, $19, $16, $15, $13, $10, $0f
10854     0C 0A 07 04 
10858     01 FE FC FB 
1085c     FD 08 18 22 
10860     1F 1B 1B 1D | 	byte	$0c, $0a, $07, $04, $01, $fe, $fc, $fb, $fd, $08, $18, $22, $1f, $1b, $1b, $1d
10864     1F 20 1F 1B 
10868     16 12 0E 0A 
1086c     06 02 F6 E9 
10870     DE D9 D9 DA | 	byte	$1f, $20, $1f, $1b, $16, $12, $0e, $0a, $06, $02, $f6, $e9, $de, $d9, $d9, $da
10874     D8 D6 D3 D1 
10878     CF CD CB C9 
1087c     C7 C7 D3 F0 
10880     0C 16 10 0B | 	byte	$d8, $d6, $d3, $d1, $cf, $cd, $cb, $c9, $c7, $c7, $d3, $f0, $0c, $16, $10, $0b
10884     07 04 03 07 
10888     0F 19 22 25 
1088c     23 1C 18 16 
10890     15 12 10 0E | 	byte	$07, $04, $03, $07, $0f, $19, $22, $25, $23, $1c, $18, $16, $15, $12, $10, $0e
10894     0B 09 06 03 
10898     00 FC FA F9 
1089c     FA 06 15 1E 
108a0     1E 17 15 17 | 	byte	$0b, $09, $06, $03, $00, $fc, $fa, $f9, $fa, $06, $15, $1e, $1e, $17, $15, $17
108a4     1B 1E 1D 1B 
108a8     15 11 0E 09 
108ac     06 FC EF E3 
108b0     DC DC DC DB | 	byte	$1b, $1e, $1d, $1b, $15, $11, $0e, $09, $06, $fc, $ef, $e3, $dc, $dc, $dc, $db
108b4     DA D7 D4 D2 
108b8     D0 CE CC CB 
108bc     C9 CC E1 FD 
108c0     14 17 10 0B | 	byte	$da, $d7, $d4, $d2, $d0, $ce, $cc, $cb, $c9, $cc, $e1, $fd, $14, $17, $10, $0b
108c4     08 04 04 0B 
108c8     16 21 28 27 
108cc     21 1B 17 15 
108d0     14 12 0F 0D | 	byte	$08, $04, $04, $0b, $16, $21, $28, $27, $21, $1b, $17, $15, $14, $12, $0f, $0d
108d4     0B 08 05 02 
108d8     FE FB F8 F6 
108dc     F8 03 12 1C 
108e0     1B 14 10 10 | 	byte	$0b, $08, $05, $02, $fe, $fb, $f8, $f6, $f8, $03, $12, $1c, $1b, $14, $10, $10
108e4     14 19 1B 19 
108e8     14 10 0C 09 
108ec     01 F5 E7 DF 
108f0     DD DE DE DC | 	byte	$14, $19, $1b, $19, $14, $10, $0c, $09, $01, $f5, $e7, $df, $dd, $de, $de, $dc
108f4     DA D7 D5 D2 
108f8     D0 CF CD CC 
108fc     CB D3 EA 09 
10900     19 17 10 0C | 	byte	$da, $d7, $d5, $d2, $d0, $cf, $cd, $cc, $cb, $d3, $ea, $09, $19, $17, $10, $0c
10904     08 05 06 0F 
10908     1C 28 2A 25 
1090c     1E 19 17 15 
10910     13 11 0F 0D | 	byte	$08, $05, $06, $0f, $1c, $28, $2a, $25, $1e, $19, $17, $15, $13, $11, $0f, $0d
10914     0B 08 04 01 
10918     FD FA F7 F5 
1091c     F5 00 11 1B 
10920     1A 13 0E 0C | 	byte	$0b, $08, $04, $01, $fd, $fa, $f7, $f5, $f5, $00, $11, $1b, $1a, $13, $0e, $0c
10924     0F 15 19 18 
10928     13 0F 0B 07 
1092c     FD EF E5 E0 
10930     E0 E1 E0 DD | 	byte	$0f, $15, $19, $18, $13, $0f, $0b, $07, $fd, $ef, $e5, $e0, $e0, $e1, $e0, $dd
10934     DA D8 D6 D3 
10938     D2 D0 CF CE 
1093c     CE DB F5 11 
10940     1C 17 10 0B | 	byte	$da, $d8, $d6, $d3, $d2, $d0, $cf, $ce, $ce, $db, $f5, $11, $1c, $17, $10, $0b
10944     08 05 09 16 
10948     24 2D 2A 22 
1094c     1C 17 16 15 
10950     14 12 0F 0D | 	byte	$08, $05, $09, $16, $24, $2d, $2a, $22, $1c, $17, $16, $15, $14, $12, $0f, $0d
10954     0A 07 03 00 
10958     FD F9 F6 F3 
1095c     F3 FF 10 1A 
10960     19 12 0D 09 | 	byte	$0a, $07, $03, $00, $fd, $f9, $f6, $f3, $f3, $ff, $10, $1a, $19, $12, $0d, $09
10964     09 0F 14 16 
10968     12 0D 0A 03 
1096c     F7 EB E3 E2 
10970     E2 E2 E0 DD | 	byte	$09, $0f, $14, $16, $12, $0d, $0a, $03, $f7, $eb, $e3, $e2, $e2, $e2, $e0, $dd
10974     DB D8 D6 D4 
10978     D3 D2 D1 D1 
1097c     D1 E0 FE 16 
10980     1E 15 10 0C | 	byte	$db, $d8, $d6, $d4, $d3, $d2, $d1, $d1, $d1, $e0, $fe, $16, $1e, $15, $10, $0c
10984     09 06 0D 1B 
10988     2A 30 28 1E 
1098c     19 17 16 15 
10990     13 12 10 0C | 	byte	$09, $06, $0d, $1b, $2a, $30, $28, $1e, $19, $17, $16, $15, $13, $12, $10, $0c
10994     0A 06 03 FF 
10998     FB F8 F4 F1 
1099c     F2 FE 0E 1A 
109a0     18 11 0C 07 | 	byte	$0a, $06, $03, $ff, $fb, $f8, $f4, $f1, $f2, $fe, $0e, $1a, $18, $11, $0c, $07
109a4     06 0B 12 15 
109a8     12 0C 08 FF 
109ac     F2 E8 E4 E4 
109b0     E5 E3 E1 DE | 	byte	$06, $0b, $12, $15, $12, $0c, $08, $ff, $f2, $e8, $e4, $e4, $e5, $e3, $e1, $de
109b4     DB D9 D6 D5 
109b8     D4 D4 D3 D1 
109bc     D3 E6 05 1A 
109c0     1D 15 0F 0C | 	byte	$db, $d9, $d6, $d5, $d4, $d4, $d3, $d1, $d3, $e6, $05, $1a, $1d, $15, $0f, $0c
109c4     08 07 0F 1F 
109c8     2D 2F 25 1C 
109cc     16 14 15 14 
109d0     13 11 0F 0C | 	byte	$08, $07, $0f, $1f, $2d, $2f, $25, $1c, $16, $14, $15, $14, $13, $11, $0f, $0c
109d4     09 05 02 FF 
109d8     FB F8 F4 F0 
109dc     F1 FF 11 1A 
109e0     16 10 0B 05 | 	byte	$09, $05, $02, $ff, $fb, $f8, $f4, $f0, $f1, $ff, $11, $1a, $16, $10, $0b, $05
109e4     02 05 0C 12 
109e8     10 0C 04 FA 
109ec     EE E7 E6 E6 
109f0     E6 E4 E1 DE | 	byte	$02, $05, $0c, $12, $10, $0c, $04, $fa, $ee, $e7, $e6, $e6, $e6, $e4, $e1, $de
109f4     DB D9 D8 D7 
109f8     D6 D5 D4 D3 
109fc     D7 ED 0B 1E 
10a00     1D 15 11 0D | 	byte	$db, $d9, $d8, $d7, $d6, $d5, $d4, $d3, $d7, $ed, $0b, $1e, $1d, $15, $11, $0d
10a04     08 07 0E 1D 
10a08     2B 2F 25 19 
10a0c     14 14 15 15 
10a10     13 12 0F 0C | 	byte	$08, $07, $0e, $1d, $2b, $2f, $25, $19, $14, $14, $15, $15, $13, $12, $0f, $0c
10a14     09 05 02 FF 
10a18     FB F7 F3 F0 
10a1c     F3 02 12 1B 
10a20     17 10 0A 05 | 	byte	$09, $05, $02, $ff, $fb, $f7, $f3, $f0, $f3, $02, $12, $1b, $17, $10, $0a, $05
10a24     01 02 07 0E 
10a28     10 0B 00 F5 
10a2c     EB E9 EA EA 
10a30     E8 E5 E2 DF | 	byte	$01, $02, $07, $0e, $10, $0b, $00, $f5, $eb, $e9, $ea, $ea, $e8, $e5, $e2, $df
10a34     DB D9 D9 D9 
10a38     D8 D7 D5 D3 
10a3c     D9 F1 0F 1F 
10a40     1D 17 12 0E | 	byte	$db, $d9, $d9, $d9, $d8, $d7, $d5, $d3, $d9, $f1, $0f, $1f, $1d, $17, $12, $0e
10a44     09 07 0C 19 
10a48     29 2C 23 19 
10a4c     12 13 15 15 
10a50     13 11 0F 0C | 	byte	$09, $07, $0c, $19, $29, $2c, $23, $19, $12, $13, $15, $15, $13, $11, $0f, $0c
10a54     09 06 03 FF 
10a58     FB F7 F3 F1 
10a5c     F7 05 15 1B 
10a60     16 0F 0A 05 | 	byte	$09, $06, $03, $ff, $fb, $f7, $f3, $f1, $f7, $05, $15, $1b, $16, $0f, $0a, $05
10a64     00 FF 02 09 
10a68     0D 09 FD F2 
10a6c     EB EB EC EB 
10a70     E9 E6 E3 DF | 	byte	$00, $ff, $02, $09, $0d, $09, $fd, $f2, $eb, $eb, $ec, $eb, $e9, $e6, $e3, $df
10a74     DB DA DA DA 
10a78     D9 D8 D6 D5 
10a7c     DD F5 12 21 
10a80     1D 16 12 0E | 	byte	$db, $da, $da, $da, $d9, $d8, $d6, $d5, $dd, $f5, $12, $21, $1d, $16, $12, $0e
10a84     0B 07 0B 16 
10a88     23 28 22 17 
10a8c     12 12 14 14 
10a90     14 12 0F 0C | 	byte	$0b, $07, $0b, $16, $23, $28, $22, $17, $12, $12, $14, $14, $14, $12, $0f, $0c
10a94     09 06 03 FF 
10a98     FA F7 F3 F2 
10a9c     FC 0B 19 1B 
10aa0     15 0F 09 05 | 	byte	$09, $06, $03, $ff, $fa, $f7, $f3, $f2, $fc, $0b, $19, $1b, $15, $0f, $09, $05
10aa4     01 FE FF 04 
10aa8     0A 06 FA F0 
10aac     EC ED EE EC 
10ab0     E9 E7 E3 DF | 	byte	$01, $fe, $ff, $04, $0a, $06, $fa, $f0, $ec, $ed, $ee, $ec, $e9, $e7, $e3, $df
10ab4     DC DB DB DA 
10ab8     DA D8 D7 D6 
10abc     DC F5 0F 20 
10ac0     1E 17 13 0F | 	byte	$dc, $db, $db, $da, $da, $d8, $d7, $d6, $dc, $f5, $0f, $20, $1e, $17, $13, $0f
10ac4     0B 07 0A 12 
10ac8     1E 23 1F 18 
10acc     12 10 12 13 
10ad0     14 12 0F 0D | 	byte	$0b, $07, $0a, $12, $1e, $23, $1f, $18, $12, $10, $12, $13, $14, $12, $0f, $0d
10ad4     0A 07 03 FF 
10ad8     FB F8 F5 F7 
10adc     04 14 1D 19 
10ae0     14 0F 09 06 | 	byte	$0a, $07, $03, $ff, $fb, $f8, $f5, $f7, $04, $14, $1d, $19, $14, $0f, $09, $06
10ae4     01 FE FD 01 
10ae8     06 03 FA F2 
10aec     EF EF EE EC 
10af0     EA E7 E4 E0 | 	byte	$01, $fe, $fd, $01, $06, $03, $fa, $f2, $ef, $ef, $ee, $ec, $ea, $e7, $e4, $e0
10af4     DD DB DB DB 
10af8     DA D9 D8 D7 
10afc     DB F2 0D 1F 
10b00     1F 17 13 0F | 	byte	$dd, $db, $db, $db, $da, $d9, $d8, $d7, $db, $f2, $0d, $1f, $1f, $17, $13, $0f
10b04     0B 08 09 0F 
10b08     17 1C 1B 19 
10b0c     14 11 10 12 
10b10     13 13 10 0D | 	byte	$0b, $08, $09, $0f, $17, $1c, $1b, $19, $14, $11, $10, $12, $13, $13, $10, $0d
10b14     0A 07 03 FF 
10b18     FC F9 F7 FE 
10b1c     0D 1A 1E 19 
10b20     14 0F 0A 05 | 	byte	$0a, $07, $03, $ff, $fc, $f9, $f7, $fe, $0d, $1a, $1e, $19, $14, $0f, $0a, $05
10b24     02 FD FD 00 
10b28     02 FF F8 F5 
10b2c     F2 F0 ED EB 
10b30     EA E7 E4 E1 | 	byte	$02, $fd, $fd, $00, $02, $ff, $f8, $f5, $f2, $f0, $ed, $eb, $ea, $e7, $e4, $e1
10b34     DD DC DB DB 
10b38     DA DA D9 D8 
10b3c     DA EC 09 1E 
10b40     21 18 13 10 | 	byte	$dd, $dc, $db, $db, $da, $da, $d9, $d8, $da, $ec, $09, $1e, $21, $18, $13, $10
10b44     0C 09 08 0D 
10b48     11 15 16 18 
10b4c     16 12 0F 10 
10b50     12 12 10 0E | 	byte	$0c, $09, $08, $0d, $11, $15, $16, $18, $16, $12, $0f, $10, $12, $12, $10, $0e
10b54     0A 07 04 01 
10b58     FE FA FC 07 
10b5c     17 1F 1D 18 
10b60     14 0F 0B 06 | 	byte	$0a, $07, $04, $01, $fe, $fa, $fc, $07, $17, $1f, $1d, $18, $14, $0f, $0b, $06
10b64     02 FE FD 00 
10b68     00 FD F8 F6 
10b6c     F5 F1 EE EB 
10b70     E9 E7 E4 E0 | 	byte	$02, $fe, $fd, $00, $00, $fd, $f8, $f6, $f5, $f1, $ee, $eb, $e9, $e7, $e4, $e0
10b74     DE DC DB DB 
10b78     DA DA D9 D8 
10b7c     D8 E9 04 1C 
10b80     21 18 13 10 | 	byte	$de, $dc, $db, $db, $da, $da, $d9, $d8, $d8, $e9, $04, $1c, $21, $18, $13, $10
10b84     0C 08 07 09 
10b88     09 0C 0F 16 
10b8c     17 13 0E 0E 
10b90     10 11 10 0D | 	byte	$0c, $08, $07, $09, $09, $0c, $0f, $16, $17, $13, $0e, $0e, $10, $11, $10, $0d
10b94     0B 08 05 02 
10b98     FF FD 02 11 
10b9c     1E 21 1B 17 
10ba0     14 10 0B 07 | 	byte	$0b, $08, $05, $02, $ff, $fd, $02, $11, $1e, $21, $1b, $17, $14, $10, $0b, $07
10ba4     02 FF FD FF 
10ba8     FF FC F7 F5 
10bac     00 00 00 00 
10bb0     E8 E5 E2 E1 | 	byte	$02, $ff, $fd, $ff, $ff, $fc, $f7, $f5, $00, $00, $00, $00, $e8, $e5, $e2, $e1
10bb4     E1 E5 EB F3 
10bb8     FB 05 0E 18 
10bbc     22 2A 32 38 
10bc0     3D 37 11 37 | 	byte	$e1, $e5, $eb, $f3, $fb, $05, $0e, $18, $22, $2a, $32, $38, $3d, $37, $11, $37
10bc4     40 3A 37 34 
10bc8     31 2F 2D 2C 
10bcc     28 23 20 1B 
10bd0     18 15 12 0F | 	byte	$40, $3a, $37, $34, $31, $2f, $2d, $2c, $28, $23, $20, $1b, $18, $15, $12, $0f
10bd4     0B 05 FC F0 
10bd8     E4 D6 CA C0 
10bdc     B9 B7 BA C0 
10be0     C5 CA CF D4 | 	byte	$0b, $05, $fc, $f0, $e4, $d6, $ca, $c0, $b9, $b7, $ba, $c0, $c5, $ca, $cf, $d4
10be4     D7 DA DD DF 
10be8     E1 E2 E4 E5 
10bec     E5 E7 E7 E7 
10bf0     E7 E7 E7 E8 | 	byte	$d7, $da, $dd, $df, $e1, $e2, $e4, $e5, $e5, $e7, $e7, $e7, $e7, $e7, $e7, $e8
10bf4     E9 EA EB EB 
10bf8     ED EE F0 F2 
10bfc     F4 F6 F9 FB 
10c00     FE 09 54 66 | 	byte	$e9, $ea, $eb, $eb, $ed, $ee, $f0, $f2, $f4, $f6, $f9, $fb, $fe, $09, $54, $66
10c04     5D 56 50 4B 
10c08     46 41 3C 38 
10c0c     33 2F 2B 27 
10c10     23 20 1C 19 | 	byte	$5d, $56, $50, $4b, $46, $41, $3c, $38, $33, $2f, $2b, $27, $23, $20, $1c, $19
10c14     16 13 10 0D 
10c18     0C 09 08 06 
10c1c     04 03 01 00 
10c20     FF FE FD FC | 	byte	$16, $13, $10, $0d, $0c, $09, $08, $06, $04, $03, $01, $00, $ff, $fe, $fd, $fc
10c24     FB FA FA F9 
10c28     F8 F8 F8 F7 
10c2c     F7 F7 F6 F6 
10c30     F6 F1 A5 DD | 	byte	$fb, $fa, $fa, $f9, $f8, $f8, $f8, $f7, $f7, $f7, $f6, $f6, $f6, $f1, $a5, $dd
10c34     03 FF FD FD 
10c38     FC FB FB FB 
10c3c     FA FA F4 B6 
10c40     A6 F4 0A 06 | 	byte	$03, $ff, $fd, $fd, $fc, $fb, $fb, $fb, $fa, $fa, $f4, $b6, $a6, $f4, $0a, $06
10c44     04 04 03 02 
10c48     01 00 00 FF 
10c4c     FF FE FD FD 
10c50     FD FD E1 9D | 	byte	$04, $04, $03, $02, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $e1, $9d
10c54     A0 AB B3 BA 
10c58     C1 C8 CE D3 
10c5c     D9 DE E3 E7 
10c60     EB EE F1 F3 | 	byte	$a0, $ab, $b3, $ba, $c1, $c8, $ce, $d3, $d9, $de, $e3, $e7, $eb, $ee, $f1, $f3
10c64     F4 F5 F6 F6 
10c68     F6 F6 F6 F5 
10c6c     F4 F4 F3 F3 
10c70     F3 F2 F2 F2 | 	byte	$f4, $f5, $f6, $f6, $f6, $f6, $f6, $f5, $f4, $f4, $f3, $f3, $f3, $f2, $f2, $f2
10c74     F2 F3 F4 F5 
10c78     F6 F8 FA FC 
10c7c     FF 01 04 23 
10c80     62 68 5F 59 | 	byte	$f2, $f3, $f4, $f5, $f6, $f8, $fa, $fc, $ff, $01, $04, $23, $62, $68, $5f, $59
10c84     53 4D 49 44 
10c88     3F 3B 36 32 
10c8c     2E 2A 27 23 
10c90     21 1D 1A 17 | 	byte	$53, $4d, $49, $44, $3f, $3b, $36, $32, $2e, $2a, $27, $23, $21, $1d, $1a, $17
10c94     14 12 10 0E 
10c98     0C 0A 09 07 
10c9c     06 04 03 02 
10ca0     01 00 FF FF | 	byte	$14, $12, $10, $0e, $0c, $0a, $09, $07, $06, $04, $03, $02, $01, $00, $ff, $ff
10ca4     FE FD FD FC 
10ca8     FC FB FB FB 
10cac     FA FA FA E1 
10cb0     A3 CD 06 08 | 	byte	$fe, $fd, $fd, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $e1, $a3, $cd, $06, $08
10cb4     05 04 03 02 
10cb8     02 01 00 F3 
10cbc     BB A5 DB 0C 
10cc0     11 0D 0B 0A | 	byte	$05, $04, $03, $02, $02, $01, $00, $f3, $bb, $a5, $db, $0c, $11, $0d, $0b, $0a
10cc4     09 07 06 05 
10cc8     04 03 03 02 
10ccc     02 01 01 00 
10cd0     F4 B1 9F AA | 	byte	$09, $07, $06, $05, $04, $03, $03, $02, $02, $01, $01, $00, $f4, $b1, $9f, $aa
10cd4     B3 B9 C0 C7 
10cd8     CD D3 D9 DE 
10cdc     E3 E7 EB ED 
10ce0     F0 F1 F3 F4 | 	byte	$b3, $b9, $c0, $c7, $cd, $d3, $d9, $de, $e3, $e7, $eb, $ed, $f0, $f1, $f3, $f4
10ce4     F4 F5 F5 F5 
10ce8     F4 F4 F3 F3 
10cec     F3 F2 F2 F2 
10cf0     F3 F3 F4 F4 | 	byte	$f4, $f5, $f5, $f5, $f4, $f4, $f3, $f3, $f3, $f2, $f2, $f2, $f3, $f3, $f4, $f4
10cf4     F5 F7 F9 FB 
10cf8     FC FF 02 05 
10cfc     17 49 69 64 
10d00     5D 57 51 4C | 	byte	$f5, $f7, $f9, $fb, $fc, $ff, $02, $05, $17, $49, $69, $64, $5d, $57, $51, $4c
10d04     47 43 3E 3A 
10d08     36 32 2E 2A 
10d0c     27 23 20 1D 
10d10     1A 17 14 12 | 	byte	$47, $43, $3e, $3a, $36, $32, $2e, $2a, $27, $23, $20, $1d, $1a, $17, $14, $12
10d14     10 0E 0C 0A 
10d18     08 07 06 04 
10d1c     03 02 01 00 
10d20     00 FF FE FD | 	byte	$10, $0e, $0c, $0a, $08, $07, $06, $04, $03, $02, $01, $00, $00, $ff, $fe, $fd
10d24     FD FC FB FB 
10d28     FB FA FA F9 
10d2c     F1 C3 9D C0 
10d30     00 0F 0B 09 | 	byte	$fd, $fc, $fb, $fb, $fb, $fa, $fa, $f9, $f1, $c3, $9d, $c0, $00, $0f, $0b, $09
10d34     08 07 06 05 
10d38     F0 BD A8 CA 
10d3c     03 17 14 11 
10d40     0F 0E 0C 0B | 	byte	$08, $07, $06, $05, $f0, $bd, $a8, $ca, $03, $17, $14, $11, $0f, $0e, $0c, $0b
10d44     09 08 07 06 
10d48     05 05 04 03 
10d4c     02 01 F7 CA 
10d50     A4 A8 B1 B9 | 	byte	$09, $08, $07, $06, $05, $05, $04, $03, $02, $01, $f7, $ca, $a4, $a8, $b1, $b9
10d54     BF C6 CC D1 
10d58     D7 DC E1 E5 
10d5c     E8 EB ED EF 
10d60     F0 F1 F2 F2 | 	byte	$bf, $c6, $cc, $d1, $d7, $dc, $e1, $e5, $e8, $eb, $ed, $ef, $f0, $f1, $f2, $f2
10d64     F2 F2 F2 F1 
10d68     F1 F1 F1 F1 
10d6c     F1 F2 F2 F3 
10d70     F4 F5 F6 F8 | 	byte	$f2, $f2, $f2, $f1, $f1, $f1, $f1, $f1, $f1, $f2, $f2, $f3, $f4, $f5, $f6, $f8
10d74     FA FD FF 02 
10d78     04 0C 2E 5C 
10d7c     68 62 5B 55 
10d80     50 4B 46 41 | 	byte	$fa, $fd, $ff, $02, $04, $0c, $2e, $5c, $68, $62, $5b, $55, $50, $4b, $46, $41
10d84     3D 39 35 31 
10d88     2D 2A 26 23 
10d8c     20 1C 1A 17 
10d90     14 12 10 0E | 	byte	$3d, $39, $35, $31, $2d, $2a, $26, $23, $20, $1c, $1a, $17, $14, $12, $10, $0e
10d94     0C 0A 08 07 
10d98     06 04 03 02 
10d9c     01 00 FF FF 
10da0     FE FD FC FC | 	byte	$0c, $0a, $08, $07, $06, $04, $03, $02, $01, $00, $ff, $ff, $fe, $fd, $fc, $fc
10da4     FB FB FA FA 
10da8     FA F9 E5 BB 
10dac     9F B1 E5 0B 
10db0     11 0E 0C 0B | 	byte	$fb, $fb, $fa, $fa, $fa, $f9, $e5, $bb, $9f, $b1, $e5, $0b, $11, $0e, $0c, $0b
10db4     09 F7 CC AF 
10db8     B9 E1 0F 1D 
10dbc     19 16 14 12 
10dc0     10 0E 0C 0B | 	byte	$09, $f7, $cc, $af, $b9, $e1, $0f, $1d, $19, $16, $14, $12, $10, $0e, $0c, $0b
10dc4     0A 09 08 06 
10dc8     05 05 04 03 
10dcc     00 E9 BE A7 
10dd0     AB B4 BA C1 | 	byte	$0a, $09, $08, $06, $05, $05, $04, $03, $00, $e9, $be, $a7, $ab, $b4, $ba, $c1
10dd4     C7 CD D3 D8 
10dd8     DD E2 E5 E7 
10ddc     E9 EB EC ED 
10de0     ED EE EE EF | 	byte	$c7, $cd, $d3, $d8, $dd, $e2, $e5, $e7, $e9, $eb, $ec, $ed, $ed, $ee, $ee, $ef
10de4     EE EE EE EF 
10de8     EF EF F0 F0 
10dec     F1 F2 F3 F5 
10df0     F7 F9 FB FD | 	byte	$ee, $ee, $ee, $ef, $ef, $ef, $f0, $f0, $f1, $f2, $f3, $f5, $f7, $f9, $fb, $fd
10df4     00 03 06 16 
10df8     39 5E 68 61 
10dfc     5A 55 50 4B 
10e00     46 42 3D 39 | 	byte	$00, $03, $06, $16, $39, $5e, $68, $61, $5a, $55, $50, $4b, $46, $42, $3d, $39
10e04     35 31 2D 2A 
10e08     26 23 20 1D 
10e0c     1A 17 14 12 
10e10     10 0E 0C 0A | 	byte	$35, $31, $2d, $2a, $26, $23, $20, $1d, $1a, $17, $14, $12, $10, $0e, $0c, $0a
10e14     09 08 06 04 
10e18     03 02 01 00 
10e1c     FF FF FE FD 
10e20     FC FC FB FB | 	byte	$09, $08, $06, $04, $03, $02, $01, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fb, $fb
10e24     FB FA FA F9 
10e28     E9 C4 A6 A2 
10e2c     BD EA 0B 16 
10e30     13 10 07 E7 | 	byte	$fb, $fa, $fa, $f9, $e9, $c4, $a6, $a2, $bd, $ea, $0b, $16, $13, $10, $07, $e7
10e34     C2 B3 C2 EA 
10e38     0F 21 1F 1B 
10e3c     19 16 14 12 
10e40     10 0E 0D 0B | 	byte	$c2, $b3, $c2, $ea, $0f, $21, $1f, $1b, $19, $16, $14, $12, $10, $0e, $0d, $0b
10e44     0A 09 07 07 
10e48     05 05 03 FE 
10e4c     E8 C4 AD AA 
10e50     B3 BA C1 C7 | 	byte	$0a, $09, $07, $07, $05, $05, $03, $fe, $e8, $c4, $ad, $aa, $b3, $ba, $c1, $c7
10e54     CD D3 D7 DC 
10e58     DF E2 E4 E6 
10e5c     E8 E9 EA EB 
10e60     EB EB EC EC | 	byte	$cd, $d3, $d7, $dc, $df, $e2, $e4, $e6, $e8, $e9, $ea, $eb, $eb, $eb, $ec, $ec
10e64     EC EC ED ED 
10e68     EE EF F0 F1 
10e6c     F3 F4 F6 F8 
10e70     FB FD 00 03 | 	byte	$ec, $ec, $ed, $ed, $ee, $ef, $f0, $f1, $f3, $f4, $f6, $f8, $fb, $fd, $00, $03
10e74     06 13 2E 52 
10e78     66 64 5E 58 
10e7c     52 4D 49 44 
10e80     40 3C 38 34 | 	byte	$06, $13, $2e, $52, $66, $64, $5e, $58, $52, $4d, $49, $44, $40, $3c, $38, $34
10e84     30 2C 29 25 
10e88     22 1F 1C 19 
10e8c     16 14 11 0E 
10e90     0C 0B 09 07 | 	byte	$30, $2c, $29, $25, $22, $1f, $1c, $19, $16, $14, $11, $0e, $0c, $0b, $09, $07
10e94     07 05 04 03 
10e98     02 01 00 00 
10e9c     FF FE FD FC 
10ea0     FC FB FB FA | 	byte	$07, $05, $04, $03, $02, $01, $00, $00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa
10ea4     FA FA F1 DA 
10ea8     BB A6 A5 B9 
10eac     DD 01 16 17 
10eb0     09 E9 CB BA | 	byte	$fa, $fa, $f1, $da, $bb, $a6, $a5, $b9, $dd, $01, $16, $17, $09, $e9, $cb, $ba
10eb4     C3 DE 03 1E 
10eb8     26 23 1F 1C 
10ebc     1A 17 14 12 
10ec0     10 0F 0D 0B | 	byte	$c3, $de, $03, $1e, $26, $23, $1f, $1c, $1a, $17, $14, $12, $10, $0f, $0d, $0b
10ec4     0A 09 08 07 
10ec8     06 05 01 F3 
10ecc     D6 BC AC AF 
10ed0     B6 BD C3 C9 | 	byte	$0a, $09, $08, $07, $06, $05, $01, $f3, $d6, $bc, $ac, $af, $b6, $bd, $c3, $c9
10ed4     CF D4 D8 DB 
10ed8     DE E1 E2 E4 
10edc     E5 E6 E7 E8 
10ee0     E8 E8 E9 E9 | 	byte	$cf, $d4, $d8, $db, $de, $e1, $e2, $e4, $e5, $e6, $e7, $e8, $e8, $e8, $e9, $e9
10ee4     EA EA EB EC 
10ee8     ED EF F0 F3 
10eec     F4 F7 F9 FC 
10ef0     FF 02 05 0A | 	byte	$ea, $ea, $eb, $ec, $ed, $ef, $f0, $f3, $f4, $f7, $f9, $fc, $ff, $02, $05, $0a
10ef4     1E 3E 59 67 
10ef8     64 5D 57 52 
10efc     4D 49 44 3F 
10f00     3B 37 33 30 | 	byte	$1e, $3e, $59, $67, $64, $5d, $57, $52, $4d, $49, $44, $3f, $3b, $37, $33, $30
10f04     2C 29 25 22 
10f08     1F 1C 19 16 
10f0c     13 11 0F 0D 
10f10     0B 09 07 06 | 	byte	$2c, $29, $25, $22, $1f, $1c, $19, $16, $13, $11, $0f, $0d, $0b, $09, $07, $06
10f14     05 03 03 01 
10f18     00 00 FF FE 
10f1c     FD FC FC FB 
10f20     FB FA FA FA | 	byte	$05, $03, $03, $01, $00, $00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $fa
10f24     F8 EE D6 BE 
10f28     AB A6 B0 CA 
10f2c     E7 05 0E FB 
10f30     DC C7 C3 D2 | 	byte	$f8, $ee, $d6, $be, $ab, $a6, $b0, $ca, $e7, $05, $0e, $fb, $dc, $c7, $c3, $d2
10f34     ED 0D 23 2B 
10f38     28 24 20 1D 
10f3c     1A 18 16 13 
10f40     11 0F 0E 0C | 	byte	$ed, $0d, $23, $2b, $28, $24, $20, $1d, $1a, $18, $16, $13, $11, $0f, $0e, $0c
10f44     0B 09 08 07 
10f48     06 05 FF EE 
10f4c     D5 BF B0 B0 
10f50     B7 BE C4 C9 | 	byte	$0b, $09, $08, $07, $06, $05, $ff, $ee, $d5, $bf, $b0, $b0, $b7, $be, $c4, $c9
10f54     CF D2 D6 D9 
10f58     DC DE E0 E1 
10f5c     E2 E3 E4 E4 
10f60     E5 E6 E6 E7 | 	byte	$cf, $d2, $d6, $d9, $dc, $de, $e0, $e1, $e2, $e3, $e4, $e4, $e5, $e6, $e6, $e7
10f64     E8 E9 EA EC 
10f68     ED EF F1 F4 
10f6c     F7 F9 FB FE 
10f70     02 05 0C 1E | 	byte	$e8, $e9, $ea, $ec, $ed, $ef, $f1, $f4, $f7, $f9, $fb, $fe, $02, $05, $0c, $1e
10f74     38 54 63 64 
10f78     5E 58 54 4E 
10f7c     4A 45 41 3D 
10f80     39 35 31 2E | 	byte	$38, $54, $63, $64, $5e, $58, $54, $4e, $4a, $45, $41, $3d, $39, $35, $31, $2e
10f84     2A 27 24 21 
10f88     1D 1A 18 15 
10f8c     13 10 0E 0C 
10f90     0A 08 06 05 | 	byte	$2a, $27, $24, $21, $1d, $1a, $18, $15, $13, $10, $0e, $0c, $0a, $08, $06, $05
10f94     04 03 02 01 
10f98     00 FF FE FD 
10f9c     FC FB FB FB 
10fa0     FA FA FA F9 | 	byte	$04, $03, $02, $01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $f9
10fa4     F1 E0 C9 B6 
10fa8     A9 A9 B4 CA 
10fac     E1 EF ED E0 
10fb0     CF CB D6 EE | 	byte	$f1, $e0, $c9, $b6, $a9, $a9, $b4, $ca, $e1, $ef, $ed, $e0, $cf, $cb, $d6, $ee
10fb4     08 21 2E 30 
10fb8     2B 27 23 20 
10fbc     1D 1A 17 15 
10fc0     13 11 0F 0D | 	byte	$08, $21, $2e, $30, $2b, $27, $23, $20, $1d, $1a, $17, $15, $13, $11, $0f, $0d
10fc4     0C 0A 09 07 
10fc8     06 05 00 F2 
10fcc     DD C9 B8 B1 
10fd0     B4 BB C1 C7 | 	byte	$0c, $0a, $09, $07, $06, $05, $00, $f2, $dd, $c9, $b8, $b1, $b4, $bb, $c1, $c7
10fd4     CB CF D3 D5 
10fd8     D8 DA DC DD 
10fdc     DE E0 E1 E2 
10fe0     E3 E3 E4 E6 | 	byte	$cb, $cf, $d3, $d5, $d8, $da, $dc, $dd, $de, $e0, $e1, $e2, $e3, $e3, $e4, $e6
10fe4     E7 E8 EA EB 
10fe8     EE EF F2 F4 
10fec     F7 FA FD 01 
10ff0     03 07 15 29 | 	byte	$e7, $e8, $ea, $eb, $ee, $ef, $f2, $f4, $f7, $fa, $fd, $01, $03, $07, $15, $29
10ff4     44 59 63 62 
10ff8     5C 57 52 4D 
10ffc     48 44 40 3C 
11000     39 35 31 2E | 	byte	$44, $59, $63, $62, $5c, $57, $52, $4d, $48, $44, $40, $3c, $39, $35, $31, $2e
11004     2A 27 23 20 
11008     1D 1A 17 14 
1100c     12 10 0E 0C 
11010     0A 08 06 05 | 	byte	$2a, $27, $23, $20, $1d, $1a, $17, $14, $12, $10, $0e, $0c, $0a, $08, $06, $05
11014     04 03 01 01 
11018     00 FF FE FD 
1101c     FC FB FB FA 
11020     FA FA F9 F7 | 	byte	$04, $03, $01, $01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $f9, $f7
11024     EC DA C8 B6 
11028     AC AA B3 C0 
1102c     CA CE CF D0 
11030     D3 D8 E9 FE | 	byte	$ec, $da, $c8, $b6, $ac, $aa, $b3, $c0, $ca, $ce, $cf, $d0, $d3, $d8, $e9, $fe
11034     18 2A 35 34 
11038     2F 2B 27 23 
1103c     20 1D 1A 18 
11040     15 13 11 0F | 	byte	$18, $2a, $35, $34, $2f, $2b, $27, $23, $20, $1d, $1a, $18, $15, $13, $11, $0f
11044     0D 0B 0A 08 
11048     07 06 04 FA 
1104c     EB D6 C5 B8 
11050     B2 B5 BB C1 | 	byte	$0d, $0b, $0a, $08, $07, $06, $04, $fa, $eb, $d6, $c5, $b8, $b2, $b5, $bb, $c1
11054     C6 CA CD D0 
11058     D3 D6 D7 D9 
1105c     DA DB DC DE 
11060     DF E0 E1 E3 | 	byte	$c6, $ca, $cd, $d0, $d3, $d6, $d7, $d9, $da, $db, $dc, $de, $df, $e0, $e1, $e3
11064     E4 E6 E8 EA 
11068     EC EE F1 F4 
1106c     F7 FA FD 01 
11070     05 0B 1C 30 | 	byte	$e4, $e6, $e8, $ea, $ec, $ee, $f1, $f4, $f7, $fa, $fd, $01, $05, $0b, $1c, $30
11074     48 5A 63 61 
11078     5B 56 51 4D 
1107c     48 44 40 3C 
11080     38 35 31 2D | 	byte	$48, $5a, $63, $61, $5b, $56, $51, $4d, $48, $44, $40, $3c, $38, $35, $31, $2d
11084     2A 27 24 21 
11088     1E 1B 18 15 
1108c     12 10 0E 0C 
11090     0A 08 07 05 | 	byte	$2a, $27, $24, $21, $1e, $1b, $18, $15, $12, $10, $0e, $0c, $0a, $08, $07, $05
11094     04 02 02 01 
11098     00 FE FE FD 
1109c     FC FB FB FA 
110a0     FA FA F9 F2 | 	byte	$04, $02, $02, $01, $00, $fe, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $f9, $f2
110a4     E6 D5 C5 B7 
110a8     AE AC AE AF 
110ac     AF B2 B9 C5 
110b0     D4 E8 FC 11 | 	byte	$e6, $d5, $c5, $b7, $ae, $ac, $ae, $af, $af, $b2, $b9, $c5, $d4, $e8, $fc, $11
110b4     26 34 3B 38 
110b8     33 2F 2A 26 
110bc     23 20 1D 1A 
110c0     17 15 12 11 | 	byte	$26, $34, $3b, $38, $33, $2f, $2a, $26, $23, $20, $1d, $1a, $17, $15, $12, $11
110c4     0F 0D 0B 0A 
110c8     08 07 06 FE 
110cc     F1 E0 CF C1 
110d0     B7 B4 B7 BC | 	byte	$0f, $0d, $0b, $0a, $08, $07, $06, $fe, $f1, $e0, $cf, $c1, $b7, $b4, $b7, $bc
110d4     C1 C5 C8 CB 
110d8     CE D0 D2 D4 
110dc     D6 D7 D8 DA 
110e0     DC DD DF E0 | 	byte	$c1, $c5, $c8, $cb, $ce, $d0, $d2, $d4, $d6, $d7, $d8, $da, $dc, $dd, $df, $e0
110e4     E2 E4 E7 E9 
110e8     EB EF F2 F5 
110ec     F8 FC FF 04 
110f0     0A 18 2D 41 | 	byte	$e2, $e4, $e7, $e9, $eb, $ef, $f2, $f5, $f8, $fc, $ff, $04, $0a, $18, $2d, $41
110f4     54 5F 62 5E 
110f8     59 53 4F 4A 
110fc     46 42 3E 3B 
11100     37 33 30 2D | 	byte	$54, $5f, $62, $5e, $59, $53, $4f, $4a, $46, $42, $3e, $3b, $37, $33, $30, $2d
11104     2A 26 23 20 
11108     1D 1A 17 14 
1110c     12 10 0E 0C 
11110     0A 08 06 05 | 	byte	$2a, $26, $23, $20, $1d, $1a, $17, $14, $12, $10, $0e, $0c, $0a, $08, $06, $05
11114     04 03 02 00 
11118     00 FF FE FD 
1111c     FC FB FA FA 
11120     FA F9 F4 EA | 	byte	$04, $03, $02, $00, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $f9, $f4, $ea
11124     DB CC BE B3 
11128     AD A5 9F 9A 
1112c     9B A2 B1 C9 
11130     E3 FF 16 2A | 	byte	$db, $cc, $be, $b3, $ad, $a5, $9f, $9a, $9b, $a2, $b1, $c9, $e3, $ff, $16, $2a
11134     38 40 3F 3A 
11138     35 30 2C 28 
1113c     24 21 1E 1A 
11140     18 16 14 11 | 	byte	$38, $40, $3f, $3a, $35, $30, $2c, $28, $24, $21, $1e, $1a, $18, $16, $14, $11
11144     0F 0D 0C 0A 
11148     08 08 04 FD 
1114c     EF E1 D0 C3 
11150     BA B5 B5 BA | 	byte	$0f, $0d, $0c, $0a, $08, $08, $04, $fd, $ef, $e1, $d0, $c3, $ba, $b5, $b5, $ba
11154     BE C2 C5 C8 
11158     CA CC CE D0 
1115c     D2 D4 D5 D7 
11160     D9 DB DD DF | 	byte	$be, $c2, $c5, $c8, $ca, $cc, $ce, $d0, $d2, $d4, $d5, $d7, $d9, $db, $dd, $df
11164     E1 E4 E7 EA 
11168     ED F0 F4 F8 
1116c     FB FF 04 0B 
11170     1B 2D 41 51 | 	byte	$e1, $e4, $e7, $ea, $ed, $f0, $f4, $f8, $fb, $ff, $04, $0b, $1b, $2d, $41, $51
11174     5E 61 5E 58 
11178     53 4F 4A 47 
1117c     42 3F 3B 38 
11180     34 30 2D 2A | 	byte	$5e, $61, $5e, $58, $53, $4f, $4a, $47, $42, $3f, $3b, $38, $34, $30, $2d, $2a
11184     27 24 20 1D 
11188     1B 18 15 12 
1118c     10 0E 0C 0A 
11190     09 07 06 04 | 	byte	$27, $24, $20, $1d, $1b, $18, $15, $12, $10, $0e, $0c, $0a, $09, $07, $06, $04
11194     03 02 01 00 
11198     FF FE FD FC 
1119c     FC FB FA FA 
111a0     F8 F2 E8 D9 | 	byte	$03, $02, $01, $00, $ff, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $f8, $f2, $e8, $d9
111a4     CC BF B5 A7 
111a8     99 8F 89 8C 
111ac     97 AD C6 E7 
111b0     04 21 34 40 | 	byte	$cc, $bf, $b5, $a7, $99, $8f, $89, $8c, $97, $ad, $c6, $e7, $04, $21, $34, $40
111b4     46 44 3E 38 
111b8     34 2F 2B 26 
111bc     23 20 1D 1B 
111c0     18 15 13 11 | 	byte	$46, $44, $3e, $38, $34, $2f, $2b, $26, $23, $20, $1d, $1b, $18, $15, $13, $11
111c4     0F 0D 0B 0A 
111c8     08 06 00 F6 
111cc     E9 DA CD C0 
111d0     B8 B4 B5 B9 | 	byte	$0f, $0d, $0b, $0a, $08, $06, $00, $f6, $e9, $da, $cd, $c0, $b8, $b4, $b5, $b9
111d4     BD C0 C3 C5 
111d8     C7 C9 CC CD 
111dc     D0 D2 D4 D6 
111e0     D8 DA DD E0 | 	byte	$bd, $c0, $c3, $c5, $c7, $c9, $cc, $cd, $d0, $d2, $d4, $d6, $d8, $da, $dd, $e0
111e4     E3 E6 E9 ED 
111e8     F0 F4 F8 FD 
111ec     01 07 14 24 
111f0     37 48 56 5F | 	byte	$e3, $e6, $e9, $ed, $f0, $f4, $f8, $fd, $01, $07, $14, $24, $37, $48, $56, $5f
111f4     60 5C 57 52 
111f8     4E 4A 46 42 
111fc     3E 3B 37 34 
11200     30 2D 2A 27 | 	byte	$60, $5c, $57, $52, $4e, $4a, $46, $42, $3e, $3b, $37, $34, $30, $2d, $2a, $27
11204     24 20 1D 1B 
11208     18 15 13 10 
1120c     0D 0B 09 08 
11210     06 05 04 02 | 	byte	$24, $20, $1d, $1b, $18, $15, $13, $10, $0d, $0b, $09, $08, $06, $05, $04, $02
11214     01 00 FF FF 
11218     FE FD FC FB 
1121c     FB FA F9 F5 
11220     ED E1 D5 C8 | 	byte	$01, $00, $ff, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $f9, $f5, $ed, $e1, $d5, $c8
11224     B9 A9 98 89 
11228     82 82 88 98 
1122c     B3 D3 F1 12 
11230     2C 40 4A 4C | 	byte	$b9, $a9, $98, $89, $82, $82, $88, $98, $b3, $d3, $f1, $12, $2c, $40, $4a, $4c
11234     47 40 3B 35 
11238     31 2C 28 25 
1123c     21 1E 1B 18 
11240     16 13 11 0F | 	byte	$47, $40, $3b, $35, $31, $2c, $28, $25, $21, $1e, $1b, $18, $16, $13, $11, $0f
11244     0D 0B 0A 08 
11248     06 00 F6 EB 
1124c     DD D1 C4 BA 
11250     B4 B2 B5 B8 | 	byte	$0d, $0b, $0a, $08, $06, $00, $f6, $eb, $dd, $d1, $c4, $ba, $b4, $b2, $b5, $b8
11254     BB BE C0 C3 
11258     C5 C7 CA CC 
1125c     CE D0 D3 D5 
11260     D8 DC DF E2 | 	byte	$bb, $be, $c0, $c3, $c5, $c7, $ca, $cc, $ce, $d0, $d3, $d5, $d8, $dc, $df, $e2
11264     E6 E9 EE F2 
11268     F6 FB FF 06 
1126c     12 22 34 44 
11270     53 5C 60 5D | 	byte	$e6, $e9, $ee, $f2, $f6, $fb, $ff, $06, $12, $22, $34, $44, $53, $5c, $60, $5d
11274     58 53 4F 4B 
11278     47 43 40 3C 
1127c     39 35 32 2F 
11280     2C 29 25 23 | 	byte	$58, $53, $4f, $4b, $47, $43, $40, $3c, $39, $35, $32, $2f, $2c, $29, $25, $23
11284     1F 1D 1A 17 
11288     14 11 0F 0D 
1128c     0B 09 07 06 
11290     04 03 02 01 | 	byte	$1f, $1d, $1a, $17, $14, $11, $0f, $0d, $0b, $09, $07, $06, $04, $03, $02, $01
11294     00 FF FE FD 
11298     FC FB FB FA 
1129c     F9 F5 ED E3 
112a0     D6 CA B7 A3 | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $f9, $f5, $ed, $e3, $d6, $ca, $b7, $a3
112a4     92 83 81 81 
112a8     83 92 AD C9 
112ac     EB 0D 28 3F 
112b0     4E 51 4C 45 | 	byte	$92, $83, $81, $81, $83, $92, $ad, $c9, $eb, $0d, $28, $3f, $4e, $51, $4c, $45
112b4     3F 3A 35 30 
112b8     2B 27 24 21 
112bc     1D 1A 18 15 
112c0     13 11 0F 0D | 	byte	$3f, $3a, $35, $30, $2b, $27, $24, $21, $1d, $1a, $18, $15, $13, $11, $0f, $0d
112c4     0B 09 08 04 
112c8     FD F2 E7 D9 
112cc     CC C1 B8 B3 
112d0     B1 B2 B5 B9 | 	byte	$0b, $09, $08, $04, $fd, $f2, $e7, $d9, $cc, $c1, $b8, $b3, $b1, $b2, $b5, $b9
112d4     BB BE C1 C3 
112d8     C5 C8 CA CD 
112dc     D0 D3 D5 D9 
112e0     DC E1 E4 E8 | 	byte	$bb, $be, $c1, $c3, $c5, $c8, $ca, $cd, $d0, $d3, $d5, $d9, $dc, $e1, $e4, $e8
112e4     ED F1 F6 FB 
112e8     00 0A 17 28 
112ec     37 47 53 5C 
112f0     5E 5B 56 52 | 	byte	$ed, $f1, $f6, $fb, $00, $0a, $17, $28, $37, $47, $53, $5c, $5e, $5b, $56, $52
112f4     4E 4A 47 44 
112f8     40 3C 39 35 
112fc     32 2F 2C 29 
11300     26 23 20 1D | 	byte	$4e, $4a, $47, $44, $40, $3c, $39, $35, $32, $2f, $2c, $29, $26, $23, $20, $1d
11304     1A 17 14 11 
11308     0F 0D 0B 09 
1130c     07 06 04 03 
11310     02 01 00 FF | 	byte	$1a, $17, $14, $11, $0f, $0d, $0b, $09, $07, $06, $04, $03, $02, $01, $00, $ff
11314     FE FD FC FB 
11318     FB FA F7 F0 
1131c     E7 DD CF BE 
11320     A8 96 85 81 | 	byte	$fe, $fd, $fc, $fb, $fb, $fa, $f7, $f0, $e7, $dd, $cf, $be, $a8, $96, $85, $81
11324     81 81 87 99 
11328     B6 D5 F3 13 
1132c     2F 42 50 53 
11330     4F 48 42 3C | 	byte	$81, $81, $87, $99, $b6, $d5, $f3, $13, $2f, $42, $50, $53, $4f, $48, $42, $3c
11334     37 32 2D 29 
11338     25 21 1F 1B 
1133c     19 16 13 11 
11340     0F 0D 0C 0A | 	byte	$37, $32, $2d, $29, $25, $21, $1f, $1b, $19, $16, $13, $11, $0f, $0d, $0c, $0a
11344     08 04 FE F3 
11348     E7 DC CF C4 
1134c     BA B3 AF AF 
11350     B1 B4 B7 BA | 	byte	$08, $04, $fe, $f3, $e7, $dc, $cf, $c4, $ba, $b3, $af, $af, $b1, $b4, $b7, $ba
11354     BD BF C2 C5 
11358     C7 CB CE D1 
1135c     D5 D8 DC E0 
11360     E5 E9 EE F3 | 	byte	$bd, $bf, $c2, $c5, $c7, $cb, $ce, $d1, $d5, $d8, $dc, $e0, $e5, $e9, $ee, $f3
11364     F8 FD 06 12 
11368     21 30 40 4E 
1136c     57 5C 5C 58 
11370     53 50 4C 48 | 	byte	$f8, $fd, $06, $12, $21, $30, $40, $4e, $57, $5c, $5c, $58, $53, $50, $4c, $48
11374     44 41 3E 3B 
11378     37 34 31 2E 
1137c     2B 28 25 22 
11380     1F 1C 19 16 | 	byte	$44, $41, $3e, $3b, $37, $34, $31, $2e, $2b, $28, $25, $22, $1f, $1c, $19, $16
11384     13 11 0E 0D 
11388     0A 09 07 05 
1138c     04 03 01 01 
11390     FF FE FD FC | 	byte	$13, $11, $0e, $0d, $0a, $09, $07, $05, $04, $03, $01, $01, $ff, $fe, $fd, $fc
11394     FC FB FB F8 
11398     F2 EB E0 D3 
1139c     C1 AB 99 88 
113a0     81 81 81 82 | 	byte	$fc, $fb, $fb, $f8, $f2, $eb, $e0, $d3, $c1, $ab, $99, $88, $81, $81, $81, $82
113a4     91 A7 C4 E3 
113a8     00 1C 36 47 
113ac     52 55 51 4B 
113b0     44 3E 39 34 | 	byte	$91, $a7, $c4, $e3, $00, $1c, $36, $47, $52, $55, $51, $4b, $44, $3e, $39, $34
113b4     2F 2B 27 23 
113b8     1F 1C 19 16 
113bc     14 12 0F 0E 
113c0     0C 0A 08 04 | 	byte	$2f, $2b, $27, $23, $1f, $1c, $19, $16, $14, $12, $0f, $0e, $0c, $0a, $08, $04
113c4     FD F4 E9 DD 
113c8     D1 C6 BC B4 
113cc     AE AC AD AF 
113d0     B3 B6 B9 BC | 	byte	$fd, $f4, $e9, $dd, $d1, $c6, $bc, $b4, $ae, $ac, $ad, $af, $b3, $b6, $b9, $bc
113d4     BF C2 C5 C8 
113d8     CC D0 D3 D7 
113dc     DC E0 E5 EA 
113e0     EF F3 F9 00 | 	byte	$bf, $c2, $c5, $c8, $cc, $d0, $d3, $d7, $dc, $e0, $e5, $ea, $ef, $f3, $f9, $00
113e4     0C 19 28 38 
113e8     46 50 58 5B 
113ec     5A 56 52 4D 
113f0     4A 47 43 40 | 	byte	$0c, $19, $28, $38, $46, $50, $58, $5b, $5a, $56, $52, $4d, $4a, $47, $43, $40
113f4     3D 3A 36 33 
113f8     30 2D 2A 28 
113fc     25 21 1F 1C 
11400     19 16 13 11 | 	byte	$3d, $3a, $36, $33, $30, $2d, $2a, $28, $25, $21, $1f, $1c, $19, $16, $13, $11
11404     0F 0C 0A 08 
11408     07 05 04 02 
1140c     01 00 FF FE 
11410     FD FC FB FB | 	byte	$0f, $0c, $0a, $08, $07, $05, $04, $02, $01, $00, $ff, $fe, $fd, $fc, $fb, $fb
11414     FA F5 F0 E6 
11418     D8 C8 B4 A2 
1141c     90 84 81 81 
11420     81 86 98 AE | 	byte	$fa, $f5, $f0, $e6, $d8, $c8, $b4, $a2, $90, $84, $81, $81, $81, $86, $98, $ae
11424     C9 E4 01 1D 
11428     32 44 4F 54 
1142c     53 4F 49 43 
11430     3D 37 32 2D | 	byte	$c9, $e4, $01, $1d, $32, $44, $4f, $54, $53, $4f, $49, $43, $3d, $37, $32, $2d
11434     29 26 22 1F 
11438     1B 19 16 13 
1143c     11 0F 0D 0B 
11440     0A 07 01 F8 | 	byte	$29, $26, $22, $1f, $1b, $19, $16, $13, $11, $0f, $0d, $0b, $0a, $07, $01, $f8
11444     EF E3 D8 CC 
11448     C1 B9 B1 AD 
1144c     AA AA AD B0 
11450     B4 B7 BA BD | 	byte	$ef, $e3, $d8, $cc, $c1, $b9, $b1, $ad, $aa, $aa, $ad, $b0, $b4, $b7, $ba, $bd
11454     C1 C5 C8 CD 
11458     D0 D5 D9 DE 
1145c     E4 E8 EE F3 
11460     F9 02 0D 1B | 	byte	$c1, $c5, $c8, $cd, $d0, $d5, $d9, $de, $e4, $e8, $ee, $f3, $f9, $02, $0d, $1b
11464     2B 38 45 4F 
11468     56 59 59 55 
1146c     51 4E 4A 47 
11470     44 40 3D 3A | 	byte	$2b, $38, $45, $4f, $56, $59, $59, $55, $51, $4e, $4a, $47, $44, $40, $3d, $3a
11474     37 34 30 2E 
11478     2B 28 25 22 
1147c     20 1D 1A 17 
11480     14 12 0F 0D | 	byte	$37, $34, $30, $2e, $2b, $28, $25, $22, $20, $1d, $1a, $17, $14, $12, $0f, $0d
11484     0B 09 08 06 
11488     05 03 02 01 
1148c     00 FF FE FD 
11490     FC FB FA F6 | 	byte	$0b, $09, $08, $06, $05, $03, $02, $01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $f6
11494     EF E5 D5 C3 
11498     B1 9F 90 84 
1149c     81 81 81 87 
114a0     98 AC C3 DE | 	byte	$ef, $e5, $d5, $c3, $b1, $9f, $90, $84, $81, $81, $81, $87, $98, $ac, $c3, $de
114a4     F9 11 27 3B 
114a8     48 50 51 50 
114ac     4D 48 42 3D 
114b0     37 32 2E 2A | 	byte	$f9, $11, $27, $3b, $48, $50, $51, $50, $4d, $48, $42, $3d, $37, $32, $2e, $2a
114b4     26 22 1F 1C 
114b8     19 16 13 11 
114bc     0F 0D 0B 09 
114c0     05 FF F6 ED | 	byte	$26, $22, $1f, $1c, $19, $16, $13, $11, $0f, $0d, $0b, $09, $05, $ff, $f6, $ed
114c4     E1 D6 CB C2 
114c8     B8 B1 AC A9 
114cc     A8 AA AD B0 
114d0     B4 B8 BB C0 | 	byte	$e1, $d6, $cb, $c2, $b8, $b1, $ac, $a9, $a8, $aa, $ad, $b0, $b4, $b8, $bb, $c0
114d4     C3 C7 CC D0 
114d8     D5 DA DF E4 
114dc     EA EF F6 FE 
114e0     09 16 25 33 | 	byte	$c3, $c7, $cc, $d0, $d5, $da, $df, $e4, $ea, $ef, $f6, $fe, $09, $16, $25, $33
114e4     40 4A 52 58 
114e8     58 56 52 4F 
114ec     4C 48 45 42 
114f0     3E 3C 39 36 | 	byte	$40, $4a, $52, $58, $58, $56, $52, $4f, $4c, $48, $45, $42, $3e, $3c, $39, $36
114f4     33 30 2D 2B 
114f8     28 25 22 1F 
114fc     1D 19 16 14 
11500     11 0F 0D 0B | 	byte	$33, $30, $2d, $2b, $28, $25, $22, $1f, $1d, $19, $16, $14, $11, $0f, $0d, $0b
11504     09 07 05 04 
11508     03 02 01 FF 
1150c     FF FD FC FC 
11510     FB F7 F1 E7 | 	byte	$09, $07, $05, $04, $03, $02, $01, $ff, $ff, $fd, $fc, $fc, $fb, $f7, $f1, $e7
11514     D7 C8 B5 A5 
11518     95 89 82 81 
1151c     82 85 93 A3 
11520     B8 D0 E7 00 | 	byte	$d7, $c8, $b5, $a5, $95, $89, $82, $81, $82, $85, $93, $a3, $b8, $d0, $e7, $00
11524     15 2A 3B 46 
11528     4D 4F 50 4E 
1152c     4B 45 40 3A 
11530     35 30 2B 27 | 	byte	$15, $2a, $3b, $46, $4d, $4f, $50, $4e, $4b, $45, $40, $3a, $35, $30, $2b, $27
11534     23 20 1D 1A 
11538     17 14 12 10 
1153c     0E 0C 0A 06 
11540     00 F8 EF E4 | 	byte	$23, $20, $1d, $1a, $17, $14, $12, $10, $0e, $0c, $0a, $06, $00, $f8, $ef, $e4
11544     D9 CF C4 BB 
11548     B3 AD A9 A7 
1154c     A7 A9 AD B0 
11550     B4 B8 BC C0 | 	byte	$d9, $cf, $c4, $bb, $b3, $ad, $a9, $a7, $a7, $a9, $ad, $b0, $b4, $b8, $bc, $c0
11554     C5 CA CE D3 
11558     D9 DE E4 E9 
1155c     F0 F7 01 0D 
11560     1A 28 35 41 | 	byte	$c5, $ca, $ce, $d3, $d9, $de, $e4, $e9, $f0, $f7, $01, $0d, $1a, $28, $35, $41
11564     4B 52 56 57 
11568     54 51 4E 4A 
1156c     47 44 41 3F 
11570     3C 39 36 33 | 	byte	$4b, $52, $56, $57, $54, $51, $4e, $4a, $47, $44, $41, $3f, $3c, $39, $36, $33
11574     30 2E 2B 28 
11578     25 22 1F 1D 
1157c     1A 17 14 11 
11580     0F 0D 0B 09 | 	byte	$30, $2e, $2b, $28, $25, $22, $1f, $1d, $1a, $17, $14, $11, $0f, $0d, $0b, $09
11584     07 06 04 03 
11588     02 01 FF FE 
1158c     FD FC FC FA 
11590     F5 EC E0 D0 | 	byte	$07, $06, $04, $03, $02, $01, $ff, $fe, $fd, $fc, $fc, $fa, $f5, $ec, $e0, $d0
11594     C0 AF A1 93 
11598     89 83 82 84 
1159c     8B 98 A8 BC 
115a0     D0 E7 FC 12 | 	byte	$c0, $af, $a1, $93, $89, $83, $82, $84, $8b, $98, $a8, $bc, $d0, $e7, $fc, $12
115a4     24 34 41 48 
115a8     4C 4E 4E 4C 
115ac     49 45 3E 39 
115b0     34 2F 2A 26 | 	byte	$24, $34, $41, $48, $4c, $4e, $4e, $4c, $49, $45, $3e, $39, $34, $2f, $2a, $26
115b4     23 1F 1C 19 
115b8     16 13 11 0F 
115bc     0D 0A 07 02 
115c0     FB F3 E9 DF | 	byte	$23, $1f, $1c, $19, $16, $13, $11, $0f, $0d, $0a, $07, $02, $fb, $f3, $e9, $df
115c4     D5 CB C1 B8 
115c8     B1 AC A8 A6 
115cc     A5 A7 AB AF 
115d0     B3 B7 BC C1 | 	byte	$d5, $cb, $c1, $b8, $b1, $ac, $a8, $a6, $a5, $a7, $ab, $af, $b3, $b7, $bc, $c1
115d4     C5 CB D0 D6 
115d8     DB E1 E7 ED 
115dc     F4 FF 0B 18 
115e0     25 32 3D 47 | 	byte	$c5, $cb, $d0, $d6, $db, $e1, $e7, $ed, $f4, $ff, $0b, $18, $25, $32, $3d, $47
115e4     4E 53 55 54 
115e8     50 4D 4A 47 
115ec     45 42 3F 3C 
115f0     3A 37 35 32 | 	byte	$4e, $53, $55, $54, $50, $4d, $4a, $47, $45, $42, $3f, $3c, $3a, $37, $35, $32
115f4     2F 2C 2A 27 
115f8     24 21 1E 1C 
115fc     1A 17 14 11 
11600     0F 0D 0B 09 | 	byte	$2f, $2c, $2a, $27, $24, $21, $1e, $1c, $1a, $17, $14, $11, $0f, $0d, $0b, $09
11604     07 05 04 03 
11608     01 00 FF FE 
1160c     FD FC FA F5 
11610     EB DF D1 C0 | 	byte	$07, $05, $04, $03, $01, $00, $ff, $fe, $fd, $fc, $fa, $f5, $eb, $df, $d1, $c0
11614     B2 A3 96 8D 
11618     87 85 87 8D 
1161c     97 A6 B5 C9 
11620     DD F0 05 16 | 	byte	$b2, $a3, $96, $8d, $87, $85, $87, $8d, $97, $a6, $b5, $c9, $dd, $f0, $05, $16
11624     28 35 3F 45 
11628     49 4B 4C 4B 
1162c     49 46 41 3A 
11630     35 30 2C 28 | 	byte	$28, $35, $3f, $45, $49, $4b, $4c, $4b, $49, $46, $41, $3a, $35, $30, $2c, $28
11634     24 20 1D 1A 
11638     17 14 11 0F 
1163c     0D 0A 07 02 
11640     FB F3 EA E0 | 	byte	$24, $20, $1d, $1a, $17, $14, $11, $0f, $0d, $0a, $07, $02, $fb, $f3, $ea, $e0
11644     D7 CD C3 BB 
11648     B3 AD A9 A6 
1164c     A5 A6 A8 AD 
11650     B1 B6 BA BF | 	byte	$d7, $cd, $c3, $bb, $b3, $ad, $a9, $a6, $a5, $a6, $a8, $ad, $b1, $b6, $ba, $bf
11654     C4 CA CF D4 
11658     DA E0 E7 EE 
1165c     F8 02 0F 1B 
11660     29 34 3F 47 | 	byte	$c4, $ca, $cf, $d4, $da, $e0, $e7, $ee, $f8, $02, $0f, $1b, $29, $34, $3f, $47
11664     4E 52 53 52 
11668     4F 4B 49 46 
1166c     43 41 3E 3C 
11670     39 36 34 31 | 	byte	$4e, $52, $53, $52, $4f, $4b, $49, $46, $43, $41, $3e, $3c, $39, $36, $34, $31
11674     2F 2D 2B 28 
11678     25 22 1F 1D 
1167c     1A 17 14 11 
11680     0F 0D 0B 09 | 	byte	$2f, $2d, $2b, $28, $25, $22, $1f, $1d, $1a, $17, $14, $11, $0f, $0d, $0b, $09
11684     07 05 04 03 
11688     01 00 FF FE 
1168c     FD FB F6 EE 
11690     E3 D6 C7 B8 | 	byte	$07, $05, $04, $03, $01, $00, $ff, $fe, $fd, $fb, $f6, $ee, $e3, $d6, $c7, $b8
11694     AB 9F 94 8D 
11698     89 89 8D 93 
1169c     9F AC BB CE 
116a0     DF F3 05 17 | 	byte	$ab, $9f, $94, $8d, $89, $89, $8d, $93, $9f, $ac, $bb, $ce, $df, $f3, $05, $17
116a4     25 31 3A 41 
116a8     45 48 49 4A 
116ac     49 47 43 3E 
116b0     39 33 2F 2A | 	byte	$25, $31, $3a, $41, $45, $48, $49, $4a, $49, $47, $43, $3e, $39, $33, $2f, $2a
116b4     26 22 1F 1B 
116b8     19 16 13 10 
116bc     0E 0A 07 02 
116c0     FC F5 ED E3 | 	byte	$26, $22, $1f, $1b, $19, $16, $13, $10, $0e, $0a, $07, $02, $fc, $f5, $ed, $e3
116c4     DA D0 C7 BF 
116c8     B7 B0 AB A7 
116cc     A5 A4 A6 A9 
116d0     AD B2 B7 BC | 	byte	$da, $d0, $c7, $bf, $b7, $b0, $ab, $a7, $a5, $a4, $a6, $a9, $ad, $b2, $b7, $bc
116d4     C1 C7 CD D3 
116d8     D9 DF E6 EE 
116dc     F8 04 10 1D 
116e0     28 34 3E 46 | 	byte	$c1, $c7, $cd, $d3, $d9, $df, $e6, $ee, $f8, $04, $10, $1d, $28, $34, $3e, $46
116e4     4C 50 51 50 
116e8     4D 4A 48 45 
116ec     42 40 3D 3B 
116f0     39 36 34 31 | 	byte	$4c, $50, $51, $50, $4d, $4a, $48, $45, $42, $40, $3d, $3b, $39, $36, $34, $31
116f4     2F 2D 2A 28 
116f8     25 23 20 1D 
116fc     1A 18 14 12 
11700     0F 0D 0B 09 | 	byte	$2f, $2d, $2a, $28, $25, $23, $20, $1d, $1a, $18, $14, $12, $0f, $0d, $0b, $09
11704     07 05 04 03 
11708     01 00 FF FE 
1170c     FC F8 F0 E6 
11710     DA CD BE B2 | 	byte	$07, $05, $04, $03, $01, $00, $ff, $fe, $fc, $f8, $f0, $e6, $da, $cd, $be, $b2
11714     A5 9B 94 8E 
11718     8C 8E 93 9C 
1171c     A6 B5 C3 D5 
11720     E5 F7 08 16 | 	byte	$a5, $9b, $94, $8e, $8c, $8e, $93, $9c, $a6, $b5, $c3, $d5, $e5, $f7, $08, $16
11724     24 2F 38 3D 
11728     41 44 47 48 
1172c     48 47 45 41 
11730     3C 36 31 2C | 	byte	$24, $2f, $38, $3d, $41, $44, $47, $48, $48, $47, $45, $41, $3c, $36, $31, $2c
11734     29 24 21 1D 
11738     1A 17 14 11 
1173c     0D 0A 06 01 
11740     FB F5 EC E3 | 	byte	$29, $24, $21, $1d, $1a, $17, $14, $11, $0d, $0a, $06, $01, $fb, $f5, $ec, $e3
11744     DA D1 C9 C0 
11748     B8 B1 AB A7 
1174c     A5 A4 A4 A6 
11750     AB AF B5 BA | 	byte	$da, $d1, $c9, $c0, $b8, $b1, $ab, $a7, $a5, $a4, $a4, $a6, $ab, $af, $b5, $ba
11754     C0 C6 CD D3 
11758     D9 E0 E8 F2 
1175c     FD 09 15 22 
11760     2D 37 40 47 | 	byte	$c0, $c6, $cd, $d3, $d9, $e0, $e8, $f2, $fd, $09, $15, $22, $2d, $37, $40, $47
11764     4C 4E 4E 4C 
11768     4A 47 45 43 
1176c     41 3E 3C 3A 
11770     37 36 34 31 | 	byte	$4c, $4e, $4e, $4c, $4a, $47, $45, $43, $41, $3e, $3c, $3a, $37, $36, $34, $31
11774     2E 2C 2A 27 
11778     24 22 1F 1C 
1177c     1A 17 14 12 
11780     0F 0D 0B 09 | 	byte	$2e, $2c, $2a, $27, $24, $22, $1f, $1c, $1a, $17, $14, $12, $0f, $0d, $0b, $09
11784     07 06 04 02 
11788     01 00 FF FC 
1178c     F7 EE E3 D9 
11790     CC BF B3 A7 | 	byte	$07, $06, $04, $02, $01, $00, $ff, $fc, $f7, $ee, $e3, $d9, $cc, $bf, $b3, $a7
11794     9E 97 93 91 
11798     92 96 9E A8 
1179c     B4 C2 D1 E0 
117a0     F1 00 0F 1C | 	byte	$9e, $97, $93, $91, $92, $96, $9e, $a8, $b4, $c2, $d1, $e0, $f1, $00, $0f, $1c
117a4     27 30 36 3B 
117a8     3F 42 45 46 
117ac     46 45 44 40 
117b0     3C 37 32 2D | 	byte	$27, $30, $36, $3b, $3f, $42, $45, $46, $46, $45, $44, $40, $3c, $37, $32, $2d
117b4     29 25 21 1D 
117b8     1A 17 13 10 
117bc     0C 08 04 FF 
117c0     F8 F1 E9 E0 | 	byte	$29, $25, $21, $1d, $1a, $17, $13, $10, $0c, $08, $04, $ff, $f8, $f1, $e9, $e0
117c4     D7 CE C5 BE 
117c8     B6 B0 AB A7 
117cc     A5 A4 A4 A7 
117d0     AB B0 B6 BC | 	byte	$d7, $ce, $c5, $be, $b6, $b0, $ab, $a7, $a5, $a4, $a4, $a7, $ab, $b0, $b6, $bc
117d4     C2 C8 CF D6 
117d8     DC E5 F0 FA 
117dc     07 14 1F 2B 
117e0     34 3D 43 49 | 	byte	$c2, $c8, $cf, $d6, $dc, $e5, $f0, $fa, $07, $14, $1f, $2b, $34, $3d, $43, $49
117e4     4B 4C 4B 49 
117e8     46 44 42 40 
117ec     3E 3C 3A 38 
117f0     36 34 32 2F | 	byte	$4b, $4c, $4b, $49, $46, $44, $42, $40, $3e, $3c, $3a, $38, $36, $34, $32, $2f
117f4     2D 2B 28 26 
117f8     23 21 1E 1B 
117fc     19 16 13 11 
11800     0E 0C 0A 08 | 	byte	$2d, $2b, $28, $26, $23, $21, $1e, $1b, $19, $16, $13, $11, $0e, $0c, $0a, $08
11804     06 05 04 02 
11808     01 FE F9 F2 
1180c     E9 DE D2 C7 
11810     BB AF A6 9E | 	byte	$06, $05, $04, $02, $01, $fe, $f9, $f2, $e9, $de, $d2, $c7, $bb, $af, $a6, $9e
11814     99 96 95 97 
11818     9D A5 AE BA 
1181c     C7 D5 E3 F1 
11820     00 0D 1A 24 | 	byte	$99, $96, $95, $97, $9d, $a5, $ae, $ba, $c7, $d5, $e3, $f1, $00, $0d, $1a, $24
11824     2C 33 37 3B 
11828     3D 40 42 44 
1182c     44 43 41 3E 
11830     39 35 2F 2B | 	byte	$2c, $33, $37, $3b, $3d, $40, $42, $44, $44, $43, $41, $3e, $39, $35, $2f, $2b
11834     27 23 20 1C 
11838     18 15 10 0C 
1183c     08 04 FF F9 
11840     F1 EA E1 D8 | 	byte	$27, $23, $20, $1c, $18, $15, $10, $0c, $08, $04, $ff, $f9, $f1, $ea, $e1, $d8
11844     D0 C8 C1 B9 
11848     B3 AD A9 A7 
1184c     A5 A5 A6 A9 
11850     AE B4 BA C0 | 	byte	$d0, $c8, $c1, $b9, $b3, $ad, $a9, $a7, $a5, $a5, $a6, $a9, $ae, $b4, $ba, $c0
11854     C7 CD D4 DC 
11858     E7 F1 FC 09 
1185c     14 20 2B 35 
11860     3D 43 47 49 | 	byte	$c7, $cd, $d4, $dc, $e7, $f1, $fc, $09, $14, $20, $2b, $35, $3d, $43, $47, $49
11864     4A 48 46 44 
11868     42 40 3F 3D 
1186c     3B 39 37 35 
11870     33 31 2F 2D | 	byte	$4a, $48, $46, $44, $42, $40, $3f, $3d, $3b, $39, $37, $35, $33, $31, $2f, $2d
11874     2B 28 26 23 
11878     21 1E 1B 19 
1187c     16 13 10 0E 
11880     0C 0A 08 06 | 	byte	$2b, $28, $26, $23, $21, $1e, $1b, $19, $16, $13, $10, $0e, $0c, $0a, $08, $06
11884     05 03 02 FE 
11888     F9 F2 EA DF 
1188c     D5 C9 BE B3 
11890     AB A3 9E 9A | 	byte	$05, $03, $02, $fe, $f9, $f2, $ea, $df, $d5, $c9, $be, $b3, $ab, $a3, $9e, $9a
11894     9A 9B 9F A5 
11898     AE B8 C4 D1 
1189c     DD EB F8 05 
118a0     11 1B 24 2B | 	byte	$9a, $9b, $9f, $a5, $ae, $b8, $c4, $d1, $dd, $eb, $f8, $05, $11, $1b, $24, $2b
118a4     30 35 38 3B 
118a8     3E 40 41 42 
118ac     41 40 3D 3A 
118b0     36 31 2C 28 | 	byte	$30, $35, $38, $3b, $3e, $40, $41, $42, $41, $40, $3d, $3a, $36, $31, $2c, $28
118b4     24 20 1C 18 
118b8     14 0F 0B 06 
118bc     02 FD F6 F0 
118c0     E7 DF D8 CF | 	byte	$24, $20, $1c, $18, $14, $0f, $0b, $06, $02, $fd, $f6, $f0, $e7, $df, $d8, $cf
118c4     C7 C0 B9 B4 
118c8     AE AA A7 A6 
118cc     A6 A8 AB AE 
118d0     B4 BA C1 C8 | 	byte	$c7, $c0, $b9, $b4, $ae, $aa, $a7, $a6, $a6, $a8, $ab, $ae, $b4, $ba, $c1, $c8
118d4     CF D8 E1 EC 
118d8     F8 03 10 1B 
118dc     26 2F 37 3D 
118e0     43 46 47 47 | 	byte	$cf, $d8, $e1, $ec, $f8, $03, $10, $1b, $26, $2f, $37, $3d, $43, $46, $47, $47
118e4     45 43 41 40 
118e8     3E 3D 3B 3A 
118ec     38 36 34 32 
118f0     31 2F 2D 2A | 	byte	$45, $43, $41, $40, $3e, $3d, $3b, $3a, $38, $36, $34, $32, $31, $2f, $2d, $2a
118f4     28 26 23 20 
118f8     1E 1B 18 15 
118fc     12 10 0E 0B 
11900     09 07 06 04 | 	byte	$28, $26, $23, $20, $1e, $1b, $18, $15, $12, $10, $0e, $0b, $09, $07, $06, $04
11904     01 FC F7 F0 
11908     E5 DA D1 C6 
1190c     BC B4 AB A5 
11910     A0 9E 9E A0 | 	byte	$01, $fc, $f7, $f0, $e5, $da, $d1, $c6, $bc, $b4, $ab, $a5, $a0, $9e, $9e, $a0
11914     A4 AA B2 BB 
11918     C7 D2 DF EB 
1191c     F8 03 0E 17 
11920     20 26 2B 2F | 	byte	$a4, $aa, $b2, $bb, $c7, $d2, $df, $eb, $f8, $03, $0e, $17, $20, $26, $2b, $2f
11924     33 36 3A 3D 
11928     3E 40 40 3F 
1192c     3E 3C 39 34 
11930     2F 2A 27 22 | 	byte	$33, $36, $3a, $3d, $3e, $40, $40, $3f, $3e, $3c, $39, $34, $2f, $2a, $27, $22
11934     1E 19 14 10 
11938     0B 07 02 FD 
1193c     F8 F1 E9 E1 
11940     DA D3 CA C3 | 	byte	$1e, $19, $14, $10, $0b, $07, $02, $fd, $f8, $f1, $e9, $e1, $da, $d3, $ca, $c3
11944     BC B6 B2 AD 
11948     AA A8 A7 A9 
1194c     AB AE B2 B8 
11950     BF C7 CE D7 | 	byte	$bc, $b6, $b2, $ad, $aa, $a8, $a7, $a9, $ab, $ae, $b2, $b8, $bf, $c7, $ce, $d7
11954     E1 EB F8 03 
11958     0F 1A 24 2D 
1195c     35 3B 40 42 
11960     44 43 42 40 | 	byte	$e1, $eb, $f8, $03, $0f, $1a, $24, $2d, $35, $3b, $40, $42, $44, $43, $42, $40
11964     3F 3E 3D 3B 
11968     3A 39 37 36 
1196c     34 33 31 2F 
11970     2D 2B 28 26 | 	byte	$3f, $3e, $3d, $3b, $3a, $39, $37, $36, $34, $33, $31, $2f, $2d, $2b, $28, $26
11974     24 21 1F 1C 
11978     19 16 13 11 
1197c     0E 0C 0A 08 
11980     06 02 FD F8 | 	byte	$24, $21, $1f, $1c, $19, $16, $13, $11, $0e, $0c, $0a, $08, $06, $02, $fd, $f8
11984     F0 E8 DE D4 
11988     CB C0 B8 B0 
1198c     AA A5 A2 A1 
11990     A2 A6 AA B2 | 	byte	$f0, $e8, $de, $d4, $cb, $c0, $b8, $b0, $aa, $a5, $a2, $a1, $a2, $a6, $aa, $b2
11994     B9 C3 CE DA 
11998     E5 F1 FB 06 
1199c     0F 18 20 25 
119a0     29 2D 31 35 | 	byte	$b9, $c3, $ce, $da, $e5, $f1, $fb, $06, $0f, $18, $20, $25, $29, $2d, $31, $35
119a4     37 3A 3C 3E 
119a8     3E 3E 3D 3B 
119ac     39 35 31 2C 
119b0     27 22 1E 19 | 	byte	$37, $3a, $3c, $3e, $3e, $3e, $3d, $3b, $39, $35, $31, $2c, $27, $22, $1e, $19
119b4     14 0F 0A 06 
119b8     01 FC F6 F0 
119bc     E9 E1 DA D2 
119c0     CA C4 BE B8 | 	byte	$14, $0f, $0a, $06, $01, $fc, $f6, $f0, $e9, $e1, $da, $d2, $ca, $c4, $be, $b8
119c4     B3 AF AC AA 
119c8     AA AB AD AF 
119cc     B4 BA C0 C8 
119d0     D1 DA E5 F0 | 	byte	$b3, $af, $ac, $aa, $aa, $ab, $ad, $af, $b4, $ba, $c0, $c8, $d1, $da, $e5, $f0
119d4     FC 06 12 1C 
119d8     25 2E 35 3A 
119dc     3E 40 41 40 
119e0     3F 3E 3C 3B | 	byte	$fc, $06, $12, $1c, $25, $2e, $35, $3a, $3e, $40, $41, $40, $3f, $3e, $3c, $3b
119e4     3B 3A 39 37 
119e8     36 34 33 32 
119ec     30 2E 2C 2A 
119f0     28 26 24 21 | 	byte	$3b, $3a, $39, $37, $36, $34, $33, $32, $30, $2e, $2c, $2a, $28, $26, $24, $21
119f4     1F 1D 19 16 
119f8     13 10 0E 0C 
119fc     0A 07 03 FE 
11a00     F7 F1 E8 DE | 	byte	$1f, $1d, $19, $16, $13, $10, $0e, $0c, $0a, $07, $03, $fe, $f7, $f1, $e8, $de
11a04     D6 CC C2 BB 
11a08     B3 AD A8 A6 
11a0c     A5 A5 A8 AC 
11a10     B3 BA C2 CC | 	byte	$d6, $cc, $c2, $bb, $b3, $ad, $a8, $a6, $a5, $a5, $a8, $ac, $b3, $ba, $c2, $cc
11a14     D6 E1 EB F6 
11a18     00 0A 12 19 
11a1c     20 24 28 2C 
11a20     30 33 35 38 | 	byte	$d6, $e1, $eb, $f6, $00, $0a, $12, $19, $20, $24, $28, $2c, $30, $33, $35, $38
11a24     3A 3B 3D 3C 
11a28     3C 3A 38 35 
11a2c     31 2D 28 23 
11a30     1D 18 13 0E | 	byte	$3a, $3b, $3d, $3c, $3c, $3a, $38, $35, $31, $2d, $28, $23, $1d, $18, $13, $0e
11a34     09 04 FF FB 
11a38     F4 EE E7 E0 
11a3c     D9 D2 CB C5 
11a40     BF BA B5 B2 | 	byte	$09, $04, $ff, $fb, $f4, $ee, $e7, $e0, $d9, $d2, $cb, $c5, $bf, $ba, $b5, $b2
11a44     AF AD AD AD 
11a48     AF B2 B6 BA 
11a4c     C1 CA D2 DD 
11a50     E8 F2 FE 08 | 	byte	$af, $ad, $ad, $ad, $af, $b2, $b6, $ba, $c1, $ca, $d2, $dd, $e8, $f2, $fe, $08
11a54     13 1C 25 2D 
11a58     33 38 3C 3D 
11a5c     3E 3E 3D 3C 
11a60     3B 3A 39 38 | 	byte	$13, $1c, $25, $2d, $33, $38, $3c, $3d, $3e, $3e, $3d, $3c, $3b, $3a, $39, $38
11a64     37 36 35 34 
11a68     32 31 30 2E 
11a6c     2C 2B 28 26 
11a70     24 21 1E 1C | 	byte	$37, $36, $35, $34, $32, $31, $30, $2e, $2c, $2b, $28, $26, $24, $21, $1e, $1c
11a74     1A 16 14 11 
11a78     0F 0C 09 04 
11a7c     FF F8 F2 EA 
11a80     E2 D9 D0 C8 | 	byte	$1a, $16, $14, $11, $0f, $0c, $09, $04, $ff, $f8, $f2, $ea, $e2, $d9, $d0, $c8
11a84     C0 B9 B3 AE 
11a88     AB A9 A9 AA 
11a8c     AD B2 B8 C0 
11a90     C8 D1 DA E5 | 	byte	$c0, $b9, $b3, $ae, $ab, $a9, $a9, $aa, $ad, $b2, $b8, $c0, $c8, $d1, $da, $e5
11a94     EE F7 01 09 
11a98     12 18 1E 22 
11a9c     26 29 2C 30 
11aa0     32 35 38 39 | 	byte	$ee, $f7, $01, $09, $12, $18, $1e, $22, $26, $29, $2c, $30, $32, $35, $38, $39
11aa4     3B 3B 3B 3B 
11aa8     39 36 33 2F 
11aac     2B 25 1F 1A 
11ab0     14 0F 0A 05 | 	byte	$3b, $3b, $3b, $3b, $39, $36, $33, $2f, $2b, $25, $1f, $1a, $14, $0f, $0a, $05
11ab4     00 FB F5 EF 
11ab8     E8 E2 DC D5 
11abc     CE C8 C2 BD 
11ac0     B9 B5 B2 B0 | 	byte	$00, $fb, $f5, $ef, $e8, $e2, $dc, $d5, $ce, $c8, $c2, $bd, $b9, $b5, $b2, $b0
11ac4     AF B0 B0 B2 
11ac8     B5 BA C0 C8 
11acc     D1 DC E5 F1 
11ad0     FB 07 11 1A | 	byte	$af, $b0, $b0, $b2, $b5, $ba, $c0, $c8, $d1, $dc, $e5, $f1, $fb, $07, $11, $1a
11ad4     22 2A 30 35 
11ad8     38 3A 3B 3B 
11adc     3A 39 38 38 
11ae0     37 37 36 35 | 	byte	$22, $2a, $30, $35, $38, $3a, $3b, $3b, $3a, $39, $38, $38, $37, $37, $36, $35
11ae4     34 33 32 31 
11ae8     30 2F 2D 2B 
11aec     29 27 25 22 
11af0     20 1D 1B 18 | 	byte	$34, $33, $32, $31, $30, $2f, $2d, $2b, $29, $27, $25, $22, $20, $1d, $1b, $18
11af4     15 12 0F 0C 
11af8     08 03 FD F7 
11afc     EF E8 DF D8 
11b00     D0 C7 C0 BA | 	byte	$15, $12, $0f, $0c, $08, $03, $fd, $f7, $ef, $e8, $df, $d8, $d0, $c7, $c0, $ba
11b04     B5 B0 AD AC 
11b08     AD AE B1 B5 
11b0c     BB C2 CA D2 
11b10     DB E4 ED F6 | 	byte	$b5, $b0, $ad, $ac, $ad, $ae, $b1, $b5, $bb, $c2, $ca, $d2, $db, $e4, $ed, $f6
11b14     FF 06 0E 14 
11b18     1A 1E 21 25 
11b1c     28 2B 2E 31 
11b20     34 36 37 39 | 	byte	$ff, $06, $0e, $14, $1a, $1e, $21, $25, $28, $2b, $2e, $31, $34, $36, $37, $39
11b24     3A 3A 39 38 
11b28     36 33 2E 2A 
11b2c     24 1E 18 13 
11b30     0D 08 02 FE | 	byte	$3a, $3a, $39, $38, $36, $33, $2e, $2a, $24, $1e, $18, $13, $0d, $08, $02, $fe
11b34     F9 F3 ED E7 
11b38     E0 DA D4 CE 
11b3c     C9 C4 BF BB 
11b40     B7 B5 B3 B2 | 	byte	$f9, $f3, $ed, $e7, $e0, $da, $d4, $ce, $c9, $c4, $bf, $bb, $b7, $b5, $b3, $b2
11b44     B2 B3 B6 B9 
11b48     BE C5 CC D5 
11b4c     E0 E9 F4 FE 
11b50     08 12 1A 23 | 	byte	$b2, $b3, $b6, $b9, $be, $c5, $cc, $d5, $e0, $e9, $f4, $fe, $08, $12, $1a, $23
11b54     29 2E 33 36 
11b58     37 38 37 37 
11b5c     36 36 36 35 
11b60     35 34 34 33 | 	byte	$29, $2e, $33, $36, $37, $38, $37, $37, $36, $36, $36, $35, $35, $34, $34, $33
11b64     33 32 31 2F 
11b68     2E 2C 2A 29 
11b6c     27 25 23 20 
11b70     1E 1B 18 15 | 	byte	$33, $32, $31, $2f, $2e, $2c, $2a, $29, $27, $25, $23, $20, $1e, $1b, $18, $15
11b74     11 0E 09 04 
11b78     FD F7 F1 E9 
11b7c     E2 DA D2 CA 
11b80     C4 BE B9 B5 | 	byte	$11, $0e, $09, $04, $fd, $f7, $f1, $e9, $e2, $da, $d2, $ca, $c4, $be, $b9, $b5
11b84     B2 B1 B1 B2 
11b88     B4 B8 BD C3 
11b8c     C9 D1 D9 E1 
11b90     EA F1 FA 02 | 	byte	$b2, $b1, $b1, $b2, $b4, $b8, $bd, $c3, $c9, $d1, $d9, $e1, $ea, $f1, $fa, $02
11b94     08 0F 14 19 
11b98     1D 20 23 25 
11b9c     28 2B 2E 31 
11ba0     33 35 36 38 | 	byte	$08, $0f, $14, $19, $1d, $20, $23, $25, $28, $2b, $2e, $31, $33, $35, $36, $38
11ba4     38 38 36 34 
11ba8     32 2E 29 24 
11bac     1E 18 12 0D 
11bb0     07 02 FE F9 | 	byte	$38, $38, $36, $34, $32, $2e, $29, $24, $1e, $18, $12, $0d, $07, $02, $fe, $f9
11bb4     F4 ED E8 E1 
11bb8     DC D6 D0 CA 
11bbc     C6 C1 BD BA 
11bc0     B8 B6 B5 B6 | 	byte	$f4, $ed, $e8, $e1, $dc, $d6, $d0, $ca, $c6, $c1, $bd, $ba, $b8, $b6, $b5, $b6
11bc4     B6 B8 BB C0 
11bc8     C6 CE D7 DF 
11bcc     EA F4 FE 06 
11bd0     10 18 1F 26 | 	byte	$b6, $b8, $bb, $c0, $c6, $ce, $d7, $df, $ea, $f4, $fe, $06, $10, $18, $1f, $26
11bd4     2B 2E 31 33 
11bd8     33 33 33 33 
11bdc     33 33 33 33 
11be0     33 33 32 31 | 	byte	$2b, $2e, $31, $33, $33, $33, $33, $33, $33, $33, $33, $33, $33, $33, $32, $31
11be4     31 30 2F 2E 
11be8     2D 2B 29 27 
11bec     26 23 21 1E 
11bf0     1B 19 15 11 | 	byte	$31, $30, $2f, $2e, $2d, $2b, $29, $27, $26, $23, $21, $1e, $1b, $19, $15, $11
11bf4     0C 07 01 FA 
11bf8     F4 ED E6 DF 
11bfc     D7 D1 C9 C3 
11c00     BE BA B7 B5 | 	byte	$0c, $07, $01, $fa, $f4, $ed, $e6, $df, $d7, $d1, $c9, $c3, $be, $ba, $b7, $b5
11c04     B4 B4 B6 B8 
11c08     BC C1 C7 CD 
11c0c     D4 DC E4 EB 
11c10     F3 FA 01 07 | 	byte	$b4, $b4, $b6, $b8, $bc, $c1, $c7, $cd, $d4, $dc, $e4, $eb, $f3, $fa, $01, $07
11c14     0E 13 17 1A 
11c18     1D 1F 22 25 
11c1c     28 2B 2D 30 
11c20     32 33 35 36 | 	byte	$0e, $13, $17, $1a, $1d, $1f, $22, $25, $28, $2b, $2d, $30, $32, $33, $35, $36
11c24     36 35 34 32 
11c28     2F 2B 26 21 
11c2c     1A 15 0F 09 
11c30     04 FF FA F5 | 	byte	$36, $35, $34, $32, $2f, $2b, $26, $21, $1a, $15, $0f, $09, $04, $ff, $fa, $f5
11c34     F0 EB E5 E0 
11c38     DA D4 CF CA 
11c3c     C6 C2 BF BC 
11c40     BB B9 B9 B9 | 	byte	$f0, $eb, $e5, $e0, $da, $d4, $cf, $ca, $c6, $c2, $bf, $bc, $bb, $b9, $b9, $b9
11c44     BB BD C1 C6 
11c48     CD D4 DD E6 
11c4c     EF F9 01 0B 
11c50     12 1A 20 25 | 	byte	$bb, $bd, $c1, $c6, $cd, $d4, $dd, $e6, $ef, $f9, $01, $0b, $12, $1a, $20, $25
11c54     2A 2D 2F 30 
11c58     30 30 30 31 
11c5c     31 31 31 31 
11c60     31 31 31 31 | 	byte	$2a, $2d, $2f, $30, $30, $30, $30, $31, $31, $31, $31, $31, $31, $31, $31, $31
11c64     30 30 2F 2E 
11c68     2C 2B 29 27 
11c6c     25 23 21 1E 
11c70     1B 17 13 0D | 	byte	$30, $30, $2f, $2e, $2c, $2b, $29, $27, $25, $23, $21, $1e, $1b, $17, $13, $0d
11c74     08 01 FA F4 
11c78     EE E7 DF D9 
11c7c     D2 CC C6 C1 
11c80     BD BA B8 B7 | 	byte	$08, $01, $fa, $f4, $ee, $e7, $df, $d9, $d2, $cc, $c6, $c1, $bd, $ba, $b8, $b7
11c84     B8 B9 BB BE 
11c88     C3 C8 CD D4 
11c8c     DA E2 E8 F0 
11c90     F7 FE 05 0A | 	byte	$b8, $b9, $bb, $be, $c3, $c8, $cd, $d4, $da, $e2, $e8, $f0, $f7, $fe, $05, $0a
11c94     0F 13 17 1A 
11c98     1C 1E 21 24 
11c9c     27 29 2B 2E 
11ca0     30 32 33 34 | 	byte	$0f, $13, $17, $1a, $1c, $1e, $21, $24, $27, $29, $2b, $2e, $30, $32, $33, $34
11ca4     34 34 32 30 
11ca8     2D 2A 25 20 
11cac     1A 14 0F 09 
11cb0     03 FE F9 F5 | 	byte	$34, $34, $32, $30, $2d, $2a, $25, $20, $1a, $14, $0f, $09, $03, $fe, $f9, $f5
11cb4     EF EB E5 E0 
11cb8     DB D6 D1 CC 
11cbc     C9 C5 C2 C0 
11cc0     BE BD BD BD | 	byte	$ef, $eb, $e5, $e0, $db, $d6, $d1, $cc, $c9, $c5, $c2, $c0, $be, $bd, $bd, $bd
11cc4     BE C1 C5 CA 
11cc8     D0 D7 DF E7 
11ccc     EF F8 00 09 
11cd0     11 17 1D 22 | 	byte	$be, $c1, $c5, $ca, $d0, $d7, $df, $e7, $ef, $f8, $00, $09, $11, $17, $1d, $22
11cd4     26 29 2B 2C 
11cd8     2C 2C 2D 2D 
11cdc     2E 2E 2F 2F 
11ce0     2F 2F 30 30 | 	byte	$26, $29, $2b, $2c, $2c, $2c, $2d, $2d, $2e, $2e, $2f, $2f, $2f, $2f, $30, $30
11ce4     30 2F 2F 2E 
11ce8     2C 2B 29 28 
11cec     26 24 21 1F 
11cf0     1C 17 12 0B | 	byte	$30, $2f, $2f, $2e, $2c, $2b, $29, $28, $26, $24, $21, $1f, $1c, $17, $12, $0b
11cf4     05 FE F8 F1 
11cf8     EA E4 DD D7 
11cfc     D1 CB C6 C2 
11d00     BF BC BB BA | 	byte	$05, $fe, $f8, $f1, $ea, $e4, $dd, $d7, $d1, $cb, $c6, $c2, $bf, $bc, $bb, $ba
11d04     BB BD BF C3 
11d08     C7 CC D2 D8 
11d0c     DE E5 EB F2 
11d10     F8 FF 05 0A | 	byte	$bb, $bd, $bf, $c3, $c7, $cc, $d2, $d8, $de, $e5, $eb, $f2, $f8, $ff, $05, $0a
11d14     0E 12 15 18 
11d18     1A 1C 1E 21 
11d1c     24 26 29 2B 
11d20     2D 2F 30 32 | 	byte	$0e, $12, $15, $18, $1a, $1c, $1e, $21, $24, $26, $29, $2b, $2d, $2f, $30, $32
11d24     32 32 31 2F 
11d28     2C 29 25 20 
11d2c     1B 16 10 0A 
11d30     04 FF FB F6 | 	byte	$32, $32, $31, $2f, $2c, $29, $25, $20, $1b, $16, $10, $0a, $04, $ff, $fb, $f6
11d34     F1 EC E7 E2 
11d38     DD D9 D4 D0 
11d3c     CC C9 C6 C4 
11d40     C2 C1 C1 C1 | 	byte	$f1, $ec, $e7, $e2, $dd, $d9, $d4, $d0, $cc, $c9, $c6, $c4, $c2, $c1, $c1, $c1
11d44     C2 C5 C9 CD 
11d48     D3 D9 E0 E7 
11d4c     EF F7 FF 06 
11d50     0D 13 19 1E | 	byte	$c2, $c5, $c9, $cd, $d3, $d9, $e0, $e7, $ef, $f7, $ff, $06, $0d, $13, $19, $1e
11d54     22 25 27 28 
11d58     29 29 2A 2A 
11d5c     2B 2C 2C 2D 
11d60     2E 2E 2F 2F | 	byte	$22, $25, $27, $28, $29, $29, $2a, $2a, $2b, $2c, $2c, $2d, $2e, $2e, $2f, $2f
11d64     2F 2E 2D 2D 
11d68     2C 2B 2A 28 
11d6c     27 25 23 1F 
11d70     1B 16 10 09 | 	byte	$2f, $2e, $2d, $2d, $2c, $2b, $2a, $28, $27, $25, $23, $1f, $1b, $16, $10, $09
11d74     02 FC F5 EF 
11d78     E8 E2 DB D6 
11d7c     D0 CB C7 C3 
11d80     C0 BF BE BE | 	byte	$02, $fc, $f5, $ef, $e8, $e2, $db, $d6, $d0, $cb, $c7, $c3, $c0, $bf, $be, $be
11d84     BF C1 C4 C7 
11d88     CC D1 D6 DB 
11d8c     E2 E8 ED F4 
11d90     F9 FF 05 09 | 	byte	$bf, $c1, $c4, $c7, $cc, $d1, $d6, $db, $e2, $e8, $ed, $f4, $f9, $ff, $05, $09
11d94     0D 10 14 16 
11d98     18 1B 1D 1F 
11d9c     22 25 27 29 
11da0     2C 2E 2F 31 | 	byte	$0d, $10, $14, $16, $18, $1b, $1d, $1f, $22, $25, $27, $29, $2c, $2e, $2f, $31
11da4     31 30 2F 2D 
11da8     2B 27 24 1F 
11dac     1A 14 0E 09 
11db0     03 FE F9 F5 | 	byte	$31, $30, $2f, $2d, $2b, $27, $24, $1f, $1a, $14, $0e, $09, $03, $fe, $f9, $f5
11db4     F0 EB E7 E2 
11db8     DD D9 D4 D1 
11dbc     CD CA C7 C5 
11dc0     C4 C3 C3 C4 | 	byte	$f0, $eb, $e7, $e2, $dd, $d9, $d4, $d1, $cd, $ca, $c7, $c5, $c4, $c3, $c3, $c4
11dc4     C6 C9 CD D1 
11dc8     D7 DD E4 EB 
11dcc     F2 F9 01 09 
11dd0     0E 15 19 1D | 	byte	$c6, $c9, $cd, $d1, $d7, $dd, $e4, $eb, $f2, $f9, $01, $09, $0e, $15, $19, $1d
11dd4     21 24 25 26 
11dd8     27 28 29 29 
11ddc     2A 2B 2C 2C 
11de0     2D 2D 2D 2D | 	byte	$21, $24, $25, $26, $27, $28, $29, $29, $2a, $2b, $2c, $2c, $2d, $2d, $2d, $2d
11de4     2D 2E 2D 2C 
11de8     2C 2B 29 28 
11dec     26 23 20 1B 
11df0     16 10 09 03 | 	byte	$2d, $2e, $2d, $2c, $2c, $2b, $29, $28, $26, $23, $20, $1b, $16, $10, $09, $03
11df4     FC F6 F0 E9 
11df8     E4 DE D8 D4 
11dfc     CF CB C8 C5 
11e00     C4 C3 C3 C3 | 	byte	$fc, $f6, $f0, $e9, $e4, $de, $d8, $d4, $cf, $cb, $c8, $c5, $c4, $c3, $c3, $c3
11e04     C5 C7 CA CD 
11e08     D2 D6 DB E1 
11e0c     E6 EB F2 F7 
11e10     FC 01 05 09 | 	byte	$c5, $c7, $ca, $cd, $d2, $d6, $db, $e1, $e6, $eb, $f2, $f7, $fc, $01, $05, $09
11e14     0D 10 13 15 
11e18     17 19 1C 1F 
11e1c     22 24 27 2A 
11e20     2C 2E 2F 30 | 	byte	$0d, $10, $13, $15, $17, $19, $1c, $1f, $22, $24, $27, $2a, $2c, $2e, $2f, $30
11e24     30 2F 2E 2B 
11e28     28 24 20 1C 
11e2c     16 11 0B 05 
11e30     00 FB F6 F2 | 	byte	$30, $2f, $2e, $2b, $28, $24, $20, $1c, $16, $11, $0b, $05, $00, $fb, $f6, $f2
11e34     ED E9 E4 E0 
11e38     DC D8 D3 D0 
11e3c     CD CA C8 C6 
11e40     C5 C5 C6 C7 | 	byte	$ed, $e9, $e4, $e0, $dc, $d8, $d3, $d0, $cd, $ca, $c8, $c6, $c5, $c5, $c6, $c7
11e44     C9 CD D1 D7 
11e48     DD E3 E9 F1 
11e4c     F7 FF 05 0C 
11e50     12 17 1B 1F | 	byte	$c9, $cd, $d1, $d7, $dd, $e3, $e9, $f1, $f7, $ff, $05, $0c, $12, $17, $1b, $1f
11e54     22 23 24 25 
11e58     25 26 27 28 
11e5c     29 2A 2B 2B 
11e60     2C 2D 2D 2D | 	byte	$22, $23, $24, $25, $25, $26, $27, $28, $29, $2a, $2b, $2b, $2c, $2d, $2d, $2d
11e64     2D 2C 2C 2C 
11e68     2B 29 28 26 
11e6c     23 1E 1A 14 
11e70     0D 07 00 FA | 	byte	$2d, $2c, $2c, $2c, $2b, $29, $28, $26, $23, $1e, $1a, $14, $0d, $07, $00, $fa
11e74     F3 EE E9 E3 
11e78     DF DA D5 D1 
11e7c     CE CB C9 C8 
11e80     C7 C7 C7 C9 | 	byte	$f3, $ee, $e9, $e3, $df, $da, $d5, $d1, $ce, $cb, $c9, $c8, $c7, $c7, $c7, $c9
11e84     CB CE D1 D5 
11e88     D9 DE E3 E8 
11e8c     ED F1 F6 FB 
11e90     00 04 08 0B | 	byte	$cb, $ce, $d1, $d5, $d9, $de, $e3, $e8, $ed, $f1, $f6, $fb, $00, $04, $08, $0b
11e94     0E 11 13 15 
11e98     17 1A 1D 20 
11e9c     22 25 28 2A 
11ea0     2D 2E 2E 2E | 	byte	$0e, $11, $13, $15, $17, $1a, $1d, $20, $22, $25, $28, $2a, $2d, $2e, $2e, $2e
11ea4     2E 2C 2A 27 
11ea8     23 1F 1A 15 
11eac     10 0A 05 FF 
11eb0     FB F6 F2 EE | 	byte	$2e, $2c, $2a, $27, $23, $1f, $1a, $15, $10, $0a, $05, $ff, $fb, $f6, $f2, $ee
11eb4     E9 E5 E1 DD 
11eb8     D9 D5 D2 CF 
11ebc     CC CB C9 C8 
11ec0     C7 C9 CA CD | 	byte	$e9, $e5, $e1, $dd, $d9, $d5, $d2, $cf, $cc, $cb, $c9, $c8, $c7, $c9, $ca, $cd
11ec4     D0 D5 DA DF 
11ec8     E5 EC F2 F9 
11ecc     FF 06 0C 11 
11ed0     16 19 1D 20 | 	byte	$d0, $d5, $da, $df, $e5, $ec, $f2, $f9, $ff, $06, $0c, $11, $16, $19, $1d, $20
11ed4     21 22 23 23 
11ed8     25 25 27 28 
11edc     29 2A 2A 2B 
11ee0     2C 2C 2D 2C | 	byte	$21, $22, $23, $23, $25, $25, $27, $28, $29, $2a, $2a, $2b, $2c, $2c, $2d, $2c
11ee4     2C 2C 2B 2A 
11ee8     29 27 23 20 
11eec     1B 16 10 0A 
11ef0     03 FC F6 F0 | 	byte	$2c, $2c, $2b, $2a, $29, $27, $23, $20, $1b, $16, $10, $0a, $03, $fc, $f6, $f0
11ef4     EA E6 E2 DE 
11ef8     DA D7 D3 D0 
11efc     CE CD CC CC 
11f00     CC CD CE D1 | 	byte	$ea, $e6, $e2, $de, $da, $d7, $d3, $d0, $ce, $cd, $cc, $cc, $cc, $cd, $ce, $d1
11f04     D3 D7 DA DE 
11f08     E2 E6 EB EF 
11f0c     F4 F8 FC 01 
11f10     04 08 0B 0D | 	byte	$d3, $d7, $da, $de, $e2, $e6, $eb, $ef, $f4, $f8, $fc, $01, $04, $08, $0b, $0d
11f14     0F 11 14 16 
11f18     19 1C 1F 22 
11f1c     25 27 29 2B 
11f20     2C 2D 2D 2B | 	byte	$0f, $11, $14, $16, $19, $1c, $1f, $22, $25, $27, $29, $2b, $2c, $2d, $2d, $2b
11f24     29 27 24 20 
11f28     1C 18 12 0D 
11f2c     07 02 FD F9 
11f30     F5 F1 ED E9 | 	byte	$29, $27, $24, $20, $1c, $18, $12, $0d, $07, $02, $fd, $f9, $f5, $f1, $ed, $e9
11f34     E5 E0 DC D9 
11f38     D6 D2 D0 CE 
11f3c     CC CA CA CA 
11f40     CC CE D1 D5 | 	byte	$e5, $e0, $dc, $d9, $d6, $d2, $d0, $ce, $cc, $ca, $ca, $ca, $cc, $ce, $d1, $d5
11f44     D9 DE E4 EA 
11f48     F0 F6 FC 02 
11f4c     08 0D 12 16 
11f50     19 1C 1E 20 | 	byte	$d9, $de, $e4, $ea, $f0, $f6, $fc, $02, $08, $0d, $12, $16, $19, $1c, $1e, $20
11f54     21 21 22 23 
11f58     25 26 27 28 
11f5c     29 2A 2B 2B 
11f60     2C 2C 2C 2B | 	byte	$21, $21, $22, $23, $25, $26, $27, $28, $29, $2a, $2b, $2b, $2c, $2c, $2c, $2b
11f64     2B 2A 29 27 
11f68     23 1F 1A 15 
11f6c     0F 09 03 FC 
11f70     F6 F1 EB E7 | 	byte	$2b, $2a, $29, $27, $23, $1f, $1a, $15, $0f, $09, $03, $fc, $f6, $f1, $eb, $e7
11f74     E3 DF DC D9 
11f78     D6 D4 D2 D1 
11f7c     D0 D0 D0 D1 
11f80     D2 D4 D6 D9 | 	byte	$e3, $df, $dc, $d9, $d6, $d4, $d2, $d1, $d0, $d0, $d0, $d1, $d2, $d4, $d6, $d9
11f84     DC E0 E3 E7 
11f88     EB EF F3 F7 
11f8c     FB FE 02 05 
11f90     08 0B 0D 0F | 	byte	$dc, $e0, $e3, $e7, $eb, $ef, $f3, $f7, $fb, $fe, $02, $05, $08, $0b, $0d, $0f
11f94     11 14 16 19 
11f98     1C 20 23 25 
11f9c     28 29 2A 2B 
11fa0     2A 29 27 25 | 	byte	$11, $14, $16, $19, $1c, $20, $23, $25, $28, $29, $2a, $2b, $2a, $29, $27, $25
11fa4     23 1F 1B 17 
11fa8     12 0D 07 02 
11fac     FD F9 F5 F1 
11fb0     EE EA E6 E2 | 	byte	$23, $1f, $1b, $17, $12, $0d, $07, $02, $fd, $f9, $f5, $f1, $ee, $ea, $e6, $e2
11fb4     DE DB D8 D5 
11fb8     D2 D0 CE CD 
11fbc     CD CD CF D1 
11fc0     D4 D8 DC E0 | 	byte	$de, $db, $d8, $d5, $d2, $d0, $ce, $cd, $cd, $cd, $cf, $d1, $d4, $d8, $dc, $e0
11fc4     E5 EB F0 F6 
11fc8     FC 01 07 0C 
11fcc     11 14 18 1A 
11fd0     1C 1E 1E 1F | 	byte	$e5, $eb, $f0, $f6, $fc, $01, $07, $0c, $11, $14, $18, $1a, $1c, $1e, $1e, $1f
11fd4     21 22 23 25 
11fd8     26 27 28 29 
11fdc     2A 2B 2B 2B 
11fe0     2B 2B 2B 2A | 	byte	$21, $22, $23, $25, $26, $27, $28, $29, $2a, $2b, $2b, $2b, $2b, $2b, $2b, $2a
11fe4     27 25 21 1C 
11fe8     17 12 0C 06 
11fec     FF FA F4 EF 
11ff0     EA E6 E3 E0 | 	byte	$27, $25, $21, $1c, $17, $12, $0c, $06, $ff, $fa, $f4, $ef, $ea, $e6, $e3, $e0
11ff4     DE DB D9 D7 
11ff8     D5 D5 D4 D4 
11ffc     D4 D5 D6 D8 
12000     DB DD E0 E2 | 	byte	$de, $db, $d9, $d7, $d5, $d5, $d4, $d4, $d4, $d5, $d6, $d8, $db, $dd, $e0, $e2
12004     E5 E9 EC F0 
12008     F4 F7 FB FE 
1200c     01 04 07 0A 
12010     0C 0E 10 13 | 	byte	$e5, $e9, $ec, $f0, $f4, $f7, $fb, $fe, $01, $04, $07, $0a, $0c, $0e, $10, $13
12014     15 18 1C 1E 
12018     22 24 27 28 
1201c     29 29 29 27 
12020     26 23 21 1D | 	byte	$15, $18, $1c, $1e, $22, $24, $27, $28, $29, $29, $29, $27, $26, $23, $21, $1d
12024     19 15 10 0B 
12028     05 01 FC F8 
1202c     F4 F1 ED E9 
12030     E6 E2 DF DC | 	byte	$19, $15, $10, $0b, $05, $01, $fc, $f8, $f4, $f1, $ed, $e9, $e6, $e2, $df, $dc
12034     D9 D7 D4 D2 
12038     D0 CF D0 D1 
1203c     D2 D4 D7 DB 
12040     DF E3 E8 ED | 	byte	$d9, $d7, $d4, $d2, $d0, $cf, $d0, $d1, $d2, $d4, $d7, $db, $df, $e3, $e8, $ed
12044     F2 F8 FD 02 
12048     08 0C 11 13 
1204c     17 19 1B 1C 
12050     1D 1E 1F 20 | 	byte	$f2, $f8, $fd, $02, $08, $0c, $11, $13, $17, $19, $1b, $1c, $1d, $1e, $1f, $20
12054     22 23 25 26 
12058     27 28 29 2A 
1205c     2A 2B 2B 2B 
12060     2A 27 24 21 | 	byte	$22, $23, $25, $26, $27, $28, $29, $2a, $2a, $2b, $2b, $2b, $2a, $27, $24, $21
12064     1D 18 13 0D 
12068     08 02 FC F7 
1206c     F2 ED E9 E6 
12070     E3 E1 DF DD | 	byte	$1d, $18, $13, $0d, $08, $02, $fc, $f7, $f2, $ed, $e9, $e6, $e3, $e1, $df, $dd
12074     DB DA D9 D8 
12078     D8 D8 D8 D9 
1207c     DB DD DE E0 
12080     E2 E5 E8 EB | 	byte	$db, $da, $d9, $d8, $d8, $d8, $d8, $d9, $db, $dd, $de, $e0, $e2, $e5, $e8, $eb
12084     EF F2 F5 F8 
12088     FB FF 01 04 
1208c     07 09 0B 0D 
12090     0F 12 15 18 | 	byte	$ef, $f2, $f5, $f8, $fb, $ff, $01, $04, $07, $09, $0b, $0d, $0f, $12, $15, $18
12094     1B 1E 21 23 
12098     25 27 27 27 
1209c     27 26 24 21 
120a0     1F 1C 17 13 | 	byte	$1b, $1e, $21, $23, $25, $27, $27, $27, $27, $26, $24, $21, $1f, $1c, $17, $13
120a4     0E 09 04 FF 
120a8     FB F7 F3 F0 
120ac     ED EA E7 E3 
120b0     E0 DD DA D8 | 	byte	$0e, $09, $04, $ff, $fb, $f7, $f3, $f0, $ed, $ea, $e7, $e3, $e0, $dd, $da, $d8
120b4     D5 D4 D3 D2 
120b8     D3 D4 D6 D8 
120bc     DA DE E1 E6 
120c0     EA EF F4 F9 | 	byte	$d5, $d4, $d3, $d2, $d3, $d4, $d6, $d8, $da, $de, $e1, $e6, $ea, $ef, $f4, $f9
120c4     FE 03 08 0C 
120c8     10 13 16 18 
120cc     19 1B 1C 1D 
120d0     1E 1F 21 22 | 	byte	$fe, $03, $08, $0c, $10, $13, $16, $18, $19, $1b, $1c, $1d, $1e, $1f, $21, $22
120d4     23 25 27 27 
120d8     28 29 29 2A 
120dc     2A 29 27 25 
120e0     22 1E 19 14 | 	byte	$23, $25, $27, $27, $28, $29, $29, $2a, $2a, $29, $27, $25, $22, $1e, $19, $14
120e4     0F 0A 05 00 
120e8     FA F5 F0 EC 
120ec     E9 E7 E5 E3 
120f0     E1 E0 DE DD | 	byte	$0f, $0a, $05, $00, $fa, $f5, $f0, $ec, $e9, $e7, $e5, $e3, $e1, $e0, $de, $dd
120f4     DC DC DC DC 
120f8     DD DD DE E0 
120fc     E2 E3 E5 E8 
12100     EB ED F0 F2 | 	byte	$dc, $dc, $dc, $dc, $dd, $dd, $de, $e0, $e2, $e3, $e5, $e8, $eb, $ed, $f0, $f2
12104     F5 F8 FB FD 
12108     00 02 04 06 
1210c     08 0A 0C 0F 
12110     12 15 19 1C | 	byte	$f5, $f8, $fb, $fd, $00, $02, $04, $06, $08, $0a, $0c, $0f, $12, $15, $19, $1c
12114     1F 21 23 24 
12118     25 25 25 24 
1211c     22 20 1D 1A 
12120     16 12 0E 09 | 	byte	$1f, $21, $23, $24, $25, $25, $25, $24, $22, $20, $1d, $1a, $16, $12, $0e, $09
12124     05 FF FB F7 
12128     F3 F1 EE EB 
1212c     E8 E5 E2 DF 
12130     DC DA D8 D7 | 	byte	$05, $ff, $fb, $f7, $f3, $f1, $ee, $eb, $e8, $e5, $e2, $df, $dc, $da, $d8, $d7
12134     D6 D5 D5 D6 
12138     D8 DA DD E0 
1213c     E4 E7 EC F0 
12140     F4 F9 FD 02 | 	byte	$d6, $d5, $d5, $d6, $d8, $da, $dd, $e0, $e4, $e7, $ec, $f0, $f4, $f9, $fd, $02
12144     07 0A 0E 11 
12148     14 16 17 18 
1214c     19 1A 1C 1D 
12150     1F 20 21 23 | 	byte	$07, $0a, $0e, $11, $14, $16, $17, $18, $19, $1a, $1c, $1d, $1f, $20, $21, $23
12154     24 25 27 27 
12158     28 29 29 28 
1215c     26 24 21 1D 
12160     19 14 0F 0A | 	byte	$24, $25, $27, $27, $28, $29, $29, $28, $26, $24, $21, $1d, $19, $14, $0f, $0a
12164     05 00 FB F6 
12168     F2 ED EA E7 
1216c     E5 E4 E3 E2 
12170     E1 E0 E0 E0 | 	byte	$05, $00, $fb, $f6, $f2, $ed, $ea, $e7, $e5, $e4, $e3, $e2, $e1, $e0, $e0, $e0
12174     DF DF E0 E0 
12178     E1 E3 E4 E6 
1217c     E8 EA EC EE 
12180     F0 F3 F5 F7 | 	byte	$df, $df, $e0, $e0, $e1, $e3, $e4, $e6, $e8, $ea, $ec, $ee, $f0, $f3, $f5, $f7
12184     F9 FB FD FF 
12188     01 02 03 06 
1218c     08 0B 0E 11 
12190     14 18 1B 1D | 	byte	$f9, $fb, $fd, $ff, $01, $02, $03, $06, $08, $0b, $0e, $11, $14, $18, $1b, $1d
12194     20 21 22 23 
12198     23 22 21 1F 
1219c     1D 1A 17 13 
121a0     10 0C 07 02 | 	byte	$20, $21, $22, $23, $23, $22, $21, $1f, $1d, $1a, $17, $13, $10, $0c, $07, $02
121a4     FE FA F7 F4 
121a8     F1 EE EB E9 
121ac     E6 E3 E1 DF 
121b0     DC DB D9 D8 | 	byte	$fe, $fa, $f7, $f4, $f1, $ee, $eb, $e9, $e6, $e3, $e1, $df, $dc, $db, $d9, $d8
121b4     D9 DA DB DC 
121b8     DE E1 E4 E7 
121bc     EB EF F3 F8 
121c0     FB FF 03 07 | 	byte	$d9, $da, $db, $dc, $de, $e1, $e4, $e7, $eb, $ef, $f3, $f8, $fb, $ff, $03, $07
121c4     0A 0D 10 12 
121c8     13 14 15 17 
121cc     18 1A 1C 1E 
121d0     1F 20 22 23 | 	byte	$0a, $0d, $10, $12, $13, $14, $15, $17, $18, $1a, $1c, $1e, $1f, $20, $22, $23
121d4     24 26 27 27 
121d8     28 27 26 24 
121dc     21 1D 19 15 
121e0     11 0C 07 03 | 	byte	$24, $26, $27, $27, $28, $27, $26, $24, $21, $1d, $19, $15, $11, $0c, $07, $03
121e4     FE FA F4 F0 
121e8     ED EA E7 E6 
121ec     E5 E4 E4 E3 
121f0     E3 E3 E3 E3 | 	byte	$fe, $fa, $f4, $f0, $ed, $ea, $e7, $e6, $e5, $e4, $e4, $e3, $e3, $e3, $e3, $e3
121f4     E4 E4 E5 E6 
121f8     E7 E9 EA EC 
121fc     ED EF F1 F2 
12200     F4 F5 F7 F9 | 	byte	$e4, $e4, $e5, $e6, $e7, $e9, $ea, $ec, $ed, $ef, $f1, $f2, $f4, $f5, $f7, $f9
12204     FB FC FD FE 
12208     FF 01 03 05 
1220c     09 0C 0F 13 
12210     16 19 1B 1D | 	byte	$fb, $fc, $fd, $fe, $ff, $01, $03, $05, $09, $0c, $0f, $13, $16, $19, $1b, $1d
12214     1F 20 20 20 
12218     1F 1F 1D 1B 
1221c     19 15 12 0F 
12220     0B 07 02 FE | 	byte	$1f, $20, $20, $20, $1f, $1f, $1d, $1b, $19, $15, $12, $0f, $0b, $07, $02, $fe
12224     FA F7 F4 F1 
12228     EF ED EA E8 
1222c     E5 E3 E1 DF 
12230     DE DD DC DC | 	byte	$fa, $f7, $f4, $f1, $ef, $ed, $ea, $e8, $e5, $e3, $e1, $df, $de, $dd, $dc, $dc
12234     DD DE E0 E2 
12238     E5 E7 EA ED 
1223c     F1 F5 F8 FB 
12240     FF 03 06 09 | 	byte	$dd, $de, $e0, $e2, $e5, $e7, $ea, $ed, $f1, $f5, $f8, $fb, $ff, $03, $06, $09
12244     0C 0D 0F 10 
12248     11 13 14 16 
1224c     17 19 1B 1C 
12250     1E 20 22 23 | 	byte	$0c, $0d, $0f, $10, $11, $13, $14, $16, $17, $19, $1b, $1c, $1e, $20, $22, $23
12254     24 25 26 26 
12258     26 24 22 1F 
1225c     1C 18 14 0F 
12260     0B 06 01 FD | 	byte	$24, $25, $26, $26, $26, $24, $22, $1f, $1c, $18, $14, $0f, $0b, $06, $01, $fd
12264     F9 F4 F1 ED 
12268     EB E8 E7 E7 
1226c     E7 E6 E6 E6 
12270     E7 E7 E7 E8 | 	byte	$f9, $f4, $f1, $ed, $eb, $e8, $e7, $e7, $e7, $e6, $e6, $e6, $e7, $e7, $e7, $e8
12274     E8 E9 EA EB 
12278     EC ED EE F0 
1227c     F1 F2 F3 F5 
12280     F6 F7 F8 F9 | 	byte	$e8, $e9, $ea, $eb, $ec, $ed, $ee, $f0, $f1, $f2, $f3, $f5, $f6, $f7, $f8, $f9
12284     FA FB FB FC 
12288     FE 00 03 05 
1228c     09 0B 0F 13 
12290     15 17 19 1B | 	byte	$fa, $fb, $fb, $fc, $fe, $00, $03, $05, $09, $0b, $0f, $13, $15, $17, $19, $1b
12294     1D 1D 1E 1D 
12298     1D 1B 1A 18 
1229c     15 12 0F 0B 
122a0     08 03 FF FB | 	byte	$1d, $1d, $1e, $1d, $1d, $1b, $1a, $18, $15, $12, $0f, $0b, $08, $03, $ff, $fb
122a4     F8 F5 F3 F1 
122a8     EF ED EB E8 
122ac     E7 E5 E3 E2 
122b0     E1 E0 E0 E0 | 	byte	$f8, $f5, $f3, $f1, $ef, $ed, $eb, $e8, $e7, $e5, $e3, $e2, $e1, $e0, $e0, $e0
122b4     E1 E3 E5 E6 
122b8     E9 EB EE F1 
122bc     F4 F7 FB FD 
122c0     00 04 07 09 | 	byte	$e1, $e3, $e5, $e6, $e9, $eb, $ee, $f1, $f4, $f7, $fb, $fd, $00, $04, $07, $09
122c4     0B 0C 0D 0E 
122c8     10 11 12 14 
122cc     16 17 19 1B 
122d0     1D 1F 21 22 | 	byte	$0b, $0c, $0d, $0e, $10, $11, $12, $14, $16, $17, $19, $1b, $1d, $1f, $21, $22
122d4     23 25 25 24 
122d8     23 21 1F 1C 
122dc     18 14 10 0C 
122e0     08 03 FF FB | 	byte	$23, $25, $25, $24, $23, $21, $1f, $1c, $18, $14, $10, $0c, $08, $03, $ff, $fb
122e4     F6 F3 EF EC 
122e8     EA E9 E8 E9 
122ec     E9 E9 E9 E9 
122f0     EA EA EB EB | 	byte	$f6, $f3, $ef, $ec, $ea, $e9, $e8, $e9, $e9, $e9, $e9, $e9, $ea, $ea, $eb, $eb
122f4     EC ED EE EF 
122f8     F0 F1 F2 F3 
122fc     F4 F4 F5 F6 
12300     F7 F7 F7 F8 | 	byte	$ec, $ed, $ee, $ef, $f0, $f1, $f2, $f3, $f4, $f4, $f5, $f6, $f7, $f7, $f7, $f8
12304     F8 F9 F9 FB 
12308     FC FE 01 04 
1230c     07 0B 0E 11 
12310     13 16 18 19 | 	byte	$f8, $f9, $f9, $fb, $fc, $fe, $01, $04, $07, $0b, $0e, $11, $13, $16, $18, $19
12314     1B 1B 1C 1C 
12318     1B 19 18 16 
1231c     14 11 0D 0A 
12320     07 03 FF FB | 	byte	$1b, $1b, $1c, $1c, $1b, $19, $18, $16, $14, $11, $0d, $0a, $07, $03, $ff, $fb
12324     F8 F6 F4 F2 
12328     F0 EF ED EA 
1232c     E9 E7 E5 E4 
12330     E3 E3 E3 E4 | 	byte	$f8, $f6, $f4, $f2, $f0, $ef, $ed, $ea, $e9, $e7, $e5, $e4, $e3, $e3, $e3, $e4
12334     E5 E6 E7 E9 
12338     EC EE F1 F3 
1233c     F5 F8 FA FE 
12340     00 03 05 07 | 	byte	$e5, $e6, $e7, $e9, $ec, $ee, $f1, $f3, $f5, $f8, $fa, $fe, $00, $03, $05, $07
12344     08 09 0A 0B 
12348     0D 0F 10 12 
1234c     14 16 18 1A 
12350     1C 1E 1F 21 | 	byte	$08, $09, $0a, $0b, $0d, $0f, $10, $12, $14, $16, $18, $1a, $1c, $1e, $1f, $21
12354     23 23 24 23 
12358     22 20 1D 1A 
1235c     16 12 0F 0B 
12360     07 02 FE FA | 	byte	$23, $23, $24, $23, $22, $20, $1d, $1a, $16, $12, $0f, $0b, $07, $02, $fe, $fa
12364     F7 F3 F0 ED 
12368     EC EB EA EA 
1236c     EB EC EC ED 
12370     ED EE EF EF | 	byte	$f7, $f3, $f0, $ed, $ec, $eb, $ea, $ea, $eb, $ec, $ec, $ed, $ed, $ee, $ef, $ef
12374     F1 F1 F1 F2 
12378     F3 F3 F4 F5 
1237c     F5 F5 F6 F6 
12380     F6 F5 F5 F5 | 	byte	$f1, $f1, $f1, $f2, $f3, $f3, $f4, $f5, $f5, $f5, $f6, $f6, $f6, $f5, $f5, $f5
12384     F5 F6 F6 F7 
12388     F9 FC FE 02 
1238c     05 09 0C 0F 
12390     11 14 15 17 | 	byte	$f5, $f6, $f6, $f7, $f9, $fc, $fe, $02, $05, $09, $0c, $0f, $11, $14, $15, $17
12394     18 19 19 19 
12398     19 18 16 14 
1239c     12 10 0E 0A 
123a0     07 04 00 FD | 	byte	$18, $19, $19, $19, $19, $18, $16, $14, $12, $10, $0e, $0a, $07, $04, $00, $fd
123a4     FA F7 F5 F3 
123a8     F2 F0 EF ED 
123ac     EB E9 E8 E7 
123b0     E7 E7 E7 E7 | 	byte	$fa, $f7, $f5, $f3, $f2, $f0, $ef, $ed, $eb, $e9, $e8, $e7, $e7, $e7, $e7, $e7
123b4     E8 E9 EB EC 
123b8     EE F0 F2 F4 
123bc     F6 F8 FB FD 
123c0     FF 01 03 04 | 	byte	$e8, $e9, $eb, $ec, $ee, $f0, $f2, $f4, $f6, $f8, $fb, $fd, $ff, $01, $03, $04
123c4     05 06 07 09 
123c8     0A 0C 0E 10 
123cc     12 14 16 18 
123d0     1A 1C 1E 20 | 	byte	$05, $06, $07, $09, $0a, $0c, $0e, $10, $12, $14, $16, $18, $1a, $1c, $1e, $20
123d4     21 22 22 21 
123d8     20 1D 1B 18 
123dc     14 11 0D 09 
123e0     05 01 FE FA | 	byte	$21, $22, $22, $21, $20, $1d, $1b, $18, $14, $11, $0d, $09, $05, $01, $fe, $fa
123e4     F7 F3 F1 EF 
123e8     ED EC EC ED 
123ec     EE EF F0 F1 
123f0     F1 F2 F3 F4 | 	byte	$f7, $f3, $f1, $ef, $ed, $ec, $ec, $ed, $ee, $ef, $f0, $f1, $f1, $f2, $f3, $f4
123f4     F4 F5 F6 F6 
123f8     F6 F6 F6 F7 
123fc     F6 F6 F6 F5 
12400     F5 F4 F4 F3 | 	byte	$f4, $f5, $f6, $f6, $f6, $f6, $f6, $f7, $f6, $f6, $f6, $f5, $f5, $f4, $f4, $f3
12404     F3 F3 F3 F5 
12408     F7 F9 FC FF 
1240c     03 06 09 0C 
12410     0F 10 13 14 | 	byte	$f3, $f3, $f3, $f5, $f7, $f9, $fc, $ff, $03, $06, $09, $0c, $0f, $10, $13, $14
12414     15 16 17 17 
12418     17 16 14 13 
1241c     11 0F 0D 0A 
12420     06 03 00 FC | 	byte	$15, $16, $17, $17, $17, $16, $14, $13, $11, $0f, $0d, $0a, $06, $03, $00, $fc
12424     FA F8 F6 F5 
12428     F4 F2 F1 EF 
1242c     EE ED EB EB 
12430     EB EB EB EB | 	byte	$fa, $f8, $f6, $f5, $f4, $f2, $f1, $ef, $ee, $ed, $eb, $eb, $eb, $eb, $eb, $eb
12434     EC ED EF F0 
12438     F1 F3 F4 F6 
1243c     F8 FA FB FD 
12440     FF 00 01 02 | 	byte	$ec, $ed, $ef, $f0, $f1, $f3, $f4, $f6, $f8, $fa, $fb, $fd, $ff, $00, $01, $02
12444     03 04 05 07 
12448     09 0B 0D 0F 
1244c     11 13 15 17 
12450     19 1B 1D 1F | 	byte	$03, $04, $05, $07, $09, $0b, $0d, $0f, $11, $13, $15, $17, $19, $1b, $1d, $1f
12454     20 20 1F 1F 
12458     1D 1A 17 14 
1245c     11 0E 0A 07 
12460     02 FE FB F8 | 	byte	$20, $20, $1f, $1f, $1d, $1a, $17, $14, $11, $0e, $0a, $07, $02, $fe, $fb, $f8
12464     F5 F3 F1 EF 
12468     EE EE EF F0 
1246c     F2 F4 F5 F5 
12470     F6 F7 F8 F8 | 	byte	$f5, $f3, $f1, $ef, $ee, $ee, $ef, $f0, $f2, $f4, $f5, $f5, $f6, $f7, $f8, $f8
12474     F8 F9 F9 F9 
12478     F9 F9 F8 F8 
1247c     F7 F7 F6 F5 
12480     F4 F3 F2 F1 | 	byte	$f8, $f9, $f9, $f9, $f9, $f9, $f8, $f8, $f7, $f7, $f6, $f5, $f4, $f3, $f2, $f1
12484     F0 F1 F2 F3 
12488     F5 F8 FB FE 
1248c     02 04 07 0A 
12490     0D 0F 11 12 | 	byte	$f0, $f1, $f2, $f3, $f5, $f8, $fb, $fe, $02, $04, $07, $0a, $0d, $0f, $11, $12
12494     13 14 15 15 
12498     14 14 13 11 
1249c     0F 0D 0A 08 
124a0     05 02 FF FC | 	byte	$13, $14, $15, $15, $14, $14, $13, $11, $0f, $0d, $0a, $08, $05, $02, $ff, $fc
124a4     FA F8 F7 F6 
124a8     F5 F3 F2 F1 
124ac     F0 EF EE EE 
124b0     EE EE EF EF | 	byte	$fa, $f8, $f7, $f6, $f5, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ee, $ee, $ef, $ef
124b4     F0 F1 F2 F3 
124b8     F4 F5 F7 F8 
124bc     F9 FA FB FC 
124c0     FD FE FF 00 | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00
124c4     01 02 04 06 
124c8     08 0A 0C 0E 
124cc     11 13 15 17 
124d0     19 1C 1D 1E | 	byte	$01, $02, $04, $06, $08, $0a, $0c, $0e, $11, $13, $15, $17, $19, $1c, $1d, $1e
124d4     1F 1E 1D 1B 
124d8     19 16 13 0F 
124dc     0C 09 05 02 
124e0     FF FC F9 F6 | 	byte	$1f, $1e, $1d, $1b, $19, $16, $13, $0f, $0c, $09, $05, $02, $ff, $fc, $f9, $f6
124e4     F4 F2 F1 F0 
124e8     F0 F1 F3 F4 
124ec     F6 F8 F9 FA 
124f0     FB FC FC FC | 	byte	$f4, $f2, $f1, $f0, $f0, $f1, $f3, $f4, $f6, $f8, $f9, $fa, $fb, $fc, $fc, $fc
124f4     FD FD FC FC 
124f8     FB FA F9 F8 
124fc     F7 F6 F4 F2 
12500     F1 EF EE EE | 	byte	$fd, $fd, $fc, $fc, $fb, $fa, $f9, $f8, $f7, $f6, $f4, $f2, $f1, $ef, $ee, $ee
12504     EE EF F1 F3 
12508     F5 F9 FC FF 
1250c     02 04 07 0A 
12510     00 00 00 00 | 	byte	$ee, $ef, $f1, $f3, $f5, $f9, $fc, $ff, $02, $04, $07, $0a, $00, $00, $00, $00
12514     FF FE FD FD 
12518     FC FB FA F9 
1251c     F9 F8 F8 F7 
12520     F6 F7 FA FD | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f7, $f6, $f7, $fa, $fd
12524     FE FD FD 00 
12528     07 0F 12 11 
1252c     10 0F 0D 0B 
12530     0A 08 07 04 | 	byte	$fe, $fd, $fd, $00, $07, $0f, $12, $11, $10, $0f, $0d, $0b, $0a, $08, $07, $04
12534     02 00 FE FC 
12538     FA F7 F5 F3 
1253c     F1 EF ED EB 
12540     EB EE F0 F0 | 	byte	$02, $00, $fe, $fc, $fa, $f7, $f5, $f3, $f1, $ef, $ed, $eb, $eb, $ee, $f0, $f0
12544     EF EF EE F0 
12548     FD 12 25 27 
1254c     23 20 1D 19 
12550     15 12 0E 0B | 	byte	$ef, $ef, $ee, $f0, $fd, $12, $25, $27, $23, $20, $1d, $19, $15, $12, $0e, $0b
12554     07 03 00 FD 
12558     FA F7 F3 F1 
1255c     EE EC EB EC 
12560     F0 F2 F1 F0 | 	byte	$07, $03, $00, $fd, $fa, $f7, $f3, $f1, $ee, $ec, $eb, $ec, $f0, $f2, $f1, $f0
12564     EF EE ED ED 
12568     EE FE 18 26 
1256c     25 21 1D 19 
12570     16 13 0F 0B | 	byte	$ef, $ee, $ed, $ed, $ee, $fe, $18, $26, $25, $21, $1d, $19, $16, $13, $0f, $0b
12574     07 03 FF FC 
12578     F9 F6 F3 F1 
1257c     EF EE F0 F5 
12580     F6 F3 F2 F1 | 	byte	$07, $03, $ff, $fc, $f9, $f6, $f3, $f1, $ef, $ee, $f0, $f5, $f6, $f3, $f2, $f1
12584     F0 EF EE EE 
12588     EE F0 05 1F 
1258c     28 24 21 1D 
12590     19 14 10 0B | 	byte	$f0, $ef, $ee, $ee, $ee, $f0, $05, $1f, $28, $24, $21, $1d, $19, $14, $10, $0b
12594     07 03 00 FD 
12598     FA F7 F5 F2 
1259c     F2 F6 FA F9 
125a0     F7 F4 F3 F1 | 	byte	$07, $03, $00, $fd, $fa, $f7, $f5, $f2, $f2, $f6, $fa, $f9, $f7, $f4, $f3, $f1
125a4     F0 EF EE EE 
125a8     EE ED F2 08 
125ac     24 27 22 1E 
125b0     19 14 11 0C | 	byte	$f0, $ef, $ee, $ee, $ee, $ed, $f2, $08, $24, $27, $22, $1e, $19, $14, $11, $0c
125b4     07 03 FF FD 
125b8     FA F7 F5 F6 
125bc     FB FE FD FA 
125c0     F8 F6 F4 F3 | 	byte	$07, $03, $ff, $fd, $fa, $f7, $f5, $f6, $fb, $fe, $fd, $fa, $f8, $f6, $f4, $f3
125c4     F1 F0 EF EE 
125c8     EE EE EE F5 
125cc     11 29 26 1F 
125d0     1B 18 15 11 | 	byte	$f1, $f0, $ef, $ee, $ee, $ee, $ee, $f5, $11, $29, $26, $1f, $1b, $18, $15, $11
125d4     0A 01 FB F8 
125d8     F6 F4 F7 FD 
125dc     00 FD FB F9 
125e0     F7 F5 F4 F3 | 	byte	$0a, $01, $fb, $f8, $f6, $f4, $f7, $fd, $00, $fd, $fb, $f9, $f7, $f5, $f4, $f3
125e4     F2 F1 F1 F1 
125e8     F2 F3 F3 F4 
125ec     FD 1E 2D 28 
125f0     25 22 1F 1B | 	byte	$f2, $f1, $f1, $f1, $f2, $f3, $f3, $f4, $fd, $1e, $2d, $28, $25, $22, $1f, $1b
125f4     16 06 F4 EB 
125f8     EB F1 FA FC 
125fc     FA F8 F7 F6 
12600     F5 F4 F3 F2 | 	byte	$16, $06, $f4, $eb, $eb, $f1, $fa, $fc, $fa, $f8, $f7, $f6, $f5, $f4, $f3, $f2
12604     F1 F1 F1 F1 
12608     F1          | 	byte	$f1[5]
12609     F2 F3 F3 F1 
1260d     FB 1F 2A 26 
12611     23 20 1E 1A 
12615     14 03 F5 F7 | 	byte	$f2, $f3, $f3, $f1, $fb, $1f, $2a, $26, $23, $20, $1e, $1a, $14, $03, $f5, $f7
12619     FF 00 FD FB 
1261d     FA F8 F6 F5 
12621     F3 F2 F1 F0 
12625     EF EF F0 F0 | 	byte	$ff, $00, $fd, $fb, $fa, $f8, $f6, $f5, $f3, $f2, $f1, $f0, $ef, $ef, $f0, $f0
12629     F2 F3 F0 EF 
1262d     06 2A 29 25 
12631     22 1F 1B 18 
12635     15 0C FC F5 | 	byte	$f2, $f3, $f0, $ef, $06, $2a, $29, $25, $22, $1f, $1b, $18, $15, $0c, $fc, $f5
12639     FB FC F9 F7 
1263d     F5 F2 F1 EE 
12641     ED EC EB EC 
12645     ED EF F0 F2 | 	byte	$fb, $fc, $f9, $f7, $f5, $f2, $f1, $ee, $ed, $ec, $eb, $ec, $ed, $ef, $f0, $f2
12649     F1 ED EC F7 
1264d     20 2A 25 22 
12651     1F 1C 19 16 
12655     12 0E 08 FE | 	byte	$f1, $ed, $ec, $f7, $20, $2a, $25, $22, $1f, $1c, $19, $16, $12, $0e, $08, $fe
12659     FA FB F8 F6 
1265d     F3 F0 EE EC 
12661     EA E9 E9 EB 
12665     EC EE F0 EF | 	byte	$fa, $fb, $f8, $f6, $f3, $f0, $ee, $ec, $ea, $e9, $e9, $eb, $ec, $ee, $f0, $ef
12669     EC EB EF 12 
1266d     2D 29 25 22 
12671     1F 1B 17 13 
12675     0F 0C 0A 0B | 	byte	$ec, $eb, $ef, $12, $2d, $29, $25, $22, $1f, $1b, $17, $13, $0f, $0c, $0a, $0b
12679     03 F9 F6 F2 
1267d     EF EC E8 E6 
12681     E4 E5 E5 E7 
12685     E7 E7 E5 E5 | 	byte	$03, $f9, $f6, $f2, $ef, $ec, $e8, $e6, $e4, $e5, $e5, $e7, $e7, $e7, $e5, $e5
12689     EA F1 06 33 
1268d     35 2F 2C 28 
12691     23 1F 19 15 
12695     0F 0A 07 0F | 	byte	$ea, $f1, $06, $33, $35, $2f, $2c, $28, $23, $1f, $19, $15, $0f, $0a, $07, $0f
12699     12 FD EF EB 
1269d     E5 E0 DB D8 
126a1     D6 D6 D6 D5 
126a5     D3 CC C8 D1 | 	byte	$12, $fd, $ef, $eb, $e5, $e0, $db, $d8, $d6, $d6, $d6, $d5, $d3, $cc, $c8, $d1
126a9     E1 F9 37 4C 
126ad     47 42 3D 36 
126b1     30 28 21 1A 
126b5     13 0B 08 12 | 	byte	$e1, $f9, $37, $4c, $47, $42, $3d, $36, $30, $28, $21, $1a, $13, $0b, $08, $12
126b9     1D 15 F6 E9 
126bd     E4 DF DC DB 
126c1     DB D9 D7 D1 
126c5     C8 C2 C1 C3 | 	byte	$1d, $15, $f6, $e9, $e4, $df, $dc, $db, $db, $d9, $d7, $d1, $c8, $c2, $c1, $c3
126c9     D0 F4 34 43 
126cd     44 3F 39 34 
126d1     2D 27 20 19 
126d5     12 0B 07 14 | 	byte	$d0, $f4, $34, $43, $44, $3f, $39, $34, $2d, $27, $20, $19, $12, $0b, $07, $14
126d9     24 16 F6 EF 
126dd     EA E7 E6 E6 
126e1     E4 E0 DB D5 
126e5     CB C2 BF BF | 	byte	$24, $16, $f6, $ef, $ea, $e7, $e6, $e6, $e4, $e0, $db, $d5, $cb, $c2, $bf, $bf
126e9     C2 F7 24 34 
126ed     3F 3D 37 31 
126f1     2B 24 1E 17 
126f5     10 09 07 16 | 	byte	$c2, $f7, $24, $34, $3f, $3d, $37, $31, $2b, $24, $1e, $17, $10, $09, $07, $16
126f9     24 0A FA F6 
126fd     F4 F3 F2 EF 
12701     E9 E4 DF D8 
12705     CE C2 BE BE | 	byte	$24, $0a, $fa, $f6, $f4, $f3, $f2, $ef, $e9, $e4, $df, $d8, $ce, $c2, $be, $be
12709     C4 FA 0F 20 
1270d     33 3A 35 2F 
12711     29 23 1C 17 
12715     0F 09 0A 1B | 	byte	$c4, $fa, $0f, $20, $33, $3a, $35, $2f, $29, $23, $1c, $17, $0f, $09, $0a, $1b
12719     19 04 00 FF 
1271d     00 FE F9 F3 
12721     ED E7 E2 DB 
12725     CF C4 BD BD | 	byte	$19, $04, $00, $ff, $00, $fe, $f9, $f3, $ed, $e7, $e2, $db, $cf, $c4, $bd, $bd
12729     D6 F9 FA 09 
1272d     1F 31 33 2D 
12731     27 22 1B 14 
12735     0F 09 0D 19 | 	byte	$d6, $f9, $fa, $09, $1f, $31, $33, $2d, $27, $22, $1b, $14, $0f, $09, $0d, $19
12739     0A 07 0A 0D 
1273d     0A 04 FE F8 
12741     F2 EB E6 E0 
12745     D5 C6 BD BD | 	byte	$0a, $07, $0a, $0d, $0a, $04, $fe, $f8, $f2, $eb, $e6, $e0, $d5, $c6, $bd, $bd
12749     E4 F7 F1 F4 
1274d     07 21 30 2C 
12751     27 22 1C 16 
12755     10 0B 13 13 | 	byte	$e4, $f7, $f1, $f4, $07, $21, $30, $2c, $27, $22, $1c, $16, $10, $0b, $13, $13
12759     0E 11 15 14 
1275d     0E 07 01 FA 
12761     F4 EE E7 E2 
12765     D6 C6 BB BC | 	byte	$0e, $11, $15, $14, $0e, $07, $01, $fa, $f4, $ee, $e7, $e2, $d6, $c6, $bb, $bc
12769     ED F5 EE EA 
1276d     EF 06 22 2C 
12771     26 1F 1B 16 
12775     11 0F 1F 19 | 	byte	$ed, $f5, $ee, $ea, $ef, $06, $22, $2c, $26, $1f, $1b, $16, $11, $0f, $1f, $19
12779     1F 21 1D 17 
1277d     12 0A 03 FB 
12781     F5 EE E8 E1 
12785     D5 C2 B6 BC | 	byte	$1f, $21, $1d, $17, $12, $0a, $03, $fb, $f5, $ee, $e8, $e1, $d5, $c2, $b6, $bc
12789     F1 F2 EB E7 
1278d     EF 0E 26 28 
12791     20 1A 15 11 
12795     0D 12 1B 16 | 	byte	$f1, $f2, $eb, $e7, $ef, $0e, $26, $28, $20, $1a, $15, $11, $0d, $12, $1b, $16
12799     1E 22 1F 17 
1279d     10 09 02 FB 
127a1     F5 EF E9 E2 
127a5     D3 BF B3 C5 | 	byte	$1e, $22, $1f, $17, $10, $09, $02, $fb, $f5, $ef, $e9, $e2, $d3, $bf, $b3, $c5
127a9     F1 EE E9 E8 
127ad     01 1F 29 22 
127b1     1C 16 11 0C 
127b5     09 13 12 13 | 	byte	$f1, $ee, $e9, $e8, $01, $1f, $29, $22, $1c, $16, $11, $0c, $09, $13, $12, $13
127b9     1D 23 20 17 
127bd     10 09 02 FA 
127c1     F4 EF E9 E2 
127c5     D1 BC B3 CE | 	byte	$1d, $23, $20, $17, $10, $09, $02, $fa, $f4, $ef, $e9, $e2, $d1, $bc, $b3, $ce
127c9     F0 EB E9 F5 
127cd     1B 2C 25 1D 
127d1     18 13 0C 07 
127d5     07 15 0A 10 | 	byte	$f0, $eb, $e9, $f5, $1b, $2c, $25, $1d, $18, $13, $0c, $07, $07, $15, $0a, $10
127d9     1A 22 20 17 
127dd     0F 09 01 F9 
127e1     F3 EE E8 E1 
127e5     D1 BD B4 D8 | 	byte	$1a, $22, $20, $17, $0f, $09, $01, $f9, $f3, $ee, $e8, $e1, $d1, $bd, $b4, $d8
127e9     EF E9 EC 0F 
127ed     2E 2A 21 1A 
127f1     13 0D 07 01 
127f5     06 13 04 07 | 	byte	$ef, $e9, $ec, $0f, $2e, $2a, $21, $1a, $13, $0d, $07, $01, $06, $13, $04, $07
127f9     13 1F 1D 16 
127fd     0E 08 01 FB 
12801     F2 EB E6 DD 
12805     CA B7 B2 E2 | 	byte	$13, $1f, $1d, $16, $0e, $08, $01, $fb, $f2, $eb, $e6, $dd, $ca, $b7, $b2, $e2
12809     ED E9 FB 29 
1280d     33 2A 20 18 
12811     11 0B 04 00 
12815     0A 13 01 03 | 	byte	$ed, $e9, $fb, $29, $33, $2a, $20, $18, $11, $0b, $04, $00, $0a, $13, $01, $03
12819     13 22 20 17 
1281d     0E 08 03 FB 
12821     F3 EB E5 D8 
12825     C4 B3 B4 E9 | 	byte	$13, $22, $20, $17, $0e, $08, $03, $fb, $f3, $eb, $e5, $d8, $c4, $b3, $b4, $e9
12829     EA E7 0A 31 
1282d     2D 24 1A 13 
12831     0D 07 01 01 
12835     0F 10 FE 02 | 	byte	$ea, $e7, $0a, $31, $2d, $24, $1a, $13, $0d, $07, $01, $01, $0f, $10, $fe, $02
12839     17 26 23 17 
1283d     0F 09 04 FC 
12841     F5 ED E5 D4 
12845     BF B3 BE EC | 	byte	$17, $26, $23, $17, $0f, $09, $04, $fc, $f5, $ed, $e5, $d4, $bf, $b3, $be, $ec
12849     E8 EA 20 2F 
1284d     26 1C 14 0F 
12851     09 03 FD 02 
12855     13 0C F8 01 | 	byte	$e8, $ea, $20, $2f, $26, $1c, $14, $0f, $09, $03, $fd, $02, $13, $0c, $f8, $01
12859     18 29 23 18 
1285d     10 09 03 FC 
12861     F6 EF E2 D0 
12865     BB B2 C7 EC | 	byte	$18, $29, $23, $18, $10, $09, $03, $fc, $f6, $ef, $e2, $d0, $bb, $b2, $c7, $ec
12869     E7 FB 2E 2B 
1286d     20 19 13 0D 
12871     06 FF FC 06 
12875     1A 08 F6 02 | 	byte	$e7, $fb, $2e, $2b, $20, $19, $13, $0d, $06, $ff, $fc, $06, $1a, $08, $f6, $02
12879     1A 27 20 16 
1287d     0E 07 FE F9 
12881     F4 EE E0 C9 
12885     B7 B1 D6 EC | 	byte	$1a, $27, $20, $16, $0e, $07, $fe, $f9, $f4, $ee, $e0, $c9, $b7, $b1, $d6, $ec
12889     EA 18 2E 25 
1288d     1D 17 12 0C 
12891     04 FE FD 0E 
12895     1D FF F3 02 | 	byte	$ea, $18, $2e, $25, $1d, $17, $12, $0c, $04, $fe, $fd, $0e, $1d, $ff, $f3, $02
12899     19 26 1E 17 
1289d     0E 03 FB F5 
128a1     F2 EB DF C6 
128a5     B5 B2 DF EB | 	byte	$19, $26, $1e, $17, $0e, $03, $fb, $f5, $f2, $eb, $df, $c6, $b5, $b2, $df, $eb
128a9     EE 2C 2D 20 
128ad     1A 17 12 0B 
128b1     03 FE 01 16 
128b5     21 FA F5 0B | 	byte	$ee, $2c, $2d, $20, $1a, $17, $12, $0b, $03, $fe, $01, $16, $21, $fa, $f5, $0b
128b9     21 24 1B 14 
128bd     0A 01 F8 F1 
128c1     EC E5 D8 C1 
128c5     B4 B4 E5 EA | 	byte	$21, $24, $1b, $14, $0a, $01, $f8, $f1, $ec, $e5, $d8, $c1, $b4, $b4, $e5, $ea
128c9     F6 32 2C 1E 
128cd     17 14 11 0A 
128d1     03 FE 09 1C 
128d5     20 F7 FC 16 | 	byte	$f6, $32, $2c, $1e, $17, $14, $11, $0a, $03, $fe, $09, $1c, $20, $f7, $fc, $16
128d9     29 23 18 11 
128dd     07 FE F6 F0 
128e1     EA E2 D1 BB 
128e5     B2 BB E9 E8 | 	byte	$29, $23, $18, $11, $07, $fe, $f6, $f0, $ea, $e2, $d1, $bb, $b2, $bb, $e9, $e8
128e9     FD 30 26 1B 
128ed     15 14 11 08 
128f1     01 00 0E 20 
128f5     17 F5 04 20 | 	byte	$fd, $30, $26, $1b, $15, $14, $11, $08, $01, $00, $0e, $20, $17, $f5, $04, $20
128f9     2A 20 16 0C 
128fd     04 FC F4 EE 
12901     E9 DD C7 B7 
12905     B0 BF EA E7 | 	byte	$2a, $20, $16, $0c, $04, $fc, $f4, $ee, $e9, $dd, $c7, $b7, $b0, $bf, $ea, $e7
12909     13 2E 23 1A 
1290d     17 16 10 09 
12911     01 06 19 25 
12915     13 F6 0C 25 | 	byte	$13, $2e, $23, $1a, $17, $16, $10, $09, $01, $06, $19, $25, $13, $f6, $0c, $25
12919     29 1D 12 09 
1291d     01 F9 F2 EC 
12921     E6 D6 C0 B2 
12925     AD C9 E8 E6 | 	byte	$29, $1d, $12, $09, $01, $f9, $f2, $ec, $e6, $d6, $c0, $b2, $ad, $c9, $e8, $e6
12929     17 2A 1F 1A 
1292d     1A 17 0F 08 
12931     03 0E 21 27 
12935     0F FD 16 29 | 	byte	$17, $2a, $1f, $1a, $1a, $17, $0f, $08, $03, $0e, $21, $27, $0f, $fd, $16, $29
12939     26 1A 10 07 
1293d     FF F7 F1 EB 
12941     E0 CE B9 AE 
12945     AB D6 E5 EC | 	byte	$26, $1a, $10, $07, $ff, $f7, $f1, $eb, $e0, $ce, $b9, $ae, $ab, $d6, $e5, $ec
12949     1E 26 1B 19 
1294d     1B 16 0D 05 
12951     08 18 29 27 
12955     08 05 1F 29 | 	byte	$1e, $26, $1b, $19, $1b, $16, $0d, $05, $08, $18, $29, $27, $08, $05, $1f, $29
12959     21 16 0C 06 
1295d     FD F6 F1 EA 
12961     DC C4 B2 AB 
12965     AE DC E4 F2 | 	byte	$21, $16, $0c, $06, $fd, $f6, $f1, $ea, $dc, $c4, $b2, $ab, $ae, $dc, $e4, $f2
12969     24 23 1A 1B 
1296d     1B 15 0C 05 
12971     0D 1F 2C 24 
12975     08 11 26 27 | 	byte	$24, $23, $1a, $1b, $1b, $15, $0c, $05, $0d, $1f, $2c, $24, $08, $11, $26, $27
12979     1C 13 0B 02 
1297d     FA F4 F1 E8 
12981     D7 BD AC A9 
12985     B0 E3 E3 FF | 	byte	$1c, $13, $0b, $02, $fa, $f4, $f1, $e8, $d7, $bd, $ac, $a9, $b0, $e3, $e3, $ff
12989     25 21 1A 1A 
1298d     18 14 0B 06 
12991     14 28 2C 22 
12995     0A 1B 29 24 | 	byte	$25, $21, $1a, $1a, $18, $14, $0b, $06, $14, $28, $2c, $22, $0a, $1b, $29, $24
12999     19 0F 09 FF 
1299d     F7 F2 EE E4 
129a1     D1 B7 A9 A7 
129a5     B8 E3 E5 09 | 	byte	$19, $0f, $09, $ff, $f7, $f2, $ee, $e4, $d1, $b7, $a9, $a7, $b8, $e3, $e5, $09
129a9     26 1F 1C 1B 
129ad     17 13 0A 0A 
129b1     19 2A 2A 22 
129b5     10 21 29 20 | 	byte	$26, $1f, $1c, $1b, $17, $13, $0a, $0a, $19, $2a, $2a, $22, $10, $21, $29, $20
129b9     17 0E 06 FD 
129bd     F6 F1 EB DE 
129c1     C9 B3 A9 A6 
129c5     BD E3 EA 0D | 	byte	$17, $0e, $06, $fd, $f6, $f1, $eb, $de, $c9, $b3, $a9, $a6, $bd, $e3, $ea, $0d
129c9     25 20 1D 1A 
129cd     16 0F 08 0F 
129d1     22 2C 27 23 
129d5     15 26 27 1C | 	byte	$25, $20, $1d, $1a, $16, $0f, $08, $0f, $22, $2c, $27, $23, $15, $26, $27, $1c
129d9     15 0D 04 FA 
129dd     F5 EF E6 D6 
129e1     C2 B0 A8 A6 
129e5     CA E2 EE 12 | 	byte	$15, $0d, $04, $fa, $f5, $ef, $e6, $d6, $c2, $b0, $a8, $a6, $ca, $e2, $ee, $12
129e9     25 1F 1D 19 
129ed     14 0C 08 14 
129f1     28 2C 28 25 
129f5     1D 28 24 1A | 	byte	$25, $1f, $1d, $19, $14, $0c, $08, $14, $28, $2c, $28, $25, $1d, $28, $24, $1a
129f9     12 0B 01 F7 
129fd     F3 EE E2 D1 
12a01     BA AC A8 A7 
12a05     D1 E0 F7 15 | 	byte	$12, $0b, $01, $f7, $f3, $ee, $e2, $d1, $ba, $ac, $a8, $a7, $d1, $e0, $f7, $15
12a09     24 1F 1C 1A 
12a0d     13 0B 0D 1D 
12a11     2D 2C 2B 27 
12a15     22 2B 23 18 | 	byte	$24, $1f, $1c, $1a, $13, $0b, $0d, $1d, $2d, $2c, $2b, $27, $22, $2b, $23, $18
12a19     10 09 FD F5 
12a1d     EF EA DE C9 
12a21     B3 A9 A4 A8 
12a25     DB DF FB 19 | 	byte	$10, $09, $fd, $f5, $ef, $ea, $de, $c9, $b3, $a9, $a4, $a8, $db, $df, $fb, $19
12a29     23 1E 1B 18 
12a2d     11 0C 13 24 
12a31     2E 2B 31 2C 
12a35     29 2C 22 17 | 	byte	$23, $1e, $1b, $18, $11, $0c, $13, $24, $2e, $2b, $31, $2c, $29, $2c, $22, $17
12a39     0F 07 F9 F2 
12a3d     ED E6 D8 C2 
12a41     AE A5 A2 B1 
12a45     DD E2 FD 1B | 	byte	$0f, $07, $f9, $f2, $ed, $e6, $d8, $c2, $ae, $a5, $a2, $b1, $dd, $e2, $fd, $1b
12a49     21 1C 19 13 
12a4d     0F 0E 1A 2C 
12a51     2E 2E 37 2F 
12a55     2D 2B 21 17 | 	byte	$21, $1c, $19, $13, $0f, $0e, $1a, $2c, $2e, $2e, $37, $2f, $2d, $2b, $21, $17
12a59     10 05 F8 F1 
12a5d     EB E4 D2 B9 
12a61     A9 A3 A1 B7 
12a65     DC E7 FF 1B | 	byte	$10, $05, $f8, $f1, $eb, $e4, $d2, $b9, $a9, $a3, $a1, $b7, $dc, $e7, $ff, $1b
12a69     1F 1C 17 12 
12a6d     0E 11 24 32 
12a71     30 33 3D 31 
12a75     2F 2B 1F 16 | 	byte	$1f, $1c, $17, $12, $0e, $11, $24, $32, $30, $33, $3d, $31, $2f, $2b, $1f, $16
12a79     0E 02 F5 EF 
12a7d     E9 DF CB B1 
12a81     A4 A1 A1 BF 
12a85     DB EE FF 1D | 	byte	$0e, $02, $f5, $ef, $e9, $df, $cb, $b1, $a4, $a1, $a1, $bf, $db, $ee, $ff, $1d
12a89     1E 1C 15 10 
12a8d     0D 14 2A 34 
12a91     32 38 42 31 
12a95     30 29 1D 15 | 	byte	$1e, $1c, $15, $10, $0d, $14, $2a, $34, $32, $38, $42, $31, $30, $29, $1d, $15
12a99     0D 00 F5 ED 
12a9d     E7 DC C1 AB 
12aa1     A1 9F A0 CC 
12aa5     DC F5 05 1E | 	byte	$0d, $00, $f5, $ed, $e7, $dc, $c1, $ab, $a1, $9f, $a0, $cc, $dc, $f5, $05, $1e
12aa9     1E 1A 12 0E 
12aad     0D 1B 30 33 
12ab1     34 3D 45 31 
12ab5     2C 24 1A 11 | 	byte	$1e, $1a, $12, $0e, $0d, $1b, $30, $33, $34, $3d, $45, $31, $2c, $24, $1a, $11
12ab9     07 FB F2 EB 
12abd     E6 D7 BD A7 
12ac1     A0 9E A2 D2 
12ac5     E2 FA 0B 21 | 	byte	$07, $fb, $f2, $eb, $e6, $d7, $bd, $a7, $a0, $9e, $a2, $d2, $e2, $fa, $0b, $21
12ac9     1E 18 12 0F 
12acd     12 25 33 32 
12ad1     36 42 45 2F 
12ad5     28 22 17 0E | 	byte	$1e, $18, $12, $0f, $12, $25, $33, $32, $36, $42, $45, $2f, $28, $22, $17, $0e
12ad9     01 F7 F0 EB 
12add     E2 D1 B4 A3 
12ae1     9F 9D A5 D6 
12ae5     EA FC 0F 22 | 	byte	$01, $f7, $f0, $eb, $e2, $d1, $b4, $a3, $9f, $9d, $a5, $d6, $ea, $fc, $0f, $22
12ae9     1F 17 11 0F 
12aed     17 2C 35 33 
12af1     3B 48 46 2E 
12af5     27 1E 15 0A | 	byte	$1f, $17, $11, $0f, $17, $2c, $35, $33, $3b, $48, $46, $2e, $27, $1e, $15, $0a
12af9     FE F4 ED E9 
12afd     DF CA AD A0 
12b01     9E 9C AB D9 
12b05     F0 FC 15 21 | 	byte	$fe, $f4, $ed, $e9, $df, $ca, $ad, $a0, $9e, $9c, $ab, $d9, $f0, $fc, $15, $21
12b09     1F 16 12 11 
12b0d     1E 32 35 35 
12b11     3F 49 43 2D 
12b15     25 19 0F 06 | 	byte	$1f, $16, $12, $11, $1e, $32, $35, $35, $3f, $49, $43, $2d, $25, $19, $0f, $06
12b19     FA F1 EA E5 
12b1d     D9 C0 A9 A0 
12b21     9D 9D BB DC 
12b25     F7 FD 18 21 | 	byte	$fa, $f1, $ea, $e5, $d9, $c0, $a9, $a0, $9d, $9d, $bb, $dc, $f7, $fd, $18, $21
12b29     1F 16 12 14 
12b2d     25 35 35 3B 
12b31     45 4C 40 2D 
12b35     23 16 0B 02 | 	byte	$1f, $16, $12, $14, $25, $35, $35, $3b, $45, $4c, $40, $2d, $23, $16, $0b, $02
12b39     F8 F0 E9 E0 
12b3d     D1 B8 A4 9F 
12b41     9E 9D C4 E3 
12b45     FA 00 1A 21 | 	byte	$f8, $f0, $e9, $e0, $d1, $b8, $a4, $9f, $9e, $9d, $c4, $e3, $fa, $00, $1a, $21
12b49     1C 16 13 1C 
12b4d     2E 39 38 41 
12b51     48 4E 3C 2A 
12b55     20 13 08 FE | 	byte	$1c, $16, $13, $1c, $2e, $39, $38, $41, $48, $4e, $3c, $2a, $20, $13, $08, $fe
12b59     F7 EF E6 DA 
12b5d     C7 AF A2 9E 
12b61     9D 9F CC E9 
12b65     FB 01 1C 1F | 	byte	$f7, $ef, $e6, $da, $c7, $af, $a2, $9e, $9d, $9f, $cc, $e9, $fb, $01, $1c, $1f
12b69     19 13 14 22 
12b6d     35 3B 3D 46 
12b71     4C 50 39 28 
12b75     1E 14 08 FC | 	byte	$19, $13, $14, $22, $35, $3b, $3d, $46, $4c, $50, $39, $28, $1e, $14, $08, $fc
12b79     F5 ED E4 D5 
12b7d     BE AA 9E 9C 
12b81     9B A0 D0 F0 
12b85     FC 03 1C 1C | 	byte	$f5, $ed, $e4, $d5, $be, $aa, $9e, $9c, $9b, $a0, $d0, $f0, $fc, $03, $1c, $1c
12b89     16 11 17 29 
12b8d     3A 3D 43 48 
12b91     4C 50 35 24 
12b95     1C 13 07 FB | 	byte	$16, $11, $17, $29, $3a, $3d, $43, $48, $4c, $50, $35, $24, $1c, $13, $07, $fb
12b99     F5 ED E2 D0 
12b9d     BA A4 9B 9C 
12ba1     9A A7 D5 F5 
12ba5     FA 05 1B 1A | 	byte	$f5, $ed, $e2, $d0, $ba, $a4, $9b, $9c, $9a, $a7, $d5, $f5, $fa, $05, $1b, $1a
12ba9     13 0F 1B 31 
12bad     3D 42 48 4C 
12bb1     4E 51 31 22 
12bb5     1B 11 04 FB | 	byte	$13, $0f, $1b, $31, $3d, $42, $48, $4c, $4e, $51, $31, $22, $1b, $11, $04, $fb
12bb9     F3 EC E0 CB 
12bbd     B1 A0 9A 9B 
12bc1     99 AD DD F9 
12bc5     F9 08 19 18 | 	byte	$f3, $ec, $e0, $cb, $b1, $a0, $9a, $9b, $99, $ad, $dd, $f9, $f9, $08, $19, $18
12bc9     12 11 22 35 
12bcd     3D 46 4A 4B 
12bd1     50 4F 2B 1F 
12bd5     1A 0E 00 FA | 	byte	$12, $11, $22, $35, $3d, $46, $4a, $4b, $50, $4f, $2b, $1f, $1a, $0e, $00, $fa
12bd9     F2 E9 DB C4 
12bdd     AB 9D 9A 9B 
12be1     98 BB E9 FA 
12be5     F7 0B 1A 15 | 	byte	$f2, $e9, $db, $c4, $ab, $9d, $9a, $9b, $98, $bb, $e9, $fa, $f7, $0b, $1a, $15
12be9     10 15 29 37 
12bed     40 49 4B 4B 
12bf1     53 4C 26 1E 
12bf5     17 0A FD F9 | 	byte	$10, $15, $29, $37, $40, $49, $4b, $4b, $53, $4c, $26, $1e, $17, $0a, $fd, $f9
12bf9     F1 E6 D6 BE 
12bfd     A7 9D 9A 99 
12c01     97 C8 F3 FA 
12c05     F4 0B 18 14 | 	byte	$f1, $e6, $d6, $be, $a7, $9d, $9a, $99, $97, $c8, $f3, $fa, $f4, $0b, $18, $14
12c09     0F 1D 31 3B 
12c0d     46 4C 4A 4C 
12c11     55 47 23 1D 
12c15     14 04 F9 F6 | 	byte	$0f, $1d, $31, $3b, $46, $4c, $4a, $4c, $55, $47, $23, $1d, $14, $04, $f9, $f6
12c19     ED E3 D2 B8 
12c1d     A7 9D 9A 96 
12c21     9D D3 F9 FA 
12c25     F5 11 19 12 | 	byte	$ed, $e3, $d2, $b8, $a7, $9d, $9a, $96, $9d, $d3, $f9, $fa, $f5, $11, $19, $12
12c29     11 23 37 3F 
12c2d     4D 4F 49 50 
12c31     55 3D 22 1A 
12c35     0E FE F6 F1 | 	byte	$11, $23, $37, $3f, $4d, $4f, $49, $50, $55, $3d, $22, $1a, $0e, $fe, $f6, $f1
12c39     E9 DD CA B2 
12c3d     A4 9C 99 95 
12c41     A2 E1 FD F9 
12c45     F9 15 17 11 | 	byte	$e9, $dd, $ca, $b2, $a4, $9c, $99, $95, $a2, $e1, $fd, $f9, $f9, $15, $17, $11
12c49     17 2D 3B 43 
12c4d     50 4D 49 53 
12c51     54 36 1F 18 
12c55     0A FA F4 EE | 	byte	$17, $2d, $3b, $43, $50, $4d, $49, $53, $54, $36, $1f, $18, $0a, $fa, $f4, $ee
12c59     E4 D8 C3 AC 
12c5d     A1 9B 99 95 
12c61     AD E8 FD F8 
12c65     FD 17 14 0F | 	byte	$e4, $d8, $c3, $ac, $a1, $9b, $99, $95, $ad, $e8, $fd, $f8, $fd, $17, $14, $0f
12c69     1D 35 3E 47 
12c6d     52 4A 4C 57 
12c71     54 2D 1D 15 
12c75     04 F7 F2 EA | 	byte	$1d, $35, $3e, $47, $52, $4a, $4c, $57, $54, $2d, $1d, $15, $04, $f7, $f2, $ea
12c79     E1 D3 BB A6 
12c7d     9F 9A 98 96 
12c81     B8 F2 FC F7 
12c85     02 18 15 12 | 	byte	$e1, $d3, $bb, $a6, $9f, $9a, $98, $96, $b8, $f2, $fc, $f7, $02, $18, $15, $12
12c89     25 3B 42 4E 
12c8d     51 47 4F 59 
12c91     52 28 19 10 
12c95     02 F5 F0 E7 | 	byte	$25, $3b, $42, $4e, $51, $47, $4f, $59, $52, $28, $19, $10, $02, $f5, $f0, $e7
12c99     DD CB B2 A0 
12c9d     9B 99 98 98 
12ca1     CB F9 F9 F6 
12ca5     05 18 14 16 | 	byte	$dd, $cb, $b2, $a0, $9b, $99, $98, $98, $cb, $f9, $f9, $f6, $05, $18, $14, $16
12ca9     2F 40 48 54 
12cad     4E 48 54 5A 
12cb1     4F 25 15 0B 
12cb5     FE F4 EE E4 | 	byte	$2f, $40, $48, $54, $4e, $48, $54, $5a, $4f, $25, $15, $0b, $fe, $f4, $ee, $e4
12cb9     D8 C3 A9 9C 
12cbd     97 96 98 9B 
12cc1     D9 FD F8 F6 
12cc5     09 18 13 1C | 	byte	$d8, $c3, $a9, $9c, $97, $96, $98, $9b, $d9, $fd, $f8, $f6, $09, $18, $13, $1c
12cc9     37 44 4D 56 
12ccd     4B 4A 56 57 
12cd1     46 22 13 09 
12cd5     FC F4 EE E2 | 	byte	$37, $44, $4d, $56, $4b, $4a, $56, $57, $46, $22, $13, $09, $fc, $f4, $ee, $e2
12cd9     D5 BD A3 9A 
12cdd     95 96 97 A3 
12ce1     E5 FD F7 F7 
12ce5     0E 19 15 23 | 	byte	$d5, $bd, $a3, $9a, $95, $96, $97, $a3, $e5, $fd, $f7, $f7, $0e, $19, $15, $23
12ce9     3D 48 52 56 
12ced     4A 4C 58 53 
12cf1     3F 19 10 06 
12cf5     F8 F2 EB E0 | 	byte	$3d, $48, $52, $56, $4a, $4c, $58, $53, $3f, $19, $10, $06, $f8, $f2, $eb, $e0
12cf9     D0 B8 9F 97 
12cfd     95 96 96 AA 
12d01     F5 FC F6 F9 
12d05     12 18 17 2F | 	byte	$d0, $b8, $9f, $97, $95, $96, $96, $aa, $f5, $fc, $f6, $f9, $12, $18, $17, $2f
12d09     45 4C 55 54 
12d0d     49 51 58 50 
12d11     39 15 0D 03 
12d15     F7 F1 E9 DC | 	byte	$45, $4c, $55, $54, $49, $51, $58, $50, $39, $15, $0d, $03, $f7, $f1, $e9, $dc
12d19     CB AF 9C 97 
12d1d     95 95 95 BC 
12d21     F9 FA F5 FC 
12d25     16 18 1E 37 | 	byte	$cb, $af, $9c, $97, $95, $95, $95, $bc, $f9, $fa, $f5, $fc, $16, $18, $1e, $37
12d29     4B 52 56 4F 
12d2d     49 54 58 4E 
12d31     2D 11 09 FE 
12d35     F4 EE E5 D6 | 	byte	$4b, $52, $56, $4f, $49, $54, $58, $4e, $2d, $11, $09, $fe, $f4, $ee, $e5, $d6
12d39     C2 A8 99 96 
12d3d     95 94 96 CB 
12d41     FC F8 F6 FF 
12d45     18 19 26 43 | 	byte	$c2, $a8, $99, $96, $95, $94, $96, $cb, $fc, $f8, $f6, $ff, $18, $19, $26, $43
12d49     4F 55 56 4C 
12d4d     4A 55 56 49 
12d51     25 0C 06 FB 
12d55     F2 EC DE D2 | 	byte	$4f, $55, $56, $4c, $4a, $55, $56, $49, $25, $0c, $06, $fb, $f2, $ec, $de, $d2
12d59     BD A4 98 97 
12d5d     95 95 99 D9 
12d61     FC F6 F7 04 
12d65     17 1C 2F 4A | 	byte	$bd, $a4, $98, $97, $95, $95, $99, $d9, $fc, $f6, $f7, $04, $17, $1c, $2f, $4a
12d69     53 58 55 4A 
12d6d     4D 59 55 45 
12d71     1F 0A 03 FB 
12d75     F0 E7 DA CC | 	byte	$53, $58, $55, $4a, $4d, $59, $55, $45, $1f, $0a, $03, $fb, $f0, $e7, $da, $cc
12d79     B5 9E 98 97 
12d7d     95 95 A1 E7 
12d81     F9 F4 F7 05 
12d85     16 21 39 4F | 	byte	$b5, $9e, $98, $97, $95, $95, $a1, $e7, $f9, $f4, $f7, $05, $16, $21, $39, $4f
12d89     58 58 53 4B 
12d8d     50 5B 52 42 
12d91     17 08 02 FA 
12d95     EF E4 D6 C6 | 	byte	$58, $58, $53, $4b, $50, $5b, $52, $42, $17, $08, $02, $fa, $ef, $e4, $d6, $c6
12d99     AF 9B 98 97 
12d9d     95 96 AD F4 
12da1     F6 F4 F7 04 
12da5     18 27 40 53 | 	byte	$af, $9b, $98, $97, $95, $96, $ad, $f4, $f6, $f4, $f7, $04, $18, $27, $40, $53
12da9     5B 56 50 4B 
12dad     53 5A 4E 3F 
12db1     15 06 00 F7 
12db5     EC E0 D4 C0 | 	byte	$5b, $56, $50, $4b, $53, $5a, $4e, $3f, $15, $06, $00, $f7, $ec, $e0, $d4, $c0
12db9     A7 9A 99 97 
12dbd     94 96 B8 F7 
12dc1     F4 F3 F6 05 
12dc5     1B 2E 47 58 | 	byte	$a7, $9a, $99, $97, $94, $96, $b8, $f7, $f4, $f3, $f6, $05, $1b, $2e, $47, $58
12dc9     5B 55 4E 4C 
12dcd     57 58 4B 3A 
12dd1     11 04 FF F4 
12dd5     E8 DD CE BB | 	byte	$5b, $55, $4e, $4c, $57, $58, $4b, $3a, $11, $04, $ff, $f4, $e8, $dd, $ce, $bb
12dd9     A3 9A 99 97 
12ddd     94 97 D3 F9 
12de1     F4 F3 F4 0B 
12de5     21 36 4E 5B | 	byte	$a3, $9a, $99, $97, $94, $97, $d3, $f9, $f4, $f3, $f4, $0b, $21, $36, $4e, $5b
12de9     59 53 4D 4F 
12ded     59 54 48 31 
12df1     0C 03 FC F0 
12df5     E5 D9 CB B1 | 	byte	$59, $53, $4d, $4f, $59, $54, $48, $31, $0c, $03, $fc, $f0, $e5, $d9, $cb, $b1
12df9     A0 9A 98 96 
12dfd     96 9B E0 F8 
12e01     F4 F3 F3 10 
12e05     2A 3F 54 5C | 	byte	$a0, $9a, $98, $96, $96, $9b, $e0, $f8, $f4, $f3, $f3, $10, $2a, $3f, $54, $5c
12e09     57 51 4C 51 
12e0d     59 50 45 2B 
12e11     08 02 FB EC 
12e15     E3 D6 C5 AB | 	byte	$57, $51, $4c, $51, $59, $50, $45, $2b, $08, $02, $fb, $ec, $e3, $d6, $c5, $ab
12e19     9D 99 97 95 
12e1d     97 A5 F2 F9 
12e21     F4 F2 F4 19 
12e25     32 4B 5A 5B | 	byte	$9d, $99, $97, $95, $97, $a5, $f2, $f9, $f4, $f2, $f4, $19, $32, $4b, $5a, $5b
12e29     53 4E 4C 53 
12e2d     57 4A 41 1F 
12e31     03 FE F5 EA 
12e35     DF D1 BD A7 | 	byte	$53, $4e, $4c, $53, $57, $4a, $41, $1f, $03, $fe, $f5, $ea, $df, $d1, $bd, $a7
12e39     9B 98 96 95 
12e3d     96 B6 FA F9 
12e41     F4 F2 F9 21 
12e45     3E 54 5F 5B | 	byte	$9b, $98, $96, $95, $96, $b6, $fa, $f9, $f4, $f2, $f9, $21, $3e, $54, $5f, $5b
12e49     51 4D 4E 54 
12e4d     54 47 3B 17 
12e51     FF F9 F1 E7 
12e55     DB C9 B5 A1 | 	byte	$51, $4d, $4e, $54, $54, $47, $3b, $17, $ff, $f9, $f1, $e7, $db, $c9, $b5, $a1
12e59     99 96 96 94 
12e5d     96 C8 FE F9 
12e61     F3 F2 01 2D 
12e65     4A 5B 60 59 | 	byte	$99, $96, $96, $94, $96, $c8, $fe, $f9, $f3, $f2, $01, $2d, $4a, $5b, $60, $59
12e69     51 4E 51 56 
12e6d     51 43 36 11 
12e71     FC F7 EE E5 
12e75     D7 C2 AD 9C | 	byte	$51, $4e, $51, $56, $51, $43, $36, $11, $fc, $f7, $ee, $e5, $d7, $c2, $ad, $9c
12e79     97 95 95 92 
12e7d     99 D4 FE F7 
12e81     F2 F1 0D 39 
12e85     55 61 5F 57 | 	byte	$97, $95, $95, $92, $99, $d4, $fe, $f7, $f2, $f1, $0d, $39, $55, $61, $5f, $57
12e89     50 4F 53 56 
12e8d     4D 40 32 0B 
12e91     FA F5 ED E2 
12e95     D2 BD A5 99 | 	byte	$50, $4f, $53, $56, $4d, $40, $32, $0b, $fa, $f5, $ed, $e2, $d2, $bd, $a5, $99
12e99     94 95 94 92 
12e9d     9D E8 FD F5 
12ea1     F1 F1 17 48 
12ea5     5C 62 5E 56 | 	byte	$94, $95, $94, $92, $9d, $e8, $fd, $f5, $f1, $f1, $17, $48, $5c, $62, $5e, $56
12ea9     4F 50 55 55 
12ead     49 3D 2E 05 
12eb1     F9 F4 EB DE 
12eb5     CA B6 9F 96 | 	byte	$4f, $50, $55, $55, $49, $3d, $2e, $05, $f9, $f4, $eb, $de, $ca, $b6, $9f, $96
12eb9     92 95 92 92 
12ebd     AC EE F9 F3 
12ec1     F0 F6 24 52 
12ec5     62 62 5D 55 | 	byte	$92, $95, $92, $92, $ac, $ee, $f9, $f3, $f0, $f6, $24, $52, $62, $62, $5d, $55
12ec9     50 52 56 53 
12ecd     47 3C 26 03 
12ed1     F9 F4 EA DA 
12ed5     C6 AD 9C 94 | 	byte	$50, $52, $56, $53, $47, $3c, $26, $03, $f9, $f4, $ea, $da, $c6, $ad, $9c, $94
12ed9     93 94 91 93 
12edd     B7 F6 F7 F0 
12ee1     EE FC 35 5A 
12ee5     63 60 5B 52 | 	byte	$93, $94, $91, $93, $b7, $f6, $f7, $f0, $ee, $fc, $35, $5a, $63, $60, $5b, $52
12ee9     50 55 56 50 
12eed     42 38 21 FF 
12ef1     F9 F3 E8 D6 
12ef5     C0 A7 98 93 | 	byte	$50, $55, $56, $50, $42, $38, $21, $ff, $f9, $f3, $e8, $d6, $c0, $a7, $98, $93
12ef9     94 93 90 95 
12efd     C7 F7 F4 ED 
12f01     EF 09 42 60 
12f05     61 5D 57 50 | 	byte	$94, $93, $90, $95, $c7, $f7, $f4, $ed, $ef, $09, $42, $60, $61, $5d, $57, $50
12f09     52 57 55 4B 
12f0d     3D 33 1A FE 
12f11     F7 F0 E4 D0 
12f15     B9 A1 95 93 | 	byte	$52, $57, $55, $4b, $3d, $33, $1a, $fe, $f7, $f0, $e4, $d0, $b9, $a1, $95, $93
12f19     94 93 90 9A 
12f1d     D7 F7 F2 EC 
12f21     F2 17 52 63 
12f25     5F 5B 56 50 | 	byte	$94, $93, $90, $9a, $d7, $f7, $f2, $ec, $f2, $17, $52, $63, $5f, $5b, $56, $50
12f29     56 59 53 48 
12f2d     38 2F 14 FB 
12f31     F5 ED E0 CB 
12f35     B1 9D 95 95 | 	byte	$56, $59, $53, $48, $38, $2f, $14, $fb, $f5, $ed, $e0, $cb, $b1, $9d, $95, $95
12f39     96 94 92 A5 
12f3d     E5 F7 F1 ED 
12f41     F9 26 5D 64 
12f45     5D 57 52 50 | 	byte	$96, $94, $92, $a5, $e5, $f7, $f1, $ed, $f9, $26, $5d, $64, $5d, $57, $52, $50
12f49     56 58 51 43 
12f4d     35 2B 0A F8 
12f51     F2 EA DC C5 
12f55     AB 99 96 94 | 	byte	$56, $58, $51, $43, $35, $2b, $0a, $f8, $f2, $ea, $dc, $c5, $ab, $99, $96, $94
12f59     96 94 94 B1 
12f5d     EF F6 F0 EF 
12f61     03 33 64 64 
12f65     5C 53 4F 51 | 	byte	$96, $94, $94, $b1, $ef, $f6, $f0, $ef, $03, $33, $64, $64, $5c, $53, $4f, $51
12f69     58 58 4E 3D 
12f6d     32 28 09 F5 
12f71     EF E6 D8 BE 
12f75     A3 97 95 94 | 	byte	$58, $58, $4e, $3d, $32, $28, $09, $f5, $ef, $e6, $d8, $be, $a3, $97, $95, $94
12f79     96 93 97 BE 
12f7d     F3 F5 F0 F3 
12f81     0D 46 67 62 
12f85     5B 51 4F 54 | 	byte	$96, $93, $97, $be, $f3, $f5, $f0, $f3, $0d, $46, $67, $62, $5b, $51, $4f, $54
12f89     58 55 4B 3A 
12f8d     2F 25 03 F3 
12f91     ED E1 D2 B6 
12f95     9E 96 93 93 | 	byte	$58, $55, $4b, $3a, $2f, $25, $03, $f3, $ed, $e1, $d2, $b6, $9e, $96, $93, $93
12f99     95 92 9B CD 
12f9d     F6 F3 EE F9 
12fa1     1F 51 66 5F 
12fa5     58 50 52 56 | 	byte	$95, $92, $9b, $cd, $f6, $f3, $ee, $f9, $1f, $51, $66, $5f, $58, $50, $52, $56
12fa9     59 53 47 37 
12fad     2C 20 02 F2 
12fb1     EC DF C9 AF 
12fb5     9A 95 91 94 | 	byte	$59, $53, $47, $37, $2c, $20, $02, $f2, $ec, $df, $c9, $af, $9a, $95, $91, $94
12fb9     95 92 A6 D6 
12fbd     F6 F1 EF 01 
12fc1     2D 5D 65 5D 
12fc5     53 4F 54 58 | 	byte	$95, $92, $a6, $d6, $f6, $f1, $ef, $01, $2d, $5d, $65, $5d, $53, $4f, $54, $58
12fc9     58 51 44 33 
12fcd     2A 1E FB F1 
12fd1     E9 DD C2 A7 
12fd5     98 94 91 94 | 	byte	$58, $51, $44, $33, $2a, $1e, $fb, $f1, $e9, $dd, $c2, $a7, $98, $94, $91, $94
12fd9     93 92 AD E0 
12fdd     F2 ED F0 0D 
12fe1     3B 61 64 59 
12fe5     52 50 56 5A | 	byte	$93, $92, $ad, $e0, $f2, $ed, $f0, $0d, $3b, $61, $64, $59, $52, $50, $56, $5a
12fe9     56 4F 3E 30 
12fed     2A 1B F7 EF 
12ff1     E7 D8 BA A0 
12ff5     98 93 92 94 | 	byte	$56, $4f, $3e, $30, $2a, $1b, $f7, $ef, $e7, $d8, $ba, $a0, $98, $93, $92, $94
12ff9     91 94 B7 E6 
12ffd     F0 EC F7 20 
13001     46 61 61 59 
13005     51 50 57 5A | 	byte	$91, $94, $b7, $e6, $f0, $ec, $f7, $20, $46, $61, $61, $59, $51, $50, $57, $5a
13009     55 4A 3A 2E 
1300d     2A 14 F5 ED 
13011     E4 D3 B1 9D 
13015     97 92 92 93 | 	byte	$55, $4a, $3a, $2e, $2a, $14, $f5, $ed, $e4, $d3, $b1, $9d, $97, $92, $92, $93
13019     8F 98 C4 EE 
1301d     EE EC 03 2C 
13021     4D 61 5E 56 
13025     4F 51 59 5A | 	byte	$8f, $98, $c4, $ee, $ee, $ec, $03, $2c, $4d, $61, $5e, $56, $4f, $51, $59, $5a
13029     52 47 36 2E 
1302d     2A 0F F2 EB 
13031     E0 CA AC 9A 
13035     95 90 92 91 | 	byte	$52, $47, $36, $2e, $2a, $0f, $f2, $eb, $e0, $ca, $ac, $9a, $95, $90, $92, $91
13039     8F 9F CB F0 
1303d     ED EE 11 38 
13041     50 60 5C 54 
13045     4C 52 5B 59 | 	byte	$8f, $9f, $cb, $f0, $ed, $ee, $11, $38, $50, $60, $5c, $54, $4c, $52, $5b, $59
13049     50 42 34 2D 
1304d     29 08 EF EA 
13051     DE C3 A6 98 
13055     94 91 92 8F | 	byte	$50, $42, $34, $2d, $29, $08, $ef, $ea, $de, $c3, $a6, $98, $94, $91, $92, $8f
13059     91 A8 D4 F1 
1305d     EB F9 1E 42 
13061     53 5F 5A 52 
13065     4C 56 5B 55 | 	byte	$91, $a8, $d4, $f1, $eb, $f9, $1e, $42, $53, $5f, $5a, $52, $4c, $56, $5b, $55
13069     4D 3F 31 29 
1306d     24 FF ED E7 
13071     D8 B8 A1 97 
13075     91 90 8F 8F | 	byte	$4d, $3f, $31, $29, $24, $ff, $ed, $e7, $d8, $b8, $a1, $97, $91, $90, $8f, $8f
13079     96 B3 DB F0 
1307d     EC 05 32 47 
13081     55 5F 59 4F 
13085     4C 58 5B 53 | 	byte	$96, $b3, $db, $f0, $ec, $05, $32, $47, $55, $5f, $59, $4f, $4c, $58, $5b, $53
13089     49 3D 2F 28 
1308d     22 FA EB E4 
13091     D0 B3 9D 96 
13095     90 90 8D 8F | 	byte	$49, $3d, $2f, $28, $22, $fa, $eb, $e4, $d0, $b3, $9d, $96, $90, $90, $8d, $8f
13099     9A BA E5 EC 
1309d     F1 13 3E 48 
130a1     55 5D 56 4D 
130a5     4F 5A 59 4F | 	byte	$9a, $ba, $e5, $ec, $f1, $13, $3e, $48, $55, $5d, $56, $4d, $4f, $5a, $59, $4f
130a9     47 39 2D 28 
130ad     1C F6 EA E2 
130b1     C8 A9 9C 94 
130b5     90 8F 8B 8F | 	byte	$47, $39, $2d, $28, $1c, $f6, $ea, $e2, $c8, $a9, $9c, $94, $90, $8f, $8b, $8f
130b9     A3 C0 E8 E9 
130bd     F9 25 45 47 
130c1     57 5B 53 4B 
130c5     51 5B 56 4B | 	byte	$a3, $c0, $e8, $e9, $f9, $25, $45, $47, $57, $5b, $53, $4b, $51, $5b, $56, $4b
130c9     44 37 2E 29 
130cd     1A F2 E9 DE 
130d1     BE A3 9A 93 
130d5     90 8E 8C 91 | 	byte	$44, $37, $2e, $29, $1a, $f2, $e9, $de, $be, $a3, $9a, $93, $90, $8e, $8c, $91
130d9     AA C7 EB E9 
130dd     07 32 46 45 
130e1     57 59 51 4B 
130e5     56 5D 53 49 | 	byte	$aa, $c7, $eb, $e9, $07, $32, $46, $45, $57, $59, $51, $4b, $56, $5d, $53, $49
130e9     43 36 2E 2A 
130ed     11 EE E7 D5 
130f1     B5 9F 96 92 
130f5     8F 8C 8D 94 | 	byte	$43, $36, $2e, $2a, $11, $ee, $e7, $d5, $b5, $9f, $96, $92, $8f, $8c, $8d, $94
130f9     B0 D0 EA F2 
130fd     14 3B 43 45 
13101     59 56 4E 4D 
13105     57 5A 4F 47 | 	byte	$b0, $d0, $ea, $f2, $14, $3b, $43, $45, $59, $56, $4e, $4d, $57, $5a, $4f, $47
13109     3E 34 2E 29 
1310d     0A EA E5 D0 
13111     AE 9D 95 91 
13115     8F 8C 8D 9B | 	byte	$3e, $34, $2e, $29, $0a, $ea, $e5, $d0, $ae, $9d, $95, $91, $8f, $8c, $8d, $9b
13119     B8 D5 E9 FC 
1311d     24 41 3F 44 
13121     58 54 4D 50 
13125     59 56 4B 45 | 	byte	$b8, $d5, $e9, $fc, $24, $41, $3f, $44, $58, $54, $4d, $50, $59, $56, $4b, $45
13129     3A 31 2C 25 
1312d     03 E9 E1 C7 
13131     A7 9B 95 91 
13135     8E 8C 8F A4 | 	byte	$3a, $31, $2c, $25, $03, $e9, $e1, $c7, $a7, $9b, $95, $91, $8e, $8c, $8f, $a4
13139     BA DB ED 09 
1313d     33 41 3C 47 
13141     55 52 4D 52 
13145     59 55 49 43 | 	byte	$ba, $db, $ed, $09, $33, $41, $3c, $47, $55, $52, $4d, $52, $59, $55, $49, $43
13149     38 30 2B 21 
1314d     FE E8 DA BF 
13151     A2 9A 95 90 
13155     8E 8C 91 AB | 	byte	$38, $30, $2b, $21, $fe, $e8, $da, $bf, $a2, $9a, $95, $90, $8e, $8c, $91, $ab
13159     BD E2 F5 1D 
1315d     3A 3F 3B 47 
13161     53 51 4D 56 
13165     5B 51 46 41 | 	byte	$bd, $e2, $f5, $1d, $3a, $3f, $3b, $47, $53, $51, $4d, $56, $5b, $51, $46, $41
13169     37 30 29 1E 
1316d     F6 E5 D3 B2 
13171     9D 99 93 90 
13175     8E 8D 99 B3 | 	byte	$37, $30, $29, $1e, $f6, $e5, $d3, $b2, $9d, $99, $93, $90, $8e, $8d, $99, $b3
13179     BF E8 01 2B 
1317d     3F 3C 39 49 
13181     52 4E 4D 57 
13185     5B 4E 43 3E | 	byte	$bf, $e8, $01, $2b, $3f, $3c, $39, $49, $52, $4e, $4d, $57, $5b, $4e, $43, $3e
13189     35 2F 28 17 
1318d     F2 E2 CA AB 
13191     9A 98 91 8F 
13195     8D 8F A0 B6 | 	byte	$35, $2f, $28, $17, $f2, $e2, $ca, $ab, $9a, $98, $91, $8f, $8d, $8f, $a0, $b6
13199     C4 F1 10 36 
1319d     3E 3A 38 4A 
131a1     50 4C 4F 5A 
131a5     57 49 41 3B | 	byte	$c4, $f1, $10, $36, $3e, $3a, $38, $4a, $50, $4c, $4f, $5a, $57, $49, $41, $3b
131a9     34 2E 26 12 
131ad     EB DE C4 A3 
131b1     99 95 8F 8E 
131b5     8D 91 A5 B7 | 	byte	$34, $2e, $26, $12, $eb, $de, $c4, $a3, $99, $95, $8f, $8e, $8d, $91, $a5, $b7
131b9     CA FA 1E 3A 
131bd     3C 38 39 4A 
131c1     4F 4C 52 5A 
131c5     55 48 40 3B | 	byte	$ca, $fa, $1e, $3a, $3c, $38, $39, $4a, $4f, $4c, $52, $5a, $55, $48, $40, $3b
131c9     34 2E 26 0B 
131cd     E9 D8 BC A0 
131d1     99 94 8E 8D 
131d5     8C 93 AB B5 | 	byte	$34, $2e, $26, $0b, $e9, $d8, $bc, $a0, $99, $94, $8e, $8d, $8c, $93, $ab, $b5
131d9     D6 09 2B 3A 
131dd     39 36 3A 4B 
131e1     4D 4C 54 5A 
131e5     52 45 3F 3A | 	byte	$d6, $09, $2b, $3a, $39, $36, $3a, $4b, $4d, $4c, $54, $5a, $52, $45, $3f, $3a
131e9     34 2D 25 07 
131ed     E8 D1 B4 9D 
131f1     98 92 8D 8C 
131f5     8C 95 AF B3 | 	byte	$34, $2d, $25, $07, $e8, $d1, $b4, $9d, $98, $92, $8d, $8c, $8c, $95, $af, $b3
131f9     DF 15 33 38 
131fd     36 35 3B 4C 
13201     4D 4D 57 59 
13205     4D 42 3E 39 | 	byte	$df, $15, $33, $38, $36, $35, $3b, $4c, $4d, $4d, $57, $59, $4d, $42, $3e, $39
13209     34 2C 23 01 
1320d     E4 C9 AD 9C 
13211     99 91 8D 8C 
13215     8C 9C B1 B7 | 	byte	$34, $2c, $23, $01, $e4, $c9, $ad, $9c, $99, $91, $8d, $8c, $8c, $9c, $b1, $b7
13219     F6 21 37 35 
1321d     32 31 3A 4B 
13221     4C 4E 58 57 
13225     49 3F 3D 39 | 	byte	$f6, $21, $37, $35, $32, $31, $3a, $4b, $4c, $4e, $58, $57, $49, $3f, $3d, $39
13229     34 2B 21 FD 
1322d     DE C4 A8 9C 
13231     99 91 8E 8D 
13235     8F A3 B2 BD | 	byte	$34, $2b, $21, $fd, $de, $c4, $a8, $9c, $99, $91, $8e, $8d, $8f, $a3, $b2, $bd
13239     05 2D 37 32 
1323d     2F 2E 3A 4B 
13241     4B 51 59 54 
13245     47 3F 3D 39 | 	byte	$05, $2d, $37, $32, $2f, $2e, $3a, $4b, $4b, $51, $59, $54, $47, $3f, $3d, $39
13249     33 2B 1C F5 
1324d     D9 BA A4 9C 
13251     98 90 8E 8E 
13255     91 AA B2 D2 | 	byte	$33, $2b, $1c, $f5, $d9, $ba, $a4, $9c, $98, $90, $8e, $8e, $91, $aa, $b2, $d2
13259     15 32 33 2F 
1325d     2D 2C 3C 49 
13261     4C 54 59 50 
13265     42 3E 3D 38 | 	byte	$15, $32, $33, $2f, $2d, $2c, $3c, $49, $4c, $54, $59, $50, $42, $3e, $3d, $38
13269     32 28 18 F1 
1326d     D2 B4 A0 9C 
13271     95 8E 8E 8F 
13275     96 B0 B3 E8 | 	byte	$32, $28, $18, $f1, $d2, $b4, $a0, $9c, $95, $8e, $8e, $8f, $96, $b0, $b3, $e8
13279     25 36 30 2D 
1327d     2C 2D 3E 48 
13281     4D 54 55 4C 
13285     3F 3D 3B 36 | 	byte	$25, $36, $30, $2d, $2c, $2d, $3e, $48, $4d, $54, $55, $4c, $3f, $3d, $3b, $36
13289     2E 23 11 EB 
1328d     C7 AD 9F 9B 
13291     94 8D 8F 91 
13295     9D B3 B8 FB | 	byte	$2e, $23, $11, $eb, $c7, $ad, $9f, $9b, $94, $8d, $8f, $91, $9d, $b3, $b8, $fb
13299     2F 36 2E 2B 
1329d     2A 2D 40 48 
132a1     4F 56 53 48 
132a5     3D 3C 39 36 | 	byte	$2f, $36, $2e, $2b, $2a, $2d, $40, $48, $4f, $56, $53, $48, $3d, $3c, $39, $36
132a9     2B 21 0C E3 
132ad     BE AA 9E 9B 
132b1     91 8D 91 93 
132b5     A4 B4 C2 11 | 	byte	$2b, $21, $0c, $e3, $be, $aa, $9e, $9b, $91, $8d, $91, $93, $a4, $b4, $c2, $11
132b9     36 34 2C 29 
132bd     29 2D 42 4B 
132c1     51 56 50 45 
132c5     3D 3D 3A 34 | 	byte	$36, $34, $2c, $29, $29, $2d, $42, $4b, $51, $56, $50, $45, $3d, $3d, $3a, $34
132c9     2A 1E 06 D8 
132cd     B7 A6 9D 98 
132d1     90 8E 90 93 
132d5     AA B7 D6 22 | 	byte	$2a, $1e, $06, $d8, $b7, $a6, $9d, $98, $90, $8e, $90, $93, $aa, $b7, $d6, $22
132d9     37 2F 2A 28 
132dd     27 2D 43 4E 
132e1     55 56 4D 40 
132e5     3D 3E 39 32 | 	byte	$37, $2f, $2a, $28, $27, $2d, $43, $4e, $55, $56, $4d, $40, $3d, $3e, $39, $32
132e9     27 1C FB CD 
132ed     AF A1 9B 96 
132f1     8F 8F 91 95 
132f5     B0 BA E8 2F | 	byte	$27, $1c, $fb, $cd, $af, $a1, $9b, $96, $8f, $8f, $91, $95, $b0, $ba, $e8, $2f
132f9     35 2C 29 27 
132fd     26 2D 45 51 
13301     57 55 4B 3F 
13305     3E 3E 39 31 | 	byte	$35, $2c, $29, $27, $26, $2d, $45, $51, $57, $55, $4b, $3f, $3e, $3e, $39, $31
13309     25 19 F3 C2 
1330d     AA 9E 9A 95 
13311     8F 90 91 99 
13315     B5 C2 01 34 | 	byte	$25, $19, $f3, $c2, $aa, $9e, $9a, $95, $8f, $90, $91, $99, $b5, $c2, $01, $34
13319     30 29 26 26 
1331d     25 31 47 53 
13321     58 53 47 3E 
13325     40 3F 39 2E | 	byte	$30, $29, $26, $26, $25, $31, $47, $53, $58, $53, $47, $3e, $40, $3f, $39, $2e
13329     23 16 E7 BC 
1332d     A6 9D 9A 93 
13331     8F 90 92 A2 
13335     BA CC 11 36 | 	byte	$23, $16, $e7, $bc, $a6, $9d, $9a, $93, $8f, $90, $92, $a2, $ba, $cc, $11, $36
13339     2C 25 24 23 
1333d     23 34 4A 54 
13341     56 4F 45 3E 
13345     41 40 39 2C | 	byte	$2c, $25, $24, $23, $23, $34, $4a, $54, $56, $4f, $45, $3e, $41, $40, $39, $2c
13349     20 0F DF B3 
1334d     A4 9C 99 91 
13351     8F 8F 92 A9 
13355     BF DA 21 35 | 	byte	$20, $0f, $df, $b3, $a4, $9c, $99, $91, $8f, $8f, $92, $a9, $bf, $da, $21, $35
13359     29 23 21 20 
1335d     22 37 4D 56 
13361     54 4C 42 3E 
13365     42 3F 37 29 | 	byte	$29, $23, $21, $20, $22, $37, $4d, $56, $54, $4c, $42, $3e, $42, $3f, $37, $29
13369     1D 0A D2 AE 
1336d     A3 9C 98 90 
13371     8F 90 96 B1 
13375     C8 E8 2C 32 | 	byte	$1d, $0a, $d2, $ae, $a3, $9c, $98, $90, $8f, $90, $96, $b1, $c8, $e8, $2c, $32
13379     26 22 1F 1F 
1337d     21 3B 50 56 
13381     51 47 40 3E 
13385     43 3C 34 27 | 	byte	$26, $22, $1f, $1f, $21, $3b, $50, $56, $51, $47, $40, $3e, $43, $3c, $34, $27
13389     1C 00 C9 A8 
1338d     A2 9D 98 91 
13391     90 91 9A BB 
13395     D2 FB 30 2E | 	byte	$1c, $00, $c9, $a8, $a2, $9d, $98, $91, $90, $91, $9a, $bb, $d2, $fb, $30, $2e
13399     24 21 1E 1E 
1339d     21 3F 54 57 
133a1     4E 45 3E 40 
133a5     43 3A 30 25 | 	byte	$24, $21, $1e, $1e, $21, $3f, $54, $57, $4e, $45, $3e, $40, $43, $3a, $30, $25
133a9     19 F2 B6 A4 
133ad     A1 9E 98 94 
133b1     92 91 A5 C4 
133b5     DD 0A 33 2A | 	byte	$19, $f2, $b6, $a4, $a1, $9e, $98, $94, $92, $91, $a5, $c4, $dd, $0a, $33, $2a
133b9     23 1F 1C 1C 
133bd     21 44 58 55 
133c1     4B 42 3D 42 
133c5     43 39 2E 22 | 	byte	$23, $1f, $1c, $1c, $21, $44, $58, $55, $4b, $42, $3d, $42, $43, $39, $2e, $22
133c9     11 E1 AE A4 
133cd     A2 9F 98 96 
133d1     92 92 B0 CD 
133d5     E6 1B 31 27 | 	byte	$11, $e1, $ae, $a4, $a2, $9f, $98, $96, $92, $92, $b0, $cd, $e6, $1b, $31, $27
133d9     21 1E 1B 1B 
133dd     26 4A 59 52 
133e1     49 42 3C 43 
133e5     41 38 2B 1E | 	byte	$21, $1e, $1b, $1b, $26, $4a, $59, $52, $49, $42, $3c, $43, $41, $38, $2b, $1e
133e9     06 CB AA A6 
133ed     A2 9E 97 97 
133f1     93 99 BA D8 
133f5     F0 22 2E 25 | 	byte	$06, $cb, $aa, $a6, $a2, $9e, $97, $97, $93, $99, $ba, $d8, $f0, $22, $2e, $25
133f9     20 1C 1A 1A 
133fd     2A 51 59 50 
13401     47 40 3D 45 
13405     40 34 29 1A | 	byte	$20, $1c, $1a, $1a, $2a, $51, $59, $50, $47, $40, $3d, $45, $40, $34, $29, $1a
13409     F3 C0 A9 A7 
1340d     A2 9D 99 98 
13411     93 A0 C7 DF 
13415     F8 27 2B 22 | 	byte	$f3, $c0, $a9, $a7, $a2, $9d, $99, $98, $93, $a0, $c7, $df, $f8, $27, $2b, $22
13419     1E 1A 1A 19 
1341d     33 55 57 4E 
13421     46 3F 3D 45 
13425     3E 32 26 13 | 	byte	$1e, $1a, $1a, $19, $33, $55, $57, $4e, $46, $3f, $3d, $45, $3e, $32, $26, $13
13429     E4 B4 A9 A7 
1342d     A3 9E 9A 98 
13431     95 AC D0 E6 
13435     00 2B 29 1F | 	byte	$e4, $b4, $a9, $a7, $a3, $9e, $9a, $98, $95, $ac, $d0, $e6, $00, $2b, $29, $1f
13439     1A 18 18 1A 
1343d     3A 59 55 4B 
13441     44 3E 3F 45 
13445     3A 2E 22 06 | 	byte	$1a, $18, $18, $1a, $3a, $59, $55, $4b, $44, $3e, $3f, $45, $3a, $2e, $22, $06
13449     D2 B0 A9 A7 
1344d     A3 9E 9B 97 
13451     97 B4 DA EB 
13455     0C 2C 25 1D | 	byte	$d2, $b0, $a9, $a7, $a3, $9e, $9b, $97, $97, $b4, $da, $eb, $0c, $2c, $25, $1d
13459     19 18 18 21 
1345d     47 5B 53 4A 
13461     44 3E 41 43 
13465     37 2B 1D FA | 	byte	$19, $18, $18, $21, $47, $5b, $53, $4a, $44, $3e, $41, $43, $37, $2b, $1d, $fa
13469     C5 AE A9 A6 
1346d     A2 9E 9D 96 
13471     98 BE E1 F2 
13475     12 2C 24 1C | 	byte	$c5, $ae, $a9, $a6, $a2, $9e, $9d, $96, $98, $be, $e1, $f2, $12, $2c, $24, $1c
13479     19 17 17 2B 
1347d     55 5B 50 47 
13481     42 3D 44 40 
13485     33 28 12 EB | 	byte	$19, $17, $17, $2b, $55, $5b, $50, $47, $42, $3d, $44, $40, $33, $28, $12, $eb
13489     BB AC AB A6 
1348d     A0 9F 9D 96 
13491     9B C7 EA F9 
13495     1C 2A 21 1B | 	byte	$bb, $ac, $ab, $a6, $a0, $9f, $9d, $96, $9b, $c7, $ea, $f9, $1c, $2a, $21, $1b
13499     19 17 1A 38 
1349d     5C 57 4E 46 
134a1     40 3D 44 3B 
134a5     30 21 08 D6 | 	byte	$19, $17, $1a, $38, $5c, $57, $4e, $46, $40, $3d, $44, $3b, $30, $21, $08, $d6
134a9     B6 AB AA A5 
134ad     A0 9F 9D 95 
134b1     A1 D2 F0 FE 
134b5     25 29 1F 19 | 	byte	$b6, $ab, $aa, $a5, $a0, $9f, $9d, $95, $a1, $d2, $f0, $fe, $25, $29, $1f, $19
134b9     1A 17 21 48 
134bd     5E 55 4C 45 
134c1     40 3E 44 38 
134c5     2D 19 F9 CC | 	byte	$1a, $17, $21, $48, $5e, $55, $4c, $45, $40, $3e, $44, $38, $2d, $19, $f9, $cc
134c9     B3 AB A9 A2 
134cd     A0 A0 9B 95 
134d1     A8 DA F6 02 
134d5     2A 28 1E 19 | 	byte	$b3, $ab, $a9, $a2, $a0, $a0, $9b, $95, $a8, $da, $f6, $02, $2a, $28, $1e, $19
134d9     19 1A 2E 52 
134dd     5D 53 4C 45 
134e1     40 3F 42 36 
134e5     27 11 ED BF | 	byte	$19, $1a, $2e, $52, $5d, $53, $4c, $45, $40, $3f, $42, $36, $27, $11, $ed, $bf
134e9     B1 AB A7 A1 
134ed     A0 A0 99 95 
134f1     B0 E8 F8 09 
134f5     2C 26 1C 1A | 	byte	$b1, $ab, $a7, $a1, $a0, $a0, $99, $95, $b0, $e8, $f8, $09, $2c, $26, $1c, $1a
134f9     1A 1F 3A 5C 
134fd     5B 50 49 45 
13501     40 40 3F 31 
13505     21 05 E1 BA | 	byte	$1a, $1f, $3a, $5c, $5b, $50, $49, $45, $40, $40, $3f, $31, $21, $05, $e1, $ba
13509     B0 AC A5 A1 
1350d     A1 9F 97 98 
13511     B9 F0 F8 11 
13515     2C 23 1B 1A | 	byte	$b0, $ac, $a5, $a1, $a1, $9f, $97, $98, $b9, $f0, $f8, $11, $2c, $23, $1b, $1a
13519     1A 27 48 5F 
1351d     57 4E 49 45 
13521     40 41 3C 2D 
13525     18 FA D3 B6 | 	byte	$1a, $27, $48, $5f, $57, $4e, $49, $45, $40, $41, $3c, $2d, $18, $fa, $d3, $b6
13529     AF AB A4 A0 
1352d     A1 9D 94 9D 
13531     C8 F7 F8 19 
13535     2A 20 1A 1A | 	byte	$af, $ab, $a4, $a0, $a1, $9d, $94, $9d, $c8, $f7, $f8, $19, $2a, $20, $1a, $1a
13539     1D 2F 54 5E 
1353d     55 4D 48 45 
13541     40 42 39 29 
13545     10 F3 C9 B4 | 	byte	$1d, $2f, $54, $5e, $55, $4d, $48, $45, $40, $42, $39, $29, $10, $f3, $c9, $b4
13549     AF AA A3 A0 
1354d     A1 9B 93 A3 
13551     D3 FA FA 21 
13555     27 1D 1A 1B | 	byte	$af, $aa, $a3, $a0, $a1, $9b, $93, $a3, $d3, $fa, $fa, $21, $27, $1d, $1a, $1b
13559     23 39 59 5C 
1355d     52 4B 47 43 
13561     3F 41 36 21 
13565     07 EA BF B5 | 	byte	$23, $39, $59, $5c, $52, $4b, $47, $43, $3f, $41, $36, $21, $07, $ea, $bf, $b5
13569     B0 AA A2 A1 
1356d     A0 98 94 AD 
13571     E2 FB FE 26 
13575     23 1C 1A 1E | 	byte	$b0, $aa, $a2, $a1, $a0, $98, $94, $ad, $e2, $fb, $fe, $26, $23, $1c, $1a, $1e
13579     2A 44 5C 59 
1357d     4F 4B 46 42 
13581     3E 3E 31 19 
13585     FF E0 BB B6 | 	byte	$2a, $44, $5c, $59, $4f, $4b, $46, $42, $3e, $3e, $31, $19, $ff, $e0, $bb, $b6
13589     B0 A9 A2 A0 
1358d     9F 96 99 B8 
13591     EE FA 04 28 
13595     21 1C 1B 23 | 	byte	$b0, $a9, $a2, $a0, $9f, $96, $99, $b8, $ee, $fa, $04, $28, $21, $1c, $1b, $23
13599     32 4D 5C 55 
1359d     4D 4A 45 3F 
135a1     3C 3A 26 0E 
135a5     F8 D2 B9 B7 | 	byte	$32, $4d, $5c, $55, $4d, $4a, $45, $3f, $3c, $3a, $26, $0e, $f8, $d2, $b9, $b7
135a9     B0 A8 A2 A0 
135ad     9E 95 A1 C9 
135b1     F4 F9 0B 28 
135b5     1F 1C 1E 2A | 	byte	$b0, $a8, $a2, $a0, $9e, $95, $a1, $c9, $f4, $f9, $0b, $28, $1f, $1c, $1e, $2a
135b9     39 56 5C 53 
135bd     4C 49 44 3D 
135c1     3B 34 1D 04 
135c5     F1 C9 B9 B6 | 	byte	$39, $56, $5c, $53, $4c, $49, $44, $3d, $3b, $34, $1d, $04, $f1, $c9, $b9, $b6
135c9     AF A6 A2 A0 
135cd     9B 95 AC D2 
135d1     F9 F9 16 26 
135d5     20 1E 23 30 | 	byte	$af, $a6, $a2, $a0, $9b, $95, $ac, $d2, $f9, $f9, $16, $26, $20, $1e, $23, $30
135d9     42 5A 5A 51 
135dd     4A 47 44 3D 
135e1     39 2C 11 FE 
135e5     EA C3 B9 B5 | 	byte	$42, $5a, $5a, $51, $4a, $47, $44, $3d, $39, $2c, $11, $fe, $ea, $c3, $b9, $b5
135e9     AE A6 A3 A0 
135ed     98 97 B6 DC 
135f1     F9 F8 1D 25 
135f5     20 1E 28 35 | 	byte	$ae, $a6, $a3, $a0, $98, $97, $b6, $dc, $f9, $f8, $1d, $25, $20, $1e, $28, $35
135f9     48 5C 58 4F 
135fd     4A 46 43 3A 
13601     36 22 0B F9 
13605     DF BE BA B3 | 	byte	$48, $5c, $58, $4f, $4a, $46, $43, $3a, $36, $22, $0b, $f9, $df, $be, $ba, $b3
13609     AB A4 A2 9F 
1360d     96 9E C1 E3 
13611     F8 FC 23 23 
13615     20 21 2F 39 | 	byte	$ab, $a4, $a2, $9f, $96, $9e, $c1, $e3, $f8, $fc, $23, $23, $20, $21, $2f, $39
13619     51 5C 57 4D 
1361d     4B 46 42 3A 
13621     31 1A 03 F7 
13625     D5 BC B9 B2 | 	byte	$51, $5c, $57, $4d, $4b, $46, $42, $3a, $31, $1a, $03, $f7, $d5, $bc, $b9, $b2
13629     A9 A3 A1 9C 
1362d     95 A6 CB E6 
13631     F7 01 26 23 
13635     20 27 35 3D | 	byte	$a9, $a3, $a1, $9c, $95, $a6, $cb, $e6, $f7, $01, $26, $23, $20, $27, $35, $3d
13639     57 5C 55 4C 
1363d     4B 46 41 37 
13641     2A 0F 00 F2 
13645     CB BB B9 B2 | 	byte	$57, $5c, $55, $4c, $4b, $46, $41, $37, $2a, $0f, $00, $f2, $cb, $bb, $b9, $b2
13649     A8 A2 9F 99 
1364d     97 B4 D2 E9 
13651     F5 08 27 22 
13655     24 2E 38 43 | 	byte	$a8, $a2, $9f, $99, $97, $b4, $d2, $e9, $f5, $08, $27, $22, $24, $2e, $38, $43
13659     59 5A 51 4C 
1365d     4A 46 3D 33 
13661     1F 07 FD EB 
13665     C5 BC B8 B0 | 	byte	$59, $5a, $51, $4c, $4a, $46, $3d, $33, $1f, $07, $fd, $eb, $c5, $bc, $b8, $b0
13669     A7 A1 9E 97 
1366d     9E C0 D9 E8 
13671     F4 10 27 22 
13675     28 34 39 4A | 	byte	$a7, $a1, $9e, $97, $9e, $c0, $d9, $e8, $f4, $10, $27, $22, $28, $34, $39, $4a
13679     5B 58 4F 4C 
1367d     49 45 3B 2C 
13681     17 04 FB E4 
13685     C3 BD B6 AD | 	byte	$5b, $58, $4f, $4c, $49, $45, $3b, $2c, $17, $04, $fb, $e4, $c3, $bd, $b6, $ad
13689     A5 A1 9D 96 
1368d     A8 CA DA E8 
13691     F6 1B 25 24 
13695     2E 38 3A 4F | 	byte	$a5, $a1, $9d, $96, $a8, $ca, $da, $e8, $f6, $1b, $25, $24, $2e, $38, $3a, $4f
13699     5B 56 4E 4D 
1369d     49 43 35 23 
136a1     0C 03 FA DD 
136a5     C1 BD B5 AB | 	byte	$5b, $56, $4e, $4d, $49, $43, $35, $23, $0c, $03, $fa, $dd, $c1, $bd, $b5, $ab
136a9     A3 A0 9A 97 
136ad     B3 D3 DA EB 
136b1     FB 20 24 28 
136b5     35 39 3C 56 | 	byte	$a3, $a0, $9a, $97, $b3, $d3, $da, $eb, $fb, $20, $24, $28, $35, $39, $3c, $56
136b9     59 53 4C 4C 
136bd     47 40 2F 1C 
136c1     06 01 F6 D3 
136c5     C0 BC B3 A9 | 	byte	$59, $53, $4c, $4c, $47, $40, $2f, $1c, $06, $01, $f6, $d3, $c0, $bc, $b3, $a9
136c9     A3 9F 98 9E 
136cd     BD D8 DA EE 
136d1     02 25 25 2F 
136d5     39 39 41 58 | 	byte	$a3, $9f, $98, $9e, $bd, $d8, $da, $ee, $02, $25, $25, $2f, $39, $39, $41, $58
136d9     56 51 4B 4B 
136dd     46 3A 26 10 
136e1     03 FF ED CD 
136e5     C0 BB B1 A7 | 	byte	$56, $51, $4b, $4b, $46, $3a, $26, $10, $03, $ff, $ed, $cd, $c0, $bb, $b1, $a7
136e9     A2 9E 97 A5 
136ed     C9 D8 DB F2 
136f1     09 27 28 35 
136f5     3C 39 4A 59 | 	byte	$a2, $9e, $97, $a5, $c9, $d8, $db, $f2, $09, $27, $28, $35, $3c, $39, $4a, $59
136f9     55 50 4B 4B 
136fd     45 34 1F 0A 
13701     02 FC E4 CA 
13705     C0 BA AE A5 | 	byte	$55, $50, $4b, $4b, $45, $34, $1f, $0a, $02, $fc, $e4, $ca, $c0, $ba, $ae, $a5
13709     A0 9C 98 AF 
1370d     D1 D6 DB F3 
13711     11 2A 2F 3B 
13715     3C 3A 51 58 | 	byte	$a0, $9c, $98, $af, $d1, $d6, $db, $f3, $11, $2a, $2f, $3b, $3c, $3a, $51, $58
13719     54 4F 4C 4B 
1371d     42 2C 16 05 
13721     02 F9 DB C8 
13725     C0 B8 AD A3 | 	byte	$54, $4f, $4c, $4b, $42, $2c, $16, $05, $02, $f9, $db, $c8, $c0, $b8, $ad, $a3
13729     9E 98 9D BC 
1372d     D7 D3 DF F6 
13731     1B 2C 36 3F 
13735     3A 3F 57 57 | 	byte	$9e, $98, $9d, $bc, $d7, $d3, $df, $f6, $1b, $2c, $36, $3f, $3a, $3f, $57, $57
13739     53 4D 4C 49 
1373d     3C 25 0E 03 
13741     01 F2 D3 C5 
13745     BF B5 AC A3 | 	byte	$53, $4d, $4c, $49, $3c, $25, $0e, $03, $01, $f2, $d3, $c5, $bf, $b5, $ac, $a3
13749     9D 96 A5 C7 
1374d     D8 D2 E1 F9 
13751     21 2F 3C 40 
13755     39 46 59 56 | 	byte	$9d, $96, $a5, $c7, $d8, $d2, $e1, $f9, $21, $2f, $3c, $40, $39, $46, $59, $56
13759     52 4D 4C 46 
1375d     35 19 0A 03 
13761     FE EC CF C5 
13765     BD B3 AB A0 | 	byte	$52, $4d, $4c, $46, $35, $19, $0a, $03, $fe, $ec, $cf, $c5, $bd, $b3, $ab, $a0
13769     9C 97 B2 CF 
1376d     D7 D2 E4 FE 
13771     26 36 41 3F 
13775     3A 4C 59 54 | 	byte	$9c, $97, $b2, $cf, $d7, $d2, $e4, $fe, $26, $36, $41, $3f, $3a, $4c, $59, $54
13779     51 4C 4C 43 
1377d     2D 12 07 02 
13781     FC E1 CE C4 
13785     BD B2 A6 9F | 	byte	$51, $4c, $4c, $43, $2d, $12, $07, $02, $fc, $e1, $ce, $c4, $bd, $b2, $a6, $9f
13789     99 9B BB D6 
1378d     D5 D3 E5 04 
13791     31 3C 45 3E 
13795     3D 54 59 53 | 	byte	$99, $9b, $bb, $d6, $d5, $d3, $e5, $04, $31, $3c, $45, $3e, $3d, $54, $59, $53
13799     50 4D 4B 3E 
1379d     21 0D 06 01 
137a1     F8 DB CC C3 
137a5     BA B0 A3 9D | 	byte	$50, $4d, $4b, $3e, $21, $0d, $06, $01, $f8, $db, $cc, $c3, $ba, $b0, $a3, $9d
137a9     97 A5 C6 D8 
137ad     D4 D4 EA 0C 
137b1     37 41 44 3D 
137b5     43 57 56 51 | 	byte	$97, $a5, $c6, $d8, $d4, $d4, $ea, $0c, $37, $41, $44, $3d, $43, $57, $56, $51
137b9     4E 4C 48 34 
137bd     16 09 04 FF 
137c1     F1 D5 CB C2 
137c5     B9 AE A0 9B | 	byte	$4e, $4c, $48, $34, $16, $09, $04, $ff, $f1, $d5, $cb, $c2, $b9, $ae, $a0, $9b
137c9     97 AD D0 D8 
137cd     D3 D4 ED 19 
137d1     3E 46 43 3C 
137d5     4A 59 54 50 | 	byte	$97, $ad, $d0, $d8, $d3, $d4, $ed, $19, $3e, $46, $43, $3c, $4a, $59, $54, $50
137d9     4D 4C 44 28 
137dd     0F 07 03 FE 
137e1     EA D3 CA C2 
137e5     B7 AC 9F 99 | 	byte	$4d, $4c, $44, $28, $0f, $07, $03, $fe, $ea, $d3, $ca, $c2, $b7, $ac, $9f, $99
137e9     9C BA D7 D7 
137ed     D3 D5 F0 24 
137f1     43 46 41 3D 
137f5     51 59 52 50 | 	byte	$9c, $ba, $d7, $d7, $d3, $d5, $f0, $24, $43, $46, $41, $3d, $51, $59, $52, $50
137f9     4D 4C 3D 1F 
137fd     0A 06 00 FC 
13801     E1 D1 C9 C1 
13805     B5 A7 9C 98 | 	byte	$4d, $4c, $3d, $1f, $0a, $06, $00, $fc, $e1, $d1, $c9, $c1, $b5, $a7, $9c, $98
13809     A2 C7 D8 D6 
1380d     D1 D6 F9 34 
13811     46 45 3E 40 
13815     55 58 51 50 | 	byte	$a2, $c7, $d8, $d6, $d1, $d6, $f9, $34, $46, $45, $3e, $40, $55, $58, $51, $50
13819     4D 4A 31 17 
1381d     08 05 FF F6 
13821     DC D0 C7 BF 
13825     B1 A5 9A 99 | 	byte	$4d, $4a, $31, $17, $08, $05, $ff, $f6, $dc, $d0, $c7, $bf, $b1, $a5, $9a, $99
13829     AD D0 D8 D3 
1382d     D0 D9 07 3F 
13831     48 44 3D 46 
13835     59 56 50 50 | 	byte	$ad, $d0, $d8, $d3, $d0, $d9, $07, $3f, $48, $44, $3d, $46, $59, $56, $50, $50
13839     4D 45 29 10 
1383d     08 04 FE F1 
13841     D6 CF C6 BC 
13845     AE A0 98 9C | 	byte	$4d, $45, $29, $10, $08, $04, $fe, $f1, $d6, $cf, $c6, $bc, $ae, $a0, $98, $9c
13849     BA D6 D8 D3 
1384d     D0 DE 12 49 
13851     48 42 3D 4B 
13855     59 54 4F 4F | 	byte	$ba, $d6, $d8, $d3, $d0, $de, $12, $49, $48, $42, $3d, $4b, $59, $54, $4f, $4f
13859     4B 3A 21 0E 
1385d     09 04 FE E7 
13861     D4 CF C6 BA 
13865     AD 9E 98 A4 | 	byte	$4b, $3a, $21, $0e, $09, $04, $fe, $e7, $d4, $cf, $c6, $ba, $ad, $9e, $98, $a4
13869     C3 DA D7 D2 
1386d     CF E3 2A 4C 
13871     45 40 3E 52 
13875     58 51 4F 4E | 	byte	$c3, $da, $d7, $d2, $cf, $e3, $2a, $4c, $45, $40, $3e, $52, $58, $51, $4f, $4e
13879     46 30 18 0C 
1387d     09 03 FD E1 
13881     D3 CF C5 B8 
13885     A9 9A 99 AD | 	byte	$46, $30, $18, $0c, $09, $03, $fd, $e1, $d3, $cf, $c5, $b8, $a9, $9a, $99, $ad
13889     CD DA D5 D1 
1388d     D0 EB 36 4B 
13891     44 3E 40 55 
13895     56 50 4F 4C | 	byte	$cd, $da, $d5, $d1, $d0, $eb, $36, $4b, $44, $3e, $40, $55, $56, $50, $4f, $4c
13899     3F 25 14 0B 
1389d     08 02 F8 DB 
138a1     D2 CD C3 B3 
138a5     A7 98 9F B6 | 	byte	$3f, $25, $14, $0b, $08, $02, $f8, $db, $d2, $cd, $c3, $b3, $a7, $98, $9f, $b6
138a9     D5 DA D4 D0 
138ad     D3 FD 40 49 
138b1     42 3D 47 57 
138b5     55 4E 4F 48 | 	byte	$d5, $da, $d4, $d0, $d3, $fd, $40, $49, $42, $3d, $47, $57, $55, $4e, $4f, $48
138b9     35 1D 11 09 
138bd     08 01 F4 D6 
138c1     D3 CB C0 B1 
138c5     A4 97 A4 C3 | 	byte	$35, $1d, $11, $09, $08, $01, $f4, $d6, $d3, $cb, $c0, $b1, $a4, $97, $a4, $c3
138c9     D9 D9 D3 D0 
138cd     DA 09 4A 46 
138d1     40 3D 4D 57 
138d5     53 4E 4E 41 | 	byte	$d9, $d9, $d3, $d0, $da, $09, $4a, $46, $40, $3d, $4d, $57, $53, $4e, $4e, $41
138d9     29 17 0E 08 
138dd     06 00 EB D5 
138e1     D2 CB BD AF 
138e5     A1 99 AD CC | 	byte	$29, $17, $0e, $08, $06, $00, $eb, $d5, $d2, $cb, $bd, $af, $a1, $99, $ad, $cc
138e9     DB D8 D1 D1 
138ed     E3 1B 4C 44 
138f1     3F 3F 53 56 
138f5     51 4E 4D 3A | 	byte	$db, $d8, $d1, $d1, $e3, $1b, $4c, $44, $3f, $3f, $53, $56, $51, $4e, $4d, $3a
138f9     22 16 0D 08 
138fd     05 FD E5 D4 
13901     D2 C8 B9 AD 
13905     9C 9D B7 D3 | 	byte	$22, $16, $0d, $08, $05, $fd, $e5, $d4, $d2, $c8, $b9, $ad, $9c, $9d, $b7, $d3
13909     DD D7 D1 D6 
1390d     EC 26 4B 42 
13911     3E 44 57 56 
13915     50 4F 48 31 | 	byte	$dd, $d7, $d1, $d6, $ec, $26, $4b, $42, $3e, $44, $57, $56, $50, $4f, $48, $31
13919     1D 15 0B 08 
1391d     02 F9 DC D4 
13921     D0 C6 B6 A8 
13925     99 A4 C2 D6 | 	byte	$1d, $15, $0b, $08, $02, $f9, $dc, $d4, $d0, $c6, $b6, $a8, $99, $a4, $c2, $d6
13929     DC D6 D2 DE 
1392d     F3 35 49 40 
13931     3E 4A 58 56 
13935     4F 4F 43 27 | 	byte	$dc, $d6, $d2, $de, $f3, $35, $49, $40, $3e, $4a, $58, $56, $4f, $4f, $43, $27
13939     1B 15 0A 07 
1393d     01 F4 D9 D3 
13941     CE C3 B4 A4 
13945     98 AB CA DA | 	byte	$1b, $15, $0a, $07, $01, $f4, $d9, $d3, $ce, $c3, $b4, $a4, $98, $ab, $ca, $da
13949     DA D3 D5 E4 
1394d     F9 3C 46 3F 
13951     3E 52 58 55 
13955     4F 4D 37 21 | 	byte	$da, $d3, $d5, $e4, $f9, $3c, $46, $3f, $3e, $52, $58, $55, $4f, $4d, $37, $21
13959     19 13 09 06 
1395d     00 EC D6 D3 
13961     CD C0 B0 9F 
13965     9B B7 CF DB | 	byte	$19, $13, $09, $06, $00, $ec, $d6, $d3, $cd, $c0, $b0, $9f, $9b, $b7, $cf, $db
13969     D8 D2 DA E8 
1396d     04 40 43 3D 
13971     41 56 57 53 
13975     4F 49 2F 1D | 	byte	$d8, $d2, $da, $e8, $04, $40, $43, $3d, $41, $56, $57, $53, $4f, $49, $2f, $1d
13979     19 12 09 06 
1397d     FC E4 D5 D2 
13981     CC BC AD 9C 
13985     A1 BE D4 DB | 	byte	$19, $12, $09, $06, $fc, $e4, $d5, $d2, $cc, $bc, $ad, $9c, $a1, $be, $d4, $db
13989     D6 D4 E0 EC 
1398d     0A 45 40 3C 
13991     48 58 56 51 
13995     4D 40 26 1D | 	byte	$d6, $d4, $e0, $ec, $0a, $45, $40, $3c, $48, $58, $56, $51, $4d, $40, $26, $1d
13999     19 10 09 05 
1399d     FA DF D5 D2 
139a1     C9 B9 A7 9B 
139a5     A9 C6 D6 DB | 	byte	$19, $10, $09, $05, $fa, $df, $d5, $d2, $c9, $b9, $a7, $9b, $a9, $c6, $d6, $db
139a9     D5 D8 E6 EC 
139ad     18 45 3E 3C 
139b1     4E 58 56 50 
139b5     4A 38 22 1C | 	byte	$d5, $d8, $e6, $ec, $18, $45, $3e, $3c, $4e, $58, $56, $50, $4a, $38, $22, $1c
139b9     18 0E 08 05 
139bd     F3 DB D5 D0 
139c1     C7 B5 A6 9E 
139c5     B3 CD DA DA | 	byte	$18, $0e, $08, $05, $f3, $db, $d5, $d0, $c7, $b5, $a6, $9e, $b3, $cd, $da, $da
139c9     D6 DE EA EC 
139cd     21 43 3C 3F 
139d1     53 57 54 4E 
139d5     43 2E 1F 1C | 	byte	$d6, $de, $ea, $ec, $21, $43, $3c, $3f, $53, $57, $54, $4e, $43, $2e, $1f, $1c
139d9     17 0B 08 04 
139dd     EE D9 D6 D0 
139e1     C3 B1 A2 A5 
139e5     BD D3 DB D8 | 	byte	$17, $0b, $08, $04, $ee, $d9, $d6, $d0, $c3, $b1, $a2, $a5, $bd, $d3, $db, $d8
139e9     DA E5 EB EF 
139ed     2A 40 3B 43 
139f1     57 55 52 4B 
139f5     3B 25 1E 1B | 	byte	$da, $e5, $eb, $ef, $2a, $40, $3b, $43, $57, $55, $52, $4b, $3b, $25, $1e, $1b
139f9     15 0A 09 02 
139fd     E4 D9 D6 CD 
13a01     C0 AD A2 AB 
13a05     C6 D5 DB D8 | 	byte	$15, $0a, $09, $02, $e4, $d9, $d6, $cd, $c0, $ad, $a2, $ab, $c6, $d5, $db, $d8
13a09     E0 EB EA F2 
13a0d     32 3E 3A 48 
13a11     5A 55 51 44 
13a15     33 22 1F 1A | 	byte	$e0, $eb, $ea, $f2, $32, $3e, $3a, $48, $5a, $55, $51, $44, $33, $22, $1f, $1a
13a19     12 09 09 FE 
13a1d     E0 D9 D6 CB 
13a21     BD A9 A5 B3 
13a25     CB D7 DB DB | 	byte	$12, $09, $09, $fe, $e0, $d9, $d6, $cb, $bd, $a9, $a5, $b3, $cb, $d7, $db, $db
13a29     E6 ED E9 F7 
13a2d     3A 3C 3B 51 
13a31     59 53 4F 3D 
13a35     2D 21 1E 18 | 	byte	$e6, $ed, $e9, $f7, $3a, $3c, $3b, $51, $59, $53, $4f, $3d, $2d, $21, $1e, $18
13a39     0F 09 0A F4 
13a3d     DD D9 D4 C8 
13a41     B8 A6 A9 BD 
13a45     CF DA DA E1 | 	byte	$0f, $09, $0a, $f4, $dd, $d9, $d4, $c8, $b8, $a6, $a9, $bd, $cf, $da, $da, $e1
13a49     ED ED E7 05 
13a4d     3C 3B 3C 56 
13a51     57 52 49 34 
13a55     27 21 1E 18 | 	byte	$ed, $ed, $e7, $05, $3c, $3b, $3c, $56, $57, $52, $49, $34, $27, $21, $1e, $18
13a59     0C 0A 09 EC 
13a5d     DB D8 D2 C4 
13a61     B2 A7 B0 C3 
13a65     D1 DA DB E8 | 	byte	$0c, $0a, $09, $ec, $db, $d8, $d2, $c4, $b2, $a7, $b0, $c3, $d1, $da, $db, $e8
13a69     F0 EB E5 09 
13a6d     3D 39 43 59 
13a71     56 51 40 2E 
13a75     25 21 1D 15 | 	byte	$f0, $eb, $e5, $09, $3d, $39, $43, $59, $56, $51, $40, $2e, $25, $21, $1d, $15
13a79     0C 0C 07 E5 
13a7d     DB D9 D0 C2 
13a81     AE AB B7 C6 
13a85     D5 DA DF EE | 	byte	$0c, $0c, $07, $e5, $db, $d9, $d0, $c2, $ae, $ab, $b7, $c6, $d5, $da, $df, $ee
13a89     EF E9 E4 19 
13a8d     3B 38 47 5B 
13a91     55 4D 39 29 
13a95     24 21 1C 13 | 	byte	$ef, $e9, $e4, $19, $3b, $38, $47, $5b, $55, $4d, $39, $29, $24, $21, $1c, $13
13a99     0C 0E FE E0 
13a9d     DB D9 CD BD 
13aa1     AC B1 BE CA 
13aa5     D6 DB E6 F2 | 	byte	$0c, $0e, $fe, $e0, $db, $d9, $cd, $bd, $ac, $b1, $be, $ca, $d6, $db, $e6, $f2
13aa9     EE E6 E5 23 
13aad     3A 38 50 5B 
13ab1     53 48 30 26 
13ab5     24 21 19 13 | 	byte	$ee, $e6, $e5, $23, $3a, $38, $50, $5b, $53, $48, $30, $26, $24, $21, $19, $13
13ab9     0D 0F F5 DE 
13abd     DB D7 C9 B8 
13ac1     AC B8 C4 CD 
13ac5     D9 DF ED F3 | 	byte	$0d, $0f, $f5, $de, $db, $d7, $c9, $b8, $ac, $b8, $c4, $cd, $d9, $df, $ed, $f3
13ac9     EB E2 E8 27 
13acd     37 3B 57 5A 
13ad1     50 3E 29 26 
13ad5     24 1F 18 12 | 	byte	$eb, $e2, $e8, $27, $37, $3b, $57, $5a, $50, $3e, $29, $26, $24, $1f, $18, $12
13ad9     0F 0F EE DC 
13add     DC D5 C3 B4 
13ae1     B1 BF C7 CF 
13ae5     DB E6 F2 F1 | 	byte	$0f, $0f, $ee, $dc, $dc, $d5, $c3, $b4, $b1, $bf, $c7, $cf, $db, $e6, $f2, $f1
13ae9     E8 E0 F1 2C 
13aed     35 40 5A 58 
13af1     4B 36 26 26 
13af5     23 1E 17 12 | 	byte	$e8, $e0, $f1, $2c, $35, $40, $5a, $58, $4b, $36, $26, $26, $23, $1e, $17, $12
13af9     11 09 E7 DD 
13afd     DB D1 C0 B2 
13b01     B6 C5 C9 D4 
13b05     DF EC F5 EF | 	byte	$11, $09, $e7, $dd, $db, $d1, $c0, $b2, $b6, $c5, $c9, $d4, $df, $ec, $f5, $ef
13b09     E6 DE F8 2F 
13b0d     34 48 5C 55 
13b11     43 2F 26 26 
13b15     22 1C 16 12 | 	byte	$e6, $de, $f8, $2f, $34, $48, $5c, $55, $43, $2f, $26, $26, $22, $1c, $16, $12
13b19     12 03 E1 DE 
13b1d     DB CC BC B2 
13b21     C0 C8 CA D7 
13b25     E6 F2 F5 EB | 	byte	$12, $03, $e1, $de, $db, $cc, $bc, $b2, $c0, $c8, $ca, $d7, $e6, $f2, $f5, $eb
13b29     E3 DB 04 2F 
13b2d     35 4F 5C 50 
13b31     3D 29 26 26 
13b35     21 1B 16 12 | 	byte	$e3, $db, $04, $2f, $35, $4f, $5c, $50, $3d, $29, $26, $26, $21, $1b, $16, $12
13b39     12 F7 E0 DE 
13b3d     D8 C7 B7 B5 
13b41     C5 C9 CC DD 
13b45     ED F6 F2 E8 | 	byte	$12, $f7, $e0, $de, $d8, $c7, $b7, $b5, $c5, $c9, $cc, $dd, $ed, $f6, $f2, $e8
13b49     DF DD 0A 2F 
13b4d     39 56 5B 4A 
13b51     35 28 27 26 
13b55     21 19 17 13 | 	byte	$df, $dd, $0a, $2f, $39, $56, $5b, $4a, $35, $28, $27, $26, $21, $19, $17, $13
13b59     10 F0 E0 DE 
13b5d     D5 C3 B5 BA 
13b61     CA C8 D0 E2 
13b65     F3 F6 EF E5 | 	byte	$10, $f0, $e0, $de, $d5, $c3, $b5, $ba, $ca, $c8, $d0, $e2, $f3, $f6, $ef, $e5
13b69     DC DD 13 2E 
13b6d     42 58 57 42 
13b71     2F 28 28 25 
13b75     20 1A 17 14 | 	byte	$dc, $dd, $13, $2e, $42, $58, $57, $42, $2f, $28, $28, $25, $20, $1a, $17, $14
13b79     0B E8 E0 DE 
13b7d     D2 BE B5 C1 
13b81     CD C9 D6 EA 
13b85     F7 F5 EC E3 | 	byte	$0b, $e8, $e0, $de, $d2, $be, $b5, $c1, $cd, $c9, $d6, $ea, $f7, $f5, $ec, $e3
13b89     DA E5 16 30 
13b8d     4A 5A 50 3A 
13b91     2C 29 29 24 
13b95     1F 1B 18 15 | 	byte	$da, $e5, $16, $30, $4a, $5a, $50, $3a, $2c, $29, $29, $24, $1f, $1b, $18, $15
13b99     02 E3 E1 DD 
13b9d     CD BA B9 C8 
13ba1     CC CC DE F2 
13ba5     F8 F2 E9 DF | 	byte	$02, $e3, $e1, $dd, $cd, $ba, $b9, $c8, $cc, $cc, $de, $f2, $f8, $f2, $e9, $df
13ba9     D8 E8 1C 32 
13bad     51 59 48 31 
13bb1     2A 29 28 23 
13bb5     1E 1C 18 14 | 	byte	$d8, $e8, $1c, $32, $51, $59, $48, $31, $2a, $29, $28, $23, $1e, $1c, $18, $14
13bb9     FB E2 E1 DA 
13bbd     C9 B9 BE CD 
13bc1     CB D0 E6 F8 
13bc5     F7 EE E5 DD | 	byte	$fb, $e2, $e1, $da, $c9, $b9, $be, $cd, $cb, $d0, $e6, $f8, $f7, $ee, $e5, $dd
13bc9     D6 EF 1D 3B 
13bcd     56 55 40 2E 
13bd1     2A 2A 27 22 
13bd5     1E 1D 19 13 | 	byte	$d6, $ef, $1d, $3b, $56, $55, $40, $2e, $2a, $2a, $27, $22, $1e, $1d, $19, $13
13bd9     F3 E2 E0 D8 
13bdd     C4 BA C5 D0 
13be1     CB D7 EE FB 
13be5     F4 EC E3 DB | 	byte	$f3, $e2, $e0, $d8, $c4, $ba, $c5, $d0, $cb, $d7, $ee, $fb, $f4, $ec, $e3, $db
13be9     D5 F9 22 43 
13bed     57 4E 37 2C 
13bf1     2A 29 25 21 
13bf5     1E 1E 18 0E | 	byte	$d5, $f9, $22, $43, $57, $4e, $37, $2c, $2a, $29, $25, $21, $1e, $1e, $18, $0e
13bf9     EA E3 E0 D3 
13bfd     C0 BE CC D1 
13c01     CE E1 F7 FC 
13c05     F1 E9 E1 D8 | 	byte	$ea, $e3, $e0, $d3, $c0, $be, $cc, $d1, $ce, $e1, $f7, $fc, $f1, $e9, $e1, $d8
13c09     D7 FE 26 4A 
13c0d     55 45 31 2C 
13c11     2A 27 22 21 
13c15     1F 1D 17 05 | 	byte	$d7, $fe, $26, $4a, $55, $45, $31, $2c, $2a, $27, $22, $21, $1f, $1d, $17, $05
13c19     E6 E3 DE CD 
13c1d     BC C4 D1 CF 
13c21     D3 EA FC FB 
13c25     EE E6 DD D4 | 	byte	$e6, $e3, $de, $cd, $bc, $c4, $d1, $cf, $d3, $ea, $fc, $fb, $ee, $e6, $dd, $d4
13c29     D7 04 2E 51 
13c2d     50 3E 2F 2B 
13c31     2A 27 21 21 
13c35     20 1E 16 FC | 	byte	$d7, $04, $2e, $51, $50, $3e, $2f, $2b, $2a, $27, $21, $21, $20, $1e, $16, $fc
13c39     E4 E3 DB CA 
13c3d     BD C9 D3 CF 
13c41     DB F5 FD F7 
13c45     EC E3 DA D1 | 	byte	$e4, $e3, $db, $ca, $bd, $c9, $d3, $cf, $db, $f5, $fd, $f7, $ec, $e3, $da, $d1
13c49     DE 0A 34 54 
13c4d     49 37 2E 2B 
13c51     2A 25 21 22 
13c55     21 1D 13 F3 | 	byte	$de, $0a, $34, $54, $49, $37, $2e, $2b, $2a, $25, $21, $22, $21, $1d, $13, $f3
13c59     E4 E2 D8 C6 
13c5d     C1 D0 D2 D0 
13c61     E8 FB FD F5 
13c65     EA E2 D6 CE | 	byte	$e4, $e2, $d8, $c6, $c1, $d0, $d2, $d0, $e8, $fb, $fd, $f5, $ea, $e2, $d6, $ce
13c69     E4 10 41 51 
13c6d     42 35 2E 2B 
13c71     29 25 22 23 
13c75     22 1B 0D EC | 	byte	$e4, $10, $41, $51, $42, $35, $2e, $2b, $29, $25, $22, $23, $22, $1b, $0d, $ec
13c79     E4 E0 D3 C2 
13c7d     C7 D3 D0 D8 
13c81     F0 FD FB F1 
13c85     E7 DE D4 CC | 	byte	$e4, $e0, $d3, $c2, $c7, $d3, $d0, $d8, $f0, $fd, $fb, $f1, $e7, $de, $d4, $cc
13c89     ED 16 45 4B 
13c8d     3C 33 2E 2B 
13c91     29 23 23 24 
13c95     22 1A 03 E9 | 	byte	$ed, $16, $45, $4b, $3c, $33, $2e, $2b, $29, $23, $23, $24, $22, $1a, $03, $e9
13c99     E4 DE CF C3 
13c9d     CE D5 D0 E0 
13ca1     FB FD F8 ED 
13ca5     E4 DA D1 CC | 	byte	$e4, $de, $cf, $c3, $ce, $d5, $d0, $e0, $fb, $fd, $f8, $ed, $e4, $da, $d1, $cc
13ca9     F1 1C 4B 44 
13cad     39 32 2D 2B 
13cb1     29 24 25 26 
13cb5     21 18 FB E7 | 	byte	$f1, $1c, $4b, $44, $39, $32, $2d, $2b, $29, $24, $25, $26, $21, $18, $fb, $e7
13cb9     E5 DB CC C7 
13cbd     D4 D4 D3 EA 
13cc1     FF FC F6 E9 
13cc5     E1 D6 CD CD | 	byte	$e5, $db, $cc, $c7, $d4, $d4, $d3, $ea, $ff, $fc, $f6, $e9, $e1, $d6, $cd, $cd
13cc9     FA 23 49 3E 
13ccd     37 31 2C 2A 
13cd1     28 24 28 27 
13cd5     20 13 F3 E7 | 	byte	$fa, $23, $49, $3e, $37, $31, $2c, $2a, $28, $24, $28, $27, $20, $13, $f3, $e7
13cd9     E3 D9 CA CD 
13cdd     D8 D2 DB F6 
13ce1     00 FA F3 E7 
13ce5     DD D2 C9 D5 | 	byte	$e3, $d9, $ca, $cd, $d8, $d2, $db, $f6, $00, $fa, $f3, $e7, $dd, $d2, $c9, $d5
13ce9     FE 30 43 39 
13ced     36 30 2B 2A 
13cf1     28 26 29 27 
13cf5     1E 0C EE E7 | 	byte	$fe, $30, $43, $39, $36, $30, $2b, $2a, $28, $26, $29, $27, $1e, $0c, $ee, $e7
13cf9     E1 D3 CB D5 
13cfd     DA D4 E7 FE 
13d01     FF F9 F0 E3 
13d05     D9 CE C6 DA | 	byte	$e1, $d3, $cb, $d5, $da, $d4, $e7, $fe, $ff, $f9, $f0, $e3, $d9, $ce, $c6, $da
13d09     06 31 3D 37 
13d0d     34 2F 2A 2A 
13d11     26 28 2B 27 
13d15     1D 03 EC E6 | 	byte	$06, $31, $3d, $37, $34, $2f, $2a, $2a, $26, $28, $2b, $27, $1d, $03, $ec, $e6
13d19     DD D1 D0 DB 
13d1d     D9 D8 F0 02 
13d21     FE F7 EC E1 
13d25     D6 CB C3 E2 | 	byte	$dd, $d1, $d0, $db, $d9, $d8, $f0, $02, $fe, $f7, $ec, $e1, $d6, $cb, $c3, $e2
13d29     0D 34 38 37 
13d2d     33 2E 2A 2A 
13d31     26 2A 2C 26 
13d35     1A FC EB E4 | 	byte	$0d, $34, $38, $37, $33, $2e, $2a, $2a, $26, $2a, $2c, $26, $1a, $fc, $eb, $e4
13d39     D9 D0 D5 DE 
13d3d     D7 E2 F9 04 
13d41     FC F4 E8 DD 
13d45     D2 C8 C4 ED | 	byte	$d9, $d0, $d5, $de, $d7, $e2, $f9, $04, $fc, $f4, $e8, $dd, $d2, $c8, $c4, $ed
13d49     12 33 36 37 
13d4d     32 2E 2A 2A 
13d51     27 2B 2C 24 
13d55     15 F6 EA E2 | 	byte	$12, $33, $36, $37, $32, $2e, $2a, $2a, $27, $2b, $2c, $24, $15, $f6, $ea, $e2
13d59     D6 D2 DB DF 
13d5d     D9 EC FF 03 
13d61     FA F1 E5 D9 
13d65     CF C5 C9 F5 | 	byte	$d6, $d2, $db, $df, $d9, $ec, $ff, $03, $fa, $f1, $e5, $d9, $cf, $c5, $c9, $f5
13d69     16 32 36 37 
13d6d     32 2D 2A 2B 
13d71     29 2C 2A 22 
13d75     0E F2 E8 DE | 	byte	$16, $32, $36, $37, $32, $2d, $2a, $2b, $29, $2c, $2a, $22, $0e, $f2, $e8, $de
13d79     D3 D6 E0 DE 
13d7d     DF F6 02 01 
13d81     F8 ED E2 D6 
13d85     CB C3 CE FC | 	byte	$d3, $d6, $e0, $de, $df, $f6, $02, $01, $f8, $ed, $e2, $d6, $cb, $c3, $ce, $fc
13d89     15 32 37 36 
13d8d     33 2D 2B 2B 
13d91     2A 2E 2A 1F 
13d95     07 F0 E6 DB | 	byte	$15, $32, $37, $36, $33, $2d, $2b, $2b, $2a, $2e, $2a, $1f, $07, $f0, $e6, $db
13d99     D3 DC E3 DE 
13d9d     E6 FB 02 FF 
13da1     F3 EA DE D2 
13da5     C7 C0 D3 FF | 	byte	$d3, $dc, $e3, $de, $e6, $fb, $02, $ff, $f3, $ea, $de, $d2, $c7, $c0, $d3, $ff
13da9     17 32 37 36 
13dad     33 2C 2C 2B 
13db1     2C 30 28 1C 
13db5     FE EF E5 D7 | 	byte	$17, $32, $37, $36, $33, $2c, $2c, $2b, $2c, $30, $28, $1c, $fe, $ef, $e5, $d7
13db9     D5 E2 E4 E2 
13dbd     F2 FF 01 FC 
13dc1     F0 E5 DA CD 
13dc5     C4 BF DE FF | 	byte	$d5, $e2, $e4, $e2, $f2, $ff, $01, $fc, $f0, $e5, $da, $cd, $c4, $bf, $de, $ff
13dc9     1A 33 38 35 
13dcd     32 2D 2D 2D 
13dd1     2F 2F 27 17 
13dd5     F8 EC E1 D4 | 	byte	$1a, $33, $38, $35, $32, $2d, $2d, $2d, $2f, $2f, $27, $17, $f8, $ec, $e1, $d4
13dd9     DA E7 E4 E6 
13ddd     F8 00 00 F8 
13de1     EC E1 D6 C9 
13de5     C2 C0 E7 01 | 	byte	$da, $e7, $e4, $e6, $f8, $00, $00, $f8, $ec, $e1, $d6, $c9, $c2, $c0, $e7, $01
13de9     1F 34 38 35 
13ded     31 2D 2E 2E 
13df1     30 2E 26 10 
13df5     F5 E9 DD D4 | 	byte	$1f, $34, $38, $35, $31, $2d, $2e, $2e, $30, $2e, $26, $10, $f5, $e9, $dd, $d4
13df9     E2 E9 E7 EE 
13dfd     FD 01 FF F4 
13e01     E9 DD D1 C6 
13e05     C0 C3 E9 03 | 	byte	$e2, $e9, $e7, $ee, $fd, $01, $ff, $f4, $e9, $dd, $d1, $c6, $c0, $c3, $e9, $03
13e09     22 36 37 35 
13e0d     31 2E 2F 2F 
13e11     32 2D 24 07 
13e15     F2 E6 DA D7 | 	byte	$22, $36, $37, $35, $31, $2e, $2f, $2f, $32, $2d, $24, $07, $f2, $e6, $da, $d7
13e19     E9 EC EB F5 
13e1d     00 02 FC F1 
13e21     E4 D9 CD C3 
13e25     BE C4 EE 05 | 	byte	$e9, $ec, $eb, $f5, $00, $02, $fc, $f1, $e4, $d9, $cd, $c3, $be, $c4, $ee, $05
13e29     27 36 37 35 
13e2d     31 2E 31 31 
13e31     32 2B 20 01 
13e35     F0 E3 D7 DE | 	byte	$27, $36, $37, $35, $31, $2e, $31, $31, $32, $2b, $20, $01, $f0, $e3, $d7, $de
13e39     EE EE F2 F9 
13e3d     01 01 F9 EE 
13e41     E1 D5 C9 C1 
13e45     BB C8 F5 09 | 	byte	$ee, $ee, $f2, $f9, $01, $01, $f9, $ee, $e1, $d5, $c9, $c1, $bb, $c8, $f5, $09
13e49     29 37 38 35 
13e4d     31 2F 32 32 
13e51     32 2C 1A FA 
13e55     ED DF D7 E4 | 	byte	$29, $37, $38, $35, $31, $2f, $32, $32, $32, $2c, $1a, $fa, $ed, $df, $d7, $e4
13e59     F2 F1 F6 FD 
13e5d     02 FF F6 E9 
13e61     DD D1 C5 BF 
13e65     B8 D0 F9 0F | 	byte	$f2, $f1, $f6, $fd, $02, $ff, $f6, $e9, $dd, $d1, $c5, $bf, $b8, $d0, $f9, $0f
13e69     2C 38 38 35 
13e6d     31 30 33 33 
13e71     31 2A 13 F5 
13e75     EA DC DA EB | 	byte	$2c, $38, $38, $35, $31, $30, $33, $33, $31, $2a, $13, $f5, $ea, $dc, $da, $eb
13e79     F5 F6 FA 01 
13e7d     03 FD F2 E6 
13e81     D9 CE C2 BC 
13e85     B3 D5 FE 12 | 	byte	$f5, $f6, $fa, $01, $03, $fd, $f2, $e6, $d9, $ce, $c2, $bc, $b3, $d5, $fe, $12
13e89     30 39 37 36 
13e8d     32 32 34 34 
13e91     31 29 07 F2 
13e95     E5 DA DF F2 | 	byte	$30, $39, $37, $36, $32, $32, $34, $34, $31, $29, $07, $f2, $e5, $da, $df, $f2
13e99     F7 FA FC 03 
13e9d     02 FA EF E1 
13ea1     D6 CA BF B9 
13ea5     B0 DD 03 18 | 	byte	$f7, $fa, $fc, $03, $02, $fa, $ef, $e1, $d6, $ca, $bf, $b9, $b0, $dd, $03, $18
13ea9     31 39 37 36 
13ead     32 34 35 34 
13eb1     2F 24 FF F1 
13eb5     E1 DA E6 F8 | 	byte	$31, $39, $37, $36, $32, $34, $35, $34, $2f, $24, $ff, $f1, $e1, $da, $e6, $f8
13eb9     FB FC FE 04 
13ebd     00 F7 EA DC 
13ec1     D1 C6 BD B2 
13ec5     B1 EB 05 19 | 	byte	$fb, $fc, $fe, $04, $00, $f7, $ea, $dc, $d1, $c6, $bd, $b2, $b1, $eb, $05, $19
13ec9     33 38 37 36 
13ecd     33 35 35 34 
13ed1     2F 1C FA ED 
13ed5     DE DE EE FD | 	byte	$33, $38, $37, $36, $33, $35, $35, $34, $2f, $1c, $fa, $ed, $de, $de, $ee, $fd
13ed9     FF FE 00 05 
13edd     FD F3 E5 D9 
13ee1     CE C3 B9 AB 
13ee5     B3 FA 08 1F | 	byte	$ff, $fe, $00, $05, $fd, $f3, $e5, $d9, $ce, $c3, $b9, $ab, $b3, $fa, $08, $1f
13ee9     36 39 38 36 
13eed     34 37 37 34 
13ef1     2E 12 F5 EA 
13ef5     DC E2 F6 02 | 	byte	$36, $39, $38, $36, $34, $37, $37, $34, $2e, $12, $f5, $ea, $dc, $e2, $f6, $02
13ef9     03 FF 02 04 
13efd     FA F0 E1 D5 
13f01     CA BF B5 A3 
13f05     C0 01 0A 21 | 	byte	$03, $ff, $02, $04, $fa, $f0, $e1, $d5, $ca, $bf, $b5, $a3, $c0, $01, $0a, $21
13f09     37 38 3A 36 
13f0d     35 38 37 34 
13f11     2B 0A F2 E6 
13f15     DC EA FE 05 | 	byte	$37, $38, $3a, $36, $35, $38, $37, $34, $2b, $0a, $f2, $e6, $dc, $ea, $fe, $05
13f19     04 FF 05 02 
13f1d     F9 EC DD D1 
13f21     C8 BD AC 9E 
13f25     D7 05 0A 23 | 	byte	$04, $ff, $05, $02, $f9, $ec, $dd, $d1, $c8, $bd, $ac, $9e, $d7, $05, $0a, $23
13f29     37 39 3B 36 
13f2d     37 39 38 34 
13f31     26 FF F0 E2 
13f35     DF F2 05 09 | 	byte	$37, $39, $3b, $36, $37, $39, $38, $34, $26, $ff, $f0, $e2, $df, $f2, $05, $09
13f39     03 01 07 FF 
13f3d     F5 E7 D9 CE 
13f41     C5 B7 A3 9E 
13f45     E6 08 0C 29 | 	byte	$03, $01, $07, $ff, $f5, $e7, $d9, $ce, $c5, $b7, $a3, $9e, $e6, $08, $0c, $29
13f49     38 3A 3B 36 
13f4d     39 3A 39 33 
13f51     1F F9 EE DF 
13f55     E6 FA 09 09 | 	byte	$38, $3a, $3b, $36, $39, $3a, $39, $33, $1f, $f9, $ee, $df, $e6, $fa, $09, $09
13f59     02 03 07 FC 
13f5d     F2 E3 D5 CB 
13f61     C2 AF 9D A8 
13f65     F5 09 0F 2C | 	byte	$02, $03, $07, $fc, $f2, $e3, $d5, $cb, $c2, $af, $9d, $a8, $f5, $09, $0f, $2c
13f69     39 3B 3B 37 
13f6d     3A 3B 38 31 
13f71     12 F4 EA DE 
13f75     ED 05 0D 08 | 	byte	$39, $3b, $3b, $37, $3a, $3b, $38, $31, $12, $f4, $ea, $de, $ed, $05, $0d, $08
13f79     02 05 05 F8 
13f7d     EE DD D1 C8 
13f81     BE A7 97 B6 
13f85     03 09 11 31 | 	byte	$02, $05, $05, $f8, $ee, $dd, $d1, $c8, $be, $a7, $97, $b6, $03, $09, $11, $31
13f89     3A 3C 3B 39 
13f8d     3C 3B 37 2D 
13f91     08 F2 E6 E1 
13f95     F6 0B 0F 06 | 	byte	$3a, $3c, $3b, $39, $3c, $3b, $37, $2d, $08, $f2, $e6, $e1, $f6, $0b, $0f, $06
13f99     01 05 02 F5 
13f9d     E8 D9 CD C5 
13fa1     B7 9E 96 CB 
13fa5     09 09 16 36 | 	byte	$01, $05, $02, $f5, $e8, $d9, $cd, $c5, $b7, $9e, $96, $cb, $09, $09, $16, $36
13fa9     3C 3E 3B 3B 
13fad     3D 3B 36 27 
13fb1     02 F0 E4 E8 
13fb5     00 11 0F 04 | 	byte	$3c, $3e, $3b, $3b, $3d, $3b, $36, $27, $02, $f0, $e4, $e8, $00, $11, $0f, $04
13fb9     03 07 FD F1 
13fbd     E3 D4 C9 C0 
13fc1     AD 95 9A DE 
13fc5     0B 09 1C 39 | 	byte	$03, $07, $fd, $f1, $e3, $d4, $c9, $c0, $ad, $95, $9a, $de, $0b, $09, $1c, $39
13fc9     3D 3E 3C 3D 
13fcd     3E 3C 35 1F 
13fd1     F9 EE E4 F0 
13fd5     0B 14 0C 03 | 	byte	$3d, $3e, $3c, $3d, $3e, $3c, $35, $1f, $f9, $ee, $e4, $f0, $0b, $14, $0c, $03
13fd9     03 06 F8 EC 
13fdd     DD D0 C6 BA 
13fe1     A3 92 A3 F1 
13fe5     0A 0A 21 3C | 	byte	$03, $06, $f8, $ec, $dd, $d0, $c6, $ba, $a3, $92, $a3, $f1, $0a, $0a, $21, $3c
13fe9     3E 3F 3D 3F 
13fed     3E 3B 33 13 
13ff1     F5 EA E6 FB 
13ff5     13 14 09 04 | 	byte	$3e, $3f, $3d, $3f, $3e, $3b, $33, $13, $f5, $ea, $e6, $fb, $13, $14, $09, $04
13ff9     06 05 F4 E7 
13ffd     D8 CC C3 B2 
14001     99 92 B6 FC 
14005     09 0B 26 3E | 	byte	$06, $05, $f4, $e7, $d8, $cc, $c3, $b2, $99, $92, $b6, $fc, $09, $0b, $26, $3e
14009     3F 40 3F 40 
1400d     3E 3B 2F 07 
14011     F2 E9 ED 08 
14015     17 12 07 04 | 	byte	$3f, $40, $3f, $40, $3e, $3b, $2f, $07, $f2, $e9, $ed, $08, $17, $12, $07, $04
14019     07 01 F1 E2 
1401d     D4 CA BD A9 
14021     93 95 C4 06 
14025     08 0C 2E 3F | 	byte	$07, $01, $f1, $e2, $d4, $ca, $bd, $a9, $93, $95, $c4, $06, $08, $0c, $2e, $3f
14029     40 41 41 41 
1402d     3D 3A 28 00 
14031     EF E9 F7 12 
14035     1A 0F 05 06 | 	byte	$40, $41, $41, $41, $3d, $3a, $28, $00, $ef, $e9, $f7, $12, $1a, $0f, $05, $06
14039     08 FC EB DF 
1403d     D1 C7 B5 9E 
14041     91 9E D5 0A 
14045     08 0F 32 3F | 	byte	$08, $fc, $eb, $df, $d1, $c7, $b5, $9e, $91, $9e, $d5, $0a, $08, $0f, $32, $3f
14049     40 42 42 42 
1404d     3D 38 1C FB 
14051     EE ED 03 19 
14055     19 0D 05 08 | 	byte	$40, $42, $42, $42, $3d, $38, $1c, $fb, $ee, $ed, $03, $19, $19, $0d, $05, $08
14059     06 F7 E7 DA 
1405d     CE C1 AD 98 
14061     92 A7 E7 0A 
14065     09 15 35 3F | 	byte	$06, $f7, $e7, $da, $ce, $c1, $ad, $98, $92, $a7, $e7, $0a, $09, $15, $35, $3f
14069     40 43 44 41 
1406d     3D 33 10 F6 
14071     EC F3 0F 1C 
14075     15 09 07 09 | 	byte	$40, $43, $44, $41, $3d, $33, $10, $f6, $ec, $f3, $0f, $1c, $15, $09, $07, $09
14079     03 F3 E3 D6 
1407d     CB B9 A3 93 
14081     96 B3 F5 09 
14085     0A 17 39 3F | 	byte	$03, $f3, $e3, $d6, $cb, $b9, $a3, $93, $96, $b3, $f5, $09, $0a, $17, $39, $3f
14089     41 44 45 40 
1408d     3C 2F 06 F2 
14091     EE 00 1A 1C 
14095     11 07 08 0A | 	byte	$41, $44, $45, $40, $3c, $2f, $06, $f2, $ee, $00, $1a, $1c, $11, $07, $08, $0a
14099     00 ED DF D3 
1409d     C7 B1 9B 93 
140a1     9C C0 FD 09 
140a5     0C 1F 3C 40 | 	byte	$00, $ed, $df, $d3, $c7, $b1, $9b, $93, $9c, $c0, $fd, $09, $0c, $1f, $3c, $40
140a9     43 46 45 40 
140ad     3A 24 FF EF 
140b1     F3 0D 1F 19 
140b5     0D 05 0A 09 | 	byte	$43, $46, $45, $40, $3a, $24, $ff, $ef, $f3, $0d, $1f, $19, $0d, $05, $0a, $09
140b9     FB E7 DB CF 
140bd     C2 A6 95 94 
140c1     A4 CE 04 0A 
140c5     0F 22 3F 41 | 	byte	$fb, $e7, $db, $cf, $c2, $a6, $95, $94, $a4, $ce, $04, $0a, $0f, $22, $3f, $41
140c9     45 47 45 3E 
140cd     38 1C F7 EE 
140d1     FB 19 21 15 
140d5     0A 05 0B 07 | 	byte	$45, $47, $45, $3e, $38, $1c, $f7, $ee, $fb, $19, $21, $15, $0a, $05, $0b, $07
140d9     F5 E3 D7 CC 
140dd     BA 9D 92 97 
140e1     AE D8 07 0C 
140e5     12 2A 40 43 | 	byte	$f5, $e3, $d7, $cc, $ba, $9d, $92, $97, $ae, $d8, $07, $0c, $12, $2a, $40, $43
140e9     48 49 44 3D 
140ed     34 0E F5 F1 
140f1     09 21 1E 12 
140f5     07 07 0C 02 | 	byte	$48, $49, $44, $3d, $34, $0e, $f5, $f1, $09, $21, $1e, $12, $07, $07, $0c, $02
140f9     EF DF D4 C7 
140fd     AC 96 94 9B 
14101     B6 E6 09 0E 
14105     15 2D 42 45 | 	byte	$ef, $df, $d4, $c7, $ac, $96, $94, $9b, $b6, $e6, $09, $0e, $15, $2d, $42, $45
14109     49 49 44 3C 
1410d     30 06 F1 F8 
14111     19 26 19 0F 
14115     06 0A 0C FD | 	byte	$49, $49, $44, $3c, $30, $06, $f1, $f8, $19, $26, $19, $0f, $06, $0a, $0c, $fd
14119     E8 DC D0 C1 
1411d     A3 92 95 A2 
14121     BF EF 0B 0F 
14125     17 30 43 47 | 	byte	$e8, $dc, $d0, $c1, $a3, $92, $95, $a2, $bf, $ef, $0b, $0f, $17, $30, $43, $47
14129     4B 4A 43 3B 
1412d     24 FF F0 05 
14131     24 24 17 0D 
14135     05 0C 09 F9 | 	byte	$4b, $4a, $43, $3b, $24, $ff, $f0, $05, $24, $24, $17, $0d, $05, $0c, $09, $f9
14139     E4 D7 CC B4 
1413d     9A 91 98 A9 
14141     C9 FB 0C 11 
14145     18 36 45 49 | 	byte	$e4, $d7, $cc, $b4, $9a, $91, $98, $a9, $c9, $fb, $0c, $11, $18, $36, $45, $49
14149     4B 49 40 38 
1414d     1D F7 F3 15 
14151     2A 21 12 0A 
14155     05 0E 07 F1 | 	byte	$4b, $49, $40, $38, $1d, $f7, $f3, $15, $2a, $21, $12, $0a, $05, $0e, $07, $f1
14159     E0 D3 C4 AA 
1415d     93 92 9B B4 
14161     CF 01 0D 12 
14165     1C 39 47 4A | 	byte	$e0, $d3, $c4, $aa, $93, $92, $9b, $b4, $cf, $01, $0d, $12, $1c, $39, $47, $4a
14169     4C 48 3F 34 
1416d     10 F4 FF 23 
14171     2B 1D 10 08 
14175     08 0F 00 ED | 	byte	$4c, $48, $3f, $34, $10, $f4, $ff, $23, $2b, $1d, $10, $08, $08, $0f, $00, $ed
14179     DC D0 BB A1 
1417d     91 93 A0 BB 
14181     D8 07 0F 14 
14185     1F 3D 49 4B | 	byte	$dc, $d0, $bb, $a1, $91, $93, $a0, $bb, $d8, $07, $0f, $14, $1f, $3d, $49, $4b
14189     4C 47 3D 2F 
1418d     04 F4 0F 2F 
14191     27 18 0E 06 
14195     0B 0D FA E7 | 	byte	$4c, $47, $3d, $2f, $04, $f4, $0f, $2f, $27, $18, $0e, $06, $0b, $0d, $fa, $e7
14199     D7 CA B0 99 
1419d     92 97 A5 C2 
141a1     DE 0B 11 16 
141a5     24 41 4B 4C | 	byte	$d7, $ca, $b0, $99, $92, $97, $a5, $c2, $de, $0b, $11, $16, $24, $41, $4b, $4c
141a9     4C 46 3B 26 
141ad     FC F9 1C 33 
141b1     23 14 0C 05 
141b5     0D 0A F5 E0 | 	byte	$4c, $46, $3b, $26, $fc, $f9, $1c, $33, $23, $14, $0c, $05, $0d, $0a, $f5, $e0
141b9     D4 BF A6 94 
141bd     93 9A B0 C7 
141c1     EC 0F 13 18 
141c5     27 46 4C 4C | 	byte	$d4, $bf, $a6, $94, $93, $9a, $b0, $c7, $ec, $0f, $13, $18, $27, $46, $4c, $4c
141c9     4B 44 39 19 
141cd     F8 07 2C 30 
141d1     1F 12 09 06 
141d5     0E 04 F0 DC | 	byte	$4b, $44, $39, $19, $f8, $07, $2c, $30, $1f, $12, $09, $06, $0e, $04, $f0, $dc
141d9     CF B6 9C 93 
141dd     95 9E B7 CB 
141e1     F5 10 15 19 
141e5     2F 4A 4E 4D | 	byte	$cf, $b6, $9c, $93, $95, $9e, $b7, $cb, $f5, $10, $15, $19, $2f, $4a, $4e, $4d
141e9     4B 41 35 0F 
141ed     FA 14 37 2B 
141f1     1B 10 08 09 
141f5     0E FE E9 D9 | 	byte	$4b, $41, $35, $0f, $fa, $14, $37, $2b, $1b, $10, $08, $09, $0e, $fe, $e9, $d9
141f9     C7 AB 97 93 
141fd     97 A3 BF CF 
14201     02 12 17 1B 
14205     33 4D 4E 4D | 	byte	$c7, $ab, $97, $93, $97, $a3, $bf, $cf, $02, $12, $17, $1b, $33, $4d, $4e, $4d
14209     4A 3F 2C 07 
1420d     02 23 38 25 
14211     18 0D 07 0A 
14215     0B F9 E5 D4 | 	byte	$4a, $3f, $2c, $07, $02, $23, $38, $25, $18, $0d, $07, $0a, $0b, $f9, $e5, $d4
14219     BE A1 97 94 
1421d     9A A8 C5 D4 
14221     07 14 18 1E 
14225     38 4F 4E 4C | 	byte	$be, $a1, $97, $94, $9a, $a8, $c5, $d4, $07, $14, $18, $1e, $38, $4f, $4e, $4c
14229     48 3D 22 01 
1422d     0F 32 35 20 
14231     15 0A 07 0C 
14235     07 F2 DF CB | 	byte	$48, $3d, $22, $01, $0f, $32, $35, $20, $15, $0a, $07, $0c, $07, $f2, $df, $cb
14239     B2 9A 96 96 
1423d     9C B0 C8 DE 
14241     0D 16 19 22 
14245     3D 50 4E 4B | 	byte	$b2, $9a, $96, $96, $9c, $b0, $c8, $de, $0d, $16, $19, $22, $3d, $50, $4e, $4b
14249     47 3A 1B 04 
1424d     1C 39 30 1D 
14251     13 08 07 0C 
14255     03 EE DA C5 | 	byte	$47, $3a, $1b, $04, $1c, $39, $30, $1d, $13, $08, $07, $0c, $03, $ee, $da, $c5
14259     A6 98 97 99 
1425d     A0 B9 CA E9 
14261     11 17 1A 24 
14265     44 51 4D 4B | 	byte	$a6, $98, $97, $99, $a0, $b9, $ca, $e9, $11, $17, $1a, $24, $44, $51, $4d, $4b
14269     45 33 10 0D 
1426d     2C 39 29 1B 
14271     0F 07 09 0C 
14275     FC E9 D4 B7 | 	byte	$45, $33, $10, $0d, $2c, $39, $29, $1b, $0f, $07, $09, $0c, $fc, $e9, $d4, $b7
14279     9F 98 98 9C 
1427d     A5 C0 CD F5 
14281     14 19 1C 2A 
14285     48 52 4D 4A | 	byte	$9f, $98, $98, $9c, $a5, $c0, $cd, $f5, $14, $19, $1c, $2a, $48, $52, $4d, $4a
14289     42 2D 0B 1A 
1428d     34 37 26 17 
14291     0C 06 0A 08 
14295     F6 E2 CB AD | 	byte	$42, $2d, $0b, $1a, $34, $37, $26, $17, $0c, $06, $0a, $08, $f6, $e2, $cb, $ad
14299     9B 99 9A 9F 
1429d     AC C6 D0 02 
142a1     16 1A 1E 2F 
142a5     4B 51 4C 4A | 	byte	$9b, $99, $9a, $9f, $ac, $c6, $d0, $02, $16, $1a, $1e, $2f, $4b, $51, $4c, $4a
142a9     3F 20 0E 29 
142ad     38 33 22 15 
142b1     09 07 0B 04 
142b5     F0 DC C0 A4 | 	byte	$3f, $20, $0e, $29, $38, $33, $22, $15, $09, $07, $0b, $04, $f0, $dc, $c0, $a4
142b9     99 99 9C A0 
142bd     B3 CA D6 0A 
142c1     18 1B 21 32 
142c5     4F 51 4C 48 | 	byte	$99, $99, $9c, $a0, $b3, $ca, $d6, $0a, $18, $1b, $21, $32, $4f, $51, $4c, $48
142c9     3B 19 17 33 
142cd     39 2F 1D 12 
142d1     07 07 0A FF 
142d5     E9 D5 B4 9F | 	byte	$3b, $19, $17, $33, $39, $2f, $1d, $12, $07, $07, $0a, $ff, $e9, $d5, $b4, $9f
142d9     99 9B 9E A3 
142dd     BA CB E1 0F 
142e1     19 1D 24 36 
142e5     51 50 4B 47 | 	byte	$99, $9b, $9e, $a3, $ba, $cb, $e1, $0f, $19, $1d, $24, $36, $51, $50, $4b, $47
142e9     33 17 24 38 
142ed     36 2A 1B 0E 
142f1     06 08 08 FA 
142f5     E5 CB AA 9C | 	byte	$33, $17, $24, $38, $36, $2a, $1b, $0e, $06, $08, $08, $fa, $e5, $cb, $aa, $9c
142f9     9A 9C 9F A7 
142fd     C3 CC EB 14 
14301     1A 1E 28 3B 
14305     53 50 4B 44 | 	byte	$9a, $9c, $9f, $a7, $c3, $cc, $eb, $14, $1a, $1e, $28, $3b, $53, $50, $4b, $44
14309     2C 19 31 3B 
1430d     33 26 17 0A 
14311     04 08 05 F2 
14315     DD BC A2 9A | 	byte	$2c, $19, $31, $3b, $33, $26, $17, $0a, $04, $08, $05, $f2, $dd, $bc, $a2, $9a
14319     9A 9D A1 AD 
1431d     C8 CE F7 17 
14321     1B 21 2A 40 
14325     53 4E 49 40 | 	byte	$9a, $9d, $a1, $ad, $c8, $ce, $f7, $17, $1b, $21, $2a, $40, $53, $4e, $49, $40
14329     27 20 39 3B 
1432d     30 24 14 08 
14331     05 09 01 EC 
14335     D6 B2 9F 9B | 	byte	$27, $20, $39, $3b, $30, $24, $14, $08, $05, $09, $01, $ec, $d6, $b2, $9f, $9b
14339     9C 9F A3 B6 
1433d     CB D1 02 18 
14341     1C 23 2D 43 
14345     54 4D 48 3C | 	byte	$9c, $9f, $a3, $b6, $cb, $d1, $02, $18, $1c, $23, $2d, $43, $54, $4d, $48, $3c
14349     23 2C 3F 37 
1434d     2E 1F 11 07 
14351     06 08 FB E7 
14355     CA A8 9D 9B | 	byte	$23, $2c, $3f, $37, $2e, $1f, $11, $07, $06, $08, $fb, $e7, $ca, $a8, $9d, $9b
14359     9D A1 A7 BD 
1435d     CD D7 0B 19 
14361     1E 26 30 48 
14365     53 4B 46 37 | 	byte	$9d, $a1, $a7, $bd, $cd, $d7, $0b, $19, $1e, $26, $30, $48, $53, $4b, $46, $37
14369     24 37 41 33 
1436d     2B 1B 0E 06 
14371     08 06 F5 DD 
14375     BE A2 9D 9C | 	byte	$24, $37, $41, $33, $2b, $1b, $0e, $06, $08, $06, $f5, $dd, $be, $a2, $9d, $9c
14379     9F A2 AB C4 
1437d     CE DF 11 1A 
14381     20 29 31 4B 
14385     52 4B 44 33 | 	byte	$9f, $a2, $ab, $c4, $ce, $df, $11, $1a, $20, $29, $31, $4b, $52, $4b, $44, $33
14389     2A 3F 40 30 
1438d     28 18 0A 05 
14391     08 02 EF D2 
14395     B4 A0 9D 9C | 	byte	$2a, $3f, $40, $30, $28, $18, $0a, $05, $08, $02, $ef, $d2, $b4, $a0, $9d, $9c
14399     A1 A3 B2 CB 
1439d     D0 ED 15 1B 
143a1     24 2B 34 4D 
143a5     51 49 42 30 | 	byte	$a1, $a3, $b2, $cb, $d0, $ed, $15, $1b, $24, $2b, $34, $4d, $51, $49, $42, $30
143a9     31 43 3B 2E 
143ad     23 15 09 06 
143b1     08 FD E7 C9 
143b5     AA A0 9E 9E | 	byte	$31, $43, $3b, $2e, $23, $15, $09, $06, $08, $fd, $e7, $c9, $aa, $a0, $9e, $9e
143b9     A2 A5 B9 CE 
143bd     D3 F6 18 1D 
143c1     26 2D 36 50 
143c5     50 49 40 31 | 	byte	$a2, $a5, $b9, $ce, $d3, $f6, $18, $1d, $26, $2d, $36, $50, $50, $49, $40, $31
143c9     3B 45 36 2C 
143cd     20 11 06 06 
143d1     05 F8 DC BF 
143d5     A6 9F 9F A1 | 	byte	$3b, $45, $36, $2c, $20, $11, $06, $06, $05, $f8, $dc, $bf, $a6, $9f, $9f, $a1
143d9     A3 AA C4 D0 
143dd     D5 FE 19 20 
143e1     29 2F 39 51 
143e5     4D 48 40 32 | 	byte	$a3, $aa, $c4, $d0, $d5, $fe, $19, $20, $29, $2f, $39, $51, $4d, $48, $40, $32
143e9     41 44 32 28 
143ed     1B 0D 04 06 
143f1     03 F0 D0 B4 
143f5     A3 A0 9F A2 | 	byte	$41, $44, $32, $28, $1b, $0d, $04, $06, $03, $f0, $d0, $b4, $a3, $a0, $9f, $a2
143f9     A3 AF C9 D2 
143fd     DB 0B 19 23 
14401     2B 30 3B 52 
14405     4D 49 3E 38 | 	byte	$a3, $af, $c9, $d2, $db, $0b, $19, $23, $2b, $30, $3b, $52, $4d, $49, $3e, $38
14409     46 41 30 25 
1440d     17 0A 03 05 
14411     FD E6 C6 AD 
14415     A3 A0 A0 A3 | 	byte	$46, $41, $30, $25, $17, $0a, $03, $05, $fd, $e6, $c6, $ad, $a3, $a0, $a0, $a3
14419     A4 B9 CF D3 
1441d     E1 11 1C 25 
14421     2D 30 40 53 
14425     4D 4C 3C 3D | 	byte	$a4, $b9, $cf, $d3, $e1, $11, $1c, $25, $2d, $30, $40, $53, $4d, $4c, $3c, $3d
14429     47 3B 2C 21 
1442d     14 08 03 04 
14431     F7 DA BA AA 
14435     A2 A1 A2 A3 | 	byte	$47, $3b, $2c, $21, $14, $08, $03, $04, $f7, $da, $ba, $aa, $a2, $a1, $a2, $a3
14439     A7 C1 D2 D5 
1443d     ED 15 1F 28 
14441     2F 31 43 52 
14445     4E 4D 3C 44 | 	byte	$a7, $c1, $d2, $d5, $ed, $15, $1f, $28, $2f, $31, $43, $52, $4e, $4d, $3c, $44
14449     47 36 29 1E 
1444d     10 05 04 02 
14451     ED CF B4 A7 
14455     A2 A1 A4 A4 | 	byte	$47, $36, $29, $1e, $10, $05, $04, $02, $ed, $cf, $b4, $a7, $a2, $a1, $a4, $a4
14459     AD C8 D3 D5 
1445d     F4 19 21 2B 
14461     2F 32 49 52 
14465     51 4C 3C 49 | 	byte	$ad, $c8, $d3, $d5, $f4, $19, $21, $2b, $2f, $32, $49, $52, $51, $4c, $3c, $49
14469     44 33 27 1B 
1446d     0D 03 05 FD 
14471     E3 C2 B1 A6 
14475     A2 A3 A4 A4 | 	byte	$44, $33, $27, $1b, $0d, $03, $05, $fd, $e3, $c2, $b1, $a6, $a2, $a3, $a4, $a4
14479     B3 CF D4 D8 
1447d     FD 1A 24 2C 
14481     30 32 4A 53 
14485     54 48 40 4B | 	byte	$b3, $cf, $d4, $d8, $fd, $1a, $24, $2c, $30, $32, $4a, $53, $54, $48, $40, $4b
14489     3F 30 24 15 
1448d     0A 02 05 F6 
14491     D9 BA AE A6 
14495     A3 A4 A5 A6 | 	byte	$3f, $30, $24, $15, $0a, $02, $05, $f6, $d9, $ba, $ae, $a6, $a3, $a4, $a5, $a6
14499     BC D3 D5 DB 
1449d     0A 1C 26 2E 
144a1     30 35 4D 55 
144a5     57 45 46 4A | 	byte	$bc, $d3, $d5, $db, $0a, $1c, $26, $2e, $30, $35, $4d, $55, $57, $45, $46, $4a
144a9     3B 2B 21 13 
144ad     07 02 03 EE 
144b1     CC B6 AC A5 
144b5     A4 A6 A6 A9 | 	byte	$3b, $2b, $21, $13, $07, $02, $03, $ee, $cc, $b6, $ac, $a5, $a4, $a6, $a6, $a9
144b9     C8 D5 D6 E0 
144bd     11 1E 28 2F 
144c1     30 37 50 58 
144c5     56 43 4B 45 | 	byte	$c8, $d5, $d6, $e0, $11, $1e, $28, $2f, $30, $37, $50, $58, $56, $43, $4b, $45
144c9     37 28 1D 0F 
144cd     04 02 FE E2 
144d1     C2 B3 AB A5 
144d5     A5 A6 A6 AF | 	byte	$37, $28, $1d, $0f, $04, $02, $fe, $e2, $c2, $b3, $ab, $a5, $a5, $a6, $a6, $af
144d9     CF D5 D6 E8 
144dd     17 21 2A 30 
144e1     30 3A 55 5C 
144e5     52 43 4D 42 | 	byte	$cf, $d5, $d6, $e8, $17, $21, $2a, $30, $30, $3a, $55, $5c, $52, $43, $4d, $42
144e9     33 26 1A 0B 
144ed     02 03 F8 D4 
144f1     BD B1 AA A5 
144f5     A7 A7 A7 B9 | 	byte	$33, $26, $1a, $0b, $02, $03, $f8, $d4, $bd, $b1, $aa, $a5, $a7, $a7, $a7, $b9
144f9     D4 D6 D7 F7 
144fd     1C 24 2D 30 
14501     31 3D 58 5E 
14505     50 48 4D 3D | 	byte	$d4, $d6, $d7, $f7, $1c, $24, $2d, $30, $31, $3d, $58, $5e, $50, $48, $4d, $3d
14509     2E 23 16 07 
1450d     01 03 ED CA 
14511     BA B0 A9 A8 
14515     A9 A9 AA C4 | 	byte	$2e, $23, $16, $07, $01, $03, $ed, $ca, $ba, $b0, $a9, $a8, $a9, $a9, $aa, $c4
14519     D8 D8 D9 00 
1451d     1D 24 2D 30 
14521     31 41 5B 5C 
14525     49 4A 47 38 | 	byte	$d8, $d8, $d9, $00, $1d, $24, $2d, $30, $31, $41, $5b, $5c, $49, $4a, $47, $38
14529     2B 1E 0F 03 
1452d     00 00 E0 C6 
14531     B9 B1 AB AB 
14535     AC AC B0 CE | 	byte	$2b, $1e, $0f, $03, $00, $00, $e0, $c6, $b9, $b1, $ab, $ab, $ac, $ac, $b0, $ce
14539     DA D9 DE 0D 
1453d     1E 25 2E 30 
14541     30 44 5E 58 
14545     47 4B 41 32 | 	byte	$da, $d9, $de, $0d, $1e, $25, $2e, $30, $30, $44, $5e, $58, $47, $4b, $41, $32
14549     26 1A 0A 01 
1454d     00 FA D7 C4 
14551     B9 B2 AE AF 
14555     AE AE B8 D7 | 	byte	$26, $1a, $0a, $01, $00, $fa, $d7, $c4, $b9, $b2, $ae, $af, $ae, $ae, $b8, $d7
14559     DB DA E2 13 
1455d     1F 26 2E 2F 
14561     30 4D 5D 51 
14565     46 49 3A 2D | 	byte	$db, $da, $e2, $13, $1f, $26, $2e, $2f, $30, $4d, $5d, $51, $46, $49, $3a, $2d
14569     22 16 07 00 
1456d     00 ED D0 C3 
14571     BA B4 B0 B2 
14575     B1 B2 C2 DB | 	byte	$22, $16, $07, $00, $00, $ed, $d0, $c3, $ba, $b4, $b0, $b2, $b1, $b2, $c2, $db
14579     DD DC EE 18 
1457d     1F 28 2D 2F 
14581     33 51 5B 4E 
14585     48 44 35 28 | 	byte	$dd, $dc, $ee, $18, $1f, $28, $2d, $2f, $33, $51, $5b, $4e, $48, $44, $35, $28
14589     1E 12 04 00 
1458d     FC E4 CB C3 
14591     BB B5 B3 B5 
14595     B4 B7 CE DD | 	byte	$1e, $12, $04, $00, $fc, $e4, $cb, $c3, $bb, $b5, $b3, $b5, $b4, $b7, $ce, $dd
14599     DE DD F8 1C 
1459d     1F 28 2D 2E 
145a1     39 52 57 48 
145a5     46 3E 31 25 | 	byte	$de, $dd, $f8, $1c, $1f, $28, $2d, $2e, $39, $52, $57, $48, $46, $3e, $31, $25
145a9     19 0D 00 00 
145ad     F7 D9 CB C2 
145b1     BC B7 B7 B8 
145b5     B7 BB D6 DE | 	byte	$19, $0d, $00, $00, $f7, $d9, $cb, $c2, $bc, $b7, $b7, $b8, $b7, $bb, $d6, $de
145b9     DE DF 03 1D 
145bd     20 27 2D 2E 
145c1     3B 53 53 46 
145c5     43 39 2B 20 | 	byte	$de, $df, $03, $1d, $20, $27, $2d, $2e, $3b, $53, $53, $46, $43, $39, $2b, $20
145c9     16 08 00 FF 
145cd     EE D6 CA C3 
145d1     BD B9 BB BA 
145d5     BA C5 DC E0 | 	byte	$16, $08, $00, $ff, $ee, $d6, $ca, $c3, $bd, $b9, $bb, $ba, $ba, $c5, $dc, $e0
145d9     DF E4 09 1D 
145dd     20 28 2C 32 
145e1     3F 51 4F 44 
145e5     3E 33 28 1D | 	byte	$df, $e4, $09, $1d, $20, $28, $2c, $32, $3f, $51, $4f, $44, $3e, $33, $28, $1d
145e9     13 05 00 FA 
145ed     E6 D2 CA C3 
145f1     BE BC BD BD 
145f5     BE CD E0 E2 | 	byte	$13, $05, $00, $fa, $e6, $d2, $ca, $c3, $be, $bc, $bd, $bd, $be, $cd, $e0, $e2
145f9     E1 EB 12 1C 
145fd     21 28 2D 34 
14601     41 4F 4C 41 
14605     3A 2F 23 19 | 	byte	$e1, $eb, $12, $1c, $21, $28, $2d, $34, $41, $4f, $4c, $41, $3a, $2f, $23, $19
14609     0E 01 FD F3 
1460d     DE D1 CA C4 
14611     BF BF C1 BF 
14615     C1 D5 E2 E3 | 	byte	$0e, $01, $fd, $f3, $de, $d1, $ca, $c4, $bf, $bf, $c1, $bf, $c1, $d5, $e2, $e3
14619     E3 F2 17 1C 
1461d     21 27 30 37 
14621     40 4F 47 3E 
14625     36 2B 1E 15 | 	byte	$e3, $f2, $17, $1c, $21, $27, $30, $37, $40, $4f, $47, $3e, $36, $2b, $1e, $15
14629     0A 00 FA EE 
1462d     DC D1 CB C5 
14631     C1 C1 C4 C2 
14635     C7 DC E3 E5 | 	byte	$0a, $00, $fa, $ee, $dc, $d1, $cb, $c5, $c1, $c1, $c4, $c2, $c7, $dc, $e3, $e5
14639     E5 FA 1B 1C 
1463d     22 28 32 38 
14641     3E 4E 44 3A 
14645     31 26 1A 12 | 	byte	$e5, $fa, $1b, $1c, $22, $28, $32, $38, $3e, $4e, $44, $3a, $31, $26, $1a, $12
14649     07 FD F6 E7 
1464d     DB D2 CC C7 
14651     C3 C5 C6 C3 
14655     CE E2 E5 E5 | 	byte	$07, $fd, $f6, $e7, $db, $d2, $cc, $c7, $c3, $c5, $c6, $c3, $ce, $e2, $e5, $e5
14659     E9 00 1B 1D 
1465d     22 2B 35 35 
14661     3D 4C 3F 36 
14665     2D 22 17 0F | 	byte	$e9, $00, $1b, $1d, $22, $2b, $35, $35, $3d, $4c, $3f, $36, $2d, $22, $17, $0f
14669     04 FB F2 E5 
1466d     D9 D2 CD C8 
14671     C6 C8 C8 C7 
14675     D7 E4 E6 E8 | 	byte	$04, $fb, $f2, $e5, $d9, $d2, $cd, $c8, $c6, $c8, $c8, $c7, $d7, $e4, $e6, $e8
14679     EB 0B 1B 1D 
1467d     21 2E 36 33 
14681     41 49 3A 31 
14685     29 1F 13 0C | 	byte	$eb, $0b, $1b, $1d, $21, $2e, $36, $33, $41, $49, $3a, $31, $29, $1f, $13, $0c
14689     00 F7 ED E2 
1468d     D8 D2 CE CA 
14691     C9 CB C9 CB 
14695     DF E6 E8 E9 | 	byte	$00, $f7, $ed, $e2, $d8, $d2, $ce, $ca, $c9, $cb, $c9, $cb, $df, $e6, $e8, $e9
14699     EF 0D 1B 1C 
1469d     24 32 34 2F 
146a1     43 43 35 2D 
146a5     25 1A 11 09 | 	byte	$ef, $0d, $1b, $1c, $24, $32, $34, $2f, $43, $43, $35, $2d, $25, $1a, $11, $09
146a9     FD F3 EB E2 
146ad     D8 D3 CF CD 
146b1     CC CD CB D1 
146b5     E3 E8 E9 EB | 	byte	$fd, $f3, $eb, $e2, $d8, $d3, $cf, $cd, $cc, $cd, $cb, $d1, $e3, $e8, $e9, $eb
146b9     F4 15 1A 1C 
146bd     26 33 30 2F 
146c1     43 3C 30 29 
146c5     21 15 0D 06 | 	byte	$f4, $15, $1a, $1c, $26, $33, $30, $2f, $43, $3c, $30, $29, $21, $15, $0d, $06
146c9     F9 EF E9 E0 
146cd     D9 D4 D0 CF 
146d1     CF CF CD D9 
146d5     E7 EA EB ED | 	byte	$f9, $ef, $e9, $e0, $d9, $d4, $d0, $cf, $cf, $cf, $cd, $d9, $e7, $ea, $eb, $ed
146d9     FB 16 1A 1E 
146dd     2B 33 2C 31 
146e1     41 38 2B 26 
146e5     1C 12 0B 02 | 	byte	$fb, $16, $1a, $1e, $2b, $33, $2c, $31, $41, $38, $2b, $26, $1c, $12, $0b, $02
146e9     F3 EE E9 DF 
146ed     D9 D5 D2 D2 
146f1     D2 D1 D1 DF 
146f5     EA EB ED EF | 	byte	$f3, $ee, $e9, $df, $d9, $d5, $d2, $d2, $d2, $d1, $d1, $df, $ea, $eb, $ed, $ef
146f9     00 19 1A 20 
146fd     2F 30 2A 32 
14701     3E 30 28 22 
14705     19 0E 08 FD | 	byte	$00, $19, $1a, $20, $2f, $30, $2a, $32, $3e, $30, $28, $22, $19, $0e, $08, $fd
14709     EF ED E8 DF 
1470d     DB D6 D5 D4 
14711     D4 D3 D5 E5 
14715     EB EC EE F1 | 	byte	$ef, $ed, $e8, $df, $db, $d6, $d5, $d4, $d4, $d3, $d5, $e5, $eb, $ec, $ee, $f1
14719     08 19 1A 23 
1471d     2F 2C 29 35 
14721     38 2C 25 1E 
14725     14 0C 05 F6 | 	byte	$08, $19, $1a, $23, $2f, $2c, $29, $35, $38, $2c, $25, $1e, $14, $0c, $05, $f6
14729     EE EE E8 E0 
1472d     DC D8 D8 D6 
14731     D7 D5 DB EA 
14735     EC ED F1 F4 | 	byte	$ee, $ee, $e8, $e0, $dc, $d8, $d8, $d6, $d7, $d5, $db, $ea, $ec, $ed, $f1, $f4
14739     0E 18 1B 28 
1473d     2D 28 2A 34 
14741     32 28 22 1A 
14745     12 09 02 F2 | 	byte	$0e, $18, $1b, $28, $2d, $28, $2a, $34, $32, $28, $22, $1a, $12, $09, $02, $f2
14749     EE EE E7 E0 
1474d     DC D9 DA D8 
14751     D8 D7 E1 EC 
14755     ED EF F3 F8 | 	byte	$ee, $ee, $e7, $e0, $dc, $d9, $da, $d8, $d8, $d7, $e1, $ec, $ed, $ef, $f3, $f8
14759     10 18 1E 29 
1475d     2A 25 2B 31 
14761     2C 23 1F 17 
14765     0F 07 FD EF | 	byte	$10, $18, $1e, $29, $2a, $25, $2b, $31, $2c, $23, $1f, $17, $0f, $07, $fd, $ef
14769     F0 EE E6 E1 
1476d     DE DC DC DB 
14771     DA DA E6 EE 
14775     EE F1 F4 FB | 	byte	$f0, $ee, $e6, $e1, $de, $dc, $dc, $db, $da, $da, $e6, $ee, $ee, $f1, $f4, $fb
14779     13 18 20 28 
1477d     26 25 2C 2B 
14781     28 21 1B 14 
14785     0C 04 F7 ED | 	byte	$13, $18, $20, $28, $26, $25, $2c, $2b, $28, $21, $1b, $14, $0c, $04, $f7, $ed
14789     F1 EE E6 E2 
1478d     DF DE DE DC 
14791     DC DD EB F0 
14795     F0 F3 F5 00 | 	byte	$f1, $ee, $e6, $e2, $df, $de, $de, $dc, $dc, $dd, $eb, $f0, $f0, $f3, $f5, $00
14799     14 1A 22 27 
1479d     23 25 2A 24 
147a1     24 1E 18 12 
147a5     0A 00 F3 EF | 	byte	$14, $1a, $22, $27, $23, $25, $2a, $24, $24, $1e, $18, $12, $0a, $00, $f3, $ef
147a9     F2 EE E7 E3 
147ad     E1 E1 DF DF 
147b1     DE E2 EF F1 
147b5     F2 F5 F7 05 | 	byte	$f2, $ee, $e7, $e3, $e1, $e1, $df, $df, $de, $e2, $ef, $f1, $f2, $f5, $f7, $05
147b9     15 1B 23 24 
147bd     21 27 26 1F 
147c1     21 1B 15 10 
147c5     07 FB EF F1 | 	byte	$15, $1b, $23, $24, $21, $27, $26, $1f, $21, $1b, $15, $10, $07, $fb, $ef, $f1
147c9     F2 EE E8 E5 
147cd     E3 E3 E1 E0 
147d1     E0 E6 F1 F2 
147d5     F3 F7 F8 0A | 	byte	$f2, $ee, $e8, $e5, $e3, $e3, $e1, $e0, $e0, $e6, $f1, $f2, $f3, $f7, $f8, $0a
147d9     15 1C 22 20 
147dd     20 28 20 1C 
147e1     1E 18 13 0D 
147e5     02 F6 EF F2 | 	byte	$15, $1c, $22, $20, $20, $28, $20, $1c, $1e, $18, $13, $0d, $02, $f6, $ef, $f2
147e9     F3 EE E9 E7 
147ed     E5 E5 E3 E2 
147f1     E2 E9 F3 F4 
147f5     F5 F9 FB 0C | 	byte	$f3, $ee, $e9, $e7, $e5, $e5, $e3, $e2, $e2, $e9, $f3, $f4, $f5, $f9, $fb, $0c
147f9     16 1D 20 1E 
147fd     21 27 1A 19 
14801     1B 15 10 0B 
14805     FF F4 F0 F4 | 	byte	$16, $1d, $20, $1e, $21, $27, $1a, $19, $1b, $15, $10, $0b, $ff, $f4, $f0, $f4
14809     F3 EE EA E8 
1480d     E8 E7 E4 E5 
14811     E5 EF F5 F5 
14815     F8 FA FE 0E | 	byte	$f3, $ee, $ea, $e8, $e8, $e7, $e4, $e5, $e5, $ef, $f5, $f5, $f8, $fa, $fe, $0e
14819     17 1E 1D 1C 
1481d     21 24 14 17 
14821     18 13 0F 07 
14825     FB F2 F2 F5 | 	byte	$17, $1e, $1d, $1c, $21, $24, $14, $17, $18, $13, $0f, $07, $fb, $f2, $f2, $f5
14829     F3 EF EB EA 
1482d     E9 E8 E6 E7 
14831     E8 F1 F6 F7 
14835     F9 FA 00 11 | 	byte	$f3, $ef, $eb, $ea, $e9, $e8, $e6, $e7, $e8, $f1, $f6, $f7, $f9, $fa, $00, $11
14839     18 1C 1B 1B 
1483d     22 1F 10 14 
14841     15 11 0D 02 
14845     F7 F1 F3 F5 | 	byte	$18, $1c, $1b, $1b, $22, $1f, $10, $14, $15, $11, $0d, $02, $f7, $f1, $f3, $f5
14849     F3 EF ED EC 
1484d     EB E9 E8 E9 
14851     EB F5 F7 F8 
14855     FA FA 03 13 | 	byte	$f3, $ef, $ed, $ec, $eb, $e9, $e8, $e9, $eb, $f5, $f7, $f8, $fa, $fa, $03, $13
14859     19 1A 19 1B 
1485d     21 18 0E 12 
14861     13 0E 0A FF 
14865     F5 F2 F5 F6 | 	byte	$19, $1a, $19, $1b, $21, $18, $0e, $12, $13, $0e, $0a, $ff, $f5, $f2, $f5, $f6
14869     F4 F0 EF EE 
1486d     ED EA EA EB 
14871     EF F7 F8 F9 
14875     FB FB 07 13 | 	byte	$f4, $f0, $ef, $ee, $ed, $ea, $ea, $eb, $ef, $f7, $f8, $f9, $fb, $fb, $07, $13
14879     19 18 17 1C 
1487d     1F 12 0C 10 
14881     10 0D 06 FB 
14885     F5 F3 F6 F7 | 	byte	$19, $18, $17, $1c, $1f, $12, $0c, $10, $10, $0d, $06, $fb, $f5, $f3, $f6, $f7
14889     F4 F1 F0 EF 
1488d     EE EC EC EC 
14891     F2 F8 FA FB 
14895     FC FC 0B 14 | 	byte	$f4, $f1, $f0, $ef, $ee, $ec, $ec, $ec, $f2, $f8, $fa, $fb, $fc, $fc, $0b, $14
14899     17 15 17 1C 
1489d     1A 0E 0A 0E 
148a1     0E 0B 02 F9 
148a5     F5 F5 F8 F7 | 	byte	$17, $15, $17, $1c, $1a, $0e, $0a, $0e, $0e, $0b, $02, $f9, $f5, $f5, $f8, $f7
148a9     F5 F2 F2 F1 
148ad     EF EE EE EF 
148b1     F5 FA FB FC 
148b5     FC FF 0E 14 | 	byte	$f5, $f2, $f2, $f1, $ef, $ee, $ee, $ef, $f5, $fa, $fb, $fc, $fc, $ff, $0e, $14
148b9     15 13 16 1B 
148bd     15 0A 09 0C 
148c1     0C 08 FF F8 
148c5     F6 F6 F8 F8 | 	byte	$15, $13, $16, $1b, $15, $0a, $09, $0c, $0c, $08, $ff, $f8, $f6, $f6, $f8, $f8
148c9     F6 F4 F3 F2 
148cd     F0 F0 F0 F1 
148d1     F8 FB FC FC 
148d5     FD 00 0F 13 | 	byte	$f6, $f4, $f3, $f2, $f0, $f0, $f0, $f1, $f8, $fb, $fc, $fc, $fd, $00, $0f, $13
148d9     13 12 16 19 
148dd     10 08 07 0A 
148e1     0A 05 FD F8 
148e5     F7 F8 F9 F8 | 	byte	$13, $12, $16, $19, $10, $08, $07, $0a, $0a, $05, $fd, $f8, $f7, $f8, $f9, $f8
148e9     F7 F5 F5 F3 
148ed     F2 F1 F2 F4 
148f1     FA FC FC FD 
148f5     FD 03 0F 12 | 	byte	$f7, $f5, $f5, $f3, $f2, $f1, $f2, $f4, $fa, $fc, $fc, $fd, $fd, $03, $0f, $12
148f9     11 11 16 16 
148fd     0B 07 06 08 
14901     08 01 FC F9 
14905     F7 F9 FA F9 | 	byte	$11, $11, $16, $16, $0b, $07, $06, $08, $08, $01, $fc, $f9, $f7, $f9, $fa, $f9
14909     F8 F7 F6 F5 
1490d     F3 F3 F3 F6 
14911     FB FD FD FD 
14915     FE 06 0F 10 | 	byte	$f8, $f7, $f6, $f5, $f3, $f3, $f3, $f6, $fb, $fd, $fd, $fd, $fe, $06, $0f, $10
14919     0E 10 14 11 
1491d     08 06 04 07 
14921     06 00 FB FA 
14925     F9 FA FB FA | 	byte	$0e, $10, $14, $11, $08, $06, $04, $07, $06, $00, $fb, $fa, $f9, $fa, $fb, $fa
14929     F9 F8 F7 F6 
1492d     F5 F5 F5 F8 
14931     FD FD FE FE 
14935     FF 09 0E 0E | 	byte	$f9, $f8, $f7, $f6, $f5, $f5, $f5, $f8, $fd, $fd, $fe, $fe, $ff, $09, $0e, $0e
14939     0D 10 12 0D 
1493d     06 05 03 06 
14941     03 FE FB FA 
14945     FA FB FB FB | 	byte	$0d, $10, $12, $0d, $06, $05, $03, $06, $03, $fe, $fb, $fa, $fa, $fb, $fb, $fb
14949     FA F9 F8 F7 
1494d     F6 F6 F7 FA 
14951     FD FE FE FE 
14955     00 0A 0C 0B | 	byte	$fa, $f9, $f8, $f7, $f6, $f6, $f7, $fa, $fd, $fe, $fe, $fe, $00, $0a, $0c, $0b
14959     0C 0F 0F 09 
1495d     04 04 02 04 
14961     01 FE FC 00 
14965     00 00 00 B6 | 	byte	$0c, $0f, $0f, $09, $04, $04, $02, $04, $01, $fe, $fc, $00, $00, $00, $00, $b6
14969     91 91 9C 82 
1496d     80 81 81 81 
14971     81 81 81 81 
14975     81 81 81 8F | 	byte	$91, $91, $9c, $82, $80, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $8f
14979     82 87 86 A6 
1497d     A7 9B CE 95 
14981     AB EC 87 67 
14985     E8 80 BF 7F | 	byte	$82, $87, $86, $a6, $a7, $9b, $ce, $95, $ab, $ec, $87, $67, $e8, $80, $bf, $7f
14989     C0 B7 E0 87 
1498d     57 7F 60 7F 
14991     7F 7F 7F 7F 
14995     7F 7F 7F 7F | 	byte	$c0, $b7, $e0, $87, $57, $7f, $60, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
14999     7F 7F 7F 7F 
      ...             
149b5     7F 7F 7F 7F 
149b9     7F 7F 7F 7F | 	byte	$7f[36]
149bd     7B 64 4C 31 
149c1     1A 04 EC D6 
149c5     C0 AB 9D 90 
149c9     82 81 81 81 | 	byte	$7b, $64, $4c, $31, $1a, $04, $ec, $d6, $c0, $ab, $9d, $90, $82, $81, $81, $81
149cd     81 81 81 81 
      ...             
14a15     81 81 81 81 
14a19     81 81 81 81 | 	byte	$81[80]
14a1d     83 9C AF C7 
14a21     D9 EC 11 1F 
14a25     2E 46 4E 5D 
14a29     76 7F 7F 7F | 	byte	$83, $9c, $af, $c7, $d9, $ec, $11, $1f, $2e, $46, $4e, $5d, $76, $7f, $7f, $7f
14a2d     7F 7F 7F 7F 
      ...             
14a71     7F 7F 7F 7F 
14a75     7F 7F       | 	byte	$7f[74]
14a77     7B 69 4A 44 
14a7b     58 46 32 30 
14a7f     2A 04 06 15 
14a83     06 0D 00 D4 | 	byte	$7b, $69, $4a, $44, $58, $46, $32, $30, $2a, $04, $06, $15, $06, $0d, $00, $d4
14a87     D7 E5 D0 CB 
14a8b     D0 A5 B4 B0 
14a8f     98 8B 9A 8C 
14a93     8D 81 81 81 | 	byte	$d7, $e5, $d0, $cb, $d0, $a5, $b4, $b0, $98, $8b, $9a, $8c, $8d, $81, $81, $81
14a97     81 81 81 81 
      ...             
14b13     81 81 81 81 
14b17     81 81 81    | 	byte	$81[131]
14b1a     84 81 86 9A 
14b1e     8D A5 A3 9F 
14b22     C6 D0 B7 D1 
14b26     DE E6 F3 FD | 	byte	$84, $81, $86, $9a, $8d, $a5, $a3, $9f, $c6, $d0, $b7, $d1, $de, $e6, $f3, $fd
14b2a     F7 14 0D 25 
14b2e     20 17 43 42 
14b32     37 43 35 45 
14b36     68 5C 59 46 | 	byte	$f7, $14, $0d, $25, $20, $17, $43, $42, $37, $43, $35, $45, $68, $5c, $59, $46
14b3a     5D 5C 6A 68 
14b3e     71 71 72 7F 
14b42     74 7F 7F 7F 
14b46     7F 7F 7F 7F | 	byte	$5d, $5c, $6a, $68, $71, $71, $72, $7f, $74, $7f, $7f, $7f, $7f, $7f, $7f, $7f
14b4a     7F 7F 7F 7F 
      ...             
14b66     7F 7F 7F 7F 
14b6a     7F 7F 7F    | 	byte	$7f[35]
14b6d     74 5D 79 72 
14b71     4B 54 49 3B 
14b75     44 38 1C 25 
14b79     27 1A 2F 28 | 	byte	$74, $5d, $79, $72, $4b, $54, $49, $3b, $44, $38, $1c, $25, $27, $1a, $2f, $28
14b7d     22 31 18 1E 
14b81     2B 35 32 24 
14b85     34 24 18 36 
14b89     24 13 2D 2E | 	byte	$22, $31, $18, $1e, $2b, $35, $32, $24, $34, $24, $18, $36, $24, $13, $2d, $2e
14b8d     21 25 1D 0E 
14b91     29 28 0E 0A 
14b95     08 FB 01 09 
14b99     12 ED F1 F7 | 	byte	$21, $25, $1d, $0e, $29, $28, $0e, $0a, $08, $fb, $01, $09, $12, $ed, $f1, $f7
14b9d     EA EA EC D6 
14ba1     DD E5 DE DD 
14ba5     CA C5 D0 C8 
14ba9     B6 BF C2 C3 | 	byte	$ea, $ea, $ec, $d6, $dd, $e5, $de, $dd, $ca, $c5, $d0, $c8, $b6, $bf, $c2, $c3
14bad     BC B2 CB B4 
14bb1     B1 B9 9B A7 
14bb5     A0 8B 8F 8D 
14bb9     90 95 88 81 | 	byte	$bc, $b2, $cb, $b4, $b1, $b9, $9b, $a7, $a0, $8b, $8f, $8d, $90, $95, $88, $81
14bbd     81 83 81 81 
14bc1     81 81 81 81 
14bc5     87 81 8B 95 
14bc9     81 8B 91 87 | 	byte	$81, $83, $81, $81, $81, $81, $81, $81, $87, $81, $8b, $95, $81, $8b, $91, $87
14bcd     A5 A2 88 87 
14bd1     AF 94 8F 9C 
14bd5     88 91 96 93 
14bd9     97 99 AA 9B | 	byte	$a5, $a2, $88, $87, $af, $94, $8f, $9c, $88, $91, $96, $93, $97, $99, $aa, $9b
14bdd     99 AF A4 AF 
14be1     B6 AC B3 CE 
14be5     C0 BE D9 CD 
14be9     D7 DC CC CF | 	byte	$99, $af, $a4, $af, $b6, $ac, $b3, $ce, $c0, $be, $d9, $cd, $d7, $dc, $cc, $cf
14bed     E8 D2 D6 DB 
14bf1     D8 D0 E7 E2 
14bf5     DC E5 F2 EA 
14bf9     F3 07 FC 09 | 	byte	$e8, $d2, $d6, $db, $d8, $d0, $e7, $e2, $dc, $e5, $f2, $ea, $f3, $07, $fc, $09
14bfd     17 11 13 20 
14c01     24 2F 3F 34 
14c05     3F 63 4C 57 
14c09     74 6D 7B 7F | 	byte	$17, $11, $13, $20, $24, $2f, $3f, $34, $3f, $63, $4c, $57, $74, $6d, $7b, $7f
14c0d     77 7D 7F 7F 
14c11     7F 7F 7F 7F 
14c15     7F 7F 7F 7F 
14c19     7F 7F 7F 7F | 	byte	$77, $7d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
14c1d     7F 7F 7F 7F 
14c21     7F 7F 7F 7F 
14c25     7F 7F 7F 7F 
14c29     7F 7F 7F 7F 
14c2d     7F 7F 7F    | 	byte	$7f[19]
14c30     68 6E 6F 63 
14c34     61 5C 46 4A 
14c38     49 2E 34 3A 
14c3c     1F 25 1C 05 | 	byte	$68, $6e, $6f, $63, $61, $5c, $46, $4a, $49, $2e, $34, $3a, $1f, $25, $1c, $05
14c40     13 19 02 04 
14c44     F9 F2 F4 EB 
14c48     E0 D3 DA D5 
14c4c     B8 BA B2 AB | 	byte	$13, $19, $02, $04, $f9, $f2, $f4, $eb, $e0, $d3, $da, $d5, $b8, $ba, $b2, $ab
14c50     B6 98 87 89 
14c54     83 81 81 81 
14c58     81 81 81 81 
14c5c     81 81 81 81 | 	byte	$b6, $98, $87, $89, $83, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
14c60     81 81 81 81 
      ...             
14c8c     81 81 81 81 
14c90     81 81 81 81 | 	byte	$81[52]
14c94     87 90 8B 9B 
14c98     A4 A7 A9 B7 
14c9c     B8 C3 D4 CE 
14ca0     D2 E7 E4 EB | 	byte	$87, $90, $8b, $9b, $a4, $a7, $a9, $b7, $b8, $c3, $d4, $ce, $d2, $e7, $e4, $eb
14ca4     FC FB 04 10 
14ca8     18 13 1F 24 
14cac     27 3B 2D 2F 
14cb0     43 3F 46 4A | 	byte	$fc, $fb, $04, $10, $18, $13, $1f, $24, $27, $3b, $2d, $2f, $43, $3f, $46, $4a
14cb4     49 4C 52 55 
14cb8     4B 51 5F 5D 
14cbc     52 55 5B 5C 
14cc0     65 5A 4F 63 | 	byte	$49, $4c, $52, $55, $4b, $51, $5f, $5d, $52, $55, $5b, $5c, $65, $5a, $4f, $63
14cc4     55 4F 53 4C 
14cc8     53 53 4B 3E 
14ccc     45 41 41 45 
14cd0     3F 3F 3B 37 | 	byte	$55, $4f, $53, $4c, $53, $53, $4b, $3e, $45, $41, $41, $45, $3f, $3f, $3b, $37
14cd4     36 3C 48 2D 
14cd8     2B 37 29 25 
14cdc     28 21 22 24 
14ce0     18 10 19 0A | 	byte	$36, $3c, $48, $2d, $2b, $37, $29, $25, $28, $21, $22, $24, $18, $10, $19, $0a
14ce4     11 12 00 0A 
14ce8     08 FA 01 00 
14cec     FA FF FC F5 
14cf0     F7 F7 F2 F6 | 	byte	$11, $12, $00, $0a, $08, $fa, $01, $00, $fa, $ff, $fc, $f5, $f7, $f7, $f2, $f6
14cf4     F5 F0 EE EF 
14cf8     EF E9 EC E2 
14cfc     E2 DF DF D9 
14d00     DF DB CF DB | 	byte	$f5, $f0, $ee, $ef, $ef, $e9, $ec, $e2, $e2, $df, $df, $d9, $df, $db, $cf, $db
14d04     DA CC D5 D0 
14d08     D4 D8 D0 D4 
14d0c     D6 DD E0 DF 
14d10     E2 E6 E8 E8 | 	byte	$da, $cc, $d5, $d0, $d4, $d8, $d0, $d4, $d6, $dd, $e0, $df, $e2, $e6, $e8, $e8
14d14     F0 F7 FC 03 
14d18     FB 01 12 0E 
14d1c     15 11 18 21 
14d20     20 1C 29 2E | 	byte	$f0, $f7, $fc, $03, $fb, $01, $12, $0e, $15, $11, $18, $21, $20, $1c, $29, $2e
14d24     29 33 2F 2F 
14d28     3D 3F 3A 3D 
14d2c     4A 49 4E 53 
14d30     53 57 66 60 | 	byte	$29, $33, $2f, $2f, $3d, $3f, $3a, $3d, $4a, $49, $4e, $53, $53, $57, $66, $60
14d34     5F 66 66 67 
14d38     72 6E 6D 77 
14d3c     6F 6E 7E 74 
14d40     73 7F 76 74 | 	byte	$5f, $66, $66, $67, $72, $6e, $6d, $77, $6f, $6e, $7e, $74, $73, $7f, $76, $74
14d44     7C 7B 7A 7A 
14d48     78 7A 7F 7E 
14d4c     75 7B 7F 7E 
14d50     7F 79 7F 7D | 	byte	$7c, $7b, $7a, $7a, $78, $7a, $7f, $7e, $75, $7b, $7f, $7e, $7f, $79, $7f, $7d
14d54     78 77 76 79 
14d58     6D 6D 70 6C 
14d5c     6D 61 61 5D 
14d60     5F 5B 53 54 | 	byte	$78, $77, $76, $79, $6d, $6d, $70, $6c, $6d, $61, $61, $5d, $5f, $5b, $53, $54
14d64     51 4A 4A 41 
14d68     3C 35 38 31 
14d6c     22 2A 23 10 
14d70     15 0C 05 07 | 	byte	$51, $4a, $4a, $41, $3c, $35, $38, $31, $22, $2a, $23, $10, $15, $0c, $05, $07
14d74     00 F0 F6 E8 
14d78     E1 E8 DE D9 
14d7c     D8 D0 CB C9 
14d80     C7 BD B6 B1 | 	byte	$00, $f0, $f6, $e8, $e1, $e8, $de, $d9, $d8, $d0, $cb, $c9, $c7, $bd, $b6, $b1
14d84     A9 A7 A6 98 
14d88     90 95 8E 8A 
14d8c     87 81 82 82 
14d90     81 81 82 81 | 	byte	$a9, $a7, $a6, $98, $90, $95, $8e, $8a, $87, $81, $82, $82, $81, $81, $82, $81
14d94     81 81 81 81 
14d98     81 81 81 81 
14d9c     81          | 	byte	$81[9]
14d9d     82 83 82 82 
14da1     84 85 82 89 
14da5     88 86 87 89 
14da9     88 90 92 8D | 	byte	$82, $83, $82, $82, $84, $85, $82, $89, $88, $86, $87, $89, $88, $90, $92, $8d
14dad     97 9A 92 9F 
14db1     9F 9C A7 A4 
14db5     9C AB AD AA 
14db9     B2 B0 AB B7 | 	byte	$97, $9a, $92, $9f, $9f, $9c, $a7, $a4, $9c, $ab, $ad, $aa, $b2, $b0, $ab, $b7
14dbd     B7 B5 BA BB 
14dc1     BC BC BD C2 
14dc5     C0 C5 BE C3 
14dc9     C5 C4 C5 C9 | 	byte	$b7, $b5, $ba, $bb, $bc, $bc, $bd, $c2, $c0, $c5, $be, $c3, $c5, $c4, $c5, $c9
14dcd     C2 C3 CB C6 
14dd1     C7 CE C9 C7 
14dd5     C6 D2 D2 CF 
14dd9     D1 DD D8 DB | 	byte	$c2, $c3, $cb, $c6, $c7, $ce, $c9, $c7, $c6, $d2, $d2, $cf, $d1, $dd, $d8, $db
14ddd     DB DB E1 E9 
14de1     EA E9 E2 E6 
14de5     F0 EE E7 F1 
14de9     F5 F7 FD F5 | 	byte	$db, $db, $e1, $e9, $ea, $e9, $e2, $e6, $f0, $ee, $e7, $f1, $f5, $f7, $fd, $f5
14ded     F9 09 04 05 
14df1     0E 0E 15 20 
14df5     17 1C 1F 21 
14df9     2B 32 2E 33 | 	byte	$f9, $09, $04, $05, $0e, $0e, $15, $20, $17, $1c, $1f, $21, $2b, $32, $2e, $33
14dfd     31 33 3C 37 
14e01     3E 37 34 42 
14e05     3C 37 3F 38 
14e09     38 38 35 35 | 	byte	$31, $33, $3c, $37, $3e, $37, $34, $42, $3c, $37, $3f, $38, $38, $38, $35, $35
14e0d     36 34 35 36 
14e11     33 38 32 33 
14e15     37 37 34 3B 
14e19     32 37 3B 3E | 	byte	$36, $34, $35, $36, $33, $38, $32, $33, $37, $37, $34, $3b, $32, $37, $3b, $3e
14e1d     3C 3A 37 3B 
14e21     39 37 45 3D 
14e25     3C 3B 33 3E 
14e29     40 3B 3F 3C | 	byte	$3c, $3a, $37, $3b, $39, $37, $45, $3d, $3c, $3b, $33, $3e, $40, $3b, $3f, $3c
14e2d     38 40 40 44 
14e31     48 40 3D 4E 
14e35     48 4A 4E 44 
14e39     47 50 46 49 | 	byte	$38, $40, $40, $44, $48, $40, $3d, $4e, $48, $4a, $4e, $44, $47, $50, $46, $49
14e3d     49 45 46 46 
14e41     3D 3B 43 42 
14e45     38 38 33 2F 
14e49     31 36 24 2A | 	byte	$49, $45, $46, $46, $3d, $3b, $43, $42, $38, $38, $33, $2f, $31, $36, $24, $2a
14e4d     27 1F 20 1C 
14e51     12 1E 13 0D 
14e55     16 0D 06 09 
14e59     08 06 01 01 | 	byte	$27, $1f, $20, $1c, $12, $1e, $13, $0d, $16, $0d, $06, $09, $08, $06, $01, $01
14e5d     01 01 FF FC 
14e61     FE 01 FB F8 
14e65     00 FE FD 01 
14e69     F8 FA 00 F8 | 	byte	$01, $01, $ff, $fc, $fe, $01, $fb, $f8, $00, $fe, $fd, $01, $f8, $fa, $00, $f8
14e6d     FF 02 FB 02 
14e71     03 07 04 05 
14e75     0A 08 0E 0C 
14e79     0E 0F 0C 16 | 	byte	$ff, $02, $fb, $02, $03, $07, $04, $05, $0a, $08, $0e, $0c, $0e, $0f, $0c, $16
14e7d     12 10 0A 0F 
14e81     0E 0B 0D 01 
14e85     03 04 FB FB 
14e89     F3 F1 F2 EB | 	byte	$12, $10, $0a, $0f, $0e, $0b, $0d, $01, $03, $04, $fb, $fb, $f3, $f1, $f2, $eb
14e8d     E7 E5 DF DC 
14e91     D6 E1 DA D5 
14e95     D5 D1 CD D0 
14e99     D0 C9 CB D0 | 	byte	$e7, $e5, $df, $dc, $d6, $e1, $da, $d5, $d5, $d1, $cd, $d0, $d0, $c9, $cb, $d0
14e9d     C7 C7 C9 C3 
14ea1     C8 C8 C0 BE 
14ea5     C5 C4 C4 C0 
14ea9     C4 CC C8 C7 | 	byte	$c7, $c7, $c9, $c3, $c8, $c8, $c0, $be, $c5, $c4, $c4, $c0, $c4, $cc, $c8, $c7
14ead     CF D3 D7 DC 
14eb1     D2 DD E3 EB 
14eb5     EC EE F5 FD 
14eb9     FD 00 01 01 | 	byte	$cf, $d3, $d7, $dc, $d2, $dd, $e3, $eb, $ec, $ee, $f5, $fd, $fd, $00, $01, $01
14ebd     0E 0B 01 0A 
14ec1     10 09 0B 11 
14ec5     0C 07 10 0B 
14ec9     0A 16 11 10 | 	byte	$0e, $0b, $01, $0a, $10, $09, $0b, $11, $0c, $07, $10, $0b, $0a, $16, $11, $10
14ecd     10 08 0B 19 
14ed1     12 0C 11 13 
14ed5     0B 0E 08 0B 
14ed9     11 0D 03 06 | 	byte	$10, $08, $0b, $19, $12, $0c, $11, $13, $0b, $0e, $08, $0b, $11, $0d, $03, $06
14edd     04 FE 08 02 
14ee1     F1 F6 00 FD 
14ee5     FB F9 F1 F7 
14ee9     01 F0 F4 FC | 	byte	$04, $fe, $08, $02, $f1, $f6, $00, $fd, $fb, $f9, $f1, $f7, $01, $f0, $f4, $fc
14eed     F7 F5 FA F6 
14ef1     F4 F2 EF F7 
14ef5     EF ED EB E6 
14ef9     DF E1 D6 DC | 	byte	$f7, $f5, $fa, $f6, $f4, $f2, $ef, $f7, $ef, $ed, $eb, $e6, $df, $e1, $d6, $dc
14efd     D4 CB CE C6 
14f01     C9 CB C2 C1 
14f05     C3 BE BF BA 
14f09     BB BA B8 BB | 	byte	$d4, $cb, $ce, $c6, $c9, $cb, $c2, $c1, $c3, $be, $bf, $ba, $bb, $ba, $b8, $bb
14f0d     B8 B8 C1 C0 
14f11     B9 BF BA B4 
14f15     C3 C2 BF CB 
14f19     CA C4 CA CE | 	byte	$b8, $b8, $c1, $c0, $b9, $bf, $ba, $b4, $c3, $c2, $bf, $cb, $ca, $c4, $ca, $ce
14f1d     C9 CD DB D9 
14f21     DA DF DE E9 
14f25     ED E2 EB F7 
14f29     F7 FD 06 FC | 	byte	$c9, $cd, $db, $d9, $da, $df, $de, $e9, $ed, $e2, $eb, $f7, $f7, $fd, $06, $fc
14f2d     06 16 11 17 
14f31     1F 1D 29 2A 
14f35     27 2C 31 30 
14f39     31 37 38 3D | 	byte	$06, $16, $11, $17, $1f, $1d, $29, $2a, $27, $2c, $31, $30, $31, $37, $38, $3d
14f3d     3E 37 42 46 
14f41     3E 3A 48 4B 
14f45     47 49 47 4D 
14f49     53 54 55 51 | 	byte	$3e, $37, $42, $46, $3e, $3a, $48, $4b, $47, $49, $47, $4d, $53, $54, $55, $51
14f4d     50 59 5D 56 
14f51     4E 59 54 4A 
14f55     4B 4A 4F 4F 
14f59     44 43 41 43 | 	byte	$50, $59, $5d, $56, $4e, $59, $54, $4a, $4b, $4a, $4f, $4f, $44, $43, $41, $43
14f5d     44 40 40 40 
14f61     38 3C 3A 36 
14f65     30 30 32 2D 
14f69     24 23 24 19 | 	byte	$44, $40, $40, $40, $38, $3c, $3a, $36, $30, $30, $32, $2d, $24, $23, $24, $19
14f6d     18 18 08 07 
14f71     03 00 FD F1 
14f75     EA EC EB E4 
14f79     DB DF DA D2 | 	byte	$18, $18, $08, $07, $03, $00, $fd, $f1, $ea, $ec, $eb, $e4, $db, $df, $da, $d2
14f7d     D7 C9 C3 C1 
14f81     BC BC B9 AF 
14f85     AB AE B0 A1 
14f89     A6 AB A4 A1 | 	byte	$d7, $c9, $c3, $c1, $bc, $bc, $b9, $af, $ab, $ae, $b0, $a1, $a6, $ab, $a4, $a1
14f8d     9E 9C 9E 9F 
14f91     9B 9D 99 A3 
14f95     A6 A2 A6 AB 
14f99     AB B3 B1 AC | 	byte	$9e, $9c, $9e, $9f, $9b, $9d, $99, $a3, $a6, $a2, $a6, $ab, $ab, $b3, $b1, $ac
14f9d     BA C2 C4 BE 
14fa1     C9 D2 D1 CE 
14fa5     D9 DC DE E9 
14fa9     E0 E0 E9 EA | 	byte	$ba, $c2, $c4, $be, $c9, $d2, $d1, $ce, $d9, $dc, $de, $e9, $e0, $e0, $e9, $ea
14fad     F4 F5 F0 F5 
14fb1     F9 FE 01 07 
14fb5     0A 0B 0D 11 
14fb9     15 19 25 1E | 	byte	$f4, $f5, $f0, $f5, $f9, $fe, $01, $07, $0a, $0b, $0d, $11, $15, $19, $25, $1e
14fbd     25 2F 29 2B 
14fc1     2F 33 3A 3F 
14fc5     3B 3C 41 45 
14fc9     43 47 47 4A | 	byte	$25, $2f, $29, $2b, $2f, $33, $3a, $3f, $3b, $3c, $41, $45, $43, $47, $47, $4a
14fcd     4E 57 51 53 
14fd1     59 55 62 6A 
14fd5     5A 63 6D 69 
14fd9     6B 72 6E 70 | 	byte	$4e, $57, $51, $53, $59, $55, $62, $6a, $5a, $63, $6d, $69, $6b, $72, $6e, $70
14fdd     6C 70 6F 70 
14fe1     6D 6D 6E 6B 
14fe5     69 69 69 5E 
14fe9     67 68 5F 63 | 	byte	$6c, $70, $6f, $70, $6d, $6d, $6e, $6b, $69, $69, $69, $5e, $67, $68, $5f, $63
14fed     60 55 62 56 
14ff1     4E 52 4B 48 
14ff5     42 41 41 36 
14ff9     35 37 31 2E | 	byte	$60, $55, $62, $56, $4e, $52, $4b, $48, $42, $41, $41, $36, $35, $37, $31, $2e
14ffd     25 1F 20 1D 
15001     17 13 10 10 
15005     08 01 02 06 
15009     FC FD F4 E9 | 	byte	$25, $1f, $20, $1d, $17, $13, $10, $10, $08, $01, $02, $06, $fc, $fd, $f4, $e9
1500d     F2 EC E5 E0 
15011     D2 D9 D6 D2 
15015     CF CD CC CA 
15019     C7 C9 C7 C7 | 	byte	$f2, $ec, $e5, $e0, $d2, $d9, $d6, $d2, $cf, $cd, $cc, $ca, $c7, $c9, $c7, $c7
1501d     C9 CA C7 CC 
15021     CA CB CE CC 
15025     CC CE CE CD 
15029     D0 CB CB CC | 	byte	$c9, $ca, $c7, $cc, $ca, $cb, $ce, $cc, $cc, $ce, $ce, $cd, $d0, $cb, $cb, $cc
1502d     C9 D0 CC C6 
15031     CB CA C9 D0 
15035     CF CD CD CD 
15039     D2 D2 CB CF | 	byte	$c9, $d0, $cc, $c6, $cb, $ca, $c9, $d0, $cf, $cd, $cd, $cd, $d2, $d2, $cb, $cf
1503d     D1 CA D2 D0 
15041     CE D5 D3 D3 
15045     D4 CC CF D3 
15049     D1 D0 D0 CC | 	byte	$d1, $ca, $d2, $d0, $ce, $d5, $d3, $d3, $d4, $cc, $cf, $d3, $d1, $d0, $d0, $cc
1504d     CE CA CC CA 
15051     CD D0 C7 CF 
15055     CF C9 C6 CE 
15059     CD D0 CF C9 | 	byte	$ce, $ca, $cc, $ca, $cd, $d0, $c7, $cf, $cf, $c9, $c6, $ce, $cd, $d0, $cf, $c9
1505d     CC D8 D1 D1 
15061     D2 D1 D7 DD 
15065     D8 D7 DA DD 
15069     D4 D8 D3 D5 | 	byte	$cc, $d8, $d1, $d1, $d2, $d1, $d7, $dd, $d8, $d7, $da, $dd, $d4, $d8, $d3, $d5
1506d     DD D4 C9 CF 
15071     D3 D1 D0 D0 
15075     CF D0 D0 CF 
15079     D2 D6 D5 D5 | 	byte	$dd, $d4, $c9, $cf, $d3, $d1, $d0, $d0, $cf, $d0, $d0, $cf, $d2, $d6, $d5, $d5
1507d     DA D5 D7 DF 
15081     DD DD E3 DD 
15085     E2 E7 DB DF 
15089     E6 DE DB DD | 	byte	$da, $d5, $d7, $df, $dd, $dd, $e3, $dd, $e2, $e7, $db, $df, $e6, $de, $db, $dd
1508d     DD DD DD DE 
15091     E0 DB E1 E0 
15095     E3 E6 E4 E8 
15099     EA ED F1 F2 | 	byte	$dd, $dd, $dd, $de, $e0, $db, $e1, $e0, $e3, $e6, $e4, $e8, $ea, $ed, $f1, $f2
1509d     F2 F8 F8 F8 
150a1     FE 00 00 0C 
150a5     0A 0C 0D 0F 
150a9     17 16 14 19 | 	byte	$f2, $f8, $f8, $f8, $fe, $00, $00, $0c, $0a, $0c, $0d, $0f, $17, $16, $14, $19
150ad     1A 1F 21 1E 
150b1     23 29 2A 2B 
150b5     25 2D 36 2F 
150b9     32 33 32 3A | 	byte	$1a, $1f, $21, $1e, $23, $29, $2a, $2b, $25, $2d, $36, $2f, $32, $33, $32, $3a
150bd     39 34 3D 41 
150c1     3C 3E 3C 3E 
150c5     4A 45 3D 43 
150c9     45 43 44 40 | 	byte	$39, $34, $3d, $41, $3c, $3e, $3c, $3e, $4a, $45, $3d, $43, $45, $43, $44, $40
150cd     38 3B 3F 37 
150d1     39 38 30 33 
150d5     30 2C 32 2D 
150d9     27 2D 2C 2D | 	byte	$38, $3b, $3f, $37, $39, $38, $30, $33, $30, $2c, $32, $2d, $27, $2d, $2c, $2d
150dd     30 2F 2A 31 
150e1     31 2C 33 33 
150e5     2D 31 33 2D 
150e9     2C 2F 2F 2F | 	byte	$30, $2f, $2a, $31, $31, $2c, $33, $33, $2d, $31, $33, $2d, $2c, $2f, $2f, $2f
150ed     30 23 28 28 
150f1     23 2D 2B 22 
150f5     27 26 23 27 
150f9     28 29 2A 28 | 	byte	$30, $23, $28, $28, $23, $2d, $2b, $22, $27, $26, $23, $27, $28, $29, $2a, $28
150fd     23 28 2B 2F 
15101     2C 29 28 2A 
15105     26 25 26 24 
15109     21 23 20 18 | 	byte	$23, $28, $2b, $2f, $2c, $29, $28, $2a, $26, $25, $26, $24, $21, $23, $20, $18
1510d     1F 1E 1A 17 
15111     17 0D 12 12 
15115     06 0D 12 09 
15119     01 06 08 09 | 	byte	$1f, $1e, $1a, $17, $17, $0d, $12, $12, $06, $0d, $12, $09, $01, $06, $08, $09
1511d     05 04 07 09 
15121     09 09 06 08 
15125     0D 09 0C 0A 
15129     07 0D 0F 09 | 	byte	$05, $04, $07, $09, $09, $09, $06, $08, $0d, $09, $0c, $0a, $07, $0d, $0f, $09
1512d     06 0B 09 08 
15131     06 06 08 09 
15135     02 02 08 08 
15139     05 0B 04 03 | 	byte	$06, $0b, $09, $08, $06, $06, $08, $09, $02, $02, $08, $08, $05, $0b, $04, $03
1513d     09 07 03 05 
15141     08 04 04 FC 
15145     FA 00 FC F5 
15149     F3 F1 F1 ED | 	byte	$09, $07, $03, $05, $08, $04, $04, $fc, $fa, $00, $fc, $f5, $f3, $f1, $f1, $ed
1514d     E5 EA EB E4 
15151     E2 E0 DC DF 
15155     DE DA D9 D7 
15159     D5 D5 D5 D2 | 	byte	$e5, $ea, $eb, $e4, $e2, $e0, $dc, $df, $de, $da, $d9, $d7, $d5, $d5, $d5, $d2
1515d     D0 CE CC CB 
15161     C9 C9 C7 C5 
15165     C3 C2 C4 C3 
15169     C3 C4 C0 C4 | 	byte	$d0, $ce, $cc, $cb, $c9, $c9, $c7, $c5, $c3, $c2, $c4, $c3, $c3, $c4, $c0, $c4
1516d     C2 C3 C4 C1 
15171     C1 C2 C1 BF 
15175     BD C0 BF BE 
15179     BB BC BC BA | 	byte	$c2, $c3, $c4, $c1, $c1, $c2, $c1, $bf, $bd, $c0, $bf, $be, $bb, $bc, $bc, $ba
1517d     C1 C0 B8 BD 
15181     C2 C3 C2 C2 
15185     BD C4 C9 C6 
15189     C4 C1 C6 C6 | 	byte	$c1, $c0, $b8, $bd, $c2, $c3, $c2, $c2, $bd, $c4, $c9, $c6, $c4, $c1, $c6, $c6
1518d     C7 C4 C2 C6 
15191     C9 C4 C7 C5 
15195     C7 CC CA C7 
15199     CE D0 CF D8 | 	byte	$c7, $c4, $c2, $c6, $c9, $c4, $c7, $c5, $c7, $cc, $ca, $c7, $ce, $d0, $cf, $d8
1519d     D8 D9 DB DA 
151a1     DF E4 E2 E6 
151a5     E6 E8 E8 EB 
151a9     F0 F1 F3 F9 | 	byte	$d8, $d9, $db, $da, $df, $e4, $e2, $e6, $e6, $e8, $e8, $eb, $f0, $f1, $f3, $f9
151ad     FC FD 02 05 
151b1     07 10 0E 11 
151b5     18 1A 1F 1F 
151b9     1E 27 28 27 | 	byte	$fc, $fd, $02, $05, $07, $10, $0e, $11, $18, $1a, $1f, $1f, $1e, $27, $28, $27
151bd     27 24 26 2D 
151c1     2F 2B 27 2C 
151c5     2F 2C 2D 30 
151c9     2F 31 35 35 | 	byte	$27, $24, $26, $2d, $2f, $2b, $27, $2c, $2f, $2c, $2d, $30, $2f, $31, $35, $35
151cd     35 39 38 39 
151d1     3B 3A 38 3D 
151d5     3C 38 38 3A 
151d9     38 3A 33 36 | 	byte	$35, $39, $38, $39, $3b, $3a, $38, $3d, $3c, $38, $38, $3a, $38, $3a, $33, $36
151dd     3A 36 37 36 
151e1     32 35 37 37 
151e5     32 31 34 33 
151e9     35 34 31 32 | 	byte	$3a, $36, $37, $36, $32, $35, $37, $37, $32, $31, $34, $33, $35, $34, $31, $32
151ed     33 2D 2F 2E 
151f1     2B 2D 29 26 
151f5     2C 27 23 2B 
151f9     21 1F 23 1E | 	byte	$33, $2d, $2f, $2e, $2b, $2d, $29, $26, $2c, $27, $23, $2b, $21, $1f, $23, $1e
151fd     1C 20 1A 19 
15201     1B 18 14 19 
15205     16 0F 13 0F 
15209     0B 0E 0E 07 | 	byte	$1c, $20, $1a, $19, $1b, $18, $14, $19, $16, $0f, $13, $0f, $0b, $0e, $0e, $07
1520d     0A 10 08 05 
15211     0A 06 08 0E 
15215     08 07 08 06 
15219     06 06 01 02 | 	byte	$0a, $10, $08, $05, $0a, $06, $08, $0e, $08, $07, $08, $06, $06, $06, $01, $02
1521d     02 FC FB FA 
15221     FA FA F5 F2 
15225     F0 F3 F1 EA 
15229     E8 E7 E8 E6 | 	byte	$02, $fc, $fb, $fa, $fa, $fa, $f5, $f2, $f0, $f3, $f1, $ea, $e8, $e7, $e8, $e6
1522d     E4 E5 E0 E2 
15231     E3 E0 DF E0 
15235     DE DC D8 D7 
15239     DA DA D6 D6 | 	byte	$e4, $e5, $e0, $e2, $e3, $e0, $df, $e0, $de, $dc, $d8, $d7, $da, $da, $d6, $d6
1523d     D6 D4 D8 D7 
15241     D5 D8 D9 D8 
15245     D5 D9 D9 D8 
15249     DA D9 DB DF | 	byte	$d6, $d4, $d8, $d7, $d5, $d8, $d9, $d8, $d5, $d9, $d9, $d8, $da, $d9, $db, $df
1524d     DC DE E0 E1 
15251     E2 E5 E3 E1 
15255     E5 E7 E2 E5 
15259     E7 E9 E9 E6 | 	byte	$dc, $de, $e0, $e1, $e2, $e5, $e3, $e1, $e5, $e7, $e2, $e5, $e7, $e9, $e9, $e6
1525d     EA EB ED ED 
15261     EE EF ED ED 
15265     EF F2 F0 F0 
15269     F1 F0 F0 F6 | 	byte	$ea, $eb, $ed, $ed, $ee, $ef, $ed, $ed, $ef, $f2, $f0, $f0, $f1, $f0, $f0, $f6
1526d     F5 F9 FA FA 
15271     F9 FB FE FE 
15275     00 01 00 01 
15279     04 06 08 08 | 	byte	$f5, $f9, $fa, $fa, $f9, $fb, $fe, $fe, $00, $01, $00, $01, $04, $06, $08, $08
1527d     09 0B 0E 0B 
15281     11 0F 0D 13 
15285     10 11 14 15 
15289     15 16 17 17 | 	byte	$09, $0b, $0e, $0b, $11, $0f, $0d, $13, $10, $11, $14, $15, $15, $16, $17, $17
1528d     18 1C 1B 1B 
15291     1F 20 1F 1F 
15295     20 20 23 20 
15299     1E 22 21 1F | 	byte	$18, $1c, $1b, $1b, $1f, $20, $1f, $1f, $20, $20, $23, $20, $1e, $22, $21, $1f
1529d     1D 1C 1B 1A 
152a1     16 16 12 0E 
152a5     0D 0F 0C 0B 
152a9     07 04 03 03 | 	byte	$1d, $1c, $1b, $1a, $16, $16, $12, $0e, $0d, $0f, $0c, $0b, $07, $04, $03, $03
152ad     03 01 FE FD 
152b1     FE FB FB F8 
152b5     F8 FA F7 F7 
152b9     F6 F5 F3 F2 | 	byte	$03, $01, $fe, $fd, $fe, $fb, $fb, $f8, $f8, $fa, $f7, $f7, $f6, $f5, $f3, $f2
152bd     F3 F1 F1 F2 
152c1     F0 EF F0 EF 
152c5     F0 F3 F5 F3 
152c9     F3 F3 F5 F9 | 	byte	$f3, $f1, $f1, $f2, $f0, $ef, $f0, $ef, $f0, $f3, $f5, $f3, $f3, $f3, $f5, $f9
152cd     F7 F9 FA FA 
152d1     FD FE FD FD 
152d5     FE FD FE 00 
152d9     FD FE 00 00 | 	byte	$f7, $f9, $fa, $fa, $fd, $fe, $fd, $fd, $fe, $fd, $fe, $00, $fd, $fe, $00, $00
152dd     FD FE 00 FF 
152e1     00 FF 00 02 
152e5     02 01 01 05 
152e9     05 08 07 09 | 	byte	$fd, $fe, $00, $ff, $00, $ff, $00, $02, $02, $01, $01, $05, $05, $08, $07, $09
152ed     0B 09 09 0C 
152f1     0F 12 11 10 
152f5     11 16 15 16 
152f9     19 16 19 1B | 	byte	$0b, $09, $09, $0c, $0f, $12, $11, $10, $11, $16, $15, $16, $19, $16, $19, $1b
152fd     19 1A 1B 1B 
15301     1A 19 17 16 
15305     1C 1A 17 16 
15309     14 12 13 12 | 	byte	$19, $1a, $1b, $1b, $1a, $19, $17, $16, $1c, $1a, $17, $16, $14, $12, $13, $12
1530d     0F 10 0C 09 
15311     0B 08 05 06 
15315     06 03 03 05 
15319     00 FC FE FB | 	byte	$0f, $10, $0c, $09, $0b, $08, $05, $06, $06, $03, $03, $05, $00, $fc, $fe, $fb
1531d     FB F7 F3 F2 
15321     F2 F2 EB EA 
15325     EB E9 E6 E4 
15329     E6 E6 E5 E2 | 	byte	$fb, $f7, $f3, $f2, $f2, $f2, $eb, $ea, $eb, $e9, $e6, $e4, $e6, $e6, $e5, $e2
1532d     DF E1 E2 E0 
15331     DF DF E0 E3 
15335     E2 DF E1 E2 
15339     E0 E1 E1 DF | 	byte	$df, $e1, $e2, $e0, $df, $df, $e0, $e3, $e2, $df, $e1, $e2, $e0, $e1, $e1, $df
1533d     E2 E5 E2 E0 
15341     E3 E5 E5 E5 
15345     E5 E6 E9 E9 
15349     E7 E9 EA EC | 	byte	$e2, $e5, $e2, $e0, $e3, $e5, $e5, $e5, $e5, $e6, $e9, $e9, $e7, $e9, $ea, $ec
1534d     EB E9 EC EB 
15351     EA EF EC ED 
15355     EE F0 F2 F2 
15359     F0 EE F2 F3 | 	byte	$eb, $e9, $ec, $eb, $ea, $ef, $ec, $ed, $ee, $f0, $f2, $f2, $f0, $ee, $f2, $f3
1535d     F5 F4 F3 F5 
15361     F7 FB FA F8 
15365     F9 F8 FB FC 
15369     F8 F9 FE FC | 	byte	$f5, $f4, $f3, $f5, $f7, $fb, $fa, $f8, $f9, $f8, $fb, $fc, $f8, $f9, $fe, $fc
1536d     FB FD FB FD 
15371     02 00 00 03 
15375     02 03 05 04 
15379     05 09 08 05 | 	byte	$fb, $fd, $fb, $fd, $02, $00, $00, $03, $02, $03, $05, $04, $05, $09, $08, $05
1537d     08 0A 0B 0B 
15381     0B 0B 0C 10 
15385     0B 0B 12 0D 
15389     0D 12 10 11 | 	byte	$08, $0a, $0b, $0b, $0b, $0b, $0c, $10, $0b, $0b, $12, $0d, $0d, $12, $10, $11
1538d     14 11 13 14 
15391     13 13 12 11 
15395     15 18 13 11 
15399     12 14 14 12 | 	byte	$14, $11, $13, $14, $13, $13, $12, $11, $15, $18, $13, $11, $12, $14, $14, $12
1539d     0F 10 11 11 
153a1     11 10 10 0F 
153a5     10 10 0E 10 
153a9     11 10 10 0C | 	byte	$0f, $10, $11, $11, $11, $10, $10, $0f, $10, $10, $0e, $10, $11, $10, $10, $0c
153ad     0E 12 10 0B 
153b1     0C 0C 0B 0C 
153b5     09 08 08 06 
153b9     07 07 05 06 | 	byte	$0e, $12, $10, $0b, $0c, $0c, $0b, $0c, $09, $08, $08, $06, $07, $07, $05, $06
153bd     04 01 02 02 
153c1     02 03 00 FF 
153c5     00 00 FE FF 
153c9     FF FE FD FD | 	byte	$04, $01, $02, $02, $02, $03, $00, $ff, $00, $00, $fe, $ff, $ff, $fe, $fd, $fd
153cd     FB FA FA F7 
153d1     F7 F6 F5 F4 
153d5     F4 F0 ED EF 
153d9     EC EB ED ED | 	byte	$fb, $fa, $fa, $f7, $f7, $f6, $f5, $f4, $f4, $f0, $ed, $ef, $ec, $eb, $ed, $ed
153dd     EA EA E9 E9 
153e1     E9 EC ED EB 
153e5     EC EA EC F0 
153e9     EF EE EF F1 | 	byte	$ea, $ea, $e9, $e9, $e9, $ec, $ed, $eb, $ec, $ea, $ec, $f0, $ef, $ee, $ef, $f1
153ed     F1 F3 F7 F4 
153f1     F2 F4 F5 F8 
153f5     F7 F8 F9 F8 
153f9     FA FD FB FD | 	byte	$f1, $f3, $f7, $f4, $f2, $f4, $f5, $f8, $f7, $f8, $f9, $f8, $fa, $fd, $fb, $fd
153fd     01 03 03 05 
15401     05 08 0C 0B 
15405     0D 10 11 11 
15409     13 15 15 17 | 	byte	$01, $03, $03, $05, $05, $08, $0c, $0b, $0d, $10, $11, $11, $13, $15, $15, $17
1540d     18 16 15 17 
15411     18 18 16 15 
15415     18 18 16 15 
15419     16 18 18 17 | 	byte	$18, $16, $15, $17, $18, $18, $16, $15, $18, $18, $16, $15, $16, $18, $18, $17
1541d     15 17 17 17 
15421     1A 19 1A 1B 
15425     19 18 19 1B 
15429     1B 19 19 1B | 	byte	$15, $17, $17, $17, $1a, $19, $1a, $1b, $19, $18, $19, $1b, $1b, $19, $19, $1b
1542d     1B 19 19 19 
15431     1B 19 18 18 
15435     19 18 18 18 
15439     17 17 17 15 | 	byte	$1b, $19, $19, $19, $1b, $19, $18, $18, $19, $18, $18, $18, $17, $17, $17, $15
1543d     15 15 13 14 
15441     15 13 12 10 
15445     11 0F 0D 0B 
15449     08 08 05 03 | 	byte	$15, $15, $13, $14, $15, $13, $12, $10, $11, $0f, $0d, $0b, $08, $08, $05, $03
1544d     02 01 FE FC 
15451     FA F7 F4 F5 
15455     F3 F0 EC E9 
15459     EC EB E9 E7 | 	byte	$02, $01, $fe, $fc, $fa, $f7, $f4, $f5, $f3, $f0, $ec, $e9, $ec, $eb, $e9, $e7
1545d     E6 E3 E5 E6 
15461     E3 E1 E0 DF 
15465     E0 DE DA DB 
15469     DE DB D8 D9 | 	byte	$e6, $e3, $e5, $e6, $e3, $e1, $e0, $df, $e0, $de, $da, $db, $de, $db, $d8, $d9
1546d     D9 DA DB DA 
15471     D8 D9 DA DC 
15475     DD DC DD DF 
15479     E2 E1 E2 E4 | 	byte	$d9, $da, $db, $da, $d8, $d9, $da, $dc, $dd, $dc, $dd, $df, $e2, $e1, $e2, $e4
1547d     E5 E7 E8 E8 
15481     E9 E9 EB EB 
15485     EB EB EB ED 
15489     EC ED EE ED | 	byte	$e5, $e7, $e8, $e8, $e9, $e9, $eb, $eb, $eb, $eb, $eb, $ed, $ec, $ed, $ee, $ed
1548d     EF F0 F1 F2 
15491     F3 F4 F4 F7 
15495     F6 F6 F8 FC 
15499     FD FB FE FE | 	byte	$ef, $f0, $f1, $f2, $f3, $f4, $f4, $f7, $f6, $f6, $f8, $fc, $fd, $fb, $fe, $fe
1549d     00 02 00 00 
154a1     03 03 04 05 
154a5     02 03 07 06 
154a9     08 08 07 08 | 	byte	$00, $02, $00, $00, $03, $03, $04, $05, $02, $03, $07, $06, $08, $08, $07, $08
154ad     0B 0C 0C 0E 
154b1     0F 0E 0F 11 
154b5     0F 11 14 11 
154b9     10 13 13 12 | 	byte	$0b, $0c, $0c, $0e, $0f, $0e, $0f, $11, $0f, $11, $14, $11, $10, $13, $13, $12
154bd     13 11 12 12 
154c1     10 11 0F 0F 
154c5     10 0E 0C 0B 
154c9     0C 0C 0B 0B | 	byte	$13, $11, $12, $12, $10, $11, $0f, $0f, $10, $0e, $0c, $0b, $0c, $0c, $0b, $0b
154cd     09 07 08 08 
154d1     06 05 03 01 
154d5     02 01 01 02 
154d9     00 00 01 FF | 	byte	$09, $07, $08, $08, $06, $05, $03, $01, $02, $01, $01, $02, $00, $00, $01, $ff
154dd     FE FF 00 00 
154e1     FD FC FC FA 
154e5     FB FA F8 F9 
154e9     F8 F7 F9 F9 | 	byte	$fe, $ff, $00, $00, $fd, $fc, $fc, $fa, $fb, $fa, $f8, $f9, $f8, $f7, $f9, $f9
154ed     F7 F6 FA FA 
154f1     FA F9 FA FB 
154f5     FA FC FD FB 
154f9     FC FD FC FC | 	byte	$f7, $f6, $fa, $fa, $fa, $f9, $fa, $fb, $fa, $fc, $fd, $fb, $fc, $fd, $fc, $fc
154fd     FD FD FC FB 
15501     FA F9 FB FC 
15505     FB F9 FA FB 
15509     FB FC FC FB | 	byte	$fd, $fd, $fc, $fb, $fa, $f9, $fb, $fc, $fb, $f9, $fa, $fb, $fb, $fc, $fc, $fb
1550d     FD FE FD FC 
15511     FD FE 00 FF 
15515     FD FE FE FE 
15519     FC FC FC FC | 	byte	$fd, $fe, $fd, $fc, $fd, $fe, $00, $ff, $fd, $fe, $fe, $fe, $fc, $fc, $fc, $fc
1551d     FC FB F9 F9 
15521     F9 F8 F9 FA 
15525     F8 F9 FB F9 
15529     FA FC FA FB | 	byte	$fc, $fb, $f9, $f9, $f9, $f8, $f9, $fa, $f8, $f9, $fb, $f9, $fa, $fc, $fa, $fb
1552d     FD FA FB FC 
15531     FB FC FD FA 
15535     FB FC FB FA 
15539     FA FA FA FB | 	byte	$fd, $fa, $fb, $fc, $fb, $fc, $fd, $fa, $fb, $fc, $fb, $fa, $fa, $fa, $fa, $fb
1553d     FB F9 F9 FA 
15541     F9 FB FC F9 
15545     F9 FA FB FD 
15549     FB FB FD FD | 	byte	$fb, $f9, $f9, $fa, $f9, $fb, $fc, $f9, $f9, $fa, $fb, $fd, $fb, $fb, $fd, $fd
1554d     FC FD 00 00 
15551     00 00 00 01 
15555     03 03 03 05 
15559     04 03 05 06 | 	byte	$fc, $fd, $00, $00, $00, $00, $00, $01, $03, $03, $03, $05, $04, $03, $05, $06
1555d     05 07 07 05 
15561     07 08 07 06 
15565     06 09 09 08 
15569     07 07 0A 0A | 	byte	$05, $07, $07, $05, $07, $08, $07, $06, $06, $09, $09, $08, $07, $07, $0a, $0a
1556d     0B 0B 0B 0C 
15571     0F 0B 0B 0E 
15575     0E 0F 10 0C 
15579     0D 0F 0C 0C | 	byte	$0b, $0b, $0b, $0c, $0f, $0b, $0b, $0e, $0e, $0f, $10, $0c, $0d, $0f, $0c, $0c
1557d     0C 0B 0A 0B 
15581     09 09 0B 0A 
15585     0A 09 08 09 
15589     0B 0A 09 09 | 	byte	$0c, $0b, $0a, $0b, $09, $09, $0b, $0a, $0a, $09, $08, $09, $0b, $0a, $09, $09
1558d     08 07 0B 09 
15591     07 08 08 07 
15595     08 07 04 05 
15599     05 03 03 02 | 	byte	$08, $07, $0b, $09, $07, $08, $08, $07, $08, $07, $04, $05, $05, $03, $03, $02
1559d     02 02 02 01 
155a1     00 00 02 01 
155a5     00 01 01 01 
155a9     02 01 00 01 | 	byte	$02, $02, $02, $01, $00, $00, $02, $01, $00, $01, $01, $01, $02, $01, $00, $01
155ad     02 03 02 01 
155b1     02 04 04 03 
155b5     03 02 02 03 
155b9     04 03 02 02 | 	byte	$02, $03, $02, $01, $02, $04, $04, $03, $03, $02, $02, $03, $04, $03, $02, $02
155bd     01 02 02 01 
155c1     01 00 00 00 
155c5     00 FE 00 00 
155c9     00 FF FC FC | 	byte	$01, $02, $02, $01, $01, $00, $00, $00, $00, $fe, $00, $00, $00, $ff, $fc, $fc
155cd     FF FF FD FD 
155d1     FC FD FD FB 
155d5     FB FC FC FB 
155d9     FA F9 FB FC | 	byte	$ff, $ff, $fd, $fd, $fc, $fd, $fd, $fb, $fb, $fc, $fc, $fb, $fa, $f9, $fb, $fc
155dd     FB FA FB FA 
155e1     FA FA FA FA 
155e5     FB FA F9 F9 
155e9     F8 F8 F8 F8 | 	byte	$fb, $fa, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f8
155ed     F7 F8 F6 F6 
155f1     F6 F5 F6 F6 
155f5     F5 F5 F7 F5 
155f9     F4 F6 F6 F5 | 	byte	$f7, $f8, $f6, $f6, $f6, $f5, $f6, $f6, $f5, $f5, $f7, $f5, $f4, $f6, $f6, $f5
155fd     F6 F4 F6 F6 
15601     F5 F5 F5 F5 
15605     F7 F7 F6 F5 
15609     F6 F6 F7 F7 | 	byte	$f6, $f4, $f6, $f6, $f5, $f5, $f5, $f5, $f7, $f7, $f6, $f5, $f6, $f6, $f7, $f7
1560d     F6 F6 F7 F7 
15611     F7 F8 F7 F7 
15615     F9 FA F9 FA 
15619     FB FC FD FB | 	byte	$f6, $f6, $f7, $f7, $f7, $f8, $f7, $f7, $f9, $fa, $f9, $fa, $fb, $fc, $fd, $fb
1561d     FC FE FF 00 
15621     00 FF 00 00 
15625     01 02 03 02 
15629     04 06 06 06 | 	byte	$fc, $fe, $ff, $00, $00, $ff, $00, $00, $01, $02, $03, $02, $04, $06, $06, $06
1562d     07 08 0A 09 
15631     09 0A 0B 0C 
15635     0C 0C 0C 0E 
15639     0F 0E 0C 0D | 	byte	$07, $08, $0a, $09, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0e, $0f, $0e, $0c, $0d
1563d     0F 0F 0F 0E 
15641     0F 0F 0F 0D 
15645     0E 0D 0D 0D 
15649     0B 0B 0A 09 | 	byte	$0f, $0f, $0f, $0e, $0f, $0f, $0f, $0d, $0e, $0d, $0d, $0d, $0b, $0b, $0a, $09
1564d     09 08 07 07 
15651     06 05 04 04 
15655     03 02 01 01 
15659     00 00 FF 00 | 	byte	$09, $08, $07, $07, $06, $05, $04, $04, $03, $02, $01, $01, $00, $00, $ff, $00
1565d     FE FD FD FD 
15661     FD FD FB FB 
15665     FB FB FA F9 
15669     FA FA F9 F9 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fb, $fb, $fb, $fb, $fa, $f9, $fa, $fa, $f9, $f9
1566d     F8 F8 F8 F9 
15671     FA F9 F8 F9 
15675     F8 F7 F8 F9 
15679     F7 F7 F7 F7 | 	byte	$f8, $f8, $f8, $f9, $fa, $f9, $f8, $f9, $f8, $f7, $f8, $f9, $f7, $f7, $f7, $f7
1567d     F8 F7 F7 F7 
15681     F7 F6 F7 F6 
15685     F7 F8 F7 F7 
15689     F7 F6 F7 F8 | 	byte	$f8, $f7, $f7, $f7, $f7, $f6, $f7, $f6, $f7, $f8, $f7, $f7, $f7, $f6, $f7, $f8
1568d     F7 F6 F7 F6 
15691     F5 F5 F4 F4 
15695     F4 F3 F3 F1 
15699     F2 F2 F3 F2 | 	byte	$f7, $f6, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f3, $f1, $f2, $f2, $f3, $f2
1569d     F1 F1 F1 F2 
156a1     F3 F3 F2 F3 
156a5     F4 F3 F4 F4 
156a9     F5 F6 F5 00 | 	byte	$f1, $f1, $f1, $f2, $f3, $f3, $f2, $f3, $f4, $f3, $f4, $f4, $f5, $f6, $f5, $00
156ad     00 00 00 E4 
156b1     B1 EA 80 F5 
156b5     0A 0B 02 15 
156b9     9B 80 40 D6 | 	byte	$00, $00, $00, $e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6
156bd     30 57 00 F2 
156c1     58 E1 33 0F 
156c5     9B 7C 41 90 
156c9     94 3A AA 9D | 	byte	$30, $57, $00, $f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d
156cd     0A AA E7 82 
156d1     D2 E5 B0 C0 
156d5     DD C6 F1 E9 
156d9     08 06 E3 F2 | 	byte	$0a, $aa, $e7, $82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2
156dd     78 6C AE 17 
156e1     7E 48 62 44 
156e5     F7 19 80 2C 
156e9     64 3A 34 67 | 	byte	$78, $6c, $ae, $17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67
156ed     0D 1D 4A D3 
156f1     08 2C 1B EE 
156f5     3C FC B1 F3 
156f9     DF F0 DD BD | 	byte	$0d, $1d, $4a, $d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd
156fd     DC CF D5 CC 
15701     D6 C3 A7 EC 
15705     EB 99 A5 E2 
15709     E3 B9 9A D3 | 	byte	$dc, $cf, $d5, $cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3
1570d     10 E6 94 E3 
15711     25 B7 BA 31 
15715     B5 D9 21 DF 
15719     08 09 50 1B | 	byte	$10, $e6, $94, $e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b
1571d     EA 5A 28 14 
15721     53 51 21 49 
15725     1A 27 65 55 
15729     3F 63 26 1C | 	byte	$ea, $5a, $28, $14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c
1572d     38 43 3F 38 
15731     2C 1A 27 20 
15735     22 36 47 22 
15739     23 F9 0E 09 | 	byte	$38, $43, $3f, $38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09
1573d     0B 48 CD FD 
15741     25 EA 0B F8 
15745     06 21 DA 28 
15749     F5 B4 E3 0A | 	byte	$0b, $48, $cd, $fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a
1574d     F5 E0 F4 F6 
15751     F0 AC D8 EA 
15755     E4 CF D5 DF 
15759     B9 D3 C9 C5 | 	byte	$f5, $e0, $f4, $f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5
1575d     C0 C4 BC 99 
15761     B8 A7 A3 B4 
15765     B5 BF B4 99 
15769     C5 B3 C4 CE | 	byte	$c0, $c4, $bc, $99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce
1576d     CB DF D2 DA 
15771     01 E2 DC E0 
15775     07 01 E3 F0 
15779     27 15 FA 08 | 	byte	$cb, $df, $d2, $da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08
1577d     13 31 F9 31 
15781     4A 17 2D 2D 
15785     54 38 4A 64 
15789     3B 4E 63 62 | 	byte	$13, $31, $f9, $31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62
1578d     51 77 49 57 
15791     79 60 5B 6E 
15795     5E 71 76 42 
15799     68 7D 62 38 | 	byte	$51, $77, $49, $57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38
1579d     53 3B 4C 4A 
157a1     ED FA 63 2F 
157a5     FF 15 DF 05 
157a9     08 DC EA E4 | 	byte	$53, $3b, $4c, $4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4
157ad     F3 01 C1 A1 
157b1     EE C2 D6 CE 
157b5     CE E3 D9 BD 
157b9     F2 C1 D4 D0 | 	byte	$f3, $01, $c1, $a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0
157bd     DD B5 BF BF 
157c1     D7 AA C6 C3 
157c5     B8 B2 BC B5 
157c9     B2 A9 A2 C3 | 	byte	$dd, $b5, $bf, $bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3
157cd     BF AC A0 C2 
157d1     BF D4 CD 89 
157d5     C6 D9 A8 C2 
157d9     E8 DF AD CF | 	byte	$bf, $ac, $a0, $c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf
157dd     EF E6 CB FE 
157e1     D7 ED 02 E1 
157e5     12 FF FE 29 
157e9     02 2A 26 2B | 	byte	$ef, $e6, $cb, $fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b
157ed     42 34 44 46 
157f1     56 43 6B 71 
157f5     55 6F 5F 6A 
157f9     6E 3F 5E 5E | 	byte	$42, $34, $44, $46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e
157fd     59 66 6E 64 
15801     59 38 21 39 
15805     51 63 49 56 
15809     55 1E 3D 3D | 	byte	$59, $66, $6e, $64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d
1580d     28 F6 13 12 
15811     22 31 05 FC 
15815     2B ED 1A DF 
15819     22 07 F3 DC | 	byte	$28, $f6, $13, $12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc
1581d     F3 ED FC 0A 
15821     FC C1 F9 09 
15825     CA C8 B9 B9 
15829     DD E9 BF 96 | 	byte	$f3, $ed, $fc, $0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96
1582d     D9 E0 C2 C2 
15831     AA CC A8 A6 
15835     C8 B8 8A AE 
15839     AD 98 AC 89 | 	byte	$d9, $e0, $c2, $c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89
1583d     D1 A5 AA B7 
15841     D0 D5 AA A7 
15845     B3 0B D2 D0 
15849     D8 02 DB F3 | 	byte	$d1, $a5, $aa, $b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3
1584d     DF 03 D2 0F 
15851     14 EC 1B 1A 
15855     EB 22 3D 1B 
15859     04 40 32 59 | 	byte	$df, $03, $d2, $0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59
1585d     40 38 3C 31 
15861     4E 41 61 65 
15865     5F 4F 45 50 
15869     5F 6C 6D 80 | 	byte	$40, $38, $3c, $31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80
1586d     4F 40 6C 57 
15871     51 62 50 3D 
15875     45 32 47 1D 
15879     4C 2E F3 1F | 	byte	$4f, $40, $6c, $57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f
1587d     1F 3E 1B EA 
15881     17 FD EA EF 
15885     11 E4 CE FC 
15889     C9 DF B8 BA | 	byte	$1f, $3e, $1b, $ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba
1588d     BD D2 D7 B3 
15891     C3 8B BD C6 
15895     98 D2 97 8F 
15899     E5 8F 9A B9 | 	byte	$bd, $d2, $d7, $b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9
1589d     A1 95 E7 AF 
158a1     91 B3 CC CB 
158a5     A0 CE DA C2 
158a9     B7 D2 F5 D5 | 	byte	$a1, $95, $e7, $af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5
158ad     E8 E8 E0 F3 
158b1     10 CD FD 16 
158b5     D2 1C 22 03 
158b9     1B 08 43 17 | 	byte	$e8, $e8, $e0, $f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17
158bd     1C 2C 34 2A 
158c1     37 26 4D 30 
158c5     2E 2D 3D 53 
158c9     30 6E 2C 4A | 	byte	$1c, $2c, $34, $2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a
158cd     5B 3A 74 4E 
158d1     45 65 3C 48 
158d5     45 5A 80 2D 
158d9     2B 37 45 55 | 	byte	$5b, $3a, $74, $4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55
158dd     4B 53 1D 33 
158e1     3F 45 2F 03 
158e5     2B 35 05 2A 
158e9     15 F3 F5 E8 | 	byte	$4b, $53, $1d, $33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8
158ed     06 C5 DB 03 
158f1     A5 D0 FE 9E 
158f5     A9 BE AF E0 
158f9     C6 81 BF E5 | 	byte	$06, $c5, $db, $03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5
158fd     AF B2 BE B4 
15901     C8 AA 90 C6 
15905     B6 DA BE 99 
15909     16 AD AA 0E | 	byte	$af, $b2, $be, $b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e
1590d     AC BB D9 CE 
15911     0C 9C 03 FD 
15915     AA 1C 02 DC 
15919     F5 D1 10 FF | 	byte	$ac, $bb, $d9, $ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff
1591d     09 F6 0A 18 
15921     EB 49 1D 2C 
15925     13 E3 23 5A 
15929     DC 14 4B F7 | 	byte	$09, $f6, $0a, $18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7
1592d     43 12 10 47 
15931     27 25 2A 26 
15935     3F 1E 44 29 
15939     19 53 35 22 | 	byte	$43, $12, $10, $47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22
1593d     4B 26 15 67 
15941     1B 41 3A 21 
15945     5B 40 2B 34 
15949     2A 2B 50 15 | 	byte	$4b, $26, $15, $67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15
1594d     13 36 43 18 
15951     2D 16 EA 47 
15955     02 FF 14 0B 
15959     0F E5 0A 16 | 	byte	$13, $36, $43, $18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16
1595d     C2 E7 1C C7 
15961     F4 E7 F0 DD 
15965     E5 E7 DF 8D 
15969     E6 F3 AB EF | 	byte	$c2, $e7, $1c, $c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef
1596d     DE DA D2 B0 
15971     ED D2 AA E7 
15975     EC A6 D8 C3 
15979     B1 F9 9E C4 | 	byte	$de, $da, $d2, $b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4
1597d     C2 A3 CE C6 
15981     C6 B5 91 FC 
15985     C8 C1 FA BD 
15989     AB F1 D5 D6 | 	byte	$c2, $a3, $ce, $c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6
1598d     EE CA F6 EC 
15991     BD 31 FB C1 
15995     FD F4 1A 2F 
15999     F8 19 1D 27 | 	byte	$ee, $ca, $f6, $ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27
1599d     07 24 3B 31 
159a1     0E 49 51 26 
159a5     66 0B 45 5A 
159a9     3B 4C 4C 43 | 	byte	$07, $24, $3b, $31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43
159ad     68 1E 74 35 
159b1     25 70 49 2D 
159b5     38 33 5D 25 
159b9     33 31 32 2A | 	byte	$68, $1e, $74, $35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a
159bd     44 45 2B 3D 
159c1     21 0F 19 2F 
159c5     24 30 0A E6 
159c9     47 01 E5 06 | 	byte	$44, $45, $2b, $3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06
159cd     31 FD D3 15 
159d1     DF 12 D0 09 
159d5     F8 CD FC EF 
159d9     CB E6 D3 E9 | 	byte	$31, $fd, $d3, $15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9
159dd     B8 E2 E5 C5 
159e1     E7 BD D7 F2 
159e5     BA 90 D9 E2 
159e9     B6 BD BD C3 | 	byte	$b8, $e2, $e5, $c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3
159ed     DF A9 C1 B6 
159f1     C1 F6 9F 8E 
159f5     C6 CF CB D5 
159f9     CA B5 E1 B8 | 	byte	$df, $a9, $c1, $b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8
159fd     E2 DB D6 DD 
15a01     EC E5 FC F0 
15a05     00 15 EC 23 
15a09     18 F3 0E 30 | 	byte	$e2, $db, $d6, $dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30
15a0d     0A 42 47 1B 
15a11     19 31 30 4D 
15a15     2E 3D 40 1C 
15a19     50 45 2F 55 | 	byte	$0a, $42, $47, $1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55
15a1d     2A 32 4B 24 
15a21     42 31 30 27 
15a25     40 3F 3F 62 
15a29     38 1C 45 2F | 	byte	$2a, $32, $4b, $24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f
15a2d     43 04 40 44 
15a31     06 3E 15 45 
15a35     36 02 29 1D 
15a39     1E 1D EF 00 | 	byte	$43, $04, $40, $44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00
15a3d     14 08 EF 12 
15a41     F4 EC F7 EC 
15a45     E3 E6 E8 EA 
15a49     FA D1 CD B3 | 	byte	$14, $08, $ef, $12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3
15a4d     0B F9 AA A8 
15a51     CC D6 D1 D2 
15a55     A2 B2 BE E1 
15a59     C8 9C B8 BC | 	byte	$0b, $f9, $aa, $a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc
15a5d     CC A5 8E D7 
15a61     DE C7 CB BD 
15a65     EA DF CF F8 
15a69     C2 BE F2 EB | 	byte	$cc, $a5, $8e, $d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb
15a6d     FE C9 DC 0E 
15a71     D2 13 F5 CE 
15a75     28 1F E8 1D 
15a79     04 F0 1A 1D | 	byte	$fe, $c9, $dc, $0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d
15a7d     24 FE 04 12 
15a81     2C 0D 16 12 
15a85     32 32 12 23 
15a89     25 17 3C 29 | 	byte	$24, $fe, $04, $12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29
15a8d     2A 47 48 07 
15a91     46 41 32 22 
15a95     3B 0D 2A 50 
15a99     44 14 0E 60 | 	byte	$2a, $47, $48, $07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60
15a9d     57 2A 17 2F 
15aa1     17 38 2C 23 
15aa5     22 44 1E F0 
15aa9     0D 4A 15 20 | 	byte	$57, $2a, $17, $2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20
15aad     EE 2A 02 18 
15ab1     41 E1 E5 2E 
15ab5     F6 DC 04 F6 
15ab9     EF DE E8 E2 | 	byte	$ee, $2a, $02, $18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2
15abd     FA C5 DF F5 
15ac1     C8 C6 FE AD 
15ac5     D4 E9 99 0C 
15ac9     EE BE F0 A6 | 	byte	$fa, $c5, $df, $f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6
15acd     F5 BC DC B9 
15ad1     D4 FA C9 DA 
15ad5     D2 A8 D0 F0 
15ad9     E6 D6 E0 DD | 	byte	$f5, $bc, $dc, $b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd
15add     CA C6 F9 C5 
15ae1     D3 E8 00 D9 
15ae5     DB CF EC 03 
15ae9     F1 F5 E0 27 | 	byte	$ca, $c6, $f9, $c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27
15aed     01 07 38 08 
15af1     D5 39 14 12 
15af5     2A 17 11 2E 
15af9     15 0B 0C 21 | 	byte	$01, $07, $38, $08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21
15afd     40 18 11 20 
15b01     16 2A 59 1C 
15b05     01 47 3B 46 
15b09     38 0F 5F 0F | 	byte	$40, $18, $11, $20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f
15b0d     32 3C 16 32 
15b11     2E 31 1F 48 
15b15     18 1D 31 06 
15b19     44 1F 0D 3E | 	byte	$32, $3c, $16, $32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e
15b1d     E7 05 3D 08 
15b21     1E F9 1A FC 
15b25     04 EE 18 F4 
15b29     FA 05 0A EB | 	byte	$e7, $05, $3d, $08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb
15b2d     02 E7 1D D0 
15b31     E9 F4 E5 DB 
15b35     FA CA E0 E3 
15b39     BC 05 D4 C8 | 	byte	$02, $e7, $1d, $d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8
15b3d     BF 05 D8 C6 
15b41     E9 BF E6 C9 
15b45     D9 EA BB C8 
15b49     EF D1 F9 DA | 	byte	$bf, $05, $d8, $c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da
15b4d     D3 E9 BB D9 
15b51     FB CE DF ED 
15b55     E9 DC FE F7 
15b59     FE EF E4 0B | 	byte	$d3, $e9, $bb, $d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b
15b5d     D5 F0 FB 1A 
15b61     1D E3 0F 1F 
15b65     F6 1D FA 04 
15b69     0A 19 27 03 | 	byte	$d5, $f0, $fb, $1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03
15b6d     0B 35 1F 05 
15b71     20 29 23 08 
15b75     2A 34 21 0B 
15b79     3B 4D 4F 00 | 	byte	$0b, $35, $1f, $05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00
15b7d     49 30 2F 36 
15b81     03 04 2F 20 
15b85     33 02 0C 49 
15b89     1A 2C F2 05 | 	byte	$49, $30, $2f, $36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05
15b8d     08 03 28 14 
15b91     FE EB 00 1D 
15b95     EF 13 1B DD 
15b99     FA 00 D7 FC | 	byte	$08, $03, $28, $14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc
15b9d     09 09 DE E3 
15ba1     05 F9 F1 CB 
15ba5     DE 09 FC DA 
15ba9     FA D1 E7 0C | 	byte	$09, $09, $de, $e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c
15bad     C0 1C EA 9E 
15bb1     FF E5 ED FD 
15bb5     D3 EF EE FA 
15bb9     04 F0 E5 E8 | 	byte	$c0, $1c, $ea, $9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8
15bbd     EE FA E6 EB 
15bc1     D3 EC 1C F5 
15bc5     DC F8 E9 E5 
15bc9     14 EB F1 E8 | 	byte	$ee, $fa, $e6, $eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8
15bcd     ED 13 19 03 
15bd1     C4 04 06 F2 
15bd5     0F 07 E2 0F 
15bd9     1C 02 EB FE | 	byte	$ed, $13, $19, $03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe
15bdd     09 1D 08 1A 
15be1     2C 0C 00 1C 
15be5     26 07 06 11 
15be9     16 12 3C DE | 	byte	$09, $1d, $08, $1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de
15bed     FE 1E 08 15 
15bf1     1D 12 FB 3C 
15bf5     E9 0D 12 1A 
15bf9     0D 02 15 23 | 	byte	$fe, $1e, $08, $15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23
15bfd     1D E9 01 FC 
15c01     1A 1F 14 F9 
15c05     F1 02 26 21 
15c09     E3 02 13 E3 | 	byte	$1d, $e9, $01, $fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3
15c0d     12 FD 11 E6 
15c11     02 F1 12 F5 
15c15     0B 0A E7 EB 
15c19     11 F1 E4 0A | 	byte	$12, $fd, $11, $e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a
15c1d     0F 15 0A F0 
15c21     06 FB FB EE 
15c25     09 F1 E9 F6 
15c29     12 F5 05 FB | 	byte	$0f, $15, $0a, $f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb
15c2d     F1 E7 41 E8 
15c31     E5 08 D7 0E 
15c35     00 0B E1 E6 
15c39     08 00 EE EF | 	byte	$f1, $e7, $41, $e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef
15c3d     DA FC EE EB 
15c41     15 F2 04 F8 
15c45     DC 24 03 F3 
15c49     F7 E7 F4 04 | 	byte	$da, $fc, $ee, $eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04
15c4d     F8 01 ED FB 
15c51     10 F5 ED 04 
15c55     0A ED DF 05 
15c59     01 13 E1 FF | 	byte	$f8, $01, $ed, $fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff
15c5d     09 ED 1A 15 
15c61     FE F6 E1 10 
15c65     24 1B E7 0F 
15c69     0F 1B 25 EE | 	byte	$09, $ed, $1a, $15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee
15c6d     EF 27 14 FD 
15c71     12 F6 19 1C 
15c75     10 10 EB FE 
15c79     34 0C FB 0E | 	byte	$ef, $27, $14, $fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e
15c7d     06 38 FD FD 
15c81     22 D8 0C 1C 
15c85     07 0A 19 E6 
15c89     1A 0B 09 1C | 	byte	$06, $38, $fd, $fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c
15c8d     E6 01 1C F0 
15c91     04 18 1C EE 
15c95     E4 07 05 FC 
15c99     04 06 E0 E7 | 	byte	$e6, $01, $1c, $f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7
15c9d     11 01 F7 0D 
15ca1     DB 0A F9 EC 
15ca5     FB 15 08 DE 
15ca9     02 10 CD 03 | 	byte	$11, $01, $f7, $0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03
15cad     1E EB EA E4 
15cb1     E4 06 FC FD 
15cb5     EC D4 0F 09 
15cb9     F2 03 02 D5 | 	byte	$1e, $eb, $ea, $e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5
15cbd     13 F1 E3 02 
15cc1     15 E5 0F 08 
15cc5     EF F8 DD F7 
15cc9     02 09 02 FD | 	byte	$13, $f1, $e3, $02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd
15ccd     02 00 EE 0D 
15cd1     FF 1E F3 EC 
15cd5     03 0B F0 0A 
15cd9     0A F5 FB 0F | 	byte	$02, $00, $ee, $0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f
15cdd     05 ED 0D 1B 
15ce1     11 FB 0A 02 
15ce5     19 2E 1F F2 
15ce9     24 FE F8 0B | 	byte	$05, $ed, $0d, $1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b
15ced     25 12 0D 00 
15cf1     1A EB E9 2B 
15cf5     20 0B E8 FA 
15cf9     21 22 F7 EA | 	byte	$25, $12, $0d, $00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea
15cfd     19 11 03 F7 
15d01     FE 12 0E FD 
15d05     15 04 06 FD 
15d09     01 17 F0 19 | 	byte	$19, $11, $03, $f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19
15d0d     0D F7 01 F7 
15d11     09 0C F1 19 
15d15     0D E2 F7 03 
15d19     E5 04 F2 FF | 	byte	$0d, $f7, $01, $f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff
15d1d     FE E8 01 02 
15d21     E2 0E FF FD 
15d25     DC F1 16 D4 
15d29     F2 EF FA 01 | 	byte	$fe, $e8, $01, $02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01
15d2d     01 0B FB D4 
15d31     F0 1C 20 E3 
15d35     D7 10 F5 01 
15d39     0A D5 01 08 | 	byte	$01, $0b, $fb, $d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08
15d3d     E9 F7 EE 09 
15d41     EF 16 FD F5 
15d45     0E 06 14 E2 
15d49     0E 14 1A 0C | 	byte	$e9, $f7, $ee, $09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c
15d4d     F8 F6 10 20 
15d51     03 F0 EF 17 
15d55     F7 33 0F D4 
15d59     0E 0C 00 05 | 	byte	$f8, $f6, $10, $20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05
15d5d     FD 0C 00 16 
15d61     03 F6 0F EA 
15d65     0E 12 0F 01 
15d69     F6 F8 0E 09 | 	byte	$fd, $0c, $00, $16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09
15d6d     04 E1 FB 0D 
15d71     02 03 06 18 
15d75     02 09 04 EE 
15d79     18 0B EB 1D | 	byte	$04, $e1, $fb, $0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d
15d7d     05 E6 F8 0E 
15d81     07 25 08 D9 
15d85     11 0C EE 26 
15d89     11 F0 FE 01 | 	byte	$05, $e6, $f8, $0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01
15d8d     1D FC 14 06 
15d91     0C 10 F1 09 
15d95     EA EC 22 03 
15d99     F2 05 EE 16 | 	byte	$1d, $fc, $14, $06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16
15d9d     15 00 FB 0E 
15da1     D8 FD 05 0D 
15da5     FD FB E9 EA 
15da9     09 E8 F8 F9 | 	byte	$15, $00, $fb, $0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9
15dad     EF DF 16 FA 
15db1     01 E5 FD F3 
15db5     03 FE ED E8 
15db9     F2 EA 07 07 | 	byte	$ef, $df, $16, $fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07
15dbd     F9 F4 EF EE 
15dc1     FB 0B EC EC 
15dc5     F7 FA 0A F0 
15dc9     10 F5 ED 10 | 	byte	$f9, $f4, $ef, $ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10
15dcd     0A 04 F3 15 
15dd1     F6 F4 0D FC 
15dd5     0C 1F 0F FD 
15dd9     01 F7 23 FC | 	byte	$0a, $04, $f3, $15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc
15ddd     04 2F 09 F9 
15de1     12 0B 0F 2E 
15de5     F8 12 10 00 
15de9     26 10 E6 1E | 	byte	$04, $2f, $09, $f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e
15ded     FD 12 15 FB 
15df1     01 20 0E EF 
15df5     1A F4 FC 13 
15df9     10 F8 11 15 | 	byte	$fd, $12, $15, $fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15
15dfd     10 FA FA FF 
15e01     08 08 09 F0 
15e05     EA 02 15 E1 
15e09     F3 0D E8 03 | 	byte	$10, $fa, $fa, $ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03
15e0d     06 EF E0 F8 
15e11     01 06 EB FD 
15e15     0D FB EE 01 
15e19     EE ED 05 05 | 	byte	$06, $ef, $e0, $f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05
15e1d     01 E8 DE 18 
15e21     FD F4 F4 E4 
15e25     FA F1 FA FA 
15e29     FE 04 E6 E9 | 	byte	$01, $e8, $de, $18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9
15e2d     03 D3 0D FA 
15e31     FD EB FA 04 
15e35     02 FD EE EF 
15e39     2D EE 0C 03 | 	byte	$03, $d3, $0d, $fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03
15e3d     F3 FB FB 02 
15e41     04 09 18 F7 
15e45     17 1D FC FD 
15e49     12 21 15 01 | 	byte	$f3, $fb, $fb, $02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01
15e4d     0D 07 13 FA 
15e51     F4 1F 1B 1B 
15e55     F6 F4 18 0B 
15e59     16 FC E3 10 | 	byte	$0d, $07, $13, $fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10
15e5d     1D 1E 01 E6 
15e61     10 11 E7 EF 
15e65     22 0A F8 09 
15e69     F9 E7 15 FD | 	byte	$1d, $1e, $01, $e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd
15e6d     01 F2 F0 13 
15e71     F6 F0 FD 11 
15e75     F1 F8 0C F8 
15e79     06 0A FD F4 | 	byte	$01, $f2, $f0, $13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4
15e7d     0C 05 EC FC 
15e81     FC FF 0C F2 
15e85     02 11 EC DD 
15e89     20 0A 0F E6 | 	byte	$0c, $05, $ec, $fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6
15e8d     FD FF 0D 03 
15e91     EB 17 FB FC 
15e95     F3 F4 EF 07 
15e99     0B FD F5 00 | 	byte	$fd, $ff, $0d, $03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00
15e9d     DE 06 F8 E8 
15ea1     E9 05 0F FC 
15ea5     F2 DB 0C 09 
15ea9     E7 F6 08 04 | 	byte	$de, $06, $f8, $e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04
15ead     EF F8 0A F3 
15eb1     10 1D 00 03 
15eb5     E5 01 1C 07 
15eb9     07 12 FA 0D | 	byte	$ef, $f8, $0a, $f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d
15ebd     18 F2 15 1B 
15ec1     04 F2 0D 10 
15ec5     FB 09 FC 0C 
15ec9     13 FA 07 33 | 	byte	$18, $f2, $15, $1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33
15ecd     EF FD 20 0C 
15ed1     FE 0C FB 15 
15ed5     0C 0E 08 F9 
15ed9     F0 11 18 F6 | 	byte	$ef, $fd, $20, $0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6
15edd     DB 19 03 05 
15ee1     02 E0 05 05 
15ee5     F5 04 04 05 
15ee9     04 06 E9 EF | 	byte	$db, $19, $03, $05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef
15eed     1A 0A 06 FE 
15ef1     00 07 0B FB 
15ef5     E6 FD FC 10 
15ef9     FA FC E0 F0 | 	byte	$1a, $0a, $06, $fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0
15efd     0A EA F1 E8 
15f01     E5 F7 FC EA 
15f05     FD F8 DB 06 
15f09     F7 E6 FA 04 | 	byte	$0a, $ea, $f1, $e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04
15f0d     FD E9 E9 06 
15f11     07 0A E8 12 
15f15     16 01 00 F3 
15f19     FF 2F 0A F8 | 	byte	$fd, $e9, $e9, $06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8
15f1d     0D 20 10 08 
15f21     ED 13 1B 0E 
15f25     0D F3 03 16 
15f29     FC 0E 08 06 | 	byte	$0d, $20, $10, $08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06
15f2d     08 FD 09 0D 
15f31     20 FC EF 18 
15f35     0D F7 0F EE 
15f39     FE 05 0B EE | 	byte	$08, $fd, $09, $0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee
15f3d     ED 1A 1D F6 
15f41     08 F1 F5 04 
15f45     FF 1E EA F0 
15f49     10 FE 06 19 | 	byte	$ed, $1a, $1d, $f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19
15f4d     FF FE 00 FD 
15f51     02 0B FA 01 
15f55     0C 00 F3 02 
15f59     08 0B F5 0C | 	byte	$ff, $fe, $00, $fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c
15f5d     FC F8 E2 0B 
15f61     FD FA F5 EB 
15f65     FC F7 E0 F6 
15f69     FF 15 F6 EE | 	byte	$fc, $f8, $e2, $0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee
15f6d     F5 E6 E4 FF 
15f71     FF 06 E9 F2 
15f75     F2 FC 03 FE 
15f79     06 FF EE 13 | 	byte	$f5, $e6, $e4, $ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13
15f7d     05 F4 0F 1D 
15f81     23 00 08 15 
15f85     01 00 23 0E 
15f89     03 13 02 1B | 	byte	$05, $f4, $0f, $1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b
15f8d     08 12 0F 02 
15f91     09 FD 11 03 
15f95     08 01 05 03 
15f99     16 08 0B FE | 	byte	$08, $12, $0f, $02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe
15f9d     05 04 0B E3 
15fa1     FB 1D 03 05 
15fa5     01 09 09 01 
15fa9     FD FF ED EC | 	byte	$05, $04, $0b, $e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec
15fad     08 0A F5 E5 
15fb1     F7 16 01 F9 
15fb5     E2 FA E1 06 
15fb9     01 F9 02 F1 | 	byte	$08, $0a, $f5, $e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1
15fbd     E0 FB 0C 06 
15fc1     E9 DD F6 14 
15fc5     01 08 EC FD 
15fc9     0A 03 01 EB | 	byte	$e0, $fb, $0c, $06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb
15fcd     F7 00 10 E7 
15fd1     00 08 06 11 
15fd5     FA EF 13 EF 
15fd9     F4 05 0E FE | 	byte	$f7, $00, $10, $e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe
15fdd     F6 F7 20 FB 
15fe1     04 02 FE 01 
15fe5     F4 0F 2C 09 
15fe9     02 09 01 0F | 	byte	$f6, $f7, $20, $fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f
15fed     13 08 F6 0F 
15ff1     14 0D FA 08 
15ff5     15 F5 31 11 
15ff9     E5 0A 11 02 | 	byte	$13, $08, $f6, $0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02
15ffd     19 11 FD FB 
16001     0D 0C FA 03 
16005     05 00 00 01 
16009     03 05 08 09 | 	byte	$19, $11, $fd, $fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09
1600d     01 D9 12 04 
16011     E2 04 07 F8 
16015     E6 FC ED 01 
16019     0B F3 FC ED | 	byte	$01, $d9, $12, $04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed
1601d     FF 05 EC F4 
16021     0C FF F8 F3 
16025     F7 F7 08 F4 
16029     F9 03 F4 F4 | 	byte	$ff, $05, $ec, $f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4
1602d     F5 F2 FD 0A 
16031     F7 FE F7 ED 
16035     08 10 EF FD 
16039     F3 01 03 F2 | 	byte	$f5, $f2, $fd, $0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2
1603d     F8 F1 08 FE 
16041     08 FA F2 FA 
16045     10 05 F2 03 
16049     03 18 07 E9 | 	byte	$f8, $f1, $08, $fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9
1604d     17 18 04 0B 
16051     10 0C FC 16 
16055     FE 09 1C 0B 
16059     10 09 14 1C | 	byte	$17, $18, $04, $0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c
1605d     11 14 0B 06 
16061     05 0F 0F 18 
16065     19 17 F4 0E 
16069     07 12 18 06 | 	byte	$11, $14, $0b, $06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06
1606d     EF 0B 12 FA 
16071     FB F5 02 02 
16075     06 FD F3 E9 
16079     F3 F6 EF FC | 	byte	$ef, $0b, $12, $fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc
1607d     FB E8 EA EF 
16081     F3 F8 FC F2 
16085     F2 EB DD E8 
16089     10 F9 F1 04 | 	byte	$fb, $e8, $ea, $ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04
1608d     FA E2 F5 FC 
16091     F2 05 00 E8 
16095     F5 03 FB E7 
16099     FD 01 FC F1 | 	byte	$fa, $e2, $f5, $fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1
1609d     03 03 F3 F0 
160a1     FC F8 01 FB 
160a5     0C EA 08 15 
160a9     09 FC FA 0A | 	byte	$03, $03, $f3, $f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a
160ad     00 F7 19 08 
160b1     09 F9 0C 0F 
160b5     0A 08 1A FA 
160b9     1F 10 03 FC | 	byte	$00, $f7, $19, $08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc
160bd     0D 27 18 07 
160c1     10 06 1A 18 
160c5     16 F7 21 13 
160c9     0D 1F F7 1A | 	byte	$0d, $27, $18, $07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a
160cd     0B 09 FE 17 
160d1     11 1E F1 F2 
160d5     0E 1D FD 00 
160d9     F4 F5 14 00 | 	byte	$0b, $09, $fe, $17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00
160dd     F5 F3 FC FE 
160e1     ED F9 F1 F9 
160e5     F2 01 F7 F3 
160e9     FB E6 F4 F0 | 	byte	$f5, $f3, $fc, $fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0
160ed     FE EB EB F3 
160f1     E7 F6 EE F3 
160f5     E6 E4 08 F3 
160f9     DF EC FB 00 | 	byte	$fe, $eb, $eb, $f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00
160fd     F1 F8 F5 F3 
16101     F4 FE 09 F5 
16105     F9 FF 02 0A 
16109     FC FE F9 0D | 	byte	$f1, $f8, $f5, $f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d
1610d     06 F9 07 17 
16111     11 05 FF EE 
16115     05 0E 0E 0E 
16119     17 F5 03 10 | 	byte	$06, $f9, $07, $17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10
1611d     05 08 12 12 
16121     FE 0A 22 1B 
16125     FE 16 17 16 
16129     FF 0B 23 14 | 	byte	$05, $08, $12, $12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14
1612d     0A 0D 10 03 
16131     11 14 02 FC 
16135     13 12 17 F5 
16139     04 0D 02 04 | 	byte	$0a, $0d, $10, $03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04
1613d     0F F0 FB 0E 
16141     08 F2 F8 F9 
16145     0E F6 F6 01 
16149     F9 F5 EB F8 | 	byte	$0f, $f0, $fb, $0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8
1614d     02 F7 FA F0 
16151     05 F6 05 E7 
16155     E0 0A F2 02 
16159     FE EC F3 09 | 	byte	$02, $f7, $fa, $f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09
1615d     F7 EC F5 F5 
16161     EF 03 F7 F9 
16165     08 FB EA 05 
16169     F1 FD FC 0B | 	byte	$f7, $ec, $f5, $f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b
1616d     F5 F4 F1 F1 
16171     08 11 FE E6 
16175     FE F1 0C 12 
16179     03 F4 FD 06 | 	byte	$f5, $f4, $f1, $f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06
1617d     12 12 F3 0C 
16181     02 12 F4 0F 
16185     02 08 09 10 
16189     11 02 FC 10 | 	byte	$12, $12, $f3, $0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10
1618d     17 F7 05 0D 
16191     1A 08 00 0F 
16195     07 F8 0F 12 
16199     0A 1C 08 FB | 	byte	$17, $f7, $05, $0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb
1619d     0C 15 12 F9 
161a1     0F 1A 0E FD 
161a5     13 13 04 02 
161a9     04 02 F6 11 | 	byte	$0c, $15, $12, $f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11
161ad     03 03 0A E8 
161b1     01 FC FB EF 
161b5     0A 06 EE F2 
161b9     FA E6 F6 F9 | 	byte	$03, $03, $0a, $e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9
161bd     04 F2 DF F8 
161c1     FC F0 EB E4 
161c5     FD FC F4 F6 
161c9     F0 FB F3 FA | 	byte	$04, $f2, $df, $f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa
161cd     00 EA 08 F3 
161d1     E0 01 FC E1 
161d5     17 03 E4 FF 
161d9     FD FF 02 ED | 	byte	$00, $ea, $08, $f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed
161dd     09 FF F5 F7 
161e1     0B 03 08 09 
161e5     05 00 F6 1B 
161e9     F4 06 1F 01 | 	byte	$09, $ff, $f5, $f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01
161ed     F8 FD 0D 11 
161f1     09 08 06 0C 
161f5     02 0E 03 FB 
161f9     1D 0A 11 08 | 	byte	$f8, $fd, $0d, $11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08
161fd     F8 16 20 F9 
16201     07 12 FD 0D 
16205     15 08 FD 0F 
16209     03 17 00 FE | 	byte	$f8, $16, $20, $f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe
1620d     08 1F 00 04 
16211     11 F8 01 01 
16215     F7 14 03 00 
16219     01 F7 05 FD | 	byte	$08, $1f, $00, $04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd
1621d     F1 FE 19 02 
16221     EB F4 F5 01 
16225     08 EF FE 00 
16229     F9 EB FD F5 | 	byte	$f1, $fe, $19, $02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5
1622d     FC F2 F8 FD 
16231     F3 F1 06 F1 
16235     FC F6 FB F9 
16239     02 F6 F3 01 | 	byte	$fc, $f2, $f8, $fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01
1623d     FA 02 FB FD 
16241     F6 FC 0B F5 
16245     F6 FE F8 04 
16249     FE FE FC 12 | 	byte	$fa, $02, $fb, $fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12
1624d     02 F2 06 0B 
16251     FF 04 FB 0F 
16255     FC 0F 10 F9 
16259     11 0B FD F6 | 	byte	$02, $f2, $06, $0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6
1625d     09 1C 0B 00 
16261     04 06 18 0C 
16265     F8 F5 14 0C 
16269     02 10 FE 03 | 	byte	$09, $1c, $0b, $00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03
1626d     06 03 08 06 
16271     FE 01 0F 03 
16275     FB 01 07 09 
16279     07 0A 0B F4 | 	byte	$06, $03, $08, $06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4
1627d     FC 07 01 FD 
16281     0B FD FF F9 
16285     09 F4 EF 0A 
16289     02 F6 FD F5 | 	byte	$fc, $07, $01, $fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5
1628d     F4 FF 10 03 
16291     ED 02 F8 F4 
16295     F9 0A FD F8 
16299     FE FF F9 FD | 	byte	$f4, $ff, $10, $03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd
1629d     02 EC 06 F7 
162a1     FB FE 04 FD 
162a5     01 FD FC F3 
162a9     01 FB FF FB | 	byte	$02, $ec, $06, $f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb
162ad     FF 0A F9 FD 
162b1     FE 04 0B F9 
162b5     F5 08 0E FE 
162b9     FF 0E 00 06 | 	byte	$ff, $0a, $f9, $fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06
162bd     05 0B 0A FD 
162c1     09 10 F1 06 
162c5     08 FC 0A FD 
162c9     FF 06 01 FB | 	byte	$05, $0b, $0a, $fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb
162cd     08 F6 F9 07 
162d1     10 FA FA F4 
162d5     0D 09 01 00 
162d9     F8 F9 0B FC | 	byte	$08, $f6, $f9, $07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc
162dd     F1 0B 0F 05 
162e1     FA 0B F5 01 
162e5     08 09 FF F1 
162e9     03 04 07 06 | 	byte	$f1, $0b, $0f, $05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06
162ed     FF 04 FA FC 
162f1     FC 14 00 F4 
162f5     FB 03 FA 0E 
162f9     02 F5 06 FD | 	byte	$ff, $04, $fa, $fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd
162fd     00 FA 03 00 
16301     0F 04 F7 FF 
16305     02 0E FC F7 
16309     10 09 EB 06 | 	byte	$00, $fa, $03, $00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06
1630d     11 FD FE F1 
16311     FB 0A FE FF 
16315     FA FD 08 07 
16319     04 ED F9 02 | 	byte	$11, $fd, $fe, $f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02
1631d     08 0A FE 00 
16321     FD 03 08 FE 
16325     06 00 07 01 
16329     FA 03 0D FA | 	byte	$08, $0a, $fe, $00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa
1632d     FF 02 03 08 
16331     11 F6 09 FF 
16335     F9 06 07 F5 
16339     0C FC 0B F7 | 	byte	$ff, $02, $03, $08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7
1633d     F4 00 08 F6 
16341     02 FB 05 F7 
16345     FC 03 07 0C 
16349     F1 FA 15 F2 | 	byte	$f4, $00, $08, $f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2
1634d     00 FD F5 18 
16351     03 ED 07 F2 
16355     0B 0A 09 FB 
16359     0F FE 02 0E | 	byte	$00, $fd, $f5, $18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e
1635d     F9 F7 0D 0A 
16361     F7 FE 0A 02 
16365     F8 03 0C F3 
16369     07 05 FA F2 | 	byte	$f9, $f7, $0d, $0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2
1636d     06 FE 03 0A 
16371     EC 03 03 FC 
16375     06 F6 F9 0E 
16379     05 F4 FC FB | 	byte	$06, $fe, $03, $0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb
1637d     06 0F F8 FB 
16381     FF FB FF 19 
16385     FB F5 FE FD 
16389     0A 07 0A F8 | 	byte	$06, $0f, $f8, $fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8
1638d     04 04 10 06 
16391     FC 0E FB F6 
16395     0C 14 F6 FA 
16399     12 08 08 FE | 	byte	$04, $04, $10, $06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe
1639d     08 04 01 00 
163a1     10 0B 05 02 
163a5     F6 0B 0B FE 
163a9     04 01 F5 FA | 	byte	$08, $04, $01, $00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa
163ad     0C FF F1 0A 
163b1     08 F8 02 FD 
163b5     FC 04 F7 FF 
163b9     FA F3 12 F7 | 	byte	$0c, $ff, $f1, $0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7
163bd     EF FD 0D FA 
163c1     F5 05 FA EE 
163c5     10 F3 F4 05 
163c9     FC 00 04 F9 | 	byte	$ef, $fd, $0d, $fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9
163cd     09 FB F0 FB 
163d1     0D 01 FA F6 
163d5     FF 0A 06 EA 
163d9     02 FF F7 05 | 	byte	$09, $fb, $f0, $fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05
163dd     FE 07 01 FB 
163e1     FA 0F 0D F0 
163e5     FE 09 0A FD 
163e9     FE 01 0B 00 | 	byte	$fe, $07, $01, $fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00
163ed     01 10 04 FE 
163f1     01 09 FE 03 
163f5     03 0A 05 FF 
163f9     10 07 F7 02 | 	byte	$01, $10, $04, $fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02
163fd     0F 0E ED 05 
16401     0B FF FF 0A 
16405     08 FB 06 09 
16409     F2 05 10 FE | 	byte	$0f, $0e, $ed, $05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe
1640d     FB 02 07 06 
16411     08 F8 F4 07 
16415     FD FF 08 FA 
16419     02 0D FD E8 | 	byte	$fb, $02, $07, $06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8
1641d     00 04 04 05 
16421     F3 F4 0D 09 
16425     09 EC F9 0E 
16429     F7 FF FB FE | 	byte	$00, $04, $04, $05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe
1642d     0E 04 F2 08 
16431     FB F5 FE F4 
16435     FD 05 05 F0 
16439     08 F3 FE FF | 	byte	$0e, $04, $f2, $08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff
1643d     F2 FB 00 FD 
16441     F9 04 FD FC 
16445     FC 04 FC F8 
16449     07 F1 FC FD | 	byte	$f2, $fb, $00, $fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd
1644d     04 01 FE F9 
16451     03 FE 16 06 
16455     FA E8 14 13 
16459     FB FD 10 03 | 	byte	$04, $01, $fe, $f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03
1645d     FE 0C 04 F7 
16461     01 0C 01 F7 
16465     0B 0A 0A 00 
16469     03 00 03 0D | 	byte	$fe, $0c, $04, $f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d
1646d     07 02 FE 13 
16471     08 03 04 01 
16475     0C 0A F8 03 
16479     13 FD 01 07 | 	byte	$07, $02, $fe, $13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07
1647d     F5 14 15 F7 
16481     F7 0C FF FF 
16485     FF FA 08 00 
16489     01 0B FE F6 | 	byte	$f5, $14, $15, $f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6
1648d     FD FD 05 00 
16491     FB F6 02 FA 
16495     03 09 02 F0 
16499     F9 F6 06 FE | 	byte	$fd, $fd, $05, $00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe
1649d     FB 04 F5 F6 
164a1     02 F9 06 FA 
164a5     EF 01 05 F9 
164a9     FD 00 FD 06 | 	byte	$fb, $04, $f5, $f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06
164ad     00 F8 00 FF 
164b1     03 05 F7 FB 
164b5     06 F7 00 00 
164b9     08 FB F9 FF | 	byte	$00, $f8, $00, $ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff
164bd     04 03 0A F6 
164c1     F6 07 01 F9 
164c5     05 F8 08 01 
164c9     08 05 01 FB | 	byte	$04, $03, $0a, $f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb
164cd     0C 00 F5 00 
164d1     0A FD 01 15 
164d5     FE 00 FC 10 
164d9     0A FD FB 07 | 	byte	$0c, $00, $f5, $00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07
164dd     FF F9 0B 03 
164e1     01 0D FB F7 
164e5     13 07 02 03 
164e9     F1 0B 0E 07 | 	byte	$ff, $f9, $0b, $03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07
164ed     FA 02 F4 11 
164f1     0C FA F9 0E 
164f5     01 05 FF FE 
164f9     FD 07 02 01 | 	byte	$fa, $02, $f4, $11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01
164fd     03 FE FE 09 
16501     F6 0C 01 F9 
16505     F3 0A 05 FA 
16509     F8 FF 11 05 | 	byte	$03, $fe, $fe, $09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05
1650d     F2 F5 07 08 
16511     08 FB FB 07 
16515     FB 04 03 F7 
16519     00 F9 FE 0B | 	byte	$f2, $f5, $07, $08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b
1651d     02 F8 09 FC 
16521     05 F8 F9 0A 
16525     FE 08 0F FA 
16529     F6 FF 09 0D | 	byte	$02, $f8, $09, $fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d
1652d     FD F9 08 FF 
16531     04 04 FA 01 
16535     0E F8 01 03 
16539     01 FD FF 01 | 	byte	$fd, $f9, $08, $ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01
1653d     01 FB 06 FF 
16541     F3 0F 13 F4 
16545     F8 00 05 0E 
16549     03 F8 07 FF | 	byte	$01, $fb, $06, $ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff
1654d     F7 04 FC F8 
16551     11 0A FA FA 
16555     FC FE FF FD 
16559     11 FE F1 07 | 	byte	$f7, $04, $fc, $f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07
1655d     03 FD 00 F4 
16561     0B 06 F4 FA 
16565     0D 03 F2 03 
16569     07 FA 00 08 | 	byte	$03, $fd, $00, $f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08
1656d     05 FF FC 0D 
16571     FE F1 06 0F 
16575     FD F8 05 07 
16579     07 F9 F9 0A | 	byte	$05, $ff, $fc, $0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a
1657d     FF FE 0E 01 
16581     FA 02 05 FF 
16585     01 00 09 05 
16589     02 0C 0C 0C | 	byte	$ff, $fe, $0e, $01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c
1658d     F9 01 00 FE 
16591     0E 08 F2 03 
16595     0A 08 01 FE 
16599     FA 04 FA 06 | 	byte	$f9, $01, $00, $fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06
1659d     FF FE 04 01 
165a1     00 FC FA 03 
165a5     09 F2 FE FF 
165a9     06 F9 02 FD | 	byte	$ff, $fe, $04, $01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd
165ad     01 0B F0 F9 
165b1     08 05 04 0B 
165b5     F7 00 00 01 
165b9     01 07 F4 FC | 	byte	$01, $0b, $f0, $f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc
165bd     07 05 00 ED 
165c1     0E 09 F0 05 
165c5     02 FD 09 FB 
165c9     F9 F6 11 F8 | 	byte	$07, $05, $00, $ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8
165cd     05 02 01 ED 
165d1     02 0B F6 F7 
165d5     06 F9 FA 07 
165d9     F4 F5 0B F0 | 	byte	$05, $02, $01, $ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0
165dd     F9 01 04 FA 
165e1     FA F8 01 FF 
165e5     01 08 FA FD 
165e9     01 05 06 FC | 	byte	$f9, $01, $04, $fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc
165ed     05 FF 02 15 
165f1     FF F5 15 01 
165f5     F8 0F 04 08 
165f9     04 0B 02 00 | 	byte	$05, $ff, $02, $15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00
165fd     12 14 05 FA 
16601     0C 02 0B 0F 
16605     05 FE 09 08 
16609     FE 06 0E 08 | 	byte	$12, $14, $05, $fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08
1660d     F5 09 07 0A 
16611     0B 03 FB 04 
16615     F5 0A 10 05 
16619     F6 06 FD 06 | 	byte	$f5, $09, $07, $0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06
1661d     00 01 08 FA 
16621     FF 03 FD FE 
16625     F6 FA F7 04 
16629     0A F5 01 FC | 	byte	$00, $01, $08, $fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc
1662d     FF F1 07 03 
16631     F6 EF FE FC 
16635     FF 01 F8 F4 
16639     F4 FB FF F1 | 	byte	$ff, $f1, $07, $03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1
1663d     FD 00 FB F3 
16641     F5 F8 F9 01 
16645     03 E9 FE FF 
16649     FB FE F9 00 | 	byte	$fd, $00, $fb, $f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00
1664d     00 00 00 01 
16651     E3 07 DA 0F 
16655     E8 0D D2 D5 
16659     E9 EB B6 C9 | 	byte	$00, $00, $00, $01, $e3, $07, $da, $0f, $e8, $0d, $d2, $d5, $e9, $eb, $b6, $c9
1665d     DE 17 F7 00 
16661     BF F5 DA F1 
16665     EE D0 AD C9 
16669     0F 0E 32 F1 | 	byte	$de, $17, $f7, $00, $bf, $f5, $da, $f1, $ee, $d0, $ad, $c9, $0f, $0e, $32, $f1
1666d     BB FF F1 50 
16671     3E 10 C5 AB 
16675     F5 4C 42 55 
16679     E0 97 C8 E8 | 	byte	$bb, $ff, $f1, $50, $3e, $10, $c5, $ab, $f5, $4c, $42, $55, $e0, $97, $c8, $e8
1667d     58 3B 04 BE 
16681     AF EA 04 80 
16685     61 61 EB F2 
16689     C4 37 54 56 | 	byte	$58, $3b, $04, $be, $af, $ea, $04, $80, $61, $61, $eb, $f2, $c4, $37, $54, $56
1668d     3D E8 C1 E9 
16691     1B 4C 47 21 
16695     F5 CB 05 0A 
16699     4A 05 27 EC | 	byte	$3d, $e8, $c1, $e9, $1b, $4c, $47, $21, $f5, $cb, $05, $0a, $4a, $05, $27, $ec
1669d     BF 1D D3 35 
166a1     46 E8 18 12 
166a5     F3 15 51 0E 
166a9     1B 1B EF 23 | 	byte	$bf, $1d, $d3, $35, $46, $e8, $18, $12, $f3, $15, $51, $0e, $1b, $1b, $ef, $23
166ad     F4 42 0E 1A 
166b1     27 D0 03 10 
166b5     49 EA 43 04 
166b9     41 F6 1C 25 | 	byte	$f4, $42, $0e, $1a, $27, $d0, $03, $10, $49, $ea, $43, $04, $41, $f6, $1c, $25
166bd     17 48 08 12 
166c1     E8 05 02 02 
166c5     FE 0D DC CD 
166c9     DC EF 01 11 | 	byte	$17, $48, $08, $12, $e8, $05, $02, $02, $fe, $0d, $dc, $cd, $dc, $ef, $01, $11
166cd     DE F4 16 EA 
166d1     17 12 CA 05 
166d5     FE F8 FA 15 
166d9     05 01 2D 02 | 	byte	$de, $f4, $16, $ea, $17, $12, $ca, $05, $fe, $f8, $fa, $15, $05, $01, $2d, $02
166dd     1D 0F 3A D6 
166e1     35 24 E4 25 
166e5     EE 18 FF 43 
166e9     EF 36 EF 03 | 	byte	$1d, $0f, $3a, $d6, $35, $24, $e4, $25, $ee, $18, $ff, $43, $ef, $36, $ef, $03
166ed     09 06 02 15 
166f1     E5 3B FB F6 
166f5     26 DF 10 11 
166f9     00 3F 17 06 | 	byte	$09, $06, $02, $15, $e5, $3b, $fb, $f6, $26, $df, $10, $11, $00, $3f, $17, $06
166fd     1E 16 DD 0D 
16701     F8 FF FD 11 
16705     1B FF 14 12 
16709     EF F6 0F E7 | 	byte	$1e, $16, $dd, $0d, $f8, $ff, $fd, $11, $1b, $ff, $14, $12, $ef, $f6, $0f, $e7
1670d     E7 EC F4 F6 
16711     0B EF FA 21 
16715     08 F8 F3 14 
16719     DF 08 1C DA | 	byte	$e7, $ec, $f4, $f6, $0b, $ef, $fa, $21, $08, $f8, $f3, $14, $df, $08, $1c, $da
1671d     04 FC 11 BF 
16721     25 E1 E7 1C 
16725     E0 12 09 0F 
16729     ED 08 0E F4 | 	byte	$04, $fc, $11, $bf, $25, $e1, $e7, $1c, $e0, $12, $09, $0f, $ed, $08, $0e, $f4
1672d     0F E4 00 04 
16731     1D F9 F8 1D 
16735     DA 05 E6 F2 
16739     F0 F8 F0 F4 | 	byte	$0f, $e4, $00, $04, $1d, $f9, $f8, $1d, $da, $05, $e6, $f2, $f0, $f8, $f0, $f4
1673d     FA 02 C1 FC 
16741     E7 E1 1C F5 
16745     E4 01 E6 F5 
16749     E4 0D F5 F3 | 	byte	$fa, $02, $c1, $fc, $e7, $e1, $1c, $f5, $e4, $01, $e6, $f5, $e4, $0d, $f5, $f3
1674d     DA 10 AC 10 
16751     02 F2 01 F8 
16755     EA FA EC 16 
16759     E0 F3 02 E9 | 	byte	$da, $10, $ac, $10, $02, $f2, $01, $f8, $ea, $fa, $ec, $16, $e0, $f3, $02, $e9
1675d     EB 13 F5 F9 
16761     F4 FE EE 04 
16765     F5 01 FA EB 
16769     0C D7 19 EE | 	byte	$eb, $13, $f5, $f9, $f4, $fe, $ee, $04, $f5, $01, $fa, $eb, $0c, $d7, $19, $ee
1676d     FC 02 F4 FA 
16771     F7 EC FC 01 
16775     0A EB 03 DC 
16779     F8 0C F9 EE | 	byte	$fc, $02, $f4, $fa, $f7, $ec, $fc, $01, $0a, $eb, $03, $dc, $f8, $0c, $f9, $ee
1677d     0A F3 EB F5 
16781     D5 09 D2 30 
16785     D2 01 F2 E5 
16789     F6 F2 F2 28 | 	byte	$0a, $f3, $eb, $f5, $d5, $09, $d2, $30, $d2, $01, $f2, $e5, $f6, $f2, $f2, $28
1678d     DE F1 ED 15 
16791     0A 0D D6 D2 
16795     F6 02 22 2D 
16799     C5 F2 E0 1C | 	byte	$de, $f1, $ed, $15, $0a, $0d, $d6, $d2, $f6, $02, $22, $2d, $c5, $f2, $e0, $1c
1679d     15 36 EF AD 
167a1     DF E3 27 18 
167a5     2C C7 D6 D6 
167a9     F2 25 06 08 | 	byte	$15, $36, $ef, $ad, $df, $e3, $27, $18, $2c, $c7, $d6, $d6, $f2, $25, $06, $08
167ad     A1 CD D6 E4 
167b1     3A 10 FA D9 
167b5     BD EC 07 2C 
167b9     20 FE E8 CE | 	byte	$a1, $cd, $d6, $e4, $3a, $10, $fa, $d9, $bd, $ec, $07, $2c, $20, $fe, $e8, $ce
167bd     ED 1D 12 14 
167c1     16 D8 D7 FC 
167c5     FA FE 36 F3 
167c9     F1 E9 FB F5 | 	byte	$ed, $1d, $12, $14, $16, $d8, $d7, $fc, $fa, $fe, $36, $f3, $f1, $e9, $fb, $f5
167cd     FA 26 F9 D8 
167d1     02 0B F2 2C 
167d5     05 F9 FC F9 
167d9     EB 1A 0F 07 | 	byte	$fa, $26, $f9, $d8, $02, $0b, $f2, $2c, $05, $f9, $fc, $f9, $eb, $1a, $0f, $07
167dd     18 F0 EF EA 
167e1     08 FC 08 14 
167e5     EF 06 E1 0B 
167e9     F5 2F FD EF | 	byte	$18, $f0, $ef, $ea, $08, $fc, $08, $14, $ef, $06, $e1, $0b, $f5, $2f, $fd, $ef
167ed     F1 EE FB F4 
167f1     13 10 01 18 
167f5     E8 0E 11 0E 
167f9     EC 33 ED 07 | 	byte	$f1, $ee, $fb, $f4, $13, $10, $01, $18, $e8, $0e, $11, $0e, $ec, $33, $ed, $07
167fd     18 0F EA 1D 
16801     11 F6 26 0E 
16805     0B 13 17 EF 
16809     FE FA 07 E9 | 	byte	$18, $0f, $ea, $1d, $11, $f6, $26, $0e, $0b, $13, $17, $ef, $fe, $fa, $07, $e9
1680d     26 FE E9 14 
16811     E7 14 13 17 
16815     0A FC 1D F5 
16819     16 0D 01 02 | 	byte	$26, $fe, $e9, $14, $e7, $14, $13, $17, $0a, $fc, $1d, $f5, $16, $0d, $01, $02
1681d     0C 00 FE 03 
16821     16 F5 0E 09 
16825     E5 0C 0E EC 
16829     FD FA EE F2 | 	byte	$0c, $00, $fe, $03, $16, $f5, $0e, $09, $e5, $0c, $0e, $ec, $fd, $fa, $ee, $f2
1682d     05 0B 0D 05 
16831     0F 01 F2 07 
16835     0F 04 26 F8 
16839     08 03 09 0F | 	byte	$05, $0b, $0d, $05, $0f, $01, $f2, $07, $0f, $04, $26, $f8, $08, $03, $09, $0f
1683d     0D 01 13 05 
16841     F6 17 E1 29 
16845     0B 0E 06 E2 
16849     06 06 00 17 | 	byte	$0d, $01, $13, $05, $f6, $17, $e1, $29, $0b, $0e, $06, $e2, $06, $06, $00, $17
1684d     03 EA 0B FB 
16851     1B F8 1A E4 
16855     0C F7 05 0F 
16859     F6 15 F7 07 | 	byte	$03, $ea, $0b, $fb, $1b, $f8, $1a, $e4, $0c, $f7, $05, $0f, $f6, $15, $f7, $07
1685d     0C EC F1 01 
16861     03 09 F6 0A 
16865     E3 02 04 F8 
16869     11 FA F8 F4 | 	byte	$0c, $ec, $f1, $01, $03, $09, $f6, $0a, $e3, $02, $04, $f8, $11, $fa, $f8, $f4
1686d     E8 10 F2 19 
16871     0B 00 FB 0C 
16875     F0 14 00 1A 
16879     10 F2 0D F3 | 	byte	$e8, $10, $f2, $19, $0b, $00, $fb, $0c, $f0, $14, $00, $1a, $10, $f2, $0d, $f3
1687d     02 06 F2 14 
16881     FB FB 04 F9 
16885     02 11 FC FD 
16889     04 04 FB 19 | 	byte	$02, $06, $f2, $14, $fb, $fb, $04, $f9, $02, $11, $fc, $fd, $04, $04, $fb, $19
1688d     F2 0C ED F5 
16891     00 0A 04 F8 
16895     FF 04 FF FC 
16899     FE FD F6 08 | 	byte	$f2, $0c, $ed, $f5, $00, $0a, $04, $f8, $ff, $04, $ff, $fc, $fe, $fd, $f6, $08
1689d     0A ED FF FA 
168a1     0B EF 0E 0C 
168a5     FD FE 0B 05 
168a9     04 17 EC 0F | 	byte	$0a, $ed, $ff, $fa, $0b, $ef, $0e, $0c, $fd, $fe, $0b, $05, $04, $17, $ec, $0f
168ad     03 FD 08 F2 
168b1     1A F4 14 00 
168b5     0E FD 03 FD 
168b9     0A FF 13 F6 | 	byte	$03, $fd, $08, $f2, $1a, $f4, $14, $00, $0e, $fd, $03, $fd, $0a, $ff, $13, $f6
168bd     1D E2 13 F7 
168c1     13 0B 0D F0 
168c5     0F FF 2B FE 
168c9     26 EE FF 09 | 	byte	$1d, $e2, $13, $f7, $13, $0b, $0d, $f0, $0f, $ff, $2b, $fe, $26, $ee, $ff, $09
168cd     10 FF 08 02 
168d1     FA 0B 00 17 
168d5     F6 00 08 EF 
168d9     25 F1 0D F8 | 	byte	$10, $ff, $08, $02, $fa, $0b, $00, $17, $f6, $00, $08, $ef, $25, $f1, $0d, $f8
168dd     05 09 12 00 
168e1     08 F4 15 FF 
168e5     1C FB 0A 05 
168e9     16 04 F4 1F | 	byte	$05, $09, $12, $00, $08, $f4, $15, $ff, $1c, $fb, $0a, $05, $16, $04, $f4, $1f
168ed     FB 10 14 08 
168f1     0E F9 07 02 
168f5     0B 00 E2 0D 
168f9     FD 06 1D 09 | 	byte	$fb, $10, $14, $08, $0e, $f9, $07, $02, $0b, $00, $e2, $0d, $fd, $06, $1d, $09
168fd     05 F9 EF 06 
16901     0E 02 17 FC 
16905     14 FF 07 10 
16909     FE 00 F1 06 | 	byte	$05, $f9, $ef, $06, $0e, $02, $17, $fc, $14, $ff, $07, $10, $fe, $00, $f1, $06
1690d     0B 07 13 12 
16911     0D 16 FC FF 
16915     03 09 09 08 
16919     19 FE 11 F5 | 	byte	$0b, $07, $13, $12, $0d, $16, $fc, $ff, $03, $09, $09, $08, $19, $fe, $11, $f5
1691d     1C 05 17 0D 
16921     F1 07 0B F9 
16925     20 0C 0A 04 
16929     EE 01 05 FF | 	byte	$1c, $05, $17, $0d, $f1, $07, $0b, $f9, $20, $0c, $0a, $04, $ee, $01, $05, $ff
1692d     0F F9 03 09 
16931     03 00 05 F4 
16935     F9 00 FB 01 
16939     FA 11 F2 00 | 	byte	$0f, $f9, $03, $09, $03, $00, $05, $f4, $f9, $00, $fb, $01, $fa, $11, $f2, $00
1693d     EE EE EF 00 
16941     FF F8 EC F2 
16945     F2 07 02 02 
16949     04 F0 FB 00 | 	byte	$ee, $ee, $ef, $00, $ff, $f8, $ec, $f2, $f2, $07, $02, $02, $04, $f0, $fb, $00
1694d     02 16 07 07 
16951     05 FB 05 03 
16955     F7 F5 00 F2 
16959     0C FD 01 F7 | 	byte	$02, $16, $07, $07, $05, $fb, $05, $03, $f7, $f5, $00, $f2, $0c, $fd, $01, $f7
1695d     FB F9 02 ED 
16961     FA F7 FD F3 
16965     F8 12 F4 04 
16969     03 FD FC 01 | 	byte	$fb, $f9, $02, $ed, $fa, $f7, $fd, $f3, $f8, $12, $f4, $04, $03, $fd, $fc, $01
1696d     F0 04 FD FB 
16971     03 FF EC 05 
16975     E9 F8 F6 01 
16979     04 F8 FA F1 | 	byte	$f0, $04, $fd, $fb, $03, $ff, $ec, $05, $e9, $f8, $f6, $01, $04, $f8, $fa, $f1
1697d     00 F9 02 07 
16981     F5 FF EE 11 
16985     FC 15 FA FD 
16989     01 0A FA 0F | 	byte	$00, $f9, $02, $07, $f5, $ff, $ee, $11, $fc, $15, $fa, $fd, $01, $0a, $fa, $0f
1698d     FD 03 07 05 
16991     F4 0F 04 08 
16995     F6 FD 01 05 
16999     00 14 F8 08 | 	byte	$fd, $03, $07, $05, $f4, $0f, $04, $08, $f6, $fd, $01, $05, $00, $14, $f8, $08
1699d     01 F3 02 03 
169a1     FF F3 FB F0 
169a5     13 F4 17 FB 
169a9     04 07 01 09 | 	byte	$01, $f3, $02, $03, $ff, $f3, $fb, $f0, $13, $f4, $17, $fb, $04, $07, $01, $09
169ad     06 04 02 10 
169b1     07 08 06 0A 
169b5     FE 0B 06 0F 
169b9     0B 0F 06 03 | 	byte	$06, $04, $02, $10, $07, $08, $06, $0a, $fe, $0b, $06, $0f, $0b, $0f, $06, $03
169bd     06 02 06 0F 
169c1     FD 01 F7 01 
169c5     05 0C 06 FF 
169c9     FE FC F8 08 | 	byte	$06, $02, $06, $0f, $fd, $01, $f7, $01, $05, $0c, $06, $ff, $fe, $fc, $f8, $08
169cd     08 06 FF FE 
169d1     F7 FB 0A 13 
169d5     08 03 FF 02 
169d9     10 FD 05 FF | 	byte	$08, $06, $ff, $fe, $f7, $fb, $0a, $13, $08, $03, $ff, $02, $10, $fd, $05, $ff
169dd     02 F6 00 F2 
169e1     FE 09 01 FC 
169e5     F5 02 F2 FA 
169e9     03 09 F0 FD | 	byte	$02, $f6, $00, $f2, $fe, $09, $01, $fc, $f5, $02, $f2, $fa, $03, $09, $f0, $fd
169ed     F9 FD 07 08 
169f1     0A 0A 00 06 
169f5     00 0F FD 07 
169f9     FA 04 FB F4 | 	byte	$f9, $fd, $07, $08, $0a, $0a, $00, $06, $00, $0f, $fd, $07, $fa, $04, $fb, $f4
169fd     02 F5 01 10 
16a01     EC 01 00 F0 
16a05     0A 04 F7 F2 
16a09     FE F6 F9 04 | 	byte	$02, $f5, $01, $10, $ec, $01, $00, $f0, $0a, $04, $f7, $f2, $fe, $f6, $f9, $04
16a0d     01 03 FA 06 
16a11     ED FB FF F2 
16a15     FB 00 F7 00 
16a19     F8 F8 08 FB | 	byte	$01, $03, $fa, $06, $ed, $fb, $ff, $f2, $fb, $00, $f7, $00, $f8, $f8, $08, $fb
16a1d     F3 FA EF 00 
16a21     09 F7 0E F8 
16a25     F7 F4 03 05 
16a29     0C FD FC FE | 	byte	$f3, $fa, $ef, $00, $09, $f7, $0e, $f8, $f7, $f4, $03, $05, $0c, $fd, $fc, $fe
16a2d     0B 0D 10 05 
16a31     FB FD F8 11 
16a35     00 16 FB F9 
16a39     F8 FC FF 01 | 	byte	$0b, $0d, $10, $05, $fb, $fd, $f8, $11, $00, $16, $fb, $f9, $f8, $fc, $ff, $01
16a3d     00 F8 04 F8 
16a41     FA FF FB 00 
16a45     00 07 FC FB 
16a49     F5 FF 03 04 | 	byte	$00, $f8, $04, $f8, $fa, $ff, $fb, $00, $00, $07, $fc, $fb, $f5, $ff, $03, $04
16a4d     FE EF 00 FE 
16a51     02 00 00 00 
16a55     F7 F3 0B 02 
16a59     02 06 EC 03 | 	byte	$fe, $ef, $00, $fe, $02, $00, $00, $00, $f7, $f3, $0b, $02, $02, $06, $ec, $03
16a5d     08 03 00 03 
16a61     04 FF 02 05 
16a65     04 01 04 FC 
16a69     03 FB 04 00 | 	byte	$08, $03, $00, $03, $04, $ff, $02, $05, $04, $01, $04, $fc, $03, $fb, $04, $00
16a6d     04 09 06 04 
16a71     00 FA 01 09 
16a75     0D 0A FF F1 
16a79     FB 05 01 0B | 	byte	$04, $09, $06, $04, $00, $fa, $01, $09, $0d, $0a, $ff, $f1, $fb, $05, $01, $0b
16a7d     FE FC F2 0B 
16a81     FA 08 05 F5 
16a85     F1 FB 02 FB 
16a89     0A FB 07 01 | 	byte	$fe, $fc, $f2, $0b, $fa, $08, $05, $f5, $f1, $fb, $02, $fb, $0a, $fb, $07, $01
16a8d     06 0A 00 05 
16a91     08 FD 0A FC 
16a95     02 0F 01 09 
16a99     02 F7 FB 01 | 	byte	$06, $0a, $00, $05, $08, $fd, $0a, $fc, $02, $0f, $01, $09, $02, $f7, $fb, $01
16a9d     0E 06 FE FC 
16aa1     FB 00 03 05 
16aa5     02 F8 F7 FF 
16aa9     0A 08 FE F8 | 	byte	$0e, $06, $fe, $fc, $fb, $00, $03, $05, $02, $f8, $f7, $ff, $0a, $08, $fe, $f8
16aad     F9 F6 03 0A 
16ab1     FE 01 F4 F5 
16ab5     02 0E 0B 06 
16ab9     07 F6 FA 06 | 	byte	$f9, $f6, $03, $0a, $fe, $01, $f4, $f5, $02, $0e, $0b, $06, $07, $f6, $fa, $06
16abd     09 09 05 F9 
16ac1     F3 01 01 03 
16ac5     03 FC FB FD 
16ac9     00 00 FE 09 | 	byte	$09, $09, $05, $f9, $f3, $01, $01, $03, $03, $fc, $fb, $fd, $00, $00, $fe, $09
16acd     02 FB FA FC 
16ad1     02 0C 02 01 
16ad5     01 F6 0B 06 
16ad9     0B 0A 01 FC | 	byte	$02, $fb, $fa, $fc, $02, $0c, $02, $01, $01, $f6, $0b, $06, $0b, $0a, $01, $fc
16add     F5 03 03 0B 
16ae1     03 FB F4 F8 
16ae5     FF 07 06 03 
16ae9     F8 FA F8 07 | 	byte	$f5, $03, $03, $0b, $03, $fb, $f4, $f8, $ff, $07, $06, $03, $f8, $fa, $f8, $07
16aed     00 01 00 FB 
16af1     F5 02 FC FA 
16af5     02 FF FB FA 
16af9     FB F9 02 0A | 	byte	$00, $01, $00, $fb, $f5, $02, $fc, $fa, $02, $ff, $fb, $fa, $fb, $f9, $02, $0a
16afd     FD FF FA F6 
16b01     02 04 0C 08 
16b05     FF FC FA 02 
16b09     06 05 06 F8 | 	byte	$fd, $ff, $fa, $f6, $02, $04, $0c, $08, $ff, $fc, $fa, $02, $06, $05, $06, $f8
16b0d     04 FC FF F4 
16b11     00 00 09 10 
16b15     FD FF FD F6 
16b19     06 04 0E F7 | 	byte	$04, $fc, $ff, $f4, $00, $00, $09, $10, $fd, $ff, $fd, $f6, $06, $04, $0e, $f7
16b1d     F1 F6 01 08 
16b21     08 00 FC F8 
16b25     FC 02 04 07 
16b29     00 FD F9 02 | 	byte	$f1, $f6, $01, $08, $08, $00, $fc, $f8, $fc, $02, $04, $07, $00, $fd, $f9, $02
16b2d     03 04 05 FE 
16b31     F6 FD 00 FD 
16b35     05 04 FC FB 
16b39     FC FE FF 09 | 	byte	$03, $04, $05, $fe, $f6, $fd, $00, $fd, $05, $04, $fc, $fb, $fc, $fe, $ff, $09
16b3d     0B 04 06 09 
16b41     FC 0A 05 08 
16b45     09 0E 00 09 
16b49     F9 04 FF 0E | 	byte	$0b, $04, $06, $09, $fc, $0a, $05, $08, $09, $0e, $00, $09, $f9, $04, $ff, $0e
16b4d     11 0C 08 FA 
16b51     FA 09 04 11 
16b55     0B FC F8 FB 
16b59     02 0B 09 04 | 	byte	$11, $0c, $08, $fa, $fa, $09, $04, $11, $0b, $fc, $f8, $fb, $02, $0b, $09, $04
16b5d     F5 FB 00 07 
16b61     0B 08 FA F6 
16b65     FA 0A 13 0C 
16b69     01 F9 F3 08 | 	byte	$f5, $fb, $00, $07, $0b, $08, $fa, $f6, $fa, $0a, $13, $0c, $01, $f9, $f3, $08
16b6d     09 0D 0B FC 
16b71     F6 08 07 0B 
16b75     0C F8 F8 F5 
16b79     07 04 05 06 | 	byte	$09, $0d, $0b, $fc, $f6, $08, $07, $0b, $0c, $f8, $f8, $f5, $07, $04, $05, $06
16b7d     EF FA 05 01 
16b81     0A F9 F7 FB 
16b85     FE 09 07 06 
16b89     FB F5 FB 00 | 	byte	$ef, $fa, $05, $01, $0a, $f9, $f7, $fb, $fe, $09, $07, $06, $fb, $f5, $fb, $00
16b8d     04 07 01 F9 
16b91     00 FC 00 02 
16b95     05 00 FC FD 
16b99     F7 FE 03 FC | 	byte	$04, $07, $01, $f9, $00, $fc, $00, $02, $05, $00, $fc, $fd, $f7, $fe, $03, $fc
16b9d     FE 00 FD F3 
16ba1     F3 FD FC FD 
16ba5     FD F6 F9 00 
16ba9     01 01 01 FA | 	byte	$fe, $00, $fd, $f3, $f3, $fd, $fc, $fd, $fd, $f6, $f9, $00, $01, $01, $01, $fa
16bad     F9 F9 F5 05 
16bb1     FD FE 03 FA 
16bb5     06 01 FC F7 
16bb9     F8 04 04 0D | 	byte	$f9, $f9, $f5, $05, $fd, $fe, $03, $fa, $06, $01, $fc, $f7, $f8, $04, $04, $0d
16bbd     FE F9 F3 F6 
16bc1     00 0E 0A F8 
16bc5     FF F0 FF 05 
16bc9     05 01 FC F8 | 	byte	$fe, $f9, $f3, $f6, $00, $0e, $0a, $f8, $ff, $f0, $ff, $05, $05, $01, $fc, $f8
16bcd     F9 FC FB FD 
16bd1     03 05 FD FC 
16bd5     F6 FA FD 02 
16bd9     01 FC FA F7 | 	byte	$f9, $fc, $fb, $fd, $03, $05, $fd, $fc, $f6, $fa, $fd, $02, $01, $fc, $fa, $f7
16bdd     FA FB FD 00 
16be1     02 03 F8 00 
16be5     FB 04 0A 05 
16be9     02 F9 F9 FD | 	byte	$fa, $fb, $fd, $00, $02, $03, $f8, $00, $fb, $04, $0a, $05, $02, $f9, $f9, $fd
16bed     08 09 0C 07 
16bf1     F6 FB FE 0B 
16bf5     14 07 03 F9 
16bf9     F4 FF 09 0D | 	byte	$08, $09, $0c, $07, $f6, $fb, $fe, $0b, $14, $07, $03, $f9, $f4, $ff, $09, $0d
16bfd     0A 01 F5 FD 
16c01     FF 02 09 09 
16c05     01 FF F7 FC 
16c09     01 0C 0A 00 | 	byte	$0a, $01, $f5, $fd, $ff, $02, $09, $09, $01, $ff, $f7, $fc, $01, $0c, $0a, $00
16c0d     FE F6 01 05 
16c11     0C 07 06 FC 
16c15     FC 02 04 12 
16c19     0E 03 05 01 | 	byte	$fe, $f6, $01, $05, $0c, $07, $06, $fc, $fc, $02, $04, $12, $0e, $03, $05, $01
16c1d     0F 08 0C 09 
16c21     09 03 01 09 
16c25     05 0E 05 0A 
16c29     04 03 09 08 | 	byte	$0f, $08, $0c, $09, $09, $03, $01, $09, $05, $0e, $05, $0a, $04, $03, $09, $08
16c2d     0E 0B 02 05 
16c31     0A 07 09 06 
16c35     FE FC 03 03 
16c39     07 02 FD F9 | 	byte	$0e, $0b, $02, $05, $0a, $07, $09, $06, $fe, $fc, $03, $03, $07, $02, $fd, $f9
16c3d     00 07 08 02 
16c41     00 F9 FA FC 
16c45     06 0B 02 FB 
16c49     FA FA 0B 0F | 	byte	$00, $07, $08, $02, $00, $f9, $fa, $fc, $06, $0b, $02, $fb, $fa, $fa, $0b, $0f
16c4d     05 FE FA F6 
16c51     05 0A 09 02 
16c55     FC 02 FE 04 
16c59     08 06 00 FE | 	byte	$05, $fe, $fa, $f6, $05, $0a, $09, $02, $fc, $02, $fe, $04, $08, $06, $00, $fe
16c5d     03 00 04 FD 
16c61     05 02 09 00 
16c65     FD FF FD 03 
16c69     01 05 07 04 | 	byte	$03, $00, $04, $fd, $05, $02, $09, $00, $fd, $ff, $fd, $03, $01, $05, $07, $04
16c6d     FE F6 F8 04 
16c71     03 03 F8 F6 
16c75     F8 F6 06 01 
16c79     02 01 F6 F5 | 	byte	$fe, $f6, $f8, $04, $03, $03, $f8, $f6, $f8, $f6, $06, $01, $02, $01, $f6, $f5
16c7d     FB 04 02 F8 
16c81     F5 F2 F8 FB 
16c85     04 FD 01 F4 
16c89     F4 FD 01 0B | 	byte	$fb, $04, $02, $f8, $f5, $f2, $f8, $fb, $04, $fd, $01, $f4, $f4, $fd, $01, $0b
16c8d     05 02 F1 F6 
16c91     FE 04 05 03 
16c95     FC F8 FB 07 
16c99     03 0A 05 00 | 	byte	$05, $02, $f1, $f6, $fe, $04, $05, $03, $fc, $f8, $fb, $07, $03, $0a, $05, $00
16c9d     FE FE FF 01 
16ca1     05 FF 02 03 
16ca5     FD FB 04 FC 
16ca9     03 00 F7 FB | 	byte	$fe, $fe, $ff, $01, $05, $ff, $02, $03, $fd, $fb, $04, $fc, $03, $00, $f7, $fb
16cad     F9 FE 00 01 
16cb1     FF FE FB F9 
16cb5     FF 02 FF FE 
16cb9     F8 FA 03 01 | 	byte	$f9, $fe, $00, $01, $ff, $fe, $fb, $f9, $ff, $02, $ff, $fe, $f8, $fa, $03, $01
16cbd     FE 00 F7 02 
16cc1     01 F9 FF FC 
16cc5     05 03 09 00 
16cc9     FE FE 00 07 | 	byte	$fe, $00, $f7, $02, $01, $f9, $ff, $fc, $05, $03, $09, $00, $fe, $fe, $00, $07
16ccd     05 06 F8 F8 
16cd1     FF 0C 0B 09 
16cd5     FE F6 04 06 
16cd9     0E 0A 00 F6 | 	byte	$05, $06, $f8, $f8, $ff, $0c, $0b, $09, $fe, $f6, $04, $06, $0e, $0a, $00, $f6
16cdd     FB 04 0A 10 
16ce1     FF FA F7 00 
16ce5     02 09 04 02 
16ce9     FB F4 06 0A | 	byte	$fb, $04, $0a, $10, $ff, $fa, $f7, $00, $02, $09, $04, $02, $fb, $f4, $06, $0a
16ced     0E 08 FF FB 
16cf1     FF 04 08 10 
16cf5     FE 00 00 FD 
16cf9     07 07 05 05 | 	byte	$0e, $08, $ff, $fb, $ff, $04, $08, $10, $fe, $00, $00, $fd, $07, $07, $05, $05
16cfd     04 01 FC FB 
16d01     06 09 07 FE 
16d05     F2 FB FD 0A 
16d09     07 03 FE F9 | 	byte	$04, $01, $fc, $fb, $06, $09, $07, $fe, $f2, $fb, $fd, $0a, $07, $03, $fe, $f9
16d0d     02 02 06 05 
16d11     03 FF 03 03 
16d15     02 08 01 00 
16d19     FB FD FC FF | 	byte	$02, $02, $06, $05, $03, $ff, $03, $03, $02, $08, $01, $00, $fb, $fd, $fc, $ff
16d1d     FE F8 FD 00 
16d21     FE FC 00 01 
16d25     05 04 FD FB 
16d29     01 02 03 00 | 	byte	$fe, $f8, $fd, $00, $fe, $fc, $00, $01, $05, $04, $fd, $fb, $01, $02, $03, $00
16d2d     FE FC 01 04 
16d31     00 FE 03 FE 
16d35     04 04 03 FF 
16d39     00 03 06 02 | 	byte	$fe, $fc, $01, $04, $00, $fe, $03, $fe, $04, $04, $03, $ff, $00, $03, $06, $02
16d3d     02 FA FE FC 
16d41     07 06 06 04 
16d45     FD FF 01 01 
16d49     06 06 02 FD | 	byte	$02, $fa, $fe, $fc, $07, $06, $06, $04, $fd, $ff, $01, $01, $06, $06, $02, $fd
16d4d     F8 F6 FD 03 
16d51     07 01 FA FD 
16d55     00 F2 07 FA 
16d59     05 FC FA FD | 	byte	$f8, $f6, $fd, $03, $07, $01, $fa, $fd, $00, $f2, $07, $fa, $05, $fc, $fa, $fd
16d5d     FE 02 02 02 
16d61     00 FD FD 00 
16d65     00 00 00 00 
16d69     00 00 00 00 | 	byte	$fe, $02, $02, $02, $00, $fd, $fd, $00, $00, $00, $00, $00, $00, $00, $00, $00
16d6d     00 00 00 00 
      ...             
16e15     00 00 00 00 
16e19     00 00 00    | 	byte	$00[175]
16e1c     FA FB FA F9 
16e20     F9 FB FD FF 
16e24     02 04 06 06 
16e28     06 05 03 00 | 	byte	$fa, $fb, $fa, $f9, $f9, $fb, $fd, $ff, $02, $04, $06, $06, $06, $05, $03, $00
16e2c     FD FB FA F9 
16e30     FA FB FD 00 
16e34     02 04 06 07 
16e38     06 05 04 00 | 	byte	$fd, $fb, $fa, $f9, $fa, $fb, $fd, $00, $02, $04, $06, $07, $06, $05, $04, $00
16e3c     FD FA F8 F8 
16e40     F8 FA FC 00 
16e44     03 06 08 08 
16e48     08 06 03 00 | 	byte	$fd, $fa, $f8, $f8, $f8, $fa, $fc, $00, $03, $06, $08, $08, $08, $06, $03, $00
16e4c     FD F9 F7 F7 
16e50     F8 F9 FC 01 
16e54     04 07 09 0A 
16e58     09 07 04 00 | 	byte	$fd, $f9, $f7, $f7, $f8, $f9, $fc, $01, $04, $07, $09, $0a, $09, $07, $04, $00
16e5c     FC F9 F7 F6 
16e60     F6 F8 FC 00 
16e64     05 08 0B 0B 
16e68     0A 08 04 00 | 	byte	$fc, $f9, $f7, $f6, $f6, $f8, $fc, $00, $05, $08, $0b, $0b, $0a, $08, $04, $00
16e6c     FB F7 F5 F5 
16e70     F6 F9 FC 01 
16e74     05 09 0B 0B 
16e78     0A 07 04 FF | 	byte	$fb, $f7, $f5, $f5, $f6, $f9, $fc, $01, $05, $09, $0b, $0b, $0a, $07, $04, $ff
16e7c     FA F7 F5 F5 
16e80     F6 F9 FC 01 
16e84     06 09 0C 0D 
16e88     0B 08 04 FE | 	byte	$fa, $f7, $f5, $f5, $f6, $f9, $fc, $01, $06, $09, $0c, $0d, $0b, $08, $04, $fe
16e8c     FA F5 F3 F3 
16e90     F4 F7 FB 01 
16e94     06 0A 0C 0C 
16e98     0B 09 05 FF | 	byte	$fa, $f5, $f3, $f3, $f4, $f7, $fb, $01, $06, $0a, $0c, $0c, $0b, $09, $05, $ff
16e9c     F8 F3 F1 F1 
16ea0     F3 F6 FB 01 
16ea4     07 0C 0E 0E 
16ea8     0D 09 05 FE | 	byte	$f8, $f3, $f1, $f1, $f3, $f6, $fb, $01, $07, $0c, $0e, $0e, $0d, $09, $05, $fe
16eac     F7 F2 EF F0 
16eb0     F2 F6 FB 02 
16eb4     09 0E 11 10 
16eb8     0E 0B 05 FD | 	byte	$f7, $f2, $ef, $f0, $f2, $f6, $fb, $02, $09, $0e, $11, $10, $0e, $0b, $05, $fd
16ebc     F6 F1 EF EF 
16ec0     F2 F6 FB 02 
16ec4     09 0F 11 10 
16ec8     0D 0A 04 FD | 	byte	$f6, $f1, $ef, $ef, $f2, $f6, $fb, $02, $09, $0f, $11, $10, $0d, $0a, $04, $fd
16ecc     F6 F2 EF F0 
16ed0     F2 F6 FC 02 
16ed4     0B 10 13 12 
16ed8     0F 0B 05 FD | 	byte	$f6, $f2, $ef, $f0, $f2, $f6, $fc, $02, $0b, $10, $13, $12, $0f, $0b, $05, $fd
16edc     F5 EF ED EE 
16ee0     F0 F5 FB 04 
16ee4     0B 11 15 14 
16ee8     11 0C 05 FC | 	byte	$f5, $ef, $ed, $ee, $f0, $f5, $fb, $04, $0b, $11, $15, $14, $11, $0c, $05, $fc
16eec     F3 EC EA EB 
16ef0     EE F3 FA 03 
16ef4     0D 13 15 14 
16ef8     11 0D 06 FB | 	byte	$f3, $ec, $ea, $eb, $ee, $f3, $fa, $03, $0d, $13, $15, $14, $11, $0d, $06, $fb
16efc     F2 EA E8 E9 
16f00     ED F3 FA 05 
16f04     0E 15 18 16 
16f08     12 0C 05 FA | 	byte	$f2, $ea, $e8, $e9, $ed, $f3, $fa, $05, $0e, $15, $18, $16, $12, $0c, $05, $fa
16f0c     F1 E9 E8 E9 
16f10     EE F3 FB 05 
16f14     10 16 18 16 
16f18     12 0D 04 FA | 	byte	$f1, $e9, $e8, $e9, $ee, $f3, $fb, $05, $10, $16, $18, $16, $12, $0d, $04, $fa
16f1c     EF E9 E7 E8 
16f20     EB F2 FA 06 
16f24     11 19 1B 19 
16f28     14 0F 06 FA | 	byte	$ef, $e9, $e7, $e8, $eb, $f2, $fa, $06, $11, $19, $1b, $19, $14, $0f, $06, $fa
16f2c     EF E7 E5 E8 
16f30     EC F2 FB 06 
16f34     13 1B 1D 1B 
16f38     16 0F 06 F8 | 	byte	$ef, $e7, $e5, $e8, $ec, $f2, $fb, $06, $13, $1b, $1d, $1b, $16, $0f, $06, $f8
16f3c     EB E4 E3 E5 
16f40     EA F0 FB 08 
16f44     15 1C 1F 1D 
16f48     17 10 06 F6 | 	byte	$eb, $e4, $e3, $e5, $ea, $f0, $fb, $08, $15, $1c, $1f, $1d, $17, $10, $06, $f6
16f4c     E9 E1 E0 E3 
16f50     E8 EF FA 08 
16f54     16 1F 20 1D 
16f58     17 0F 04 F6 | 	byte	$e9, $e1, $e0, $e3, $e8, $ef, $fa, $08, $16, $1f, $20, $1d, $17, $0f, $04, $f6
16f5c     00 00 00 00 
16f60     F5 F6 F8 FB 
16f64     FF 03 05 07 
16f68     0A 0B 0B 0B | 	byte	$00, $00, $00, $00, $f5, $f6, $f8, $fb, $ff, $03, $05, $07, $0a, $0b, $0b, $0b
16f6c     0A 09 08 07 
16f70     05 04 03 03 
16f74     04 05 07 08 
16f78     08 08 05 02 | 	byte	$0a, $09, $08, $07, $05, $04, $03, $03, $04, $05, $07, $08, $08, $08, $05, $02
16f7c     FF FB F8 F6 
16f80     F6 F6 F9 FC 
16f84     FF 02 04 05 
16f88     06 05 01 F9 | 	byte	$ff, $fb, $f8, $f6, $f6, $f6, $f9, $fc, $ff, $02, $04, $05, $06, $05, $01, $f9
16f8c     EF E5 DB D5 
16f90     D5 D8 E0 EB 
16f94     F5 01 09 0E 
16f98     0F 0D 08 01 | 	byte	$ef, $e5, $db, $d5, $d5, $d8, $e0, $eb, $f5, $01, $09, $0e, $0f, $0d, $08, $01
16f9c     FC FA FA FF 
16fa0     05 0A 0C 0B 
16fa4     09 08 09 0D 
16fa8     10 13 12 11 | 	byte	$fc, $fa, $fa, $ff, $05, $0a, $0c, $0b, $09, $08, $09, $0d, $10, $13, $12, $11
16fac     0D 0C 0D 10 
16fb0     13 14 15 17 
16fb4     18 19 0F FB 
16fb8     ED F0 FB 03 | 	byte	$0d, $0c, $0d, $10, $13, $14, $15, $17, $18, $19, $0f, $fb, $ed, $f0, $fb, $03
16fbc     FE EF E4 E4 
16fc0     EB F4 FA FD 
16fc4     00 06 0D 12 
16fc8     0C EE CB C9 | 	byte	$fe, $ef, $e4, $e4, $eb, $f4, $fa, $fd, $00, $06, $0d, $12, $0c, $ee, $cb, $c9
16fcc     E1 F9 FC F2 
16fd0     EC F3 FE FE 
16fd4     F3 EC F2 FE 
16fd8     04 08 0D 12 | 	byte	$e1, $f9, $fc, $f2, $ec, $f3, $fe, $fe, $f3, $ec, $f2, $fe, $04, $08, $0d, $12
16fdc     15 19 1E 1E 
16fe0     1B 1B 1E 1E 
16fe4     1A 17 12 0A 
16fe8     08 13 20 1F | 	byte	$15, $19, $1e, $1e, $1b, $1b, $1e, $1e, $1a, $17, $12, $0a, $08, $13, $20, $1f
16fec     17 18 1F 20 
16ff0     1E 23 25 1E 
16ff4     18 FE E7 F2 
16ff8     F4 DF D6 E8 | 	byte	$17, $18, $1f, $20, $1e, $23, $25, $1e, $18, $fe, $e7, $f2, $f4, $df, $d6, $e8
16ffc     FA F7 EB E8 
17000     F7 06 04 F8 
17004     F8 05 0A 08 
17008     F1 CD E5 FC | 	byte	$fa, $f7, $eb, $e8, $f7, $06, $04, $f8, $f8, $05, $0a, $08, $f1, $cd, $e5, $fc
1700c     F5 F4 F8 EA 
17010     E5 F6 FF FE 
17014     04 0B 08 07 
17018     14 1B 13 10 | 	byte	$f5, $f4, $f8, $ea, $e5, $f6, $ff, $fe, $04, $0b, $08, $07, $14, $1b, $13, $10
1701c     1D 25 1D 1C 
17020     27 2C 22 1A 
17024     0C 06 0E 17 
17028     18 15 12 15 | 	byte	$1d, $25, $1d, $1c, $27, $2c, $22, $1a, $0c, $06, $0e, $17, $18, $15, $12, $15
1702c     19 17 14 1E 
17030     28 23 1B 1F 
17034     FB E5 FC DC 
17038     CD EA E3 D3 | 	byte	$19, $17, $14, $1e, $28, $23, $1b, $1f, $fb, $e5, $fc, $dc, $cd, $ea, $e3, $d3
1703c     E4 EA DF E5 
17040     F5 F9 FA 00 
17044     06 04 08 08 
17048     D6 D3 F3 E9 | 	byte	$e4, $ea, $df, $e5, $f5, $f9, $fa, $00, $06, $04, $08, $08, $d6, $d3, $f3, $e9
1704c     F0 ED DE ED 
17050     FC F4 F7 03 
17054     05 03 08 0F 
17058     12 0F 13 1B | 	byte	$f0, $ed, $de, $ed, $fc, $f4, $f7, $03, $05, $03, $08, $0f, $12, $0f, $13, $1b
1705c     1C 19 1E 23 
17060     24 20 0E FA 
17064     0A 0E 09 12 
17068     11 05 09 13 | 	byte	$1c, $19, $1e, $23, $24, $20, $0e, $fa, $0a, $0e, $09, $12, $11, $05, $09, $13
1706c     15 13 17 1B 
17070     1E 1C 1D F0 
17074     E0 FD CF C8 
17078     E5 CC D0 E1 | 	byte	$15, $13, $17, $1b, $1e, $1c, $1d, $f0, $e0, $fd, $cf, $c8, $e5, $cc, $d0, $e1
1707c     D9 D9 E8 EE 
17080     F0 F3 FA FF 
17084     03 04 09 F0 
17088     C4 E9 E9 E4 | 	byte	$d9, $d9, $e8, $ee, $f0, $f3, $fa, $ff, $03, $04, $09, $f0, $c4, $e9, $e9, $e4
1708c     EF DD E6 F5 
17090     F2 F7 FD FF 
17094     05 06 09 0F 
17098     10 12 16 19 | 	byte	$ef, $dd, $e6, $f5, $f2, $f7, $fd, $ff, $05, $06, $09, $0f, $10, $12, $16, $19
1709c     1B 1B 1E 22 
170a0     1E FE F7 0C 
170a4     06 08 0D 05 
170a8     04 0B 0E 12 | 	byte	$1b, $1b, $1e, $22, $1e, $fe, $f7, $0c, $06, $08, $0d, $05, $04, $0b, $0e, $12
170ac     14 15 18 1B 
170b0     1C 1D F7 DE 
170b4     00 D5 C5 DE 
170b8     CA D1 DC D4 | 	byte	$14, $15, $18, $1b, $1c, $1d, $f7, $de, $00, $d5, $c5, $de, $ca, $d1, $dc, $d4
170bc     DD E5 E9 F0 
170c0     F4 F7 FD 02 
170c4     05 08 0B D9 
170c8     CF F4 E5 EB | 	byte	$dd, $e5, $e9, $f0, $f4, $f7, $fd, $02, $05, $08, $0b, $d9, $cf, $f4, $e5, $eb
170cc     E7 E1 F3 F3 
170d0     F7 FD FF 04 
170d4     08 08 0E 10 
170d8     12 15 18 1B | 	byte	$e7, $e1, $f3, $f3, $f7, $fd, $ff, $04, $08, $08, $0e, $10, $12, $15, $18, $1b
170dc     1D 1E 21 1A 
170e0     FA FC 0B 05 
170e4     0C 08 03 09 
170e8     0C 0F 12 15 | 	byte	$1d, $1e, $21, $1a, $fa, $fc, $0b, $05, $0c, $08, $03, $09, $0c, $0f, $12, $15
170ec     17 19 1C 1E 
170f0     20 04 DB 01 
170f4     E7 C5 DA CF 
170f8     D3 DC D4 DE | 	byte	$17, $19, $1c, $1e, $20, $04, $db, $01, $e7, $c5, $da, $cf, $d3, $dc, $d4, $de
170fc     E5 E8 F1 F5 
17100     F9 FE 01 07 
17104     0B 0E 08 CC 
17108     E3 F5 E4 ED | 	byte	$e5, $e8, $f1, $f5, $f9, $fe, $01, $07, $0b, $0e, $08, $cc, $e3, $f5, $e4, $ed
1710c     E3 EC F6 F7 
17110     FE 00 03 0A 
17114     0B 0E 10 13 
17118     16 19 1A 1E | 	byte	$e3, $ec, $f6, $f7, $fe, $00, $03, $0a, $0b, $0e, $10, $13, $16, $19, $1a, $1e
1711c     1F 21 17 F8 
17120     01 0A 05 0E 
17124     05 06 0B 0E 
17128     11 15 15 1B | 	byte	$1f, $21, $17, $f8, $01, $0a, $05, $0e, $05, $06, $0b, $0e, $11, $15, $15, $1b
1712c     1B 1E 1F 23 
17130     16 DD F7 FD 
17134     C9 D2 D3 D2 
17138     DD D5 DB E8 | 	byte	$1b, $1e, $1f, $23, $16, $dd, $f7, $fd, $c9, $d2, $d3, $d2, $dd, $d5, $db, $e8
1713c     E9 F1 F4 FA 
17140     FF 03 07 0C 
17144     0F 13 FE CD 
17148     F4 F1 E4 ED | 	byte	$e9, $f1, $f4, $fa, $ff, $03, $07, $0c, $0f, $13, $fe, $cd, $f4, $f1, $e4, $ed
1714c     EA F4 F9 FC 
17150     01 03 07 0C 
17154     0E 10 13 17 
17158     19 1A 1C 20 | 	byte	$ea, $f4, $f9, $fc, $01, $03, $07, $0c, $0e, $10, $13, $17, $19, $1a, $1c, $20
1715c     21 12 F5 05 
17160     0B 05 09 04 
17164     07 0D 0D 12 
17168     16 16 19 1D | 	byte	$21, $12, $f5, $05, $0b, $05, $09, $04, $07, $0d, $0d, $12, $16, $16, $19, $1d
1716c     20 20 22 1E 
17170     E5 EC 07 DD 
17174     C7 D7 D2 D9 
17178     DB D9 E6 EC | 	byte	$20, $20, $22, $1e, $e5, $ec, $07, $dd, $c7, $d7, $d2, $d9, $db, $d9, $e6, $ec
1717c     F0 F4 F8 00 
17180     04 06 0B 10 
17184     13 13 EC D4 
17188     FC ED E0 EF | 	byte	$f0, $f4, $f8, $00, $04, $06, $0b, $10, $13, $13, $ec, $d4, $fc, $ed, $e0, $ef
1718c     F1 F3 FC FF 
17190     02 05 08 0D 
17194     10 10 14 19 
17198     1B 19 1D 22 | 	byte	$f1, $f3, $fc, $ff, $02, $05, $08, $0d, $10, $10, $14, $19, $1b, $19, $1d, $22
1719c     0F F2 04 0D 
171a0     04 04 03 0B 
171a4     0F 0D 11 18 
171a8     19 18 1C 22 | 	byte	$0f, $f2, $04, $0d, $04, $04, $03, $0b, $0f, $0d, $11, $18, $19, $18, $1c, $22
171ac     22 20 22 F5 
171b0     E3 07 F1 C4 
171b4     D1 D9 D2 DD 
171b8     DD DF EB F3 | 	byte	$22, $20, $22, $f5, $e3, $07, $f1, $c4, $d1, $d9, $d2, $dd, $dd, $df, $eb, $f3
171bc     F3 F5 FE 05 
171c0     06 07 0D 16 
171c4     15 0E DC DC 
171c8     FF E7 DF F7 | 	byte	$f3, $f5, $fe, $05, $06, $07, $0d, $16, $15, $0e, $dc, $dc, $ff, $e7, $df, $f7
171cc     F3 F1 FF 03 
171d0     01 04 0B 11 
171d4     0F 0E 16 1D 
171d8     18 18 1F 0E | 	byte	$f3, $f1, $ff, $03, $01, $04, $0b, $11, $0f, $0e, $16, $1d, $18, $18, $1f, $0e
171dc     F0 02 0C 04 
171e0     00 00 0A 13 
171e4     0E 0F 17 1C 
171e8     17 17 22 25 | 	byte	$f0, $02, $0c, $04, $00, $00, $0a, $13, $0e, $0f, $17, $1c, $17, $17, $22, $25
171ec     1F 1F 05 E1 
171f0     FE FD CB C6 
171f4     DD D3 D5 E2 
171f8     DD E1 F5 F6 | 	byte	$1f, $1f, $05, $e1, $fe, $fd, $cb, $c6, $dd, $d3, $d5, $e2, $dd, $e1, $f5, $f6
171fc     F2 F9 06 08 
17200     05 09 16 18 
17204     12 06 DB E9 
17208     F9 DE E8 FB | 	byte	$f2, $f9, $06, $08, $05, $09, $16, $18, $12, $06, $db, $e9, $f9, $de, $e8, $fb
1720c     EE F4 06 03 
17210     FD 07 11 0F 
17214     0B 12 1C 1A 
17218     14 18 09 F1 | 	byte	$ee, $f4, $06, $03, $fd, $07, $11, $0f, $0b, $12, $1c, $1a, $14, $18, $09, $f1
1721c     00 07 03 00 
17220     FF 07 14 11 
17224     0C 15 20 1A 
17228     16 20 29 21 | 	byte	$00, $07, $03, $00, $ff, $07, $14, $11, $0c, $15, $20, $1a, $16, $20, $29, $21
1722c     1E 0F E7 F4 
17230     01 D5 C0 DA 
17234     D9 CF E2 E3 
17238     DD EF FC F2 | 	byte	$1e, $0f, $e7, $f4, $01, $d5, $c0, $da, $d9, $cf, $e2, $e3, $dd, $ef, $fc, $f2
1723c     F5 03 0B 05 
17240     06 14 1B 13 
17244     12 FF D8 EB 
17248     F2 DF EF F7 | 	byte	$f5, $03, $0b, $05, $06, $14, $1b, $13, $12, $ff, $d8, $eb, $f2, $df, $ef, $f7
1724c     EE FC 09 FE 
17250     FF 0F 12 08 
17254     0D 1B 1C 13 
17258     12 04 F6 FF | 	byte	$ee, $fc, $09, $fe, $ff, $0f, $12, $08, $0d, $1b, $1c, $13, $12, $04, $f6, $ff
1725c     01 FE 04 01 
17260     03 13 16 0C 
17264     12 20 1E 16 
17268     1C 28 25 1D | 	byte	$01, $fe, $04, $01, $03, $13, $16, $0c, $12, $20, $1e, $16, $1c, $28, $25, $1d
1726c     15 EF EB 02 
17270     E8 C0 CE DF 
17274     CE D8 E8 E0 
17278     E5 FB F9 F1 | 	byte	$15, $ef, $eb, $02, $e8, $c0, $ce, $df, $ce, $d8, $e8, $e0, $e5, $fb, $f9, $f1
1727c     FD 0D 07 04 
17280     10 1A 16 12 
17284     19 F5 D3 ED 
17288     F4 E4 ED F8 | 	byte	$fd, $0d, $07, $04, $10, $1a, $16, $12, $19, $f5, $d3, $ed, $f4, $e4, $ed, $f8
1728c     F8 00 03 FF 
17290     06 12 0D 09 
17294     14 1D 16 0C 
17298     FB F6 02 FC | 	byte	$f8, $00, $03, $ff, $06, $12, $0d, $09, $14, $1d, $16, $0c, $fb, $f6, $02, $fc
1729c     F6 04 06 00 
172a0     0C 18 11 0E 
172a4     1D 21 18 18 
172a8     24 27 21 1B | 	byte	$f6, $04, $06, $00, $0c, $18, $11, $0e, $1d, $21, $18, $18, $24, $27, $21, $1b
172ac     F9 E3 FC F8 
172b0     CA C1 DE D9 
172b4     D0 E2 EA E4 
172b8     F1 FC F7 F8 | 	byte	$f9, $e3, $fc, $f8, $ca, $c1, $de, $d9, $d0, $e2, $ea, $e4, $f1, $fc, $f7, $f8
172bc     06 0C 06 0A 
172c0     16 18 13 18 
172c4     19 E7 D1 F1 
172c8     F4 E4 ED FC | 	byte	$06, $0c, $06, $0a, $16, $18, $13, $18, $19, $e7, $d1, $f1, $f4, $e4, $ed, $fc
172cc     FF FD 00 06 
172d0     0B 0D 0C 11 
172d4     18 17 0C F4 
172d8     F1 02 FB F1 | 	byte	$ff, $fd, $00, $06, $0b, $0d, $0c, $11, $18, $17, $0c, $f4, $f1, $02, $fb, $f1
172dc     00 0A 03 07 
172e0     14 14 11 18 
172e4     1F 1C 19 20 
172e8     26 23 1F 00 | 	byte	$00, $0a, $03, $07, $14, $14, $11, $18, $1f, $1c, $19, $20, $26, $23, $1f, $00
172ec     DF F2 FE DD 
172f0     BE CF E1 D6 
172f4     D6 E6 EC EC 
172f8     F4 FA FB 01 | 	byte	$df, $f2, $fe, $dd, $be, $cf, $e1, $d6, $d6, $e6, $ec, $ec, $f4, $fa, $fb, $01
172fc     08 09 0B 12 
17300     16 16 17 1E 
17304     0C D8 DA F8 
17308     F1 E7 F3 01 | 	byte	$08, $09, $0b, $12, $16, $16, $17, $1e, $0c, $d8, $da, $f8, $f1, $e7, $f3, $01
1730c     FE FC 04 0B 
17310     0B 0B 0F 15 
17314     15 0A F1 ED 
17318     FF FB F1 FD | 	byte	$fe, $fc, $04, $0b, $0b, $0b, $0f, $15, $15, $0a, $f1, $ed, $ff, $fb, $f1, $fd
1731c     09 07 07 11 
17320     14 13 17 1D 
17324     1C 1B 1F 23 
17328     22 22 0E E1 | 	byte	$09, $07, $07, $11, $14, $13, $17, $1d, $1c, $1b, $1f, $23, $22, $22, $0e, $e1
1732c     E6 FC ED C9 
17330     C3 DD E0 D6 
17334     DD EE F1 F1 
17338     F6 FE 03 05 | 	byte	$e6, $fc, $ed, $c9, $c3, $dd, $e0, $d6, $dd, $ee, $f1, $f1, $f6, $fe, $03, $05
1733c     07 0D 12 13 
17340     15 1A 1E 1D 
17344     FE D5 E0 F6 
17348     F1 ED F7 00 | 	byte	$07, $0d, $12, $13, $15, $1a, $1e, $1d, $fe, $d5, $e0, $f6, $f1, $ed, $f7, $00
1734c     00 00 07 0A 
17350     0B 0E 13 14 
17354     06 ED EA FC 
17358     FA F3 FC 07 | 	byte	$00, $00, $07, $0a, $0b, $0e, $13, $14, $06, $ed, $ea, $fc, $fa, $f3, $fc, $07
1735c     07 08 0F 13 
17360     13 17 1C 1D 
17364     1C 1E 23 22 
17368     22 18 EA DB | 	byte	$07, $08, $0f, $13, $13, $17, $1c, $1d, $1c, $1e, $23, $22, $22, $18, $ea, $db
1736c     F2 F8 DD C0 
17370     CE E2 DF DA 
17374     E4 F2 F5 F3 
17378     F9 03 07 06 | 	byte	$f2, $f8, $dd, $c0, $ce, $e2, $df, $da, $e4, $f2, $f5, $f3, $f9, $03, $07, $06
1737c     0A 11 15 14 
17380     17 1D 20 19 
17384     F4 D4 E4 F8 
17388     F7 F1 F6 01 | 	byte	$0a, $11, $15, $14, $17, $1d, $20, $19, $f4, $d4, $e4, $f8, $f7, $f1, $f6, $01
1738c     04 04 06 0A 
17390     0F 11 11 05 
17394     E9 E8 F7 F9 
17398     F5 FB 06 08 | 	byte	$04, $04, $06, $0a, $0f, $11, $11, $05, $e9, $e8, $f7, $f9, $f5, $fb, $06, $08
1739c     08 0D 13 14 
173a0     15 1A 1E 1E 
173a4     1D 1F 22 23 
173a8     1C F2 D7 E5 | 	byte	$08, $0d, $13, $14, $15, $1a, $1e, $1e, $1d, $1f, $22, $23, $1c, $f2, $d7, $e5
173ac     F8 F1 CB BF 
173b0     D6 E8 E3 DE 
173b4     E9 F7 FA F6 
173b8     FC 06 0B 09 | 	byte	$f8, $f1, $cb, $bf, $d6, $e8, $e3, $de, $e9, $f7, $fa, $f6, $fc, $06, $0b, $09
173bc     0C 13 18 17 
173c0     18 1E 22 15 
173c4     E6 D0 E5 FE 
173c8     FE F0 F4 03 | 	byte	$0c, $13, $18, $17, $18, $1e, $22, $15, $e6, $d0, $e5, $fe, $fe, $f0, $f4, $03
173cc     0A 06 05 09 
173d0     11 12 01 E2 
173d4     E1 F3 FC F6 
173d8     F7 02 0A 09 | 	byte	$0a, $06, $05, $09, $11, $12, $01, $e2, $e1, $f3, $fc, $f6, $f7, $02, $0a, $09
173dc     09 10 16 17 
173e0     17 1B 20 1F 
173e4     1E 21 25 21 
173e8     02 D9 DA F2 | 	byte	$09, $10, $16, $17, $17, $1b, $20, $1f, $1e, $21, $25, $21, $02, $d9, $da, $f2
173ec     FB E0 BD C2 
173f0     E3 F0 E5 DE 
173f4     EC FE FF F9 
173f8     FE 09 0F 0C | 	byte	$fb, $e0, $bd, $c2, $e3, $f0, $e5, $de, $ec, $fe, $ff, $f9, $fe, $09, $0f, $0c
173fc     0D 15 1B 19 
17400     1A 1F 22 0D 
17404     DD D0 EB 04 
17408     00 F2 F5 03 | 	byte	$0d, $15, $1b, $19, $1a, $1f, $22, $0d, $dd, $d0, $eb, $04, $00, $f2, $f5, $03
1740c     0C 0A 06 09 
17410     10 02 E5 D9 
17414     ED FF FE F6 
17418     FA 0A 0F 0B | 	byte	$0c, $0a, $06, $09, $10, $02, $e5, $d9, $ed, $ff, $fe, $f6, $fa, $0a, $0f, $0b
1741c     0B 14 19 18 
17420     19 1E 21 1F 
17424     1F 24 24 0B 
17428     DD D1 E8 FE | 	byte	$0b, $14, $19, $18, $19, $1e, $21, $1f, $1f, $24, $24, $0b, $dd, $d1, $e8, $fe
1742c     F2 C8 B8 D1 
17430     F0 F2 E1 E1 
17434     F4 04 01 F9 
17438     00 0F 12 0E | 	byte	$f2, $c8, $b8, $d1, $f0, $f2, $e1, $e1, $f4, $04, $01, $f9, $00, $0f, $12, $0e
1743c     10 18 1B 1A 
17440     1C 21 20 00 
17444     D5 D2 F3 07 
17448     02 F4 F5 04 | 	byte	$10, $18, $1b, $1a, $1c, $21, $20, $00, $d5, $d2, $f3, $07, $02, $f4, $f5, $04
1744c     10 0F 06 04 
17450     FB E7 DA E6 
17454     FA 01 FA F7 
17458     05 0F 0E 0A | 	byte	$10, $0f, $06, $04, $fb, $e7, $da, $e6, $fa, $01, $fa, $f7, $05, $0f, $0e, $0a
1745c     10 19 1A 18 
17460     1B 21 21 1F 
17464     22 25 15 E6 
17468     CC DD FA 00 | 	byte	$10, $19, $1a, $18, $1b, $21, $21, $1f, $22, $25, $15, $e6, $cc, $dd, $fa, $00
1746c     DC B9 C0 E6 
17470     FA F0 DF E7 
17474     FF 09 01 FB 
17478     06 12 13 10 | 	byte	$dc, $b9, $c0, $e6, $fa, $f0, $df, $e7, $ff, $09, $01, $fb, $06, $12, $13, $10
1747c     14 19 1B 1C 
17480     20 22 18 F6 
17484     D1 D6 F4 0A 
17488     04 F5 F4 03 | 	byte	$14, $19, $1b, $1c, $20, $22, $18, $f6, $d1, $d6, $f4, $0a, $04, $f5, $f4, $03
1748c     12 10 03 ED 
17490     DD DC E9 FA 
17494     FF F9 F7 01 
17498     0E 10 0B 0D | 	byte	$12, $10, $03, $ed, $dd, $dc, $e9, $fa, $ff, $f9, $f7, $01, $0e, $10, $0b, $0d
1749c     16 1B 19 1A 
174a0     1F 22 21 21 
174a4     24 1B EF CD 
174a8     D3 F1 06 F2 | 	byte	$16, $1b, $19, $1a, $1f, $22, $21, $21, $24, $1b, $ef, $cd, $d3, $f1, $06, $f2
174ac     C4 B4 D0 F6 
174b0     FC EA E0 F0 
174b4     06 09 01 00 
174b8     09 12 14 15 | 	byte	$c4, $b4, $d0, $f6, $fc, $ea, $e0, $f0, $06, $09, $01, $00, $09, $12, $14, $15
174bc     17 18 1B 20 
174c0     23 21 12 EB 
174c4     D0 DB FC 0F 
174c8     07 F6 F5 07 | 	byte	$17, $18, $1b, $20, $23, $21, $12, $eb, $d0, $db, $fc, $0f, $07, $f6, $f5, $07
174cc     13 0B EC D1 
174d0     D2 EB 00 02 
174d4     F8 F3 FD 0D 
174d8     13 0D 0A 12 | 	byte	$13, $0b, $ec, $d1, $d2, $eb, $00, $02, $f8, $f3, $fd, $0d, $13, $0d, $0a, $12
174dc     1A 1C 1B 1D 
174e0     20 21 23 24 
174e4     1E F9 D1 C9 
174e8     EA 06 FF D6 | 	byte	$1a, $1c, $1b, $1d, $20, $21, $23, $24, $1e, $f9, $d1, $c9, $ea, $06, $ff, $d6
174ec     B3 C1 E8 01 
174f0     F9 E5 E7 FA 
174f4     0A 0A 04 05 
174f8     0C 14 18 19 | 	byte	$b3, $c1, $e8, $01, $f9, $e5, $e7, $fa, $0a, $0a, $04, $05, $0c, $14, $18, $19
174fc     17 18 1D 23 
17500     24 1E 08 E0 
17504     CF E4 06 11 
17508     04 F6 F9 08 | 	byte	$17, $18, $1d, $23, $24, $1e, $08, $e0, $cf, $e4, $06, $11, $04, $f6, $f9, $08
1750c     0B F0 CE CB 
17510     E6 FF 06 FA 
17514     F2 F9 08 13 
17518     11 0D 0F 16 | 	byte	$0b, $f0, $ce, $cb, $e6, $ff, $06, $fa, $f2, $f9, $08, $13, $11, $0d, $0f, $16
1751c     1C 1D 1D 1E 
17520     20 23 25 22 
17524     03 D9 C5 DD 
17528     00 0A E6 BC | 	byte	$1c, $1d, $1d, $1e, $20, $23, $25, $22, $03, $d9, $c5, $dd, $00, $0a, $e6, $bc
1752c     B6 D5 FB 03 
17530     F3 E6 ED 00 
17534     0C 0C 07 07 
17538     0D 15 1A 19 | 	byte	$b6, $d5, $fb, $03, $f3, $e6, $ed, $00, $0c, $0c, $07, $07, $0d, $15, $1a, $19
1753c     18 19 1E 22 
17540     23 1C FB D9 
17544     D1 EA 09 12 
17548     07 F9 F9 FB | 	byte	$18, $19, $1e, $22, $23, $1c, $fb, $d9, $d1, $ea, $09, $12, $07, $f9, $f9, $fb
1754c     EA D4 D0 E2 
17550     FB 03 FD F6 
17554     F9 05 0F 12 
17558     10 10 14 18 | 	byte	$ea, $d4, $d0, $e2, $fb, $03, $fd, $f6, $f9, $05, $0f, $12, $10, $10, $14, $18
1755c     1C 1E 1E 1F 
17560     22 25 23 0D 
17564     E2 C5 CE F4 
17568     0C FD CD B3 | 	byte	$1c, $1e, $1e, $1f, $22, $25, $23, $0d, $e2, $c5, $ce, $f4, $0c, $fd, $cd, $b3
1756c     C2 E7 02 02 
17570     F3 EB F2 02 
17574     0F 0F 0A 09 
17578     0F 16 1A 1C | 	byte	$c2, $e7, $02, $02, $f3, $eb, $f2, $02, $0f, $0f, $0a, $09, $0f, $16, $1a, $1c
1757c     1C 1C 1E 22 
17580     24 17 F5 D5 
17584     D6 EF 0C 14 
17588     0A FC EC D9 | 	byte	$1c, $1c, $1e, $22, $24, $17, $f5, $d5, $d6, $ef, $0c, $14, $0a, $fc, $ec, $d9
1758c     CE D4 EA FC 
17590     01 F9 F3 F9 
17594     04 0E 11 10 
17598     10 11 16 1C | 	byte	$ce, $d4, $ea, $fc, $01, $f9, $f3, $f9, $04, $0e, $11, $10, $10, $11, $16, $1c
1759c     1F 1E 1E 21 
175a0     24 23 15 ED 
175a4     C9 C7 E6 06 
175a8     09 E9 BF B8 | 	byte	$1f, $1e, $1e, $21, $24, $23, $15, $ed, $c9, $c7, $e6, $06, $09, $e9, $bf, $b8
175ac     D2 F5 07 03 
175b0     F4 ED F5 05 
175b4     11 12 0F 0E 
175b8     10 15 1B 1E | 	byte	$d2, $f5, $07, $03, $f4, $ed, $f5, $05, $11, $12, $0f, $0e, $10, $15, $1b, $1e
175bc     1F 1E 1F 22 
175c0     20 0F ED D6 
175c4     D9 F3 0B 15 
175c8     0A F1 CF BF | 	byte	$1f, $1e, $1f, $22, $20, $0f, $ed, $d6, $d9, $f3, $0b, $15, $0a, $f1, $cf, $bf
175cc     CB E9 01 08 
175d0     FC F1 F3 FF 
175d4     0D 14 15 11 
175d8     0F 12 19 1F | 	byte	$cb, $e9, $01, $08, $fc, $f1, $f3, $ff, $0d, $14, $15, $11, $0f, $12, $19, $1f
175dc     21 20 20 22 
175e0     22 18 FB D4 
175e4     C5 D7 FA 0C 
175e8     F9 D0 BA C2 | 	byte	$21, $20, $20, $22, $22, $18, $fb, $d4, $c5, $d7, $fa, $0c, $f9, $d0, $ba, $c2
175ec     DF FE 0A 03 
175f0     F4 F0 F9 08 
175f4     12 15 14 11 
175f8     10 15 1C 21 | 	byte	$df, $fe, $0a, $03, $f4, $f0, $f9, $08, $12, $15, $14, $11, $10, $15, $1c, $21
175fc     21 20 21 21 
17600     1A 05 E7 D8 
17604     E0 FA 0F 12 
17608     FC D3 B9 C1 | 	byte	$21, $20, $21, $21, $1a, $05, $e7, $d8, $e0, $fa, $0f, $12, $fc, $d3, $b9, $c1
1760c     E1 FF 0E 05 
17610     F6 EF F8 06 
17614     13 17 15 11 
17618     0F 14 1B 20 | 	byte	$e1, $ff, $0e, $05, $f6, $ef, $f8, $06, $13, $17, $15, $11, $0f, $14, $1b, $20
1761c     22 22 22 21 
17620     19 01 DC C7 
17624     D0 EE 07 04 
17628     E3 C5 BE D3 | 	byte	$22, $22, $22, $21, $19, $01, $dc, $c7, $d0, $ee, $07, $04, $e3, $c5, $be, $d3
1762c     F0 07 0B FF 
17630     F4 F4 FE 0B 
17634     14 18 16 13 
17638     12 17 1D 21 | 	byte	$f0, $07, $0b, $ff, $f4, $f4, $fe, $0b, $14, $18, $16, $13, $12, $17, $1d, $21
1763c     22 23 22 1E 
17640     14 FD E5 DA 
17644     E6 FC 0B FD 
17648     DC BF BE D7 | 	byte	$22, $23, $22, $1e, $14, $fd, $e5, $da, $e6, $fc, $0b, $fd, $dc, $bf, $be, $d7
1764c     F5 09 0A FF 
17650     F5 F6 FF 0C 
17654     15 18 15 12 
17658     12 17 1C 21 | 	byte	$f5, $09, $0a, $ff, $f5, $f6, $ff, $0c, $15, $18, $15, $12, $12, $17, $1c, $21
1765c     23 23 22 1B 
17660     06 E5 CD CD 
17664     E4 FB 05 F1 
17668     D5 C3 C8 E0 | 	byte	$23, $23, $22, $1b, $06, $e5, $cd, $cd, $e4, $fb, $05, $f1, $d5, $c3, $c8, $e0
1766c     FB 09 09 00 
17670     F8 F9 02 0C 
17674     15 18 17 15 
17678     15 17 1C 20 | 	byte	$fb, $09, $09, $00, $f8, $f9, $02, $0c, $15, $18, $17, $15, $15, $17, $1c, $20
1767c     23 24 22 1B 
17680     0D F6 E4 DF 
17684     EB F8 F5 E3 
17688     CD C8 D5 EB | 	byte	$23, $24, $22, $1b, $0d, $f6, $e4, $df, $eb, $f8, $f5, $e3, $cd, $c8, $d5, $eb
1768c     FE 05 03 FD 
17690     FB FE 06 0E 
17694     14 16 16 16 
17698     17 19 1D 20 | 	byte	$fe, $05, $03, $fd, $fb, $fe, $06, $0e, $14, $16, $16, $16, $17, $19, $1d, $20
1769c     23 22 1D 0C 
176a0     ED D4 CC D7 
176a4     EF FF FB E8 
176a8     D1 C9 D3 E9 | 	byte	$23, $22, $1d, $0c, $ed, $d4, $cc, $d7, $ef, $ff, $fb, $e8, $d1, $c9, $d3, $e9
176ac     FC 09 0A 05 
176b0     FF FE 03 0B 
176b4     14 1A 1B 1A 
176b8     18 19 1B 1F | 	byte	$fc, $09, $0a, $05, $ff, $fe, $03, $0b, $14, $1a, $1b, $1a, $18, $19, $1b, $1f
176bc     22 24 21 19 
176c0     0A F4 E3 E0 
176c4     E4 E3 DC D3 
176c8     D3 DB E8 F6 | 	byte	$22, $24, $21, $19, $0a, $f4, $e3, $e0, $e4, $e3, $dc, $d3, $d3, $db, $e8, $f6
176cc     FD FF FE FE 
176d0     01 06 0B 11 
176d4     14 15 16 18 
176d8     1A 1D 20 22 | 	byte	$fd, $ff, $fe, $fe, $01, $06, $0b, $11, $14, $15, $16, $18, $1a, $1d, $20, $22
176dc     22 1D 10 F8 
176e0     DC CE D2 E5 
176e4     F7 FF F5 E1 
176e8     D0 CE DC EF | 	byte	$22, $1d, $10, $f8, $dc, $ce, $d2, $e5, $f7, $ff, $f5, $e1, $d0, $ce, $dc, $ef
176ec     02 0C 0D 07 
176f0     02 01 05 0D 
176f4     15 1A 1D 1C 
176f8     1A 1A 1C 1F | 	byte	$02, $0c, $0d, $07, $02, $01, $05, $0d, $15, $1a, $1d, $1c, $1a, $1a, $1c, $1f
176fc     22 23 1F 16 
17700     04 F1 E0 D8 
17704     D3 CE CF D7 
17708     E3 EE F7 FB | 	byte	$22, $23, $1f, $16, $04, $f1, $e0, $d8, $d3, $ce, $cf, $d7, $e3, $ee, $f7, $fb
1770c     FB FA FC 00 
17710     06 0D 12 15 
17714     16 16 16 18 
17718     1B 1E 22 22 | 	byte	$fb, $fa, $fc, $00, $06, $0d, $12, $15, $16, $16, $16, $18, $1b, $1e, $22, $22
1771c     1E 13 FD E4 
17720     D1 CF DC EF 
17724     FB F9 EA D9 
17728     D1 D5 E4 F7 | 	byte	$1e, $13, $fd, $e4, $d1, $cf, $dc, $ef, $fb, $f9, $ea, $d9, $d1, $d5, $e4, $f7
1772c     07 0E 0D 09 
17730     04 03 07 0E 
17734     16 1B 1E 1E 
17738     1C 1C 1D 1F | 	byte	$07, $0e, $0d, $09, $04, $03, $07, $0e, $16, $1b, $1e, $1e, $1c, $1c, $1d, $1f
1773c     21 20 1B 12 
17740     01 EB D9 C8 
17744     BF C3 CF E3 
17748     F5 FE 01 FC | 	byte	$21, $20, $1b, $12, $01, $eb, $d9, $c8, $bf, $c3, $cf, $e3, $f5, $fe, $01, $fc
1774c     F8 F6 F9 02 
17750     0B 13 18 18 
17754     16 15 15 17 
17758     1B 20 22 1F | 	byte	$f8, $f6, $f9, $02, $0b, $13, $18, $18, $16, $15, $15, $17, $1b, $20, $22, $1f
1775c     16 05 EB D6 
17760     CF D6 E5 F5 
17764     FB F5 E6 DA 
17768     D6 DD EC FD | 	byte	$16, $05, $eb, $d6, $cf, $d6, $e5, $f5, $fb, $f5, $e6, $da, $d6, $dd, $ec, $fd
1776c     0A 0F 0F 0B 
17770     07 06 09 10 
17774     16 1B 1F 20 
17778     1F 1F 1F 1F | 	byte	$0a, $0f, $0f, $0b, $07, $06, $09, $10, $16, $1b, $1f, $20, $1f, $1f, $1f, $1f
1777c     1F 1C 17 0D 
17780     F9 E2 C8 B8 
17784     B6 C2 DA F2 
17788     03 09 06 FE | 	byte	$1f, $1c, $17, $0d, $f9, $e2, $c8, $b8, $b6, $c2, $da, $f2, $03, $09, $06, $fe
1778c     F6 F5 F9 02 
17790     0E 18 1D 1D 
17794     1A 17 16 17 
17798     1B 1E 1E 18 | 	byte	$f6, $f5, $f9, $02, $0e, $18, $1d, $1d, $1a, $17, $16, $17, $1b, $1e, $1e, $18
1779c     0C F6 E2 D3 
177a0     D2 DB E9 F4 
177a4     F7 F0 E7 DF 
177a8     DE E4 F1 FD | 	byte	$0c, $f6, $e2, $d3, $d2, $db, $e9, $f4, $f7, $f0, $e7, $df, $de, $e4, $f1, $fd
177ac     07 0E 0F 0E 
177b0     0C 0C 0D 10 
177b4     15 1A 1E 20 
177b8     21 22 22 20 | 	byte	$07, $0e, $0f, $0e, $0c, $0c, $0d, $10, $15, $1a, $1e, $20, $21, $22, $22, $20
177bc     1E 18 10 03 
177c0     ED D2 BD B3 
177c4     B9 CC E5 FA 
177c8     09 0E 0A 01 | 	byte	$1e, $18, $10, $03, $ed, $d2, $bd, $b3, $b9, $cc, $e5, $fa, $09, $0e, $0a, $01
177cc     FA F8 FB 02 
177d0     0D 17 1D 1F 
177d4     1E 1C 19 18 
177d8     18 17 15 0D | 	byte	$fa, $f8, $fb, $02, $0d, $17, $1d, $1f, $1e, $1c, $19, $18, $18, $17, $15, $0d
177dc     FE ED DD D5 
177e0     D7 E0 EB F2 
177e4     F3 EF E8 E4 
177e8     E4 EB F4 FF | 	byte	$fe, $ed, $dd, $d5, $d7, $e0, $eb, $f2, $f3, $ef, $e8, $e4, $e4, $eb, $f4, $ff
177ec     08 0E 11 11 
177f0     10 0F 10 12 
177f4     15 1A 1E 21 
177f8     22 23 23 20 | 	byte	$08, $0e, $11, $11, $10, $0f, $10, $12, $15, $1a, $1e, $21, $22, $23, $23, $20
177fc     1B 12 07 F4 
17800     DC C5 B5 B3 
17804     C1 D6 F0 02 
17808     0E 10 0B 02 | 	byte	$1b, $12, $07, $f4, $dc, $c5, $b5, $b3, $c1, $d6, $f0, $02, $0e, $10, $0b, $02
1780c     FB FA FD 04 
17810     0F 17 1E 21 
17814     21 1F 1C 18 
17818     15 11 0A 00 | 	byte	$fb, $fa, $fd, $04, $0f, $17, $1e, $21, $21, $1f, $1c, $18, $15, $11, $0a, $00
1781c     F2 E4 DA D9 
17820     DE E7 EE F2 
17824     F1 ED E8 E6 
17828     E9 F1 F9 03 | 	byte	$f2, $e4, $da, $d9, $de, $e7, $ee, $f2, $f1, $ed, $e8, $e6, $e9, $f1, $f9, $03
1782c     0A 0F 12 12 
17830     11 11 11 13 
17834     17 1A 1D 20 
17838     22 23 22 1D | 	byte	$0a, $0f, $12, $12, $11, $11, $11, $13, $17, $1a, $1d, $20, $22, $23, $22, $1d
1783c     15 09 FB E4 
17840     CF BC B6 BC 
17844     CE E6 F9 0A 
17848     12 12 0C 04 | 	byte	$15, $09, $fb, $e4, $cf, $bc, $b6, $bc, $ce, $e6, $f9, $0a, $12, $12, $0c, $04
1784c     FE FD FF 07 
17850     0F 18 1E 22 
17854     23 21 1D 18 
17858     11 09 FF F2 | 	byte	$fe, $fd, $ff, $07, $0f, $18, $1e, $22, $23, $21, $1d, $18, $11, $09, $ff, $f2
1785c     E6 DC D9 DC 
17860     E3 EC F1 F3 
17864     F0 EC E9 EA 
17868     EE F5 FD 06 | 	byte	$e6, $dc, $d9, $dc, $e3, $ec, $f1, $f3, $f0, $ec, $e9, $ea, $ee, $f5, $fd, $06
1786c     0D 11 13 14 
17870     14 13 13 15 
17874     18 1B 1E 20 
17878     22 22 1F 17 | 	byte	$0d, $11, $13, $14, $14, $13, $13, $15, $18, $1b, $1e, $20, $22, $22, $1f, $17
1787c     0D FE EB D8 
17880     C5 BC BD C8 
17884     D9 ED FE 0C 
17888     12 11 0D 07 | 	byte	$0d, $fe, $eb, $d8, $c5, $bc, $bd, $c8, $d9, $ed, $fe, $0c, $12, $11, $0d, $07
1788c     01 00 02 08 
17890     0F 17 1E 22 
17894     24 21 1D 15 
17898     0D 02 F6 E8 | 	byte	$01, $00, $02, $08, $0f, $17, $1e, $22, $24, $21, $1d, $15, $0d, $02, $f6, $e8
1789c     DD D9 D9 DF 
178a0     E7 F0 F4 F5 
178a4     F2 EE ED EE 
178a8     F1 F8 00 08 | 	byte	$dd, $d9, $d9, $df, $e7, $f0, $f4, $f5, $f2, $ee, $ed, $ee, $f1, $f8, $00, $08
178ac     0E 13 15 16 
178b0     15 15 15 16 
178b4     18 1A 1D 20 
178b8     20 1E 19 0F | 	byte	$0e, $13, $15, $16, $15, $15, $15, $16, $18, $1a, $1d, $20, $20, $1e, $19, $0f
178bc     01 F2 E0 CF 
178c0     C4 C0 C5 D1 
178c4     E2 F4 04 0E 
178c8     13 12 0E 09 | 	byte	$01, $f2, $e0, $cf, $c4, $c0, $c5, $d1, $e2, $f4, $04, $0e, $13, $12, $0e, $09
178cc     05 04 05 09 
178d0     10 17 1E 22 
178d4     23 20 1A 12 
178d8     08 FB EC E0 | 	byte	$05, $04, $05, $09, $10, $17, $1e, $22, $23, $20, $1a, $12, $08, $fb, $ec, $e0
178dc     D8 D6 D9 E2 
178e0     EC F3 F6 F6 
178e4     F3 F0 EF EF 
178e8     F3 F9 01 08 | 	byte	$d8, $d6, $d9, $e2, $ec, $f3, $f6, $f6, $f3, $f0, $ef, $ef, $f3, $f9, $01, $08
178ec     0F 15 18 19 
178f0     18 17 17 17 
178f4     18 1A 1C 1D 
178f8     1C 18 11 06 | 	byte	$0f, $15, $18, $19, $18, $17, $17, $17, $18, $1a, $1c, $1d, $1c, $18, $11, $06
178fc     F7 E7 D9 CD 
17900     C7 C8 D0 DB 
17904     EC FA 06 0E 
17908     12 12 0F 0B | 	byte	$f7, $e7, $d9, $cd, $c7, $c8, $d0, $db, $ec, $fa, $06, $0e, $12, $12, $0f, $0b
1790c     08 07 09 0C 
17910     12 17 1C 1F 
17914     1E 1A 14 0D 
17918     02 F4 E7 DC | 	byte	$08, $07, $09, $0c, $12, $17, $1c, $1f, $1e, $1a, $14, $0d, $02, $f4, $e7, $dc
1791c     D7 D6 DB E4 
17920     EC F3 F7 F7 
17924     F6 F5 F5 F6 
17928     F9 FE 03 09 | 	byte	$d7, $d6, $db, $e4, $ec, $f3, $f7, $f7, $f6, $f5, $f5, $f6, $f9, $fe, $03, $09
1792c     0E 13 16 18 
17930     1A 1A 1B 1B 
17934     1B 1C 1B 18 
17938     14 0F 05 F9 | 	byte	$0e, $13, $16, $18, $1a, $1a, $1b, $1b, $1b, $1c, $1b, $18, $14, $0f, $05, $f9
1793c     ED E1 D8 D2 
17940     D0 D2 DA E3 
17944     F0 FA 04 0C 
17948     10 12 11 10 | 	byte	$ed, $e1, $d8, $d2, $d0, $d2, $da, $e3, $f0, $fa, $04, $0c, $10, $12, $11, $10
1794c     0E 0E 0E 10 
17950     13 16 19 1A 
17954     18 14 10 08 
17958     FD F0 E5 DB | 	byte	$0e, $0e, $0e, $10, $13, $16, $19, $1a, $18, $14, $10, $08, $fd, $f0, $e5, $db
1795c     D7 D7 DC E3 
17960     EC F2 F7 F9 
17964     FA FA FA FC 
17968     FE 01 05 09 | 	byte	$d7, $d7, $dc, $e3, $ec, $f2, $f7, $f9, $fa, $fa, $fa, $fc, $fe, $01, $05, $09
1796c     0D 11 15 18 
17970     1A 1C 1D 1D 
17974     1C 1A 18 13 
17978     0E 06 FA F0 | 	byte	$0d, $11, $15, $18, $1a, $1c, $1d, $1d, $1c, $1a, $18, $13, $0e, $06, $fa, $f0
1797c     E5 DE D9 D7 
17980     D7 DB E3 EB 
17984     F5 FE 06 0C 
17988     10 12 13 12 | 	byte	$e5, $de, $d9, $d7, $d7, $db, $e3, $eb, $f5, $fe, $06, $0c, $10, $12, $13, $12
1798c     12 11 11 12 
17990     14 16 16 14 
17994     12 0F 0A 01 
17998     F7 EB E1 DA | 	byte	$12, $11, $11, $12, $14, $16, $16, $14, $12, $0f, $0a, $01, $f7, $eb, $e1, $da
1799c     D7 D9 DE E6 
179a0     EC F2 F6 FA 
179a4     FC FD FE 00 
179a8     02 05 07 0B | 	byte	$d7, $d9, $de, $e6, $ec, $f2, $f6, $fa, $fc, $fd, $fe, $00, $02, $05, $07, $0b
179ac     0E 11 15 17 
179b0     1A 1C 1D 1D 
179b4     1B 18 14 0F 
179b8     08 FD F2 E8 | 	byte	$0e, $11, $15, $17, $1a, $1c, $1d, $1d, $1b, $18, $14, $0f, $08, $fd, $f2, $e8
179bc     E1 DD DB DB 
179c0     DD E2 E8 EF 
179c4     F8 00 07 0C 
179c8     10 12 13 14 | 	byte	$e1, $dd, $db, $db, $dd, $e2, $e8, $ef, $f8, $00, $07, $0c, $10, $12, $13, $14
179cc     14 14 14 15 
179d0     14 14 12 10 
179d4     0E 0A 03 FB 
179d8     F1 E6 DE D9 | 	byte	$14, $14, $14, $15, $14, $14, $12, $10, $0e, $0a, $03, $fb, $f1, $e6, $de, $d9
179dc     D9 DC E3 E9 
179e0     F0 F6 F9 FC 
179e4     FE FF 01 02 
179e8     04 06 09 0C | 	byte	$d9, $dc, $e3, $e9, $f0, $f6, $f9, $fc, $fe, $ff, $01, $02, $04, $06, $09, $0c
179ec     10 13 16 19 
179f0     1B 1C 1C 1A 
179f4     17 14 0F 08 
179f8     FF F5 EB E4 | 	byte	$10, $13, $16, $19, $1b, $1c, $1c, $1a, $17, $14, $0f, $08, $ff, $f5, $eb, $e4
179fc     E0 DF E0 E2 
17a00     E5 EB F0 F7 
17a04     FE 03 08 0D 
17a08     10 12 13 14 | 	byte	$e0, $df, $e0, $e2, $e5, $eb, $f0, $f7, $fe, $03, $08, $0d, $10, $12, $13, $14
17a0c     15 15 16 16 
17a10     15 12 10 0D 
17a14     0A 05 FC F4 
17a18     E9 E1 DB D9 | 	byte	$15, $15, $16, $16, $15, $12, $10, $0d, $0a, $05, $fc, $f4, $e9, $e1, $db, $d9
17a1c     DB E0 E6 ED 
17a20     F3 F7 FB FD 
17a24     FF 01 03 04 
17a28     07 09 0B 0E | 	byte	$db, $e0, $e6, $ed, $f3, $f7, $fb, $fd, $ff, $01, $03, $04, $07, $09, $0b, $0e
17a2c     11 13 16 19 
17a30     1A 1A 19 16 
17a34     13 10 0A 01 
17a38     F8 EE E7 E3 | 	byte	$11, $13, $16, $19, $1a, $1a, $19, $16, $13, $10, $0a, $01, $f8, $ee, $e7, $e3
17a3c     E1 E3 E5 E9 
17a40     ED F2 F6 FB 
17a44     00 04 08 0B 
17a48     0E 11 12 14 | 	byte	$e1, $e3, $e5, $e9, $ed, $f2, $f6, $fb, $00, $04, $08, $0b, $0e, $11, $12, $14
17a4c     16 17 18 17 
17a50     14 11 0E 0A 
17a54     06 FE F6 ED 
17a58     E4 DE DA DA | 	byte	$16, $17, $18, $17, $14, $11, $0e, $0a, $06, $fe, $f6, $ed, $e4, $de, $da, $da
17a5c     DD E3 E9 EF 
17a60     F4 F9 FD 00 
17a64     03 05 07 08 
17a68     0A 0C 0E 0F | 	byte	$dd, $e3, $e9, $ef, $f4, $f9, $fd, $00, $03, $05, $07, $08, $0a, $0c, $0e, $0f
17a6c     11 13 15 16 
17a70     16 15 14 12 
17a74     0F 0B 04 FC 
17a78     F3 EC E7 E5 | 	byte	$11, $13, $15, $16, $16, $15, $14, $12, $0f, $0b, $04, $fc, $f3, $ec, $e7, $e5
17a7c     E5 E7 EA ED 
17a80     F0 F5 F9 FD 
17a84     01 05 08 0C 
17a88     0F 11 14 16 | 	byte	$e5, $e7, $ea, $ed, $f0, $f5, $f9, $fd, $01, $05, $08, $0c, $0f, $11, $14, $16
17a8c     17 18 17 15 
17a90     13 0F 0C 08 
17a94     02 FA F2 E9 
17a98     E2 DC DA DA | 	byte	$17, $18, $17, $15, $13, $0f, $0c, $08, $02, $fa, $f2, $e9, $e2, $dc, $da, $da
17a9c     DE E3 E8 EE 
17aa0     F3 F8 FD 02 
17aa4     05 08 0A 0C 
17aa8     0D 0F 10 11 | 	byte	$de, $e3, $e8, $ee, $f3, $f8, $fd, $02, $05, $08, $0a, $0c, $0d, $0f, $10, $11
17aac     12 13 13 12 
17ab0     11 10 0F 0D 
17ab4     0A 05 FF F8 
17ab8     F1 EC EA E9 | 	byte	$12, $13, $13, $12, $11, $10, $0f, $0d, $0a, $05, $ff, $f8, $f1, $ec, $ea, $e9
17abc     EA ED EF F2 
17ac0     F5 F8 FB FF 
17ac4     02 05 09 0C 
17ac8     10 13 15 17 | 	byte	$ea, $ed, $ef, $f2, $f5, $f8, $fb, $ff, $02, $05, $09, $0c, $10, $13, $15, $17
17acc     18 18 16 14 
17ad0     11 0D 0A 04 
17ad4     FD F5 EC E5 
17ad8     DE DA D9 DB | 	byte	$18, $18, $16, $14, $11, $0d, $0a, $04, $fd, $f5, $ec, $e5, $de, $da, $d9, $db
17adc     DF E5 EB F1 
17ae0     F7 FC 01 05 
17ae4     08 0B 0D 0F 
17ae8     10 11 11 12 | 	byte	$df, $e5, $eb, $f1, $f7, $fc, $01, $05, $08, $0b, $0d, $0f, $10, $11, $11, $12
17aec     12 12 11 10 
17af0     0F 0E 0C 09 
17af4     05 00 FA F4 
17af8     EF EC EB EC | 	byte	$12, $12, $11, $10, $0f, $0e, $0c, $09, $05, $00, $fa, $f4, $ef, $ec, $eb, $ec
17afc     EE F1 F4 F7 
17b00     FA FC FF 02 
17b04     04 07 0A 0C 
17b08     0F 12 14 16 | 	byte	$ee, $f1, $f4, $f7, $fa, $fc, $ff, $02, $04, $07, $0a, $0c, $0f, $12, $14, $16
17b0c     17 16 15 13 
17b10     10 0E 09 03 
17b14     FB F1 EA E2 
17b18     DD DA DA DC | 	byte	$17, $16, $15, $13, $10, $0e, $09, $03, $fb, $f1, $ea, $e2, $dd, $da, $da, $dc
17b1c     E0 E5 EB F2 
17b20     F8 FE 03 08 
17b24     0C 0E 10 12 
17b28     13 14 13 13 | 	byte	$e0, $e5, $eb, $f2, $f8, $fe, $03, $08, $0c, $0e, $10, $12, $13, $14, $13, $13
17b2c     12 10 0E 0C 
17b30     0A 09 06 02 
17b34     FE F9 F4 F1 
17b38     EE EE EF F2 | 	byte	$12, $10, $0e, $0c, $0a, $09, $06, $02, $fe, $f9, $f4, $f1, $ee, $ee, $ef, $f2
17b3c     F5 F8 FB FD 
17b40     FF 01 03 04 
17b44     06 07 09 0B 
17b48     0E 11 13 14 | 	byte	$f5, $f8, $fb, $fd, $ff, $01, $03, $04, $06, $07, $09, $0b, $0e, $11, $13, $14
17b4c     14 13 13 11 
17b50     0F 0C 07 00 
17b54     F8 F0 E7 E1 
17b58     DC DA DA DC | 	byte	$14, $13, $13, $11, $0f, $0c, $07, $00, $f8, $f0, $e7, $e1, $dc, $da, $da, $dc
17b5c     E1 E6 EB F1 
17b60     F8 FE 04 09 
17b64     0D 11 14 16 
17b68     17 17 16 14 | 	byte	$e1, $e6, $eb, $f1, $f8, $fe, $04, $09, $0d, $11, $14, $16, $17, $17, $16, $14
17b6c     11 0F 0C 0A 
17b70     07 04 00 FC 
17b74     F8 F4 F1 EF 
17b78     EE EF F2 F6 | 	byte	$11, $0f, $0c, $0a, $07, $04, $00, $fc, $f8, $f4, $f1, $ef, $ee, $ef, $f2, $f6
17b7c     F9 FD 01 02 
17b80     03 04 05 06 
17b84     07 08 09 0B 
17b88     0D 0E 10 11 | 	byte	$f9, $fd, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0b, $0d, $0e, $10, $11
17b8c     11 11 10 0F 
17b90     0D 09 03 FD 
17b94     F5 EC E5 E0 
17b98     DC DB DC DF | 	byte	$11, $11, $10, $0f, $0d, $09, $03, $fd, $f5, $ec, $e5, $e0, $dc, $db, $dc, $df
17b9c     E3 E8 ED F3 
17ba0     FA FF 05 0B 
17ba4     0E 12 15 17 
17ba8     18 18 15 13 | 	byte	$e3, $e8, $ed, $f3, $fa, $ff, $05, $0b, $0e, $12, $15, $17, $18, $18, $15, $13
17bac     11 0D 0B 07 
17bb0     04 FF FB F7 
17bb4     F3 F0 EE EE 
17bb8     EF F2 F6 FA | 	byte	$11, $0d, $0b, $07, $04, $ff, $fb, $f7, $f3, $f0, $ee, $ee, $ef, $f2, $f6, $fa
17bbc     FF 02 05 07 
17bc0     08 09 09 0A 
17bc4     0A 0A 0B 0D 
17bc8     0E 0F 10 10 | 	byte	$ff, $02, $05, $07, $08, $09, $09, $0a, $0a, $0a, $0b, $0d, $0e, $0f, $10, $10
17bcc     0F 0F 0E 0C 
17bd0     09 04 FC F5 
17bd4     ED E6 DF DC 
17bd8     DB DC DF E4 | 	byte	$0f, $0f, $0e, $0c, $09, $04, $fc, $f5, $ed, $e6, $df, $dc, $db, $dc, $df, $e4
17bdc     E9 EF F6 FC 
17be0     02 07 0B 0F 
17be4     12 13 14 14 
17be8     13 11 0F 0D | 	byte	$e9, $ef, $f6, $fc, $02, $07, $0b, $0f, $12, $13, $14, $14, $13, $11, $0f, $0d
17bec     0B 09 06 04 
17bf0     00 FC F8 F4 
17bf4     F1 F0 EF F1 
17bf8     F3 F7 FD 01 | 	byte	$0b, $09, $06, $04, $00, $fc, $f8, $f4, $f1, $f0, $ef, $f1, $f3, $f7, $fd, $01
17bfc     05 08 0A 0B 
17c00     0B 0A 0A 09 
17c04     09 09 0A 0B 
17c08     0B 0C 0D 0D | 	byte	$05, $08, $0a, $0b, $0b, $0a, $0a, $09, $09, $09, $0a, $0b, $0b, $0c, $0d, $0d
17c0c     0D 0D 0C 0A 
17c10     06 FF F7 EF 
17c14     E7 E1 DD DB 
17c18     DD E0 E4 EA | 	byte	$0d, $0d, $0c, $0a, $06, $ff, $f7, $ef, $e7, $e1, $dd, $db, $dd, $e0, $e4, $ea
17c1c     F1 F6 FD 02 
17c20     07 0B 0F 11 
17c24     12 13 13 11 
17c28     0F 0D 0B 09 | 	byte	$f1, $f6, $fd, $02, $07, $0b, $0f, $11, $12, $13, $13, $11, $0f, $0d, $0b, $09
17c2c     07 05 02 FE 
17c30     FB F7 F3 F1 
17c34     F0 F0 F2 F5 
17c38     F9 FF 05 09 | 	byte	$07, $05, $02, $fe, $fb, $f7, $f3, $f1, $f0, $f0, $f2, $f5, $f9, $ff, $05, $09
17c3c     0C 0E 0E 0E 
17c40     0C 0A 09 07 
17c44     07 06 07 08 
17c48     08 09 0A 0B | 	byte	$0c, $0e, $0e, $0e, $0c, $0a, $09, $07, $07, $06, $07, $08, $08, $09, $0a, $0b
17c4c     0C 0D 0C 08 
17c50     02 FA F3 EA 
17c54     E3 DF DC DD 
17c58     DF E3 E9 EF | 	byte	$0c, $0d, $0c, $08, $02, $fa, $f3, $ea, $e3, $df, $dc, $dd, $df, $e3, $e9, $ef
17c5c     F5 FC 01 06 
17c60     0A 0D 0F 11 
17c64     11 11 0F 0D 
17c68     0A 08 07 05 | 	byte	$f5, $fc, $01, $06, $0a, $0d, $0f, $11, $11, $11, $0f, $0d, $0a, $08, $07, $05
17c6c     04 01 FD FA 
17c70     F6 F4 F2 F1 
17c74     F2 F4 F7 FB 
17c78     01 07 0C 10 | 	byte	$04, $01, $fd, $fa, $f6, $f4, $f2, $f1, $f2, $f4, $f7, $fb, $01, $07, $0c, $10
17c7c     12 11 10 0E 
17c80     0B 08 06 04 
17c84     04 04 04 05 
17c88     06 08 09 0B | 	byte	$12, $11, $10, $0e, $0b, $08, $06, $04, $04, $04, $04, $05, $06, $08, $09, $0b
17c8c     0C 0C 09 04 
17c90     FD F5 EC E5 
17c94     DF DC DB DE 
17c98     E2 E8 EE F4 | 	byte	$0c, $0c, $09, $04, $fd, $f5, $ec, $e5, $df, $dc, $db, $de, $e2, $e8, $ee, $f4
17c9c     FB 01 06 0B 
17ca0     0E 10 11 11 
17ca4     10 0E 0C 09 
17ca8     07 05 04 02 | 	byte	$fb, $01, $06, $0b, $0e, $10, $11, $11, $10, $0e, $0c, $09, $07, $05, $04, $02
17cac     FF FD F9 F6 
17cb0     F4 F3 F3 F4 
17cb4     F6 F9 FE 03 
17cb8     09 0D 12 14 | 	byte	$ff, $fd, $f9, $f6, $f4, $f3, $f3, $f4, $f6, $f9, $fe, $03, $09, $0d, $12, $14
17cbc     14 12 0F 0C 
17cc0     08 06 03 02 
17cc4     02 02 03 04 
17cc8     05 07 0A 0D | 	byte	$14, $12, $0f, $0c, $08, $06, $03, $02, $02, $02, $03, $04, $05, $07, $0a, $0d
17ccc     0D 0B 07 00 
17cd0     F8 EF E8 E1 
17cd4     DD DC DE E1 
17cd8     E7 ED F4 FA | 	byte	$0d, $0b, $07, $00, $f8, $ef, $e8, $e1, $dd, $dc, $de, $e1, $e7, $ed, $f4, $fa
17cdc     00 06 0A 0E 
17ce0     10 10 10 0F 
17ce4     0D 09 07 05 
17ce8     03 02 00 FE | 	byte	$00, $06, $0a, $0e, $10, $10, $10, $0f, $0d, $09, $07, $05, $03, $02, $00, $fe
17cec     FC F9 F6 F4 
17cf0     F4 F4 F5 F7 
17cf4     FB FF 04 0A 
17cf8     0F 13 15 16 | 	byte	$fc, $f9, $f6, $f4, $f4, $f4, $f5, $f7, $fb, $ff, $04, $0a, $0f, $13, $15, $16
17cfc     15 12 0E 0B 
17d00     07 04 02 01 
17d04     00 00 01 03 
17d08     05 08 0B 0C | 	byte	$15, $12, $0e, $0b, $07, $04, $02, $01, $00, $00, $01, $03, $05, $08, $0b, $0c
17d0c     0C 08 02 FA 
17d10     F1 EA E3 DE 
17d14     DC DD E0 E5 
17d18     EC F2 F9 FF | 	byte	$0c, $08, $02, $fa, $f1, $ea, $e3, $de, $dc, $dd, $e0, $e5, $ec, $f2, $f9, $ff
17d1c     04 09 0D 0F 
17d20     10 10 0E 0C 
17d24     08 06 04 02 
17d28     01 00 FE FB | 	byte	$04, $09, $0d, $0f, $10, $10, $0e, $0c, $08, $06, $04, $02, $01, $00, $fe, $fb
17d2c     F8 F6 F4 F4 
17d30     F4 F6 F9 FC 
17d34     00 05 0B 10 
17d38     14 17 18 17 | 	byte	$f8, $f6, $f4, $f4, $f4, $f6, $f9, $fc, $00, $05, $0b, $10, $14, $17, $18, $17
17d3c     15 11 0C 07 
17d40     03 01 FF FE 
17d44     FD FE FF 02 
17d48     05 09 0C 0D | 	byte	$15, $11, $0c, $07, $03, $01, $ff, $fe, $fd, $fe, $ff, $02, $05, $09, $0c, $0d
17d4c     0A 05 FD F5 
17d50     EC E5 E0 DD 
17d54     DD E0 E4 EA 
17d58     F1 F8 FE 04 | 	byte	$0a, $05, $fd, $f5, $ec, $e5, $e0, $dd, $dd, $e0, $e4, $ea, $f1, $f8, $fe, $04
17d5c     09 0C 0F 0F 
17d60     0E 0C 0A 07 
17d64     04 03 02 00 
17d68     FF FC FA F7 | 	byte	$09, $0c, $0f, $0f, $0e, $0c, $0a, $07, $04, $03, $02, $00, $ff, $fc, $fa, $f7
17d6c     F5 F4 F3 F5 
17d70     F7 FA FD 01 
17d74     06 0B 10 15 
17d78     18 19 19 17 | 	byte	$f5, $f4, $f3, $f5, $f7, $fa, $fd, $01, $06, $0b, $10, $15, $18, $19, $19, $17
17d7c     14 0F 0B 06 
17d80     02 FF FD FC 
17d84     FC FD FF 03 
17d88     07 0A 0C 0B | 	byte	$14, $0f, $0b, $06, $02, $ff, $fd, $fc, $fc, $fd, $ff, $03, $07, $0a, $0c, $0b
17d8c     06 00 F8 EF 
17d90     E8 E1 DE DD 
17d94     DF E3 E9 EF 
17d98     F6 FD 03 08 | 	byte	$06, $00, $f8, $ef, $e8, $e1, $de, $dd, $df, $e3, $e9, $ef, $f6, $fd, $03, $08
17d9c     0B 0D 0E 0D 
17da0     0B 09 06 03 
17da4     02 01 00 FE 
17da8     FC FA F7 F5 | 	byte	$0b, $0d, $0e, $0d, $0b, $09, $06, $03, $02, $01, $00, $fe, $fc, $fa, $f7, $f5
17dac     F4 F4 F5 F8 
17db0     FB FE 03 08 
17db4     0D 11 15 18 
17db8     1A 1B 19 16 | 	byte	$f4, $f4, $f5, $f8, $fb, $fe, $03, $08, $0d, $11, $15, $18, $1a, $1b, $19, $16
17dbc     12 0D 08 04 
17dc0     00 FD FB FA 
17dc4     FA FD 00 04 
17dc8     09 0B 0B 07 | 	byte	$12, $0d, $08, $04, $00, $fd, $fb, $fa, $fa, $fd, $00, $04, $09, $0b, $0b, $07
17dcc     02 FA F2 EA 
17dd0     E3 DF DE DF 
17dd4     E3 E8 EE F5 
17dd8     FC 02 07 0B | 	byte	$02, $fa, $f2, $ea, $e3, $df, $de, $df, $e3, $e8, $ee, $f5, $fc, $02, $07, $0b
17ddc     0D 0E 0D 0A 
17de0     08 05 03 02 
17de4     01 00 FE FC 
17de8     F9 F7 F5 F3 | 	byte	$0d, $0e, $0d, $0a, $08, $05, $03, $02, $01, $00, $fe, $fc, $f9, $f7, $f5, $f3
17dec     F4 F5 F7 FB 
17df0     FF 03 08 0C 
17df4     11 16 19 1B 
17df8     1B 1A 18 13 | 	byte	$f4, $f5, $f7, $fb, $ff, $03, $08, $0c, $11, $16, $19, $1b, $1b, $1a, $18, $13
17dfc     0F 0A 04 00 
17e00     FD FA F8 F9 
17e04     FA FE 02 07 
17e08     0A 0B 08 03 | 	byte	$0f, $0a, $04, $00, $fd, $fa, $f8, $f9, $fa, $fe, $02, $07, $0a, $0b, $08, $03
17e0c     FC F5 ED E6 
17e10     E1 DF E0 E3 
17e14     E7 EE F4 FA 
17e18     00 06 09 0C | 	byte	$fc, $f5, $ed, $e6, $e1, $df, $e0, $e3, $e7, $ee, $f4, $fa, $00, $06, $09, $0c
17e1c     0C 0B 08 06 
17e20     03 02 00 00 
17e24     FF FD FB F8 
17e28     F6 F4 F3 F4 | 	byte	$0c, $0b, $08, $06, $03, $02, $00, $00, $ff, $fd, $fb, $f8, $f6, $f4, $f3, $f4
17e2c     F5 F8 FB 00 
17e30     05 09 0E 12 
17e34     16 19 1B 1C 
17e38     1C 19 16 11 | 	byte	$f5, $f8, $fb, $00, $05, $09, $0e, $12, $16, $19, $1b, $1c, $1c, $19, $16, $11
17e3c     0C 07 02 FD 
17e40     F9 F8 F6 F8 
17e44     FB 00 05 08 
17e48     0A 08 05 FE | 	byte	$0c, $07, $02, $fd, $f9, $f8, $f6, $f8, $fb, $00, $05, $08, $0a, $08, $05, $fe
17e4c     F7 EE E7 E2 
17e50     DF DF E2 E6 
17e54     EC F3 F9 00 
17e58     04 09 0B 0B | 	byte	$f7, $ee, $e7, $e2, $df, $df, $e2, $e6, $ec, $f3, $f9, $00, $04, $09, $0b, $0b
17e5c     0A 08 06 04 
17e60     02 01 01 FF 
17e64     FE FB F8 F6 
17e68     F4 F3 F3 F5 | 	byte	$0a, $08, $06, $04, $02, $01, $01, $ff, $fe, $fb, $f8, $f6, $f4, $f3, $f3, $f5
17e6c     F8 FC 01 06 
17e70     0A 0F 13 17 
17e74     19 1B 1C 1C 
17e78     1A 18 13 0E | 	byte	$f8, $fc, $01, $06, $0a, $0f, $13, $17, $19, $1b, $1c, $1c, $1a, $18, $13, $0e
17e7c     09 03 FE FA 
17e80     F7 F5 F6 F9 
17e84     FD 03 07 0A 
17e88     09 06 FF F9 | 	byte	$09, $03, $fe, $fa, $f7, $f5, $f6, $f9, $fd, $03, $07, $0a, $09, $06, $ff, $f9
17e8c     F1 EA E4 E1 
17e90     E0 E2 E6 EB 
17e94     F2 F8 FE 04 
17e98     07 09 0A 09 | 	byte	$f1, $ea, $e4, $e1, $e0, $e2, $e6, $eb, $f2, $f8, $fe, $04, $07, $09, $0a, $09
17e9c     07 05 03 01 
17ea0     01 00 FF FD 
17ea4     FB F7 F5 F3 
17ea8     F2 F3 F5 F8 | 	byte	$07, $05, $03, $01, $01, $00, $ff, $fd, $fb, $f7, $f5, $f3, $f2, $f3, $f5, $f8
17eac     FC 01 06 0B 
17eb0     10 14 17 1A 
17eb4     1B 1C 1C 1B 
17eb8     18 15 11 0B | 	byte	$fc, $01, $06, $0b, $10, $14, $17, $1a, $1b, $1c, $1c, $1b, $18, $15, $11, $0b
17ebc     05 FF FB F8 
17ec0     F6 F6 F8 FC 
17ec4     01 06 09 09 
17ec8     07 01 FA F2 | 	byte	$05, $ff, $fb, $f8, $f6, $f6, $f8, $fc, $01, $06, $09, $09, $07, $01, $fa, $f2
17ecc     EB E5 E1 DF 
17ed0     E1 E5 EA F0 
17ed4     F7 FD 02 06 
17ed8     07 08 07 06 | 	byte	$eb, $e5, $e1, $df, $e1, $e5, $ea, $f0, $f7, $fd, $02, $06, $07, $08, $07, $06
17edc     04 02 01 01 
17ee0     00 FF FD FA 
17ee4     F7 F4 F2 F2 
17ee8     F3 F5 F8 FD | 	byte	$04, $02, $01, $01, $00, $ff, $fd, $fa, $f7, $f4, $f2, $f2, $f3, $f5, $f8, $fd
17eec     02 07 0C 11 
17ef0     15 18 1A 1C 
17ef4     1C 1C 1B 19 
17ef8     16 12 0D 07 | 	byte	$02, $07, $0c, $11, $15, $18, $1a, $1c, $1c, $1c, $1b, $19, $16, $12, $0d, $07
17efc     02 FB F7 F5 
17f00     F5 F6 FA FF 
17f04     04 07 08 06 
17f08     01 FC F4 ED | 	byte	$02, $fb, $f7, $f5, $f5, $f6, $fa, $ff, $04, $07, $08, $06, $01, $fc, $f4, $ed
17f0c     E6 E2 E0 E1 
17f10     E5 EA F0 F6 
17f14     FC 01 05 07 
17f18     07 06 05 03 | 	byte	$e6, $e2, $e0, $e1, $e5, $ea, $f0, $f6, $fc, $01, $05, $07, $07, $06, $05, $03
17f1c     02 01 01 00 
17f20     FF FC F9 F6 
17f24     F4 F2 F1 F2 
17f28     F4 F8 FD 02 | 	byte	$02, $01, $01, $00, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f2, $f4, $f8, $fd, $02
17f2c     08 0D 12 16 
17f30     18 1A 1C 1C 
17f34     1C 1B 19 17 
17f38     14 0F 09 03 | 	byte	$08, $0d, $12, $16, $18, $1a, $1c, $1c, $1c, $1b, $19, $17, $14, $0f, $09, $03
17f3c     FE FA F7 F6 
17f40     F6 FA FE 03 
17f44     07 08 06 02 
17f48     FC F5 ED E7 | 	byte	$fe, $fa, $f7, $f6, $f6, $fa, $fe, $03, $07, $08, $06, $02, $fc, $f5, $ed, $e7
17f4c     E3 E1 E1 E4 
17f50     E9 F0 F5 FC 
17f54     01 04 06 06 
17f58     05 04 03 01 | 	byte	$e3, $e1, $e1, $e4, $e9, $f0, $f5, $fc, $01, $04, $06, $06, $05, $04, $03, $01
17f5c     01 00 00 FE 
17f60     FC F9 F6 F3 
17f64     F1 F1 F2 F4 
17f68     F8 FD 03 09 | 	byte	$01, $00, $00, $fe, $fc, $f9, $f6, $f3, $f1, $f1, $f2, $f4, $f8, $fd, $03, $09
17f6c     0E 13 17 1A 
17f70     1C 1C 1C 1C 
17f74     1B 19 17 14 
17f78     10 0B 05 00 | 	byte	$0e, $13, $17, $1a, $1c, $1c, $1c, $1c, $1b, $19, $17, $14, $10, $0b, $05, $00
17f7c     FB F8 F6 F6 
17f80     F8 FD 01 05 
17f84     07 05 02 FC 
17f88     F6 EE E8 E3 | 	byte	$fb, $f8, $f6, $f6, $f8, $fd, $01, $05, $07, $05, $02, $fc, $f6, $ee, $e8, $e3
17f8c     E1 E1 E4 E8 
17f90     EE F5 FB FF 
17f94     03 04 05 05 
17f98     04 02 02 01 | 	byte	$e1, $e1, $e4, $e8, $ee, $f5, $fb, $ff, $03, $04, $05, $05, $04, $02, $02, $01
17f9c     01 00 FE FC 
17fa0     F8 F5 F3 F1 
17fa4     F1 F2 F4 F8 
17fa8     FD 03 09 0F | 	byte	$01, $00, $fe, $fc, $f8, $f5, $f3, $f1, $f1, $f2, $f4, $f8, $fd, $03, $09, $0f
17fac     13 18 1A 1B 
17fb0     1C 1C 1B 1A 
17fb4     18 17 15 11 
17fb8     0C 07 01 FD | 	byte	$13, $18, $1a, $1b, $1c, $1c, $1b, $1a, $18, $17, $15, $11, $0c, $07, $01, $fd
17fbc     F9 F7 F7 F9 
17fc0     FC 01 05 06 
17fc4     06 02 FD F6 
17fc8     EF E8 E4 E1 | 	byte	$f9, $f7, $f7, $f9, $fc, $01, $05, $06, $06, $02, $fd, $f6, $ef, $e8, $e4, $e1
17fcc     E1 E3 E8 EE 
17fd0     F4 FA FE 01 
17fd4     03 04 04 03 
17fd8     02 01 01 01 | 	byte	$e1, $e3, $e8, $ee, $f4, $fa, $fe, $01, $03, $04, $04, $03, $02, $01, $01, $01
17fdc     00 FD FA F7 
17fe0     F4 F1 EF EF 
17fe4     F0 F3 F8 FD 
17fe8     03 0A 10 15 | 	byte	$00, $fd, $fa, $f7, $f4, $f1, $ef, $ef, $f0, $f3, $f8, $fd, $03, $0a, $10, $15
17fec     18 1B 1C 1D 
17ff0     1C 1B 1A 18 
17ff4     17 15 11 0D 
17ff8     09 03 FF FB | 	byte	$18, $1b, $1c, $1d, $1c, $1b, $1a, $18, $17, $15, $11, $0d, $09, $03, $ff, $fb
17ffc     F9 F8 F9 FC 
18000     00 04 06 05 
18004     02 FD F6 F0 
18008     E9 E4 E1 E1 | 	byte	$f9, $f8, $f9, $fc, $00, $04, $06, $05, $02, $fd, $f6, $f0, $e9, $e4, $e1, $e1
1800c     E3 E7 EC F3 
18010     F8 FD 00 02 
18014     03 03 03 02 
18018     02 01 01 00 | 	byte	$e3, $e7, $ec, $f3, $f8, $fd, $00, $02, $03, $03, $03, $02, $02, $01, $01, $00
1801c     FE FA F7 F3 
18020     F0 EF EF F0 
18024     F3 F8 FD 04 
18028     0A 10 16 19 | 	byte	$fe, $fa, $f7, $f3, $f0, $ef, $ef, $f0, $f3, $f8, $fd, $04, $0a, $10, $16, $19
1802c     1C 1D 1D 1C 
18030     1B 19 17 15 
18034     14 11 0E 09 
18038     05 01 FD FA | 	byte	$1c, $1d, $1d, $1c, $1b, $19, $17, $15, $14, $11, $0e, $09, $05, $01, $fd, $fa
1803c     F9 FA FC 00 
18040     03 05 05 02 
18044     FD F6 EF E9 
18048     E4 E1 E0 E2 | 	byte	$f9, $fa, $fc, $00, $03, $05, $05, $02, $fd, $f6, $ef, $e9, $e4, $e1, $e0, $e2
1804c     E7 EC F2 F8 
18050     FC 00 02 03 
18054     03 03 02 02 
18058     01 01 00 FD | 	byte	$e7, $ec, $f2, $f8, $fc, $00, $02, $03, $03, $03, $02, $02, $01, $01, $00, $fd
1805c     FA F6 F2 EF 
18060     ED EE EF F2 
18064     F7 FD 04 0B 
18068     11 17 1A 1D | 	byte	$fa, $f6, $f2, $ef, $ed, $ee, $ef, $f2, $f7, $fd, $04, $0b, $11, $17, $1a, $1d
1806c     1E 1D 1C 1A 
18070     18 16 15 13 
18074     11 0E 0A 07 
18078     03 FF FD FC | 	byte	$1e, $1d, $1c, $1a, $18, $16, $15, $13, $11, $0e, $0a, $07, $03, $ff, $fd, $fc
1807c     FC FE 01 04 
18080     05 05 02 FD 
18084     F7 F0 E9 E4 
18088     E1 E0 E1 E5 | 	byte	$fc, $fe, $01, $04, $05, $05, $02, $fd, $f7, $f0, $e9, $e4, $e1, $e0, $e1, $e5
1808c     EA F1 F6 FB 
18090     FF 01 03 03 
18094     03 03 02 02 
18098     01 00 FD F8 | 	byte	$ea, $f1, $f6, $fb, $ff, $01, $03, $03, $03, $03, $02, $02, $01, $00, $fd, $f8
1809c     F4 F1 EE EC 
180a0     EC EE F2 F8 
180a4     FE 05 0C 12 
180a8     18 1C 1F 1F | 	byte	$f4, $f1, $ee, $ec, $ec, $ee, $f2, $f8, $fe, $05, $0c, $12, $18, $1c, $1f, $1f
180ac     1F 1D 1B 18 
180b0     15 13 11 0F 
180b4     0D 0A 07 04 
180b8     01 FF FE FE | 	byte	$1f, $1d, $1b, $18, $15, $13, $11, $0f, $0d, $0a, $07, $04, $01, $ff, $fe, $fe
180bc     FE 00 03 05 
180c0     05 02 FD F6 
180c4     EF E8 E3 E0 
180c8     DF E1 E4 E9 | 	byte	$fe, $00, $03, $05, $05, $02, $fd, $f6, $ef, $e8, $e3, $e0, $df, $e1, $e4, $e9
180cc     EF F5 FA FE 
180d0     01 03 04 04 
180d4     04 03 03 02 
180d8     FF FC F8 F3 | 	byte	$ef, $f5, $fa, $fe, $01, $03, $04, $04, $04, $03, $03, $02, $ff, $fc, $f8, $f3
180dc     EF EC EA EB 
180e0     ED F1 F7 FE 
180e4     06 0D 13 19 
180e8     1D 1F 1F 1F | 	byte	$ef, $ec, $ea, $eb, $ed, $f1, $f7, $fe, $06, $0d, $13, $19, $1d, $1f, $1f, $1f
180ec     1C 1A 17 15 
180f0     12 10 0E 0C 
180f4     0A 08 05 03 
180f8     02 01 00 01 | 	byte	$1c, $1a, $17, $15, $12, $10, $0e, $0c, $0a, $08, $05, $03, $02, $01, $00, $01
180fc     03 06 07 06 
18100     03 FD F6 EF 
18104     E8 E3 DF DE 
18108     DF E3 E7 ED | 	byte	$03, $06, $07, $06, $03, $fd, $f6, $ef, $e8, $e3, $df, $de, $df, $e3, $e7, $ed
1810c     F4 F9 FD 01 
18110     03 05 05 05 
18114     05 04 02 00 
18118     FB F6 F1 EC | 	byte	$f4, $f9, $fd, $01, $03, $05, $05, $05, $05, $04, $02, $00, $fb, $f6, $f1, $ec
1811c     EA E9 E9 EC 
18120     F1 F7 FE 06 
18124     0D 14 1A 1E 
18128     20 21 20 1E | 	byte	$ea, $e9, $e9, $ec, $f1, $f7, $fe, $06, $0d, $14, $1a, $1e, $20, $21, $20, $1e
1812c     1B 17 14 11 
18130     0F 0D 0B 0A 
18134     08 07 05 04 
18138     03 03 04 05 | 	byte	$1b, $17, $14, $11, $0f, $0d, $0b, $0a, $08, $07, $05, $04, $03, $03, $04, $05
1813c     07 07 07 03 
18140     FD F7 EF E7 
18144     E2 DD DC DD 
18148     E0 E6 EC F2 | 	byte	$07, $07, $07, $03, $fd, $f7, $ef, $e7, $e2, $dd, $dc, $dd, $e0, $e6, $ec, $f2
1814c     F8 FD 01 04 
18150     05 07 07 06 
18154     05 03 00 FA 
18158     F5 F0 EB E8 | 	byte	$f8, $fd, $01, $04, $05, $07, $07, $06, $05, $03, $00, $fa, $f5, $f0, $eb, $e8
1815c     E7 E8 EB F0 
18160     F7 FF 07 0F 
18164     15 1B 1F 21 
18168     21 20 1D 1A | 	byte	$e7, $e8, $eb, $f0, $f7, $ff, $07, $0f, $15, $1b, $1f, $21, $21, $20, $1d, $1a
1816c     17 13 10 0E 
18170     0B 09 08 08 
18174     07 06 06 05 
18178     05 06 07 09 | 	byte	$17, $13, $10, $0e, $0b, $09, $08, $08, $07, $06, $06, $05, $05, $06, $07, $09
1817c     09 08 04 FE 
18180     F7 EF E7 E1 
18184     DD DB DC DF 
18188     E4 EA F0 F7 | 	byte	$09, $08, $04, $fe, $f7, $ef, $e7, $e1, $dd, $db, $dc, $df, $e4, $ea, $f0, $f7
1818c     FD 01 05 07 
18190     08 08 08 06 
18194     04 FF FA F3 
18198     ED E9 E6 E5 | 	byte	$fd, $01, $05, $07, $08, $08, $08, $06, $04, $ff, $fa, $f3, $ed, $e9, $e6, $e5
1819c     E5 E9 EF F6 
181a0     FE 07 0F 16 
181a4     1C 20 22 23 
181a8     21 1E 1B 16 | 	byte	$e5, $e9, $ef, $f6, $fe, $07, $0f, $16, $1c, $20, $22, $23, $21, $1e, $1b, $16
181ac     13 0F 0D 0A 
181b0     09 07 07 07 
181b4     07 08 08 08 
181b8     09 0A 0B 0B | 	byte	$13, $0f, $0d, $0a, $09, $07, $07, $07, $07, $08, $08, $08, $09, $0a, $0b, $0b
181bc     09 05 FF F7 
181c0     EE E7 E0 DC 
181c4     DA DA DC E1 
181c8     E7 EE F4 FB | 	byte	$09, $05, $ff, $f7, $ee, $e7, $e0, $dc, $da, $da, $dc, $e1, $e7, $ee, $f4, $fb
181cc     01 05 08 0A 
181d0     0A 0A 08 05 
181d4     00 FA F2 ED 
181d8     E7 E4 E3 E5 | 	byte	$01, $05, $08, $0a, $0a, $0a, $08, $05, $00, $fa, $f2, $ed, $e7, $e4, $e3, $e5
181dc     E9 EF F7 FF 
181e0     08 11 18 1E 
181e4     22 24 23 22 
181e8     1E 1A 16 12 | 	byte	$e9, $ef, $f7, $ff, $08, $11, $18, $1e, $22, $24, $23, $22, $1e, $1a, $16, $12
181ec     0E 0B 09 07 
181f0     06 06 07 08 
181f4     09 0A 0A 0B 
181f8     0C 0D 0C 0B | 	byte	$0e, $0b, $09, $07, $06, $06, $07, $08, $09, $0a, $0a, $0b, $0c, $0d, $0c, $0b
181fc     06 00 F8 EF 
18200     E7 DF DA D8 
18204     D8 DA DF E5 
18208     EC F3 FB 01 | 	byte	$06, $00, $f8, $ef, $e7, $df, $da, $d8, $d8, $da, $df, $e5, $ec, $f3, $fb, $01
1820c     06 0A 0C 0C 
18210     0C 0A 06 00 
18214     F9 F1 EA E5 
18218     E2 E1 E3 E7 | 	byte	$06, $0a, $0c, $0c, $0c, $0a, $06, $00, $f9, $f1, $ea, $e5, $e2, $e1, $e3, $e7
1821c     EE F7 00 09 
18220     12 19 1F 22 
18224     24 24 22 1E 
18228     1A 16 11 0E | 	byte	$ee, $f7, $00, $09, $12, $19, $1f, $22, $24, $24, $22, $1e, $1a, $16, $11, $0e
1822c     0A 08 06 05 
18230     05 07 08 0A 
18234     0C 0D 0E 0F 
18238     0F 0F 0D 09 | 	byte	$0a, $08, $06, $05, $05, $07, $08, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0d, $09
1823c     02 F9 F0 E6 
18240     DF D9 D6 D6 
18244     D8 DC E2 E9 
18248     F1 FA 01 07 | 	byte	$02, $f9, $f0, $e6, $df, $d9, $d6, $d6, $d8, $dc, $e2, $e9, $f1, $fa, $01, $07
1824c     0B 0E 0E 0D 
18250     0B 06 FF F8 
18254     F0 E9 E3 DF 
18258     DF E1 E6 ED | 	byte	$0b, $0e, $0e, $0d, $0b, $06, $ff, $f8, $f0, $e9, $e3, $df, $df, $e1, $e6, $ed
1825c     F5 FF 09 12 
18260     1A 20 24 25 
18264     25 22 1F 1A 
18268     15 11 0D 09 | 	byte	$f5, $ff, $09, $12, $1a, $20, $24, $25, $25, $22, $1f, $1a, $15, $11, $0d, $09
1826c     07 05 04 04 
18270     05 07 0A 0C 
18274     0F 10 11 11 
18278     11 0F 0B 03 | 	byte	$07, $05, $04, $04, $05, $07, $0a, $0c, $0f, $10, $11, $11, $11, $0f, $0b, $03
1827c     F9 EF E6 DE 
18280     D8 D4 D3 D4 
18284     D9 DF E6 F0 
18288     F9 01 08 0C | 	byte	$f9, $ef, $e6, $de, $d8, $d4, $d3, $d4, $d9, $df, $e6, $f0, $f9, $01, $08, $0c
1828c     10 11 10 0D 
18290     08 00 F8 EF 
18294     E7 E0 DD DD 
18298     DF E5 EC F6 | 	byte	$10, $11, $10, $0d, $08, $00, $f8, $ef, $e7, $e0, $dd, $dd, $df, $e5, $ec, $f6
1829c     FF 0A 14 1B 
182a0     21 25 26 25 
182a4     23 1F 1A 15 
182a8     0F 0C 08 05 | 	byte	$ff, $0a, $14, $1b, $21, $25, $26, $25, $23, $1f, $1a, $15, $0f, $0c, $08, $05
182ac     03 02 03 05 
182b0     07 0A 0D 10 
182b4     12 14 14 14 
182b8     12 0D 06 FD | 	byte	$03, $02, $03, $05, $07, $0a, $0d, $10, $12, $14, $14, $14, $12, $0d, $06, $fd
182bc     F2 E7 DE D7 
182c0     D2 D1 D2 D5 
182c4     DC E4 EE F7 
182c8     01 08 0E 12 | 	byte	$f2, $e7, $de, $d7, $d2, $d1, $d2, $d5, $dc, $e4, $ee, $f7, $01, $08, $0e, $12
182cc     13 13 10 09 
182d0     02 F8 EE E6 
182d4     DE DB DA DD 
182d8     E3 EB F4 00 | 	byte	$13, $13, $10, $09, $02, $f8, $ee, $e6, $de, $db, $da, $dd, $e3, $eb, $f4, $00
182dc     0B 15 1D 23 
182e0     26 28 27 24 
182e4     20 1A 15 10 
182e8     0B 07 04 02 | 	byte	$0b, $15, $1d, $23, $26, $28, $27, $24, $20, $1a, $15, $10, $0b, $07, $04, $02
182ec     02 02 04 07 
182f0     0A 0E 12 15 
182f4     16 17 17 14 
182f8     0F 08 FE F3 | 	byte	$02, $02, $04, $07, $0a, $0e, $12, $15, $16, $17, $17, $14, $0f, $08, $fe, $f3
182fc     E8 DE D6 D0 
18300     CE CF D2 D8 
18304     E1 EC F6 01 
18308     09 10 14 16 | 	byte	$e8, $de, $d6, $d0, $ce, $cf, $d2, $d8, $e1, $ec, $f6, $01, $09, $10, $14, $16
1830c     15 12 0B 02 
18310     F7 ED E4 DD 
18314     D9 D8 DB E1 
18318     EA F5 00 0B | 	byte	$15, $12, $0b, $02, $f7, $ed, $e4, $dd, $d9, $d8, $db, $e1, $ea, $f5, $00, $0b
1831c     16 1F 24 28 
18320     29 28 25 20 
18324     1A 15 0F 0A 
18328     06 03 01 00 | 	byte	$16, $1f, $24, $28, $29, $28, $25, $20, $1a, $15, $0f, $0a, $06, $03, $01, $00
1832c     01 03 06 0A 
18330     0E 12 16 18 
18334     19 19 17 12 
18338     0B 01 F5 E9 | 	byte	$01, $03, $06, $0a, $0e, $12, $16, $18, $19, $19, $17, $12, $0b, $01, $f5, $e9
1833c     DF D6 CF CC 
18340     CC CF D6 DF 
18344     E9 F5 FF 09 
18348     12 16 19 18 | 	byte	$df, $d6, $cf, $cc, $cc, $cf, $d6, $df, $e9, $f5, $ff, $09, $12, $16, $19, $18
1834c     14 0C 03 F8 
18350     EC E2 DB D6 
18354     D6 D9 DF E9 
18358     F4 FF 0B 15 | 	byte	$14, $0c, $03, $f8, $ec, $e2, $db, $d6, $d6, $d9, $df, $e9, $f4, $ff, $0b, $15
1835c     1E 25 29 2A 
18360     28 25 20 1A 
18364     14 0F 0A 06 
18368     02 00 FF 00 | 	byte	$1e, $25, $29, $2a, $28, $25, $20, $1a, $14, $0f, $0a, $06, $02, $00, $ff, $00
1836c     02 05 09 0E 
18370     13 17 19 1B 
18374     1B 19 14 0D 
18378     03 F8 EB E0 | 	byte	$02, $05, $09, $0e, $13, $17, $19, $1b, $1b, $19, $14, $0d, $03, $f8, $eb, $e0
1837c     D5 CD CA C9 
18380     CB D2 DB E6 
18384     F3 FE 09 12 
18388     18 1A 1A 16 | 	byte	$d5, $cd, $ca, $c9, $cb, $d2, $db, $e6, $f3, $fe, $09, $12, $18, $1a, $1a, $16
1838c     0E 04 F7 EC 
18390     E1 D9 D5 D4 
18394     D7 DE E7 F3 
18398     00 0C 17 20 | 	byte	$0e, $04, $f7, $ec, $e1, $d9, $d5, $d4, $d7, $de, $e7, $f3, $00, $0c, $17, $20
1839c     27 2A 2B 29 
183a0     26 21 1A 14 
183a4     0E 09 05 01 
183a8     FF FE FF 01 | 	byte	$27, $2a, $2b, $29, $26, $21, $1a, $14, $0e, $09, $05, $01, $ff, $fe, $ff, $01
183ac     05 09 0E 13 
183b0     18 1B 1D 1D 
183b4     1C 17 10 06 
183b8     F9 EC E0 D5 | 	byte	$05, $09, $0e, $13, $18, $1b, $1d, $1d, $1c, $17, $10, $06, $f9, $ec, $e0, $d5
183bc     CD C7 C6 C9 
183c0     D0 D8 E4 F2 
183c4     FE 0A 13 19 
183c8     1D 1D 18 10 | 	byte	$cd, $c7, $c6, $c9, $d0, $d8, $e4, $f2, $fe, $0a, $13, $19, $1d, $1d, $18, $10
183cc     04 F7 EC E0 
183d0     D8 D3 D2 D5 
183d4     DD E7 F3 00 
183d8     0C 18 20 27 | 	byte	$04, $f7, $ec, $e0, $d8, $d3, $d2, $d5, $dd, $e7, $f3, $00, $0c, $18, $20, $27
183dc     2B 2B 2A 26 
183e0     21 1A 14 0D 
183e4     08 03 00 FE 
183e8     FD FE 00 04 | 	byte	$2b, $2b, $2a, $26, $21, $1a, $14, $0d, $08, $03, $00, $fe, $fd, $fe, $00, $04
183ec     09 0E 13 18 
183f0     1C 1F 1F 1E 
183f4     1A 13 09 FD 
183f8     EF E2 D5 CC | 	byte	$09, $0e, $13, $18, $1c, $1f, $1f, $1e, $1a, $13, $09, $fd, $ef, $e2, $d5, $cc
183fc     C6 C4 C6 CD 
18400     D6 E2 F0 FC 
18404     09 14 1B 1F 
18408     1F 1A 11 05 | 	byte	$c6, $c4, $c6, $cd, $d6, $e2, $f0, $fc, $09, $14, $1b, $1f, $1f, $1a, $11, $05
1840c     F7 EB DF D6 
18410     D1 D0 D4 DB 
18414     E6 F2 FF 0D 
18418     17 21 28 2C | 	byte	$f7, $eb, $df, $d6, $d1, $d0, $d4, $db, $e6, $f2, $ff, $0d, $17, $21, $28, $2c
1841c     2D 2B 26 21 
18420     1B 14 0E 08 
18424     03 FF FD FD 
18428     FE 00 04 09 | 	byte	$2d, $2b, $26, $21, $1b, $14, $0e, $08, $03, $ff, $fd, $fd, $fe, $00, $04, $09
1842c     0E 13 18 1C 
18430     1F 20 20 1C 
18434     15 0B FE F1 
18438     E3 D6 CB C4 | 	byte	$0e, $13, $18, $1c, $1f, $20, $20, $1c, $15, $0b, $fe, $f1, $e3, $d6, $cb, $c4
1843c     C1 C3 CA D3 
18440     DF EC FB 08 
18444     13 1B 20 20 
18448     1B 12 06 F9 | 	byte	$c1, $c3, $ca, $d3, $df, $ec, $fb, $08, $13, $1b, $20, $20, $1b, $12, $06, $f9
1844c     EA DF D5 D0 
18450     CF D3 DA E4 
18454     F1 FF 0C 18 
18458     21 28 2C 2D | 	byte	$ea, $df, $d5, $d0, $cf, $d3, $da, $e4, $f1, $ff, $0c, $18, $21, $28, $2c, $2d
1845c     2B 27 21 1A 
18460     14 0D 07 02 
18464     FE FC FC FC 
18468     FF 03 08 0D | 	byte	$2b, $27, $21, $1a, $14, $0d, $07, $02, $fe, $fc, $fc, $fc, $ff, $03, $08, $0d
1846c     13 18 1C 1F 
18470     21 21 1E 18 
18474     0F 02 F5 E5 
18478     D7 CC C4 C1 | 	byte	$13, $18, $1c, $1f, $21, $21, $1e, $18, $0f, $02, $f5, $e5, $d7, $cc, $c4, $c1
1847c     C2 C8 D1 DD 
18480     EC FA 08 13 
18484     1C 21 22 1D 
18488     14 08 F9 EC | 	byte	$c2, $c8, $d1, $dd, $ec, $fa, $08, $13, $1c, $21, $22, $1d, $14, $08, $f9, $ec
1848c     DE D6 D0 CE 
18490     D2 D9 E4 F0 
18494     FF 0B 18 21 
18498     28 2C 2D 2B | 	byte	$de, $d6, $d0, $ce, $d2, $d9, $e4, $f0, $ff, $0b, $18, $21, $28, $2c, $2d, $2b
1849c     27 21 1A 14 
184a0     0D 07 02 FE 
184a4     FC FB FC FF 
184a8     03 08 0D 13 | 	byte	$27, $21, $1a, $14, $0d, $07, $02, $fe, $fc, $fb, $fc, $ff, $03, $08, $0d, $13
184ac     18 1D 20 22 
184b0     22 20 1B 12 
184b4     05 F6 E7 D8 
184b8     CD C4 C0 C0 | 	byte	$18, $1d, $20, $22, $22, $20, $1b, $12, $05, $f6, $e7, $d8, $cd, $c4, $c0, $c0
184bc     C5 CF DB E9 
184c0     F7 06 12 1B 
184c4     21 22 1E 15 
184c8     09 FA EC DF | 	byte	$c5, $cf, $db, $e9, $f7, $06, $12, $1b, $21, $22, $1e, $15, $09, $fa, $ec, $df
184cc     D4 CF CE D1 
184d0     D8 E3 EF FE 
184d4     0C 18 22 29 
184d8     2D 2E 2C 28 | 	byte	$d4, $cf, $ce, $d1, $d8, $e3, $ef, $fe, $0c, $18, $22, $29, $2d, $2e, $2c, $28
184dc     22 1B 14 0E 
184e0     07 02 FE FC 
184e4     FB FC FE 02 
184e8     08 0D 13 18 | 	byte	$22, $1b, $14, $0e, $07, $02, $fe, $fc, $fb, $fc, $fe, $02, $08, $0d, $13, $18
184ec     1D 20 22 23 
184f0     21 1D 14 08 
184f4     F9 EA DB CD 
184f8     C5 BF BF C4 | 	byte	$1d, $20, $22, $23, $21, $1d, $14, $08, $f9, $ea, $db, $cd, $c5, $bf, $bf, $c4
184fc     CD D8 E7 F5 
18500     05 12 1C 22 
18504     23 1F 16 0A 
18508     FC ED DF D5 | 	byte	$cd, $d8, $e7, $f5, $05, $12, $1c, $22, $23, $1f, $16, $0a, $fc, $ed, $df, $d5
1850c     CF CD D0 D8 
18510     E2 F0 FD 0B 
18514     17 21 28 2D 
18518     2E 2B 26 20 | 	byte	$cf, $cd, $d0, $d8, $e2, $f0, $fd, $0b, $17, $21, $28, $2d, $2e, $2b, $26, $20
1851c     1A 13 0D 06 
18520     01 FD FB FA 
18524     FB FE 02 07 
18528     0D 12 17 1C | 	byte	$1a, $13, $0d, $06, $01, $fd, $fb, $fa, $fb, $fe, $02, $07, $0d, $12, $17, $1c
1852c     20 22 23 22 
18530     1E 17 0A FC 
18534     EB DB CF C5 
18538     BF BE C3 CA | 	byte	$20, $22, $23, $22, $1e, $17, $0a, $fc, $eb, $db, $cf, $c5, $bf, $be, $c3, $ca
1853c     D7 E5 F3 03 
18540     10 1B 22 23 
18544     1F 17 0A FB 
18548     EC E0 D5 CE | 	byte	$d7, $e5, $f3, $03, $10, $1b, $22, $23, $1f, $17, $0a, $fb, $ec, $e0, $d5, $ce
1854c     CD D0 D7 E2 
18550     EE FD 0A 17 
18554     21 29 2D 2E 
18558     2C 28 22 1B | 	byte	$cd, $d0, $d7, $e2, $ee, $fd, $0a, $17, $21, $29, $2d, $2e, $2c, $28, $22, $1b
1855c     15 0E 08 02 
18560     FE FB FA FB 
18564     FD 02 06 0C 
18568     12 17 1C 20 | 	byte	$15, $0e, $08, $02, $fe, $fb, $fa, $fb, $fd, $02, $06, $0c, $12, $17, $1c, $20
1856c     22 23 23 1F 
18570     17 0D FD EE 
18574     DE D1 C6 BF 
18578     BE C1 CA D5 | 	byte	$22, $23, $23, $1f, $17, $0d, $fd, $ee, $de, $d1, $c6, $bf, $be, $c1, $ca, $d5
1857c     E4 F2 01 0E 
18580     1A 21 23 1F 
18584     17 0B FC EE 
18588     E0 D5 CF CD | 	byte	$e4, $f2, $01, $0e, $1a, $21, $23, $1f, $17, $0b, $fc, $ee, $e0, $d5, $cf, $cd
1858c     D0 D7 E2 EE 
18590     FC 09 16 21 
18594     28 2D 2D 2C 
18598     27 22 1B 14 | 	byte	$d0, $d7, $e2, $ee, $fc, $09, $16, $21, $28, $2d, $2d, $2c, $27, $22, $1b, $14
1859c     0D 07 02 FD 
185a0     FA F9 FA FD 
185a4     01 06 0B 12 
185a8     17 1C 20 22 | 	byte	$0d, $07, $02, $fd, $fa, $f9, $fa, $fd, $01, $06, $0b, $12, $17, $1c, $20, $22
185ac     23 23 20 19 
185b0     0F 00 F1 E1 
185b4     D2 C8 C1 BF 
185b8     C2 CA D4 E2 | 	byte	$23, $23, $20, $19, $0f, $00, $f1, $e1, $d2, $c8, $c1, $bf, $c2, $ca, $d4, $e2
185bc     F2 00 0E 19 
185c0     20 22 1F 17 
185c4     0B FC ED E0 
185c8     D6 D0 CD D0 | 	byte	$f2, $00, $0e, $19, $20, $22, $1f, $17, $0b, $fc, $ed, $e0, $d6, $d0, $cd, $d0
185cc     D7 E1 ED FC 
185d0     0A 16 20 27 
185d4     2C 2D 2B 27 
185d8     22 1B 14 0E | 	byte	$d7, $e1, $ed, $fc, $0a, $16, $20, $27, $2c, $2d, $2b, $27, $22, $1b, $14, $0e
185dc     07 02 FD FB 
185e0     FA FB FD 01 
185e4     06 0C 12 17 
185e8     1C 1F 22 23 | 	byte	$07, $02, $fd, $fb, $fa, $fb, $fd, $01, $06, $0c, $12, $17, $1c, $1f, $22, $23
185ec     23 20 19 10 
185f0     02 F3 E2 D4 
185f4     C9 C2 BF C2 
185f8     C8 D3 DF EF | 	byte	$23, $20, $19, $10, $02, $f3, $e2, $d4, $c9, $c2, $bf, $c2, $c8, $d3, $df, $ef
185fc     FE 0B 17 1E 
18600     21 1E 16 0A 
18604     FD EE E2 D7 
18608     D1 CE D1 D8 | 	byte	$fe, $0b, $17, $1e, $21, $1e, $16, $0a, $fd, $ee, $e2, $d7, $d1, $ce, $d1, $d8
1860c     E1 EE FB 0A 
18610     15 1F 27 2B 
18614     2C 2A 27 21 
18618     1A 14 0D 07 | 	byte	$e1, $ee, $fb, $0a, $15, $1f, $27, $2b, $2c, $2a, $27, $21, $1a, $14, $0d, $07
1861c     02 FD FB FA 
18620     FA FD 01 06 
18624     0B 11 16 1B 
18628     1F 21 22 22 | 	byte	$02, $fd, $fb, $fa, $fa, $fd, $01, $06, $0b, $11, $16, $1b, $1f, $21, $22, $22
1862c     1F 1A 10 04 
18630     F4 E6 D7 CC 
18634     C4 C1 C3 C8 
18638     D3 E0 ED FD | 	byte	$1f, $1a, $10, $04, $f4, $e6, $d7, $cc, $c4, $c1, $c3, $c8, $d3, $e0, $ed, $fd
1863c     0A 15 1D 20 
18640     1D 16 0B FC 
18644     F0 E2 D8 D2 
18648     D0 D2 D9 E2 | 	byte	$0a, $15, $1d, $20, $1d, $16, $0b, $fc, $f0, $e2, $d8, $d2, $d0, $d2, $d9, $e2
1864c     EE FC 08 15 
18650     1F 26 2A 2B 
18654     2A 26 21 1A 
18658     14 0D 07 02 | 	byte	$ee, $fc, $08, $15, $1f, $26, $2a, $2b, $2a, $26, $21, $1a, $14, $0d, $07, $02
1865c     FE FB FA FB 
18660     FD 01 06 0B 
18664     11 16 1B 1F 
18668     21 23 22 1F | 	byte	$fe, $fb, $fa, $fb, $fd, $01, $06, $0b, $11, $16, $1b, $1f, $21, $23, $22, $1f
1866c     1A 11 04 F7 
18670     E8 D9 CE C6 
18674     C3 C4 C9 D2 
18678     DF EC FA 08 | 	byte	$1a, $11, $04, $f7, $e8, $d9, $ce, $c6, $c3, $c4, $c9, $d2, $df, $ec, $fa, $08
1867c     13 1B 1E 1B 
18680     14 0A FC F0 
18684     E3 D9 D3 D1 
18688     D3 D9 E3 EE | 	byte	$13, $1b, $1e, $1b, $14, $0a, $fc, $f0, $e3, $d9, $d3, $d1, $d3, $d9, $e3, $ee
1868c     FC 09 14 1E 
18690     25 2A 2B 29 
18694     26 21 1A 14 
18698     0E 08 03 FE | 	byte	$fc, $09, $14, $1e, $25, $2a, $2b, $29, $26, $21, $1a, $14, $0e, $08, $03, $fe
1869c     FB FA FB FD 
186a0     01 06 0A 11 
186a4     16 1A 1E 20 
186a8     21 21 1E 1A | 	byte	$fb, $fa, $fb, $fd, $01, $06, $0a, $11, $16, $1a, $1e, $20, $21, $21, $1e, $1a
186ac     11 06 F8 E9 
186b0     DD D1 C9 C5 
186b4     C5 CA D3 DE 
186b8     EB F8 06 11 | 	byte	$11, $06, $f8, $e9, $dd, $d1, $c9, $c5, $c5, $ca, $d3, $de, $eb, $f8, $06, $11
186bc     18 1C 1A 13 
186c0     09 FC EF E4 
186c4     DA D4 D3 D5 
186c8     DB E4 F0 FC | 	byte	$18, $1c, $1a, $13, $09, $fc, $ef, $e4, $da, $d4, $d3, $d5, $db, $e4, $f0, $fc
186cc     08 13 1D 24 
186d0     28 29 28 25 
186d4     20 1A 14 0E 
186d8     07 02 FE FB | 	byte	$08, $13, $1d, $24, $28, $29, $28, $25, $20, $1a, $14, $0e, $07, $02, $fe, $fb
186dc     FA FB FD 01 
186e0     05 0B 10 15 
186e4     1A 1E 20 22 
186e8     20 1E 19 11 | 	byte	$fa, $fb, $fd, $01, $05, $0b, $10, $15, $1a, $1e, $20, $22, $20, $1e, $19, $11
186ec     06 F9 EC DE 
186f0     D4 CB C7 C7 
186f4     CB D3 DD EA 
186f8     F7 04 0F 16 | 	byte	$06, $f9, $ec, $de, $d4, $cb, $c7, $c7, $cb, $d3, $dd, $ea, $f7, $04, $0f, $16
186fc     19 17 11 07 
18700     FC F0 E5 DB 
18704     D5 D4 D6 DB 
18708     E5 EF FB 08 | 	byte	$19, $17, $11, $07, $fc, $f0, $e5, $db, $d5, $d4, $d6, $db, $e5, $ef, $fb, $08
1870c     12 1C 22 27 
18710     28 27 24 20 
18714     1A 15 0E 08 
18718     03 FF FD FB | 	byte	$12, $1c, $22, $27, $28, $27, $24, $20, $1a, $15, $0e, $08, $03, $ff, $fd, $fb
1871c     FB FD 01 06 
18720     0B 10 15 1A 
18724     1D 20 20 20 
18728     1D 18 11 07 | 	byte	$fb, $fd, $01, $06, $0b, $10, $15, $1a, $1d, $20, $20, $20, $1d, $18, $11, $07
1872c     FC EE E1 D7 
18730     CE CA C9 CD 
18734     D3 DD E8 F5 
18738     02 0C 13 17 | 	byte	$fc, $ee, $e1, $d7, $ce, $ca, $c9, $cd, $d3, $dd, $e8, $f5, $02, $0c, $13, $17
1873c     15 0F 07 FB 
18740     F0 E6 DD D8 
18744     D6 D8 DE E7 
18748     F0 FC 08 12 | 	byte	$15, $0f, $07, $fb, $f0, $e6, $dd, $d8, $d6, $d8, $de, $e7, $f0, $fc, $08, $12
1874c     1B 21 26 27 
18750     26 23 1F 1A 
18754     14 0E 08 04 
18758     FF FD FC FC | 	byte	$1b, $21, $26, $27, $26, $23, $1f, $1a, $14, $0e, $08, $04, $ff, $fd, $fc, $fc
1875c     FE 01 06 0A 
18760     10 14 19 1C 
18764     1F 20 1F 1C 
18768     17 11 08 FD | 	byte	$fe, $01, $06, $0a, $10, $14, $19, $1c, $1f, $20, $1f, $1c, $17, $11, $08, $fd
1876c     F1 E4 DA D1 
18770     CC CB CE D4 
18774     DD E8 F4 00 
18778     0A 11 14 13 | 	byte	$f1, $e4, $da, $d1, $cc, $cb, $ce, $d4, $dd, $e8, $f4, $00, $0a, $11, $14, $13
1877c     0E 06 FB F0 
18780     E7 DE DA D8 
18784     DA DF E7 F0 
18788     FC 06 11 19 | 	byte	$0e, $06, $fb, $f0, $e7, $de, $da, $d8, $da, $df, $e7, $f0, $fc, $06, $11, $19
1878c     20 24 25 25 
18790     22 1D 19 13 
18794     0E 09 04 00 
18798     FD FC FC FE | 	byte	$20, $24, $25, $25, $22, $1d, $19, $13, $0e, $09, $04, $00, $fd, $fc, $fc, $fe
1879c     01 05 0A 0F 
187a0     15 19 1C 1E 
187a4     1F 1E 1B 17 
187a8     11 08 FD F2 | 	byte	$01, $05, $0a, $0f, $15, $19, $1c, $1e, $1f, $1e, $1b, $17, $11, $08, $fd, $f2
187ac     E7 DC D4 CF 
187b0     CD D0 D5 DD 
187b4     E7 F3 FD 07 
187b8     0D 10 10 0B | 	byte	$e7, $dc, $d4, $cf, $cd, $d0, $d5, $dd, $e7, $f3, $fd, $07, $0d, $10, $10, $0b
187bc     03 F9 F0 E6 
187c0     DF DB DA DC 
187c4     E1 E9 F2 FD 
187c8     06 11 18 1F | 	byte	$03, $f9, $f0, $e6, $df, $db, $da, $dc, $e1, $e9, $f2, $fd, $06, $11, $18, $1f
187cc     22 24 23 21 
187d0     1D 18 13 0E 
187d4     09 04 00 FE 
187d8     FD FD FE 01 | 	byte	$22, $24, $23, $21, $1d, $18, $13, $0e, $09, $04, $00, $fe, $fd, $fd, $fe, $01
187dc     05 0A 0F 14 
187e0     18 1B 1D 1E 
187e4     1D 1A 16 10 
187e8     08 FE F4 EA | 	byte	$05, $0a, $0f, $14, $18, $1b, $1d, $1e, $1d, $1a, $16, $10, $08, $fe, $f4, $ea
187ec     DF D8 D2 D0 
187f0     D2 D6 DE E7 
187f4     F1 FC 04 0C 
187f8     0F 0E 09 02 | 	byte	$df, $d8, $d2, $d0, $d2, $d6, $de, $e7, $f1, $fc, $04, $0c, $0f, $0e, $09, $02
187fc     F9 F1 E8 E1 
18800     DD DC DE E3 
18804     EA F3 FD 08 
18808     10 18 1E 21 | 	byte	$f9, $f1, $e8, $e1, $dd, $dc, $de, $e3, $ea, $f3, $fd, $08, $10, $18, $1e, $21
1880c     23 22 20 1C 
18810     18 13 0E 09 
18814     05 00 FE FD 
18818     FD FF 01 06 | 	byte	$23, $22, $20, $1c, $18, $13, $0e, $09, $05, $00, $fe, $fd, $fd, $ff, $01, $06
1881c     0A 0F 13 18 
18820     1B 1D 1D 1B 
18824     19 15 10 09 
18828     00 F7 EC E3 | 	byte	$0a, $0f, $13, $18, $1b, $1d, $1d, $1b, $19, $15, $10, $09, $00, $f7, $ec, $e3
1882c     DA D5 D3 D4 
18830     D7 DD E6 EF 
18834     FA 02 08 0B 
18838     0A 06 00 F8 | 	byte	$da, $d5, $d3, $d4, $d7, $dd, $e6, $ef, $fa, $02, $08, $0b, $0a, $06, $00, $f8
1883c     F0 E8 E2 DF 
18840     DE E0 E4 EB 
18844     F4 FD 07 0F 
18848     17 1C 20 21 | 	byte	$f0, $e8, $e2, $df, $de, $e0, $e4, $eb, $f4, $fd, $07, $0f, $17, $1c, $20, $21
1884c     21 1F 1B 17 
18850     13 0E 09 05 
18854     01 FF FE FE 
18858     FF 02 06 0A | 	byte	$21, $1f, $1b, $17, $13, $0e, $09, $05, $01, $ff, $fe, $fe, $ff, $02, $06, $0a
1885c     0F 14 17 1A 
18860     1C 1C 1A 18 
18864     14 10 09 01 
18868     F8 EE E6 DE | 	byte	$0f, $14, $17, $1a, $1c, $1c, $1a, $18, $14, $10, $09, $01, $f8, $ee, $e6, $de
1886c     D8 D5 D5 D8 
18870     DE E6 EE F7 
18874     00 06 08 08 
18878     04 FE F7 F0 | 	byte	$d8, $d5, $d5, $d8, $de, $e6, $ee, $f7, $00, $06, $08, $08, $04, $fe, $f7, $f0
1887c     E9 E3 E0 E0 
18880     E2 E7 ED F6 
18884     FE 07 0F 16 
18888     1B 1E 20 1F | 	byte	$e9, $e3, $e0, $e0, $e2, $e7, $ed, $f6, $fe, $07, $0f, $16, $1b, $1e, $20, $1f
1888c     1E 1B 17 12 
18890     0E 09 05 02 
18894     00 FF FF FF 
18898     02 05 09 0E | 	byte	$1e, $1b, $17, $12, $0e, $09, $05, $02, $00, $ff, $ff, $ff, $02, $05, $09, $0e
1889c     12 17 19 1A 
188a0     1A 19 16 14 
188a4     10 0A 03 FA 
188a8     F1 E8 E0 DB | 	byte	$12, $17, $19, $1a, $1a, $19, $16, $14, $10, $0a, $03, $fa, $f1, $e8, $e0, $db
188ac     D8 D8 DA DE 
188b0     E5 ED F5 FD 
188b4     03 05 04 02 
188b8     FC F6 EF E9 | 	byte	$d8, $d8, $da, $de, $e5, $ed, $f5, $fd, $03, $05, $04, $02, $fc, $f6, $ef, $e9
188bc     E5 E2 E1 E4 
188c0     E8 EE F6 FE 
188c4     07 0E 15 19 
188c8     1D 1E 1E 1C | 	byte	$e5, $e2, $e1, $e4, $e8, $ee, $f6, $fe, $07, $0e, $15, $19, $1d, $1e, $1e, $1c
188cc     1A 16 12 0E 
188d0     0A 06 03 00 
188d4     FF 00 01 03 
188d8     06 0B 0F 13 | 	byte	$1a, $16, $12, $0e, $0a, $06, $03, $00, $ff, $00, $01, $03, $06, $0b, $0f, $13
188dc     16 19 1A 19 
188e0     18 16 13 0F 
188e4     0B 04 FC F4 
188e8     EB E4 DE DB | 	byte	$16, $19, $1a, $19, $18, $16, $13, $0f, $0b, $04, $fc, $f4, $eb, $e4, $de, $db
188ec     DA DB DF E5 
188f0     EC F3 FB 00 
188f4     02 01 FF FA 
188f8     F5 EF E9 E6 | 	byte	$da, $db, $df, $e5, $ec, $f3, $fb, $00, $02, $01, $ff, $fa, $f5, $ef, $e9, $e6
188fc     E3 E4 E6 EB 
18900     F0 F8 FF 07 
18904     0F 14 19 1B 
18908     1D 1C 1B 19 | 	byte	$e3, $e4, $e6, $eb, $f0, $f8, $ff, $07, $0f, $14, $19, $1b, $1d, $1c, $1b, $19
1890c     15 12 0E 0A 
18910     06 03 01 00 
18914     00 01 03 07 
18918     0A 0E 12 16 | 	byte	$15, $12, $0e, $0a, $06, $03, $01, $00, $00, $01, $03, $07, $0a, $0e, $12, $16
1891c     17 18 18 16 
18920     14 12 0E 0B 
18924     05 FE F7 EE 
18928     E7 E1 DD DC | 	byte	$17, $18, $18, $16, $14, $12, $0e, $0b, $05, $fe, $f7, $ee, $e7, $e1, $dd, $dc
1892c     DC DF E4 EB 
18930     F3 F9 FD 00 
18934     FF FD F9 F3 
18938     EE EA E7 E5 | 	byte	$dc, $df, $e4, $eb, $f3, $f9, $fd, $00, $ff, $fd, $f9, $f3, $ee, $ea, $e7, $e5
1893c     E6 E8 EC F2 
18940     F9 FF 07 0D 
18944     13 17 1A 1B 
18948     1B 19 18 15 | 	byte	$e6, $e8, $ec, $f2, $f9, $ff, $07, $0d, $13, $17, $1a, $1b, $1b, $19, $18, $15
1894c     12 0E 0A 07 
18950     03 01 00 00 
18954     02 04 07 0A 
18958     0E 12 15 17 | 	byte	$12, $0e, $0a, $07, $03, $01, $00, $00, $02, $04, $07, $0a, $0e, $12, $15, $17
1895c     17 17 16 13 
18960     11 0E 0B 07 
18964     01 F9 F1 EA 
18968     E3 DF DD DD | 	byte	$17, $17, $16, $13, $11, $0e, $0b, $07, $01, $f9, $f1, $ea, $e3, $df, $dd, $dd
1896c     E0 E4 EA F0 
18970     F7 FC FE FE 
18974     FC F8 F4 EE 
18978     EA E7 E5 E5 | 	byte	$e0, $e4, $ea, $f0, $f7, $fc, $fe, $fe, $fc, $f8, $f4, $ee, $ea, $e7, $e5, $e5
1897c     E7 EB F1 F7 
18980     FE 05 0C 12 
18984     17 1A 1B 1B 
18988     1A 18 15 12 | 	byte	$e7, $eb, $f1, $f7, $fe, $05, $0c, $12, $17, $1a, $1b, $1b, $1a, $18, $15, $12
1898c     0E 0A 06 03 
18990     01 FF 00 01 
18994     03 06 0A 0E 
18998     12 15 17 17 | 	byte	$0e, $0a, $06, $03, $01, $ff, $00, $01, $03, $06, $0a, $0e, $12, $15, $17, $17
1899c     17 15 13 11 
189a0     0E 0B 07 01 
189a4     FA F2 EB E4 
189a8     E0 DE DD E0 | 	byte	$17, $15, $13, $11, $0e, $0b, $07, $01, $fa, $f2, $eb, $e4, $e0, $de, $dd, $e0
189ac     E4 EA F0 F8 
189b0     FD 00 01 FF 
189b4     FB F6 F1 EC 
189b8     E8 E5 E5 E6 | 	byte	$e4, $ea, $f0, $f8, $fd, $00, $01, $ff, $fb, $f6, $f1, $ec, $e8, $e5, $e5, $e6
189bc     E9 EE F3 FB 
189c0     03 09 10 14 
189c4     18 1B 1B 1B 
189c8     19 17 13 0F | 	byte	$e9, $ee, $f3, $fb, $03, $09, $10, $14, $18, $1b, $1b, $1b, $19, $17, $13, $0f
189cc     0B 06 02 00 
189d0     FE FE FF 02 
189d4     05 09 0E 12 
189d8     15 18 19 18 | 	byte	$0b, $06, $02, $00, $fe, $fe, $ff, $02, $05, $09, $0e, $12, $15, $18, $19, $18
189dc     17 15 12 0F 
189e0     0C 08 03 FB 
189e4     F4 EC E5 E1 
189e8     DE DE E0 E4 | 	byte	$17, $15, $12, $0f, $0c, $08, $03, $fb, $f4, $ec, $e5, $e1, $de, $de, $e0, $e4
189ec     E9 F0 F7 FD 
189f0     02 03 01 FE 
189f4     F9 F3 EE E9 
189f8     E5 E3 E4 E6 | 	byte	$e9, $f0, $f7, $fd, $02, $03, $01, $fe, $f9, $f3, $ee, $e9, $e5, $e3, $e4, $e6
189fc     EA F1 F7 FF 
18a00     06 0D 13 17 
18a04     1A 1B 1B 1A 
18a08     18 14 10 0B | 	byte	$ea, $f1, $f7, $ff, $06, $0d, $13, $17, $1a, $1b, $1b, $1a, $18, $14, $10, $0b
18a0c     06 02 FF FE 
18a10     FD FE 01 05 
18a14     09 0E 12 16 
18a18     18 1A 19 18 | 	byte	$06, $02, $ff, $fe, $fd, $fe, $01, $05, $09, $0e, $12, $16, $18, $1a, $19, $18
18a1c     16 13 10 0D 
18a20     09 03 FC F4 
18a24     ED E6 E1 DE 
18a28     DE E0 E3 E9 | 	byte	$16, $13, $10, $0d, $09, $03, $fc, $f4, $ed, $e6, $e1, $de, $de, $e0, $e3, $e9
18a2c     F0 F7 FE 02 
18a30     05 04 01 FC 
18a34     F6 EF EA E5 
18a38     E3 E3 E4 E8 | 	byte	$f0, $f7, $fe, $02, $05, $04, $01, $fc, $f6, $ef, $ea, $e5, $e3, $e3, $e4, $e8
18a3c     EE F4 FC 04 
18a40     0B 11 16 1A 
18a44     1B 1C 1B 18 
18a48     14 10 0B 06 | 	byte	$ee, $f4, $fc, $04, $0b, $11, $16, $1a, $1b, $1c, $1b, $18, $14, $10, $0b, $06
18a4c     02 FE FC FC 
18a50     FD 00 04 08 
18a54     0D 12 15 18 
18a58     1A 1A 18 16 | 	byte	$02, $fe, $fc, $fc, $fd, $00, $04, $08, $0d, $12, $15, $18, $1a, $1a, $18, $16
18a5c     13 10 0D 09 
18a60     04 FD F6 EF 
18a64     E8 E2 DE DE 
18a68     DF E3 E8 EF | 	byte	$13, $10, $0d, $09, $04, $fd, $f6, $ef, $e8, $e2, $de, $de, $df, $e3, $e8, $ef
18a6c     F6 FD 03 06 
18a70     06 03 FF F8 
18a74     F2 EB E6 E3 
18a78     E1 E3 E6 EB | 	byte	$f6, $fd, $03, $06, $06, $03, $ff, $f8, $f2, $eb, $e6, $e3, $e1, $e3, $e6, $eb
18a7c     F1 F9 00 08 
18a80     0E 14 18 1B 
18a84     1B 1A 18 15 
18a88     10 0B 06 01 | 	byte	$f1, $f9, $00, $08, $0e, $14, $18, $1b, $1b, $1a, $18, $15, $10, $0b, $06, $01
18a8c     FE FC FB FD 
18a90     FF 03 08 0D 
18a94     12 16 19 1B 
18a98     1B 19 17 14 | 	byte	$fe, $fc, $fb, $fd, $ff, $03, $08, $0d, $12, $16, $19, $1b, $1b, $19, $17, $14
18a9c     11 0D 09 05 
18aa0     FE F7 EF E8 
18aa4     E3 DF DE E0 
18aa8     E3 E8 EF F6 | 	byte	$11, $0d, $09, $05, $fe, $f7, $ef, $e8, $e3, $df, $de, $e0, $e3, $e8, $ef, $f6
18aac     FD 03 07 08 
18ab0     07 02 FB F4 
18ab4     00 00 00 00 
18ab8     03 02 01 00 | 	byte	$fd, $03, $07, $08, $07, $02, $fb, $f4, $00, $00, $00, $00, $03, $02, $01, $00
18abc     00 FE FE FD 
18ac0     FC FB FA FA 
18ac4     F9 FA FA FA 
18ac8     FB FC FD FD | 	byte	$00, $fe, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $fa, $fa, $fa, $fb, $fc, $fd, $fd
18acc     FE FE FE FF 
18ad0     00 00 01 02 
18ad4     02 02 00 00 
18ad8     FE FD FC FB | 	byte	$fe, $fe, $fe, $ff, $00, $00, $01, $02, $02, $02, $00, $00, $fe, $fd, $fc, $fb
18adc     FA FA FA F9 
18ae0     F9 F8 F9 F9 
18ae4     F9 FA FB FC 
18ae8     FE FF FF 00 | 	byte	$fa, $fa, $fa, $f9, $f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fe, $ff, $ff, $00
18aec     00 00 00 00 
18af0     01 00 00 FF 
18af4     FF FD FB FA 
18af8     F9 F8 F8 F8 | 	byte	$00, $00, $00, $00, $01, $00, $00, $ff, $ff, $fd, $fb, $fa, $f9, $f8, $f8, $f8
18afc     F8 F8 F9 F9 
18b00     F9 FA FA FA 
18b04     FB FC FE FE 
18b08     FF FF FF FF | 	byte	$f8, $f8, $f9, $f9, $f9, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $ff, $ff, $ff, $ff
18b0c     FE FE FE FF 
18b10     FF 00 00 00 
18b14     FF FF FF FF 
18b18     FF 00 01 02 | 	byte	$fe, $fe, $fe, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $01, $02
18b1c     03 04 05 04 
18b20     03 03 02 02 
18b24     02 03 03 03 
18b28     03 03 03 03 | 	byte	$03, $04, $05, $04, $03, $03, $02, $02, $02, $03, $03, $03, $03, $03, $03, $03
18b2c     03 04 05 07 
18b30     08 09 09 0A 
18b34     0A 09 08 08 
18b38     07 06 05 03 | 	byte	$03, $04, $05, $07, $08, $09, $09, $0a, $0a, $09, $08, $08, $07, $06, $05, $03
18b3c     01 FE F9 F5 
18b40     EF ED EC EF 
18b44     F5 FB 03 09 
18b48     11 17 1B 1F | 	byte	$01, $fe, $f9, $f5, $ef, $ed, $ec, $ef, $f5, $fb, $03, $09, $11, $17, $1b, $1f
18b4c     21 24 25 24 
18b50     20 1C 15 0E 
18b54     04 FC F2 EB 
18b58     E8 E8 EA EB | 	byte	$21, $24, $25, $24, $20, $1c, $15, $0e, $04, $fc, $f2, $eb, $e8, $e8, $ea, $eb
18b5c     EC EC EB EA 
18b60     EC F1 F8 03 
18b64     0E 19 21 27 
18b68     2A 2B 29 27 | 	byte	$ec, $ec, $eb, $ea, $ec, $f1, $f8, $03, $0e, $19, $21, $27, $2a, $2b, $29, $27
18b6c     25 24 21 1C 
18b70     17 10 04 F4 
18b74     E6 DB D7 D9 
18b78     DE E7 E9 E4 | 	byte	$25, $24, $21, $1c, $17, $10, $04, $f4, $e6, $db, $d7, $d9, $de, $e7, $e9, $e4
18b7c     DC D8 DA E2 
18b80     EE 00 10 20 
18b84     2C 34 3A 3A 
18b88     36 32 31 33 | 	byte	$dc, $d8, $da, $e2, $ee, $00, $10, $20, $2c, $34, $3a, $3a, $36, $32, $31, $33
18b8c     34 30 27 1C 
18b90     0E F8 DC C5 
18b94     C1 C6 CE D6 
18b98     E0 E4 DA CB | 	byte	$34, $30, $27, $1c, $0e, $f8, $dc, $c5, $c1, $c6, $ce, $d6, $e0, $e4, $da, $cb
18b9c     CA D3 E0 EF 
18ba0     01 16 28 36 
18ba4     40 46 44 3B 
18ba8     35 34 3A 3B | 	byte	$ca, $d3, $e0, $ef, $01, $16, $28, $36, $40, $46, $44, $3b, $35, $34, $3a, $3b
18bac     36 2B 1B 09 
18bb0     F2 C6 B0 B9 
18bb4     C3 C4 C8 D6 
18bb8     E1 CC B6 C5 | 	byte	$36, $2b, $1b, $09, $f2, $c6, $b0, $b9, $c3, $c4, $c8, $d6, $e1, $cc, $b6, $c5
18bbc     D4 DA EA 02 
18bc0     1A 31 3C 47 
18bc4     4D 4A 3E 36 
18bc8     3E 48 44 3F | 	byte	$d4, $da, $ea, $02, $1a, $31, $3c, $47, $4d, $4a, $3e, $36, $3e, $48, $44, $3f
18bcc     33 1F 08 E8 
18bd0     BD AC B4 B9 
18bd4     BA C2 D0 DA 
18bd8     D6 AC B6 CC | 	byte	$33, $1f, $08, $e8, $bd, $ac, $b4, $b9, $ba, $c2, $d0, $da, $d6, $ac, $b6, $cc
18bdc     D5 E4 F9 0B 
18be0     2E 38 47 51 
18be4     4D 3B 37 41 
18be8     4B 4B 48 40 | 	byte	$d5, $e4, $f9, $0b, $2e, $38, $47, $51, $4d, $3b, $37, $41, $4b, $4b, $48, $40
18bec     2A 11 EB CA 
18bf0     A5 AC B4 B5 
18bf4     B5 C3 CD D5 
18bf8     B2 A7 C4 CD | 	byte	$2a, $11, $eb, $ca, $a5, $ac, $b4, $b5, $b5, $c3, $cd, $d5, $b2, $a7, $c4, $cd
18bfc     DB ED 00 19 
18c00     36 3F 55 54 
18c04     41 3A 44 54 
18c08     57 53 4E 3F | 	byte	$db, $ed, $00, $19, $36, $3f, $55, $54, $41, $3a, $44, $54, $57, $53, $4e, $3f
18c0c     20 FC DD AF 
18c10     A9 AE B0 AC 
18c14     B9 C4 CC CD 
18c18     9E B3 C5 CF | 	byte	$20, $fc, $dd, $af, $a9, $ae, $b0, $ac, $b9, $c4, $cc, $cd, $9e, $b3, $c5, $cf
18c1c     E0 F1 07 1E 
18c20     39 47 57 46 
18c24     3A 46 51 5C 
18c28     5C 5A 52 3D | 	byte	$e0, $f1, $07, $1e, $39, $47, $57, $46, $3a, $46, $51, $5c, $5c, $5a, $52, $3d
18c2c     12 EB CD A7 
18c30     AA AC AA AD 
18c34     B9 C4 CC B3 
18c38     A0 B7 C4 D5 | 	byte	$12, $eb, $cd, $a7, $aa, $ac, $aa, $ad, $b9, $c4, $cc, $b3, $a0, $b7, $c4, $d5
18c3c     E3 F4 0E 20 
18c40     3F 50 50 3B 
18c44     43 50 5F 65 
18c48     66 61 53 30 | 	byte	$e3, $f4, $0e, $20, $3f, $50, $50, $3b, $43, $50, $5f, $65, $66, $61, $53, $30
18c4c     03 E9 B3 AB 
18c50     AD AB A7 B0 
18c54     BC C6 CD A3 
18c58     A9 BD C9 D8 | 	byte	$03, $e9, $b3, $ab, $ad, $ab, $a7, $b0, $bc, $c6, $cd, $a3, $a9, $bd, $c9, $d8
18c5c     E6 F5 0D 22 
18c60     42 52 3C 3B 
18c64     49 58 67 6C 
18c68     6C 68 55 23 | 	byte	$e6, $f5, $0d, $22, $42, $52, $3c, $3b, $49, $58, $67, $6c, $6c, $68, $55, $23
18c6c     FD DF B3 B0 
18c70     AF A9 AB B6 
18c74     C2 CD C9 A2 
18c78     AC BE CF D7 | 	byte	$fd, $df, $b3, $b0, $af, $a9, $ab, $b6, $c2, $cd, $c9, $a2, $ac, $be, $cf, $d7
18c7c     E4 F7 06 26 
18c80     41 45 31 40 
18c84     50 62 6F 74 
18c88     73 6E 4A 1C | 	byte	$e4, $f7, $06, $26, $41, $45, $31, $40, $50, $62, $6f, $74, $73, $6e, $4a, $1c
18c8c     01 CB B9 BA 
18c90     B1 AE B1 BE 
18c94     C9 D4 BE A8 
18c98     B0 BC CE D0 | 	byte	$01, $cb, $b9, $ba, $b1, $ae, $b1, $be, $c9, $d4, $be, $a8, $b0, $bc, $ce, $d0
18c9c     DA F1 00 28 
18ca0     3A 2E 31 44 
18ca4     54 6B 75 7C 
18ca8     7D 70 3D 18 | 	byte	$da, $f1, $00, $28, $3a, $2e, $31, $44, $54, $6b, $75, $7c, $7d, $70, $3d, $18
18cac     02 CB C4 BF 
18cb0     B4 B2 B7 C4 
18cb4     D0 D5 B0 A6 
18cb8     B5 C1 D3 CE | 	byte	$02, $cb, $c4, $bf, $b4, $b2, $b7, $c4, $d0, $d5, $b0, $a6, $b5, $c1, $d3, $ce
18cbc     DB ED 05 2A 
18cc0     2D 26 38 47 
18cc4     5C 6F 7A 7E 
18cc8     7F 5E 35 1D | 	byte	$db, $ed, $05, $2a, $2d, $26, $38, $47, $5c, $6f, $7a, $7e, $7f, $5e, $35, $1d
18ccc     F1 D1 CC BD 
18cd0     B7 B2 BC C6 
18cd4     D5 D3 A8 A7 
18cd8     B6 C6 D6 CF | 	byte	$f1, $d1, $cc, $bd, $b7, $b2, $bc, $c6, $d5, $d3, $a8, $a7, $b6, $c6, $d6, $cf
18cdc     DD EE 08 27 
18ce0     21 27 3F 4B 
18ce4     67 76 7F 7F 
18ce8     7C 4F 2D 21 | 	byte	$dd, $ee, $08, $27, $21, $27, $3f, $4b, $67, $76, $7f, $7f, $7c, $4f, $2d, $21
18cec     E6 D8 CF BE 
18cf0     B5 B3 C0 C8 
18cf4     D8 CD A6 AB 
18cf8     B7 CB D4 CF | 	byte	$e6, $d8, $cf, $be, $b5, $b3, $c0, $c8, $d8, $cd, $a6, $ab, $b7, $cb, $d4, $cf
18cfc     DB F1 0B 1A 
18d00     1C 2D 3F 52 
18d04     69 78 7F 7F 
18d08     6A 42 32 10 | 	byte	$db, $f1, $0b, $1a, $1c, $2d, $3f, $52, $69, $78, $7f, $7f, $6a, $42, $32, $10
18d0c     EC E2 D0 C2 
18d10     B4 B7 C1 CF 
18d14     D9 BA A4 B1 
18d18     BE D3 CF D2 | 	byte	$ec, $e2, $d0, $c2, $b4, $b7, $c1, $cf, $d9, $ba, $a4, $b1, $be, $d3, $cf, $d2
18d1c     DD F5 05 0F 
18d20     20 34 42 5A 
18d24     6E 7A 7F 7F 
18d28     5A 39 36 04 | 	byte	$dd, $f5, $05, $0f, $20, $34, $42, $5a, $6e, $7a, $7f, $7f, $5a, $39, $36, $04
18d2c     F3 E9 D5 C2 
18d30     B4 BC C1 D6 
18d34     DC AD A7 B1 
18d38     C4 D8 CA D2 | 	byte	$f3, $e9, $d5, $c2, $b4, $bc, $c1, $d6, $dc, $ad, $a7, $b1, $c4, $d8, $ca, $d2
18d3c     E1 F5 F9 0B 
18d40     24 36 46 60 
18d44     71 7C 7F 6B 
18d48     46 3B 2F 05 | 	byte	$e1, $f5, $f9, $0b, $24, $36, $46, $60, $71, $7c, $7f, $6b, $46, $3b, $2f, $05
18d4c     FC EF DB BF 
18d50     B4 BC C6 DB 
18d54     DC A3 AB B5 
18d58     C9 D6 C8 CF | 	byte	$fc, $ef, $db, $bf, $b4, $bc, $c6, $db, $dc, $a3, $ab, $b5, $c9, $d6, $c8, $cf
18d5c     E3 EC F7 0C 
18d60     29 37 4D 62 
18d64     72 7D 78 5A 
18d68     39 3D 19 0C | 	byte	$e3, $ec, $f7, $0c, $29, $37, $4d, $62, $72, $7d, $78, $5a, $39, $3d, $19, $0c
18d6c     05 F8 DD C0 
18d70     B8 BE D2 E1 
18d74     CD A4 AD BF 
18d78     D0 D3 C9 D1 | 	byte	$05, $f8, $dd, $c0, $b8, $be, $d2, $e1, $cd, $a4, $ad, $bf, $d0, $d3, $c9, $d1
18d7c     E5 DD FB 10 
18d80     2B 3A 51 64 
18d84     72 7A 60 44 
18d88     39 3A 12 0F | 	byte	$e5, $dd, $fb, $10, $2b, $3a, $51, $64, $72, $7a, $60, $44, $39, $3a, $12, $0f
18d8c     12 04 DF C2 
18d90     BB C0 D9 E6 
18d94     B8 AA AF C4 
18d98     D4 CF CE D2 | 	byte	$12, $04, $df, $c2, $bb, $c0, $d9, $e6, $b8, $aa, $af, $c4, $d4, $cf, $ce, $d2
18d9c     DA D9 FE 18 
18da0     2B 3F 56 66 
18da4     73 69 57 30 
18da8     38 27 14 18 | 	byte	$da, $d9, $fe, $18, $2b, $3f, $56, $66, $73, $69, $57, $30, $38, $27, $14, $18
18dac     1E 0B E6 C4 
18db0     BC CA E0 E9 
18db4     A9 AC B8 C9 
18db8     D6 C8 D1 D2 | 	byte	$1e, $0b, $e6, $c4, $bc, $ca, $e0, $e9, $a9, $ac, $b8, $c9, $d6, $c8, $d1, $d2
18dbc     CD DD 03 20 
18dc0     31 46 57 69 
18dc4     6F 54 41 2F 
18dc8     38 16 15 25 | 	byte	$cd, $dd, $03, $20, $31, $46, $57, $69, $6f, $54, $41, $2f, $38, $16, $15, $25
18dcc     29 0F EB C7 
18dd0     BE D3 E8 E2 
18dd4     A7 AC BF CE 
18dd8     D6 C6 D1 C8 | 	byte	$29, $0f, $eb, $c7, $be, $d3, $e8, $e2, $a7, $ac, $bf, $ce, $d6, $c6, $d1, $c8
18ddc     C8 E7 02 26 
18de0     33 49 57 69 
18de4     56 50 28 2C 
18de8     2F 0E 1A 2F | 	byte	$c8, $e7, $02, $26, $33, $49, $57, $69, $56, $50, $28, $2c, $2f, $0e, $1a, $2f
18dec     30 1A EF C9 
18df0     C2 D9 ED C3 
18df4     AC B0 C5 D1 
18df8     D3 C8 CC BE | 	byte	$30, $1a, $ef, $c9, $c2, $d9, $ed, $c3, $ac, $b0, $c5, $d1, $d3, $c8, $cc, $be
18dfc     C8 F7 05 29 
18e00     3B 4A 5D 60 
18e04     4E 38 24 2E 
18e08     1A 0E 25 37 | 	byte	$c8, $f7, $05, $29, $3b, $4a, $5d, $60, $4e, $38, $24, $2e, $1a, $0e, $25, $37
18e0c     36 25 F7 C8 
18e10     C8 E2 EF B4 
18e14     AC B6 C8 D4 
18e18     CD CF BF BC | 	byte	$36, $25, $f7, $c8, $c8, $e2, $ef, $b4, $ac, $b6, $c8, $d4, $cd, $cf, $bf, $bc
18e1c     CE FD 0B 2C 
18e20     3E 4C 5E 47 
18e24     49 25 20 2B 
18e28     05 12 2D 3E | 	byte	$ce, $fd, $0b, $2c, $3e, $4c, $5e, $47, $49, $25, $20, $2b, $05, $12, $2d, $3e
18e2c     3C 2C FB CC 
18e30     D1 E8 E2 B3 
18e34     AD BE CC D7 
18e38     C6 CC B2 BD | 	byte	$3c, $2c, $fb, $cc, $d1, $e8, $e2, $b3, $ad, $be, $cc, $d7, $c6, $cc, $b2, $bd
18e3c     DD FD 15 2F 
18e40     41 50 49 49 
18e44     33 1B 21 19 
18e48     02 1C 32 42 | 	byte	$dd, $fd, $15, $2f, $41, $50, $49, $49, $33, $1b, $21, $19, $02, $1c, $32, $42
18e4c     43 35 00 D2 
18e50     D5 EB D4 AE 
18e54     AF C4 D0 D7 
18e58     C4 BE AF C1 | 	byte	$43, $35, $00, $d2, $d5, $eb, $d4, $ae, $af, $c4, $d0, $d7, $c4, $be, $af, $c1
18e5c     F0 FE 1D 35 
18e60     44 4A 40 44 
18e64     20 19 23 04 
18e68     09 21 38 44 | 	byte	$f0, $fe, $1d, $35, $44, $4a, $40, $44, $20, $19, $23, $04, $09, $21, $38, $44
18e6c     49 3F 0A D6 
18e70     DB E1 C9 AD 
18e74     B6 C6 D4 CF 
18e78     C1 B6 B1 C8 | 	byte	$49, $3f, $0a, $d6, $db, $e1, $c9, $ad, $b6, $c6, $d4, $cf, $c1, $b6, $b1, $c8
18e7c     FB 03 24 38 
18e80     43 34 44 31 
18e84     15 17 19 FA 
18e88     0F 26 3C 48 | 	byte	$fb, $03, $24, $38, $43, $34, $44, $31, $15, $17, $19, $fa, $0f, $26, $3c, $48
18e8c     4F 45 0E DA 
18e90     DD DE BF AC 
18e94     BD CD D8 C6 
18e98     B9 B4 B7 DB | 	byte	$4f, $45, $0e, $da, $dd, $de, $bf, $ac, $bd, $cd, $d8, $c6, $b9, $b4, $b7, $db
18e9c     FF 09 2E 3B 
18ea0     33 3A 3E 1D 
18ea4     11 1A 08 FE 
18ea8     16 2B 3E 4A | 	byte	$ff, $09, $2e, $3b, $33, $3a, $3e, $1d, $11, $1a, $08, $fe, $16, $2b, $3e, $4a
18eac     57 4D 19 DC 
18eb0     D2 E2 B6 AD 
18eb4     C3 D2 D8 BA 
18eb8     B4 B2 BA ED | 	byte	$57, $4d, $19, $dc, $d2, $e2, $b6, $ad, $c3, $d2, $d8, $ba, $b4, $b2, $ba, $ed
18ebc     00 0D 35 34 
18ec0     28 3C 2F 12 
18ec4     11 18 F9 04 
18ec8     1C 2F 40 4C | 	byte	$00, $0d, $35, $34, $28, $3c, $2f, $12, $11, $18, $f9, $04, $1c, $2f, $40, $4c
18ecc     5C 54 25 D9 
18ed0     D4 DC AB B4 
18ed4     C7 D4 CE AF 
18ed8     B4 B0 C6 F9 | 	byte	$5c, $54, $25, $d9, $d4, $dc, $ab, $b4, $c7, $d4, $ce, $af, $b4, $b0, $c6, $f9
18edc     03 15 33 1E 
18ee0     30 3A 1E 0C 
18ee4     15 0B F7 0C 
18ee8     21 33 41 52 | 	byte	$03, $15, $33, $1e, $30, $3a, $1e, $0c, $15, $0b, $f7, $0c, $21, $33, $41, $52
18eec     60 5B 21 CC 
18ef0     DD CE A7 BB 
18ef4     CD D9 BA AE 
18ef8     B7 B1 D5 FE | 	byte	$60, $5b, $21, $cc, $dd, $ce, $a7, $bb, $cd, $d9, $ba, $ae, $b7, $b1, $d5, $fe
18efc     06 25 1F 25 
18f00     32 2B 14 0D 
18f04     15 FC FC 12 
18f08     25 35 42 56 | 	byte	$06, $25, $1f, $25, $32, $2b, $14, $0d, $15, $fc, $fc, $12, $25, $35, $42, $56
18f0c     64 63 1F CC 
18f10     DE BB AC C1 
18f14     D1 D4 A8 AF 
18f18     B7 B4 EA FE | 	byte	$64, $63, $1f, $cc, $de, $bb, $ac, $c1, $d1, $d4, $a8, $af, $b7, $b4, $ea, $fe
18f1c     08 24 15 29 
18f20     2D 23 0C 11 
18f24     0D F6 05 18 
18f28     2A 38 46 5D | 	byte	$08, $24, $15, $29, $2d, $23, $0c, $11, $0d, $f6, $05, $18, $2a, $38, $46, $5d
18f2c     69 69 08 D5 
18f30     DB A6 B3 C9 
18f34     D5 C0 A6 B3 
18f38     B2 BF F9 03 | 	byte	$69, $69, $08, $d5, $db, $a6, $b3, $c9, $d5, $c0, $a6, $b3, $b2, $bf, $f9, $03
18f3c     0D 11 1F 2C 
18f40     21 19 0A 13 
18f44     00 F8 0A 1E 
18f48     2B 39 4D 60 | 	byte	$0d, $11, $1f, $2c, $21, $19, $0a, $13, $00, $f8, $0a, $1e, $2b, $39, $4d, $60
18f4c     6F 66 09 DA 
18f50     CC A4 B9 CD 
18f54     D3 AE AB B7 
18f58     AF D6 FD 07 | 	byte	$6f, $66, $09, $da, $cc, $a4, $b9, $cd, $d3, $ae, $ab, $b7, $af, $d6, $fd, $07
18f5c     05 16 25 21 
18f60     22 0F 0D 10 
18f64     F8 FE 0F 21 
18f68     2D 3A 51 62 | 	byte	$05, $16, $25, $21, $22, $0f, $0d, $10, $f8, $fe, $0f, $21, $2d, $3a, $51, $62
18f6c     76 54 17 DE 
18f70     B7 A7 C2 D0 
18f74     C9 A3 B0 B8 
18f78     B2 E5 FF 04 | 	byte	$76, $54, $17, $de, $b7, $a7, $c2, $d0, $c9, $a3, $b0, $b8, $b2, $e5, $ff, $04
18f7c     03 1B 24 1E 
18f80     1A 0B 12 08 
18f84     F6 05 17 24 
18f88     2F 41 55 67 | 	byte	$03, $1b, $24, $1e, $1a, $0b, $12, $08, $f6, $05, $17, $24, $2f, $41, $55, $67
18f8c     75 50 12 D8 
18f90     A8 AD C8 CF 
18f94     BA A2 B2 B4 
18f98     BD F2 01 F0 | 	byte	$75, $50, $12, $d8, $a8, $ad, $c8, $cf, $ba, $a2, $b2, $b4, $bd, $f2, $01, $f0
18f9c     14 1E 17 1D 
18fa0     10 0B 11 FF 
18fa4     F9 0B 19 25 
18fa8     31 45 59 6D | 	byte	$14, $1e, $17, $1d, $10, $0b, $11, $ff, $f9, $0b, $19, $25, $31, $45, $59, $6d
18fac     66 58 1A C5 
18fb0     A7 B5 CB C7 
18fb4     AC A9 B5 B1 
18fb8     C9 FC F6 F5 | 	byte	$66, $58, $1a, $c5, $a7, $b5, $cb, $c7, $ac, $a9, $b5, $b1, $c9, $fc, $f6, $f5
18fbc     17 15 1C 16 
18fc0     0B 0F 0D F8 
18fc4     FE 10 1D 25 
18fc8     36 49 5C 6F | 	byte	$17, $15, $1c, $16, $0b, $0f, $0d, $f8, $fe, $10, $1d, $25, $36, $49, $5c, $6f
18fcc     5C 5C 17 BD 
18fd0     A5 BA C9 BE 
18fd4     A7 B0 B6 B0 
18fd8     D8 FE E5 10 | 	byte	$5c, $5c, $17, $bd, $a5, $ba, $c9, $be, $a7, $b0, $b6, $b0, $d8, $fe, $e5, $10
18fdc     15 11 1D 0E 
18fe0     0A 11 07 F7 
18fe4     04 14 1D 28 
18fe8     3B 4E 61 66 | 	byte	$15, $11, $1d, $0e, $0a, $11, $07, $f7, $04, $14, $1d, $28, $3b, $4e, $61, $66
18fec     5F 5D FB B9 
18ff0     A8 BD C2 B9 
18ff4     A3 B1 B3 B3 
18ff8     E4 EA F0 17 | 	byte	$5f, $5d, $fb, $b9, $a8, $bd, $c2, $b9, $a3, $b1, $b3, $b3, $e4, $ea, $f0, $17
18ffc     08 19 1B 08 
19000     0E 10 FF FB 
19004     0D 19 21 2E 
19008     44 52 68 5A | 	byte	$08, $19, $1b, $08, $0e, $10, $ff, $fb, $0d, $19, $21, $2e, $44, $52, $68, $5a
1900c     65 50 F4 B1 
19010     AD BC BB B7 
19014     A6 B4 AD BB 
19018     F0 DB 04 0E | 	byte	$65, $50, $f4, $b1, $ad, $bc, $bb, $b7, $a6, $b4, $ad, $bb, $f0, $db, $04, $0e
1901c     0F 1D 15 06 
19020     13 11 FE 04 
19024     14 1E 26 36 
19028     46 55 61 52 | 	byte	$0f, $1d, $15, $06, $13, $11, $fe, $04, $14, $1e, $26, $36, $46, $55, $61, $52
1902c     5C 36 DE AE 
19030     AB AE B1 B2 
19034     A8 B2 AD C5 
19038     E4 EC 0E 10 | 	byte	$5c, $36, $de, $ae, $ab, $ae, $b1, $b2, $a8, $b2, $ad, $c5, $e4, $ec, $0e, $10
1903c     1D 23 11 0B 
19040     15 0B FB 07 
19044     13 17 20 32 
19048     3F 52 4E 50 | 	byte	$1d, $23, $11, $0b, $15, $0b, $fb, $07, $13, $17, $20, $32, $3f, $52, $4e, $50
1904c     4A 2A DB B5 
19050     AF B1 BC BB 
19054     BA BA C3 D5 
19058     EA 00 14 1C | 	byte	$4a, $2a, $db, $b5, $af, $b1, $bc, $bb, $ba, $ba, $c3, $d5, $ea, $00, $14, $1c
1905c     26 21 0E 10 
19060     17 05 FE 0D 
19064     13 16 23 31 
19068     40 4E 40 4A | 	byte	$26, $21, $0e, $10, $17, $05, $fe, $0d, $13, $16, $23, $31, $40, $4e, $40, $4a
1906c     3C 1C D7 B6 
19070     AD B3 C2 BD 
19074     C2 BD CE DF 
19078     F3 08 19 1E | 	byte	$3c, $1c, $d7, $b6, $ad, $b3, $c2, $bd, $c2, $bd, $ce, $df, $f3, $08, $19, $1e
1907c     24 18 0B 12 
19080     12 FC 00 0C 
19084     0F 15 23 31 
19088     3E 44 3B 3B | 	byte	$24, $18, $0b, $12, $12, $fc, $00, $0c, $0f, $15, $23, $31, $3e, $44, $3b, $3b
1908c     35 12 CD B2 
19090     AC B8 C8 BD 
19094     C4 C5 D7 E8 
19098     FC 10 1B 1F | 	byte	$35, $12, $cd, $b2, $ac, $b8, $c8, $bd, $c4, $c5, $d7, $e8, $fc, $10, $1b, $1f
1909c     1F 10 0C 14 
190a0     09 F9 04 0C 
190a4     0D 15 24 2F 
190a8     3D 38 38 32 | 	byte	$1f, $10, $0c, $14, $09, $f9, $04, $0c, $0d, $15, $24, $2f, $3d, $38, $38, $32
190ac     2D 04 C7 B0 
190b0     B0 BC CC C0 
190b4     C3 CF DE F0 
190b8     03 13 1C 1E | 	byte	$2d, $04, $c7, $b0, $b0, $bc, $cc, $c0, $c3, $cf, $de, $f0, $03, $13, $1c, $1e
190bc     18 0B 0D 11 
190c0     FF FA 06 0A 
190c4     0C 17 24 30 
190c8     3B 2F 2E 30 | 	byte	$18, $0b, $0d, $11, $ff, $fa, $06, $0a, $0c, $17, $24, $30, $3b, $2f, $2e, $30
190cc     27 FA C3 B0 
190d0     B6 C2 CD C2 
190d4     C5 D6 E4 F6 
190d8     08 15 1C 1C | 	byte	$27, $fa, $c3, $b0, $b6, $c2, $cd, $c2, $c5, $d6, $e4, $f6, $08, $15, $1c, $1c
190dc     11 09 10 0B 
190e0     FB FF 08 09 
190e4     0F 1A 27 31 
190e8     36 29 2A 2C | 	byte	$11, $09, $10, $0b, $fb, $ff, $08, $09, $0f, $1a, $27, $31, $36, $29, $2a, $2c
190ec     21 EE BD B4 
190f0     BD C7 CD C3 
190f4     CD DC EB FC 
190f8     0C 17 1B 16 | 	byte	$21, $ee, $bd, $b4, $bd, $c7, $cd, $c3, $cd, $dc, $eb, $fc, $0c, $17, $1b, $16
190fc     0B 0B 11 05 
19100     FA 03 08 0A 
19104     10 1E 27 32 
19108     2D 23 29 29 | 	byte	$0b, $0b, $11, $05, $fa, $03, $08, $0a, $10, $1e, $27, $32, $2d, $23, $29, $29
1910c     19 E0 BB BD 
19110     C2 CB CE C5 
19114     D5 E3 F0 03 
19118     10 19 19 12 | 	byte	$19, $e0, $bb, $bd, $c2, $cb, $ce, $c5, $d5, $e3, $f0, $03, $10, $19, $19, $12
1911c     09 0E 0F FE 
19120     FB 05 08 0B 
19124     14 1F 29 31 
19128     23 24 28 25 | 	byte	$09, $0e, $0f, $fe, $fb, $05, $08, $0b, $14, $1f, $29, $31, $23, $24, $28, $25
1912c     10 D8 BE C4 
19130     C8 CE CF CC 
19134     DA E8 F8 08 
19138     13 19 16 0D | 	byte	$10, $d8, $be, $c4, $c8, $ce, $cf, $cc, $da, $e8, $f8, $08, $13, $19, $16, $0d
1913c     0A 11 0A FD 
19140     00 07 09 0C 
19144     17 22 2A 2E 
19148     1C 24 27 22 | 	byte	$0a, $11, $0a, $fd, $00, $07, $09, $0c, $17, $22, $2a, $2e, $1c, $24, $27, $22
1914c     01 D3 C5 CA 
19150     CC D2 D1 D3 
19154     E0 ED FC 0B 
19158     14 18 12 09 | 	byte	$01, $d3, $c5, $ca, $cc, $d2, $d1, $d3, $e0, $ed, $fc, $0b, $14, $18, $12, $09
1915c     0B 0F 03 FB 
19160     01 07 09 0F 
19164     18 22 29 25 
19168     1D 22 24 19 | 	byte	$0b, $0f, $03, $fb, $01, $07, $09, $0f, $18, $22, $29, $25, $1d, $22, $24, $19
1916c     F5 CF CC CE 
19170     CF D5 D0 D8 
19174     E4 F2 00 0D 
19178     14 15 0C 08 | 	byte	$f5, $cf, $cc, $ce, $cf, $d5, $d0, $d8, $e4, $f2, $00, $0d, $14, $15, $0c, $08
1917c     0E 0D FF FD 
19180     03 08 09 11 
19184     1B 22 28 1D 
19188     1E 22 21 10 | 	byte	$0e, $0d, $ff, $fd, $03, $08, $09, $11, $1b, $22, $28, $1d, $1e, $22, $21, $10
1918c     EB D3 D2 D3 
19190     D4 D9 D5 DE 
19194     E9 F7 04 0F 
19198     14 11 0A 09 | 	byte	$eb, $d3, $d2, $d3, $d4, $d9, $d5, $de, $e9, $f7, $04, $0f, $14, $11, $0a, $09
1919c     0E 07 FD FE 
191a0     04 07 0B 13 
191a4     1B 22 22 19 
191a8     1E 20 1C 07 | 	byte	$0e, $07, $fd, $fe, $04, $07, $0b, $13, $1b, $22, $22, $19, $1e, $20, $1c, $07
191ac     E8 D6 D4 D5 
191b0     D7 DA D8 E1 
191b4     ED F9 05 0E 
191b8     13 0F 09 09 | 	byte	$e8, $d6, $d4, $d5, $d7, $da, $d8, $e1, $ed, $f9, $05, $0e, $13, $0f, $09, $09
191bc     0B 01 FC 00 
191c0     05 08 0C 14 
191c4     1C 22 1E 19 
191c8     1D 1E 19 01 | 	byte	$0b, $01, $fc, $00, $05, $08, $0c, $14, $1c, $22, $1e, $19, $1d, $1e, $19, $01
191cc     E7 D9 D9 D9 
191d0     DB DC DB E6 
191d4     F1 FD 07 10 
191d8     13 0E 09 09 | 	byte	$e7, $d9, $d9, $d9, $db, $dc, $db, $e6, $f1, $fd, $07, $10, $13, $0e, $09, $09
191dc     06 FE FC 02 
191e0     05 07 0C 14 
191e4     1B 1D 1B 18 
191e8     1B 1B 14 FB | 	byte	$06, $fe, $fc, $02, $05, $07, $0c, $14, $1b, $1d, $1b, $18, $1b, $1b, $14, $fb
191ec     E5 DB DB DC 
191f0     DC DC DD E9 
191f4     F4 FF 08 0F 
191f8     11 0D 09 08 | 	byte	$e5, $db, $db, $dc, $dc, $dc, $dd, $e9, $f4, $ff, $08, $0f, $11, $0d, $09, $08
191fc     02 FB FD 02 
19200     04 07 0D 14 
19204     1A 1B 18 18 
19208     1A 19 10 F8 | 	byte	$02, $fb, $fd, $02, $04, $07, $0d, $14, $1a, $1b, $18, $18, $1a, $19, $10, $f8
1920c     E4 E0 DF DF 
19210     DE E0 E0 ED 
19214     F7 01 0A 10 
19218     10 0E 0B 07 | 	byte	$e4, $e0, $df, $df, $de, $e0, $e0, $ed, $f7, $01, $0a, $10, $10, $0e, $0b, $07
1921c     FF FC FF 03 
19220     04 07 0D 14 
19224     18 19 15 17 
19228     18 17 0A F5 | 	byte	$ff, $fc, $ff, $03, $04, $07, $0d, $14, $18, $19, $15, $17, $18, $17, $0a, $f5
1922c     E5 E2 E1 E0 
19230     DE E2 E3 EE 
19234     F9 01 09 0E 
19238     0F 0D 09 03 | 	byte	$e5, $e2, $e1, $e0, $de, $e2, $e3, $ee, $f9, $01, $09, $0e, $0f, $0d, $09, $03
1923c     FD FC FF 02 
19240     04 08 0D 14 
19244     16 18 14 16 
19248     17 14 07 F2 | 	byte	$fd, $fc, $ff, $02, $04, $08, $0d, $14, $16, $18, $14, $16, $17, $14, $07, $f2
1924c     E8 E5 E4 E2 
19250     E0 E4 E7 F2 
19254     FB 03 09 0D 
19258     0E 0D 09 01 | 	byte	$e8, $e5, $e4, $e2, $e0, $e4, $e7, $f2, $fb, $03, $09, $0d, $0e, $0d, $09, $01
1925c     FC FD 00 02 
19260     04 09 0E 13 
19264     15 14 13 14 
19268     15 11 03 F1 | 	byte	$fc, $fd, $00, $02, $04, $09, $0e, $13, $15, $14, $13, $14, $15, $11, $03, $f1
1926c     EA E7 E5 E3 
19270     E2 E6 EA F4 
19274     FC 04 09 0C 
19278     0E 0C 06 FF | 	byte	$ea, $e7, $e5, $e3, $e2, $e6, $ea, $f4, $fc, $04, $09, $0c, $0e, $0c, $06, $ff
1927c     FC FD 00 01 
19280     05 09 0F 10 
19284     14 11 12 14 
19288     14 0E FF F1 | 	byte	$fc, $fd, $00, $01, $05, $09, $0f, $10, $14, $11, $12, $14, $14, $0e, $ff, $f1
1928c     EC E9 E7 E5 
19290     E4 E8 ED F6 
19294     FD 03 08 0B 
19298     0D 0B 04 FD | 	byte	$ec, $e9, $e7, $e5, $e4, $e8, $ed, $f6, $fd, $03, $08, $0b, $0d, $0b, $04, $fd
1929c     FD FE 00 02 
192a0     05 09 0E 10 
192a4     13 10 12 13 
192a8     12 0A FD F2 | 	byte	$fd, $fe, $00, $02, $05, $09, $0e, $10, $13, $10, $12, $13, $12, $0a, $fd, $f2
192ac     EE EB E8 E6 
192b0     E6 EA EF F8 
192b4     FE 03 07 0B 
192b8     0D 09 02 FD | 	byte	$ee, $eb, $e8, $e6, $e6, $ea, $ef, $f8, $fe, $03, $07, $0b, $0d, $09, $02, $fd
192bc     FD FF 00 02 
192c0     05 0A 0D 10 
192c4     10 0F 11 11 
192c8     10 07 FB F2 | 	byte	$fd, $ff, $00, $02, $05, $0a, $0d, $10, $10, $0f, $11, $11, $10, $07, $fb, $f2
192cc     EE EB E9 E6 
192d0     E8 EB F2 F9 
192d4     FF 04 07 0B 
192d8     0C 08 00 FD | 	byte	$ee, $eb, $e9, $e6, $e8, $eb, $f2, $f9, $ff, $04, $07, $0b, $0c, $08, $00, $fd
192dc     FE FF 00 02 
192e0     05 09 0C 0F 
192e4     0E 0F 0F 10 
192e8     0E 05 FA F3 | 	byte	$fe, $ff, $00, $02, $05, $09, $0c, $0f, $0e, $0f, $0f, $10, $0e, $05, $fa, $f3
192ec     EF ED EA E7 
192f0     EB EE F4 FA 
192f4     00 04 08 0B 
192f8     0C 06 00 FE | 	byte	$ef, $ed, $ea, $e7, $eb, $ee, $f4, $fa, $00, $04, $08, $0b, $0c, $06, $00, $fe
192fc     FF 01 01 03 
19300     06 0A 0C 0F 
19304     0D 0E 0F 10 
19308     0C 04 F9 F4 | 	byte	$ff, $01, $01, $03, $06, $0a, $0c, $0f, $0d, $0e, $0f, $10, $0c, $04, $f9, $f4
1930c     F0 EE EB E9 
19310     ED EF F5 FB 
19314     00 04 08 0B 
19318     09 04 FF FE | 	byte	$f0, $ee, $eb, $e9, $ed, $ef, $f5, $fb, $00, $04, $08, $0b, $09, $04, $ff, $fe
1931c     FF 00 01 03 
19320     06 09 0C 0D 
19324     0C 0D 0E 0E 
19328     09 01 FA F5 | 	byte	$ff, $00, $01, $03, $06, $09, $0c, $0d, $0c, $0d, $0e, $0e, $09, $01, $fa, $f5
1932c     F1 EE EB EB 
19330     EE F0 F6 FC 
19334     00 03 08 0A 
19338     08 03 00 FF | 	byte	$f1, $ee, $eb, $eb, $ee, $f0, $f6, $fc, $00, $03, $08, $0a, $08, $03, $00, $ff
1933c     01 01 01 03 
19340     07 09 0C 0B 
19344     0C 0D 0D 0C 
19348     08 00 F9 F5 | 	byte	$01, $01, $01, $03, $07, $09, $0c, $0b, $0c, $0d, $0d, $0c, $08, $00, $f9, $f5
1934c     F2 EE ED ED 
19350     F0 F3 F8 FD 
19354     01 04 08 09 
19358     07 02 00 00 | 	byte	$f2, $ee, $ed, $ed, $f0, $f3, $f8, $fd, $01, $04, $08, $09, $07, $02, $00, $00
1935c     01 01 02 04 
19360     07 08 0A 09 
19364     0A 0B 0C 0A 
19368     05 FF F8 F4 | 	byte	$01, $01, $02, $04, $07, $08, $0a, $09, $0a, $0b, $0c, $0a, $05, $ff, $f8, $f4
1936c     F1 EF EE EF 
19370     F1 F3 F7 FC 
19374     00 04 07 08 
19378     05 02 00 00 | 	byte	$f1, $ef, $ee, $ef, $f1, $f3, $f7, $fc, $00, $04, $07, $08, $05, $02, $00, $00
1937c     01 02 02 05 
19380     07 09 09 0A 
19384     0B 0B 0B 09 
19388     05 FE F9 F6 | 	byte	$01, $02, $02, $05, $07, $09, $09, $0a, $0b, $0b, $0b, $09, $05, $fe, $f9, $f6
1938c     F2 F0 EF F1 
19390     F1 F5 F9 FE 
19394     01 05 07 07 
19398     04 02 00 01 | 	byte	$f2, $f0, $ef, $f1, $f1, $f5, $f9, $fe, $01, $05, $07, $07, $04, $02, $00, $01
1939c     02 02 03 05 
193a0     06 08 08 09 
193a4     0A 0A 0A 08 
193a8     03 FD F8 F5 | 	byte	$02, $02, $03, $05, $06, $08, $08, $09, $0a, $0a, $0a, $08, $03, $fd, $f8, $f5
193ac     F1 F0 F0 F1 
193b0     F2 F6 FA FE 
193b4     01 05 06 05 
193b8     04 02 01 01 | 	byte	$f1, $f0, $f0, $f1, $f2, $f6, $fa, $fe, $01, $05, $06, $05, $04, $02, $01, $01
193bc     02 02 03 05 
193c0     06 07 07 09 
193c4     0A 0A 09 07 
193c8     02 FD F9 F5 | 	byte	$02, $02, $03, $05, $06, $07, $07, $09, $0a, $0a, $09, $07, $02, $fd, $f9, $f5
193cc     F3 F2 F2 F2 
193d0     F4 F8 FB FF 
193d4     02 06 06 05 
193d8     04 03 03 03 | 	byte	$f3, $f2, $f2, $f2, $f4, $f8, $fb, $ff, $02, $06, $06, $05, $04, $03, $03, $03
193dc     03 03 04 05 
193e0     06 06 08 09 
193e4     09 09 08 06 
193e8     01 FC F8 F4 | 	byte	$03, $03, $04, $05, $06, $06, $08, $09, $09, $09, $08, $06, $01, $fc, $f8, $f4
193ec     F4 F3 F2 F2 
193f0     F4 F7 FB FE 
193f4     02 04 05 04 
193f8     04 03 02 02 | 	byte	$f4, $f3, $f2, $f2, $f4, $f7, $fb, $fe, $02, $04, $05, $04, $04, $03, $02, $02
193fc     02 03 04 04 
19400     05 06 07 08 
19404     08 08 08 05 
19408     00 FB F7 F6 | 	byte	$02, $03, $04, $04, $05, $06, $07, $08, $08, $08, $08, $05, $00, $fb, $f7, $f6
1940c     F5 F4 F3 F3 
19410     F5 F8 FB FF 
19414     03 05 05 04 
19418     04 03 03 03 | 	byte	$f5, $f4, $f3, $f3, $f5, $f8, $fb, $ff, $03, $05, $05, $04, $04, $03, $03, $03
1941c     03 03 04 04 
19420     05 05 07 07 
19424     08 07 06 03 
19428     FF FA F7 F6 | 	byte	$03, $03, $04, $04, $05, $05, $07, $07, $08, $07, $06, $03, $ff, $fa, $f7, $f6
1942c     F5 F4 F4 F4 
19430     F6 F9 FC 00 
19434     03 04 04 04 
19438     04 03 03 03 | 	byte	$f5, $f4, $f4, $f4, $f6, $f9, $fc, $00, $03, $04, $04, $04, $04, $03, $03, $03
1943c     03 03 03 04 
19440     04 06 06 06 
19444     06 06 05 02 
19448     FE FA F8 F7 | 	byte	$03, $03, $03, $04, $04, $06, $06, $06, $06, $06, $05, $02, $fe, $fa, $f8, $f7
1944c     F6 F5 F4 F5 
19450     F7 FA FC 01 
19454     03 04 04 04 
19458     04 04 03 03 | 	byte	$f6, $f5, $f4, $f5, $f7, $fa, $fc, $01, $03, $04, $04, $04, $04, $04, $03, $03
1945c     03 04 03 04 
19460     04 05 07 07 
19464     07 06 04 01 
19468     FC FA F9 F7 | 	byte	$03, $04, $03, $04, $04, $05, $07, $07, $07, $06, $04, $01, $fc, $fa, $f9, $f7
1946c     F6 F5 F4 F6 
19470     F7 FA FD 01 
19474     03 03 04 04 
19478     04 04 04 03 | 	byte	$f6, $f5, $f4, $f6, $f7, $fa, $fd, $01, $03, $03, $04, $04, $04, $04, $04, $03
1947c     04 04 03 03 
19480     04 05 06 06 
19484     06 05 03 FE 
19488     FB FA F9 F7 | 	byte	$04, $04, $03, $03, $04, $05, $06, $06, $06, $05, $03, $fe, $fb, $fa, $f9, $f7
1948c     F6 F5 F4 F6 
19490     F8 FB FE 02 
19494     03 03 04 04 
19498     04 04 04 04 | 	byte	$f6, $f5, $f4, $f6, $f8, $fb, $fe, $02, $03, $03, $04, $04, $04, $04, $04, $04
1949c     03 03 03 03 
194a0     04 04 05 05 
194a4     05 04 00 FD 
194a8     FC FB F9 F8 | 	byte	$03, $03, $03, $03, $04, $04, $05, $05, $05, $04, $00, $fd, $fc, $fb, $f9, $f8
194ac     F7 F6 F6 F7 
194b0     F9 FB 00 03 
194b4     03 04 04 05 
194b8     06 05 05 04 | 	byte	$f7, $f6, $f6, $f7, $f9, $fb, $00, $03, $03, $04, $04, $05, $06, $05, $05, $04
194bc     04 04 03 04 
194c0     04 05 05 05 
194c4     04 03 FF FD 
194c8     FC FB FA F9 | 	byte	$04, $04, $03, $04, $04, $05, $05, $05, $04, $03, $ff, $fd, $fc, $fb, $fa, $f9
194cc     F8 F6 F6 F7 
194d0     F9 FC 00 02 
194d4     03 04 04 05 
194d8     05 05 04 04 | 	byte	$f8, $f6, $f6, $f7, $f9, $fc, $00, $02, $03, $04, $04, $05, $05, $05, $04, $04
194dc     04 03 03 03 
194e0     04 04 04 04 
194e4     03 FF FD FD 
194e8     FC FB FA F9 | 	byte	$04, $03, $03, $03, $04, $04, $04, $04, $03, $ff, $fd, $fd, $fc, $fb, $fa, $f9
194ec     F8 F7 F7 F8 
194f0     F9 FC 01 02 
194f4     03 04 04 05 
194f8     05 05 05 05 | 	byte	$f8, $f7, $f7, $f8, $f9, $fc, $01, $02, $03, $04, $04, $05, $05, $05, $05, $05
194fc     04 03 04 04 
19500     04 04 04 03 
19504     01 FD FD FC 
19508     FC FB FA FA | 	byte	$04, $03, $04, $04, $04, $04, $04, $03, $01, $fd, $fd, $fc, $fc, $fb, $fa, $fa
1950c     F8 F8 F8 F9 
19510     FA FE 02 02 
19514     03 04 04 05 
19518     05 05 05 04 | 	byte	$f8, $f8, $f8, $f9, $fa, $fe, $02, $02, $03, $04, $04, $05, $05, $05, $05, $04
1951c     03 03 03 04 
19520     04 03 02 01 
19524     FD FC FC FC 
19528     FB FA FA FA | 	byte	$03, $03, $03, $04, $04, $03, $02, $01, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $fa
1952c     F9 F8 F9 FA 
19530     FC FF 01 02 
19534     02 03 04 05 
19538     05 05 05 04 | 	byte	$f9, $f8, $f9, $fa, $fc, $ff, $01, $02, $02, $03, $04, $05, $05, $05, $05, $04
1953c     03 03 04 05 
19540     04 04 03 FF 
19544     FD FD FC FC 
19548     FB FB FA FA | 	byte	$03, $03, $04, $05, $04, $04, $03, $ff, $fd, $fd, $fc, $fc, $fb, $fb, $fa, $fa
1954c     F9 F9 FA FA 
19550     FD 01 02 03 
19554     03 03 04 05 
19558     05 05 04 04 | 	byte	$f9, $f9, $fa, $fa, $fd, $01, $02, $03, $03, $03, $04, $05, $05, $05, $04, $04
1955c     03 04 04 04 
19560     03 03 00 FD 
19564     FC FC FC FB 
19568     FB FA FA FA | 	byte	$03, $04, $04, $04, $03, $03, $00, $fd, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa
1956c     F9 F9 FA FB 
19570     FE 02 03 03 
19574     03 03 04 05 
19578     05 05 04 04 | 	byte	$f9, $f9, $fa, $fb, $fe, $02, $03, $03, $03, $03, $04, $05, $05, $05, $04, $04
1957c     04 04 04 04 
19580     03 02 FE FD 
19584     FC FC FC FC 
19588     FB FB FA FA | 	byte	$04, $04, $04, $04, $03, $02, $fe, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fa, $fa
1958c     FA FA FB FC 
19590     00 03 03 04 
19594     04 04 05 06 
19598     05 05 05 04 | 	byte	$fa, $fa, $fb, $fc, $00, $03, $03, $04, $04, $04, $05, $06, $05, $05, $05, $04
1959c     05 05 04 04 
195a0     04 01 FD FD 
195a4     FD FC FC FB 
195a8     FA FA FA FA | 	byte	$05, $05, $04, $04, $04, $01, $fd, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fa
195ac     F9 FA FB FD 
195b0     00 03 03 03 
195b4     04 04 04 05 
195b8     05 05 04 04 | 	byte	$f9, $fa, $fb, $fd, $00, $03, $03, $03, $04, $04, $04, $05, $05, $05, $04, $04
195bc     04 04 04 04 
195c0     02 FE FC FD 
195c4     FC FC FC FB 
195c8     FB FB FA FA | 	byte	$04, $04, $04, $04, $02, $fe, $fc, $fd, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa
195cc     FA FA FB FD 
195d0     01 03 03 04 
195d4     04 04 05 05 
195d8     05 05 04 04 | 	byte	$fa, $fa, $fb, $fd, $01, $03, $03, $04, $04, $04, $05, $05, $05, $05, $04, $04
195dc     05 05 04 03 
195e0     FF FD FC FC 
195e4     FC FC FC FB 
195e8     FB FB FB FA | 	byte	$05, $05, $04, $03, $ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa
195ec     FA FB FC FF 
195f0     03 04 04 04 
195f4     05 05 05 05 
195f8     05 04 04 04 | 	byte	$fa, $fb, $fc, $ff, $03, $04, $04, $04, $05, $05, $05, $05, $05, $04, $04, $04
195fc     04 04 04 02 
19600     FE FC FC FC 
19604     FC FB FB FB 
19608     FA FA FA FA | 	byte	$04, $04, $04, $02, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $fa
1960c     FA FC FD 01 
19610     03 04 04 04 
19614     04 04 05 05 
19618     05 04 04 04 | 	byte	$fa, $fc, $fd, $01, $03, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $04
1961c     04 04 03 00 
19620     FD FD FC FC 
19624     FC FC FB FB 
19628     FB FB FB FA | 	byte	$04, $04, $03, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fa
1962c     FB FC FE 01 
19630     04 04 04 04 
19634     04 05 05 05 
19638     04 04 05 05 | 	byte	$fb, $fc, $fe, $01, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $05, $05
1963c     04 03 01 FE 
19640     FC FC FC FC 
19644     FC FB FB FB 
19648     FB FA FA FA | 	byte	$04, $03, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa, $fa
1964c     FB FC FE 02 
19650     04 05 04 05 
19654     05 05 05 05 
19658     04 04 04 04 | 	byte	$fb, $fc, $fe, $02, $04, $05, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04
1965c     03 02 FF FD 
19660     FC FC FC FC 
19664     FB FB FB FB 
19668     FB FB FB FB | 	byte	$03, $02, $ff, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb
1966c     FC FE 00 03 
19670     05 05 05 05 
19674     06 06 06 05 
19678     05 05 05 05 | 	byte	$fc, $fe, $00, $03, $05, $05, $05, $05, $06, $06, $06, $05, $05, $05, $05, $05
1967c     03 01 FE FD 
19680     FC FC FC FC 
19684     FC FB FB FB 
19688     FB FB FB FB | 	byte	$03, $01, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb
1968c     FC FE 01 03 
19690     05 05 05 05 
19694     05 05 05 05 
19698     04 04 04 03 | 	byte	$fc, $fe, $01, $03, $05, $05, $05, $05, $05, $05, $05, $05, $04, $04, $04, $03
1969c     01 FF FD FC 
196a0     FC FC FC FC 
196a4     FB FB FB FB 
196a8     FB FB FB FB | 	byte	$01, $ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb
196ac     FD FF 01 04 
196b0     06 05 06 05 
196b4     06 06 06 05 
196b8     05 05 04 02 | 	byte	$fd, $ff, $01, $04, $06, $05, $06, $05, $06, $06, $06, $05, $05, $05, $04, $02
196bc     01 FE FC FC 
196c0     FC FC FC FC 
196c4     FB FB FC FB 
196c8     FC FC FB FC | 	byte	$01, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fc, $fb, $fc, $fc, $fb, $fc
196cc     FE 00 02 04 
196d0     06 06 05 06 
196d4     06 05 05 05 
196d8     05 04 02 01 | 	byte	$fe, $00, $02, $04, $06, $06, $05, $06, $06, $05, $05, $05, $05, $04, $02, $01
196dc     00 FD FC FC 
196e0     FC FC FB FB 
196e4     FB FB FB FB 
196e8     FB FB FB FC | 	byte	$00, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
196ec     FE 00 02 04 
196f0     06 06 06 05 
196f4     05 05 06 05 
196f8     05 03 02 01 | 	byte	$fe, $00, $02, $04, $06, $06, $06, $05, $05, $05, $06, $05, $05, $03, $02, $01
196fc     FF FD FC FC 
19700     FD FD FC FC 
19704     FC FC FC FC 
19708     FC FC FC FD | 	byte	$ff, $fd, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd
1970c     FF 00 02 05 
19710     06 06 06 05 
19714     05 06 05 05 
19718     04 02 01 00 | 	byte	$ff, $00, $02, $05, $06, $06, $06, $05, $05, $06, $05, $05, $04, $02, $01, $00
1971c     FD FC FC FC 
19720     FC FC FB FB 
19724     FC FB FB FB 
19728     FB FB FB FD | 	byte	$fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fd
1972c     FF 00 02 05 
19730     07 06 06 05 
19734     06 06 06 05 
19738     03 01 01 FF | 	byte	$ff, $00, $02, $05, $07, $06, $06, $05, $06, $06, $06, $05, $03, $01, $01, $ff
1973c     FC FB FC FC 
19740     FC FB FB FB 
19744     FC FC FC FC 
19748     FC FC FC FE | 	byte	$fc, $fb, $fc, $fc, $fc, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe
1974c     00 01 03 06 
19750     07 07 07 07 
19754     07 07 06 04 
19758     03 02 01 FE | 	byte	$00, $01, $03, $06, $07, $07, $07, $07, $07, $07, $06, $04, $03, $02, $01, $fe
1975c     FC FC FC FC 
19760     FC FC FC FC 
19764     FC FC FC FC 
19768     FC FC       | 	byte	$fc[14]
1976a     FD FE 00 01 
1976e     03 06 07 07 
19772     06 06 06 06 
19776     05 03 01 01 | 	byte	$fd, $fe, $00, $01, $03, $06, $07, $07, $06, $06, $06, $06, $05, $03, $01, $01
1977a     00 FD FB FC 
1977e     FC FC FC FB 
19782     FC FC FC FC 
19786     FC FC FC FC | 	byte	$00, $fd, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
1978a     FD 00 00 01 
1978e     04 06 07 07 
19792     06 07 07 06 
19796     04 02 02 01 | 	byte	$fd, $00, $00, $01, $04, $06, $07, $07, $06, $07, $07, $06, $04, $02, $02, $01
1979a     FF FC FC FC 
1979e     FC FC FC FC 
197a2     FC FC FC FC 
197a6     FC FC FC FC | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
197aa     FE 00 01 01 
197ae     04 07 08 07 
197b2     07 08 08 05 
197b6     03 01 02 00 | 	byte	$fe, $00, $01, $01, $04, $07, $08, $07, $07, $08, $08, $05, $03, $01, $02, $00
197ba     FD FB FB FC 
197be     FC FC FC FB 
197c2     FC FC FC FC 
197c6     FC FC FC FD | 	byte	$fd, $fb, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd
197ca     FE 00 01 02 
197ce     04 07 07 07 
197d2     07 08 07 04 
197d6     02 02 02 FF | 	byte	$fe, $00, $01, $02, $04, $07, $07, $07, $07, $08, $07, $04, $02, $02, $02, $ff
197da     FD FB FC FC 
197de     FC FC FD FD 
197e2     FD FD FD FC 
197e6     FD FD FD FD | 	byte	$fd, $fb, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd
197ea     FF 00 01 02 
197ee     05 08 07 07 
197f2     08 08 06 03 
197f6     02 02 01 FE | 	byte	$ff, $00, $01, $02, $05, $08, $07, $07, $08, $08, $06, $03, $02, $02, $01, $fe
197fa     FC FB FC FC 
197fe     FC FC FC FC 
19802     FD FD FC FC 
19806     FD FC FC FD | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fd, $fc, $fc, $fd
1980a     FF 00 01 02 
1980e     05 07 07 07 
19812     08 07 04 02 
19816     02 02 00 FC | 	byte	$ff, $00, $01, $02, $05, $07, $07, $07, $08, $07, $04, $02, $02, $02, $00, $fc
1981a     FB FC FC FB 
1981e     FB FC FD FD 
19822     FD FD FC FD 
19826     FD FD FD FE | 	byte	$fb, $fc, $fc, $fb, $fb, $fc, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe
1982a     00 01 01 03 
1982e     06 08 09 09 
19832     09 07 04 03 
19836     03 02 FE FC | 	byte	$00, $01, $01, $03, $06, $08, $09, $09, $09, $07, $04, $03, $03, $02, $fe, $fc
1983a     FC FC FC FC 
1983e     FC          | 	byte	$fc[5]
1983f     FD FD FD FE 
19843     FE FD FD FD 
19847     FD FE FF 00 
1984b     01 01 03 06 | 	byte	$fd, $fd, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01, $01, $03, $06
1984f     07 08 09 08 
19853     05 02 02 02 
19857     00 FD FB FB 
1985b     FB FB FC FC | 	byte	$07, $08, $09, $08, $05, $02, $02, $02, $00, $fd, $fb, $fb, $fb, $fb, $fc, $fc
1985f     FD FD FE FE 
19863     FE FD FD FD 
19867     FD FE FE 00 
1986b     01 01 03 05 | 	byte	$fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $00, $01, $01, $03, $05
1986f     08 09 09 07 
19873     04 02 02 02 
19877     FF FC FB FB 
1987b     FC FC FC FD | 	byte	$08, $09, $09, $07, $04, $02, $02, $02, $ff, $fc, $fb, $fb, $fc, $fc, $fc, $fd
1987f     FD FE FE FE 
19883     FE FD FD FD 
19887     FE FF FF 01 
1988b     01 01 04 06 | 	byte	$fd, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $ff, $ff, $01, $01, $01, $04, $06
1988f     09 0A 09 06 
19893     03 02 02 00 
19897     FD FB FB FA 
1989b     FB FC FD FE | 	byte	$09, $0a, $09, $06, $03, $02, $02, $00, $fd, $fb, $fb, $fa, $fb, $fc, $fd, $fe
1989f     FE FD FE FE 
198a3     FD FD FD FD 
198a7     FD FF FF 01 
198ab     01 02 04 07 | 	byte	$fe, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $ff, $ff, $01, $01, $02, $04, $07
198af     09 0A 08 05 
198b3     02 02 02 FF 
198b7     FC FA FA FB 
198bb     FC FD FE FE | 	byte	$09, $0a, $08, $05, $02, $02, $02, $ff, $fc, $fa, $fa, $fb, $fc, $fd, $fe, $fe
198bf     FF FF FF FF 
198c3     FE FE FE FE 
198c7     FE FF 00 01 
198cb     01 02 04 07 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $00, $01, $01, $02, $04, $07
198cf     0A 09 07 04 
198d3     02 02 01 FD 
198d7     FB FA FB FB 
198db     FC FD FE FE | 	byte	$0a, $09, $07, $04, $02, $02, $01, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $fe
198df     FE FF FF FF 
198e3     FD FE FD FD 
198e7     FE FE FF 00 
198eb     01 02 04 08 | 	byte	$fe, $ff, $ff, $ff, $fd, $fe, $fd, $fd, $fe, $fe, $ff, $00, $01, $02, $04, $08
198ef     0A 08 06 03 
198f3     02 01 FF FC 
198f7     FA FA FA FC 
198fb     FD FE FE FF | 	byte	$0a, $08, $06, $03, $02, $01, $ff, $fc, $fa, $fa, $fa, $fc, $fd, $fe, $fe, $ff
198ff     FF FF FF FF 
19903     FE FE FE FE 
19907     FF FF 01 01 
1990b     02 02 05 0A | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $01, $01, $02, $02, $05, $0a
1990f     0A 08 06 03 
19913     03 01 FE FB 
19917     FA FB FB FD 
1991b     FE FE FF 00 | 	byte	$0a, $08, $06, $03, $03, $01, $fe, $fb, $fa, $fb, $fb, $fd, $fe, $fe, $ff, $00
1991f     00 00 00 00 
19923     FE FF FE FE 
19927     FF FE 00 01 
1992b     01 02 06 09 | 	byte	$00, $00, $00, $00, $fe, $ff, $fe, $fe, $ff, $fe, $00, $01, $01, $02, $06, $09
1992f     09 07 04 02 
19933     01 FE FB F9 
19937     F9 FA FC FD 
1993b     FE FF FF 00 | 	byte	$09, $07, $04, $02, $01, $fe, $fb, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $ff, $00
1993f     00 01 01 00 
19943     FF FF FF FE 
19947     FF FE 01 01 
1994b     01 03 07 09 | 	byte	$00, $01, $01, $00, $ff, $ff, $ff, $fe, $ff, $fe, $01, $01, $01, $03, $07, $09
1994f     08 06 03 02 
19953     00 FD FA FA 
19957     FA FB FD FE 
1995b     FF 00 00 01 | 	byte	$08, $06, $03, $02, $00, $fd, $fa, $fa, $fa, $fb, $fd, $fe, $ff, $00, $00, $01
1995f     01 01 01 00 
19963     FF FF FF FE 
19967     FE FE 00 01 
1996b     02 04 08 09 | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $01, $02, $04, $08, $09
1996f     08 05 02 02 
19973     FE FA F9 F9 
19977     FA FC FD FE 
1997b     FF 00 01 01 | 	byte	$08, $05, $02, $02, $fe, $fa, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $00, $01, $01
1997f     01 01 01 FF 
19983     FE FE FE FE 
19987     FD FF 00 01 
1998b     02 05 08 08 | 	byte	$01, $01, $01, $ff, $fe, $fe, $fe, $fe, $fd, $ff, $00, $01, $02, $05, $08, $08
1998f     06 03 02 FF 
19993     FB F9 F8 FA 
19997     FB FD FE FF 
1999b     01 01 01 02 | 	byte	$06, $03, $02, $ff, $fb, $f9, $f8, $fa, $fb, $fd, $fe, $ff, $01, $01, $01, $02
1999f     03 03 02 00 
199a3     FF FF FF FF 
199a7     FD FF 01 01 
199ab     02 06 08 08 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $ff, $fd, $ff, $01, $01, $02, $06, $08, $08
199af     05 02 00 FD 
199b3     FA F8 F9 FA 
199b7     FC FE FF 00 
199bb     01 02 02 02 | 	byte	$05, $02, $00, $fd, $fa, $f8, $f9, $fa, $fc, $fe, $ff, $00, $01, $02, $02, $02
199bf     03 03 02 00 
199c3     FF FF FE FE 
199c7     FD FF 01 01 
199cb     02 06 07 07 | 	byte	$03, $03, $02, $00, $ff, $ff, $fe, $fe, $fd, $ff, $01, $01, $02, $06, $07, $07
199cf     03 01 FE FA 
199d3     F8 F8 F9 FB 
199d7     FD FE 00 01 
199db     02 03 03 03 | 	byte	$03, $01, $fe, $fa, $f8, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $03
199df     03 03 02 00 
199e3     FF FF FF FD 
199e7     FD 00 02 01 
199eb     04 07 08 06 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $fd, $fd, $00, $02, $01, $04, $07, $08, $06
199ef     02 00 FC F9 
199f3     F8 F9 FB FD 
199f7     FE 00 01 02 
199fb     03 03 04 04 | 	byte	$02, $00, $fc, $f9, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $04, $04
199ff     04 04 03 00 
19a03     00 FF FF FC 
19a07     FD 00 01 01 
19a0b     03 06 06 03 | 	byte	$04, $04, $03, $00, $00, $ff, $ff, $fc, $fd, $00, $01, $01, $03, $06, $06, $03
19a0f     00 FD F9 F7 
19a13     F7 F9 FB FD 
19a17     FF 00 02 03 
19a1b     04 04 04 05 | 	byte	$00, $fd, $f9, $f7, $f7, $f9, $fb, $fd, $ff, $00, $02, $03, $04, $04, $04, $05
19a1f     05 05 03 00 
19a23     00 FF FE FB 
19a27     FE 00 01 01 
19a2b     03 05 05 00 | 	byte	$05, $05, $03, $00, $00, $ff, $fe, $fb, $fe, $00, $01, $01, $03, $05, $05, $00
19a2f     FE F9 F7 F7 
19a33     F8 FA FD FE 
19a37     00 02 03 04 
19a3b     05 05 05 06 | 	byte	$fe, $f9, $f7, $f7, $f8, $fa, $fd, $fe, $00, $02, $03, $04, $05, $05, $05, $06
19a3f     06 05 03 00 
19a43     00 FF FD FB 
19a47     FE 00 00 01 
19a4b     04 05 02 FF | 	byte	$06, $05, $03, $00, $00, $ff, $fd, $fb, $fe, $00, $00, $01, $04, $05, $02, $ff
19a4f     FB F7 F6 F7 
19a53     F9 FB FE FF 
19a57     01 03 04 05 
19a5b     06 06 06 06 | 	byte	$fb, $f7, $f6, $f7, $f9, $fb, $fe, $ff, $01, $03, $04, $05, $06, $06, $06, $06
19a5f     06 05 02 00 
19a63     00 FE FB FB 
19a67     FE 00 FF 01 
19a6b     04 04 FF FD | 	byte	$06, $05, $02, $00, $00, $fe, $fb, $fb, $fe, $00, $ff, $01, $04, $04, $ff, $fd
19a6f     F8 F5 F6 F8 
19a73     FA FC FF 01 
19a77     03 04 06 06 
19a7b     07 07 07 08 | 	byte	$f8, $f5, $f6, $f8, $fa, $fc, $ff, $01, $03, $04, $06, $06, $07, $07, $07, $08
19a7f     07 06 02 01 
19a83     00 FF FA FD 
19a87     FF FF FE 00 
19a8b     03 00 FC F9 | 	byte	$07, $06, $02, $01, $00, $ff, $fa, $fd, $ff, $ff, $fe, $00, $03, $00, $fc, $f9
19a8f     F5 F5 F7 F9 
19a93     FB FD 00 02 
19a97     04 06 07 08 
19a9b     08 08 08 08 | 	byte	$f5, $f5, $f7, $f9, $fb, $fd, $00, $02, $04, $06, $07, $08, $08, $08, $08, $08
19a9f     07 06 01 00 
19aa3     FF FD F9 FC 
19aa7     FE FD FD FF 
19aab     01 FC F9 F5 | 	byte	$07, $06, $01, $00, $ff, $fd, $f9, $fc, $fe, $fd, $fd, $ff, $01, $fc, $f9, $f5
19aaf     F4 F5 F7 FA 
19ab3     FC FF 01 04 
19ab7     05 07 08 09 
19abb     09 09 09 09 | 	byte	$f4, $f5, $f7, $fa, $fc, $ff, $01, $04, $05, $07, $08, $09, $09, $09, $09, $09
19abf     08 06 01 00 
19ac3     FF FB FA FD 
19ac7     FE FC FE 01 
19acb     FF FA F7 F4 | 	byte	$08, $06, $01, $00, $ff, $fb, $fa, $fd, $fe, $fc, $fe, $01, $ff, $fa, $f7, $f4
19acf     F5 F7 F9 FC 
19ad3     FF 01 03 05 
19ad7     07 08 09 0A 
19adb     09 09 09 09 | 	byte	$f5, $f7, $f9, $fc, $ff, $01, $03, $05, $07, $08, $09, $0a, $09, $09, $09, $09
19adf     08 05 01 00 
19ae3     FF FA FA FD 
19ae7     FC FB FD FF 
19aeb     FB F8 F5 F4 | 	byte	$08, $05, $01, $00, $ff, $fa, $fa, $fd, $fc, $fb, $fd, $ff, $fb, $f8, $f5, $f4
19aef     F5 F8 FA FD 
19af3     FF 01 04 05 
19af7     08 09 09 09 
19afb     09 09 09 09 | 	byte	$f5, $f8, $fa, $fd, $ff, $01, $04, $05, $08, $09, $09, $09, $09, $09, $09, $09
19aff     07 03 01 00 
19b03     FE F8 FB FD 
19b07     FA FB FD FC 
19b0b     F8 F6 F4 F5 | 	byte	$07, $03, $01, $00, $fe, $f8, $fb, $fd, $fa, $fb, $fd, $fc, $f8, $f6, $f4, $f5
19b0f     F7 F9 FC FE 
19b13     01 03 06 07 
19b17     08 09 0A 0A 
19b1b     0A 09 09 08 | 	byte	$f7, $f9, $fc, $fe, $01, $03, $06, $07, $08, $09, $0a, $0a, $0a, $09, $09, $08
19b1f     07 02 00 FF 
19b23     FD F9 FC FB 
19b27     F9 FB FD F9 
19b2b     F7 F5 F4 F6 | 	byte	$07, $02, $00, $ff, $fd, $f9, $fc, $fb, $f9, $fb, $fd, $f9, $f7, $f5, $f4, $f6
19b2f     F8 FA FD 00 
19b33     02 04 06 08 
19b37     09 0A 0A 0A 
19b3b     0A 09 09 07 | 	byte	$f8, $fa, $fd, $00, $02, $04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $09, $07
19b3f     05 00 FF FF 
19b43     FA F9 FC F8 
19b47     F8 FA FB F7 
19b4b     F6 F4 F5 F7 | 	byte	$05, $00, $ff, $ff, $fa, $f9, $fc, $f8, $f8, $fa, $fb, $f7, $f6, $f4, $f5, $f7
19b4f     F9 FC FE 01 
19b53     03 05 07 09 
19b57     0A 0A 0A 0B 
19b5b     0A 0A 09 08 | 	byte	$f9, $fc, $fe, $01, $03, $05, $07, $09, $0a, $0a, $0a, $0b, $0a, $0a, $09, $08
19b5f     05 00 00 FF 
19b63     FA FB FB F7 
19b67     F8 FB F7 F6 
19b6b     F5 F4 F6 F8 | 	byte	$05, $00, $00, $ff, $fa, $fb, $fb, $f7, $f8, $fb, $f7, $f6, $f5, $f4, $f6, $f8
19b6f     FA FD FF 02 
19b73     04 06 08 09 
19b77     0B 0B 0B 0A 
19b7b     0A 09 08 07 | 	byte	$fa, $fd, $ff, $02, $04, $06, $08, $09, $0b, $0b, $0b, $0a, $0a, $09, $08, $07
19b7f     03 00 FF FE 
19b83     F9 FA F8 F5 
19b87     F8 F8 F5 F5 
19b8b     F4 F5 F7 F9 | 	byte	$03, $00, $ff, $fe, $f9, $fa, $f8, $f5, $f8, $f8, $f5, $f5, $f4, $f5, $f7, $f9
19b8f     FC FE 01 03 
19b93     05 07 09 0A 
19b97     0B 0B 0B 0B 
19b9b     0A 09 08 06 | 	byte	$fc, $fe, $01, $03, $05, $07, $09, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $06
19b9f     02 00 FF FD 
19ba3     F9 F9 F6 F6 
19ba7     F8 F6 F3 F5 
19bab     F5 F7 F9 FC | 	byte	$02, $00, $ff, $fd, $f9, $f9, $f6, $f6, $f8, $f6, $f3, $f5, $f5, $f7, $f9, $fc
19baf     FE 00 03 05 
19bb3     08 09 0A 0B 
19bb7     0C 0C 0C 0B 
19bbb     0A 0A 08 05 | 	byte	$fe, $00, $03, $05, $08, $09, $0a, $0b, $0c, $0c, $0c, $0b, $0a, $0a, $08, $05
19bbf     00 00 00 FC 
19bc3     F8 F5 F4 F5 
19bc7     F6 F2 F3 F4 
19bcb     F5 F7 FA FC | 	byte	$00, $00, $00, $fc, $f8, $f5, $f4, $f5, $f6, $f2, $f3, $f4, $f5, $f7, $fa, $fc
19bcf     FF 01 03 05 
19bd3     08 09 0B 0C 
19bd7     0C 0C 0B 0B 
19bdb     0A 09 07 03 | 	byte	$ff, $01, $03, $05, $08, $09, $0b, $0c, $0c, $0c, $0b, $0b, $0a, $09, $07, $03
19bdf     00 00 FF FA 
19be3     F5 F3 F4 F5 
19be7     F3 F0 F3 F5 
19beb     F6 F9 FB FE | 	byte	$00, $00, $ff, $fa, $f5, $f3, $f4, $f5, $f3, $f0, $f3, $f5, $f6, $f9, $fb, $fe
19bef     01 03 05 07 
19bf3     09 0B 0C 0C 
19bf7     0D 0C 0C 0A 
19bfb     0A 08 07 01 | 	byte	$01, $03, $05, $07, $09, $0b, $0c, $0c, $0d, $0c, $0c, $0a, $0a, $08, $07, $01
19bff     00 00 FF F8 
19c03     F2 F2 F4 F4 
19c07     F0 F0 F3 F6 
19c0b     F8 FA FD FF | 	byte	$00, $00, $ff, $f8, $f2, $f2, $f4, $f4, $f0, $f0, $f3, $f6, $f8, $fa, $fd, $ff
19c0f     02 04 06 08 
19c13     0A 0B 0C 0D 
19c17     0D 0C 0B 0A 
19c1b     0A 08 04 00 | 	byte	$02, $04, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $0a, $0a, $08, $04, $00
19c1f     FF 00 FD F4 
19c23     F0 F2 F3 F1 
19c27     ED F1 F5 F7 
19c2b     F9 FC FE 01 | 	byte	$ff, $00, $fd, $f4, $f0, $f2, $f3, $f1, $ed, $f1, $f5, $f7, $f9, $fc, $fe, $01
19c2f     03 05 07 09 
19c33     0B 0C 0D 0D 
19c37     0D 0D 0B 0B 
19c3b     0A 08 03 01 | 	byte	$03, $05, $07, $09, $0b, $0c, $0d, $0d, $0d, $0d, $0b, $0b, $0a, $08, $03, $01
19c3f     01 00 FA F0 
19c43     F1 F3 F2 EE 
19c47     EB F1 F6 F7 
19c4b     FA FE 00 02 | 	byte	$01, $00, $fa, $f0, $f1, $f3, $f2, $ee, $eb, $f1, $f6, $f7, $fa, $fe, $00, $02
19c4f     05 06 09 0A 
19c53     0C 0D 0D 0E 
19c57     0D 0C 0B 0A 
19c5b     09 07 01 00 | 	byte	$05, $06, $09, $0a, $0c, $0d, $0d, $0e, $0d, $0c, $0b, $0a, $09, $07, $01, $00
19c5f     00 FD F6 EE 
19c63     F0 F3 EF EA 
19c67     EB F2 F6 F8 
19c6b     FC FF 01 04 | 	byte	$00, $fd, $f6, $ee, $f0, $f3, $ef, $ea, $eb, $f2, $f6, $f8, $fc, $ff, $01, $04
19c6f     06 08 0A 0B 
19c73     0C 0D 0E 0E 
19c77     0D 0C 0B 0A 
19c7b     08 05 01 01 | 	byte	$06, $08, $0a, $0b, $0c, $0d, $0e, $0e, $0d, $0c, $0b, $0a, $08, $05, $01, $01
19c7f     FF FA F1 EE 
19c83     F2 F2 ED E8 
19c87     EC F3 F7 FA 
19c8b     FF 01 04 06 | 	byte	$ff, $fa, $f1, $ee, $f2, $f2, $ed, $e8, $ec, $f3, $f7, $fa, $ff, $01, $04, $06
19c8f     08 0A 0C 0D 
19c93     0E 0F 0F 0F 
19c97     0E 0D 0B 0A 
19c9b     08 03 01 00 | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0e, $0d, $0b, $0a, $08, $03, $01, $00
19c9f     FC F6 EF EF 
19ca3     F2 EF E9 E6 
19ca7     ED F3 F8 FC 
19cab     FF 02 04 07 | 	byte	$fc, $f6, $ef, $ef, $f2, $ef, $e9, $e6, $ed, $f3, $f8, $fc, $ff, $02, $04, $07
19caf     08 0A 0C 0D 
19cb3     0E 0F 0F 0E 
19cb7     0D 0C 0B 09 
19cbb     07 03 01 FF | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0e, $0d, $0c, $0b, $09, $07, $03, $01, $ff
19cbf     F9 F2 EF F0 
19cc3     F1 ED E5 E6 
19cc7     EE F5 FA FE 
19ccb     01 04 06 08 | 	byte	$f9, $f2, $ef, $f0, $f1, $ed, $e5, $e6, $ee, $f5, $fa, $fe, $01, $04, $06, $08
19ccf     0A 0C 0D 0E 
19cd3     0F 10 10 0F 
19cd7     0E 0C 0B 09 
19cdb     05 02 00 FB | 	byte	$0a, $0c, $0d, $0e, $0f, $10, $10, $0f, $0e, $0c, $0b, $09, $05, $02, $00, $fb
19cdf     F5 F2 EF F1 
19ce3     F0 E9 E3 E7 
19ce7     EF F6 FC 00 
19ceb     03 05 08 09 | 	byte	$f5, $f2, $ef, $f1, $f0, $e9, $e3, $e7, $ef, $f6, $fc, $00, $03, $05, $08, $09
19cef     0C 0D 0E 0F 
19cf3     0F 10 0F 0E 
19cf7     0D 0B 0A 09 
19cfb     04 01 FD F8 | 	byte	$0c, $0d, $0e, $0f, $0f, $10, $0f, $0e, $0d, $0b, $0a, $09, $04, $01, $fd, $f8
19cff     F1 F1 F0 F0 
19d03     ED E5 E1 E7 
19d07     F0 F8 FE 02 
19d0b     05 07 09 0B | 	byte	$f1, $f1, $f0, $f0, $ed, $e5, $e1, $e7, $f0, $f8, $fe, $02, $05, $07, $09, $0b
19d0f     0C 0E 0F 10 
19d13     10 10 10 0F 
19d17     0E 0C 0A 08 
19d1b     03 00 FC F4 | 	byte	$0c, $0e, $0f, $10, $10, $10, $10, $0f, $0e, $0c, $0a, $08, $03, $00, $fc, $f4
19d1f     F2 F3 F0 EF 
19d23     EA E2 E0 E8 
19d27     F1 F9 00 04 
19d2b     06 09 0A 0C | 	byte	$f2, $f3, $f0, $ef, $ea, $e2, $e0, $e8, $f1, $f9, $00, $04, $06, $09, $0a, $0c
19d2f     0D 0F 10 10 
19d33     10 11 10 0F 
19d37     0D 0B 0A 06 
19d3b     01 FD F8 F1 | 	byte	$0d, $0f, $10, $10, $10, $11, $10, $0f, $0d, $0b, $0a, $06, $01, $fd, $f8, $f1
19d3f     F2 F3 F0 ED 
19d43     E6 DE DF E9 
19d47     F2 FC 02 05 
19d4b     08 0A 0C 0D | 	byte	$f2, $f3, $f0, $ed, $e6, $de, $df, $e9, $f2, $fc, $02, $05, $08, $0a, $0c, $0d
19d4f     0F 10 10 11 
19d53     11 11 10 0F 
19d57     0D 0C 0A 05 
19d5b     FF FB F4 F1 | 	byte	$0f, $10, $10, $11, $11, $11, $10, $0f, $0d, $0c, $0a, $05, $ff, $fb, $f4, $f1
19d5f     F3 F3 EF EB 
19d63     E3 DC E0 EA 
19d67     F4 FF 05 08 
19d6b     0A 0C 0E 10 | 	byte	$f3, $f3, $ef, $eb, $e3, $dc, $e0, $ea, $f4, $ff, $05, $08, $0a, $0c, $0e, $10
19d6f     11 12 12 12 
19d73     12 12 11 10 
19d77     0E 0C 0A 03 
19d7b     FD F8 F1 F1 | 	byte	$11, $12, $12, $12, $12, $12, $11, $10, $0e, $0c, $0a, $03, $fd, $f8, $f1, $f1
19d7f     F3 F3 ED E7 
19d83     E0 DA E1 EB 
19d87     F7 00 07 09 
19d8b     0B 0D 0E 10 | 	byte	$f3, $f3, $ed, $e7, $e0, $da, $e1, $eb, $f7, $00, $07, $09, $0b, $0d, $0e, $10
19d8f     11 12 12 12 
19d93     12 12 11 0F 
19d97     0D 0C 07 01 
19d9b     FB F5 F1 F2 | 	byte	$11, $12, $12, $12, $12, $12, $11, $0f, $0d, $0c, $07, $01, $fb, $f5, $f1, $f2
19d9f     F4 F2 EA E3 
19da3     DB D9 E1 ED 
19da7     F9 03 09 0B 
19dab     0D 0F 10 11 | 	byte	$f4, $f2, $ea, $e3, $db, $d9, $e1, $ed, $f9, $03, $09, $0b, $0d, $0f, $10, $11
19daf     13 13 13 13 
19db3     13 13       | 	byte	$13[6]
19db5     11 0F 0D 0B 
19db9     05 FE F8 F2 
19dbd     F1 F2 F4 F0 
19dc1     E7 DF D9 DA | 	byte	$11, $0f, $0d, $0b, $05, $fe, $f8, $f2, $f1, $f2, $f4, $f0, $e7, $df, $d9, $da
19dc5     E3 F0 FC 06 
19dc9     0B 0D 0E 10 
19dcd     12 13 14 14 
19dd1     14 14 13 12 | 	byte	$e3, $f0, $fc, $06, $0b, $0d, $0e, $10, $12, $13, $14, $14, $14, $14, $13, $12
19dd5     11 0F 0D 09 
19dd9     02 FB F6 F1 
19ddd     F0 F1 F2 EC 
19de1     E2 DB D6 DA | 	byte	$11, $0f, $0d, $09, $02, $fb, $f6, $f1, $f0, $f1, $f2, $ec, $e2, $db, $d6, $da
19de5     E5 F3 FF 09 
19de9     0E 0F 10 12 
19ded     13 14 14 15 
19df1     15 14 14 13 | 	byte	$e5, $f3, $ff, $09, $0e, $0f, $10, $12, $13, $14, $14, $15, $15, $14, $14, $13
19df5     11 0F 0D 08 
19df9     FF F9 F3 F1 
19dfd     F1 F2 F1 E9 
19e01     DE D8 D6 DD | 	byte	$11, $0f, $0d, $08, $ff, $f9, $f3, $f1, $f1, $f2, $f1, $e9, $de, $d8, $d6, $dd
19e05     E8 F6 02 0B 
19e09     0F 10 12 13 
19e0d     14 15 15 16 
19e11     15 15 14 13 | 	byte	$e8, $f6, $02, $0b, $0f, $10, $12, $13, $14, $15, $15, $16, $15, $15, $14, $13
19e15     11 0F 0B 06 
19e19     FC F6 F1 F0 
19e1d     F0 F1 ED E3 
19e21     D9 D5 D6 DE | 	byte	$11, $0f, $0b, $06, $fc, $f6, $f1, $f0, $f0, $f1, $ed, $e3, $d9, $d5, $d6, $de
19e25     EA F8 05 0D 
19e29     11 12 14 15 
19e2d     16 16 16 16 
19e31     16 15 14 13 | 	byte	$ea, $f8, $05, $0d, $11, $12, $14, $15, $16, $16, $16, $16, $16, $15, $14, $13
19e35     11 0F 09 02 
19e39     F9 F3 F1 EF 
19e3d     F0 EE E8 DF 
19e41     D7 D4 D9 E2 | 	byte	$11, $0f, $09, $02, $f9, $f3, $f1, $ef, $f0, $ee, $e8, $df, $d7, $d4, $d9, $e2
19e45     ED FC 09 10 
19e49     13 15 16 17 
19e4d     18 18 18 18 
19e51     18 16 15 14 | 	byte	$ed, $fc, $09, $10, $13, $15, $16, $17, $18, $18, $18, $18, $18, $16, $15, $14
19e55     12 0D 07 FE 
19e59     F8 F2 F0 EF 
19e5d     EE EA E4 DA 
19e61     D4 D4 DA E4 | 	byte	$12, $0d, $07, $fe, $f8, $f2, $f0, $ef, $ee, $ea, $e4, $da, $d4, $d4, $da, $e4
19e65     F2 FF 0C 13 
19e69     15 16 17 18 
19e6d     19 19 19 18 
19e71     17 16 15 14 | 	byte	$f2, $ff, $0c, $13, $15, $16, $17, $18, $19, $19, $19, $18, $17, $16, $15, $14
19e75     11 0B 04 FC 
19e79     F5 F1 EF EE 
19e7d     EB E6 DF D6 
19e81     D2 D5 DC E6 | 	byte	$11, $0b, $04, $fc, $f5, $f1, $ef, $ee, $eb, $e6, $df, $d6, $d2, $d5, $dc, $e6
19e85     F4 03 0F 15 
19e89     17 18 19 1A 
19e8d     1B 1A 1A 19 
19e91     19 17 16 14 | 	byte	$f4, $03, $0f, $15, $17, $18, $19, $1a, $1b, $1a, $1a, $19, $19, $17, $16, $14
19e95     0F 08 01 F9 
19e99     F3 F0 EE EC 
19e9d     E7 E1 DA D4 
19ea1     D2 D7 DF EB | 	byte	$0f, $08, $01, $f9, $f3, $f0, $ee, $ec, $e7, $e1, $da, $d4, $d2, $d7, $df, $eb
19ea5     F8 07 12 17 
19ea9     19 1A 1B 1B 
19ead     1C 1C 1B 1A 
19eb1     18 17 16 12 | 	byte	$f8, $07, $12, $17, $19, $1a, $1b, $1b, $1c, $1c, $1b, $1a, $18, $17, $16, $12
19eb5     0D 05 FE F6 
19eb9     F1 EF EC E7 
19ebd     E0 DB D6 D1 
19ec1     D3 D9 E1 EF | 	byte	$0d, $05, $fe, $f6, $f1, $ef, $ec, $e7, $e0, $db, $d6, $d1, $d3, $d9, $e1, $ef
19ec5     FD 0A 15 1A 
19ec9     1B 1C 1D 1D 
19ecd     1D 1D 1C 1B 
19ed1     19 18 16 12 | 	byte	$fd, $0a, $15, $1a, $1b, $1c, $1d, $1d, $1d, $1d, $1c, $1b, $19, $18, $16, $12
19ed5     0B 03 FD F5 
19ed9     F0 ED E9 E3 
19edd     DB D7 D3 D1 
19ee1     D4 DC E5 F2 | 	byte	$0b, $03, $fd, $f5, $f0, $ed, $e9, $e3, $db, $d7, $d3, $d1, $d4, $dc, $e5, $f2
19ee5     02 0E 18 1D 
19ee9     1D 1E 1E 1F 
19eed     1F 1E 1D 1B 
19ef1     1A 18 15 10 | 	byte	$02, $0e, $18, $1d, $1d, $1e, $1e, $1f, $1f, $1e, $1d, $1b, $1a, $18, $15, $10
19ef5     08 01 F9 F2 
19ef9     EE EA E4 DB 
19efd     D6 D3 D1 D1 
19f01     D7 DE E8 F7 | 	byte	$08, $01, $f9, $f2, $ee, $ea, $e4, $db, $d6, $d3, $d1, $d1, $d7, $de, $e8, $f7
19f05     06 13 1B 1E 
19f09     1E 1F 20 1F 
19f0d     1F 1E 1D 1B 
19f11     19 18 13 0D | 	byte	$06, $13, $1b, $1e, $1e, $1f, $20, $1f, $1f, $1e, $1d, $1b, $19, $18, $13, $0d
19f15     05 FE F7 F0 
19f19     ED E7 DE D7 
19f1d     D3 D2 D2 D4 
19f21     DB E3 ED FC | 	byte	$05, $fe, $f7, $f0, $ed, $e7, $de, $d7, $d3, $d2, $d2, $d4, $db, $e3, $ed, $fc
19f25     0C 16 1D 1F 
19f29     20 21 21 21 
19f2d     20 1F 1D 1C 
19f31     1A 17 12 0A | 	byte	$0c, $16, $1d, $1f, $20, $21, $21, $21, $20, $1f, $1d, $1c, $1a, $17, $12, $0a
19f35     03 FD F7 EF 
19f39     EB E4 DA D3 
19f3d     D1 D3 D3 D7 
19f41     DE E6 F2 00 | 	byte	$03, $fd, $f7, $ef, $eb, $e4, $da, $d3, $d1, $d3, $d3, $d7, $de, $e6, $f2, $00
19f45     0E 19 1E 1F 
19f49     20 20 20 20 
19f4d     1F 1E 1C 1A 
19f51     19 16 0F 07 | 	byte	$0e, $19, $1e, $1f, $20, $20, $20, $20, $1f, $1e, $1c, $1a, $19, $16, $0f, $07
19f55     00 FB F4 ED 
19f59     E8 DE D6 D1 
19f5d     D1 D4 D4 DB 
19f61     E2 EB F6 05 | 	byte	$00, $fb, $f4, $ed, $e8, $de, $d6, $d1, $d1, $d4, $d4, $db, $e2, $eb, $f6, $05
19f65     11 1B 1F 20 
19f69     20 20 21 20 
19f6d     1F 1E 1C 1B 
19f71     18 13 0C 04 | 	byte	$11, $1b, $1f, $20, $20, $20, $21, $20, $1f, $1e, $1c, $1b, $18, $13, $0c, $04
19f75     FE FA F1 EB 
19f79     E4 D9 D2 D0 
19f7d     D2 D4 D8 DF 
19f81     E6 EF FB 0A | 	byte	$fe, $fa, $f1, $eb, $e4, $d9, $d2, $d0, $d2, $d4, $d8, $df, $e6, $ef, $fb, $0a
19f85     14 1D 20 20 
19f89     21 21 21 20 
19f8d     1F 1E 1C 1A 
19f91     16 10 09 01 | 	byte	$14, $1d, $20, $20, $21, $21, $21, $20, $1f, $1e, $1c, $1a, $16, $10, $09, $01
19f95     FD F7 EF E8 
19f99     DE D5 CF CF 
19f9d     D3 D4 DA E2 
19fa1     E9 F3 00 0D | 	byte	$fd, $f7, $ef, $e8, $de, $d5, $cf, $cf, $d3, $d4, $da, $e2, $e9, $f3, $00, $0d
19fa5     18 1E 21 21 
19fa9     21 21 20 1F 
19fad     1E 1D 1B 19 
19fb1     15 0E 06 00 | 	byte	$18, $1e, $21, $21, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $15, $0e, $06, $00
19fb5     FC F6 EC E4 
19fb9     DA D2 CF D2 
19fbd     D5 D7 DE E6 
19fc1     EE F8 05 10 | 	byte	$fc, $f6, $ec, $e4, $da, $d2, $cf, $d2, $d5, $d7, $de, $e6, $ee, $f8, $05, $10
19fc5     1A 20 21 21 
19fc9     21 21 20 1F 
19fcd     1D 1C 1B 18 
19fd1     12 0B 03 FF | 	byte	$1a, $20, $21, $21, $21, $21, $20, $1f, $1d, $1c, $1b, $18, $12, $0b, $03, $ff
19fd5     FA F3 E7 DE 
19fd9     D5 D0 CF D3 
19fdd     D5 D9 E2 E9 
19fe1     F1 FD 08 15 | 	byte	$fa, $f3, $e7, $de, $d5, $d0, $cf, $d3, $d5, $d9, $e2, $e9, $f1, $fd, $08, $15
19fe5     1D 21 21 21 
19fe9     21 20 20 1E 
19fed     1D 1B 19 15 
19ff1     0F 08 01 FC | 	byte	$1d, $21, $21, $21, $21, $20, $20, $1e, $1d, $1b, $19, $15, $0f, $08, $01, $fc
19ff5     F8 EE E3 D9 
19ff9     D2 CF D1 D5 
19ffd     D7 DE E6 ED 
1a001     F5 01 0E 18 | 	byte	$f8, $ee, $e3, $d9, $d2, $cf, $d1, $d5, $d7, $de, $e6, $ed, $f5, $01, $0e, $18
1a005     1F 22 21 22 
1a009     21 21 20 1F 
1a00d     1E 1C 19 14 
1a011     0D 05 00 FB | 	byte	$1f, $22, $21, $22, $21, $21, $20, $1f, $1e, $1c, $19, $14, $0d, $05, $00, $fb
1a015     F6 EA DE D6 
1a019     D1 D0 D3 D5 
1a01d     D9 E2 E9 F0 
1a021     FA 05 11 1B | 	byte	$f6, $ea, $de, $d6, $d1, $d0, $d3, $d5, $d9, $e2, $e9, $f0, $fa, $05, $11, $1b
1a025     1F 21 21 21 
1a029     20 20 1F 1E 
1a02d     1C 1A 16 11 
1a031     09 03 FD FA | 	byte	$1f, $21, $21, $21, $20, $20, $1f, $1e, $1c, $1a, $16, $11, $09, $03, $fd, $fa
1a035     F1 E5 D9 D3 
1a039     D1 D3 D5 D7 
1a03d     DD E5 ED F4 
1a041     FE 0A 14 1D | 	byte	$f1, $e5, $d9, $d3, $d1, $d3, $d5, $d7, $dd, $e5, $ed, $f4, $fe, $0a, $14, $1d
1a045     21 21 21 20 
1a049     20 1F 1E 1D 
1a04d     1C 19 14 0D 
1a051     06 01 FD F6 | 	byte	$21, $21, $21, $20, $20, $1f, $1e, $1d, $1c, $19, $14, $0d, $06, $01, $fd, $f6
1a055     EC DF D6 D3 
1a059     D3 D4 D6 D9 
1a05d     E0 E9 F0 F8 
1a061     03 0D 18 1E | 	byte	$ec, $df, $d6, $d3, $d3, $d4, $d6, $d9, $e0, $e9, $f0, $f8, $03, $0d, $18, $1e
1a065     21 21 21 20 
1a069     1F 1F 1E 1C 
1a06d     1A 17 10 0A 
1a071     04 FF FA F2 | 	byte	$21, $21, $21, $20, $1f, $1f, $1e, $1c, $1a, $17, $10, $0a, $04, $ff, $fa, $f2
1a075     E5 DA D4 D4 
1a079     D5 D5 D7 DB 
1a07d     E3 EC F3 FB 
1a081     06 11 1A 20 | 	byte	$e5, $da, $d4, $d4, $d5, $d5, $d7, $db, $e3, $ec, $f3, $fb, $06, $11, $1a, $20
1a085     22 21 21 20 
1a089     1F 1E 1D 1B 
1a08d     19 14 0E 07 
1a091     02 FD F7 EC | 	byte	$22, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $14, $0e, $07, $02, $fd, $f7, $ec
1a095     E1 D8 D5 D6 
1a099     D7 D7 DB DF 
1a09d     E8 F0 F6 00 
1a0a1     0A 14 1C 20 | 	byte	$e1, $d8, $d5, $d6, $d7, $d7, $db, $df, $e8, $f0, $f6, $00, $0a, $14, $1c, $20
1a0a5     21 20 20 1F 
1a0a9     1E 1D 1C 1A 
1a0ad     16 11 0B 05 
1a0b1     00 FB F2 E7 | 	byte	$21, $20, $20, $1f, $1e, $1d, $1c, $1a, $16, $11, $0b, $05, $00, $fb, $f2, $e7
1a0b5     DE D7 D6 D7 
1a0b9     D7 D8 DC E2 
1a0bd     EA F3 F9 03 
1a0c1     0D 17 1E 21 | 	byte	$de, $d7, $d6, $d7, $d7, $d8, $dc, $e2, $ea, $f3, $f9, $03, $0d, $17, $1e, $21
1a0c5     21 20 1F 1E 
1a0c9     1E 1C 1B 18 
1a0cd     13 0D 07 03 
1a0d1     FE F7 ED E2 | 	byte	$21, $20, $1f, $1e, $1e, $1c, $1b, $18, $13, $0d, $07, $03, $fe, $f7, $ed, $e2
1a0d5     DB D7 D9 D9 
1a0d9     D8 DB DF E5 
1a0dd     EE F6 FD 07 
1a0e1     11 1A 1F 22 | 	byte	$db, $d7, $d9, $d9, $d8, $db, $df, $e5, $ee, $f6, $fd, $07, $11, $1a, $1f, $22
1a0e5     21 20 1F 1F 
1a0e9     1E 1C 1B 17 
1a0ed     11 0C 06 02 
1a0f1     FC F3 E9 E0 | 	byte	$21, $20, $1f, $1f, $1e, $1c, $1b, $17, $11, $0c, $06, $02, $fc, $f3, $e9, $e0
1a0f5     DA D9 DA DA 
1a0f9     DA DE E2 E9 
1a0fd     F1 F8 00 09 
1a101     13 1B 20 21 | 	byte	$da, $d9, $da, $da, $da, $de, $e2, $e9, $f1, $f8, $00, $09, $13, $1b, $20, $21
1a105     20 1F 1F 1D 
1a109     1D 1B 18 13 
1a10d     0E 09 04 FF 
1a111     F9 EF E5 DE | 	byte	$20, $1f, $1f, $1d, $1d, $1b, $18, $13, $0e, $09, $04, $ff, $f9, $ef, $e5, $de
1a115     DB DB DC DB 
1a119     DD E1 E5 EC 
1a11d     F5 FA 03 0C 
1a121     15 1D 20 20 | 	byte	$db, $db, $dc, $db, $dd, $e1, $e5, $ec, $f5, $fa, $03, $0c, $15, $1d, $20, $20
1a125     20 1E 1E 1D 
1a129     1B 19 16 11 
1a12d     0B 06 03 FD 
1a131     F5 EA E2 DE | 	byte	$20, $1e, $1e, $1d, $1b, $19, $16, $11, $0b, $06, $03, $fd, $f5, $ea, $e2, $de
1a135     DC DD DD DC 
1a139     E0 E3 E8 F0 
1a13d     F7 FD 06 0E 
1a141     17 1E 20 20 | 	byte	$dc, $dd, $dd, $dc, $e0, $e3, $e8, $f0, $f7, $fd, $06, $0e, $17, $1e, $20, $20
1a145     1F 1E 1D 1C 
1a149     1B 18 13 0D 
1a14d     09 04 01 FA 
1a151     F0 E7 E1 DE | 	byte	$1f, $1e, $1d, $1c, $1b, $18, $13, $0d, $09, $04, $01, $fa, $f0, $e7, $e1, $de
1a155     DE DE DE DE 
1a159     E2 E4 E9 F2 
1a15d     F8 00 08 11 
1a161     18 1E 20 1F | 	byte	$de, $de, $de, $de, $e2, $e4, $e9, $f2, $f8, $00, $08, $11, $18, $1e, $20, $1f
1a165     1F 1E 1D 1C 
1a169     19 15 10 0B 
1a16d     07 03 FE F6 
1a171     EC E5 E2 E0 | 	byte	$1f, $1e, $1d, $1c, $19, $15, $10, $0b, $07, $03, $fe, $f6, $ec, $e5, $e2, $e0
1a175     E0 E1 DF E2 
1a179     E6 E8 EE F6 
1a17d     FB 02 0A 12 
1a181     1A 1F 1F 1F | 	byte	$e0, $e1, $df, $e2, $e6, $e8, $ee, $f6, $fb, $02, $0a, $12, $1a, $1f, $1f, $1f
1a185     1D 1C 1B 1A 
1a189     16 12 0D 08 
1a18d     05 02 FB F2 
1a191     E9 E4 E2 E1 | 	byte	$1d, $1c, $1b, $1a, $16, $12, $0d, $08, $05, $02, $fb, $f2, $e9, $e4, $e2, $e1
1a195     E2 E0 E0 E4 
1a199     E7 EA F0 F7 
1a19d     FD 04 0C 14 
1a1a1     1A 1E 1F 1E | 	byte	$e2, $e0, $e0, $e4, $e7, $ea, $f0, $f7, $fd, $04, $0c, $14, $1a, $1e, $1f, $1e
1a1a5     1D 1B 1A 18 
1a1a9     14 0F 0B 07 
1a1ad     04 FF F7 EF 
1a1b1     E7 E4 E3 E3 | 	byte	$1d, $1b, $1a, $18, $14, $0f, $0b, $07, $04, $ff, $f7, $ef, $e7, $e4, $e3, $e3
1a1b5     E3 E1 E3 E7 
1a1b9     E9 EC F4 FA 
1a1bd     FF 06 0E 15 
1a1c1     1C 1F 1F 1E | 	byte	$e3, $e1, $e3, $e7, $e9, $ec, $f4, $fa, $ff, $06, $0e, $15, $1c, $1f, $1f, $1e
1a1c5     1C 1B 1A 16 
1a1c9     12 0D 09 06 
1a1cd     03 FD F5 EC 
1a1d1     E8 E6 E5 E5 | 	byte	$1c, $1b, $1a, $16, $12, $0d, $09, $06, $03, $fd, $f5, $ec, $e8, $e6, $e5, $e5
1a1d5     E4 E3 E5 E9 
1a1d9     EB F0 F6 FB 
1a1dd     01 08 0F 16 
1a1e1     1C 1E 1E 1C | 	byte	$e4, $e3, $e5, $e9, $eb, $f0, $f6, $fb, $01, $08, $0f, $16, $1c, $1e, $1e, $1c
1a1e5     1B 1A 17 13 
1a1e9     0E 0A 07 05 
1a1ed     00 F9 F1 EA 
1a1f1     E7 E7 E6 E6 | 	byte	$1b, $1a, $17, $13, $0e, $0a, $07, $05, $00, $f9, $f1, $ea, $e7, $e7, $e6, $e6
1a1f5     E5 E5 E8 EC 
1a1f9     EE F2 F9 FD 
1a1fd     02 09 10 17 
1a201     1B 1D 1D 1C | 	byte	$e5, $e5, $e8, $ec, $ee, $f2, $f9, $fd, $02, $09, $10, $17, $1b, $1d, $1d, $1c
1a205     1A 18 15 10 
1a209     0D 09 07 03 
1a20d     FE F6 EE EA 
1a211     E8 E8 E7 E7 | 	byte	$1a, $18, $15, $10, $0d, $09, $07, $03, $fe, $f6, $ee, $ea, $e8, $e8, $e7, $e7
1a215     E5 E7 EA EE 
1a219     F0 F5 FA FE 
1a21d     04 0A 11 18 
1a221     1B 1D 1C 1B | 	byte	$e5, $e7, $ea, $ee, $f0, $f5, $fa, $fe, $04, $0a, $11, $18, $1b, $1d, $1c, $1b
1a225     19 16 12 0E 
1a229     0A 07 05 01 
1a22d     FB F3 EC E9 
1a231     E9 E9 E8 E8 | 	byte	$19, $16, $12, $0e, $0a, $07, $05, $01, $fb, $f3, $ec, $e9, $e9, $e9, $e8, $e8
1a235     E6 E9 ED F0 
1a239     F1 F6 FB FF 
1a23d     04 0B 12 18 
1a241     1B 1C 1B 1A | 	byte	$e6, $e9, $ed, $f0, $f1, $f6, $fb, $ff, $04, $0b, $12, $18, $1b, $1c, $1b, $1a
1a245     18 14 11 0C 
1a249     09 07 04 FF 
1a24d     F8 F1 EC EB 
1a251     EB EA EA E9 | 	byte	$18, $14, $11, $0c, $09, $07, $04, $ff, $f8, $f1, $ec, $eb, $eb, $ea, $ea, $e9
1a255     E9 EC F0 F2 
1a259     F4 F9 FD 01 
1a25d     06 0C 13 18 
1a261     1B 1B 1A 18 | 	byte	$e9, $ec, $f0, $f2, $f4, $f9, $fd, $01, $06, $0c, $13, $18, $1b, $1b, $1a, $18
1a265     15 11 0D 0A 
1a269     08 06 02 FC 
1a26d     F5 EF EC EC 
1a271     EC EB EB E9 | 	byte	$15, $11, $0d, $0a, $08, $06, $02, $fc, $f5, $ef, $ec, $ec, $ec, $eb, $eb, $e9
1a275     EA ED F1 F3 
1a279     F5 FA FE 02 
1a27d     07 0D 13 18 
1a281     1A 1B 19 16 | 	byte	$ea, $ed, $f1, $f3, $f5, $fa, $fe, $02, $07, $0d, $13, $18, $1a, $1b, $19, $16
1a285     13 0F 0C 09 
1a289     07 05 FF F9 
1a28d     F3 EE ED ED 
1a291     ED EC EB EA | 	byte	$13, $0f, $0c, $09, $07, $05, $ff, $f9, $f3, $ee, $ed, $ed, $ed, $ec, $eb, $ea
1a295     EC F0 F3 F5 
1a299     F7 FC FF 03 
1a29d     09 0E 14 18 
1a2a1     1B 1A 18 14 | 	byte	$ec, $f0, $f3, $f5, $f7, $fc, $ff, $03, $09, $0e, $14, $18, $1b, $1a, $18, $14
1a2a5     11 0E 0B 09 
1a2a9     07 04 FE F7 
1a2ad     F2 EF EF EF 
1a2b1     EE EE EC EC | 	byte	$11, $0e, $0b, $09, $07, $04, $fe, $f7, $f2, $ef, $ef, $ef, $ee, $ee, $ec, $ec
1a2b5     EE F2 F5 F6 
1a2b9     F9 FD 00 03 
1a2bd     09 0E 14 18 
1a2c1     19 18 15 12 | 	byte	$ee, $f2, $f5, $f6, $f9, $fd, $00, $03, $09, $0e, $14, $18, $19, $18, $15, $12
1a2c5     0F 0C 0A 08 
1a2c9     06 01 FB F4 
1a2cd     F1 EF F0 F0 
1a2d1     EF EF ED EE | 	byte	$0f, $0c, $0a, $08, $06, $01, $fb, $f4, $f1, $ef, $f0, $f0, $ef, $ef, $ed, $ee
1a2d5     F0 F4 F7 F8 
1a2d9     FA FE 00 04 
1a2dd     09 0F 14 17 
1a2e1     18 17 14 11 | 	byte	$f0, $f4, $f7, $f8, $fa, $fe, $00, $04, $09, $0f, $14, $17, $18, $17, $14, $11
1a2e5     0D 0B 0A 08 
1a2e9     04 FF F9 F4 
1a2ed     F1 F1 F1 F0 
1a2f1     F0 EF EE EF | 	byte	$0d, $0b, $0a, $08, $04, $ff, $f9, $f4, $f1, $f1, $f1, $f0, $f0, $ef, $ee, $ef
1a2f5     F2 F5 F8 F9 
1a2f9     FB FE 01 05 
1a2fd     09 0F 13 17 
1a301     17 15 11 0F | 	byte	$f2, $f5, $f8, $f9, $fb, $fe, $01, $05, $09, $0f, $13, $17, $17, $15, $11, $0f
1a305     0C 0A 09 06 
1a309     02 FD F7 F4 
1a30d     F1 F1 F2 F1 
1a311     F1 EF EE F0 | 	byte	$0c, $0a, $09, $06, $02, $fd, $f7, $f4, $f1, $f1, $f2, $f1, $f1, $ef, $ee, $f0
1a315     F3 F7 F9 F9 
1a319     FC FE 01 05 
1a31d     0A 0F 14 16 
1a321     15 13 10 0E | 	byte	$f3, $f7, $f9, $f9, $fc, $fe, $01, $05, $0a, $0f, $14, $16, $15, $13, $10, $0e
1a325     0C 0A 08 05 
1a329     00 FB F6 F3 
1a32d     F2 F3 F3 F2 
1a331     F2 F0 F0 F2 | 	byte	$0c, $0a, $08, $05, $00, $fb, $f6, $f3, $f2, $f3, $f3, $f2, $f2, $f0, $f0, $f2
1a335     F6 F8 FA FB 
1a339     FE 00 03 06 
1a33d     0B 0F 14 15 
1a341     14 12 0F 0C | 	byte	$f6, $f8, $fa, $fb, $fe, $00, $03, $06, $0b, $0f, $14, $15, $14, $12, $0f, $0c
1a345     0B 09 07 03 
1a349     FE F9 F5 F3 
1a34d     F3 F4 F4 F3 
1a351     F3 F1 F1 F3 | 	byte	$0b, $09, $07, $03, $fe, $f9, $f5, $f3, $f3, $f4, $f4, $f3, $f3, $f1, $f1, $f3
1a355     F6 F9 FB FB 
1a359     FD 00 02 06 
1a35d     0B 0F 12 14 
1a361     12 10 0D 0C | 	byte	$f6, $f9, $fb, $fb, $fd, $00, $02, $06, $0b, $0f, $12, $14, $12, $10, $0d, $0c
1a365     0A 08 06 01 
1a369     FC F7 F5 F4 
1a36d     F4 F5 F4 F3 
1a371     F3 F1 F3 F5 | 	byte	$0a, $08, $06, $01, $fc, $f7, $f5, $f4, $f4, $f5, $f4, $f3, $f3, $f1, $f3, $f5
1a375     F8 FB FC FC 
1a379     FE 01 03 07 
1a37d     0C 10 12 13 
1a381     11 0F 0D 0C | 	byte	$f8, $fb, $fc, $fc, $fe, $01, $03, $07, $0c, $10, $12, $13, $11, $0f, $0d, $0c
1a385     0B 08 05 01 
1a389     FB F8 F6 F5 
1a38d     F6 F7 F5 F4 
1a391     F3 F3 F5 F7 | 	byte	$0b, $08, $05, $01, $fb, $f8, $f6, $f5, $f6, $f7, $f5, $f4, $f3, $f3, $f5, $f7
1a395     F9 FB FD FD 
1a399     FF 01 04 07 
1a39d     0B 0F 10 11 
1a3a1     10 0E 0C 0B | 	byte	$f9, $fb, $fd, $fd, $ff, $01, $04, $07, $0b, $0f, $10, $11, $10, $0e, $0c, $0b
1a3a5     09 07 03 FD 
1a3a9     F9 F7 F5 F5 
1a3ad     F6 F6 F5 F5 
1a3b1     F4 F4 F5 F8 | 	byte	$09, $07, $03, $fd, $f9, $f7, $f5, $f5, $f6, $f6, $f5, $f5, $f4, $f4, $f5, $f8
1a3b5     FA FC FE FE 
1a3b9     00 02 04 08 
1a3bd     0B 0E 0F 10 
1a3c1     0F 0D 0C 0A | 	byte	$fa, $fc, $fe, $fe, $00, $02, $04, $08, $0b, $0e, $0f, $10, $0f, $0d, $0c, $0a
1a3c5     08 05 02 FC 
1a3c9     F9 F7 F7 F7 
1a3cd     F8 F7 F6 F6 
1a3d1     F4 F5 F7 F9 | 	byte	$08, $05, $02, $fc, $f9, $f7, $f7, $f7, $f8, $f7, $f6, $f6, $f4, $f5, $f7, $f9
1a3d5     FB FD FE FE 
1a3d9     00 02 05 08 
1a3dd     0B 0D 0F 0E 
1a3e1     0E 0C 0B 09 | 	byte	$fb, $fd, $fe, $fe, $00, $02, $05, $08, $0b, $0d, $0f, $0e, $0e, $0c, $0b, $09
1a3e5     07 04 00 FB 
1a3e9     F8 F7 F7 F7 
1a3ed     F7 F7 F6 F5 
1a3f1     F4 F5 F7 F9 | 	byte	$07, $04, $00, $fb, $f8, $f7, $f7, $f7, $f7, $f7, $f6, $f5, $f4, $f5, $f7, $f9
1a3f5     FC FE FF FE 
1a3f9     00 02 04 08 
1a3fd     0A 0C 0D 0D 
1a401     0D 0C 0A 09 | 	byte	$fc, $fe, $ff, $fe, $00, $02, $04, $08, $0a, $0c, $0d, $0d, $0d, $0c, $0a, $09
1a405     06 03 FE FA 
1a409     F8 F7 F8 F9 
1a40d     F9 F8 F7 F7 
1a411     F6 F7 F8 FA | 	byte	$06, $03, $fe, $fa, $f8, $f7, $f8, $f9, $f9, $f8, $f7, $f7, $f6, $f7, $f8, $fa
1a415     FD FF FF 00 
1a419     01 03 06 08 
1a41d     0A 0C 0D 0D 
1a421     0C 0B 09 07 | 	byte	$fd, $ff, $ff, $00, $01, $03, $06, $08, $0a, $0c, $0d, $0d, $0c, $0b, $09, $07
1a425     05 00 FC F9 
1a429     F8 F8 F8 F9 
1a42d     F9 F8 F8 F6 
1a431     F6 F7 F9 FB | 	byte	$05, $00, $fc, $f9, $f8, $f8, $f8, $f9, $f9, $f8, $f8, $f6, $f6, $f7, $f9, $fb
1a435     FD FF FE FF 
1a439     01 03 05 07 
1a43d     09 0B 0C 0C 
1a441     0C 0A 09 06 | 	byte	$fd, $ff, $fe, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0c, $0c, $0a, $09, $06
1a445     03 FF FB F9 
1a449     F8 F8 F9 F9 
1a44d     F9 F8 F7 F6 
1a451     F7 F8 FA FC | 	byte	$03, $ff, $fb, $f9, $f8, $f8, $f9, $f9, $f9, $f8, $f7, $f6, $f7, $f8, $fa, $fc
1a455     FE FF FF 00 
1a459     02 04 06 08 
1a45d     09 0B 0C 0C 
1a461     0C 0A 08 06 | 	byte	$fe, $ff, $ff, $00, $02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0a, $08, $06
1a465     02 FF FB FA 
1a469     F9 FA FA FA 
1a46d     FB FA F8 F7 
1a471     F8 FA FB FD | 	byte	$02, $ff, $fb, $fa, $f9, $fa, $fa, $fa, $fb, $fa, $f8, $f7, $f8, $fa, $fb, $fd
1a475     FF 00 FF 01 
1a479     02 04 05 08 
1a47d     09 0A 0B 0B 
1a481     0A 09 06 04 | 	byte	$ff, $00, $ff, $01, $02, $04, $05, $08, $09, $0a, $0b, $0b, $0a, $09, $06, $04
1a485     00 FD FA F9 
1a489     F9 FA FA FA 
1a48d     FA F9 F8 F8 
1a491     F9 FA FB FE | 	byte	$00, $fd, $fa, $f9, $f9, $fa, $fa, $fa, $fa, $f9, $f8, $f8, $f9, $fa, $fb, $fe
1a495     00 00 00 02 
1a499     03 04 05 07 
1a49d     08 0A 0A 0A 
1a4a1     09 08 06 03 | 	byte	$00, $00, $00, $02, $03, $04, $05, $07, $08, $0a, $0a, $0a, $09, $08, $06, $03
1a4a5     FF FC FA FA 
1a4a9     FB FB FB FB 
1a4ad     FB F9 F8 F8 
1a4b1     F9 FA FC FE | 	byte	$ff, $fc, $fa, $fa, $fb, $fb, $fb, $fb, $fb, $f9, $f8, $f8, $f9, $fa, $fc, $fe
1a4b5     00 00 00 02 
1a4b9     03 04 06 07 
1a4bd     08 09 0A 0A 
1a4c1     09 07 04 01 | 	byte	$00, $00, $00, $02, $03, $04, $06, $07, $08, $09, $0a, $0a, $09, $07, $04, $01
1a4c5     FE FB FA FA 
1a4c9     FB FB FB FC 
1a4cd     FB F9 F8 F9 
1a4d1     F9 FA FC FE | 	byte	$fe, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fb, $f9, $f8, $f9, $f9, $fa, $fc, $fe
1a4d5     00 00 00 02 
1a4d9     02 03 05 06 
1a4dd     07 08 09 09 
1a4e1     08 05 04 01 | 	byte	$00, $00, $00, $02, $02, $03, $05, $06, $07, $08, $09, $09, $08, $05, $04, $01
1a4e5     FE FB FB FB 
1a4e9     FB FC FC FD 
1a4ed     FB F9 F9 FA 
1a4f1     FB FB FD FF | 	byte	$fe, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fb, $f9, $f9, $fa, $fb, $fb, $fd, $ff
1a4f5     01 01 02 03 
1a4f9     04 05 05 06 
1a4fd     07 08 09 08 
1a501     06 04 02 FF | 	byte	$01, $01, $02, $03, $04, $05, $05, $06, $07, $08, $09, $08, $06, $04, $02, $ff
1a505     FC FB FB FC 
1a509     FC FC FD FD 
1a50d     FB F9 FA FA 
1a511     FB FC FD FF | 	byte	$fc, $fb, $fb, $fc, $fc, $fc, $fd, $fd, $fb, $f9, $fa, $fa, $fb, $fc, $fd, $ff
1a515     00 00 01 03 
1a519     03 04 05 06 
1a51d     07 08 08 07 
1a521     06 03 01 FE | 	byte	$00, $00, $01, $03, $03, $04, $05, $06, $07, $08, $08, $07, $06, $03, $01, $fe
1a525     FC FB FC FC 
1a529     FC FD FD FD 
1a52d     FA F9 FA FB 
1a531     FB FC FE 00 | 	byte	$fc, $fb, $fc, $fc, $fc, $fd, $fd, $fd, $fa, $f9, $fa, $fb, $fb, $fc, $fe, $00
1a535     00 01 02 03 
1a539     03 04 05 06 
1a53d     07 08 08 07 
1a541     05 03 01 FE | 	byte	$00, $01, $02, $03, $03, $04, $05, $06, $07, $08, $08, $07, $05, $03, $01, $fe
1a545     FD FD FD FD 
1a549     FE FE FE FD 
1a54d     FB FA FB FB 
1a551     FC FD FE 00 | 	byte	$fd, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $00
1a555     01 01 02 03 
1a559     03 04 05 06 
1a55d     07 07 07 05 
1a561     03 01 FF FD | 	byte	$01, $01, $02, $03, $03, $04, $05, $06, $07, $07, $07, $05, $03, $01, $ff, $fd
1a565     FD FC FD FD 
1a569     FE FE FE FC 
1a56d     FA FB FB FB 
1a571     FC FD FF 00 | 	byte	$fd, $fc, $fd, $fd, $fe, $fe, $fe, $fc, $fa, $fb, $fb, $fb, $fc, $fd, $ff, $00
1a575     00 01 03 03 
1a579     03 03 04 05 
1a57d     07 07 06 04 
1a581     02 01 FE FD | 	byte	$00, $01, $03, $03, $03, $03, $04, $05, $07, $07, $06, $04, $02, $01, $fe, $fd
1a585     FD FD FE FE 
1a589     FE FF FE FC 
1a58d     FB FB FB FC 
1a591     FC FD FF 00 | 	byte	$fd, $fd, $fe, $fe, $fe, $ff, $fe, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00
1a595     00 02 03 02 
1a599     03 04 05 06 
1a59d     06 06 05 03 
1a5a1     01 00 FE FD | 	byte	$00, $02, $03, $02, $03, $04, $05, $06, $06, $06, $05, $03, $01, $00, $fe, $fd
1a5a5     FE FE FE FE 
1a5a9     FE          | 	byte	$fe[5]
1a5aa     FF FD FC FB 
1a5ae     FB FB FC FC 
1a5b2     FD FF 00 01 
1a5b6     02 02 02 02 | 	byte	$ff, $fd, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00, $01, $02, $02, $02, $02
1a5ba     03 04 05 06 
1a5be     05 04 02 01 
1a5c2     00 FF FF FF 
1a5c6     FE FE FF FF | 	byte	$03, $04, $05, $06, $05, $04, $02, $01, $00, $ff, $ff, $ff, $fe, $fe, $ff, $ff
1a5ca     FF FD FC FC 
1a5ce     FC FC FC FD 
1a5d2     FF 00 00 01 
1a5d6     02 03 02 03 | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $ff, $00, $00, $01, $02, $03, $02, $03
1a5da     04 05 06 05 
1a5de     04 03 01 00 
1a5e2     FF FE FE FE 
1a5e6     FE FF FF FF | 	byte	$04, $05, $06, $05, $04, $03, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff
1a5ea     FE FD FD FC 
1a5ee     FC FC FD FD 
1a5f2     FE FF FF 00 
1a5f6     01 01 01 02 | 	byte	$fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00, $01, $01, $01, $02
1a5fa     03 04 05 05 
1a5fe     03 02 01 00 
1a602     FF FF FF FF 
1a606     FF FF FF FF | 	byte	$03, $04, $05, $05, $03, $02, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1a60a     FD FD FD FC 
1a60e     FC FC FC FE 
1a612     FF 00 00 00 
1a616     01 02 02 03 | 	byte	$fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00, $01, $02, $02, $03
1a61a     04 05 05 04 
1a61e     03 02 01 00 
1a622     00 00 00 00 
1a626     00 01 00 FF | 	byte	$04, $05, $05, $04, $03, $02, $01, $00, $00, $00, $00, $00, $00, $01, $00, $ff
1a62a     FF FF FE FD 
1a62e     FD FD FD FF 
1a632     FF 00 00 01 
1a636     01 02 02 03 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $00, $00, $01, $01, $02, $02, $03
1a63a     03 04 04 03 
1a63e     01 00 00 00 
1a642     FF 00 00 FF 
1a646     00 00 FF FE | 	byte	$03, $04, $04, $03, $01, $00, $00, $00, $ff, $00, $00, $ff, $00, $00, $ff, $fe
1a64a     FE FE FE FD 
1a64e     FD FD FD FF 
1a652     FF FF 00 01 
1a656     01 01 02 03 | 	byte	$fe, $fe, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $00, $01, $01, $01, $02, $03
1a65a     03 03 03 02 
1a65e     01 00 01 00 
1a662     00 00 00 01 
1a666     01 01 FF FF | 	byte	$03, $03, $03, $02, $01, $00, $01, $00, $00, $00, $00, $01, $01, $01, $ff, $ff
1a66a     FF FF FD FD 
1a66e     FD FD FE FF 
1a672     FF FF FF 00 
1a676     01 01 02 03 | 	byte	$ff, $ff, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $ff, $ff, $00, $01, $01, $02, $03
1a67a     03 03 02 02 
1a67e     01 01 01 00 
1a682     00 00 01 01 
1a686     01 00 FF FF | 	byte	$03, $03, $02, $02, $01, $01, $01, $00, $00, $00, $01, $01, $01, $00, $ff, $ff
1a68a     FF FE FD FD 
1a68e     FD FD FD FE 
1a692     FE FE 00 00 
1a696     00 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $00, $00, $00, $00, $01, $02
1a69a     02 02 01 01 
1a69e     00 01 01 01 
1a6a2     01 01 01 01 
1a6a6     01 00 FF FF | 	byte	$02, $02, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $ff
1a6aa     FF FF FE FD 
1a6ae     FD FD FE FF 
1a6b2     FE FF 00 00 
1a6b6     01 01 02 02 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $ff, $fe, $ff, $00, $00, $01, $01, $02, $02
1a6ba     02 02 01 01 
1a6be     01 01 01 00 
1a6c2     01 01 01 01 
1a6c6     00 FF 00 FF | 	byte	$02, $02, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $00, $ff, $00, $ff
1a6ca     FF FF FE FD 
1a6ce     FD FD FE FE 
1a6d2     FE FE FF FF 
1a6d6     00 00 01 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01
1a6da     01 01 01 01 
1a6de     01 01 01 01 
1a6e2     01 01 01 01 | 	byte	$01[12]
1a6e6     00 FF 00 FF 
1a6ea     FF FE FE FD 
1a6ee     FD FE FE FE 
1a6f2     FE FE FF FF | 	byte	$00, $ff, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff
1a6f6     00 00 01 02 
1a6fa     01 02 02 02 
1a6fe     02 02 02 02 
1a702     02 02 02 02 | 	byte	$00, $00, $01, $02, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
1a706     01 00 00 00 
1a70a     00 FF FF FF 
1a70e     FE FE FE FE 
1a712     FE FE FF FF | 	byte	$01, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff
1a716     00 00 01 01 
1a71a     01 01 01 01 
1a71e     02 01 01 01 
1a722     01 02 02 01 | 	byte	$00, $00, $01, $01, $01, $01, $01, $01, $02, $01, $01, $01, $01, $02, $02, $01
1a726     00 00 00 00 
1a72a     FF FF FE FE 
1a72e     FE FE FE FD 
1a732     FE FE FF FF | 	byte	$00, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $ff, $ff
1a736     00 00 00 01 
1a73a     01 01 01 01 
1a73e     02 01 01 02 
1a742     02 02 02 01 | 	byte	$00, $00, $00, $01, $01, $01, $01, $01, $02, $01, $01, $02, $02, $02, $02, $01
1a746     00 01 00 00 
1a74a     00 FF FE FE 
1a74e     FE FE FE FD 
1a752     FE FE FE FF | 	byte	$00, $01, $00, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff
1a756     00 00 00 01 
1a75a     01 01 02 02 
1a75e     02 01 02 02 
1a762     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $01, $02, $02, $02, $02, $01, $01
1a766     01 00 00 00 
1a76a     FF FF FE FE 
1a76e     FE FE FD FC 
1a772     FD FE FE FF | 	byte	$01, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fc, $fd, $fe, $fe, $ff
1a776     FF FF FF 00 
1a77a     01 01 02 02 
1a77e     02 02 02 03 
1a782     03 02 02 01 | 	byte	$ff, $ff, $ff, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $02, $02, $01
1a786     01 01 01 00 
1a78a     FF FF FF FE 
1a78e     FE FE FD FD 
1a792     FD FF FF FF | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $ff, $ff, $ff
1a796     00 00 00 01 
1a79a     02 02 02 02 
1a79e     02 02 02 02 
1a7a2     02 02 00 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $00, $00
1a7a6     00 01 00 00 
1a7aa     FF FF FF FE 
1a7ae     FE FE FC FC 
1a7b2     FD FD FE FE | 	byte	$00, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fc, $fc, $fd, $fd, $fe, $fe
1a7b6     FE FF 00 00 
1a7ba     01 02 02 02 
1a7be     02 02 02 02 
1a7c2     02 01 01 01 | 	byte	$fe, $ff, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1a7c6     01 00 00 FF 
1a7ca     FF FF FE FE 
1a7ce     FE FD FD FC 
1a7d2     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fd, $fe, $fe, $fe
1a7d6     FF 00 00 01 
1a7da     02 03 03 03 
1a7de     03 03 03 03 
1a7e2     02 02 02 02 | 	byte	$ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02
1a7e6     02 01 01 00 
1a7ea     FF 00 FF FE 
1a7ee     FE FD FC FD 
1a7f2     FD FD FE FE | 	byte	$02, $01, $01, $00, $ff, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fd, $fe, $fe
1a7f6     FF FF 00 01 
1a7fa     02 02 02 02 
1a7fe     02 03 02 02 
1a802     02 01 01 01 | 	byte	$ff, $ff, $00, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02, $01, $01, $01
1a806     01 01 00 FF 
1a80a     FF FF FE FE 
1a80e     FD FD FC FD 
1a812     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fe, $fe, $fe
1a816     FF 00 01 02 
1a81a     02 02 02 02 
1a81e     03 03 03 03 
1a822     02 01 01 01 | 	byte	$ff, $00, $01, $02, $02, $02, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01
1a826     01 01 00 00 
1a82a     FF FF FE FD 
1a82e     FD FC FC FC 
1a832     FD FD FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe
1a836     FF 00 01 02 
1a83a     03 02 02 03 
1a83e     03 03 03 02 
1a842     01 01 01 01 | 	byte	$ff, $00, $01, $02, $03, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01, $01
1a846     01 00 00 FF 
1a84a     FF FE FD FD 
1a84e     FC FC FC FC 
1a852     FD FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $fe
1a856     FE 00 01 02 
1a85a     02 02 02 03 
1a85e     03 03 03 03 
1a862     02 02 01 01 | 	byte	$fe, $00, $01, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01
1a866     01 01 00 FF 
1a86a     FF FE FE FD 
1a86e     FD FC FC FD 
1a872     FD FE FE FF | 	byte	$01, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $ff
1a876     00 01 02 02 
1a87a     02 03 03 03 
1a87e     02 02 02 02 
1a882     01 01 01 01 | 	byte	$00, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01
1a886     01 00 00 FF 
1a88a     FF FE FD FD 
1a88e     FD FC FC FC 
1a892     FC FD FD FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe
1a896     FF 01 01 02 
1a89a     02 03 03 03 
1a89e     03 03 03 01 
1a8a2     01 01 01 01 | 	byte	$ff, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01, $01
1a8a6     01 00 FF FF 
1a8aa     FE FE FD FD 
1a8ae     FC FC FC FC 
1a8b2     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
1a8b6     00 01 02 03 
1a8ba     03 03 04 03 
1a8be     03 04 03 02 
1a8c2     02 02 02 02 | 	byte	$00, $01, $02, $03, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02
1a8c6     02 01 00 FF 
1a8ca     FF FE FE FD 
1a8ce     FD FC FC FD 
1a8d2     FD FD FE FF | 	byte	$02, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $ff
1a8d6     00 01 02 02 
1a8da     03 03 03 03 
1a8de     03 03 02 01 
1a8e2     01 01 01 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
1a8e6     01 00 FF FF 
1a8ea     FE FE FD FD 
1a8ee     FD FC FD FD 
1a8f2     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
1a8f6     01 01 02 02 
1a8fa     03 03 03 03 
1a8fe     03 03 02 01 
1a902     01 01 02 01 | 	byte	$01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $02, $01
1a906     01 00 FF FF 
1a90a     FE FD FD FD 
1a90e     FD FC FD FD 
1a912     FD FE FF 00 | 	byte	$01, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $ff, $00
1a916     01 02 02 03 
1a91a     03 03 03 03 
1a91e     03 03 02 01 
1a922     01 01 01 01 | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
1a926     00 FF FF FE 
1a92a     FD FD FD FD 
1a92e     FC FC FC FC 
1a932     FD FD FE FF | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
1a936     00 01 02 02 
1a93a     03 03 03 03 
1a93e     03 02 02 02 
1a942     02 02 02 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01
1a946     00 FF FF FE 
1a94a     FD FD FD FD 
1a94e     FD FC FC FD 
1a952     FE FE FF 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fe, $fe, $ff, $01
1a956     01 02 03 03 
1a95a     03 03 03 03 
1a95e     03 02 01 01 
1a962     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
1a966     00 FF FF FE 
1a96a     FD FD FD FD 
1a96e     FD FC FC FC 
1a972     FD FE FF 00 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $ff, $00
1a976     01 01 02 03 
1a97a     03 03 03 03 
1a97e     03 02 01 01 
1a982     01 01 01 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
1a986     FF FF FE FD 
1a98a     FD FD FD FD 
1a98e     FC FC FC FD 
1a992     FE FE FF 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $01
1a996     01 02 03 03 
1a99a     04 03 03 04 
1a99e     03 02 02 02 
1a9a2     02 02 02 01 | 	byte	$01, $02, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02, $02, $01
1a9a6     00 FF FF FE 
1a9aa     FE FE FE FD 
1a9ae     FD FD FD FD 
1a9b2     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
1a9b6     01 02 03 03 
1a9ba     03 03 03 03 
1a9be     02 02 01 01 
1a9c2     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $01, $01, $00
1a9c6     FF FF FE FD 
1a9ca     FD FD FD FD 
1a9ce     FD FC FD FD 
1a9d2     FE FF 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01
1a9d6     01 02 03 03 
1a9da     03 03 03 03 
1a9de     02 02 02 02 
1a9e2     02 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
1a9e6     FF FF FE FD 
1a9ea     FD FD FD FD 
1a9ee     FC FC FD FD 
1a9f2     FE 00 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $00, $00, $01
1a9f6     02 03 03 03 
1a9fa     03 03 03 02 
1a9fe     02 02 01 02 
1aa02     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $02, $01, $01, $00, $ff
1aa06     FF FE FD FD 
1aa0a     FD FD FD FC 
1aa0e     FC FC FC FE 
1aa12     FF 00 00 00 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00
1aa16     01 02 03 03 
1aa1a     03 03 03 03 
1aa1e     02 02 02 02 
1aa22     02 01 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $00, $ff
1aa26     FF FE FD FD 
1aa2a     FD FD FD FD 
1aa2e     FC FD FD FE 
1aa32     FF 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01, $02
1aa36     02 03 03 03 
1aa3a     03 03 03 02 
1aa3e     01 02 02 01 
1aa42     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $02, $01, $01, $01, $00, $ff
1aa46     FE FE FD FD 
1aa4a     FD FD FD FD 
1aa4e     FC FD FE FE 
1aa52     FF 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $00, $00, $01
1aa56     02 03 03 03 
1aa5a     03 03 03 02 
1aa5e     01 02 01 01 
1aa62     01 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $01, $01, $01, $00, $ff, $fe
1aa66     FE FD FD FD 
1aa6a     FD FD FD FD 
1aa6e     FC FD FE FF 
1aa72     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02
1aa76     02 03 04 04 
1aa7a     04 04 03 02 
1aa7e     02 02 02 02 
1aa82     01 01 00 FF | 	byte	$02, $03, $04, $04, $04, $04, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff
1aa86     FE FE FD FD 
1aa8a     FD FD FD FD 
1aa8e     FD FD FE FF 
1aa92     00 00 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $00, $01, $02
1aa96     02 03 03 03 
1aa9a     03 03 02 02 
1aa9e     02 01 01 01 
1aaa2     00 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $01, $00, $00, $ff, $fe
1aaa6     FE FD FD FD 
1aaaa     FD FD FD FD 
1aaae     FD FE FF FF 
1aab2     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $02
1aab6     03 03 03 04 
1aaba     03 03 02 02 
1aabe     02 02 02 01 
1aac2     00 00 FF FE | 	byte	$03, $03, $03, $04, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $fe
1aac6     FE FD FD FD 
1aaca     FD FD FD FC 
1aace     FD FE FF 00 
1aad2     00 01 02 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02, $02
1aad6     03 03 04 04 
1aada     03 02 02 02 
1aade     02 01 01 01 
1aae2     00 FF FE FD | 	byte	$03, $03, $04, $04, $03, $02, $02, $02, $02, $01, $01, $01, $00, $ff, $fe, $fd
1aae6     FD FD FD FD 
1aaea     FC FC FC FC 
1aaee     FD FE FF 00 
1aaf2     00 01 01 02 | 	byte	$fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $00, $00, $01, $01, $02
1aaf6     02 03 03 03 
1aafa     03 02 02 02 
1aafe     02 02 02 01 
1ab02     00 FF FF FE | 	byte	$02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01, $00, $ff, $ff, $fe
1ab06     FD FD FD FD 
1ab0a     FD FD FD FD | 	byte	$fd[8]
1ab0e     FE FF 00 01 
1ab12     01 02 02 03 
1ab16     03 03 03 03 
1ab1a     03 02 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
1ab1e     01 01 01 00 
1ab22     00 FF FE FE 
1ab26     FD FD FD FD 
1ab2a     FD FD FD FD | 	byte	$01, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd
1ab2e     FE FF FF 00 
1ab32     00 01 02 02 
1ab36     02 03 04 03 
1ab3a     02 02 02 02 | 	byte	$fe, $ff, $ff, $00, $00, $01, $02, $02, $02, $03, $04, $03, $02, $02, $02, $02
1ab3e     01 01 00 00 
1ab42     FF FF FE FD 
1ab46     FC FC FC FC 
1ab4a     FD FD FD FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe
1ab4e     FE FF 00 01 
1ab52     01 02 03 03 
1ab56     04 04 04 03 
1ab5a     03 03 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $03, $03, $04, $04, $04, $03, $03, $03, $02, $02
1ab5e     02 01 01 00 
1ab62     00 FF FE FE 
1ab66     FD FD FD FD 
1ab6a     FD FD FD FE | 	byte	$02, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe
1ab6e     FF FF 00 00 
1ab72     01 02 03 03 
1ab76     03 03 03 02 
1ab7a     02 02 02 01 | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $01
1ab7e     01 00 00 00 
1ab82     FF FE FD FD 
1ab86     FC FC FD FD 
1ab8a     FD FD FD FE | 	byte	$01, $00, $00, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fe
1ab8e     FF 00 01 01 
1ab92     01 02 03 03 
1ab96     03 03 03 02 
1ab9a     02 02 02 02 | 	byte	$ff, $00, $01, $01, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02
1ab9e     02 01 00 00 
1aba2     FF FF FE FD 
1aba6     FD FC FD FD 
1abaa     FD FD FE FF | 	byte	$02, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
1abae     00 00 01 01 
1abb2     02 03 03 03 
1abb6     04 03 02 02 
1abba     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01
1abbe     01 00 00 FF 
1abc2     FF FD FD FC 
1abc6     FD FC FC FC 
1abca     FC FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fd, $fd, $fc, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $fe
1abce     FF 00 01 01 
1abd2     02 02 02 03 
1abd6     03 02 02 02 
1abda     02 02 02 01 | 	byte	$ff, $00, $01, $01, $02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $01
1abde     01 01 01 00 
1abe2     FF FE FD FD 
1abe6     FC FC FD FD 
1abea     FD FD FF FF | 	byte	$01, $01, $01, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $ff
1abee     00 01 01 02 
1abf2     02 03 03 04 
1abf6     03 02 02 02 
1abfa     02 02 01 01 | 	byte	$00, $01, $01, $02, $02, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01, $01
1abfe     00 00 FF FF 
1ac02     FE FD FC FC 
1ac06     FC FD FD FD 
1ac0a     FD FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff
1ac0e     00 00 01 01 
1ac12     02 03 03 03 
1ac16     03 02 02 02 
1ac1a     02 01 01 00 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $01, $01, $00
1ac1e     00 00 FF FF 
1ac22     FE FD FC FC 
1ac26     FC FC FD FD 
1ac2a     FD FE FF 00 | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
1ac2e     01 01 01 02 
1ac32     03 03 04 03 
1ac36     03 02 03 03 
1ac3a     03 02 02 01 | 	byte	$01, $01, $01, $02, $03, $03, $04, $03, $03, $02, $03, $03, $03, $02, $02, $01
1ac3e     01 00 00 FF 
1ac42     FE FE FD FC 
1ac46     FD FD FE FE 
1ac4a     FE FF 00 00 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00
1ac4e     01 01 02 02 
1ac52     02 03 03 03 
1ac56     02 02 02 02 
1ac5a     02 01 01 00 | 	byte	$01, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
1ac5e     FF FF FF FE 
1ac62     FD FC FC FC 
1ac66     FD FD FD FD 
1ac6a     FE FF 00 01 | 	byte	$ff, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
1ac6e     01 01 02 02 
1ac72     03 03 02 02 
1ac76     02 02 02 02 
1ac7a     02 01 01 00 | 	byte	$01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
1ac7e     00 FF FF FE 
1ac82     FD FD FC FD 
1ac86     FD FD FD FE 
1ac8a     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
1ac8e     01 01 02 03 
1ac92     03 03 03 02 
1ac96     02 02 02 02 
1ac9a     01 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00, $00
1ac9e     00 FF FE FE 
1aca2     FD FC FC FC 
1aca6     FD FD FD FE 
1acaa     FE FF 00 00 | 	byte	$00, $ff, $fe, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00
1acae     01 01 02 03 
1acb2     02 02 02 02 
1acb6     02 02 02 02 
1acba     01 01 01 00 | 	byte	$01, $01, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00
1acbe     00 FF FF FE 
1acc2     FD FC FC FD 
1acc6     FD FE FE FE 
1acca     FF 00 01 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
1acce     01 02 03 03 
1acd2     03 03 03 03 
1acd6     02 02 02 01 
1acda     01 00 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $00, $ff
1acde     FF FE FE FD 
1ace2     FD FC FD FD 
1ace6     FD FE FE FE 
1acea     FF 00 01 01 | 	byte	$ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
1acee     01 02 02 02 
1acf2     02 02 02 02 
1acf6     02 02 01 01 
1acfa     01 00 00 FF | 	byte	$01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00, $00, $ff
1acfe     FF FE FD FD 
1ad02     FC FC FC FD 
1ad06     FD FD FE FF 
1ad0a     FF 00 00 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01
1ad0e     02 02 02 03 
1ad12     03 02 02 02 
1ad16     02 02 02 02 
1ad1a     01 01 00 00 | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00
1ad1e     FF FF FE FE 
1ad22     FD FD FD FE 
1ad26     FE FE FF FF 
1ad2a     00 01 01 01 | 	byte	$ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $01, $01, $01
1ad2e     02 02 03 03 
1ad32     03 02 02 02 
1ad36     02 01 01 01 
1ad3a     01 00 FF FF | 	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff
1ad3e     FE FE FD FD 
1ad42     FD FD FD FE 
1ad46     FE FE FF 00 
1ad4a     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
1ad4e     02 02 03 02 
1ad52     02 02 02 02 
1ad56     02 01 01 00 
1ad5a     01 00 FF 00 | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $00, $01, $00, $ff, $00
1ad5e     FF FE FE FD 
1ad62     FD FD FE FE 
1ad66     FE FE FF 00 
1ad6a     00 01 01 02 | 	byte	$ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
1ad6e     02 02 03 02 
1ad72     02 02 02 02 
1ad76     01 01 01 01 
1ad7a     00 FF FF FF | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff, $ff
1ad7e     FE FE FD FD 
1ad82     FD FD FD FE 
1ad86     FE FE FF FF 
1ad8a     00 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $00, $01
1ad8e     02 02 02 02 
1ad92     02          | 	byte	$02[5]
1ad93     01 01 01 01 
1ad97     01 01       | 	byte	$01[6]
1ad99     00 00 00 FF 
1ad9d     00 FF FF FE 
1ada1     FD FD FE FE 
1ada5     FE FE FF FF | 	byte	$00, $00, $00, $ff, $00, $ff, $ff, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff
1ada9     00 01 01 01 
1adad     02 02 03 03 
1adb1     02 02 02 02 
1adb5     02 01 01 00 | 	byte	$00, $01, $01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
1adb9     00 FF FF FF 
1adbd     FE FE FE FD 
1adc1     FD FE FE FE 
1adc5     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff
1adc9     00 00 00 01 
1adcd     02 02 02 02 
1add1     01 02 01 01 
1add5     01 01 01 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $01, $02, $01, $01, $01, $01, $01, $00
1add9     00 FF FF FF 
1addd     FE FE FD FD 
1ade1     FD FE FE FE 
1ade5     FE FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00
1ade9     00 00 01 01 
1aded     02 02 02 02 
1adf1     02 02 02 02 
1adf5     02 01 01 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1adf9     00 01 00 FF 
1adfd     FF FF FF FE 
1ae01     FE FE FF FF 
1ae05     FF FF 00 00 | 	byte	$00, $01, $00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $00, $00
1ae09     00 01 01 02 
1ae0d     02 02 02 02 
1ae11     02 02 02 01 
1ae15     01 00 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00
1ae19     00 FF FF FF 
1ae1d     FE FE FE FE 
1ae21     FE FE FF FF 
1ae25     FF FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00
1ae29     00 01 01 02 
1ae2d     02 02 02 01 
1ae31     01 02 02 01 
1ae35     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $01, $01, $02, $02, $01, $01, $01, $00, $00
1ae39     00 FF FF FF 
1ae3d     FF FE FE FE 
1ae41     FE FF FF FF 
1ae45     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
1ae49     00 01 01 02 
1ae4d     02 02 02 02 
1ae51     02 02 01 01 
1ae55     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $00
1ae59     00 FF FF FF 
1ae5d     FF FE FE FE 
1ae61     FE FE FE FF 
1ae65     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff
1ae69     00 00 01 01 
1ae6d     01 02 02 02 
1ae71     01 01 00 00 
1ae75     00 00 00 00 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $01, $01, $00, $00, $00, $00, $00, $00
1ae79     FF 00 FF FF 
1ae7d     FF FF FF FE 
1ae81     FE FF FF FF 
1ae85     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
1ae89     00 01 02 02 
1ae8d     02 02 02 02 
1ae91     02 02 01 01 
1ae95     00 00 00 FF | 	byte	$00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00, $ff
1ae99     FF FF FF FF 
1ae9d     FE FE FE FE 
1aea1     FF FF FF FF 
1aea5     FF FF FF 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
1aea9     00 01 01 01 
1aead     01 01 01 01 
1aeb1     01 00 00 00 
1aeb5     00 00 00 FF | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $ff
1aeb9     FF FF FF FF 
1aebd     FE FE FE FE 
1aec1     FE FF FF FF 
1aec5     FF FF 00 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
1aec9     00 01 01 02 
1aecd     02 01 01 01 
1aed1     01 01 01 01 
1aed5     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00
1aed9     00 00 00 00 
1aedd     00          | 	byte	$00[5]
1aede     FF FF FF FF 
1aee2     00 00 FF 00 
1aee6     00 00 00 01 
1aeea     01 01 02 01 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $01, $01, $01, $02, $01
1aeee     01 01 01 01 
1aef2     01          | 	byte	$01[5]
1aef3     00 00 00 00 
1aef7     00          | 	byte	$00[5]
1aef8     FF 00 FF FF 
1aefc     FF FE FE FE 
1af00     FF FF FF FF 
1af04     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
1af08     00 01 01 01 
1af0c     01 01 01 01 
1af10     01 01 01 00 
1af14     00 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
1af18     FF 00 00 FF 
1af1c     00 FF FF FF 
1af20     FF FF FF FF 
1af24     FF FF 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
1af28     00 01 01 01 
1af2c     01 01 01 01 
1af30     01 01 01 01 
1af34     01 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
1af38     FF 00 FF FF 
1af3c     FF FF FF FF 
1af40     FF FF FF FF 
1af44     FF FF FF FF | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1af48     00 00 00 01 
1af4c     00 00 01 01 
1af50     01 00 00 00 
1af54     00 00 00 00 | 	byte	$00, $00, $00, $01, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
1af58     00 00 00 00 
1af5c     00 00 00 00 | 	byte	$00[8]
1af60     FF 00 00 FF 
1af64     00 FF 00 00 
1af68     00 01 01 01 
1af6c     00 00 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00
1af70     94 97 C7 EC 
1af74     F8 F7 FA 16 
1af78     32 63 70 67 
1af7c     4E 15 F7 E6 | 	byte	$94, $97, $c7, $ec, $f8, $f7, $fa, $16, $32, $63, $70, $67, $4e, $15, $f7, $e6
1af80     D6 D2 01 0F 
1af84     0A 03 FD 05 
1af88     1B 31 2C 21 
1af8c     F3 C5 AD 96 | 	byte	$d6, $d2, $01, $0f, $0a, $03, $fd, $05, $1b, $31, $2c, $21, $f3, $c5, $ad, $96
1af90     84 A7 D4 EB 
1af94     F5 F2 FD 20 
1af98     4B 6B 72 5F 
1af9c     31 08 EF E0 | 	byte	$84, $a7, $d4, $eb, $f5, $f2, $fd, $20, $4b, $6b, $72, $5f, $31, $08, $ef, $e0
1afa0     CE E9 0D 0D 
1afa4     08 00 03 18 
1afa8     31 34 2B 12 
1afac     DB BC A4 8F | 	byte	$ce, $e9, $0d, $0d, $08, $00, $03, $18, $31, $34, $2b, $12, $db, $bc, $a4, $8f
1afb0     88 B7 D9 E9 
1afb4     F4 F5 03 33 
1afb8     5B 6E 72 48 
1afbc     1C FE E6 D4 | 	byte	$88, $b7, $d9, $e9, $f4, $f5, $03, $33, $5b, $6e, $72, $48, $1c, $fe, $e6, $d4
1afc0     E1 F9 10 0B 
1afc4     05 08 15 28 
1afc8     39 33 23 F9 
1afcc     CC B4 9E 86 | 	byte	$e1, $f9, $10, $0b, $05, $08, $15, $28, $39, $33, $23, $f9, $cc, $b4, $9e, $86
1afd0     97 C5 D9 E9 
1afd4     F0 F6 1D 3E 
1afd8     60 6E 63 31 
1afdc     11 F3 DF D9 | 	byte	$97, $c5, $d9, $e9, $f0, $f6, $1d, $3e, $60, $6e, $63, $31, $11, $f3, $df, $d9
1afe0     EB 07 0E 08 
1afe4     0A 0E 27 38 
1afe8     3B 2F 0B E5 
1afec     C1 A8 93 9C | 	byte	$eb, $07, $0e, $08, $0a, $0e, $27, $38, $3b, $2f, $0b, $e5, $c1, $a8, $93, $9c
1aff0     99 CC D6 E6 
1aff4     F7 09 25 50 
1aff8     60 69 4F 20 
1affc     05 E9 D6 F0 | 	byte	$99, $cc, $d6, $e6, $f7, $09, $25, $50, $60, $69, $4f, $20, $05, $e9, $d6, $f0
1b000     F3 0F 0D 09 
1b004     0F 26 32 3F 
1b008     37 19 FA CD 
1b00c     B6 9F 9C A3 | 	byte	$f3, $0f, $0d, $09, $0f, $26, $32, $3f, $37, $19, $fa, $cd, $b6, $9f, $9c, $a3
1b010     A9 CC D3 EF 
1b014     04 18 32 51 
1b018     5C 53 3D 0F 
1b01c     FA DA EC EC | 	byte	$a9, $cc, $d3, $ef, $04, $18, $32, $51, $5c, $53, $3d, $0f, $fa, $da, $ec, $ec
1b020     08 10 0B 10 
1b024     24 2D 40 3D 
1b028     29 07 E3 C3 
1b02c     AB 9B AD 9F | 	byte	$08, $10, $0b, $10, $24, $2d, $40, $3d, $29, $07, $e3, $c3, $ab, $9b, $ad, $9f
1b030     B7 C6 D7 00 
1b034     14 20 3C 4D 
1b038     4A 47 2A 05 
1b03c     E9 EC F3 F2 | 	byte	$b7, $c6, $d7, $00, $14, $20, $3c, $4d, $4a, $47, $2a, $05, $e9, $ec, $f3, $f2
1b040     0F 0C 10 25 
1b044     2A 3C 42 34 
1b048     10 FA CF B7 
1b04c     A0 B4 A7 B0 | 	byte	$0f, $0c, $10, $25, $2a, $3c, $42, $34, $10, $fa, $cf, $b7, $a0, $b4, $a7, $b0
1b050     B9 C3 EB 0E 
1b054     18 32 39 3E 
1b058     40 37 16 FB 
1b05c     F1 F7 EB 08 | 	byte	$b9, $c3, $eb, $0e, $18, $32, $39, $3e, $40, $37, $16, $fb, $f1, $f7, $eb, $08
1b060     0D 10 28 29 
1b064     35 45 3A 1B 
1b068     04 E3 BF A7 
1b06c     B9 B3 A5 BF | 	byte	$0d, $10, $28, $29, $35, $45, $3a, $1b, $04, $e3, $bf, $a7, $b9, $b3, $a5, $bf
1b070     B7 D2 FF 11 
1b074     27 33 2A 2D 
1b078     38 21 0D F9 
1b07c     01 F2 F5 0F | 	byte	$b7, $d2, $ff, $11, $27, $33, $2a, $2d, $38, $21, $0d, $f9, $01, $f2, $f5, $0f
1b080     0F 27 2C 2B 
1b084     44 41 22 0E 
1b088     F4 CC B1 BB 
1b08c     BB AB B9 BF | 	byte	$0f, $27, $2c, $2b, $44, $41, $22, $0e, $f4, $cc, $b1, $bb, $bb, $ab, $b9, $bf
1b090     C1 E3 07 1A 
1b094     34 29 14 2B 
1b098     28 11 05 10 
1b09c     FA EB 09 0D | 	byte	$c1, $e3, $07, $1a, $34, $29, $14, $2b, $28, $11, $05, $10, $fa, $eb, $09, $0d
1b0a0     25 30 2B 3B 
1b0a4     46 2D 14 02 
1b0a8     DD BD BB C5 
1b0ac     B7 AC C4 C3 | 	byte	$25, $30, $2b, $3b, $46, $2d, $14, $02, $dd, $bd, $bb, $c5, $b7, $ac, $c4, $c3
1b0b0     D7 EB 0D 2E 
1b0b4     2D 11 0E 27 
1b0b8     13 05 1E 0B 
1b0bc     F1 F8 0D 20 | 	byte	$d7, $eb, $0d, $2e, $2d, $11, $0e, $27, $13, $05, $1e, $0b, $f1, $f8, $0d, $20
1b0c0     32 2F 2D 47 
1b0c4     37 1A 0A F2 
1b0c8     C9 BC CD BE 
1b0cc     AE C1 C4 DC | 	byte	$32, $2f, $2d, $47, $37, $1a, $0a, $f2, $c9, $bc, $cd, $be, $ae, $c1, $c4, $dc
1b0d0     D7 F1 1C 30 
1b0d4     16 05 09 18 
1b0d8     05 1B 21 04 
1b0dc     ED 0B 1B 33 | 	byte	$d7, $f1, $1c, $30, $16, $05, $09, $18, $05, $1b, $21, $04, $ed, $0b, $1b, $33
1b0e0     31 2B 3E 3F 
1b0e4     1F 12 00 DB 
1b0e8     BF D3 C9 BA 
1b0ec     B3 C6 DE E1 | 	byte	$31, $2b, $3e, $3f, $1f, $12, $00, $db, $bf, $d3, $c9, $ba, $b3, $c6, $de, $e1
1b0f0     D6 FE 2B 1C 
1b0f4     0A FD 06 08 
1b0f8     12 26 1C F8 
1b0fc     FB 13 32 35 | 	byte	$d6, $fe, $2b, $1c, $0a, $fd, $06, $08, $12, $26, $1c, $f8, $fb, $13, $32, $35
1b100     30 2D 43 26 
1b104     18 09 EF C5 
1b108     D8 D2 C2 B1 
1b10c     C3 DA E7 DD | 	byte	$30, $2d, $43, $26, $18, $09, $ef, $c5, $d8, $d2, $c2, $b1, $c3, $da, $e7, $dd
1b110     D9 11 23 0D 
1b114     02 F5 FE 0A 
1b118     25 25 17 F1 
1b11c     0B 2D 36 32 | 	byte	$d9, $11, $23, $0d, $02, $f5, $fe, $0a, $25, $25, $17, $f1, $0b, $2d, $36, $32
1b120     2C 3A 30 1C 
1b124     0F FD D3 D8 
1b128     DA CD BE B8 
1b12c     D0 EC E5 DA | 	byte	$2c, $3a, $30, $1c, $0f, $fd, $d3, $d8, $da, $cd, $be, $b8, $d0, $ec, $e5, $da
1b130     E4 1E 0F 06 
1b134     FC EC F9 22 
1b138     23 20 07 FD 
1b13c     23 36 35 30 | 	byte	$e4, $1e, $0f, $06, $fc, $ec, $f9, $22, $23, $20, $07, $fd, $23, $36, $35, $30
1b140     29 34 20 14 
1b144     05 EE D9 E2 
1b148     D4 C5 B3 C6 
1b14c     E9 EB E1 D8 | 	byte	$29, $34, $20, $14, $05, $ee, $d9, $e2, $d4, $c5, $b3, $c6, $e9, $eb, $e1, $d8
1b150     F3 12 09 00 
1b154     F2 DF 16 24 
1b158     22 1C 00 14 
1b15c     35 36 32 2D | 	byte	$f3, $12, $09, $00, $f2, $df, $16, $24, $22, $1c, $00, $14, $35, $36, $32, $2d
1b160     28 25 19 0C 
1b164     FD DD E9 DE 
1b168     CE BF B8 E0 
1b16c     F0 E8 DB DA | 	byte	$28, $25, $19, $0c, $fd, $dd, $e9, $de, $ce, $bf, $b8, $e0, $f0, $e8, $db, $da
1b170     00 0B 03 F9 
1b174     E7 F2 20 22 
1b178     1F 13 08 2F 
1b17c     37 35 2F 21 | 	byte	$00, $0b, $03, $f9, $e7, $f2, $20, $22, $1f, $13, $08, $2f, $37, $35, $2f, $21
1b180     21 1E 13 04 
1b184     ED F0 E6 D8 
1b188     C9 B6 CD F2 
1b18c     EE E4 DA DC | 	byte	$21, $1e, $13, $04, $ed, $f0, $e6, $d8, $c9, $b6, $cd, $f2, $ee, $e4, $da, $dc
1b190     02 05 FC F3 
1b194     EB 07 20 20 
1b198     1C 09 26 37 
1b19c     36 33 2B 12 | 	byte	$02, $05, $fc, $f3, $eb, $07, $20, $20, $1c, $09, $26, $37, $36, $33, $2b, $12
1b1a0     1E 16 09 F7 
1b1a4     FB EE E1 D2 
1b1a8     C1 B7 EF F3 
1b1ac     EA DF DC DA | 	byte	$1e, $16, $09, $f7, $fb, $ee, $e1, $d2, $c1, $b7, $ef, $f3, $ea, $df, $dc, $da
1b1b0     05 01 F7 EC 
1b1b4     02 0F 20 1E 
1b1b8     15 12 38 37 
1b1bc     35 2E 1E 0D | 	byte	$05, $01, $f7, $ec, $02, $0f, $20, $1e, $15, $12, $38, $37, $35, $2e, $1e, $0d
1b1c0     19 0E 00 03 
1b1c4     FA EA DB C9 
1b1c8     B9 D6 F6 EF 
1b1cc     E5 DA D1 E6 | 	byte	$19, $0e, $00, $03, $fa, $ea, $db, $c9, $b9, $d6, $f6, $ef, $e5, $da, $d1, $e6
1b1d0     02 FA EE 04 
1b1d4     05 11 20 1B 
1b1d8     09 37 3A 36 
1b1dc     33 27 04 10 | 	byte	$02, $fa, $ee, $04, $05, $11, $20, $1b, $09, $37, $3a, $36, $33, $27, $04, $10
1b1e0     13 07 03 0E 
1b1e4     F2 E3 D6 C5 
1b1e8     B9 F4 F4 EB 
1b1ec     E0 DA C6 F7 | 	byte	$13, $07, $03, $0e, $f2, $e3, $d6, $c5, $b9, $f4, $f4, $eb, $e0, $da, $c6, $f7
1b1f0     FC F3 05 09 
1b1f4     06 16 1E 16 
1b1f8     16 43 38 35 
1b1fc     2E 15 FB 13 | 	byte	$fc, $f3, $05, $09, $06, $16, $1e, $16, $16, $43, $38, $35, $2e, $15, $fb, $13
1b200     0D 00 19 03 
1b204     EC DF CD BC 
1b208     D8 F9 F2 E7 
1b20c     DC D0 CD FB | 	byte	$0d, $00, $19, $03, $ec, $df, $cd, $bc, $d8, $f9, $f2, $e7, $dc, $d0, $cd, $fb
1b210     F8 F9 11 09 
1b214     07 18 1A 0A 
1b218     3B 42 36 32 
1b21c     22 03 FB 0D | 	byte	$f8, $f9, $11, $09, $07, $18, $1a, $0a, $3b, $42, $36, $32, $22, $03, $fb, $0d
1b220     02 16 19 F7 
1b224     E7 D9 C9 B8 
1b228     F3 F6 ED E0 
1b22c     D7 C6 D8 FA | 	byte	$02, $16, $19, $f7, $e7, $d9, $c9, $b8, $f3, $f6, $ed, $e0, $d7, $c6, $d8, $fa
1b230     F3 15 10 09 
1b234     05 18 17 13 
1b238     49 3D 35 2B 
1b23c     0D FA FA 09 | 	byte	$f3, $15, $10, $09, $05, $18, $17, $13, $49, $3d, $35, $2b, $0d, $fa, $fa, $09
1b240     0E 22 10 F1 
1b244     E1 D1 C0 D0 
1b248     FA F2 E8 DD 
1b24c     D0 C2 E3 F4 | 	byte	$0e, $22, $10, $f1, $e1, $d1, $c0, $d0, $fa, $f2, $e8, $dd, $d0, $c2, $e3, $f4
1b250     0D 17 10 0A 
1b254     08 18 0D 30 
1b258     49 39 31 1E 
1b25c     01 F4 FD 03 | 	byte	$0d, $17, $10, $0a, $08, $18, $0d, $30, $49, $39, $31, $1e, $01, $f4, $fd, $03
1b260     23 1F 03 EB 
1b264     DD CB BB ED 
1b268     F9 EF E3 D9 
1b26c     CA C6 EA FF | 	byte	$23, $1f, $03, $eb, $dd, $cb, $bb, $ed, $f9, $ef, $e3, $d9, $ca, $c6, $ea, $ff
1b270     1A 16 10 09 
1b274     0B 17 0E 44 
1b278     47 36 2A 0D 
1b27c     FC EE F9 1B | 	byte	$1a, $16, $10, $09, $0b, $17, $0e, $44, $47, $36, $2a, $0d, $fc, $ee, $f9, $1b
1b280     24 19 FA E5 
1b284     D7 C5 C4 F7 
1b288     F4 EA E2 D4 
1b28c     C4 CF EB 16 | 	byte	$24, $19, $fa, $e5, $d7, $c5, $c4, $f7, $f4, $ea, $e2, $d4, $c4, $cf, $eb, $16
1b290     1A 1A 11 08 
1b294     0E 14 1F 4A 
1b298     40 32 1B 03 
1b29c     F6 EC FE 26 | 	byte	$1a, $1a, $11, $08, $0e, $14, $1f, $4a, $40, $32, $1b, $03, $f6, $ec, $fe, $26
1b2a0     21 14 F1 DF 
1b2a4     CF C3 D6 F8 
1b2a8     F0 E6 DD CE 
1b2ac     C1 D5 FF 1B | 	byte	$21, $14, $f1, $df, $cf, $c3, $d6, $f8, $f0, $e6, $dd, $ce, $c1, $d5, $ff, $1b
1b2b0     1B 1E 0F 08 
1b2b4     0E 11 2C 4B 
1b2b8     39 29 0C FE 
1b2bc     F0 E7 16 25 | 	byte	$1b, $1e, $0f, $08, $0e, $11, $2c, $4b, $39, $29, $0c, $fe, $f0, $e7, $16, $25
1b2c0     1E 0C EB DC 
1b2c4     CA C5 E6 F5 
1b2c8     EB E9 D7 C8 
1b2cc     CA DD 12 1C | 	byte	$1e, $0c, $eb, $dc, $ca, $c5, $e6, $f5, $eb, $e9, $d7, $c8, $ca, $dd, $12, $1c
1b2d0     20 1F 0D 0B 
1b2d4     12 10 3E 47 
1b2d8     34 19 05 F8 
1b2dc     E9 F4 20 22 | 	byte	$20, $1f, $0d, $0b, $12, $10, $3e, $47, $34, $19, $05, $f8, $e9, $f4, $20, $22
1b2e0     1A 00 E5 D4 
1b2e4     CC C8 F0 F2 
1b2e8     ED E4 D2 C3 
1b2ec     CF F4 16 20 | 	byte	$1a, $00, $e5, $d4, $cc, $c8, $f0, $f2, $ed, $e4, $d2, $c3, $cf, $f4, $16, $20
1b2f0     25 1F 0E 0B 
1b2f4     11 19 45 40 
1b2f8     2A 0C FF F3 
1b2fc     E5 07 1E 1F | 	byte	$25, $1f, $0e, $0b, $11, $19, $45, $40, $2a, $0c, $ff, $f3, $e5, $07, $1e, $1f
1b300     16 F7 DF D1 
1b304     CA CF F0 EE 
1b308     F0 D9 CC C7 
1b30c     DA 01 19 23 | 	byte	$16, $f7, $df, $d1, $ca, $cf, $f0, $ee, $f0, $d9, $cc, $c7, $da, $01, $19, $23
1b310     2B 18 10 0C 
1b314     0F 23 47 38 
1b318     1B 06 FA ED 
1b31c     EF 0D 1D 1D | 	byte	$2b, $18, $10, $0c, $0f, $23, $47, $38, $1b, $06, $fa, $ed, $ef, $0d, $1d, $1d
1b320     0F F0 D9 D3 
1b324     C8 D4 EF F6 
1b328     E7 D5 C5 CF 
1b32c     F0 04 1D 28 | 	byte	$0f, $f0, $d9, $d3, $c8, $d4, $ef, $f6, $e7, $d5, $c5, $cf, $f0, $04, $1d, $28
1b330     2F 17 11 0E 
1b334     14 29 44 2E 
1b338     10 02 F6 E6 
1b33c     05 0C 19 19 | 	byte	$2f, $17, $11, $0e, $14, $29, $44, $2e, $10, $02, $f6, $e6, $05, $0c, $19, $19
1b340     0C E8 D8 D1 
1b344     C9 D4 F3 F9 
1b348     DE D2 C8 D7 
1b34c     01 0B 1F 2F | 	byte	$0c, $e8, $d8, $d1, $c9, $d4, $f3, $f9, $de, $d2, $c8, $d7, $01, $0b, $1f, $2f
1b350     2E 1A 0E 0D 
1b354     1A 2E 3C 1F 
1b358     08 FE F2 EA 
1b35c     0F 09 15 15 | 	byte	$2e, $1a, $0e, $0d, $1a, $2e, $3c, $1f, $08, $fe, $f2, $ea, $0f, $09, $15, $15
1b360     05 E1 DA CD 
1b364     CC D4 FF EC 
1b368     D9 CA D0 E9 
1b36c     0C 0E 22 36 | 	byte	$05, $e1, $da, $cd, $cc, $d4, $ff, $ec, $d9, $ca, $d0, $e9, $0c, $0e, $22, $36
1b370     30 18 0B 10 
1b374     22 2D 31 14 
1b378     05 FA EC FB 
1b37c     10 08 12 12 | 	byte	$30, $18, $0b, $10, $22, $2d, $31, $14, $05, $fa, $ec, $fb, $10, $08, $12, $12
1b380     FD E0 D9 C6 
1b384     CC E3 00 E3 
1b388     D5 C9 D7 FD 
1b38c     13 0F 28 38 | 	byte	$fd, $e0, $d9, $c6, $cc, $e3, $00, $e3, $d5, $c9, $d7, $fd, $13, $0f, $28, $38
1b390     2F 15 0E 14 
1b394     24 27 25 0B 
1b398     01 F5 E8 06 
1b39c     0E 05 0D 0D | 	byte	$2f, $15, $0e, $14, $24, $27, $25, $0b, $01, $f5, $e8, $06, $0e, $05, $0d, $0d
1b3a0     F7 E2 D4 C5 
1b3a4     D0 ED F3 DC 
1b3a8     D0 D2 DD 0D 
1b3ac     14 15 30 3D | 	byte	$f7, $e2, $d4, $c5, $d0, $ed, $f3, $dc, $d0, $d2, $dd, $0d, $14, $15, $30, $3d
1b3b0     2A 11 15 1B 
1b3b4     24 1D 17 08 
1b3b8     FC F1 ED 0D 
1b3bc     0D 02 08 09 | 	byte	$2a, $11, $15, $1b, $24, $1d, $17, $08, $fc, $f1, $ed, $0d, $0d, $02, $08, $09
1b3c0     F5 E0 CF C8 
1b3c4     E0 EE E9 D9 
1b3c8     CC DC F2 13 
1b3cc     16 21 31 3C | 	byte	$f5, $e0, $cf, $c8, $e0, $ee, $e9, $d9, $cc, $dc, $f2, $13, $16, $21, $31, $3c
1b3d0     28 13 1B 21 
1b3d4     1C 10 0E 03 
1b3d8     F9 EB F4 0E 
1b3dc     09 00 03 05 | 	byte	$28, $13, $1b, $21, $1c, $10, $0e, $03, $f9, $eb, $f4, $0e, $09, $00, $03, $05
1b3e0     F7 DA C9 D7 
1b3e4     E7 E1 DF D3 
1b3e8     D3 E5 FE 15 
1b3ec     20 25 36 35 | 	byte	$f7, $da, $c9, $d7, $e7, $e1, $df, $d3, $d3, $e5, $fe, $15, $20, $25, $36, $35
1b3f0     26 1A 1C 25 
1b3f4     14 05 09 00 
1b3f8     F4 E6 FE 0D 
1b3fc     07 FC FD 05 | 	byte	$26, $1a, $1c, $25, $14, $05, $09, $00, $f4, $e6, $fe, $0d, $07, $fc, $fd, $05
1b400     F7 D7 C9 E8 
1b404     E5 D3 DA CF 
1b408     E6 E7 07 1B 
1b40c     28 2B 2B 36 | 	byte	$f7, $d7, $c9, $e8, $e5, $d3, $da, $cf, $e6, $e7, $07, $1b, $28, $2b, $2b, $36
1b410     28 24 1E 21 
1b414     0D F6 04 FC 
1b418     F1 E5 01 0B 
1b41c     04 F9 F7 08 | 	byte	$28, $24, $1e, $21, $0d, $f6, $04, $fc, $f1, $e5, $01, $0b, $04, $f9, $f7, $08
1b420     F1 D3 D8 EF 
1b424     E1 C3 D4 DA 
1b428     EF E9 0B 28 
1b42c     2E 2C 24 3A | 	byte	$f1, $d3, $d8, $ef, $e1, $c3, $d4, $da, $ef, $e9, $0b, $28, $2e, $2c, $24, $3a
1b430     31 28 1E 1A 
1b434     09 E9 FF F9 
1b438     ED E4 03 09 
1b43c     02 F7 F3 06 | 	byte	$31, $28, $1e, $1a, $09, $e9, $ff, $f9, $ed, $e4, $03, $09, $02, $f7, $f3, $06
1b440     EB DA E7 F0 
1b444     DB B8 D2 EB 
1b448     EF EE 1B 2E 
1b44c     33 24 24 3C | 	byte	$eb, $da, $e7, $f0, $db, $b8, $d2, $eb, $ef, $ee, $1b, $2e, $33, $24, $24, $3c
1b450     3C 27 1C 18 
1b454     01 E0 F9 F5 
1b458     EA E8 02 06 
1b45c     FE F4 F5 03 | 	byte	$3c, $27, $1c, $18, $01, $e0, $f9, $f5, $ea, $e8, $02, $06, $fe, $f4, $f5, $03
1b460     ED E7 EC ED 
1b464     D3 B4 D9 F1 
1b468     EC F5 24 35 
1b46c     2B 1F 26 45 | 	byte	$ed, $e7, $ec, $ed, $d3, $b4, $d9, $f1, $ec, $f5, $24, $35, $2b, $1f, $26, $45
1b470     3F 24 1A 16 
1b474     F9 DB EF F0 
1b478     E4 E8 02 03 
1b47c     FB F1 F3 FF | 	byte	$3f, $24, $1a, $16, $f9, $db, $ef, $f0, $e4, $e8, $02, $03, $fb, $f1, $f3, $ff
1b480     FB EA F1 EB 
1b484     CC B6 D8 F2 
1b488     EC 08 2A 31 
1b48c     26 23 29 4F | 	byte	$fb, $ea, $f1, $eb, $cc, $b6, $d8, $f2, $ec, $08, $2a, $31, $26, $23, $29, $4f
1b490     44 1A 1C 15 
1b494     F1 DA E3 EC 
1b498     E3 E9 FE 01 
1b49c     F9 F2 EF 03 | 	byte	$44, $1a, $1c, $15, $f1, $da, $e3, $ec, $e3, $e9, $fe, $01, $f9, $f2, $ef, $03
1b4a0     08 EB F4 EA 
1b4a4     CC BA DA F0 
1b4a8     F6 0F 2C 29 
1b4ac     25 27 33 51 | 	byte	$08, $eb, $f4, $ea, $cc, $ba, $da, $f0, $f6, $0f, $2c, $29, $25, $27, $33, $51
1b4b0     41 15 1F 11 
1b4b4     EF DB D7 E8 
1b4b8     DD E6 FC FD 
1b4bc     F5 F3 EB 0D | 	byte	$41, $15, $1f, $11, $ef, $db, $d7, $e8, $dd, $e6, $fc, $fd, $f5, $f3, $eb, $0d
1b4c0     0B ED F6 ED 
1b4c4     C9 C3 D2 F3 
1b4c8     FB 13 24 27 
1b4cc     25 2C 3B 50 | 	byte	$0b, $ed, $f6, $ed, $c9, $c3, $d2, $f3, $fb, $13, $24, $27, $25, $2c, $3b, $50
1b4d0     38 18 20 0F 
1b4d4     EB D9 CB E2 
1b4d8     D9 E8 FA FB 
1b4dc     F2 F3 F1 14 | 	byte	$38, $18, $20, $0f, $eb, $d9, $cb, $e2, $d9, $e8, $fa, $fb, $f2, $f3, $f1, $14
1b4e0     0D F3 FC EA 
1b4e4     C6 CE CE FA 
1b4e8     FC 13 1F 26 
1b4ec     25 37 3F 4A | 	byte	$0d, $f3, $fc, $ea, $c6, $ce, $ce, $fa, $fc, $13, $1f, $26, $25, $37, $3f, $4a
1b4f0     36 21 22 08 
1b4f4     E9 D7 C4 DA 
1b4f8     D4 E7 F6 F7 
1b4fc     F2 F1 FE 13 | 	byte	$36, $21, $22, $08, $e9, $d7, $c4, $da, $d4, $e7, $f6, $f7, $f2, $f1, $fe, $13
1b500     0B FE FF E3 
1b504     C8 D4 D7 F7 
1b508     FB 10 20 26 
1b50c     2A 41 3F 40 | 	byte	$0b, $fe, $ff, $e3, $c8, $d4, $d7, $f7, $fb, $10, $20, $26, $2a, $41, $3f, $40
1b510     34 28 21 01 
1b514     E5 D4 C1 CE 
1b518     D0 E9 F2 F3 
1b51c     F2 F8 05 11 | 	byte	$34, $28, $21, $01, $e5, $d4, $c1, $ce, $d0, $e9, $f2, $f3, $f2, $f8, $05, $11
1b520     0C 0B FE DD 
1b524     CE DE DF EF 
1b528     F4 12 1E 24 
1b52c     35 45 3C 3A | 	byte	$0c, $0b, $fe, $dd, $ce, $de, $df, $ef, $f4, $12, $1e, $24, $35, $45, $3c, $3a
1b530     35 2E 1E FB 
1b534     E4 D1 C0 C4 
1b538     CD EA F0 F0 
1b53c     F4 03 04 11 | 	byte	$35, $2e, $1e, $fb, $e4, $d1, $c0, $c4, $cd, $ea, $f0, $f0, $f4, $03, $04, $11
1b540     16 11 FD D5 
1b544     D8 E8 DF DF 
1b548     EF 14 1D 24 
1b54c     3F 44 32 37 | 	byte	$16, $11, $fd, $d5, $d8, $e8, $df, $df, $ef, $14, $1d, $24, $3f, $44, $32, $37
1b550     3D 33 1A F4 
1b554     E1 CF BE B9 
1b558     CC E9 EC EF 
1b55c     FA 0A 03 13 | 	byte	$3d, $33, $1a, $f4, $e1, $cf, $be, $b9, $cc, $e9, $ec, $ef, $fa, $0a, $03, $13
1b560     24 14 F5 D2 
1b564     E8 EB DC D6 
1b568     F0 15 1C 2E 
1b56c     45 42 2B 36 | 	byte	$24, $14, $f5, $d2, $e8, $eb, $dc, $d6, $f0, $15, $1c, $2e, $45, $42, $2b, $36
1b570     46 2F 13 F0 
1b574     DF CB BB AF 
1b578     CF E8 E8 F0 
1b57c     05 0A 02 17 | 	byte	$46, $2f, $13, $f0, $df, $cb, $bb, $af, $cf, $e8, $e8, $f0, $05, $0a, $02, $17
1b580     2B 12 EB DA 
1b584     F3 E9 D6 CE 
1b588     F7 15 1A 3C 
1b58c     46 3C 28 3B | 	byte	$2b, $12, $eb, $da, $f3, $e9, $d6, $ce, $f7, $15, $1a, $3c, $46, $3c, $28, $3b
1b590     4C 2E 09 ED 
1b594     D9 C8 B4 A6 
1b598     D3 E4 E4 F7 
1b59c     0B 07 05 21 | 	byte	$4c, $2e, $09, $ed, $d9, $c8, $b4, $a6, $d3, $e4, $e4, $f7, $0b, $07, $05, $21
1b5a0     2E 10 E5 E7 
1b5a4     F4 E2 CF C6 
1b5a8     FF 14 1F 42 
1b5ac     44 32 26 48 | 	byte	$2e, $10, $e5, $e7, $f4, $e2, $cf, $c6, $ff, $14, $1f, $42, $44, $32, $26, $48
1b5b0     4C 28 FE E8 
1b5b4     D5 C4 B0 9E 
1b5b8     DB E1 E5 03 
1b5bc     0C 08 07 2F | 	byte	$4c, $28, $fe, $e8, $d5, $c4, $b0, $9e, $db, $e1, $e5, $03, $0c, $08, $07, $2f
1b5c0     2D 07 E7 F1 
1b5c4     F0 D9 CF C4 
1b5c8     0A 11 2F 43 
1b5cc     40 2E 28 50 | 	byte	$2d, $07, $e7, $f1, $f0, $d9, $cf, $c4, $0a, $11, $2f, $43, $40, $2e, $28, $50
1b5d0     4B 20 F7 E4 
1b5d4     D1 C0 AD 9E 
1b5d8     DC DD EB 0A 
1b5dc     09 09 13 34 | 	byte	$4b, $20, $f7, $e4, $d1, $c0, $ad, $9e, $dc, $dd, $eb, $0a, $09, $09, $13, $34
1b5e0     2C 01 EB F6 
1b5e4     E9 D4 CD CE 
1b5e8     0C 13 37 43 
1b5ec     3A 27 36 51 | 	byte	$2c, $01, $eb, $f6, $e9, $d4, $cd, $ce, $0c, $13, $37, $43, $3a, $27, $36, $51
1b5f0     46 16 F2 DF 
1b5f4     CD B9 A8 A8 
1b5f8     DC D9 F8 0B 
1b5fc     08 07 24 34 | 	byte	$46, $16, $f2, $df, $cd, $b9, $a8, $a8, $dc, $d9, $f8, $0b, $08, $07, $24, $34
1b600     29 00 EC F6 
1b604     DE D2 C8 DD 
1b608     0D 1C 3C 42 
1b60c     34 26 46 51 | 	byte	$29, $00, $ec, $f6, $de, $d2, $c8, $dd, $0d, $1c, $3c, $42, $34, $26, $46, $51
1b610     3F 08 ED DA 
1b614     C8 B4 A0 B6 
1b618     DB DD 03 0A 
1b61c     0A 10 2E 32 | 	byte	$3f, $08, $ed, $da, $c8, $b4, $a0, $b6, $db, $dd, $03, $0a, $0a, $10, $2e, $32
1b620     26 FA ED EF 
1b624     D7 D1 C6 E9 
1b628     0B 26 3D 3F 
1b62c     2B 30 4D 4E | 	byte	$26, $fa, $ed, $ef, $d7, $d1, $c6, $e9, $0b, $26, $3d, $3f, $2b, $30, $4d, $4e
1b630     32 FD E9 D5 
1b634     C3 AF A2 BC 
1b638     D8 EB 07 09 
1b63c     0A 1C 32 32 | 	byte	$32, $fd, $e9, $d5, $c3, $af, $a2, $bc, $d8, $eb, $07, $09, $0a, $1c, $32, $32
1b640     1D F5 EE E3 
1b644     D2 CC CF EE 
1b648     11 2C 3E 3B 
1b64c     2B 3C 4F 48 | 	byte	$1d, $f5, $ee, $e3, $d2, $cc, $cf, $ee, $11, $2c, $3e, $3b, $2b, $3c, $4f, $48
1b650     20 F8 E2 D0 
1b654     BB A7 B0 C3 
1b658     D9 F5 07 09 
1b65c     16 22 34 33 | 	byte	$20, $f8, $e2, $d0, $bb, $a7, $b0, $c3, $d9, $f5, $07, $09, $16, $22, $34, $33
1b660     16 EE EB DD 
1b664     CF C7 E0 F2 
1b668     1C 31 3D 33 
1b66c     36 40 4F 3E | 	byte	$16, $ee, $eb, $dd, $cf, $c7, $e0, $f2, $1c, $31, $3d, $33, $36, $40, $4f, $3e
1b670     15 F1 DC C9 
1b674     B7 A3 B9 C3 
1b678     E4 FB 07 0A 
1b67c     20 29 35 2B | 	byte	$15, $f1, $dc, $c9, $b7, $a3, $b9, $c3, $e4, $fb, $07, $0a, $20, $29, $35, $2b
1b680     0E E8 E4 D8 
1b684     CC CE E5 F8 
1b688     25 31 3C 33 
1b68c     3B 47 4B 2B | 	byte	$0e, $e8, $e4, $d8, $cc, $ce, $e5, $f8, $25, $31, $3c, $33, $3b, $47, $4b, $2b
1b690     0D E9 D7 C2 
1b694     AD B2 B8 CB 
1b698     F1 FE 06 19 
1b69c     21 2E 37 22 | 	byte	$0d, $e9, $d7, $c2, $ad, $b2, $b8, $cb, $f1, $fe, $06, $19, $21, $2e, $37, $22
1b6a0     02 E2 DF D1 
1b6a4     C6 E3 E4 02 
1b6a8     2B 31 38 3D 
1b6ac     3A 49 3F 22 | 	byte	$02, $e2, $df, $d1, $c6, $e3, $e4, $02, $2b, $31, $38, $3d, $3a, $49, $3f, $22
1b6b0     FF E2 CE BB 
1b6b4     AA BF B4 D7 
1b6b8     FB FE 0C 23 
1b6bc     20 34 2F 1A | 	byte	$ff, $e2, $ce, $bb, $aa, $bf, $b4, $d7, $fb, $fe, $0c, $23, $20, $34, $2f, $1a
1b6c0     F6 DB DA CC 
1b6c4     D2 EA E2 18 
1b6c8     2D 33 40 3F 
1b6cc     3C 49 2E 1A | 	byte	$f6, $db, $da, $cc, $d2, $ea, $e2, $18, $2d, $33, $40, $3f, $3c, $49, $2e, $1a
1b6d0     F5 DA C6 B1 
1b6d4     BB BF B5 EA 
1b6d8     FD FE 1C 24 
1b6dc     22 36 24 13 | 	byte	$f5, $da, $c6, $b1, $bb, $bf, $b5, $ea, $fd, $fe, $1c, $24, $22, $36, $24, $13
1b6e0     E7 D8 D5 C5 
1b6e4     E7 E9 E9 22 
1b6e8     2D 33 48 3D 
1b6ec     3D 3E 23 11 | 	byte	$e7, $d8, $d5, $c5, $e7, $e9, $e9, $22, $2d, $33, $48, $3d, $3d, $3e, $23, $11
1b6f0     E9 D2 C0 B3 
1b6f4     C7 BB C1 FA 
1b6f8     FC 05 24 22 
1b6fc     28 2D 1E 0A | 	byte	$e9, $d2, $c0, $b3, $c7, $bb, $c1, $fa, $fc, $05, $24, $22, $28, $2d, $1e, $0a
1b700     DB D5 CE D4 
1b704     EB E4 FC 27 
1b708     2B 42 45 39 
1b70c     3F 2E 1C 03 | 	byte	$db, $d5, $ce, $d4, $eb, $e4, $fc, $27, $2b, $42, $45, $39, $3f, $2e, $1c, $03
1b710     E1 CB B5 C8 
1b714     C3 B4 E0 FF 
1b718     F9 1C 25 20 
1b71c     2D 23 18 FF | 	byte	$e1, $cb, $b5, $c8, $c3, $b4, $e0, $ff, $f9, $1c, $25, $20, $2d, $23, $18, $ff
1b720     CE D4 CD E7 
1b724     EB E3 0E 29 
1b728     2E 4D 41 35 
1b72c     36 23 15 FA | 	byte	$ce, $d4, $cd, $e7, $eb, $e3, $0e, $29, $2e, $4d, $41, $35, $36, $23, $15, $fa
1b730     D6 C3 C0 CE 
1b734     C0 B7 F5 FF 
1b738     04 22 25 1D 
1b73c     26 1E 11 ED | 	byte	$d6, $c3, $c0, $ce, $c0, $b7, $f5, $ff, $04, $22, $25, $1d, $26, $1e, $11, $ed
1b740     C8 CE E3 E9 
1b744     E9 EF 19 28 
1b748     3F 4F 3F 30 
1b74c     28 1C 0E EA | 	byte	$c8, $ce, $e3, $e9, $e9, $ef, $19, $28, $3f, $4f, $3f, $30, $28, $1c, $0e, $ea
1b750     CE BE D4 CA 
1b754     BC D1 FF FE 
1b758     11 24 22 19 
1b75c     1F 19 08 D5 | 	byte	$ce, $be, $d4, $ca, $bc, $d1, $ff, $fe, $11, $24, $22, $19, $1f, $19, $08, $d5
1b760     C5 DB ED E5 
1b764     E6 02 1B 30 
1b768     45 4B 37 26 
1b76c     1F 15 02 DD | 	byte	$c5, $db, $ed, $e5, $e6, $02, $1b, $30, $45, $4b, $37, $26, $1f, $15, $02, $dd
1b770     C3 D6 D3 C4 
1b774     BB EB FF 0A 
1b778     1A 25 1B 14 
1b77c     1C 13 FD C8 | 	byte	$c3, $d6, $d3, $c4, $bb, $eb, $ff, $0a, $1a, $25, $1b, $14, $1c, $13, $fd, $c8
1b780     C5 EF EA E3 
1b784     EC 0F 1A 3B 
1b788     49 47 28 1D 
1b78c     18 0D F2 D1 | 	byte	$c5, $ef, $ea, $e3, $ec, $0f, $1a, $3b, $49, $47, $28, $1d, $18, $0d, $f2, $d1
1b790     D4 DC CF C2 
1b794     CA FE 04 14 
1b798     20 22 0A 14 
1b79c     17 0D E9 BA | 	byte	$d4, $dc, $cf, $c2, $ca, $fe, $04, $14, $20, $22, $0a, $14, $17, $0d, $e9, $ba
1b7a0     E6 F0 E7 E5 
1b7a4     FC 14 28 40 
1b7a8     4C 41 14 1A 
1b7ac     12 06 E5 CE | 	byte	$e6, $f0, $e7, $e5, $fc, $14, $28, $40, $4c, $41, $14, $1a, $12, $06, $e5, $ce
1b7b0     E3 D7 CA C3 
1b7b4     E5 00 12 14 
1b7b8     23 18 FD 15 
1b7bc     12 02 CF CD | 	byte	$e3, $d7, $ca, $c3, $e5, $00, $12, $14, $23, $18, $fd, $15, $12, $02, $cf, $cd
1b7c0     F0 EE E4 E9 
1b7c4     0C 16 34 41 
1b7c8     4A 30 0E 16 
1b7cc     0C FB D5 E8 | 	byte	$f0, $ee, $e4, $e9, $0c, $16, $34, $41, $4a, $30, $0e, $16, $0c, $fb, $d5, $e8
1b7d0     E0 D4 CA C6 
1b7d4     F7 0B 17 19 
1b7d8     20 02 00 12 
1b7dc     0B F5 D2 DD | 	byte	$e0, $d4, $ca, $c6, $f7, $0b, $17, $19, $20, $02, $00, $12, $0b, $f5, $d2, $dd
1b7e0     EE E9 EA F5 
1b7e4     13 25 30 44 
1b7e8     41 19 10 10 
1b7ec     03 E7 EA E8 | 	byte	$ee, $e9, $ea, $f5, $13, $25, $30, $44, $41, $19, $10, $10, $03, $e7, $ea, $e8
1b7f0     DC CE CB DC 
1b7f4     02 17 16 1E 
1b7f8     12 F6 05 0E 
1b7fc     04 E9 E3 DF | 	byte	$dc, $ce, $cb, $dc, $02, $17, $16, $1e, $12, $f6, $05, $0e, $04, $e9, $e3, $df
1b800     ED EA E8 07 
1b804     1D 2B 30 43 
1b808     2A 10 0F 09 
1b80c     F8 F2 F0 E4 | 	byte	$ed, $ea, $e8, $07, $1d, $2b, $30, $43, $2a, $10, $0f, $09, $f8, $f2, $f0, $e4
1b810     D6 D3 CA F0 
1b814     13 1A 16 19 
1b818     FF F1 05 09 
1b81c     FB F7 E1 DC | 	byte	$d6, $d3, $ca, $f0, $13, $1a, $16, $19, $ff, $f1, $05, $09, $fb, $f7, $e1, $dc
1b820     EB F0 F2 0F 
1b824     2A 2B 30 33 
1b828     1E 0D 0B 01 
1b82c     FD F9 EB DF | 	byte	$eb, $f0, $f2, $0f, $2a, $2b, $30, $33, $1e, $0d, $0b, $01, $fd, $f9, $eb, $df
1b830     D8 D1 DC 03 
1b834     1B 18 17 04 
1b838     F6 F3 02 00 
1b83c     0E EF DD DB | 	byte	$d8, $d1, $dc, $03, $1b, $18, $17, $04, $f6, $f3, $02, $00, $0e, $ef, $dd, $db
1b840     F0 E9 04 1C 
1b844     2C 28 27 1E 
1b848     15 0E 05 FE 
1b84c     08 F3 E7 DD | 	byte	$f0, $e9, $04, $1c, $2c, $28, $27, $1e, $15, $0e, $05, $fe, $08, $f3, $e7, $dd
1b850     DB D0 EA 16 
1b854     1C 16 09 FA 
1b858     EF F5 FC 14 
1b85c     07 E9 D8 DE | 	byte	$db, $d0, $ea, $16, $1c, $16, $09, $fa, $ef, $f5, $fc, $14, $07, $e9, $d8, $de
1b860     EF F7 0F 26 
1b864     2B 26 11 14 
1b868     0E 0F FF 17 
1b86c     FE EE E3 E1 | 	byte	$ef, $f7, $0f, $26, $2b, $26, $11, $14, $0e, $0f, $ff, $17, $fe, $ee, $e3, $e1
1b870     D3 E3 FF 1C 
1b874     18 10 FB F6 
1b878     EA F4 0B 1E 
1b87c     FD E4 D9 E0 | 	byte	$d3, $e3, $ff, $1c, $18, $10, $fb, $f6, $ea, $f4, $0b, $1e, $fd, $e4, $d9, $e0
1b880     EA 08 1F 26 
1b884     26 17 07 0C 
1b888     0D 0A 1B 0F 
1b88c     F5 E9 E7 DF | 	byte	$ea, $08, $1f, $26, $26, $17, $07, $0c, $0d, $0a, $1b, $0f, $f5, $e9, $e7, $df
1b890     D8 EF 0C 1C 
1b894     13 FE F4 EF 
1b898     EE F9 1E 12 
1b89c     F7 E0 DC DA | 	byte	$d8, $ef, $0c, $1c, $13, $fe, $f4, $ef, $ee, $f9, $1e, $12, $f7, $e0, $dc, $da
1b8a0     FB 17 24 23 
1b8a4     1C 0B 01 FD 
1b8a8     0D 26 1E 01 
1b8ac     F0 ED E5 D6 | 	byte	$fb, $17, $24, $23, $1c, $0b, $01, $fd, $0d, $26, $1e, $01, $f0, $ed, $e5, $d6
1b8b0     E9 01 10 17 
1b8b4     04 F8 F1 E9 
1b8b8     F4 18 19 04 
1b8bc     F2 E5 D8 D5 | 	byte	$e9, $01, $10, $17, $04, $f8, $f1, $e9, $f4, $18, $19, $04, $f2, $e5, $d8, $d5
1b8c0     0C 24 22 17 
1b8c4     0E 05 F9 F2 
1b8c8     26 34 11 F6 
1b8cc     F2 EC E1 DF | 	byte	$0c, $24, $22, $17, $0e, $05, $f9, $f2, $26, $34, $11, $f6, $f2, $ec, $e1, $df
1b8d0     FC 05 11 09 
1b8d4     FC F1 EC E7 
1b8d8     17 18 08 FE 
1b8dc     F5 E1 D1 E8 | 	byte	$fc, $05, $11, $09, $fc, $f1, $ec, $e7, $17, $18, $08, $fe, $f5, $e1, $d1, $e8
1b8e0     1E 24 18 08 
1b8e4     07 FE F1 05 
1b8e8     38 2C 02 F8 
1b8ec     F3 E8 D9 F4 | 	byte	$1e, $24, $18, $08, $07, $fe, $f1, $05, $38, $2c, $02, $f8, $f3, $e8, $d9, $f4
1b8f0     0B 04 04 00 
1b8f4     F7 EA E2 10 
1b8f8     1E 10 FB 05 
1b8fc     F1 DD D4 FB | 	byte	$0b, $04, $04, $00, $f7, $ea, $e2, $10, $1e, $10, $fb, $05, $f1, $dd, $d4, $fb
1b900     23 1F 08 03 
1b904     01 F8 F2 21 
1b908     34 23 FF FA 
1b90c     ED E1 E8 0B | 	byte	$23, $1f, $08, $03, $01, $f8, $f2, $21, $34, $23, $ff, $fa, $ed, $e1, $e8, $0b
1b910     09 F8 FA FA 
1b914     EF E3 FF 20 
1b918     1A FD 00 01 
1b91c     EB D4 EA 09 | 	byte	$09, $f8, $fa, $fa, $ef, $e3, $ff, $20, $1a, $fd, $00, $01, $eb, $d4, $ea, $09
1b920     1D 08 03 FD 
1b924     FA F0 15 27 
1b928     28 15 02 F6 
1b92c     E9 DB 04 0E | 	byte	$1d, $08, $03, $fd, $fa, $f0, $15, $27, $28, $15, $02, $f6, $e9, $db, $04, $0e
1b930     01 E7 F9 F4 
1b934     E8 F0 17 21 
1b938     0F FD 00 FD 
1b93c     E6 D9 07 06 | 	byte	$01, $e7, $f9, $f4, $e8, $f0, $17, $21, $0f, $fd, $00, $fd, $e6, $d9, $07, $06
1b940     0A 03 FE F8 
1b944     F1 0A 22 23 
1b948     17 17 FF EE 
1b94c     E2 F3 13 0A | 	byte	$0a, $03, $fe, $f8, $f1, $0a, $22, $23, $17, $17, $ff, $ee, $e2, $f3, $13, $0a
1b950     E8 EA F7 EF 
1b954     EA 09 21 1C 
1b958     08 FC FC F5 
1b95c     DA FE 0B F7 | 	byte	$e8, $ea, $f7, $ef, $ea, $09, $21, $1c, $08, $fc, $fc, $f5, $da, $fe, $0b, $f7
1b960     FB 01 F7 F1 
1b964     08 16 28 1F 
1b968     11 13 FD EA 
1b96c     DC 0F 0F F0 | 	byte	$fb, $01, $f7, $f1, $08, $16, $28, $1f, $11, $13, $fd, $ea, $dc, $0f, $0f, $f0
1b970     E6 E9 F2 E8 
1b974     06 13 21 19 
1b978     04 F8 F9 F1 
1b97c     E2 0F 02 E3 | 	byte	$e6, $e9, $f2, $e8, $06, $13, $21, $19, $04, $f8, $f9, $f1, $e2, $0f, $02, $e3
1b980     FB FD F3 FB 
1b984     16 21 27 18 
1b988     0A 0F F6 E3 
1b98c     F7 14 FE E8 | 	byte	$fb, $fd, $f3, $fb, $16, $21, $27, $18, $0a, $0f, $f6, $e3, $f7, $14, $fe, $e8
1b990     E4 E7 EB FD 
1b994     0B 1E 25 0E 
1b998     01 F6 F6 E6 
1b99c     04 0C EC E3 | 	byte	$e4, $e7, $eb, $fd, $0b, $1e, $25, $0e, $01, $f6, $f6, $e6, $04, $0c, $ec, $e3
1b9a0     F6 F7 EC 13 
1b9a4     15 27 29 10 
1b9a8     05 09 F2 E1 
1b9ac     0F 08 EB EA | 	byte	$f6, $f7, $ec, $13, $15, $27, $29, $10, $05, $09, $f2, $e1, $0f, $08, $eb, $ea
1b9b0     DF E6 F5 0D 
1b9b4     0F 2A 22 09 
1b9b8     FD F2 F3 EF 
1b9bc     0F F7 E6 E3 | 	byte	$df, $e6, $f5, $0d, $0f, $2a, $22, $09, $fd, $f2, $f3, $ef, $0f, $f7, $e6, $e3
1b9c0     ED EF 05 17 
1b9c4     1A 32 1D 09 
1b9c8     00 03 E9 F7 
1b9cc     0F F4 ED E7 | 	byte	$ed, $ef, $05, $17, $1a, $32, $1d, $09, $00, $03, $e9, $f7, $0f, $f4, $ed, $e7
1b9d0     DB E6 0B 0E 
1b9d4     22 2F 12 05 
1b9d8     F9 EF F3 02 
1b9dc     04 E9 E9 DF | 	byte	$db, $e6, $0b, $0e, $22, $2f, $12, $05, $f9, $ef, $f3, $02, $04, $e9, $e9, $df
1b9e0     EA F5 11 14 
1b9e4     2D 2F 12 06 
1b9e8     FB FB F1 05 
1b9ec     FB EC EC E2 | 	byte	$ea, $f5, $11, $14, $2d, $2f, $12, $06, $fb, $fb, $f1, $05, $fb, $ec, $ec, $e2
1b9f0     D7 00 10 10 
1b9f4     31 26 0C 02 
1b9f8     F4 EB FD 06 
1b9fc     F2 EA E7 DA | 	byte	$d7, $00, $10, $10, $31, $26, $0c, $02, $f4, $eb, $fd, $06, $f2, $ea, $e7, $da
1ba00     E1 0B 13 1D 
1ba04     35 22 0D 01 
1ba08     F7 FB F8 01 
1ba0c     EF EF E8 DD | 	byte	$e1, $0b, $13, $1d, $35, $22, $0d, $01, $f7, $fb, $f8, $01, $ef, $ef, $e8, $dd
1ba10     DC 0E 10 24 
1ba14     33 1A 08 FD 
1ba18     EF F9 FD F8 
1ba1c     EB ED E2 D6 | 	byte	$dc, $0e, $10, $24, $33, $1a, $08, $fd, $ef, $f9, $fd, $f8, $eb, $ed, $e2, $d6
1ba20     EC 11 19 2C 
1ba24     32 15 09 FC 
1ba28     EF 08 F3 F4 
1ba2c     EE EE E4 D5 | 	byte	$ec, $11, $19, $2c, $32, $15, $09, $fc, $ef, $08, $f3, $f4, $ee, $ee, $e4, $d5
1ba30     F8 10 1C 30 
1ba34     2E 11 06 F8 
1ba38     EF 06 F1 EF 
1ba3c     ED EA DF D1 | 	byte	$f8, $10, $1c, $30, $2e, $11, $06, $f8, $ef, $06, $f1, $ef, $ed, $ea, $df, $d1
1ba40     02 14 20 35 
1ba44     29 10 04 F6 
1ba48     F8 06 E7 EE 
1ba4c     EF E9 DF DB | 	byte	$02, $14, $20, $35, $29, $10, $04, $f6, $f8, $06, $e7, $ee, $ef, $e9, $df, $db
1ba50     06 1B 21 35 
1ba54     21 0D 01 F2 
1ba58     FF FD E6 EC 
1ba5c     EF E6 DA E1 | 	byte	$06, $1b, $21, $35, $21, $0d, $01, $f2, $ff, $fd, $e6, $ec, $ef, $e6, $da, $e1
1ba60     07 1E 25 36 
1ba64     1F 0C 00 F5 
1ba68     03 F6 E5 ED 
1ba6c     EF E5 D8 F0 | 	byte	$07, $1e, $25, $36, $1f, $0c, $00, $f5, $03, $f6, $e5, $ed, $ef, $e5, $d8, $f0
1ba70     12 22 2A 35 
1ba74     19 09 FD FC 
1ba78     06 E5 E6 EE 
1ba7c     EC E3 D6 F2 | 	byte	$12, $22, $2a, $35, $19, $09, $fd, $fc, $06, $e5, $e6, $ee, $ec, $e3, $d6, $f2
1ba80     0C 1F 2F 32 
1ba84     14 07 F9 02 
1ba88     FD DE E4 EE 
1ba8c     E9 E1 DE FC | 	byte	$0c, $1f, $2f, $32, $14, $07, $f9, $02, $fd, $de, $e4, $ee, $e9, $e1, $de, $fc
1ba90     1D 25 33 2E 
1ba94     14 07 FC 07 
1ba98     FD D8 E5 EF 
1ba9c     E8 DD E7 FD | 	byte	$1d, $25, $33, $2e, $14, $07, $fc, $07, $fd, $d8, $e5, $ef, $e8, $dd, $e7, $fd
1baa0     12 20 35 29 
1baa4     0F 02 FF 02 
1baa8     EE D7 E4 EE 
1baac     E6 D9 EE 0F | 	byte	$12, $20, $35, $29, $0f, $02, $ff, $02, $ee, $d7, $e4, $ee, $e6, $d9, $ee, $0f
1bab0     25 27 38 24 
1bab4     0F 01 08 07 
1bab8     EC CF E8 EE 
1babc     E5 DA F7 03 | 	byte	$25, $27, $38, $24, $0f, $01, $08, $07, $ec, $cf, $e8, $ee, $e5, $da, $f7, $03
1bac0     11 25 37 1D 
1bac4     0C 00 0B F5 
1bac8     E5 D2 E9 EB 
1bacc     E2 DC FF 18 | 	byte	$11, $25, $37, $1d, $0c, $00, $0b, $f5, $e5, $d2, $e9, $eb, $e2, $dc, $ff, $18
1bad0     29 2C 37 1B 
1bad4     0B 06 0C FB 
1bad8     E2 CB EB EA 
1badc     E0 E3 06 02 | 	byte	$29, $2c, $37, $1b, $0b, $06, $0c, $fb, $e2, $cb, $eb, $ea, $e0, $e3, $06, $02
1bae0     14 2D 33 15 
1bae4     05 0C 07 E4 
1bae8     E2 CD EA E6 
1baec     DC EA 07 20 | 	byte	$14, $2d, $33, $15, $05, $0c, $07, $e4, $e2, $cd, $ea, $e6, $dc, $ea, $07, $20
1baf0     29 35 34 16 
1baf4     08 12 08 F4 
1baf8     D7 C8 EC E7 
1bafc     DC FC 09 01 | 	byte	$29, $35, $34, $16, $08, $12, $08, $f4, $d7, $c8, $ec, $e7, $dc, $fc, $09, $01
1bb00     18 35 2D 10 
1bb04     09 10 F5 E0 
1bb08     DC CC E9 E3 
1bb0c     D8 01 0E 2A | 	byte	$18, $35, $2d, $10, $09, $10, $f5, $e0, $dc, $cc, $e9, $e3, $d8, $01, $0e, $2a
1bb10     29 3A 2A 11 
1bb14     14 13 01 EA 
1bb18     CC CA EB E5 
1bb1c     DE 09 09 01 | 	byte	$29, $3a, $2a, $11, $14, $13, $01, $ea, $cc, $ca, $eb, $e5, $de, $09, $09, $01
1bb20     1E 38 22 0B 
1bb24     16 0A E7 E1 
1bb28     D5 CC E5 DE 
1bb2c     E3 07 1A 2C | 	byte	$1e, $38, $22, $0b, $16, $0a, $e7, $e1, $d5, $cc, $e5, $de, $e3, $07, $1a, $2c
1bb30     2D 3B 24 12 
1bb34     1C 0E FA DF 
1bb38     C7 CE E7 DD 
1bb3c     F4 0D 08 01 | 	byte	$2d, $3b, $24, $12, $1c, $0e, $fa, $df, $c7, $ce, $e7, $dd, $f4, $0d, $08, $01
1bb40     27 36 1A 15 
1bb44     18 F8 E1 E0 
1bb48     CC CF E1 D7 
1bb4c     FA 09 25 2B | 	byte	$27, $36, $1a, $15, $18, $f8, $e1, $e0, $cc, $cf, $e1, $d7, $fa, $09, $25, $2b
1bb50     35 3A 1B 22 
1bb54     1B 07 F4 D5 
1bb58     C1 D0 E4 DC 
1bb5c     06 0C 06 02 | 	byte	$35, $3a, $1b, $22, $1b, $07, $f4, $d5, $c1, $d0, $e4, $dc, $06, $0c, $06, $02
1bb60     30 33 16 1F 
1bb64     10 ED DF DD 
1bb68     C4 CE DD DC 
1bb6c     06 0F 2A 29 | 	byte	$30, $33, $16, $1f, $10, $ed, $df, $dd, $c4, $ce, $dd, $dc, $06, $0f, $2a, $29
1bb70     3B 35 20 24 
1bb74     16 03 EA D0 
1bb78     BE D4 E0 ED 
1bb7c     0D 0B 03 05 | 	byte	$3b, $35, $20, $24, $16, $03, $ea, $d0, $be, $d4, $e0, $ed, $0d, $0b, $03, $05
1bb80     34 2A 22 1D 
1bb84     01 E4 E1 D9 
1bb88     B9 CC D8 F3 
1bb8c     07 1C 2D 2C | 	byte	$34, $2a, $22, $1d, $01, $e4, $e1, $d9, $b9, $cc, $d8, $f3, $07, $1c, $2d, $2c
1bb90     3E 30 2C 22 
1bb94     11 FC DF C9 
1bb98     BA D4 DD 00 
1bb9c     0E 09 02 0E | 	byte	$3e, $30, $2c, $22, $11, $fc, $df, $c9, $ba, $d4, $dd, $00, $0e, $09, $02, $0e
1bba0     37 2D 27 14 
1bba4     F3 E1 E3 D2 
1bba8     B5 CB D7 00 
1bbac     0B 27 2C 31 | 	byte	$37, $2d, $27, $14, $f3, $e1, $e3, $d2, $b5, $cb, $d7, $00, $0b, $27, $2c, $31
1bbb0     3D 38 2C 21 
1bbb4     0A F1 D8 C6 
1bbb8     B8 D1 E3 09 
1bbbc     0C 07 FF 1A | 	byte	$3d, $38, $2c, $21, $0a, $f1, $d8, $c6, $b8, $d1, $e3, $09, $0c, $07, $ff, $1a
1bbc0     34 35 23 06 
1bbc4     EC E2 E0 C9 
1bbc8     AF CB E2 04 
1bbcc     16 2B 2A 39 | 	byte	$34, $35, $23, $06, $ec, $e2, $e0, $c9, $af, $cb, $e2, $04, $16, $2b, $2a, $39
1bbd0     3F 3D 2E 1B 
1bbd4     04 E8 D3 C2 
1bbd8     B4 D0 EF 0C 
1bbdc     0A 04 FD 28 | 	byte	$3f, $3d, $2e, $1b, $04, $e8, $d3, $c2, $b4, $d0, $ef, $0c, $0a, $04, $fd, $28
1bbe0     3D 34 1E F8 
1bbe4     E6 E4 DB BF 
1bbe8     A9 C8 F3 08 
1bbec     22 2D 29 3B | 	byte	$3d, $34, $1e, $f8, $e6, $e4, $db, $bf, $a9, $c8, $f3, $08, $22, $2d, $29, $3b
1bbf0     4D 3C 2F 14 
1bbf4     F9 E0 CF BD 
1bbf8     B0 D2 00 0B 
1bbfc     09 03 03 30 | 	byte	$4d, $3c, $2f, $14, $f9, $e0, $cf, $bd, $b0, $d2, $00, $0b, $09, $03, $03, $30
1bc00     48 30 0E F2 
1bc04     E6 E6 D5 B7 
1bc08     A5 C7 FB 13 
1bc0c     2B 2C 2B 42 | 	byte	$48, $30, $0e, $f2, $e6, $e6, $d5, $b7, $a5, $c7, $fb, $13, $2b, $2c, $2b, $42
1bc10     51 41 26 0D 
1bc14     F1 DB CB B9 
1bc18     AD D4 07 09 
1bc1c     06 FF 09 41 | 	byte	$51, $41, $26, $0d, $f1, $db, $cb, $b9, $ad, $d4, $07, $09, $06, $ff, $09, $41
1bc20     4A 29 02 EE 
1bc24     EA E1 CF AE 
1bc28     A2 D3 02 21 
1bc2c     2C 2C 2D 50 | 	byte	$4a, $29, $02, $ee, $ea, $e1, $cf, $ae, $a2, $d3, $02, $21, $2c, $2c, $2d, $50
1bc30     58 41 20 04 
1bc34     EA D8 C7 B6 
1bc38     A9 DF 08 07 
1bc3c     03 FC 15 4B | 	byte	$58, $41, $20, $04, $ea, $d8, $c7, $b6, $a9, $df, $08, $07, $03, $fc, $15, $4b
1bc40     46 21 FB ED 
1bc44     EC DE C5 A9 
1bc48     9E E1 11 28 
1bc4c     2B 2B 36 59 | 	byte	$46, $21, $fb, $ed, $ec, $de, $c5, $a9, $9e, $e1, $11, $28, $2b, $2b, $36, $59
1bc50     60 39 16 FA 
1bc54     E5 D5 C4 B3 
1bc58     A8 F1 07 05 
1bc5c     FE FC 2E 4D | 	byte	$60, $39, $16, $fa, $e5, $d5, $c4, $b3, $a8, $f1, $07, $05, $fe, $fc, $2e, $4d
1bc60     43 0F F5 F1 
1bc64     EA D9 BA A6 
1bc68     9D F3 20 2A 
1bc6c     2A 27 47 64 | 	byte	$43, $0f, $f5, $f1, $ea, $d9, $ba, $a6, $9d, $f3, $20, $2a, $2a, $27, $47, $64
1bc70     5E 2E 0D F3 
1bc74     E2 D1 C0 B0 
1bc78     AD F5 05 02 
1bc7c     FC 05 3D 4C | 	byte	$5e, $2e, $0d, $f3, $e2, $d1, $c0, $b0, $ad, $f5, $05, $02, $fc, $05, $3d, $4c
1bc80     3A 07 F5 F4 
1bc84     E7 D0 B5 A2 
1bc88     A1 07 26 2A 
1bc8c     2A 26 55 6B | 	byte	$3a, $07, $f5, $f4, $e7, $d0, $b5, $a2, $a1, $07, $26, $2a, $2a, $26, $55, $6b
1bc90     5B 20 03 F0 
1bc94     DE CF BD AC 
1bc98     B4 F9 02 FE 
1bc9c     F9 13 43 49 | 	byte	$5b, $20, $03, $f0, $de, $cf, $bd, $ac, $b4, $f9, $02, $fe, $f9, $13, $43, $49
1bca0     2F FF FA F3 
1bca4     E3 C8 AE 9D 
1bca8     BD 16 26 29 
1bcac     28 30 62 6A | 	byte	$2f, $ff, $fa, $f3, $e3, $c8, $ae, $9d, $bd, $16, $26, $29, $28, $30, $62, $6a
1bcb0     4F 13 FE ED 
1bcb4     DC CB BA A9 
1bcb8     BF F3 FE FA 
1bcbc     FD 24 43 45 | 	byte	$4f, $13, $fe, $ed, $dc, $cb, $ba, $a9, $bf, $f3, $fe, $fa, $fd, $24, $43, $45
1bcc0     25 FE FC F0 
1bcc4     DD BE AC 9D 
1bcc8     D9 16 27 29 
1bccc     27 46 64 68 | 	byte	$25, $fe, $fc, $f0, $dd, $be, $ac, $9d, $d9, $16, $27, $29, $27, $46, $64, $68
1bcd0     3C 0D FA EB 
1bcd4     D8 C9 B8 A7 
1bcd8     C5 F3 FB F6 
1bcdc     0C 2A 40 40 | 	byte	$3c, $0d, $fa, $eb, $d8, $c9, $b8, $a7, $c5, $f3, $fb, $f6, $0c, $2a, $40, $40
1bce0     1D 05 FC ED 
1bce4     D4 BB A9 B5 
1bce8     E7 15 26 27 
1bcec     31 4D 64 5D | 	byte	$1d, $05, $fc, $ed, $d4, $bb, $a9, $b5, $e7, $15, $26, $27, $31, $4d, $64, $5d
1bcf0     31 0A F9 E7 
1bcf4     D6 C6 B6 AE 
1bcf8     C8 ED F7 FB 
1bcfc     17 2C 3D 3A | 	byte	$31, $0a, $f9, $e7, $d6, $c6, $b6, $ae, $c8, $ed, $f7, $fb, $17, $2c, $3d, $3a
1bd00     1B 08 FB E8 
1bd04     CB B5 B2 CE 
1bd08     ED 14 25 2C 
1bd0c     3F 51 60 4C | 	byte	$1b, $08, $fb, $e8, $cb, $b5, $b2, $ce, $ed, $14, $25, $2c, $3f, $51, $60, $4c
1bd10     2B 08 F6 E4 
1bd14     D3 C3 B2 B2 
1bd18     C8 E7 F1 0B 
1bd1c     1D 2B 38 30 | 	byte	$2b, $08, $f6, $e4, $d3, $c3, $b2, $b2, $c8, $e7, $f1, $0b, $1d, $2b, $38, $30
1bd20     21 09 F8 DE 
1bd24     C4 B7 C8 DC 
1bd28     F0 0E 26 36 
1bd2c     45 51 52 40 | 	byte	$21, $09, $f8, $de, $c4, $b7, $c8, $dc, $f0, $0e, $26, $36, $45, $51, $52, $40
1bd30     26 06 F3 E3 
1bd34     D2 C1 AE BE 
1bd38     C8 DE FA 14 
1bd3c     22 29 31 2C | 	byte	$26, $06, $f3, $e3, $d2, $c1, $ae, $be, $c8, $de, $fa, $14, $22, $29, $31, $2c
1bd40     24 07 F4 D3 
1bd44     C0 CD CC E6 
1bd48     F2 0E 30 39 
1bd4c     49 4B 45 39 | 	byte	$24, $07, $f4, $d3, $c0, $cd, $cc, $e6, $f2, $0e, $30, $39, $49, $4b, $45, $39
1bd50     25 03 F0 DE 
1bd54     CF BD AA C5 
1bd58     C4 D5 0B 13 
1bd5c     23 27 29 2D | 	byte	$25, $03, $f0, $de, $cf, $bd, $aa, $c5, $c4, $d5, $0b, $13, $23, $27, $29, $2d
1bd60     24 06 E9 CC 
1bd64     D2 DA D0 F3 
1bd68     F3 12 36 39 
1bd6c     49 3F 3B 31 | 	byte	$24, $06, $e9, $cc, $d2, $da, $d0, $f3, $f3, $12, $36, $39, $49, $3f, $3b, $31
1bd70     21 04 EC DA 
1bd74     CB BA AD C9 
1bd78     C2 E1 11 12 
1bd7c     23 24 25 2A | 	byte	$21, $04, $ec, $da, $cb, $ba, $ad, $c9, $c2, $e1, $11, $12, $23, $24, $25, $2a
1bd80     21 FF DA D6 
1bd84     E3 DA DB F6 
1bd88     F8 1A 39 39 
1bd8c     3F 3A 33 29 | 	byte	$21, $ff, $da, $d6, $e3, $da, $db, $f6, $f8, $1a, $39, $39, $3f, $3a, $33, $29
1bd90     1E FF E8 D7 
1bd94     C5 B5 B7 C8 
1bd98     C3 F5 10 12 
1bd9c     22 21 26 25 | 	byte	$1e, $ff, $e8, $d7, $c5, $b5, $b7, $c8, $c3, $f5, $10, $12, $22, $21, $26, $25
1bda0     1B F7 DD EB 
1bda4     E4 D8 EA FA 
1bda8     04 20 38 34 
1bdac     3A 36 29 24 | 	byte	$1b, $f7, $dd, $eb, $e4, $d8, $ea, $fa, $04, $20, $38, $34, $3a, $36, $29, $24
1bdb0     19 FE E3 D2 
1bdb4     C1 AF C0 C4 
1bdb8     D7 F5 0E 13 
1bdbc     21 24 21 20 | 	byte	$19, $fe, $e3, $d2, $c1, $af, $c0, $c4, $d7, $f5, $0e, $13, $21, $24, $21, $20
1bdc0     13 EE F2 F0 
1bdc4     E5 D9 F4 05 
1bdc8     0A 21 30 2C 
1bdcc     37 33 1E 1D | 	byte	$13, $ee, $f2, $f0, $e5, $d9, $f4, $05, $0a, $21, $30, $2c, $37, $33, $1e, $1d
1bdd0     13 F9 DF CD 
1bdd4     BC B0 C7 CF 
1bdd8     E1 F5 0B 17 
1bddc     1E 28 18 1A | 	byte	$13, $f9, $df, $cd, $bc, $b0, $c7, $cf, $e1, $f5, $0b, $17, $1e, $28, $18, $1a
1bde0     05 02 F8 EE 
1bde4     E4 E4 FF 0E 
1bde8     0C 1E 24 2F 
1bdec     35 2D 14 17 | 	byte	$05, $02, $f8, $ee, $e4, $e4, $ff, $0e, $0c, $1e, $24, $2f, $35, $2d, $14, $17
1bdf0     0F F6 D9 C9 
1bdf4     B7 BA CA E1 
1bdf8     E2 F8 08 18 
1bdfc     20 27 0E 0D | 	byte	$0f, $f6, $d9, $c9, $b7, $ba, $ca, $e1, $e2, $f8, $08, $18, $20, $27, $0e, $0d
1be00     0D 0C F9 ED 
1be04     E1 F2 0E 12 
1be08     0C 19 1F 31 
1be0c     33 27 0C 11 | 	byte	$0d, $0c, $f9, $ed, $e1, $f2, $0e, $12, $0c, $19, $1f, $31, $33, $27, $0c, $11
1be10     09 F3 D6 C4 
1be14     B3 C4 D8 E7 
1be18     E2 F9 07 17 
1be1c     24 1F 06 0A | 	byte	$09, $f3, $d6, $c4, $b3, $c4, $d8, $e7, $e2, $f9, $07, $17, $24, $1f, $06, $0a
1be20     19 0D F6 EC 
1be24     E4 02 16 13 
1be28     06 13 1F 31 
1be2c     2F 1F 05 0A | 	byte	$19, $0d, $f6, $ec, $e4, $02, $16, $13, $06, $13, $1f, $31, $2f, $1f, $05, $0a
1be30     04 EB D0 BF 
1be34     B8 CD E6 E9 
1be38     E1 FB 08 19 
1be3c     25 16 00 13 | 	byte	$04, $eb, $d0, $bf, $b8, $cd, $e6, $e9, $e1, $fb, $08, $19, $25, $16, $00, $13
1be40     1C 0D F5 E8 
1be44     F3 13 18 11 
1be48     FD 12 22 30 
1be4c     2A 13 00 04 | 	byte	$1c, $0d, $f5, $e8, $f3, $13, $18, $11, $fd, $12, $22, $30, $2a, $13, $00, $04
1be50     FF E7 CC B8 
1be54     C2 DD EB E8 
1be58     E1 FA 0C 1C 
1be5c     23 0A 07 19 | 	byte	$ff, $e7, $cc, $b8, $c2, $dd, $eb, $e8, $e1, $fa, $0c, $1c, $23, $0a, $07, $19
1be60     1B 0B F3 E8 
1be64     08 1B 18 08 
1be68     F9 12 27 2E 
1be6c     23 09 FC FE | 	byte	$1b, $0b, $f3, $e8, $08, $1b, $18, $08, $f9, $12, $27, $2e, $23, $09, $fc, $fe
1be70     F9 E1 C5 BA 
1be74     CF E8 ED E6 
1be78     E1 FA 0E 1E 
1be7c     19 0D 0D 17 | 	byte	$f9, $e1, $c5, $ba, $cf, $e8, $ed, $e6, $e1, $fa, $0e, $1e, $19, $0d, $0d, $17
1be80     18 06 F0 F4 
1be84     18 1D 11 FF 
1be88     FC 13 2B 2B 
1be8c     1A 04 F6 F8 | 	byte	$18, $06, $f0, $f4, $18, $1d, $11, $ff, $fc, $13, $2b, $2b, $1a, $04, $f6, $f8
1be90     F4 D9 BE C4 
1be94     DE EE EB E4 
1be98     E3 FC 11 1F 
1be9c     13 14 0E 15 | 	byte	$f4, $d9, $be, $c4, $de, $ee, $eb, $e4, $e3, $fc, $11, $1f, $13, $14, $0e, $15
1bea0     17 04 ED 08 
1bea4     20 1B 09 FD 
1bea8     FD 17 2B 26 
1beac     0D FF F2 F3 | 	byte	$17, $04, $ed, $08, $20, $1b, $09, $fd, $fd, $17, $2b, $26, $0d, $ff, $f2, $f3
1beb0     EF D3 BE CE 
1beb4     EA F0 EA E3 
1beb8     E5 02 14 1B 
1bebc     19 15 0C 13 | 	byte	$ef, $d3, $be, $ce, $ea, $f0, $ea, $e3, $e5, $02, $14, $1b, $19, $15, $0c, $13
1bec0     14 FE F5 1C 
1bec4     22 14 03 FB 
1bec8     00 1D 2A 1D 
1becc     07 FA EE EE | 	byte	$14, $fe, $f5, $1c, $22, $14, $03, $fb, $00, $1d, $2a, $1d, $07, $fa, $ee, $ee
1bed0     E8 CD C7 DB 
1bed4     F1 F0 E9 DF 
1bed8     E6 07 15 19 
1bedc     1E 13 0A 12 | 	byte	$e8, $cd, $c7, $db, $f1, $f0, $e9, $df, $e6, $07, $15, $19, $1e, $13, $0a, $12
1bee0     11 F8 09 25 
1bee4     1E 0C 02 F8 
1bee8     03 26 26 12 
1beec     02 F6 E9 EA | 	byte	$11, $f8, $09, $25, $1e, $0c, $02, $f8, $03, $26, $26, $12, $02, $f6, $e9, $ea
1bef0     E4 C6 D2 E7 
1bef4     F4 EF E7 DD 
1bef8     EC 0B 14 1F 
1befc     1C 10 09 10 | 	byte	$e4, $c6, $d2, $e7, $f4, $ef, $e7, $dd, $ec, $0b, $14, $1f, $1c, $10, $09, $10
1bf00     0D FB 1F 26 
1bf04     16 08 01 F6 
1bf08     08 28 1F 09 
1bf0c     FD F1 E5 E6 | 	byte	$0d, $fb, $1f, $26, $16, $08, $01, $f6, $08, $28, $1f, $09, $fd, $f1, $e5, $e6
1bf10     DE CD D9 EF 
1bf14     F3 EE E5 DA 
1bf18     F4 0B 17 25 
1bf1c     18 0E 07 0E | 	byte	$de, $cd, $d9, $ef, $f3, $ee, $e5, $da, $f4, $0b, $17, $25, $18, $0e, $07, $0e
1bf20     09 10 29 21 
1bf24     10 08 FE F4 
1bf28     18 26 14 03 
1bf2c     F9 ED E0 E2 | 	byte	$09, $10, $29, $21, $10, $08, $fe, $f4, $18, $26, $14, $03, $f9, $ed, $e0, $e2
1bf30     D5 DB DE F4 
1bf34     F2 EB E2 D8 
1bf38     03 08 1E 22 
1bf3c     12 0C 05 0E | 	byte	$d5, $db, $de, $f4, $f2, $eb, $e2, $d8, $03, $08, $1e, $22, $12, $0c, $05, $0e
1bf40     09 22 29 19 
1bf44     0C 05 FC F3 
1bf48     23 20 0A FF 
1bf4c     F5 E9 DC DF | 	byte	$09, $22, $29, $19, $0c, $05, $fc, $f3, $23, $20, $0a, $ff, $f5, $e9, $dc, $df
1bf50     DE E0 E4 F6 
1bf54     F0 E8 E1 DE 
1bf58     07 09 25 1C 
1bf5c     10 0A 02 0A | 	byte	$de, $e0, $e4, $f6, $f0, $e8, $e1, $de, $07, $09, $25, $1c, $10, $0a, $02, $0a
1bf60     1A 2A 25 12 
1bf64     0A 02 FA FD 
1bf68     24 13 05 FC 
1bf6c     F1 E6 D9 DC | 	byte	$1a, $2a, $25, $12, $0a, $02, $fa, $fd, $24, $13, $05, $fc, $f1, $e6, $d9, $dc
1bf70     EB DE EC F5 
1bf74     EE E5 DD EB 
1bf78     04 10 26 15 
1bf7c     0D 09 03 11 | 	byte	$eb, $de, $ec, $f5, $ee, $e5, $dd, $eb, $04, $10, $26, $15, $0d, $09, $03, $11
1bf80     29 2D 1D 10 
1bf84     09 01 F6 0C 
1bf88     1F 0A 01 F7 
1bf8c     ED E0 D6 E9 | 	byte	$29, $2d, $1d, $10, $09, $01, $f6, $0c, $1f, $0a, $01, $f7, $ed, $e0, $d6, $e9
1bf90     EB DC F0 F3 
1bf94     EC E3 DB F6 
1bf98     00 19 22 12 
1bf9c     0C 05 01 24 | 	byte	$eb, $dc, $f0, $f3, $ec, $e3, $db, $f6, $00, $19, $22, $12, $0c, $05, $01, $24
1bfa0     2E 2A 17 0E 
1bfa4     07 FE FB 16 
1bfa8     13 06 FD F4 
1bfac     EA DD DA F8 | 	byte	$2e, $2a, $17, $0e, $07, $fe, $fb, $16, $13, $06, $fd, $f4, $ea, $dd, $da, $f8
1bfb0     E6 DD F3 F1 
1bfb4     E9 DF E2 FA 
1bfb8     01 1F 1D 0E 
1bfbc     08 02 0B 30 | 	byte	$e6, $dd, $f3, $f1, $e9, $df, $e2, $fa, $01, $1f, $1d, $0e, $08, $02, $0b, $30
1bfc0     30 22 13 0D 
1bfc4     05 FB 03 15 
1bfc8     0B 02 FA F0 
1bfcc     E4 D9 EA F8 | 	byte	$30, $22, $13, $0d, $05, $fb, $03, $15, $0b, $02, $fa, $f0, $e4, $d9, $ea, $f8
1bfd0     E2 E1 F2 EF 
1bfd4     E7 DF E8 F6 
1bfd8     09 21 18 0C 
1bfdc     06 01 1F 35 | 	byte	$e2, $e1, $f2, $ef, $e7, $df, $e8, $f6, $09, $21, $18, $0c, $06, $01, $1f, $35
1bfe0     2D 1B 11 09 
1bfe4     02 01 06 0D 
1bfe8     06 FF F6 EC 
1bfec     E0 DA FA F3 | 	byte	$2d, $1b, $11, $09, $02, $01, $06, $0d, $06, $ff, $f6, $ec, $e0, $da, $fa, $f3
1bff0     E0 E2 F2 EC 
1bff4     E2 E9 E8 F7 
1bff8     10 21 11 0A 
1bffc     06 08 32 37 | 	byte	$e0, $e2, $f2, $ec, $e2, $e9, $e8, $f7, $10, $21, $11, $0a, $06, $08, $32, $37
1c000     26 17 10 08 
1c004     01 09 02 08 
1c008     03 FB F1 E9 
1c00c     E2 E4 00 EB | 	byte	$26, $17, $10, $08, $01, $09, $02, $08, $03, $fb, $f1, $e9, $e2, $e4, $00, $eb
1c010     E1 E2 EF E8 
1c014     E5 EA E3 FA 
1c018     15 1D 0D 06 
1c01c     08 1A 39 32 | 	byte	$e1, $e2, $ef, $e8, $e5, $ea, $e3, $fa, $15, $1d, $0d, $06, $08, $1a, $39, $32
1c020     1D 14 0D 03 
1c024     08 08 FB 06 
1c028     00 F7 EF E6 
1c02c     E1 F9 FC E6 | 	byte	$1d, $14, $0d, $03, $08, $08, $fb, $06, $00, $f7, $ef, $e6, $e1, $f9, $fc, $e6
1c030     E0 E1 EC E5 
1c034     EB E6 E3 02 
1c038     1A 19 09 0B 
1c03c     0A 2D 3D 2A | 	byte	$e0, $e1, $ec, $e5, $eb, $e6, $e3, $02, $1a, $19, $09, $0b, $0a, $2d, $3d, $2a
1c040     19 11 0A 08 
1c044     0B FC FC 04 
1c048     FD F5 ED E9 
1c04c     EA 02 F8 E4 | 	byte	$19, $11, $0a, $08, $0b, $fc, $fc, $04, $fd, $f5, $ed, $e9, $ea, $02, $f8, $e4
1c050     E0 E0 E8 ED 
1c054     EA DD E9 07 
1c058     1A 12 0A 0A 
1c05c     1B 37 38 22 | 	byte	$e0, $e0, $e8, $ed, $ea, $dd, $e9, $07, $1a, $12, $0a, $0a, $1b, $37, $38, $22
1c060     16 10 09 0F 
1c064     08 F4 01 01 
1c068     F9 F1 EF E6 
1c06c     F9 02 EF E3 | 	byte	$16, $10, $09, $0f, $08, $f4, $01, $01, $f9, $f1, $ef, $e6, $f9, $02, $ef, $e3
1c070     DB DC ED EE 
1c074     E3 DA EF 09 
1c078     19 10 0D 0D 
1c07c     2A 3D 31 1C | 	byte	$db, $dc, $ed, $ee, $e3, $da, $ef, $09, $19, $10, $0d, $0d, $2a, $3d, $31, $1c
1c080     14 0C 13 0D 
1c084     FD F2 02 FE 
1c088     F6 F3 EE F0 
1c08c     05 00 E8 E3 | 	byte	$14, $0c, $13, $0d, $fd, $f2, $02, $fe, $f6, $f3, $ee, $f0, $05, $00, $e8, $e3
1c090     DA D9 F2 E8 
1c094     DF DA F5 0B 
1c098     19 12 09 1B 
1c09c     32 3D 28 18 | 	byte	$da, $d9, $f2, $e8, $df, $da, $f5, $0b, $19, $12, $09, $1b, $32, $3d, $28, $18
1c0a0     11 12 12 05 
1c0a4     F9 F4 01 FA 
1c0a8     F7 F4 EB FC 
1c0ac     08 F9 E6 E1 | 	byte	$11, $12, $12, $05, $f9, $f4, $01, $fa, $f7, $f4, $eb, $fc, $08, $f9, $e6, $e1
1c0b0     D6 E3 ED DF 
1c0b4     DC DD F6 0D 
1c0b8     1B 0E 0E 27 
1c0bc     3A 36 1F 16 | 	byte	$d6, $e3, $ed, $df, $dc, $dd, $f6, $0d, $1b, $0e, $0e, $27, $3a, $36, $1f, $16
1c0c0     13 17 0B FD 
1c0c4     F4 F8 FF FA 
1c0c8     F9 F1 F7 08 
1c0cc     06 EF E2 DE | 	byte	$13, $17, $0b, $fd, $f4, $f8, $ff, $fa, $f9, $f1, $f7, $08, $06, $ef, $e2, $de
1c0d0     DF DF E2 DD 
1c0d4     D8 E3 F7 13 
1c0d8     1B 0B 1E 30 
1c0dc     3E 2C 1C 15 | 	byte	$df, $df, $e2, $dd, $d8, $e3, $f7, $13, $1b, $0b, $1e, $30, $3e, $2c, $1c, $15
1c0e0     1C 12 02 FA 
1c0e4     EF FC FC FD 
1c0e8     F7 F1 03 0C 
1c0ec     FF EA DF E3 | 	byte	$1c, $12, $02, $fa, $ef, $fc, $fc, $fd, $f7, $f1, $03, $0c, $ff, $ea, $df, $e3
1c0f0     E0 D2 DC DC 
1c0f4     D6 E4 FC 16 
1c0f8     17 13 29 36 
1c0fc     38 26 16 1E | 	byte	$e0, $d2, $dc, $dc, $d6, $e4, $fc, $16, $17, $13, $29, $36, $38, $26, $16, $1e
1c100     19 06 00 F7 
1c104     EF FE 00 FB 
1c108     F2 FF 0D 0B 
1c10c     F5 E7 E3 E9 | 	byte	$19, $06, $00, $f7, $ef, $fe, $00, $fb, $f2, $ff, $0d, $0b, $f5, $e7, $e3, $e9
1c110     D8 C7 D8 DA 
1c114     D9 E7 02 18 
1c118     16 20 2F 39 
1c11c     31 1E 21 1D | 	byte	$d8, $c7, $d8, $da, $d9, $e7, $02, $18, $16, $20, $2f, $39, $31, $1e, $21, $1d
1c120     0C 02 FB F2 
1c124     F6 02 FF FA 
1c128     FD 0C 11 04 
1c12c     F0 E8 EB E4 | 	byte	$0c, $02, $fb, $f2, $f6, $02, $ff, $fa, $fd, $0c, $11, $04, $f0, $e8, $eb, $e4
1c130     CA C3 D3 D4 
1c134     E0 EC 01 15 
1c138     23 2B 31 37 
1c13c     2A 25 22 14 | 	byte	$ca, $c3, $d3, $d4, $e0, $ec, $01, $15, $23, $2b, $31, $37, $2a, $25, $22, $14
1c140     04 01 F8 ED 
1c144     00 03 FE F7 
1c148     08 13 0E F9 
1c14c     EE F0 E7 D6 | 	byte	$04, $01, $f8, $ed, $00, $03, $fe, $f7, $08, $13, $0e, $f9, $ee, $f0, $e7, $d6
1c150     C8 BE CF D2 
1c154     E8 EC 02 1F 
1c158     2E 30 33 31 
1c15c     30 26 1C 07 | 	byte	$c8, $be, $cf, $d2, $e8, $ec, $02, $1f, $2e, $30, $33, $31, $30, $26, $1c, $07
1c160     04 FD F4 F3 
1c164     06 01 FA 07 
1c168     14 15 08 F6 
1c16c     F8 EE DB CE | 	byte	$04, $fd, $f4, $f3, $06, $01, $fa, $07, $14, $15, $08, $f6, $f8, $ee, $db, $ce
1c170     C6 B8 C7 DF 
1c174     E9 EA 07 2C 
1c178     37 2E 2E 37 
1c17c     30 20 0B 04 | 	byte	$c6, $b8, $c7, $df, $e9, $ea, $07, $2c, $37, $2e, $2e, $37, $30, $20, $0b, $04
1c180     01 F8 EF 02 
1c184     04 FE 03 13 
1c188     19 13 FF FF 
1c18c     F6 E4 CF CC | 	byte	$01, $f8, $ef, $02, $04, $fe, $03, $13, $19, $13, $ff, $ff, $f6, $e4, $cf, $cc
1c190     C3 B4 C9 E8 
1c194     E6 E7 18 39 
1c198     39 2B 34 3B 
1c19c     29 12 04 02 | 	byte	$c3, $b4, $c9, $e8, $e6, $e7, $18, $39, $39, $2b, $34, $3b, $29, $12, $04, $02
1c1a0     FC F3 F6 06 
1c1a4     03 01 12 1C 
1c1a8     18 0B 07 FE 
1c1ac     F0 D6 CA C9 | 	byte	$fc, $f3, $f6, $06, $03, $01, $12, $1c, $18, $0b, $07, $fe, $f0, $d6, $ca, $c9
1c1b0     BC B2 CF E7 
1c1b4     E2 F7 23 3D 
1c1b8     35 2E 3B 37 
1c1bc     1A 08 03 00 | 	byte	$bc, $b2, $cf, $e7, $e2, $f7, $23, $3d, $35, $2e, $3b, $37, $1a, $08, $03, $00
1c1c0     F7 F4 02 06 
1c1c4     00 11 1C 1D 
1c1c8     15 0F 06 F9 
1c1cc     DF D0 C8 C5 | 	byte	$f7, $f4, $02, $06, $00, $11, $1c, $1d, $15, $0f, $06, $f9, $df, $d0, $c8, $c5
1c1d0     B9 B4 D2 E5 
1c1d4     E7 02 2D 3C 
1c1d8     37 33 3A 2B 
1c1dc     0C 03 01 FB | 	byte	$b9, $b4, $d2, $e5, $e7, $02, $2d, $3c, $37, $33, $3a, $2b, $0c, $03, $01, $fb
1c1e0     F7 F7 06 01 
1c1e4     0F 1A 20 1C 
1c1e8     1A 0D 02 E9 
1c1ec     DA CC C4 BF | 	byte	$f7, $f7, $06, $01, $0f, $1a, $20, $1c, $1a, $0d, $02, $e9, $da, $cc, $c4, $bf
1c1f0     BA BB D1 E1 
1c1f4     F4 0E 30 41 
1c1f8     38 35 32 1C 
1c1fc     07 01 FE F8 | 	byte	$ba, $bb, $d1, $e1, $f4, $0e, $30, $41, $38, $35, $32, $1c, $07, $01, $fe, $f8
1c200     F6 00 05 0B 
1c204     19 22 20 25 
1c208     15 0A F7 E2 
1c20c     D5 CB C0 BF | 	byte	$f6, $00, $05, $0b, $19, $22, $20, $25, $15, $0a, $f7, $e2, $d5, $cb, $c0, $bf
1c210     B9 C4 C9 F0 
1c214     FC 11 37 43 
1c218     37 34 25 15 
1c21c     02 00 FB FA | 	byte	$b9, $c4, $c9, $f0, $fc, $11, $37, $43, $37, $34, $25, $15, $02, $00, $fb, $fa
1c220     F6 06 07 17 
1c224     21 23 2A 1F 
1c228     10 01 EB DE 
1c22c     D0 C9 BE BD | 	byte	$f6, $06, $07, $17, $21, $23, $2a, $1f, $10, $01, $eb, $de, $d0, $c9, $be, $bd
1c230     BB C6 D5 F4 
1c234     03 14 3C 3A 
1c238     37 28 1F 10 
1c23c     FF FD FA F9 | 	byte	$bb, $c6, $d5, $f4, $03, $14, $3c, $3a, $37, $28, $1f, $10, $ff, $fd, $fa, $f9
1c240     FD 05 17 1E 
1c244     25 2D 2B 19 
1c248     0C F5 E6 DA 
1c24c     CF C6 C0 B8 | 	byte	$fd, $05, $17, $1e, $25, $2d, $2b, $19, $0c, $f5, $e6, $da, $cf, $c6, $c0, $b8
1c250     C4 CA DD F8 
1c254     05 20 38 34 
1c258     31 22 1A 08 
1c25c     FE FB FB F5 | 	byte	$c4, $ca, $dd, $f8, $05, $20, $38, $34, $31, $22, $1a, $08, $fe, $fb, $fb, $f5
1c260     04 13 1B 25 
1c264     2D 31 24 15 
1c268     FE F0 E3 D4 
1c26c     CD C6 BE B8 | 	byte	$04, $13, $1b, $25, $2d, $31, $24, $15, $fe, $f0, $e3, $d4, $cd, $c6, $be, $b8
1c270     C8 D9 E0 FA 
1c274     10 25 31 2D 
1c278     2B 20 16 04 
1c27c     FB FC F9 FB | 	byte	$c8, $d9, $e0, $fa, $10, $25, $31, $2d, $2b, $20, $16, $04, $fb, $fc, $f9, $fb
1c280     09 1C 21 2B 
1c284     34 2F 1D 08 
1c288     F8 EB DF D1 
1c28c     CB C6 BB BC | 	byte	$09, $1c, $21, $2b, $34, $2f, $1d, $08, $f8, $eb, $df, $d1, $cb, $c6, $bb, $bc
1c290     D4 DD E5 04 
1c294     12 24 2A 23 
1c298     2A 1E 12 FF 
1c29c     FC FC F6 02 | 	byte	$d4, $dd, $e5, $04, $12, $24, $2a, $23, $2a, $1e, $12, $ff, $fc, $fc, $f6, $02
1c2a0     1B 1D 28 35 
1c2a4     34 28 15 00 
1c2a8     F3 E7 D9 CF 
1c2ac     CD C3 B9 C9 | 	byte	$1b, $1d, $28, $35, $34, $28, $15, $00, $f3, $e7, $d9, $cf, $cd, $c3, $b9, $c9
1c2b0     DD DF F0 05 
1c2b4     14 1F 1E 20 
1c2b8     28 1A 0B FC 
1c2bc     FD F9 F5 13 | 	byte	$dd, $df, $f0, $05, $14, $1f, $1e, $20, $28, $1a, $0b, $fc, $fd, $f9, $f5, $13
1c2c0     1E 20 34 36 
1c2c4     32 1F 08 FA 
1c2c8     EE E2 D5 CF 
1c2cc     CB C2 BC D7 | 	byte	$1e, $20, $34, $36, $32, $1f, $08, $fa, $ee, $e2, $d5, $cf, $cb, $c2, $bc, $d7
1c2d0     DC E7 F7 05 
1c2d4     16 16 16 20 
1c2d8     26 17 06 FD 
1c2dc     FB F7 04 1C | 	byte	$dc, $e7, $f7, $05, $16, $16, $16, $20, $26, $17, $06, $fd, $fb, $f7, $04, $1c
1c2e0     1D 2B 37 36 
1c2e4     2C 11 03 F8 
1c2e8     EB DF D1 D1 
1c2ec     C8 BD D2 DB | 	byte	$1d, $2b, $37, $36, $2c, $11, $03, $f8, $eb, $df, $d1, $d1, $c8, $bd, $d2, $db
1c2f0     DB F4 F7 04 
1c2f4     14 0C 14 21 
1c2f8     24 15 03 FE 
1c2fc     FA F4 18 1F | 	byte	$db, $f4, $f7, $04, $14, $0c, $14, $21, $24, $15, $03, $fe, $fa, $f4, $18, $1f
1c300     22 37 37 34 
1c304     22 09 FD F2 
1c308     E5 DA D0 CF 
1c30c     C6 C4 DD DA | 	byte	$22, $37, $37, $34, $22, $09, $fd, $f2, $e5, $da, $d0, $cf, $c6, $c4, $dd, $da
1c310     E7 F9 F7 04 
1c314     0D 08 12 22 
1c318     21 11 02 FC 
1c31c     F7 04 1E 1E | 	byte	$e7, $f9, $f7, $04, $0d, $08, $12, $22, $21, $11, $02, $fc, $f7, $04, $1e, $1e
1c320     2E 38 37 2E 
1c324     13 04 FA EE 
1c328     E1 D6 D2 CC 
1c32c     C3 D7 DF DA | 	byte	$2e, $38, $37, $2e, $13, $04, $fa, $ee, $e1, $d6, $d2, $cc, $c3, $d7, $df, $da
1c330     EE FA F6 03 
1c334     08 05 14 21 
1c338     1F 0E 00 FA 
1c33c     FB 15 1F 24 | 	byte	$ee, $fa, $f6, $03, $08, $05, $14, $21, $1f, $0e, $00, $fa, $fb, $15, $1f, $24
1c340     34 38 35 23 
1c344     0B 01 F5 EA 
1c348     DE D4 D1 C9 
1c34c     CD E0 DE E0 | 	byte	$34, $38, $35, $23, $0b, $01, $f5, $ea, $de, $d4, $d1, $c9, $cd, $e0, $de, $e0
1c350     F3 FA F2 03 
1c354     06 02 18 1F 
1c358     1C 0E FD F8 
1c35c     08 1D 1F 2B | 	byte	$f3, $fa, $f2, $03, $06, $02, $18, $1f, $1c, $0e, $fd, $f8, $08, $1d, $1f, $2b
1c360     37 37 2F 18 
1c364     07 FD F1 E5 
1c368     DA D4 D0 CD 
1c36c     D7 E2 E1 E5 | 	byte	$37, $37, $2f, $18, $07, $fd, $f1, $e5, $da, $d4, $d0, $cd, $d7, $e2, $e1, $e5
1c370     F5 F7 ED 05 
1c374     04 01 1A 1E 
1c378     1C 07 FA 04 
1c37c     12 1F 27 2F | 	byte	$f5, $f7, $ed, $05, $04, $01, $1a, $1e, $1c, $07, $fa, $04, $12, $1f, $27, $2f
1c380     37 35 25 0F 
1c384     03 F8 ED E1 
1c388     D9 D2 CC D6 
1c38c     DC E1 E5 E7 | 	byte	$37, $35, $25, $0f, $03, $f8, $ed, $e1, $d9, $d2, $cc, $d6, $dc, $e1, $e5, $e7
1c390     F6 F1 EF 06 
1c394     02 04 1A 1C 
1c398     1C 03 FC 0A 
1c39c     18 1F 2A 30 | 	byte	$f6, $f1, $ef, $06, $02, $04, $1a, $1c, $1c, $03, $fc, $0a, $18, $1f, $2a, $30
1c3a0     35 2E 1C 0A 
1c3a4     FF F4 E8 DE 
1c3a8     D8 CF D4 D7 
1c3ac     E1 E3 E5 E9 | 	byte	$35, $2e, $1c, $0a, $ff, $f4, $e8, $de, $d8, $cf, $d4, $d7, $e1, $e3, $e5, $e9
1c3b0     F5 E7 FC 05 
1c3b4     FF 09 1C 1D 
1c3b8     18 FC 09 0B 
1c3bc     1C 25 2A 32 | 	byte	$f5, $e7, $fc, $05, $ff, $09, $1c, $1d, $18, $fc, $09, $0b, $1c, $25, $2a, $32
1c3c0     32 25 16 05 
1c3c4     FB F1 E5 DE 
1c3c8     D6 D1 DD D9 
1c3cc     E3 E8 E4 EC | 	byte	$32, $25, $16, $05, $fb, $f1, $e5, $de, $d6, $d1, $dd, $d9, $e3, $e8, $e4, $ec
1c3d0     F0 E7 04 02 
1c3d4     FE 0F 1B 1F 
1c3d8     10 02 0D 10 
1c3dc     1F 2A 2B 33 | 	byte	$f0, $e7, $04, $02, $fe, $0f, $1b, $1f, $10, $02, $0d, $10, $1f, $2a, $2b, $33
1c3e0     2D 20 10 02 
1c3e4     F7 EC E1 DB 
1c3e8     D2 DB DB DB 
1c3ec     E4 E8 E3 EE | 	byte	$2d, $20, $10, $02, $f7, $ec, $e1, $db, $d2, $db, $db, $db, $e4, $e8, $e3, $ee
1c3f0     E9 F2 07 01 
1c3f4     00 11 1C 1F 
1c3f8     0A 0B 0D 15 
1c3fc     25 2B 2A 30 | 	byte	$e9, $f2, $07, $01, $00, $11, $1c, $1f, $0a, $0b, $0d, $15, $25, $2b, $2a, $30
1c400     25 1B 0B FD 
1c404     F4 E9 E1 DB 
1c408     D6 E0 D9 DF 
1c40c     E8 E6 E3 EB | 	byte	$25, $1b, $0b, $fd, $f4, $e9, $e1, $db, $d6, $e0, $d9, $df, $e8, $e6, $e3, $eb
1c410     E8 FE 06 FF 
1c414     03 15 1F 19 
1c418     0D 0E 0C 1A 
1c41c     29 2B 29 2A | 	byte	$e8, $fe, $06, $ff, $03, $15, $1f, $19, $0d, $0e, $0c, $1a, $29, $2b, $29, $2a
1c420     20 17 05 FA 
1c424     F0 E6 E0 D6 
1c428     DD DF D8 E2 
1c42c     EA E5 E4 E5 | 	byte	$20, $17, $05, $fa, $f0, $e6, $e0, $d6, $dd, $df, $d8, $e2, $ea, $e5, $e4, $e5
1c430     F1 05 04 FF 
1c434     08 17 20 15 
1c438     11 0F 0D 20 
1c43c     2A 2A 27 23 | 	byte	$f1, $05, $04, $ff, $08, $17, $20, $15, $11, $0f, $0d, $20, $2a, $2a, $27, $23
1c440     1C 13 02 F7 
1c444     ED E5 DF DB 
1c448     E0 DE D7 E5 
1c44c     E8 E4 E1 E7 | 	byte	$1c, $13, $02, $f7, $ed, $e5, $df, $db, $e0, $de, $d7, $e5, $e8, $e4, $e1, $e7
1c450     F8 08 02 02 
1c454     0C 1B 1D 18 
1c458     10 10 0F 25 
1c45c     2A 29 22 1F | 	byte	$f8, $08, $02, $02, $0c, $1b, $1d, $18, $10, $10, $0f, $25, $2a, $29, $22, $1f
1c460     1A 0E FE F4 
1c464     E9 E4 DA E1 
1c468     DF DB D7 E7 
1c46c     E6 E4 DB F1 | 	byte	$1a, $0e, $fe, $f4, $e9, $e4, $da, $e1, $df, $db, $d7, $e7, $e6, $e4, $db, $f1
1c470     FD 0A 00 07 
1c474     0E 1F 19 1A 
1c478     0F 0F 12 27 
1c47c     29 26 1B 1C | 	byte	$fd, $0a, $00, $07, $0e, $1f, $19, $1a, $0f, $0f, $12, $27, $29, $26, $1b, $1c
1c480     17 0A FA F0 
1c484     E9 E2 DE E3 
1c488     DE DA D9 E7 
1c48c     E5 E3 DD F9 | 	byte	$17, $0a, $fa, $f0, $e9, $e2, $de, $e3, $de, $da, $d9, $e7, $e5, $e3, $dd, $f9
1c490     01 09 01 0C 
1c494     14 1F 1B 18 
1c498     0E 0F 16 28 
1c49c     28 21 16 19 | 	byte	$01, $09, $01, $0c, $14, $1f, $1b, $18, $0e, $0f, $16, $28, $28, $21, $16, $19
1c4a0     14 06 F8 EE 
1c4a4     E9 E1 E5 E2 
1c4a8     DE D8 DD E7 
1c4ac     E7 DD E8 FA | 	byte	$14, $06, $f8, $ee, $e9, $e1, $e5, $e2, $de, $d8, $dd, $e7, $e7, $dd, $e8, $fa
1c4b0     07 08 05 0F 
1c4b4     17 1A 1D 15 
1c4b8     0E 0E 1B 28 
1c4bc     27 1D 14 17 | 	byte	$07, $08, $05, $0f, $17, $1a, $1d, $15, $0e, $0e, $1b, $28, $27, $1d, $14, $17
1c4c0     12 03 F5 ED 
1c4c4     E8 DF E6 E1 
1c4c8     DC D5 DE E7 
1c4cc     E5 DA F1 F9 | 	byte	$12, $03, $f5, $ed, $e8, $df, $e6, $e1, $dc, $d5, $de, $e7, $e5, $da, $f1, $f9
1c4d0     0B 06 0A 13 
1c4d4     19 19 1F 13 
1c4d8     10 0D 1E 28 
1c4dc     24 17 12 15 | 	byte	$0b, $06, $0a, $13, $19, $19, $1f, $13, $10, $0d, $1e, $28, $24, $17, $12, $15
1c4e0     10 00 F3 ED 
1c4e4     E5 E4 E6 DF 
1c4e8     DC D4 DF E9 
1c4ec     E2 E4 F4 FB | 	byte	$10, $00, $f3, $ed, $e5, $e4, $e6, $df, $dc, $d4, $df, $e9, $e2, $e4, $f4, $fb
1c4f0     0E 08 10 15 
1c4f4     17 1B 1E 10 
1c4f8     10 0E 1F 26 
1c4fc     20 14 0F 12 | 	byte	$0e, $08, $10, $15, $17, $1b, $1e, $10, $10, $0e, $1f, $26, $20, $14, $0f, $12
1c500     0D FD F1 ED 
1c504     E3 E7 E5 DD 
1c508     DA D3 E2 E9 
1c50c     DE F0 F3 01 | 	byte	$0d, $fd, $f1, $ed, $e3, $e7, $e5, $dd, $da, $d3, $e2, $e9, $de, $f0, $f3, $01
1c510     0F 0E 16 16 
1c514     13 1E 1C 0F 
1c518     10 10 1E 24 
1c51c     1B 12 0D 10 | 	byte	$0f, $0e, $16, $16, $13, $1e, $1c, $0f, $10, $10, $1e, $24, $1b, $12, $0d, $10
1c520     0A FB F2 EB 
1c524     E2 E9 E3 DC 
1c528     D8 D4 E3 E6 
1c52c     E5 F6 F2 05 | 	byte	$0a, $fb, $f2, $eb, $e2, $e9, $e3, $dc, $d8, $d4, $e3, $e6, $e5, $f6, $f2, $05
1c530     11 15 1A 14 
1c534     13 21 19 0F 
1c538     10 12 1E 22 
1c53c     16 11 0A 0D | 	byte	$11, $15, $1a, $14, $13, $21, $19, $0f, $10, $12, $1e, $22, $16, $11, $0a, $0d
1c540     07 F8 F1 E9 
1c544     E2 E8 E1 DA 
1c548     D5 D9 E1 E2 
1c54c     F1 F6 F1 0A | 	byte	$07, $f8, $f1, $e9, $e2, $e8, $e1, $da, $d5, $d9, $e1, $e2, $f1, $f6, $f1, $0a
1c550     16 1B 1A 10 
1c554     17 21 15 0E 
1c558     0F 14 1A 1E 
1c55c     13 0F 08 0A | 	byte	$16, $1b, $1a, $10, $17, $21, $15, $0e, $0f, $14, $1a, $1e, $13, $0f, $08, $0a
1c560     04 F7 F0 E7 
1c564     E4 E7 DF D8 
1c568     D6 DD DB E9 
1c56c     F8 F6 F2 0E | 	byte	$04, $f7, $f0, $e7, $e4, $e7, $df, $d8, $d6, $dd, $db, $e9, $f8, $f6, $f2, $0e
1c570     20 1E 16 0F 
1c574     1B 20 12 0F 
1c578     0F 15 16 18 
1c57c     11 0C 06 07 | 	byte	$20, $1e, $16, $0f, $1b, $20, $12, $0f, $0f, $15, $16, $18, $11, $0c, $06, $07
1c580     02 F7 ED E4 
1c584     E5 E5 DE D8 
1c588     DB DD D8 F4 
1c58c     FA F5 F8 16 | 	byte	$02, $f7, $ed, $e4, $e5, $e5, $de, $d8, $db, $dd, $d8, $f4, $fa, $f5, $f8, $16
1c590     24 1F 0E 12 
1c594     1F 1C 11 0F 
1c598     10 16 13 15 
1c59c     10 0A 04 04 | 	byte	$24, $1f, $0e, $12, $1f, $1c, $11, $0f, $10, $16, $13, $15, $10, $0a, $04, $04
1c5a0     01 F7 EB E2 
1c5a4     E4 E2 DA DB 
1c5a8     DB DA E1 F9 
1c5ac     F8 F3 02 1D | 	byte	$01, $f7, $eb, $e2, $e4, $e2, $da, $db, $db, $da, $e1, $f9, $f8, $f3, $02, $1d
1c5b0     27 1B 0D 16 
1c5b4     20 17 10 0F 
1c5b8     12 15 0F 10 
1c5bc     0E 08 02 00 | 	byte	$27, $1b, $0d, $16, $20, $17, $10, $0f, $12, $15, $0f, $10, $0e, $08, $02, $00
1c5c0     00 F6 E9 E0 
1c5c4     E4 E0 DD DC 
1c5c8     DB DB EC F8 
1c5cc     F8 F4 12 22 | 	byte	$00, $f6, $e9, $e0, $e4, $e0, $dd, $dc, $db, $db, $ec, $f8, $f8, $f4, $12, $22
1c5d0     26 13 13 18 
1c5d4     1E 14 10 0F 
1c5d8     13 14 0C 0B 
1c5dc     0C 06 00 FC | 	byte	$26, $13, $13, $18, $1e, $14, $10, $0f, $13, $14, $0c, $0b, $0c, $06, $00, $fc
1c5e0     FF F5 E7 DE 
1c5e4     E2 E1 E0 DA 
1c5e8     DA E5 F4 F3 
1c5ec     F7 FF 1D 22 | 	byte	$ff, $f5, $e7, $de, $e2, $e1, $e0, $da, $da, $e5, $f4, $f3, $f7, $ff, $1d, $22
1c5f0     21 14 1A 19 
1c5f4     19 13 10 0E 
1c5f8     14 13 0A 05 
1c5fc     09 04 FE F9 | 	byte	$21, $14, $1a, $19, $19, $13, $10, $0e, $14, $13, $0a, $05, $09, $04, $fe, $f9
1c600     FD F3 E6 DC 
1c604     E2 E4 DE D8 
1c608     DC F5 F4 F0 
1c60c     F5 11 21 1D | 	byte	$fd, $f3, $e6, $dc, $e2, $e4, $de, $d8, $dc, $f5, $f4, $f0, $f5, $11, $21, $1d
1c610     19 1B 1D 17 
1c614     15 13 10 0E 
1c618     15 12 07 FF 
1c61c     06 02 FB F7 | 	byte	$19, $1b, $1d, $17, $15, $13, $10, $0e, $15, $12, $07, $ff, $06, $02, $fb, $f7
1c620     FB F1 E2 DA 
1c624     E6 E3 DB D5 
1c628     EB FC F2 EB 
1c62c     00 1B 1F 14 | 	byte	$fb, $f1, $e2, $da, $e6, $e3, $db, $d5, $eb, $fc, $f2, $eb, $00, $1b, $1f, $14
1c630     19 23 1D 11 
1c634     13 12 0F 0E 
1c638     15 10 02 FB 
1c63c     02 FE F8 F6 | 	byte	$19, $23, $1d, $11, $13, $12, $0f, $0e, $15, $10, $02, $fb, $02, $fe, $f8, $f6
1c640     F8 EE E0 DD 
1c644     E6 E0 D9 DB 
1c648     FA FC F0 F0 
1c64c     08 20 15 11 | 	byte	$f8, $ee, $e0, $dd, $e6, $e0, $d9, $db, $fa, $fc, $f0, $f0, $08, $20, $15, $11
1c650     20 26 1C 0D 
1c654     14 12 0E 10 
1c658     13 0D 00 F8 
1c65c     FD FA F5 F3 | 	byte	$20, $26, $1c, $0d, $14, $12, $0e, $10, $13, $0d, $00, $f8, $fd, $fa, $f5, $f3
1c660     F5 EB E1 E0 
1c664     E5 DE D6 EF 
1c668     00 FA F1 F9 
1c66c     14 1B 0F 13 | 	byte	$f5, $eb, $e1, $e0, $e5, $de, $d6, $ef, $00, $fa, $f1, $f9, $14, $1b, $0f, $13
1c670     26 25 15 0D 
1c674     14 11 0C 13 
1c678     12 09 FE F6 
1c67c     F8 F8 F4 F2 | 	byte	$26, $25, $15, $0d, $14, $11, $0c, $13, $12, $09, $fe, $f6, $f8, $f8, $f4, $f2
1c680     F1 EB E3 E0 
1c684     E2 DB DC FC 
1c688     FF F7 FC FE 
1c68c     15 11 0F 1B | 	byte	$f1, $eb, $e3, $e0, $e2, $db, $dc, $fc, $ff, $f7, $fc, $fe, $15, $11, $0f, $1b
1c690     29 24 0F 0D 
1c694     13 10 0D 13 
1c698     10 05 FB F4 
1c69c     F3 F4 F2 EF | 	byte	$29, $24, $0f, $0d, $13, $10, $0d, $13, $10, $05, $fb, $f4, $f3, $f4, $f2, $ef
1c6a0     F0 EE E0 DF 
1c6a4     E0 D8 EF 01 
1c6a8     FE FF 01 05 
1c6ac     0C 0D 14 22 | 	byte	$f0, $ee, $e0, $df, $e0, $d8, $ef, $01, $fe, $ff, $01, $05, $0c, $0d, $14, $22
1c6b0     29 1D 0A 0F 
1c6b4     12 0E 0F 12 
1c6b8     0E 00 F9 F2 
1c6bc     EF F2 EF EC | 	byte	$29, $1d, $0a, $0f, $12, $0e, $0f, $12, $0e, $00, $f9, $f2, $ef, $f2, $ef, $ec
1c6c0     F2 EC DE E0 
1c6c4     DD E3 FD 00 
1c6c8     06 05 01 07 
1c6cc     03 0E 1D 24 | 	byte	$f2, $ec, $de, $e0, $dd, $e3, $fd, $00, $06, $05, $01, $07, $03, $0e, $1d, $24
1c6d0     26 17 09 11 
1c6d4     11 0E 10 11 
1c6d8     0A FD F6 EF 
1c6dc     E9 EF EB EF | 	byte	$26, $17, $09, $11, $11, $0e, $10, $11, $0a, $fd, $f6, $ef, $e9, $ef, $eb, $ef
1c6e0     F2 EA DC DE 
1c6e4     DC F4 FF 07 
1c6e8     0C 05 00 03 
1c6ec     01 17 20 25 | 	byte	$f2, $ea, $dc, $de, $dc, $f4, $ff, $07, $0c, $05, $00, $03, $01, $17, $20, $25
1c6f0     1F 14 0A 11 
1c6f4     10 10 10 0F 
1c6f8     04 FB F4 EC 
1c6fc     E5 EC EB F1 | 	byte	$1f, $14, $0a, $11, $10, $10, $10, $0f, $04, $fb, $f4, $ec, $e5, $ec, $eb, $f1
1c700     EF E7 D9 DC 
1c704     E9 FE 03 11 
1c708     0B 01 FE 02 
1c70c     06 1D 20 22 | 	byte	$ef, $e7, $d9, $dc, $e9, $fe, $03, $11, $0b, $01, $fe, $02, $06, $1d, $20, $22
1c710     18 13 0A 11 
1c714     0E 11 0F 0C 
1c718     FF F8 F1 E8 
1c71c     E2 EA ED EF | 	byte	$18, $13, $0a, $11, $0e, $11, $0f, $0c, $ff, $f8, $f1, $e8, $e2, $ea, $ed, $ef
1c720     EB E3 D9 DF 
1c724     FA 03 10 12 
1c728     08 F8 01 02 
1c72c     0E 1E 1F 1B | 	byte	$eb, $e3, $d9, $df, $fa, $03, $10, $12, $08, $f8, $01, $02, $0e, $1e, $1f, $1b
1c730     15 11 0D 0F 
1c734     11 11 0D 06 
1c738     FB F4 ED E5 
1c73c     E0 EC EC ED | 	byte	$15, $11, $0d, $0f, $11, $11, $0d, $06, $fb, $f4, $ed, $e5, $e0, $ec, $ec, $ed
1c740     E8 DE D9 EF 
1c744     02 11 13 0F 
1c748     00 F8 03 0B 
1c74c     12 1F 1C 16 | 	byte	$e8, $de, $d9, $ef, $02, $11, $13, $0f, $00, $f8, $03, $0b, $12, $1f, $1c, $16
1c750     13 0D 0F 10 
1c754     13 10 0A 01 
1c758     F9 F1 EA E2 
1c75c     E1 EB EB EB | 	byte	$13, $0d, $0f, $10, $13, $10, $0a, $01, $f9, $f1, $ea, $e2, $e1, $eb, $eb, $eb
1c760     E5 DA E0 FD 
1c764     0E 14 13 08 
1c768     F4 FD 07 12 
1c76c     13 1D 17 15 | 	byte	$e5, $da, $e0, $fd, $0e, $14, $13, $08, $f4, $fd, $07, $12, $13, $1d, $17, $15
1c770     13 0D 10 13 
1c774     12 0D 06 FC 
1c778     F6 EE E6 E2 
1c77c     E3 E9 EB E8 | 	byte	$13, $0d, $10, $13, $12, $0d, $06, $fc, $f6, $ee, $e6, $e2, $e3, $e9, $eb, $e8
1c780     E2 DA F0 0D 
1c784     15 15 10 FD 
1c788     F3 02 0F 13 
1c78c     14 18 14 13 | 	byte	$e2, $da, $f0, $0d, $15, $15, $10, $fd, $f3, $02, $0f, $13, $14, $18, $14, $13
1c790     10 0F 12 13 
1c794     10 0B 00 F9 
1c798     F2 EA E2 E4 
1c79c     E2 E7 E9 E5 | 	byte	$10, $0f, $12, $13, $10, $0b, $00, $f9, $f2, $ea, $e2, $e4, $e2, $e7, $e9, $e5
1c7a0     DD E4 05 16 
1c7a4     17 14 04 F4 
1c7a8     F8 0B 12 15 
1c7ac     14 13 13 12 | 	byte	$dd, $e4, $05, $16, $17, $14, $04, $f4, $f8, $0b, $12, $15, $14, $13, $13, $12
1c7b0     0F 12 14 12 
1c7b4     0E 06 FB F6 
1c7b8     EE E6 E3 E4 
1c7bc     DF E6 E7 E2 | 	byte	$0f, $12, $14, $12, $0e, $06, $fb, $f6, $ee, $e6, $e3, $e4, $df, $e6, $e7, $e2
1c7c0     DD F9 15 17 
1c7c4     17 0C F9 F1 
1c7c8     FF 10 13 14 
1c7cc     11 11 12 10 | 	byte	$dd, $f9, $15, $17, $17, $0c, $f9, $f1, $ff, $10, $13, $14, $11, $11, $12, $10
1c7d0     11 16 14 11 
1c7d4     0C 00 F9 F3 
1c7d8     EB E3 E5 E2 
1c7dc     DE E7 E4 DD | 	byte	$11, $16, $14, $11, $0c, $00, $f9, $f3, $eb, $e3, $e5, $e2, $de, $e7, $e4, $dd
1c7e0     ED 0E 18 19 
1c7e4     15 FF F5 F2 
1c7e8     09 12 14 12 
1c7ec     0D 11 11 0E | 	byte	$ed, $0e, $18, $19, $15, $ff, $f5, $f2, $09, $12, $14, $12, $0d, $11, $11, $0e
1c7f0     17 15 12 0E 
1c7f4     07 FA F5 EF 
1c7f8     E7 E3 E4 DE 
1c7fc     DE E6 E1 DE | 	byte	$17, $15, $12, $0e, $07, $fa, $f5, $ef, $e7, $e3, $e4, $de, $de, $e6, $e1, $de
1c800     09 16 19 19 
1c804     0C F6 F2 F9 
1c808     10 13 13 10 
1c80c     0B 11 10 12 | 	byte	$09, $16, $19, $19, $0c, $f6, $f2, $f9, $10, $13, $13, $10, $0b, $11, $10, $12
1c810     1B 15 11 0C 
1c814     00 F7 F3 EB 
1c818     E3 E5 E1 DB 
1c81c     E2 E3 DC F5 | 	byte	$1b, $15, $11, $0c, $00, $f7, $f3, $eb, $e3, $e5, $e1, $db, $e2, $e3, $dc, $f5
1c820     16 19 1B 17 
1c824     FF F4 EF 05 
1c828     11 14 13 0B 
1c82c     0D 0F 0D 1A | 	byte	$16, $19, $1b, $17, $ff, $f4, $ef, $05, $11, $14, $13, $0b, $0d, $0f, $0d, $1a
1c830     19 12 0F 08 
1c834     FB F4 EF E8 
1c838     E3 E5 E0 D9 
1c83c     E3 E1 E1 11 | 	byte	$19, $12, $0f, $08, $fb, $f4, $ef, $e8, $e3, $e5, $e0, $d9, $e3, $e1, $e1, $11
1c840     18 1A 1A 09 
1c844     F8 F2 F0 0C 
1c848     12 13 11 06 
1c84c     0E 0E 14 1E | 	byte	$18, $1a, $1a, $09, $f8, $f2, $f0, $0c, $12, $13, $11, $06, $0e, $0e, $14, $1e
1c850     16 11 0C 00 
1c854     F8 F1 EC E4 
1c858     E5 E3 DC D9 
1c85c     E2 DC FF 1A | 	byte	$16, $11, $0c, $00, $f8, $f1, $ec, $e4, $e5, $e3, $dc, $d9, $e2, $dc, $ff, $1a
1c860     18 1C 16 FD 
1c864     F5 F0 FC 10 
1c868     13 13 0F 07 
1c86c     0F 0E 1C 1C | 	byte	$18, $1c, $16, $fd, $f5, $f0, $fc, $10, $13, $13, $0f, $07, $0f, $0e, $1c, $1c
1c870     13 0F 06 FC 
1c874     F4 EE E9 E3 
1c878     E5 E0 D9 DD 
1c87c     E0 E7 15 1B | 	byte	$13, $0f, $06, $fc, $f4, $ee, $e9, $e3, $e5, $e0, $d9, $dd, $e0, $e7, $15, $1b
1c880     1A 1B 08 F9 
1c884     F2 ED 04 11 
1c888     13 12 0A 0A 
1c88c     0D 18 1E 1B | 	byte	$1a, $1b, $08, $f9, $f2, $ed, $04, $11, $13, $12, $0a, $0a, $0d, $18, $1e, $1b
1c890     12 0C 01 F8 
1c894     F1 EB E5 E4 
1c898     E4 DE D8 E1 
1c89c     DE 06 1C 1A | 	byte	$12, $0c, $01, $f8, $f1, $eb, $e5, $e4, $e4, $de, $d8, $e1, $de, $06, $1c, $1a
1c8a0     1B 16 FF F7 
1c8a4     F0 F0 09 11 
1c8a8     12 10 06 0C 
1c8ac     13 1E 1D 17 | 	byte	$1b, $16, $ff, $f7, $f0, $f0, $09, $11, $12, $10, $06, $0c, $13, $1e, $1d, $17
1c8b0     10 06 FD F6 
1c8b4     EE E9 E3 E5 
1c8b8     E2 DC D8 DF 
1c8bc     EF 17 1E 19 | 	byte	$10, $06, $fd, $f6, $ee, $e9, $e3, $e5, $e2, $dc, $d8, $df, $ef, $17, $1e, $19
1c8c0     1A 08 F9 F3 
1c8c4     ED F5 0F 11 
1c8c8     10 0E 07 0E 
1c8cc     1B 1E 1C 13 | 	byte	$1a, $08, $f9, $f3, $ed, $f5, $0f, $11, $10, $0e, $07, $0e, $1b, $1e, $1c, $13
1c8d0     0B 00 F9 F1 
1c8d4     EB E5 E3 E4 
1c8d8     DE D7 DC E4 
1c8dc     09 1D 1D 18 | 	byte	$0b, $00, $f9, $f1, $eb, $e5, $e3, $e4, $de, $d7, $dc, $e4, $09, $1d, $1d, $18
1c8e0     15 FF F6 F1 
1c8e4     EB FC 10 10 
1c8e8     0F 0A 0A 19 
1c8ec     1E 1E 19 10 | 	byte	$15, $ff, $f6, $f1, $eb, $fc, $10, $10, $0f, $0a, $0a, $19, $1e, $1e, $19, $10
1c8f0     05 FD F6 EF 
1c8f4     E8 E4 E2 E1 
1c8f8     DC D7 E1 F7 
1c8fc     18 1E 1C 15 | 	byte	$05, $fd, $f6, $ef, $e8, $e4, $e2, $e1, $dc, $d7, $e1, $f7, $18, $1e, $1c, $15
1c900     09 FA F5 EF 
1c904     EB 07 0F 0F 
1c908     0F 0B 14 1D 
1c90c     1D 1C 14 09 | 	byte	$09, $fa, $f5, $ef, $eb, $07, $0f, $0f, $0f, $0b, $14, $1d, $1d, $1c, $14, $09
1c910     FF F9 F3 EB 
1c914     E5 E3 E2 DF 
1c918     D9 DB ED 07 
1c91c     1E 1F 19 0F | 	byte	$ff, $f9, $f3, $eb, $e5, $e3, $e2, $df, $d9, $db, $ed, $07, $1e, $1f, $19, $0f
1c920     00 F7 F2 EB 
1c924     EF 0C 0E 0E 
1c928     0C 11 1C 1D 
1c92c     1D 1A 0F 03 | 	byte	$00, $f7, $f2, $eb, $ef, $0c, $0e, $0e, $0c, $11, $1c, $1d, $1d, $1a, $0f, $03
1c930     FD F6 EF E7 
1c934     E5 E2 E2 DD 
1c938     D6 EB F6 19 
1c93c     20 1E 13 07 | 	byte	$fd, $f6, $ef, $e7, $e5, $e2, $e2, $dd, $d6, $eb, $f6, $19, $20, $1e, $13, $07
1c940     FB F4 EF E9 
1c944     FA 0D 0E 0E 
1c948     0F 1E 1D 1D 
1c94c     1C 16 07 FF | 	byte	$fb, $f4, $ef, $e9, $fa, $0d, $0e, $0e, $0f, $1e, $1d, $1d, $1c, $16, $07, $ff
1c950     F9 F2 EB E5 
1c954     E3 E1 DF DA 
1c958     E4 F1 0B 1E 
1c95c     20 19 0D 00 | 	byte	$f9, $f2, $eb, $e5, $e3, $e1, $df, $da, $e4, $f1, $0b, $1e, $20, $19, $0d, $00
1c960     F7 F2 EC E9 
1c964     02 0D 0C 0B 
1c968     21 1F 1D 1D 
1c96c     1A 0D 03 FC | 	byte	$f7, $f2, $ec, $e9, $02, $0d, $0c, $0b, $21, $1f, $1d, $1d, $1a, $0d, $03, $fc
1c970     F6 EE E7 E5 
1c974     E0 E1 DD D9 
1c978     F0 F8 18 20 
1c97c     1E 11 06 FA | 	byte	$f6, $ee, $e7, $e5, $e0, $e1, $dd, $d9, $f0, $f8, $18, $20, $1e, $11, $06, $fa
1c980     F5 F0 EB EC 
1c984     06 0B 0B 17 
1c988     27 1E 1D 1C 
1c98c     14 05 00 F9 | 	byte	$f5, $f0, $eb, $ec, $06, $0b, $0b, $17, $27, $1e, $1d, $1c, $14, $05, $00, $f9
1c990     F3 EB E7 E4 
1c994     E0 E0 DC ED 
1c998     F2 08 1E 20 
1c99c     17 0E FD F6 | 	byte	$f3, $eb, $e7, $e4, $e0, $e0, $dc, $ed, $f2, $08, $1e, $20, $17, $0e, $fd, $f6
1c9a0     F2 ED EB EF 
1c9a4     08 0A 10 26 
1c9a8     25 1D 1C 18 
1c9ac     0B 02 FB F5 | 	byte	$f2, $ed, $eb, $ef, $08, $0a, $10, $26, $25, $1d, $1c, $18, $0b, $02, $fb, $f5
1c9b0     EE E9 E6 E1 
1c9b4     DF DD E6 F3 
1c9b8     F6 15 20 1C 
1c9bc     11 09 F6 F4 | 	byte	$ee, $e9, $e6, $e1, $df, $dd, $e6, $f3, $f6, $15, $20, $1c, $11, $09, $f6, $f4
1c9c0     EF ED EA F6 
1c9c4     09 0D 1D 2A 
1c9c8     23 1D 1A 10 
1c9cc     04 FE F9 F2 | 	byte	$ef, $ed, $ea, $f6, $09, $0d, $1d, $2a, $23, $1d, $1a, $10, $04, $fe, $f9, $f2
1c9d0     EC E8 E5 E0 
1c9d4     DF E6 F0 F3 
1c9d8     03 1D 1D 14 
1c9dc     0E 02 F2 F1 | 	byte	$ec, $e8, $e5, $e0, $df, $e6, $f0, $f3, $03, $1d, $1d, $14, $0e, $02, $f2, $f1
1c9e0     EF ED EA FA 
1c9e4     0A 17 27 2B 
1c9e8     20 1B 14 09 
1c9ec     01 FB F4 EE | 	byte	$ef, $ed, $ea, $fa, $0a, $17, $27, $2b, $20, $1b, $14, $09, $01, $fb, $f4, $ee
1c9f0     EA E8 E2 DE 
1c9f4     E6 ED F6 F6 
1c9f8     11 1E 18 11 
1c9fc     0B FB F0 F1 | 	byte	$ea, $e8, $e2, $de, $e6, $ed, $f6, $f6, $11, $1e, $18, $11, $0b, $fb, $f0, $f1
1ca00     EF EC E8 FB 
1ca04     13 1E 2A 2A 
1ca08     1F 17 0E 04 
1ca0c     FE F8 F2 EF | 	byte	$ef, $ec, $e8, $fb, $13, $1e, $2a, $2a, $1f, $17, $0e, $04, $fe, $f8, $f2, $ef
1ca10     EA E5 E0 E5 
1ca14     ED F5 F7 FC 
1ca18     17 19 14 0E 
1ca1c     07 F3 EF F0 | 	byte	$ea, $e5, $e0, $e5, $ed, $f5, $f7, $fc, $17, $19, $14, $0e, $07, $f3, $ef, $f0
1ca20     EF EC EA 07 
1ca24     1A 25 2B 29 
1ca28     1B 10 08 01 
1ca2c     FB F5 F1 EC | 	byte	$ef, $ec, $ea, $07, $1a, $25, $2b, $29, $1b, $10, $08, $01, $fb, $f5, $f1, $ec
1ca30     E8 E3 E2 ED 
1ca34     F3 F8 F7 06 
1ca38     17 16 10 0C 
1ca3c     00 F0 F0 EF | 	byte	$e8, $e3, $e2, $ed, $f3, $f8, $f7, $06, $17, $16, $10, $0c, $00, $f0, $f0, $ef
1ca40     EE EA F4 0B 
1ca44     1F 28 2B 26 
1ca48     14 0D 03 FE 
1ca4c     F8 F4 F0 EB | 	byte	$ee, $ea, $f4, $0b, $1f, $28, $2b, $26, $14, $0d, $03, $fe, $f8, $f4, $f0, $eb
1ca50     E8 E5 EB F1 
1ca54     F8 FA F8 08 
1ca58     15 12 0E 0A 
1ca5c     F9 F0 EF F0 | 	byte	$e8, $e5, $eb, $f1, $f8, $fa, $f8, $08, $15, $12, $0e, $0a, $f9, $f0, $ef, $f0
1ca60     ED F0 F8 11 
1ca64     23 29 29 20 
1ca68     10 07 01 FB 
1ca6c     F7 F3 EF EC | 	byte	$ed, $f0, $f8, $11, $23, $29, $29, $20, $10, $07, $01, $fb, $f7, $f3, $ef, $ec
1ca70     E8 EA EF F7 
1ca74     FB F9 FA 0A 
1ca78     14 0F 0C 07 
1ca7c     F6 EF EE EF | 	byte	$e8, $ea, $ef, $f7, $fb, $f9, $fa, $0a, $14, $0f, $0c, $07, $f6, $ef, $ee, $ef
1ca80     F1 F5 FB 14 
1ca84     26 28 24 1B 
1ca88     0C 03 FE F9 
1ca8c     F6 F1 ED E9 | 	byte	$f1, $f5, $fb, $14, $26, $28, $24, $1b, $0c, $03, $fe, $f9, $f6, $f1, $ed, $e9
1ca90     EC EE F3 FA 
1ca94     FC F7 FC 0C 
1ca98     10 0D 0B 04 
1ca9c     F4 ED EF F3 | 	byte	$ec, $ee, $f3, $fa, $fc, $f7, $fc, $0c, $10, $0d, $0b, $04, $f4, $ed, $ef, $f3
1caa0     F6 F7 02 18 
1caa4     25 24 21 19 
1caa8     06 01 FC F9 
1caac     F5 F0 ED EF | 	byte	$f6, $f7, $02, $18, $25, $24, $21, $19, $06, $01, $fc, $f9, $f5, $f0, $ed, $ef
1cab0     F0 EF F9 FD 
1cab4     FB F2 FE 0B 
1cab8     0D 0C 0A 01 
1cabc     F2 EE F0 F7 | 	byte	$f0, $ef, $f9, $fd, $fb, $f2, $fe, $0b, $0d, $0c, $0a, $01, $f2, $ee, $f0, $f7
1cac0     FA F9 06 1A 
1cac4     23 20 20 14 
1cac8     04 FF FC F8 
1cacc     F3 EF F0 F1 | 	byte	$fa, $f9, $06, $1a, $23, $20, $20, $14, $04, $ff, $fc, $f8, $f3, $ef, $f0, $f1
1cad0     F3 F4 FC FE 
1cad4     F7 F1 01 09 
1cad8     0D 0C 0B FC 
1cadc     F1 EE F6 FB | 	byte	$f3, $f4, $fc, $fe, $f7, $f1, $01, $09, $0d, $0c, $0b, $fc, $f1, $ee, $f6, $fb
1cae0     FA FC 06 16 
1cae4     1D 1E 1D 10 
1cae8     01 FE FB F7 
1caec     F3 F1 F4 F5 | 	byte	$fa, $fc, $06, $16, $1d, $1e, $1d, $10, $01, $fe, $fb, $f7, $f3, $f1, $f4, $f5
1caf0     F2 F9 FE FC 
1caf4     F4 F2 01 08 
1caf8     0C 0D 0A F9 
1cafc     F1 F3 F9 FE | 	byte	$f2, $f9, $fe, $fc, $f4, $f2, $01, $08, $0c, $0d, $0a, $f9, $f1, $f3, $f9, $fe
1cb00     FB 00 05 11 
1cb04     1B 1D 19 0E 
1cb08     01 FE FA F6 
1cb0c     F2 F6 F7 F6 | 	byte	$fb, $00, $05, $11, $1b, $1d, $19, $0e, $01, $fe, $fa, $f6, $f2, $f6, $f7, $f6
1cb10     F3 FC FE F8 
1cb14     F3 F3 FF 08 
1cb18     0D 0D 08 F6 
1cb1c     F2 F6 FD FE | 	byte	$f3, $fc, $fe, $f8, $f3, $f3, $ff, $08, $0d, $0d, $08, $f6, $f2, $f6, $fd, $fe
1cb20     FE 01 02 0E 
1cb24     18 1B 16 0D 
1cb28     01 FD F9 F5 
1cb2c     F7 F8 F9 F6 | 	byte	$fe, $01, $02, $0e, $18, $1b, $16, $0d, $01, $fd, $f9, $f5, $f7, $f8, $f9, $f6
1cb30     F7 FD FB F7 
1cb34     F2 F3 FD 0A 
1cb38     0D 0D 05 F6 
1cb3c     F8 FA FF FE | 	byte	$f7, $fd, $fb, $f7, $f2, $f3, $fd, $0a, $0d, $0d, $05, $f6, $f8, $fa, $ff, $fe
1cb40     01 02 FE 0C 
1cb44     16 18 13 0F 
1cb48     01 FC F8 F6 
1cb4c     FA FB F9 F6 | 	byte	$01, $02, $fe, $0c, $16, $18, $13, $0f, $01, $fc, $f8, $f6, $fa, $fb, $f9, $f6
1cb50     FA FD FA F6 
1cb54     F2 F1 FE 0B 
1cb58     0D 0C 04 F9 
1cb5c     FA FD FF FE | 	byte	$fa, $fd, $fa, $f6, $f2, $f1, $fe, $0b, $0d, $0c, $04, $f9, $fa, $fd, $ff, $fe
1cb60     02 00 FD 08 
1cb64     12 14 12 0E 
1cb68     01 FB F7 FB 
1cb6c     FC FC F9 F6 | 	byte	$02, $00, $fd, $08, $12, $14, $12, $0e, $01, $fb, $f7, $fb, $fc, $fc, $f9, $f6
1cb70     FA FC F9 F5 
1cb74     F0 EE FF 0B 
1cb78     0D 0B 02 FD 
1cb7c     FE FD 00 00 | 	byte	$fa, $fc, $f9, $f5, $f0, $ee, $ff, $0b, $0d, $0b, $02, $fd, $fe, $fd, $00, $00
1cb80     01 FF FC 04 
1cb84     0F 12 12 0D 
1cb88     00 FA F9 FD 
1cb8c     FF FD F9 F7 | 	byte	$01, $ff, $fc, $04, $0f, $12, $12, $0d, $00, $fa, $f9, $fd, $ff, $fd, $f9, $f7
1cb90     F9 FC F9 F5 
1cb94     EE EF 00 0B 
1cb98     0C 0B 06 FF 
1cb9c     00 FE 00 01 | 	byte	$f9, $fc, $f9, $f5, $ee, $ef, $00, $0b, $0c, $0b, $06, $ff, $00, $fe, $00, $01
1cba0     00 00 FD 02 
1cba4     0C 11 11 0E 
1cba8     01 F9 FD 00 
1cbac     FF FC F8 F6 | 	byte	$00, $00, $fd, $02, $0c, $11, $11, $0e, $01, $f9, $fd, $00, $ff, $fc, $f8, $f6
1cbb0     FB FC F9 F4 
1cbb4     ED EF 01 0C 
1cbb8     0D 0C 07 02 
1cbbc     00 FE FF FE | 	byte	$fb, $fc, $f9, $f4, $ed, $ef, $01, $0c, $0d, $0c, $07, $02, $00, $fe, $ff, $fe
1cbc0     00 FF FB FB 
1cbc4     08 10 0F 0D 
1cbc8     00 FB 00 02 
1cbcc     FF FC F7 F5 | 	byte	$00, $ff, $fb, $fb, $08, $10, $0f, $0d, $00, $fb, $00, $02, $ff, $fc, $f7, $f5
1cbd0     FD FB F8 F4 
1cbd4     EC EE 03 0C 
1cbd8     0D 10 09 03 
1cbdc     01 FE FE FE | 	byte	$fd, $fb, $f8, $f4, $ec, $ee, $03, $0c, $0d, $10, $09, $03, $01, $fe, $fe, $fe
1cbe0     01 FF FC FB 
1cbe4     06 0F 0F 0D 
1cbe8     00 FF 03 01 
1cbec     FF FB F3 F7 | 	byte	$01, $ff, $fc, $fb, $06, $0f, $0f, $0d, $00, $ff, $03, $01, $ff, $fb, $f3, $f7
1cbf0     FD FB F7 F4 
1cbf4     EA EE 06 0D 
1cbf8     0D 13 0A 03 
1cbfc     01 FE FB 00 | 	byte	$fd, $fb, $f7, $f4, $ea, $ee, $06, $0d, $0d, $13, $0a, $03, $01, $fe, $fb, $00
1cc00     01 FF FD F8 
1cc04     02 0E 0E 0D 
1cc08     02 03 04 01 
1cc0c     FF F9 F1 F9 | 	byte	$01, $ff, $fd, $f8, $02, $0e, $0e, $0d, $02, $03, $04, $01, $ff, $f9, $f1, $f9
1cc10     FD FA F8 F1 
1cc14     EA F1 09 0D 
1cc18     10 16 08 03 
1cc1c     01 FB FA 01 | 	byte	$fd, $fa, $f8, $f1, $ea, $f1, $09, $0d, $10, $16, $08, $03, $01, $fb, $fa, $01
1cc20     01 FE FC F5 
1cc24     01 0E 0D 0B 
1cc28     06 05 03 01 
1cc2c     FD F6 F1 FC | 	byte	$01, $fe, $fc, $f5, $01, $0e, $0d, $0b, $06, $05, $03, $01, $fd, $f6, $f1, $fc
1cc30     FD FA F8 F0 
1cc34     E9 F5 0C 0D 
1cc38     16 15 07 04 
1cc3c     00 F9 FB 01 | 	byte	$fd, $fa, $f8, $f0, $e9, $f5, $0c, $0d, $16, $15, $07, $04, $00, $f9, $fb, $01
1cc40     00 FF FC F4 
1cc44     FE 0D 0C 0A 
1cc48     0A 05 03 00 
1cc4c     FA F3 F2 FD | 	byte	$00, $ff, $fc, $f4, $fe, $0d, $0c, $0a, $0a, $05, $03, $00, $fa, $f3, $f2, $fd
1cc50     FB FA F7 EE 
1cc54     E8 F9 0D 0F 
1cc58     19 11 06 03 
1cc5c     FD F9 FB 01 | 	byte	$fb, $fa, $f7, $ee, $e8, $f9, $0d, $0f, $19, $11, $06, $03, $fd, $f9, $fb, $01
1cc60     00 FF FB F2 
1cc64     FD 0B 0B 0D 
1cc68     0C 05 02 FF 
1cc6c     F8 F3 F5 FD | 	byte	$00, $ff, $fb, $f2, $fd, $0b, $0b, $0d, $0c, $05, $02, $ff, $f8, $f3, $f5, $fd
1cc70     FC FA F5 ED 
1cc74     E8 01 0D 15 
1cc78     1B 0E 05 02 
1cc7c     FB FA FD 02 | 	byte	$fc, $fa, $f5, $ed, $e8, $01, $0d, $15, $1b, $0e, $05, $02, $fb, $fa, $fd, $02
1cc80     02 00 FB F2 
1cc84     FA 0B 0A 12 
1cc88     0B 04 02 FB 
1cc8c     F5 F1 F7 FD | 	byte	$02, $00, $fb, $f2, $fa, $0b, $0a, $12, $0b, $04, $02, $fb, $f5, $f1, $f7, $fd
1cc90     FD FA F3 EC 
1cc94     EB 08 0F 1A 
1cc98     19 0B 05 FE 
1cc9c     FA F9 FD 01 | 	byte	$fd, $fa, $f3, $ec, $eb, $08, $0f, $1a, $19, $0b, $05, $fe, $fa, $f9, $fd, $01
1cca0     01 FE F8 F1 
1cca4     FA 0A 0D 14 
1cca8     0B 04 00 F9 
1ccac     F5 F2 F9 FD | 	byte	$01, $fe, $f8, $f1, $fa, $0a, $0d, $14, $0b, $04, $00, $f9, $f5, $f2, $f9, $fd
1ccb0     FC F9 F2 EC 
1ccb4     F2 09 14 1C 
1ccb8     17 08 03 FD 
1ccbc     FA FA FF 02 | 	byte	$fc, $f9, $f2, $ec, $f2, $09, $14, $1c, $17, $08, $03, $fd, $fa, $fa, $ff, $02
1ccc0     01 FE F7 F1 
1ccc4     FA 0A 10 14 
1ccc8     09 03 FD F7 
1cccc     F3 F4 FA FD | 	byte	$01, $fe, $f7, $f1, $fa, $0a, $10, $14, $09, $03, $fd, $f7, $f3, $f4, $fa, $fd
1ccd0     FB F8 EF EB 
1ccd4     F9 0F 18 1D 
1ccd8     13 07 00 FC 
1ccdc     F9 FA FF 02 | 	byte	$fb, $f8, $ef, $eb, $f9, $0f, $18, $1d, $13, $07, $00, $fc, $f9, $fa, $ff, $02
1cce0     00 FC F6 F2 
1cce4     FC 0B 13 13 
1cce8     08 01 FA F6 
1ccec     F2 F6 FB FC | 	byte	$00, $fc, $f6, $f2, $fc, $0b, $13, $13, $08, $01, $fa, $f6, $f2, $f6, $fb, $fc
1ccf0     FA F5 EE F0 
1ccf4     FF 12 1A 1B 
1ccf8     0D 04 FF FC 
1ccfc     F8 FB 01 02 | 	byte	$fa, $f5, $ee, $f0, $ff, $12, $1a, $1b, $0d, $04, $ff, $fc, $f8, $fb, $01, $02
1cd00     FF FB F4 F4 
1cd04     FD 0E 13 13 
1cd08     07 FE F9 F5 
1cd0c     F3 F8 FC FC | 	byte	$ff, $fb, $f4, $f4, $fd, $0e, $13, $13, $07, $fe, $f9, $f5, $f3, $f8, $fc, $fc
1cd10     FA F5 EE F5 
1cd14     09 16 1C 18 
1cd18     09 02 FE FB 
1cd1c     F8 FD 01 01 | 	byte	$fa, $f5, $ee, $f5, $09, $16, $1c, $18, $09, $02, $fe, $fb, $f8, $fd, $01, $01
1cd20     FE F9 F2 F7 
1cd24     FE 10 13 10 
1cd28     03 FA F7 F3 
1cd2c     F5 F8 FB FA | 	byte	$fe, $f9, $f2, $f7, $fe, $10, $13, $10, $03, $fa, $f7, $f3, $f5, $f8, $fb, $fa
1cd30     F7 F1 F4 FB 
1cd34     0F 1A 1C 12 
1cd38     05 00 FD FA 
1cd3c     F9 FE 01 00 | 	byte	$f7, $f1, $f4, $fb, $0f, $1a, $1c, $12, $05, $00, $fd, $fa, $f9, $fe, $01, $00
1cd40     FE F7 F3 FB 
1cd44     01 10 13 0D 
1cd48     FF F9 F6 F3 
1cd4c     F8 F8 FB FA | 	byte	$fe, $f7, $f3, $fb, $01, $10, $13, $0d, $ff, $f9, $f6, $f3, $f8, $f8, $fb, $fa
1cd50     F7 F2 F8 01 
1cd54     13 1B 1A 0B 
1cd58     02 FF FC F9 
1cd5c     FB FD 00 00 | 	byte	$f7, $f2, $f8, $01, $13, $1b, $1a, $0b, $02, $ff, $fc, $f9, $fb, $fd, $00, $00
1cd60     FC F6 F8 FC 
1cd64     03 11 12 0A 
1cd68     FB F7 F3 F3 
1cd6c     F8 F7 FA F9 | 	byte	$fc, $f6, $f8, $fc, $03, $11, $12, $0a, $fb, $f7, $f3, $f3, $f8, $f7, $fa, $f9
1cd70     F5 F7 FC 09 
1cd74     19 1C 15 07 
1cd78     01 FE FB F9 
1cd7c     FC FD 00 FE | 	byte	$f5, $f7, $fc, $09, $19, $1c, $15, $07, $01, $fe, $fb, $f9, $fc, $fd, $00, $fe
1cd80     FA F4 FB FB 
1cd84     07 11 11 05 
1cd88     F9 F6 F3 F6 
1cd8c     F9 F7 F9 F7 | 	byte	$fa, $f4, $fb, $fb, $07, $11, $11, $05, $f9, $f6, $f3, $f6, $f9, $f7, $f9, $f7
1cd90     F7 FE FF 10 
1cd94     1C 1B 0F 03 
1cd98     00 FD FA FA 
1cd9c     FC FD FF FD | 	byte	$f7, $fe, $ff, $10, $1c, $1b, $0f, $03, $00, $fd, $fa, $fa, $fc, $fd, $ff, $fd
1cda0     F9 F7 FD FD 
1cda4     0A 11 0E 00 
1cda8     F8 F5 F2 F8 
1cdac     F8 F7 F8 F7 | 	byte	$f9, $f7, $fd, $fd, $0a, $11, $0e, $00, $f8, $f5, $f2, $f8, $f8, $f7, $f8, $f7
1cdb0     FE FF 04 19 
1cdb4     1D 16 08 02 
1cdb8     FF FC F9 FA 
1cdbc     FB FD FE FB | 	byte	$fe, $ff, $04, $19, $1d, $16, $08, $02, $ff, $fc, $f9, $fa, $fb, $fd, $fe, $fb
1cdc0     F8 FB FD FF 
1cdc4     0D 10 0A FB 
1cdc8     F7 F3 F4 F8 
1cdcc     F7 F7 F7 FC | 	byte	$f8, $fb, $fd, $ff, $0d, $10, $0a, $fb, $f7, $f3, $f4, $f8, $f7, $f7, $f7, $fc
1cdd0     02 FE 0D 1C 
1cdd4     1C 0F 03 01 
1cdd8     FE FB F9 FA 
1cddc     FC FD FE FC | 	byte	$02, $fe, $0d, $1c, $1c, $0f, $03, $01, $fe, $fb, $f9, $fa, $fc, $fd, $fe, $fc
1cde0     F8 FD FF 01 
1cde4     0D 0E 06 F9 
1cde8     F5 F2 F7 F8 
1cdec     F6 F7 F8 03 | 	byte	$f8, $fd, $ff, $01, $0d, $0e, $06, $f9, $f5, $f2, $f7, $f8, $f6, $f7, $f8, $03
1cdf0     01 02 18 1D 
1cdf4     18 08 02 00 
1cdf8     FD FA FB F9 
1cdfc     FA FD FC FC | 	byte	$01, $02, $18, $1d, $18, $08, $02, $00, $fd, $fa, $fb, $f9, $fa, $fd, $fc, $fc
1ce00     F9 FE 00 03 
1ce04     0D 0A 01 F7 
1ce08     F3 F1 F8 F7 
1ce0c     F4 F6 00 05 | 	byte	$f9, $fe, $00, $03, $0d, $0a, $01, $f7, $f3, $f1, $f8, $f7, $f4, $f6, $00, $05
1ce10     00 0C 1C 1D 
1ce14     10 03 01 FF 
1ce18     FC FA FB F9 
1ce1c     FA FD FD FB | 	byte	$00, $0c, $1c, $1d, $10, $03, $01, $ff, $fc, $fa, $fb, $f9, $fa, $fd, $fd, $fb
1ce20     FC FF 00 04 
1ce24     0B 08 FD F5 
1ce28     F2 F3 F8 F6 
1ce2c     F4 FA 05 04 | 	byte	$fc, $ff, $00, $04, $0b, $08, $fd, $f5, $f2, $f3, $f8, $f6, $f4, $fa, $05, $04
1ce30     01 14 1D 1A 
1ce34     07 02 00 FD 
1ce38     FB FA F9 F8 
1ce3c     FA FD FE FA | 	byte	$01, $14, $1d, $1a, $07, $02, $00, $fd, $fb, $fa, $f9, $f8, $fa, $fd, $fe, $fa
1ce40     FE 02 FF 08 
1ce44     09 06 F9 F4 
1ce48     F0 F6 F6 F4 
1ce4c     F3 02 07 03 | 	byte	$fe, $02, $ff, $08, $09, $06, $f9, $f4, $f0, $f6, $f6, $f4, $f3, $02, $07, $03
1ce50     0B 1C 1D 13 
1ce54     03 01 FF FD 
1ce58     FA FB F9 F8 
1ce5c     FA FE FC FB | 	byte	$0b, $1c, $1d, $13, $03, $01, $ff, $fd, $fa, $fb, $f9, $f8, $fa, $fe, $fc, $fb
1ce60     00 01 FF 09 
1ce64     08 02 F6 F2 
1ce68     F1 F7 F6 F3 
1ce6c     FA 06 06 03 | 	byte	$00, $01, $ff, $09, $08, $02, $f6, $f2, $f1, $f7, $f6, $f3, $fa, $06, $06, $03
1ce70     16 1E 1A 09 
1ce74     02 01 FF FC 
1ce78     FA FA F8 F8 
1ce7c     FD FE FB FD | 	byte	$16, $1e, $1a, $09, $02, $01, $ff, $fc, $fa, $fa, $f8, $f8, $fd, $fe, $fb, $fd
1ce80     02 00 02 08 
1ce84     06 FE F4 F1 
1ce88     F4 F7 F4 F4 
1ce8c     04 06 04 0C | 	byte	$02, $00, $02, $08, $06, $fe, $f4, $f1, $f4, $f7, $f4, $f4, $04, $06, $04, $0c
1ce90     1C 1D 12 04 
1ce94     01 00 FD FA 
1ce98     FA F9 F7 F8 
1ce9c     FE FC FB 01 | 	byte	$1c, $1d, $12, $04, $01, $00, $fd, $fa, $fa, $f9, $f7, $f8, $fe, $fc, $fb, $01
1cea0     01 FE 04 07 
1cea4     04 F9 F2 F0 
1cea8     F5 F5 F3 FB 
1ceac     06 06 07 19 | 	byte	$01, $fe, $04, $07, $04, $f9, $f2, $f0, $f5, $f5, $f3, $fb, $06, $06, $07, $19
1ceb0     1E 1A 09 02 
1ceb4     00 FF FC FA 
1ceb8     FA F8 F6 FB 
1cebc     FD FC FF 02 | 	byte	$1e, $1a, $09, $02, $00, $ff, $fc, $fa, $fa, $f8, $f6, $fb, $fd, $fc, $ff, $02
1cec0     00 FE 05 06 
1cec4     01 F5 F1 F1 
1cec8     F6 F5 F7 04 
1cecc     06 06 14 1D | 	byte	$00, $fe, $05, $06, $01, $f5, $f1, $f1, $f6, $f5, $f7, $04, $06, $06, $14, $1d
1ced0     1E 12 04 02 
1ced4     FF FD FB F9 
1ced8     F9 F7 F6 FB 
1cedc     FC FA 02 01 | 	byte	$1e, $12, $04, $02, $ff, $fd, $fb, $f9, $f9, $f7, $f6, $fb, $fc, $fa, $02, $01
1cee0     FE 00 06 04 
1cee4     FB F2 F0 F3 
1cee8     F4 F4 FD 04 
1ceec     05 0E 1C 1D | 	byte	$fe, $00, $06, $04, $fb, $f2, $f0, $f3, $f4, $f4, $fd, $04, $05, $0e, $1c, $1d
1cef0     19 07 02 00 
1cef4     FE FC F9 F8 
1cef8     F8 F5 F7 FC 
1cefc     FB FF 02 00 | 	byte	$19, $07, $02, $00, $fe, $fc, $f9, $f8, $f8, $f5, $f7, $fc, $fb, $ff, $02, $00
1cf00     FC 04 05 02 
1cf04     F6 F0 F1 F4 
1cf08     F3 FA 01 05 
1cf0c     09 1B 1E 1D | 	byte	$fc, $04, $05, $02, $f6, $f0, $f1, $f4, $f3, $fa, $01, $05, $09, $1b, $1e, $1d
1cf10     0E 03 01 FE 
1cf14     FC FB F8 F8 
1cf18     F7 F6 F9 FC 
1cf1c     FA 03 01 FE | 	byte	$0e, $03, $01, $fe, $fc, $fb, $f8, $f8, $f7, $f6, $f9, $fc, $fa, $03, $01, $fe
1cf20     00 06 05 FE 
1cf24     F2 F0 F3 F3 
1cf28     F5 00 02 05 
1cf2c     18 20 1F 16 | 	byte	$00, $06, $05, $fe, $f2, $f0, $f3, $f3, $f5, $00, $02, $05, $18, $20, $1f, $16
1cf30     06 02 00 FD 
1cf34     FC F9 F8 F7 
1cf38     F6 F6 F9 FA 
1cf3c     FE 03 FF FC | 	byte	$06, $02, $00, $fd, $fc, $f9, $f8, $f7, $f6, $f6, $f9, $fa, $fe, $03, $ff, $fc
1cf40     03 04 02 F7 
1cf44     EF F1 F2 F4 
1cf48     FD 01 03 11 
1cf4c     1F 20 1B 0A | 	byte	$03, $04, $02, $f7, $ef, $f1, $f2, $f4, $fd, $01, $03, $11, $1f, $20, $1b, $0a
1cf50     04 01 FF FC 
1cf54     FA F8 F7 F7 
1cf58     F6 F7 FA FA 
1cf5c     02 02 FD 00 | 	byte	$04, $01, $ff, $fc, $fa, $f8, $f7, $f7, $f6, $f7, $fa, $fa, $02, $02, $fd, $00
1cf60     04 04 FE F1 
1cf64     F0 F3 F2 F9 
1cf68     00 00 0D 1C 
1cf6c     21 1F 11 04 | 	byte	$04, $04, $fe, $f1, $f0, $f3, $f2, $f9, $00, $00, $0d, $1c, $21, $1f, $11, $04
1cf70     02 00 FD FA 
1cf74     F9 F8 F6 F5 
1cf78     F6 F7 F9 FD 
1cf7c     03 00 FD 04 | 	byte	$02, $00, $fd, $fa, $f9, $f8, $f6, $f5, $f6, $f7, $f9, $fd, $03, $00, $fd, $04
1cf80     04 02 F9 EF 
1cf84     F2 F2 F5 FE 
1cf88     00 05 19 1F 
1cf8c     22 17 08 03 | 	byte	$04, $02, $f9, $ef, $f2, $f2, $f5, $fe, $00, $05, $19, $1f, $22, $17, $08, $03
1cf90     01 FE FB F9 
1cf94     F8 F6 F5 F6 
1cf98     F6 F8 FB 01 
1cf9c     03 FD 02 04 | 	byte	$01, $fe, $fb, $f9, $f8, $f6, $f5, $f6, $f6, $f8, $fb, $01, $03, $fd, $02, $04
1cfa0     03 FF F2 F1 
1cfa4     F3 F2 FB 00 
1cfa8     03 14 1E 21 
1cfac     1F 0D 04 02 | 	byte	$03, $ff, $f2, $f1, $f3, $f2, $fb, $00, $03, $14, $1e, $21, $1f, $0d, $04, $02
1cfb0     00 FD FB F8 
1cfb4     F7 F5 F4 F5 
1cfb8     F6 F9 FC 02 
1cfbc     00 FF 03 02 | 	byte	$00, $fd, $fb, $f8, $f7, $f5, $f4, $f5, $f6, $f9, $fc, $02, $00, $ff, $03, $02
1cfc0     01 F8 F0 F1 
1cfc4     F1 F7 FE 00 
1cfc8     0E 1B 1F 20 
1cfcc     12 06 02 00 | 	byte	$01, $f8, $f0, $f1, $f1, $f7, $fe, $00, $0e, $1b, $1f, $20, $12, $06, $02, $00
1cfd0     FD FB F9 F7 
1cfd4     F6 F4 F5 F6 
1cfd8     F7 FA 00 02 
1cfdc     FF 02 02 02 | 	byte	$fd, $fb, $f9, $f7, $f6, $f4, $f5, $f6, $f7, $fa, $00, $02, $ff, $02, $02, $02
1cfe0     FD F2 F1 F1 
1cfe4     F4 FB FE 0B 
1cfe8     17 1E 20 19 
1cfec     0A 03 01 FF | 	byte	$fd, $f2, $f1, $f1, $f4, $fb, $fe, $0b, $17, $1e, $20, $19, $0a, $03, $01, $ff
1cff0     FC FA F7 F7 
1cff4     F5 F3 F5 F6 
1cff8     FA FC 02 01 
1cffc     02 03 02 01 | 	byte	$fc, $fa, $f7, $f7, $f5, $f3, $f5, $f6, $fa, $fc, $02, $01, $02, $03, $02, $01
1d000     F7 F2 F2 F2 
1d004     FA FC 08 14 
1d008     1B 1F 1C 0D 
1d00c     05 02 00 FE | 	byte	$f7, $f2, $f2, $f2, $fa, $fc, $08, $14, $1b, $1f, $1c, $0d, $05, $02, $00, $fe
1d010     FB F9 F7 F6 
1d014     F4 F4 F5 F7 
1d018     FB FF 01 02 
1d01c     03 01 00 FB | 	byte	$fb, $f9, $f7, $f6, $f4, $f4, $f5, $f7, $fb, $ff, $01, $02, $03, $01, $00, $fb
1d020     F2 F2 F1 F7 
1d024     FC 04 12 17 
1d028     1E 1E 11 09 
1d02c     03 01 FF FC | 	byte	$f2, $f2, $f1, $f7, $fc, $04, $12, $17, $1e, $1e, $11, $09, $03, $01, $ff, $fc
1d030     FA F8 F7 F5 
1d034     F4 F4 F7 FA 
1d038     FC 01 00 04 
1d03c     02 01 FF F6 | 	byte	$fa, $f8, $f7, $f5, $f4, $f4, $f7, $fa, $fc, $01, $00, $04, $02, $01, $ff, $f6
1d040     F3 F2 F5 FC 
1d044     FF 0F 15 1B 
1d048     1E 14 0B 05 
1d04c     01 FF FD FB | 	byte	$f3, $f2, $f5, $fc, $ff, $0f, $15, $1b, $1e, $14, $0b, $05, $01, $ff, $fd, $fb
1d050     F9 F7 F6 F4 
1d054     F4 F5 F8 FA 
1d058     FE 00 03 03 
1d05c     01 FF FA F4 | 	byte	$f9, $f7, $f6, $f4, $f4, $f5, $f8, $fa, $fe, $00, $03, $03, $01, $ff, $fa, $f4
1d060     F3 F3 FB FD 
1d064     0A 13 19 1D 
1d068     17 0C 08 03 
1d06c     00 FE FC F9 | 	byte	$f3, $f3, $fb, $fd, $0a, $13, $19, $1d, $17, $0c, $08, $03, $00, $fe, $fc, $f9
1d070     F8 F7 F5 F4 
1d074     F4 F8 FA FB 
1d078     00 00 04 02 
1d07c     00 FE F7 F4 | 	byte	$f8, $f7, $f5, $f4, $f4, $f8, $fa, $fb, $00, $00, $04, $02, $00, $fe, $f7, $f4
1d080     F3 F7 FC 05 
1d084     11 16 1B 1A 
1d088     0E 09 06 02 
1d08c     FF FD FB F9 | 	byte	$f3, $f7, $fc, $05, $11, $16, $1b, $1a, $0e, $09, $06, $02, $ff, $fd, $fb, $f9
1d090     F7 F6 F5 F4 
1d094     F6 F9 FA FD 
1d098     00 02 03 00 
1d09c     FF FB F5 F3 | 	byte	$f7, $f6, $f5, $f4, $f6, $f9, $fa, $fd, $00, $02, $03, $00, $ff, $fb, $f5, $f3
1d0a0     F5 FB 01 0E 
1d0a4     13 19 1A 10 
1d0a8     0A 07 03 FF 
1d0ac     FD FB F9 F8 | 	byte	$f5, $fb, $01, $0e, $13, $19, $1a, $10, $0a, $07, $03, $ff, $fd, $fb, $f9, $f8
1d0b0     F7 F5 F5 F5 
1d0b4     F8 F9 FA FF 
1d0b8     00 04 02 00 
1d0bc     FE F8 F4 F3 | 	byte	$f7, $f5, $f5, $f5, $f8, $f9, $fa, $ff, $00, $04, $02, $00, $fe, $f8, $f4, $f3
1d0c0     F9 FD 0B 11 
1d0c4     16 1A 14 0A 
1d0c8     08 05 02 FF 
1d0cc     FC FB F9 F7 | 	byte	$f9, $fd, $0b, $11, $16, $1a, $14, $0a, $08, $05, $02, $ff, $fc, $fb, $f9, $f7
1d0d0     F6 F5 F5 F6 
1d0d4     F8 F9 FC FF 
1d0d8     01 03 01 FF 
1d0dc     FE F6 F5 F7 | 	byte	$f6, $f5, $f5, $f6, $f8, $f9, $fc, $ff, $01, $03, $01, $ff, $fe, $f6, $f5, $f7
1d0e0     FD 05 10 13 
1d0e4     18 16 0A 08 
1d0e8     05 02 FF FD 
1d0ec     FC FA F9 F7 | 	byte	$fd, $05, $10, $13, $18, $16, $0a, $08, $05, $02, $ff, $fd, $fc, $fa, $f9, $f7
1d0f0     F6 F6 F6 F8 
1d0f4     F9 FA FE FF 
1d0f8     03 02 00 00 
1d0fc     FA F5 F5 FB | 	byte	$f6, $f6, $f6, $f8, $f9, $fa, $fe, $ff, $03, $02, $00, $00, $fa, $f5, $f5, $fb
1d100     00 0D 11 16 
1d104     18 0D 08 06 
1d108     04 02 FE FC 
1d10c     FA F9 F9 F7 | 	byte	$00, $0d, $11, $16, $18, $0d, $08, $06, $04, $02, $fe, $fc, $fa, $f9, $f9, $f7
1d110     F6 F6 F8 F9 
1d114     FA FA FF FF 
1d118     03 01 00 FF 
1d11c     F7 F5 F9 FD | 	byte	$f6, $f6, $f8, $f9, $fa, $fa, $ff, $ff, $03, $01, $00, $ff, $f7, $f5, $f9, $fd
1d120     09 10 14 18 
1d124     11 07 06 04 
1d128     03 00 FD FB 
1d12c     FA F9 F8 F7 | 	byte	$09, $10, $14, $18, $11, $07, $06, $04, $03, $00, $fd, $fb, $fa, $f9, $f8, $f7
1d130     F7 F7 F9 F9 
1d134     FA FC FE 00 
1d138     02 01 02 FC 
1d13c     F6 F7 FD 03 | 	byte	$f7, $f7, $f9, $f9, $fa, $fc, $fe, $00, $02, $01, $02, $fc, $f6, $f7, $fd, $03
1d140     0E 12 16 15 
1d144     08 06 04 03 
1d148     01 FE FC FA 
1d14c     F9 F8 F7 F7 | 	byte	$0e, $12, $16, $15, $08, $06, $04, $03, $01, $fe, $fc, $fa, $f9, $f8, $f7, $f7
1d150     F7 F8 F9 FA 
1d154     FB FE FE 01 
1d158     02 02 01 FA 
1d15c     F7 FC FF 0A | 	byte	$f7, $f8, $f9, $fa, $fb, $fe, $fe, $01, $02, $02, $01, $fa, $f7, $fc, $ff, $0a
1d160     10 14 16 0D 
1d164     06 05 03 02 
1d168     00 FE FC FA 
1d16c     F9 F9 F8 F8 | 	byte	$10, $14, $16, $0d, $06, $05, $03, $02, $00, $fe, $fc, $fa, $f9, $f9, $f8, $f8
1d170     F8 FA FB FB 
1d174     FB FD FD 01 
1d178     01 03 FF F8 
1d17c     F8 FE 03 0E | 	byte	$f8, $fa, $fb, $fb, $fb, $fd, $fd, $01, $01, $03, $ff, $f8, $f8, $fe, $03, $0e
1d180     12 15 12 05 
1d184     04 03 02 01 
1d188     FE FC FB FA 
1d18c     F8 F8 F8 F8 | 	byte	$12, $15, $12, $05, $04, $03, $02, $01, $fe, $fc, $fb, $fa, $f8, $f8, $f8, $f8
1d190     F9 FA FB FA 
1d194     FB FD FF 02 
1d198     03 03 FC F8 
1d19c     FD 00 09 10 | 	byte	$f9, $fa, $fb, $fa, $fb, $fd, $ff, $02, $03, $03, $fc, $f8, $fd, $00, $09, $10
1d1a0     13 15 0A 04 
1d1a4     03 02 01 00 
1d1a8     FD FB FA FA 
1d1ac     F9 F8 F8 F8 | 	byte	$13, $15, $0a, $04, $03, $02, $01, $00, $fd, $fb, $fa, $fa, $f9, $f8, $f8, $f8
1d1b0     FA FB FB FA 
1d1b4     FC FD FF 03 
1d1b8     04 02 FA FA 
1d1bc     01 03 0E 13 | 	byte	$fa, $fb, $fb, $fa, $fc, $fd, $ff, $03, $04, $02, $fa, $fa, $01, $03, $0e, $13
1d1c0     15 10 04 02 
1d1c4     01 01 00 FE 
1d1c8     FC FA F9 F9 
1d1cc     F9 F9 F9 F9 | 	byte	$15, $10, $04, $02, $01, $01, $00, $fe, $fc, $fa, $f9, $f9, $f9, $f9, $f9, $f9
1d1d0     FB FB FB FA 
1d1d4     FD FD 01 04 
1d1d8     04 00 F9 FE 
1d1dc     01 06 0F 13 | 	byte	$fb, $fb, $fb, $fa, $fd, $fd, $01, $04, $04, $00, $f9, $fe, $01, $06, $0f, $13
1d1e0     14 08 02 01 
1d1e4     00 00 FF FE 
1d1e8     FC FB FA F9 
1d1ec     F9 F9 FA FA | 	byte	$14, $08, $02, $01, $00, $00, $ff, $fe, $fc, $fb, $fa, $f9, $f9, $f9, $fa, $fa
1d1f0     FC FC FB FB 
1d1f4     FD FD 02 05 
1d1f8     04 FE FC 02 
1d1fc     03 0B 11 14 | 	byte	$fc, $fc, $fb, $fb, $fd, $fd, $02, $05, $04, $fe, $fc, $02, $03, $0b, $11, $14
1d200     0F 03 01 00 
1d204     FF FF FE FD 
1d208     FB FA F9 F9 
1d20c     F9 F9 FA FC | 	byte	$0f, $03, $01, $00, $ff, $ff, $fe, $fd, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fc
1d210     FC FC FB FC 
1d214     FE FE 04 04 
1d218     03 FD 00 02 
1d21c     05 0E 13 13 | 	byte	$fc, $fc, $fb, $fc, $fe, $fe, $04, $04, $03, $fd, $00, $02, $05, $0e, $13, $13
1d220     08 01 00 FF 
1d224     FF FE FE FC 
1d228     FB FA F9 F9 
1d22c     F9 FA FA FC | 	byte	$08, $01, $00, $ff, $ff, $fe, $fe, $fc, $fb, $fa, $f9, $f9, $f9, $fa, $fa, $fc
1d230                 | 	alignl
1d230                 | _hng030rm_spin2_dat_
1d230     00 00 00 00 
1d234     00 00 00 00 
1d238     00 00 00 00 
1d23c     00 00 00 00 
1d240     00 00 00    | vga_font       file "vgafont.def"
1d243     7E 81 A5 81 
1d247     81 BD 99 81 
1d24b     81 7E 00 00 
1d24f     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1d253     7E FF DB FF 
1d257     FF C3 E7 FF 
1d25b     FF 7E 00 00 
1d25f     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1d263     00 36 7F 7F 
1d267     7F 7F 3E 1C 
1d26b     08 00 00 00 
1d26f     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1d273     00 08 1C 3E 
1d277     7F 3E 1C 08 
1d27b     00 00 00 00 
1d27f     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1d283     18 3C 3C E7 
1d287     E7 E7 18 18 
1d28b     3C 00 00 00 
1d28f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1d293     18 3C 7E FF 
1d297     FF 7E 18 18 
1d29b     3C 00 00 00 
1d29f     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1d2a3     00 00 00 18 
1d2a7     3C 3C 18 00 
1d2ab     00 00 00 00 
1d2af     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1d2b3     FF FF FF E7 
1d2b7     C3 C3 E7 FF 
1d2bb     FF FF FF FF 
1d2bf     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1d2c3     00 00 3C 66 
1d2c7     42 42 66 3C 
1d2cb     00 00 00 00 
1d2cf     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1d2d3     FF FF C3 99 
1d2d7     BD BD 99 C3 
1d2db     FF FF FF FF 
1d2df     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1d2e3     78 70 58 4C 
1d2e7     1E 33 33 33 
1d2eb     33 1E 00 00 
1d2ef     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1d2f3     3C 66 66 66 
1d2f7     66 3C 18 7E 
1d2fb     18 18 00 00 
1d2ff     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1d303     FC CC FC 0C 
1d307     0C 0C 0C 0E 
1d30b     0F 07 00 00 
1d30f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1d313     FE C6 FE C6 
1d317     C6 C6 C6 E6 
1d31b     E7 67 03 00 
1d31f     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1d323     18 18 DB 3C 
1d327     E7 3C DB 18 
1d32b     18 00 00 00 
1d32f     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1d333     03 07 0F 1F 
1d337     7F 1F 0F 07 
1d33b     03 01 00 00 
1d33f     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1d343     60 70 78 7C 
1d347     7F 7C 78 70 
1d34b     60 40 00 00 
1d34f     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1d353     18 3C 7E 18 
1d357     18 18 7E 3C 
1d35b     18 00 00 00 
1d35f     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1d363     66 66 66 66 
1d367     66 66 66    | 	byte	$66[7]
1d36a     00 66 66 00 
1d36e     00 00 00 00 
1d372     00 FE DB DB 
1d376     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1d37a     D8 D8 D8 00 
1d37e     00 00 00 3E 
1d382     63 06 1C 36 
1d386     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1d38a     30 63 3E 00 
1d38e     00 00 00 00 
1d392     00 00 00 00 
1d396     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1d39a     7F 7F 7F 00 
1d39e     00 00 00 00 
1d3a2     00 18 3C 7E 
1d3a6     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1d3aa     3C 18 7E 00 
1d3ae     00 00 00 00 
1d3b2     00 18 3C 7E 
1d3b6     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1d3ba     18 18 18 00 
1d3be     00 00 00 00 
1d3c2     00 18 18 18 
1d3c6     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d3ca     7E 3C 18 00 
1d3ce     00 00 00 00 
1d3d2     00 00 00 18 
1d3d6     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1d3da     00 00 00 00 
1d3de     00 00 00 00 
1d3e2     00 00 00    | 	byte	$00[11]
1d3e5     0C 06 7F 06 
1d3e9     0C 00 00 00 
1d3ed     00 00 00 00 
1d3f1     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d3f5     00 03 03 03 
1d3f9     7F 00 00 00 
1d3fd     00 00 00 00 
1d401     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d405     14 36 7F 36 
1d409     14 00 00 00 
1d40d     00 00 00 00 
1d411     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1d415     1C 1C 3E 3E 
1d419     7F 7F 00 00 
1d41d     00 00 00 00 
1d421     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1d425     7F 3E 3E 1C 
1d429     1C 08 00 00 
1d42d     00 00 00 00 
1d431     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d435     00 00 00 00 
1d439     00 00 00 00 
1d43d     00 00 00 00 
1d441     00 00       | 	byte	$00[14]
1d443     18 3C 3C 3C 
1d447     18 18 18 00 
1d44b     18 18 00 00 
1d44f     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1d453     66 24 00 00 
1d457     00 00 00 00 
1d45b     00 00 00 00 
1d45f     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d463     00 36 36 7F 
1d467     36 36 36 7F 
1d46b     36 36 00 00 
1d46f     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1d473     3E 63 43 03 
1d477     3E 60 60 61 
1d47b     63 3E 18 18 
1d47f     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1d483     00 00 43 63 
1d487     30 18 0C 06 
1d48b     63 61 00 00 
1d48f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1d493     1C 36 36 1C 
1d497     6E 3B 33 33 
1d49b     33 6E 00 00 
1d49f     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1d4a3     0C 0C 0C 06 
1d4a7     00 00 00 00 
1d4ab     00 00 00 00 
1d4af     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d4b3     30 18 0C 0C 
1d4b7     0C 0C 0C 0C 
1d4bb     18 30 00 00 
1d4bf     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1d4c3     0C 18 30 30 
1d4c7     30 30 30 30 
1d4cb     18 0C 00 00 
1d4cf     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1d4d3     00 00 00 66 
1d4d7     3C FF 3C 66 
1d4db     00 00 00 00 
1d4df     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1d4e3     00 00 00 18 
1d4e7     18 7E 18 18 
1d4eb     00 00 00 00 
1d4ef     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1d4f3     00 00 00 00 
1d4f7     00 00 00 00 | 	byte	$00[8]
1d4fb     18 18 18 0C 
1d4ff     00 00 00 00 
1d503     00 00 00 00 
1d507     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1d50b     00 00 00 00 
1d50f     00 00 00 00 
1d513     00 00 00 00 
1d517     00 00 00 00 | 	byte	$00[16]
1d51b     18 18 00 00 
1d51f     00 00 00 00 
1d523     00 00 40 60 
1d527     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1d52b     03 01 00 00 
1d52f     00 00 00 00 
1d533     1C 36 63 63 
1d537     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1d53b     36 1C 00 00 
1d53f     00 00 00 00 
1d543     18 1C 1E 18 
1d547     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1d54b     18 7E 00 00 
1d54f     00 00 00 00 
1d553     3E 63 60 30 
1d557     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1d55b     63 7F 00 00 
1d55f     00 00 00 00 
1d563     3E 63 60 60 
1d567     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1d56b     63 3E 00 00 
1d56f     00 00 00 00 
1d573     30 38 3C 36 
1d577     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1d57b     30 78 00 00 
1d57f     00 00 00 00 
1d583     7F 03 03 03 
1d587     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1d58b     63 3E 00 00 
1d58f     00 00 00 00 
1d593     1C 06 03 03 
1d597     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1d59b     63 3E 00 00 
1d59f     00 00 00 00 
1d5a3     7F 63 60 60 
1d5a7     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1d5ab     0C 0C 00 00 
1d5af     00 00 00 00 
1d5b3     3E 63 63 63 
1d5b7     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1d5bb     63 3E 00 00 
1d5bf     00 00 00 00 
1d5c3     3E 63 63 63 
1d5c7     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1d5cb     30 1E 00 00 
1d5cf     00 00 00 00 
1d5d3     00 00 00 18 
1d5d7     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1d5db     18 18 00 00 
1d5df     00 00 00 00 
1d5e3     00 00 00 18 
1d5e7     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1d5eb     18 18 0C 00 
1d5ef     00 00 00 00 
1d5f3     00 60 30 18 
1d5f7     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1d5fb     30 60 00 00 
1d5ff     00 00 00 00 
1d603     00 00 00 7E 
1d607     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1d60b     00 00 00 00 
1d60f     00 00 00 00 
1d613     00          | 	byte	$00[9]
1d614     06 0C 18 30 
1d618     60 30 18 0C 
1d61c     06 00 00 00 
1d620     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1d624     63 63 30 18 
1d628     18 18 00 18 
1d62c     18 00 00 00 
1d630     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d634     3E 63 63 7B 
1d638     7B 7B 3B 03 
1d63c     3E 00 00 00 
1d640     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1d644     1C 36 63 63 
1d648     7F 63 63 63 
1d64c     63 00 00 00 
1d650     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1d654     66 66 66 3E 
1d658     66 66 66 66 
1d65c     3F 00 00 00 
1d660     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1d664     66 43 03 03 
1d668     03 03 43 66 
1d66c     3C 00 00 00 
1d670     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1d674     36 66 66 66 
1d678     66 66 66 36 
1d67c     1F 00 00 00 
1d680     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1d684     66 46 16 1E 
1d688     16 06 46 66 
1d68c     7F 00 00 00 
1d690     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1d694     66 46 16 1E 
1d698     16 06 06 06 
1d69c     0F 00 00 00 
1d6a0     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1d6a4     66 43 03 03 
1d6a8     7B 63 63 66 
1d6ac     5C 00 00 00 
1d6b0     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1d6b4     63 63 63 7F 
1d6b8     63 63 63 63 
1d6bc     63 00 00 00 
1d6c0     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1d6c4     18 18 18 18 
1d6c8     18 18 18 18 | 	byte	$18[8]
1d6cc     3C 00 00 00 
1d6d0     00 00 00 78 
1d6d4     30 30 30 30 
1d6d8     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1d6dc     1E 00 00 00 
1d6e0     00 00 00 67 
1d6e4     66 66 36 1E 
1d6e8     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1d6ec     67 00 00 00 
1d6f0     00 00 00 0F 
1d6f4     06 06 06 06 
1d6f8     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1d6fc     7F 00 00 00 
1d700     00 00 00 63 
1d704     77 7F 7F 6B 
1d708     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1d70c     63 00 00 00 
1d710     00 00 00 63 
1d714     67 6F 7F 7B 
1d718     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1d71c     63 00 00 00 
1d720     00 00 00 3E 
1d724     63 63 63 63 
1d728     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1d72c     3E 00 00 00 
1d730     00 00 00 3F 
1d734     66 66 66 3E 
1d738     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1d73c     0F 00 00 00 
1d740     00 00 00 3E 
1d744     63 63 63 63 
1d748     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1d74c     3E 30 70 00 
1d750     00 00 00 3F 
1d754     66 66 66 3E 
1d758     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1d75c     67 00 00 00 
1d760     00 00 00 3E 
1d764     63 63 06 1C 
1d768     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1d76c     3E 00 00 00 
1d770     00 00 00 7E 
1d774     7E 5A 18 18 
1d778     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1d77c     3C 00 00 00 
1d780     00 00 00 63 
1d784     63 63 63 63 
1d788     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1d78c     3E 00 00 00 
1d790     00 00 00 63 
1d794     63 63 63 63 
1d798     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1d79c     08 00 00 00 
1d7a0     00 00 00 63 
1d7a4     63 63 63 6B 
1d7a8     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1d7ac     36 00 00 00 
1d7b0     00 00 00 63 
1d7b4     63 36 3E 1C 
1d7b8     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1d7bc     63 00 00 00 
1d7c0     00 00 00 66 
1d7c4     66 66 66 3C 
1d7c8     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1d7cc     3C 00 00 00 
1d7d0     00 00 00 7F 
1d7d4     63 61 30 18 
1d7d8     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1d7dc     7F 00 00 00 
1d7e0     00 00 00 3C 
1d7e4     0C 0C 0C 0C 
1d7e8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1d7ec     3C 00 00 00 
1d7f0     00 00 00 00 
1d7f4     01 03 07 0E 
1d7f8     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1d7fc     40 00 00 00 
1d800     00 00 00 3C 
1d804     30 30 30 30 
1d808     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1d80c     3C 00 00 00 
1d810     1C 36 00 00 
1d814     00 00 00 00 
1d818     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d81c     00 00 00 00 
1d820     00 00 00 00 
1d824     00 00 00 00 
1d828     00 00 00 00 
1d82c     00          | 	byte	$00[17]
1d82d     FF 00 00 0C 
1d831     18 00 00 00 
1d835     00 00 00 00 
1d839     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d83d     00 00 00 00 
1d841     00 00 00 00 
1d845     00          | 	byte	$00[9]
1d846     1E 30 3E 33 
1d84a     33 33 6E 00 
1d84e     00 00 00 00 
1d852     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1d856     1E 36 66 66 
1d85a     66 66 3E 00 
1d85e     00 00 00 00 
1d862     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d866     3E 63 03 03 
1d86a     03 63 3E 00 
1d86e     00 00 00 00 
1d872     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1d876     3C 36 33 33 
1d87a     33 33 6E 00 
1d87e     00 00 00 00 
1d882     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d886     3E 63 7F 03 
1d88a     03 63 3E 00 
1d88e     00 00 00 00 
1d892     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1d896     0C 1E 0C 0C 
1d89a     0C 0C 1E 00 
1d89e     00 00 00 00 
1d8a2     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d8a6     6E 33 33 33 
1d8aa     33 33 3E 30 
1d8ae     33 1E 00 00 
1d8b2     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1d8b6     36 6E 66 66 
1d8ba     66 66 67 00 
1d8be     00 00 00 00 
1d8c2     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1d8c6     1C 18 18 18 
1d8ca     18 18 3C 00 
1d8ce     00 00 00 00 
1d8d2     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1d8d6     70 60 60 60 
1d8da     60 60 60 66 
1d8de     66 3C 00 00 
1d8e2     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1d8e6     66 36 1E 1E 
1d8ea     36 66 67 00 
1d8ee     00 00 00 00 
1d8f2     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1d8f6     18 18 18 18 
1d8fa     18 18       | 	byte	$18[6]
1d8fc     3C 00 00 00 
1d900     00 00 00 00 
1d904     00 00 37 7F 
1d908     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1d90c     63 00 00 00 
1d910     00 00 00 00 
1d914     00 00 3B 66 
1d918     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1d91c     66 00 00 00 
1d920     00 00 00 00 
1d924     00 00 3E 63 
1d928     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1d92c     3E 00 00 00 
1d930     00 00 00 00 
1d934     00 00 3B 66 
1d938     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1d93c     3E 06 06 0F 
1d940     00 00 00 00 
1d944     00 00 6E 33 
1d948     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1d94c     3E 30 30 78 
1d950     00 00 00 00 
1d954     00 00 3B 6E 
1d958     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1d95c     0F 00 00 00 
1d960     00 00 00 00 
1d964     00 00 3E 63 
1d968     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1d96c     3E 00 00 00 
1d970     00 00 00 08 
1d974     0C 0C 3F 0C 
1d978     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1d97c     38 00 00 00 
1d980     00 00 00 00 
1d984     00 00 33 33 
1d988     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1d98c     6E 00 00 00 
1d990     00 00 00 00 
1d994     00 00 63 63 
1d998     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1d99c     1C 00 00 00 
1d9a0     00 00 00 00 
1d9a4     00 00 63 63 
1d9a8     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1d9ac     36 00 00 00 
1d9b0     00 00 00 00 
1d9b4     00 00 63 36 
1d9b8     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1d9bc     63 00 00 00 
1d9c0     00 00 00 00 
1d9c4     00 00 63 63 
1d9c8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1d9cc     7E 60 30 1F 
1d9d0     00 00 00 00 
1d9d4     00 00 7F 33 
1d9d8     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1d9dc     7F 00 00 00 
1d9e0     00 00 00 70 
1d9e4     18 18 18 0E 
1d9e8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1d9ec     70 00 00 00 
1d9f0     00 00 00 18 
1d9f4     18 18 18 18 
1d9f8     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d9fc     18 00 00 00 
1da00     00 00 00 0E 
1da04     18 18 18 70 
1da08     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1da0c     0E 00 00 00 
1da10     6E 3B 00 00 
1da14     00 00 00 00 
1da18     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1da1c     00 00 00 00 
1da20     00 00 00 00 
1da24     00 00       | 	byte	$00[10]
1da26     08 1C 36 63 
1da2a     63 63 7F 00 
1da2e     00 00 00 00 
1da32     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1da36     03 03 03 03 
1da3a     43 66 3C 18 
1da3e     30 1E 00 00 
1da42     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1da46     33 33 33 33 
1da4a     33 33       | 	byte	$33[6]
1da4c     6E 00 00 00 
1da50     00 00 60 30 
1da54     18 00 3E 63 
1da58     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1da5c     3E 00 00 00 
1da60     00 00 08 1C 
1da64     36 00 1E 30 
1da68     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1da6c     6E 00 00 00 
1da70     00 00 00 00 
1da74     33 00 1E 30 
1da78     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1da7c     6E 00 00 00 
1da80     00 00 1C 36 
1da84     1C 00 33 33 
1da88     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1da8c     6E 00 00 00 
1da90     00 00 60 30 
1da94     18 00 3E 63 
1da98     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1da9c     3E 00 00 00 
1daa0     00 00 00 00 
1daa4     00 00 3E 63 
1daa8     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1daac     3E 18 30 1E 
1dab0     00 00 00 1C 
1dab4     58 78 38 18 
1dab8     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1dabc     3C 00 00 00 
1dac0     00 00 00 00 
1dac4     63 00 3E 63 
1dac8     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1dacc     3E 00 00 00 
1dad0     66 33 00 3E 
1dad4     63 63 63 63 
1dad8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1dadc     3E 00 00 00 
1dae0     00 00 CC 66 
1dae4     33 00 3E 63 
1dae8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1daec     3E 00 00 00 
1daf0     00 00 18 3C 
1daf4     66 00 1C 18 
1daf8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1dafc     3C 00 00 00 
1db00     30 18 00 7F 
1db04     63 61 30 18 
1db08     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1db0c     7F 00 00 00 
1db10     00 63 00 08 
1db14     1C 36 63 63 
1db18     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1db1c     63 00 00 00 
1db20     30 18 00 3C 
1db24     66 43 03 03 
1db28     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1db2c     3C 00 00 00 
1db30     30 18 00 7F 
1db34     66 46 16 1E 
1db38     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1db3c     7F 00 00 00 
1db40     0C 06 00 0F 
1db44     06 06 06 06 
1db48     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1db4c     7F 00 00 00 
1db50     30 18 00 1C 
1db54     18 18 18 18 
1db58     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1db5c     3C 00 00 00 
1db60     00 00 08 1C 
1db64     36 00 3E 63 
1db68     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1db6c     3E 00 00 00 
1db70     00 00 00 00 
1db74     63 00 3E 63 
1db78     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1db7c     3E 00 00 00 
1db80     00 00 00 6F 
1db84     46 26 06 06 
1db88     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1db8c     7F 00 00 00 
1db90     00 00 00 6E 
1db94     4C 2C 0C 0C 
1db98     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1db9c     1E 00 00 00 
1dba0     30 18 00 3E 
1dba4     63 63 06 1C 
1dba8     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1dbac     3E 00 00 00 
1dbb0     00 00 60 30 
1dbb4     18 00 3E 63 
1dbb8     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1dbbc     3E 00 00 00 
1dbc0     00 63 00 3E 
1dbc4     63 63 63 63 
1dbc8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1dbcc     3E 00 00 00 
1dbd0     00 63 00 63 
1dbd4     63 63 63 63 
1dbd8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1dbdc     3E 00 00 00 
1dbe0     6C 38 00 7E 
1dbe4     7E 5A 18 18 
1dbe8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1dbec     3C 00 00 00 
1dbf0     00 00 60 48 
1dbf4     2C 0C 3F 0C 
1dbf8     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1dbfc     38 00 00 00 
1dc00     00 00 00 0F 
1dc04     26 36 1E 0E 
1dc08     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1dc0c     7F 00 00 00 
1dc10     00 00 00 00 
1dc14     00 63 36 1C 
1dc18     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1dc1c     00 00 00 00 
1dc20     00 00       | 	byte	$00[6]
1dc22     36 1C 08 00 
1dc26     3E 63 03 03 
1dc2a     03 63 3E 00 
1dc2e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1dc32     30 18 0C 00 
1dc36     1E 30 3E 33 
1dc3a     33 33 6E 00 
1dc3e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1dc42     60 30 18 00 
1dc46     1C 18 18 18 
1dc4a     18 18 3C 00 
1dc4e     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1dc52     60 30 18 00 
1dc56     3E 63 63 63 
1dc5a     63 63 3E 00 
1dc5e     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1dc62     30 18 0C 00 
1dc66     33 33 33 33 
1dc6a     33 33 6E 00 
1dc6e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1dc72     00 08 1C 36 
1dc76     63 63 7F 63 
1dc7a     63 63 63 18 
1dc7e     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1dc82     00 00 00 00 
1dc86     1E 30 3E 33 
1dc8a     33 33 6E 18 
1dc8e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1dc92     00 7F 63 61 
1dc96     30 18 0C 06 
1dc9a     43 63 7F 00 
1dc9e     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1dca2     36 1C 08 00 
1dca6     7F 33 18 0C 
1dcaa     06 63 7F 00 
1dcae     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1dcb2     00 7F 66 46 
1dcb6     16 1E 16 06 
1dcba     46 66 7F 18 
1dcbe     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1dcc2     00 00 00 00 
1dcc6     3E 63 7F 03 
1dcca     03 63 3E 18 
1dcce     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1dcd2     00 3C 66 03 
1dcd6     1F 03 0F 03 
1dcda     03 66 3C 00 
1dcde     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1dce2     60 30 18 00 
1dce6     7F 33 18 0C 
1dcea     06 63 7F 00 
1dcee     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1dcf2     00 3C 66 43 
1dcf6     03 03 03 03 
1dcfa     43 66 3C 00 
1dcfe     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1dd02     00 00 00 00 
1dd06     3E 63 06 1C 
1dd0a     30 63 3E 18 
1dd0e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1dd12     00 00 00 00 
1dd16     00 00       | 	byte	$00[6]
1dd18     6C 36 1B 36 
1dd1c     6C 00 00 00 
1dd20     00 00 00 00 
1dd24     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1dd28     1B 36 6C 36 
1dd2c     1B 00 00 00 
1dd30     88 22 88 22 
1dd34     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1dd38     88 22 88 22 
1dd3c     88 22 88 22 
1dd40     AA 55 AA 55 
1dd44     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1dd48     AA 55 AA 55 
1dd4c     AA 55 AA 55 
1dd50     BB EE BB EE 
1dd54     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1dd58     BB EE BB EE 
1dd5c     BB EE BB EE 
1dd60     18 18 18 18 
1dd64     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1dd68     18 18 18 18 
1dd6c     18 18 18 18 
1dd70     18 18 18 18 
1dd74     18 18 18    | 	byte	$18[15]
1dd77     1F 18 18 18 
1dd7b     18 18 18 18 
1dd7f     18 30 18 00 
1dd83     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1dd87     63 7F 63 63 
1dd8b     63 63 00 00 
1dd8f     00 1C 36 00 
1dd93     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1dd97     63 7F 63 63 
1dd9b     63 63 00 00 
1dd9f     00 36 1C 00 
1dda3     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1dda7     1E 16 06 46 
1ddab     66 7F 00 00 
1ddaf     00 00 00 00 
1ddb3     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1ddb7     1C 30 60 63 
1ddbb     63 3E 18 30 
1ddbf     1E 6C 6C 6C 
1ddc3     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1ddc7     6F 6C 6C 6C 
1ddcb     6C 6C 6C 6C 
1ddcf     6C 6C 6C 6C 
1ddd3     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1ddd7     6C 6C 6C 6C 
1dddb     6C 6C 6C 6C 
1dddf     6C          | 	byte	$6c[9]
1dde0     00 00 00 00 
1dde4     00          | 	byte	$00[5]
1dde5     7F 60 6F 6C 
1dde9     6C 6C 6C 6C 
1dded     6C 6C 6C 6C 
1ddf1     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1ddf5     6F 60 7F 00 
1ddf9     00 00 00 00 
1ddfd     00 00 00 18 
1de01     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1de05     61 30 18 0C 
1de09     06 43 63 7F 
1de0d     00 00 00 00 
1de11     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1de15     00 7F 33 18 
1de19     0C 06 63 7F 
1de1d     00 00 00 00 
1de21     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1de25     00 00 1F 18 
1de29     18 18 18 18 
1de2d     18 18 18 18 
1de31     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1de35     18 18 F8 00 
1de39     00 00 00 00 
1de3d     00 00 00 18 
1de41     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1de45     18 18 FF 00 
1de49     00 00 00 00 
1de4d     00 00 00 00 
1de51     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1de55     00 00 FF 18 
1de59     18 18 18 18 
1de5d     18 18 18 18 
1de61     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1de65     18 18 F8 18 
1de69     18 18 18 18 
1de6d     18 18 18 00 
1de71     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1de75     00 00 FF 00 
1de79     00 00 00 00 
1de7d     00 00 00 18 
1de81     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1de85     18 18 FF 18 
1de89     18 18 18 18 
1de8d     18 18 18 63 
1de91     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1de95     36 63 63 7F 
1de99     63 63 63 63 
1de9d     00 00 00 00 
1dea1     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1dea5     00 1E 30 3E 
1dea9     33 33 33 6E 
1dead     00 00 00 6C 
1deb1     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1deb5     EC 0C FC 00 
1deb9     00 00 00 00 
1debd     00 00 00 00 
1dec1     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1dec5     FC 0C EC 6C 
1dec9     6C 6C 6C 6C 
1decd     6C 6C 6C 6C 
1ded1     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1ded5     EF 00 FF 00 
1ded9     00 00 00 00 
1dedd     00 00 00 00 
1dee1     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1dee5     FF 00 EF 6C 
1dee9     6C 6C 6C 6C 
1deed     6C 6C 6C 6C 
1def1     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1def5     EC 0C EC 6C 
1def9     6C 6C 6C 6C 
1defd     6C 6C 6C 00 
1df01     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1df05     FF 00 FF 00 
1df09     00 00 00 00 
1df0d     00 00 00 6C 
1df11     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1df15     EF 00 EF 6C 
1df19     6C 6C 6C 6C 
1df1d     6C 6C 6C 00 
1df21     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1df25     63 3E 63 63 
1df29     63 63 3E 63 
1df2d     00 00 00 00 
1df31     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1df35     30 3C 36 33 
1df39     33 33 33 6E 
1df3d     00 00 00 00 
1df41     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1df45     66 66 6F 66 
1df49     66 66 36 1F 
1df4d     00 00 00 36 
1df51     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1df55     66 66 66 66 
1df59     66 66       | 	byte	$66[6]
1df5b     36 1F 00 00 
1df5f     00 00 63 00 
1df63     7F 66 46 16 
1df67     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1df6b     66 7F 00 00 
1df6f     00 6C 38 00 
1df73     38 30 30 3C 
1df77     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1df7b     33 6E 00 00 
1df7f     00 36 1C 00 
1df83     63 67 6F 7F 
1df87     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1df8b     63 63 00 00 
1df8f     00 30 18 00 
1df93     3C 18 18 18 
1df97     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1df9b     18 3C 00 00 
1df9f     00 3C 66 00 
1dfa3     3C 18 18 18 
1dfa7     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1dfab     18 3C 00 00 
1dfaf     00 00 00 36 
1dfb3     1C 08 00 3E 
1dfb7     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1dfbb     63 3E 00 00 
1dfbf     00 18 18 18 
1dfc3     18 18 18 18 
1dfc7     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1dfcb     00 00 00 00 
1dfcf     00 00 00 00 
1dfd3     00 00 00 00 | 	byte	$00[12]
1dfd7     F8 18 18 18 
1dfdb     18 18 18 18 
1dfdf     18 FF FF FF 
1dfe3     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1dfe7     FF FF FF FF 
1dfeb     FF FF FF FF 
1dfef     FF          | 	byte	$ff[9]
1dff0     00 00 00 00 
1dff4     00 00 00    | 	byte	$00[7]
1dff7     FF FF FF FF 
1dffb     FF FF FF FF 
1dfff     FF          | 	byte	$ff[9]
1e000     00 00 00 7E 
1e004     7E 5A 18 18 
1e008     18 18 18 18 
1e00c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1e010     1C 36 1C 63 
1e014     63 63 63 63 
1e018     63 63 63 63 
1e01c     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1e020     FF FF FF FF 
1e024     FF FF FF    | 	byte	$ff[7]
1e027     00 00 00 00 
1e02b     00 00 00 00 
1e02f     00          | 	byte	$00[9]
1e030     30 18 00 3E 
1e034     63 63 63 63 
1e038     63 63 63 63 
1e03c     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1e040     00 00 00 1E 
1e044     33 33 33 1B 
1e048     33 63 63 63 
1e04c     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1e050     1C 36 00 3E 
1e054     63 63 63 63 
1e058     63 63 63 63 
1e05c     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1e060     30 18 00 63 
1e064     67 6F 7F 7B 
1e068     73 63 63 63 
1e06c     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1e070     00 00 60 30 
1e074     18 00 3B 66 
1e078     66 66 66 66 
1e07c     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1e080     00 00 36 1C 
1e084     08 00 3B 66 
1e088     66 66 66 66 
1e08c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1e090     36 1C 00 3E 
1e094     63 63 06 1C 
1e098     30 60 63 63 
1e09c     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1e0a0     00 00 36 1C 
1e0a4     08 00 3E 63 
1e0a8     06 1C 30 63 
1e0ac     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1e0b0     30 18 00 3F 
1e0b4     66 66 66 3E 
1e0b8     36 66 66 66 
1e0bc     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1e0c0     30 18 00 63 
1e0c4     63 63 63 63 
1e0c8     63 63 63 63 
1e0cc     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1e0d0     00 00 60 30 
1e0d4     18 00 3B 6E 
1e0d8     66 06 06 06 
1e0dc     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1e0e0     66 33 00 63 
1e0e4     63 63 63 63 
1e0e8     63 63 63 63 
1e0ec     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1e0f0     00 00 60 30 
1e0f4     18 00 63 63 
1e0f8     63 63 63 63 
1e0fc     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1e100     30 18 00 66 
1e104     66 66 66 3C 
1e108     18 18 18 18 
1e10c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1e110     00 00 00 08 
1e114     0C 0C 3F 0C 
1e118     0C 0C 0C 6C 
1e11c     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1e120     30 18 00 00 
1e124     00 00 00 00 
1e128     00 00 00 00 
1e12c     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e130     00 00 00 00 
1e134     00 00 00 00 | 	byte	$00[8]
1e138     7F 00 00 00 
1e13c     00 00 00 00 
1e140     66 33 00 00 
1e144     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1e148     00 00 00 00 
1e14c     00 00 00 00 
1e150     00 00 00 00 
1e154     00 00 00 00 
1e158     00 00 00 00 
1e15c     00          | 	byte	$00[21]
1e15d     0C 06 3C 36 
1e161     1C 00 00 00 
1e165     00 00 00 00 
1e169     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e16d     00 00 00 63 
1e171     3E 00 00 00 
1e175     00 00 00 00 
1e179     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e17d     00 00 00 00 
1e181     3E 63 06 1C 
1e185     36 63 63 36 
1e189     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1e18d     00 00 00 00 
1e191     00 00 00 00 | 	byte	$00[8]
1e195     18 00 7E 00 
1e199     18 00 00 00 
1e19d     00 00 00 00 
1e1a1     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e1a5     00 00 00 00 
1e1a9     00 00 00 00 | 	byte	$00[8]
1e1ad     18 30 1E 00 
1e1b1     00 00 1C 36 
1e1b5     36 1C 00 00 
1e1b9     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1e1bd     00 00 00 00 
1e1c1     63 00 00 00 
1e1c5     00 00 00 00 
1e1c9     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e1cd     00 00 00 18 
1e1d1     18 00 00 00 
1e1d5     00 00 00 00 
1e1d9     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e1dd     00 00 00 00 
1e1e1     00          | 	byte	$00[5]
1e1e2     CC 66 33 00 
1e1e6     33 33 33 33 
1e1ea     33 33 6E 00 
1e1ee     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1e1f2     00 3F 66 66 
1e1f6     66 3E 36 66 
1e1fa     66 66 6F 00 
1e1fe     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1e202     36 1C 08 00 
1e206     3B 6E 66 06 
1e20a     06 06 0F 00 
1e20e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1e212     00 00 00 7E 
1e216     7E 7E 7E 7E 
1e21a     7E 7E 00 00 
1e21e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1e222     00 00 00 00 
1e226     00 00 00 00 
1e22a     00 00 00 00 
1e22e     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e230     00 00 00 00 
      ...             
1e260     00 00 00 00 
1e264     00 00 00    | st_font        file "st4font.def"
1e267     FF FF 00 00 
1e26b     00 00 00 00 
1e26f     00 18 18 18 
1e273     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1e277     18 18 18 18 
1e27b     18 18 18 18 
1e27f     18          | 	byte	$18[9]
1e280     00 00 00 00 
1e284     00 00 00    | 	byte	$00[7]
1e287     FF FF 18 18 
1e28b     18 18 18 18 
1e28f     18 18 18 18 
1e293     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1e297     FF FF 00 00 
1e29b     00 00 00 00 
1e29f     00 18 18 18 
1e2a3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1e2a7     1F 1F 18 18 
1e2ab     18 18 18 18 
1e2af     18 18 18 18 
1e2b3     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1e2b7     F8 F8 18 18 
1e2bb     18 18 18 18 
1e2bf     18 00 00 00 
1e2c3     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1e2c7     1F 1F 18 18 
1e2cb     18 18 18 18 
1e2cf     18 00 00 00 
1e2d3     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1e2d7     F8 F8 18 18 
1e2db     18 18 18 18 
1e2df     18 18 18 18 
1e2e3     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1e2e7     1F 1F 00 00 
1e2eb     00 00 00 00 
1e2ef     00 18 18 18 
1e2f3     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1e2f7     F8 F8 00 00 
1e2fb     00 00 00 00 
1e2ff     00 18 18 18 
1e303     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1e307     FF FF 18 18 
1e30b     18 18 18 18 
1e30f     18 00 00 18 
1e313     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1e317     66 7E 7E 66 
1e31b     66 66 66 30 
1e31f     18 00 00 7E 
1e323     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1e327     3E 06 06 06 
1e32b     06 7E 7E 18 
1e32f     0C 30 18 3C 
1e333     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1e337     06 06 06 66 
1e33b     66 7E 3C 00 
1e33f     00 30 18 66 
1e343     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1e347     7E 7E 76 76 
1e34b     66 66 66 00 
1e34f     00 30 18 7C 
1e353     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1e357     1C 38 70 60 
1e35b     60 7E 3E 00 
1e35f     00 30 18 7E 
1e363     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1e367     18 0C 0C 06 
1e36b     06 7E 7E 00 
1e36f     00 18 18 00 
1e373     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1e377     18 18 0C 0C 
1e37b     06 7E 7E 00 
1e37f     00 30 18 3C 
1e383     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1e387     66 66 66 66 
1e38b     66          | 	byte	$66[5]
1e38c     7E 3C 00 00 
1e390     00 00 06 06 
1e394     06 06 16 1E 
1e398     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1e39c     7E 7E 00 00 
1e3a0     00 00 00 00 
1e3a4     00 3C 7C 60 
1e3a8     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1e3ac     7E 7C 30 18 
1e3b0     00 00 00 00 
1e3b4     00 3C 7E 66 
1e3b8     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1e3bc     7E 7C 18 0C 
1e3c0     00 00 30 18 
1e3c4     00 3C 3E 06 
1e3c8     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1e3cc     7E 7C 00 00 
1e3d0     00 00 30 18 
1e3d4     00 3E 7E 66 
1e3d8     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1e3dc     66 66 00 00 
1e3e0     00 00 30 18 
1e3e4     00 7C 7E 06 
1e3e8     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1e3ec     7E 3E 00 00 
1e3f0     00 00 30 18 
1e3f4     00 7E 7E 30 
1e3f8     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1e3fc     7E 7E 00 00 
1e400     00 00 18 18 
1e404     00 7E 7E 30 
1e408     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1e40c     7E 7E 00 00 
1e410     00 00 30 18 
1e414     00 3C 7E 66 
1e418     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1e41c     7E 3C 00 00 
1e420     00 00 1C 1C 
1e424     18 18 38 3C 
1e428     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1e42c     3C 3C 00 00 
1e430     00 00 00 00 
1e434     00 00 00 00 
1e438     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1e43c     00 00 00 00 
1e440     00 00       | 	byte	$00[6]
1e442     18 18 18 18 
1e446     18 18 18 18 | 	byte	$18[8]
1e44a     00 00 18 18 
1e44e     00 00 00 00 
1e452     66 66 66 66 
1e456     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1e45a     00 00 00 00 
1e45e     00 00 00 00 
1e462     00          | 	byte	$00[9]
1e463     66 66 FF FF 
1e467     66 66 FF FF 
1e46b     66 66 00 00 
1e46f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1e473     7C 7E 06 06 
1e477     3E 7C 60 60 
1e47b     7E 3E 18 18 
1e47f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1e483     66 30 30 18 
1e487     18 0C 0C 66 
1e48b     66 00 00 00 
1e48f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1e493     66 66 3C 1C 
1e497     1C FC FE 66 
1e49b     66 FE FC 00 
1e49f     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1e4a3     18 18 18 18 
1e4a7     00 00 00 00 
1e4ab     00 00 00 00 
1e4af     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1e4b3     18 1C 0C 0C 
1e4b7     0C 0C 0C 0C 
1e4bb     1C 18 30 00 
1e4bf     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1e4c3     18 38 30 30 
1e4c7     30 30 30 30 
1e4cb     38 18 0C 00 
1e4cf     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1e4d3     66 66 3C 3C 
1e4d7     FF FF 3C 3C 
1e4db     66 66 00 00 
1e4df     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1e4e3     00 18 18 18 
1e4e7     7E 7E 18 18 
1e4eb     18 00 00 00 
1e4ef     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1e4f3     00 00 00 00 
1e4f7     00 00       | 	byte	$00[6]
1e4f9     18 18 18 18 
1e4fd     18          | 	byte	$18[5]
1e4fe     0C 04 00 00 
1e502     00 00 00 00 
1e506     7E 7E 00 00 
1e50a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1e50e     00 00 00 00 
1e512     00 00 00 00 
1e516     00 00 00 00 
1e51a     00          | 	byte	$00[13]
1e51b     18 18 18 00 
1e51f     00 00 00 60 
1e523     60 60 30 30 
1e527     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1e52b     06 06 06 00 
1e52f     00 00 00 3C 
1e533     7E 66 66 66 
1e537     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1e53b     66 7E 3C 00 
1e53f     00 00 00 18 
1e543     18 1C 1C 18 
1e547     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1e54b     18 7E 7E 00 
1e54f     00 00 00 3C 
1e553     7E 66 66 30 
1e557     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1e55b     0C 7E 7E 00 
1e55f     00 00 00 7E 
1e563     7E 30 30 18 
1e567     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1e56b     66 7E 3C 00 
1e56f     00 00 00 30 
1e573     30 38 38 3C 
1e577     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1e57b     7E 30 30 00 
1e57f     00 00 00 7E 
1e583     7E 06 06 3E 
1e587     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1e58b     66 7E 3C 00 
1e58f     00 00 00 38 
1e593     3C 0E 06 06 
1e597     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1e59b     66 7E 3C 00 
1e59f     00 00 00 7E 
1e5a3     7E 60 60 30 
1e5a7     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1e5ab     0C 0C 0C 00 
1e5af     00 00 00 3C 
1e5b3     7E 66 66 3C 
1e5b7     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1e5bb     66 7E 3C 00 
1e5bf     00 00 00 3C 
1e5c3     7E 66 66 7E 
1e5c7     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1e5cb     70 3C 1C 00 
1e5cf     00 00 00 00 
1e5d3     00 00 18 18 
1e5d7     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1e5db     18 18 18 00 
1e5df     00 00 00 00 
1e5e3     00 00 18 18 
1e5e7     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1e5eb     18 18 18 0C 
1e5ef     04 00 00 00 
1e5f3     70 38 1C 0E 
1e5f7     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1e5fb     70 00 00 00 
1e5ff     00 00 00 00 
1e603     00 00 7E 7E 
1e607     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1e60b     00 00 00 00 
1e60f     00 00 00 00 | 	byte	$00[8]
1e613     0E 1C 38 70 
1e617     E0 70 38 1C 
1e61b     0E 00 00 00 
1e61f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1e623     7E 66 66 30 
1e627     30 18 18 18 
1e62b     00 18 18 00 
1e62f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1e633     7E 66 66 66 
1e637     66 36 06 66 
1e63b     66 7E 3C 00 
1e63f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1e643     3C 7E 66 66 
1e647     66 7E 7E 66 
1e64b     66 66 66 00 
1e64f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1e653     7E 66 66 7E 
1e657     3E 66 66 66 
1e65b     66 7E 3E 00 
1e65f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1e663     7E 66 66 06 
1e667     06 06 06 66 
1e66b     66 7E 3C 00 
1e66f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1e673     7E 66 66 66 
1e677     66 66 66 66 
1e67b     66 7E 3E 00 
1e67f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1e683     7E 06 06 3E 
1e687     3E 06 06 06 
1e68b     06 7E 7E 00 
1e68f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1e693     7E 06 06 3E 
1e697     3E 06 06 06 
1e69b     06 06 06 00 
1e69f     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1e6a3     7E 06 06 76 
1e6a7     76 66 66 66 
1e6ab     66 7E 3C 00 
1e6af     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1e6b3     66 66 66 7E 
1e6b7     7E 66 66 66 
1e6bb     66 66 66 00 
1e6bf     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1e6c3     7E 18 18 18 
1e6c7     18 18 18 18 
1e6cb     18 7E 7E 00 
1e6cf     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1e6d3     60 60 60 60 
1e6d7     60 60 60    | 	byte	$60[7]
1e6da     66 66 7E 3C 
1e6de     00 00 00 00 
1e6e2     66 66 36 36 
1e6e6     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1e6ea     66 66 C6 C6 
1e6ee     00 00 00 00 
1e6f2     06 06 06 06 
1e6f6     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1e6fa     06 06 7E 7E 
1e6fe     00 00 00 00 
1e702     C6 C6 EE EE 
1e706     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1e70a     C6 C6 C6 C6 
1e70e     00 00 00 00 
1e712     66 66 66 6E 
1e716     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1e71a     76 66 66 66 
1e71e     00 00 00 00 
1e722     3C 7E 66 66 
1e726     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1e72a     66 66 7E 3C 
1e72e     00 00 00 00 
1e732     3E 7E 66 66 
1e736     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1e73a     06 06 06 06 
1e73e     00 00 00 00 
1e742     3C 7E 66 66 
1e746     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1e74a     66 56 3E 6C 
1e74e     00 00 00 00 
1e752     3E 7E 66 66 
1e756     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1e75a     66 66 C6 C6 
1e75e     00 00 00 00 
1e762     7C 7E 06 06 
1e766     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1e76a     60 60 7E 3E 
1e76e     00 00 00 00 
1e772     7E 7E 18 18 
1e776     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1e77a     18 18 18 18 
1e77e     00 00 00 00 
1e782     66 66 66 66 
1e786     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1e78a     66 66 7E 3C 
1e78e     00 00 00 00 
1e792     66 66 66 66 
1e796     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1e79a     3C 3C 18 18 
1e79e     00 00 00 00 
1e7a2     C6 C6 C6 C6 
1e7a6     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1e7aa     FE EE C6 82 
1e7ae     00 00 00 00 
1e7b2     66 66 66 3C 
1e7b6     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1e7ba     3C 66 66 66 
1e7be     00 00 00 00 
1e7c2     66 66 66 66 
1e7c6     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1e7ca     18 18 18 18 
1e7ce     00 00 00 00 
1e7d2     7E 7E 30 30 
1e7d6     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1e7da     06 06 7E 7E 
1e7de     00 00 00 00 
1e7e2     3C 3C 0C 0C 
1e7e6     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1e7ea     0C 0C 3C 3C 
1e7ee     00 00 00 00 
1e7f2     06 06 0C 0C 
1e7f6     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1e7fa     60 60 C0 C0 
1e7fe     00 00 00 00 
1e802     3C 3C 30 30 
1e806     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1e80a     30 30 3C 3C 
1e80e     00 00 00 00 
1e812     18 18 3C 3C 
1e816     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1e81a     00 00 00 00 
1e81e     00 00 00 00 
1e822     00 00 00 00 
1e826     00 00 00 00 
1e82a     00 00       | 	byte	$00[18]
1e82c     FE FE 00 00 
1e830     00 00 0C 0C 
1e834     18 18 00 00 
1e838     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1e83c     00 00 00 00 
1e840     00 00 00 00 
1e844     00          | 	byte	$00[9]
1e845     3C 7C 60 7C 
1e849     7E 66 66 7E 
1e84d     7C 00 00 00 
1e851     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1e855     3E 7E 66 66 
1e859     66 66 66 7E 
1e85d     3E 00 00 00 
1e861     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1e865     3C 3E 06 06 
1e869     06 06 06 7E 
1e86d     7C 00 00 00 
1e871     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1e875     7C 7E 66 66 
1e879     66 66 66 7E 
1e87d     7C 00 00 00 
1e881     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1e885     3C 7E 66 66 
1e889     7E 06 06 7E 
1e88d     7C 00 00 00 
1e891     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1e895     18 7E 7E 18 
1e899     18 18 18 18 
1e89d     18 00 00 00 
1e8a1     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1e8a5     7C 7E 66 66 
1e8a9     66 66 7E 7C 
1e8ad     60 7E 3E 00 
1e8b1     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1e8b5     3E 7E 66 66 
1e8b9     66 66 66 66 
1e8bd     66 00 00 00 
1e8c1     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1e8c5     1C 1C 18 18 
1e8c9     18 18 18 3C 
1e8cd     3C 00 00 00 
1e8d1     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1e8d5     30 30 30 30 
1e8d9     30 30 30 30 
1e8dd     30          | 	byte	$30[9]
1e8de     3E 1E 00 00 
1e8e2     06 06 06 36 
1e8e6     36 1E 1E 1E 
1e8ea     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1e8ee     00 00 00 00 
1e8f2     1C 1C 18 18 
1e8f6     18 18 18 18 
1e8fa     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1e8fe     00 00 00 00 
1e902     00 00 00    | 	byte	$00[7]
1e905     6C FE FE D6 
1e909     D6 C6 C6 C6 
1e90d     C6 00 00 00 
1e911     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1e915     3E 7E 66 66 
1e919     66 66 66 66 
1e91d     66 00 00 00 
1e921     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1e925     3C 7E 66 66 
1e929     66 66 66 7E 
1e92d     3C 00 00 00 
1e931     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1e935     3E 7E 66 66 
1e939     66 66 66 7E 
1e93d     3E 06 06 00 
1e941     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1e945     7C 7E 66 66 
1e949     66 66 66 7E 
1e94d     7C 60 60 00 
1e951     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1e955     3E 7E 66 06 
1e959     06 06 06 06 
1e95d     06 00 00 00 
1e961     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1e965     7C 7E 06 0E 
1e969     3C 70 60 7E 
1e96d     3E 00 00 00 
1e971     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1e975     7E 7E 18 18 
1e979     18 18 18 78 
1e97d     70 00 00 00 
1e981     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1e985     66 66 66 66 
1e989     66 66 66    | 	byte	$66[7]
1e98c     7E 7C 00 00 
1e990     00 00 00 00 
1e994     00 66 66 66 
1e998     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1e99c     18 18 00 00 
1e9a0     00 00 00 00 
1e9a4     00 C6 C6 D6 
1e9a8     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1e9ac     C6 82 00 00 
1e9b0     00 00 00 00 
1e9b4     00 66 66 3C 
1e9b8     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1e9bc     66 66 00 00 
1e9c0     00 00 00 00 
1e9c4     00 66 66 66 
1e9c8     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1e9cc     7C 60 7E 3E 
1e9d0     00 00 00 00 
1e9d4     00 7E 7E 30 
1e9d8     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1e9dc     7E 7E 00 00 
1e9e0     00 00 30 18 
1e9e4     18 18 18 0C 
1e9e8     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1e9ec     18 30 00 00 
1e9f0     00 00 18 18 
1e9f4     18 18 18 18 
1e9f8     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1e9fc     18 18 00 00 
1ea00     00 00 0C 18 
1ea04     18 18 18 30 
1ea08     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1ea0c     18 0C 00 00 
1ea10     00 00 6C 7E 
1ea14     36 00 00 00 
1ea18     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1ea1c     00 00 00 00 
1ea20     00 00 00 00 
1ea24     00          | 	byte	$00[9]
1ea25     18 18 18 18 
1ea29     18 18 00 00 
1ea2d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1ea30     00 00 00 00 
1ea34     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1ea38     00 00 00 00 
1ea3c     00 80 80 80 
1ea40     00 00 00 FF 
1ea44     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1ea48     00 00 00 00 
1ea4c     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1ea4d     80 00 00 00 
1ea51     00 80 00 00 
1ea55     80 80 00 00 
1ea59     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1ea5d     80 00 80 00 
1ea61     00 40 80 00 
1ea65     AA AA AA 00 
1ea69     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1ea6d     FF 00 00 00 
1ea71     00 FF 00 00 
1ea75     FF FF 00 00 
1ea79     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1ea7d     FF 00 FF 00 
1ea81     00 FF FF 00 
1ea85     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1ea88     00 00 00 00 
1ea8c     00          | ataripalette   file "ataripalettep2.def"
1ea8d     11 11 11 00 
1ea91     22 22 22 00 
1ea95     33 33 33 00 
1ea99     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1ea9d     55 55 55 00 
1eaa1     66 66 66 00 
1eaa5     77 77 77 00 
1eaa9     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1eaad     99 99 99 00 
1eab1     AA AA AA 00 
1eab5     BB BB BB 00 
1eab9     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1eabd     DD DD DD 00 
1eac1     EE EE EE 00 
1eac5     FF FF FF 00 
1eac9     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1eacd     00 14 40 00 
1ead1     00 1E 60 00 
1ead5     00 28 80 00 
1ead9     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1eadd     00 3C BF 00 
1eae1     00 46 DF 00 
1eae5     00 50 FF 00 
1eae9     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1eaed     39 77 FF 00 
1eaf1     55 8A FF 00 
1eaf5     71 9E FF 00 
1eaf9     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1eafd     AA C5 FF 00 
1eb01     C6 D8 FF 00 
1eb05     E3 EC FF 00 
1eb09     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1eb0d     00 00 40 00 
1eb11     00 00 60 00 
1eb15     00 00 80 00 
1eb19     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1eb1d     00 00 BF 00 
1eb21     00 00 DF 00 
1eb25     00 00 FF 00 
1eb29     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1eb2d     39 39 FF 00 
1eb31     55 55 FF 00 
1eb35     71 71 FF 00 
1eb39     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1eb3d     AA AA FF 00 
1eb41     C6 C6 FF 00 
1eb45     E3 E3 FF 00 
1eb49     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1eb4d     20 00 40 00 
1eb51     30 00 60 00 
1eb55     40 00 80 00 
1eb59     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1eb5d     60 00 BF 00 
1eb61     70 00 DF 00 
1eb65     80 00 FF 00 
1eb69     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1eb6d     9C 39 FF 00 
1eb71     AA 55 FF 00 
1eb75     B8 71 FF 00 
1eb79     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1eb7d     D5 AA FF 00 
1eb81     E3 C6 FF 00 
1eb85     F1 E3 FF 00 
1eb89     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1eb8d     40 00 40 00 
1eb91     60 00 60 00 
1eb95     80 00 80 00 
1eb99     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1eb9d     BF 00 BF 00 
1eba1     DF 00 DF 00 
1eba5     FF 00 FF 00 
1eba9     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1ebad     FF 39 FF 00 
1ebb1     FF 55 FF 00 
1ebb5     FF 71 FF 00 
1ebb9     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1ebbd     FF AA FF 00 
1ebc1     FF C6 FF 00 
1ebc5     FF E3 FF 00 
1ebc9     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1ebcd     40 00 20 00 
1ebd1     60 00 30 00 
1ebd5     80 00 40 00 
1ebd9     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1ebdd     BF 00 60 00 
1ebe1     DF 00 70 00 
1ebe5     FF 00 80 00 
1ebe9     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1ebed     FF 39 9C 00 
1ebf1     FF 55 AA 00 
1ebf5     FF 71 B8 00 
1ebf9     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1ebfd     FF AA D5 00 
1ec01     FF C6 E3 00 
1ec05     FF E3 F1 00 
1ec09     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1ec0d     40 00 00 00 
1ec11     60 00 00 00 
1ec15     80 00 00 00 
1ec19     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1ec1d     BF 00 00 00 
1ec21     DF 00 00 00 
1ec25     FF 00 00 00 
1ec29     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1ec2d     FF 39 39 00 
1ec31     FF 55 55 00 
1ec35     FF 71 71 00 
1ec39     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1ec3d     FF AA AA 00 
1ec41     FF C6 C6 00 
1ec45     FF E3 E3 00 
1ec49     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1ec4d     40 10 00 00 
1ec51     60 18 00 00 
1ec55     80 20 00 00 
1ec59     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1ec5d     BF 30 00 00 
1ec61     DF 38 00 00 
1ec65     FF 40 00 00 
1ec69     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1ec6d     FF 6A 39 00 
1ec71     FF 80 55 00 
1ec75     FF 95 71 00 
1ec79     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1ec7d     FF BF AA 00 
1ec81     FF D5 C6 00 
1ec85     FF EA E3 00 
1ec89     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1ec8d     40 20 00 00 
1ec91     60 30 00 00 
1ec95     80 40 00 00 
1ec99     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1ec9d     BF 60 00 00 
1eca1     DF 70 00 00 
1eca5     FF 80 00 00 
1eca9     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1ecad     FF 9C 39 00 
1ecb1     FF AA 55 00 
1ecb5     FF B8 71 00 
1ecb9     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1ecbd     FF D5 AA 00 
1ecc1     FF E3 C6 00 
1ecc5     FF F1 E3 00 
1ecc9     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1eccd     40 30 00 00 
1ecd1     60 48 00 00 
1ecd5     80 60 00 00 
1ecd9     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1ecdd     BF 90 00 00 
1ece1     DF A8 00 00 
1ece5     FF C0 00 00 
1ece9     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1eced     FF CE 39 00 
1ecf1     FF D5 55 00 
1ecf5     FF DC 71 00 
1ecf9     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1ecfd     FF EA AA 00 
1ed01     FF F1 C6 00 
1ed05     FF F8 E3 00 
1ed09     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1ed0d     30 40 00 00 
1ed11     48 60 00 00 
1ed15     60 80 00 00 
1ed19     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1ed1d     90 BF 00 00 
1ed21     A8 DF 00 00 
1ed25     C0 FF 00 00 
1ed29     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1ed2d     CE FF 39 00 
1ed31     D5 FF 55 00 
1ed35     DC FF 71 00 
1ed39     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1ed3d     EA FF AA 00 
1ed41     F1 FF C6 00 
1ed45     F8 FF E3 00 
1ed49     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1ed4d     00 40 00 00 
1ed51     00 60 00 00 
1ed55     00 80 00 00 
1ed59     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1ed5d     00 BF 00 00 
1ed61     00 DF 00 00 
1ed65     00 FF 00 00 
1ed69     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1ed6d     39 FF 39 00 
1ed71     55 FF 55 00 
1ed75     71 FF 71 00 
1ed79     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1ed7d     AA FF AA 00 
1ed81     C6 FF C6 00 
1ed85     E3 FF E3 00 
1ed89     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1ed8d     00 40 14 00 
1ed91     00 60 1E 00 
1ed95     00 80 28 00 
1ed99     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1ed9d     00 BF 3C 00 
1eda1     00 DF 46 00 
1eda5     00 FF 50 00 
1eda9     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1edad     39 FF 77 00 
1edb1     55 FF 8A 00 
1edb5     71 FF 9E 00 
1edb9     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1edbd     AA FF C5 00 
1edc1     C6 FF D8 00 
1edc5     E3 FF EC 00 
1edc9     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1edcd     00 40 28 00 
1edd1     00 60 3C 00 
1edd5     00 80 50 00 
1edd9     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1eddd     00 BF 78 00 
1ede1     00 DF 8C 00 
1ede5     00 FF A0 00 
1ede9     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1eded     39 FF B5 00 
1edf1     55 FF C0 00 
1edf5     71 FF CA 00 
1edf9     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1edfd     AA FF DF 00 
1ee01     C6 FF EA 00 
1ee05     E3 FF F4 00 
1ee09     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1ee0d     00 40 40 00 
1ee11     00 60 60 00 
1ee15     00 80 80 00 
1ee19     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1ee1d     00 BF BF 00 
1ee21     00 DF DF 00 
1ee25     00 FF FF 00 
1ee29     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1ee2d     39 FF FF 00 
1ee31     55 FF FF 00 
1ee35     71 FF FF 00 
1ee39     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1ee3d     AA FF FF 00 
1ee41     C6 FF FF 00 
1ee45     E3 FF FF 00 
1ee49     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1ee4d     00 28 40 00 
1ee51     00 3C 60 00 
1ee55     00 50 80 00 
1ee59     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1ee5d     00 78 BF 00 
1ee61     00 8C DF 00 
1ee65     00 A0 FF 00 
1ee69     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1ee6d     39 B5 FF 00 
1ee71     55 C0 FF 00 
1ee75     71 CA FF 00 
1ee79     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1ee7d     AA DF FF 00 
1ee81     C6 EA FF 00 
1ee85     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1ee88                 | '**********************************************************************************
1ee88                 | '
1ee88                 | '        Timings and colors definitions
1ee88                 | '
1ee88                 | '**********************************************************************************
1ee88                 | 
1ee88                 |    'streamer sets for text mode, to add to timings[0..5]
1ee88                 | ' todo for the retromachine: 768x576
1ee88                 | 
1ee88                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1ee88     10 00 00 00 
1ee8c     50 00 00 00 
1ee90     14 00 00 00 
1ee94     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ee98     70 00 00 00 
1ee9c     08 00 00 00 
1eea0     30 00 00 00 
1eea4     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1eea8     10 00 00 00 
1eeac     10 00 00 00 
1eeb0     00 00 00 00 
1eeb4     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1eeb8     E0 01 00 00 
1eebc     F6 32 24 15 
1eec0     FB 6C C3 01 
1eec4     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1eec8                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1eec8                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1eec8     30 00 00 00 
1eecc     50 00 00 00 
1eed0     34 00 00 00 
1eed4     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1eed8     20 00 00 00 
1eedc     08 00 00 00 
1eee0     16 00 00 00 
1eee4     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1eee8     24 00 00 00 
1eeec     18 00 00 00 
1eef0     40 00 00 00 
1eef4     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1eef8     F0 01 00 00 
1eefc     F6 32 24 15 
1ef00     FB 6C C3 01 
1ef04     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1ef08                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1ef08     10 00 00 00 
1ef0c     40 00 00 00 
1ef10     10 00 00 00 
1ef14     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1ef18     08 00 00 00 
1ef1c     08 00 00 00 
1ef20     08 00 00 00 
1ef24     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1ef28     40 00 00 00 
1ef2c     20 00 00 00 
1ef30     80 00 00 00 
1ef34     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1ef38     E0 01 00 00 
1ef3c     70 AE E9 10 
1ef40     FB 8B FF 01 
1ef44     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1ef48     10 00 00 00 
1ef4c     42 00 00 00 
1ef50     14 00 00 00 
1ef54     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ef58     00 00 00 00 
1ef5c     08 00 00 00 
1ef60     00 00 00 00 
1ef64     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1ef68     10 00 00 00 
1ef6c     10 00 00 00 
1ef70     C0 00 00 00 
1ef74     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1ef78     40 02 00 00 
1ef7c     F6 32 24 15 
1ef80     FB 6C C3 01 
1ef84     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ef88     50 00 00 00 
1ef8c     A0 00 00 00 
1ef90     54 00 00 00 
1ef94     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1ef98     08 00 00 00 
1ef9c     08 00 00 00 
1efa0     08 00 00 00 
1efa4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1efa8     0C 00 00 00 
1efac     08 00 00 00 
1efb0     00 01 00 00 
1efb4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1efb8     E0 01 00 00 
1efbc     10 06 56 15 
1efc0     FB 64 C3 01 
1efc4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1efc8     50 00 00 00 
1efcc     32 00 00 00 
1efd0     50 00 00 00 
1efd4     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1efd8     08 00 00 00 
1efdc     08 00 00 00 
1efe0     08 00 00 00 
1efe4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1efe8     0C 00 00 00 
1efec     08 00 00 00 
1eff0     40 01 00 00 
1eff4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1eff8     E0 01 00 00 
1effc     F2 CD 33 13 
1f000     FB 53 92 01 
1f004     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1f008     18 00 00 00 
1f00c     30 00 00 00 
1f010     18 00 00 00 
1f014     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1f018     08 00 00 00 
1f01c     08 00 00 00 
1f020     08 00 00 00 
1f024     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1f028     0C 00 00 00 
1f02c     08 00 00 00 
1f030     80 01 00 00 
1f034     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1f038     E0 01 00 00 
1f03c     F4 8F 11 11 
1f040     FB 3A 55 01 
1f044     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1f048     20 00 00 00 
1f04c     40 00 00 00 
1f050     22 00 00 00 
1f054     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1f058     00 00 00 00 
1f05c     08 00 00 00 
1f060     00 00 00 00 
1f064     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1f068     0C 00 00 00 
1f06c     08 00 00 00 
1f070     C0 01 00 00 
1f074     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1f078     F0 01 00 00 
1f07c     F2 CD 33 13 
1f080     FB 53 92 01 
1f084     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1f088                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1f088     00 75 C7 97 
1f08c     27 47 F6 0A 
1f090     05 79 CB 9B 
1f094     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1f098                 | 
1f098     28 12 64 FD | hdmi            setq    #9
1f09c     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1f0a0                 |            '     setq2   #255
1f0a0                 |             '    rdlong  $100, paletteptr 
1f0a0     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1f0a4     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1f0a8     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1f0ac     78 F9 02 F1 |                 add     ii,hbase
1f0b0     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1f0b4     7B 0B 80 FF 
1f0b8     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1f0bc                 | 
1f0bc     66 66 86 FF 
1f0c0     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1f0c4                 | 
1f0c4                 | 
1f0c4                 | ''--------  frame rendering main loop  ---------------------------------------------------
1f0c4                 | 
1f0c4                 | p101
1f0c4     28 14 64 FD |                 setq    #10
1f0c8     00 DF 06 FB |                 rdlong  framebuf,  ptra
1f0cc     28 1E 64 FD |                 setq    #15
1f0d0     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1f0d4     71 99 02 FB |                 rdlong  border,borderptr
1f0d8                 | 
1f0d8     01 C4 06 F1 |                 add     frames,#1
1f0dc     76 F5 02 F6 |                 mov     dlptr2,dlptr
1f0e0                 | 
1f0e0     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1f0e4     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1f0e8     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1f0ec     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1f0f0                 |  '' up porch
1f0f0                 | 
1f0f0     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1f0f4     49 FF 02 F6 |                 mov     hsync1,sync_001
1f0f8     37 A8 46 FB |                 callpa  i_upporch ,#blank
1f0fc     72 01 68 FC |                 wrlong  #0,vblankptr
1f100                 |                 
1f100     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1f104     29 FE 65 3D |          if_nc  setq2   #255
1f108     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1f10c                 | 
1f10c                 | '' cursor blinking
1f10c                 | 
1f10c     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1f110     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1f114                 | 
1f114                 | '' main screen
1f114                 | 
1f114     00 BE 06 F6 |                 mov linenum,#0
1f118     00 18 07 F6 |                 mov rcnt,#0
1f11c     00 1C 07 F6 |                 mov rcnt2a,#0
1f120                 | 
1f120                 | 
1f120     00 18 0F F2 | p301            cmp rcnt,#0 wz
1f124     18 00 90 AD |         if_z    jmp #p306
1f128     01 18 87 F1 |                 sub rcnt,#1
1f12c     90 F7 02 F6 |                 mov dl,rdl
1f130     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1f134     8F F7 02 A1 |    if_z        add dl,roffset  
1f138     7B 21 03 F6 |                 mov rdl,dl
1f13c     04 00 90 FD |                 jmp #p307          
1f140                 |           
1f140                 |                 
1f140     7A F7 02 FB | p306            rdlong  dl,dlptr2
1f144     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1f148     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1f14c     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1f150                 | 
1f150                 | '' Special entry:
1f150                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1f150                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1f150                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1f150                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1f150                 | '' todo: set horizontal scroll (if needed)
1f150                 | 
1f150     02 FA 66 F0 |                 shl framebuf2,#2
1f154     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1f158     04 22 0F F2 |                 cmp dlc,#%100 wz
1f15c                 |   
1f15c                 |                 
1f15c     04 F4 06 F1 |                 add dlptr2,#4
1f160     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1f164     7A 21 03 FB |                  rdlong rdl,dlptr2
1f168     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1f16c     04 18 47 F0 |                  shr rcnt,#4
1f170                 |              
1f170     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1f174     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1f178                 |                 
1f178     04 1E 47 F0 |                  shr roffset,#4
1f17c     0C 1E 67 F0 |                  shl roffset,#12
1f180                 |   
1f180     9C FF 9F FD |                  jmp #p301
1f184                 |                  
1f184                 |                  
1f184                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1f184     0C FA 46 F0 |                 shr     framebuf2,#12
1f188     02 FA 66 F0 |                 shl     framebuf2,#2
1f18c                 | 
1f18c     7B 03 E3 F8 |                 getbyte t1,dl,#0
1f190     00 02 0F F2 |                 cmp     t1,#0 wz
1f194     34 00 90 AD |     if_z        jmp     #borderline
1f198                 | 
1f198     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1f19c     50 00 90 CD |           if_c   jmp     #textline
1f1a0     50 02 90 3D |           if_nc  jmp     #graphline
1f1a4                 | '
1f1a4     01 BE 06 F1 | p302            add     linenum,#1
1f1a8     04 F4 06 F1 |                 add     dlptr2,#4
1f1ac     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1f1b0     6C FF 9F 5D |          if_nz  jmp     #p301
1f1b4                 | 
1f1b4     72 03 68 FC | p112            wrlong  #1,vblankptr
1f1b8     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1f1bc                 | 
1f1bc     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1f1c0     4B FF 02 F6 |                 mov     hsync1,sync_223
1f1c4     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1f1c8     F8 FE 9F FD |                 jmp     #p101
1f1cc                 | 
1f1cc                 | '' ---------------  END of frame rendering loop -------------------------------------------
1f1cc                 | 
1f1cc                 | 
1f1cc     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1f1d0     4C A1 C2 FC |                 xcont   m_vi,border
1f1d4     CC FF 9F FD |                 jmp     #p302
1f1d8                 | 
1f1d8                 | 
1f1d8     08 00 B0 FD | blank           call    #hsync                          'blank lines
1f1dc     7E A1 C2 FC |                 xcont   m_vi,hsync0
1f1e0     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1f1e4                 | 
1f1e4     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1f1e8     7F 9D B2 FC |                 xzero   m_sn,hsync1
1f1ec     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1f1f0                 | 
1f1f0                 | 
1f1f0                 | 
1f1f0                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1f1f0                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1f1f0                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1f1f0                 | 
1f1f0                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1f1f0                 | 
1f1f0     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1f1f4                 | 
1f1f4     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1f1f8     7B 17 5B F8 |                 getnib  zoom, dl,#3
1f1fc     03 16 07 F5 |                 and             zoom, #3
1f200                 | 
1f200                 | 
1f200                 | 
1f200     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1f204     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1f208     3F BC 06 F5 |                 and     linestart,#63
1f20c     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1f210     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1f214                 | 
1f214     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1f218                 | 
1f218                 |                        ' if fontline =0, get a border color
1f218                 | 
1f218     51 03 33 F9 | p102            getword t1,m_border,#0
1f21c     00 02 0F F2 |                 cmp     t1, #0 wz
1f220     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1f224                 | 
1f224     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1f228     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1f22c     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1f230     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1f234     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1f238     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1f23c     52 BB 02 F6 |                 mov m_lut2, m_lut1
1f240     6A BB 02 F1 |                 add m_lut2, lutt1
1f244     58 0F 03 F6 |                 mov cpl2,i_cpl
1f248                 | 
1f248     02 16 0F F2 |                cmp zoom,#2 wz
1f24c     E4 00 90 AD |           if_z jmp #p420
1f250     01 16 0F F2 |                cmp zoom,#1 wz
1f254     64 00 90 AD |           if_z jmp #p410
1f258     00 16 0F F2 |                 cmp zoom,#0 wz
1f25c     04 00 90 AD |           if_z jmp #p400
1f260     50 01 90 FD |                jmp #p430
1f264                 | 
1f264                 |                    '
1f264                 |  ''---------------------------------------------------------------------------------------------------------
1f264     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1f268     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1f26c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1f270     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1f274     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1f278     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1f27c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1f280     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1f284     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1f288     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1f28c                 | 
1f28c     81 BB C2 FC |                         xcont m_lut2,t1
1f290                 | 
1f290     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1f294     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1f298     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1f29c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1f2a0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1f2a4     01 C0 86 F1 |                         sub     lutaddr,#1
1f2a8                 | 
1f2a8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1f2ac     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1f2b0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1f2b4                 | 
1f2b4     EB 0F 6F FB |                         djnz   cpl2,#p400
1f2b8     28 01 90 FD |  p401                   jmp    #p103
1f2bc                 | 
1f2bc                 | ''------------------------------------------------------------------------------------------------------------
1f2bc                 | 
1f2bc     01 0E 47 F0 |  p410                   shr cpl2,#1
1f2c0                 | 
1f2c0                 | ''---------------------------------------------------------------------------------------------------------
1f2c0     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1f2c4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1f2c8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1f2cc     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1f2d0     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1f2d4     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1f2d8     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1f2dc     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1f2e0     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1f2e4     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1f2e8                 | 
1f2e8                 | 
1f2e8     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1f2ec     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1f2f0     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1f2f4     03 02 07 FA |                         mul t1,#3
1f2f8     81 BB C2 FC |                         xcont m_lut2,t1
1f2fc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1f300     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1f304     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1f308     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1f30c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1f310     01 C0 86 F1 |                         sub     lutaddr,#1
1f314     63 06 63 FD |                         mergew t3
1f318     03 06 07 FA |                         mul t3,#3
1f31c     83 BB C2 FC |                         xcont m_lut2,t3
1f320                 | 
1f320     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1f324     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1f328                 | 
1f328     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1f32c                 | 
1f32c     E4 0F 6F FB |                         djnz   cpl2,#p412
1f330     B0 00 90 FD |  p411                   jmp    #p103
1f334                 | 
1f334                 | ''------------------------------------------------------------------------------------------------------------
1f334                 | 
1f334     02 0E 47 F0 |  p420                   shr cpl2,#2
1f338                 | 
1f338                 | ''---------------------------------------------------------------------------------------
1f338     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1f33c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1f340     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1f344     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1f348     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1f34c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1f350     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1f354     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1f358     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1f35c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1f360                 | 
1f360     61 02 63 FD |                         mergeb t1
1f364     81 07 3B F9 |                         getword t3,t1,#1
1f368     0F 02 07 FA |                         mul t1,#15
1f36c     81 BB C2 FC |                         xcont m_lut2,t1
1f370                 | 
1f370     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1f374     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1f378     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1f37c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1f380     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1f384     01 C0 86 F1 |                         sub     lutaddr,#1
1f388                 | 
1f388     81 09 EB F8 |                         getbyte t4,t1,#1        '
1f38c     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1f390                 | 
1f390     0F 06 07 FA |                         mul t3,#15
1f394     83 BB C2 FC |                         xcont m_lut2,t3
1f398                 | 
1f398     83 0B EB F8 |                         getbyte t5,t3,#1
1f39c     85 BB C2 FC |                         xcont m_lut2, t5
1f3a0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1f3a4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1f3a8                 | 
1f3a8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1f3ac                 | 
1f3ac     E2 0F 6F FB |                         djnz   cpl2,#p422
1f3b0     30 00 90 FD |  p421                   jmp    #p103
1f3b4                 | 
1f3b4                 | '--------------------------------------------------------------------------------------------------------------
1f3b4                 | 
1f3b4     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1f3b8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1f3bc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1f3c0                 | 
1f3c0     00 BA C6 FC |                         xcont m_lut2,#0
1f3c4                 | 
1f3c4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1f3c8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1f3cc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1f3d0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1f3d4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1f3d8     01 C0 86 F1 |                         sub     lutaddr,#1
1f3dc                 | 
1f3dc     F5 0F 6F FB |                         djnz   cpl2,#p430
1f3e0     00 00 90 FD |  p431                   jmp    #p103
1f3e4                 | 
1f3e4                 | ''------------------------------------------------------------------------------------------------------------
1f3e4                 | 
1f3e4                 | 
1f3e4                 | 
1f3e4     51 25 33 F9 | p103            getword  mb2,m_border,#0
1f3e8     00 24 0F F2 |                 cmp      mb2, #0 wz
1f3ec     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1f3f0                 | 
1f3f0     B0 FD 9F FD |                 jmp #p302
1f3f4                 | 
1f3f4                 | '' -------------------------------------- END of text line ---------------------------------
1f3f4                 | 
1f3f4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1f3f4                 | 
1f3f4     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1f3f8                 | 
1f3f8                 | 
1f3f8     51 25 33 F9 | p202            getword mb2,m_border,#0
1f3fc     00 24 0F F2 |                 cmp     mb2, #0 wz
1f400     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1f404                 | 
1f404                 | '----------------------------------------- display pixels
1f404                 | 
1f404     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1f408     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1f40c                 | 
1f40c     7B 17 5B F8 |                 getnib  zoom, dl,#3
1f410     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1f414                 | 
1f414     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1f418     0C BC 06 F5 |                 and     colordepth,#12
1f41c                 | 
1f41c     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1f420     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1f424     64 00 90 AD |           if_z  jmp     #p240
1f428                 | 
1f428     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1f42c     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1f430     98 00 90 AD |           if_z  jmp     #p250
1f434                 | 
1f434     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1f438     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1f43c     FC 00 90 AD |           if_z  jmp     #p260
1f440                 | 
1f440     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1f444                 | 
1f444                 | '' --- 8 bit color modes
1f444                 | 
1f444     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1f448     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1f44c                 | 
1f44c     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1f450     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1f454                 |        
1f454                 |  '  
1f454     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1f458     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1f45c                 |     
1f45c                 |  
1f45c     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1f460     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1f464                 |         
1f464                 | 
1f464                 |         
1f464     7D 11 03 FB | p235               rdlong  char,framebuf2
1f468     32 0C 63 FD |                    skipf skippattern
1f46c     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1f470     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1f474     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1f478     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1f47c     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1f480     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1f484     F7 0F 6F FB |                    djnz    cpl2,#p235
1f488                 | 
1f488     20 01 90 FD |                jmp    #p203
1f48c                 |                   
1f48c                 | 
1f48c                 | 
1f48c                 | '' --- 1 bit color modes
1f48c                 | 
1f48c     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1f490     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1f494                 | 
1f494     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1f498     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1f49c     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1f4a0                 | 
1f4a0                 | 
1f4a0     7D 11 E3 FA | p241               rdword  char,framebuf2
1f4a4     44 10 FF F9 |                    movbyts char,#%01000100
1f4a8     63 10 63 FD |                    mergew  char
1f4ac     32 0C 63 FD |                    skipf skippattern
1f4b0     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1f4b4     63 10 63 FD |                    mergew  char                    ' 1 0
1f4b8     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1f4bc     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1f4c0     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1f4c4     F6 0F 6F FB |                    djnz   cpl2,#p241
1f4c8                 | 
1f4c8                 | 
1f4c8     E0 00 90 FD |                jmp    #p203
1f4cc                 | 
1f4cc                 | '' --- 2 bit color modes
1f4cc                 | 
1f4cc     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1f4d0     C8 00 90 AD |        if_z   jmp #p251
1f4d4                 | 
1f4d4     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1f4d8     30 00 90 AD |        if_z   jmp #p252
1f4dc                 | 
1f4dc                 | 
1f4dc     7D 11 C3 FA | p254               rdbyte char,framebuf2
1f4e0     04 0A 07 F6 |                    mov  t5,#4
1f4e4     02 10 67 F0 | p255               shl  char,#2
1f4e8     88 03 53 F8 |                    getnib  t1,char,#2
1f4ec     03 02 07 F5 |                    and     t1,#3
1f4f0     55 02 07 FA |                    mul     t1,#$55
1f4f4     81 05 03 F9 |                    rolbyte  t2,t1,#0
1f4f8     FA 0B 6F FB |                    djnz    t5,#p255
1f4fc     82 BB C2 FC |                    xcont   m_lut2,t2
1f500     01 FA 06 F1 |                    add     framebuf2,#1
1f504     F5 0F 6F FB |                    djnz    cpl2,#p254
1f508     A0 00 90 FD |                    jmp     #p203
1f50c                 | 
1f50c     7D 11 E3 FA | p252               rdword char,framebuf2
1f510     08 0A 07 F6 |                    mov  t5,#8
1f514     02 10 67 F0 | p253               shl  char,#2
1f518     88 03 63 F8 |                    getnib  t1,char,#4
1f51c     03 02 07 F5 |                    and     t1,#3
1f520     05 02 07 FA |                    mul     t1,#5
1f524     81 05 83 F8 |                    rolnib  t2,t1,#0
1f528     FA 0B 6F FB |                    djnz    t5,#p253
1f52c     82 BB C2 FC |                    xcont   m_lut2,t2
1f530     02 FA 06 F1 |                    add     framebuf2,#2
1f534     F5 0F 6F FB |                    djnz    cpl2,#p252
1f538     70 00 90 FD |                    jmp     #p203
1f53c                 | 
1f53c                 | '' ------ 4 bit color modes
1f53c                 | 
1f53c     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1f540     58 00 90 AD |        if_z   jmp #p251
1f544                 | 
1f544     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1f548     2C 00 90 AD |        if_z   jmp #p262
1f54c                 | 
1f54c                 | 
1f54c     7D 11 C3 FA | p263               rdbyte char,framebuf2
1f550     02 0A DC FC |                            rep #5,#2
1f554     88 05 8B F8 |                              rolnib t2,char,#1
1f558     88 05 8B F8 |                                  rolnib t2,char,#1
1f55c     88 05 8B F8 |                              rolnib t2,char,#1
1f560     88 05 8B F8 |                                  rolnib t2,char,#1
1f564     04 10 67 F0 |                              shl char,#4
1f568     82 BB C2 FC |                    xcont   m_lut2,t2
1f56c     01 FA 06 F1 |                    add     framebuf2,#1
1f570     F6 0F 6F FB |                    djnz    cpl2,#p263
1f574     34 00 90 FD |                    jmp     #p203
1f578                 | 
1f578     7D 11 E3 FA | p262               rdword  char,framebuf2
1f57c     04 06 DC FC |                            rep #3,#4
1f580     88 05 9B F8 |                              rolnib t2,char,#3
1f584     88 05 9B F8 |                                  rolnib t2,char,#3
1f588     04 10 67 F0 |                              shl char,#4
1f58c     82 BB C2 FC |                    xcont   m_lut2,t2
1f590     02 FA 06 F1 |                    add     framebuf2,#2
1f594     F8 0F 6F FB |                    djnz    cpl2,#p262
1f598     10 00 90 FD |                    jmp     #p203
1f59c                 | 
1f59c                 | ''---------- all color modes without zoom
1f59c                 | 
1f59c     87 07 D8 FC | p251               rep  #3,cpl2
1f5a0     7D 11 03 FB |                    rdlong  char,framebuf2
1f5a4     04 FA 06 F1 |                    add     framebuf2,#4
1f5a8     88 BB C2 FC |                    xcont   m_lut2,char
1f5ac                 |           
1f5ac                 |  ''-----------------------------------------------------------------------------------------
1f5ac                 | p203           ' getword  mb2,m_border,#0
1f5ac     00 24 0F F2 |                 cmp      mb2, #0 wz
1f5b0     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1f5b4                 | 
1f5b4     EC FB 9F FD |                 jmp #p302
1f5b8                 | 
1f5b8                 | '' -------------------------------------- END of graph  line ---------------------------------
1f5b8                 | 
1f5b8                 | '' consts and vars
1f5b8                 | 
1f5b8     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1f5bc     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1f5c0     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1f5c4     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1f5c8                 | 
1f5c8     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1f5cc                 | 
1f5cc                 | '------ these longs will be set by setmode function
1f5cc                 | 
1f5cc     00 00 00 00 | m_bs            long    0        'blanks before sync
1f5d0     00 00 00 00 | m_sn            long    0        'sync
1f5d4     00 00 00 00 | m_bv            long    0        'blanks before visible
1f5d8     00 00 00 00 | m_vi            long    0        'visible pixels #
1f5dc     00 00 00 00 | m_border        long    0        'left/right borders
1f5e0     00 00 00 00 | m_lut1          long    0        'characters
1f5e4     00 00 00 00 | i_vborder       long    0        'up/down borders
1f5e8     00 00 00 00 | i_upporch       long    0        'up porch lines
1f5ec     00 00 00 00 | i_vsync         long    0        'vsync lines
1f5f0     00 00 00 00 | i_downporch     long    0        'down porch lines
1f5f4     00 00 00 00 | i_modenum       long    0        'mode #
1f5f8     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1f5fc     00 00 00 00 | i_lines         long    0        'scanlines #
1f600     00 00 00 00 | i_clock         long    0
1f604     00 00 00 00 | i_hubset        long    0
1f608     00 00 00 00 | i_totalvis      long    0
1f60c                 | 
1f60c                 | '-------------------------------------
1f60c                 | 
1f60c     00 00 00 00 | m_lut2          long    0
1f610                 | 
1f610                 | colordepth
1f610     00 00 00 00 | linestart       long    0
1f614     00 00 00 00 | linenum         long    0
1f618     00 01 00 00 | lutaddr         long    256
1f61c                 | 
1f61c     0E 00 00 00 | cursorsh        long    14
1f620     00 00 00 00 | frames          long    0
1f624     00 00 00 00 | cursorx         long    0
1f628     00 00 00 00 | cursory         long    0
1f62c     00 00 00 00 | cursorpos       long    0
1f630     00 00 00 00 | cursorpos2      long    0
1f634     00 00 00 00 | fontstart       long    0
1f638     00 00 00 00 | border2         long 0
1f63c     00 00 81 70 | lutiv           long $70810000
1f640     00 00 88 00 | lutt1           long $00880000
1f644     00 00 80 00 | lutg1           long $00800000
1f648     00 00 80 10 | lutg2           long $10800000
1f64c     00 00 80 20 | lutg4           long $20800000
1f650     00 00 80 30 | lutg8           long $30800000
1f654     00 00 00 00 | framebuf        long 0
1f658     00 00 00 00 | fontbuf         long 0
1f65c     00 00 00 00 | borderptr       long 0
1f660     00 00 00 00 | vblankptr       long 0
1f664     00 00 00 00 | cursorptr       long 0
1f668     00 00 00 00 | modeptr         long 0
1f66c     00 00 00 00 | paletteptr      long 0
1f670     00 00 00 00 | dlptr           long 0
1f674                 | fontnumptr      res     1
1f674                 | fontnumptr      res     1
1f674                 | hbase           res     1
1f674                 | hbase           res     1
1f674                 | borderptr2      res     1
1f674                 | borderptr2      res     1
1f674                 | dlptr2 res 1
1f674                 | dlptr2 res 1
1f674                 | dl              res 1
1f674                 | dl              res 1
1f674                 | ii              res     1
1f674                 | ii              res     1
1f674                 | framebuf2       res     1
1f674                 | framebuf2       res     1
1f674                 | hsync0          res     1
1f674                 | hsync0          res     1
1f674                 | hsync1          res     1
1f674                 | hsync1          res     1
1f674                 | fontline        res     1
1f674                 | fontline        res     1
1f674                 | t1              res     1
1f674                 | t1              res     1
1f674                 | t2              res     1
1f674                 | t2              res     1
1f674                 | t3 res 1
1f674                 | t3 res 1
1f674                 | t4 res 1
1f674                 | t4 res 1
1f674                 | t5 res 1
1f674                 | t5 res 1
1f674                 | skippattern res 1
1f674                 | skippattern res 1
1f674                 | cpl2 res 1
1f674                 | cpl2 res 1
1f674                 | char            res     1
1f674                 | char            res     1
1f674                 | backcolor       res     1
1f674                 | backcolor       res     1
1f674                 | charcolor       res     1
1f674                 | charcolor       res     1
1f674                 | zoom res 1
1f674                 | zoom res 1
1f674     00 00 00 00 | rcnt long 0 'dl repeat count
1f678     00 00 00 00 | rcnt2 long 0
1f67c     00 00 00 00 | rcnt2a long 0
1f680     00 00 00 00 | roffset long 0
1f684     00 00 00 00 | rdl long 0  'dl repeat line
1f688     00 00 00 00 | dlc long 0 'dl command
1f68c     00 00 00 00 | mb2 long 0
1f690     00 00 00 00 | aend             long 0
1f694                 |                 fit     496                     '
1f694                 | _trackerplayer_spin2_dat_
1f694                 | 
1f694     00 00 00 00 | null             long  0
1f698     46 52 45 51 
1f69c     46 52 45 51 
1f6a0     46 52 45 51 
1f6a4     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1f6a8     46 52 45 51 
1f6ac     46 52 45 51 
1f6b0     46 52 45 51 
1f6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6b8     46 52 45 51 
1f6bc     46 52 45 51 
1f6c0     46 52 45 51 
1f6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6c8     46 52 45 51 
1f6cc     46 52 45 51 
1f6d0     46 52 45 51 
1f6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6d8     46 52 45 51 
1f6dc     46 52 45 51 
1f6e0     46 52 45 51 
1f6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6e8     46 52 45 51 
1f6ec     46 52 45 51 
1f6f0     46 52 45 51 
1f6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6f8     46 52 45 51 
1f6fc     46 52 45 51 
1f700     46 52 45 51 
1f704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f708     46 52 45 51 
1f70c     46 52 45 51 
1f710     46 52 45 51 
1f714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f718     46 52 45 51 
1f71c     46 52 45 51 
1f720     46 52 45 51 
1f724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f728     46 52 45 51 
1f72c     46 52 45 51 
1f730     46 52 45 51 
1f734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f738     46 52 45 51 
1f73c     46 52 45 51 
1f740     46 52 45 51 
1f744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f748     46 52 45 51 
1f74c     46 52 45 51 
1f750     46 52 45 51 
1f754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f758     46 52 45 51 
1f75c     46 52 45 51 
1f760     46 52 45 51 
1f764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f768     46 52 45 51 
1f76c     46 52 45 51 
1f770     46 52 45 51 
1f774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f778     46 52 45 51 
1f77c     46 52 45 51 
1f780     46 52 45 51 
1f784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f788     46 52 45 51 
1f78c     46 52 45 51 
1f790     46 52 45 51 
1f794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f798     46 52 45 51 
1f79c     46 52 45 51 
1f7a0     46 52 45 51 
1f7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7a8     46 52 45 51 
1f7ac     46 52 45 51 
1f7b0     46 52 45 51 
1f7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7b8     46 52 45 51 
1f7bc     46 52 45 51 
1f7c0     46 52 45 51 
1f7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7c8     46 52 45 51 
1f7cc     46 52 45 51 
1f7d0     46 52 45 51 
1f7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7d8     46 52 45 51 
1f7dc     46 52 45 51 
1f7e0     46 52 45 51 
1f7e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7e8     46 52 45 51 
1f7ec     46 52 45 51 
1f7f0     46 52 45 51 
1f7f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7f8     46 52 45 51 
1f7fc     46 52 45 51 
1f800     46 52 45 51 
1f804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f808     46 52 45 51 
1f80c     46 52 45 51 
1f810     46 52 45 51 
1f814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f818     46 52 45 51 
1f81c     46 52 45 51 
1f820     46 52 45 51 
1f824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f828     46 52 45 51 
1f82c     46 52 45 51 
1f830     46 52 45 51 
1f834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f838     46 52 45 51 
1f83c     46 52 45 51 
1f840     46 52 45 51 
1f844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f848     46 52 45 51 
1f84c     46 52 45 51 
1f850     46 52 45 51 
1f854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f858     46 52 45 51 
1f85c     46 52 45 51 
1f860     46 52 45 51 
1f864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f868     46 52 45 51 
1f86c     46 52 45 51 
1f870     46 52 45 51 
1f874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f878     46 52 45 51 
1f87c     46 52 45 51 
1f880     46 52 45 51 
1f884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f888     46 52 45 51 
1f88c     46 52 45 51 
1f890     46 52 45 51 
1f894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f898     46 52 45 51 
1f89c     46 52 45 51 
1f8a0     46 52 45 51 
1f8a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f8a8     46 52 45 51 
1f8ac     46 52 45 51 
1f8b0     46 52 45 51 
1f8b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f8b8     46 52 45 51 
1f8bc     46 52 45 51 
1f8c0     46 52 45 51 
1f8c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f8c8     46 52 45 51 
1f8cc     46 52 45 51 
1f8d0     46 52 45 51 
1f8d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f8d8     46 52 45 51 
1f8dc     46 52 45 51 
1f8e0     46 52 45 51 
1f8e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f8e8     46 52 45 51 
1f8ec     46 52 45 51 
1f8f0     46 52 45 51 
1f8f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f8f8     46 52 45 51 
1f8fc     46 52 45 51 
1f900     46 52 45 51 
1f904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f908     46 52 45 51 
1f90c     46 52 45 51 
1f910     46 52 45 51 
1f914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f918     46 52 45 51 
1f91c     46 52 45 51 
1f920     46 52 45 51 
1f924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f928     46 52 45 51 
1f92c     46 52 45 51 
1f930     46 52 45 51 
1f934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f938     46 52 45 51 
1f93c     46 52 45 51 
1f940     46 52 45 51 
1f944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f948     46 52 45 51 
1f94c     46 52 45 51 
1f950     46 52 45 51 
1f954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f958     46 52 45 51 
1f95c     46 52 45 51 
1f960     46 52 45 51 
1f964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f968     46 52 45 51 
1f96c     46 52 45 51 
1f970     46 52 45 51 
1f974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f978     46 52 45 51 
1f97c     46 52 45 51 
1f980     46 52 45 51 
1f984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f988     46 52 45 51 
1f98c     46 52 45 51 
1f990     46 52 45 51 
1f994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f998     46 52 45 51 
1f99c     46 52 45 51 
1f9a0     46 52 45 51 
1f9a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f9a8     46 52 45 51 
1f9ac     46 52 45 51 
1f9b0     46 52 45 51 
1f9b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f9b8     46 52 45 51 
1f9bc     46 52 45 51 
1f9c0     46 52 45 51 
1f9c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f9c8     46 52 45 51 
1f9cc     46 52 45 51 
1f9d0     46 52 45 51 
1f9d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f9d8     46 52 45 51 
1f9dc     46 52 45 51 
1f9e0     46 52 45 51 
1f9e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f9e8     46 52 45 51 
1f9ec     46 52 45 51 
1f9f0     46 52 45 51 
1f9f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f9f8     46 52 45 51 
1f9fc     46 52 45 51 
1fa00     46 52 45 51 
1fa04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa08     46 52 45 51 
1fa0c     46 52 45 51 
1fa10     46 52 45 51 
1fa14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa18     46 52 45 51 
1fa1c     46 52 45 51 
1fa20     46 52 45 51 
1fa24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa28     46 52 45 51 
1fa2c     46 52 45 51 
1fa30     46 52 45 51 
1fa34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa38     46 52 45 51 
1fa3c     46 52 45 51 
1fa40     46 52 45 51 
1fa44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa48     46 52 45 51 
1fa4c     46 52 45 51 
1fa50     46 52 45 51 
1fa54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa58     46 52 45 51 
1fa5c     46 52 45 51 
1fa60     46 52 45 51 
1fa64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa68     46 52 45 51 
1fa6c     46 52 45 51 
1fa70     46 52 45 51 
1fa74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa78     46 52 45 51 
1fa7c     46 52 45 51 
1fa80     46 52 45 51 
1fa84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa88     46 52 45 51 
1fa8c     46 52 45 51 
1fa90     46 52 45 51 
1fa94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fa98     46 52 45 51 
1fa9c     46 52 45 51 
1faa0     46 52 45 51 
1faa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1faa8     46 52 45 51 
1faac     46 52 45 51 
1fab0     46 52 45 51 
1fab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fab8     46 52 45 51 
1fabc     46 52 45 51 
1fac0     46 52 45 51 
1fac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fac8     46 52 45 51 
1facc     46 52 45 51 
1fad0     46 52 45 51 
1fad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fad8     46 52 45 51 
1fadc     46 52 45 51 
1fae0     46 52 45 51 
1fae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fae8     46 52 45 51 
1faec     46 52 45 51 
1faf0     46 52 45 51 
1faf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1faf8     46 52 45 51 
1fafc     46 52 45 51 
1fb00     46 52 45 51 
1fb04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb08     46 52 45 51 
1fb0c     46 52 45 51 
1fb10     46 52 45 51 
1fb14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb18     46 52 45 51 
1fb1c     46 52 45 51 
1fb20     46 52 45 51 
1fb24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb28     46 52 45 51 
1fb2c     46 52 45 51 
1fb30     46 52 45 51 
1fb34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb38     46 52 45 51 
1fb3c     46 52 45 51 
1fb40     46 52 45 51 
1fb44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb48     46 52 45 51 
1fb4c     46 52 45 51 
1fb50     46 52 45 51 
1fb54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb58     46 52 45 51 
1fb5c     46 52 45 51 
1fb60     46 52 45 51 
1fb64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb68     46 52 45 51 
1fb6c     46 52 45 51 
1fb70     46 52 45 51 
1fb74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb78     46 52 45 51 
1fb7c     46 52 45 51 
1fb80     46 52 45 51 
1fb84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb88     46 52 45 51 
1fb8c     46 52 45 51 
1fb90     46 52 45 51 
1fb94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fb98     46 52 45 51 
1fb9c     46 52 45 51 
1fba0     46 52 45 51 
1fba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fba8     46 52 45 51 
1fbac     46 52 45 51 
1fbb0     46 52 45 51 
1fbb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fbb8     46 52 45 51 
1fbbc     46 52 45 51 
1fbc0     46 52 45 51 
1fbc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fbc8     46 52 45 51 
1fbcc     46 52 45 51 
1fbd0     46 52 45 51 
1fbd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fbd8     46 52 45 51 
1fbdc     46 52 45 51 
1fbe0     46 52 45 51 
1fbe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fbe8     46 52 45 51 
1fbec     46 52 45 51 
1fbf0     46 52 45 51 
1fbf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fbf8     46 52 45 51 
1fbfc     46 52 45 51 
1fc00     46 52 45 51 
1fc04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc08     46 52 45 51 
1fc0c     46 52 45 51 
1fc10     46 52 45 51 
1fc14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc18     46 52 45 51 
1fc1c     46 52 45 51 
1fc20     46 52 45 51 
1fc24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc28     46 52 45 51 
1fc2c     46 52 45 51 
1fc30     46 52 45 51 
1fc34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc38     46 52 45 51 
1fc3c     46 52 45 51 
1fc40     46 52 45 51 
1fc44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc48     46 52 45 51 
1fc4c     46 52 45 51 
1fc50     46 52 45 51 
1fc54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc58     46 52 45 51 
1fc5c     46 52 45 51 
1fc60     46 52 45 51 
1fc64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc68     46 52 45 51 
1fc6c     46 52 45 51 
1fc70     46 52 45 51 
1fc74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc78     46 52 45 51 
1fc7c     46 52 45 51 
1fc80     46 52 45 51 
1fc84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc88     46 52 45 51 
1fc8c     46 52 45 51 
1fc90     46 52 45 51 
1fc94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fc98     46 52 45 51 
1fc9c     46 52 45 51 
1fca0     46 52 45 51 
1fca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fca8     46 52 45 51 
1fcac     46 52 45 51 
1fcb0     46 52 45 51 
1fcb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fcb8     46 52 45 51 
1fcbc     46 52 45 51 
1fcc0     46 52 45 51 
1fcc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fcc8     46 52 45 51 
1fccc     46 52 45 51 
1fcd0     46 52 45 51 
1fcd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fcd8     46 52 45 51 
1fcdc     46 52 45 51 
1fce0     46 52 45 51 
1fce4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fce8     46 52 45 51 
1fcec     46 52 45 51 
1fcf0     46 52 45 51 
1fcf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fcf8     46 52 45 51 
1fcfc     46 52 45 51 
1fd00     46 52 45 51 
1fd04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd08     46 52 45 51 
1fd0c     46 52 45 51 
1fd10     46 52 45 51 
1fd14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd18     46 52 45 51 
1fd1c     46 52 45 51 
1fd20     46 52 45 51 
1fd24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd28     46 52 45 51 
1fd2c     46 52 45 51 
1fd30     46 52 45 51 
1fd34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd38     46 52 45 51 
1fd3c     46 52 45 51 
1fd40     46 52 45 51 
1fd44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd48     46 52 45 51 
1fd4c     46 52 45 51 
1fd50     46 52 45 51 
1fd54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd58     46 52 45 51 
1fd5c     46 52 45 51 
1fd60     46 52 45 51 
1fd64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd68     46 52 45 51 
1fd6c     46 52 45 51 
1fd70     46 52 45 51 
1fd74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd78     46 52 45 51 
1fd7c     46 52 45 51 
1fd80     46 52 45 51 
1fd84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd88     46 52 45 51 
1fd8c     46 52 45 51 
1fd90     46 52 45 51 
1fd94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fd98     46 52 45 51 
1fd9c     46 52 45 51 
1fda0     46 52 45 51 
1fda4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fda8     46 52 45 51 
1fdac     46 52 45 51 
1fdb0     46 52 45 51 
1fdb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fdb8     46 52 45 51 
1fdbc     46 52 45 51 
1fdc0     46 52 45 51 
1fdc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fdc8     46 52 45 51 
1fdcc     46 52 45 51 
1fdd0     46 52 45 51 
1fdd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fdd8     46 52 45 51 
1fddc     46 52 45 51 
1fde0     46 52 45 51 
1fde4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fde8     46 52 45 51 
1fdec     46 52 45 51 
1fdf0     46 52 45 51 
1fdf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fdf8     46 52 45 51 
1fdfc     46 52 45 51 
1fe00     46 52 45 51 
1fe04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe08     46 52 45 51 
1fe0c     46 52 45 51 
1fe10     46 52 45 51 
1fe14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe18     46 52 45 51 
1fe1c     46 52 45 51 
1fe20     46 52 45 51 
1fe24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe28     46 52 45 51 
1fe2c     46 52 45 51 
1fe30     46 52 45 51 
1fe34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe38     46 52 45 51 
1fe3c     46 52 45 51 
1fe40     46 52 45 51 
1fe44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe48     46 52 45 51 
1fe4c     46 52 45 51 
1fe50     46 52 45 51 
1fe54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe58     46 52 45 51 
1fe5c     46 52 45 51 
1fe60     46 52 45 51 
1fe64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe68     46 52 45 51 
1fe6c     46 52 45 51 
1fe70     46 52 45 51 
1fe74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe78     46 52 45 51 
1fe7c     46 52 45 51 
1fe80     46 52 45 51 
1fe84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe88     46 52 45 51 
1fe8c     46 52 45 51 
1fe90     46 52 45 51 
1fe94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fe98     46 52 45 51 
1fe9c     46 52 45 51 
1fea0     46 52 45 51 
1fea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fea8     46 52 45 51 
1feac     46 52 45 51 
1feb0     46 52 45 51 
1feb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1feb8     46 52 45 51 
1febc     46 52 45 51 
1fec0     46 52 45 51 
1fec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fec8     46 52 45 51 
1fecc     46 52 45 51 
1fed0     46 52 45 51 
1fed4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fed8     46 52 45 51 
1fedc     46 52 45 51 
1fee0     46 52 45 51 
1fee4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fee8     46 52 45 51 
1feec     46 52 45 51 
1fef0     46 52 45 51 
1fef4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fef8     46 52 45 51 
1fefc     46 52 45 51 
1ff00     46 52 45 51 
1ff04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff08     46 52 45 51 
1ff0c     46 52 45 51 
1ff10     46 52 45 51 
1ff14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff18     46 52 45 51 
1ff1c     46 52 45 51 
1ff20     46 52 45 51 
1ff24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff28     46 52 45 51 
1ff2c     46 52 45 51 
1ff30     46 52 45 51 
1ff34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff38     46 52 45 51 
1ff3c     46 52 45 51 
1ff40     46 52 45 51 
1ff44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff48     46 52 45 51 
1ff4c     46 52 45 51 
1ff50     46 52 45 51 
1ff54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff58     46 52 45 51 
1ff5c     46 52 45 51 
1ff60     46 52 45 51 
1ff64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff68     46 52 45 51 
1ff6c     46 52 45 51 
1ff70     46 52 45 51 
1ff74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff78     46 52 45 51 
1ff7c     46 52 45 51 
1ff80     46 52 45 51 
1ff84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff88     46 52 45 51 
1ff8c     46 52 45 51 
1ff90     46 52 45 51 
1ff94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ff98     46 52 45 51 
1ff9c     46 52 45 51 
1ffa0     46 52 45 51 
1ffa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ffa8     46 52 45 51 
1ffac     46 52 45 51 
1ffb0     46 52 45 51 
1ffb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ffb8     46 52 45 51 
1ffbc     46 52 45 51 
1ffc0     46 52 45 51 
1ffc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ffc8     46 52 45 51 
1ffcc     46 52 45 51 
1ffd0     46 52 45 51 
1ffd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ffd8     46 52 45 51 
1ffdc     46 52 45 51 
1ffe0     46 52 45 51 
1ffe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ffe8     46 52 45 51 
1ffec     46 52 45 51 
1fff0     46 52 45 51 
1fff4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1fff8     46 52 45 51 
1fffc     46 52 45 51 
20000     46 52 45 51 
20004     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20008     46 52 45 51 
2000c     46 52 45 51 
20010     46 52 45 51 
20014     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20018     46 52 45 51 
2001c     46 52 45 51 
20020     46 52 45 51 
20024     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20028     46 52 45 51 
2002c     46 52 45 51 
20030     46 52 45 51 
20034     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20038     46 52 45 51 
2003c     46 52 45 51 
20040     46 52 45 51 
20044     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20048     46 52 45 51 
2004c     46 52 45 51 
20050     46 52 45 51 
20054     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20058     46 52 45 51 
2005c     46 52 45 51 
20060     46 52 45 51 
20064     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20068     46 52 45 51 
2006c     46 52 45 51 
20070     46 52 45 51 
20074     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20078     46 52 45 51 
2007c     46 52 45 51 
20080     46 52 45 51 
20084     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20088     46 52 45 51 
2008c     46 52 45 51 
20090     46 52 45 51 
20094     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20098     46 52 45 51 
2009c     46 52 45 51 
200a0     46 52 45 51 
200a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
200a8     46 52 45 51 
200ac     46 52 45 51 
200b0     46 52 45 51 
200b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
200b8     46 52 45 51 
200bc     46 52 45 51 
200c0     46 52 45 51 
200c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
200c8     46 52 45 51 
200cc     46 52 45 51 
200d0     46 52 45 51 
200d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
200d8     46 52 45 51 
200dc     46 52 45 51 
200e0     46 52 45 51 
200e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
200e8     46 52 45 51 
200ec     46 52 45 51 
200f0     46 52 45 51 
200f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
200f8     46 52 45 51 
200fc     46 52 45 51 
20100     46 52 45 51 
20104     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20108     46 52 45 51 
2010c     46 52 45 51 
20110     46 52 45 51 
20114     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20118     46 52 45 51 
2011c     46 52 45 51 
20120     46 52 45 51 
20124     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20128     46 52 45 51 
2012c     46 52 45 51 
20130     46 52 45 51 
20134     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20138     46 52 45 51 
2013c     46 52 45 51 
20140     46 52 45 51 
20144     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20148     46 52 45 51 
2014c     46 52 45 51 
20150     46 52 45 51 
20154     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20158     46 52 45 51 
2015c     46 52 45 51 
20160     46 52 45 51 
20164     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20168     46 52 45 51 
2016c     46 52 45 51 
20170     46 52 45 51 
20174     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20178     46 52 45 51 
2017c     46 52 45 51 
20180     46 52 45 51 
20184     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20188     46 52 45 51 
2018c     46 52 45 51 
20190     46 52 45 51 
20194     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20198     46 52 45 51 
2019c     46 52 45 51 
201a0     46 52 45 51 
201a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
201a8     46 52 45 51 
201ac     46 52 45 51 
201b0     46 52 45 51 
201b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
201b8     46 52 45 51 
201bc     46 52 45 51 
201c0     46 52 45 51 
201c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
201c8     46 52 45 51 
201cc     46 52 45 51 
201d0     46 52 45 51 
201d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
201d8     46 52 45 51 
201dc     46 52 45 51 
201e0     46 52 45 51 
201e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
201e8     46 52 45 51 
201ec     46 52 45 51 
201f0     46 52 45 51 
201f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
201f8     46 52 45 51 
201fc     46 52 45 51 
20200     46 52 45 51 
20204     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20208     46 52 45 51 
2020c     46 52 45 51 
20210     46 52 45 51 
20214     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20218     46 52 45 51 
2021c     46 52 45 51 
20220     46 52 45 51 
20224     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20228     46 52 45 51 
2022c     46 52 45 51 
20230     46 52 45 51 
20234     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
20238                 | 
20238     00 00 00 00 
2023c     18 00 00 00 
20240     31 00 00 00 
20244     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
20248     61 00 00 00 
2024c     78 00 00 00 
20250     8D 00 00 00 
20254     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
20258     B4 00 00 00 
2025c     C5 00 00 00 
20260     D4 00 00 00 
20264     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
20268     EB 00 00 00 
2026c     F4 00 00 00 
20270     FA 00 00 00 
20274     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
20278     FF 00 00 00 
2027c     FD 00 00 00 
20280     FA 00 00 00 
20284     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
20288     EB 00 00 00 
2028c     E0 00 00 00 
20290     D4 00 00 00 
20294     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
20298     B4 00 00 00 
2029c     A1 00 00 00 
202a0     8D 00 00 00 
202a4     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
202a8     61 00 00 00 
202ac     4A 00 00 00 
202b0     31 00 00 00 
202b4     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
202b8     00 00 00 00 
202bc     E8 FF FF FF 
202c0     CF FF FF FF 
202c4     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
202c8     9F FF FF FF 
202cc     88 FF FF FF 
202d0     73 FF FF FF 
202d4     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
202d8     4C FF FF FF 
202dc     3B FF FF FF 
202e0     2C FF FF FF 
202e4     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
202e8     15 FF FF FF 
202ec     0C FF FF FF 
202f0     06 FF FF FF 
202f4     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
202f8     01 FF FF FF 
202fc     03 FF FF FF 
20300     06 FF FF FF 
20304     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
20308     15 FF FF FF 
2030c     20 FF FF FF 
20310     2C FF FF FF 
20314     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
20318     4C FF FF FF 
2031c     5F FF FF FF 
20320     73 FF FF FF 
20324     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
20328     9F FF FF FF 
2032c     B6 FF FF FF 
20330     CF FF FF FF 
20334     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
20338                 | 
20338     58 03 28 03 
2033c     FA 02 D0 02 
20340     A6 02 80 02 
20344     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
20348     1A 02 FC 01 
2034c     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
20350     AC 01 94 01 
20354     7D 01 68 01 
20358     53 01 40 01 
2035c     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
20360     0D 01 FE 00 
20364     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
20368     D6 00 CA 00 
2036c     BE 00 B4 00 
20370     AA 00 A0 00 
20374     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
20378     87 00 7F 00 
2037c     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
20380     6B 00 22 03 
20384     F5 02 CB 02 
20388     A2 02 7D 02 
2038c     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
20390     17 02 F9 01 
20394     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
20398     A9 01 91 01 
2039c     7B 01 65 01 
203a0     51 01 3E 01 
203a4     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
203a8     0C 01 FD 00 
203ac     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
203b0     D5 00 C9 00 
203b4     BD 00 B3 00 
203b8     A9 00 9F 00 
203bc     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
203c0     86 00 7E 00 
203c4     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
203c8     4C 03 1C 03 
203cc     F0 02 C5 02 
203d0     9E 02 78 02 
203d4     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
203d8     14 02 F6 01 
203dc     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
203e0     A6 01 8E 01 
203e4     78 01 63 01 
203e8     4F 01 3C 01 
203ec     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
203f0     0A 01 FB 00 
203f4     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
203f8     D3 00 C7 00 
203fc     BC 00 B1 00 
20400     A7 00 9E 00 
20404     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
20408     85 00 7D 00 
2040c     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
20410     46 03 17 03 
20414     EA 02 C0 02 
20418     99 02 74 02 
2041c     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
20420     10 02 F2 01 
20424     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
20428     A3 01 8B 01 
2042c     75 01 60 01 
20430     4C 01 3A 01 
20434     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
20438     08 01 F9 00 
2043c     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
20440     D1 00 C6 00 
20444     BB 00 B0 00 
20448     A6 00 9D 00 
2044c     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
20450     84 00 7D 00 
20454     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
20458     40 03 11 03 
2045c     E5 02 BB 02 
20460     94 02 6F 02 
20464     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
20468     0C 02 EF 01 
2046c     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
20470     A0 01 88 01 
20474     72 01 5E 01 
20478     4A 01 38 01 
2047c     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
20480     06 01 F7 00 
20484     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
20488     D0 00 C4 00 
2048c     B9 00 AF 00 
20490     A5 00 9C 00 
20494     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
20498     83 00 7C 00 
2049c     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
204a0     3A 03 0B 03 
204a4     E0 02 B6 02 
204a8     8F 02 6B 02 
204ac     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
204b0     08 02 EB 01 
204b4     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
204b8     9D 01 86 01 
204bc     70 01 5B 01 
204c0     48 01 35 01 
204c4     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
204c8     04 01 F5 00 
204cc     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
204d0     CE 00 C3 00 
204d4     B8 00 AE 00 
204d8     A4 00 9B 00 
204dc     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
204e0     82 00 7B 00 
204e4     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
204e8     34 03 06 03 
204ec     DA 02 B1 02 
204f0     8B 02 66 02 
204f4     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
204f8     04 02 E7 01 
204fc     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
20500     9A 01 83 01 
20504     6D 01 59 01 
20508     45 01 33 01 
2050c     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
20510     02 01 F4 00 
20514     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
20518     CD 00 C1 00 
2051c     B7 00 AC 00 
20520     A3 00 9A 00 
20524     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
20528     81 00 7A 00 
2052c     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
20530     2E 03 00 03 
20534     D5 02 AC 02 
20538     86 02 62 02 
2053c     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
20540     01 02 E4 01 
20544     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
20548     97 01 80 01 
2054c     6B 01 56 01 
20550     43 01 31 01 
20554     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
20558     00 01 F2 00 
2055c     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
20560     CC 00 C0 00 
20564     B5 00 AB 00 
20568     A1 00 98 00 
2056c     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
20570     80 00 79 00 
20574     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
20578     8B 03 58 03 
2057c     28 03 FA 02 
20580     D0 02 A6 02 
20584     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
20588     3A 02 1A 02 
2058c     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
20590     C5 01 AC 01 
20594     94 01 7D 01 
20598     68 01 53 01 
2059c     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
205a0     1D 01 0D 01 
205a4     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
205a8     E2 00 D6 00 
205ac     CA 00 BE 00 
205b0     B4 00 AA 00 
205b4     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
205b8     8F 00 87 00 
205bc     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
205c0     84 03 52 03 
205c4     22 03 F5 02 
205c8     CB 02 A3 02 
205cc     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
205d0     37 02 17 02 
205d4     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
205d8     C2 01 A9 01 
205dc     91 01 7B 01 
205e0     65 01 51 01 
205e4     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
205e8     1C 01 0C 01 
205ec     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
205f0     E1 00 D4 00 
205f4     C8 00 BD 00 
205f8     B3 00 A9 00 
205fc     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
20600     8E 00 86 00 
20604     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
20608     7E 03 4C 03 
2060c     1C 03 F0 02 
20610     C5 02 9E 02 
20614     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
20618     33 02 14 02 
2061c     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
20620     BF 01 A6 01 
20624     8E 01 78 01 
20628     63 01 4F 01 
2062c     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
20630     1A 01 0A 01 
20634     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
20638     DF 00 D3 00 
2063c     C7 00 BC 00 
20640     B1 00 A7 00 
20644     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
20648     8D 00 85 00 
2064c     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
20650     77 03 46 03 
20654     17 03 EA 02 
20658     C0 02 99 02 
2065c     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
20660     2F 02 10 02 
20664     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
20668     BC 01 A3 01 
2066c     8B 01 75 01 
20670     60 01 4C 01 
20674     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
20678     18 01 08 01 
2067c     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
20680     DE 00 D1 00 
20684     C6 00 BB 00 
20688     B0 00 A6 00 
2068c     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
20690     8C 00 84 00 
20694     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
20698     71 03 40 03 
2069c     11 03 E5 02 
206a0     BB 02 94 02 
206a4     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
206a8     2B 02 0C 02 
206ac     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
206b0     B9 01 A0 01 
206b4     88 01 72 01 
206b8     5E 01 4A 01 
206bc     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
206c0     16 01 06 01 
206c4     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
206c8     DC 00 D0 00 
206cc     C4 00 B9 00 
206d0     AF 00 A5 00 
206d4     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
206d8     8B 00 83 00 
206dc     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
206e0     6B 03 3A 03 
206e4     0B 03 E0 02 
206e8     B6 02 8F 02 
206ec     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
206f0     27 02 08 02 
206f4     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
206f8     B5 01 9D 01 
206fc     86 01 70 01 
20700     5B 01 48 01 
20704     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
20708     14 01 04 01 
2070c     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
20710     DB 00 CE 00 
20714     C3 00 B8 00 
20718     AE 00 A4 00 
2071c     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
20720     8A 00 82 00 
20724     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
20728     64 03 34 03 
2072c     06 03 DA 02 
20730     B1 02 8B 02 
20734     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
20738     23 02 04 02 
2073c     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
20740     B2 01 9A 01 
20744     83 01 6D 01 
20748     59 01 45 01 
2074c     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
20750     12 01 02 01 
20754     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
20758     D9 00 CD 00 
2075c     C1 00 B7 00 
20760     AC 00 A3 00 
20764     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
20768     89 00 81 00 
2076c     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
20770     5E 03 2E 03 
20774     00 03 D5 02 
20778     AC 02 86 02 
2077c     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
20780     1F 02 01 02 
20784     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
20788     AF 01 97 01 
2078c     80 01 6B 01 
20790     56 01 43 01 
20794     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
20798     10 01 00 01 
2079c     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
207a0     D8 00 CB 00 
207a4     C0 00 B5 00 
207a8     AB 00 A1 00 
207ac     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
207b0     88 00 80 00 
207b4     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
207b8                 | 	alignl
207b8                 | _audio016_spin2_dat_
207b8                 | 
207b8                 | audio       org     0
207b8     00 F2 07 F6 | 			mov ptrb,#0
207bc     28 8E 64 FD | 			setq #71
207c0     00 A9 06 FB |             rdlong  sstart1,ptra
207c4     0E 76 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
207c8     0E C8 1C FC |             wxpin   #100,#left
207cc     0F 76 07 FC |             wrpin   dac,#right
207d0     0F C8 1C FC |             wxpin   #100,#right
207d4     41 9C 64 FD |             dirh    #left addpins 1
207d8     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
207dc     2D E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
207e0     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
207e4                 |             
207e4                 | '---------------------------------------------------------------------------------        
207e4                 | '----------------- The main loop -------------------------------------------------
207e4                 | '---------------------------------------------------------------------------------
207e4                 | 
207e4     37 39 13 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
207e8     24 00 90 CD |       if_c  jmp     #loop1
207ec                 |       
207ec     36 3B 83 F1 |             sub     time1,a20000000
207f0     36 3D 83 F1 |             sub     time2,a20000000
207f4     36 3F 83 F1 |             sub     time3,a20000000
207f8     36 41 83 F1 |             sub     time4,a20000000
207fc     36 43 83 F1 |             sub     time5,a20000000
20800     36 45 83 F1 |             sub     time6,a20000000
20804     36 47 83 F1 |             sub     time7,a20000000
20808     36 49 83 F1 |             sub     time8,a20000000
2080c     36 39 83 F1 |             sub     time0,a20000000
20810                 |     
20810     5C 87 02 F5 | loop1       and     p1,acmd1            ' cmd=0 resets the phase accumulator
20814     65 89 02 F5 |             and     p2,acmd2
20818     6E 8B 02 F5 |             and     p3,acmd3
2081c     77 8D 02 F5 |             and     p4,acmd4
20820     80 8F 02 F5 |             and     p5,acmd5
20824     89 91 02 F5 |             and     p6,acmd6
20828     92 93 02 F5 |             and     p7,acmd7
2082c     9B 95 02 F5 |             and     p8,acmd8
20830                 |        
20830     2F 4C 07 F6 |             mov     cn,#p201           ' Find the channel to compute
20834     9D 4F 03 F6 |             mov     ct,time1           ' with the lowest next sample time
20838     9E 4F 3B F3 |             fle     ct,time2 wcz   
2083c     48 4C 07 C6 |     if_c    mov     cn,#p202 
20840     9F 4F 3B F3 |             fle     ct,time3 wcz
20844     63 4C 07 C6 |     if_c    mov     cn,#p203     
20848     A0 4F 3B F3 |             fle     ct,time4 wcz
2084c     7E 4C 07 C6 |     if_c    mov     cn,#p204
20850     A1 4F 3B F3 |             fle     ct,time5 wcz
20854     99 4C 07 C6 |     if_c    mov     cn,#p205 
20858     A2 4F 3B F3 |             fle     ct,time6 wcz
2085c     B4 4C 07 C6 |     if_c    mov     cn,#p206
20860     A3 4F 3B F3 |             fle     ct,time7 wcz
20864     CF 4C 07 C6 |     if_c    mov     cn,#p207
20868     A4 4F 3B F3 |             fle     ct,time8 wcz
2086c     EA 4C 07 C6 |     if_c    mov     cn,#p208 
20870                 |  
20870     2C 4C 63 FD |             jmp     cn
20874                 |    
20874                 | '----------------------------------------------------------------------------------
20874                 | '------------- Compute channel samples --------------------------------------------
20874                 | '----------------------------------------------------------------------------------
20874                 | 	
20874                 | ' ------------  Channel 1
20874                 |  
20874     28 10 64 FD | p201        setq    #8              ' Read channel regs from the hub
20878     00 A9 06 FB |             rdlong  sstart1,ptra
2087c                 | 
2087c     9D 51 03 F6 |             mov     dt0,time1      ' compute the delta to add to the global time
20880     9C 51 83 F1 |             sub     dt0,time0
20884     5A 3B 03 F1 |             add     time1,freq1    ' compute the next channel time	
20888                 | 	        
20888     5B 87 02 F1 |             add     p1,askip1      ' update the phase accumulator
2088c     57 87 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
20890     57 87 82 31 |     if_ge   sub     p1,lend1	        
20894     56 87 02 31 |     if_ge   add     p1,lstart1       
20898     43 97 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
2089c     54 97 02 F1 |             add     qq,sstart1
208a0                 |             
208a0     00 AA 0E F2 |             cmp     type1,#0 wz    ' check the sample type
208a4     4B 99 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
208a8     08 98 66 50 |     if_nz   shl     spl,#8
208ac     4B 99 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
208b0                 | 
208b0     58 99 32 FA |             scas    spl,vol1       ' apply the volume
208b4     00 98 02 F6 |             mov     spl,0-0
208b8                 | 
208b8     59 99 32 FA |             scas    spl,apan1      ' apply the pan
208bc     00 56 03 F6 |             mov     ls1,0-0
208c0     20 00 00 FF 
208c4     00 96 06 F6 |             mov     qq,##16384
208c8     59 97 82 F1 |             sub     qq,apan1
208cc     4B 99 32 FA |             scas    spl,qq
208d0     00 58 03 F6 |             mov     rs1,0-0
208d4                 |             
208d4     F4 02 90 FD |             jmp     #p101              
208d8                 | 	    	
208d8                 | ' ------------  Channel 2
208d8                 |  
208d8     24 F0 07 F1 | p202        add     ptra,#36
208dc     28 10 64 FD |             setq    #8              
208e0     00 BB 06 FB |             rdlong  sstart2,ptra
208e4     24 F0 87 F1 |             sub     ptra, #36
208e8                 | 
208e8     9E 51 03 F6 |             mov     dt0,time2
208ec     9C 51 83 F1 |             sub     dt0,time0
208f0     63 3D 03 F1 |             add     time2,freq2  	
208f4                 | 	        
208f4     64 89 02 F1 |             add     p2,askip2
208f8     60 89 1A F2 |             cmp     p2,lend2 wcz
208fc     60 89 82 31 |     if_ge   sub     p2,lend2	        
20900     5F 89 02 31 |     if_ge   add     p2,lstart2       
20904     44 97 02 F6 |             mov     qq,p2
20908     5D 97 02 F1 |             add     qq,sstart2
2090c                 | 
2090c     00 BC 0E F2 |             cmp     type2,#0 wz
20910     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
20914     08 98 66 50 |     if_nz   shl     spl,#8
20918     4B 99 E2 AA |     if_z    rdword  spl,qq
2091c                 | 
2091c     61 99 32 FA |             scas    spl,vol2
20920     00 98 02 F6 |             mov     spl,0-0
20924                 |             
20924     62 99 32 FA |             scas    spl,apan2
20928     00 5A 03 F6 |             mov     ls2,0-0
2092c     20 00 00 FF 
20930     00 96 06 F6 |             mov     qq,##16384
20934     62 97 82 F1 |             sub     qq,apan2
20938     4B 99 32 FA |             scas    spl,qq
2093c     00 5C 03 F6 |             mov     rs2,0-0
20940                 |             
20940     88 02 90 FD |             jmp     #p101
20944                 | 
20944                 | ' ------------  Channel 3
20944                 |  
20944     48 F0 07 F1 | p203        add     ptra,#36*2
20948     28 10 64 FD |             setq    #8               
2094c     00 CD 06 FB |             rdlong  sstart3,ptra
20950     48 F0 87 F1 |             sub     ptra, #36*2
20954                 | 
20954     9F 51 03 F6 |             mov     dt0,time3
20958     9C 51 83 F1 |             sub     dt0,time0
2095c     6C 3F 03 F1 |             add     time3,freq3  	
20960                 | 	        
20960     6D 8B 02 F1 |             add     p3,askip3
20964     69 8B 1A F2 |             cmp     p3,lend3 wcz
20968     69 8B 82 31 |     if_ge   sub     p3,lend3	        
2096c     68 8B 02 31 |     if_ge   add     p3,lstart3       
20970     45 97 02 F6 |             mov     qq,p3
20974     66 97 02 F1 |             add     qq,sstart3
20978                 |             
20978     00 CE 0E F2 |             cmp     type3,#0 wz
2097c     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
20980     08 98 66 50 |     if_nz   shl     spl,#8
20984     4B 99 E2 AA |     if_z    rdword  spl,qq
20988                 | 
20988     6A 99 32 FA |             scas    spl,vol3
2098c     00 98 02 F6 |             mov     spl,0-0
20990                 |     	
20990     6B 99 32 FA |             scas    spl,apan3
20994     00 5E 03 F6 |             mov     ls3,0-0
20998                 |             
20998     20 00 00 FF 
2099c     00 96 06 F6 |             mov     qq,##16384
209a0     6B 97 82 F1 |             sub     qq,apan3
209a4     4B 99 32 FA |             scas    spl,qq
209a8     00 60 03 F6 |             mov     rs3,0-0
209ac                 | 
209ac     1C 02 90 FD |             jmp     #p101
209b0                 |             
209b0                 | ' ------------  Channel 4
209b0                 |  
209b0     6C F0 07 F1 | p204        add     ptra,#36*3
209b4     28 10 64 FD |             setq    #8               
209b8     00 DF 06 FB |             rdlong  sstart4,ptra
209bc     6C F0 87 F1 |             sub     ptra, #36*3
209c0                 | 
209c0     A0 51 03 F6 |             mov     dt0,time4
209c4     9C 51 83 F1 |             sub     dt0,time0
209c8     75 41 03 F1 |             add     time4,freq4  	
209cc                 | 	        
209cc     76 8D 02 F1 |             add     p4,askip4
209d0     72 8D 1A F2 |             cmp     p4,lend4 wcz
209d4     72 8D 82 31 |     if_ge   sub     p4,lend4	        
209d8     71 8D 02 31 |     if_ge   add     p4,lstart4       
209dc     46 97 02 F6 |             mov     qq,p4
209e0     6F 97 02 F1 |             add     qq,sstart4
209e4                 |             
209e4     00 E0 0E F2 |             cmp     type4,#0 wz
209e8     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
209ec     08 98 66 50 |     if_nz   shl     spl,#8
209f0     4B 99 E2 AA |     if_z    rdword  spl,qq
209f4                 | 
209f4     73 99 32 FA |             scas    spl,vol4
209f8     00 98 02 F6 |             mov     spl,0-0
209fc                 |     	
209fc     74 99 32 FA |             scas    spl,apan4
20a00     00 64 03 F6 |             mov     ls4,0-0
20a04                 |             
20a04     20 00 00 FF 
20a08     00 96 06 F6 |             mov     qq,##16384
20a0c     74 97 82 F1 |             sub     qq,apan4
20a10     4B 99 32 FA |             scas    spl,qq
20a14     00 62 03 F6 |             mov     rs4,0-0
20a18                 | 
20a18     B0 01 90 FD |             jmp     #p101
20a1c                 |             
20a1c                 | ' ------------  Channel 5
20a1c                 |  
20a1c     90 F0 07 F1 | p205        add     ptra,#36*4
20a20     28 10 64 FD |             setq    #8               
20a24     00 F1 06 FB |             rdlong  sstart5,ptra
20a28     90 F0 87 F1 |             sub     ptra, #36*4
20a2c                 | 
20a2c     A1 51 03 F6 |             mov     dt0,time5
20a30     9C 51 83 F1 |             sub     dt0,time0
20a34     7E 43 03 F1 |             add     time5,freq5  	
20a38                 | 
20a38                 | 	        
20a38     7F 8F 02 F1 |             add     p5,askip5
20a3c     7B 8F 1A F2 |             cmp     p5,lend5 wcz
20a40     7B 8F 82 31 |     if_ge   sub     p5,lend5	        
20a44     7A 8F 02 31 |     if_ge   add     p5,lstart5       
20a48     47 97 02 F6 |             mov     qq,p5
20a4c     78 97 02 F1 |             add     qq,sstart5
20a50                 |             
20a50     00 F2 0E F2 |             cmp     type5,#0 wz
20a54     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
20a58     08 98 66 50 |     if_nz   shl     spl,#8
20a5c     4B 99 E2 AA |     if_z    rdword  spl,qq
20a60                 | 
20a60     7C 99 32 FA |             scas    spl,vol5
20a64     00 98 02 F6 |             mov     spl,0-0
20a68                 |     	
20a68     7D 99 32 FA |             scas    spl,apan5
20a6c     00 68 03 F6 |             mov     ls5,0-0
20a70                 |             
20a70     20 00 00 FF 
20a74     00 96 06 F6 |             mov     qq,##16384
20a78     7D 97 82 F1 |             sub     qq,apan5
20a7c     4B 99 32 FA |             scas    spl,qq
20a80     00 66 03 F6 |             mov     rs5,0-0
20a84                 | 
20a84     44 01 90 FD |             jmp     #p101
20a88                 |   
20a88                 | ' ------------  Channel 6
20a88                 |  
20a88     B4 F0 07 F1 | p206        add     ptra,#36*5
20a8c     28 10 64 FD |             setq    #8              
20a90     00 03 07 FB |             rdlong  sstart6,ptra
20a94     B4 F0 87 F1 |             sub     ptra, #36*5
20a98                 | 
20a98     A2 51 03 F6 |             mov       dt0,time6
20a9c     9C 51 83 F1 |             sub     dt0,time0
20aa0     87 45 03 F1 |             add     time6,freq6  	
20aa4                 | 	        
20aa4     88 91 02 F1 |             add     p6,askip6
20aa8     84 91 1A F2 |             cmp     p6,lend6 wcz
20aac     84 91 82 31 |     if_ge   sub     p6,lend6	        
20ab0     83 91 02 31 |     if_ge   add     p6,lstart6       
20ab4     48 97 02 F6 |             mov     qq,p6
20ab8     81 97 02 F1 |             add     qq,sstart6
20abc                 |             
20abc     00 04 0F F2 |             cmp     type6,#0 wz
20ac0     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
20ac4     08 98 66 50 |     if_nz   shl     spl,#8
20ac8     4B 99 E2 AA |     if_z    rdword  spl,qq
20acc                 |           
20acc     85 99 32 FA |             scas    spl,vol6
20ad0     00 98 02 F6 |             mov     spl,0-0
20ad4                 |     	
20ad4     86 99 32 FA |             scas    spl,apan6
20ad8     00 6C 03 F6 |             mov     ls6,0-0
20adc                 |             
20adc     20 00 00 FF 
20ae0     00 96 06 F6 |             mov     qq,##16384
20ae4     86 97 82 F1 |             sub     qq,apan6
20ae8     4B 99 32 FA |             scas    spl,qq
20aec     00 6A 03 F6 |             mov     rs6,0-0
20af0                 | 
20af0     D8 00 90 FD |             jmp     #p101
20af4                 |             
20af4                 | ' ------------  Channel 7
20af4                 |  
20af4     D8 F0 07 F1 | p207        add     ptra,#36*6
20af8     28 10 64 FD |             setq    #8              ' 
20afc     00 15 07 FB |             rdlong  sstart7,ptra
20b00     D8 F0 87 F1 |             sub     ptra, #36*6
20b04                 | 
20b04     A3 51 03 F6 |             mov     dt0,time7
20b08     9C 51 83 F1 |             sub     dt0,time0
20b0c     90 47 03 F1 |             add     time7,freq7  	
20b10                 | 	        
20b10     91 93 02 F1 |             add     p7,askip7
20b14     8D 93 1A F2 |             cmp     p7,lend7 wcz
20b18     8D 93 82 31 |     if_ge   sub     p7,lend7	        
20b1c     8C 93 02 31 |     if_ge   add     p7,lstart7       
20b20     49 97 02 F6 |             mov     qq,p7
20b24     8A 97 02 F1 |             add     qq,sstart7
20b28                 |             
20b28     00 16 0F F2 |             cmp     type7,#0 wz
20b2c     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
20b30     08 98 66 50 |     if_nz   shl     spl,#8
20b34     4B 99 E2 AA |     if_z    rdword  spl,qq
20b38                 | 
20b38     8E 99 32 FA |             scas    spl,vol7
20b3c     00 98 02 F6 |             mov     spl,0-0
20b40                 |     	
20b40     8F 99 32 FA |             scas    spl,apan7
20b44     00 70 03 F6 |             mov     ls7,0-0
20b48                 |             
20b48     20 00 00 FF 
20b4c     00 96 06 F6 |             mov     qq,##16384
20b50     8F 97 82 F1 |             sub     qq,apan7
20b54     4B 99 32 FA |             scas    spl,qq
20b58     00 6E 03 F6 |             mov     rs7,0-0
20b5c                 | 
20b5c     6C 00 90 FD |             jmp     #p101     
20b60                 |                    
20b60                 | ' ------------  Channel 8
20b60                 |  
20b60     FC F0 07 F1 | p208        add     ptra,#36*7
20b64     28 10 64 FD |             setq    #8              
20b68     00 27 07 FB |             rdlong  sstart8,ptra
20b6c     FC F0 87 F1 |             sub     ptra, #36*7
20b70                 |  
20b70     A4 51 03 F6 |             mov     dt0,time8      '* time8
20b74     9C 51 83 F1 |             sub     dt0,time0      
20b78     99 49 03 F1 |             add     time8,freq8    '* freq8	
20b7c                 | 	        
20b7c     9A 95 02 F1 |             add     p8,askip8      '* skip8 *p8
20b80     96 95 1A F2 |             cmp     p8,lend8 wcz   '* lend8
20b84     96 95 82 31 |     if_ge   sub     p8,lend8	        
20b88     95 95 02 31 |     if_ge   add     p8,lstart8     '* lstart8  
20b8c     4A 97 02 F6 |             mov     qq,p8    
20b90     93 97 02 F1 |             add     qq,sstart8
20b94                 |             
20b94     00 28 0F F2 |             cmp     type8,#0 wz
20b98     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
20b9c     08 98 66 50 |     if_nz   shl     spl,#8
20ba0     4B 99 E2 AA |     if_z    rdword  spl,qq
20ba4                 | 
20ba4     97 99 32 FA |             scas    spl,vol8
20ba8     00 98 02 F6 |             mov     spl,0-0
20bac                 |     	
20bac     98 99 32 FA |             scas    spl,apan8
20bb0     00 74 03 F6 |             mov     ls8,0-0
20bb4                 |             
20bb4     20 00 00 FF 
20bb8     00 96 06 F6 |             mov     qq,##16384
20bbc     98 97 82 F1 |             sub     qq,apan8
20bc0     4B 99 32 FA |             scas    spl,qq
20bc4     00 72 03 F6 |             mov     rs8,0-0
20bc8                 | 
20bc8     00 00 90 FD |             jmp     #p101            
20bcc                 |             
20bcc                 | '------------------------ Channels end here --------------------       
20bcc                 | 
20bcc                 | ' Now add all channels and put the sample to the buffer    
20bcc                 | 
20bcc                 | 
20bcc     9C 4B 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
20bd0     01 9A 86 A1 |     if_z    sub     front,#1         ' 
20bd4     FF 9B 06 A5 |     if_z    and     front,#511     
20bd8                 |   
20bd8     00 54 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
20bdc     00 52 07 F6 |             mov     ls,#0
20be0     AC 55 03 F1 |             add     rs,rs1
20be4     AE 55 03 F1 |             add     rs,rs2
20be8     B0 55 03 F1 |             add     rs,rs3
20bec     B1 55 03 F1 |             add     rs,rs4
20bf0     B3 55 03 F1 |             add     rs,rs5
20bf4     B5 55 03 F1 |             add     rs,rs6
20bf8     B7 55 03 F1 |             add     rs,rs7
20bfc     B9 55 03 F1 |             add     rs,rs8
20c00                 |             
20c00     AB 53 03 F1 |             add     ls,ls1
20c04     AD 53 03 F1 |             add     ls,ls2
20c08     AF 53 03 F1 |             add     ls,ls3
20c0c     B2 53 03 F1 |             add     ls,ls4
20c10     B4 53 03 F1 |             add     ls,ls5
20c14     B6 53 03 F1 |             add     ls,ls6
20c18     B8 53 03 F1 |             add     ls,ls7
20c1c     BA 53 03 F1 |             add     ls,ls8
20c20                 |  		
20c20     0F 52 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
20c24     0F 54 E7 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
20c28                 | 		    
20c28     A9 55 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
20c2c     AA 71 02 F6 |             mov newsample, rs
20c30                 | 
20c30     9C 4B 03 F6 |             mov     oldt0,time0      ' update global time
20c34     A8 39 03 F1 |             add     time0,dt0     
20c38                 |             
20c38                 |                                      ' now push dt0 samples to the buffer
20c38     00 50 0F F2 |             cmp      dt0,#0 wz
20c3c     D0 FB 9F AD |     if_z    jmp      #loop1
20c40     A8 75 02 F6 |             mov      t1,dt0
20c44                 |   
20c44     F9 77 02 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
20c48     01 76 86 F1 |             sub     t2,#1
20c4c     FF 77 06 F5 |             and     t2,#511
20c50     4D 77 1A F2 |             cmp     t2,front wcz
20c54     EC FF 9F AD |     if_e    jmp     #p301    
20c58                 |     
20c58     4D 71 32 FC |             wrlut   newsample, front
20c5c     01 9A 06 F1 |             add     front,#1
20c60     FF 9B 06 F5 |             and     front,#511
20c64     F7 75 6E FB |             djnz    t1,#p301
20c68     78 FB 9F FD |             jmp     #loop            'loop
20c6c                 | 
20c6c                 | '-------------------------------------------------------------------------
20c6c                 | '------------------ This is the end of the main loop ---------------------
20c6c                 | '-------------------------------------------------------------------------
20c6c                 | 
20c6c                 | '--------------------------------------------------------------------------
20c6c                 | '------ Interrupt service -------------------------------------------------
20c6c                 | '------ Output the sample, get the next one if exists ---------------------
20c6c                 | '--------------------------------------------------------------------------
20c6c                 | 
20c6c     0E 9E 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
20c70     0F A0 26 FC |             wypin   rsample,#right       '4
20c74                 |            
20c74     4D F3 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
20c78     F5 FF 3B AB |     if_e    reti1                        '8/10
20c7c                 | 
20c7c     E1 A3 A6 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
20c80     51 A1 3A F9 |           	getword rsample,lsnext,#1    '13
20c84     51 9F 32 F9 |           	getword lsample,lsnext,#0    '15
20c88     F5 FF 3B FB |             reti1                        '17/19 
20c8c                 |           
20c8c                 | '---------------------------------------------------------------------------
20c8c                 | '-------- End of interrupt -------------------------------------------------
20c8c                 | '---------------------------------------------------------------------------    
20c8c                 | 
20c8c                 | 
20c8c                 | '---------------------------------------------------------------------------
20c8c                 | '------- Variables ---------------------------------------------------------
20c8c                 | '---------------------------------------------------------------------------
20c8c                 | 
20c8c                 | ' constants
20c8c                 | 
20c8c     FF FF FF 1F | a1fffffff long $1fffffff
20c90     00 00 00 20 | a20000000 long $20000000
20c94     00 00 00 21 | a21000000 long $21000000
20c98     00 00 00 00 | newsample long 0
20c9c     FF FF 00 00 | affff long $ffff
20ca0     00 00 00 00 | t1 long 0
20ca4     00 00 00 00 | t2 long 0
20ca8     00 00 00 00 | nl long 0
20cac     00 00 00 00 | nr long 0
20cb0     00 00 00 00 | nrsample long 0
20cb4     00 00 00 00 | nlsample long 0
20cb8     1F 00 00 00 | fl long 31
20cbc     1F 00 00 00 | fr long 31
20cc0     00 00 00 00 | d long 0
20cc4                 | ' phase accumulators
20cc4                 | 
20cc4     00 00 00 00 | p1          long 0
20cc8     00 00 00 00 | p2          long 0
20ccc     00 00 00 00 | p3          long 0
20cd0     00 00 00 00 | p4          long 0
20cd4     00 00 00 00 | p5          long 0
20cd8     00 00 00 00 | p6          long 0
20cdc     00 00 00 00 | p7          long 0
20ce0     00 00 00 00 | p8          long 0
20ce4                 | 
20ce4                 | ' temporary variables 
20ce4                 | 
20ce4     00 00 00 00 | qq          long 0
20ce8     00 00 00 00 | spl         long 0
20cec                 | 
20cec                 | ' circular buffer in LUT
20cec                 | 
20cec     00 00 00 00 | front       long 0
20cf0                 | 'tail        long 0
20cf0                 | 
20cf0                 | ' Interrupt ISR variables
20cf0                 | 
20cf0     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
20cf4     00 00 00 00 | lsample     long 0
20cf8     00 00 00 00 | rsample     long 0
20cfc     00 00 00 00 | lsnext      long 0
20d00     00 00 00 00 | rsnext      long 0 
20d04     00 00 00 00 | irqtime     long 0
20d08                 | 
20d08                 | ' Channel 1 registers. TODO - optimize the memory usage   ''' optimization: start pointer, loop start loop end long type bit cmd bytevol pan wordskip byte cmd bit
20d08                 | ' sstart: long, 2 upper bits: type
20d08                 | ' lstart, long 
20d08                 | ' lend :long
20d08                 | ' vol+pan long
20d08                 | ' freq,skip :long    5 longs per chn instead of 9 = 80 longs for 16 chn + 16 PAs + 16 timers+ 32 samples = 144 longs
20d08                 | ' cmd: 1 long for all
20d08                 | 
20d08     00 00 00 00 | sstart1     long 0       ' Sample start pointer
20d0c     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
20d10     00 00 00 00 | lstart1     long 0       ' Loop start
20d14     02 00 00 00 | lend1       long 2       ' Loop end
20d18     00 00 00 00 | vol1        long 0       ' volume, 0..16384
20d1c     00 00 00 00 | apan1       long 0       ' pan, 0..16384
20d20     65 00 00 00 | freq1       long 101     ' frequency divider
20d24     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
20d28     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
20d2c                 | 
20d2c                 | ' Channel 2 registers
20d2c                 | 
20d2c     00 00 00 00 | sstart2     long 0
20d30     00 00 00 00 | type2       long 0
20d34     00 00 00 00 | lstart2     long 0
20d38     02 00 00 00 | lend2       long 2        		
20d3c     00 00 00 00 | vol2        long 0
20d40     00 00 00 00 | apan2       long 0
20d44     67 00 00 00 | freq2       long 103
20d48     02 00 00 00 | askip2      long 2
20d4c     00 00 00 00 | acmd2       long 0
20d50                 | 
20d50                 | ' Channel 3 registers
20d50                 | 
20d50     00 00 00 00 | sstart3     long 0
20d54     00 00 00 00 | type3       long 0
20d58     00 00 00 00 | lstart3     long 0
20d5c     02 00 00 00 | lend3       long 2       		'
20d60     00 00 00 00 | vol3        long 0
20d64     00 00 00 00 | apan3       long 0
20d68     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
20d6c     02 00 00 00 | askip3      long 2
20d70     00 00 00 00 | acmd3       long 0
20d74                 | 
20d74                 | ' Channel 4 registers
20d74                 | 
20d74     00 00 00 00 | sstart4     long 0
20d78     00 00 00 00 | type4       long 0
20d7c     00 00 00 00 | lstart4     long 0
20d80     02 00 00 00 | lend4       long 2       		'
20d84     00 00 00 00 | vol4        long 0
20d88     00 00 00 00 | apan4       long 0
20d8c     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
20d90     02 00 00 00 | askip4      long 2
20d94     00 00 00 00 | acmd4       long 0
20d98                 | 
20d98                 | ' Channel 5 registers
20d98                 | 
20d98     00 00 00 00 | sstart5     long 0
20d9c     00 00 00 00 | type5       long 0
20da0     00 00 00 00 | lstart5     long 0
20da4     02 00 00 00 | lend5       long 2       		'
20da8     00 00 00 00 | vol5        long 0
20dac     00 00 00 00 | apan5       long 0
20db0     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
20db4     02 00 00 00 | askip5      long 2
20db8     00 00 00 00 | acmd5       long 0
20dbc                 | 
20dbc                 | ' Channel 6 registers
20dbc                 | 
20dbc     00 00 00 00 | sstart6     long 0
20dc0     00 00 00 00 | type6       long 0
20dc4     00 00 00 00 | lstart6     long 0
20dc8     02 00 00 00 | lend6       long 2       		'
20dcc     00 00 00 00 | vol6        long 0
20dd0     00 00 00 00 | apan6       long 0
20dd4     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
20dd8     02 00 00 00 | askip6      long 2
20ddc     00 00 00 00 | acmd6       long 0
20de0                 | 
20de0                 | ' Channel 7 registers
20de0                 | 
20de0     00 00 00 00 | sstart7     long 0
20de4     00 00 00 00 | type7       long 0
20de8     00 00 00 00 | lstart7     long 0
20dec     02 00 00 00 | lend7       long 2       		'
20df0     00 00 00 00 | vol7        long 0
20df4     00 00 00 00 | apan7       long 0
20df8     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
20dfc     02 00 00 00 | askip7      long 2
20e00     00 00 00 00 | acmd7       long 0
20e04                 | 
20e04                 | ' Channel 8 registers
20e04                 | 
20e04     00 00 00 00 | sstart8     long 0
20e08     00 00 00 00 | type8       long 0
20e0c     00 00 00 00 | lstart8     long 0
20e10     02 00 00 00 | lend8       long 2       		'
20e14     00 00 00 00 | vol8        long 0
20e18     00 00 00 00 | apan8       long 0
20e1c     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
20e20     02 00 00 00 | askip8      long 2
20e24     00 00 00 00 | acmd8       long 0
20e28                 | 
20e28                 | ' Time variables
20e28                 | 
20e28     00 00 00 00 | time0       long 0    ' Global sample computing time
20e2c     01 00 00 00 | time1       long 1    ' Local channels time
20e30     02 00 00 00 | time2       long 2
20e34     03 00 00 00 | time3       long 3
20e38     04 00 00 00 | time4       long 4
20e3c     05 00 00 00 | time5       long 5
20e40     06 00 00 00 | time6       long 6
20e44     07 00 00 00 | time7       long 7
20e48     08 00 00 00 | time8       long 8
20e4c                 | 
20e4c     00 00 00 00 | oldt0       long 0    'Temporary time variables
20e50     00 00 00 00 | cn          long 0
20e54     00 00 00 00 | ct          long 0
20e58     00 00 00 00 | dt0         long 0
20e5c                 | 
20e5c                 | ' Samples
20e5c                 | 
20e5c     00 00 00 00 | ls          long 0    ' Global sample variable
20e60     00 00 00 00 | rs          long 0
20e64                 | 
20e64     00 00 00 00 | ls1         long 0    ' Channel samples
20e68     00 00 00 00 | rs1         long 0
20e6c     00 00 00 00 | ls2         long 0
20e70     00 00 00 00 | rs2         long 0
20e74     00 00 00 00 | ls3         long 0
20e78     00 00 00 00 | rs3         long 0
20e7c     00 00 00 00 | rs4         long 0
20e80     00 00 00 00 | ls4         long 0
20e84     00 00 00 00 | rs5         long 0
20e88     00 00 00 00 | ls5         long 0
20e8c     00 00 00 00 | rs6         long 0
20e90     00 00 00 00 | ls6         long 0
20e94     00 00 00 00 | rs7         long 0
20e98     00 00 00 00 | ls7         long 0
20e9c     00 00 00 00 | rs8         long 0
20ea0     00 00 00 00 | ls8         long 0
20ea4                 | 
20ea4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
20ea8                 | 
20ea8     00 00 00 00 
20eac     00 00 00 00 | null  			long 	0,0           ' for channel reset
20eb0     73 32 00 04 
20eb4     00 00 10 00 
20eb8     00 00 00 00 
20ebc     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
20ec0     00 00 C9 00 
20ec4     92 01 5B 02 
20ec8     24 03 ED 03 
20ecc     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
20ed0     48 06 11 07 
20ed4     D9 07 A2 08 
20ed8     6A 09 33 0A 
20edc     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
20ee0     8C 0C 54 0D 
20ee4     1C 0E E3 0E 
20ee8     AB 0F 72 10 
20eec     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
20ef0     C8 12 8F 13 
20ef4     55 14 1C 15 
20ef8     E2 15 A8 16 
20efc     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
20f00     F9 18 BE 19 
20f04     82 1A 47 1B 
20f08     0B 1C CF 1C 
20f0c     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
20f10     1A 1F DD 1F 
20f14     9F 20 61 21 
20f18     23 22 E5 22 
20f1c     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
20f20     28 25 E8 25 
20f24     A8 26 67 27 
20f28     26 28 E5 28 
20f2c     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
20f30     1F 2B DC 2B 
20f34     99 2C 55 2D 
20f38     11 2E CC 2E 
20f3c     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
20f40     FB 30 B5 31 
20f44     6E 32 26 33 
20f48     DF 33 96 34 
20f4c     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
20f50     BA 36 6F 37 
20f54     24 38 D9 38 
20f58     8C 39 40 3A 
20f5c     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
20f60     56 3C 07 3D 
20f64     B8 3D 68 3E 
20f68     17 3F C5 3F 
20f6c     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
20f70     CE 41 7A 42 
20f74     25 43 D0 43 
20f78     7A 44 24 45 
20f7c     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
20f80     1C 47 C3 47 
20f84     69 48 0F 49 
20f88     B4 49 58 4A 
20f8c     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
20f90     3F 4C E0 4C 
20f94     81 4D 20 4E 
20f98     BF 4E 5D 4F 
20f9c     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
20fa0     33 51 CE 51 
20fa4     68 52 02 53 
20fa8     9B 53 32 54 
20fac     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
20fb0     F5 55 8A 56 
20fb4     1D 57 B0 57 
20fb8     42 58 D3 58 
20fbc     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
20fc0     82 5A 0F 5B 
20fc4     9C 5B 28 5C 
20fc8     B3 5C 3E 5D 
20fcc     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
20fd0     D7 5E 5D 5F 
20fd4     E3 5F 68 60 
20fd8     EB 60 6E 61 
20fdc     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
20fe0     F1 62 70 63 
20fe4     EE 63 6C 64 
20fe8     E8 64 63 65 
20fec     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
20ff0     CF 66 46 67 
20ff4     BC 67 32 68 
20ff8     A6 68 19 69 
20ffc     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
21000     6D 6A DC 6A 
21004     4A 6B B7 6B 
21008     23 6C 8E 6C 
2100c     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
21010     C9 6D 30 6E 
21014     96 6E FB 6E 
21018     5E 6F C1 6F 
2101c     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
21020     E2 70 40 71 
21024     9D 71 F9 71 
21028     54 72 AE 72 
2102c     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
21030     B5 73 0A 74 
21034     5F 74 B2 74 
21038     04 75 55 75 
2103c     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
21040     41 76 8D 76 
21044     D8 76 22 77 
21048     6B 77 B3 77 
2104c     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
21050     84 78 C7 78 
21054     09 79 4A 79 
21058     89 79 C8 79 
2105c     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
21060     7C 7A B6 7A 
21064     EE 7A 26 7B 
21068     5C 7B 91 7B 
2106c     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
21070     29 7C 59 7C 
21074     88 7C B6 7C 
21078     E3 7C 0E 7D 
2107c     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
21080     89 7D B0 7D 
21084     D5 7D FA 7D 
21088     1D 7E 3E 7E 
2108c     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
21090     9C 7E B9 7E 
21094     D5 7E EF 7E 
21098     09 7F 21 7F 
2109c     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
210a0     61 7F 74 7F 
210a4     86 7F 97 7F 
210a8     A6 7F B4 7F 
210ac     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
210b0     D8 7F E1 7F 
210b4     E9 7F F0 7F 
210b8     F5 7F F9 7F 
210bc     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
210c0     FF 7F FE 7F 
210c4     FD 7F F9 7F 
210c8     F5 7F F0 7F 
210cc     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
210d0     D8 7F CD 7F 
210d4     C1 7F B4 7F 
210d8     A6 7F 97 7F 
210dc     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
210e0     61 7F 4D 7F 
210e4     37 7F 21 7F 
210e8     09 7F EF 7E 
210ec     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
210f0     9C 7E 7E 7E 
210f4     5F 7E 3E 7E 
210f8     1D 7E FA 7D 
210fc     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
21100     89 7D 62 7D 
21104     39 7D 0E 7D 
21108     E3 7C B6 7C 
2110c     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
21110     29 7C F8 7B 
21114     C5 7B 91 7B 
21118     5C 7B 26 7B 
2111c     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
21120     7C 7A 41 7A 
21124     05 7A C8 79 
21128     89 79 4A 79 
2112c     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
21130     84 78 3F 78 
21134     FA 77 B3 77 
21138     6B 77 22 77 
2113c     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
21140     41 76 F3 75 
21144     A5 75 55 75 
21148     04 75 B2 74 
2114c     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
21150     B5 73 5E 73 
21154     07 73 AE 72 
21158     54 72 F9 71 
2115c     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
21160     E2 70 83 70 
21164     22 70 C1 6F 
21168     5E 6F FB 6E 
2116c     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
21170     C9 6D 61 6D 
21174     F8 6C 8E 6C 
21178     23 6C B7 6B 
2117c     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
21180     6D 6A FD 69 
21184     8B 69 19 69 
21188     A6 68 32 68 
2118c     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
21190     CF 66 56 66 
21194     DD 65 63 65 
21198     E8 64 6C 64 
2119c     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
211a0     F1 62 71 62 
211a4     F0 61 6E 61 
211a8     EB 60 68 60 
211ac     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
211b0     D7 5E 4F 5E 
211b4     C7 5D 3E 5D 
211b8     B3 5C 28 5C 
211bc     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
211c0     82 5A F3 59 
211c4     64 59 D3 58 
211c8     42 58 B0 57 
211cc     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
211d0     F5 55 60 55 
211d4     C9 54 32 54 
211d8     9B 53 02 53 
211dc     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
211e0     33 51 97 50 
211e4     FB 4F 5D 4F 
211e8     BF 4E 20 4E 
211ec     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
211f0     3F 4C 9D 4B 
211f4     FB 4A 58 4A 
211f8     B4 49 0F 49 
211fc     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
21200     1C 47 75 46 
21204     CD 45 24 45 
21208     7A 44 D0 43 
2120c     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
21210     CE 41 21 41 
21214     73 40 C5 3F 
21218     17 3F 68 3E 
2121c     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
21220     56 3C A5 3B 
21224     F2 3A 40 3A 
21228     8C 39 D9 38 
2122c     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
21230     BA 36 04 36 
21234     4D 35 96 34 
21238     DF 33 26 33 
2123c     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
21240     FB 30 41 30 
21244     87 2F CC 2E 
21248     11 2E 55 2D 
2124c     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
21250     1F 2B 61 2A 
21254     A3 29 E5 28 
21258     26 28 67 27 
2125c     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
21260     28 25 67 24 
21264     A6 23 E5 22 
21268     23 22 61 21 
2126c     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
21270     1A 1F 57 1E 
21274     93 1D CF 1C 
21278     0B 1C 47 1B 
2127c     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
21280     F9 18 33 18 
21284     6E 17 A8 16 
21288     E2 15 1C 15 
2128c     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
21290     C8 12 01 12 
21294     3A 11 72 10 
21298     AB 0F E3 0E 
2129c     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
212a0     8C 0C C4 0B 
212a4     FB 0A 33 0A 
212a8     6A 09 A2 08 
212ac     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
212b0     48 06 7F 05 
212b4     B6 04 ED 03 
212b8     24 03 5B 02 
212bc     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
212c0     00 00 37 FF 
212c4     6E FE A5 FD 
212c8     DC FC 13 FC 
212cc     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
212d0     B8 F9 EF F8 
212d4     27 F8 5E F7 
212d8     96 F6 CD F5 
212dc     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
212e0     74 F3 AC F2 
212e4     E4 F1 1D F1 
212e8     55 F0 8E EF 
212ec     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
212f0     38 ED 71 EC 
212f4     AB EB E4 EA 
212f8     1E EA 58 E9 
212fc     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
21300     07 E7 42 E6 
21304     7E E5 B9 E4 
21308     F5 E3 31 E3 
2130c     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
21310     E6 E0 23 E0 
21314     61 DF 9F DE 
21318     DD DD 1B DD 
2131c     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
21320     D8 DA 18 DA 
21324     58 D9 99 D8 
21328     DA D7 1B D7 
2132c     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
21330     E1 D4 24 D4 
21334     67 D3 AB D2 
21338     EF D1 34 D1 
2133c     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
21340     05 CF 4B CE 
21344     92 CD DA CC 
21348     21 CC 6A CB 
2134c     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
21350     46 C9 91 C8 
21354     DC C7 27 C7 
21358     74 C6 C0 C5 
2135c     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
21360     AA C3 F9 C2 
21364     48 C2 98 C1 
21368     E9 C0 3B C0 
2136c     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
21370     32 BE 86 BD 
21374     DB BC 30 BC 
21378     86 BB DC BA 
2137c     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
21380     E4 B8 3D B8 
21384     97 B7 F1 B6 
21388     4C B6 A8 B5 
2138c     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
21390     C1 B3 20 B3 
21394     7F B2 E0 B1 
21398     41 B1 A3 B0 
2139c     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
213a0     CD AE 32 AE 
213a4     98 AD FE AC 
213a8     65 AC CE AB 
213ac     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
213b0     0B AA 76 A9 
213b4     E3 A8 50 A8 
213b8     BE A7 2D A7 
213bc     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
213c0     7E A5 F1 A4 
213c4     64 A4 D8 A3 
213c8     4D A3 C2 A2 
213cc     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
213d0     29 A1 A3 A0 
213d4     1D A0 98 9F 
213d8     15 9F 92 9E 
213dc     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
213e0     0F 9D 90 9C 
213e4     12 9C 94 9B 
213e8     18 9B 9D 9A 
213ec     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
213f0     31 99 BA 98 
213f4     44 98 CE 97 
213f8     5A 97 E7 96 
213fc     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
21400     93 95 24 95 
21404     B6 94 49 94 
21408     DD 93 72 93 
2140c     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
21410     37 92 D0 91 
21414     6A 91 05 91 
21418     A2 90 3F 90 
2141c     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
21420     1E 8F C0 8E 
21424     63 8E 07 8E 
21428     AC 8D 52 8D 
2142c     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
21430     4B 8C F6 8B 
21434     A1 8B 4E 8B 
21438     FC 8A AB 8A 
2143c     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
21440     BF 89 73 89 
21444     28 89 DE 88 
21448     95 88 4D 88 
2144c     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
21450     7C 87 39 87 
21454     F7 86 B6 86 
21458     77 86 38 86 
2145c     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
21460     84 85 4A 85 
21464     12 85 DA 84 
21468     A4 84 6F 84 
2146c     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
21470     D7 83 A7 83 
21474     78 83 4A 83 
21478     1D 83 F2 82 
2147c     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
21480     77 82 50 82 
21484     2B 82 06 82 
21488     E3 81 C2 81 
2148c     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
21490     64 81 47 81 
21494     2B 81 11 81 
21498     F7 80 DF 80 
2149c     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
214a0     9F 80 8C 80 
214a4     7A 80 69 80 
214a8     5A 80 4C 80 
214ac     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
214b0     28 80 1F 80 
214b4     17 80 10 80 
214b8     0B 80 07 80 
214bc     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
214c0     01 80 02 80 
214c4     03 80 07 80 
214c8     0B 80 10 80 
214cc     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
214d0     28 80 33 80 
214d4     3F 80 4C 80 
214d8     5A 80 69 80 
214dc     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
214e0     9F 80 B3 80 
214e4     C9 80 DF 80 
214e8     F7 80 11 81 
214ec     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
214f0     64 81 82 81 
214f4     A1 81 C2 81 
214f8     E3 81 06 82 
214fc     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
21500     77 82 9E 82 
21504     C7 82 F2 82 
21508     1D 83 4A 83 
2150c     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
21510     D7 83 08 84 
21514     3B 84 6F 84 
21518     A4 84 DA 84 
2151c     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
21520     84 85 BF 85 
21524     FB 85 38 86 
21528     77 86 B6 86 
2152c     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
21530     7C 87 C1 87 
21534     06 88 4D 88 
21538     95 88 DE 88 
2153c     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
21540     BF 89 0D 8A 
21544     5B 8A AB 8A 
21548     FC 8A 4E 8B 
2154c     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
21550     4B 8C A2 8C 
21554     F9 8C 52 8D 
21558     AC 8D 07 8E 
2155c     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
21560     1E 8F 7D 8F 
21564     DE 8F 3F 90 
21568     A2 90 05 91 
2156c     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
21570     37 92 9F 92 
21574     08 93 72 93 
21578     DD 93 49 94 
2157c     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
21580     93 95 03 96 
21584     75 96 E7 96 
21588     5A 97 CE 97 
2158c     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
21590     31 99 AA 99 
21594     23 9A 9D 9A 
21598     18 9B 94 9B 
2159c     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
215a0     0F 9D 8F 9D 
215a4     10 9E 92 9E 
215a8     15 9F 98 9F 
215ac     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
215b0     29 A1 B1 A1 
215b4     39 A2 C2 A2 
215b8     4D A3 D8 A3 
215bc     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
215c0     7E A5 0D A6 
215c4     9C A6 2D A7 
215c8     BE A7 50 A8 
215cc     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
215d0     0B AA A0 AA 
215d4     37 AB CE AB 
215d8     65 AC FE AC 
215dc     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
215e0     CD AE 69 AF 
215e4     05 B0 A3 B0 
215e8     41 B1 E0 B1 
215ec     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
215f0     C1 B3 63 B4 
215f4     05 B5 A8 B5 
215f8     4C B6 F1 B6 
215fc     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
21600     E4 B8 8B B9 
21604     33 BA DC BA 
21608     86 BB 30 BC 
2160c     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
21610     32 BE DF BE 
21614     8D BF 3B C0 
21618     E9 C0 98 C1 
2161c     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
21620     AA C3 5B C4 
21624     0E C5 C0 C5 
21628     74 C6 27 C7 
2162c     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
21630     46 C9 FC C9 
21634     B3 CA 6A CB 
21638     21 CC DA CC 
2163c     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
21640     05 CF BF CF 
21644     79 D0 34 D1 
21648     EF D1 AB D2 
2164c     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
21650     E1 D4 9F D5 
21654     5D D6 1B D7 
21658     DA D7 99 D8 
2165c     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
21660     D8 DA 99 DB 
21664     5A DC 1B DD 
21668     DD DD 9F DE 
2166c     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
21670     E6 E0 A9 E1 
21674     6D E2 31 E3 
21678     F5 E3 B9 E4 
2167c     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
21680     07 E7 CD E7 
21684     92 E8 58 E9 
21688     1E EA E4 EA 
2168c     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
21690     38 ED FF ED 
21694     C6 EE 8E EF 
21698     55 F0 1D F1 
2169c     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
216a0     74 F3 3C F4 
216a4     05 F5 CD F5 
216a8     96 F6 5E F7 
216ac     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
216b0     B8 F9 81 FA 
216b4     4A FB 13 FC 
216b8     DC FC A5 FD 
216bc     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
216c0                 | 	alignl
216c0                 | __system__dat_
216c0     00 00 00 00 
216c4     00 00 00 00 | 	byte	$00[8]
216c8     03 00 00 00 
216cc     00 00 00 00 
216d0     00 00 00 00 
216d4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
216d8     00 00 00 00 
216dc     00 00 00 00 
216e0     00 00 00 00 | 	byte	$00[12]
216e4     05 00 00 00 
216e8     00 00 00 00 
216ec     00 00 00 00 
216f0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
216f4     BC 18 02 00 | 	long	@@@__system__dat_ + 508
216f8     C4 18 02 00 | 	long	@@@__system__dat_ + 516
216fc     00 00 00 00 | 	byte	$00, $00, $00, $00
21700     CC 18 02 00 | 	long	@@@__system__dat_ + 524
21704     D4 18 02 00 | 	long	@@@__system__dat_ + 532
21708     00 00 00 00 
2170c     00 00 00 00 | 	byte	$00[8]
21710     01 00 00 00 
21714     06 00 00 00 
21718     00 00 00 00 
2171c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
21720     00 00 00 00 | 	byte	$00, $00, $00, $00
21724     DC 18 02 00 | 	long	@@@__system__dat_ + 540
21728     E4 18 02 00 | 	long	@@@__system__dat_ + 548
2172c     00 00 00 00 | 	byte	$00, $00, $00, $00
21730     EC 18 02 00 | 	long	@@@__system__dat_ + 556
21734     F4 18 02 00 | 	long	@@@__system__dat_ + 564
21738     00 00 00 00 
2173c     00 00 00 00 | 	byte	$00[8]
21740     01 00 00 00 
21744     06 00 00 00 
21748     00 00 00 00 
2174c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
21750     00 00 00 00 | 	byte	$00, $00, $00, $00
21754     FC 18 02 00 | 	long	@@@__system__dat_ + 572
21758     04 19 02 00 | 	long	@@@__system__dat_ + 580
2175c     00 00 00 00 | 	byte	$00, $00, $00, $00
21760     0C 19 02 00 | 	long	@@@__system__dat_ + 588
21764     14 19 02 00 | 	long	@@@__system__dat_ + 596
21768     00 00 00 00 
      ...             
218b8     00 00 00 00 
218bc     00 00 00 00 | 	byte	$00[344]
218c0     E8 5F 00 00 | 	long	@@@__system___tx
218c4     00 00 00 00 | 	byte	$00, $00, $00, $00
218c8     30 60 00 00 | 	long	@@@__system___rx
218cc     00 00 00 00 | 	byte	$00, $00, $00, $00
218d0     18 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
218d4     00 00 00 00 | 	byte	$00, $00, $00, $00
218d8     90 7A 00 00 | 	long	@@@__system____dummy_flush_0175
218dc     00 00 00 00 | 	byte	$00, $00, $00, $00
218e0     E8 5F 00 00 | 	long	@@@__system___tx
218e4     00 00 00 00 | 	byte	$00, $00, $00, $00
218e8     30 60 00 00 | 	long	@@@__system___rx
218ec     00 00 00 00 | 	byte	$00, $00, $00, $00
218f0     18 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
218f4     00 00 00 00 | 	byte	$00, $00, $00, $00
218f8     90 7A 00 00 | 	long	@@@__system____dummy_flush_0175
218fc     00 00 00 00 | 	byte	$00, $00, $00, $00
21900     E8 5F 00 00 | 	long	@@@__system___tx
21904     00 00 00 00 | 	byte	$00, $00, $00, $00
21908     30 60 00 00 | 	long	@@@__system___rx
2190c     00 00 00 00 | 	byte	$00, $00, $00, $00
21910     18 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
21914     00 00 00 00 | 	byte	$00, $00, $00, $00
21918     90 7A 00 00 | 	long	@@@__system____dummy_flush_0175
2191c     00 00 00 00 | 	byte	$00, $00, $00, $00
21920                 | __heap_base
21920     00 00 00 00 
      ...             
22920     00 00 00 00 
22924     00 00 00 00 | 	long	0[1026]
22928                 | objmem
22928     00 00 00 00 | 	long	0[1]
2292c 118             | 	org	COG_BSS_START
2292c 118             | _var01
2292c 118             | 	res	1
2292c 119             | _var02
2292c 119             | 	res	1
2292c 11a             | _var03
2292c 11a             | 	res	1
2292c 11b             | _var04
2292c 11b             | 	res	1
2292c 11c             | _var05
2292c 11c             | 	res	1
2292c 11d             | _var06
2292c 11d             | 	res	1
2292c 11e             | _var07
2292c 11e             | 	res	1
2292c 11f             | _var08
2292c 11f             | 	res	1
2292c 120             | _var09
2292c 120             | 	res	1
2292c 121             | _var10
2292c 121             | 	res	1
2292c 122             | _var11
2292c 122             | 	res	1
2292c 123             | _var12
2292c 123             | 	res	1
2292c 124             | _var13
2292c 124             | 	res	1
2292c 125             | _var14
2292c 125             | 	res	1
2292c 126             | _var15
2292c 126             | 	res	1
2292c 127             | _var16
2292c 127             | 	res	1
2292c 128             | _var17
2292c 128             | 	res	1
2292c 129             | _var18
2292c 129             | 	res	1
2292c 12a             | _var19
2292c 12a             | 	res	1
2292c 12b             | _var20
2292c 12b             | 	res	1
2292c 12c             | _var21
2292c 12c             | 	res	1
2292c 12d             | _var22
2292c 12d             | 	res	1
2292c 12e             | arg01
2292c 12e             | 	res	1
2292c 12f             | arg02
2292c 12f             | 	res	1
2292c 130             | arg03
2292c 130             | 	res	1
2292c 131             | arg04
2292c 131             | 	res	1
2292c 132             | arg05
2292c 132             | 	res	1
2292c 133             | arg06
2292c 133             | 	res	1
2292c 134             | arg07
2292c 134             | 	res	1
2292c 135             | local01
2292c 135             | 	res	1
2292c 136             | local02
2292c 136             | 	res	1
2292c 137             | local03
2292c 137             | 	res	1
2292c 138             | local04
2292c 138             | 	res	1
2292c 139             | local05
2292c 139             | 	res	1
2292c 13a             | local06
2292c 13a             | 	res	1
2292c 13b             | local07
2292c 13b             | 	res	1
2292c 13c             | local08
2292c 13c             | 	res	1
2292c 13d             | local09
2292c 13d             | 	res	1
2292c 13e             | local10
2292c 13e             | 	res	1
2292c 13f             | local11
2292c 13f             | 	res	1
2292c 140             | local12
2292c 140             | 	res	1
2292c 141             | local13
2292c 141             | 	res	1
2292c 142             | local14
2292c 142             | 	res	1
2292c 143             | local15
2292c 143             | 	res	1
2292c 144             | local16
2292c 144             | 	res	1
2292c 145             | local17
2292c 145             | 	res	1
2292c 146             | local18
2292c 146             | 	res	1
2292c 147             | local19
2292c 147             | 	res	1
2292c 148             | local20
2292c 148             | 	res	1
2292c 149             | local21
2292c 149             | 	res	1
2292c 14a             | local22
2292c 14a             | 	res	1
2292c 14b             | local23
2292c 14b             | 	res	1
2292c 14c             | local24
2292c 14c             | 	res	1
2292c 14d             | local25
2292c 14d             | 	res	1
2292c 14e             | local26
2292c 14e             | 	res	1
2292c 14f             | local27
2292c 14f             | 	res	1
2292c 150             | local28
2292c 150             | 	res	1
2292c 151             | local29
2292c 151             | 	res	1
2292c 152             | local30
2292c 152             | 	res	1
2292c 153             | local31
2292c 153             | 	res	1
2292c 154             | local32
2292c 154             | 	res	1
2292c 155             | local33
2292c 155             | 	res	1
2292c 156             | local34
2292c 156             | 	res	1
2292c 157             | local35
2292c 157             | 	res	1
2292c 158             | local36
2292c 158             | 	res	1
2292c 159             | local37
2292c 159             | 	res	1
2292c 15a             | local38
2292c 15a             | 	res	1
2292c 15b             | local39
2292c 15b             | 	res	1
2292c 15c             | local40
2292c 15c             | 	res	1
2292c 15d             | local41
2292c 15d             | 	res	1
2292c 15e             | local42
2292c 15e             | 	res	1
2292c 15f             | local43
2292c 15f             | 	res	1
2292c 160             | local44
2292c 160             | 	res	1
2292c 161             | local45
2292c 161             | 	res	1
2292c 162             | local46
2292c 162             | 	res	1
2292c 163             | local47
2292c 163             | 	res	1
2292c 164             | local48
2292c 164             | 	res	1
2292c 165             | local49
2292c 165             | 	res	1
2292c 166             | local50
2292c 166             | 	res	1
2292c 167             | local51
2292c 167             | 	res	1
2292c 168             | local52
2292c 168             | 	res	1
2292c 169             | local53
2292c 169             | 	res	1
2292c 16a             | local54
2292c 16a             | 	res	1
2292c 16b             | local55
2292c 16b             | 	res	1
2292c 16c             | local56
2292c 16c             | 	res	1
2292c 16d             | local57
2292c 16d             | 	res	1
2292c 16e             | local58
2292c 16e             | 	res	1
2292c 16f             | local59
2292c 16f             | 	res	1
2292c 170             | local60
2292c 170             | 	res	1
2292c 171             | local61
2292c 171             | 	res	1
2292c 172             | local62
2292c 172             | 	res	1
2292c 173             | local63
2292c 173             | 	res	1
2292c 174             | local64
2292c 174             | 	res	1
2292c 175             | local65
2292c 175             | 	res	1
2292c 176             | local66
2292c 176             | 	res	1
2292c 177             | local67
2292c 177             | 	res	1
2292c 178             | local68
2292c 178             | 	res	1
2292c 179             | local69
2292c 179             | 	res	1
2292c 17a             | local70
2292c 17a             | 	res	1
2292c 17b             | local71
2292c 17b             | 	res	1
2292c 17c             | local72
2292c 17c             | 	res	1
2292c 17d             | local73
2292c 17d             | 	res	1
2292c 17e             | local74
2292c 17e             | 	res	1
2292c 17f             | local75
2292c 17f             | 	res	1
2292c 180             | local76
2292c 180             | 	res	1
2292c 181             | local77
2292c 181             | 	res	1
2292c 182             | local78
2292c 182             | 	res	1
2292c 183             | local79
2292c 183             | 	res	1
2292c 184             | local80
2292c 184             | 	res	1
2292c 185             | muldiva_
2292c 185             | 	res	1
2292c 186             | muldivb_
2292c 186             | 	res	1
2292c 187             | 	fit	480
2292c 187             | 
