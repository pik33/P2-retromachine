00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player2.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2C 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 15 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 D8 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 72 62 FD | 	cogid	arg01
00614 084 03 72 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2D 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 73 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 75 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 77 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 79 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2C 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 76 56 F0 |         shr	arg03, #1 wc
00688 0a1 39 75 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 72 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 74 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 76 56 F0 |         shr	arg03, #1 wc
00698 0a5 39 75 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 72 06 C1 |  if_c   add	arg01, #2
006a0 0a7 3A 75 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 39 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 76 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 3B 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 74 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 81 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 81 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 58 AF 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 B0 62 FD |        getqx   muldivb_
00740 0cf 19 AE 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 57 AF 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 58 B1 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 57 AF 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 58 B1 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2C 06 F6 |     mov result1, #0
00778 0dd 00 2E 06 F6 |     mov result2, #0
0077c 0de 39 07 02 F6 |     mov abortchain, arg01
00780 0df 39 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 72 06 F1 |     add arg01, #4
00788 0e1 39 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 72 06 F1 |     add arg01, #4
00790 0e3 39 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 72 06 F1 |     add arg01, #4
00798 0e5 39 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 3A 73 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 39 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 72 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 72 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 3A 2D 02 F6 |     mov result1, arg02
007d4 0f4 01 2E 06 F6 |     mov result2, #1
007d8 0f5 39 75 02 FB |     rdlong arg02, arg01
007dc 0f6 04 72 06 F1 |     add arg01, #4
007e0 0f7 39 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 72 06 F1 |     add arg01, #4
007e8 0f9 39 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 72 06 F1 |     add arg01, #4
007f0 0fb 39 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 72 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 76 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 6C D3 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 74 E3 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 38 84 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 80 83 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a 0C D1 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio018_spin2_dat__
00830 10b F8 C5 01 00 | 	long	@_audio018_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 5C 85 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 70 90 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e 18 23 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 24 1D 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 10 1E 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 FC 1E 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 E8 1F 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 74 34 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 D4 B4 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | ptr_stackspace_
00858 115 9C EC 01 00 | 	long	@stackspace
0085c 116             | result1
0085c 116 00 00 00 00 | 	long	0
00860 117             | result2
00860 117 00 00 00 00 | 	long	0
00864 118             | result3
00864 118 00 00 00 00 | 	long	0
00868 119             | COG_BSS_START
00868 119             | 	fit	480
00868                 | 	orgh
00868                 | hubentry
00868                 | 
00868                 | ' 
00868                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00868                 | _startvideo
00868     FC 29 B0 FD | 	call	#_hng030rm_spin2_start
0086c     00 72 06 F6 | 	mov	arg01, #0
00870     00 74 06 F6 | 	mov	arg02, #0
00874     00 76 06 F6 | 	mov	arg03, #0
00878     64 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
0087c                 | ' v030.start(mode,pin)
0087c                 | ' v030.setbordercolor(0,0,0)
0087c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
0087c     07 73 02 F6 | 	mov	arg01, objptr
00880     0E 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00884     DC 58 B0 FD | 	call	#__system___make_methodptr
00888     00 30 06 F6 | 	mov	result3, #0
0088c     00 2E 06 F6 | 	mov	result2, #0
00890     16 75 02 F6 | 	mov	arg02, result1
00894     00 76 06 F6 | 	mov	arg03, #0
00898     00 78 06 F6 | 	mov	arg04, #0
0089c     00 72 06 F6 | 	mov	arg01, #0
008a0     98 5B B0 FD | 	call	#__system___basic_open
008a4     00 2C 06 F6 | 	mov	result1, #0
008a8                 | _startvideo_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' function addr(byref v as any)
008ac                 | _addr
008ac     00 5A 05 F6 | 	mov	COUNT_, #0
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     08 F0 07 F1 | 	add	ptra, #8
008b8     04 5E 05 F1 | 	add	fp, #4
008bc     AF 72 62 FC | 	wrlong	arg01, fp
008c0                 | ' 
008c0                 | ' return(cast(ulong,@v))
008c0     39 2D 02 F6 | 	mov	result1, arg01
008c4     04 5E 85 F1 | 	sub	fp, #4
008c8     AF F0 03 F6 | 	mov	ptra, fp
008cc     BF 00 A0 FD | 	call	#popregs_
008d0                 | _addr_ret
008d0     2D 00 64 FD | 	ret
008d4                 | 
008d4                 | ' 
008d4                 | ' '0 - samplestart   - a pointer to the sample start
008d4                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008d4                 | ' '2 - loopstart     - loop start
008d4                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008d4                 | ' '4 - volume        - sample volume, 16384=1
008d4                 | ' '5 - pan           - 0..16384
008d4                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008d4                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008d4                 | ' '8 - cmd 
008d4                 | ' 
008d4                 | ' 
008d4                 | ' sub test 
008d4                 | _test
008d4     01 5A 05 F6 | 	mov	COUNT_, #1
008d8     B0 00 A0 FD | 	call	#pushregs_
008dc     1D 74 06 F6 | 	mov	arg02, #29
008e0                 | ' 
008e0                 | ' ''---------- Set the (x,y) position of cursor
008e0                 | ' 
008e0                 | ' cursor_x:=x
008e0     34 0E 06 F1 | 	add	objptr, #52
008e4     07 0B 48 FC | 	wrbyte	#5, objptr
008e8                 | ' cursor_y:=y
008e8     01 0E 06 F1 | 	add	objptr, #1
008ec     07 3B 48 FC | 	wrbyte	#29, objptr
008f0     02 00 00 FF 
008f4     CA 0F 06 F1 | 	add	objptr, ##1482
008f8     07 81 C2 FA | 	rdbyte	local01, objptr
008fc     02 80 66 F0 | 	shl	local01, #2
00900     01 00 00 FF 
00904     65 0E 06 F1 | 	add	objptr, ##613
00908     07 81 02 F1 | 	add	local01, objptr
0090c     40 73 02 FB | 	rdlong	arg01, local01
00910     04 00 00 FF 
00914     64 0E 86 F1 | 	sub	objptr, ##2148
00918     88 1B B0 FD | 	call	#_hng030rm_spin2_write
0091c     04 00 00 FF 
00920     F0 0E 06 F1 | 	add	objptr, ##2288
00924     07 73 02 FB | 	rdlong	arg01, objptr
00928     04 00 00 FF 
0092c     F0 0E 86 F1 | 	sub	objptr, ##2288
00930     70 1B B0 FD | 	call	#_hng030rm_spin2_write
00934                 | ' 
00934                 | ' ''---------- Set the (x,y) position of cursor
00934                 | ' 
00934                 | ' cursor_x:=x
00934     34 0E 06 F1 | 	add	objptr, #52
00938     07 03 48 FC | 	wrbyte	#1, objptr
0093c                 | ' cursor_y:=y
0093c     01 0E 06 F1 | 	add	objptr, #1
00940     07 3B 48 FC | 	wrbyte	#29, objptr
00944     02 00 00 FF 
00948     F2 0F 06 F1 | 	add	objptr, ##1522
0094c     07 73 02 FB | 	rdlong	arg01, objptr
00950     10 0E 06 F1 | 	add	objptr, #16
00954     07 81 02 FB | 	rdlong	local01, objptr
00958     03 00 00 FF 
0095c     37 0E 86 F1 | 	sub	objptr, ##1591
00960     40 73 02 F1 | 	add	arg01, local01
00964     03 74 06 F6 | 	mov	arg02, #3
00968     60 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
0096c     16 73 02 F6 | 	mov	arg01, result1
00970     30 1B B0 FD | 	call	#_hng030rm_spin2_write
00974     1D 74 06 F6 | 	mov	arg02, #29
00978                 | ' 
00978                 | ' ''---------- Set the (x,y) position of cursor
00978                 | ' 
00978                 | ' cursor_x:=x
00978     34 0E 06 F1 | 	add	objptr, #52
0097c     07 41 48 FC | 	wrbyte	#32, objptr
00980                 | ' cursor_y:=y
00980     01 0E 06 F1 | 	add	objptr, #1
00984     07 3B 48 FC | 	wrbyte	#29, objptr
00988     02 00 00 FF 
0098c     CB 0F 06 F1 | 	add	objptr, ##1483
00990     07 81 C2 FA | 	rdbyte	local01, objptr
00994     02 80 66 F0 | 	shl	local01, #2
00998     01 00 00 FF 
0099c     64 0E 06 F1 | 	add	objptr, ##612
009a0     07 81 02 F1 | 	add	local01, objptr
009a4     40 73 02 FB | 	rdlong	arg01, local01
009a8     04 00 00 FF 
009ac     64 0E 86 F1 | 	sub	objptr, ##2148
009b0     F0 1A B0 FD | 	call	#_hng030rm_spin2_write
009b4     04 00 00 FF 
009b8     F0 0E 06 F1 | 	add	objptr, ##2288
009bc     07 73 02 FB | 	rdlong	arg01, objptr
009c0     04 00 00 FF 
009c4     F0 0E 86 F1 | 	sub	objptr, ##2288
009c8     D8 1A B0 FD | 	call	#_hng030rm_spin2_write
009cc                 | ' 
009cc                 | ' ''---------- Set the (x,y) position of cursor
009cc                 | ' 
009cc                 | ' cursor_x:=x
009cc     34 0E 06 F1 | 	add	objptr, #52
009d0     07 39 48 FC | 	wrbyte	#28, objptr
009d4                 | ' cursor_y:=y
009d4     01 0E 06 F1 | 	add	objptr, #1
009d8     07 3B 48 FC | 	wrbyte	#29, objptr
009dc     02 00 00 FF 
009e0     F6 0F 06 F1 | 	add	objptr, ##1526
009e4     07 73 02 FB | 	rdlong	arg01, objptr
009e8     10 0E 06 F1 | 	add	objptr, #16
009ec     07 81 02 FB | 	rdlong	local01, objptr
009f0     03 00 00 FF 
009f4     3B 0E 86 F1 | 	sub	objptr, ##1595
009f8     40 73 02 F1 | 	add	arg01, local01
009fc     03 74 06 F6 | 	mov	arg02, #3
00a00     C8 1D B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a04     16 73 02 F6 | 	mov	arg01, result1
00a08     98 1A B0 FD | 	call	#_hng030rm_spin2_write
00a0c     1D 74 06 F6 | 	mov	arg02, #29
00a10                 | ' 
00a10                 | ' ''---------- Set the (x,y) position of cursor
00a10                 | ' 
00a10                 | ' cursor_x:=x
00a10     34 0E 06 F1 | 	add	objptr, #52
00a14     07 79 48 FC | 	wrbyte	#60, objptr
00a18                 | ' cursor_y:=y
00a18     01 0E 06 F1 | 	add	objptr, #1
00a1c     07 3B 48 FC | 	wrbyte	#29, objptr
00a20     02 00 00 FF 
00a24     CC 0F 06 F1 | 	add	objptr, ##1484
00a28     07 81 C2 FA | 	rdbyte	local01, objptr
00a2c     02 80 66 F0 | 	shl	local01, #2
00a30     01 00 00 FF 
00a34     63 0E 06 F1 | 	add	objptr, ##611
00a38     07 81 02 F1 | 	add	local01, objptr
00a3c     40 73 02 FB | 	rdlong	arg01, local01
00a40     04 00 00 FF 
00a44     64 0E 86 F1 | 	sub	objptr, ##2148
00a48     58 1A B0 FD | 	call	#_hng030rm_spin2_write
00a4c     04 00 00 FF 
00a50     F0 0E 06 F1 | 	add	objptr, ##2288
00a54     07 73 02 FB | 	rdlong	arg01, objptr
00a58     04 00 00 FF 
00a5c     F0 0E 86 F1 | 	sub	objptr, ##2288
00a60     40 1A B0 FD | 	call	#_hng030rm_spin2_write
00a64                 | ' 
00a64                 | ' ''---------- Set the (x,y) position of cursor
00a64                 | ' 
00a64                 | ' cursor_x:=x
00a64     34 0E 06 F1 | 	add	objptr, #52
00a68     07 71 48 FC | 	wrbyte	#56, objptr
00a6c                 | ' cursor_y:=y
00a6c     01 0E 06 F1 | 	add	objptr, #1
00a70     07 3B 48 FC | 	wrbyte	#29, objptr
00a74     02 00 00 FF 
00a78     FA 0F 06 F1 | 	add	objptr, ##1530
00a7c     07 73 02 FB | 	rdlong	arg01, objptr
00a80     10 0E 06 F1 | 	add	objptr, #16
00a84     07 81 02 FB | 	rdlong	local01, objptr
00a88     03 00 00 FF 
00a8c     3F 0E 86 F1 | 	sub	objptr, ##1599
00a90     40 73 02 F1 | 	add	arg01, local01
00a94     03 74 06 F6 | 	mov	arg02, #3
00a98     30 1D B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a9c     16 73 02 F6 | 	mov	arg01, result1
00aa0     00 1A B0 FD | 	call	#_hng030rm_spin2_write
00aa4                 | ' 
00aa4                 | ' ''---------- Set the (x,y) position of cursor
00aa4                 | ' 
00aa4                 | ' cursor_x:=x
00aa4     34 0E 06 F1 | 	add	objptr, #52
00aa8     07 A9 48 FC | 	wrbyte	#84, objptr
00aac                 | ' cursor_y:=y
00aac     01 0E 06 F1 | 	add	objptr, #1
00ab0     07 3B 48 FC | 	wrbyte	#29, objptr
00ab4     02 00 00 FF 
00ab8     FE 0F 06 F1 | 	add	objptr, ##1534
00abc     07 73 02 FB | 	rdlong	arg01, objptr
00ac0     10 0E 06 F1 | 	add	objptr, #16
00ac4     07 81 02 FB | 	rdlong	local01, objptr
00ac8     03 00 00 FF 
00acc     43 0E 86 F1 | 	sub	objptr, ##1603
00ad0     40 73 02 F1 | 	add	arg01, local01
00ad4     03 74 06 F6 | 	mov	arg02, #3
00ad8     F0 1C B0 FD | 	call	#_hng030rm_spin2_inttostr2
00adc     16 73 02 F6 | 	mov	arg01, result1
00ae0     C0 19 B0 FD | 	call	#_hng030rm_spin2_write
00ae4     1D 74 06 F6 | 	mov	arg02, #29
00ae8                 | ' 
00ae8                 | ' ''---------- Set the (x,y) position of cursor
00ae8                 | ' 
00ae8                 | ' cursor_x:=x
00ae8     34 0E 06 F1 | 	add	objptr, #52
00aec     07 B1 48 FC | 	wrbyte	#88, objptr
00af0                 | ' cursor_y:=y
00af0     01 0E 06 F1 | 	add	objptr, #1
00af4     07 3B 48 FC | 	wrbyte	#29, objptr
00af8     02 00 00 FF 
00afc     CD 0F 06 F1 | 	add	objptr, ##1485
00b00     07 81 C2 FA | 	rdbyte	local01, objptr
00b04     02 80 66 F0 | 	shl	local01, #2
00b08     01 00 00 FF 
00b0c     62 0E 06 F1 | 	add	objptr, ##610
00b10     07 81 02 F1 | 	add	local01, objptr
00b14     40 73 02 FB | 	rdlong	arg01, local01
00b18     04 00 00 FF 
00b1c     64 0E 86 F1 | 	sub	objptr, ##2148
00b20     80 19 B0 FD | 	call	#_hng030rm_spin2_write
00b24     04 00 00 FF 
00b28     F0 0E 06 F1 | 	add	objptr, ##2288
00b2c     07 73 02 FB | 	rdlong	arg01, objptr
00b30     04 00 00 FF 
00b34     F0 0E 86 F1 | 	sub	objptr, ##2288
00b38     68 19 B0 FD | 	call	#_hng030rm_spin2_write
00b3c     AF F0 03 F6 | 	mov	ptra, fp
00b40     BF 00 A0 FD | 	call	#popregs_
00b44                 | _test_ret
00b44     2D 00 64 FD | 	ret
00b48                 | 
00b48                 | ' 
00b48                 | ' 
00b48                 | ' sub getinfo(ma,num)
00b48                 | _getinfo
00b48     0F 5A 05 F6 | 	mov	COUNT_, #15
00b4c     B0 00 A0 FD | 	call	#pushregs_
00b50     39 81 02 F6 | 	mov	local01, arg01
00b54     3A 83 02 F6 | 	mov	local02, arg02
00b58     04 74 06 F6 | 	mov	arg02, #4
00b5c                 | ' 
00b5c                 | ' ''---------- Set the (x,y) position of cursor
00b5c                 | ' 
00b5c                 | ' cursor_x:=x
00b5c     34 0E 06 F1 | 	add	objptr, #52
00b60     07 03 48 FC | 	wrbyte	#1, objptr
00b64                 | ' cursor_y:=y
00b64     01 0E 06 F1 | 	add	objptr, #1
00b68     07 09 48 FC | 	wrbyte	#4, objptr
00b6c     35 0E 86 F1 | 	sub	objptr, #53
00b70                 | ' 'v030. setwritecolors(170,147):
00b70                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b70     00 72 06 F6 | 	mov	arg01, #0
00b74     78 6D B0 FD | 	call	#__system___getiolock_0145
00b78     16 73 02 F6 | 	mov	arg01, result1
00b7c     24 56 B0 FD | 	call	#__system___lockmem
00b80     00 2C 06 F6 | 	mov	result1, #0
00b84     42 00 00 FF 
00b88     C6 74 06 F6 | 	mov	arg02, ##@LR__0453
00b8c     00 72 06 F6 | 	mov	arg01, #0
00b90     00 76 06 F6 | 	mov	arg03, #0
00b94     A4 59 B0 FD | 	call	#__system___basic_print_string
00b98     00 72 06 F6 | 	mov	arg01, #0
00b9c     0A 74 06 F6 | 	mov	arg02, #10
00ba0     00 76 06 F6 | 	mov	arg03, #0
00ba4     48 59 B0 FD | 	call	#__system___basic_print_char
00ba8     01 2C 06 F6 | 	mov	result1, #1
00bac     00 72 06 F6 | 	mov	arg01, #0
00bb0     3C 6D B0 FD | 	call	#__system___getiolock_0145
00bb4     16 01 68 FC | 	wrlong	#0, result1
00bb8     00 2C 06 F6 | 	mov	result1, #0
00bbc                 | ' ': v030. setwritecolors(154,147)
00bbc                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00bbc     00 84 06 F6 | 	mov	local03, #0
00bc0                 | LR__0001
00bc0     42 87 02 F6 | 	mov	local04, local03
00bc4     02 86 66 F0 | 	shl	local04, #2
00bc8     04 00 00 FF 
00bcc     64 0E 06 F1 | 	add	objptr, ##2148
00bd0     07 87 02 F1 | 	add	local04, objptr
00bd4     42 00 00 FF 
00bd8     2F 89 06 F6 | 	mov	local05, ##@LR__0454
00bdc     42 73 02 F6 | 	mov	arg01, local03
00be0     02 74 06 F6 | 	mov	arg02, #2
00be4     04 00 00 FF 
00be8     64 0E 86 F1 | 	sub	objptr, ##2148
00bec     0A 76 06 F6 | 	mov	arg03, #10
00bf0     58 5E B0 FD | 	call	#__system__Number_S
00bf4     16 75 02 F6 | 	mov	arg02, result1
00bf8     44 73 02 F6 | 	mov	arg01, local05
00bfc     DC 55 B0 FD | 	call	#__system___string_concat
00c00     16 8B 02 F6 | 	mov	local06, result1
00c04     13 72 06 F6 | 	mov	arg01, #19
00c08     42 00 00 FF 
00c0c     70 74 06 F6 | 	mov	arg02, ##@LR__0447
00c10     04 5F B0 FD | 	call	#__system__String_S
00c14     16 75 02 F6 | 	mov	arg02, result1
00c18     45 73 02 F6 | 	mov	arg01, local06
00c1c     BC 55 B0 FD | 	call	#__system___string_concat
00c20     43 2D 62 FC | 	wrlong	result1, local04
00c24     01 84 06 F1 | 	add	local03, #1
00c28     20 84 5E F2 | 	cmps	local03, #32 wcz
00c2c     90 FF 9F CD |  if_b	jmp	#LR__0001
00c30                 | ' for i=1 to num
00c30     01 84 06 F6 | 	mov	local03, #1
00c34     01 82 06 F1 | 	add	local02, #1
00c38                 | LR__0002
00c38     41 85 5A F2 | 	cmps	local03, local02 wcz
00c3c     54 08 90 3D |  if_ae	jmp	#LR__0007
00c40                 | '   for j=0 to 21
00c40     00 8C 06 F6 | 	mov	local07, #0
00c44                 | LR__0003
00c44     42 73 02 F6 | 	mov	arg01, local03
00c48     02 72 66 F0 | 	shl	arg01, #2
00c4c     04 00 00 FF 
00c50     64 0E 06 F1 | 	add	objptr, ##2148
00c54     07 73 02 F1 | 	add	arg01, objptr
00c58     04 00 00 FF 
00c5c     64 0E 86 F1 | 	sub	objptr, ##2148
00c60     48 FC BF FD | 	call	#_addr
00c64                 | ' asm
00c64     16 8F 02 FB | 	rdlong	local08, result1
00c68                 | ' return r
00c68     04 00 00 FF 
00c6c     0C 0F 06 F1 | 	add	objptr, ##2316
00c70     07 8F 62 FC | 	wrlong	local08, objptr
00c74     40 73 02 F6 | 	mov	arg01, local01
00c78     14 72 06 F1 | 	add	arg01, #20
00c7c     42 91 02 F6 | 	mov	local09, local03
00c80     01 90 86 F1 | 	sub	local09, #1
00c84     48 93 02 F6 | 	mov	local10, local09
00c88     04 92 66 F0 | 	shl	local10, #4
00c8c     48 93 82 F1 | 	sub	local10, local09
00c90     01 92 66 F0 | 	shl	local10, #1
00c94     49 73 02 F1 | 	add	arg01, local10
00c98     46 73 02 F1 | 	add	arg01, local07
00c9c                 | ' asm
00c9c     39 2D C2 FA | 	rdbyte	result1, arg01
00ca0                 | ' return r
00ca0     16 95 02 F6 | 	mov	local11, result1
00ca4     07 94 46 F7 | 	zerox	local11, #7
00ca8     04 0E 06 F1 | 	add	objptr, #4
00cac     07 95 62 FC | 	wrlong	local11, objptr
00cb0                 | '     a=lpeek(addr(sn$(i)))
00cb0                 | '     b=(peek(ma+20+30*(i-1)+j))
00cb0                 | '     if b>=32 then poke a+j,b
00cb0     04 00 00 FF 
00cb4     10 0F 86 F1 | 	sub	objptr, ##2320
00cb8     20 94 5E F2 | 	cmps	local11, #32 wcz
00cbc     24 00 90 CD |  if_b	jmp	#LR__0004
00cc0     04 00 00 FF 
00cc4     0C 0F 06 F1 | 	add	objptr, ##2316
00cc8     07 73 02 FB | 	rdlong	arg01, objptr
00ccc     46 73 02 F1 | 	add	arg01, local07
00cd0     04 0E 06 F1 | 	add	objptr, #4
00cd4     07 75 02 FB | 	rdlong	arg02, objptr
00cd8     04 00 00 FF 
00cdc     10 0F 86 F1 | 	sub	objptr, ##2320
00ce0                 | ' asm
00ce0     39 75 42 FC | 	wrbyte	arg02, arg01
00ce4                 | LR__0004
00ce4     01 8C 06 F1 | 	add	local07, #1
00ce8     16 8C 5E F2 | 	cmps	local07, #22 wcz
00cec     54 FF 9F CD |  if_b	jmp	#LR__0003
00cf0     40 73 02 F6 | 	mov	arg01, local01
00cf4     14 72 06 F1 | 	add	arg01, #20
00cf8     42 93 02 F6 | 	mov	local10, local03
00cfc     01 92 86 F1 | 	sub	local10, #1
00d00     49 89 02 F6 | 	mov	local05, local10
00d04     04 88 66 F0 | 	shl	local05, #4
00d08     49 89 82 F1 | 	sub	local05, local10
00d0c     01 88 66 F0 | 	shl	local05, #1
00d10     44 73 02 F1 | 	add	arg01, local05
00d14     16 72 06 F1 | 	add	arg01, #22
00d18                 | ' asm
00d18     39 97 C2 FA | 	rdbyte	local12, arg01
00d1c                 | ' return r
00d1c     07 96 46 F7 | 	zerox	local12, #7
00d20     08 96 66 F0 | 	shl	local12, #8
00d24     40 73 02 F6 | 	mov	arg01, local01
00d28     14 72 06 F1 | 	add	arg01, #20
00d2c     42 99 02 F6 | 	mov	local13, local03
00d30     01 98 86 F1 | 	sub	local13, #1
00d34     4C 9B 02 F6 | 	mov	local14, local13
00d38     04 9A 66 F0 | 	shl	local14, #4
00d3c     4C 9B 82 F1 | 	sub	local14, local13
00d40     01 9A 66 F0 | 	shl	local14, #1
00d44     4D 73 02 F1 | 	add	arg01, local14
00d48     17 72 06 F1 | 	add	arg01, #23
00d4c                 | ' asm
00d4c     39 8B C2 FA | 	rdbyte	local06, arg01
00d50                 | ' return r
00d50     07 8A 46 F7 | 	zerox	local06, #7
00d54     45 97 02 F1 | 	add	local12, local06
00d58     01 96 66 F0 | 	shl	local12, #1
00d5c     04 00 00 FF 
00d60     14 0F 06 F1 | 	add	objptr, ##2324
00d64     07 97 62 FC | 	wrlong	local12, objptr
00d68     40 73 02 F6 | 	mov	arg01, local01
00d6c     14 72 06 F1 | 	add	arg01, #20
00d70     42 93 02 F6 | 	mov	local10, local03
00d74     01 92 86 F1 | 	sub	local10, #1
00d78     49 89 02 F6 | 	mov	local05, local10
00d7c     04 88 66 F0 | 	shl	local05, #4
00d80     49 89 82 F1 | 	sub	local05, local10
00d84     01 88 66 F0 | 	shl	local05, #1
00d88     44 73 02 F1 | 	add	arg01, local05
00d8c     1A 72 06 F1 | 	add	arg01, #26
00d90                 | ' asm
00d90     39 97 C2 FA | 	rdbyte	local12, arg01
00d94                 | ' return r
00d94     07 96 46 F7 | 	zerox	local12, #7
00d98     08 96 66 F0 | 	shl	local12, #8
00d9c     40 73 02 F6 | 	mov	arg01, local01
00da0     14 72 06 F1 | 	add	arg01, #20
00da4     42 99 02 F6 | 	mov	local13, local03
00da8     01 98 86 F1 | 	sub	local13, #1
00dac     4C 9B 02 F6 | 	mov	local14, local13
00db0     04 9A 66 F0 | 	shl	local14, #4
00db4     4C 9B 82 F1 | 	sub	local14, local13
00db8     01 9A 66 F0 | 	shl	local14, #1
00dbc     4D 73 02 F1 | 	add	arg01, local14
00dc0     1B 72 06 F1 | 	add	arg01, #27
00dc4                 | ' asm
00dc4     39 8B C2 FA | 	rdbyte	local06, arg01
00dc8                 | ' return r
00dc8     07 8A 46 F7 | 	zerox	local06, #7
00dcc     45 97 02 F1 | 	add	local12, local06
00dd0     01 96 66 F0 | 	shl	local12, #1
00dd4     04 0E 06 F1 | 	add	objptr, #4
00dd8     07 97 62 FC | 	wrlong	local12, objptr
00ddc     40 73 02 F6 | 	mov	arg01, local01
00de0     14 72 06 F1 | 	add	arg01, #20
00de4     42 93 02 F6 | 	mov	local10, local03
00de8     01 92 86 F1 | 	sub	local10, #1
00dec     49 89 02 F6 | 	mov	local05, local10
00df0     04 88 66 F0 | 	shl	local05, #4
00df4     49 89 82 F1 | 	sub	local05, local10
00df8     01 88 66 F0 | 	shl	local05, #1
00dfc     44 73 02 F1 | 	add	arg01, local05
00e00     1C 72 06 F1 | 	add	arg01, #28
00e04                 | ' asm
00e04     39 97 C2 FA | 	rdbyte	local12, arg01
00e08                 | ' return r
00e08     07 96 46 F7 | 	zerox	local12, #7
00e0c     08 96 66 F0 | 	shl	local12, #8
00e10     40 73 02 F6 | 	mov	arg01, local01
00e14     14 72 06 F1 | 	add	arg01, #20
00e18     42 99 02 F6 | 	mov	local13, local03
00e1c     01 98 86 F1 | 	sub	local13, #1
00e20     4C 9B 02 F6 | 	mov	local14, local13
00e24     04 9A 66 F0 | 	shl	local14, #4
00e28     4C 9B 82 F1 | 	sub	local14, local13
00e2c     01 9A 66 F0 | 	shl	local14, #1
00e30     4D 73 02 F1 | 	add	arg01, local14
00e34     1D 72 06 F1 | 	add	arg01, #29
00e38                 | ' asm
00e38     39 8B C2 FA | 	rdbyte	local06, arg01
00e3c                 | ' return r
00e3c     07 8A 46 F7 | 	zerox	local06, #7
00e40     45 97 02 F1 | 	add	local12, local06
00e44     01 96 66 F0 | 	shl	local12, #1
00e48     04 0E 06 F1 | 	add	objptr, #4
00e4c     07 97 62 FC | 	wrlong	local12, objptr
00e50     40 73 02 F6 | 	mov	arg01, local01
00e54     14 72 06 F1 | 	add	arg01, #20
00e58     42 91 02 F6 | 	mov	local09, local03
00e5c     01 90 86 F1 | 	sub	local09, #1
00e60     48 93 02 F6 | 	mov	local10, local09
00e64     04 92 66 F0 | 	shl	local10, #4
00e68     48 93 82 F1 | 	sub	local10, local09
00e6c     01 92 66 F0 | 	shl	local10, #1
00e70     49 73 02 F1 | 	add	arg01, local10
00e74     18 72 06 F1 | 	add	arg01, #24
00e78                 | ' asm
00e78     39 95 C2 FA | 	rdbyte	local11, arg01
00e7c                 | ' return r
00e7c     07 94 46 F7 | 	zerox	local11, #7
00e80     04 0E 06 F1 | 	add	objptr, #4
00e84     07 95 62 FC | 	wrlong	local11, objptr
00e88     40 73 02 F6 | 	mov	arg01, local01
00e8c     14 72 06 F1 | 	add	arg01, #20
00e90     42 91 02 F6 | 	mov	local09, local03
00e94     01 90 86 F1 | 	sub	local09, #1
00e98     48 93 02 F6 | 	mov	local10, local09
00e9c     04 92 66 F0 | 	shl	local10, #4
00ea0     48 93 82 F1 | 	sub	local10, local09
00ea4     01 92 66 F0 | 	shl	local10, #1
00ea8     49 73 02 F1 | 	add	arg01, local10
00eac     19 72 06 F1 | 	add	arg01, #25
00eb0                 | ' asm
00eb0     39 2D C2 FA | 	rdbyte	result1, arg01
00eb4                 | ' return r
00eb4     16 95 02 F6 | 	mov	local11, result1
00eb8     07 94 46 F7 | 	zerox	local11, #7
00ebc     04 0E 06 F1 | 	add	objptr, #4
00ec0     07 95 62 FC | 	wrlong	local11, objptr
00ec4     04 00 00 FF 
00ec8     24 0F 86 F1 | 	sub	objptr, ##2340
00ecc                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ecc                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ecc                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ecc                 | ' ft=peek(ma+20+30*(i-1)+24)
00ecc                 | ' vl=peek(ma+20+30*(i-1)+25)
00ecc                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ecc     10 84 5E F2 | 	cmps	local03, #16 wcz
00ed0     D8 02 90 3D |  if_ae	jmp	#LR__0005
00ed4     05 74 06 F6 | 	mov	arg02, #5
00ed8     42 75 02 F1 | 	add	arg02, local03
00edc                 | ' 
00edc                 | ' ''---------- Set the (x,y) position of cursor
00edc                 | ' 
00edc                 | ' cursor_x:=x
00edc     34 0E 06 F1 | 	add	objptr, #52
00ee0     07 03 48 FC | 	wrbyte	#1, objptr
00ee4                 | ' cursor_y:=y
00ee4     01 0E 06 F1 | 	add	objptr, #1
00ee8     07 75 42 FC | 	wrbyte	arg02, objptr
00eec     35 0E 86 F1 | 	sub	objptr, #53
00ef0     00 72 06 F6 | 	mov	arg01, #0
00ef4     F8 69 B0 FD | 	call	#__system___getiolock_0145
00ef8     16 73 02 F6 | 	mov	arg01, result1
00efc     A4 52 B0 FD | 	call	#__system___lockmem
00f00     00 2C 06 F6 | 	mov	result1, #0
00f04     42 9D 02 F6 | 	mov	local15, local03
00f08     02 9C 66 F0 | 	shl	local15, #2
00f0c     04 00 00 FF 
00f10     64 0E 06 F1 | 	add	objptr, ##2148
00f14     07 9D 02 F1 | 	add	local15, objptr
00f18     4E 75 02 FB | 	rdlong	arg02, local15
00f1c     00 72 06 F6 | 	mov	arg01, #0
00f20     00 76 06 F6 | 	mov	arg03, #0
00f24     04 00 00 FF 
00f28     64 0E 86 F1 | 	sub	objptr, ##2148
00f2c     0C 56 B0 FD | 	call	#__system___basic_print_string
00f30     00 72 06 F6 | 	mov	arg01, #0
00f34     0A 74 06 F6 | 	mov	arg02, #10
00f38     00 76 06 F6 | 	mov	arg03, #0
00f3c     B0 55 B0 FD | 	call	#__system___basic_print_char
00f40     01 2C 06 F6 | 	mov	result1, #1
00f44     00 72 06 F6 | 	mov	arg01, #0
00f48     A4 69 B0 FD | 	call	#__system___getiolock_0145
00f4c     16 01 68 FC | 	wrlong	#0, result1
00f50     00 2C 06 F6 | 	mov	result1, #0
00f54     05 74 06 F6 | 	mov	arg02, #5
00f58     42 75 02 F1 | 	add	arg02, local03
00f5c                 | ' 
00f5c                 | ' ''---------- Set the (x,y) position of cursor
00f5c                 | ' 
00f5c                 | ' cursor_x:=x
00f5c     34 0E 06 F1 | 	add	objptr, #52
00f60     07 31 48 FC | 	wrbyte	#24, objptr
00f64                 | ' cursor_y:=y
00f64     01 0E 06 F1 | 	add	objptr, #1
00f68     07 75 42 FC | 	wrbyte	arg02, objptr
00f6c     35 0E 86 F1 | 	sub	objptr, #53
00f70     00 72 06 F6 | 	mov	arg01, #0
00f74     78 69 B0 FD | 	call	#__system___getiolock_0145
00f78     16 73 02 F6 | 	mov	arg01, result1
00f7c     24 52 B0 FD | 	call	#__system___lockmem
00f80     00 2C 06 F6 | 	mov	result1, #0
00f84     04 00 00 FF 
00f88     14 0F 06 F1 | 	add	objptr, ##2324
00f8c     07 75 02 FB | 	rdlong	arg02, objptr
00f90     04 00 00 FF 
00f94     14 0F 86 F1 | 	sub	objptr, ##2324
00f98     00 72 06 F6 | 	mov	arg01, #0
00f9c     00 76 06 F6 | 	mov	arg03, #0
00fa0     0A 78 06 F6 | 	mov	arg04, #10
00fa4     DC 55 B0 FD | 	call	#__system___basic_print_integer
00fa8     00 72 06 F6 | 	mov	arg01, #0
00fac     0A 74 06 F6 | 	mov	arg02, #10
00fb0     00 76 06 F6 | 	mov	arg03, #0
00fb4     38 55 B0 FD | 	call	#__system___basic_print_char
00fb8     01 2C 06 F6 | 	mov	result1, #1
00fbc     00 72 06 F6 | 	mov	arg01, #0
00fc0     2C 69 B0 FD | 	call	#__system___getiolock_0145
00fc4     16 01 68 FC | 	wrlong	#0, result1
00fc8     00 2C 06 F6 | 	mov	result1, #0
00fcc     05 74 06 F6 | 	mov	arg02, #5
00fd0     42 75 02 F1 | 	add	arg02, local03
00fd4                 | ' 
00fd4                 | ' ''---------- Set the (x,y) position of cursor
00fd4                 | ' 
00fd4                 | ' cursor_x:=x
00fd4     34 0E 06 F1 | 	add	objptr, #52
00fd8     07 3F 48 FC | 	wrbyte	#31, objptr
00fdc                 | ' cursor_y:=y
00fdc     01 0E 06 F1 | 	add	objptr, #1
00fe0     07 75 42 FC | 	wrbyte	arg02, objptr
00fe4     35 0E 86 F1 | 	sub	objptr, #53
00fe8     00 72 06 F6 | 	mov	arg01, #0
00fec     00 69 B0 FD | 	call	#__system___getiolock_0145
00ff0     16 73 02 F6 | 	mov	arg01, result1
00ff4     AC 51 B0 FD | 	call	#__system___lockmem
00ff8     00 2C 06 F6 | 	mov	result1, #0
00ffc     04 00 00 FF 
01000     20 0F 06 F1 | 	add	objptr, ##2336
01004     07 75 02 FB | 	rdlong	arg02, objptr
01008     04 00 00 FF 
0100c     20 0F 86 F1 | 	sub	objptr, ##2336
01010     00 72 06 F6 | 	mov	arg01, #0
01014     00 76 06 F6 | 	mov	arg03, #0
01018     0A 78 06 F6 | 	mov	arg04, #10
0101c     64 55 B0 FD | 	call	#__system___basic_print_integer
01020     00 72 06 F6 | 	mov	arg01, #0
01024     0A 74 06 F6 | 	mov	arg02, #10
01028     00 76 06 F6 | 	mov	arg03, #0
0102c     C0 54 B0 FD | 	call	#__system___basic_print_char
01030     01 2C 06 F6 | 	mov	result1, #1
01034     00 72 06 F6 | 	mov	arg01, #0
01038     B4 68 B0 FD | 	call	#__system___getiolock_0145
0103c     16 01 68 FC | 	wrlong	#0, result1
01040     00 2C 06 F6 | 	mov	result1, #0
01044     05 74 06 F6 | 	mov	arg02, #5
01048     42 75 02 F1 | 	add	arg02, local03
0104c                 | ' 
0104c                 | ' ''---------- Set the (x,y) position of cursor
0104c                 | ' 
0104c                 | ' cursor_x:=x
0104c     34 0E 06 F1 | 	add	objptr, #52
01050     07 45 48 FC | 	wrbyte	#34, objptr
01054                 | ' cursor_y:=y
01054     01 0E 06 F1 | 	add	objptr, #1
01058     07 75 42 FC | 	wrbyte	arg02, objptr
0105c     35 0E 86 F1 | 	sub	objptr, #53
01060     00 72 06 F6 | 	mov	arg01, #0
01064     88 68 B0 FD | 	call	#__system___getiolock_0145
01068     16 73 02 F6 | 	mov	arg01, result1
0106c     34 51 B0 FD | 	call	#__system___lockmem
01070     00 2C 06 F6 | 	mov	result1, #0
01074     04 00 00 FF 
01078     24 0F 06 F1 | 	add	objptr, ##2340
0107c     07 75 02 FB | 	rdlong	arg02, objptr
01080     04 00 00 FF 
01084     24 0F 86 F1 | 	sub	objptr, ##2340
01088     00 72 06 F6 | 	mov	arg01, #0
0108c     00 76 06 F6 | 	mov	arg03, #0
01090     0A 78 06 F6 | 	mov	arg04, #10
01094     EC 54 B0 FD | 	call	#__system___basic_print_integer
01098     00 72 06 F6 | 	mov	arg01, #0
0109c     0A 74 06 F6 | 	mov	arg02, #10
010a0     00 76 06 F6 | 	mov	arg03, #0
010a4     48 54 B0 FD | 	call	#__system___basic_print_char
010a8     01 2C 06 F6 | 	mov	result1, #1
010ac     00 72 06 F6 | 	mov	arg01, #0
010b0     3C 68 B0 FD | 	call	#__system___getiolock_0145
010b4     16 01 68 FC | 	wrlong	#0, result1
010b8     00 2C 06 F6 | 	mov	result1, #0
010bc     05 74 06 F6 | 	mov	arg02, #5
010c0     42 75 02 F1 | 	add	arg02, local03
010c4                 | ' 
010c4                 | ' ''---------- Set the (x,y) position of cursor
010c4                 | ' 
010c4                 | ' cursor_x:=x
010c4     34 0E 06 F1 | 	add	objptr, #52
010c8     07 4B 48 FC | 	wrbyte	#37, objptr
010cc                 | ' cursor_y:=y
010cc     01 0E 06 F1 | 	add	objptr, #1
010d0     07 75 42 FC | 	wrbyte	arg02, objptr
010d4     35 0E 86 F1 | 	sub	objptr, #53
010d8     00 72 06 F6 | 	mov	arg01, #0
010dc     10 68 B0 FD | 	call	#__system___getiolock_0145
010e0     16 73 02 F6 | 	mov	arg01, result1
010e4     BC 50 B0 FD | 	call	#__system___lockmem
010e8     00 2C 06 F6 | 	mov	result1, #0
010ec     04 00 00 FF 
010f0     18 0F 06 F1 | 	add	objptr, ##2328
010f4     07 75 02 FB | 	rdlong	arg02, objptr
010f8     04 00 00 FF 
010fc     18 0F 86 F1 | 	sub	objptr, ##2328
01100     00 72 06 F6 | 	mov	arg01, #0
01104     00 76 06 F6 | 	mov	arg03, #0
01108     0A 78 06 F6 | 	mov	arg04, #10
0110c     74 54 B0 FD | 	call	#__system___basic_print_integer
01110     00 72 06 F6 | 	mov	arg01, #0
01114     0A 74 06 F6 | 	mov	arg02, #10
01118     00 76 06 F6 | 	mov	arg03, #0
0111c     D0 53 B0 FD | 	call	#__system___basic_print_char
01120     01 2C 06 F6 | 	mov	result1, #1
01124     00 72 06 F6 | 	mov	arg01, #0
01128     C4 67 B0 FD | 	call	#__system___getiolock_0145
0112c     16 01 68 FC | 	wrlong	#0, result1
01130     00 2C 06 F6 | 	mov	result1, #0
01134     05 74 06 F6 | 	mov	arg02, #5
01138     42 75 02 F1 | 	add	arg02, local03
0113c                 | ' 
0113c                 | ' ''---------- Set the (x,y) position of cursor
0113c                 | ' 
0113c                 | ' cursor_x:=x
0113c     34 0E 06 F1 | 	add	objptr, #52
01140     07 57 48 FC | 	wrbyte	#43, objptr
01144                 | ' cursor_y:=y
01144     01 0E 06 F1 | 	add	objptr, #1
01148     07 75 42 FC | 	wrbyte	arg02, objptr
0114c     35 0E 86 F1 | 	sub	objptr, #53
01150     00 72 06 F6 | 	mov	arg01, #0
01154     98 67 B0 FD | 	call	#__system___getiolock_0145
01158     16 73 02 F6 | 	mov	arg01, result1
0115c     44 50 B0 FD | 	call	#__system___lockmem
01160     00 2C 06 F6 | 	mov	result1, #0
01164     04 00 00 FF 
01168     1C 0F 06 F1 | 	add	objptr, ##2332
0116c     07 75 02 FB | 	rdlong	arg02, objptr
01170     04 00 00 FF 
01174     1C 0F 86 F1 | 	sub	objptr, ##2332
01178     00 72 06 F6 | 	mov	arg01, #0
0117c     00 76 06 F6 | 	mov	arg03, #0
01180     0A 78 06 F6 | 	mov	arg04, #10
01184     FC 53 B0 FD | 	call	#__system___basic_print_integer
01188     00 72 06 F6 | 	mov	arg01, #0
0118c     0A 74 06 F6 | 	mov	arg02, #10
01190     00 76 06 F6 | 	mov	arg03, #0
01194     58 53 B0 FD | 	call	#__system___basic_print_char
01198     01 2C 06 F6 | 	mov	result1, #1
0119c     00 72 06 F6 | 	mov	arg01, #0
011a0     4C 67 B0 FD | 	call	#__system___getiolock_0145
011a4     16 01 68 FC | 	wrlong	#0, result1
011a8     00 2C 06 F6 | 	mov	result1, #0
011ac                 | LR__0005
011ac                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
011ac     10 84 5E F2 | 	cmps	local03, #16 wcz
011b0     D8 02 90 CD |  if_b	jmp	#LR__0006
011b4     42 75 02 F6 | 	mov	arg02, local03
011b8     0B 74 86 F1 | 	sub	arg02, #11
011bc                 | ' 
011bc                 | ' ''---------- Set the (x,y) position of cursor
011bc                 | ' 
011bc                 | ' cursor_x:=x
011bc     34 0E 06 F1 | 	add	objptr, #52
011c0     07 73 48 FC | 	wrbyte	#57, objptr
011c4                 | ' cursor_y:=y
011c4     01 0E 06 F1 | 	add	objptr, #1
011c8     07 75 42 FC | 	wrbyte	arg02, objptr
011cc     35 0E 86 F1 | 	sub	objptr, #53
011d0     00 72 06 F6 | 	mov	arg01, #0
011d4     18 67 B0 FD | 	call	#__system___getiolock_0145
011d8     16 73 02 F6 | 	mov	arg01, result1
011dc     C4 4F B0 FD | 	call	#__system___lockmem
011e0     00 2C 06 F6 | 	mov	result1, #0
011e4     42 9D 02 F6 | 	mov	local15, local03
011e8     02 9C 66 F0 | 	shl	local15, #2
011ec     04 00 00 FF 
011f0     64 0E 06 F1 | 	add	objptr, ##2148
011f4     07 9D 02 F1 | 	add	local15, objptr
011f8     4E 75 02 FB | 	rdlong	arg02, local15
011fc     00 72 06 F6 | 	mov	arg01, #0
01200     00 76 06 F6 | 	mov	arg03, #0
01204     04 00 00 FF 
01208     64 0E 86 F1 | 	sub	objptr, ##2148
0120c     2C 53 B0 FD | 	call	#__system___basic_print_string
01210     00 72 06 F6 | 	mov	arg01, #0
01214     0A 74 06 F6 | 	mov	arg02, #10
01218     00 76 06 F6 | 	mov	arg03, #0
0121c     D0 52 B0 FD | 	call	#__system___basic_print_char
01220     01 2C 06 F6 | 	mov	result1, #1
01224     00 72 06 F6 | 	mov	arg01, #0
01228     C4 66 B0 FD | 	call	#__system___getiolock_0145
0122c     16 01 68 FC | 	wrlong	#0, result1
01230     00 2C 06 F6 | 	mov	result1, #0
01234     42 75 02 F6 | 	mov	arg02, local03
01238     0B 74 86 F1 | 	sub	arg02, #11
0123c                 | ' 
0123c                 | ' ''---------- Set the (x,y) position of cursor
0123c                 | ' 
0123c                 | ' cursor_x:=x
0123c     34 0E 06 F1 | 	add	objptr, #52
01240     07 A1 48 FC | 	wrbyte	#80, objptr
01244                 | ' cursor_y:=y
01244     01 0E 06 F1 | 	add	objptr, #1
01248     07 75 42 FC | 	wrbyte	arg02, objptr
0124c     35 0E 86 F1 | 	sub	objptr, #53
01250     00 72 06 F6 | 	mov	arg01, #0
01254     98 66 B0 FD | 	call	#__system___getiolock_0145
01258     16 73 02 F6 | 	mov	arg01, result1
0125c     44 4F B0 FD | 	call	#__system___lockmem
01260     00 2C 06 F6 | 	mov	result1, #0
01264     04 00 00 FF 
01268     14 0F 06 F1 | 	add	objptr, ##2324
0126c     07 75 02 FB | 	rdlong	arg02, objptr
01270     04 00 00 FF 
01274     14 0F 86 F1 | 	sub	objptr, ##2324
01278     00 72 06 F6 | 	mov	arg01, #0
0127c     00 76 06 F6 | 	mov	arg03, #0
01280     0A 78 06 F6 | 	mov	arg04, #10
01284     FC 52 B0 FD | 	call	#__system___basic_print_integer
01288     00 72 06 F6 | 	mov	arg01, #0
0128c     0A 74 06 F6 | 	mov	arg02, #10
01290     00 76 06 F6 | 	mov	arg03, #0
01294     58 52 B0 FD | 	call	#__system___basic_print_char
01298     01 2C 06 F6 | 	mov	result1, #1
0129c     00 72 06 F6 | 	mov	arg01, #0
012a0     4C 66 B0 FD | 	call	#__system___getiolock_0145
012a4     16 01 68 FC | 	wrlong	#0, result1
012a8     00 2C 06 F6 | 	mov	result1, #0
012ac     42 75 02 F6 | 	mov	arg02, local03
012b0     0B 74 86 F1 | 	sub	arg02, #11
012b4                 | ' 
012b4                 | ' ''---------- Set the (x,y) position of cursor
012b4                 | ' 
012b4                 | ' cursor_x:=x
012b4     34 0E 06 F1 | 	add	objptr, #52
012b8     07 AF 48 FC | 	wrbyte	#87, objptr
012bc                 | ' cursor_y:=y
012bc     01 0E 06 F1 | 	add	objptr, #1
012c0     07 75 42 FC | 	wrbyte	arg02, objptr
012c4     35 0E 86 F1 | 	sub	objptr, #53
012c8     00 72 06 F6 | 	mov	arg01, #0
012cc     20 66 B0 FD | 	call	#__system___getiolock_0145
012d0     16 73 02 F6 | 	mov	arg01, result1
012d4     CC 4E B0 FD | 	call	#__system___lockmem
012d8     00 2C 06 F6 | 	mov	result1, #0
012dc     04 00 00 FF 
012e0     20 0F 06 F1 | 	add	objptr, ##2336
012e4     07 75 02 FB | 	rdlong	arg02, objptr
012e8     04 00 00 FF 
012ec     20 0F 86 F1 | 	sub	objptr, ##2336
012f0     00 72 06 F6 | 	mov	arg01, #0
012f4     00 76 06 F6 | 	mov	arg03, #0
012f8     0A 78 06 F6 | 	mov	arg04, #10
012fc     84 52 B0 FD | 	call	#__system___basic_print_integer
01300     00 72 06 F6 | 	mov	arg01, #0
01304     0A 74 06 F6 | 	mov	arg02, #10
01308     00 76 06 F6 | 	mov	arg03, #0
0130c     E0 51 B0 FD | 	call	#__system___basic_print_char
01310     01 2C 06 F6 | 	mov	result1, #1
01314     00 72 06 F6 | 	mov	arg01, #0
01318     D4 65 B0 FD | 	call	#__system___getiolock_0145
0131c     16 01 68 FC | 	wrlong	#0, result1
01320     00 2C 06 F6 | 	mov	result1, #0
01324     42 75 02 F6 | 	mov	arg02, local03
01328     0B 74 86 F1 | 	sub	arg02, #11
0132c                 | ' 
0132c                 | ' ''---------- Set the (x,y) position of cursor
0132c                 | ' 
0132c                 | ' cursor_x:=x
0132c     34 0E 06 F1 | 	add	objptr, #52
01330     07 B5 48 FC | 	wrbyte	#90, objptr
01334                 | ' cursor_y:=y
01334     01 0E 06 F1 | 	add	objptr, #1
01338     07 75 42 FC | 	wrbyte	arg02, objptr
0133c     35 0E 86 F1 | 	sub	objptr, #53
01340     00 72 06 F6 | 	mov	arg01, #0
01344     A8 65 B0 FD | 	call	#__system___getiolock_0145
01348     16 73 02 F6 | 	mov	arg01, result1
0134c     54 4E B0 FD | 	call	#__system___lockmem
01350     00 2C 06 F6 | 	mov	result1, #0
01354     04 00 00 FF 
01358     24 0F 06 F1 | 	add	objptr, ##2340
0135c     07 75 02 FB | 	rdlong	arg02, objptr
01360     04 00 00 FF 
01364     24 0F 86 F1 | 	sub	objptr, ##2340
01368     00 72 06 F6 | 	mov	arg01, #0
0136c     00 76 06 F6 | 	mov	arg03, #0
01370     0A 78 06 F6 | 	mov	arg04, #10
01374     0C 52 B0 FD | 	call	#__system___basic_print_integer
01378     00 72 06 F6 | 	mov	arg01, #0
0137c     0A 74 06 F6 | 	mov	arg02, #10
01380     00 76 06 F6 | 	mov	arg03, #0
01384     68 51 B0 FD | 	call	#__system___basic_print_char
01388     01 2C 06 F6 | 	mov	result1, #1
0138c     00 72 06 F6 | 	mov	arg01, #0
01390     5C 65 B0 FD | 	call	#__system___getiolock_0145
01394     16 01 68 FC | 	wrlong	#0, result1
01398     00 2C 06 F6 | 	mov	result1, #0
0139c     42 75 02 F6 | 	mov	arg02, local03
013a0     0B 74 86 F1 | 	sub	arg02, #11
013a4                 | ' 
013a4                 | ' ''---------- Set the (x,y) position of cursor
013a4                 | ' 
013a4                 | ' cursor_x:=x
013a4     34 0E 06 F1 | 	add	objptr, #52
013a8     07 BB 48 FC | 	wrbyte	#93, objptr
013ac                 | ' cursor_y:=y
013ac     01 0E 06 F1 | 	add	objptr, #1
013b0     07 75 42 FC | 	wrbyte	arg02, objptr
013b4     35 0E 86 F1 | 	sub	objptr, #53
013b8     00 72 06 F6 | 	mov	arg01, #0
013bc     30 65 B0 FD | 	call	#__system___getiolock_0145
013c0     16 73 02 F6 | 	mov	arg01, result1
013c4     DC 4D B0 FD | 	call	#__system___lockmem
013c8     00 2C 06 F6 | 	mov	result1, #0
013cc     04 00 00 FF 
013d0     18 0F 06 F1 | 	add	objptr, ##2328
013d4     07 75 02 FB | 	rdlong	arg02, objptr
013d8     04 00 00 FF 
013dc     18 0F 86 F1 | 	sub	objptr, ##2328
013e0     00 72 06 F6 | 	mov	arg01, #0
013e4     00 76 06 F6 | 	mov	arg03, #0
013e8     0A 78 06 F6 | 	mov	arg04, #10
013ec     94 51 B0 FD | 	call	#__system___basic_print_integer
013f0     00 72 06 F6 | 	mov	arg01, #0
013f4     0A 74 06 F6 | 	mov	arg02, #10
013f8     00 76 06 F6 | 	mov	arg03, #0
013fc     F0 50 B0 FD | 	call	#__system___basic_print_char
01400     01 2C 06 F6 | 	mov	result1, #1
01404     00 72 06 F6 | 	mov	arg01, #0
01408     E4 64 B0 FD | 	call	#__system___getiolock_0145
0140c     16 01 68 FC | 	wrlong	#0, result1
01410     00 2C 06 F6 | 	mov	result1, #0
01414     42 75 02 F6 | 	mov	arg02, local03
01418     0B 74 86 F1 | 	sub	arg02, #11
0141c                 | ' 
0141c                 | ' ''---------- Set the (x,y) position of cursor
0141c                 | ' 
0141c                 | ' cursor_x:=x
0141c     34 0E 06 F1 | 	add	objptr, #52
01420     07 C7 48 FC | 	wrbyte	#99, objptr
01424                 | ' cursor_y:=y
01424     01 0E 06 F1 | 	add	objptr, #1
01428     07 75 42 FC | 	wrbyte	arg02, objptr
0142c     35 0E 86 F1 | 	sub	objptr, #53
01430     00 72 06 F6 | 	mov	arg01, #0
01434     B8 64 B0 FD | 	call	#__system___getiolock_0145
01438     16 73 02 F6 | 	mov	arg01, result1
0143c     64 4D B0 FD | 	call	#__system___lockmem
01440     00 2C 06 F6 | 	mov	result1, #0
01444     04 00 00 FF 
01448     1C 0F 06 F1 | 	add	objptr, ##2332
0144c     07 75 02 FB | 	rdlong	arg02, objptr
01450     04 00 00 FF 
01454     1C 0F 86 F1 | 	sub	objptr, ##2332
01458     00 72 06 F6 | 	mov	arg01, #0
0145c     00 76 06 F6 | 	mov	arg03, #0
01460     0A 78 06 F6 | 	mov	arg04, #10
01464     1C 51 B0 FD | 	call	#__system___basic_print_integer
01468     00 72 06 F6 | 	mov	arg01, #0
0146c     0A 74 06 F6 | 	mov	arg02, #10
01470     00 76 06 F6 | 	mov	arg03, #0
01474     78 50 B0 FD | 	call	#__system___basic_print_char
01478     01 2C 06 F6 | 	mov	result1, #1
0147c     00 72 06 F6 | 	mov	arg01, #0
01480     6C 64 B0 FD | 	call	#__system___getiolock_0145
01484     16 01 68 FC | 	wrlong	#0, result1
01488     00 2C 06 F6 | 	mov	result1, #0
0148c                 | LR__0006
0148c     01 84 06 F1 | 	add	local03, #1
01490     A4 F7 9F FD | 	jmp	#LR__0002
01494                 | LR__0007
01494                 | ' print
01494     00 72 06 F6 | 	mov	arg01, #0
01498     54 64 B0 FD | 	call	#__system___getiolock_0145
0149c     16 73 02 F6 | 	mov	arg01, result1
014a0     00 4D B0 FD | 	call	#__system___lockmem
014a4     00 2C 06 F6 | 	mov	result1, #0
014a8     00 72 06 F6 | 	mov	arg01, #0
014ac     0A 74 06 F6 | 	mov	arg02, #10
014b0     00 76 06 F6 | 	mov	arg03, #0
014b4     38 50 B0 FD | 	call	#__system___basic_print_char
014b8     01 2C 06 F6 | 	mov	result1, #1
014bc     00 72 06 F6 | 	mov	arg01, #0
014c0     2C 64 B0 FD | 	call	#__system___getiolock_0145
014c4     16 01 68 FC | 	wrlong	#0, result1
014c8     00 2C 06 F6 | 	mov	result1, #0
014cc     AF F0 03 F6 | 	mov	ptra, fp
014d0     BF 00 A0 FD | 	call	#popregs_
014d4                 | _getinfo_ret
014d4     2D 00 64 FD | 	ret
014d8                 | 
014d8                 | _program
014d8     0C 5A 05 F6 | 	mov	COUNT_, #12
014dc     B0 00 A0 FD | 	call	#pushregs_
014e0     EC 0E 06 F1 | 	add	objptr, #236
014e4     3C 1F B0 FD | 	call	#_retrocog_spin2_start
014e8     02 00 00 FF 
014ec     40 0E 06 F1 | 	add	objptr, ##1088
014f0     07 2D 62 FC | 	wrlong	result1, objptr
014f4                 | ' c=rm.start()
014f4                 | ' return c
014f4     02 00 00 FF 
014f8     2C 0F 86 F1 | 	sub	objptr, ##1324
014fc     40 72 06 F6 | 	mov	arg01, #64
01500     00 74 06 F6 | 	mov	arg02, #0
01504     60 F3 BF FD | 	call	#_startvideo
01508     9A 72 06 F6 | 	mov	arg01, #154
0150c     93 74 06 F6 | 	mov	arg02, #147
01510     F0 0B B0 FD | 	call	#_hng030rm_spin2_cls
01514     02 00 00 FF 
01518     30 0F 06 F1 | 	add	objptr, ##1328
0151c     07 01 69 FC | 	wrlong	#128, objptr
01520     04 0E 06 F1 | 	add	objptr, #4
01524     07 7B 68 FC | 	wrlong	#61, objptr
01528     04 0E 06 F1 | 	add	objptr, #4
0152c     07 79 68 FC | 	wrlong	#60, objptr
01530     04 0E 06 F1 | 	add	objptr, #4
01534     07 77 68 FC | 	wrlong	#59, objptr
01538     04 0E 06 F1 | 	add	objptr, #4
0153c     07 75 68 FC | 	wrlong	#58, objptr
01540     04 0E 06 F1 | 	add	objptr, #4
01544     07 07 68 FC | 	wrlong	#3, objptr
01548     42 00 00 FF 
0154c     31 81 06 F6 | 	mov	local01, ##@LR__0455
01550     01 00 00 FF 
01554     AC 0F 06 F1 | 	add	objptr, ##940
01558     07 81 62 FC | 	wrlong	local01, objptr
0155c     04 00 00 FF 
01560     F0 0E 86 F1 | 	sub	objptr, ##2288
01564     0C 73 02 F6 | 	mov	arg01, ptr__dat__
01568     40 F3 BF FD | 	call	#_addr
0156c     04 00 00 FF 
01570     F4 0E 06 F1 | 	add	objptr, ##2292
01574     07 2D 62 FC | 	wrlong	result1, objptr
01578     16 73 02 F6 | 	mov	arg01, result1
0157c     00 74 06 F6 | 	mov	arg02, #0
01580     01 00 00 FF 
01584     AC 0F 86 F1 | 	sub	objptr, ##940
01588     64 25 B0 FD | 	call	#_trackerplayer_spin2_initModule
0158c     01 74 06 F6 | 	mov	arg02, #1
01590                 | ' 
01590                 | ' ''---------- Set the (x,y) position of cursor
01590                 | ' 
01590                 | ' cursor_x:=x
01590     02 00 00 FF 
01594     14 0F 86 F1 | 	sub	objptr, ##1300
01598     07 03 48 FC | 	wrbyte	#1, objptr
0159c                 | ' cursor_y:=y
0159c     01 0E 06 F1 | 	add	objptr, #1
015a0     07 03 48 FC | 	wrbyte	#1, objptr
015a4                 | ' 
015a4                 | ' emptystr$="                      "
015a4                 | ' 
015a4                 | ' ma=addr(module)
015a4                 | ' tracker.initmodule(ma,0)
015a4                 | ' 
015a4                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
015a4     04 00 00 FF 
015a8     BF 0E 06 F1 | 	add	objptr, ##2239
015ac     07 83 02 FB | 	rdlong	local02, objptr
015b0     41 85 02 F6 | 	mov	local03, local02
015b4     04 00 00 FF 
015b8     F4 0E 86 F1 | 	sub	objptr, ##2292
015bc     14 84 06 F1 | 	add	local03, #20
015c0                 | LR__0008
015c0     42 83 5A F2 | 	cmps	local02, local03 wcz
015c4     40 00 90 3D |  if_ae	jmp	#LR__0009
015c8     00 72 06 F6 | 	mov	arg01, #0
015cc     20 63 B0 FD | 	call	#__system___getiolock_0145
015d0     16 73 02 F6 | 	mov	arg01, result1
015d4     CC 4B B0 FD | 	call	#__system___lockmem
015d8                 | ' asm
015d8     41 2D C2 FA | 	rdbyte	result1, local02
015dc                 | ' return r
015dc     16 75 02 F6 | 	mov	arg02, result1
015e0     07 74 46 F7 | 	zerox	arg02, #7
015e4     00 72 06 F6 | 	mov	arg01, #0
015e8     00 76 06 F6 | 	mov	arg03, #0
015ec     00 4F B0 FD | 	call	#__system___basic_print_char
015f0     00 72 06 F6 | 	mov	arg01, #0
015f4     F8 62 B0 FD | 	call	#__system___getiolock_0145
015f8     16 01 68 FC | 	wrlong	#0, result1
015fc     00 2C 06 F6 | 	mov	result1, #0
01600     01 82 06 F1 | 	add	local02, #1
01604     B8 FF 9F FD | 	jmp	#LR__0008
01608                 | LR__0009
01608     04 00 00 FF 
0160c     F8 0E 06 F1 | 	add	objptr, ##2296
01610     07 1F 68 FC | 	wrlong	#15, objptr
01614                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
01614     00 80 06 F6 | 	mov	local01, #0
01618     04 0E 86 F1 | 	sub	objptr, #4
0161c     07 73 02 FB | 	rdlong	arg01, objptr
01620     02 00 00 FF 
01624     38 72 06 F1 | 	add	arg01, ##1080
01628                 | ' asm
01628     39 87 C2 FA | 	rdbyte	local04, arg01
0162c                 | ' return r
0162c     07 86 46 F7 | 	zerox	local04, #7
01630     4D 86 0E F2 | 	cmp	local04, #77 wz
01634     01 80 66 A6 |  if_e	neg	local01, #1
01638     00 88 06 F6 | 	mov	local05, #0
0163c     07 73 02 FB | 	rdlong	arg01, objptr
01640     04 00 00 FF 
01644     F4 0E 86 F1 | 	sub	objptr, ##2292
01648     02 00 00 FF 
0164c     3A 72 06 F1 | 	add	arg01, ##1082
01650                 | ' asm
01650     39 2D C2 FA | 	rdbyte	result1, arg01
01654                 | ' return r
01654     16 8B 02 F6 | 	mov	local06, result1
01658     07 8A 46 F7 | 	zerox	local06, #7
0165c     4B 8A 0E F2 | 	cmp	local06, #75 wz
01660     01 88 66 A6 |  if_e	neg	local05, #1
01664     44 81 CA F7 | 	test	local01, local05 wz
01668     04 00 00 5F 
0166c     F8 0E 06 51 |  if_ne	add	objptr, ##2296
01670     07 3F 68 5C |  if_ne	wrlong	#31, objptr
01674     04 00 00 5F 
01678     F8 0E 86 51 |  if_ne	sub	objptr, ##2296
0167c     02 74 06 F6 | 	mov	arg02, #2
01680                 | ' 
01680                 | ' ''---------- Set the (x,y) position of cursor
01680                 | ' 
01680                 | ' cursor_x:=x
01680     34 0E 06 F1 | 	add	objptr, #52
01684     07 03 48 FC | 	wrbyte	#1, objptr
01688                 | ' cursor_y:=y
01688     01 0E 06 F1 | 	add	objptr, #1
0168c     07 05 48 FC | 	wrbyte	#2, objptr
01690     35 0E 86 F1 | 	sub	objptr, #53
01694                 | ' position 1,2 : print samples;" ";"samples module"
01694     00 72 06 F6 | 	mov	arg01, #0
01698     54 62 B0 FD | 	call	#__system___getiolock_0145
0169c     16 73 02 F6 | 	mov	arg01, result1
016a0     00 4B B0 FD | 	call	#__system___lockmem
016a4     00 2C 06 F6 | 	mov	result1, #0
016a8     04 00 00 FF 
016ac     F8 0E 06 F1 | 	add	objptr, ##2296
016b0     07 75 02 FB | 	rdlong	arg02, objptr
016b4     04 00 00 FF 
016b8     F8 0E 86 F1 | 	sub	objptr, ##2296
016bc     00 72 06 F6 | 	mov	arg01, #0
016c0     00 76 06 F6 | 	mov	arg03, #0
016c4     0A 78 06 F6 | 	mov	arg04, #10
016c8     B8 4E B0 FD | 	call	#__system___basic_print_integer
016cc     42 00 00 FF 
016d0     48 75 06 F6 | 	mov	arg02, ##@LR__0456
016d4     00 72 06 F6 | 	mov	arg01, #0
016d8     00 76 06 F6 | 	mov	arg03, #0
016dc     5C 4E B0 FD | 	call	#__system___basic_print_string
016e0     42 00 00 FF 
016e4     4A 75 06 F6 | 	mov	arg02, ##@LR__0457
016e8     00 72 06 F6 | 	mov	arg01, #0
016ec     00 76 06 F6 | 	mov	arg03, #0
016f0     48 4E B0 FD | 	call	#__system___basic_print_string
016f4     00 72 06 F6 | 	mov	arg01, #0
016f8     0A 74 06 F6 | 	mov	arg02, #10
016fc     00 76 06 F6 | 	mov	arg03, #0
01700     EC 4D B0 FD | 	call	#__system___basic_print_char
01704     01 2C 06 F6 | 	mov	result1, #1
01708     00 72 06 F6 | 	mov	arg01, #0
0170c     E0 61 B0 FD | 	call	#__system___getiolock_0145
01710     16 01 68 FC | 	wrlong	#0, result1
01714     00 2C 06 F6 | 	mov	result1, #0
01718     04 00 00 FF 
0171c     F4 0E 06 F1 | 	add	objptr, ##2292
01720     07 73 02 FB | 	rdlong	arg01, objptr
01724     04 0E 06 F1 | 	add	objptr, #4
01728     07 75 02 FB | 	rdlong	arg02, objptr
0172c     04 00 00 FF 
01730     F8 0E 86 F1 | 	sub	objptr, ##2296
01734     10 F4 BF FD | 	call	#_getinfo
01738     03 00 00 FF 
0173c     44 0F 06 F1 | 	add	objptr, ##1860
01740     14 46 B0 FD | 	call	#_audio018_spin2_start
01744     17 87 02 F6 | 	mov	local04, result2
01748     A4 0F 06 F1 | 	add	objptr, #420
0174c     07 2D 62 FC | 	wrlong	result1, objptr
01750     04 0E 06 F1 | 	add	objptr, #4
01754     07 87 62 FC | 	wrlong	local04, objptr
01758     10 0E 06 F1 | 	add	objptr, #16
0175c     07 01 68 FC | 	wrlong	#0, objptr
01760     04 0E 06 F1 | 	add	objptr, #4
01764     07 01 68 FC | 	wrlong	#0, objptr
01768     04 0E 06 F1 | 	add	objptr, #4
0176c     07 01 68 FC | 	wrlong	#0, objptr
01770     04 0E 06 F1 | 	add	objptr, #4
01774     07 01 68 FC | 	wrlong	#0, objptr
01778     04 00 00 FF 
0177c     08 0F 86 F1 | 	sub	objptr, ##2312
01780                 | ' getinfo(ma,samples)
01780                 | ' 
01780                 | ' cog,base=paula.start()
01780                 | ' 
01780                 | ' old1=0 : old2=0 :old3=0 : old4=0
01780                 | ' 
01780                 | ' do
01780                 | LR__0010
01780     01 72 06 F6 | 	mov	arg01, #1
01784     E4 08 B0 FD | 	call	#_hng030rm_spin2_waitvbl
01788     02 00 00 FF 
0178c     48 0F 06 F1 | 	add	objptr, ##1352
01790     3C 2A B0 FD | 	call	#_trackerplayer_spin2_tick
01794                 | ' 'channel+0  long current spl pointer 
01794                 | ' 'channel+4  long sample
01794                 | ' 'channel+8  long sample start - bit31=1 when 16 bit spl
01794                 | ' 'channel+12 long loop start
01794                 | ' 'channel+16 long loop end
01794                 | ' 'channel+20 word volume
01794                 | ' 'channel+22 word pan
01794                 | ' 'channel+24 word synthfreq
01794                 | ' 'channel+26 word skip
01794                 | ' 'channel+28 long reserved
01794                 | ' 
01794                 | '     waitvbl
01794                 | '     tracker.tick
01794                 | '      
01794                 | '     if tracker.trigger(0)<>old1 then 
01794     F6 0F 06 F1 | 	add	objptr, #502
01798     07 81 C2 FA | 	rdbyte	local01, objptr
0179c     BE 0F 06 F1 | 	add	objptr, #446
017a0     07 8D 02 FB | 	rdlong	local07, objptr
017a4     04 00 00 FF 
017a8     FC 0E 86 F1 | 	sub	objptr, ##2300
017ac     46 81 0A F2 | 	cmp	local01, local07 wz
017b0     8C 00 90 AD |  if_e	jmp	#LR__0011
017b4     03 00 00 FF 
017b8     3E 0F 06 F1 | 	add	objptr, ##1854
017bc     07 81 C2 FA | 	rdbyte	local01, objptr
017c0     BE 0F 06 F1 | 	add	objptr, #446
017c4     07 81 62 FC | 	wrlong	local01, objptr
017c8     10 0E 86 F1 | 	sub	objptr, #16
017cc     07 73 02 FB | 	rdlong	arg01, objptr
017d0     08 72 06 F1 | 	add	arg01, #8
017d4     01 00 00 FF 
017d8     FD 0E 86 F1 | 	sub	objptr, ##765
017dc     07 75 02 FB | 	rdlong	arg02, objptr
017e0     1E 74 26 F4 | 	bith	arg02, #30
017e4                 | ' asm
017e4     39 75 62 FC | 	wrlong	arg02, arg01
017e8     01 00 00 FF 
017ec     FD 0E 06 F1 | 	add	objptr, ##765
017f0     07 73 02 FB | 	rdlong	arg01, objptr
017f4     0C 72 06 F1 | 	add	arg01, #12
017f8     01 00 00 FF 
017fc     E9 0E 86 F1 | 	sub	objptr, ##745
01800     07 75 E2 FA | 	rdword	arg02, objptr
01804     08 0E 06 F1 | 	add	objptr, #8
01808     07 8F 02 FB | 	rdlong	local08, objptr
0180c     47 75 82 F1 | 	sub	arg02, local08
01810                 | ' asm
01810     39 75 62 FC | 	wrlong	arg02, arg01
01814     01 00 00 FF 
01818     E1 0E 06 F1 | 	add	objptr, ##737
0181c     07 73 02 FB | 	rdlong	arg01, objptr
01820     10 72 06 F1 | 	add	arg01, #16
01824     01 00 00 FF 
01828     E9 0E 86 F1 | 	sub	objptr, ##745
0182c     07 75 E2 FA | 	rdword	arg02, objptr
01830     03 00 00 FF 
01834     03 0E 86 F1 | 	sub	objptr, ##1539
01838     0F 74 46 F7 | 	zerox	arg02, #15
0183c                 | ' asm
0183c     39 75 62 FC | 	wrlong	arg02, arg01
01840                 | LR__0011
01840     04 00 00 FF 
01844     EC 0E 06 F1 | 	add	objptr, ##2284
01848     07 73 02 FB | 	rdlong	arg01, objptr
0184c     14 72 06 F1 | 	add	arg01, #20
01850     01 00 00 FF 
01854     A5 0E 86 F1 | 	sub	objptr, ##677
01858     07 91 02 FB | 	rdlong	local09, objptr
0185c     10 0E 06 F1 | 	add	objptr, #16
01860     07 8F 02 FB | 	rdlong	local08, objptr
01864     47 91 02 F1 | 	add	local09, local08
01868     27 0F 86 F1 | 	sub	objptr, #295
0186c     07 93 02 FB | 	rdlong	local10, objptr
01870     49 91 02 FD | 	qmul	local09, local10
01874     18 74 62 FD | 	getqx	arg02
01878                 | ' asm
01878     39 75 52 FC | 	wrword	arg02, arg01
0187c     01 00 00 FF 
01880     BC 0F 06 F1 | 	add	objptr, ##956
01884     07 73 02 FB | 	rdlong	arg01, objptr
01888     16 72 06 F1 | 	add	arg01, #22
0188c                 | ' asm
0188c     0C 00 80 FF 
01890     39 01 58 FC | 	wrword	##6144, arg01
01894     07 73 02 FB | 	rdlong	arg01, objptr
01898     18 72 06 F1 | 	add	arg01, #24
0189c     01 00 00 FF 
018a0     C5 0E 86 F1 | 	sub	objptr, ##709
018a4     07 75 02 FB | 	rdlong	arg02, objptr
018a8     10 0E 06 F1 | 	add	objptr, #16
018ac     07 8F 02 FB | 	rdlong	local08, objptr
018b0     47 75 02 F1 | 	add	arg02, local08
018b4                 | ' asm
018b4     39 75 52 FC | 	wrword	arg02, arg01
018b8     01 00 00 FF 
018bc     B5 0E 06 F1 | 	add	objptr, ##693
018c0     07 73 02 FB | 	rdlong	arg01, objptr
018c4     1A 72 06 F1 | 	add	arg01, #26
018c8                 | ' asm
018c8     39 03 58 FC | 	wrword	#1, arg01
018cc                 | '   
018cc                 | '   
018cc                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
018cc                 | '     dpoke base+22, 8192-2048
018cc                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
018cc                 | '     dpoke base+26, 1
018cc                 | ' 
018cc                 | '  
018cc                 | '     if tracker.trigger(1) <> old2  then
018cc     AD 0F 86 F1 | 	sub	objptr, #429
018d0     07 81 C2 FA | 	rdbyte	local01, objptr
018d4     C1 0F 06 F1 | 	add	objptr, #449
018d8     07 8D 02 FB | 	rdlong	local07, objptr
018dc     04 00 00 FF 
018e0     00 0F 86 F1 | 	sub	objptr, ##2304
018e4     46 81 0A F2 | 	cmp	local01, local07 wz
018e8     9C 00 90 AD |  if_e	jmp	#LR__0012
018ec     03 00 00 FF 
018f0     3F 0F 06 F1 | 	add	objptr, ##1855
018f4     07 81 C2 FA | 	rdbyte	local01, objptr
018f8     C1 0F 06 F1 | 	add	objptr, #449
018fc     07 81 62 FC | 	wrlong	local01, objptr
01900     14 0E 86 F1 | 	sub	objptr, #20
01904     07 73 02 FB | 	rdlong	arg01, objptr
01908     28 72 06 F1 | 	add	arg01, #40
0190c     01 00 00 FF 
01910     F9 0E 86 F1 | 	sub	objptr, ##761
01914     07 75 02 FB | 	rdlong	arg02, objptr
01918     1E 74 26 F4 | 	bith	arg02, #30
0191c                 | ' asm
0191c     39 75 62 FC | 	wrlong	arg02, arg01
01920     20 72 06 F6 | 	mov	arg01, #32
01924     01 00 00 FF 
01928     F9 0E 06 F1 | 	add	objptr, ##761
0192c     07 87 02 FB | 	rdlong	local04, objptr
01930     43 73 02 F1 | 	add	arg01, local04
01934     0C 72 06 F1 | 	add	arg01, #12
01938     01 00 00 FF 
0193c     E7 0E 86 F1 | 	sub	objptr, ##743
01940     07 75 E2 FA | 	rdword	arg02, objptr
01944     0A 0E 06 F1 | 	add	objptr, #10
01948     07 89 02 FB | 	rdlong	local05, objptr
0194c     44 75 82 F1 | 	sub	arg02, local05
01950                 | ' asm
01950     39 75 62 FC | 	wrlong	arg02, arg01
01954     20 72 06 F6 | 	mov	arg01, #32
01958     01 00 00 FF 
0195c     DD 0E 06 F1 | 	add	objptr, ##733
01960     07 87 02 FB | 	rdlong	local04, objptr
01964     43 73 02 F1 | 	add	arg01, local04
01968     10 72 06 F1 | 	add	arg01, #16
0196c     01 00 00 FF 
01970     E7 0E 86 F1 | 	sub	objptr, ##743
01974     07 75 E2 FA | 	rdword	arg02, objptr
01978     03 00 00 FF 
0197c     05 0E 86 F1 | 	sub	objptr, ##1541
01980     0F 74 46 F7 | 	zerox	arg02, #15
01984                 | ' asm
01984     39 75 62 FC | 	wrlong	arg02, arg01
01988                 | LR__0012
01988     20 72 06 F6 | 	mov	arg01, #32
0198c     04 00 00 FF 
01990     EC 0E 06 F1 | 	add	objptr, ##2284
01994     07 87 02 FB | 	rdlong	local04, objptr
01998     43 73 02 F1 | 	add	arg01, local04
0199c     14 72 06 F1 | 	add	arg01, #20
019a0     01 00 00 FF 
019a4     A1 0E 86 F1 | 	sub	objptr, ##673
019a8     07 95 02 FB | 	rdlong	local11, objptr
019ac     10 0E 06 F1 | 	add	objptr, #16
019b0     07 89 02 FB | 	rdlong	local05, objptr
019b4     44 95 02 F1 | 	add	local11, local05
019b8     2B 0F 86 F1 | 	sub	objptr, #299
019bc     07 97 02 FB | 	rdlong	local12, objptr
019c0     4B 95 02 FD | 	qmul	local11, local12
019c4     18 74 62 FD | 	getqx	arg02
019c8                 | ' asm
019c8     39 75 52 FC | 	wrword	arg02, arg01
019cc     20 72 06 F6 | 	mov	arg01, #32
019d0     01 00 00 FF 
019d4     BC 0F 06 F1 | 	add	objptr, ##956
019d8     07 87 02 FB | 	rdlong	local04, objptr
019dc     43 73 02 F1 | 	add	arg01, local04
019e0     16 72 06 F1 | 	add	arg01, #22
019e4                 | ' asm
019e4     14 00 80 FF 
019e8     39 01 58 FC | 	wrword	##10240, arg01
019ec     20 72 06 F6 | 	mov	arg01, #32
019f0     07 87 02 FB | 	rdlong	local04, objptr
019f4     43 73 02 F1 | 	add	arg01, local04
019f8     18 72 06 F1 | 	add	arg01, #24
019fc     01 00 00 FF 
01a00     C1 0E 86 F1 | 	sub	objptr, ##705
01a04     07 75 02 FB | 	rdlong	arg02, objptr
01a08     10 0E 06 F1 | 	add	objptr, #16
01a0c     07 89 02 FB | 	rdlong	local05, objptr
01a10     44 75 02 F1 | 	add	arg02, local05
01a14                 | ' asm
01a14     39 75 52 FC | 	wrword	arg02, arg01
01a18     20 72 06 F6 | 	mov	arg01, #32
01a1c     01 00 00 FF 
01a20     B1 0E 06 F1 | 	add	objptr, ##689
01a24     07 87 02 FB | 	rdlong	local04, objptr
01a28     43 73 02 F1 | 	add	arg01, local04
01a2c     1A 72 06 F1 | 	add	arg01, #26
01a30                 | ' asm
01a30     39 03 58 FC | 	wrword	#1, arg01
01a34                 | '       
01a34                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01a34                 | '     dpoke 32+base+22, 8192+2048
01a34                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
01a34                 | '     dpoke 32+base+26, 1
01a34                 | ' 
01a34                 | '    if tracker.trigger(2) <> old3  then
01a34     AC 0F 86 F1 | 	sub	objptr, #428
01a38     07 81 C2 FA | 	rdbyte	local01, objptr
01a3c     C4 0F 06 F1 | 	add	objptr, #452
01a40     07 8D 02 FB | 	rdlong	local07, objptr
01a44     04 00 00 FF 
01a48     04 0F 86 F1 | 	sub	objptr, ##2308
01a4c     46 81 0A F2 | 	cmp	local01, local07 wz
01a50     9C 00 90 AD |  if_e	jmp	#LR__0013
01a54     03 00 00 FF 
01a58     40 0F 06 F1 | 	add	objptr, ##1856
01a5c     07 81 C2 FA | 	rdbyte	local01, objptr
01a60     C4 0F 06 F1 | 	add	objptr, #452
01a64     07 81 62 FC | 	wrlong	local01, objptr
01a68     18 0E 86 F1 | 	sub	objptr, #24
01a6c     07 73 02 FB | 	rdlong	arg01, objptr
01a70     48 72 06 F1 | 	add	arg01, #72
01a74     01 00 00 FF 
01a78     F5 0E 86 F1 | 	sub	objptr, ##757
01a7c     07 75 02 FB | 	rdlong	arg02, objptr
01a80     1E 74 26 F4 | 	bith	arg02, #30
01a84                 | ' asm
01a84     39 75 62 FC | 	wrlong	arg02, arg01
01a88     40 72 06 F6 | 	mov	arg01, #64
01a8c     01 00 00 FF 
01a90     F5 0E 06 F1 | 	add	objptr, ##757
01a94     07 87 02 FB | 	rdlong	local04, objptr
01a98     43 73 02 F1 | 	add	arg01, local04
01a9c     0C 72 06 F1 | 	add	arg01, #12
01aa0     01 00 00 FF 
01aa4     E5 0E 86 F1 | 	sub	objptr, ##741
01aa8     07 75 E2 FA | 	rdword	arg02, objptr
01aac     0C 0E 06 F1 | 	add	objptr, #12
01ab0     07 89 02 FB | 	rdlong	local05, objptr
01ab4     44 75 82 F1 | 	sub	arg02, local05
01ab8                 | ' asm
01ab8     39 75 62 FC | 	wrlong	arg02, arg01
01abc     40 72 06 F6 | 	mov	arg01, #64
01ac0     01 00 00 FF 
01ac4     D9 0E 06 F1 | 	add	objptr, ##729
01ac8     07 87 02 FB | 	rdlong	local04, objptr
01acc     43 73 02 F1 | 	add	arg01, local04
01ad0     10 72 06 F1 | 	add	arg01, #16
01ad4     01 00 00 FF 
01ad8     E5 0E 86 F1 | 	sub	objptr, ##741
01adc     07 75 E2 FA | 	rdword	arg02, objptr
01ae0     03 00 00 FF 
01ae4     07 0E 86 F1 | 	sub	objptr, ##1543
01ae8     0F 74 46 F7 | 	zerox	arg02, #15
01aec                 | ' asm
01aec     39 75 62 FC | 	wrlong	arg02, arg01
01af0                 | LR__0013
01af0     40 72 06 F6 | 	mov	arg01, #64
01af4     04 00 00 FF 
01af8     EC 0E 06 F1 | 	add	objptr, ##2284
01afc     07 87 02 FB | 	rdlong	local04, objptr
01b00     43 73 02 F1 | 	add	arg01, local04
01b04     14 72 06 F1 | 	add	arg01, #20
01b08     01 00 00 FF 
01b0c     9D 0E 86 F1 | 	sub	objptr, ##669
01b10     07 95 02 FB | 	rdlong	local11, objptr
01b14     10 0E 06 F1 | 	add	objptr, #16
01b18     07 89 02 FB | 	rdlong	local05, objptr
01b1c     44 95 02 F1 | 	add	local11, local05
01b20     2F 0F 86 F1 | 	sub	objptr, #303
01b24     07 97 02 FB | 	rdlong	local12, objptr
01b28     4B 95 02 FD | 	qmul	local11, local12
01b2c     18 74 62 FD | 	getqx	arg02
01b30                 | ' asm
01b30     39 75 52 FC | 	wrword	arg02, arg01
01b34     40 72 06 F6 | 	mov	arg01, #64
01b38     01 00 00 FF 
01b3c     BC 0F 06 F1 | 	add	objptr, ##956
01b40     07 87 02 FB | 	rdlong	local04, objptr
01b44     43 73 02 F1 | 	add	arg01, local04
01b48     16 72 06 F1 | 	add	arg01, #22
01b4c                 | ' asm
01b4c     14 00 80 FF 
01b50     39 01 58 FC | 	wrword	##10240, arg01
01b54     40 72 06 F6 | 	mov	arg01, #64
01b58     07 87 02 FB | 	rdlong	local04, objptr
01b5c     43 73 02 F1 | 	add	arg01, local04
01b60     18 72 06 F1 | 	add	arg01, #24
01b64     01 00 00 FF 
01b68     BD 0E 86 F1 | 	sub	objptr, ##701
01b6c     07 75 02 FB | 	rdlong	arg02, objptr
01b70     10 0E 06 F1 | 	add	objptr, #16
01b74     07 89 02 FB | 	rdlong	local05, objptr
01b78     44 75 02 F1 | 	add	arg02, local05
01b7c                 | ' asm
01b7c     39 75 52 FC | 	wrword	arg02, arg01
01b80     40 72 06 F6 | 	mov	arg01, #64
01b84     01 00 00 FF 
01b88     AD 0E 06 F1 | 	add	objptr, ##685
01b8c     07 87 02 FB | 	rdlong	local04, objptr
01b90     43 73 02 F1 | 	add	arg01, local04
01b94     1A 72 06 F1 | 	add	arg01, #26
01b98                 | ' asm
01b98     39 03 58 FC | 	wrword	#1, arg01
01b9c                 | '     
01b9c                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01b9c                 | '     dpoke 64+base+22, 8192+2048
01b9c                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
01b9c                 | '     dpoke 64+base+26, 1
01b9c                 | ' 
01b9c                 | '     if tracker.trigger(3) <> old4 then
01b9c     AB 0F 86 F1 | 	sub	objptr, #427
01ba0     07 81 C2 FA | 	rdbyte	local01, objptr
01ba4     C7 0F 06 F1 | 	add	objptr, #455
01ba8     07 8D 02 FB | 	rdlong	local07, objptr
01bac     04 00 00 FF 
01bb0     08 0F 86 F1 | 	sub	objptr, ##2312
01bb4     46 81 0A F2 | 	cmp	local01, local07 wz
01bb8     9C 00 90 AD |  if_e	jmp	#LR__0014
01bbc     03 00 00 FF 
01bc0     41 0F 06 F1 | 	add	objptr, ##1857
01bc4     07 81 C2 FA | 	rdbyte	local01, objptr
01bc8     C7 0F 06 F1 | 	add	objptr, #455
01bcc     07 81 62 FC | 	wrlong	local01, objptr
01bd0     1C 0E 86 F1 | 	sub	objptr, #28
01bd4     07 73 02 FB | 	rdlong	arg01, objptr
01bd8     68 72 06 F1 | 	add	arg01, #104
01bdc     01 00 00 FF 
01be0     F1 0E 86 F1 | 	sub	objptr, ##753
01be4     07 75 02 FB | 	rdlong	arg02, objptr
01be8     1E 74 26 F4 | 	bith	arg02, #30
01bec                 | ' asm
01bec     39 75 62 FC | 	wrlong	arg02, arg01
01bf0     60 72 06 F6 | 	mov	arg01, #96
01bf4     01 00 00 FF 
01bf8     F1 0E 06 F1 | 	add	objptr, ##753
01bfc     07 87 02 FB | 	rdlong	local04, objptr
01c00     43 73 02 F1 | 	add	arg01, local04
01c04     0C 72 06 F1 | 	add	arg01, #12
01c08     01 00 00 FF 
01c0c     E3 0E 86 F1 | 	sub	objptr, ##739
01c10     07 75 E2 FA | 	rdword	arg02, objptr
01c14     0E 0E 06 F1 | 	add	objptr, #14
01c18     07 89 02 FB | 	rdlong	local05, objptr
01c1c     44 75 82 F1 | 	sub	arg02, local05
01c20                 | ' asm
01c20     39 75 62 FC | 	wrlong	arg02, arg01
01c24     60 72 06 F6 | 	mov	arg01, #96
01c28     01 00 00 FF 
01c2c     D5 0E 06 F1 | 	add	objptr, ##725
01c30     07 87 02 FB | 	rdlong	local04, objptr
01c34     43 73 02 F1 | 	add	arg01, local04
01c38     10 72 06 F1 | 	add	arg01, #16
01c3c     01 00 00 FF 
01c40     E3 0E 86 F1 | 	sub	objptr, ##739
01c44     07 75 E2 FA | 	rdword	arg02, objptr
01c48     03 00 00 FF 
01c4c     09 0E 86 F1 | 	sub	objptr, ##1545
01c50     0F 74 46 F7 | 	zerox	arg02, #15
01c54                 | ' asm
01c54     39 75 62 FC | 	wrlong	arg02, arg01
01c58                 | LR__0014
01c58     60 72 06 F6 | 	mov	arg01, #96
01c5c     04 00 00 FF 
01c60     EC 0E 06 F1 | 	add	objptr, ##2284
01c64     07 87 02 FB | 	rdlong	local04, objptr
01c68     43 73 02 F1 | 	add	arg01, local04
01c6c     14 72 06 F1 | 	add	arg01, #20
01c70     01 00 00 FF 
01c74     99 0E 86 F1 | 	sub	objptr, ##665
01c78     07 95 02 FB | 	rdlong	local11, objptr
01c7c     10 0E 06 F1 | 	add	objptr, #16
01c80     07 89 02 FB | 	rdlong	local05, objptr
01c84     44 95 02 F1 | 	add	local11, local05
01c88     33 0F 86 F1 | 	sub	objptr, #307
01c8c     07 97 02 FB | 	rdlong	local12, objptr
01c90     4B 95 02 FD | 	qmul	local11, local12
01c94     18 74 62 FD | 	getqx	arg02
01c98                 | ' asm
01c98     39 75 52 FC | 	wrword	arg02, arg01
01c9c     60 72 06 F6 | 	mov	arg01, #96
01ca0     01 00 00 FF 
01ca4     BC 0F 06 F1 | 	add	objptr, ##956
01ca8     07 87 02 FB | 	rdlong	local04, objptr
01cac     43 73 02 F1 | 	add	arg01, local04
01cb0     16 72 06 F1 | 	add	arg01, #22
01cb4                 | ' asm
01cb4     0C 00 80 FF 
01cb8     39 01 58 FC | 	wrword	##6144, arg01
01cbc     60 72 06 F6 | 	mov	arg01, #96
01cc0     07 87 02 FB | 	rdlong	local04, objptr
01cc4     43 73 02 F1 | 	add	arg01, local04
01cc8     18 72 06 F1 | 	add	arg01, #24
01ccc     01 00 00 FF 
01cd0     B9 0E 86 F1 | 	sub	objptr, ##697
01cd4     07 75 02 FB | 	rdlong	arg02, objptr
01cd8     10 0E 06 F1 | 	add	objptr, #16
01cdc     07 89 02 FB | 	rdlong	local05, objptr
01ce0     44 75 02 F1 | 	add	arg02, local05
01ce4                 | ' asm
01ce4     39 75 52 FC | 	wrword	arg02, arg01
01ce8     60 72 06 F6 | 	mov	arg01, #96
01cec     01 00 00 FF 
01cf0     A9 0E 06 F1 | 	add	objptr, ##681
01cf4     07 87 02 FB | 	rdlong	local04, objptr
01cf8     04 00 00 FF 
01cfc     EC 0E 86 F1 | 	sub	objptr, ##2284
01d00     43 73 02 F1 | 	add	arg01, local04
01d04     1A 72 06 F1 | 	add	arg01, #26
01d08     01 74 06 F6 | 	mov	arg02, #1
01d0c                 | ' asm
01d0c     39 03 58 FC | 	wrword	#1, arg01
01d10     C0 EB BF FD | 	call	#_test
01d14     68 FA 9F FD | 	jmp	#LR__0010
01d18     AF F0 03 F6 | 	mov	ptra, fp
01d1c     BF 00 A0 FD | 	call	#popregs_
01d20                 | _program_ret
01d20     2D 00 64 FD | 	ret
01d24                 | 
01d24                 | ' 
01d24                 | ' 
01d24                 | ' ''---------- putpixel - put a pixel on the screen
01d24                 | ' 
01d24                 | ' pub putpixel1(x,y,c) |byte b
01d24                 | _hng030rm_spin2_putpixel1
01d24                 | ' 
01d24                 | ' 
01d24                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01d24     00 32 06 F6 | 	mov	_var01, #0
01d28     00 72 5E F2 | 	cmps	arg01, #0 wcz
01d2c     01 32 66 36 |  if_ae	neg	_var01, #1
01d30     00 34 06 F6 | 	mov	_var02, #0
01d34     90 0E 06 F1 | 	add	objptr, #144
01d38     07 37 02 FB | 	rdlong	_var03, objptr
01d3c     05 36 66 F0 | 	shl	_var03, #5
01d40     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
01d44     01 34 66 C6 |  if_b	neg	_var02, #1
01d48     1A 33 02 F5 | 	and	_var01, _var02
01d4c     00 38 06 F6 | 	mov	_var04, #0
01d50     00 74 5E F2 | 	cmps	arg02, #0 wcz
01d54     01 38 66 36 |  if_ae	neg	_var04, #1
01d58     1C 33 02 F5 | 	and	_var01, _var04
01d5c     00 3A 06 F6 | 	mov	_var05, #0
01d60     04 0E 06 F1 | 	add	objptr, #4
01d64     07 3D 02 FB | 	rdlong	_var06, objptr
01d68     94 0E 86 F1 | 	sub	objptr, #148
01d6c     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
01d70     01 3A 66 C6 |  if_b	neg	_var05, #1
01d74     1D 33 CA F7 | 	test	_var01, _var05 wz
01d78     90 00 90 AD |  if_e	jmp	#LR__0017
01d7c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01d7c     07 33 02 FB | 	rdlong	_var01, objptr
01d80     90 0E 06 F1 | 	add	objptr, #144
01d84     07 35 02 FB | 	rdlong	_var02, objptr
01d88     90 0E 86 F1 | 	sub	objptr, #144
01d8c     02 34 66 F0 | 	shl	_var02, #2
01d90     3A 35 02 FD | 	qmul	_var02, arg02
01d94     18 3E 62 FD | 	getqx	_var07
01d98     1F 33 02 F1 | 	add	_var01, _var07
01d9c     39 39 02 F6 | 	mov	_var04, arg01
01da0     03 38 46 F0 | 	shr	_var04, #3
01da4     1C 33 02 F1 | 	add	_var01, _var04
01da8     19 41 C2 FA | 	rdbyte	_var08, _var01
01dac                 | '     if (c==0)
01dac     00 76 0E F2 | 	cmp	arg03, #0 wz
01db0     18 00 90 5D |  if_ne	jmp	#LR__0015
01db4                 | '       b:=b & !(1<<(x//8))
01db4     39 37 52 F6 | 	abs	_var03, arg01 wc
01db8     07 36 06 F5 | 	and	_var03, #7
01dbc     1B 37 62 C6 |  if_b	neg	_var03, _var03
01dc0     1B 35 C2 F9 | 	decod	_var02, _var03
01dc4     1A 41 22 F5 | 	andn	_var08, _var02
01dc8                 | '     else
01dc8     14 00 90 FD | 	jmp	#LR__0016
01dcc                 | LR__0015
01dcc                 | '       b:=b |(1<<(x//8))
01dcc     39 37 52 F6 | 	abs	_var03, arg01 wc
01dd0     07 36 06 F5 | 	and	_var03, #7
01dd4     1B 37 62 C6 |  if_b	neg	_var03, _var03
01dd8     1B 35 C2 F9 | 	decod	_var02, _var03
01ddc     1A 41 42 F5 | 	or	_var08, _var02
01de0                 | LR__0016
01de0                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01de0     07 33 02 FB | 	rdlong	_var01, objptr
01de4     90 0E 06 F1 | 	add	objptr, #144
01de8     07 35 02 FB | 	rdlong	_var02, objptr
01dec     90 0E 86 F1 | 	sub	objptr, #144
01df0     02 34 66 F0 | 	shl	_var02, #2
01df4     3A 35 02 FD | 	qmul	_var02, arg02
01df8     18 3E 62 FD | 	getqx	_var07
01dfc     1F 33 02 F1 | 	add	_var01, _var07
01e00     03 72 46 F0 | 	shr	arg01, #3
01e04     39 33 02 F1 | 	add	_var01, arg01
01e08     19 41 42 FC | 	wrbyte	_var08, _var01
01e0c                 | LR__0017
01e0c                 | _hng030rm_spin2_putpixel1_ret
01e0c     2D 00 64 FD | 	ret
01e10                 | 
01e10                 | ' 
01e10                 | ' 
01e10                 | ' pub putpixel2(x,y,c) |byte b
01e10                 | _hng030rm_spin2_putpixel2
01e10                 | ' 
01e10                 | ' 
01e10                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01e10     00 32 06 F6 | 	mov	_var01, #0
01e14     00 72 5E F2 | 	cmps	arg01, #0 wcz
01e18     01 32 66 36 |  if_ae	neg	_var01, #1
01e1c     00 34 06 F6 | 	mov	_var02, #0
01e20     90 0E 06 F1 | 	add	objptr, #144
01e24     07 37 02 FB | 	rdlong	_var03, objptr
01e28     04 36 66 F0 | 	shl	_var03, #4
01e2c     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
01e30     01 34 66 C6 |  if_b	neg	_var02, #1
01e34     1A 33 02 F5 | 	and	_var01, _var02
01e38     00 38 06 F6 | 	mov	_var04, #0
01e3c     00 74 5E F2 | 	cmps	arg02, #0 wcz
01e40     01 38 66 36 |  if_ae	neg	_var04, #1
01e44     1C 33 02 F5 | 	and	_var01, _var04
01e48     00 3A 06 F6 | 	mov	_var05, #0
01e4c     04 0E 06 F1 | 	add	objptr, #4
01e50     07 3D 02 FB | 	rdlong	_var06, objptr
01e54     94 0E 86 F1 | 	sub	objptr, #148
01e58     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
01e5c     01 3A 66 C6 |  if_b	neg	_var05, #1
01e60     1D 33 CA F7 | 	test	_var01, _var05 wz
01e64     90 00 90 AD |  if_e	jmp	#LR__0018
01e68                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01e68     07 33 02 FB | 	rdlong	_var01, objptr
01e6c     90 0E 06 F1 | 	add	objptr, #144
01e70     07 35 02 FB | 	rdlong	_var02, objptr
01e74     90 0E 86 F1 | 	sub	objptr, #144
01e78     02 34 66 F0 | 	shl	_var02, #2
01e7c     3A 35 02 FD | 	qmul	_var02, arg02
01e80     18 3E 62 FD | 	getqx	_var07
01e84     1F 33 02 F1 | 	add	_var01, _var07
01e88     39 39 02 F6 | 	mov	_var04, arg01
01e8c     02 38 46 F0 | 	shr	_var04, #2
01e90     1C 33 02 F1 | 	add	_var01, _var04
01e94     19 41 C2 FA | 	rdbyte	_var08, _var01
01e98                 | '     b:=b & !(%11<<((x//4)<<1))
01e98     39 37 52 F6 | 	abs	_var03, arg01 wc
01e9c     03 36 06 F5 | 	and	_var03, #3
01ea0     1B 37 62 C6 |  if_b	neg	_var03, _var03
01ea4     01 36 66 F0 | 	shl	_var03, #1
01ea8     03 34 06 F6 | 	mov	_var02, #3
01eac     1B 35 62 F0 | 	shl	_var02, _var03
01eb0     1A 41 22 F5 | 	andn	_var08, _var02
01eb4                 | '     b:=b |(c<<((x//4)<<1))
01eb4     39 37 52 F6 | 	abs	_var03, arg01 wc
01eb8     03 36 06 F5 | 	and	_var03, #3
01ebc     1B 37 62 C6 |  if_b	neg	_var03, _var03
01ec0     01 36 66 F0 | 	shl	_var03, #1
01ec4     1B 77 62 F0 | 	shl	arg03, _var03
01ec8     3B 41 42 F5 | 	or	_var08, arg03
01ecc                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01ecc     07 33 02 FB | 	rdlong	_var01, objptr
01ed0     90 0E 06 F1 | 	add	objptr, #144
01ed4     07 35 02 FB | 	rdlong	_var02, objptr
01ed8     90 0E 86 F1 | 	sub	objptr, #144
01edc     02 34 66 F0 | 	shl	_var02, #2
01ee0     3A 35 02 FD | 	qmul	_var02, arg02
01ee4     18 3E 62 FD | 	getqx	_var07
01ee8     1F 33 02 F1 | 	add	_var01, _var07
01eec     02 72 46 F0 | 	shr	arg01, #2
01ef0     39 33 02 F1 | 	add	_var01, arg01
01ef4     19 41 42 FC | 	wrbyte	_var08, _var01
01ef8                 | LR__0018
01ef8                 | _hng030rm_spin2_putpixel2_ret
01ef8     2D 00 64 FD | 	ret
01efc                 | 
01efc                 | ' 
01efc                 | ' 
01efc                 | ' pub putpixel4(x,y,c) |byte b
01efc                 | _hng030rm_spin2_putpixel4
01efc                 | ' 
01efc                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01efc     00 32 06 F6 | 	mov	_var01, #0
01f00     00 72 5E F2 | 	cmps	arg01, #0 wcz
01f04     01 32 66 36 |  if_ae	neg	_var01, #1
01f08     00 34 06 F6 | 	mov	_var02, #0
01f0c     90 0E 06 F1 | 	add	objptr, #144
01f10     07 37 02 FB | 	rdlong	_var03, objptr
01f14     04 36 66 F0 | 	shl	_var03, #4
01f18     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
01f1c     01 34 66 C6 |  if_b	neg	_var02, #1
01f20     1A 33 02 F5 | 	and	_var01, _var02
01f24     00 38 06 F6 | 	mov	_var04, #0
01f28     00 74 5E F2 | 	cmps	arg02, #0 wcz
01f2c     01 38 66 36 |  if_ae	neg	_var04, #1
01f30     1C 33 02 F5 | 	and	_var01, _var04
01f34     00 3A 06 F6 | 	mov	_var05, #0
01f38     04 0E 06 F1 | 	add	objptr, #4
01f3c     07 3D 02 FB | 	rdlong	_var06, objptr
01f40     94 0E 86 F1 | 	sub	objptr, #148
01f44     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
01f48     01 3A 66 C6 |  if_b	neg	_var05, #1
01f4c     1D 33 CA F7 | 	test	_var01, _var05 wz
01f50     90 00 90 AD |  if_e	jmp	#LR__0019
01f54                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01f54     07 33 02 FB | 	rdlong	_var01, objptr
01f58     90 0E 06 F1 | 	add	objptr, #144
01f5c     07 35 02 FB | 	rdlong	_var02, objptr
01f60     90 0E 86 F1 | 	sub	objptr, #144
01f64     02 34 66 F0 | 	shl	_var02, #2
01f68     3A 35 02 FD | 	qmul	_var02, arg02
01f6c     18 3E 62 FD | 	getqx	_var07
01f70     1F 33 02 F1 | 	add	_var01, _var07
01f74     39 39 02 F6 | 	mov	_var04, arg01
01f78     01 38 46 F0 | 	shr	_var04, #1
01f7c     1C 33 02 F1 | 	add	_var01, _var04
01f80     19 41 C2 FA | 	rdbyte	_var08, _var01
01f84                 | '     b:=b & !(%1111<<((x//2)<<2))
01f84     39 37 52 F6 | 	abs	_var03, arg01 wc
01f88     01 36 06 F5 | 	and	_var03, #1
01f8c     1B 37 62 C6 |  if_b	neg	_var03, _var03
01f90     02 36 66 F0 | 	shl	_var03, #2
01f94     0F 34 06 F6 | 	mov	_var02, #15
01f98     1B 35 62 F0 | 	shl	_var02, _var03
01f9c     1A 41 22 F5 | 	andn	_var08, _var02
01fa0                 | '     b:=b |(c<<((x//2)<<2))
01fa0     39 37 52 F6 | 	abs	_var03, arg01 wc
01fa4     01 36 06 F5 | 	and	_var03, #1
01fa8     1B 37 62 C6 |  if_b	neg	_var03, _var03
01fac     02 36 66 F0 | 	shl	_var03, #2
01fb0     1B 77 62 F0 | 	shl	arg03, _var03
01fb4     3B 41 42 F5 | 	or	_var08, arg03
01fb8                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01fb8     07 33 02 FB | 	rdlong	_var01, objptr
01fbc     90 0E 06 F1 | 	add	objptr, #144
01fc0     07 35 02 FB | 	rdlong	_var02, objptr
01fc4     90 0E 86 F1 | 	sub	objptr, #144
01fc8     02 34 66 F0 | 	shl	_var02, #2
01fcc     3A 35 02 FD | 	qmul	_var02, arg02
01fd0     18 3E 62 FD | 	getqx	_var07
01fd4     1F 33 02 F1 | 	add	_var01, _var07
01fd8     01 72 46 F0 | 	shr	arg01, #1
01fdc     39 33 02 F1 | 	add	_var01, arg01
01fe0     19 41 42 FC | 	wrbyte	_var08, _var01
01fe4                 | LR__0019
01fe4                 | _hng030rm_spin2_putpixel4_ret
01fe4     2D 00 64 FD | 	ret
01fe8                 | 
01fe8                 | ' 
01fe8                 | ' 
01fe8                 | ' pub putpixel8(x,y,c)
01fe8                 | _hng030rm_spin2_putpixel8
01fe8                 | ' 
01fe8                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01fe8     00 32 06 F6 | 	mov	_var01, #0
01fec     00 72 5E F2 | 	cmps	arg01, #0 wcz
01ff0     01 32 66 36 |  if_ae	neg	_var01, #1
01ff4     00 34 06 F6 | 	mov	_var02, #0
01ff8     90 0E 06 F1 | 	add	objptr, #144
01ffc     07 37 02 FB | 	rdlong	_var03, objptr
02000     02 36 66 F0 | 	shl	_var03, #2
02004     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
02008     01 34 66 C6 |  if_b	neg	_var02, #1
0200c     1A 33 02 F5 | 	and	_var01, _var02
02010     00 38 06 F6 | 	mov	_var04, #0
02014     00 74 5E F2 | 	cmps	arg02, #0 wcz
02018     01 38 66 36 |  if_ae	neg	_var04, #1
0201c     1C 33 02 F5 | 	and	_var01, _var04
02020     00 3A 06 F6 | 	mov	_var05, #0
02024     04 0E 06 F1 | 	add	objptr, #4
02028     07 3D 02 FB | 	rdlong	_var06, objptr
0202c     94 0E 86 F1 | 	sub	objptr, #148
02030     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
02034     01 3A 66 C6 |  if_b	neg	_var05, #1
02038     1D 33 CA F7 | 	test	_var01, _var05 wz
0203c     28 00 90 AD |  if_e	jmp	#LR__0020
02040                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02040     07 33 02 FB | 	rdlong	_var01, objptr
02044     90 0E 06 F1 | 	add	objptr, #144
02048     07 35 02 FB | 	rdlong	_var02, objptr
0204c     90 0E 86 F1 | 	sub	objptr, #144
02050     02 34 66 F0 | 	shl	_var02, #2
02054     3A 35 02 FD | 	qmul	_var02, arg02
02058     18 3E 62 FD | 	getqx	_var07
0205c     1F 33 02 F1 | 	add	_var01, _var07
02060     39 33 02 F1 | 	add	_var01, arg01
02064     19 77 42 FC | 	wrbyte	arg03, _var01
02068                 | LR__0020
02068                 | _hng030rm_spin2_putpixel8_ret
02068     2D 00 64 FD | 	ret
0206c                 | 
0206c                 | ' 
0206c                 | ' '*************************************************************************
0206c                 | ' '                                                                        *
0206c                 | ' '  VBlank functions                                                      *
0206c                 | ' '                                                                        *
0206c                 | ' '*************************************************************************
0206c                 | ' 
0206c                 | ' pub waitvbl(amount) | i
0206c                 | _hng030rm_spin2_waitvbl
0206c     04 5A 05 F6 | 	mov	COUNT_, #4
02070     B0 00 A0 FD | 	call	#pushregs_
02074     39 81 02 F6 | 	mov	local01, arg01
02078                 | ' 
02078                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02078                 | ' 
02078                 | ' repeat i from 1 to amount
02078     01 82 06 F6 | 	mov	local02, #1
0207c     01 80 5E F2 | 	cmps	local01, #1 wcz
02080     01 84 06 16 |  if_a	mov	local03, #1
02084     01 84 66 E6 |  if_be	neg	local03, #1
02088     42 81 02 F1 | 	add	local01, local03
0208c                 | LR__0021
0208c                 | '   repeat until vblank==0
0208c                 | LR__0022
0208c     40 0E 06 F1 | 	add	objptr, #64
02090     07 87 0A FB | 	rdlong	local04, objptr wz
02094     40 0E 86 F1 | 	sub	objptr, #64
02098     0C 00 90 AD |  if_e	jmp	#LR__0023
0209c                 | '     waitus(100)
0209c     64 72 06 F6 | 	mov	arg01, #100
020a0     44 43 B0 FD | 	call	#__system___waitus
020a4     E4 FF 9F FD | 	jmp	#LR__0022
020a8                 | LR__0023
020a8                 | '   repeat until vblank==1
020a8                 | LR__0024
020a8     40 0E 06 F1 | 	add	objptr, #64
020ac     07 87 02 FB | 	rdlong	local04, objptr
020b0     40 0E 86 F1 | 	sub	objptr, #64
020b4     01 86 0E F2 | 	cmp	local04, #1 wz
020b8     0C 00 90 AD |  if_e	jmp	#LR__0025
020bc                 | '     waitus(100)
020bc     64 72 06 F6 | 	mov	arg01, #100
020c0     24 43 B0 FD | 	call	#__system___waitus
020c4     E0 FF 9F FD | 	jmp	#LR__0024
020c8                 | LR__0025
020c8     42 83 02 F1 | 	add	local02, local03
020cc     40 83 0A F2 | 	cmp	local02, local01 wz
020d0     B8 FF 9F 5D |  if_ne	jmp	#LR__0021
020d4     AF F0 03 F6 | 	mov	ptra, fp
020d8     BF 00 A0 FD | 	call	#popregs_
020dc                 | _hng030rm_spin2_waitvbl_ret
020dc     2D 00 64 FD | 	ret
020e0                 | 
020e0                 | ' 
020e0                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
020e0                 | ' 
020e0                 | ' pub setbordercolor(r,g,b) | color
020e0                 | _hng030rm_spin2_setbordercolor
020e0                 | ' 
020e0                 | ' color:=r<<24+g<<16+b<<8
020e0     18 72 66 F0 | 	shl	arg01, #24
020e4     10 74 66 F0 | 	shl	arg02, #16
020e8     3A 73 02 F1 | 	add	arg01, arg02
020ec     08 76 66 F0 | 	shl	arg03, #8
020f0     3B 73 02 F1 | 	add	arg01, arg03
020f4                 | ' bordercolor:=color
020f4     2C 0E 06 F1 | 	add	objptr, #44
020f8     07 73 62 FC | 	wrlong	arg01, objptr
020fc     2C 0E 86 F1 | 	sub	objptr, #44
02100                 | _hng030rm_spin2_setbordercolor_ret
02100     2D 00 64 FD | 	ret
02104                 | 
02104                 | ' 
02104                 | ' 
02104                 | ' '*************************************************************************
02104                 | ' '                                                                        *
02104                 | ' '  Text functions                                                        *
02104                 | ' '                                                                        *
02104                 | ' '*************************************************************************
02104                 | ' 
02104                 | ' ''---------- Clear the screen, set its foreground/background color
02104                 | ' 
02104                 | ' pub cls(fc,bc)   :c
02104                 | _hng030rm_spin2_cls
02104     06 5A 05 F6 | 	mov	COUNT_, #6
02108     B0 00 A0 FD | 	call	#pushregs_
0210c     39 81 02 F6 | 	mov	local01, arg01
02110     3A 83 02 F6 | 	mov	local02, arg02
02114                 | ' 
02114                 | ' if (graphmode<512)
02114     C4 0E 06 F1 | 	add	objptr, #196
02118     07 85 02 FB | 	rdlong	local03, objptr
0211c     C4 0E 86 F1 | 	sub	objptr, #196
02120     01 00 00 FF 
02124     00 84 5E F2 | 	cmps	local03, ##512 wcz
02128     34 00 90 3D |  if_ae	jmp	#LR__0026
0212c                 | '   c:=fc<<24+bc<<16+$20
0212c     40 87 02 F6 | 	mov	local04, local01
02130     18 86 66 F0 | 	shl	local04, #24
02134     41 89 02 F6 | 	mov	local05, local02
02138     10 88 66 F0 | 	shl	local05, #16
0213c     44 87 02 F1 | 	add	local04, local05
02140     20 86 06 F1 | 	add	local04, #32
02144                 | '   longfill(buf_ptr,c,buflen)
02144     07 73 02 FB | 	rdlong	arg01, objptr
02148     30 0E 06 F1 | 	add	objptr, #48
0214c     07 77 02 FB | 	rdlong	arg03, objptr
02150     30 0E 86 F1 | 	sub	objptr, #48
02154     43 75 02 F6 | 	mov	arg02, local04
02158     A8 00 A0 FD | 	call	#\builtin_longfill_
0215c                 | ' else
0215c     AC 00 90 FD | 	jmp	#LR__0032
02160                 | LR__0026
02160                 | '   if (graphmode & 48) ==48
02160     C4 0E 06 F1 | 	add	objptr, #196
02164     07 85 02 FB | 	rdlong	local03, objptr
02168     C4 0E 86 F1 | 	sub	objptr, #196
0216c     30 84 06 F5 | 	and	local03, #48
02170     30 84 0E F2 | 	cmp	local03, #48 wz
02174                 | '     c:=bc
02174     41 87 02 A6 |  if_e	mov	local04, local02
02178     74 00 90 AD |  if_e	jmp	#LR__0031
0217c                 | '   elseif (graphmode & 48) ==32
0217c     C4 0E 06 F1 | 	add	objptr, #196
02180     07 85 02 FB | 	rdlong	local03, objptr
02184     C4 0E 86 F1 | 	sub	objptr, #196
02188     30 84 06 F5 | 	and	local03, #48
0218c     20 84 0E F2 | 	cmp	local03, #32 wz
02190     10 00 90 5D |  if_ne	jmp	#LR__0027
02194                 | '     c:=bc<<4+bc
02194     41 87 02 F6 | 	mov	local04, local02
02198     04 86 66 F0 | 	shl	local04, #4
0219c     41 87 02 F1 | 	add	local04, local02
021a0     4C 00 90 FD | 	jmp	#LR__0030
021a4                 | LR__0027
021a4                 | '   elseif (graphmode & 48) ==16
021a4     C4 0E 06 F1 | 	add	objptr, #196
021a8     07 85 02 FB | 	rdlong	local03, objptr
021ac     C4 0E 86 F1 | 	sub	objptr, #196
021b0     30 84 06 F5 | 	and	local03, #48
021b4     10 84 0E F2 | 	cmp	local03, #16 wz
021b8     28 00 90 5D |  if_ne	jmp	#LR__0028
021bc                 | '     c:=bc<<6+bc<<4+bc<<2+bc
021bc     41 87 02 F6 | 	mov	local04, local02
021c0     06 86 66 F0 | 	shl	local04, #6
021c4     41 89 02 F6 | 	mov	local05, local02
021c8     04 88 66 F0 | 	shl	local05, #4
021cc     44 87 02 F1 | 	add	local04, local05
021d0     41 8B 02 F6 | 	mov	local06, local02
021d4     02 8A 66 F0 | 	shl	local06, #2
021d8     45 87 02 F1 | 	add	local04, local06
021dc     41 87 02 F1 | 	add	local04, local02
021e0                 | '   else
021e0     0C 00 90 FD | 	jmp	#LR__0029
021e4                 | LR__0028
021e4                 | '     if bc==1
021e4     01 82 0E F2 | 	cmp	local02, #1 wz
021e8                 | '       c:=255
021e8     FF 86 06 A6 |  if_e	mov	local04, #255
021ec                 | '     else
021ec                 | '       c:=0
021ec     00 86 06 56 |  if_ne	mov	local04, #0
021f0                 | LR__0029
021f0                 | LR__0030
021f0                 | LR__0031
021f0                 | '   bytefill(buf_ptr,c,buflen*4)
021f0     07 73 02 FB | 	rdlong	arg01, objptr
021f4     30 0E 06 F1 | 	add	objptr, #48
021f8     07 77 02 FB | 	rdlong	arg03, objptr
021fc     30 0E 86 F1 | 	sub	objptr, #48
02200     02 76 66 F0 | 	shl	arg03, #2
02204     43 75 02 F6 | 	mov	arg02, local04
02208     A0 00 A0 FD | 	call	#\builtin_bytefill_
0220c                 | LR__0032
0220c                 | ' setwritecolors(fc,bc)
0220c                 | ' 
0220c                 | ' 
0220c                 | ' write_color:=ff
0220c     38 0E 06 F1 | 	add	objptr, #56
02210     07 81 62 FC | 	wrlong	local01, objptr
02214                 | ' write_background:=bb
02214     04 0E 06 F1 | 	add	objptr, #4
02218     07 83 62 FC | 	wrlong	local02, objptr
0221c                 | ' cursor_x:=0
0221c     08 0E 86 F1 | 	sub	objptr, #8
02220     07 01 48 FC | 	wrbyte	#0, objptr
02224                 | ' cursor_y:=0
02224     01 0E 06 F1 | 	add	objptr, #1
02228     07 01 48 FC | 	wrbyte	#0, objptr
0222c     35 0E 86 F1 | 	sub	objptr, #53
02230     43 2D 02 F6 | 	mov	result1, local04
02234     AF F0 03 F6 | 	mov	ptra, fp
02238     BF 00 A0 FD | 	call	#popregs_
0223c                 | _hng030rm_spin2_cls_ret
0223c     2D 00 64 FD | 	ret
02240                 | 
02240                 | ' 
02240                 | ' ''--------- Output a string at position x,y without changing colors
02240                 | ' 
02240                 | ' pub outtextxy(x,y,text) | iii
02240                 | _hng030rm_spin2_outtextxy
02240     0F 5A 05 F6 | 	mov	COUNT_, #15
02244     B0 00 A0 FD | 	call	#pushregs_
02248     39 81 02 F6 | 	mov	local01, arg01
0224c                 | ' 
0224c                 | ' repeat iii from 0 to strsize(text)-1
0224c     00 82 06 F6 | 	mov	local02, #0
02250     3B 73 02 F6 | 	mov	arg01, arg03
02254     00 84 06 F6 | 	mov	local03, #0
02258     B4 DD 9F FE | 	loc	pa,	#(@LR__0034-@LR__0033)
0225c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02260                 | LR__0033
02260     39 87 CA FA | 	rdbyte	local04, arg01 wz
02264     01 84 06 51 |  if_ne	add	local03, #1
02268     01 72 06 51 |  if_ne	add	arg01, #1
0226c     F0 FF 9F 5D |  if_ne	jmp	#LR__0033
02270                 | LR__0034
02270     42 2D 02 F6 | 	mov	result1, local03
02274     16 89 02 F6 | 	mov	local05, result1
02278     01 88 86 F1 | 	sub	local05, #1
0227c     00 88 5E F2 | 	cmps	local05, #0 wcz
02280     01 8A 06 16 |  if_a	mov	local06, #1
02284     01 8A 66 E6 |  if_be	neg	local06, #1
02288     45 89 02 F1 | 	add	local05, local06
0228c     E8 DD 9F FE | 	loc	pa,	#(@LR__0036-@LR__0035)
02290     93 00 A0 FD | 	call	#FCACHE_LOAD_
02294                 | LR__0035
02294                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02294     07 8D 02 FB | 	rdlong	local07, objptr
02298     90 0E 06 F1 | 	add	objptr, #144
0229c     07 8F 02 FB | 	rdlong	local08, objptr
022a0     90 0E 86 F1 | 	sub	objptr, #144
022a4     3A 8F 02 FD | 	qmul	local08, arg02
022a8     18 90 62 FD | 	getqx	local09
022ac     40 91 02 F1 | 	add	local09, local01
022b0     41 91 02 F1 | 	add	local09, local02
022b4     02 90 66 F0 | 	shl	local09, #2
022b8     48 8D 02 F1 | 	add	local07, local09
022bc     46 93 02 FB | 	rdlong	local10, local07
022c0     FF 92 26 F5 | 	andn	local10, #255
022c4     3B 95 02 F6 | 	mov	local11, arg03
022c8     41 95 02 F1 | 	add	local11, local02
022cc     4A 97 C2 FA | 	rdbyte	local12, local11
022d0     4B 93 42 F5 | 	or	local10, local12
022d4     07 99 02 FB | 	rdlong	local13, objptr
022d8     90 0E 06 F1 | 	add	objptr, #144
022dc     07 9B 02 FB | 	rdlong	local14, objptr
022e0     90 0E 86 F1 | 	sub	objptr, #144
022e4     3A 9B 02 FD | 	qmul	local14, arg02
022e8     18 9C 62 FD | 	getqx	local15
022ec     40 9D 02 F1 | 	add	local15, local01
022f0     41 9D 02 F1 | 	add	local15, local02
022f4     02 9C 66 F0 | 	shl	local15, #2
022f8     4E 99 02 F1 | 	add	local13, local15
022fc     4C 93 62 FC | 	wrlong	local10, local13
02300     45 83 02 F1 | 	add	local02, local06
02304     44 83 0A F2 | 	cmp	local02, local05 wz
02308     88 FF 9F 5D |  if_ne	jmp	#LR__0035
0230c                 | LR__0036
0230c     AF F0 03 F6 | 	mov	ptra, fp
02310     BF 00 A0 FD | 	call	#popregs_
02314                 | _hng030rm_spin2_outtextxy_ret
02314     2D 00 64 FD | 	ret
02318                 | 
02318                 | ' 
02318                 | ' ''---------- Output a char at the cursor position, move the cursor
02318                 | ' 
02318                 | ' pub putchar(achar) | c,x,y
02318                 | _hng030rm_spin2_putchar
02318     0F 5A 05 F6 | 	mov	COUNT_, #15
0231c     B0 00 A0 FD | 	call	#pushregs_
02320     39 81 02 F6 | 	mov	local01, arg01
02324                 | ' 
02324                 | ' if achar==10
02324     0A 80 0E F2 | 	cmp	local01, #10 wz
02328     08 00 90 5D |  if_ne	jmp	#LR__0037
0232c                 | '   crlf()
0232c     34 04 B0 FD | 	call	#_hng030rm_spin2_crlf
02330                 | ' else  
02330     64 01 90 FD | 	jmp	#LR__0040
02334                 | LR__0037
02334                 | '   x:=cursor_x
02334     34 0E 06 F1 | 	add	objptr, #52
02338     07 83 C2 FA | 	rdbyte	local02, objptr
0233c                 | '   y:=cursor_y
0233c     01 0E 06 F1 | 	add	objptr, #1
02340     07 85 C2 FA | 	rdbyte	local03, objptr
02344                 | '   c:=write_color<<24+write_background<<16
02344     03 0E 06 F1 | 	add	objptr, #3
02348     07 87 02 FB | 	rdlong	local04, objptr
0234c     18 86 66 F0 | 	shl	local04, #24
02350     04 0E 06 F1 | 	add	objptr, #4
02354     07 89 02 FB | 	rdlong	local05, objptr
02358     3C 0E 86 F1 | 	sub	objptr, #60
0235c     10 88 66 F0 | 	shl	local05, #16
02360     44 87 02 F1 | 	add	local04, local05
02364                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02364     07 8B 02 FB | 	rdlong	local06, objptr
02368     90 0E 06 F1 | 	add	objptr, #144
0236c     07 8D 02 FB | 	rdlong	local07, objptr
02370     90 0E 86 F1 | 	sub	objptr, #144
02374     42 8D 02 FD | 	qmul	local07, local03
02378     18 8E 62 FD | 	getqx	local08
0237c     41 8F 02 F1 | 	add	local08, local02
02380     02 8E 66 F0 | 	shl	local08, #2
02384     47 8B 02 F1 | 	add	local06, local08
02388     45 91 02 FB | 	rdlong	local09, local06
0238c     7F 00 00 FF 
02390     FF 91 06 F5 | 	and	local09, ##65535
02394     43 91 42 F5 | 	or	local09, local04
02398     07 93 02 FB | 	rdlong	local10, objptr
0239c     90 0E 06 F1 | 	add	objptr, #144
023a0     07 95 02 FB | 	rdlong	local11, objptr
023a4     90 0E 86 F1 | 	sub	objptr, #144
023a8     42 95 02 FD | 	qmul	local11, local03
023ac     18 96 62 FD | 	getqx	local12
023b0     41 97 02 F1 | 	add	local12, local02
023b4     02 96 66 F0 | 	shl	local12, #2
023b8     4B 93 02 F1 | 	add	local10, local12
023bc     49 91 62 FC | 	wrlong	local09, local10
023c0                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
023c0     07 8B 02 FB | 	rdlong	local06, objptr
023c4     90 0E 06 F1 | 	add	objptr, #144
023c8     07 8D 02 FB | 	rdlong	local07, objptr
023cc     90 0E 86 F1 | 	sub	objptr, #144
023d0     42 8D 02 FD | 	qmul	local07, local03
023d4     18 8E 62 FD | 	getqx	local08
023d8     41 8F 02 F1 | 	add	local08, local02
023dc     02 8E 66 F0 | 	shl	local08, #2
023e0     47 8B 02 F1 | 	add	local06, local08
023e4     45 91 02 FB | 	rdlong	local09, local06
023e8     FF 90 26 F5 | 	andn	local09, #255
023ec     40 93 02 F6 | 	mov	local10, local01
023f0     FF 92 06 F5 | 	and	local10, #255
023f4     49 91 42 F5 | 	or	local09, local10
023f8     07 99 02 FB | 	rdlong	local13, objptr
023fc     90 0E 06 F1 | 	add	objptr, #144
02400     07 9B 02 FB | 	rdlong	local14, objptr
02404     42 9B 02 FD | 	qmul	local14, local03
02408     18 9C 62 FD | 	getqx	local15
0240c     41 9D 02 F1 | 	add	local15, local02
02410     02 9C 66 F0 | 	shl	local15, #2
02414     4E 99 02 F1 | 	add	local13, local15
02418     4C 91 62 FC | 	wrlong	local09, local13
0241c                 | '   cursor_x+=1
0241c     5C 0E 86 F1 | 	sub	objptr, #92
02420     07 91 C2 FA | 	rdbyte	local09, objptr
02424     01 90 06 F1 | 	add	local09, #1
02428     07 91 42 FC | 	wrbyte	local09, objptr
0242c                 | '   if cursor_x==cpl
0242c     07 91 C2 FA | 	rdbyte	local09, objptr
02430     5C 0E 06 F1 | 	add	objptr, #92
02434     07 89 02 FB | 	rdlong	local05, objptr
02438     90 0E 86 F1 | 	sub	objptr, #144
0243c     44 91 0A F2 | 	cmp	local09, local05 wz
02440     54 00 90 5D |  if_ne	jmp	#LR__0039
02444                 | '     cursor_x:=0
02444     34 0E 06 F1 | 	add	objptr, #52
02448     07 01 48 FC | 	wrbyte	#0, objptr
0244c                 | '     cursor_y+=1
0244c     01 0E 06 F1 | 	add	objptr, #1
02450     07 91 C2 FA | 	rdbyte	local09, objptr
02454     01 90 06 F1 | 	add	local09, #1
02458     07 91 42 FC | 	wrbyte	local09, objptr
0245c                 | '     if cursor_y>lines-1
0245c     5F 0E 06 F1 | 	add	objptr, #95
02460     07 91 02 FB | 	rdlong	local09, objptr
02464     01 90 86 F1 | 	sub	local09, #1
02468     5F 0E 86 F1 | 	sub	objptr, #95
0246c     07 89 C2 FA | 	rdbyte	local05, objptr
02470     35 0E 86 F1 | 	sub	objptr, #53
02474     48 89 5A F2 | 	cmps	local05, local09 wcz
02478     1C 00 90 ED |  if_be	jmp	#LR__0038
0247c                 | '       scrollup()
0247c     10 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02480                 | '       cursor_y:=lines-1
02480     94 0E 06 F1 | 	add	objptr, #148
02484     07 91 02 FB | 	rdlong	local09, objptr
02488     01 90 86 F1 | 	sub	local09, #1
0248c     5F 0E 86 F1 | 	sub	objptr, #95
02490     07 91 42 FC | 	wrbyte	local09, objptr
02494     35 0E 86 F1 | 	sub	objptr, #53
02498                 | LR__0038
02498                 | LR__0039
02498                 | LR__0040
02498     AF F0 03 F6 | 	mov	ptra, fp
0249c     BF 00 A0 FD | 	call	#popregs_
024a0                 | _hng030rm_spin2_putchar_ret
024a0     2D 00 64 FD | 	ret
024a4                 | 
024a4                 | ' 
024a4                 | ' ''--------- Output a string at the cursor position, move the cursor
024a4                 | ' 
024a4                 | ' pub write(text) | iii,c,ncx,ncy
024a4                 | _hng030rm_spin2_write
024a4     17 5A 05 F6 | 	mov	COUNT_, #23
024a8     B0 00 A0 FD | 	call	#pushregs_
024ac     39 81 02 F6 | 	mov	local01, arg01
024b0                 | ' 
024b0                 | ' c:=write_color<<24+write_background<<16
024b0     38 0E 06 F1 | 	add	objptr, #56
024b4     07 83 02 FB | 	rdlong	local02, objptr
024b8     18 82 66 F0 | 	shl	local02, #24
024bc     04 0E 06 F1 | 	add	objptr, #4
024c0     07 85 02 FB | 	rdlong	local03, objptr
024c4     10 84 66 F0 | 	shl	local03, #16
024c8     42 83 02 F1 | 	add	local02, local03
024cc                 | ' 'debug(uhex_long(write_color))
024cc                 | ' ncy:=cursor_y
024cc     07 0E 86 F1 | 	sub	objptr, #7
024d0     07 87 C2 FA | 	rdbyte	local04, objptr
024d4                 | ' ncx:=cursor_x+strsize(text)
024d4     01 0E 86 F1 | 	sub	objptr, #1
024d8     07 89 C2 FA | 	rdbyte	local05, objptr
024dc     34 0E 86 F1 | 	sub	objptr, #52
024e0     40 73 02 F6 | 	mov	arg01, local01
024e4     00 8A 06 F6 | 	mov	local06, #0
024e8     24 DB 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
024ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
024f0                 | LR__0041
024f0     39 8D CA FA | 	rdbyte	local07, arg01 wz
024f4     01 8A 06 51 |  if_ne	add	local06, #1
024f8     01 72 06 51 |  if_ne	add	arg01, #1
024fc     F0 FF 9F 5D |  if_ne	jmp	#LR__0041
02500                 | LR__0042
02500     45 2D 02 F6 | 	mov	result1, local06
02504     45 89 02 F1 | 	add	local05, local06
02508     44 8F 02 F6 | 	mov	local08, local05
0250c     20 DB 9F FE | 	loc	pa,	#(@LR__0044-@LR__0043)
02510     93 00 A0 FD | 	call	#FCACHE_LOAD_
02514                 | ' repeat while ncx>cpl-1
02514                 | LR__0043
02514     90 0E 06 F1 | 	add	objptr, #144
02518     07 89 02 FB | 	rdlong	local05, objptr
0251c     90 0E 86 F1 | 	sub	objptr, #144
02520     01 88 86 F1 | 	sub	local05, #1
02524     44 8F 5A F2 | 	cmps	local08, local05 wcz
02528     18 00 90 ED |  if_be	jmp	#LR__0045
0252c                 | '   ncx-=cpl
0252c     90 0E 06 F1 | 	add	objptr, #144
02530     07 91 02 FB | 	rdlong	local09, objptr
02534     90 0E 86 F1 | 	sub	objptr, #144
02538     48 8F 82 F1 | 	sub	local08, local09
0253c                 | '   ncy+=1
0253c     01 86 06 F1 | 	add	local04, #1
02540     D0 FF 9F FD | 	jmp	#LR__0043
02544                 | LR__0044
02544                 | LR__0045
02544                 | ' repeat while ncy>lines-1
02544                 | LR__0046
02544     94 0E 06 F1 | 	add	objptr, #148
02548     07 89 02 FB | 	rdlong	local05, objptr
0254c     94 0E 86 F1 | 	sub	objptr, #148
02550     01 88 86 F1 | 	sub	local05, #1
02554     44 87 5A F2 | 	cmps	local04, local05 wcz
02558     20 00 90 ED |  if_be	jmp	#LR__0047
0255c                 | '   ncy-=1
0255c     01 86 86 F1 | 	sub	local04, #1
02560                 | '   scrollup()
02560     2C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02564                 | '   cursor_y-=1
02564     35 0E 06 F1 | 	add	objptr, #53
02568     07 89 C2 FA | 	rdbyte	local05, objptr
0256c     01 88 86 F1 | 	sub	local05, #1
02570     07 89 42 FC | 	wrbyte	local05, objptr
02574     35 0E 86 F1 | 	sub	objptr, #53
02578     C8 FF 9F FD | 	jmp	#LR__0046
0257c                 | LR__0047
0257c                 | ' 
0257c                 | ' repeat iii from 0 to strsize(text)-1
0257c     00 92 06 F6 | 	mov	local10, #0
02580     40 73 02 F6 | 	mov	arg01, local01
02584     00 8A 06 F6 | 	mov	local06, #0
02588     84 DA 9F FE | 	loc	pa,	#(@LR__0049-@LR__0048)
0258c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02590                 | LR__0048
02590     39 8D CA FA | 	rdbyte	local07, arg01 wz
02594     01 8A 06 51 |  if_ne	add	local06, #1
02598     01 72 06 51 |  if_ne	add	arg01, #1
0259c     F0 FF 9F 5D |  if_ne	jmp	#LR__0048
025a0                 | LR__0049
025a0     45 2D 02 F6 | 	mov	result1, local06
025a4     16 95 02 F6 | 	mov	local11, result1
025a8     01 94 86 F1 | 	sub	local11, #1
025ac     00 94 5E F2 | 	cmps	local11, #0 wcz
025b0     01 96 06 16 |  if_a	mov	local12, #1
025b4     01 96 66 E6 |  if_be	neg	local12, #1
025b8     4B 95 02 F1 | 	add	local11, local12
025bc     D0 DA 9F FE | 	loc	pa,	#(@LR__0051-@LR__0050)
025c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
025c4                 | LR__0050
025c4                 | ' 
025c4                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
025c4     07 99 02 FB | 	rdlong	local13, objptr
025c8     90 0E 06 F1 | 	add	objptr, #144
025cc     07 9B 02 FB | 	rdlong	local14, objptr
025d0     5B 0E 86 F1 | 	sub	objptr, #91
025d4     07 9D C2 FA | 	rdbyte	local15, objptr
025d8     4E 9B 02 FD | 	qmul	local14, local15
025dc     18 9E 62 FD | 	getqx	local16
025e0     01 0E 86 F1 | 	sub	objptr, #1
025e4     07 A1 C2 FA | 	rdbyte	local17, objptr
025e8     34 0E 86 F1 | 	sub	objptr, #52
025ec     50 9F 02 F1 | 	add	local16, local17
025f0     49 9F 02 F1 | 	add	local16, local10
025f4     02 9E 66 F0 | 	shl	local16, #2
025f8     4F 99 02 F1 | 	add	local13, local16
025fc     4C A3 02 FB | 	rdlong	local18, local13
02600     7F 00 00 FF 
02604     FF A3 06 F5 | 	and	local18, ##65535
02608     41 A3 42 F5 | 	or	local18, local02
0260c     07 A5 02 FB | 	rdlong	local19, objptr
02610     90 0E 06 F1 | 	add	objptr, #144
02614     07 A7 02 FB | 	rdlong	local20, objptr
02618     5B 0E 86 F1 | 	sub	objptr, #91
0261c     07 A9 C2 FA | 	rdbyte	local21, objptr
02620     54 A7 02 FD | 	qmul	local20, local21
02624     18 AA 62 FD | 	getqx	local22
02628     01 0E 86 F1 | 	sub	objptr, #1
0262c     07 AD C2 FA | 	rdbyte	local23, objptr
02630     34 0E 86 F1 | 	sub	objptr, #52
02634     56 AB 02 F1 | 	add	local22, local23
02638     49 AB 02 F1 | 	add	local22, local10
0263c     02 AA 66 F0 | 	shl	local22, #2
02640     55 A5 02 F1 | 	add	local19, local22
02644     52 A3 62 FC | 	wrlong	local18, local19
02648     4B 93 02 F1 | 	add	local10, local12
0264c     4A 93 0A F2 | 	cmp	local10, local11 wz
02650     70 FF 9F 5D |  if_ne	jmp	#LR__0050
02654                 | LR__0051
02654                 | ' 
02654                 | ' outtextxy(cursor_x,cursor_y,text)
02654     34 0E 06 F1 | 	add	objptr, #52
02658     07 73 C2 FA | 	rdbyte	arg01, objptr
0265c     01 0E 06 F1 | 	add	objptr, #1
02660     07 75 C2 FA | 	rdbyte	arg02, objptr
02664     35 0E 86 F1 | 	sub	objptr, #53
02668     40 77 02 F6 | 	mov	arg03, local01
0266c     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
02670                 | ' 
02670                 | ' cursor_x:=ncx
02670     34 0E 06 F1 | 	add	objptr, #52
02674     07 8F 42 FC | 	wrbyte	local08, objptr
02678                 | ' cursor_y:=ncy
02678     01 0E 06 F1 | 	add	objptr, #1
0267c     07 87 42 FC | 	wrbyte	local04, objptr
02680     35 0E 86 F1 | 	sub	objptr, #53
02684     AF F0 03 F6 | 	mov	ptra, fp
02688     BF 00 A0 FD | 	call	#popregs_
0268c                 | _hng030rm_spin2_write_ret
0268c     2D 00 64 FD | 	ret
02690                 | 
02690                 | ' 
02690                 | ' ''-----------  Scroll the screen one line up
02690                 | ' 
02690                 | ' pub scrollup() | i
02690                 | _hng030rm_spin2_scrollup
02690     0C 5A 05 F6 | 	mov	COUNT_, #12
02694     B0 00 A0 FD | 	call	#pushregs_
02698                 | ' 
02698                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02698     07 73 02 FB | 	rdlong	arg01, objptr
0269c     39 75 02 F6 | 	mov	arg02, arg01
026a0     90 0E 06 F1 | 	add	objptr, #144
026a4     07 81 02 FB | 	rdlong	local01, objptr
026a8     02 80 66 F0 | 	shl	local01, #2
026ac     40 75 02 F1 | 	add	arg02, local01
026b0     60 0E 86 F1 | 	sub	objptr, #96
026b4     07 77 02 FB | 	rdlong	arg03, objptr
026b8     60 0E 06 F1 | 	add	objptr, #96
026bc     07 83 02 FB | 	rdlong	local02, objptr
026c0     90 0E 86 F1 | 	sub	objptr, #144
026c4     41 77 82 F1 | 	sub	arg03, local02
026c8     F8 39 B0 FD | 	call	#__system__longmove
026cc                 | ' repeat i from buflen-cpl to buflen-1
026cc     30 0E 06 F1 | 	add	objptr, #48
026d0     07 85 02 FB | 	rdlong	local03, objptr
026d4     60 0E 06 F1 | 	add	objptr, #96
026d8     07 81 02 FB | 	rdlong	local01, objptr
026dc     40 85 82 F1 | 	sub	local03, local01
026e0     60 0E 86 F1 | 	sub	objptr, #96
026e4     07 87 02 FB | 	rdlong	local04, objptr
026e8     01 86 86 F1 | 	sub	local04, #1
026ec     07 89 02 FB | 	rdlong	local05, objptr
026f0     60 0E 06 F1 | 	add	objptr, #96
026f4     07 8B 02 FB | 	rdlong	local06, objptr
026f8     90 0E 86 F1 | 	sub	objptr, #144
026fc     45 89 82 F1 | 	sub	local05, local06
02700     44 87 5A F2 | 	cmps	local04, local05 wcz
02704     01 8C 06 16 |  if_a	mov	local07, #1
02708     01 8C 66 E6 |  if_be	neg	local07, #1
0270c     46 87 02 F1 | 	add	local04, local07
02710     2C D9 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
02714     93 00 A0 FD | 	call	#FCACHE_LOAD_
02718                 | LR__0052
02718                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02718     07 8F 02 FB | 	rdlong	local08, objptr
0271c     42 91 02 F6 | 	mov	local09, local03
02720     02 90 66 F0 | 	shl	local09, #2
02724     48 8F 02 F1 | 	add	local08, local09
02728     47 93 02 FB | 	rdlong	local10, local08
0272c     80 FF 7F FF 
02730     00 92 06 F5 | 	and	local10, ##-65536
02734     20 92 46 F5 | 	or	local10, #32
02738     07 95 02 FB | 	rdlong	local11, objptr
0273c     42 97 02 F6 | 	mov	local12, local03
02740     02 96 66 F0 | 	shl	local12, #2
02744     4B 95 02 F1 | 	add	local11, local12
02748     4A 93 62 FC | 	wrlong	local10, local11
0274c     46 85 02 F1 | 	add	local03, local07
02750     43 85 0A F2 | 	cmp	local03, local04 wz
02754     C0 FF 9F 5D |  if_ne	jmp	#LR__0052
02758                 | LR__0053
02758     AF F0 03 F6 | 	mov	ptra, fp
0275c     BF 00 A0 FD | 	call	#popregs_
02760                 | _hng030rm_spin2_scrollup_ret
02760     2D 00 64 FD | 	ret
02764                 | 
02764                 | ' 
02764                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
02764                 | ' 
02764                 | ' pub crlf()
02764                 | _hng030rm_spin2_crlf
02764     02 5A 05 F6 | 	mov	COUNT_, #2
02768     B0 00 A0 FD | 	call	#pushregs_
0276c                 | ' 
0276c                 | ' cursor_x:=0
0276c     34 0E 06 F1 | 	add	objptr, #52
02770     07 01 48 FC | 	wrbyte	#0, objptr
02774                 | ' cursor_y+=1
02774     01 0E 06 F1 | 	add	objptr, #1
02778     07 81 C2 FA | 	rdbyte	local01, objptr
0277c     01 80 06 F1 | 	add	local01, #1
02780     07 81 42 FC | 	wrbyte	local01, objptr
02784                 | ' if cursor_y>lines-1
02784     5F 0E 06 F1 | 	add	objptr, #95
02788     07 81 02 FB | 	rdlong	local01, objptr
0278c     01 80 86 F1 | 	sub	local01, #1
02790     5F 0E 86 F1 | 	sub	objptr, #95
02794     07 83 C2 FA | 	rdbyte	local02, objptr
02798     35 0E 86 F1 | 	sub	objptr, #53
0279c     40 83 5A F2 | 	cmps	local02, local01 wcz
027a0     1C 00 90 ED |  if_be	jmp	#LR__0054
027a4                 | '   scrollup()
027a4     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
027a8                 | '   cursor_y:=lines-1
027a8     94 0E 06 F1 | 	add	objptr, #148
027ac     07 81 02 FB | 	rdlong	local01, objptr
027b0     01 80 86 F1 | 	sub	local01, #1
027b4     5F 0E 86 F1 | 	sub	objptr, #95
027b8     07 81 42 FC | 	wrbyte	local01, objptr
027bc     35 0E 86 F1 | 	sub	objptr, #53
027c0                 | LR__0054
027c0     AF F0 03 F6 | 	mov	ptra, fp
027c4     BF 00 A0 FD | 	call	#popregs_
027c8                 | _hng030rm_spin2_crlf_ret
027c8     2D 00 64 FD | 	ret
027cc                 | 
027cc                 | ' 
027cc                 | ' 
027cc                 | ' 
027cc                 | ' pub inttostr2(i,d):result |q,pos,k,j
027cc                 | _hng030rm_spin2_inttostr2
027cc                 | ' 
027cc                 | ' j:=i
027cc                 | ' pos:=d-1
027cc     3A 33 02 F6 | 	mov	_var01, arg02
027d0     01 32 86 F1 | 	sub	_var01, #1
027d4                 | ' k:=0
027d4                 | ' 
027d4                 | ' n_string[d]:=0
027d4     3A 35 02 F6 | 	mov	_var02, arg02
027d8     44 0E 06 F1 | 	add	objptr, #68
027dc     07 37 02 F6 | 	mov	_var03, objptr
027e0     07 35 02 F1 | 	add	_var02, objptr
027e4     1A 01 48 FC | 	wrbyte	#0, _var02
027e8                 | ' repeat k from 0 to d-1
027e8     00 38 06 F6 | 	mov	_var04, #0
027ec     01 74 86 F1 | 	sub	arg02, #1
027f0     3A 3B 02 F6 | 	mov	_var05, arg02
027f4     00 3A 5E F2 | 	cmps	_var05, #0 wcz
027f8     44 0E 86 F1 | 	sub	objptr, #68
027fc     01 36 06 16 |  if_a	mov	_var03, #1
02800     01 36 66 E6 |  if_be	neg	_var03, #1
02804     1B 3B 02 F1 | 	add	_var05, _var03
02808     14 D8 9F FE | 	loc	pa,	#(@LR__0056-@LR__0055)
0280c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02810                 | LR__0055
02810                 | '   n_string[k]:=48
02810     1C 3D 02 F6 | 	mov	_var06, _var04
02814     44 0E 06 F1 | 	add	objptr, #68
02818     07 3D 02 F1 | 	add	_var06, objptr
0281c     1E 61 48 FC | 	wrbyte	#48, _var06
02820     1B 39 02 F1 | 	add	_var04, _var03
02824     1D 39 0A F2 | 	cmp	_var04, _var05 wz
02828     44 0E 86 F1 | 	sub	objptr, #68
0282c     E0 FF 9F 5D |  if_ne	jmp	#LR__0055
02830                 | LR__0056
02830                 | ' 
02830                 | ' if (j<>0)
02830     00 72 0E F2 | 	cmp	arg01, #0 wz
02834     40 00 90 AD |  if_e	jmp	#LR__0059
02838                 | ' 
02838                 | '   repeat while (pos>-1)
02838                 | LR__0057
02838     FF FF 7F FF 
0283c     FF 33 5E F2 | 	cmps	_var01, ##-1 wcz
02840     34 00 90 ED |  if_be	jmp	#LR__0058
02844                 | '     q:=j+//10
02844     39 AF 02 F6 | 	mov	muldiva_, arg01
02848     0A B0 06 F6 | 	mov	muldivb_, #10
0284c     CC 00 A0 FD | 	call	#unsdivide_
02850                 | '     q:=48+q
02850     30 3E 06 F6 | 	mov	_var07, #48
02854     57 3F 02 F1 | 	add	_var07, muldiva_
02858                 | '     n_string[pos]:=q
02858     19 75 02 F6 | 	mov	arg02, _var01
0285c     44 0E 06 F1 | 	add	objptr, #68
02860     07 75 02 F1 | 	add	arg02, objptr
02864     3A 3F 42 FC | 	wrbyte	_var07, arg02
02868                 | '     j:=j+/10
02868     58 73 02 F6 | 	mov	arg01, muldivb_
0286c                 | '     pos-=1
0286c     01 32 86 F1 | 	sub	_var01, #1
02870     44 0E 86 F1 | 	sub	objptr, #68
02874     C0 FF 9F FD | 	jmp	#LR__0057
02878                 | LR__0058
02878                 | LR__0059
02878                 | ' 
02878                 | ' 
02878                 | ' q:=@n_string
02878     44 0E 06 F1 | 	add	objptr, #68
0287c     07 2D 02 F6 | 	mov	result1, objptr
02880     44 0E 86 F1 | 	sub	objptr, #68
02884                 | ' return q
02884                 | _hng030rm_spin2_inttostr2_ret
02884     2D 00 64 FD | 	ret
02888                 | 
02888                 | ' 
02888                 | ' 
02888                 | ' 
02888                 | ' '*************************************************************************
02888                 | ' '                                                                        *
02888                 | ' '  Mode setting and driver start                                                          *
02888                 | ' '                                                                        *
02888                 | ' '*************************************************************************
02888                 | ' 
02888                 | ' ''---------  Set the graphics mode
02888                 | ' 
02888                 | ' 
02888                 | ' 
02888                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02888                 | _hng030rm_spin2_setmode
02888     0A 5A 05 F6 | 	mov	COUNT_, #10
0288c     B0 00 A0 FD | 	call	#pushregs_
02890     39 81 02 F6 | 	mov	local01, arg01
02894                 | ' 
02894                 | ' '' mode:tn_bb_cc_vv_hh
02894                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02894                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02894                 | ' 
02894                 | ' if mode==(512+192+48)
02894     01 00 00 FF 
02898     F0 80 0E F2 | 	cmp	local01, ##752 wz
0289c                 | '   return 'no RAM
0289c     C8 05 90 AD |  if_e	jmp	#LR__0082
028a0                 | ' 
028a0                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
028a0     40 83 02 F6 | 	mov	local02, local01
028a4     06 82 46 F0 | 	shr	local02, #6
028a8     07 82 06 F5 | 	and	local02, #7
028ac     08 82 26 F3 | 	fle	local02, #8
028b0     41 85 02 F6 | 	mov	local03, local02
028b4     30 84 62 FD | 	jmprel	local03
028b8                 | LR__0060
028b8     20 00 90 FD | 	jmp	#LR__0061
028bc     48 00 90 FD | 	jmp	#LR__0062
028c0     70 00 90 FD | 	jmp	#LR__0063
028c4     98 00 90 FD | 	jmp	#LR__0064
028c8     C0 00 90 FD | 	jmp	#LR__0065
028cc     E8 00 90 FD | 	jmp	#LR__0066
028d0     10 01 90 FD | 	jmp	#LR__0067
028d4     38 01 90 FD | 	jmp	#LR__0068
028d8     70 01 90 FD | 	jmp	#LR__0069
028dc                 | LR__0061
028dc                 | ' 
028dc                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
028dc     50 0E 06 F1 | 	add	objptr, #80
028e0     07 73 02 F6 | 	mov	arg01, objptr
028e4     50 0E 86 F1 | 	sub	objptr, #80
028e8     0E 00 00 FF 
028ec     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
028f0     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
028f4     0E 00 00 FF 
028f8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
028fc     10 76 06 F6 | 	mov	arg03, #16
02900     C0 37 B0 FD | 	call	#__system__longmove
02904     44 01 90 FD | 	jmp	#LR__0069
02908                 | LR__0062
02908                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02908     50 0E 06 F1 | 	add	objptr, #80
0290c     07 73 02 F6 | 	mov	arg01, objptr
02910     50 0E 86 F1 | 	sub	objptr, #80
02914     0E 00 00 FF 
02918     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
0291c     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02920     0E 00 00 FF 
02924     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02928     10 76 06 F6 | 	mov	arg03, #16
0292c     94 37 B0 FD | 	call	#__system__longmove
02930     18 01 90 FD | 	jmp	#LR__0069
02934                 | LR__0063
02934                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02934     50 0E 06 F1 | 	add	objptr, #80
02938     07 73 02 F6 | 	mov	arg01, objptr
0293c     50 0E 86 F1 | 	sub	objptr, #80
02940     0E 00 00 FF 
02944     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02948     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0294c     0E 00 00 FF 
02950     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02954     10 76 06 F6 | 	mov	arg03, #16
02958     68 37 B0 FD | 	call	#__system__longmove
0295c     EC 00 90 FD | 	jmp	#LR__0069
02960                 | LR__0064
02960                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02960     50 0E 06 F1 | 	add	objptr, #80
02964     07 73 02 F6 | 	mov	arg01, objptr
02968     50 0E 86 F1 | 	sub	objptr, #80
0296c     0E 00 00 FF 
02970     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02974     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02978     0E 00 00 FF 
0297c     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02980     10 76 06 F6 | 	mov	arg03, #16
02984     3C 37 B0 FD | 	call	#__system__longmove
02988     C0 00 90 FD | 	jmp	#LR__0069
0298c                 | LR__0065
0298c                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
0298c     50 0E 06 F1 | 	add	objptr, #80
02990     07 73 02 F6 | 	mov	arg01, objptr
02994     50 0E 86 F1 | 	sub	objptr, #80
02998     0E 00 00 FF 
0299c     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
029a0     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029a4     0E 00 00 FF 
029a8     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
029ac     10 76 06 F6 | 	mov	arg03, #16
029b0     10 37 B0 FD | 	call	#__system__longmove
029b4     94 00 90 FD | 	jmp	#LR__0069
029b8                 | LR__0066
029b8                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
029b8     50 0E 06 F1 | 	add	objptr, #80
029bc     07 73 02 F6 | 	mov	arg01, objptr
029c0     50 0E 86 F1 | 	sub	objptr, #80
029c4     0E 00 00 FF 
029c8     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
029cc     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029d0     0E 00 00 FF 
029d4     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
029d8     10 76 06 F6 | 	mov	arg03, #16
029dc     E4 36 B0 FD | 	call	#__system__longmove
029e0     68 00 90 FD | 	jmp	#LR__0069
029e4                 | LR__0067
029e4                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
029e4     50 0E 06 F1 | 	add	objptr, #80
029e8     07 73 02 F6 | 	mov	arg01, objptr
029ec     50 0E 86 F1 | 	sub	objptr, #80
029f0     0E 00 00 FF 
029f4     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
029f8     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029fc     0E 00 00 FF 
02a00     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02a04     10 76 06 F6 | 	mov	arg03, #16
02a08     B8 36 B0 FD | 	call	#__system__longmove
02a0c     3C 00 90 FD | 	jmp	#LR__0069
02a10                 | LR__0068
02a10                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02a10     50 0E 06 F1 | 	add	objptr, #80
02a14     07 87 02 F6 | 	mov	local04, objptr
02a18     43 89 02 F6 | 	mov	local05, local04
02a1c     0F 00 00 FF 
02a20     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02a24     0D 8B 02 F6 | 	mov	local06, ptr__hng030rm_spin2_dat__
02a28     45 8D 02 F6 | 	mov	local07, local06
02a2c     10 8E 06 F6 | 	mov	local08, #16
02a30     44 73 02 F6 | 	mov	arg01, local05
02a34     46 75 02 F6 | 	mov	arg02, local07
02a38     10 76 06 F6 | 	mov	arg03, #16
02a3c     50 0E 86 F1 | 	sub	objptr, #80
02a40     0F 00 00 FF 
02a44     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02a48     78 36 B0 FD | 	call	#__system__longmove
02a4c                 | LR__0069
02a4c                 | ' 
02a4c                 | ' ' 4-bit graphics: do nothing with timings :)
02a4c                 | ' if mode<512
02a4c     01 00 00 FF 
02a50     00 80 5E F2 | 	cmps	local01, ##512 wcz
02a54     1C 00 90 3D |  if_ae	jmp	#LR__0070
02a58                 | '   palette_ptr:=@ataripalette
02a58     0C 00 00 FF 
02a5c     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02a60     18 0E 06 F1 | 	add	objptr, #24
02a64     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02a68     18 0E 86 F1 | 	sub	objptr, #24
02a6c     0C 00 00 FF 
02a70     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02a74                 | LR__0070
02a74                 | ' 
02a74                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02a74     40 83 02 F6 | 	mov	local02, local01
02a78     01 00 00 FF 
02a7c     30 82 06 F5 | 	and	local02, ##560
02a80     01 00 00 FF 
02a84     30 82 0E F2 | 	cmp	local02, ##560 wz
02a88     44 00 90 5D |  if_ne	jmp	#LR__0071
02a8c                 | '   timings[5]:=4
02a8c     64 0E 06 F1 | 	add	objptr, #100
02a90     07 09 68 FC | 	wrlong	#4, objptr
02a94                 | '   timings[11]:=timings[11]<<1
02a94     18 0E 06 F1 | 	add	objptr, #24
02a98     07 83 02 FB | 	rdlong	local02, objptr
02a9c     01 82 66 F0 | 	shl	local02, #1
02aa0     07 83 62 FC | 	wrlong	local02, objptr
02aa4                 | '   putpixel:=p8
02aa4     6C 0E 06 F1 | 	add	objptr, #108
02aa8     07 83 02 FB | 	rdlong	local02, objptr
02aac     10 0E 86 F1 | 	sub	objptr, #16
02ab0     07 83 62 FC | 	wrlong	local02, objptr
02ab4                 | '   palette_ptr:=@ataripalette
02ab4     0C 00 00 FF 
02ab8     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02abc     C0 0E 86 F1 | 	sub	objptr, #192
02ac0     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02ac4     18 0E 86 F1 | 	sub	objptr, #24
02ac8     0C 00 00 FF 
02acc     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02ad0                 | LR__0071
02ad0                 | ' 
02ad0                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02ad0     40 83 02 F6 | 	mov	local02, local01
02ad4     01 00 00 FF 
02ad8     30 82 06 F5 | 	and	local02, ##560
02adc     01 00 00 FF 
02ae0     10 82 0E F2 | 	cmp	local02, ##528 wz
02ae4     44 00 90 5D |  if_ne	jmp	#LR__0072
02ae8                 | '   timings[5]:=16
02ae8     64 0E 06 F1 | 	add	objptr, #100
02aec     07 21 68 FC | 	wrlong	#16, objptr
02af0                 | '   timings[11]:=timings[11]>>1
02af0     18 0E 06 F1 | 	add	objptr, #24
02af4     07 83 02 FB | 	rdlong	local02, objptr
02af8     01 82 46 F0 | 	shr	local02, #1
02afc     07 83 62 FC | 	wrlong	local02, objptr
02b00                 | '   putpixel:=p2
02b00     64 0E 06 F1 | 	add	objptr, #100
02b04     07 83 02 FB | 	rdlong	local02, objptr
02b08     08 0E 86 F1 | 	sub	objptr, #8
02b0c     07 83 62 FC | 	wrlong	local02, objptr
02b10                 | '   palette_ptr:=@fourcolors
02b10     0C 00 00 FF 
02b14     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02b18     C0 0E 86 F1 | 	sub	objptr, #192
02b1c     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02b20     18 0E 86 F1 | 	sub	objptr, #24
02b24     0C 00 00 FF 
02b28     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02b2c                 | LR__0072
02b2c                 | ' 
02b2c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02b2c     40 83 02 F6 | 	mov	local02, local01
02b30     01 00 00 FF 
02b34     30 82 06 F5 | 	and	local02, ##560
02b38     01 00 00 FF 
02b3c     00 82 0E F2 | 	cmp	local02, ##512 wz
02b40     44 00 90 5D |  if_ne	jmp	#LR__0073
02b44                 | '   timings[5]:=32
02b44     64 0E 06 F1 | 	add	objptr, #100
02b48     07 41 68 FC | 	wrlong	#32, objptr
02b4c                 | '   timings[11]:=timings[11]>>2
02b4c     18 0E 06 F1 | 	add	objptr, #24
02b50     07 83 02 FB | 	rdlong	local02, objptr
02b54     02 82 46 F0 | 	shr	local02, #2
02b58     07 83 62 FC | 	wrlong	local02, objptr
02b5c                 | '   putpixel:=p1
02b5c     60 0E 06 F1 | 	add	objptr, #96
02b60     07 83 02 FB | 	rdlong	local02, objptr
02b64     04 0E 86 F1 | 	sub	objptr, #4
02b68     07 83 62 FC | 	wrlong	local02, objptr
02b6c                 | '   palette_ptr:=@twocolors
02b6c     0C 00 00 FF 
02b70     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02b74     C0 0E 86 F1 | 	sub	objptr, #192
02b78     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02b7c     18 0E 86 F1 | 	sub	objptr, #24
02b80     0C 00 00 FF 
02b84     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02b88                 | LR__0073
02b88                 | ' 
02b88                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02b88     40 83 02 F6 | 	mov	local02, local01
02b8c     01 00 00 FF 
02b90     30 82 06 F5 | 	and	local02, ##560
02b94     01 00 00 FF 
02b98     20 82 0E F2 | 	cmp	local02, ##544 wz
02b9c     2C 00 90 5D |  if_ne	jmp	#LR__0074
02ba0                 | '   putpixel:=p4
02ba0     E4 0E 06 F1 | 	add	objptr, #228
02ba4     07 83 02 FB | 	rdlong	local02, objptr
02ba8     0C 0E 86 F1 | 	sub	objptr, #12
02bac     07 83 62 FC | 	wrlong	local02, objptr
02bb0                 | '   palette_ptr:=@vga16
02bb0     0C 00 00 FF 
02bb4     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02bb8     C0 0E 86 F1 | 	sub	objptr, #192
02bbc     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02bc0     18 0E 86 F1 | 	sub	objptr, #24
02bc4     0C 00 00 FF 
02bc8     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02bcc                 | LR__0074
02bcc                 | ' 
02bcc                 | ' repeat i from 0 to 4
02bcc     00 90 06 F6 | 	mov	local09, #0
02bd0     88 D4 9F FE | 	loc	pa,	#(@LR__0076-@LR__0075)
02bd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02bd8                 | LR__0075
02bd8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02bd8     48 87 02 F6 | 	mov	local04, local09
02bdc     02 86 66 F0 | 	shl	local04, #2
02be0     50 0E 06 F1 | 	add	objptr, #80
02be4     07 89 02 F6 | 	mov	local05, objptr
02be8     07 87 02 F1 | 	add	local04, objptr
02bec     2C 0E 86 F1 | 	sub	objptr, #44
02bf0     07 8D 02 FB | 	rdlong	local07, objptr
02bf4     46 8B 02 F6 | 	mov	local06, local07
02bf8     11 8A 66 F0 | 	shl	local06, #17
02bfc     43 83 02 FB | 	rdlong	local02, local04
02c00     45 83 02 F1 | 	add	local02, local06
02c04     80 40 38 FF 
02c08     00 82 06 F1 | 	add	local02, ##1887502336
02c0c     48 8F 02 F6 | 	mov	local08, local09
02c10     02 8E 66 F0 | 	shl	local08, #2
02c14     2C 0E 06 F1 | 	add	objptr, #44
02c18     07 93 02 F6 | 	mov	local10, objptr
02c1c     07 8F 02 F1 | 	add	local08, objptr
02c20     47 83 62 FC | 	wrlong	local02, local08
02c24     01 90 06 F1 | 	add	local09, #1
02c28     05 90 5E F2 | 	cmps	local09, #5 wcz
02c2c     50 0E 86 F1 | 	sub	objptr, #80
02c30     A4 FF 9F CD |  if_b	jmp	#LR__0075
02c34                 | LR__0076
02c34                 | ' timings[5]:=timings[5]+hdmibase<<17
02c34     24 0E 06 F1 | 	add	objptr, #36
02c38     07 87 02 FB | 	rdlong	local04, objptr
02c3c     11 86 66 F0 | 	shl	local04, #17
02c40     40 0E 06 F1 | 	add	objptr, #64
02c44     07 8B 02 FB | 	rdlong	local06, objptr
02c48     45 83 02 F6 | 	mov	local02, local06
02c4c     43 83 02 F1 | 	add	local02, local04
02c50     07 83 62 FC | 	wrlong	local02, objptr
02c54                 | ' clkfreq:=timings[13]
02c54     20 0E 06 F1 | 	add	objptr, #32
02c58     07 83 02 FB | 	rdlong	local02, objptr
02c5c     14 82 66 FC | 	wrlong	local02, #20
02c60                 | ' hubset(timings[14])
02c60     04 0E 06 F1 | 	add	objptr, #4
02c64     07 73 02 FB | 	rdlong	arg01, objptr
02c68     88 0E 86 F1 | 	sub	objptr, #136
02c6c     00 72 62 FD | 	hubset	arg01
02c70                 | ' waitms(1)
02c70     01 72 06 F6 | 	mov	arg01, #1
02c74     F4 36 B0 FD | 	call	#__system___waitms
02c78                 | ' 
02c78                 | ' 
02c78                 | ' xzoom:=1<<(mode & 3)
02c78     40 87 02 F6 | 	mov	local04, local01
02c7c     03 86 06 F5 | 	and	local04, #3
02c80     43 83 C2 F9 | 	decod	local02, local04
02c84     CC 0E 06 F1 | 	add	objptr, #204
02c88     07 83 62 FC | 	wrlong	local02, objptr
02c8c                 | ' 
02c8c                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02c8c     41 87 02 F6 | 	mov	local04, local02
02c90     CC 0E 86 F1 | 	sub	objptr, #204
02c94     08 86 0E F2 | 	cmp	local04, #8 wz
02c98     24 00 90 5D |  if_ne	jmp	#LR__0077
02c9c     40 89 02 F6 | 	mov	local05, local01
02ca0     04 88 46 F0 | 	shr	local05, #4
02ca4     03 88 06 F5 | 	and	local05, #3
02ca8     03 88 0E F2 | 	cmp	local05, #3 wz
02cac     10 00 90 AD |  if_e	jmp	#LR__0077
02cb0                 | '   xzoom:=4
02cb0     04 82 06 F6 | 	mov	local02, #4
02cb4     CC 0E 06 F1 | 	add	objptr, #204
02cb8     07 09 68 FC | 	wrlong	#4, objptr
02cbc     CC 0E 86 F1 | 	sub	objptr, #204
02cc0                 | LR__0077
02cc0                 | ' 
02cc0                 | ' yzoom:=1<<((mode>>2) & 3)
02cc0     40 87 02 F6 | 	mov	local04, local01
02cc4     02 86 46 F0 | 	shr	local04, #2
02cc8     03 86 06 F5 | 	and	local04, #3
02ccc     43 83 C2 F9 | 	decod	local02, local04
02cd0     D0 0E 06 F1 | 	add	objptr, #208
02cd4     07 83 62 FC | 	wrlong	local02, objptr
02cd8                 | ' azoom:=xzoom*yzoom
02cd8     04 0E 86 F1 | 	sub	objptr, #4
02cdc     07 87 02 FB | 	rdlong	local04, objptr
02ce0     04 0E 06 F1 | 	add	objptr, #4
02ce4     07 8B 02 FB | 	rdlong	local06, objptr
02ce8     45 87 02 FD | 	qmul	local04, local06
02cec     18 82 62 FD | 	getqx	local02
02cf0     04 0E 06 F1 | 	add	objptr, #4
02cf4     07 83 62 FC | 	wrlong	local02, objptr
02cf8                 | ' 
02cf8                 | ' cpl:=timings[11]
02cf8     58 0E 86 F1 | 	sub	objptr, #88
02cfc     07 83 02 FB | 	rdlong	local02, objptr
02d00     14 0E 06 F1 | 	add	objptr, #20
02d04     07 83 62 FC | 	wrlong	local02, objptr
02d08     90 0E 86 F1 | 	sub	objptr, #144
02d0c                 | ' if (mode<512)
02d0c     01 00 00 FF 
02d10     00 80 5E F2 | 	cmps	local01, ##512 wcz
02d14     60 00 90 3D |  if_ae	jmp	#LR__0078
02d18                 | '   lines:=(timings[12]>>4)+/yzoom
02d18     80 0E 06 F1 | 	add	objptr, #128
02d1c     07 AF 02 FB | 	rdlong	muldiva_, objptr
02d20     04 AE 46 F0 | 	shr	muldiva_, #4
02d24     50 0E 06 F1 | 	add	objptr, #80
02d28     07 B1 02 FB | 	rdlong	muldivb_, objptr
02d2c     D0 0E 86 F1 | 	sub	objptr, #208
02d30     CC 00 A0 FD | 	call	#unsdivide_
02d34     94 0E 06 F1 | 	add	objptr, #148
02d38     07 B1 62 FC | 	wrlong	muldivb_, objptr
02d3c                 | '   if ((timings[12]>>4)+//yzoom) <>0
02d3c     14 0E 86 F1 | 	sub	objptr, #20
02d40     07 AF 02 FB | 	rdlong	muldiva_, objptr
02d44     04 AE 46 F0 | 	shr	muldiva_, #4
02d48     50 0E 06 F1 | 	add	objptr, #80
02d4c     07 B1 02 FB | 	rdlong	muldivb_, objptr
02d50     D0 0E 86 F1 | 	sub	objptr, #208
02d54     CC 00 A0 FD | 	call	#unsdivide_
02d58     00 AE 0E F2 | 	cmp	muldiva_, #0 wz
02d5c     AC 00 90 AD |  if_e	jmp	#LR__0081
02d60                 | '     lines +=1
02d60     94 0E 06 F1 | 	add	objptr, #148
02d64     07 83 02 FB | 	rdlong	local02, objptr
02d68     01 82 06 F1 | 	add	local02, #1
02d6c     07 83 62 FC | 	wrlong	local02, objptr
02d70     94 0E 86 F1 | 	sub	objptr, #148
02d74                 | ' 
02d74                 | ' else
02d74     94 00 90 FD | 	jmp	#LR__0081
02d78                 | LR__0078
02d78                 | '   lines:=timings[12]/yzoom
02d78     80 0E 06 F1 | 	add	objptr, #128
02d7c     07 AF 02 FB | 	rdlong	muldiva_, objptr
02d80     50 0E 06 F1 | 	add	objptr, #80
02d84     07 B1 02 FB | 	rdlong	muldivb_, objptr
02d88     D0 0E 86 F1 | 	sub	objptr, #208
02d8c     D0 00 A0 FD | 	call	#divide_
02d90     94 0E 06 F1 | 	add	objptr, #148
02d94     07 B1 62 FC | 	wrlong	muldivb_, objptr
02d98                 | '   if cpl//xzoom==0
02d98     04 0E 86 F1 | 	sub	objptr, #4
02d9c     07 AF 02 FB | 	rdlong	muldiva_, objptr
02da0     3C 0E 06 F1 | 	add	objptr, #60
02da4     07 B1 02 FB | 	rdlong	muldivb_, objptr
02da8     CC 0E 86 F1 | 	sub	objptr, #204
02dac     D0 00 A0 FD | 	call	#divide_
02db0     00 AE 0E F2 | 	cmp	muldiva_, #0 wz
02db4     28 00 90 5D |  if_ne	jmp	#LR__0079
02db8                 | '     cpl:=cpl/xzoom
02db8     90 0E 06 F1 | 	add	objptr, #144
02dbc     07 AF 02 FB | 	rdlong	muldiva_, objptr
02dc0     3C 0E 06 F1 | 	add	objptr, #60
02dc4     07 B1 02 FB | 	rdlong	muldivb_, objptr
02dc8     CC 0E 86 F1 | 	sub	objptr, #204
02dcc     D0 00 A0 FD | 	call	#divide_
02dd0     90 0E 06 F1 | 	add	objptr, #144
02dd4     07 B1 62 FC | 	wrlong	muldivb_, objptr
02dd8     90 0E 86 F1 | 	sub	objptr, #144
02ddc                 | '   else
02ddc     2C 00 90 FD | 	jmp	#LR__0080
02de0                 | LR__0079
02de0                 | '     cpl:=cpl/xzoom+1
02de0     90 0E 06 F1 | 	add	objptr, #144
02de4     07 AF 02 FB | 	rdlong	muldiva_, objptr
02de8     3C 0E 06 F1 | 	add	objptr, #60
02dec     07 B1 02 FB | 	rdlong	muldivb_, objptr
02df0     CC 0E 86 F1 | 	sub	objptr, #204
02df4     D0 00 A0 FD | 	call	#divide_
02df8     58 83 02 F6 | 	mov	local02, muldivb_
02dfc     01 82 06 F1 | 	add	local02, #1
02e00     90 0E 06 F1 | 	add	objptr, #144
02e04     07 83 62 FC | 	wrlong	local02, objptr
02e08     90 0E 86 F1 | 	sub	objptr, #144
02e0c                 | LR__0080
02e0c                 | LR__0081
02e0c                 | ' 
02e0c                 | ' buflen:=(cpl*lines)
02e0c     90 0E 06 F1 | 	add	objptr, #144
02e10     07 87 02 FB | 	rdlong	local04, objptr
02e14     04 0E 06 F1 | 	add	objptr, #4
02e18     07 8B 02 FB | 	rdlong	local06, objptr
02e1c     45 87 02 FD | 	qmul	local04, local06
02e20     18 82 62 FD | 	getqx	local02
02e24     64 0E 86 F1 | 	sub	objptr, #100
02e28     07 83 62 FC | 	wrlong	local02, objptr
02e2c                 | ' buf_ptr:=$80000-4*buflen
02e2c     41 87 02 F6 | 	mov	local04, local02
02e30     30 0E 86 F1 | 	sub	objptr, #48
02e34     02 86 66 F0 | 	shl	local04, #2
02e38     13 82 C6 F9 | 	decod	local02, #19
02e3c     43 83 82 F1 | 	sub	local02, local04
02e40     07 83 62 FC | 	wrlong	local02, objptr
02e44                 | ' mode_ptr:=@timings
02e44     50 0E 06 F1 | 	add	objptr, #80
02e48     07 83 02 F6 | 	mov	local02, objptr
02e4c     3C 0E 86 F1 | 	sub	objptr, #60
02e50     07 83 62 FC | 	wrlong	local02, objptr
02e54                 | ' graphmode:=mode
02e54     B0 0E 06 F1 | 	add	objptr, #176
02e58     07 81 62 FC | 	wrlong	local01, objptr
02e5c     C4 0E 86 F1 | 	sub	objptr, #196
02e60                 | ' makedl(mode)
02e60     40 73 02 F6 | 	mov	arg01, local01
02e64     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
02e68                 | LR__0082
02e68     AF F0 03 F6 | 	mov	ptra, fp
02e6c     BF 00 A0 FD | 	call	#popregs_
02e70                 | _hng030rm_spin2_setmode_ret
02e70     2D 00 64 FD | 	ret
02e74                 | 
02e74                 | ' 
02e74                 | ' 
02e74                 | ' 
02e74                 | ' 
02e74                 | ' '---------- Make a display list
02e74                 | ' 
02e74                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
02e74                 | _hng030rm_spin2_makedl
02e74                 | ' 
02e74                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02e74                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02e74                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02e74                 | ' 
02e74                 | ' '   0 - display a up/down border line
02e74                 | ' 
02e74                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02e74                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02e74                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02e74                 | ' '    nnnn - font line to display, 0..15
02e74                 | ' '    llllll - character line, determines the cursor Y position
02e74                 | ' 
02e74                 | ' 
02e74                 | ' if (mode &256==0)
02e74     00 73 CE F7 | 	test	arg01, #256 wz
02e78     1C 00 90 5D |  if_ne	jmp	#LR__0083
02e7c                 | '   dl_ptr:=buf_ptr-4*576
02e7c     07 33 02 FB | 	rdlong	_var01, objptr
02e80     04 00 00 FF 
02e84     00 33 86 F1 | 	sub	_var01, ##2304
02e88     1C 0E 06 F1 | 	add	objptr, #28
02e8c     07 33 62 FC | 	wrlong	_var01, objptr
02e90     1C 0E 86 F1 | 	sub	objptr, #28
02e94                 | ' else
02e94     18 00 90 FD | 	jmp	#LR__0084
02e98                 | LR__0083
02e98                 | '   dl_ptr:=buf_ptr-4*496
02e98     07 33 02 FB | 	rdlong	_var01, objptr
02e9c     03 00 00 FF 
02ea0     C0 33 86 F1 | 	sub	_var01, ##1984
02ea4     1C 0E 06 F1 | 	add	objptr, #28
02ea8     07 33 62 FC | 	wrlong	_var01, objptr
02eac     1C 0E 86 F1 | 	sub	objptr, #28
02eb0                 | LR__0084
02eb0                 | '  ' dl_ptr:=buf_ptr-4*540
02eb0                 | ' 
02eb0                 | ' vzoom:=((mode>>2) & 3)
02eb0     39 35 02 F6 | 	mov	_var02, arg01
02eb4     02 34 46 F0 | 	shr	_var02, #2
02eb8     03 34 06 F5 | 	and	_var02, #3
02ebc                 | ' 
02ebc                 | ' 
02ebc                 | ' if mode<512 '' text modes
02ebc     01 00 00 FF 
02ec0     00 72 5E F2 | 	cmps	arg01, ##512 wcz
02ec4     E8 01 90 3D |  if_ae	jmp	#LR__0092
02ec8                 | ' 
02ec8                 | '   if timings[6]>0 'borders
02ec8     68 0E 06 F1 | 	add	objptr, #104
02ecc     07 33 02 FB | 	rdlong	_var01, objptr
02ed0     68 0E 86 F1 | 	sub	objptr, #104
02ed4     00 32 5E F2 | 	cmps	_var01, #0 wcz
02ed8     D4 00 90 ED |  if_be	jmp	#LR__0089
02edc                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02edc     00 36 06 F6 | 	mov	_var03, #0
02ee0     68 0E 06 F1 | 	add	objptr, #104
02ee4     07 39 02 FB | 	rdlong	_var04, objptr
02ee8     68 0E 86 F1 | 	sub	objptr, #104
02eec     01 38 86 F1 | 	sub	_var04, #1
02ef0     00 38 5E F2 | 	cmps	_var04, #0 wcz
02ef4     01 3A 06 16 |  if_a	mov	_var05, #1
02ef8     01 3A 66 E6 |  if_be	neg	_var05, #1
02efc     1D 3D 02 F6 | 	mov	_var06, _var05
02f00     1D 39 02 F1 | 	add	_var04, _var05
02f04     20 D1 9F FE | 	loc	pa,	#(@LR__0086-@LR__0085)
02f08     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f0c                 | LR__0085
02f0c                 | '       long[dl_ptr+4*i]:=$0
02f0c     1C 0E 06 F1 | 	add	objptr, #28
02f10     07 3F 02 FB | 	rdlong	_var07, objptr
02f14     1C 0E 86 F1 | 	sub	objptr, #28
02f18     1B 41 02 F6 | 	mov	_var08, _var03
02f1c     02 40 66 F0 | 	shl	_var08, #2
02f20     20 3F 02 F1 | 	add	_var07, _var08
02f24     1F 01 68 FC | 	wrlong	#0, _var07
02f28     1E 37 02 F1 | 	add	_var03, _var06
02f2c     1C 37 0A F2 | 	cmp	_var03, _var04 wz
02f30     D8 FF 9F 5D |  if_ne	jmp	#LR__0085
02f34                 | LR__0086
02f34                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02f34     68 0E 06 F1 | 	add	objptr, #104
02f38     07 37 02 FB | 	rdlong	_var03, objptr
02f3c     18 0E 06 F1 | 	add	objptr, #24
02f40     07 3B 02 FB | 	rdlong	_var05, objptr
02f44     1D 37 02 F1 | 	add	_var03, _var05
02f48     0C 0E 06 F1 | 	add	objptr, #12
02f4c     07 43 02 FB | 	rdlong	_var09, objptr
02f50     01 42 86 F1 | 	sub	_var09, #1
02f54     24 0E 86 F1 | 	sub	objptr, #36
02f58     07 45 02 FB | 	rdlong	_var10, objptr
02f5c     18 0E 06 F1 | 	add	objptr, #24
02f60     07 47 02 FB | 	rdlong	_var11, objptr
02f64     80 0E 86 F1 | 	sub	objptr, #128
02f68     23 45 02 F1 | 	add	_var10, _var11
02f6c     22 43 5A F2 | 	cmps	_var09, _var10 wcz
02f70     01 40 06 16 |  if_a	mov	_var08, #1
02f74     01 40 66 E6 |  if_be	neg	_var08, #1
02f78     20 49 02 F6 | 	mov	_var12, _var08
02f7c     20 43 02 F1 | 	add	_var09, _var08
02f80     A4 D0 9F FE | 	loc	pa,	#(@LR__0088-@LR__0087)
02f84     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f88                 | LR__0087
02f88                 | '       long[dl_ptr+4*i]:=$0
02f88     1C 0E 06 F1 | 	add	objptr, #28
02f8c     07 4B 02 FB | 	rdlong	_var13, objptr
02f90     1C 0E 86 F1 | 	sub	objptr, #28
02f94     1B 4D 02 F6 | 	mov	_var14, _var03
02f98     02 4C 66 F0 | 	shl	_var14, #2
02f9c     26 4B 02 F1 | 	add	_var13, _var14
02fa0     25 01 68 FC | 	wrlong	#0, _var13
02fa4     24 37 02 F1 | 	add	_var03, _var12
02fa8     21 37 0A F2 | 	cmp	_var03, _var09 wz
02fac     D8 FF 9F 5D |  if_ne	jmp	#LR__0087
02fb0                 | LR__0088
02fb0                 | LR__0089
02fb0                 | '   lpc:=16<<vzoom
02fb0     10 4E 06 F6 | 	mov	_var15, #16
02fb4     1A 4F 62 F0 | 	shl	_var15, _var02
02fb8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02fb8     68 0E 06 F1 | 	add	objptr, #104
02fbc     07 37 02 FB | 	rdlong	_var03, objptr
02fc0     1B 51 02 F6 | 	mov	_var16, _var03
02fc4     18 0E 06 F1 | 	add	objptr, #24
02fc8     07 53 02 FB | 	rdlong	_var17, objptr
02fcc     29 51 02 F1 | 	add	_var16, _var17
02fd0     01 50 86 F1 | 	sub	_var16, #1
02fd4     18 0E 86 F1 | 	sub	objptr, #24
02fd8     07 41 02 FB | 	rdlong	_var08, objptr
02fdc     68 0E 86 F1 | 	sub	objptr, #104
02fe0     20 51 5A F2 | 	cmps	_var16, _var08 wcz
02fe4     01 54 06 16 |  if_a	mov	_var18, #1
02fe8     01 54 66 E6 |  if_be	neg	_var18, #1
02fec     2A 57 02 F6 | 	mov	_var19, _var18
02ff0     2A 51 02 F1 | 	add	_var16, _var18
02ff4     BC D0 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
02ff8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ffc                 | LR__0090
02ffc                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02ffc     1B AF 02 F6 | 	mov	muldiva_, _var03
03000     68 0E 06 F1 | 	add	objptr, #104
03004     07 59 02 FB | 	rdlong	_var20, objptr
03008     68 0E 86 F1 | 	sub	objptr, #104
0300c     2C AF 82 F1 | 	sub	muldiva_, _var20
03010     27 B1 02 F6 | 	mov	muldivb_, _var15
03014     CC 00 A0 FD | 	call	#unsdivide_
03018     1A AF 42 F0 | 	shr	muldiva_, _var02
0301c     57 5B 02 F6 | 	mov	_var21, muldiva_
03020                 | '     charline:=(i-timings[6])+/lpc
03020     1B AF 02 F6 | 	mov	muldiva_, _var03
03024     68 0E 06 F1 | 	add	objptr, #104
03028     07 5D 02 FB | 	rdlong	_var22, objptr
0302c     68 0E 86 F1 | 	sub	objptr, #104
03030     2E AF 82 F1 | 	sub	muldiva_, _var22
03034     27 B1 02 F6 | 	mov	muldivb_, _var15
03038     CC 00 A0 FD | 	call	#unsdivide_
0303c     58 5F 02 F6 | 	mov	_var23, muldivb_
03040                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03040     07 47 02 FB | 	rdlong	_var11, objptr
03044     90 0E 06 F1 | 	add	objptr, #144
03048     07 59 02 FB | 	rdlong	_var20, objptr
0304c     2F 59 02 FD | 	qmul	_var20, _var23
03050     18 60 62 FD | 	getqx	_var24
03054     02 60 66 F0 | 	shl	_var24, #2
03058     30 47 02 F1 | 	add	_var11, _var24
0305c     39 4D 02 F6 | 	mov	_var14, arg01
03060     03 4C 06 F5 | 	and	_var14, #3
03064     26 47 02 F1 | 	add	_var11, _var14
03068                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03068     0C 46 66 F0 | 	shl	_var11, #12
0306c     2D 5D 02 F6 | 	mov	_var22, _var21
03070     08 5C 66 F0 | 	shl	_var22, #8
03074     2E 47 02 F1 | 	add	_var11, _var22
03078     2F 59 02 F6 | 	mov	_var20, _var23
0307c     02 58 66 F0 | 	shl	_var20, #2
03080     2C 47 02 F1 | 	add	_var11, _var20
03084     01 46 06 F1 | 	add	_var11, #1
03088     74 0E 86 F1 | 	sub	objptr, #116
0308c     07 4B 02 FB | 	rdlong	_var13, objptr
03090     1C 0E 86 F1 | 	sub	objptr, #28
03094     1B 4D 02 F6 | 	mov	_var14, _var03
03098     02 4C 66 F0 | 	shl	_var14, #2
0309c     26 4B 02 F1 | 	add	_var13, _var14
030a0     25 47 62 FC | 	wrlong	_var11, _var13
030a4     2B 37 02 F1 | 	add	_var03, _var19
030a8     28 37 0A F2 | 	cmp	_var03, _var16 wz
030ac     4C FF 9F 5D |  if_ne	jmp	#LR__0090
030b0                 | LR__0091
030b0                 | LR__0092
030b0                 | ' 
030b0                 | ' 
030b0                 | ' 
030b0                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
030b0     01 00 00 FF 
030b4     00 72 5E F2 | 	cmps	arg01, ##512 wcz
030b8     A8 01 90 CD |  if_b	jmp	#LR__0100
030bc                 | ' 
030bc                 | '   if timings[6]>0 'borders
030bc     68 0E 06 F1 | 	add	objptr, #104
030c0     07 33 02 FB | 	rdlong	_var01, objptr
030c4     68 0E 86 F1 | 	sub	objptr, #104
030c8     00 32 5E F2 | 	cmps	_var01, #0 wcz
030cc     D4 00 90 ED |  if_be	jmp	#LR__0097
030d0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
030d0     00 36 06 F6 | 	mov	_var03, #0
030d4     68 0E 06 F1 | 	add	objptr, #104
030d8     07 63 02 FB | 	rdlong	_var25, objptr
030dc     68 0E 86 F1 | 	sub	objptr, #104
030e0     01 62 86 F1 | 	sub	_var25, #1
030e4     00 62 5E F2 | 	cmps	_var25, #0 wcz
030e8     01 3A 06 16 |  if_a	mov	_var05, #1
030ec     01 3A 66 E6 |  if_be	neg	_var05, #1
030f0     1D 65 02 F6 | 	mov	_var26, _var05
030f4     1D 63 02 F1 | 	add	_var25, _var05
030f8     2C CF 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
030fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03100                 | LR__0093
03100                 | '       long[dl_ptr+4*i]:=$0
03100     1C 0E 06 F1 | 	add	objptr, #28
03104     07 3F 02 FB | 	rdlong	_var07, objptr
03108     1C 0E 86 F1 | 	sub	objptr, #28
0310c     1B 41 02 F6 | 	mov	_var08, _var03
03110     02 40 66 F0 | 	shl	_var08, #2
03114     20 3F 02 F1 | 	add	_var07, _var08
03118     1F 01 68 FC | 	wrlong	#0, _var07
0311c     32 37 02 F1 | 	add	_var03, _var26
03120     31 37 0A F2 | 	cmp	_var03, _var25 wz
03124     D8 FF 9F 5D |  if_ne	jmp	#LR__0093
03128                 | LR__0094
03128                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03128     68 0E 06 F1 | 	add	objptr, #104
0312c     07 37 02 FB | 	rdlong	_var03, objptr
03130     18 0E 06 F1 | 	add	objptr, #24
03134     07 3B 02 FB | 	rdlong	_var05, objptr
03138     1D 37 02 F1 | 	add	_var03, _var05
0313c     0C 0E 06 F1 | 	add	objptr, #12
03140     07 67 02 FB | 	rdlong	_var27, objptr
03144     01 66 86 F1 | 	sub	_var27, #1
03148     24 0E 86 F1 | 	sub	objptr, #36
0314c     07 45 02 FB | 	rdlong	_var10, objptr
03150     18 0E 06 F1 | 	add	objptr, #24
03154     07 47 02 FB | 	rdlong	_var11, objptr
03158     80 0E 86 F1 | 	sub	objptr, #128
0315c     23 45 02 F1 | 	add	_var10, _var11
03160     22 67 5A F2 | 	cmps	_var27, _var10 wcz
03164     01 40 06 16 |  if_a	mov	_var08, #1
03168     01 40 66 E6 |  if_be	neg	_var08, #1
0316c     20 69 02 F6 | 	mov	_var28, _var08
03170     20 67 02 F1 | 	add	_var27, _var08
03174     B0 CE 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
03178     93 00 A0 FD | 	call	#FCACHE_LOAD_
0317c                 | LR__0095
0317c                 | '       long[dl_ptr+4*i]:=$0
0317c     1C 0E 06 F1 | 	add	objptr, #28
03180     07 4B 02 FB | 	rdlong	_var13, objptr
03184     1C 0E 86 F1 | 	sub	objptr, #28
03188     1B 4D 02 F6 | 	mov	_var14, _var03
0318c     02 4C 66 F0 | 	shl	_var14, #2
03190     26 4B 02 F1 | 	add	_var13, _var14
03194     25 01 68 FC | 	wrlong	#0, _var13
03198     34 37 02 F1 | 	add	_var03, _var28
0319c     33 37 0A F2 | 	cmp	_var03, _var27 wz
031a0     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
031a4                 | LR__0096
031a4                 | LR__0097
031a4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
031a4     68 0E 06 F1 | 	add	objptr, #104
031a8     07 37 02 FB | 	rdlong	_var03, objptr
031ac     1B 6B 02 F6 | 	mov	_var29, _var03
031b0     18 0E 06 F1 | 	add	objptr, #24
031b4     07 53 02 FB | 	rdlong	_var17, objptr
031b8     29 6B 02 F1 | 	add	_var29, _var17
031bc     01 6A 86 F1 | 	sub	_var29, #1
031c0     18 0E 86 F1 | 	sub	objptr, #24
031c4     07 41 02 FB | 	rdlong	_var08, objptr
031c8     68 0E 86 F1 | 	sub	objptr, #104
031cc     20 6B 5A F2 | 	cmps	_var29, _var08 wcz
031d0     01 54 06 16 |  if_a	mov	_var18, #1
031d4     01 54 66 E6 |  if_be	neg	_var18, #1
031d8     2A 6D 02 F6 | 	mov	_var30, _var18
031dc     2A 6B 02 F1 | 	add	_var29, _var18
031e0     98 CE 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
031e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
031e8                 | LR__0098
031e8                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
031e8     07 47 02 FB | 	rdlong	_var11, objptr
031ec     1B 5D 02 F6 | 	mov	_var22, _var03
031f0     68 0E 06 F1 | 	add	objptr, #104
031f4     07 59 02 FB | 	rdlong	_var20, objptr
031f8     2C 5D 82 F1 | 	sub	_var22, _var20
031fc     1A 5D 42 F0 | 	shr	_var22, _var02
03200     28 0E 06 F1 | 	add	objptr, #40
03204     07 4D 02 FB | 	rdlong	_var14, objptr
03208     2E 4D 02 FD | 	qmul	_var14, _var22
0320c     18 6E 62 FD | 	getqx	_var31
03210     02 6E 66 F0 | 	shl	_var31, #2
03214     37 47 02 F1 | 	add	_var11, _var31
03218     39 71 02 F6 | 	mov	_var32, arg01
0321c     03 70 06 F5 | 	and	_var32, #3
03220     38 47 02 F1 | 	add	_var11, _var32
03224                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03224     0C 46 66 F0 | 	shl	_var11, #12
03228     02 46 06 F1 | 	add	_var11, #2
0322c     39 5D 02 F6 | 	mov	_var22, arg01
03230     30 5C 06 F5 | 	and	_var22, #48
03234     02 5C 46 F0 | 	shr	_var22, #2
03238     2E 47 02 F1 | 	add	_var11, _var22
0323c     74 0E 86 F1 | 	sub	objptr, #116
03240     07 59 02 FB | 	rdlong	_var20, objptr
03244     1C 0E 86 F1 | 	sub	objptr, #28
03248     1B 61 02 F6 | 	mov	_var24, _var03
0324c     02 60 66 F0 | 	shl	_var24, #2
03250     30 59 02 F1 | 	add	_var20, _var24
03254     2C 47 62 FC | 	wrlong	_var11, _var20
03258     36 37 02 F1 | 	add	_var03, _var30
0325c     35 37 0A F2 | 	cmp	_var03, _var29 wz
03260     84 FF 9F 5D |  if_ne	jmp	#LR__0098
03264                 | LR__0099
03264                 | LR__0100
03264                 | _hng030rm_spin2_makedl_ret
03264     2D 00 64 FD | 	ret
03268                 | 
03268                 | '       
03268                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03268                 | ' 
03268                 | ' pub start(mode,base):result
03268                 | _hng030rm_spin2_start
03268     04 5A 05 F6 | 	mov	COUNT_, #4
0326c     B0 00 A0 FD | 	call	#pushregs_
03270     39 81 02 F6 | 	mov	local01, arg01
03274                 | ' 
03274                 | ' ' initialize pointers and variables
03274                 | ' 
03274                 | ' border_ptr:=@bordercolor
03274     2C 0E 06 F1 | 	add	objptr, #44
03278     07 83 02 F6 | 	mov	local02, objptr
0327c     24 0E 86 F1 | 	sub	objptr, #36
03280     07 83 62 FC | 	wrlong	local02, objptr
03284                 | ' font_ptr:=@st_font
03284     08 00 00 FF 
03288     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
0328c     04 0E 86 F1 | 	sub	objptr, #4
03290     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03294                 | ' hdmibase:=base
03294     20 0E 06 F1 | 	add	objptr, #32
03298     07 75 62 FC | 	wrlong	arg02, objptr
0329c     24 0E 86 F1 | 	sub	objptr, #36
032a0                 | ' p1:=@putpixel1
032a0     07 73 02 F6 | 	mov	arg01, objptr
032a4     0F 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
032a8     08 00 00 FF 
032ac     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
032b0     B0 2E B0 FD | 	call	#__system___make_methodptr
032b4     16 85 02 F6 | 	mov	local03, result1
032b8     DC 0E 06 F1 | 	add	objptr, #220
032bc     07 85 62 FC | 	wrlong	local03, objptr
032c0     DC 0E 86 F1 | 	sub	objptr, #220
032c4                 | ' p2:=@putpixel2
032c4     07 73 02 F6 | 	mov	arg01, objptr
032c8     10 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
032cc     94 2E B0 FD | 	call	#__system___make_methodptr
032d0     16 85 02 F6 | 	mov	local03, result1
032d4     E0 0E 06 F1 | 	add	objptr, #224
032d8     07 85 62 FC | 	wrlong	local03, objptr
032dc     E0 0E 86 F1 | 	sub	objptr, #224
032e0                 | ' p4:=@putpixel4
032e0     07 73 02 F6 | 	mov	arg01, objptr
032e4     11 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
032e8     78 2E B0 FD | 	call	#__system___make_methodptr
032ec     16 85 02 F6 | 	mov	local03, result1
032f0     E4 0E 06 F1 | 	add	objptr, #228
032f4     07 85 62 FC | 	wrlong	local03, objptr
032f8     E4 0E 86 F1 | 	sub	objptr, #228
032fc                 | ' p8:=@putpixel8
032fc     07 73 02 F6 | 	mov	arg01, objptr
03300     12 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
03304     5C 2E B0 FD | 	call	#__system___make_methodptr
03308     16 85 02 F6 | 	mov	local03, result1
0330c     E8 0E 06 F1 | 	add	objptr, #232
03310     07 85 62 FC | 	wrlong	local03, objptr
03314     E8 0E 86 F1 | 	sub	objptr, #232
03318                 | ' 
03318                 | ' 
03318                 | ' ' the mode has to be set here to enable computing the buffer length
03318                 | ' 
03318                 | ' setmode(mode)
03318     40 73 02 F6 | 	mov	arg01, local01
0331c     68 F5 BF FD | 	call	#_hng030rm_spin2_setmode
03320                 | ' 
03320                 | ' vblank_ptr:=@vblank
03320     40 0E 06 F1 | 	add	objptr, #64
03324     07 83 02 F6 | 	mov	local02, objptr
03328     34 0E 86 F1 | 	sub	objptr, #52
0332c     07 83 62 FC | 	wrlong	local02, objptr
03330                 | ' cursor_ptr:=@cursor_x
03330     28 0E 06 F1 | 	add	objptr, #40
03334     07 83 02 F6 | 	mov	local02, objptr
03338     24 0E 86 F1 | 	sub	objptr, #36
0333c     07 83 62 FC | 	wrlong	local02, objptr
03340                 | ' 
03340                 | ' fontnum_ptr:=@fontnum
03340     88 0E 06 F1 | 	add	objptr, #136
03344     07 83 02 F6 | 	mov	local02, objptr
03348     78 0E 86 F1 | 	sub	objptr, #120
0334c     07 83 62 FC | 	wrlong	local02, objptr
03350                 | ' 
03350                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
03350     78 0E 06 F1 | 	add	objptr, #120
03354     07 01 68 FC | 	wrlong	#0, objptr
03358                 | ' bytemove(@colors,@vgacolors,16)
03358     1C 0E 06 F1 | 	add	objptr, #28
0335c     07 73 02 F6 | 	mov	arg01, objptr
03360     B4 0E 86 F1 | 	sub	objptr, #180
03364     0F 00 00 FF 
03368     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
0336c     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03370     0F 00 00 FF 
03374     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03378     10 76 06 F6 | 	mov	arg03, #16
0337c     B4 2C B0 FD | 	call	#__system____builtin_memmove
03380                 | ' 
03380                 | ' ' initialize a cursor
03380                 | ' 
03380                 | ' cursor_x:=0
03380     34 0E 06 F1 | 	add	objptr, #52
03384     07 01 48 FC | 	wrbyte	#0, objptr
03388                 | ' cursor_y:=0
03388     01 0E 06 F1 | 	add	objptr, #1
0338c     07 01 48 FC | 	wrbyte	#0, objptr
03390                 | ' cursor_sh:=14
03390     01 0E 06 F1 | 	add	objptr, #1
03394     07 1D 48 FC | 	wrbyte	#14, objptr
03398     36 0E 86 F1 | 	sub	objptr, #54
0339c                 | ' 
0339c                 | ' 
0339c                 | ' ' start the cog
0339c                 | ' 
0339c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
0339c     0F 00 00 FF 
033a0     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
033a4     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
033a8     0F 00 00 FF 
033ac     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
033b0     07 77 02 F6 | 	mov	arg03, objptr
033b4     10 72 06 F6 | 	mov	arg01, #16
033b8     28 76 62 FD | 	setq	arg03
033bc     3A 73 F2 FC | 	coginit	arg01, arg02 wc
033c0     01 72 66 C6 |  if_b	neg	arg01, #1
033c4     39 2D 02 F6 | 	mov	result1, arg01
033c8     16 87 02 F6 | 	mov	local04, result1
033cc     28 0E 06 F1 | 	add	objptr, #40
033d0     07 87 62 FC | 	wrlong	local04, objptr
033d4     28 0E 86 F1 | 	sub	objptr, #40
033d8                 | ' waitms(20)
033d8     14 72 06 F6 | 	mov	arg01, #20
033dc     8C 2F B0 FD | 	call	#__system___waitms
033e0                 | ' 
033e0                 | ' ' clear the screen and set the colors to green on black
033e0                 | ' 
033e0                 | ' cls(c_green,c_black)
033e0     C7 72 06 F6 | 	mov	arg01, #199
033e4     00 74 06 F6 | 	mov	arg02, #0
033e8     18 ED BF FD | 	call	#_hng030rm_spin2_cls
033ec                 | ' setbordercolor(0,0,128)
033ec     00 72 06 F6 | 	mov	arg01, #0
033f0     00 74 06 F6 | 	mov	arg02, #0
033f4     80 76 06 F6 | 	mov	arg03, #128
033f8     E4 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
033fc                 | ' setwritecolors(c_green,c_black)
033fc                 | ' 
033fc                 | ' 
033fc                 | ' write_color:=ff
033fc     38 0E 06 F1 | 	add	objptr, #56
03400     07 8F 69 FC | 	wrlong	#199, objptr
03404                 | ' write_background:=bb
03404     04 0E 06 F1 | 	add	objptr, #4
03408     07 01 68 FC | 	wrlong	#0, objptr
0340c                 | ' 
0340c                 | ' return cog
0340c     14 0E 86 F1 | 	sub	objptr, #20
03410     07 2D 02 FB | 	rdlong	result1, objptr
03414     28 0E 86 F1 | 	sub	objptr, #40
03418     AF F0 03 F6 | 	mov	ptra, fp
0341c     BF 00 A0 FD | 	call	#popregs_
03420                 | _hng030rm_spin2_start_ret
03420     2D 00 64 FD | 	ret
03424                 | 
03424                 | ' 'this is the object and not a program
03424                 | ' 
03424                 | ' pub start() :cog
03424                 | _retrocog_spin2_start
03424     02 5A 05 F6 | 	mov	COUNT_, #2
03428     B0 00 A0 FD | 	call	#pushregs_
0342c                 | ' 
0342c                 | ' cog:=cogspin(16,serialcog(),@serialstack)
0342c     07 81 02 F6 | 	mov	local01, objptr
03430     01 00 00 FF 
03434     40 0F 06 F1 | 	add	objptr, ##832
03438     07 83 02 F6 | 	mov	local02, objptr
0343c     41 81 62 FC | 	wrlong	local01, local02
03440     04 82 06 F1 | 	add	local02, #4
03444     41 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
03448     07 77 02 F6 | 	mov	arg03, objptr
0344c     01 00 00 FF 
03450     40 0F 86 F1 | 	sub	objptr, ##832
03454     10 72 06 F6 | 	mov	arg01, #16
03458     28 76 62 FD | 	setq	arg03
0345c     04 73 F2 FC | 	coginit	arg01, entryptr__ wc
03460     01 72 66 C6 |  if_b	neg	arg01, #1
03464     39 2D 02 F6 | 	mov	result1, arg01
03468                 | ' return cog
03468     AF F0 03 F6 | 	mov	ptra, fp
0346c     BF 00 A0 FD | 	call	#popregs_
03470                 | _retrocog_spin2_start_ret
03470     2D 00 64 FD | 	ret
03474                 | 
03474                 | ' 
03474                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03474                 | _retrocog_spin2_serialcog
03474     0C 5A 05 F6 | 	mov	COUNT_, #12
03478     B0 00 A0 FD | 	call	#pushregs_
0347c                 | ' 
0347c                 | ' 'start serial and midi
0347c                 | ' 
0347c                 | ' serial_start(rxpin, txpin, baudrate)
0347c     20 72 06 F6 | 	mov	arg01, #32
03480     21 74 06 F6 | 	mov	arg02, #33
03484     A6 0E 00 FF 
03488     00 76 06 F6 | 	mov	arg03, ##1920000
0348c     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03490                 | ' serial_start(midiin,midiout,mbaudrate)
03490     1D 72 06 F6 | 	mov	arg01, #29
03494     1E 74 06 F6 | 	mov	arg02, #30
03498     3D 00 00 FF 
0349c     12 76 06 F6 | 	mov	arg03, ##31250
034a0     98 05 B0 FD | 	call	#_retrocog_spin2_serial_start
034a4                 | ' serial_start(srxpin,stxpin,sbaudrate)
034a4     42 0F 00 FF 
034a8     80 80 06 F6 | 	mov	local01, ##2000000
034ac     3F 72 06 F6 | 	mov	arg01, #63
034b0     3E 74 06 F6 | 	mov	arg02, #62
034b4     42 0F 00 FF 
034b8     80 76 06 F6 | 	mov	arg03, ##2000000
034bc     7C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
034c0                 | ' 
034c0                 | ' mb:=(-1)
034c0     01 82 66 F6 | 	neg	local02, #1
034c4                 | ' b:=(-1)
034c4     01 84 66 F6 | 	neg	local03, #1
034c8                 | ' 
034c8                 | ' mousefront:=0
034c8     00 86 06 F6 | 	mov	local04, #0
034cc     08 0E 06 F1 | 	add	objptr, #8
034d0     07 01 68 FC | 	wrlong	#0, objptr
034d4                 | ' mousetail:=0
034d4     04 0E 06 F1 | 	add	objptr, #4
034d8     07 01 68 FC | 	wrlong	#0, objptr
034dc     0C 0E 86 F1 | 	sub	objptr, #12
034e0                 | ' kbdfront:=0
034e0     07 01 68 FC | 	wrlong	#0, objptr
034e4                 | ' kbdtail:=0
034e4     04 0E 06 F1 | 	add	objptr, #4
034e8     07 01 68 FC | 	wrlong	#0, objptr
034ec                 | ' midifront:=0
034ec     0C 0E 06 F1 | 	add	objptr, #12
034f0     07 01 68 FC | 	wrlong	#0, objptr
034f4                 | ' miditail:=0
034f4     04 0E 06 F1 | 	add	objptr, #4
034f8     07 01 68 FC | 	wrlong	#0, objptr
034fc                 | ' serialfront:=0
034fc     04 0E 06 F1 | 	add	objptr, #4
03500     07 01 68 FC | 	wrlong	#0, objptr
03504                 | ' serialtail:=0
03504     04 0E 06 F1 | 	add	objptr, #4
03508     07 01 68 FC | 	wrlong	#0, objptr
0350c                 | ' long[$30]:=0
0350c     30 00 6C FC | 	wrlong	#0, #48
03510                 | ' long[$34]:=0
03510     34 00 6C FC | 	wrlong	#0, #52
03514                 | ' long[$38]:=0
03514     38 00 6C FC | 	wrlong	#0, #56
03518     1C 0E 86 F1 | 	sub	objptr, #28
0351c                 | ' long[$3C]:=0
0351c     3C 00 6C FC | 	wrlong	#0, #60
03520                 | ' 
03520                 | ' repeat
03520                 | LR__0101
03520                 | ' 
03520                 | ' '  repeat 
03520                 | '   rr:=rxcheck(rxpin)
03520     20 72 06 F6 | 	mov	arg01, #32
03524     90 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03528     16 89 02 F6 | 	mov	local05, result1
0352c                 | '   mrr:=rxcheck(midiin)
0352c     1D 72 06 F6 | 	mov	arg01, #29
03530     84 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03534     16 8B 02 F6 | 	mov	local06, result1
03538                 | '   srr:=rxcheck(srxpin)
03538     3F 86 06 F6 | 	mov	local04, #63
0353c     3F 72 06 F6 | 	mov	arg01, #63
03540     74 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03544     16 8D 02 F6 | 	mov	local07, result1
03548     46 8F 02 F6 | 	mov	local08, local07
0354c                 | ' 
0354c                 | ' '  until rr>=0 || mrr>=0  || srr>=0
0354c                 | ' 
0354c                 | '   
0354c                 | ' ' midi. Must be >= $80 for a command
0354c                 | ' '$80-$8F - 3 bytes note off. note, velocity
0354c                 | ' '$90-$9F - 3 bytes note on, note, velocity
0354c                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
0354c                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
0354c                 | ' '$C0-$CF - 2 bytes program change
0354c                 | ' '$D0-$DF - 2 bytes mono aftertouch
0354c                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
0354c                 | ' '$F0-$FF - 1 byte
0354c                 | '   
0354c                 | '   if srr>=0
0354c     00 8E 5E F2 | 	cmps	local08, #0 wcz
03550     78 00 90 CD |  if_b	jmp	#LR__0103
03554                 | '   
03554                 | '     if serialfront<>((serialtail-1) //32)
03554     1C 0E 06 F1 | 	add	objptr, #28
03558     07 8D 02 FB | 	rdlong	local07, objptr
0355c     46 87 02 F6 | 	mov	local04, local07
03560     01 86 86 F1 | 	sub	local04, #1
03564     43 81 52 F6 | 	abs	local01, local04 wc
03568     1F 80 06 F5 | 	and	local01, #31
0356c     40 81 62 C6 |  if_b	neg	local01, local01
03570     04 0E 86 F1 | 	sub	objptr, #4
03574     07 91 02 FB | 	rdlong	local09, objptr
03578     18 0E 86 F1 | 	sub	objptr, #24
0357c     48 93 02 F6 | 	mov	local10, local09
03580     40 93 0A F2 | 	cmp	local10, local01 wz
03584     44 00 90 AD |  if_e	jmp	#LR__0102
03588                 | '       serialbuf[serialfront]:=srr
03588     18 0E 06 F1 | 	add	objptr, #24
0358c     07 87 02 FB | 	rdlong	local04, objptr
03590     01 00 00 FF 
03594     08 0F 06 F1 | 	add	objptr, ##776
03598     07 87 02 F1 | 	add	local04, objptr
0359c     43 8F 42 FC | 	wrbyte	local08, local04
035a0                 | '       serialfront+=1
035a0     01 00 00 FF 
035a4     08 0F 86 F1 | 	sub	objptr, ##776
035a8     07 81 02 FB | 	rdlong	local01, objptr
035ac     01 80 06 F1 | 	add	local01, #1
035b0     07 81 62 FC | 	wrlong	local01, objptr
035b4                 | '       serialfront:=serialfront // 32
035b4     40 8D 02 F6 | 	mov	local07, local01
035b8     46 87 52 F6 | 	abs	local04, local07 wc
035bc     1F 86 06 F5 | 	and	local04, #31
035c0     43 87 62 C6 |  if_b	neg	local04, local04
035c4     07 87 62 FC | 	wrlong	local04, objptr
035c8     18 0E 86 F1 | 	sub	objptr, #24
035cc                 | LR__0102
035cc                 | LR__0103
035cc                 | '     
035cc                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
035cc     80 8A 5E F2 | 	cmps	local06, #128 wcz
035d0     08 00 90 CD |  if_b	jmp	#LR__0104
035d4     BF 8A 5E F2 | 	cmps	local06, #191 wcz
035d8     10 00 90 ED |  if_be	jmp	#LR__0105
035dc                 | LR__0104
035dc     E0 8A 5E F2 | 	cmps	local06, #224 wcz
035e0     18 00 90 CD |  if_b	jmp	#LR__0106
035e4     EF 8A 5E F2 | 	cmps	local06, #239 wcz
035e8     10 00 90 1D |  if_a	jmp	#LR__0106
035ec                 | LR__0105
035ec                 | '     mb:=2
035ec     02 82 06 F6 | 	mov	local02, #2
035f0                 | '     midireport:=mrr<<24
035f0     45 87 02 F6 | 	mov	local04, local06
035f4     18 86 66 F0 | 	shl	local04, #24
035f8     43 95 02 F6 | 	mov	local11, local04
035fc                 | LR__0106
035fc                 | ' 
035fc                 | '   if (mrr>=$C0) && (mrr<=$DF)
035fc     C0 8A 5E F2 | 	cmps	local06, #192 wcz
03600     18 00 90 CD |  if_b	jmp	#LR__0107
03604     DF 8A 5E F2 | 	cmps	local06, #223 wcz
03608     10 00 90 1D |  if_a	jmp	#LR__0107
0360c                 | '     mb:=1
0360c     01 82 06 F6 | 	mov	local02, #1
03610                 | '     midireport:=mrr<<24
03610     45 87 02 F6 | 	mov	local04, local06
03614     18 86 66 F0 | 	shl	local04, #24
03618     43 95 02 F6 | 	mov	local11, local04
0361c                 | LR__0107
0361c                 | '   
0361c                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
0361c     F0 8A 5E F2 | 	cmps	local06, #240 wcz
03620                 | '     mb:=4
03620     04 82 06 36 |  if_ae	mov	local02, #4
03624                 | '     midireport:=mrr<<24  
03624     45 95 02 36 |  if_ae	mov	local11, local06
03628     18 94 66 30 |  if_ae	shl	local11, #24
0362c                 | '   
0362c                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
0362c     80 8A 5E F2 | 	cmps	local06, #128 wcz
03630     44 00 90 3D |  if_ae	jmp	#LR__0109
03634     00 82 5E F2 | 	cmps	local02, #0 wcz
03638     3C 00 90 ED |  if_be	jmp	#LR__0109
0363c     00 8A 5E F2 | 	cmps	local06, #0 wcz
03640     34 00 90 CD |  if_b	jmp	#LR__0109
03644                 | '     
03644                 | '     mb--
03644     41 87 02 F6 | 	mov	local04, local02
03648     41 8D 02 F6 | 	mov	local07, local02
0364c     01 8C 86 F1 | 	sub	local07, #1
03650     46 83 02 F6 | 	mov	local02, local07
03654                 | '     if mb<3
03654     03 82 5E F2 | 	cmps	local02, #3 wcz
03658     1C 00 90 3D |  if_ae	jmp	#LR__0108
0365c                 | '       midireport+=mrr<<(mb<<3)
0365c     4A 87 02 F6 | 	mov	local04, local11
03660     45 8D 02 F6 | 	mov	local07, local06
03664     41 81 02 F6 | 	mov	local01, local02
03668     03 80 66 F0 | 	shl	local01, #3
0366c     40 8D 62 F0 | 	shl	local07, local01
03670     46 87 02 F1 | 	add	local04, local07
03674     43 95 02 F6 | 	mov	local11, local04
03678                 | LR__0108
03678                 | LR__0109
03678                 | '   
03678                 | '   if mb==0
03678     00 82 0E F2 | 	cmp	local02, #0 wz
0367c     80 00 90 5D |  if_ne	jmp	#LR__0111
03680                 | '     
03680                 | '     if midifront<>((miditail-1) //32)
03680     14 0E 06 F1 | 	add	objptr, #20
03684     07 8D 02 FB | 	rdlong	local07, objptr
03688     46 87 02 F6 | 	mov	local04, local07
0368c     01 86 86 F1 | 	sub	local04, #1
03690     43 81 52 F6 | 	abs	local01, local04 wc
03694     1F 80 06 F5 | 	and	local01, #31
03698     40 81 62 C6 |  if_b	neg	local01, local01
0369c     04 0E 86 F1 | 	sub	objptr, #4
036a0     07 91 02 FB | 	rdlong	local09, objptr
036a4     10 0E 86 F1 | 	sub	objptr, #16
036a8     48 93 02 F6 | 	mov	local10, local09
036ac     40 93 0A F2 | 	cmp	local10, local01 wz
036b0     48 00 90 AD |  if_e	jmp	#LR__0110
036b4                 | '       midibuf[midifront]:=midireport
036b4     10 0E 06 F1 | 	add	objptr, #16
036b8     07 87 02 FB | 	rdlong	local04, objptr
036bc     02 86 66 F0 | 	shl	local04, #2
036c0     01 00 00 FF 
036c4     90 0E 06 F1 | 	add	objptr, ##656
036c8     07 87 02 F1 | 	add	local04, objptr
036cc     43 95 62 FC | 	wrlong	local11, local04
036d0                 | '       midifront+=1
036d0     01 00 00 FF 
036d4     90 0E 86 F1 | 	sub	objptr, ##656
036d8     07 81 02 FB | 	rdlong	local01, objptr
036dc     01 80 06 F1 | 	add	local01, #1
036e0     07 81 62 FC | 	wrlong	local01, objptr
036e4                 | '       midifront:=midifront // 32
036e4     40 8D 02 F6 | 	mov	local07, local01
036e8     46 87 52 F6 | 	abs	local04, local07 wc
036ec     1F 86 06 F5 | 	and	local04, #31
036f0     43 87 62 C6 |  if_b	neg	local04, local04
036f4     07 87 62 FC | 	wrlong	local04, objptr
036f8     10 0E 86 F1 | 	sub	objptr, #16
036fc                 | LR__0110
036fc                 | '     mb:=(-1)
036fc     01 82 66 F6 | 	neg	local02, #1
03700                 | LR__0111
03700                 | ' 
03700                 | ' 'Keyboard and mouse
03700                 | ' 
03700                 | '   if (rr>=$80) && (rr<>$FF)
03700     80 88 5E F2 | 	cmps	local05, #128 wcz
03704     18 00 90 CD |  if_b	jmp	#LR__0112
03708     FF 88 0E F2 | 	cmp	local05, #255 wz
0370c     10 00 90 AD |  if_e	jmp	#LR__0112
03710                 | '     b:=3
03710     03 84 06 F6 | 	mov	local03, #3
03714                 | '     kbmreport:=rr<<24
03714     44 87 02 F6 | 	mov	local04, local05
03718     18 86 66 F0 | 	shl	local04, #24
0371c     43 97 02 F6 | 	mov	local12, local04
03720                 | LR__0112
03720                 | '   
03720                 | '   if (rr<$80) && (b>0) && (rr>=0)
03720     80 88 5E F2 | 	cmps	local05, #128 wcz
03724     30 00 90 3D |  if_ae	jmp	#LR__0113
03728     00 84 5E F2 | 	cmps	local03, #0 wcz
0372c     28 00 90 ED |  if_be	jmp	#LR__0113
03730     00 88 5E F2 | 	cmps	local05, #0 wcz
03734     20 00 90 CD |  if_b	jmp	#LR__0113
03738                 | '     b--
03738     01 84 86 F1 | 	sub	local03, #1
0373c                 | '     kbmreport+=rr<<(b<<3)  
0373c     4B 87 02 F6 | 	mov	local04, local12
03740     44 8D 02 F6 | 	mov	local07, local05
03744     42 81 02 F6 | 	mov	local01, local03
03748     03 80 66 F0 | 	shl	local01, #3
0374c     40 8D 62 F0 | 	shl	local07, local01
03750     46 87 02 F1 | 	add	local04, local07
03754     43 97 02 F6 | 	mov	local12, local04
03758                 | LR__0113
03758                 | '   
03758                 | '   if (rr==$FF)
03758     FF 88 0E F2 | 	cmp	local05, #255 wz
0375c                 | '     b:=0   
0375c     00 84 06 A6 |  if_e	mov	local03, #0
03760                 | ' 
03760                 | '   if b==0  
03760     00 84 0E F2 | 	cmp	local03, #0 wz
03764     0C 01 90 5D |  if_ne	jmp	#LR__0118
03768                 | '  
03768                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03768     00 00 40 FF 
0376c     00 96 1E F2 | 	cmp	local12, ##-2147483648 wcz
03770     80 00 90 CD |  if_b	jmp	#LR__0115
03774     00 80 43 FF 
03778     00 96 1E F2 | 	cmp	local12, ##-2030043136 wcz
0377c     74 00 90 3D |  if_ae	jmp	#LR__0115
03780                 | '       if mousefront<>((mousetail-1) //128)
03780     0C 0E 06 F1 | 	add	objptr, #12
03784     07 8D 02 FB | 	rdlong	local07, objptr
03788     46 87 02 F6 | 	mov	local04, local07
0378c     01 86 86 F1 | 	sub	local04, #1
03790     43 81 52 F6 | 	abs	local01, local04 wc
03794     7F 80 06 F5 | 	and	local01, #127
03798     40 81 62 C6 |  if_b	neg	local01, local01
0379c     04 0E 86 F1 | 	sub	objptr, #4
037a0     07 91 02 FB | 	rdlong	local09, objptr
037a4     08 0E 86 F1 | 	sub	objptr, #8
037a8     48 93 02 F6 | 	mov	local10, local09
037ac     40 93 0A F2 | 	cmp	local10, local01 wz
037b0     40 00 90 AD |  if_e	jmp	#LR__0114
037b4                 | '         mousebuf[mousefront]:=kbmreport
037b4     08 0E 06 F1 | 	add	objptr, #8
037b8     07 87 02 FB | 	rdlong	local04, objptr
037bc     02 86 66 F0 | 	shl	local04, #2
037c0     98 0E 06 F1 | 	add	objptr, #152
037c4     07 87 02 F1 | 	add	local04, objptr
037c8     43 97 62 FC | 	wrlong	local12, local04
037cc                 | '         mousefront+=1
037cc     98 0E 86 F1 | 	sub	objptr, #152
037d0     07 81 02 FB | 	rdlong	local01, objptr
037d4     01 80 06 F1 | 	add	local01, #1
037d8     07 81 62 FC | 	wrlong	local01, objptr
037dc                 | '         mousefront:=mousefront // 128
037dc     40 8D 02 F6 | 	mov	local07, local01
037e0     46 87 52 F6 | 	abs	local04, local07 wc
037e4     7F 86 06 F5 | 	and	local04, #127
037e8     43 87 62 C6 |  if_b	neg	local04, local04
037ec     07 87 62 FC | 	wrlong	local04, objptr
037f0     08 0E 86 F1 | 	sub	objptr, #8
037f4                 | LR__0114
037f4                 | LR__0115
037f4                 | '     b:=(-1)
037f4     01 84 66 F6 | 	neg	local03, #1
037f8                 | ' 
037f8                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
037f8     00 80 43 FF 
037fc     00 96 1E F2 | 	cmp	local12, ##-2030043136 wcz
03800     6C 00 90 CD |  if_b	jmp	#LR__0117
03804     00 00 45 FF 
03808     00 96 1E F2 | 	cmp	local12, ##-1979711488 wcz
0380c     60 00 90 3D |  if_ae	jmp	#LR__0117
03810                 | '       if kbdfront<>((kbdtail-1) //32)
03810     04 0E 06 F1 | 	add	objptr, #4
03814     07 8D 02 FB | 	rdlong	local07, objptr
03818     04 0E 86 F1 | 	sub	objptr, #4
0381c     46 87 02 F6 | 	mov	local04, local07
03820     01 86 86 F1 | 	sub	local04, #1
03824     43 81 52 F6 | 	abs	local01, local04 wc
03828     1F 80 06 F5 | 	and	local01, #31
0382c     40 81 62 C6 |  if_b	neg	local01, local01
03830     07 93 02 FB | 	rdlong	local10, objptr
03834     40 93 0A F2 | 	cmp	local10, local01 wz
03838     34 00 90 AD |  if_e	jmp	#LR__0116
0383c                 | '         kbdbuf[kbdfront]:=kbmreport
0383c     07 87 02 FB | 	rdlong	local04, objptr
03840     02 86 66 F0 | 	shl	local04, #2
03844     20 0E 06 F1 | 	add	objptr, #32
03848     07 87 02 F1 | 	add	local04, objptr
0384c     43 97 62 FC | 	wrlong	local12, local04
03850                 | '         kbdfront+=1
03850     20 0E 86 F1 | 	sub	objptr, #32
03854     07 8D 02 FB | 	rdlong	local07, objptr
03858     01 8C 06 F1 | 	add	local07, #1
0385c     07 8D 62 FC | 	wrlong	local07, objptr
03860                 | '         kbdfront:=kbdfront // 32
03860     46 87 52 F6 | 	abs	local04, local07 wc
03864     1F 86 06 F5 | 	and	local04, #31
03868     43 87 62 C6 |  if_b	neg	local04, local04
0386c     07 87 62 FC | 	wrlong	local04, objptr
03870                 | LR__0116
03870                 | LR__0117
03870                 | '     b:=(-1)
03870     01 84 66 F6 | 	neg	local03, #1
03874                 | LR__0118
03874                 | ' 
03874                 | ' 
03874                 | '   if long[$30]==0
03874     30 86 0E FB | 	rdlong	local04, #48 wz
03878     5C 00 90 5D |  if_ne	jmp	#LR__0120
0387c                 | '     if kbdfront<>kbdtail
0387c     07 87 02 FB | 	rdlong	local04, objptr
03880     04 0E 06 F1 | 	add	objptr, #4
03884     07 81 02 FB | 	rdlong	local01, objptr
03888     04 0E 86 F1 | 	sub	objptr, #4
0388c     40 87 0A F2 | 	cmp	local04, local01 wz
03890     44 00 90 AD |  if_e	jmp	#LR__0119
03894                 | '       long[$30]:=kbdbuf[kbdtail]
03894     04 0E 06 F1 | 	add	objptr, #4
03898     07 87 02 FB | 	rdlong	local04, objptr
0389c     02 86 66 F0 | 	shl	local04, #2
038a0     1C 0E 06 F1 | 	add	objptr, #28
038a4     07 87 02 F1 | 	add	local04, objptr
038a8     43 93 02 FB | 	rdlong	local10, local04
038ac     30 92 66 FC | 	wrlong	local10, #48
038b0                 | '       kbdtail++
038b0     1C 0E 86 F1 | 	sub	objptr, #28
038b4     07 93 02 FB | 	rdlong	local10, objptr
038b8     49 81 02 F6 | 	mov	local01, local10
038bc     01 80 06 F1 | 	add	local01, #1
038c0     07 81 62 FC | 	wrlong	local01, objptr
038c4                 | '       kbdtail:= kbdtail // 32
038c4     40 87 52 F6 | 	abs	local04, local01 wc
038c8     1F 86 06 F5 | 	and	local04, #31
038cc     43 87 62 C6 |  if_b	neg	local04, local04
038d0     07 87 62 FC | 	wrlong	local04, objptr
038d4     04 0E 86 F1 | 	sub	objptr, #4
038d8                 | LR__0119
038d8                 | LR__0120
038d8                 | '       
038d8                 | '   if long[$34]==0
038d8     34 86 0E FB | 	rdlong	local04, #52 wz
038dc     64 00 90 5D |  if_ne	jmp	#LR__0122
038e0                 | '     if mousefront<>mousetail
038e0     08 0E 06 F1 | 	add	objptr, #8
038e4     07 87 02 FB | 	rdlong	local04, objptr
038e8     04 0E 06 F1 | 	add	objptr, #4
038ec     07 93 02 FB | 	rdlong	local10, objptr
038f0     0C 0E 86 F1 | 	sub	objptr, #12
038f4     49 81 02 F6 | 	mov	local01, local10
038f8     40 87 0A F2 | 	cmp	local04, local01 wz
038fc     44 00 90 AD |  if_e	jmp	#LR__0121
03900                 | '       long[$34]:=mousebuf[mousetail]
03900     0C 0E 06 F1 | 	add	objptr, #12
03904     07 87 02 FB | 	rdlong	local04, objptr
03908     02 86 66 F0 | 	shl	local04, #2
0390c     94 0E 06 F1 | 	add	objptr, #148
03910     07 87 02 F1 | 	add	local04, objptr
03914     43 93 02 FB | 	rdlong	local10, local04
03918     34 92 66 FC | 	wrlong	local10, #52
0391c                 | '       mousetail++
0391c     94 0E 86 F1 | 	sub	objptr, #148
03920     07 93 02 FB | 	rdlong	local10, objptr
03924     49 81 02 F6 | 	mov	local01, local10
03928     01 80 06 F1 | 	add	local01, #1
0392c     07 81 62 FC | 	wrlong	local01, objptr
03930                 | '       mousetail:= mousetail // 128
03930     40 87 52 F6 | 	abs	local04, local01 wc
03934     7F 86 06 F5 | 	and	local04, #127
03938     43 87 62 C6 |  if_b	neg	local04, local04
0393c     07 87 62 FC | 	wrlong	local04, objptr
03940     0C 0E 86 F1 | 	sub	objptr, #12
03944                 | LR__0121
03944                 | LR__0122
03944                 | ' 
03944                 | '       
03944                 | '   if long[$38]==0
03944     38 86 0E FB | 	rdlong	local04, #56 wz
03948     6C 00 90 5D |  if_ne	jmp	#LR__0124
0394c                 | '     if midifront<>miditail
0394c     10 0E 06 F1 | 	add	objptr, #16
03950     07 87 02 FB | 	rdlong	local04, objptr
03954     04 0E 06 F1 | 	add	objptr, #4
03958     07 93 02 FB | 	rdlong	local10, objptr
0395c     14 0E 86 F1 | 	sub	objptr, #20
03960     49 81 02 F6 | 	mov	local01, local10
03964     40 87 0A F2 | 	cmp	local04, local01 wz
03968     4C 00 90 AD |  if_e	jmp	#LR__0123
0396c                 | '       long[$38]:=midibuf[miditail]
0396c     14 0E 06 F1 | 	add	objptr, #20
03970     07 87 02 FB | 	rdlong	local04, objptr
03974     02 86 66 F0 | 	shl	local04, #2
03978     01 00 00 FF 
0397c     8C 0E 06 F1 | 	add	objptr, ##652
03980     07 87 02 F1 | 	add	local04, objptr
03984     43 93 02 FB | 	rdlong	local10, local04
03988     38 92 66 FC | 	wrlong	local10, #56
0398c                 | '       miditail++
0398c     01 00 00 FF 
03990     8C 0E 86 F1 | 	sub	objptr, ##652
03994     07 93 02 FB | 	rdlong	local10, objptr
03998     49 81 02 F6 | 	mov	local01, local10
0399c     01 80 06 F1 | 	add	local01, #1
039a0     07 81 62 FC | 	wrlong	local01, objptr
039a4                 | '       miditail:= miditail // 32
039a4     40 87 52 F6 | 	abs	local04, local01 wc
039a8     1F 86 06 F5 | 	and	local04, #31
039ac     43 87 62 C6 |  if_b	neg	local04, local04
039b0     07 87 62 FC | 	wrlong	local04, objptr
039b4     14 0E 86 F1 | 	sub	objptr, #20
039b8                 | LR__0123
039b8                 | LR__0124
039b8                 | '       
039b8                 | '   if long[$3c]==0
039b8     3C 86 0E FB | 	rdlong	local04, #60 wz
039bc     60 FB 9F 5D |  if_ne	jmp	#LR__0101
039c0                 | '     if serialfront<>serialtail
039c0     18 0E 06 F1 | 	add	objptr, #24
039c4     07 87 02 FB | 	rdlong	local04, objptr
039c8     04 0E 06 F1 | 	add	objptr, #4
039cc     07 93 02 FB | 	rdlong	local10, objptr
039d0     1C 0E 86 F1 | 	sub	objptr, #28
039d4     49 81 02 F6 | 	mov	local01, local10
039d8     40 87 0A F2 | 	cmp	local04, local01 wz
039dc     40 FB 9F AD |  if_e	jmp	#LR__0101
039e0                 | '       byte[$3c]:=255
039e0     3C FE 4D FC | 	wrbyte	#255, #60
039e4                 | '       byte[$3D]:=serialbuf[serialtail]
039e4     1C 0E 06 F1 | 	add	objptr, #28
039e8     07 87 02 FB | 	rdlong	local04, objptr
039ec     01 00 00 FF 
039f0     04 0F 06 F1 | 	add	objptr, ##772
039f4     07 87 02 F1 | 	add	local04, objptr
039f8     43 93 C2 FA | 	rdbyte	local10, local04
039fc     3D 92 46 FC | 	wrbyte	local10, #61
03a00                 | '       serialtail++
03a00     01 00 00 FF 
03a04     04 0F 86 F1 | 	sub	objptr, ##772
03a08     07 93 02 FB | 	rdlong	local10, objptr
03a0c     49 81 02 F6 | 	mov	local01, local10
03a10     01 80 06 F1 | 	add	local01, #1
03a14     07 81 62 FC | 	wrlong	local01, objptr
03a18                 | '       serialtail:= serialtail // 32
03a18     40 87 52 F6 | 	abs	local04, local01 wc
03a1c     1F 86 06 F5 | 	and	local04, #31
03a20     43 87 62 C6 |  if_b	neg	local04, local04
03a24     07 87 62 FC | 	wrlong	local04, objptr
03a28     1C 0E 86 F1 | 	sub	objptr, #28
03a2c     F0 FA 9F FD | 	jmp	#LR__0101
03a30     AF F0 03 F6 | 	mov	ptra, fp
03a34     BF 00 A0 FD | 	call	#popregs_
03a38                 | _retrocog_spin2_serialcog_ret
03a38     2D 00 64 FD | 	ret
03a3c                 | 
03a3c                 | '       
03a3c                 | ' 
03a3c                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03a3c                 | ' 
03a3c                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03a3c                 | _retrocog_spin2_serial_start
03a3c     04 5A 05 F6 | 	mov	COUNT_, #4
03a40     B0 00 A0 FD | 	call	#pushregs_
03a44     39 81 02 F6 | 	mov	local01, arg01
03a48     3A 83 02 F6 | 	mov	local02, arg02
03a4c                 | ' 
03a4c                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03a4c     14 72 06 FB | 	rdlong	arg01, #20
03a50     10 74 C6 F9 | 	decod	arg02, #16
03a54     3A 73 02 FD | 	qmul	arg01, arg02
03a58     19 84 62 FD | 	getqy	local03
03a5c     18 86 62 FD | 	getqx	local04
03a60     28 84 62 FD | 	setq	local03
03a64     3B 87 12 FD | 	qdiv	local04, arg03
03a68     18 2C 62 FD | 	getqx	result1
03a6c     16 77 02 F6 | 	mov	arg03, result1
03a70     FE FF 7F FF 
03a74     00 76 06 F5 | 	and	arg03, ##-1024
03a78                 | ' bitmode |= 7                                                  ' set bits (8)
03a78     07 76 46 F5 | 	or	arg03, #7
03a7c                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03a7c     40 80 62 FD | 	dirl	local01
03a80     08 00 80 FF 
03a84     40 7D 08 FC | 	wrpin	##4158, local01
03a88     40 77 12 FC | 	wxpin	arg03, local01
03a8c     40 01 28 FC | 	wypin	#0, local01
03a90     41 80 62 FD | 	dirh	local01
03a94                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03a94     40 82 62 FD | 	dirl	local02
03a98     41 F9 08 FC | 	wrpin	#124, local02
03a9c     41 77 12 FC | 	wxpin	arg03, local02
03aa0     41 01 28 FC | 	wypin	#0, local02
03aa4     41 82 62 FD | 	dirh	local02
03aa8                 | ' pinhigh(rxpin)
03aa8     59 80 62 FD | 	drvh	local01
03aac     AF F0 03 F6 | 	mov	ptra, fp
03ab0     BF 00 A0 FD | 	call	#popregs_
03ab4                 | _retrocog_spin2_serial_start_ret
03ab4     2D 00 64 FD | 	ret
03ab8                 | 
03ab8                 | ' 
03ab8                 | ' pub rxcheck(pin) : rxbyte | check
03ab8                 | _retrocog_spin2_rxcheck
03ab8     03 5A 05 F6 | 	mov	COUNT_, #3
03abc     B0 00 A0 FD | 	call	#pushregs_
03ac0     39 81 02 F6 | 	mov	local01, arg01
03ac4                 | ' 
03ac4                 | ' '' Check for serial input
03ac4                 | ' '' -- returns -1 if nothing available
03ac4                 | ' 
03ac4                 | '   rxbyte := -1
03ac4     01 82 66 F6 | 	neg	local02, #1
03ac8                 | '   check := pinr(pin)
03ac8     40 73 02 F6 | 	mov	arg01, local01
03acc     7C 28 B0 FD | 	call	#__system___pinread
03ad0     16 85 0A F6 | 	mov	local03, result1 wz
03ad4                 | '   if (check)
03ad4                 | '     rxbyte := rdpin(pin) >> 24
03ad4     00 82 06 56 |  if_ne	mov	local02, #0
03ad8     40 83 8A 5A |  if_ne	rdpin	local02, local01
03adc     18 82 46 50 |  if_ne	shr	local02, #24
03ae0     41 2D 02 F6 | 	mov	result1, local02
03ae4     AF F0 03 F6 | 	mov	ptra, fp
03ae8     BF 00 A0 FD | 	call	#popregs_
03aec                 | _retrocog_spin2_rxcheck_ret
03aec     2D 00 64 FD | 	ret
03af0                 | 
03af0                 | _trackerplayer_spin2_initModule
03af0     0B 5A 05 F6 | 	mov	COUNT_, #11
03af4     B0 00 A0 FD | 	call	#pushregs_
03af8     30 F0 07 F1 | 	add	ptra, #48
03afc     AF 72 62 FC | 	wrlong	arg01, fp
03b00     04 5E 05 F1 | 	add	fp, #4
03b04     AF 74 62 FC | 	wrlong	arg02, fp
03b08     04 5E 85 F1 | 	sub	fp, #4
03b0c                 | ' 
03b0c                 | '   ' Set some data pointers
03b0c                 | '   magicFour      := hubPtr + 1080
03b0c     AF 80 02 FB | 	rdlong	local01, fp
03b10     02 00 00 FF 
03b14     38 80 06 F1 | 	add	local01, ##1080
03b18     9D 0E 06 F1 | 	add	objptr, #157
03b1c     07 81 62 FC | 	wrlong	local01, objptr
03b20                 | '   nameStr        := hubPtr
03b20     AF 80 02 FB | 	rdlong	local01, fp
03b24     97 0E 86 F1 | 	sub	objptr, #151
03b28     07 81 62 FC | 	wrlong	local01, objptr
03b2c                 | '   samplesInfoLut := hubPtr + 20
03b2c     AF 80 02 FB | 	rdlong	local01, fp
03b30     14 80 06 F1 | 	add	local01, #20
03b34     04 0E 06 F1 | 	add	objptr, #4
03b38     07 81 62 FC | 	wrlong	local01, objptr
03b3c                 | ' 
03b3c                 | '   ' Is this a 31 sample module?
03b3c                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03b3c     93 0E 06 F1 | 	add	objptr, #147
03b40     07 81 02 FB | 	rdlong	local01, objptr
03b44     9D 0E 86 F1 | 	sub	objptr, #157
03b48     40 83 C2 FA | 	rdbyte	local02, local01
03b4c     4D 82 0E F2 | 	cmp	local02, #77 wz
03b50     4C 01 90 5D |  if_ne	jmp	#LR__0128
03b54     9D 0E 06 F1 | 	add	objptr, #157
03b58     07 85 02 FB | 	rdlong	local03, objptr
03b5c     9D 0E 86 F1 | 	sub	objptr, #157
03b60     02 84 06 F1 | 	add	local03, #2
03b64     42 87 C2 FA | 	rdbyte	local04, local03
03b68     4B 86 0E F2 | 	cmp	local04, #75 wz
03b6c     30 01 90 5D |  if_ne	jmp	#LR__0128
03b70                 | '     songLength          := byte[hubPtr + 950]
03b70     AF 80 02 FB | 	rdlong	local01, fp
03b74     01 00 00 FF 
03b78     B6 81 06 F1 | 	add	local01, ##950
03b7c     40 89 C2 FA | 	rdbyte	local05, local01
03b80     9A 0E 06 F1 | 	add	objptr, #154
03b84     07 89 42 FC | 	wrbyte	local05, objptr
03b88                 | '     unknown1            := byte[hubPtr + 951]
03b88     AF 80 02 FB | 	rdlong	local01, fp
03b8c     01 00 00 FF 
03b90     B7 81 06 F1 | 	add	local01, ##951
03b94     40 89 C2 FA | 	rdbyte	local05, local01
03b98     02 0E 06 F1 | 	add	objptr, #2
03b9c     07 89 42 FC | 	wrbyte	local05, objptr
03ba0                 | '     songPositionsLut    :=      hubPtr + 952
03ba0     AF 80 02 FB | 	rdlong	local01, fp
03ba4     01 00 00 FF 
03ba8     B8 81 06 F1 | 	add	local01, ##952
03bac     06 0E 86 F1 | 	sub	objptr, #6
03bb0     07 81 62 FC | 	wrlong	local01, objptr
03bb4                 | '     patternsData        :=      hubPtr + 1084
03bb4     AF 80 02 FB | 	rdlong	local01, fp
03bb8     02 00 00 FF 
03bbc     3C 80 06 F1 | 	add	local01, ##1084
03bc0     04 0E 86 F1 | 	sub	objptr, #4
03bc4     07 81 62 FC | 	wrlong	local01, objptr
03bc8                 | '     numberOfInstruments := 31
03bc8     14 0E 06 F1 | 	add	objptr, #20
03bcc     07 3F 48 FC | 	wrbyte	#31, objptr
03bd0                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03bd0     0B 0E 86 F1 | 	sub	objptr, #11
03bd4     07 01 48 FC | 	wrbyte	#0, objptr
03bd8     9B 0E 86 F1 | 	sub	objptr, #155
03bdc                 | '     repeat i from 952 to 1079
03bdc     08 5E 05 F1 | 	add	fp, #8
03be0     01 00 80 FF 
03be4     AF 70 6B FC | 	wrlong	##952, fp
03be8     08 5E 85 F1 | 	sub	fp, #8
03bec     80 C4 9F FE | 	loc	pa,	#(@LR__0127-@LR__0125)
03bf0     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bf4                 | LR__0125
03bf4                 | '       if byte[hubPtr][i] > numberOfPatterns
03bf4     AF 8A 02 FB | 	rdlong	local06, fp
03bf8     08 5E 05 F1 | 	add	fp, #8
03bfc     AF 82 02 FB | 	rdlong	local02, fp
03c00     08 5E 85 F1 | 	sub	fp, #8
03c04     45 83 02 F1 | 	add	local02, local06
03c08     41 87 C2 FA | 	rdbyte	local04, local02
03c0c     9B 0E 06 F1 | 	add	objptr, #155
03c10     07 8D C2 FA | 	rdbyte	local07, objptr
03c14     9B 0E 86 F1 | 	sub	objptr, #155
03c18     46 87 5A F2 | 	cmps	local04, local07 wcz
03c1c     24 00 90 ED |  if_be	jmp	#LR__0126
03c20                 | '         numberOfPatterns := byte[hubPtr][i]
03c20     AF 8A 02 FB | 	rdlong	local06, fp
03c24     08 5E 05 F1 | 	add	fp, #8
03c28     AF 82 02 FB | 	rdlong	local02, fp
03c2c     08 5E 85 F1 | 	sub	fp, #8
03c30     45 83 02 F1 | 	add	local02, local06
03c34     41 87 C2 FA | 	rdbyte	local04, local02
03c38     9B 0E 06 F1 | 	add	objptr, #155
03c3c     07 87 42 FC | 	wrbyte	local04, objptr
03c40     9B 0E 86 F1 | 	sub	objptr, #155
03c44                 | LR__0126
03c44     08 5E 05 F1 | 	add	fp, #8
03c48     AF 88 02 FB | 	rdlong	local05, fp
03c4c     01 88 06 F1 | 	add	local05, #1
03c50     AF 88 62 FC | 	wrlong	local05, fp
03c54     08 5E 85 F1 | 	sub	fp, #8
03c58     02 00 00 FF 
03c5c     38 88 5E F2 | 	cmps	local05, ##1080 wcz
03c60     90 FF 9F CD |  if_b	jmp	#LR__0125
03c64                 | LR__0127
03c64                 | '     numberOfPatterns++
03c64     9B 0E 06 F1 | 	add	objptr, #155
03c68     07 89 C2 FA | 	rdbyte	local05, objptr
03c6c     07 83 C2 FA | 	rdbyte	local02, objptr
03c70     01 82 06 F1 | 	add	local02, #1
03c74     07 83 42 FC | 	wrbyte	local02, objptr
03c78                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03c78     09 0E 86 F1 | 	sub	objptr, #9
03c7c     07 81 02 FB | 	rdlong	local01, objptr
03c80     09 0E 06 F1 | 	add	objptr, #9
03c84     07 83 C2 FA | 	rdbyte	local02, objptr
03c88     0A 82 66 F0 | 	shl	local02, #10
03c8c     41 81 02 F1 | 	add	local01, local02
03c90     8D 0E 86 F1 | 	sub	objptr, #141
03c94     07 81 62 FC | 	wrlong	local01, objptr
03c98     0E 0E 86 F1 | 	sub	objptr, #14
03c9c                 | ' 
03c9c                 | '   ' This must be an oldschool 15 sample soundtracker module
03c9c                 | '   else
03c9c     1C 01 90 FD | 	jmp	#LR__0132
03ca0                 | LR__0128
03ca0                 | '     songLength          := byte[hubPtr + 470]
03ca0     AF 80 02 FB | 	rdlong	local01, fp
03ca4     D6 81 06 F1 | 	add	local01, #470
03ca8     40 89 C2 FA | 	rdbyte	local05, local01
03cac     9A 0E 06 F1 | 	add	objptr, #154
03cb0     07 89 42 FC | 	wrbyte	local05, objptr
03cb4                 | '     unknown1            := byte[hubPtr + 471]
03cb4     AF 80 02 FB | 	rdlong	local01, fp
03cb8     D7 81 06 F1 | 	add	local01, #471
03cbc     40 89 C2 FA | 	rdbyte	local05, local01
03cc0     02 0E 06 F1 | 	add	objptr, #2
03cc4     07 89 42 FC | 	wrbyte	local05, objptr
03cc8                 | '     songPositionsLut    :=      hubPtr + 472
03cc8     AF 80 02 FB | 	rdlong	local01, fp
03ccc     D8 81 06 F1 | 	add	local01, #472
03cd0     06 0E 86 F1 | 	sub	objptr, #6
03cd4     07 81 62 FC | 	wrlong	local01, objptr
03cd8                 | '     patternsData        :=      hubPtr + 600
03cd8     AF 80 02 FB | 	rdlong	local01, fp
03cdc     01 00 00 FF 
03ce0     58 80 06 F1 | 	add	local01, ##600
03ce4     04 0E 86 F1 | 	sub	objptr, #4
03ce8     07 81 62 FC | 	wrlong	local01, objptr
03cec                 | '     numberOfInstruments := 15
03cec     14 0E 06 F1 | 	add	objptr, #20
03cf0     07 1F 48 FC | 	wrbyte	#15, objptr
03cf4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03cf4     0B 0E 86 F1 | 	sub	objptr, #11
03cf8     07 01 48 FC | 	wrbyte	#0, objptr
03cfc     9B 0E 86 F1 | 	sub	objptr, #155
03d00                 | '     repeat i from 472 to 599
03d00     08 5E 05 F1 | 	add	fp, #8
03d04     AF B0 6B FC | 	wrlong	#472, fp
03d08     08 5E 85 F1 | 	sub	fp, #8
03d0c     60 C3 9F FE | 	loc	pa,	#(@LR__0131-@LR__0129)
03d10     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d14                 | LR__0129
03d14                 | '       if byte[hubPtr][i] > numberOfPatterns
03d14     AF 8A 02 FB | 	rdlong	local06, fp
03d18     08 5E 05 F1 | 	add	fp, #8
03d1c     AF 82 02 FB | 	rdlong	local02, fp
03d20     08 5E 85 F1 | 	sub	fp, #8
03d24     45 83 02 F1 | 	add	local02, local06
03d28     41 87 C2 FA | 	rdbyte	local04, local02
03d2c     9B 0E 06 F1 | 	add	objptr, #155
03d30     07 8D C2 FA | 	rdbyte	local07, objptr
03d34     9B 0E 86 F1 | 	sub	objptr, #155
03d38     46 87 5A F2 | 	cmps	local04, local07 wcz
03d3c     24 00 90 ED |  if_be	jmp	#LR__0130
03d40                 | '         numberOfPatterns := byte[hubPtr][i]
03d40     AF 8A 02 FB | 	rdlong	local06, fp
03d44     08 5E 05 F1 | 	add	fp, #8
03d48     AF 82 02 FB | 	rdlong	local02, fp
03d4c     08 5E 85 F1 | 	sub	fp, #8
03d50     45 83 02 F1 | 	add	local02, local06
03d54     41 87 C2 FA | 	rdbyte	local04, local02
03d58     9B 0E 06 F1 | 	add	objptr, #155
03d5c     07 87 42 FC | 	wrbyte	local04, objptr
03d60     9B 0E 86 F1 | 	sub	objptr, #155
03d64                 | LR__0130
03d64     08 5E 05 F1 | 	add	fp, #8
03d68     AF 88 02 FB | 	rdlong	local05, fp
03d6c     01 88 06 F1 | 	add	local05, #1
03d70     AF 88 62 FC | 	wrlong	local05, fp
03d74     08 5E 85 F1 | 	sub	fp, #8
03d78     01 00 00 FF 
03d7c     58 88 5E F2 | 	cmps	local05, ##600 wcz
03d80     90 FF 9F CD |  if_b	jmp	#LR__0129
03d84                 | LR__0131
03d84                 | '     numberOfPatterns++
03d84     9B 0E 06 F1 | 	add	objptr, #155
03d88     07 89 C2 FA | 	rdbyte	local05, objptr
03d8c     07 83 C2 FA | 	rdbyte	local02, objptr
03d90     01 82 06 F1 | 	add	local02, #1
03d94     07 83 42 FC | 	wrbyte	local02, objptr
03d98                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d98     09 0E 86 F1 | 	sub	objptr, #9
03d9c     07 81 02 FB | 	rdlong	local01, objptr
03da0     09 0E 06 F1 | 	add	objptr, #9
03da4     07 83 C2 FA | 	rdbyte	local02, objptr
03da8     0A 82 66 F0 | 	shl	local02, #10
03dac     41 81 02 F1 | 	add	local01, local02
03db0     8D 0E 86 F1 | 	sub	objptr, #141
03db4     07 81 62 FC | 	wrlong	local01, objptr
03db8     0E 0E 86 F1 | 	sub	objptr, #14
03dbc                 | LR__0132
03dbc                 | ' 
03dbc                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03dbc                 | '   tmpPtr := sampleDataPtr
03dbc     0E 0E 06 F1 | 	add	objptr, #14
03dc0     07 81 02 FB | 	rdlong	local01, objptr
03dc4     0C 5E 05 F1 | 	add	fp, #12
03dc8     AF 80 62 FC | 	wrlong	local01, fp
03dcc                 | '   repeat i from 1 to numberOfInstruments
03dcc     04 5E 85 F1 | 	sub	fp, #4
03dd0     AF 02 68 FC | 	wrlong	#1, fp
03dd4     08 5E 85 F1 | 	sub	fp, #8
03dd8     98 0E 06 F1 | 	add	objptr, #152
03ddc     07 83 C2 FA | 	rdbyte	local02, objptr
03de0     01 82 5E F2 | 	cmps	local02, #1 wcz
03de4     01 88 06 16 |  if_a	mov	local05, #1
03de8     01 88 66 E6 |  if_be	neg	local05, #1
03dec     44 8F 02 F6 | 	mov	local08, local05
03df0     07 91 C2 FA | 	rdbyte	local09, objptr
03df4     A6 0E 86 F1 | 	sub	objptr, #166
03df8     47 91 02 F1 | 	add	local09, local08
03dfc                 | LR__0133
03dfc                 | '     samplesPtrLut[i-1] := tmpPtr
03dfc     08 5E 05 F1 | 	add	fp, #8
03e00     AF 92 02 FB | 	rdlong	local10, fp
03e04     01 92 86 F1 | 	sub	local10, #1
03e08     02 92 66 F0 | 	shl	local10, #2
03e0c     12 0E 06 F1 | 	add	objptr, #18
03e10     07 93 02 F1 | 	add	local10, objptr
03e14     04 5E 05 F1 | 	add	fp, #4
03e18     AF 94 02 FB | 	rdlong	local11, fp
03e1c     49 95 62 FC | 	wrlong	local11, local10
03e20                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03e20     04 5E 85 F1 | 	sub	fp, #4
03e24     AF 72 02 FB | 	rdlong	arg01, fp
03e28     1C 5E 05 F1 | 	add	fp, #28
03e2c     AF 74 02 F6 | 	mov	arg02, fp
03e30     14 5E 85 F1 | 	sub	fp, #20
03e34     AF 76 02 F6 | 	mov	arg03, fp
03e38     04 5E 05 F1 | 	add	fp, #4
03e3c     AF 78 02 F6 | 	mov	arg04, fp
03e40     04 5E 05 F1 | 	add	fp, #4
03e44     AF 7A 02 F6 | 	mov	arg05, fp
03e48     04 5E 05 F1 | 	add	fp, #4
03e4c     AF 7C 02 F6 | 	mov	arg06, fp
03e50     04 5E 05 F1 | 	add	fp, #4
03e54     AF 7E 02 F6 | 	mov	arg07, fp
03e58     20 5E 85 F1 | 	sub	fp, #32
03e5c     12 0E 86 F1 | 	sub	objptr, #18
03e60     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03e64                 | '     tmpPtr += samLength
03e64     0C 5E 05 F1 | 	add	fp, #12
03e68     AF 8C 02 FB | 	rdlong	local07, fp
03e6c     04 5E 05 F1 | 	add	fp, #4
03e70     AF 92 02 FB | 	rdlong	local10, fp
03e74     49 8D 02 F1 | 	add	local07, local10
03e78     04 5E 85 F1 | 	sub	fp, #4
03e7c     AF 8C 62 FC | 	wrlong	local07, fp
03e80     04 5E 85 F1 | 	sub	fp, #4
03e84     AF 8C 02 FB | 	rdlong	local07, fp
03e88     47 8D 02 F1 | 	add	local07, local08
03e8c     AF 8C 62 FC | 	wrlong	local07, fp
03e90     08 5E 85 F1 | 	sub	fp, #8
03e94     48 8D 0A F2 | 	cmp	local07, local09 wz
03e98     60 FF 9F 5D |  if_ne	jmp	#LR__0133
03e9c                 | ' 
03e9c                 | '   ' Below this point, all play routine variables are resest to their default values
03e9c                 | '   tickCounter                 := 0
03e9c     A1 0E 06 F1 | 	add	objptr, #161
03ea0     07 01 48 FC | 	wrbyte	#0, objptr
03ea4                 | '   patternRow                  := 0
03ea4     01 0E 06 F1 | 	add	objptr, #1
03ea8     07 01 48 FC | 	wrbyte	#0, objptr
03eac                 | '   songPosition                := startPattern
03eac     04 5E 05 F1 | 	add	fp, #4
03eb0     AF 80 02 FB | 	rdlong	local01, fp
03eb4     04 5E 85 F1 | 	sub	fp, #4
03eb8     01 0E 06 F1 | 	add	objptr, #1
03ebc     07 81 42 FC | 	wrbyte	local01, objptr
03ec0                 | '   currentSongSpeed            := 6
03ec0     01 0E 06 F1 | 	add	objptr, #1
03ec4     07 0D 48 FC | 	wrbyte	#6, objptr
03ec8                 | '   patternDelay                := 0
03ec8     01 0E 06 F1 | 	add	objptr, #1
03ecc     07 01 48 FC | 	wrbyte	#0, objptr
03ed0                 | '   ticksPerMinute              := 50 * 60
03ed0     02 0F 06 F1 | 	add	objptr, #258
03ed4     05 00 80 FF 
03ed8     07 71 6B FC | 	wrlong	##3000, objptr
03edc     A7 0F 86 F1 | 	sub	objptr, #423
03ee0                 | '   cyclesToWait                := systemClock / 50
03ee0     07 AF 02 FB | 	rdlong	muldiva_, objptr
03ee4     32 B0 06 F6 | 	mov	muldivb_, #50
03ee8     D0 00 A0 FD | 	call	#divide_
03eec     AB 0F 06 F1 | 	add	objptr, #427
03ef0     07 B1 62 FC | 	wrlong	muldivb_, objptr
03ef4                 | '   sampleNumber_memory         := 0
03ef4     35 0E 06 F1 | 	add	objptr, #53
03ef8     07 01 48 FC | 	wrbyte	#0, objptr
03efc                 | '   lpFilter                    := 0
03efc     25 0E 86 F1 | 	sub	objptr, #37
03f00     07 01 48 FC | 	wrbyte	#0, objptr
03f04                 | '   cmdD_memoryX                := 0
03f04     29 0E 06 F1 | 	add	objptr, #41
03f08     07 01 48 FC | 	wrbyte	#0, objptr
03f0c                 | '   cmdD_memoryY                := 0
03f0c     01 0E 06 F1 | 	add	objptr, #1
03f10     07 01 48 FC | 	wrbyte	#0, objptr
03f14                 | '   cmdD_updatePosition         := false
03f14     01 0E 06 F1 | 	add	objptr, #1
03f18     07 01 48 FC | 	wrbyte	#0, objptr
03f1c                 | '   cmdB_memoryZ                := 0
03f1c     01 0E 06 F1 | 	add	objptr, #1
03f20     07 01 48 FC | 	wrbyte	#0, objptr
03f24                 | '   cmdB_updatePosition         := false
03f24     01 0E 06 F1 | 	add	objptr, #1
03f28     07 01 48 FC | 	wrbyte	#0, objptr
03f2c                 | '   cmdE6_updatePositionCommon  := false
03f2c     0D 0E 06 F1 | 	add	objptr, #13
03f30     07 01 48 FC | 	wrbyte	#0, objptr
03f34     F5 0F 86 F1 | 	sub	objptr, #501
03f38                 | ' 
03f38                 | '   repeat i from 0 to LAST_CHANNEL
03f38     08 5E 05 F1 | 	add	fp, #8
03f3c     AF 00 68 FC | 	wrlong	#0, fp
03f40     08 5E 85 F1 | 	sub	fp, #8
03f44                 | LR__0134
03f44                 | ' 
03f44                 | '     currRepeatPoint[i]        := 0
03f44     08 5E 05 F1 | 	add	fp, #8
03f48     AF 84 02 FB | 	rdlong	local03, fp
03f4c     01 84 66 F0 | 	shl	local03, #1
03f50     D7 0E 06 F1 | 	add	objptr, #215
03f54     07 85 02 F1 | 	add	local03, objptr
03f58     42 01 58 FC | 	wrword	#0, local03
03f5c                 | '     currSampleLength[i]       := 4
03f5c     AF 84 02 FB | 	rdlong	local03, fp
03f60     01 84 66 F0 | 	shl	local03, #1
03f64     1C 0E 86 F1 | 	sub	objptr, #28
03f68     07 85 02 F1 | 	add	local03, objptr
03f6c     42 09 58 FC | 	wrword	#4, local03
03f70                 | '     currSamplePtr[i]          := @null
03f70     AF 82 02 FB | 	rdlong	local02, fp
03f74     02 82 66 F0 | 	shl	local02, #2
03f78     14 0E 86 F1 | 	sub	objptr, #20
03f7c     07 83 02 F1 | 	add	local02, objptr
03f80     41 29 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
03f84                 | '     currSampleNr[i]           := 0
03f84     AF 88 02 FB | 	rdlong	local05, fp
03f88     10 0E 06 F1 | 	add	objptr, #16
03f8c     07 89 02 F1 | 	add	local05, objptr
03f90     44 01 48 FC | 	wrbyte	#0, local05
03f94                 | '     currRepeatLength[i]       := 1
03f94     AF 88 02 FB | 	rdlong	local05, fp
03f98     02 88 66 F0 | 	shl	local05, #2
03f9c     0C 0E 06 F1 | 	add	objptr, #12
03fa0     07 89 02 F1 | 	add	local05, objptr
03fa4     44 03 68 FC | 	wrlong	#1, local05
03fa8                 | '     currPeriod[i]             := 400
03fa8     AF 88 02 FB | 	rdlong	local05, fp
03fac     02 88 66 F0 | 	shl	local05, #2
03fb0     1C 0E 06 F1 | 	add	objptr, #28
03fb4     07 89 02 F1 | 	add	local05, objptr
03fb8     44 21 6B FC | 	wrlong	#400, local05
03fbc                 | '     lastSetPeriod[i]          := 400
03fbc     AF 88 02 FB | 	rdlong	local05, fp
03fc0     02 88 66 F0 | 	shl	local05, #2
03fc4     48 0E 06 F1 | 	add	objptr, #72
03fc8     07 89 02 F1 | 	add	local05, objptr
03fcc     44 21 6B FC | 	wrlong	#400, local05
03fd0                 | '     lastSetSamplePtr[i]       := 0
03fd0     AF 88 02 FB | 	rdlong	local05, fp
03fd4     02 88 66 F0 | 	shl	local05, #2
03fd8     10 0E 06 F1 | 	add	objptr, #16
03fdc     07 89 02 F1 | 	add	local05, objptr
03fe0     44 01 68 FC | 	wrlong	#0, local05
03fe4                 | '     lastSetSampleNr[i]        := 0
03fe4     AF 88 02 FB | 	rdlong	local05, fp
03fe8     02 88 66 F0 | 	shl	local05, #2
03fec     10 0E 06 F1 | 	add	objptr, #16
03ff0     07 89 02 F1 | 	add	local05, objptr
03ff4     44 01 68 FC | 	wrlong	#0, local05
03ff8                 | '     lastSetSampleLength[i]    := 0
03ff8     AF 88 02 FB | 	rdlong	local05, fp
03ffc     02 88 66 F0 | 	shl	local05, #2
04000     10 0E 06 F1 | 	add	objptr, #16
04004     07 89 02 F1 | 	add	local05, objptr
04008     44 01 68 FC | 	wrlong	#0, local05
0400c                 | '     lastSetRepeatLength[i]    := 0
0400c     AF 88 02 FB | 	rdlong	local05, fp
04010     02 88 66 F0 | 	shl	local05, #2
04014     10 0E 06 F1 | 	add	objptr, #16
04018     07 89 02 F1 | 	add	local05, objptr
0401c     44 01 68 FC | 	wrlong	#0, local05
04020                 | '     lastSetRepeatPoint[i]     := 0
04020     AF 88 02 FB | 	rdlong	local05, fp
04024     02 88 66 F0 | 	shl	local05, #2
04028     10 0E 06 F1 | 	add	objptr, #16
0402c     07 89 02 F1 | 	add	local05, objptr
04030     44 01 68 FC | 	wrlong	#0, local05
04034                 | '     currVolume[i]             := 0
04034     AF 88 02 FB | 	rdlong	local05, fp
04038     02 88 66 F0 | 	shl	local05, #2
0403c     78 0E 86 F1 | 	sub	objptr, #120
04040     07 89 02 F1 | 	add	local05, objptr
04044     44 01 68 FC | 	wrlong	#0, local05
04048                 | '     currPanning[i]            := 0
04048     AF 84 02 FB | 	rdlong	local03, fp
0404c     01 84 66 F0 | 	shl	local03, #1
04050     20 0E 06 F1 | 	add	objptr, #32
04054     07 85 02 F1 | 	add	local03, objptr
04058     42 01 58 FC | 	wrword	#0, local03
0405c                 | '     cmd3_memoryZ[i]           := 0
0405c     AF 88 02 FB | 	rdlong	local05, fp
04060     A9 0E 06 F1 | 	add	objptr, #169
04064     07 89 02 F1 | 	add	local05, objptr
04068     44 01 48 FC | 	wrbyte	#0, local05
0406c                 | '     cmd4_memoryY[i]           := 0
0406c     AF 88 02 FB | 	rdlong	local05, fp
04070     04 0E 06 F1 | 	add	objptr, #4
04074     07 89 02 F1 | 	add	local05, objptr
04078     44 01 48 FC | 	wrbyte	#0, local05
0407c                 | '     cmd4_memoryX[i]           := 0
0407c     AF 88 02 FB | 	rdlong	local05, fp
04080     04 0E 06 F1 | 	add	objptr, #4
04084     07 89 02 F1 | 	add	local05, objptr
04088     44 01 48 FC | 	wrbyte	#0, local05
0408c                 | '     cmd7_memoryY[i]           := 0
0408c     AF 88 02 FB | 	rdlong	local05, fp
04090     04 0E 06 F1 | 	add	objptr, #4
04094     07 89 02 F1 | 	add	local05, objptr
04098     44 01 48 FC | 	wrbyte	#0, local05
0409c                 | '     cmd7_memoryX[i]           := 0
0409c     AF 88 02 FB | 	rdlong	local05, fp
040a0     04 0E 06 F1 | 	add	objptr, #4
040a4     07 89 02 F1 | 	add	local05, objptr
040a8     44 01 48 FC | 	wrbyte	#0, local05
040ac                 | '     cmd9_memoryZ[i]           := 0
040ac     AF 88 02 FB | 	rdlong	local05, fp
040b0     04 0E 06 F1 | 	add	objptr, #4
040b4     07 89 02 F1 | 	add	local05, objptr
040b8     44 01 48 FC | 	wrbyte	#0, local05
040bc                 | '     cmdE6_memory[i]           := 0
040bc     AF 88 02 FB | 	rdlong	local05, fp
040c0     0D 0E 06 F1 | 	add	objptr, #13
040c4     07 89 02 F1 | 	add	local05, objptr
040c8     44 01 48 FC | 	wrbyte	#0, local05
040cc                 | '     cmdE6_counter[i]          := 0
040cc     AF 88 02 FB | 	rdlong	local05, fp
040d0     04 0E 06 F1 | 	add	objptr, #4
040d4     07 89 02 F1 | 	add	local05, objptr
040d8     44 01 48 FC | 	wrbyte	#0, local05
040dc                 | '     cmdE6_updatePosition[i]   := false
040dc     AF 88 02 FB | 	rdlong	local05, fp
040e0     04 0E 06 F1 | 	add	objptr, #4
040e4     07 89 02 F1 | 	add	local05, objptr
040e8     44 01 48 FC | 	wrbyte	#0, local05
040ec                 | '     sampleNumber_memory[i]    := 0
040ec     AF 88 02 FB | 	rdlong	local05, fp
040f0     11 0E 86 F1 | 	sub	objptr, #17
040f4     07 89 02 F1 | 	add	local05, objptr
040f8     44 01 48 FC | 	wrbyte	#0, local05
040fc                 | '     vibratoPos[i]             := 0
040fc     AF 88 02 FB | 	rdlong	local05, fp
04100     59 0E 86 F1 | 	sub	objptr, #89
04104     07 89 02 F1 | 	add	local05, objptr
04108     44 01 48 FC | 	wrbyte	#0, local05
0410c                 | '     portamentoPeriodMemory[i] := 0
0410c     AF 88 02 FB | 	rdlong	local05, fp
04110     02 88 66 F0 | 	shl	local05, #2
04114     10 0E 06 F1 | 	add	objptr, #16
04118     07 89 02 F1 | 	add	local05, objptr
0411c     44 01 68 FC | 	wrlong	#0, local05
04120                 | '     portaGlissando[i]         := 0
04120     AF 88 02 FB | 	rdlong	local05, fp
04124     25 0E 06 F1 | 	add	objptr, #37
04128     07 89 02 F1 | 	add	local05, objptr
0412c     44 01 48 FC | 	wrbyte	#0, local05
04130                 | '     vibratoType[i]            := 0
04130     AF 88 02 FB | 	rdlong	local05, fp
04134     04 0E 06 F1 | 	add	objptr, #4
04138     07 89 02 F1 | 	add	local05, objptr
0413c     44 01 48 FC | 	wrbyte	#0, local05
04140                 | '     tremoloType[i]            := 0
04140     AF 88 02 FB | 	rdlong	local05, fp
04144     04 0E 06 F1 | 	add	objptr, #4
04148     07 89 02 F1 | 	add	local05, objptr
0414c     44 01 48 FC | 	wrbyte	#0, local05
04150                 | '     tremoloPos[i]             := 0
04150     AF 88 02 FB | 	rdlong	local05, fp
04154     39 0E 86 F1 | 	sub	objptr, #57
04158     07 89 02 F1 | 	add	local05, objptr
0415c     44 01 48 FC | 	wrbyte	#0, local05
04160                 | '     deltaVolume[i]            := 0
04160     AF 88 02 FB | 	rdlong	local05, fp
04164     02 88 66 F0 | 	shl	local05, #2
04168     7C 0E 86 F1 | 	sub	objptr, #124
0416c     07 89 02 F1 | 	add	local05, objptr
04170     44 01 68 FC | 	wrlong	#0, local05
04174                 | '     deltaPeriod[i]            := 0
04174     AF 88 02 FB | 	rdlong	local05, fp
04178     02 88 66 F0 | 	shl	local05, #2
0417c     20 0E 86 F1 | 	sub	objptr, #32
04180     07 89 02 F1 | 	add	local05, objptr
04184     44 01 68 FC | 	wrlong	#0, local05
04188                 | '     resetTremolo[i]           := 0
04188     AF 88 02 FB | 	rdlong	local05, fp
0418c     A0 0E 06 F1 | 	add	objptr, #160
04190     07 89 02 F1 | 	add	local05, objptr
04194     44 01 48 FC | 	wrbyte	#0, local05
04198                 | '     resetVibrato[i]           := 0
04198     AF 88 02 FB | 	rdlong	local05, fp
0419c     04 0E 06 F1 | 	add	objptr, #4
041a0     07 89 02 F1 | 	add	local05, objptr
041a4     44 01 48 FC | 	wrbyte	#0, local05
041a8     AF 88 02 FB | 	rdlong	local05, fp
041ac     01 88 06 F1 | 	add	local05, #1
041b0     AF 88 62 FC | 	wrlong	local05, fp
041b4     08 5E 85 F1 | 	sub	fp, #8
041b8     04 88 5E F2 | 	cmps	local05, #4 wcz
041bc     93 0F 86 F1 | 	sub	objptr, #403
041c0     80 FD 9F CD |  if_b	jmp	#LR__0134
041c4     AF F0 03 F6 | 	mov	ptra, fp
041c8     BF 00 A0 FD | 	call	#popregs_
041cc                 | _trackerplayer_spin2_initModule_ret
041cc     2D 00 64 FD | 	ret
041d0                 | 
041d0                 | ' 
041d0                 | ' 
041d0                 | ' ' This routine needs to be ticked X number of times per second
041d0                 | ' ' in order to advance the tracker play routine
041d0                 | ' '
041d0                 | ' PUB tick() | channel, sampleNumber, period, effect, i
041d0                 | _trackerplayer_spin2_tick
041d0     05 5A 05 F6 | 	mov	COUNT_, #5
041d4     B0 00 A0 FD | 	call	#pushregs_
041d8     14 F0 07 F1 | 	add	ptra, #20
041dc                 | ' 
041dc                 | '   if currentSongSpeed == 0
041dc     A4 0E 06 F1 | 	add	objptr, #164
041e0     07 81 CA FA | 	rdbyte	local01, objptr wz
041e4     A4 0E 86 F1 | 	sub	objptr, #164
041e8                 | '     return
041e8     88 02 90 AD |  if_e	jmp	#LR__0146
041ec                 | ' 
041ec                 | '   ' Iterate over the channels and process everything
041ec                 | '   repeat channel from 0 to LAST_CHANNEL
041ec     AF 00 68 FC | 	wrlong	#0, fp
041f0                 | LR__0135
041f0                 | ' 
041f0                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
041f0     AF 72 02 FB | 	rdlong	arg01, fp
041f4     A3 0E 06 F1 | 	add	objptr, #163
041f8     07 75 C2 FA | 	rdbyte	arg02, objptr
041fc     01 0E 86 F1 | 	sub	objptr, #1
04200     07 77 C2 FA | 	rdbyte	arg03, objptr
04204     A2 0E 86 F1 | 	sub	objptr, #162
04208     04 5E 05 F1 | 	add	fp, #4
0420c     AF 78 02 F6 | 	mov	arg04, fp
04210     04 5E 05 F1 | 	add	fp, #4
04214     AF 7A 02 F6 | 	mov	arg05, fp
04218     04 5E 05 F1 | 	add	fp, #4
0421c     AF 7C 02 F6 | 	mov	arg06, fp
04220     0C 5E 85 F1 | 	sub	fp, #12
04224     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
04228                 | '     processChannel(channel, sampleNumber, period, effect)
04228     AF 72 02 FB | 	rdlong	arg01, fp
0422c     04 5E 05 F1 | 	add	fp, #4
04230     AF 74 02 FB | 	rdlong	arg02, fp
04234     04 5E 05 F1 | 	add	fp, #4
04238     AF 76 02 FB | 	rdlong	arg03, fp
0423c     04 5E 05 F1 | 	add	fp, #4
04240     AF 78 02 FB | 	rdlong	arg04, fp
04244     0C 5E 85 F1 | 	sub	fp, #12
04248     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
0424c     AF 82 02 FB | 	rdlong	local02, fp
04250     01 82 06 F1 | 	add	local02, #1
04254     AF 82 62 FC | 	wrlong	local02, fp
04258     04 82 5E F2 | 	cmps	local02, #4 wcz
0425c     90 FF 9F CD |  if_b	jmp	#LR__0135
04260                 | ' 
04260                 | '   ' Incrementation the main counter that drives the whole play routine
04260                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04260     A1 0E 06 F1 | 	add	objptr, #161
04264     07 81 C2 FA | 	rdbyte	local01, objptr
04268     01 80 06 F1 | 	add	local01, #1
0426c     07 81 42 FC | 	wrbyte	local01, objptr
04270     03 0E 06 F1 | 	add	objptr, #3
04274     07 85 C2 FA | 	rdbyte	local03, objptr
04278     01 0E 06 F1 | 	add	objptr, #1
0427c     07 87 C2 FA | 	rdbyte	local04, objptr
04280     43 85 02 F1 | 	add	local03, local04
04284     04 0E 86 F1 | 	sub	objptr, #4
04288     07 89 C2 FA | 	rdbyte	local05, objptr
0428c     A1 0E 86 F1 | 	sub	objptr, #161
04290     42 89 5A F2 | 	cmps	local05, local03 wcz
04294                 | '     tickCounter := 0
04294     A1 0E 06 31 |  if_ae	add	objptr, #161
04298     07 01 48 3C |  if_ae	wrbyte	#0, objptr
0429c     A1 0E 86 31 |  if_ae	sub	objptr, #161
042a0                 | ' 
042a0                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
042a0                 | '   if tickCounter == 0
042a0     A1 0E 06 F1 | 	add	objptr, #161
042a4     07 81 CA FA | 	rdbyte	local01, objptr wz
042a8     A1 0E 86 F1 | 	sub	objptr, #161
042ac     C4 01 90 5D |  if_ne	jmp	#LR__0145
042b0                 | ' 
042b0                 | '     ' Handle the "pattern repeat" command, "E6"
042b0                 | '     if cmdE6_updatePositionCommon
042b0     F5 0F 06 F1 | 	add	objptr, #501
042b4     07 81 CA FA | 	rdbyte	local01, objptr wz
042b8     F5 0F 86 F1 | 	sub	objptr, #501
042bc     8C 00 90 AD |  if_e	jmp	#LR__0139
042c0                 | '       repeat i from 0 to LAST_CHANNEL
042c0     10 5E 05 F1 | 	add	fp, #16
042c4     AF 00 68 FC | 	wrlong	#0, fp
042c8     10 5E 85 F1 | 	sub	fp, #16
042cc     A4 BD 9F FE | 	loc	pa,	#(@LR__0138-@LR__0136)
042d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
042d4                 | LR__0136
042d4                 | '         if cmdE6_updatePosition[i]
042d4     10 5E 05 F1 | 	add	fp, #16
042d8     AF 82 02 FB | 	rdlong	local02, fp
042dc     10 5E 85 F1 | 	sub	fp, #16
042e0     F1 0F 06 F1 | 	add	objptr, #497
042e4     07 83 02 F1 | 	add	local02, objptr
042e8     41 87 CA FA | 	rdbyte	local04, local02 wz
042ec     F1 0F 86 F1 | 	sub	objptr, #497
042f0     24 00 90 AD |  if_e	jmp	#LR__0137
042f4                 | '           patternRow := cmdE6_memory[i]
042f4     10 5E 05 F1 | 	add	fp, #16
042f8     AF 82 02 FB | 	rdlong	local02, fp
042fc     10 5E 85 F1 | 	sub	fp, #16
04300     E9 0F 06 F1 | 	add	objptr, #489
04304     07 83 02 F1 | 	add	local02, objptr
04308     41 87 C2 FA | 	rdbyte	local04, local02
0430c     47 0F 86 F1 | 	sub	objptr, #327
04310     07 87 42 FC | 	wrbyte	local04, objptr
04314     A2 0E 86 F1 | 	sub	objptr, #162
04318                 | LR__0137
04318                 | '         cmdE6_updatePosition[i] := false
04318     10 5E 05 F1 | 	add	fp, #16
0431c     AF 82 02 FB | 	rdlong	local02, fp
04320     F1 0F 06 F1 | 	add	objptr, #497
04324     07 83 02 F1 | 	add	local02, objptr
04328     41 01 48 FC | 	wrbyte	#0, local02
0432c     AF 82 02 FB | 	rdlong	local02, fp
04330     01 82 06 F1 | 	add	local02, #1
04334     AF 82 62 FC | 	wrlong	local02, fp
04338     10 5E 85 F1 | 	sub	fp, #16
0433c     04 82 5E F2 | 	cmps	local02, #4 wcz
04340     F1 0F 86 F1 | 	sub	objptr, #497
04344     8C FF 9F CD |  if_b	jmp	#LR__0136
04348                 | LR__0138
04348     CC 00 90 FD | 	jmp	#LR__0143
0434c                 | LR__0139
0434c                 | ' 
0434c                 | '     ' Handle the "skip to next pattern with offset command", "D"
0434c                 | '     elseif cmdD_updatePosition
0434c     E6 0F 06 F1 | 	add	objptr, #486
04350     07 81 CA FA | 	rdbyte	local01, objptr wz
04354     E6 0F 86 F1 | 	sub	objptr, #486
04358     64 00 90 AD |  if_e	jmp	#LR__0140
0435c                 | '       if ++songPosition >= songLength
0435c     A3 0E 06 F1 | 	add	objptr, #163
04360     07 81 C2 FA | 	rdbyte	local01, objptr
04364     01 80 06 F1 | 	add	local01, #1
04368     07 81 42 FC | 	wrbyte	local01, objptr
0436c     07 85 C2 FA | 	rdbyte	local03, objptr
04370     09 0E 86 F1 | 	sub	objptr, #9
04374     07 87 C2 FA | 	rdbyte	local04, objptr
04378     9A 0E 86 F1 | 	sub	objptr, #154
0437c     43 85 5A F2 | 	cmps	local03, local04 wcz
04380                 | '         songPosition := 0
04380     A3 0E 06 31 |  if_ae	add	objptr, #163
04384     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04388     A3 0E 86 31 |  if_ae	sub	objptr, #163
0438c                 | ' 
0438c                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
0438c     E4 0F 06 F1 | 	add	objptr, #484
04390     07 85 C2 FA | 	rdbyte	local03, objptr
04394     42 81 02 F6 | 	mov	local01, local03
04398     02 80 66 F0 | 	shl	local01, #2
0439c     42 81 02 F1 | 	add	local01, local03
043a0     01 80 66 F0 | 	shl	local01, #1
043a4     01 0E 06 F1 | 	add	objptr, #1
043a8     07 87 C2 FA | 	rdbyte	local04, objptr
043ac     43 81 02 F1 | 	add	local01, local04
043b0     43 0F 86 F1 | 	sub	objptr, #323
043b4     07 81 42 FC | 	wrbyte	local01, objptr
043b8     A2 0E 86 F1 | 	sub	objptr, #162
043bc                 | ' 
043bc                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
043bc                 | '     else
043bc     58 00 90 FD | 	jmp	#LR__0142
043c0                 | LR__0140
043c0                 | '       if ++patternRow >= PATTERN_LENGTH
043c0     A2 0E 06 F1 | 	add	objptr, #162
043c4     07 81 C2 FA | 	rdbyte	local01, objptr
043c8     01 80 06 F1 | 	add	local01, #1
043cc     07 81 42 FC | 	wrbyte	local01, objptr
043d0     07 85 C2 FA | 	rdbyte	local03, objptr
043d4     A2 0E 86 F1 | 	sub	objptr, #162
043d8     40 84 5E F2 | 	cmps	local03, #64 wcz
043dc     38 00 90 CD |  if_b	jmp	#LR__0141
043e0                 | '         patternRow := 0
043e0     A2 0E 06 F1 | 	add	objptr, #162
043e4     07 01 48 FC | 	wrbyte	#0, objptr
043e8                 | ' 
043e8                 | '         if ++songPosition >= songLength
043e8     01 0E 06 F1 | 	add	objptr, #1
043ec     07 81 C2 FA | 	rdbyte	local01, objptr
043f0     01 80 06 F1 | 	add	local01, #1
043f4     07 81 42 FC | 	wrbyte	local01, objptr
043f8     07 85 C2 FA | 	rdbyte	local03, objptr
043fc     09 0E 86 F1 | 	sub	objptr, #9
04400     07 87 C2 FA | 	rdbyte	local04, objptr
04404     9A 0E 86 F1 | 	sub	objptr, #154
04408     43 85 5A F2 | 	cmps	local03, local04 wcz
0440c                 | '           songPosition := 0
0440c     A3 0E 06 31 |  if_ae	add	objptr, #163
04410     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04414     A3 0E 86 31 |  if_ae	sub	objptr, #163
04418                 | LR__0141
04418                 | LR__0142
04418                 | LR__0143
04418                 | ' 
04418                 | '     ' Handle "jump to song position" command, "B"
04418                 | '     if cmdB_updatePosition
04418     E8 0F 06 F1 | 	add	objptr, #488
0441c     07 81 CA FA | 	rdbyte	local01, objptr wz
04420     E8 0F 86 F1 | 	sub	objptr, #488
04424     28 00 90 AD |  if_e	jmp	#LR__0144
04428                 | ' 
04428                 | '       songPosition := cmdB_memoryZ
04428     E7 0F 06 F1 | 	add	objptr, #487
0442c     07 81 C2 FA | 	rdbyte	local01, objptr
04430     44 0F 86 F1 | 	sub	objptr, #324
04434     07 81 42 FC | 	wrbyte	local01, objptr
04438                 | ' 
04438                 | '       ifnot cmdD_updatePosition
04438     43 0F 06 F1 | 	add	objptr, #323
0443c     07 81 CA FA | 	rdbyte	local01, objptr wz
04440     E6 0F 86 F1 | 	sub	objptr, #486
04444                 | '         patternRow := 0
04444     A2 0E 06 A1 |  if_e	add	objptr, #162
04448     07 01 48 AC |  if_e	wrbyte	#0, objptr
0444c     A2 0E 86 A1 |  if_e	sub	objptr, #162
04450                 | LR__0144
04450                 | ' 
04450                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04450                 | '     cmdE6_updatePositionCommon := false
04450     F5 0F 06 F1 | 	add	objptr, #501
04454     07 01 48 FC | 	wrbyte	#0, objptr
04458                 | '     cmdB_updatePosition := false
04458     0D 0E 86 F1 | 	sub	objptr, #13
0445c     07 01 48 FC | 	wrbyte	#0, objptr
04460                 | '     cmdD_updatePosition := false
04460     02 0E 86 F1 | 	sub	objptr, #2
04464     07 01 48 FC | 	wrbyte	#0, objptr
04468                 | '     patternDelay := 0
04468     41 0F 86 F1 | 	sub	objptr, #321
0446c     07 01 48 FC | 	wrbyte	#0, objptr
04470     A5 0E 86 F1 | 	sub	objptr, #165
04474                 | LR__0145
04474                 | LR__0146
04474     AF F0 03 F6 | 	mov	ptra, fp
04478     BF 00 A0 FD | 	call	#popregs_
0447c                 | _trackerplayer_spin2_tick_ret
0447c     2D 00 64 FD | 	ret
04480                 | 
04480                 | ' 
04480                 | ' 
04480                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04480                 | _trackerplayer_spin2_amigaPeriodToNote
04480                 | ' 
04480                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04480     00 32 06 F6 | 	mov	_var01, #0
04484     C4 BB 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
04488     93 00 A0 FD | 	call	#FCACHE_LOAD_
0448c                 | LR__0147
0448c                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
0448c     06 00 00 FF 
04490     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04494     14 35 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04498     3A 37 02 F6 | 	mov	_var03, arg02
0449c     03 36 66 F0 | 	shl	_var03, #3
044a0     3A 37 02 F1 | 	add	_var03, arg02
044a4     03 36 66 F0 | 	shl	_var03, #3
044a8     1B 35 02 F1 | 	add	_var02, _var03
044ac     19 39 02 F6 | 	mov	_var04, _var01
044b0     01 38 66 F0 | 	shl	_var04, #1
044b4     1A 39 02 F1 | 	add	_var04, _var02
044b8     1C 3B E2 FA | 	rdword	_var05, _var04
044bc     39 3B 5A F2 | 	cmps	_var05, arg01 wcz
044c0                 | '       quit
044c0     06 00 00 FF 
044c4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
044c8     0C 00 90 ED |  if_be	jmp	#LR__0149
044cc     01 32 06 F1 | 	add	_var01, #1
044d0     24 32 5E F2 | 	cmps	_var01, #36 wcz
044d4     B4 FF 9F CD |  if_b	jmp	#LR__0147
044d8                 | LR__0148
044d8                 | LR__0149
044d8                 | ' 
044d8                 | '   return i
044d8     19 2D 02 F6 | 	mov	result1, _var01
044dc                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044dc     2D 00 64 FD | 	ret
044e0                 | 
044e0                 | ' 
044e0                 | ' 
044e0                 | ' PRI retunePeriod(period, fTune) | noteNumber
044e0                 | _trackerplayer_spin2_retunePeriod
044e0     06 5A 05 F6 | 	mov	COUNT_, #6
044e4     B0 00 A0 FD | 	call	#pushregs_
044e8     39 81 02 F6 | 	mov	local01, arg01
044ec     3A 83 02 F6 | 	mov	local02, arg02
044f0                 | ' 
044f0                 | '   if period > 0 and fTune < 16
044f0     00 80 5E F2 | 	cmps	local01, #0 wcz
044f4     50 00 90 ED |  if_be	jmp	#LR__0150
044f8     10 82 5E F2 | 	cmps	local02, #16 wcz
044fc     48 00 90 3D |  if_ae	jmp	#LR__0150
04500                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
04500     40 73 E2 FA | 	rdword	arg01, local01
04504     00 74 06 F6 | 	mov	arg02, #0
04508     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
0450c     16 85 02 F6 | 	mov	local03, result1
04510                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
04510     06 00 00 FF 
04514     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04518     14 87 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
0451c     41 89 02 F6 | 	mov	local05, local02
04520     03 88 66 F0 | 	shl	local05, #3
04524     41 89 02 F1 | 	add	local05, local02
04528     03 88 66 F0 | 	shl	local05, #3
0452c     44 87 02 F1 | 	add	local04, local05
04530     01 84 66 F0 | 	shl	local03, #1
04534     43 85 02 F1 | 	add	local03, local04
04538     42 8B E2 FA | 	rdword	local06, local03
0453c     40 8B 52 FC | 	wrword	local06, local01
04540     06 00 00 FF 
04544     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04548                 | LR__0150
04548     AF F0 03 F6 | 	mov	ptra, fp
0454c     BF 00 A0 FD | 	call	#popregs_
04550                 | _trackerplayer_spin2_retunePeriod_ret
04550     2D 00 64 FD | 	ret
04554                 | 
04554                 | ' 
04554                 | ' 
04554                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04554                 | _trackerplayer_spin2_getSampleInfo
04554     39 33 0A F6 | 	mov	_var01, arg01 wz
04558                 | ' 
04558                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04558     08 00 90 AD |  if_e	jmp	#LR__0151
0455c     1F 32 5E F2 | 	cmps	_var01, #31 wcz
04560     08 00 90 ED |  if_be	jmp	#LR__0152
04564                 | LR__0151
04564                 | '     long[samplePtr] := 0
04564     3A 01 68 FC | 	wrlong	#0, arg02
04568                 | '     return
04568     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0456c                 | LR__0152
0456c                 | ' 
0456c                 | '   sampleNumber--
0456c     01 32 86 F1 | 	sub	_var01, #1
04570                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04570     0A 0E 06 F1 | 	add	objptr, #10
04574     07 35 02 FB | 	rdlong	_var02, objptr
04578     19 37 02 F6 | 	mov	_var03, _var01
0457c     04 36 66 F0 | 	shl	_var03, #4
04580     19 37 82 F1 | 	sub	_var03, _var01
04584     01 36 66 F0 | 	shl	_var03, #1
04588     1B 35 02 F1 | 	add	_var02, _var03
0458c                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
0458c     1A 39 02 F6 | 	mov	_var04, _var02
04590     16 38 06 F1 | 	add	_var04, #22
04594     1C 3B C2 FA | 	rdbyte	_var05, _var04
04598     08 3A 66 F0 | 	shl	_var05, #8
0459c     1A 37 02 F6 | 	mov	_var03, _var02
045a0     17 36 06 F1 | 	add	_var03, #23
045a4     1B 3D C2 FA | 	rdbyte	_var06, _var03
045a8     1E 3B 42 F5 | 	or	_var05, _var06
045ac     01 3A 66 F0 | 	shl	_var05, #1
045b0     3B 3B 62 FC | 	wrlong	_var05, arg03
045b4                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
045b4     1A 3B 02 F6 | 	mov	_var05, _var02
045b8     18 3A 06 F1 | 	add	_var05, #24
045bc     1D 39 C2 FA | 	rdbyte	_var04, _var05
045c0     3C 39 62 FC | 	wrlong	_var04, arg04
045c4                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
045c4     1A 3B 02 F6 | 	mov	_var05, _var02
045c8     19 3A 06 F1 | 	add	_var05, #25
045cc     1D 39 C2 FA | 	rdbyte	_var04, _var05
045d0     3D 39 62 FC | 	wrlong	_var04, arg05
045d4                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
045d4     1A 39 02 F6 | 	mov	_var04, _var02
045d8     1A 38 06 F1 | 	add	_var04, #26
045dc     1C 3B C2 FA | 	rdbyte	_var05, _var04
045e0     08 3A 66 F0 | 	shl	_var05, #8
045e4     1A 37 02 F6 | 	mov	_var03, _var02
045e8     1B 36 06 F1 | 	add	_var03, #27
045ec     1B 3D C2 FA | 	rdbyte	_var06, _var03
045f0     1E 3B 42 F5 | 	or	_var05, _var06
045f4     01 3A 66 F0 | 	shl	_var05, #1
045f8     3E 3B 62 FC | 	wrlong	_var05, arg06
045fc                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
045fc     1A 39 02 F6 | 	mov	_var04, _var02
04600     1C 38 06 F1 | 	add	_var04, #28
04604     1C 3B C2 FA | 	rdbyte	_var05, _var04
04608     08 3A 66 F0 | 	shl	_var05, #8
0460c     1D 34 06 F1 | 	add	_var02, #29
04610     1A 3D C2 FA | 	rdbyte	_var06, _var02
04614     1E 3B 42 F5 | 	or	_var05, _var06
04618     01 3A 66 F0 | 	shl	_var05, #1
0461c     3F 3B 62 FC | 	wrlong	_var05, arg07
04620                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
04620     02 32 66 F0 | 	shl	_var01, #2
04624     08 0E 06 F1 | 	add	objptr, #8
04628     07 33 02 F1 | 	add	_var01, objptr
0462c     19 37 02 FB | 	rdlong	_var03, _var01
04630     3A 37 62 FC | 	wrlong	_var03, arg02
04634                 | ' 
04634                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04634     3F 3B 02 FB | 	rdlong	_var05, arg07
04638     02 3A 0E F2 | 	cmp	_var05, #2 wz
0463c     12 0E 86 F1 | 	sub	objptr, #18
04640     08 00 90 5D |  if_ne	jmp	#LR__0153
04644     3E 39 0A FB | 	rdlong	_var04, arg06 wz
04648                 | '     long[repeatLength] := 1
04648     3F 03 68 AC |  if_e	wrlong	#1, arg07
0464c                 | LR__0153
0464c                 | _trackerplayer_spin2_getSampleInfo_ret
0464c     2D 00 64 FD | 	ret
04650                 | 
04650                 | ' 
04650                 | ' 
04650                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
04650                 | _trackerplayer_spin2_getNoteData
04650                 | ' 
04650                 | '   ' Get the note data for a specific channel/song position/pattern row
04650                 | '   patternNumber := byte[songPositionsLut][position & 127]
04650     96 0E 06 F1 | 	add	objptr, #150
04654     07 33 02 FB | 	rdlong	_var01, objptr
04658     7F 74 06 F5 | 	and	arg02, #127
0465c     19 75 02 F1 | 	add	arg02, _var01
04660     3A 35 C2 FA | 	rdbyte	_var02, arg02
04664                 | '   patternPtr    := patternsData + (patternNumber << 10)
04664     04 0E 86 F1 | 	sub	objptr, #4
04668     07 37 02 FB | 	rdlong	_var03, objptr
0466c     92 0E 86 F1 | 	sub	objptr, #146
04670     0A 34 66 F0 | 	shl	_var02, #10
04674     1A 37 02 F1 | 	add	_var03, _var02
04678                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04678     3F 76 06 F5 | 	and	arg03, #63
0467c     04 76 66 F0 | 	shl	arg03, #4
04680     3B 37 02 F1 | 	add	_var03, arg03
04684     03 72 06 F5 | 	and	arg01, #3
04688     02 72 66 F0 | 	shl	arg01, #2
0468c     39 37 02 F1 | 	add	_var03, arg01
04690                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04690     1B 39 C2 FA | 	rdbyte	_var04, _var03
04694     18 38 66 F0 | 	shl	_var04, #24
04698     01 36 06 F1 | 	add	_var03, #1
0469c     1B 3B C2 FA | 	rdbyte	_var05, _var03
046a0     10 3A 66 F0 | 	shl	_var05, #16
046a4     1D 39 42 F5 | 	or	_var04, _var05
046a8     01 36 06 F1 | 	add	_var03, #1
046ac     1B 3D C2 FA | 	rdbyte	_var06, _var03
046b0     08 3C 66 F0 | 	shl	_var06, #8
046b4     1E 39 42 F5 | 	or	_var04, _var06
046b8     01 36 06 F1 | 	add	_var03, #1
046bc     1B 3F C2 FA | 	rdbyte	_var07, _var03
046c0     1F 39 42 F5 | 	or	_var04, _var07
046c4                 | ' 
046c4                 | '   ' Extract the different sub parts from the data
046c4                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
046c4     1C 41 02 F6 | 	mov	_var08, _var04
046c8     0C 40 46 F0 | 	shr	_var08, #12
046cc     0F 40 06 F5 | 	and	_var08, #15
046d0     1C 3B 02 F6 | 	mov	_var05, _var04
046d4     18 3A 46 F0 | 	shr	_var05, #24
046d8     F0 3A 06 F5 | 	and	_var05, #240
046dc     1D 41 42 F5 | 	or	_var08, _var05
046e0     3C 41 62 FC | 	wrlong	_var08, arg04
046e4                 | '   long[period]       :=  (data >> 16) & $FFF
046e4     1C 41 02 F6 | 	mov	_var08, _var04
046e8     10 40 46 F0 | 	shr	_var08, #16
046ec     07 00 00 FF 
046f0     FF 41 06 F5 | 	and	_var08, ##4095
046f4     3D 41 62 FC | 	wrlong	_var08, arg05
046f8                 | '   long[effect]       :=   data & $FFF
046f8     07 00 00 FF 
046fc     FF 39 06 F5 | 	and	_var04, ##4095
04700     3E 39 62 FC | 	wrlong	_var04, arg06
04704                 | _trackerplayer_spin2_getNoteData_ret
04704     2D 00 64 FD | 	ret
04708                 | 
04708                 | ' 
04708                 | ' 
04708                 | ' PRI triggerNote(channel)
04708                 | _trackerplayer_spin2_triggerNote
04708                 | ' 
04708                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04708     39 33 02 F6 | 	mov	_var01, arg01
0470c     02 32 66 F0 | 	shl	_var01, #2
04710     47 0F 06 F1 | 	add	objptr, #327
04714     07 33 02 F1 | 	add	_var01, objptr
04718     39 35 02 F6 | 	mov	_var02, arg01
0471c     90 0E 86 F1 | 	sub	objptr, #144
04720     19 37 02 FB | 	rdlong	_var03, _var01
04724     07 35 02 F1 | 	add	_var02, objptr
04728     1A 37 42 FC | 	wrbyte	_var03, _var02
0472c                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
0472c     39 33 02 F6 | 	mov	_var01, arg01
04730     02 32 66 F0 | 	shl	_var01, #2
04734     80 0E 06 F1 | 	add	objptr, #128
04738     07 33 02 F1 | 	add	_var01, objptr
0473c     39 35 02 F6 | 	mov	_var02, arg01
04740     02 34 66 F0 | 	shl	_var02, #2
04744     90 0E 86 F1 | 	sub	objptr, #144
04748     19 37 02 FB | 	rdlong	_var03, _var01
0474c     07 35 02 F1 | 	add	_var02, objptr
04750     1A 37 62 FC | 	wrlong	_var03, _var02
04754                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04754     39 33 02 F6 | 	mov	_var01, arg01
04758     02 32 66 F0 | 	shl	_var01, #2
0475c     80 0E 06 F1 | 	add	objptr, #128
04760     07 33 02 F1 | 	add	_var01, objptr
04764     39 35 02 F6 | 	mov	_var02, arg01
04768     02 34 66 F0 | 	shl	_var02, #2
0476c     48 0E 86 F1 | 	sub	objptr, #72
04770     19 37 02 FB | 	rdlong	_var03, _var01
04774     07 35 02 F1 | 	add	_var02, objptr
04778     1A 37 62 FC | 	wrlong	_var03, _var02
0477c                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
0477c     39 33 02 F6 | 	mov	_var01, arg01
04780     02 32 66 F0 | 	shl	_var01, #2
04784     78 0E 06 F1 | 	add	objptr, #120
04788     07 33 02 F1 | 	add	_var01, objptr
0478c     39 39 02 F6 | 	mov	_var04, arg01
04790     01 38 66 F0 | 	shl	_var04, #1
04794     9C 0E 86 F1 | 	sub	objptr, #156
04798     19 3B 02 FB | 	rdlong	_var05, _var01
0479c     07 39 02 F1 | 	add	_var04, objptr
047a0     1C 3B 52 FC | 	wrword	_var05, _var04
047a4                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
047a4     39 33 02 F6 | 	mov	_var01, arg01
047a8     02 32 66 F0 | 	shl	_var01, #2
047ac     AC 0E 06 F1 | 	add	objptr, #172
047b0     07 33 02 F1 | 	add	_var01, objptr
047b4     39 35 02 F6 | 	mov	_var02, arg01
047b8     02 34 66 F0 | 	shl	_var02, #2
047bc     A4 0E 86 F1 | 	sub	objptr, #164
047c0     19 37 02 FB | 	rdlong	_var03, _var01
047c4     07 35 02 F1 | 	add	_var02, objptr
047c8     1A 37 62 FC | 	wrlong	_var03, _var02
047cc                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
047cc     39 33 02 F6 | 	mov	_var01, arg01
047d0     02 32 66 F0 | 	shl	_var01, #2
047d4     B4 0E 06 F1 | 	add	objptr, #180
047d8     07 33 02 F1 | 	add	_var01, objptr
047dc     39 39 02 F6 | 	mov	_var04, arg01
047e0     01 38 66 F0 | 	shl	_var04, #1
047e4     A0 0E 86 F1 | 	sub	objptr, #160
047e8     19 3B 02 FB | 	rdlong	_var05, _var01
047ec     07 39 02 F1 | 	add	_var04, objptr
047f0     1C 3B 52 FC | 	wrword	_var05, _var04
047f4                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
047f4     39 3D 02 F6 | 	mov	_var06, arg01
047f8     1F 0F 06 F1 | 	add	objptr, #287
047fc     07 3D 02 F1 | 	add	_var06, objptr
04800     1E 33 C2 FA | 	rdbyte	_var01, _var06
04804     01 32 06 F1 | 	add	_var01, #1
04808     07 73 02 F1 | 	add	arg01, objptr
0480c     39 33 42 FC | 	wrbyte	_var01, arg01
04810     F6 0F 86 F1 | 	sub	objptr, #502
04814                 | _trackerplayer_spin2_triggerNote_ret
04814     2D 00 64 FD | 	ret
04818                 | 
04818                 | ' 
04818                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04818                 | _trackerplayer_spin2_processChannel
04818     0F 5A 05 F6 | 	mov	COUNT_, #15
0481c     B0 00 A0 FD | 	call	#pushregs_
04820     24 F0 07 F1 | 	add	ptra, #36
04824     AF 72 62 FC | 	wrlong	arg01, fp
04828     04 5E 05 F1 | 	add	fp, #4
0482c     AF 74 62 FC | 	wrlong	arg02, fp
04830     04 5E 05 F1 | 	add	fp, #4
04834     AF 76 62 FC | 	wrlong	arg03, fp
04838     04 5E 05 F1 | 	add	fp, #4
0483c     AF 78 62 FC | 	wrlong	arg04, fp
04840     0C 5E 85 F1 | 	sub	fp, #12
04844                 | ' 
04844                 | '   channel := channel & 3
04844     AF 80 02 FB | 	rdlong	local01, fp
04848     03 80 06 F5 | 	and	local01, #3
0484c     AF 80 62 FC | 	wrlong	local01, fp
04850                 | '   cmd     := (effect >> 8) & $F
04850     0C 5E 05 F1 | 	add	fp, #12
04854     AF 80 02 FB | 	rdlong	local01, fp
04858     08 80 46 F0 | 	shr	local01, #8
0485c     0F 80 06 F5 | 	and	local01, #15
04860     BA 0F 06 F1 | 	add	objptr, #442
04864     07 81 42 FC | 	wrbyte	local01, objptr
04868                 | '   x       := (effect >> 4) & $F
04868     AF 80 02 FB | 	rdlong	local01, fp
0486c     04 80 46 F0 | 	shr	local01, #4
04870     0F 80 06 F5 | 	and	local01, #15
04874     03 0E 86 F1 | 	sub	objptr, #3
04878     07 81 42 FC | 	wrbyte	local01, objptr
0487c                 | '   y       := (effect     ) & $F
0487c     AF 80 02 FB | 	rdlong	local01, fp
04880     0F 80 06 F5 | 	and	local01, #15
04884     01 0E 06 F1 | 	add	objptr, #1
04888     07 81 42 FC | 	wrbyte	local01, objptr
0488c                 | '   z       := (effect     ) & $FF
0488c     AF 80 02 FB | 	rdlong	local01, fp
04890     0C 5E 85 F1 | 	sub	fp, #12
04894     FF 80 06 F5 | 	and	local01, #255
04898     01 0E 06 F1 | 	add	objptr, #1
0489c     07 81 42 FC | 	wrbyte	local01, objptr
048a0                 | ' 
048a0                 | '   ' Handle everything that executes on "tick zero"
048a0                 | '   if tickCounter == 0
048a0     18 0F 86 F1 | 	sub	objptr, #280
048a4     07 81 CA FA | 	rdbyte	local01, objptr wz
048a8     A1 0E 86 F1 | 	sub	objptr, #161
048ac     F8 03 90 5D |  if_ne	jmp	#LR__0164
048b0                 | ' 
048b0                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
048b0                 | '     deltaPeriod[channel] := 0
048b0     AF 80 02 FB | 	rdlong	local01, fp
048b4     02 80 66 F0 | 	shl	local01, #2
048b8     EF 0E 06 F1 | 	add	objptr, #239
048bc     07 81 02 F1 | 	add	local01, objptr
048c0     40 01 68 FC | 	wrlong	#0, local01
048c4                 | '     deltaVolume[channel] := 0
048c4     AF 80 02 FB | 	rdlong	local01, fp
048c8     02 80 66 F0 | 	shl	local01, #2
048cc     20 0E 06 F1 | 	add	objptr, #32
048d0     07 81 02 F1 | 	add	local01, objptr
048d4     40 01 68 FC | 	wrlong	#0, local01
048d8                 | ' 
048d8                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
048d8                 | '     if sampleNumber > 0
048d8     04 5E 05 F1 | 	add	fp, #4
048dc     AF 80 02 FB | 	rdlong	local01, fp
048e0     04 5E 85 F1 | 	sub	fp, #4
048e4     00 80 5E F2 | 	cmps	local01, #0 wcz
048e8     0F 0F 86 F1 | 	sub	objptr, #271
048ec     20 00 90 ED |  if_be	jmp	#LR__0154
048f0                 | '       sampleNumber_memory[channel] := sampleNumber
048f0     AF 80 02 FB | 	rdlong	local01, fp
048f4     E0 0F 06 F1 | 	add	objptr, #480
048f8     07 81 02 F1 | 	add	local01, objptr
048fc     04 5E 05 F1 | 	add	fp, #4
04900     AF 82 02 FB | 	rdlong	local02, fp
04904     04 5E 85 F1 | 	sub	fp, #4
04908     40 83 42 FC | 	wrbyte	local02, local01
0490c     E0 0F 86 F1 | 	sub	objptr, #480
04910                 | LR__0154
04910                 | ' 
04910                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04910                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04910     AF 80 02 FB | 	rdlong	local01, fp
04914     E0 0F 06 F1 | 	add	objptr, #480
04918     07 81 02 F1 | 	add	local01, objptr
0491c     40 73 C2 FA | 	rdbyte	arg01, local01
04920     20 5E 05 F1 | 	add	fp, #32
04924     AF 74 02 F6 | 	mov	arg02, fp
04928     10 5E 85 F1 | 	sub	fp, #16
0492c     AF 84 02 F6 | 	mov	local03, fp
04930     31 0E 86 F1 | 	sub	objptr, #49
04934     07 87 02 F6 | 	mov	local04, objptr
04938     43 89 02 F6 | 	mov	local05, local04
0493c     04 5E 05 F1 | 	add	fp, #4
04940     AF 8A 02 F6 | 	mov	local06, fp
04944     45 8D 02 F6 | 	mov	local07, local06
04948     04 5E 05 F1 | 	add	fp, #4
0494c     AF 8E 02 F6 | 	mov	local08, fp
04950     47 91 02 F6 | 	mov	local09, local08
04954     04 5E 05 F1 | 	add	fp, #4
04958     AF 92 02 F6 | 	mov	local10, fp
0495c     49 95 02 F6 | 	mov	local11, local10
04960     42 77 02 F6 | 	mov	arg03, local03
04964     44 79 02 F6 | 	mov	arg04, local05
04968     46 7B 02 F6 | 	mov	arg05, local07
0496c     48 7D 02 F6 | 	mov	arg06, local09
04970     4A 7F 02 F6 | 	mov	arg07, local11
04974     AF 0F 86 F1 | 	sub	objptr, #431
04978     1C 5E 85 F1 | 	sub	fp, #28
0497c     D4 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04980                 | ' 
04980                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04980                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04980                 | '     if sampleNumber > 0
04980     04 5E 05 F1 | 	add	fp, #4
04984     AF 80 02 FB | 	rdlong	local01, fp
04988     04 5E 85 F1 | 	sub	fp, #4
0498c     00 80 5E F2 | 	cmps	local01, #0 wcz
04990     24 00 90 ED |  if_be	jmp	#LR__0155
04994                 | '       currVolume[channel] := volume
04994     AF 80 02 FB | 	rdlong	local01, fp
04998     02 80 66 F0 | 	shl	local01, #2
0499c     FF 0E 06 F1 | 	add	objptr, #255
049a0     07 81 02 F1 | 	add	local01, objptr
049a4     14 5E 05 F1 | 	add	fp, #20
049a8     AF 82 02 FB | 	rdlong	local02, fp
049ac     14 5E 85 F1 | 	sub	fp, #20
049b0     40 83 62 FC | 	wrlong	local02, local01
049b4     FF 0E 86 F1 | 	sub	objptr, #255
049b8                 | LR__0155
049b8                 | ' 
049b8                 | '     ' Handle all commands that executes on "zero tick"
049b8                 | '     sampleOffset := 0
049b8     B3 0F 06 F1 | 	add	objptr, #435
049bc     07 01 68 FC | 	wrlong	#0, objptr
049c0     B3 0F 86 F1 | 	sub	objptr, #435
049c4                 | '     handleZeroTickCommands(channel)
049c4     AF 72 02 FB | 	rdlong	arg01, fp
049c8     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
049cc                 | ' 
049cc                 | '     ' Prepare sample data for triggering (now or later)
049cc                 | '     if period > 0
049cc     08 5E 05 F1 | 	add	fp, #8
049d0     AF 80 02 FB | 	rdlong	local01, fp
049d4     08 5E 85 F1 | 	sub	fp, #8
049d8     00 80 5E F2 | 	cmps	local01, #0 wcz
049dc     D0 02 90 ED |  if_be	jmp	#LR__0165
049e0                 | ' 
049e0                 | '       retunePeriod(@period, fineTune)
049e0     08 5E 05 F1 | 	add	fp, #8
049e4     AF 72 02 F6 | 	mov	arg01, fp
049e8     08 5E 85 F1 | 	sub	fp, #8
049ec     AF 0F 06 F1 | 	add	objptr, #431
049f0     07 75 02 FB | 	rdlong	arg02, objptr
049f4     AF 0F 86 F1 | 	sub	objptr, #431
049f8     E4 FA BF FD | 	call	#_trackerplayer_spin2_retunePeriod
049fc                 | '       currFineTune[channel]        := fineTune
049fc     AF 80 02 FB | 	rdlong	local01, fp
04a00     D3 0E 06 F1 | 	add	objptr, #211
04a04     07 81 02 F1 | 	add	local01, objptr
04a08     DC 0E 06 F1 | 	add	objptr, #220
04a0c     07 83 02 FB | 	rdlong	local02, objptr
04a10     40 83 42 FC | 	wrbyte	local02, local01
04a14                 | '       lastSetPeriod[channel]       := period
04a14     AF 80 02 FB | 	rdlong	local01, fp
04a18     02 80 66 F0 | 	shl	local01, #2
04a1c     88 0E 86 F1 | 	sub	objptr, #136
04a20     07 81 02 F1 | 	add	local01, objptr
04a24     08 5E 05 F1 | 	add	fp, #8
04a28     AF 82 02 FB | 	rdlong	local02, fp
04a2c     40 83 62 FC | 	wrlong	local02, local01
04a30     08 5E 85 F1 | 	sub	fp, #8
04a34                 | '       lastSetRepeatLength[channel] := repeatLength
04a34     AF 80 02 FB | 	rdlong	local01, fp
04a38     02 80 66 F0 | 	shl	local01, #2
04a3c     40 0E 06 F1 | 	add	objptr, #64
04a40     07 81 02 F1 | 	add	local01, objptr
04a44     1C 5E 05 F1 | 	add	fp, #28
04a48     AF 82 02 FB | 	rdlong	local02, fp
04a4c     40 83 62 FC | 	wrlong	local02, local01
04a50     1C 5E 85 F1 | 	sub	fp, #28
04a54                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04a54     AF 80 02 FB | 	rdlong	local01, fp
04a58     02 80 66 F0 | 	shl	local01, #2
04a5c     10 0E 06 F1 | 	add	objptr, #16
04a60     07 81 02 F1 | 	add	local01, objptr
04a64     18 5E 05 F1 | 	add	fp, #24
04a68     AF 82 02 FB | 	rdlong	local02, fp
04a6c     40 83 62 FC | 	wrlong	local02, local01
04a70                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04a70     08 5E 05 F1 | 	add	fp, #8
04a74     AF 80 02 FB | 	rdlong	local01, fp
04a78     20 5E 85 F1 | 	sub	fp, #32
04a7c     3C 0E 06 F1 | 	add	objptr, #60
04a80     07 83 02 FB | 	rdlong	local02, objptr
04a84     41 81 02 F1 | 	add	local01, local02
04a88     AF 96 02 FB | 	rdlong	local12, fp
04a8c     02 96 66 F0 | 	shl	local12, #2
04a90     7C 0E 86 F1 | 	sub	objptr, #124
04a94     07 99 02 F6 | 	mov	local13, objptr
04a98     07 97 02 F1 | 	add	local12, objptr
04a9c     4B 81 62 FC | 	wrlong	local01, local12
04aa0                 | '       lastSetSampleNr[channel]     := sampleNumber
04aa0     AF 80 02 FB | 	rdlong	local01, fp
04aa4     02 80 66 F0 | 	shl	local01, #2
04aa8     10 0E 06 F1 | 	add	objptr, #16
04aac     07 81 02 F1 | 	add	local01, objptr
04ab0     04 5E 05 F1 | 	add	fp, #4
04ab4     AF 82 02 FB | 	rdlong	local02, fp
04ab8     40 83 62 FC | 	wrlong	local02, local01
04abc                 | ' 
04abc                 | '       ' This calculates the correct sample length in all situations
04abc                 | '       if repeatLength > 2
04abc     18 5E 05 F1 | 	add	fp, #24
04ac0     AF 80 02 FB | 	rdlong	local01, fp
04ac4     1C 5E 85 F1 | 	sub	fp, #28
04ac8     02 80 5E F2 | 	cmps	local01, #2 wcz
04acc     47 0F 86 F1 | 	sub	objptr, #327
04ad0     20 00 90 ED |  if_be	jmp	#LR__0156
04ad4                 | '         sampleLength := repeatPoint + repeatLength
04ad4     18 5E 05 F1 | 	add	fp, #24
04ad8     AF 80 02 FB | 	rdlong	local01, fp
04adc     04 5E 05 F1 | 	add	fp, #4
04ae0     AF 82 02 FB | 	rdlong	local02, fp
04ae4     41 81 02 F1 | 	add	local01, local02
04ae8     0C 5E 85 F1 | 	sub	fp, #12
04aec     AF 80 62 FC | 	wrlong	local01, fp
04af0     10 5E 85 F1 | 	sub	fp, #16
04af4                 | LR__0156
04af4                 | ' 
04af4                 | '       if sampleLength - sampleOffset < 1
04af4     10 5E 05 F1 | 	add	fp, #16
04af8     AF 80 02 FB | 	rdlong	local01, fp
04afc     10 5E 85 F1 | 	sub	fp, #16
04b00     B3 0F 06 F1 | 	add	objptr, #435
04b04     07 83 02 FB | 	rdlong	local02, objptr
04b08     B3 0F 86 F1 | 	sub	objptr, #435
04b0c     41 81 82 F1 | 	sub	local01, local02
04b10     01 80 5E F2 | 	cmps	local01, #1 wcz
04b14     1C 00 90 3D |  if_ae	jmp	#LR__0157
04b18                 | '         lastSetSampleLength[channel] := 1
04b18     AF 80 02 FB | 	rdlong	local01, fp
04b1c     02 80 66 F0 | 	shl	local01, #2
04b20     57 0F 06 F1 | 	add	objptr, #343
04b24     07 81 02 F1 | 	add	local01, objptr
04b28     40 03 68 FC | 	wrlong	#1, local01
04b2c                 | '       else
04b2c     57 0F 86 F1 | 	sub	objptr, #343
04b30     34 00 90 FD | 	jmp	#LR__0158
04b34                 | LR__0157
04b34                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04b34     10 5E 05 F1 | 	add	fp, #16
04b38     AF 80 02 FB | 	rdlong	local01, fp
04b3c     10 5E 85 F1 | 	sub	fp, #16
04b40     B3 0F 06 F1 | 	add	objptr, #435
04b44     07 83 02 FB | 	rdlong	local02, objptr
04b48     41 81 82 F1 | 	sub	local01, local02
04b4c     AF 96 02 FB | 	rdlong	local12, fp
04b50     02 96 66 F0 | 	shl	local12, #2
04b54     5C 0E 86 F1 | 	sub	objptr, #92
04b58     07 99 02 F6 | 	mov	local13, objptr
04b5c     07 97 02 F1 | 	add	local12, objptr
04b60     4B 81 62 FC | 	wrlong	local01, local12
04b64     57 0F 86 F1 | 	sub	objptr, #343
04b68                 | LR__0158
04b68                 | ' 
04b68                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04b68                 | '       if sampleOffset > sampleLength
04b68     B3 0F 06 F1 | 	add	objptr, #435
04b6c     07 81 02 FB | 	rdlong	local01, objptr
04b70     B3 0F 86 F1 | 	sub	objptr, #435
04b74     10 5E 05 F1 | 	add	fp, #16
04b78     AF 82 02 FB | 	rdlong	local02, fp
04b7c     10 5E 85 F1 | 	sub	fp, #16
04b80     41 81 5A F2 | 	cmps	local01, local02 wcz
04b84     54 00 90 ED |  if_be	jmp	#LR__0159
04b88                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04b88     20 5E 05 F1 | 	add	fp, #32
04b8c     AF 80 02 FB | 	rdlong	local01, fp
04b90     08 5E 85 F1 | 	sub	fp, #8
04b94     AF 82 02 FB | 	rdlong	local02, fp
04b98     18 5E 85 F1 | 	sub	fp, #24
04b9c     41 81 02 F1 | 	add	local01, local02
04ba0     AF 96 02 FB | 	rdlong	local12, fp
04ba4     02 96 66 F0 | 	shl	local12, #2
04ba8     37 0F 06 F1 | 	add	objptr, #311
04bac     07 99 02 F6 | 	mov	local13, objptr
04bb0     07 97 02 F1 | 	add	local12, objptr
04bb4     4B 81 62 FC | 	wrlong	local01, local12
04bb8                 | '         lastSetSampleLength[channel] := repeatLength
04bb8     AF 80 02 FB | 	rdlong	local01, fp
04bbc     02 80 66 F0 | 	shl	local01, #2
04bc0     20 0E 06 F1 | 	add	objptr, #32
04bc4     07 81 02 F1 | 	add	local01, objptr
04bc8     1C 5E 05 F1 | 	add	fp, #28
04bcc     AF 82 02 FB | 	rdlong	local02, fp
04bd0     1C 5E 85 F1 | 	sub	fp, #28
04bd4     40 83 62 FC | 	wrlong	local02, local01
04bd8     57 0F 86 F1 | 	sub	objptr, #343
04bdc                 | LR__0159
04bdc                 | ' 
04bdc                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04bdc                 | '       ifnot cmd == $3 || cmd == $5
04bdc     BA 0F 06 F1 | 	add	objptr, #442
04be0     07 81 C2 FA | 	rdbyte	local01, objptr
04be4     BA 0F 86 F1 | 	sub	objptr, #442
04be8     03 80 0E F2 | 	cmp	local01, #3 wz
04bec     54 00 90 AD |  if_e	jmp	#LR__0162
04bf0     BA 0F 06 F1 | 	add	objptr, #442
04bf4     07 9B C2 FA | 	rdbyte	local14, objptr
04bf8     BA 0F 86 F1 | 	sub	objptr, #442
04bfc     4D 83 02 F6 | 	mov	local02, local14
04c00     05 82 0E F2 | 	cmp	local02, #5 wz
04c04     3C 00 90 AD |  if_e	jmp	#LR__0162
04c08                 | '         ifnot cmd == $E && x == $D
04c08     BA 0F 06 F1 | 	add	objptr, #442
04c0c     07 9D C2 FA | 	rdbyte	local15, objptr
04c10     BA 0F 86 F1 | 	sub	objptr, #442
04c14     4E 81 02 F6 | 	mov	local01, local15
04c18     0E 80 0E F2 | 	cmp	local01, #14 wz
04c1c     18 00 90 5D |  if_ne	jmp	#LR__0160
04c20     B7 0F 06 F1 | 	add	objptr, #439
04c24     07 9B C2 FA | 	rdbyte	local14, objptr
04c28     B7 0F 86 F1 | 	sub	objptr, #439
04c2c     4D 83 02 F6 | 	mov	local02, local14
04c30     0D 82 0E F2 | 	cmp	local02, #13 wz
04c34     0C 00 90 AD |  if_e	jmp	#LR__0161
04c38                 | LR__0160
04c38                 | '           triggerNote(channel)
04c38     AF 80 02 FB | 	rdlong	local01, fp
04c3c     40 73 02 F6 | 	mov	arg01, local01
04c40     C4 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04c44                 | LR__0161
04c44                 | LR__0162
04c44                 | ' 
04c44                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04c44                 | '       if resetTremolo[channel] > 0
04c44     AF 80 02 FB | 	rdlong	local01, fp
04c48     8F 0F 06 F1 | 	add	objptr, #399
04c4c     07 81 02 F1 | 	add	local01, objptr
04c50     40 83 C2 FA | 	rdbyte	local02, local01
04c54     00 82 5E F2 | 	cmps	local02, #0 wcz
04c58     8F 0F 86 F1 | 	sub	objptr, #399
04c5c     14 00 90 ED |  if_be	jmp	#LR__0163
04c60                 | '         tremoloPos[channel] := 0
04c60     AF 80 02 FB | 	rdlong	local01, fp
04c64     8B 0F 06 F1 | 	add	objptr, #395
04c68     07 81 02 F1 | 	add	local01, objptr
04c6c     40 01 48 FC | 	wrbyte	#0, local01
04c70     8B 0F 86 F1 | 	sub	objptr, #395
04c74                 | LR__0163
04c74                 | ' 
04c74                 | '       if resetVibrato[channel] > 0
04c74     AF 80 02 FB | 	rdlong	local01, fp
04c78     93 0F 06 F1 | 	add	objptr, #403
04c7c     07 81 02 F1 | 	add	local01, objptr
04c80     40 83 C2 FA | 	rdbyte	local02, local01
04c84     00 82 5E F2 | 	cmps	local02, #0 wcz
04c88     93 0F 86 F1 | 	sub	objptr, #403
04c8c     20 00 90 ED |  if_be	jmp	#LR__0165
04c90                 | '         vibratoPos[channel] := 0
04c90     AF 80 02 FB | 	rdlong	local01, fp
04c94     87 0F 06 F1 | 	add	objptr, #391
04c98     07 81 02 F1 | 	add	local01, objptr
04c9c     40 01 48 FC | 	wrbyte	#0, local01
04ca0     87 0F 86 F1 | 	sub	objptr, #391
04ca4                 | ' 
04ca4                 | '   else
04ca4     08 00 90 FD | 	jmp	#LR__0165
04ca8                 | LR__0164
04ca8                 | '     ' Handle commands that executes on all "non zero ticks"
04ca8                 | '     handleNonZeroTickCommands(channel)
04ca8     AF 72 02 FB | 	rdlong	arg01, fp
04cac     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04cb0                 | LR__0165
04cb0                 | ' 
04cb0                 | '   ' Handle commands that executes on every tick
04cb0                 | '   handleEveryTickCommands(channel)
04cb0     AF 72 02 FB | 	rdlong	arg01, fp
04cb4     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04cb8                 | ' 
04cb8                 | '   ' Handle boundaries that should be kept
04cb8                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04cb8     AF 9C 02 FB | 	rdlong	local15, fp
04cbc     02 9C 66 F0 | 	shl	local15, #2
04cc0     DF 0E 06 F1 | 	add	objptr, #223
04cc4     07 9D 02 F1 | 	add	local15, objptr
04cc8     4E 81 02 FB | 	rdlong	local01, local15
04ccc     01 00 00 FF 
04cd0     58 81 66 F3 | 	fles	local01, ##856
04cd4     AF 9A 02 FB | 	rdlong	local14, fp
04cd8     02 9A 66 F0 | 	shl	local14, #2
04cdc     07 9B 02 F1 | 	add	local14, objptr
04ce0     4D 81 62 FC | 	wrlong	local01, local14
04ce4                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04ce4     AF 9C 02 FB | 	rdlong	local15, fp
04ce8     02 9C 66 F0 | 	shl	local15, #2
04cec     07 9D 02 F1 | 	add	local15, objptr
04cf0     4E 81 02 FB | 	rdlong	local01, local15
04cf4     71 80 46 F3 | 	fges	local01, #113
04cf8     AF 9A 02 FB | 	rdlong	local14, fp
04cfc     02 9A 66 F0 | 	shl	local14, #2
04d00     07 9B 02 F1 | 	add	local14, objptr
04d04     4D 81 62 FC | 	wrlong	local01, local14
04d08                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04d08     AF 9C 02 FB | 	rdlong	local15, fp
04d0c     02 9C 66 F0 | 	shl	local15, #2
04d10     20 0E 06 F1 | 	add	objptr, #32
04d14     07 9D 02 F1 | 	add	local15, objptr
04d18     4E 81 02 FB | 	rdlong	local01, local15
04d1c     40 80 66 F3 | 	fles	local01, #64
04d20     AF 9A 02 FB | 	rdlong	local14, fp
04d24     02 9A 66 F0 | 	shl	local14, #2
04d28     07 9B 02 F1 | 	add	local14, objptr
04d2c     4D 81 62 FC | 	wrlong	local01, local14
04d30                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04d30     AF 9C 02 FB | 	rdlong	local15, fp
04d34     02 9C 66 F0 | 	shl	local15, #2
04d38     07 9D 02 F1 | 	add	local15, objptr
04d3c     4E 81 02 FB | 	rdlong	local01, local15
04d40     00 80 46 F3 | 	fges	local01, #0
04d44     AF 9A 02 FB | 	rdlong	local14, fp
04d48     02 9A 66 F0 | 	shl	local14, #2
04d4c     07 9B 02 F1 | 	add	local14, objptr
04d50     4D 81 62 FC | 	wrlong	local01, local14
04d54     FF 0E 86 F1 | 	sub	objptr, #255
04d58     AF F0 03 F6 | 	mov	ptra, fp
04d5c     BF 00 A0 FD | 	call	#popregs_
04d60                 | _trackerplayer_spin2_processChannel_ret
04d60     2D 00 64 FD | 	ret
04d64                 | 
04d64                 | ' 
04d64                 | ' 
04d64                 | ' ' Handle all commands that executes on tick zero
04d64                 | ' '
04d64                 | ' PRI handleZeroTickCommands(channel)
04d64                 | _trackerplayer_spin2_handleZeroTickCommands
04d64     39 33 02 F6 | 	mov	_var01, arg01
04d68                 | ' 
04d68                 | '   CASE_FAST cmd
04d68     BA 0F 06 F1 | 	add	objptr, #442
04d6c     07 35 C2 FA | 	rdbyte	_var02, objptr
04d70     BA 0F 86 F1 | 	sub	objptr, #442
04d74     1A 37 02 F6 | 	mov	_var03, _var02
04d78     09 36 86 F1 | 	sub	_var03, #9
04d7c     07 36 26 F3 | 	fle	_var03, #7
04d80     1B 39 02 F6 | 	mov	_var04, _var03
04d84     30 38 62 FD | 	jmprel	_var04
04d88                 | LR__0166
04d88     1C 00 90 FD | 	jmp	#LR__0167
04d8c     30 04 90 FD | 	jmp	#LR__0190
04d90     64 00 90 FD | 	jmp	#LR__0169
04d94     84 00 90 FD | 	jmp	#LR__0170
04d98     A0 00 90 FD | 	jmp	#LR__0171
04d9c     D0 00 90 FD | 	jmp	#LR__0172
04da0     9C 03 90 FD | 	jmp	#LR__0187
04da4     18 04 90 FD | 	jmp	#LR__0190
04da8                 | LR__0167
04da8                 | ' 
04da8                 | '     $9:                          ' Set sample offset
04da8                 | '       if z > 0
04da8     B9 0F 06 F1 | 	add	objptr, #441
04dac     07 3B C2 FA | 	rdbyte	_var05, objptr
04db0     B9 0F 86 F1 | 	sub	objptr, #441
04db4     00 3A 5E F2 | 	cmps	_var05, #0 wcz
04db8     1C 00 90 ED |  if_be	jmp	#LR__0168
04dbc                 | '         cmd9_memoryZ[channel] := z
04dbc     19 3B 02 F6 | 	mov	_var05, _var01
04dc0     DC 0F 06 F1 | 	add	objptr, #476
04dc4     07 3B 02 F1 | 	add	_var05, objptr
04dc8     23 0E 86 F1 | 	sub	objptr, #35
04dcc     07 3D C2 FA | 	rdbyte	_var06, objptr
04dd0     B9 0F 86 F1 | 	sub	objptr, #441
04dd4     1D 3D 42 FC | 	wrbyte	_var06, _var05
04dd8                 | LR__0168
04dd8                 | ' 
04dd8                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04dd8     DC 0F 06 F1 | 	add	objptr, #476
04ddc     07 33 02 F1 | 	add	_var01, objptr
04de0     19 3B C2 FA | 	rdbyte	_var05, _var01
04de4     08 3A 66 F0 | 	shl	_var05, #8
04de8     29 0E 86 F1 | 	sub	objptr, #41
04dec     07 3B 62 FC | 	wrlong	_var05, objptr
04df0     B3 0F 86 F1 | 	sub	objptr, #435
04df4     C8 03 90 FD | 	jmp	#LR__0190
04df8                 | LR__0169
04df8                 | ' 
04df8                 | '     $B:                          ' Jump position
04df8                 | '       cmdB_memoryZ := z
04df8     B9 0F 06 F1 | 	add	objptr, #441
04dfc     07 3B C2 FA | 	rdbyte	_var05, objptr
04e00     2E 0E 06 F1 | 	add	objptr, #46
04e04     07 3B 42 FC | 	wrbyte	_var05, objptr
04e08                 | '       cmdB_updatePosition := true
04e08     01 0E 06 F1 | 	add	objptr, #1
04e0c     FF FF FF FF 
04e10     07 FF 4B FC | 	wrbyte	##-1, objptr
04e14     E8 0F 86 F1 | 	sub	objptr, #488
04e18     A4 03 90 FD | 	jmp	#LR__0190
04e1c                 | LR__0170
04e1c                 | ' 
04e1c                 | '     $C:                          ' Set volume
04e1c                 | '       currVolume[channel] := z
04e1c     02 32 66 F0 | 	shl	_var01, #2
04e20     FF 0E 06 F1 | 	add	objptr, #255
04e24     07 33 02 F1 | 	add	_var01, objptr
04e28     BA 0E 06 F1 | 	add	objptr, #186
04e2c     07 3D C2 FA | 	rdbyte	_var06, objptr
04e30     B9 0F 86 F1 | 	sub	objptr, #441
04e34     19 3D 62 FC | 	wrlong	_var06, _var01
04e38     84 03 90 FD | 	jmp	#LR__0190
04e3c                 | LR__0171
04e3c                 | ' 
04e3c                 | '     $D:                          ' Pattern break
04e3c                 | '       cmdD_memoryX := x
04e3c     B7 0F 06 F1 | 	add	objptr, #439
04e40     07 3B C2 FA | 	rdbyte	_var05, objptr
04e44     2D 0E 06 F1 | 	add	objptr, #45
04e48     07 3B 42 FC | 	wrbyte	_var05, objptr
04e4c                 | '       cmdD_memoryY := y
04e4c     2C 0E 86 F1 | 	sub	objptr, #44
04e50     07 3B C2 FA | 	rdbyte	_var05, objptr
04e54     2D 0E 06 F1 | 	add	objptr, #45
04e58     07 3B 42 FC | 	wrbyte	_var05, objptr
04e5c                 | '       cmdD_updatePosition := true
04e5c     01 0E 06 F1 | 	add	objptr, #1
04e60     FF FF FF FF 
04e64     07 FF 4B FC | 	wrbyte	##-1, objptr
04e68     E6 0F 86 F1 | 	sub	objptr, #486
04e6c     50 03 90 FD | 	jmp	#LR__0190
04e70                 | LR__0172
04e70                 | ' 
04e70                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04e70                 | ' 
04e70                 | '       CASE_FAST x
04e70     B7 0F 06 F1 | 	add	objptr, #439
04e74     07 3F C2 FA | 	rdbyte	_var07, objptr
04e78     B7 0F 86 F1 | 	sub	objptr, #439
04e7c     1F 3B 02 F6 | 	mov	_var05, _var07
04e80     0F 3A 26 F3 | 	fle	_var05, #15
04e84     1D 41 02 F6 | 	mov	_var08, _var05
04e88     30 40 62 FD | 	jmprel	_var08
04e8c                 | LR__0173
04e8c     3C 00 90 FD | 	jmp	#LR__0174
04e90     58 00 90 FD | 	jmp	#LR__0175
04e94     8C 00 90 FD | 	jmp	#LR__0176
04e98     C0 00 90 FD | 	jmp	#LR__0177
04e9c     DC 00 90 FD | 	jmp	#LR__0178
04ea0     14 01 90 FD | 	jmp	#LR__0179
04ea4     28 01 90 FD | 	jmp	#LR__0180
04ea8     C0 01 90 FD | 	jmp	#LR__0183
04eac     10 03 90 FD | 	jmp	#LR__0190
04eb0     0C 03 90 FD | 	jmp	#LR__0190
04eb4     F0 01 90 FD | 	jmp	#LR__0184
04eb8     24 02 90 FD | 	jmp	#LR__0185
04ebc     00 03 90 FD | 	jmp	#LR__0190
04ec0     FC 02 90 FD | 	jmp	#LR__0190
04ec4     50 02 90 FD | 	jmp	#LR__0186
04ec8     F4 02 90 FD | 	jmp	#LR__0190
04ecc                 | LR__0174
04ecc                 | ' 
04ecc                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04ecc     B8 0F 06 F1 | 	add	objptr, #440
04ed0     07 3D C2 FA | 	rdbyte	_var06, objptr
04ed4     1E 3D 22 F6 | 	not	_var06, _var06
04ed8     01 3C 06 F5 | 	and	_var06, #1
04edc     03 0E 06 F1 | 	add	objptr, #3
04ee0     07 3D 42 FC | 	wrbyte	_var06, objptr
04ee4     BB 0F 86 F1 | 	sub	objptr, #443
04ee8     D4 02 90 FD | 	jmp	#LR__0190
04eec                 | LR__0175
04eec                 | ' 
04eec                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04eec     19 43 02 F6 | 	mov	_var09, _var01
04ef0     02 42 66 F0 | 	shl	_var09, #2
04ef4     DF 0E 06 F1 | 	add	objptr, #223
04ef8     07 43 02 F1 | 	add	_var09, objptr
04efc     21 3D 02 FB | 	rdlong	_var06, _var09
04f00     D9 0E 06 F1 | 	add	objptr, #217
04f04     07 45 C2 FA | 	rdbyte	_var10, objptr
04f08     22 3D 82 F1 | 	sub	_var06, _var10
04f0c     02 32 66 F0 | 	shl	_var01, #2
04f10     D9 0E 86 F1 | 	sub	objptr, #217
04f14     07 33 02 F1 | 	add	_var01, objptr
04f18     19 3D 62 FC | 	wrlong	_var06, _var01
04f1c     DF 0E 86 F1 | 	sub	objptr, #223
04f20     9C 02 90 FD | 	jmp	#LR__0190
04f24                 | LR__0176
04f24                 | ' 
04f24                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04f24     19 43 02 F6 | 	mov	_var09, _var01
04f28     02 42 66 F0 | 	shl	_var09, #2
04f2c     DF 0E 06 F1 | 	add	objptr, #223
04f30     07 43 02 F1 | 	add	_var09, objptr
04f34     21 3D 02 FB | 	rdlong	_var06, _var09
04f38     D9 0E 06 F1 | 	add	objptr, #217
04f3c     07 45 C2 FA | 	rdbyte	_var10, objptr
04f40     22 3D 02 F1 | 	add	_var06, _var10
04f44     02 32 66 F0 | 	shl	_var01, #2
04f48     D9 0E 86 F1 | 	sub	objptr, #217
04f4c     07 33 02 F1 | 	add	_var01, objptr
04f50     19 3D 62 FC | 	wrlong	_var06, _var01
04f54     DF 0E 86 F1 | 	sub	objptr, #223
04f58     64 02 90 FD | 	jmp	#LR__0190
04f5c                 | LR__0177
04f5c                 | ' 
04f5c                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04f5c     B8 0F 06 F1 | 	add	objptr, #440
04f60     07 3D C2 FA | 	rdbyte	_var06, objptr
04f64     01 3C 06 F5 | 	and	_var06, #1
04f68     04 0E 06 F1 | 	add	objptr, #4
04f6c     07 33 02 F1 | 	add	_var01, objptr
04f70     19 3D 42 FC | 	wrbyte	_var06, _var01
04f74     BC 0F 86 F1 | 	sub	objptr, #444
04f78     44 02 90 FD | 	jmp	#LR__0190
04f7c                 | LR__0178
04f7c                 | ' 
04f7c                 | '         $4:                                      ' Set vibrato waveform type
04f7c                 | '           vibratoType[channel]  := y & 3
04f7c     B8 0F 06 F1 | 	add	objptr, #440
04f80     07 3D C2 FA | 	rdbyte	_var06, objptr
04f84     03 3C 06 F5 | 	and	_var06, #3
04f88     19 47 02 F6 | 	mov	_var11, _var01
04f8c     08 0E 06 F1 | 	add	objptr, #8
04f90     07 47 02 F1 | 	add	_var11, objptr
04f94     23 3D 42 FC | 	wrbyte	_var06, _var11
04f98                 | '           resetVibrato[channel] := y & 4
04f98     08 0E 86 F1 | 	sub	objptr, #8
04f9c     07 3D C2 FA | 	rdbyte	_var06, objptr
04fa0     04 3C 06 F5 | 	and	_var06, #4
04fa4     25 0E 86 F1 | 	sub	objptr, #37
04fa8     07 33 02 F1 | 	add	_var01, objptr
04fac     19 3D 42 FC | 	wrbyte	_var06, _var01
04fb0     93 0F 86 F1 | 	sub	objptr, #403
04fb4     08 02 90 FD | 	jmp	#LR__0190
04fb8                 | LR__0179
04fb8                 | ' 
04fb8                 | '         $5: fineTune := y                        ' Set finetune
04fb8     B8 0F 06 F1 | 	add	objptr, #440
04fbc     07 3D C2 FA | 	rdbyte	_var06, objptr
04fc0     09 0E 86 F1 | 	sub	objptr, #9
04fc4     07 3D 62 FC | 	wrlong	_var06, objptr
04fc8     AF 0F 86 F1 | 	sub	objptr, #431
04fcc     F0 01 90 FD | 	jmp	#LR__0190
04fd0                 | LR__0180
04fd0                 | ' 
04fd0                 | '         $6:                                      ' Pattern looping
04fd0                 | '           if y == 0
04fd0     B8 0F 06 F1 | 	add	objptr, #440
04fd4     07 3D CA FA | 	rdbyte	_var06, objptr wz
04fd8     B8 0F 86 F1 | 	sub	objptr, #440
04fdc     1C 00 90 5D |  if_ne	jmp	#LR__0181
04fe0                 | '             cmdE6_memory[channel] := patternRow
04fe0     E9 0F 06 F1 | 	add	objptr, #489
04fe4     07 33 02 F1 | 	add	_var01, objptr
04fe8     47 0F 86 F1 | 	sub	objptr, #327
04fec     07 47 C2 FA | 	rdbyte	_var11, objptr
04ff0     A2 0E 86 F1 | 	sub	objptr, #162
04ff4     19 47 42 FC | 	wrbyte	_var11, _var01
04ff8                 | '           else
04ff8     C4 01 90 FD | 	jmp	#LR__0190
04ffc                 | LR__0181
04ffc                 | '             if ++cmdE6_counter[channel] <= y
04ffc     19 43 02 F6 | 	mov	_var09, _var01
05000     ED 0F 06 F1 | 	add	objptr, #493
05004     07 43 02 F1 | 	add	_var09, objptr
05008     21 3D C2 FA | 	rdbyte	_var06, _var09
0500c     01 3C 06 F1 | 	add	_var06, #1
05010     19 45 02 F6 | 	mov	_var10, _var01
05014     07 45 02 F1 | 	add	_var10, objptr
05018     22 3D 42 FC | 	wrbyte	_var06, _var10
0501c     22 49 C2 FA | 	rdbyte	_var12, _var10
05020     35 0E 86 F1 | 	sub	objptr, #53
05024     07 4B C2 FA | 	rdbyte	_var13, objptr
05028     B8 0F 86 F1 | 	sub	objptr, #440
0502c     25 49 5A F2 | 	cmps	_var12, _var13 wcz
05030     24 00 90 1D |  if_a	jmp	#LR__0182
05034                 | '               cmdE6_updatePosition[channel] := true
05034     F1 0F 06 F1 | 	add	objptr, #497
05038     07 33 02 F1 | 	add	_var01, objptr
0503c     FF FF FF FF 
05040     19 FF 4B FC | 	wrbyte	##-1, _var01
05044                 | '               cmdE6_updatePositionCommon    := true
05044     04 0E 06 F1 | 	add	objptr, #4
05048     FF FF FF FF 
0504c     07 FF 4B FC | 	wrbyte	##-1, objptr
05050     F5 0F 86 F1 | 	sub	objptr, #501
05054                 | '             else
05054     68 01 90 FD | 	jmp	#LR__0190
05058                 | LR__0182
05058                 | '               cmdE6_counter[channel] := 0
05058     ED 0F 06 F1 | 	add	objptr, #493
0505c     07 33 02 F1 | 	add	_var01, objptr
05060     19 01 48 FC | 	wrbyte	#0, _var01
05064     ED 0F 86 F1 | 	sub	objptr, #493
05068     54 01 90 FD | 	jmp	#LR__0190
0506c                 | LR__0183
0506c                 | ' 
0506c                 | '         $7:                                      ' Set tremolo waveform type
0506c                 | '           tremoloType[channel] := y & 3
0506c     B8 0F 06 F1 | 	add	objptr, #440
05070     07 3D C2 FA | 	rdbyte	_var06, objptr
05074     03 3C 06 F5 | 	and	_var06, #3
05078     19 47 02 F6 | 	mov	_var11, _var01
0507c     0C 0E 06 F1 | 	add	objptr, #12
05080     07 47 02 F1 | 	add	_var11, objptr
05084     23 3D 42 FC | 	wrbyte	_var06, _var11
05088                 | '           resetTremolo[channel] := y & 4
05088     0C 0E 86 F1 | 	sub	objptr, #12
0508c     07 3D C2 FA | 	rdbyte	_var06, objptr
05090     04 3C 06 F5 | 	and	_var06, #4
05094     29 0E 86 F1 | 	sub	objptr, #41
05098     07 33 02 F1 | 	add	_var01, objptr
0509c     19 3D 42 FC | 	wrbyte	_var06, _var01
050a0     8F 0F 86 F1 | 	sub	objptr, #399
050a4     18 01 90 FD | 	jmp	#LR__0190
050a8                 | LR__0184
050a8                 | ' 
050a8                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
050a8     19 43 02 F6 | 	mov	_var09, _var01
050ac     02 42 66 F0 | 	shl	_var09, #2
050b0     FF 0E 06 F1 | 	add	objptr, #255
050b4     07 43 02 F1 | 	add	_var09, objptr
050b8     21 3D 02 FB | 	rdlong	_var06, _var09
050bc     B9 0E 06 F1 | 	add	objptr, #185
050c0     07 45 C2 FA | 	rdbyte	_var10, objptr
050c4     22 3D 02 F1 | 	add	_var06, _var10
050c8     02 32 66 F0 | 	shl	_var01, #2
050cc     B9 0E 86 F1 | 	sub	objptr, #185
050d0     07 33 02 F1 | 	add	_var01, objptr
050d4     19 3D 62 FC | 	wrlong	_var06, _var01
050d8     FF 0E 86 F1 | 	sub	objptr, #255
050dc     E0 00 90 FD | 	jmp	#LR__0190
050e0                 | LR__0185
050e0                 | ' 
050e0                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
050e0     19 43 02 F6 | 	mov	_var09, _var01
050e4     02 42 66 F0 | 	shl	_var09, #2
050e8     FF 0E 06 F1 | 	add	objptr, #255
050ec     07 43 02 F1 | 	add	_var09, objptr
050f0     21 3D 02 FB | 	rdlong	_var06, _var09
050f4     B9 0E 06 F1 | 	add	objptr, #185
050f8     07 45 C2 FA | 	rdbyte	_var10, objptr
050fc     22 3D 82 F1 | 	sub	_var06, _var10
05100     02 32 66 F0 | 	shl	_var01, #2
05104     B9 0E 86 F1 | 	sub	objptr, #185
05108     07 33 02 F1 | 	add	_var01, objptr
0510c     19 3D 62 FC | 	wrlong	_var06, _var01
05110     FF 0E 86 F1 | 	sub	objptr, #255
05114     A8 00 90 FD | 	jmp	#LR__0190
05118                 | LR__0186
05118                 | ' 
05118                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05118     B8 0F 06 F1 | 	add	objptr, #440
0511c     07 43 C2 FA | 	rdbyte	_var09, objptr
05120     14 0F 86 F1 | 	sub	objptr, #276
05124     07 45 C2 FA | 	rdbyte	_var10, objptr
05128     22 43 02 FD | 	qmul	_var09, _var10
0512c     18 3C 62 FD | 	getqx	_var06
05130     01 0E 06 F1 | 	add	objptr, #1
05134     07 3D 42 FC | 	wrbyte	_var06, objptr
05138     A5 0E 86 F1 | 	sub	objptr, #165
0513c     80 00 90 FD | 	jmp	#LR__0190
05140                 | LR__0187
05140                 | ' 
05140                 | '     $F:                          ' Set speed
05140                 | '       if z < 32
05140     B9 0F 06 F1 | 	add	objptr, #441
05144     07 3B C2 FA | 	rdbyte	_var05, objptr
05148     B9 0F 86 F1 | 	sub	objptr, #441
0514c     20 3A 5E F2 | 	cmps	_var05, #32 wcz
05150     18 00 90 3D |  if_ae	jmp	#LR__0188
05154                 | '         currentSongSpeed := z
05154     B9 0F 06 F1 | 	add	objptr, #441
05158     07 3B C2 FA | 	rdbyte	_var05, objptr
0515c     15 0F 86 F1 | 	sub	objptr, #277
05160     07 3B 42 FC | 	wrbyte	_var05, objptr
05164     A4 0E 86 F1 | 	sub	objptr, #164
05168                 | '       else
05168     54 00 90 FD | 	jmp	#LR__0189
0516c                 | LR__0188
0516c                 | '         ticksPerMinute := z * 24
0516c     B9 0F 06 F1 | 	add	objptr, #441
05170     07 3F C2 FA | 	rdbyte	_var07, objptr
05174     1F 3B 02 F6 | 	mov	_var05, _var07
05178     01 3A 66 F0 | 	shl	_var05, #1
0517c     1F 3B 02 F1 | 	add	_var05, _var07
05180     03 3A 66 F0 | 	shl	_var05, #3
05184     12 0E 86 F1 | 	sub	objptr, #18
05188     07 3B 62 FC | 	wrlong	_var05, objptr
0518c     A7 0F 86 F1 | 	sub	objptr, #423
05190                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05190     07 AF 02 FB | 	rdlong	muldiva_, objptr
05194     A7 0F 06 F1 | 	add	objptr, #423
05198     07 B1 02 FB | 	rdlong	muldivb_, objptr
0519c     A7 0F 86 F1 | 	sub	objptr, #423
051a0     D0 00 A0 FD | 	call	#divide_
051a4     58 3D 02 F6 | 	mov	_var06, muldivb_
051a8     04 3C 66 F0 | 	shl	_var06, #4
051ac     58 3D 82 F1 | 	sub	_var06, muldivb_
051b0     02 3C 66 F0 | 	shl	_var06, #2
051b4     AB 0F 06 F1 | 	add	objptr, #427
051b8     07 3D 62 FC | 	wrlong	_var06, objptr
051bc     AB 0F 86 F1 | 	sub	objptr, #427
051c0                 | LR__0189
051c0                 | LR__0190
051c0                 | _trackerplayer_spin2_handleZeroTickCommands_ret
051c0     2D 00 64 FD | 	ret
051c4                 | 
051c4                 | ' 
051c4                 | ' 
051c4                 | ' ' Handle all commands that executes on "non zero ticks"
051c4                 | ' '
051c4                 | ' PRI handleNonZeroTickCommands(channel)
051c4                 | _trackerplayer_spin2_handleNonZeroTickCommands
051c4     0A 5A 05 F6 | 	mov	COUNT_, #10
051c8     B0 00 A0 FD | 	call	#pushregs_
051cc     39 81 02 F6 | 	mov	local01, arg01
051d0                 | ' 
051d0                 | '   CASE_FAST cmd
051d0     BA 0F 06 F1 | 	add	objptr, #442
051d4     07 83 C2 FA | 	rdbyte	local02, objptr
051d8     BA 0F 86 F1 | 	sub	objptr, #442
051dc     41 85 02 F6 | 	mov	local03, local02
051e0     01 84 86 F1 | 	sub	local03, #1
051e4     0E 84 26 F3 | 	fle	local03, #14
051e8     42 87 02 F6 | 	mov	local04, local03
051ec     30 86 62 FD | 	jmprel	local04
051f0                 | LR__0191
051f0     38 00 90 FD | 	jmp	#LR__0192
051f4     A0 00 90 FD | 	jmp	#LR__0193
051f8     D4 00 90 FD | 	jmp	#LR__0194
051fc     1C 02 90 FD | 	jmp	#LR__0204
05200     20 01 90 FD | 	jmp	#LR__0196
05204     48 01 90 FD | 	jmp	#LR__0197
05208     50 01 90 FD | 	jmp	#LR__0198
0520c     0C 02 90 FD | 	jmp	#LR__0204
05210     08 02 90 FD | 	jmp	#LR__0204
05214     B0 01 90 FD | 	jmp	#LR__0201
05218     00 02 90 FD | 	jmp	#LR__0204
0521c     FC 01 90 FD | 	jmp	#LR__0204
05220     F8 01 90 FD | 	jmp	#LR__0204
05224     AC 01 90 FD | 	jmp	#LR__0202
05228     F0 01 90 FD | 	jmp	#LR__0204
0522c                 | LR__0192
0522c                 | ' 
0522c                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
0522c     40 89 02 F6 | 	mov	local05, local01
05230     02 88 66 F0 | 	shl	local05, #2
05234     DF 0E 06 F1 | 	add	objptr, #223
05238     07 89 02 F1 | 	add	local05, objptr
0523c     44 8B 02 FB | 	rdlong	local06, local05
05240     DA 0E 06 F1 | 	add	objptr, #218
05244     07 8D C2 FA | 	rdbyte	local07, objptr
05248     46 8B 82 F1 | 	sub	local06, local07
0524c     40 8F 02 F6 | 	mov	local08, local01
05250     02 8E 66 F0 | 	shl	local08, #2
05254     DA 0E 86 F1 | 	sub	objptr, #218
05258     07 8F 02 F1 | 	add	local08, objptr
0525c     47 8B 62 FC | 	wrlong	local06, local08
05260                 | ' 
05260                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05260                 | '       if currPeriod[channel] < 0
05260     40 8B 02 F6 | 	mov	local06, local01
05264     02 8A 66 F0 | 	shl	local06, #2
05268     07 8B 02 F1 | 	add	local06, objptr
0526c     45 91 02 FB | 	rdlong	local09, local06
05270     00 90 5E F2 | 	cmps	local09, #0 wcz
05274     DF 0E 86 F1 | 	sub	objptr, #223
05278     A0 01 90 3D |  if_ae	jmp	#LR__0204
0527c                 | '         currPeriod[channel] := MAXIMUM_PERIOD
0527c     02 80 66 F0 | 	shl	local01, #2
05280     DF 0E 06 F1 | 	add	objptr, #223
05284     07 81 02 F1 | 	add	local01, objptr
05288     01 00 80 FF 
0528c     40 B1 6A FC | 	wrlong	##856, local01
05290     DF 0E 86 F1 | 	sub	objptr, #223
05294     84 01 90 FD | 	jmp	#LR__0204
05298                 | LR__0193
05298                 | ' 
05298                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05298     40 89 02 F6 | 	mov	local05, local01
0529c     02 88 66 F0 | 	shl	local05, #2
052a0     DF 0E 06 F1 | 	add	objptr, #223
052a4     07 89 02 F1 | 	add	local05, objptr
052a8     44 8B 02 FB | 	rdlong	local06, local05
052ac     DA 0E 06 F1 | 	add	objptr, #218
052b0     07 8D C2 FA | 	rdbyte	local07, objptr
052b4     46 8B 02 F1 | 	add	local06, local07
052b8     02 80 66 F0 | 	shl	local01, #2
052bc     DA 0E 86 F1 | 	sub	objptr, #218
052c0     07 81 02 F1 | 	add	local01, objptr
052c4     40 8B 62 FC | 	wrlong	local06, local01
052c8     DF 0E 86 F1 | 	sub	objptr, #223
052cc     4C 01 90 FD | 	jmp	#LR__0204
052d0                 | LR__0194
052d0                 | ' 
052d0                 | '     $3:                                 ' Slide to note (portamento)
052d0                 | '       if z > 0
052d0     B9 0F 06 F1 | 	add	objptr, #441
052d4     07 8B C2 FA | 	rdbyte	local06, objptr
052d8     B9 0F 86 F1 | 	sub	objptr, #441
052dc     00 8A 5E F2 | 	cmps	local06, #0 wcz
052e0     1C 00 90 ED |  if_be	jmp	#LR__0195
052e4                 | '         cmd3_memoryZ[channel] := z
052e4     40 8B 02 F6 | 	mov	local06, local01
052e8     C8 0F 06 F1 | 	add	objptr, #456
052ec     07 8B 02 F1 | 	add	local06, objptr
052f0     0F 0E 86 F1 | 	sub	objptr, #15
052f4     07 91 C2 FA | 	rdbyte	local09, objptr
052f8     B9 0F 86 F1 | 	sub	objptr, #441
052fc     45 91 42 FC | 	wrbyte	local09, local06
05300                 | LR__0195
05300                 | ' 
05300                 | '       doPortamento(channel, lastSetPeriod[channel])
05300     40 89 02 F6 | 	mov	local05, local01
05304     02 88 66 F0 | 	shl	local05, #2
05308     27 0F 06 F1 | 	add	objptr, #295
0530c     07 89 02 F1 | 	add	local05, objptr
05310     44 75 02 FB | 	rdlong	arg02, local05
05314     40 73 02 F6 | 	mov	arg01, local01
05318     27 0F 86 F1 | 	sub	objptr, #295
0531c     74 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05320     F8 00 90 FD | 	jmp	#LR__0204
05324                 | LR__0196
05324                 | ' 
05324                 | '     $5:                                 ' Volume slide + portamento
05324                 | '       doVolumeSlide(channel)
05324     40 73 02 F6 | 	mov	arg01, local01
05328     94 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0532c                 | '       doPortamento(channel, lastSetPeriod[channel])
0532c     40 89 02 F6 | 	mov	local05, local01
05330     02 88 66 F0 | 	shl	local05, #2
05334     27 0F 06 F1 | 	add	objptr, #295
05338     07 89 02 F1 | 	add	local05, objptr
0533c     44 75 02 FB | 	rdlong	arg02, local05
05340     40 73 02 F6 | 	mov	arg01, local01
05344     27 0F 86 F1 | 	sub	objptr, #295
05348     48 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0534c     CC 00 90 FD | 	jmp	#LR__0204
05350                 | LR__0197
05350                 | ' 
05350                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05350     40 73 02 F6 | 	mov	arg01, local01
05354     68 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05358     C0 00 90 FD | 	jmp	#LR__0204
0535c                 | LR__0198
0535c                 | ' 
0535c                 | '     $7:                                 ' Tremolo
0535c                 | '       if x > 0
0535c     B7 0F 06 F1 | 	add	objptr, #439
05360     07 8B C2 FA | 	rdbyte	local06, objptr
05364     B7 0F 86 F1 | 	sub	objptr, #439
05368     00 8A 5E F2 | 	cmps	local06, #0 wcz
0536c     1C 00 90 ED |  if_be	jmp	#LR__0199
05370                 | '         cmd7_memoryX[channel] := x
05370     40 8B 02 F6 | 	mov	local06, local01
05374     D8 0F 06 F1 | 	add	objptr, #472
05378     07 8B 02 F1 | 	add	local06, objptr
0537c     21 0E 86 F1 | 	sub	objptr, #33
05380     07 91 C2 FA | 	rdbyte	local09, objptr
05384     B7 0F 86 F1 | 	sub	objptr, #439
05388     45 91 42 FC | 	wrbyte	local09, local06
0538c                 | LR__0199
0538c                 | '       if y > 0
0538c     B8 0F 06 F1 | 	add	objptr, #440
05390     07 8B C2 FA | 	rdbyte	local06, objptr
05394     B8 0F 86 F1 | 	sub	objptr, #440
05398     00 8A 5E F2 | 	cmps	local06, #0 wcz
0539c     1C 00 90 ED |  if_be	jmp	#LR__0200
053a0                 | '         cmd7_memoryY[channel] := y
053a0     40 8B 02 F6 | 	mov	local06, local01
053a4     D4 0F 06 F1 | 	add	objptr, #468
053a8     07 8B 02 F1 | 	add	local06, objptr
053ac     1C 0E 86 F1 | 	sub	objptr, #28
053b0     07 91 C2 FA | 	rdbyte	local09, objptr
053b4     B8 0F 86 F1 | 	sub	objptr, #440
053b8     45 91 42 FC | 	wrbyte	local09, local06
053bc                 | LR__0200
053bc                 | ' 
053bc                 | '       doTremolo(channel)
053bc     40 73 02 F6 | 	mov	arg01, local01
053c0     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
053c4     54 00 90 FD | 	jmp	#LR__0204
053c8                 | LR__0201
053c8                 | ' 
053c8                 | '     $A: doVolumeSlide(channel)          ' Volume slide
053c8     40 73 02 F6 | 	mov	arg01, local01
053cc     F0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
053d0     48 00 90 FD | 	jmp	#LR__0204
053d4                 | LR__0202
053d4                 | ' 
053d4                 | '     $E:                                 ' Retrig every Y ticks
053d4                 | '       if (x == $9) && ((tickcounter // y) == 0)
053d4     B7 0F 06 F1 | 	add	objptr, #439
053d8     07 89 C2 FA | 	rdbyte	local05, objptr
053dc     B7 0F 86 F1 | 	sub	objptr, #439
053e0     09 88 0E F2 | 	cmp	local05, #9 wz
053e4     34 00 90 5D |  if_ne	jmp	#LR__0203
053e8     A1 0E 06 F1 | 	add	objptr, #161
053ec     07 8D C2 FA | 	rdbyte	local07, objptr
053f0     46 AF 02 F6 | 	mov	muldiva_, local07
053f4     17 0F 06 F1 | 	add	objptr, #279
053f8     07 93 C2 FA | 	rdbyte	local10, objptr
053fc     B8 0F 86 F1 | 	sub	objptr, #440
05400     49 B1 02 F6 | 	mov	muldivb_, local10
05404     D0 00 A0 FD | 	call	#divide_
05408     57 91 0A F6 | 	mov	local09, muldiva_ wz
0540c     0C 00 90 5D |  if_ne	jmp	#LR__0203
05410                 | '         triggerNote(channel)
05410     40 8B 02 F6 | 	mov	local06, local01
05414     45 73 02 F6 | 	mov	arg01, local06
05418     EC F2 BF FD | 	call	#_trackerplayer_spin2_triggerNote
0541c                 | LR__0203
0541c                 | LR__0204
0541c     AF F0 03 F6 | 	mov	ptra, fp
05420     BF 00 A0 FD | 	call	#popregs_
05424                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
05424     2D 00 64 FD | 	ret
05428                 | 
05428                 | ' 
05428                 | ' 
05428                 | ' ' Handle all commands that executes on every tick
05428                 | ' '
05428                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05428                 | _trackerplayer_spin2_handleEveryTickCommands
05428     12 5A 05 F6 | 	mov	COUNT_, #18
0542c     B0 00 A0 FD | 	call	#pushregs_
05430     39 81 02 F6 | 	mov	local01, arg01
05434                 | ' 
05434                 | '   CASE_FAST cmd
05434     BA 0F 06 F1 | 	add	objptr, #442
05438     07 83 C2 FA | 	rdbyte	local02, objptr
0543c     BA 0F 86 F1 | 	sub	objptr, #442
05440     41 85 02 F6 | 	mov	local03, local02
05444     0F 84 26 F3 | 	fle	local03, #15
05448     42 87 02 F6 | 	mov	local04, local03
0544c     30 86 62 FD | 	jmprel	local04
05450                 | LR__0205
05450     3C 00 90 FD | 	jmp	#LR__0206
05454     68 03 90 FD | 	jmp	#LR__0220
05458     64 03 90 FD | 	jmp	#LR__0220
0545c     60 03 90 FD | 	jmp	#LR__0220
05460     E8 01 90 FD | 	jmp	#LR__0209
05464     58 03 90 FD | 	jmp	#LR__0220
05468     4C 02 90 FD | 	jmp	#LR__0212
0546c     50 03 90 FD | 	jmp	#LR__0220
05470     4C 03 90 FD | 	jmp	#LR__0220
05474     48 03 90 FD | 	jmp	#LR__0220
05478     44 03 90 FD | 	jmp	#LR__0220
0547c     40 03 90 FD | 	jmp	#LR__0220
05480     3C 03 90 FD | 	jmp	#LR__0220
05484     38 03 90 FD | 	jmp	#LR__0220
05488     38 02 90 FD | 	jmp	#LR__0213
0548c     30 03 90 FD | 	jmp	#LR__0220
05490                 | LR__0206
05490                 | ' 
05490                 | '     $0:                                 ' Arpeggio
05490                 | '       arpCounter := tickCounter // 3
05490     A1 0E 06 F1 | 	add	objptr, #161
05494     07 AF C2 FA | 	rdbyte	muldiva_, objptr
05498     A1 0E 86 F1 | 	sub	objptr, #161
0549c     03 B0 06 F6 | 	mov	muldivb_, #3
054a0     D0 00 A0 FD | 	call	#divide_
054a4     57 89 02 F6 | 	mov	local05, muldiva_
054a8                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
054a8     40 8B 02 F6 | 	mov	local06, local01
054ac     02 8A 66 F0 | 	shl	local06, #2
054b0     DF 0E 06 F1 | 	add	objptr, #223
054b4     07 8B 02 F1 | 	add	local06, objptr
054b8     45 73 02 FB | 	rdlong	arg01, local06
054bc     40 8D 02 F6 | 	mov	local07, local01
054c0     0C 0E 86 F1 | 	sub	objptr, #12
054c4     07 8D 02 F1 | 	add	local07, objptr
054c8     46 75 C2 FA | 	rdbyte	arg02, local07
054cc     D3 0E 86 F1 | 	sub	objptr, #211
054d0     AC EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
054d4     16 8F 02 F6 | 	mov	local08, result1
054d8     47 91 02 F6 | 	mov	local09, local08
054dc     24 8E 5E F2 | 	cmps	local08, #36 wcz
054e0     DC 02 90 3D |  if_ae	jmp	#LR__0220
054e4                 | '         if arpCounter == 1 and x > 0
054e4     01 88 0E F2 | 	cmp	local05, #1 wz
054e8     8C 00 90 5D |  if_ne	jmp	#LR__0207
054ec     B7 0F 06 F1 | 	add	objptr, #439
054f0     07 8B C2 FA | 	rdbyte	local06, objptr
054f4     B7 0F 86 F1 | 	sub	objptr, #439
054f8     00 8A 5E F2 | 	cmps	local06, #0 wcz
054fc     78 00 90 ED |  if_be	jmp	#LR__0207
05500                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05500     48 93 02 F6 | 	mov	local10, local09
05504     B7 0F 06 F1 | 	add	objptr, #439
05508     07 8D C2 FA | 	rdbyte	local07, objptr
0550c     46 95 02 F6 | 	mov	local11, local07
05510     46 93 02 F1 | 	add	local10, local07
05514     49 97 02 F6 | 	mov	local12, local10
05518     4B 73 02 F6 | 	mov	arg01, local12
0551c                 | ' 
0551c                 | '   return word[@periodTable][noteNumber]
0551c     06 00 00 FF 
05520     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05524     01 72 66 F0 | 	shl	arg01, #1
05528     14 73 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0552c     39 2D E2 FA | 	rdword	result1, arg01
05530     06 00 00 FF 
05534     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05538     16 99 02 F6 | 	mov	local13, result1
0553c     40 9B 02 F6 | 	mov	local14, local01
05540     02 9A 66 F0 | 	shl	local14, #2
05544     D8 0E 86 F1 | 	sub	objptr, #216
05548     07 9D 02 F6 | 	mov	local15, objptr
0554c     07 9B 02 F1 | 	add	local14, objptr
05550     4C 8B 02 F6 | 	mov	local06, local13
05554     4D 9F 02 FB | 	rdlong	local16, local14
05558     4F 8B 82 F1 | 	sub	local06, local16
0555c     40 A1 02 F6 | 	mov	local17, local01
05560     02 A0 66 F0 | 	shl	local17, #2
05564     10 0E 06 F1 | 	add	objptr, #16
05568     07 A3 02 F6 | 	mov	local18, objptr
0556c     07 A1 02 F1 | 	add	local17, objptr
05570     50 8B 62 FC | 	wrlong	local06, local17
05574     EF 0E 86 F1 | 	sub	objptr, #239
05578                 | LR__0207
05578                 | '         if arpCounter == 2 and y > 0
05578     02 88 0E F2 | 	cmp	local05, #2 wz
0557c     8C 00 90 5D |  if_ne	jmp	#LR__0208
05580     B8 0F 06 F1 | 	add	objptr, #440
05584     07 8B C2 FA | 	rdbyte	local06, objptr
05588     B8 0F 86 F1 | 	sub	objptr, #440
0558c     00 8A 5E F2 | 	cmps	local06, #0 wcz
05590     78 00 90 ED |  if_be	jmp	#LR__0208
05594                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05594     48 93 02 F6 | 	mov	local10, local09
05598     B8 0F 06 F1 | 	add	objptr, #440
0559c     07 8D C2 FA | 	rdbyte	local07, objptr
055a0     46 95 02 F6 | 	mov	local11, local07
055a4     46 93 02 F1 | 	add	local10, local07
055a8     49 97 02 F6 | 	mov	local12, local10
055ac     4B 73 02 F6 | 	mov	arg01, local12
055b0                 | ' 
055b0                 | '   return word[@periodTable][noteNumber]
055b0     06 00 00 FF 
055b4     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
055b8     01 72 66 F0 | 	shl	arg01, #1
055bc     14 73 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
055c0     39 2D E2 FA | 	rdword	result1, arg01
055c4     06 00 00 FF 
055c8     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
055cc     16 99 02 F6 | 	mov	local13, result1
055d0     40 9B 02 F6 | 	mov	local14, local01
055d4     02 9A 66 F0 | 	shl	local14, #2
055d8     D9 0E 86 F1 | 	sub	objptr, #217
055dc     07 9D 02 F6 | 	mov	local15, objptr
055e0     07 9B 02 F1 | 	add	local14, objptr
055e4     4C 8B 02 F6 | 	mov	local06, local13
055e8     4D 9F 02 FB | 	rdlong	local16, local14
055ec     4F 8B 82 F1 | 	sub	local06, local16
055f0     40 A1 02 F6 | 	mov	local17, local01
055f4     02 A0 66 F0 | 	shl	local17, #2
055f8     10 0E 06 F1 | 	add	objptr, #16
055fc     07 A3 02 F6 | 	mov	local18, objptr
05600     07 A1 02 F1 | 	add	local17, objptr
05604     50 8B 62 FC | 	wrlong	local06, local17
05608     EF 0E 86 F1 | 	sub	objptr, #239
0560c                 | LR__0208
0560c                 | '         if arpCounter == 0 and (x + y) > 0
0560c     00 88 0E F2 | 	cmp	local05, #0 wz
05610     AC 01 90 5D |  if_ne	jmp	#LR__0220
05614     B7 0F 06 F1 | 	add	objptr, #439
05618     07 8B C2 FA | 	rdbyte	local06, objptr
0561c     01 0E 06 F1 | 	add	objptr, #1
05620     07 8D C2 FA | 	rdbyte	local07, objptr
05624     B8 0F 86 F1 | 	sub	objptr, #440
05628     46 8B 02 F1 | 	add	local06, local07
0562c     00 8A 5E F2 | 	cmps	local06, #0 wcz
05630     8C 01 90 ED |  if_be	jmp	#LR__0220
05634                 | '           deltaPeriod[channel] := 0
05634     02 80 66 F0 | 	shl	local01, #2
05638     EF 0E 06 F1 | 	add	objptr, #239
0563c     07 81 02 F1 | 	add	local01, objptr
05640     40 01 68 FC | 	wrlong	#0, local01
05644     EF 0E 86 F1 | 	sub	objptr, #239
05648     74 01 90 FD | 	jmp	#LR__0220
0564c                 | LR__0209
0564c                 | ' 
0564c                 | '     $4:                                 ' Vibrato
0564c                 | '       if x > 0
0564c     B7 0F 06 F1 | 	add	objptr, #439
05650     07 8B C2 FA | 	rdbyte	local06, objptr
05654     B7 0F 86 F1 | 	sub	objptr, #439
05658     00 8A 5E F2 | 	cmps	local06, #0 wcz
0565c     1C 00 90 ED |  if_be	jmp	#LR__0210
05660                 | '         cmd4_memoryX[channel] := x
05660     40 8B 02 F6 | 	mov	local06, local01
05664     D0 0F 06 F1 | 	add	objptr, #464
05668     07 8B 02 F1 | 	add	local06, objptr
0566c     19 0E 86 F1 | 	sub	objptr, #25
05670     07 95 C2 FA | 	rdbyte	local11, objptr
05674     B7 0F 86 F1 | 	sub	objptr, #439
05678     45 95 42 FC | 	wrbyte	local11, local06
0567c                 | LR__0210
0567c                 | '       if y > 0
0567c     B8 0F 06 F1 | 	add	objptr, #440
05680     07 8B C2 FA | 	rdbyte	local06, objptr
05684     B8 0F 86 F1 | 	sub	objptr, #440
05688     00 8A 5E F2 | 	cmps	local06, #0 wcz
0568c     1C 00 90 ED |  if_be	jmp	#LR__0211
05690                 | '         cmd4_memoryY[channel] := y
05690     40 8B 02 F6 | 	mov	local06, local01
05694     CC 0F 06 F1 | 	add	objptr, #460
05698     07 8B 02 F1 | 	add	local06, objptr
0569c     14 0E 86 F1 | 	sub	objptr, #20
056a0     07 95 C2 FA | 	rdbyte	local11, objptr
056a4     B8 0F 86 F1 | 	sub	objptr, #440
056a8     45 95 42 FC | 	wrbyte	local11, local06
056ac                 | LR__0211
056ac                 | ' 
056ac                 | '       doVibrato(channel)
056ac     40 73 02 F6 | 	mov	arg01, local01
056b0     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
056b4     08 01 90 FD | 	jmp	#LR__0220
056b8                 | LR__0212
056b8                 | ' 
056b8                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
056b8     40 73 02 F6 | 	mov	arg01, local01
056bc     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
056c0     FC 00 90 FD | 	jmp	#LR__0220
056c4                 | LR__0213
056c4                 | ' 
056c4                 | '     $E:
056c4                 | '       if x == $C                        ' Cut note after Y ticks
056c4     B7 0F 06 F1 | 	add	objptr, #439
056c8     07 8B C2 FA | 	rdbyte	local06, objptr
056cc     B7 0F 86 F1 | 	sub	objptr, #439
056d0     0C 8A 0E F2 | 	cmp	local06, #12 wz
056d4     34 00 90 5D |  if_ne	jmp	#LR__0214
056d8                 | '         if tickcounter == y
056d8     A1 0E 06 F1 | 	add	objptr, #161
056dc     07 8B C2 FA | 	rdbyte	local06, objptr
056e0     17 0F 06 F1 | 	add	objptr, #279
056e4     07 95 C2 FA | 	rdbyte	local11, objptr
056e8     B8 0F 86 F1 | 	sub	objptr, #440
056ec     4A 8B 0A F2 | 	cmp	local06, local11 wz
056f0     CC 00 90 5D |  if_ne	jmp	#LR__0219
056f4                 | '           currVolume[channel] := 0
056f4     02 80 66 F0 | 	shl	local01, #2
056f8     FF 0E 06 F1 | 	add	objptr, #255
056fc     07 81 02 F1 | 	add	local01, objptr
05700     40 01 68 FC | 	wrlong	#0, local01
05704     FF 0E 86 F1 | 	sub	objptr, #255
05708     B4 00 90 FD | 	jmp	#LR__0219
0570c                 | LR__0214
0570c                 | ' 
0570c                 | '       elseif x == $D                    ' Delay note Y ticks
0570c     B7 0F 06 F1 | 	add	objptr, #439
05710     07 8B C2 FA | 	rdbyte	local06, objptr
05714     B7 0F 86 F1 | 	sub	objptr, #439
05718     0D 8A 0E F2 | 	cmp	local06, #13 wz
0571c     A0 00 90 5D |  if_ne	jmp	#LR__0218
05720                 | '         if tickcounter == y
05720     A1 0E 06 F1 | 	add	objptr, #161
05724     07 8B C2 FA | 	rdbyte	local06, objptr
05728     17 0F 06 F1 | 	add	objptr, #279
0572c     07 95 C2 FA | 	rdbyte	local11, objptr
05730     B8 0F 86 F1 | 	sub	objptr, #440
05734     4A 8B 0A F2 | 	cmp	local06, local11 wz
05738     0C 00 90 5D |  if_ne	jmp	#LR__0215
0573c                 | '           triggerNote(channel)
0573c     40 73 02 F6 | 	mov	arg01, local01
05740     C4 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05744     78 00 90 FD | 	jmp	#LR__0217
05748                 | LR__0215
05748                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05748                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05748     B8 0F 06 F1 | 	add	objptr, #440
0574c     07 8B C2 FA | 	rdbyte	local06, objptr
05750     14 0F 86 F1 | 	sub	objptr, #276
05754     07 95 C2 FA | 	rdbyte	local11, objptr
05758     A4 0E 86 F1 | 	sub	objptr, #164
0575c     4A 8B 5A F2 | 	cmps	local06, local11 wcz
05760     5C 00 90 CD |  if_b	jmp	#LR__0216
05764     A4 0E 06 F1 | 	add	objptr, #164
05768     07 99 C2 FA | 	rdbyte	local13, objptr
0576c     4C 97 02 F6 | 	mov	local12, local13
05770     01 96 86 F1 | 	sub	local12, #1
05774     03 0E 86 F1 | 	sub	objptr, #3
05778     07 9D C2 FA | 	rdbyte	local15, objptr
0577c     A1 0E 86 F1 | 	sub	objptr, #161
05780     4E 9B 02 F6 | 	mov	local14, local15
05784     4B 9B 0A F2 | 	cmp	local14, local12 wz
05788     34 00 90 5D |  if_ne	jmp	#LR__0216
0578c                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
0578c     40 8B 02 F6 | 	mov	local06, local01
05790     02 8A 66 F0 | 	shl	local06, #2
05794     27 0F 06 F1 | 	add	objptr, #295
05798     07 93 02 F6 | 	mov	local10, objptr
0579c     07 8B 02 F1 | 	add	local06, objptr
057a0     40 95 02 F6 | 	mov	local11, local01
057a4     02 94 66 F0 | 	shl	local11, #2
057a8     48 0E 86 F1 | 	sub	objptr, #72
057ac     07 8D 02 F6 | 	mov	local07, objptr
057b0     45 97 02 FB | 	rdlong	local12, local06
057b4     46 95 02 F1 | 	add	local11, local07
057b8     4A 97 62 FC | 	wrlong	local12, local11
057bc     DF 0E 86 F1 | 	sub	objptr, #223
057c0                 | LR__0216
057c0                 | LR__0217
057c0                 | LR__0218
057c0                 | LR__0219
057c0                 | LR__0220
057c0     AF F0 03 F6 | 	mov	ptra, fp
057c4     BF 00 A0 FD | 	call	#popregs_
057c8                 | _trackerplayer_spin2_handleEveryTickCommands_ret
057c8     2D 00 64 FD | 	ret
057cc                 | 
057cc                 | ' 
057cc                 | ' 
057cc                 | ' PRI doTremolo(channel) | depth, sineWave, speed
057cc                 | _trackerplayer_spin2_doTremolo
057cc     39 33 02 F6 | 	mov	_var01, arg01
057d0                 | ' 
057d0                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
057d0     05 00 00 FF 
057d4     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
057d8     14 35 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
057dc     19 37 02 F6 | 	mov	_var03, _var01
057e0     8B 0F 06 F1 | 	add	objptr, #395
057e4     07 37 02 F1 | 	add	_var03, objptr
057e8     1B 39 C2 FA | 	rdbyte	_var04, _var03
057ec     02 38 66 F0 | 	shl	_var04, #2
057f0     1A 39 02 F1 | 	add	_var04, _var02
057f4     1C 3B 02 FB | 	rdlong	_var05, _var04
057f8                 | '   depth    := cmd7_memoryY[channel]
057f8     19 3D 02 F6 | 	mov	_var06, _var01
057fc     49 0E 06 F1 | 	add	objptr, #73
05800     07 3D 02 F1 | 	add	_var06, objptr
05804     1E 3F C2 FA | 	rdbyte	_var07, _var06
05808                 | '   speed    := cmd7_memoryX[channel]
05808     19 3D 02 F6 | 	mov	_var06, _var01
0580c     04 0E 06 F1 | 	add	objptr, #4
05810     07 3D 02 F1 | 	add	_var06, objptr
05814     1E 41 C2 FA | 	rdbyte	_var08, _var06
05818                 | ' 
05818                 | '   CASE_FAST vibratoType[channel]
05818     19 37 02 F6 | 	mov	_var03, _var01
0581c     18 0E 86 F1 | 	sub	objptr, #24
05820     07 43 02 F6 | 	mov	_var09, objptr
05824     07 37 02 F1 | 	add	_var03, objptr
05828     1B 3D C2 FA | 	rdbyte	_var06, _var03
0582c     03 3C 26 F3 | 	fle	_var06, #3
05830     1E 45 02 F6 | 	mov	_var10, _var06
05834     05 00 00 FF 
05838     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0583c     C0 0F 86 F1 | 	sub	objptr, #448
05840     30 44 62 FD | 	jmprel	_var10
05844                 | LR__0221
05844     0C 00 90 FD | 	jmp	#LR__0222
05848     30 00 90 FD | 	jmp	#LR__0223
0584c     6C 00 90 FD | 	jmp	#LR__0224
05850     B4 00 90 FD | 	jmp	#LR__0225
05854                 | LR__0222
05854                 | ' 
05854                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05854     1D 3F 02 FD | 	qmul	_var07, _var05
05858     18 38 62 FD | 	getqx	_var04
0585c     06 38 C6 F0 | 	sar	_var04, #6
05860     19 47 02 F6 | 	mov	_var11, _var01
05864     02 46 66 F0 | 	shl	_var11, #2
05868     0F 0F 06 F1 | 	add	objptr, #271
0586c     07 47 02 F1 | 	add	_var11, objptr
05870     23 39 62 FC | 	wrlong	_var04, _var11
05874     0F 0F 86 F1 | 	sub	objptr, #271
05878     8C 00 90 FD | 	jmp	#LR__0225
0587c                 | LR__0223
0587c                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
0587c     19 47 02 F6 | 	mov	_var11, _var01
05880     8B 0F 06 F1 | 	add	objptr, #395
05884     07 47 02 F1 | 	add	_var11, objptr
05888     23 35 C2 FA | 	rdbyte	_var02, _var11
0588c     03 34 66 F0 | 	shl	_var02, #3
05890     1A 3F 02 FD | 	qmul	_var07, _var02
05894     18 38 62 FD | 	getqx	_var04
05898     00 39 86 F1 | 	sub	_var04, #256
0589c     06 38 C6 F0 | 	sar	_var04, #6
058a0     19 49 02 F6 | 	mov	_var12, _var01
058a4     02 48 66 F0 | 	shl	_var12, #2
058a8     7C 0E 86 F1 | 	sub	objptr, #124
058ac     07 49 02 F1 | 	add	_var12, objptr
058b0     24 39 62 FC | 	wrlong	_var04, _var12
058b4     0F 0F 86 F1 | 	sub	objptr, #271
058b8     4C 00 90 FD | 	jmp	#LR__0225
058bc                 | LR__0224
058bc                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
058bc     19 47 02 F6 | 	mov	_var11, _var01
058c0     8B 0F 06 F1 | 	add	objptr, #395
058c4     07 4B 02 F6 | 	mov	_var13, objptr
058c8     07 47 02 F1 | 	add	_var11, objptr
058cc     23 35 C2 FA | 	rdbyte	_var02, _var11
058d0     20 34 06 F5 | 	and	_var02, #32
058d4     04 34 66 F0 | 	shl	_var02, #4
058d8     1A 3F 02 FD | 	qmul	_var07, _var02
058dc     18 4C 62 FD | 	getqx	_var14
058e0     26 39 02 F6 | 	mov	_var04, _var14
058e4     00 39 86 F1 | 	sub	_var04, #256
058e8     06 38 C6 F0 | 	sar	_var04, #6
058ec     19 49 02 F6 | 	mov	_var12, _var01
058f0     02 48 66 F0 | 	shl	_var12, #2
058f4     7C 0E 86 F1 | 	sub	objptr, #124
058f8     07 4F 02 F6 | 	mov	_var15, objptr
058fc     07 49 02 F1 | 	add	_var12, objptr
05900     24 39 62 FC | 	wrlong	_var04, _var12
05904     0F 0F 86 F1 | 	sub	objptr, #271
05908                 | LR__0225
05908                 | ' 
05908                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05908     19 37 02 F6 | 	mov	_var03, _var01
0590c     8B 0F 06 F1 | 	add	objptr, #395
05910     07 37 02 F1 | 	add	_var03, objptr
05914     1B 3D C2 FA | 	rdbyte	_var06, _var03
05918     20 3D 02 F1 | 	add	_var06, _var08
0591c     3F 3C 06 F5 | 	and	_var06, #63
05920     07 33 02 F1 | 	add	_var01, objptr
05924     19 3D 42 FC | 	wrbyte	_var06, _var01
05928     8B 0F 86 F1 | 	sub	objptr, #395
0592c                 | _trackerplayer_spin2_doTremolo_ret
0592c     2D 00 64 FD | 	ret
05930                 | 
05930                 | ' 
05930                 | ' 
05930                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05930                 | _trackerplayer_spin2_doVibrato
05930     39 33 02 F6 | 	mov	_var01, arg01
05934                 | ' 
05934                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05934     05 00 00 FF 
05938     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
0593c     14 35 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05940     19 37 02 F6 | 	mov	_var03, _var01
05944     87 0F 06 F1 | 	add	objptr, #391
05948     07 37 02 F1 | 	add	_var03, objptr
0594c     1B 39 C2 FA | 	rdbyte	_var04, _var03
05950     02 38 66 F0 | 	shl	_var04, #2
05954     1A 39 02 F1 | 	add	_var04, _var02
05958     1C 3B 02 FB | 	rdlong	_var05, _var04
0595c                 | '   depth    := cmd4_memoryY[channel]
0595c     19 3D 02 F6 | 	mov	_var06, _var01
05960     45 0E 06 F1 | 	add	objptr, #69
05964     07 3D 02 F1 | 	add	_var06, objptr
05968     1E 3F C2 FA | 	rdbyte	_var07, _var06
0596c                 | '   speed    := cmd4_memoryX[channel]
0596c     19 3D 02 F6 | 	mov	_var06, _var01
05970     04 0E 06 F1 | 	add	objptr, #4
05974     07 3D 02 F1 | 	add	_var06, objptr
05978     1E 41 C2 FA | 	rdbyte	_var08, _var06
0597c                 | ' 
0597c                 | '   CASE_FAST vibratoType[channel]
0597c     19 37 02 F6 | 	mov	_var03, _var01
05980     10 0E 86 F1 | 	sub	objptr, #16
05984     07 43 02 F6 | 	mov	_var09, objptr
05988     07 37 02 F1 | 	add	_var03, objptr
0598c     1B 3D C2 FA | 	rdbyte	_var06, _var03
05990     03 3C 26 F3 | 	fle	_var06, #3
05994     1E 45 02 F6 | 	mov	_var10, _var06
05998     05 00 00 FF 
0599c     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
059a0     C0 0F 86 F1 | 	sub	objptr, #448
059a4     30 44 62 FD | 	jmprel	_var10
059a8                 | LR__0226
059a8     0C 00 90 FD | 	jmp	#LR__0227
059ac     30 00 90 FD | 	jmp	#LR__0228
059b0     6C 00 90 FD | 	jmp	#LR__0229
059b4     B4 00 90 FD | 	jmp	#LR__0230
059b8                 | LR__0227
059b8                 | ' 
059b8                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
059b8     1D 3F 02 FD | 	qmul	_var07, _var05
059bc     18 38 62 FD | 	getqx	_var04
059c0     07 38 C6 F0 | 	sar	_var04, #7
059c4     19 47 02 F6 | 	mov	_var11, _var01
059c8     02 46 66 F0 | 	shl	_var11, #2
059cc     EF 0E 06 F1 | 	add	objptr, #239
059d0     07 47 02 F1 | 	add	_var11, objptr
059d4     23 39 62 FC | 	wrlong	_var04, _var11
059d8     EF 0E 86 F1 | 	sub	objptr, #239
059dc     8C 00 90 FD | 	jmp	#LR__0230
059e0                 | LR__0228
059e0                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
059e0     19 47 02 F6 | 	mov	_var11, _var01
059e4     87 0F 06 F1 | 	add	objptr, #391
059e8     07 47 02 F1 | 	add	_var11, objptr
059ec     23 35 C2 FA | 	rdbyte	_var02, _var11
059f0     03 34 66 F0 | 	shl	_var02, #3
059f4     1A 3F 02 FD | 	qmul	_var07, _var02
059f8     18 38 62 FD | 	getqx	_var04
059fc     00 39 86 F1 | 	sub	_var04, #256
05a00     07 38 C6 F0 | 	sar	_var04, #7
05a04     19 49 02 F6 | 	mov	_var12, _var01
05a08     02 48 66 F0 | 	shl	_var12, #2
05a0c     98 0E 86 F1 | 	sub	objptr, #152
05a10     07 49 02 F1 | 	add	_var12, objptr
05a14     24 39 62 FC | 	wrlong	_var04, _var12
05a18     EF 0E 86 F1 | 	sub	objptr, #239
05a1c     4C 00 90 FD | 	jmp	#LR__0230
05a20                 | LR__0229
05a20                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05a20     19 47 02 F6 | 	mov	_var11, _var01
05a24     87 0F 06 F1 | 	add	objptr, #391
05a28     07 4B 02 F6 | 	mov	_var13, objptr
05a2c     07 47 02 F1 | 	add	_var11, objptr
05a30     23 35 C2 FA | 	rdbyte	_var02, _var11
05a34     20 34 06 F5 | 	and	_var02, #32
05a38     04 34 66 F0 | 	shl	_var02, #4
05a3c     1A 3F 02 FD | 	qmul	_var07, _var02
05a40     18 4C 62 FD | 	getqx	_var14
05a44     26 39 02 F6 | 	mov	_var04, _var14
05a48     00 39 86 F1 | 	sub	_var04, #256
05a4c     07 38 C6 F0 | 	sar	_var04, #7
05a50     19 49 02 F6 | 	mov	_var12, _var01
05a54     02 48 66 F0 | 	shl	_var12, #2
05a58     98 0E 86 F1 | 	sub	objptr, #152
05a5c     07 4F 02 F6 | 	mov	_var15, objptr
05a60     07 49 02 F1 | 	add	_var12, objptr
05a64     24 39 62 FC | 	wrlong	_var04, _var12
05a68     EF 0E 86 F1 | 	sub	objptr, #239
05a6c                 | LR__0230
05a6c                 | ' 
05a6c                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05a6c     19 37 02 F6 | 	mov	_var03, _var01
05a70     87 0F 06 F1 | 	add	objptr, #391
05a74     07 37 02 F1 | 	add	_var03, objptr
05a78     1B 3D C2 FA | 	rdbyte	_var06, _var03
05a7c     20 3D 02 F1 | 	add	_var06, _var08
05a80     3F 3C 06 F5 | 	and	_var06, #63
05a84     07 33 02 F1 | 	add	_var01, objptr
05a88     19 3D 42 FC | 	wrbyte	_var06, _var01
05a8c     87 0F 86 F1 | 	sub	objptr, #391
05a90                 | _trackerplayer_spin2_doVibrato_ret
05a90     2D 00 64 FD | 	ret
05a94                 | 
05a94                 | ' 
05a94                 | ' 
05a94                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05a94                 | _trackerplayer_spin2_doPortamento
05a94                 | ' 
05a94                 | '   if period == currPeriod[channel]
05a94     39 33 02 F6 | 	mov	_var01, arg01
05a98     02 32 66 F0 | 	shl	_var01, #2
05a9c     DF 0E 06 F1 | 	add	objptr, #223
05aa0     07 35 02 F6 | 	mov	_var02, objptr
05aa4     07 33 02 F1 | 	add	_var01, objptr
05aa8     19 37 02 FB | 	rdlong	_var03, _var01
05aac     1B 75 0A F2 | 	cmp	arg02, _var03 wz
05ab0                 | '     return
05ab0     DF 0E 86 F1 | 	sub	objptr, #223
05ab4     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05ab8                 | ' 
05ab8                 | '   if period > 0
05ab8     00 74 5E F2 | 	cmps	arg02, #0 wcz
05abc     1C 00 90 ED |  if_be	jmp	#LR__0231
05ac0                 | '     portamentoPeriodMemory[channel] := period
05ac0     39 33 02 F6 | 	mov	_var01, arg01
05ac4     02 32 66 F0 | 	shl	_var01, #2
05ac8     97 0F 06 F1 | 	add	objptr, #407
05acc     07 33 02 F1 | 	add	_var01, objptr
05ad0     19 75 62 FC | 	wrlong	arg02, _var01
05ad4                 | '   else
05ad4     97 0F 86 F1 | 	sub	objptr, #407
05ad8     18 00 90 FD | 	jmp	#LR__0232
05adc                 | LR__0231
05adc                 | '     period := portamentoPeriodMemory[channel]
05adc     39 33 02 F6 | 	mov	_var01, arg01
05ae0     02 32 66 F0 | 	shl	_var01, #2
05ae4     97 0F 06 F1 | 	add	objptr, #407
05ae8     07 33 02 F1 | 	add	_var01, objptr
05aec     19 75 02 FB | 	rdlong	arg02, _var01
05af0     97 0F 86 F1 | 	sub	objptr, #407
05af4                 | LR__0232
05af4                 | ' 
05af4                 | '   if period > currPeriod[channel]
05af4     39 33 02 F6 | 	mov	_var01, arg01
05af8     02 32 66 F0 | 	shl	_var01, #2
05afc     DF 0E 06 F1 | 	add	objptr, #223
05b00     07 33 02 F1 | 	add	_var01, objptr
05b04     19 37 02 FB | 	rdlong	_var03, _var01
05b08     1B 75 5A F2 | 	cmps	arg02, _var03 wcz
05b0c     DF 0E 86 F1 | 	sub	objptr, #223
05b10     68 00 90 ED |  if_be	jmp	#LR__0233
05b14                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05b14     39 35 02 F6 | 	mov	_var02, arg01
05b18     02 34 66 F0 | 	shl	_var02, #2
05b1c     DF 0E 06 F1 | 	add	objptr, #223
05b20     07 35 02 F1 | 	add	_var02, objptr
05b24     39 39 02 F6 | 	mov	_var04, arg01
05b28     E9 0E 06 F1 | 	add	objptr, #233
05b2c     1A 33 02 FB | 	rdlong	_var01, _var02
05b30     07 39 02 F1 | 	add	_var04, objptr
05b34     1C 3B C2 FA | 	rdbyte	_var05, _var04
05b38     1D 33 02 F1 | 	add	_var01, _var05
05b3c     39 3D 02 F6 | 	mov	_var06, arg01
05b40     02 3C 66 F0 | 	shl	_var06, #2
05b44     E9 0E 86 F1 | 	sub	objptr, #233
05b48     07 3D 02 F1 | 	add	_var06, objptr
05b4c     1E 33 62 FC | 	wrlong	_var01, _var06
05b50                 | '     currPeriod[channel] <#= period
05b50     39 35 02 F6 | 	mov	_var02, arg01
05b54     02 34 66 F0 | 	shl	_var02, #2
05b58     07 35 02 F1 | 	add	_var02, objptr
05b5c     1A 33 02 FB | 	rdlong	_var01, _var02
05b60     3A 33 62 F3 | 	fles	_var01, arg02
05b64     39 39 02 F6 | 	mov	_var04, arg01
05b68     02 38 66 F0 | 	shl	_var04, #2
05b6c     07 39 02 F1 | 	add	_var04, objptr
05b70     1C 33 62 FC | 	wrlong	_var01, _var04
05b74     DF 0E 86 F1 | 	sub	objptr, #223
05b78     84 00 90 FD | 	jmp	#LR__0235
05b7c                 | LR__0233
05b7c                 | ' 
05b7c                 | '   elseif period < currPeriod[channel]
05b7c     39 33 02 F6 | 	mov	_var01, arg01
05b80     02 32 66 F0 | 	shl	_var01, #2
05b84     DF 0E 06 F1 | 	add	objptr, #223
05b88     07 33 02 F1 | 	add	_var01, objptr
05b8c     19 37 02 FB | 	rdlong	_var03, _var01
05b90     1B 75 5A F2 | 	cmps	arg02, _var03 wcz
05b94     DF 0E 86 F1 | 	sub	objptr, #223
05b98     64 00 90 3D |  if_ae	jmp	#LR__0234
05b9c                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05b9c     39 35 02 F6 | 	mov	_var02, arg01
05ba0     02 34 66 F0 | 	shl	_var02, #2
05ba4     DF 0E 06 F1 | 	add	objptr, #223
05ba8     07 35 02 F1 | 	add	_var02, objptr
05bac     39 39 02 F6 | 	mov	_var04, arg01
05bb0     E9 0E 06 F1 | 	add	objptr, #233
05bb4     1A 33 02 FB | 	rdlong	_var01, _var02
05bb8     07 39 02 F1 | 	add	_var04, objptr
05bbc     1C 3B C2 FA | 	rdbyte	_var05, _var04
05bc0     1D 33 82 F1 | 	sub	_var01, _var05
05bc4     39 3D 02 F6 | 	mov	_var06, arg01
05bc8     02 3C 66 F0 | 	shl	_var06, #2
05bcc     E9 0E 86 F1 | 	sub	objptr, #233
05bd0     07 3D 02 F1 | 	add	_var06, objptr
05bd4     1E 33 62 FC | 	wrlong	_var01, _var06
05bd8                 | '     currPeriod[channel] #>= period
05bd8     39 35 02 F6 | 	mov	_var02, arg01
05bdc     02 34 66 F0 | 	shl	_var02, #2
05be0     07 35 02 F1 | 	add	_var02, objptr
05be4     1A 33 02 FB | 	rdlong	_var01, _var02
05be8     3A 33 42 F3 | 	fges	_var01, arg02
05bec     39 39 02 F6 | 	mov	_var04, arg01
05bf0     02 38 66 F0 | 	shl	_var04, #2
05bf4     07 39 02 F1 | 	add	_var04, objptr
05bf8     1C 33 62 FC | 	wrlong	_var01, _var04
05bfc     DF 0E 86 F1 | 	sub	objptr, #223
05c00                 | LR__0234
05c00                 | LR__0235
05c00                 | ' 
05c00                 | '   ' Handle glissando if activated
05c00                 | '   if portaGlissando[channel] > 0
05c00     39 33 02 F6 | 	mov	_var01, arg01
05c04     BC 0F 06 F1 | 	add	objptr, #444
05c08     07 33 02 F1 | 	add	_var01, objptr
05c0c     19 37 C2 FA | 	rdbyte	_var03, _var01
05c10     00 36 5E F2 | 	cmps	_var03, #0 wcz
05c14     BC 0F 86 F1 | 	sub	objptr, #444
05c18     A0 00 90 ED |  if_be	jmp	#LR__0238
05c1c                 | ' 
05c1c                 | '     tempPeriod := currPeriod[channel]
05c1c     39 33 02 F6 | 	mov	_var01, arg01
05c20     02 32 66 F0 | 	shl	_var01, #2
05c24     DF 0E 06 F1 | 	add	objptr, #223
05c28     07 33 02 F1 | 	add	_var01, objptr
05c2c     19 3F 02 FB | 	rdlong	_var07, _var01
05c30                 | ' 
05c30                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05c30     00 40 06 F6 | 	mov	_var08, #0
05c34     DF 0E 86 F1 | 	sub	objptr, #223
05c38     28 A4 9F FE | 	loc	pa,	#(@LR__0237-@LR__0236)
05c3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05c40                 | LR__0236
05c40                 | ' 
05c40                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05c40     06 00 00 FF 
05c44     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05c48     14 43 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05c4c     39 37 02 F6 | 	mov	_var03, arg01
05c50     D3 0E 06 F1 | 	add	objptr, #211
05c54     07 37 02 F1 | 	add	_var03, objptr
05c58     1B 3B C2 FA | 	rdbyte	_var05, _var03
05c5c     1D 45 02 F6 | 	mov	_var10, _var05
05c60     03 44 66 F0 | 	shl	_var10, #3
05c64     1D 45 02 F1 | 	add	_var10, _var05
05c68     03 44 66 F0 | 	shl	_var10, #3
05c6c     22 43 02 F1 | 	add	_var09, _var10
05c70     20 47 02 F6 | 	mov	_var11, _var08
05c74     01 46 66 F0 | 	shl	_var11, #1
05c78     21 47 02 F1 | 	add	_var11, _var09
05c7c     23 49 E2 FA | 	rdword	_var12, _var11
05c80                 | '       if tempPeriod >= periodStep
05c80     24 3F 5A F2 | 	cmps	_var07, _var12 wcz
05c84                 | '         i += 1000
05c84     06 00 00 FF 
05c88     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05c8c     D3 0E 86 F1 | 	sub	objptr, #211
05c90     01 00 00 3F 
05c94     E8 41 06 31 |  if_ae	add	_var08, ##1000
05c98     01 40 06 F1 | 	add	_var08, #1
05c9c     24 40 5E F2 | 	cmps	_var08, #36 wcz
05ca0     9C FF 9F CD |  if_b	jmp	#LR__0236
05ca4                 | LR__0237
05ca4                 | ' 
05ca4                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05ca4     1F 49 82 F1 | 	sub	_var12, _var07
05ca8     02 72 66 F0 | 	shl	arg01, #2
05cac     EF 0E 06 F1 | 	add	objptr, #239
05cb0     07 73 02 F1 | 	add	arg01, objptr
05cb4     39 49 62 FC | 	wrlong	_var12, arg01
05cb8     EF 0E 86 F1 | 	sub	objptr, #239
05cbc                 | LR__0238
05cbc                 | _trackerplayer_spin2_doPortamento_ret
05cbc     2D 00 64 FD | 	ret
05cc0                 | 
05cc0                 | ' 
05cc0                 | ' 
05cc0                 | ' PRI doVolumeSlide(channel)
05cc0                 | _trackerplayer_spin2_doVolumeSlide
05cc0                 | ' 
05cc0                 | '   if x > 0
05cc0     B7 0F 06 F1 | 	add	objptr, #439
05cc4     07 33 C2 FA | 	rdbyte	_var01, objptr
05cc8     B7 0F 86 F1 | 	sub	objptr, #439
05ccc     00 32 5E F2 | 	cmps	_var01, #0 wcz
05cd0     38 00 90 ED |  if_be	jmp	#LR__0239
05cd4                 | '     currVolume[channel] += x
05cd4     39 35 02 F6 | 	mov	_var02, arg01
05cd8     02 34 66 F0 | 	shl	_var02, #2
05cdc     FF 0E 06 F1 | 	add	objptr, #255
05ce0     07 35 02 F1 | 	add	_var02, objptr
05ce4     1A 33 02 FB | 	rdlong	_var01, _var02
05ce8     B8 0E 06 F1 | 	add	objptr, #184
05cec     07 37 C2 FA | 	rdbyte	_var03, objptr
05cf0     1B 33 02 F1 | 	add	_var01, _var03
05cf4     39 39 02 F6 | 	mov	_var04, arg01
05cf8     02 38 66 F0 | 	shl	_var04, #2
05cfc     B8 0E 86 F1 | 	sub	objptr, #184
05d00     07 39 02 F1 | 	add	_var04, objptr
05d04     1C 33 62 FC | 	wrlong	_var01, _var04
05d08     FF 0E 86 F1 | 	sub	objptr, #255
05d0c                 | LR__0239
05d0c                 | '   if y > 0
05d0c     B8 0F 06 F1 | 	add	objptr, #440
05d10     07 33 C2 FA | 	rdbyte	_var01, objptr
05d14     B8 0F 86 F1 | 	sub	objptr, #440
05d18     00 32 5E F2 | 	cmps	_var01, #0 wcz
05d1c     34 00 90 ED |  if_be	jmp	#LR__0240
05d20                 | '     currVolume[channel] -= y
05d20     39 35 02 F6 | 	mov	_var02, arg01
05d24     02 34 66 F0 | 	shl	_var02, #2
05d28     FF 0E 06 F1 | 	add	objptr, #255
05d2c     07 35 02 F1 | 	add	_var02, objptr
05d30     1A 33 02 FB | 	rdlong	_var01, _var02
05d34     B9 0E 06 F1 | 	add	objptr, #185
05d38     07 37 C2 FA | 	rdbyte	_var03, objptr
05d3c     1B 33 82 F1 | 	sub	_var01, _var03
05d40     02 72 66 F0 | 	shl	arg01, #2
05d44     B9 0E 86 F1 | 	sub	objptr, #185
05d48     07 73 02 F1 | 	add	arg01, objptr
05d4c     39 33 62 FC | 	wrlong	_var01, arg01
05d50     FF 0E 86 F1 | 	sub	objptr, #255
05d54                 | LR__0240
05d54                 | _trackerplayer_spin2_doVolumeSlide_ret
05d54     2D 00 64 FD | 	ret
05d58                 | 
05d58                 | ' 
05d58                 | ' 
05d58                 | ' '--------------------------------------------------------------
05d58                 | ' '---------- Init the variables, start the cog. ----------------
05d58                 | ' '--------------------------------------------------------------
05d58                 | ' 
05d58                 | ' pub start() :cog,base | iii
05d58                 | _audio018_spin2_start
05d58     07 5A 05 F6 | 	mov	COUNT_, #7
05d5c     B0 00 A0 FD | 	call	#pushregs_
05d60                 | ' 
05d60                 | ' base:=@channel1[0]
05d60     07 81 02 F6 | 	mov	local01, objptr
05d64                 | ' 
05d64                 | ' repeat iii from 0 to 7
05d64     00 82 06 F6 | 	mov	local02, #0
05d68     A0 A3 9F FE | 	loc	pa,	#(@LR__0242-@LR__0241)
05d6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d70                 | LR__0241
05d70                 | '   long [base+32*iii]:=0
05d70     40 85 02 F6 | 	mov	local03, local01
05d74     41 87 02 F6 | 	mov	local04, local02
05d78     05 86 66 F0 | 	shl	local04, #5
05d7c     43 85 02 F1 | 	add	local03, local04
05d80     42 01 68 FC | 	wrlong	#0, local03
05d84                 | '   long [base+32*iii+4]:=0
05d84     40 85 02 F6 | 	mov	local03, local01
05d88     41 87 02 F6 | 	mov	local04, local02
05d8c     05 86 66 F0 | 	shl	local04, #5
05d90     43 85 02 F1 | 	add	local03, local04
05d94     04 84 06 F1 | 	add	local03, #4
05d98     42 01 68 FC | 	wrlong	#0, local03
05d9c                 | '   long[base+32*iii+12]:=0
05d9c     40 85 02 F6 | 	mov	local03, local01
05da0     41 87 02 F6 | 	mov	local04, local02
05da4     05 86 66 F0 | 	shl	local04, #5
05da8     43 85 02 F1 | 	add	local03, local04
05dac     0C 84 06 F1 | 	add	local03, #12
05db0     42 01 68 FC | 	wrlong	#0, local03
05db4                 | '   long[base+32*iii+16]:=2 
05db4     40 85 02 F6 | 	mov	local03, local01
05db8     41 87 02 F6 | 	mov	local04, local02
05dbc     05 86 66 F0 | 	shl	local04, #5
05dc0     43 85 02 F1 | 	add	local03, local04
05dc4     10 84 06 F1 | 	add	local03, #16
05dc8     42 05 68 FC | 	wrlong	#2, local03
05dcc                 | '   word[base+32*iii+20]:=0
05dcc     40 85 02 F6 | 	mov	local03, local01
05dd0     41 87 02 F6 | 	mov	local04, local02
05dd4     05 86 66 F0 | 	shl	local04, #5
05dd8     43 85 02 F1 | 	add	local03, local04
05ddc     14 84 06 F1 | 	add	local03, #20
05de0     42 01 58 FC | 	wrword	#0, local03
05de4                 | '   word[base+32*iii+22]:=8192
05de4     40 85 02 F6 | 	mov	local03, local01
05de8     41 87 02 F6 | 	mov	local04, local02
05dec     05 86 66 F0 | 	shl	local04, #5
05df0     43 85 02 F1 | 	add	local03, local04
05df4     16 84 06 F1 | 	add	local03, #22
05df8     10 00 80 FF 
05dfc     42 01 58 FC | 	wrword	##8192, local03
05e00                 | '   word[base+32*iii+24]:=100+2*iii
05e00     41 87 02 F6 | 	mov	local04, local02
05e04     01 86 66 F0 | 	shl	local04, #1
05e08     64 84 06 F6 | 	mov	local03, #100
05e0c     43 85 02 F1 | 	add	local03, local04
05e10     40 89 02 F6 | 	mov	local05, local01
05e14     41 8B 02 F6 | 	mov	local06, local02
05e18     05 8A 66 F0 | 	shl	local06, #5
05e1c     45 89 02 F1 | 	add	local05, local06
05e20     18 88 06 F1 | 	add	local05, #24
05e24     44 85 52 FC | 	wrword	local03, local05
05e28                 | '   word[base+32*iii+26]:=2
05e28     40 85 02 F6 | 	mov	local03, local01
05e2c     41 87 02 F6 | 	mov	local04, local02
05e30     05 86 66 F0 | 	shl	local04, #5
05e34     43 85 02 F1 | 	add	local03, local04
05e38     1A 84 06 F1 | 	add	local03, #26
05e3c     42 05 58 FC | 	wrword	#2, local03
05e40                 | '   long [base+32*iii+8]:=@null | $C0000000
05e40     01 00 00 FF 
05e44     FC 16 06 F1 | 	add	ptr__audio018_spin2_dat__, ##764
05e48     0B 85 02 F6 | 	mov	local03, ptr__audio018_spin2_dat__
05e4c     3E 84 26 F4 | 	bith	local03, #62
05e50     40 89 02 F6 | 	mov	local05, local01
05e54     41 8B 02 F6 | 	mov	local06, local02
05e58     05 8A 66 F0 | 	shl	local06, #5
05e5c     45 89 02 F1 | 	add	local05, local06
05e60     08 88 06 F1 | 	add	local05, #8
05e64     44 85 62 FC | 	wrlong	local03, local05
05e68     01 82 06 F1 | 	add	local02, #1
05e6c     08 82 5E F2 | 	cmps	local02, #8 wcz
05e70     01 00 00 FF 
05e74     FC 16 86 F1 | 	sub	ptr__audio018_spin2_dat__, ##764
05e78     F4 FE 9F CD |  if_b	jmp	#LR__0241
05e7c                 | LR__0242
05e7c                 | '   
05e7c                 | ' cog:=coginit(16,@audio,@channel1)
05e7c     0B 75 02 F6 | 	mov	arg02, ptr__audio018_spin2_dat__
05e80     07 77 02 F6 | 	mov	arg03, objptr
05e84     10 72 06 F6 | 	mov	arg01, #16
05e88     28 76 62 FD | 	setq	arg03
05e8c     3A 73 F2 FC | 	coginit	arg01, arg02 wc
05e90     01 72 66 C6 |  if_b	neg	arg01, #1
05e94     39 2D 02 F6 | 	mov	result1, arg01
05e98     16 8D 02 F6 | 	mov	local07, result1
05e9c                 | ' waitms(100)
05e9c     64 72 06 F6 | 	mov	arg01, #100
05ea0     C8 04 B0 FD | 	call	#__system___waitms
05ea4                 | ' return cog,base
05ea4     40 2F 02 F6 | 	mov	result2, local01
05ea8     46 2D 02 F6 | 	mov	result1, local07
05eac     AF F0 03 F6 | 	mov	ptra, fp
05eb0     BF 00 A0 FD | 	call	#popregs_
05eb4                 | _audio018_spin2_start_ret
05eb4     2D 00 64 FD | 	ret
05eb8                 | hubexit
05eb8     81 00 80 FD | 	jmp	#cogexit
05ebc                 | 
05ebc                 | __system___setbaud
05ebc     14 AE 06 FB | 	rdlong	muldiva_, #20
05ec0     39 B1 02 F6 | 	mov	muldivb_, arg01
05ec4     D0 00 A0 FD | 	call	#divide_
05ec8     40 7C 64 FD | 	dirl	#62
05ecc     40 7E 64 FD | 	dirl	#63
05ed0     0A B1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
05ed4     10 B0 66 F0 | 	shl	muldivb_, #16
05ed8     07 74 06 F6 | 	mov	arg02, #7
05edc     58 75 02 F1 | 	add	arg02, muldivb_
05ee0     3E F8 0C FC | 	wrpin	#124, #62
05ee4     3E 74 16 FC | 	wxpin	arg02, #62
05ee8     3F 7C 0C FC | 	wrpin	#62, #63
05eec     14 74 06 F1 | 	add	arg02, #20
05ef0     3F 74 16 FC | 	wxpin	arg02, #63
05ef4     41 7C 64 FD | 	dirh	#62
05ef8     41 7E 64 FD | 	dirh	#63
05efc                 | __system___setbaud_ret
05efc     2D 00 64 FD | 	ret
05f00                 | 
05f00                 | __system___txraw
05f00     02 5A 05 F6 | 	mov	COUNT_, #2
05f04     B0 00 A0 FD | 	call	#pushregs_
05f08     39 81 02 F6 | 	mov	local01, arg01
05f0c     0A 83 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05f10     0C 00 90 5D |  if_ne	jmp	#LR__0243
05f14     42 0F 00 FF 
05f18     80 72 06 F6 | 	mov	arg01, ##2000000
05f1c     9C FF BF FD | 	call	#__system___setbaud
05f20                 | LR__0243
05f20     3E 80 26 FC | 	wypin	local01, #62
05f24     1F 02 64 FD | 	waitx	#1
05f28     DC A0 9F FE | 	loc	pa,	#(@LR__0245-@LR__0244)
05f2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f30                 | LR__0244
05f30     40 7C 74 FD | 	testp	#62 wc
05f34     F8 FF 9F 3D |  if_nc	jmp	#LR__0244
05f38                 | LR__0245
05f38     01 2C 06 F6 | 	mov	result1, #1
05f3c     AF F0 03 F6 | 	mov	ptra, fp
05f40     BF 00 A0 FD | 	call	#popregs_
05f44                 | __system___txraw_ret
05f44     2D 00 64 FD | 	ret
05f48                 | 
05f48                 | __system___rxraw
05f48     0B 5A 05 F6 | 	mov	COUNT_, #11
05f4c     B0 00 A0 FD | 	call	#pushregs_
05f50     39 81 02 F6 | 	mov	local01, arg01
05f54     0A 83 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05f58     0C 00 90 5D |  if_ne	jmp	#LR__0246
05f5c     42 0F 00 FF 
05f60     80 72 06 F6 | 	mov	arg01, ##2000000
05f64     54 FF BF FD | 	call	#__system___setbaud
05f68                 | LR__0246
05f68     00 80 0E F2 | 	cmp	local01, #0 wz
05f6c     18 00 90 AD |  if_e	jmp	#LR__0247
05f70     1A 84 62 FD | 	getct	local03
05f74     14 86 06 FB | 	rdlong	local04, #20
05f78     0A 86 46 F0 | 	shr	local04, #10
05f7c     43 81 02 FD | 	qmul	local01, local04
05f80     18 88 62 FD | 	getqx	local05
05f84     44 85 02 F1 | 	add	local03, local05
05f88                 | LR__0247
05f88     01 8A 66 F6 | 	neg	local06, #1
05f8c     00 8C 06 F6 | 	mov	local07, #0
05f90     04 14 06 F1 | 	add	ptr___system__dat__, #4
05f94     0A 8F 02 FB | 	rdlong	local08, ptr___system__dat__
05f98     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05f9c                 | LR__0248
05f9c     08 8E 16 F4 | 	testb	local08, #8 wc
05fa0     09 8E 76 F4 | 	testbn	local08, #9 andc
05fa4     0A 8E 46 F0 | 	shr	local08, #10
05fa8     01 8C 06 C6 |  if_b	mov	local07, #1
05fac     10 00 90 CD |  if_b	jmp	#LR__0249
05fb0     40 7E 6C FD | 	testp	#63 wz
05fb4     01 8C 06 A6 |  if_e	mov	local07, #1
05fb8     3F 8E 8E AA |  if_e	rdpin	local08, #63
05fbc     04 8E 46 A0 |  if_e	shr	local08, #4
05fc0                 | LR__0249
05fc0     00 82 06 F6 | 	mov	local02, #0
05fc4     00 8C 0E F2 | 	cmp	local07, #0 wz
05fc8     01 82 66 56 |  if_ne	neg	local02, #1
05fcc     00 90 06 F6 | 	mov	local09, #0
05fd0     00 86 06 F6 | 	mov	local04, #0
05fd4     00 80 0E F2 | 	cmp	local01, #0 wz
05fd8     01 86 66 56 |  if_ne	neg	local04, #1
05fdc     00 88 06 F6 | 	mov	local05, #0
05fe0     00 92 06 F6 | 	mov	local10, #0
05fe4     1A 94 62 FD | 	getct	local11
05fe8     42 95 82 F1 | 	sub	local11, local03
05fec     00 94 5E F2 | 	cmps	local11, #0 wcz
05ff0     01 92 66 C6 |  if_b	neg	local10, #1
05ff4     00 92 0E F2 | 	cmp	local10, #0 wz
05ff8     01 88 66 56 |  if_ne	neg	local05, #1
05ffc     44 87 CA F7 | 	test	local04, local05 wz
06000     01 90 66 56 |  if_ne	neg	local09, #1
06004     48 83 4A F5 | 	or	local02, local09 wz
06008     90 FF 9F AD |  if_e	jmp	#LR__0248
0600c     00 8C 0E F2 | 	cmp	local07, #0 wz
06010     47 8B 02 56 |  if_ne	mov	local06, local08
06014     FF 8A 06 55 |  if_ne	and	local06, #255
06018     04 14 06 F1 | 	add	ptr___system__dat__, #4
0601c     0A 8F 62 FC | 	wrlong	local08, ptr___system__dat__
06020     04 14 86 F1 | 	sub	ptr___system__dat__, #4
06024     45 2D 02 F6 | 	mov	result1, local06
06028     AF F0 03 F6 | 	mov	ptra, fp
0602c     BF 00 A0 FD | 	call	#popregs_
06030                 | __system___rxraw_ret
06030     2D 00 64 FD | 	ret
06034                 | 
06034                 | __system____builtin_memmove
06034     39 33 02 F6 | 	mov	_var01, arg01
06038     3A 73 5A F2 | 	cmps	arg01, arg02 wcz
0603c     50 00 90 3D |  if_ae	jmp	#LR__0257
06040     DC 9F 9F FE | 	loc	pa,	#(@LR__0251-@LR__0250)
06044     93 00 A0 FD | 	call	#FCACHE_LOAD_
06048                 | LR__0250
06048     03 76 5E F2 | 	cmps	arg03, #3 wcz
0604c     18 00 90 ED |  if_be	jmp	#LR__0252
06050     3A 35 02 FB | 	rdlong	_var02, arg02
06054     39 35 62 FC | 	wrlong	_var02, arg01
06058     04 72 06 F1 | 	add	arg01, #4
0605c     04 74 06 F1 | 	add	arg02, #4
06060     04 76 86 F1 | 	sub	arg03, #4
06064     E0 FF 9F FD | 	jmp	#LR__0250
06068                 | LR__0251
06068                 | LR__0252
06068     3B 37 0A F6 | 	mov	_var03, arg03 wz
0606c     4C 00 90 AD |  if_e	jmp	#LR__0263
06070     A0 9F 9F FE | 	loc	pa,	#(@LR__0255-@LR__0253)
06074     93 00 A0 FD | 	call	#FCACHE_LOAD_
06078                 | LR__0253
06078     1B 09 D8 FC | 	rep	@LR__0256, _var03
0607c                 | LR__0254
0607c     3A 35 C2 FA | 	rdbyte	_var02, arg02
06080     39 35 42 FC | 	wrbyte	_var02, arg01
06084     01 72 06 F1 | 	add	arg01, #1
06088     01 74 06 F1 | 	add	arg02, #1
0608c                 | LR__0255
0608c                 | LR__0256
0608c     2C 00 90 FD | 	jmp	#LR__0263
06090                 | LR__0257
06090     3B 73 02 F1 | 	add	arg01, arg03
06094     3B 75 02 F1 | 	add	arg02, arg03
06098     3B 39 0A F6 | 	mov	_var04, arg03 wz
0609c     1C 00 90 AD |  if_e	jmp	#LR__0262
060a0     70 9F 9F FE | 	loc	pa,	#(@LR__0260-@LR__0258)
060a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
060a8                 | LR__0258
060a8     1C 09 D8 FC | 	rep	@LR__0261, _var04
060ac                 | LR__0259
060ac     01 72 86 F1 | 	sub	arg01, #1
060b0     01 74 86 F1 | 	sub	arg02, #1
060b4     3A 35 C2 FA | 	rdbyte	_var02, arg02
060b8     39 35 42 FC | 	wrbyte	_var02, arg01
060bc                 | LR__0260
060bc                 | LR__0261
060bc                 | LR__0262
060bc                 | LR__0263
060bc     19 2D 02 F6 | 	mov	result1, _var01
060c0                 | __system____builtin_memmove_ret
060c0     2D 00 64 FD | 	ret
060c4                 | 
060c4                 | __system__longmove
060c4     39 33 02 F6 | 	mov	_var01, arg01
060c8     3A 73 5A F2 | 	cmps	arg01, arg02 wcz
060cc     28 00 90 3D |  if_ae	jmp	#LR__0268
060d0     3B 35 0A F6 | 	mov	_var02, arg03 wz
060d4     5C 00 90 AD |  if_e	jmp	#LR__0274
060d8     38 9F 9F FE | 	loc	pa,	#(@LR__0266-@LR__0264)
060dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
060e0                 | LR__0264
060e0     1A 09 D8 FC | 	rep	@LR__0267, _var02
060e4                 | LR__0265
060e4     3A 37 02 FB | 	rdlong	_var03, arg02
060e8     39 37 62 FC | 	wrlong	_var03, arg01
060ec     04 72 06 F1 | 	add	arg01, #4
060f0     04 74 06 F1 | 	add	arg02, #4
060f4                 | LR__0266
060f4                 | LR__0267
060f4     3C 00 90 FD | 	jmp	#LR__0274
060f8                 | LR__0268
060f8     3B 39 02 F6 | 	mov	_var04, arg03
060fc     02 38 66 F0 | 	shl	_var04, #2
06100     1C 73 02 F1 | 	add	arg01, _var04
06104     3B 39 02 F6 | 	mov	_var04, arg03
06108     02 38 66 F0 | 	shl	_var04, #2
0610c     1C 75 02 F1 | 	add	arg02, _var04
06110     3B 3B 0A F6 | 	mov	_var05, arg03 wz
06114     1C 00 90 AD |  if_e	jmp	#LR__0273
06118     F8 9E 9F FE | 	loc	pa,	#(@LR__0271-@LR__0269)
0611c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06120                 | LR__0269
06120     1D 09 D8 FC | 	rep	@LR__0272, _var05
06124                 | LR__0270
06124     04 72 86 F1 | 	sub	arg01, #4
06128     04 74 86 F1 | 	sub	arg02, #4
0612c     3A 37 02 FB | 	rdlong	_var03, arg02
06130     39 37 62 FC | 	wrlong	_var03, arg01
06134                 | LR__0271
06134                 | LR__0272
06134                 | LR__0273
06134                 | LR__0274
06134     19 2D 02 F6 | 	mov	result1, _var01
06138                 | __system__longmove_ret
06138     2D 00 64 FD | 	ret
0613c                 | 
0613c                 | __system____topofstack
0613c     00 5A 05 F6 | 	mov	COUNT_, #0
06140     B0 00 A0 FD | 	call	#pushregs_
06144     08 F0 07 F1 | 	add	ptra, #8
06148     04 5E 05 F1 | 	add	fp, #4
0614c     AF 72 62 FC | 	wrlong	arg01, fp
06150     AF 2C 02 F6 | 	mov	result1, fp
06154     04 5E 85 F1 | 	sub	fp, #4
06158     AF F0 03 F6 | 	mov	ptra, fp
0615c     BF 00 A0 FD | 	call	#popregs_
06160                 | __system____topofstack_ret
06160     2D 00 64 FD | 	ret
06164                 | 
06164                 | __system___make_methodptr
06164     04 5A 05 F6 | 	mov	COUNT_, #4
06168     B0 00 A0 FD | 	call	#pushregs_
0616c     39 81 02 F6 | 	mov	local01, arg01
06170     3A 83 02 F6 | 	mov	local02, arg02
06174     08 72 06 F6 | 	mov	arg01, #8
06178     2C 0D B0 FD | 	call	#__system___gc_alloc_managed
0617c     16 85 0A F6 | 	mov	local03, result1 wz
06180     10 00 90 AD |  if_e	jmp	#LR__0275
06184     42 81 62 FC | 	wrlong	local01, local03
06188     42 87 02 F6 | 	mov	local04, local03
0618c     04 86 06 F1 | 	add	local04, #4
06190     43 83 62 FC | 	wrlong	local02, local04
06194                 | LR__0275
06194     42 2D 02 F6 | 	mov	result1, local03
06198     AF F0 03 F6 | 	mov	ptra, fp
0619c     BF 00 A0 FD | 	call	#popregs_
061a0                 | __system___make_methodptr_ret
061a0     2D 00 64 FD | 	ret
061a4                 | 
061a4                 | __system___lockmem
061a4     02 5A 05 F6 | 	mov	COUNT_, #2
061a8     B0 00 A0 FD | 	call	#pushregs_
061ac     01 2C 62 FD | 	cogid	result1
061b0     16 81 02 F6 | 	mov	local01, result1
061b4     00 81 06 F1 | 	add	local01, #256
061b8                 | LR__0276
061b8     39 83 0A FB | 	rdlong	local02, arg01 wz
061bc     39 81 62 AC |  if_e	wrlong	local01, arg01
061c0     39 83 02 AB |  if_e	rdlong	local02, arg01
061c4     39 83 02 AB |  if_e	rdlong	local02, arg01
061c8     40 83 0A F2 | 	cmp	local02, local01 wz
061cc     E8 FF 9F 5D |  if_ne	jmp	#LR__0276
061d0     AF F0 03 F6 | 	mov	ptra, fp
061d4     BF 00 A0 FD | 	call	#popregs_
061d8                 | __system___lockmem_ret
061d8     2D 00 64 FD | 	ret
061dc                 | 
061dc                 | __system___string_concat
061dc     07 5A 05 F6 | 	mov	COUNT_, #7
061e0     B0 00 A0 FD | 	call	#pushregs_
061e4     39 81 02 F6 | 	mov	local01, arg01
061e8     3A 83 02 F6 | 	mov	local02, arg02
061ec     40 73 02 F6 | 	mov	arg01, local01
061f0     00 84 06 F6 | 	mov	local03, #0
061f4     18 9E 9F FE | 	loc	pa,	#(@LR__0278-@LR__0277)
061f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
061fc                 | LR__0277
061fc     39 87 CA FA | 	rdbyte	local04, arg01 wz
06200     01 84 06 51 |  if_ne	add	local03, #1
06204     01 72 06 51 |  if_ne	add	arg01, #1
06208     F0 FF 9F 5D |  if_ne	jmp	#LR__0277
0620c                 | LR__0278
0620c     42 89 02 F6 | 	mov	local05, local03
06210     41 73 02 F6 | 	mov	arg01, local02
06214     00 84 06 F6 | 	mov	local03, #0
06218     F4 9D 9F FE | 	loc	pa,	#(@LR__0280-@LR__0279)
0621c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06220                 | LR__0279
06220     39 87 CA FA | 	rdbyte	local04, arg01 wz
06224     01 84 06 51 |  if_ne	add	local03, #1
06228     01 72 06 51 |  if_ne	add	arg01, #1
0622c     F0 FF 9F 5D |  if_ne	jmp	#LR__0279
06230                 | LR__0280
06230     42 2D 02 F6 | 	mov	result1, local03
06234     16 8B 02 F6 | 	mov	local06, result1
06238     44 73 02 F6 | 	mov	arg01, local05
0623c     45 73 02 F1 | 	add	arg01, local06
06240     01 72 06 F1 | 	add	arg01, #1
06244     60 0C B0 FD | 	call	#__system___gc_alloc_managed
06248     16 8D 0A F6 | 	mov	local07, result1 wz
0624c     28 00 90 AD |  if_e	jmp	#LR__0281
06250     46 73 02 F6 | 	mov	arg01, local07
06254     40 75 02 F6 | 	mov	arg02, local01
06258     44 77 02 F6 | 	mov	arg03, local05
0625c     D4 FD BF FD | 	call	#__system____builtin_memmove
06260     46 73 02 F6 | 	mov	arg01, local07
06264     44 73 02 F1 | 	add	arg01, local05
06268     01 8A 06 F1 | 	add	local06, #1
0626c     41 75 02 F6 | 	mov	arg02, local02
06270     45 77 02 F6 | 	mov	arg03, local06
06274     BC FD BF FD | 	call	#__system____builtin_memmove
06278                 | LR__0281
06278     46 2D 02 F6 | 	mov	result1, local07
0627c     AF F0 03 F6 | 	mov	ptra, fp
06280     BF 00 A0 FD | 	call	#popregs_
06284                 | __system___string_concat_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | __system___tx
06288     02 5A 05 F6 | 	mov	COUNT_, #2
0628c     B0 00 A0 FD | 	call	#pushregs_
06290     39 81 02 F6 | 	mov	local01, arg01
06294     0A 80 0E F2 | 	cmp	local01, #10 wz
06298     20 00 90 5D |  if_ne	jmp	#LR__0282
0629c     08 14 06 F1 | 	add	ptr___system__dat__, #8
062a0     0A 83 02 FB | 	rdlong	local02, ptr___system__dat__
062a4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
062a8     02 82 CE F7 | 	test	local02, #2 wz
062ac     0C 00 90 AD |  if_e	jmp	#LR__0282
062b0     0D 82 06 F6 | 	mov	local02, #13
062b4     0D 72 06 F6 | 	mov	arg01, #13
062b8     44 FC BF FD | 	call	#__system___txraw
062bc                 | LR__0282
062bc     40 73 02 F6 | 	mov	arg01, local01
062c0     3C FC BF FD | 	call	#__system___txraw
062c4     AF F0 03 F6 | 	mov	ptra, fp
062c8     BF 00 A0 FD | 	call	#popregs_
062cc                 | __system___tx_ret
062cc     2D 00 64 FD | 	ret
062d0                 | 
062d0                 | __system___rx
062d0     02 5A 05 F6 | 	mov	COUNT_, #2
062d4     B0 00 A0 FD | 	call	#pushregs_
062d8                 | LR__0283
062d8     00 72 06 F6 | 	mov	arg01, #0
062dc     68 FC BF FD | 	call	#__system___rxraw
062e0     16 81 02 F6 | 	mov	local01, result1
062e4     FF FF 7F FF 
062e8     FF 81 0E F2 | 	cmp	local01, ##-1 wz
062ec     E8 FF 9F AD |  if_e	jmp	#LR__0283
062f0     0D 80 0E F2 | 	cmp	local01, #13 wz
062f4     14 00 90 5D |  if_ne	jmp	#LR__0284
062f8     08 14 06 F1 | 	add	ptr___system__dat__, #8
062fc     0A 83 02 FB | 	rdlong	local02, ptr___system__dat__
06300     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06304     02 82 CE F7 | 	test	local02, #2 wz
06308     0A 80 06 56 |  if_ne	mov	local01, #10
0630c                 | LR__0284
0630c     08 14 06 F1 | 	add	ptr___system__dat__, #8
06310     0A 83 02 FB | 	rdlong	local02, ptr___system__dat__
06314     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06318     01 82 CE F7 | 	test	local02, #1 wz
0631c     1C 00 90 AD |  if_e	jmp	#LR__0287
06320     7F 80 0E F2 | 	cmp	local01, #127 wz
06324     0C 00 90 5D |  if_ne	jmp	#LR__0285
06328     08 72 06 F6 | 	mov	arg01, #8
0632c     58 FF BF FD | 	call	#__system___tx
06330     08 00 90 FD | 	jmp	#LR__0286
06334                 | LR__0285
06334     40 73 02 F6 | 	mov	arg01, local01
06338     4C FF BF FD | 	call	#__system___tx
0633c                 | LR__0286
0633c                 | LR__0287
0633c     40 2D 02 F6 | 	mov	result1, local01
06340     AF F0 03 F6 | 	mov	ptra, fp
06344     BF 00 A0 FD | 	call	#popregs_
06348                 | __system___rx_ret
06348     2D 00 64 FD | 	ret
0634c                 | 
0634c                 | __system___pinread
0634c     20 72 CE F7 | 	test	arg01, #32 wz
06350     FF 33 02 56 |  if_ne	mov	_var01, inb
06354     FE 33 02 A6 |  if_e	mov	_var01, ina
06358     39 33 42 F0 | 	shr	_var01, arg01
0635c     06 72 46 F0 | 	shr	arg01, #6
06360     39 33 42 F7 | 	zerox	_var01, arg01
06364     19 2D 02 F6 | 	mov	result1, _var01
06368                 | __system___pinread_ret
06368     2D 00 64 FD | 	ret
0636c                 | 
0636c                 | __system___waitms
0636c     03 5A 05 F6 | 	mov	COUNT_, #3
06370     B0 00 A0 FD | 	call	#pushregs_
06374     39 81 02 F6 | 	mov	local01, arg01
06378     14 82 06 FB | 	rdlong	local02, #20
0637c     98 9C 9F FE | 	loc	pa,	#(@LR__0289-@LR__0288)
06380     93 00 A0 FD | 	call	#FCACHE_LOAD_
06384                 | LR__0288
06384     01 00 00 FF 
06388     E8 81 5E F2 | 	cmps	local01, ##1000 wcz
0638c     1F 82 62 1D |  if_a	waitx	local02
06390     01 00 00 1F 
06394     E8 81 86 11 |  if_a	sub	local01, ##1000
06398     E8 FF 9F 1D |  if_a	jmp	#LR__0288
0639c                 | LR__0289
0639c     0C 14 06 F1 | 	add	ptr___system__dat__, #12
063a0     0A 85 0A FB | 	rdlong	local03, ptr___system__dat__ wz
063a4     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
063a8     20 00 90 5D |  if_ne	jmp	#LR__0290
063ac     41 AF 02 F6 | 	mov	muldiva_, local02
063b0     01 00 00 FF 
063b4     E8 B1 06 F6 | 	mov	muldivb_, ##1000
063b8     CC 00 A0 FD | 	call	#unsdivide_
063bc     58 85 02 F6 | 	mov	local03, muldivb_
063c0     0C 14 06 F1 | 	add	ptr___system__dat__, #12
063c4     0A B1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
063c8     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
063cc                 | LR__0290
063cc     00 80 5E F2 | 	cmps	local01, #0 wcz
063d0     42 81 02 1D |  if_a	qmul	local01, local03
063d4     18 72 62 1D |  if_a	getqx	arg01
063d8     1F 72 62 1D |  if_a	waitx	arg01
063dc     AF F0 03 F6 | 	mov	ptra, fp
063e0     BF 00 A0 FD | 	call	#popregs_
063e4                 | __system___waitms_ret
063e4     2D 00 64 FD | 	ret
063e8                 | 
063e8                 | __system___waitus
063e8     02 5A 05 F6 | 	mov	COUNT_, #2
063ec     B0 00 A0 FD | 	call	#pushregs_
063f0     39 81 02 F6 | 	mov	local01, arg01
063f4     10 14 06 F1 | 	add	ptr___system__dat__, #16
063f8     0A 83 0A FB | 	rdlong	local02, ptr___system__dat__ wz
063fc     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06400     20 00 90 5D |  if_ne	jmp	#LR__0291
06404     14 AE 06 FB | 	rdlong	muldiva_, #20
06408     A1 07 00 FF 
0640c     40 B0 06 F6 | 	mov	muldivb_, ##1000000
06410     CC 00 A0 FD | 	call	#unsdivide_
06414     58 83 02 F6 | 	mov	local02, muldivb_
06418     10 14 06 F1 | 	add	ptr___system__dat__, #16
0641c     0A B1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06420     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06424                 | LR__0291
06424     41 81 02 FD | 	qmul	local01, local02
06428     18 72 62 FD | 	getqx	arg01
0642c     1F 72 62 FD | 	waitx	arg01
06430     AF F0 03 F6 | 	mov	ptra, fp
06434     BF 00 A0 FD | 	call	#popregs_
06438                 | __system___waitus_ret
06438     2D 00 64 FD | 	ret
0643c                 | 
0643c                 | __system___basic_open
0643c     05 5A 05 F6 | 	mov	COUNT_, #5
06440     B0 00 A0 FD | 	call	#pushregs_
06444     3A 81 02 F6 | 	mov	local01, arg02
06448     3B 83 02 F6 | 	mov	local02, arg03
0644c     3C 85 02 F6 | 	mov	local03, arg04
06450     8C 12 B0 FD | 	call	#__system____getftab
06454     16 87 0A F6 | 	mov	local04, result1 wz
06458     18 00 90 5D |  if_ne	jmp	#LR__0292
0645c     03 73 02 F6 | 	mov	arg01, abortchain
06460     0C 74 06 F6 | 	mov	arg02, #12
06464     01 76 06 F6 | 	mov	arg03, #1
06468     F0 00 A0 FD | 	call	#__longjmp
0646c     01 2C 66 F6 | 	neg	result1, #1
06470     70 00 90 FD | 	jmp	#LR__0296
06474                 | LR__0292
06474     00 80 0E F2 | 	cmp	local01, #0 wz
06478     48 00 90 AD |  if_e	jmp	#LR__0294
0647c     04 72 06 F6 | 	mov	arg01, #4
06480     24 0A B0 FD | 	call	#__system___gc_alloc_managed
06484     16 89 0A F6 | 	mov	local05, result1 wz
06488     18 00 90 5D |  if_ne	jmp	#LR__0293
0648c     03 73 02 F6 | 	mov	arg01, abortchain
06490     07 74 06 F6 | 	mov	arg02, #7
06494     01 76 06 F6 | 	mov	arg03, #1
06498     F0 00 A0 FD | 	call	#__longjmp
0649c     01 2C 66 F6 | 	neg	result1, #1
064a0     40 00 90 FD | 	jmp	#LR__0296
064a4                 | LR__0293
064a4     44 81 62 FC | 	wrlong	local01, local05
064a8     08 75 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
064ac     44 73 02 F6 | 	mov	arg01, local05
064b0     B0 FC BF FD | 	call	#__system___make_methodptr
064b4     18 86 06 F1 | 	add	local04, #24
064b8     43 2D 62 FC | 	wrlong	result1, local04
064bc     18 86 86 F1 | 	sub	local04, #24
064c0     0C 00 90 FD | 	jmp	#LR__0295
064c4                 | LR__0294
064c4     18 86 06 F1 | 	add	local04, #24
064c8     43 81 62 FC | 	wrlong	local01, local04
064cc     18 86 86 F1 | 	sub	local04, #24
064d0                 | LR__0295
064d0     1C 86 06 F1 | 	add	local04, #28
064d4     43 83 62 FC | 	wrlong	local02, local04
064d8     04 86 06 F1 | 	add	local04, #4
064dc     43 85 62 FC | 	wrlong	local03, local04
064e0     00 2C 06 F6 | 	mov	result1, #0
064e4                 | LR__0296
064e4     AF F0 03 F6 | 	mov	ptra, fp
064e8     BF 00 A0 FD | 	call	#popregs_
064ec                 | __system___basic_open_ret
064ec     2D 00 64 FD | 	ret
064f0                 | 
064f0                 | __system___basic_print_char
064f0     05 5A 05 F6 | 	mov	COUNT_, #5
064f4     B0 00 A0 FD | 	call	#pushregs_
064f8     3A 81 02 F6 | 	mov	local01, arg02
064fc     A8 13 B0 FD | 	call	#__system___gettxfunc
06500     16 83 0A F6 | 	mov	local02, result1 wz
06504     00 2C 06 A6 |  if_e	mov	result1, #0
06508     24 00 90 AD |  if_e	jmp	#LR__0297
0650c     41 85 02 FB | 	rdlong	local03, local02
06510     04 82 06 F1 | 	add	local02, #4
06514     41 87 02 FB | 	rdlong	local04, local02
06518     40 73 02 F6 | 	mov	arg01, local01
0651c     07 89 02 F6 | 	mov	local05, objptr
06520     42 0F 02 F6 | 	mov	objptr, local03
06524     2D 86 62 FD | 	call	local04
06528     44 0F 02 F6 | 	mov	objptr, local05
0652c     01 2C 06 F6 | 	mov	result1, #1
06530                 | LR__0297
06530     AF F0 03 F6 | 	mov	ptra, fp
06534     BF 00 A0 FD | 	call	#popregs_
06538                 | __system___basic_print_char_ret
06538     2D 00 64 FD | 	ret
0653c                 | 
0653c                 | __system___basic_print_string
0653c     03 5A 05 F6 | 	mov	COUNT_, #3
06540     B0 00 A0 FD | 	call	#pushregs_
06544     3A 81 02 F6 | 	mov	local01, arg02
06548     3B 83 02 F6 | 	mov	local02, arg03
0654c     58 13 B0 FD | 	call	#__system___gettxfunc
06550     16 85 0A F6 | 	mov	local03, result1 wz
06554     00 2C 06 A6 |  if_e	mov	result1, #0
06558     1C 00 90 AD |  if_e	jmp	#LR__0298
0655c     00 80 0E F2 | 	cmp	local01, #0 wz
06560     00 2C 06 A6 |  if_e	mov	result1, #0
06564     10 00 90 AD |  if_e	jmp	#LR__0298
06568     42 73 02 F6 | 	mov	arg01, local03
0656c     41 75 02 F6 | 	mov	arg02, local02
06570     40 77 02 F6 | 	mov	arg03, local01
06574     B0 00 B0 FD | 	call	#__system___fmtstr
06578                 | LR__0298
06578     AF F0 03 F6 | 	mov	ptra, fp
0657c     BF 00 A0 FD | 	call	#popregs_
06580                 | __system___basic_print_string_ret
06580     2D 00 64 FD | 	ret
06584                 | 
06584                 | __system___basic_print_integer
06584     04 5A 05 F6 | 	mov	COUNT_, #4
06588     B0 00 A0 FD | 	call	#pushregs_
0658c     3A 81 02 F6 | 	mov	local01, arg02
06590     3B 83 02 F6 | 	mov	local02, arg03
06594     3C 85 02 F6 | 	mov	local03, arg04
06598     0C 13 B0 FD | 	call	#__system___gettxfunc
0659c     16 87 0A F6 | 	mov	local04, result1 wz
065a0     00 2C 06 A6 |  if_e	mov	result1, #0
065a4     14 00 90 AD |  if_e	jmp	#LR__0299
065a8     43 73 02 F6 | 	mov	arg01, local04
065ac     41 75 02 F6 | 	mov	arg02, local02
065b0     40 77 02 F6 | 	mov	arg03, local01
065b4     42 79 02 F6 | 	mov	arg04, local03
065b8     64 01 B0 FD | 	call	#__system___fmtnum
065bc                 | LR__0299
065bc     AF F0 03 F6 | 	mov	ptra, fp
065c0     BF 00 A0 FD | 	call	#popregs_
065c4                 | __system___basic_print_integer_ret
065c4     2D 00 64 FD | 	ret
065c8                 | 
065c8                 | __system___fmtchar
065c8     00 5A 05 F6 | 	mov	COUNT_, #0
065cc     B0 00 A0 FD | 	call	#pushregs_
065d0     14 F0 07 F1 | 	add	ptra, #20
065d4     04 5E 05 F1 | 	add	fp, #4
065d8     AF 72 62 FC | 	wrlong	arg01, fp
065dc     04 5E 05 F1 | 	add	fp, #4
065e0     AF 74 62 FC | 	wrlong	arg02, fp
065e4     04 5E 05 F1 | 	add	fp, #4
065e8     AF 76 62 FC | 	wrlong	arg03, fp
065ec     04 5E 05 F1 | 	add	fp, #4
065f0     AF 76 42 FC | 	wrbyte	arg03, fp
065f4     01 5E 05 F1 | 	add	fp, #1
065f8     AF 00 48 FC | 	wrbyte	#0, fp
065fc     0D 5E 85 F1 | 	sub	fp, #13
06600     AF 72 02 FB | 	rdlong	arg01, fp
06604     04 5E 05 F1 | 	add	fp, #4
06608     AF 74 02 FB | 	rdlong	arg02, fp
0660c     08 5E 05 F1 | 	add	fp, #8
06610     AF 76 02 F6 | 	mov	arg03, fp
06614     10 5E 85 F1 | 	sub	fp, #16
06618     0C 00 B0 FD | 	call	#__system___fmtstr
0661c     AF F0 03 F6 | 	mov	ptra, fp
06620     BF 00 A0 FD | 	call	#popregs_
06624                 | __system___fmtchar_ret
06624     2D 00 64 FD | 	ret
06628                 | 
06628                 | __system___fmtstr
06628     0E 5A 05 F6 | 	mov	COUNT_, #14
0662c     B0 00 A0 FD | 	call	#pushregs_
06630     39 81 02 F6 | 	mov	local01, arg01
06634     3A 83 02 F6 | 	mov	local02, arg02
06638     3B 85 02 F6 | 	mov	local03, arg03
0663c     41 87 02 F6 | 	mov	local04, local02
06640     FF 86 06 F5 | 	and	local04, #255
06644     42 73 02 F6 | 	mov	arg01, local03
06648     00 88 06 F6 | 	mov	local05, #0
0664c     C0 99 9F FE | 	loc	pa,	#(@LR__0301-@LR__0300)
06650     93 00 A0 FD | 	call	#FCACHE_LOAD_
06654                 | LR__0300
06654     39 8B CA FA | 	rdbyte	local06, arg01 wz
06658     01 88 06 51 |  if_ne	add	local05, #1
0665c     01 72 06 51 |  if_ne	add	arg01, #1
06660     F0 FF 9F 5D |  if_ne	jmp	#LR__0300
06664                 | LR__0301
06664     44 2D 02 F6 | 	mov	result1, local05
06668     16 8D 02 F6 | 	mov	local07, result1
0666c     00 86 0E F2 | 	cmp	local04, #0 wz
06670     04 00 90 AD |  if_e	jmp	#LR__0302
06674     43 8D 7A F3 | 	fles	local07, local04 wcz
06678                 | LR__0302
06678     40 73 02 F6 | 	mov	arg01, local01
0667c     41 75 02 F6 | 	mov	arg02, local02
06680     46 77 02 F6 | 	mov	arg03, local07
06684     02 78 06 F6 | 	mov	arg04, #2
06688     CC 10 B0 FD | 	call	#__system___fmtpad
0668c     16 8F 02 F6 | 	mov	local08, result1
06690     00 8E 5E F2 | 	cmps	local08, #0 wcz
06694     47 2D 02 C6 |  if_b	mov	result1, local08
06698     78 00 90 CD |  if_b	jmp	#LR__0305
0669c     00 90 06 F6 | 	mov	local09, #0
066a0                 | LR__0303
066a0     46 91 5A F2 | 	cmps	local09, local07 wcz
066a4     44 00 90 3D |  if_ae	jmp	#LR__0304
066a8     40 93 02 F6 | 	mov	local10, local01
066ac     49 95 02 FB | 	rdlong	local11, local10
066b0     04 92 06 F1 | 	add	local10, #4
066b4     49 97 02 FB | 	rdlong	local12, local10
066b8     42 73 C2 FA | 	rdbyte	arg01, local03
066bc     07 99 02 F6 | 	mov	local13, objptr
066c0     4A 0F 02 F6 | 	mov	objptr, local11
066c4     01 84 06 F1 | 	add	local03, #1
066c8     2D 96 62 FD | 	call	local12
066cc     4C 0F 02 F6 | 	mov	objptr, local13
066d0     16 9B 02 F6 | 	mov	local14, result1
066d4     00 9A 5E F2 | 	cmps	local14, #0 wcz
066d8     4D 2D 02 C6 |  if_b	mov	result1, local14
066dc     34 00 90 CD |  if_b	jmp	#LR__0305
066e0     4D 8F 02 F1 | 	add	local08, local14
066e4     01 90 06 F1 | 	add	local09, #1
066e8     B4 FF 9F FD | 	jmp	#LR__0303
066ec                 | LR__0304
066ec     40 73 02 F6 | 	mov	arg01, local01
066f0     41 75 02 F6 | 	mov	arg02, local02
066f4     46 77 02 F6 | 	mov	arg03, local07
066f8     01 78 06 F6 | 	mov	arg04, #1
066fc     58 10 B0 FD | 	call	#__system___fmtpad
06700     16 9B 02 F6 | 	mov	local14, result1
06704     00 9A 5E F2 | 	cmps	local14, #0 wcz
06708     4D 2D 02 C6 |  if_b	mov	result1, local14
0670c     4D 8F 02 31 |  if_ae	add	local08, local14
06710     47 2D 02 36 |  if_ae	mov	result1, local08
06714                 | LR__0305
06714     AF F0 03 F6 | 	mov	ptra, fp
06718     BF 00 A0 FD | 	call	#popregs_
0671c                 | __system___fmtstr_ret
0671c     2D 00 64 FD | 	ret
06720                 | 
06720                 | __system___fmtnum
06720     07 5A 05 F6 | 	mov	COUNT_, #7
06724     B0 00 A0 FD | 	call	#pushregs_
06728     70 F0 07 F1 | 	add	ptra, #112
0672c     04 5E 05 F1 | 	add	fp, #4
06730     AF 72 62 FC | 	wrlong	arg01, fp
06734     04 5E 05 F1 | 	add	fp, #4
06738     AF 74 62 FC | 	wrlong	arg02, fp
0673c     04 5E 05 F1 | 	add	fp, #4
06740     AF 76 62 FC | 	wrlong	arg03, fp
06744     04 5E 05 F1 | 	add	fp, #4
06748     AF 78 62 FC | 	wrlong	arg04, fp
0674c     04 5E 05 F1 | 	add	fp, #4
06750     AF 80 02 F6 | 	mov	local01, fp
06754     44 5E 05 F1 | 	add	fp, #68
06758     AF 80 62 FC | 	wrlong	local01, fp
0675c     04 5E 05 F1 | 	add	fp, #4
06760     AF 00 68 FC | 	wrlong	#0, fp
06764     54 5E 85 F1 | 	sub	fp, #84
06768     AF 80 02 FB | 	rdlong	local01, fp
0676c     10 80 46 F0 | 	shr	local01, #16
06770     3F 80 06 F5 | 	and	local01, #63
06774     58 5E 05 F1 | 	add	fp, #88
06778     AF 80 62 FC | 	wrlong	local01, fp
0677c     58 5E 85 F1 | 	sub	fp, #88
06780     AF 80 02 FB | 	rdlong	local01, fp
06784     FF 80 06 F5 | 	and	local01, #255
06788     5C 5E 05 F1 | 	add	fp, #92
0678c     AF 80 62 FC | 	wrlong	local01, fp
06790     5C 5E 85 F1 | 	sub	fp, #92
06794     AF 80 02 FB | 	rdlong	local01, fp
06798     1A 80 46 F0 | 	shr	local01, #26
0679c     03 80 06 F5 | 	and	local01, #3
067a0     60 5E 05 F1 | 	add	fp, #96
067a4     AF 80 62 FC | 	wrlong	local01, fp
067a8     08 5E 85 F1 | 	sub	fp, #8
067ac     AF 80 02 FB | 	rdlong	local01, fp
067b0     60 5E 85 F1 | 	sub	fp, #96
067b4     00 80 5E F2 | 	cmps	local01, #0 wcz
067b8     14 00 90 ED |  if_be	jmp	#LR__0306
067bc     60 5E 05 F1 | 	add	fp, #96
067c0     AF 80 02 FB | 	rdlong	local01, fp
067c4     01 80 86 F1 | 	sub	local01, #1
067c8     AF 80 62 FC | 	wrlong	local01, fp
067cc     60 5E 85 F1 | 	sub	fp, #96
067d0                 | LR__0306
067d0     64 5E 05 F1 | 	add	fp, #100
067d4     AF 82 02 FB | 	rdlong	local02, fp
067d8     64 5E 85 F1 | 	sub	fp, #100
067dc     40 82 5E F2 | 	cmps	local02, #64 wcz
067e0     14 00 90 1D |  if_a	jmp	#LR__0307
067e4     64 5E 05 F1 | 	add	fp, #100
067e8     AF 84 02 FB | 	rdlong	local03, fp
067ec     64 5E 85 F1 | 	sub	fp, #100
067f0     42 87 0A F6 | 	mov	local04, local03 wz
067f4     0C 00 90 5D |  if_ne	jmp	#LR__0308
067f8                 | LR__0307
067f8     64 5E 05 F1 | 	add	fp, #100
067fc     AF 80 68 FC | 	wrlong	#64, fp
06800     64 5E 85 F1 | 	sub	fp, #100
06804                 | LR__0308
06804     68 5E 05 F1 | 	add	fp, #104
06808     AF 80 02 FB | 	rdlong	local01, fp
0680c     68 5E 85 F1 | 	sub	fp, #104
06810     03 80 0E F2 | 	cmp	local01, #3 wz
06814     10 00 90 5D |  if_ne	jmp	#LR__0309
06818     68 5E 05 F1 | 	add	fp, #104
0681c     AF 00 68 FC | 	wrlong	#0, fp
06820     68 5E 85 F1 | 	sub	fp, #104
06824     30 00 90 FD | 	jmp	#LR__0311
06828                 | LR__0309
06828     0C 5E 05 F1 | 	add	fp, #12
0682c     AF 80 02 FB | 	rdlong	local01, fp
06830     0C 5E 85 F1 | 	sub	fp, #12
06834     00 80 5E F2 | 	cmps	local01, #0 wcz
06838     1C 00 90 3D |  if_ae	jmp	#LR__0310
0683c     68 5E 05 F1 | 	add	fp, #104
06840     AF 08 68 FC | 	wrlong	#4, fp
06844     5C 5E 85 F1 | 	sub	fp, #92
06848     AF 80 02 FB | 	rdlong	local01, fp
0684c     40 81 62 F6 | 	neg	local01, local01
06850     AF 80 62 FC | 	wrlong	local01, fp
06854     0C 5E 85 F1 | 	sub	fp, #12
06858                 | LR__0310
06858                 | LR__0311
06858     68 5E 05 F1 | 	add	fp, #104
0685c     AF 80 0A FB | 	rdlong	local01, fp wz
06860     68 5E 85 F1 | 	sub	fp, #104
06864     EC 00 90 AD |  if_e	jmp	#LR__0318
06868     5C 5E 05 F1 | 	add	fp, #92
0686c     AF 86 02 FB | 	rdlong	local04, fp
06870     01 86 06 F1 | 	add	local04, #1
06874     AF 86 62 FC | 	wrlong	local04, fp
06878     04 5E 05 F1 | 	add	fp, #4
0687c     AF 80 02 FB | 	rdlong	local01, fp
06880     04 5E 05 F1 | 	add	fp, #4
06884     AF 86 02 FB | 	rdlong	local04, fp
06888     64 5E 85 F1 | 	sub	fp, #100
0688c     43 81 0A F2 | 	cmp	local01, local04 wz
06890     3C 00 90 5D |  if_ne	jmp	#LR__0313
06894     60 5E 05 F1 | 	add	fp, #96
06898     AF 86 02 FB | 	rdlong	local04, fp
0689c     01 86 86 F1 | 	sub	local04, #1
068a0     AF 86 62 FC | 	wrlong	local04, fp
068a4     AF 80 0A FB | 	rdlong	local01, fp wz
068a8     60 5E 85 F1 | 	sub	fp, #96
068ac     20 00 90 5D |  if_ne	jmp	#LR__0312
068b0     04 5E 05 F1 | 	add	fp, #4
068b4     AF 72 02 FB | 	rdlong	arg01, fp
068b8     04 5E 05 F1 | 	add	fp, #4
068bc     AF 74 02 FB | 	rdlong	arg02, fp
068c0     08 5E 85 F1 | 	sub	fp, #8
068c4     23 76 06 F6 | 	mov	arg03, #35
068c8     FC FC BF FD | 	call	#__system___fmtchar
068cc     70 01 90 FD | 	jmp	#LR__0323
068d0                 | LR__0312
068d0                 | LR__0313
068d0     68 5E 05 F1 | 	add	fp, #104
068d4     AF 80 02 FB | 	rdlong	local01, fp
068d8     68 5E 85 F1 | 	sub	fp, #104
068dc     02 80 0E F2 | 	cmp	local01, #2 wz
068e0     20 00 90 5D |  if_ne	jmp	#LR__0314
068e4     58 5E 05 F1 | 	add	fp, #88
068e8     AF 80 02 FB | 	rdlong	local01, fp
068ec     40 87 02 F6 | 	mov	local04, local01
068f0     01 86 06 F1 | 	add	local04, #1
068f4     AF 86 62 FC | 	wrlong	local04, fp
068f8     58 5E 85 F1 | 	sub	fp, #88
068fc     40 41 48 FC | 	wrbyte	#32, local01
06900     50 00 90 FD | 	jmp	#LR__0317
06904                 | LR__0314
06904     68 5E 05 F1 | 	add	fp, #104
06908     AF 80 02 FB | 	rdlong	local01, fp
0690c     68 5E 85 F1 | 	sub	fp, #104
06910     04 80 0E F2 | 	cmp	local01, #4 wz
06914     20 00 90 5D |  if_ne	jmp	#LR__0315
06918     58 5E 05 F1 | 	add	fp, #88
0691c     AF 80 02 FB | 	rdlong	local01, fp
06920     40 87 02 F6 | 	mov	local04, local01
06924     01 86 06 F1 | 	add	local04, #1
06928     AF 86 62 FC | 	wrlong	local04, fp
0692c     58 5E 85 F1 | 	sub	fp, #88
06930     40 5B 48 FC | 	wrbyte	#45, local01
06934     1C 00 90 FD | 	jmp	#LR__0316
06938                 | LR__0315
06938     58 5E 05 F1 | 	add	fp, #88
0693c     AF 80 02 FB | 	rdlong	local01, fp
06940     40 87 02 F6 | 	mov	local04, local01
06944     01 86 06 F1 | 	add	local04, #1
06948     AF 86 62 FC | 	wrlong	local04, fp
0694c     58 5E 85 F1 | 	sub	fp, #88
06950     40 57 48 FC | 	wrbyte	#43, local01
06954                 | LR__0316
06954                 | LR__0317
06954                 | LR__0318
06954     58 5E 05 F1 | 	add	fp, #88
06958     AF 72 02 FB | 	rdlong	arg01, fp
0695c     4C 5E 85 F1 | 	sub	fp, #76
06960     AF 74 02 FB | 	rdlong	arg02, fp
06964     04 5E 05 F1 | 	add	fp, #4
06968     AF 76 02 FB | 	rdlong	arg03, fp
0696c     50 5E 05 F1 | 	add	fp, #80
06970     AF 78 02 FB | 	rdlong	arg04, fp
06974     00 88 06 F6 | 	mov	local05, #0
06978     58 5E 85 F1 | 	sub	fp, #88
0697c     AF 8A 02 FB | 	rdlong	local06, fp
06980     08 5E 85 F1 | 	sub	fp, #8
06984     1D 8A 2E F4 | 	testbn	local06, #29 wz
06988     01 88 06 56 |  if_ne	mov	local05, #1
0698c     44 7B 02 F6 | 	mov	arg05, local05
06990     88 0E B0 FD | 	call	#__system___uitoa
06994     16 8D 02 F6 | 	mov	local07, result1
06998     5C 5E 05 F1 | 	add	fp, #92
0699c     AF 80 02 FB | 	rdlong	local01, fp
069a0     46 81 02 F1 | 	add	local01, local07
069a4     AF 80 62 FC | 	wrlong	local01, fp
069a8     08 5E 05 F1 | 	add	fp, #8
069ac     AF 86 02 FB | 	rdlong	local04, fp
069b0     64 5E 85 F1 | 	sub	fp, #100
069b4     43 81 5A F2 | 	cmps	local01, local04 wcz
069b8     64 00 90 ED |  if_be	jmp	#LR__0322
069bc     80 96 9F FE | 	loc	pa,	#(@LR__0320-@LR__0319)
069c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
069c4                 | LR__0319
069c4     64 5E 05 F1 | 	add	fp, #100
069c8     AF 80 02 FB | 	rdlong	local01, fp
069cc     40 87 02 F6 | 	mov	local04, local01
069d0     01 86 86 F1 | 	sub	local04, #1
069d4     AF 86 62 FC | 	wrlong	local04, fp
069d8     64 5E 85 F1 | 	sub	fp, #100
069dc     00 80 5E F2 | 	cmps	local01, #0 wcz
069e0     20 00 90 ED |  if_be	jmp	#LR__0321
069e4     58 5E 05 F1 | 	add	fp, #88
069e8     AF 80 02 FB | 	rdlong	local01, fp
069ec     40 87 02 F6 | 	mov	local04, local01
069f0     01 86 06 F1 | 	add	local04, #1
069f4     AF 86 62 FC | 	wrlong	local04, fp
069f8     58 5E 85 F1 | 	sub	fp, #88
069fc     40 47 48 FC | 	wrbyte	#35, local01
06a00     C0 FF 9F FD | 	jmp	#LR__0319
06a04                 | LR__0320
06a04                 | LR__0321
06a04     58 5E 05 F1 | 	add	fp, #88
06a08     AF 80 02 FB | 	rdlong	local01, fp
06a0c     40 87 02 F6 | 	mov	local04, local01
06a10     01 86 06 F1 | 	add	local04, #1
06a14     AF 86 62 FC | 	wrlong	local04, fp
06a18     58 5E 85 F1 | 	sub	fp, #88
06a1c     40 01 48 FC | 	wrbyte	#0, local01
06a20                 | LR__0322
06a20     04 5E 05 F1 | 	add	fp, #4
06a24     AF 72 02 FB | 	rdlong	arg01, fp
06a28     04 5E 05 F1 | 	add	fp, #4
06a2c     AF 74 02 FB | 	rdlong	arg02, fp
06a30     0C 5E 05 F1 | 	add	fp, #12
06a34     AF 76 02 F6 | 	mov	arg03, fp
06a38     14 5E 85 F1 | 	sub	fp, #20
06a3c     E8 FB BF FD | 	call	#__system___fmtstr
06a40                 | LR__0323
06a40     AF F0 03 F6 | 	mov	ptra, fp
06a44     BF 00 A0 FD | 	call	#popregs_
06a48                 | __system___fmtnum_ret
06a48     2D 00 64 FD | 	ret
06a4c                 | 
06a4c                 | __system__Number_S
06a4c     09 5A 05 F6 | 	mov	COUNT_, #9
06a50     B0 00 A0 FD | 	call	#pushregs_
06a54     39 81 02 F6 | 	mov	local01, arg01
06a58     3A 83 0A F6 | 	mov	local02, arg02 wz
06a5c     3B 85 02 F6 | 	mov	local03, arg03
06a60     40 00 90 5D |  if_ne	jmp	#LR__0326
06a64     01 82 06 F6 | 	mov	local02, #1
06a68     42 87 02 F6 | 	mov	local04, local03
06a6c     01 88 06 F6 | 	mov	local05, #1
06a70                 | LR__0324
06a70     00 8A 06 F6 | 	mov	local06, #0
06a74     40 87 1A F2 | 	cmp	local04, local01 wcz
06a78     01 8A 66 E6 |  if_be	neg	local06, #1
06a7c     00 8C 06 F6 | 	mov	local07, #0
06a80     43 89 1A F2 | 	cmp	local05, local04 wcz
06a84     01 8C 66 C6 |  if_b	neg	local07, #1
06a88     46 8B CA F7 | 	test	local06, local07 wz
06a8c     14 00 90 AD |  if_e	jmp	#LR__0325
06a90     43 89 02 F6 | 	mov	local05, local04
06a94     42 87 02 FD | 	qmul	local04, local03
06a98     18 86 62 FD | 	getqx	local04
06a9c     01 82 06 F1 | 	add	local02, #1
06aa0     CC FF 9F FD | 	jmp	#LR__0324
06aa4                 | LR__0325
06aa4                 | LR__0326
06aa4     20 82 3E F3 | 	fle	local02, #32 wcz
06aa8     41 73 02 F6 | 	mov	arg01, local02
06aac     02 72 06 F1 | 	add	arg01, #2
06ab0     F4 03 B0 FD | 	call	#__system___gc_alloc_managed
06ab4     16 8F 02 F6 | 	mov	local08, result1
06ab8     41 8D 02 F6 | 	mov	local07, local02
06abc     47 8D 02 F1 | 	add	local07, local08
06ac0     46 01 48 FC | 	wrbyte	#0, local07
06ac4     74 95 9F FE | 	loc	pa,	#(@LR__0328-@LR__0327)
06ac8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06acc                 | LR__0327
06acc     00 82 1E F2 | 	cmp	local02, #0 wcz
06ad0     34 00 90 ED |  if_be	jmp	#LR__0329
06ad4     01 82 86 F1 | 	sub	local02, #1
06ad8     40 AF 02 F6 | 	mov	muldiva_, local01
06adc     42 B1 02 F6 | 	mov	muldivb_, local03
06ae0     CC 00 A0 FD | 	call	#unsdivide_
06ae4     57 91 02 F6 | 	mov	local09, muldiva_
06ae8     58 81 02 F6 | 	mov	local01, muldivb_
06aec     0A 90 1E F2 | 	cmp	local09, #10 wcz
06af0     30 90 06 C1 |  if_b	add	local09, #48
06af4     37 90 06 31 |  if_ae	add	local09, #55
06af8     41 8D 02 F6 | 	mov	local07, local02
06afc     47 8D 02 F1 | 	add	local07, local08
06b00     46 91 42 FC | 	wrbyte	local09, local07
06b04     C4 FF 9F FD | 	jmp	#LR__0327
06b08                 | LR__0328
06b08                 | LR__0329
06b08     47 2D 02 F6 | 	mov	result1, local08
06b0c     AF F0 03 F6 | 	mov	ptra, fp
06b10     BF 00 A0 FD | 	call	#popregs_
06b14                 | __system__Number_S_ret
06b14     2D 00 64 FD | 	ret
06b18                 | 
06b18                 | __system__String_S
06b18     05 5A 05 F6 | 	mov	COUNT_, #5
06b1c     B0 00 A0 FD | 	call	#pushregs_
06b20     39 81 02 F6 | 	mov	local01, arg01
06b24     3A 83 02 F6 | 	mov	local02, arg02
06b28     41 73 02 F6 | 	mov	arg01, local02
06b2c     00 84 06 F6 | 	mov	local03, #0
06b30     DC 94 9F FE | 	loc	pa,	#(@LR__0331-@LR__0330)
06b34     93 00 A0 FD | 	call	#FCACHE_LOAD_
06b38                 | LR__0330
06b38     39 87 CA FA | 	rdbyte	local04, arg01 wz
06b3c     01 84 06 51 |  if_ne	add	local03, #1
06b40     01 72 06 51 |  if_ne	add	arg01, #1
06b44     F0 FF 9F 5D |  if_ne	jmp	#LR__0330
06b48                 | LR__0331
06b48     42 2D 0A F6 | 	mov	result1, local03 wz
06b4c     42 00 00 AF 
06b50     72 2C 06 A6 |  if_e	mov	result1, ##@LR__0448
06b54     4C 00 90 AD |  if_e	jmp	#LR__0333
06b58     00 80 5E F2 | 	cmps	local01, #0 wcz
06b5c     42 00 00 EF 
06b60     73 2C 06 E6 |  if_be	mov	result1, ##@LR__0449
06b64     3C 00 90 ED |  if_be	jmp	#LR__0333
06b68     40 73 02 F6 | 	mov	arg01, local01
06b6c     02 72 06 F1 | 	add	arg01, #2
06b70     34 03 B0 FD | 	call	#__system___gc_alloc_managed
06b74     16 89 0A F6 | 	mov	local05, result1 wz
06b78     24 00 90 AD |  if_e	jmp	#LR__0332
06b7c     41 75 C2 FA | 	rdbyte	arg02, local02
06b80     44 73 02 F6 | 	mov	arg01, local05
06b84     40 77 02 F6 | 	mov	arg03, local01
06b88     A0 00 A0 FD | 	call	#\builtin_bytefill_
06b8c     01 80 06 F1 | 	add	local01, #1
06b90     44 81 02 F1 | 	add	local01, local05
06b94     40 01 48 FC | 	wrbyte	#0, local01
06b98     44 2D 02 F6 | 	mov	result1, local05
06b9c     04 00 90 FD | 	jmp	#LR__0333
06ba0                 | LR__0332
06ba0     44 2D 02 F6 | 	mov	result1, local05
06ba4                 | LR__0333
06ba4     AF F0 03 F6 | 	mov	ptra, fp
06ba8     BF 00 A0 FD | 	call	#popregs_
06bac                 | __system__String_S_ret
06bac     2D 00 64 FD | 	ret
06bb0                 | 
06bb0                 | __system___gc_ptrs
06bb0     04 5A 05 F6 | 	mov	COUNT_, #4
06bb4     B0 00 A0 FD | 	call	#pushregs_
06bb8     02 81 02 F6 | 	mov	local01, __heap_ptr
06bbc     40 83 02 F6 | 	mov	local02, local01
06bc0     07 00 00 FF 
06bc4     F8 83 06 F1 | 	add	local02, ##4088
06bc8     40 85 0A FB | 	rdlong	local03, local01 wz
06bcc     74 00 90 5D |  if_ne	jmp	#LR__0334
06bd0     41 87 02 F6 | 	mov	local04, local02
06bd4     40 87 82 F1 | 	sub	local04, local01
06bd8     40 03 58 FC | 	wrword	#1, local01
06bdc     40 85 02 F6 | 	mov	local03, local01
06be0     02 84 06 F1 | 	add	local03, #2
06be4     36 00 80 FF 
06be8     42 21 59 FC | 	wrword	##27792, local03
06bec     40 85 02 F6 | 	mov	local03, local01
06bf0     04 84 06 F1 | 	add	local03, #4
06bf4     42 01 58 FC | 	wrword	#0, local03
06bf8     40 85 02 F6 | 	mov	local03, local01
06bfc     06 84 06 F1 | 	add	local03, #6
06c00     42 03 58 FC | 	wrword	#1, local03
06c04     10 80 06 F1 | 	add	local01, #16
06c08     43 85 52 F6 | 	abs	local03, local04 wc
06c0c     04 84 46 F0 | 	shr	local03, #4
06c10     42 85 62 C6 |  if_b	neg	local03, local03
06c14     40 85 52 FC | 	wrword	local03, local01
06c18     40 85 02 F6 | 	mov	local03, local01
06c1c     02 84 06 F1 | 	add	local03, #2
06c20     36 00 80 FF 
06c24     42 1F 59 FC | 	wrword	##27791, local03
06c28     40 85 02 F6 | 	mov	local03, local01
06c2c     04 84 06 F1 | 	add	local03, #4
06c30     42 01 58 FC | 	wrword	#0, local03
06c34     40 85 02 F6 | 	mov	local03, local01
06c38     06 84 06 F1 | 	add	local03, #6
06c3c     42 01 58 FC | 	wrword	#0, local03
06c40     10 80 86 F1 | 	sub	local01, #16
06c44                 | LR__0334
06c44     41 2F 02 F6 | 	mov	result2, local02
06c48     40 2D 02 F6 | 	mov	result1, local01
06c4c     AF F0 03 F6 | 	mov	ptra, fp
06c50     BF 00 A0 FD | 	call	#popregs_
06c54                 | __system___gc_ptrs_ret
06c54     2D 00 64 FD | 	ret
06c58                 | 
06c58                 | __system___gc_nextBlockPtr
06c58     02 5A 05 F6 | 	mov	COUNT_, #2
06c5c     B0 00 A0 FD | 	call	#pushregs_
06c60     39 81 02 F6 | 	mov	local01, arg01
06c64     40 83 EA FA | 	rdword	local02, local01 wz
06c68     10 00 90 5D |  if_ne	jmp	#LR__0335
06c6c     42 00 00 FF 
06c70     74 72 06 F6 | 	mov	arg01, ##@LR__0450
06c74     FC 01 B0 FD | 	call	#__system___gc_errmsg
06c78     0C 00 90 FD | 	jmp	#LR__0336
06c7c                 | LR__0335
06c7c     40 2D 02 F6 | 	mov	result1, local01
06c80     04 82 66 F0 | 	shl	local02, #4
06c84     41 2D 02 F1 | 	add	result1, local02
06c88                 | LR__0336
06c88     AF F0 03 F6 | 	mov	ptra, fp
06c8c     BF 00 A0 FD | 	call	#popregs_
06c90                 | __system___gc_nextBlockPtr_ret
06c90     2D 00 64 FD | 	ret
06c94                 | 
06c94                 | __system___gc_tryalloc
06c94     0E 5A 05 F6 | 	mov	COUNT_, #14
06c98     B0 00 A0 FD | 	call	#pushregs_
06c9c     39 81 02 F6 | 	mov	local01, arg01
06ca0     3A 83 02 F6 | 	mov	local02, arg02
06ca4     08 FF BF FD | 	call	#__system___gc_ptrs
06ca8     16 85 02 F6 | 	mov	local03, result1
06cac     17 87 02 F6 | 	mov	local04, result2
06cb0     42 89 02 F6 | 	mov	local05, local03
06cb4     00 8A 06 F6 | 	mov	local06, #0
06cb8     98 93 9F FE | 	loc	pa,	#(@LR__0338-@LR__0337)
06cbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
06cc0                 | LR__0337
06cc0     44 8D 02 F6 | 	mov	local07, local05
06cc4     42 8F 02 F6 | 	mov	local08, local03
06cc8     44 91 02 F6 | 	mov	local09, local05
06ccc     06 90 06 F1 | 	add	local09, #6
06cd0     48 93 E2 FA | 	rdword	local10, local09
06cd4     47 73 02 F6 | 	mov	arg01, local08
06cd8     49 75 0A F6 | 	mov	arg02, local10 wz
06cdc     00 2C 06 A6 |  if_e	mov	result1, #0
06ce0     04 74 66 50 |  if_ne	shl	arg02, #4
06ce4     3A 73 02 51 |  if_ne	add	arg01, arg02
06ce8     39 2D 02 56 |  if_ne	mov	result1, arg01
06cec     16 95 02 F6 | 	mov	local11, result1
06cf0     4A 89 0A F6 | 	mov	local05, local11 wz
06cf4     44 8F 02 56 |  if_ne	mov	local08, local05
06cf8     47 8B E2 5A |  if_ne	rdword	local06, local08
06cfc     00 88 0E F2 | 	cmp	local05, #0 wz
06d00     10 00 90 AD |  if_e	jmp	#LR__0339
06d04     43 89 5A F2 | 	cmps	local05, local04 wcz
06d08     08 00 90 3D |  if_ae	jmp	#LR__0339
06d0c     45 81 5A F2 | 	cmps	local01, local06 wcz
06d10     AC FF 9F 1D |  if_a	jmp	#LR__0337
06d14                 | LR__0338
06d14                 | LR__0339
06d14     00 88 0E F2 | 	cmp	local05, #0 wz
06d18     44 2D 02 A6 |  if_e	mov	result1, local05
06d1c     48 01 90 AD |  if_e	jmp	#LR__0342
06d20     44 8F 02 F6 | 	mov	local08, local05
06d24     06 8E 06 F1 | 	add	local08, #6
06d28     47 97 E2 FA | 	rdword	local12, local08
06d2c     45 81 5A F2 | 	cmps	local01, local06 wcz
06d30     C8 00 90 3D |  if_ae	jmp	#LR__0341
06d34     44 81 52 FC | 	wrword	local01, local05
06d38     44 73 02 F6 | 	mov	arg01, local05
06d3c     40 91 02 F6 | 	mov	local09, local01
06d40     04 90 66 F0 | 	shl	local09, #4
06d44     48 73 02 F1 | 	add	arg01, local09
06d48     45 8F 02 F6 | 	mov	local08, local06
06d4c     40 8F 82 F1 | 	sub	local08, local01
06d50     39 8F 52 FC | 	wrword	local08, arg01
06d54     39 8F 02 F6 | 	mov	local08, arg01
06d58     02 8E 06 F1 | 	add	local08, #2
06d5c     36 00 80 FF 
06d60     47 1F 59 FC | 	wrword	##27791, local08
06d64     44 75 0A F6 | 	mov	arg02, local05 wz
06d68     00 2C 06 A6 |  if_e	mov	result1, #0
06d6c     42 75 82 51 |  if_ne	sub	arg02, local03
06d70     04 74 46 50 |  if_ne	shr	arg02, #4
06d74     3A 2D 02 56 |  if_ne	mov	result1, arg02
06d78     39 95 02 F6 | 	mov	local11, arg01
06d7c     04 94 06 F1 | 	add	local11, #4
06d80     4A 2D 52 FC | 	wrword	result1, local11
06d84     44 8F 02 F6 | 	mov	local08, local05
06d88     06 8E 06 F1 | 	add	local08, #6
06d8c     39 91 02 F6 | 	mov	local09, arg01
06d90     47 93 E2 FA | 	rdword	local10, local08
06d94     06 90 06 F1 | 	add	local09, #6
06d98     48 93 52 FC | 	wrword	local10, local09
06d9c     39 99 02 F6 | 	mov	local13, arg01
06da0     4C 75 0A F6 | 	mov	arg02, local13 wz
06da4     00 2C 06 A6 |  if_e	mov	result1, #0
06da8     42 75 82 51 |  if_ne	sub	arg02, local03
06dac     04 74 46 50 |  if_ne	shr	arg02, #4
06db0     3A 2D 02 56 |  if_ne	mov	result1, arg02
06db4     16 97 02 F6 | 	mov	local12, result1
06db8     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
06dbc     16 9B 0A F6 | 	mov	local14, result1 wz
06dc0     38 00 90 AD |  if_e	jmp	#LR__0340
06dc4     43 9B 5A F2 | 	cmps	local14, local04 wcz
06dc8     30 00 90 3D |  if_ae	jmp	#LR__0340
06dcc     42 8F 02 F6 | 	mov	local08, local03
06dd0     4C 91 02 F6 | 	mov	local09, local13
06dd4     47 73 02 F6 | 	mov	arg01, local08
06dd8     48 75 0A F6 | 	mov	arg02, local09 wz
06ddc     00 2C 06 A6 |  if_e	mov	result1, #0
06de0     39 75 82 51 |  if_ne	sub	arg02, arg01
06de4     04 74 46 50 |  if_ne	shr	arg02, #4
06de8     3A 2D 02 56 |  if_ne	mov	result1, arg02
06dec     16 93 02 F6 | 	mov	local10, result1
06df0     4D 95 02 F6 | 	mov	local11, local14
06df4     04 94 06 F1 | 	add	local11, #4
06df8     4A 93 52 FC | 	wrword	local10, local11
06dfc                 | LR__0340
06dfc                 | LR__0341
06dfc     06 8C 06 F1 | 	add	local07, #6
06e00     46 97 52 FC | 	wrword	local12, local07
06e04     36 00 00 FF 
06e08     80 8E 06 F6 | 	mov	local08, ##27776
06e0c     41 8F 42 F5 | 	or	local08, local02
06e10     01 2C 62 FD | 	cogid	result1
06e14     16 8F 42 F5 | 	or	local08, result1
06e18     44 93 02 F6 | 	mov	local10, local05
06e1c     02 92 06 F1 | 	add	local10, #2
06e20     49 8F 52 FC | 	wrword	local08, local10
06e24     42 8F 02 F6 | 	mov	local08, local03
06e28     08 8E 06 F1 | 	add	local08, #8
06e2c     44 91 02 F6 | 	mov	local09, local05
06e30     47 93 E2 FA | 	rdword	local10, local08
06e34     06 90 06 F1 | 	add	local09, #6
06e38     48 93 52 FC | 	wrword	local10, local09
06e3c     44 75 0A F6 | 	mov	arg02, local05 wz
06e40     00 2C 06 A6 |  if_e	mov	result1, #0
06e44     42 75 82 51 |  if_ne	sub	arg02, local03
06e48     04 74 46 50 |  if_ne	shr	arg02, #4
06e4c     3A 2D 02 56 |  if_ne	mov	result1, arg02
06e50     08 84 06 F1 | 	add	local03, #8
06e54     42 2D 52 FC | 	wrword	result1, local03
06e58     44 2D 02 F6 | 	mov	result1, local05
06e5c     08 2C 06 F1 | 	add	result1, #8
06e60     00 C0 31 FF 
06e64     00 2C 46 F5 | 	or	result1, ##1669332992
06e68                 | LR__0342
06e68     AF F0 03 F6 | 	mov	ptra, fp
06e6c     BF 00 A0 FD | 	call	#popregs_
06e70                 | __system___gc_tryalloc_ret
06e70     2D 00 64 FD | 	ret
06e74                 | 
06e74                 | __system___gc_errmsg
06e74     02 5A 05 F6 | 	mov	COUNT_, #2
06e78     B0 00 A0 FD | 	call	#pushregs_
06e7c     39 81 02 F6 | 	mov	local01, arg01
06e80                 | LR__0343
06e80     40 83 CA FA | 	rdbyte	local02, local01 wz
06e84     01 80 06 F1 | 	add	local01, #1
06e88     0C 00 90 AD |  if_e	jmp	#LR__0344
06e8c     41 73 02 F6 | 	mov	arg01, local02
06e90     F4 F3 BF FD | 	call	#__system___tx
06e94     E8 FF 9F FD | 	jmp	#LR__0343
06e98                 | LR__0344
06e98     00 2C 06 F6 | 	mov	result1, #0
06e9c     AF F0 03 F6 | 	mov	ptra, fp
06ea0     BF 00 A0 FD | 	call	#popregs_
06ea4                 | __system___gc_errmsg_ret
06ea4     2D 00 64 FD | 	ret
06ea8                 | 
06ea8                 | __system___gc_alloc_managed
06ea8     02 5A 05 F6 | 	mov	COUNT_, #2
06eac     B0 00 A0 FD | 	call	#pushregs_
06eb0     39 81 02 F6 | 	mov	local01, arg01
06eb4     00 74 06 F6 | 	mov	arg02, #0
06eb8     30 00 B0 FD | 	call	#__system___gc_doalloc
06ebc     16 83 0A F6 | 	mov	local02, result1 wz
06ec0     18 00 90 5D |  if_ne	jmp	#LR__0345
06ec4     00 80 5E F2 | 	cmps	local01, #0 wcz
06ec8     10 00 90 ED |  if_be	jmp	#LR__0345
06ecc     42 00 00 FF 
06ed0     90 72 06 F6 | 	mov	arg01, ##@LR__0451
06ed4     9C FF BF FD | 	call	#__system___gc_errmsg
06ed8     04 00 90 FD | 	jmp	#LR__0346
06edc                 | LR__0345
06edc     41 2D 02 F6 | 	mov	result1, local02
06ee0                 | LR__0346
06ee0     AF F0 03 F6 | 	mov	ptra, fp
06ee4     BF 00 A0 FD | 	call	#popregs_
06ee8                 | __system___gc_alloc_managed_ret
06ee8     2D 00 64 FD | 	ret
06eec                 | 
06eec                 | __system___gc_doalloc
06eec     06 5A 05 F6 | 	mov	COUNT_, #6
06ef0     B0 00 A0 FD | 	call	#pushregs_
06ef4     39 81 0A F6 | 	mov	local01, arg01 wz
06ef8     3A 83 02 F6 | 	mov	local02, arg02
06efc     00 2C 06 A6 |  if_e	mov	result1, #0
06f00     94 00 90 AD |  if_e	jmp	#LR__0354
06f04     17 80 06 F1 | 	add	local01, #23
06f08     0F 80 26 F5 | 	andn	local01, #15
06f0c     04 80 46 F0 | 	shr	local01, #4
06f10     14 14 06 F1 | 	add	ptr___system__dat__, #20
06f14     0A 73 02 F6 | 	mov	arg01, ptr___system__dat__
06f18     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06f1c     84 F2 BF FD | 	call	#__system___lockmem
06f20     40 73 02 F6 | 	mov	arg01, local01
06f24     41 75 02 F6 | 	mov	arg02, local02
06f28     68 FD BF FD | 	call	#__system___gc_tryalloc
06f2c     16 85 0A F6 | 	mov	local03, result1 wz
06f30     14 00 90 5D |  if_ne	jmp	#LR__0347
06f34     30 03 B0 FD | 	call	#__system___gc_docollect
06f38     40 73 02 F6 | 	mov	arg01, local01
06f3c     41 75 02 F6 | 	mov	arg02, local02
06f40     50 FD BF FD | 	call	#__system___gc_tryalloc
06f44     16 85 02 F6 | 	mov	local03, result1
06f48                 | LR__0347
06f48     14 14 06 F1 | 	add	ptr___system__dat__, #20
06f4c     0A 73 02 F6 | 	mov	arg01, ptr___system__dat__
06f50     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06f54     39 01 68 FC | 	wrlong	#0, arg01
06f58     00 84 0E F2 | 	cmp	local03, #0 wz
06f5c     34 00 90 AD |  if_e	jmp	#LR__0353
06f60     04 80 66 F0 | 	shl	local01, #4
06f64     08 80 86 F1 | 	sub	local01, #8
06f68     40 87 52 F6 | 	abs	local04, local01 wc
06f6c     02 86 46 F0 | 	shr	local04, #2
06f70     43 87 62 C6 |  if_b	neg	local04, local04
06f74     43 89 0A F6 | 	mov	local05, local04 wz
06f78     42 8B 02 F6 | 	mov	local06, local03
06f7c     14 00 90 AD |  if_e	jmp	#LR__0352
06f80     88 90 9F FE | 	loc	pa,	#(@LR__0350-@LR__0348)
06f84     93 00 A0 FD | 	call	#FCACHE_LOAD_
06f88                 | LR__0348
06f88     44 05 D8 FC | 	rep	@LR__0351, local05
06f8c                 | LR__0349
06f8c     45 01 68 FC | 	wrlong	#0, local06
06f90     04 8A 06 F1 | 	add	local06, #4
06f94                 | LR__0350
06f94                 | LR__0351
06f94                 | LR__0352
06f94                 | LR__0353
06f94     42 2D 02 F6 | 	mov	result1, local03
06f98                 | LR__0354
06f98     AF F0 03 F6 | 	mov	ptra, fp
06f9c     BF 00 A0 FD | 	call	#popregs_
06fa0                 | __system___gc_doalloc_ret
06fa0     2D 00 64 FD | 	ret
06fa4                 | 
06fa4                 | __system___gc_isvalidptr
06fa4     3B 33 02 F6 | 	mov	_var01, arg03
06fa8     19 35 02 F6 | 	mov	_var02, _var01
06fac     00 F8 7F FF 
06fb0     00 34 06 F5 | 	and	_var02, ##-1048576
06fb4     00 C0 31 FF 
06fb8     00 34 0E F2 | 	cmp	_var02, ##1669332992 wz
06fbc     00 2C 06 56 |  if_ne	mov	result1, #0
06fc0     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06fc4     08 32 86 F1 | 	sub	_var01, #8
06fc8     00 F8 7F FF 
06fcc     00 32 26 F5 | 	andn	_var01, ##-1048576
06fd0     39 33 5A F2 | 	cmps	_var01, arg01 wcz
06fd4     08 00 90 CD |  if_b	jmp	#LR__0355
06fd8     3A 33 5A F2 | 	cmps	_var01, arg02 wcz
06fdc     08 00 90 CD |  if_b	jmp	#LR__0356
06fe0                 | LR__0355
06fe0     00 2C 06 F6 | 	mov	result1, #0
06fe4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06fe8                 | LR__0356
06fe8     19 35 02 F6 | 	mov	_var02, _var01
06fec     39 35 62 F5 | 	xor	_var02, arg01
06ff0     0F 34 0E F5 | 	and	_var02, #15 wz
06ff4     00 2C 06 56 |  if_ne	mov	result1, #0
06ff8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06ffc     19 35 02 F6 | 	mov	_var02, _var01
07000     02 34 06 F1 | 	add	_var02, #2
07004     1A 35 E2 FA | 	rdword	_var02, _var02
07008     7F 00 00 FF 
0700c     C0 35 06 F5 | 	and	_var02, ##65472
07010     36 00 00 FF 
07014     80 34 0E F2 | 	cmp	_var02, ##27776 wz
07018     00 2C 06 56 |  if_ne	mov	result1, #0
0701c     19 2D 02 A6 |  if_e	mov	result1, _var01
07020                 | __system___gc_isvalidptr_ret
07020     2D 00 64 FD | 	ret
07024                 | 
07024                 | __system___gc_dofree
07024     0D 5A 05 F6 | 	mov	COUNT_, #13
07028     B0 00 A0 FD | 	call	#pushregs_
0702c     39 81 02 F6 | 	mov	local01, arg01
07030     7C FB BF FD | 	call	#__system___gc_ptrs
07034     16 83 02 F6 | 	mov	local02, result1
07038     17 85 02 F6 | 	mov	local03, result2
0703c     40 87 02 F6 | 	mov	local04, local01
07040     02 86 06 F1 | 	add	local04, #2
07044     36 00 80 FF 
07048     43 1F 59 FC | 	wrword	##27791, local04
0704c     40 89 02 F6 | 	mov	local05, local01
07050     40 73 02 F6 | 	mov	arg01, local01
07054     00 FC BF FD | 	call	#__system___gc_nextBlockPtr
07058     16 8B 02 F6 | 	mov	local06, result1
0705c     EC 8F 9F FE | 	loc	pa,	#(@LR__0358-@LR__0357)
07060     93 00 A0 FD | 	call	#FCACHE_LOAD_
07064                 | LR__0357
07064     04 88 06 F1 | 	add	local05, #4
07068     44 75 EA FA | 	rdword	arg02, local05 wz
0706c     41 73 02 F6 | 	mov	arg01, local02
07070     00 2C 06 A6 |  if_e	mov	result1, #0
07074     04 74 66 50 |  if_ne	shl	arg02, #4
07078     3A 73 02 51 |  if_ne	add	arg01, arg02
0707c     39 2D 02 56 |  if_ne	mov	result1, arg01
07080     16 89 0A F6 | 	mov	local05, result1 wz
07084     28 00 90 AD |  if_e	jmp	#LR__0359
07088     44 73 02 F6 | 	mov	arg01, local05
0708c     00 8C 06 F6 | 	mov	local07, #0
07090     02 72 06 F1 | 	add	arg01, #2
07094     39 8F E2 FA | 	rdword	local08, arg01
07098     36 00 00 FF 
0709c     8F 8E 0E F2 | 	cmp	local08, ##27791 wz
070a0     01 8C 66 A6 |  if_e	neg	local07, #1
070a4     46 2D 02 F6 | 	mov	result1, local07
070a8     16 91 0A F6 | 	mov	local09, result1 wz
070ac     B4 FF 9F AD |  if_e	jmp	#LR__0357
070b0                 | LR__0358
070b0                 | LR__0359
070b0     00 88 0E F2 | 	cmp	local05, #0 wz
070b4     41 89 02 A6 |  if_e	mov	local05, local02
070b8     44 87 02 F6 | 	mov	local04, local05
070bc     06 86 06 F1 | 	add	local04, #6
070c0     40 91 02 F6 | 	mov	local09, local01
070c4     43 93 E2 FA | 	rdword	local10, local04
070c8     06 90 06 F1 | 	add	local09, #6
070cc     48 93 52 FC | 	wrword	local10, local09
070d0     40 75 0A F6 | 	mov	arg02, local01 wz
070d4     00 2C 06 A6 |  if_e	mov	result1, #0
070d8     41 75 82 51 |  if_ne	sub	arg02, local02
070dc     04 74 46 50 |  if_ne	shr	arg02, #4
070e0     3A 2D 02 56 |  if_ne	mov	result1, arg02
070e4     16 93 02 F6 | 	mov	local10, result1
070e8     44 95 02 F6 | 	mov	local11, local05
070ec     06 94 06 F1 | 	add	local11, #6
070f0     4A 93 52 FC | 	wrword	local10, local11
070f4     41 89 0A F2 | 	cmp	local05, local02 wz
070f8     84 00 90 AD |  if_e	jmp	#LR__0362
070fc     44 73 02 F6 | 	mov	arg01, local05
07100     54 FB BF FD | 	call	#__system___gc_nextBlockPtr
07104     40 2D 0A F2 | 	cmp	result1, local01 wz
07108     74 00 90 5D |  if_ne	jmp	#LR__0361
0710c     44 87 E2 FA | 	rdword	local04, local05
07110     40 95 E2 FA | 	rdword	local11, local01
07114     4A 87 02 F1 | 	add	local04, local11
07118     44 87 52 FC | 	wrword	local04, local05
0711c     40 87 02 F6 | 	mov	local04, local01
07120     02 86 06 F1 | 	add	local04, #2
07124     43 01 58 FC | 	wrword	#0, local04
07128     40 73 02 F6 | 	mov	arg01, local01
0712c     28 FB BF FD | 	call	#__system___gc_nextBlockPtr
07130     16 8B 02 F6 | 	mov	local06, result1
07134     42 8B 5A F2 | 	cmps	local06, local03 wcz
07138     20 00 90 3D |  if_ae	jmp	#LR__0360
0713c     44 75 0A F6 | 	mov	arg02, local05 wz
07140     00 2C 06 A6 |  if_e	mov	result1, #0
07144     41 75 82 51 |  if_ne	sub	arg02, local02
07148     04 74 46 50 |  if_ne	shr	arg02, #4
0714c     3A 2D 02 56 |  if_ne	mov	result1, arg02
07150     45 95 02 F6 | 	mov	local11, local06
07154     04 94 06 F1 | 	add	local11, #4
07158     4A 2D 52 FC | 	wrword	result1, local11
0715c                 | LR__0360
0715c     40 87 02 F6 | 	mov	local04, local01
07160     06 86 06 F1 | 	add	local04, #6
07164     44 91 02 F6 | 	mov	local09, local05
07168     43 93 E2 FA | 	rdword	local10, local04
0716c     06 90 06 F1 | 	add	local09, #6
07170     48 93 52 FC | 	wrword	local10, local09
07174     06 80 06 F1 | 	add	local01, #6
07178     40 01 58 FC | 	wrword	#0, local01
0717c     44 81 02 F6 | 	mov	local01, local05
07180                 | LR__0361
07180                 | LR__0362
07180     40 73 02 F6 | 	mov	arg01, local01
07184     D0 FA BF FD | 	call	#__system___gc_nextBlockPtr
07188     16 97 0A F6 | 	mov	local12, result1 wz
0718c     C8 00 90 AD |  if_e	jmp	#LR__0364
07190     42 97 5A F2 | 	cmps	local12, local03 wcz
07194     C0 00 90 3D |  if_ae	jmp	#LR__0364
07198     4B 73 02 F6 | 	mov	arg01, local12
0719c     00 8C 06 F6 | 	mov	local07, #0
071a0     02 72 06 F1 | 	add	arg01, #2
071a4     39 8F E2 FA | 	rdword	local08, arg01
071a8     36 00 00 FF 
071ac     8F 8E 0E F2 | 	cmp	local08, ##27791 wz
071b0     01 8C 66 A6 |  if_e	neg	local07, #1
071b4     46 2D 0A F6 | 	mov	result1, local07 wz
071b8     9C 00 90 AD |  if_e	jmp	#LR__0364
071bc     40 89 02 F6 | 	mov	local05, local01
071c0     44 87 E2 FA | 	rdword	local04, local05
071c4     4B 81 02 F6 | 	mov	local01, local12
071c8     40 95 E2 FA | 	rdword	local11, local01
071cc     4A 87 02 F1 | 	add	local04, local11
071d0     44 99 02 F6 | 	mov	local13, local05
071d4     4C 87 52 FC | 	wrword	local04, local13
071d8     40 87 02 F6 | 	mov	local04, local01
071dc     06 86 06 F1 | 	add	local04, #6
071e0     44 91 02 F6 | 	mov	local09, local05
071e4     43 93 E2 FA | 	rdword	local10, local04
071e8     06 90 06 F1 | 	add	local09, #6
071ec     48 93 52 FC | 	wrword	local10, local09
071f0     40 87 02 F6 | 	mov	local04, local01
071f4     02 86 06 F1 | 	add	local04, #2
071f8     43 55 59 FC | 	wrword	#170, local04
071fc     40 87 02 F6 | 	mov	local04, local01
07200     06 86 06 F1 | 	add	local04, #6
07204     43 01 58 FC | 	wrword	#0, local04
07208     40 87 02 F6 | 	mov	local04, local01
0720c     43 73 02 F6 | 	mov	arg01, local04
07210     44 FA BF FD | 	call	#__system___gc_nextBlockPtr
07214     16 91 02 F6 | 	mov	local09, result1
07218     48 8B 0A F6 | 	mov	local06, local09 wz
0721c     38 00 90 AD |  if_e	jmp	#LR__0363
07220     42 8B 5A F2 | 	cmps	local06, local03 wcz
07224     30 00 90 3D |  if_ae	jmp	#LR__0363
07228     41 87 02 F6 | 	mov	local04, local02
0722c     44 91 02 F6 | 	mov	local09, local05
07230     43 73 02 F6 | 	mov	arg01, local04
07234     48 75 0A F6 | 	mov	arg02, local09 wz
07238     00 2C 06 A6 |  if_e	mov	result1, #0
0723c     39 75 82 51 |  if_ne	sub	arg02, arg01
07240     04 74 46 50 |  if_ne	shr	arg02, #4
07244     3A 2D 02 56 |  if_ne	mov	result1, arg02
07248     16 93 02 F6 | 	mov	local10, result1
0724c     45 95 02 F6 | 	mov	local11, local06
07250     04 94 06 F1 | 	add	local11, #4
07254     4A 93 52 FC | 	wrword	local10, local11
07258                 | LR__0363
07258                 | LR__0364
07258     45 2D 02 F6 | 	mov	result1, local06
0725c     AF F0 03 F6 | 	mov	ptra, fp
07260     BF 00 A0 FD | 	call	#popregs_
07264                 | __system___gc_dofree_ret
07264     2D 00 64 FD | 	ret
07268                 | 
07268                 | __system___gc_docollect
07268     09 5A 05 F6 | 	mov	COUNT_, #9
0726c     B0 00 A0 FD | 	call	#pushregs_
07270     3C F9 BF FD | 	call	#__system___gc_ptrs
07274     17 81 02 F6 | 	mov	local01, result2
07278     16 83 02 F6 | 	mov	local02, result1
0727c     41 73 02 F6 | 	mov	arg01, local02
07280     D4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07284     16 85 0A F6 | 	mov	local03, result1 wz
07288     01 2C 62 FD | 	cogid	result1
0728c     16 87 02 F6 | 	mov	local04, result1
07290     34 00 90 AD |  if_e	jmp	#LR__0366
07294                 | LR__0365
07294     40 85 5A F2 | 	cmps	local03, local01 wcz
07298     2C 00 90 3D |  if_ae	jmp	#LR__0366
0729c     42 89 02 F6 | 	mov	local05, local03
072a0     02 88 06 F1 | 	add	local05, #2
072a4     44 8B E2 FA | 	rdword	local06, local05
072a8     20 8A 26 F5 | 	andn	local06, #32
072ac     42 8D 02 F6 | 	mov	local07, local03
072b0     02 8C 06 F1 | 	add	local07, #2
072b4     46 8B 52 FC | 	wrword	local06, local07
072b8     42 73 02 F6 | 	mov	arg01, local03
072bc     98 F9 BF FD | 	call	#__system___gc_nextBlockPtr
072c0     16 85 0A F6 | 	mov	local03, result1 wz
072c4     CC FF 9F 5D |  if_ne	jmp	#LR__0365
072c8                 | LR__0366
072c8     00 8A 06 F6 | 	mov	local06, #0
072cc     00 72 06 F6 | 	mov	arg01, #0
072d0     68 EE BF FD | 	call	#__system____topofstack
072d4     16 8D 02 F6 | 	mov	local07, result1
072d8     45 73 02 F6 | 	mov	arg01, local06
072dc     46 75 02 F6 | 	mov	arg02, local07
072e0     A0 00 B0 FD | 	call	#__system___gc_markhub
072e4     34 01 B0 FD | 	call	#__system___gc_markcog
072e8     41 73 02 F6 | 	mov	arg01, local02
072ec     68 F9 BF FD | 	call	#__system___gc_nextBlockPtr
072f0     16 8F 0A F6 | 	mov	local08, result1 wz
072f4     10 00 90 5D |  if_ne	jmp	#LR__0367
072f8     42 00 00 FF 
072fc     AD 72 06 F6 | 	mov	arg01, ##@LR__0452
07300     70 FB BF FD | 	call	#__system___gc_errmsg
07304     70 00 90 FD | 	jmp	#LR__0373
07308                 | LR__0367
07308                 | LR__0368
07308     47 85 02 F6 | 	mov	local03, local08
0730c     42 73 02 F6 | 	mov	arg01, local03
07310     44 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07314     16 8F 02 F6 | 	mov	local08, result1
07318     42 8B 02 F6 | 	mov	local06, local03
0731c     02 8A 06 F1 | 	add	local06, #2
07320     45 91 E2 FA | 	rdword	local09, local06
07324     20 90 CE F7 | 	test	local09, #32 wz
07328     3C 00 90 5D |  if_ne	jmp	#LR__0371
0732c     48 89 02 F6 | 	mov	local05, local09
07330     10 88 0E F5 | 	and	local05, #16 wz
07334     30 00 90 5D |  if_ne	jmp	#LR__0371
07338     48 8B 02 F6 | 	mov	local06, local09
0733c     0F 8A 06 F5 | 	and	local06, #15
07340     45 91 02 F6 | 	mov	local09, local06
07344     43 91 0A F2 | 	cmp	local09, local04 wz
07348     08 00 90 AD |  if_e	jmp	#LR__0369
0734c     0E 90 0E F2 | 	cmp	local09, #14 wz
07350     14 00 90 5D |  if_ne	jmp	#LR__0370
07354                 | LR__0369
07354     42 8B 02 F6 | 	mov	local06, local03
07358     45 73 02 F6 | 	mov	arg01, local06
0735c     C4 FC BF FD | 	call	#__system___gc_dofree
07360     16 89 02 F6 | 	mov	local05, result1
07364     44 8F 02 F6 | 	mov	local08, local05
07368                 | LR__0370
07368                 | LR__0371
07368     00 8E 0E F2 | 	cmp	local08, #0 wz
0736c     08 00 90 AD |  if_e	jmp	#LR__0372
07370     40 8F 5A F2 | 	cmps	local08, local01 wcz
07374     90 FF 9F CD |  if_b	jmp	#LR__0368
07378                 | LR__0372
07378                 | LR__0373
07378     AF F0 03 F6 | 	mov	ptra, fp
0737c     BF 00 A0 FD | 	call	#popregs_
07380                 | __system___gc_docollect_ret
07380     2D 00 64 FD | 	ret
07384                 | 
07384                 | __system___gc_markhub
07384     0A 5A 05 F6 | 	mov	COUNT_, #10
07388     B0 00 A0 FD | 	call	#pushregs_
0738c     39 81 02 F6 | 	mov	local01, arg01
07390     3A 83 02 F6 | 	mov	local02, arg02
07394     18 F8 BF FD | 	call	#__system___gc_ptrs
07398     16 85 02 F6 | 	mov	local03, result1
0739c     17 87 02 F6 | 	mov	local04, result2
073a0                 | LR__0374
073a0     41 81 5A F2 | 	cmps	local01, local02 wcz
073a4     68 00 90 3D |  if_ae	jmp	#LR__0375
073a8     40 77 02 FB | 	rdlong	arg03, local01
073ac     04 80 06 F1 | 	add	local01, #4
073b0     42 73 02 F6 | 	mov	arg01, local03
073b4     43 75 02 F6 | 	mov	arg02, local04
073b8     E8 FB BF FD | 	call	#__system___gc_isvalidptr
073bc     16 89 0A F6 | 	mov	local05, result1 wz
073c0     DC FF 9F AD |  if_e	jmp	#LR__0374
073c4     44 73 02 F6 | 	mov	arg01, local05
073c8     00 8A 06 F6 | 	mov	local06, #0
073cc     02 72 06 F1 | 	add	arg01, #2
073d0     39 8D E2 FA | 	rdword	local07, arg01
073d4     36 00 00 FF 
073d8     8F 8C 0E F2 | 	cmp	local07, ##27791 wz
073dc     01 8A 66 A6 |  if_e	neg	local06, #1
073e0     45 2D 02 F6 | 	mov	result1, local06
073e4     16 8F 0A F6 | 	mov	local08, result1 wz
073e8     B4 FF 9F 5D |  if_ne	jmp	#LR__0374
073ec     44 91 02 F6 | 	mov	local09, local05
073f0     02 90 06 F1 | 	add	local09, #2
073f4     48 93 E2 FA | 	rdword	local10, local09
073f8     0F 92 26 F5 | 	andn	local10, #15
073fc     2E 92 46 F5 | 	or	local10, #46
07400     44 91 02 F6 | 	mov	local09, local05
07404     02 90 06 F1 | 	add	local09, #2
07408     48 93 52 FC | 	wrword	local10, local09
0740c     90 FF 9F FD | 	jmp	#LR__0374
07410                 | LR__0375
07410     AF F0 03 F6 | 	mov	ptra, fp
07414     BF 00 A0 FD | 	call	#popregs_
07418                 | __system___gc_markhub_ret
07418     2D 00 64 FD | 	ret
0741c                 | 
0741c                 | __system___gc_markcog
0741c     06 5A 05 F6 | 	mov	COUNT_, #6
07420     B0 00 A0 FD | 	call	#pushregs_
07424     88 F7 BF FD | 	call	#__system___gc_ptrs
07428     16 81 02 F6 | 	mov	local01, result1
0742c     17 83 02 F6 | 	mov	local02, result2
07430     00 84 06 F6 | 	mov	local03, #0
07434                 | LR__0376
07434     F0 87 06 F6 | 	mov	local04, #496
07438     42 87 82 F1 | 	sub	local04, local03
0743c     F0 87 06 F1 | 	add	local04, #496
07440                 | 	'.live	local04
07440     00 86 96 F9 | 	alts	local04, #0
07444     43 89 02 F6 | 	mov	local05, local04
07448     40 73 02 F6 | 	mov	arg01, local01
0744c     41 75 02 F6 | 	mov	arg02, local02
07450     44 77 02 F6 | 	mov	arg03, local05
07454     4C FB BF FD | 	call	#__system___gc_isvalidptr
07458     16 89 0A F6 | 	mov	local05, result1 wz
0745c     18 00 90 AD |  if_e	jmp	#LR__0377
07460     44 8B 02 F6 | 	mov	local06, local05
07464     02 8A 06 F1 | 	add	local06, #2
07468     45 87 E2 FA | 	rdword	local04, local06
0746c     20 86 46 F5 | 	or	local04, #32
07470     02 88 06 F1 | 	add	local05, #2
07474     44 87 52 FC | 	wrword	local04, local05
07478                 | LR__0377
07478     01 84 06 F1 | 	add	local03, #1
0747c     F0 85 5E F2 | 	cmps	local03, #496 wcz
07480     B0 FF 9F CD |  if_b	jmp	#LR__0376
07484     AF F0 03 F6 | 	mov	ptra, fp
07488     BF 00 A0 FD | 	call	#popregs_
0748c                 | __system___gc_markcog_ret
0748c     2D 00 64 FD | 	ret
07490                 | 
07490                 | __system__write
07490     03 5A 05 F6 | 	mov	COUNT_, #3
07494     B0 00 A0 FD | 	call	#pushregs_
07498     39 81 02 F6 | 	mov	local01, arg01
0749c     3A 83 02 F6 | 	mov	local02, arg02
074a0     3B 85 02 F6 | 	mov	local03, arg03
074a4     0A 80 1E F2 | 	cmp	local01, #10 wcz
074a8     1C 00 90 CD |  if_b	jmp	#LR__0378
074ac     01 00 00 FF 
074b0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
074b4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
074b8     01 00 00 FF 
074bc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
074c0     01 2C 66 F6 | 	neg	result1, #1
074c4     28 00 90 FD | 	jmp	#LR__0379
074c8                 | LR__0378
074c8     40 73 02 F6 | 	mov	arg01, local01
074cc     01 72 66 F0 | 	shl	arg01, #1
074d0     40 73 02 F1 | 	add	arg01, local01
074d4     04 72 66 F0 | 	shl	arg01, #4
074d8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
074dc     0A 73 02 F1 | 	add	arg01, ptr___system__dat__
074e0     41 75 02 F6 | 	mov	arg02, local02
074e4     42 77 02 F6 | 	mov	arg03, local03
074e8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
074ec     E0 08 B0 FD | 	call	#__system___vfswrite
074f0                 | LR__0379
074f0     AF F0 03 F6 | 	mov	ptra, fp
074f4     BF 00 A0 FD | 	call	#popregs_
074f8                 | __system__write_ret
074f8     2D 00 64 FD | 	ret
074fc                 | 
074fc                 | __system__read
074fc     03 5A 05 F6 | 	mov	COUNT_, #3
07500     B0 00 A0 FD | 	call	#pushregs_
07504     39 81 02 F6 | 	mov	local01, arg01
07508     3A 83 02 F6 | 	mov	local02, arg02
0750c     3B 85 02 F6 | 	mov	local03, arg03
07510     0A 80 1E F2 | 	cmp	local01, #10 wcz
07514     1C 00 90 CD |  if_b	jmp	#LR__0380
07518     01 00 00 FF 
0751c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07520     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07524     01 00 00 FF 
07528     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0752c     01 2C 66 F6 | 	neg	result1, #1
07530     28 00 90 FD | 	jmp	#LR__0381
07534                 | LR__0380
07534     40 73 02 F6 | 	mov	arg01, local01
07538     01 72 66 F0 | 	shl	arg01, #1
0753c     40 73 02 F1 | 	add	arg01, local01
07540     04 72 66 F0 | 	shl	arg01, #4
07544     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07548     0A 73 02 F1 | 	add	arg01, ptr___system__dat__
0754c     41 75 02 F6 | 	mov	arg02, local02
07550     42 77 02 F6 | 	mov	arg03, local03
07554     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07558     38 0A B0 FD | 	call	#__system___vfsread
0755c                 | LR__0381
0755c     AF F0 03 F6 | 	mov	ptra, fp
07560     BF 00 A0 FD | 	call	#popregs_
07564                 | __system__read_ret
07564     2D 00 64 FD | 	ret
07568                 | 
07568                 | __system__close
07568     01 5A 05 F6 | 	mov	COUNT_, #1
0756c     B0 00 A0 FD | 	call	#pushregs_
07570     39 81 02 F6 | 	mov	local01, arg01
07574     0A 80 1E F2 | 	cmp	local01, #10 wcz
07578     1C 00 90 CD |  if_b	jmp	#LR__0382
0757c     01 00 00 FF 
07580     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07584     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07588     01 00 00 FF 
0758c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07590     01 2C 66 F6 | 	neg	result1, #1
07594     20 00 90 FD | 	jmp	#LR__0383
07598                 | LR__0382
07598     40 73 02 F6 | 	mov	arg01, local01
0759c     01 72 66 F0 | 	shl	arg01, #1
075a0     40 73 02 F1 | 	add	arg01, local01
075a4     04 72 66 F0 | 	shl	arg01, #4
075a8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
075ac     0A 73 02 F1 | 	add	arg01, ptr___system__dat__
075b0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
075b4     84 03 B0 FD | 	call	#__system___closeraw
075b8                 | LR__0383
075b8     AF F0 03 F6 | 	mov	ptra, fp
075bc     BF 00 A0 FD | 	call	#popregs_
075c0                 | __system__close_ret
075c0     2D 00 64 FD | 	ret
075c4                 | 
075c4                 | __system__lseek
075c4     09 5A 05 F6 | 	mov	COUNT_, #9
075c8     B0 00 A0 FD | 	call	#pushregs_
075cc     39 81 02 F6 | 	mov	local01, arg01
075d0     3A 83 02 F6 | 	mov	local02, arg02
075d4     3B 85 02 F6 | 	mov	local03, arg03
075d8     0A 80 1E F2 | 	cmp	local01, #10 wcz
075dc     1C 00 90 CD |  if_b	jmp	#LR__0384
075e0     01 00 00 FF 
075e4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
075e8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075ec     01 00 00 FF 
075f0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
075f4     01 2C 66 F6 | 	neg	result1, #1
075f8     D8 00 90 FD | 	jmp	#LR__0388
075fc                 | LR__0384
075fc     40 87 02 F6 | 	mov	local04, local01
07600     01 86 66 F0 | 	shl	local04, #1
07604     40 87 02 F1 | 	add	local04, local01
07608     04 86 66 F0 | 	shl	local04, #4
0760c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07610     0A 87 02 F1 | 	add	local04, ptr___system__dat__
07614     2C 86 06 F1 | 	add	local04, #44
07618     43 89 0A FB | 	rdlong	local05, local04 wz
0761c     2C 86 86 F1 | 	sub	local04, #44
07620     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07624     1C 00 90 5D |  if_ne	jmp	#LR__0385
07628     01 00 00 FF 
0762c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07630     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07634     01 00 00 FF 
07638     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0763c     01 2C 66 F6 | 	neg	result1, #1
07640     90 00 90 FD | 	jmp	#LR__0388
07644                 | LR__0385
07644     08 86 06 F1 | 	add	local04, #8
07648     43 89 02 FB | 	rdlong	local05, local04
0764c     08 86 86 F1 | 	sub	local04, #8
07650     40 88 CE F7 | 	test	local05, #64 wz
07654     14 00 90 AD |  if_e	jmp	#LR__0386
07658     08 86 06 F1 | 	add	local04, #8
0765c     43 89 02 FB | 	rdlong	local05, local04
07660     80 88 46 F5 | 	or	local05, #128
07664     43 89 62 FC | 	wrlong	local05, local04
07668     08 86 86 F1 | 	sub	local04, #8
0766c                 | LR__0386
0766c     2C 86 06 F1 | 	add	local04, #44
07670     43 89 02 FB | 	rdlong	local05, local04
07674     2C 86 86 F1 | 	sub	local04, #44
07678     44 8B 02 FB | 	rdlong	local06, local05
0767c     04 88 06 F1 | 	add	local05, #4
07680     44 8D 02 FB | 	rdlong	local07, local05
07684     43 73 02 F6 | 	mov	arg01, local04
07688     41 75 02 F6 | 	mov	arg02, local02
0768c     42 77 02 F6 | 	mov	arg03, local03
07690     07 8F 02 F6 | 	mov	local08, objptr
07694     45 0F 02 F6 | 	mov	objptr, local06
07698     2D 8C 62 FD | 	call	local07
0769c     47 0F 02 F6 | 	mov	objptr, local08
076a0     16 91 02 F6 | 	mov	local09, result1
076a4     00 90 5E F2 | 	cmps	local09, #0 wcz
076a8     24 00 90 3D |  if_ae	jmp	#LR__0387
076ac     48 73 6A F6 | 	neg	arg01, local09 wz
076b0     01 00 00 FF 
076b4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
076b8     0A 73 62 FC | 	wrlong	arg01, ptr___system__dat__
076bc     01 00 00 FF 
076c0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
076c4     01 2C 66 56 |  if_ne	neg	result1, #1
076c8     00 2C 06 A6 |  if_e	mov	result1, #0
076cc     04 00 90 FD | 	jmp	#LR__0388
076d0                 | LR__0387
076d0     48 2D 02 F6 | 	mov	result1, local09
076d4                 | LR__0388
076d4     AF F0 03 F6 | 	mov	ptra, fp
076d8     BF 00 A0 FD | 	call	#popregs_
076dc                 | __system__lseek_ret
076dc     2D 00 64 FD | 	ret
076e0                 | 
076e0                 | __system____getftab
076e0     0A 72 1E F2 | 	cmp	arg01, #10 wcz
076e4     00 2C 06 36 |  if_ae	mov	result1, #0
076e8     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
076ec     39 2D 02 F6 | 	mov	result1, arg01
076f0     01 2C 66 F0 | 	shl	result1, #1
076f4     39 2D 02 F1 | 	add	result1, arg01
076f8     04 2C 66 F0 | 	shl	result1, #4
076fc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07700     0A 2D 02 F1 | 	add	result1, ptr___system__dat__
07704     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07708                 | __system____getftab_ret
07708     2D 00 64 FD | 	ret
0770c                 | 
0770c                 | __system___strrev
0770c     39 33 CA FA | 	rdbyte	_var01, arg01 wz
07710     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07714     39 35 02 F6 | 	mov	_var02, arg01
07718     F0 88 9F FE | 	loc	pa,	#(@LR__0390-@LR__0389)
0771c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07720                 | LR__0389
07720     1A 33 CA FA | 	rdbyte	_var01, _var02 wz
07724     01 34 06 51 |  if_ne	add	_var02, #1
07728     F4 FF 9F 5D |  if_ne	jmp	#LR__0389
0772c                 | LR__0390
0772c     01 34 86 F1 | 	sub	_var02, #1
07730                 | LR__0391
07730     39 35 5A F2 | 	cmps	_var02, arg01 wcz
07734     1C 00 90 ED |  if_be	jmp	#LR__0392
07738     39 37 C2 FA | 	rdbyte	_var03, arg01
0773c     1A 39 C2 FA | 	rdbyte	_var04, _var02
07740     39 39 42 FC | 	wrbyte	_var04, arg01
07744     1A 37 42 FC | 	wrbyte	_var03, _var02
07748     01 72 06 F1 | 	add	arg01, #1
0774c     01 34 86 F1 | 	sub	_var02, #1
07750     DC FF 9F FD | 	jmp	#LR__0391
07754                 | LR__0392
07754                 | __system___strrev_ret
07754     2D 00 64 FD | 	ret
07758                 | 
07758                 | __system___fmtpad
07758     0C 5A 05 F6 | 	mov	COUNT_, #12
0775c     B0 00 A0 FD | 	call	#pushregs_
07760     39 81 02 F6 | 	mov	local01, arg01
07764     3A 83 02 F6 | 	mov	local02, arg02
07768     3C 85 02 F6 | 	mov	local03, arg04
0776c     41 87 EA F8 | 	getbyte	local04, local02, #1
07770     16 82 46 F0 | 	shr	local02, #22
07774     03 82 0E F5 | 	and	local02, #3 wz
07778     00 88 06 F6 | 	mov	local05, #0
0777c     01 82 06 A6 |  if_e	mov	local02, #1
07780     42 83 CA F7 | 	test	local02, local03 wz
07784     00 2C 06 A6 |  if_e	mov	result1, #0
07788     84 00 90 AD |  if_e	jmp	#LR__0396
0778c     3B 87 82 F1 | 	sub	local04, arg03
07790     43 8B 02 F6 | 	mov	local06, local04
07794     00 8A 5E F2 | 	cmps	local06, #0 wcz
07798     00 2C 06 E6 |  if_be	mov	result1, #0
0779c     70 00 90 ED |  if_be	jmp	#LR__0396
077a0     03 82 0E F2 | 	cmp	local02, #3 wz
077a4     18 00 90 5D |  if_ne	jmp	#LR__0393
077a8     01 84 0E F2 | 	cmp	local03, #1 wz
077ac     6E 8C 62 FD | 	wrz	local07
077b0     46 8B 02 F1 | 	add	local06, local07
077b4     45 8B 52 F6 | 	abs	local06, local06 wc
077b8     01 8A 46 F0 | 	shr	local06, #1
077bc     45 8B 62 C6 |  if_b	neg	local06, local06
077c0                 | LR__0393
077c0     00 8E 06 F6 | 	mov	local08, #0
077c4                 | LR__0394
077c4     45 8F 5A F2 | 	cmps	local08, local06 wcz
077c8     40 00 90 3D |  if_ae	jmp	#LR__0395
077cc     40 91 02 F6 | 	mov	local09, local01
077d0     48 8D 02 FB | 	rdlong	local07, local09
077d4     04 90 06 F1 | 	add	local09, #4
077d8     48 93 02 FB | 	rdlong	local10, local09
077dc     20 72 06 F6 | 	mov	arg01, #32
077e0     07 95 02 F6 | 	mov	local11, objptr
077e4     46 0F 02 F6 | 	mov	objptr, local07
077e8     2D 92 62 FD | 	call	local10
077ec     4A 0F 02 F6 | 	mov	objptr, local11
077f0     16 97 02 F6 | 	mov	local12, result1
077f4     00 96 5E F2 | 	cmps	local12, #0 wcz
077f8     4B 2D 02 C6 |  if_b	mov	result1, local12
077fc     10 00 90 CD |  if_b	jmp	#LR__0396
07800     4B 89 02 F1 | 	add	local05, local12
07804     01 8E 06 F1 | 	add	local08, #1
07808     B8 FF 9F FD | 	jmp	#LR__0394
0780c                 | LR__0395
0780c     44 2D 02 F6 | 	mov	result1, local05
07810                 | LR__0396
07810     AF F0 03 F6 | 	mov	ptra, fp
07814     BF 00 A0 FD | 	call	#popregs_
07818                 | __system___fmtpad_ret
07818     2D 00 64 FD | 	ret
0781c                 | 
0781c                 | __system___uitoa
0781c     09 5A 05 F6 | 	mov	COUNT_, #9
07820     B0 00 A0 FD | 	call	#pushregs_
07824     39 81 02 F6 | 	mov	local01, arg01
07828     3A 83 02 F6 | 	mov	local02, arg02
0782c     3B 85 02 F6 | 	mov	local03, arg03
07830     3C 87 02 F6 | 	mov	local04, arg04
07834     3D 89 0A F6 | 	mov	local05, arg05 wz
07838     40 8B 02 F6 | 	mov	local06, local01
0783c     00 8C 06 F6 | 	mov	local07, #0
07840     37 8E 06 56 |  if_ne	mov	local08, #55
07844     57 8E 06 A6 |  if_e	mov	local08, #87
07848                 | LR__0397
07848     41 AF 02 F6 | 	mov	muldiva_, local02
0784c     42 B1 02 F6 | 	mov	muldivb_, local03
07850     CC 00 A0 FD | 	call	#unsdivide_
07854     57 91 02 F6 | 	mov	local09, muldiva_
07858     0A 90 1E F2 | 	cmp	local09, #10 wcz
0785c     30 90 06 C1 |  if_b	add	local09, #48
07860     47 91 02 31 |  if_ae	add	local09, local08
07864     45 91 42 FC | 	wrbyte	local09, local06
07868     41 AF 02 F6 | 	mov	muldiva_, local02
0786c     42 B1 02 F6 | 	mov	muldivb_, local03
07870     01 8A 06 F1 | 	add	local06, #1
07874     CC 00 A0 FD | 	call	#unsdivide_
07878     58 83 0A F6 | 	mov	local02, muldivb_ wz
0787c     01 8C 06 F1 | 	add	local07, #1
07880     C4 FF 9F 5D |  if_ne	jmp	#LR__0397
07884     43 8D 1A F2 | 	cmp	local07, local04 wcz
07888     BC FF 9F CD |  if_b	jmp	#LR__0397
0788c     45 01 48 FC | 	wrbyte	#0, local06
07890     40 73 02 F6 | 	mov	arg01, local01
07894     74 FE BF FD | 	call	#__system___strrev
07898     46 2D 02 F6 | 	mov	result1, local07
0789c     AF F0 03 F6 | 	mov	ptra, fp
078a0     BF 00 A0 FD | 	call	#popregs_
078a4                 | __system___uitoa_ret
078a4     2D 00 64 FD | 	ret
078a8                 | 
078a8                 | __system___gettxfunc
078a8     03 5A 05 F6 | 	mov	COUNT_, #3
078ac     B0 00 A0 FD | 	call	#pushregs_
078b0     2C FE BF FD | 	call	#__system____getftab
078b4     16 81 0A F6 | 	mov	local01, result1 wz
078b8     14 00 90 AD |  if_e	jmp	#LR__0398
078bc     08 80 06 F1 | 	add	local01, #8
078c0     40 83 02 FB | 	rdlong	local02, local01
078c4     08 80 86 F1 | 	sub	local01, #8
078c8     41 85 0A F6 | 	mov	local03, local02 wz
078cc     08 00 90 5D |  if_ne	jmp	#LR__0399
078d0                 | LR__0398
078d0     00 2C 06 F6 | 	mov	result1, #0
078d4     0C 00 90 FD | 	jmp	#LR__0400
078d8                 | LR__0399
078d8     40 73 02 F6 | 	mov	arg01, local01
078dc     09 75 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
078e0     80 E8 BF FD | 	call	#__system___make_methodptr
078e4                 | LR__0400
078e4     AF F0 03 F6 | 	mov	ptra, fp
078e8     BF 00 A0 FD | 	call	#popregs_
078ec                 | __system___gettxfunc_ret
078ec     2D 00 64 FD | 	ret
078f0                 | 
078f0                 | __system___getiolock_0145
078f0     03 5A 05 F6 | 	mov	COUNT_, #3
078f4     B0 00 A0 FD | 	call	#pushregs_
078f8     E4 FD BF FD | 	call	#__system____getftab
078fc     16 81 0A F6 | 	mov	local01, result1 wz
07900     14 00 90 AD |  if_e	jmp	#LR__0401
07904     08 80 06 F1 | 	add	local01, #8
07908     40 83 02 FB | 	rdlong	local02, local01
0790c     08 80 86 F1 | 	sub	local01, #8
07910     41 85 0A F6 | 	mov	local03, local02 wz
07914     10 00 90 5D |  if_ne	jmp	#LR__0402
07918                 | LR__0401
07918     18 14 06 F1 | 	add	ptr___system__dat__, #24
0791c     0A 2D 02 F6 | 	mov	result1, ptr___system__dat__
07920     18 14 86 F1 | 	sub	ptr___system__dat__, #24
07924     08 00 90 FD | 	jmp	#LR__0403
07928                 | LR__0402
07928     0C 80 06 F1 | 	add	local01, #12
0792c     40 2D 02 F6 | 	mov	result1, local01
07930                 | LR__0403
07930     AF F0 03 F6 | 	mov	ptra, fp
07934     BF 00 A0 FD | 	call	#popregs_
07938                 | __system___getiolock_0145_ret
07938     2D 00 64 FD | 	ret
0793c                 | 
0793c                 | __system___closeraw
0793c     06 5A 05 F6 | 	mov	COUNT_, #6
07940     B0 00 A0 FD | 	call	#pushregs_
07944     39 81 02 F6 | 	mov	local01, arg01
07948     00 82 06 F6 | 	mov	local02, #0
0794c     08 80 06 F1 | 	add	local01, #8
07950     40 85 0A FB | 	rdlong	local03, local01 wz
07954     08 80 86 F1 | 	sub	local01, #8
07958     1C 00 90 5D |  if_ne	jmp	#LR__0404
0795c     01 00 00 FF 
07960     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07964     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07968     01 00 00 FF 
0796c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07970     01 2C 66 F6 | 	neg	result1, #1
07974     90 00 90 FD | 	jmp	#LR__0407
07978                 | LR__0404
07978     28 80 06 F1 | 	add	local01, #40
0797c     40 85 0A FB | 	rdlong	local03, local01 wz
07980     28 80 86 F1 | 	sub	local01, #40
07984     2C 00 90 AD |  if_e	jmp	#LR__0405
07988     28 80 06 F1 | 	add	local01, #40
0798c     40 85 02 FB | 	rdlong	local03, local01
07990     28 80 86 F1 | 	sub	local01, #40
07994     42 87 02 FB | 	rdlong	local04, local03
07998     04 84 06 F1 | 	add	local03, #4
0799c     42 89 02 FB | 	rdlong	local05, local03
079a0     40 73 02 F6 | 	mov	arg01, local01
079a4     07 8B 02 F6 | 	mov	local06, objptr
079a8     43 0F 02 F6 | 	mov	objptr, local04
079ac     2D 88 62 FD | 	call	local05
079b0     45 0F 02 F6 | 	mov	objptr, local06
079b4                 | LR__0405
079b4     20 80 06 F1 | 	add	local01, #32
079b8     40 85 0A FB | 	rdlong	local03, local01 wz
079bc     20 80 86 F1 | 	sub	local01, #32
079c0     30 00 90 AD |  if_e	jmp	#LR__0406
079c4     20 80 06 F1 | 	add	local01, #32
079c8     40 85 02 FB | 	rdlong	local03, local01
079cc     20 80 86 F1 | 	sub	local01, #32
079d0     42 87 02 FB | 	rdlong	local04, local03
079d4     04 84 06 F1 | 	add	local03, #4
079d8     42 89 02 FB | 	rdlong	local05, local03
079dc     40 73 02 F6 | 	mov	arg01, local01
079e0     07 8B 02 F6 | 	mov	local06, objptr
079e4     43 0F 02 F6 | 	mov	objptr, local04
079e8     2D 88 62 FD | 	call	local05
079ec     45 0F 02 F6 | 	mov	objptr, local06
079f0     16 83 02 F6 | 	mov	local02, result1
079f4                 | LR__0406
079f4     40 73 02 F6 | 	mov	arg01, local01
079f8     00 74 06 F6 | 	mov	arg02, #0
079fc     30 76 06 F6 | 	mov	arg03, #48
07a00     A0 00 A0 FD | 	call	#\builtin_bytefill_
07a04     41 2D 02 F6 | 	mov	result1, local02
07a08                 | LR__0407
07a08     AF F0 03 F6 | 	mov	ptra, fp
07a0c     BF 00 A0 FD | 	call	#popregs_
07a10                 | __system___closeraw_ret
07a10     2D 00 64 FD | 	ret
07a14                 | 
07a14                 | __system____default_getc
07a14     05 5A 05 F6 | 	mov	COUNT_, #5
07a18     B0 00 A0 FD | 	call	#pushregs_
07a1c     39 81 02 F6 | 	mov	local01, arg01
07a20     40 83 02 FB | 	rdlong	local02, local01
07a24     08 82 06 F1 | 	add	local02, #8
07a28     41 85 02 FB | 	rdlong	local03, local02
07a2c     08 82 86 F1 | 	sub	local02, #8
07a30     02 84 CE F7 | 	test	local03, #2 wz
07a34     08 00 90 AD |  if_e	jmp	#LR__0408
07a38     40 73 02 F6 | 	mov	arg01, local01
07a3c     8C 01 B0 FD | 	call	#__system____default_flush
07a40                 | LR__0408
07a40     08 82 06 F1 | 	add	local02, #8
07a44     41 85 02 FB | 	rdlong	local03, local02
07a48     01 84 46 F5 | 	or	local03, #1
07a4c     41 85 62 FC | 	wrlong	local03, local02
07a50     08 82 86 F1 | 	sub	local02, #8
07a54     41 87 0A FB | 	rdlong	local04, local02 wz
07a58     0C 00 90 5D |  if_ne	jmp	#LR__0409
07a5c     40 73 02 F6 | 	mov	arg01, local01
07a60     4C 08 B0 FD | 	call	#__system____default_filbuf
07a64     16 87 02 F6 | 	mov	local04, result1
07a68                 | LR__0409
07a68     00 86 5E F2 | 	cmps	local04, #0 wcz
07a6c     01 2C 66 E6 |  if_be	neg	result1, #1
07a70     1C 00 90 ED |  if_be	jmp	#LR__0410
07a74     01 86 86 F1 | 	sub	local04, #1
07a78     41 87 62 FC | 	wrlong	local04, local02
07a7c     04 82 06 F1 | 	add	local02, #4
07a80     41 89 02 FB | 	rdlong	local05, local02
07a84     44 2D C2 FA | 	rdbyte	result1, local05
07a88     01 88 06 F1 | 	add	local05, #1
07a8c     41 89 62 FC | 	wrlong	local05, local02
07a90                 | LR__0410
07a90     AF F0 03 F6 | 	mov	ptra, fp
07a94     BF 00 A0 FD | 	call	#popregs_
07a98                 | __system____default_getc_ret
07a98     2D 00 64 FD | 	ret
07a9c                 | 
07a9c                 | __system____default_putc
07a9c     06 5A 05 F6 | 	mov	COUNT_, #6
07aa0     B0 00 A0 FD | 	call	#pushregs_
07aa4     39 81 02 F6 | 	mov	local01, arg01
07aa8     3A 83 02 F6 | 	mov	local02, arg02
07aac     41 85 02 FB | 	rdlong	local03, local02
07ab0     08 84 06 F1 | 	add	local03, #8
07ab4     42 87 02 FB | 	rdlong	local04, local03
07ab8     08 84 86 F1 | 	sub	local03, #8
07abc     01 86 CE F7 | 	test	local04, #1 wz
07ac0     08 00 90 AD |  if_e	jmp	#LR__0411
07ac4     41 73 02 F6 | 	mov	arg01, local02
07ac8     00 01 B0 FD | 	call	#__system____default_flush
07acc                 | LR__0411
07acc     08 84 06 F1 | 	add	local03, #8
07ad0     42 87 02 FB | 	rdlong	local04, local03
07ad4     02 86 46 F5 | 	or	local04, #2
07ad8     42 87 62 FC | 	wrlong	local04, local03
07adc     08 84 86 F1 | 	sub	local03, #8
07ae0     42 89 02 FB | 	rdlong	local05, local03
07ae4     44 8B 02 F6 | 	mov	local06, local05
07ae8     0C 84 06 F1 | 	add	local03, #12
07aec     42 8B 02 F1 | 	add	local06, local03
07af0     45 81 42 FC | 	wrbyte	local01, local06
07af4     FF 80 06 F5 | 	and	local01, #255
07af8     01 88 06 F1 | 	add	local05, #1
07afc     0C 84 86 F1 | 	sub	local03, #12
07b00     42 89 62 FC | 	wrlong	local05, local03
07b04     02 00 00 FF 
07b08     00 88 0E F2 | 	cmp	local05, ##1024 wz
07b0c     10 00 90 5D |  if_ne	jmp	#LR__0412
07b10     41 73 02 F6 | 	mov	arg01, local02
07b14     B4 00 B0 FD | 	call	#__system____default_flush
07b18     00 2C 0E F2 | 	cmp	result1, #0 wz
07b1c     01 80 66 56 |  if_ne	neg	local01, #1
07b20                 | LR__0412
07b20     40 2D 02 F6 | 	mov	result1, local01
07b24     AF F0 03 F6 | 	mov	ptra, fp
07b28     BF 00 A0 FD | 	call	#popregs_
07b2c                 | __system____default_putc_ret
07b2c     2D 00 64 FD | 	ret
07b30                 | 
07b30                 | __system____default_putc_terminal
07b30     06 5A 05 F6 | 	mov	COUNT_, #6
07b34     B0 00 A0 FD | 	call	#pushregs_
07b38     39 81 02 F6 | 	mov	local01, arg01
07b3c     3A 83 02 F6 | 	mov	local02, arg02
07b40     41 85 02 FB | 	rdlong	local03, local02
07b44     08 84 06 F1 | 	add	local03, #8
07b48     42 87 02 FB | 	rdlong	local04, local03
07b4c     08 84 86 F1 | 	sub	local03, #8
07b50     01 86 CE F7 | 	test	local04, #1 wz
07b54     08 00 90 AD |  if_e	jmp	#LR__0413
07b58     41 73 02 F6 | 	mov	arg01, local02
07b5c     6C 00 B0 FD | 	call	#__system____default_flush
07b60                 | LR__0413
07b60     08 84 06 F1 | 	add	local03, #8
07b64     42 87 02 FB | 	rdlong	local04, local03
07b68     02 86 46 F5 | 	or	local04, #2
07b6c     42 87 62 FC | 	wrlong	local04, local03
07b70     08 84 86 F1 | 	sub	local03, #8
07b74     42 89 02 FB | 	rdlong	local05, local03
07b78     44 8B 02 F6 | 	mov	local06, local05
07b7c     0C 84 06 F1 | 	add	local03, #12
07b80     42 8B 02 F1 | 	add	local06, local03
07b84     45 81 42 FC | 	wrbyte	local01, local06
07b88     FF 80 06 F5 | 	and	local01, #255
07b8c     0C 84 86 F1 | 	sub	local03, #12
07b90     01 88 06 F1 | 	add	local05, #1
07b94     42 89 62 FC | 	wrlong	local05, local03
07b98     0A 80 0E F2 | 	cmp	local01, #10 wz
07b9c     0C 00 90 AD |  if_e	jmp	#LR__0414
07ba0     02 00 00 FF 
07ba4     00 88 0E F2 | 	cmp	local05, ##1024 wz
07ba8     10 00 90 5D |  if_ne	jmp	#LR__0415
07bac                 | LR__0414
07bac     41 73 02 F6 | 	mov	arg01, local02
07bb0     18 00 B0 FD | 	call	#__system____default_flush
07bb4     00 2C 0E F2 | 	cmp	result1, #0 wz
07bb8     01 80 66 56 |  if_ne	neg	local01, #1
07bbc                 | LR__0415
07bbc     40 2D 02 F6 | 	mov	result1, local01
07bc0     AF F0 03 F6 | 	mov	ptra, fp
07bc4     BF 00 A0 FD | 	call	#popregs_
07bc8                 | __system____default_putc_terminal_ret
07bc8     2D 00 64 FD | 	ret
07bcc                 | 
07bcc                 | __system____default_flush
07bcc     0F 5A 05 F6 | 	mov	COUNT_, #15
07bd0     B0 00 A0 FD | 	call	#pushregs_
07bd4     39 81 02 F6 | 	mov	local01, arg01
07bd8     40 83 02 FB | 	rdlong	local02, local01
07bdc     41 85 02 FB | 	rdlong	local03, local02
07be0     08 82 06 F1 | 	add	local02, #8
07be4     41 87 02 FB | 	rdlong	local04, local02
07be8     08 82 86 F1 | 	sub	local02, #8
07bec     02 86 CE F7 | 	test	local04, #2 wz
07bf0     B8 00 90 AD |  if_e	jmp	#LR__0418
07bf4     00 84 5E F2 | 	cmps	local03, #0 wcz
07bf8     30 01 90 ED |  if_be	jmp	#LR__0420
07bfc     08 80 06 F1 | 	add	local01, #8
07c00     40 87 02 FB | 	rdlong	local04, local01
07c04     08 80 86 F1 | 	sub	local01, #8
07c08     40 86 CE F7 | 	test	local04, #64 wz
07c0c     5C 00 90 AD |  if_e	jmp	#LR__0417
07c10     08 80 06 F1 | 	add	local01, #8
07c14     40 87 02 FB | 	rdlong	local04, local01
07c18     08 80 86 F1 | 	sub	local01, #8
07c1c     80 86 CE F7 | 	test	local04, #128 wz
07c20     48 00 90 AD |  if_e	jmp	#LR__0416
07c24     2C 80 06 F1 | 	add	local01, #44
07c28     40 87 02 FB | 	rdlong	local04, local01
07c2c     2C 80 86 F1 | 	sub	local01, #44
07c30     43 89 02 FB | 	rdlong	local05, local04
07c34     04 86 06 F1 | 	add	local04, #4
07c38     43 8B 02 FB | 	rdlong	local06, local04
07c3c     40 73 02 F6 | 	mov	arg01, local01
07c40     00 74 06 F6 | 	mov	arg02, #0
07c44     02 76 06 F6 | 	mov	arg03, #2
07c48     07 8D 02 F6 | 	mov	local07, objptr
07c4c     44 0F 02 F6 | 	mov	objptr, local05
07c50     2D 8A 62 FD | 	call	local06
07c54     46 0F 02 F6 | 	mov	objptr, local07
07c58     08 80 06 F1 | 	add	local01, #8
07c5c     40 87 02 FB | 	rdlong	local04, local01
07c60     80 86 26 F5 | 	andn	local04, #128
07c64     40 87 62 FC | 	wrlong	local04, local01
07c68     08 80 86 F1 | 	sub	local01, #8
07c6c                 | LR__0416
07c6c                 | LR__0417
07c6c     14 80 06 F1 | 	add	local01, #20
07c70     40 87 02 FB | 	rdlong	local04, local01
07c74     14 80 86 F1 | 	sub	local01, #20
07c78     43 89 02 FB | 	rdlong	local05, local04
07c7c     04 86 06 F1 | 	add	local04, #4
07c80     43 8B 02 FB | 	rdlong	local06, local04
07c84     0C 82 06 F1 | 	add	local02, #12
07c88     41 75 02 F6 | 	mov	arg02, local02
07c8c     0C 82 86 F1 | 	sub	local02, #12
07c90     40 73 02 F6 | 	mov	arg01, local01
07c94     42 77 02 F6 | 	mov	arg03, local03
07c98     07 8F 02 F6 | 	mov	local08, objptr
07c9c     44 0F 02 F6 | 	mov	objptr, local05
07ca0     2D 8A 62 FD | 	call	local06
07ca4     47 0F 02 F6 | 	mov	objptr, local08
07ca8     80 00 90 FD | 	jmp	#LR__0420
07cac                 | LR__0418
07cac     08 82 06 F1 | 	add	local02, #8
07cb0     41 87 02 FB | 	rdlong	local04, local02
07cb4     08 82 86 F1 | 	sub	local02, #8
07cb8     01 86 CE F7 | 	test	local04, #1 wz
07cbc     6C 00 90 AD |  if_e	jmp	#LR__0419
07cc0     00 84 0E F2 | 	cmp	local03, #0 wz
07cc4     64 00 90 AD |  if_e	jmp	#LR__0419
07cc8     2C 80 06 F1 | 	add	local01, #44
07ccc     40 91 02 FB | 	rdlong	local09, local01
07cd0     2C 80 86 F1 | 	sub	local01, #44
07cd4     48 87 02 F6 | 	mov	local04, local09
07cd8     43 89 02 FB | 	rdlong	local05, local04
07cdc     04 86 06 F1 | 	add	local04, #4
07ce0     43 93 02 FB | 	rdlong	local10, local04
07ce4     04 86 86 F1 | 	sub	local04, #4
07ce8     49 8B 02 F6 | 	mov	local06, local10
07cec     40 95 02 F6 | 	mov	local11, local01
07cf0     42 97 02 F6 | 	mov	local12, local03
07cf4     4B 97 62 F6 | 	neg	local12, local12
07cf8     4B 99 02 F6 | 	mov	local13, local12
07cfc     01 8C 06 F6 | 	mov	local07, #1
07d00     4A 73 02 F6 | 	mov	arg01, local11
07d04     4C 75 02 F6 | 	mov	arg02, local13
07d08     01 76 06 F6 | 	mov	arg03, #1
07d0c     07 8F 02 F6 | 	mov	local08, objptr
07d10     44 0F 02 F6 | 	mov	objptr, local05
07d14     2D 8A 62 FD | 	call	local06
07d18     47 0F 02 F6 | 	mov	objptr, local08
07d1c     16 9B 02 F6 | 	mov	local14, result1
07d20     4D 9D 02 F6 | 	mov	local15, local14
07d24     00 9C 5E F2 | 	cmps	local15, #0 wcz
07d28     42 9D 02 36 |  if_ae	mov	local15, local03
07d2c                 | LR__0419
07d2c                 | LR__0420
07d2c     41 01 68 FC | 	wrlong	#0, local02
07d30     04 82 06 F1 | 	add	local02, #4
07d34     41 01 68 FC | 	wrlong	#0, local02
07d38     04 82 06 F1 | 	add	local02, #4
07d3c     41 01 68 FC | 	wrlong	#0, local02
07d40     00 2C 06 F6 | 	mov	result1, #0
07d44     AF F0 03 F6 | 	mov	ptra, fp
07d48     BF 00 A0 FD | 	call	#popregs_
07d4c                 | __system____default_flush_ret
07d4c     2D 00 64 FD | 	ret
07d50                 | 
07d50                 | __system___rxtxioctl_0174
07d50     02 5A 05 F6 | 	mov	COUNT_, #2
07d54     B0 00 A0 FD | 	call	#pushregs_
07d58     3A 81 02 F6 | 	mov	local01, arg02
07d5c     3B 83 02 F6 | 	mov	local02, arg03
07d60     00 81 0E F2 | 	cmp	local01, #256 wz
07d64     0C 00 90 AD |  if_e	jmp	#LR__0421
07d68     01 81 0E F2 | 	cmp	local01, #257 wz
07d6c     1C 00 90 AD |  if_e	jmp	#LR__0422
07d70     30 00 90 FD | 	jmp	#LR__0423
07d74                 | LR__0421
07d74     08 14 06 F1 | 	add	ptr___system__dat__, #8
07d78     0A 2D 02 FB | 	rdlong	result1, ptr___system__dat__
07d7c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07d80     41 2D 62 FC | 	wrlong	result1, local02
07d84     00 2C 06 F6 | 	mov	result1, #0
07d88     30 00 90 FD | 	jmp	#LR__0424
07d8c                 | LR__0422
07d8c     41 73 02 FB | 	rdlong	arg01, local02
07d90     08 14 06 F1 | 	add	ptr___system__dat__, #8
07d94     0A 73 62 FC | 	wrlong	arg01, ptr___system__dat__
07d98     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07d9c     00 2C 06 F6 | 	mov	result1, #0
07da0     18 00 90 FD | 	jmp	#LR__0424
07da4                 | LR__0423
07da4     01 00 00 FF 
07da8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07dac     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07db0     01 00 00 FF 
07db4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07db8     01 2C 66 F6 | 	neg	result1, #1
07dbc                 | LR__0424
07dbc     AF F0 03 F6 | 	mov	ptra, fp
07dc0     BF 00 A0 FD | 	call	#popregs_
07dc4                 | __system___rxtxioctl_0174_ret
07dc4     2D 00 64 FD | 	ret
07dc8                 | 
07dc8                 | __system____dummy_flush_0175
07dc8     00 2C 06 F6 | 	mov	result1, #0
07dcc                 | __system____dummy_flush_0175_ret
07dcc     2D 00 64 FD | 	ret
07dd0                 | 
07dd0                 | __system___vfswrite
07dd0     0B 5A 05 F6 | 	mov	COUNT_, #11
07dd4     B0 00 A0 FD | 	call	#pushregs_
07dd8     39 81 02 F6 | 	mov	local01, arg01
07ddc     3A 83 02 F6 | 	mov	local02, arg02
07de0     3B 85 02 F6 | 	mov	local03, arg03
07de4     41 87 02 F6 | 	mov	local04, local02
07de8     08 80 06 F1 | 	add	local01, #8
07dec     40 89 02 FB | 	rdlong	local05, local01
07df0     08 80 86 F1 | 	sub	local01, #8
07df4     02 88 CE F7 | 	test	local05, #2 wz
07df8     1C 00 90 5D |  if_ne	jmp	#LR__0425
07dfc     01 00 00 FF 
07e00     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07e04     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07e08     01 00 00 FF 
07e0c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07e10     01 2C 66 F6 | 	neg	result1, #1
07e14     70 01 90 FD | 	jmp	#LR__0433
07e18                 | LR__0425
07e18     08 80 06 F1 | 	add	local01, #8
07e1c     40 89 02 FB | 	rdlong	local05, local01
07e20     08 80 86 F1 | 	sub	local01, #8
07e24     40 88 CE F7 | 	test	local05, #64 wz
07e28     5C 00 90 AD |  if_e	jmp	#LR__0427
07e2c     08 80 06 F1 | 	add	local01, #8
07e30     40 89 02 FB | 	rdlong	local05, local01
07e34     08 80 86 F1 | 	sub	local01, #8
07e38     80 88 CE F7 | 	test	local05, #128 wz
07e3c     48 00 90 AD |  if_e	jmp	#LR__0426
07e40     2C 80 06 F1 | 	add	local01, #44
07e44     40 89 02 FB | 	rdlong	local05, local01
07e48     2C 80 86 F1 | 	sub	local01, #44
07e4c     44 8B 02 FB | 	rdlong	local06, local05
07e50     04 88 06 F1 | 	add	local05, #4
07e54     44 8D 02 FB | 	rdlong	local07, local05
07e58     40 73 02 F6 | 	mov	arg01, local01
07e5c     00 74 06 F6 | 	mov	arg02, #0
07e60     02 76 06 F6 | 	mov	arg03, #2
07e64     07 8F 02 F6 | 	mov	local08, objptr
07e68     45 0F 02 F6 | 	mov	objptr, local06
07e6c     2D 8C 62 FD | 	call	local07
07e70     47 0F 02 F6 | 	mov	objptr, local08
07e74     08 80 06 F1 | 	add	local01, #8
07e78     40 89 02 FB | 	rdlong	local05, local01
07e7c     80 88 26 F5 | 	andn	local05, #128
07e80     40 89 62 FC | 	wrlong	local05, local01
07e84     08 80 86 F1 | 	sub	local01, #8
07e88                 | LR__0426
07e88                 | LR__0427
07e88     14 80 06 F1 | 	add	local01, #20
07e8c     40 89 0A FB | 	rdlong	local05, local01 wz
07e90     14 80 86 F1 | 	sub	local01, #20
07e94     7C 00 90 AD |  if_e	jmp	#LR__0429
07e98     14 80 06 F1 | 	add	local01, #20
07e9c     40 89 02 FB | 	rdlong	local05, local01
07ea0     14 80 86 F1 | 	sub	local01, #20
07ea4     44 8B 02 FB | 	rdlong	local06, local05
07ea8     04 88 06 F1 | 	add	local05, #4
07eac     44 8D 02 FB | 	rdlong	local07, local05
07eb0     41 75 02 F6 | 	mov	arg02, local02
07eb4     42 77 02 F6 | 	mov	arg03, local03
07eb8     40 73 02 F6 | 	mov	arg01, local01
07ebc     07 8F 02 F6 | 	mov	local08, objptr
07ec0     45 0F 02 F6 | 	mov	objptr, local06
07ec4     2D 8C 62 FD | 	call	local07
07ec8     47 0F 02 F6 | 	mov	objptr, local08
07ecc     16 91 02 F6 | 	mov	local09, result1
07ed0     00 90 5E F2 | 	cmps	local09, #0 wcz
07ed4     34 00 90 3D |  if_ae	jmp	#LR__0428
07ed8     08 80 06 F1 | 	add	local01, #8
07edc     40 89 02 FB | 	rdlong	local05, local01
07ee0     20 88 46 F5 | 	or	local05, #32
07ee4     40 89 62 FC | 	wrlong	local05, local01
07ee8     01 00 00 FF 
07eec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ef0     0A 91 62 FC | 	wrlong	local09, ptr___system__dat__
07ef4     01 00 00 FF 
07ef8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07efc     00 90 0E F2 | 	cmp	local09, #0 wz
07f00     01 2C 66 56 |  if_ne	neg	result1, #1
07f04     00 2C 06 A6 |  if_e	mov	result1, #0
07f08     7C 00 90 FD | 	jmp	#LR__0433
07f0c                 | LR__0428
07f0c     48 2D 02 F6 | 	mov	result1, local09
07f10     74 00 90 FD | 	jmp	#LR__0433
07f14                 | LR__0429
07f14     18 80 06 F1 | 	add	local01, #24
07f18     40 93 0A FB | 	rdlong	local10, local01 wz
07f1c     18 80 86 F1 | 	sub	local01, #24
07f20     1C 00 90 5D |  if_ne	jmp	#LR__0430
07f24     01 00 00 FF 
07f28     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07f2c     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07f30     01 00 00 FF 
07f34     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07f38     01 2C 66 F6 | 	neg	result1, #1
07f3c     48 00 90 FD | 	jmp	#LR__0433
07f40                 | LR__0430
07f40     00 90 06 F6 | 	mov	local09, #0
07f44                 | LR__0431
07f44     00 84 1E F2 | 	cmp	local03, #0 wcz
07f48     38 00 90 ED |  if_be	jmp	#LR__0432
07f4c     49 89 02 F6 | 	mov	local05, local10
07f50     44 8B 02 FB | 	rdlong	local06, local05
07f54     04 88 06 F1 | 	add	local05, #4
07f58     44 8D 02 FB | 	rdlong	local07, local05
07f5c     43 73 C2 FA | 	rdbyte	arg01, local04
07f60     40 75 02 F6 | 	mov	arg02, local01
07f64     07 95 02 F6 | 	mov	local11, objptr
07f68     45 0F 02 F6 | 	mov	objptr, local06
07f6c     01 86 06 F1 | 	add	local04, #1
07f70     2D 8C 62 FD | 	call	local07
07f74     4A 0F 02 F6 | 	mov	objptr, local11
07f78     16 91 02 F1 | 	add	local09, result1
07f7c     01 84 86 F1 | 	sub	local03, #1
07f80     C0 FF 9F FD | 	jmp	#LR__0431
07f84                 | LR__0432
07f84     48 2D 02 F6 | 	mov	result1, local09
07f88                 | LR__0433
07f88     AF F0 03 F6 | 	mov	ptra, fp
07f8c     BF 00 A0 FD | 	call	#popregs_
07f90                 | __system___vfswrite_ret
07f90     2D 00 64 FD | 	ret
07f94                 | 
07f94                 | __system___vfsread
07f94     0E 5A 05 F6 | 	mov	COUNT_, #14
07f98     B0 00 A0 FD | 	call	#pushregs_
07f9c     28 F0 07 F1 | 	add	ptra, #40
07fa0     04 5E 05 F1 | 	add	fp, #4
07fa4     AF 72 62 FC | 	wrlong	arg01, fp
07fa8     04 5E 05 F1 | 	add	fp, #4
07fac     AF 74 62 FC | 	wrlong	arg02, fp
07fb0     04 5E 05 F1 | 	add	fp, #4
07fb4     AF 76 62 FC | 	wrlong	arg03, fp
07fb8     04 5E 85 F1 | 	sub	fp, #4
07fbc     AF 80 02 FB | 	rdlong	local01, fp
07fc0     14 5E 05 F1 | 	add	fp, #20
07fc4     AF 80 62 FC | 	wrlong	local01, fp
07fc8     04 5E 05 F1 | 	add	fp, #4
07fcc     AF 00 68 FC | 	wrlong	#0, fp
07fd0     1C 5E 85 F1 | 	sub	fp, #28
07fd4     AF 82 02 FB | 	rdlong	local02, fp
07fd8     04 5E 85 F1 | 	sub	fp, #4
07fdc     08 82 06 F1 | 	add	local02, #8
07fe0     41 81 02 FB | 	rdlong	local01, local02
07fe4     01 80 CE F7 | 	test	local01, #1 wz
07fe8     1C 00 90 5D |  if_ne	jmp	#LR__0434
07fec     01 00 00 FF 
07ff0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ff4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07ff8     01 00 00 FF 
07ffc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
08000     01 2C 66 F6 | 	neg	result1, #1
08004     9C 02 90 FD | 	jmp	#LR__0442
08008                 | LR__0434
08008     04 5E 05 F1 | 	add	fp, #4
0800c     AF 80 02 FB | 	rdlong	local01, fp
08010     04 5E 85 F1 | 	sub	fp, #4
08014     10 80 06 F1 | 	add	local01, #16
08018     40 85 0A FB | 	rdlong	local03, local01 wz
0801c     B4 00 90 AD |  if_e	jmp	#LR__0436
08020     04 5E 05 F1 | 	add	fp, #4
08024     AF 86 02 FB | 	rdlong	local04, fp
08028     10 86 06 F1 | 	add	local04, #16
0802c     43 81 02 FB | 	rdlong	local01, local04
08030     40 83 02 FB | 	rdlong	local02, local01
08034     04 80 06 F1 | 	add	local01, #4
08038     40 85 02 FB | 	rdlong	local03, local01
0803c     AF 72 02 FB | 	rdlong	arg01, fp
08040     04 5E 05 F1 | 	add	fp, #4
08044     AF 74 02 FB | 	rdlong	arg02, fp
08048     04 5E 05 F1 | 	add	fp, #4
0804c     AF 76 02 FB | 	rdlong	arg03, fp
08050     0C 5E 85 F1 | 	sub	fp, #12
08054     07 89 02 F6 | 	mov	local05, objptr
08058     41 0F 02 F6 | 	mov	objptr, local02
0805c     2D 84 62 FD | 	call	local03
08060     44 0F 02 F6 | 	mov	objptr, local05
08064     10 5E 05 F1 | 	add	fp, #16
08068     AF 2C 62 FC | 	wrlong	result1, fp
0806c     10 5E 85 F1 | 	sub	fp, #16
08070     00 2C 5E F2 | 	cmps	result1, #0 wcz
08074     4C 00 90 3D |  if_ae	jmp	#LR__0435
08078     04 5E 05 F1 | 	add	fp, #4
0807c     AF 80 02 FB | 	rdlong	local01, fp
08080     40 87 02 F6 | 	mov	local04, local01
08084     08 86 06 F1 | 	add	local04, #8
08088     43 85 02 FB | 	rdlong	local03, local04
0808c     20 84 46 F5 | 	or	local03, #32
08090     08 80 06 F1 | 	add	local01, #8
08094     40 85 62 FC | 	wrlong	local03, local01
08098     0C 5E 05 F1 | 	add	fp, #12
0809c     AF 72 0A FB | 	rdlong	arg01, fp wz
080a0     10 5E 85 F1 | 	sub	fp, #16
080a4     01 00 00 FF 
080a8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
080ac     0A 73 62 FC | 	wrlong	arg01, ptr___system__dat__
080b0     01 00 00 FF 
080b4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
080b8     01 2C 66 56 |  if_ne	neg	result1, #1
080bc     00 2C 06 A6 |  if_e	mov	result1, #0
080c0     E0 01 90 FD | 	jmp	#LR__0442
080c4                 | LR__0435
080c4     10 5E 05 F1 | 	add	fp, #16
080c8     AF 2C 02 FB | 	rdlong	result1, fp
080cc     10 5E 85 F1 | 	sub	fp, #16
080d0     D0 01 90 FD | 	jmp	#LR__0442
080d4                 | LR__0436
080d4     04 5E 05 F1 | 	add	fp, #4
080d8     AF 80 02 FB | 	rdlong	local01, fp
080dc     1C 80 06 F1 | 	add	local01, #28
080e0     40 85 02 FB | 	rdlong	local03, local01
080e4     14 5E 05 F1 | 	add	fp, #20
080e8     AF 84 62 FC | 	wrlong	local03, fp
080ec     AF 80 0A FB | 	rdlong	local01, fp wz
080f0     18 5E 85 F1 | 	sub	fp, #24
080f4     1C 00 90 5D |  if_ne	jmp	#LR__0437
080f8     01 00 00 FF 
080fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
08100     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08104     01 00 00 FF 
08108     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0810c     01 2C 66 F6 | 	neg	result1, #1
08110     90 01 90 FD | 	jmp	#LR__0442
08114                 | LR__0437
08114     04 5E 05 F1 | 	add	fp, #4
08118     AF 80 02 FB | 	rdlong	local01, fp
0811c     04 5E 85 F1 | 	sub	fp, #4
08120     24 80 06 F1 | 	add	local01, #36
08124     40 85 0A FB | 	rdlong	local03, local01 wz
08128     A0 00 90 AD |  if_e	jmp	#LR__0439
0812c     04 5E 05 F1 | 	add	fp, #4
08130     AF 8A 02 FB | 	rdlong	local06, fp
08134     45 87 02 F6 | 	mov	local04, local06
08138     24 86 06 F1 | 	add	local04, #36
0813c     43 8D 02 FB | 	rdlong	local07, local04
08140     46 81 02 F6 | 	mov	local01, local07
08144     40 83 02 FB | 	rdlong	local02, local01
08148     04 80 06 F1 | 	add	local01, #4
0814c     40 8F 02 FB | 	rdlong	local08, local01
08150     47 85 02 F6 | 	mov	local03, local08
08154     45 91 02 F6 | 	mov	local09, local06
08158     48 93 02 F6 | 	mov	local10, local09
0815c     00 95 06 F6 | 	mov	local11, #256
08160     20 5E 05 F1 | 	add	fp, #32
08164     AF 96 02 F6 | 	mov	local12, fp
08168     4B 99 02 F6 | 	mov	local13, local12
0816c     49 73 02 F6 | 	mov	arg01, local10
08170     00 75 06 F6 | 	mov	arg02, #256
08174     4C 77 02 F6 | 	mov	arg03, local13
08178     07 9B 02 F6 | 	mov	local14, objptr
0817c     41 0F 02 F6 | 	mov	objptr, local02
08180     24 5E 85 F1 | 	sub	fp, #36
08184     2D 84 62 FD | 	call	local03
08188     4D 0F 02 F6 | 	mov	objptr, local14
0818c     16 89 02 F6 | 	mov	local05, result1
08190     10 5E 05 F1 | 	add	fp, #16
08194     AF 88 62 FC | 	wrlong	local05, fp
08198     AF 82 0A FB | 	rdlong	local02, fp wz
0819c     10 5E 85 F1 | 	sub	fp, #16
081a0     28 00 90 5D |  if_ne	jmp	#LR__0438
081a4     24 5E 05 F1 | 	add	fp, #36
081a8     AF 86 02 FB | 	rdlong	local04, fp
081ac     24 5E 85 F1 | 	sub	fp, #36
081b0     43 85 02 F6 | 	mov	local03, local04
081b4     02 84 0E F5 | 	and	local03, #2 wz
081b8     10 00 90 AD |  if_e	jmp	#LR__0438
081bc     01 80 06 F6 | 	mov	local01, #1
081c0     20 5E 05 F1 | 	add	fp, #32
081c4     AF 02 68 FC | 	wrlong	#1, fp
081c8     20 5E 85 F1 | 	sub	fp, #32
081cc                 | LR__0438
081cc                 | LR__0439
081cc     10 5E 05 F1 | 	add	fp, #16
081d0     AF 00 68 FC | 	wrlong	#0, fp
081d4     10 5E 85 F1 | 	sub	fp, #16
081d8                 | LR__0440
081d8     0C 5E 05 F1 | 	add	fp, #12
081dc     AF 80 02 FB | 	rdlong	local01, fp
081e0     0C 5E 85 F1 | 	sub	fp, #12
081e4     00 80 1E F2 | 	cmp	local01, #0 wcz
081e8     AC 00 90 ED |  if_be	jmp	#LR__0441
081ec     18 5E 05 F1 | 	add	fp, #24
081f0     AF 80 02 FB | 	rdlong	local01, fp
081f4     40 83 02 FB | 	rdlong	local02, local01
081f8     04 80 06 F1 | 	add	local01, #4
081fc     40 85 02 FB | 	rdlong	local03, local01
08200     14 5E 85 F1 | 	sub	fp, #20
08204     AF 72 02 FB | 	rdlong	arg01, fp
08208     04 5E 85 F1 | 	sub	fp, #4
0820c     07 93 02 F6 | 	mov	local10, objptr
08210     41 0F 02 F6 | 	mov	objptr, local02
08214     2D 84 62 FD | 	call	local03
08218     49 0F 02 F6 | 	mov	objptr, local10
0821c     16 91 02 F6 | 	mov	local09, result1
08220     14 5E 05 F1 | 	add	fp, #20
08224     AF 90 62 FC | 	wrlong	local09, fp
08228     14 5E 85 F1 | 	sub	fp, #20
0822c     00 90 5E F2 | 	cmps	local09, #0 wcz
08230     64 00 90 CD |  if_b	jmp	#LR__0441
08234     1C 5E 05 F1 | 	add	fp, #28
08238     AF 80 02 FB | 	rdlong	local01, fp
0823c     40 85 02 F6 | 	mov	local03, local01
08240     01 84 06 F1 | 	add	local03, #1
08244     AF 84 62 FC | 	wrlong	local03, fp
08248     08 5E 85 F1 | 	sub	fp, #8
0824c     AF 8A 02 FB | 	rdlong	local06, fp
08250     40 8B 42 FC | 	wrbyte	local06, local01
08254     04 5E 85 F1 | 	sub	fp, #4
08258     AF 80 02 FB | 	rdlong	local01, fp
0825c     01 80 06 F1 | 	add	local01, #1
08260     AF 80 62 FC | 	wrlong	local01, fp
08264     04 5E 85 F1 | 	sub	fp, #4
08268     AF 80 02 FB | 	rdlong	local01, fp
0826c     01 80 86 F1 | 	sub	local01, #1
08270     AF 80 62 FC | 	wrlong	local01, fp
08274     14 5E 05 F1 | 	add	fp, #20
08278     AF 80 0A FB | 	rdlong	local01, fp wz
0827c     20 5E 85 F1 | 	sub	fp, #32
08280     54 FF 9F AD |  if_e	jmp	#LR__0440
08284     14 5E 05 F1 | 	add	fp, #20
08288     AF 84 02 FB | 	rdlong	local03, fp
0828c     14 5E 85 F1 | 	sub	fp, #20
08290     0A 84 0E F2 | 	cmp	local03, #10 wz
08294     40 FF 9F 5D |  if_ne	jmp	#LR__0440
08298                 | LR__0441
08298     10 5E 05 F1 | 	add	fp, #16
0829c     AF 2C 02 FB | 	rdlong	result1, fp
082a0     10 5E 85 F1 | 	sub	fp, #16
082a4                 | LR__0442
082a4     AF F0 03 F6 | 	mov	ptra, fp
082a8     BF 00 A0 FD | 	call	#popregs_
082ac                 | __system___vfsread_ret
082ac     2D 00 64 FD | 	ret
082b0                 | 
082b0                 | __system____default_filbuf
082b0     06 5A 05 F6 | 	mov	COUNT_, #6
082b4     B0 00 A0 FD | 	call	#pushregs_
082b8     39 81 02 FB | 	rdlong	local01, arg01
082bc     10 72 06 F1 | 	add	arg01, #16
082c0     39 83 02 FB | 	rdlong	local02, arg01
082c4     10 72 86 F1 | 	sub	arg01, #16
082c8     41 85 02 FB | 	rdlong	local03, local02
082cc     04 82 06 F1 | 	add	local02, #4
082d0     41 87 02 FB | 	rdlong	local04, local02
082d4     0C 80 06 F1 | 	add	local01, #12
082d8     40 75 02 F6 | 	mov	arg02, local01
082dc     0C 80 86 F1 | 	sub	local01, #12
082e0     0A 76 C6 F9 | 	decod	arg03, #10
082e4     07 89 02 F6 | 	mov	local05, objptr
082e8     42 0F 02 F6 | 	mov	objptr, local03
082ec     2D 86 62 FD | 	call	local04
082f0     44 0F 02 F6 | 	mov	objptr, local05
082f4     16 8B 02 F6 | 	mov	local06, result1
082f8     00 8A 5E F2 | 	cmps	local06, #0 wcz
082fc     01 2C 66 C6 |  if_b	neg	result1, #1
08300     28 00 90 CD |  if_b	jmp	#LR__0443
08304     40 8B 62 FC | 	wrlong	local06, local01
08308     0C 80 06 F1 | 	add	local01, #12
0830c     40 83 02 F6 | 	mov	local02, local01
08310     08 80 86 F1 | 	sub	local01, #8
08314     40 83 62 FC | 	wrlong	local02, local01
08318     04 80 06 F1 | 	add	local01, #4
0831c     40 83 02 FB | 	rdlong	local02, local01
08320     01 82 46 F5 | 	or	local02, #1
08324     40 83 62 FC | 	wrlong	local02, local01
08328     45 2D 02 F6 | 	mov	result1, local06
0832c                 | LR__0443
0832c     AF F0 03 F6 | 	mov	ptra, fp
08330     BF 00 A0 FD | 	call	#popregs_
08334                 | __system____default_filbuf_ret
08334     2D 00 64 FD | 	ret
08338                 | 
08338                 | ' 	
08338                 | ' 	FUNCTION pfunc(c as integer) as integer
08338                 | ___strs_cl_pfunc
08338                 | ' 		if (i < 16) then
08338     04 0E 06 F1 | 	add	objptr, #4
0833c     07 33 02 FB | 	rdlong	_var01, objptr
08340     04 0E 86 F1 | 	sub	objptr, #4
08344     10 32 5E F2 | 	cmps	_var01, #16 wcz
08348     2C 00 90 3D |  if_ae	jmp	#LR__0444
0834c     07 35 02 FB | 	rdlong	_var02, objptr
08350     04 0E 06 F1 | 	add	objptr, #4
08354     07 37 02 FB | 	rdlong	_var03, objptr
08358     1A 37 02 F1 | 	add	_var03, _var02
0835c     1B 73 42 FC | 	wrbyte	arg01, _var03
08360     07 33 02 FB | 	rdlong	_var01, objptr
08364     01 32 06 F1 | 	add	_var01, #1
08368     07 33 62 FC | 	wrlong	_var01, objptr
0836c     04 0E 86 F1 | 	sub	objptr, #4
08370                 | ' 			p(i) = c
08370                 | ' 			i = i+1
08370                 | ' 			return 1
08370     01 2C 06 F6 | 	mov	result1, #1
08374     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
08378                 | LR__0444
08378                 | ' 			return -1
08378     01 2C 66 F6 | 	neg	result1, #1
0837c                 | ___strs_cl_pfunc_ret
0837c     2D 00 64 FD | 	ret
08380                 | 
08380                 | __struct__s_vfs_file_t_putchar
08380     04 5A 05 F6 | 	mov	COUNT_, #4
08384     B0 00 A0 FD | 	call	#pushregs_
08388     18 0E 06 F1 | 	add	objptr, #24
0838c     07 81 0A FB | 	rdlong	local01, objptr wz
08390     18 0E 86 F1 | 	sub	objptr, #24
08394     00 2C 06 A6 |  if_e	mov	result1, #0
08398     3C 00 90 AD |  if_e	jmp	#LR__0445
0839c     18 0E 06 F1 | 	add	objptr, #24
083a0     07 81 02 FB | 	rdlong	local01, objptr
083a4     18 0E 86 F1 | 	sub	objptr, #24
083a8     40 83 02 FB | 	rdlong	local02, local01
083ac     04 80 06 F1 | 	add	local01, #4
083b0     40 85 02 FB | 	rdlong	local03, local01
083b4     07 75 02 F6 | 	mov	arg02, objptr
083b8     07 87 02 F6 | 	mov	local04, objptr
083bc     41 0F 02 F6 | 	mov	objptr, local02
083c0     2D 84 62 FD | 	call	local03
083c4     43 0F 02 F6 | 	mov	objptr, local04
083c8     00 2C 5E F2 | 	cmps	result1, #0 wcz
083cc     00 80 06 C6 |  if_b	mov	local01, #0
083d0     01 80 06 36 |  if_ae	mov	local01, #1
083d4     40 2D 02 F6 | 	mov	result1, local01
083d8                 | LR__0445
083d8     AF F0 03 F6 | 	mov	ptra, fp
083dc     BF 00 A0 FD | 	call	#popregs_
083e0                 | __struct__s_vfs_file_t_putchar_ret
083e0     2D 00 64 FD | 	ret
083e4                 | 
083e4                 | __struct__s_vfs_file_t_getchar
083e4     04 5A 05 F6 | 	mov	COUNT_, #4
083e8     B0 00 A0 FD | 	call	#pushregs_
083ec     1C 0E 06 F1 | 	add	objptr, #28
083f0     07 81 0A FB | 	rdlong	local01, objptr wz
083f4     1C 0E 86 F1 | 	sub	objptr, #28
083f8     01 2C 66 A6 |  if_e	neg	result1, #1
083fc     2C 00 90 AD |  if_e	jmp	#LR__0446
08400                 | '         return getcf(__this);
08400     1C 0E 06 F1 | 	add	objptr, #28
08404     07 81 02 FB | 	rdlong	local01, objptr
08408     1C 0E 86 F1 | 	sub	objptr, #28
0840c     40 83 02 FB | 	rdlong	local02, local01
08410     04 80 06 F1 | 	add	local01, #4
08414     40 85 02 FB | 	rdlong	local03, local01
08418     07 73 02 F6 | 	mov	arg01, objptr
0841c     07 87 02 F6 | 	mov	local04, objptr
08420     41 0F 02 F6 | 	mov	objptr, local02
08424     2D 84 62 FD | 	call	local03
08428     43 0F 02 F6 | 	mov	objptr, local04
0842c                 | LR__0446
0842c     AF F0 03 F6 | 	mov	ptra, fp
08430     BF 00 A0 FD | 	call	#popregs_
08434                 | __struct__s_vfs_file_t_getchar_ret
08434     2D 00 64 FD | 	ret
08438                 | 
08438                 | __struct___bas_wrap_sender_tx
08438     04 5A 05 F6 | 	mov	COUNT_, #4
0843c     B0 00 A0 FD | 	call	#pushregs_
08440     07 81 02 FB | 	rdlong	local01, objptr
08444     40 83 02 FB | 	rdlong	local02, local01
08448     04 80 06 F1 | 	add	local01, #4
0844c     40 85 02 FB | 	rdlong	local03, local01
08450     07 87 02 F6 | 	mov	local04, objptr
08454     41 0F 02 F6 | 	mov	objptr, local02
08458     2D 84 62 FD | 	call	local03
0845c     43 0F 02 F6 | 	mov	objptr, local04
08460     01 2C 06 F6 | 	mov	result1, #1
08464     AF F0 03 F6 | 	mov	ptra, fp
08468     BF 00 A0 FD | 	call	#popregs_
0846c                 | __struct___bas_wrap_sender_tx_ret
0846c     2D 00 64 FD | 	ret
08470                 | 
08470                 | LR__0447
08470     20          | 	byte	" "
08471     00          | 	byte	0
08472                 | LR__0448
08472                 | 	byte	
08472     00          | 	byte	0
08473                 | LR__0449
08473                 | 	byte	
08473     00          | 	byte	0
08474                 | LR__0450
08474     20 21 21 21 
08478     20 63 6F 72 
0847c     72 75 70 74 
08480     65 64 20 68 
08484     65 61 70 3F 
08488     3F 3F 20 21 
0848c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0848f     00          | 	byte	0
08490                 | LR__0451
08490     20 21 21 21 
08494     20 6F 75 74 
08498     20 6F 66 20 
0849c     68 65 61 70 
084a0     20 6D 65 6D 
084a4     6F 72 79 20 
084a8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
084ac     00          | 	byte	0
084ad                 | LR__0452
084ad     20 21 21 21 
084b1     20 63 6F 72 
084b5     72 75 70 74 
084b9     65 64 20 68 
084bd     65 61 70 20 
084c1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
084c5     00          | 	byte	0
084c6                 | LR__0453
084c6     4E 61 6D 65 
084ca     20 20 20 20 
084ce     20 20 20 20 
084d2     20 20 20 20 
084d6     20 20 20 20 
084da     20 20 20 6C 
084de     65 6E 20 20 
084e2     20 66 74 20 
084e6     76 6F 6C 20 
084ea     72 65 70 20 
084ee     20 20 72 2E 
084f2     6C 65 6E 20 
084f6     20 20 20 20 
084fa     20 20 20 20 
084fe     4E 61 6D 65 
08502     20 20 20 20 
08506     20 20 20 20 
0850a     20 20 20 20 
0850e     20 20 20 20 
08512     20 20 20 6C 
08516     65 6E 20 20 
0851a     20 66 74 20 
0851e     76 6F 6C 20 
08522     72 65 70 20 
08526     20 20 72 2E 
0852a     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0852e     00          | 	byte	0
0852f                 | LR__0454
0852f     53          | 	byte	"S"
08530     00          | 	byte	0
08531                 | LR__0455
08531     20 20 20 20 
08535     20 20 20 20 
08539     20 20 20 20 
0853d     20 20 20 20 
08541     20 20 20 20 
08545     20 20       | 	byte	"                      "
08547     00          | 	byte	0
08548                 | LR__0456
08548     20          | 	byte	" "
08549     00          | 	byte	0
0854a                 | LR__0457
0854a     73 61 6D 70 
0854e     6C 65 73 20 
08552     6D 6F 64 75 
08556     6C 65       | 	byte	"samples module"
08558     00          | 	byte	0
08559     00 00 00    | 	alignl
0855c                 | _dat_
0855c     61 6D 65 67 
08560     61 73 00 00 
08564     00 00 00 00 
08568     00 00 00 00 | module file "../../../mod/amegas.mod"
0856c     00 00 00 00 
08570     73 74 2D 30 
08574     33 3A 50 6F 
08578     70 42 61 73 | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $33, $3a, $50, $6f, $70, $42, $61, $73
0857c     73 00 00 00 
08580     00 00 00 00 
08584     00 00 05 46 
08588     00 40 00 00 | 	byte	$73, $00, $00, $00, $00, $00, $00, $00, $00, $00, $05, $46, $00, $40, $00, $00
0858c     00 01 73 74 
08590     2D 30 34 3A 
08594     53 79 6E 42 
08598     72 61 73 73 | 	byte	$00, $01, $73, $74, $2d, $30, $34, $3a, $53, $79, $6e, $42, $72, $61, $73, $73
0859c     00 00 00 00 
085a0     00 00 00 00 | 	byte	$00[8]
085a4     07 D0 00 22 
085a8     00 00 00 01 
085ac     73 74 2D 30 
085b0     34 3A 53 74 | 	byte	$07, $d0, $00, $22, $00, $00, $00, $01, $73, $74, $2d, $30, $34, $3a, $53, $74
085b4     72 69 6E 67 
085b8     73 33 00 00 
085bc     00 00 00 00 
085c0     00 00 10 9A | 	byte	$72, $69, $6e, $67, $73, $33, $00, $00, $00, $00, $00, $00, $00, $00, $10, $9a
085c4     00 26 06 9B 
085c8     09 5A 73 74 
085cc     2D 30 31 3A 
085d0     44 61 6E 67 | 	byte	$00, $26, $06, $9b, $09, $5a, $73, $74, $2d, $30, $31, $3a, $44, $61, $6e, $67
085d4     65 72 6F 75 
085d8     73 00 00 00 
085dc     00 00 00 00 
085e0     0D AC 00 34 | 	byte	$65, $72, $6f, $75, $73, $00, $00, $00, $00, $00, $00, $00, $0d, $ac, $00, $34
085e4     00 00 00 01 
085e8     73 74 2D 30 
085ec     32 3A 4A 61 
085f0     68 72 4D 61 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $4a, $61, $68, $72, $4d, $61
085f4     72 6B 74 31 
085f8     00 00 00 00 
085fc     00 00 12 CC 
08600     00 3C 00 00 | 	byte	$72, $6b, $74, $31, $00, $00, $00, $00, $00, $00, $12, $cc, $00, $3c, $00, $00
08604     00 01 73 74 
08608     2D 30 31 3A 
0860c     41 6E 61 6C 
08610     6F 67 53 74 | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $41, $6e, $61, $6c, $6f, $67, $53, $74
08614     72 69 6E 67 
08618     00 00 00 00 
0861c     11 30 00 2C 
08620     02 56 0A BF | 	byte	$72, $69, $6e, $67, $00, $00, $00, $00, $11, $30, $00, $2c, $02, $56, $0a, $bf
08624     73 74 2D 30 
08628     31 3A 44 65 
0862c     74 75 6E 65 
08630     00 00 00 00 | 	byte	$73, $74, $2d, $30, $31, $3a, $44, $65, $74, $75, $6e, $65, $00, $00, $00, $00
08634     00 00 00 00 
08638     00 00       | 	byte	$00[6]
0863a     0B 22 00 38 
0863e     00 00 00 01 
08642     73 74 2D 30 
08646     31 3A 00 00 | 	byte	$0b, $22, $00, $38, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $00, $00
0864a     00 00 00 00 
0864e     00 00 00 00 
08652     00 00 00 00 
08656     00 00 00 00 
0865a     00 00 00 00 
0865e     00          | 	byte	$00[21]
0865f     01 73 74 2D 
08663     30 31 3A 00 
08667     00 00 00 00 
0866b     00 00 00 00 | 	byte	$01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00, $00, $00, $00, $00
0866f     00 00 00 00 
08673     00 00 00 00 
08677     00 00 00 00 
0867b     00 00       | 	byte	$00[14]
0867d     01 73 74 2D 
08681     30 31 3A 00 
08685     00 00 00 00 
08689     00 00 00 00 | 	byte	$01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00, $00, $00, $00, $00
0868d     00 00 00 00 
08691     00 00 00 00 
08695     00 00 00 00 
08699     00 00       | 	byte	$00[14]
0869b     01 73 74 2D 
0869f     30 31 3A 00 
086a3     00 00 00 00 
086a7     00 00 00 00 | 	byte	$01, $73, $74, $2d, $30, $31, $3a, $00, $00, $00, $00, $00, $00, $00, $00, $00
086ab     00 00 00 00 
086af     00 00 00 00 
086b3     00 00 00 00 
086b7     00 00       | 	byte	$00[14]
086b9     01 73 74 2D 
086bd     30 31 3A 45 
086c1     6C 65 63 54 
086c5     6F 6D 00 00 | 	byte	$01, $73, $74, $2d, $30, $31, $3a, $45, $6c, $65, $63, $54, $6f, $6d, $00, $00
086c9     00 00 00 00 
086cd     00 00 00    | 	byte	$00[7]
086d0     05 13 00 20 
086d4     00 00 00 01 
086d8     73 74 2D 30 
086dc     32 3A 48 69 | 	byte	$05, $13, $00, $20, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $69
086e0     48 61 74 32 
086e4     00 00 00 00 
086e8     00 00 00 00 
086ec     00 00 03 E8 | 	byte	$48, $61, $74, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $e8
086f0     00 16 00 00 
086f4     00 01 73 74 
086f8     2D 30 33 3A 
086fc     50 6F 70 53 | 	byte	$00, $16, $00, $00, $00, $01, $73, $74, $2d, $30, $33, $3a, $50, $6f, $70, $53
08700     6E 61 72 65 
08704     32 00 00 00 
08708     00 00 00 00 
0870c     07 D0 00 40 | 	byte	$6e, $61, $72, $65, $32, $00, $00, $00, $00, $00, $00, $00, $07, $d0, $00, $40
08710     00 00 00 01 
08714     73 74 2D 30 
08718     31 3A 42 61 
0871c     73 73 44 72 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $42, $61, $73, $73, $44, $72
08720     75 6D 31 00 
08724     00 00 00 00 
08728     00 00 02 26 
0872c     00 31 00 00 | 	byte	$75, $6d, $31, $00, $00, $00, $00, $00, $00, $00, $02, $26, $00, $31, $00, $00
08730     00 01 00 00 
08734     00 00 00 00 
08738     00 00 00 00 
0873c     00 00 00 00 | 	byte	$00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08740     00 00 00 00 
      ...             
0890c     00 00 00 00 
08910     00 00       | 	byte	$00[466]
08912     22 00 00 00 
08916     01 02 01 02 
0891a     03 03 04 04 
0891e     05 06 04 04 | 	byte	$22, $00, $00, $00, $01, $02, $01, $02, $03, $03, $04, $04, $05, $06, $04, $04
08922     05 06 07 07 
08926     08 01 02 01 
0892a     02 03 03 04 
0892e     04 05 06 04 | 	byte	$05, $06, $07, $07, $08, $01, $02, $01, $02, $03, $03, $04, $04, $05, $06, $04
08932     04 05 09 0A 
08936     00 00 00 00 
0893a     00 00 00 00 
0893e     00 00 00 00 | 	byte	$04, $05, $09, $0a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08942     00 00 00 00 
      ...             
0898e     00 00 00 00 
08992     00 00       | 	byte	$00[82]
08994     4D 2E 4B 2E 
08998     01 1D 1F 06 
0899c     02 80 D0 00 
089a0     02 3A 60 00 | 	byte	$4d, $2e, $4b, $2e, $01, $1d, $1f, $06, $02, $80, $d0, $00, $02, $3a, $60, $00
089a4     00 FE D0 00 
089a8     00 00 00 00 
089ac     00 00 00 00 
089b0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089b4     00 FE D0 00 
089b8     01 1D 00 00 
089bc     00 00 00 00 
089c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089c4     00 FE D0 00 
089c8     00 00 00 00 
089cc     00 00 00 00 
089d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089d4     00 FE D0 00 
089d8     01 1D 00 00 
089dc     00 00 00 00 
089e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089e4     00 FE D0 00 
089e8     00 00 00 00 
089ec     00 00 00 00 
089f0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089f4     00 FE D0 00 
089f8     01 1D 00 00 
089fc     00 00 00 00 
08a00     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a04     00 FE D0 00 
08a08     00 00 00 00 
08a0c     00 00 00 00 
08a10     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a14     00 FE D0 00 
08a18     01 1D 00 00 
08a1c     02 80 00 00 
08a20     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08a24     00 FE D0 00 
08a28     00 00 00 00 
08a2c     00 00 00 00 
08a30     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a34     00 FE D0 00 
08a38     01 1D 00 00 
08a3c     00 00 00 00 
08a40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a44     00 FE D0 00 
08a48     00 00 00 00 
08a4c     00 00 00 00 
08a50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a54     00 FE D0 00 
08a58     01 1D 00 00 
08a5c     00 00 00 00 
08a60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a64     00 FE D0 00 
08a68     00 00 00 00 
08a6c     00 00 00 00 
08a70     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a74     00 FE D0 00 
08a78     01 1D 00 00 
08a7c     00 00 00 00 
08a80     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a84     00 FE D0 00 
08a88     00 00 00 00 
08a8c     00 00 00 00 
08a90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a94     00 FE D0 00 
08a98     01 1D 00 00 
08a9c     02 80 00 00 
08aa0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08aa4     00 FE D0 00 
08aa8     00 00 00 00 
08aac     00 00 00 00 
08ab0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ab4     00 FE D0 00 
08ab8     01 1D 00 00 
08abc     00 00 00 00 
08ac0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac4     00 FE D0 00 
08ac8     00 00 00 00 
08acc     00 00 00 00 
08ad0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ad4     00 FE D0 00 
08ad8     01 1D 00 00 
08adc     00 00 00 00 
08ae0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ae4     00 FE D0 00 
08ae8     00 00 00 00 
08aec     00 00 00 00 
08af0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af4     00 FE D0 00 
08af8     01 1D 00 00 
08afc     00 00 00 00 
08b00     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b04     00 FE D0 00 
08b08     00 00 00 00 
08b0c     00 00 00 00 
08b10     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b14     00 FE D0 00 
08b18     01 1D 00 00 
08b1c     02 80 00 00 
08b20     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08b24     00 FE D0 00 
08b28     00 00 00 00 
08b2c     00 00 00 00 
08b30     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b34     00 FE D0 00 
08b38     01 1D 00 00 
08b3c     00 00 00 00 
08b40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b44     00 FE D0 00 
08b48     00 00 00 00 
08b4c     00 00 00 00 
08b50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b54     00 FE D0 00 
08b58     01 1D 00 00 
08b5c     00 00 00 00 
08b60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b64     00 FE D0 00 
08b68     00 00 00 00 
08b6c     00 00 00 00 
08b70     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b74     00 FE D0 00 
08b78     01 1D 00 00 
08b7c     00 00 00 00 
08b80     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b84     00 FE D0 00 
08b88     00 00 00 00 
08b8c     00 00 00 00 
08b90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b94     00 FE D0 00 
08b98     01 1D 00 00 
08b9c     02 80 00 00 
08ba0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08ba4     00 FE D0 00 
08ba8     00 00 00 00 
08bac     00 00 00 00 
08bb0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bb4     00 FE D0 00 
08bb8     01 1D 00 00 
08bbc     00 00 00 00 
08bc0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bc4     00 FE D0 00 
08bc8     00 00 00 00 
08bcc     00 00 00 00 
08bd0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd4     00 FE D0 00 
08bd8     01 1D 00 00 
08bdc     00 00 00 00 
08be0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be4     00 FE D0 00 
08be8     00 00 00 00 
08bec     00 00 00 00 
08bf0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf4     00 FE D0 00 
08bf8     01 1D 00 00 
08bfc     00 00 00 00 
08c00     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c04     00 FE D0 00 
08c08     00 00 00 00 
08c0c     00 00 00 00 
08c10     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c14     00 FE D0 00 
08c18     01 1D 00 00 
08c1c     02 80 00 00 
08c20     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08c24     00 FE D0 00 
08c28     00 00 00 00 
08c2c     00 00 00 00 
08c30     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c34     00 FE D0 00 
08c38     01 1D 00 00 
08c3c     00 00 00 00 
08c40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c44     00 FE D0 00 
08c48     00 00 00 00 
08c4c     00 00 00 00 
08c50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c54     00 FE D0 00 
08c58     01 1D 00 00 
08c5c     00 00 00 00 
08c60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c64     00 FE D0 00 
08c68     00 00 00 00 
08c6c     00 00 00 00 
08c70     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c74     00 FE D0 00 
08c78     01 1D 00 00 
08c7c     00 00 00 00 
08c80     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c84     00 FE D0 00 
08c88     00 00 00 00 
08c8c     00 00 00 00 
08c90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c94     00 FE D0 00 
08c98     01 1D 00 00 
08c9c     02 80 00 00 
08ca0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08ca4     00 D6 E0 00 
08ca8     00 00 00 00 
08cac     00 00 00 00 
08cb0     00 00 00 00 | 	byte	$00, $d6, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cb4     00 FE D0 00 
08cb8     01 1D 00 00 
08cbc     00 00 00 00 
08cc0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cc4     00 D6 E0 00 
08cc8     00 00 00 00 
08ccc     00 00 00 00 
08cd0     00 00 00 00 | 	byte	$00, $d6, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cd4     00 FE D0 00 
08cd8     01 1D 00 00 
08cdc     00 00 00 00 
08ce0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ce4     00 FE D0 00 
08ce8     00 00 00 00 
08cec     00 00 00 00 
08cf0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cf4     00 FE D0 00 
08cf8     01 1D 00 00 
08cfc     00 00 00 00 
08d00     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d04     00 D6 E0 00 
08d08     00 00 00 00 
08d0c     00 00 00 00 
08d10     00 00 00 00 | 	byte	$00, $d6, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d14     00 FE D0 00 
08d18     01 1D 00 00 
08d1c     02 80 00 00 
08d20     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00
08d24     00 FE D0 00 
08d28     00 00 00 00 
08d2c     00 00 00 00 
08d30     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d34     00 FE D0 00 
08d38     01 1D 00 00 
08d3c     00 00 00 00 
08d40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d44     00 D6 E0 00 
08d48     00 00 00 00 
08d4c     00 00 00 00 
08d50     00 00 00 00 | 	byte	$00, $d6, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d54     00 FE D0 00 
08d58     01 1D 00 00 
08d5c     00 00 00 00 
08d60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d64     01 C5 C0 00 
08d68     00 00 00 00 
08d6c     00 00 00 00 
08d70     00 00 00 00 | 	byte	$01, $c5, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d74     00 FE D0 00 
08d78     01 1D 00 00 
08d7c     00 00 00 00 
08d80     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d84     01 C5 C0 00 
08d88     00 00 00 00 
08d8c     00 00 40 00 
08d90     00 00 00 00 | 	byte	$01, $c5, $c0, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
08d94     01 C5 C0 00 
08d98     00 FE 10 00 
08d9c     00 00 00 00 
08da0     00 FE 60 00 | 	byte	$01, $c5, $c0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $fe, $60, $00
08da4     01 40 F0 00 
08da8     00 00 00 00 
08dac     00 00 00 00 
08db0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08db4     00 FE D0 00 
08db8     00 FE 00 00 
08dbc     00 00 00 00 
08dc0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dc4     00 FE D0 00 
08dc8     00 00 00 00 
08dcc     00 00 00 00 
08dd0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dd4     00 FE D0 00 
08dd8     00 FE 00 00 
08ddc     00 D6 40 00 
08de0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $d6, $40, $00, $00, $00, $00, $00
08de4     00 A0 E0 00 
08de8     00 00 00 00 
08dec     00 00 00 00 
08df0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08df4     00 FE D0 00 
08df8     00 FE 00 00 
08dfc     00 E2 00 00 
08e00     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
08e04     00 FE D0 00 
08e08     00 00 00 00 
08e0c     00 00 00 00 
08e10     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e14     00 FE D0 00 
08e18     00 FE 00 00 
08e1c     00 00 00 00 
08e20     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e24     01 40 F0 00 
08e28     00 FE 00 00 
08e2c     00 00 00 00 
08e30     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e34     00 FE D0 00 
08e38     00 FE 00 00 
08e3c     00 00 00 00 
08e40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e44     00 FE D0 00 
08e48     00 00 00 00 
08e4c     00 00 00 00 
08e50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e54     00 FE D0 00 
08e58     00 FE 00 00 
08e5c     00 00 00 00 
08e60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e64     00 A0 E0 00 
08e68     00 00 00 00 
08e6c     00 00 00 00 
08e70     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e74     00 FE D0 00 
08e78     00 FE 00 00 
08e7c     00 E2 00 00 
08e80     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
08e84     00 FE D0 00 
08e88     00 00 00 00 
08e8c     00 00 00 00 
08e90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e94     00 FE D0 00 
08e98     00 FE 00 00 
08e9c     00 00 00 00 
08ea0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ea4     01 40 F0 00 
08ea8     00 00 00 00 
08eac     00 00 00 00 
08eb0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08eb4     00 FE D0 00 
08eb8     00 FE 00 00 
08ebc     01 1D 00 00 
08ec0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
08ec4     00 FE D0 00 
08ec8     00 00 00 00 
08ecc     00 00 00 00 
08ed0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ed4     00 FE D0 00 
08ed8     00 FE 00 00 
08edc     00 00 00 00 
08ee0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ee4     00 A0 E0 00 
08ee8     00 00 00 00 
08eec     00 00 00 00 
08ef0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ef4     00 FE D0 00 
08ef8     00 FE 00 00 
08efc     01 1D 00 00 
08f00     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
08f04     00 FE D0 00 
08f08     00 00 00 00 
08f0c     00 00 00 00 
08f10     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f14     00 FE D0 00 
08f18     00 FE 00 00 
08f1c     00 00 00 00 
08f20     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f24     01 40 F0 00 
08f28     00 00 00 00 
08f2c     00 00 00 00 
08f30     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f34     00 FE D0 00 
08f38     00 FE 00 00 
08f3c     00 FE 00 00 
08f40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00
08f44     00 FE D0 00 
08f48     00 00 00 00 
08f4c     00 00 00 00 
08f50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f54     00 FE D0 00 
08f58     00 FE 00 00 
08f5c     00 00 00 00 
08f60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f64     00 A0 E0 00 
08f68     00 00 00 00 
08f6c     00 00 00 00 
08f70     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f74     00 FE D0 00 
08f78     00 FE 00 00 
08f7c     00 00 00 00 
08f80     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f84     00 FE D0 00 
08f88     00 FE 00 00 
08f8c     00 00 00 00 
08f90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f94     00 FE D0 00 
08f98     01 40 00 00 
08f9c     00 00 00 00 
08fa0     01 40 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $01, $40, $00, $00
08fa4     01 40 F0 00 
08fa8     00 00 00 00 
08fac     00 00 00 00 
08fb0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fb4     00 FE D0 00 
08fb8     01 40 00 00 
08fbc     00 00 00 00 
08fc0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fc4     00 FE D0 00 
08fc8     00 00 00 00 
08fcc     00 00 00 00 
08fd0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fd4     00 FE D0 00 
08fd8     01 40 00 00 
08fdc     00 D6 00 00 
08fe0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
08fe4     00 A0 E0 00 
08fe8     00 00 00 00 
08fec     00 00 00 00 
08ff0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ff4     00 FE D0 00 
08ff8     01 40 00 00 
08ffc     00 E2 00 00 
09000     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09004     00 FE D0 00 
09008     00 00 00 00 
0900c     00 00 00 00 
09010     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09014     00 FE D0 00 
09018     01 40 00 00 
0901c     00 00 00 00 
09020     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09024     01 40 F0 00 
09028     00 00 00 00 
0902c     00 00 00 00 
09030     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09034     00 FE D0 00 
09038     01 40 00 00 
0903c     00 00 00 00 
09040     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09044     00 FE D0 00 
09048     00 00 00 00 
0904c     00 00 00 00 
09050     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09054     00 FE D0 00 
09058     01 40 00 00 
0905c     00 00 00 00 
09060     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09064     00 A0 E0 00 
09068     00 00 00 00 
0906c     00 00 00 00 
09070     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09074     00 FE D0 00 
09078     01 40 00 00 
0907c     00 E2 00 00 
09080     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09084     00 FE D0 00 
09088     00 00 00 00 
0908c     00 00 00 00 
09090     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09094     00 FE D0 00 
09098     01 40 00 00 
0909c     00 00 00 00 
090a0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090a4     01 40 F0 00 
090a8     00 00 00 00 
090ac     00 00 00 00 
090b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090b4     00 FE D0 00 
090b8     01 40 00 00 
090bc     01 1D 00 00 
090c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
090c4     00 FE D0 00 
090c8     00 00 00 00 
090cc     00 00 00 00 
090d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090d4     00 FE D0 00 
090d8     01 40 00 00 
090dc     00 00 00 00 
090e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090e4     00 A0 E0 00 
090e8     00 00 00 00 
090ec     00 00 00 00 
090f0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090f4     00 FE D0 00 
090f8     01 40 00 00 
090fc     01 1D 00 00 
09100     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09104     00 FE D0 00 
09108     00 00 00 00 
0910c     00 00 00 00 
09110     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09114     00 FE D0 00 
09118     01 40 00 00 
0911c     00 00 00 00 
09120     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09124     01 40 F0 00 
09128     00 00 00 00 
0912c     00 00 00 00 
09130     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09134     00 FE D0 00 
09138     01 40 00 00 
0913c     00 FE 00 00 
09140     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00
09144     00 FE D0 00 
09148     01 40 00 00 
0914c     00 00 00 00 
09150     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09154     00 FE D0 00 
09158     01 40 00 00 
0915c     00 E2 00 00 
09160     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09164     00 A0 E0 00 
09168     01 40 00 00 
0916c     00 D6 00 00 
09170     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $01, $40, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09174     00 FE D0 00 
09178     01 40 00 00 
0917c     00 BE 40 00 
09180     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $be, $40, $00, $00, $00, $00, $00
09184     00 FE D0 00 
09188     01 40 00 00 
0918c     00 AA 00 00 
09190     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $aa, $00, $00, $00, $00, $00, $00
09194     00 FE D0 00 
09198     00 D6 10 00 
0919c     00 8F 40 00 
091a0     00 D6 60 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $10, $00, $00, $8f, $40, $00, $00, $d6, $60, $00
091a4     01 40 F0 00 
091a8     00 00 00 00 
091ac     00 00 00 00 
091b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091b4     00 FE D0 00 
091b8     00 D6 00 00 
091bc     00 8F 20 00 
091c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $8f, $20, $00, $00, $00, $00, $00
091c4     00 FE D0 00 
091c8     00 00 00 00 
091cc     00 00 00 00 
091d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091d4     00 FE D0 00 
091d8     00 D6 00 00 
091dc     00 8F 00 00 
091e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $8f, $00, $00, $00, $00, $00, $00
091e4     00 A0 E0 00 
091e8     00 00 00 00 
091ec     00 00 00 00 
091f0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091f4     00 FE D0 00 
091f8     00 D6 00 00 
091fc     00 00 00 00 
09200     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09204     00 FE D0 00 
09208     00 00 00 00 
0920c     01 1D 00 00 
09210     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09214     00 FE D0 00 
09218     00 D6 00 00 
0921c     00 8F 00 00 
09220     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $8f, $00, $00, $00, $00, $00, $00
09224     01 40 F0 00 
09228     00 00 00 00 
0922c     00 00 00 00 
09230     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09234     00 FE D0 00 
09238     00 D6 00 00 
0923c     00 00 00 00 
09240     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09244     00 FE D0 00 
09248     00 00 00 00 
0924c     00 00 00 00 
09250     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09254     00 FE D0 00 
09258     00 D6 00 00 
0925c     00 00 00 00 
09260     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09264     00 A0 E0 00 
09268     00 00 00 00 
0926c     00 00 00 00 
09270     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09274     00 FE D0 00 
09278     00 D6 00 00 
0927c     00 00 00 00 
09280     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09284     00 FE D0 00 
09288     00 00 00 00 
0928c     00 00 00 00 
09290     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09294     00 FE D0 00 
09298     00 D6 00 00 
0929c     01 1D 00 00 
092a0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
092a4     01 40 F0 00 
092a8     00 00 00 00 
092ac     00 00 00 00 
092b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092b4     00 FE D0 00 
092b8     00 D6 00 00 
092bc     00 00 00 00 
092c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092c4     00 FE D0 00 
092c8     00 00 00 00 
092cc     00 00 00 00 
092d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092d4     00 FE D0 00 
092d8     00 D6 00 00 
092dc     00 FE 00 00 
092e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00
092e4     00 A0 E0 00 
092e8     00 00 00 00 
092ec     00 00 00 00 
092f0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092f4     00 FE D0 00 
092f8     00 D6 00 00 
092fc     01 1D 00 00 
09300     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09304     00 FE D0 00 
09308     00 00 00 00 
0930c     00 00 00 00 
09310     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09314     00 FE D0 00 
09318     00 D6 00 00 
0931c     00 00 00 00 
09320     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09324     01 40 F0 00 
09328     00 00 00 00 
0932c     00 00 00 00 
09330     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09334     00 FE D0 00 
09338     00 D6 00 00 
0933c     01 53 00 00 
09340     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00
09344     00 FE D0 00 
09348     00 00 00 00 
0934c     00 00 00 00 
09350     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09354     00 FE D0 00 
09358     00 D6 00 00 
0935c     01 40 00 00 
09360     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00
09364     00 A0 E0 00 
09368     00 00 00 00 
0936c     00 00 00 00 
09370     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09374     00 FE D0 00 
09378     00 D6 00 00 
0937c     01 1D 00 00 
09380     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $d6, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09384     00 FE D0 00 
09388     00 00 00 00 
0938c     00 00 00 00 
09390     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09394     00 FE D0 00 
09398     01 1D 00 00 
0939c     01 1D 00 00 
093a0     01 1D 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $1d, $00, $00, $01, $1d, $00, $00
093a4     01 40 F0 00 
093a8     00 00 00 00 
093ac     00 00 00 00 
093b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093b4     00 FE D0 00 
093b8     01 1D 00 00 
093bc     01 7D 00 00 
093c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $7d, $00, $00, $00, $00, $00, $00
093c4     00 FE D0 00 
093c8     00 00 00 00 
093cc     00 00 00 00 
093d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093d4     00 FE D0 00 
093d8     01 1D 00 00 
093dc     01 AC 00 00 
093e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00
093e4     00 A0 E0 00 
093e8     00 00 00 00 
093ec     00 00 00 00 
093f0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093f4     00 FE D0 00 
093f8     01 1D 00 00 
093fc     01 C5 00 00 
09400     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $c5, $00, $00, $00, $00, $00, $00
09404     00 FE D0 00 
09408     00 00 00 00 
0940c     00 00 00 00 
09410     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09414     00 FE D0 00 
09418     01 1D 00 00 
0941c     00 00 00 00 
09420     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09424     01 40 F0 00 
09428     00 00 00 00 
0942c     00 00 00 00 
09430     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09434     00 FE D0 00 
09438     01 1D 00 00 
0943c     00 00 00 00 
09440     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09444     00 FE D0 00 
09448     00 00 00 00 
0944c     00 00 00 00 
09450     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09454     00 FE D0 00 
09458     01 1D 00 00 
0945c     00 00 00 00 
09460     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09464     00 A0 E0 00 
09468     00 00 00 00 
0946c     00 00 00 00 
09470     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09474     00 FE D0 00 
09478     01 1D 00 00 
0947c     00 00 00 00 
09480     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09484     00 FE D0 00 
09488     00 00 00 00 
0948c     00 00 00 00 
09490     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09494     00 FE D0 00 
09498     01 1D 00 00 
0949c     00 E2 40 00 
094a0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $e2, $40, $00, $00, $00, $00, $00
094a4     01 40 F0 00 
094a8     00 00 00 00 
094ac     00 00 00 00 
094b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094b4     00 FE D0 00 
094b8     01 1D 00 00 
094bc     00 00 00 00 
094c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094c4     00 FE D0 00 
094c8     00 00 00 00 
094cc     00 00 00 00 
094d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094d4     00 FE D0 00 
094d8     01 1D 00 00 
094dc     00 D6 00 00 
094e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
094e4     00 A0 E0 00 
094e8     00 00 00 00 
094ec     00 00 00 00 
094f0     00 00 00 00 | 	byte	$00, $a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094f4     00 FE D0 00 
094f8     01 1D 00 00 
094fc     00 E2 00 00 
09500     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09504     00 FE D0 00 
09508     00 00 00 00 
0950c     00 00 00 00 
09510     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09514     00 FE D0 00 
09518     01 1D 00 00 
0951c     00 00 00 00 
09520     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09524     01 40 F0 00 
09528     00 00 00 00 
0952c     00 00 00 00 
09530     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09534     00 BE C0 00 
09538     01 1D 00 00 
0953c     00 D6 00 00 
09540     00 00 00 00 | 	byte	$00, $be, $c0, $00, $01, $1d, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09544     00 FE D0 00 
09548     00 00 00 00 
0954c     00 00 00 00 
09550     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09554     00 FE D0 00 
09558     01 1D 00 00 
0955c     00 E2 00 00 
09560     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09564     00 FE C0 00 
09568     00 00 00 00 
0956c     00 00 00 00 
09570     00 00 00 00 | 	byte	$00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09574     00 FE C0 00 
09578     01 1D 00 00 
0957c     00 D6 00 00 
09580     00 00 00 00 | 	byte	$00, $fe, $c0, $00, $01, $1d, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09584     01 40 C0 00 
09588     00 00 00 00 
0958c     00 00 00 00 
09590     00 00 00 00 | 	byte	$01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09594     01 40 C0 00 
09598     01 40 10 00 
0959c     00 FE 50 00 
095a0     01 40 60 00 | 	byte	$01, $40, $c0, $00, $01, $40, $10, $00, $00, $fe, $50, $00, $01, $40, $60, $00
095a4     01 40 F0 00 
095a8     00 00 00 00 
095ac     00 00 00 00 
095b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095b4     00 FE D0 00 
095b8     01 40 00 00 
095bc     00 AA 20 00 
095c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $aa, $20, $00, $00, $00, $00, $00
095c4     00 FE D0 00 
095c8     00 00 00 00 
095cc     00 A0 00 00 
095d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $a0, $00, $00, $00, $00, $00, $00
095d4     00 FE D0 00 
095d8     01 40 00 00 
095dc     00 8F 00 00 
095e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $8f, $00, $00, $00, $00, $00, $00
095e4     01 40 F0 00 
095e8     00 00 00 00 
095ec     00 00 00 00 
095f0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095f4     00 FE D0 00 
095f8     01 40 00 00 
095fc     00 FE 50 00 
09600     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $fe, $50, $00, $00, $00, $00, $00
09604     00 FE D0 00 
09608     00 00 00 00 
0960c     00 00 00 00 
09610     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09614     00 FE D0 00 
09618     00 A0 00 00 
0961c     00 FE 00 00 
09620     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $a0, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00
09624     01 40 F0 00 
09628     00 00 00 00 
0962c     00 00 00 00 
09630     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09634     00 FE D0 00 
09638     01 40 00 00 
0963c     00 E2 00 00 
09640     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09644     00 FE D0 00 
09648     00 00 00 00 
0964c     00 00 00 00 
09650     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09654     00 FE D0 00 
09658     01 40 00 00 
0965c     00 D6 00 00 
09660     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09664     01 40 F0 00 
09668     00 00 00 00 
0966c     00 00 00 00 
09670     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09674     00 FE D0 00 
09678     00 A0 00 00 
0967c     00 D6 00 00 
09680     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $a0, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09684     00 FE D0 00 
09688     00 00 00 00 
0968c     00 00 00 00 
09690     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09694     00 FE D0 00 
09698     01 40 00 00 
0969c     00 00 00 00 
096a0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096a4     01 40 F0 00 
096a8     00 00 00 00 
096ac     00 00 00 00 
096b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096b4     00 FE D0 00 
096b8     01 40 00 00 
096bc     00 00 00 00 
096c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096c4     00 FE D0 00 
096c8     00 00 00 00 
096cc     00 00 00 00 
096d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096d4     00 FE D0 00 
096d8     01 40 00 00 
096dc     00 00 00 00 
096e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096e4     01 40 F0 00 
096e8     00 00 00 00 
096ec     00 00 00 00 
096f0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096f4     00 FE D0 00 
096f8     01 40 00 00 
096fc     00 D6 00 00 
09700     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09704     00 FE D0 00 
09708     00 00 00 00 
0970c     00 00 00 00 
09710     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09714     00 FE D0 00 
09718     00 A0 00 00 
0971c     00 D6 00 00 
09720     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $a0, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09724     01 40 F0 00 
09728     00 00 00 00 
0972c     00 00 00 00 
09730     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09734     00 FE D0 00 
09738     01 40 00 00 
0973c     00 E2 00 00 
09740     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09744     00 FE D0 00 
09748     00 00 00 00 
0974c     00 00 00 00 
09750     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09754     00 FE D0 00 
09758     01 40 00 00 
0975c     00 D6 00 00 
09760     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $40, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
09764     01 40 F0 00 
09768     01 40 00 00 
0976c     00 00 00 00 
09770     00 00 00 00 | 	byte	$01, $40, $f0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09774     00 FE D0 00 
09778     00 A0 00 00 
0977c     00 BE 00 00 
09780     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $a0, $00, $00, $00, $be, $00, $00, $00, $00, $00, $00
09784     00 FE D0 00 
09788     00 00 00 00 
0978c     00 00 00 00 
09790     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09794     00 FE D0 00 
09798     01 1D 00 00 
0979c     00 00 00 00 
097a0     01 1D 60 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $01, $1d, $60, $00
097a4     01 40 F0 00 
097a8     00 00 00 00 
097ac     00 00 00 00 
097b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097b4     00 FE D0 00 
097b8     01 1D 00 00 
097bc     00 00 00 00 
097c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097c4     00 FE D0 00 
097c8     00 00 00 00 
097cc     00 00 00 00 
097d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097d4     00 FE D0 00 
097d8     01 1D 00 00 
097dc     00 00 00 00 
097e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097e4     01 40 F0 00 
097e8     00 00 00 00 
097ec     00 00 00 00 
097f0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097f4     00 FE D0 00 
097f8     01 1D 00 00 
097fc     01 1D 70 00 
09800     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $1d, $70, $00, $00, $00, $00, $00
09804     00 FE D0 00 
09808     00 00 00 00 
0980c     00 00 00 00 
09810     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09814     00 FE D0 00 
09818     00 8F 00 00 
0981c     01 1D 00 00 
09820     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $8f, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09824     01 40 F0 00 
09828     00 00 00 00 
0982c     00 00 00 00 
09830     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09834     00 FE D0 00 
09838     01 1D 00 00 
0983c     01 40 00 00 
09840     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00
09844     00 FE D0 00 
09848     00 00 00 00 
0984c     00 00 00 00 
09850     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09854     00 FE D0 00 
09858     01 1D 00 00 
0985c     01 1D 00 00 
09860     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09864     01 40 F0 00 
09868     00 00 00 00 
0986c     00 00 00 00 
09870     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09874     00 FE D0 00 
09878     00 8F 00 00 
0987c     01 1D 20 00 
09880     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $8f, $00, $00, $01, $1d, $20, $00, $00, $00, $00, $00
09884     00 FE D0 00 
09888     00 00 00 00 
0988c     00 00 00 00 
09890     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09894     00 FE D0 00 
09898     01 1D 00 00 
0989c     00 BE 00 00 
098a0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $be, $00, $00, $00, $00, $00, $00
098a4     01 40 F0 00 
098a8     00 00 00 00 
098ac     00 00 00 00 
098b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098b4     00 FE D0 00 
098b8     01 1D 00 00 
098bc     01 1D 00 00 
098c0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
098c4     00 FE D0 00 
098c8     00 00 00 00 
098cc     00 00 00 00 
098d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098d4     00 FE D0 00 
098d8     01 1D 00 00 
098dc     00 D6 00 00 
098e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00
098e4     01 40 F0 00 
098e8     00 00 00 00 
098ec     00 00 00 00 
098f0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098f4     00 FE D0 00 
098f8     01 1D 00 00 
098fc     01 1D 00 00 
09900     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09904     00 FE D0 00 
09908     01 1D 00 00 
0990c     00 00 00 00 
09910     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09914     00 FE D0 00 
09918     00 8F 00 00 
0991c     00 E2 00 00 
09920     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $8f, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00
09924     01 40 F0 00 
09928     00 00 00 00 
0992c     00 00 00 00 
09930     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09934     00 FE D0 00 
09938     01 1D 00 00 
0993c     01 1D 00 00 
09940     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00
09944     00 FE D0 00 
09948     00 00 00 00 
0994c     00 00 00 00 
09950     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09954     00 FE D0 00 
09958     00 8F 00 00 
0995c     00 FE 00 00 
09960     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $8f, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00
09964     01 40 F0 00 
09968     00 8F 00 00 
0996c     00 00 00 00 
09970     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09974     00 FE D0 00 
09978     00 8F 00 00 
0997c     00 D6 20 00 
09980     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $8f, $00, $00, $00, $d6, $20, $00, $00, $00, $00, $00
09984     00 FE D0 00 
09988     00 00 00 00 
0998c     00 00 00 00 
09990     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09994     00 FE D0 00 
09998     00 FE 10 00 
0999c     00 D6 50 00 
099a0     00 FE 60 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $10, $00, $00, $d6, $50, $00, $00, $fe, $60, $00
099a4     01 40 F0 00 
099a8     00 00 00 00 
099ac     00 FE 00 00 
099b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00
099b4     00 00 00 00 
099b8     00          | 	byte	$00[5]
099b9     FE 00 00 00 
099bd     BE 00 00 00 
099c1     00 00 00 00 
099c5     FE D0 00 00 | 	byte	$fe, $00, $00, $00, $be, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
099c9     00 00 00 00 
099cd     FE 00 00 00 
099d1     00 00 00 00 
099d5     FE D0 00 00 | 	byte	$00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
099d9     FE 00 00 00 
099dd     AA 00 00 00 
099e1     00 00 00 00 
099e5     FE E0 00 00 | 	byte	$fe, $00, $00, $00, $aa, $00, $00, $00, $00, $00, $00, $00, $fe, $e0, $00, $00
099e9     00 00 00 00 
099ed     FE 00 00 00 
099f1     00 00 00 00 
099f5     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099f9     FE 00 00 00 
099fd     D6 00 00 00 
09a01     00 00 00 00 
09a05     FE D0 00 00 | 	byte	$fe, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
09a09     00 00 00 00 
09a0d     FE 00 00 00 
09a11     00 00 00 00 
09a15     FE D0 00 00 | 	byte	$00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
09a19     7F 00 00 00 
09a1d     D6 00 00 00 
09a21     00 00 00 01 
09a25     40 F0 00 00 | 	byte	$7f, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $01, $40, $f0, $00, $00
09a29     00 00 00 00 
09a2d     FE 00 00 00 
09a31     00 00 00 00 
09a35     FE D0 00 00 | 	byte	$00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
09a39     7F 00 00 01 
09a3d     53 70 00 00 
09a41     00 00 00 00 
09a45     FE D0 00 00 | 	byte	$7f, $00, $00, $01, $53, $70, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
09a49     00 00 00 00 
09a4d     00 00 00 00 
09a51     00 00 00 00 | 	byte	$00[12]
09a55     FE D0 00 00 
09a59     FE 00 00 00 
09a5d     FE 00 00 00 
09a61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00
09a65     FE E0 00 00 
09a69     00 00 00 00 
09a6d     00 00 00 00 
09a71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a75     00 00 00 00 
09a79     FE 00 00 00 
09a7d     D6 00 00 00 
09a81     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00
09a85     FE D0 00 00 
09a89     FE 00 00 00 
09a8d     00 00 00 00 
09a91     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a95     FE D0 00 00 
09a99     7F 00 00 00 
09a9d     E2 00 00 00 
09aa1     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $7f, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $01
09aa5     40 F0 00 00 
09aa9     00 00 00 00 
09aad     00 00 00 00 
09ab1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ab5     00 00 00 00 
09ab9     7F 00 00 00 
09abd     D6 00 00 00 
09ac1     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00
09ac5     FE D0 00 00 
09ac9     00 00 00 00 
09acd     00 00 00 00 
09ad1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ad5     FE D0 00 00 
09ad9     7F 00 00 00 
09add     E2 00 00 00 
09ae1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $7f, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $00
09ae5     FE E0 00 00 
09ae9     00 00 00 00 
09aed     00 00 00 00 
09af1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09af5     00 00 00 00 
09af9     7F 00 00 01 
09afd     53 00 00 00 
09b01     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
09b05     FE D0 00 00 
09b09     7F 00 00 00 
09b0d     00 00 00 00 
09b11     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b15     FE D0 00 00 
09b19     00 00 00 00 
09b1d     FE 00 00 00 
09b21     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $01
09b25     40 F0 00 00 
09b29     FE 00 00 00 
09b2d     00 00 00 00 
09b31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b35     FE D0 00 00 
09b39     00 00 00 00 
09b3d     00 00 00 00 
09b41     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b45     FE D0 00 00 
09b49     FE 00 00 00 
09b4d     00 00 00 00 
09b51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b55     FE D0 00 00 
09b59     00 00 00 00 
09b5d     00 00 00 00 
09b61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b65     FE E0 00 00 
09b69     FE 00 00 00 
09b6d     00 00 00 00 
09b71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b75     00 00 00 00 
09b79     00 00 00 00 
09b7d     00 00 00 00 
09b81     00 00 00 00 | 	byte	$00[16]
09b85     FE D0 00 00 
09b89     FE 00 00 00 
09b8d     00 00 00 00 
09b91     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b95     FE D0 00 01 
09b99     1D 00 00 00 
09b9d     E2 50 00 01 
09ba1     1D 60 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $e2, $50, $00, $01, $1d, $60, $00, $01
09ba5     40 F0 00 00 
09ba9     00 00 00 01 
09bad     1D 00 00 00 
09bb1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09bb5     00 00 00 01 
09bb9     1D 00 00 00 
09bbd     D6 00 00 00 
09bc1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00
09bc5     FE D0 00 00 
09bc9     00 00 00 01 
09bcd     1D 00 00 00 
09bd1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09bd5     FE D0 00 01 
09bd9     1D 00 00 00 
09bdd     BE 00 00 00 
09be1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $be, $00, $00, $00, $00, $00, $00, $00
09be5     FE E0 00 00 
09be9     00 00 00 01 
09bed     1D 00 00 00 
09bf1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09bf5     00 00 00 01 
09bf9     1D 00 00 00 
09bfd     E2 00 00 00 
09c01     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $00
09c05     FE D0 00 00 
09c09     00 00 00 01 
09c0d     1D 00 00 00 
09c11     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09c15     FE D0 00 00 
09c19     8F 00 00 00 
09c1d     E2 00 00 00 
09c21     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $01
09c25     40 F0 00 00 
09c29     00 00 00 01 
09c2d     1D 00 00 00 
09c31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09c35     FE D0 00 00 
09c39     8F 00 00 01 
09c3d     7D 70 00 00 
09c41     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $01, $7d, $70, $00, $00, $00, $00, $00, $00
09c45     FE D0 00 00 
09c49     00 00 00 00 
09c4d     00 00 00 00 
09c51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c55     FE D0 00 00 
09c59     8F 00 00 01 
09c5d     1D 00 00 00 
09c61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09c65     FE E0 00 00 
09c69     00 00 00 00 
09c6d     00 00 00 00 
09c71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c75     00 00 00 01 
09c79     1D 00 00 00 
09c7d     FE 00 00 00 
09c81     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00
09c85     FE D0 00 01 
09c89     1D 00 00 00 
09c8d     00 00 00 00 
09c91     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c95     FE D0 00 00 
09c99     8F 00 00 00 
09c9d     E2 00 00 00 
09ca1     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $01
09ca5     40 F0 00 00 
09ca9     00 00 00 00 
09cad     00 00 00 00 
09cb1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cb5     00 00 00 00 
09cb9     8F 00 00 00 
09cbd     D6 00 00 00 
09cc1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $00, $00, $00, $d6, $00, $00, $00, $00, $00, $00, $00
09cc5     FE D0 00 00 
09cc9     00 00 00 00 
09ccd     00 00 00 00 
09cd1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cd5     FE D0 00 00 
09cd9     8F 00 00 00 
09cdd     BE 00 00 00 
09ce1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $00, $be, $00, $00, $00, $00, $00, $00, $00
09ce5     FE E0 00 00 
09ce9     00 00 00 00 
09ced     00 00 00 00 
09cf1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cf5     00 00 00 00 
09cf9     8F 00 00 01 
09cfd     1D 00 00 00 
09d01     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00
09d05     FE D0 00 01 
09d09     1D 00 00 00 
09d0d     00 00 00 00 
09d11     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d15     FE D0 00 00 
09d19     00 00 00 00 
09d1d     00 00 00 00 
09d21     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09d25     40 F0 00 01 
09d29     1D 00 00 00 
09d2d     00 00 00 00 
09d31     00 00 00 00 | 	byte	$40, $f0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d35     FE D0 00 01 
09d39     1D 00 00 00 
09d3d     00 00 00 00 
09d41     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d45     FE D0 00 00 
09d49     00 00 00 00 
09d4d     00 00 00 00 
09d51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d55     FE D0 00 01 
09d59     1D 00 00 00 
09d5d     00 00 00 00 
09d61     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d65     FE E0 00 00 
09d69     00 00 00 00 
09d6d     00 00 00 00 
09d71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d75     FE E0 00 00 
09d79     8F 00 00 00 
09d7d     00 00 00 00 
09d81     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d85     00 00 00 00 
09d89     00 00 00 00 
09d8d     00 00 00 00 
09d91     00 00 00 00 | 	byte	$00[16]
09d95     FE D0 00 01 
09d99     40 10 00 01 
09d9d     40 30 00 01 
09da1     40 60 00 01 | 	byte	$fe, $d0, $00, $01, $40, $10, $00, $01, $40, $30, $00, $01, $40, $60, $00, $01
09da5     40 F0 00 00 
09da9     00 00 00 00 
09dad     00 00 00 00 
09db1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09db5     00 00 00 01 
09db9     40 00 00 00 
09dbd     00 00 00 00 
09dc1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dc5     FE D0 00 00 
09dc9     00 00 00 00 
09dcd     00 00 00 00 
09dd1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dd5     FE D0 00 01 
09dd9     40 00 00 01 
09ddd     53 00 00 00 
09de1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
09de5     FE E0 00 00 
09de9     00 00 00 00 
09ded     00 00 00 00 
09df1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09df5     00 00 00 01 
09df9     40 00 00 00 
09dfd     00 00 00 00 
09e01     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e05     FE D0 00 00 
09e09     00 00 00 00 
09e0d     00 00 00 00 
09e11     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e15     FE D0 00 01 
09e19     40 00 00 01 
09e1d     AC 00 00 00 
09e21     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $01
09e25     40 F0 00 00 
09e29     00 00 00 00 
09e2d     00 00 00 00 
09e31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e35     FE D0 00 01 
09e39     40 00 00 00 
09e3d     00 00 00 00 
09e41     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e45     FE D0 00 00 
09e49     00 00 00 00 
09e4d     00 00 00 00 
09e51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e55     FE D0 00 00 
09e59     A0 00 00 01 
09e5d     FC 00 00 00 
09e61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09e65     FE E0 00 00 
09e69     A0 00 00 00 
09e6d     00 00 00 00 
09e71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e75     00 00 00 01 
09e79     40 00 00 00 
09e7d     00 00 00 00 
09e81     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e85     FE D0 00 00 
09e89     00 00 00 00 
09e8d     00 00 00 00 
09e91     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e95     FE D0 00 01 
09e99     40 00 00 01 
09e9d     40 00 00 00 
09ea1     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $01
09ea5     40 F0 00 00 
09ea9     A0 00 00 00 
09ead     00 00 00 00 
09eb1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09eb5     00 00 00 00 
09eb9     A0 00 00 00 
09ebd     00 00 00 00 
09ec1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ec5     FE D0 00 00 
09ec9     00 00 00 00 
09ecd     00 00 00 00 
09ed1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ed5     FE D0 00 00 
09ed9     A0 00 00 01 
09edd     53 00 00 00 
09ee1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
09ee5     FE E0 00 00 
09ee9     00 00 00 00 
09eed     00 00 00 00 
09ef1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ef5     00 00 00 01 
09ef9     40 00 00 00 
09efd     00 00 00 00 
09f01     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f05     FE D0 00 00 
09f09     00 00 00 00 
09f0d     00 00 00 00 
09f11     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f15     FE D0 00 01 
09f19     40 00 00 01 
09f1d     AC 00 00 00 
09f21     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $01
09f25     40 F0 00 00 
09f29     00 00 00 00 
09f2d     00 00 00 00 
09f31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f35     FE D0 00 01 
09f39     40 00 00 00 
09f3d     00 00 00 00 
09f41     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f45     FE D0 00 00 
09f49     00 00 00 00 
09f4d     00 00 00 00 
09f51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f55     FE D0 00 00 
09f59     A0 00 00 01 
09f5d     FC 30 00 00 
09f61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $fc, $30, $00, $00, $00, $00, $00, $00
09f65     FE E0 00 00 
09f69     A0 00 00 00 
09f6d     00 00 00 00 
09f71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f75     00 00 00 00 
09f79     A0 00 00 01 
09f7d     7D 30 00 00 
09f81     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $00, $00, $01, $7d, $30, $00, $00, $00, $00, $00, $00
09f85     FE D0 00 00 
09f89     00 00 00 00 
09f8d     00 00 00 00 
09f91     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f95     FE D0 00 01 
09f99     1D 00 00 00 
09f9d     00 00 00 01 
09fa1     1D 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $01
09fa5     40 F0 00 00 
09fa9     00 00 00 00 
09fad     00 00 00 00 
09fb1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fb5     00 00 00 01 
09fb9     1D 00 00 00 
09fbd     00 00 00 00 
09fc1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fc5     FE D0 00 00 
09fc9     00 00 00 00 
09fcd     00 00 00 00 
09fd1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fd5     FE D0 00 01 
09fd9     1D 00 00 00 
09fdd     00 00 00 00 
09fe1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fe5     FE E0 00 00 
09fe9     00 00 00 00 
09fed     00 00 00 00 
09ff1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ff5     00 00 00 01 
09ff9     1D 00 00 00 
09ffd     00 00 00 00 
0a001     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a005     FE D0 00 00 
0a009     00 00 00 00 
0a00d     00 00 00 00 
0a011     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a015     FE D0 00 01 
0a019     1D 00 00 00 
0a01d     00 00 00 00 
0a021     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a025     40 F0 00 00 
0a029     00 00 00 00 
0a02d     00 00 00 00 
0a031     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a035     FE D0 00 01 
0a039     1D 00 00 00 
0a03d     00 00 00 00 
0a041     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a045     FE D0 00 00 
0a049     00 00 00 00 
0a04d     00 00 00 00 
0a051     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a055     FE D0 00 01 
0a059     1D 00 00 00 
0a05d     00 00 00 00 
0a061     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a065     FE E0 00 00 
0a069     8F 00 00 00 
0a06d     00 00 00 00 
0a071     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a075     00 00 00 01 
0a079     1D 00 00 00 
0a07d     00 00 00 00 
0a081     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a085     FE D0 00 00 
0a089     00 00 00 00 
0a08d     00 00 00 00 
0a091     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a095     FE D0 00 01 
0a099     1D 00 00 00 
0a09d     00 00 00 00 
0a0a1     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a0a5     40 F0 00 00 
0a0a9     00 00 00 00 
0a0ad     00 00 00 00 
0a0b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0b5     00 00 00 01 
0a0b9     1D 00 00 00 
0a0bd     00 00 00 00 
0a0c1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0c5     FE D0 00 00 
0a0c9     00 00 00 00 
0a0cd     00 00 00 00 
0a0d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0d5     FE D0 00 01 
0a0d9     1D 00 00 00 
0a0dd     00 00 00 00 
0a0e1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0e5     FE E0 00 00 
0a0e9     00 00 00 00 
0a0ed     00 00 00 00 
0a0f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0f5     00 00 00 00 
0a0f9     8F 00 00 00 
0a0fd     00 00 00 00 
0a101     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a105     FE D0 00 00 
0a109     00 00 00 00 
0a10d     00 00 00 00 
0a111     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a115     FE D0 00 00 
0a119     8F 00 00 00 
0a11d     00 00 00 00 
0a121     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a125     40 F0 00 00 
0a129     00 00 00 00 
0a12d     00 00 00 00 
0a131     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a135     FE D0 00 01 
0a139     1D 00 00 00 
0a13d     00 00 00 00 
0a141     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a145     FE D0 00 00 
0a149     00 00 00 00 
0a14d     00 00 00 00 
0a151     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a155     FE D0 00 01 
0a159     1D 00 00 00 
0a15d     00 00 00 00 
0a161     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a165     FE E0 00 01 
0a169     1D 00 00 00 
0a16d     00 00 00 00 
0a171     00 00 00 00 | 	byte	$fe, $e0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a175     FE E0 00 01 
0a179     1D 00 00 00 
0a17d     00 00 00 00 
0a181     00 00 00 00 | 	byte	$fe, $e0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a185     00 00 00 00 
0a189     00 00 00 00 
0a18d     00 00 00 00 
0a191     00 00 00 00 | 	byte	$00[16]
0a195     FE D0 00 01 
0a199     40 10 00 01 
0a19d     40 30 00 01 
0a1a1     40 60 00 01 | 	byte	$fe, $d0, $00, $01, $40, $10, $00, $01, $40, $30, $00, $01, $40, $60, $00, $01
0a1a5     40 F0 00 00 
0a1a9     00 00 00 00 
0a1ad     00 00 00 00 
0a1b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1b5     00 00 00 01 
0a1b9     40 00 00 00 
0a1bd     00 00 00 00 
0a1c1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1c5     FE D0 00 00 
0a1c9     00 00 00 00 
0a1cd     00 00 00 00 
0a1d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1d5     FE D0 00 01 
0a1d9     40 00 00 01 
0a1dd     53 00 00 00 
0a1e1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
0a1e5     FE E0 00 00 
0a1e9     00 00 00 00 
0a1ed     00 00 00 00 
0a1f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1f5     00 00 00 01 
0a1f9     40 00 00 00 
0a1fd     00 00 00 00 
0a201     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a205     FE D0 00 00 
0a209     00 00 00 00 
0a20d     00 00 00 00 
0a211     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a215     FE D0 00 01 
0a219     40 00 00 01 
0a21d     AC 00 00 00 
0a221     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $01
0a225     40 F0 00 00 
0a229     00 00 00 00 
0a22d     00 00 00 00 
0a231     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a235     FE D0 00 01 
0a239     40 00 00 00 
0a23d     00 00 00 00 
0a241     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a245     FE D0 00 00 
0a249     00 00 00 00 
0a24d     00 00 00 00 
0a251     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a255     FE D0 00 00 
0a259     A0 00 00 01 
0a25d     FC 00 00 00 
0a261     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
0a265     FE E0 00 00 
0a269     A0 00 00 00 
0a26d     00 00 00 00 
0a271     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a275     00 00 00 01 
0a279     40 00 00 00 
0a27d     00 00 00 00 
0a281     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a285     FE D0 00 00 
0a289     00 00 00 00 
0a28d     00 00 00 00 
0a291     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a295     FE D0 00 01 
0a299     40 00 00 01 
0a29d     40 00 00 00 
0a2a1     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $01
0a2a5     40 F0 00 00 
0a2a9     A0 00 00 00 
0a2ad     00 00 00 00 
0a2b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2b5     00 00 00 00 
0a2b9     A0 00 00 00 
0a2bd     00 00 00 00 
0a2c1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2c5     FE D0 00 00 
0a2c9     00 00 00 00 
0a2cd     00 00 00 00 
0a2d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2d5     FE D0 00 00 
0a2d9     A0 00 00 01 
0a2dd     53 00 00 00 
0a2e1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
0a2e5     FE E0 00 00 
0a2e9     00 00 00 00 
0a2ed     00 00 00 00 
0a2f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2f5     00 00 00 01 
0a2f9     40 00 00 00 
0a2fd     00 00 00 00 
0a301     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a305     FE D0 00 00 
0a309     00 00 00 00 
0a30d     00 00 00 00 
0a311     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a315     FE D0 00 01 
0a319     40 00 00 01 
0a31d     AC 00 00 00 
0a321     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $01
0a325     40 F0 00 00 
0a329     00 00 00 00 
0a32d     00 00 00 00 
0a331     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a335     FE D0 00 01 
0a339     40 00 00 00 
0a33d     00 00 00 00 
0a341     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a345     FE D0 00 00 
0a349     00 00 00 00 
0a34d     00 00 00 00 
0a351     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a355     FE D0 00 00 
0a359     A0 00 00 01 
0a35d     FC 30 00 00 
0a361     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $fc, $30, $00, $00, $00, $00, $00, $00
0a365     FE E0 00 00 
0a369     A0 00 00 00 
0a36d     00 00 00 00 
0a371     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a375     00 00 00 00 
0a379     A0 00 00 02 
0a37d     3A 30 00 00 
0a381     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $00, $00, $02, $3a, $30, $00, $00, $00, $00, $00, $00
0a385     FE D0 00 00 
0a389     00 00 00 00 
0a38d     00 00 00 00 
0a391     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a395     FE D0 00 01 
0a399     1D 00 00 00 
0a39d     00 00 00 01 
0a3a1     1D 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $01
0a3a5     40 F0 00 00 
0a3a9     00 00 00 00 
0a3ad     00 00 00 00 
0a3b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3b5     00 00 00 01 
0a3b9     1D 00 00 00 
0a3bd     00 00 00 00 
0a3c1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3c5     FE D0 00 00 
0a3c9     00 00 00 00 
0a3cd     00 00 00 00 
0a3d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3d5     FE D0 00 01 
0a3d9     1D 00 00 00 
0a3dd     00 00 00 00 
0a3e1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3e5     FE E0 00 00 
0a3e9     00 00 00 00 
0a3ed     00 00 00 00 
0a3f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3f5     00 00 00 01 
0a3f9     1D 00 00 00 
0a3fd     00 00 00 00 
0a401     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a405     FE D0 00 00 
0a409     00 00 00 00 
0a40d     00 00 00 00 
0a411     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a415     FE D0 00 01 
0a419     1D 00 00 00 
0a41d     00 00 00 00 
0a421     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a425     40 F0 00 00 
0a429     00 00 00 00 
0a42d     00 00 00 00 
0a431     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a435     FE D0 00 01 
0a439     1D 00 00 00 
0a43d     00 00 00 00 
0a441     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a445     FE D0 00 00 
0a449     00 00 00 00 
0a44d     00 00 00 00 
0a451     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a455     FE D0 00 01 
0a459     1D 00 00 00 
0a45d     00 00 00 00 
0a461     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a465     FE E0 00 00 
0a469     8F 00 00 00 
0a46d     00 00 00 00 
0a471     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a475     00 00 00 01 
0a479     1D 00 00 00 
0a47d     00 00 00 00 
0a481     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a485     FE D0 00 00 
0a489     00 00 00 00 
0a48d     00 00 00 00 
0a491     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a495     FE D0 00 01 
0a499     1D 00 00 00 
0a49d     00 00 00 00 
0a4a1     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a4a5     40 F0 00 00 
0a4a9     00 00 00 00 
0a4ad     00 00 00 00 
0a4b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4b5     00 00 00 01 
0a4b9     1D 00 00 00 
0a4bd     00 00 00 00 
0a4c1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4c5     FE D0 00 00 
0a4c9     00 00 00 00 
0a4cd     00 00 00 00 
0a4d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4d5     FE D0 00 01 
0a4d9     1D 00 00 00 
0a4dd     00 00 00 00 
0a4e1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4e5     FE E0 00 00 
0a4e9     00 00 00 00 
0a4ed     00 00 00 00 
0a4f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4f5     00 00 00 00 
0a4f9     8F 00 00 00 
0a4fd     00 00 00 00 
0a501     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a505     FE D0 00 00 
0a509     00 00 00 00 
0a50d     00 00 00 00 
0a511     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a515     FE D0 00 00 
0a519     8F 00 00 00 
0a51d     00 00 00 00 
0a521     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a525     40 F0 00 00 
0a529     00 00 00 00 
0a52d     00 00 00 00 
0a531     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a535     FE D0 00 01 
0a539     1D 00 00 00 
0a53d     00 00 00 00 
0a541     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a545     FE D0 00 00 
0a549     00 00 00 00 
0a54d     00 00 00 00 
0a551     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a555     FE D0 00 01 
0a559     1D 00 00 00 
0a55d     00 00 00 00 
0a561     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a565     FE E0 00 01 
0a569     1D 00 00 00 
0a56d     00 00 00 00 
0a571     00 00 00 00 | 	byte	$fe, $e0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a575     FE E0 00 01 
0a579     1D 00 00 00 
0a57d     00 00 00 00 
0a581     00 00 00 00 | 	byte	$fe, $e0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a585     00 00 00 00 
0a589     00 00 00 00 
0a58d     00 00 00 00 
0a591     00 00 00 00 | 	byte	$00[16]
0a595     FE D0 00 01 
0a599     53 30 00 01 
0a59d     FC 30 00 00 
0a5a1     FE 60 00 01 | 	byte	$fe, $d0, $00, $01, $53, $30, $00, $01, $fc, $30, $00, $00, $fe, $60, $00, $01
0a5a5     40 F0 00 00 
0a5a9     00 00 00 00 
0a5ad     00 00 00 00 
0a5b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5b5     00 00 00 00 
0a5b9     00 00 00 00 
0a5bd     00 00 00 00 
0a5c1     00 00 00 00 | 	byte	$00[16]
0a5c5     FE D0 00 00 
0a5c9     00 00 00 00 
0a5cd     00 00 00 00 
0a5d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5d5     FE D0 00 00 
0a5d9     00 00 00 00 
0a5dd     00 00 00 00 
0a5e1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5e5     FE D0 00 00 
0a5e9     00 00 00 00 
0a5ed     00 00 00 00 
0a5f1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5f5     00 00 00 01 
0a5f9     AC 00 00 00 
0a5fd     00 00 00 00 
0a601     00 00 00 00 | 	byte	$00, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a605     FE D0 00 00 
0a609     00 00 00 00 
0a60d     00 00 00 00 
0a611     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a615     40 F0 00 00 
0a619     00 00 00 00 
0a61d     00 00 00 00 
0a621     00 00 00 01 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a625     40 F0 00 00 
0a629     00 00 00 00 
0a62d     00 00 00 00 
0a631     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a635     FE D0 00 00 
0a639     00 00 00 00 
0a63d     00 00 00 00 
0a641     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a645     FE D0 00 00 
0a649     00 00 00 00 
0a64d     00 00 00 00 
0a651     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a655     FE D0 00 01 
0a659     FC 00 00 00 
0a65d     00 00 00 00 
0a661     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a665     FE D0 00 00 
0a669     00 00 00 00 
0a66d     00 00 00 00 
0a671     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a675     00 00 00 00 
0a679     00 00 00 00 
0a67d     00 00 00 00 
0a681     00 00 00 00 | 	byte	$00[16]
0a685     FE D0 00 00 
0a689     00 00 00 00 
0a68d     00 00 00 00 
0a691     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a695     40 F0 00 01 
0a699     40 00 00 00 
0a69d     00 00 00 00 
0a6a1     00 00 00 01 | 	byte	$40, $f0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a6a5     40 F0 00 00 
0a6a9     00 00 00 00 
0a6ad     00 00 00 00 
0a6b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6b5     00 00 00 00 
0a6b9     00 00 00 00 
0a6bd     00 00 00 00 
0a6c1     00 00 00 00 | 	byte	$00[16]
0a6c5     FE D0 00 00 
0a6c9     00 00 00 00 
0a6cd     00 00 00 00 
0a6d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6d5     FE D0 00 01 
0a6d9     FC 00 00 00 
0a6dd     00 00 00 00 
0a6e1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6e5     FE D0 00 00 
0a6e9     00 00 00 00 
0a6ed     00 00 00 00 
0a6f1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6f5     00 00 00 01 
0a6f9     53 00 00 00 
0a6fd     00 00 00 00 
0a701     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a705     FE D0 00 00 
0a709     00 00 00 00 
0a70d     00 00 00 00 
0a711     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a715     40 F0 00 00 
0a719     00 00 00 00 
0a71d     00 00 00 00 
0a721     00 00 00 01 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a725     40 F0 00 00 
0a729     00 00 00 00 
0a72d     00 00 00 00 
0a731     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a735     FE D0 00 00 
0a739     00 00 00 00 
0a73d     00 00 00 00 
0a741     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a745     FE D0 00 00 
0a749     00 00 00 00 
0a74d     00 00 00 00 
0a751     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a755     FE D0 00 00 
0a759     00 00 00 00 
0a75d     00 00 00 00 
0a761     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a765     FE D0 00 00 
0a769     00 00 00 00 
0a76d     00 00 00 00 
0a771     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a775     00 00 00 00 
0a779     00 00 00 00 
0a77d     00 00 00 00 
0a781     00 00 00 00 | 	byte	$00[16]
0a785     FE D0 00 00 
0a789     00 00 00 00 
0a78d     00 00 00 00 
0a791     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a795     40 F0 00 01 
0a799     7D 00 00 00 
0a79d     00 00 00 01 
0a7a1     1D 60 00 01 | 	byte	$40, $f0, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $01, $1d, $60, $00, $01
0a7a5     40 F0 00 00 
0a7a9     00 00 00 00 
0a7ad     00 00 00 00 
0a7b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7b5     00 00 00 00 
0a7b9     00 00 00 00 
0a7bd     00 00 00 00 
0a7c1     00 00 00 00 | 	byte	$00[16]
0a7c5     FE D0 00 00 
0a7c9     00 00 00 00 
0a7cd     00 00 00 00 
0a7d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7d5     FE D0 00 00 
0a7d9     00 00 00 00 
0a7dd     00 00 00 00 
0a7e1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7e5     FE D0 00 00 
0a7e9     00 00 00 00 
0a7ed     00 00 00 00 
0a7f1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7f5     00 00 00 01 
0a7f9     1D 00 00 00 
0a7fd     00 00 00 00 
0a801     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a805     FE D0 00 00 
0a809     00 00 00 00 
0a80d     00 00 00 00 
0a811     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a815     40 F0 00 00 
0a819     00 00 00 00 
0a81d     00 00 00 00 
0a821     00 00 00 01 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a825     40 F0 00 00 
0a829     00 00 00 00 
0a82d     00 00 00 00 
0a831     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a835     FE D0 00 00 
0a839     00 00 00 00 
0a83d     00 00 00 00 
0a841     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a845     FE D0 00 00 
0a849     00 00 00 00 
0a84d     00 00 00 00 
0a851     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a855     FE D0 00 01 
0a859     AC 00 00 00 
0a85d     00 00 00 00 
0a861     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a865     FE D0 00 00 
0a869     00 00 00 00 
0a86d     00 00 00 00 
0a871     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a875     00 00 00 01 
0a879     7D 00 00 00 
0a87d     00 00 00 00 
0a881     00 00 00 00 | 	byte	$00, $00, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a885     FE D0 00 00 
0a889     00 00 00 00 
0a88d     00 00 00 00 
0a891     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a895     40 F0 00 00 
0a899     00 00 00 02 
0a89d     3A 30 00 00 
0a8a1     00 00 00 01 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $02, $3a, $30, $00, $00, $00, $00, $00, $01
0a8a5     40 F0 00 00 
0a8a9     00 00 00 00 
0a8ad     00 00 00 00 
0a8b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8b5     00 00 00 00 
0a8b9     00 00 00 00 
0a8bd     00 00 00 00 
0a8c1     00 00 00 00 | 	byte	$00[16]
0a8c5     FE D0 00 00 
0a8c9     00 00 00 00 
0a8cd     00 00 00 00 
0a8d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8d5     FE D0 00 00 
0a8d9     00 00 00 00 
0a8dd     00 00 00 00 
0a8e1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8e5     FE D0 00 00 
0a8e9     00 00 00 00 
0a8ed     00 00 00 00 
0a8f1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8f5     00 00 00 00 
0a8f9     00 00 00 00 
0a8fd     00 00 00 00 
0a901     00 00 00 00 | 	byte	$00[16]
0a905     FE D0 00 00 
0a909     00 00 00 00 
0a90d     00 00 00 00 
0a911     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a915     40 F0 00 00 
0a919     00 00 00 00 
0a91d     00 00 00 00 
0a921     00 00 00 01 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0a925     40 F0 00 00 
0a929     00 00 00 00 
0a92d     00 00 00 00 
0a931     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a935     FE D0 00 00 
0a939     00 00 00 00 
0a93d     00 00 00 00 
0a941     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a945     FE D0 00 00 
0a949     00 00 00 00 
0a94d     00 00 00 00 
0a951     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a955     FE D0 00 00 
0a959     00 00 00 00 
0a95d     00 00 00 00 
0a961     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a965     FE D0 00 00 
0a969     00 00 00 00 
0a96d     00 00 00 00 
0a971     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a975     FE D0 00 00 
0a979     00 00 00 00 
0a97d     00 00 00 00 
0a981     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a985     00 00 00 00 
0a989     00 00 00 00 
0a98d     00 00 00 00 
0a991     00 00 00    | 	byte	$00[15]
0a994     01 40 F0 00 
0a998     01 7D 30 00 
0a99c     01 FC 30 00 
0a9a0     01 7D 60 00 | 	byte	$01, $40, $f0, $00, $01, $7d, $30, $00, $01, $fc, $30, $00, $01, $7d, $60, $00
0a9a4     01 40 F0 00 
0a9a8     00 00 00 00 
0a9ac     00 00 00 00 
0a9b0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9b4     00 00 00 00 
0a9b8     01 1D 00 00 
0a9bc     00 00 00 00 
0a9c0     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9c4     00 FE D0 00 
0a9c8     00 00 00 00 
0a9cc     00 00 00 00 
0a9d0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9d4     00 FE D0 00 
0a9d8     00 FE 00 00 
0a9dc     00 00 00 00 
0a9e0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9e4     00 FE D0 00 
0a9e8     00 00 00 00 
0a9ec     00 00 00 00 
0a9f0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9f4     00 00 00 00 
0a9f8     01 7D 00 00 
0a9fc     00 00 00 00 
0aa00     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa04     00 FE D0 00 
0aa08     00 00 00 00 
0aa0c     00 00 00 00 
0aa10     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa14     01 40 F0 00 
0aa18     01 1D 00 00 
0aa1c     00 00 00 00 
0aa20     00 00 00 00 | 	byte	$01, $40, $f0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa24     01 40 F0 00 
0aa28     00 00 00 00 
0aa2c     00 00 00 00 
0aa30     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa34     00 FE D0 00 
0aa38     00 FE 00 00 
0aa3c     00 00 00 00 
0aa40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa44     00 FE D0 00 
0aa48     00 00 00 00 
0aa4c     00 00 00 00 
0aa50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa54     00 FE D0 00 
0aa58     01 7D 00 00 
0aa5c     00 00 00 00 
0aa60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa64     00 FE D0 00 
0aa68     00 00 00 00 
0aa6c     00 00 00 00 
0aa70     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa74     00 00 00 00 
0aa78     01 1D 00 00 
0aa7c     00 00 00 00 
0aa80     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa84     00 FE D0 00 
0aa88     00 00 00 00 
0aa8c     00 00 00 00 
0aa90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa94     01 40 F0 00 
0aa98     00 FE 00 00 
0aa9c     00 00 00 00 
0aaa0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aaa4     01 40 F0 00 
0aaa8     00 00 00 00 
0aaac     00 00 00 00 
0aab0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aab4     00 00 00 00 
0aab8     01 7D 00 00 
0aabc     00 00 00 00 
0aac0     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aac4     00 FE D0 00 
0aac8     00 00 00 00 
0aacc     00 00 00 00 
0aad0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aad4     00 FE D0 00 
0aad8     01 1D 00 00 
0aadc     00 00 00 00 
0aae0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aae4     00 FE D0 00 
0aae8     00 00 00 00 
0aaec     00 00 00 00 
0aaf0     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aaf4     00 00 00 00 
0aaf8     00          | 	byte	$00[5]
0aaf9     FE 00 00 00 
0aafd     00 00 00 00 
0ab01     00 00 00 00 
0ab05     FE D0 00 00 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
0ab09     00 00 00 00 
0ab0d     00 00 00 00 
0ab11     00 00 00    | 	byte	$00[11]
0ab14     01 40 F0 00 
0ab18     01 7D 00 00 
0ab1c     00 00 00 00 
0ab20     00 00 00 00 | 	byte	$01, $40, $f0, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab24     01 40 F0 00 
0ab28     00 00 00 00 
0ab2c     00 00 00 00 
0ab30     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab34     00 FE D0 00 
0ab38     01 1D 00 00 
0ab3c     00 00 00 00 
0ab40     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab44     00 FE D0 00 
0ab48     00 00 00 00 
0ab4c     00 00 00 00 
0ab50     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab54     00 FE D0 00 
0ab58     00 FE 00 00 
0ab5c     00 00 00 00 
0ab60     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab64     00 FE D0 00 
0ab68     00 00 00 00 
0ab6c     00 00 00 00 
0ab70     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab74     00 00 00 00 
0ab78     01 7D 00 00 
0ab7c     00 00 00 00 
0ab80     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab84     00 FE D0 00 
0ab88     00 00 00 00 
0ab8c     00 00 00 00 
0ab90     00 00 00 00 | 	byte	$00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab94     01 40 F0 00 
0ab98     01 1D 00 00 
0ab9c     00 00 00 00 
0aba0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aba4     01 40 F0 00 
0aba8     00 00 00 00 
0abac     00 00 00 00 
0abb0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abb4     00 00 00 00 
0abb8     00          | 	byte	$00[5]
0abb9     FE 00 00 00 
0abbd     00 00 00 00 
0abc1     00 00 00 00 
0abc5     FE D0 00 00 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00
0abc9     00 00 00 00 
0abcd     00 00 00 00 
0abd1     00 00 00 00 | 	byte	$00[12]
0abd5     FE D0 00 01 
0abd9     7D 00 00 00 
0abdd     00 00 00 00 
0abe1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abe5     A0 E0 00 00 
0abe9     00 00 00 00 
0abed     00 00 00 00 
0abf1     00 00 00 00 | 	byte	$a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abf5     00 00 00 01 
0abf9     1D 00 00 00 
0abfd     00 00 00 00 
0ac01     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac05     FE D0 00 00 
0ac09     00 00 00 00 
0ac0d     00 00 00 00 
0ac11     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ac15     40 F0 00 00 
0ac19     FE 00 00 00 
0ac1d     00 00 00 00 
0ac21     00 00 00 01 | 	byte	$40, $f0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ac25     40 F0 00 00 
0ac29     00 00 00 00 
0ac2d     00 00 00 00 
0ac31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac35     FE D0 00 01 
0ac39     7D 00 00 00 
0ac3d     00 00 00 00 
0ac41     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac45     FE D0 00 00 
0ac49     00 00 00 00 
0ac4d     00 00 00 00 
0ac51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac55     FE D0 00 01 
0ac59     1D 00 00 00 
0ac5d     00 00 00 00 
0ac61     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac65     A0 E0 00 00 
0ac69     00 00 00 00 
0ac6d     00 00 00 00 
0ac71     00 00 00 00 | 	byte	$a0, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac75     A0 E0 00 00 
0ac79     FE 00 00 00 
0ac7d     00 00 00 00 
0ac81     00 00 00 00 | 	byte	$a0, $e0, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac85     00 00 00 00 
0ac89     00 00 00 00 
0ac8d     00 00 00 00 
0ac91     00 00 00    | 	byte	$00[15]
0ac94     01 40 F0 00 
0ac98     01 7D 00 00 
0ac9c     00 00 00 00 
0aca0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $01, $7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aca4     01 40 F0 00 
0aca8     01 1D 00 00 
0acac     00 00 00 00 
0acb0     00 00 00 00 | 	byte	$01, $40, $f0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acb4     00 00 00 00 
0acb8     00          | 	byte	$00[5]
0acb9     FE 00 00 00 
0acbd     00 00 00 00 
0acc1     00 00 00 00 
0acc5     FE D0 00 01 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $01
0acc9     7D 00 00 00 
0accd     00 00 00 00 
0acd1     00 00 00 01 
0acd5     40 F0 00 01 | 	byte	$7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $f0, $00, $01
0acd9     1D 00 00 00 
0acdd     00 00 00 00 
0ace1     00 00 00 00 
0ace5     A0 E0 00 00 | 	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $e0, $00, $00
0ace9     FE 00 00 00 
0aced     00 00 00 00 
0acf1     00 00 00 00 
0acf5     00 00 00 01 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0acf9     7D 00 00 00 
0acfd     00 00 00 00 
0ad01     00 00 00 00 
0ad05     FE D0 00 01 | 	byte	$7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $01
0ad09     1D 00 00 00 
0ad0d     00 00 00 00 
0ad11     00 00 00 01 
0ad15     40 F0 00 00 | 	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $f0, $00, $00
0ad19     FE 00 00 00 
0ad1d     00 00 00 00 
0ad21     00 00 00 01 
0ad25     40 F0 00 01 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $f0, $00, $01
0ad29     7D 00 00 00 
0ad2d     00 00 00 00 
0ad31     00 00 00 00 
0ad35     00 00 00 01 | 	byte	$7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad39     1D 00 00 00 
0ad3d     00 00 00 00 
0ad41     00 00 00 01 
0ad45     40 F0 00 00 | 	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $f0, $00, $00
0ad49     FE 00 00 00 
0ad4d     00 00 00 00 
0ad51     00 00 00 00 
0ad55     A0 E0 00 01 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $e0, $00, $01
0ad59     7D 00 00 00 
0ad5d     00 00 00 00 
0ad61     00 00 00 00 
0ad65     00 00 00 01 | 	byte	$7d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad69     1D 00 00 00 
0ad6d     00 00 00 00 
0ad71     00 00 00 00 
0ad75     A0 E0 00 00 | 	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $e0, $00, $00
0ad79     FE 00 00 00 
0ad7d     00 00 00 00 
0ad81     00 00 00 00 
0ad85     00 00 00 00 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad89     D6 00 00 00 
0ad8d     00 00 00 00 
0ad91     00 00 00 00 
0ad95     A0 E0 00 01 | 	byte	$d6, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $e0, $00, $01
0ad99     40 10 00 01 
0ad9d     40 30 00 01 
0ada1     40 60 00 01 
0ada5     40 F0 00 00 | 	byte	$40, $10, $00, $01, $40, $30, $00, $01, $40, $60, $00, $01, $40, $f0, $00, $00
0ada9     00 00 00 00 
0adad     00 00 00 00 
0adb1     00 00 00 00 
0adb5     00 00 00    | 	byte	$00[15]
0adb8     01 40 00 00 
0adbc     00 00 00 00 
0adc0     00 00 00 00 
0adc4     00 FE D0 00 | 	byte	$01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $d0, $00
0adc8     00 00 00 00 
0adcc     00 00 00 00 
0add0     00 00 00 00 
0add4     00          | 	byte	$00[13]
0add5     FE D0 00 01 
0add9     40 00 00 01 
0addd     53 00 00 00 
0ade1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
0ade5     FE E0 00 00 
0ade9     00 00 00 00 
0aded     00 00 00 00 
0adf1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adf5     00 00 00 01 
0adf9     40 00 00 00 
0adfd     00 00 00 00 
0ae01     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae05     FE D0 00 00 
0ae09     00 00 00 00 
0ae0d     00 00 00 00 
0ae11     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae15     FE D0 00 01 
0ae19     40 00 00 01 
0ae1d     AC 00 00 00 
0ae21     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $01
0ae25     40 F0 00 00 
0ae29     00 00 00 00 
0ae2d     00 00 00 00 
0ae31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae35     FE D0 00 01 
0ae39     40 00 00 00 
0ae3d     00 00 00 00 
0ae41     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae45     FE D0 00 00 
0ae49     00 00 00 00 
0ae4d     00 00 00 00 
0ae51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae55     FE D0 00 00 
0ae59     A0 00 00 01 
0ae5d     FC 00 00 00 
0ae61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
0ae65     FE E0 00 00 
0ae69     A0 00 00 00 
0ae6d     00 00 00 00 
0ae71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae75     00 00 00 01 
0ae79     40 00 00 00 
0ae7d     00 00 00 00 
0ae81     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae85     FE D0 00 00 
0ae89     00 00 00 00 
0ae8d     00 00 00 00 
0ae91     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae95     FE D0 00 01 
0ae99     40 00 00 01 
0ae9d     40 00 00 00 
0aea1     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $01
0aea5     40 F0 00 00 
0aea9     A0 00 00 00 
0aead     00 00 00 00 
0aeb1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aeb5     00 00 00 00 
0aeb9     A0 00 00 00 
0aebd     00 00 00 00 
0aec1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aec5     FE D0 00 00 
0aec9     00 00 00 00 
0aecd     00 00 00 00 
0aed1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aed5     FE D0 00 00 
0aed9     A0 00 00 01 
0aedd     53 00 00 00 
0aee1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
0aee5     FE E0 00 00 
0aee9     00 00 00 00 
0aeed     00 00 00 00 
0aef1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aef5     00 00 00 01 
0aef9     40 00 00 00 
0aefd     00 00 00 00 
0af01     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af05     FE D0 00 00 
0af09     00 00 00 00 
0af0d     00 00 00 00 
0af11     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af15     FE D0 00 01 
0af19     40 00 00 01 
0af1d     AC 00 00 00 
0af21     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $01, $ac, $00, $00, $00, $00, $00, $00, $01
0af25     40 F0 00 00 
0af29     00 00 00 00 
0af2d     00 00 00 00 
0af31     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af35     FE D0 00 01 
0af39     40 00 00 00 
0af3d     00 00 00 00 
0af41     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af45     FE D0 00 00 
0af49     00 00 00 00 
0af4d     00 00 00 00 
0af51     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af55     FE D0 00 00 
0af59     A0 00 00 01 
0af5d     FC 30 00 00 
0af61     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $a0, $00, $00, $01, $fc, $30, $00, $00, $00, $00, $00, $00
0af65     FE E0 00 00 
0af69     A0 00 00 00 
0af6d     00 00 00 00 
0af71     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af75     00 00 00 00 
0af79     A0 00 00 02 
0af7d     3A 30 00 00 
0af81     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $00, $00, $02, $3a, $30, $00, $00, $00, $00, $00, $00
0af85     FE D0 00 00 
0af89     00 00 00 00 
0af8d     00 00 00 00 
0af91     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af95     FE D0 00 01 
0af99     1D 00 00 00 
0af9d     00 00 00 01 
0afa1     1D 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $01, $1d, $00, $00, $01
0afa5     40 F0 00 00 
0afa9     00 00 00 00 
0afad     00 00 00 00 
0afb1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afb5     00 00 00 01 
0afb9     1D 00 00 00 
0afbd     00 00 00 00 
0afc1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afc5     FE D0 00 00 
0afc9     00 00 00 00 
0afcd     00 00 00 00 
0afd1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afd5     FE D0 00 01 
0afd9     1D 00 00 00 
0afdd     00 00 00 00 
0afe1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afe5     FE E0 00 00 
0afe9     00 00 00 00 
0afed     00 00 00 00 
0aff1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aff5     00 00 00 01 
0aff9     1D 00 00 00 
0affd     00 00 00 00 
0b001     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b005     FE D0 00 00 
0b009     00 00 00 00 
0b00d     00 00 00 00 
0b011     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b015     FE D0 00 01 
0b019     1D 00 00 00 
0b01d     00 00 00 00 
0b021     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b025     40 F0 00 00 
0b029     00 00 00 00 
0b02d     00 00 00 00 
0b031     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b035     FE D0 00 01 
0b039     1D 00 00 00 
0b03d     00 00 00 00 
0b041     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b045     FE D0 00 00 
0b049     00 00 00 00 
0b04d     00 00 00 00 
0b051     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b055     FE D0 00 01 
0b059     1D 00 00 00 
0b05d     00 00 00 00 
0b061     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b065     FE E0 00 00 
0b069     8F 00 00 00 
0b06d     00 00 00 00 
0b071     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b075     00 00 00 01 
0b079     1D 00 00 00 
0b07d     00 00 00 00 
0b081     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b085     FE D0 00 00 
0b089     00 00 00 00 
0b08d     00 00 00 00 
0b091     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b095     FE D0 00 01 
0b099     1D 00 00 00 
0b09d     00 00 00 00 
0b0a1     00 00 00 01 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b0a5     40 F0 00 00 
0b0a9     00 00 00 00 
0b0ad     00 00 00 00 
0b0b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0b5     00 00 00 01 
0b0b9     1D 00 00 00 
0b0bd     00 00 00 00 
0b0c1     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0c5     FE D0 00 00 
0b0c9     00 00 00 00 
0b0cd     00 00 00 00 
0b0d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0d5     FE D0 00 01 
0b0d9     1D 00 00 02 
0b0dd     A6 30 00 00 
0b0e1     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $02, $a6, $30, $00, $00, $00, $00, $00, $00
0b0e5     FE E0 00 00 
0b0e9     00 00 00 00 
0b0ed     00 00 00 00 
0b0f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0f5     00 00 00 00 
0b0f9     8F 00 00 02 
0b0fd     3A 30 00 00 
0b101     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $00, $00, $02, $3a, $30, $00, $00, $00, $00, $00, $00
0b105     FE D0 00 00 
0b109     00 00 00 00 
0b10d     00 00 00 00 
0b111     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b115     FE D0 00 00 
0b119     8F 00 00 00 
0b11d     00 00 00 00 
0b121     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $8f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b125     40 F0 00 00 
0b129     00 00 00 00 
0b12d     00 00 00 00 
0b131     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b135     FE D0 00 01 
0b139     1D 00 00 00 
0b13d     00 00 00 00 
0b141     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b145     FE D0 00 00 
0b149     00 00 00 00 
0b14d     00 00 00 00 
0b151     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b155     FE D0 00 01 
0b159     1D 00 00 00 
0b15d     00 00 00 00 
0b161     00 00 00 00 | 	byte	$fe, $d0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b165     FE E0 00 01 
0b169     1D 00 00 00 
0b16d     00 00 00 00 
0b171     00 00 00 00 | 	byte	$fe, $e0, $00, $01, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b175     FE E0 00 01 
0b179     1D 00 00 01 
0b17d     AC 30 00 00 
0b181     00 00 00 00 | 	byte	$fe, $e0, $00, $01, $1d, $00, $00, $01, $ac, $30, $00, $00, $00, $00, $00, $00
0b185     00 00 00 00 
0b189     00 00 00 00 
0b18d     00 00 00 00 
0b191     00 00 00 00 | 	byte	$00[16]
0b195     FE D0 00 00 
0b199     FE 10 00 01 
0b19d     FC 30 00 01 
0b1a1     FC 60 00 01 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $01, $fc, $30, $00, $01, $fc, $60, $00, $01
0b1a5     40 F0 00 00 
0b1a9     00 00 00 00 
0b1ad     00 00 00 00 
0b1b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1b5     00 00 00 00 
0b1b9     FE 10 00 00 
0b1bd     00 00 00 00 
0b1c1     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1c5     FE D0 00 00 
0b1c9     00 00 00 00 
0b1cd     00 00 00 00 
0b1d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1d5     FE D0 00 00 
0b1d9     FE 10 00 00 
0b1dd     00 00 00 00 
0b1e1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1e5     FE E0 00 00 
0b1e9     00 00 00 00 
0b1ed     00 00 00 00 
0b1f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1f5     00 00 00 00 
0b1f9     FE 10 00 00 
0b1fd     00 00 00 00 
0b201     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b205     FE D0 00 00 
0b209     00 00 00 00 
0b20d     00 00 00 00 
0b211     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b215     FE D0 00 00 
0b219     FE 10 00 00 
0b21d     00 00 00 00 
0b221     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b225     40 F0 00 00 
0b229     00 00 00 00 
0b22d     00 00 00 00 
0b231     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b235     FE D0 00 00 
0b239     FE 10 00 00 
0b23d     00 00 00 00 
0b241     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b245     FE D0 00 00 
0b249     00 00 00 00 
0b24d     00 00 00 00 
0b251     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b255     FE D0 00 00 
0b259     FE 10 00 00 
0b25d     00 00 00 00 
0b261     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b265     FE E0 00 00 
0b269     7F 10 00 00 
0b26d     00 00 00 00 
0b271     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b275     00 00 00 00 
0b279     FE 10 00 00 
0b27d     00 00 00 00 
0b281     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b285     FE D0 00 00 
0b289     00 00 00 00 
0b28d     00 00 00 00 
0b291     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b295     FE D0 00 00 
0b299     FE 10 00 00 
0b29d     00 00 00 00 
0b2a1     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b2a5     40 F0 00 00 
0b2a9     00 00 00 00 
0b2ad     00 00 00 00 
0b2b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2b5     00 00 00 00 
0b2b9     FE 10 00 00 
0b2bd     00 00 00 00 
0b2c1     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2c5     FE D0 00 00 
0b2c9     00 00 00 00 
0b2cd     00 00 00 00 
0b2d1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2d5     FE D0 00 00 
0b2d9     7F 10 00 00 
0b2dd     00 00 00 00 
0b2e1     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2e5     FE E0 00 00 
0b2e9     7F 10 00 00 
0b2ed     00 00 00 00 
0b2f1     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2f5     00 00 00 00 
0b2f9     7F 10 00 00 
0b2fd     00 00 00 00 
0b301     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b305     FE D0 00 00 
0b309     00 00 00 00 
0b30d     00 00 00 00 
0b311     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b315     FE D0 00 00 
0b319     FE 10 00 00 
0b31d     00 00 00 00 
0b321     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b325     40 F0 00 00 
0b329     00 00 00 00 
0b32d     00 00 00 00 
0b331     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b335     FE D0 00 00 
0b339     FE 10 00 00 
0b33d     00 00 00 00 
0b341     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b345     FE D0 00 00 
0b349     00 00 00 00 
0b34d     00 00 00 00 
0b351     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b355     FE D0 00 00 
0b359     FE 10 00 00 
0b35d     00 00 00 00 
0b361     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b365     FE E0 00 00 
0b369     00 00 00 00 
0b36d     00 00 00 00 
0b371     00 00 00 00 | 	byte	$fe, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b375     00 00 00 00 
0b379     FE 10 00 00 
0b37d     00 00 00 00 
0b381     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b385     FE D0 00 00 
0b389     00 00 00 00 
0b38d     00 00 00 00 
0b391     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b395     FE D0 00 00 
0b399     FE 10 00 00 
0b39d     00 00 00 00 
0b3a1     00 00 00 01 | 	byte	$fe, $d0, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0b3a5     40 F0 00 00 
0b3a9     00 00 00 00 
0b3ad     00 00 00 00 
0b3b1     00 00 00 00 | 	byte	$40, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3b5     00 00 00 00 
0b3b9     FE 10 00 00 
0b3bd     00 00 00 00 
0b3c1     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3c5     00 00 00 00 
0b3c9     FE 10 00 00 
0b3cd     00 00 00 00 
0b3d1     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3d5     00 00 00 00 
0b3d9     7F 10 00 00 
0b3dd     00 00 00 00 
0b3e1     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3e5     00 00 00 00 
0b3e9     00 00 00 00 
0b3ed     00 00 00 00 
0b3f1     00 00 00 00 
0b3f5     00 00 00 00 | 	byte	$00[20]
0b3f9     FE 10 00 00 
0b3fd     00 00 00 00 
0b401     00 00 00 00 
0b405     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b409     00 00 00 00 
0b40d     00 00 00 00 
0b411     00 00 00 00 
0b415     00 00 00 00 | 	byte	$00[16]
0b419     FE 10 00 00 
0b41d     00 00 00 00 
0b421     00 00 00 00 
0b425     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b429     00 00 00 00 
0b42d     00 00 00 00 
0b431     00 00 00 00 
0b435     00 00 00 00 | 	byte	$00[16]
0b439     FE 10 00 00 
0b43d     00 00 00 00 
0b441     00 00 00 00 
0b445     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b449     00 00 00 00 
0b44d     00 00 00 00 
0b451     00 00 00 00 
0b455     00 00 00 00 | 	byte	$00[16]
0b459     FE 10 00 00 
0b45d     00 00 00 00 
0b461     00 00 00 00 
0b465     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b469     00 00 00 00 
0b46d     00 00 00 00 
0b471     00 00 00 00 
0b475     00 00 00 00 | 	byte	$00[16]
0b479     FE 10 00 00 
0b47d     00 10 00 00 
0b481     00 10 00 00 
0b485     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00
0b489     00 00 00 00 
0b48d     00 00 00 00 
0b491     00 00 00 00 
0b495     00 00 00 00 | 	byte	$00[16]
0b499     7F 10 00 00 
0b49d     00 00 00 00 
0b4a1     00 00 00 00 
0b4a5     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4a9     00 00 00 00 
0b4ad     00 00 00 00 
0b4b1     00 00 00 00 
0b4b5     00 00 00 00 | 	byte	$00[16]
0b4b9     FE 10 00 00 
0b4bd     00 00 00 00 
0b4c1     00 00 00 00 
0b4c5     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4c9     00 00 00 00 
0b4cd     00 00 00 00 
0b4d1     00 00 00 00 
0b4d5     00 00 00 00 | 	byte	$00[16]
0b4d9     7F 10 00 00 
0b4dd     00 00 00 00 
0b4e1     00 00 00 00 
0b4e5     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4e9     00 00 00 00 
0b4ed     00 00 00 00 
0b4f1     00 00 00 00 
0b4f5     00 00 00 00 | 	byte	$00[16]
0b4f9     FE 10 00 00 
0b4fd     00 00 00 00 
0b501     00 00 00 00 
0b505     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b509     FE 10 00 00 
0b50d     00 00 00 00 
0b511     00 00 00 00 
0b515     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b519     FE 10 00 00 
0b51d     00 00 00 00 
0b521     00 00 00 00 
0b525     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b529     00 00 00 00 
0b52d     00 00 00 00 
0b531     00 00 00 00 
0b535     00 00 00 00 | 	byte	$00[16]
0b539     FE 10 00 00 
0b53d     00 00 00 00 
0b541     00 00 00 00 
0b545     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b549     00 00 00 00 
0b54d     00 00 00 00 
0b551     00 00 00 00 
0b555     00 00 00 00 | 	byte	$00[16]
0b559     FE 10 00 00 
0b55d     00 00 00 00 
0b561     00 00 00 00 
0b565     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b569     00 00 00 00 
0b56d     00 00 00 00 
0b571     00 00 00 00 
0b575     00 00 00 00 | 	byte	$00[16]
0b579     FE 10 00 00 
0b57d     00 00 00 00 
0b581     00 00 00 00 
0b585     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b589     00 00 00 00 
0b58d     00 00 00 00 
0b591     00 00 00 00 
0b595     00 00 00 00 
0b599     00 00 00    | 	byte	$00[19]
0b59c     2B D5 C0 BE 
0b5a0     E4 E5 E7 E9 
0b5a4     EB EE F0 F2 
0b5a8     F4 F4 EC DA | 	byte	$2b, $d5, $c0, $be, $e4, $e5, $e7, $e9, $eb, $ee, $f0, $f2, $f4, $f4, $ec, $da
0b5ac     D3 D4 D8 DB 
0b5b0     DE E0 E2 E4 
0b5b4     E7 E9 EB ED 
0b5b8     F0 F3 F6 F9 | 	byte	$d3, $d4, $d8, $db, $de, $e0, $e2, $e4, $e7, $e9, $eb, $ed, $f0, $f3, $f6, $f9
0b5bc     FC FF 03 05 
0b5c0     08 0B 0D 0F 
0b5c4     10 11 11 11 
0b5c8     10 0F 0E 0C | 	byte	$fc, $ff, $03, $05, $08, $0b, $0d, $0f, $10, $11, $11, $11, $10, $0f, $0e, $0c
0b5cc     0B 0C 12 1E 
0b5d0     36 4B 38 0D 
0b5d4     07 0E 12 14 
0b5d8     16 16 15 13 | 	byte	$0b, $0c, $12, $1e, $36, $4b, $38, $0d, $07, $0e, $12, $14, $16, $16, $15, $13
0b5dc     0E 08 04 00 
0b5e0     FB F8 FD 04 
0b5e4     08 0B 11 1B 
0b5e8     29 3A 4A 46 | 	byte	$0e, $08, $04, $00, $fb, $f8, $fd, $04, $08, $0b, $11, $1b, $29, $3a, $4a, $46
0b5ec     38 38 40 48 
0b5f0     4E 53 56 58 
0b5f4     57 54 51 4F 
0b5f8     4F 4F 4E 4E | 	byte	$38, $38, $40, $48, $4e, $53, $56, $58, $57, $54, $51, $4f, $4f, $4f, $4e, $4e
0b5fc     4D 4D 4D 4C 
0b600     4D 4E 4F 50 
0b604     50 52 53 53 
0b608     54 54 54 53 | 	byte	$4d, $4d, $4d, $4c, $4d, $4e, $4f, $50, $50, $52, $53, $53, $54, $54, $54, $53
0b60c     51 4E 4A 43 
0b610     2F 03 CD BA 
0b614     BA BB BB BD 
0b618     C0 C5 CD D4 | 	byte	$51, $4e, $4a, $43, $2f, $03, $cd, $ba, $ba, $bb, $bb, $bd, $c0, $c5, $cd, $d4
0b61c     D2 C7 C2 C4 
0b620     C7 CA CC CD 
0b624     CF D1 D3 D4 
0b628     D4 CD BB AA | 	byte	$d2, $c7, $c2, $c4, $c7, $ca, $cc, $cd, $cf, $d1, $d3, $d4, $d4, $cd, $bb, $aa
0b62c     A5 AC B8 C3 
0b630     CF DB E9 F8 
0b634     07 0F 12 16 
0b638     1E 26 2D 31 | 	byte	$a5, $ac, $b8, $c3, $cf, $db, $e9, $f8, $07, $0f, $12, $16, $1e, $26, $2d, $31
0b63c     35 38 39 3A 
0b640     3A 3A 39 38 
0b644     38 37 37 36 
0b648     37 38 38 39 | 	byte	$35, $38, $39, $3a, $3a, $3a, $39, $38, $38, $37, $37, $36, $37, $38, $38, $39
0b64c     37 33 29 19 
0b650     07 FF 0A 1E 
0b654     2C 30 2E 2A 
0b658     25 1F 15 06 | 	byte	$37, $33, $29, $19, $07, $ff, $0a, $1e, $2c, $30, $2e, $2a, $25, $1f, $15, $06
0b65c     F4 E7 E4 E3 
0b660     E2 E2 E0 E0 
0b664     DF DD DA D4 
0b668     CB C4 C2 CA | 	byte	$f4, $e7, $e4, $e3, $e2, $e2, $e0, $e0, $df, $dd, $da, $d4, $cb, $c4, $c2, $ca
0b66c     D5 DC DE DE 
0b670     DD DD DC DA 
0b674     D3 CD C9 CA 
0b678     CE D3 D7 DB | 	byte	$d5, $dc, $de, $de, $dd, $dd, $dc, $da, $d3, $cd, $c9, $ca, $ce, $d3, $d7, $db
0b67c     DF E3 E8 EC 
0b680     EF F1 F4 F6 
0b684     F7 F8 F9 F9 
0b688     FA FA F9 F9 | 	byte	$df, $e3, $e8, $ec, $ef, $f1, $f4, $f6, $f7, $f8, $f9, $f9, $fa, $fa, $f9, $f9
0b68c     F8 F6 F2 E4 
0b690     C8 A5 8E 86 
0b694     88 8D 92 96 
0b698     99 99 98 99 | 	byte	$f8, $f6, $f2, $e4, $c8, $a5, $8e, $86, $88, $8d, $92, $96, $99, $99, $98, $99
0b69c     9E A9 B3 BA 
0b6a0     BE C2 C5 C6 
0b6a4     C8 CA CA C8 
0b6a8     BF B0 A0 98 | 	byte	$9e, $a9, $b3, $ba, $be, $c2, $c5, $c6, $c8, $ca, $ca, $c8, $bf, $b0, $a0, $98
0b6ac     99 9E A5 AB 
0b6b0     AF B4 B8 BB 
0b6b4     BF C4 CD D4 
0b6b8     DA DF E3 E6 | 	byte	$99, $9e, $a5, $ab, $af, $b4, $b8, $bb, $bf, $c4, $cd, $d4, $da, $df, $e3, $e6
0b6bc     E9 ED F1 F4 
0b6c0     F7 FA FC FF 
0b6c4     01 04 07 09 
0b6c8     0D 11 17 1D | 	byte	$e9, $ed, $f1, $f4, $f7, $fa, $fc, $ff, $01, $04, $07, $09, $0d, $11, $17, $1d
0b6cc     27 32 3D 47 
0b6d0     4A 45 38 2C 
0b6d4     21 19 16 14 
0b6d8     12 10 0A 01 | 	byte	$27, $32, $3d, $47, $4a, $45, $38, $2c, $21, $19, $16, $14, $12, $10, $0a, $01
0b6dc     F8 F3 F4 F8 
0b6e0     FE 04 0C 14 
0b6e4     1E 28 35 3F 
0b6e8     46 49 48 44 | 	byte	$f8, $f3, $f4, $f8, $fe, $04, $0c, $14, $1e, $28, $35, $3f, $46, $49, $48, $44
0b6ec     41 41 43 45 
0b6f0     47 4A 4B 49 
0b6f4     46 43 43 45 
0b6f8     48 4B 4F 52 | 	byte	$41, $41, $43, $45, $47, $4a, $4b, $49, $46, $43, $43, $45, $48, $4b, $4f, $52
0b6fc     54 56 58 5A 
0b700     5C 5E 5F 60 
0b704     61 61 62 61 
0b708     5F 5E 5C 58 | 	byte	$54, $56, $58, $5a, $5c, $5e, $5f, $60, $61, $61, $62, $61, $5f, $5e, $5c, $58
0b70c     53 4B 3E 2C 
0b710     15 00 EE E4 
0b714     E0 E0 E1 E4 
0b718     E8 EB EF F0 | 	byte	$53, $4b, $3e, $2c, $15, $00, $ee, $e4, $e0, $e0, $e1, $e4, $e8, $eb, $ef, $f0
0b71c     EE EA E6 E4 
0b720     E3 E3 E3 E4 
0b724     E4 E4 E1 DC 
0b728     D5 CE C9 C9 | 	byte	$ee, $ea, $e6, $e4, $e3, $e3, $e3, $e4, $e4, $e4, $e1, $dc, $d5, $ce, $c9, $c9
0b72c     CD D5 DE E8 
0b730     F1 FC 06 0F 
0b734     15 1A 1D 21 
0b738     25 2A 2F 32 | 	byte	$cd, $d5, $de, $e8, $f1, $fc, $06, $0f, $15, $1a, $1d, $21, $25, $2a, $2f, $32
0b73c     35 39 3B 3D 
0b740     3F 40 41 41 
0b744     41 41 40 3E 
0b748     3C 39 34 2E | 	byte	$35, $39, $3b, $3d, $3f, $40, $41, $41, $41, $41, $40, $3e, $3c, $39, $34, $2e
0b74c     28 21 1A 15 
0b750     13 15 1B 21 
0b754     28 2C 2E 2E 
0b758     2C 26 1D 14 | 	byte	$28, $21, $1a, $15, $13, $15, $1b, $21, $28, $2c, $2e, $2e, $2c, $26, $1d, $14
0b75c     0A 02 FB F7 
0b760     F3 EF EB E7 
0b764     E3 DE DA D7 
0b768     D6 D9 DD E3 | 	byte	$0a, $02, $fb, $f7, $f3, $ef, $eb, $e7, $e3, $de, $da, $d7, $d6, $d9, $dd, $e3
0b76c     E7 EB ED EE 
0b770     EE ED EA E6 
0b774     E3 E0 DF E0 
0b778     E1 E3 E5 E8 | 	byte	$e7, $eb, $ed, $ee, $ee, $ed, $ea, $e6, $e3, $e0, $df, $e0, $e1, $e3, $e5, $e8
0b77c     EA ED EF F1 
0b780     F3 F4 F6 F8 
0b784     F9 FA FA FB 
0b788     FA F9 F8 F5 | 	byte	$ea, $ed, $ef, $f1, $f3, $f4, $f6, $f8, $f9, $fa, $fa, $fb, $fa, $f9, $f8, $f5
0b78c     EF E6 DB CA 
0b790     BB AB 9F 99 
0b794     95 94 94 95 
0b798     97 99 9B 9F | 	byte	$ef, $e6, $db, $ca, $bb, $ab, $9f, $99, $95, $94, $94, $95, $97, $99, $9b, $9f
0b79c     A4 AA B1 B7 
0b7a0     BC C1 C4 C5 
0b7a4     C5 C2 BD B6 
0b7a8     AF A9 A6 A5 | 	byte	$a4, $aa, $b1, $b7, $bc, $c1, $c4, $c5, $c5, $c2, $bd, $b6, $af, $a9, $a6, $a5
0b7ac     A6 A9 AD B0 
0b7b0     B5 B8 BD C2 
0b7b4     C8 CE D4 DB 
0b7b8     E0 E5 E9 ED | 	byte	$a6, $a9, $ad, $b0, $b5, $b8, $bd, $c2, $c8, $ce, $d4, $db, $e0, $e5, $e9, $ed
0b7bc     F0 F4 F6 F9 
0b7c0     FC FF 03 05 
0b7c4     08 0C 10 15 
0b7c8     1A 1F 25 2C | 	byte	$f0, $f4, $f6, $f9, $fc, $ff, $03, $05, $08, $0c, $10, $15, $1a, $1f, $25, $2c
0b7cc     32 37 3C 3E 
0b7d0     3E 3B 36 31 
0b7d4     2B 26 21 1D 
0b7d8     18 13 0E 09 | 	byte	$32, $37, $3c, $3e, $3e, $3b, $36, $31, $2b, $26, $21, $1d, $18, $13, $0e, $09
0b7dc     05 02 02 05 
0b7e0     09 0F 15 1B 
0b7e4     23 29 2E 31 
0b7e8     33 35 35 35 | 	byte	$05, $02, $02, $05, $09, $0f, $15, $1b, $23, $29, $2e, $31, $33, $35, $35, $35
0b7ec     35 35 35 35 
0b7f0     35          | 	byte	$35[5]
0b7f1     34 33 32 31 
0b7f5     31 32 34 36 
0b7f9     39 3C 3E 40 
0b7fd     42 45 46 47 | 	byte	$34, $33, $32, $31, $31, $32, $34, $36, $39, $3c, $3e, $40, $42, $45, $46, $47
0b801     48 49 49 4A 
0b805     49 48 47 44 
0b809     42 3D 38 31 
0b80d     28 1F 14 0A | 	byte	$48, $49, $49, $4a, $49, $48, $47, $44, $42, $3d, $38, $31, $28, $1f, $14, $0a
0b811     FF F6 F1 ED 
0b815     EC EB EC ED 
0b819     EE EE EF EF 
0b81d     EE EC EB E9 | 	byte	$ff, $f6, $f1, $ed, $ec, $eb, $ec, $ed, $ee, $ee, $ef, $ef, $ee, $ec, $eb, $e9
0b821     E8 E6 E4 E2 
0b825     DF DC DA D8 
0b829     D7 D8 DB DF 
0b82d     E4 EA F0 F7 | 	byte	$e8, $e6, $e4, $e2, $df, $dc, $da, $d8, $d7, $d8, $db, $df, $e4, $ea, $f0, $f7
0b831     FC 02 08 0C 
0b835     11 14 18 1B 
0b839     1E 21 23 25 
0b83d     28 2A 2B 2C | 	byte	$fc, $02, $08, $0c, $11, $14, $18, $1b, $1e, $21, $23, $25, $28, $2a, $2b, $2c
0b841     2D 2D 2E 2D 
0b845     2C 2B 29 26 
0b849     23 20 1D 1A 
0b84d     19 17 17 17 | 	byte	$2d, $2d, $2e, $2d, $2c, $2b, $29, $26, $23, $20, $1d, $1a, $19, $17, $17, $17
0b851     19 1B 1D 20 
0b855     21 22 22 20 
0b859     1D 19 13 0E 
0b85d     09 04 FF FB | 	byte	$19, $1b, $1d, $20, $21, $22, $22, $20, $1d, $19, $13, $0e, $09, $04, $ff, $fb
0b861     F7 F4 F1 EF 
0b865     EE ED EE EF 
0b869     F1 F3 F5 F7 
0b86d     F8 FA FA F9 | 	byte	$f7, $f4, $f1, $ef, $ee, $ed, $ee, $ef, $f1, $f3, $f5, $f7, $f8, $fa, $fa, $f9
0b871     F8 F7 F6 F4 
0b875     F3 F2 F2 F3 
0b879     F3 F4 F4 F5 
0b87d     F6 F7 F8 F9 | 	byte	$f8, $f7, $f6, $f4, $f3, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f6, $f7, $f8, $f9
0b881     FA FA FA FA 
0b885     FA          | 	byte	$fa[5]
0b886     F9 F7 F5 F2 
0b88a     EE E8 E0 D8 
0b88e     CF C6 BC B3 
0b892     AC A6 A3 A0 | 	byte	$f9, $f7, $f5, $f2, $ee, $e8, $e0, $d8, $cf, $c6, $bc, $b3, $ac, $a6, $a3, $a0
0b896     9F 9F A1 A3 
0b89a     A5 A8 AC AF 
0b89e     B2 B6 B9 BB 
0b8a2     BB BB BA B8 | 	byte	$9f, $9f, $a1, $a3, $a5, $a8, $ac, $af, $b2, $b6, $b9, $bb, $bb, $bb, $ba, $b8
0b8a6     B6 B3 B1 B0 
0b8aa     B0 B1 B3 B5 
0b8ae     B8 BC C0 C5 
0b8b2     C9 CE D3 D8 | 	byte	$b6, $b3, $b1, $b0, $b0, $b1, $b3, $b5, $b8, $bc, $c0, $c5, $c9, $ce, $d3, $d8
0b8b6     DD E2 E6 EB 
0b8ba     EF F3 F6 F9 
0b8be     FD 00 03 06 
0b8c2     0A 0D 11 15 | 	byte	$dd, $e2, $e6, $eb, $ef, $f3, $f6, $f9, $fd, $00, $03, $06, $0a, $0d, $11, $15
0b8c6     18 1C 21 25 
0b8ca     29 2D 31 33 
0b8ce     35 36 35 34 
0b8d2     33 30 2D 2A | 	byte	$18, $1c, $21, $25, $29, $2d, $31, $33, $35, $36, $35, $34, $33, $30, $2d, $2a
0b8d6     26 22 1F 1C 
0b8da     19 16 14 13 
0b8de     13 13 14 17 
0b8e2     1A 1D 20 22 | 	byte	$26, $22, $1f, $1c, $19, $16, $14, $13, $13, $13, $14, $17, $1a, $1d, $20, $22
0b8e6     23 25 26 26 
0b8ea     27 27 28 27 
0b8ee     27 27 27 26 
0b8f2     26 26 26 27 | 	byte	$23, $25, $26, $26, $27, $27, $28, $27, $27, $27, $27, $26, $26, $26, $26, $27
0b8f6     27 29 2A 2C 
0b8fa     2E 30 31 33 
0b8fe     34 35 36 36 
0b902     36 36 35 35 | 	byte	$27, $29, $2a, $2c, $2e, $30, $31, $33, $34, $35, $36, $36, $36, $36, $35, $35
0b906     33 31 2E 2B 
0b90a     27 22 1D 17 
0b90e     11 0C 06 01 
0b912     FC F8 F6 F4 | 	byte	$33, $31, $2e, $2b, $27, $22, $1d, $17, $11, $0c, $06, $01, $fc, $f8, $f6, $f4
0b916     F2 F2 F1 F1 
0b91a     F1 F1 F1 F0 
0b91e     EF EE EC EB 
0b922     E9 E7 E5 E4 | 	byte	$f2, $f2, $f1, $f1, $f1, $f1, $f1, $f0, $ef, $ee, $ec, $eb, $e9, $e7, $e5, $e4
0b926     E3 E3 E4 E5 
0b92a     E7 E9 ED F0 
0b92e     F4 F8 FC 00 
0b932     04 07 0A 0D | 	byte	$e3, $e3, $e4, $e5, $e7, $e9, $ed, $f0, $f4, $f8, $fc, $00, $04, $07, $0a, $0d
0b936     10 12 14 16 
0b93a     18 1A 1C 1D 
0b93e     1E 1F 20 20 
0b942     20 20 1F 1F | 	byte	$10, $12, $14, $16, $18, $1a, $1c, $1d, $1e, $1f, $20, $20, $20, $20, $1f, $1f
0b946     1E 1C 1B 1A 
0b94a     18 17 16 16 
0b94e     15 15 16 16 
0b952     17 18 19 19 | 	byte	$1e, $1c, $1b, $1a, $18, $17, $16, $16, $15, $15, $16, $16, $17, $18, $19, $19
0b956     18 18 16 15 
0b95a     13 10 0D 0A 
0b95e     06 04 02 FF 
0b962     FE FD FC FB | 	byte	$18, $18, $16, $15, $13, $10, $0d, $0a, $06, $04, $02, $ff, $fe, $fd, $fc, $fb
0b966     FC FC FD FE 
0b96a     FF FF 00 00 
0b96e     00 00 00 FF 
0b972     FE FD FC FB | 	byte	$fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $00, $00, $00, $ff, $fe, $fd, $fc, $fb
0b976     FB FA FA FB 
0b97a     FB FA FA FB 
0b97e     FA FA FA F9 
0b982     F9 F8 F6 F5 | 	byte	$fb, $fa, $fa, $fb, $fb, $fa, $fa, $fb, $fa, $fa, $fa, $f9, $f9, $f8, $f6, $f5
0b986     F3 F0 ED E9 
0b98a     E4 DF D9 D3 
0b98e     CC C6 C0 BB 
0b992     B7 B3 AF AD | 	byte	$f3, $f0, $ed, $e9, $e4, $df, $d9, $d3, $cc, $c6, $c0, $bb, $b7, $b3, $af, $ad
0b996     AC AB AB AC 
0b99a     AC AE AF B0 
0b99e     B1 B2 B3 B4 
0b9a2     B4 B5 B5 B5 | 	byte	$ac, $ab, $ab, $ac, $ac, $ae, $af, $b0, $b1, $b2, $b3, $b4, $b4, $b5, $b5, $b5
0b9a6     B4 B5 B6 B8 
0b9aa     B9 BC BE C2 
0b9ae     C5 C8 CD D1 
0b9b2     D5 D9 DD E1 | 	byte	$b4, $b5, $b6, $b8, $b9, $bc, $be, $c2, $c5, $c8, $cd, $d1, $d5, $d9, $dd, $e1
0b9b6     E5 E9 ED F1 
0b9ba     F4 F8 FB FF 
0b9be     02 05 08 0C 
0b9c2     0F 13 16 19 | 	byte	$e5, $e9, $ed, $f1, $f4, $f8, $fb, $ff, $02, $05, $08, $0c, $0f, $13, $16, $19
0b9c6     1D 1F 23 26 
0b9ca     28 2B 2C 2E 
0b9ce     2F 2F 2F 2F 
0b9d2     2E 2D 2B 2A | 	byte	$1d, $1f, $23, $26, $28, $2b, $2c, $2e, $2f, $2f, $2f, $2f, $2e, $2d, $2b, $2a
0b9d6     28 26 24 22 
0b9da     20 1E 1D 1C 
0b9de     1B 1B 1B 1B 
0b9e2     1B 1B 1C 1C | 	byte	$28, $26, $24, $22, $20, $1e, $1d, $1c, $1b, $1b, $1b, $1b, $1b, $1b, $1c, $1c
0b9e6     1D 1D 1D 1E 
0b9ea     1E 1E 1E 1E 
0b9ee     1E 1D 1D 1E 
0b9f2     1E 1E 1E 1F | 	byte	$1d, $1d, $1d, $1e, $1e, $1e, $1e, $1e, $1e, $1d, $1d, $1e, $1e, $1e, $1e, $1f
0b9f6     20 21 22 23 
0b9fa     24 25 27 28 
0b9fe     29 29 29 2A 
0ba02     29 28 27 26 | 	byte	$20, $21, $22, $23, $24, $25, $27, $28, $29, $29, $29, $2a, $29, $28, $27, $26
0ba06     25 23 20 1E 
0ba0a     1B 18 14 11 
0ba0e     0D 0A 07 04 
0ba12     01 FF FD FB | 	byte	$25, $23, $20, $1e, $1b, $18, $14, $11, $0d, $0a, $07, $04, $01, $ff, $fd, $fb
0ba16     FA F8 F8 F7 
0ba1a     F7 F6 F5 F4 
0ba1e     F3 F2 F2 F1 
0ba22     F0 EF EF EF | 	byte	$fa, $f8, $f8, $f7, $f7, $f6, $f5, $f4, $f3, $f2, $f2, $f1, $f0, $ef, $ef, $ef
0ba26     EF EF F0 F1 
0ba2a     F3 F5 F7 F9 
0ba2e     FB FD 00 02 
0ba32     04 07 08 0A | 	byte	$ef, $ef, $f0, $f1, $f3, $f5, $f7, $f9, $fb, $fd, $00, $02, $04, $07, $08, $0a
0ba36     0C 0E 10 11 
0ba3a     12 13 14 14 
0ba3e     15 15 15 15 
0ba42     16 16 15 14 | 	byte	$0c, $0e, $10, $11, $12, $13, $14, $14, $15, $15, $15, $15, $16, $16, $15, $14
0ba46     14 13 13 13 
0ba4a     12 12 12 12 
0ba4e     11 12 12 12 
0ba52     12 12 12 12 | 	byte	$14, $13, $13, $13, $12, $12, $12, $12, $11, $12, $12, $12, $12, $12, $12, $12
0ba56     12 11 10 0F 
0ba5a     0F 0D 0C 0B 
0ba5e     0A 09 07 06 
0ba62     05 05 04 04 | 	byte	$12, $11, $10, $0f, $0f, $0d, $0c, $0b, $0a, $09, $07, $06, $05, $05, $04, $04
0ba66     04 04 04 04 
0ba6a     04 04 04 04 | 	byte	$04[8]
0ba6e     03 03 02 01 
0ba72     01 00 00 FF 
0ba76     FF FE FD FC 
0ba7a     FC FB FB FA | 	byte	$03, $03, $02, $01, $01, $00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa
0ba7e     F9 F8 F7 F6 
0ba82     F5 F4 F2 EF 
0ba86     EC E9 E6 E2 
0ba8a     DE DA D6 D1 | 	byte	$f9, $f8, $f7, $f6, $f5, $f4, $f2, $ef, $ec, $e9, $e6, $e2, $de, $da, $d6, $d1
0ba8e     CC C8 C4 C1 
0ba92     BD BA B7 B5 
0ba96     B3 B2 B2 B1 
0ba9a     B1 B1 B2 B2 | 	byte	$cc, $c8, $c4, $c1, $bd, $ba, $b7, $b5, $b3, $b2, $b2, $b1, $b1, $b1, $b2, $b2
0ba9e     B3 B3 B3 B4 
0baa2     B5 B6 B7 B8 
0baa6     B9 BB BD BF 
0baaa     C1 C4 C7 CA | 	byte	$b3, $b3, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $bb, $bd, $bf, $c1, $c4, $c7, $ca
0baae     CE D1 D4 D9 
0bab2     DD E0 E3 E7 
0bab6     EB EE F2 F5 
0baba     F8 FC FE 02 | 	byte	$ce, $d1, $d4, $d9, $dd, $e0, $e3, $e7, $eb, $ee, $f2, $f5, $f8, $fc, $fe, $02
0babe     05 08 0B 0F 
0bac2     11 14 17 1A 
0bac6     1D 1F 21 24 
0baca     26 28 29 2A | 	byte	$05, $08, $0b, $0f, $11, $14, $17, $1a, $1d, $1f, $21, $24, $26, $28, $29, $2a
0bace     2B 2B 2B 2B 
0bad2     2A 2A 29 29 
0bad6     27 26 25 24 
0bada     23 21 20 1F | 	byte	$2b, $2b, $2b, $2b, $2a, $2a, $29, $29, $27, $26, $25, $24, $23, $21, $20, $1f
0bade     1E 1E 1D 1C 
0bae2     1B 1B 1A 1A 
0bae6     19 1A 1A 1A 
0baea     1A 19 19 19 | 	byte	$1e, $1e, $1d, $1c, $1b, $1b, $1a, $1a, $19, $1a, $1a, $1a, $1a, $19, $19, $19
0baee     19 19 19 19 
0baf2     19          | 	byte	$19[5]
0baf3     1A 1A 1A 1B 
0baf7     1B 1D 1D 1E 
0bafb     1E 1F 1F 1F 
0baff     20 1F 1F 1F | 	byte	$1a, $1a, $1a, $1b, $1b, $1d, $1d, $1e, $1e, $1f, $1f, $1f, $20, $1f, $1f, $1f
0bb03     1E 1E 1D 1C 
0bb07     1A 19 17 15 
0bb0b     13 11 0F 0C 
0bb0f     0A 08 07 04 | 	byte	$1e, $1e, $1d, $1c, $1a, $19, $17, $15, $13, $11, $0f, $0c, $0a, $08, $07, $04
0bb13     03 01 00 FF 
0bb17     FE FD FC FB 
0bb1b     FA FA F9 F8 
0bb1f     F8 F7 F7 F7 | 	byte	$03, $01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $f8, $f8, $f7, $f7, $f7
0bb23     F7 F7 F7 F8 
0bb27     F8 F9 FA FB 
0bb2b     FC FD FF 00 
0bb2f     01 03 04 06 | 	byte	$f7, $f7, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fd, $ff, $00, $01, $03, $04, $06
0bb33     07 08 09 0A 
0bb37     0B 0C 0D 0E 
0bb3b     0E 0E 0F 10 
0bb3f     10 10 10 10 | 	byte	$07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0e, $0e, $0f, $10, $10, $10, $10, $10
0bb43     10 10 0F 0F 
0bb47     0F 0F 0F 0E 
0bb4b     0F 0E 0E 0E 
0bb4f     0E 0E 0F 0F | 	byte	$10, $10, $0f, $0f, $0f, $0f, $0f, $0e, $0f, $0e, $0e, $0e, $0e, $0e, $0f, $0f
0bb53     0F 0F 0F 0F 
0bb57     0E 0E 0D 0D 
0bb5b     0C 0C 0B 0B 
0bb5f     0A 0A 09 09 | 	byte	$0f, $0f, $0f, $0f, $0e, $0e, $0d, $0d, $0c, $0c, $0b, $0b, $0a, $0a, $09, $09
0bb63     08 08 07 07 
0bb67     07 06 06 06 
0bb6b     06 05 05 05 
0bb6f     04 03 03 02 | 	byte	$08, $08, $07, $07, $07, $06, $06, $06, $06, $05, $05, $05, $04, $03, $03, $02
0bb73     01 00 FF FF 
0bb77     FD FC FC FB 
0bb7b     FA F9 F8 F7 
0bb7f     F5 F3 F2 F0 | 	byte	$01, $00, $ff, $ff, $fd, $fc, $fc, $fb, $fa, $f9, $f8, $f7, $f5, $f3, $f2, $f0
0bb83     EE EC EA E7 
0bb87     E4 E1 DE DA 
0bb8b     D7 D3 D0 CC 
0bb8f     CA C7 C3 C1 | 	byte	$ee, $ec, $ea, $e7, $e4, $e1, $de, $da, $d7, $d3, $d0, $cc, $ca, $c7, $c3, $c1
0bb93     BE BC BB B9 
0bb97     B8 B7 B7 B6 
0bb9b     B6 B5 B6 B6 
0bb9f     B6 B7 B8 B9 | 	byte	$be, $bc, $bb, $b9, $b8, $b7, $b7, $b6, $b6, $b5, $b6, $b6, $b6, $b7, $b8, $b9
0bba3     BA BB BD BF 
0bba7     C1 C3 C5 C8 
0bbab     CA CD D0 D3 
0bbaf     D6 D9 DD E0 | 	byte	$ba, $bb, $bd, $bf, $c1, $c3, $c5, $c8, $ca, $cd, $d0, $d3, $d6, $d9, $dd, $e0
0bbb3     E3 E6 EA ED 
0bbb7     F0 F4 F7 FA 
0bbbb     FD 00 03 06 
0bbbf     09 0C 0F 12 | 	byte	$e3, $e6, $ea, $ed, $f0, $f4, $f7, $fa, $fd, $00, $03, $06, $09, $0c, $0f, $12
0bbc3     14 16 19 1B 
0bbc7     1D 1F 21 23 
0bbcb     24 25 26 27 
0bbcf     27 28 28 28 | 	byte	$14, $16, $19, $1b, $1d, $1f, $21, $23, $24, $25, $26, $27, $27, $28, $28, $28
0bbd3     27 27 27 26 
0bbd7     25 24 24 23 
0bbdb     22 21 20 1F 
0bbdf     1F 1E 1D 1C | 	byte	$27, $27, $27, $26, $25, $24, $24, $23, $22, $21, $20, $1f, $1f, $1e, $1d, $1c
0bbe3     1B 1A 1A 19 
0bbe7     19 18 18 18 
0bbeb     17 17 17 17 
0bbef     17 17 17 17 | 	byte	$1b, $1a, $1a, $19, $19, $18, $18, $18, $17, $17, $17, $17, $17, $17, $17, $17
0bbf3     17 18 18 18 
0bbf7     18 19 19 19 
0bbfb     1A 1A 1A 1A 
0bbff     1A 1A 19 19 | 	byte	$17, $18, $18, $18, $18, $19, $19, $19, $1a, $1a, $1a, $1a, $1a, $1a, $19, $19
0bc03     19 18 17 16 
0bc07     15 14 13 12 
0bc0b     10 0F 0E 0D 
0bc0f     0B 09 08 07 | 	byte	$19, $18, $17, $16, $15, $14, $13, $12, $10, $0f, $0e, $0d, $0b, $09, $08, $07
0bc13     06 04 03 03 
0bc17     02 01 00 00 
0bc1b     FF FF FF FE 
0bc1f     FE FE FD FD | 	byte	$06, $04, $03, $03, $02, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd
0bc23     FE FE FE FE 
0bc27     FE          | 	byte	$fe[5]
0bc28     FF FF 00 00 
0bc2c     01 02 03 04 
0bc30     05 06 07 08 
0bc34     08 09 0A 0A | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $04, $05, $06, $07, $08, $08, $09, $0a, $0a
0bc38     0B 0B 0B 0B 
0bc3c     0B          | 	byte	$0b[5]
0bc3d     0C 0C 0C 0C 
0bc41     0D 0D 0D 0C 
0bc45     0C 0C 0C 0C 
0bc49     0C 0C 0C 0C | 	byte	$0c, $0c, $0c, $0c, $0d, $0d, $0d, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
0bc4d     0D 0C 0C 0D 
0bc51     0D 0D 0C 0C 
0bc55     0C 0C 0C 0C 
0bc59     0C 0C 0C 0B | 	byte	$0d, $0c, $0c, $0d, $0d, $0d, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0b
0bc5d     0B 0B 0B 0A 
0bc61     0A 0A 09 09 
0bc65     09 09 08 08 
0bc69     07 07 06 06 | 	byte	$0b, $0b, $0b, $0a, $0a, $0a, $09, $09, $09, $09, $08, $08, $07, $07, $06, $06
0bc6d     05 05 04 03 
0bc71     02 02 01 00 
0bc75     FF FE FD FB 
0bc79     FA F9 F7 F6 | 	byte	$05, $05, $04, $03, $02, $02, $01, $00, $ff, $fe, $fd, $fb, $fa, $f9, $f7, $f6
0bc7d     F5 F3 F1 F0 
0bc81     EE EC EA E7 
0bc85     E5 E3 E0 DD 
0bc89     DB D8 D5 D2 | 	byte	$f5, $f3, $f1, $f0, $ee, $ec, $ea, $e7, $e5, $e3, $e0, $dd, $db, $d8, $d5, $d2
0bc8d     CF CC CA C7 
0bc91     C5 C2 C1 BF 
0bc95     BE BD BB BA 
0bc99     BA B9 B9 B9 | 	byte	$cf, $cc, $ca, $c7, $c5, $c2, $c1, $bf, $be, $bd, $bb, $ba, $ba, $b9, $b9, $b9
0bc9d     B9 BA BB BB 
0bca1     BC BD BE BF 
0bca5     C1 C3 C5 C7 
0bca9     CA CC CF D2 | 	byte	$b9, $ba, $bb, $bb, $bc, $bd, $be, $bf, $c1, $c3, $c5, $c7, $ca, $cc, $cf, $d2
0bcad     D4 D7 DA DD 
0bcb1     E0 E3 E6 E9 
0bcb5     EC EF F3 F6 
0bcb9     F9 FC FF 01 | 	byte	$d4, $d7, $da, $dd, $e0, $e3, $e6, $e9, $ec, $ef, $f3, $f6, $f9, $fc, $ff, $01
0bcbd     04 07 0A 0C 
0bcc1     0F 11 14 16 
0bcc5     18 1A 1C 1E 
0bcc9     1F 20 22 22 | 	byte	$04, $07, $0a, $0c, $0f, $11, $14, $16, $18, $1a, $1c, $1e, $1f, $20, $22, $22
0bccd     24 24 25 25 
0bcd1     26 26 26 26 
0bcd5     25 25 24 24 
0bcd9     23 22 21 20 | 	byte	$24, $24, $25, $25, $26, $26, $26, $26, $25, $25, $24, $24, $23, $22, $21, $20
0bcdd     20 1F 1E 1D 
0bce1     1C 1B 1A 1A 
0bce5     19 19 18 17 
0bce9     17 17 17 16 | 	byte	$20, $1f, $1e, $1d, $1c, $1b, $1a, $1a, $19, $19, $18, $17, $17, $17, $17, $16
0bced     16 16 16 16 
0bcf1     16          | 	byte	$16[5]
0bcf2     15 15 15 16 
0bcf6     16 16 16 16 
0bcfa     17 17 17 17 
0bcfe     17 17 17 16 | 	byte	$15, $15, $15, $16, $16, $16, $16, $16, $17, $17, $17, $17, $17, $17, $17, $16
0bd02     16 15 15 14 
0bd06     13 13 12 11 
0bd0a     10 0F 0E 0D 
0bd0e     0C 0B 0A 0A | 	byte	$16, $15, $15, $14, $13, $13, $12, $11, $10, $0f, $0e, $0d, $0c, $0b, $0a, $0a
0bd12     09 08 07 06 
0bd16     06 05 05 04 
0bd1a     03 03 03 03 
0bd1e     02 02 02 02 | 	byte	$09, $08, $07, $06, $06, $05, $05, $04, $03, $03, $03, $03, $02, $02, $02, $02
0bd22     03 02 02 02 
0bd26     03 03 03 04 
0bd2a     04 04 05 05 
0bd2e     06 06 07 07 | 	byte	$03, $02, $02, $02, $03, $03, $03, $04, $04, $04, $05, $05, $06, $06, $07, $07
0bd32     08 08 08 08 
0bd36     09 09 09 09 
0bd3a     09 09 0A 0A 
0bd3e     0A 0A 0A 0A | 	byte	$08, $08, $08, $08, $09, $09, $09, $09, $09, $09, $0a, $0a, $0a, $0a, $0a, $0a
0bd42     0A 0A 0A 0A 
0bd46     0B 0A 0A 0A 
0bd4a     0A 0B 0B 0B 
0bd4e     0B 0B 0B 0B | 	byte	$0a, $0a, $0a, $0a, $0b, $0a, $0a, $0a, $0a, $0b, $0b, $0b, $0b, $0b, $0b, $0b
0bd52     0B 0B 0C 0C 
0bd56     0B 0B 0B 0B 
0bd5a     0B 0B 0B 0B 
0bd5e     0B 0B 0B 0A | 	byte	$0b, $0b, $0c, $0c, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0a
0bd62     09 09 09 09 
0bd66     08 08 07 07 
0bd6a     06 05 04 04 
0bd6e     03 02 01 00 | 	byte	$09, $09, $09, $09, $08, $08, $07, $07, $06, $05, $04, $04, $03, $02, $01, $00
0bd72     FF FF FE FC 
0bd76     FA FA F9 F7 
0bd7a     F6 F5 F3 F1 
0bd7e     F0 EE EC EA | 	byte	$ff, $ff, $fe, $fc, $fa, $fa, $f9, $f7, $f6, $f5, $f3, $f1, $f0, $ee, $ec, $ea
0bd82     E8 E6 E4 E2 
0bd86     DF DD DB D8 
0bd8a     D6 D3 D1 CF 
0bd8e     CD CB C8 C7 | 	byte	$e8, $e6, $e4, $e2, $df, $dd, $db, $d8, $d6, $d3, $d1, $cf, $cd, $cb, $c8, $c7
0bd92     C5 C3 C1 C0 
0bd96     BF BF BE BD 
0bd9a     BC BC BD BD 
0bd9e     BD BE BF C0 | 	byte	$c5, $c3, $c1, $c0, $bf, $bf, $be, $bd, $bc, $bc, $bd, $bd, $bd, $be, $bf, $c0
0bda2     C1 C3 C4 C6 
0bda6     C8 CA CC CE 
0bdaa     D0 D3 D5 D8 
0bdae     DB DE E1 E4 | 	byte	$c1, $c3, $c4, $c6, $c8, $ca, $cc, $ce, $d0, $d3, $d5, $d8, $db, $de, $e1, $e4
0bdb2     E6 E9 EC EF 
0bdb6     F2 F4 F7 FA 
0bdba     FD FF 02 04 
0bdbe     07 0A 0C 0E | 	byte	$e6, $e9, $ec, $ef, $f2, $f4, $f7, $fa, $fd, $ff, $02, $04, $07, $0a, $0c, $0e
0bdc2     10 13 15 16 
0bdc6     18 1A 1C 1D 
0bdca     1E 20 20 21 
0bdce     23 23 23 23 | 	byte	$10, $13, $15, $16, $18, $1a, $1c, $1d, $1e, $20, $20, $21, $23, $23, $23, $23
0bdd2     23 23 23 23 
0bdd6     23 23       | 	byte	$23[6]
0bdd8     22 22 21 21 
0bddc     20 20 1F 1E 
0bde0     1D 1C 1C 1B 
0bde4     1A 19 18 18 | 	byte	$22, $22, $21, $21, $20, $20, $1f, $1e, $1d, $1c, $1c, $1b, $1a, $19, $18, $18
0bde8     17 17 16 16 
0bdec     16 15 15 15 
0bdf0     15 15 15 14 
0bdf4     15 14 15 14 | 	byte	$17, $17, $16, $16, $16, $15, $15, $15, $15, $15, $15, $14, $15, $14, $15, $14
0bdf8     14 14 14 14 
0bdfc     14 14 14 14 
0be00     14 14       | 	byte	$14[10]
0be02     13 13 12 11 
0be06     11 11 11 10 
0be0a     0F 0F 0E 0E 
0be0e     0D 0C 0C 0B | 	byte	$13, $13, $12, $11, $11, $11, $11, $10, $0f, $0f, $0e, $0e, $0d, $0c, $0c, $0b
0be12     0A 09 09 08 
0be16     08 08 07 07 
0be1a     06 06 06 06 
0be1e     05 05 06 06 | 	byte	$0a, $09, $09, $08, $08, $08, $07, $07, $06, $06, $06, $06, $05, $05, $06, $06
0be22     06 06 06 06 
0be26     06 06       | 	byte	$06[6]
0be28     07 07 07 07 
0be2c     07 07       | 	byte	$07[6]
0be2e     08 08 08 08 
0be32     08 08       | 	byte	$08[6]
0be34     09 09 09 09 
0be38     09 09 09 09 
0be3c     09 09 09 09 
0be40     09 09 09 09 
0be44     09 09 09 09 | 	byte	$09[20]
0be48     0A 0A 09 09 
0be4c     09 09 0A 09 
0be50     09 0A 0A 0A 
0be54     0A 0A 0A 0A | 	byte	$0a, $0a, $09, $09, $09, $09, $0a, $09, $09, $0a, $0a, $0a, $0a, $0a, $0a, $0a
0be58     0A 0A 0A 0B 
0be5c     0A 0A 0A 0A 
0be60     0A 09 09 08 
0be64     08 08 08 07 | 	byte	$0a, $0a, $0a, $0b, $0a, $0a, $0a, $0a, $0a, $09, $09, $08, $08, $08, $08, $07
0be68     07 06 05 05 
0be6c     04 03 02 01 
0be70     00 FF FE FD 
0be74     FC FA F9 F7 | 	byte	$07, $06, $05, $05, $04, $03, $02, $01, $00, $ff, $fe, $fd, $fc, $fa, $f9, $f7
0be78     F6 F5 F4 F2 
0be7c     F1 EF ED EC 
0be80     EA E8 E5 E4 
0be84     E2 E0 DE DB | 	byte	$f6, $f5, $f4, $f2, $f1, $ef, $ed, $ec, $ea, $e8, $e5, $e4, $e2, $e0, $de, $db
0be88     D9 D7 D5 D2 
0be8c     D0 CF CD CB 
0be90     C9 C7 C6 C5 
0be94     C4 C2 C2 C1 | 	byte	$d9, $d7, $d5, $d2, $d0, $cf, $cd, $cb, $c9, $c7, $c6, $c5, $c4, $c2, $c2, $c1
0be98     C1 C0 C0 C0 
0be9c     C0 C1 C1 C2 
0bea0     C3 C4 C5 C7 
0bea4     C8 C9 CB CD | 	byte	$c1, $c0, $c0, $c0, $c0, $c1, $c1, $c2, $c3, $c4, $c5, $c7, $c8, $c9, $cb, $cd
0bea8     CF D2 D4 D6 
0beac     D9 DB DD E0 
0beb0     E2 E5 E8 EB 
0beb4     ED F0 F3 F5 | 	byte	$cf, $d2, $d4, $d6, $d9, $db, $dd, $e0, $e2, $e5, $e8, $eb, $ed, $f0, $f3, $f5
0beb8     F8 FA FD FF 
0bebc     02 05 06 09 
0bec0     0B 0E 0F 11 
0bec4     13 15 17 18 | 	byte	$f8, $fa, $fd, $ff, $02, $05, $06, $09, $0b, $0e, $0f, $11, $13, $15, $17, $18
0bec8     1A 1B 1D 1D 
0becc     1E 1F 20 21 
0bed0     21 21 22 22 
0bed4     22 22 22 21 | 	byte	$1a, $1b, $1d, $1d, $1e, $1f, $20, $21, $21, $21, $22, $22, $22, $22, $22, $21
0bed8     21 21 20 1F 
0bedc     1F 1E 1E 1D 
0bee0     1C 1C 1A 19 
0bee4     19 18 18 17 | 	byte	$21, $21, $20, $1f, $1f, $1e, $1e, $1d, $1c, $1c, $1a, $19, $19, $18, $18, $17
0bee8     17 16 16 15 
0beec     15 15 15 15 
0bef0     14 14 13 13 
0bef4     13 13 13 13 | 	byte	$17, $16, $16, $15, $15, $15, $15, $15, $14, $14, $13, $13, $13, $13, $13, $13
0bef8     13 13 13 13 
0befc     12 13 13 13 
0bf00     12 12 12 12 
0bf04     12 11 11 11 | 	byte	$13, $13, $13, $13, $12, $13, $13, $13, $12, $12, $12, $12, $12, $11, $11, $11
0bf08     10 10 0F 0F 
0bf0c     0F 0E 0E 0D 
0bf10     0D 0C 0C 0B 
0bf14     0B 0A 0A 0A | 	byte	$10, $10, $0f, $0f, $0f, $0e, $0e, $0d, $0d, $0c, $0c, $0b, $0b, $0a, $0a, $0a
0bf18     09 09 09 09 
0bf1c     09 09       | 	byte	$09[6]
0bf1e     08 08 09 09 
0bf22     08 08 08 08 
0bf26     09 08 08 08 
0bf2a     08 08 08 08 | 	byte	$08, $08, $09, $09, $08, $08, $08, $08, $09, $08, $08, $08, $08, $08, $08, $08
0bf2e     09 09 09 09 
      ...             
0bf4e     09 09 09 09 
0bf52     09 09       | 	byte	$09[38]
0bf54     0A 09 09 0A 
0bf58     09 0A 0A 09 
0bf5c     09 09 09 09 
0bf60     09 09 08 08 | 	byte	$0a, $09, $09, $0a, $09, $0a, $0a, $09, $09, $09, $09, $09, $09, $09, $08, $08
0bf64     07 07 06 06 
0bf68     05 04 04 03 
0bf6c     02 01 00 FF 
0bf70     FF FD FC FB | 	byte	$07, $07, $06, $06, $05, $04, $04, $03, $02, $01, $00, $ff, $ff, $fd, $fc, $fb
0bf74     F9 F8 F7 F6 
0bf78     F4 F3 F1 EF 
0bf7c     ED EC EA E8 
0bf80     E7 E5 E3 E1 | 	byte	$f9, $f8, $f7, $f6, $f4, $f3, $f1, $ef, $ed, $ec, $ea, $e8, $e7, $e5, $e3, $e1
0bf84     E0 DE DC DA 
0bf88     D8 D6 D4 D2 
0bf8c     D1 CF CD CC 
0bf90     CA C9 C8 C7 | 	byte	$e0, $de, $dc, $da, $d8, $d6, $d4, $d2, $d1, $cf, $cd, $cc, $ca, $c9, $c8, $c7
0bf94     C5 C5 C4 C3 
0bf98     C3 C3 C3 C3 
0bf9c     C3 C4 C5 C6 
0bfa0     C6 C7 C8 CA | 	byte	$c5, $c5, $c4, $c3, $c3, $c3, $c3, $c3, $c3, $c4, $c5, $c6, $c6, $c7, $c8, $ca
0bfa4     CB CD CE D0 
0bfa8     D2 D4 D6 D8 
0bfac     DA DD E0 E2 
0bfb0     E5 E7 EA EC | 	byte	$cb, $cd, $ce, $d0, $d2, $d4, $d6, $d8, $da, $dd, $e0, $e2, $e5, $e7, $ea, $ec
0bfb4     EE F1 F3 F6 
0bfb8     F8 FB FD 00 
0bfbc     02 04 07 09 
0bfc0     0C 0D 0F 10 | 	byte	$ee, $f1, $f3, $f6, $f8, $fb, $fd, $00, $02, $04, $07, $09, $0c, $0d, $0f, $10
0bfc4     12 14 16 18 
0bfc8     18 1A 1B 1C 
0bfcc     1D 1E 1F 1F 
0bfd0     20 1F 20 20 | 	byte	$12, $14, $16, $18, $18, $1a, $1b, $1c, $1d, $1e, $1f, $1f, $20, $1f, $20, $20
0bfd4     20 20 20 20 
0bfd8     20          | 	byte	$20[5]
0bfd9     1F 1F 1F 1E 
0bfdd     1D 1D 1C 1C 
0bfe1     1B 1B 1A 19 
0bfe5     19 18 18 17 | 	byte	$1f, $1f, $1f, $1e, $1d, $1d, $1c, $1c, $1b, $1b, $1a, $19, $19, $18, $18, $17
0bfe9     17 16 16 15 
0bfed     15 15 15 14 
0bff1     14 13 14 13 
0bff5     13 13 13 13 | 	byte	$17, $16, $16, $15, $15, $15, $15, $14, $14, $13, $14, $13, $13, $13, $13, $13
0bff9     13 12 13 12 
0bffd     12 12 12 12 
0c001     12 11 11 11 
0c005     11 10 10 0F | 	byte	$13, $12, $13, $12, $12, $12, $12, $12, $12, $11, $11, $11, $11, $10, $10, $0f
0c009     0F 0F 0E 0E 
0c00d     0E 0E 0D 0D 
0c011     0D 0C 0C 0C 
0c015     0B 0B 0B 0B | 	byte	$0f, $0f, $0e, $0e, $0e, $0e, $0d, $0d, $0d, $0c, $0c, $0c, $0b, $0b, $0b, $0b
0c019     0B 0A 0A 0A 
0c01d     0A 0A 0A 0A 
0c021     0A 0A 0A 00 
0c025     00 00 00 FE | 	byte	$0b, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $00, $00, $00, $00, $fe
0c029     FF FF FF FD 
0c02d     FC FB FA F9 
0c031     F9 F8 F6 E6 
0c035     DD E1 E5 E9 | 	byte	$ff, $ff, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f8, $f6, $e6, $dd, $e1, $e5, $e9
0c039     ED F1 F4 F9 
0c03d     FD 03 07 0B 
0c041     0F 15 18 1D 
0c045     14 F9 F6 FA | 	byte	$ed, $f1, $f4, $f9, $fd, $03, $07, $0b, $0f, $15, $18, $1d, $14, $f9, $f6, $fa
0c049     F9 F9 F6 F3 
0c04d     ED E8 E4 E0 
0c051     DE DF D4 C9 
0c055     D2 DF EA F6 | 	byte	$f9, $f9, $f6, $f3, $ed, $e8, $e4, $e0, $de, $df, $d4, $c9, $d2, $df, $ea, $f6
0c059     03 0B 15 1D 
0c05d     28 2F 35 34 
0c061     34 2E 2B 23 
0c065     F2 E7 EA E5 | 	byte	$03, $0b, $15, $1d, $28, $2f, $35, $34, $34, $2e, $2b, $23, $f2, $e7, $ea, $e5
0c069     E3 E5 E9 E7 
0c06d     E6 E3 E3 E2 
0c071     E8 E2 D2 DC 
0c075     E9 F5 04 0F | 	byte	$e3, $e5, $e9, $e7, $e6, $e3, $e3, $e2, $e8, $e2, $d2, $dc, $e9, $f5, $04, $0f
0c079     1B 17 1C 25 
0c07d     30 36 3B 3B 
0c081     3A 35 30 22 
0c085     E8 E4 E7 E3 | 	byte	$1b, $17, $1c, $25, $30, $36, $3b, $3b, $3a, $35, $30, $22, $e8, $e4, $e7, $e3
0c089     E6 EC EF EF 
0c08d     ED EA EA EE 
0c091     F7 DE E3 F3 
0c095     01 10 1D 2A | 	byte	$e6, $ec, $ef, $ef, $ed, $ea, $ea, $ee, $f7, $de, $e3, $f3, $01, $10, $1d, $2a
0c099     2A 24 2D 38 
0c09d     40 46 48 46 
0c0a1     40 39 2C 08 
0c0a5     E2 E7 E2 E3 | 	byte	$2a, $24, $2d, $38, $40, $46, $48, $46, $40, $39, $2c, $08, $e2, $e7, $e2, $e3
0c0a9     EB F1 F0 ED 
0c0ad     E7 E6 E9 F3 
0c0b1     F4 DD ED FD 
0c0b5     0B 19 26 2F | 	byte	$eb, $f1, $f0, $ed, $e7, $e6, $e9, $f3, $f4, $dd, $ed, $fd, $0b, $19, $26, $2f
0c0b9     2A 23 2D 37 
0c0bd     40 44 43 3E 
0c0c1     36 2B 1C F5 
0c0c5     DB E2 DD E2 | 	byte	$2a, $23, $2d, $37, $40, $44, $43, $3e, $36, $2b, $1c, $f5, $db, $e2, $dd, $e2
0c0c9     EC EE E8 E0 
0c0cd     DB E0 EB F4 
0c0d1     E3 E3 F7 04 
0c0d5     12 1E 28 2E | 	byte	$ec, $ee, $e8, $e0, $db, $e0, $eb, $f4, $e3, $e3, $f7, $04, $12, $1e, $28, $2e
0c0d9     26 20 2B 34 
0c0dd     3B 3C 37 2F 
0c0e1     25 16 0B DF 
0c0e5     D6 DA D7 E1 | 	byte	$26, $20, $2b, $34, $3b, $3c, $37, $2f, $25, $16, $0b, $df, $d6, $da, $d7, $e1
0c0e9     E8 E2 D4 CC 
0c0ed     D2 E0 EB F1 
0c0f1     D9 E9 FA 07 
0c0f5     14 20 27 2E | 	byte	$e8, $e2, $d4, $cc, $d2, $e0, $eb, $f1, $d9, $e9, $fa, $07, $14, $20, $27, $2e
0c0f9     27 1F 27 31 
0c0fd     33 30 27 1D 
0c101     12 07 04 D3 
0c105     D4 D7 D6 E1 | 	byte	$27, $1f, $27, $31, $33, $30, $27, $1d, $12, $07, $04, $d3, $d4, $d7, $d6, $e1
0c109     DF CE BD C8 
0c10d     D6 E5 EC E6 
0c111     DF F2 00 0D 
0c115     18 25 28 32 | 	byte	$df, $ce, $bd, $c8, $d6, $e5, $ec, $e6, $df, $f2, $00, $0d, $18, $25, $28, $32
0c119     29 1F 24 2F 
0c11d     2B 24 15 0C 
0c121     03 03 03 D2 
0c125     D5 D6 D7 E2 | 	byte	$29, $1f, $24, $2f, $2b, $24, $15, $0c, $03, $03, $03, $d2, $d5, $d6, $d7, $e2
0c129     C8 B3 BD D0 
0c12d     DB EA F2 DF 
0c131     E7 FB 06 14 
0c135     1D 2A 2C 36 | 	byte	$c8, $b3, $bd, $d0, $db, $ea, $f2, $df, $e7, $fb, $06, $14, $1d, $2a, $2c, $36
0c139     2B 21 25 2C 
0c13d     20 13 04 04 
0c141     02 05 FE D5 
0c145     D9 D7 D9 D6 | 	byte	$2b, $21, $25, $2c, $20, $13, $04, $04, $02, $05, $fe, $d5, $d9, $d7, $d9, $d6
0c149     A8 B8 C6 D7 
0c14d     E5 EF F0 E3 
0c151     F0 02 0B 19 
0c155     25 2E 31 39 | 	byte	$a8, $b8, $c6, $d7, $e5, $ef, $f0, $e3, $f0, $02, $0b, $19, $25, $2e, $31, $39
0c159     2F 22 25 22 
0c15d     0E FF FE 06 
0c161     05 08 FC DA 
0c165     DE D9 DE CA | 	byte	$2f, $22, $25, $22, $0e, $ff, $fe, $06, $05, $08, $fc, $da, $de, $d9, $de, $ca
0c169     AE BC CC DD 
0c16d     E9 F3 E3 E8 
0c171     F8 04 11 1E 
0c175     29 31 34 3B | 	byte	$ae, $bc, $cc, $dd, $e9, $f3, $e3, $e8, $f8, $04, $11, $1e, $29, $31, $34, $3b
0c179     33 23 22 0C 
0c17d     F8 FA 03 08 
0c181     0A 0E F6 DF 
0c185     E1 DB E4 C0 | 	byte	$33, $23, $22, $0c, $f8, $fa, $03, $08, $0a, $0e, $f6, $df, $e1, $db, $e4, $c0
0c189     B7 C3 D5 E1 
0c18d     EC F5 E2 ED 
0c191     FE 08 17 23 
0c195     2F 34 38 3E | 	byte	$b7, $c3, $d5, $e1, $ec, $f5, $e2, $ed, $fe, $08, $17, $23, $2f, $34, $38, $3e
0c199     39 24 10 EF 
0c19d     F6 00 09 0D 
0c1a1     0F 14 F0 E4 
0c1a5     E2 E0 EA BB | 	byte	$39, $24, $10, $ef, $f6, $00, $09, $0d, $0f, $14, $f0, $e4, $e2, $e0, $ea, $bb
0c1a9     BD C8 DA E4 
0c1ad     F0 E9 E8 F5 
0c1b1     01 0D 1B 27 
0c1b5     31 35 39 40 | 	byte	$bd, $c8, $da, $e4, $f0, $e9, $e8, $f5, $01, $0d, $1b, $27, $31, $35, $39, $40
0c1b9     3A 14 E6 EF 
0c1bd     FB 03 0E 11 
0c1c1     14 1A E9 E6 
0c1c5     E1 E7 E9 B9 | 	byte	$3a, $14, $e6, $ef, $fb, $03, $0e, $11, $14, $1a, $e9, $e6, $e1, $e7, $e9, $b9
0c1c9     C4 CF DD E6 
0c1cd     F5 DF EC FA 
0c1d1     03 13 1E 2B 
0c1d5     34 37 3B 42 | 	byte	$c4, $cf, $dd, $e6, $f5, $df, $ec, $fa, $03, $13, $1e, $2b, $34, $37, $3b, $42
0c1d9     3C F2 E4 F2 
0c1dd     FA 08 11 12 
0c1e1     16 1A E6 E5 
0c1e5     E3 EB DC BC | 	byte	$3c, $f2, $e4, $f2, $fa, $08, $11, $12, $16, $1a, $e6, $e5, $e3, $eb, $dc, $bc
0c1e9     CB D1 DE EB 
0c1ed     F1 E2 F3 FD 
0c1f1     09 16 23 2E 
0c1f5     37 39 3E 44 | 	byte	$cb, $d1, $de, $eb, $f1, $e2, $f3, $fd, $09, $16, $23, $2e, $37, $39, $3e, $44
0c1f9     33 E4 E9 F2 
0c1fd     FE 0B 12 12 
0c201     18 15 E4 E5 
0c205     E5 EE D1 BF | 	byte	$33, $e4, $e9, $f2, $fe, $0b, $12, $12, $18, $15, $e4, $e5, $e5, $ee, $d1, $bf
0c209     D0 D2 DF ED 
0c20d     DF E5 F7 FE 
0c211     0E 1A 26 31 
0c215     3A 3B 40 46 | 	byte	$d0, $d2, $df, $ed, $df, $e5, $f7, $fe, $0e, $1a, $26, $31, $3a, $3b, $40, $46
0c219     1F E2 ED F3 
0c21d     02 0D 12 12 
0c221     1A 0C E7 E5 
0c225     E7 F0 C7 C2 | 	byte	$1f, $e2, $ed, $f3, $02, $0d, $12, $12, $1a, $0c, $e7, $e5, $e7, $f0, $c7, $c2
0c229     D2 D2 E2 EF 
0c22d     DC EB F9 01 
0c231     10 1D 2A 33 
0c235     3B 3C 41 46 | 	byte	$d2, $d2, $e2, $ef, $dc, $eb, $f9, $01, $10, $1d, $2a, $33, $3b, $3c, $41, $46
0c239     0B E5 F0 F5 
0c23d     05 0F 11 14 
0c241     19 FC E9 E6 
0c245     E9 EF BE C7 | 	byte	$0b, $e5, $f0, $f5, $05, $0f, $11, $14, $19, $fc, $e9, $e6, $e9, $ef, $be, $c7
0c249     D0 D3 E5 E0 
0c24d     DE F2 F9 06 
0c251     13 21 2C 37 
0c255     3C 3F 42 38 | 	byte	$d0, $d3, $e5, $e0, $de, $f2, $f9, $06, $13, $21, $2c, $37, $3c, $3f, $42, $38
0c259     FE EB F0 F9 
0c25d     07 10 0F 15 
0c261     15 F4 E9 E6 
0c265     EB E8 BD CB | 	byte	$fe, $eb, $f0, $f9, $07, $10, $0f, $15, $15, $f4, $e9, $e6, $eb, $e8, $bd, $cb
0c269     CE DA E8 D7 
0c26d     E1 F6 FA 0A 
0c271     17 25 2D 3B 
0c275     3D 41 43 21 | 	byte	$ce, $da, $e8, $d7, $e1, $f6, $fa, $0a, $17, $25, $2d, $3b, $3d, $41, $43, $21
0c279     00 F2 F0 FF 
0c27d     09 11 0F 17 
0c281     14 F0 E8 E7 
0c285     EF DB BE CD | 	byte	$00, $f2, $f0, $ff, $09, $11, $0f, $17, $14, $f0, $e8, $e7, $ef, $db, $be, $cd
0c289     CD DD E3 D8 
0c28d     E7 F7 FA 0D 
0c291     19 26 2F 3B 
0c295     3E 41 3E 0A | 	byte	$cd, $dd, $e3, $d8, $e7, $f7, $fa, $0d, $19, $26, $2f, $3b, $3e, $41, $3e, $0a
0c299     02 F5 EE 01 
0c29d     0B 10 0F 13 
0c2a1     15 EF E6 E8 
0c2a5     F1 CB BF CD | 	byte	$02, $f5, $ee, $01, $0b, $10, $0f, $13, $15, $ef, $e6, $e8, $f1, $cb, $bf, $cd
0c2a9     CF E1 D2 D9 
0c2ad     EC F8 FE 10 
0c2b1     1C 29 32 3D 
0c2b5     40 41 2D 06 | 	byte	$cf, $e1, $d2, $d9, $ec, $f8, $fe, $10, $1c, $29, $32, $3d, $40, $41, $2d, $06
0c2b9     09 F8 F1 03 
0c2bd     0D 0E 0F 0F 
0c2c1     18 ED E5 EA 
0c2c5     F1 C2 C0 CF | 	byte	$09, $f8, $f1, $03, $0d, $0e, $0f, $0f, $18, $ed, $e5, $ea, $f1, $c2, $c0, $cf
0c2c9     D3 E2 CE DF 
0c2cd     F1 F8 03 13 
0c2d1     20 2B 35 3F 
0c2d5     41 41 0E 07 | 	byte	$d3, $e2, $ce, $df, $f1, $f8, $03, $13, $20, $2b, $35, $3f, $41, $41, $0e, $07
0c2d9     0F F8 F4 06 
0c2dd     0C 0D 0D 10 
0c2e1     14 EE E4 EC 
0c2e5     EB BB C0 D2 | 	byte	$0f, $f8, $f4, $06, $0c, $0d, $0d, $10, $14, $ee, $e4, $ec, $eb, $bb, $c0, $d2
0c2e9     D5 D8 D1 E4 
0c2ed     F3 F8 06 17 
0c2f1     22 2E 36 41 
0c2f5     41 3A 02 0D | 	byte	$d5, $d8, $d1, $e4, $f3, $f8, $06, $17, $22, $2e, $36, $41, $41, $3a, $02, $0d
0c2f9     14 F6 F8 09 
0c2fd     0B 0D 09 14 
0c301     11 EE E5 F1 
0c305     E0 B9 C2 D6 | 	byte	$14, $f6, $f8, $09, $0b, $0d, $09, $14, $11, $ee, $e5, $f1, $e0, $b9, $c2, $d6
0c309     D9 CB D4 EA 
0c30d     F3 FB 09 1A 
0c311     25 30 39 43 
0c315     42 1D 01 12 | 	byte	$d9, $cb, $d4, $ea, $f3, $fb, $09, $1a, $25, $30, $39, $43, $42, $1d, $01, $12
0c319     18 F8 FC 0A 
0c31d     0B 0B 08 19 
0c321     10 EE E6 F3 
0c325     CA B8 C8 D9 | 	byte	$18, $f8, $fc, $0a, $0b, $0b, $08, $19, $10, $ee, $e6, $f3, $ca, $b8, $c8, $d9
0c329     D6 C9 D8 EC 
0c32d     F4 FD 0D 1C 
0c331     27 33 3B 43 
0c335     3F 07 04 15 | 	byte	$d6, $c9, $d8, $ec, $f4, $fd, $0d, $1c, $27, $33, $3b, $43, $3f, $07, $04, $15
0c339     18 FD FF 0A 
0c33d     0A 06 0C 1B 
0c341     07 EC E9 F2 
0c345     BF B9 CE DB | 	byte	$18, $fd, $ff, $0a, $0a, $06, $0c, $1b, $07, $ec, $e9, $f2, $bf, $b9, $ce, $db
0c349     CA CA E0 EF 
0c34d     F6 01 11 1F 
0c351     2A 35 3F 45 
0c355     33 FF 0A 1A | 	byte	$ca, $ca, $e0, $ef, $f6, $01, $11, $1f, $2a, $35, $3f, $45, $33, $ff, $0a, $1a
0c359     18 03 03 0A 
0c35d     09 04 10 1E 
0c361     07 E9 EC EB 
0c365     B6 BD D3 D8 | 	byte	$18, $03, $03, $0a, $09, $04, $10, $1e, $07, $e9, $ec, $eb, $b6, $bd, $d3, $d8
0c369     C3 CF E3 F0 
0c36d     F8 04 14 20 
0c371     2D 36 40 44 
0c375     17 FE 0F 1B | 	byte	$c3, $cf, $e3, $f0, $f8, $04, $14, $20, $2d, $36, $40, $44, $17, $fe, $0f, $1b
0c379     16 07 05 08 
0c37d     04 03 15 21 
0c381     FE E8 ED DD 
0c385     B3 C2 D9 CE | 	byte	$16, $07, $05, $08, $04, $03, $15, $21, $fe, $e8, $ed, $dd, $b3, $c2, $d9, $ce
0c389     C3 D3 E7 F2 
0c38d     F9 08 17 24 
0c391     2F 38 42 3E 
0c395     03 02 13 1A | 	byte	$c3, $d3, $e7, $f2, $f9, $08, $17, $24, $2f, $38, $42, $3e, $03, $02, $13, $1a
0c399     1A 0E 07 06 
0c39d     01 07 17 23 
0c3a1     FC E8 ED CD 
0c3a5     B5 C8 DB BF | 	byte	$1a, $0e, $07, $06, $01, $07, $17, $23, $fc, $e8, $ed, $cd, $b5, $c8, $db, $bf
0c3a9     C6 DB EB F4 
0c3ad     FB 0C 1B 26 
0c3b1     31 3B 43 29 
0c3b5     FE 08 17 17 | 	byte	$c6, $db, $eb, $f4, $fb, $0c, $1b, $26, $31, $3b, $43, $29, $fe, $08, $17, $17
0c3b9     1F 14 06 01 
0c3bd     FF 0B 1C 22 
0c3c1     F5 E7 EA BB 
0c3c5     B8 CF D9 B9 | 	byte	$1f, $14, $06, $01, $ff, $0b, $1c, $22, $f5, $e7, $ea, $bb, $b8, $cf, $d9, $b9
0c3c9     CB DE ED F6 
0c3cd     FE 0F 1D 29 
0c3d1     33 3C 43 10 
0c3d5     00 0C 19 15 | 	byte	$cb, $de, $ed, $f6, $fe, $0f, $1d, $29, $33, $3c, $43, $10, $00, $0c, $19, $15
0c3d9     23 17 06 FF 
0c3dd     FF 0F 1F 1E 
0c3e1     F3 E5 E7 B4 
0c3e5     BD D3 CA BB | 	byte	$23, $17, $06, $ff, $ff, $0f, $1f, $1e, $f3, $e5, $e7, $b4, $bd, $d3, $ca, $bb
0c3e9     D1 E3 EE F9 
0c3ed     01 11 1F 2B 
0c3f1     36 3D 38 00 
0c3f5     03 10 16 19 | 	byte	$d1, $e3, $ee, $f9, $01, $11, $1f, $2b, $36, $3d, $38, $00, $03, $10, $16, $19
0c3f9     28 1B 02 FD 
0c3fd     03 13 22 1C 
0c401     EF E3 DC B3 
0c405     C4 D5 BB C1 | 	byte	$28, $1b, $02, $fd, $03, $13, $22, $1c, $ef, $e3, $dc, $b3, $c4, $d5, $bb, $c1
0c409     D6 E5 F1 FA 
0c40d     06 14 22 2D 
0c411     37 3E 1F FF 
0c415     08 13 11 1F | 	byte	$d6, $e5, $f1, $fa, $06, $14, $22, $2d, $37, $3e, $1f, $ff, $08, $13, $11, $1f
0c419     2C 1D 00 F9 
0c41d     08 15 26 15 
0c421     E7 E3 CF B5 
0c425     CA D1 B4 C7 | 	byte	$2c, $1d, $00, $f9, $08, $15, $26, $15, $e7, $e3, $cf, $b5, $ca, $d1, $b4, $c7
0c429     DB E9 F5 FB 
0c42d     0B 17 26 2F 
0c431     39 3E 07 02 
0c435     0D 13 14 23 | 	byte	$db, $e9, $f5, $fb, $0b, $17, $26, $2f, $39, $3e, $07, $02, $0d, $13, $14, $23
0c439     2F 1F 00 F9 
0c43d     0C 1B 29 0E 
0c441     E4 E5 C7 BA 
0c445     CE C4 B4 CC | 	byte	$2f, $1f, $00, $f9, $0c, $1b, $29, $0e, $e4, $e5, $c7, $ba, $ce, $c4, $b4, $cc
0c449     DF EC F7 FE 
0c44d     0C 1A 27 31 
0c451     3A 2D 00 06 
0c455     0F 0C 18 28 | 	byte	$df, $ec, $f7, $fe, $0c, $1a, $27, $31, $3a, $2d, $00, $06, $0f, $0c, $18, $28
0c459     30 1A FE FC 
0c45d     0E 1F 2A 05 
0c461     DE E5 B9 BE 
0c465     CE B6 BA D1 | 	byte	$30, $1a, $fe, $fc, $0e, $1f, $2a, $05, $de, $e5, $b9, $be, $ce, $b6, $ba, $d1
0c469     E2 EF FA 00 
0c46d     0F 1E 29 34 
0c471     3A 16 01 0B 
0c475     0F 0B 1D 2B | 	byte	$e2, $ef, $fa, $00, $0f, $1e, $29, $34, $3a, $16, $01, $0b, $0f, $0b, $1d, $2b
0c479     30 1C FC 01 
0c47d     13 22 29 FB 
0c481     DE E3 B6 C4 
0c485     C7 B0 C2 D6 | 	byte	$30, $1c, $fc, $01, $13, $22, $29, $fb, $de, $e3, $b6, $c4, $c7, $b0, $c2, $d6
0c489     E6 F1 FE 03 
0c48d     13 20 2B 35 
0c491     35 01 05 0F 
0c495     08 11 21 2D | 	byte	$e6, $f1, $fe, $03, $13, $20, $2b, $35, $35, $01, $05, $0f, $08, $11, $21, $2d
0c499     2F 1C FB 05 
0c49d     17 24 24 F2 
0c4a1     E0 DB B7 C7 
0c4a5     BC AF C7 DA | 	byte	$2f, $1c, $fb, $05, $17, $24, $24, $f2, $e0, $db, $b7, $c7, $bc, $af, $c7, $da
0c4a9     EA F3 FF 06 
0c4ad     15 23 2E 37 
0c4b1     1C FE 0A 0F 
0c4b5     05 16 25 30 | 	byte	$ea, $f3, $ff, $06, $15, $23, $2e, $37, $1c, $fe, $0a, $0f, $05, $16, $25, $30
0c4b9     2E 1D FE 09 
0c4bd     1B 25 1F E9 
0c4c1     E3 CA BA C6 
0c4c5     B1 B5 CC DF | 	byte	$2e, $1d, $fe, $09, $1b, $25, $1f, $e9, $e3, $ca, $ba, $c6, $b1, $b5, $cc, $df
0c4c9     EC F8 01 09 
0c4cd     17 24 2F 36 
0c4d1     04 01 0D 07 
0c4d5     0A 1A 28 30 | 	byte	$ec, $f8, $01, $09, $17, $24, $2f, $36, $04, $01, $0d, $07, $0a, $1a, $28, $30
0c4d9     2D 1B 03 0E 
0c4dd     1C 25 19 E7 
0c4e1     E5 C1 BD BE 
0c4e5     A9 BE D0 E2 | 	byte	$2d, $1b, $03, $0e, $1c, $25, $19, $e7, $e5, $c1, $bd, $be, $a9, $be, $d0, $e2
0c4e9     EE FC 02 0C 
0c4ed     1A 27 31 2C 
0c4f1     FA 04 0E 03 
0c4f5     0E 1F 2C 30 | 	byte	$ee, $fc, $02, $0c, $1a, $27, $31, $2c, $fa, $04, $0e, $03, $0e, $1f, $2c, $30
0c4f9     2B 1A 0A 11 
0c4fd     1E 25 12 E6 
0c501     E3 B9 BE B4 
0c505     A9 C2 D5 E7 | 	byte	$2b, $1a, $0a, $11, $1e, $25, $12, $e6, $e3, $b9, $be, $b4, $a9, $c2, $d5, $e7
0c509     F2 FF 03 10 
0c50d     1D 29 32 0D 
0c511     FB 0A 08 09 
0c515     14 23 30 2F | 	byte	$f2, $ff, $03, $10, $1d, $29, $32, $0d, $fb, $0a, $08, $09, $14, $23, $30, $2f
0c519     2A 1C 10 15 
0c51d     1E 25 0D E6 
0c521     DF B8 BB A9 
0c525     B0 C7 D9 EA | 	byte	$2a, $1c, $10, $15, $1e, $25, $0d, $e6, $df, $b8, $bb, $a9, $b0, $c7, $d9, $ea
0c529     F3 02 04 12 
0c52d     20 2B 2F FA 
0c531     FC 0B 02 0C 
0c535     18 27 30 2D | 	byte	$f3, $02, $04, $12, $20, $2b, $2f, $fa, $fc, $0b, $02, $0c, $18, $27, $30, $2d
0c539     26 20 15 15 
0c53d     1E 24 04 E6 
0c541     D4 B9 B3 A2 
0c545     B8 CB DE ED | 	byte	$26, $20, $15, $15, $1e, $24, $04, $e6, $d4, $b9, $b3, $a2, $b8, $cb, $de, $ed
0c549     F6 03 06 14 
0c54d     23 2C 1B F4 
0c551     03 03 09 0F 
0c555     1D 2A 30 2D | 	byte	$f6, $03, $06, $14, $23, $2c, $1b, $f4, $03, $03, $09, $0f, $1d, $2a, $30, $2d
0c559     23 26 1C 16 
0c55d     1F 25 FF E7 
0c561     C6 B6 AB A3 
0c565     BD D0 E3 EF | 	byte	$23, $26, $1c, $16, $1f, $25, $ff, $e7, $c6, $b6, $ab, $a3, $bd, $d0, $e3, $ef
0c569     FB 05 0A 17 
0c56d     24 2D 03 F6 
0c571     04 00 0D 14 
0c575     21 2C 2F 29 | 	byte	$fb, $05, $0a, $17, $24, $2d, $03, $f6, $04, $00, $0d, $14, $21, $2c, $2f, $29
0c579     23 2B 1E 16 
0c57d     21 25 F9 E7 
0c581     BB AF A1 AB 
0c585     C3 D4 E6 F2 | 	byte	$23, $2b, $1e, $16, $21, $25, $f9, $e7, $bb, $af, $a1, $ab, $c3, $d4, $e6, $f2
0c589     FD 04 0D 19 
0c58d     26 25 F2 F9 
0c591     FC 06 10 18 
0c595     24 2F 2E 24 | 	byte	$fd, $04, $0d, $19, $26, $25, $f2, $f9, $fc, $06, $10, $18, $24, $2f, $2e, $24
0c599     29 30 1F 17 
0c59d     23 21 F7 E0 
0c5a1     B5 A8 9C B2 
0c5a5     C8 D8 E9 F6 | 	byte	$29, $30, $1f, $17, $23, $21, $f7, $e0, $b5, $a8, $9c, $b2, $c8, $d8, $e9, $f6
0c5a9     00 03 0F 1B 
0c5ad     28 10 F0 FB 
0c5b1     FA 0A 14 1C 
0c5b5     28 2F 2D 20 | 	byte	$00, $03, $0f, $1b, $28, $10, $f0, $fb, $fa, $0a, $14, $1c, $28, $2f, $2d, $20
0c5b9     2C 32 23 1B 
0c5bd     26 1C F5 D8 
0c5c1     AE A1 9F B7 
0c5c5     CB DC EC F8 | 	byte	$2c, $32, $23, $1b, $26, $1c, $f5, $d8, $ae, $a1, $9f, $b7, $cb, $dc, $ec, $f8
0c5c9     02 04 12 1E 
0c5cd     26 F5 F2 F4 
0c5d1     02 0F 17 20 
0c5d5     2B 2F 28 22 | 	byte	$02, $04, $12, $1e, $26, $f5, $f2, $f4, $02, $0f, $17, $20, $2b, $2f, $28, $22
0c5d9     2F 35 25 1E 
0c5dd     29 18 F2 C7 
0c5e1     A6 9A A7 BB 
0c5e5     CF E0 F0 FA | 	byte	$2f, $35, $25, $1e, $29, $18, $f2, $c7, $a6, $9a, $a7, $bb, $cf, $e0, $f0, $fa
0c5e9     03 06 14 20 
0c5ed     19 EC F3 F2 
0c5f1     05 13 1C 24 
0c5f5     2F 2E 23 27 | 	byte	$03, $06, $14, $20, $19, $ec, $f3, $f2, $05, $13, $1c, $24, $2f, $2e, $23, $27
0c5f9     33 36 29 23 
0c5fd     2B 14 F0 B9 
0c601     9F 96 AE C1 
0c605     D3 E3 F4 FC | 	byte	$33, $36, $29, $23, $2b, $14, $f0, $b9, $9f, $96, $ae, $c1, $d3, $e3, $f4, $fc
0c609     01 09 16 21 
0c60d     FF EC EE F9 
0c611     0A 16 1E 27 
0c615     2F 2A 20 28 | 	byte	$01, $09, $16, $21, $ff, $ec, $ee, $f9, $0a, $16, $1e, $27, $2f, $2a, $20, $28
0c619     32 37 2E 28 
0c61d     2B 0D EC A8 
0c621     99 98 B1 C5 
0c625     D7 E8 F6 FE | 	byte	$32, $37, $2e, $28, $2b, $0d, $ec, $a8, $99, $98, $b1, $c5, $d7, $e8, $f6, $fe
0c629     FF 0D 18 1D 
0c62d     EA EC EA FE 
0c631     0E 1A 22 2B 
0c635     2F 23 22 2B | 	byte	$ff, $0d, $18, $1d, $ea, $ec, $ea, $fe, $0e, $1a, $22, $2b, $2f, $23, $22, $2b
0c639     33 3B 34 2D 
0c63d     29 0A DD 9F 
0c641     93 A2 B6 CB 
0c645     DA EB FA FF | 	byte	$33, $3b, $34, $2d, $29, $0a, $dd, $9f, $93, $a2, $b6, $cb, $da, $eb, $fa, $ff
0c649     00 10 1B 07 
0c64d     E6 E8 F0 02 
0c651     12 1E 26 2E 
0c655     2B 20 24 2C | 	byte	$00, $10, $1b, $07, $e6, $e8, $f0, $02, $12, $1e, $26, $2e, $2b, $20, $24, $2c
0c659     34 3F 39 30 
0c65d     27 03 C8 97 
0c661     90 A7 BC CD 
0c665     DF ED FB FC | 	byte	$34, $3f, $39, $30, $27, $03, $c8, $97, $90, $a7, $bc, $cd, $df, $ed, $fb, $fc
0c669     03 12 1B EF 
0c66d     E7 E4 F7 07 
0c671     16 23 29 2F 
0c675     24 21 25 2D | 	byte	$03, $12, $1b, $ef, $e7, $e4, $f7, $07, $16, $23, $29, $2f, $24, $21, $25, $2d
0c679     39 43 3F 34 
0c67d     25 00 AD 93 
0c681     93 AC C1 D1 
0c685     E1 F1 FD F9 | 	byte	$39, $43, $3f, $34, $25, $00, $ad, $93, $93, $ac, $c1, $d1, $e1, $f1, $fd, $f9
0c689     07 13 10 E2 
0c68d     E3 E7 FA 0C 
0c691     1A 25 2C 2E 
0c695     1E 21 26 30 | 	byte	$07, $13, $10, $e2, $e3, $e7, $fa, $0c, $1a, $25, $2c, $2e, $1e, $21, $26, $30
0c699     3C 48 44 36 
0c69d     1F FA A0 90 
0c6a1     97 B1 C3 D5 
0c6a5     E4 F3 FE F8 | 	byte	$3c, $48, $44, $36, $1f, $fa, $a0, $90, $97, $b1, $c3, $d5, $e4, $f3, $fe, $f8
0c6a9     0A 15 F6 E0 
0c6ad     DF EE FF 10 
0c6b1     1E 28 2F 26 
0c6b5     1F 20 27 34 | 	byte	$0a, $15, $f6, $e0, $df, $ee, $ff, $10, $1e, $28, $2f, $26, $1f, $20, $27, $34
0c6b9     41 4C 48 38 
0c6bd     1E E7 95 8E 
0c6c1     9E B6 C7 D9 
0c6c5     E7 F6 FB FC | 	byte	$41, $4c, $48, $38, $1e, $e7, $95, $8e, $9e, $b6, $c7, $d9, $e7, $f6, $fb, $fc
0c6c9     0B 14 E3 E0 
0c6cd     DF F3 04 14 
0c6d1     22 2C 2F 20 
0c6d5     20 21 2A 37 | 	byte	$0b, $14, $e3, $e0, $df, $f3, $04, $14, $22, $2c, $2f, $20, $20, $21, $2a, $37
0c6d9     46 50 4D 3B 
0c6dd     18 D3 91 8D 
0c6e1     A5 B9 CB DB 
0c6e5     EB F7 F7 FF | 	byte	$46, $50, $4d, $3b, $18, $d3, $91, $8d, $a5, $b9, $cb, $db, $eb, $f7, $f7, $ff
0c6e9     0D 06 DB DD 
0c6ed     E5 F6 08 17 
0c6f1     25 2E 28 1F 
0c6f5     1E 21 2C 3B | 	byte	$0d, $06, $db, $dd, $e5, $f6, $08, $17, $25, $2e, $28, $1f, $1e, $21, $2c, $3b
0c6f9     49 53 50 3A 
0c6fd     13 B5 8F 8E 
0c701     AA BD CF DE 
0c705     ED F7 F7 01 | 	byte	$49, $53, $50, $3a, $13, $b5, $8f, $8e, $aa, $bd, $cf, $de, $ed, $f7, $f7, $01
0c709     0E EB DB DA 
0c70d     EC FB 0C 1B 
0c711     29 2F 23 1D 
0c715     1D 24 31 41 | 	byte	$0e, $eb, $db, $da, $ec, $fb, $0c, $1b, $29, $2f, $23, $1d, $1d, $24, $31, $41
0c719     4D 56 54 3C 
0c71d     03 A5 8E 91 
0c721     AD C2 D1 E1 
0c725     F0 F4 FA 03 | 	byte	$4d, $56, $54, $3c, $03, $a5, $8e, $91, $ad, $c2, $d1, $e1, $f0, $f4, $fa, $03
0c729     08 D7 DB DC 
0c72d     EF 00 11 20 
0c731     2C 28 24 1C 
0c735     1D 27 35 44 | 	byte	$08, $d7, $db, $dc, $ef, $00, $11, $20, $2c, $28, $24, $1c, $1d, $27, $35, $44
0c739     51 59 56 35 
0c73d     F5 95 8F 98 
0c741     B0 C4 D5 E3 
0c745     F1 F1 FC 07 | 	byte	$51, $59, $56, $35, $f5, $95, $8f, $98, $b0, $c4, $d5, $e3, $f1, $f1, $fc, $07
0c749     F5 D5 D9 E2 
0c74d     F4 03 15 25 
0c751     2C 27 21 1C 
0c755     1F 2B 3B 48 | 	byte	$f5, $d5, $d9, $e2, $f4, $03, $15, $25, $2c, $27, $21, $1c, $1f, $2b, $3b, $48
0c759     53 5D 58 30 
0c75d     E5 93 8F 9E 
0c761     B5 C7 D7 E7 
0c765     EF F3 FC 07 | 	byte	$53, $5d, $58, $30, $e5, $93, $8f, $9e, $b5, $c7, $d7, $e7, $ef, $f3, $fc, $07
0c769     D8 D6 D6 E7 
0c76d     F8 08 18 27 
0c771     26 29 1E 1B 
0c775     21 2F 3F 4D | 	byte	$d8, $d6, $d6, $e7, $f8, $08, $18, $27, $26, $29, $1e, $1b, $21, $2f, $3f, $4d
0c779     57 5F 57 2D 
0c77d     CA 92 90 A4 
0c781     B8 CB DA E8 
0c785     EB F6 FE FC | 	byte	$57, $5f, $57, $2d, $ca, $92, $90, $a4, $b8, $cb, $da, $e8, $eb, $f6, $fe, $fc
0c789     CF D7 D7 EB 
0c78d     FC 0C 1B 26 
0c791     26 26 1C 1B 
0c795     25 34 43 50 | 	byte	$cf, $d7, $d7, $eb, $fc, $0c, $1b, $26, $26, $26, $1c, $1b, $25, $34, $43, $50
0c799     59 61 57 22 
0c79d     B6 93 91 A9 
0c7a1     BC CE DC E9 
0c7a5     E9 F8 FF DE | 	byte	$59, $61, $57, $22, $b6, $93, $91, $a9, $bc, $ce, $dc, $e9, $e9, $f8, $ff, $de
0c7a9     CF D7 DD F0 
0c7ad     00 10 20 21 
0c7b1     2A 22 1B 1E 
0c7b5     2A 3A 48 54 | 	byte	$cf, $d7, $dd, $f0, $00, $10, $20, $21, $2a, $22, $1b, $1e, $2a, $3a, $48, $54
0c7b9     5D 63 51 15 
0c7bd     AD 96 93 AC 
0c7c1     BF D1 DF E6 
0c7c5     ED F8 FB CD | 	byte	$5d, $63, $51, $15, $ad, $96, $93, $ac, $bf, $d1, $df, $e6, $ed, $f8, $fb, $cd
0c7c9     D2 D4 E3 F3 
0c7cd     04 13 1E 21 
0c7d1     29 1F 1A 20 
0c7d5     2E 3C 4B 56 | 	byte	$d2, $d4, $e3, $f3, $04, $13, $1e, $21, $29, $1f, $1a, $20, $2e, $3c, $4b, $56
0c7d9     5F 62 4A 0D 
0c7dd     A6 99 95 AE 
0c7e1     C3 D2 E1 E2 
0c7e5     F0 FA EB C7 | 	byte	$5f, $62, $4a, $0d, $a6, $99, $95, $ae, $c3, $d2, $e1, $e2, $f0, $fa, $eb, $c7
0c7e9     D5 D3 E8 F8 
0c7ed     08 16 19 26 
0c7f1     27 1D 1C 25 
0c7f5     33 43 4F 59 | 	byte	$d5, $d3, $e8, $f8, $08, $16, $19, $26, $27, $1d, $1c, $25, $33, $43, $4f, $59
0c7f9     62 5F 45 F1 
0c7fd     A6 9D 9A B1 
0c801     C6 D5 E1 E3 
0c805     F2 F9 D2 C9 | 	byte	$62, $5f, $45, $f1, $a6, $9d, $9a, $b1, $c6, $d5, $e1, $e3, $f2, $f9, $d2, $c9
0c809     D7 D7 EB FC 
0c80d     0C 16 1C 27 
0c811     22 1D 1E 28 
0c815     36 45 52 5C | 	byte	$d7, $d7, $eb, $fc, $0c, $16, $1c, $27, $22, $1d, $1e, $28, $36, $45, $52, $5c
0c819     63 5A 3E DD 
0c81d     A8 A0 9B B3 
0c821     C8 D7 DD E7 
0c825     F3 EE C1 CC | 	byte	$63, $5a, $3e, $dd, $a8, $a0, $9b, $b3, $c8, $d7, $dd, $e7, $f3, $ee, $c1, $cc
0c829     D6 DC EF 00 
0c82d     0F 13 21 27 
0c831     20 1E 22 2C 
0c835     3B 48 54 5E | 	byte	$d6, $dc, $ef, $00, $0f, $13, $21, $27, $20, $1e, $22, $2c, $3b, $48, $54, $5e
0c839     61 53 36 D5 
0c83d     AB A4 A2 B6 
0c841     C9 D9 DA E8 
0c845     F4 DA C5 D7 | 	byte	$61, $53, $36, $d5, $ab, $a4, $a2, $b6, $c9, $d9, $da, $e8, $f4, $da, $c5, $d7
0c849     D6 E4 F5 05 
0c84d     0F 14 21 21 
0c851     1E 1C 21 2C 
0c855     39 47 51 5A | 	byte	$d6, $e4, $f5, $05, $0f, $14, $21, $21, $1e, $1c, $21, $2c, $39, $47, $51, $5a
0c859     58 4A 24 D3 
0c85d     B4 AB A7 BC 
0c861     CC D9 DB E9 
0c865     F1 CB CE E0 | 	byte	$58, $4a, $24, $d3, $b4, $ab, $a7, $bc, $cc, $d9, $db, $e9, $f1, $cb, $ce, $e0
0c869     DB EE FC 0B 
0c86d     0D 19 21 1D 
0c871     1C 1B 20 2B 
0c875     37 43 4D 54 | 	byte	$db, $ee, $fc, $0b, $0d, $19, $21, $1d, $1c, $1b, $20, $2b, $37, $43, $4d, $54
0c879     4F 3E 14 D1 
0c87d     BC AF B2 C1 
0c881     D1 DA E1 EE 
0c885     E9 CC D8 E6 | 	byte	$4f, $3e, $14, $d1, $bc, $af, $b2, $c1, $d1, $da, $e1, $ee, $e9, $cc, $d8, $e6
0c889     E5 F5 04 0E 
0c88d     10 1B 1E 1C 
0c891     1A 1B 20 2B 
0c895     36 40 49 4D | 	byte	$e5, $f5, $04, $0e, $10, $1b, $1e, $1c, $1a, $1b, $20, $2b, $36, $40, $49, $4d
0c899     44 34 05 D4 
0c89d     C2 B5 B7 C5 
0c8a1     D4 DA E5 EE 
0c8a5     D8 D2 E2 E8 | 	byte	$44, $34, $05, $d4, $c2, $b5, $b7, $c5, $d4, $da, $e5, $ee, $d8, $d2, $e2, $e8
0c8a9     EC FA 08 0C 
0c8ad     14 1A 19 1A 
0c8b1     19 19 1E 28 
0c8b5     32 3C 44 44 | 	byte	$ec, $fa, $08, $0c, $14, $1a, $19, $1a, $19, $19, $1e, $28, $32, $3c, $44, $44
0c8b9     39 28 FB D8 
0c8bd     C7 B9 BE C9 
0c8c1     D6 DB E7 EE 
0c8c5     D2 DA EA EA | 	byte	$39, $28, $fb, $d8, $c7, $b9, $be, $c9, $d6, $db, $e7, $ee, $d2, $da, $ea, $ea
0c8c9     F5 00 0A 0C 
0c8cd     15 19 17 18 
0c8d1     17 18 1D 26 
0c8d5     2F 38 3E 3B | 	byte	$f5, $00, $0a, $0c, $15, $19, $17, $18, $17, $18, $1d, $26, $2f, $38, $3e, $3b
0c8d9     2F 1F F3 DA 
0c8dd     CB BD C3 CD 
0c8e1     D8 DE EA E6 
0c8e5     D6 E3 EE ED | 	byte	$2f, $1f, $f3, $da, $cb, $bd, $c3, $cd, $d8, $de, $ea, $e6, $d6, $e3, $ee, $ed
0c8e9     F9 05 0B 0F 
0c8ed     16 15 16 17 
0c8f1     16 17 1C 25 
0c8f5     2E 35 39 32 | 	byte	$f9, $05, $0b, $0f, $16, $15, $16, $17, $16, $17, $1c, $25, $2e, $35, $39, $32
0c8f9     26 10 EF DB 
0c8fd     CF C1 C8 D2 
0c901     DA E3 EC DA 
0c905     DD EA F1 F2 | 	byte	$26, $10, $ef, $db, $cf, $c1, $c8, $d2, $da, $e3, $ec, $da, $dd, $ea, $f1, $f2
0c909     FE 08 0A 12 
0c90d     14 14 16 15 
0c911     15 17 1C 23 
0c915     2B 32 32 27 | 	byte	$fe, $08, $0a, $12, $14, $14, $16, $15, $15, $17, $1c, $23, $2b, $32, $32, $27
0c919     1C 07 EB DB 
0c91d     CF C5 CC D6 
0c921     DC E6 EB DA 
0c925     E4 EF F2 F7 | 	byte	$1c, $07, $eb, $db, $cf, $c5, $cc, $d6, $dc, $e6, $eb, $da, $e4, $ef, $f2, $f7
0c929     01 09 0C 11 
0c92d     12 13 14 14 
0c931     14 16 1B 23 
0c935     2A 2F 2A 1F | 	byte	$01, $09, $0c, $11, $12, $13, $14, $14, $14, $16, $1b, $23, $2a, $2f, $2a, $1f
0c939     13 FE EA DD 
0c93d     D2 CA D1 DA 
0c941     E0 EA E4 E0 
0c945     EB F4 F4 FD | 	byte	$13, $fe, $ea, $dd, $d2, $ca, $d1, $da, $e0, $ea, $e4, $e0, $eb, $f4, $f4, $fd
0c949     06 09 0E 10 
0c94d     0F 11 13 12 
0c951     13 15 1B 22 
0c955     28 2A 23 16 | 	byte	$06, $09, $0e, $10, $0f, $11, $13, $12, $13, $15, $1b, $22, $28, $2a, $23, $16
0c959     0C F8 E8 DD 
0c95d     D3 CF D5 DE 
0c961     E3 EC E1 E6 
0c965     F0 F7 F8 01 | 	byte	$0c, $f8, $e8, $dd, $d3, $cf, $d5, $de, $e3, $ec, $e1, $e6, $f0, $f7, $f8, $01
0c969     08 0A 0F 0F 
0c96d     0F 11 12 12 
0c971     13 17 1D 23 
0c975     28 25 1B 10 | 	byte	$08, $0a, $0f, $0f, $0f, $11, $12, $12, $13, $17, $1d, $23, $28, $25, $1b, $10
0c979     08 F5 E9 DE 
0c97d     D6 D5 DA E2 
0c981     E8 EB E3 EC 
0c985     F5 F8 FD 04 | 	byte	$08, $f5, $e9, $de, $d6, $d5, $da, $e2, $e8, $eb, $e3, $ec, $f5, $f8, $fd, $04
0c989     0A 0B 0D 0C 
0c98d     0E 10 11 10 
0c991     12 16 1B 21 
0c995     23 1D 11 0A | 	byte	$0a, $0b, $0d, $0c, $0e, $10, $11, $10, $12, $16, $1b, $21, $23, $1d, $11, $0a
0c999     01 F2 E8 DE 
0c99d     D7 D9 DE E4 
0c9a1     EB E8 E8 F2 
0c9a5     F8 FA 01 08 | 	byte	$01, $f2, $e8, $de, $d7, $d9, $de, $e4, $eb, $e8, $e8, $f2, $f8, $fa, $01, $08
0c9a9     0A 0C 0C 0C 
0c9ad     0E 10 10 11 
0c9b1     13 17 1C 21 
0c9b5     1F 16 0C 06 | 	byte	$0a, $0c, $0c, $0c, $0e, $10, $10, $11, $13, $17, $1c, $21, $1f, $16, $0c, $06
0c9b9     FD F2 E8 E1 
0c9bd     DA DD E3 E8 
0c9c1     EE E8 ED F6 
0c9c5     FC FD 04 0A | 	byte	$fd, $f2, $e8, $e1, $da, $dd, $e3, $e8, $ee, $e8, $ed, $f6, $fc, $fd, $04, $0a
0c9c9     0A 0C 0A 0B 
0c9cd     0E 0F 0F 10 
0c9d1     12 17 1C 1E 
0c9d5     18 0E 06 02 | 	byte	$0a, $0c, $0a, $0b, $0e, $0f, $0f, $10, $12, $17, $1c, $1e, $18, $0e, $06, $02
0c9d9     F9 F0 E8 E1 
0c9dd     DC E0 E6 EA 
0c9e1     EC EA F2 F9 
0c9e5     FC 01 07 0A | 	byte	$f9, $f0, $e8, $e1, $dc, $e0, $e6, $ea, $ec, $ea, $f2, $f9, $fc, $01, $07, $0a
0c9e9     0A 0A 0A 0C 
0c9ed     0E 0F 0F 10 
0c9f1     14 18 1B 1A 
0c9f5     12 08 03 00 | 	byte	$0a, $0a, $0a, $0c, $0e, $0f, $0f, $10, $14, $18, $1b, $1a, $12, $08, $03, $00
0c9f9     F8 F0 E8 E3 
0c9fd     E1 E5 EA EE 
0ca01     EC EF F6 FC 
0ca05     FE 03 08 09 | 	byte	$f8, $f0, $e8, $e3, $e1, $e5, $ea, $ee, $ec, $ef, $f6, $fc, $fe, $03, $08, $09
0ca09     09 08 09 0C 
0ca0d     0E 0E 0E 10 
0ca11     13 18 19 13 
0ca15     0B 03 00 FD | 	byte	$09, $08, $09, $0c, $0e, $0e, $0e, $10, $13, $18, $19, $13, $0b, $03, $00, $fd
0ca19     F6 F0 E9 E4 
0ca1d     E3 E7 ED EF 
0ca21     ED F2 F9 FD 
0ca25     00 05 09 07 | 	byte	$f6, $f0, $e9, $e4, $e3, $e7, $ed, $ef, $ed, $f2, $f9, $fd, $00, $05, $09, $07
0ca29     07 07 0A 0C 
0ca2d     0E 0E 0F 11 
0ca31     14 17 15 0E 
0ca35     06 00 FE FC | 	byte	$07, $07, $0a, $0c, $0e, $0e, $0f, $11, $14, $17, $15, $0e, $06, $00, $fe, $fc
0ca39     F6 F0 EA E6 
0ca3d     E7 EB EF EF 
0ca41     F1 F6 FD FF 
0ca45     03 07 08 07 | 	byte	$f6, $f0, $ea, $e6, $e7, $eb, $ef, $ef, $f1, $f6, $fd, $ff, $03, $07, $08, $07
0ca49     06 08 0B 0C 
0ca4d     0D 0D 0F 11 
0ca51     15 15 11 09 
0ca55     01 FE FE FA | 	byte	$06, $08, $0b, $0c, $0d, $0d, $0f, $11, $15, $15, $11, $09, $01, $fe, $fe, $fa
0ca59     F5 F0 EB E8 
0ca5d     EA EE F1 F0 
0ca61     F4 FA FE 00 
0ca65     04 07 06 05 | 	byte	$f5, $f0, $eb, $e8, $ea, $ee, $f1, $f0, $f4, $fa, $fe, $00, $04, $07, $06, $05
0ca69     05 08 0A 0C 
0ca6d     0D 0D 0F 11 
0ca71     13 11 0B 03 
0ca75     FE FD FC F9 | 	byte	$05, $08, $0a, $0c, $0d, $0d, $0f, $11, $13, $11, $0b, $03, $fe, $fd, $fc, $f9
0ca79     F5 F0 EC EB 
0ca7d     EC F1 F2 F2 
0ca81     F7 FC FF 02 
0ca85     05 06 05 04 | 	byte	$f5, $f0, $ec, $eb, $ec, $f1, $f2, $f2, $f7, $fc, $ff, $02, $05, $06, $05, $04
0ca89     06 08 0B 0C 
0ca8d     0C 0D 0F 11 
0ca91     11 0D 05 FF 
0ca95     FC FC FC F8 | 	byte	$06, $08, $0b, $0c, $0c, $0d, $0f, $11, $11, $0d, $05, $ff, $fc, $fc, $fc, $f8
0ca99     F4 F0 ED ED 
0ca9d     EF F3 F2 F5 
0caa1     FA FE 00 04 
0caa5     05 05 04 05 | 	byte	$f4, $f0, $ed, $ed, $ef, $f3, $f2, $f5, $fa, $fe, $00, $04, $05, $05, $04, $05
0caa9     07 0A 0B 0C 
0caad     0D 0E 0F 10 
0cab1     0E 09 02 FD 
0cab5     FB FC FB F8 | 	byte	$07, $0a, $0b, $0c, $0d, $0e, $0f, $10, $0e, $09, $02, $fd, $fb, $fc, $fb, $f8
0cab9     F5 F1 EE EF 
0cabd     F2 F4 F3 F8 
0cac1     FC FF 02 04 
0cac5     05 04 04 05 | 	byte	$f5, $f1, $ee, $ef, $f2, $f4, $f3, $f8, $fc, $ff, $02, $04, $05, $04, $04, $05
0cac9     07 0A 0B 0C 
0cacd     0D 0E 0E 0E 
0cad1     0A 04 FE FB 
0cad5     FB FB FA F8 | 	byte	$07, $0a, $0b, $0c, $0d, $0e, $0e, $0e, $0a, $04, $fe, $fb, $fb, $fb, $fa, $f8
0cad9     F5 F2 F0 F1 
0cadd     F4 F5 F5 FA 
0cae1     FF 00 02 03 
0cae5     04 03 04 06 | 	byte	$f5, $f2, $f0, $f1, $f4, $f5, $f5, $fa, $ff, $00, $02, $03, $04, $03, $04, $06
0cae9     08 0A 0B 0C 
0caed     0D 0D 0D 0B 
0caf1     07 00 FC FB 
0caf5     FB FC F9 F8 | 	byte	$08, $0a, $0b, $0c, $0d, $0d, $0d, $0b, $07, $00, $fc, $fb, $fb, $fc, $f9, $f8
0caf9     F6 F3 F2 F3 
0cafd     F6 F5 F9 FC 
0cb01     FF 01 03 03 
0cb05     03 02 04 06 | 	byte	$f6, $f3, $f2, $f3, $f6, $f5, $f9, $fc, $ff, $01, $03, $03, $03, $02, $04, $06
0cb09     08 0A 0B 0B 
0cb0d     0C 0C 0B 08 
0cb11     02 FD FB FA 
0cb15     FB FB FA F8 | 	byte	$08, $0a, $0b, $0b, $0c, $0c, $0b, $08, $02, $fd, $fb, $fa, $fb, $fb, $fa, $f8
0cb19     F6 F3 F3 F5 
0cb1d     F7 F7 FA FE 
0cb21     00 02 03 03 
0cb25     03 03 05 07 | 	byte	$f6, $f3, $f3, $f5, $f7, $f7, $fa, $fe, $00, $02, $03, $03, $03, $03, $05, $07
0cb29     09 0A 0B 0D 
0cb2d     0D 0B 09 05 
0cb31     01 FD FB FB 
0cb35     FC FB FB F9 | 	byte	$09, $0a, $0b, $0d, $0d, $0b, $09, $05, $01, $fd, $fb, $fb, $fc, $fb, $fb, $f9
0cb39     F7 F5 F6 F7 
0cb3d     F8 F9 FD FF 
0cb41     01 01 01 02 
0cb45     02 03 05 07 | 	byte	$f7, $f5, $f6, $f7, $f8, $f9, $fd, $ff, $01, $01, $01, $02, $02, $03, $05, $07
0cb49     09 0A 0B 0B 
0cb4d     0A 08 06 01 
0cb51     FD FA F9 FA 
0cb55     FB FA FA F9 | 	byte	$09, $0a, $0b, $0b, $0a, $08, $06, $01, $fd, $fa, $f9, $fa, $fb, $fa, $fa, $f9
0cb59     F7 F6 F7 F8 
0cb5d     F8 FB FD FF 
0cb61     00 01 01 02 
0cb65     02 04 06 08 | 	byte	$f7, $f6, $f7, $f8, $f8, $fb, $fd, $ff, $00, $01, $01, $02, $02, $04, $06, $08
0cb69     09 0A 0B 0B 
0cb6d     0A 07 04 FF 
0cb71     FB FA FA FB 
0cb75     FC FB FB FA | 	byte	$09, $0a, $0b, $0b, $0a, $07, $04, $ff, $fb, $fa, $fa, $fb, $fc, $fb, $fb, $fa
0cb79     F9 F8 F9 FA 
0cb7d     FA FD FF 00 
0cb81     01 01 01 02 
0cb85     03 05 07 08 | 	byte	$f9, $f8, $f9, $fa, $fa, $fd, $ff, $00, $01, $01, $01, $02, $03, $05, $07, $08
0cb89     0A 0A 0B 09 
0cb8d     07 04 01 FD 
0cb91     FA F9 FA FB 
0cb95     FC FB FB FA | 	byte	$0a, $0a, $0b, $09, $07, $04, $01, $fd, $fa, $f9, $fa, $fb, $fc, $fb, $fb, $fa
0cb99     F9 F9 FA FA 
0cb9d     FB FD FE 00 
0cba1     01 01 01 02 
0cba5     04 06 07 09 | 	byte	$f9, $f9, $fa, $fa, $fb, $fd, $fe, $00, $01, $01, $01, $02, $04, $06, $07, $09
0cba9     0A 0A 0A 08 
0cbad     05 03 FF FC 
0cbb1     FA FA FB FC 
0cbb5     FC FC FC FB | 	byte	$0a, $0a, $0a, $08, $05, $03, $ff, $fc, $fa, $fa, $fb, $fc, $fc, $fc, $fc, $fb
0cbb9     FB FB FB FB 
0cbbd     FD FE FF 00 
0cbc1     00 00 01 03 
0cbc5     04 06 07 09 | 	byte	$fb, $fb, $fb, $fb, $fd, $fe, $ff, $00, $00, $00, $01, $03, $04, $06, $07, $09
0cbc9     0A 0A 07 05 
0cbcd     03 00 FD FA 
0cbd1     F9 FA FB FC 
0cbd5     FB FC FC FC | 	byte	$0a, $0a, $07, $05, $03, $00, $fd, $fa, $f9, $fa, $fb, $fc, $fb, $fc, $fc, $fc
0cbd9     FB FC FC FC 
0cbdd     FD FE FF 00 
0cbe1     00 01 01 03 
0cbe5     04 06 07 09 | 	byte	$fb, $fc, $fc, $fc, $fd, $fe, $ff, $00, $00, $01, $01, $03, $04, $06, $07, $09
0cbe9     09 08 06 03 
0cbed     02 FF FC FA 
0cbf1     FA FB FC FC 
0cbf5     FC FD FD FD | 	byte	$09, $08, $06, $03, $02, $ff, $fc, $fa, $fa, $fb, $fc, $fc, $fc, $fd, $fd, $fd
0cbf9     FD FD FC FD 
0cbfd     FE FE FF 00 
0cc01     00 01 02 04 
0cc05     05 07 08 09 | 	byte	$fd, $fd, $fc, $fd, $fe, $fe, $ff, $00, $00, $01, $02, $04, $05, $07, $08, $09
0cc09     09 07 04 02 
0cc0d     00 FE FB FA 
0cc11     FB FC FD FD 
0cc15     FD FE FE FE | 	byte	$09, $07, $04, $02, $00, $fe, $fb, $fa, $fb, $fc, $fd, $fd, $fd, $fe, $fe, $fe
0cc19     FE FE FD FD 
0cc1d     FE FF 00 00 
0cc21     00 01 03 04 
0cc25     05 06 08 09 | 	byte	$fe, $fe, $fd, $fd, $fe, $ff, $00, $00, $00, $01, $03, $04, $05, $06, $08, $09
0cc29     07 04 02 01 
0cc2d     FF FC FA F9 
0cc31     FA FC FC FC 
0cc35     FD FE FF FF | 	byte	$07, $04, $02, $01, $ff, $fc, $fa, $f9, $fa, $fc, $fc, $fc, $fd, $fe, $ff, $ff
0cc39     FE FE FD FD 
0cc3d     FE FE FF FF 
0cc41     00 01 03 04 
0cc45     05 07 08 07 | 	byte	$fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $00, $01, $03, $04, $05, $07, $08, $07
0cc49     05 03 01 00 
0cc4d     FE FB FA FA 
0cc51     FB FC FD FD 
0cc55     FE FF FF FF | 	byte	$05, $03, $01, $00, $fe, $fb, $fa, $fa, $fb, $fc, $fd, $fd, $fe, $ff, $ff, $ff
0cc59     FF FE FD FE 
0cc5d     FE FF FF 00 
0cc61     01 02 04 05 
0cc65     06 07 08 06 | 	byte	$ff, $fe, $fd, $fe, $fe, $ff, $ff, $00, $01, $02, $04, $05, $06, $07, $08, $06
0cc69     04 02 01 00 
0cc6d     FD FB FB FB 
0cc71     FC FC FD FE 
0cc75     FE 00 00 00 | 	byte	$04, $02, $01, $00, $fd, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $fe, $00, $00, $00
0cc79     FF FD FE FE 
0cc7d     FE FF FF 00 
0cc81     01 03 04 05 
0cc85     06 07 07 04 | 	byte	$ff, $fd, $fe, $fe, $fe, $ff, $ff, $00, $01, $03, $04, $05, $06, $07, $07, $04
0cc89     02 01 00 FF 
0cc8d     FC FB FA FB 
0cc91     FC FD FE FE 
0cc95     FF 00 00 00 | 	byte	$02, $01, $00, $ff, $fc, $fb, $fa, $fb, $fc, $fd, $fe, $fe, $ff, $00, $00, $00
0cc99     FE FE FE FE 
0cc9d     FF FF 00 00 
0cca1     02 03 04 05 
0cca5     06 07 05 03 | 	byte	$fe, $fe, $fe, $fe, $ff, $ff, $00, $00, $02, $03, $04, $05, $06, $07, $05, $03
0cca9     01 01 00 FE 
0ccad     FC FB FB FC 
0ccb1     FD FD FE FF 
0ccb5     00 01 01 FF | 	byte	$01, $01, $00, $fe, $fc, $fb, $fb, $fc, $fd, $fd, $fe, $ff, $00, $01, $01, $ff
0ccb9     FE FE FE FE 
0ccbd     FF FF 00 01 
0ccc1     02 03 04 05 
0ccc5     06 05 03 01 | 	byte	$fe, $fe, $fe, $fe, $ff, $ff, $00, $01, $02, $03, $04, $05, $06, $05, $03, $01
0ccc9     00 00 FF FD 
0cccd     FB FB FB FC 
0ccd1     FD FE FE FF 
0ccd5     00 01 00 FF | 	byte	$00, $00, $ff, $fd, $fb, $fb, $fb, $fc, $fd, $fe, $fe, $ff, $00, $01, $00, $ff
0ccd9     FE FE FE FF 
0ccdd     FF 00 00 02 
0cce1     03 04 05 06 
0cce5     05 04 03 01 | 	byte	$fe, $fe, $fe, $ff, $ff, $00, $00, $02, $03, $04, $05, $06, $05, $04, $03, $01
0cce9     01 00 FF FD 
0cced     FC FB FC FE 
0ccf1     FE FF 00 00 
0ccf5     01 01 01 FF | 	byte	$01, $00, $ff, $fd, $fc, $fb, $fc, $fe, $fe, $ff, $00, $00, $01, $01, $01, $ff
0ccf9     FF FF FF FF 
0ccfd     FF          | 	byte	$ff[5]
0ccfe     00 01 02 03 
0cd02     04 04 05 04 
0cd06     03 01 00 00 
0cd0a     FF FE FC FA | 	byte	$00, $01, $02, $03, $04, $04, $05, $04, $03, $01, $00, $00, $ff, $fe, $fc, $fa
0cd0e     FB FC FD FE 
0cd12     FF FF 00 01 
0cd16     01 00 FE FE 
0cd1a     FF FF FF FF | 	byte	$fb, $fc, $fd, $fe, $ff, $ff, $00, $01, $01, $00, $fe, $fe, $ff, $ff, $ff, $ff
0cd1e     FF 01 02 03 
0cd22     04 05 04 03 
0cd26     02 01 00 01 
0cd2a     FF FD FC FC | 	byte	$ff, $01, $02, $03, $04, $05, $04, $03, $02, $01, $00, $01, $ff, $fd, $fc, $fc
0cd2e     FD FD FE FF 
0cd32     FF 00 00 01 
0cd36     01 FF FF FF 
0cd3a     FF FF FF 00 | 	byte	$fd, $fd, $fe, $ff, $ff, $00, $00, $01, $01, $ff, $ff, $ff, $ff, $ff, $ff, $00
0cd3e     00 01 03 03 
0cd42     04 05 03 02 
0cd46     01 01 01 00 
0cd4a     FF FD FC FC | 	byte	$00, $01, $03, $03, $04, $05, $03, $02, $01, $01, $01, $00, $ff, $fd, $fc, $fc
0cd4e     FC FD FE FF 
0cd52     00 00 00 00 
0cd56     00 FF FF FF 
0cd5a     FF FF FF 00 | 	byte	$fc, $fd, $fe, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $00
0cd5e     01 02 03 04 
0cd62     04 04 02 01 
0cd66     01 01 01 00 
0cd6a     FF FD FC FC | 	byte	$01, $02, $03, $04, $04, $04, $02, $01, $01, $01, $01, $00, $ff, $fd, $fc, $fc
0cd6e     FD FE FF FF 
0cd72     00 00 00 00 
0cd76     FF FF FF FF 
0cd7a     FF FF FF 00 | 	byte	$fd, $fe, $ff, $ff, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
0cd7e     01 02 03 03 
0cd82     03 03 01 01 
0cd86     00 01 01 FF 
0cd8a     FE FD FC FD | 	byte	$01, $02, $03, $03, $03, $03, $01, $01, $00, $01, $01, $ff, $fe, $fd, $fc, $fd
0cd8e     FD FF FF 00 
0cd92     00 00 00 00 
0cd96     FF FF FF FF 
0cd9a     FF FF FF 00 | 	byte	$fd, $ff, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
0cd9e     01 02 03 04 
0cda2     03 02 01 00 
0cda6     00 01 01 FF 
0cdaa     FD FC FD FD | 	byte	$01, $02, $03, $04, $03, $02, $01, $00, $00, $01, $01, $ff, $fd, $fc, $fd, $fd
0cdae     FE FE FF 00 
0cdb2     00 00 00 00 
0cdb6     FF FF 00 FF 
0cdba     FF 00 00 01 | 	byte	$fe, $fe, $ff, $00, $00, $00, $00, $00, $ff, $ff, $00, $ff, $ff, $00, $00, $01
0cdbe     02 03 03 03 
0cdc2     02 01 00 01 
0cdc6     01 02 00 FF 
0cdca     FD FD FD FE | 	byte	$02, $03, $03, $03, $02, $01, $00, $01, $01, $02, $00, $ff, $fd, $fd, $fd, $fe
0cdce     FF 00 01 01 
0cdd2     01 00 01 00 
0cdd6     00 00 00 00 
0cdda     00 00 01 02 | 	byte	$ff, $00, $01, $01, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $01, $02
0cdde     02 03 03 02 
0cde2     01 00 00 00 
0cde6     01 01 FF FE 
0cdea     FD FC FD FD | 	byte	$02, $03, $03, $02, $01, $00, $00, $00, $01, $01, $ff, $fe, $fd, $fc, $fd, $fd
0cdee     FE FF 00 00 
0cdf2     FF 00 00 FF 
0cdf6     00 FF FF FF 
0cdfa     FF 00 01 01 | 	byte	$fe, $ff, $00, $00, $ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $00, $01, $01
0cdfe     02 02 02 01 
0ce02     00 00 00 01 
0ce06     01 01 FF FE 
0ce0a     FD FD FE FE | 	byte	$02, $02, $02, $01, $00, $00, $00, $01, $01, $01, $ff, $fe, $fd, $fd, $fe, $fe
0ce0e     FF 00 00 00 
0ce12     00 00 00 FF 
0ce16     00 00 FF 00 
0ce1a     00 01 01 02 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $ff, $00, $00, $ff, $00, $00, $01, $01, $02
0ce1e     03 03 02 01 
0ce22     00 01 01 02 
0ce26     01 00 FF FE 
0ce2a     FE FE FE FF | 	byte	$03, $03, $02, $01, $00, $01, $01, $02, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff
0ce2e     00 00 00 FF 
0ce32     00 00 FF FF 
0ce36     FF FF FF FF 
0ce3a     FF 00 01 02 | 	byte	$00, $00, $00, $ff, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $01, $02
0ce3e     02 02 01 00 
0ce42     00 01 01 02 
0ce46     01 00 FF FE 
0ce4a     FE FE FE FF | 	byte	$02, $02, $01, $00, $00, $01, $01, $02, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff
0ce4e     00 00 00 FF 
0ce52     00 00 FF 00 
0ce56     FF FF FF FF 
0ce5a     00 00 01 02 | 	byte	$00, $00, $00, $ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $00, $00, $01, $02
0ce5e     02 01 00 00 
0ce62     00 01 01 01 
0ce66     01 FF FE FE 
0ce6a     FE FF FF 00 | 	byte	$02, $01, $00, $00, $00, $01, $01, $01, $01, $ff, $fe, $fe, $fe, $ff, $ff, $00
0ce6e     00 00 00 00 
0ce72     00 00       | 	byte	$00[6]
0ce74     FF 00 FF FF 
0ce78     FF FF 00 01 
0ce7c     02 02 01 00 
0ce80     00 00 00 01 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $00, $01, $02, $02, $01, $00, $00, $00, $00, $01
0ce84     02 01 00 FF 
0ce88     FE FE FE FF 
0ce8c     FF 00 00 00 
0ce90     00 00 00 00 | 	byte	$02, $01, $00, $ff, $fe, $fe, $fe, $ff, $ff, $00, $00, $00, $00, $00, $00, $00
0ce94     FF FF FF FF 
0ce98     FF          | 	byte	$ff[5]
0ce99     00 01 01 02 
0ce9d     02 01 00 00 
0cea1     00 01 02 02 
0cea5     01 00 FF FF | 	byte	$00, $01, $01, $02, $02, $01, $00, $00, $00, $01, $02, $02, $01, $00, $ff, $ff
0cea9     FF FF 00 00 
0cead     00 01 01 01 
0ceb1     01 00 FF 00 
0ceb5     FF FF FF FF | 	byte	$ff, $ff, $00, $00, $00, $01, $01, $01, $01, $00, $ff, $00, $ff, $ff, $ff, $ff
0ceb9     00 01 01 02 
0cebd     01 00 00 00 
0cec1     00 01 01 01 
0cec5     00 FF FF FE | 	byte	$00, $01, $01, $02, $01, $00, $00, $00, $00, $01, $01, $01, $00, $ff, $ff, $fe
0cec9     FE FE FF FF 
0cecd     FF 00 00 FF 
0ced1     00 FF FF FF 
0ced5     FF FF FF FF | 	byte	$fe, $fe, $ff, $ff, $ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0ced9     00 00 01 01 
0cedd     00 00 00 00 
0cee1     01 01 02 01 
0cee5     01 FF FF FF | 	byte	$00, $00, $01, $01, $00, $00, $00, $00, $01, $01, $02, $01, $01, $ff, $ff, $ff
0cee9     FF FF 00 00 
0ceed     00 00 01 00 
0cef1     00 FF FF FF 
0cef5     FF FF FF 00 | 	byte	$ff, $ff, $00, $00, $00, $00, $01, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $00
0cef9     00 01 01 01 
0cefd     00 00 00 01 
0cf01     01 02 02 01 
0cf05     00 00 FF 00 | 	byte	$00, $01, $01, $01, $00, $00, $00, $01, $01, $02, $02, $01, $00, $00, $ff, $00
0cf09     00 00 00 00 
0cf0d     00          | 	byte	$00[5]
0cf0e     01 00 00 00 
0cf12     FF FF FE FF 
0cf16     FE FF FF 00 
0cf1a     01 00 00 00 | 	byte	$01, $00, $00, $00, $ff, $ff, $fe, $ff, $fe, $ff, $ff, $00, $01, $00, $00, $00
0cf1e     00 00 01 01 
0cf22     02 02 01 00 
0cf26     00 00 00 00 
0cf2a     00 00 00 00 | 	byte	$00, $00, $01, $01, $02, $02, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf2e     01 00 00 FF 
0cf32     FF FF FE FF 
0cf36     FE FF 00 00 
0cf3a     00 00 00 00 | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $ff, $fe, $ff, $00, $00, $00, $00, $00, $00
0cf3e     00 00 01 01 
0cf42     02 01 01 00 
0cf46     FF 00 00 00 
0cf4a     00 01 00 00 | 	byte	$00, $00, $01, $01, $02, $01, $01, $00, $ff, $00, $00, $00, $00, $01, $00, $00
0cf4e     01 00 00 FF 
0cf52     FF FF FE FE 
0cf56     FF FF 00 00 
0cf5a     00 FF FF 00 | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $00, $00, $00, $ff, $ff, $00
0cf5e     00 01 01 01 
0cf62     01 01 00 00 
0cf66     FF 00 00 00 
0cf6a     00 00 01 01 | 	byte	$00, $01, $01, $01, $01, $01, $00, $00, $ff, $00, $00, $00, $00, $00, $01, $01
0cf6e     01 00 FF FF 
0cf72     FF FE FE FE 
0cf76     FF FF 00 00 
0cf7a     FF 00 FF 00 | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $00, $00, $ff, $00, $ff, $00
0cf7e     01 01 01 02 
0cf82     02 01 01 00 
0cf86     00 00 01 01 
0cf8a     01 01 01 02 | 	byte	$01, $01, $01, $02, $02, $01, $01, $00, $00, $00, $01, $01, $01, $01, $01, $02
0cf8e     02 01 00 FF 
0cf92     FF FF FF FF 
0cf96     FF 00 00 00 
0cf9a     00 00 00 00 | 	byte	$02, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00
0cf9e     01 01 01 01 
0cfa2     01          | 	byte	$01[5]
0cfa3     00 00 00 00 
0cfa7     00 00 00 00 
0cfab     00          | 	byte	$00[9]
0cfac     01 01 00 FF 
0cfb0     FE FE FE FE 
0cfb4     FE FE FE FF 
0cfb8     FF FF FF FF | 	byte	$01, $01, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff
0cfbc     FF 00 00 01 
0cfc0     01 01 01 01 
0cfc4     00 00 00 00 
0cfc8     EE F0 EA F2 | 	byte	$ff, $00, $00, $01, $01, $01, $01, $01, $00, $00, $00, $00, $ee, $f0, $ea, $f2
0cfcc     FC 01 02 03 
0cfd0     0D 0F 12 17 
0cfd4     0F 08 FE EC 
0cfd8     EE F0 E8 F4 | 	byte	$fc, $01, $02, $03, $0d, $0f, $12, $17, $0f, $08, $fe, $ec, $ee, $f0, $e8, $f4
0cfdc     FE 00 02 06 
0cfe0     0E 0F 14 16 
0cfe4     0D 06 F8 EB 
0cfe8     EE EE EA F6 | 	byte	$fe, $00, $02, $06, $0e, $0f, $14, $16, $0d, $06, $f8, $eb, $ee, $ee, $ea, $f6
0cfec     FF 01 03 07 
0cff0     0F 10 15 13 
0cff4     0B 04 F2 EB 
0cff8     F0 EC EE F9 | 	byte	$ff, $01, $03, $07, $0f, $10, $15, $13, $0b, $04, $f2, $eb, $f0, $ec, $ee, $f9
0cffc     00 03 04 09 
0d000     11 11 16 11 
0d004     09 02 EE EB 
0d008     F1 E8 F0 FB | 	byte	$00, $03, $04, $09, $11, $11, $16, $11, $09, $02, $ee, $eb, $f1, $e8, $f0, $fb
0d00c     FF 06 05 0B 
0d010     12 12 16 0E 
0d014     06 FF EA EC 
0d018     F1 E8 F3 FD | 	byte	$ff, $06, $05, $0b, $12, $12, $16, $0e, $06, $ff, $ea, $ec, $f1, $e8, $f3, $fd
0d01c     00 07 06 0E 
0d020     13 13 15 0B 
0d024     04 F9 E8 EC 
0d028     EF E9 F6 FE | 	byte	$00, $07, $06, $0e, $13, $13, $15, $0b, $04, $f9, $e8, $ec, $ef, $e9, $f6, $fe
0d02c     02 07 08 0F 
0d030     14 13 13 07 
0d034     02 F3 E8 ED 
0d038     ED EB F8 FE | 	byte	$02, $07, $08, $0f, $14, $13, $13, $07, $02, $f3, $e8, $ed, $ed, $eb, $f8, $fe
0d03c     05 09 09 12 
0d040     15 15 11 05 
0d044     01 ED E9 EE 
0d048     ED EE FA FE | 	byte	$05, $09, $09, $12, $15, $15, $11, $05, $01, $ed, $e9, $ee, $ed, $ee, $fa, $fe
0d04c     09 0A 0C 14 
0d050     15 14 0E 03 
0d054     FD E8 E8 EC 
0d058     EC F1 FC 00 | 	byte	$09, $0a, $0c, $14, $15, $14, $0e, $03, $fd, $e8, $e8, $ec, $ec, $f1, $fc, $00
0d05c     0B 0A 0E 16 
0d060     15 12 0B 00 
0d064     F7 E6 E8 EB 
0d068     EC F4 FC 03 | 	byte	$0b, $0a, $0e, $16, $15, $12, $0b, $00, $f7, $e6, $e8, $eb, $ec, $f4, $fc, $03
0d06c     0D 0B 0F 19 
0d070     16 11 07 FD 
0d074     F2 E6 E7 ED 
0d078     ED F7 FD 08 | 	byte	$0d, $0b, $0f, $19, $16, $11, $07, $fd, $f2, $e6, $e7, $ed, $ed, $f7, $fd, $08
0d07c     0F 0D 11 1B 
0d080     15 0F 05 FB 
0d084     EB E6 E6 EF 
0d088     EF F9 FE 0B | 	byte	$0f, $0d, $11, $1b, $15, $0f, $05, $fb, $eb, $e6, $e6, $ef, $ef, $f9, $fe, $0b
0d08c     11 0E 14 1C 
0d090     13 0D 01 F8 
0d094     E6 E5 E5 EF 
0d098     F3 F9 01 0E | 	byte	$11, $0e, $14, $1c, $13, $0d, $01, $f8, $e6, $e5, $e5, $ef, $f3, $f9, $01, $0e
0d09c     11 10 16 1E 
0d0a0     11 0B FD F5 
0d0a4     E2 E2 E7 EF 
0d0a8     F6 F9 06 10 | 	byte	$11, $10, $16, $1e, $11, $0b, $fd, $f5, $e2, $e2, $e7, $ef, $f6, $f9, $06, $10
0d0ac     13 11 18 1E 
0d0b0     0F 07 FB EF 
0d0b4     E1 DF EB F0 
0d0b8     F9 FA 08 13 | 	byte	$13, $11, $18, $1e, $0f, $07, $fb, $ef, $e1, $df, $eb, $f0, $f9, $fa, $08, $13
0d0bc     14 13 1C 1F 
0d0c0     0E 04 F8 E7 
0d0c4     E0 DF ED F1 
0d0c8     FB FD 0C 14 | 	byte	$14, $13, $1c, $1f, $0e, $04, $f8, $e7, $e0, $df, $ed, $f1, $fb, $fd, $0c, $14
0d0cc     16 15 1E 1C 
0d0d0     0C 00 F5 E1 
0d0d4     DD E2 EE F1 
0d0d8     FB 02 0F 17 | 	byte	$16, $15, $1e, $1c, $0c, $00, $f5, $e1, $dd, $e2, $ee, $f1, $fb, $02, $0f, $17
0d0dc     17 17 20 1A 
0d0e0     09 FB F2 D9 
0d0e4     D9 E4 F0 F3 
0d0e8     FA 05 11 19 | 	byte	$17, $17, $20, $1a, $09, $fb, $f2, $d9, $d9, $e4, $f0, $f3, $fa, $05, $11, $19
0d0ec     18 19 21 18 
0d0f0     08 F7 EC D5 
0d0f4     D7 E6 F2 F5 
0d0f8     FD 09 14 1D | 	byte	$18, $19, $21, $18, $08, $f7, $ec, $d5, $d7, $e6, $f2, $f5, $fd, $09, $14, $1d
0d0fc     19 1B 21 19 
0d100     04 F4 E7 D0 
0d104     D8 E9 F4 F6 
0d108     01 0C 16 20 | 	byte	$19, $1b, $21, $19, $04, $f4, $e7, $d0, $d8, $e9, $f4, $f6, $01, $0c, $16, $20
0d10c     1B 1E 20 18 
0d110     FF F2 DC CC 
0d114     DB EA F3 F6 
0d118     05 0E 19 21 | 	byte	$1b, $1e, $20, $18, $ff, $f2, $dc, $cc, $db, $ea, $f3, $f6, $05, $0e, $19, $21
0d11c     1C 20 1F 16 
0d120     F9 EE D3 CA 
0d124     DC EE F3 F8 
0d128     08 11 1B 22 | 	byte	$1c, $20, $1f, $16, $f9, $ee, $d3, $ca, $dc, $ee, $f3, $f8, $08, $11, $1b, $22
0d12c     1E 21 20 16 
0d130     F3 EC C8 CA 
0d134     E0 F1 F2 FC 
0d138     0C 12 1F 24 | 	byte	$1e, $21, $20, $16, $f3, $ec, $c8, $ca, $e0, $f1, $f2, $fc, $0c, $12, $1f, $24
0d13c     1F 21 21 13 
0d140     EF E7 C1 CE 
0d144     E4 F4 F0 00 
0d148     0E 15 22 24 | 	byte	$1f, $21, $21, $13, $ef, $e7, $c1, $ce, $e4, $f4, $f0, $00, $0e, $15, $22, $24
0d14c     21 1F 23 10 
0d150     EB DF BE D1 
0d154     E7 F6 EF 05 
0d158     10 17 24 24 | 	byte	$21, $1f, $23, $10, $eb, $df, $be, $d1, $e7, $f6, $ef, $05, $10, $17, $24, $24
0d15c     21 1D 23 09 
0d160     E9 D3 C0 D2 
0d164     EA F7 F1 08 
0d168     12 1A 25 24 | 	byte	$21, $1d, $23, $09, $e9, $d3, $c0, $d2, $ea, $f7, $f1, $08, $12, $1a, $25, $24
0d16c     21 1D 22 02 
0d170     E5 C3 C3 D6 
0d174     EC F6 F6 0B 
0d178     13 1F 28 25 | 	byte	$21, $1d, $22, $02, $e5, $c3, $c3, $d6, $ec, $f6, $f6, $0b, $13, $1f, $28, $25
0d17c     20 1F 22 00 
0d180     E0 BB C6 DB 
0d184     F2 F2 FA 0E 
0d188     15 20 2A 26 | 	byte	$20, $1f, $22, $00, $e0, $bb, $c6, $db, $f2, $f2, $fa, $0e, $15, $20, $2a, $26
0d18c     1D 21 21 F6 
0d190     D9 B6 C6 DD 
0d194     F5 F1 FE 12 
0d198     17 23 2A 24 | 	byte	$1d, $21, $21, $f6, $d9, $b6, $c6, $dd, $f5, $f1, $fe, $12, $17, $23, $2a, $24
0d19c     1B 21 20 F3 
0d1a0     C9 B7 C8 E1 
0d1a4     F7 EF 02 13 
0d1a8     1B 25 2B 23 | 	byte	$1b, $21, $20, $f3, $c9, $b7, $c8, $e1, $f7, $ef, $02, $13, $1b, $25, $2b, $23
0d1ac     1B 22 1D EB 
0d1b0     BE BC CC E3 
0d1b4     F8 F1 06 16 
0d1b8     1E 28 2D 21 | 	byte	$1b, $22, $1d, $eb, $be, $bc, $cc, $e3, $f8, $f1, $06, $16, $1e, $28, $2d, $21
0d1bc     1E 22 19 E9 
0d1c0     B1 BF CE E8 
0d1c4     F7 F5 07 19 
0d1c8     20 2A 2D 1C | 	byte	$1e, $22, $19, $e9, $b1, $bf, $ce, $e8, $f7, $f5, $07, $19, $20, $2a, $2d, $1c
0d1cc     1F 22 16 DD 
0d1d0     AB C0 D2 EB 
0d1d4     F6 F9 09 1D 
0d1d8     23 2C 2B 1A | 	byte	$1f, $22, $16, $dd, $ab, $c0, $d2, $eb, $f6, $f9, $09, $1d, $23, $2c, $2b, $1a
0d1dc     20 21 11 D0 
0d1e0     AB C2 D6 ED 
0d1e4     F4 FC 0D 21 
0d1e8     26 2E 28 1A | 	byte	$20, $21, $11, $d0, $ab, $c2, $d6, $ed, $f4, $fc, $0d, $21, $26, $2e, $28, $1a
0d1ec     20 20 0B C2 
0d1f0     AD C5 D9 EF 
0d1f4     F4 FF 0F 24 
0d1f8     28 30 22 1C | 	byte	$20, $20, $0b, $c2, $ad, $c5, $d9, $ef, $f4, $ff, $0f, $24, $28, $30, $22, $1c
0d1fc     21 1F 02 B4 
0d200     AF C8 DD F2 
0d204     F5 01 15 27 
0d208     2B 32 1F 1D | 	byte	$21, $1f, $02, $b4, $af, $c8, $dd, $f2, $f5, $01, $15, $27, $2b, $32, $1f, $1d
0d20c     21 1C F8 AD 
0d210     B1 CB E0 F1 
0d214     F6 02 19 2A 
0d218     2C 30 1C 1D | 	byte	$21, $1c, $f8, $ad, $b1, $cb, $e0, $f1, $f6, $02, $19, $2a, $2c, $30, $1c, $1d
0d21c     21 1A E9 A8 
0d220     B5 D0 E2 F2 
0d224     F6 06 1F 2D 
0d228     2F 2C 1C 1D | 	byte	$21, $1a, $e9, $a8, $b5, $d0, $e2, $f2, $f6, $06, $1f, $2d, $2f, $2c, $1c, $1d
0d22c     20 15 DB A3 
0d230     B9 D5 E6 F3 
0d234     F7 0C 24 30 
0d238     31 2A 1D 1F | 	byte	$20, $15, $db, $a3, $b9, $d5, $e6, $f3, $f7, $0c, $24, $30, $31, $2a, $1d, $1f
0d23c     1F 0E D6 A4 
0d240     BE D7 E8 F4 
0d244     FA 12 27 32 
0d248     32 26 1C 1E | 	byte	$1f, $0e, $d6, $a4, $be, $d7, $e8, $f4, $fa, $12, $27, $32, $32, $26, $1c, $1e
0d24c     1D 07 C6 A7 
0d250     BF DC E7 F2 
0d254     FF 15 2A 34 
0d258     31 23 1C 1D | 	byte	$1d, $07, $c6, $a7, $bf, $dc, $e7, $f2, $ff, $15, $2a, $34, $31, $23, $1c, $1d
0d25c     1C FB B8 AA 
0d260     C5 DF E8 F0 
0d264     04 1B 2D 36 
0d268     2E 24 1C 1D | 	byte	$1c, $fb, $b8, $aa, $c5, $df, $e8, $f0, $04, $1b, $2d, $36, $2e, $24, $1c, $1d
0d26c     18 EE B3 AC 
0d270     CB E2 EA EE 
0d274     0B 22 31 37 
0d278     2C 23 1C 1C | 	byte	$18, $ee, $b3, $ac, $cb, $e2, $ea, $ee, $0b, $22, $31, $37, $2c, $23, $1c, $1c
0d27c     13 E7 AD AE 
0d280     D0 E6 EB F1 
0d284     0E 25 34 38 
0d288     29 23 1B 1A | 	byte	$13, $e7, $ad, $ae, $d0, $e6, $eb, $f1, $0e, $25, $34, $38, $29, $23, $1b, $1a
0d28c     0B D8 AF B0 
0d290     D4 E6 E9 F4 
0d294     14 2A 38 35 
0d298     2A 21 1A 18 | 	byte	$0b, $d8, $af, $b0, $d4, $e6, $e9, $f4, $14, $2a, $38, $35, $2a, $21, $1a, $18
0d29c     02 CF AF B5 
0d2a0     D7 E7 E7 FC 
0d2a4     18 2D 3A 32 
0d2a8     2A 1F 19 15 | 	byte	$02, $cf, $af, $b5, $d7, $e7, $e7, $fc, $18, $2d, $3a, $32, $2a, $1f, $19, $15
0d2ac     FB C4 AE B7 
0d2b0     DB E7 E5 05 
0d2b4     1F 30 3D 31 
0d2b8     2B 1F 18 10 | 	byte	$fb, $c4, $ae, $b7, $db, $e7, $e5, $05, $1f, $30, $3d, $31, $2b, $1f, $18, $10
0d2bc     F5 BF AC BC 
0d2c0     E1 E7 E6 0A 
0d2c4     25 35 3E 2E 
0d2c8     2B 1D 17 09 | 	byte	$f5, $bf, $ac, $bc, $e1, $e7, $e6, $0a, $25, $35, $3e, $2e, $2b, $1d, $17, $09
0d2cc     E8 C0 AC C1 
0d2d0     E2 E6 E8 0D 
0d2d4     2B 38 3C 2E 
0d2d8     29 1A 14 00 | 	byte	$e8, $c0, $ac, $c1, $e2, $e6, $e8, $0d, $2b, $38, $3c, $2e, $29, $1a, $14, $00
0d2dc     DC C0 AD C2 
0d2e0     E3 E5 EE 14 
0d2e4     2E 3B 39 30 
0d2e8     28 1A 12 F9 | 	byte	$dc, $c0, $ad, $c2, $e3, $e5, $ee, $14, $2e, $3b, $39, $30, $28, $1a, $12, $f9
0d2ec     D2 C0 AF C8 
0d2f0     E3 E6 F6 17 
0d2f4     33 3E 38 31 
0d2f8     28 18 0D F3 | 	byte	$d2, $c0, $af, $c8, $e3, $e6, $f6, $17, $33, $3e, $38, $31, $28, $18, $0d, $f3
0d2fc     CE C0 B1 CD 
0d300     E1 E6 FD 20 
0d304     38 3E 38 31 
0d308     25 15 08 E7 | 	byte	$ce, $c0, $b1, $cd, $e1, $e6, $fd, $20, $38, $3e, $38, $31, $25, $15, $08, $e7
0d30c     CF BD B4 CF 
0d310     E1 E7 01 26 
0d314     3B 3D 39 31 
0d318     21 13 FF DA | 	byte	$cf, $bd, $b4, $cf, $e1, $e7, $01, $26, $3b, $3d, $39, $31, $21, $13, $ff, $da
0d31c     D2 BA B9 D1 
0d320     E3 E9 06 2D 
0d324     3F 3A 3B 30 
0d328     1D 11 F6 D3 | 	byte	$d2, $ba, $b9, $d1, $e3, $e9, $06, $2d, $3f, $3a, $3b, $30, $1d, $11, $f6, $d3
0d32c     D1 B7 BB D2 
0d330     E4 F1 0D 31 
0d334     41 39 3D 2F 
0d338     1D 0C EB D1 | 	byte	$d1, $b7, $bb, $d2, $e4, $f1, $0d, $31, $41, $39, $3d, $2f, $1d, $0c, $eb, $d1
0d33c     D0 B7 C0 D2 
0d340     E4 FA 11 37 
0d344     42 3A 3D 2E 
0d348     1A 05 E1 D5 | 	byte	$d0, $b7, $c0, $d2, $e4, $fa, $11, $37, $42, $3a, $3d, $2e, $1a, $05, $e1, $d5
0d34c     D1 B5 C4 D2 
0d350     E5 FE 19 3C 
0d354     41 3C 3E 2B 
0d358     16 FE D2 D7 | 	byte	$d1, $b5, $c4, $d2, $e5, $fe, $19, $3c, $41, $3c, $3e, $2b, $16, $fe, $d2, $d7
0d35c     CF B3 C4 D3 
0d360     E6 03 20 40 
0d364     3F 3F 3E 28 
0d368     13 F1 CE D8 | 	byte	$cf, $b3, $c4, $d3, $e6, $03, $20, $40, $3f, $3f, $3e, $28, $13, $f1, $ce, $d8
0d36c     CE B3 C6 D2 
0d370     ED 09 24 44 
0d374     3E 41 3E 27 
0d378     0F E3 CF D9 | 	byte	$ce, $b3, $c6, $d2, $ed, $09, $24, $44, $3e, $41, $3e, $27, $0f, $e3, $cf, $d9
0d37c     CB B4 C8 CF 
0d380     F7 0E 2A 45 
0d384     40 42 3C 21 
0d388     08 D6 D1 DB | 	byte	$cb, $b4, $c8, $cf, $f7, $0e, $2a, $45, $40, $42, $3c, $21, $08, $d6, $d1, $db
0d38c     C7 B5 C9 D1 
0d390     FF 15 31 44 
0d394     42 43 3B 1E 
0d398     FF CC D3 DE | 	byte	$c7, $b5, $c9, $d1, $ff, $15, $31, $44, $42, $43, $3b, $1e, $ff, $cc, $d3, $de
0d39c     C3 B6 C9 D2 
0d3a0     06 1A 37 43 
0d3a4     45 44 3A 1C 
0d3a8     EC CB D4 DF | 	byte	$c3, $b6, $c9, $d2, $06, $1a, $37, $43, $45, $44, $3a, $1c, $ec, $cb, $d4, $df
0d3ac     BD B9 C6 DD 
0d3b0     0A 20 3C 43 
0d3b4     47 44 37 16 
0d3b8     DF CF D7 E0 | 	byte	$bd, $b9, $c6, $dd, $0a, $20, $3c, $43, $47, $44, $37, $16, $df, $cf, $d7, $e0
0d3bc     B7 BA C0 E6 
0d3c0     14 27 3C 45 
0d3c4     49 44 34 11 
0d3c8     D0 D0 DB DE | 	byte	$b7, $ba, $c0, $e6, $14, $27, $3c, $45, $49, $44, $34, $11, $d0, $d0, $db, $de
0d3cc     B3 BE BE ED 
0d3d0     1A 2B 3D 48 
0d3d4     49 43 32 02 
0d3d8     CB CF DD DE | 	byte	$b3, $be, $be, $ed, $1a, $2b, $3d, $48, $49, $43, $32, $02, $cb, $cf, $dd, $de
0d3dc     AD BF BF F5 
0d3e0     1E 31 3D 4A 
0d3e4     4A 42 2F EC 
0d3e8     CE D1 DF D8 | 	byte	$ad, $bf, $bf, $f5, $1e, $31, $3d, $4a, $4a, $42, $2f, $ec, $ce, $d1, $df, $d8
0d3ec     AC BB CA F9 
0d3f0     24 36 3D 4E 
0d3f4     4B 42 27 DC 
0d3f8     D1 D6 E1 D0 | 	byte	$ac, $bb, $ca, $f9, $24, $36, $3d, $4e, $4b, $42, $27, $dc, $d1, $d6, $e1, $d0
0d3fc     AC B5 D6 02 
0d400     2A 38 40 50 
0d404     4A 40 18 CF 
0d408     CF D7 E4 C3 | 	byte	$ac, $b5, $d6, $02, $2a, $38, $40, $50, $4a, $40, $18, $cf, $cf, $d7, $e4, $c3
0d40c     AE B1 DE 0D 
0d410     31 39 44 51 
0d414     4A 3E 08 D1 
0d418     CF D9 E6 BE | 	byte	$ae, $b1, $de, $0d, $31, $39, $44, $51, $4a, $3e, $08, $d1, $cf, $d9, $e6, $be
0d41c     AE B3 E2 16 
0d420     35 3A 48 52 
0d424     48 3D F0 D4 
0d428     D2 DC E7 B3 | 	byte	$ae, $b3, $e2, $16, $35, $3a, $48, $52, $48, $3d, $f0, $d4, $d2, $dc, $e7, $b3
0d42c     A9 BF EB 1A 
0d430     3A 3C 4A 52 
0d434     49 36 DD D4 
0d438     D5 DF E4 AF | 	byte	$a9, $bf, $eb, $1a, $3a, $3c, $4a, $52, $49, $36, $dd, $d4, $d5, $df, $e4, $af
0d43c     A2 CA F1 24 
0d440     3C 3E 4C 52 
0d444     46 27 DC D0 
0d448     D7 E2 E1 A9 | 	byte	$a2, $ca, $f1, $24, $3c, $3e, $4c, $52, $46, $27, $dc, $d0, $d7, $e2, $e1, $a9
0d44c     9D D3 FB 28 
0d450     3E 41 4E 51 
0d454     45 0F DF D1 
0d458     D8 E4 D7 A4 | 	byte	$9d, $d3, $fb, $28, $3e, $41, $4e, $51, $45, $0f, $df, $d1, $d8, $e4, $d7, $a4
0d45c     A1 D9 01 2E 
0d460     3F 44 4F 51 
0d464     3F 00 DE D4 
0d468     DB E6 CE 9B | 	byte	$a1, $d9, $01, $2e, $3f, $44, $4f, $51, $3f, $00, $de, $d4, $db, $e6, $ce, $9b
0d46c     AC E0 07 34 
0d470     42 48 50 51 
0d474     35 F7 DD D8 
0d478     DF E8 C6 93 | 	byte	$ac, $e0, $07, $34, $42, $48, $50, $51, $35, $f7, $dd, $d8, $df, $e8, $c6, $93
0d47c     B6 EA 0F 36 
0d480     45 4A 50 4E 
0d484     1F FA DA D9 
0d488     E1 E7 B8 8C | 	byte	$b6, $ea, $0f, $36, $45, $4a, $50, $4e, $1f, $fa, $da, $d9, $e1, $e7, $b8, $8c
0d48c     C1 F2 16 37 
0d490     47 4C 4F 49 
0d494     0B FB DA DA 
0d498     E3 E4 AF 8F | 	byte	$c1, $f2, $16, $37, $47, $4c, $4f, $49, $0b, $fb, $da, $da, $e3, $e4, $af, $8f
0d49c     C5 FB 1B 3B 
0d4a0     4A 4D 4F 42 
0d4a4     04 FA DB DE 
0d4a8     E6 E0 A2 96 | 	byte	$c5, $fb, $1b, $3b, $4a, $4d, $4f, $42, $04, $fa, $db, $de, $e6, $e0, $a2, $96
0d4ac     D2 02 22 3E 
0d4b0     4D 4D 4E 2F 
0d4b4     06 F8 DD E1 
0d4b8     E9 DA 91 A3 | 	byte	$d2, $02, $22, $3e, $4d, $4d, $4e, $2f, $06, $f8, $dd, $e1, $e9, $da, $91, $a3
0d4bc     D6 0B 24 42 
0d4c0     50 4D 4B 1B 
0d4c4     09 F4 DE E4 
0d4c8     EA D5 88 A8 | 	byte	$d6, $0b, $24, $42, $50, $4d, $4b, $1b, $09, $f4, $de, $e4, $ea, $d5, $88, $a8
0d4cc     E2 12 27 46 
0d4d0     52 4C 43 11 
0d4d4     0B F5 E0 E7 
0d4d8     EA C7 86 B2 | 	byte	$e2, $12, $27, $46, $52, $4c, $43, $11, $0b, $f5, $e0, $e7, $ea, $c7, $86, $b2
0d4dc     EA 14 2E 47 
0d4e0     53 4A 37 0D 
0d4e4     0D F3 E3 E9 
0d4e8     EA B2 89 BA | 	byte	$ea, $14, $2e, $47, $53, $4a, $37, $0d, $0d, $f3, $e3, $e9, $ea, $b2, $89, $ba
0d4ec     EF 1A 34 4B 
0d4f0     53 49 24 10 
0d4f4     0C F3 E6 EC 
0d4f8     E8 A7 91 BF | 	byte	$ef, $1a, $34, $4b, $53, $49, $24, $10, $0c, $f3, $e6, $ec, $e8, $a7, $91, $bf
0d4fc     F7 1D 37 4D 
0d500     52 42 12 14 
0d504     0C F5 E9 EE 
0d508     E7 96 99 CB | 	byte	$f7, $1d, $37, $4d, $52, $42, $12, $14, $0c, $f5, $e9, $ee, $e7, $96, $99, $cb
0d50c     01 1F 3C 4F 
0d510     51 36 0B 16 
0d514     0A F4 EC EF 
0d518     DD 8D A0 D0 | 	byte	$01, $1f, $3c, $4f, $51, $36, $0b, $16, $0a, $f4, $ec, $ef, $dd, $8d, $a0, $d0
0d51c     04 22 40 50 
0d520     4F 26 0C 17 
0d524     09 F5 EF EF 
0d528     D5 89 A3 D9 | 	byte	$04, $22, $40, $50, $4f, $26, $0c, $17, $09, $f5, $ef, $ef, $d5, $89, $a3, $d9
0d52c     09 28 43 50 
0d530     4A 0F 0F 1A 
0d534     0B F6 F1 F0 
0d538     C3 8B AD DE | 	byte	$09, $28, $43, $50, $4a, $0f, $0f, $1a, $0b, $f6, $f1, $f0, $c3, $8b, $ad, $de
0d53c     0B 2C 44 4F 
0d540     40 04 13 1B 
0d544     0A F7 F3 EE 
0d548     BA 8E B3 E7 | 	byte	$0b, $2c, $44, $4f, $40, $04, $13, $1b, $0a, $f7, $f3, $ee, $ba, $8e, $b3, $e7
0d54c     0D 31 45 4F 
0d550     37 00 15 1B 
0d554     0C F9 F5 EB 
0d558     AA 91 BD EA | 	byte	$0d, $31, $45, $4f, $37, $00, $15, $1b, $0c, $f9, $f5, $eb, $aa, $91, $bd, $ea
0d55c     14 36 46 4D 
0d560     1D 03 17 1B 
0d564     0B FB F6 E8 
0d568     A2 93 C4 F0 | 	byte	$14, $36, $46, $4d, $1d, $03, $17, $1b, $0b, $fb, $f6, $e8, $a2, $93, $c4, $f0
0d56c     1B 38 48 48 
0d570     09 07 1A 1B 
0d574     0D FC F5 DF 
0d578     9F 99 CD F2 | 	byte	$1b, $38, $48, $48, $09, $07, $1a, $1b, $0d, $fc, $f5, $df, $9f, $99, $cd, $f2
0d57c     21 3A 47 3D 
0d580     00 09 1E 1E 
0d584     0E FD F6 CF 
0d588     9F A3 D4 F6 | 	byte	$21, $3a, $47, $3d, $00, $09, $1e, $1e, $0e, $fd, $f6, $cf, $9f, $a3, $d4, $f6
0d58c     26 3B 47 2A 
0d590     01 0B 1D 20 
0d594     0F FF F3 CA 
0d598     99 AC D6 FE | 	byte	$26, $3b, $47, $2a, $01, $0b, $1d, $20, $0f, $ff, $f3, $ca, $99, $ac, $d6, $fe
0d59c     28 3C 45 18 
0d5a0     07 0E 1E 20 
0d5a4     12 00 F0 C7 
0d5a8     95 B0 DB 05 | 	byte	$28, $3c, $45, $18, $07, $0e, $1e, $20, $12, $00, $f0, $c7, $95, $b0, $db, $05
0d5ac     2D 3C 41 05 
0d5b0     08 11 21 23 
0d5b4     14 FF E8 C8 
0d5b8     96 B8 DF 08 | 	byte	$2d, $3c, $41, $05, $08, $11, $21, $23, $14, $ff, $e8, $c8, $96, $b8, $df, $08
0d5bc     32 3B 33 01 
0d5c0     08 12 24 24 
0d5c4     15 FF DB C9 
0d5c8     9A BF E1 0F | 	byte	$32, $3b, $33, $01, $08, $12, $24, $24, $15, $ff, $db, $c9, $9a, $bf, $e1, $0f
0d5cc     35 3B 1C 05 
0d5d0     0A 13 26 25 
0d5d4     17 FB D5 C2 
0d5d8     A0 C1 E8 16 | 	byte	$35, $3b, $1c, $05, $0a, $13, $26, $25, $17, $fb, $d5, $c2, $a0, $c1, $e8, $16
0d5dc     35 39 07 0B 
0d5e0     0D 14 2A 28 
0d5e4     18 F5 D7 BA 
0d5e8     A6 C7 F1 18 | 	byte	$35, $39, $07, $0b, $0d, $14, $2a, $28, $18, $f5, $d7, $ba, $a6, $c7, $f1, $18
0d5ec     35 32 FF 0B 
0d5f0     0F 16 2E 28 
0d5f4     16 F0 DB B3 
0d5f8     A9 CB F3 1E | 	byte	$35, $32, $ff, $0b, $0f, $16, $2e, $28, $16, $f0, $db, $b3, $a9, $cb, $f3, $1e
0d5fc     36 22 FF 0C 
0d600     10 19 30 29 
0d604     17 E8 DE B3 
0d608     AF CE FB 22 | 	byte	$36, $22, $ff, $0c, $10, $19, $30, $29, $17, $e8, $de, $b3, $af, $ce, $fb, $22
0d60c     32 10 01 0E 
0d610     11 1B 33 2A 
0d614     12 E3 DE B1 
0d618     B1 D3 01 22 | 	byte	$32, $10, $01, $0e, $11, $1b, $33, $2a, $12, $e3, $de, $b1, $b1, $d3, $01, $22
0d61c     2B 05 05 10 
0d620     11 1F 35 2B 
0d624     0D E2 DB B2 
0d628     B5 DC 04 24 | 	byte	$2b, $05, $05, $10, $11, $1f, $35, $2b, $0d, $e2, $db, $b2, $b5, $dc, $04, $24
0d62c     22 FD 07 13 
0d630     11 22 36 2A 
0d634     05 E3 DB B3 
0d638     B7 E0 09 22 | 	byte	$22, $fd, $07, $13, $11, $22, $36, $2a, $05, $e3, $db, $b3, $b7, $e0, $09, $22
0d63c     17 F9 09 15 
0d640     13 25 38 27 
0d644     03 E4 D8 B6 
0d648     BD E7 0B 1B | 	byte	$17, $f9, $09, $15, $13, $25, $38, $27, $03, $e4, $d8, $b6, $bd, $e7, $0b, $1b
0d64c     0E F8 0A 16 
0d650     15 27 39 20 
0d654     04 E6 D7 B3 
0d658     C2 ED 0D 11 | 	byte	$0e, $f8, $0a, $16, $15, $27, $39, $20, $04, $e6, $d7, $b3, $c2, $ed, $0d, $11
0d65c     09 FF 0C 16 
0d660     17 2D 39 1B 
0d664     FE E9 D7 B5 
0d668     C9 F2 0D 0C | 	byte	$09, $ff, $0c, $16, $17, $2d, $39, $1b, $fe, $e9, $d7, $b5, $c9, $f2, $0d, $0c
0d66c     FB 01 10 17 
0d670     1B 2E 35 1A 
0d674     FF E8 D8 B6 
0d678     D1 F4 07 0A | 	byte	$fb, $01, $10, $17, $1b, $2e, $35, $1a, $ff, $e8, $d8, $b6, $d1, $f4, $07, $0a
0d67c     F6 01 10 17 
0d680     1D 31 2D 1E 
0d684     F7 E7 DB B9 
0d688     D3 F7 FD 0B | 	byte	$f6, $01, $10, $17, $1d, $31, $2d, $1e, $f7, $e7, $db, $b9, $d3, $f7, $fd, $0b
0d68c     F5 01 14 19 
0d690     20 32 28 21 
0d694     F9 E4 DB BD 
0d698     DC F6 F8 06 | 	byte	$f5, $01, $14, $19, $20, $32, $28, $21, $f9, $e4, $db, $bd, $dc, $f6, $f8, $06
0d69c     F8 01 14 1C 
0d6a0     23 31 23 22 
0d6a4     F7 E3 DB C2 
0d6a8     DD F0 FA FC | 	byte	$f8, $01, $14, $1c, $23, $31, $23, $22, $f7, $e3, $db, $c2, $dd, $f0, $fa, $fc
0d6ac     FB 01 14 1E 
0d6b0     24 2C 24 20 
0d6b4     F6 E4 DB C6 
0d6b8     E1 E8 FB F6 | 	byte	$fb, $01, $14, $1e, $24, $2c, $24, $20, $f6, $e4, $db, $c6, $e1, $e8, $fb, $f6
0d6bc     FD 04 15 20 
0d6c0     27 26 2A 1C 
0d6c4     F7 E5 DD CB 
0d6c8     E2 E3 FB F2 | 	byte	$fd, $04, $15, $20, $27, $26, $2a, $1c, $f7, $e5, $dd, $cb, $e2, $e3, $fb, $f2
0d6cc     FE 06 16 23 
0d6d0     27 1D 2E 1D 
0d6d4     F5 E5 E1 D0 
0d6d8     DD E4 F8 F2 | 	byte	$fe, $06, $16, $23, $27, $1d, $2e, $1d, $f5, $e5, $e1, $d0, $dd, $e4, $f8, $f2
0d6dc     FC 06 18 26 
0d6e0     25 1B 30 1A 
0d6e4     F2 E8 E3 D2 
0d6e8     D6 E6 F4 F6 | 	byte	$fc, $06, $18, $26, $25, $1b, $30, $1a, $f2, $e8, $e3, $d2, $d6, $e6, $f4, $f6
0d6ec     FC 05 1C 28 
0d6f0     1E 1C 31 17 
0d6f4     F1 EC E9 D3 
0d6f8     D2 E6 ED FA | 	byte	$fc, $05, $1c, $28, $1e, $1c, $31, $17, $f1, $ec, $e9, $d3, $d2, $e6, $ed, $fa
0d6fc     FA 04 1E 2A 
0d700     17 21 33 17 
0d704     EB EF EA CF 
0d708     D3 E7 E7 FF | 	byte	$fa, $04, $1e, $2a, $17, $21, $33, $17, $eb, $ef, $ea, $cf, $d3, $e7, $e7, $ff
0d70c     FB 05 21 2A 
0d710     12 23 35 15 
0d714     EB F5 EB C8 
0d718     D6 E8 E2 02 | 	byte	$fb, $05, $21, $2a, $12, $23, $35, $15, $eb, $f5, $eb, $c8, $d6, $e8, $e2, $02
0d71c     FB 07 22 25 
0d720     12 25 34 14 
0d724     EA FA EF C3 
0d728     D5 E7 E2 02 | 	byte	$fb, $07, $22, $25, $12, $25, $34, $14, $ea, $fa, $ef, $c3, $d5, $e7, $e2, $02
0d72c     FA 09 24 20 
0d730     16 26 30 13 
0d734     EC FE E4 C4 
0d738     D4 E3 E6 02 | 	byte	$fa, $09, $24, $20, $16, $26, $30, $13, $ec, $fe, $e4, $c4, $d4, $e3, $e6, $02
0d73c     F8 0D 27 1B 
0d740     18 28 2F 0D 
0d744     F0 03 DD C7 
0d748     D8 DD EC 03 | 	byte	$f8, $0d, $27, $1b, $18, $28, $2f, $0d, $f0, $03, $dd, $c7, $d8, $dd, $ec, $03
0d74c     F7 10 27 17 
0d750     19 2C 2B 0D 
0d754     F5 06 DB C7 
0d758     D8 D6 F4 03 | 	byte	$f7, $10, $27, $17, $19, $2c, $2b, $0d, $f5, $06, $db, $c7, $d8, $d6, $f4, $03
0d75c     F7 10 23 19 
0d760     19 2E 2B 0A 
0d764     FB 05 D7 C5 
0d768     DA D2 F6 03 | 	byte	$f7, $10, $23, $19, $19, $2e, $2b, $0a, $fb, $05, $d7, $c5, $da, $d2, $f6, $03
0d76c     F7 13 1D 1C 
0d770     1A 2F 26 08 
0d774     FF 01 DB C5 
0d778     D9 D0 FA 00 | 	byte	$f7, $13, $1d, $1c, $1a, $2f, $26, $08, $ff, $01, $db, $c5, $d9, $d0, $fa, $00
0d77c     F9 15 18 20 
0d780     1C 2E 22 0B 
0d784     03 FB DA C8 
0d788     D4 D3 FC FF | 	byte	$f9, $15, $18, $20, $1c, $2e, $22, $0b, $03, $fb, $da, $c8, $d4, $d3, $fc, $ff
0d78c     FD 14 17 20 
0d790     1D 2D 1F 0C 
0d794     04 F9 D4 CC 
0d798     D0 DC FD FC | 	byte	$fd, $14, $17, $20, $1d, $2d, $1f, $0c, $04, $f9, $d4, $cc, $d0, $dc, $fd, $fc
0d79c     00 10 1A 22 
0d7a0     1F 29 20 0F 
0d7a4     03 FB D0 CC 
0d7a8     C9 E4 FF FA | 	byte	$00, $10, $1a, $22, $1f, $29, $20, $0f, $03, $fb, $d0, $cc, $c9, $e4, $ff, $fa
0d7ac     00 0B 1E 24 
0d7b0     20 24 20 12 
0d7b4     FD FE CF CD 
0d7b8     C3 E6 00 FC | 	byte	$00, $0b, $1e, $24, $20, $24, $20, $12, $fd, $fe, $cf, $cd, $c3, $e6, $00, $fc
0d7bc     00 0A 20 25 
0d7c0     21 1E 21 15 
0d7c4     F9 FD D1 CD 
0d7c8     C1 EB FF FD | 	byte	$00, $0a, $20, $25, $21, $1e, $21, $15, $f9, $fd, $d1, $cd, $c1, $eb, $ff, $fd
0d7cc     FF 08 24 27 
0d7d0     21 1A 22 14 
0d7d4     FB FB D0 C9 
0d7d8     C3 EE FD FD | 	byte	$ff, $08, $24, $27, $21, $1a, $22, $14, $fb, $fb, $d0, $c9, $c3, $ee, $fd, $fd
0d7dc     FC 09 25 27 
0d7e0     1E 19 24 0F 
0d7e4     FD F7 D0 C5 
0d7e8     CB EF FC FC | 	byte	$fc, $09, $25, $27, $1e, $19, $24, $0f, $fd, $f7, $d0, $c5, $cb, $ef, $fc, $fc
0d7ec     FB 0C 27 28 
0d7f0     1A 1A 25 0C 
0d7f4     00 F9 CF BD 
0d7f8     D4 F3 FC FA | 	byte	$fb, $0c, $27, $28, $1a, $1a, $25, $0c, $00, $f9, $cf, $bd, $d4, $f3, $fc, $fa
0d7fc     FB 11 2A 28 
0d800     14 1F 26 07 
0d804     FF FA CE B6 
0d808     D9 F3 FD F8 | 	byte	$fb, $11, $2a, $28, $14, $1f, $26, $07, $ff, $fa, $ce, $b6, $d9, $f3, $fd, $f8
0d80c     F8 15 2C 28 
0d810     0D 22 25 07 
0d814     FD F8 CE B5 
0d818     DD F5 FC F9 | 	byte	$f8, $15, $2c, $28, $0d, $22, $25, $07, $fd, $f8, $ce, $b5, $dd, $f5, $fc, $f9
0d81c     F9 17 2F 28 
0d820     0A 25 21 0A 
0d824     FE F7 C4 B8 
0d828     E2 F3 FC F9 | 	byte	$f9, $17, $2f, $28, $0a, $25, $21, $0a, $fe, $f7, $c4, $b8, $e2, $f3, $fc, $f9
0d82c     FB 1A 31 23 
0d830     09 24 1D 0C 
0d834     00 F4 BF C1 
0d838     E6 F2 FD F8 | 	byte	$fb, $1a, $31, $23, $09, $24, $1d, $0c, $00, $f4, $bf, $c1, $e6, $f2, $fd, $f8
0d83c     FF 1D 31 1D 
0d840     08 23 1C 0A 
0d844     03 F4 B4 CA 
0d848     E8 F1 FE F5 | 	byte	$ff, $1d, $31, $1d, $08, $23, $1c, $0a, $03, $f4, $b4, $ca, $e8, $f1, $fe, $f5
0d84c     05 1E 32 1A 
0d850     0D 1E 1D 07 
0d854     04 F0 AD CD 
0d858     EB F0 02 F3 | 	byte	$05, $1e, $32, $1a, $0d, $1e, $1d, $07, $04, $f0, $ad, $cd, $eb, $f0, $02, $f3
0d85c     06 22 31 13 
0d860     14 19 1F 07 
0d864     04 E4 AC D3 
0d868     EB F0 04 F4 | 	byte	$06, $22, $31, $13, $14, $19, $1f, $07, $04, $e4, $ac, $d3, $eb, $f0, $04, $f4
0d86c     09 26 2E 0D 
0d870     19 14 1F 0A 
0d874     05 D5 B2 D9 
0d878     E9 F4 04 F6 | 	byte	$09, $26, $2e, $0d, $19, $14, $1f, $0a, $05, $d5, $b2, $d9, $e9, $f4, $04, $f6
0d87c     0C 29 2A 08 
0d880     1A 13 1F 0B 
0d884     06 CC BB DE 
0d888     E6 FA 04 FA | 	byte	$0c, $29, $2a, $08, $1a, $13, $1f, $0b, $06, $cc, $bb, $de, $e6, $fa, $04, $fa
0d88c     0D 28 26 09 
0d890     18 15 1E 0B 
0d894     06 BD C0 E0 
0d898     E6 FC 02 FE | 	byte	$0d, $28, $26, $09, $18, $15, $1e, $0b, $06, $bd, $c0, $e0, $e6, $fc, $02, $fe
0d89c     11 28 23 0C 
0d8a0     12 14 20 0D 
0d8a4     01 B6 C5 E1 
0d8a8     E9 00 00 00 | 	byte	$11, $28, $23, $0c, $12, $14, $20, $0d, $01, $b6, $c5, $e1, $e9, $00, $00, $00
0d8ac     15 26 1E 11 
0d8b0     0D 15 21 0D 
0d8b4     F5 B8 CA DF 
0d8b8     EE 02 00 02 | 	byte	$15, $26, $1e, $11, $0d, $15, $21, $0d, $f5, $b8, $ca, $df, $ee, $02, $00, $02
0d8bc     16 24 16 15 
0d8c0     0A 15 23 0E 
0d8c4     EA BB CE DD 
0d8c8     F2 05 02 04 | 	byte	$16, $24, $16, $15, $0a, $15, $23, $0e, $ea, $bb, $ce, $dd, $f2, $05, $02, $04
0d8cc     17 23 11 16 
0d8d0     09 14 23 0E 
0d8d4     DC BE D2 E0 
0d8d8     F6 05 05 06 | 	byte	$17, $23, $11, $16, $09, $14, $23, $0e, $dc, $be, $d2, $e0, $f6, $05, $05, $06
0d8dc     16 22 0F 13 
0d8e0     09 17 22 0A 
0d8e4     D6 C0 D4 E6 
0d8e8     F9 04 07 09 | 	byte	$16, $22, $0f, $13, $09, $17, $22, $0a, $d6, $c0, $d4, $e6, $f9, $04, $07, $09
0d8ec     15 1E 11 0D 
0d8f0     08 1B 23 00 
0d8f4     D7 C1 D4 E8 
0d8f8     FF 04 0A 0B | 	byte	$15, $1e, $11, $0d, $08, $1b, $23, $00, $d7, $c1, $d4, $e8, $ff, $04, $0a, $0b
0d8fc     15 18 14 0B 
0d900     07 1B 22 F4 
0d904     DA C4 D6 EC 
0d908     02 04 0B 0B | 	byte	$15, $18, $14, $0b, $07, $1b, $22, $f4, $da, $c4, $d6, $ec, $02, $04, $0b, $0b
0d90c     15 10 17 09 
0d910     07 1E 20 EF 
0d914     D7 C5 DC F1 
0d918     04 05 0C 0B | 	byte	$15, $10, $17, $09, $07, $1e, $20, $ef, $d7, $c5, $dc, $f1, $04, $05, $0c, $0b
0d91c     16 0C 15 09 
0d920     07 20 1C EA 
0d924     D2 C6 E2 F5 
0d928     06 07 0D 0A | 	byte	$16, $0c, $15, $09, $07, $20, $1c, $ea, $d2, $c6, $e2, $f5, $06, $07, $0d, $0a
0d92c     14 0B 10 0A 
0d930     09 20 10 EF 
0d934     D0 C9 E7 FB 
0d938     07 0C 0C 09 | 	byte	$14, $0b, $10, $0a, $09, $20, $10, $ef, $d0, $c9, $e7, $fb, $07, $0c, $0c, $09
0d93c     10 0C 0C 0B 
0d940     0A 22 FF F5 
0d944     CB CD EA FE 
0d948     07 0F 0B 0A | 	byte	$10, $0c, $0c, $0b, $0a, $22, $ff, $f5, $cb, $cd, $ea, $fe, $07, $0f, $0b, $0a
0d94c     0B 11 08 0C 
0d950     0B 21 F9 F7 
0d954     CA D5 ED 03 
0d958     07 13 09 0B | 	byte	$0b, $11, $08, $0c, $0b, $21, $f9, $f7, $ca, $d5, $ed, $03, $07, $13, $09, $0b
0d95c     04 10 07 0D 
0d960     0A 1B FA F5 
0d964     C7 DC F4 08 
0d968     07 15 08 0A | 	byte	$04, $10, $07, $0d, $0a, $1b, $fa, $f5, $c7, $dc, $f4, $08, $07, $15, $08, $0a
0d96c     02 0C 08 0D 
0d970     0C 0E 00 F1 
0d974     C7 E1 F7 0A 
0d978     09 15 06 06 | 	byte	$02, $0c, $08, $0d, $0c, $0e, $00, $f1, $c7, $e1, $f7, $0a, $09, $15, $06, $06
0d97c     02 06 0A 0E 
0d980     0C 05 05 E9 
0d984     CA E8 FC 0C 
0d988     0D 14 06 01 | 	byte	$02, $06, $0a, $0e, $0c, $05, $05, $e9, $ca, $e8, $fc, $0c, $0d, $14, $06, $01
0d98c     06 00 0B 0E 
0d990     08 01 07 E6 
0d994     CF EC 02 0C 
0d998     10 12 06 FA | 	byte	$06, $00, $0b, $0e, $08, $01, $07, $e6, $cf, $ec, $02, $0c, $10, $12, $06, $fa
0d99c     07 FC 0C 0E 
0d9a0     FD 06 07 E0 
0d9a4     D4 F2 06 0C 
0d9a8     13 10 04 F6 | 	byte	$07, $fc, $0c, $0e, $fd, $06, $07, $e0, $d4, $f2, $06, $0c, $13, $10, $04, $f6
0d9ac     03 FB 0E 0C 
0d9b0     F1 0F 08 DD 
0d9b4     DB F7 0B 0C 
0d9b8     15 10 00 F9 | 	byte	$03, $fb, $0e, $0c, $f1, $0f, $08, $dd, $db, $f7, $0b, $0c, $15, $10, $00, $f9
0d9bc     FB FD 0F 09 
0d9c0     EA 13 09 D8 
0d9c4     E1 FD 0F 0D 
0d9c8     14 11 F9 FF | 	byte	$fb, $fd, $0f, $09, $ea, $13, $09, $d8, $e1, $fd, $0f, $0d, $14, $11, $f9, $ff
0d9cc     F5 FF 10 FD 
0d9d0     EE 15 04 D7 
0d9d4     EA 01 11 0F 
0d9d8     12 11 F0 00 | 	byte	$f5, $ff, $10, $fd, $ee, $15, $04, $d7, $ea, $01, $11, $0f, $12, $11, $f0, $00
0d9dc     F0 02 11 EB 
0d9e0     F4 19 FF DA 
0d9e4     F2 08 12 12 
0d9e8     11 0E EE FD | 	byte	$f0, $02, $11, $eb, $f4, $19, $ff, $da, $f2, $08, $12, $12, $11, $0e, $ee, $fd
0d9ec     ED 03 10 DF 
0d9f0     FD 1C FE DD 
0d9f4     FA 0B 12 14 
0d9f8     12 06 F1 F6 | 	byte	$ed, $03, $10, $df, $fd, $1c, $fe, $dd, $fa, $0b, $12, $14, $12, $06, $f1, $f6
0d9fc     EC 05 07 DE 
0da00     03 1D F9 E4 
0da04     FF 10 12 14 
0da08     13 00 F7 F0 | 	byte	$ec, $05, $07, $de, $03, $1d, $f9, $e4, $ff, $10, $12, $14, $13, $00, $f7, $f0
0da0c     ED 07 FD E5 
0da10     09 1D F0 EA 
0da14     07 14 11 12 
0da18     13 F6 F8 E9 | 	byte	$ed, $07, $fd, $e5, $09, $1d, $f0, $ea, $07, $14, $11, $12, $13, $f6, $f8, $e9
0da1c     EF 05 ED EA 
0da20     0C 1E EF F2 
0da24     0D 16 12 11 
0da28     10 F4 F6 E5 | 	byte	$ef, $05, $ed, $ea, $0c, $1e, $ef, $f2, $0d, $16, $12, $11, $10, $f4, $f6, $e5
0da2c     EE 01 EA EA 
0da30     11 1D EC FA 
0da34     11 17 13 12 
0da38     09 F7 F0 E3 | 	byte	$ee, $01, $ea, $ea, $11, $1d, $ec, $fa, $11, $17, $13, $12, $09, $f7, $f0, $e3
0da3c     F1 F5 EE ED 
0da40     16 1E ED 01 
0da44     16 16 14 13 
0da48     03 FA E9 E3 | 	byte	$f1, $f5, $ee, $ed, $16, $1e, $ed, $01, $16, $16, $14, $13, $03, $fa, $e9, $e3
0da4c     F1 E7 F3 F3 
0da50     17 16 F1 0A 
0da54     1B 16 14 13 
0da58     FB F9 E4 E2 | 	byte	$f1, $e7, $f3, $f3, $17, $16, $f1, $0a, $1b, $16, $14, $13, $fb, $f9, $e4, $e2
0da5c     ED E3 F3 F6 
0da60     1F 0E F6 12 
0da64     1F 14 15 10 
0da68     FA F7 E1 E2 | 	byte	$ed, $e3, $f3, $f6, $1f, $0e, $f6, $12, $1f, $14, $15, $10, $fa, $f7, $e1, $e2
0da6c     E3 EB F4 F8 
0da70     26 0C FD 18 
0da74     20 14 15 0A 
0da78     FE EF E0 E0 | 	byte	$e3, $eb, $f4, $f8, $26, $0c, $fd, $18, $20, $14, $15, $0a, $fe, $ef, $e0, $e0
0da7c     D6 F2 F5 FB 
0da80     29 08 03 1E 
0da84     1F 15 15 FF 
0da88     00 E6 E0 DE | 	byte	$d6, $f2, $f5, $fb, $29, $08, $03, $1e, $1f, $15, $15, $ff, $00, $e6, $e0, $de
0da8c     CE F5 F7 02 
0da90     2A 07 0C 25 
0da94     1E 16 15 FA 
0da98     01 E2 DE D6 | 	byte	$ce, $f5, $f7, $02, $2a, $07, $0c, $25, $1e, $16, $15, $fa, $01, $e2, $de, $d6
0da9c     D2 F7 F5 05 
0daa0     29 06 13 2A 
0daa4     1C 17 10 FA 
0daa8     FC DF DA C8 | 	byte	$d2, $f7, $f5, $05, $29, $06, $13, $2a, $1c, $17, $10, $fa, $fc, $df, $da, $c8
0daac     DA F9 F5 0F 
0dab0     26 07 19 2D 
0dab4     1A 18 0B FE 
0dab8     F4 DF D8 BC | 	byte	$da, $f9, $f5, $0f, $26, $07, $19, $2d, $1a, $18, $0b, $fe, $f4, $df, $d8, $bc
0dabc     E0 FF F6 14 
0dac0     26 0A 21 2E 
0dac4     1A 19 03 00 
0dac8     ED DF CF BB | 	byte	$e0, $ff, $f6, $14, $26, $0a, $21, $2e, $1a, $19, $03, $00, $ed, $df, $cf, $bb
0dacc     E4 00 F7 1C 
0dad0     24 0F 26 2E 
0dad4     1B 19 FC FD 
0dad8     E9 DB C5 C2 | 	byte	$e4, $00, $f7, $1c, $24, $0f, $26, $2e, $1b, $19, $fc, $fd, $e9, $db, $c5, $c2
0dadc     E9 00 FA 1C 
0dae0     21 16 2D 2B 
0dae4     1D 16 FB F8 
0dae8     E9 D9 B6 CB | 	byte	$e9, $00, $fa, $1c, $21, $16, $2d, $2b, $1d, $16, $fb, $f8, $e9, $d9, $b6, $cb
0daec     ED FF FD 21 
0daf0     1F 1A 32 29 
0daf4     1F 0F FE EE 
0daf8     EA D2 AF CC | 	byte	$ed, $ff, $fd, $21, $1f, $1a, $32, $29, $1f, $0f, $fe, $ee, $ea, $d2, $af, $cc
0dafc     F3 FE 03 24 
0db00     20 21 33 28 
0db04     1F 09 FF E8 
0db08     E9 C6 B0 D1 | 	byte	$f3, $fe, $03, $24, $20, $21, $33, $28, $1f, $09, $ff, $e8, $e9, $c6, $b0, $d1
0db0c     F8 FC 0A 27 
0db10     21 28 33 2A 
0db14     1F 01 FA E8 
0db18     E6 B6 B7 D7 | 	byte	$f8, $fc, $0a, $27, $21, $28, $33, $2a, $1f, $01, $fa, $e8, $e6, $b6, $b7, $d7
0db1c     F8 FB 10 29 
0db20     24 2C 30 2C 
0db24     1F FE F4 EA 
0db28     E1 AE BC DA | 	byte	$f8, $fb, $10, $29, $24, $2c, $30, $2c, $1f, $fe, $f4, $ea, $e1, $ae, $bc, $da
0db2c     FC FD 12 2A 
0db30     27 32 2E 2E 
0db34     19 FF E9 EA 
0db38     DC AA BD E0 | 	byte	$fc, $fd, $12, $2a, $27, $32, $2e, $2e, $19, $ff, $e9, $ea, $dc, $aa, $bd, $e0
0db3c     FD 00 17 29 
0db40     2B 34 2F 2F 
0db44     15 FE E6 E9 
0db48     CF AE C1 E6 | 	byte	$fd, $00, $17, $29, $2b, $34, $2f, $2f, $15, $fe, $e6, $e9, $cf, $ae, $c1, $e6
0db4c     FB 04 1E 29 
0db50     30 34 34 2F 
0db54     0B F9 E8 E6 
0db58     C2 B2 C5 E9 | 	byte	$fb, $04, $1e, $29, $30, $34, $34, $2f, $0b, $f9, $e8, $e6, $c2, $b2, $c5, $e9
0db5c     F9 07 24 29 
0db60     35 31 37 2F 
0db64     06 ED EA E3 
0db68     B7 B4 C9 EC | 	byte	$f9, $07, $24, $29, $35, $31, $37, $2f, $06, $ed, $ea, $e3, $b7, $b4, $c9, $ec
0db6c     F7 0C 28 29 
0db70     38 31 3B 2B 
0db74     02 E9 E9 DC 
0db78     B5 B4 CE F0 | 	byte	$f7, $0c, $28, $29, $38, $31, $3b, $2b, $02, $e9, $e9, $dc, $b5, $b4, $ce, $f0
0db7c     F7 10 2D 29 
0db80     39 34 3D 27 
0db84     FB EA E6 CE 
0db88     B9 B6 D1 F0 | 	byte	$f7, $10, $2d, $29, $39, $34, $3d, $27, $fb, $ea, $e6, $ce, $b9, $b6, $d1, $f0
0db8c     F9 13 32 2A 
0db90     37 38 40 1E 
0db94     F6 EC E6 C0 
0db98     BF BB D7 F0 | 	byte	$f9, $13, $32, $2a, $37, $38, $40, $1e, $f6, $ec, $e6, $c0, $bf, $bb, $d7, $f0
0db9c     FB 19 36 2A 
0dba0     36 3E 41 14 
0dba4     F1 EB E2 B7 
0dba8     C1 BF DB EF | 	byte	$fb, $19, $36, $2a, $36, $3e, $41, $14, $f1, $eb, $e2, $b7, $c1, $bf, $db, $ef
0dbac     FD 21 39 29 
0dbb0     38 42 42 06 
0dbb4     F2 EA D9 B5 
0dbb8     C1 C0 E0 EE | 	byte	$fd, $21, $39, $29, $38, $42, $42, $06, $f2, $ea, $d9, $b5, $c1, $c0, $e0, $ee
0dbbc     FE 28 3C 25 
0dbc0     3D 46 3C F9 
0dbc4     F2 E9 D1 B9 
0dbc8     C3 C4 E3 EE | 	byte	$fe, $28, $3c, $25, $3d, $46, $3c, $f9, $f2, $e9, $d1, $b9, $c3, $c4, $e3, $ee
0dbcc     03 30 3D 21 
0dbd0     41 4B 30 F7 
0dbd4     F1 E7 C2 C1 
0dbd8     C5 C9 E3 EE | 	byte	$03, $30, $3d, $21, $41, $4b, $30, $f7, $f1, $e7, $c2, $c1, $c5, $c9, $e3, $ee
0dbdc     06 34 3B 20 
0dbe0     47 4F 25 FA 
0dbe4     F0 E3 B7 C3 
0dbe8     C8 CC E4 ED | 	byte	$06, $34, $3b, $20, $47, $4f, $25, $fa, $f0, $e3, $b7, $c3, $c8, $cc, $e4, $ed
0dbec     0F 38 38 23 
0dbf0     4B 51 18 FD 
0dbf4     F0 DF B2 C5 
0dbf8     CB D0 E3 EE | 	byte	$0f, $38, $38, $23, $4b, $51, $18, $fd, $f0, $df, $b2, $c5, $cb, $d0, $e3, $ee
0dbfc     17 40 2F 24 
0dc00     52 4E 0A FB 
0dc04     F0 D3 B4 C5 
0dc08     CD D1 E4 F1 | 	byte	$17, $40, $2f, $24, $52, $4e, $0a, $fb, $f0, $d3, $b4, $c5, $cd, $d1, $e4, $f1
0dc0c     1B 44 28 2A 
0dc10     58 48 08 F9 
0dc14     EE C9 B8 C7 
0dc18     CF D2 E3 F4 | 	byte	$1b, $44, $28, $2a, $58, $48, $08, $f9, $ee, $c9, $b8, $c7, $cf, $d2, $e3, $f4
0dc1c     1F 46 2B 2C 
0dc20     5B 3D 09 F8 
0dc24     EB B9 BC CB 
0dc28     D1 D4 E1 F8 | 	byte	$1f, $46, $2b, $2c, $5b, $3d, $09, $f8, $eb, $b9, $bc, $cb, $d1, $d4, $e1, $f8
0dc2c     2A 44 27 32 
0dc30     5B 2F 09 F5 
0dc34     E6 B5 BF CD 
0dc38     D4 D6 DF FE | 	byte	$2a, $44, $27, $32, $5b, $2f, $09, $f5, $e6, $b5, $bf, $cd, $d4, $d6, $df, $fe
0dc3c     2B 41 2B 3A 
0dc40     56 2B 08 F3 
0dc44     DF B3 C0 CF 
0dc48     D5 D8 DF 06 | 	byte	$2b, $41, $2b, $3a, $56, $2b, $08, $f3, $df, $b3, $c0, $cf, $d5, $d8, $df, $06
0dc4c     2F 42 2C 40 
0dc50     4F 2B 08 F3 
0dc54     D2 B6 C1 D0 
0dc58     D6 D9 E0 0D | 	byte	$2f, $42, $2c, $40, $4f, $2b, $08, $f3, $d2, $b6, $c1, $d0, $d6, $d9, $e0, $0d
0dc5c     32 44 2D 3F 
0dc60     4C 26 04 F1 
0dc64     C6 BA C4 D1 
0dc68     D7 D7 E5 11 | 	byte	$32, $44, $2d, $3f, $4c, $26, $04, $f1, $c6, $ba, $c4, $d1, $d7, $d7, $e5, $11
0dc6c     30 46 31 3C 
0dc70     4E 21 00 ED 
0dc74     BE BD C8 D2 
0dc78     DA D4 EA 16 | 	byte	$30, $46, $31, $3c, $4e, $21, $00, $ed, $be, $bd, $c8, $d2, $da, $d4, $ea, $16
0dc7c     30 49 35 39 
0dc80     4B 22 FE E8 
0dc84     B6 BF CB D1 
0dc88     DE D1 F1 18 | 	byte	$30, $49, $35, $39, $4b, $22, $fe, $e8, $b6, $bf, $cb, $d1, $de, $d1, $f1, $18
0dc8c     34 4B 34 3B 
0dc90     47 20 FE DD 
0dc94     B6 C0 CD D0 
0dc98     E1 D1 F3 19 | 	byte	$34, $4b, $34, $3b, $47, $20, $fe, $dd, $b6, $c0, $cd, $d0, $e1, $d1, $f3, $19
0dc9c     36 4F 2F 3F 
0dca0     40 20 FB D0 
0dca4     B8 C2 CE D0 
0dca8     E1 D2 FB 1A | 	byte	$36, $4f, $2f, $3f, $40, $20, $fb, $d0, $b8, $c2, $ce, $d0, $e1, $d2, $fb, $1a
0dcac     3B 52 2D 46 
0dcb0     3D 1C F9 C2 
0dcb4     BC C6 CE D3 
0dcb8     DF D5 00 1B | 	byte	$3b, $52, $2d, $46, $3d, $1c, $f9, $c2, $bc, $c6, $ce, $d3, $df, $d5, $00, $1b
0dcbc     40 51 2E 48 
0dcc0     36 16 F7 BA 
0dcc4     BE C8 CC D7 
0dcc8     DC DB FF 21 | 	byte	$40, $51, $2e, $48, $36, $16, $f7, $ba, $be, $c8, $cc, $d7, $dc, $db, $ff, $21
0dccc     44 4D 34 48 
0dcd0     32 13 F0 B6 
0dcd4     C0 CA CB DA 
0dcd8     D9 DF FD 24 | 	byte	$44, $4d, $34, $48, $32, $13, $f0, $b6, $c0, $ca, $cb, $da, $d9, $df, $fd, $24
0dcdc     4B 4B 3C 47 
0dce0     2E 0E EB B5 
0dce4     C0 CB CC DA 
0dce8     D7 E4 FF 28 | 	byte	$4b, $4b, $3c, $47, $2e, $0e, $eb, $b5, $c0, $cb, $cc, $da, $d7, $e4, $ff, $28
0dcec     4E 49 41 44 
0dcf0     2B 0D DD B7 
0dcf4     C0 CA CF DB 
0dcf8     D7 E6 02 2A | 	byte	$4e, $49, $41, $44, $2b, $0d, $dd, $b7, $c0, $ca, $cf, $db, $d7, $e6, $02, $2a
0dcfc     4C 4E 44 3D 
0dd00     27 07 CD BC 
0dd04     C2 C9 D2 DA 
0dd08     D8 E7 09 31 | 	byte	$4c, $4e, $44, $3d, $27, $07, $cd, $bc, $c2, $c9, $d2, $da, $d8, $e7, $09, $31
0dd0c     49 55 48 37 
0dd10     24 03 C9 BF 
0dd14     C4 C9 D4 D8 
0dd18     DC E7 0C 34 | 	byte	$49, $55, $48, $37, $24, $03, $c9, $bf, $c4, $c9, $d4, $d8, $dc, $e7, $0c, $34
0dd1c     4A 59 4B 32 
0dd20     1E FD BF BF 
0dd24     C4 CC D5 D5 
0dd28     DD EA 0E 37 | 	byte	$4a, $59, $4b, $32, $1e, $fd, $bf, $bf, $c4, $cc, $d5, $d5, $dd, $ea, $0e, $37
0dd2c     4D 5C 4B 2B 
0dd30     1B F3 C1 C0 
0dd34     C2 D0 D8 D3 
0dd38     E0 ED 12 33 | 	byte	$4d, $5c, $4b, $2b, $1b, $f3, $c1, $c0, $c2, $d0, $d8, $d3, $e0, $ed, $12, $33
0dd3c     57 5F 49 28 
0dd40     13 EB C4 C0 
0dd44     C0 D2 DA D2 
0dd48     E1 F0 19 31 | 	byte	$57, $5f, $49, $28, $13, $eb, $c4, $c0, $c0, $d2, $da, $d2, $e1, $f0, $19, $31
0dd4c     5E 61 47 24 
0dd50     0F DB C8 C1 
0dd54     C2 D4 DA D3 
0dd58     E1 F4 1C 35 | 	byte	$5e, $61, $47, $24, $0f, $db, $c8, $c1, $c2, $d4, $da, $d3, $e1, $f4, $1c, $35
0dd5c     65 66 41 22 
0dd60     08 CE CB C0 
0dd64     C7 D5 D8 D3 
0dd68     E2 FB 1B 3F | 	byte	$65, $66, $41, $22, $08, $ce, $cb, $c0, $c7, $d5, $d8, $d3, $e2, $fb, $1b, $3f
0dd6c     6B 64 39 1F 
0dd70     00 CA CC C0 
0dd74     C9 D8 D7 D3 
0dd78     E6 FE 19 48 | 	byte	$6b, $64, $39, $1f, $00, $ca, $cc, $c0, $c9, $d8, $d7, $d3, $e6, $fe, $19, $48
0dd7c     6E 62 35 1B 
0dd80     F3 C7 CA C2 
0dd84     CC D9 D7 D3 
0dd88     E7 02 1C 4C | 	byte	$6e, $62, $35, $1b, $f3, $c7, $ca, $c2, $cc, $d9, $d7, $d3, $e7, $02, $1c, $4c
0dd8c     75 64 2D 15 
0dd90     EB C9 CA C6 
0dd94     CF D9 D7 D1 
0dd98     EE 05 1D 53 | 	byte	$75, $64, $2d, $15, $eb, $c9, $ca, $c6, $cf, $d9, $d7, $d1, $ee, $05, $1d, $53
0dd9c     77 60 26 11 
0dda0     DD CB C8 C9 
0dda4     D2 D8 D5 D0 
0dda8     F4 03 29 5A | 	byte	$77, $60, $26, $11, $dd, $cb, $c8, $c9, $d2, $d8, $d5, $d0, $f4, $03, $29, $5a
0ddac     7A 5A 23 08 
0ddb0     D3 CC CB CC 
0ddb4     D5 D9 D5 D1 
0ddb8     F6 03 31 5C | 	byte	$7a, $5a, $23, $08, $d3, $cc, $cb, $cc, $d5, $d9, $d5, $d1, $f6, $03, $31, $5c
0ddbc     7D 57 1E FD 
0ddc0     CE C9 CE CF 
0ddc4     D7 D8 D2 D5 
0ddc8     FA 06 34 63 | 	byte	$7d, $57, $1e, $fd, $ce, $c9, $ce, $cf, $d7, $d8, $d2, $d5, $fa, $06, $34, $63
0ddcc     7E 4B 19 F9 
0ddd0     C9 C6 D2 D4 
0ddd4     D8 DA CE DA 
0ddd8     FB 0D 39 67 | 	byte	$7e, $4b, $19, $f9, $c9, $c6, $d2, $d4, $d8, $da, $ce, $da, $fb, $0d, $39, $67
0dddc     7E 40 15 EE 
0dde0     C9 C6 D4 D7 
0dde4     D9 DB CA E0 
0dde8     FC 15 43 69 | 	byte	$7e, $40, $15, $ee, $c9, $c6, $d4, $d7, $d9, $db, $ca, $e0, $fc, $15, $43, $69
0ddec     7D 32 10 E0 
0ddf0     C8 C9 D8 DB 
0ddf4     D9 DA C6 E6 
0ddf8     FB 1B 46 6C | 	byte	$7d, $32, $10, $e0, $c8, $c9, $d8, $db, $d9, $da, $c6, $e6, $fb, $1b, $46, $6c
0ddfc     79 2A 09 D8 
0de00     C7 CB DA DE 
0de04     D9 DA C5 E7 
0de08     00 22 4C 6F | 	byte	$79, $2a, $09, $d8, $c7, $cb, $da, $de, $d9, $da, $c5, $e7, $00, $22, $4c, $6f
0de0c     74 21 02 CF 
0de10     C9 CF DE E2 
0de14     DA D7 C9 E8 
0de18     07 27 51 71 | 	byte	$74, $21, $02, $cf, $c9, $cf, $de, $e2, $da, $d7, $c9, $e8, $07, $27, $51, $71
0de1c     6C 15 FC CA 
0de20     C9 D1 E2 E4 
0de24     DC D2 CE EA 
0de28     0D 2E 52 73 | 	byte	$6c, $15, $fc, $ca, $c9, $d1, $e2, $e4, $dc, $d2, $ce, $ea, $0d, $2e, $52, $73
0de2c     5F 13 ED C9 
0de30     CC D3 E5 E7 
0de34     DE CC D4 E9 
0de38     19 34 55 73 | 	byte	$5f, $13, $ed, $c9, $cc, $d3, $e5, $e7, $de, $cc, $d4, $e9, $19, $34, $55, $73
0de3c     58 0D DE CD 
0de40     CF D5 E8 E7 
0de44     DF C7 D6 EE 
0de48     1F 38 5A 72 | 	byte	$58, $0d, $de, $cd, $cf, $d5, $e8, $e7, $df, $c7, $d6, $ee, $1f, $38, $5a, $72
0de4c     47 06 D5 D0 
0de50     D2 D8 EC EA 
0de54     DE C8 D6 F6 
0de58     23 3D 5C 71 | 	byte	$47, $06, $d5, $d0, $d2, $d8, $ec, $ea, $de, $c8, $d6, $f6, $23, $3d, $5c, $71
0de5c     35 FF CE D2 
0de60     D5 DC EE EB 
0de64     DB CA D6 FC 
0de68     2A 40 5B 6B | 	byte	$35, $ff, $ce, $d2, $d5, $dc, $ee, $eb, $db, $ca, $d6, $fc, $2a, $40, $5b, $6b
0de6c     2F EE D2 D3 
0de70     D7 DF F1 ED 
0de74     DA CF D5 05 
0de78     30 42 5E 60 | 	byte	$2f, $ee, $d2, $d3, $d7, $df, $f1, $ed, $da, $cf, $d5, $05, $30, $42, $5e, $60
0de7c     24 DA D6 D6 
0de80     D9 E2 F3 EE 
0de84     D6 D2 D9 0E 
0de88     33 44 5F 56 | 	byte	$24, $da, $d6, $d6, $d9, $e2, $f3, $ee, $d6, $d2, $d9, $0e, $33, $44, $5f, $56
0de8c     1A CC DA DA 
0de90     DC E7 F5 EF 
0de94     D6 D3 E0 15 
0de98     39 47 5E 48 | 	byte	$1a, $cc, $da, $da, $dc, $e7, $f5, $ef, $d6, $d3, $e0, $15, $39, $47, $5e, $48
0de9c     0D CB DB DD 
0dea0     E0 E9 F8 EF 
0dea4     D8 D2 E7 1A 
0dea8     3B 48 5B 40 | 	byte	$0d, $cb, $db, $dd, $e0, $e9, $f8, $ef, $d8, $d2, $e7, $1a, $3b, $48, $5b, $40
0deac     F3 CD DC DE 
0deb0     E3 EC FB EA 
0deb4     DC D0 F2 1D 
0deb8     3E 4A 55 3A | 	byte	$f3, $cd, $dc, $de, $e3, $ec, $fb, $ea, $dc, $d0, $f2, $1d, $3e, $4a, $55, $3a
0debc     DA D5 E0 E1 
0dec0     E6 ED FD E7 
0dec4     E0 CF FA 25 
0dec8     41 49 4B 34 | 	byte	$da, $d5, $e0, $e1, $e6, $ed, $fd, $e7, $e0, $cf, $fa, $25, $41, $49, $4b, $34
0decc     CE D9 E3 E4 
0ded0     E9 F0 FF E7 
0ded4     E3 D1 FF 29 
0ded8     42 49 42 26 | 	byte	$ce, $d9, $e3, $e4, $e9, $f0, $ff, $e7, $e3, $d1, $ff, $29, $42, $49, $42, $26
0dedc     C7 DA E6 E6 
0dee0     EB F1 FE E7 
0dee4     E4 D7 04 2C 
0dee8     43 47 38 12 | 	byte	$c7, $da, $e6, $e6, $eb, $f1, $fe, $e7, $e4, $d7, $04, $2c, $43, $47, $38, $12
0deec     CA DC E9 EA 
0def0     EE F5 FE E7 
0def4     E4 DD 0A 2F 
0def8     44 43 32 F1 | 	byte	$ca, $dc, $e9, $ea, $ee, $f5, $fe, $e7, $e4, $dd, $0a, $2f, $44, $43, $32, $f1
0defc     CC E2 EB EE 
0df00     F0 F9 FE E9 
0df04     E2 E8 0D 33 
0df08     44 3B 2B E4 | 	byte	$cc, $e2, $eb, $ee, $f0, $f9, $fe, $e9, $e2, $e8, $0d, $33, $44, $3b, $2b, $e4
0df0c     CF E4 EE F1 
0df10     F1 FA FF EC 
0df14     E1 EC 16 36 
0df18     43 31 22 D9 | 	byte	$cf, $e4, $ee, $f1, $f1, $fa, $ff, $ec, $e1, $ec, $16, $36, $43, $31, $22, $d9
0df1c     CF E8 F2 F5 
0df20     F3 FD FF EF 
0df24     E4 F2 19 37 
0df28     40 27 13 D5 | 	byte	$cf, $e8, $f2, $f5, $f3, $fd, $ff, $ef, $e4, $f2, $19, $37, $40, $27, $13, $d5
0df2c     D1 EB F5 F8 
0df30     F5 FE FD F0 
0df34     E8 F8 1B 3A 
0df38     3C 20 FF D4 | 	byte	$d1, $eb, $f5, $f8, $f5, $fe, $fd, $f0, $e8, $f8, $1b, $3a, $3c, $20, $ff, $d4
0df3c     D6 EE F9 FA 
0df40     F6 03 FC F1 
0df44     F0 FA 1F 3B 
0df48     36 16 F1 CF | 	byte	$d6, $ee, $f9, $fa, $f6, $03, $fc, $f1, $f0, $fa, $1f, $3b, $36, $16, $f1, $cf
0df4c     DC F1 FC FD 
0df50     F7 07 FE F0 
0df54     F6 01 22 3A 
0df58     2A 0E EF CB | 	byte	$dc, $f1, $fc, $fd, $f7, $07, $fe, $f0, $f6, $01, $22, $3a, $2a, $0e, $ef, $cb
0df5c     DD F5 01 FE 
0df60     F7 0A FC F0 
0df64     F9 06 22 39 
0df68     1B 01 EB CB | 	byte	$dd, $f5, $01, $fe, $f7, $0a, $fc, $f0, $f9, $06, $22, $39, $1b, $01, $eb, $cb
0df6c     E4 F9 03 00 
0df70     F9 0C FD F4 
0df74     FD 09 27 37 
0df78     10 F7 E7 CD | 	byte	$e4, $f9, $03, $00, $f9, $0c, $fd, $f4, $fd, $09, $27, $37, $10, $f7, $e7, $cd
0df7c     E5 FD 07 01 
0df80     FD 0E FC FB 
0df84     FF 0C 26 30 
0df88     03 F4 DE CE | 	byte	$e5, $fd, $07, $01, $fd, $0e, $fc, $fb, $ff, $0c, $26, $30, $03, $f4, $de, $ce
0df8c     EB 02 09 01 
0df90     01 0E FB 02 
0df94     01 0E 27 25 
0df98     F7 F7 D6 D0 | 	byte	$eb, $02, $09, $01, $01, $0e, $fb, $02, $01, $0e, $27, $25, $f7, $f7, $d6, $d0
0df9c     EF 05 0B 02 
0dfa0     05 0C FA 07 
0dfa4     03 11 28 18 
0dfa8     ED FA D2 D6 | 	byte	$ef, $05, $0b, $02, $05, $0c, $fa, $07, $03, $11, $28, $18, $ed, $fa, $d2, $d6
0dfac     F2 0A 0C 04 
0dfb0     0B 0B FA 0B 
0dfb4     05 12 24 07 
0dfb8     EB F7 CD D9 | 	byte	$f2, $0a, $0c, $04, $0b, $0b, $fa, $0b, $05, $12, $24, $07, $eb, $f7, $cd, $d9
0dfbc     F8 0D 0C 06 
0dfc0     0E 08 FE 0E 
0dfc4     07 16 1E F6 
0dfc8     EF F1 CB DF | 	byte	$f8, $0d, $0c, $06, $0e, $08, $fe, $0e, $07, $16, $1e, $f6, $ef, $f1, $cb, $df
0dfcc     FB 11 0D 0B 
0dfd0     11 05 03 10 
0dfd4     07 16 11 EB 
0dfd8     F7 EE CA E2 | 	byte	$fb, $11, $0d, $0b, $11, $05, $03, $10, $07, $16, $11, $eb, $f7, $ee, $ca, $e2
0dfdc     00 13 0D 0E 
0dfe0     13 03 09 12 
0dfe4     08 17 00 E6 
0dfe8     FA E5 CB E8 | 	byte	$00, $13, $0d, $0e, $13, $03, $09, $12, $08, $17, $00, $e6, $fa, $e5, $cb, $e8
0dfec     06 14 10 12 
0dff0     12 03 0D 14 
0dff4     09 14 EC EA 
0dff8     FC DD CE ED | 	byte	$06, $14, $10, $12, $12, $03, $0d, $14, $09, $14, $ec, $ea, $fc, $dd, $ce, $ed
0dffc     08 14 13 15 
0e000     0F 05 10 14 
0e004     0A 0B DF F0 
0e008     00 D7 D3 EF | 	byte	$08, $14, $13, $15, $0f, $05, $10, $14, $0a, $0b, $df, $f0, $00, $d7, $d3, $ef
0e00c     0D 14 17 17 
0e010     0D 0A 13 13 
0e014     0A 00 DA F3 
0e018     01 D1 D9 F4 | 	byte	$0d, $14, $17, $17, $0d, $0a, $13, $13, $0a, $00, $da, $f3, $01, $d1, $d9, $f4
0e01c     10 15 1B 19 
0e020     08 0F 15 12 
0e024     0A E9 E1 F6 
0e028     FE D0 DC FA | 	byte	$10, $15, $1b, $19, $08, $0f, $15, $12, $0a, $e9, $e1, $f6, $fe, $d0, $dc, $fa
0e02c     10 18 20 17 
0e030     07 11 17 0F 
0e034     07 D2 E7 FB 
0e038     F7 CD E2 FD | 	byte	$10, $18, $20, $17, $07, $11, $17, $0f, $07, $d2, $e7, $fb, $f7, $cd, $e2, $fd
0e03c     10 1C 23 12 
0e040     09 13 18 0F 
0e044     FB C9 ED 00 
0e048     F5 CE E5 02 | 	byte	$10, $1c, $23, $12, $09, $13, $18, $0f, $fb, $c9, $ed, $00, $f5, $ce, $e5, $02
0e04c     10 20 26 0C 
0e050     0F 15 18 0C 
0e054     EB CD F1 02 
0e058     EB D1 EA 06 | 	byte	$10, $20, $26, $0c, $0f, $15, $18, $0c, $eb, $cd, $f1, $02, $eb, $d1, $ea, $06
0e05c     11 24 26 08 
0e060     15 17 18 07 
0e064     D1 D9 F7 06 
0e068     E4 D3 EF 07 | 	byte	$11, $24, $26, $08, $15, $17, $18, $07, $d1, $d9, $f7, $06, $e4, $d3, $ef, $07
0e06c     15 29 26 05 
0e070     18 19 18 FE 
0e074     BC E3 FB 08 
0e078     E0 D8 F4 06 | 	byte	$15, $29, $26, $05, $18, $19, $18, $fe, $bc, $e3, $fb, $08, $e0, $d8, $f4, $06
0e07c     1A 2D 1E 0B 
0e080     1A 19 17 F0 
0e084     BB E5 FF 09 
0e088     DA DE F6 05 | 	byte	$1a, $2d, $1e, $0b, $1a, $19, $17, $f0, $bb, $e5, $ff, $09, $da, $de, $f6, $05
0e08c     1F 30 13 10 
0e090     1B 18 14 D2 
0e094     C4 EC 00 06 
0e098     D8 E3 F9 06 | 	byte	$1f, $30, $13, $10, $1b, $18, $14, $d2, $c4, $ec, $00, $06, $d8, $e3, $f9, $06
0e09c     22 31 09 18 
0e0a0     1D 17 10 B9 
0e0a4     D1 F3 03 03 
0e0a8     D8 E6 F9 0B | 	byte	$22, $31, $09, $18, $1d, $17, $10, $b9, $d1, $f3, $03, $03, $d8, $e6, $f9, $0b
0e0ac     28 31 04 1D 
0e0b0     1E 17 02 AD 
0e0b4     DA F9 07 02 
0e0b8     D8 EB F8 0D | 	byte	$28, $31, $04, $1d, $1e, $17, $02, $ad, $da, $f9, $07, $02, $d8, $eb, $f8, $0d
0e0bc     2C 28 07 1F 
0e0c0     1D 17 EC AE 
0e0c4     DF FE 0B F9 
0e0c8     D9 ED F8 12 | 	byte	$2c, $28, $07, $1f, $1d, $17, $ec, $ae, $df, $fe, $0b, $f9, $d9, $ed, $f8, $12
0e0cc     30 1F 12 22 
0e0d0     1C 15 D8 BD 
0e0d4     E5 01 0F F3 
0e0d8     DC EF F7 19 | 	byte	$30, $1f, $12, $22, $1c, $15, $d8, $bd, $e5, $01, $0f, $f3, $dc, $ef, $f7, $19
0e0dc     32 12 19 25 
0e0e0     1B 0F B9 C8 
0e0e4     EC 05 12 F1 
0e0e8     DF EF FC 1F | 	byte	$32, $12, $19, $25, $1b, $0f, $b9, $c8, $ec, $05, $12, $f1, $df, $ef, $fc, $1f
0e0ec     31 0B 1C 27 
0e0f0     1A 06 AA CB 
0e0f4     F5 08 15 ED 
0e0f8     E1 EC 01 21 | 	byte	$31, $0b, $1c, $27, $1a, $06, $aa, $cb, $f5, $08, $15, $ed, $e1, $ec, $01, $21
0e0fc     29 0C 20 26 
0e100     19 F2 AC D3 
0e104     FC 0B 16 EC 
0e108     E4 EB 03 26 | 	byte	$29, $0c, $20, $26, $19, $f2, $ac, $d3, $fc, $0b, $16, $ec, $e4, $eb, $03, $26
0e10c     1D 12 26 26 
0e110     17 DE B2 DD 
0e114     FF 0F 15 E9 
0e118     E7 EB 08 28 | 	byte	$1d, $12, $26, $26, $17, $de, $b2, $dd, $ff, $0f, $15, $e9, $e7, $eb, $08, $28
0e11c     15 17 28 24 
0e120     10 C4 B9 E3 
0e124     05 13 16 E8 
0e128     E6 ED 0F 25 | 	byte	$15, $17, $28, $24, $10, $c4, $b9, $e3, $05, $13, $16, $e8, $e6, $ed, $0f, $25
0e12c     12 18 2B 23 
0e130     09 B3 BC EC 
0e134     0B 16 12 E7 
0e138     E4 F2 11 1D | 	byte	$12, $18, $2b, $23, $09, $b3, $bc, $ec, $0b, $16, $12, $e7, $e4, $f2, $11, $1d
0e13c     15 1B 2C 22 
0e140     F4 B0 C2 F4 
0e144     0E 1B 0D E8 
0e148     E3 F4 16 12 | 	byte	$15, $1b, $2c, $22, $f4, $b0, $c2, $f4, $0e, $1b, $0d, $e8, $e3, $f4, $16, $12
0e14c     1B 20 2C 1E 
0e150     E4 B1 CA F9 
0e154     13 1F 0B E7 
0e158     E2 FA 14 0F | 	byte	$1b, $20, $2c, $1e, $e4, $b1, $ca, $f9, $13, $1f, $0b, $e7, $e2, $fa, $14, $0f
0e15c     1D 23 2C 1A 
0e160     CB B2 D7 FF 
0e164     16 24 09 E3 
0e168     E3 FD 0F 11 | 	byte	$1d, $23, $2c, $1a, $cb, $b2, $d7, $ff, $16, $24, $09, $e3, $e3, $fd, $0f, $11
0e16c     1E 26 2C 0B 
0e170     BF B4 E0 06 
0e174     1A 27 07 E1 
0e178     E6 01 06 17 | 	byte	$1e, $26, $2c, $0b, $bf, $b4, $e0, $06, $1a, $27, $07, $e1, $e6, $01, $06, $17
0e17c     1F 29 2A FD 
0e180     BB B8 E4 0E 
0e184     1C 29 02 DF 
0e188     E8 02 01 1D | 	byte	$1f, $29, $2a, $fd, $bb, $b8, $e4, $0e, $1c, $29, $02, $df, $e8, $02, $01, $1d
0e18c     21 2B 29 EA 
0e190     B7 BE ED 14 
0e194     20 2A FC DE 
0e198     EC FC 01 20 | 	byte	$21, $2b, $29, $ea, $b7, $be, $ed, $14, $20, $2a, $fc, $de, $ec, $fc, $01, $20
0e19c     22 2D 22 DE 
0e1a0     B4 C3 F6 17 
0e1a4     23 2A F7 DE 
0e1a8     EF F4 08 23 | 	byte	$22, $2d, $22, $de, $b4, $c3, $f6, $17, $23, $2a, $f7, $de, $ef, $f4, $08, $23
0e1ac     22 2D 19 D1 
0e1b0     B3 CD FB 1E 
0e1b4     27 29 EF DE 
0e1b8     EE EE 0D 26 | 	byte	$22, $2d, $19, $d1, $b3, $cd, $fb, $1e, $27, $29, $ef, $de, $ee, $ee, $0d, $26
0e1bc     23 2D 11 CB 
0e1c0     B3 D4 04 21 
0e1c4     2B 25 EC E1 
0e1c8     E9 EE 14 28 | 	byte	$23, $2d, $11, $cb, $b3, $d4, $04, $21, $2b, $25, $ec, $e1, $e9, $ee, $14, $28
0e1cc     24 2C FE C3 
0e1d0     B5 DE 08 26 
0e1d4     2F 23 E7 E3 
0e1d8     E2 F2 17 29 | 	byte	$24, $2c, $fe, $c3, $b5, $de, $08, $26, $2f, $23, $e7, $e3, $e2, $f2, $17, $29
0e1dc     24 29 EE C0 
0e1e0     B9 E7 10 2A 
0e1e4     31 1C E3 E2 
0e1e8     DD F4 1D 29 | 	byte	$24, $29, $ee, $c0, $b9, $e7, $10, $2a, $31, $1c, $e3, $e2, $dd, $f4, $1d, $29
0e1ec     26 21 E8 BB 
0e1f0     BF EB 17 2C 
0e1f4     34 13 E3 DC 
0e1f8     DC FD 21 2A | 	byte	$26, $21, $e8, $bb, $bf, $eb, $17, $2c, $34, $13, $e3, $dc, $dc, $fd, $21, $2a
0e1fc     27 19 DF B9 
0e200     C3 F4 1E 30 
0e204     35 13 E0 D5 
0e208     DD 04 25 29 | 	byte	$27, $19, $df, $b9, $c3, $f4, $1e, $30, $35, $13, $e0, $d5, $dd, $04, $25, $29
0e20c     27 0A D8 BA 
0e210     CB FD 22 32 
0e214     35 0B DD D0 
0e218     E1 08 28 29 | 	byte	$27, $0a, $d8, $ba, $cb, $fd, $22, $32, $35, $0b, $dd, $d0, $e1, $08, $28, $29
0e21c     26 FD D1 BA 
0e220     D6 01 28 35 
0e224     33 08 D6 D0 
0e228     E6 0E 28 28 | 	byte	$26, $fd, $d1, $ba, $d6, $01, $28, $35, $33, $08, $d6, $d0, $e6, $0e, $28, $28
0e22c     22 F5 D0 BB 
0e230     DE 07 2D 36 
0e234     33 02 CE D0 
0e238     EC 12 2A 27 | 	byte	$22, $f5, $d0, $bb, $de, $07, $2d, $36, $33, $02, $ce, $d0, $ec, $12, $2a, $27
0e23c     1A EE CC BE 
0e240     E5 0E 31 36 
0e244     32 F5 C9 D0 
0e248     F1 15 2C 28 | 	byte	$1a, $ee, $cc, $be, $e5, $0e, $31, $36, $32, $f5, $c9, $d0, $f1, $15, $2c, $28
0e24c     0D E9 C8 C3 
0e250     EA 13 35 35 
0e254     32 EE C9 D3 
0e258     F5 17 2D 25 | 	byte	$0d, $e9, $c8, $c3, $ea, $13, $35, $35, $32, $ee, $c9, $d3, $f5, $17, $2d, $25
0e25c     01 E4 C7 C9 
0e260     EF 18 38 34 
0e264     2D E2 C9 DB 
0e268     F9 1B 2F 24 | 	byte	$01, $e4, $c7, $c9, $ef, $18, $38, $34, $2d, $e2, $c9, $db, $f9, $1b, $2f, $24
0e26c     F5 E1 C8 CF 
0e270     F7 1F 3A 34 
0e274     2B D8 C6 E1 
0e278     FE 1C 2F 1E | 	byte	$f5, $e1, $c8, $cf, $f7, $1f, $3a, $34, $2b, $d8, $c6, $e1, $fe, $1c, $2f, $1e
0e27c     F0 DB CA D7 
0e280     FA 23 3B 35 
0e284     1E D6 C7 E3 
0e288     02 1F 2F 13 | 	byte	$f0, $db, $ca, $d7, $fa, $23, $3b, $35, $1e, $d6, $c7, $e3, $02, $1f, $2f, $13
0e28c     EE D5 CB DD 
0e290     00 28 3A 35 
0e294     15 D5 CD E7 
0e298     05 1F 30 05 | 	byte	$ee, $d5, $cb, $dd, $00, $28, $3a, $35, $15, $d5, $cd, $e7, $05, $1f, $30, $05
0e29c     EE D3 CD E3 
0e2a0     08 29 3A 33 
0e2a4     0E CA D2 EC 
0e2a8     08 21 2F FD | 	byte	$ee, $d3, $cd, $e3, $08, $29, $3a, $33, $0e, $ca, $d2, $ec, $08, $21, $2f, $fd
0e2ac     EB D4 D0 E9 
0e2b0     09 2C 3B 2D 
0e2b4     0A C5 D9 F1 
0e2b8     08 23 2D F3 | 	byte	$eb, $d4, $d0, $e9, $09, $2c, $3b, $2d, $0a, $c5, $d9, $f1, $08, $23, $2d, $f3
0e2bc     E2 D6 D6 EF 
0e2c0     0F 2E 3C 23 
0e2c4     0C C7 DC F3 
0e2c8     0B 24 27 F0 | 	byte	$e2, $d6, $d6, $ef, $0f, $2e, $3c, $23, $0c, $c7, $dc, $f3, $0b, $24, $27, $f0
0e2cc     DD D7 DD F2 
0e2d0     14 2C 3C 1D 
0e2d4     06 CB DF F6 
0e2d8     0C 23 1B F1 | 	byte	$dd, $d7, $dd, $f2, $14, $2c, $3c, $1d, $06, $cb, $df, $f6, $0c, $23, $1b, $f1
0e2dc     D6 D8 E2 F7 
0e2e0     15 2D 37 1D 
0e2e4     FA CF E3 F8 
0e2e8     0C 25 0C F3 | 	byte	$d6, $d8, $e2, $f7, $15, $2d, $37, $1d, $fa, $cf, $e3, $f8, $0c, $25, $0c, $f3
0e2ec     D4 D9 E8 FA 
0e2f0     18 2F 2F 20 
0e2f4     F1 D1 E8 F9 
0e2f8     0E 25 06 F1 | 	byte	$d4, $d9, $e8, $fa, $18, $2f, $2f, $20, $f1, $d1, $e8, $f9, $0e, $25, $06, $f1
0e2fc     D5 DB EF 00 
0e300     19 30 29 22 
0e304     F3 D3 EB FB 
0e308     10 20 00 ED | 	byte	$d5, $db, $ef, $00, $19, $30, $29, $22, $f3, $d3, $eb, $fb, $10, $20, $00, $ed
0e30c     D6 DE F3 03 
0e310     17 30 27 1D 
0e314     F5 D6 ED FC 
0e318     10 18 02 E5 | 	byte	$d6, $de, $f3, $03, $17, $30, $27, $1d, $f5, $d6, $ed, $fc, $10, $18, $02, $e5
0e31c     D5 E2 F8 06 
0e320     18 2B 2A 17 
0e324     F3 D9 ED FD 
0e328     11 12 04 DF | 	byte	$d5, $e2, $f8, $06, $18, $2b, $2a, $17, $f3, $d9, $ed, $fd, $11, $12, $04, $df
0e32c     D7 E9 FC 07 
0e330     17 24 2E 15 
0e334     EF DB F0 FE 
0e338     0E 0B 06 DE | 	byte	$d7, $e9, $fc, $07, $17, $24, $2e, $15, $ef, $db, $f0, $fe, $0e, $0b, $06, $de
0e33c     D7 EC 01 07 
0e340     19 1F 2F 14 
0e344     EF DD F2 FF 
0e348     0C 04 09 DC | 	byte	$d7, $ec, $01, $07, $19, $1f, $2f, $14, $ef, $dd, $f2, $ff, $0c, $04, $09, $dc
0e34c     D8 F4 05 07 
0e350     17 20 2E 14 
0e354     F1 DF F2 00 
0e358     08 FE 0A DB | 	byte	$d8, $f4, $05, $07, $17, $20, $2e, $14, $f1, $df, $f2, $00, $08, $fe, $0a, $db
0e35c     DA F7 08 07 
0e360     11 24 2B 16 
0e364     EE DF F4 FE 
0e368     05 FC 08 DC | 	byte	$da, $f7, $08, $07, $11, $24, $2b, $16, $ee, $df, $f4, $fe, $05, $fc, $08, $dc
0e36c     DB FE 09 09 
0e370     0C 26 29 18 
0e374     ED E0 F3 FC 
0e378     00 FC 04 DF | 	byte	$db, $fe, $09, $09, $0c, $26, $29, $18, $ed, $e0, $f3, $fc, $00, $fc, $04, $df
0e37c     DD 02 0A 08 
0e380     07 29 28 19 
0e384     ED E0 F4 FB 
0e388     FA 03 05 E2 | 	byte	$dd, $02, $0a, $08, $07, $29, $28, $19, $ed, $e0, $f4, $fb, $fa, $03, $05, $e2
0e38c     E2 04 09 07 
0e390     07 29 29 18 
0e394     EF E1 F2 FC 
0e398     EE 0A 00 E4 | 	byte	$e2, $04, $09, $07, $07, $29, $29, $18, $ef, $e1, $f2, $fc, $ee, $0a, $00, $e4
0e39c     E3 07 0B 02 
0e3a0     0C 28 2A 18 
0e3a4     EB E2 EE FD 
0e3a8     E8 0C FE E5 | 	byte	$e3, $07, $0b, $02, $0c, $28, $2a, $18, $eb, $e2, $ee, $fd, $e8, $0c, $fe, $e5
0e3ac     E8 08 0D FD 
0e3b0     0D 25 2C 1A 
0e3b4     E7 E2 ED F9 
0e3b8     E5 0D FD E9 | 	byte	$e8, $08, $0d, $fd, $0d, $25, $2c, $1a, $e7, $e2, $ed, $f9, $e5, $0d, $fd, $e9
0e3bc     EE 06 0D FA 
0e3c0     10 25 2D 1A 
0e3c4     E3 DF F0 F4 
0e3c8     EA 0D 01 EA | 	byte	$ee, $06, $0d, $fa, $10, $25, $2d, $1a, $e3, $df, $f0, $f4, $ea, $0d, $01, $ea
0e3cc     EF 06 0B FB 
0e3d0     13 22 2E 19 
0e3d4     E3 DC F2 E8 
0e3d8     F5 0C 05 ED | 	byte	$ef, $06, $0b, $fb, $13, $22, $2e, $19, $e3, $dc, $f2, $e8, $f5, $0c, $05, $ed
0e3dc     F2 07 09 00 
0e3e0     13 22 2E 1A 
0e3e4     DE DC F1 DD 
0e3e8     F9 0A 0A EF | 	byte	$f2, $07, $09, $00, $13, $22, $2e, $1a, $de, $dc, $f1, $dd, $f9, $0a, $0a, $ef
0e3ec     F3 07 03 03 
0e3f0     13 22 2F 13 
0e3f4     DA DD EF D9 
0e3f8     00 07 10 F3 | 	byte	$f3, $07, $03, $03, $13, $22, $2f, $13, $da, $dd, $ef, $d9, $00, $07, $10, $f3
0e3fc     F3 08 02 07 
0e400     11 25 30 11 
0e404     D2 DF E8 DD 
0e408     02 04 14 F6 | 	byte	$f3, $08, $02, $07, $11, $25, $30, $11, $d2, $df, $e8, $dd, $02, $04, $14, $f6
0e40c     F3 05 02 0A 
0e410     0F 24 31 0C 
0e414     CF E1 DF E6 
0e418     03 03 16 F9 | 	byte	$f3, $05, $02, $0a, $0f, $24, $31, $0c, $cf, $e1, $df, $e6, $03, $03, $16, $f9
0e41c     F6 FF 05 0C 
0e420     0E 23 31 04 
0e424     D0 E1 D2 ED 
0e428     07 06 1A FA | 	byte	$f6, $ff, $05, $0c, $0e, $23, $31, $04, $d0, $e1, $d2, $ed, $07, $06, $1a, $fa
0e42c     F8 FB 08 10 
0e430     10 21 30 FF 
0e434     D1 DF CD F1 
0e438     05 0A 1C FB | 	byte	$f8, $fb, $08, $10, $10, $21, $30, $ff, $d1, $df, $cd, $f1, $05, $0a, $1c, $fb
0e43c     FA F6 0A 12 
0e440     11 20 2D FA 
0e444     D1 D8 CD F6 
0e448     02 11 1E 00 | 	byte	$fa, $f6, $0a, $12, $11, $20, $2d, $fa, $d1, $d8, $cd, $f6, $02, $11, $1e, $00
0e44c     FA F3 0D 13 
0e450     12 1F 27 F4 
0e454     D2 CD D3 FB 
0e458     00 17 20 04 | 	byte	$fa, $f3, $0d, $13, $12, $1f, $27, $f4, $d2, $cd, $d3, $fb, $00, $17, $20, $04
0e45c     F8 F3 0F 14 
0e460     12 1E 22 EE 
0e464     D2 C3 DE FD 
0e468     00 1A 20 08 | 	byte	$f8, $f3, $0f, $14, $12, $1e, $22, $ee, $d2, $c3, $de, $fd, $00, $1a, $20, $08
0e46c     F4 F6 10 14 
0e470     12 1B 1D EE 
0e474     D0 BD E3 FF 
0e478     05 1D 1F 0F | 	byte	$f4, $f6, $10, $14, $12, $1b, $1d, $ee, $d0, $bd, $e3, $ff, $05, $1d, $1f, $0f
0e47c     F3 F8 13 15 
0e480     12 16 1A E8 
0e484     CA BF E6 FE 
0e488     09 21 1F 12 | 	byte	$f3, $f8, $13, $15, $12, $16, $1a, $e8, $ca, $bf, $e6, $fe, $09, $21, $1f, $12
0e48c     F0 F8 15 16 
0e490     12 11 17 E3 
0e494     C0 C3 EA FA 
0e498     12 24 22 12 | 	byte	$f0, $f8, $15, $16, $12, $11, $17, $e3, $c0, $c3, $ea, $fa, $12, $24, $22, $12
0e49c     F2 FA 14 18 
0e4a0     10 0E 10 DE 
0e4a4     B9 CE ED F8 
0e4a8     17 27 24 11 | 	byte	$f2, $fa, $14, $18, $10, $0e, $10, $de, $b9, $ce, $ed, $f8, $17, $27, $24, $11
0e4ac     F4 FD 12 19 
0e4b0     0D 0B 08 D6 
0e4b4     B3 D6 F1 FA 
0e4b8     1A 29 27 11 | 	byte	$f4, $fd, $12, $19, $0d, $0b, $08, $d6, $b3, $d6, $f1, $fa, $1a, $29, $27, $11
0e4bc     F8 00 0F 19 
0e4c0     0B 0A 01 CC 
0e4c4     B5 D9 F1 FF 
0e4c8     1C 2C 28 10 | 	byte	$f8, $00, $0f, $19, $0b, $0a, $01, $cc, $b5, $d9, $f1, $ff, $1c, $2c, $28, $10
0e4cc     FD 02 0C 17 
0e4d0     0B 08 F7 C1 
0e4d4     BD DE EE 05 
0e4d8     1E 30 28 0D | 	byte	$fd, $02, $0c, $17, $0b, $08, $f7, $c1, $bd, $de, $ee, $05, $1e, $30, $28, $0d
0e4dc     00 05 09 12 
0e4e0     0C 06 E6 B5 
0e4e4     C9 E4 EB 0B 
0e4e8     1F 36 29 0D | 	byte	$00, $05, $09, $12, $0c, $06, $e6, $b5, $c9, $e4, $eb, $0b, $1f, $36, $29, $0d
0e4ec     05 08 07 0D 
0e4f0     0D 04 DD AF 
0e4f4     CF EA EA 10 
0e4f8     22 3B 24 0F | 	byte	$05, $08, $07, $0d, $0d, $04, $dd, $af, $cf, $ea, $ea, $10, $22, $3b, $24, $0f
0e4fc     09 09 03 08 
0e500     0C 03 C8 B4 
0e504     D4 EB F0 12 
0e508     25 40 20 13 | 	byte	$09, $09, $03, $08, $0c, $03, $c8, $b4, $d4, $eb, $f0, $12, $25, $40, $20, $13
0e50c     0F 09 00 07 
0e510     0C FE AF B8 
0e514     DC E9 F9 14 
0e518     29 44 1E 16 | 	byte	$0f, $09, $00, $07, $0c, $fe, $af, $b8, $dc, $e9, $f9, $14, $29, $44, $1e, $16
0e51c     15 08 FB 06 
0e520     0C F1 A1 C3 
0e524     E3 E6 01 15 
0e528     2E 46 19 19 | 	byte	$15, $08, $fb, $06, $0c, $f1, $a1, $c3, $e3, $e6, $01, $15, $2e, $46, $19, $19
0e52c     1A 07 F8 05 
0e530     0B E8 98 C5 
0e534     E9 E5 08 19 
0e538     34 44 19 1C | 	byte	$1a, $07, $f8, $05, $0b, $e8, $98, $c5, $e9, $e5, $08, $19, $34, $44, $19, $1c
0e53c     1F 02 F6 02 
0e540     0A D6 99 CC 
0e544     EC E9 0D 1D 
0e548     39 44 1A 1E | 	byte	$1f, $02, $f6, $02, $0a, $d6, $99, $cc, $ec, $e9, $0d, $1d, $39, $44, $1a, $1e
0e54c     21 FC F5 01 
0e550     06 BB 9F CD 
0e554     EA EF 10 22 
0e558     3B 3E 1E 22 | 	byte	$21, $fc, $f5, $01, $06, $bb, $9f, $cd, $ea, $ef, $10, $22, $3b, $3e, $1e, $22
0e55c     21 FA F4 00 
0e560     FF A9 9F D5 
0e564     E7 FB 15 25 
0e568     41 38 21 27 | 	byte	$21, $fa, $f4, $00, $ff, $a9, $9f, $d5, $e7, $fb, $15, $25, $41, $38, $21, $27
0e56c     22 F8 F3 FC 
0e570     EF A2 A3 D9 
0e574     E6 03 19 2B 
0e578     45 35 23 2B | 	byte	$22, $f8, $f3, $fc, $ef, $a2, $a3, $d9, $e6, $03, $19, $2b, $45, $35, $23, $2b
0e57c     1D F8 F2 F9 
0e580     DE A4 AC D6 
0e584     EA 07 20 33 
0e588     45 33 25 2D | 	byte	$1d, $f8, $f2, $f9, $de, $a4, $ac, $d6, $ea, $07, $20, $33, $45, $33, $25, $2d
0e58c     16 FA F2 F3 
0e590     CA A1 B1 D3 
0e594     F4 09 27 37 
0e598     44 33 27 2E | 	byte	$16, $fa, $f2, $f3, $ca, $a1, $b1, $d3, $f4, $09, $27, $37, $44, $33, $27, $2e
0e59c     14 F8 F2 E7 
0e5a0     BF A0 B8 CF 
0e5a4     FA 10 2C 3C 
0e5a8     40 37 2A 2E | 	byte	$14, $f8, $f2, $e7, $bf, $a0, $b8, $cf, $fa, $10, $2c, $3c, $40, $37, $2a, $2e
0e5ac     10 F7 F1 D1 
0e5b0     BC A1 BC CD 
0e5b4     03 16 32 41 
0e5b8     3D 37 2D 29 | 	byte	$10, $f7, $f1, $d1, $bc, $a1, $bc, $cd, $03, $16, $32, $41, $3d, $37, $2d, $29
0e5bc     10 F4 ED C1 
0e5c0     B7 A7 BE D1 
0e5c4     06 1C 37 45 
0e5c8     3C 36 2F 24 | 	byte	$10, $f4, $ed, $c1, $b7, $a7, $be, $d1, $06, $1c, $37, $45, $3c, $36, $2f, $24
0e5cc     10 F6 E6 BA 
0e5d0     AD AB BA DC 
0e5d4     07 24 3B 45 
0e5d8     3E 37 2E 1F | 	byte	$10, $f6, $e6, $ba, $ad, $ab, $ba, $dc, $07, $24, $3b, $45, $3e, $37, $2e, $1f
0e5dc     10 F4 D5 BD 
0e5e0     A4 B1 B5 E5 
0e5e4     0F 2B 41 43 
0e5e8     43 36 2D 1C | 	byte	$10, $f4, $d5, $bd, $a4, $b1, $b5, $e5, $0f, $2b, $41, $43, $43, $36, $2d, $1c
0e5ec     11 F1 C0 BE 
0e5f0     A1 B5 B5 E9 
0e5f4     15 33 45 41 
0e5f8     48 38 2A 1A | 	byte	$11, $f1, $c0, $be, $a1, $b5, $b5, $e9, $15, $33, $45, $41, $48, $38, $2a, $1a
0e5fc     11 EA B8 B8 
0e600     A0 B5 BF EC 
0e604     1C 3A 47 3F 
0e608     4B 38 26 19 | 	byte	$11, $ea, $b8, $b8, $a0, $b5, $bf, $ec, $1c, $3a, $47, $3f, $4b, $38, $26, $19
0e60c     0E DE BB B0 
0e610     9F B1 C8 F1 
0e614     23 3F 47 41 
0e618     4D 35 23 19 | 	byte	$0e, $de, $bb, $b0, $9f, $b1, $c8, $f1, $23, $3f, $47, $41, $4d, $35, $23, $19
0e61c     0B CD BE AB 
0e620     A0 AF D0 F7 
0e624     2A 44 44 45 
0e628     4E 34 20 1A | 	byte	$0b, $cd, $be, $ab, $a0, $af, $d0, $f7, $2a, $44, $44, $45, $4e, $34, $20, $1a
0e62c     07 C2 BF A2 
0e630     A1 AF D6 FA 
0e634     32 49 40 4C 
0e638     50 2F 1B 1A | 	byte	$07, $c2, $bf, $a2, $a1, $af, $d6, $fa, $32, $49, $40, $4c, $50, $2f, $1b, $1a
0e63c     F8 C4 BE 9A 
0e640     9F B9 DA 02 
0e644     3B 4B 3D 51 
0e648     51 2A 18 19 | 	byte	$f8, $c4, $be, $9a, $9f, $b9, $da, $02, $3b, $4b, $3d, $51, $51, $2a, $18, $19
0e64c     E5 C7 BD 96 
0e650     99 C4 DD 0B 
0e654     42 4B 3F 53 
0e658     4F 26 16 13 | 	byte	$e5, $c7, $bd, $96, $99, $c4, $dd, $0b, $42, $4b, $3f, $53, $4f, $26, $16, $13
0e65c     DE C8 B8 92 
0e660     99 C9 E5 13 
0e664     46 46 41 57 
0e668     49 23 17 0A | 	byte	$de, $c8, $b8, $92, $99, $c9, $e5, $13, $46, $46, $41, $57, $49, $23, $17, $0a
0e66c     DC C8 B5 8D 
0e670     9A CD EC 17 
0e674     4C 41 47 5B 
0e678     48 1E 17 F9 | 	byte	$dc, $c8, $b5, $8d, $9a, $cd, $ec, $17, $4c, $41, $47, $5b, $48, $1e, $17, $f9
0e67c     E0 CC AC 86 
0e680     A2 D2 F1 21 
0e684     50 3E 4B 5E 
0e688     3F 19 17 EA | 	byte	$e0, $cc, $ac, $86, $a2, $d2, $f1, $21, $50, $3e, $4b, $5e, $3f, $19, $17, $ea
0e68c     E2 CF A4 82 
0e690     AF D4 FA 29 
0e694     4E 3E 4D 5F 
0e698     39 17 0E E7 | 	byte	$e2, $cf, $a4, $82, $af, $d4, $fa, $29, $4e, $3e, $4d, $5f, $39, $17, $0e, $e7
0e69c     E1 CE A0 81 
0e6a0     B1 DD 02 2B 
0e6a4     4B 41 52 5D 
0e6a8     36 15 FE EB | 	byte	$e1, $ce, $a0, $81, $b1, $dd, $02, $2b, $4b, $41, $52, $5d, $36, $15, $fe, $eb
0e6ac     E1 CE 97 83 
0e6b0     B5 E4 07 34 
0e6b4     46 43 56 5B 
0e6b8     2D 15 F2 ED | 	byte	$e1, $ce, $97, $83, $b5, $e4, $07, $34, $46, $43, $56, $5b, $2d, $15, $f2, $ed
0e6bc     E3 C9 8B 89 
0e6c0     BA EA 0E 37 
0e6c4     44 46 59 57 
0e6c8     28 12 EC ED | 	byte	$e3, $c9, $8b, $89, $ba, $ea, $0e, $37, $44, $46, $59, $57, $28, $12, $ec, $ed
0e6cc     E6 C9 84 91 
0e6d0     BB F0 17 36 
0e6d4     45 47 5B 52 
0e6d8     1F 0C F0 EB | 	byte	$e6, $c9, $84, $91, $bb, $f0, $17, $36, $45, $47, $5b, $52, $1f, $0c, $f0, $eb
0e6dc     E8 C3 81 97 
0e6e0     C6 F6 1C 34 
0e6e4     48 4B 5B 4A 
0e6e8     19 FD F7 EC | 	byte	$e8, $c3, $81, $97, $c6, $f6, $1c, $34, $48, $4b, $5b, $4a, $19, $fd, $f7, $ec
0e6ec     E9 B8 80 9C 
0e6f0     CC 01 21 31 
0e6f4     4A 4F 5B 40 
0e6f8     17 F2 FA ED | 	byte	$e9, $b8, $80, $9c, $cc, $01, $21, $31, $4a, $4f, $5b, $40, $17, $f2, $fa, $ed
0e6fc     EB B1 80 A0 
0e700     D3 08 22 34 
0e704     4A 51 58 3A 
0e708     11 F1 FA EE | 	byte	$eb, $b1, $80, $a0, $d3, $08, $22, $34, $4a, $51, $58, $3a, $11, $f1, $fa, $ee
0e70c     EC A0 81 A0 
0e710     DC 0B 21 3B 
0e714     4B 53 56 2D 
0e718     06 F6 FB F0 | 	byte	$ec, $a0, $81, $a0, $dc, $0b, $21, $3b, $4b, $53, $56, $2d, $06, $f6, $fb, $f0
0e71c     EB 94 83 A9 
0e720     E6 12 1E 3C 
0e724     4E 53 51 23 
0e728     F9 FE FD F2 | 	byte	$eb, $94, $83, $a9, $e6, $12, $1e, $3c, $4e, $53, $51, $23, $f9, $fe, $fd, $f2
0e72c     E6 8F 86 B3 
0e730     EA 15 1F 3E 
0e734     51 53 4B 1E 
0e738     F4 02 00 F5 | 	byte	$e6, $8f, $86, $b3, $ea, $15, $1f, $3e, $51, $53, $4b, $1e, $f4, $02, $00, $f5
0e73c     DE 89 8B B6 
0e740     F2 15 23 41 
0e744     51 52 40 15 
0e748     F7 05 FF F8 | 	byte	$de, $89, $8b, $b6, $f2, $15, $23, $41, $51, $52, $40, $15, $f7, $05, $ff, $f8
0e74c     DA 87 8D BD 
0e750     FB 11 2B 42 
0e754     52 4F 39 05 
0e758     FD 08 FF F9 | 	byte	$da, $87, $8d, $bd, $fb, $11, $2b, $42, $52, $4f, $39, $05, $fd, $08, $ff, $f9
0e75c     CB 87 95 C8 
0e760     FB 10 2D 45 
0e764     52 4C 2D F8 
0e768     05 0D 02 FA | 	byte	$cb, $87, $95, $c8, $fb, $10, $2d, $45, $52, $4c, $2d, $f8, $05, $0d, $02, $fa
0e76c     C5 88 9E CB 
0e770     FE 16 2F 48 
0e774     4F 47 23 F3 
0e778     09 10 04 F8 | 	byte	$c5, $88, $9e, $cb, $fe, $16, $2f, $48, $4f, $47, $23, $f3, $09, $10, $04, $f8
0e77c     BC 87 A6 D4 
0e780     FB 1A 33 48 
0e784     4D 3F 1A F6 
0e788     0C 12 06 F7 | 	byte	$bc, $87, $a6, $d4, $fb, $1a, $33, $48, $4d, $3f, $1a, $f6, $0c, $12, $06, $f7
0e78c     B3 88 AB D7 
0e790     FA 20 36 49 
0e794     48 39 0C FE 
0e798     0F 12 08 EE | 	byte	$b3, $88, $ab, $d7, $fa, $20, $36, $49, $48, $39, $0c, $fe, $0f, $12, $08, $ee
0e79c     B1 8C AF DB 
0e7a0     FB 23 37 4A 
0e7a4     44 33 F8 06 
0e7a8     15 15 09 E7 | 	byte	$b1, $8c, $af, $db, $fb, $23, $37, $4a, $44, $33, $f8, $06, $15, $15, $09, $e7
0e7ac     AA 93 B6 DA 
0e7b0     05 26 3A 49 
0e7b4     3B 29 F2 0A 
0e7b8     1A 18 09 E5 | 	byte	$aa, $93, $b6, $da, $05, $26, $3a, $49, $3b, $29, $f2, $0a, $1a, $18, $09, $e5
0e7bc     A4 99 BB D8 
0e7c0     0C 28 3D 45 
0e7c4     35 21 F3 0E 
0e7c8     1D 1B 08 DD | 	byte	$a4, $99, $bb, $d8, $0c, $28, $3d, $45, $35, $21, $f3, $0e, $1d, $1b, $08, $dd
0e7cc     A0 9F BD DE 
0e7d0     12 2A 3E 41 
0e7d4     30 12 F9 13 
0e7d8     1F 1E 03 DD | 	byte	$a0, $9f, $bd, $de, $12, $2a, $3e, $41, $30, $12, $f9, $13, $1f, $1e, $03, $dd
0e7dc     9C A6 BA E7 
0e7e0     16 2E 3E 3A 
0e7e4     2E FF 00 18 
0e7e8     22 20 01 DA | 	byte	$9c, $a6, $ba, $e7, $16, $2e, $3e, $3a, $2e, $ff, $00, $18, $22, $20, $01, $da
0e7ec     9C A8 B8 EB 
0e7f0     1B 31 3B 32 
0e7f4     2B F2 05 1C 
0e7f8     25 23 FA D7 | 	byte	$9c, $a8, $b8, $eb, $1b, $31, $3b, $32, $2b, $f2, $05, $1c, $25, $23, $fa, $d7
0e7fc     9F AB B8 F3 
0e800     1F 32 37 2C 
0e804     22 F0 08 21 
0e808     2A 22 F1 D9 | 	byte	$9f, $ab, $b8, $f3, $1f, $32, $37, $2c, $22, $f0, $08, $21, $2a, $22, $f1, $d9
0e80c     A1 A8 C2 FA 
0e810     22 34 31 28 
0e814     11 F2 0E 24 
0e818     2D 20 EC D4 | 	byte	$a1, $a8, $c2, $fa, $22, $34, $31, $28, $11, $f2, $0e, $24, $2d, $20, $ec, $d4
0e81c     A2 A4 CB FE 
0e820     23 34 2B 27 
0e824     FF F9 15 26 
0e828     32 1B ED CE | 	byte	$a2, $a4, $cb, $fe, $23, $34, $2b, $27, $ff, $f9, $15, $26, $32, $1b, $ed, $ce
0e82c     A3 A7 D4 05 
0e830     27 32 24 24 
0e834     F6 FF 18 2A 
0e838     35 19 EF D0 | 	byte	$a3, $a7, $d4, $05, $27, $32, $24, $24, $f6, $ff, $18, $2a, $35, $19, $ef, $d0
0e83c     9D B0 D7 0B 
0e840     27 2D 1E 1F 
0e844     EE 02 1D 2F 
0e848     38 0E F2 C7 | 	byte	$9d, $b0, $d7, $0b, $27, $2d, $1e, $1f, $ee, $02, $1d, $2f, $38, $0e, $f2, $c7
0e84c     97 B7 DE 0D 
0e850     2A 26 1C 10 
0e854     ED 08 21 35 
0e858     3A 04 F5 C6 | 	byte	$97, $b7, $de, $0d, $2a, $26, $1c, $10, $ed, $08, $21, $35, $3a, $04, $f5, $c6
0e85c     97 BB E8 10 
0e860     29 1D 1C 03 
0e864     F0 0B 25 39 
0e868     39 01 F7 BA | 	byte	$97, $bb, $e8, $10, $29, $1d, $1c, $03, $f0, $0b, $25, $39, $39, $01, $f7, $ba
0e86c     9D BF ED 13 
0e870     25 18 1B F9 
0e874     F5 11 26 3E 
0e878     36 FB F8 B6 | 	byte	$9d, $bf, $ed, $13, $25, $18, $1b, $f9, $f5, $11, $26, $3e, $36, $fb, $f8, $b6
0e87c     A2 C6 EE 17 
0e880     21 12 17 ED 
0e884     F7 17 2B 42 
0e888     33 FE F6 B1 | 	byte	$a2, $c6, $ee, $17, $21, $12, $17, $ed, $f7, $17, $2b, $42, $33, $fe, $f6, $b1
0e88c     A9 CC F3 19 
0e890     1A 11 11 E9 
0e894     FB 1B 31 45 
0e898     29 01 EB B2 | 	byte	$a9, $cc, $f3, $19, $1a, $11, $11, $e9, $fb, $1b, $31, $45, $29, $01, $eb, $b2
0e89c     AD D0 F9 19 
0e8a0     14 11 03 E8 
0e8a4     00 1D 38 48 
0e8a8     1D 05 E4 B6 | 	byte	$ad, $d0, $f9, $19, $14, $11, $03, $e8, $00, $1d, $38, $48, $1d, $05, $e4, $b6
0e8ac     B3 D6 FF 16 
0e8b0     0E 11 FC EB 
0e8b4     06 1F 3D 49 
0e8b8     19 07 E0 B7 | 	byte	$b3, $d6, $ff, $16, $0e, $11, $fc, $eb, $06, $1f, $3d, $49, $19, $07, $e0, $b7
0e8bc     B5 D9 02 12 
0e8c0     09 0F F0 ED 
0e8c4     08 24 40 46 
0e8c8     13 07 DE B7 | 	byte	$b5, $d9, $02, $12, $09, $0f, $f0, $ed, $08, $24, $40, $46, $13, $07, $de, $b7
0e8cc     BA DF 02 0E 
0e8d0     07 0B E6 EE 
0e8d4     0E 2B 45 42 
0e8d8     12 00 E2 B9 | 	byte	$ba, $df, $02, $0e, $07, $0b, $e6, $ee, $0e, $2b, $45, $42, $12, $00, $e2, $b9
0e8dc     C1 E1 03 09 
0e8e0     06 03 E3 F0 
0e8e4     11 31 49 3B 
0e8e8     11 F6 E8 BD | 	byte	$c1, $e1, $03, $09, $06, $03, $e3, $f0, $11, $31, $49, $3b, $11, $f6, $e8, $bd
0e8ec     C6 E5 03 03 
0e8f0     08 F8 E4 F3 
0e8f4     14 35 4B 39 
0e8f8     11 EF EA BF | 	byte	$c6, $e5, $03, $03, $08, $f8, $e4, $f3, $14, $35, $4b, $39, $11, $ef, $ea, $bf
0e8fc     C8 E9 02 FE 
0e900     07 F0 E7 F8 
0e904     17 3B 4B 31 
0e908     0F F1 EB C3 | 	byte	$c8, $e9, $02, $fe, $07, $f0, $e7, $f8, $17, $3b, $4b, $31, $0f, $f1, $eb, $c3
0e90c     CC EB 01 FC 
0e910     04 E3 E9 F9 
0e914     1E 3E 4B 2A 
0e918     0B F4 EC C3 | 	byte	$cc, $eb, $01, $fc, $04, $e3, $e9, $f9, $1e, $3e, $4b, $2a, $0b, $f4, $ec, $c3
0e91c     D0 EA FE FD 
0e920     00 DC EA FD 
0e924     25 43 4A 26 
0e928     07 F8 EF C5 | 	byte	$d0, $ea, $fe, $fd, $00, $dc, $ea, $fd, $25, $43, $4a, $26, $07, $f8, $ef, $c5
0e92c     D1 EE F9 FD 
0e930     FA DB E9 FF 
0e934     29 44 49 1E 
0e938     06 FB F4 C6 | 	byte	$d1, $ee, $f9, $fd, $fa, $db, $e9, $ff, $29, $44, $49, $1e, $06, $fb, $f4, $c6
0e93c     D2 EF F3 FC 
0e940     EF E0 E8 05 
0e944     2F 46 47 1A 
0e948     06 FE F3 C8 | 	byte	$d2, $ef, $f3, $fc, $ef, $e0, $e8, $05, $2f, $46, $47, $1a, $06, $fe, $f3, $c8
0e94c     D1 F1 F0 FC 
0e950     E3 E3 E9 0A 
0e954     31 48 44 14 
0e958     09 01 F6 C6 | 	byte	$d1, $f1, $f0, $fc, $e3, $e3, $e9, $0a, $31, $48, $44, $14, $09, $01, $f6, $c6
0e95c     D2 F1 EF F9 
0e960     D9 E8 EA 11 
0e964     35 4A 3E 12 
0e968     0B 06 F5 C2 | 	byte	$d2, $f1, $ef, $f9, $d9, $e8, $ea, $11, $35, $4a, $3e, $12, $0b, $06, $f5, $c2
0e96c     D6 EE F1 F5 
0e970     D2 E9 EF 19 
0e974     37 4D 36 14 
0e978     0C 09 F6 C0 | 	byte	$d6, $ee, $f1, $f5, $d2, $e9, $ef, $19, $37, $4d, $36, $14, $0c, $09, $f6, $c0
0e97c     DE EA F2 EE 
0e980     D1 E7 F2 1E 
0e984     3A 4E 25 19 
0e988     0D 0D F2 C0 | 	byte	$de, $ea, $f2, $ee, $d1, $e7, $f2, $1e, $3a, $4e, $25, $19, $0d, $0d, $f2, $c0
0e98c     DF E8 F1 E6 
0e990     D5 E6 F9 21 
0e994     3E 4E 20 1E 
0e998     0F 10 E5 C2 | 	byte	$df, $e8, $f1, $e6, $d5, $e6, $f9, $21, $3e, $4e, $20, $1e, $0f, $10, $e5, $c2
0e99c     E0 E5 F0 D7 
0e9a0     D9 E7 FB 26 
0e9a4     42 4B 18 20 
0e9a8     12 12 E6 C6 | 	byte	$e0, $e5, $f0, $d7, $d9, $e7, $fb, $26, $42, $4b, $18, $20, $12, $12, $e6, $c6
0e9ac     E0 E6 ED CF 
0e9b0     DD E9 01 28 
0e9b4     44 45 18 21 
0e9b8     15 14 DD C7 | 	byte	$e0, $e6, $ed, $cf, $dd, $e9, $01, $28, $44, $45, $18, $21, $15, $14, $dd, $c7
0e9bc     DE E7 E9 C8 
0e9c0     DC ED 07 2A 
0e9c4     49 3D 1E 21 
0e9c8     18 11 DE C9 | 	byte	$de, $e7, $e9, $c8, $dc, $ed, $07, $2a, $49, $3d, $1e, $21, $18, $11, $de, $c9
0e9cc     DC E8 E1 C9 
0e9d0     DD F0 09 2C 
0e9d4     4C 2F 27 23 
0e9d8     1A 0D D9 CC | 	byte	$dc, $e8, $e1, $c9, $dd, $f0, $09, $2c, $4c, $2f, $27, $23, $1a, $0d, $d9, $cc
0e9dc     D9 E8 D4 CB 
0e9e0     E3 F3 0E 32 
0e9e4     4C 22 2C 27 
0e9e8     1B 0E D5 CE | 	byte	$d9, $e8, $d4, $cb, $e3, $f3, $0e, $32, $4c, $22, $2c, $27, $1b, $0e, $d5, $ce
0e9ec     D8 E7 CC CD 
0e9f0     EA F6 11 34 
0e9f4     4A 1D 2F 28 
0e9f8     1A 0B D0 CD | 	byte	$d8, $e7, $cc, $cd, $ea, $f6, $11, $34, $4a, $1d, $2f, $28, $1a, $0b, $d0, $cd
0e9fc     D9 E4 C2 CC 
0ea00     F0 FA 15 3A 
0ea04     42 1E 31 27 
0ea08     1A 07 CE CD | 	byte	$d9, $e4, $c2, $cc, $f0, $fa, $15, $3a, $42, $1e, $31, $27, $1a, $07, $ce, $cd
0ea0c     DA DA C1 CD 
0ea10     F2 FC 18 3D 
0ea14     39 27 33 26 
0ea18     1C 05 CE CB | 	byte	$da, $da, $c1, $cd, $f2, $fc, $18, $3d, $39, $27, $33, $26, $1c, $05, $ce, $cb
0ea1c     DD D2 C3 D1 
0ea20     F6 FE 1B 42 
0ea24     2A 2C 37 26 
0ea28     1E 00 CB CA | 	byte	$dd, $d2, $c3, $d1, $f6, $fe, $1b, $42, $2a, $2c, $37, $26, $1e, $00, $cb, $ca
0ea2c     DE C3 C4 D7 
0ea30     FA FF 21 44 
0ea34     23 34 3A 24 
0ea38     1E FC C8 C9 | 	byte	$de, $c3, $c4, $d7, $fa, $ff, $21, $44, $23, $34, $3a, $24, $1e, $fc, $c8, $c9
0ea3c     DC BC C4 DC 
0ea40     FE 01 26 42 
0ea44     1F 37 3B 26 
0ea48     1D F6 C6 C9 | 	byte	$dc, $bc, $c4, $dc, $fe, $01, $26, $42, $1f, $37, $3b, $26, $1d, $f6, $c6, $c9
0ea4c     D7 BB C6 E0 
0ea50     02 04 2F 3C 
0ea54     22 38 38 2A 
0ea58     1D ED C4 CB | 	byte	$d7, $bb, $c6, $e0, $02, $04, $2f, $3c, $22, $38, $38, $2a, $1d, $ed, $c4, $cb
0ea5c     C9 BD CA E5 
0ea60     03 0B 32 2E 
0ea64     27 3A 37 2B 
0ea68     1C E9 C1 CC | 	byte	$c9, $bd, $ca, $e5, $03, $0b, $32, $2e, $27, $3a, $37, $2b, $1c, $e9, $c1, $cc
0ea6c     BD C0 CE EC 
0ea70     04 10 36 24 
0ea74     32 3C 39 2B 
0ea78     1B DE BF CB | 	byte	$bd, $c0, $ce, $ec, $04, $10, $36, $24, $32, $3c, $39, $2b, $1b, $de, $bf, $cb
0ea7c     B6 C1 D1 F1 
0ea80     06 12 38 1B 
0ea84     35 3D 3C 2A 
0ea88     17 DC BC C4 | 	byte	$b6, $c1, $d1, $f1, $06, $12, $38, $1b, $35, $3d, $3c, $2a, $17, $dc, $bc, $c4
0ea8c     B6 C3 D3 F6 
0ea90     09 19 36 19 
0ea94     38 3E 40 29 
0ea98     17 D4 BB BA | 	byte	$b6, $c3, $d3, $f6, $09, $19, $36, $19, $38, $3e, $40, $29, $17, $d4, $bb, $ba
0ea9c     BB C6 D7 F9 
0eaa0     0D 20 31 1D 
0eaa4     37 41 3F 28 
0eaa8     11 CC B9 AD | 	byte	$bb, $c6, $d7, $f9, $0d, $20, $31, $1d, $37, $41, $3f, $28, $11, $cc, $b9, $ad
0eaac     BE CA DB FD 
0eab0     11 26 25 27 
0eab4     36 44 3D 29 
0eab8     0A C6 B5 A9 | 	byte	$be, $ca, $db, $fd, $11, $26, $25, $27, $36, $44, $3d, $29, $0a, $c6, $b5, $a9
0eabc     C1 CD DD FF 
0eac0     17 28 18 2F 
0eac4     39 48 3E 28 
0eac8     00 C3 AC A9 | 	byte	$c1, $cd, $dd, $ff, $17, $28, $18, $2f, $39, $48, $3e, $28, $00, $c3, $ac, $a9
0eacc     C5 D0 E1 06 
0ead0     1B 2A 11 30 
0ead4     3E 49 3C 26 
0ead8     FC BD A2 B0 | 	byte	$c5, $d0, $e1, $06, $1b, $2a, $11, $30, $3e, $49, $3c, $26, $fc, $bd, $a2, $b0
0eadc     CA D2 E3 09 
0eae0     20 27 10 30 
0eae4     42 4C 38 26 
0eae8     F0 B8 98 B3 | 	byte	$ca, $d2, $e3, $09, $20, $27, $10, $30, $42, $4c, $38, $26, $f0, $b8, $98, $b3
0eaec     CE D5 E4 13 
0eaf0     25 1F 18 30 
0eaf4     46 4E 37 24 
0eaf8     E5 AF 97 B8 | 	byte	$ce, $d5, $e4, $13, $25, $1f, $18, $30, $46, $4e, $37, $24, $e5, $af, $97, $b8
0eafc     D1 D8 EA 17 
0eb00     2A 15 1F 32 
0eb04     48 4D 36 1F 
0eb08     E1 9B 9A BD | 	byte	$d1, $d8, $ea, $17, $2a, $15, $1f, $32, $48, $4d, $36, $1f, $e1, $9b, $9a, $bd
0eb0c     D4 D9 ED 1E 
0eb10     2C 0A 20 39 
0eb14     4B 4C 33 1B 
0eb18     D1 8F A1 C3 | 	byte	$d4, $d9, $ed, $1e, $2c, $0a, $20, $39, $4b, $4c, $33, $1b, $d1, $8f, $a1, $c3
0eb1c     D8 D9 F3 23 
0eb20     2A 07 23 3E 
0eb24     4E 4A 33 17 
0eb28     C7 89 A3 C7 | 	byte	$d8, $d9, $f3, $23, $2a, $07, $23, $3e, $4e, $4a, $33, $17, $c7, $89, $a3, $c7
0eb2c     DB DB F9 2B 
0eb30     24 08 24 41 
0eb34     4E 49 31 0E 
0eb38     B2 8F A7 CD | 	byte	$db, $db, $f9, $2b, $24, $08, $24, $41, $4e, $49, $31, $0e, $b2, $8f, $a7, $cd
0eb3c     DD E0 FD 2F 
0eb40     18 0C 2C 45 
0eb44     4E 48 30 05 
0eb48     9F 94 AE D0 | 	byte	$dd, $e0, $fd, $2f, $18, $0c, $2c, $45, $4e, $48, $30, $05, $9f, $94, $ae, $d0
0eb4c     DD E5 04 33 
0eb50     13 13 30 47 
0eb54     4C 47 2F ED 
0eb58     93 98 B4 D6 | 	byte	$dd, $e5, $04, $33, $13, $13, $30, $47, $4c, $47, $2f, $ed, $93, $98, $b4, $d6
0eb5c     DE EB 0D 31 
0eb60     0D 16 36 4A 
0eb64     4A 46 2A E0 
0eb68     90 99 B6 DA | 	byte	$de, $eb, $0d, $31, $0d, $16, $36, $4a, $4a, $46, $2a, $e0, $90, $99, $b6, $da
0eb6c     E0 F1 14 2C 
0eb70     0B 1A 3A 4B 
0eb74     49 44 29 C1 
0eb78     94 9F BC DA | 	byte	$e0, $f1, $14, $2c, $0b, $1a, $3a, $4b, $49, $44, $29, $c1, $94, $9f, $bc, $da
0eb7c     E4 F9 16 24 
0eb80     0C 22 3F 4B 
0eb84     47 43 1E AC 
0eb88     97 A6 BE DB | 	byte	$e4, $f9, $16, $24, $0c, $22, $3f, $4b, $47, $43, $1e, $ac, $97, $a6, $be, $db
0eb8c     E8 FE 1A 1D 
0eb90     0B 2A 41 49 
0eb94     46 41 09 A5 
0eb98     98 AC C4 DD | 	byte	$e8, $fe, $1a, $1d, $0b, $2a, $41, $49, $46, $41, $09, $a5, $98, $ac, $c4, $dd
0eb9c     EC 05 19 1C 
0eba0     0F 30 44 47 
0eba4     44 3F F7 A6 
0eba8     9E AE C8 DF | 	byte	$ec, $05, $19, $1c, $0f, $30, $44, $47, $44, $3f, $f7, $a6, $9e, $ae, $c8, $df
0ebac     F2 0D 14 1A 
0ebb0     16 33 47 44 
0ebb4     43 39 DB A3 
0ebb8     A5 B4 CB E0 | 	byte	$f2, $0d, $14, $1a, $16, $33, $47, $44, $43, $39, $db, $a3, $a5, $b4, $cb, $e0
0ebbc     F9 11 0E 15 
0ebc0     1C 3A 47 41 
0ebc4     41 30 C9 A2 
0ebc8     AB B8 CB E3 | 	byte	$f9, $11, $0e, $15, $1c, $3a, $47, $41, $41, $30, $c9, $a2, $ab, $b8, $cb, $e3
0ebcc     FF 13 0D 13 
0ebd0     22 3E 46 40 
0ebd4     3F 1F C8 A1 
0ebd8     B0 BE CE E7 | 	byte	$ff, $13, $0d, $13, $22, $3e, $46, $40, $3f, $1f, $c8, $a1, $b0, $be, $ce, $e7
0ebdc     06 12 10 14 
0ebe0     26 42 44 3D 
0ebe4     3A 08 C0 A4 
0ebe8     B6 C2 D0 EA | 	byte	$06, $12, $10, $14, $26, $42, $44, $3d, $3a, $08, $c0, $a4, $b6, $c2, $d0, $ea
0ebec     0B 0E 10 19 
0ebf0     2A 45 41 3B 
0ebf4     32 FC BD AA 
0ebf8     BA C4 D2 EE | 	byte	$0b, $0e, $10, $19, $2a, $45, $41, $3b, $32, $fc, $bd, $aa, $ba, $c4, $d2, $ee
0ebfc     0E 0C 0E 1E 
0ec00     2F 47 40 39 
0ec04     21 F6 B8 AF 
0ec08     C0 C5 D7 F1 | 	byte	$0e, $0c, $0e, $1e, $2f, $47, $40, $39, $21, $f6, $b8, $af, $c0, $c5, $d7, $f1
0ec0c     10 10 0C 20 
0ec10     36 48 3C 34 
0ec14     10 F0 B7 B7 
0ec18     C4 C7 DB F4 | 	byte	$10, $10, $0c, $20, $36, $48, $3c, $34, $10, $f0, $b7, $b7, $c4, $c7, $db, $f4
0ec1c     0C 15 11 20 
0ec20     39 46 3A 2C 
0ec24     08 EA B5 BD 
0ec28     C9 CB DF F8 | 	byte	$0c, $15, $11, $20, $39, $46, $3a, $2c, $08, $ea, $b5, $bd, $c9, $cb, $df, $f8
0ec2c     07 15 19 21 
0ec30     3D 43 38 19 
0ec34     09 DF B7 C2 
0ec38     CB D0 E2 FA | 	byte	$07, $15, $19, $21, $3d, $43, $38, $19, $09, $df, $b7, $c2, $cb, $d0, $e2, $fa
0ec3c     07 13 24 23 
0ec40     41 42 33 0C 
0ec44     09 D7 BD C6 
0ec48     CC D5 E6 F5 | 	byte	$07, $13, $24, $23, $41, $42, $33, $0c, $09, $d7, $bd, $c6, $cc, $d5, $e6, $f5
0ec4c     0D 13 29 25 
0ec50     41 3E 29 02 
0ec54     02 D3 C6 CA 
0ec58     CE DB E8 EF | 	byte	$0d, $13, $29, $25, $41, $3e, $29, $02, $02, $d3, $c6, $ca, $ce, $db, $e8, $ef
0ec5c     11 18 2D 25 
0ec60     42 3C 19 05 
0ec64     FB CB CF CD 
0ec68     D2 DF EA EA | 	byte	$11, $18, $2d, $25, $42, $3c, $19, $05, $fb, $cb, $cf, $cd, $d2, $df, $ea, $ea
0ec6c     0F 23 30 25 
0ec70     3F 3B 0B 08 
0ec74     F3 C7 D6 CF 
0ec78     D7 E5 E9 EB | 	byte	$0f, $23, $30, $25, $3f, $3b, $0b, $08, $f3, $c7, $d6, $cf, $d7, $e5, $e9, $eb
0ec7c     0A 31 36 26 
0ec80     3D 34 01 08 
0ec84     E9 C8 DD D1 
0ec88     DB EA E4 ED | 	byte	$0a, $31, $36, $26, $3d, $34, $01, $08, $e9, $c8, $dd, $d1, $db, $ea, $e4, $ed
0ec8c     08 37 39 26 
0ec90     38 25 01 06 
0ec94     DE CB E0 D4 
0ec98     E0 EF E0 F0 | 	byte	$08, $37, $39, $26, $38, $25, $01, $06, $de, $cb, $e0, $d4, $e0, $ef, $e0, $f0
0ec9c     09 3E 3B 24 
0eca0     34 12 06 04 
0eca4     D7 D3 E4 D7 
0eca8     E6 F1 DA ED | 	byte	$09, $3e, $3b, $24, $34, $12, $06, $04, $d7, $d3, $e4, $d7, $e6, $f1, $da, $ed
0ecac     13 46 3D 23 
0ecb0     2E 08 09 04 
0ecb4     CC DD E6 DC 
0ecb8     E9 F0 D9 E8 | 	byte	$13, $46, $3d, $23, $2e, $08, $09, $04, $cc, $dd, $e6, $dc, $e9, $f0, $d9, $e8
0ecbc     19 4C 3C 20 
0ecc0     20 03 09 FB 
0ecc4     C6 E1 E9 E1 
0ecc8     EE EC DD E6 | 	byte	$19, $4c, $3c, $20, $20, $03, $09, $fb, $c6, $e1, $e9, $e1, $ee, $ec, $dd, $e6
0eccc     20 51 3F 1E 
0ecd0     10 07 0A F7 
0ecd4     C4 E4 EC E7 
0ecd8     F1 E8 DF E7 | 	byte	$20, $51, $3f, $1e, $10, $07, $0a, $f7, $c4, $e4, $ec, $e7, $f1, $e8, $df, $e7
0ecdc     26 54 3F 1D 
0ece0     FD 09 0D F0 
0ece4     C7 E5 F1 EE 
0ece8     F4 E2 DD F0 | 	byte	$26, $54, $3f, $1d, $fd, $09, $0d, $f0, $c7, $e5, $f1, $ee, $f4, $e2, $dd, $f0
0ecec     2A 55 3F 1A 
0ecf0     F2 08 0F E0 
0ecf4     CB E7 F5 F4 
0ecf8     F5 DF D9 FD | 	byte	$2a, $55, $3f, $1a, $f2, $08, $0f, $e0, $cb, $e7, $f5, $f4, $f5, $df, $d9, $fd
0ecfc     2E 56 3E 0F 
0ed00     EF 06 0F DA 
0ed04     D1 E8 FA FB 
0ed08     F1 DE D9 02 | 	byte	$2e, $56, $3e, $0f, $ef, $06, $0f, $da, $d1, $e8, $fa, $fb, $f1, $de, $d9, $02
0ed0c     31 54 3B FF 
0ed10     F1 07 0D D1 
0ed14     D6 EC FE 01 
0ed18     EE DD E0 09 | 	byte	$31, $54, $3b, $ff, $f1, $07, $0d, $d1, $d6, $ec, $fe, $01, $ee, $dd, $e0, $09
0ed1c     36 50 35 F9 
0ed20     F1 06 09 CE 
0ed24     D7 F0 02 05 
0ed28     E6 D9 EA 0D | 	byte	$36, $50, $35, $f9, $f1, $06, $09, $ce, $d7, $f0, $02, $05, $e6, $d9, $ea, $0d
0ed2c     39 4A 30 F6 
0ed30     EF 06 01 CF 
0ed34     DC F3 06 09 
0ed38     E2 D7 F2 15 | 	byte	$39, $4a, $30, $f6, $ef, $06, $01, $cf, $dc, $f3, $06, $09, $e2, $d7, $f2, $15
0ed3c     3C 43 23 FC 
0ed40     ED 06 FC CF 
0ed44     E1 F7 0A 0A 
0ed48     DC D9 FA 1D | 	byte	$3c, $43, $23, $fc, $ed, $06, $fc, $cf, $e1, $f7, $0a, $0a, $dc, $d9, $fa, $1d
0ed4c     3C 3A 12 03 
0ed50     EE 02 F4 D0 
0ed54     E6 FC 0E 07 
0ed58     D9 DC FF 24 | 	byte	$3c, $3a, $12, $03, $ee, $02, $f4, $d0, $e6, $fc, $0e, $07, $d9, $dc, $ff, $24
0ed5c     3C 2E 0A 07 
0ed60     F1 FE EF D1 
0ed64     E9 02 10 00 
0ed68     D8 E1 08 28 | 	byte	$3c, $2e, $0a, $07, $f1, $fe, $ef, $d1, $e9, $02, $10, $00, $d8, $e1, $08, $28
0ed6c     39 20 08 08 
0ed70     F3 F9 EA D3 
0ed74     EF 05 13 F6 
0ed78     DC E7 0C 2E | 	byte	$39, $20, $08, $08, $f3, $f9, $ea, $d3, $ef, $05, $13, $f6, $dc, $e7, $0c, $2e
0ed7c     33 12 0C 0B 
0ed80     F3 F3 E8 D7 
0ed84     F3 09 12 F0 
0ed88     DF F0 13 32 | 	byte	$33, $12, $0c, $0b, $f3, $f3, $e8, $d7, $f3, $09, $12, $f0, $df, $f0, $13, $32
0ed8c     2D 00 0F 0F 
0ed90     F3 F2 DF DD 
0ed94     F9 0E 10 EB 
0ed98     E3 F4 1A 35 | 	byte	$2d, $00, $0f, $0f, $f3, $f2, $df, $dd, $f9, $0e, $10, $eb, $e3, $f4, $1a, $35
0ed9c     21 F5 0D 12 
0eda0     F3 F1 D9 E1 
0eda4     FD 11 05 EE 
0eda8     E4 FA 20 35 | 	byte	$21, $f5, $0d, $12, $f3, $f1, $d9, $e1, $fd, $11, $05, $ee, $e4, $fa, $20, $35
0edac     13 F3 0C 15 
0edb0     EF F0 D5 E7 
0edb4     03 13 F9 F6 
0edb8     E9 00 23 34 | 	byte	$13, $f3, $0c, $15, $ef, $f0, $d5, $e7, $03, $13, $f9, $f6, $e9, $00, $23, $34
0edbc     06 F5 0A 14 
0edc0     F2 ED D3 EE 
0edc4     08 15 EF F9 
0edc8     F2 06 26 2F | 	byte	$06, $f5, $0a, $14, $f2, $ed, $d3, $ee, $08, $15, $ef, $f9, $f2, $06, $26, $2f
0edcc     F7 F8 0A 13 
0edd0     F5 E7 D2 F1 
0edd4     0D 13 EA F8 
0edd8     F9 0B 29 27 | 	byte	$f7, $f8, $0a, $13, $f5, $e7, $d2, $f1, $0d, $13, $ea, $f8, $f9, $0b, $29, $27
0eddc     EB F7 0D 11 
0ede0     FB E0 D2 F9 
0ede4     11 07 EF F9 
0ede8     FE 12 2D 14 | 	byte	$eb, $f7, $0d, $11, $fb, $e0, $d2, $f9, $11, $07, $ef, $f9, $fe, $12, $2d, $14
0edec     EA F5 0C 0D 
0edf0     FF DF D3 FB 
0edf4     16 FA F6 FE 
0edf8     03 16 2D 09 | 	byte	$ea, $f5, $0c, $0d, $ff, $df, $d3, $fb, $16, $fa, $f6, $fe, $03, $16, $2d, $09
0edfc     EE F5 0A 0C 
0ee00     03 DC D4 03 
0ee04     16 F6 FA 02 
0ee08     09 1B 2C F7 | 	byte	$ee, $f5, $0a, $0c, $03, $dc, $d4, $03, $16, $f6, $fa, $02, $09, $1b, $2c, $f7
0ee0c     F1 F6 06 0D 
0ee10     00 DE D9 08 
0ee14     13 F4 FC 07 
0ee18     0F 1B 25 EC | 	byte	$f1, $f6, $06, $0d, $00, $de, $d9, $08, $13, $f4, $fc, $07, $0f, $1b, $25, $ec
0ee1c     F3 F8 01 12 
0ee20     02 DB DC 07 
0ee24     0C F6 FF 0B 
0ee28     14 1F 1D E6 | 	byte	$f3, $f8, $01, $12, $02, $db, $dc, $07, $0c, $f6, $ff, $0b, $14, $1f, $1d, $e6
0ee2c     F3 F7 FC 13 
0ee30     03 DA E0 0B 
0ee34     07 F7 04 0D 
0ee38     19 20 0D E8 | 	byte	$f3, $f7, $fc, $13, $03, $da, $e0, $0b, $07, $f7, $04, $0d, $19, $20, $0d, $e8
0ee3c     F3 F6 FB 12 
0ee40     07 DD E1 08 
0ee44     05 FA 09 11 
0ee48     1D 21 FB EC | 	byte	$f3, $f6, $fb, $12, $07, $dd, $e1, $08, $05, $fa, $09, $11, $1d, $21, $fb, $ec
0ee4c     F4 F3 FA 0F 
0ee50     0A DD E5 02 
0ee54     04 FF 0D 15 
0ee58     20 1F EB EF | 	byte	$f4, $f3, $fa, $0f, $0a, $dd, $e5, $02, $04, $ff, $0d, $15, $20, $1f, $eb, $ef
0ee5c     F4 F0 FF 0D 
0ee60     11 DC E4 FE 
0ee64     00 05 11 18 
0ee68     22 1B E3 EF | 	byte	$f4, $f0, $ff, $0d, $11, $dc, $e4, $fe, $00, $05, $11, $18, $22, $1b, $e3, $ef
0ee6c     F4 EC FF 0E 
0ee70     14 DD E6 FE 
0ee74     FB 0B 14 1B 
0ee78     24 10 E0 F0 | 	byte	$f4, $ec, $ff, $0e, $14, $dd, $e6, $fe, $fb, $0b, $14, $1b, $24, $10, $e0, $f0
0ee7c     F3 EB FD 0F 
0ee80     16 DE E0 02 
0ee84     FA 10 18 1D 
0ee88     26 02 E0 F1 | 	byte	$f3, $eb, $fd, $0f, $16, $de, $e0, $02, $fa, $10, $18, $1d, $26, $02, $e0, $f1
0ee8c     EF EE F9 14 
0ee90     19 DD DD 03 
0ee94     FC 14 1B 20 
0ee98     25 F4 E3 F2 | 	byte	$ef, $ee, $f9, $14, $19, $dd, $dd, $03, $fc, $14, $1b, $20, $25, $f4, $e3, $f2
0ee9c     EB EF F7 18 
0eea0     1C DD DD FF 
0eea4     02 19 1D 22 
0eea8     23 E8 E5 F2 | 	byte	$eb, $ef, $f7, $18, $1c, $dd, $dd, $ff, $02, $19, $1d, $22, $23, $e8, $e5, $f2
0eeac     E8 F1 F7 1B 
0eeb0     1B DB E3 F9 
0eeb4     0A 1E 1F 24 
0eeb8     1D E2 E5 F1 | 	byte	$e8, $f1, $f7, $1b, $1b, $db, $e3, $f9, $0a, $1e, $1f, $24, $1d, $e2, $e5, $f1
0eebc     E7 EE FC 1E 
0eec0     1D D1 E8 F4 
0eec4     10 23 21 25 
0eec8     14 E0 E6 EE | 	byte	$e7, $ee, $fc, $1e, $1d, $d1, $e8, $f4, $10, $23, $21, $25, $14, $e0, $e6, $ee
0eecc     E9 EB 00 22 
0eed0     19 CE EC F3 
0eed4     16 27 22 25 
0eed8     0B E1 E8 E9 | 	byte	$e9, $eb, $00, $22, $19, $ce, $ec, $f3, $16, $27, $22, $25, $0b, $e1, $e8, $e9
0eedc     EB E9 02 27 
0eee0     19 CE E9 F5 
0eee4     1B 29 23 23 
0eee8     FE E2 E8 E3 | 	byte	$eb, $e9, $02, $27, $19, $ce, $e9, $f5, $1b, $29, $23, $23, $fe, $e2, $e8, $e3
0eeec     EC EA 07 29 
0eef0     0E D3 E8 FA 
0eef4     1E 2B 24 20 
0eef8     F2 E2 E9 E1 | 	byte	$ec, $ea, $07, $29, $0e, $d3, $e8, $fa, $1e, $2b, $24, $20, $f2, $e2, $e9, $e1
0eefc     E9 EE 09 2D 
0ef00     03 D5 E9 FE 
0ef04     23 2B 24 1A 
0ef08     EF E1 E8 E1 | 	byte	$e9, $ee, $09, $2d, $03, $d5, $e9, $fe, $23, $2b, $24, $1a, $ef, $e1, $e8, $e1
0ef0c     E5 F3 0F 2E 
0ef10     03 D5 EA 06 
0ef14     28 2D 25 10 
0ef18     EE E1 E4 E3 | 	byte	$e5, $f3, $0f, $2e, $03, $d5, $ea, $06, $28, $2d, $25, $10, $ee, $e1, $e4, $e3
0ef1c     E3 F5 14 2D 
0ef20     FE D5 E9 0F 
0ef24     2C 2D 24 09 
0ef28     F0 E1 E1 E4 | 	byte	$e3, $f5, $14, $2d, $fe, $d5, $e9, $0f, $2c, $2d, $24, $09, $f0, $e1, $e1, $e4
0ef2c     E4 F9 19 2A 
0ef30     F9 D6 E8 16 
0ef34     2F 2C 22 FD 
0ef38     F0 E2 DD E1 | 	byte	$e4, $f9, $19, $2a, $f9, $d6, $e8, $16, $2f, $2c, $22, $fd, $f0, $e2, $dd, $e1
0ef3c     E9 FE 1A 24 
0ef40     FB DA EB 19 
0ef44     32 2D 1C F8 
0ef48     EF E2 DB DE | 	byte	$e9, $fe, $1a, $24, $fb, $da, $eb, $19, $32, $2d, $1c, $f8, $ef, $e2, $db, $de
0ef4c     EC 02 1C 22 
0ef50     F0 DC F0 1F 
0ef54     34 2B 17 F8 
0ef58     EE DF DA DE | 	byte	$ec, $02, $1c, $22, $f0, $dc, $f0, $1f, $34, $2b, $17, $f8, $ee, $df, $da, $de
0ef5c     F0 06 1C 21 
0ef60     F1 DB F8 20 
0ef64     34 2A 0C FC 
0ef68     EB DB D9 E1 | 	byte	$f0, $06, $1c, $21, $f1, $db, $f8, $20, $34, $2a, $0c, $fc, $eb, $db, $d9, $e1
0ef6c     F2 09 1A 21 
0ef70     EC D9 FF 25 
0ef74     34 27 00 00 
0ef78     E9 D7 D7 E4 | 	byte	$f2, $09, $1a, $21, $ec, $d9, $ff, $25, $34, $27, $00, $00, $e9, $d7, $d7, $e4
0ef7c     F6 0C 16 21 
0ef80     EF D8 05 2A 
0ef84     34 21 FA 04 
0ef88     EA D3 D5 E7 | 	byte	$f6, $0c, $16, $21, $ef, $d8, $05, $2a, $34, $21, $fa, $04, $ea, $d3, $d5, $e7
0ef8c     F9 0E 12 21 
0ef90     EB D9 0A 2D 
0ef94     33 1B F6 05 
0ef98     E8 CF D9 EA | 	byte	$f9, $0e, $12, $21, $eb, $d9, $0a, $2d, $33, $1b, $f6, $05, $e8, $cf, $d9, $ea
0ef9c     FE 0E 12 24 
0efa0     E8 DD 0E 30 
0efa4     31 10 FA 06 
0efa8     E1 CC DC EE | 	byte	$fe, $0e, $12, $24, $e8, $dd, $0e, $30, $31, $10, $fa, $06, $e1, $cc, $dc, $ee
0efac     00 0B 13 22 
0efb0     E5 E2 15 30 
0efb4     2E 08 00 07 
0efb8     DD CB DD F1 | 	byte	$00, $0b, $13, $22, $e5, $e2, $15, $30, $2e, $08, $00, $07, $dd, $cb, $dd, $f1
0efbc     05 06 1B 22 
0efc0     DB EC 17 31 
0efc4     2B FC 06 08 
0efc8     D5 CD E1 F5 | 	byte	$05, $06, $1b, $22, $db, $ec, $17, $31, $2b, $fc, $06, $08, $d5, $cd, $e1, $f5
0efcc     06 00 1F 20 
0efd0     D4 F1 1D 32 
0efd4     24 F7 09 07 
0efd8     D1 D1 E6 F7 | 	byte	$06, $00, $1f, $20, $d4, $f1, $1d, $32, $24, $f7, $09, $07, $d1, $d1, $e6, $f7
0efdc     06 00 24 19 
0efe0     D1 F9 21 32 
0efe4     16 F8 0C 03 
0efe8     C8 D7 E9 FB | 	byte	$06, $00, $24, $19, $d1, $f9, $21, $32, $16, $f8, $0c, $03, $c8, $d7, $e9, $fb
0efec     01 02 28 17 
0eff0     CF 00 23 31 
0eff4     0D FF 10 02 
0eff8     C4 D9 ED FE | 	byte	$01, $02, $28, $17, $cf, $00, $23, $31, $0d, $ff, $10, $02, $c4, $d9, $ed, $fe
0effc     FC 0C 2D 09 
0f000     D3 01 26 2F 
0f004     FD 06 14 F8 
0f008     C6 DE F1 00 | 	byte	$fc, $0c, $2d, $09, $d3, $01, $26, $2f, $fd, $06, $14, $f8, $c6, $de, $f1, $00
0f00c     F7 13 2F F9 
0f010     DA 06 29 27 
0f014     F6 08 17 EC 
0f018     C9 E2 F5 FF | 	byte	$f7, $13, $2f, $f9, $da, $06, $29, $27, $f6, $08, $17, $ec, $c9, $e2, $f5, $ff
0f01c     F8 15 31 E9 
0f020     DD 0C 29 1A 
0f024     F8 0B 19 E5 
0f028     CD E6 F7 FB | 	byte	$f8, $15, $31, $e9, $dd, $0c, $29, $1a, $f8, $0b, $19, $e5, $cd, $e6, $f7, $fb
0f02c     FA 18 31 DF 
0f030     E2 0F 29 0C 
0f034     FD 0F 17 DD 
0f038     D4 EB F9 F8 | 	byte	$fa, $18, $31, $df, $e2, $0f, $29, $0c, $fd, $0f, $17, $dd, $d4, $eb, $f9, $f8
0f03c     FD 1E 2D D7 
0f040     E7 13 28 FC 
0f044     02 15 13 DB 
0f048     D9 EF F8 F6 | 	byte	$fd, $1e, $2d, $d7, $e7, $13, $28, $fc, $02, $15, $13, $db, $d9, $ef, $f8, $f6
0f04c     04 23 26 D6 
0f050     EC 14 21 F6 
0f054     05 18 0E DD 
0f058     DF F2 F8 F5 | 	byte	$04, $23, $26, $d6, $ec, $14, $21, $f6, $05, $18, $0e, $dd, $df, $f2, $f8, $f5
0f05c     0A 26 16 D7 
0f060     F2 17 18 F9 
0f064     08 1B 0C DE 
0f068     E2 F4 F7 F4 | 	byte	$0a, $26, $16, $d7, $f2, $17, $18, $f9, $08, $1b, $0c, $de, $e2, $f4, $f7, $f4
0f06c     0D 2B 0B D7 
0f070     F7 18 05 FD 
0f074     0D 1C 07 E3 
0f078     E7 F4 F9 F6 | 	byte	$0d, $2b, $0b, $d7, $f7, $18, $05, $fd, $0d, $1c, $07, $e3, $e7, $f4, $f9, $f6
0f07c     12 2B FD D7 
0f080     F9 18 F9 01 
0f084     13 1C 01 E9 
0f088     EB F4 FA FB | 	byte	$12, $2b, $fd, $d7, $f9, $18, $f9, $01, $13, $1c, $01, $e9, $eb, $f4, $fa, $fb
0f08c     14 29 F4 D7 
0f090     FE 12 F7 02 
0f094     16 1A 02 EE 
0f098     EE F5 F7 00 | 	byte	$14, $29, $f4, $d7, $fe, $12, $f7, $02, $16, $1a, $02, $ee, $ee, $f5, $f7, $00
0f09c     1A 24 EC D9 
0f0a0     FE 04 FB 04 
0f0a4     19 19 00 F4 
0f0a8     EF F8 F5 05 | 	byte	$1a, $24, $ec, $d9, $fe, $04, $fb, $04, $19, $19, $00, $f4, $ef, $f8, $f5, $05
0f0ac     1E 1A E3 DA 
0f0b0     01 F5 FF 0A 
0f0b4     1A 18 00 F8 
0f0b8     F0 FB F4 09 | 	byte	$1e, $1a, $e3, $da, $01, $f5, $ff, $0a, $1a, $18, $00, $f8, $f0, $fb, $f4, $09
0f0bc     1F 11 DF DE 
0f0c0     FE EE 00 0D 
0f0c4     1C 18 04 F9 
0f0c8     F1 FC F5 0B | 	byte	$1f, $11, $df, $de, $fe, $ee, $00, $0d, $1c, $18, $04, $f9, $f1, $fc, $f5, $0b
0f0cc     1E 0D D5 E3 
0f0d0     F6 F1 01 11 
0f0d4     1D 1A 09 FD 
0f0d8     F5 FB F8 0F | 	byte	$1e, $0d, $d5, $e3, $f6, $f1, $01, $11, $1d, $1a, $09, $fd, $f5, $fb, $f8, $0f
0f0dc     1A 07 D0 E3 
0f0e0     E8 F6 04 13 
0f0e4     1E 18 10 FC 
0f0e8     FA FB FD 11 | 	byte	$1a, $07, $d0, $e3, $e8, $f6, $04, $13, $1e, $18, $10, $fc, $fa, $fb, $fd, $11
0f0ec     13 FF CE E4 
0f0f0     DE FB 08 14 
0f0f4     20 16 14 FB 
0f0f8     00 00 00 00 | 	byte	$13, $ff, $ce, $e4, $de, $fb, $08, $14, $20, $16, $14, $fb, $00, $00, $00, $00
0f0fc     03 F5 EC F0 
0f100     FB 04 06 02 
0f104     FD FF 07 0D 
0f108     0A 02 FF 04 | 	byte	$03, $f5, $ec, $f0, $fb, $04, $06, $02, $fd, $ff, $07, $0d, $0a, $02, $ff, $04
0f10c     0C 08 F1 D8 
0f110     D2 E4 FD 07 
0f114     FD E9 D3 CF 
0f118     E2 F6 FF F8 | 	byte	$0c, $08, $f1, $d8, $d2, $e4, $fd, $07, $fd, $e9, $d3, $cf, $e2, $f6, $ff, $f8
0f11c     EB EA F9 0D 
0f120     13 0A FF FC 
0f124     03 0D 17 1A 
0f128     16 11 0E 11 | 	byte	$eb, $ea, $f9, $0d, $13, $0a, $ff, $fc, $03, $0d, $17, $1a, $16, $11, $0e, $11
0f12c     15 19 1D 1A 
0f130     11 0B 0D 13 
0f134     17 10 FB E9 
0f138     E7 F6 07 0E | 	byte	$15, $19, $1d, $1a, $11, $0b, $0d, $13, $17, $10, $fb, $e9, $e7, $f6, $07, $0e
0f13c     07 FB F1 EE 
0f140     F5 FF 05 05 
0f144     00 FE 04 08 
0f148     06 03 02 06 | 	byte	$07, $fb, $f1, $ee, $f5, $ff, $05, $05, $00, $fe, $04, $08, $06, $03, $02, $06
0f14c     06 F5 E1 D7 
0f150     E2 F3 FF FD 
0f154     F3 E1 D6 DA 
0f158     E9 F8 FA F3 | 	byte	$06, $f5, $e1, $d7, $e2, $f3, $ff, $fd, $f3, $e1, $d6, $da, $e9, $f8, $fa, $f3
0f15c     ED F6 05 0E 
0f160     0B 02 FE 03 
0f164     0A 11 15 17 
0f168     14 11 11 12 | 	byte	$ed, $f6, $05, $0e, $0b, $02, $fe, $03, $0a, $11, $15, $17, $14, $11, $11, $12
0f16c     17 1D 1E 18 
0f170     0C 08 0E 17 
0f174     18 0A F4 E9 
0f178     EE FC 09 0A | 	byte	$17, $1d, $1e, $18, $0c, $08, $0e, $17, $18, $0a, $f4, $e9, $ee, $fc, $09, $0a
0f17c     05 00 F8 F0 
0f180     F1 FB 05 08 
0f184     03 FE 00 03 
0f188     04 05 06 05 | 	byte	$05, $00, $f8, $f0, $f1, $fb, $05, $08, $03, $fe, $00, $03, $04, $05, $06, $05
0f18c     F4 E1 DC E8 
0f190     F3 F7 F4 F1 
0f194     EF E6 DC DE 
0f198     EC F6 F7 F2 | 	byte	$f4, $e1, $dc, $e8, $f3, $f7, $f4, $f1, $ef, $e6, $dc, $de, $ec, $f6, $f7, $f2
0f19c     F5 01 09 09 
0f1a0     02 00 05 0B 
0f1a4     0D 10 14 17 
0f1a8     16 12 10 14 | 	byte	$f5, $01, $09, $09, $02, $00, $05, $0b, $0d, $10, $14, $17, $16, $12, $10, $14
0f1ac     1D 21 1B 0E 
0f1b0     07 0B 15 19 
0f1b4     0F FC ED F0 
0f1b8     FB 03 03 02 | 	byte	$1d, $21, $1b, $0e, $07, $0b, $15, $19, $0f, $fc, $ed, $f0, $fb, $03, $03, $02
0f1bc     08 08 FA EB 
0f1c0     EC FB 09 08 
0f1c4     FF FB FE 03 
0f1c8     05 05 03 F2 | 	byte	$08, $08, $fa, $eb, $ec, $fb, $09, $08, $ff, $fb, $fe, $03, $05, $05, $03, $f2
0f1cc     DF DF EE F7 
0f1d0     F1 EA EE F9 
0f1d4     F7 E1 D6 E3 
0f1d8     F6 FB F3 F2 | 	byte	$df, $df, $ee, $f7, $f1, $ea, $ee, $f9, $f7, $e1, $d6, $e3, $f6, $fb, $f3, $f2
0f1dc     FE 09 08 01 
0f1e0     FE 05 0C 0C 
0f1e4     0B 10 18 19 
0f1e8     12 0E 12 1D | 	byte	$fe, $09, $08, $01, $fe, $05, $0c, $0c, $0b, $10, $18, $19, $12, $0e, $12, $1d
0f1ec     23 1C 0F 09 
0f1f0     0C 14 17 11 
0f1f4     02 F4 F5 FD 
0f1f8     01 FD FE 08 | 	byte	$23, $1c, $0f, $09, $0c, $14, $17, $11, $02, $f4, $f5, $fd, $01, $fd, $fe, $08
0f1fc     10 08 F3 E6 
0f200     F1 05 0A FF 
0f204     F9 FC 03 05 
0f208     04 02 F3 DF | 	byte	$10, $08, $f3, $e6, $f1, $05, $0a, $ff, $f9, $fc, $03, $05, $04, $02, $f3, $df
0f20c     E0 F4 FA ED 
0f210     E3 EC FC FF 
0f214     E8 D2 DC F5 
0f218     FC EF EF FF | 	byte	$e0, $f4, $fa, $ed, $e3, $ec, $fc, $ff, $e8, $d2, $dc, $f5, $fc, $ef, $ef, $ff
0f21c     0A 05 FB FE 
0f220     08 0C 07 04 
0f224     0F 1B 1A 10 
0f228     0B 13 21 23 | 	byte	$0a, $05, $fb, $fe, $08, $0c, $07, $04, $0f, $1b, $1a, $10, $0b, $13, $21, $23
0f22c     1A 10 0E 11 
0f230     12 11 10 0A 
0f234     FC F4 FA 03 
0f238     00 FA 03 0F | 	byte	$1a, $10, $0e, $11, $12, $11, $10, $0a, $fc, $f4, $fa, $03, $00, $fa, $03, $0f
0f23c     0F 01 EE E9 
0f240     F8 07 03 F9 
0f244     F9 00 04 03 
0f248     01 F4 DE E0 | 	byte	$0f, $01, $ee, $e9, $f8, $07, $03, $f9, $f9, $00, $04, $03, $01, $f4, $de, $e0
0f24c     F7 FD EB E0 
0f250     ED FD FD EF 
0f254     DC DB EF F7 
0f258     EF F1 00 07 | 	byte	$f7, $fd, $eb, $e0, $ed, $fd, $fd, $ef, $dc, $db, $ef, $f7, $ef, $f1, $00, $07
0f25c     00 FB 03 0A 
0f260     09 04 04 10 
0f264     1A 17 0F 0D 
0f268     15 1F 20 18 | 	byte	$00, $fb, $03, $0a, $09, $04, $04, $10, $1a, $17, $0f, $0d, $15, $1f, $20, $18
0f26c     14 15 12 0D 
0f270     0E 13 12 02 
0f274     F2 F8 06 05 
0f278     FA FF 0B 0E | 	byte	$14, $15, $12, $0d, $0e, $13, $12, $02, $f2, $f8, $06, $05, $fa, $ff, $0b, $0e
0f27c     09 FD EE EE 
0f280     FD 04 FD F8 
0f284     FD 02 02 01 
0f288     F4 DE E0 F6 | 	byte	$09, $fd, $ee, $ee, $fd, $04, $fd, $f8, $fd, $02, $02, $01, $f4, $de, $e0, $f6
0f28c     FC EB E3 EE 
0f290     F8 F6 F4 EF 
0f294     DE DF F0 F4 
0f298     F3 FC 01 FD | 	byte	$fc, $eb, $e3, $ee, $f8, $f6, $f4, $ef, $de, $df, $f0, $f4, $f3, $fc, $01, $fd
0f29c     FD 02 06 05 
0f2a0     04 05 0B 15 
0f2a4     19 12 0C 12 
0f2a8     1F 20 16 14 | 	byte	$fd, $02, $06, $05, $04, $05, $0b, $15, $19, $12, $0c, $12, $1f, $20, $16, $14
0f2ac     1A 15 0B 0C 
0f2b0     14 14 07 F6 
0f2b4     F8 05 06 FF 
0f2b8     02 08 07 08 | 	byte	$1a, $15, $0b, $0c, $14, $14, $07, $f6, $f8, $05, $06, $ff, $02, $08, $07, $08
0f2bc     0A 00 ED EF 
0f2c0     FF 01 F7 F9 
0f2c4     00 00 FF F7 
0f2c8     DD DF F6 F8 | 	byte	$0a, $00, $ed, $ef, $ff, $01, $f7, $f9, $00, $00, $ff, $f7, $dd, $df, $f6, $f8
0f2cc     EB EA F1 F1 
0f2d0     F0 F6 FC E5 
0f2d4     D5 EA F8 F3 
0f2d8     F8 FE FC FD | 	byte	$eb, $ea, $f1, $f1, $f0, $f6, $fc, $e5, $d5, $ea, $f8, $f3, $f8, $fe, $fc, $fd
0f2dc     01 03 03 06 
0f2e0     07 06 0F 19 
0f2e4     14 0B 11 20 
0f2e8     20 14 15 1E | 	byte	$01, $03, $03, $06, $07, $06, $0f, $19, $14, $0b, $11, $20, $20, $14, $15, $1e
0f2ec     17 0A 0B 14 
0f2f0     12 0A FD F7 
0f2f4     FE 04 02 08 
0f2f8     09 01 03 0C | 	byte	$17, $0a, $0b, $14, $12, $0a, $fd, $f7, $fe, $04, $02, $08, $09, $01, $03, $0c
0f2fc     0B FA EC F4 
0f300     FE F9 F6 FC 
0f304     FF FE F7 DC 
0f308     DE F5 F3 EA | 	byte	$0b, $fa, $ec, $f4, $fe, $f9, $f6, $fc, $ff, $fe, $f7, $dc, $de, $f5, $f3, $ea
0f30c     F2 F5 EB ED 
0f310     F8 FB F6 DB 
0f314     DF F3 F5 F8 
0f318     FB FA FC 02 | 	byte	$f2, $f5, $eb, $ed, $f8, $fb, $f6, $db, $df, $f3, $f5, $f8, $fb, $fa, $fc, $02
0f31c     01 01 07 08 
0f320     03 09 18 16 
0f324     0C 0F 1D 21 
0f328     14 15 1E 19 | 	byte	$01, $01, $07, $08, $03, $09, $18, $16, $0c, $0f, $1d, $21, $14, $15, $1e, $19
0f32c     0E 0D 11 11 
0f330     0E 06 F8 FB 
0f334     05 02 09 11 
0f338     04 FE 09 0D | 	byte	$0e, $0d, $11, $11, $0e, $06, $f8, $fb, $05, $02, $09, $11, $04, $fe, $09, $0d
0f33c     06 FC F0 F5 
0f340     FC F7 F7 FF 
0f344     FE F7 DD DF 
0f348     F3 ED EA F7 | 	byte	$06, $fc, $f0, $f5, $fc, $f7, $f7, $ff, $fe, $f7, $dd, $df, $f3, $ed, $ea, $f7
0f34c     F5 EA EF F5 
0f350     F5 FD EE D5 
0f354     E8 F9 F7 F8 
0f358     FA FB FF 01 | 	byte	$f5, $ea, $ef, $f5, $f5, $fd, $ee, $d5, $e8, $f9, $f7, $f8, $fa, $fb, $ff, $01
0f35c     00 04 07 05 
0f360     06 13 19 10 
0f364     0E 1A 22 18 
0f368     14 1B 1A 13 | 	byte	$00, $04, $07, $05, $06, $13, $19, $10, $0e, $1a, $22, $18, $14, $1b, $1a, $13
0f36c     0F 0D 0F 11 
0f370     0B FB F9 03 
0f374     01 06 13 09 
0f378     00 05 09 08 | 	byte	$0f, $0d, $0f, $11, $0b, $fb, $f9, $03, $01, $06, $13, $09, $00, $05, $09, $08
0f37c     07 FC ED F4 
0f380     F9 F4 FA FF 
0f384     F7 DB DF F3 
0f388     E7 E8 F9 F2 | 	byte	$07, $fc, $ed, $f4, $f9, $f4, $fa, $ff, $f7, $db, $df, $f3, $e7, $e8, $f9, $f2
0f38c     EE F3 F0 F2 
0f390     FC FF DD DE 
0f394     F7 F7 F7 FB 
0f398     F9 FC 02 00 | 	byte	$ee, $f3, $f0, $f2, $fc, $ff, $dd, $de, $f7, $f7, $f7, $fb, $f9, $fc, $02, $00
0f39c     01 06 07 05 
0f3a0     0B 16 13 0E 
0f3a4     16 21 19 16 
0f3a8     1A 17 18 14 | 	byte	$01, $06, $07, $05, $0b, $16, $13, $0e, $16, $21, $19, $16, $1a, $17, $18, $14
0f3ac     0C 0D 12 0F 
0f3b0     02 F7 00 02 
0f3b4     03 10 0D 07 
0f3b8     06 03 07 08 | 	byte	$0c, $0d, $12, $0f, $02, $f7, $00, $02, $03, $10, $0d, $07, $06, $03, $07, $08
0f3bc     07 FD ED F3 
0f3c0     F6 F5 FE F9 
0f3c4     DA DE F5 E3 
0f3c8     EA F6 F0 F4 | 	byte	$07, $fd, $ed, $f3, $f6, $f5, $fe, $f9, $da, $de, $f5, $e3, $ea, $f6, $f0, $f4
0f3cc     F5 ED F3 F7 
0f3d0     FE F0 D5 F1 
0f3d4     F9 F1 FC F9 
0f3d8     F7 00 FF FF | 	byte	$f5, $ed, $f3, $f7, $fe, $f0, $d5, $f1, $f9, $f1, $fc, $f9, $f7, $00, $ff, $ff
0f3dc     04 04 06 08 
0f3e0     10 14 10 13 
0f3e4     1D 17 19 19 
0f3e8     14 19 17 0F | 	byte	$04, $04, $06, $08, $10, $14, $10, $13, $1d, $17, $19, $19, $14, $19, $17, $0f
0f3ec     0D 0F 11 0A 
0f3f0     F8 FB 04 02 
0f3f4     0D 0B 0B 0A 
0f3f8     05 05 06 07 | 	byte	$0d, $0f, $11, $0a, $f8, $fb, $04, $02, $0d, $0b, $0b, $0a, $05, $05, $06, $07
0f3fc     08 FA EB F2 
0f400     F5 F7 FC DB 
0f404     D7 F2 E3 EB 
0f408     EF EE F7 F3 | 	byte	$08, $fa, $eb, $f2, $f5, $f7, $fc, $db, $d7, $f2, $e3, $eb, $ef, $ee, $f7, $f3
0f40c     F2 F1 F3 FC 
0f410     00 DF E5 FE 
0f414     ED FB FC F6 
0f418     FE FE 01 02 | 	byte	$f2, $f1, $f3, $fc, $00, $df, $e5, $fe, $ed, $fb, $fc, $f6, $fe, $fe, $01, $02
0f41c     03 07 07 0D 
0f420     13 11 14 1D 
0f424     16 1B 1A 15 
0f428     18 18 16 0E | 	byte	$03, $07, $07, $0d, $13, $11, $14, $1d, $16, $1b, $1a, $15, $18, $18, $16, $0e
0f42c     0C 11 10 01 
0f430     F6 03 03 0B 
0f434     08 0C 0C 08 
0f438     07 05 06 07 | 	byte	$0c, $11, $10, $01, $f6, $03, $03, $0b, $08, $0c, $0c, $08, $07, $05, $06, $07
0f43c     08 F9 E8 F5 
0f440     F5 F9 E5 D5 
0f444     ED E3 ED EB 
0f448     ED F4 F3 F6 | 	byte	$08, $f9, $e8, $f5, $f5, $f9, $e5, $d5, $ed, $e3, $ed, $eb, $ed, $f4, $f3, $f6
0f44c     F1 F2 F8 FF 
0f450     F7 D8 FB EF 
0f454     F2 FD F5 FD 
0f458     F9 01 00 02 | 	byte	$f1, $f2, $f8, $ff, $f7, $d8, $fb, $ef, $f2, $fd, $f5, $fd, $f9, $01, $00, $02
0f45c     04 06 0A 10 
0f460     10 13 1E 17 
0f464     19 1A 16 17 
0f468     15 18 12 0D | 	byte	$04, $06, $0a, $10, $10, $13, $1e, $17, $19, $1a, $16, $17, $15, $18, $12, $0d
0f46c     0D 11 0B F7 
0f470     FE 04 0C 07 
0f474     0A 0C 0A 0A 
0f478     07 06 05 08 | 	byte	$0d, $11, $0b, $f7, $fe, $04, $0c, $07, $0a, $0c, $0a, $0a, $07, $06, $05, $08
0f47c     07 F4 E7 F8 
0f480     F3 E9 D5 E8 
0f484     E0 EC E9 ED 
0f488     F0 F3 F5 F5 | 	byte	$07, $f4, $e7, $f8, $f3, $e9, $d5, $e8, $e0, $ec, $e9, $ed, $f0, $f3, $f5, $f5
0f48c     F2 F3 FC 01 
0f490     E7 EB FB EC 
0f494     FB F4 FD F8 
0f498     FE FF 01 02 | 	byte	$f2, $f3, $fc, $01, $e7, $eb, $fb, $ec, $fb, $f4, $fd, $f8, $fe, $ff, $01, $02
0f49c     05 09 0D 11 
0f4a0     10 1E 17 18 
0f4a4     18 18 18 15 
0f4a8     17 15 10 0C | 	byte	$05, $09, $0d, $11, $10, $1e, $17, $18, $18, $18, $18, $15, $17, $15, $10, $0c
0f4ac     0F 11 01 F7 
0f4b0     02 0A 07 08 
0f4b4     09 0A 0A 09 
0f4b8     09 05 05 07 | 	byte	$0f, $11, $01, $f7, $02, $0a, $07, $08, $09, $0a, $0a, $09, $09, $05, $05, $07
0f4bc     06 EE EB F6 
0f4c0     E6 D3 E4 DD 
0f4c4     EA E7 ED EB 
0f4c8     F2 F3 F7 F5 | 	byte	$06, $ee, $eb, $f6, $e6, $d3, $e4, $dd, $ea, $e7, $ed, $eb, $f2, $f3, $f7, $f5
0f4cc     F4 F6 01 FD 
0f4d0     E3 F7 ED F6 
0f4d4     F5 F9 F8 FB 
0f4d8     FD FF 02 02 | 	byte	$f4, $f6, $01, $fd, $e3, $f7, $ed, $f6, $f5, $f9, $f8, $fb, $fd, $ff, $02, $02
0f4dc     07 0A 11 0F 
0f4e0     1B 18 19 16 
0f4e4     19 17 17 15 
0f4e8     17 13 0F 0B | 	byte	$07, $0a, $11, $0f, $1b, $18, $19, $16, $19, $17, $17, $15, $17, $13, $0f, $0b
0f4ec     11 0A F8 FE 
0f4f0     0A 07 09 07 
0f4f4     0B 09 0B 09 
0f4f8     0B 06 06 06 | 	byte	$11, $0a, $f8, $fe, $0a, $07, $09, $07, $0b, $09, $0b, $09, $0b, $06, $06, $06
0f4fc     02 ED F1 EA 
0f500     D0 E4 DD E6 
0f504     E6 EB EC EF 
0f508     F2 F5 F8 F6 | 	byte	$02, $ed, $f1, $ea, $d0, $e4, $dd, $e6, $e6, $eb, $ec, $ef, $f2, $f5, $f8, $f6
0f50c     F5 FA 01 F7 
0f510     E8 F3 F0 F5 
0f514     F6 F8 FA FB 
0f518     FE 00 02 04 | 	byte	$f5, $fa, $01, $f7, $e8, $f3, $f0, $f5, $f6, $f8, $fa, $fb, $fe, $00, $02, $04
0f51c     08 0E 11 18 
0f520     1A 19 17 18 
0f524     17 18 16 16 
0f528     15 12 0D 0E | 	byte	$08, $0e, $11, $18, $1a, $19, $17, $18, $17, $18, $16, $16, $15, $12, $0d, $0e
0f52c     10 00 FA 08 
0f530     05 09 07 0A 
0f534     09 0A 09 0B 
0f538     0A 07 05 03 | 	byte	$10, $00, $fa, $08, $05, $09, $07, $0a, $09, $0a, $09, $0b, $0a, $07, $05, $03
0f53c     FD F2 EC CE 
0f540     E1 DC E4 E6 
0f544     E8 EB EC F1 
0f548     F2 F6 F8 F9 | 	byte	$fd, $f2, $ec, $ce, $e1, $dc, $e4, $e6, $e8, $eb, $ec, $f1, $f2, $f6, $f8, $f9
0f54c     F6 FF 02 EF 
0f550     EF EF F6 F4 
0f554     F8 F8 FB FD 
0f558     FE 01 02 07 | 	byte	$f6, $ff, $02, $ef, $ef, $ef, $f6, $f4, $f8, $f8, $fb, $fd, $fe, $01, $02, $07
0f55c     09 11 15 1A 
0f560     17 18 17 17 
0f564     16 16 14 16 
0f568     13 10 0D 11 | 	byte	$09, $11, $15, $1a, $17, $18, $17, $17, $16, $16, $14, $16, $13, $10, $0d, $11
0f56c     0A F8 07 05 
0f570     08 07 08 0A 
0f574     09 0B 0A 0C 
0f578     0A 09 03 00 | 	byte	$0a, $f8, $07, $05, $08, $07, $08, $0a, $09, $0b, $0a, $0c, $0a, $09, $03, $00
0f57c     FF F4 CD DF 
0f580     D9 E2 E2 E7 
0f584     E9 EC EE F2 
0f588     F3 F7 F9 FA | 	byte	$ff, $f4, $cd, $df, $d9, $e2, $e2, $e7, $e9, $ec, $ee, $f2, $f3, $f7, $f9, $fa
0f58c     F9 00 0A E2 
0f590     F5 EE F5 F6 
0f594     F6 F9 F9 FE 
0f598     FD 01 03 08 | 	byte	$f9, $00, $0a, $e2, $f5, $ee, $f5, $f6, $f6, $f9, $f9, $fe, $fd, $01, $03, $08
0f59c     0D 13 19 17 
0f5a0     16 16 16 17 
0f5a4     14 15 14 16 
0f5a8     12 0F 0E 11 | 	byte	$0d, $13, $19, $17, $16, $16, $16, $17, $14, $15, $14, $16, $12, $0f, $0e, $11
0f5ac     FE 03 06 07 
0f5b0     04 08 07 0A 
0f5b4     08 09 09 0B 
0f5b8     0A 08 00 FF | 	byte	$fe, $03, $06, $07, $04, $08, $07, $0a, $08, $09, $09, $0b, $0a, $08, $00, $ff
0f5bc     03 DA D8 D6 
0f5c0     E1 DE E6 E7 
0f5c4     EA EC EF F2 
0f5c8     F4 F8 FB FA | 	byte	$03, $da, $d8, $d6, $e1, $de, $e6, $e7, $ea, $ec, $ef, $f2, $f4, $f8, $fb, $fa
0f5cc     FD 0A FA E6 
0f5d0     F2 F0 F4 F8 
0f5d4     F6 FA FB FE 
0f5d8     FE 02 06 0A | 	byte	$fd, $0a, $fa, $e6, $f2, $f0, $f4, $f8, $f6, $fa, $fb, $fe, $fe, $02, $06, $0a
0f5dc     10 1A 16 19 
0f5e0     15 16 16 17 
0f5e4     14 15 15 14 
0f5e8     11 0E 10 0B | 	byte	$10, $1a, $16, $19, $15, $16, $16, $17, $14, $15, $15, $14, $11, $0e, $10, $0b
0f5ec     FB 09 03 08 
0f5f0     05 07 08 09 
0f5f4     09 09 0B 0B 
0f5f8     0B 06 FF 00 | 	byte	$fb, $09, $03, $08, $05, $07, $08, $09, $09, $09, $0b, $0b, $0b, $06, $ff, $00
0f5fc     F5 D5 DA DB 
0f600     DF E2 E6 E9 
0f604     EA ED F0 F3 
0f608     F5 FA FD FC | 	byte	$f5, $d5, $da, $db, $df, $e2, $e6, $e9, $ea, $ed, $f0, $f3, $f5, $fa, $fd, $fc
0f60c     07 08 F3 EB 
0f610     F0 F1 F5 F7 
0f614     F7 F9 FC FE 
0f618     FF 03 07 0C | 	byte	$07, $08, $f3, $eb, $f0, $f1, $f5, $f7, $f7, $f9, $fc, $fe, $ff, $03, $07, $0c
0f61c     1A 15 18 15 
0f620     16 15 17 15 
0f624     14 13 15 13 
0f628     0F 0E 10 03 | 	byte	$1a, $15, $18, $15, $16, $15, $17, $15, $14, $13, $15, $13, $0f, $0e, $10, $03
0f62c     05 03 07 06 
0f630     08 07 0B 09 
0f634     09 09 0C 0B 
0f638     0A 04 00 FB | 	byte	$05, $03, $07, $06, $08, $07, $0b, $09, $09, $09, $0c, $0b, $0a, $04, $00, $fb
0f63c     E0 E4 D3 E2 
0f640     DC E5 E6 EA 
0f644     EB EE F2 F4 
0f648     F6 FC FE 04 | 	byte	$e0, $e4, $d3, $e2, $dc, $e5, $e6, $ea, $eb, $ee, $f2, $f4, $f6, $fc, $fe, $04
0f64c     08 04 E6 EE 
0f650     F0 F1 F8 F5 
0f654     F9 F8 FE FD 
0f658     01 04 09 16 | 	byte	$08, $04, $e6, $ee, $f0, $f1, $f8, $f5, $f9, $f8, $fe, $fd, $01, $04, $09, $16
0f65c     17 14 18 15 
0f660     15 14 17 15 
0f664     14 13 15 13 
0f668     0F 0E 0D 03 | 	byte	$17, $14, $18, $15, $15, $14, $17, $15, $14, $13, $15, $13, $0f, $0e, $0d, $03
0f66c     04 02 07 05 
0f670     06 06 0A 08 
0f674     08 09 0C 0A 
0f678     06 02 00 E0 | 	byte	$04, $02, $07, $05, $06, $06, $0a, $08, $08, $09, $0c, $0a, $06, $02, $00, $e0
0f67c     EF E1 D5 E3 
0f680     DB E7 E6 EA 
0f684     EB EE F3 F3 
0f688     F9 FC 03 0D | 	byte	$ef, $e1, $d5, $e3, $db, $e7, $e6, $ea, $eb, $ee, $f3, $f3, $f9, $fc, $03, $0d
0f68c     03 03 E0 F2 
0f690     F1 ED FB F3 
0f694     FA F8 FD FF 
0f698     01 06 0F 1C | 	byte	$03, $03, $e0, $f2, $f1, $ed, $fb, $f3, $fa, $f8, $fd, $ff, $01, $06, $0f, $1c
0f69c     12 17 17 14 
0f6a0     15 12 16 13 
0f6a4     13 13 14 11 
0f6a8     0E 0E 0D 01 | 	byte	$12, $17, $17, $14, $15, $12, $16, $13, $13, $13, $14, $11, $0e, $0e, $0d, $01
0f6ac     03 04 06 05 
0f6b0     06 07 0A 09 
0f6b4     08 0A 0B 09 
0f6b8     04 02 EB E5 | 	byte	$03, $04, $06, $05, $06, $07, $0a, $09, $08, $0a, $0b, $09, $04, $02, $eb, $e5
0f6bc     F4 DE D9 E2 
0f6c0     DD E6 E9 E9 
0f6c4     EE EE F4 F6 
0f6c8     FB 00 0F 0B | 	byte	$f4, $de, $d9, $e2, $dd, $e6, $e9, $e9, $ee, $ee, $f4, $f6, $fb, $00, $0f, $0b
0f6cc     01 FC DD F5 
0f6d0     F3 EB FD F3 
0f6d4     F8 FC FB 00 
0f6d8     03 07 1B 17 | 	byte	$01, $fc, $dd, $f5, $f3, $eb, $fd, $f3, $f8, $fc, $fb, $00, $03, $07, $1b, $17
0f6dc     11 19 14 14 
0f6e0     14 13 17 13 
0f6e4     12 14 14 11 
0f6e8     0E 10 0B FC | 	byte	$11, $19, $14, $14, $14, $13, $17, $13, $12, $14, $14, $11, $0e, $10, $0b, $fc
0f6ec     06 04 04 07 
0f6f0     05 07 09 08 
0f6f4     08 09 0B 06 
0f6f8     01 F4 E3 F5 | 	byte	$06, $04, $04, $07, $05, $07, $09, $08, $08, $09, $0b, $06, $01, $f4, $e3, $f5
0f6fc     EC E2 DC DE 
0f700     E2 E5 EB EA 
0f704     EC F0 F3 F8 
0f708     FC 09 13 04 | 	byte	$ec, $e2, $dc, $de, $e2, $e5, $eb, $ea, $ec, $f0, $f3, $f8, $fc, $09, $13, $04
0f70c     02 F3 DC F7 
0f710     F5 EB FD F7 
0f714     F4 FE FE FF 
0f718     07 11 1B 14 | 	byte	$02, $f3, $dc, $f7, $f5, $eb, $fd, $f7, $f4, $fe, $fe, $ff, $07, $11, $1b, $14
0f71c     13 17 14 13 
0f720     14 13 15 13 
0f724     11 13 14 11 
0f728     0F 14 01 FD | 	byte	$13, $17, $14, $13, $14, $13, $15, $13, $11, $13, $14, $11, $0f, $14, $01, $fd
0f72c     09 02 03 08 
0f730     04 07 0B 07 
0f734     08 0A 08 02 
0f738     F7 E1 F3 F9 | 	byte	$09, $02, $03, $08, $04, $07, $0b, $07, $08, $0a, $08, $02, $f7, $e1, $f3, $f9
0f73c     E6 E9 DF D9 
0f740     E7 E7 E9 ED 
0f744     ED F1 F6 F9 
0f748     02 11 0E 02 | 	byte	$e6, $e9, $df, $d9, $e7, $e7, $e9, $ed, $ed, $f1, $f6, $f9, $02, $11, $0e, $02
0f74c     02 EC DF F8 
0f750     F5 EA F8 FB 
0f754     F3 FB 03 00 
0f758     0B 1A 17 10 | 	byte	$02, $ec, $df, $f8, $f5, $ea, $f8, $fb, $f3, $fb, $03, $00, $0b, $1a, $17, $10
0f75c     15 17 12 13 
0f760     14 12 13 13 
0f764     11 13 15 11 
0f768     14 0E F9 00 | 	byte	$15, $17, $12, $13, $14, $12, $13, $13, $11, $13, $15, $11, $14, $0e, $f9, $00
0f76c     0A 01 03 09 
0f770     04 06 0A 07 
0f774     06 09 04 FA 
0f778     E2 E8 00 F3 | 	byte	$0a, $01, $03, $09, $04, $06, $0a, $07, $06, $09, $04, $fa, $e2, $e8, $00, $f3
0f77c     E4 EF E3 D4 
0f780     E7 ED E6 EB 
0f784     F1 F1 F7 FF 
0f788     09 10 0B 03 | 	byte	$e4, $ef, $e3, $d4, $e7, $ed, $e6, $eb, $f1, $f1, $f7, $ff, $09, $10, $0b, $03
0f78c     FD E5 E1 F8 
0f790     F8 EC F6 FE 
0f794     F7 F8 04 0A 
0f798     0F 17 18 12 | 	byte	$fd, $e5, $e1, $f8, $f8, $ec, $f6, $fe, $f7, $f8, $04, $0a, $0f, $17, $18, $12
0f79c     13 16 13 11 
0f7a0     13 14 13 11 
0f7a4     12 14 15 16 
0f7a8     15 03 F7 06 | 	byte	$13, $16, $13, $11, $13, $14, $13, $11, $12, $14, $15, $16, $15, $03, $f7, $06
0f7ac     09 FF 03 09 
0f7b0     05 04 09 09 
0f7b4     06 06 00 E8 
0f7b8     DB FA 04 ED | 	byte	$09, $ff, $03, $09, $05, $04, $09, $09, $06, $06, $00, $e8, $db, $fa, $04, $ed
0f7bc     E8 F4 E4 D3 
0f7c0     E4 F2 E9 E7 
0f7c4     F2 F7 F7 04 
0f7c8     0F 0E 09 04 | 	byte	$e8, $f4, $e4, $d3, $e4, $f2, $e9, $e7, $f2, $f7, $f7, $04, $0f, $0e, $09, $04
0f7cc     F7 DE E3 F9 
0f7d0     F6 ED F4 FD 
0f7d4     FA F9 03 10 
0f7d8     12 11 15 15 | 	byte	$f7, $de, $e3, $f9, $f6, $ed, $f4, $fd, $fa, $f9, $03, $10, $12, $11, $15, $15
0f7dc     12 12 13 12 
0f7e0     12 13 13 11 
0f7e4     11 14 18 1B 
0f7e8     0E F7 FB 0A | 	byte	$12, $12, $13, $12, $12, $13, $13, $11, $11, $14, $18, $1b, $0e, $f7, $fb, $0a
0f7ec     07 FE 04 0A 
0f7f0     07 05 08 0A 
0f7f4     07 02 F1 DA 
0f7f8     E8 04 FF EC | 	byte	$07, $fe, $04, $0a, $07, $05, $08, $0a, $07, $02, $f1, $da, $e8, $04, $ff, $ec
0f7fc     EE F6 E4 D3 
0f800     E2 F3 ED E5 
0f804     EF FC 02 06 
0f808     0B 0F 0B 02 | 	byte	$ee, $f6, $e4, $d3, $e2, $f3, $ed, $e5, $ef, $fc, $02, $06, $0b, $0f, $0b, $02
0f80c     EE DD E7 FA 
0f810     F7 EE F2 FC 
0f814     FE FD 08 12 
0f818     13 12 12 14 | 	byte	$ee, $dd, $e7, $fa, $f7, $ee, $f2, $fc, $fe, $fd, $08, $12, $13, $12, $12, $14
0f81c     14 12 11 12 
0f820     13 12 11 11 
0f824     12 17 1E 1A 
0f828     02 F3 FF 0C | 	byte	$14, $12, $11, $12, $13, $12, $11, $11, $12, $17, $1e, $1a, $02, $f3, $ff, $0c
0f82c     06 FD 02 0A 
0f830     07 04 06 0A 
0f834     06 F4 DB DD 
0f838     F8 06 F7 ED | 	byte	$06, $fd, $02, $0a, $07, $04, $06, $0a, $06, $f4, $db, $dd, $f8, $06, $f7, $ed
0f83c     F3 F7 E8 D5 
0f840     DC F0 F3 EA 
0f844     EC FB 0B 0B 
0f848     08 0C 0C 02 | 	byte	$f3, $f7, $e8, $d5, $dc, $f0, $f3, $ea, $ec, $fb, $0b, $0b, $08, $0c, $0c, $02
0f84c     E9 DA E6 F8 
0f850     FC F2 ED F6 
0f854     02 09 0B 0C 
0f858     11 16 15 10 | 	byte	$e9, $da, $e6, $f8, $fc, $f2, $ed, $f6, $02, $09, $0b, $0c, $11, $16, $15, $10
0f85c     10 13 13 11 
0f860     10 11 11 11 
0f864     13 1B 1F 13 
0f868     F9 F1 01 0E | 	byte	$10, $13, $13, $11, $10, $11, $11, $11, $13, $1b, $1f, $13, $f9, $f1, $01, $0e
0f86c     08 FD FF 08 
0f870     0C 08 04 05 
0f874     01 E7 D5 E3 
0f878     FF 09 FA EE | 	byte	$08, $fd, $ff, $08, $0c, $08, $04, $05, $01, $e7, $d5, $e3, $ff, $09, $fa, $ee
0f87c     F0 F7 EF DC 
0f880     DA E8 F3 F4 
0f884     F3 FC 09 0E 
0f888     0D 0B 07 FE | 	byte	$f0, $f7, $ef, $dc, $da, $e8, $f3, $f4, $f3, $fc, $09, $0e, $0d, $0b, $07, $fe
0f88c     EB DA E1 F3 
0f890     FF FB F1 F0 
0f894     FC 0E 15 11 
0f898     0E 0E 11 15 | 	byte	$eb, $da, $e1, $f3, $ff, $fb, $f1, $f0, $fc, $0e, $15, $11, $0e, $0e, $11, $15
0f89c     16 12 0F 0E 
0f8a0     11 14 13 11 
0f8a4     15 1E 20 0E 
0f8a8     F7 F0 FE 0C | 	byte	$16, $12, $0f, $0e, $11, $14, $13, $11, $15, $1e, $20, $0e, $f7, $f0, $fe, $0c
0f8ac     0D 04 FD 01 
0f8b0     09 0D 0A 01 
0f8b4     ED D9 D7 EC 
0f8b8     03 08 FD F0 | 	byte	$0d, $04, $fd, $01, $09, $0d, $0a, $01, $ed, $d9, $d7, $ec, $03, $08, $fd, $f0
0f8bc     F0 F5 F2 E5 
0f8c0     DC E1 ED F7 
0f8c4     FF 04 05 08 
0f8c8     0C 0F 0B FC | 	byte	$f0, $f5, $f2, $e5, $dc, $e1, $ed, $f7, $ff, $04, $05, $08, $0c, $0f, $0b, $fc
0f8cc     E4 D9 E0 F3 
0f8d0     FF FF F7 F4 
0f8d4     FE 0B 13 14 
0f8d8     13 11 0E 0F | 	byte	$e4, $d9, $e0, $f3, $ff, $ff, $f7, $f4, $fe, $0b, $13, $14, $13, $11, $0e, $0f
0f8dc     12 15 14 10 
0f8e0     0E 0E 10 16 
0f8e4     1F 23 1A 04 
0f8e8     F1 F0 FE 0D | 	byte	$12, $15, $14, $10, $0e, $0e, $10, $16, $1f, $23, $1a, $04, $f1, $f0, $fe, $0d
0f8ec     0F 05 FD FD 
0f8f0     05 0C 0B FB 
0f8f4     E2 CF D7 F3 
0f8f8     0B 0F 00 EF | 	byte	$0f, $05, $fd, $fd, $05, $0c, $0b, $fb, $e2, $cf, $d7, $f3, $0b, $0f, $00, $ef
0f8fc     ED F4 F7 EC 
0f900     E0 DD E6 F8 
0f904     08 0C 08 05 
0f908     08 0C 0B FD | 	byte	$ed, $f4, $f7, $ec, $e0, $dd, $e6, $f8, $08, $0c, $08, $05, $08, $0c, $0b, $fd
0f90c     E4 D6 DA EC 
0f910     FF 04 FE F9 
0f914     FD 07 0F 15 
0f918     17 13 0E 0C | 	byte	$e4, $d6, $da, $ec, $ff, $04, $fe, $f9, $fd, $07, $0f, $15, $17, $13, $0e, $0c
0f91c     0F 12 13 12 
0f920     10 0F 10 17 
0f924     21 23 19 01 
0f928     EF EC FB 0B | 	byte	$0f, $12, $13, $12, $10, $0f, $10, $17, $21, $23, $19, $01, $ef, $ec, $fb, $0b
0f92c     12 0D 01 FB 
0f930     FE 06 06 F5 
0f934     DB CF D9 F1 
0f938     0B 11 07 F6 | 	byte	$12, $0d, $01, $fb, $fe, $06, $06, $f5, $db, $cf, $d9, $f1, $0b, $11, $07, $f6
0f93c     ED EF F3 F0 
0f940     E6 E1 E7 F7 
0f944     06 0E 0B 08 
0f948     08 09 08 FA | 	byte	$ed, $ef, $f3, $f0, $e6, $e1, $e7, $f7, $06, $0e, $0b, $08, $08, $09, $08, $fa
0f94c     E7 D7 D8 E7 
0f950     FB 05 07 05 
0f954     04 04 07 0F 
0f958     16 19 14 10 | 	byte	$e7, $d7, $d8, $e7, $fb, $05, $07, $05, $04, $04, $07, $0f, $16, $19, $14, $10
0f95c     0D 0D 0F 11 
0f960     13 13 14 1A 
0f964     20 20 14 FE 
0f968     EE EB F7 07 | 	byte	$0d, $0d, $0f, $11, $13, $13, $14, $1a, $20, $20, $14, $fe, $ee, $eb, $f7, $07
0f96c     12 11 06 FE 
0f970     FB FD F7 E9 
0f974     DA D6 E0 F6 
0f978     08 10 09 FD | 	byte	$12, $11, $06, $fe, $fb, $fd, $f7, $e9, $da, $d6, $e0, $f6, $08, $10, $09, $fd
0f97c     F2 F0 F1 EE 
0f980     E9 E5 EB F9 
0f984     07 0E 0D 0A 
0f988     08 07 05 F9 | 	byte	$f2, $f0, $f1, $ee, $e9, $e5, $eb, $f9, $07, $0e, $0d, $0a, $08, $07, $05, $f9
0f98c     E7 DB D8 E2 
0f990     F3 01 0C 10 
0f994     0D 08 04 07 
0f998     0E 14 16 15 | 	byte	$e7, $db, $d8, $e2, $f3, $01, $0c, $10, $0d, $08, $04, $07, $0e, $14, $16, $15
0f99c     12 10 0D 0D 
0f9a0     0E 11 18 1F 
0f9a4     24 20 11 FA 
0f9a8     EB E8 F3 04 | 	byte	$12, $10, $0d, $0d, $0e, $11, $18, $1f, $24, $20, $11, $fa, $eb, $e8, $f3, $04
0f9ac     12 16 10 05 
0f9b0     FC F2 E6 DA 
0f9b4     D7 DD ED FE 
0f9b8     0B 0E 07 FD | 	byte	$12, $16, $10, $05, $fc, $f2, $e6, $da, $d7, $dd, $ed, $fe, $0b, $0e, $07, $fd
0f9bc     F4 F1 F2 F1 
0f9c0     EC EA EE F8 
0f9c4     04 0B 0E 0E 
0f9c8     0C 08 02 F4 | 	byte	$f4, $f1, $f2, $f1, $ec, $ea, $ee, $f8, $04, $0b, $0e, $0e, $0c, $08, $02, $f4
0f9cc     E4 D9 D8 E3 
0f9d0     F2 03 0F 14 
0f9d4     12 0B 05 05 
0f9d8     09 0F 14 17 | 	byte	$e4, $d9, $d8, $e3, $f2, $03, $0f, $14, $12, $0b, $05, $05, $09, $0f, $14, $17
0f9dc     15 13 10 0D 
0f9e0     0D 12 1A 21 
0f9e4     24 1E 0E F8 
0f9e8     EB E7 EF FF | 	byte	$15, $13, $10, $0d, $0d, $12, $1a, $21, $24, $1e, $0e, $f8, $eb, $e7, $ef, $ff
0f9ec     0E 15 13 0B 
0f9f0     FC E9 D7 CD 
0f9f4     D1 DF F6 08 
0f9f8     14 13 08 F9 | 	byte	$0e, $15, $13, $0b, $fc, $e9, $d7, $cd, $d1, $df, $f6, $08, $14, $13, $08, $f9
0f9fc     F0 EE F1 F5 
0fa00     F5 F4 F5 F8 
0fa04     FC 03 08 0E 
0fa08     10 0F 05 F2 | 	byte	$f0, $ee, $f1, $f5, $f5, $f4, $f5, $f8, $fc, $03, $08, $0e, $10, $0f, $05, $f2
0fa0c     DF D2 D3 DF 
0fa10     F2 0A 18 1C 
0fa14     15 09 01 FF 
0fa18     04 0D 15 1B | 	byte	$df, $d2, $d3, $df, $f2, $0a, $18, $1c, $15, $09, $01, $ff, $04, $0d, $15, $1b
0fa1c     1B 16 0F 0A 
0fa20     0B 12 1B 23 
0fa24     24 1C 09 F5 
0fa28     E7 E5 EF 00 | 	byte	$1b, $16, $0f, $0a, $0b, $12, $1b, $23, $24, $1c, $09, $f5, $e7, $e5, $ef, $00
0fa2c     0E 17 16 0B 
0fa30     F4 DB C9 C7 
0fa34     D3 EC 03 16 
0fa38     1A 11 01 F2 | 	byte	$0e, $17, $16, $0b, $f4, $db, $c9, $c7, $d3, $ec, $03, $16, $1a, $11, $01, $f2
0fa3c     EB EE F6 FF 
0fa40     03 00 F9 F4 
0fa44     F3 F8 02 0E 
0fa48     16 16 07 F0 | 	byte	$eb, $ee, $f6, $ff, $03, $00, $f9, $f4, $f3, $f8, $02, $0e, $16, $16, $07, $f0
0fa4c     D6 CA CD E2 
0fa50     FC 16 21 1E 
0fa54     11 01 F8 FA 
0fa58     06 13 1D 20 | 	byte	$d6, $ca, $cd, $e2, $fc, $16, $21, $1e, $11, $01, $f8, $fa, $06, $13, $1d, $20
0fa5c     1C 12 0A 07 
0fa60     0C 17 22 27 
0fa64     23 12 FE EA 
0fa68     E3 E8 F7 08 | 	byte	$1c, $12, $0a, $07, $0c, $17, $22, $27, $23, $12, $fe, $ea, $e3, $e8, $f7, $08
0fa6c     15 18 0F F9 
0fa70     E0 CA C4 CF 
0fa74     E7 FF 12 18 
0fa78     10 01 F3 EC | 	byte	$15, $18, $0f, $f9, $e0, $ca, $c4, $cf, $e7, $ff, $12, $18, $10, $01, $f3, $ec
0fa7c     EF F9 06 0E 
0fa80     0B FE F1 E8 
0fa84     EA F6 08 17 
0fa88     1E 18 00 E2 | 	byte	$ef, $f9, $06, $0e, $0b, $fe, $f1, $e8, $ea, $f6, $08, $17, $1e, $18, $00, $e2
0fa8c     CA C6 D6 F3 
0fa90     12 22 21 12 
0fa94     FF F4 F5 02 
0fa98     14 1F 22 1C | 	byte	$ca, $c6, $d6, $f3, $12, $22, $21, $12, $ff, $f4, $f5, $02, $14, $1f, $22, $1c
0fa9c     0F 05 04 0C 
0faa0     19 25 29 24 
0faa4     16 00 EC E4 
0faa8     E9 F8 07 12 | 	byte	$0f, $05, $04, $0c, $19, $25, $29, $24, $16, $00, $ec, $e4, $e9, $f8, $07, $12
0faac     14 0C F8 E0 
0fab0     CD C8 D3 EA 
0fab4     FE 0E 10 0A 
0fab8     FD F4 F2 F6 | 	byte	$14, $0c, $f8, $e0, $cd, $c8, $d3, $ea, $fe, $0e, $10, $0a, $fd, $f4, $f2, $f6
0fabc     00 0A 11 10 
0fac0     04 F4 E8 E5 
0fac4     F0 03 14 1E 
0fac8     1B 08 E9 CF | 	byte	$00, $0a, $11, $10, $04, $f4, $e8, $e5, $f0, $03, $14, $1e, $1b, $08, $e9, $cf
0facc     C5 D0 ED 0E 
0fad0     1F 1D 0E FA 
0fad4     F0 F5 07 17 
0fad8     21 20 15 09 | 	byte	$c5, $d0, $ed, $0e, $1f, $1d, $0e, $fa, $f0, $f5, $07, $17, $21, $20, $15, $09
0fadc     01 04 11 1F 
0fae0     29 29 1F 10 
0fae4     00 F1 EC F0 
0fae8     FB 05 0C 0C | 	byte	$01, $04, $11, $1f, $29, $29, $1f, $10, $00, $f1, $ec, $f0, $fb, $05, $0c, $0c
0faec     06 F7 E3 D1 
0faf0     CD D7 EA FD 
0faf4     06 07 02 FA 
0faf8     F7 F8 FE 03 | 	byte	$06, $f7, $e3, $d1, $cd, $d7, $ea, $fd, $06, $07, $02, $fa, $f7, $f8, $fe, $03
0fafc     08 0D 11 0C 
0fb00     00 F0 E6 EA 
0fb04     F9 0B 19 1B 
0fb08     10 F6 DB C8 | 	byte	$08, $0d, $11, $0c, $00, $f0, $e6, $ea, $f9, $0b, $19, $1b, $10, $f6, $db, $c8
0fb0c     CF E8 08 1B 
0fb10     19 07 F6 EF 
0fb14     F7 0B 1C 21 
0fb18     1A 0D 03 01 | 	byte	$cf, $e8, $08, $1b, $19, $07, $f6, $ef, $f7, $0b, $1c, $21, $1a, $0d, $03, $01
0fb1c     09 19 25 29 
0fb20     21 17 0D 05 
0fb24     FD F6 F5 F7 
0fb28     FD 04 08 07 | 	byte	$09, $19, $25, $29, $21, $17, $0d, $05, $fd, $f6, $f5, $f7, $fd, $04, $08, $07
0fb2c     FA E4 D2 CE 
0fb30     D9 ED FD 02 
0fb34     FF FB F8 FA 
0fb38     FF 04 05 05 | 	byte	$fa, $e4, $d2, $ce, $d9, $ed, $fd, $02, $ff, $fb, $f8, $fa, $ff, $04, $05, $05
0fb3c     07 0E 14 10 
0fb40     FE EB E4 EE 
0fb44     01 15 1C 15 
0fb48     FF E5 CF CF | 	byte	$07, $0e, $14, $10, $fe, $eb, $e4, $ee, $01, $15, $1c, $15, $ff, $e5, $cf, $cf
0fb4c     E6 05 16 12 
0fb50     FF F1 F0 FD 
0fb54     11 1C 1B 10 
0fb58     05 03 08 11 | 	byte	$e6, $05, $16, $12, $ff, $f1, $f0, $fd, $11, $1c, $1b, $10, $05, $03, $08, $11
0fb5c     1C 22 22 1B 
0fb60     14 11 0F 07 
0fb64     FB F2 F1 F9 
0fb68     04 0B 09 F8 | 	byte	$1c, $22, $22, $1b, $14, $11, $0f, $07, $fb, $f2, $f1, $f9, $04, $0b, $09, $f8
0fb6c     E1 D1 D3 E2 
0fb70     F3 FB F8 F3 
0fb74     F4 FD 04 06 
0fb78     03 FE FE 06 | 	byte	$e1, $d1, $d3, $e2, $f3, $fb, $f8, $f3, $f4, $fd, $04, $06, $03, $fe, $fe, $06
0fb7c     12 1B 17 06 
0fb80     F2 E5 EB FE 
0fb84     10 16 10 03 
0fb88     F0 DB D5 E4 | 	byte	$12, $1b, $17, $06, $f2, $e5, $eb, $fe, $10, $16, $10, $03, $f0, $db, $d5, $e4
0fb8c     FB 0C 09 FB 
0fb90     F2 F6 02 10 
0fb94     15 12 0B 07 
0fb98     09 0D 12 17 | 	byte	$fb, $0c, $09, $fb, $f2, $f6, $02, $10, $15, $12, $0b, $07, $09, $0d, $12, $17
0fb9c     1C 1E 1B 17 
0fba0     14 12 0B FC 
0fba4     F2 F1 F9 03 
0fba8     07 05 F5 DF | 	byte	$1c, $1e, $1b, $17, $14, $12, $0b, $fc, $f2, $f1, $f9, $03, $07, $05, $f5, $df
0fbac     D1 D8 E7 F3 
0fbb0     F2 ED ED F7 
0fbb4     03 07 02 FB 
0fbb8     FB 02 0C 14 | 	byte	$d1, $d8, $e7, $f3, $f2, $ed, $ed, $f7, $03, $07, $02, $fb, $fb, $02, $0c, $14
0fbbc     16 11 0B 02 
0fbc0     F6 EF F3 01 
0fbc4     0E 11 0B FD 
0fbc8     E6 D7 DF F8 | 	byte	$16, $11, $0b, $02, $f6, $ef, $f3, $01, $0e, $11, $0b, $fd, $e6, $d7, $df, $f8
0fbcc     07 05 F7 F1 
0fbd0     F8 04 0D 0D 
0fbd4     0B 0A 0B 0C 
0fbd8     0C 0D 14 1C | 	byte	$07, $05, $f7, $f1, $f8, $04, $0d, $0d, $0b, $0a, $0b, $0c, $0c, $0d, $14, $1c
0fbdc     1E 1A 14 12 
0fbe0     14 12 03 F3 
0fbe4     EF F9 04 07 
0fbe8     02 F4 DD D4 | 	byte	$1e, $1a, $14, $12, $14, $12, $03, $f3, $ef, $f9, $04, $07, $02, $f4, $dd, $d4
0fbec     DD EB F0 EB 
0fbf0     E8 EF FC 03 
0fbf4     02 FD FB FF 
0fbf8     05 0B 10 11 | 	byte	$dd, $eb, $f0, $eb, $e8, $ef, $fc, $03, $02, $fd, $fb, $ff, $05, $0b, $10, $11
0fbfc     12 12 0E 03 
0fc00     F3 EE F9 0A 
0fc04     11 0B 00 F1 
0fc08     E0 E1 F1 FF | 	byte	$12, $12, $0e, $03, $f3, $ee, $f9, $0a, $11, $0b, $00, $f1, $e0, $e1, $f1, $ff
0fc0c     FE F6 F4 FA 
0fc10     03 06 07 09 
0fc14     0D 0E 0B 08 
0fc18     0C 17 1E 1C | 	byte	$fe, $f6, $f4, $fa, $03, $06, $07, $09, $0d, $0e, $0b, $08, $0c, $17, $1e, $1c
0fc1c     16 14 16 18 
0fc20     15 05 F4 F0 
0fc24     FA 04 04 FE 
0fc28     F4 E2 D7 DE | 	byte	$16, $14, $16, $18, $15, $05, $f4, $f0, $fa, $04, $04, $fe, $f4, $e2, $d7, $de
0fc2c     E9 ED E8 E8 
0fc30     EF FA 00 FF 
0fc34     FD FF 01 03 
0fc38     07 0F 13 13 | 	byte	$e9, $ed, $e8, $e8, $ef, $fa, $00, $ff, $fd, $ff, $01, $03, $07, $0f, $13, $13
0fc3c     11 10 0E 03 
0fc40     F4 F3 FE 0A 
0fc44     0C 05 FD EE 
0fc48     E3 EB F7 FC | 	byte	$11, $10, $0e, $03, $f4, $f3, $fe, $0a, $0c, $05, $fd, $ee, $e3, $eb, $f7, $fc
0fc4c     F9 F6 F9 FE 
0fc50     03 06 09 0B 
0fc54     0C 0A 09 0B 
0fc58     15 1C 19 14 | 	byte	$f9, $f6, $f9, $fe, $03, $06, $09, $0b, $0c, $0a, $09, $0b, $15, $1c, $19, $14
0fc5c     15 18 18 15 
0fc60     0C FD F3 F8 
0fc64     00 02 FE F7 
0fc68     E4 D7 DD E9 | 	byte	$15, $18, $18, $15, $0c, $fd, $f3, $f8, $00, $02, $fe, $f7, $e4, $d7, $dd, $e9
0fc6c     EC E6 E6 EE 
0fc70     F9 FD FC FD 
0fc74     01 03 02 04 
0fc78     10 16 12 0E | 	byte	$ec, $e6, $e6, $ee, $f9, $fd, $fc, $fd, $01, $03, $02, $04, $10, $16, $12, $0e
0fc7c     10 13 0F 01 
0fc80     F4 F7 03 0A 
0fc84     07 01 F9 EA 
0fc88     E9 F1 F6 F5 | 	byte	$10, $13, $0f, $01, $f4, $f7, $03, $0a, $07, $01, $f9, $ea, $e9, $f1, $f6, $f5
0fc8c     F5 F8 FB FD 
0fc90     01 07 0A 0B 
0fc94     09 07 0A 13 
0fc98     1B 17 11 14 | 	byte	$f5, $f8, $fb, $fd, $01, $07, $0a, $0b, $09, $07, $0a, $13, $1b, $17, $11, $14
0fc9c     1A 18 12 0E 
0fca0     05 F8 F4 FB 
0fca4     01 00 F7 E4 
0fca8     D7 E0 EB E8 | 	byte	$1a, $18, $12, $0e, $05, $f8, $f4, $fb, $01, $00, $f7, $e4, $d7, $e0, $eb, $e8
0fcac     E1 E6 F1 F7 
0fcb0     F6 F8 FE 03 
0fcb4     02 FF 03 10 
0fcb8     16 0F 0B 12 | 	byte	$e1, $e6, $f1, $f7, $f6, $f8, $fe, $03, $02, $ff, $03, $10, $16, $0f, $0b, $12
0fcbc     17 12 0A 00 
0fcc0     FB FD 02 05 
0fcc4     05 02 F6 E9 
0fcc8     ED F5 F5 F3 | 	byte	$17, $12, $0a, $00, $fb, $fd, $02, $05, $05, $02, $f6, $e9, $ed, $f5, $f5, $f3
0fccc     F6 FA FB FE 
0fcd0     04 09 09 07 
0fcd4     08 09 11 19 
0fcd8     17 11 14 1A | 	byte	$f6, $fa, $fb, $fe, $04, $09, $09, $07, $08, $09, $11, $19, $17, $11, $14, $1a
0fcdc     17 11 10 0E 
0fce0     FE F2 F8 02 
0fce4     00 F6 E2 D8 
0fce8     E4 EC E1 DD | 	byte	$17, $11, $10, $0e, $fe, $f2, $f8, $02, $00, $f6, $e2, $d8, $e4, $ec, $e1, $dd
0fcec     E9 F3 F0 EE 
0fcf0     F9 02 01 FD 
0fcf4     FF 06 11 13 
0fcf8     0C 0C 14 17 | 	byte	$e9, $f3, $f0, $ee, $f9, $02, $01, $fd, $ff, $06, $11, $13, $0c, $0c, $14, $17
0fcfc     0F 0C 0F 08 
0fd00     FA F9 03 08 
0fd04     03 FE F1 EB 
0fd08     F1 F4 F1 F3 | 	byte	$0f, $0c, $0f, $08, $fa, $f9, $03, $08, $03, $fe, $f1, $eb, $f1, $f4, $f1, $f3
0fd0c     F9 FA F9 FF 
0fd10     08 09 05 07 
0fd14     0A 10 17 15 
0fd18     10 14 1A 17 | 	byte	$f9, $fa, $f9, $ff, $08, $09, $05, $07, $0a, $10, $17, $15, $10, $14, $1a, $17
0fd1c     11 12 14 04 
0fd20     F1 F6 03 FF 
0fd24     F4 E3 D9 E7 
0fd28     EC DE DC EE | 	byte	$11, $12, $14, $04, $f1, $f6, $03, $ff, $f4, $e3, $d9, $e7, $ec, $de, $dc, $ee
0fd2c     F4 EB EC FC 
0fd30     03 FC FB 03 
0fd34     08 0C 10 0D 
0fd38     0E 14 14 0F | 	byte	$f4, $eb, $ec, $fc, $03, $fc, $fb, $03, $08, $0c, $10, $0d, $0e, $14, $14, $0f
0fd3c     0F 13 12 04 
0fd40     F9 FF 07 02 
0fd44     00 00 EB E9 
0fd48     F7 F4 ED F4 | 	byte	$0f, $13, $12, $04, $f9, $ff, $07, $02, $00, $00, $eb, $e9, $f7, $f4, $ed, $f4
0fd4c     FC F8 F9 05 
0fd50     09 03 04 0B 
0fd54     0F 15 13 10 
0fd58     15 19 14 11 | 	byte	$fc, $f8, $f9, $05, $09, $03, $04, $0b, $0f, $15, $13, $10, $15, $19, $14, $11
0fd5c     14 15 09 F5 
0fd60     F7 03 FE F3 
0fd64     E5 D9 E6 EB 
0fd68     DB DD EF EE | 	byte	$14, $15, $09, $f5, $f7, $03, $fe, $f3, $e5, $d9, $e6, $eb, $db, $dd, $ef, $ee
0fd6c     E6 ED FB FD 
0fd70     FA FE 02 03 
0fd74     0C 12 0C 0D 
0fd78     14 13 0E 11 | 	byte	$e6, $ed, $fb, $fd, $fa, $fe, $02, $03, $0c, $12, $0c, $0d, $14, $13, $0e, $11
0fd7c     14 12 11 05 
0fd80     FB 02 06 02 
0fd84     07 F5 E4 F6 
0fd88     F8 E7 F0 FC | 	byte	$14, $12, $11, $05, $fb, $02, $06, $02, $07, $f5, $e4, $f6, $f8, $e7, $f0, $fc
0fd8c     F6 F5 02 07 
0fd90     01 04 0A 0C 
0fd94     14 13 0E 15 
0fd98     18 12 11 14 | 	byte	$f6, $f5, $02, $07, $01, $04, $0a, $0c, $14, $13, $0e, $15, $18, $12, $11, $14
0fd9c     14 0E FC F5 
0fda0     00 01 F4 E4 
0fda4     D8 E9 EA D9 
0fda8     E1 ED E8 E8 | 	byte	$14, $0e, $fc, $f5, $00, $01, $f4, $e4, $d8, $e9, $ea, $d9, $e1, $ed, $e8, $e8
0fdac     F1 F4 F8 FE 
0fdb0     FD FF 04 0C 
0fdb4     10 0B 0E 14 
0fdb8     11 10 11 11 | 	byte	$f1, $f4, $f8, $fe, $fd, $ff, $04, $0c, $10, $0b, $0e, $14, $11, $10, $11, $11
0fdbc     11 14 14 02 
0fdc0     FA 08 06 05 
0fdc4     01 E6 EF FD 
0fdc8     EA EB F9 F3 | 	byte	$11, $14, $14, $02, $fa, $08, $06, $05, $01, $e6, $ef, $fd, $ea, $eb, $f9, $f3
0fdcc     F4 FF 02 01 
0fdd0     03 07 0A 14 
0fdd4     12 0E 15 15 
0fdd8     12 14 13 12 | 	byte	$f4, $ff, $02, $01, $03, $07, $0a, $14, $12, $0e, $15, $15, $12, $14, $13, $12
0fddc     13 05 F5 FD 
0fde0     03 F7 E4 D6 
0fde4     E9 E8 D9 E2 
0fde8     E9 E6 EB EE | 	byte	$13, $05, $f5, $fd, $03, $f7, $e4, $d6, $e9, $e8, $d9, $e2, $e9, $e6, $eb, $ee
0fdec     F0 F8 FD FB 
0fdf0     FF 03 0A 10 
0fdf4     0B 0E 12 10 
0fdf8     12 12 10 12 | 	byte	$f0, $f8, $fd, $fb, $ff, $03, $0a, $10, $0b, $0e, $12, $10, $12, $12, $10, $12
0fdfc     14 17 15 FE 
0fe00     FD 0B 09 05 
0fe04     F3 E7 FA F1 
0fe08     E9 F4 F3 F5 | 	byte	$14, $17, $15, $fe, $fd, $0b, $09, $05, $f3, $e7, $fa, $f1, $e9, $f4, $f3, $f5
0fe0c     FB FF 02 01 
0fe10     04 0A 12 10 
0fe14     0F 13 12 12 
0fe18     14 11 11 12 | 	byte	$fb, $ff, $02, $01, $04, $0a, $12, $10, $0f, $13, $12, $12, $14, $11, $11, $12
0fe1c     0D FB F8 03 
0fe20     FB EB D3 E8 
0fe24     E9 DB E2 E3 
0fe28     E7 EB E9 EF | 	byte	$0d, $fb, $f8, $03, $fb, $eb, $d3, $e8, $e9, $db, $e2, $e3, $e7, $eb, $e9, $ef
0fe2c     F5 FA FC FC 
0fe30     02 0A 0F 0B 
0fe34     0F 11 0F 13 
0fe38     12 11 11 12 | 	byte	$f5, $fa, $fc, $fc, $02, $0a, $0f, $0b, $0f, $11, $0f, $13, $12, $11, $11, $12
0fe3c     16 19 11 FE 
0fe40     04 12 07 FF 
0fe44     E9 EF F9 EA 
0fe48     EF F1 F0 F6 | 	byte	$16, $19, $11, $fe, $04, $12, $07, $ff, $e9, $ef, $f9, $ea, $ef, $f1, $f0, $f6
0fe4c     FB 00 FF 01 
0fe50     08 10 0F 0E 
0fe54     13 11 11 13 
0fe58     12 11 10 11 | 	byte	$fb, $00, $ff, $01, $08, $10, $0f, $0e, $13, $11, $11, $13, $12, $11, $10, $11
0fe5c     05 F5 FF FE 
0fe60     EF D3 E3 E9 
0fe64     DD E1 E0 E6 
0fe68     EB E8 ED F1 | 	byte	$05, $f5, $ff, $fe, $ef, $d3, $e3, $e9, $dd, $e1, $e0, $e6, $eb, $e8, $ed, $f1
0fe6c     F8 FC FA 00 
0fe70     08 0F 0A 0D 
0fe74     12 0F 11 12 
0fe78     12 11 10 13 | 	byte	$f8, $fc, $fa, $00, $08, $0f, $0a, $0d, $12, $0f, $11, $12, $12, $11, $10, $13
0fe7c     19 18 0F 01 
0fe80     0C 12 02 FB 
0fe84     E5 F6 F4 E8 
0fe88     F2 EF F1 F9 | 	byte	$19, $18, $0f, $01, $0c, $12, $02, $fb, $e5, $f6, $f4, $e8, $f2, $ef, $f1, $f9
0fe8c     FE FF FE 04 
0fe90     10 0F 0A 12 
0fe94     12 10 11 12 
0fe98     12 10 0F 0D | 	byte	$fe, $ff, $fe, $04, $10, $0f, $0a, $12, $12, $10, $11, $12, $12, $10, $0f, $0d
0fe9c     FA FA 01 F5 
0fea0     D5 DC EA DF 
0fea4     E1 E0 E1 EA 
0fea8     EA EA EF F4 | 	byte	$fa, $fa, $01, $f5, $d5, $dc, $ea, $df, $e1, $e0, $e1, $ea, $ea, $ea, $ef, $f4
0feac     FD FB FB 04 
0feb0     11 0B 0A 12 
0feb4     11 10 11 12 
0feb8     13 11 11 16 | 	byte	$fd, $fb, $fb, $04, $11, $0b, $0a, $12, $11, $10, $11, $12, $13, $11, $11, $16
0febc     1B 16 11 07 
0fec0     11 0E 03 F1 
0fec4     E6 FA F0 EA 
0fec8     F3 ED F2 FC | 	byte	$1b, $16, $11, $07, $11, $0e, $03, $f1, $e6, $fa, $f0, $ea, $f3, $ed, $f2, $fc
0fecc     FF FC FF 0B 
0fed0     12 09 0D 12 
0fed4     10 0F 0F 11 
0fed8     11 0E 0E 06 | 	byte	$ff, $fc, $ff, $0b, $12, $09, $0d, $12, $10, $0f, $0f, $11, $11, $0e, $0e, $06
0fedc     F6 FE FB DD 
0fee0     D6 E9 DF DF 
0fee4     E3 DF E5 EC 
0fee8     EB ED F1 FA | 	byte	$f6, $fe, $fb, $dd, $d6, $e9, $df, $df, $e3, $df, $e5, $ec, $eb, $ed, $f1, $fa
0feec     FF FB FF 10 
0fef0     10 08 10 13 
0fef4     11 11 11 13 
0fef8     13 10 11 1A | 	byte	$ff, $fb, $ff, $10, $10, $08, $10, $13, $11, $11, $11, $13, $13, $10, $11, $1a
0fefc     1B 14 15 10 
0ff00     0A 0D 04 E6 
0ff04     EA FA EC EB 
0ff08     F2 ED F2 FF | 	byte	$1b, $14, $15, $10, $0a, $0d, $04, $e6, $ea, $fa, $ec, $eb, $f2, $ed, $f2, $ff
0ff0c     FE FA 05 12 
0ff10     0B 09 0F 11 
0ff14     11 0F 0F 12 
0ff18     11 0D 0B FD | 	byte	$fe, $fa, $05, $12, $0b, $09, $0f, $11, $11, $0f, $0f, $12, $11, $0d, $0b, $fd
0ff1c     F8 00 E7 D0 
0ff20     E8 E6 DA E2 
0ff24     E3 E0 E8 ED 
0ff28     EC ED F3 FD | 	byte	$f8, $00, $e7, $d0, $e8, $e6, $da, $e2, $e3, $e0, $e8, $ed, $ec, $ed, $f3, $fd
0ff2c     FD FB 08 13 
0ff30     0A 0A 10 12 
0ff34     11 10 11 13 
0ff38     12 10 12 1C | 	byte	$fd, $fb, $08, $13, $0a, $0a, $10, $12, $11, $10, $11, $13, $12, $10, $12, $1c
0ff3c     19 14 1E 12 
0ff40     03 0F 04 E0 
0ff44     EC FB EA E8 
0ff48     F2 EF F1 02 | 	byte	$19, $14, $1e, $12, $03, $0f, $04, $e0, $ec, $fb, $ea, $e8, $f2, $ef, $f1, $02
0ff4c     FE FA 0C 11 
0ff50     06 0A 11 0F 
0ff54     0F 0E 0D 10 
0ff58     10 0C 03 F7 | 	byte	$fe, $fa, $0c, $11, $06, $0a, $11, $0f, $0f, $0e, $0d, $10, $10, $0c, $03, $f7
0ff5c     FB F6 D0 DD 
0ff60     EE DE D9 E5 
0ff64     E5 E1 E9 F0 
0ff68     ED EE F7 01 | 	byte	$fb, $f6, $d0, $dd, $ee, $de, $d9, $e5, $e5, $e1, $e9, $f0, $ed, $ee, $f7, $01
0ff6c     FD 01 11 10 
0ff70     09 0E 13 12 
0ff74     11 11 11 13 
0ff78     13 10 15 1D | 	byte	$fd, $01, $11, $10, $09, $0e, $13, $12, $11, $11, $11, $13, $13, $10, $15, $1d
0ff7c     18 1A 23 10 
0ff80     00 0F 02 DE 
0ff84     EA FE EC E3 
0ff88     F3 F3 F2 FE | 	byte	$18, $1a, $23, $10, $00, $0f, $02, $de, $ea, $fe, $ec, $e3, $f3, $f3, $f2, $fe
0ff8c     00 01 0C 0D 
0ff90     08 0B 10 10 
0ff94     0D 0D 0E 10 
0ff98     0F 0B FE F4 | 	byte	$00, $01, $0c, $0d, $08, $0b, $10, $10, $0d, $0d, $0e, $10, $0f, $0b, $fe, $f4
0ff9c     F8 DE D0 E7 
0ffa0     ED D7 D7 E8 
0ffa4     E9 E0 EA F4 
0ffa8     EF ED FB 04 | 	byte	$f8, $de, $d0, $e7, $ed, $d7, $d7, $e8, $e9, $e0, $ea, $f4, $ef, $ed, $fb, $04
0ffac     FF 07 11 0D 
0ffb0     0A 10 14 12 
0ffb4     10 11 12 13 
0ffb8     12 11 18 1D | 	byte	$ff, $07, $11, $0d, $0a, $10, $14, $12, $10, $11, $12, $13, $12, $11, $18, $1d
0ffbc     1C 20 20 10 
0ffc0     01 0A FE DF 
0ffc4     E8 FD F0 E0 
0ffc8     EC FA F8 F9 | 	byte	$1c, $20, $20, $10, $01, $0a, $fe, $df, $e8, $fd, $f0, $e0, $ec, $fa, $f8, $f9
0ffcc     05 0C 07 07 
0ffd0     0C 0E 0D 0E 
0ffd4     0E 0C 0C 0F 
0ffd8     0E 07 F6 F2 | 	byte	$05, $0c, $07, $07, $0c, $0e, $0d, $0e, $0e, $0c, $0c, $0f, $0e, $07, $f6, $f2
0ffdc     EA D5 DB EC 
0ffe0     E6 D5 D8 E9 
0ffe4     EC E1 E6 F5 
0ffe8     F4 EE FB 07 | 	byte	$ea, $d5, $db, $ec, $e6, $d5, $d8, $e9, $ec, $e1, $e6, $f5, $f4, $ee, $fb, $07
0ffec     0A 09 0B 0F 
0fff0     0F 0F 12 13 
0fff4     11 10 12 14 
0fff8     13 13 19 1E | 	byte	$0a, $09, $0b, $0f, $0f, $0f, $12, $13, $11, $10, $12, $14, $13, $13, $19, $1e
0fffc     22 20 1D 13 
10000     04 04 F7 E4 
10004     E8 F8 F4 E2 
10008     E5 F8 01 FB | 	byte	$22, $20, $1d, $13, $04, $04, $f7, $e4, $e8, $f8, $f4, $e2, $e5, $f8, $01, $fb
1000c     02 0B 09 05 
10010     09 0F 0E 0B 
10014     0B 0D 0D 0D 
10018     0C 01 F1 E5 | 	byte	$02, $0b, $09, $05, $09, $0f, $0e, $0b, $0b, $0d, $0d, $0d, $0c, $01, $f1, $e5
1001c     DA DB E5 E8 
10020     E0 D6 DB EB 
10024     EE E5 E6 F1 
10028     F8 F5 FA 09 | 	byte	$da, $db, $e5, $e8, $e0, $d6, $db, $eb, $ee, $e5, $e6, $f1, $f8, $f5, $fa, $09
1002c     11 0A 06 0C 
10030     14 13 10 10 
10034     12 13 11 11 
10038     13 16 1B 21 | 	byte	$11, $0a, $06, $0c, $14, $13, $10, $10, $12, $13, $11, $11, $13, $16, $1b, $21
1003c     23 1F 1B 14 
10040     08 FE F0 E7 
10044     EC F5 F3 E6 
10048     E3 F5 07 08 | 	byte	$23, $1f, $1b, $14, $08, $fe, $f0, $e7, $ec, $f5, $f3, $e6, $e3, $f5, $07, $08
1004c     01 01 08 0D 
10050     0C 0B 0C 0D 
10054     0D 0C 0C 0D 
10058     0A FB E7 D6 | 	byte	$01, $01, $08, $0d, $0c, $0b, $0c, $0d, $0d, $0c, $0c, $0d, $0a, $fb, $e7, $d6
1005c     D9 E5 E9 E3 
10060     DA D8 DF EA 
10064     EE EA E8 EE 
10068     F8 FE 03 09 | 	byte	$d9, $e5, $e9, $e3, $da, $d8, $df, $ea, $ee, $ea, $e8, $ee, $f8, $fe, $03, $09
1006c     0D 0C 0B 0C 
10070     11 15 13 10 
10074     10 13 14 13 
10078     13 17 20 25 | 	byte	$0d, $0c, $0b, $0c, $11, $15, $13, $10, $10, $13, $14, $13, $13, $17, $20, $25
1007c     22 1E 1B 17 
10080     0A F9 EB E7 
10084     ED F2 F2 EC 
10088     E6 F0 04 0F | 	byte	$22, $1e, $1b, $17, $0a, $f9, $eb, $e7, $ed, $f2, $f2, $ec, $e6, $f0, $04, $0f
1008c     08 FE FF 08 
10090     11 11 0A 07 
10094     09 0D 0F 0D 
10098     04 F1 D9 D0 | 	byte	$08, $fe, $ff, $08, $11, $11, $0a, $07, $09, $0d, $0f, $0d, $04, $f1, $d9, $d0
1009c     DD EC EB DF 
100a0     D5 D9 E3 EB 
100a4     ED ED ED EE 
100a8     F5 01 0E 10 | 	byte	$dd, $ec, $eb, $df, $d5, $d9, $e3, $eb, $ed, $ed, $ed, $ee, $f5, $01, $0e, $10
100ac     0B 07 0A 11 
100b0     15 15 11 0F 
100b4     10 13 14 13 
100b8     14 1A 24 27 | 	byte	$0b, $07, $0a, $11, $15, $15, $11, $0f, $10, $13, $14, $13, $14, $1a, $24, $27
100bc     21 1B 1B 1B 
100c0     0F F8 E3 E3 
100c4     EE F7 F4 E9 
100c8     E7 F5 07 0D | 	byte	$21, $1b, $1b, $1b, $0f, $f8, $e3, $e3, $ee, $f7, $f4, $e9, $e7, $f5, $07, $0d
100cc     08 00 FF 07 
100d0     0E 10 0C 09 
100d4     09 0A 0D 0C 
100d8     02 E6 CD CA | 	byte	$08, $00, $ff, $07, $0e, $10, $0c, $09, $09, $0a, $0d, $0c, $02, $e6, $cd, $ca
100dc     DD F1 F1 E1 
100e0     D2 D3 E2 EF 
100e4     F2 EF EC ED 
100e8     F6 04 11 13 | 	byte	$dd, $f1, $f1, $e1, $d2, $d3, $e2, $ef, $f2, $ef, $ec, $ed, $f6, $04, $11, $13
100ec     0B 05 07 0F 
100f0     16 17 13 0F 
100f4     0E 10 13 14 
100f8     18 20 27 26 | 	byte	$0b, $05, $07, $0f, $16, $17, $13, $0f, $0e, $10, $13, $14, $18, $20, $27, $26
100fc     1E 19 1B 1D 
10100     13 F7 DF DB 
10104     EB F9 F9 EE 
10108     E8 F4 04 0C | 	byte	$1e, $19, $1b, $1d, $13, $f7, $df, $db, $eb, $f9, $f9, $ee, $e8, $f4, $04, $0c
1010c     09 01 01 06 
10110     0C 0E 0C 09 
10114     08 09 0B 09 
10118     F6 D9 C5 CB | 	byte	$09, $01, $01, $06, $0c, $0e, $0c, $09, $08, $09, $0b, $09, $f6, $d9, $c5, $cb
1011c     E1 F5 F3 E1 
10120     D1 D1 E1 EF 
10124     F6 F4 EF EF 
10128     F8 09 14 14 | 	byte	$e1, $f5, $f3, $e1, $d1, $d1, $e1, $ef, $f6, $f4, $ef, $ef, $f8, $09, $14, $14
1012c     0C 06 09 10 
10130     16 18 15 11 
10134     0F 10 13 16 
10138     1C 24 28 26 | 	byte	$0c, $06, $09, $10, $16, $18, $15, $11, $0f, $10, $13, $16, $1c, $24, $28, $26
1013c     1F 1A 1A 1C 
10140     13 F9 E1 D7 
10144     E1 F4 FC F7 
10148     F3 F7 FF 05 | 	byte	$1f, $1a, $1a, $1c, $13, $f9, $e1, $d7, $e1, $f4, $fc, $f7, $f3, $f7, $ff, $05
1014c     05 02 03 07 
10150     0B 0D 0B 08 
10154     06 08 0A 03 
10158     EB D1 C3 CB | 	byte	$05, $02, $03, $07, $0b, $0d, $0b, $08, $06, $08, $0a, $03, $eb, $d1, $c3, $cb
1015c     E1 F3 F4 E6 
10160     D8 D4 DC E8 
10164     F3 F7 F7 F8 
10168     FF 09 0F 10 | 	byte	$e1, $f3, $f4, $e6, $d8, $d4, $dc, $e8, $f3, $f7, $f7, $f8, $ff, $09, $0f, $10
1016c     0C 09 0B 10 
10170     15 16 15 11 
10174     0F 10 13 17 
10178     1F 26 29 26 | 	byte	$0c, $09, $0b, $10, $15, $16, $15, $11, $0f, $10, $13, $17, $1f, $26, $29, $26
1017c     1D 19 19 1B 
10180     13 FE E4 D7 
10184     DB EA F9 FF 
10188     01 01 01 00 | 	byte	$1d, $19, $19, $1b, $13, $fe, $e4, $d7, $db, $ea, $f9, $ff, $01, $01, $01, $00
1018c     FE FF 03 08 
10190     0D 0E 0C 09 
10194     06 05 03 F8 
10198     E1 CE C6 CF | 	byte	$fe, $ff, $03, $08, $0d, $0e, $0c, $09, $06, $05, $03, $f8, $e1, $ce, $c6, $cf
1019c     E0 EF F2 EA 
101a0     DE D9 DC E4 
101a4     ED F5 FA 00 
101a8     07 0D 10 0F | 	byte	$e0, $ef, $f2, $ea, $de, $d9, $dc, $e4, $ed, $f5, $fa, $00, $07, $0d, $10, $0f
101ac     0B 09 0A 0F 
101b0     14 17 16 14 
101b4     11 10 12 17 
101b8     20 27 29 27 | 	byte	$0b, $09, $0a, $0f, $14, $17, $16, $14, $11, $10, $12, $17, $20, $27, $29, $27
101bc     20 1B 19 18 
101c0     10 FD E9 D9 
101c4     D8 E2 F2 FE 
101c8     06 08 05 00 | 	byte	$20, $1b, $19, $18, $10, $fd, $e9, $d9, $d8, $e2, $f2, $fe, $06, $08, $05, $00
101cc     FB F9 FC 02 
101d0     09 0D 0F 0D 
101d4     09 04 FB EA 
101d8     D5 C8 C6 D0 | 	byte	$fb, $f9, $fc, $02, $09, $0d, $0f, $0d, $09, $04, $fb, $ea, $d5, $c8, $c6, $d0
101dc     E0 EE F2 EE 
101e0     E6 DF DD E1 
101e4     E8 F0 FA 05 
101e8     0F 15 15 10 | 	byte	$e0, $ee, $f2, $ee, $e6, $df, $dd, $e1, $e8, $f0, $fa, $05, $0f, $15, $15, $10
101ec     0A 07 07 0B 
101f0     11 16 19 19 
101f4     16 14 14 17 
101f8     1E 24 27 26 | 	byte	$0a, $07, $07, $0b, $11, $16, $19, $19, $16, $14, $14, $17, $1e, $24, $27, $26
101fc     23 1F 1C 19 
10200     0F FF EB DB 
10204     D6 DE EC FD 
10208     09 0E 0D 07 | 	byte	$23, $1f, $1c, $19, $0f, $ff, $eb, $db, $d6, $de, $ec, $fd, $09, $0e, $0d, $07
1020c     FF F9 F9 FB 
10210     01 08 0D 10 
10214     0F 0A FB E5 
10218     D1 C1 C0 CA | 	byte	$ff, $f9, $f9, $fb, $01, $08, $0d, $10, $0f, $0a, $fb, $e5, $d1, $c1, $c0, $ca
1021c     DB EA F3 F4 
10220     F1 EA E4 E1 
10224     E2 E8 F4 03 
10228     0F 19 1C 19 | 	byte	$db, $ea, $f3, $f4, $f1, $ea, $e4, $e1, $e2, $e8, $f4, $03, $0f, $19, $1c, $19
1022c     13 0C 08 06 
10230     08 0D 12 17 
10234     1A 1C 1F 21 
10238     23 23 22 1F | 	byte	$13, $0c, $08, $06, $08, $0d, $12, $17, $1a, $1c, $1f, $21, $23, $23, $22, $1f
1023c     1D 1C 1C 1B 
10240     13 05 F1 E1 
10244     D7 D9 E4 F4 
10248     02 0D 11 10 | 	byte	$1d, $1c, $1c, $1b, $13, $05, $f1, $e1, $d7, $d9, $e4, $f4, $02, $0d, $11, $10
1024c     0A 03 FD FA 
10250     F9 FB 00 05 
10254     09 07 FE EB 
10258     D8 CA C2 C4 | 	byte	$0a, $03, $fd, $fa, $f9, $fb, $00, $05, $09, $07, $fe, $eb, $d8, $ca, $c2, $c4
1025c     CD D8 E5 EF 
10260     F5 F7 F6 F2 
10264     EF EE F1 F8 
10268     01 0C 14 19 | 	byte	$cd, $d8, $e5, $ef, $f5, $f7, $f6, $f2, $ef, $ee, $f1, $f8, $01, $0c, $14, $19
1026c     1C 1B 18 13 
10270     0E 0B 09 09 
10274     0D 13 1C 24 
10278     2B 2E 2C 28 | 	byte	$1c, $1b, $18, $13, $0e, $0b, $09, $09, $0d, $13, $1c, $24, $2b, $2e, $2c, $28
1027c     22 1C 18 13 
10280     0C FF F2 E4 
10284     DC DD E5 F0 
10288     FC 07 0C 0F | 	byte	$22, $1c, $18, $13, $0c, $ff, $f2, $e4, $dc, $dd, $e5, $f0, $fc, $07, $0c, $0f
1028c     0E 0B 07 02 
10290     FE FB FA FA 
10294     FA F7 EF E4 
10298     DA D1 CE CE | 	byte	$0e, $0b, $07, $02, $fe, $fb, $fa, $fa, $fa, $f7, $ef, $e4, $da, $d1, $ce, $ce
1029c     D2 D7 DD E4 
102a0     EA F0 F5 F8 
102a4     FA FC FF 02 
102a8     05 08 0B 0E | 	byte	$d2, $d7, $dd, $e4, $ea, $f0, $f5, $f8, $fa, $fc, $ff, $02, $05, $08, $0b, $0e
102ac     10 13 16 17 
102b0     17 15 12 10 
102b4     0F 12 17 1D 
102b8     24 28 2B 2A | 	byte	$10, $13, $16, $17, $17, $15, $12, $10, $0f, $12, $17, $1d, $24, $28, $2b, $2a
102bc     28 24 1F 17 
102c0     0B FD ED E1 
102c4     DA DC E2 ED 
102c8     F7 01 09 0D | 	byte	$28, $24, $1f, $17, $0b, $fd, $ed, $e1, $da, $dc, $e2, $ed, $f7, $01, $09, $0d
102cc     11 11 0F 0B 
102d0     07 01 FB F6 
102d4     EE E5 DB D3 
102d8     CE CD D0 D6 | 	byte	$11, $11, $0f, $0b, $07, $01, $fb, $f6, $ee, $e5, $db, $d3, $ce, $cd, $d0, $d6
102dc     DC E2 E7 EA 
102e0     EE F0 F2 F5 
102e4     F9 FE 03 08 
102e8     0C 0F 10 11 | 	byte	$dc, $e2, $e7, $ea, $ee, $f0, $f2, $f5, $f9, $fe, $03, $08, $0c, $0f, $10, $11
102ec     12 13 13 14 
102f0     14 14 14 14 
102f4     16 18 1C 20 
102f8     23 26 27 26 | 	byte	$12, $13, $13, $14, $14, $14, $14, $14, $16, $18, $1c, $20, $23, $26, $27, $26
102fc     25 23 20 18 
10300     0D FE EE E3 
10304     DC DC E1 EA 
10308     F3 FD 05 0D | 	byte	$25, $23, $20, $18, $0d, $fe, $ee, $e3, $dc, $dc, $e1, $ea, $f3, $fd, $05, $0d
1030c     11 13 12 0F 
10310     09 04 FC F2 
10314     E7 DA CE C8 
10318     C5 C8 CF D8 | 	byte	$11, $13, $12, $0f, $09, $04, $fc, $f2, $e7, $da, $ce, $c8, $c5, $c8, $cf, $d8
1031c     E1 E9 EF F4 
10320     F6 F7 F7 F7 
10324     F9 FD 01 06 
10328     0B 0F 12 14 | 	byte	$e1, $e9, $ef, $f4, $f6, $f7, $f7, $f7, $f9, $fd, $01, $06, $0b, $0f, $12, $14
1032c     15 16 16 16 
10330     14 13 13 14 
10334     17 1B 1F 23 
10338     26 27 27 25 | 	byte	$15, $16, $16, $16, $14, $13, $13, $14, $17, $1b, $1f, $23, $26, $27, $27, $25
1033c     22 1F 1A 11 
10340     05 F7 EB E3 
10344     E0 E3 E9 F2 
10348     FA 02 08 0C | 	byte	$22, $1f, $1a, $11, $05, $f7, $eb, $e3, $e0, $e3, $e9, $f2, $fa, $02, $08, $0c
1034c     0E 0E 0C 08 
10350     04 FD F5 E9 
10354     DD D1 C9 C5 
10358     C7 CD D4 DE | 	byte	$0e, $0e, $0c, $08, $04, $fd, $f5, $e9, $dd, $d1, $c9, $c5, $c7, $cd, $d4, $de
1035c     E7 EE F4 F6 
10360     F6 F6 F6 F9 
10364     FC 00 05 0A 
10368     0F 12 14 15 | 	byte	$e7, $ee, $f4, $f6, $f6, $f6, $f6, $f9, $fc, $00, $05, $0a, $0f, $12, $14, $15
1036c     16 16 15 13 
10370     12 12 14 18 
10374     1C 21 24 27 
10378     28 27 25 21 | 	byte	$16, $16, $15, $13, $12, $12, $14, $18, $1c, $21, $24, $27, $28, $27, $25, $21
1037c     1D 19 12 08 
10380     FB EF E7 E4 
10384     E5 EC F4 FC 
10388     02 07 09 09 | 	byte	$1d, $19, $12, $08, $fb, $ef, $e7, $e4, $e5, $ec, $f4, $fc, $02, $07, $09, $09
1038c     07 04 01 FD 
10390     F9 F2 E8 DD 
10394     D3 CB C8 CA 
10398     CF D8 E1 E8 | 	byte	$07, $04, $01, $fd, $f9, $f2, $e8, $dd, $d3, $cb, $c8, $ca, $cf, $d8, $e1, $e8
1039c     EE F2 F3 F2 
103a0     F2 F2 F5 FA 
103a4     01 07 0D 12 
103a8     15 16 16 15 | 	byte	$ee, $f2, $f3, $f2, $f2, $f2, $f5, $fa, $01, $07, $0d, $12, $15, $16, $16, $15
103ac     13 11 0F 0E 
103b0     0F 13 18 1E 
103b4     24 28 2A 29 
103b8     27 23 1E 1A | 	byte	$13, $11, $0f, $0e, $0f, $13, $18, $1e, $24, $28, $2a, $29, $27, $23, $1e, $1a
103bc     15 10 09 FE 
103c0     F5 EE EA EC 
103c4     F1 F7 FE 03 
103c8     05 05 04 01 | 	byte	$15, $10, $09, $fe, $f5, $ee, $ea, $ec, $f1, $f7, $fe, $03, $05, $05, $04, $01
103cc     FF FC FA F7 
103d0     F1 E7 DE D4 
103d4     CD CA CD D3 
103d8     DC E4 EB F0 | 	byte	$ff, $fc, $fa, $f7, $f1, $e7, $de, $d4, $cd, $ca, $cd, $d3, $dc, $e4, $eb, $f0
103dc     F1 F0 EE ED 
103e0     EF F3 FA 02 
103e4     0B 12 17 18 
103e8     18 15 12 0F | 	byte	$f1, $f0, $ee, $ed, $ef, $f3, $fa, $02, $0b, $12, $17, $18, $18, $15, $12, $0f
103ec     0C 0B 0C 0F 
103f0     15 1C 24 29 
103f4     2D 2C 29 23 
103f8     1D 18 14 12 | 	byte	$0c, $0b, $0c, $0f, $15, $1c, $24, $29, $2d, $2c, $29, $23, $1d, $18, $14, $12
103fc     10 0D 07 FF 
10400     F7 F2 F0 F2 
10404     F6 FB FF 01 
10408     01 00 FE FC | 	byte	$10, $0d, $07, $ff, $f7, $f2, $f0, $f2, $f6, $fb, $ff, $01, $01, $00, $fe, $fc
1040c     FA F9 F6 F0 
10410     E6 DB D0 CA 
10414     C9 CE D7 E2 
10418     EB F1 F2 EF | 	byte	$fa, $f9, $f6, $f0, $e6, $db, $d0, $ca, $c9, $ce, $d7, $e2, $eb, $f1, $f2, $ef
1041c     EC E8 E6 E9 
10420     F1 FB 07 11 
10424     19 1C 1B 16 
10428     11 0B 07 06 | 	byte	$ec, $e8, $e6, $e9, $f1, $fb, $07, $11, $19, $1c, $1b, $16, $11, $0b, $07, $06
1042c     08 0D 14 1D 
10430     25 2B 2E 2D 
10434     28 20 19 14 
10438     11 11 14 17 | 	byte	$08, $0d, $14, $1d, $25, $2b, $2e, $2d, $28, $20, $19, $14, $11, $11, $14, $17
1043c     17 13 0A FE 
10440     F4 EE ED F0 
10444     F6 FC 01 04 
10448     03 01 FD FA | 	byte	$17, $13, $0a, $fe, $f4, $ee, $ed, $f0, $f6, $fc, $01, $04, $03, $01, $fd, $fa
1044c     F7 F2 EA DF 
10450     D5 CC C9 CD 
10454     D5 DF EB F1 
10458     F3 F0 EA E3 | 	byte	$f7, $f2, $ea, $df, $d5, $cc, $c9, $cd, $d5, $df, $eb, $f1, $f3, $f0, $ea, $e3
1045c     E0 E0 E7 F4 
10460     02 10 19 1D 
10464     1B 14 0D 05 
10468     01 01 05 0D | 	byte	$e0, $e0, $e7, $f4, $02, $10, $19, $1d, $1b, $14, $0d, $05, $01, $01, $05, $0d
1046c     15 1E 25 2B 
10470     2C 29 24 1D 
10474     16 12 10 13 
10478     17 1D 20 1E | 	byte	$15, $1e, $25, $2b, $2c, $29, $24, $1d, $16, $12, $10, $13, $17, $1d, $20, $1e
1047c     18 0C FD F1 
10480     E9 E8 ED F7 
10484     00 06 09 07 
10488     01 FB F4 EF | 	byte	$18, $0c, $fd, $f1, $e9, $e8, $ed, $f7, $00, $06, $09, $07, $01, $fb, $f4, $ef
1048c     EA E3 DB D3 
10490     CD CD D2 DA 
10494     E4 ED F0 EF 
10498     EA E3 DE DD | 	byte	$ea, $e3, $db, $d3, $cd, $cd, $d2, $da, $e4, $ed, $f0, $ef, $ea, $e3, $de, $dd
1049c     E3 ED FB 0B 
104a0     16 1C 1A 15 
104a4     0C 04 FF 00 
104a8     05 0D 16 1F | 	byte	$e3, $ed, $fb, $0b, $16, $1c, $1a, $15, $0c, $04, $ff, $00, $05, $0d, $16, $1f
104ac     24 27 28 25 
104b0     21 1C 18 15 
104b4     15 16 1A 1E 
104b8     22 22 1D 15 | 	byte	$24, $27, $28, $25, $21, $1c, $18, $15, $15, $16, $1a, $1e, $22, $22, $1d, $15
104bc     0A FD F1 EC 
104c0     EB F0 F9 02 
104c4     08 09 05 FE 
104c8     F6 F1 EB E6 | 	byte	$0a, $fd, $f1, $ec, $eb, $f0, $f9, $02, $08, $09, $05, $fe, $f6, $f1, $eb, $e6
104cc     E1 DB D4 CF 
104d0     CF D4 DD E6 
104d4     ED EF EC E6 
104d8     E0 DC DE E5 | 	byte	$e1, $db, $d4, $cf, $cf, $d4, $dd, $e6, $ed, $ef, $ec, $e6, $e0, $dc, $de, $e5
104dc     F2 00 0E 18 
104e0     1A 15 0E 05 
104e4     FF FE 02 0A 
104e8     14 1D 22 24 | 	byte	$f2, $00, $0e, $18, $1a, $15, $0e, $05, $ff, $fe, $02, $0a, $14, $1d, $22, $24
104ec     23 21 1E 1B 
104f0     19 18 18 1A 
104f4     1C 1E 20 21 
104f8     1F 1B 12 09 | 	byte	$23, $21, $1e, $1b, $19, $18, $18, $1a, $1c, $1e, $20, $21, $1f, $1b, $12, $09
104fc     00 F8 F2 F0 
10500     F3 F9 00 05 
10504     06 04 FE F7 
10508     F0 E9 E4 DF | 	byte	$00, $f8, $f2, $f0, $f3, $f9, $00, $05, $06, $04, $fe, $f7, $f0, $e9, $e4, $df
1050c     D9 D3 CF D0 
10510     D6 DF E7 ED 
10514     EE E9 E2 DC 
10518     DA DE E9 F7 | 	byte	$d9, $d3, $cf, $d0, $d6, $df, $e7, $ed, $ee, $e9, $e2, $dc, $da, $de, $e9, $f7
1051c     07 13 17 15 
10520     0E 05 FE FC 
10524     00 08 13 1C 
10528     21 22 20 1D | 	byte	$07, $13, $17, $15, $0e, $05, $fe, $fc, $00, $08, $13, $1c, $21, $22, $20, $1d
1052c     19 19 1A 1B 
10530     1D 1F 1F 1E 
10534     1E 1D 1C 1B 
10538     18 13 0D 07 | 	byte	$19, $19, $1a, $1b, $1d, $1f, $1f, $1e, $1e, $1d, $1c, $1b, $18, $13, $0d, $07
1053c     01 F9 F4 F3 
10540     F6 FB 00 03 
10544     03 FF F8 F0 
10548     E6 E0 DB D6 | 	byte	$01, $f9, $f4, $f3, $f6, $fb, $00, $03, $03, $ff, $f8, $f0, $e6, $e0, $db, $d6
1054c     D2 D0 D3 DA 
10550     E1 E8 EC EA 
10554     E4 DE D9 DB 
10558     E2 F0 FD 0A | 	byte	$d2, $d0, $d3, $da, $e1, $e8, $ec, $ea, $e4, $de, $d9, $db, $e2, $f0, $fd, $0a
1055c     12 12 0D 05 
10560     FF FC FF 06 
10564     10 18 1D 1E 
10568     1B 18 16 16 | 	byte	$12, $12, $0d, $05, $ff, $fc, $ff, $06, $10, $18, $1d, $1e, $1b, $18, $16, $16
1056c     1A 1E 21 22 
10570     20 1D 1A 18 
10574     19 1B 1D 1D 
10578     18 11 0A 04 | 	byte	$1a, $1e, $21, $22, $20, $1d, $1a, $18, $19, $1b, $1d, $1d, $18, $11, $0a, $04
1057c     FD F7 F4 F5 
10580     F9 FF 03 03 
10584     00 F9 EF E3 
10588     DC D8 D6 D4 | 	byte	$fd, $f7, $f4, $f5, $f9, $ff, $03, $03, $00, $f9, $ef, $e3, $dc, $d8, $d6, $d4
1058c     D4 D6 DC E2 
10590     E7 E9 E6 E1 
10594     DC DB DF E8 
10598     F4 00 08 0C | 	byte	$d4, $d6, $dc, $e2, $e7, $e9, $e6, $e1, $dc, $db, $df, $e8, $f4, $00, $08, $0c
1059c     0C 07 01 FE 
105a0     00 06 0D 14 
105a4     18 19 18 17 
105a8     15 15 19 1E | 	byte	$0c, $07, $01, $fe, $00, $06, $0d, $14, $18, $19, $18, $17, $15, $15, $19, $1e
105ac     22 23 20 1D 
105b0     19 17 18 1A 
105b4     1D 21 21 1A 
105b8     0F 07 04 02 | 	byte	$22, $23, $20, $1d, $19, $17, $18, $1a, $1d, $21, $21, $1a, $0f, $07, $04, $02
105bc     FE FA F7 F8 
105c0     FC FF 00 FF 
105c4     F9 F0 E2 D9 
105c8     D7 D6 D5 D5 | 	byte	$fe, $fa, $f7, $f8, $fc, $ff, $00, $ff, $f9, $f0, $e2, $d9, $d7, $d6, $d5, $d5
105cc     D8 DD E2 E5 
105d0     E6 E3 DF DD 
105d4     DD E3 ED F8 
105d8     00 05 06 05 | 	byte	$d8, $dd, $e2, $e5, $e6, $e3, $df, $dd, $dd, $e3, $ed, $f8, $00, $05, $06, $05
105dc     03 02 02 05 
105e0     0B 10 13 14 
105e4     15 16 17 18 
105e8     1A 1D 20 22 | 	byte	$03, $02, $02, $05, $0b, $10, $13, $14, $15, $16, $17, $18, $1a, $1d, $20, $22
105ec     20 1D 19 17 
105f0     19 1B 1D 1F 
105f4     20 1F 18 0E 
105f8     06 06 09 07 | 	byte	$20, $1d, $19, $17, $19, $1b, $1d, $1f, $20, $1f, $18, $0e, $06, $06, $09, $07
105fc     FF F7 F4 F6 
10600     FC 00 01 FB 
10604     EF DF D6 D6 
10608     D9 D9 D7 D7 | 	byte	$ff, $f7, $f4, $f6, $fc, $00, $01, $fb, $ef, $df, $d6, $d6, $d9, $d9, $d7, $d7
1060c     DB E0 E4 E4 
10610     E2 E0 DE E1 
10614     E7 F0 F7 FC 
10618     FF 01 03 04 | 	byte	$db, $e0, $e4, $e4, $e2, $e0, $de, $e1, $e7, $f0, $f7, $fc, $ff, $01, $03, $04
1061c     04 05 07 0A 
10620     0D 0F 11 13 
10624     16 19 19 19 
10628     1B 1D 1F 1F | 	byte	$04, $05, $07, $0a, $0d, $0f, $11, $13, $16, $19, $19, $19, $1b, $1d, $1f, $1f
1062c     1C 19 18 1A 
10630     1C 1D 1E 20 
10634     20 1B 0F 06 
10638     05 0C 0F 06 | 	byte	$1c, $19, $18, $1a, $1c, $1d, $1e, $20, $20, $1b, $0f, $06, $05, $0c, $0f, $06
1063c     F9 F0 F2 F9 
10640     00 01 F8 E9 
10644     DC D6 DA DF 
10648     DB D5 D1 D5 | 	byte	$f9, $f0, $f2, $f9, $00, $01, $f8, $e9, $dc, $d6, $da, $df, $db, $d5, $d1, $d5
1064c     DE E5 E6 E2 
10650     DE DD E2 EA 
10654     F3 F7 F7 F9 
10658     FD 03 07 07 | 	byte	$de, $e5, $e6, $e2, $de, $dd, $e2, $ea, $f3, $f7, $f7, $f9, $fd, $03, $07, $07
1065c     07 06 08 0C 
10660     0F 12 16 19 
10664     1A 18 17 19 
10668     1D 21 20 1D | 	byte	$07, $06, $08, $0c, $0f, $12, $16, $19, $1a, $18, $17, $19, $1d, $21, $20, $1d
1066c     1A 18 19 1C 
10670     1D 1F 21 21 
10674     1B 0D 03 04 
10678     0E 18 11 FD | 	byte	$1a, $18, $19, $1c, $1d, $1f, $21, $21, $1b, $0d, $03, $04, $0e, $18, $11, $fd
1067c     EB E9 F4 00 
10680     04 F9 E7 D8 
10684     D6 DF E6 DF 
10688     D1 CB D0 DE | 	byte	$eb, $e9, $f4, $00, $04, $f9, $e7, $d8, $d6, $df, $e6, $df, $d1, $cb, $d0, $de
1068c     E7 E8 E2 DD 
10690     DE E5 EE F4 
10694     F5 F2 F5 FD 
10698     06 0A 08 05 | 	byte	$e7, $e8, $e2, $dd, $de, $e5, $ee, $f4, $f5, $f2, $f5, $fd, $06, $0a, $08, $05
1069c     03 06 0C 10 
106a0     13 16 17 18 
106a4     17 16 18 1E 
106a8     21 20 1B 19 | 	byte	$03, $06, $0c, $10, $13, $16, $17, $18, $17, $16, $18, $1e, $21, $20, $1b, $19
106ac     18 1A 1C 1D 
106b0     1E 20 22 1D 
106b4     10 02 03 0F 
106b8     1C 19 02 EB | 	byte	$18, $1a, $1c, $1d, $1e, $20, $22, $1d, $10, $02, $03, $0f, $1c, $19, $02, $eb
106bc     E5 F0 01 05 
106c0     F6 E1 D5 DB 
106c4     EB EF DD C8 
106c8     C2 CF E4 EE | 	byte	$e5, $f0, $01, $05, $f6, $e1, $d5, $db, $eb, $ef, $dd, $c8, $c2, $cf, $e4, $ee
106cc     E8 DC D6 DD 
106d0     EB F5 F6 EF 
106d4     EA F0 FE 0C 
106d8     0E 06 FF FF | 	byte	$e8, $dc, $d6, $dd, $eb, $f5, $f6, $ef, $ea, $f0, $fe, $0c, $0e, $06, $ff, $ff
106dc     07 0F 12 13 
106e0     13 15 17 18 
106e4     17 18 1D 20 
106e8     1F 1C 19 19 | 	byte	$07, $0f, $12, $13, $13, $15, $17, $18, $17, $18, $1d, $20, $1f, $1c, $19, $19
106ec     1B 1D 1D 1E 
106f0     22 23 1F 10 
106f4     02 02 0F 1E 
106f8     1E 09 EF E4 | 	byte	$1b, $1d, $1d, $1e, $22, $23, $1f, $10, $02, $02, $0f, $1e, $1e, $09, $ef, $e4
106fc     F0 01 03 F0 
10700     D8 D3 E4 F8 
10704     F4 D6 B9 BA 
10708     D6 EF F2 E0 | 	byte	$f0, $01, $03, $f0, $d8, $d3, $e4, $f8, $f4, $d6, $b9, $ba, $d6, $ef, $f2, $e0
1070c     CF D1 E6 F8 
10710     FA EE E2 E4 
10714     F3 08 10 09 
10718     FD FA 02 0E | 	byte	$cf, $d1, $e6, $f8, $fa, $ee, $e2, $e4, $f3, $08, $10, $09, $fd, $fa, $02, $0e
1071c     13 10 0D 10 
10720     16 1A 19 15 
10724     15 1B 21 20 
10728     1B 17 19 1C | 	byte	$13, $10, $0d, $10, $16, $1a, $19, $15, $15, $1b, $21, $20, $1b, $17, $19, $1c
1072c     1D 1C 1D 21 
10730     23 1E 11 01 
10734     02 11 1F 1E 
10738     0D F4 E7 F1 | 	byte	$1d, $1c, $1d, $21, $23, $1e, $11, $01, $02, $11, $1f, $1e, $0d, $f4, $e7, $f1
1073c     00 FE E6 D3 
10740     D8 F1 01 F4 
10744     D0 B2 BB DF 
10748     F6 ED D4 C9 | 	byte	$00, $fe, $e6, $d3, $d8, $f1, $01, $f4, $d0, $b2, $bb, $df, $f6, $ed, $d4, $c9
1074c     D7 F4 01 F6 
10750     E0 DB E9 FE 
10754     0C 0A 00 F9 
10758     FF 0A 12 0F | 	byte	$d7, $f4, $01, $f6, $e0, $db, $e9, $fe, $0c, $0a, $00, $f9, $ff, $0a, $12, $0f
1075c     09 0A 13 1A 
10760     1A 15 11 14 
10764     1E 23 20 19 
10768     15 19 1E 1F | 	byte	$09, $0a, $13, $1a, $1a, $15, $11, $14, $1e, $23, $20, $19, $15, $19, $1e, $1f
1076c     1C 1D 21 23 
10770     1F 11 02 02 
10774     12 1F 1C 0F 
10778     FF F2 F0 F6 | 	byte	$1c, $1d, $21, $23, $1f, $11, $02, $02, $12, $1f, $1c, $0f, $ff, $f2, $f0, $f6
1077c     F2 E2 D9 E2 
10780     F3 FB F1 D4 
10784     B8 C0 DC EE 
10788     E5 D3 CE DC | 	byte	$f2, $e2, $d9, $e2, $f3, $fb, $f1, $d4, $b8, $c0, $dc, $ee, $e5, $d3, $ce, $dc
1078c     F5 FE F2 DF 
10790     DC EB FE 08 
10794     05 FD FC 02 
10798     0B 0E 0B 08 | 	byte	$f5, $fe, $f2, $df, $dc, $eb, $fe, $08, $05, $fd, $fc, $02, $0b, $0e, $0b, $08
1079c     0C 15 1A 18 
107a0     13 11 16 1E 
107a4     23 20 1A 17 
107a8     19 1E 1F 1D | 	byte	$0c, $15, $1a, $18, $13, $11, $16, $1e, $23, $20, $1a, $17, $19, $1e, $1f, $1d
107ac     1D 20 21 1E 
107b0     14 06 02 0D 
107b4     1C 1E 13 08 
107b8     FE F4 EE E5 | 	byte	$1d, $20, $21, $1e, $14, $06, $02, $0d, $1c, $1e, $13, $08, $fe, $f4, $ee, $e5
107bc     DD E0 EB F4 
107c0     F4 EC DC C6 
107c4     C2 D2 E3 E4 
107c8     DB D6 DD EC | 	byte	$dd, $e0, $eb, $f4, $f4, $ec, $dc, $c6, $c2, $d2, $e3, $e4, $db, $d6, $dd, $ec
107cc     F7 F4 E6 DF 
107d0     E9 F8 03 06 
107d4     02 FF 01 07 
107d8     0B 0C 0C 0E | 	byte	$f7, $f4, $e6, $df, $e9, $f8, $03, $06, $02, $ff, $01, $07, $0b, $0c, $0c, $0e
107dc     12 15 15 13 
107e0     13 15 1A 1F 
107e4     1F 1C 18 18 
107e8     1A 1D 1F 20 | 	byte	$12, $15, $15, $13, $13, $15, $1a, $1f, $1f, $1c, $18, $18, $1a, $1d, $1f, $20
107ec     20 1E 1D 18 
107f0     0B 03 08 16 
107f4     1D 18 0E 07 
107f8     FC EE DD D5 | 	byte	$20, $1e, $1d, $18, $0b, $03, $08, $16, $1d, $18, $0e, $07, $fc, $ee, $dd, $d5
107fc     DD EE F9 F5 
10800     E9 DD CE C7 
10804     CD D8 DE DD 
10808     DC E0 E9 F0 | 	byte	$dd, $ee, $f9, $f5, $e9, $dd, $ce, $c7, $cd, $d8, $de, $dd, $dc, $e0, $e9, $f0
1080c     F1 EA E5 E6 
10810     EF FC 04 05 
10814     03 01 03 07 
10818     0B 0F 12 13 | 	byte	$f1, $ea, $e5, $e6, $ef, $fc, $04, $05, $03, $01, $03, $07, $0b, $0f, $12, $13
1081c     12 12 13 14 
10820     16 1A 1E 1F 
10824     1D 1B 19 19 
10828     1C 20 22 21 | 	byte	$12, $12, $13, $14, $16, $1a, $1e, $1f, $1d, $1b, $19, $19, $1c, $20, $22, $21
1082c     1F 1C 1A 11 
10830     07 05 0F 19 
10834     1C 16 0E 04 
10838     F2 DE D0 D4 | 	byte	$1f, $1c, $1a, $11, $07, $05, $0f, $19, $1c, $16, $0e, $04, $f2, $de, $d0, $d4
1083c     E7 F9 FD F4 
10840     E2 D0 C5 C7 
10844     D1 DB E0 E2 
10848     E4 E7 EA EB | 	byte	$e7, $f9, $fd, $f4, $e2, $d0, $c5, $c7, $d1, $db, $e0, $e2, $e4, $e7, $ea, $eb
1084c     EB EA EA EE 
10850     F5 FD 01 05 
10854     07 07 06 06 
10858     09 10 14 15 | 	byte	$eb, $ea, $ea, $ee, $f5, $fd, $01, $05, $07, $07, $06, $06, $09, $10, $14, $15
1085c     14 13 11 12 
10860     15 1B 20 21 
10864     1F 1B 16 16 
10868     1B 22 25 22 | 	byte	$14, $13, $11, $12, $15, $1b, $20, $21, $1f, $1b, $16, $16, $1b, $22, $25, $22
1086c     1E 19 12 08 
10870     04 0A 14 1C 
10874     1D 17 0C FB 
10878     E3 D1 CE D9 | 	byte	$1e, $19, $12, $08, $04, $0a, $14, $1c, $1d, $17, $0c, $fb, $e3, $d1, $ce, $d9
1087c     EC FB FE F4 
10880     E1 CB C1 C3 
10884     CB D9 E6 EF 
10888     F3 F0 E8 E1 | 	byte	$ec, $fb, $fe, $f4, $e1, $cb, $c1, $c3, $cb, $d9, $e6, $ef, $f3, $f0, $e8, $e1
1088c     E0 E4 ED F8 
10890     01 05 04 01 
10894     01 03 07 0D 
10898     13 15 13 11 | 	byte	$e0, $e4, $ed, $f8, $01, $05, $04, $01, $01, $03, $07, $0d, $13, $15, $13, $11
1089c     0F 10 13 17 
108a0     1B 1E 1F 1E 
108a4     1C 19 19 1B 
108a8     1F 21 21 1F | 	byte	$0f, $10, $13, $17, $1b, $1e, $1f, $1e, $1c, $19, $19, $1b, $1f, $21, $21, $1f
108ac     1D 18 10 07 
108b0     04 08 12 1A 
108b4     1E 1A 0A F3 
108b8     D9 C9 C9 D8 | 	byte	$1d, $18, $10, $07, $04, $08, $12, $1a, $1e, $1a, $0a, $f3, $d9, $c9, $c9, $d8
108bc     EC FE 03 F7 
108c0     E0 CA BB BA 
108c4     C3 D7 EA FA 
108c8     FE F7 EB DF | 	byte	$ec, $fe, $03, $f7, $e0, $ca, $bb, $ba, $c3, $d7, $ea, $fa, $fe, $f7, $eb, $df
108cc     D9 DC E6 F6 
108d0     06 0E 10 0B 
108d4     04 FF FF 06 
108d8     0F 16 19 18 | 	byte	$d9, $dc, $e6, $f6, $06, $0e, $10, $0b, $04, $ff, $ff, $06, $0f, $16, $19, $18
108dc     15 11 0F 11 
108e0     16 1C 22 24 
108e4     21 1D 1A 19 
108e8     1A 1C 1E 1E | 	byte	$15, $11, $0f, $11, $16, $1c, $22, $24, $21, $1d, $1a, $19, $1a, $1c, $1e, $1e
108ec     1D 18 0E 06 
108f0     03 07 0F 18 
108f4     1B 15 05 EF 
108f8     D9 CC CA D5 | 	byte	$1d, $18, $0e, $06, $03, $07, $0f, $18, $1b, $15, $05, $ef, $d9, $cc, $ca, $d5
108fc     E9 F9 01 F9 
10900     E6 D2 BF B8 
10904     BE D0 E8 FC 
10908     07 04 F7 E8 | 	byte	$e9, $f9, $01, $f9, $e6, $d2, $bf, $b8, $be, $d0, $e8, $fc, $07, $04, $f7, $e8
1090c     DA D6 DD EF 
10910     03 11 19 18 
10914     10 08 03 02 
10918     05 0B 12 17 | 	byte	$da, $d6, $dd, $ef, $03, $11, $19, $18, $10, $08, $03, $02, $05, $0b, $12, $17
1091c     1A 1A 19 18 
10920     18 19 1B 1D 
10924     1E 1F 1F 1F 
10928     1E 1C 1B 1A | 	byte	$1a, $1a, $19, $18, $18, $19, $1b, $1d, $1e, $1f, $1f, $1f, $1e, $1c, $1b, $1a
1092c     18 13 0C 08 
10930     06 09 0F 15 
10934     15 0D FF ED 
10938     DB D0 CD D3 | 	byte	$18, $13, $0c, $08, $06, $09, $0f, $15, $15, $0d, $ff, $ed, $db, $d0, $cd, $d3
1093c     E1 EF F7 F4 
10940     E9 D8 CA C0 
10944     C0 CC DF F1 
10948     00 05 01 F5 | 	byte	$e1, $ef, $f7, $f4, $e9, $d8, $ca, $c0, $c0, $cc, $df, $f1, $00, $05, $01, $f5
1094c     E7 DE DE E7 
10950     F5 06 14 1B 
10954     1C 18 11 0A 
10958     05 03 06 0C | 	byte	$e7, $de, $de, $e7, $f5, $06, $14, $1b, $1c, $18, $11, $0a, $05, $03, $06, $0c
1095c     12 19 1D 20 
10960     21 21 20 1E 
10964     1D 1D 1D 1C 
10968     1C 1B 1A 19 | 	byte	$12, $19, $1d, $20, $21, $21, $20, $1e, $1d, $1d, $1d, $1c, $1c, $1b, $1a, $19
1096c     17 12 0C 08 
10970     07 0A 0D 0E 
10974     0B 04 FB EE 
10978     E1 D8 D3 D5 | 	byte	$17, $12, $0c, $08, $07, $0a, $0d, $0e, $0b, $04, $fb, $ee, $e1, $d8, $d3, $d5
1097c     DD E4 E9 E9 
10980     E4 DB D3 CE 
10984     CE D3 DE EB 
10988     F6 FD FD F9 | 	byte	$dd, $e4, $e9, $e9, $e4, $db, $d3, $ce, $ce, $d3, $de, $eb, $f6, $fd, $fd, $f9
1098c     F2 EB E9 ED 
10990     F5 FF 0B 14 
10994     1A 1B 19 13 
10998     0E 09 06 06 | 	byte	$f2, $eb, $e9, $ed, $f5, $ff, $0b, $14, $1a, $1b, $19, $13, $0e, $09, $06, $06
1099c     0A 10 18 1E 
109a0     24 26 27 25 
109a4     21 1E 1B 18 
109a8     16 15 15 15 | 	byte	$0a, $10, $18, $1e, $24, $26, $27, $25, $21, $1e, $1b, $18, $16, $15, $15, $15
109ac     14 11 0E 0C 
109b0     0C 0B 0B 07 
109b4     02 FC F5 ED 
109b8     E4 DD D9 DA | 	byte	$14, $11, $0e, $0c, $0c, $0b, $0b, $07, $02, $fc, $f5, $ed, $e4, $dd, $d9, $da
109bc     DC DE DF DE 
109c0     DB D9 D7 D7 
109c4     DA DF E5 EC 
109c8     F1 F5 F5 F4 | 	byte	$dc, $de, $df, $de, $db, $d9, $d7, $d7, $da, $df, $e5, $ec, $f1, $f5, $f5, $f4
109cc     F1 F0 F1 F5 
109d0     FA 02 0A 12 
109d4     17 1A 19 16 
109d8     11 0D 0A 09 | 	byte	$f1, $f0, $f1, $f5, $fa, $02, $0a, $12, $17, $1a, $19, $16, $11, $0d, $0a, $09
109dc     0A 0E 15 1C 
109e0     22 27 29 2A 
109e4     28 24 1F 19 
109e8     15 12 10 0F | 	byte	$0a, $0e, $15, $1c, $22, $27, $29, $2a, $28, $24, $1f, $19, $15, $12, $10, $0f
109ec     0E 0D 0C 0D 
109f0     0D 0C 09 05 
109f4     FF FA F3 EC 
109f8     E6 E0 DD DB | 	byte	$0e, $0d, $0c, $0d, $0d, $0c, $09, $05, $ff, $fa, $f3, $ec, $e6, $e0, $dd, $db
109fc     D9 D8 D6 D5 
10a00     D5 D6 D9 DD 
10a04     E2 E8 EC F1 
10a08     F3 F4 F3 F1 | 	byte	$d9, $d8, $d6, $d5, $d5, $d6, $d9, $dd, $e2, $e8, $ec, $f1, $f3, $f4, $f3, $f1
10a0c     F0 F0 F3 F7 
10a10     FD 05 0C 13 
10a14     18 1A 1A 17 
10a18     13 0F 0C 0A | 	byte	$f0, $f0, $f3, $f7, $fd, $05, $0c, $13, $18, $1a, $1a, $17, $13, $0f, $0c, $0a
10a1c     0B 0E 12 19 
10a20     1E 24 28 2A 
10a24     2A 27 23 1D 
10a28     18 13 0F 0B | 	byte	$0b, $0e, $12, $19, $1e, $24, $28, $2a, $2a, $27, $23, $1d, $18, $13, $0f, $0b
10a2c     07 06 06 06 
10a30     07 06 05 02 
10a34     00 FD F8 F2 
10a38     EC E7 E2 DC | 	byte	$07, $06, $06, $06, $07, $06, $05, $02, $00, $fd, $f8, $f2, $ec, $e7, $e2, $dc
10a3c     D7 D2 CE CC 
10a40     CC CF D5 DC 
10a44     E4 EC F3 F8 
10a48     FB FB F9 F7 | 	byte	$d7, $d2, $ce, $cc, $cc, $cf, $d5, $dc, $e4, $ec, $f3, $f8, $fb, $fb, $f9, $f7
10a4c     F5 F3 F4 F6 
10a50     FA 00 06 0D 
10a54     13 17 19 19 
10a58     18 16 14 12 | 	byte	$f5, $f3, $f4, $f6, $fa, $00, $06, $0d, $13, $17, $19, $19, $18, $16, $14, $12
10a5c     11 12 14 16 
10a60     1A 1E 21 24 
10a64     25 25 23 21 
10a68     1D 19 15 0F | 	byte	$11, $12, $14, $16, $1a, $1e, $21, $24, $25, $25, $23, $21, $1d, $19, $15, $0f
10a6c     0B 07 04 02 
10a70     FF FC FA F8 
10a74     F8 F7 F7 F5 
10a78     F3 F0 EC E6 | 	byte	$0b, $07, $04, $02, $ff, $fc, $fa, $f8, $f8, $f7, $f7, $f5, $f3, $f0, $ec, $e6
10a7c     DF D8 D0 CB 
10a80     C8 C9 CC D1 
10a84     D8 E0 E8 F0 
10a88     F7 FC FF 02 | 	byte	$df, $d8, $d0, $cb, $c8, $c9, $cc, $d1, $d8, $e0, $e8, $f0, $f7, $fc, $ff, $02
10a8c     03 03 04 05 
10a90     06 07 08 0A 
10a94     0A 0B 0C 0C 
10a98     0D 0D 0F 11 | 	byte	$03, $03, $04, $05, $06, $07, $08, $0a, $0a, $0b, $0c, $0c, $0d, $0d, $0f, $11
10a9c     14 17 1B 20 
10aa0     23 26 28 28 
10aa4     27 25 22 1D 
10aa8     19 14 0F 0B | 	byte	$14, $17, $1b, $20, $23, $26, $28, $28, $27, $25, $22, $1d, $19, $14, $0f, $0b
10aac     07 03 00 FE 
10ab0     FB F9 F7 F7 
10ab4     F7 F7 F7 F6 
10ab8     F5 F2 EE E8 | 	byte	$07, $03, $00, $fe, $fb, $f9, $f7, $f7, $f7, $f7, $f7, $f6, $f5, $f2, $ee, $e8
10abc     E2 DB D5 CF 
10ac0     CC CB CC CF 
10ac4     D3 DA E0 E8 
10ac8     EE F4 FA FE | 	byte	$e2, $db, $d5, $cf, $cc, $cb, $cc, $cf, $d3, $da, $e0, $e8, $ee, $f4, $fa, $fe
10acc     04 08 0C 0F 
10ad0     12 14 15 15 
10ad4     14 12 10 0D 
10ad8     0B 08 07 07 | 	byte	$04, $08, $0c, $0f, $12, $14, $15, $15, $14, $12, $10, $0d, $0b, $08, $07, $07
10adc     09 0C 10 15 
10ae0     1B 21 26 2A 
10ae4     2C 2D 2D 2B 
10ae8     27 22 1C 15 | 	byte	$09, $0c, $10, $15, $1b, $21, $26, $2a, $2c, $2d, $2d, $2b, $27, $22, $1c, $15
10aec     0E 06 FE F7 
10af0     F0 EC E8 E7 
10af4     E8 EA EC EF 
10af8     F1 F3 F2 F0 | 	byte	$0e, $06, $fe, $f7, $f0, $ec, $e8, $e7, $e8, $ea, $ec, $ef, $f1, $f3, $f2, $f0
10afc     ED E8 E3 DE 
10b00     DA D7 D4 D3 
10b04     D3 D5 D7 DB 
10b08     DF E4 E9 EF | 	byte	$ed, $e8, $e3, $de, $da, $d7, $d4, $d3, $d3, $d5, $d7, $db, $df, $e4, $e9, $ef
10b0c     F6 FE 06 0D 
10b10     15 1B 1F 22 
10b14     24 24 21 1E 
10b18     1A 16 11 0E | 	byte	$f6, $fe, $06, $0d, $15, $1b, $1f, $22, $24, $24, $21, $1e, $1a, $16, $11, $0e
10b1c     0B 09 09 0A 
10b20     0B 0F 13 17 
10b24     1A 1E 21 24 
10b28     25 26 25 23 | 	byte	$0b, $09, $09, $0a, $0b, $0f, $13, $17, $1a, $1e, $21, $24, $25, $26, $25, $23
10b2c     1F 19 12 0A 
10b30     02 FA F2 EC 
10b34     E7 E3 E0 DF 
10b38     DE DD DC DC | 	byte	$1f, $19, $12, $0a, $02, $fa, $f2, $ec, $e7, $e3, $e0, $df, $de, $dd, $dc, $dc
10b3c     DB DB DB DC 
10b40     DD DE E1 E3 
10b44     E5 E7 E9 EA 
10b48     EB EC EE F0 | 	byte	$db, $db, $db, $dc, $dd, $de, $e1, $e3, $e5, $e7, $e9, $ea, $eb, $ec, $ee, $f0
10b4c     F3 F6 FA FF 
10b50     04 09 0E 14 
10b54     18 1C 1F 21 
10b58     22 22 22 21 | 	byte	$f3, $f6, $fa, $ff, $04, $09, $0e, $14, $18, $1c, $1f, $21, $22, $22, $22, $21
10b5c     20 1E 1D 1B 
10b60     19 17 15 13 
10b64     11 10 0F 0F 
10b68     0F 0E 0E 0D | 	byte	$20, $1e, $1d, $1b, $19, $17, $15, $13, $11, $10, $0f, $0f, $0f, $0e, $0e, $0d
10b6c     0D 0C 0A 08 
10b70     05 03 01 FF 
10b74     FC FA F6 F3 
10b78     F0 EB E6 E1 | 	byte	$0d, $0c, $0a, $08, $05, $03, $01, $ff, $fc, $fa, $f6, $f3, $f0, $eb, $e6, $e1
10b7c     DC D7 D3 D0 
10b80     CE CD CE D0 
10b84     D2 D6 DA DF 
10b88     E3 E8 EE F4 | 	byte	$dc, $d7, $d3, $d0, $ce, $cd, $ce, $d0, $d2, $d6, $da, $df, $e3, $e8, $ee, $f4
10b8c     F9 FF 05 0B 
10b90     10 15 18 1B 
10b94     1E 1F 21 21 
10b98     20 20 20 1F | 	byte	$f9, $ff, $05, $0b, $10, $15, $18, $1b, $1e, $1f, $21, $21, $20, $20, $20, $1f
10b9c     1E 1E 1C 1C 
10ba0     1B 1A 19 17 
10ba4     16 15 13 12 
10ba8     10 0E 0D 0A | 	byte	$1e, $1e, $1c, $1c, $1b, $1a, $19, $17, $16, $15, $13, $12, $10, $0e, $0d, $0a
10bac     07 05 02 00 
10bb0     FD FB F9 F8 
10bb4     F7 F6 F5 F4 
10bb8     F2 F0 ED E9 | 	byte	$07, $05, $02, $00, $fd, $fb, $f9, $f8, $f7, $f6, $f5, $f4, $f2, $f0, $ed, $e9
10bbc     E6 E3 E0 DD 
10bc0     DB D9 D7 D7 
10bc4     D7 D7 D8 DA 
10bc8     DC E0 E3 E8 | 	byte	$e6, $e3, $e0, $dd, $db, $d9, $d7, $d7, $d7, $d7, $d8, $da, $dc, $e0, $e3, $e8
10bcc     ED F3 F9 FE 
10bd0     05 0B 11 16 
10bd4     1B 1F 23 26 
10bd8     28 2A 2B 2C | 	byte	$ed, $f3, $f9, $fe, $05, $0b, $11, $16, $1b, $1f, $23, $26, $28, $2a, $2b, $2c
10bdc     2C 2C 2B 29 
10be0     27 25 22 1F 
10be4     1B 18 14 11 
10be8     0D 0A 06 02 | 	byte	$2c, $2c, $2b, $29, $27, $25, $22, $1f, $1b, $18, $14, $11, $0d, $0a, $06, $02
10bec     FE FA F7 F4 
10bf0     F2 F0 EF EF 
10bf4     EF EE EE ED 
10bf8     ED EC EB EA | 	byte	$fe, $fa, $f7, $f4, $f2, $f0, $ef, $ef, $ef, $ee, $ee, $ed, $ed, $ec, $eb, $ea
10bfc     E8 E6 E4 E3 
10c00     E2 E1 E1 E0 
10c04     E0 E0 E1 E2 
10c08     E4 E6 EA ED | 	byte	$e8, $e6, $e4, $e3, $e2, $e1, $e1, $e0, $e0, $e0, $e1, $e2, $e4, $e6, $ea, $ed
10c0c     F1 F5 FA FF 
10c10     04 09 0E 12 
10c14     15 19 1C 1E 
10c18     20 22 24 25 | 	byte	$f1, $f5, $fa, $ff, $04, $09, $0e, $12, $15, $19, $1c, $1e, $20, $22, $24, $25
10c1c     26 27 27 27 
10c20     26 25 24 22 
10c24     20 1E 1C 19 
10c28     15 12 0E 0A | 	byte	$26, $27, $27, $27, $26, $25, $24, $22, $20, $1e, $1c, $19, $15, $12, $0e, $0a
10c2c     05 01 FD F8 
10c30     F5 F1 EF EC 
10c34     EB E9 E7 E6 
10c38     E4 E2 E0 DF | 	byte	$05, $01, $fd, $f8, $f5, $f1, $ef, $ec, $eb, $e9, $e7, $e6, $e4, $e2, $e0, $df
10c3c     DE DC DB DB 
10c40     DB DC DD DE 
10c44     E0 E1 E4 E7 
10c48     EA EE F2 F6 | 	byte	$de, $dc, $db, $db, $db, $dc, $dd, $de, $e0, $e1, $e4, $e7, $ea, $ee, $f2, $f6
10c4c     FB FF 03 07 
10c50     00 00 00 00 
10c54     1A 2B 1C 2F 
10c58     3F 10 D7 CE | 	byte	$fb, $ff, $03, $07, $00, $00, $00, $00, $1a, $2b, $1c, $2f, $3f, $10, $d7, $ce
10c5c     F2 F3 E2 FA 
10c60     09 F6 D7 F1 
10c64     27 2A 22 27 
10c68     34 0C D9 DD | 	byte	$f2, $f3, $e2, $fa, $09, $f6, $d7, $f1, $27, $2a, $22, $27, $34, $0c, $d9, $dd
10c6c     EE EF E0 F3 
10c70     0D F6 DE F0 
10c74     20 2E 24 31 
10c78     2E 05 D8 D9 | 	byte	$ee, $ef, $e0, $f3, $0d, $f6, $de, $f0, $20, $2e, $24, $31, $2e, $05, $d8, $d9
10c7c     F6 F0 E6 F1 
10c80     01 F4 DE FA 
10c84     22 2B 23 27 
10c88     2F 05 DE DA | 	byte	$f6, $f0, $e6, $f1, $01, $f4, $de, $fa, $22, $2b, $23, $27, $2f, $05, $de, $da
10c8c     EE F1 E5 F4 
10c90     00 F0 E1 F6 
10c94     26 30 28 28 
10c98     23 03 DC DE | 	byte	$ee, $f1, $e5, $f4, $00, $f0, $e1, $f6, $26, $30, $28, $28, $23, $03, $dc, $de
10c9c     F1 F2 E6 E9 
10ca0     FE F3 E6 FE 
10ca4     21 34 24 25 
10ca8     25 05 DC D7 | 	byte	$f1, $f2, $e6, $e9, $fe, $f3, $e6, $fe, $21, $34, $24, $25, $25, $05, $dc, $d7
10cac     F2 F5 E5 E9 
10cb0     F8 F6 E4 FB 
10cb4     2A 36 26 1C 
10cb8     22 06 DB D9 | 	byte	$f2, $f5, $e5, $e9, $f8, $f6, $e4, $fb, $2a, $36, $26, $1c, $22, $06, $db, $d9
10cbc     F1 F7 DF E3 
10cc0     FB F5 E7 F9 
10cc4     2D 3C 23 1E 
10cc8     20 05 D9 D7 | 	byte	$f1, $f7, $df, $e3, $fb, $f5, $e7, $f9, $2d, $3c, $23, $1e, $20, $05, $d9, $d7
10ccc     F9 F7 DE DD 
10cd0     FA F7 E5 02 
10cd4     2E 3C 1E 18 
10cd8     24 02 D8 D7 | 	byte	$f9, $f7, $de, $dd, $fa, $f7, $e5, $02, $2e, $3c, $1e, $18, $24, $02, $d8, $d7
10cdc     F8 F7 D6 E0 
10ce0     FD F9 E4 02 
10ce4     39 3B 1E 18 
10ce8     22 05 D2 DB | 	byte	$f8, $f7, $d6, $e0, $fd, $f9, $e4, $02, $39, $3b, $1e, $18, $22, $05, $d2, $db
10cec     FD F3 D3 DD 
10cf0     00 F7 E5 07 
10cf4     3C 3B 15 1A 
10cf8     25 03 D1 DA | 	byte	$fd, $f3, $d3, $dd, $00, $f7, $e5, $07, $3c, $3b, $15, $1a, $25, $03, $d1, $da
10cfc     02 F0 D2 E1 
10d00     00 F6 E2 0A 
10d04     41 3A 15 18 
10d08     26 FA D1 E3 | 	byte	$02, $f0, $d2, $e1, $00, $f6, $e2, $0a, $41, $3a, $15, $18, $26, $fa, $d1, $e3
10d0c     00 ED CC E2 
10d10     02 F3 E6 13 
10d14     44 34 13 1D 
10d18     22 F8 CF E5 | 	byte	$00, $ed, $cc, $e2, $02, $f3, $e6, $13, $44, $34, $13, $1d, $22, $f8, $cf, $e5
10d1c     01 E6 CD E6 
10d20     01 ED E7 1B 
10d24     42 32 12 21 
10d28     22 F4 D3 E8 | 	byte	$01, $e6, $cd, $e6, $01, $ed, $e7, $1b, $42, $32, $12, $21, $22, $f4, $d3, $e8
10d2c     00 E3 CC EB 
10d30     FF EE EB 1F 
10d34     43 2C 16 21 
10d38     20 EF D4 EE | 	byte	$00, $e3, $cc, $eb, $ff, $ee, $eb, $1f, $43, $2c, $16, $21, $20, $ef, $d4, $ee
10d3c     FC DF CE E8 
10d40     FE ED F2 1F 
10d44     42 2A 15 22 
10d48     18 F1 D7 ED | 	byte	$fc, $df, $ce, $e8, $fe, $ed, $f2, $1f, $42, $2a, $15, $22, $18, $f1, $d7, $ed
10d4c     F9 DB D0 EB 
10d50     FB ED F4 27 
10d54     3F 2A 18 21 
10d58     18 EB DB F0 | 	byte	$f9, $db, $d0, $eb, $fb, $ed, $f4, $27, $3f, $2a, $18, $21, $18, $eb, $db, $f0
10d5c     F5 DC D0 E9 
10d60     F8 EF FD 27 
10d64     3E 29 19 20 
10d68     15 ED DC EF | 	byte	$f5, $dc, $d0, $e9, $f8, $ef, $fd, $27, $3e, $29, $19, $20, $15, $ed, $dc, $ef
10d6c     F2 DB D2 E8 
10d70     F8 F0 FF 2A 
10d74     3E 2A 19 1E 
10d78     11 EF DE EE | 	byte	$f2, $db, $d2, $e8, $f8, $f0, $ff, $2a, $3e, $2a, $19, $1e, $11, $ef, $de, $ee
10d7c     F3 D9 D1 E8 
10d80     F8 F4 01 28 
10d84     3D 2A 19 1C 
10d88     13 EE DD EC | 	byte	$f3, $d9, $d1, $e8, $f8, $f4, $01, $28, $3d, $2a, $19, $1c, $13, $ee, $dd, $ec
10d8c     F1 D9 CF E8 
10d90     F9 F6 01 29 
10d94     3E 28 16 1B 
10d98     11 ED DC EB | 	byte	$f1, $d9, $cf, $e8, $f9, $f6, $01, $29, $3e, $28, $16, $1b, $11, $ed, $dc, $eb
10d9c     EF D8 CF E8 
10da0     FB F7 03 2E 
10da4     40 28 15 1A 
10da8     11 EB DC ED | 	byte	$ef, $d8, $cf, $e8, $fb, $f7, $03, $2e, $40, $28, $15, $1a, $11, $eb, $dc, $ed
10dac     F1 D4 CC EA 
10db0     FD F8 03 30 
10db4     41 28 13 1B 
10db8     13 EA DA EE | 	byte	$f1, $d4, $cc, $ea, $fd, $f8, $03, $30, $41, $28, $13, $1b, $13, $ea, $da, $ee
10dbc     F1 D3 CC EA 
10dc0     00 F7 06 33 
10dc4     43 24 12 1E 
10dc8     12 EB DA F1 | 	byte	$f1, $d3, $cc, $ea, $00, $f7, $06, $33, $43, $24, $12, $1e, $12, $eb, $da, $f1
10dcc     F0 CF CC EE 
10dd0     00 F7 09 36 
10dd4     41 22 12 1F 
10dd8     12 E8 DA F2 | 	byte	$f0, $cf, $cc, $ee, $00, $f7, $09, $36, $41, $22, $12, $1f, $12, $e8, $da, $f2
10ddc     EF CB CA F2 
10de0     01 F6 0E 3B 
10de4     40 1F 13 22 
10de8     0F E2 DA F3 | 	byte	$ef, $cb, $ca, $f2, $01, $f6, $0e, $3b, $40, $1f, $13, $22, $0f, $e2, $da, $f3
10dec     E8 C7 CE F3 
10df0     FF F5 0F 3E 
10df4     3F 1A 15 23 
10df8     0D DF DD F4 | 	byte	$e8, $c7, $ce, $f3, $ff, $f5, $0f, $3e, $3f, $1a, $15, $23, $0d, $df, $dd, $f4
10dfc     E5 C5 D0 F6 
10e00     FE F4 13 3F 
10e04     3D 19 17 24 
10e08     09 DF E0 F5 | 	byte	$e5, $c5, $d0, $f6, $fe, $f4, $13, $3f, $3d, $19, $17, $24, $09, $df, $e0, $f5
10e0c     E2 C3 D0 F8 
10e10     FD F5 15 41 
10e14     39 18 18 24 
10e18     09 DE E1 F3 | 	byte	$e2, $c3, $d0, $f8, $fd, $f5, $15, $41, $39, $18, $18, $24, $09, $de, $e1, $f3
10e1c     DD C2 D5 F8 
10e20     FB F8 19 42 
10e24     37 17 1C 24 
10e28     03 DF E5 F3 | 	byte	$dd, $c2, $d5, $f8, $fb, $f8, $19, $42, $37, $17, $1c, $24, $03, $df, $e5, $f3
10e2c     DD C3 D6 FB 
10e30     FB FA 1D 42 
10e34     35 17 1D 23 
10e38     02 DE E6 F1 | 	byte	$dd, $c3, $d6, $fb, $fb, $fa, $1d, $42, $35, $17, $1d, $23, $02, $de, $e6, $f1
10e3c     D9 C2 DB F9 
10e40     FA FA 22 42 
10e44     34 18 20 23 
10e48     FE DF E6 EF | 	byte	$d9, $c2, $db, $f9, $fa, $fa, $22, $42, $34, $18, $20, $23, $fe, $df, $e6, $ef
10e4c     D6 C2 D9 FB 
10e50     FA FD 23 41 
10e54     30 18 1F 21 
10e58     01 DF E7 EE | 	byte	$d6, $c2, $d9, $fb, $fa, $fd, $23, $41, $30, $18, $1f, $21, $01, $df, $e7, $ee
10e5c     D4 C3 DB FB 
10e60     FA 00 23 41 
10e64     2E 19 20 1F 
10e68     FD DF E6 EB | 	byte	$d4, $c3, $db, $fb, $fa, $00, $23, $41, $2e, $19, $20, $1f, $fd, $df, $e6, $eb
10e6c     D3 C2 DE FA 
10e70     FB 03 27 41 
10e74     2E 19 21 1F 
10e78     F9 DE E6 E9 | 	byte	$d3, $c2, $de, $fa, $fb, $03, $27, $41, $2e, $19, $21, $1f, $f9, $de, $e6, $e9
10e7c     D0 C2 DE FC 
10e80     FB 03 2C 42 
10e84     2E 1A 23 1F 
10e88     FB DD E6 E7 | 	byte	$d0, $c2, $de, $fc, $fb, $03, $2c, $42, $2e, $1a, $23, $1f, $fb, $dd, $e6, $e7
10e8c     CB C1 DF FC 
10e90     FB 06 2F 43 
10e94     2D 1B 24 1F 
10e98     F7 DC E4 E4 | 	byte	$cb, $c1, $df, $fc, $fb, $06, $2f, $43, $2d, $1b, $24, $1f, $f7, $dc, $e4, $e4
10e9c     C9 C1 E3 FC 
10ea0     FC 0A 2F 43 
10ea4     2E 1C 25 1D 
10ea8     F5 DC E4 E1 | 	byte	$c9, $c1, $e3, $fc, $fc, $0a, $2f, $43, $2e, $1c, $25, $1d, $f5, $dc, $e4, $e1
10eac     C7 C2 E5 FD 
10eb0     FD 0B 34 43 
10eb4     2C 1D 26 1B 
10eb8     F3 DB E2 DF | 	byte	$c7, $c2, $e5, $fd, $fd, $0b, $34, $43, $2c, $1d, $26, $1b, $f3, $db, $e2, $df
10ebc     C6 C3 E4 FE 
10ec0     FE 0D 36 43 
10ec4     2C 1D 25 18 
10ec8     F1 DA E2 DD | 	byte	$c6, $c3, $e4, $fe, $fe, $0d, $36, $43, $2c, $1d, $25, $18, $f1, $da, $e2, $dd
10ecc     C2 C2 E6 FF 
10ed0     FF 11 35 43 
10ed4     2C 1D 24 16 
10ed8     EF D8 E0 DB | 	byte	$c2, $c2, $e6, $ff, $ff, $11, $35, $43, $2c, $1d, $24, $16, $ef, $d8, $e0, $db
10edc     C2 C3 E6 00 
10ee0     00 12 37 43 
10ee4     2B 1D 24 18 
10ee8     EC D7 DF DB | 	byte	$c2, $c3, $e6, $00, $00, $12, $37, $43, $2b, $1d, $24, $18, $ec, $d7, $df, $db
10eec     C2 C3 EA 01 
10ef0     02 13 3A 44 
10ef4     2A 1D 25 16 
10ef8     EA D6 DE D7 | 	byte	$c2, $c3, $ea, $01, $02, $13, $3a, $44, $2a, $1d, $25, $16, $ea, $d6, $de, $d7
10efc     C0 C4 E8 02 
10f00     03 14 3C 44 
10f04     2B 1E 26 14 
10f08     E7 D4 DF D8 | 	byte	$c0, $c4, $e8, $02, $03, $14, $3c, $44, $2b, $1e, $26, $14, $e7, $d4, $df, $d8
10f0c     BE C6 ED 05 
10f10     03 18 3F 45 
10f14     29 1E 26 14 
10f18     E4 D3 DE D6 | 	byte	$be, $c6, $ed, $05, $03, $18, $3f, $45, $29, $1e, $26, $14, $e4, $d3, $de, $d6
10f1c     BB C4 F0 05 
10f20     03 1A 41 45 
10f24     27 1E 27 13 
10f28     E2 D2 DE D2 | 	byte	$bb, $c4, $f0, $05, $03, $1a, $41, $45, $27, $1e, $27, $13, $e2, $d2, $de, $d2
10f2c     B9 C6 F4 05 
10f30     03 1B 43 42 
10f34     26 20 28 0E 
10f38     DE D3 DE D1 | 	byte	$b9, $c6, $f4, $05, $03, $1b, $43, $42, $26, $20, $28, $0e, $de, $d3, $de, $d1
10f3c     B8 CB F4 04 
10f40     04 20 47 42 
10f44     25 23 28 08 
10f48     DE D4 DD CC | 	byte	$b8, $cb, $f4, $04, $04, $20, $47, $42, $25, $23, $28, $08, $de, $d4, $dd, $cc
10f4c     B7 CC F6 02 
10f50     04 26 46 3F 
10f54     24 24 26 07 
10f58     DB D6 DC C8 | 	byte	$b7, $cc, $f6, $02, $04, $26, $46, $3f, $24, $24, $26, $07, $db, $d6, $dc, $c8
10f5c     B8 D0 F8 02 
10f60     08 2A 47 3C 
10f64     27 27 26 02 
10f68     DB D6 D9 C4 | 	byte	$b8, $d0, $f8, $02, $08, $2a, $47, $3c, $27, $27, $26, $02, $db, $d6, $d9, $c4
10f6c     B9 D6 F6 01 
10f70     0C 2C 46 3C 
10f74     29 29 22 FE 
10f78     DE D7 D4 C2 | 	byte	$b9, $d6, $f6, $01, $0c, $2c, $46, $3c, $29, $29, $22, $fe, $de, $d7, $d4, $c2
10f7c     BD D5 F5 01 
10f80     0E 2F 43 3A 
10f84     2B 29 1D FE 
10f88     DF D6 D1 C1 | 	byte	$bd, $d5, $f5, $01, $0e, $2f, $43, $3a, $2b, $29, $1d, $fe, $df, $d6, $d1, $c1
10f8c     BF D8 F4 01 
10f90     13 2E 41 3B 
10f94     2F 28 19 FC 
10f98     E0 D5 CD C2 | 	byte	$bf, $d8, $f4, $01, $13, $2e, $41, $3b, $2f, $28, $19, $fc, $e0, $d5, $cd, $c2
10f9c     C2 D8 F3 05 
10fa0     18 2F 40 3D 
10fa4     30 25 17 FC 
10fa8     DF D1 C9 C4 | 	byte	$c2, $d8, $f3, $05, $18, $2f, $40, $3d, $30, $25, $17, $fc, $df, $d1, $c9, $c4
10fac     C4 D4 F1 09 
10fb0     1A 2E 3E 3E 
10fb4     31 21 14 FC 
10fb8     E0 CD C8 C6 | 	byte	$c4, $d4, $f1, $09, $1a, $2e, $3e, $3e, $31, $21, $14, $fc, $e0, $cd, $c8, $c6
10fbc     C5 D3 F2 0B 
10fc0     1B 2B 3F 42 
10fc4     32 1E 13 FD 
10fc8     DF C9 C8 C9 | 	byte	$c5, $d3, $f2, $0b, $1b, $2b, $3f, $42, $32, $1e, $13, $fd, $df, $c9, $c8, $c9
10fcc     C7 D2 F5 10 
10fd0     1D 2B 41 44 
10fd4     2F 1D 14 00 
10fd8     DB C7 C9 CA | 	byte	$c7, $d2, $f5, $10, $1d, $2b, $41, $44, $2f, $1d, $14, $00, $db, $c7, $c9, $ca
10fdc     C4 D2 F9 13 
10fe0     1B 2C 44 45 
10fe4     2E 1B 16 00 
10fe8     D7 C5 CB CA | 	byte	$c4, $d2, $f9, $13, $1b, $2c, $44, $45, $2e, $1b, $16, $00, $d7, $c5, $cb, $ca
10fec     C2 D4 FA 15 
10ff0     1A 2C 47 47 
10ff4     2A 1A 17 FF 
10ff8     D3 C4 CD CA | 	byte	$c2, $d4, $fa, $15, $1a, $2c, $47, $47, $2a, $1a, $17, $ff, $d3, $c4, $cd, $ca
10ffc     C0 D2 FF 15 
11000     18 2D 48 45 
11004     27 1B 18 FD 
11008     D2 C5 CD C7 | 	byte	$c0, $d2, $ff, $15, $18, $2d, $48, $45, $27, $1b, $18, $fd, $d2, $c5, $cd, $c7
1100c     BF D7 02 14 
11010     19 2F 4B 42 
11014     25 1D 17 F8 
11018     CF C6 CE C5 | 	byte	$bf, $d7, $02, $14, $19, $2f, $4b, $42, $25, $1d, $17, $f8, $cf, $c6, $ce, $c5
1101c     BF DC 05 12 
11020     1A 33 4B 40 
11024     26 1F 17 F2 
11028     CD C8 CD C3 | 	byte	$bf, $dc, $05, $12, $1a, $33, $4b, $40, $26, $1f, $17, $f2, $cd, $c8, $cd, $c3
1102c     C0 E0 03 11 
11030     1A 37 4A 3D 
11034     26 20 14 EF 
11038     CF C9 CB C1 | 	byte	$c0, $e0, $03, $11, $1a, $37, $4a, $3d, $26, $20, $14, $ef, $cf, $c9, $cb, $c1
1103c     C3 E0 03 11 
11040     1E 3A 49 3C 
11044     2A 20 10 EF 
11048     D0 C9 C7 C0 | 	byte	$c3, $e0, $03, $11, $1e, $3a, $49, $3c, $2a, $20, $10, $ef, $d0, $c9, $c7, $c0
1104c     C5 E3 00 12 
11050     23 39 46 3B 
11054     2C 1F 0D ED 
11058     D1 C8 C4 C1 | 	byte	$c5, $e3, $00, $12, $23, $39, $46, $3b, $2c, $1f, $0d, $ed, $d1, $c8, $c4, $c1
1105c     CA E4 FF 14 
11060     27 3A 44 3D 
11064     2D 1E 09 EB 
11068     D3 C5 C2 C3 | 	byte	$ca, $e4, $ff, $14, $27, $3a, $44, $3d, $2d, $1e, $09, $eb, $d3, $c5, $c2, $c3
1106c     CC E1 00 16 
11070     29 3A 44 40 
11074     2C 1A 06 EF 
11078     D2 C1 C1 C6 | 	byte	$cc, $e1, $00, $16, $29, $3a, $44, $40, $2c, $1a, $06, $ef, $d2, $c1, $c1, $c6
1107c     CC E1 02 1C 
11080     2A 36 44 41 
11084     2D 16 04 EE 
11088     CE BE C1 C8 | 	byte	$cc, $e1, $02, $1c, $2a, $36, $44, $41, $2d, $16, $04, $ee, $ce, $be, $c1, $c8
1108c     CD E0 02 1F 
11090     2B 35 44 43 
11094     2A 13 06 EF 
11098     CC BB C2 CB | 	byte	$cd, $e0, $02, $1f, $2b, $35, $44, $43, $2a, $13, $06, $ef, $cc, $bb, $c2, $cb
1109c     CD E0 04 22 
110a0     29 34 47 45 
110a4     28 0F 06 EE 
110a8     CA BA C5 CC | 	byte	$cd, $e0, $04, $22, $29, $34, $47, $45, $28, $0f, $06, $ee, $ca, $ba, $c5, $cc
110ac     CB DE 0A 24 
110b0     29 34 49 45 
110b4     24 0F 06 EF 
110b8     C6 B9 C6 CC | 	byte	$cb, $de, $0a, $24, $29, $34, $49, $45, $24, $0f, $06, $ef, $c6, $b9, $c6, $cc
110bc     C9 E2 0C 25 
110c0     27 35 4C 44 
110c4     21 0D 08 EB 
110c8     C5 BA C8 CD | 	byte	$c9, $e2, $0c, $25, $27, $35, $4c, $44, $21, $0d, $08, $eb, $c5, $ba, $c8, $cd
110cc     C9 E2 11 25 
110d0     27 37 4D 43 
110d4     1F 0F 07 E9 
110d8     C0 BA CA CB | 	byte	$c9, $e2, $11, $25, $27, $37, $4d, $43, $1f, $0f, $07, $e9, $c0, $ba, $ca, $cb
110dc     C9 E7 11 25 
110e0     27 3A 4E 42 
110e4     1E 0F 07 E4 
110e8     C1 BB C9 CA | 	byte	$c9, $e7, $11, $25, $27, $3a, $4e, $42, $1e, $0f, $07, $e4, $c1, $bb, $c9, $ca
110ec     CA E7 14 24 
110f0     27 3C 4E 3E 
110f4     1D 0F 04 E5 
110f8     BF BC CA C9 | 	byte	$ca, $e7, $14, $24, $27, $3c, $4e, $3e, $1d, $0f, $04, $e5, $bf, $bc, $ca, $c9
110fc     CC EB 16 24 
11100     29 3C 4E 3B 
11104     1E 0F 02 E1 
11108     BF BD C9 C8 | 	byte	$cc, $eb, $16, $24, $29, $3c, $4e, $3b, $1e, $0f, $02, $e1, $bf, $bd, $c9, $c8
1110c     CC EF 14 24 
11110     2B 3E 4C 3C 
11114     1D 0E 01 DE 
11118     C0 BD C8 C9 | 	byte	$cc, $ef, $14, $24, $2b, $3e, $4c, $3c, $1d, $0e, $01, $de, $c0, $bd, $c8, $c9
1111c     CF EE 15 25 
11120     2C 40 4C 3B 
11124     1C 0E FE DF 
11128     BF BD C7 C9 | 	byte	$cf, $ee, $15, $25, $2c, $40, $4c, $3b, $1c, $0e, $fe, $df, $bf, $bd, $c7, $c9
1112c     CF EF 16 25 
11130     2D 40 4B 39 
11134     1E 0C FE DE 
11138     BF BC C8 CA | 	byte	$cf, $ef, $16, $25, $2d, $40, $4b, $39, $1e, $0c, $fe, $de, $bf, $bc, $c8, $ca
1113c     D1 F3 15 27 
11140     2F 3F 4A 3A 
11144     1B 0A FC DC 
11148     BE BC C8 CB | 	byte	$d1, $f3, $15, $27, $2f, $3f, $4a, $3a, $1b, $0a, $fc, $dc, $be, $bc, $c8, $cb
1114c     D3 F4 18 28 
11150     2F 3F 4B 38 
11154     1C 09 FB DC 
11158     BD BB C8 CC | 	byte	$d3, $f4, $18, $28, $2f, $3f, $4b, $38, $1c, $09, $fb, $dc, $bd, $bb, $c8, $cc
1115c     D4 F2 19 29 
11160     2F 40 4A 38 
11164     1A 08 F8 DB 
11168     BC BA C8 CC | 	byte	$d4, $f2, $19, $29, $2f, $40, $4a, $38, $1a, $08, $f8, $db, $bc, $ba, $c8, $cc
1116c     D4 F4 1B 2A 
11170     30 40 4A 37 
11174     1A 07 FA D9 
11178     BB BB C8 CD | 	byte	$d4, $f4, $1b, $2a, $30, $40, $4a, $37, $1a, $07, $fa, $d9, $bb, $bb, $c8, $cd
1117c     D5 F3 1A 2A 
11180     2F 40 4A 35 
11184     18 06 F9 D8 
11188     BB BD CA CD | 	byte	$d5, $f3, $1a, $2a, $2f, $40, $4a, $35, $18, $06, $f9, $d8, $bb, $bd, $ca, $cd
1118c     D5 F8 1C 2B 
11190     2F 41 4A 34 
11194     16 06 F8 D6 
11198     BB BB CA CD | 	byte	$d5, $f8, $1c, $2b, $2f, $41, $4a, $34, $16, $06, $f8, $d6, $bb, $bb, $ca, $cd
1119c     D5 F6 1E 2B 
111a0     30 41 4A 35 
111a4     14 06 F7 D5 
111a8     BA BD CB CE | 	byte	$d5, $f6, $1e, $2b, $30, $41, $4a, $35, $14, $06, $f7, $d5, $ba, $bd, $cb, $ce
111ac     D8 FA 1E 2C 
111b0     30 42 4B 32 
111b4     15 05 F7 D3 
111b8     B9 BE CB CD | 	byte	$d8, $fa, $1e, $2c, $30, $42, $4b, $32, $15, $05, $f7, $d3, $b9, $be, $cb, $cd
111bc     D6 FB 21 2B 
111c0     30 44 4B 32 
111c4     14 05 F5 D1 
111c8     B9 BE CC CD | 	byte	$d6, $fb, $21, $2b, $30, $44, $4b, $32, $14, $05, $f5, $d1, $b9, $be, $cc, $cd
111cc     D7 FE 20 2B 
111d0     31 45 4A 2F 
111d4     12 05 F6 D1 
111d8     B8 BF CD CD | 	byte	$d7, $fe, $20, $2b, $31, $45, $4a, $2f, $12, $05, $f6, $d1, $b8, $bf, $cd, $cd
111dc     D9 02 22 2B 
111e0     32 45 49 2F 
111e4     11 05 F4 CE 
111e8     B8 C1 CD CC | 	byte	$d9, $02, $22, $2b, $32, $45, $49, $2f, $11, $05, $f4, $ce, $b8, $c1, $cd, $cc
111ec     DA 00 22 2A 
111f0     32 46 49 2B 
111f4     10 06 F1 CF 
111f8     B9 C2 CC CC | 	byte	$da, $00, $22, $2a, $32, $46, $49, $2b, $10, $06, $f1, $cf, $b9, $c2, $cc, $cc
111fc     DE 04 23 29 
11200     34 46 47 2A 
11204     10 06 EE CC 
11208     BA C3 CB CB | 	byte	$de, $04, $23, $29, $34, $46, $47, $2a, $10, $06, $ee, $cc, $ba, $c3, $cb, $cb
1120c     DE 07 22 29 
11210     36 48 44 29 
11214     12 07 ED CA 
11218     BB C4 CA CC | 	byte	$de, $07, $22, $29, $36, $48, $44, $29, $12, $07, $ed, $ca, $bb, $c4, $ca, $cc
1121c     E2 07 21 29 
11220     37 48 43 27 
11224     13 05 ED CB 
11228     BD C4 C9 CC | 	byte	$e2, $07, $21, $29, $37, $48, $43, $27, $13, $05, $ed, $cb, $bd, $c4, $c9, $cc
1122c     E4 09 20 2B 
11230     38 48 41 29 
11234     13 03 E9 C9 
11238     BD C3 C8 CE | 	byte	$e4, $09, $20, $2b, $38, $48, $41, $29, $13, $03, $e9, $c9, $bd, $c3, $c8, $ce
1123c     E6 0A 20 2C 
11240     3A 47 40 27 
11244     11 01 E5 C8 
11248     BD C2 C7 D0 | 	byte	$e6, $0a, $20, $2c, $3a, $47, $40, $27, $11, $01, $e5, $c8, $bd, $c2, $c7, $d0
1124c     E6 09 21 2E 
11250     3D 46 3E 27 
11254     10 FE E3 C9 
11258     BD C1 C8 D1 | 	byte	$e6, $09, $21, $2e, $3d, $46, $3e, $27, $10, $fe, $e3, $c9, $bd, $c1, $c8, $d1
1125c     EA 0A 21 30 
11260     3C 45 3D 25 
11264     10 FB E3 C8 
11268     BD C2 CA D4 | 	byte	$ea, $0a, $21, $30, $3c, $45, $3d, $25, $10, $fb, $e3, $c8, $bd, $c2, $ca, $d4
1126c     EB 0C 24 31 
11270     3C 44 3E 25 
11274     0D F9 E4 C8 
11278     BB C2 CC D5 | 	byte	$eb, $0c, $24, $31, $3c, $44, $3e, $25, $0d, $f9, $e4, $c8, $bb, $c2, $cc, $d5
1127c     EB 0E 26 32 
11280     3C 44 3D 25 
11284     0A FA E3 C7 
11288     BB C3 CE D6 | 	byte	$eb, $0e, $26, $32, $3c, $44, $3d, $25, $0a, $fa, $e3, $c7, $bb, $c3, $ce, $d6
1128c     ED 0E 29 32 
11290     3B 45 3E 21 
11294     09 F8 E3 C4 
11298     BA C5 CF D7 | 	byte	$ed, $0e, $29, $32, $3b, $45, $3e, $21, $09, $f8, $e3, $c4, $ba, $c5, $cf, $d7
1129c     EC 12 2A 30 
112a0     3B 46 3C 1D 
112a4     07 F9 E2 C2 
112a8     BA C6 CF D6 | 	byte	$ec, $12, $2a, $30, $3b, $46, $3c, $1d, $07, $f9, $e2, $c2, $ba, $c6, $cf, $d6
112ac     EF 16 2A 2F 
112b0     3A 48 3A 1C 
112b4     06 F9 E0 C0 
112b8     BB CA D0 D5 | 	byte	$ef, $16, $2a, $2f, $3a, $48, $3a, $1c, $06, $f9, $e0, $c0, $bb, $ca, $d0, $d5
112bc     F2 17 2A 2F 
112c0     3C 48 38 18 
112c4     07 FA DB BF 
112c8     BD CB CE D5 | 	byte	$f2, $17, $2a, $2f, $3c, $48, $38, $18, $07, $fa, $db, $bf, $bd, $cb, $ce, $d5
112cc     F7 1A 28 2C 
112d0     3F 48 34 15 
112d4     08 F9 D6 BD 
112d8     C1 CB CC D5 | 	byte	$f7, $1a, $28, $2c, $3f, $48, $34, $15, $08, $f9, $d6, $bd, $c1, $cb, $cc, $d5
112dc     FA 1D 26 2E 
112e0     43 48 2E 16 
112e4     0A F7 D5 BE 
112e8     C4 CC CA D8 | 	byte	$fa, $1d, $26, $2e, $43, $48, $2e, $16, $0a, $f7, $d5, $be, $c4, $cc, $ca, $d8
112ec     FF 1C 24 30 
112f0     44 45 2D 16 
112f4     0B F6 D1 C0 
112f8     C6 CB C9 DD | 	byte	$ff, $1c, $24, $30, $44, $45, $2d, $16, $0b, $f6, $d1, $c0, $c6, $cb, $c9, $dd
112fc     00 1A 23 31 
11300     46 41 29 16 
11304     0C F1 D1 C2 
11308     C8 C9 CA E2 | 	byte	$00, $1a, $23, $31, $46, $41, $29, $16, $0c, $f1, $d1, $c2, $c8, $c9, $ca, $e2
1130c     02 19 22 37 
11310     46 3D 28 18 
11314     0B EC CE C5 
11318     C8 C6 CB E4 | 	byte	$02, $19, $22, $37, $46, $3d, $28, $18, $0b, $ec, $ce, $c5, $c8, $c6, $cb, $e4
1131c     05 17 24 39 
11320     45 3A 26 1A 
11324     08 E7 CF C7 
11328     C7 C5 CD E8 | 	byte	$05, $17, $24, $39, $45, $3a, $26, $1a, $08, $e7, $cf, $c7, $c7, $c5, $cd, $e8
1132c     05 15 26 3B 
11330     42 38 28 1B 
11334     04 E7 D1 C8 
11338     C4 C4 D1 E9 | 	byte	$05, $15, $26, $3b, $42, $38, $28, $1b, $04, $e7, $d1, $c8, $c4, $c4, $d1, $e9
1133c     02 13 28 3B 
11340     3F 37 2A 19 
11344     FF E5 D2 C8 
11348     C2 C5 D4 EB | 	byte	$02, $13, $28, $3b, $3f, $37, $2a, $19, $ff, $e5, $d2, $c8, $c2, $c5, $d4, $eb
1134c     00 17 2C 3B 
11350     3C 36 2B 17 
11354     FE E5 D5 C7 
11358     C1 C7 D9 EB | 	byte	$00, $17, $2c, $3b, $3c, $36, $2b, $17, $fe, $e5, $d5, $c7, $c1, $c7, $d9, $eb
1135c     01 19 2F 39 
11360     3B 38 2D 15 
11364     FA E8 D5 C6 
11368     C1 CA D9 EA | 	byte	$01, $19, $2f, $39, $3b, $38, $2d, $15, $fa, $e8, $d5, $c6, $c1, $ca, $d9, $ea
1136c     00 1E 30 37 
11370     3A 3A 2C 10 
11374     FA E9 D5 C3 
11378     C1 CF DA E8 | 	byte	$00, $1e, $30, $37, $3a, $3a, $2c, $10, $fa, $e9, $d5, $c3, $c1, $cf, $da, $e8
1137c     03 1F 30 34 
11380     3B 3B 2A 0D 
11384     FB EB D2 C0 
11388     C3 D0 DA E7 | 	byte	$03, $1f, $30, $34, $3b, $3b, $2a, $0d, $fb, $eb, $d2, $c0, $c3, $d0, $da, $e7
1138c     03 22 2E 32 
11390     3B 3C 26 0A 
11394     FB EA D2 C0 
11398     C5 D3 D9 E9 | 	byte	$03, $22, $2e, $32, $3b, $3c, $26, $0a, $fb, $ea, $d2, $c0, $c5, $d3, $d9, $e9
1139c     07 24 2C 32 
113a0     3D 3C 21 0A 
113a4     FD E9 CE C0 
113a8     C9 D3 D7 E9 | 	byte	$07, $24, $2c, $32, $3d, $3c, $21, $0a, $fd, $e9, $ce, $c0, $c9, $d3, $d7, $e9
113ac     0D 23 29 33 
113b0     40 39 20 0A 
113b4     FE E9 CB C1 
113b8     CC D3 D5 EC | 	byte	$0d, $23, $29, $33, $40, $39, $20, $0a, $fe, $e9, $cb, $c1, $cc, $d3, $d5, $ec
113bc     0E 22 28 34 
113c0     42 38 1D 0A 
113c4     00 E6 CB C4 
113c8     CE D1 D6 ED | 	byte	$0e, $22, $28, $34, $42, $38, $1d, $0a, $00, $e6, $cb, $c4, $ce, $d1, $d6, $ed
113cc     0F 21 27 36 
113d0     41 34 1A 0C 
113d4     FE E5 CA C6 
113d8     CE CF D7 F0 | 	byte	$0f, $21, $27, $36, $41, $34, $1a, $0c, $fe, $e5, $ca, $c6, $ce, $cf, $d7, $f0
113dc     12 1F 28 39 
113e0     40 31 1C 0E 
113e4     FD E2 CA C9 
113e8     CE CE D8 F6 | 	byte	$12, $1f, $28, $39, $40, $31, $1c, $0e, $fd, $e2, $ca, $c9, $ce, $ce, $d8, $f6
113ec     0F 1D 28 3A 
113f0     3F 2E 1A 0F 
113f4     FB DF CB CB 
113f8     CD CE DA F8 | 	byte	$0f, $1d, $28, $3a, $3f, $2e, $1a, $0f, $fb, $df, $cb, $cb, $cd, $ce, $da, $f8
113fc     0F 1D 2C 3B 
11400     3C 2D 1C 0F 
11404     F8 DC CD CB 
11408     CB CD DE F7 | 	byte	$0f, $1d, $2c, $3b, $3c, $2d, $1c, $0f, $f8, $dc, $cd, $cb, $cb, $cd, $de, $f7
1140c     0E 1E 2D 3A 
11410     3A 2B 1D 0E 
11414     F6 DE CF CA 
11418     C9 CF E0 F9 | 	byte	$0e, $1e, $2d, $3a, $3a, $2b, $1d, $0e, $f6, $de, $cf, $ca, $c9, $cf, $e0, $f9
1141c     0B 1E 2E 39 
11420     37 2B 1D 0B 
11424     F2 DE D0 CA 
11428     C9 D2 E3 F8 | 	byte	$0b, $1e, $2e, $39, $37, $2b, $1d, $0b, $f2, $de, $d0, $ca, $c9, $d2, $e3, $f8
1142c     0D 20 31 37 
11430     35 2C 1E 08 
11434     F1 DF D1 C9 
11438     C9 D5 E5 F9 | 	byte	$0d, $20, $31, $37, $35, $2c, $1e, $08, $f1, $df, $d1, $c9, $c9, $d5, $e5, $f9
1143c     0D 23 31 36 
11440     34 2E 1D 05 
11444     F2 E0 D1 C8 
11448     CB D7 E6 F7 | 	byte	$0d, $23, $31, $36, $34, $2e, $1d, $05, $f2, $e0, $d1, $c8, $cb, $d7, $e6, $f7
1144c     10 25 30 33 
11450     34 2D 1B 01 
11454     F0 E2 D0 C6 
11458     CC DB E7 F6 | 	byte	$10, $25, $30, $33, $34, $2d, $1b, $01, $f0, $e2, $d0, $c6, $cc, $db, $e7, $f6
1145c     11 26 2F 31 
11460     33 2D 19 00 
11464     F0 E2 CF C6 
11468     CE DC E6 F7 | 	byte	$11, $26, $2f, $31, $33, $2d, $19, $00, $f0, $e2, $cf, $c6, $ce, $dc, $e6, $f7
1146c     10 27 2E 30 
11470     34 2E 17 FF 
11474     F2 E2 D0 C7 
11478     D1 DD E7 F9 | 	byte	$10, $27, $2e, $30, $34, $2e, $17, $ff, $f2, $e2, $d0, $c7, $d1, $dd, $e7, $f9
1147c     14 28 2C 30 
11480     35 2C 13 FD 
11484     F2 E1 CE C7 
11488     D2 DE E7 F9 | 	byte	$14, $28, $2c, $30, $35, $2c, $13, $fd, $f2, $e1, $ce, $c7, $d2, $de, $e7, $f9
1148c     16 28 2B 2F 
11490     35 2B 12 FD 
11494     F2 E2 CC C8 
11498     D4 DF E6 FA | 	byte	$16, $28, $2b, $2f, $35, $2b, $12, $fd, $f2, $e2, $cc, $c8, $d4, $df, $e6, $fa
1149c     18 27 2A 2F 
114a0     35 28 10 FC 
114a4     F3 E0 CB C8 
114a8     D6 DF E6 FC | 	byte	$18, $27, $2a, $2f, $35, $28, $10, $fc, $f3, $e0, $cb, $c8, $d6, $df, $e6, $fc
114ac     17 27 29 2F 
114b0     34 28 0D FD 
114b4     F2 DF CC CA 
114b8     D7 E0 E8 FC | 	byte	$17, $27, $29, $2f, $34, $28, $0d, $fd, $f2, $df, $cc, $ca, $d7, $e0, $e8, $fc
114bc     1A 27 29 2F 
114c0     34 26 0C FD 
114c4     F2 E0 CC CC 
114c8     D8 E0 E7 FF | 	byte	$1a, $27, $29, $2f, $34, $26, $0c, $fd, $f2, $e0, $cc, $cc, $d8, $e0, $e7, $ff
114cc     1B 26 28 2F 
114d0     33 24 0B FD 
114d4     F2 DF CB CD 
114d8     D9 E0 E9 01 | 	byte	$1b, $26, $28, $2f, $33, $24, $0b, $fd, $f2, $df, $cb, $cd, $d9, $e0, $e9, $01
114dc     19 25 27 2F 
114e0     32 23 0A FB 
114e4     F1 DC CC CE 
114e8     DA E0 E9 00 | 	byte	$19, $25, $27, $2f, $32, $23, $0a, $fb, $f1, $dc, $cc, $ce, $da, $e0, $e9, $00
114ec     1A 24 27 2F 
114f0     31 22 0A FC 
114f4     F0 DD CD CF 
114f8     DA E1 EB 01 | 	byte	$1a, $24, $27, $2f, $31, $22, $0a, $fc, $f0, $dd, $cd, $cf, $da, $e1, $eb, $01
114fc     1A 24 28 2F 
11500     30 1E 0A FC 
11504     EF DD CE D1 
11508     DB E1 ED 03 | 	byte	$1a, $24, $28, $2f, $30, $1e, $0a, $fc, $ef, $dd, $ce, $d1, $db, $e1, $ed, $03
1150c     1B 24 29 2F 
11510     2E 1E 09 FC 
11514     EE DC CE D0 
11518     DB E1 EE 03 | 	byte	$1b, $24, $29, $2f, $2e, $1e, $09, $fc, $ee, $dc, $ce, $d0, $db, $e1, $ee, $03
1151c     19 24 29 2E 
11520     2D 1E 09 FB 
11524     ED DD D0 D1 
11528     DA E3 F0 04 | 	byte	$19, $24, $29, $2e, $2d, $1e, $09, $fb, $ed, $dd, $d0, $d1, $da, $e3, $f0, $04
1152c     19 25 29 2D 
11530     2C 1D 0A F9 
11534     EC DE D1 D1 
11538     DB E4 F1 04 | 	byte	$19, $25, $29, $2d, $2c, $1d, $0a, $f9, $ec, $de, $d1, $d1, $db, $e4, $f1, $04
1153c     18 26 2A 2B 
11540     2A 1E 09 F8 
11544     EC DE D2 D1 
11548     DC E7 F2 03 | 	byte	$18, $26, $2a, $2b, $2a, $1e, $09, $f8, $ec, $de, $d2, $d1, $dc, $e7, $f2, $03
1154c     19 27 29 2B 
11550     2A 1E 07 F7 
11554     ED E0 D1 D1 
11558     DE E9 F2 03 | 	byte	$19, $27, $29, $2b, $2a, $1e, $07, $f7, $ed, $e0, $d1, $d1, $de, $e9, $f2, $03
1155c     1B 27 28 29 
11560     2A 1E 05 F6 
11564     ED E0 D0 D0 
11568     DF EB F0 02 | 	byte	$1b, $27, $28, $29, $2a, $1e, $05, $f6, $ed, $e0, $d0, $d0, $df, $eb, $f0, $02
1156c     1D 28 25 26 
11570     2A 1D 05 F4 
11574     EE E0 CF D0 
11578     E1 EB F0 04 | 	byte	$1d, $28, $25, $26, $2a, $1d, $05, $f4, $ee, $e0, $cf, $d0, $e1, $eb, $f0, $04
1157c     1D 28 24 26 
11580     2B 1E 02 F4 
11584     F0 E0 CF D2 
11588     E3 EB EF 03 | 	byte	$1d, $28, $24, $26, $2b, $1e, $02, $f4, $f0, $e0, $cf, $d2, $e3, $eb, $ef, $03
1158c     20 27 22 27 
11590     2D 1B 01 F5 
11594     F1 E1 CD D5 
11598     E5 EA EF 08 | 	byte	$20, $27, $22, $27, $2d, $1b, $01, $f5, $f1, $e1, $cd, $d5, $e5, $ea, $ef, $08
1159c     20 25 20 28 
115a0     2D 17 FF F6 
115a4     F2 DC CD D6 
115a8     E6 E9 EF 07 | 	byte	$20, $25, $20, $28, $2d, $17, $ff, $f6, $f2, $dc, $cd, $d6, $e6, $e9, $ef, $07
115ac     22 23 20 29 
115b0     2D 16 FE F8 
115b4     F1 DC CD DA 
115b8     E8 E8 EF 0B | 	byte	$22, $23, $20, $29, $2d, $16, $fe, $f8, $f1, $dc, $cd, $da, $e8, $e8, $ef, $0b
115bc     22 21 20 2A 
115c0     2B 12 FE F9 
115c4     F1 D9 CE DA 
115c8     E6 E6 F1 0E | 	byte	$22, $21, $20, $2a, $2b, $12, $fe, $f9, $f1, $d9, $ce, $da, $e6, $e6, $f1, $0e
115cc     20 1F 21 2B 
115d0     28 13 FF FA 
115d4     EE D9 D1 DC 
115d8     E5 E6 F2 0E | 	byte	$20, $1f, $21, $2b, $28, $13, $ff, $fa, $ee, $d9, $d1, $dc, $e5, $e6, $f2, $0e
115dc     1D 1E 23 2C 
115e0     26 0F 00 FB 
115e4     EC DA D3 DE 
115e8     E5 E7 F6 0F | 	byte	$1d, $1e, $23, $2c, $26, $0f, $00, $fb, $ec, $da, $d3, $de, $e5, $e7, $f6, $0f
115ec     1C 1E 24 2B 
115f0     24 0F 01 FA 
115f4     EA DA D5 DD 
115f8     E4 E8 F8 0F | 	byte	$1c, $1e, $24, $2b, $24, $0f, $01, $fa, $ea, $da, $d5, $dd, $e4, $e8, $f8, $0f
115fc     1B 1F 24 28 
11600     21 10 02 F9 
11604     EA DB D7 DE 
11608     E4 EB F9 0D | 	byte	$1b, $1f, $24, $28, $21, $10, $02, $f9, $ea, $db, $d7, $de, $e4, $eb, $f9, $0d
1160c     1A 20 24 27 
11610     20 10 02 F7 
11614     E9 DE D8 DC 
11618     E5 EE FA 0C | 	byte	$1a, $20, $24, $27, $20, $10, $02, $f7, $e9, $de, $d8, $dc, $e5, $ee, $fa, $0c
1161c     1A 21 24 24 
11620     1E 12 01 F4 
11624     EB DF D9 DC 
11628     E7 EF FA 0C | 	byte	$1a, $21, $24, $24, $1e, $12, $01, $f4, $eb, $df, $d9, $dc, $e7, $ef, $fa, $0c
1162c     1B 22 22 22 
11630     1F 12 FF F4 
11634     EC E0 D8 DD 
11638     E9 F1 FA 0A | 	byte	$1b, $22, $22, $22, $1f, $12, $ff, $f4, $ec, $e0, $d8, $dd, $e9, $f1, $fa, $0a
1163c     1D 21 1F 21 
11640     1F 11 FC F3 
11644     ED E1 D7 DE 
11648     EB F1 F9 0B | 	byte	$1d, $21, $1f, $21, $1f, $11, $fc, $f3, $ed, $e1, $d7, $de, $eb, $f1, $f9, $0b
1164c     1E 1F 1C 20 
11650     20 0D FB F3 
11654     EE E1 D7 E0 
11658     EE F1 F8 0E | 	byte	$1e, $1f, $1c, $20, $20, $0d, $fb, $f3, $ee, $e1, $d7, $e0, $ee, $f1, $f8, $0e
1165c     1E 1E 1B 21 
11660     1F 0D F9 F6 
11664     F0 DF D8 E4 
11668     EF F1 F9 11 | 	byte	$1e, $1e, $1b, $21, $1f, $0d, $f9, $f6, $f0, $df, $d8, $e4, $ef, $f1, $f9, $11
1166c     1E 1B 1B 23 
11670     1F 09 F9 F7 
11674     EF DD D9 E7 
11678     F0 EF FB 12 | 	byte	$1e, $1b, $1b, $23, $1f, $09, $f9, $f7, $ef, $dd, $d9, $e7, $f0, $ef, $fb, $12
1167c     1D 19 1B 23 
11680     1C 05 FA F9 
11684     EF DD DB EA 
11688     EF EF FC 14 | 	byte	$1d, $19, $1b, $23, $1c, $05, $fa, $f9, $ef, $dd, $db, $ea, $ef, $ef, $fc, $14
1168c     1B 17 1B 23 
11690     1A 05 FB FA 
11694     EC DD DE EB 
11698     EE EF FD 14 | 	byte	$1b, $17, $1b, $23, $1a, $05, $fb, $fa, $ec, $dd, $de, $eb, $ee, $ef, $fd, $14
1169c     19 16 1C 22 
116a0     16 03 FD F9 
116a4     EA DD E1 EA 
116a8     ED F0 01 13 | 	byte	$19, $16, $1c, $22, $16, $03, $fd, $f9, $ea, $dd, $e1, $ea, $ed, $f0, $01, $13
116ac     16 16 1D 20 
116b0     14 03 FE F9 
116b4     EA DE E3 EA 
116b8     EB F1 02 11 | 	byte	$16, $16, $1d, $20, $14, $03, $fe, $f9, $ea, $de, $e3, $ea, $eb, $f1, $02, $11
116bc     14 16 1E 1E 
116c0     11 05 FF F7 
116c4     E9 E1 E5 EA 
116c8     EC F3 03 10 | 	byte	$14, $16, $1e, $1e, $11, $05, $ff, $f7, $e9, $e1, $e5, $ea, $ec, $f3, $03, $10
116cc     13 18 1D 1B 
116d0     10 06 FF F5 
116d4     E9 E3 E5 E9 
116d8     ED F7 04 0F | 	byte	$13, $18, $1d, $1b, $10, $06, $ff, $f5, $e9, $e3, $e5, $e9, $ed, $f7, $04, $0f
116dc     14 19 1D 1A 
116e0     11 07 FF F4 
116e4     EA E5 E6 E9 
116e8     EF F8 04 0D | 	byte	$14, $19, $1d, $1a, $11, $07, $ff, $f4, $ea, $e5, $e6, $e9, $ef, $f8, $04, $0d
116ec     15 1A 1B 18 
116f0     10 08 FD F3 
116f4     EC E6 E5 E9 
116f8     F0 F9 02 0D | 	byte	$15, $1a, $1b, $18, $10, $08, $fd, $f3, $ec, $e6, $e5, $e9, $f0, $f9, $02, $0d
116fc     15 19 19 16 
11700     11 07 FC F3 
11704     ED E6 E5 E9 
11708     F1 F8 01 0C | 	byte	$15, $19, $19, $16, $11, $07, $fc, $f3, $ed, $e6, $e5, $e9, $f1, $f8, $01, $0c
1170c     16 18 17 17 
11710     12 06 FA F4 
11714     EF E7 E4 EB 
11718     F3 F9 01 0D | 	byte	$16, $18, $17, $17, $12, $06, $fa, $f4, $ef, $e7, $e4, $eb, $f3, $f9, $01, $0d
1171c     17 17 16 17 
11720     12 05 FA F5 
11724     EF E7 E5 EC 
11728     F4 F8 00 0E | 	byte	$17, $17, $16, $17, $12, $05, $fa, $f5, $ef, $e7, $e5, $ec, $f4, $f8, $00, $0e
1172c     16 15 15 17 
11730     11 04 FA F6 
11734     F0 E6 E5 EE 
11738     F4 F7 01 10 | 	byte	$16, $15, $15, $17, $11, $04, $fa, $f6, $f0, $e6, $e5, $ee, $f4, $f7, $01, $10
1173c     16 14 15 17 
11740     11 02 FB F8 
11744     EF E5 E7 F0 
11748     F4 F6 01 10 | 	byte	$16, $14, $15, $17, $11, $02, $fb, $f8, $ef, $e5, $e7, $f0, $f4, $f6, $01, $10
1174c     14 13 16 18 
11750     0F 01 FB F8 
11754     EE E5 E9 F0 
11758     F3 F7 03 11 | 	byte	$14, $13, $16, $18, $0f, $01, $fb, $f8, $ee, $e5, $e9, $f0, $f3, $f7, $03, $11
1175c     13 12 16 17 
11760     0D 01 FC F8 
11764     EE E7 EA F1 
11768     F3 F7 05 10 | 	byte	$13, $12, $16, $17, $0d, $01, $fc, $f8, $ee, $e7, $ea, $f1, $f3, $f7, $05, $10
1176c     11 12 17 16 
11770     0C 01 FD F7 
11774     ED E7 EB F0 
11778     F2 F8 05 0E | 	byte	$11, $12, $17, $16, $0c, $01, $fd, $f7, $ed, $e7, $eb, $f0, $f2, $f8, $05, $0e
1177c     10 12 17 14 
11780     0B 01 FE F7 
11784     EC E8 EC F0 
11788     F2 F9 05 0E | 	byte	$10, $12, $17, $14, $0b, $01, $fe, $f7, $ec, $e8, $ec, $f0, $f2, $f9, $05, $0e
1178c     0F 13 16 13 
11790     0A 02 FE F6 
11794     ED E9 ED F0 
11798     F2 F9 05 0C | 	byte	$0f, $13, $16, $13, $0a, $02, $fe, $f6, $ed, $e9, $ed, $f0, $f2, $f9, $05, $0c
1179c     0F 12 16 13 
117a0     09 03 FD F6 
117a4     ED EB EE F0 
117a8     F3 FC 05 0C | 	byte	$0f, $12, $16, $13, $09, $03, $fd, $f6, $ed, $eb, $ee, $f0, $f3, $fc, $05, $0c
117ac     0F 14 15 11 
117b0     0A 03 FD F5 
117b4     EE EB EE F0 
117b8     F4 FC 06 0B | 	byte	$0f, $14, $15, $11, $0a, $03, $fd, $f5, $ee, $eb, $ee, $f0, $f4, $fc, $06, $0b
117bc     0F 14 15 11 
117c0     09 04 FD F5 
117c4     EE ED EE F0 
117c8     F4 FD 05 0B | 	byte	$0f, $14, $15, $11, $09, $04, $fd, $f5, $ee, $ed, $ee, $f0, $f4, $fd, $05, $0b
117cc     0F 13 14 0F 
117d0     0A 04 FD F4 
117d4     F0 EE EE F0 
117d8     F5 FD 05 0A | 	byte	$0f, $13, $14, $0f, $0a, $04, $fd, $f4, $f0, $ee, $ee, $f0, $f5, $fd, $05, $0a
117dc     0F 13 13 0F 
117e0     0A 03 FC F5 
117e4     F1 EE ED F1 
117e8     F6 FD 04 0A | 	byte	$0f, $13, $13, $0f, $0a, $03, $fc, $f5, $f1, $ee, $ed, $f1, $f6, $fd, $04, $0a
117ec     10 12 12 0F 
117f0     0A 03 FC F6 
117f4     F2 EF EE F1 
117f8     F7 FD 03 0A | 	byte	$10, $12, $12, $0f, $0a, $03, $fc, $f6, $f2, $ef, $ee, $f1, $f7, $fd, $03, $0a
117fc     10 12 10 0E 
11800     0A 03 FB F6 
11804     F3 EF EE F3 
11808     F8 FC 02 0A | 	byte	$10, $12, $10, $0e, $0a, $03, $fb, $f6, $f3, $ef, $ee, $f3, $f8, $fc, $02, $0a
1180c     10 10 0F 0F 
11810     0A 03 FB F8 
11814     F3 EF EE F4 
11818     F8 FB 03 0B | 	byte	$10, $10, $0f, $0f, $0a, $03, $fb, $f8, $f3, $ef, $ee, $f4, $f8, $fb, $03, $0b
1181c     0F 0E 0F 0F 
11820     0B 01 FB F9 
11824     F3 EE EF F5 
11828     F8 FA 02 0C | 	byte	$0f, $0e, $0f, $0f, $0b, $01, $fb, $f9, $f3, $ee, $ef, $f5, $f8, $fa, $02, $0c
1182c     0E 0C 0E 10 
11830     09 00 FB FA 
11834     F4 ED EF F6 
11838     F8 FA 03 0C | 	byte	$0e, $0c, $0e, $10, $09, $00, $fb, $fa, $f4, $ed, $ef, $f6, $f8, $fa, $03, $0c
1183c     0D 0C 0F 10 
11840     09 FF FD FB 
11844     F3 EE F1 F7 
11848     F7 FA 05 0C | 	byte	$0d, $0c, $0f, $10, $09, $ff, $fd, $fb, $f3, $ee, $f1, $f7, $f7, $fa, $05, $0c
1184c     0C 0C 11 10 
11850     07 00 FF FB 
11854     F3 EE F3 F7 
11858     F6 FA 05 0B | 	byte	$0c, $0c, $11, $10, $07, $00, $ff, $fb, $f3, $ee, $f3, $f7, $f6, $fa, $05, $0b
1185c     0A 0B 10 0E 
11860     05 FF 00 FB 
11864     F1 EF F5 F6 
11868     F5 FA 05 0A | 	byte	$0a, $0b, $10, $0e, $05, $ff, $00, $fb, $f1, $ef, $f5, $f6, $f5, $fa, $05, $0a
1186c     08 0B 10 0D 
11870     04 00 00 FA 
11874     F1 F1 F6 F6 
11878     F5 FB 05 08 | 	byte	$08, $0b, $10, $0d, $04, $00, $00, $fa, $f1, $f1, $f6, $f6, $f5, $fb, $05, $08
1187c     07 0C 10 0B 
11880     04 02 01 F9 
11884     F2 F3 F6 F5 
11888     F5 FE 06 07 | 	byte	$07, $0c, $10, $0b, $04, $02, $01, $f9, $f2, $f3, $f6, $f5, $f5, $fe, $06, $07
1188c     08 0E 10 0A 
11890     04 03 01 F7 
11894     F2 F4 F6 F4 
11898     F6 FF 06 06 | 	byte	$08, $0e, $10, $0a, $04, $03, $01, $f7, $f2, $f4, $f6, $f4, $f6, $ff, $06, $06
1189c     09 0E 0F 09 
118a0     05 04 00 F7 
118a4     F4 F6 F5 F3 
118a8     F7 FF 04 05 | 	byte	$09, $0e, $0f, $09, $05, $04, $00, $f7, $f4, $f6, $f5, $f3, $f7, $ff, $04, $05
118ac     09 0E 0E 08 
118b0     06 04 FE F7 
118b4     F5 F6 F4 F4 
118b8     F9 00 02 04 | 	byte	$09, $0e, $0e, $08, $06, $04, $fe, $f7, $f5, $f6, $f4, $f4, $f9, $00, $02, $04
118bc     0A 0D 0B 08 
118c0     07 04 FD F8 
118c4     F7 F6 F3 F4 
118c8     FB FF 01 05 | 	byte	$0a, $0d, $0b, $08, $07, $04, $fd, $f8, $f7, $f6, $f3, $f4, $fb, $ff, $01, $05
118cc     0C 0D 0A 09 
118d0     09 04 FC F9 
118d4     F9 F5 F2 F6 
118d8     FC FE 00 06 | 	byte	$0c, $0d, $0a, $09, $09, $04, $fc, $f9, $f9, $f5, $f2, $f6, $fc, $fe, $00, $06
118dc     0C 0B 08 0A 
118e0     0A 02 FB FB 
118e4     F9 F5 F2 F7 
118e8     FC FC FF 07 | 	byte	$0c, $0b, $08, $0a, $0a, $02, $fb, $fb, $f9, $f5, $f2, $f7, $fc, $fc, $ff, $07
118ec     0C 09 08 0B 
118f0     09 00 FB FD 
118f4     F9 F2 F2 F9 
118f8     FC FA FF 09 | 	byte	$0c, $09, $08, $0b, $09, $00, $fb, $fd, $f9, $f2, $f2, $f9, $fc, $fa, $ff, $09
118fc     0B 07 09 0D 
11900     08 FF FC FF 
11904     F9 F1 F4 FB 
11908     FB F8 00 0A | 	byte	$0b, $07, $09, $0d, $08, $ff, $fc, $ff, $f9, $f1, $f4, $fb, $fb, $f8, $00, $0a
1190c     0A 05 09 0E 
11910     06 FD FE 00 
11914     F8 F0 F5 FD 
11918     FA F7 03 0B | 	byte	$0a, $05, $09, $0e, $06, $fd, $fe, $00, $f8, $f0, $f5, $fd, $fa, $f7, $03, $0b
1191c     08 05 0B 0F 
11920     05 FD 00 01 
11924     F6 F0 F8 FD 
11928     F8 F8 04 0B | 	byte	$08, $05, $0b, $0f, $05, $fd, $00, $01, $f6, $f0, $f8, $fd, $f8, $f8, $04, $0b
1192c     05 04 0D 0E 
11930     03 FC 03 01 
11934     F4 F1 FA FD 
11938     F5 F8 06 0A | 	byte	$05, $04, $0d, $0e, $03, $fc, $03, $01, $f4, $f1, $fa, $fd, $f5, $f8, $06, $0a
1193c     03 04 0F 0D 
11940     00 FD 04 FF 
11944     F2 F1 FB FB 
11948     F3 F9 07 09 | 	byte	$03, $04, $0f, $0d, $00, $fd, $04, $ff, $f2, $f1, $fb, $fb, $f3, $f9, $07, $09
1194c     01 05 10 0C 
11950     FF FF 05 FE 
11954     F1 F4 FD FA 
11958     F3 FB 07 06 | 	byte	$01, $05, $10, $0c, $ff, $ff, $05, $fe, $f1, $f4, $fd, $fa, $f3, $fb, $07, $06
1195c     00 07 10 09 
11960     FF 01 06 FC 
11964     F2 F7 FE F8 
11968     F3 FE 09 04 | 	byte	$00, $07, $10, $09, $ff, $01, $06, $fc, $f2, $f7, $fe, $f8, $f3, $fe, $09, $04
1196c     00 0A 10 07 
11970     FE 03 05 FA 
11974     F1 F8 FE F6 
11978     F4 00 08 02 | 	byte	$00, $0a, $10, $07, $fe, $03, $05, $fa, $f1, $f8, $fe, $f6, $f4, $00, $08, $02
1197c     01 0B 0F 05 
11980     00 05 05 F8 
11984     F3 FB FC F5 
11988     F5 01 06 01 | 	byte	$01, $0b, $0f, $05, $00, $05, $05, $f8, $f3, $fb, $fc, $f5, $f5, $01, $06, $01
1198c     02 0D 0D 03 
11990     01 06 03 F8 
11994     F5 FC FB F4 
11998     F8 01 04 00 | 	byte	$02, $0d, $0d, $03, $01, $06, $03, $f8, $f5, $fc, $fb, $f4, $f8, $01, $04, $00
1199c     04 0D 0B 03 
119a0     03 07 01 F8 
119a4     F8 FC F9 F4 
119a8     F9 02 02 00 | 	byte	$04, $0d, $0b, $03, $03, $07, $01, $f8, $f8, $fc, $f9, $f4, $f9, $02, $02, $00
119ac     07 0D 09 04 
119b0     05 06 00 F8 
119b4     F9 FC F7 F4 
119b8     FB 01 00 01 | 	byte	$07, $0d, $09, $04, $05, $06, $00, $f8, $f9, $fc, $f7, $f4, $fb, $01, $00, $01
119bc     07 0B 08 05 
119c0     06 06 FE F9 
119c4     FB FA F6 F6 
119c8     FB FF FF 01 | 	byte	$07, $0b, $08, $05, $06, $06, $fe, $f9, $fb, $fa, $f6, $f6, $fb, $ff, $ff, $01
119cc     07 09 06 06 
119d0     07 04 FD FB 
119d4     FB F9 F6 F8 
119d8     FC FD FE 03 | 	byte	$07, $09, $06, $06, $07, $04, $fd, $fb, $fb, $f9, $f6, $f8, $fc, $fd, $fe, $03
119dc     08 07 06 08 
119e0     07 02 FE FD 
119e4     FB F7 F6 F9 
119e8     FC FC FE 05 | 	byte	$08, $07, $06, $08, $07, $02, $fe, $fd, $fb, $f7, $f6, $f9, $fc, $fc, $fe, $05
119ec     07 06 07 09 
119f0     07 01 FF FF 
119f4     FB F7 F7 FB 
119f8     FB FA 00 06 | 	byte	$07, $06, $07, $09, $07, $01, $ff, $ff, $fb, $f7, $f7, $fb, $fb, $fa, $00, $06
119fc     06 05 08 0B 
11a00     06 00 01 00 
11a04     FA F6 F9 FC 
11a08     F9 FA 01 06 | 	byte	$06, $05, $08, $0b, $06, $00, $01, $00, $fa, $f6, $f9, $fc, $f9, $fa, $01, $06
11a0c     04 04 09 0B 
11a10     03 00 03 01 
11a14     F8 F6 FB FC 
11a18     F7 F9 02 05 | 	byte	$04, $04, $09, $0b, $03, $00, $03, $01, $f8, $f6, $fb, $fc, $f7, $f9, $02, $05
11a1c     01 03 0A 0A 
11a20     02 00 04 00 
11a24     F8 F6 FC FC 
11a28     F6 F9 03 04 | 	byte	$01, $03, $0a, $0a, $02, $00, $04, $00, $f8, $f6, $fc, $fc, $f6, $f9, $03, $04
11a2c     00 04 0B 09 
11a30     01 01 06 00 
11a34     F6 F8 FE FB 
11a38     F5 FA 04 03 | 	byte	$00, $04, $0b, $09, $01, $01, $06, $00, $f6, $f8, $fe, $fb, $f5, $fa, $04, $03
11a3c     FF 05 0C 07 
11a40     00 03 06 FE 
11a44     F6 F9 FE F9 
11a48     F4 FC 04 01 | 	byte	$ff, $05, $0c, $07, $00, $03, $06, $fe, $f6, $f9, $fe, $f9, $f4, $fc, $04, $01
11a4c     FF 07 0D 06 
11a50     00 04 07 FE 
11a54     F6 FB FE F8 
11a58     F5 FE 04 01 | 	byte	$ff, $07, $0d, $06, $00, $04, $07, $fe, $f6, $fb, $fe, $f8, $f5, $fe, $04, $01
11a5c     FF 08 0D 05 
11a60     01 06 06 FD 
11a64     F7 FC FE F7 
11a68     F6 FF 04 FF | 	byte	$ff, $08, $0d, $05, $01, $06, $06, $fd, $f7, $fc, $fe, $f7, $f6, $ff, $04, $ff
11a6c     00 09 0B 05 
11a70     02 07 05 FC 
11a74     F8 FD FC F6 
11a78     F7 FF 02 FE | 	byte	$00, $09, $0b, $05, $02, $07, $05, $fc, $f8, $fd, $fc, $f6, $f7, $ff, $02, $fe
11a7c     01 09 0A 03 
11a80     03 07 04 FB 
11a84     F9 FE FB F5 
11a88     F8 00 01 FE | 	byte	$01, $09, $0a, $03, $03, $07, $04, $fb, $f9, $fe, $fb, $f5, $f8, $00, $01, $fe
11a8c     02 0A 09 03 
11a90     04 07 03 FB 
11a94     FA FD FA F6 
11a98     F8 FF 00 FE | 	byte	$02, $0a, $09, $03, $04, $07, $03, $fb, $fa, $fd, $fa, $f6, $f8, $ff, $00, $fe
11a9c     02 09 08 04 
11aa0     05 07 02 FC 
11aa4     FB FC FA F6 
11aa8     F9 FE FF FF | 	byte	$02, $09, $08, $04, $05, $07, $02, $fc, $fb, $fc, $fa, $f6, $f9, $fe, $ff, $ff
11aac     03 08 07 05 
11ab0     06 06 02 FD 
11ab4     FC FC FA F8 
11ab8     FA FD FF 00 | 	byte	$03, $08, $07, $05, $06, $06, $02, $fd, $fc, $fc, $fa, $f8, $fa, $fd, $ff, $00
11abc     03 07 07 06 
11ac0     05 06 02 FE 
11ac4     FC FB FA F8 
11ac8     F9 FD FF 00 | 	byte	$03, $07, $07, $06, $05, $06, $02, $fe, $fc, $fb, $fa, $f8, $f9, $fd, $ff, $00
11acc     03 06 07 06 
11ad0     05 05 03 FE 
11ad4     FB FB FA F8 
11ad8     F9 FC FF 00 | 	byte	$03, $06, $07, $06, $05, $05, $03, $fe, $fb, $fb, $fa, $f8, $f9, $fc, $ff, $00
11adc     02 06 08 06 
11ae0     04 05 04 FF 
11ae4     FB FB FB F8 
11ae8     F8 FD 00 00 | 	byte	$02, $06, $08, $06, $04, $05, $04, $ff, $fb, $fb, $fb, $f8, $f8, $fd, $00, $00
11aec     01 06 09 06 
11af0     04 05 04 FF 
11af4     FA FB FC F8 
11af8     F7 FD 00 FF | 	byte	$01, $06, $09, $06, $04, $05, $04, $ff, $fa, $fb, $fc, $f8, $f7, $fd, $00, $ff
11afc     00 06 08 05 
11b00     03 05 04 FD 
11b04     FA FC FB F7 
11b08     F7 FD 00 FF | 	byte	$00, $06, $08, $05, $03, $05, $04, $fd, $fa, $fc, $fb, $f7, $f7, $fd, $00, $ff
11b0c     01 07 08 05 
11b10     03 06 04 FC 
11b14     FA FD FC F6 
11b18     F7 FD 00 FD | 	byte	$01, $07, $08, $05, $03, $06, $04, $fc, $fa, $fd, $fc, $f6, $f7, $fd, $00, $fd
11b1c     01 07 08 04 
11b20     03 07 04 FD 
11b24     FB FE FB F6 
11b28     F8 FE FF FD | 	byte	$01, $07, $08, $04, $03, $07, $04, $fd, $fb, $fe, $fb, $f6, $f8, $fe, $ff, $fd
11b2c     01 08 08 03 
11b30     04 07 03 FC 
11b34     FC FE FB F6 
11b38     F9 FF 00 FD | 	byte	$01, $08, $08, $03, $04, $07, $03, $fc, $fc, $fe, $fb, $f6, $f9, $ff, $00, $fd
11b3c     03 09 07 04 
11b40     06 08 03 FD 
11b44     FD FE FA F6 
11b48     FA FF FE FD | 	byte	$03, $09, $07, $04, $06, $08, $03, $fd, $fd, $fe, $fa, $f6, $fa, $ff, $fe, $fd
11b4c     04 08 06 04 
11b50     07 08 02 FC 
11b54     FE FE F8 F6 
11b58     FB FE FC FE | 	byte	$04, $08, $06, $04, $07, $08, $02, $fc, $fe, $fe, $f8, $f6, $fb, $fe, $fc, $fe
11b5c     04 07 05 04 
11b60     07 07 01 FD 
11b64     FE FD F8 F7 
11b68     FB FE FC FE | 	byte	$04, $07, $05, $04, $07, $07, $01, $fd, $fe, $fd, $f8, $f7, $fb, $fe, $fc, $fe
11b6c     05 07 05 05 
11b70     07 06 01 FE 
11b74     FF FC F8 F8 
11b78     FB FD FD 00 | 	byte	$05, $07, $05, $05, $07, $06, $01, $fe, $ff, $fc, $f8, $f8, $fb, $fd, $fd, $00
11b7c     05 06 05 07 
11b80     08 04 01 FF 
11b84     FE FB F8 F9 
11b88     FB FB FD 01 | 	byte	$05, $06, $05, $07, $08, $04, $01, $ff, $fe, $fb, $f8, $f9, $fb, $fb, $fd, $01
11b8c     04 05 06 08 
11b90     07 04 01 00 
11b94     FE FA F8 FA 
11b98     FA FA FD 01 | 	byte	$04, $05, $06, $08, $07, $04, $01, $00, $fe, $fa, $f8, $fa, $fa, $fa, $fd, $01
11b9c     03 04 06 08 
11ba0     06 03 02 00 
11ba4     FC F9 F9 F9 
11ba8     F8 F9 FE 01 | 	byte	$03, $04, $06, $08, $06, $03, $02, $00, $fc, $f9, $f9, $f9, $f8, $f9, $fe, $01
11bac     02 04 07 08 
11bb0     05 04 03 00 
11bb4     FB F9 FA F9 
11bb8     F7 F9 FF 01 | 	byte	$02, $04, $07, $08, $05, $04, $03, $00, $fb, $f9, $fa, $f9, $f7, $f9, $ff, $01
11bbc     01 04 09 08 
11bc0     05 05 05 00 
11bc4     FA FA FB F8 
11bc8     F7 FB 00 01 | 	byte	$01, $04, $09, $08, $05, $05, $05, $00, $fa, $fa, $fb, $f8, $f7, $fb, $00, $01
11bcc     01 06 0B 08 
11bd0     05 06 06 00 
11bd4     FA FB FB F7 
11bd8     F5 FB 00 FF | 	byte	$01, $06, $0b, $08, $05, $06, $06, $00, $fa, $fb, $fb, $f7, $f5, $fb, $00, $ff
11bdc     00 06 0A 06 
11be0     04 07 06 FE 
11be4     F9 FB FB F6 
11be8     F5 FC FF FD | 	byte	$00, $06, $0a, $06, $04, $07, $06, $fe, $f9, $fb, $fb, $f6, $f5, $fc, $ff, $fd
11bec     00 08 09 05 
11bf0     05 08 05 FD 
11bf4     FA FD FA F3 
11bf8     F5 FD FE FC | 	byte	$00, $08, $09, $05, $05, $08, $05, $fd, $fa, $fd, $fa, $f3, $f5, $fd, $fe, $fc
11bfc     01 09 09 05 
11c00     06 0A 05 FD 
11c04     FC FE F9 F4 
11c08     F7 FE FE FC | 	byte	$01, $09, $09, $05, $06, $0a, $05, $fd, $fc, $fe, $f9, $f4, $f7, $fe, $fe, $fc
11c0c     03 0A 09 05 
11c10     08 0A 04 FC 
11c14     FD FE F8 F4 
11c18     F9 FE FD FD | 	byte	$03, $0a, $09, $05, $08, $0a, $04, $fc, $fd, $fe, $f8, $f4, $f9, $fe, $fd, $fd
11c1c     05 0B 07 05 
11c20     09 0A 02 FC 
11c24     FE FE F6 F3 
11c28     F9 FD FA FD | 	byte	$05, $0b, $07, $05, $09, $0a, $02, $fc, $fe, $fe, $f6, $f3, $f9, $fd, $fa, $fd
11c2c     05 09 06 05 
11c30     0B 09 01 FC 
11c34     FF FD F5 F4 
11c38     FB FC FA FE | 	byte	$05, $09, $06, $05, $0b, $09, $01, $fc, $ff, $fd, $f5, $f4, $fb, $fc, $fa, $fe
11c3c     07 08 05 06 
11c40     0C 08 00 FE 
11c44     00 FB F4 F6 
11c48     FC FB FA FF | 	byte	$07, $08, $05, $06, $0c, $08, $00, $fe, $00, $fb, $f4, $f6, $fc, $fb, $fa, $ff
11c4c     07 07 05 09 
11c50     0C 07 00 00 
11c54     00 F9 F4 F8 
11c58     FB FA FA 01 | 	byte	$07, $07, $05, $09, $0c, $07, $00, $00, $00, $f9, $f4, $f8, $fb, $fa, $fa, $01
11c5c     07 06 06 0A 
11c60     0C 05 00 01 
11c64     FF F8 F4 F8 
11c68     FA F8 FA 03 | 	byte	$07, $06, $06, $0a, $0c, $05, $00, $01, $ff, $f8, $f4, $f8, $fa, $f8, $fa, $03
11c6c     07 05 06 0B 
11c70     0B 03 01 02 
11c74     FE F6 F5 F9 
11c78     F9 F7 FB 04 | 	byte	$07, $05, $06, $0b, $0b, $03, $01, $02, $fe, $f6, $f5, $f9, $f9, $f7, $fb, $04
11c7c     05 04 07 0C 
11c80     09 03 02 02 
11c84     FC F6 F6 F9 
11c88     F8 F7 FD 03 | 	byte	$05, $04, $07, $0c, $09, $03, $02, $02, $fc, $f6, $f6, $f9, $f8, $f7, $fd, $03
11c8c     04 04 09 0C 
11c90     08 03 04 03 
11c94     FB F6 F9 FA 
11c98     F6 F7 FF 03 | 	byte	$04, $04, $09, $0c, $08, $03, $04, $03, $fb, $f6, $f9, $fa, $f6, $f7, $ff, $03
11c9c     02 04 0B 0C 
11ca0     06 04 05 02 
11ca4     F9 F6 FA F9 
11ca8     F5 F8 01 03 | 	byte	$02, $04, $0b, $0c, $06, $04, $05, $02, $f9, $f6, $fa, $f9, $f5, $f8, $01, $03
11cac     02 06 0C 0B 
11cb0     05 05 06 00 
11cb4     F8 F7 FA F7 
11cb8     F4 FA 00 01 | 	byte	$02, $06, $0c, $0b, $05, $05, $06, $00, $f8, $f7, $fa, $f7, $f4, $fa, $00, $01
11cbc     01 07 0C 09 
11cc0     04 06 05 FE 
11cc4     F7 F9 FA F5 
11cc8     F4 FB 00 FF | 	byte	$01, $07, $0c, $09, $04, $06, $05, $fe, $f7, $f9, $fa, $f5, $f4, $fb, $00, $ff
11ccc     01 09 0C 07 
11cd0     04 07 05 FC 
11cd4     F8 FB F9 F3 
11cd8     F4 FD 00 FE | 	byte	$01, $09, $0c, $07, $04, $07, $05, $fc, $f8, $fb, $f9, $f3, $f4, $fd, $00, $fe
11cdc     02 0A 0B 06 
11ce0     06 09 05 FC 
11ce4     F9 FC F8 F3 
11ce8     F6 FD FF FD | 	byte	$02, $0a, $0b, $06, $06, $09, $05, $fc, $f9, $fc, $f8, $f3, $f6, $fd, $ff, $fd
11cec     03 0B 0A 06 
11cf0     07 09 03 FB 
11cf4     FA FC F7 F3 
11cf8     F8 FF FE FE | 	byte	$03, $0b, $0a, $06, $07, $09, $03, $fb, $fa, $fc, $f7, $f3, $f8, $ff, $fe, $fe
11cfc     06 0C 09 06 
11d00     09 09 02 FA 
11d04     FC FC F5 F3 
11d08     F9 FE FC FE | 	byte	$06, $0c, $09, $06, $09, $09, $02, $fa, $fc, $fc, $f5, $f3, $f9, $fe, $fc, $fe
11d0c     07 0B 08 06 
11d10     0A 09 00 FB 
11d14     FD FC F4 F3 
11d18     FA FE FC FF | 	byte	$07, $0b, $08, $06, $0a, $09, $00, $fb, $fd, $fc, $f4, $f3, $fa, $fe, $fc, $ff
11d1c     08 0B 07 06 
11d20     0B 07 FF FC 
11d24     FE FA F3 F5 
11d28     FB FD FB 01 | 	byte	$08, $0b, $07, $06, $0b, $07, $ff, $fc, $fe, $fa, $f3, $f5, $fb, $fd, $fb, $01
11d2c     09 09 06 08 
11d30     0B 06 FE FD 
11d34     FE F8 F3 F6 
11d38     FC FB FB 02 | 	byte	$09, $09, $06, $08, $0b, $06, $fe, $fd, $fe, $f8, $f3, $f6, $fc, $fb, $fb, $02
11d3c     09 08 06 09 
11d40     0B 04 FE FE 
11d44     FD F7 F3 F7 
11d48     FB FA FC 03 | 	byte	$09, $08, $06, $09, $0b, $04, $fe, $fe, $fd, $f7, $f3, $f7, $fb, $fa, $fc, $03
11d4c     09 07 07 0A 
11d50     0A 03 FF FF 
11d54     FD F6 F4 F8 
11d58     FA FA FD 04 | 	byte	$09, $07, $07, $0a, $0a, $03, $ff, $ff, $fd, $f6, $f4, $f8, $fa, $fa, $fd, $04
11d5c     08 07 08 0B 
11d60     09 02 FF FF 
11d64     FB F5 F5 F9 
11d68     F9 FA FE 05 | 	byte	$08, $07, $08, $0b, $09, $02, $ff, $ff, $fb, $f5, $f5, $f9, $f9, $fa, $fe, $05
11d6c     07 07 09 0B 
11d70     08 03 01 FF 
11d74     FA F6 F7 F9 
11d78     F9 FA 00 05 | 	byte	$07, $07, $09, $0b, $08, $03, $01, $ff, $fa, $f6, $f7, $f9, $f9, $fa, $00, $05
11d7c     06 07 0A 0B 
11d80     07 03 01 FE 
11d84     F9 F6 F8 F8 
11d88     F8 FB 00 05 | 	byte	$06, $07, $0a, $0b, $07, $03, $01, $fe, $f9, $f6, $f8, $f8, $f8, $fb, $00, $05
11d8c     06 08 0B 0A 
11d90     06 03 01 FD 
11d94     F8 F7 F7 F7 
11d98     F7 FB 01 03 | 	byte	$06, $08, $0b, $0a, $06, $03, $01, $fd, $f8, $f7, $f7, $f7, $f7, $fb, $01, $03
11d9c     05 09 0B 08 
11da0     05 04 01 FB 
11da4     F8 F7 F7 F5 
11da8     F7 FD 01 02 | 	byte	$05, $09, $0b, $08, $05, $04, $01, $fb, $f8, $f7, $f7, $f5, $f7, $fd, $01, $02
11dac     06 0A 0B 08 
11db0     06 05 01 FB 
11db4     F8 F8 F6 F5 
11db8     F8 FE 00 02 | 	byte	$06, $0a, $0b, $08, $06, $05, $01, $fb, $f8, $f8, $f6, $f5, $f8, $fe, $00, $02
11dbc     06 0A 0A 07 
11dc0     06 05 00 FA 
11dc4     F9 F9 F6 F5 
11dc8     FA FE 00 02 | 	byte	$06, $0a, $0a, $07, $06, $05, $00, $fa, $f9, $f9, $f6, $f5, $fa, $fe, $00, $02
11dcc     08 0B 09 07 
11dd0     07 05 FE FA 
11dd4     FA F9 F5 F5 
11dd8     FC FF FF 03 | 	byte	$08, $0b, $09, $07, $07, $05, $fe, $fa, $fa, $f9, $f5, $f5, $fc, $ff, $ff, $03
11ddc     09 0B 08 07 
11de0     09 05 FE FA 
11de4     FB F8 F4 F6 
11de8     FC FF FF 03 | 	byte	$09, $0b, $08, $07, $09, $05, $fe, $fa, $fb, $f8, $f4, $f6, $fc, $ff, $ff, $03
11dec     0A 0A 07 08 
11df0     09 04 FD FB 
11df4     FB F7 F4 F7 
11df8     FC FE FE 05 | 	byte	$0a, $0a, $07, $08, $09, $04, $fd, $fb, $fb, $f7, $f4, $f7, $fc, $fe, $fe, $05
11dfc     0A 09 07 08 
11e00     09 02 FC FC 
11e04     FB F6 F3 F8 
11e08     FD FD FF 06 | 	byte	$0a, $09, $07, $08, $09, $02, $fc, $fc, $fb, $f6, $f3, $f8, $fd, $fd, $ff, $06
11e0c     0A 09 07 0A 
11e10     09 01 FC FC 
11e14     FB F5 F4 F9 
11e18     FC FC FF 07 | 	byte	$0a, $09, $07, $0a, $09, $01, $fc, $fc, $fb, $f5, $f4, $f9, $fc, $fc, $ff, $07
11e1c     0A 08 08 0A 
11e20     07 00 FC FD 
11e24     FA F4 F5 FA 
11e28     FC FC 00 08 | 	byte	$0a, $08, $08, $0a, $07, $00, $fc, $fd, $fa, $f4, $f5, $fa, $fc, $fc, $00, $08
11e2c     09 08 09 0A 
11e30     06 00 FE FD 
11e34     F9 F4 F7 FA 
11e38     FB FC 02 07 | 	byte	$09, $08, $09, $0a, $06, $00, $fe, $fd, $f9, $f4, $f7, $fa, $fb, $fc, $02, $07
11e3c     08 08 0A 0A 
11e40     05 00 FF FD 
11e44     F7 F4 F7 FA 
11e48     FA FC 03 07 | 	byte	$08, $08, $0a, $0a, $05, $00, $ff, $fd, $f7, $f4, $f7, $fa, $fa, $fc, $03, $07
11e4c     07 08 0A 09 
11e50     04 00 FF FC 
11e54     F7 F5 F8 FA 
11e58     FA FE 04 07 | 	byte	$07, $08, $0a, $09, $04, $00, $ff, $fc, $f7, $f5, $f8, $fa, $fa, $fe, $04, $07
11e5c     07 09 0B 09 
11e60     03 01 FF FB 
11e64     F7 F7 F9 F9 
11e68     FA FF 04 05 | 	byte	$07, $09, $0b, $09, $03, $01, $ff, $fb, $f7, $f7, $f9, $f9, $fa, $ff, $04, $05
11e6c     07 0A 0B 07 
11e70     03 02 FF F9 
11e74     F6 F7 F8 F7 
11e78     FA 00 03 04 | 	byte	$07, $0a, $0b, $07, $03, $02, $ff, $f9, $f6, $f7, $f8, $f7, $fa, $00, $03, $04
11e7c     07 0B 0A 05 
11e80     03 03 FE F7 
11e84     F6 F8 F7 F6 
11e88     FB 01 03 03 | 	byte	$07, $0b, $0a, $05, $03, $03, $fe, $f7, $f6, $f8, $f7, $f6, $fb, $01, $03, $03
11e8c     08 0C 09 05 
11e90     04 04 FD F7 
11e94     F8 F9 F6 F5 
11e98     FC 02 02 03 | 	byte	$08, $0c, $09, $05, $04, $04, $fd, $f7, $f8, $f9, $f6, $f5, $fc, $02, $02, $03
11e9c     09 0C 07 04 
11ea0     05 04 FB F7 
11ea4     F9 FA F5 F6 
11ea8     FE 02 01 04 | 	byte	$09, $0c, $07, $04, $05, $04, $fb, $f7, $f9, $fa, $f5, $f6, $fe, $02, $01, $04
11eac     0B 0C 06 05 
11eb0     07 03 FA F8 
11eb4     FB F9 F4 F7 
11eb8     00 02 00 05 | 	byte	$0b, $0c, $06, $05, $07, $03, $fa, $f8, $fb, $f9, $f4, $f7, $00, $02, $00, $05
11ebc     0C 0B 05 05 
11ec0     08 02 F8 F8 
11ec4     FC F8 F3 F8 
11ec8     01 01 FF 06 | 	byte	$0c, $0b, $05, $05, $08, $02, $f8, $f8, $fc, $f8, $f3, $f8, $01, $01, $ff, $06
11ecc     0D 0A 04 06 
11ed0     08 00 F8 FA 
11ed4     FC F6 F3 FA 
11ed8     01 FF FF 08 | 	byte	$0d, $0a, $04, $06, $08, $00, $f8, $fa, $fc, $f6, $f3, $fa, $01, $ff, $ff, $08
11edc     0D 07 03 08 
11ee0     08 FE F8 FB 
11ee4     FC F4 F3 FD 
11ee8     01 FE FF 09 | 	byte	$0d, $07, $03, $08, $08, $fe, $f8, $fb, $fc, $f4, $f3, $fd, $01, $fe, $ff, $09
11eec     0C 06 04 09 
11ef0     07 FC F8 FD 
11ef4     FB F3 F5 FE 
11ef8     01 FC 00 0B | 	byte	$0c, $06, $04, $09, $07, $fc, $f8, $fd, $fb, $f3, $f5, $fe, $01, $fc, $00, $0b
11efc     0C 05 05 0A 
11f00     05 FB F9 FD 
11f04     FA F2 F5 FF 
11f08     FF FC 03 0B | 	byte	$0c, $05, $05, $0a, $05, $fb, $f9, $fd, $fa, $f2, $f5, $ff, $ff, $fc, $03, $0b
11f0c     0A 04 06 0A 
11f10     04 FA FB FE 
11f14     F8 F3 F8 00 
11f18     FE FC 04 0C | 	byte	$0a, $04, $06, $0a, $04, $fa, $fb, $fe, $f8, $f3, $f8, $00, $fe, $fc, $04, $0c
11f1c     08 04 08 0A 
11f20     02 F9 FC FE 
11f24     F7 F2 FA FF 
11f28     FC FD 06 0B | 	byte	$08, $04, $08, $0a, $02, $f9, $fc, $fe, $f7, $f2, $fa, $ff, $fc, $fd, $06, $0b
11f2c     07 04 09 09 
11f30     00 FA FD FD 
11f34     F5 F4 FB FF 
11f38     FB FE 07 0A | 	byte	$07, $04, $09, $09, $00, $fa, $fd, $fd, $f5, $f4, $fb, $ff, $fb, $fe, $07, $0a
11f3c     05 06 0A 08 
11f40     FF FC FE FB 
11f44     F4 F6 FC FD 
11f48     FB 01 08 09 | 	byte	$05, $06, $0a, $08, $ff, $fc, $fe, $fb, $f4, $f6, $fc, $fd, $fb, $01, $08, $09
11f4c     05 07 0B 06 
11f50     FE FD FE F9 
11f54     F3 F7 FC FB 
11f58     FB 02 09 07 | 	byte	$05, $07, $0b, $06, $fe, $fd, $fe, $f9, $f3, $f7, $fc, $fb, $fb, $02, $09, $07
11f5c     05 09 0A 03 
11f60     FE FE FE F7 
11f64     F3 F8 FC FA 
11f68     FC 03 08 06 | 	byte	$05, $09, $0a, $03, $fe, $fe, $fe, $f7, $f3, $f8, $fc, $fa, $fc, $03, $08, $06
11f6c     06 0A 09 03 
11f70     FE FF FD F6 
11f74     F4 F9 FA F9 
11f78     FD 05 07 05 | 	byte	$06, $0a, $09, $03, $fe, $ff, $fd, $f6, $f4, $f9, $fa, $f9, $fd, $05, $07, $05
11f7c     07 0A 08 01 
11f80     FF 00 FB F5 
11f84     F6 FA FA F9 
11f88     FF 06 06 05 | 	byte	$07, $0a, $08, $01, $ff, $00, $fb, $f5, $f6, $fa, $fa, $f9, $ff, $06, $06, $05
11f8c     09 0B 07 01 
11f90     01 00 FA F6 
11f94     F9 FB F9 FA 
11f98     02 06 05 05 | 	byte	$09, $0b, $07, $01, $01, $00, $fa, $f6, $f9, $fb, $f9, $fa, $02, $06, $05, $05
11f9c     0A 0B 05 01 
11fa0     02 FF F8 F6 
11fa4     F9 FA F8 FB 
11fa8     02 05 03 06 | 	byte	$0a, $0b, $05, $01, $02, $ff, $f8, $f6, $f9, $fa, $f8, $fb, $02, $05, $03, $06
11fac     0B 0A 03 02 
11fb0     02 FE F7 F6 
11fb4     FA F8 F7 FC 
11fb8     03 04 03 08 | 	byte	$0b, $0a, $03, $02, $02, $fe, $f7, $f6, $fa, $f8, $f7, $fc, $03, $04, $03, $08
11fbc     0C 08 03 03 
11fc0     03 FC F6 F8 
11fc4     FB F8 F7 FE 
11fc8     04 03 03 0A | 	byte	$0c, $08, $03, $03, $03, $fc, $f6, $f8, $fb, $f8, $f7, $fe, $04, $03, $03, $0a
11fcc     0C 07 03 04 
11fd0     03 FB F6 F9 
11fd4     FB F7 F7 FF 
11fd8     04 03 04 0A | 	byte	$0c, $07, $03, $04, $03, $fb, $f6, $f9, $fb, $f7, $f7, $ff, $04, $03, $04, $0a
11fdc     0C 05 03 05 
11fe0     02 F9 F7 FA 
11fe4     FA F6 F9 01 
11fe8     03 02 05 0B | 	byte	$0c, $05, $03, $05, $02, $f9, $f7, $fa, $fa, $f6, $f9, $01, $03, $02, $05, $0b
11fec     0A 05 04 06 
11ff0     01 F8 F8 FB 
11ff4     F9 F5 FA 01 
11ff8     02 01 06 0C | 	byte	$0a, $05, $04, $06, $01, $f8, $f8, $fb, $f9, $f5, $fa, $01, $02, $01, $06, $0c
11ffc     09 04 04 05 
12000     FE F8 F9 FB 
12004     F7 F5 FB 01 
12008     01 01 07 0C | 	byte	$09, $04, $04, $05, $fe, $f8, $f9, $fb, $f7, $f5, $fb, $01, $01, $01, $07, $0c
1200c     08 04 05 05 
12010     FD F8 FA FA 
12014     F7 F6 FC 01 
12018     01 02 09 0B | 	byte	$08, $04, $05, $05, $fd, $f8, $fa, $fa, $f7, $f6, $fc, $01, $01, $02, $09, $0b
1201c     07 05 06 04 
12020     FD F9 FA FA 
12024     F6 F7 FD 01 
12028     00 03 09 0A | 	byte	$07, $05, $06, $04, $fd, $f9, $fa, $fa, $f6, $f7, $fd, $01, $00, $03, $09, $0a
1202c     07 05 06 03 
12030     FC FA FB F8 
12034     F6 F8 FD FF 
12038     00 04 09 09 | 	byte	$07, $05, $06, $03, $fc, $fa, $fb, $f8, $f6, $f8, $fd, $ff, $00, $04, $09, $09
1203c     06 06 06 01 
12040     FB FA FA F7 
12044     F5 F9 FD FF 
12048     01 05 09 08 | 	byte	$06, $06, $06, $01, $fb, $fa, $fa, $f7, $f5, $f9, $fd, $ff, $01, $05, $09, $08
1204c     06 07 06 00 
12050     FC FB FA F7 
12054     F6 F9 FC FE 
12058     01 06 08 08 | 	byte	$06, $07, $06, $00, $fc, $fb, $fa, $f7, $f6, $f9, $fc, $fe, $01, $06, $08, $08
1205c     07 07 04 00 
12060     FD FB F9 F7 
12064     F7 FA FC FF 
12068     03 06 08 08 | 	byte	$07, $07, $04, $00, $fd, $fb, $f9, $f7, $f7, $fa, $fc, $ff, $03, $06, $08, $08
1206c     08 07 04 00 
12070     FD FB F9 F7 
12074     F8 FB FD FF 
12078     03 07 08 08 | 	byte	$08, $07, $04, $00, $fd, $fb, $f9, $f7, $f8, $fb, $fd, $ff, $03, $07, $08, $08
1207c     09 07 03 00 
12080     FD FB F8 F7 
12084     F9 FA FC 00 
12088     04 06 07 09 | 	byte	$09, $07, $03, $00, $fd, $fb, $f8, $f7, $f9, $fa, $fc, $00, $04, $06, $07, $09
1208c     08 06 03 00 
12090     FD F9 F7 F8 
12094     F8 F9 FC 01 
12098     04 06 07 09 | 	byte	$08, $06, $03, $00, $fd, $f9, $f7, $f8, $f8, $f9, $fc, $01, $04, $06, $07, $09
1209c     08 05 02 01 
120a0     FD F9 F7 F8 
120a4     F9 F9 FD 02 
120a8     04 06 08 0A | 	byte	$08, $05, $02, $01, $fd, $f9, $f7, $f8, $f9, $f9, $fd, $02, $04, $06, $08, $0a
120ac     09 05 03 01 
120b0     FD F8 F7 F9 
120b4     F9 F9 FD 02 
120b8     04 05 08 0A | 	byte	$09, $05, $03, $01, $fd, $f8, $f7, $f9, $f9, $f9, $fd, $02, $04, $05, $08, $0a
120bc     08 04 02 00 
120c0     FB F8 F8 F9 
120c4     F8 F9 FE 02 
120c8     04 05 09 0A | 	byte	$08, $04, $02, $00, $fb, $f8, $f8, $f9, $f8, $f9, $fe, $02, $04, $05, $09, $0a
120cc     07 04 03 00 
120d0     FB F8 F8 F9 
120d4     F7 F9 FF 02 
120d8     03 05 09 09 | 	byte	$07, $04, $03, $00, $fb, $f8, $f8, $f9, $f7, $f9, $ff, $02, $03, $05, $09, $09
120dc     06 04 03 00 
120e0     FA F8 F8 F8 
120e4     F7 FA FF 01 
120e8     03 06 09 08 | 	byte	$06, $04, $03, $00, $fa, $f8, $f8, $f8, $f7, $fa, $ff, $01, $03, $06, $09, $08
120ec     06 04 03 FF 
120f0     FA F9 F9 F8 
120f4     F8 FC FF 01 
120f8     04 07 0A 08 | 	byte	$06, $04, $03, $ff, $fa, $f9, $f9, $f8, $f8, $fc, $ff, $01, $04, $07, $0a, $08
120fc     06 05 03 FE 
12100     FA FA F9 F7 
12104     F8 FC 00 01 
12108     04 08 09 07 | 	byte	$06, $05, $03, $fe, $fa, $fa, $f9, $f7, $f8, $fc, $00, $01, $04, $08, $09, $07
1210c     06 06 02 FD 
12110     FA FA F8 F6 
12114     F8 FC FF 01 
12118     04 08 08 07 | 	byte	$06, $06, $02, $fd, $fa, $fa, $f8, $f6, $f8, $fc, $ff, $01, $04, $08, $08, $07
1211c     06 05 01 FC 
12120     FA F9 F7 F6 
12124     F9 FC FE 01 
12128     05 08 07 07 | 	byte	$06, $05, $01, $fc, $fa, $f9, $f7, $f6, $f9, $fc, $fe, $01, $05, $08, $07, $07
1212c     07 05 00 FC 
12130     FB FA F7 F6 
12134     F9 FC FD 01 
12138     06 08 07 07 | 	byte	$07, $05, $00, $fc, $fb, $fa, $f7, $f6, $f9, $fc, $fd, $01, $06, $08, $07, $07
1213c     08 05 FF FD 
12140     FC F9 F6 F7 
12144     FB FC FD 02 
12148     07 08 07 08 | 	byte	$08, $05, $ff, $fd, $fc, $f9, $f6, $f7, $fb, $fc, $fd, $02, $07, $08, $07, $08
1214c     08 04 FF FD 
12150     FC F8 F5 F8 
12154     FC FC FE 04 
12158     08 07 07 09 | 	byte	$08, $04, $ff, $fd, $fc, $f8, $f5, $f8, $fc, $fc, $fe, $04, $08, $07, $07, $09
1215c     08 03 FE FE 
12160     FC F7 F6 F9 
12164     FB FB FE 05 
12168     08 07 07 0A | 	byte	$08, $03, $fe, $fe, $fc, $f7, $f6, $f9, $fb, $fb, $fe, $05, $08, $07, $07, $0a
1216c     08 01 FF FF 
12170     FB F5 F6 FA 
12174     FB FB FF 05 
12178     07 06 08 0A | 	byte	$08, $01, $ff, $ff, $fb, $f5, $f6, $fa, $fb, $fb, $ff, $05, $07, $06, $08, $0a
1217c     06 01 FF FF 
12180     FA F5 F7 FB 
12184     FB FB 01 07 
12188     07 06 09 0B | 	byte	$06, $01, $ff, $ff, $fa, $f5, $f7, $fb, $fb, $fb, $01, $07, $07, $06, $09, $0b
1218c     06 00 00 FF 
12190     F9 F5 F8 FB 
12194     F9 FB 02 07 
12198     05 06 0A 0A | 	byte	$06, $00, $00, $ff, $f9, $f5, $f8, $fb, $f9, $fb, $02, $07, $05, $06, $0a, $0a
1219c     04 00 00 FE 
121a0     F7 F5 F9 FA 
121a4     F8 FB 03 06 
121a8     05 07 0B 0A | 	byte	$04, $00, $00, $fe, $f7, $f5, $f9, $fa, $f8, $fb, $03, $06, $05, $07, $0b, $0a
121ac     03 00 02 FE 
121b0     F6 F6 FA FA 
121b4     F8 FD 04 06 
121b8     04 07 0C 08 | 	byte	$03, $00, $02, $fe, $f6, $f6, $fa, $fa, $f8, $fd, $04, $06, $04, $07, $0c, $08
121bc     02 01 02 FC 
121c0     F6 F7 FA F9 
121c4     F8 FE 04 05 
121c8     04 09 0C 08 | 	byte	$02, $01, $02, $fc, $f6, $f7, $fa, $f9, $f8, $fe, $04, $05, $04, $09, $0c, $08
121cc     02 03 02 FA 
121d0     F6 F8 FA F7 
121d4     F8 FF 05 03 
121d8     05 0A 0B 06 | 	byte	$02, $03, $02, $fa, $f6, $f8, $fa, $f7, $f8, $ff, $05, $03, $05, $0a, $0b, $06
121dc     03 04 01 F9 
121e0     F6 FA FA F6 
121e4     F9 01 04 03 
121e8     05 0B 0A 05 | 	byte	$03, $04, $01, $f9, $f6, $fa, $fa, $f6, $f9, $01, $04, $03, $05, $0b, $0a, $05
121ec     03 04 FF F8 
121f0     F7 F9 F8 F5 
121f4     FA 02 03 02 
121f8     07 0C 09 04 | 	byte	$03, $04, $ff, $f8, $f7, $f9, $f8, $f5, $fa, $02, $03, $02, $07, $0c, $09, $04
121fc     04 04 FE F7 
12200     F8 FA F7 F5 
12204     FC 01 01 02 
12208     09 0C 07 04 | 	byte	$04, $04, $fe, $f7, $f8, $fa, $f7, $f5, $fc, $01, $01, $02, $09, $0c, $07, $04
1220c     06 04 FD F8 
12210     FA FA F5 F6 
12214     FD 01 00 03 
12218     0A 0B 06 04 | 	byte	$06, $04, $fd, $f8, $fa, $fa, $f5, $f6, $fd, $01, $00, $03, $0a, $0b, $06, $04
1221c     06 03 FB F9 
12220     FB F9 F4 F7 
12224     FF 01 00 04 
12228     0B 0B 05 06 | 	byte	$06, $03, $fb, $f9, $fb, $f9, $f4, $f7, $ff, $01, $00, $04, $0b, $0b, $05, $06
1222c     07 02 FA F9 
12230     FB F8 F5 F9 
12234     00 00 00 06 
12238     0B 09 05 07 | 	byte	$07, $02, $fa, $f9, $fb, $f8, $f5, $f9, $00, $00, $00, $06, $0b, $09, $05, $07
1223c     07 00 FA FB 
12240     FB F6 F4 FB 
12244     FF FE 00 08 
12248     0B 08 06 09 | 	byte	$07, $00, $fa, $fb, $fb, $f6, $f4, $fb, $ff, $fe, $00, $08, $0b, $08, $06, $09
1224c     07 FE FA FC 
12250     FA F4 F4 FC 
12254     FF FD 01 09 
12258     0B 06 06 0A | 	byte	$07, $fe, $fa, $fc, $fa, $f4, $f4, $fc, $ff, $fd, $01, $09, $0b, $06, $06, $0a
1225c     06 FC FA FC 
12260     F9 F3 F6 FD 
12264     FE FD 02 0A 
12268     0A 06 08 0A | 	byte	$06, $fc, $fa, $fc, $f9, $f3, $f6, $fd, $fe, $fd, $02, $0a, $0a, $06, $08, $0a
1226c     03 FC FC FD 
12270     F7 F3 F7 FD 
12274     FD FC 04 0A 
12278     08 06 09 09 | 	byte	$03, $fc, $fc, $fd, $f7, $f3, $f7, $fd, $fd, $fc, $04, $0a, $08, $06, $09, $09
1227c     02 FC FD FD 
12280     F6 F3 F9 FE 
12284     FB FD 06 0A 
12288     07 06 0B 09 | 	byte	$02, $fc, $fd, $fd, $f6, $f3, $f9, $fe, $fb, $fd, $06, $0a, $07, $06, $0b, $09
1228c     01 FC FE FC 
12290     F4 F4 FB FD 
12294     FA FF 07 0A 
12298     06 07 0B 07 | 	byte	$01, $fc, $fe, $fc, $f4, $f4, $fb, $fd, $fa, $ff, $07, $0a, $06, $07, $0b, $07
1229c     FF FD FF FA 
122a0     F4 F5 FB FB 
122a4     FA 00 08 08 
122a8     05 08 0C 06 | 	byte	$ff, $fd, $ff, $fa, $f4, $f5, $fb, $fb, $fa, $00, $08, $08, $05, $08, $0c, $06
122ac     FF FE FF F8 
122b0     F3 F7 FB FA 
122b4     FA 02 08 07 
122b8     05 0A 0C 04 | 	byte	$ff, $fe, $ff, $f8, $f3, $f7, $fb, $fa, $fa, $02, $08, $07, $05, $0a, $0c, $04
122bc     FE 00 FE F7 
122c0     F3 F8 FB F8 
122c4     FA 03 08 05 
122c8     06 0C 0B 03 | 	byte	$fe, $00, $fe, $f7, $f3, $f8, $fb, $f8, $fa, $03, $08, $05, $06, $0c, $0b, $03
122cc     FF 00 FD F6 
122d0     F4 F9 FA F8 
122d4     FB 04 07 05 
122d8     07 0C 0A 02 | 	byte	$ff, $00, $fd, $f6, $f4, $f9, $fa, $f8, $fb, $04, $07, $05, $07, $0c, $0a, $02
122dc     00 01 FC F5 
122e0     F5 F9 F9 F7 
122e4     FD 05 05 04 
122e8     08 0C 08 02 | 	byte	$00, $01, $fc, $f5, $f5, $f9, $f9, $f7, $fd, $05, $05, $04, $08, $0c, $08, $02
122ec     02 01 FB F5 
122f0     F7 FA F7 F6 
122f4     FE 04 04 04 
122f8     09 0C 07 02 | 	byte	$02, $01, $fb, $f5, $f7, $fa, $f7, $f6, $fe, $04, $04, $04, $09, $0c, $07, $02
122fc     02 00 FA F5 
12300     F8 F9 F7 F8 
12304     00 04 04 06 
12308     0B 0B 06 03 | 	byte	$02, $00, $fa, $f5, $f8, $f9, $f7, $f8, $00, $04, $04, $06, $0b, $0b, $06, $03
1230c     03 FF F8 F6 
12310     F9 F9 F7 FA 
12314     01 04 04 07 
12318     0C 0B 05 04 | 	byte	$03, $ff, $f8, $f6, $f9, $f9, $f7, $fa, $01, $04, $04, $07, $0c, $0b, $05, $04
1231c     04 FE F8 F7 
12320     F9 F7 F6 FB 
12324     01 03 03 08 
12328     0C 09 05 05 | 	byte	$04, $fe, $f8, $f7, $f9, $f7, $f6, $fb, $01, $03, $03, $08, $0c, $09, $05, $05
1232c     03 FD F7 F8 
12330     F8 F6 F6 FC 
12334     01 02 04 09 
12338     0B 08 05 05 | 	byte	$03, $fd, $f7, $f8, $f8, $f6, $f6, $fc, $01, $02, $04, $09, $0b, $08, $05, $05
1233c     03 FC F8 F9 
12340     F8 F6 F7 FE 
12344     01 01 05 0A 
12348     0B 08 07 06 | 	byte	$03, $fc, $f8, $f9, $f8, $f6, $f7, $fe, $01, $01, $05, $0a, $0b, $08, $07, $06
1234c     02 FB F9 F9 
12350     F7 F5 F9 FE 
12354     00 01 07 0B 
12358     0A 07 07 06 | 	byte	$02, $fb, $f9, $f9, $f7, $f5, $f9, $fe, $00, $01, $07, $0b, $0a, $07, $07, $06
1235c     00 FA FA F9 
12360     F6 F5 FA FE 
12364     FF 02 08 0B 
12368     09 08 08 06 | 	byte	$00, $fa, $fa, $f9, $f6, $f5, $fa, $fe, $ff, $02, $08, $0b, $09, $08, $08, $06
1236c     FF FB FA F9 
12370     F5 F5 FA FE 
12374     FF 03 08 0A 
12378     08 08 09 05 | 	byte	$ff, $fb, $fa, $f9, $f5, $f5, $fa, $fe, $ff, $03, $08, $0a, $08, $08, $09, $05
1237c     FE FB FA F7 
12380     F4 F6 FA FD 
12384     FF 03 09 09 
12388     08 09 09 04 | 	byte	$fe, $fb, $fa, $f7, $f4, $f6, $fa, $fd, $ff, $03, $09, $09, $08, $09, $09, $04
1238c     FE FC FB F6 
12390     F4 F7 FB FC 
12394     FF 05 09 08 
12398     08 0A 09 02 | 	byte	$fe, $fc, $fb, $f6, $f4, $f7, $fb, $fc, $ff, $05, $09, $08, $08, $0a, $09, $02
1239c     FD FD FA F6 
123a0     F5 F9 FB FC 
123a4     FF 05 09 08 
123a8     09 0A 07 02 | 	byte	$fd, $fd, $fa, $f6, $f5, $f9, $fb, $fc, $ff, $05, $09, $08, $09, $0a, $07, $02
123ac     FE FD F9 F5 
123b0     F5 F9 FA FB 
123b4     01 06 08 08 
123b8     09 0A 06 01 | 	byte	$fe, $fd, $f9, $f5, $f5, $f9, $fa, $fb, $01, $06, $08, $08, $09, $0a, $06, $01
123bc     FE FC F8 F4 
123c0     F6 F8 F9 FB 
123c4     01 06 07 08 
123c8     0A 0A 05 01 | 	byte	$fe, $fc, $f8, $f4, $f6, $f8, $f9, $fb, $01, $06, $07, $08, $0a, $0a, $05, $01
123cc     FF FD F7 F5 
123d0     F7 F8 F8 FB 
123d4     02 06 06 08 
123d8     0A 09 04 01 | 	byte	$ff, $fd, $f7, $f5, $f7, $f8, $f8, $fb, $02, $06, $06, $08, $0a, $09, $04, $01
123dc     FF FC F7 F6 
123e0     F7 F8 F9 FD 
123e4     03 06 07 09 
123e8     0B 09 05 02 | 	byte	$ff, $fc, $f7, $f6, $f7, $f8, $f9, $fd, $03, $06, $07, $09, $0b, $09, $05, $02
123ec     00 FB F7 F7 
123f0     F8 F8 F9 FF 
123f4     03 05 07 0B 
123f8     0B 08 05 03 | 	byte	$00, $fb, $f7, $f7, $f8, $f8, $f9, $ff, $03, $05, $07, $0b, $0b, $08, $05, $03
123fc     00 FA F7 F7 
12400     F7 F7 FA FF 
12404     03 05 08 0B 
12408     0B 07 05 04 | 	byte	$00, $fa, $f7, $f7, $f7, $f7, $fa, $ff, $03, $05, $08, $0b, $0b, $07, $05, $04
1240c     FE F9 F7 F7 
12410     F7 F6 FA FF 
12414     02 04 08 0B 
12418     0A 07 05 03 | 	byte	$fe, $f9, $f7, $f7, $f7, $f6, $fa, $ff, $02, $04, $08, $0b, $0a, $07, $05, $03
1241c     FD F9 F8 F8 
12420     F6 F7 FB 00 
12424     02 04 0A 0B 
12428     08 07 07 03 | 	byte	$fd, $f9, $f8, $f8, $f6, $f7, $fb, $00, $02, $04, $0a, $0b, $08, $07, $07, $03
1242c     FC F9 F9 F8 
12430     F5 F7 FD 00 
12434     01 05 0B 0B 
12438     07 07 07 02 | 	byte	$fc, $f9, $f9, $f8, $f5, $f7, $fd, $00, $01, $05, $0b, $0b, $07, $07, $07, $02
1243c     FB F9 F9 F7 
12440     F4 F7 FD FF 
12444     01 05 0B 0A 
12448     07 08 08 01 | 	byte	$fb, $f9, $f9, $f7, $f4, $f7, $fd, $ff, $01, $05, $0b, $0a, $07, $08, $08, $01
1244c     FB FA FA F6 
12450     F4 F9 FE FF 
12454     00 07 0B 09 
12458     07 09 07 FF | 	byte	$fb, $fa, $fa, $f6, $f4, $f9, $fe, $ff, $00, $07, $0b, $09, $07, $09, $07, $ff
1245c     FA FB F9 F4 
12460     F3 F9 FD FD 
12464     00 08 0B 08 
12468     07 0A 06 FE | 	byte	$fa, $fb, $f9, $f4, $f3, $f9, $fd, $fd, $00, $08, $0b, $08, $07, $0a, $06, $fe
1246c     FB FC F9 F4 
12470     F5 FB FD FC 
12474     02 09 0B 07 
12478     08 0B 07 FE | 	byte	$fb, $fc, $f9, $f4, $f5, $fb, $fd, $fc, $02, $09, $0b, $07, $08, $0b, $07, $fe
1247c     FC FD F8 F3 
12480     F6 FC FC FC 
12484     02 0A 0A 07 
12488     09 0B 04 FD | 	byte	$fc, $fd, $f8, $f3, $f6, $fc, $fc, $fc, $02, $0a, $0a, $07, $09, $0b, $04, $fd
1248c     FC FC F6 F3 
12490     F6 FB FB FC 
12494     04 0A 08 07 
12498     0A 0A 03 FD | 	byte	$fc, $fc, $f6, $f3, $f6, $fb, $fb, $fc, $04, $0a, $08, $07, $0a, $0a, $03, $fd
1249c     FD FC F5 F2 
124a0     F8 FB F9 FC 
124a4     05 09 07 07 
124a8     0C 0A 02 FE | 	byte	$fd, $fc, $f5, $f2, $f8, $fb, $f9, $fc, $05, $09, $07, $07, $0c, $0a, $02, $fe
124ac     FE FC F4 F4 
124b0     F9 FA F8 FD 
124b4     06 08 06 08 
124b8     0C 08 01 FE | 	byte	$fe, $fc, $f4, $f4, $f9, $fa, $f8, $fd, $06, $08, $06, $08, $0c, $08, $01, $fe
124bc     FF FB F4 F5 
124c0     FA FA F9 FF 
124c4     07 08 06 0A 
124c8     0C 08 01 00 | 	byte	$ff, $fb, $f4, $f5, $fa, $fa, $f9, $ff, $07, $08, $06, $0a, $0c, $08, $01, $00
124cc     FF F9 F4 F6 
124d0     FA F9 F9 01 
124d4     07 07 06 0B 
124d8     0C 05 01 01 | 	byte	$ff, $f9, $f4, $f6, $fa, $f9, $f9, $01, $07, $07, $06, $0b, $0c, $05, $01, $01
124dc     FF F7 F4 F7 
124e0     F9 F7 F9 02 
124e4     07 06 07 0C 
124e8     0B 05 01 02 | 	byte	$ff, $f7, $f4, $f7, $f9, $f7, $f9, $02, $07, $06, $07, $0c, $0b, $05, $01, $02
124ec     FE F6 F4 F8 
124f0     F8 F7 FB 03 
124f4     05 05 08 0D 
124f8     0A 04 03 02 | 	byte	$fe, $f6, $f4, $f8, $f8, $f7, $fb, $03, $05, $05, $08, $0d, $0a, $04, $03, $02
124fc     FC F6 F6 F9 
12500     F7 F7 FC 03 
12504     04 05 0A 0D 
12508     09 04 04 02 | 	byte	$fc, $f6, $f6, $f9, $f7, $f7, $fc, $03, $04, $05, $0a, $0d, $09, $04, $04, $02
1250c     FB F6 F7 F9 
12510     F6 F7 FE 04 
12514     04 05 0B 0C 
12518     07 04 04 02 | 	byte	$fb, $f6, $f7, $f9, $f6, $f7, $fe, $04, $04, $05, $0b, $0c, $07, $04, $04, $02
1251c     F9 F6 F8 F8 
12520     F5 F7 FF 03 
12524     02 06 0C 0C 
12528     07 05 05 00 | 	byte	$f9, $f6, $f8, $f8, $f5, $f7, $ff, $03, $02, $06, $0c, $0c, $07, $05, $05, $00
1252c     F9 F7 F9 F7 
12530     F5 F9 00 02 
12534     02 07 0D 0A 
12538     06 06 05 FE | 	byte	$f9, $f7, $f9, $f7, $f5, $f9, $00, $02, $02, $07, $0d, $0a, $06, $06, $05, $fe
1253c     F8 F8 F8 F5 
12540     F5 FA 00 01 
12544     02 09 0D 09 
12548     06 07 05 FD | 	byte	$f8, $f8, $f8, $f5, $f5, $fa, $00, $01, $02, $09, $0d, $09, $06, $07, $05, $fd
1254c     F8 F9 F9 F5 
12550     F5 FC 00 00 
12554     03 0A 0C 08 
12558     06 08 04 FC | 	byte	$f8, $f9, $f9, $f5, $f5, $fc, $00, $00, $03, $0a, $0c, $08, $06, $08, $04, $fc
1255c     F9 FA F8 F4 
12560     F5 FC FF 00 
12564     04 0B 0B 07 
12568     08 08 03 FB | 	byte	$f9, $fa, $f8, $f4, $f5, $fc, $ff, $00, $04, $0b, $0b, $07, $08, $08, $03, $fb
1256c     F9 FA F6 F3 
12570     F7 FD FE FF 
12574     05 0B 0A 07 
12578     08 08 01 FB | 	byte	$f9, $fa, $f6, $f3, $f7, $fd, $fe, $ff, $05, $0b, $0a, $07, $08, $08, $01, $fb
1257c     FA FA F5 F3 
12580     F8 FD FD FF 
12584     06 0B 09 07 
12588     09 08 01 FB | 	byte	$fa, $fa, $f5, $f3, $f8, $fd, $fd, $ff, $06, $0b, $09, $07, $09, $08, $01, $fb
1258c     FB FA F5 F4 
12590     F9 FC FC 00 
12594     07 0A 08 07 
12598     09 07 FF FC | 	byte	$fb, $fa, $f5, $f4, $f9, $fc, $fc, $00, $07, $0a, $08, $07, $09, $07, $ff, $fc
1259c     FC F9 F5 F5 
125a0     FA FC FC 02 
125a4     08 09 08 09 
125a8     0A 06 00 FD | 	byte	$fc, $f9, $f5, $f5, $fa, $fc, $fc, $02, $08, $09, $08, $09, $0a, $06, $00, $fd
125ac     FD F8 F4 F6 
125b0     FB FB FD 03 
125b4     08 09 08 0A 
125b8     0A 05 FF FD | 	byte	$fd, $f8, $f4, $f6, $fb, $fb, $fd, $03, $08, $09, $08, $0a, $0a, $05, $ff, $fd
125bc     FC F7 F4 F7 
125c0     FA FB FD 03 
125c4     08 08 08 0A 
125c8     09 04 FF FE | 	byte	$fc, $f7, $f4, $f7, $fa, $fb, $fd, $03, $08, $08, $08, $0a, $09, $04, $ff, $fe
125cc     FC F6 F4 F7 
125d0     F9 FA FD 04 
125d4     07 07 09 0B 
125d8     09 03 00 FF | 	byte	$fc, $f6, $f4, $f7, $f9, $fa, $fd, $04, $07, $07, $09, $0b, $09, $03, $00, $ff
125dc     FB F6 F5 F8 
125e0     F9 FA FF 04 
125e4     06 07 0A 0B 
125e8     08 03 01 FF | 	byte	$fb, $f6, $f5, $f8, $f9, $fa, $ff, $04, $06, $07, $0a, $0b, $08, $03, $01, $ff
125ec     FA F6 F6 F8 
125f0     F8 FA 00 05 
125f4     06 08 0A 0A 
125f8     07 04 01 FE | 	byte	$fa, $f6, $f6, $f8, $f8, $fa, $00, $05, $06, $08, $0a, $0a, $07, $04, $01, $fe
125fc     F9 F6 F7 F8 
12600     F8 FB 00 04 
12604     06 08 0B 0A 
12608     06 04 02 FE | 	byte	$f9, $f6, $f7, $f8, $f8, $fb, $00, $04, $06, $08, $0b, $0a, $06, $04, $02, $fe
1260c     F9 F7 F7 F7 
12610     F8 FC 01 04 
12614     06 09 0B 09 
12618     06 04 02 FC | 	byte	$f9, $f7, $f7, $f7, $f8, $fc, $01, $04, $06, $09, $0b, $09, $06, $04, $02, $fc
1261c     F8 F7 F7 F6 
12620     F8 FC 01 03 
12624     06 09 0B 09 
12628     06 05 01 FC | 	byte	$f8, $f7, $f7, $f6, $f8, $fc, $01, $03, $06, $09, $0b, $09, $06, $05, $01, $fc
1262c     F9 F8 F7 F6 
12630     F8 FD 01 03 
12634     06 0A 0A 08 
12638     06 05 00 FC | 	byte	$f9, $f8, $f7, $f6, $f8, $fd, $01, $03, $06, $0a, $0a, $08, $06, $05, $00, $fc
1263c     F9 F8 F6 F6 
12640     F9 FD 00 02 
12644     06 0A 0A 08 
12648     07 04 00 FB | 	byte	$f9, $f8, $f6, $f6, $f9, $fd, $00, $02, $06, $0a, $0a, $08, $07, $04, $00, $fb
1264c     F9 F8 F5 F5 
12650     F9 FD FF 03 
12654     07 0A 09 08 
12658     07 04 FF FB | 	byte	$f9, $f8, $f5, $f5, $f9, $fd, $ff, $03, $07, $0a, $09, $08, $07, $04, $ff, $fb
1265c     FA F7 F5 F6 
12660     FA FD FF 03 
12664     08 0A 09 08 
12668     08 05 FE FB | 	byte	$fa, $f7, $f5, $f6, $fa, $fd, $ff, $03, $08, $0a, $09, $08, $08, $05, $fe, $fb
1266c     FA F7 F5 F7 
12670     F9 FC FE 04 
12674     07 08 08 09 
12678     08 03 FE FC | 	byte	$fa, $f7, $f5, $f7, $f9, $fc, $fe, $04, $07, $08, $08, $09, $08, $03, $fe, $fc
1267c     FA F7 F5 F7 
12680     FA FC FF 04 
12684     08 08 09 0A 
12688     07 03 FF FD | 	byte	$fa, $f7, $f5, $f7, $fa, $fc, $ff, $04, $08, $08, $09, $0a, $07, $03, $ff, $fd
1268c     FA F6 F6 F8 
12690     FB FC 00 05 
12694     08 08 09 0A 
12698     07 02 FF FD | 	byte	$fa, $f6, $f6, $f8, $fb, $fc, $00, $05, $08, $08, $09, $0a, $07, $02, $ff, $fd
1269c     F9 F6 F6 F8 
126a0     FA FC 01 05 
126a4     07 08 0A 09 
126a8     07 02 FF FC | 	byte	$f9, $f6, $f6, $f8, $fa, $fc, $01, $05, $07, $08, $0a, $09, $07, $02, $ff, $fc
126ac     F8 F6 F7 F8 
126b0     F9 FC 01 05 
126b4     07 08 0A 09 
126b8     05 02 00 FC | 	byte	$f8, $f6, $f7, $f8, $f9, $fc, $01, $05, $07, $08, $0a, $09, $05, $02, $00, $fc
126bc     F7 F6 F7 F8 
126c0     F9 FC 02 05 
126c4     06 09 0A 09 
126c8     05 02 01 FC | 	byte	$f7, $f6, $f7, $f8, $f9, $fc, $02, $05, $06, $09, $0a, $09, $05, $02, $01, $fc
126cc     F7 F7 F7 F8 
126d0     F8 FD 02 04 
126d4     06 09 0B 08 
126d8     05 03 00 FB | 	byte	$f7, $f7, $f7, $f8, $f8, $fd, $02, $04, $06, $09, $0b, $08, $05, $03, $00, $fb
126dc     F7 F7 F8 F7 
126e0     F9 FE 02 04 
126e4     07 0A 0A 07 
126e8     05 04 00 FB | 	byte	$f7, $f7, $f8, $f7, $f9, $fe, $02, $04, $07, $0a, $0a, $07, $05, $04, $00, $fb
126ec     F8 F9 F8 F7 
126f0     FA FF 02 03 
126f4     07 0B 0A 07 
126f8     05 04 FF F9 | 	byte	$f8, $f9, $f8, $f7, $fa, $ff, $02, $03, $07, $0b, $0a, $07, $05, $04, $ff, $f9
126fc     F8 F8 F7 F6 
12700     F9 FF 01 02 
12704     07 0B 0A 06 
12708     06 04 FE FA | 	byte	$f8, $f8, $f7, $f6, $f9, $ff, $01, $02, $07, $0b, $0a, $06, $06, $04, $fe, $fa
1270c     F9 F9 F6 F6 
12710     FB FF 01 03 
12714     09 0B 08 06 
12718     07 04 FE FA | 	byte	$f9, $f9, $f6, $f6, $fb, $ff, $01, $03, $09, $0b, $08, $06, $07, $04, $fe, $fa
1271c     FA F8 F5 F6 
12720     FC FF 00 03 
12724     0A 0A 07 07 
12728     07 03 FC FA | 	byte	$fa, $f8, $f5, $f6, $fc, $ff, $00, $03, $0a, $0a, $07, $07, $07, $03, $fc, $fa
1272c     FA F7 F4 F7 
12730     FD FE FF 04 
12734     0A 09 07 07 
12738     08 02 FC FB | 	byte	$fa, $f7, $f4, $f7, $fd, $fe, $ff, $04, $0a, $09, $07, $07, $08, $02, $fc, $fb
1273c     FB F6 F4 F8 
12740     FD FD FF 05 
12744     0A 08 07 09 
12748     08 01 FC FC | 	byte	$fb, $f6, $f4, $f8, $fd, $fd, $ff, $05, $0a, $08, $07, $09, $08, $01, $fc, $fc
1274c     FB F5 F4 F8 
12750     FC FC FF 06 
12754     09 07 07 09 
12758     07 00 FC FD | 	byte	$fb, $f5, $f4, $f8, $fc, $fc, $ff, $06, $09, $07, $07, $09, $07, $00, $fc, $fd
1275c     FA F5 F5 FA 
12760     FC FC 00 08 
12764     09 07 08 0B 
12768     06 FF FD FD | 	byte	$fa, $f5, $f5, $fa, $fc, $fc, $00, $08, $09, $07, $08, $0b, $06, $ff, $fd, $fd
1276c     F9 F4 F6 FB 
12770     FC FC 01 08 
12774     08 07 09 0B 
12778     05 FF FE FD | 	byte	$f9, $f4, $f6, $fb, $fc, $fc, $01, $08, $08, $07, $09, $0b, $05, $ff, $fe, $fd
1277c     F8 F4 F7 FB 
12780     FA FB 03 08 
12784     07 07 0A 0A 
12788     04 FF FF FD | 	byte	$f8, $f4, $f7, $fb, $fa, $fb, $03, $08, $07, $07, $0a, $0a, $04, $ff, $ff, $fd
1278c     F6 F4 F8 FB 
12790     F9 FC 04 08 
12794     06 07 0B 0A 
12798     03 00 00 FC | 	byte	$f6, $f4, $f8, $fb, $f9, $fc, $04, $08, $06, $07, $0b, $0a, $03, $00, $00, $fc
1279c     F6 F5 F9 FA 
127a0     F8 FD 05 07 
127a4     05 08 0C 09 
127a8     02 01 01 FC | 	byte	$f6, $f5, $f9, $fa, $f8, $fd, $05, $07, $05, $08, $0c, $09, $02, $01, $01, $fc
127ac     F6 F7 FA F9 
127b0     F8 FF 06 06 
127b4     05 09 0C 07 
127b8     02 02 01 FA | 	byte	$f6, $f7, $fa, $f9, $f8, $ff, $06, $06, $05, $09, $0c, $07, $02, $02, $01, $fa
127bc     F5 F8 FA F8 
127c0     F8 01 05 04 
127c4     05 0B 0C 06 
127c8     02 03 01 F9 | 	byte	$f5, $f8, $fa, $f8, $f8, $01, $05, $04, $05, $0b, $0c, $06, $02, $03, $01, $f9
127cc     F5 F9 F9 F7 
127d0     F9 01 04 03 
127d4     06 0C 0B 04 
127d8     03 04 FF F8 | 	byte	$f5, $f9, $f9, $f7, $f9, $01, $04, $03, $06, $0c, $0b, $04, $03, $04, $ff, $f8
127dc     F6 FA F8 F6 
127e0     FA 02 03 02 
127e4     07 0C 09 04 
127e8     04 04 FE F7 | 	byte	$f6, $fa, $f8, $f6, $fa, $02, $03, $02, $07, $0c, $09, $04, $04, $04, $fe, $f7
127ec     F8 FA F7 F5 
127f0     FC 02 02 03 
127f4     08 0C 08 04 
127f8     06 05 FD F7 | 	byte	$f8, $fa, $f7, $f5, $fc, $02, $02, $03, $08, $0c, $08, $04, $06, $05, $fd, $f7
127fc     FA FA F6 F6 
12800     FE 02 01 03 
12804     0A 0C 06 05 
12808     07 03 FB F7 | 	byte	$fa, $fa, $f6, $f6, $fe, $02, $01, $03, $0a, $0c, $06, $05, $07, $03, $fb, $f7
1280c     FA F9 F5 F7 
12810     FE 01 00 04 
12814     0A 0B 05 05 
12818     07 02 FA F9 | 	byte	$fa, $f9, $f5, $f7, $fe, $01, $00, $04, $0a, $0b, $05, $05, $07, $02, $fa, $f9
1281c     FB F8 F4 F7 
12820     FF 00 FF 05 
12824     0B 09 05 07 
12828     07 01 FA FA | 	byte	$fb, $f8, $f4, $f7, $ff, $00, $ff, $05, $0b, $09, $05, $07, $07, $01, $fa, $fa
1282c     FB F7 F4 F9 
12830     FE FE FF 06 
12834     0B 07 05 08 
12838     07 FF FA FC | 	byte	$fb, $f7, $f4, $f9, $fe, $fe, $ff, $06, $0b, $07, $05, $08, $07, $ff, $fa, $fc
1283c     FB F6 F4 FB 
12840     FF FE 00 08 
12844     0B 07 06 09 
12848     07 FF FB FD | 	byte	$fb, $f6, $f4, $fb, $ff, $fe, $00, $08, $0b, $07, $06, $09, $07, $ff, $fb, $fd
1284c     FA F5 F6 FD 
12850     FE FD 02 09 
12854     0A 06 07 0A 
12858     05 FD FC FD | 	byte	$fa, $f5, $f6, $fd, $fe, $fd, $02, $09, $0a, $06, $07, $0a, $05, $fd, $fc, $fd
1285c     F9 F4 F7 FD 
12860     FD FC 02 09 
12864     08 05 08 0A 
12868     04 FD FD FD | 	byte	$f9, $f4, $f7, $fd, $fd, $fc, $02, $09, $08, $05, $08, $0a, $04, $fd, $fd, $fd
1286c     F7 F4 F8 FC 
12870     FB FC 04 09 
12874     07 06 09 0A 
12878     03 FD FF FD | 	byte	$f7, $f4, $f8, $fc, $fb, $fc, $04, $09, $07, $06, $09, $0a, $03, $fd, $ff, $fd
1287c     F6 F4 F9 FC 
12880     FA FD 05 08 
12884     06 07 0B 09 
12888     01 FE FF FC | 	byte	$f6, $f4, $f9, $fc, $fa, $fd, $05, $08, $06, $07, $0b, $09, $01, $fe, $ff, $fc
1288c     F6 F6 FA FB 
12890     FA FE 06 07 
12894     05 08 0B 07 
12898     01 FF 00 FB | 	byte	$f6, $f6, $fa, $fb, $fa, $fe, $06, $07, $05, $08, $0b, $07, $01, $ff, $00, $fb
1289c     F5 F7 FB FA 
128a0     FA 00 06 06 
128a4     05 09 0B 06 
128a8     01 01 FF F9 | 	byte	$f5, $f7, $fb, $fa, $fa, $00, $06, $06, $05, $09, $0b, $06, $01, $01, $ff, $f9
128ac     F5 F7 FB F9 
128b0     FA 01 06 05 
128b4     05 09 0A 05 
128b8     01 01 FE F8 | 	byte	$f5, $f7, $fb, $f9, $fa, $01, $06, $05, $05, $09, $0a, $05, $01, $01, $fe, $f8
128bc     F5 F9 FA F8 
128c0     FB 01 05 04 
128c4     06 0A 0A 04 
128c8     02 02 FE F8 | 	byte	$f5, $f9, $fa, $f8, $fb, $01, $05, $04, $06, $0a, $0a, $04, $02, $02, $fe, $f8
128cc     F7 F9 F9 F8 
128d0     FC 03 04 04 
128d4     08 0B 09 04 
128d8     03 02 FD F8 | 	byte	$f7, $f9, $f9, $f8, $fc, $03, $04, $04, $08, $0b, $09, $04, $03, $02, $fd, $f8
128dc     F8 F9 F8 F8 
128e0     FD 02 03 04 
128e4     08 0B 07 03 
128e8     03 02 FB F7 | 	byte	$f8, $f9, $f8, $f8, $fd, $02, $03, $04, $08, $0b, $07, $03, $03, $02, $fb, $f7
128ec     F8 F9 F7 F8 
128f0     FD 02 02 04 
128f4     09 0A 06 04 
128f8     04 01 FB F8 | 	byte	$f8, $f9, $f7, $f8, $fd, $02, $02, $04, $09, $0a, $06, $04, $04, $01, $fb, $f8
128fc     F9 F8 F6 F8 
12900     FE 01 02 05 
12904     09 09 06 05 
12908     04 00 FA F9 | 	byte	$f9, $f8, $f6, $f8, $fe, $01, $02, $05, $09, $09, $06, $05, $04, $00, $fa, $f9
1290c     FA F8 F6 F9 
12910     FF 00 02 06 
12914     09 08 05 05 
12918     04 FF FB FA | 	byte	$fa, $f8, $f6, $f9, $ff, $00, $02, $06, $09, $08, $05, $05, $04, $ff, $fb, $fa
1291c     FA F7 F7 FB 
12920     FF 00 02 07 
12924     0A 08 06 06 
12928     04 FF FB FB | 	byte	$fa, $f7, $f7, $fb, $ff, $00, $02, $07, $0a, $08, $06, $06, $04, $ff, $fb, $fb
1292c     FA F7 F8 FC 
12930     FF 00 03 08 
12934     09 07 07 07 
12938     03 FE FC FB | 	byte	$fa, $f7, $f8, $fc, $ff, $00, $03, $08, $09, $07, $07, $07, $03, $fe, $fc, $fb
1293c     F9 F7 F8 FC 
12940     FE 00 04 08 
12944     08 07 07 06 
12948     02 FE FC FB | 	byte	$f9, $f7, $f8, $fc, $fe, $00, $04, $08, $08, $07, $07, $06, $02, $fe, $fc, $fb
1294c     F8 F6 F9 FC 
12950     FE 00 05 08 
12954     07 07 08 06 
12958     02 FE FD FB | 	byte	$f8, $f6, $f9, $fc, $fe, $00, $05, $08, $07, $07, $08, $06, $02, $fe, $fd, $fb
1295c     F7 F7 F9 FC 
12960     FD 00 04 07 
12964     07 08 08 05 
12968     01 FF FD FA | 	byte	$f7, $f7, $f9, $fc, $fd, $00, $04, $07, $07, $08, $08, $05, $01, $ff, $fd, $fa
1296c     F7 F8 FA FB 
12970     FD 01 05 06 
12974     07 08 08 04 
12978     01 FF FD F9 | 	byte	$f7, $f8, $fa, $fb, $fd, $01, $05, $06, $07, $08, $08, $04, $01, $ff, $fd, $f9
1297c     F7 F8 FA FB 
12980     FD 02 05 06 
12984     07 09 08 04 
12988     01 00 FD F9 | 	byte	$f7, $f8, $fa, $fb, $fd, $02, $05, $06, $07, $09, $08, $04, $01, $00, $fd, $f9
1298c     F8 F9 FA FA 
12990     FD 03 04 06 
12994     07 08 07 03 
12998     01 FF FC F9 | 	byte	$f8, $f9, $fa, $fa, $fd, $03, $04, $06, $07, $08, $07, $03, $01, $ff, $fc, $f9
1299c     F8 F9 F9 FB 
129a0     FF 02 04 05 
129a4     08 09 06 03 
129a8     02 00 FB F9 | 	byte	$f8, $f9, $f9, $fb, $ff, $02, $04, $05, $08, $09, $06, $03, $02, $00, $fb, $f9
129ac     F9 F9 F9 FB 
129b0     FF 02 03 05 
129b4     09 08 05 03 
129b8     03 FF FA F9 | 	byte	$f9, $f9, $f9, $fb, $ff, $02, $03, $05, $09, $08, $05, $03, $03, $ff, $fa, $f9
129bc     F9 F9 F8 FB 
129c0     00 02 03 06 
129c4     08 07 05 03 
129c8     02 FE FA F9 | 	byte	$f9, $f9, $f8, $fb, $00, $02, $03, $06, $08, $07, $05, $03, $02, $fe, $fa, $f9
129cc     F9 F8 F8 FC 
129d0     00 01 03 06 
129d4     09 07 04 04 
129d8     02 FD FA FA | 	byte	$f9, $f8, $f8, $fc, $00, $01, $03, $06, $09, $07, $04, $04, $02, $fd, $fa, $fa
129dc     F9 F7 F8 FD 
129e0     00 01 03 07 
129e4     09 06 05 05 
129e8     02 FC FA FB | 	byte	$f9, $f7, $f8, $fd, $00, $01, $03, $07, $09, $06, $05, $05, $02, $fc, $fa, $fb
129ec     F9 F7 F8 FD 
129f0     FF 00 03 08 
129f4     08 05 05 05 
129f8     02 FD FB FC | 	byte	$f9, $f7, $f8, $fd, $ff, $00, $03, $08, $08, $05, $05, $05, $02, $fd, $fb, $fc
129fc     F9 F7 F9 FE 
12a00     FF 00 05 08 
12a04     08 06 06 06 
12a08     01 FC FC FC | 	byte	$f9, $f7, $f9, $fe, $ff, $00, $05, $08, $08, $06, $06, $06, $01, $fc, $fc, $fc
12a0c     F8 F7 FB FF 
12a10     FF 00 05 08 
12a14     06 05 07 06 
12a18     00 FC FD FB | 	byte	$f8, $f7, $fb, $ff, $ff, $00, $05, $08, $06, $05, $07, $06, $00, $fc, $fd, $fb
12a1c     F8 F7 FC FE 
12a20     FE 01 06 08 
12a24     05 05 07 05 
12a28     FE FD FD FA | 	byte	$f8, $f7, $fc, $fe, $fe, $01, $06, $08, $05, $05, $07, $05, $fe, $fd, $fd, $fa
12a2c     F7 F8 FC FD 
12a30     FD 01 07 07 
12a34     05 06 08 04 
12a38     FE FD FD FA | 	byte	$f7, $f8, $fc, $fd, $fd, $01, $07, $07, $05, $06, $08, $04, $fe, $fd, $fd, $fa
12a3c     F6 F8 FC FC 
12a40     FD 02 07 06 
12a44     05 07 08 03 
12a48     FE FF FE F9 | 	byte	$f6, $f8, $fc, $fc, $fd, $02, $07, $06, $05, $07, $08, $03, $fe, $ff, $fe, $f9
12a4c     F7 FA FD FC 
12a50     FD 03 06 05 
12a54     05 08 07 02 
12a58     FF 00 FD F8 | 	byte	$f7, $fa, $fd, $fc, $fd, $03, $06, $05, $05, $08, $07, $02, $ff, $00, $fd, $f8
12a5c     F7 FB FC FB 
12a60     FF 04 06 05 
12a64     06 09 07 01 
12a68     00 00 FD F8 | 	byte	$f7, $fb, $fc, $fb, $ff, $04, $06, $05, $06, $09, $07, $01, $00, $00, $fd, $f8
12a6c     F9 FC FC FB 
12a70     FF 05 05 04 
12a74     07 09 05 01 
12a78     00 00 FB F7 | 	byte	$f9, $fc, $fc, $fb, $ff, $05, $05, $04, $07, $09, $05, $01, $00, $00, $fb, $f7
12a7c     F9 FB FA FB 
12a80     00 04 04 04 
12a84     08 09 04 01 
12a88     02 00 FA F8 | 	byte	$f9, $fb, $fa, $fb, $00, $04, $04, $04, $08, $09, $04, $01, $02, $00, $fa, $f8
12a8c     FA FB FA FB 
12a90     01 04 03 04 
12a94     09 08 04 02 
12a98     02 FF F9 F8 | 	byte	$fa, $fb, $fa, $fb, $01, $04, $03, $04, $09, $08, $04, $02, $02, $ff, $f9, $f8
12a9c     FB FB F9 FC 
12aa0     02 03 02 05 
12aa4     09 07 03 02 
12aa8     02 FE F9 F9 | 	byte	$fb, $fb, $f9, $fc, $02, $03, $02, $05, $09, $07, $03, $02, $02, $fe, $f9, $f9
12aac     FB FA F8 FC 
12ab0     02 02 02 06 
12ab4     09 06 02 03 
12ab8     02 FD F9 FA | 	byte	$fb, $fa, $f8, $fc, $02, $02, $02, $06, $09, $06, $02, $03, $02, $fd, $f9, $fa
12abc     FB F8 F8 FE 
12ac0     02 01 02 07 
12ac4     09 05 02 04 
12ac8     02 FC F9 FB | 	byte	$fb, $f8, $f8, $fe, $02, $01, $02, $07, $09, $05, $02, $04, $02, $fc, $f9, $fb
12acc     FB F7 F8 FE 
12ad0     01 00 03 08 
12ad4     08 04 03 04 
12ad8     01 FB FA FC | 	byte	$fb, $f7, $f8, $fe, $01, $00, $03, $08, $08, $04, $03, $04, $01, $fb, $fa, $fc
12adc     FA F8 FA 00 
12ae0     01 00 04 09 
12ae4     07 04 05 05 
12ae8     00 FB FB FC | 	byte	$fa, $f8, $fa, $00, $01, $00, $04, $09, $07, $04, $05, $05, $00, $fb, $fb, $fc
12aec     FA F8 FC 00 
12af0     00 01 05 09 
12af4     06 04 05 04 
12af8     FF FB FC FC | 	byte	$fa, $f8, $fc, $00, $00, $01, $05, $09, $06, $04, $05, $04, $ff, $fb, $fc, $fc
12afc     F9 F8 FD 00 
12b00     FF 01 06 08 
12b04     05 04 06 04 
12b08     FE FB FD FB | 	byte	$f9, $f8, $fd, $00, $ff, $01, $06, $08, $05, $04, $06, $04, $fe, $fb, $fd, $fb
12b0c     F8 F8 FD FF 
12b10     FE 02 06 07 
12b14     05 05 06 03 
12b18     FE FD FD FA | 	byte	$f8, $f8, $fd, $ff, $fe, $02, $06, $07, $05, $05, $06, $03, $fe, $fd, $fd, $fa
12b1c     F7 F9 FD FE 
12b20     FE 02 07 06 
12b24     04 05 06 02 
12b28     FE FE FE FA | 	byte	$f7, $f9, $fd, $fe, $fe, $02, $07, $06, $04, $05, $06, $02, $fe, $fe, $fe, $fa
12b2c     F8 FB FE FD 
12b30     FE 03 07 05 
12b34     05 07 06 02 
12b38     FE FF FD F9 | 	byte	$f8, $fb, $fe, $fd, $fe, $03, $07, $05, $05, $07, $06, $02, $fe, $ff, $fd, $f9
12b3c     F8 FB FE FD 
12b40     FF 04 06 05 
12b44     05 07 06 01 
12b48     FF FF FC F9 | 	byte	$f8, $fb, $fe, $fd, $ff, $04, $06, $05, $05, $07, $06, $01, $ff, $ff, $fc, $f9
12b4c     F9 FC FD FC 
12b50     FF 04 05 04 
12b54     05 07 04 00 
12b58     FF FF FC F8 | 	byte	$f9, $fc, $fd, $fc, $ff, $04, $05, $04, $05, $07, $04, $00, $ff, $ff, $fc, $f8
12b5c     FA FC FC FC 
12b60     00 05 04 04 
12b64     06 07 04 00 
12b68     00 FF FB F9 | 	byte	$fa, $fc, $fc, $fc, $00, $05, $04, $04, $06, $07, $04, $00, $00, $ff, $fb, $f9
12b6c     FA FC FB FC 
12b70     01 04 04 05 
12b74     07 07 03 00 
12b78     01 FE FB F9 | 	byte	$fa, $fc, $fb, $fc, $01, $04, $04, $05, $07, $07, $03, $00, $01, $fe, $fb, $f9
12b7c     FB FC FB FD 
12b80     02 04 03 05 
12b84     07 06 02 01 
12b88     01 FE FA FA | 	byte	$fb, $fc, $fb, $fd, $02, $04, $03, $05, $07, $06, $02, $01, $01, $fe, $fa, $fa
12b8c     FB FB FB FE 
12b90     02 03 03 06 
12b94     07 05 02 01 
12b98     01 FD FA FA | 	byte	$fb, $fb, $fb, $fe, $02, $03, $03, $06, $07, $05, $02, $01, $01, $fd, $fa, $fa
12b9c     FB FA FA FF 
12ba0     02 02 03 06 
12ba4     07 04 02 02 
12ba8     01 FC FA FB | 	byte	$fb, $fa, $fa, $ff, $02, $02, $03, $06, $07, $04, $02, $02, $01, $fc, $fa, $fb
12bac     FB F9 FA FF 
12bb0     01 02 03 06 
12bb4     07 04 03 03 
12bb8     00 FC FB FC | 	byte	$fb, $f9, $fa, $ff, $01, $02, $03, $06, $07, $04, $03, $03, $00, $fc, $fb, $fc
12bbc     FB FA FC 00 
12bc0     01 02 05 07 
12bc4     06 04 04 03 
12bc8     FF FC FC FC | 	byte	$fb, $fa, $fc, $00, $01, $02, $05, $07, $06, $04, $04, $03, $ff, $fc, $fc, $fc
12bcc     FA FA FD 00 
12bd0     01 02 05 07 
12bd4     05 04 04 03 
12bd8     FE FC FC FB | 	byte	$fa, $fa, $fd, $00, $01, $02, $05, $07, $05, $04, $04, $03, $fe, $fc, $fc, $fb
12bdc     F9 FA FD 00 
12be0     00 02 06 07 
12be4     05 04 04 02 
12be8     FE FC FC FB | 	byte	$f9, $fa, $fd, $00, $00, $02, $06, $07, $05, $04, $04, $02, $fe, $fc, $fc, $fb
12bec     F9 FA FE FF 
12bf0     00 03 06 06 
12bf4     05 05 05 02 
12bf8     FE FD FC FA | 	byte	$f9, $fa, $fe, $ff, $00, $03, $06, $06, $05, $05, $05, $02, $fe, $fd, $fc, $fa
12bfc     F9 FB FD FE 
12c00     00 03 06 05 
12c04     04 05 04 01 
12c08     FE FE FC FA | 	byte	$f9, $fb, $fd, $fe, $00, $03, $06, $05, $04, $05, $04, $01, $fe, $fe, $fc, $fa
12c0c     FA FC FE FE 
12c10     00 03 06 05 
12c14     05 06 04 01 
12c18     FE FE FC F9 | 	byte	$fa, $fc, $fe, $fe, $00, $03, $06, $05, $05, $06, $04, $01, $fe, $fe, $fc, $f9
12c1c     FA FC FD FE 
12c20     01 04 05 05 
12c24     05 06 03 00 
12c28     FF FE FB FA | 	byte	$fa, $fc, $fd, $fe, $01, $04, $05, $05, $05, $06, $03, $00, $ff, $fe, $fb, $fa
12c2c     FB FC FD FE 
12c30     02 04 04 04 
12c34     06 06 02 00 
12c38     FF FE FB F9 | 	byte	$fb, $fc, $fd, $fe, $02, $04, $04, $04, $06, $06, $02, $00, $ff, $fe, $fb, $f9
12c3c     FB FC FC FE 
12c40     02 04 04 05 
12c44     06 05 02 00 
12c48     00 FE FB FA | 	byte	$fb, $fc, $fc, $fe, $02, $04, $04, $05, $06, $05, $02, $00, $00, $fe, $fb, $fa
12c4c     FB FC FC FF 
12c50     02 03 04 06 
12c54     07 05 02 01 
12c58     00 FD FA FB | 	byte	$fb, $fc, $fc, $ff, $02, $03, $04, $06, $07, $05, $02, $01, $00, $fd, $fa, $fb
12c5c     FC FB FC FF 
12c60     02 02 03 05 
12c64     06 04 02 01 
12c68     00 FC FA FB | 	byte	$fc, $fb, $fc, $ff, $02, $02, $03, $05, $06, $04, $02, $01, $00, $fc, $fa, $fb
12c6c     FB FA FC 00 
12c70     02 02 04 06 
12c74     06 03 02 02 
12c78     FF FB FB FC | 	byte	$fb, $fa, $fc, $00, $02, $02, $04, $06, $06, $03, $02, $02, $ff, $fb, $fb, $fc
12c7c     FB FA FD 00 
12c80     01 02 04 06 
12c84     05 03 02 02 
12c88     FF FC FC FC | 	byte	$fb, $fa, $fd, $00, $01, $02, $04, $06, $05, $03, $02, $02, $ff, $fc, $fc, $fc
12c8c     FA F9 FD 00 
12c90     00 01 05 06 
12c94     04 03 03 02 
12c98     FE FC FD FC | 	byte	$fa, $f9, $fd, $00, $00, $01, $05, $06, $04, $03, $03, $02, $fe, $fc, $fd, $fc
12c9c     FA FB FF 01 
12ca0     00 02 06 06 
12ca4     04 03 04 02 
12ca8     FE FD FD FC | 	byte	$fa, $fb, $ff, $01, $00, $02, $06, $06, $04, $03, $04, $02, $fe, $fd, $fd, $fc
12cac     FA FC FF 00 
12cb0     00 03 06 06 
12cb4     03 03 04 01 
12cb8     FD FD FD FB | 	byte	$fa, $fc, $ff, $00, $00, $03, $06, $06, $03, $03, $04, $01, $fd, $fd, $fd, $fb
12cbc     F9 FC FF FF 
12cc0     00 03 06 04 
12cc4     03 04 04 00 
12cc8     FD FE FD FA | 	byte	$f9, $fc, $ff, $ff, $00, $03, $06, $04, $03, $04, $04, $00, $fd, $fe, $fd, $fa
12ccc     F9 FD FF FE 
12cd0     00 04 06 04 
12cd4     03 06 04 FF 
12cd8     FD FE FD F9 | 	byte	$f9, $fd, $ff, $fe, $00, $04, $06, $04, $03, $06, $04, $ff, $fd, $fe, $fd, $f9
12cdc     FA FE FE FD 
12ce0     00 05 05 03 
12ce4     04 06 03 FE 
12ce8     FE FF FC F9 | 	byte	$fa, $fe, $fe, $fd, $00, $05, $05, $03, $04, $06, $03, $fe, $fe, $ff, $fc, $f9
12cec     FB FE FE FD 
12cf0     02 05 04 03 
12cf4     05 06 02 FE 
12cf8     FF FF FB F9 | 	byte	$fb, $fe, $fe, $fd, $02, $05, $04, $03, $05, $06, $02, $fe, $ff, $ff, $fb, $f9
12cfc     FC FE FD FE 
12d00     03 05 04 03 
12d04     06 06 01 FF 
12d08     00 FF FA FA | 	byte	$fc, $fe, $fd, $fe, $03, $05, $04, $03, $06, $06, $01, $ff, $00, $ff, $fa, $fa
12d0c     FD FE FC FE 
12d10     03 05 02 03 
12d14     06 05 00 FF 
12d18     01 FE F9 FA | 	byte	$fd, $fe, $fc, $fe, $03, $05, $02, $03, $06, $05, $00, $ff, $01, $fe, $f9, $fa
12d1c     FE FE FC FF 
12d20     04 04 02 04 
12d24     07 04 00 00 
12d28     01 FD F9 FB | 	byte	$fe, $fe, $fc, $ff, $04, $04, $02, $04, $07, $04, $00, $00, $01, $fd, $f9, $fb
12d2c     FE FC FB 00 
12d30     04 03 02 05 
12d34     07 03 FF 01 
12d38     01 FC F9 FC | 	byte	$fe, $fc, $fb, $00, $04, $03, $02, $05, $07, $03, $ff, $01, $01, $fc, $f9, $fc
12d3c     FE FB FB 01 
12d40     04 01 01 06 
12d44     06 01 FF 01 
12d48     00 FA FA FD | 	byte	$fe, $fb, $fb, $01, $04, $01, $01, $06, $06, $01, $ff, $01, $00, $fa, $fa, $fd
12d4c     FD FA FC 02 
12d50     03 00 02 06 
12d54     05 00 00 02 
12d58     FF FA FA FD | 	byte	$fd, $fa, $fc, $02, $03, $00, $02, $06, $05, $00, $00, $02, $ff, $fa, $fa, $fd
12d5c     FC FA FE 03 
12d60     02 00 03 07 
12d64     04 00 01 03 
12d68     FE FA FC FE | 	byte	$fc, $fa, $fe, $03, $02, $00, $03, $07, $04, $00, $01, $03, $fe, $fa, $fc, $fe
12d6c     FB F9 FE 02 
12d70     01 00 05 07 
12d74     03 00 02 03 
12d78     FD FB FE FE | 	byte	$fb, $f9, $fe, $02, $01, $00, $05, $07, $03, $00, $02, $03, $fd, $fb, $fe, $fe
12d7c     FA FB 00 03 
12d80     00 01 06 07 
12d84     02 01 04 02 
12d88     FC FB FF FE | 	byte	$fa, $fb, $00, $03, $00, $01, $06, $07, $02, $01, $04, $02, $fc, $fb, $ff, $fe
12d8c     FA FC 01 02 
12d90     FF 02 07 06 
12d94     01 02 04 01 
12d98     FC FC FF FC | 	byte	$fa, $fc, $01, $02, $ff, $02, $07, $06, $01, $02, $04, $01, $fc, $fc, $ff, $fc
12d9c     FA FC 01 01 
12da0     FF 03 07 04 
12da4     01 03 04 00 
12da8     FB FD FF FB | 	byte	$fa, $fc, $01, $01, $ff, $03, $07, $04, $01, $03, $04, $00, $fb, $fd, $ff, $fb
12dac     F9 FE 01 FF 
12db0     FF 04 06 03 
12db4     01 04 04 FE 
12db8     FB FE FE FA | 	byte	$f9, $fe, $01, $ff, $ff, $04, $06, $03, $01, $04, $04, $fe, $fb, $fe, $fe, $fa
12dbc     FA FF 01 FE 
12dc0     FF 05 06 02 
12dc4     01 05 03 FD 
12dc8     FC FF FE F9 | 	byte	$fa, $ff, $01, $fe, $ff, $05, $06, $02, $01, $05, $03, $fd, $fc, $ff, $fe, $f9
12dcc     FA 00 00 FE 
12dd0     01 06 05 02 
12dd4     03 05 02 FD 
12dd8     FE 00 FD FA | 	byte	$fa, $00, $00, $fe, $01, $06, $05, $02, $03, $05, $02, $fd, $fe, $00, $fd, $fa
12ddc     FC 01 FF FE 
12de0     02 06 04 01 
12de4     04 06 02 FD 
12de8     FF 00 FC F9 | 	byte	$fc, $01, $ff, $fe, $02, $06, $04, $01, $04, $06, $02, $fd, $ff, $00, $fc, $f9
12dec     FE 00 FD FD 
12df0     03 06 03 01 
12df4     05 05 FF FD 
12df8     00 00 FB FA | 	byte	$fe, $00, $fd, $fd, $03, $06, $03, $01, $05, $05, $ff, $fd, $00, $00, $fb, $fa
12dfc     FE 00 FD FE 
12e00     05 05 02 02 
12e04     05 04 FF FE 
12e08     00 FE FA FA | 	byte	$fe, $00, $fd, $fe, $05, $05, $02, $02, $05, $04, $ff, $fe, $00, $fe, $fa, $fa
12e0c     FF FF FD FF 
12e10     04 04 01 03 
12e14     06 03 FF FF 
12e18     01 FD FA FC | 	byte	$ff, $ff, $fd, $ff, $04, $04, $01, $03, $06, $03, $ff, $ff, $01, $fd, $fa, $fc
12e1c     FF FD FC 00 
12e20     04 03 01 04 
12e24     05 02 FE 00 
12e28     01 FC FA FC | 	byte	$ff, $fd, $fc, $00, $04, $03, $01, $04, $05, $02, $fe, $00, $01, $fc, $fa, $fc
12e2c     FF FD FC 01 
12e30     04 01 01 05 
12e34     05 01 FE 01 
12e38     00 FB FA FE | 	byte	$ff, $fd, $fc, $01, $04, $01, $01, $05, $05, $01, $fe, $01, $00, $fb, $fa, $fe
12e3c     FE FC FD 02 
12e40     03 01 02 05 
12e44     04 00 FF 01 
12e48     FF FB FB FD | 	byte	$fe, $fc, $fd, $02, $03, $01, $02, $05, $04, $00, $ff, $01, $ff, $fb, $fb, $fd
12e4c     FD FB FE 02 
12e50     02 01 03 06 
12e54     03 00 01 02 
12e58     FE FB FD FF | 	byte	$fd, $fb, $fe, $02, $02, $01, $03, $06, $03, $00, $01, $02, $fe, $fb, $fd, $ff
12e5c     FD FC FF 03 
12e60     02 01 04 06 
12e64     03 01 02 02 
12e68     FE FC FE FE | 	byte	$fd, $fc, $ff, $03, $02, $01, $04, $06, $03, $01, $02, $02, $fe, $fc, $fe, $fe
12e6c     FC FC 01 02 
12e70     01 02 05 05 
12e74     02 01 02 01 
12e78     FD FC FE FD | 	byte	$fc, $fc, $01, $02, $01, $02, $05, $05, $02, $01, $02, $01, $fd, $fc, $fe, $fd
12e7c     FC FD 01 02 
12e80     00 02 05 04 
12e84     01 01 02 00 
12e88     FC FD FE FD | 	byte	$fc, $fd, $01, $02, $00, $02, $05, $04, $01, $01, $02, $00, $fc, $fd, $fe, $fd
12e8c     FB FE 01 01 
12e90     00 03 05 03 
12e94     01 02 03 FF 
12e98     FC FD FE FC | 	byte	$fb, $fe, $01, $01, $00, $03, $05, $03, $01, $02, $03, $ff, $fc, $fd, $fe, $fc
12e9c     FB FE 00 00 
12ea0     00 03 05 03 
12ea4     01 02 02 FE 
12ea8     FD FE FE FB | 	byte	$fb, $fe, $00, $00, $00, $03, $05, $03, $01, $02, $02, $fe, $fd, $fe, $fe, $fb
12eac     FC FF 00 00 
12eb0     01 04 04 02 
12eb4     02 03 01 FE 
12eb8     FE FE FD FC | 	byte	$fc, $ff, $00, $00, $01, $04, $04, $02, $02, $03, $01, $fe, $fe, $fe, $fd, $fc
12ebc     FD FF 00 00 
12ec0     02 04 04 02 
12ec4     03 03 01 FE 
12ec8     FE FE FC FB | 	byte	$fd, $ff, $00, $00, $02, $04, $04, $02, $03, $03, $01, $fe, $fe, $fe, $fc, $fb
12ecc     FD FF FF FF 
12ed0     02 03 03 02 
12ed4     03 02 00 FE 
12ed8     FE FE FC FC | 	byte	$fd, $ff, $ff, $ff, $02, $03, $03, $02, $03, $02, $00, $fe, $fe, $fe, $fc, $fc
12edc     FE FF FF 00 
12ee0     03 04 03 03 
12ee4     03 02 00 FF 
12ee8     FF FD FB FC | 	byte	$fe, $ff, $ff, $00, $03, $04, $03, $03, $03, $02, $00, $ff, $ff, $fd, $fb, $fc
12eec     FE FE FF 01 
12ef0     03 03 03 03 
12ef4     03 01 00 FF 
12ef8     FF FD FB FC | 	byte	$fe, $fe, $ff, $01, $03, $03, $03, $03, $03, $01, $00, $ff, $ff, $fd, $fb, $fc
12efc     FE FE FE 01 
12f00     03 02 02 03 
12f04     03 01 FF 00 
12f08     FE FC FC FD | 	byte	$fe, $fe, $fe, $01, $03, $02, $02, $03, $03, $01, $ff, $00, $fe, $fc, $fc, $fd
12f0c     FE FE FF 01 
12f10     02 02 02 04 
12f14     03 01 00 FF 
12f18     FE FC FD FE | 	byte	$fe, $fe, $ff, $01, $02, $02, $02, $04, $03, $01, $00, $ff, $fe, $fc, $fd, $fe
12f1c     FD FE 00 02 
12f20     02 02 03 03 
12f24     02 00 00 00 
12f28     FE FD FC FD | 	byte	$fd, $fe, $00, $02, $02, $02, $03, $03, $02, $00, $00, $00, $fe, $fd, $fc, $fd
12f2c     FC FD FF 01 
12f30     01 02 03 03 
12f34     02 01 01 00 
12f38     FE FD FE FE | 	byte	$fc, $fd, $ff, $01, $01, $02, $03, $03, $02, $01, $01, $00, $fe, $fd, $fe, $fe
12f3c     FD FE 01 02 
12f40     01 03 04 04 
12f44     02 02 01 00 
12f48     FE FE FE FD | 	byte	$fd, $fe, $01, $02, $01, $03, $04, $04, $02, $02, $01, $00, $fe, $fe, $fe, $fd
12f4c     FD FF 01 01 
12f50     01 03 04 03 
12f54     02 02 01 FF 
12f58     FD FE FE FC | 	byte	$fd, $ff, $01, $01, $01, $03, $04, $03, $02, $02, $01, $ff, $fd, $fe, $fe, $fc
12f5c     FD FF 00 00 
12f60     01 03 03 02 
12f64     01 02 01 FE 
12f68     FD FE FD FC | 	byte	$fd, $ff, $00, $00, $01, $03, $03, $02, $01, $02, $01, $fe, $fd, $fe, $fd, $fc
12f6c     FD 00 00 00 
12f70     02 04 03 02 
12f74     02 02 00 FD 
12f78     FE FF FD FC | 	byte	$fd, $00, $00, $00, $02, $04, $03, $02, $02, $02, $00, $fd, $fe, $ff, $fd, $fc
12f7c     FE 00 00 00 
12f80     02 04 02 01 
12f84     02 02 00 FE 
12f88     FF FE FC FC | 	byte	$fe, $00, $00, $00, $02, $04, $02, $01, $02, $02, $00, $fe, $ff, $fe, $fc, $fc
12f8c     FF 00 FF 00 
12f90     03 04 02 02 
12f94     03 02 FF FE 
12f98     FF FE FC FC | 	byte	$ff, $00, $ff, $00, $03, $04, $02, $02, $03, $02, $ff, $fe, $ff, $fe, $fc, $fc
12f9c     FF 00 FF 00 
12fa0     04 04 02 03 
12fa4     04 02 FF FF 
12fa8     00 FE FC FD | 	byte	$ff, $00, $ff, $00, $04, $04, $02, $03, $04, $02, $ff, $ff, $00, $fe, $fc, $fd
12fac     FF FF FE 01 
12fb0     03 02 01 02 
12fb4     03 01 FE FF 
12fb8     00 FD FB FD | 	byte	$ff, $ff, $fe, $01, $03, $02, $01, $02, $03, $01, $fe, $ff, $00, $fd, $fb, $fd
12fbc     FF FE FE 01 
12fc0     03 02 01 03 
12fc4     03 00 FF 00 
12fc8     FF FD FC FF | 	byte	$ff, $fe, $fe, $01, $03, $02, $01, $03, $03, $00, $ff, $00, $ff, $fd, $fc, $ff
12fcc     00 FE FF 03 
12fd0     04 01 02 04 
12fd4     03 00 FF 01 
12fd8     FF FC FC FF | 	byte	$00, $fe, $ff, $03, $04, $01, $02, $04, $03, $00, $ff, $01, $ff, $fc, $fc, $ff
12fdc     FF FD FF 03 
12fe0     02 01 02 04 
12fe4     02 FF FF 00 
12fe8     FE FC FD FF | 	byte	$ff, $fd, $ff, $03, $02, $01, $02, $04, $02, $ff, $ff, $00, $fe, $fc, $fd, $ff
12fec     FE FD FF 02 
12ff0     01 00 03 04 
12ff4     01 FF 00 00 
12ff8     FD FC FE FF | 	byte	$fe, $fd, $ff, $02, $01, $00, $03, $04, $01, $ff, $00, $00, $fd, $fc, $fe, $ff
12ffc     FD FD 01 02 
13000     01 01 03 04 
13004     00 FF 01 00 
13008     FD FC FE FE | 	byte	$fd, $fd, $01, $02, $01, $01, $03, $04, $00, $ff, $01, $00, $fd, $fc, $fe, $fe
1300c     FC FD 01 02 
13010     00 01 04 03 
13014     00 00 02 00 
13018     FD FD FF FF | 	byte	$fc, $fd, $01, $02, $00, $01, $04, $03, $00, $00, $02, $00, $fd, $fd, $ff, $ff
1301c     FD FF 02 02 
13020     01 03 05 03 
13024     00 01 02 FF 
13028     FD FE 00 FE | 	byte	$fd, $ff, $02, $02, $01, $03, $05, $03, $00, $01, $02, $ff, $fd, $fe, $00, $fe
1302c     FD 00 02 01 
13030     00 03 05 02 
13034     00 01 02 FE 
13038     FC FF FF FC | 	byte	$fd, $00, $02, $01, $00, $03, $05, $02, $00, $01, $02, $fe, $fc, $ff, $ff, $fc
1303c     FC 00 02 00 
13040     00 03 04 01 
13044     00 02 01 FD 
13048     FD FF FF FC | 	byte	$fc, $00, $02, $00, $00, $03, $04, $01, $00, $02, $01, $fd, $fd, $ff, $ff, $fc
1304c     FD 01 01 FF 
13050     01 04 04 01 
13054     01 03 00 FD 
13058     FE 00 FE FC | 	byte	$fd, $01, $01, $ff, $01, $04, $04, $01, $01, $03, $00, $fd, $fe, $00, $fe, $fc
1305c     FE 01 01 FF 
13060     02 04 02 00 
13064     02 03 00 FD 
13068     FE FF FD FC | 	byte	$fe, $01, $01, $ff, $02, $04, $02, $00, $02, $03, $00, $fd, $fe, $ff, $fd, $fc
1306c     FF 01 00 FF 
13070     03 04 02 00 
13074     03 03 FF FD 
13078     FF FF FD FC | 	byte	$ff, $01, $00, $ff, $03, $04, $02, $00, $03, $03, $ff, $fd, $ff, $ff, $fd, $fc
1307c     00 01 FF 00 
13080     03 04 01 01 
13084     03 02 FE FD 
13088     FF FF FC FD | 	byte	$00, $01, $ff, $00, $03, $04, $01, $01, $03, $02, $fe, $fd, $ff, $ff, $fc, $fd
1308c     00 00 FF 00 
13090     04 03 00 01 
13094     03 01 FE FE 
13098     00 FE FC FE | 	byte	$00, $00, $ff, $00, $04, $03, $00, $01, $03, $01, $fe, $fe, $00, $fe, $fc, $fe
1309c     00 FF FE 02 
130a0     04 02 00 02 
130a4     03 00 FE 00 
130a8     00 FD FC FF | 	byte	$00, $ff, $fe, $02, $04, $02, $00, $02, $03, $00, $fe, $00, $00, $fd, $fc, $ff
130ac     00 FF FF 02 
130b0     03 01 00 03 
130b4     03 FF FE 00 
130b8     FF FC FC FF | 	byte	$00, $ff, $ff, $02, $03, $01, $00, $03, $03, $ff, $fe, $00, $ff, $fc, $fc, $ff
130bc     FF FE FF 02 
130c0     02 00 01 03 
130c4     02 FF FE 00 
130c8     FE FC FD FF | 	byte	$ff, $fe, $ff, $02, $02, $00, $01, $03, $02, $ff, $fe, $00, $fe, $fc, $fd, $ff
130cc     FF FD 00 02 
130d0     02 00 01 03 
130d4     01 FE FF 00 
130d8     FD FC FE FF | 	byte	$ff, $fd, $00, $02, $02, $00, $01, $03, $01, $fe, $ff, $00, $fd, $fc, $fe, $ff
130dc     FE FD 00 03 
130e0     01 00 02 03 
130e4     00 FE 00 00 
130e8     FD FB FE FF | 	byte	$fe, $fd, $00, $03, $01, $00, $02, $03, $00, $fe, $00, $00, $fd, $fb, $fe, $ff
130ec     FD FE 01 02 
130f0     00 01 03 02 
130f4     00 FF 01 00 
130f8     FD FD 00 FF | 	byte	$fd, $fe, $01, $02, $00, $01, $03, $02, $00, $ff, $01, $00, $fd, $fd, $00, $ff
130fc     FE FF 02 02 
13100     00 02 04 03 
13104     00 00 01 FF 
13108     FD FE 00 FE | 	byte	$fe, $ff, $02, $02, $00, $02, $04, $03, $00, $00, $01, $ff, $fd, $fe, $00, $fe
1310c     FE 00 02 01 
13110     00 02 04 01 
13114     FF 01 01 FE 
13118     FD FF 00 FE | 	byte	$fe, $00, $02, $01, $00, $02, $04, $01, $ff, $01, $01, $fe, $fd, $ff, $00, $fe
1311c     FD 00 02 00 
13120     00 03 04 01 
13124     FF 01 01 FE 
13128     FD FF FF FD | 	byte	$fd, $00, $02, $00, $00, $03, $04, $01, $ff, $01, $01, $fe, $fd, $ff, $ff, $fd
1312c     FE 01 02 00 
13130     01 03 03 00 
13134     00 01 00 FD 
13138     FE FF FE FD | 	byte	$fe, $01, $02, $00, $01, $03, $03, $00, $00, $01, $00, $fd, $fe, $ff, $fe, $fd
1313c     FE 01 00 00 
13140     01 03 02 00 
13144     01 01 FF FD 
13148     FE FF FD FD | 	byte	$fe, $01, $00, $00, $01, $03, $02, $00, $01, $01, $ff, $fd, $fe, $ff, $fd, $fd
1314c     FF 01 00 00 
13150     02 03 01 00 
13154     02 02 FF FE 
13158     FF FF FE FE | 	byte	$ff, $01, $00, $00, $02, $03, $01, $00, $02, $02, $ff, $fe, $ff, $ff, $fe, $fe
1315c     00 01 00 01 
13160     03 03 01 01 
13164     02 01 FE FE 
13168     FF FF FD FE | 	byte	$00, $01, $00, $01, $03, $03, $01, $01, $02, $01, $fe, $fe, $ff, $ff, $fd, $fe
1316c     00 00 00 01 
13170     03 02 01 01 
13174     02 00 FE FF 
13178     00 FE FD FF | 	byte	$00, $00, $00, $01, $03, $02, $01, $01, $02, $00, $fe, $ff, $00, $fe, $fd, $ff
1317c     00 00 00 02 
13180     03 02 01 02 
13184     02 00 FE 00 
13188     00 FE FD FF | 	byte	$00, $00, $00, $02, $03, $02, $01, $02, $02, $00, $fe, $00, $00, $fe, $fd, $ff
1318c     01 FF 00 02 
13190     02 02 01 02 
13194     01 FF FF 00 
13198     FF FD FD FF | 	byte	$01, $ff, $00, $02, $02, $02, $01, $02, $01, $ff, $ff, $00, $ff, $fd, $fd, $ff
1319c     FF FE 00 02 
131a0     02 01 01 02 
131a4     01 FF FF FF 
131a8     FE FD FE FF | 	byte	$ff, $fe, $00, $02, $02, $01, $01, $02, $01, $ff, $ff, $ff, $fe, $fd, $fe, $ff
131ac     FF FF 01 02 
131b0     01 01 02 02 
131b4     00 FF 00 00 
131b8     FE FD FF FF | 	byte	$ff, $ff, $01, $02, $01, $01, $02, $02, $00, $ff, $00, $00, $fe, $fd, $ff, $ff
131bc     FF FF 01 02 
131c0     01 01 02 02 
131c4     00 FF 00 FF 
131c8     FD FD FE FF | 	byte	$ff, $ff, $01, $02, $01, $01, $02, $02, $00, $ff, $00, $ff, $fd, $fd, $fe, $ff
131cc     FE FF 01 01 
131d0     00 01 02 02 
131d4     00 01 01 FF 
131d8     FE FF 00 FF | 	byte	$fe, $ff, $01, $01, $00, $01, $02, $02, $00, $01, $01, $ff, $fe, $ff, $00, $ff
131dc     FF 01 02 01 
131e0     01 03 03 01 
131e4     00 01 01 FF 
131e8     00 00 00 00 | 	byte	$ff, $01, $02, $01, $01, $03, $03, $01, $00, $01, $01, $ff, $00, $00, $00, $00
131ec     00 01 02 03 
131f0     02 02 03 03 
131f4     04 04 05 05 
131f8     06 06 06 06 | 	byte	$00, $01, $02, $03, $02, $02, $03, $03, $04, $04, $05, $05, $06, $06, $06, $06
131fc     07 07 07 07 
13200     07          | 	byte	$07[5]
13201     06 06 06 06 
13205     07 07 07 07 
13209     07 06 07 06 
1320d     07 07 07 07 | 	byte	$06, $06, $06, $06, $07, $07, $07, $07, $07, $06, $07, $06, $07, $07, $07, $07
13211     07 06 07 07 
13215     07 07 06 06 
13219     05 02 FD F8 
1321d     F3 F0 EE ED | 	byte	$07, $06, $07, $07, $07, $07, $06, $06, $05, $02, $fd, $f8, $f3, $f0, $ee, $ed
13221     ED EC ED ED 
13225     EF F0 F1 F2 
13229     F3 F4 F5 F6 
1322d     F7 F8 F9 FA | 	byte	$ed, $ec, $ed, $ed, $ef, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa
13231     FA FB FB FB 
13235     FC FD FD FE 
13239     FE FF 00 00 
1323d     01 01 02 02 | 	byte	$fa, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $fe, $ff, $00, $00, $01, $01, $02, $02
13241     03 03 03 04 
13245     04 04 05 05 
13249     05 05 06 06 
1324d     06 07 07 07 | 	byte	$03, $03, $03, $04, $04, $04, $05, $05, $05, $05, $06, $06, $06, $07, $07, $07
13251     07 07 07 07 
13255     05 02 FE FB 
13259     F9 F7 F7 F7 
1325d     F8 F9 FA FA | 	byte	$07, $07, $07, $07, $05, $02, $fe, $fb, $f9, $f7, $f7, $f7, $f8, $f9, $fa, $fa
13261     FB FB FB FB 
13265     FB FB FB FB | 	byte	$fb[8]
13269     FC FD FE FF 
1326d     00 01 02 03 
13271     04 05 06 07 
13275     08 09 09 0A | 	byte	$fc, $fd, $fe, $ff, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $09, $0a
13279     0A 0B 0B 0C 
1327d     0C 0C 0D 0C 
13281     0D 0D 0D 0E 
13285     0E 0F 0F 0E | 	byte	$0a, $0b, $0b, $0c, $0c, $0c, $0d, $0c, $0d, $0d, $0d, $0e, $0e, $0f, $0f, $0e
13289     0E 0F 0F 0F 
1328d     0F 0F 0F 0F 
13291     0F 0F 0F 0F 
13295     0F 0F 0E 0A | 	byte	$0e, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0e, $0a
13299     01 F7 EF E7 
1329d     E2 DE DC DC 
132a1     DC DE E0 E2 
132a5     E5 E7 E8 EA | 	byte	$01, $f7, $ef, $e7, $e2, $de, $dc, $dc, $dc, $de, $e0, $e2, $e5, $e7, $e8, $ea
132a9     EC EF F1 F3 
132ad     F4 F6 F8 F8 
132b1     F9 FA FA FB 
132b5     FC FC FD FE | 	byte	$ec, $ef, $f1, $f3, $f4, $f6, $f8, $f8, $f9, $fa, $fa, $fb, $fc, $fc, $fd, $fe
132b9     FF 00 02 03 
132bd     04 05 05 06 
132c1     07 07 09 09 
132c5     09 0A 0A 0A | 	byte	$ff, $00, $02, $03, $04, $05, $05, $06, $07, $07, $09, $09, $09, $0a, $0a, $0a
132c9     0B 0C 0D 0D 
132cd     0E 0D 0D 0D 
132d1     0D 0B 06 FF 
132d5     F8 F3 EF EE | 	byte	$0b, $0c, $0d, $0d, $0e, $0d, $0d, $0d, $0d, $0b, $06, $ff, $f8, $f3, $ef, $ee
132d9     EE EF F1 F3 
132dd     F4 F5 F6 F6 
132e1     F5 F4 F3 F4 
132e5     F5 F6 F7 FA | 	byte	$ee, $ef, $f1, $f3, $f4, $f5, $f6, $f6, $f5, $f4, $f3, $f4, $f5, $f6, $f7, $fa
132e9     FC FD FF 01 
132ed     02 03 04 06 
132f1     08 0A 0C 0D 
132f5     0E 0F 0F 10 | 	byte	$fc, $fd, $ff, $01, $02, $03, $04, $06, $08, $0a, $0c, $0d, $0e, $0f, $0f, $10
132f9     11 12 13 13 
132fd     14 14 14 15 
13301     16 17 18 19 
13305     19 18 18 19 | 	byte	$11, $12, $13, $13, $14, $14, $14, $15, $16, $17, $18, $19, $19, $18, $18, $19
13309     19 19 1A 1A 
1330d     19 19 19 19 
13311     19 19 19 19 
13315     18 15 0B FE | 	byte	$19, $19, $1a, $1a, $19, $19, $19, $19, $19, $19, $19, $19, $18, $15, $0b, $fe
13319     EF E2 DA D3 
1331d     D0 CE CF D2 
13321     D5 D8 DC DF 
13325     E1 E4 E7 EA | 	byte	$ef, $e2, $da, $d3, $d0, $ce, $cf, $d2, $d5, $d8, $dc, $df, $e1, $e4, $e7, $ea
13329     ED F1 F3 F6 
1332d     F7 F9 FA FB 
13331     FC FC FC FC 
13335     FD FE FF 01 | 	byte	$ed, $f1, $f3, $f6, $f7, $f9, $fa, $fb, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $01
13339     02 04 06 07 
1333d     08 08 09 0B 
13341     0C 0E 0F 0F 
13345     0F 0F 10 10 | 	byte	$02, $04, $06, $07, $08, $08, $09, $0b, $0c, $0e, $0f, $0f, $0f, $0f, $10, $10
13349     11 12 13 13 
1334d     12 12 10 0C 
13351     03 FA F1 EB 
13355     E7 E5 E6 E7 | 	byte	$11, $12, $13, $13, $12, $12, $10, $0c, $03, $fa, $f1, $eb, $e7, $e5, $e6, $e7
13359     EA EC EF F0 
1335d     F1 EF ED EC 
13361     EC ED EE F0 
13365     F3 F5 F7 FB | 	byte	$ea, $ec, $ef, $f0, $f1, $ef, $ed, $ec, $ec, $ed, $ee, $f0, $f3, $f5, $f7, $fb
13369     FD FF FF 00 
1336d     01 03 05 08 
13371     0A 0C 0D 0E 
13375     0F 10 11 13 | 	byte	$fd, $ff, $ff, $00, $01, $03, $05, $08, $0a, $0c, $0d, $0e, $0f, $10, $11, $13
13379     14 15 15 16 
1337d     16 17 18 19 
13381     1A 1B 1C 1B 
13385     1B 1B 1C 1D | 	byte	$14, $15, $15, $16, $16, $17, $18, $19, $1a, $1b, $1c, $1b, $1b, $1b, $1c, $1d
13389     1E 1E 1D 1D 
1338d     1C 1C 1C 1D 
13391     1D 1C 1B 19 
13395     11 03 F2 E3 | 	byte	$1e, $1e, $1d, $1d, $1c, $1c, $1c, $1d, $1d, $1c, $1b, $19, $11, $03, $f2, $e3
13399     D7 CF CB CA 
1339d     CB CD D1 D5 
133a1     D9 DC DF E2 
133a5     E5 E8 EC EF | 	byte	$d7, $cf, $cb, $ca, $cb, $cd, $d1, $d5, $d9, $dc, $df, $e2, $e5, $e8, $ec, $ef
133a9     F2 F4 F6 F8 
133ad     FA FC FC FB 
133b1     FA F9 F8 F8 
133b5     F9 FA FD FF | 	byte	$f2, $f4, $f6, $f8, $fa, $fc, $fc, $fb, $fa, $f9, $f8, $f8, $f9, $fa, $fd, $ff
133b9     01 02 03 04 
133bd     05 07 09 0A 
133c1     0B 0C 0C 0C 
133c5     0C 0D 0F 10 | 	byte	$01, $02, $03, $04, $05, $07, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0d, $0f, $10
133c9     10 10 0F 0F 
133cd     0C 06 FC F3 
133d1     EB E6 E3 E2 
133d5     E3 E5 E8 EA | 	byte	$10, $10, $0f, $0f, $0c, $06, $fc, $f3, $eb, $e6, $e3, $e2, $e3, $e5, $e8, $ea
133d9     ED EE EE EC 
133dd     EA E9 E9 EB 
133e1     EC EE F0 F3 
133e5     F6 F9 FC FD | 	byte	$ed, $ee, $ee, $ec, $ea, $e9, $e9, $eb, $ec, $ee, $f0, $f3, $f6, $f9, $fc, $fd
133e9     FE FD FE FF 
133ed     01 03 06 08 
133f1     0A 0B 0C 0E 
133f5     0F 10 11 12 | 	byte	$fe, $fd, $fe, $ff, $01, $03, $06, $08, $0a, $0b, $0c, $0e, $0f, $10, $11, $12
133f9     13 13 13 14 
133fd     15 17 19 1A 
13401     1A 1A 1A 1B 
13405     1C 1D 1E 1F | 	byte	$13, $13, $13, $14, $15, $17, $19, $1a, $1a, $1a, $1a, $1b, $1c, $1d, $1e, $1f
13409     1E 1E 1D 1D 
1340d     1D 1E 1E 1D 
13411     1D 1B 15 08 
13415     F6 E5 DA D1 | 	byte	$1e, $1e, $1d, $1d, $1d, $1e, $1e, $1d, $1d, $1b, $15, $08, $f6, $e5, $da, $d1
13419     CE CC CD CF 
1341d     D3 D7 DB DF 
13421     E2 E4 E7 EB 
13425     EF F2 F4 F7 | 	byte	$ce, $cc, $cd, $cf, $d3, $d7, $db, $df, $e2, $e4, $e7, $eb, $ef, $f2, $f4, $f7
13429     F8 FA FC FE 
1342d     00 00 FE FC 
13431     F8 F7 F6 F8 
13435     F9 FB FD FF | 	byte	$f8, $fa, $fc, $fe, $00, $00, $fe, $fc, $f8, $f7, $f6, $f8, $f9, $fb, $fd, $ff
13439     00 01 02 04 
1343d     07 08 0A 0B 
13441     0B 0B 0C 0D 
13445     0F 10 11 11 | 	byte	$00, $01, $02, $04, $07, $08, $0a, $0b, $0b, $0b, $0c, $0d, $0f, $10, $11, $11
13449     11 0F 0B 04 
1344d     FA F2 EB E7 
13451     E6 E6 E7 E9 
13455     EC EE F1 F2 | 	byte	$11, $0f, $0b, $04, $fa, $f2, $eb, $e7, $e6, $e6, $e7, $e9, $ec, $ee, $f1, $f2
13459     F1 EF ED EC 
1345d     EC EE F0 F2 
13461     F4 F6 F9 FD 
13465     00 01 01 00 | 	byte	$f1, $ef, $ed, $ec, $ec, $ee, $f0, $f2, $f4, $f6, $f9, $fd, $00, $01, $01, $00
13469     FF 00 02 04 
1346d     07 09 0A 0C 
13471     0D 0F 10 11 
13475     12 12 13 13 | 	byte	$ff, $00, $02, $04, $07, $09, $0a, $0c, $0d, $0f, $10, $11, $12, $12, $13, $13
13479     13 14 16 18 
1347d     19 1B 1B 1B 
13481     1C 1D 1E 1F 
13485     20 20 20 20 | 	byte	$13, $14, $16, $18, $19, $1b, $1b, $1b, $1c, $1d, $1e, $1f, $20, $20, $20, $20
13489     20 20 20 21 
1348d     21 20 1E 1C 
13491     18 0C FC EB 
13495     DF D7 D2 D0 | 	byte	$20, $20, $20, $21, $21, $20, $1e, $1c, $18, $0c, $fc, $eb, $df, $d7, $d2, $d0
13499     D1 D4 D8 DB 
1349d     DF E2 E5 E8 
134a1     EB EE F1 F5 
134a5     F7 F9 FB FC | 	byte	$d1, $d4, $d8, $db, $df, $e2, $e5, $e8, $eb, $ee, $f1, $f5, $f7, $f9, $fb, $fc
134a9     FE 00 02 04 
134ad     03 00 FC F8 
134b1     F5 F4 F5 F6 
134b5     F8 F9 FB FC | 	byte	$fe, $00, $02, $04, $03, $00, $fc, $f8, $f5, $f4, $f5, $f6, $f8, $f9, $fb, $fc
134b9     FD 00 02 04 
134bd     06 07 08 09 
134c1     0A 0C 0D 0E 
134c5     0F 0F 0F 0E | 	byte	$fd, $00, $02, $04, $06, $07, $08, $09, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0e
134c9     08 00 F6 EF 
134cd     EA E7 E6 E7 
134d1     E9 EB EE F0 
134d5     F2 F3 F3 F0 | 	byte	$08, $00, $f6, $ef, $ea, $e7, $e6, $e7, $e9, $eb, $ee, $f0, $f2, $f3, $f3, $f0
134d9     EE ED EE EF 
134dd     F1 F3 F6 F9 
134e1     FC FF 02 04 
134e5     03 01 00 FF | 	byte	$ee, $ed, $ee, $ef, $f1, $f3, $f6, $f9, $fc, $ff, $02, $04, $03, $01, $00, $ff
134e9     01 02 04 06 
134ed     08 0A 0B 0E 
134f1     0F 11 12 12 
134f5     11 11 11 12 | 	byte	$01, $02, $04, $06, $08, $0a, $0b, $0e, $0f, $11, $12, $12, $11, $11, $11, $12
134f9     14 16 17 19 
134fd     1A 1B 1B 1C 
13501     1E 1F 20 20 
13505     20 21 21 21 | 	byte	$14, $16, $17, $19, $1a, $1b, $1b, $1c, $1e, $1f, $20, $20, $20, $21, $21, $21
13509     21 21 21 20 
1350d     1F 1C 17 0F 
13511     01 F1 E4 DB 
13515     D5 D3 D4 D6 | 	byte	$21, $21, $21, $20, $1f, $1c, $17, $0f, $01, $f1, $e4, $db, $d5, $d3, $d4, $d6
13519     D9 DD E1 E4 
1351d     E7 EA ED F0 
13521     F4 F7 FA FC 
13525     FD FF 01 03 | 	byte	$d9, $dd, $e1, $e4, $e7, $ea, $ed, $f0, $f4, $f7, $fa, $fc, $fd, $ff, $01, $03
13529     05 06 06 05 
1352d     01 FC F7 F4 
13531     F2 F1 F2 F3 
13535     F4 F6 F8 FB | 	byte	$05, $06, $06, $05, $01, $fc, $f7, $f4, $f2, $f1, $f2, $f3, $f4, $f6, $f8, $fb
13539     FD FF 01 02 
1353d     04 05 07 09 
13541     0A 0B 0C 0D 
13545     0D 0A 03 FB | 	byte	$fd, $ff, $01, $02, $04, $05, $07, $09, $0a, $0b, $0c, $0d, $0d, $0a, $03, $fb
13549     F2 EB E7 E5 
1354d     E6 E7 EA EC 
13551     EF F1 F4 F4 
13555     F3 F1 EF EF | 	byte	$f2, $eb, $e7, $e5, $e6, $e7, $ea, $ec, $ef, $f1, $f4, $f4, $f3, $f1, $ef, $ef
13559     EF F0 F2 F4 
1355d     F7 FB FE 01 
13561     05 07 06 03 
13565     01 FF FE 00 | 	byte	$ef, $f0, $f2, $f4, $f7, $fb, $fe, $01, $05, $07, $06, $03, $01, $ff, $fe, $00
13569     01 03 05 07 
1356d     0A 0B 0D 0F 
13571     11 11 0F 0F 
13575     0F 10 12 14 | 	byte	$01, $03, $05, $07, $0a, $0b, $0d, $0f, $11, $11, $0f, $0f, $0f, $10, $12, $14
13579     16 17 19 1A 
1357d     1A 1C 1E 1F 
13581     20 20 20 21 
13585     21 21 22 22 | 	byte	$16, $17, $19, $1a, $1a, $1c, $1e, $1f, $20, $20, $20, $21, $21, $21, $22, $22
13589     22 21 1E 1A 
1358d     17 11 07 F8 
13591     EB E0 DA D7 
13595     D7 D8 DC DF | 	byte	$22, $21, $1e, $1a, $17, $11, $07, $f8, $eb, $e0, $da, $d7, $d7, $d8, $dc, $df
13599     E3 E6 E9 EC 
1359d     EF F3 F6 F9 
135a1     FC FE 00 02 
135a5     04 05 07 07 | 	byte	$e3, $e6, $e9, $ec, $ef, $f3, $f6, $f9, $fc, $fe, $00, $02, $04, $05, $07, $07
135a9     07 06 06 03 
135ad     FE F8 F3 F0 
135b1     EE ED EE EF 
135b5     F2 F4 F7 FA | 	byte	$07, $06, $06, $03, $fe, $f8, $f3, $f0, $ee, $ed, $ee, $ef, $f2, $f4, $f7, $fa
135b9     FC FD FF 01 
135bd     03 05 07 09 
135c1     0A 0A 0A 06 
135c5     FD F5 ED E8 | 	byte	$fc, $fd, $ff, $01, $03, $05, $07, $09, $0a, $0a, $0a, $06, $fd, $f5, $ed, $e8
135c9     E5 E4 E5 E7 
135cd     EA ED F0 F2 
135d1     F4 F5 F4 F1 
135d5     F0 EF F0 F2 | 	byte	$e5, $e4, $e5, $e7, $ea, $ed, $f0, $f2, $f4, $f5, $f4, $f1, $f0, $ef, $f0, $f2
135d9     F4 F6 F9 FD 
135dd     00 03 06 09 
135e1     0A 08 03 00 
135e5     FE FD FE FF | 	byte	$f4, $f6, $f9, $fd, $00, $03, $06, $09, $0a, $08, $03, $00, $fe, $fd, $fe, $ff
135e9     01 03 06 08 
135ed     0B 0E 0F 10 
135f1     0F 0E 0D 0D 
135f5     0F 11 13 14 | 	byte	$01, $03, $06, $08, $0b, $0e, $0f, $10, $0f, $0e, $0d, $0d, $0f, $11, $13, $14
135f9     16 17 19 1A 
135fd     1C 1E 20 20 
13601     21 22 22 22 
13605     23 23 23 21 | 	byte	$16, $17, $19, $1a, $1c, $1e, $20, $20, $21, $22, $22, $22, $23, $23, $23, $21
13609     1D 1A 17 14 
1360d     0D 00 F3 E8 
13611     E0 DC DB DC 
13615     DF E2 E6 E9 | 	byte	$1d, $1a, $17, $14, $0d, $00, $f3, $e8, $e0, $dc, $db, $dc, $df, $e2, $e6, $e9
13619     EC EF F2 F6 
1361d     F9 FC FF 01 
13621     03 05 06 08 
13625     09 09 09 08 | 	byte	$ec, $ef, $f2, $f6, $f9, $fc, $ff, $01, $03, $05, $06, $08, $09, $09, $09, $08
13629     08 09 07 02 
1362d     FB F3 EE EA 
13631     E9 E9 EB ED 
13635     F0 F3 F5 F7 | 	byte	$08, $09, $07, $02, $fb, $f3, $ee, $ea, $e9, $e9, $eb, $ed, $f0, $f3, $f5, $f7
13639     F9 FC FE 00 
1363d     02 05 06 07 
13641     06 00 F7 EF 
13645     E8 E4 E2 E3 | 	byte	$f9, $fc, $fe, $00, $02, $05, $06, $07, $06, $00, $f7, $ef, $e8, $e4, $e2, $e3
13649     E4 E7 EA ED 
1364d     F0 F3 F5 F5 
13651     F4 F2 F0 F0 
13655     F1 F3 F6 F9 | 	byte	$e4, $e7, $ea, $ed, $f0, $f3, $f5, $f5, $f4, $f2, $f0, $f0, $f1, $f3, $f6, $f9
13659     FC FF 02 06 
1365d     08 0C 0D 0C 
13661     08 02 FE FB 
13665     FB FB FD 00 | 	byte	$fc, $ff, $02, $06, $08, $0c, $0d, $0c, $08, $02, $fe, $fb, $fb, $fb, $fd, $00
13669     02 05 08 0B 
1366d     0E 0F 0F 0E 
13671     0C 0B 0B 0D 
13675     0E 11 13 15 | 	byte	$02, $05, $08, $0b, $0e, $0f, $0f, $0e, $0c, $0b, $0b, $0d, $0e, $11, $13, $15
13679     17 19 1A 1D 
1367d     1E 20 21 22 
13681     23 23 23 23 
13685     21 1F 1C 19 | 	byte	$17, $19, $1a, $1d, $1e, $20, $21, $22, $23, $23, $23, $23, $21, $1f, $1c, $19
13689     17 17 12 08 
1368d     FB EF E6 E2 
13691     E0 E0 E2 E5 
13695     E9 EC F0 F3 | 	byte	$17, $17, $12, $08, $fb, $ef, $e6, $e2, $e0, $e0, $e2, $e5, $e9, $ec, $f0, $f3
13699     F6 F9 FC FF 
1369d     02 04 06 08 
136a1     0A 0B 0B 0B 
136a5     0A 09 09 0A | 	byte	$f6, $f9, $fc, $ff, $02, $04, $06, $08, $0a, $0b, $0b, $0b, $0a, $09, $09, $0a
136a9     0B 0B 06 FE 
136ad     F4 ED E7 E5 
136b1     E4 E5 E7 EA 
136b5     EE F0 F3 F6 | 	byte	$0b, $0b, $06, $fe, $f4, $ed, $e7, $e5, $e4, $e5, $e7, $ea, $ee, $f0, $f3, $f6
136b9     F8 FB FD FF 
136bd     02 03 01 FA 
136c1     F0 E8 E2 E0 
136c5     E0 E1 E3 E6 | 	byte	$f8, $fb, $fd, $ff, $02, $03, $01, $fa, $f0, $e8, $e2, $e0, $e0, $e1, $e3, $e6
136c9     EA ED F0 F3 
136cd     F5 F6 F4 F2 
136d1     F1 F0 F2 F4 
136d5     F7 FB FE 02 | 	byte	$ea, $ed, $f0, $f3, $f5, $f6, $f4, $f2, $f1, $f0, $f2, $f4, $f7, $fb, $fe, $02
136d9     04 07 0A 0E 
136dd     10 11 0E 07 
136e1     01 FB F9 F8 
136e5     FA FC FF 02 | 	byte	$04, $07, $0a, $0e, $10, $11, $0e, $07, $01, $fb, $f9, $f8, $fa, $fc, $ff, $02
136e9     05 08 0B 0D 
136ed     0F 0E 0C 0A 
136f1     0A 09 0B 0D 
136f5     10 12 15 17 | 	byte	$05, $08, $0b, $0d, $0f, $0e, $0c, $0a, $0a, $09, $0b, $0d, $10, $12, $15, $17
136f9     19 1B 1D 1F 
136fd     21 22 23 24 
13701     23 22 20 1D 
13705     1B 1A 19 1A | 	byte	$19, $1b, $1d, $1f, $21, $22, $23, $24, $23, $22, $20, $1d, $1b, $1a, $19, $1a
13709     18 11 04 F7 
1370d     EE E8 E5 E5 
13711     E6 E8 EB EF 
13715     F2 F6 F9 FC | 	byte	$18, $11, $04, $f7, $ee, $e8, $e5, $e5, $e6, $e8, $eb, $ef, $f2, $f6, $f9, $fc
13719     FF 02 05 07 
1371d     0A 0C 0D 0F 
13721     0E 0D 0C 0A 
13725     0A 0B 0C 0D | 	byte	$ff, $02, $05, $07, $0a, $0c, $0d, $0f, $0e, $0d, $0c, $0a, $0a, $0b, $0c, $0d
13729     0E 0C 02 F7 
1372d     EC E5 E0 DF 
13731     E0 E2 E4 E8 
13735     EA EE F2 F5 | 	byte	$0e, $0c, $02, $f7, $ec, $e5, $e0, $df, $e0, $e2, $e4, $e8, $ea, $ee, $f2, $f5
13739     F7 FA FC FD 
1373d     F9 F1 E9 E1 
13741     DC DB DC DE 
13745     E1 E5 E9 EC | 	byte	$f7, $fa, $fc, $fd, $f9, $f1, $e9, $e1, $dc, $db, $dc, $de, $e1, $e5, $e9, $ec
13749     F0 F3 F6 F6 
1374d     F4 F2 F1 F1 
13751     F2 F5 F8 FC 
13755     FF 03 06 09 | 	byte	$f0, $f3, $f6, $f6, $f4, $f2, $f1, $f1, $f2, $f5, $f8, $fc, $ff, $03, $06, $09
13759     0D 0F 12 14 
1375d     13 0E 06 FE 
13761     F8 F6 F5 F7 
13765     FA FD 01 04 | 	byte	$0d, $0f, $12, $14, $13, $0e, $06, $fe, $f8, $f6, $f5, $f7, $fa, $fd, $01, $04
13769     07 0A 0D 0D 
1376d     0C 0B 08 07 
13771     08 09 0B 0E 
13775     11 14 17 19 | 	byte	$07, $0a, $0d, $0d, $0c, $0b, $08, $07, $08, $09, $0b, $0e, $11, $14, $17, $19
13779     1B 1D 1F 21 
1377d     23 23 22 1F 
13781     1C 1B 1A 1A 
13785     1B 1D 1E 19 | 	byte	$1b, $1d, $1f, $21, $23, $23, $22, $1f, $1c, $1b, $1a, $1a, $1b, $1d, $1e, $19
13789     0D 00 F5 EE 
1378d     EB EA EA EC 
13791     EF F2 F6 F9 
13795     FD 00 03 06 | 	byte	$0d, $00, $f5, $ee, $eb, $ea, $ea, $ec, $ef, $f2, $f6, $f9, $fd, $00, $03, $06
13799     08 0A 0D 0F 
1379d     12 13 12 10 
137a1     0E 0C 0B 0B 
137a5     0D 0E 10 11 | 	byte	$08, $0a, $0d, $0f, $12, $13, $12, $10, $0e, $0c, $0b, $0b, $0d, $0e, $10, $11
137a9     0F 08 FA ED 
137ad     E3 DD DB DA 
137b1     DB DD E1 E5 
137b5     E9 ED EF F2 | 	byte	$0f, $08, $fa, $ed, $e3, $dd, $db, $da, $db, $dd, $e1, $e5, $e9, $ed, $ef, $f2
137b9     F5 F5 F0 E8 
137bd     E0 DA D7 D7 
137c1     D8 DB DF E4 
137c5     E9 EC F0 F4 | 	byte	$f5, $f5, $f0, $e8, $e0, $da, $d7, $d7, $d8, $db, $df, $e4, $e9, $ec, $f0, $f4
137c9     F5 F5 F4 F2 
137cd     F1 F2 F4 F6 
137d1     F9 FD 00 05 
137d5     08 0C 0F 11 | 	byte	$f5, $f5, $f4, $f2, $f1, $f2, $f4, $f6, $f9, $fd, $00, $05, $08, $0c, $0f, $11
137d9     14 16 18 14 
137dd     0D 02 FA F4 
137e1     F2 F2 F4 F8 
137e5     FC FF 03 06 | 	byte	$14, $16, $18, $14, $0d, $02, $fa, $f4, $f2, $f2, $f4, $f8, $fc, $ff, $03, $06
137e9     09 0C 0C 0B 
137ed     08 06 05 06 
137f1     07 0A 0D 10 
137f5     14 17 1A 1B | 	byte	$09, $0c, $0c, $0b, $08, $06, $05, $06, $07, $0a, $0d, $10, $14, $17, $1a, $1b
137f9     1D 1F 21 21 
137fd     1F 1D 1B 1A 
13801     1A 1B 1E 20 
13805     22 20 16 0A | 	byte	$1d, $1f, $21, $21, $1f, $1d, $1b, $1a, $1a, $1b, $1e, $20, $22, $20, $16, $0a
13809     FD F5 F0 EE 
1380d     EE F0 F2 F5 
13811     F8 FC 00 04 
13815     07 0A 0D 0F | 	byte	$fd, $f5, $f0, $ee, $ee, $f0, $f2, $f5, $f8, $fc, $00, $04, $07, $0a, $0d, $0f
13819     11 13 15 16 
1381d     16 14 11 0D 
13821     0C 0C 0D 10 
13825     11 13 15 15 | 	byte	$11, $13, $15, $16, $16, $14, $11, $0d, $0c, $0c, $0d, $10, $11, $13, $15, $15
13829     0E 00 F0 E3 
1382d     DB D6 D4 D4 
13831     D6 DA DE E2 
13835     E6 E9 EC EB | 	byte	$0e, $00, $f0, $e3, $db, $d6, $d4, $d4, $d6, $da, $de, $e2, $e6, $e9, $ec, $eb
13839     E5 DD D6 D3 
1383d     D1 D1 D4 D7 
13841     DC E1 E6 EB 
13845     EF F3 F4 F4 | 	byte	$e5, $dd, $d6, $d3, $d1, $d1, $d4, $d7, $dc, $e1, $e6, $eb, $ef, $f3, $f4, $f4
13849     F2 F1 F1 F2 
1384d     F5 F7 FB FE 
13851     02 06 0A 0E 
13855     11 14 16 18 | 	byte	$f2, $f1, $f1, $f2, $f5, $f7, $fb, $fe, $02, $06, $0a, $0e, $11, $14, $16, $18
13859     1A 1A 14 09 
1385d     FE F5 F0 EE 
13861     EF F1 F5 FA 
13865     FE 02 06 09 | 	byte	$1a, $1a, $14, $09, $fe, $f5, $f0, $ee, $ef, $f1, $f5, $fa, $fe, $02, $06, $09
13869     0B 0B 09 06 
1386d     04 03 04 06 
13871     09 0C 10 13 
13875     17 19 1C 1D | 	byte	$0b, $0b, $09, $06, $04, $03, $04, $06, $09, $0c, $10, $13, $17, $19, $1c, $1d
13879     1E 1D 1B 1A 
1387d     1A 1B 1C 1E 
13881     20 23 25 26 
13885     1F 13 06 FC | 	byte	$1e, $1d, $1b, $1a, $1a, $1b, $1c, $1e, $20, $23, $25, $26, $1f, $13, $06, $fc
13889     F5 F3 F2 F4 
1388d     F6 F9 FD 00 
13891     03 06 0A 0E 
13895     10 13 15 16 | 	byte	$f5, $f3, $f2, $f4, $f6, $f9, $fd, $00, $03, $06, $0a, $0e, $10, $13, $15, $16
13899     18 19 1A 17 
1389d     14 11 0F 0E 
138a1     0F 11 13 15 
138a5     18 19 1A 15 | 	byte	$18, $19, $1a, $17, $14, $11, $0f, $0e, $0f, $11, $13, $15, $18, $19, $1a, $15
138a9     08 F5 E6 D9 
138ad     D2 CE CE CF 
138b1     D2 D7 DB DF 
138b5     E2 E0 D9 D2 | 	byte	$08, $f5, $e6, $d9, $d2, $ce, $ce, $cf, $d2, $d7, $db, $df, $e2, $e0, $d9, $d2
138b9     CC CA CA CC 
138bd     D0 D4 D8 DD 
138c1     E3 E8 ED F1 
138c5     F3 F3 F1 F0 | 	byte	$cc, $ca, $ca, $cc, $d0, $d4, $d8, $dd, $e3, $e8, $ed, $f1, $f3, $f3, $f1, $f0
138c9     F0 F2 F5 F8 
138cd     FC 00 04 07 
138d1     0B 0F 12 16 
138d5     18 1B 1D 1E | 	byte	$f0, $f2, $f5, $f8, $fc, $00, $04, $07, $0b, $0f, $12, $16, $18, $1b, $1d, $1e
138d9     1B 12 04 F8 
138dd     F0 EC EB EB 
138e1     EE F2 F7 FC 
138e5     01 04 08 0A | 	byte	$1b, $12, $04, $f8, $f0, $ec, $eb, $eb, $ee, $f2, $f7, $fc, $01, $04, $08, $0a
138e9     09 07 03 01 
138ed     00 01 04 06 
138f1     0A 0E 12 17 
138f5     19 1B 1A 19 | 	byte	$09, $07, $03, $01, $00, $01, $04, $06, $0a, $0e, $12, $17, $19, $1b, $1a, $19
138f9     17 18 19 1B 
138fd     1E 20 22 24 
13901     27 2A 26 1C 
13905     10 04 FC F8 | 	byte	$17, $18, $19, $1b, $1e, $20, $22, $24, $27, $2a, $26, $1c, $10, $04, $fc, $f8
13909     F7 F7 FA FE 
1390d     00 04 06 09 
13911     0D 10 13 16 
13915     19 1B 1C 1D | 	byte	$f7, $f7, $fa, $fe, $00, $04, $06, $09, $0d, $10, $13, $16, $19, $1b, $1c, $1d
13919     1D 1B 17 14 
1391d     12 11 11 12 
13921     14 16 19 1B 
13925     1E 1F 1C 0E | 	byte	$1d, $1b, $17, $14, $12, $11, $11, $12, $14, $16, $19, $1b, $1e, $1f, $1c, $0e
13929     FB E7 D8 CE 
1392d     CA C8 C9 CB 
13931     CF D3 D6 D3 
13935     CD C6 C1 BF | 	byte	$fb, $e7, $d8, $ce, $ca, $c8, $c9, $cb, $cf, $d3, $d6, $d3, $cd, $c6, $c1, $bf
13939     C0 C5 C9 CF 
1393d     D5 DA DF E3 
13941     E9 EE F1 F1 
13945     F0 EF EF F1 | 	byte	$c0, $c5, $c9, $cf, $d5, $da, $df, $e3, $e9, $ee, $f1, $f1, $f0, $ef, $ef, $f1
13949     F4 F8 FD 02 
1394d     06 09 0B 0E 
13951     12 16 1A 1D 
13955     20 21 20 19 | 	byte	$f4, $f8, $fd, $02, $06, $09, $0b, $0e, $12, $16, $1a, $1d, $20, $21, $20, $19
13959     0C FE F2 EC 
1395d     E8 E6 E7 EB 
13961     EF F5 FB FF 
13965     04 07 08 06 | 	byte	$0c, $fe, $f2, $ec, $e8, $e6, $e7, $eb, $ef, $f5, $fb, $ff, $04, $07, $08, $06
13969     02 FF FE FF 
1396d     01 02 05 08 
13971     0D 12 15 16 
13975     15 13 13 14 | 	byte	$02, $ff, $fe, $ff, $01, $02, $05, $08, $0d, $12, $15, $16, $15, $13, $13, $14
13979     17 1B 1F 23 
1397d     26 28 29 2C 
13981     2C 25 1A 0E 
13985     05 FE FB FB | 	byte	$17, $1b, $1f, $23, $26, $28, $29, $2c, $2c, $25, $1a, $0e, $05, $fe, $fb, $fb
13989     FD 01 05 09 
1398d     0C 0D 0F 13 
13991     16 1A 1E 20 
13995     22 22 20 1D | 	byte	$fd, $01, $05, $09, $0c, $0d, $0f, $13, $16, $1a, $1e, $20, $22, $22, $20, $1d
13999     1A 17 15 14 
1399d     14 13 15 16 
139a1     1A 1E 21 23 
139a5     24 22 18 03 | 	byte	$1a, $17, $15, $14, $14, $13, $15, $16, $1a, $1e, $21, $23, $24, $22, $18, $03
139a9     EE DC CE C6 
139ad     C2 C1 C3 C6 
139b1     C7 C4 BF BA 
139b5     B6 B5 B7 BB | 	byte	$ee, $dc, $ce, $c6, $c2, $c1, $c3, $c6, $c7, $c4, $bf, $ba, $b6, $b5, $b7, $bb
139b9     C2 C9 D1 D7 
139bd     DC DF E4 E9 
139c1     ED EF EF EF 
139c5     EF EF F2 F7 | 	byte	$c2, $c9, $d1, $d7, $dc, $df, $e4, $e9, $ed, $ef, $ef, $ef, $ef, $ef, $f2, $f7
139c9     FD 03 07 0A 
139cd     0D 0F 12 15 
139d1     1B 1F 22 24 
139d5     24 21 16 08 | 	byte	$fd, $03, $07, $0a, $0d, $0f, $12, $15, $1b, $1f, $22, $24, $24, $21, $16, $08
139d9     F8 EE E7 E3 
139dd     E2 E3 E6 EC 
139e1     F3 F9 FF 03 
139e5     05 05 02 FF | 	byte	$f8, $ee, $e7, $e3, $e2, $e3, $e6, $ec, $f3, $f9, $ff, $03, $05, $05, $02, $ff
139e9     FD FD FD FE 
139ed     00 02 06 0A 
139f1     0E 10 11 11 
139f5     11 12 15 1B | 	byte	$fd, $fd, $fd, $fe, $00, $02, $06, $0a, $0e, $10, $11, $11, $11, $12, $15, $1b
139f9     20 26 29 2B 
139fd     2D 2E 2F 2B 
13a01     22 16 0D 05 
13a05     00 FE 00 04 | 	byte	$20, $26, $29, $2b, $2d, $2e, $2f, $2b, $22, $16, $0d, $05, $00, $fe, $00, $04
13a09     08 0D 10 12 
13a0d     13 15 18 1C 
13a11     21 24 25 26 
13a15     24 1F 1B 18 | 	byte	$08, $0d, $10, $12, $13, $15, $18, $1c, $21, $24, $25, $26, $24, $1f, $1b, $18
13a19     16 16 15 15 
13a1d     15 15 19 1D 
13a21     22 25 26 26 
13a25     25 1F 0E F9 | 	byte	$16, $16, $15, $15, $15, $15, $19, $1d, $22, $25, $26, $26, $25, $1f, $0e, $f9
13a29     E4 D3 C8 C2 
13a2d     BF BE BC B9 
13a31     B4 B1 AF AF 
13a35     B1 B5 BC C5 | 	byte	$e4, $d3, $c8, $c2, $bf, $be, $bc, $b9, $b4, $b1, $af, $af, $b1, $b5, $bc, $c5
13a39     CD D4 DA DE 
13a3d     E1 E5 E8 EB 
13a41     EC ED ED EE 
13a45     F0 F4 F9 00 | 	byte	$cd, $d4, $da, $de, $e1, $e5, $e8, $eb, $ec, $ed, $ed, $ee, $f0, $f4, $f9, $00
13a49     06 0A 0D 0F 
13a4d     10 13 17 1D 
13a51     21 23 25 23 
13a55     1C 0F FF F2 | 	byte	$06, $0a, $0d, $0f, $10, $13, $17, $1d, $21, $23, $25, $23, $1c, $0f, $ff, $f2
13a59     E8 E2 E0 DF 
13a5d     E1 E5 EC F3 
13a61     FA FE 02 04 
13a65     03 00 FE FC | 	byte	$e8, $e2, $e0, $df, $e1, $e5, $ec, $f3, $fa, $fe, $02, $04, $03, $00, $fe, $fc
13a69     FB FB FC FD 
13a6d     FE 01 03 06 
13a71     09 0C 0E 0F 
13a75     12 17 1C 23 | 	byte	$fb, $fb, $fc, $fd, $fe, $01, $03, $06, $09, $0c, $0e, $0f, $12, $17, $1c, $23
13a79     27 2B 2C 2D 
13a7d     2E 2C 24 1A 
13a81     10 08 02 FE 
13a85     FE 01 06 0B | 	byte	$27, $2b, $2c, $2d, $2e, $2c, $24, $1a, $10, $08, $02, $fe, $fe, $01, $06, $0b
13a89     0F 12 13 13 
13a8d     15 19 1E 22 
13a91     25 25 23 20 
13a95     1A 16 14 14 | 	byte	$0f, $12, $13, $13, $15, $19, $1e, $22, $25, $25, $23, $20, $1a, $16, $14, $14
13a99     14 14 14 15 
13a9d     17 1B 1F 23 
13aa1     25 26 26 25 
13aa5     23 18 02 ED | 	byte	$14, $14, $14, $15, $17, $1b, $1f, $23, $25, $26, $26, $25, $23, $18, $02, $ed
13aa9     D9 CB C0 BA 
13aad     B3 AD A9 A7 
13ab1     A7 A9 AC B0 
13ab5     B7 BF C8 D0 | 	byte	$d9, $cb, $c0, $ba, $b3, $ad, $a9, $a7, $a7, $a9, $ac, $b0, $b7, $bf, $c8, $d0
13ab9     D6 DB DE E1 
13abd     E3 E5 E6 E8 
13ac1     EB EC EF F1 
13ac5     F6 FC 03 08 | 	byte	$d6, $db, $de, $e1, $e3, $e5, $e6, $e8, $eb, $ec, $ef, $f1, $f6, $fc, $03, $08
13ac9     0B 0E 10 12 
13acd     15 1A 1E 22 
13ad1     23 24 22 19 
13ad5     09 FB EF E7 | 	byte	$0b, $0e, $10, $12, $15, $1a, $1e, $22, $23, $24, $22, $19, $09, $fb, $ef, $e7
13ad9     E2 DF DF E3 
13add     E8 EF F6 FC 
13ae1     00 03 05 04 
13ae5     01 FF FD FC | 	byte	$e2, $df, $df, $e3, $e8, $ef, $f6, $fc, $00, $03, $05, $04, $01, $ff, $fd, $fc
13ae9     FB FB FB FB 
13aed     FC 00 04 08 
13af1     0C 0F 11 15 
13af5     1B 21 26 2A | 	byte	$fb, $fb, $fb, $fb, $fc, $00, $04, $08, $0c, $0f, $11, $15, $1b, $21, $26, $2a
13af9     2C 2E 2F 2E 
13afd     28 1D 13 0A 
13b01     04 00 FF 01 
13b05     05 09 0E 11 | 	byte	$2c, $2e, $2f, $2e, $28, $1d, $13, $0a, $04, $00, $ff, $01, $05, $09, $0e, $11
13b09     13 14 16 19 
13b0d     1C 20 24 26 
13b11     25 21 1C 17 
13b15     15 14 14 15 | 	byte	$13, $14, $16, $19, $1c, $20, $24, $26, $25, $21, $1c, $17, $15, $14, $14, $15
13b19     16 17 18 1B 
13b1d     1E 22 25 27 
13b21     28 27 28 28 
13b25     20 0C F6 E0 | 	byte	$16, $17, $18, $1b, $1e, $22, $25, $27, $28, $27, $28, $28, $20, $0c, $f6, $e0
13b29     CE C0 B2 A8 
13b2d     A1 9F A1 A4 
13b31     A8 AC B3 BA 
13b35     C3 CB D1 D8 | 	byte	$ce, $c0, $b2, $a8, $a1, $9f, $a1, $a4, $a8, $ac, $b3, $ba, $c3, $cb, $d1, $d8
13b39     DC DF E0 E1 
13b3d     E2 E5 E8 EB 
13b41     EE F2 F6 FB 
13b45     01 06 0A 0D | 	byte	$dc, $df, $e0, $e1, $e2, $e5, $e8, $eb, $ee, $f2, $f6, $fb, $01, $06, $0a, $0d
13b49     10 12 14 18 
13b4d     1C 1F 22 24 
13b51     24 21 16 06 
13b55     F8 ED E5 E1 | 	byte	$10, $12, $14, $18, $1c, $1f, $22, $24, $24, $21, $16, $06, $f8, $ed, $e5, $e1
13b59     E0 E2 E6 EB 
13b5d     F2 F7 FD 01 
13b61     04 06 06 03 
13b65     00 FD FB F9 | 	byte	$e0, $e2, $e6, $eb, $f2, $f7, $fd, $01, $04, $06, $06, $03, $00, $fd, $fb, $f9
13b69     F7 F6 F8 FB 
13b6d     FF 05 09 0E 
13b71     11 15 1A 1F 
13b75     24 28 2B 2E | 	byte	$f7, $f6, $f8, $fb, $ff, $05, $09, $0e, $11, $15, $1a, $1f, $24, $28, $2b, $2e
13b79     30 31 2C 23 
13b7d     16 0D 06 02 
13b81     00 01 04 08 
13b85     0C 0F 13 15 | 	byte	$30, $31, $2c, $23, $16, $0d, $06, $02, $00, $01, $04, $08, $0c, $0f, $13, $15
13b89     16 18 1B 1E 
13b8d     21 24 24 23 
13b91     1E 19 16 14 
13b95     14 16 17 18 | 	byte	$16, $18, $1b, $1e, $21, $24, $24, $23, $1e, $19, $16, $14, $14, $16, $17, $18
13b99     19 1B 1E 21 
13b9d     23 26 27 28 
13ba1     29 2A 2B 27 
13ba5     17 FF E5 CE | 	byte	$19, $1b, $1e, $21, $23, $26, $27, $28, $29, $2a, $2b, $27, $17, $ff, $e5, $ce
13ba9     B7 A6 9D 99 
13bad     99 9C A2 A7 
13bb1     AE B5 BC C4 
13bb5     CC D2 D8 DB | 	byte	$b7, $a6, $9d, $99, $99, $9c, $a2, $a7, $ae, $b5, $bc, $c4, $cc, $d2, $d8, $db
13bb9     DC DD DD E0 
13bbd     E3 E7 EB F0 
13bc1     F4 F9 FE 03 
13bc5     07 0B 0E 11 | 	byte	$dc, $dd, $dd, $e0, $e3, $e7, $eb, $f0, $f4, $f9, $fe, $03, $07, $0b, $0e, $11
13bc9     13 16 1A 1D 
13bcd     20 22 24 24 
13bd1     1F 13 02 F2 
13bd5     E9 E2 E1 E1 | 	byte	$13, $16, $1a, $1d, $20, $22, $24, $24, $1f, $13, $02, $f2, $e9, $e2, $e1, $e1
13bd9     E4 E8 EE F2 
13bdd     F8 FD 02 06 
13be1     08 07 03 FF 
13be5     FA F6 F3 F2 | 	byte	$e4, $e8, $ee, $f2, $f8, $fd, $02, $06, $08, $07, $03, $ff, $fa, $f6, $f3, $f2
13be9     F3 F7 FC 01 
13bed     06 0B 10 15 
13bf1     19 1E 22 26 
13bf5     2A 2D 30 31 | 	byte	$f3, $f7, $fc, $01, $06, $0b, $10, $15, $19, $1e, $22, $26, $2a, $2d, $30, $31
13bf9     2F 26 1A 0F 
13bfd     07 02 01 01 
13c01     03 06 0A 0D 
13c05     10 13 16 18 | 	byte	$2f, $26, $1a, $0f, $07, $02, $01, $01, $03, $06, $0a, $0d, $10, $13, $16, $18
13c09     1A 1D 20 22 
13c0d     23 22 1F 1A 
13c11     16 14 13 14 
13c15     15 18 1A 1C | 	byte	$1a, $1d, $20, $22, $23, $22, $1f, $1a, $16, $14, $13, $14, $15, $18, $1a, $1c
13c19     1E 21 23 25 
13c1d     27 29 2A 2B 
13c21     2D 2E 2B 1F 
13c25     04 E6 C5 AE | 	byte	$1e, $21, $23, $25, $27, $29, $2a, $2b, $2d, $2e, $2b, $1f, $04, $e6, $c5, $ae
13c29     9F 97 95 97 
13c2d     9C A2 A9 B0 
13c31     B8 BF C6 CD 
13c35     D3 D6 D7 D8 | 	byte	$9f, $97, $95, $97, $9c, $a2, $a9, $b0, $b8, $bf, $c6, $cd, $d3, $d6, $d7, $d8
13c39     DA DC DF E3 
13c3d     E8 ED F2 F7 
13c41     FC 01 05 08 
13c45     0C 10 13 15 | 	byte	$da, $dc, $df, $e3, $e8, $ed, $f2, $f7, $fc, $01, $05, $08, $0c, $10, $13, $15
13c49     19 1B 1E 20 
13c4d     22 24 23 1B 
13c51     0C FD EE E4 
13c55     E1 E0 E2 E6 | 	byte	$19, $1b, $1e, $20, $22, $24, $23, $1b, $0c, $fd, $ee, $e4, $e1, $e0, $e2, $e6
13c59     EA EF F4 F9 
13c5d     FE 03 07 08 
13c61     06 00 F9 F4 
13c65     F0 F0 F1 F5 | 	byte	$ea, $ef, $f4, $f9, $fe, $03, $07, $08, $06, $00, $f9, $f4, $f0, $f0, $f1, $f5
13c69     F9 FD 02 08 
13c6d     0D 13 18 1D 
13c71     21 24 28 2B 
13c75     2F 32 32 2B | 	byte	$f9, $fd, $02, $08, $0d, $13, $18, $1d, $21, $24, $28, $2b, $2f, $32, $32, $2b
13c79     1F 12 09 02 
13c7d     00 00 02 05 
13c81     08 0B 0E 11 
13c85     14 17 1A 1D | 	byte	$1f, $12, $09, $02, $00, $00, $02, $05, $08, $0b, $0e, $11, $14, $17, $1a, $1d
13c89     1F 21 22 21 
13c8d     1E 1A 16 13 
13c91     13 13 14 16 
13c95     19 1B 1E 20 | 	byte	$1f, $21, $22, $21, $1e, $1a, $16, $13, $13, $13, $14, $16, $19, $1b, $1e, $20
13c99     23 24 26 28 
13c9d     2A 2C 2D 2E 
13ca1     2F 2D 22 03 
13ca5     E1 C0 A8 9B | 	byte	$23, $24, $26, $28, $2a, $2c, $2d, $2e, $2f, $2d, $22, $03, $e1, $c0, $a8, $9b
13ca9     95 95 98 9D 
13cad     A4 AB B2 BA 
13cb1     C2 C8 CD D0 
13cb5     D2 D3 D5 D7 | 	byte	$95, $95, $98, $9d, $a4, $ab, $b2, $ba, $c2, $c8, $cd, $d0, $d2, $d3, $d5, $d7
13cb9     DB DF E4 E9 
13cbd     EE F4 F9 FE 
13cc1     03 06 0A 0D 
13cc5     11 14 16 1A | 	byte	$db, $df, $e4, $e9, $ee, $f4, $f9, $fe, $03, $06, $0a, $0d, $11, $14, $16, $1a
13cc9     1D 1E 21 23 
13ccd     24 21 17 07 
13cd1     F7 EA E2 E0 
13cd5     E0 E3 E7 EC | 	byte	$1d, $1e, $21, $23, $24, $21, $17, $07, $f7, $ea, $e2, $e0, $e0, $e3, $e7, $ec
13cd9     F0 F5 FA FF 
13cdd     04 07 06 01 
13ce1     F9 F2 EE EE 
13ce5     EF F2 F6 FB | 	byte	$f0, $f5, $fa, $ff, $04, $07, $06, $01, $f9, $f2, $ee, $ee, $ef, $f2, $f6, $fb
13ce9     01 06 0B 11 
13ced     16 1A 1F 23 
13cf1     26 29 2D 30 
13cf5     31 2D 24 17 | 	byte	$01, $06, $0b, $11, $16, $1a, $1f, $23, $26, $29, $2d, $30, $31, $2d, $24, $17
13cf9     0C 04 01 00 
13cfd     02 04 07 0B 
13d01     0E 11 14 16 
13d05     19 1B 1E 21 | 	byte	$0c, $04, $01, $00, $02, $04, $07, $0b, $0e, $11, $14, $16, $19, $1b, $1e, $21
13d09     22 21 1E 1A 
13d0d     16 14 13 14 
13d11     15 16 19 1B 
13d15     1D 20 23 25 | 	byte	$22, $21, $1e, $1a, $16, $14, $13, $14, $15, $16, $19, $1b, $1d, $20, $23, $25
13d19     27 28 2A 2B 
13d1d     2D 2E 2F 2E 
13d21     29 1A FE DF 
13d25     BF AB 9D 98 | 	byte	$27, $28, $2a, $2b, $2d, $2e, $2f, $2e, $29, $1a, $fe, $df, $bf, $ab, $9d, $98
13d29     97 9A 9F A6 
13d2d     AD B4 BC C3 
13d31     C8 CB CC CD 
13d35     CF D3 D7 DC | 	byte	$97, $9a, $9f, $a6, $ad, $b4, $bc, $c3, $c8, $cb, $cc, $cd, $cf, $d3, $d7, $dc
13d39     E1 E6 EB F1 
13d3d     F6 FB 00 04 
13d41     08 0B 0E 11 
13d45     14 18 1B 1D | 	byte	$e1, $e6, $eb, $f1, $f6, $fb, $00, $04, $08, $0b, $0e, $11, $14, $18, $1b, $1d
13d49     1F 21 22 23 
13d4d     1E 11 01 F3 
13d51     E7 E1 DF E0 
13d55     E4 E8 ED F2 | 	byte	$1f, $21, $22, $23, $1e, $11, $01, $f3, $e7, $e1, $df, $e0, $e4, $e8, $ed, $f2
13d59     F6 FB 00 03 
13d5d     03 01 FA F4 
13d61     EF ED EE F0 
13d65     F4 FA FF 05 | 	byte	$f6, $fb, $00, $03, $03, $01, $fa, $f4, $ef, $ed, $ee, $f0, $f4, $fa, $ff, $05
13d69     09 0E 13 18 
13d6d     1C 20 25 28 
13d71     2B 2D 30 2E 
13d75     26 1B 0F 07 | 	byte	$09, $0e, $13, $18, $1c, $20, $25, $28, $2b, $2d, $30, $2e, $26, $1b, $0f, $07
13d79     02 00 00 02 
13d7d     06 09 0D 10 
13d81     13 15 17 1A 
13d85     1D 1F 22 21 | 	byte	$02, $00, $00, $02, $06, $09, $0d, $10, $13, $15, $17, $1a, $1d, $1f, $22, $21
13d89     1E 1A 16 13 
13d8d     12 14 15 17 
13d91     19 1B 1D 1F 
13d95     22 25 27 29 | 	byte	$1e, $1a, $16, $13, $12, $14, $15, $17, $19, $1b, $1d, $1f, $22, $25, $27, $29
13d99     2A 2B 2C 2D 
13d9d     2E 2E 27 1E 
13da1     11 FB E0 C5 
13da5     B1 A3 9D 9C | 	byte	$2a, $2b, $2c, $2d, $2e, $2e, $27, $1e, $11, $fb, $e0, $c5, $b1, $a3, $9d, $9c
13da9     9E A2 A8 AF 
13dad     B6 BD C2 C5 
13db1     C6 C8 CA CD 
13db5     D3 D8 DE E3 | 	byte	$9e, $a2, $a8, $af, $b6, $bd, $c2, $c5, $c6, $c8, $ca, $cd, $d3, $d8, $de, $e3
13db9     E8 ED F2 F7 
13dbd     FC 02 05 09 
13dc1     0C 0F 11 15 
13dc5     18 1B 1E 20 | 	byte	$e8, $ed, $f2, $f7, $fc, $02, $05, $09, $0c, $0f, $11, $15, $18, $1b, $1e, $20
13dc9     21 22 22 1B 
13dcd     0D FC EE E5 
13dd1     DF DE DF E3 
13dd5     E8 ED F3 F8 | 	byte	$21, $22, $22, $1b, $0d, $fc, $ee, $e5, $df, $de, $df, $e3, $e8, $ed, $f3, $f8
13dd9     FB FC FD FD 
13ddd     FB F6 F2 EF 
13de1     EF F0 F3 F7 
13de5     FC 03 08 0D | 	byte	$fb, $fc, $fd, $fd, $fb, $f6, $f2, $ef, $ef, $f0, $f3, $f7, $fc, $03, $08, $0d
13de9     11 14 19 1E 
13ded     23 27 2A 2D 
13df1     2F 2F 28 1E 
13df5     12 0A 04 01 | 	byte	$11, $14, $19, $1e, $23, $27, $2a, $2d, $2f, $2f, $28, $1e, $12, $0a, $04, $01
13df9     00 01 03 07 
13dfd     0B 0F 12 15 
13e01     17 19 1B 1E 
13e05     21 22 20 1B | 	byte	$00, $01, $03, $07, $0b, $0f, $12, $15, $17, $19, $1b, $1e, $21, $22, $20, $1b
13e09     16 13 12 13 
13e0d     15 17 1A 1B 
13e11     1C 1E 21 24 
13e15     27 29 2B 2C | 	byte	$16, $13, $12, $13, $15, $17, $1a, $1b, $1c, $1e, $21, $24, $27, $29, $2b, $2c
13e19     2C 2D 2D 2C 
13e1d     25 1B 11 09 
13e21     FC E7 CF BA 
13e25     AB A4 A2 A1 | 	byte	$2c, $2d, $2d, $2c, $25, $1b, $11, $09, $fc, $e7, $cf, $ba, $ab, $a4, $a2, $a1
13e29     A4 A9 B0 B6 
13e2d     BC C0 C2 C3 
13e31     C5 C8 CE D4 
13e35     DB E1 E6 EA | 	byte	$a4, $a9, $b0, $b6, $bc, $c0, $c2, $c3, $c5, $c8, $ce, $d4, $db, $e1, $e6, $ea
13e39     EE F3 F8 FD 
13e3d     02 07 0A 0D 
13e41     0F 11 15 18 
13e45     1C 1F 21 21 | 	byte	$ee, $f3, $f8, $fd, $02, $07, $0a, $0d, $0f, $11, $15, $18, $1c, $1f, $21, $21
13e49     21 1E 15 06 
13e4d     F5 EA E2 DD 
13e51     DC DE E2 E9 
13e55     EE F3 F5 F6 | 	byte	$21, $1e, $15, $06, $f5, $ea, $e2, $dd, $dc, $de, $e2, $e9, $ee, $f3, $f5, $f6
13e59     F6 F8 F9 F9 
13e5d     F6 F3 F1 F0 
13e61     F2 F5 FA 00 
13e65     05 0B 10 13 | 	byte	$f6, $f8, $f9, $f9, $f6, $f3, $f1, $f0, $f2, $f5, $fa, $00, $05, $0b, $10, $13
13e69     16 1B 1F 25 
13e6d     29 2C 2E 2F 
13e71     2B 21 15 0C 
13e75     05 02 00 00 | 	byte	$16, $1b, $1f, $25, $29, $2c, $2e, $2f, $2b, $21, $15, $0c, $05, $02, $00, $00
13e79     01 04 08 0D 
13e7d     12 15 17 18 
13e81     1A 1D 1F 21 
13e85     20 1C 17 13 | 	byte	$01, $04, $08, $0d, $12, $15, $17, $18, $1a, $1d, $1f, $21, $20, $1c, $17, $13
13e89     11 11 14 17 
13e8d     1A 1C 1E 1F 
13e91     20 22 26 29 
13e95     2C 2D 2E 2D | 	byte	$11, $11, $14, $17, $1a, $1c, $1e, $1f, $20, $22, $26, $29, $2c, $2d, $2e, $2d
13e99     2C 28 21 18 
13e9d     10 0A 05 FF 
13ea1     F0 DA C3 B5 
13ea5     AB A6 A5 A7 | 	byte	$2c, $28, $21, $18, $10, $0a, $05, $ff, $f0, $da, $c3, $b5, $ab, $a6, $a5, $a7
13ea9     AB B0 B5 B9 
13ead     BC BE C0 C3 
13eb1     C8 CE D5 DC 
13eb5     E2 E7 EB EF | 	byte	$ab, $b0, $b5, $b9, $bc, $be, $c0, $c3, $c8, $ce, $d5, $dc, $e2, $e7, $eb, $ef
13eb9     F3 F9 FF 04 
13ebd     09 0C 0E 0F 
13ec1     12 16 1A 1D 
13ec5     20 21 21 20 | 	byte	$f3, $f9, $ff, $04, $09, $0c, $0e, $0f, $12, $16, $1a, $1d, $20, $21, $21, $20
13ec9     1B 10 FF F2 
13ecd     E7 DF DC DB 
13ed1     DE E3 EA ED 
13ed5     EF F1 F1 F3 | 	byte	$1b, $10, $ff, $f2, $e7, $df, $dc, $db, $de, $e3, $ea, $ed, $ef, $f1, $f1, $f3
13ed9     F6 F9 F9 F7 
13edd     F4 F2 F2 F4 
13ee1     F7 FD 03 0A 
13ee5     0F 12 15 18 | 	byte	$f6, $f9, $f9, $f7, $f4, $f2, $f2, $f4, $f7, $fd, $03, $0a, $0f, $12, $15, $18
13ee9     1C 21 27 2B 
13eed     2E 2F 2D 24 
13ef1     18 0E 07 03 
13ef5     01 00 00 02 | 	byte	$1c, $21, $27, $2b, $2e, $2f, $2d, $24, $18, $0e, $07, $03, $01, $00, $00, $02
13ef9     06 0A 10 14 
13efd     17 18 19 1B 
13f01     1D 1F 20 1D 
13f05     19 14 11 10 | 	byte	$06, $0a, $10, $14, $17, $18, $19, $1b, $1d, $1f, $20, $1d, $19, $14, $11, $10
13f09     12 15 19 1C 
13f0d     1F 20 20 22 
13f11     24 28 2C 2F 
13f15     2F 2E 2B 25 | 	byte	$12, $15, $19, $1c, $1f, $20, $20, $22, $24, $28, $2c, $2f, $2f, $2e, $2b, $25
13f19     1D 14 0E 0A 
13f1d     07 05 02 F8 
13f21     E6 D1 BF B3 
13f25     AC A9 A9 AC | 	byte	$1d, $14, $0e, $0a, $07, $05, $02, $f8, $e6, $d1, $bf, $b3, $ac, $a9, $a9, $ac
13f29     AF B2 B5 B8 
13f2d     BC BE C2 C8 
13f31     CE D7 DD E4 
13f35     E8 EC F0 F4 | 	byte	$af, $b2, $b5, $b8, $bc, $be, $c2, $c8, $ce, $d7, $dd, $e4, $e8, $ec, $f0, $f4
13f39     FA 00 06 0A 
13f3d     0C 0E 0F 12 
13f41     16 1A 1D 20 
13f45     21 21 1F 17 | 	byte	$fa, $00, $06, $0a, $0c, $0e, $0f, $12, $16, $1a, $1d, $20, $21, $21, $1f, $17
13f49     09 FB ED E4 
13f4d     DD DB DB DE 
13f51     E1 E5 E8 EA 
13f55     ED EF F3 F7 | 	byte	$09, $fb, $ed, $e4, $dd, $db, $db, $de, $e1, $e5, $e8, $ea, $ed, $ef, $f3, $f7
13f59     FA FA F7 F5 
13f5d     F4 F4 F6 FB 
13f61     00 07 0C 11 
13f65     14 16 1A 1E | 	byte	$fa, $fa, $f7, $f5, $f4, $f4, $f6, $fb, $00, $07, $0c, $11, $14, $16, $1a, $1e
13f69     24 29 2C 2F 
13f6d     2E 28 1C 11 
13f71     08 03 01 01 
13f75     01 01 04 08 | 	byte	$24, $29, $2c, $2f, $2e, $28, $1c, $11, $08, $03, $01, $01, $01, $01, $04, $08
13f79     0D 11 15 18 
13f7d     1A 1A 1C 1E 
13f81     1E 1C 18 15 
13f85     12 11 11 14 | 	byte	$0d, $11, $15, $18, $1a, $1a, $1c, $1e, $1e, $1c, $18, $15, $12, $11, $11, $14
13f89     18 1C 1F 21 
13f8d     22 22 24 27 
13f91     2A 2D 2F 2F 
13f95     2B 23 19 10 | 	byte	$18, $1c, $1f, $21, $22, $22, $24, $27, $2a, $2d, $2f, $2f, $2b, $23, $19, $10
13f99     0B 09 08 07 
13f9d     07 07 02 F5 
13fa1     DF CB BC B2 
13fa5     AD AB AA AB | 	byte	$0b, $09, $08, $07, $07, $07, $02, $f5, $df, $cb, $bc, $b2, $ad, $ab, $aa, $ab
13fa9     AE B2 B6 BA 
13fad     BE C3 C9 D0 
13fb1     D9 DF E5 E9 
13fb5     ED F1 F5 FB | 	byte	$ae, $b2, $b6, $ba, $be, $c3, $c9, $d0, $d9, $df, $e5, $e9, $ed, $f1, $f5, $fb
13fb9     01 06 0A 0C 
13fbd     0E 10 13 17 
13fc1     1B 1E 1F 20 
13fc5     20 1D 13 04 | 	byte	$01, $06, $0a, $0c, $0e, $10, $13, $17, $1b, $1e, $1f, $20, $20, $1d, $13, $04
13fc9     F4 E9 E0 DB 
13fcd     D9 D9 D9 DC 
13fd1     E0 E4 E9 ED 
13fd5     F1 F5 F9 FC | 	byte	$f4, $e9, $e0, $db, $d9, $d9, $d9, $dc, $e0, $e4, $e9, $ed, $f1, $f5, $f9, $fc
13fd9     FB F8 F6 F4 
13fdd     F6 F9 FD 04 
13fe1     09 0E 12 16 
13fe5     19 1C 20 24 | 	byte	$fb, $f8, $f6, $f4, $f6, $f9, $fd, $04, $09, $0e, $12, $16, $19, $1c, $20, $24
13fe9     29 2C 2E 2B 
13fed     21 14 0A 04 
13ff1     01 00 01 02 
13ff5     04 06 0A 0F | 	byte	$29, $2c, $2e, $2b, $21, $14, $0a, $04, $01, $00, $01, $02, $04, $06, $0a, $0f
13ff9     13 16 18 1A 
13ffd     1C 1D 1D 1A 
14001     17 14 12 11 
14005     12 13 17 1A | 	byte	$13, $16, $18, $1a, $1c, $1d, $1d, $1a, $17, $14, $12, $11, $12, $13, $17, $1a
14009     1D 20 22 23 
1400d     24 25 28 2B 
14011     2E 2E 2A 21 
14015     17 0E 09 07 | 	byte	$1d, $20, $22, $23, $24, $25, $28, $2b, $2e, $2e, $2a, $21, $17, $0e, $09, $07
14019     07 08 09 0A 
1401d     0C 0B 01 ED 
14021     D6 C5 B7 AF 
14025     AA A7 A7 AA | 	byte	$07, $08, $09, $0a, $0c, $0b, $01, $ed, $d6, $c5, $b7, $af, $aa, $a7, $a7, $aa
14029     B0 B4 BA C0 
1402d     C5 CB D2 D9 
14031     E0 E5 EA EE 
14035     F2 F7 FC 02 | 	byte	$b0, $b4, $ba, $c0, $c5, $cb, $d2, $d9, $e0, $e5, $ea, $ee, $f2, $f7, $fc, $02
14039     06 09 0C 0F 
1403d     11 14 17 1B 
14041     1D 1F 20 20 
14045     1B 0F FE EE | 	byte	$06, $09, $0c, $0f, $11, $14, $17, $1b, $1d, $1f, $20, $20, $1b, $0f, $fe, $ee
14049     E3 DC D8 D5 
1404d     D4 D5 D9 DF 
14051     E4 E9 EE F4 
14055     F9 FC FD FB | 	byte	$e3, $dc, $d8, $d5, $d4, $d5, $d9, $df, $e4, $e9, $ee, $f4, $f9, $fc, $fd, $fb
14059     F8 F6 F6 F8 
1405d     FC 00 06 0B 
14061     0F 13 17 1A 
14065     1E 22 26 29 | 	byte	$f8, $f6, $f6, $f8, $fc, $00, $06, $0b, $0f, $13, $17, $1a, $1e, $22, $26, $29
14069     2D 2D 26 1A 
1406d     0D 04 00 FF 
14071     FF 00 03 05 
14075     09 0C 10 14 | 	byte	$2d, $2d, $26, $1a, $0d, $04, $00, $ff, $ff, $00, $03, $05, $09, $0c, $10, $14
14079     18 1A 1D 1E 
1407d     1D 1A 17 14 
14081     12 11 13 14 
14085     17 19 1C 1F | 	byte	$18, $1a, $1d, $1e, $1d, $1a, $17, $14, $12, $11, $13, $14, $17, $19, $1c, $1f
14089     21 24 25 27 
1408d     28 2A 2D 2D 
14091     28 1E 15 0C 
14095     07 05 06 08 | 	byte	$21, $24, $25, $27, $28, $2a, $2d, $2d, $28, $1e, $15, $0c, $07, $05, $06, $08
14099     0A 0C 0E 11 
1409d     12 0B F8 E1 
140a1     CE BD B2 A9 
140a5     A5 A6 AA AF | 	byte	$0a, $0c, $0e, $11, $12, $0b, $f8, $e1, $ce, $bd, $b2, $a9, $a5, $a6, $aa, $af
140a9     B5 BB C1 C7 
140ad     CD D3 DA E0 
140b1     E6 EA F0 F4 
140b5     F8 FD 01 06 | 	byte	$b5, $bb, $c1, $c7, $cd, $d3, $da, $e0, $e6, $ea, $f0, $f4, $f8, $fd, $01, $06
140b9     09 0D 10 12 
140bd     14 17 19 1C 
140c1     1E 20 1F 18 
140c5     0A F7 E8 DC | 	byte	$09, $0d, $10, $12, $14, $17, $19, $1c, $1e, $20, $1f, $18, $0a, $f7, $e8, $dc
140c9     D5 D1 CF D0 
140cd     D3 D9 DF E6 
140d1     EC F2 F7 FC 
140d5     FF FE FB F9 | 	byte	$d5, $d1, $cf, $d0, $d3, $d9, $df, $e6, $ec, $f2, $f7, $fc, $ff, $fe, $fb, $f9
140d9     F7 F8 FB FE 
140dd     02 07 0C 10 
140e1     15 19 1C 20 
140e5     22 26 2A 2C | 	byte	$f7, $f8, $fb, $fe, $02, $07, $0c, $10, $15, $19, $1c, $20, $22, $26, $2a, $2c
140e9     28 1E 11 06 
140ed     FF FC FC FE 
140f1     01 04 07 0A 
140f5     0D 11 15 19 | 	byte	$28, $1e, $11, $06, $ff, $fc, $fc, $fe, $01, $04, $07, $0a, $0d, $11, $15, $19
140f9     1C 1E 1D 1A 
140fd     15 12 11 11 
14101     13 15 17 18 
14105     1B 1D 20 23 | 	byte	$1c, $1e, $1d, $1a, $15, $12, $11, $11, $13, $15, $17, $18, $1b, $1d, $20, $23
14109     25 27 29 2A 
1410d     2B 2A 25 1C 
14111     13 0C 07 05 
14115     05 07 0A 0E | 	byte	$25, $27, $29, $2a, $2b, $2a, $25, $1c, $13, $0c, $07, $05, $05, $07, $0a, $0e
14119     10 13 16 17 
1411d     14 05 ED D5 
14121     C1 B1 A8 A4 
14125     A5 AA AF B6 | 	byte	$10, $13, $16, $17, $14, $05, $ed, $d5, $c1, $b1, $a8, $a4, $a5, $aa, $af, $b6
14129     BC C3 C9 CE 
1412d     D4 DA E0 E7 
14131     EC F1 F5 F8 
14135     FD 01 05 0A | 	byte	$bc, $c3, $c9, $ce, $d4, $da, $e0, $e7, $ec, $f1, $f5, $f8, $fd, $01, $05, $0a
14139     0D 10 12 14 
1413d     16 18 1B 1D 
14141     1F 1D 13 02 
14145     EE DF D4 CE | 	byte	$0d, $10, $12, $14, $16, $18, $1b, $1d, $1f, $1d, $13, $02, $ee, $df, $d4, $ce
14149     CB CC CF D4 
1414d     DA E1 E8 EF 
14151     F5 FA FE 00 
14155     FE FC FA F9 | 	byte	$cb, $cc, $cf, $d4, $da, $e1, $e8, $ef, $f5, $fa, $fe, $00, $fe, $fc, $fa, $f9
14159     FB FD 01 05 
1415d     09 0E 13 17 
14161     1B 1E 21 23 
14165     26 29 29 21 | 	byte	$fb, $fd, $01, $05, $09, $0e, $13, $17, $1b, $1e, $21, $23, $26, $29, $29, $21
14169     16 09 01 FC 
1416d     FB FC FF 02 
14171     06 09 0C 0F 
14175     12 16 1A 1D | 	byte	$16, $09, $01, $fc, $fb, $fc, $ff, $02, $06, $09, $0c, $0f, $12, $16, $1a, $1d
14179     1D 1A 16 11 
1417d     10 10 12 15 
14181     17 19 1B 1D 
14185     20 23 25 28 | 	byte	$1d, $1a, $16, $11, $10, $10, $12, $15, $17, $19, $1b, $1d, $20, $23, $25, $28
14189     29 2A 2B 28 
1418d     21 17 10 0A 
14191     07 06 06 08 
14195     0B 0E 12 15 | 	byte	$29, $2a, $2b, $28, $21, $17, $10, $0a, $07, $06, $06, $08, $0b, $0e, $12, $15
14199     17 19 1B 1A 
1419d     0F F7 DD C5 
141a1     B3 AA A6 A7 
141a5     AB B1 B7 BD | 	byte	$17, $19, $1b, $1a, $0f, $f7, $dd, $c5, $b3, $aa, $a6, $a7, $ab, $b1, $b7, $bd
141a9     C3 C9 CF D5 
141ad     DB E1 E8 ED 
141b1     F1 F6 F9 FD 
141b5     01 06 0A 0D | 	byte	$c3, $c9, $cf, $d5, $db, $e1, $e8, $ed, $f1, $f6, $f9, $fd, $01, $06, $0a, $0d
141b9     0F 11 13 15 
141bd     18 1A 1D 1E 
141c1     1A 0D F8 E5 
141c5     D5 CD C9 C9 | 	byte	$0f, $11, $13, $15, $18, $1a, $1d, $1e, $1a, $0d, $f8, $e5, $d5, $cd, $c9, $c9
141c9     CC D0 D6 DC 
141cd     E3 E9 F0 F6 
141d1     FC 00 01 FF 
141d5     FD FB FA FC | 	byte	$cc, $d0, $d6, $dc, $e3, $e9, $f0, $f6, $fc, $00, $01, $ff, $fd, $fb, $fa, $fc
141d9     FE 02 06 0B 
141dd     10 14 18 1C 
141e1     1E 21 24 27 
141e5     28 24 19 0D | 	byte	$fe, $02, $06, $0b, $10, $14, $18, $1c, $1e, $21, $24, $27, $28, $24, $19, $0d
141e9     03 FD FA FA 
141ed     FC 00 04 07 
141f1     0A 0E 11 14 
141f5     17 1A 1C 1A | 	byte	$03, $fd, $fa, $fa, $fc, $00, $04, $07, $0a, $0e, $11, $14, $17, $1a, $1c, $1a
141f9     16 12 0F 10 
141fd     11 14 17 19 
14201     1B 1D 1F 22 
14205     24 27 29 2B | 	byte	$16, $12, $0f, $10, $11, $14, $17, $19, $1b, $1d, $1f, $22, $24, $27, $29, $2b
14209     2A 26 1E 15 
1420d     0D 08 06 06 
14211     07 0A 0C 0F 
14215     12 15 18 1B | 	byte	$2a, $26, $1e, $15, $0d, $08, $06, $06, $07, $0a, $0c, $0f, $12, $15, $18, $1b
14219     1C 1F 1E 15 
1421d     FD E3 C9 B7 
14221     AD A9 A9 AD 
14225     B2 B9 BF C4 | 	byte	$1c, $1f, $1e, $15, $fd, $e3, $c9, $b7, $ad, $a9, $a9, $ad, $b2, $b9, $bf, $c4
14229     CA D0 D6 DC 
1422d     E2 E8 ED F1 
14231     F5 F9 FD 01 
14235     05 09 0C 0F | 	byte	$ca, $d0, $d6, $dc, $e2, $e8, $ed, $f1, $f5, $f9, $fd, $01, $05, $09, $0c, $0f
14239     11 14 15 17 
1423d     1A 1C 1C 13 
14241     00 EC D9 CE 
14245     C8 C7 C9 CE | 	byte	$11, $14, $15, $17, $1a, $1c, $1c, $13, $00, $ec, $d9, $ce, $c8, $c7, $c9, $ce
14249     D3 D9 DF E5 
1424d     EC F2 F8 FE 
14251     02 02 00 FC 
14255     FB FB FC FF | 	byte	$d3, $d9, $df, $e5, $ec, $f2, $f8, $fe, $02, $02, $00, $fc, $fb, $fb, $fc, $ff
14259     04 08 0D 11 
1425d     15 19 1D 20 
14261     23 26 28 25 
14265     1C 10 05 FE | 	byte	$04, $08, $0d, $11, $15, $19, $1d, $20, $23, $26, $28, $25, $1c, $10, $05, $fe
14269     FB F9 FA FD 
1426d     01 05 08 0C 
14271     10 13 16 18 
14275     1A 19 16 12 | 	byte	$fb, $f9, $fa, $fd, $01, $05, $08, $0c, $10, $13, $16, $18, $1a, $19, $16, $12
14279     10 0F 10 12 
1427d     15 18 1B 1D 
14281     20 21 24 26 
14285     28 29 29 24 | 	byte	$10, $0f, $10, $12, $15, $18, $1b, $1d, $20, $21, $24, $26, $28, $29, $29, $24
14289     1B 12 0A 06 
1428d     05 06 08 0B 
14291     0E 11 14 16 
14295     19 1C 1E 20 | 	byte	$1b, $12, $0a, $06, $05, $06, $08, $0b, $0e, $11, $14, $16, $19, $1c, $1e, $20
14299     21 1E 17 04 
1429d     E9 D0 BF B3 
142a1     AE AD AF B4 
142a5     B9 BF C5 CB | 	byte	$21, $1e, $17, $04, $e9, $d0, $bf, $b3, $ae, $ad, $af, $b4, $b9, $bf, $c5, $cb
142a9     D1 D6 DC E1 
142ad     E7 EC F1 F6 
142b1     F9 FD 01 04 
142b5     08 0B 0E 11 | 	byte	$d1, $d6, $dc, $e1, $e7, $ec, $f1, $f6, $f9, $fd, $01, $04, $08, $0b, $0e, $11
142b9     14 15 17 18 
142bd     18 14 09 F5 
142c1     E3 D3 C9 C7 
142c5     C7 CB D0 D6 | 	byte	$14, $15, $17, $18, $18, $14, $09, $f5, $e3, $d3, $c9, $c7, $c7, $cb, $d0, $d6
142c9     DC E2 E8 EE 
142cd     F4 FA 00 04 
142d1     04 00 FC FA 
142d5     FB FD 01 05 | 	byte	$dc, $e2, $e8, $ee, $f4, $fa, $00, $04, $04, $00, $fc, $fa, $fb, $fd, $01, $05
142d9     09 0E 12 16 
142dd     1A 1D 21 24 
142e1     27 26 1E 12 
142e5     08 FF FB F9 | 	byte	$09, $0e, $12, $16, $1a, $1d, $21, $24, $27, $26, $1e, $12, $08, $ff, $fb, $f9
142e9     F9 FB FE 02 
142ed     06 0A 0E 12 
142f1     15 17 19 17 
142f5     15 11 0F 0F | 	byte	$f9, $fb, $fe, $02, $06, $0a, $0e, $12, $15, $17, $19, $17, $15, $11, $0f, $0f
142f9     0F 11 13 16 
142fd     1A 1D 20 22 
14301     23 25 27 29 
14305     27 22 18 0F | 	byte	$0f, $11, $13, $16, $1a, $1d, $20, $22, $23, $25, $27, $29, $27, $22, $18, $0f
14309     0A 06 05 06 
1430d     09 0C 10 13 
14311     15 17 19 1C 
14315     1F 21 22 20 | 	byte	$0a, $06, $05, $06, $09, $0c, $10, $13, $15, $17, $19, $1c, $1f, $21, $22, $20
14319     1D 18 0A F2 
1431d     DC C7 BA B3 
14321     B1 B1 B5 B9 
14325     BF C6 CC D2 | 	byte	$1d, $18, $0a, $f2, $dc, $c7, $ba, $b3, $b1, $b1, $b5, $b9, $bf, $c6, $cc, $d2
14329     D7 DC E2 E7 
1432d     EC F2 F6 FA 
14331     FE 01 04 07 
14335     0B 0E 11 13 | 	byte	$d7, $dc, $e2, $e7, $ec, $f2, $f6, $fa, $fe, $01, $04, $07, $0b, $0e, $11, $13
14339     13 13 12 10 
1433d     0B FF ED DD 
14341     CF C9 C7 C8 
14345     CD D3 D8 DF | 	byte	$13, $13, $12, $10, $0b, $ff, $ed, $dd, $cf, $c9, $c7, $c8, $cd, $d3, $d8, $df
14349     E4 EA F0 F6 
1434d     FC 02 05 04 
14351     00 FC FA FB 
14355     FE 02 06 0B | 	byte	$e4, $ea, $f0, $f6, $fc, $02, $05, $04, $00, $fc, $fa, $fb, $fe, $02, $06, $0b
14359     0F 13 17 1B 
1435d     1F 22 25 26 
14361     20 16 0A 01 
14365     FA F8 F8 F9 | 	byte	$0f, $13, $17, $1b, $1f, $22, $25, $26, $20, $16, $0a, $01, $fa, $f8, $f8, $f9
14369     FC FF 03 08 
1436d     0C 10 13 16 
14371     18 17 15 11 
14375     0F 0E 0F 10 | 	byte	$fc, $ff, $03, $08, $0c, $10, $13, $16, $18, $17, $15, $11, $0f, $0e, $0f, $10
14379     12 14 18 1C 
1437d     1F 22 24 25 
14381     27 28 25 1E 
14385     15 0D 07 05 | 	byte	$12, $14, $18, $1c, $1f, $22, $24, $25, $27, $28, $25, $1e, $15, $0d, $07, $05
14389     04 05 09 0C 
1438d     10 13 17 19 
14391     1B 1D 1F 22 
14395     22 20 1D 1A | 	byte	$04, $05, $09, $0c, $10, $13, $17, $19, $1b, $1d, $1f, $22, $22, $20, $1d, $1a
14399     18 10 FF E6 
1439d     D3 C2 B9 B4 
143a1     B4 B6 BB C0 
143a5     C6 CC D2 D7 | 	byte	$18, $10, $ff, $e6, $d3, $c2, $b9, $b4, $b4, $b6, $bb, $c0, $c6, $cc, $d2, $d7
143a9     DC E1 E7 EC 
143ad     F1 F5 FA FD 
143b1     00 03 06 0A 
143b5     0D 0F 10 0F | 	byte	$dc, $e1, $e7, $ec, $f1, $f5, $fa, $fd, $00, $03, $06, $0a, $0d, $0f, $10, $0f
143b9     0D 0C 0B 06 
143bd     F8 E7 D8 CE 
143c1     C9 C7 CA CF 
143c5     D5 DA E1 E6 | 	byte	$0d, $0c, $0b, $06, $f8, $e7, $d8, $ce, $c9, $c7, $ca, $cf, $d5, $da, $e1, $e6
143c9     EC F2 F8 FE 
143cd     03 06 04 00 
143d1     FC FB FC FF 
143d5     02 07 0B 0F | 	byte	$ec, $f2, $f8, $fe, $03, $06, $04, $00, $fc, $fb, $fc, $ff, $02, $07, $0b, $0f
143d9     13 17 1B 1F 
143dd     22 24 22 19 
143e1     0C 02 FA F7 
143e5     F7 F8 FB FE | 	byte	$13, $17, $1b, $1f, $22, $24, $22, $19, $0c, $02, $fa, $f7, $f7, $f8, $fb, $fe
143e9     01 05 09 0E 
143ed     12 15 17 16 
143f1     14 10 0D 0D 
143f5     0E 10 12 15 | 	byte	$01, $05, $09, $0e, $12, $15, $17, $16, $14, $10, $0d, $0d, $0e, $10, $12, $15
143f9     18 1C 1F 22 
143fd     24 26 28 28 
14401     23 1A 11 0A 
14405     06 05 05 07 | 	byte	$18, $1c, $1f, $22, $24, $26, $28, $28, $23, $1a, $11, $0a, $06, $05, $05, $07
14409     09 0D 10 15 
1440d     18 1B 1D 20 
14411     21 22 22 20 
14415     1D 1B 1A 19 | 	byte	$09, $0d, $10, $15, $18, $1b, $1d, $20, $21, $22, $22, $20, $1d, $1b, $1a, $19
14419     17 09 F3 DD 
1441d     CB C0 B9 B8 
14421     B9 BC C1 C6 
14425     CD D2 D8 DC | 	byte	$17, $09, $f3, $dd, $cb, $c0, $b9, $b8, $b9, $bc, $c1, $c6, $cd, $d2, $d8, $dc
14429     E1 E7 EB F1 
1442d     F5 F9 FD 00 
14431     03 05 08 0A 
14435     0A 09 08 08 | 	byte	$e1, $e7, $eb, $f1, $f5, $f9, $fd, $00, $03, $05, $08, $0a, $0a, $09, $08, $08
14439     08 08 02 F3 
1443d     E4 D6 CD C9 
14441     C8 CB D0 D6 
14445     DC E2 E9 EE | 	byte	$08, $08, $02, $f3, $e4, $d6, $cd, $c9, $c8, $cb, $d0, $d6, $dc, $e2, $e9, $ee
14449     F4 FA 00 04 
1444d     06 04 00 FD 
14451     FC FD FF 03 
14455     07 0C 11 14 | 	byte	$f4, $fa, $00, $04, $06, $04, $00, $fd, $fc, $fd, $ff, $03, $07, $0c, $11, $14
14459     18 1C 1F 23 
1445d     22 1C 10 04 
14461     FB F6 F4 F5 
14465     F8 FC FF 03 | 	byte	$18, $1c, $1f, $23, $22, $1c, $10, $04, $fb, $f6, $f4, $f5, $f8, $fc, $ff, $03
14469     06 0A 0E 12 
1446d     15 16 13 0F 
14471     0C 0B 0B 0E 
14475     11 14 18 1A | 	byte	$06, $0a, $0e, $12, $15, $16, $13, $0f, $0c, $0b, $0b, $0e, $11, $14, $18, $1a
14479     1D 20 23 26 
1447d     27 26 20 17 
14481     0E 07 04 04 
14485     05 08 0B 0E | 	byte	$1d, $20, $23, $26, $27, $26, $20, $17, $0e, $07, $04, $04, $05, $08, $0b, $0e
14489     11 15 18 1C 
1448d     1E 21 23 23 
14491     22 1F 1D 1B 
14495     1B 1B 1C 1D | 	byte	$11, $15, $18, $1c, $1e, $21, $23, $23, $22, $1f, $1d, $1b, $1b, $1b, $1c, $1d
14499     14 01 E8 D5 
1449d     C7 BE BB BA 
144a1     BD C1 C6 CC 
144a5     D2 D8 DD E2 | 	byte	$14, $01, $e8, $d5, $c7, $be, $bb, $ba, $bd, $c1, $c6, $cc, $d2, $d8, $dd, $e2
144a9     E6 EB F0 F4 
144ad     F8 FC 00 02 
144b1     03 03 03 02 
144b5     03 05 07 08 | 	byte	$e6, $eb, $f0, $f4, $f8, $fc, $00, $02, $03, $03, $03, $02, $03, $05, $07, $08
144b9     06 FE EE DE 
144bd     D3 CC C9 C9 
144c1     CC D1 D7 DE 
144c5     E4 EB F1 F6 | 	byte	$06, $fe, $ee, $de, $d3, $cc, $c9, $c9, $cc, $d1, $d7, $de, $e4, $eb, $f1, $f6
144c9     FB 01 05 06 
144cd     03 FF FC FB 
144d1     FB FF 03 07 
144d5     0C 12 16 19 | 	byte	$fb, $01, $05, $06, $03, $ff, $fc, $fb, $fb, $ff, $03, $07, $0c, $12, $16, $19
144d9     1D 20 22 1E 
144dd     14 08 FD F6 
144e1     F3 F3 F5 F9 
144e5     FD 01 05 08 | 	byte	$1d, $20, $22, $1e, $14, $08, $fd, $f6, $f3, $f3, $f5, $f9, $fd, $01, $05, $08
144e9     0C 10 13 14 
144ed     13 10 0C 0A 
144f1     0A 0C 0E 13 
144f5     17 1A 1D 20 | 	byte	$0c, $10, $13, $14, $13, $10, $0c, $0a, $0a, $0c, $0e, $13, $17, $1a, $1d, $20
144f9     22 25 27 25 
144fd     1E 15 0C 06 
14501     03 03 05 09 
14505     0D 10 13 15 | 	byte	$22, $25, $27, $25, $1e, $15, $0c, $06, $03, $03, $05, $09, $0d, $10, $13, $15
14509     19 1C 1F 22 
1450d     25 25 23 20 
14511     1C 1B 1B 1C 
14515     1E 20 22 1C | 	byte	$19, $1c, $1f, $22, $25, $25, $23, $20, $1c, $1b, $1b, $1c, $1e, $20, $22, $1c
14519     0C F4 DF CE 
1451d     C4 BF BD BE 
14521     C1 C6 CC D2 
14525     D7 DD E1 E5 | 	byte	$0c, $f4, $df, $ce, $c4, $bf, $bd, $be, $c1, $c6, $cc, $d2, $d7, $dd, $e1, $e5
14529     EA EF F3 F8 
1452d     FC FE FE FD 
14531     FC FC FD 01 
14535     04 07 08 05 | 	byte	$ea, $ef, $f3, $f8, $fc, $fe, $fe, $fd, $fc, $fc, $fd, $01, $04, $07, $08, $05
14539     FA EA DB D1 
1453d     CB C9 CA CD 
14541     D2 D8 DF E6 
14545     ED F3 F8 FC | 	byte	$fa, $ea, $db, $d1, $cb, $c9, $ca, $cd, $d2, $d8, $df, $e6, $ed, $f3, $f8, $fc
14549     00 04 05 02 
1454d     FF FC FB FB 
14551     FE 03 08 0E 
14555     13 17 1A 1E | 	byte	$00, $04, $05, $02, $ff, $fc, $fb, $fb, $fe, $03, $08, $0e, $13, $17, $1a, $1e
14559     1F 1E 16 0B 
1455d     01 F8 F3 F1 
14561     F2 F5 FA FF 
14565     04 07 0A 0C | 	byte	$1f, $1e, $16, $0b, $01, $f8, $f3, $f1, $f2, $f5, $fa, $ff, $04, $07, $0a, $0c
14569     0F 12 12 0F 
1456d     0D 0A 09 09 
14571     0C 10 15 1A 
14575     1E 21 23 24 | 	byte	$0f, $12, $12, $0f, $0d, $0a, $09, $09, $0c, $10, $15, $1a, $1e, $21, $23, $24
14579     25 22 1B 13 
1457d     0B 05 03 02 
14581     04 08 0D 12 
14585     16 18 1A 1C | 	byte	$25, $22, $1b, $13, $0b, $05, $03, $02, $04, $08, $0d, $12, $16, $18, $1a, $1c
14589     1F 23 26 27 
1458d     25 21 1D 1B 
14591     1B 1C 1F 22 
14595     24 25 23 17 | 	byte	$1f, $23, $26, $27, $25, $21, $1d, $1b, $1b, $1c, $1f, $22, $24, $25, $23, $17
14599     00 E8 D7 C9 
1459d     C3 BF BF C1 
145a1     C5 CB D2 D8 
145a5     DD E1 E5 E8 | 	byte	$00, $e8, $d7, $c9, $c3, $bf, $bf, $c1, $c5, $cb, $d2, $d8, $dd, $e1, $e5, $e8
145a9     ED F2 F6 F8 
145ad     F8 F6 F5 F5 
145b1     F8 FC 01 06 
145b5     09 09 03 F5 | 	byte	$ed, $f2, $f6, $f8, $f8, $f6, $f5, $f5, $f8, $fc, $01, $06, $09, $09, $03, $f5
145b9     E6 D8 CF CB 
145bd     CA CB CE D3 
145c1     D9 E1 E8 EF 
145c5     F5 F9 FC 01 | 	byte	$e6, $d8, $cf, $cb, $ca, $cb, $ce, $d3, $d9, $e1, $e8, $ef, $f5, $f9, $fc, $01
145c9     04 04 02 FF 
145cd     FC FA FB FD 
145d1     03 09 0F 14 
145d5     18 1A 1D 1D | 	byte	$04, $04, $02, $ff, $fc, $fa, $fb, $fd, $03, $09, $0f, $14, $18, $1a, $1d, $1d
145d9     18 0E 04 FB 
145dd     F4 F1 F0 F2 
145e1     F6 FC 01 06 
145e5     09 0B 0D 0F | 	byte	$18, $0e, $04, $fb, $f4, $f1, $f0, $f2, $f6, $fc, $01, $06, $09, $0b, $0d, $0f
145e9     0F 0E 0C 0A 
145ed     09 08 0A 0D 
145f1     12 17 1C 21 
145f5     23 24 23 1E | 	byte	$0f, $0e, $0c, $0a, $09, $08, $0a, $0d, $12, $17, $1c, $21, $23, $24, $23, $1e
145f9     17 0F 09 06 
145fd     03 02 03 08 
14601     0D 13 16 1A 
14605     1C 1D 1F 22 | 	byte	$17, $0f, $09, $06, $03, $02, $03, $08, $0d, $13, $16, $1a, $1c, $1d, $1f, $22
14609     26 27 26 23 
1460d     1F 1C 1B 1D 
14611     20 23 26 28 
14615     28 27 1E 0C | 	byte	$26, $27, $26, $23, $1f, $1c, $1b, $1d, $20, $23, $26, $28, $28, $27, $1e, $0c
14619     F5 E0 D0 C7 
1461d     C1 BF C1 C5 
14621     CB D2 D8 DD 
14625     E0 E3 E6 EB | 	byte	$f5, $e0, $d0, $c7, $c1, $bf, $c1, $c5, $cb, $d2, $d8, $dd, $e0, $e3, $e6, $eb
14629     EE F0 F1 F1 
1462d     F0 F1 F3 F8 
14631     FE 03 07 0A 
14635     09 FF F1 E0 | 	byte	$ee, $f0, $f1, $f1, $f0, $f1, $f3, $f8, $fe, $03, $07, $0a, $09, $ff, $f1, $e0
14639     D4 CD CB CA 
1463d     CB CE D3 DB 
14641     E2 EA F1 F5 
14645     FA FD 01 04 | 	byte	$d4, $cd, $cb, $ca, $cb, $ce, $d3, $db, $e2, $ea, $f1, $f5, $fa, $fd, $01, $04
14649     04 01 FE FB 
1464d     F9 FA FD 03 
14651     09 10 14 18 
14655     1A 1B 19 11 | 	byte	$04, $01, $fe, $fb, $f9, $fa, $fd, $03, $09, $10, $14, $18, $1a, $1b, $19, $11
14659     06 FD F5 F1 
1465d     EF EF F2 F8 
14661     FE 03 07 0A 
14665     0B 0D 0D 0C | 	byte	$06, $fd, $f5, $f1, $ef, $ef, $f2, $f8, $fe, $03, $07, $0a, $0b, $0d, $0d, $0c
14669     0A 09 09 09 
1466d     09 0B 0F 15 
14671     1B 20 23 24 
14675     22 1B 13 0B | 	byte	$0a, $09, $09, $09, $09, $0b, $0f, $15, $1b, $20, $23, $24, $22, $1b, $13, $0b
14679     07 05 04 04 
1467d     05 07 0C 12 
14681     17 1B 1E 20 
14685     21 23 26 27 | 	byte	$07, $05, $04, $04, $05, $07, $0c, $12, $17, $1b, $1e, $20, $21, $23, $26, $27
14689     27 23 21 1E 
1468d     1C 1C 1F 23 
14691     27 2A 2B 2B 
14695     2B 26 19 02 | 	byte	$27, $23, $21, $1e, $1c, $1c, $1f, $23, $27, $2a, $2b, $2b, $2b, $26, $19, $02
14699     EA D9 CC C4 
1469d     C1 C2 C6 CC 
146a1     D1 D7 DB DE 
146a5     E1 E4 E6 E8 | 	byte	$ea, $d9, $cc, $c4, $c1, $c2, $c6, $cc, $d1, $d7, $db, $de, $e1, $e4, $e6, $e8
146a9     EA EB ED EE 
146ad     F0 F4 F9 FF 
146b1     04 08 0A 07 
146b5     FB EB DC D2 | 	byte	$ea, $eb, $ed, $ee, $f0, $f4, $f9, $ff, $04, $08, $0a, $07, $fb, $eb, $dc, $d2
146b9     CC CA CA CC 
146bd     CF D5 DD E5 
146c1     EC F1 F6 FA 
146c5     FD 02 04 03 | 	byte	$cc, $ca, $ca, $cc, $cf, $d5, $dd, $e5, $ec, $f1, $f6, $fa, $fd, $02, $04, $03
146c9     00 FC FA F9 
146cd     FA FE 04 0A 
146d1     10 14 17 19 
146d5     19 12 09 FE | 	byte	$00, $fc, $fa, $f9, $fa, $fe, $04, $0a, $10, $14, $17, $19, $19, $12, $09, $fe
146d9     F6 F1 EE EE 
146dd     EF F3 F9 FF 
146e1     05 08 0A 0B 
146e5     0B 0A 09 08 | 	byte	$f6, $f1, $ee, $ee, $ef, $f3, $f9, $ff, $05, $08, $0a, $0b, $0b, $0a, $09, $08
146e9     07 08 09 0A 
146ed     0E 13 19 1E 
146f1     22 23 21 19 
146f5     0F 08 04 03 | 	byte	$07, $08, $09, $0a, $0e, $13, $19, $1e, $22, $23, $21, $19, $0f, $08, $04, $03
146f9     04 05 06 09 
146fd     0C 11 16 1C 
14701     1F 22 23 24 
14705     26 26 25 23 | 	byte	$04, $05, $06, $09, $0c, $11, $16, $1c, $1f, $22, $23, $24, $26, $26, $25, $23
14709     21 1F 1E 1E 
1470d     20 23 27 2B 
14711     2D 2D 2D 2E 
14715     2C 20 0C F5 | 	byte	$21, $1f, $1e, $1e, $20, $23, $27, $2b, $2d, $2d, $2d, $2e, $2c, $20, $0c, $f5
14719     DF D0 C6 C3 
1471d     C3 C7 CC D1 
14721     D5 D9 DB DC 
14725     DD DF E2 E5 | 	byte	$df, $d0, $c6, $c3, $c3, $c7, $cc, $d1, $d5, $d9, $db, $dc, $dd, $df, $e2, $e5
14729     E8 EB EE F1 
1472d     F6 FB 01 05 
14731     08 09 04 F7 
14735     E6 D9 CF CA | 	byte	$e8, $eb, $ee, $f1, $f6, $fb, $01, $05, $08, $09, $04, $f7, $e6, $d9, $cf, $ca
14739     C9 CA CC D1 
1473d     D7 DF E6 EC 
14741     F2 F6 FA FF 
14745     03 04 02 FE | 	byte	$c9, $ca, $cc, $d1, $d7, $df, $e6, $ec, $f2, $f6, $fa, $ff, $03, $04, $02, $fe
14749     FA F8 F8 FB 
1474d     FF 05 0A 10 
14751     14 16 18 15 
14755     0B FF F7 F1 | 	byte	$fa, $f8, $f8, $fb, $ff, $05, $0a, $10, $14, $16, $18, $15, $0b, $ff, $f7, $f1
14759     ED ED EE F1 
1475d     F6 FB 01 05 
14761     09 0B 0B 09 
14765     07 05 05 06 | 	byte	$ed, $ed, $ee, $f1, $f6, $fb, $01, $05, $09, $0b, $0b, $09, $07, $05, $05, $06
14769     08 0A 0D 11 
1476d     16 1B 20 22 
14771     1F 16 0D 06 
14775     03 02 03 06 | 	byte	$08, $0a, $0d, $11, $16, $1b, $20, $22, $1f, $16, $0d, $06, $03, $02, $03, $06
14779     08 0A 0E 12 
1477d     17 1B 1F 23 
14781     25 26 27 27 
14785     25 22 21 21 | 	byte	$08, $0a, $0e, $12, $17, $1b, $1f, $23, $25, $26, $27, $27, $25, $22, $21, $21
14789     20 21 22 25 
1478d     27 2B 2D 2E 
14791     2F 30 30 31 
14795     29 18 FF E7 | 	byte	$20, $21, $22, $25, $27, $2b, $2d, $2e, $2f, $30, $30, $31, $29, $18, $ff, $e7
14799     D6 CB C6 C5 
1479d     C8 CB D0 D3 
147a1     D5 D5 D5 D7 
147a5     DB DF E3 E7 | 	byte	$d6, $cb, $c6, $c5, $c8, $cb, $d0, $d3, $d5, $d5, $d5, $d7, $db, $df, $e3, $e7
147a9     EB EF F3 F8 
147ad     FC 01 05 08 
147b1     08 01 F2 E3 
147b5     D5 CC C8 C7 | 	byte	$eb, $ef, $f3, $f8, $fc, $01, $05, $08, $08, $01, $f2, $e3, $d5, $cc, $c8, $c7
147b9     CA CD D3 D9 
147bd     DF E6 EC F2 
147c1     F7 FB FF 03 
147c5     02 00 FC F9 | 	byte	$ca, $cd, $d3, $d9, $df, $e6, $ec, $f2, $f7, $fb, $ff, $03, $02, $00, $fc, $f9
147c9     F8 F9 FC 01 
147cd     05 0B 10 13 
147d1     16 15 0D 01 
147d5     F7 F0 EC EB | 	byte	$f8, $f9, $fc, $01, $05, $0b, $10, $13, $16, $15, $0d, $01, $f7, $f0, $ec, $eb
147d9     ED EF F3 F8 
147dd     FD 01 06 09 
147e1     0A 09 06 04 
147e5     03 03 06 09 | 	byte	$ed, $ef, $f3, $f8, $fd, $01, $06, $09, $0a, $09, $06, $04, $03, $03, $06, $09
147e9     0C 10 14 19 
147ed     1D 1E 1B 13 
147f1     0A 05 02 01 
147f5     02 05 09 0C | 	byte	$0c, $10, $14, $19, $1d, $1e, $1b, $13, $0a, $05, $02, $01, $02, $05, $09, $0c
147f9     0F 13 18 1B 
147fd     1F 22 26 28 
14801     29 28 25 22 
14805     21 21 21 22 | 	byte	$0f, $13, $18, $1b, $1f, $22, $26, $28, $29, $28, $25, $22, $21, $21, $21, $22
14809     24 26 29 2B 
1480d     2D 2F 30 32 
14811     33 33 34 30 
14815     20 0A F0 DC | 	byte	$24, $26, $29, $2b, $2d, $2f, $30, $32, $33, $33, $34, $30, $20, $0a, $f0, $dc
14819     D0 C9 C7 C8 
1481d     CA CB CD CD 
14821     CE D2 D5 DA 
14825     DE E3 E8 EC | 	byte	$d0, $c9, $c7, $c8, $ca, $cb, $cd, $cd, $ce, $d2, $d5, $da, $de, $e3, $e8, $ec
14829     F1 F5 F9 FD 
1482d     00 04 07 06 
14831     FD EE DD D0 
14835     C9 C6 C7 CA | 	byte	$f1, $f5, $f9, $fd, $00, $04, $07, $06, $fd, $ee, $dd, $d0, $c9, $c6, $c7, $ca
14839     CF D4 DA E0 
1483d     E6 ED F2 F7 
14841     FC 01 03 02 
14845     FE FA F8 F8 | 	byte	$cf, $d4, $da, $e0, $e6, $ed, $f2, $f7, $fc, $01, $03, $02, $fe, $fa, $f8, $f8
14849     F9 FD 01 05 
1484d     0A 0F 13 14 
14851     0F 04 F9 F1 
14855     EC EB EB ED | 	byte	$f9, $fd, $01, $05, $0a, $0f, $13, $14, $0f, $04, $f9, $f1, $ec, $eb, $eb, $ed
14859     F1 F6 FA FE 
1485d     03 06 08 07 
14861     05 03 01 01 
14865     03 07 0B 0F | 	byte	$f1, $f6, $fa, $fe, $03, $06, $08, $07, $05, $03, $01, $01, $03, $07, $0b, $0f
14869     14 18 1B 1B 
1486d     17 0F 08 03 
14871     01 01 02 05 
14875     09 0D 11 15 | 	byte	$14, $18, $1b, $1b, $17, $0f, $08, $03, $01, $01, $02, $05, $09, $0d, $11, $15
14879     19 1D 20 23 
1487d     27 29 2A 28 
14881     26 23 22 21 
14885     22 24 26 28 | 	byte	$19, $1d, $20, $23, $27, $29, $2a, $28, $26, $23, $22, $21, $22, $24, $26, $28
14889     2B 2D 2E 30 
1488d     31 33 34 35 
14891     36 36 34 29 
14895     13 FB E4 D6 | 	byte	$2b, $2d, $2e, $30, $31, $33, $34, $35, $36, $36, $34, $29, $13, $fb, $e4, $d6
14899     CD C8 C6 C4 
1489d     C4 C5 C8 CC 
148a1     D0 D4 D9 DE 
148a5     E3 E9 ED F2 | 	byte	$cd, $c8, $c6, $c4, $c4, $c5, $c8, $cc, $d0, $d4, $d9, $de, $e3, $e9, $ed, $f2
148a9     F7 FA FD 01 
148ad     04 06 04 F8 
148b1     E9 D8 CD C6 
148b5     C4 C6 C9 CF | 	byte	$f7, $fa, $fd, $01, $04, $06, $04, $f8, $e9, $d8, $cd, $c6, $c4, $c6, $c9, $cf
148b9     D5 DB E0 E7 
148bd     EC F2 F7 FC 
148c1     00 02 00 FC 
148c5     F8 F6 F6 F9 | 	byte	$d5, $db, $e0, $e7, $ec, $f2, $f7, $fc, $00, $02, $00, $fc, $f8, $f6, $f6, $f9
148c9     FD 01 05 09 
148cd     0E 11 0E 06 
148d1     FA F2 EC E9 
148d5     EA EB EF F3 | 	byte	$fd, $01, $05, $09, $0e, $11, $0e, $06, $fa, $f2, $ec, $e9, $ea, $eb, $ef, $f3
148d9     F7 FB FF 03 
148dd     05 05 03 01 
148e1     00 00 02 05 
148e5     08 0D 11 16 | 	byte	$f7, $fb, $ff, $03, $05, $05, $03, $01, $00, $00, $02, $05, $08, $0d, $11, $16
148e9     19 18 12 0A 
148ed     04 00 FF 01 
148f1     03 06 0A 0D 
148f5     11 16 1A 1E | 	byte	$19, $18, $12, $0a, $04, $00, $ff, $01, $03, $06, $0a, $0d, $11, $16, $1a, $1e
148f9     21 24 27 29 
148fd     2A 28 25 24 
14901     23 23 23 25 
14905     27 29 2C 2E | 	byte	$21, $24, $27, $29, $2a, $28, $25, $24, $23, $23, $23, $25, $27, $29, $2c, $2e
14909     30 31 33 34 
1490d     35 36 37 38 
14911     38 38 30 1D 
14915     05 EC DA CE | 	byte	$30, $31, $33, $34, $35, $36, $37, $38, $38, $38, $30, $1d, $05, $ec, $da, $ce
14919     C5 C0 BE BE 
1491d     C1 C5 CA D0 
14921     D6 DA E0 E4 
14925     E9 EE F3 F7 | 	byte	$c5, $c0, $be, $be, $c1, $c5, $ca, $d0, $d6, $da, $e0, $e4, $e9, $ee, $f3, $f7
14929     FB FE 00 03 
1492d     04 FF F3 E2 
14931     D4 CA C4 C4 
14935     C6 CA D0 D7 | 	byte	$fb, $fe, $00, $03, $04, $ff, $f3, $e2, $d4, $ca, $c4, $c4, $c6, $ca, $d0, $d7
14939     DC E2 E7 EC 
1493d     F2 F7 FC 00 
14941     01 FE FA F6 
14945     F5 F6 FA FD | 	byte	$dc, $e2, $e7, $ec, $f2, $f7, $fc, $00, $01, $fe, $fa, $f6, $f5, $f6, $fa, $fd
14949     02 05 09 0D 
1494d     0D 07 FC F3 
14951     EC E9 E8 E9 
14955     EC F0 F5 F9 | 	byte	$02, $05, $09, $0d, $0d, $07, $fc, $f3, $ec, $e9, $e8, $e9, $ec, $f0, $f5, $f9
14959     FE 01 03 04 
1495d     02 00 FF 00 
14961     01 03 07 0B 
14965     0F 14 17 15 | 	byte	$fe, $01, $03, $04, $02, $00, $ff, $00, $01, $03, $07, $0b, $0f, $14, $17, $15
14969     0F 06 01 FD 
1496d     FE 00 04 07 
14971     0B 0F 12 16 
14975     1A 1E 22 26 | 	byte	$0f, $06, $01, $fd, $fe, $00, $04, $07, $0b, $0f, $12, $16, $1a, $1e, $22, $26
14979     29 2A 29 27 
1497d     25 24 24 25 
14981     25 26 27 29 
14985     2C 2F 31 33 | 	byte	$29, $2a, $29, $27, $25, $24, $24, $25, $25, $26, $27, $29, $2c, $2f, $31, $33
14989     34 35 36 37 
1498d     38 3A 3A 3A 
14991     39 35 27 0E 
14995     F5 DD CD C2 | 	byte	$34, $35, $36, $37, $38, $3a, $3a, $3a, $39, $35, $27, $0e, $f5, $dd, $cd, $c2
14999     BD BB BC BF 
1499d     C5 CB D1 D7 
149a1     DB DF E3 E9 
149a5     ED F2 F7 FA | 	byte	$bd, $bb, $bc, $bf, $c5, $cb, $d1, $d7, $db, $df, $e3, $e9, $ed, $f2, $f7, $fa
149a9     FD FF 01 02 
149ad     FB EE DD D0 
149b1     C7 C3 C3 C5 
149b5     CA D1 D7 DD | 	byte	$fd, $ff, $01, $02, $fb, $ee, $dd, $d0, $c7, $c3, $c3, $c5, $ca, $d1, $d7, $dd
149b9     E2 E7 EC F1 
149bd     F7 FC 00 01 
149c1     FD F9 F4 F3 
149c5     F5 F9 FE 02 | 	byte	$e2, $e7, $ec, $f1, $f7, $fc, $00, $01, $fd, $f9, $f4, $f3, $f5, $f9, $fe, $02
149c9     05 09 0A 07 
149cd     FD F4 EC E8 
149d1     E6 E7 E9 ED 
149d5     F1 F6 FB FF | 	byte	$05, $09, $0a, $07, $fd, $f4, $ec, $e8, $e6, $e7, $e9, $ed, $f1, $f6, $fb, $ff
149d9     01 01 FF FE 
149dd     FD FE 00 02 
149e1     05 09 0D 11 
149e5     14 12 0C 04 | 	byte	$01, $01, $ff, $fe, $fd, $fe, $00, $02, $05, $09, $0d, $11, $14, $12, $0c, $04
149e9     FE FB FC FF 
149ed     03 08 0C 10 
149f1     13 16 1A 1E 
149f5     22 27 2A 2B | 	byte	$fe, $fb, $fc, $ff, $03, $08, $0c, $10, $13, $16, $1a, $1e, $22, $27, $2a, $2b
149f9     2A 26 24 23 
149fd     24 26 27 29 
14a01     2A 2B 2D 30 
14a05     32 35 37 38 | 	byte	$2a, $26, $24, $23, $24, $26, $27, $29, $2a, $2b, $2d, $30, $32, $35, $37, $38
14a09     37 38 38 39 
14a0d     3B 3C 3C 3B 
14a11     39 2D 14 FA 
14a15     E0 CD C3 BD | 	byte	$37, $38, $38, $39, $3b, $3c, $3c, $3b, $39, $2d, $14, $fa, $e0, $cd, $c3, $bd
14a19     BB BC C0 C6 
14a1d     CC D2 D7 DC 
14a21     DF E3 E8 ED 
14a25     F3 F7 FA FC | 	byte	$bb, $bc, $c0, $c6, $cc, $d2, $d7, $dc, $df, $e3, $e8, $ed, $f3, $f7, $fa, $fc
14a29     FE 00 FF F6 
14a2d     E7 D8 CB C4 
14a31     C1 C1 C5 CB 
14a35     D1 D8 DE E3 | 	byte	$fe, $00, $ff, $f6, $e7, $d8, $cb, $c4, $c1, $c1, $c5, $cb, $d1, $d8, $de, $e3
14a39     E7 EB F1 F7 
14a3d     FD 01 00 FC 
14a41     F6 F3 F3 F5 
14a45     F9 FE 02 05 | 	byte	$e7, $eb, $f1, $f7, $fd, $01, $00, $fc, $f6, $f3, $f3, $f5, $f9, $fe, $02, $05
14a49     07 05 FE F5 
14a4d     EC E7 E5 E5 
14a51     E6 E9 ED F3 
14a55     F8 FC FF 00 | 	byte	$07, $05, $fe, $f5, $ec, $e7, $e5, $e5, $e6, $e9, $ed, $f3, $f8, $fc, $ff, $00
14a59     FE FB FA FB 
14a5d     FD 01 04 07 
14a61     0A 0E 0F 0D 
14a65     07 01 FD FB | 	byte	$fe, $fb, $fa, $fb, $fd, $01, $04, $07, $0a, $0e, $0f, $0d, $07, $01, $fd, $fb
14a69     FB FE 02 08 
14a6d     0E 12 15 17 
14a71     1A 1E 22 27 
14a75     2A 2C 2B 27 | 	byte	$fb, $fe, $02, $08, $0e, $12, $15, $17, $1a, $1e, $22, $27, $2a, $2c, $2b, $27
14a79     24 22 23 26 
14a7d     29 2B 2C 2D 
14a81     2E 2F 33 35 
14a85     37 39 39 39 | 	byte	$24, $22, $23, $26, $29, $2b, $2c, $2d, $2e, $2f, $33, $35, $37, $39, $39, $39
14a89     39 3A 3B 3C 
14a8d     3E 3D 3B 37 
14a91     2C 18 FF E5 
14a95     D3 C6 BF BD | 	byte	$39, $3a, $3b, $3c, $3e, $3d, $3b, $37, $2c, $18, $ff, $e5, $d3, $c6, $bf, $bd
14a99     BE C1 C7 CD 
14a9d     D3 D8 DC E0 
14aa1     E3 E8 EE F2 
14aa5     F6 F9 FB FD | 	byte	$be, $c1, $c7, $cd, $d3, $d8, $dc, $e0, $e3, $e8, $ee, $f2, $f6, $f9, $fb, $fd
14aa9     FF FB F1 E1 
14aad     D2 C8 C1 BF 
14ab1     C0 C5 CB D2 
14ab5     D7 DD E2 E7 | 	byte	$ff, $fb, $f1, $e1, $d2, $c8, $c1, $bf, $c0, $c5, $cb, $d2, $d7, $dd, $e2, $e7
14ab9     EB F1 F7 FD 
14abd     00 FF FA F5 
14ac1     F2 F2 F5 FA 
14ac5     FD 02 05 05 | 	byte	$eb, $f1, $f7, $fd, $00, $ff, $fa, $f5, $f2, $f2, $f5, $fa, $fd, $02, $05, $05
14ac9     FE F5 EC E6 
14acd     E4 E3 E4 E7 
14ad1     EA EF F4 F9 
14ad5     FD FF FD FA | 	byte	$fe, $f5, $ec, $e6, $e4, $e3, $e4, $e7, $ea, $ef, $f4, $f9, $fd, $ff, $fd, $fa
14ad9     F7 F8 FB FF 
14add     03 06 0A 0C 
14ae1     0C 07 02 FD 
14ae5     FA FA FB FD | 	byte	$f7, $f8, $fb, $ff, $03, $06, $0a, $0c, $0c, $07, $02, $fd, $fa, $fa, $fb, $fd
14ae9     02 07 0C 12 
14aed     16 19 1C 1F 
14af1     22 26 2A 2C 
14af5     2B 28 25 23 | 	byte	$02, $07, $0c, $12, $16, $19, $1c, $1f, $22, $26, $2a, $2c, $2b, $28, $25, $23
14af9     24 26 29 2B 
14afd     2D 2F 30 31 
14b01     32 35 38 3A 
14b05     3B 3C 3B 3B | 	byte	$24, $26, $29, $2b, $2d, $2f, $30, $31, $32, $35, $38, $3a, $3b, $3c, $3b, $3b
14b09     3C 3D 3E 3D 
14b0d     3B 37 32 2D 
14b11     1D 08 EF DA 
14b15     CB C4 C0 C0 | 	byte	$3c, $3d, $3e, $3d, $3b, $37, $32, $2d, $1d, $08, $ef, $da, $cb, $c4, $c0, $c0
14b19     C3 C8 CE D3 
14b1d     D8 DC E0 E3 
14b21     E8 ED F1 F5 
14b25     F8 FA FC FD | 	byte	$c3, $c8, $ce, $d3, $d8, $dc, $e0, $e3, $e8, $ed, $f1, $f5, $f8, $fa, $fc, $fd
14b29     F7 EB DB CE 
14b2d     C4 BF BE C0 
14b31     C4 CA D2 D8 
14b35     DD E2 E7 EB | 	byte	$f7, $eb, $db, $ce, $c4, $bf, $be, $c0, $c4, $ca, $d2, $d8, $dd, $e2, $e7, $eb
14b39     F1 F7 FC FF 
14b3d     FD F8 F4 F1 
14b41     F1 F5 F9 FD 
14b45     01 03 FF F6 | 	byte	$f1, $f7, $fc, $ff, $fd, $f8, $f4, $f1, $f1, $f5, $f9, $fd, $01, $03, $ff, $f6
14b49     EC E5 E2 E1 
14b4d     E2 E4 E7 EB 
14b51     F0 F6 FB FD 
14b55     FC FA F7 F6 | 	byte	$ec, $e5, $e2, $e1, $e2, $e4, $e7, $eb, $f0, $f6, $fb, $fd, $fc, $fa, $f7, $f6
14b59     F7 FB 00 05 
14b5d     09 0B 08 02 
14b61     FC F8 F7 F8 
14b65     FA FD 01 06 | 	byte	$f7, $fb, $00, $05, $09, $0b, $08, $02, $fc, $f8, $f7, $f8, $fa, $fd, $01, $06
14b69     0B 11 15 1A 
14b6d     1D 21 23 26 
14b71     29 2B 2B 29 
14b75     26 25 24 26 | 	byte	$0b, $11, $15, $1a, $1d, $21, $23, $26, $29, $2b, $2b, $29, $26, $25, $24, $26
14b79     29 2B 2E 30 
14b7d     32 33 34 36 
14b81     38 3A 3C 3D 
14b85     3D 3D 3D 3D | 	byte	$29, $2b, $2e, $30, $32, $33, $34, $36, $38, $3a, $3c, $3d, $3d, $3d, $3d, $3d
14b89     3D 3C 3A 36 
14b8d     32 2F 2D 25 
14b91     11 F8 E4 D2 
14b95     C8 C3 C2 C4 | 	byte	$3d, $3c, $3a, $36, $32, $2f, $2d, $25, $11, $f8, $e4, $d2, $c8, $c3, $c2, $c4
14b99     C8 CE D2 D7 
14b9d     DB DF E3 E6 
14ba1     EB F0 F3 F7 
14ba5     F9 FB FB F3 | 	byte	$c8, $ce, $d2, $d7, $db, $df, $e3, $e6, $eb, $f0, $f3, $f7, $f9, $fb, $fb, $f3
14ba9     E4 D5 C9 C1 
14bad     BD BD C0 C4 
14bb1     CA D1 D7 DC 
14bb5     E2 E7 EB F1 | 	byte	$e4, $d5, $c9, $c1, $bd, $bd, $c0, $c4, $ca, $d1, $d7, $dc, $e2, $e7, $eb, $f1
14bb9     F6 FC FD FB 
14bbd     F6 F3 F0 F1 
14bc1     F4 F9 FD 01 
14bc5     FF F8 EC E4 | 	byte	$f6, $fc, $fd, $fb, $f6, $f3, $f0, $f1, $f4, $f9, $fd, $01, $ff, $f8, $ec, $e4
14bc9     DF DE DF E1 
14bcd     E5 E9 EE F3 
14bd1     F8 FB FC FA 
14bd5     F7 F5 F6 F8 | 	byte	$df, $de, $df, $e1, $e5, $e9, $ee, $f3, $f8, $fb, $fc, $fa, $f7, $f5, $f6, $f8
14bd9     FD 01 06 08 
14bdd     05 FE F8 F4 
14be1     F4 F6 FA FD 
14be5     02 07 0C 11 | 	byte	$fd, $01, $06, $08, $05, $fe, $f8, $f4, $f4, $f6, $fa, $fd, $02, $07, $0c, $11
14be9     16 1A 1E 21 
14bed     25 28 2A 2B 
14bf1     2A 29 27 26 
14bf5     27 28 29 2C | 	byte	$16, $1a, $1e, $21, $25, $28, $2a, $2b, $2a, $29, $27, $26, $27, $28, $29, $2c
14bf9     2F 32 34 36 
14bfd     37 38 39 3B 
14c01     3C 3E 3F 3F 
14c05     3F 3E 3D 3A | 	byte	$2f, $32, $34, $36, $37, $38, $39, $3b, $3c, $3e, $3f, $3f, $3f, $3e, $3d, $3a
14c09     37 34 32 31 
14c0d     30 30 2C 1C 
14c11     04 ED DB CE 
14c15     C7 C4 C5 C8 | 	byte	$37, $34, $32, $31, $30, $30, $2c, $1c, $04, $ed, $db, $ce, $c7, $c4, $c5, $c8
14c19     CD D2 D6 DB 
14c1d     DF E2 E5 E9 
14c21     EE F1 F5 F8 
14c25     FA F8 ED DF | 	byte	$cd, $d2, $d6, $db, $df, $e2, $e5, $e9, $ee, $f1, $f5, $f8, $fa, $f8, $ed, $df
14c29     CF C4 BD BB 
14c2d     BD BF C4 CA 
14c31     D0 D6 DC E1 
14c35     E7 EB F0 F5 | 	byte	$cf, $c4, $bd, $bb, $bd, $bf, $c4, $ca, $d0, $d6, $dc, $e1, $e7, $eb, $f0, $f5
14c39     FA FB F9 F5 
14c3d     F1 F0 F1 F4 
14c41     F7 FC FE F8 
14c45     EE E4 DD DA | 	byte	$fa, $fb, $f9, $f5, $f1, $f0, $f1, $f4, $f7, $fc, $fe, $f8, $ee, $e4, $dd, $da
14c49     DB DD E1 E6 
14c4d     EA EF F4 F8 
14c51     FA F8 F6 F4 
14c55     F4 F6 FA FE | 	byte	$db, $dd, $e1, $e6, $ea, $ef, $f4, $f8, $fa, $f8, $f6, $f4, $f4, $f6, $fa, $fe
14c59     03 04 00 FB 
14c5d     F4 F1 F0 F3 
14c61     F8 FD 02 07 
14c65     0C 11 15 19 | 	byte	$03, $04, $00, $fb, $f4, $f1, $f0, $f3, $f8, $fd, $02, $07, $0c, $11, $15, $19
14c69     1E 22 26 29 
14c6d     2B 2B 2A 28 
14c71     27 26 28 29 
14c75     2B 2D 2F 32 | 	byte	$1e, $22, $26, $29, $2b, $2b, $2a, $28, $27, $26, $28, $29, $2b, $2d, $2f, $32
14c79     35 37 39 3A 
14c7d     3B 3C 3D 3E 
14c81     40 41 41 40 
14c85     3D 39 35 33 | 	byte	$35, $37, $39, $3a, $3b, $3c, $3d, $3e, $40, $41, $41, $40, $3d, $39, $35, $33
14c89     32 32 32 33 
14c8d     33 31 27 10 
14c91     F6 E3 D3 CB 
14c95     C7 C6 C8 CC | 	byte	$32, $32, $32, $33, $33, $31, $27, $10, $f6, $e3, $d3, $cb, $c7, $c6, $c8, $cc
14c99     D0 D5 DA DD 
14c9d     E1 E4 E8 EC 
14ca1     F0 F4 F7 F9 
14ca5     F4 E8 D7 C8 | 	byte	$d0, $d5, $da, $dd, $e1, $e4, $e8, $ec, $f0, $f4, $f7, $f9, $f4, $e8, $d7, $c8
14ca9     BF BA BA BB 
14cad     BF C3 C9 CF 
14cb1     D6 DC E2 E7 
14cb5     EC F1 F5 F9 | 	byte	$bf, $ba, $ba, $bb, $bf, $c3, $c9, $cf, $d6, $dc, $e2, $e7, $ec, $f1, $f5, $f9
14cb9     FA F7 F3 F0 
14cbd     EF F0 F3 F7 
14cc1     FA F8 F0 E5 
14cc5     DD D8 D7 D9 | 	byte	$fa, $f7, $f3, $f0, $ef, $f0, $f3, $f7, $fa, $f8, $f0, $e5, $dd, $d8, $d7, $d9
14cc9     DD E2 E7 ED 
14ccd     F1 F5 F7 F7 
14cd1     F5 F4 F4 F6 
14cd5     F8 FC FF 00 | 	byte	$dd, $e2, $e7, $ed, $f1, $f5, $f7, $f7, $f5, $f4, $f4, $f6, $f8, $fc, $ff, $00
14cd9     FC F6 F1 EF 
14cdd     EF F2 F6 FB 
14ce1     01 08 0D 12 
14ce5     16 1A 1E 22 | 	byte	$fc, $f6, $f1, $ef, $ef, $f2, $f6, $fb, $01, $08, $0d, $12, $16, $1a, $1e, $22
14ce9     26 2A 2C 2C 
14ced     2A 27 26 26 
14cf1     28 2A 2D 2F 
14cf5     30 32 34 37 | 	byte	$26, $2a, $2c, $2c, $2a, $27, $26, $26, $28, $2a, $2d, $2f, $30, $32, $34, $37
14cf9     39 3C 3D 3E 
14cfd     3F 3F 3F 40 
14d01     41 40 3C 38 
14d05     35 32 32 33 | 	byte	$39, $3c, $3d, $3e, $3f, $3f, $3f, $40, $41, $40, $3c, $38, $35, $32, $32, $33
14d09     34 35 36 36 
14d0d     36 2D 1B 01 
14d11     EC DA CF C9 
14d15     C7 C8 CB CF | 	byte	$34, $35, $36, $36, $36, $2d, $1b, $01, $ec, $da, $cf, $c9, $c7, $c8, $cb, $cf
14d19     D4 D8 DC E0 
14d1d     E3 E6 EA EE 
14d21     F2 F6 F6 F0 
14d25     E1 D1 C3 BA | 	byte	$d4, $d8, $dc, $e0, $e3, $e6, $ea, $ee, $f2, $f6, $f6, $f0, $e1, $d1, $c3, $ba
14d29     B8 B8 BB BF 
14d2d     C3 C8 CF D6 
14d31     DC E2 E8 EC 
14d35     F0 F4 F8 F8 | 	byte	$b8, $b8, $bb, $bf, $c3, $c8, $cf, $d6, $dc, $e2, $e8, $ec, $f0, $f4, $f8, $f8
14d39     F6 F2 EF EE 
14d3d     EF F2 F6 F6 
14d41     F0 E8 DD D7 
14d45     D4 D4 D8 DE | 	byte	$f6, $f2, $ef, $ee, $ef, $f2, $f6, $f6, $f0, $e8, $dd, $d7, $d4, $d4, $d8, $de
14d49     E4 E9 EE F2 
14d4d     F5 F4 F3 F2 
14d51     F3 F4 F7 FA 
14d55     FC FB F6 F1 | 	byte	$e4, $e9, $ee, $f2, $f5, $f4, $f3, $f2, $f3, $f4, $f7, $fa, $fc, $fb, $f6, $f1
14d59     EE ED EE F1 
14d5d     F5 FA 00 07 
14d61     0D 13 17 1A 
14d65     1E 21 26 29 | 	byte	$ee, $ed, $ee, $f1, $f5, $fa, $00, $07, $0d, $13, $17, $1a, $1e, $21, $26, $29
14d69     2C 2C 2A 27 
14d6d     26 26 28 2A 
14d71     2E 30 32 34 
14d75     35 37 3A 3C | 	byte	$2c, $2c, $2a, $27, $26, $26, $28, $2a, $2e, $30, $32, $34, $35, $37, $3a, $3c
14d79     3E 3F 40 40 
14d7d     40 41 40 3E 
14d81     3C 38 35 34 
14d85     33 33 35 37 | 	byte	$3e, $3f, $40, $40, $40, $41, $40, $3e, $3c, $38, $35, $34, $33, $33, $35, $37
14d89     38 39 39 38 
14d8d     34 26 0D F5 
14d91     E3 D4 CD C9 
14d95     C8 CA CE D2 | 	byte	$38, $39, $39, $38, $34, $26, $0d, $f5, $e3, $d4, $cd, $c9, $c8, $ca, $ce, $d2
14d99     D7 DA DE E1 
14d9d     E5 E8 EC F1 
14da1     F4 F3 EB DA 
14da5     CB BE B7 B5 | 	byte	$d7, $da, $de, $e1, $e5, $e8, $ec, $f1, $f4, $f3, $eb, $da, $cb, $be, $b7, $b5
14da9     B7 BA BE C3 
14dad     C8 CE D5 DC 
14db1     E2 E7 EC F0 
14db5     F4 F7 F7 F4 | 	byte	$b7, $ba, $be, $c3, $c8, $ce, $d5, $dc, $e2, $e7, $ec, $f0, $f4, $f7, $f7, $f4
14db9     F1 EE EE EF 
14dbd     F2 F4 F0 E7 
14dc1     DE D6 D2 D2 
14dc5     D4 D8 DF E5 | 	byte	$f1, $ee, $ee, $ef, $f2, $f4, $f0, $e7, $de, $d6, $d2, $d2, $d4, $d8, $df, $e5
14dc9     EA EF F2 F3 
14dcd     F1 F0 F1 F3 
14dd1     F6 F9 F9 F6 
14dd5     F0 EB E9 EA | 	byte	$ea, $ef, $f2, $f3, $f1, $f0, $f1, $f3, $f6, $f9, $f9, $f6, $f0, $eb, $e9, $ea
14dd9     EC F0 F4 FA 
14ddd     00 05 0C 12 
14de1     17 1C 1F 22 
14de5     25 29 2C 2C | 	byte	$ec, $f0, $f4, $fa, $00, $05, $0c, $12, $17, $1c, $1f, $22, $25, $29, $2c, $2c
14de9     2A 28 27 27 
14ded     28 2B 2E 31 
14df1     33 35 36 38 
14df5     3A 3D 3F 40 | 	byte	$2a, $28, $27, $27, $28, $2b, $2e, $31, $33, $35, $36, $38, $3a, $3d, $3f, $40
14df9     41 42 42 40 
14dfd     3E 3B 39 37 
14e01     36 35 35 35 
14e05     36 37 39 3B | 	byte	$41, $42, $42, $40, $3e, $3b, $39, $37, $36, $35, $35, $35, $36, $37, $39, $3b
14e09     3B 3B 3A 38 
14e0d     2D 19 00 EA 
14e11     D9 CF CA C8 
14e15     C9 CD D1 D5 | 	byte	$3b, $3b, $3a, $38, $2d, $19, $00, $ea, $d9, $cf, $ca, $c8, $c9, $cd, $d1, $d5
14e19     D8 DC E0 E3 
14e1d     E6 EB EF F1 
14e21     EF E3 D4 C3 
14e25     B9 B3 B3 B4 | 	byte	$d8, $dc, $e0, $e3, $e6, $eb, $ef, $f1, $ef, $e3, $d4, $c3, $b9, $b3, $b3, $b4
14e29     B8 BC C2 C8 
14e2d     CE D5 DC E1 
14e31     E7 EB F0 F4 
14e35     F6 F5 F2 EF | 	byte	$b8, $bc, $c2, $c8, $ce, $d5, $dc, $e1, $e7, $eb, $f0, $f4, $f6, $f5, $f2, $ef
14e39     ED ED EF F1 
14e3d     EF E7 DE D6 
14e41     D1 CF D1 D4 
14e45     DA DF E6 EC | 	byte	$ed, $ed, $ef, $f1, $ef, $e7, $de, $d6, $d1, $cf, $d1, $d4, $da, $df, $e6, $ec
14e49     EF F1 F0 EF 
14e4d     EF F0 F3 F6 
14e51     F6 F2 EC E7 
14e55     E5 E6 EA EE | 	byte	$ef, $f1, $f0, $ef, $ef, $f0, $f3, $f6, $f6, $f2, $ec, $e7, $e5, $e6, $ea, $ee
14e59     F4 F9 FF 05 
14e5d     0B 12 18 1C 
14e61     20 23 27 29 
14e65     2A 2A 29 28 | 	byte	$f4, $f9, $ff, $05, $0b, $12, $18, $1c, $20, $23, $27, $29, $2a, $2a, $29, $28
14e69     27 28 2A 2B 
14e6d     2E 32 34 37 
14e71     38 3A 3C 3D 
14e75     3F 41 42 43 | 	byte	$27, $28, $2a, $2b, $2e, $32, $34, $37, $38, $3a, $3c, $3d, $3f, $41, $42, $43
14e79     42 40 3D 3A 
14e7d     38 37 37 37 
14e81     38 39 39 39 
14e85     3A 3C 3C 3D | 	byte	$42, $40, $3d, $3a, $38, $37, $37, $37, $38, $39, $39, $39, $3a, $3c, $3c, $3d
14e89     3D 3D 3C 35 
14e8d     24 0A F3 DF 
14e91     D2 CC C9 C9 
14e95     CC CF D3 D6 | 	byte	$3d, $3d, $3c, $35, $24, $0a, $f3, $df, $d2, $cc, $c9, $c9, $cc, $cf, $d3, $d6
14e99     DB DE E2 E5 
14e9d     E8 EC EE EA 
14ea1     DF CE BE B5 
14ea5     B0 B0 B3 B7 | 	byte	$db, $de, $e2, $e5, $e8, $ec, $ee, $ea, $df, $ce, $be, $b5, $b0, $b0, $b3, $b7
14ea9     BC C2 C8 CE 
14ead     D5 DB E1 E6 
14eb1     EB F0 F3 F4 
14eb5     F3 EF EC EB | 	byte	$bc, $c2, $c8, $ce, $d5, $db, $e1, $e6, $eb, $f0, $f3, $f4, $f3, $ef, $ec, $eb
14eb9     EC EF EE E7 
14ebd     DE D4 CF CD 
14ec1     CE D1 D5 DB 
14ec5     E1 E7 EB EE | 	byte	$ec, $ef, $ee, $e7, $de, $d4, $cf, $cd, $ce, $d1, $d5, $db, $e1, $e7, $eb, $ee
14ec9     EF EE ED EE 
14ecd     F0 F3 F2 ED 
14ed1     E8 E3 E1 E3 
14ed5     E6 EC F2 F8 | 	byte	$ef, $ee, $ed, $ee, $f0, $f3, $f2, $ed, $e8, $e3, $e1, $e3, $e6, $ec, $f2, $f8
14ed9     FF 05 0B 10 
14edd     16 1B 20 24 
14ee1     27 2A 2A 29 
14ee5     28 27 27 28 | 	byte	$ff, $05, $0b, $10, $16, $1b, $20, $24, $27, $2a, $2a, $29, $28, $27, $27, $28
14ee9     2B 2D 2F 32 
14eed     34 37 39 3C 
14ef1     3D 3F 40 41 
14ef5     42 43 41 3F | 	byte	$2b, $2d, $2f, $32, $34, $37, $39, $3c, $3d, $3f, $40, $41, $42, $43, $41, $3f
14ef9     3C 3A 38 37 
14efd     38 39 3A 3B 
14f01     3C 3C 3C 3C 
14f05     3D 3E 3E 3F | 	byte	$3c, $3a, $38, $37, $38, $39, $3a, $3b, $3c, $3c, $3c, $3c, $3d, $3e, $3e, $3f
14f09     3F 3E 39 2C 
14f0d     13 F9 E6 D7 
14f11     CE C9 C8 CA 
14f15     CD D1 D5 D9 | 	byte	$3f, $3e, $39, $2c, $13, $f9, $e6, $d7, $ce, $c9, $c8, $ca, $cd, $d1, $d5, $d9
14f19     DD E0 E3 E6 
14f1d     EA EB E5 D9 
14f21     C8 B9 B1 AD 
14f25     AD B1 B6 BC | 	byte	$dd, $e0, $e3, $e6, $ea, $eb, $e5, $d9, $c8, $b9, $b1, $ad, $ad, $b1, $b6, $bc
14f29     C2 C8 CD D4 
14f2d     DA E0 E5 EB 
14f31     EF F2 F3 F1 
14f35     ED EB EB ED | 	byte	$c2, $c8, $cd, $d4, $da, $e0, $e5, $eb, $ef, $f2, $f3, $f1, $ed, $eb, $eb, $ed
14f39     ED E8 DE D5 
14f3d     CE CB CC CE 
14f41     D3 D7 DC E1 
14f45     E7 EB EC EC | 	byte	$ed, $e8, $de, $d5, $ce, $cb, $cc, $ce, $d3, $d7, $dc, $e1, $e7, $eb, $ec, $ec
14f49     EB EC EE F0 
14f4d     EE E9 E3 E0 
14f51     DF E1 E4 EA 
14f55     F1 F7 FF 05 | 	byte	$eb, $ec, $ee, $f0, $ee, $e9, $e3, $e0, $df, $e1, $e4, $ea, $f1, $f7, $ff, $05
14f59     0A 0F 14 19 
14f5d     1F 24 28 2B 
14f61     2B 29 27 26 
14f65     27 28 2C 2E | 	byte	$0a, $0f, $14, $19, $1f, $24, $28, $2b, $2b, $29, $27, $26, $27, $28, $2c, $2e
14f69     30 33 34 37 
14f6d     3A 3D 3F 41 
14f71     42 42 42 41 
14f75     40 3D 3C 3B | 	byte	$30, $33, $34, $37, $3a, $3d, $3f, $41, $42, $42, $42, $41, $40, $3d, $3c, $3b
14f79     3A 39 39 3A 
14f7d     3C 3D 3E 3E 
14f81     3E 3E 3E 3F 
14f85     3F 40 40 40 | 	byte	$3a, $39, $39, $3a, $3c, $3d, $3e, $3e, $3e, $3e, $3e, $3f, $3f, $40, $40, $40
14f89     3F 3D 32 1E 
14f8d     03 EC DB D0 
14f91     CA C8 C8 CB 
14f95     CF D3 D7 DA | 	byte	$3f, $3d, $32, $1e, $03, $ec, $db, $d0, $ca, $c8, $c8, $cb, $cf, $d3, $d7, $da
14f99     DD E1 E4 E8 
14f9d     E8 DF D1 C1 
14fa1     B5 AC AA AB 
14fa5     AF B5 BB C1 | 	byte	$dd, $e1, $e4, $e8, $e8, $df, $d1, $c1, $b5, $ac, $aa, $ab, $af, $b5, $bb, $c1
14fa9     C7 CD D3 D9 
14fad     DF E5 EA EE 
14fb1     F1 F1 EF EB 
14fb5     E9 EA EB E8 | 	byte	$c7, $cd, $d3, $d9, $df, $e5, $ea, $ee, $f1, $f1, $ef, $eb, $e9, $ea, $eb, $e8
14fb9     DF D5 CC C7 
14fbd     C7 C9 CD D3 
14fc1     D7 DD E2 E7 
14fc5     E9 E9 E9 EA | 	byte	$df, $d5, $cc, $c7, $c7, $c9, $cd, $d3, $d7, $dd, $e2, $e7, $e9, $e9, $e9, $ea
14fc9     EC ED EA E4 
14fcd     DF DC DD DF 
14fd1     E2 E8 EE F6 
14fd5     FD 04 0A 0F | 	byte	$ec, $ed, $ea, $e4, $df, $dc, $dd, $df, $e2, $e8, $ee, $f6, $fd, $04, $0a, $0f
14fd9     15 19 1E 23 
14fdd     28 2B 2B 29 
14fe1     27 25 26 28 
14fe5     2B 2F 31 34 | 	byte	$15, $19, $1e, $23, $28, $2b, $2b, $29, $27, $25, $26, $28, $2b, $2f, $31, $34
14fe9     36 38 3A 3D 
14fed     40 42 43 43 
14ff1     42 40 3D 3C 
14ff5     3B 3B 3C 3C | 	byte	$36, $38, $3a, $3d, $40, $42, $43, $43, $42, $40, $3d, $3c, $3b, $3b, $3c, $3c
14ff9     3C 3C 3D 3F 
14ffd     40 41 41 41 
15001     41 40 41 41 
15005     42 42 41 40 | 	byte	$3c, $3c, $3d, $3f, $40, $41, $41, $41, $41, $40, $41, $41, $42, $42, $41, $40
15009     3F 38 28 0D 
1500d     F5 E0 D2 CC 
15011     C8 C8 C9 CD 
15015     D1 D5 D8 DC | 	byte	$3f, $38, $28, $0d, $f5, $e0, $d2, $cc, $c8, $c8, $c9, $cd, $d1, $d5, $d8, $dc
15019     DF E1 E5 E3 
1501d     DA C9 BB B0 
15021     A9 A7 A9 AE 
15025     B4 BB C0 C7 | 	byte	$df, $e1, $e5, $e3, $da, $c9, $bb, $b0, $a9, $a7, $a9, $ae, $b4, $bb, $c0, $c7
15029     CC D3 D8 DE 
1502d     E4 EA EE F1 
15031     F0 ED EA E8 
15035     E8 E8 E1 D6 | 	byte	$cc, $d3, $d8, $de, $e4, $ea, $ee, $f1, $f0, $ed, $ea, $e8, $e8, $e8, $e1, $d6
15039     CC C6 C4 C5 
1503d     C9 CE D3 D9 
15041     DF E3 E5 E5 
15045     E6 E7 E9 E9 | 	byte	$cc, $c6, $c4, $c5, $c9, $ce, $d3, $d9, $df, $e3, $e5, $e5, $e6, $e7, $e9, $e9
15049     E5 DF DA D8 
1504d     D9 DD E1 E8 
15051     EE F4 FB 02 
15055     09 0F 15 1A | 	byte	$e5, $df, $da, $d8, $d9, $dd, $e1, $e8, $ee, $f4, $fb, $02, $09, $0f, $15, $1a
15059     1E 23 27 2A 
1505d     2A 29 27 27 
15061     27 29 2B 2E 
15065     31 35 37 3A | 	byte	$1e, $23, $27, $2a, $2a, $29, $27, $27, $27, $29, $2b, $2e, $31, $35, $37, $3a
15069     3C 3E 40 42 
1506d     43 43 42 3F 
15071     3D 3B 3B 3B 
15075     3C 3E 3F 3F | 	byte	$3c, $3e, $40, $42, $43, $43, $42, $3f, $3d, $3b, $3b, $3b, $3c, $3e, $3f, $3f
15079     40 40 41 42 
1507d     42 43 43 43 
15081     43 42 42 42 
15085     42 42 41 40 | 	byte	$40, $40, $41, $42, $42, $43, $43, $43, $43, $42, $42, $42, $42, $42, $41, $40
15089     3D 2F 16 FC 
1508d     E6 D7 CD C8 
15091     C7 C8 CA CE 
15095     D2 D6 D9 DC | 	byte	$3d, $2f, $16, $fc, $e6, $d7, $cd, $c8, $c7, $c8, $ca, $ce, $d2, $d6, $d9, $dc
15099     E0 E2 DD D2 
1509d     C2 B5 AB A6 
150a1     A5 A7 AC B2 
150a5     B9 C0 C7 CD | 	byte	$e0, $e2, $dd, $d2, $c2, $b5, $ab, $a6, $a5, $a7, $ac, $b2, $b9, $c0, $c7, $cd
150a9     D2 D8 DD E3 
150ad     E8 ED F0 EF 
150b1     EB E7 E6 E5 
150b5     E1 D9 CE C6 | 	byte	$d2, $d8, $dd, $e3, $e8, $ed, $f0, $ef, $eb, $e7, $e6, $e5, $e1, $d9, $ce, $c6
150b9     C1 C0 C4 C8 
150bd     CF D5 DB DF 
150c1     E1 E2 E2 E3 
150c5     E5 E5 E0 DA | 	byte	$c1, $c0, $c4, $c8, $cf, $d5, $db, $df, $e1, $e2, $e2, $e3, $e5, $e5, $e0, $da
150c9     D6 D4 D6 DA 
150cd     E0 E7 ED F4 
150d1     FA 00 07 0E 
150d5     14 1A 1F 23 | 	byte	$d6, $d4, $d6, $da, $e0, $e7, $ed, $f4, $fa, $00, $07, $0e, $14, $1a, $1f, $23
150d9     27 29 29 28 
150dd     27 27 28 29 
150e1     2B 2E 31 35 
150e5     38 3B 3D 3F | 	byte	$27, $29, $29, $28, $27, $27, $28, $29, $2b, $2e, $31, $35, $38, $3b, $3d, $3f
150e9     40 41 42 42 
150ed     40 3E 3D 3C 
150f1     3B 3C 3D 3F 
150f5     41 42 42 43 | 	byte	$40, $41, $42, $42, $40, $3e, $3d, $3c, $3b, $3c, $3d, $3f, $41, $42, $42, $43
150f9     42 42 43 44 
150fd     45 46 45 44 
15101     43 43 42 43 
15105     42 42 41 3E | 	byte	$42, $42, $43, $44, $45, $46, $45, $44, $43, $43, $42, $43, $42, $42, $41, $3e
15109     34 1E 05 ED 
1510d     DB D1 CA C7 
15111     C6 C8 CC D0 
15115     D4 D8 DB DD | 	byte	$34, $1e, $05, $ed, $db, $d1, $ca, $c7, $c6, $c8, $cc, $d0, $d4, $d8, $db, $dd
15119     DD D8 CB BB 
1511d     AF A7 A3 A3 
15121     A5 AA B1 B9 
15125     C0 C7 CC D1 | 	byte	$dd, $d8, $cb, $bb, $af, $a7, $a3, $a3, $a5, $aa, $b1, $b9, $c0, $c7, $cc, $d1
15129     D7 DC E2 E8 
1512d     ED F0 EF EB 
15131     E7 E5 E1 DA 
15135     CF C7 C0 BD | 	byte	$d7, $dc, $e2, $e8, $ed, $f0, $ef, $eb, $e7, $e5, $e1, $da, $cf, $c7, $c0, $bd
15139     BE C3 C9 CF 
1513d     D7 DC E0 E0 
15141     E0 E0 E1 DF 
15145     DA D5 D1 D0 | 	byte	$be, $c3, $c9, $cf, $d7, $dc, $e0, $e0, $e0, $e0, $e1, $df, $da, $d5, $d1, $d0
15149     D2 D7 DD E5 
1514d     EC F3 F9 FE 
15151     04 0B 12 18 
15155     1E 23 26 28 | 	byte	$d2, $d7, $dd, $e5, $ec, $f3, $f9, $fe, $04, $0b, $12, $18, $1e, $23, $26, $28
15159     29 29 28 28 
1515d     29 2A 2C 2D 
15161     2F 33 37 3B 
15165     3E 40 41 41 | 	byte	$29, $29, $28, $28, $29, $2a, $2c, $2d, $2f, $33, $37, $3b, $3e, $40, $41, $41
15169     42 41 40 3E 
1516d     3E 3D 3D 3C 
15171     3D 3F 41 43 
15175     44 44 44 43 | 	byte	$42, $41, $40, $3e, $3e, $3d, $3d, $3c, $3d, $3f, $41, $43, $44, $44, $44, $43
15179     43 44 46 47 
1517d     47 46 45 43 
15181     42 42 43 43 
15185     43 41 3E 37 | 	byte	$43, $44, $46, $47, $47, $46, $45, $43, $42, $42, $43, $43, $43, $41, $3e, $37
15189     27 0D F6 E1 
1518d     D4 CB C6 C5 
15191     C5 C9 CE D3 
15195     D7 D9 DA D9 | 	byte	$27, $0d, $f6, $e1, $d4, $cb, $c6, $c5, $c5, $c9, $ce, $d3, $d7, $d9, $da, $d9
15199     D2 C4 B7 AB 
1519d     A4 A1 A1 A3 
151a1     A9 B0 B9 C0 
151a5     C6 CC D1 D5 | 	byte	$d2, $c4, $b7, $ab, $a4, $a1, $a1, $a3, $a9, $b0, $b9, $c0, $c6, $cc, $d1, $d5
151a9     DB E1 E8 EE 
151ad     F2 F3 EF EB 
151b1     E5 DD D2 C7 
151b5     BF BA B9 BB | 	byte	$db, $e1, $e8, $ee, $f2, $f3, $ef, $eb, $e5, $dd, $d2, $c7, $bf, $ba, $b9, $bb
151b9     C1 C8 D0 D8 
151bd     DD E0 E0 DF 
151c1     DE DA D4 CF 
151c5     CB CB CC D1 | 	byte	$c1, $c8, $d0, $d8, $dd, $e0, $e0, $df, $de, $da, $d4, $cf, $cb, $cb, $cc, $d1
151c9     D8 E0 E9 F0 
151cd     F7 FC 01 07 
151d1     0E 16 1C 22 
151d5     26 29 2A 29 | 	byte	$d8, $e0, $e9, $f0, $f7, $fc, $01, $07, $0e, $16, $1c, $22, $26, $29, $2a, $29
151d9     29 29 2B 2C 
151dd     2D 2E 2F 31 
151e1     35 39 3D 40 
151e5     42 42 41 40 | 	byte	$29, $29, $2b, $2c, $2d, $2e, $2f, $31, $35, $39, $3d, $40, $42, $42, $41, $40
151e9     3F 3F 40 3F 
151ed     3F 3E 3E 3F 
151f1     41 44 46 46 
151f5     46 45 43 44 | 	byte	$3f, $3f, $40, $3f, $3f, $3e, $3e, $3f, $41, $44, $46, $46, $46, $45, $43, $44
151f9     45 47 48 49 
151fd     47 45 43 42 
15201     43 44 44 43 
15205     41 3E 3A 2D | 	byte	$45, $47, $48, $49, $47, $45, $43, $42, $43, $44, $44, $43, $41, $3e, $3a, $2d
15209     17 00 E9 D8 
1520d     CD C7 C4 C4 
15211     C8 CD D2 D5 
15215     D7 D8 D5 CC | 	byte	$17, $00, $e9, $d8, $cd, $c7, $c4, $c4, $c8, $cd, $d2, $d5, $d7, $d8, $d5, $cc
15219     BD B1 A7 A0 
1521d     9E 9F A2 A8 
15221     B0 B9 C1 C6 
15225     CB D0 D5 DA | 	byte	$bd, $b1, $a7, $a0, $9e, $9f, $a2, $a8, $b0, $b9, $c1, $c6, $cb, $d0, $d5, $da
15229     E2 E9 EE F2 
1522d     F4 F2 EE E4 
15231     D8 CA C0 B9 
15235     B6 B6 B9 C0 | 	byte	$e2, $e9, $ee, $f2, $f4, $f2, $ee, $e4, $d8, $ca, $c0, $b9, $b6, $b6, $b9, $c0
15239     C8 D1 D8 DD 
1523d     E0 E0 DC D5 
15241     CD C8 C6 C6 
15245     C8 CC D3 DB | 	byte	$c8, $d1, $d8, $dd, $e0, $e0, $dc, $d5, $cd, $c8, $c6, $c6, $c8, $cc, $d3, $db
15249     E5 ED F5 FB 
1524d     00 04 0A 11 
15251     19 20 25 28 
15255     2A 2B 29 2A | 	byte	$e5, $ed, $f5, $fb, $00, $04, $0a, $11, $19, $20, $25, $28, $2a, $2b, $29, $2a
15259     2B 2C 2D 2E 
1525d     2F 30 32 36 
15261     3B 40 42 43 
15265     42 3F 3E 3E | 	byte	$2b, $2c, $2d, $2e, $2f, $30, $32, $36, $3b, $40, $42, $43, $42, $3f, $3e, $3e
15269     3F 40 40 40 
1526d     40 3F 41 43 
15271     45 47 48 47 
15275     46 44 45 47 | 	byte	$3f, $40, $40, $40, $40, $3f, $41, $43, $45, $47, $48, $47, $46, $44, $45, $47
15279     49 49 49 48 
1527d     45 43 43 43 
15281     44 44 43 40 
15285     3E 3B 33 21 | 	byte	$49, $49, $49, $48, $45, $43, $43, $43, $44, $44, $43, $40, $3e, $3b, $33, $21
15289     08 F2 DD D0 
1528d     C7 C3 C4 C7 
15291     CC CF D2 D4 
15295     D5 D0 C6 B8 | 	byte	$08, $f2, $dd, $d0, $c7, $c3, $c4, $c7, $cc, $cf, $d2, $d4, $d5, $d0, $c6, $b8
15299     AB A3 9E 9C 
1529d     9D A1 A8 B0 
152a1     B8 C0 C6 CB 
152a5     CF D4 DA E2 | 	byte	$ab, $a3, $9e, $9c, $9d, $a1, $a8, $b0, $b8, $c0, $c6, $cb, $cf, $d4, $da, $e2
152a9     E8 EE F1 F4 
152ad     F4 EF E2 D3 
152b1     C4 BA B5 B3 
152b5     B4 B9 C0 C8 | 	byte	$e8, $ee, $f1, $f4, $f4, $ef, $e2, $d3, $c4, $ba, $b5, $b3, $b4, $b9, $c0, $c8
152b9     D1 D7 DD DF 
152bd     DB D2 C8 C2 
152c1     C0 C1 C4 C8 
152c5     CE D6 DF E9 | 	byte	$d1, $d7, $dd, $df, $db, $d2, $c8, $c2, $c0, $c1, $c4, $c8, $ce, $d6, $df, $e9
152c9     F1 F8 FE 03 
152cd     08 0E 15 1C 
152d1     22 28 2B 2C 
152d5     2C 2B 2A 2C | 	byte	$f1, $f8, $fe, $03, $08, $0e, $15, $1c, $22, $28, $2b, $2c, $2c, $2b, $2a, $2c
152d9     2D 2F 2F 30 
152dd     32 35 39 3D 
152e1     41 43 43 41 
152e5     3E 3D 3D 3F | 	byte	$2d, $2f, $2f, $30, $32, $35, $39, $3d, $41, $43, $43, $41, $3e, $3d, $3d, $3f
152e9     41 41 42 42 
152ed     42 43 45 48 
152f1     49 49 48 47 
152f5     46 47 48 4A | 	byte	$41, $41, $42, $42, $42, $43, $45, $48, $49, $49, $48, $47, $46, $47, $48, $4a
152f9     4A 4A 48 46 
152fd     44 43 44 44 
15301     44 42 40 3E 
15305     3C 38 2A 11 | 	byte	$4a, $4a, $48, $46, $44, $43, $44, $44, $44, $42, $40, $3e, $3c, $38, $2a, $11
15309     F9 E2 D1 C8 
1530d     C3 C4 C6 CA 
15311     CD D0 D2 D2 
15315     CC C0 B2 A6 | 	byte	$f9, $e2, $d1, $c8, $c3, $c4, $c6, $ca, $cd, $d0, $d2, $d2, $cc, $c0, $b2, $a6
15319     9F 9B 9A 9C 
1531d     A1 A8 B0 B8 
15321     BF C5 CA CF 
15325     D5 DB E2 E9 | 	byte	$9f, $9b, $9a, $9c, $a1, $a8, $b0, $b8, $bf, $c5, $ca, $cf, $d5, $db, $e2, $e9
15329     ED F1 F3 F3 
1532d     ED DD CD C0 
15331     B6 B2 B1 B4 
15335     B9 BF C8 D0 | 	byte	$ed, $f1, $f3, $f3, $ed, $dd, $cd, $c0, $b6, $b2, $b1, $b4, $b9, $bf, $c8, $d0
15339     D6 DB D9 D0 
1533d     C5 BE BA BB 
15341     BE C4 CA D2 
15345     DA E3 ED F5 | 	byte	$d6, $db, $d9, $d0, $c5, $be, $ba, $bb, $be, $c4, $ca, $d2, $da, $e3, $ed, $f5
15349     FC 01 06 0B 
1534d     12 18 1F 24 
15351     29 2C 2D 2D 
15355     2C 2B 2C 2D | 	byte	$fc, $01, $06, $0b, $12, $18, $1f, $24, $29, $2c, $2d, $2d, $2c, $2b, $2c, $2d
15359     2F 30 32 34 
1535d     37 3A 3E 41 
15361     43 41 3F 3D 
15365     3C 3E 3F 41 | 	byte	$2f, $30, $32, $34, $37, $3a, $3e, $41, $43, $41, $3f, $3d, $3c, $3e, $3f, $41
15369     42 43 44 44 
1536d     45 47 49 4A 
15371     4A 49 48 48 
15375     49 4A 4A 4A | 	byte	$42, $43, $44, $44, $45, $47, $49, $4a, $4a, $49, $48, $48, $49, $4a, $4a, $4a
15379     4A 48 46 45 
1537d     44 44 44 43 
15381     42 40 3E 3D 
15385     3B 31 1B 00 | 	byte	$4a, $48, $46, $45, $44, $44, $44, $43, $42, $40, $3e, $3d, $3b, $31, $1b, $00
15389     E9 D6 CA C4 
1538d     C3 C4 C7 CA 
15391     CD D0 CF C8 
15395     B9 AC A1 9A | 	byte	$e9, $d6, $ca, $c4, $c3, $c4, $c7, $ca, $cd, $d0, $cf, $c8, $b9, $ac, $a1, $9a
15399     98 99 9C A1 
1539d     A7 AF B7 BE 
153a1     C4 C9 CF D5 
153a5     DB E1 E7 EC | 	byte	$98, $99, $9c, $a1, $a7, $af, $b7, $be, $c4, $c9, $cf, $d5, $db, $e1, $e7, $ec
153a9     F0 F3 F1 E7 
153ad     DA CA BE B5 
153b1     B2 B1 B4 B9 
153b5     C0 C8 CF D5 | 	byte	$f0, $f3, $f1, $e7, $da, $ca, $be, $b5, $b2, $b1, $b4, $b9, $c0, $c8, $cf, $d5
153b9     D5 CF C6 BE 
153bd     B8 B7 BA BF 
153c1     C5 CD D5 DE 
153c5     E6 EF F7 FD | 	byte	$d5, $cf, $c6, $be, $b8, $b7, $ba, $bf, $c5, $cd, $d5, $de, $e6, $ef, $f7, $fd
153c9     03 09 0E 14 
153cd     1A 20 25 2A 
153d1     2E 2F 2E 2D 
153d5     2C 2C 2E 30 | 	byte	$03, $09, $0e, $14, $1a, $20, $25, $2a, $2e, $2f, $2e, $2d, $2c, $2c, $2e, $30
153d9     32 34 36 39 
153dd     3C 3F 41 42 
153e1     40 3E 3D 3D 
153e5     3E 40 42 44 | 	byte	$32, $34, $36, $39, $3c, $3f, $41, $42, $40, $3e, $3d, $3d, $3e, $40, $42, $44
153e9     45 46 46 47 
153ed     48 49 4A 4A 
153f1     4A 4A 4A 49 
153f5     4A 4A 4B 4B | 	byte	$45, $46, $46, $47, $48, $49, $4a, $4a, $4a, $4a, $4a, $49, $4a, $4a, $4b, $4b
153f9     4A 47 46 45 
153fd     44 44 43 42 
15401     41 3F 3E 3C 
15405     36 23 0B F1 | 	byte	$4a, $47, $46, $45, $44, $44, $43, $42, $41, $3f, $3e, $3c, $36, $23, $0b, $f1
15409     DC CE C6 C3 
1540d     C2 C5 C8 CB 
15411     CE D1 D0 C9 
15415     BB AD A2 9B | 	byte	$dc, $ce, $c6, $c3, $c2, $c5, $c8, $cb, $ce, $d1, $d0, $c9, $bb, $ad, $a2, $9b
15419     98 99 9C A2 
1541d     A9 AF B7 BE 
15421     C4 CA D0 D6 
15425     DB E1 E7 EB | 	byte	$98, $99, $9c, $a2, $a9, $af, $b7, $be, $c4, $ca, $d0, $d6, $db, $e1, $e7, $eb
15429     ED E7 DB D0 
1542d     C4 BA B4 B0 
15431     B0 B3 B8 BD 
15435     C5 CC D2 D4 | 	byte	$ed, $e7, $db, $d0, $c4, $ba, $b4, $b0, $b0, $b3, $b8, $bd, $c5, $cc, $d2, $d4
15439     D1 CB C4 BE 
1543d     BB BB BF C4 
15441     CA D2 DA E3 
15445     EB F2 FB 00 | 	byte	$d1, $cb, $c4, $be, $bb, $bb, $bf, $c4, $ca, $d2, $da, $e3, $eb, $f2, $fb, $00
15449     00 00 00 FF 
1544d     FF FF FF FF 
15451     FF 00 01 02 
15455     02 02 01 01 | 	byte	$00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $00, $01, $02, $02, $02, $01, $01
15459     01 02 02 01 
1545d     01 01 01 01 
15461     01 01 02 03 
15465     03 03 03 02 | 	byte	$01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $02, $03, $03, $03, $03, $02
15469     02 03 04 05 
1546d     05 05 05 05 
15471     05 05 07 07 
15475     07 07 06 06 | 	byte	$02, $03, $04, $05, $05, $05, $05, $05, $05, $05, $07, $07, $07, $07, $06, $06
15479     06 07 08 08 
1547d     08 07 07 07 
15481     06 FB EA E7 
15485     E8 E8 E9 EA | 	byte	$06, $07, $08, $08, $08, $07, $07, $07, $06, $fb, $ea, $e7, $e8, $e8, $e9, $ea
15489     EB ED F0 F1 
1548d     F2 F2 F3 F3 
15491     F4 F6 F9 FA 
15495     FA FB FB FB | 	byte	$eb, $ed, $f0, $f1, $f2, $f2, $f3, $f3, $f4, $f6, $f9, $fa, $fa, $fb, $fb, $fb
15499     FC FE 00 01 
1549d     01 00 00 FE 
154a1     F5 F2 F4 F6 
154a5     F7 F8 F9 FA | 	byte	$fc, $fe, $00, $01, $01, $00, $00, $fe, $f5, $f2, $f4, $f6, $f7, $f8, $f9, $fa
154a9     FC FE 02 03 
154ad     04 04 05 06 
154b1     07 09 0C 0D 
154b5     0D 0D 0D 0D | 	byte	$fc, $fe, $02, $03, $04, $04, $05, $06, $07, $09, $0c, $0d, $0d, $0d, $0d, $0d
154b9     0E 06 F8 F5 
154bd     F6 F6 F7 F7 
154c1     F9 FC FF FF 
154c5     00 00 00 00 | 	byte	$0e, $06, $f8, $f5, $f6, $f6, $f7, $f7, $f9, $fc, $ff, $ff, $00, $00, $00, $00
154c9     02 05 08 09 
154cd     09 09 08 08 
154d1     0A 0C 10 10 
154d5     10 0F 0E 0A | 	byte	$02, $05, $08, $09, $09, $09, $08, $08, $0a, $0c, $10, $10, $10, $0f, $0e, $0a
154d9     03 03 07 08 
154dd     08 07 07 07 
154e1     08 09 09 05 
154e5     04 04 05 06 | 	byte	$03, $03, $07, $08, $08, $07, $07, $07, $08, $09, $09, $05, $04, $04, $05, $06
154e9     08 0B 0F 11 
154ed     10 0F 0F 0F 
154f1     11 14 17 18 
154f5     17 16 15 15 | 	byte	$08, $0b, $0f, $11, $10, $0f, $0f, $0f, $11, $14, $17, $18, $17, $16, $15, $15
154f9     17 18 1C 1C 
154fd     1A 19 17 17 
15501     16 0A D5 C9 
15505     CC CF D1 D5 | 	byte	$17, $18, $1c, $1c, $1a, $19, $17, $17, $16, $0a, $d5, $c9, $cc, $cf, $d1, $d5
15509     DB E0 E6 E9 
1550d     EA EB ED F0 
15511     F4 F8 FE 00 
15515     00 FF 00 02 | 	byte	$db, $e0, $e6, $e9, $ea, $eb, $ed, $f0, $f4, $f8, $fe, $00, $00, $ff, $00, $02
15519     05 06 05 04 
1551d     04 04 04 F4 
15521     DF DC E3 E7 
15525     E9 EC EE F1 | 	byte	$05, $06, $05, $04, $04, $04, $04, $f4, $df, $dc, $e3, $e7, $e9, $ec, $ee, $f1
15529     F8 FC 03 06 
1552d     06 07 09 0C 
15531     11 14 1A 1B 
15535     1A 19 19 10 | 	byte	$f8, $fc, $03, $06, $06, $07, $09, $0c, $11, $14, $1a, $1b, $1a, $19, $19, $10
15539     EB E2 EA ED 
1553d     EE F0 F3 F6 
15541     FC FF 02 04 
15545     03 04 05 08 | 	byte	$eb, $e2, $ea, $ed, $ee, $f0, $f3, $f6, $fc, $ff, $02, $04, $03, $04, $05, $08
15549     0D 0F 13 14 
1554d     13 13 13 16 
15551     1A 1B 1E 1E 
15555     1B 07 F8 FA | 	byte	$0d, $0f, $13, $14, $13, $13, $13, $16, $1a, $1b, $1e, $1e, $1b, $07, $f8, $fa
15559     FF 01 06 08 
1555d     08 09 0A 0E 
15561     0F 07 FF FD 
15565     FE 01 02 08 | 	byte	$ff, $01, $06, $08, $08, $09, $0a, $0e, $0f, $07, $ff, $fd, $fe, $01, $02, $08
15569     0C 0E 12 13 
1556d     13 14 14 19 
15571     1C 1D 20 20 
15575     1F 1F 1E 21 | 	byte	$0c, $0e, $12, $13, $13, $14, $14, $19, $1c, $1d, $20, $20, $1f, $1f, $1e, $21
15579     22 22 24 24 
1557d     23 22 1F 1B 
15581     16 12 D9 C4 
15585     C9 CE D2 DB | 	byte	$22, $22, $24, $24, $23, $22, $1f, $1b, $16, $12, $d9, $c4, $c9, $ce, $d2, $db
15589     E0 E3 E9 EC 
1558d     EE F1 F3 FA 
15591     FE FF 03 05 
15595     05 05 05 00 | 	byte	$e0, $e3, $e9, $ec, $ee, $f1, $f3, $fa, $fe, $ff, $03, $05, $05, $05, $05, $00
15599     FB FA FF 02 
1559d     04 04 03 E5 
155a1     D3 D4 DB DF 
155a5     E3 E7 EC F3 | 	byte	$fb, $fa, $ff, $02, $04, $04, $03, $e5, $d3, $d4, $db, $df, $e3, $e7, $ec, $f3
155a9     F6 F8 FD 01 
155ad     03 04 09 0E 
155b1     10 10 14 15 
155b5     12 09 D9 C8 | 	byte	$f6, $f8, $fd, $01, $03, $04, $09, $0e, $10, $10, $14, $15, $12, $09, $d9, $c8
155b9     CF D3 DA E0 
155bd     E3 E6 EC F2 
155c1     F4 F6 F9 FD 
155c5     FE FF 04 08 | 	byte	$cf, $d3, $da, $e0, $e3, $e6, $ec, $f2, $f4, $f6, $f9, $fd, $fe, $ff, $04, $08
155c9     0A 0A 0E 11 
155cd     12 11 15 18 
155d1     18 17 13 F4 
155d5     E7 E9 EF F4 | 	byte	$0a, $0a, $0e, $11, $12, $11, $15, $18, $18, $17, $13, $f4, $e7, $e9, $ef, $f4
155d9     F6 F8 FD 02 
155dd     03 05 09 0B 
155e1     08 FA F5 F9 
155e5     FC FF 04 07 | 	byte	$f6, $f8, $fd, $02, $03, $05, $09, $0b, $08, $fa, $f5, $f9, $fc, $ff, $04, $07
155e9     09 09 0E 12 
155ed     13 15 19 1A 
155f1     1A 1A 1D 20 
155f5     1F 1F 20 21 | 	byte	$09, $09, $0e, $12, $13, $15, $19, $1a, $1a, $1a, $1d, $20, $1f, $1f, $20, $21
155f9     20 1F 22 24 
155fd     22 20 19 11 
15601     0F 0F EF C7 
15605     C7 CF D4 D8 | 	byte	$20, $1f, $22, $24, $22, $20, $19, $11, $0f, $0f, $ef, $c7, $c7, $cf, $d4, $d8
15609     DB DE E5 EA 
1560d     EC F0 F4 F7 
15611     F8 F9 FE 00 
15615     FB F2 EC EF | 	byte	$db, $de, $e5, $ea, $ec, $f0, $f4, $f7, $f8, $f9, $fe, $00, $fb, $f2, $ec, $ef
15619     F2 F4 FA FD 
1561d     FF 03 F8 D7 
15621     CB CF D8 DE 
15625     E1 E8 EB EF | 	byte	$f2, $f4, $fa, $fd, $ff, $03, $f8, $d7, $cb, $cf, $d8, $de, $e1, $e8, $eb, $ef
15629     F2 F5 FB 00 
1562d     02 06 08 0B 
15631     0B 07 03 02 
15635     E5 C2 C4 CC | 	byte	$f2, $f5, $fb, $00, $02, $06, $08, $0b, $0b, $07, $03, $02, $e5, $c2, $c4, $cc
15639     D0 D6 DD E3 
1563d     E9 EE F1 F4 
15641     F7 FB FF 02 
15645     05 08 09 0B | 	byte	$d0, $d6, $dd, $e3, $e9, $ee, $f1, $f4, $f7, $fb, $ff, $02, $05, $08, $09, $0b
15649     0D 10 12 15 
1564d     18 1A 19 1A 
15651     0C ED E8 EE 
15655     F3 F6 F8 FB | 	byte	$0d, $10, $12, $15, $18, $1a, $19, $1a, $0c, $ed, $e8, $ee, $f3, $f6, $f8, $fb
15659     FE 02 05 09 
1565d     0E 10 10 10 
15661     0C 01 FA FF 
15665     05 07 09 0C | 	byte	$fe, $02, $05, $09, $0e, $10, $10, $10, $0c, $01, $fa, $ff, $05, $07, $09, $0c
15669     0F 12 13 18 
1566d     1C 1C 1C 1E 
15671     1F 20 20 22 
15675     24 23 22 23 | 	byte	$0f, $12, $13, $18, $1c, $1c, $1c, $1e, $1f, $20, $20, $22, $24, $23, $22, $23
15679     24 25 24 27 
1567d     26 1C 12 12 
15681     15 16 0D D8 
15685     CF D4 D7 DC | 	byte	$24, $25, $24, $27, $26, $1c, $12, $12, $15, $16, $0d, $d8, $cf, $d4, $d7, $dc
15689     E1 E4 E6 EE 
1568d     F2 F3 F5 F8 
15691     FA FB F6 EE 
15695     EB ED F0 F5 | 	byte	$e1, $e4, $e6, $ee, $f2, $f3, $f5, $f8, $fa, $fb, $f6, $ee, $eb, $ed, $f0, $f5
15699     F9 FA FC 03 
1569d     06 05 F6 DA 
156a1     D6 D9 DD E6 
156a5     EB ED F0 F7 | 	byte	$f9, $fa, $fc, $03, $06, $05, $f6, $da, $d6, $d9, $dd, $e6, $eb, $ed, $f0, $f7
156a9     FA FB FE 06 
156ad     09 09 06 02 
156b1     FE 00 FA CF 
156b5     C4 C9 D0 D8 | 	byte	$fa, $fb, $fe, $06, $09, $09, $06, $02, $fe, $00, $fa, $cf, $c4, $c9, $d0, $d8
156b9     DD E0 E5 EF 
156bd     F3 F4 F8 FD 
156c1     00 01 04 0A 
156c5     0C 0C 0F 13 | 	byte	$dd, $e0, $e5, $ef, $f3, $f4, $f8, $fd, $00, $01, $04, $0a, $0c, $0c, $0f, $13
156c9     14 14 16 1C 
156cd     1D 1B 07 F1 
156d1     ED EF F3 FB 
156d5     FD FE 03 07 | 	byte	$14, $14, $16, $1c, $1d, $1b, $07, $f1, $ed, $ef, $f3, $fb, $fd, $fe, $03, $07
156d9     09 0A 0D 13 
156dd     15 15 17 19 
156e1     12 04 00 06 
156e5     0A 0B 0F 12 | 	byte	$09, $0a, $0d, $13, $15, $15, $17, $19, $12, $04, $00, $06, $0a, $0b, $0f, $12
156e9     13 14 18 1C 
156ed     1D 1E 20 21 
156f1     21 21 22 24 
156f5     24 24 26 27 | 	byte	$13, $14, $18, $1c, $1d, $1e, $20, $21, $21, $21, $22, $24, $24, $24, $26, $27
156f9     25 25 26 27 
156fd     20 16 15 16 
15701     16 17 19 F3 
15705     D4 D6 DC E0 | 	byte	$25, $25, $26, $27, $20, $16, $15, $16, $16, $17, $19, $f3, $d4, $d6, $dc, $e0
15709     E2 E5 EA EE 
1570d     F2 F4 F7 F7 
15711     F1 E6 E4 E9 
15715     ED F2 F5 F7 | 	byte	$e2, $e5, $ea, $ee, $f2, $f4, $f7, $f7, $f1, $e6, $e4, $e9, $ed, $f2, $f5, $f7
15719     F9 FC 00 03 
1571d     05 07 F4 DB 
15721     D9 DE E4 E8 
15725     ED F2 F5 F8 | 	byte	$f9, $fc, $00, $03, $05, $07, $f4, $db, $d9, $de, $e4, $e8, $ed, $f2, $f5, $f8
15729     FA FE 02 02 
1572d     FE FA FB FF 
15731     01 E1 C1 C4 
15735     CD D3 D9 DD | 	byte	$fa, $fe, $02, $02, $fe, $fa, $fb, $ff, $01, $e1, $c1, $c4, $cd, $d3, $d9, $dd
15739     E1 E8 EC F0 
1573d     F6 FA FD FF 
15741     02 06 09 0A 
15745     0F 11 12 13 | 	byte	$e1, $e8, $ec, $f0, $f6, $fa, $fd, $ff, $02, $06, $09, $0a, $0f, $11, $12, $13
15749     14 17 18 17 
1574d     01 EE ED F0 
15751     F3 F8 FB FE 
15755     04 07 08 0B | 	byte	$14, $17, $18, $17, $01, $ee, $ed, $f0, $f3, $f8, $fb, $fe, $04, $07, $08, $0b
15759     0D 11 12 13 
1575d     19 1A 1A 19 
15761     13 09 03 06 
15765     0D 0F 10 12 | 	byte	$0d, $11, $12, $13, $19, $1a, $1a, $19, $13, $09, $03, $06, $0d, $0f, $10, $12
15769     14 18 18 1A 
1576d     1E 1F 1F 1F 
15771     20 21 20 21 
15775     25 25 24 24 | 	byte	$14, $18, $18, $1a, $1e, $1f, $1f, $1f, $20, $21, $20, $21, $25, $25, $24, $24
15779     25 26 24 20 
1577d     1B 15 14 16 
15781     18 1A 1A 0B 
15785     E4 D8 DB E0 | 	byte	$25, $26, $24, $20, $1b, $15, $14, $16, $18, $1a, $1a, $0b, $e4, $d8, $db, $e0
15789     E4 E8 EA ED 
1578d     F1 F2 EC E1 
15791     DF E3 E7 EB 
15795     F1 F3 F5 F8 | 	byte	$e4, $e8, $ea, $ed, $f1, $f2, $ec, $e1, $df, $e3, $e7, $eb, $f1, $f3, $f5, $f8
15799     FC FF 00 03 
1579d     07 05 F0 DD 
157a1     DE E3 E6 EA 
157a5     F0 F2 F5 F8 | 	byte	$fc, $ff, $00, $03, $07, $05, $f0, $dd, $de, $e3, $e6, $ea, $f0, $f2, $f5, $f8
157a9     FC F8 F3 F3 
157ad     F8 FC FF F8 
157b1     CD C0 C7 CD 
157b5     D4 D9 DE E3 | 	byte	$fc, $f8, $f3, $f3, $f8, $fc, $ff, $f8, $cd, $c0, $c7, $cd, $d4, $d9, $de, $e3
157b9     E9 ED F1 F4 
157bd     F9 FC FF 03 
157c1     07 09 0C 0D 
157c5     0F 10 11 14 | 	byte	$e9, $ed, $f1, $f4, $f9, $fc, $ff, $03, $07, $09, $0c, $0d, $0f, $10, $11, $14
157c9     17 13 FB E9 
157cd     EB EF F2 F7 
157d1     FB FE 01 04 
157d5     07 0A 0C 10 | 	byte	$17, $13, $fb, $e9, $eb, $ef, $f2, $f7, $fb, $fe, $01, $04, $07, $0a, $0c, $10
157d9     13 14 16 17 
157dd     19 1A 1B 1C 
157e1     17 0C 08 09 
157e5     0D 0F 12 15 | 	byte	$13, $14, $16, $17, $19, $1a, $1b, $1c, $17, $0c, $08, $09, $0d, $0f, $12, $15
157e9     17 19 1A 1A 
157ed     1B 1D 1E 20 
157f1     20 21 21 20 
157f5     21 22 23 25 | 	byte	$17, $19, $1a, $1a, $1b, $1d, $1e, $20, $20, $21, $21, $20, $21, $22, $23, $25
157f9     25 25 22 19 
157fd     13 13 15 19 
15801     1A 1B 1B 18 
15805     F5 DC DD E3 | 	byte	$25, $25, $22, $19, $13, $13, $15, $19, $1a, $1b, $1b, $18, $f5, $dc, $dd, $e3
15809     E6 E8 EA E9 
1580d     E5 DC DA DF 
15811     E4 E8 EB EC 
15815     F0 F4 F8 FC | 	byte	$e6, $e8, $ea, $e9, $e5, $dc, $da, $df, $e4, $e8, $eb, $ec, $f0, $f4, $f8, $fc
15819     FE 01 01 02 
1581d     04 02 EE E1 
15821     E2 E6 E8 EB 
15825     EF F2 F3 EF | 	byte	$fe, $01, $01, $02, $04, $02, $ee, $e1, $e2, $e6, $e8, $eb, $ef, $f2, $f3, $ef
15829     ED F0 F3 F6 
1582d     FA FC DA C1 
15831     C5 CB CF D3 
15835     D9 DE E6 EC | 	byte	$ed, $f0, $f3, $f6, $fa, $fc, $da, $c1, $c5, $cb, $cf, $d3, $d9, $de, $e6, $ec
15839     EF F3 F5 F7 
1583d     FB FF 05 08 
15841     0B 0D 0D 0E 
15845     0F 11 16 0F | 	byte	$ef, $f3, $f5, $f7, $fb, $ff, $05, $08, $0b, $0d, $0d, $0e, $0f, $11, $16, $0f
15849     F3 E8 E9 EB 
1584d     F0 F5 FB FF 
15851     02 04 05 06 
15855     0A 0F 14 16 | 	byte	$f3, $e8, $e9, $eb, $f0, $f5, $fb, $ff, $02, $04, $05, $06, $0a, $0f, $14, $16
15859     17 18 18 18 
1585d     1A 1D 20 21 
15861     1B 0F 09 0B 
15865     0E 13 17 19 | 	byte	$17, $18, $18, $18, $1a, $1d, $20, $21, $1b, $0f, $09, $0b, $0e, $13, $17, $19
15869     1A 19 19 19 
1586d     1B 1E 20 22 
15871     21 20 1F 1F 
15875     1F 23 26 26 | 	byte	$1a, $19, $19, $19, $1b, $1e, $20, $22, $21, $20, $1f, $1f, $1f, $23, $26, $26
15879     25 22 1B 13 
1587d     11 16 1A 1B 
15881     1B 1A 19 18 
15885     FF E1 E2 E5 | 	byte	$25, $22, $1b, $13, $11, $16, $1a, $1b, $1b, $1a, $19, $18, $ff, $e1, $e2, $e5
15889     E6 E6 DE D4 
1588d     D3 DC E3 E6 
15891     E8 EA EC EE 
15895     F2 F9 FE 00 | 	byte	$e6, $e6, $de, $d4, $d3, $dc, $e3, $e6, $e8, $ea, $ec, $ee, $f2, $f9, $fe, $00
15899     00 00 01 02 
1589d     04 FD E9 E3 
158a1     E4 E7 EA E9 
158a5     E5 E6 EB EF | 	byte	$00, $00, $01, $02, $04, $fd, $e9, $e3, $e4, $e7, $ea, $e9, $e5, $e6, $eb, $ef
158a9     F1 F4 F6 F8 
158ad     E1 BF C2 C9 
158b1     CD D1 D6 D9 
158b5     E1 E9 EF F1 | 	byte	$f1, $f4, $f6, $f8, $e1, $bf, $c2, $c9, $cd, $d1, $d6, $d9, $e1, $e9, $ef, $f1
158b9     F3 F5 F8 FA 
158bd     00 06 0A 0B 
158c1     0B 0D 0E 0F 
158c5     11 02 E9 E6 | 	byte	$f3, $f5, $f8, $fa, $00, $06, $0a, $0b, $0b, $0d, $0e, $0f, $11, $02, $e9, $e6
158c9     E9 EC EF F2 
158cd     F7 FF 03 04 
158d1     05 07 09 0B 
158d5     0F 16 18 18 | 	byte	$e9, $ec, $ef, $f2, $f7, $ff, $03, $04, $05, $07, $09, $0b, $0f, $16, $18, $18
158d9     18 19 19 1A 
158dd     1D 23 24 20 
158e1     16 0D 0B 0D 
158e5     12 17 19 19 | 	byte	$18, $19, $19, $1a, $1d, $23, $24, $20, $16, $0d, $0b, $0d, $12, $17, $19, $19
158e9     18 18 19 19 
158ed     1C 21 21 20 
158f1     1F 1F 1F 1F 
158f5     21 25 25 23 | 	byte	$18, $18, $19, $19, $1c, $21, $21, $20, $1f, $1f, $1f, $1f, $21, $25, $25, $23
158f9     21 1A 13 11 
158fd     14 19 1A 19 
15901     19 19 18 1A 
15905     12 E9 E1 E1 | 	byte	$21, $1a, $13, $11, $14, $19, $1a, $19, $19, $19, $18, $1a, $12, $e9, $e1, $e1
15909     D7 CF D0 D7 
1590d     DC E3 E6 E8 
15911     EB ED EF F4 
15915     F8 FD FF FF | 	byte	$d7, $cf, $d0, $d7, $dc, $e3, $e6, $e8, $eb, $ed, $ef, $f4, $f8, $fd, $ff, $ff
15919     00 02 02 05 
1591d     07 F5 E5 E3 
15921     E3 DE DB DF 
15925     E6 EC F0 F2 | 	byte	$00, $02, $02, $05, $07, $f5, $e5, $e3, $e3, $de, $db, $df, $e6, $ec, $f0, $f2
15929     F5 F8 F0 BF 
1592d     BB C4 CA CE 
15931     D3 D8 DD E3 
15935     E8 EE F2 F4 | 	byte	$f5, $f8, $f0, $bf, $bb, $c4, $ca, $ce, $d3, $d8, $dd, $e3, $e8, $ee, $f2, $f4
15939     F7 F9 FC 01 
1593d     04 08 0B 0B 
15941     0D 0F 0D F6 
15945     E3 E5 E9 EC | 	byte	$f7, $f9, $fc, $01, $04, $08, $0b, $0b, $0d, $0f, $0d, $f6, $e3, $e5, $e9, $ec
15949     F0 F3 F7 FC 
1594d     FE 03 06 08 
15951     0A 0C 0F 13 
15955     14 17 19 1A | 	byte	$f0, $f3, $f7, $fc, $fe, $03, $06, $08, $0a, $0c, $0f, $13, $14, $17, $19, $1a
15959     1B 1C 1F 21 
1595d     20 22 23 20 
15961     15 0D 10 14 
15965     14 17 18 19 | 	byte	$1b, $1c, $1f, $21, $20, $22, $23, $20, $15, $0d, $10, $14, $14, $17, $18, $19
15969     1A 1A 1C 1D 
1596d     1C 1F 20 20 
15971     1F 1F 23 22 
15975     20 22 23 22 | 	byte	$1a, $1a, $1c, $1d, $1c, $1f, $20, $20, $1f, $1f, $23, $22, $20, $22, $23, $22
15979     1C 15 15 15 
1597d     15 18 1A 19 
15981     19 19 1C 1A 
15985     17 ED D1 CA | 	byte	$1c, $15, $15, $15, $15, $18, $1a, $19, $19, $19, $1c, $1a, $17, $ed, $d1, $ca
15989     CD D4 DA DD 
1598d     DF E4 E9 EC 
15991     EE F2 F7 F8 
15995     F8 FC FF 00 | 	byte	$cd, $d4, $da, $dd, $df, $e4, $e9, $ec, $ee, $f2, $f7, $f8, $f8, $fc, $ff, $00
15999     01 05 08 07 
1599d     02 EC DB D5 
159a1     D6 DE E5 E7 
159a5     E9 EE F3 F6 | 	byte	$01, $05, $08, $07, $02, $ec, $db, $d5, $d6, $de, $e5, $e7, $e9, $ee, $f3, $f6
159a9     F6 CB B9 BD 
159ad     C2 CA D1 D5 
159b1     D9 E1 E6 E8 
159b5     EA F0 F5 F7 | 	byte	$f6, $cb, $b9, $bd, $c2, $ca, $d1, $d5, $d9, $e1, $e6, $e8, $ea, $f0, $f5, $f7
159b9     F9 00 03 03 
159bd     04 09 0C 0D 
159c1     05 EC E1 E3 
159c5     E6 EC F0 F2 | 	byte	$f9, $00, $03, $03, $04, $09, $0c, $0d, $05, $ec, $e1, $e3, $e6, $ec, $f0, $f2
159c9     F5 FD FF 00 
159cd     01 07 0B 0C 
159d1     0E 14 15 14 
159d5     15 19 1B 1B | 	byte	$f5, $fd, $ff, $00, $01, $07, $0b, $0c, $0e, $14, $15, $14, $15, $19, $1b, $1b
159d9     1E 23 22 20 
159dd     20 22 23 1E 
159e1     16 13 13 13 
159e5     14 17 19 19 | 	byte	$1e, $23, $22, $20, $20, $22, $23, $1e, $16, $13, $13, $13, $14, $17, $19, $19
159e9     1C 1E 1D 1B 
159ed     1B 1E 1F 1E 
159f1     22 24 22 20 
159f5     1F 21 21 1C | 	byte	$1c, $1e, $1d, $1b, $1b, $1e, $1f, $1e, $22, $24, $22, $20, $1f, $21, $21, $1c
159f9     19 17 15 14 
159fd     15 17 18 18 
15a01     1C 1C 19 12 
15a05     03 E7 CD CF | 	byte	$19, $17, $15, $14, $15, $17, $18, $18, $1c, $1c, $19, $12, $03, $e7, $cd, $cf
15a09     D8 DC DD DF 
15a0d     E2 E6 EA EE 
15a11     F5 F7 F7 F7 
15a15     F9 FC FF 01 | 	byte	$d8, $dc, $dd, $df, $e2, $e6, $ea, $ee, $f5, $f7, $f7, $f7, $f9, $fc, $ff, $01
15a19     07 07 05 FE 
15a1d     ED D7 D4 DA 
15a21     E2 E5 E7 EA 
15a25     EE F2 F6 E1 | 	byte	$07, $07, $05, $fe, $ed, $d7, $d4, $da, $e2, $e5, $e7, $ea, $ee, $f2, $f6, $e1
15a29     BA BA C0 C5 
15a2d     C9 CF D6 DD 
15a31     E4 E7 E9 EC 
15a35     EF F3 F7 FD | 	byte	$ba, $ba, $c0, $c5, $c9, $cf, $d6, $dd, $e4, $e7, $e9, $ec, $ef, $f3, $f7, $fd
15a39     02 03 04 05 
15a3d     07 09 FE E5 
15a41     E1 E4 E7 EA 
15a45     ED F1 F6 FD | 	byte	$02, $03, $04, $05, $07, $09, $fe, $e5, $e1, $e4, $e7, $ea, $ed, $f1, $f6, $fd
15a49     01 02 03 05 
15a4d     07 0A 0E 14 
15a51     17 16 17 17 
15a55     18 19 1E 22 | 	byte	$01, $02, $03, $05, $07, $0a, $0e, $14, $17, $16, $17, $17, $18, $19, $1e, $22
15a59     23 22 22 21 
15a5d     20 20 23 23 
15a61     1A 13 13 14 
15a65     14 15 1A 1D | 	byte	$23, $22, $22, $21, $20, $20, $23, $23, $1a, $13, $13, $14, $14, $15, $1a, $1d
15a69     1D 1C 1C 1B 
15a6d     1A 1B 20 23 
15a71     23 21 20 1F 
15a75     1D 1E 20 1C | 	byte	$1d, $1c, $1c, $1b, $1a, $1b, $20, $23, $23, $21, $20, $1f, $1d, $1e, $20, $1c
15a79     16 14 14 14 
15a7d     13 14 19 1B 
15a81     1A 11 03 FC 
15a85     FD FC DD D6 | 	byte	$16, $14, $14, $14, $13, $14, $19, $1b, $1a, $11, $03, $fc, $fd, $fc, $dd, $d6
15a89     DA DD E0 E1 
15a8d     E3 E7 EF F4 
15a91     F5 F6 F7 F7 
15a95     F8 FB 03 05 | 	byte	$da, $dd, $e0, $e1, $e3, $e7, $ef, $f4, $f5, $f6, $f7, $f7, $f8, $fb, $03, $05
15a99     FF F7 F3 F3 
15a9d     E7 D8 DD E3 
15aa1     E6 E9 EB ED 
15aa5     EF ED BE B6 | 	byte	$ff, $f7, $f3, $f3, $e7, $d8, $dd, $e3, $e6, $e9, $eb, $ed, $ef, $ed, $be, $b6
15aa9     BE C3 C7 CA 
15aad     CF D6 DF E4 
15ab1     E8 EB ED EE 
15ab5     F1 F7 FE 01 | 	byte	$be, $c3, $c7, $ca, $cf, $d6, $df, $e4, $e8, $eb, $ed, $ee, $f1, $f7, $fe, $01
15ab9     03 04 05 04 
15abd     EF DA DE E4 
15ac1     E7 EB ED EF 
15ac5     F4 F9 FF 02 | 	byte	$03, $04, $05, $04, $ef, $da, $de, $e4, $e7, $eb, $ed, $ef, $f4, $f9, $ff, $02
15ac9     05 07 07 08 
15acd     0B 10 16 18 
15ad1     19 1A 19 18 
15ad5     1A 1F 23 24 | 	byte	$05, $07, $07, $08, $0b, $10, $16, $18, $19, $1a, $19, $18, $1a, $1f, $23, $24
15ad9     24 23 22 21 
15add     21 25 27 22 
15ae1     18 13 13 14 
15ae5     16 19 1B 1D | 	byte	$24, $23, $22, $21, $21, $25, $27, $22, $18, $13, $13, $14, $16, $19, $1b, $1d
15ae9     1D 1C 1A 1A 
15aed     1B 1F 22 22 
15af1     22 21 1E 1E 
15af5     1F 20 1C 17 | 	byte	$1d, $1c, $1a, $1a, $1b, $1f, $22, $22, $22, $21, $1e, $1e, $1f, $20, $1c, $17
15af9     15 15 14 13 
15afd     14 17 18 11 
15b01     04 FE FF 02 
15b05     05 08 EB DA | 	byte	$15, $15, $14, $13, $14, $17, $18, $11, $04, $fe, $ff, $02, $05, $08, $eb, $da
15b09     DC DE DF E3 
15b0d     E8 EC F1 F4 
15b11     F6 F6 F6 F8 
15b15     FC FC F6 F3 | 	byte	$dc, $de, $df, $e3, $e8, $ec, $f1, $f4, $f6, $f6, $f6, $f8, $fc, $fc, $f6, $f3
15b19     F3 F5 F7 F7 
15b1d     EA DD E0 E6 
15b21     E8 EA EC EF 
15b25     CE B2 B8 C0 | 	byte	$f3, $f5, $f7, $f7, $ea, $dd, $e0, $e6, $e8, $ea, $ec, $ef, $ce, $b2, $b8, $c0
15b29     C5 C8 CD D2 
15b2d     D9 DF E3 E9 
15b31     EC ED F0 F3 
15b35     F9 FD 00 04 | 	byte	$c5, $c8, $cd, $d2, $d9, $df, $e3, $e9, $ec, $ed, $f0, $f3, $f9, $fd, $00, $04
15b39     05 02 E7 D4 
15b3d     DA E1 E6 EB 
15b41     EF F1 F4 F7 
15b45     FD 01 05 08 | 	byte	$05, $02, $e7, $d4, $da, $e1, $e6, $eb, $ef, $f1, $f4, $f7, $fd, $01, $05, $08
15b49     09 0A 0C 0E 
15b4d     14 17 19 1C 
15b51     1C 1C 1D 1E 
15b55     21 23 24 26 | 	byte	$09, $0a, $0c, $0e, $14, $17, $19, $1c, $1c, $1c, $1d, $1e, $21, $23, $24, $26
15b59     25 24 24 24 
15b5d     27 27 26 21 
15b61     16 13 15 17 
15b65     19 1A 1B 1C | 	byte	$25, $24, $24, $24, $27, $27, $26, $21, $16, $13, $15, $17, $19, $1a, $1b, $1c
15b69     1B 1B 1B 1C 
15b6d     1F 1F 1F 20 
15b71     1F 1F 1F 1F 
15b75     20 1B 15 14 | 	byte	$1b, $1b, $1b, $1c, $1f, $1f, $1f, $20, $1f, $1f, $1f, $1f, $20, $1b, $15, $14
15b79     14 14 13 15 
15b7d     16 0B 00 FE 
15b81     01 03 04 06 
15b85     0A 0B FF DD | 	byte	$14, $14, $13, $15, $16, $0b, $00, $fe, $01, $03, $04, $06, $0a, $0b, $ff, $dd
15b89     DB DF E1 E6 
15b8d     EA ED EF F2 
15b91     F4 F6 F5 F0 
15b95     EC ED F0 F4 | 	byte	$db, $df, $e1, $e6, $ea, $ed, $ef, $f2, $f4, $f6, $f5, $f0, $ec, $ed, $f0, $f4
15b99     F7 F9 FA FA 
15b9d     E6 DD E0 E5 
15ba1     E9 ED DF B1 
15ba5     B0 B8 BE C4 | 	byte	$f7, $f9, $fa, $fa, $e6, $dd, $e0, $e5, $e9, $ed, $df, $b1, $b0, $b8, $be, $c4
15ba9     CA CF D3 DA 
15bad     DF E3 E6 EB 
15bb1     F0 F2 F6 FA 
15bb5     FD 00 01 FB | 	byte	$ca, $cf, $d3, $da, $df, $e3, $e6, $eb, $f0, $f2, $f6, $fa, $fd, $00, $01, $fb
15bb9     E0 D4 D9 E0 
15bbd     E4 E9 EB F1 
15bc1     F6 F8 FD 01 
15bc5     04 07 08 0C | 	byte	$e0, $d4, $d9, $e0, $e4, $e9, $eb, $f1, $f6, $f8, $fd, $01, $04, $07, $08, $0c
15bc9     0F 10 13 16 
15bcd     18 19 1A 1E 
15bd1     20 1F 22 23 
15bd5     24 24 23 26 | 	byte	$0f, $10, $13, $16, $18, $19, $1a, $1e, $20, $1f, $22, $23, $24, $24, $23, $26
15bd9     27 26 28 28 
15bdd     28 26 24 20 
15be1     17 15 17 18 
15be5     19 19 18 1B | 	byte	$27, $26, $28, $28, $28, $26, $24, $20, $17, $15, $17, $18, $19, $19, $18, $1b
15be9     1C 1C 1E 1E 
15bed     1E 1E 1C 20 
15bf1     20 1F 21 20 
15bf5     1B 14 10 12 | 	byte	$1c, $1c, $1e, $1e, $1e, $1e, $1c, $20, $20, $1f, $21, $20, $1b, $14, $10, $12
15bf9     14 14 14 07 
15bfd     FD FC FE 03 
15c01     05 07 09 0A 
15c05     0C 0C 0A E8 | 	byte	$14, $14, $14, $07, $fd, $fc, $fe, $03, $05, $07, $09, $0a, $0c, $0c, $0a, $e8
15c09     DC E1 E5 E7 
15c0d     EA EB EE F1 
15c11     EC E7 E7 EA 
15c15     ED F0 F2 F7 | 	byte	$dc, $e1, $e5, $e7, $ea, $eb, $ee, $f1, $ec, $e7, $e7, $ea, $ed, $f0, $f2, $f7
15c19     FA FE 00 F8 
15c1d     E3 DD E2 E8 
15c21     E8 BB AA B0 
15c25     B7 BC C3 CA | 	byte	$fa, $fe, $00, $f8, $e3, $dd, $e2, $e8, $e8, $bb, $aa, $b0, $b7, $bc, $c3, $ca
15c29     D0 D6 DA DE 
15c2d     E2 E6 EB F0 
15c31     F4 F8 FB FC 
15c35     FE F2 D4 D1 | 	byte	$d0, $d6, $da, $de, $e2, $e6, $eb, $f0, $f4, $f8, $fb, $fc, $fe, $f2, $d4, $d1
15c39     D8 DF E3 E6 
15c3d     EA EF F3 F8 
15c41     FD 01 04 05 
15c45     08 0C 0E 11 | 	byte	$d8, $df, $e3, $e6, $ea, $ef, $f3, $f8, $fd, $01, $04, $05, $08, $0c, $0e, $11
15c49     14 17 18 19 
15c4d     1A 1C 1D 1F 
15c51     22 24 23 23 
15c55     24 25 25 26 | 	byte	$14, $17, $18, $19, $1a, $1c, $1d, $1f, $22, $24, $23, $23, $24, $25, $25, $26
15c59     29 2A 29 28 
15c5d     27 28 25 1E 
15c61     17 17 17 17 
15c65     18 19 19 1A | 	byte	$29, $2a, $29, $28, $27, $28, $25, $1e, $17, $17, $17, $17, $18, $19, $19, $1a
15c69     1E 1F 1D 1C 
15c6d     1D 1E 1D 1E 
15c71     21 21 1F 1B 
15c75     14 10 0F 11 | 	byte	$1e, $1f, $1d, $1c, $1d, $1e, $1d, $1e, $21, $21, $1f, $1b, $14, $10, $0f, $11
15c79     12 06 FA FA 
15c7d     FF 02 03 05 
15c81     0B 0C 0B 0C 
15c85     0E 0F 0F FB | 	byte	$12, $06, $fa, $fa, $ff, $02, $03, $05, $0b, $0c, $0b, $0c, $0e, $0f, $0f, $fb
15c89     E3 E2 E4 E6 
15c8d     EA E7 DE DE 
15c91     E6 E9 EB ED 
15c95     F1 F4 F5 FA | 	byte	$e3, $e2, $e4, $e6, $ea, $e7, $de, $de, $e6, $e9, $eb, $ed, $f1, $f4, $f5, $fa
15c99     00 01 01 F3 
15c9d     E3 E1 E3 C7 
15ca1     A9 AB B1 B7 
15ca5     BF C4 C8 CF | 	byte	$00, $01, $01, $f3, $e3, $e1, $e3, $c7, $a9, $ab, $b1, $b7, $bf, $c4, $c8, $cf
15ca9     D7 DB DD E2 
15cad     E8 EB ED F3 
15cb1     F9 FB FB E7 
15cb5     CF CE D3 DC | 	byte	$d7, $db, $dd, $e2, $e8, $eb, $ed, $f3, $f9, $fb, $fb, $e7, $cf, $ce, $d3, $dc
15cb9     E3 E6 E9 EE 
15cbd     F4 F7 F9 FF 
15cc1     05 07 07 0C 
15cc5     10 11 12 17 | 	byte	$e3, $e6, $e9, $ee, $f4, $f7, $f9, $ff, $05, $07, $07, $0c, $10, $11, $12, $17
15cc9     1A 1A 19 1C 
15ccd     1F 1F 1E 22 
15cd1     26 25 24 26 
15cd5     27 26 26 29 | 	byte	$1a, $1a, $19, $1c, $1f, $1f, $1e, $22, $26, $25, $24, $26, $27, $26, $26, $29
15cd9     2B 2A 28 29 
15cdd     2A 28 23 1C 
15ce1     17 16 16 19 
15ce5     1A 19 19 1C | 	byte	$2b, $2a, $28, $29, $2a, $28, $23, $1c, $17, $16, $16, $19, $1a, $19, $19, $1c
15ce9     1E 1D 1C 1E 
15ced     1F 1D 1D 1F 
15cf1     20 1F 1B 15 
15cf5     10 0E 0B 01 | 	byte	$1e, $1d, $1c, $1e, $1f, $1d, $1d, $1f, $20, $1f, $1b, $15, $10, $0e, $0b, $01
15cf9     FB FB FE 02 
15cfd     04 04 06 0A 
15d01     0D 0C 0D 10 
15d05     10 0F 12 0E | 	byte	$fb, $fb, $fe, $02, $04, $04, $06, $0a, $0d, $0c, $0d, $10, $10, $0f, $12, $0e
15d09     E7 DF DF DB 
15d0d     D7 D9 E0 E4 
15d11     E9 EB EE F2 
15d15     F4 F5 FA FC | 	byte	$e7, $df, $df, $db, $d7, $d9, $e0, $e4, $e9, $eb, $ee, $f2, $f4, $f5, $fa, $fc
15d19     FF 01 02 F1 
15d1d     E1 D5 A6 A2 
15d21     AB B1 B8 BE 
15d25     C4 C8 CF D4 | 	byte	$ff, $01, $02, $f1, $e1, $d5, $a6, $a2, $ab, $b1, $b8, $be, $c4, $c8, $cf, $d4
15d29     DA DF E3 E7 
15d2d     EA ED F3 F5 
15d31     F6 DD CA CD 
15d35     D3 D9 DF E3 | 	byte	$da, $df, $e3, $e7, $ea, $ed, $f3, $f5, $f6, $dd, $ca, $cd, $d3, $d9, $df, $e3
15d39     E8 EF F3 F7 
15d3d     F9 FE 02 04 
15d41     08 0D 0F 11 
15d45     13 16 19 1A | 	byte	$e8, $ef, $f3, $f7, $f9, $fe, $02, $04, $08, $0d, $0f, $11, $13, $16, $19, $1a
15d49     1C 1E 1E 1F 
15d4d     20 22 24 23 
15d51     26 27 27 27 
15d55     26 29 29 28 | 	byte	$1c, $1e, $1e, $1f, $20, $22, $24, $23, $26, $27, $27, $27, $26, $29, $29, $28
15d59     2A 2C 2B 2A 
15d5d     28 28 23 19 
15d61     15 17 17 18 
15d65     18 1B 1B 1A | 	byte	$2a, $2c, $2b, $2a, $28, $28, $23, $19, $15, $17, $17, $18, $18, $1b, $1b, $1a
15d69     1D 1E 1D 1D 
15d6d     1C 1F 1D 1C 
15d71     1E 1D 16 0F 
15d75     07 FE F7 F8 | 	byte	$1d, $1e, $1d, $1d, $1c, $1f, $1d, $1c, $1e, $1d, $16, $0f, $07, $fe, $f7, $f8
15d79     FF 02 03 04 
15d7d     06 09 0A 0A 
15d81     0E 10 10 10 
15d85     12 14 13 0F | 	byte	$ff, $02, $03, $04, $06, $09, $0a, $0a, $0e, $10, $10, $10, $12, $14, $13, $0f
15d89     EA CF D0 D6 
15d8d     DC E1 E3 E6 
15d91     EC EF F1 F3 
15d95     F7 FA FB FD | 	byte	$ea, $cf, $d0, $d6, $dc, $e1, $e3, $e6, $ec, $ef, $f1, $f3, $f7, $fa, $fb, $fd
15d99     02 04 FF E7 
15d9d     B3 9C A1 A9 
15da1     B2 B8 BD C3 
15da5     CB CF D3 D9 | 	byte	$02, $04, $ff, $e7, $b3, $9c, $a1, $a9, $b2, $b8, $bd, $c3, $cb, $cf, $d3, $d9
15da9     DE E2 E5 E9 
15dad     F0 F2 EC CE 
15db1     C6 CC D0 D6 
15db5     DE E2 E6 EC | 	byte	$de, $e2, $e5, $e9, $f0, $f2, $ec, $ce, $c6, $cc, $d0, $d6, $de, $e2, $e6, $ec
15db9     F2 F5 F8 FC 
15dbd     02 05 07 0B 
15dc1     0F 11 12 15 
15dc5     1B 1B 1C 1F | 	byte	$f2, $f5, $f8, $fc, $02, $05, $07, $0b, $0f, $11, $12, $15, $1b, $1b, $1c, $1f
15dc9     20 20 20 22 
15dcd     26 25 26 27 
15dd1     27 28 27 2A 
15dd5     2C 2A 2A 2B | 	byte	$20, $20, $20, $22, $26, $25, $26, $27, $27, $28, $27, $2a, $2c, $2a, $2a, $2b
15dd9     2B 2B 29 2A 
15ddd     2A 28 24 19 
15de1     14 15 15 19 
15de5     1B 1A 1B 1B | 	byte	$2b, $2b, $29, $2a, $2a, $28, $24, $19, $14, $15, $15, $19, $1b, $1a, $1b, $1b
15de9     1B 1B 1B 1F 
15ded     20 1E 1E 1D 
15df1     1B 15 07 FA 
15df5     F6 F9 FD FF | 	byte	$1b, $1b, $1b, $1f, $20, $1e, $1e, $1d, $1b, $15, $07, $fa, $f6, $f9, $fd, $ff
15df9     00 03 04 0A 
15dfd     0B 0C 0E 0E 
15e01     0E 10 10 15 
15e05     14 0D 05 02 | 	byte	$00, $03, $04, $0a, $0b, $0c, $0e, $0e, $0e, $10, $10, $15, $14, $0d, $05, $02
15e09     F4 D4 D4 DD 
15e0d     E0 E4 E7 E9 
15e11     EB EF F2 F8 
15e15     FA FD FE FE | 	byte	$f4, $d4, $d4, $dd, $e0, $e4, $e7, $e9, $eb, $ef, $f2, $f8, $fa, $fd, $fe, $fe
15e19     FF 02 E2 A5 
15e1d     9B A3 AA AE 
15e21     B4 BB C3 CA 
15e25     CF D5 D8 DB | 	byte	$ff, $02, $e2, $a5, $9b, $a3, $aa, $ae, $b4, $bb, $c3, $ca, $cf, $d5, $d8, $db
15e29     DE E4 EA EF 
15e2d     E3 C8 C1 C6 
15e31     CB D2 DA E1 
15e35     E7 EB EE F1 | 	byte	$de, $e4, $ea, $ef, $e3, $c8, $c1, $c6, $cb, $d2, $da, $e1, $e7, $eb, $ee, $f1
15e39     F4 FA 00 05 
15e3d     09 0C 0D 0E 
15e41     0F 13 19 1C 
15e45     1E 20 1F 1F | 	byte	$f4, $fa, $00, $05, $09, $0c, $0d, $0e, $0f, $13, $19, $1c, $1e, $20, $1f, $1f
15e49     1F 21 25 27 
15e4d     28 28 27 26 
15e51     25 28 2C 2D 
15e55     2E 2D 2B 29 | 	byte	$1f, $21, $25, $27, $28, $28, $27, $26, $25, $28, $2c, $2d, $2e, $2d, $2b, $29
15e59     28 2A 2C 2B 
15e5d     2B 29 20 14 
15e61     11 15 1A 1B 
15e65     1C 1B 19 18 | 	byte	$28, $2a, $2c, $2b, $2b, $29, $20, $14, $11, $15, $1a, $1b, $1c, $1b, $19, $18
15e69     18 1B 1E 1F 
15e6d     1F 1D 1A 17 
15e71     0A F9 F5 FA 
15e75     FE FF FF FF | 	byte	$18, $1b, $1e, $1f, $1f, $1d, $1a, $17, $0a, $f9, $f5, $fa, $fe, $ff, $ff, $ff
15e79     01 07 0B 0E 
15e7d     0F 0E 0E 0D 
15e81     0E 12 0F 08 
15e85     05 05 06 06 | 	byte	$01, $07, $0b, $0e, $0f, $0e, $0e, $0d, $0e, $12, $0f, $08, $05, $05, $06, $06
15e89     03 E3 DB E2 
15e8d     E4 E5 E6 E8 
15e91     EB F3 F7 FB 
15e95     FD FC FC FD | 	byte	$03, $e3, $db, $e2, $e4, $e5, $e6, $e8, $eb, $f3, $f7, $fb, $fd, $fc, $fc, $fd
15e99     F8 C8 B0 A2 
15e9d     A3 A8 AC B2 
15ea1     B8 C3 CB D1 
15ea5     D4 D7 DA DD | 	byte	$f8, $c8, $b0, $a2, $a3, $a8, $ac, $b2, $b8, $c3, $cb, $d1, $d4, $d7, $da, $dd
15ea9     E2 E9 D7 C0 
15ead     BF C4 C9 CE 
15eb1     D3 DE E6 EC 
15eb5     EE F0 F3 F6 | 	byte	$e2, $e9, $d7, $c0, $bf, $c4, $c9, $ce, $d3, $de, $e6, $ec, $ee, $f0, $f3, $f6
15eb9     FB 03 08 0C 
15ebd     0D 0E 0F 10 
15ec1     14 1A 1F 21 
15ec5     20 20 20 20 | 	byte	$fb, $03, $08, $0c, $0d, $0e, $0f, $10, $14, $1a, $1f, $21, $20, $20, $20, $20
15ec9     23 27 2A 2B 
15ecd     29 28 27 26 
15ed1     29 2D 30 2F 
15ed5     2D 2B 29 28 | 	byte	$23, $27, $2a, $2b, $29, $28, $27, $26, $29, $2d, $30, $2f, $2d, $2b, $29, $28
15ed9     2A 2C 2E 2C 
15edd     29 25 1C 12 
15ee1     13 18 1C 1C 
15ee5     1A 18 17 18 | 	byte	$2a, $2c, $2e, $2c, $29, $25, $1c, $12, $13, $18, $1c, $1c, $1a, $18, $17, $18
15ee9     1B 1D 1F 1D 
15eed     1B 17 0B FD 
15ef1     F7 F9 FC FF 
15ef5     FF FF 00 03 | 	byte	$1b, $1d, $1f, $1d, $1b, $17, $0b, $fd, $f7, $f9, $fc, $ff, $ff, $ff, $00, $03
15ef9     08 0C 10 10 
15efd     0F 0E 0D 0B 
15f01     05 04 07 09 
15f05     09 08 09 0C | 	byte	$08, $0c, $10, $10, $0f, $0e, $0d, $0b, $05, $04, $07, $09, $09, $08, $09, $0c
15f09     10 F7 E0 E1 
15f0d     E3 E5 E7 EC 
15f11     F1 F5 F9 FA 
15f15     FA FA FA D4 | 	byte	$10, $f7, $e0, $e1, $e3, $e5, $e7, $ec, $f1, $f5, $f9, $fa, $fa, $fa, $fa, $d4
15f19     BB BF B1 A3 
15f1d     A5 AA B0 BA 
15f21     C1 C9 CE D2 
15f25     D5 D8 DD E0 | 	byte	$bb, $bf, $b1, $a3, $a5, $aa, $b0, $ba, $c1, $c9, $ce, $d2, $d5, $d8, $dd, $e0
15f29     C7 B7 BC C3 
15f2d     C7 CB D1 D9 
15f31     E1 E6 EC F0 
15f35     F2 F6 F9 00 | 	byte	$c7, $b7, $bc, $c3, $c7, $cb, $d1, $d9, $e1, $e6, $ec, $f0, $f2, $f6, $f9, $00
15f39     05 08 0D 0E 
15f3d     0F 10 13 18 
15f41     1C 1D 20 21 
15f45     21 21 22 27 | 	byte	$05, $08, $0d, $0e, $0f, $10, $13, $18, $1c, $1d, $20, $21, $21, $21, $22, $27
15f49     29 29 29 29 
15f4d     28 27 29 2D 
15f51     2D 2D 2E 2D 
15f55     2B 2A 2A 2D | 	byte	$29, $29, $29, $29, $28, $27, $29, $2d, $2d, $2d, $2e, $2d, $2b, $2a, $2a, $2d
15f59     2C 2B 2B 29 
15f5d     27 24 1D 18 
15f61     16 17 19 19 
15f65     17 17 19 1C | 	byte	$2c, $2b, $2b, $29, $27, $24, $1d, $18, $16, $17, $19, $19, $17, $17, $19, $1c
15f69     1B 19 1B 17 
15f6d     0B FF FF FF 
15f71     FA FA FE 00 
15f75     01 03 07 0C | 	byte	$1b, $19, $1b, $17, $0b, $ff, $ff, $ff, $fa, $fa, $fe, $00, $01, $03, $07, $0c
15f79     0C 0B 0E 0F 
15f7d     0C 03 01 04 
15f81     06 07 0B 0C 
15f85     0C 0E 12 15 | 	byte	$0c, $0b, $0e, $0f, $0c, $03, $01, $04, $06, $07, $0b, $0c, $0c, $0e, $12, $15
15f89     14 06 E5 E0 
15f8d     E3 E7 ED F1 
15f91     F1 F2 F6 F9 
15f95     F9 E7 BE BB | 	byte	$14, $06, $e5, $e0, $e3, $e7, $ed, $f1, $f1, $f2, $f6, $f9, $f9, $e7, $be, $bb
15f99     BF BF AE A5 
15f9d     AA B1 BB C0 
15fa1     C3 C7 CF D4 
15fa5     D7 D5 BD B1 | 	byte	$bf, $bf, $ae, $a5, $aa, $b1, $bb, $c0, $c3, $c7, $cf, $d4, $d7, $d5, $bd, $b1
15fa9     B6 BB C4 CB 
15fad     CF D8 E0 E4 
15fb1     E6 EA F1 F5 
15fb5     F8 FE 04 07 | 	byte	$b6, $bb, $c4, $cb, $cf, $d8, $e0, $e4, $e6, $ea, $f1, $f5, $f8, $fe, $04, $07
15fb9     07 09 0E 11 
15fbd     12 17 1B 1C 
15fc1     1C 1C 21 23 
15fc5     22 26 29 29 | 	byte	$07, $09, $0e, $11, $12, $17, $1b, $1c, $1c, $1c, $21, $23, $22, $26, $29, $29
15fc9     27 26 28 29 
15fcd     29 2D 2E 2C 
15fd1     2B 29 2C 2D 
15fd5     2C 2D 2D 2C | 	byte	$27, $26, $28, $29, $29, $2d, $2e, $2c, $2b, $29, $2c, $2d, $2c, $2d, $2d, $2c
15fd9     29 27 28 28 
15fdd     28 28 1E 15 
15fe1     12 13 17 18 
15fe5     18 1B 1A 19 | 	byte	$29, $27, $28, $28, $28, $28, $1e, $15, $12, $13, $17, $18, $18, $1b, $1a, $19
15fe9     17 11 09 00 
15fed     02 06 03 FC 
15ff1     F9 FB 01 04 
15ff5     06 0B 0B 0B | 	byte	$17, $11, $09, $00, $02, $06, $03, $fc, $f9, $fb, $01, $04, $06, $0b, $0b, $0b
15ff9     0B 09 06 FF 
15ffd     01 06 07 08 
16001     08 0A 0F 11 
16005     15 16 16 15 | 	byte	$0b, $09, $06, $ff, $01, $06, $07, $08, $08, $0a, $0f, $11, $15, $16, $16, $15
16009     14 11 ED E1 
1600d     E9 EC EE EE 
16011     EF F1 F6 F2 
16015     C3 B7 BC C0 | 	byte	$14, $11, $ed, $e1, $e9, $ec, $ee, $ee, $ef, $f1, $f6, $f2, $c3, $b7, $bc, $c0
16019     C2 BB AB AA 
1601d     B3 B9 BD C1 
16021     C5 CA D2 C6 
16025     AF AD B3 B9 | 	byte	$c2, $bb, $ab, $aa, $b3, $b9, $bd, $c1, $c5, $ca, $d2, $c6, $af, $ad, $b3, $b9
16029     BE C4 CD D5 
1602d     DE E2 E5 E8 
16031     EC F0 F8 FE 
16035     03 05 07 09 | 	byte	$be, $c4, $cd, $d5, $de, $e2, $e5, $e8, $ec, $f0, $f8, $fe, $03, $05, $07, $09
16039     0A 0D 13 19 
1603d     1C 1C 1D 1D 
16041     1D 1F 24 29 
16045     29 29 28 28 | 	byte	$0a, $0d, $13, $19, $1c, $1c, $1d, $1d, $1d, $1f, $24, $29, $29, $29, $28, $28
16049     27 28 2B 2F 
1604d     2F 2D 2C 2B 
16051     29 2A 2E 30 
16055     2F 2C 2B 28 | 	byte	$27, $28, $2b, $2f, $2f, $2d, $2c, $2b, $29, $2a, $2e, $30, $2f, $2c, $2b, $28
16059     27 26 2A 2D 
1605d     2B 24 18 12 
16061     12 13 18 1C 
16065     1A 18 16 10 | 	byte	$27, $26, $2a, $2d, $2b, $24, $18, $12, $12, $13, $18, $1c, $1a, $18, $16, $10
16069     02 FC 04 0A 
1606d     08 03 FC FA 
16071     FC FF 07 0B 
16075     0A 0A 09 03 | 	byte	$02, $fc, $04, $0a, $08, $03, $fc, $fa, $fc, $ff, $07, $0b, $0a, $0a, $09, $03
16079     FB FB 05 09 
1607d     09 09 0A 0B 
16081     0C 0F 17 18 
16085     17 16 16 16 | 	byte	$fb, $fb, $05, $09, $09, $09, $0a, $0b, $0c, $0f, $17, $18, $17, $16, $16, $16
16089     16 13 F2 E8 
1608d     EA EB EC EE 
16091     F0 E7 BE B5 
16095     B9 BC C0 C5 | 	byte	$16, $13, $f2, $e8, $ea, $eb, $ec, $ee, $f0, $e7, $be, $b5, $b9, $bc, $c0, $c5
16099     C4 B2 AF B4 
1609d     B8 BC C1 C6 
160a1     C3 AA A7 AC 
160a5     B1 B7 BE C4 | 	byte	$c4, $b2, $af, $b4, $b8, $bc, $c1, $c6, $c3, $aa, $a7, $ac, $b1, $b7, $be, $c4
160a9     CA D3 DD E1 
160ad     E4 E7 EC F0 
160b1     F4 FC 03 05 
160b5     06 08 0B 0D | 	byte	$ca, $d3, $dd, $e1, $e4, $e7, $ec, $f0, $f4, $fc, $03, $05, $06, $08, $0b, $0d
160b9     10 17 1C 1C 
160bd     1C 1D 1F 1F 
160c1     21 27 2A 29 
160c5     28 28 28 29 | 	byte	$10, $17, $1c, $1c, $1c, $1d, $1f, $1f, $21, $27, $2a, $29, $28, $28, $28, $29
160c9     2B 2F 2F 2D 
160cd     2B 2B 2B 2B 
160d1     2B 2E 2F 2C 
160d5     2A 29 29 28 | 	byte	$2b, $2f, $2f, $2d, $2b, $2b, $2b, $2b, $2b, $2e, $2f, $2c, $2a, $29, $29, $28
160d9     2A 2C 2C 29 
160dd     25 1D 13 11 
160e1     15 18 19 17 
160e5     13 08 FD FE | 	byte	$2a, $2c, $2c, $29, $25, $1d, $13, $11, $15, $18, $19, $17, $13, $08, $fd, $fe
160e9     04 08 09 07 
160ed     02 FD FD 00 
160f1     05 08 0A 07 
160f5     01 FA FB FF | 	byte	$04, $08, $09, $07, $02, $fd, $fd, $00, $05, $08, $0a, $07, $01, $fa, $fb, $ff
160f9     05 09 0A 0B 
160fd     0C 0E 0F 11 
16101     15 17 18 17 
16105     17 18 19 1B | 	byte	$05, $09, $0a, $0b, $0c, $0e, $0f, $11, $15, $17, $18, $17, $17, $18, $19, $1b
16109     1D 06 E7 E6 
1610d     E9 EC EE CE 
16111     AE B2 B8 BB 
16115     C0 C4 C9 CA | 	byte	$1d, $06, $e7, $e6, $e9, $ec, $ee, $ce, $ae, $b2, $b8, $bb, $c0, $c4, $c9, $ca
16119     B6 AF B4 BA 
1611d     BF BA 9E 9B 
16121     A3 AB B3 B9 
16125     BF C6 CD D5 | 	byte	$b6, $af, $b4, $ba, $bf, $ba, $9e, $9b, $a3, $ab, $b3, $b9, $bf, $c6, $cd, $d5
16129     DB E0 E5 E9 
1612d     ED F2 F7 FC 
16131     00 04 07 09 
16135     0C 0F 13 17 | 	byte	$db, $e0, $e5, $e9, $ed, $f2, $f7, $fc, $00, $04, $07, $09, $0c, $0f, $13, $17
16139     18 1B 1D 1E 
1613d     1F 21 24 26 
16141     27 29 29 29 
16145     2A 2B 2E 2E | 	byte	$18, $1b, $1d, $1e, $1f, $21, $24, $26, $27, $29, $29, $29, $2a, $2b, $2e, $2e
16149     2D 2D 2D 2C 
1614d     2C 2D 2D 2C 
16151     2B 2C 2C 2A 
16155     2A 2B 2C 2A | 	byte	$2d, $2d, $2d, $2c, $2c, $2d, $2d, $2c, $2b, $2c, $2c, $2a, $2a, $2b, $2c, $2a
16159     28 29 28 25 
1615d     1C 14 12 13 
16161     13 12 08 FD 
16165     FE 03 05 06 | 	byte	$28, $29, $28, $25, $1c, $14, $12, $13, $13, $12, $08, $fd, $fe, $03, $05, $06
16169     07 09 08 02 
1616d     00 03 05 05 
16171     01 FB F9 FC 
16175     00 05 07 08 | 	byte	$07, $09, $08, $02, $00, $03, $05, $05, $01, $fb, $f9, $fc, $00, $05, $07, $08
16179     0A 0D 0F 11 
1617d     12 15 15 16 
16181     17 19 19 1A 
16185     1C 1D 1C 1C | 	byte	$0a, $0d, $0f, $11, $12, $15, $15, $16, $17, $19, $19, $1a, $1c, $1d, $1c, $1c
16189     0A E7 E5 EA 
1618d     CF AA AB B1 
16191     B7 BC C2 C6 
16195     CC CF C3 B0 | 	byte	$0a, $e7, $e5, $ea, $cf, $aa, $ab, $b1, $b7, $bc, $c2, $c6, $cc, $cf, $c3, $b0
16199     B2 B8 A5 92 
1619d     97 A0 A6 AE 
161a1     B5 BD C5 CB 
161a5     D3 D8 DC E1 | 	byte	$b2, $b8, $a5, $92, $97, $a0, $a6, $ae, $b5, $bd, $c5, $cb, $d3, $d8, $dc, $e1
161a9     E7 ED F2 F6 
161ad     FB FD 00 03 
161b1     08 0C 0F 13 
161b5     16 17 19 1A | 	byte	$e7, $ed, $f2, $f6, $fb, $fd, $00, $03, $08, $0c, $0f, $13, $16, $17, $19, $1a
161b9     1D 20 21 25 
161bd     26 25 26 27 
161c1     29 2B 2B 2E 
161c5     2E 2D 2D 2C | 	byte	$1d, $20, $21, $25, $26, $25, $26, $27, $29, $2b, $2b, $2e, $2e, $2d, $2d, $2c
161c9     2D 2E 2D 2D 
161cd     2C 2A 2A 2A 
161d1     2B 2C 2C 2D 
161d5     2B 28 27 26 | 	byte	$2d, $2e, $2d, $2d, $2c, $2a, $2a, $2a, $2b, $2c, $2c, $2d, $2b, $28, $27, $26
161d9     27 26 22 18 
161dd     10 10 0B FF 
161e1     FC 00 03 05 
161e5     05 06 08 09 | 	byte	$27, $26, $22, $18, $10, $10, $0b, $ff, $fc, $00, $03, $05, $05, $06, $08, $09
161e9     09 03 02 02 
161ed     FE F7 F5 F9 
161f1     FF 02 07 08 
161f5     09 0A 0D 0F | 	byte	$09, $03, $02, $02, $fe, $f7, $f5, $f9, $ff, $02, $07, $08, $09, $0a, $0d, $0f
161f9     13 14 17 17 
161fd     16 17 17 19 
16201     1C 1D 1E 1D 
16205     1C 1B 1B FC | 	byte	$13, $14, $17, $17, $16, $17, $17, $19, $1c, $1d, $1e, $1d, $1c, $1b, $1b, $fc
16209     E5 BA A4 A8 
1620d     AE B2 B7 BF 
16211     C5 CA CE D1 
16215     D1 BE AF 97 | 	byte	$e5, $ba, $a4, $a8, $ae, $b2, $b7, $bf, $c5, $ca, $ce, $d1, $d1, $be, $af, $97
16219     8C 94 9C A2 
1621d     A9 B0 B7 C1 
16221     C9 D0 D5 D9 
16225     DE E3 E8 EF | 	byte	$8c, $94, $9c, $a2, $a9, $b0, $b7, $c1, $c9, $d0, $d5, $d9, $de, $e3, $e8, $ef
16229     F5 F9 FB FD 
1622d     00 03 07 0D 
16231     12 15 16 17 
16235     18 1A 1C 21 | 	byte	$f5, $f9, $fb, $fd, $00, $03, $07, $0d, $12, $15, $16, $17, $18, $1a, $1c, $21
16239     25 25 25 26 
1623d     25 26 27 2B 
16241     2F 2E 2E 2C 
16245     2C 2C 2D 2F | 	byte	$25, $25, $25, $26, $25, $26, $27, $2b, $2f, $2e, $2e, $2c, $2c, $2c, $2d, $2f
16249     2F 2E 2D 2B 
1624d     29 29 2A 2E 
16251     2F 2D 2B 29 
16255     27 25 25 28 | 	byte	$2f, $2e, $2d, $2b, $29, $29, $2a, $2e, $2f, $2d, $2b, $29, $27, $25, $25, $28
16259     25 1A 0C 00 
1625d     F7 FA 00 06 
16261     07 08 08 08 
16265     08 0A 0A 08 | 	byte	$25, $1a, $0c, $00, $f7, $fa, $00, $06, $07, $08, $08, $08, $08, $0a, $0a, $08
16269     00 F7 F4 F5 
1626d     F8 FB 03 09 
16271     0A 0B 0D 0C 
16275     0D 10 15 19 | 	byte	$00, $f7, $f4, $f5, $f8, $fb, $03, $09, $0a, $0b, $0d, $0c, $0d, $10, $15, $19
16279     19 18 18 17 
1627d     17 19 1E 20 
16281     1F 1F 1D 1C 
16285     1A 17 C7 A0 | 	byte	$19, $18, $18, $17, $17, $19, $1e, $20, $1f, $1f, $1d, $1c, $1a, $17, $c7, $a0
16289     A6 AC B0 B3 
1628d     B7 BE C7 CC 
16291     CF D3 D5 D6 
16295     BD 90 8B 93 | 	byte	$a6, $ac, $b0, $b3, $b7, $be, $c7, $cc, $cf, $d3, $d5, $d6, $bd, $90, $8b, $93
16299     9B A1 A7 AD 
1629d     B3 BE C9 CF 
162a1     D4 DA DD E0 
162a5     E5 ED F4 F8 | 	byte	$9b, $a1, $a7, $ad, $b3, $be, $c9, $cf, $d4, $da, $dd, $e0, $e5, $ed, $f4, $f8
162a9     FB FE FF 00 
162ad     04 0C 12 14 
162b1     16 18 18 17 
162b5     1A 20 24 25 | 	byte	$fb, $fe, $ff, $00, $04, $0c, $12, $14, $16, $18, $18, $17, $1a, $20, $24, $25
162b9     26 25 24 23 
162bd     26 2B 2E 2E 
162c1     2E 2D 2B 2A 
162c5     2B 2E 2F 2E | 	byte	$26, $25, $24, $23, $26, $2b, $2e, $2e, $2e, $2d, $2b, $2a, $2b, $2e, $2f, $2e
162c9     2D 2B 28 27 
162cd     29 2D 2E 2D 
162d1     2C 29 26 24 
162d5     26 27 25 13 | 	byte	$2d, $2b, $28, $27, $29, $2d, $2e, $2d, $2c, $29, $26, $24, $26, $27, $25, $13
162d9     FD F8 FA FD 
162dd     02 07 0A 0C 
162e1     0B 0B 09 0B 
162e5     0E 0A FE F5 | 	byte	$fd, $f8, $fa, $fd, $02, $07, $0a, $0c, $0b, $0b, $09, $0b, $0e, $0a, $fe, $f5
162e9     F7 F9 F9 FD 
162ed     03 09 0C 0F 
162f1     0F 0E 0E 10 
162f5     14 18 1B 1B | 	byte	$f7, $f9, $f9, $fd, $03, $09, $0c, $0f, $0f, $0e, $0e, $10, $14, $18, $1b, $1b
162f9     1A 18 17 1A 
162fd     1D 1F 21 21 
16301     1F 1C 19 F1 
16305     D6 BC A9 AC | 	byte	$1a, $18, $17, $1a, $1d, $1f, $21, $21, $1f, $1c, $19, $f1, $d6, $bc, $a9, $ac
16309     B0 B3 B6 BE 
1630d     C4 CB D1 D3 
16311     D5 D6 C5 AF 
16315     A1 94 97 9D | 	byte	$b0, $b3, $b6, $be, $c4, $cb, $d1, $d3, $d5, $d6, $c5, $af, $a1, $94, $97, $9d
16319     A3 A8 B0 BB 
1631d     C2 CB D2 D7 
16321     DA DD E3 EA 
16325     EE F5 FA FC | 	byte	$a3, $a8, $b0, $bb, $c2, $cb, $d2, $d7, $da, $dd, $e3, $ea, $ee, $f5, $fa, $fc
16329     FE 00 05 0A 
1632d     0D 13 17 17 
16331     17 17 1B 1E 
16335     1F 24 26 25 | 	byte	$fe, $00, $05, $0a, $0d, $13, $17, $17, $17, $17, $1b, $1e, $1f, $24, $26, $25
16339     24 23 27 29 
1633d     29 2E 2F 2E 
16341     2C 2A 2C 2C 
16345     2C 2E 2D 2B | 	byte	$24, $23, $27, $29, $29, $2e, $2f, $2e, $2c, $2a, $2c, $2c, $2c, $2e, $2d, $2b
16349     29 28 2B 2A 
1634d     2A 2D 2C 2A 
16351     27 26 27 22 
16355     15 0C 03 FC | 	byte	$29, $28, $2b, $2a, $2a, $2d, $2c, $2a, $27, $26, $27, $22, $15, $0c, $03, $fc
16359     FC 00 04 05 
1635d     07 0C 0D 0C 
16361     0B 0E 0E 06 
16365     FF FC F9 F9 | 	byte	$fc, $00, $04, $05, $07, $0c, $0d, $0c, $0b, $0e, $0e, $06, $ff, $fc, $f9, $f9
16369     FB 00 04 06 
1636d     08 0E 10 0F 
16371     0F 13 16 16 
16375     17 1A 1B 1A | 	byte	$fb, $00, $04, $06, $08, $0e, $10, $0f, $0f, $13, $16, $16, $17, $1a, $1b, $1a
16379     19 1D 1E 1E 
1637d     1E 20 21 1F 
16381     13 E1 D8 DC 
16385     D7 B5 AC B1 | 	byte	$19, $1d, $1e, $1e, $1e, $20, $21, $1f, $13, $e1, $d8, $dc, $d7, $b5, $ac, $b1
16389     B6 BE C2 C6 
1638d     C9 D0 D4 D5 
16391     CC B4 AF B4 
16395     B2 A0 9C A2 | 	byte	$b6, $be, $c2, $c6, $c9, $d0, $d4, $d5, $cc, $b4, $af, $b4, $b2, $a0, $9c, $a2
16399     AB B4 BB C0 
1639d     C6 CF D5 D9 
163a1     DE E6 EA ED 
163a5     F0 F7 FB FD | 	byte	$ab, $b4, $bb, $c0, $c6, $cf, $d5, $d9, $de, $e6, $ea, $ed, $f0, $f7, $fb, $fd
163a9     02 08 0A 0C 
163ad     0E 14 16 16 
163b1     1A 1E 1E 1F 
163b5     1F 23 24 24 | 	byte	$02, $08, $0a, $0c, $0e, $14, $16, $16, $1a, $1e, $1e, $1f, $1f, $23, $24, $24
163b9     28 2A 2A 29 
163bd     28 2C 2D 2C 
163c1     2D 2E 2D 2B 
163c5     29 2B 2A 2A | 	byte	$28, $2a, $2a, $29, $28, $2c, $2d, $2c, $2d, $2e, $2d, $2b, $29, $2b, $2a, $2a
163c9     2D 2D 2B 29 
163cd     27 2A 2A 29 
163d1     26 19 10 0D 
163d5     0B 06 FF 01 | 	byte	$2d, $2d, $2b, $29, $27, $2a, $2a, $29, $26, $19, $10, $0d, $0b, $06, $ff, $01
163d9     07 09 09 08 
163dd     08 0D 0F 10 
163e1     0F 08 02 01 
163e5     00 FE FC 00 | 	byte	$07, $09, $09, $08, $08, $0d, $0f, $10, $0f, $08, $02, $01, $00, $fe, $fc, $00
163e9     06 08 09 09 
163ed     09 0F 11 15 
163f1     18 18 17 16 
163f5     16 19 1B 1F | 	byte	$06, $08, $09, $09, $09, $0f, $11, $15, $18, $18, $17, $16, $16, $19, $1b, $1f
163f9     21 20 1F 1D 
163fd     1B 1D 13 E4 
16401     DB DF E0 E0 
16405     DA B7 B2 BB | 	byte	$21, $20, $1f, $1d, $1b, $1d, $13, $e4, $db, $df, $e0, $e0, $da, $b7, $b2, $bb
16409     C1 C5 C7 C8 
1640d     CB D2 D6 C5 
16411     B0 B0 B5 B8 
16415     BC B4 A6 AA | 	byte	$c1, $c5, $c7, $c8, $cb, $d2, $d6, $c5, $b0, $b0, $b5, $b8, $bc, $b4, $a6, $aa
16419     B3 B8 BD C1 
1641d     C6 CF D7 E0 
16421     E5 E8 EA EC 
16425     EF F5 FD 04 | 	byte	$b3, $b8, $bd, $c1, $c6, $cf, $d7, $e0, $e5, $e8, $ea, $ec, $ef, $f5, $fd, $04
16429     07 09 09 0A 
1642d     0B 11 17 1C 
16431     1E 1D 1D 1C 
16435     1C 20 27 2A | 	byte	$07, $09, $09, $0a, $0b, $11, $17, $1c, $1e, $1d, $1d, $1c, $1c, $20, $27, $2a
16439     2B 29 27 26 
1643d     26 28 2D 30 
16441     2F 2C 2A 27 
16445     26 28 2E 30 | 	byte	$2b, $29, $27, $26, $26, $28, $2d, $30, $2f, $2c, $2a, $27, $26, $28, $2e, $30
16449     2E 2B 28 26 
1644d     24 25 22 17 
16451     13 12 11 0F 
16455     08 02 05 0B | 	byte	$2e, $2b, $28, $26, $24, $25, $22, $17, $13, $12, $11, $0f, $08, $02, $05, $0b
16459     0B 0B 09 08 
1645d     09 0D 11 0B 
16461     05 04 04 05 
16465     03 02 05 08 | 	byte	$0b, $0b, $09, $08, $09, $0d, $11, $0b, $05, $04, $04, $05, $03, $02, $05, $08
16469     0A 0A 09 09 
1646d     0A 10 17 1A 
16471     1A 18 17 16 
16475     15 1B 21 23 | 	byte	$0a, $0a, $09, $09, $0a, $10, $17, $1a, $1a, $18, $17, $16, $15, $1b, $21, $23
16479     21 1F 1C 1A 
1647d     18 EC DB E1 
16481     E3 E3 E3 E3 
16485     E4 C8 BA C0 | 	byte	$21, $1f, $1c, $1a, $18, $ec, $db, $e1, $e3, $e3, $e3, $e3, $e4, $c8, $ba, $c0
16489     C3 C5 C7 C9 
1648d     CC D3 C4 AF 
16491     AF B4 B8 BB 
16495     C0 CB C5 B3 | 	byte	$c3, $c5, $c7, $c9, $cc, $d3, $c4, $af, $af, $b4, $b8, $bb, $c0, $cb, $c5, $b3
16499     B2 B7 BB C0 
1649d     C6 D0 DA E1 
164a1     E4 E6 E8 EB 
164a5     EF F8 00 05 | 	byte	$b2, $b7, $bb, $c0, $c6, $d0, $da, $e1, $e4, $e6, $e8, $eb, $ef, $f8, $00, $05
164a9     06 07 08 08 
164ad     0B 13 19 1D 
164b1     1C 1B 1B 1B 
164b5     1D 23 28 2B | 	byte	$06, $07, $08, $08, $0b, $13, $19, $1d, $1c, $1b, $1b, $1b, $1d, $23, $28, $2b
164b9     2A 28 26 25 
164bd     26 2A 2E 2F 
164c1     2E 2B 29 27 
164c5     28 2B 2E 2F | 	byte	$2a, $28, $26, $25, $26, $2a, $2e, $2f, $2e, $2b, $29, $27, $28, $2b, $2e, $2f
164c9     2D 2A 27 22 
164cd     19 12 14 17 
164d1     17 15 13 10 
164d5     0C 06 09 0C | 	byte	$2d, $2a, $27, $22, $19, $12, $14, $17, $17, $15, $13, $10, $0c, $06, $09, $0c
164d9     0C 0B 0B 0A 
164dd     0B 08 05 05 
164e1     07 07 07 07 
164e5     0B 0A 09 09 | 	byte	$0c, $0b, $0b, $0a, $0b, $08, $05, $05, $07, $07, $07, $07, $0b, $0a, $09, $09
164e9     0A 0B 0B 0B 
164ed     0F 13 18 19 
164f1     1A 18 17 17 
164f5     1A 1C 21 21 | 	byte	$0a, $0b, $0b, $0b, $0f, $13, $18, $19, $1a, $18, $17, $17, $1a, $1c, $21, $21
164f9     20 1F 1C 11 
164fd     E2 D8 E1 E5 
16501     E6 E6 E7 E9 
16505     EE ED CA BD | 	byte	$20, $1f, $1c, $11, $e2, $d8, $e1, $e5, $e6, $e6, $e7, $e9, $ee, $ed, $ca, $bd
16509     C2 C4 C6 CA 
1650d     CF C6 B0 AB 
16511     B1 B6 B9 BF 
16515     C7 CC D5 D4 | 	byte	$c2, $c4, $c6, $ca, $cf, $c6, $b0, $ab, $b1, $b6, $b9, $bf, $c7, $cc, $d5, $d4
16519     BC B4 B8 BF 
1651d     C7 CD D6 DC 
16521     E0 E4 E6 EB 
16525     F2 F6 FD 01 | 	byte	$bc, $b4, $b8, $bf, $c7, $cd, $d6, $dc, $e0, $e4, $e6, $eb, $f2, $f6, $fd, $01
16529     03 05 06 0A 
1652d     0E 11 16 18 
16531     19 1A 1A 1D 
16535     20 22 26 27 | 	byte	$03, $05, $06, $0a, $0e, $11, $16, $18, $19, $1a, $1a, $1d, $20, $22, $26, $27
16539     28 27 26 27 
1653d     28 29 2B 2C 
16541     2B 2B 29 2B 
16545     2C 2C 2C 2C | 	byte	$28, $27, $26, $27, $28, $29, $2b, $2c, $2b, $2b, $29, $2b, $2c, $2c, $2c, $2c
16549     2A 28 1C 13 
1654d     12 13 16 17 
16551     17 17 17 18 
16555     12 09 08 0C | 	byte	$2a, $28, $1c, $13, $12, $13, $16, $17, $17, $17, $17, $18, $12, $09, $08, $0c
16559     0C 0C 0C 0D 
1655d     07 01 02 06 
16561     08 0A 0B 0F 
16565     10 11 0E 09 | 	byte	$0c, $0c, $0c, $0d, $07, $01, $02, $06, $08, $0a, $0b, $0f, $10, $11, $0e, $09
16569     07 09 0C 0F 
1656d     11 13 14 17 
16571     18 18 19 1C 
16575     1D 1D 1E 20 | 	byte	$07, $09, $0c, $0f, $11, $13, $14, $17, $18, $18, $19, $1c, $1d, $1d, $1e, $20
16579     1F 1E 18 E9 
1657d     D8 DD E1 E5 
16581     E6 E8 EB EF 
16585     F1 F3 F4 D0 | 	byte	$1f, $1e, $18, $e9, $d8, $dd, $e1, $e5, $e6, $e8, $eb, $ef, $f1, $f3, $f4, $d0
16589     BE C1 C6 CC 
1658d     CF C0 A9 A8 
16591     AE B4 BB C3 
16595     C7 CC D1 D7 | 	byte	$be, $c1, $c6, $cc, $cf, $c0, $a9, $a8, $ae, $b4, $bb, $c3, $c7, $cc, $d1, $d7
16599     DB D6 C0 BC 
1659d     C2 C8 CE D4 
165a1     D9 DE E4 EB 
165a5     EE F2 F7 FA | 	byte	$db, $d6, $c0, $bc, $c2, $c8, $ce, $d4, $d9, $de, $e4, $eb, $ee, $f2, $f7, $fa
165a9     FE 00 04 0A 
165ad     0C 0E 11 13 
165b1     16 17 1A 1E 
165b5     1F 20 22 22 | 	byte	$fe, $00, $04, $0a, $0c, $0e, $11, $13, $16, $17, $1a, $1e, $1f, $20, $22, $22
165b9     25 25 26 27 
165bd     27 27 28 27 
165c1     29 28 2A 2D 
165c5     2C 2B 2C 2B | 	byte	$25, $25, $26, $27, $27, $27, $28, $27, $29, $28, $2a, $2d, $2c, $2b, $2c, $2b
165c9     26 1A 11 15 
165cd     16 16 16 16 
165d1     18 18 19 1D 
165d5     1A 11 09 08 | 	byte	$26, $1a, $11, $15, $16, $16, $16, $16, $18, $18, $19, $1d, $1a, $11, $09, $08
165d9     0C 0E 0D 0A 
165dd     03 00 04 05 
165e1     08 0B 0D 12 
165e5     13 13 14 11 | 	byte	$0c, $0e, $0d, $0a, $03, $00, $04, $05, $08, $0b, $0d, $12, $13, $13, $14, $11
165e9     0B 09 0B 10 
165ed     12 12 14 14 
165f1     16 18 19 1C 
165f5     1D 1D 1E 1D | 	byte	$0b, $09, $0b, $10, $12, $12, $14, $14, $16, $18, $19, $1c, $1d, $1d, $1e, $1d
165f9     1D 1F 08 DC 
165fd     DA DF E3 E4 
16601     E6 EA ED F1 
16605     F3 F5 F8 F8 | 	byte	$1d, $1f, $08, $dc, $da, $df, $e3, $e4, $e6, $ea, $ed, $f1, $f3, $f5, $f8, $f8
16609     F0 C7 C1 C8 
1660d     CD C5 A9 A2 
16611     A8 B1 B8 BF 
16615     C5 CA CF D3 | 	byte	$f0, $c7, $c1, $c8, $cd, $c5, $a9, $a2, $a8, $b1, $b8, $bf, $c5, $ca, $cf, $d3
16619     D6 DC E1 E3 
1661d     CE C1 C5 CB 
16621     D0 D7 DD E3 
16625     E8 ED F1 F5 | 	byte	$d6, $dc, $e1, $e3, $ce, $c1, $c5, $cb, $d0, $d7, $dd, $e3, $e8, $ed, $f1, $f5
16629     F7 FB 01 05 
1662d     07 0A 0E 0F 
16631     10 13 18 1B 
16635     1C 1D 20 21 | 	byte	$f7, $fb, $01, $05, $07, $0a, $0e, $0f, $10, $13, $18, $1b, $1c, $1d, $20, $21
16639     20 22 24 25 
1663d     25 25 27 27 
16641     26 26 29 2B 
16645     2A 2A 2B 28 | 	byte	$20, $22, $24, $25, $25, $25, $27, $27, $26, $26, $29, $2b, $2a, $2a, $2b, $28
16649     1A 11 13 16 
1664d     16 17 18 19 
16651     18 18 1C 1F 
16655     1D 1B 14 0C | 	byte	$1a, $11, $13, $16, $16, $17, $18, $19, $18, $18, $1c, $1f, $1d, $1b, $14, $0c
16659     0A 0B 0D 09 
1665d     01 00 04 07 
16661     08 09 0E 12 
16665     12 13 16 18 | 	byte	$0a, $0b, $0d, $09, $01, $00, $04, $07, $08, $09, $0e, $12, $12, $13, $16, $18
16669     17 11 0C 0E 
1666d     0F 0F 12 15 
16671     16 15 18 1D 
16675     1C 1B 1D 1F | 	byte	$17, $11, $0c, $0e, $0f, $0f, $12, $15, $16, $15, $18, $1d, $1c, $1b, $1d, $1f
16679     1F 1D 00 DE 
1667d     DC DE E2 E7 
16681     E9 EA ED F3 
16685     F4 F4 F7 FB | 	byte	$1f, $1d, $00, $de, $dc, $de, $e2, $e7, $e9, $ea, $ed, $f3, $f4, $f4, $f7, $fb
16689     FB FA F4 CE 
1668d     C6 C8 B7 A2 
16691     A3 A9 B0 BA 
16695     C0 C3 C8 CF | 	byte	$fb, $fa, $f4, $ce, $c6, $c8, $b7, $a2, $a3, $a9, $b0, $ba, $c0, $c3, $c8, $cf
16699     D5 D7 DB E2 
1669d     E6 E7 E2 CB 
166a1     C6 CA D0 DA 
166a5     DF E2 E6 EE | 	byte	$d5, $d7, $db, $e2, $e6, $e7, $e2, $cb, $c6, $ca, $d0, $da, $df, $e2, $e6, $ee
166a9     F3 F5 F8 FE 
166ad     02 03 05 0A 
166b1     0E 0E 11 16 
166b5     19 19 19 1D | 	byte	$f3, $f5, $f8, $fe, $02, $03, $05, $0a, $0e, $0e, $11, $16, $19, $19, $19, $1d
166b9     20 1F 20 23 
166bd     24 23 23 25 
166c1     27 26 26 29 
166c5     2A 29 26 1F | 	byte	$20, $1f, $20, $23, $24, $23, $23, $25, $27, $26, $26, $29, $2a, $29, $26, $1f
166c9     15 12 14 17 
166cd     19 18 17 19 
166d1     1B 1B 1B 1E 
166d5     20 1F 1D 19 | 	byte	$15, $12, $14, $17, $19, $18, $17, $19, $1b, $1b, $1b, $1e, $20, $1f, $1d, $19
166d9     10 0B 0B 06 
166dd     02 01 03 06 
166e1     09 0B 0C 10 
166e5     13 14 14 16 | 	byte	$10, $0b, $0b, $06, $02, $01, $03, $06, $09, $0b, $0c, $10, $13, $14, $14, $16
166e9     18 19 19 16 
166ed     10 0E 0E 11 
166f1     14 15 17 19 
166f5     1B 1B 1B 1C | 	byte	$18, $19, $19, $16, $10, $0e, $0e, $11, $14, $15, $17, $19, $1b, $1b, $1b, $1c
166f9     1D 1E FE DA 
166fd     DB E0 E2 E5 
16701     E9 EC EF F2 
16705     F4 F6 F7 F9 | 	byte	$1d, $1e, $fe, $da, $db, $e0, $e2, $e5, $e9, $ec, $ef, $f2, $f4, $f6, $f7, $f9
16709     FB FD FF 01 
1670d     F7 CE C2 A8 
16711     9E A4 AD B3 
16715     B8 BF C3 C9 | 	byte	$fb, $fd, $ff, $01, $f7, $ce, $c2, $a8, $9e, $a4, $ad, $b3, $b8, $bf, $c3, $c9
16719     CE D3 D9 DD 
1671d     E0 E5 E8 EC 
16721     EF DF CD CE 
16725     D3 D9 DE E3 | 	byte	$ce, $d3, $d9, $dd, $e0, $e5, $e8, $ec, $ef, $df, $cd, $ce, $d3, $d9, $de, $e3
16729     E8 EC F2 F7 
1672d     F9 FD 00 04 
16731     07 09 0E 11 
16735     12 15 17 1A | 	byte	$e8, $ec, $f2, $f7, $f9, $fd, $00, $04, $07, $09, $0e, $11, $12, $15, $17, $1a
16739     1B 1C 1E 20 
1673d     1F 21 22 23 
16741     24 23 27 28 
16745     27 27 23 16 | 	byte	$1b, $1c, $1e, $20, $1f, $21, $22, $23, $24, $23, $27, $28, $27, $27, $23, $16
16749     11 12 17 19 
1674d     19 19 1A 1B 
16751     1B 1A 1E 20 
16755     1F 1E 20 21 | 	byte	$11, $12, $17, $19, $19, $19, $1a, $1b, $1b, $1a, $1e, $20, $1f, $1e, $20, $21
16759     1E 13 0B 06 
1675d     FF FF 03 07 
16761     09 0A 0E 11 
16765     11 12 15 17 | 	byte	$1e, $13, $0b, $06, $ff, $ff, $03, $07, $09, $0a, $0e, $11, $11, $12, $15, $17
16769     18 18 1B 1D 
1676d     1C 17 11 0F 
16771     11 12 15 18 
16775     18 18 1A 1D | 	byte	$18, $18, $1b, $1d, $1c, $17, $11, $0f, $11, $12, $15, $18, $18, $18, $1a, $1d
16779     1D 18 E7 D8 
1677d     DC DE E3 E8 
16781     EB EC F0 F4 
16785     F5 F6 F9 FD | 	byte	$1d, $18, $e7, $d8, $dc, $de, $e3, $e8, $eb, $ec, $f0, $f4, $f5, $f6, $f9, $fd
16789     FE FE 01 03 
1678d     04 02 E1 AE 
16791     9C 9F A8 AF 
16795     B4 B9 BF C8 | 	byte	$fe, $fe, $01, $03, $04, $02, $e1, $ae, $9c, $9f, $a8, $af, $b4, $b9, $bf, $c8
16799     CD D0 D6 DA 
1679d     DE E1 E5 EC 
167a1     EF F1 F5 EC 
167a5     D3 CE D4 DD | 	byte	$cd, $d0, $d6, $da, $de, $e1, $e5, $ec, $ef, $f1, $f5, $ec, $d3, $ce, $d4, $dd
167a9     E2 E5 EC F0 
167ad     F4 F6 FA 00 
167b1     03 05 0A 0C 
167b5     0E 0F 11 17 | 	byte	$e2, $e5, $ec, $f0, $f4, $f6, $fa, $00, $03, $05, $0a, $0c, $0e, $0f, $11, $17
167b9     19 19 1B 1B 
167bd     1D 1D 1E 22 
167c1     23 23 25 25 
167c5     25 1F 13 10 | 	byte	$19, $19, $1b, $1b, $1d, $1d, $1e, $22, $23, $23, $25, $25, $25, $1f, $13, $10
167c9     12 15 18 18 
167cd     19 1A 1A 1C 
167d1     1D 1D 1F 1F 
167d5     1F 1F 1F 23 | 	byte	$12, $15, $18, $18, $19, $1a, $1a, $1c, $1d, $1d, $1f, $1f, $1f, $1f, $1f, $23
167d9     23 1F 14 02 
167dd     FB FE 01 07 
167e1     0A 0D 10 11 
167e5     11 12 13 17 | 	byte	$23, $1f, $14, $02, $fb, $fe, $01, $07, $0a, $0d, $10, $11, $11, $12, $13, $17
167e9     19 1B 1C 1C 
167ed     1C 1D 1B 18 
167f1     12 11 14 15 
167f5     15 16 16 1A | 	byte	$19, $1b, $1c, $1c, $1c, $1d, $1b, $18, $12, $11, $14, $15, $15, $16, $16, $1a
167f9     1A F0 D8 DA 
167fd     DD E1 E4 E9 
16801     ED F1 F4 F5 
16805     F6 F7 F9 FD | 	byte	$1a, $f0, $d8, $da, $dd, $e1, $e4, $e9, $ed, $f1, $f4, $f5, $f6, $f7, $f9, $fd
16809     00 03 04 04 
1680d     04 05 02 D0 
16811     9C A0 A7 AD 
16815     B2 B8 BE C5 | 	byte	$00, $03, $04, $04, $04, $05, $02, $d0, $9c, $a0, $a7, $ad, $b2, $b8, $be, $c5
16819     CC D2 D6 D8 
1681d     DB E0 E3 E9 
16821     EF F4 F6 F8 
16825     F9 E8 D2 D3 | 	byte	$cc, $d2, $d6, $d8, $db, $e0, $e3, $e9, $ef, $f4, $f6, $f8, $f9, $e8, $d2, $d3
16829     DC E3 E7 EA 
1682d     ED F0 F5 F9 
16831     FF 04 06 08 
16835     09 0B 0E 12 | 	byte	$dc, $e3, $e7, $ea, $ed, $f0, $f5, $f9, $ff, $04, $06, $08, $09, $0b, $0e, $12
16839     17 19 19 1A 
1683d     1A 1A 1C 1E 
16841     23 26 25 23 
16845     1A 0D 0B 10 | 	byte	$17, $19, $19, $1a, $1a, $1a, $1c, $1e, $23, $26, $25, $23, $1a, $0d, $0b, $10
16849     16 1A 1A 1A 
1684d     1A 1A 1B 1D 
16851     20 22 21 21 
16855     20 1F 1F 22 | 	byte	$16, $1a, $1a, $1a, $1a, $1a, $1b, $1d, $20, $22, $21, $21, $20, $1f, $1f, $22
16859     26 24 16 01 
1685d     FA FD 01 06 
16861     0C 10 11 12 
16865     13 13 14 17 | 	byte	$26, $24, $16, $01, $fa, $fd, $01, $06, $0c, $10, $11, $12, $13, $13, $14, $17
16869     1D 1E 1D 1D 
1686d     1D 1C 1C 1D 
16871     1D 16 12 12 
16875     13 12 14 10 | 	byte	$1d, $1e, $1d, $1d, $1d, $1c, $1c, $1d, $1d, $16, $12, $12, $13, $12, $14, $10
16879     E4 D7 DB DE 
1687d     E1 E2 E5 EA 
16881     F2 F5 F6 F7 
16885     F8 F8 FA FE | 	byte	$e4, $d7, $db, $de, $e1, $e2, $e5, $ea, $f2, $f5, $f6, $f7, $f8, $f8, $fa, $fe
16889     04 06 06 07 
1688d     06 05 F4 D8 
16891     B1 A2 A8 AE 
16895     B4 B7 BD C5 | 	byte	$04, $06, $06, $07, $06, $05, $f4, $d8, $b1, $a2, $a8, $ae, $b4, $b7, $bd, $c5
16899     CF D3 D7 DA 
1689d     DD DF E2 EA 
168a1     F1 F5 F7 F9 
168a5     FB FB F3 DD | 	byte	$cf, $d3, $d7, $da, $dd, $df, $e2, $ea, $f1, $f5, $f7, $f9, $fb, $fb, $f3, $dd
168a9     DA DF E3 E7 
168ad     EA EC EF F7 
168b1     FF 01 03 06 
168b5     07 08 0A 10 | 	byte	$da, $df, $e3, $e7, $ea, $ec, $ef, $f7, $ff, $01, $03, $06, $07, $08, $0a, $10
168b9     14 16 18 19 
168bd     18 18 18 1F 
168c1     22 23 1D 11 
168c5     0A 0B 0E 14 | 	byte	$14, $16, $18, $19, $18, $18, $18, $1f, $22, $23, $1d, $11, $0a, $0b, $0e, $14
168c9     18 1B 1C 1C 
168cd     1C 1B 1B 20 
168d1     22 22 23 23 
168d5     21 1F 20 23 | 	byte	$18, $1b, $1c, $1c, $1c, $1b, $1b, $20, $22, $22, $23, $23, $21, $1f, $20, $23
168d9     23 1C 0F 02 
168dd     FD FF 03 09 
168e1     0E 11 13 14 
168e5     14 13 16 1A | 	byte	$23, $1c, $0f, $02, $fd, $ff, $03, $09, $0e, $11, $13, $14, $14, $13, $16, $1a
168e9     1C 1E 1F 1F 
168ed     1D 1C 1E 21 
168f1     21 1D 15 12 
168f5     12 12 F3 D3 | 	byte	$1c, $1e, $1f, $1f, $1d, $1c, $1e, $21, $21, $1d, $15, $12, $12, $12, $f3, $d3
168f9     D6 DD E1 E4 
168fd     E5 E6 EB F0 
16901     F4 F8 FA FB 
16905     FB FB 00 02 | 	byte	$d6, $dd, $e1, $e4, $e5, $e6, $eb, $f0, $f4, $f8, $fa, $fb, $fb, $fb, $00, $02
16909     05 08 09 09 
1690d     08 F7 DD D8 
16911     C5 A9 AC B2 
16915     B6 BB C3 C9 | 	byte	$05, $08, $09, $09, $08, $f7, $dd, $d8, $c5, $a9, $ac, $b2, $b6, $bb, $c3, $c9
16919     D0 D6 DA DC 
1691d     DF E3 E9 EC 
16921     F0 F6 F9 FA 
16925     FB FD 02 FC | 	byte	$d0, $d6, $da, $dc, $df, $e3, $e9, $ec, $f0, $f6, $f9, $fa, $fb, $fd, $02, $fc
16929     E5 DD E0 E4 
1692d     E7 EB F2 F4 
16931     F9 FF 02 03 
16935     04 07 0B 0C | 	byte	$e5, $dd, $e0, $e4, $e7, $eb, $f2, $f4, $f9, $ff, $02, $03, $04, $07, $0b, $0c
16939     10 14 15 15 
1693d     15 18 1B 1A 
16941     16 0D 09 0B 
16945     0D 12 15 15 | 	byte	$10, $14, $15, $15, $15, $18, $1b, $1a, $16, $0d, $09, $0b, $0d, $12, $15, $15
16949     18 1C 1D 1C 
1694d     1C 1F 20 1F 
16951     21 23 22 21 
16955     20 23 23 1C | 	byte	$18, $1c, $1d, $1c, $1c, $1f, $20, $1f, $21, $23, $22, $21, $20, $23, $23, $1c
16959     16 13 0D 02 
1695d     FF 06 08 09 
16961     0D 12 13 13 
16965     15 19 19 19 | 	byte	$16, $13, $0d, $02, $ff, $06, $08, $09, $0d, $12, $13, $13, $15, $19, $19, $19
16969     1B 1F 1E 1D 
1696d     1F 22 21 1F 
16971     21 20 17 10 
16975     F2 D1 D1 D6 | 	byte	$1b, $1f, $1e, $1d, $1f, $22, $21, $1f, $21, $20, $17, $10, $f2, $d1, $d1, $d6
16979     DC E2 E4 E6 
1697d     EB F0 F1 F2 
16981     F6 FB FC FD 
16985     01 03 03 04 | 	byte	$dc, $e2, $e4, $e6, $eb, $f0, $f1, $f2, $f6, $fb, $fc, $fd, $01, $03, $03, $04
16989     07 0A 0A 08 
1698d     F5 DD DB DE 
16991     C7 AD AF B6 
16995     BE C4 C7 CB | 	byte	$07, $0a, $0a, $08, $f5, $dd, $db, $de, $c7, $ad, $af, $b6, $be, $c4, $c7, $cb
16999     D2 D8 DC DF 
1699d     E6 EA EB EE 
169a1     F2 F7 F9 FC 
169a5     01 03 04 05 | 	byte	$d2, $d8, $dc, $df, $e6, $ea, $eb, $ee, $f2, $f7, $f9, $fc, $01, $03, $04, $05
169a9     F7 E0 DE E4 
169ad     EB ED F0 F3 
169b1     F8 FD FF 02 
169b5     06 07 09 0A | 	byte	$f7, $e0, $de, $e4, $eb, $ed, $f0, $f3, $f8, $fd, $ff, $02, $06, $07, $09, $0a
169b9     0D 11 12 17 
169bd     19 16 0B 02 
169c1     05 0A 0D 12 
169c5     15 16 16 17 | 	byte	$0d, $11, $12, $17, $19, $16, $0b, $02, $05, $0a, $0d, $12, $15, $16, $16, $17
169c9     19 1C 1E 21 
169cd     22 21 21 20 
169d1     21 22 23 26 
169d5     26 21 17 10 | 	byte	$19, $1c, $1e, $21, $22, $21, $21, $20, $21, $22, $23, $26, $26, $21, $17, $10
169d9     11 12 0A 06 
169dd     08 0A 0B 0C 
169e1     0F 12 16 1A 
169e5     1C 1B 1B 1A | 	byte	$11, $12, $0a, $06, $08, $0a, $0b, $0c, $0f, $12, $16, $1a, $1c, $1b, $1b, $1a
169e9     1C 1D 20 23 
169ed     23 22 21 1F 
169f1     20 1B E3 D0 
169f5     D3 D7 DA DC | 	byte	$1c, $1d, $20, $23, $23, $22, $21, $1f, $20, $1b, $e3, $d0, $d3, $d7, $da, $dc
169f9     E1 E6 EE F2 
169fd     F4 F4 F5 F6 
16a01     F9 FE 03 06 
16a05     06 06 06 06 | 	byte	$e1, $e6, $ee, $f2, $f4, $f4, $f5, $f6, $f9, $fe, $03, $06, $06, $06, $06, $06
16a09     08 0C 01 E4 
16a0d     DE E0 E3 E1 
16a11     B8 B0 BB C1 
16a15     C6 C9 CD CF | 	byte	$08, $0c, $01, $e4, $de, $e0, $e3, $e1, $b8, $b0, $bb, $c1, $c6, $c9, $cd, $cf
16a19     D5 DD E3 E8 
16a1d     EA ED EE F0 
16a21     F4 FC 01 04 
16a25     06 07 06 06 | 	byte	$d5, $dd, $e3, $e8, $ea, $ed, $ee, $f0, $f4, $fc, $01, $04, $06, $07, $06, $06
16a29     FD E8 E4 E8 
16a2d     EB ED EF F1 
16a31     F6 FD 02 04 
16a35     05 06 06 07 | 	byte	$fd, $e8, $e4, $e8, $eb, $ed, $ef, $f1, $f6, $fd, $02, $04, $05, $06, $06, $07
16a39     0D 13 14 0B 
16a3d     01 00 02 04 
16a41     0A 11 15 16 
16a45     16 17 16 16 | 	byte	$0d, $13, $14, $0b, $01, $00, $02, $04, $0a, $11, $15, $16, $16, $17, $16, $16
16a49     1C 20 23 23 
16a4d     23 21 1F 1F 
16a51     22 26 27 22 
16a55     16 11 10 12 | 	byte	$1c, $20, $23, $23, $23, $21, $1f, $1f, $22, $26, $27, $22, $16, $11, $10, $12
16a59     14 0E 09 0A 
16a5d     0C 0C 0B 0E 
16a61     14 19 1D 1D 
16a65     1C 1B 19 1B | 	byte	$14, $0e, $09, $0a, $0c, $0c, $0b, $0e, $14, $19, $1d, $1d, $1c, $1b, $19, $1b
16a69     20 23 24 24 
16a6d     22 20 1C F7 
16a71     DD DE DB D9 
16a75     DB DD DF E6 | 	byte	$20, $23, $24, $24, $22, $20, $1c, $f7, $dd, $de, $db, $d9, $db, $dd, $df, $e6
16a79     ED F2 F6 F7 
16a7d     F7 F7 F8 FE 
16a81     03 07 09 0A 
16a85     08 07 07 0C | 	byte	$ed, $f2, $f6, $f7, $f7, $f7, $f8, $fe, $03, $07, $09, $0a, $08, $07, $07, $0c
16a89     FD E3 E1 00 
16a8d     00 00 00 32 
16a91     2B E6 ED FE 
16a95     C7 D5 E7 CB | 	byte	$fd, $e3, $e1, $00, $00, $00, $00, $32, $2b, $e6, $ed, $fe, $c7, $d5, $e7, $cb
16a99     A4 B0 C1 AB 
16a9d     9F 8C 85 82 
16aa1     82 AE DB AC 
16aa5     8F 99 AE A0 | 	byte	$a4, $b0, $c1, $ab, $9f, $8c, $85, $82, $82, $ae, $db, $ac, $8f, $99, $ae, $a0
16aa9     A7 EB EA EF 
16aad     26 39 1E 3F 
16ab1     4B 20 1A 53 
16ab5     5F 2E 32 5F | 	byte	$a7, $eb, $ea, $ef, $26, $39, $1e, $3f, $4b, $20, $1a, $53, $5f, $2e, $32, $5f
16ab9     6F 6E 71 75 
16abd     77 77 6A 5E 
16ac1     62 3E 29 2C 
16ac5     F7 DC F8 E3 | 	byte	$6f, $6e, $71, $75, $77, $77, $6a, $5e, $62, $3e, $29, $2c, $f7, $dc, $f8, $e3
16ac9     E7 E4 C4 CC 
16acd     BC 9E 91 8D 
16ad1     89 84 8A AA 
16ad5     A9 92 89 93 | 	byte	$e7, $e4, $c4, $cc, $bc, $9e, $91, $8d, $89, $84, $8a, $aa, $a9, $92, $89, $93
16ad9     C4 E1 F9 F1 
16add     E4 F6 E5 F3 
16ae1     11 24 3B 54 
16ae5     56 52 49 34 | 	byte	$c4, $e1, $f9, $f1, $e4, $f6, $e5, $f3, $11, $24, $3b, $54, $56, $52, $49, $34
16ae9     46 54 5B 4C 
16aed     44 58 60 59 
16af1     5E 64 58 40 
16af5     35 49 4E 24 | 	byte	$46, $54, $5b, $4c, $44, $58, $60, $59, $5e, $64, $58, $40, $35, $49, $4e, $24
16af9     DE CB F4 FD 
16afd     D2 AD A9 D1 
16b01     E3 CB B4 A3 
16b05     98 A2 BE C7 | 	byte	$de, $cb, $f4, $fd, $d2, $ad, $a9, $d1, $e3, $cb, $b4, $a3, $98, $a2, $be, $c7
16b09     AF 9D 9A B5 
16b0d     C1 BB D4 D6 
16b11     CB DE E6 F0 
16b15     01 FD 08 12 | 	byte	$af, $9d, $9a, $b5, $c1, $bb, $d4, $d6, $cb, $de, $e6, $f0, $01, $fd, $08, $12
16b19     F8 F7 0F 18 
16b1d     27 49 60 6A 
16b21     6F 72 76 79 
16b25     7B 7B 7B 70 | 	byte	$f8, $f7, $0f, $18, $27, $49, $60, $6a, $6f, $72, $76, $79, $7b, $7b, $7b, $70
16b29     4D 3F 3B 21 
16b2d     FD 00 04 FC 
16b31     09 16 FE E0 
16b35     EE F9 E5 CA | 	byte	$4d, $3f, $3b, $21, $fd, $00, $04, $fc, $09, $16, $fe, $e0, $ee, $f9, $e5, $ca
16b39     C1 CA C9 B7 
16b3d     A6 9A 96 95 
16b41     94 94 9A A4 
16b45     A8 AF C1 E0 | 	byte	$c1, $ca, $c9, $b7, $a6, $9a, $96, $95, $94, $94, $9a, $a4, $a8, $af, $c1, $e0
16b49     EA D8 C9 DF 
16b4d     09 2C 36 38 
16b51     34 3C 4A 54 
16b55     5F 64 62 65 | 	byte	$ea, $d8, $c9, $df, $09, $2c, $36, $38, $34, $3c, $4a, $54, $5f, $64, $62, $65
16b59     6B 71 74 75 
16b5d     73 6D 62 5D 
16b61     5D 4C 31 1B 
16b65     1C 1B 00 DC | 	byte	$6b, $71, $74, $75, $73, $6d, $62, $5d, $5d, $4c, $31, $1b, $1c, $1b, $00, $dc
16b69     C7 C7 CA C1 
16b6d     B2 A1 95 9E 
16b71     BC C9 BE B7 
16b75     B6 B5 B5 AF | 	byte	$c7, $c7, $ca, $c1, $b2, $a1, $95, $9e, $bc, $c9, $be, $b7, $b6, $b5, $b5, $af
16b79     A7 A2 A8 BA 
16b7d     BE C0 CC D6 
16b81     DA ED 00 05 
16b85     0D 15 17 23 | 	byte	$a7, $a2, $a8, $ba, $be, $c0, $cc, $d6, $da, $ed, $00, $05, $0d, $15, $17, $23
16b89     36 44 51 56 
16b8d     58 5D 63 69 
16b91     6B 60 54 4C 
16b95     49 47 49 4E | 	byte	$36, $44, $51, $56, $58, $5d, $63, $69, $6b, $60, $54, $4c, $49, $47, $49, $4e
16b99     52 48 34 23 
16b9d     18 13 0D 0B 
16ba1     FC E0 C9 B2 
16ba5     A4 A2 AE B7 | 	byte	$52, $48, $34, $23, $18, $13, $0d, $0b, $fc, $e0, $c9, $b2, $a4, $a2, $ae, $b7
16ba9     B6 B5 B6 B2 
16bad     AA A1 9B 98 
16bb1     9F AC B6 B9 
16bb5     BD C9 D1 DF | 	byte	$b6, $b5, $b6, $b2, $aa, $a1, $9b, $98, $9f, $ac, $b6, $b9, $bd, $c9, $d1, $df
16bb9     F3 01 02 FE 
16bbd     FE FE 00 0C 
16bc1     1B 2E 3B 46 
16bc5     4F 53 56 56 | 	byte	$f3, $01, $02, $fe, $fe, $fe, $00, $0c, $1b, $2e, $3b, $46, $4f, $53, $56, $56
16bc9     57 5C 60 64 
16bcd     67 65 59 4E 
16bd1     44 34 2C 2C 
16bd5     2F 33 2F 20 | 	byte	$57, $5c, $60, $64, $67, $65, $59, $4e, $44, $34, $2c, $2c, $2f, $33, $2f, $20
16bd9     FD DD CF C3 
16bdd     BD B8 B2 AC 
16be1     AD B1 B5 B5 
16be5     B0 AA A3 9E | 	byte	$fd, $dd, $cf, $c3, $bd, $b8, $b2, $ac, $ad, $b1, $b5, $b5, $b0, $aa, $a3, $9e
16be9     9C 9C 9D 9F 
16bed     A2 A4 A9 B8 
16bf1     CE E5 FA 0A 
16bf5     14 1C 2A 31 | 	byte	$9c, $9c, $9d, $9f, $a2, $a4, $a9, $b8, $ce, $e5, $fa, $0a, $14, $1c, $2a, $31
16bf9     33 37 3C 44 
16bfd     4F 5A 62 66 
16c01     61 5B 58 57 
16c05     55 54 56 58 | 	byte	$33, $37, $3c, $44, $4f, $5a, $62, $66, $61, $5b, $58, $57, $55, $54, $56, $58
16c09     5A 59 50 3D 
16c0d     2B 14 FF F0 
16c11     E8 E3 E8 E7 
16c15     E0 D4 CD C6 | 	byte	$5a, $59, $50, $3d, $2b, $14, $ff, $f0, $e8, $e3, $e8, $e7, $e0, $d4, $cd, $c6
16c19     C2 BC B7 B4 
16c1d     B1 B1 B4 BA 
16c21     BF C0 BB B6 
16c25     B2 AF B1 B5 | 	byte	$c2, $bc, $b7, $b4, $b1, $b1, $b4, $ba, $bf, $c0, $bb, $b6, $b2, $af, $b1, $b5
16c29     B8 B9 C0 CB 
16c2d     DE F1 FF 0B 
16c31     16 23 30 3C 
16c35     46 4D 55 5A | 	byte	$b8, $b9, $c0, $cb, $de, $f1, $ff, $0b, $16, $23, $30, $3c, $46, $4d, $55, $5a
16c39     5C 5D 5F 61 
16c3d     62 63 63 63 
16c41     63 61 5E 5B 
16c45     53 41 2F 1D | 	byte	$5c, $5d, $5f, $61, $62, $63, $63, $63, $63, $61, $5e, $5b, $53, $41, $2f, $1d
16c49     0F 07 02 FB 
16c4d     F0 E5 D9 D0 
16c51     C6 C0 C6 CD 
16c55     D1 CE CA C5 | 	byte	$0f, $07, $02, $fb, $f0, $e5, $d9, $d0, $c6, $c0, $c6, $cd, $d1, $ce, $ca, $c5
16c59     C1 BE B9 B4 
16c5d     AF AA A7 A5 
16c61     A4 A7 AF BB 
16c65     C8 D3 DE EC | 	byte	$c1, $be, $b9, $b4, $af, $aa, $a7, $a5, $a4, $a7, $af, $bb, $c8, $d3, $de, $ec
16c69     F9 01 08 11 
16c6d     1A 25 2B 2E 
16c71     32 38 3C 42 
16c75     43 43 42 42 | 	byte	$f9, $01, $08, $11, $1a, $25, $2b, $2e, $32, $38, $3c, $42, $43, $43, $42, $42
16c79     43 46 49 4C 
16c7d     4C 4A 47 41 
16c81     3A 35 30 29 
16c85     1A 05 F1 DC | 	byte	$43, $46, $49, $4c, $4c, $4a, $47, $41, $3a, $35, $30, $29, $1a, $05, $f1, $dc
16c89     D0 C5 BD B8 
16c8d     B6 B6 B6 B7 
16c91     B6 B4 B6 B9 
16c95     BF C7 C9 CC | 	byte	$d0, $c5, $bd, $b8, $b6, $b6, $b6, $b7, $b6, $b4, $b6, $b9, $bf, $c7, $c9, $cc
16c99     CC C9 C6 C1 
16c9d     BE BC BF C5 
16ca1     C9 D0 DC ED 
16ca5     FA 09 15 25 | 	byte	$cc, $c9, $c6, $c1, $be, $bc, $bf, $c5, $c9, $d0, $dc, $ed, $fa, $09, $15, $25
16ca9     33 40 4B 54 
16cad     5C 61 65 63 
16cb1     5E 57 51 4C 
16cb5     49 49 4A 4C | 	byte	$33, $40, $4b, $54, $5c, $61, $65, $63, $5e, $57, $51, $4c, $49, $49, $4a, $4c
16cb9     4D 4D 49 40 
16cbd     36 2D 21 18 
16cc1     0C FD ED DB 
16cc5     D1 C5 BD B7 | 	byte	$4d, $4d, $49, $40, $36, $2d, $21, $18, $0c, $fd, $ed, $db, $d1, $c5, $bd, $b7
16cc9     B7 BE C5 C9 
16ccd     CA CA C8 C8 
16cd1     C7 C5 C5 C7 
16cd5     C7 C8 CB CD | 	byte	$b7, $be, $c5, $c9, $ca, $ca, $c8, $c8, $c7, $c5, $c5, $c7, $c7, $c8, $cb, $cd
16cd9     CD CF D1 D5 
16cdd     DB E1 E3 E5 
16ce1     EA F5 01 0A 
16ce5     0F 17 1D 26 | 	byte	$cd, $cf, $d1, $d5, $db, $e1, $e3, $e5, $ea, $f5, $01, $0a, $0f, $17, $1d, $26
16ce9     2D 33 39 3E 
16ced     43 48 4C 4F 
16cf1     52 54 54 55 
16cf5     53 4F 4A 46 | 	byte	$2d, $33, $39, $3e, $43, $48, $4c, $4f, $52, $54, $54, $55, $53, $4f, $4a, $46
16cf9     3C 31 2A 20 
16cfd     13 05 F8 E9 
16d01     DF DA D9 D7 
16d05     DA DE DE DB | 	byte	$3c, $31, $2a, $20, $13, $05, $f8, $e9, $df, $da, $d9, $d7, $da, $de, $de, $db
16d09     D5 CF C7 C3 
16d0d     BD B9 B6 B5 
16d11     B4 B3 B3 B4 
16d15     B6 C0 C7 CF | 	byte	$d5, $cf, $c7, $c3, $bd, $b9, $b6, $b5, $b4, $b3, $b3, $b4, $b6, $c0, $c7, $cf
16d19     D9 E0 E7 EE 
16d1d     F5 FF 07 0C 
16d21     11 18 1F 29 
16d25     2E 32 35 37 | 	byte	$d9, $e0, $e7, $ee, $f5, $ff, $07, $0c, $11, $18, $1f, $29, $2e, $32, $35, $37
16d29     38 3A 3D 40 
16d2d     42 42 41 40 
16d31     40 41 3F 3E 
16d35     3B 35 2D 27 | 	byte	$38, $3a, $3d, $40, $42, $42, $41, $40, $40, $41, $3f, $3e, $3b, $35, $2d, $27
16d39     1C 13 09 01 
16d3d     F9 F1 E9 E5 
16d41     E2 E1 E0 DE 
16d45     DE DF DF DD | 	byte	$1c, $13, $09, $01, $f9, $f1, $e9, $e5, $e2, $e1, $e0, $de, $de, $df, $df, $dd
16d49     D7 D2 CF CD 
16d4d     CE D3 D8 DA 
16d51     DA D7 D3 CE 
16d55     CA C6 C7 CE | 	byte	$d7, $d2, $cf, $cd, $ce, $d3, $d8, $da, $da, $d7, $d3, $ce, $ca, $c6, $c7, $ce
16d59     D7 DF E8 F1 
16d5d     F8 FF 06 0C 
16d61     10 14 1A 1D 
16d65     21 28 2B 2E | 	byte	$d7, $df, $e8, $f1, $f8, $ff, $06, $0c, $10, $14, $1a, $1d, $21, $28, $2b, $2e
16d69     31 34 36 38 
16d6d     3B 3D 3D 3B 
16d71     3A 39 36 2F 
16d75     28 1C 13 0E | 	byte	$31, $34, $36, $38, $3b, $3d, $3d, $3b, $3a, $39, $36, $2f, $28, $1c, $13, $0e
16d79     0A 09 07 02 
16d7d     FB F2 E9 E3 
16d81     DF DC DC DE 
16d85     E0 E1 E3 E4 | 	byte	$0a, $09, $07, $02, $fb, $f2, $e9, $e3, $df, $dc, $dc, $de, $e0, $e1, $e3, $e4
16d89     E2 DE DC DD 
16d8d     DC DC DC DB 
16d91     D9 D6 D2 D1 
16d95     D1 D1 D5 DB | 	byte	$e2, $de, $dc, $dd, $dc, $dc, $dc, $db, $d9, $d6, $d2, $d1, $d1, $d1, $d5, $db
16d99     E1 E8 EE F1 
16d9d     F4 F5 F6 FA 
16da1     00 07 0E 16 
16da5     1C 22 2A 2D | 	byte	$e1, $e8, $ee, $f1, $f4, $f5, $f6, $fa, $00, $07, $0e, $16, $1c, $22, $2a, $2d
16da9     30 31 30 2F 
16dad     2E 2C 29 27 
16db1     26 26 26 27 
16db5     27 27 27 27 | 	byte	$30, $31, $30, $2f, $2e, $2c, $29, $27, $26, $26, $26, $27, $27, $27, $27, $27
16db9     23 1D 17 11 
16dbd     0A 02 FB F2 
16dc1     ED E9 E7 E5 
16dc5     E5 E4 E3 E0 | 	byte	$23, $1d, $17, $11, $0a, $02, $fb, $f2, $ed, $e9, $e7, $e5, $e5, $e4, $e3, $e0
16dc9     E0 E3 E4 E4 
16dcd     E3 E2 E3 E3 
16dd1     E2 DF DC D8 
16dd5     D3 D1 CF CF | 	byte	$e0, $e3, $e4, $e4, $e3, $e2, $e3, $e3, $e2, $df, $dc, $d8, $d3, $d1, $cf, $cf
16dd9     D1 D6 DD E5 
16ddd     EE F7 00 09 
16de1     0F 17 1C 20 
16de5     28 2C 31 33 | 	byte	$d1, $d6, $dd, $e5, $ee, $f7, $00, $09, $0f, $17, $1c, $20, $28, $2c, $31, $33
16de9     34 33 32 31 
16ded     31 32 33 35 
16df1     36 37 35 30 
16df5     2C 29 27 1F | 	byte	$34, $33, $32, $31, $31, $32, $33, $35, $36, $37, $35, $30, $2c, $29, $27, $1f
16df9     16 10 0C 0A 
16dfd     06 FF F8 F2 
16e01     EB E5 E0 DD 
16e05     DA D6 D4 D2 | 	byte	$16, $10, $0c, $0a, $06, $ff, $f8, $f2, $eb, $e5, $e0, $dd, $da, $d6, $d4, $d2
16e09     D1 D0 D3 D7 
16e0d     DA DC DC DE 
16e11     E0 E0 DF DC 
16e15     D9 D6 D3 D1 | 	byte	$d1, $d0, $d3, $d7, $da, $dc, $dc, $de, $e0, $e0, $df, $dc, $d9, $d6, $d3, $d1
16e19     D1 D3 D9 E0 
16e1d     E5 EB F3 FB 
16e21     01 08 10 17 
16e25     1E 23 27 29 | 	byte	$d1, $d3, $d9, $e0, $e5, $eb, $f3, $fb, $01, $08, $10, $17, $1e, $23, $27, $29
16e29     2A 2A 2B 2C 
16e2d     2D 2E 2E 2D 
16e31     2E 2F 30 31 
16e35     32 31 2D 29 | 	byte	$2a, $2a, $2b, $2c, $2d, $2e, $2e, $2d, $2e, $2f, $30, $31, $32, $31, $2d, $29
16e39     27 22 1C 16 
16e3d     13 10 0C 07 
16e41     01 FA F2 EC 
16e45     E7 E3 E1 DE | 	byte	$27, $22, $1c, $16, $13, $10, $0c, $07, $01, $fa, $f2, $ec, $e7, $e3, $e1, $de
16e49     DC DA D9 D9 
16e4d     DA DC DD DF 
16e51     E1 E2 E2 E2 
16e55     E1 E0 E2 E3 | 	byte	$dc, $da, $d9, $d9, $da, $dc, $dd, $df, $e1, $e2, $e2, $e2, $e1, $e0, $e2, $e3
16e59     E4 E3 E2 E1 
16e5d     E0 E1 E3 E7 
16e61     EC F3 FA 02 
16e65     09 11 17 1B | 	byte	$e4, $e3, $e2, $e1, $e0, $e1, $e3, $e7, $ec, $f3, $fa, $02, $09, $11, $17, $1b
16e69     1F 22 27 26 
16e6d     23 22 22 22 
16e71     23 24 24 24 
16e75     24 22 23 24 | 	byte	$1f, $22, $27, $26, $23, $22, $22, $22, $23, $24, $24, $24, $24, $22, $23, $24
16e79     25 26 28 27 
16e7d     26 22 1E 18 
16e81     14 0F 08 01 
16e85     FB F5 F0 E9 | 	byte	$25, $26, $28, $27, $26, $22, $1e, $18, $14, $0f, $08, $01, $fb, $f5, $f0, $e9
16e89     E3 DD D9 D8 
16e8d     D8 D9 DB DD 
16e91     DF E1 E2 E2 
16e95     E1 E1 E3 E6 | 	byte	$e3, $dd, $d9, $d8, $d8, $d9, $db, $dd, $df, $e1, $e2, $e2, $e1, $e1, $e3, $e6
16e99     E8 E8 E7 E5 
16e9d     E2 E1 E0 E1 
16ea1     E3 E7 EC F0 
16ea5     F4 F9 FE 02 | 	byte	$e8, $e8, $e7, $e5, $e2, $e1, $e0, $e1, $e3, $e7, $ec, $f0, $f4, $f9, $fe, $02
16ea9     07 0C 11 15 
16ead     19 1D 1F 21 
16eb1     21 25 29 2A 
16eb5     2A 29 28 28 | 	byte	$07, $0c, $11, $15, $19, $1d, $1f, $21, $21, $25, $29, $2a, $2a, $29, $28, $28
16eb9     29 29 2A 2B 
16ebd     29 27 26 25 
16ec1     22 1E 19 15 
16ec5     10 0B 05 00 | 	byte	$29, $29, $2a, $2b, $29, $27, $26, $25, $22, $1e, $19, $15, $10, $0b, $05, $00
16ec9     F9 F4 EF ED 
16ecd     EA E7 E5 E2 
16ed1     DF DA D8 D7 
16ed5     D7 D8 DA DC | 	byte	$f9, $f4, $ef, $ed, $ea, $e7, $e5, $e2, $df, $da, $d8, $d7, $d7, $d8, $da, $dc
16ed9     DE E0 E2 E5 
16edd     E7 E8 E8 E8 
16ee1     E8 E7 E6 E5 
16ee5     E3 E2 E3 E5 | 	byte	$de, $e0, $e2, $e5, $e7, $e8, $e8, $e8, $e8, $e7, $e6, $e5, $e3, $e2, $e3, $e5
16ee9     E8 ED F4 FA 
16eed     00 07 0E 14 
16ef1     19 1C 1E 20 
16ef5     1F 1E 1D 1C | 	byte	$e8, $ed, $f4, $fa, $00, $07, $0e, $14, $19, $1c, $1e, $20, $1f, $1e, $1d, $1c
16ef9     1C 1D 1E 1E 
16efd     1E 1F 20 21 
16f01     23 24 25 25 
16f05     25 25 22 1F | 	byte	$1c, $1d, $1e, $1e, $1e, $1f, $20, $21, $23, $24, $25, $25, $25, $25, $22, $1f
16f09     1B 15 10 0B 
16f0d     05 FF FB F7 
16f11     F2 ED E9 E5 
16f15     E1 DF DF DF | 	byte	$1b, $15, $10, $0b, $05, $ff, $fb, $f7, $f2, $ed, $e9, $e5, $e1, $df, $df, $df
16f19     DF DF E0 E2 
16f1d     E2 E2 E1 E1 
16f21     E3 E5 E6 E7 
16f25     E8 EA EC EC | 	byte	$df, $df, $e0, $e2, $e2, $e2, $e1, $e1, $e3, $e5, $e6, $e7, $e8, $ea, $ec, $ec
16f29     EC EA EB EB 
16f2d     EC EE F0 F4 
16f31     F6 F8 F9 FB 
16f35     FF 02 06 0B | 	byte	$ec, $ea, $eb, $eb, $ec, $ee, $f0, $f4, $f6, $f8, $f9, $fb, $ff, $02, $06, $0b
16f39     0F 14 18 1C 
16f3d     20 22 23 26 
16f41     27 27 26 25 
16f45     23 1E 1C 1B | 	byte	$0f, $14, $18, $1c, $20, $22, $23, $26, $27, $27, $26, $25, $23, $1e, $1c, $1b
16f49     1B 1A 19 18 
16f4d     19 1A 1A 19 
16f51     17 12 0C 07 
16f55     03 FD F9 F6 | 	byte	$1b, $1a, $19, $18, $19, $1a, $1a, $19, $17, $12, $0c, $07, $03, $fd, $f9, $f6
16f59     F2 EF EC E9 
16f5d     E6 E3 E3 E3 
16f61     E4 E5 E6 E5 
16f65     E5 E3 E1 DF | 	byte	$f2, $ef, $ec, $e9, $e6, $e3, $e3, $e3, $e4, $e5, $e6, $e5, $e5, $e3, $e1, $df
16f69     DF E2 E4 E6 
16f6d     E9 EB ED EF 
16f71     F1 F2 F2 F2 
16f75     F2 F2 F2 F4 | 	byte	$df, $e2, $e4, $e6, $e9, $eb, $ed, $ef, $f1, $f2, $f2, $f2, $f2, $f2, $f2, $f4
16f79     F7 FB FE 01 
16f7d     05 0A 0E 12 
16f81     16 19 1D 1F 
16f85     20 21 1F 1E | 	byte	$f7, $fb, $fe, $01, $05, $0a, $0e, $12, $16, $19, $1d, $1f, $20, $21, $1f, $1e
16f89     1E 1D 1D 1D 
16f8d     1E 1D 1C 1B 
16f91     19 18 16 15 
16f95     15 16 15 13 | 	byte	$1e, $1d, $1d, $1d, $1e, $1d, $1c, $1b, $19, $18, $16, $15, $15, $16, $15, $13
16f99     12 0F 0D 0A 
16f9d     06 03 FE F9 
16fa1     F3 EF EC EA 
16fa5     E7 E4 E3 E3 | 	byte	$12, $0f, $0d, $0a, $06, $03, $fe, $f9, $f3, $ef, $ec, $ea, $e7, $e4, $e3, $e3
16fa9     E4 E3 E3 E3 
16fad     E4 E7 E9 EB 
16fb1     EC EC EB E9 
16fb5     E8 EA EB EC | 	byte	$e4, $e3, $e3, $e3, $e4, $e7, $e9, $eb, $ec, $ec, $eb, $e9, $e8, $ea, $eb, $ec
16fb9     EE EF F1 F3 
16fbd     F2 F2 F2 F3 
16fc1     F5 F8 FB FF 
16fc5     02 04 08 0B | 	byte	$ee, $ef, $f1, $f3, $f2, $f2, $f2, $f3, $f5, $f8, $fb, $ff, $02, $04, $08, $0b
16fc9     0F 12 14 16 
16fcd     18 19 18 18 
16fd1     19 19 19 19 
16fd5     1A 1B 1C 1D | 	byte	$0f, $12, $14, $16, $18, $19, $18, $18, $19, $19, $19, $19, $1a, $1b, $1c, $1d
16fd9     1C 1A 19 19 
16fdd     18 17 17 17 
16fe1     17 15 12 0F 
16fe5     0A 06 01 FC | 	byte	$1c, $1a, $19, $19, $18, $17, $17, $17, $17, $15, $12, $0f, $0a, $06, $01, $fc
16fe9     F8 F4 F0 EE 
16fed     EC EB E9 E9 
16ff1     E7 E6 E6 E7 
16ff5     E9 EA EA EA | 	byte	$f8, $f4, $f0, $ee, $ec, $eb, $e9, $e9, $e7, $e6, $e6, $e7, $e9, $ea, $ea, $ea
16ff9     EA E9 EA EA 
16ffd     EB EB EC ED 
17001     EF F1 F3 F4 
17005     F6 F7 F8 F8 | 	byte	$ea, $e9, $ea, $ea, $eb, $eb, $ec, $ed, $ef, $f1, $f3, $f4, $f6, $f7, $f8, $f8
17009     F8 F7 F6 F5 
1700d     F6 F7 F9 FC 
17011     FF 03 07 0C 
17015     0F 13 16 18 | 	byte	$f8, $f7, $f6, $f5, $f6, $f7, $f9, $fc, $ff, $03, $07, $0c, $0f, $13, $16, $18
17019     19 1A 1A 18 
1701d     17 15 14 14 
17021     14 15 15 14 
17025     13 13 13 13 | 	byte	$19, $1a, $1a, $18, $17, $15, $14, $14, $14, $15, $15, $14, $13, $13, $13, $13
17029     13 13 13 13 
1702d     11 0F 0B 09 
17031     07 05 03 00 
17035     FD FA F6 F3 | 	byte	$13, $13, $13, $13, $11, $0f, $0b, $09, $07, $05, $03, $00, $fd, $fa, $f6, $f3
17039     F1 EF EC EB 
1703d     EA E9 E9 EA 
17041     EA EC EC EC 
17045     EC EA E9 EA | 	byte	$f1, $ef, $ec, $eb, $ea, $e9, $e9, $ea, $ea, $ec, $ec, $ec, $ec, $ea, $e9, $ea
17049     EB EC EE F0 
1704d     F1 F3 F5 F7 
17051     FA FD FE FE 
17055     FD FB F9 F7 | 	byte	$eb, $ec, $ee, $f0, $f1, $f3, $f5, $f7, $fa, $fd, $fe, $fe, $fd, $fb, $f9, $f7
17059     F7 F6 F6 F8 
1705d     FA FD 01 05 
17061     09 0D 10 12 
17065     15 17 19 1B | 	byte	$f7, $f6, $f6, $f8, $fa, $fd, $01, $05, $09, $0d, $10, $12, $15, $17, $19, $1b
17069     1B 1A 19 18 
1706d     17 14 13 11 
17071     11 11 11 11 
17075     11 0F 0E 0C | 	byte	$1b, $1a, $19, $18, $17, $14, $13, $11, $11, $11, $11, $11, $11, $0f, $0e, $0c
17079     0B 0A 0A 0A 
1707d     0A 09 07 06 
17081     02 FF FB F6 
17085     F3 F0 EE EC | 	byte	$0b, $0a, $0a, $0a, $0a, $09, $07, $06, $02, $ff, $fb, $f6, $f3, $f0, $ee, $ec
17089     EA EA E9 E9 
1708d     EA EB ED EE 
17091     EF F0 F0 F0 
17095     F1 F2 F3 F4 | 	byte	$ea, $ea, $e9, $e9, $ea, $eb, $ed, $ee, $ef, $f0, $f0, $f0, $f1, $f2, $f3, $f4
17099     F3 F4 F5 F6 
1709d     F8 F8 F8 F9 
170a1     FB FC FC FB 
170a5     FA FA FA FA | 	byte	$f3, $f4, $f5, $f6, $f8, $f8, $f8, $f9, $fb, $fc, $fc, $fb, $fa, $fa, $fa, $fa
170a9     FB FD FF 02 
170ad     05 07 0A 0B 
170b1     0D 0F 11 13 
170b5     15 15 15 14 | 	byte	$fb, $fd, $ff, $02, $05, $07, $0a, $0b, $0d, $0f, $11, $13, $15, $15, $15, $14
170b9     14 13 12 12 
170bd     11 11 11 10 
170c1     0F 0F 0F 0E 
170c5     0E 0E 0E 0E | 	byte	$14, $13, $12, $12, $11, $11, $11, $10, $0f, $0f, $0f, $0e, $0e, $0e, $0e, $0e
170c9     0D 0C 0B 09 
170cd     07 05 03 00 
170d1     FD FA F8 F7 
170d5     F6 F4 F2 F1 | 	byte	$0d, $0c, $0b, $09, $07, $05, $03, $00, $fd, $fa, $f8, $f7, $f6, $f4, $f2, $f1
170d9     F0 F0 F0 F1 
170dd     F1 F1 F0 F0 
170e1     F0 F1 F2 F2 
170e5     F1 F0 F0 F0 | 	byte	$f0, $f0, $f0, $f1, $f1, $f1, $f0, $f0, $f0, $f1, $f2, $f2, $f1, $f0, $f0, $f0
170e9     F0 F0 F1 F2 
170ed     F4 F6 F7 F9 
170f1     FA FC FE FE 
170f5     FF FE FE FE | 	byte	$f0, $f0, $f1, $f2, $f4, $f6, $f7, $f9, $fa, $fc, $fe, $fe, $ff, $fe, $fe, $fe
170f9     FF FF 00 00 
170fd     02 04 06 09 
17101     0A 0C 0D 0F 
17105     10 10 10 11 | 	byte	$ff, $ff, $00, $00, $02, $04, $06, $09, $0a, $0c, $0d, $0f, $10, $10, $10, $11
17109     11 10 10 10 
1710d     10 0F 0E 0C 
17111     0B 0B 0B 0B 
17115     0B 0B 0B 0A | 	byte	$11, $10, $10, $10, $10, $0f, $0e, $0c, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0a
17119     09 08 07 06 
1711d     04 03 02 00 
17121     FF FE FC FA 
17125     F7 F5 F2 F1 | 	byte	$09, $08, $07, $06, $04, $03, $02, $00, $ff, $fe, $fc, $fa, $f7, $f5, $f2, $f1
17129     EF EF EF F0 
1712d     F1 F0 F1 F2 
17131     F2 F2 F2 F2 
17135     F2 F3 F4 F5 | 	byte	$ef, $ef, $ef, $f0, $f1, $f0, $f1, $f2, $f2, $f2, $f2, $f2, $f2, $f3, $f4, $f5
17139     F6 F8 F9 F9 
1713d     F9 FA FA F9 
17141     F9 F9 FB FB 
17145     FB FB FB FB | 	byte	$f6, $f8, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $fb, $fb, $fb, $fb, $fb, $fb
17149     FC FD FF 00 
1714d     02 03 05 07 
17151     08 09 0B 0D 
17155     10 11 12 12 | 	byte	$fc, $fd, $ff, $00, $02, $03, $05, $07, $08, $09, $0b, $0d, $10, $11, $12, $12
17159     11 10 10 0F 
1715d     0E 0C 0B 0A 
17161     09 08 08 08 
17165     08 09 09 09 | 	byte	$11, $10, $10, $0f, $0e, $0c, $0b, $0a, $09, $08, $08, $08, $08, $09, $09, $09
17169     08 08 08 08 
1716d     09 09 08 08 
17171     07 05 02 FF 
17175     FC F9 F6 F4 | 	byte	$08, $08, $08, $08, $09, $09, $08, $08, $07, $05, $02, $ff, $fc, $f9, $f6, $f4
17179     F3 F3 F3 F3 
1717d     F3          | 	byte	$f3[5]
1717e     F2 F2 F2 F2 
17182     F3 F3 F3 F3 
17186     F4 F5 F6 F6 
1718a     F6 F6 F6 F7 | 	byte	$f2, $f2, $f2, $f2, $f3, $f3, $f3, $f3, $f4, $f5, $f6, $f6, $f6, $f6, $f6, $f7
1718e     F8 F9 FA FA 
17192     FB FC FD FE 
17196     FF FF FF FD 
1719a     FB FB FB FB | 	byte	$f8, $f9, $fa, $fa, $fb, $fc, $fd, $fe, $ff, $ff, $ff, $fd, $fb, $fb, $fb, $fb
1719e     FB FC FD FF 
171a2     01 03 05 07 
171a6     09 0A 0B 0D 
171aa     0E 0F 10 10 | 	byte	$fb, $fc, $fd, $ff, $01, $03, $05, $07, $09, $0a, $0b, $0d, $0e, $0f, $10, $10
171ae     10 0F 0F 0F 
171b2     0D 0C 0B 0B 
171b6     0B 0B 0B 0B 
171ba     0B 0A 09 08 | 	byte	$10, $0f, $0f, $0f, $0d, $0c, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0a, $09, $08
171be     07 07 06 06 
171c2     05 05 04 03 
171c6     00 FF FE FC 
171ca     FA F9 F8 F7 | 	byte	$07, $07, $06, $06, $05, $05, $04, $03, $00, $ff, $fe, $fc, $fa, $f9, $f8, $f7
171ce     F6 F6 F5 F4 
171d2     F4 F3 F3 F2 
171d6     F2 F2 F2 F3 
171da     F3 F4 F4 F4 | 	byte	$f6, $f6, $f5, $f4, $f4, $f3, $f3, $f2, $f2, $f2, $f2, $f3, $f3, $f4, $f4, $f4
171de     F4 F5 F6 F7 
171e2     F8 F8 F9 FA 
171e6     FB FD FE FF 
171ea     00 01 00 FF | 	byte	$f4, $f5, $f6, $f7, $f8, $f8, $f9, $fa, $fb, $fd, $fe, $ff, $00, $01, $00, $ff
171ee     FE FC FC FC 
171f2     FC FC FD FD 
171f6     FE 00 01 03 
171fa     06 08 0A 0C | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $00, $01, $03, $06, $08, $0a, $0c
171fe     0D 0E 0F 0F 
17202     0F 0F 0E 0E 
17206     0E 0E 0E 0D 
1720a     0C 0B 09 08 | 	byte	$0d, $0e, $0f, $0f, $0f, $0f, $0e, $0e, $0e, $0e, $0e, $0d, $0c, $0b, $09, $08
1720e     07 06 05 04 
17212     04 04 03 03 
17216     03 04 04 05 
1721a     04 03 01 FF | 	byte	$07, $06, $05, $04, $04, $04, $03, $03, $03, $04, $04, $05, $04, $03, $01, $ff
1721e     FE FC FA F8 
17222     F7 F7 F6 F5 
17226     F4 F3 F3 F3 
1722a     F3 F4 F4 F5 | 	byte	$fe, $fc, $fa, $f8, $f7, $f7, $f6, $f5, $f4, $f3, $f3, $f3, $f3, $f4, $f4, $f5
1722e     F6 F6 F7 F7 
17232     F9 FA FB FB 
17236     FB FB FB FC 
1723a     FC FC FC FB | 	byte	$f6, $f6, $f7, $f7, $f9, $fa, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fb
1723e     FC FC FD FF 
17242     00 00 01 02 
17246     03 02 01 01 
1724a     01 01 01 01 | 	byte	$fc, $fc, $fd, $ff, $00, $00, $01, $02, $03, $02, $01, $01, $01, $01, $01, $01
1724e     01 01 01 02 
17252     02 04 05 06 
17256     08 09 0A 0B 
1725a     0B 0B 0B 0B | 	byte	$01, $01, $01, $02, $02, $04, $05, $06, $08, $09, $0a, $0b, $0b, $0b, $0b, $0b
1725e     0B 0A 0A 0A 
17262     0A 09 08 07 
17266     06 05 04 03 
1726a     03 03 02 02 | 	byte	$0b, $0a, $0a, $0a, $0a, $09, $08, $07, $06, $05, $04, $03, $03, $03, $02, $02
1726e     01 02 02 03 
17272     03 03 03 03 
17276     01 00 FE FD 
1727a     FC FA F9 F8 | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $01, $00, $fe, $fd, $fc, $fa, $f9, $f8
1727e     F8 F7 F6 F4 
17282     F4 F4 F4 F4 
17286     F4 F4 F5 F5 
1728a     F5 F6 F7 F8 | 	byte	$f8, $f7, $f6, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f5, $f5, $f5, $f6, $f7, $f8
1728e     F9 FA FB FC 
17292     FD FD FE FD 
17296     FD FD FC FD 
1729a     FE FF FF FF | 	byte	$f9, $fa, $fb, $fc, $fd, $fd, $fe, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $ff, $ff
1729e     FF FF FF FF 
172a2     FF FF FF FF | 	byte	$ff[8]
172a6     00 01 02 03 
172aa     05 06 07 09 
172ae     09 09 09 0A 
172b2     0B 0B 0B 0B | 	byte	$00, $01, $02, $03, $05, $06, $07, $09, $09, $09, $09, $0a, $0b, $0b, $0b, $0b
172b6     0B 0B 0B 0A 
172ba     09 09 08 07 
172be     06 06 05 05 
172c2     04 03 02 02 | 	byte	$0b, $0b, $0b, $0a, $09, $09, $08, $07, $06, $06, $05, $05, $04, $03, $02, $02
172c6     02 02 01 01 
172ca     01 01 01 00 
172ce     FF FF FE FD 
172d2     FC FC FC FC | 	byte	$02, $02, $01, $01, $01, $01, $01, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc
172d6     FC FA FA F9 
172da     F8 F7 F6 F5 
172de     F5 F5 F6 F7 
172e2     F7 F7 F8 F8 | 	byte	$fc, $fa, $fa, $f9, $f8, $f7, $f6, $f5, $f5, $f5, $f6, $f7, $f7, $f7, $f8, $f8
172e6     F8 F8 F8 F9 
172ea     F9 FA FB FB 
172ee     FC FC FD FF 
172f2     FF 00 00 00 | 	byte	$f8, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $ff, $ff, $00, $00, $00
172f6     01 01 02 03 
172fa     03 03 03 02 
172fe     02 00 FF FF 
17302     FF FF FF 01 | 	byte	$01, $01, $02, $03, $03, $03, $03, $02, $02, $00, $ff, $ff, $ff, $ff, $ff, $01
17306     02 03 05 07 
1730a     09 09 09 09 
1730e     0A 0B 0B 0B 
17312     0A 0A 0A 0A | 	byte	$02, $03, $05, $07, $09, $09, $09, $09, $0a, $0b, $0b, $0b, $0a, $0a, $0a, $0a
17316     0A 09 08 07 
1731a     06 05 04 04 
1731e     04 03 02 01 
17322     00 FF FF FE | 	byte	$0a, $09, $08, $07, $06, $05, $04, $04, $04, $03, $02, $01, $00, $ff, $ff, $fe
17326     FD FE FE 00 
1732a     01 01 02 01 
1732e     00 00 FF FE 
17332     FD FB F9 F8 | 	byte	$fd, $fe, $fe, $00, $01, $01, $02, $01, $00, $00, $ff, $fe, $fd, $fb, $f9, $f8
17336     F6 F5 F5 F5 
1733a     F6 F6 F7 F8 
1733e     F8 F9 F8 F8 
17342     F8 F9 FA FA | 	byte	$f6, $f5, $f5, $f5, $f6, $f6, $f7, $f8, $f8, $f9, $f8, $f8, $f8, $f9, $fa, $fa
17346     FB FC FC FD 
1734a     FD FD FE FE 
1734e     FE FE FF FF 
17352     FF FF 00 FF | 	byte	$fb, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $00, $ff
17356     00 01 01 01 
1735a     01 01 01 01 
1735e     01 01 01 01 
17362     01 01 02 03 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $03
17366     04 05 05 07 
1736a     08 08 08 08 
1736e     08 08 07 07 
17372     07 06 06 06 | 	byte	$04, $05, $05, $07, $08, $08, $08, $08, $08, $08, $07, $07, $07, $06, $06, $06
17376     06 06 07 06 
1737a     05 04 04 04 
1737e     03 03 03 02 
17382     02 01 01 00 | 	byte	$06, $06, $07, $06, $05, $04, $04, $04, $03, $03, $03, $02, $02, $01, $01, $00
17386     FF FF 00 00 
1738a     FF FF FF FE 
1738e     FD FD FC FC 
17392     FB FA F9 F9 | 	byte	$ff, $ff, $00, $00, $ff, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fb, $fa, $f9, $f9
17396     F8 F8 F9 F9 
1739a     F8 F8 F8 F8 
1739e     F8 F8 F8 F8 
173a2     F8 F9 FA FA | 	byte	$f8, $f8, $f9, $f9, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fa
173a6     FB FC FC FD 
173aa     FE FE FF FF 
173ae     FF 00 FF FF 
173b2     FF FF FF FF | 	byte	$fb, $fc, $fc, $fd, $fe, $fe, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff
173b6     00 00 00 00 
173ba     00          | 	byte	$00[5]
173bb     01 01 01 01 
173bf     01          | 	byte	$01[5]
173c0     02 02 02 02 
173c4     03 03 04 04 
173c8     05 06 07 07 
173cc     07 07 07 08 | 	byte	$02, $02, $02, $02, $03, $03, $04, $04, $05, $06, $07, $07, $07, $07, $07, $08
173d0     08 08 07 07 
173d4     07 07 07 07 
173d8     06 06 05 05 
173dc     03 03 02 02 | 	byte	$08, $08, $07, $07, $07, $07, $07, $07, $06, $06, $05, $05, $03, $03, $02, $02
173e0     01 01 00 FF 
173e4     FF FE FE FF 
173e8     FF 00 01 01 
173ec     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $fe, $fe, $ff, $ff, $00, $01, $01, $01, $00, $ff, $ff
173f0     FE FD FC FC 
173f4     FC FB FA F9 
173f8     F8 F8 F8 F8 
173fc     F9 F9 F9 F9 | 	byte	$fe, $fd, $fc, $fc, $fc, $fb, $fa, $f9, $f8, $f8, $f8, $f8, $f9, $f9, $f9, $f9
17400     FA FB FB FB 
17404     FB FB FC FC 
17408     FD FD FD FE 
1740c     FE FE FF FF | 	byte	$fa, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff
17410     00 FF 00 00 
17414     01 02 02 02 
17418     03 03 03 03 
1741c     02 02 01 00 | 	byte	$00, $ff, $00, $00, $01, $02, $02, $02, $03, $03, $03, $03, $02, $02, $01, $00
17420     00 00 01 01 
17424     02 02 03 03 
17428     03 04 04 05 
1742c     05 06 06 05 | 	byte	$00, $00, $01, $01, $02, $02, $03, $03, $03, $04, $04, $05, $05, $06, $06, $05
17430     05 05 06 06 
17434     07 06 06 06 
17438     05 05 04 04 
1743c     04 03 03 02 | 	byte	$05, $05, $06, $06, $07, $06, $06, $06, $05, $05, $04, $04, $04, $03, $03, $02
17440     02 02 01 01 
17444     00 FF FF FE 
17448     FE FE FE FE 
1744c     FE FF 00 00 | 	byte	$02, $02, $01, $01, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $00, $00
17450     01 01 00 FF 
17454     FE FD FB FB 
17458     FA F9 F9 F8 
1745c     F8 F8 F9 F9 | 	byte	$01, $01, $00, $ff, $fe, $fd, $fb, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f9, $f9
17460     F9 F9 F9 FA 
17464     FA FA FA FA 
17468     FB FB FC FD 
1746c     FD FE FE FF | 	byte	$f9, $f9, $f9, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fd, $fe, $fe, $ff
17470     FF FF FE FF 
17474     FE FE FE FF 
17478     00 01 01 02 
1747c     02 02 02 03 | 	byte	$ff, $ff, $fe, $ff, $fe, $fe, $fe, $ff, $00, $01, $01, $02, $02, $02, $02, $03
17480     03 03 03 03 
17484     04 03 02 02 
17488     02 02 02 02 
1748c     02 02 02 02 | 	byte	$03, $03, $03, $03, $04, $03, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
17490     03 04 04 05 
17494     06 06 06 06 
17498     06 06 06 06 
1749c     06 05 05 05 | 	byte	$03, $04, $04, $05, $06, $06, $06, $06, $06, $06, $06, $06, $06, $05, $05, $05
174a0     05 04 04 04 
174a4     03 02 01 00 
174a8     00 FF FF FF 
174ac     FE FE FE FE | 	byte	$05, $04, $04, $04, $03, $02, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe
174b0     FE FE 00 00 
174b4     00 00 01 02 
174b8     00 02 FF 01 
174bc     00 FC 08 07 | 	byte	$fe, $fe, $00, $00, $00, $00, $01, $02, $00, $02, $ff, $01, $00, $fc, $08, $07
174c0     EC 2B D3 10 
174c4     D9 55 B5 FE 
174c8     4F DF C5 78 
174cc     BE 28 05 E6 | 	byte	$ec, $2b, $d3, $10, $d9, $55, $b5, $fe, $4f, $df, $c5, $78, $be, $28, $05, $e6
174d0     2E BC 5D D1 
174d4     05 E9 27 DB 
174d8     2E D0 2E C0 
174dc     57 97 33 D0 | 	byte	$2e, $bc, $5d, $d1, $05, $e9, $27, $db, $2e, $d0, $2e, $c0, $57, $97, $33, $d0
174e0     1D F7 CD 3A 
174e4     CC 3C 8F 6C 
174e8     96 60 A3 63 
174ec     A7 4A DE 08 | 	byte	$1d, $f7, $cd, $3a, $cc, $3c, $8f, $6c, $96, $60, $a3, $63, $a7, $4a, $de, $08
174f0     0F 03 DD 25 
174f4     EC 1B A9 68 
174f8     A6 3B C4 5E 
174fc     90 5E B8 7F | 	byte	$0f, $03, $dd, $25, $ec, $1b, $a9, $68, $a6, $3b, $c4, $5e, $90, $5e, $b8, $7f
17500     87 67 D9 F6 
17504     38 A4 53 BE 
17508     64 9D 41 E9 
1750c     07 E4 2D CC | 	byte	$87, $67, $d9, $f6, $38, $a4, $53, $be, $64, $9d, $41, $e9, $07, $e4, $2d, $cc
17510     59 AA 56 E0 
17514     F9 1C DB 31 
17518     C8 3C AB 5E 
1751c     9C 4F D0 33 | 	byte	$59, $aa, $56, $e0, $f9, $1c, $db, $31, $c8, $3c, $ab, $5e, $9c, $4f, $d0, $33
17520     D4 4D A0 61 
17524     BD 2D DC 34 
17528     C0 1A E5 38 
1752c     D5 FD 0F D3 | 	byte	$d4, $4d, $a0, $61, $bd, $2d, $dc, $34, $c0, $1a, $e5, $38, $d5, $fd, $0f, $d3
17530     2A C3 37 CC 
17534     49 B0 28 F2 
17538     E5 34 C8 3E 
1753c     DB F3 0D 30 | 	byte	$2a, $c3, $37, $cc, $49, $b0, $28, $f2, $e5, $34, $c8, $3e, $db, $f3, $0d, $30
17540     B2 40 D9 15 
17544     0B FE FE DF 
17548     1B AD 3E C4 
1754c     0B 0E FD 37 | 	byte	$b2, $40, $d9, $15, $0b, $fe, $fe, $df, $1b, $ad, $3e, $c4, $0b, $0e, $fd, $37
17550     B3 5E AD 4D 
17554     CA 38 CB 3C 
17558     DF 01 20 F8 
1755c     DD 42 D5 2F | 	byte	$b3, $5e, $ad, $4d, $ca, $38, $cb, $3c, $df, $01, $20, $f8, $dd, $42, $d5, $2f
17560     CB 47 B2 5D 
17564     9C 48 C9 0D 
17568     FB E5 29 D0 
1756c     36 D3 30 B0 | 	byte	$cb, $47, $b2, $5d, $9c, $48, $c9, $0d, $fb, $e5, $29, $d0, $36, $d3, $30, $b0
17570     49 C7 28 D0 
17574     23 D5 22 F0 
17578     EB 29 D8 1B 
1757c     05 DD 2C CC | 	byte	$49, $c7, $28, $d0, $23, $d5, $22, $f0, $eb, $29, $d8, $1b, $05, $dd, $2c, $cc
17580     39 D3 2B D9 
17584     41 A2 64 AB 
17588     2C FB D8 23 
1758c     E0 11 F5 17 | 	byte	$39, $d3, $2b, $d9, $41, $a2, $64, $ab, $2c, $fb, $d8, $23, $e0, $11, $f5, $17
17590     09 E1 2C E1 
17594     0B FD EF 17 
17598     B6 44 E3 F7 
1759c     20 D8 1B 0B | 	byte	$09, $e1, $2c, $e1, $0b, $fd, $ef, $17, $b6, $44, $e3, $f7, $20, $d8, $1b, $0b
175a0     EC 03 13 DF 
175a4     25 CB 38 BE 
175a8     40 B5 3D C5 
175ac     52 C3 29 D6 | 	byte	$ec, $03, $13, $df, $25, $cb, $38, $be, $40, $b5, $3d, $c5, $52, $c3, $29, $d6
175b0     2F C2 43 D2 
175b4     1A F2 10 F0 
175b8     08 0A 09 F0 
175bc     FF 23 C8 45 | 	byte	$2f, $c2, $43, $d2, $1a, $f2, $10, $f0, $08, $0a, $09, $f0, $ff, $23, $c8, $45
175c0     BD 42 D7 2A 
175c4     D1 41 DE 06 
175c8     0B F6 13 F8 
175cc     14 EB 25 DD | 	byte	$bd, $42, $d7, $2a, $d1, $41, $de, $06, $0b, $f6, $13, $f8, $14, $eb, $25, $dd
175d0     23 EF 09 E1 
175d4     22 DC 30 CD 
175d8     31 F7 F5 07 
175dc     1A DB 12 07 | 	byte	$23, $ef, $09, $e1, $22, $dc, $30, $cd, $31, $f7, $f5, $07, $1a, $db, $12, $07
175e0     F5 10 F3 12 
175e4     F1 1F FD EC 
175e8     34 CF 2A E4 
175ec     2F CF 2E F2 | 	byte	$f5, $10, $f3, $12, $f1, $1f, $fd, $ec, $34, $cf, $2a, $e4, $2f, $cf, $2e, $f2
175f0     FF 06 16 F8 
175f4     0E FB 07 25 
175f8     D8 25 E8 12 
175fc     FA 0B E6 25 | 	byte	$ff, $06, $16, $f8, $0e, $fb, $07, $25, $d8, $25, $e8, $12, $fa, $0b, $e6, $25
17600     D0 3C C4 2E 
17604     E0 1B EC 0B 
17608     05 F9 1A D7 
1760c     20 FD 01 04 | 	byte	$d0, $3c, $c4, $2e, $e0, $1b, $ec, $0b, $05, $f9, $1a, $d7, $20, $fd, $01, $04
17610     DC 35 DF 16 
17614     E5 2C BE 3C 
17618     DF 1E EE 10 
1761c     04 06 FD 0F | 	byte	$dc, $35, $df, $16, $e5, $2c, $be, $3c, $df, $1e, $ee, $10, $04, $06, $fd, $0f
17620     F1 0B F2 17 
17624     D8 2C F3 F5 
17628     1A DF 28 E9 
1762c     FD 16 EA 02 | 	byte	$f1, $0b, $f2, $17, $d8, $2c, $f3, $f5, $1a, $df, $28, $e9, $fd, $16, $ea, $02
17630     08 00 FB 02 
17634     01 10 E2 20 
17638     D8 36 DE 17 
1763c     F1 0D FE 04 | 	byte	$08, $00, $fb, $02, $01, $10, $e2, $20, $d8, $36, $de, $17, $f1, $0d, $fe, $04
17640     FC 18 E9 17 
17644     EE 09 1B E8 
17648     21 E0 29 F2 
1764c     23 D9 2C CC | 	byte	$fc, $18, $e9, $17, $ee, $09, $1b, $e8, $21, $e0, $29, $f2, $23, $d9, $2c, $cc
17650     46 C0 35 E8 
17654     0B 0B EB 2A 
17658     E5 17 F2 FD 
1765c     22 E3 14 09 | 	byte	$46, $c0, $35, $e8, $0b, $0b, $eb, $2a, $e5, $17, $f2, $fd, $22, $e3, $14, $09
17660     E6 FF 04 FC 
17664     0B 0D D6 46 
17668     C8 1C 08 0D 
1766c     E0 46 C8 22 | 	byte	$e6, $ff, $04, $fc, $0b, $0d, $d6, $46, $c8, $1c, $08, $0d, $e0, $46, $c8, $22
17670     E2 F7 2A D8 
17674     2F DD 27 ED 
17678     24 C9 3B DF 
1767c     F6 25 E3 17 | 	byte	$e2, $f7, $2a, $d8, $2f, $dd, $27, $ed, $24, $c9, $3b, $df, $f6, $25, $e3, $17
17680     E8 1F E9 07 
17684     F3 08 FD F0 
17688     1E D4 28 E5 
1768c     1F E5 11 F8 | 	byte	$e8, $1f, $e9, $07, $f3, $08, $fd, $f0, $1e, $d4, $28, $e5, $1f, $e5, $11, $f8
17690     F0 2D C0 44 
17694     C4 35 DC 2A 
17698     D4 36 D0 2B 
1769c     DE FD 12 FB | 	byte	$f0, $2d, $c0, $44, $c4, $35, $dc, $2a, $d4, $36, $d0, $2b, $de, $fd, $12, $fb
176a0     F3 02 F5 11 
176a4     FB E9 20 D8 
176a8     34 D3 2A DC 
176ac     29 E6 10 FA | 	byte	$f3, $02, $f5, $11, $fb, $e9, $20, $d8, $34, $d3, $2a, $dc, $29, $e6, $10, $fa
176b0     F7 0B 13 D3 
176b4     36 D1 16 FD 
176b8     F1 16 11 C4 
176bc     4B C2 43 AF | 	byte	$f7, $0b, $13, $d3, $36, $d1, $16, $fd, $f1, $16, $11, $c4, $4b, $c2, $43, $af
176c0     5A BD 20 06 
176c4     E3 23 E6 07 
176c8     FA 02 FC 10 
176cc     F6 F8 1B D6 | 	byte	$5a, $bd, $20, $06, $e3, $23, $e6, $07, $fa, $02, $fc, $10, $f6, $f8, $1b, $d6
176d0     38 CF 18 FD 
176d4     02 18 D0 40 
176d8     CC 21 F3 02 
176dc     FF 1A F0 00 | 	byte	$38, $cf, $18, $fd, $02, $18, $d0, $40, $cc, $21, $f3, $02, $ff, $1a, $f0, $00
176e0     10 E8 21 EB 
176e4     20 E0 29 D3 
176e8     25 E5 0F FB 
176ec     10 E9 27 D2 | 	byte	$10, $e8, $21, $eb, $20, $e0, $29, $d3, $25, $e5, $0f, $fb, $10, $e9, $27, $d2
176f0     1F DD 1F F5 
176f4     01 FB 1B EC 
176f8     FA 1E E6 09 
176fc     FD 0B F1 0E | 	byte	$1f, $dd, $1f, $f5, $01, $fb, $1b, $ec, $fa, $1e, $e6, $09, $fd, $0b, $f1, $0e
17700     F7 0D EE 1C 
17704     F1 0E 05 F5 
17708     20 E3 21 E8 
1770c     08 06 01 EA | 	byte	$f7, $0d, $ee, $1c, $f1, $0e, $05, $f5, $20, $e3, $21, $e8, $08, $06, $01, $ea
17710     20 F0 04 0D 
17714     F9 09 E6 2C 
17718     D7 20 EF 0D 
1771c     05 F3 07 FC | 	byte	$20, $f0, $04, $0d, $f9, $09, $e6, $2c, $d7, $20, $ef, $0d, $05, $f3, $07, $fc
17720     17 D4 3B C8 
17724     14 0A F0 0A 
17728     00 00 01 06 
1772c     F1 22 DC 18 | 	byte	$17, $d4, $3b, $c8, $14, $0a, $f0, $0a, $00, $00, $01, $06, $f1, $22, $dc, $18
17730     FE 04 F1 27 
17734     CA 3E D0 25 
17738     E2 27 DC 21 
1773c     E9 1C DE 2B | 	byte	$fe, $04, $f1, $27, $ca, $3e, $d0, $25, $e2, $27, $dc, $21, $e9, $1c, $de, $2b
17740     E3 09 07 F2 
17744     17 F0 1C D9 
17748     2D E3 11 FD 
1774c     09 F9 16 DF | 	byte	$e3, $09, $07, $f2, $17, $f0, $1c, $d9, $2d, $e3, $11, $fd, $09, $f9, $16, $df
17750     2C E0 1C FC 
17754     06 0A F1 05 
17758     04 06 F5 18 
1775c     F6 08 FC 10 | 	byte	$2c, $e0, $1c, $fc, $06, $0a, $f1, $05, $04, $06, $f5, $18, $f6, $08, $fc, $10
17760     F1 21 E3 15 
17764     F9 00 09 FD 
17768     FF 09 ED 1A 
1776c     E8 1E E4 21 | 	byte	$f1, $21, $e3, $15, $f9, $00, $09, $fd, $ff, $09, $ed, $1a, $e8, $1e, $e4, $21
17770     E1 0E FE F1 
17774     14 07 E6 25 
17778     EA 06 09 00 
1777c     FC 05 00 F2 | 	byte	$e1, $0e, $fe, $f1, $14, $07, $e6, $25, $ea, $06, $09, $00, $fc, $05, $00, $f2
17780     1D EE 18 E8 
17784     27 DE 1A EF 
17788     17 DC 29 E0 
1778c     10 FD FA 10 | 	byte	$1d, $ee, $18, $e8, $27, $de, $1a, $ef, $17, $dc, $29, $e0, $10, $fd, $fa, $10
17790     EF 17 EF 12 
17794     EF 1A D9 30 
17798     DC 13 EB 2B 
1779c     C7 43 D2 1C | 	byte	$ef, $17, $ef, $12, $ef, $1a, $d9, $30, $dc, $13, $eb, $2b, $c7, $43, $d2, $1c
177a0     EE 13 E5 17 
177a4     E9 18 F0 07 
177a8     02 01 F3 13 
177ac     F8 04 0D ED | 	byte	$ee, $13, $e5, $17, $e9, $18, $f0, $07, $02, $01, $f3, $13, $f8, $04, $0d, $ed
177b0     14 ED 0A E5 
177b4     27 DF 0F FB 
177b8     08 F7 1C E5 
177bc     17 F1 FA 11 | 	byte	$14, $ed, $0a, $e5, $27, $df, $0f, $fb, $08, $f7, $1c, $e5, $17, $f1, $fa, $11
177c0     EE 17 FD F3 
177c4     20 DF 24 DF 
177c8     20 ED FC 17 
177cc     EE 16 E4 17 | 	byte	$ee, $17, $fd, $f3, $20, $df, $24, $df, $20, $ed, $fc, $17, $ee, $16, $e4, $17
177d0     E4 21 E9 07 
177d4     06 FE FA 11 
177d8     E9 11 01 F8 
177dc     09 01 FD 0D | 	byte	$e4, $21, $e9, $07, $06, $fe, $fa, $11, $e9, $11, $01, $f8, $09, $01, $fd, $0d
177e0     07 ED 15 ED 
177e4     1B E1 28 DD 
177e8     25 D5 31 DC 
177ec     1C EC 18 E9 | 	byte	$07, $ed, $15, $ed, $1b, $e1, $28, $dd, $25, $d5, $31, $dc, $1c, $ec, $18, $e9
177f0     18 EB 12 FA 
177f4     05 07 F5 10 
177f8     E9 1B F0 FB 
177fc     17 DD 2B D3 | 	byte	$18, $eb, $12, $fa, $05, $07, $f5, $10, $e9, $1b, $f0, $fb, $17, $dd, $2b, $d3
17800     28 E3 16 F9 
17804     FC 08 01 00 
17808     F9 13 EF 0F 
1780c     F2 04 FD 02 | 	byte	$28, $e3, $16, $f9, $fc, $08, $01, $00, $f9, $13, $ef, $0f, $f2, $04, $fd, $02
17810     03 FC 0D EF 
17814     1C E4 21 E5 
17818     15 F0 17 E9 
1781c     15 F5 01 0B | 	byte	$03, $fc, $0d, $ef, $1c, $e4, $21, $e5, $15, $f0, $17, $e9, $15, $f5, $01, $0b
17820     EF 13 F7 00 
17824     0A E5 24 D9 
17828     20 FD F6 08 
1782c     FA 0E EE 16 | 	byte	$ef, $13, $f7, $00, $0a, $e5, $24, $d9, $20, $fd, $f6, $08, $fa, $0e, $ee, $16
17830     EA 1C E8 1E 
17834     E4 22 DD 2B 
17838     CF 37 CB 2C 
1783c     E4 11 FB F5 | 	byte	$ea, $1c, $e8, $1e, $e4, $22, $dd, $2b, $cf, $37, $cb, $2c, $e4, $11, $fb, $f5
17840     1F D1 30 DC 
17844     27 DD 22 E9 
17848     06 0F E6 1C 
1784c     E8 17 F2 04 | 	byte	$1f, $d1, $30, $dc, $27, $dd, $22, $e9, $06, $0f, $e6, $1c, $e8, $17, $f2, $04
17850     FE 04 FC 09 
17854     FF F7 16 EA 
17858     17 F1 0A 02 
1785c     FD 01 05 04 | 	byte	$fe, $04, $fc, $09, $ff, $f7, $16, $ea, $17, $f1, $0a, $02, $fd, $01, $05, $04
17860     F1 22 D7 30 
17864     D7 22 F0 0F 
17868     F6 12 ED 14 
1786c     F3 07 04 00 | 	byte	$f1, $22, $d7, $30, $d7, $22, $f0, $0f, $f6, $12, $ed, $14, $f3, $07, $04, $00
17870     F9 16 E1 27 
17874     DF 22 E3 0E 
17878     FE F7 14 EF 
1787c     15 ED 1A F1 | 	byte	$f9, $16, $e1, $27, $df, $22, $e3, $0e, $fe, $f7, $14, $ef, $15, $ed, $1a, $f1
17880     FE 0D F8 FE 
17884     08 F2 10 F8 
17888     02 0D EE 15 
1788c     F0 0D F9 01 | 	byte	$fe, $0d, $f8, $fe, $08, $f2, $10, $f8, $02, $0d, $ee, $15, $f0, $0d, $f9, $01
17890     02 06 00 06 
17894     F9 10 F6 15 
17898     F3 0B FE FD 
1789c     00 03 03 EE | 	byte	$02, $06, $00, $06, $f9, $10, $f6, $15, $f3, $0b, $fe, $fd, $00, $03, $03, $ee
178a0     18 E9 18 EA 
178a4     15 F1 09 F8 
178a8     0E F2 08 01 
178ac     02 01 03 FC | 	byte	$18, $e9, $18, $ea, $15, $f1, $09, $f8, $0e, $f2, $08, $01, $02, $01, $03, $fc
178b0     06 FC 02 01 
178b4     00 01 FF 00 
178b8     00 01 00 FC 
178bc     06 F6 12 EB | 	byte	$06, $fc, $02, $01, $00, $01, $ff, $00, $00, $01, $00, $fc, $06, $f6, $12, $eb
178c0     11 F8 05 F9 
178c4     0A F6 07 FC 
178c8     07 FA 03 06 
178cc     FD FE 07 FC | 	byte	$11, $f8, $05, $f9, $0a, $f6, $07, $fc, $07, $fa, $03, $06, $fd, $fe, $07, $fc
178d0     FC 0D F1 0F 
178d4     F2 10 F1 10 
178d8     F6 00 06 F8 
178dc     06 FD 00 F8 | 	byte	$fc, $0d, $f1, $0f, $f2, $10, $f1, $10, $f6, $00, $06, $f8, $06, $fd, $00, $f8
178e0     09 FC 05 F8 
178e4     08 F8 05 00 
178e8     FC 09 F1 12 
178ec     EB 15 F3 04 | 	byte	$09, $fc, $05, $f8, $08, $f8, $05, $00, $fc, $09, $f1, $12, $eb, $15, $f3, $04
178f0     04 F9 13 E9 
178f4     18 ED 0F F8 
178f8     07 FC 07 FF 
178fc     F8 0D F9 04 | 	byte	$04, $f9, $13, $e9, $18, $ed, $0f, $f8, $07, $fc, $07, $ff, $f8, $0d, $f9, $04
17900     FF 04 F7 0F 
17904     F6 05 FF 03 
17908     01 00 FE 04 
1790c     FE 01 FD 05 | 	byte	$ff, $04, $f7, $0f, $f6, $05, $ff, $03, $01, $00, $fe, $04, $fe, $01, $fd, $05
17910     FF 00 04 F9 
17914     10 F1 0E F2 
17918     15 EA 13 ED 
1791c     13 ED 0B F6 | 	byte	$ff, $00, $04, $f9, $10, $f1, $0e, $f2, $15, $ea, $13, $ed, $13, $ed, $0b, $f6
17920     0D EF 0E F3 
17924     0E EF 03 03 
17928     FA 06 FC 01 
1792c     00 03 F8 09 | 	byte	$0d, $ef, $0e, $f3, $0e, $ef, $03, $03, $fa, $06, $fc, $01, $00, $03, $f8, $09
17930     FB 04 F2 15 
17934     EF 0B F9 02 
17938     07 F3 11 F2 
1793c     0A FF F8 09 | 	byte	$fb, $04, $f2, $15, $ef, $0b, $f9, $02, $07, $f3, $11, $f2, $0a, $ff, $f8, $09
17940     F9 FF 0A F5 
17944     09 F1 12 EC 
17948     0E FC 05 F5 
1794c     0D F8 FF 02 | 	byte	$f9, $ff, $0a, $f5, $09, $f1, $12, $ec, $0e, $fc, $05, $f5, $0d, $f8, $ff, $02
17950     01 FF FD 0E 
17954     EF 0F F3 08 
17958     FC 02 FF 00 
1795c     01 03 FA 03 | 	byte	$01, $ff, $fd, $0e, $ef, $0f, $f3, $08, $fc, $02, $ff, $00, $01, $03, $fa, $03
17960     01 07 F6 0D 
17964     F9 04 FF 03 
17968     FB 06 FA FC 
1796c     03 FD 09 FB | 	byte	$01, $07, $f6, $0d, $f9, $04, $ff, $03, $fb, $06, $fa, $fc, $03, $fd, $09, $fb
17970     05 FB 07 FA 
17974     06 06 F5 11 
17978     EF 11 EF 14 
1797c     EE 12 F5 09 | 	byte	$05, $fb, $07, $fa, $06, $06, $f5, $11, $ef, $11, $ef, $14, $ee, $12, $f5, $09
17980     FD FC 00 0D 
17984     F1 13 EE 11 
17988     F1 13 F1 0B 
1798c     F5 0D EB 18 | 	byte	$fd, $fc, $00, $0d, $f1, $13, $ee, $11, $f1, $13, $f1, $0b, $f5, $0d, $eb, $18
17990     E0 16 F0 03 
17994     01 FA 0A F6 
17998     07 F7 0A F8 
1799c     06 02 FD 05 | 	byte	$e0, $16, $f0, $03, $01, $fa, $0a, $f6, $07, $f7, $0a, $f8, $06, $02, $fd, $05
179a0     FC 04 FC 05 
179a4     FC 04 FE FF 
179a8     03 FC 07 F5 
179ac     0E F3 09 FB | 	byte	$fc, $04, $fc, $05, $fc, $04, $fe, $ff, $03, $fc, $07, $f5, $0e, $f3, $09, $fb
179b0     02 01 03 FC 
179b4     08 F9 08 FD 
179b8     FD 09 FA 06 
179bc     FC 00 03 01 | 	byte	$02, $01, $03, $fc, $08, $f9, $08, $fd, $fd, $09, $fa, $06, $fc, $00, $03, $01
179c0     FE 07 FD 01 
179c4     0A F5 06 FF 
179c8     04 FD 03 FE 
179cc     06 F8 0D FB | 	byte	$fe, $07, $fd, $01, $0a, $f5, $06, $ff, $04, $fd, $03, $fe, $06, $f8, $0d, $fb
179d0     05 01 00 FC 
179d4     0F F2 0D F8 
179d8     11 EF 14 EF 
179dc     0E EE 16 EF | 	byte	$05, $01, $00, $fc, $0f, $f2, $0d, $f8, $11, $ef, $14, $ef, $0e, $ee, $16, $ef
179e0     02 06 F8 0A 
179e4     F6 06 FA 0E 
179e8     F1 09 FE 01 
179ec     04 F7 0A F9 | 	byte	$02, $06, $f8, $0a, $f6, $06, $fa, $0e, $f1, $09, $fe, $01, $04, $f7, $0a, $f9
179f0     03 FF FF 09 
179f4     F3 0E F5 0A 
179f8     F7 05 FC 03 
179fc     FA 0A F8 05 | 	byte	$03, $ff, $ff, $09, $f3, $0e, $f5, $0a, $f7, $05, $fc, $03, $fa, $0a, $f8, $05
17a00     FD 0B F5 0B 
17a04     F7 08 F9 06 
17a08     00 FC 07 F8 
17a0c     08 F7 10 EA | 	byte	$fd, $0b, $f5, $0b, $f7, $08, $f9, $06, $00, $fc, $07, $f8, $08, $f7, $10, $ea
17a10     1A EC 14 F5 
17a14     07 FD FD 03 
17a18     FF 03 FB 0B 
17a1c     F6 08 F8 09 | 	byte	$1a, $ec, $14, $f5, $07, $fd, $fd, $03, $ff, $03, $fb, $0b, $f6, $08, $f8, $09
17a20     FA 04 FD 08 
17a24     F5 0D F6 0B 
17a28     F8 07 F7 0A 
17a2c     FA 04 FF 03 | 	byte	$fa, $04, $fd, $08, $f5, $0d, $f6, $0b, $f8, $07, $f7, $0a, $fa, $04, $ff, $03
17a30     02 FB 07 F7 
17a34     08 FB 04 FD 
17a38     02 01 FD 07 
17a3c     FB 05 01 FF | 	byte	$02, $fb, $07, $f7, $08, $fb, $04, $fd, $02, $01, $fd, $07, $fb, $05, $01, $ff
17a40     03 F9 09 FB 
17a44     01 04 F9 08 
17a48     F9 02 02 FB 
17a4c     05 FA 05 FF | 	byte	$03, $f9, $09, $fb, $01, $04, $f9, $08, $f9, $02, $02, $fb, $05, $fa, $05, $ff
17a50     FF FF 08 F7 
17a54     03 01 00 05 
17a58     F6 0E EF 11 
17a5c     F0 0B F9 01 | 	byte	$ff, $ff, $08, $f7, $03, $01, $00, $05, $f6, $0e, $ef, $11, $f0, $0b, $f9, $01
17a60     02 FD 04 FE 
17a64     02 FA 0F F1 
17a68     0B F9 08 F9 
17a6c     04 FE FF 02 | 	byte	$02, $fd, $04, $fe, $02, $fa, $0f, $f1, $0b, $f9, $08, $f9, $04, $fe, $ff, $02
17a70     02 FC 06 FC 
17a74     03 FE 02 FE 
17a78     03 FB 04 FD 
17a7c     00 05 F7 08 | 	byte	$02, $fc, $06, $fc, $03, $fe, $02, $fe, $03, $fb, $04, $fd, $00, $05, $f7, $08
17a80     F9 0A F9 FF 
17a84     04 FE 01 03 
17a88     FF 02 FE 04 
17a8c     FF 04 FF 07 | 	byte	$f9, $0a, $f9, $ff, $04, $fe, $01, $03, $ff, $02, $fe, $04, $ff, $04, $ff, $07
17a90     01 01 00 07 
17a94     FB 04 01 01 
17a98     01 01 04 FF 
17a9c     02 04 FC 04 | 	byte	$01, $01, $00, $07, $fb, $04, $01, $01, $01, $01, $04, $ff, $02, $04, $fc, $04
17aa0     02 FB 08 FE 
17aa4     03 FD 0A F9 
17aa8     07 FD 04 FB 
17aac     03 01 02 02 | 	byte	$02, $fb, $08, $fe, $03, $fd, $0a, $f9, $07, $fd, $04, $fb, $03, $01, $02, $02
17ab0     01 00 FF 08 
17ab4     F7 09 FA 09 
17ab8     F9 08 F7 0E 
17abc     F5 09 FC 03 | 	byte	$01, $00, $ff, $08, $f7, $09, $fa, $09, $f9, $08, $f7, $0e, $f5, $09, $fc, $03
17ac0     FD 08 FC 09 
17ac4     F8 0B FA 04 
17ac8     01 02 03 FC 
17acc     09 F9 09 FA | 	byte	$fd, $08, $fc, $09, $f8, $0b, $fa, $04, $01, $02, $03, $fc, $09, $f9, $09, $fa
17ad0     0D F8 0D F6 
17ad4     0D F9 09 FA 
17ad8     07 FF 02 00 
17adc     03 01 06 FC | 	byte	$0d, $f8, $0d, $f6, $0d, $f9, $09, $fa, $07, $ff, $02, $00, $03, $01, $06, $fc
17ae0     0B F9 0A F6 
17ae4     12 F6 09 FD 
17ae8     07 FF FF 07 
17aec     FD 05 FF 05 | 	byte	$0b, $f9, $0a, $f6, $12, $f6, $09, $fd, $07, $ff, $ff, $07, $fd, $05, $ff, $05
17af0     FF 01 05 FA 
17af4     07 FC 01 02 
17af8     FF 00 FD 04 
17afc     FC 01 02 03 | 	byte	$ff, $01, $05, $fa, $07, $fc, $01, $02, $ff, $00, $fd, $04, $fc, $01, $02, $03
17b00     FC FD 05 FF 
17b04     02 FD 06 F8 
17b08     09 F5 08 FD 
17b0c     00 01 01 00 | 	byte	$fc, $fd, $05, $ff, $02, $fd, $06, $f8, $09, $f5, $08, $fd, $00, $01, $01, $00
17b10     02 FE 02 00 
17b14     02 FA 0A FC 
17b18     00 FC 03 FE 
17b1c     02 FF FE 08 | 	byte	$02, $fe, $02, $00, $02, $fa, $0a, $fc, $00, $fc, $03, $fe, $02, $ff, $fe, $08
17b20     F7 0D F7 06 
17b24     FA 09 F9 04 
17b28     FA 09 F6 0A 
17b2c     F9 05 FD 04 | 	byte	$f7, $0d, $f7, $06, $fa, $09, $f9, $04, $fa, $09, $f6, $0a, $f9, $05, $fd, $04
17b30     FA 0A FC 01 
17b34     FF 08 F9 06 
17b38     FD 03 FE 04 
17b3c     02 00 00 02 | 	byte	$fa, $0a, $fc, $01, $ff, $08, $f9, $06, $fd, $03, $fe, $04, $02, $00, $00, $02
17b40     01 00 03 FE 
17b44     07 FF FC 08 
17b48     F8 06 FD 01 
17b4c     FD 03 FF 05 | 	byte	$01, $00, $03, $fe, $07, $ff, $fc, $08, $f8, $06, $fd, $01, $fd, $03, $ff, $05
17b50     F7 11 F2 0A 
17b54     F9 0A F8 04 
17b58     FC 03 FE 03 
17b5c     FF FF 01 00 | 	byte	$f7, $11, $f2, $0a, $f9, $0a, $f8, $04, $fc, $03, $fe, $03, $ff, $ff, $01, $00
17b60     00 FF 02 01 
17b64     FD 04 00 FC 
17b68     07 F8 08 FC 
17b6c     06 F7 09 F7 | 	byte	$00, $ff, $02, $01, $fd, $04, $00, $fc, $07, $f8, $08, $fc, $06, $f7, $09, $f7
17b70     09 FB 01 FE 
17b74     06 F8 0B F8 
17b78     04 02 FF 01 
17b7c     03 FB 07 F9 | 	byte	$09, $fb, $01, $fe, $06, $f8, $0b, $f8, $04, $02, $ff, $01, $03, $fb, $07, $f9
17b80     04 01 00 02 
17b84     03 FA 07 FC 
17b88     02 FD 05 FD 
17b8c     01 01 00 00 | 	byte	$04, $01, $00, $02, $03, $fa, $07, $fc, $02, $fd, $05, $fd, $01, $01, $00, $00
17b90     02 02 FD 04 
17b94     FE 03 00 FF 
17b98     02 00 03 FC 
17b9c     0A FA 0A F7 | 	byte	$02, $02, $fd, $04, $fe, $03, $00, $ff, $02, $00, $03, $fc, $0a, $fa, $0a, $f7
17ba0     07 FD 01 FF 
17ba4     01 00 FE 01 
17ba8     FD 03 FF 01 
17bac     FF FF 03 F9 | 	byte	$07, $fd, $01, $ff, $01, $00, $fe, $01, $fd, $03, $ff, $01, $ff, $ff, $03, $f9
17bb0     0A F7 04 01 
17bb4     FE FF 02 00 
17bb8     01 00 00 01 
17bbc     00 FF 02 FC | 	byte	$0a, $f7, $04, $01, $fe, $ff, $02, $00, $01, $00, $00, $01, $00, $ff, $02, $fc
17bc0     06 FB 03 FC 
17bc4     08 F9 05 FF 
17bc8     FF 05 FC 03 
17bcc     FE 06 FB 07 | 	byte	$06, $fb, $03, $fc, $08, $f9, $05, $ff, $ff, $05, $fc, $03, $fe, $06, $fb, $07
17bd0     FD 04 FF 02 
17bd4     FF 01 01 00 
17bd8     FD 02 01 FD 
17bdc     03 FE 04 FB | 	byte	$fd, $04, $ff, $02, $ff, $01, $01, $00, $fd, $02, $01, $fd, $03, $fe, $04, $fb
17be0     06 FB 05 FD 
17be4     03 01 FD 03 
17be8     FB 06 FC 01 
17bec     FD 07 F7 07 | 	byte	$06, $fb, $05, $fd, $03, $01, $fd, $03, $fb, $06, $fc, $01, $fd, $07, $f7, $07
17bf0     F7 0A F9 07 
17bf4     FD 03 FF 03 
17bf8     FD 01 01 00 
17bfc     00 03 FD 01 | 	byte	$f7, $0a, $f9, $07, $fd, $03, $ff, $03, $fd, $01, $01, $00, $00, $03, $fd, $01
17c00     01 00 FE 04 
17c04     FF 00 01 FD 
17c08     05 F9 06 FC 
17c0c     04 FB 01 02 | 	byte	$01, $00, $fe, $04, $ff, $00, $01, $fd, $05, $f9, $06, $fc, $04, $fb, $01, $02
17c10     01 02 FB 05 
17c14     FC 04 FE FF 
17c18     00 02 FD 04 
17c1c     FE 02 FF 00 | 	byte	$01, $02, $fb, $05, $fc, $04, $fe, $ff, $00, $02, $fd, $04, $fe, $02, $ff, $00
17c20     01 02 FD 02 
17c24     FE 03 00 02 
17c28     FF 06 F9 07 
17c2c     FF FC 07 FF | 	byte	$01, $02, $fd, $02, $fe, $03, $00, $02, $ff, $06, $f9, $07, $ff, $fc, $07, $ff
17c30     02 FD 05 FC 
17c34     03 FF 03 FD 
17c38     03 FD 04 FD 
17c3c     04 FB 04 FB | 	byte	$02, $fd, $05, $fc, $03, $ff, $03, $fd, $03, $fd, $04, $fd, $04, $fb, $04, $fb
17c40     05 FB 06 F9 
17c44     05 FF 03 FC 
17c48     03 01 FE 06 
17c4c     FA 04 01 03 | 	byte	$05, $fb, $06, $f9, $05, $ff, $03, $fc, $03, $01, $fe, $06, $fa, $04, $01, $03
17c50     FD 02 00 FF 
17c54     01 01 01 03 
17c58     00 FE 02 02 
17c5c     00 02 00 04 | 	byte	$fd, $02, $00, $ff, $01, $01, $01, $03, $00, $fe, $02, $02, $00, $02, $00, $04
17c60     FF 04 01 FF 
17c64     02 02 FE FF 
17c68     06 FD 03 03 
17c6c     FC 06 FE 08 | 	byte	$ff, $04, $01, $ff, $02, $02, $fe, $ff, $06, $fd, $03, $03, $fc, $06, $fe, $08
17c70     FC 05 00 00 
17c74     00 00 00 00 
17c78     00 00 00 00 
17c7c     00 00 00 00 | 	byte	$fc, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
17c80     00 00 00 00 
17c84     00 00       | 	byte	$00[6]
17c86     E4 B1 EA 80 
17c8a     F5 0A 0B 02 
17c8e     15 9B 80 40 
17c92     D6 30 57 00 | 	byte	$e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57, $00
17c96     F2 58 E1 33 
17c9a     0F 9B 7C 41 
17c9e     90 94 3A AA 
17ca2     9D 0A AA E7 | 	byte	$f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa, $e7
17ca6     82 D2 E5 B0 
17caa     C0 DD C6 F1 
17cae     E9 08 06 E3 
17cb2     F2 78 6C AE | 	byte	$82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c, $ae
17cb6     17 7E 48 62 
17cba     44 F7 19 80 
17cbe     2C 64 3A 34 
17cc2     67 0D 1D 4A | 	byte	$17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d, $4a
17cc6     D3 08 2C 1B 
17cca     EE 3C FC B1 
17cce     F3 DF F0 DD 
17cd2     BD DC CF D5 | 	byte	$d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf, $d5
17cd6     CC D6 C3 A7 
17cda     EC EB 99 A5 
17cde     E2 E3 B9 9A 
17ce2     D3 10 E6 94 | 	byte	$cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6, $94
17ce6     E3 25 B7 BA 
17cea     31 B5 D9 21 
17cee     DF 08 09 50 
17cf2     1B EA 5A 28 | 	byte	$e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a, $28
17cf6     14 53 51 21 
17cfa     49 1A 27 65 
17cfe     55 3F 63 26 
17d02     1C 38 43 3F | 	byte	$14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43, $3f
17d06     38 2C 1A 27 
17d0a     20 22 36 47 
17d0e     22 23 F9 0E 
17d12     09 0B 48 CD | 	byte	$38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48, $cd
17d16     FD 25 EA 0B 
17d1a     F8 06 21 DA 
17d1e     28 F5 B4 E3 
17d22     0A F5 E0 F4 | 	byte	$fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0, $f4
17d26     F6 F0 AC D8 
17d2a     EA E4 CF D5 
17d2e     DF B9 D3 C9 
17d32     C5 C0 C4 BC | 	byte	$f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4, $bc
17d36     99 B8 A7 A3 
17d3a     B4 B5 BF B4 
17d3e     99 C5 B3 C4 
17d42     CE CB DF D2 | 	byte	$99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df, $d2
17d46     DA 01 E2 DC 
17d4a     E0 07 01 E3 
17d4e     F0 27 15 FA 
17d52     08 13 31 F9 | 	byte	$da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31, $f9
17d56     31 4A 17 2D 
17d5a     2D 54 38 4A 
17d5e     64 3B 4E 63 
17d62     62 51 77 49 | 	byte	$31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77, $49
17d66     57 79 60 5B 
17d6a     6E 5E 71 76 
17d6e     42 68 7D 62 
17d72     38 53 3B 4C | 	byte	$57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b, $4c
17d76     4A ED FA 63 
17d7a     2F FF 15 DF 
17d7e     05 08 DC EA 
17d82     E4 F3 01 C1 | 	byte	$4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01, $c1
17d86     A1 EE C2 D6 
17d8a     CE CE E3 D9 
17d8e     BD F2 C1 D4 
17d92     D0 DD B5 BF | 	byte	$a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5, $bf
17d96     BF D7 AA C6 
17d9a     C3 B8 B2 BC 
17d9e     B5 B2 A9 A2 
17da2     C3 BF AC A0 | 	byte	$bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac, $a0
17da6     C2 BF D4 CD 
17daa     89 C6 D9 A8 
17dae     C2 E8 DF AD 
17db2     CF EF E6 CB | 	byte	$c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6, $cb
17db6     FE D7 ED 02 
17dba     E1 12 FF FE 
17dbe     29 02 2A 26 
17dc2     2B 42 34 44 | 	byte	$fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34, $44
17dc6     46 56 43 6B 
17dca     71 55 6F 5F 
17dce     6A 6E 3F 5E 
17dd2     5E 59 66 6E | 	byte	$46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66, $6e
17dd6     64 59 38 21 
17dda     39 51 63 49 
17dde     56 55 1E 3D 
17de2     3D 28 F6 13 | 	byte	$64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6, $13
17de6     12 22 31 05 
17dea     FC 2B ED 1A 
17dee     DF 22 07 F3 
17df2     DC F3 ED FC | 	byte	$12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed, $fc
17df6     0A FC C1 F9 
17dfa     09 CA C8 B9 
17dfe     B9 DD E9 BF 
17e02     96 D9 E0 C2 | 	byte	$0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0, $c2
17e06     C2 AA CC A8 
17e0a     A6 C8 B8 8A 
17e0e     AE AD 98 AC 
17e12     89 D1 A5 AA | 	byte	$c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5, $aa
17e16     B7 D0 D5 AA 
17e1a     A7 B3 0B D2 
17e1e     D0 D8 02 DB 
17e22     F3 DF 03 D2 | 	byte	$b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03, $d2
17e26     0F 14 EC 1B 
17e2a     1A EB 22 3D 
17e2e     1B 04 40 32 
17e32     59 40 38 3C | 	byte	$0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38, $3c
17e36     31 4E 41 61 
17e3a     65 5F 4F 45 
17e3e     50 5F 6C 6D 
17e42     80 4F 40 6C | 	byte	$31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40, $6c
17e46     57 51 62 50 
17e4a     3D 45 32 47 
17e4e     1D 4C 2E F3 
17e52     1F 1F 3E 1B | 	byte	$57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e, $1b
17e56     EA 17 FD EA 
17e5a     EF 11 E4 CE 
17e5e     FC C9 DF B8 
17e62     BA BD D2 D7 | 	byte	$ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2, $d7
17e66     B3 C3 8B BD 
17e6a     C6 98 D2 97 
17e6e     8F E5 8F 9A 
17e72     B9 A1 95 E7 | 	byte	$b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95, $e7
17e76     AF 91 B3 CC 
17e7a     CB A0 CE DA 
17e7e     C2 B7 D2 F5 
17e82     D5 E8 E8 E0 | 	byte	$af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8, $e0
17e86     F3 10 CD FD 
17e8a     16 D2 1C 22 
17e8e     03 1B 08 43 
17e92     17 1C 2C 34 | 	byte	$f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c, $34
17e96     2A 37 26 4D 
17e9a     30 2E 2D 3D 
17e9e     53 30 6E 2C 
17ea2     4A 5B 3A 74 | 	byte	$2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a, $74
17ea6     4E 45 65 3C 
17eaa     48 45 5A 80 
17eae     2D 2B 37 45 
17eb2     55 4B 53 1D | 	byte	$4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53, $1d
17eb6     33 3F 45 2F 
17eba     03 2B 35 05 
17ebe     2A 15 F3 F5 
17ec2     E8 06 C5 DB | 	byte	$33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5, $db
17ec6     03 A5 D0 FE 
17eca     9E A9 BE AF 
17ece     E0 C6 81 BF 
17ed2     E5 AF B2 BE | 	byte	$03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2, $be
17ed6     B4 C8 AA 90 
17eda     C6 B6 DA BE 
17ede     99 16 AD AA 
17ee2     0E AC BB D9 | 	byte	$b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb, $d9
17ee6     CE 0C 9C 03 
17eea     FD AA 1C 02 
17eee     DC F5 D1 10 
17ef2     FF 09 F6 0A | 	byte	$ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6, $0a
17ef6     18 EB 49 1D 
17efa     2C 13 E3 23 
17efe     5A DC 14 4B 
17f02     F7 43 12 10 | 	byte	$18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12, $10
17f06     47 27 25 2A 
17f0a     26 3F 1E 44 
17f0e     29 19 53 35 
17f12     22 4B 26 15 | 	byte	$47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26, $15
17f16     67 1B 41 3A 
17f1a     21 5B 40 2B 
17f1e     34 2A 2B 50 
17f22     15 13 36 43 | 	byte	$67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36, $43
17f26     18 2D 16 EA 
17f2a     47 02 FF 14 
17f2e     0B 0F E5 0A 
17f32     16 C2 E7 1C | 	byte	$18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7, $1c
17f36     C7 F4 E7 F0 
17f3a     DD E5 E7 DF 
17f3e     8D E6 F3 AB 
17f42     EF DE DA D2 | 	byte	$c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da, $d2
17f46     B0 ED D2 AA 
17f4a     E7 EC A6 D8 
17f4e     C3 B1 F9 9E 
17f52     C4 C2 A3 CE | 	byte	$b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3, $ce
17f56     C6 C6 B5 91 
17f5a     FC C8 C1 FA 
17f5e     BD AB F1 D5 
17f62     D6 EE CA F6 | 	byte	$c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca, $f6
17f66     EC BD 31 FB 
17f6a     C1 FD F4 1A 
17f6e     2F F8 19 1D 
17f72     27 07 24 3B | 	byte	$ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24, $3b
17f76     31 0E 49 51 
17f7a     26 66 0B 45 
17f7e     5A 3B 4C 4C 
17f82     43 68 1E 74 | 	byte	$31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e, $74
17f86     35 25 70 49 
17f8a     2D 38 33 5D 
17f8e     25 33 31 32 
17f92     2A 44 45 2B | 	byte	$35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45, $2b
17f96     3D 21 0F 19 
17f9a     2F 24 30 0A 
17f9e     E6 47 01 E5 
17fa2     06 31 FD D3 | 	byte	$3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd, $d3
17fa6     15 DF 12 D0 
17faa     09 F8 CD FC 
17fae     EF CB E6 D3 
17fb2     E9 B8 E2 E5 | 	byte	$15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2, $e5
17fb6     C5 E7 BD D7 
17fba     F2 BA 90 D9 
17fbe     E2 B6 BD BD 
17fc2     C3 DF A9 C1 | 	byte	$c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9, $c1
17fc6     B6 C1 F6 9F 
17fca     8E C6 CF CB 
17fce     D5 CA B5 E1 
17fd2     B8 E2 DB D6 | 	byte	$b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db, $d6
17fd6     DD EC E5 FC 
17fda     F0 00 15 EC 
17fde     23 18 F3 0E 
17fe2     30 0A 42 47 | 	byte	$dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42, $47
17fe6     1B 19 31 30 
17fea     4D 2E 3D 40 
17fee     1C 50 45 2F 
17ff2     55 2A 32 4B | 	byte	$1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32, $4b
17ff6     24 42 31 30 
17ffa     27 40 3F 3F 
17ffe     62 38 1C 45 
18002     2F 43 04 40 | 	byte	$24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04, $40
18006     44 06 3E 15 
1800a     45 36 02 29 
1800e     1D 1E 1D EF 
18012     00 14 08 EF | 	byte	$44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08, $ef
18016     12 F4 EC F7 
1801a     EC E3 E6 E8 
1801e     EA FA D1 CD 
18022     B3 0B F9 AA | 	byte	$12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9, $aa
18026     A8 CC D6 D1 
1802a     D2 A2 B2 BE 
1802e     E1 C8 9C B8 
18032     BC CC A5 8E | 	byte	$a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5, $8e
18036     D7 DE C7 CB 
1803a     BD EA DF CF 
1803e     F8 C2 BE F2 
18042     EB FE C9 DC | 	byte	$d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9, $dc
18046     0E D2 13 F5 
1804a     CE 28 1F E8 
1804e     1D 04 F0 1A 
18052     1D 24 FE 04 | 	byte	$0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe, $04
18056     12 2C 0D 16 
1805a     12 32 32 12 
1805e     23 25 17 3C 
18062     29 2A 47 48 | 	byte	$12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47, $48
18066     07 46 41 32 
1806a     22 3B 0D 2A 
1806e     50 44 14 0E 
18072     60 57 2A 17 | 	byte	$07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a, $17
18076     2F 17 38 2C 
1807a     23 22 44 1E 
1807e     F0 0D 4A 15 
18082     20 EE 2A 02 | 	byte	$2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a, $02
18086     18 41 E1 E5 
1808a     2E F6 DC 04 
1808e     F6 EF DE E8 
18092     E2 FA C5 DF | 	byte	$18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5, $df
18096     F5 C8 C6 FE 
1809a     AD D4 E9 99 
1809e     0C EE BE F0 
180a2     A6 F5 BC DC | 	byte	$f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc, $dc
180a6     B9 D4 FA C9 
180aa     DA D2 A8 D0 
180ae     F0 E6 D6 E0 
180b2     DD CA C6 F9 | 	byte	$b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6, $f9
180b6     C5 D3 E8 00 
180ba     D9 DB CF EC 
180be     03 F1 F5 E0 
180c2     27 01 07 38 | 	byte	$c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07, $38
180c6     08 D5 39 14 
180ca     12 2A 17 11 
180ce     2E 15 0B 0C 
180d2     21 40 18 11 | 	byte	$08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18, $11
180d6     20 16 2A 59 
180da     1C 01 47 3B 
180de     46 38 0F 5F 
180e2     0F 32 3C 16 | 	byte	$20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c, $16
180e6     32 2E 31 1F 
180ea     48 18 1D 31 
180ee     06 44 1F 0D 
180f2     3E E7 05 3D | 	byte	$32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05, $3d
180f6     08 1E F9 1A 
180fa     FC 04 EE 18 
180fe     F4 FA 05 0A 
18102     EB 02 E7 1D | 	byte	$08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7, $1d
18106     D0 E9 F4 E5 
1810a     DB FA CA E0 
1810e     E3 BC 05 D4 
18112     C8 BF 05 D8 | 	byte	$d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05, $d8
18116     C6 E9 BF E6 
1811a     C9 D9 EA BB 
1811e     C8 EF D1 F9 
18122     DA D3 E9 BB | 	byte	$c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9, $bb
18126     D9 FB CE DF 
1812a     ED E9 DC FE 
1812e     F7 FE EF E4 
18132     0B D5 F0 FB | 	byte	$d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0, $fb
18136     1A 1D E3 0F 
1813a     1F F6 1D FA 
1813e     04 0A 19 27 
18142     03 0B 35 1F | 	byte	$1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35, $1f
18146     05 20 29 23 
1814a     08 2A 34 21 
1814e     0B 3B 4D 4F 
18152     00 49 30 2F | 	byte	$05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30, $2f
18156     36 03 04 2F 
1815a     20 33 02 0C 
1815e     49 1A 2C F2 
18162     05 08 03 28 | 	byte	$36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03, $28
18166     14 FE EB 00 
1816a     1D EF 13 1B 
1816e     DD FA 00 D7 
18172     FC 09 09 DE | 	byte	$14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09, $de
18176     E3 05 F9 F1 
1817a     CB DE 09 FC 
1817e     DA FA D1 E7 
18182     0C C0 1C EA | 	byte	$e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c, $ea
18186     9E FF E5 ED 
1818a     FD D3 EF EE 
1818e     FA 04 F0 E5 
18192     E8 EE FA E6 | 	byte	$9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa, $e6
18196     EB D3 EC 1C 
1819a     F5 DC F8 E9 
1819e     E5 14 EB F1 
181a2     E8 ED 13 19 | 	byte	$eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13, $19
181a6     03 C4 04 06 
181aa     F2 0F 07 E2 
181ae     0F 1C 02 EB 
181b2     FE 09 1D 08 | 	byte	$03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d, $08
181b6     1A 2C 0C 00 
181ba     1C 26 07 06 
181be     11 16 12 3C 
181c2     DE FE 1E 08 | 	byte	$1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e, $08
181c6     15 1D 12 FB 
181ca     3C E9 0D 12 
181ce     1A 0D 02 15 
181d2     23 1D E9 01 | 	byte	$15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9, $01
181d6     FC 1A 1F 14 
181da     F9 F1 02 26 
181de     21 E3 02 13 
181e2     E3 12 FD 11 | 	byte	$fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd, $11
181e6     E6 02 F1 12 
181ea     F5 0B 0A E7 
181ee     EB 11 F1 E4 
181f2     0A 0F 15 0A | 	byte	$e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15, $0a
181f6     F0 06 FB FB 
181fa     EE 09 F1 E9 
181fe     F6 12 F5 05 
18202     FB F1 E7 41 | 	byte	$f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7, $41
18206     E8 E5 08 D7 
1820a     0E 00 0B E1 
1820e     E6 08 00 EE 
18212     EF DA FC EE | 	byte	$e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc, $ee
18216     EB 15 F2 04 
1821a     F8 DC 24 03 
1821e     F3 F7 E7 F4 
18222     04 F8 01 ED | 	byte	$eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01, $ed
18226     FB 10 F5 ED 
1822a     04 0A ED DF 
1822e     05 01 13 E1 
18232     FF 09 ED 1A | 	byte	$fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed, $1a
18236     15 FE F6 E1 
1823a     10 24 1B E7 
1823e     0F 0F 1B 25 
18242     EE EF 27 14 | 	byte	$15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27, $14
18246     FD 12 F6 19 
1824a     1C 10 10 EB 
1824e     FE 34 0C FB 
18252     0E 06 38 FD | 	byte	$fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38, $fd
18256     FD 22 D8 0C 
1825a     1C 07 0A 19 
1825e     E6 1A 0B 09 
18262     1C E6 01 1C | 	byte	$fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01, $1c
18266     F0 04 18 1C 
1826a     EE E4 07 05 
1826e     FC 04 06 E0 
18272     E7 11 01 F7 | 	byte	$f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01, $f7
18276     0D DB 0A F9 
1827a     EC FB 15 08 
1827e     DE 02 10 CD 
18282     03 1E EB EA | 	byte	$0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb, $ea
18286     E4 E4 06 FC 
1828a     FD EC D4 0F 
1828e     09 F2 03 02 
18292     D5 13 F1 E3 | 	byte	$e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1, $e3
18296     02 15 E5 0F 
1829a     08 EF F8 DD 
1829e     F7 02 09 02 
182a2     FD 02 00 EE | 	byte	$02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00, $ee
182a6     0D FF 1E F3 
182aa     EC 03 0B F0 
182ae     0A 0A F5 FB 
182b2     0F 05 ED 0D | 	byte	$0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed, $0d
182b6     1B 11 FB 0A 
182ba     02 19 2E 1F 
182be     F2 24 FE F8 
182c2     0B 25 12 0D | 	byte	$1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12, $0d
182c6     00 1A EB E9 
182ca     2B 20 0B E8 
182ce     FA 21 22 F7 
182d2     EA 19 11 03 | 	byte	$00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11, $03
182d6     F7 FE 12 0E 
182da     FD 15 04 06 
182de     FD 01 17 F0 
182e2     19 0D F7 01 | 	byte	$f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7, $01
182e6     F7 09 0C F1 
182ea     19 0D E2 F7 
182ee     03 E5 04 F2 
182f2     FF FE E8 01 | 	byte	$f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8, $01
182f6     02 E2 0E FF 
182fa     FD DC F1 16 
182fe     D4 F2 EF FA 
18302     01 01 0B FB | 	byte	$02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b, $fb
18306     D4 F0 1C 20 
1830a     E3 D7 10 F5 
1830e     01 0A D5 01 
18312     08 E9 F7 EE | 	byte	$d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7, $ee
18316     09 EF 16 FD 
1831a     F5 0E 06 14 
1831e     E2 0E 14 1A 
18322     0C F8 F6 10 | 	byte	$09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6, $10
18326     20 03 F0 EF 
1832a     17 F7 33 0F 
1832e     D4 0E 0C 00 
18332     05 FD 0C 00 | 	byte	$20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c, $00
18336     16 03 F6 0F 
1833a     EA 0E 12 0F 
1833e     01 F6 F8 0E 
18342     09 04 E1 FB | 	byte	$16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1, $fb
18346     0D 02 03 06 
1834a     18 02 09 04 
1834e     EE 18 0B EB 
18352     1D 05 E6 F8 | 	byte	$0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6, $f8
18356     0E 07 25 08 
1835a     D9 11 0C EE 
1835e     26 11 F0 FE 
18362     01 1D FC 14 | 	byte	$0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc, $14
18366     06 0C 10 F1 
1836a     09 EA EC 22 
1836e     03 F2 05 EE 
18372     16 15 00 FB | 	byte	$06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00, $fb
18376     0E D8 FD 05 
1837a     0D FD FB E9 
1837e     EA 09 E8 F8 
18382     F9 EF DF 16 | 	byte	$0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df, $16
18386     FA 01 E5 FD 
1838a     F3 03 FE ED 
1838e     E8 F2 EA 07 
18392     07 F9 F4 EF | 	byte	$fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4, $ef
18396     EE FB 0B EC 
1839a     EC F7 FA 0A 
1839e     F0 10 F5 ED 
183a2     10 0A 04 F3 | 	byte	$ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04, $f3
183a6     15 F6 F4 0D 
183aa     FC 0C 1F 0F 
183ae     FD 01 F7 23 
183b2     FC 04 2F 09 | 	byte	$15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f, $09
183b6     F9 12 0B 0F 
183ba     2E F8 12 10 
183be     00 26 10 E6 
183c2     1E FD 12 15 | 	byte	$f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12, $15
183c6     FB 01 20 0E 
183ca     EF 1A F4 FC 
183ce     13 10 F8 11 
183d2     15 10 FA FA | 	byte	$fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa, $fa
183d6     FF 08 08 09 
183da     F0 EA 02 15 
183de     E1 F3 0D E8 
183e2     03 06 EF E0 | 	byte	$ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef, $e0
183e6     F8 01 06 EB 
183ea     FD 0D FB EE 
183ee     01 EE ED 05 
183f2     05 01 E8 DE | 	byte	$f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8, $de
183f6     18 FD F4 F4 
183fa     E4 FA F1 FA 
183fe     FA FE 04 E6 
18402     E9 03 D3 0D | 	byte	$18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3, $0d
18406     FA FD EB FA 
1840a     04 02 FD EE 
1840e     EF 2D EE 0C 
18412     03 F3 FB FB | 	byte	$fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb, $fb
18416     02 04 09 18 
1841a     F7 17 1D FC 
1841e     FD 12 21 15 
18422     01 0D 07 13 | 	byte	$02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07, $13
18426     FA F4 1F 1B 
1842a     1B F6 F4 18 
1842e     0B 16 FC E3 
18432     10 1D 1E 01 | 	byte	$fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e, $01
18436     E6 10 11 E7 
1843a     EF 22 0A F8 
1843e     09 F9 E7 15 
18442     FD 01 F2 F0 | 	byte	$e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2, $f0
18446     13 F6 F0 FD 
1844a     11 F1 F8 0C 
1844e     F8 06 0A FD 
18452     F4 0C 05 EC | 	byte	$13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05, $ec
18456     FC FC FF 0C 
1845a     F2 02 11 EC 
1845e     DD 20 0A 0F 
18462     E6 FD FF 0D | 	byte	$fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff, $0d
18466     03 EB 17 FB 
1846a     FC F3 F4 EF 
1846e     07 0B FD F5 
18472     00 DE 06 F8 | 	byte	$03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06, $f8
18476     E8 E9 05 0F 
1847a     FC F2 DB 0C 
1847e     09 E7 F6 08 
18482     04 EF F8 0A | 	byte	$e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8, $0a
18486     F3 10 1D 00 
1848a     03 E5 01 1C 
1848e     07 07 12 FA 
18492     0D 18 F2 15 | 	byte	$f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2, $15
18496     1B 04 F2 0D 
1849a     10 FB 09 FC 
1849e     0C 13 FA 07 
184a2     33 EF FD 20 | 	byte	$1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd, $20
184a6     0C FE 0C FB 
184aa     15 0C 0E 08 
184ae     F9 F0 11 18 
184b2     F6 DB 19 03 | 	byte	$0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19, $03
184b6     05 02 E0 05 
184ba     05 F5 04 04 
184be     05 04 06 E9 
184c2     EF 1A 0A 06 | 	byte	$05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a, $06
184c6     FE 00 07 0B 
184ca     FB E6 FD FC 
184ce     10 FA FC E0 
184d2     F0 0A EA F1 | 	byte	$fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea, $f1
184d6     E8 E5 F7 FC 
184da     EA FD F8 DB 
184de     06 F7 E6 FA 
184e2     04 FD E9 E9 | 	byte	$e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9, $e9
184e6     06 07 0A E8 
184ea     12 16 01 00 
184ee     F3 FF 2F 0A 
184f2     F8 0D 20 10 | 	byte	$06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20, $10
184f6     08 ED 13 1B 
184fa     0E 0D F3 03 
184fe     16 FC 0E 08 
18502     06 08 FD 09 | 	byte	$08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd, $09
18506     0D 20 FC EF 
1850a     18 0D F7 0F 
1850e     EE FE 05 0B 
18512     EE ED 1A 1D | 	byte	$0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a, $1d
18516     F6 08 F1 F5 
1851a     04 FF 1E EA 
1851e     F0 10 FE 06 
18522     19 FF FE 00 | 	byte	$f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe, $00
18526     FD 02 0B FA 
1852a     01 0C 00 F3 
1852e     02 08 0B F5 
18532     0C FC F8 E2 | 	byte	$fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8, $e2
18536     0B FD FA F5 
1853a     EB FC F7 E0 
1853e     F6 FF 15 F6 
18542     EE F5 E6 E4 | 	byte	$0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6, $e4
18546     FF FF 06 E9 
1854a     F2 F2 FC 03 
1854e     FE 06 FF EE 
18552     13 05 F4 0F | 	byte	$ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4, $0f
18556     1D 23 00 08 
1855a     15 01 00 23 
1855e     0E 03 13 02 
18562     1B 08 12 0F | 	byte	$1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12, $0f
18566     02 09 FD 11 
1856a     03 08 01 05 
1856e     03 16 08 0B 
18572     FE 05 04 0B | 	byte	$02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04, $0b
18576     E3 FB 1D 03 
1857a     05 01 09 09 
1857e     01 FD FF ED 
18582     EC 08 0A F5 | 	byte	$e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a, $f5
18586     E5 F7 16 01 
1858a     F9 E2 FA E1 
1858e     06 01 F9 02 
18592     F1 E0 FB 0C | 	byte	$e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb, $0c
18596     06 E9 DD F6 
1859a     14 01 08 EC 
1859e     FD 0A 03 01 
185a2     EB F7 00 10 | 	byte	$06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00, $10
185a6     E7 00 08 06 
185aa     11 FA EF 13 
185ae     EF F4 05 0E 
185b2     FE F6 F7 20 | 	byte	$e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7, $20
185b6     FB 04 02 FE 
185ba     01 F4 0F 2C 
185be     09 02 09 01 
185c2     0F 13 08 F6 | 	byte	$fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08, $f6
185c6     0F 14 0D FA 
185ca     08 15 F5 31 
185ce     11 E5 0A 11 
185d2     02 19 11 FD | 	byte	$0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11, $fd
185d6     FB 0D 0C FA 
185da     03 05 00 00 
185de     01 03 05 08 
185e2     09 01 D9 12 | 	byte	$fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9, $12
185e6     04 E2 04 07 
185ea     F8 E6 FC ED 
185ee     01 0B F3 FC 
185f2     ED FF 05 EC | 	byte	$04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05, $ec
185f6     F4 0C FF F8 
185fa     F3 F7 F7 08 
185fe     F4 F9 03 F4 
18602     F4 F5 F2 FD | 	byte	$f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2, $fd
18606     0A F7 FE F7 
1860a     ED 08 10 EF 
1860e     FD F3 01 03 
18612     F2 F8 F1 08 | 	byte	$0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1, $08
18616     FE 08 FA F2 
1861a     FA 10 05 F2 
1861e     03 03 18 07 
18622     E9 17 18 04 | 	byte	$fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18, $04
18626     0B 10 0C FC 
1862a     16 FE 09 1C 
1862e     0B 10 09 14 
18632     1C 11 14 0B | 	byte	$0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14, $0b
18636     06 05 0F 0F 
1863a     18 19 17 F4 
1863e     0E 07 12 18 
18642     06 EF 0B 12 | 	byte	$06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b, $12
18646     FA FB F5 02 
1864a     02 06 FD F3 
1864e     E9 F3 F6 EF 
18652     FC FB E8 EA | 	byte	$fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8, $ea
18656     EF F3 F8 FC 
1865a     F2 F2 EB DD 
1865e     E8 10 F9 F1 
18662     04 FA E2 F5 | 	byte	$ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2, $f5
18666     FC F2 05 00 
1866a     E8 F5 03 FB 
1866e     E7 FD 01 FC 
18672     F1 03 03 F3 | 	byte	$fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03, $f3
18676     F0 FC F8 01 
1867a     FB 0C EA 08 
1867e     15 09 FC FA 
18682     0A 00 F7 19 | 	byte	$f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7, $19
18686     08 09 F9 0C 
1868a     0F 0A 08 1A 
1868e     FA 1F 10 03 
18692     FC 0D 27 18 | 	byte	$08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27, $18
18696     07 10 06 1A 
1869a     18 16 F7 21 
1869e     13 0D 1F F7 
186a2     1A 0B 09 FE | 	byte	$07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09, $fe
186a6     17 11 1E F1 
186aa     F2 0E 1D FD 
186ae     00 F4 F5 14 
186b2     00 F5 F3 FC | 	byte	$17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3, $fc
186b6     FE ED F9 F1 
186ba     F9 F2 01 F7 
186be     F3 FB E6 F4 
186c2     F0 FE EB EB | 	byte	$fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb, $eb
186c6     F3 E7 F6 EE 
186ca     F3 E6 E4 08 
186ce     F3 DF EC FB 
186d2     00 F1 F8 F5 | 	byte	$f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8, $f5
186d6     F3 F4 FE 09 
186da     F5 F9 FF 02 
186de     0A FC FE F9 
186e2     0D 06 F9 07 | 	byte	$f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9, $07
186e6     17 11 05 FF 
186ea     EE 05 0E 0E 
186ee     0E 17 F5 03 
186f2     10 05 08 12 | 	byte	$17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08, $12
186f6     12 FE 0A 22 
186fa     1B FE 16 17 
186fe     16 FF 0B 23 
18702     14 0A 0D 10 | 	byte	$12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d, $10
18706     03 11 14 02 
1870a     FC 13 12 17 
1870e     F5 04 0D 02 
18712     04 0F F0 FB | 	byte	$03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0, $fb
18716     0E 08 F2 F8 
1871a     F9 0E F6 F6 
1871e     01 F9 F5 EB 
18722     F8 02 F7 FA | 	byte	$0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7, $fa
18726     F0 05 F6 05 
1872a     E7 E0 0A F2 
1872e     02 FE EC F3 
18732     09 F7 EC F5 | 	byte	$f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec, $f5
18736     F5 EF 03 F7 
1873a     F9 08 FB EA 
1873e     05 F1 FD FC 
18742     0B F5 F4 F1 | 	byte	$f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4, $f1
18746     F1 08 11 FE 
1874a     E6 FE F1 0C 
1874e     12 03 F4 FD 
18752     06 12 12 F3 | 	byte	$f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12, $f3
18756     0C 02 12 F4 
1875a     0F 02 08 09 
1875e     10 11 02 FC 
18762     10 17 F7 05 | 	byte	$0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7, $05
18766     0D 1A 08 00 
1876a     0F 07 F8 0F 
1876e     12 0A 1C 08 
18772     FB 0C 15 12 | 	byte	$0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15, $12
18776     F9 0F 1A 0E 
1877a     FD 13 13 04 
1877e     02 04 02 F6 
18782     11 03 03 0A | 	byte	$f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03, $0a
18786     E8 01 FC FB 
1878a     EF 0A 06 EE 
1878e     F2 FA E6 F6 
18792     F9 04 F2 DF | 	byte	$e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2, $df
18796     F8 FC F0 EB 
1879a     E4 FD FC F4 
1879e     F6 F0 FB F3 
187a2     FA 00 EA 08 | 	byte	$f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea, $08
187a6     F3 E0 01 FC 
187aa     E1 17 03 E4 
187ae     FF FD FF 02 
187b2     ED 09 FF F5 | 	byte	$f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff, $f5
187b6     F7 0B 03 08 
187ba     09 05 00 F6 
187be     1B F4 06 1F 
187c2     01 F8 FD 0D | 	byte	$f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd, $0d
187c6     11 09 08 06 
187ca     0C 02 0E 03 
187ce     FB 1D 0A 11 
187d2     08 F8 16 20 | 	byte	$11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16, $20
187d6     F9 07 12 FD 
187da     0D 15 08 FD 
187de     0F 03 17 00 
187e2     FE 08 1F 00 | 	byte	$f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f, $00
187e6     04 11 F8 01 
187ea     01 F7 14 03 
187ee     00 01 F7 05 
187f2     FD F1 FE 19 | 	byte	$04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe, $19
187f6     02 EB F4 F5 
187fa     01 08 EF FE 
187fe     00 F9 EB FD 
18802     F5 FC F2 F8 | 	byte	$02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2, $f8
18806     FD F3 F1 06 
1880a     F1 FC F6 FB 
1880e     F9 02 F6 F3 
18812     01 FA 02 FB | 	byte	$fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02, $fb
18816     FD F6 FC 0B 
1881a     F5 F6 FE F8 
1881e     04 FE FE FC 
18822     12 02 F2 06 | 	byte	$fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2, $06
18826     0B FF 04 FB 
1882a     0F FC 0F 10 
1882e     F9 11 0B FD 
18832     F6 09 1C 0B | 	byte	$0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c, $0b
18836     00 04 06 18 
1883a     0C F8 F5 14 
1883e     0C 02 10 FE 
18842     03 06 03 08 | 	byte	$00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03, $08
18846     06 FE 01 0F 
1884a     03 FB 01 07 
1884e     09 07 0A 0B 
18852     F4 FC 07 01 | 	byte	$06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07, $01
18856     FD 0B FD FF 
1885a     F9 09 F4 EF 
1885e     0A 02 F6 FD 
18862     F5 F4 FF 10 | 	byte	$fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff, $10
18866     03 ED 02 F8 
1886a     F4 F9 0A FD 
1886e     F8 FE FF F9 
18872     FD 02 EC 06 | 	byte	$03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec, $06
18876     F7 FB FE 04 
1887a     FD 01 FD FC 
1887e     F3 01 FB FF 
18882     FB FF 0A F9 | 	byte	$f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a, $f9
18886     FD FE 04 0B 
1888a     F9 F5 08 0E 
1888e     FE FF 0E 00 
18892     06 05 0B 0A | 	byte	$fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b, $0a
18896     FD 09 10 F1 
1889a     06 08 FC 0A 
1889e     FD FF 06 01 
188a2     FB 08 F6 F9 | 	byte	$fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6, $f9
188a6     07 10 FA FA 
188aa     F4 0D 09 01 
188ae     00 F8 F9 0B 
188b2     FC F1 0B 0F | 	byte	$07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b, $0f
188b6     05 FA 0B F5 
188ba     01 08 09 FF 
188be     F1 03 04 07 
188c2     06 FF 04 FA | 	byte	$05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04, $fa
188c6     FC FC 14 00 
188ca     F4 FB 03 FA 
188ce     0E 02 F5 06 
188d2     FD 00 FA 03 | 	byte	$fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa, $03
188d6     00 0F 04 F7 
188da     FF 02 0E FC 
188de     F7 10 09 EB 
188e2     06 11 FD FE | 	byte	$00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd, $fe
188e6     F1 FB 0A FE 
188ea     FF FA FD 08 
188ee     07 04 ED F9 
188f2     02 08 0A FE | 	byte	$f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a, $fe
188f6     00 FD 03 08 
188fa     FE 06 00 07 
188fe     01 FA 03 0D 
18902     FA FF 02 03 | 	byte	$00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02, $03
18906     08 11 F6 09 
1890a     FF F9 06 07 
1890e     F5 0C FC 0B 
18912     F7 F4 00 08 | 	byte	$08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00, $08
18916     F6 02 FB 05 
1891a     F7 FC 03 07 
1891e     0C F1 FA 15 
18922     F2 00 FD F5 | 	byte	$f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd, $f5
18926     18 03 ED 07 
1892a     F2 0B 0A 09 
1892e     FB 0F FE 02 
18932     0E F9 F7 0D | 	byte	$18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7, $0d
18936     0A F7 FE 0A 
1893a     02 F8 03 0C 
1893e     F3 07 05 FA 
18942     F2 06 FE 03 | 	byte	$0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe, $03
18946     0A EC 03 03 
1894a     FC 06 F6 F9 
1894e     0E 05 F4 FC 
18952     FB 06 0F F8 | 	byte	$0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f, $f8
18956     FB FF FB FF 
1895a     19 FB F5 FE 
1895e     FD 0A 07 0A 
18962     F8 04 04 10 | 	byte	$fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04, $10
18966     06 FC 0E FB 
1896a     F6 0C 14 F6 
1896e     FA 12 08 08 
18972     FE 08 04 01 | 	byte	$06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04, $01
18976     00 10 0B 05 
1897a     02 F6 0B 0B 
1897e     FE 04 01 F5 
18982     FA 0C FF F1 | 	byte	$00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff, $f1
18986     0A 08 F8 02 
1898a     FD FC 04 F7 
1898e     FF FA F3 12 
18992     F7 EF FD 0D | 	byte	$0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd, $0d
18996     FA F5 05 FA 
1899a     EE 10 F3 F4 
1899e     05 FC 00 04 
189a2     F9 09 FB F0 | 	byte	$fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb, $f0
189a6     FB 0D 01 FA 
189aa     F6 FF 0A 06 
189ae     EA 02 FF F7 
189b2     05 FE 07 01 | 	byte	$fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07, $01
189b6     FB FA 0F 0D 
189ba     F0 FE 09 0A 
189be     FD FE 01 0B 
189c2     00 01 10 04 | 	byte	$fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10, $04
189c6     FE 01 09 FE 
189ca     03 03 0A 05 
189ce     FF 10 07 F7 
189d2     02 0F 0E ED | 	byte	$fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e, $ed
189d6     05 0B FF FF 
189da     0A 08 FB 06 
189de     09 F2 05 10 
189e2     FE FB 02 07 | 	byte	$05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02, $07
189e6     06 08 F8 F4 
189ea     07 FD FF 08 
189ee     FA 02 0D FD 
189f2     E8 00 04 04 | 	byte	$06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04, $04
189f6     05 F3 F4 0D 
189fa     09 09 EC F9 
189fe     0E F7 FF FB 
18a02     FE 0E 04 F2 | 	byte	$05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04, $f2
18a06     08 FB F5 FE 
18a0a     F4 FD 05 05 
18a0e     F0 08 F3 FE 
18a12     FF F2 FB 00 | 	byte	$08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb, $00
18a16     FD F9 04 FD 
18a1a     FC FC 04 FC 
18a1e     F8 07 F1 FC 
18a22     FD 04 01 FE | 	byte	$fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01, $fe
18a26     F9 03 FE 16 
18a2a     06 FA E8 14 
18a2e     13 FB FD 10 
18a32     03 FE 0C 04 | 	byte	$f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c, $04
18a36     F7 01 0C 01 
18a3a     F7 0B 0A 0A 
18a3e     00 03 00 03 
18a42     0D 07 02 FE | 	byte	$f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02, $fe
18a46     13 08 03 04 
18a4a     01 0C 0A F8 
18a4e     03 13 FD 01 
18a52     07 F5 14 15 | 	byte	$13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14, $15
18a56     F7 F7 0C FF 
18a5a     FF FF FA 08 
18a5e     00 01 0B FE 
18a62     F6 FD FD 05 | 	byte	$f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd, $05
18a66     00 FB F6 02 
18a6a     FA 03 09 02 
18a6e     F0 F9 F6 06 
18a72     FE FB 04 F5 | 	byte	$00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04, $f5
18a76     F6 02 F9 06 
18a7a     FA EF 01 05 
18a7e     F9 FD 00 FD 
18a82     06 00 F8 00 | 	byte	$f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8, $00
18a86     FF 03 05 F7 
18a8a     FB 06 F7 00 
18a8e     00 08 FB F9 
18a92     FF 04 03 0A | 	byte	$ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03, $0a
18a96     F6 F6 07 01 
18a9a     F9 05 F8 08 
18a9e     01 08 05 01 
18aa2     FB 0C 00 F5 | 	byte	$f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00, $f5
18aa6     00 0A FD 01 
18aaa     15 FE 00 FC 
18aae     10 0A FD FB 
18ab2     07 FF F9 0B | 	byte	$00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9, $0b
18ab6     03 01 0D FB 
18aba     F7 13 07 02 
18abe     03 F1 0B 0E 
18ac2     07 FA 02 F4 | 	byte	$03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02, $f4
18ac6     11 0C FA F9 
18aca     0E 01 05 FF 
18ace     FE FD 07 02 
18ad2     01 03 FE FE | 	byte	$11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe, $fe
18ad6     09 F6 0C 01 
18ada     F9 F3 0A 05 
18ade     FA F8 FF 11 
18ae2     05 F2 F5 07 | 	byte	$09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5, $07
18ae6     08 08 FB FB 
18aea     07 FB 04 03 
18aee     F7 00 F9 FE 
18af2     0B 02 F8 09 | 	byte	$08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8, $09
18af6     FC 05 F8 F9 
18afa     0A FE 08 0F 
18afe     FA F6 FF 09 
18b02     0D FD F9 08 | 	byte	$fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9, $08
18b06     FF 04 04 FA 
18b0a     01 0E F8 01 
18b0e     03 01 FD FF 
18b12     01 01 FB 06 | 	byte	$ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb, $06
18b16     FF F3 0F 13 
18b1a     F4 F8 00 05 
18b1e     0E 03 F8 07 
18b22     FF F7 04 FC | 	byte	$ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04, $fc
18b26     F8 11 0A FA 
18b2a     FA FC FE FF 
18b2e     FD 11 FE F1 
18b32     07 03 FD 00 | 	byte	$f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd, $00
18b36     F4 0B 06 F4 
18b3a     FA 0D 03 F2 
18b3e     03 07 FA 00 
18b42     08 05 FF FC | 	byte	$f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff, $fc
18b46     0D FE F1 06 
18b4a     0F FD F8 05 
18b4e     07 07 F9 F9 
18b52     0A FF FE 0E | 	byte	$0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe, $0e
18b56     01 FA 02 05 
18b5a     FF 01 00 09 
18b5e     05 02 0C 0C 
18b62     0C F9 01 00 | 	byte	$01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01, $00
18b66     FE 0E 08 F2 
18b6a     03 0A 08 01 
18b6e     FE FA 04 FA 
18b72     06 FF FE 04 | 	byte	$fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe, $04
18b76     01 00 FC FA 
18b7a     03 09 F2 FE 
18b7e     FF 06 F9 02 
18b82     FD 01 0B F0 | 	byte	$01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b, $f0
18b86     F9 08 05 04 
18b8a     0B F7 00 00 
18b8e     01 01 07 F4 
18b92     FC 07 05 00 | 	byte	$f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05, $00
18b96     ED 0E 09 F0 
18b9a     05 02 FD 09 
18b9e     FB F9 F6 11 
18ba2     F8 05 02 01 | 	byte	$ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02, $01
18ba6     ED 02 0B F6 
18baa     F7 06 F9 FA 
18bae     07 F4 F5 0B 
18bb2     F0 F9 01 04 | 	byte	$ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01, $04
18bb6     FA FA F8 01 
18bba     FF 01 08 FA 
18bbe     FD 01 05 06 
18bc2     FC 05 FF 02 | 	byte	$fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff, $02
18bc6     15 FF F5 15 
18bca     01 F8 0F 04 
18bce     08 04 0B 02 
18bd2     00 12 14 05 | 	byte	$15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14, $05
18bd6     FA 0C 02 0B 
18bda     0F 05 FE 09 
18bde     08 FE 06 0E 
18be2     08 F5 09 07 | 	byte	$fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09, $07
18be6     0A 0B 03 FB 
18bea     04 F5 0A 10 
18bee     05 F6 06 FD 
18bf2     06 00 01 08 | 	byte	$0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01, $08
18bf6     FA FF 03 FD 
18bfa     FE F6 FA F7 
18bfe     04 0A F5 01 
18c02     FC FF F1 07 | 	byte	$fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1, $07
18c06     03 F6 EF FE 
18c0a     FC FF 01 F8 
18c0e     F4 F4 FB FF 
18c12     F1 FD 00 FB | 	byte	$03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00, $fb
18c16     F3 F5 F8 F9 
18c1a     01 03 E9 FE 
18c1e     FF FB FE F9 
18c22     00 00 00 00 | 	byte	$f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00, $00, $00
18c26     7F 7F 7F 7F 
      ...             
18c3e     7F 7F 7F 7F 
18c42     7F 7F 7F 7F | 	byte	$7f[32]
18c46     71 5B 66 31 
18c4a     4A 17 B2 80 
18c4e     83 C0 E8 BB 
18c52     A0 B8 9D 80 | 	byte	$71, $5b, $66, $31, $4a, $17, $b2, $80, $83, $c0, $e8, $bb, $a0, $b8, $9d, $80
18c56     80 81 81 81 
18c5a     81 81 81 81 
18c5e     81 81 81 81 
18c62     81 81 81 81 | 	byte	$80, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
18c66     81 81 81 81 
      ...             
18cae     81 81 81 81 
18cb2     81          | 	byte	$81[77]
18cb3     82 96 BF C9 
18cb7     06 32 29 32 
18cbb     51 7A 7F 7F 
18cbf     7F 7F 7F 7F | 	byte	$82, $96, $bf, $c9, $06, $32, $29, $32, $51, $7a, $7f, $7f, $7f, $7f, $7f, $7f
18cc3     7F 7F 7F 7F 
      ...             
18ceb     7F 7F 7F 7F 
18cef     7F 7F 7F    | 	byte	$7f[47]
18cf2     6B 1D 30 5E 
18cf6     6E 44 EC DE 
18cfa     15 30 10 01 
18cfe     E2 D3 FA 17 | 	byte	$6b, $1d, $30, $5e, $6e, $44, $ec, $de, $15, $30, $10, $01, $e2, $d3, $fa, $17
18d02     E8 9F 9B AC 
18d06     B1 AB C6 F0 
18d0a     EC A2 80 A0 
18d0e     B1 87 80 80 | 	byte	$e8, $9f, $9b, $ac, $b1, $ab, $c6, $f0, $ec, $a2, $80, $a0, $b1, $87, $80, $80
18d12     81 81 81 81 
      ...             
18d6e     81 81 81 81 
18d72     81 81       | 	byte	$81[98]
18d74     85 96 97 92 
18d78     A9 C5 DA F2 
18d7c     09 29 3F 39 
18d80     34 43 63 7F | 	byte	$85, $96, $97, $92, $a9, $c5, $da, $f2, $09, $29, $3f, $39, $34, $43, $63, $7f
18d84     7F 7F 7F 7F 
      ...             
18da4     7F 7F 7F 7F 
18da8     7F          | 	byte	$7f[37]
18da9     73 6B 77 7F 
18dad     7F 7F 7C 7F 
18db1     7F 7F 7F 7F 
18db5     68 3E 28 2B | 	byte	$73, $6b, $77, $7f, $7f, $7f, $7c, $7f, $7f, $7f, $7f, $7f, $68, $3e, $28, $2b
18db9     37 40 3F 36 
18dbd     34 35 33 2B 
18dc1     23 24 2C 29 
18dc5     16 FC F0 F9 | 	byte	$37, $40, $3f, $36, $34, $35, $33, $2b, $23, $24, $2c, $29, $16, $fc, $f0, $f9
18dc9     04 03 F9 F4 
18dcd     F2 E7 DB D5 
18dd1     D5 D7 D9 DC 
18dd5     DE DD D6 D4 | 	byte	$04, $03, $f9, $f4, $f2, $e7, $db, $d5, $d5, $d7, $d9, $dc, $de, $dd, $d6, $d4
18dd9     D7 D2 BF A5 
18ddd     94 8D 92 9F 
18de1     A6 AB B4 BA 
18de5     BF C2 BB B0 | 	byte	$d7, $d2, $bf, $a5, $94, $8d, $92, $9f, $a6, $ab, $b4, $ba, $bf, $c2, $bb, $b0
18de9     AD AB A1 8D 
18ded     82 81 82 82 
18df1     81 81 81 81 
18df5     81 81 81 81 | 	byte	$ad, $ab, $a1, $8d, $82, $81, $82, $82, $81, $81, $81, $81, $81, $81, $81, $81
18df9     81 81 81 81 
      ...             
18e29     81 81 81 81 
18e2d     81 81 81 81 | 	byte	$81[56]
18e31     83 8E 9F AF 
18e35     BA C0 C0 BB 
18e39     BB C3 D4 E0 
18e3d     E8 ED EF F1 | 	byte	$83, $8e, $9f, $af, $ba, $c0, $c0, $bb, $bb, $c3, $d4, $e0, $e8, $ed, $ef, $f1
18e41     F3 F5 F8 FB 
18e45     FF 05 0F 1A 
18e49     22 25 24 25 
18e4d     26 2A 37 49 | 	byte	$f3, $f5, $f8, $fb, $ff, $05, $0f, $1a, $22, $25, $24, $25, $26, $2a, $37, $49
18e51     59 63 65 66 
18e55     68 6E 73 76 
18e59     79 7F 7F 7F 
18e5d     7F 7F 7F 7F | 	byte	$59, $63, $65, $66, $68, $6e, $73, $76, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f
18e61     7F 7F 7F 7F 
18e65     7F 7F 7F 7F 
18e69     7F 7F 7F 7F 
18e6d     7F 7F 7F 7F | 	byte	$7f[16]
18e71     7C 78 72 69 
18e75     62 60 5F 62 
18e79     69 70 74 76 
18e7d     70 63 53 4A | 	byte	$7c, $78, $72, $69, $62, $60, $5f, $62, $69, $70, $74, $76, $70, $63, $53, $4a
18e81     46 45 46 45 
18e85     42 3E 3C 3A 
18e89     3C 3F 42 43 
18e8d     42 40 3A 34 | 	byte	$46, $45, $46, $45, $42, $3e, $3c, $3a, $3c, $3f, $42, $43, $42, $40, $3a, $34
18e91     2D 26 20 1A 
18e95     16 19 1D 22 
18e99     23 23 20 1E 
18e9d     19 11 06 FD | 	byte	$2d, $26, $20, $1a, $16, $19, $1d, $22, $23, $23, $20, $1e, $19, $11, $06, $fd
18ea1     F7 F6 F6 F8 
18ea5     F7 F6 F5 F6 
18ea9     FA FE 00 00 
18ead     FD F9 F4 EF | 	byte	$f7, $f6, $f6, $f8, $f7, $f6, $f5, $f6, $fa, $fe, $00, $00, $fd, $f9, $f4, $ef
18eb1     E6 DD D7 D8 
18eb5     DE E0 DE D9 
18eb9     D4 CC C7 C5 
18ebd     C5 C6 C7 C8 | 	byte	$e6, $dd, $d7, $d8, $de, $e0, $de, $d9, $d4, $cc, $c7, $c5, $c5, $c6, $c7, $c8
18ec1     CB CD D0 D6 
18ec5     DD E1 E2 DE 
18ec9     D8 CD C1 BA 
18ecd     B6 B4 B4 B6 | 	byte	$cb, $cd, $d0, $d6, $dd, $e1, $e2, $de, $d8, $cd, $c1, $ba, $b6, $b4, $b4, $b6
18ed1     B8 BA B9 B7 
18ed5     B3 AB A1 97 
18ed9     8F 88 83 82 
18edd     83 85 8B 92 | 	byte	$b8, $ba, $b9, $b7, $b3, $ab, $a1, $97, $8f, $88, $83, $82, $83, $85, $8b, $92
18ee1     99 9B 9B 9B 
18ee5     9C 9E A2 A7 
18ee9     AB AD AE AE 
18eed     AD AD AC AB | 	byte	$99, $9b, $9b, $9b, $9c, $9e, $a2, $a7, $ab, $ad, $ae, $ae, $ad, $ad, $ac, $ab
18ef1     AC AB A9 A9 
18ef5     AC B2 B6 B9 
18ef9     BC C0 C6 CA 
18efd     CB CB C8 C6 | 	byte	$ac, $ab, $a9, $a9, $ac, $b2, $b6, $b9, $bc, $c0, $c6, $ca, $cb, $cb, $c8, $c6
18f01     C4 C5 C8 CC 
18f05     CF D0 D3 D6 
18f09     DB DF E4 E9 
18f0d     EC EE EF F0 | 	byte	$c4, $c5, $c8, $cc, $cf, $d0, $d3, $d6, $db, $df, $e4, $e9, $ec, $ee, $ef, $f0
18f11     F3 F6 F8 FB 
18f15     FC FF 02 05 
18f19     08 09 09 07 
18f1d     08 09 0C 11 | 	byte	$f3, $f6, $f8, $fb, $fc, $ff, $02, $05, $08, $09, $09, $07, $08, $09, $0c, $11
18f21     18 1D 22 24 
18f25     22 1E 1A 17 
18f29     16 16 16 17 
18f2d     18 1A 1B 1A | 	byte	$18, $1d, $22, $24, $22, $1e, $1a, $17, $16, $16, $16, $17, $18, $1a, $1b, $1a
18f31     1A 1B 1E 24 
18f35     2B 31 37 3D 
18f39     41 45 48 4A 
18f3d     4B 4B 49 47 | 	byte	$1a, $1b, $1e, $24, $2b, $31, $37, $3d, $41, $45, $48, $4a, $4b, $4b, $49, $47
18f41     46 46 46 49 
18f45     4D 50 53 54 
18f49     55 54 53 50 
18f4d     4D 4A 47 43 | 	byte	$46, $46, $46, $49, $4d, $50, $53, $54, $55, $54, $53, $50, $4d, $4a, $47, $43
18f51     3D 37 31 2D 
18f55     2C 2D 30 33 
18f59     35 37 37 36 
18f5d     36 35 36 36 | 	byte	$3d, $37, $31, $2d, $2c, $2d, $30, $33, $35, $37, $37, $36, $36, $35, $36, $36
18f61     36 37 37 38 
18f65     3A 3A 37 32 
18f69     2F 2B 28 24 
18f6d     1E 1A 15 13 | 	byte	$36, $37, $37, $38, $3a, $3a, $37, $32, $2f, $2b, $28, $24, $1e, $1a, $15, $13
18f71     11 0E 0C 0A 
18f75     0A 09 08 07 
18f79     08 0A 0D 10 
18f7d     12 14 15 17 | 	byte	$11, $0e, $0c, $0a, $0a, $09, $08, $07, $08, $0a, $0d, $10, $12, $14, $15, $17
18f81     16 13 0F 0B 
18f85     09 07 04 01 
18f89     FD F9 F6 F5 
18f8d     F5 F5 F6 F5 | 	byte	$16, $13, $0f, $0b, $09, $07, $04, $01, $fd, $f9, $f6, $f5, $f5, $f5, $f6, $f5
18f91     F5 F4 F3 F4 
18f95     F5 F7 FA FC 
18f99     FC FD FD FC 
18f9d     FB FC FB FA | 	byte	$f5, $f4, $f3, $f4, $f5, $f7, $fa, $fc, $fc, $fd, $fd, $fc, $fb, $fc, $fb, $fa
18fa1     F8 F6 F2 EF 
18fa5     ED EB EB EB 
18fa9     EB EB E9 E6 
18fad     E4 E2 E1 E1 | 	byte	$f8, $f6, $f2, $ef, $ed, $eb, $eb, $eb, $eb, $eb, $e9, $e6, $e4, $e2, $e1, $e1
18fb1     E3 E4 E5 E6 
18fb5     E7 E7 E7 E6 
18fb9     E4 E2 DF DB 
18fbd     D8 D5 D4 D3 | 	byte	$e3, $e4, $e5, $e6, $e7, $e7, $e7, $e6, $e4, $e2, $df, $db, $d8, $d5, $d4, $d3
18fc1     D3 D5 D7 D8 
18fc5     D9 D8 D6 D4 
18fc9     D1 CF CD CD 
18fcd     CD CD CE CF | 	byte	$d3, $d5, $d7, $d8, $d9, $d8, $d6, $d4, $d1, $cf, $cd, $cd, $cd, $cd, $ce, $cf
18fd1     D1 D4 D6 D8 
18fd5     DA DB DC DB 
18fd9     D9 D7 D5 D5 
18fdd     D6 D9 DC DF | 	byte	$d1, $d4, $d6, $d8, $da, $db, $dc, $db, $d9, $d7, $d5, $d5, $d6, $d9, $dc, $df
18fe1     E2 E6 E7 E7 
18fe5     E7 E7 E8 E9 
18fe9     E9 E9 E8 E6 
18fed     E5 E4 E5 E7 | 	byte	$e2, $e6, $e7, $e7, $e7, $e7, $e8, $e9, $e9, $e9, $e8, $e6, $e5, $e4, $e5, $e7
18ff1     E9 EB ED ED 
18ff5     ED EE EF F2 
18ff9     F5 F9 FC FE 
18ffd     00 00 00 00 | 	byte	$e9, $eb, $ed, $ed, $ed, $ee, $ef, $f2, $f5, $f9, $fc, $fe, $00, $00, $00, $00
19001     FF FD FB FB 
19005     FB FC FC FC 
19009     FE FF 02 03 
1900d     06 07 09 0A | 	byte	$ff, $fd, $fb, $fb, $fb, $fc, $fc, $fc, $fe, $ff, $02, $03, $06, $07, $09, $0a
19011     0A 0B 0B 0A 
19015     09 08 06 05 
19019     06 07 07 08 
1901d     09 0A 0B 0C | 	byte	$0a, $0b, $0b, $0a, $09, $08, $06, $05, $06, $07, $07, $08, $09, $0a, $0b, $0c
19021     0C 0C 0D 0D 
19025     0D 0E 10 12 
19029     15 17 19 1B 
1902d     1D 1E 1F 1F | 	byte	$0c, $0c, $0d, $0d, $0d, $0e, $10, $12, $15, $17, $19, $1b, $1d, $1e, $1f, $1f
19031     1E 1D 1C 1B 
19035     1C 1D 1E 1E 
19039     1F 1E 1E 1D 
1903d     1C 1C 1B 19 | 	byte	$1e, $1d, $1c, $1b, $1c, $1d, $1e, $1e, $1f, $1e, $1e, $1d, $1c, $1c, $1b, $19
19041     18 18 17 17 
19045     17 18 19 19 
19049     19 19 19 19 
1904d     18 18 17 17 | 	byte	$18, $18, $17, $17, $17, $18, $19, $19, $19, $19, $19, $19, $18, $18, $17, $17
19051     16 16 14 14 
19055     13 13 12 11 
19059     11 11 11 10 
1905d     10 0F 0D 0B | 	byte	$16, $16, $14, $14, $13, $13, $12, $11, $11, $11, $11, $10, $10, $0f, $0d, $0b
19061     0A 08 08 08 
19065     09 0A 0B 0B 
19069     0B 0B 0A 09 
1906d     08 00 00    | 	byte	$0a, $08, $08, $08, $09, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $00, $00
19070                 | 	alignl
19070                 | _hng030rm_spin2_dat_
19070     00 00 00 00 
19074     00 00 00 00 
19078     00 00 00 00 
1907c     00 00 00 00 
19080     00 00 00    | vga_font       file "vgafont.def"
19083     7E 81 A5 81 
19087     81 BD 99 81 
1908b     81 7E 00 00 
1908f     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
19093     7E FF DB FF 
19097     FF C3 E7 FF 
1909b     FF 7E 00 00 
1909f     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
190a3     00 36 7F 7F 
190a7     7F 7F 3E 1C 
190ab     08 00 00 00 
190af     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
190b3     00 08 1C 3E 
190b7     7F 3E 1C 08 
190bb     00 00 00 00 
190bf     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
190c3     18 3C 3C E7 
190c7     E7 E7 18 18 
190cb     3C 00 00 00 
190cf     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
190d3     18 3C 7E FF 
190d7     FF 7E 18 18 
190db     3C 00 00 00 
190df     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
190e3     00 00 00 18 
190e7     3C 3C 18 00 
190eb     00 00 00 00 
190ef     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
190f3     FF FF FF E7 
190f7     C3 C3 E7 FF 
190fb     FF FF FF FF 
190ff     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
19103     00 00 3C 66 
19107     42 42 66 3C 
1910b     00 00 00 00 
1910f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
19113     FF FF C3 99 
19117     BD BD 99 C3 
1911b     FF FF FF FF 
1911f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
19123     78 70 58 4C 
19127     1E 33 33 33 
1912b     33 1E 00 00 
1912f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
19133     3C 66 66 66 
19137     66 3C 18 7E 
1913b     18 18 00 00 
1913f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
19143     FC CC FC 0C 
19147     0C 0C 0C 0E 
1914b     0F 07 00 00 
1914f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
19153     FE C6 FE C6 
19157     C6 C6 C6 E6 
1915b     E7 67 03 00 
1915f     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
19163     18 18 DB 3C 
19167     E7 3C DB 18 
1916b     18 00 00 00 
1916f     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
19173     03 07 0F 1F 
19177     7F 1F 0F 07 
1917b     03 01 00 00 
1917f     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
19183     60 70 78 7C 
19187     7F 7C 78 70 
1918b     60 40 00 00 
1918f     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
19193     18 3C 7E 18 
19197     18 18 7E 3C 
1919b     18 00 00 00 
1919f     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
191a3     66 66 66 66 
191a7     66 66 66    | 	byte	$66[7]
191aa     00 66 66 00 
191ae     00 00 00 00 
191b2     00 FE DB DB 
191b6     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
191ba     D8 D8 D8 00 
191be     00 00 00 3E 
191c2     63 06 1C 36 
191c6     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
191ca     30 63 3E 00 
191ce     00 00 00 00 
191d2     00 00 00 00 
191d6     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
191da     7F 7F 7F 00 
191de     00 00 00 00 
191e2     00 18 3C 7E 
191e6     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
191ea     3C 18 7E 00 
191ee     00 00 00 00 
191f2     00 18 3C 7E 
191f6     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
191fa     18 18 18 00 
191fe     00 00 00 00 
19202     00 18 18 18 
19206     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1920a     7E 3C 18 00 
1920e     00 00 00 00 
19212     00 00 00 18 
19216     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1921a     00 00 00 00 
1921e     00 00 00 00 
19222     00 00 00    | 	byte	$00[11]
19225     0C 06 7F 06 
19229     0C 00 00 00 
1922d     00 00 00 00 
19231     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19235     00 03 03 03 
19239     7F 00 00 00 
1923d     00 00 00 00 
19241     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19245     14 36 7F 36 
19249     14 00 00 00 
1924d     00 00 00 00 
19251     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
19255     1C 1C 3E 3E 
19259     7F 7F 00 00 
1925d     00 00 00 00 
19261     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
19265     7F 3E 3E 1C 
19269     1C 08 00 00 
1926d     00 00 00 00 
19271     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19275     00 00 00 00 
19279     00 00 00 00 
1927d     00 00 00 00 
19281     00 00       | 	byte	$00[14]
19283     18 3C 3C 3C 
19287     18 18 18 00 
1928b     18 18 00 00 
1928f     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
19293     66 24 00 00 
19297     00 00 00 00 
1929b     00 00 00 00 
1929f     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
192a3     00 36 36 7F 
192a7     36 36 36 7F 
192ab     36 36 00 00 
192af     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
192b3     3E 63 43 03 
192b7     3E 60 60 61 
192bb     63 3E 18 18 
192bf     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
192c3     00 00 43 63 
192c7     30 18 0C 06 
192cb     63 61 00 00 
192cf     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
192d3     1C 36 36 1C 
192d7     6E 3B 33 33 
192db     33 6E 00 00 
192df     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
192e3     0C 0C 0C 06 
192e7     00 00 00 00 
192eb     00 00 00 00 
192ef     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
192f3     30 18 0C 0C 
192f7     0C 0C 0C 0C 
192fb     18 30 00 00 
192ff     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
19303     0C 18 30 30 
19307     30 30 30 30 
1930b     18 0C 00 00 
1930f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
19313     00 00 00 66 
19317     3C FF 3C 66 
1931b     00 00 00 00 
1931f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
19323     00 00 00 18 
19327     18 7E 18 18 
1932b     00 00 00 00 
1932f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
19333     00 00 00 00 
19337     00 00 00 00 | 	byte	$00[8]
1933b     18 18 18 0C 
1933f     00 00 00 00 
19343     00 00 00 00 
19347     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1934b     00 00 00 00 
1934f     00 00 00 00 
19353     00 00 00 00 
19357     00 00 00 00 | 	byte	$00[16]
1935b     18 18 00 00 
1935f     00 00 00 00 
19363     00 00 40 60 
19367     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1936b     03 01 00 00 
1936f     00 00 00 00 
19373     1C 36 63 63 
19377     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1937b     36 1C 00 00 
1937f     00 00 00 00 
19383     18 1C 1E 18 
19387     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1938b     18 7E 00 00 
1938f     00 00 00 00 
19393     3E 63 60 30 
19397     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1939b     63 7F 00 00 
1939f     00 00 00 00 
193a3     3E 63 60 60 
193a7     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
193ab     63 3E 00 00 
193af     00 00 00 00 
193b3     30 38 3C 36 
193b7     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
193bb     30 78 00 00 
193bf     00 00 00 00 
193c3     7F 03 03 03 
193c7     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
193cb     63 3E 00 00 
193cf     00 00 00 00 
193d3     1C 06 03 03 
193d7     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
193db     63 3E 00 00 
193df     00 00 00 00 
193e3     7F 63 60 60 
193e7     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
193eb     0C 0C 00 00 
193ef     00 00 00 00 
193f3     3E 63 63 63 
193f7     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
193fb     63 3E 00 00 
193ff     00 00 00 00 
19403     3E 63 63 63 
19407     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1940b     30 1E 00 00 
1940f     00 00 00 00 
19413     00 00 00 18 
19417     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1941b     18 18 00 00 
1941f     00 00 00 00 
19423     00 00 00 18 
19427     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1942b     18 18 0C 00 
1942f     00 00 00 00 
19433     00 60 30 18 
19437     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1943b     30 60 00 00 
1943f     00 00 00 00 
19443     00 00 00 7E 
19447     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1944b     00 00 00 00 
1944f     00 00 00 00 
19453     00          | 	byte	$00[9]
19454     06 0C 18 30 
19458     60 30 18 0C 
1945c     06 00 00 00 
19460     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
19464     63 63 30 18 
19468     18 18 00 18 
1946c     18 00 00 00 
19470     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
19474     3E 63 63 7B 
19478     7B 7B 3B 03 
1947c     3E 00 00 00 
19480     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
19484     1C 36 63 63 
19488     7F 63 63 63 
1948c     63 00 00 00 
19490     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
19494     66 66 66 3E 
19498     66 66 66 66 
1949c     3F 00 00 00 
194a0     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
194a4     66 43 03 03 
194a8     03 03 43 66 
194ac     3C 00 00 00 
194b0     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
194b4     36 66 66 66 
194b8     66 66 66 36 
194bc     1F 00 00 00 
194c0     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
194c4     66 46 16 1E 
194c8     16 06 46 66 
194cc     7F 00 00 00 
194d0     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
194d4     66 46 16 1E 
194d8     16 06 06 06 
194dc     0F 00 00 00 
194e0     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
194e4     66 43 03 03 
194e8     7B 63 63 66 
194ec     5C 00 00 00 
194f0     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
194f4     63 63 63 7F 
194f8     63 63 63 63 
194fc     63 00 00 00 
19500     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
19504     18 18 18 18 
19508     18 18 18 18 | 	byte	$18[8]
1950c     3C 00 00 00 
19510     00 00 00 78 
19514     30 30 30 30 
19518     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1951c     1E 00 00 00 
19520     00 00 00 67 
19524     66 66 36 1E 
19528     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1952c     67 00 00 00 
19530     00 00 00 0F 
19534     06 06 06 06 
19538     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1953c     7F 00 00 00 
19540     00 00 00 63 
19544     77 7F 7F 6B 
19548     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1954c     63 00 00 00 
19550     00 00 00 63 
19554     67 6F 7F 7B 
19558     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1955c     63 00 00 00 
19560     00 00 00 3E 
19564     63 63 63 63 
19568     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1956c     3E 00 00 00 
19570     00 00 00 3F 
19574     66 66 66 3E 
19578     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1957c     0F 00 00 00 
19580     00 00 00 3E 
19584     63 63 63 63 
19588     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1958c     3E 30 70 00 
19590     00 00 00 3F 
19594     66 66 66 3E 
19598     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1959c     67 00 00 00 
195a0     00 00 00 3E 
195a4     63 63 06 1C 
195a8     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
195ac     3E 00 00 00 
195b0     00 00 00 7E 
195b4     7E 5A 18 18 
195b8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
195bc     3C 00 00 00 
195c0     00 00 00 63 
195c4     63 63 63 63 
195c8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
195cc     3E 00 00 00 
195d0     00 00 00 63 
195d4     63 63 63 63 
195d8     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
195dc     08 00 00 00 
195e0     00 00 00 63 
195e4     63 63 63 6B 
195e8     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
195ec     36 00 00 00 
195f0     00 00 00 63 
195f4     63 36 3E 1C 
195f8     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
195fc     63 00 00 00 
19600     00 00 00 66 
19604     66 66 66 3C 
19608     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1960c     3C 00 00 00 
19610     00 00 00 7F 
19614     63 61 30 18 
19618     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1961c     7F 00 00 00 
19620     00 00 00 3C 
19624     0C 0C 0C 0C 
19628     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1962c     3C 00 00 00 
19630     00 00 00 00 
19634     01 03 07 0E 
19638     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1963c     40 00 00 00 
19640     00 00 00 3C 
19644     30 30 30 30 
19648     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1964c     3C 00 00 00 
19650     1C 36 00 00 
19654     00 00 00 00 
19658     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1965c     00 00 00 00 
19660     00 00 00 00 
19664     00 00 00 00 
19668     00 00 00 00 
1966c     00          | 	byte	$00[17]
1966d     FF 00 00 0C 
19671     18 00 00 00 
19675     00 00 00 00 
19679     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1967d     00 00 00 00 
19681     00 00 00 00 
19685     00          | 	byte	$00[9]
19686     1E 30 3E 33 
1968a     33 33 6E 00 
1968e     00 00 00 00 
19692     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
19696     1E 36 66 66 
1969a     66 66 3E 00 
1969e     00 00 00 00 
196a2     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
196a6     3E 63 03 03 
196aa     03 63 3E 00 
196ae     00 00 00 00 
196b2     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
196b6     3C 36 33 33 
196ba     33 33 6E 00 
196be     00 00 00 00 
196c2     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
196c6     3E 63 7F 03 
196ca     03 63 3E 00 
196ce     00 00 00 00 
196d2     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
196d6     0C 1E 0C 0C 
196da     0C 0C 1E 00 
196de     00 00 00 00 
196e2     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
196e6     6E 33 33 33 
196ea     33 33 3E 30 
196ee     33 1E 00 00 
196f2     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
196f6     36 6E 66 66 
196fa     66 66 67 00 
196fe     00 00 00 00 
19702     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
19706     1C 18 18 18 
1970a     18 18 3C 00 
1970e     00 00 00 00 
19712     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
19716     70 60 60 60 
1971a     60 60 60 66 
1971e     66 3C 00 00 
19722     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
19726     66 36 1E 1E 
1972a     36 66 67 00 
1972e     00 00 00 00 
19732     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
19736     18 18 18 18 
1973a     18 18       | 	byte	$18[6]
1973c     3C 00 00 00 
19740     00 00 00 00 
19744     00 00 37 7F 
19748     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1974c     63 00 00 00 
19750     00 00 00 00 
19754     00 00 3B 66 
19758     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1975c     66 00 00 00 
19760     00 00 00 00 
19764     00 00 3E 63 
19768     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1976c     3E 00 00 00 
19770     00 00 00 00 
19774     00 00 3B 66 
19778     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1977c     3E 06 06 0F 
19780     00 00 00 00 
19784     00 00 6E 33 
19788     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1978c     3E 30 30 78 
19790     00 00 00 00 
19794     00 00 3B 6E 
19798     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1979c     0F 00 00 00 
197a0     00 00 00 00 
197a4     00 00 3E 63 
197a8     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
197ac     3E 00 00 00 
197b0     00 00 00 08 
197b4     0C 0C 3F 0C 
197b8     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
197bc     38 00 00 00 
197c0     00 00 00 00 
197c4     00 00 33 33 
197c8     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
197cc     6E 00 00 00 
197d0     00 00 00 00 
197d4     00 00 63 63 
197d8     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
197dc     1C 00 00 00 
197e0     00 00 00 00 
197e4     00 00 63 63 
197e8     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
197ec     36 00 00 00 
197f0     00 00 00 00 
197f4     00 00 63 36 
197f8     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
197fc     63 00 00 00 
19800     00 00 00 00 
19804     00 00 63 63 
19808     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1980c     7E 60 30 1F 
19810     00 00 00 00 
19814     00 00 7F 33 
19818     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1981c     7F 00 00 00 
19820     00 00 00 70 
19824     18 18 18 0E 
19828     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1982c     70 00 00 00 
19830     00 00 00 18 
19834     18 18 18 18 
19838     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1983c     18 00 00 00 
19840     00 00 00 0E 
19844     18 18 18 70 
19848     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1984c     0E 00 00 00 
19850     6E 3B 00 00 
19854     00 00 00 00 
19858     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1985c     00 00 00 00 
19860     00 00 00 00 
19864     00 00       | 	byte	$00[10]
19866     08 1C 36 63 
1986a     63 63 7F 00 
1986e     00 00 00 00 
19872     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
19876     03 03 03 03 
1987a     43 66 3C 18 
1987e     30 1E 00 00 
19882     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
19886     33 33 33 33 
1988a     33 33       | 	byte	$33[6]
1988c     6E 00 00 00 
19890     00 00 60 30 
19894     18 00 3E 63 
19898     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1989c     3E 00 00 00 
198a0     00 00 08 1C 
198a4     36 00 1E 30 
198a8     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
198ac     6E 00 00 00 
198b0     00 00 00 00 
198b4     33 00 1E 30 
198b8     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
198bc     6E 00 00 00 
198c0     00 00 1C 36 
198c4     1C 00 33 33 
198c8     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
198cc     6E 00 00 00 
198d0     00 00 60 30 
198d4     18 00 3E 63 
198d8     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
198dc     3E 00 00 00 
198e0     00 00 00 00 
198e4     00 00 3E 63 
198e8     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
198ec     3E 18 30 1E 
198f0     00 00 00 1C 
198f4     58 78 38 18 
198f8     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
198fc     3C 00 00 00 
19900     00 00 00 00 
19904     63 00 3E 63 
19908     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1990c     3E 00 00 00 
19910     66 33 00 3E 
19914     63 63 63 63 
19918     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1991c     3E 00 00 00 
19920     00 00 CC 66 
19924     33 00 3E 63 
19928     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1992c     3E 00 00 00 
19930     00 00 18 3C 
19934     66 00 1C 18 
19938     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1993c     3C 00 00 00 
19940     30 18 00 7F 
19944     63 61 30 18 
19948     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1994c     7F 00 00 00 
19950     00 63 00 08 
19954     1C 36 63 63 
19958     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1995c     63 00 00 00 
19960     30 18 00 3C 
19964     66 43 03 03 
19968     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1996c     3C 00 00 00 
19970     30 18 00 7F 
19974     66 46 16 1E 
19978     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1997c     7F 00 00 00 
19980     0C 06 00 0F 
19984     06 06 06 06 
19988     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1998c     7F 00 00 00 
19990     30 18 00 1C 
19994     18 18 18 18 
19998     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1999c     3C 00 00 00 
199a0     00 00 08 1C 
199a4     36 00 3E 63 
199a8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
199ac     3E 00 00 00 
199b0     00 00 00 00 
199b4     63 00 3E 63 
199b8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
199bc     3E 00 00 00 
199c0     00 00 00 6F 
199c4     46 26 06 06 
199c8     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
199cc     7F 00 00 00 
199d0     00 00 00 6E 
199d4     4C 2C 0C 0C 
199d8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
199dc     1E 00 00 00 
199e0     30 18 00 3E 
199e4     63 63 06 1C 
199e8     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
199ec     3E 00 00 00 
199f0     00 00 60 30 
199f4     18 00 3E 63 
199f8     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
199fc     3E 00 00 00 
19a00     00 63 00 3E 
19a04     63 63 63 63 
19a08     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
19a0c     3E 00 00 00 
19a10     00 63 00 63 
19a14     63 63 63 63 
19a18     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
19a1c     3E 00 00 00 
19a20     6C 38 00 7E 
19a24     7E 5A 18 18 
19a28     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
19a2c     3C 00 00 00 
19a30     00 00 60 48 
19a34     2C 0C 3F 0C 
19a38     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
19a3c     38 00 00 00 
19a40     00 00 00 0F 
19a44     26 36 1E 0E 
19a48     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
19a4c     7F 00 00 00 
19a50     00 00 00 00 
19a54     00 63 36 1C 
19a58     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
19a5c     00 00 00 00 
19a60     00 00       | 	byte	$00[6]
19a62     36 1C 08 00 
19a66     3E 63 03 03 
19a6a     03 63 3E 00 
19a6e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
19a72     30 18 0C 00 
19a76     1E 30 3E 33 
19a7a     33 33 6E 00 
19a7e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
19a82     60 30 18 00 
19a86     1C 18 18 18 
19a8a     18 18 3C 00 
19a8e     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
19a92     60 30 18 00 
19a96     3E 63 63 63 
19a9a     63 63 3E 00 
19a9e     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
19aa2     30 18 0C 00 
19aa6     33 33 33 33 
19aaa     33 33 6E 00 
19aae     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
19ab2     00 08 1C 36 
19ab6     63 63 7F 63 
19aba     63 63 63 18 
19abe     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
19ac2     00 00 00 00 
19ac6     1E 30 3E 33 
19aca     33 33 6E 18 
19ace     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
19ad2     00 7F 63 61 
19ad6     30 18 0C 06 
19ada     43 63 7F 00 
19ade     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
19ae2     36 1C 08 00 
19ae6     7F 33 18 0C 
19aea     06 63 7F 00 
19aee     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
19af2     00 7F 66 46 
19af6     16 1E 16 06 
19afa     46 66 7F 18 
19afe     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
19b02     00 00 00 00 
19b06     3E 63 7F 03 
19b0a     03 63 3E 18 
19b0e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
19b12     00 3C 66 03 
19b16     1F 03 0F 03 
19b1a     03 66 3C 00 
19b1e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
19b22     60 30 18 00 
19b26     7F 33 18 0C 
19b2a     06 63 7F 00 
19b2e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
19b32     00 3C 66 43 
19b36     03 03 03 03 
19b3a     43 66 3C 00 
19b3e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
19b42     00 00 00 00 
19b46     3E 63 06 1C 
19b4a     30 63 3E 18 
19b4e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
19b52     00 00 00 00 
19b56     00 00       | 	byte	$00[6]
19b58     6C 36 1B 36 
19b5c     6C 00 00 00 
19b60     00 00 00 00 
19b64     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b68     1B 36 6C 36 
19b6c     1B 00 00 00 
19b70     88 22 88 22 
19b74     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
19b78     88 22 88 22 
19b7c     88 22 88 22 
19b80     AA 55 AA 55 
19b84     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
19b88     AA 55 AA 55 
19b8c     AA 55 AA 55 
19b90     BB EE BB EE 
19b94     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
19b98     BB EE BB EE 
19b9c     BB EE BB EE 
19ba0     18 18 18 18 
19ba4     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
19ba8     18 18 18 18 
19bac     18 18 18 18 
19bb0     18 18 18 18 
19bb4     18 18 18    | 	byte	$18[15]
19bb7     1F 18 18 18 
19bbb     18 18 18 18 
19bbf     18 30 18 00 
19bc3     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
19bc7     63 7F 63 63 
19bcb     63 63 00 00 
19bcf     00 1C 36 00 
19bd3     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
19bd7     63 7F 63 63 
19bdb     63 63 00 00 
19bdf     00 36 1C 00 
19be3     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
19be7     1E 16 06 46 
19beb     66 7F 00 00 
19bef     00 00 00 00 
19bf3     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
19bf7     1C 30 60 63 
19bfb     63 3E 18 30 
19bff     1E 6C 6C 6C 
19c03     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
19c07     6F 6C 6C 6C 
19c0b     6C 6C 6C 6C 
19c0f     6C 6C 6C 6C 
19c13     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19c17     6C 6C 6C 6C 
19c1b     6C 6C 6C 6C 
19c1f     6C          | 	byte	$6c[9]
19c20     00 00 00 00 
19c24     00          | 	byte	$00[5]
19c25     7F 60 6F 6C 
19c29     6C 6C 6C 6C 
19c2d     6C 6C 6C 6C 
19c31     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19c35     6F 60 7F 00 
19c39     00 00 00 00 
19c3d     00 00 00 18 
19c41     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
19c45     61 30 18 0C 
19c49     06 43 63 7F 
19c4d     00 00 00 00 
19c51     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
19c55     00 7F 33 18 
19c59     0C 06 63 7F 
19c5d     00 00 00 00 
19c61     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
19c65     00 00 1F 18 
19c69     18 18 18 18 
19c6d     18 18 18 18 
19c71     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19c75     18 18 F8 00 
19c79     00 00 00 00 
19c7d     00 00 00 18 
19c81     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19c85     18 18 FF 00 
19c89     00 00 00 00 
19c8d     00 00 00 00 
19c91     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19c95     00 00 FF 18 
19c99     18 18 18 18 
19c9d     18 18 18 18 
19ca1     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19ca5     18 18 F8 18 
19ca9     18 18 18 18 
19cad     18 18 18 00 
19cb1     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19cb5     00 00 FF 00 
19cb9     00 00 00 00 
19cbd     00 00 00 18 
19cc1     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19cc5     18 18 FF 18 
19cc9     18 18 18 18 
19ccd     18 18 18 63 
19cd1     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
19cd5     36 63 63 7F 
19cd9     63 63 63 63 
19cdd     00 00 00 00 
19ce1     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
19ce5     00 1E 30 3E 
19ce9     33 33 33 6E 
19ced     00 00 00 6C 
19cf1     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19cf5     EC 0C FC 00 
19cf9     00 00 00 00 
19cfd     00 00 00 00 
19d01     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19d05     FC 0C EC 6C 
19d09     6C 6C 6C 6C 
19d0d     6C 6C 6C 6C 
19d11     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19d15     EF 00 FF 00 
19d19     00 00 00 00 
19d1d     00 00 00 00 
19d21     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19d25     FF 00 EF 6C 
19d29     6C 6C 6C 6C 
19d2d     6C 6C 6C 6C 
19d31     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19d35     EC 0C EC 6C 
19d39     6C 6C 6C 6C 
19d3d     6C 6C 6C 00 
19d41     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19d45     FF 00 FF 00 
19d49     00 00 00 00 
19d4d     00 00 00 6C 
19d51     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19d55     EF 00 EF 6C 
19d59     6C 6C 6C 6C 
19d5d     6C 6C 6C 00 
19d61     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19d65     63 3E 63 63 
19d69     63 63 3E 63 
19d6d     00 00 00 00 
19d71     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
19d75     30 3C 36 33 
19d79     33 33 33 6E 
19d7d     00 00 00 00 
19d81     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
19d85     66 66 6F 66 
19d89     66 66 36 1F 
19d8d     00 00 00 36 
19d91     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
19d95     66 66 66 66 
19d99     66 66       | 	byte	$66[6]
19d9b     36 1F 00 00 
19d9f     00 00 63 00 
19da3     7F 66 46 16 
19da7     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
19dab     66 7F 00 00 
19daf     00 6C 38 00 
19db3     38 30 30 3C 
19db7     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
19dbb     33 6E 00 00 
19dbf     00 36 1C 00 
19dc3     63 67 6F 7F 
19dc7     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
19dcb     63 63 00 00 
19dcf     00 30 18 00 
19dd3     3C 18 18 18 
19dd7     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19ddb     18 3C 00 00 
19ddf     00 3C 66 00 
19de3     3C 18 18 18 
19de7     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19deb     18 3C 00 00 
19def     00 00 00 36 
19df3     1C 08 00 3E 
19df7     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
19dfb     63 3E 00 00 
19dff     00 18 18 18 
19e03     18 18 18 18 
19e07     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
19e0b     00 00 00 00 
19e0f     00 00 00 00 
19e13     00 00 00 00 | 	byte	$00[12]
19e17     F8 18 18 18 
19e1b     18 18 18 18 
19e1f     18 FF FF FF 
19e23     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
19e27     FF FF FF FF 
19e2b     FF FF FF FF 
19e2f     FF          | 	byte	$ff[9]
19e30     00 00 00 00 
19e34     00 00 00    | 	byte	$00[7]
19e37     FF FF FF FF 
19e3b     FF FF FF FF 
19e3f     FF          | 	byte	$ff[9]
19e40     00 00 00 7E 
19e44     7E 5A 18 18 
19e48     18 18 18 18 
19e4c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
19e50     1C 36 1C 63 
19e54     63 63 63 63 
19e58     63 63 63 63 
19e5c     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19e60     FF FF FF FF 
19e64     FF FF FF    | 	byte	$ff[7]
19e67     00 00 00 00 
19e6b     00 00 00 00 
19e6f     00          | 	byte	$00[9]
19e70     30 18 00 3E 
19e74     63 63 63 63 
19e78     63 63 63 63 
19e7c     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19e80     00 00 00 1E 
19e84     33 33 33 1B 
19e88     33 63 63 63 
19e8c     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
19e90     1C 36 00 3E 
19e94     63 63 63 63 
19e98     63 63 63 63 
19e9c     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19ea0     30 18 00 63 
19ea4     67 6F 7F 7B 
19ea8     73 63 63 63 
19eac     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
19eb0     00 00 60 30 
19eb4     18 00 3B 66 
19eb8     66 66 66 66 
19ebc     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19ec0     00 00 36 1C 
19ec4     08 00 3B 66 
19ec8     66 66 66 66 
19ecc     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19ed0     36 1C 00 3E 
19ed4     63 63 06 1C 
19ed8     30 60 63 63 
19edc     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
19ee0     00 00 36 1C 
19ee4     08 00 3E 63 
19ee8     06 1C 30 63 
19eec     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
19ef0     30 18 00 3F 
19ef4     66 66 66 3E 
19ef8     36 66 66 66 
19efc     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
19f00     30 18 00 63 
19f04     63 63 63 63 
19f08     63 63 63 63 
19f0c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19f10     00 00 60 30 
19f14     18 00 3B 6E 
19f18     66 06 06 06 
19f1c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
19f20     66 33 00 63 
19f24     63 63 63 63 
19f28     63 63 63 63 
19f2c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19f30     00 00 60 30 
19f34     18 00 63 63 
19f38     63 63 63 63 
19f3c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
19f40     30 18 00 66 
19f44     66 66 66 3C 
19f48     18 18 18 18 
19f4c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
19f50     00 00 00 08 
19f54     0C 0C 3F 0C 
19f58     0C 0C 0C 6C 
19f5c     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
19f60     30 18 00 00 
19f64     00 00 00 00 
19f68     00 00 00 00 
19f6c     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19f70     00 00 00 00 
19f74     00 00 00 00 | 	byte	$00[8]
19f78     7F 00 00 00 
19f7c     00 00 00 00 
19f80     66 33 00 00 
19f84     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
19f88     00 00 00 00 
19f8c     00 00 00 00 
19f90     00 00 00 00 
19f94     00 00 00 00 
19f98     00 00 00 00 
19f9c     00          | 	byte	$00[21]
19f9d     0C 06 3C 36 
19fa1     1C 00 00 00 
19fa5     00 00 00 00 
19fa9     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19fad     00 00 00 63 
19fb1     3E 00 00 00 
19fb5     00 00 00 00 
19fb9     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19fbd     00 00 00 00 
19fc1     3E 63 06 1C 
19fc5     36 63 63 36 
19fc9     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
19fcd     00 00 00 00 
19fd1     00 00 00 00 | 	byte	$00[8]
19fd5     18 00 7E 00 
19fd9     18 00 00 00 
19fdd     00 00 00 00 
19fe1     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19fe5     00 00 00 00 
19fe9     00 00 00 00 | 	byte	$00[8]
19fed     18 30 1E 00 
19ff1     00 00 1C 36 
19ff5     36 1C 00 00 
19ff9     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
19ffd     00 00 00 00 
1a001     63 00 00 00 
1a005     00 00 00 00 
1a009     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a00d     00 00 00 18 
1a011     18 00 00 00 
1a015     00 00 00 00 
1a019     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a01d     00 00 00 00 
1a021     00          | 	byte	$00[5]
1a022     CC 66 33 00 
1a026     33 33 33 33 
1a02a     33 33 6E 00 
1a02e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1a032     00 3F 66 66 
1a036     66 3E 36 66 
1a03a     66 66 6F 00 
1a03e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1a042     36 1C 08 00 
1a046     3B 6E 66 06 
1a04a     06 06 0F 00 
1a04e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1a052     00 00 00 7E 
1a056     7E 7E 7E 7E 
1a05a     7E 7E 00 00 
1a05e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1a062     00 00 00 00 
1a066     00 00 00 00 
1a06a     00 00 00 00 
1a06e     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a070     00 00 00 00 
      ...             
1a0a0     00 00 00 00 
1a0a4     00 00 00    | st_font        file "st4font.def"
1a0a7     FF FF 00 00 
1a0ab     00 00 00 00 
1a0af     00 18 18 18 
1a0b3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1a0b7     18 18 18 18 
1a0bb     18 18 18 18 
1a0bf     18          | 	byte	$18[9]
1a0c0     00 00 00 00 
1a0c4     00 00 00    | 	byte	$00[7]
1a0c7     FF FF 18 18 
1a0cb     18 18 18 18 
1a0cf     18 18 18 18 
1a0d3     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a0d7     FF FF 00 00 
1a0db     00 00 00 00 
1a0df     00 18 18 18 
1a0e3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1a0e7     1F 1F 18 18 
1a0eb     18 18 18 18 
1a0ef     18 18 18 18 
1a0f3     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a0f7     F8 F8 18 18 
1a0fb     18 18 18 18 
1a0ff     18 00 00 00 
1a103     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a107     1F 1F 18 18 
1a10b     18 18 18 18 
1a10f     18 00 00 00 
1a113     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a117     F8 F8 18 18 
1a11b     18 18 18 18 
1a11f     18 18 18 18 
1a123     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a127     1F 1F 00 00 
1a12b     00 00 00 00 
1a12f     00 18 18 18 
1a133     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1a137     F8 F8 00 00 
1a13b     00 00 00 00 
1a13f     00 18 18 18 
1a143     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1a147     FF FF 18 18 
1a14b     18 18 18 18 
1a14f     18 00 00 18 
1a153     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1a157     66 7E 7E 66 
1a15b     66 66 66 30 
1a15f     18 00 00 7E 
1a163     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1a167     3E 06 06 06 
1a16b     06 7E 7E 18 
1a16f     0C 30 18 3C 
1a173     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1a177     06 06 06 66 
1a17b     66 7E 3C 00 
1a17f     00 30 18 66 
1a183     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1a187     7E 7E 76 76 
1a18b     66 66 66 00 
1a18f     00 30 18 7C 
1a193     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1a197     1C 38 70 60 
1a19b     60 7E 3E 00 
1a19f     00 30 18 7E 
1a1a3     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1a1a7     18 0C 0C 06 
1a1ab     06 7E 7E 00 
1a1af     00 18 18 00 
1a1b3     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1a1b7     18 18 0C 0C 
1a1bb     06 7E 7E 00 
1a1bf     00 30 18 3C 
1a1c3     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1a1c7     66 66 66 66 
1a1cb     66          | 	byte	$66[5]
1a1cc     7E 3C 00 00 
1a1d0     00 00 06 06 
1a1d4     06 06 16 1E 
1a1d8     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1a1dc     7E 7E 00 00 
1a1e0     00 00 00 00 
1a1e4     00 3C 7C 60 
1a1e8     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1a1ec     7E 7C 30 18 
1a1f0     00 00 00 00 
1a1f4     00 3C 7E 66 
1a1f8     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1a1fc     7E 7C 18 0C 
1a200     00 00 30 18 
1a204     00 3C 3E 06 
1a208     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1a20c     7E 7C 00 00 
1a210     00 00 30 18 
1a214     00 3E 7E 66 
1a218     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1a21c     66 66 00 00 
1a220     00 00 30 18 
1a224     00 7C 7E 06 
1a228     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1a22c     7E 3E 00 00 
1a230     00 00 30 18 
1a234     00 7E 7E 30 
1a238     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a23c     7E 7E 00 00 
1a240     00 00 18 18 
1a244     00 7E 7E 30 
1a248     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a24c     7E 7E 00 00 
1a250     00 00 30 18 
1a254     00 3C 7E 66 
1a258     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1a25c     7E 3C 00 00 
1a260     00 00 1C 1C 
1a264     18 18 38 3C 
1a268     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1a26c     3C 3C 00 00 
1a270     00 00 00 00 
1a274     00 00 00 00 
1a278     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a27c     00 00 00 00 
1a280     00 00       | 	byte	$00[6]
1a282     18 18 18 18 
1a286     18 18 18 18 | 	byte	$18[8]
1a28a     00 00 18 18 
1a28e     00 00 00 00 
1a292     66 66 66 66 
1a296     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1a29a     00 00 00 00 
1a29e     00 00 00 00 
1a2a2     00          | 	byte	$00[9]
1a2a3     66 66 FF FF 
1a2a7     66 66 FF FF 
1a2ab     66 66 00 00 
1a2af     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1a2b3     7C 7E 06 06 
1a2b7     3E 7C 60 60 
1a2bb     7E 3E 18 18 
1a2bf     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1a2c3     66 30 30 18 
1a2c7     18 0C 0C 66 
1a2cb     66 00 00 00 
1a2cf     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1a2d3     66 66 3C 1C 
1a2d7     1C FC FE 66 
1a2db     66 FE FC 00 
1a2df     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1a2e3     18 18 18 18 
1a2e7     00 00 00 00 
1a2eb     00 00 00 00 
1a2ef     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1a2f3     18 1C 0C 0C 
1a2f7     0C 0C 0C 0C 
1a2fb     1C 18 30 00 
1a2ff     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1a303     18 38 30 30 
1a307     30 30 30 30 
1a30b     38 18 0C 00 
1a30f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1a313     66 66 3C 3C 
1a317     FF FF 3C 3C 
1a31b     66 66 00 00 
1a31f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1a323     00 18 18 18 
1a327     7E 7E 18 18 
1a32b     18 00 00 00 
1a32f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a333     00 00 00 00 
1a337     00 00       | 	byte	$00[6]
1a339     18 18 18 18 
1a33d     18          | 	byte	$18[5]
1a33e     0C 04 00 00 
1a342     00 00 00 00 
1a346     7E 7E 00 00 
1a34a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1a34e     00 00 00 00 
1a352     00 00 00 00 
1a356     00 00 00 00 
1a35a     00          | 	byte	$00[13]
1a35b     18 18 18 00 
1a35f     00 00 00 60 
1a363     60 60 30 30 
1a367     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1a36b     06 06 06 00 
1a36f     00 00 00 3C 
1a373     7E 66 66 66 
1a377     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1a37b     66 7E 3C 00 
1a37f     00 00 00 18 
1a383     18 1C 1C 18 
1a387     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1a38b     18 7E 7E 00 
1a38f     00 00 00 3C 
1a393     7E 66 66 30 
1a397     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1a39b     0C 7E 7E 00 
1a39f     00 00 00 7E 
1a3a3     7E 30 30 18 
1a3a7     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1a3ab     66 7E 3C 00 
1a3af     00 00 00 30 
1a3b3     30 38 38 3C 
1a3b7     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1a3bb     7E 30 30 00 
1a3bf     00 00 00 7E 
1a3c3     7E 06 06 3E 
1a3c7     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1a3cb     66 7E 3C 00 
1a3cf     00 00 00 38 
1a3d3     3C 0E 06 06 
1a3d7     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1a3db     66 7E 3C 00 
1a3df     00 00 00 7E 
1a3e3     7E 60 60 30 
1a3e7     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1a3eb     0C 0C 0C 00 
1a3ef     00 00 00 3C 
1a3f3     7E 66 66 3C 
1a3f7     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1a3fb     66 7E 3C 00 
1a3ff     00 00 00 3C 
1a403     7E 66 66 7E 
1a407     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1a40b     70 3C 1C 00 
1a40f     00 00 00 00 
1a413     00 00 18 18 
1a417     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1a41b     18 18 18 00 
1a41f     00 00 00 00 
1a423     00 00 18 18 
1a427     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1a42b     18 18 18 0C 
1a42f     04 00 00 00 
1a433     70 38 1C 0E 
1a437     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1a43b     70 00 00 00 
1a43f     00 00 00 00 
1a443     00 00 7E 7E 
1a447     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1a44b     00 00 00 00 
1a44f     00 00 00 00 | 	byte	$00[8]
1a453     0E 1C 38 70 
1a457     E0 70 38 1C 
1a45b     0E 00 00 00 
1a45f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1a463     7E 66 66 30 
1a467     30 18 18 18 
1a46b     00 18 18 00 
1a46f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1a473     7E 66 66 66 
1a477     66 36 06 66 
1a47b     66 7E 3C 00 
1a47f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1a483     3C 7E 66 66 
1a487     66 7E 7E 66 
1a48b     66 66 66 00 
1a48f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1a493     7E 66 66 7E 
1a497     3E 66 66 66 
1a49b     66 7E 3E 00 
1a49f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1a4a3     7E 66 66 06 
1a4a7     06 06 06 66 
1a4ab     66 7E 3C 00 
1a4af     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1a4b3     7E 66 66 66 
1a4b7     66 66 66 66 
1a4bb     66 7E 3E 00 
1a4bf     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1a4c3     7E 06 06 3E 
1a4c7     3E 06 06 06 
1a4cb     06 7E 7E 00 
1a4cf     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1a4d3     7E 06 06 3E 
1a4d7     3E 06 06 06 
1a4db     06 06 06 00 
1a4df     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1a4e3     7E 06 06 76 
1a4e7     76 66 66 66 
1a4eb     66 7E 3C 00 
1a4ef     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1a4f3     66 66 66 7E 
1a4f7     7E 66 66 66 
1a4fb     66 66 66 00 
1a4ff     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1a503     7E 18 18 18 
1a507     18 18 18 18 
1a50b     18 7E 7E 00 
1a50f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1a513     60 60 60 60 
1a517     60 60 60    | 	byte	$60[7]
1a51a     66 66 7E 3C 
1a51e     00 00 00 00 
1a522     66 66 36 36 
1a526     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1a52a     66 66 C6 C6 
1a52e     00 00 00 00 
1a532     06 06 06 06 
1a536     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1a53a     06 06 7E 7E 
1a53e     00 00 00 00 
1a542     C6 C6 EE EE 
1a546     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1a54a     C6 C6 C6 C6 
1a54e     00 00 00 00 
1a552     66 66 66 6E 
1a556     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1a55a     76 66 66 66 
1a55e     00 00 00 00 
1a562     3C 7E 66 66 
1a566     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a56a     66 66 7E 3C 
1a56e     00 00 00 00 
1a572     3E 7E 66 66 
1a576     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1a57a     06 06 06 06 
1a57e     00 00 00 00 
1a582     3C 7E 66 66 
1a586     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a58a     66 56 3E 6C 
1a58e     00 00 00 00 
1a592     3E 7E 66 66 
1a596     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1a59a     66 66 C6 C6 
1a59e     00 00 00 00 
1a5a2     7C 7E 06 06 
1a5a6     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1a5aa     60 60 7E 3E 
1a5ae     00 00 00 00 
1a5b2     7E 7E 18 18 
1a5b6     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1a5ba     18 18 18 18 
1a5be     00 00 00 00 
1a5c2     66 66 66 66 
1a5c6     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a5ca     66 66 7E 3C 
1a5ce     00 00 00 00 
1a5d2     66 66 66 66 
1a5d6     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a5da     3C 3C 18 18 
1a5de     00 00 00 00 
1a5e2     C6 C6 C6 C6 
1a5e6     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1a5ea     FE EE C6 82 
1a5ee     00 00 00 00 
1a5f2     66 66 66 3C 
1a5f6     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1a5fa     3C 66 66 66 
1a5fe     00 00 00 00 
1a602     66 66 66 66 
1a606     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1a60a     18 18 18 18 
1a60e     00 00 00 00 
1a612     7E 7E 30 30 
1a616     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1a61a     06 06 7E 7E 
1a61e     00 00 00 00 
1a622     3C 3C 0C 0C 
1a626     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1a62a     0C 0C 3C 3C 
1a62e     00 00 00 00 
1a632     06 06 0C 0C 
1a636     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1a63a     60 60 C0 C0 
1a63e     00 00 00 00 
1a642     3C 3C 30 30 
1a646     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1a64a     30 30 3C 3C 
1a64e     00 00 00 00 
1a652     18 18 3C 3C 
1a656     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1a65a     00 00 00 00 
1a65e     00 00 00 00 
1a662     00 00 00 00 
1a666     00 00 00 00 
1a66a     00 00       | 	byte	$00[18]
1a66c     FE FE 00 00 
1a670     00 00 0C 0C 
1a674     18 18 00 00 
1a678     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1a67c     00 00 00 00 
1a680     00 00 00 00 
1a684     00          | 	byte	$00[9]
1a685     3C 7C 60 7C 
1a689     7E 66 66 7E 
1a68d     7C 00 00 00 
1a691     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1a695     3E 7E 66 66 
1a699     66 66 66 7E 
1a69d     3E 00 00 00 
1a6a1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1a6a5     3C 3E 06 06 
1a6a9     06 06 06 7E 
1a6ad     7C 00 00 00 
1a6b1     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1a6b5     7C 7E 66 66 
1a6b9     66 66 66 7E 
1a6bd     7C 00 00 00 
1a6c1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1a6c5     3C 7E 66 66 
1a6c9     7E 06 06 7E 
1a6cd     7C 00 00 00 
1a6d1     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1a6d5     18 7E 7E 18 
1a6d9     18 18 18 18 
1a6dd     18 00 00 00 
1a6e1     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a6e5     7C 7E 66 66 
1a6e9     66 66 7E 7C 
1a6ed     60 7E 3E 00 
1a6f1     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1a6f5     3E 7E 66 66 
1a6f9     66 66 66 66 
1a6fd     66 00 00 00 
1a701     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1a705     1C 1C 18 18 
1a709     18 18 18 3C 
1a70d     3C 00 00 00 
1a711     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1a715     30 30 30 30 
1a719     30 30 30 30 
1a71d     30          | 	byte	$30[9]
1a71e     3E 1E 00 00 
1a722     06 06 06 36 
1a726     36 1E 1E 1E 
1a72a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1a72e     00 00 00 00 
1a732     1C 1C 18 18 
1a736     18 18 18 18 
1a73a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1a73e     00 00 00 00 
1a742     00 00 00    | 	byte	$00[7]
1a745     6C FE FE D6 
1a749     D6 C6 C6 C6 
1a74d     C6 00 00 00 
1a751     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1a755     3E 7E 66 66 
1a759     66 66 66 66 
1a75d     66 00 00 00 
1a761     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1a765     3C 7E 66 66 
1a769     66 66 66 7E 
1a76d     3C 00 00 00 
1a771     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1a775     3E 7E 66 66 
1a779     66 66 66 7E 
1a77d     3E 06 06 00 
1a781     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1a785     7C 7E 66 66 
1a789     66 66 66 7E 
1a78d     7C 60 60 00 
1a791     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1a795     3E 7E 66 06 
1a799     06 06 06 06 
1a79d     06 00 00 00 
1a7a1     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1a7a5     7C 7E 06 0E 
1a7a9     3C 70 60 7E 
1a7ad     3E 00 00 00 
1a7b1     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1a7b5     7E 7E 18 18 
1a7b9     18 18 18 78 
1a7bd     70 00 00 00 
1a7c1     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1a7c5     66 66 66 66 
1a7c9     66 66 66    | 	byte	$66[7]
1a7cc     7E 7C 00 00 
1a7d0     00 00 00 00 
1a7d4     00 66 66 66 
1a7d8     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1a7dc     18 18 00 00 
1a7e0     00 00 00 00 
1a7e4     00 C6 C6 D6 
1a7e8     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1a7ec     C6 82 00 00 
1a7f0     00 00 00 00 
1a7f4     00 66 66 3C 
1a7f8     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1a7fc     66 66 00 00 
1a800     00 00 00 00 
1a804     00 66 66 66 
1a808     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1a80c     7C 60 7E 3E 
1a810     00 00 00 00 
1a814     00 7E 7E 30 
1a818     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a81c     7E 7E 00 00 
1a820     00 00 30 18 
1a824     18 18 18 0C 
1a828     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1a82c     18 30 00 00 
1a830     00 00 18 18 
1a834     18 18 18 18 
1a838     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a83c     18 18 00 00 
1a840     00 00 0C 18 
1a844     18 18 18 30 
1a848     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1a84c     18 0C 00 00 
1a850     00 00 6C 7E 
1a854     36 00 00 00 
1a858     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1a85c     00 00 00 00 
1a860     00 00 00 00 
1a864     00          | 	byte	$00[9]
1a865     18 18 18 18 
1a869     18 18 00 00 
1a86d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1a870     00 00 00 00 
1a874     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1a878     00 00 00 00 
1a87c     00 80 80 80 
1a880     00 00 00 FF 
1a884     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1a888     00 00 00 00 
1a88c     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1a88d     80 00 00 00 
1a891     00 80 00 00 
1a895     80 80 00 00 
1a899     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1a89d     80 00 80 00 
1a8a1     00 40 80 00 
1a8a5     AA AA AA 00 
1a8a9     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1a8ad     FF 00 00 00 
1a8b1     00 FF 00 00 
1a8b5     FF FF 00 00 
1a8b9     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1a8bd     FF 00 FF 00 
1a8c1     00 FF FF 00 
1a8c5     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1a8c8     00 00 00 00 
1a8cc     00          | ataripalette   file "ataripalettep2.def"
1a8cd     11 11 11 00 
1a8d1     22 22 22 00 
1a8d5     33 33 33 00 
1a8d9     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1a8dd     55 55 55 00 
1a8e1     66 66 66 00 
1a8e5     77 77 77 00 
1a8e9     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1a8ed     99 99 99 00 
1a8f1     AA AA AA 00 
1a8f5     BB BB BB 00 
1a8f9     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1a8fd     DD DD DD 00 
1a901     EE EE EE 00 
1a905     FF FF FF 00 
1a909     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1a90d     00 14 40 00 
1a911     00 1E 60 00 
1a915     00 28 80 00 
1a919     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1a91d     00 3C BF 00 
1a921     00 46 DF 00 
1a925     00 50 FF 00 
1a929     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1a92d     39 77 FF 00 
1a931     55 8A FF 00 
1a935     71 9E FF 00 
1a939     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1a93d     AA C5 FF 00 
1a941     C6 D8 FF 00 
1a945     E3 EC FF 00 
1a949     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1a94d     00 00 40 00 
1a951     00 00 60 00 
1a955     00 00 80 00 
1a959     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1a95d     00 00 BF 00 
1a961     00 00 DF 00 
1a965     00 00 FF 00 
1a969     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1a96d     39 39 FF 00 
1a971     55 55 FF 00 
1a975     71 71 FF 00 
1a979     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1a97d     AA AA FF 00 
1a981     C6 C6 FF 00 
1a985     E3 E3 FF 00 
1a989     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1a98d     20 00 40 00 
1a991     30 00 60 00 
1a995     40 00 80 00 
1a999     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1a99d     60 00 BF 00 
1a9a1     70 00 DF 00 
1a9a5     80 00 FF 00 
1a9a9     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1a9ad     9C 39 FF 00 
1a9b1     AA 55 FF 00 
1a9b5     B8 71 FF 00 
1a9b9     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1a9bd     D5 AA FF 00 
1a9c1     E3 C6 FF 00 
1a9c5     F1 E3 FF 00 
1a9c9     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1a9cd     40 00 40 00 
1a9d1     60 00 60 00 
1a9d5     80 00 80 00 
1a9d9     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1a9dd     BF 00 BF 00 
1a9e1     DF 00 DF 00 
1a9e5     FF 00 FF 00 
1a9e9     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1a9ed     FF 39 FF 00 
1a9f1     FF 55 FF 00 
1a9f5     FF 71 FF 00 
1a9f9     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1a9fd     FF AA FF 00 
1aa01     FF C6 FF 00 
1aa05     FF E3 FF 00 
1aa09     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1aa0d     40 00 20 00 
1aa11     60 00 30 00 
1aa15     80 00 40 00 
1aa19     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1aa1d     BF 00 60 00 
1aa21     DF 00 70 00 
1aa25     FF 00 80 00 
1aa29     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1aa2d     FF 39 9C 00 
1aa31     FF 55 AA 00 
1aa35     FF 71 B8 00 
1aa39     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1aa3d     FF AA D5 00 
1aa41     FF C6 E3 00 
1aa45     FF E3 F1 00 
1aa49     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1aa4d     40 00 00 00 
1aa51     60 00 00 00 
1aa55     80 00 00 00 
1aa59     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1aa5d     BF 00 00 00 
1aa61     DF 00 00 00 
1aa65     FF 00 00 00 
1aa69     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1aa6d     FF 39 39 00 
1aa71     FF 55 55 00 
1aa75     FF 71 71 00 
1aa79     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1aa7d     FF AA AA 00 
1aa81     FF C6 C6 00 
1aa85     FF E3 E3 00 
1aa89     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1aa8d     40 10 00 00 
1aa91     60 18 00 00 
1aa95     80 20 00 00 
1aa99     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1aa9d     BF 30 00 00 
1aaa1     DF 38 00 00 
1aaa5     FF 40 00 00 
1aaa9     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1aaad     FF 6A 39 00 
1aab1     FF 80 55 00 
1aab5     FF 95 71 00 
1aab9     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1aabd     FF BF AA 00 
1aac1     FF D5 C6 00 
1aac5     FF EA E3 00 
1aac9     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1aacd     40 20 00 00 
1aad1     60 30 00 00 
1aad5     80 40 00 00 
1aad9     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1aadd     BF 60 00 00 
1aae1     DF 70 00 00 
1aae5     FF 80 00 00 
1aae9     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1aaed     FF 9C 39 00 
1aaf1     FF AA 55 00 
1aaf5     FF B8 71 00 
1aaf9     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1aafd     FF D5 AA 00 
1ab01     FF E3 C6 00 
1ab05     FF F1 E3 00 
1ab09     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1ab0d     40 30 00 00 
1ab11     60 48 00 00 
1ab15     80 60 00 00 
1ab19     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1ab1d     BF 90 00 00 
1ab21     DF A8 00 00 
1ab25     FF C0 00 00 
1ab29     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1ab2d     FF CE 39 00 
1ab31     FF D5 55 00 
1ab35     FF DC 71 00 
1ab39     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1ab3d     FF EA AA 00 
1ab41     FF F1 C6 00 
1ab45     FF F8 E3 00 
1ab49     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1ab4d     30 40 00 00 
1ab51     48 60 00 00 
1ab55     60 80 00 00 
1ab59     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1ab5d     90 BF 00 00 
1ab61     A8 DF 00 00 
1ab65     C0 FF 00 00 
1ab69     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1ab6d     CE FF 39 00 
1ab71     D5 FF 55 00 
1ab75     DC FF 71 00 
1ab79     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1ab7d     EA FF AA 00 
1ab81     F1 FF C6 00 
1ab85     F8 FF E3 00 
1ab89     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1ab8d     00 40 00 00 
1ab91     00 60 00 00 
1ab95     00 80 00 00 
1ab99     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1ab9d     00 BF 00 00 
1aba1     00 DF 00 00 
1aba5     00 FF 00 00 
1aba9     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1abad     39 FF 39 00 
1abb1     55 FF 55 00 
1abb5     71 FF 71 00 
1abb9     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1abbd     AA FF AA 00 
1abc1     C6 FF C6 00 
1abc5     E3 FF E3 00 
1abc9     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1abcd     00 40 14 00 
1abd1     00 60 1E 00 
1abd5     00 80 28 00 
1abd9     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1abdd     00 BF 3C 00 
1abe1     00 DF 46 00 
1abe5     00 FF 50 00 
1abe9     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1abed     39 FF 77 00 
1abf1     55 FF 8A 00 
1abf5     71 FF 9E 00 
1abf9     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1abfd     AA FF C5 00 
1ac01     C6 FF D8 00 
1ac05     E3 FF EC 00 
1ac09     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1ac0d     00 40 28 00 
1ac11     00 60 3C 00 
1ac15     00 80 50 00 
1ac19     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1ac1d     00 BF 78 00 
1ac21     00 DF 8C 00 
1ac25     00 FF A0 00 
1ac29     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1ac2d     39 FF B5 00 
1ac31     55 FF C0 00 
1ac35     71 FF CA 00 
1ac39     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1ac3d     AA FF DF 00 
1ac41     C6 FF EA 00 
1ac45     E3 FF F4 00 
1ac49     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1ac4d     00 40 40 00 
1ac51     00 60 60 00 
1ac55     00 80 80 00 
1ac59     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1ac5d     00 BF BF 00 
1ac61     00 DF DF 00 
1ac65     00 FF FF 00 
1ac69     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1ac6d     39 FF FF 00 
1ac71     55 FF FF 00 
1ac75     71 FF FF 00 
1ac79     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1ac7d     AA FF FF 00 
1ac81     C6 FF FF 00 
1ac85     E3 FF FF 00 
1ac89     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1ac8d     00 28 40 00 
1ac91     00 3C 60 00 
1ac95     00 50 80 00 
1ac99     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1ac9d     00 78 BF 00 
1aca1     00 8C DF 00 
1aca5     00 A0 FF 00 
1aca9     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1acad     39 B5 FF 00 
1acb1     55 C0 FF 00 
1acb5     71 CA FF 00 
1acb9     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1acbd     AA DF FF 00 
1acc1     C6 EA FF 00 
1acc5     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1acc8                 | '**********************************************************************************
1acc8                 | '
1acc8                 | '        Timings and colors definitions
1acc8                 | '
1acc8                 | '**********************************************************************************
1acc8                 | 
1acc8                 |    'streamer sets for text mode, to add to timings[0..5]
1acc8                 | ' todo for the retromachine: 768x576
1acc8                 | 
1acc8                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1acc8     10 00 00 00 
1accc     50 00 00 00 
1acd0     14 00 00 00 
1acd4     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1acd8     70 00 00 00 
1acdc     08 00 00 00 
1ace0     30 00 00 00 
1ace4     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1ace8     10 00 00 00 
1acec     10 00 00 00 
1acf0     00 00 00 00 
1acf4     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1acf8     E0 01 00 00 
1acfc     F6 32 24 15 
1ad00     FB 6C C3 01 
1ad04     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ad08                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1ad08                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1ad08     30 00 00 00 
1ad0c     50 00 00 00 
1ad10     34 00 00 00 
1ad14     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1ad18     20 00 00 00 
1ad1c     08 00 00 00 
1ad20     16 00 00 00 
1ad24     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1ad28     24 00 00 00 
1ad2c     18 00 00 00 
1ad30     40 00 00 00 
1ad34     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1ad38     F0 01 00 00 
1ad3c     F6 32 24 15 
1ad40     FB 6C C3 01 
1ad44     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1ad48                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1ad48     10 00 00 00 
1ad4c     40 00 00 00 
1ad50     10 00 00 00 
1ad54     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1ad58     08 00 00 00 
1ad5c     08 00 00 00 
1ad60     08 00 00 00 
1ad64     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1ad68     40 00 00 00 
1ad6c     20 00 00 00 
1ad70     80 00 00 00 
1ad74     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1ad78     E0 01 00 00 
1ad7c     70 AE E9 10 
1ad80     FB 8B FF 01 
1ad84     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1ad88     10 00 00 00 
1ad8c     42 00 00 00 
1ad90     14 00 00 00 
1ad94     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ad98     00 00 00 00 
1ad9c     08 00 00 00 
1ada0     00 00 00 00 
1ada4     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1ada8     10 00 00 00 
1adac     10 00 00 00 
1adb0     C0 00 00 00 
1adb4     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1adb8     40 02 00 00 
1adbc     F6 32 24 15 
1adc0     FB 6C C3 01 
1adc4     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1adc8     50 00 00 00 
1adcc     A0 00 00 00 
1add0     54 00 00 00 
1add4     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1add8     08 00 00 00 
1addc     08 00 00 00 
1ade0     08 00 00 00 
1ade4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ade8     0C 00 00 00 
1adec     08 00 00 00 
1adf0     00 01 00 00 
1adf4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1adf8     E0 01 00 00 
1adfc     10 06 56 15 
1ae00     FB 64 C3 01 
1ae04     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1ae08     50 00 00 00 
1ae0c     32 00 00 00 
1ae10     50 00 00 00 
1ae14     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ae18     08 00 00 00 
1ae1c     08 00 00 00 
1ae20     08 00 00 00 
1ae24     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ae28     0C 00 00 00 
1ae2c     08 00 00 00 
1ae30     40 01 00 00 
1ae34     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1ae38     E0 01 00 00 
1ae3c     F2 CD 33 13 
1ae40     FB 53 92 01 
1ae44     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ae48     18 00 00 00 
1ae4c     30 00 00 00 
1ae50     18 00 00 00 
1ae54     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1ae58     08 00 00 00 
1ae5c     08 00 00 00 
1ae60     08 00 00 00 
1ae64     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ae68     0C 00 00 00 
1ae6c     08 00 00 00 
1ae70     80 01 00 00 
1ae74     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1ae78     E0 01 00 00 
1ae7c     F4 8F 11 11 
1ae80     FB 3A 55 01 
1ae84     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1ae88     20 00 00 00 
1ae8c     40 00 00 00 
1ae90     22 00 00 00 
1ae94     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ae98     00 00 00 00 
1ae9c     08 00 00 00 
1aea0     00 00 00 00 
1aea4     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1aea8     0C 00 00 00 
1aeac     08 00 00 00 
1aeb0     C0 01 00 00 
1aeb4     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1aeb8     F0 01 00 00 
1aebc     F2 CD 33 13 
1aec0     FB 53 92 01 
1aec4     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1aec8                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1aec8     00 75 C7 97 
1aecc     27 47 F6 0A 
1aed0     05 79 CB 9B 
1aed4     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1aed8                 | 
1aed8     28 12 64 FD | hdmi            setq    #9
1aedc     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1aee0                 |            '     setq2   #255
1aee0                 |             '    rdlong  $100, paletteptr 
1aee0     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1aee4     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1aee8     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1aeec     78 F9 02 F1 |                 add     ii,hbase
1aef0     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1aef4     7B 0B 80 FF 
1aef8     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1aefc                 | 
1aefc     66 66 86 FF 
1af00     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1af04                 | 
1af04                 | 
1af04                 | ''--------  frame rendering main loop  ---------------------------------------------------
1af04                 | 
1af04                 | p101
1af04     28 14 64 FD |                 setq    #10
1af08     00 DF 06 FB |                 rdlong  framebuf,  ptra
1af0c     28 1E 64 FD |                 setq    #15
1af10     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1af14     71 99 02 FB |                 rdlong  border,borderptr
1af18                 | 
1af18     01 C4 06 F1 |                 add     frames,#1
1af1c     76 F5 02 F6 |                 mov     dlptr2,dlptr
1af20                 | 
1af20     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1af24     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1af28     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1af2c     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1af30                 |  '' up porch
1af30                 | 
1af30     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1af34     49 FF 02 F6 |                 mov     hsync1,sync_001
1af38     37 A8 46 FB |                 callpa  i_upporch ,#blank
1af3c     72 01 68 FC |                 wrlong  #0,vblankptr
1af40                 |                 
1af40     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1af44     29 FE 65 3D |          if_nc  setq2   #255
1af48     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1af4c                 | 
1af4c                 | '' cursor blinking
1af4c                 | 
1af4c     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1af50     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1af54                 | 
1af54                 | '' main screen
1af54                 | 
1af54     00 BE 06 F6 |                 mov linenum,#0
1af58     00 18 07 F6 |                 mov rcnt,#0
1af5c     00 1C 07 F6 |                 mov rcnt2a,#0
1af60                 | 
1af60                 | 
1af60     00 18 0F F2 | p301            cmp rcnt,#0 wz
1af64     18 00 90 AD |         if_z    jmp #p306
1af68     01 18 87 F1 |                 sub rcnt,#1
1af6c     90 F7 02 F6 |                 mov dl,rdl
1af70     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1af74     8F F7 02 A1 |    if_z        add dl,roffset  
1af78     7B 21 03 F6 |                 mov rdl,dl
1af7c     04 00 90 FD |                 jmp #p307          
1af80                 |           
1af80                 |                 
1af80     7A F7 02 FB | p306            rdlong  dl,dlptr2
1af84     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1af88     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1af8c     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1af90                 | 
1af90                 | '' Special entry:
1af90                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1af90                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1af90                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1af90                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1af90                 | '' todo: set horizontal scroll (if needed)
1af90                 | 
1af90     02 FA 66 F0 |                 shl framebuf2,#2
1af94     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1af98     04 22 0F F2 |                 cmp dlc,#%100 wz
1af9c                 |   
1af9c                 |                 
1af9c     04 F4 06 F1 |                 add dlptr2,#4
1afa0     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1afa4     7A 21 03 FB |                  rdlong rdl,dlptr2
1afa8     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1afac     04 18 47 F0 |                  shr rcnt,#4
1afb0                 |              
1afb0     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1afb4     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1afb8                 |                 
1afb8     04 1E 47 F0 |                  shr roffset,#4
1afbc     0C 1E 67 F0 |                  shl roffset,#12
1afc0                 |   
1afc0     9C FF 9F FD |                  jmp #p301
1afc4                 |                  
1afc4                 |                  
1afc4                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1afc4     0C FA 46 F0 |                 shr     framebuf2,#12
1afc8     02 FA 66 F0 |                 shl     framebuf2,#2
1afcc                 | 
1afcc     7B 03 E3 F8 |                 getbyte t1,dl,#0
1afd0     00 02 0F F2 |                 cmp     t1,#0 wz
1afd4     34 00 90 AD |     if_z        jmp     #borderline
1afd8                 | 
1afd8     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1afdc     50 00 90 CD |           if_c   jmp     #textline
1afe0     50 02 90 3D |           if_nc  jmp     #graphline
1afe4                 | '
1afe4     01 BE 06 F1 | p302            add     linenum,#1
1afe8     04 F4 06 F1 |                 add     dlptr2,#4
1afec     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1aff0     6C FF 9F 5D |          if_nz  jmp     #p301
1aff4                 | 
1aff4     72 03 68 FC | p112            wrlong  #1,vblankptr
1aff8     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1affc                 | 
1affc     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1b000     4B FF 02 F6 |                 mov     hsync1,sync_223
1b004     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1b008     F8 FE 9F FD |                 jmp     #p101
1b00c                 | 
1b00c                 | '' ---------------  END of frame rendering loop -------------------------------------------
1b00c                 | 
1b00c                 | 
1b00c     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1b010     4C A1 C2 FC |                 xcont   m_vi,border
1b014     CC FF 9F FD |                 jmp     #p302
1b018                 | 
1b018                 | 
1b018     08 00 B0 FD | blank           call    #hsync                          'blank lines
1b01c     7E A1 C2 FC |                 xcont   m_vi,hsync0
1b020     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1b024                 | 
1b024     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1b028     7F 9D B2 FC |                 xzero   m_sn,hsync1
1b02c     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1b030                 | 
1b030                 | 
1b030                 | 
1b030                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1b030                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1b030                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1b030                 | 
1b030                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1b030                 | 
1b030     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1b034                 | 
1b034     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1b038     7B 17 5B F8 |                 getnib  zoom, dl,#3
1b03c     03 16 07 F5 |                 and             zoom, #3
1b040                 | 
1b040                 | 
1b040                 | 
1b040     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1b044     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1b048     3F BC 06 F5 |                 and     linestart,#63
1b04c     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1b050     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1b054                 | 
1b054     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1b058                 | 
1b058                 |                        ' if fontline =0, get a border color
1b058                 | 
1b058     51 03 33 F9 | p102            getword t1,m_border,#0
1b05c     00 02 0F F2 |                 cmp     t1, #0 wz
1b060     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1b064                 | 
1b064     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1b068     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1b06c     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1b070     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1b074     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1b078     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1b07c     52 BB 02 F6 |                 mov m_lut2, m_lut1
1b080     6A BB 02 F1 |                 add m_lut2, lutt1
1b084     58 0F 03 F6 |                 mov cpl2,i_cpl
1b088                 | 
1b088     02 16 0F F2 |                cmp zoom,#2 wz
1b08c     E4 00 90 AD |           if_z jmp #p420
1b090     01 16 0F F2 |                cmp zoom,#1 wz
1b094     64 00 90 AD |           if_z jmp #p410
1b098     00 16 0F F2 |                 cmp zoom,#0 wz
1b09c     04 00 90 AD |           if_z jmp #p400
1b0a0     50 01 90 FD |                jmp #p430
1b0a4                 | 
1b0a4                 |                    '
1b0a4                 |  ''---------------------------------------------------------------------------------------------------------
1b0a4     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1b0a8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b0ac     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b0b0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1b0b4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1b0b8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1b0bc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1b0c0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1b0c4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1b0c8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1b0cc                 | 
1b0cc     81 BB C2 FC |                         xcont m_lut2,t1
1b0d0                 | 
1b0d0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b0d4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b0d8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b0dc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b0e0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b0e4     01 C0 86 F1 |                         sub     lutaddr,#1
1b0e8                 | 
1b0e8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b0ec     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b0f0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b0f4                 | 
1b0f4     EB 0F 6F FB |                         djnz   cpl2,#p400
1b0f8     28 01 90 FD |  p401                   jmp    #p103
1b0fc                 | 
1b0fc                 | ''------------------------------------------------------------------------------------------------------------
1b0fc                 | 
1b0fc     01 0E 47 F0 |  p410                   shr cpl2,#1
1b100                 | 
1b100                 | ''---------------------------------------------------------------------------------------------------------
1b100     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1b104     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b108     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b10c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1b110     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1b114     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1b118     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1b11c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1b120     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1b124     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1b128                 | 
1b128                 | 
1b128     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1b12c     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1b130     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1b134     03 02 07 FA |                         mul t1,#3
1b138     81 BB C2 FC |                         xcont m_lut2,t1
1b13c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b140     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b144     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b148     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b14c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b150     01 C0 86 F1 |                         sub     lutaddr,#1
1b154     63 06 63 FD |                         mergew t3
1b158     03 06 07 FA |                         mul t3,#3
1b15c     83 BB C2 FC |                         xcont m_lut2,t3
1b160                 | 
1b160     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b164     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b168                 | 
1b168     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b16c                 | 
1b16c     E4 0F 6F FB |                         djnz   cpl2,#p412
1b170     B0 00 90 FD |  p411                   jmp    #p103
1b174                 | 
1b174                 | ''------------------------------------------------------------------------------------------------------------
1b174                 | 
1b174     02 0E 47 F0 |  p420                   shr cpl2,#2
1b178                 | 
1b178                 | ''---------------------------------------------------------------------------------------
1b178     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1b17c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b180     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b184     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1b188     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1b18c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1b190     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1b194     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1b198     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1b19c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1b1a0                 | 
1b1a0     61 02 63 FD |                         mergeb t1
1b1a4     81 07 3B F9 |                         getword t3,t1,#1
1b1a8     0F 02 07 FA |                         mul t1,#15
1b1ac     81 BB C2 FC |                         xcont m_lut2,t1
1b1b0                 | 
1b1b0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b1b4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b1b8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b1bc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b1c0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b1c4     01 C0 86 F1 |                         sub     lutaddr,#1
1b1c8                 | 
1b1c8     81 09 EB F8 |                         getbyte t4,t1,#1        '
1b1cc     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1b1d0                 | 
1b1d0     0F 06 07 FA |                         mul t3,#15
1b1d4     83 BB C2 FC |                         xcont m_lut2,t3
1b1d8                 | 
1b1d8     83 0B EB F8 |                         getbyte t5,t3,#1
1b1dc     85 BB C2 FC |                         xcont m_lut2, t5
1b1e0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b1e4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b1e8                 | 
1b1e8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b1ec                 | 
1b1ec     E2 0F 6F FB |                         djnz   cpl2,#p422
1b1f0     30 00 90 FD |  p421                   jmp    #p103
1b1f4                 | 
1b1f4                 | '--------------------------------------------------------------------------------------------------------------
1b1f4                 | 
1b1f4     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1b1f8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b1fc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b200                 | 
1b200     00 BA C6 FC |                         xcont m_lut2,#0
1b204                 | 
1b204     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b208     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b20c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b210     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b214     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b218     01 C0 86 F1 |                         sub     lutaddr,#1
1b21c                 | 
1b21c     F5 0F 6F FB |                         djnz   cpl2,#p430
1b220     00 00 90 FD |  p431                   jmp    #p103
1b224                 | 
1b224                 | ''------------------------------------------------------------------------------------------------------------
1b224                 | 
1b224                 | 
1b224                 | 
1b224     51 25 33 F9 | p103            getword  mb2,m_border,#0
1b228     00 24 0F F2 |                 cmp      mb2, #0 wz
1b22c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b230                 | 
1b230     B0 FD 9F FD |                 jmp #p302
1b234                 | 
1b234                 | '' -------------------------------------- END of text line ---------------------------------
1b234                 | 
1b234                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1b234                 | 
1b234     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1b238                 | 
1b238                 | 
1b238     51 25 33 F9 | p202            getword mb2,m_border,#0
1b23c     00 24 0F F2 |                 cmp     mb2, #0 wz
1b240     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1b244                 | 
1b244                 | '----------------------------------------- display pixels
1b244                 | 
1b244     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1b248     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1b24c                 | 
1b24c     7B 17 5B F8 |                 getnib  zoom, dl,#3
1b250     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1b254                 | 
1b254     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1b258     0C BC 06 F5 |                 and     colordepth,#12
1b25c                 | 
1b25c     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1b260     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1b264     64 00 90 AD |           if_z  jmp     #p240
1b268                 | 
1b268     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1b26c     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1b270     98 00 90 AD |           if_z  jmp     #p250
1b274                 | 
1b274     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1b278     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1b27c     FC 00 90 AD |           if_z  jmp     #p260
1b280                 | 
1b280     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1b284                 | 
1b284                 | '' --- 8 bit color modes
1b284                 | 
1b284     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1b288     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b28c                 | 
1b28c     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1b290     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1b294                 |        
1b294                 |  '  
1b294     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1b298     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1b29c                 |     
1b29c                 |  
1b29c     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1b2a0     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1b2a4                 |         
1b2a4                 | 
1b2a4                 |         
1b2a4     7D 11 03 FB | p235               rdlong  char,framebuf2
1b2a8     32 0C 63 FD |                    skipf skippattern
1b2ac     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1b2b0     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1b2b4     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1b2b8     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1b2bc     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1b2c0     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1b2c4     F7 0F 6F FB |                    djnz    cpl2,#p235
1b2c8                 | 
1b2c8     20 01 90 FD |                jmp    #p203
1b2cc                 |                   
1b2cc                 | 
1b2cc                 | 
1b2cc                 | '' --- 1 bit color modes
1b2cc                 | 
1b2cc     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1b2d0     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b2d4                 | 
1b2d4     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1b2d8     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1b2dc     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1b2e0                 | 
1b2e0                 | 
1b2e0     7D 11 E3 FA | p241               rdword  char,framebuf2
1b2e4     44 10 FF F9 |                    movbyts char,#%01000100
1b2e8     63 10 63 FD |                    mergew  char
1b2ec     32 0C 63 FD |                    skipf skippattern
1b2f0     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1b2f4     63 10 63 FD |                    mergew  char                    ' 1 0
1b2f8     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1b2fc     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1b300     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1b304     F6 0F 6F FB |                    djnz   cpl2,#p241
1b308                 | 
1b308                 | 
1b308     E0 00 90 FD |                jmp    #p203
1b30c                 | 
1b30c                 | '' --- 2 bit color modes
1b30c                 | 
1b30c     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1b310     C8 00 90 AD |        if_z   jmp #p251
1b314                 | 
1b314     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b318     30 00 90 AD |        if_z   jmp #p252
1b31c                 | 
1b31c                 | 
1b31c     7D 11 C3 FA | p254               rdbyte char,framebuf2
1b320     04 0A 07 F6 |                    mov  t5,#4
1b324     02 10 67 F0 | p255               shl  char,#2
1b328     88 03 53 F8 |                    getnib  t1,char,#2
1b32c     03 02 07 F5 |                    and     t1,#3
1b330     55 02 07 FA |                    mul     t1,#$55
1b334     81 05 03 F9 |                    rolbyte  t2,t1,#0
1b338     FA 0B 6F FB |                    djnz    t5,#p255
1b33c     82 BB C2 FC |                    xcont   m_lut2,t2
1b340     01 FA 06 F1 |                    add     framebuf2,#1
1b344     F5 0F 6F FB |                    djnz    cpl2,#p254
1b348     A0 00 90 FD |                    jmp     #p203
1b34c                 | 
1b34c     7D 11 E3 FA | p252               rdword char,framebuf2
1b350     08 0A 07 F6 |                    mov  t5,#8
1b354     02 10 67 F0 | p253               shl  char,#2
1b358     88 03 63 F8 |                    getnib  t1,char,#4
1b35c     03 02 07 F5 |                    and     t1,#3
1b360     05 02 07 FA |                    mul     t1,#5
1b364     81 05 83 F8 |                    rolnib  t2,t1,#0
1b368     FA 0B 6F FB |                    djnz    t5,#p253
1b36c     82 BB C2 FC |                    xcont   m_lut2,t2
1b370     02 FA 06 F1 |                    add     framebuf2,#2
1b374     F5 0F 6F FB |                    djnz    cpl2,#p252
1b378     70 00 90 FD |                    jmp     #p203
1b37c                 | 
1b37c                 | '' ------ 4 bit color modes
1b37c                 | 
1b37c     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1b380     58 00 90 AD |        if_z   jmp #p251
1b384                 | 
1b384     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b388     2C 00 90 AD |        if_z   jmp #p262
1b38c                 | 
1b38c                 | 
1b38c     7D 11 C3 FA | p263               rdbyte char,framebuf2
1b390     02 0A DC FC |                            rep #5,#2
1b394     88 05 8B F8 |                              rolnib t2,char,#1
1b398     88 05 8B F8 |                                  rolnib t2,char,#1
1b39c     88 05 8B F8 |                              rolnib t2,char,#1
1b3a0     88 05 8B F8 |                                  rolnib t2,char,#1
1b3a4     04 10 67 F0 |                              shl char,#4
1b3a8     82 BB C2 FC |                    xcont   m_lut2,t2
1b3ac     01 FA 06 F1 |                    add     framebuf2,#1
1b3b0     F6 0F 6F FB |                    djnz    cpl2,#p263
1b3b4     34 00 90 FD |                    jmp     #p203
1b3b8                 | 
1b3b8     7D 11 E3 FA | p262               rdword  char,framebuf2
1b3bc     04 06 DC FC |                            rep #3,#4
1b3c0     88 05 9B F8 |                              rolnib t2,char,#3
1b3c4     88 05 9B F8 |                                  rolnib t2,char,#3
1b3c8     04 10 67 F0 |                              shl char,#4
1b3cc     82 BB C2 FC |                    xcont   m_lut2,t2
1b3d0     02 FA 06 F1 |                    add     framebuf2,#2
1b3d4     F8 0F 6F FB |                    djnz    cpl2,#p262
1b3d8     10 00 90 FD |                    jmp     #p203
1b3dc                 | 
1b3dc                 | ''---------- all color modes without zoom
1b3dc                 | 
1b3dc     87 07 D8 FC | p251               rep  #3,cpl2
1b3e0     7D 11 03 FB |                    rdlong  char,framebuf2
1b3e4     04 FA 06 F1 |                    add     framebuf2,#4
1b3e8     88 BB C2 FC |                    xcont   m_lut2,char
1b3ec                 |           
1b3ec                 |  ''-----------------------------------------------------------------------------------------
1b3ec                 | p203           ' getword  mb2,m_border,#0
1b3ec     00 24 0F F2 |                 cmp      mb2, #0 wz
1b3f0     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b3f4                 | 
1b3f4     EC FB 9F FD |                 jmp #p302
1b3f8                 | 
1b3f8                 | '' -------------------------------------- END of graph  line ---------------------------------
1b3f8                 | 
1b3f8                 | '' consts and vars
1b3f8                 | 
1b3f8     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1b3fc     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1b400     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1b404     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1b408                 | 
1b408     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1b40c                 | 
1b40c                 | '------ these longs will be set by setmode function
1b40c                 | 
1b40c     00 00 00 00 | m_bs            long    0        'blanks before sync
1b410     00 00 00 00 | m_sn            long    0        'sync
1b414     00 00 00 00 | m_bv            long    0        'blanks before visible
1b418     00 00 00 00 | m_vi            long    0        'visible pixels #
1b41c     00 00 00 00 | m_border        long    0        'left/right borders
1b420     00 00 00 00 | m_lut1          long    0        'characters
1b424     00 00 00 00 | i_vborder       long    0        'up/down borders
1b428     00 00 00 00 | i_upporch       long    0        'up porch lines
1b42c     00 00 00 00 | i_vsync         long    0        'vsync lines
1b430     00 00 00 00 | i_downporch     long    0        'down porch lines
1b434     00 00 00 00 | i_modenum       long    0        'mode #
1b438     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1b43c     00 00 00 00 | i_lines         long    0        'scanlines #
1b440     00 00 00 00 | i_clock         long    0
1b444     00 00 00 00 | i_hubset        long    0
1b448     00 00 00 00 | i_totalvis      long    0
1b44c                 | 
1b44c                 | '-------------------------------------
1b44c                 | 
1b44c     00 00 00 00 | m_lut2          long    0
1b450                 | 
1b450                 | colordepth
1b450     00 00 00 00 | linestart       long    0
1b454     00 00 00 00 | linenum         long    0
1b458     00 01 00 00 | lutaddr         long    256
1b45c                 | 
1b45c     0E 00 00 00 | cursorsh        long    14
1b460     00 00 00 00 | frames          long    0
1b464     00 00 00 00 | cursorx         long    0
1b468     00 00 00 00 | cursory         long    0
1b46c     00 00 00 00 | cursorpos       long    0
1b470     00 00 00 00 | cursorpos2      long    0
1b474     00 00 00 00 | fontstart       long    0
1b478     00 00 00 00 | border2         long 0
1b47c     00 00 81 70 | lutiv           long $70810000
1b480     00 00 88 00 | lutt1           long $00880000
1b484     00 00 80 00 | lutg1           long $00800000
1b488     00 00 80 10 | lutg2           long $10800000
1b48c     00 00 80 20 | lutg4           long $20800000
1b490     00 00 80 30 | lutg8           long $30800000
1b494     00 00 00 00 | framebuf        long 0
1b498     00 00 00 00 | fontbuf         long 0
1b49c     00 00 00 00 | borderptr       long 0
1b4a0     00 00 00 00 | vblankptr       long 0
1b4a4     00 00 00 00 | cursorptr       long 0
1b4a8     00 00 00 00 | modeptr         long 0
1b4ac     00 00 00 00 | paletteptr      long 0
1b4b0     00 00 00 00 | dlptr           long 0
1b4b4                 | fontnumptr      res     1
1b4b4                 | fontnumptr      res     1
1b4b4                 | hbase           res     1
1b4b4                 | hbase           res     1
1b4b4                 | borderptr2      res     1
1b4b4                 | borderptr2      res     1
1b4b4                 | dlptr2 res 1
1b4b4                 | dlptr2 res 1
1b4b4                 | dl              res 1
1b4b4                 | dl              res 1
1b4b4                 | ii              res     1
1b4b4                 | ii              res     1
1b4b4                 | framebuf2       res     1
1b4b4                 | framebuf2       res     1
1b4b4                 | hsync0          res     1
1b4b4                 | hsync0          res     1
1b4b4                 | hsync1          res     1
1b4b4                 | hsync1          res     1
1b4b4                 | fontline        res     1
1b4b4                 | fontline        res     1
1b4b4                 | t1              res     1
1b4b4                 | t1              res     1
1b4b4                 | t2              res     1
1b4b4                 | t2              res     1
1b4b4                 | t3 res 1
1b4b4                 | t3 res 1
1b4b4                 | t4 res 1
1b4b4                 | t4 res 1
1b4b4                 | t5 res 1
1b4b4                 | t5 res 1
1b4b4                 | skippattern res 1
1b4b4                 | skippattern res 1
1b4b4                 | cpl2 res 1
1b4b4                 | cpl2 res 1
1b4b4                 | char            res     1
1b4b4                 | char            res     1
1b4b4                 | backcolor       res     1
1b4b4                 | backcolor       res     1
1b4b4                 | charcolor       res     1
1b4b4                 | charcolor       res     1
1b4b4                 | zoom res 1
1b4b4                 | zoom res 1
1b4b4     00 00 00 00 | rcnt long 0 'dl repeat count
1b4b8     00 00 00 00 | rcnt2 long 0
1b4bc     00 00 00 00 | rcnt2a long 0
1b4c0     00 00 00 00 | roffset long 0
1b4c4     00 00 00 00 | rdl long 0  'dl repeat line
1b4c8     00 00 00 00 | dlc long 0 'dl command
1b4cc     00 00 00 00 | mb2 long 0
1b4d0     00 00 00 00 | aend             long 0
1b4d4                 |                 fit     496                     '
1b4d4                 | _trackerplayer_spin2_dat_
1b4d4                 | 
1b4d4     00 00 00 00 | null             long  0
1b4d8     46 52 45 51 
1b4dc     46 52 45 51 
1b4e0     46 52 45 51 
1b4e4     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1b4e8     46 52 45 51 
1b4ec     46 52 45 51 
1b4f0     46 52 45 51 
1b4f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4f8     46 52 45 51 
1b4fc     46 52 45 51 
1b500     46 52 45 51 
1b504     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b508     46 52 45 51 
1b50c     46 52 45 51 
1b510     46 52 45 51 
1b514     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b518     46 52 45 51 
1b51c     46 52 45 51 
1b520     46 52 45 51 
1b524     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b528     46 52 45 51 
1b52c     46 52 45 51 
1b530     46 52 45 51 
1b534     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b538     46 52 45 51 
1b53c     46 52 45 51 
1b540     46 52 45 51 
1b544     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b548     46 52 45 51 
1b54c     46 52 45 51 
1b550     46 52 45 51 
1b554     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b558     46 52 45 51 
1b55c     46 52 45 51 
1b560     46 52 45 51 
1b564     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b568     46 52 45 51 
1b56c     46 52 45 51 
1b570     46 52 45 51 
1b574     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b578     46 52 45 51 
1b57c     46 52 45 51 
1b580     46 52 45 51 
1b584     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b588     46 52 45 51 
1b58c     46 52 45 51 
1b590     46 52 45 51 
1b594     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b598     46 52 45 51 
1b59c     46 52 45 51 
1b5a0     46 52 45 51 
1b5a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5a8     46 52 45 51 
1b5ac     46 52 45 51 
1b5b0     46 52 45 51 
1b5b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5b8     46 52 45 51 
1b5bc     46 52 45 51 
1b5c0     46 52 45 51 
1b5c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5c8     46 52 45 51 
1b5cc     46 52 45 51 
1b5d0     46 52 45 51 
1b5d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5d8     46 52 45 51 
1b5dc     46 52 45 51 
1b5e0     46 52 45 51 
1b5e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5e8     46 52 45 51 
1b5ec     46 52 45 51 
1b5f0     46 52 45 51 
1b5f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5f8     46 52 45 51 
1b5fc     46 52 45 51 
1b600     46 52 45 51 
1b604     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b608     46 52 45 51 
1b60c     46 52 45 51 
1b610     46 52 45 51 
1b614     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b618     46 52 45 51 
1b61c     46 52 45 51 
1b620     46 52 45 51 
1b624     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b628     46 52 45 51 
1b62c     46 52 45 51 
1b630     46 52 45 51 
1b634     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b638     46 52 45 51 
1b63c     46 52 45 51 
1b640     46 52 45 51 
1b644     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b648     46 52 45 51 
1b64c     46 52 45 51 
1b650     46 52 45 51 
1b654     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b658     46 52 45 51 
1b65c     46 52 45 51 
1b660     46 52 45 51 
1b664     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b668     46 52 45 51 
1b66c     46 52 45 51 
1b670     46 52 45 51 
1b674     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b678     46 52 45 51 
1b67c     46 52 45 51 
1b680     46 52 45 51 
1b684     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b688     46 52 45 51 
1b68c     46 52 45 51 
1b690     46 52 45 51 
1b694     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b698     46 52 45 51 
1b69c     46 52 45 51 
1b6a0     46 52 45 51 
1b6a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6a8     46 52 45 51 
1b6ac     46 52 45 51 
1b6b0     46 52 45 51 
1b6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6b8     46 52 45 51 
1b6bc     46 52 45 51 
1b6c0     46 52 45 51 
1b6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6c8     46 52 45 51 
1b6cc     46 52 45 51 
1b6d0     46 52 45 51 
1b6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6d8     46 52 45 51 
1b6dc     46 52 45 51 
1b6e0     46 52 45 51 
1b6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6e8     46 52 45 51 
1b6ec     46 52 45 51 
1b6f0     46 52 45 51 
1b6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6f8     46 52 45 51 
1b6fc     46 52 45 51 
1b700     46 52 45 51 
1b704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b708     46 52 45 51 
1b70c     46 52 45 51 
1b710     46 52 45 51 
1b714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b718     46 52 45 51 
1b71c     46 52 45 51 
1b720     46 52 45 51 
1b724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b728     46 52 45 51 
1b72c     46 52 45 51 
1b730     46 52 45 51 
1b734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b738     46 52 45 51 
1b73c     46 52 45 51 
1b740     46 52 45 51 
1b744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b748     46 52 45 51 
1b74c     46 52 45 51 
1b750     46 52 45 51 
1b754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b758     46 52 45 51 
1b75c     46 52 45 51 
1b760     46 52 45 51 
1b764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b768     46 52 45 51 
1b76c     46 52 45 51 
1b770     46 52 45 51 
1b774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b778     46 52 45 51 
1b77c     46 52 45 51 
1b780     46 52 45 51 
1b784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b788     46 52 45 51 
1b78c     46 52 45 51 
1b790     46 52 45 51 
1b794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b798     46 52 45 51 
1b79c     46 52 45 51 
1b7a0     46 52 45 51 
1b7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7a8     46 52 45 51 
1b7ac     46 52 45 51 
1b7b0     46 52 45 51 
1b7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7b8     46 52 45 51 
1b7bc     46 52 45 51 
1b7c0     46 52 45 51 
1b7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7c8     46 52 45 51 
1b7cc     46 52 45 51 
1b7d0     46 52 45 51 
1b7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7d8     46 52 45 51 
1b7dc     46 52 45 51 
1b7e0     46 52 45 51 
1b7e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7e8     46 52 45 51 
1b7ec     46 52 45 51 
1b7f0     46 52 45 51 
1b7f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7f8     46 52 45 51 
1b7fc     46 52 45 51 
1b800     46 52 45 51 
1b804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b808     46 52 45 51 
1b80c     46 52 45 51 
1b810     46 52 45 51 
1b814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b818     46 52 45 51 
1b81c     46 52 45 51 
1b820     46 52 45 51 
1b824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b828     46 52 45 51 
1b82c     46 52 45 51 
1b830     46 52 45 51 
1b834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b838     46 52 45 51 
1b83c     46 52 45 51 
1b840     46 52 45 51 
1b844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b848     46 52 45 51 
1b84c     46 52 45 51 
1b850     46 52 45 51 
1b854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b858     46 52 45 51 
1b85c     46 52 45 51 
1b860     46 52 45 51 
1b864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b868     46 52 45 51 
1b86c     46 52 45 51 
1b870     46 52 45 51 
1b874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b878     46 52 45 51 
1b87c     46 52 45 51 
1b880     46 52 45 51 
1b884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b888     46 52 45 51 
1b88c     46 52 45 51 
1b890     46 52 45 51 
1b894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b898     46 52 45 51 
1b89c     46 52 45 51 
1b8a0     46 52 45 51 
1b8a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8a8     46 52 45 51 
1b8ac     46 52 45 51 
1b8b0     46 52 45 51 
1b8b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8b8     46 52 45 51 
1b8bc     46 52 45 51 
1b8c0     46 52 45 51 
1b8c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8c8     46 52 45 51 
1b8cc     46 52 45 51 
1b8d0     46 52 45 51 
1b8d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8d8     46 52 45 51 
1b8dc     46 52 45 51 
1b8e0     46 52 45 51 
1b8e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8e8     46 52 45 51 
1b8ec     46 52 45 51 
1b8f0     46 52 45 51 
1b8f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8f8     46 52 45 51 
1b8fc     46 52 45 51 
1b900     46 52 45 51 
1b904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b908     46 52 45 51 
1b90c     46 52 45 51 
1b910     46 52 45 51 
1b914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b918     46 52 45 51 
1b91c     46 52 45 51 
1b920     46 52 45 51 
1b924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b928     46 52 45 51 
1b92c     46 52 45 51 
1b930     46 52 45 51 
1b934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b938     46 52 45 51 
1b93c     46 52 45 51 
1b940     46 52 45 51 
1b944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b948     46 52 45 51 
1b94c     46 52 45 51 
1b950     46 52 45 51 
1b954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b958     46 52 45 51 
1b95c     46 52 45 51 
1b960     46 52 45 51 
1b964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b968     46 52 45 51 
1b96c     46 52 45 51 
1b970     46 52 45 51 
1b974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b978     46 52 45 51 
1b97c     46 52 45 51 
1b980     46 52 45 51 
1b984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b988     46 52 45 51 
1b98c     46 52 45 51 
1b990     46 52 45 51 
1b994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b998     46 52 45 51 
1b99c     46 52 45 51 
1b9a0     46 52 45 51 
1b9a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9a8     46 52 45 51 
1b9ac     46 52 45 51 
1b9b0     46 52 45 51 
1b9b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9b8     46 52 45 51 
1b9bc     46 52 45 51 
1b9c0     46 52 45 51 
1b9c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9c8     46 52 45 51 
1b9cc     46 52 45 51 
1b9d0     46 52 45 51 
1b9d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9d8     46 52 45 51 
1b9dc     46 52 45 51 
1b9e0     46 52 45 51 
1b9e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9e8     46 52 45 51 
1b9ec     46 52 45 51 
1b9f0     46 52 45 51 
1b9f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9f8     46 52 45 51 
1b9fc     46 52 45 51 
1ba00     46 52 45 51 
1ba04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba08     46 52 45 51 
1ba0c     46 52 45 51 
1ba10     46 52 45 51 
1ba14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba18     46 52 45 51 
1ba1c     46 52 45 51 
1ba20     46 52 45 51 
1ba24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba28     46 52 45 51 
1ba2c     46 52 45 51 
1ba30     46 52 45 51 
1ba34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba38     46 52 45 51 
1ba3c     46 52 45 51 
1ba40     46 52 45 51 
1ba44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba48     46 52 45 51 
1ba4c     46 52 45 51 
1ba50     46 52 45 51 
1ba54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba58     46 52 45 51 
1ba5c     46 52 45 51 
1ba60     46 52 45 51 
1ba64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba68     46 52 45 51 
1ba6c     46 52 45 51 
1ba70     46 52 45 51 
1ba74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba78     46 52 45 51 
1ba7c     46 52 45 51 
1ba80     46 52 45 51 
1ba84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba88     46 52 45 51 
1ba8c     46 52 45 51 
1ba90     46 52 45 51 
1ba94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba98     46 52 45 51 
1ba9c     46 52 45 51 
1baa0     46 52 45 51 
1baa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baa8     46 52 45 51 
1baac     46 52 45 51 
1bab0     46 52 45 51 
1bab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bab8     46 52 45 51 
1babc     46 52 45 51 
1bac0     46 52 45 51 
1bac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bac8     46 52 45 51 
1bacc     46 52 45 51 
1bad0     46 52 45 51 
1bad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bad8     46 52 45 51 
1badc     46 52 45 51 
1bae0     46 52 45 51 
1bae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bae8     46 52 45 51 
1baec     46 52 45 51 
1baf0     46 52 45 51 
1baf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baf8     46 52 45 51 
1bafc     46 52 45 51 
1bb00     46 52 45 51 
1bb04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb08     46 52 45 51 
1bb0c     46 52 45 51 
1bb10     46 52 45 51 
1bb14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb18     46 52 45 51 
1bb1c     46 52 45 51 
1bb20     46 52 45 51 
1bb24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb28     46 52 45 51 
1bb2c     46 52 45 51 
1bb30     46 52 45 51 
1bb34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb38     46 52 45 51 
1bb3c     46 52 45 51 
1bb40     46 52 45 51 
1bb44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb48     46 52 45 51 
1bb4c     46 52 45 51 
1bb50     46 52 45 51 
1bb54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb58     46 52 45 51 
1bb5c     46 52 45 51 
1bb60     46 52 45 51 
1bb64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb68     46 52 45 51 
1bb6c     46 52 45 51 
1bb70     46 52 45 51 
1bb74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb78     46 52 45 51 
1bb7c     46 52 45 51 
1bb80     46 52 45 51 
1bb84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb88     46 52 45 51 
1bb8c     46 52 45 51 
1bb90     46 52 45 51 
1bb94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb98     46 52 45 51 
1bb9c     46 52 45 51 
1bba0     46 52 45 51 
1bba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bba8     46 52 45 51 
1bbac     46 52 45 51 
1bbb0     46 52 45 51 
1bbb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbb8     46 52 45 51 
1bbbc     46 52 45 51 
1bbc0     46 52 45 51 
1bbc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbc8     46 52 45 51 
1bbcc     46 52 45 51 
1bbd0     46 52 45 51 
1bbd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbd8     46 52 45 51 
1bbdc     46 52 45 51 
1bbe0     46 52 45 51 
1bbe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbe8     46 52 45 51 
1bbec     46 52 45 51 
1bbf0     46 52 45 51 
1bbf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbf8     46 52 45 51 
1bbfc     46 52 45 51 
1bc00     46 52 45 51 
1bc04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc08     46 52 45 51 
1bc0c     46 52 45 51 
1bc10     46 52 45 51 
1bc14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc18     46 52 45 51 
1bc1c     46 52 45 51 
1bc20     46 52 45 51 
1bc24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc28     46 52 45 51 
1bc2c     46 52 45 51 
1bc30     46 52 45 51 
1bc34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc38     46 52 45 51 
1bc3c     46 52 45 51 
1bc40     46 52 45 51 
1bc44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc48     46 52 45 51 
1bc4c     46 52 45 51 
1bc50     46 52 45 51 
1bc54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc58     46 52 45 51 
1bc5c     46 52 45 51 
1bc60     46 52 45 51 
1bc64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc68     46 52 45 51 
1bc6c     46 52 45 51 
1bc70     46 52 45 51 
1bc74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc78     46 52 45 51 
1bc7c     46 52 45 51 
1bc80     46 52 45 51 
1bc84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc88     46 52 45 51 
1bc8c     46 52 45 51 
1bc90     46 52 45 51 
1bc94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc98     46 52 45 51 
1bc9c     46 52 45 51 
1bca0     46 52 45 51 
1bca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bca8     46 52 45 51 
1bcac     46 52 45 51 
1bcb0     46 52 45 51 
1bcb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcb8     46 52 45 51 
1bcbc     46 52 45 51 
1bcc0     46 52 45 51 
1bcc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcc8     46 52 45 51 
1bccc     46 52 45 51 
1bcd0     46 52 45 51 
1bcd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcd8     46 52 45 51 
1bcdc     46 52 45 51 
1bce0     46 52 45 51 
1bce4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bce8     46 52 45 51 
1bcec     46 52 45 51 
1bcf0     46 52 45 51 
1bcf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcf8     46 52 45 51 
1bcfc     46 52 45 51 
1bd00     46 52 45 51 
1bd04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd08     46 52 45 51 
1bd0c     46 52 45 51 
1bd10     46 52 45 51 
1bd14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd18     46 52 45 51 
1bd1c     46 52 45 51 
1bd20     46 52 45 51 
1bd24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd28     46 52 45 51 
1bd2c     46 52 45 51 
1bd30     46 52 45 51 
1bd34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd38     46 52 45 51 
1bd3c     46 52 45 51 
1bd40     46 52 45 51 
1bd44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd48     46 52 45 51 
1bd4c     46 52 45 51 
1bd50     46 52 45 51 
1bd54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd58     46 52 45 51 
1bd5c     46 52 45 51 
1bd60     46 52 45 51 
1bd64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd68     46 52 45 51 
1bd6c     46 52 45 51 
1bd70     46 52 45 51 
1bd74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd78     46 52 45 51 
1bd7c     46 52 45 51 
1bd80     46 52 45 51 
1bd84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd88     46 52 45 51 
1bd8c     46 52 45 51 
1bd90     46 52 45 51 
1bd94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd98     46 52 45 51 
1bd9c     46 52 45 51 
1bda0     46 52 45 51 
1bda4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bda8     46 52 45 51 
1bdac     46 52 45 51 
1bdb0     46 52 45 51 
1bdb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdb8     46 52 45 51 
1bdbc     46 52 45 51 
1bdc0     46 52 45 51 
1bdc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdc8     46 52 45 51 
1bdcc     46 52 45 51 
1bdd0     46 52 45 51 
1bdd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdd8     46 52 45 51 
1bddc     46 52 45 51 
1bde0     46 52 45 51 
1bde4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bde8     46 52 45 51 
1bdec     46 52 45 51 
1bdf0     46 52 45 51 
1bdf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdf8     46 52 45 51 
1bdfc     46 52 45 51 
1be00     46 52 45 51 
1be04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be08     46 52 45 51 
1be0c     46 52 45 51 
1be10     46 52 45 51 
1be14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be18     46 52 45 51 
1be1c     46 52 45 51 
1be20     46 52 45 51 
1be24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be28     46 52 45 51 
1be2c     46 52 45 51 
1be30     46 52 45 51 
1be34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be38     46 52 45 51 
1be3c     46 52 45 51 
1be40     46 52 45 51 
1be44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be48     46 52 45 51 
1be4c     46 52 45 51 
1be50     46 52 45 51 
1be54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be58     46 52 45 51 
1be5c     46 52 45 51 
1be60     46 52 45 51 
1be64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be68     46 52 45 51 
1be6c     46 52 45 51 
1be70     46 52 45 51 
1be74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be78     46 52 45 51 
1be7c     46 52 45 51 
1be80     46 52 45 51 
1be84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be88     46 52 45 51 
1be8c     46 52 45 51 
1be90     46 52 45 51 
1be94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be98     46 52 45 51 
1be9c     46 52 45 51 
1bea0     46 52 45 51 
1bea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bea8     46 52 45 51 
1beac     46 52 45 51 
1beb0     46 52 45 51 
1beb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1beb8     46 52 45 51 
1bebc     46 52 45 51 
1bec0     46 52 45 51 
1bec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bec8     46 52 45 51 
1becc     46 52 45 51 
1bed0     46 52 45 51 
1bed4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bed8     46 52 45 51 
1bedc     46 52 45 51 
1bee0     46 52 45 51 
1bee4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bee8     46 52 45 51 
1beec     46 52 45 51 
1bef0     46 52 45 51 
1bef4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bef8     46 52 45 51 
1befc     46 52 45 51 
1bf00     46 52 45 51 
1bf04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf08     46 52 45 51 
1bf0c     46 52 45 51 
1bf10     46 52 45 51 
1bf14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf18     46 52 45 51 
1bf1c     46 52 45 51 
1bf20     46 52 45 51 
1bf24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf28     46 52 45 51 
1bf2c     46 52 45 51 
1bf30     46 52 45 51 
1bf34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf38     46 52 45 51 
1bf3c     46 52 45 51 
1bf40     46 52 45 51 
1bf44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf48     46 52 45 51 
1bf4c     46 52 45 51 
1bf50     46 52 45 51 
1bf54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf58     46 52 45 51 
1bf5c     46 52 45 51 
1bf60     46 52 45 51 
1bf64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf68     46 52 45 51 
1bf6c     46 52 45 51 
1bf70     46 52 45 51 
1bf74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf78     46 52 45 51 
1bf7c     46 52 45 51 
1bf80     46 52 45 51 
1bf84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf88     46 52 45 51 
1bf8c     46 52 45 51 
1bf90     46 52 45 51 
1bf94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf98     46 52 45 51 
1bf9c     46 52 45 51 
1bfa0     46 52 45 51 
1bfa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bfa8     46 52 45 51 
1bfac     46 52 45 51 
1bfb0     46 52 45 51 
1bfb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bfb8     46 52 45 51 
1bfbc     46 52 45 51 
1bfc0     46 52 45 51 
1bfc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bfc8     46 52 45 51 
1bfcc     46 52 45 51 
1bfd0     46 52 45 51 
1bfd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bfd8     46 52 45 51 
1bfdc     46 52 45 51 
1bfe0     46 52 45 51 
1bfe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bfe8     46 52 45 51 
1bfec     46 52 45 51 
1bff0     46 52 45 51 
1bff4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bff8     46 52 45 51 
1bffc     46 52 45 51 
1c000     46 52 45 51 
1c004     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c008     46 52 45 51 
1c00c     46 52 45 51 
1c010     46 52 45 51 
1c014     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c018     46 52 45 51 
1c01c     46 52 45 51 
1c020     46 52 45 51 
1c024     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c028     46 52 45 51 
1c02c     46 52 45 51 
1c030     46 52 45 51 
1c034     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c038     46 52 45 51 
1c03c     46 52 45 51 
1c040     46 52 45 51 
1c044     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c048     46 52 45 51 
1c04c     46 52 45 51 
1c050     46 52 45 51 
1c054     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c058     46 52 45 51 
1c05c     46 52 45 51 
1c060     46 52 45 51 
1c064     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c068     46 52 45 51 
1c06c     46 52 45 51 
1c070     46 52 45 51 
1c074     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1c078                 | 
1c078     00 00 00 00 
1c07c     18 00 00 00 
1c080     31 00 00 00 
1c084     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1c088     61 00 00 00 
1c08c     78 00 00 00 
1c090     8D 00 00 00 
1c094     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1c098     B4 00 00 00 
1c09c     C5 00 00 00 
1c0a0     D4 00 00 00 
1c0a4     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1c0a8     EB 00 00 00 
1c0ac     F4 00 00 00 
1c0b0     FA 00 00 00 
1c0b4     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1c0b8     FF 00 00 00 
1c0bc     FD 00 00 00 
1c0c0     FA 00 00 00 
1c0c4     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1c0c8     EB 00 00 00 
1c0cc     E0 00 00 00 
1c0d0     D4 00 00 00 
1c0d4     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1c0d8     B4 00 00 00 
1c0dc     A1 00 00 00 
1c0e0     8D 00 00 00 
1c0e4     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1c0e8     61 00 00 00 
1c0ec     4A 00 00 00 
1c0f0     31 00 00 00 
1c0f4     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1c0f8     00 00 00 00 
1c0fc     E8 FF FF FF 
1c100     CF FF FF FF 
1c104     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1c108     9F FF FF FF 
1c10c     88 FF FF FF 
1c110     73 FF FF FF 
1c114     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1c118     4C FF FF FF 
1c11c     3B FF FF FF 
1c120     2C FF FF FF 
1c124     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1c128     15 FF FF FF 
1c12c     0C FF FF FF 
1c130     06 FF FF FF 
1c134     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1c138     01 FF FF FF 
1c13c     03 FF FF FF 
1c140     06 FF FF FF 
1c144     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1c148     15 FF FF FF 
1c14c     20 FF FF FF 
1c150     2C FF FF FF 
1c154     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1c158     4C FF FF FF 
1c15c     5F FF FF FF 
1c160     73 FF FF FF 
1c164     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1c168     9F FF FF FF 
1c16c     B6 FF FF FF 
1c170     CF FF FF FF 
1c174     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1c178                 | 
1c178     58 03 28 03 
1c17c     FA 02 D0 02 
1c180     A6 02 80 02 
1c184     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1c188     1A 02 FC 01 
1c18c     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1c190     AC 01 94 01 
1c194     7D 01 68 01 
1c198     53 01 40 01 
1c19c     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1c1a0     0D 01 FE 00 
1c1a4     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1c1a8     D6 00 CA 00 
1c1ac     BE 00 B4 00 
1c1b0     AA 00 A0 00 
1c1b4     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1c1b8     87 00 7F 00 
1c1bc     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1c1c0     6B 00 22 03 
1c1c4     F5 02 CB 02 
1c1c8     A2 02 7D 02 
1c1cc     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1c1d0     17 02 F9 01 
1c1d4     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1c1d8     A9 01 91 01 
1c1dc     7B 01 65 01 
1c1e0     51 01 3E 01 
1c1e4     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1c1e8     0C 01 FD 00 
1c1ec     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1c1f0     D5 00 C9 00 
1c1f4     BD 00 B3 00 
1c1f8     A9 00 9F 00 
1c1fc     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1c200     86 00 7E 00 
1c204     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1c208     4C 03 1C 03 
1c20c     F0 02 C5 02 
1c210     9E 02 78 02 
1c214     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1c218     14 02 F6 01 
1c21c     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1c220     A6 01 8E 01 
1c224     78 01 63 01 
1c228     4F 01 3C 01 
1c22c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1c230     0A 01 FB 00 
1c234     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1c238     D3 00 C7 00 
1c23c     BC 00 B1 00 
1c240     A7 00 9E 00 
1c244     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1c248     85 00 7D 00 
1c24c     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1c250     46 03 17 03 
1c254     EA 02 C0 02 
1c258     99 02 74 02 
1c25c     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1c260     10 02 F2 01 
1c264     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1c268     A3 01 8B 01 
1c26c     75 01 60 01 
1c270     4C 01 3A 01 
1c274     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1c278     08 01 F9 00 
1c27c     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1c280     D1 00 C6 00 
1c284     BB 00 B0 00 
1c288     A6 00 9D 00 
1c28c     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1c290     84 00 7D 00 
1c294     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1c298     40 03 11 03 
1c29c     E5 02 BB 02 
1c2a0     94 02 6F 02 
1c2a4     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1c2a8     0C 02 EF 01 
1c2ac     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1c2b0     A0 01 88 01 
1c2b4     72 01 5E 01 
1c2b8     4A 01 38 01 
1c2bc     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1c2c0     06 01 F7 00 
1c2c4     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1c2c8     D0 00 C4 00 
1c2cc     B9 00 AF 00 
1c2d0     A5 00 9C 00 
1c2d4     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1c2d8     83 00 7C 00 
1c2dc     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1c2e0     3A 03 0B 03 
1c2e4     E0 02 B6 02 
1c2e8     8F 02 6B 02 
1c2ec     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1c2f0     08 02 EB 01 
1c2f4     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1c2f8     9D 01 86 01 
1c2fc     70 01 5B 01 
1c300     48 01 35 01 
1c304     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1c308     04 01 F5 00 
1c30c     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1c310     CE 00 C3 00 
1c314     B8 00 AE 00 
1c318     A4 00 9B 00 
1c31c     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1c320     82 00 7B 00 
1c324     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1c328     34 03 06 03 
1c32c     DA 02 B1 02 
1c330     8B 02 66 02 
1c334     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1c338     04 02 E7 01 
1c33c     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1c340     9A 01 83 01 
1c344     6D 01 59 01 
1c348     45 01 33 01 
1c34c     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1c350     02 01 F4 00 
1c354     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1c358     CD 00 C1 00 
1c35c     B7 00 AC 00 
1c360     A3 00 9A 00 
1c364     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1c368     81 00 7A 00 
1c36c     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1c370     2E 03 00 03 
1c374     D5 02 AC 02 
1c378     86 02 62 02 
1c37c     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1c380     01 02 E4 01 
1c384     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1c388     97 01 80 01 
1c38c     6B 01 56 01 
1c390     43 01 31 01 
1c394     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1c398     00 01 F2 00 
1c39c     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1c3a0     CC 00 C0 00 
1c3a4     B5 00 AB 00 
1c3a8     A1 00 98 00 
1c3ac     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1c3b0     80 00 79 00 
1c3b4     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1c3b8     8B 03 58 03 
1c3bc     28 03 FA 02 
1c3c0     D0 02 A6 02 
1c3c4     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1c3c8     3A 02 1A 02 
1c3cc     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1c3d0     C5 01 AC 01 
1c3d4     94 01 7D 01 
1c3d8     68 01 53 01 
1c3dc     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1c3e0     1D 01 0D 01 
1c3e4     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1c3e8     E2 00 D6 00 
1c3ec     CA 00 BE 00 
1c3f0     B4 00 AA 00 
1c3f4     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1c3f8     8F 00 87 00 
1c3fc     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1c400     84 03 52 03 
1c404     22 03 F5 02 
1c408     CB 02 A3 02 
1c40c     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1c410     37 02 17 02 
1c414     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1c418     C2 01 A9 01 
1c41c     91 01 7B 01 
1c420     65 01 51 01 
1c424     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1c428     1C 01 0C 01 
1c42c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1c430     E1 00 D4 00 
1c434     C8 00 BD 00 
1c438     B3 00 A9 00 
1c43c     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1c440     8E 00 86 00 
1c444     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1c448     7E 03 4C 03 
1c44c     1C 03 F0 02 
1c450     C5 02 9E 02 
1c454     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1c458     33 02 14 02 
1c45c     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1c460     BF 01 A6 01 
1c464     8E 01 78 01 
1c468     63 01 4F 01 
1c46c     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1c470     1A 01 0A 01 
1c474     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1c478     DF 00 D3 00 
1c47c     C7 00 BC 00 
1c480     B1 00 A7 00 
1c484     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1c488     8D 00 85 00 
1c48c     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1c490     77 03 46 03 
1c494     17 03 EA 02 
1c498     C0 02 99 02 
1c49c     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1c4a0     2F 02 10 02 
1c4a4     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1c4a8     BC 01 A3 01 
1c4ac     8B 01 75 01 
1c4b0     60 01 4C 01 
1c4b4     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1c4b8     18 01 08 01 
1c4bc     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1c4c0     DE 00 D1 00 
1c4c4     C6 00 BB 00 
1c4c8     B0 00 A6 00 
1c4cc     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1c4d0     8C 00 84 00 
1c4d4     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1c4d8     71 03 40 03 
1c4dc     11 03 E5 02 
1c4e0     BB 02 94 02 
1c4e4     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1c4e8     2B 02 0C 02 
1c4ec     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1c4f0     B9 01 A0 01 
1c4f4     88 01 72 01 
1c4f8     5E 01 4A 01 
1c4fc     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1c500     16 01 06 01 
1c504     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1c508     DC 00 D0 00 
1c50c     C4 00 B9 00 
1c510     AF 00 A5 00 
1c514     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1c518     8B 00 83 00 
1c51c     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1c520     6B 03 3A 03 
1c524     0B 03 E0 02 
1c528     B6 02 8F 02 
1c52c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1c530     27 02 08 02 
1c534     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1c538     B5 01 9D 01 
1c53c     86 01 70 01 
1c540     5B 01 48 01 
1c544     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1c548     14 01 04 01 
1c54c     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1c550     DB 00 CE 00 
1c554     C3 00 B8 00 
1c558     AE 00 A4 00 
1c55c     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1c560     8A 00 82 00 
1c564     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1c568     64 03 34 03 
1c56c     06 03 DA 02 
1c570     B1 02 8B 02 
1c574     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1c578     23 02 04 02 
1c57c     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1c580     B2 01 9A 01 
1c584     83 01 6D 01 
1c588     59 01 45 01 
1c58c     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1c590     12 01 02 01 
1c594     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1c598     D9 00 CD 00 
1c59c     C1 00 B7 00 
1c5a0     AC 00 A3 00 
1c5a4     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1c5a8     89 00 81 00 
1c5ac     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1c5b0     5E 03 2E 03 
1c5b4     00 03 D5 02 
1c5b8     AC 02 86 02 
1c5bc     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1c5c0     1F 02 01 02 
1c5c4     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1c5c8     AF 01 97 01 
1c5cc     80 01 6B 01 
1c5d0     56 01 43 01 
1c5d4     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1c5d8     10 01 00 01 
1c5dc     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1c5e0     D8 00 CB 00 
1c5e4     C0 00 B5 00 
1c5e8     AB 00 A1 00 
1c5ec     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1c5f0     88 00 80 00 
1c5f4     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1c5f8                 | 	alignl
1c5f8                 | _audio018_spin2_dat_
1c5f8                 | 
1c5f8                 | audio       org     0
1c5f8     00 F2 07 F6 | 			mov     ptrb,#0
1c5fc     0E 7C 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1c600     0E C8 1C FC |             wxpin   #100,#left
1c604     0F 7C 05 FC |             wrpin   dac,#right
1c608     0F C8 1C FC |             wxpin   #100,#right
1c60c     41 9C 64 FD |             dirh    #left addpins 1
1c610     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1c614     79 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1c618     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1c61c                 |             
1c61c                 | '---------------------------------------------------------------------------------        
1c61c                 | '----------------- The main loop -------------------------------------------------
1c61c                 | '---------------------------------------------------------------------------------
1c61c                 | 
1c61c     82 06 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1c620     10 00 90 CD |       if_c  jmp     #loop1
1c624                 |   
1c624     09 4C 05 F6 |             mov     cn,#9
1c628     82 4C 8D F9 | p402        altd    cn,#a21000000
1c62c     81 00 80 F1 |             sub     0-0,a20000000
1c630     FD 4D 6D FB |             djnz    cn,#p402
1c634                 |     
1c634     00 4C 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
1c638     84 4E 01 F6 |             mov     ct,time1           ' with the lowest next sample time
1c63c     85 4E 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
1c640     01 4C 05 C6 |     if_c    mov     cn,#1
1c644     86 4E 39 F3 |             fle     ct,time3 wcz
1c648     02 4C 05 C6 |     if_c    mov     cn,#2     
1c64c     87 4E 39 F3 |             fle     ct,time4 wcz
1c650     03 4C 05 C6 |     if_c    mov     cn,#3
1c654     88 4E 39 F3 |             fle     ct,time5 wcz
1c658     04 4C 05 C6 |     if_c    mov     cn,#4
1c65c     89 4E 39 F3 |             fle     ct,time6 wcz
1c660     05 4C 05 C6 |     if_c    mov     cn,#5
1c664     8A 4E 39 F3 |             fle     ct,time7 wcz
1c668     06 4C 05 C6 |     if_c    mov     cn,#6
1c66c     8B 4E 39 F3 |             fle     ct,time8 wcz
1c670     07 4C 05 C6 |     if_c    mov     cn,#7
1c674                 | 
1c674                 | 
1c674                 | '----------------------------------------------------------------------------------
1c674                 | '------------- Compute channel samples --------------------------------------------
1c674                 | '----------------------------------------------------------------------------------
1c674                 | 
1c674                 | 
1c674     A6 22 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1c678     05 22 65 F0 |             shl     channeladd,#5
1c67c     91 F0 03 F1 |             add     ptra,channeladd
1c680                 | 
1c680     28 0E 64 FD |             setq    #7               
1c684     00 33 05 FB |             rdlong  pointer0,ptra
1c688                 |             
1c688     9E 48 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
1c68c     9E 46 31 F9 |     	    getword avol0,volpan0,#0
1c690     9F 44 39 F9 | 	        getword askip0,freqskip0,#1    	    
1c694     9F 42 31 F9 | 	        getword afreq0,freqskip0,#0
1c698                 | 
1c698     84 4C 95 F9 |             alts    cn, #time1
1c69c     00 50 01 F6 |             mov     dt0,0-0   
1c6a0     83 50 81 F1 |             sub     dt0,time0
1c6a4                 | 
1c6a4     84 4C 8D F9 |             altd    cn, #time1
1c6a8     A1 00 00 F1 |             add     0-0,afreq0  	
1c6ac                 | 
1c6ac     A2 32 01 F1 |             add     pointer0,askip0
1c6b0     9D 32 19 F2 |             cmp     pointer0,lend0 wcz
1c6b4     9D 32 81 31 |     if_ge   sub     pointer0,lend0	        
1c6b8     9C 32 01 31 |     if_ge   add     pointer0,lstart0       
1c6bc     99 26 01 F6 |             mov     qq,pointer0
1c6c0     9B 26 01 F1 |             add     qq,sstart0
1c6c4                 | 
1c6c4     1F 36 0D F4 |             testb   sstart0,#31 wz
1c6c8                 | 
1c6c8     93 28 C1 5A |     if_nz   rdbyte  spl,qq
1c6cc     08 28 65 50 |     if_nz   shl     spl,#8
1c6d0     93 28 E1 AA |     if_z    rdword  spl,qq
1c6d4                 | 
1c6d4     A3 28 31 FA |             scas    spl,avol0
1c6d8     00 28 01 F6 |             mov     spl,0-0
1c6dc                 |  
1c6dc     A4 28 31 FA |             scas    spl,apan0
1c6e0     00 52 01 F6 |             mov     ls0,0-0
1c6e4                 |  
1c6e4     AE 4C 8D F9 |             altd    cn,#ls1
1c6e8     A9 00 00 F6 |             mov     0-0,ls0
1c6ec                 |              
1c6ec     20 00 00 FF 
1c6f0     00 26 05 F6 |             mov     qq,##16384
1c6f4     A4 26 81 F1 |             sub     qq,apan0
1c6f8     93 28 31 FA |             scas    spl,qq
1c6fc     00 54 01 F6 |             mov     rs0, 0-0
1c700                 | 
1c700     B6 4C 8D F9 |             altd    cn,#rs1
1c704     AA 00 00 F6 |             mov     0-0,rs0
1c708                 | 
1c708     AA 34 29 F9 |             setword sample0,rs0,#1
1c70c     A9 34 21 F9 |             setword sample0,ls0,#0
1c710                 |             
1c710     1E 36 0D F4 |             testb   sstart0,#30 wz
1c714     14 00 90 5D |     if_nz   jmp     #p403
1c718                 |             
1c718     00 32 05 F6 |             mov    pointer0,#0  
1c71c     1E 36 05 F4 |             bitl   sstart0,#30
1c720     08 F0 07 F1 |             add    ptra,#8
1c724     00 37 65 FC |             wrlong sstart0,ptra
1c728     08 F0 87 F1 |             sub    ptra,#8
1c72c                 |  
1c72c     28 02 64 FD | p403        setq #1
1c730                 |      
1c730     00 33 65 FC |             wrlong  pointer0,ptra
1c734     91 F0 83 F1 |             sub     ptra, channeladd
1c738     00 00 90 FD |             jmp     #p101
1c73c                 |                        
1c73c                 |             
1c73c                 |           
1c73c                 |             
1c73c                 | '------------------------ Channels end here --------------------       
1c73c                 | 
1c73c                 | ' Now add all channels and put the sample to the buffer    
1c73c                 | 
1c73c                 | 
1c73c     83 4A 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1c740     01 24 85 A1 |     if_z    sub     front,#1         ' 
1c744     FF 25 05 A5 |     if_z    and     front,#511     
1c748                 |            
1c748                 |     
1c748     00 5A 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1c74c     00 58 05 F6 |             mov     ls,#0
1c750     B6 5A 01 F1 |             add     rs,rs1
1c754     B7 5A 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1c758     B8 5A 01 F1 |             add     rs,rs3
1c75c     B9 5A 01 F1 |             add     rs,rs4
1c760     BA 5A 01 F1 |             add     rs,rs5
1c764     BB 5A 01 F1 |             add     rs,rs6
1c768     BC 5A 01 F1 |             add     rs,rs7
1c76c     BD 5A 01 F1 |             add     rs,rs8
1c770                 | 
1c770                 |            
1c770     AE 58 01 F1 |             add     ls,ls1
1c774     AF 58 01 F1 |             add     ls,ls2
1c778     B0 58 01 F1 |             add     ls,ls3
1c77c     B1 58 01 F1 |             add     ls,ls4
1c780     B2 58 01 F1 |             add     ls,ls5
1c784     B3 58 01 F1 |             add     ls,ls6
1c788     B4 58 01 F1 |             add     ls,ls7
1c78c     B5 58 01 F1 |             add     ls,ls8
1c790                 | 
1c790                 |  		
1c790     0F 58 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1c794     0F 5A E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1c798                 | 		    
1c798     AC 5A 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1c79c     AD 18 01 F6 |             mov newsample, rs
1c7a0                 | 
1c7a0     83 4A 01 F6 |             mov     oldt0,time0      ' update global time
1c7a4     A8 06 01 F1 |             add     time0,dt0    
1c7a8                 | 
1c7a8                 |             
1c7a8                 |  
1c7a8                 |                                      ' now push dt0 samples to the buffer
1c7a8     00 50 0D F2 |             cmp      dt0,#0 wz
1c7ac     84 FE 9F AD |     if_z    jmp      #loop1
1c7b0     A8 1A 01 F6 |             mov      t1,dt0
1c7b4                 |   
1c7b4     F9 1D 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1c7b8     01 1C 85 F1 |             sub     t2,#1
1c7bc     FF 1D 05 F5 |             and     t2,#511
1c7c0     92 1C 19 F2 |             cmp     t2,front wcz
1c7c4     EC FF 9F AD |     if_e    jmp     #p301    
1c7c8                 |     
1c7c8     92 18 31 FC |             wrlut   newsample, front
1c7cc     01 24 05 F1 |             add     front,#1
1c7d0     FF 25 05 F5 |             and     front,#511
1c7d4     F7 1B 6D FB |             djnz    t1,#p301
1c7d8                 |             
1c7d8     40 FE 9F FD |             jmp     #loop            'loop
1c7dc                 | 
1c7dc                 | '-------------------------------------------------------------------------
1c7dc                 | '------------------ This is the end of the main loop ---------------------
1c7dc                 | '-------------------------------------------------------------------------
1c7dc                 | 
1c7dc                 | '--------------------------------------------------------------------------
1c7dc                 | '------ Interrupt service -------------------------------------------------
1c7dc                 | '------ Output the sample, get the next one if exists ---------------------
1c7dc                 | '--------------------------------------------------------------------------
1c7dc                 | 
1c7dc     0E 2A 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1c7e0     0F 2C 25 FC |             wypin   rsample,#right       '4
1c7e4                 |            
1c7e4     92 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1c7e8     F5 FF 3B AB |     if_e    reti1                        '8/10
1c7ec                 | 
1c7ec     E1 2F A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1c7f0     97 2C 39 F9 |           	getword rsample,lsnext,#1    '13
1c7f4     97 2A 31 F9 |           	getword lsample,lsnext,#0    '15
1c7f8     F5 FF 3B FB |             reti1                        '17/19 
1c7fc                 |           
1c7fc                 | '---------------------------------------------------------------------------
1c7fc                 | '-------- End of interrupt -------------------------------------------------
1c7fc                 | '---------------------------------------------------------------------------    
1c7fc                 | 
1c7fc                 | 
1c7fc                 | '---------------------------------------------------------------------------
1c7fc                 | '------- Variables ---------------------------------------------------------
1c7fc                 | '---------------------------------------------------------------------------
1c7fc                 | 
1c7fc                 | ' constants
1c7fc                 | 
1c7fc                 | 
1c7fc     00 00 00 10 | a20000000   long $10000000
1c800     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
1c804                 | 
1c804                 | ' Time variables
1c804                 | 
1c804     00 00 00 00 | time0       long 0    ' Global sample computing time
1c808     01 00 00 00 | time1       long 1    ' Local channels time
1c80c     02 00 00 00 | time2       long 2
1c810     03 00 00 00 | time3       long 3
1c814     04 00 00 00 | time4       long 4
1c818     05 00 00 00 | time5       long 5
1c81c     06 00 00 00 | time6       long 6
1c820     07 00 00 00 | time7       long 7
1c824     08 00 00 00 | time8       long 8
1c828                 | 
1c828                 | 
1c828                 | 
1c828     00 00 00 00 | newsample long 0
1c82c                 | '
1c82c     00 00 00 00 | t1 long 0
1c830     00 00 00 00 | t2 long 0
1c834                 | '
1c834     00 00 00 00 | nrsample long 0
1c838     00 00 00 00 | nlsample long 0
1c83c                 | '
1c83c     00 00 00 00 | channeladd long 0
1c840                 | 
1c840                 | 
1c840     00 00 00 00 | front       long 0
1c844                 | 
1c844                 | ' temporary variables 
1c844                 | '
1c844     00 00 00 00 | qq          long 0
1c848     00 00 00 00 | spl         long 0
1c84c                 | 
1c84c                 | ' circular buffer in LUT
1c84c                 | 
1c84c                 | 
1c84c                 | '
1c84c                 | 
1c84c                 | ' Interrupt ISR variables
1c84c                 | 
1c84c                 | 
1c84c     00 00 00 00 | lsample     long 0
1c850     00 00 00 00 | rsample     long 0
1c854     00 00 00 00 | lsnext      long 0
1c858     00 00 00 00 | rsnext      long 0 
1c85c                 | 
1c85c                 | 
1c85c     00 00 00 00 | pointer0    long 0
1c860     00 00 00 00 | sample0     long 0
1c864     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1c868     00 00 00 00 | lstart0     long 0
1c86c     00 00 00 00 | lend0       long 0
1c870     00 00 00 00 | volpan0     long 0
1c874     00 00 00 00 | freqskip0   long 0
1c878     00 00 00 00 | dummy0      long 0
1c87c                 | 
1c87c     00 00 00 00 | afreq0      long 0
1c880     00 00 00 00 | askip0      long 0
1c884     00 00 00 00 | avol0       long 0
1c888     00 00 00 00 | apan0       long 0
1c88c                 | 
1c88c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1c890     00 00 00 00 | cn          long 0
1c894     00 00 00 00 | ct          long 0
1c898     00 00 00 00 | dt0         long 0
1c89c                 | 
1c89c                 | ' Samples
1c89c     00 00 00 00 | ls0         long 0
1c8a0     00 00 00 00 | rs0         long 0
1c8a4     00 00 00 00 | channel     long 0
1c8a8     00 00 00 00 | ls          long 0    ' Global sample variable
1c8ac     00 00 00 00 | rs          long 0
1c8b0                 | 
1c8b0     00 00 00 00 | ls1         long 0    ' Channel samples
1c8b4     00 00 00 00 | ls2         long 0
1c8b8     00 00 00 00 | ls3         long 0
1c8bc     00 00 00 00 | ls4         long 0
1c8c0     00 00 00 00 | ls5         long 0
1c8c4     00 00 00 00 | ls6         long 0
1c8c8     00 00 00 00 | ls7         long 0
1c8cc     00 00 00 00 | ls8         long 0
1c8d0     00 00 00 00 | rs1         long 0
1c8d4     00 00 00 00 | rs2         long 0
1c8d8     00 00 00 00 | rs3         long 0
1c8dc     00 00 00 00 | rs4         long 0
1c8e0     00 00 00 00 | rs5         long 0
1c8e4     00 00 00 00 | rs6         long 0
1c8e8     00 00 00 00 | rs7         long 0
1c8ec     00 00 00 00 | rs8         long 0
1c8f0                 | 
1c8f0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1c8f4                 | 
1c8f4     00 00 00 00 
1c8f8     00 00 00 00 | null  			long 	0,0           ' for channel reset
1c8fc     73 32 00 04 
1c900     00 00 10 00 
1c904     00 00 00 00 
1c908     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1c90c     00 00 C9 00 
1c910     92 01 5B 02 
1c914     24 03 ED 03 
1c918     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1c91c     48 06 11 07 
1c920     D9 07 A2 08 
1c924     6A 09 33 0A 
1c928     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1c92c     8C 0C 54 0D 
1c930     1C 0E E3 0E 
1c934     AB 0F 72 10 
1c938     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1c93c     C8 12 8F 13 
1c940     55 14 1C 15 
1c944     E2 15 A8 16 
1c948     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1c94c     F9 18 BE 19 
1c950     82 1A 47 1B 
1c954     0B 1C CF 1C 
1c958     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1c95c     1A 1F DD 1F 
1c960     9F 20 61 21 
1c964     23 22 E5 22 
1c968     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1c96c     28 25 E8 25 
1c970     A8 26 67 27 
1c974     26 28 E5 28 
1c978     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1c97c     1F 2B DC 2B 
1c980     99 2C 55 2D 
1c984     11 2E CC 2E 
1c988     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1c98c     FB 30 B5 31 
1c990     6E 32 26 33 
1c994     DF 33 96 34 
1c998     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1c99c     BA 36 6F 37 
1c9a0     24 38 D9 38 
1c9a4     8C 39 40 3A 
1c9a8     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1c9ac     56 3C 07 3D 
1c9b0     B8 3D 68 3E 
1c9b4     17 3F C5 3F 
1c9b8     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1c9bc     CE 41 7A 42 
1c9c0     25 43 D0 43 
1c9c4     7A 44 24 45 
1c9c8     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1c9cc     1C 47 C3 47 
1c9d0     69 48 0F 49 
1c9d4     B4 49 58 4A 
1c9d8     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1c9dc     3F 4C E0 4C 
1c9e0     81 4D 20 4E 
1c9e4     BF 4E 5D 4F 
1c9e8     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1c9ec     33 51 CE 51 
1c9f0     68 52 02 53 
1c9f4     9B 53 32 54 
1c9f8     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1c9fc     F5 55 8A 56 
1ca00     1D 57 B0 57 
1ca04     42 58 D3 58 
1ca08     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1ca0c     82 5A 0F 5B 
1ca10     9C 5B 28 5C 
1ca14     B3 5C 3E 5D 
1ca18     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1ca1c     D7 5E 5D 5F 
1ca20     E3 5F 68 60 
1ca24     EB 60 6E 61 
1ca28     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1ca2c     F1 62 70 63 
1ca30     EE 63 6C 64 
1ca34     E8 64 63 65 
1ca38     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1ca3c     CF 66 46 67 
1ca40     BC 67 32 68 
1ca44     A6 68 19 69 
1ca48     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1ca4c     6D 6A DC 6A 
1ca50     4A 6B B7 6B 
1ca54     23 6C 8E 6C 
1ca58     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1ca5c     C9 6D 30 6E 
1ca60     96 6E FB 6E 
1ca64     5E 6F C1 6F 
1ca68     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1ca6c     E2 70 40 71 
1ca70     9D 71 F9 71 
1ca74     54 72 AE 72 
1ca78     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1ca7c     B5 73 0A 74 
1ca80     5F 74 B2 74 
1ca84     04 75 55 75 
1ca88     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1ca8c     41 76 8D 76 
1ca90     D8 76 22 77 
1ca94     6B 77 B3 77 
1ca98     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1ca9c     84 78 C7 78 
1caa0     09 79 4A 79 
1caa4     89 79 C8 79 
1caa8     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1caac     7C 7A B6 7A 
1cab0     EE 7A 26 7B 
1cab4     5C 7B 91 7B 
1cab8     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1cabc     29 7C 59 7C 
1cac0     88 7C B6 7C 
1cac4     E3 7C 0E 7D 
1cac8     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1cacc     89 7D B0 7D 
1cad0     D5 7D FA 7D 
1cad4     1D 7E 3E 7E 
1cad8     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1cadc     9C 7E B9 7E 
1cae0     D5 7E EF 7E 
1cae4     09 7F 21 7F 
1cae8     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1caec     61 7F 74 7F 
1caf0     86 7F 97 7F 
1caf4     A6 7F B4 7F 
1caf8     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1cafc     D8 7F E1 7F 
1cb00     E9 7F F0 7F 
1cb04     F5 7F F9 7F 
1cb08     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1cb0c     FF 7F FE 7F 
1cb10     FD 7F F9 7F 
1cb14     F5 7F F0 7F 
1cb18     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1cb1c     D8 7F CD 7F 
1cb20     C1 7F B4 7F 
1cb24     A6 7F 97 7F 
1cb28     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1cb2c     61 7F 4D 7F 
1cb30     37 7F 21 7F 
1cb34     09 7F EF 7E 
1cb38     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1cb3c     9C 7E 7E 7E 
1cb40     5F 7E 3E 7E 
1cb44     1D 7E FA 7D 
1cb48     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1cb4c     89 7D 62 7D 
1cb50     39 7D 0E 7D 
1cb54     E3 7C B6 7C 
1cb58     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1cb5c     29 7C F8 7B 
1cb60     C5 7B 91 7B 
1cb64     5C 7B 26 7B 
1cb68     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1cb6c     7C 7A 41 7A 
1cb70     05 7A C8 79 
1cb74     89 79 4A 79 
1cb78     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1cb7c     84 78 3F 78 
1cb80     FA 77 B3 77 
1cb84     6B 77 22 77 
1cb88     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1cb8c     41 76 F3 75 
1cb90     A5 75 55 75 
1cb94     04 75 B2 74 
1cb98     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1cb9c     B5 73 5E 73 
1cba0     07 73 AE 72 
1cba4     54 72 F9 71 
1cba8     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1cbac     E2 70 83 70 
1cbb0     22 70 C1 6F 
1cbb4     5E 6F FB 6E 
1cbb8     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1cbbc     C9 6D 61 6D 
1cbc0     F8 6C 8E 6C 
1cbc4     23 6C B7 6B 
1cbc8     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1cbcc     6D 6A FD 69 
1cbd0     8B 69 19 69 
1cbd4     A6 68 32 68 
1cbd8     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1cbdc     CF 66 56 66 
1cbe0     DD 65 63 65 
1cbe4     E8 64 6C 64 
1cbe8     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1cbec     F1 62 71 62 
1cbf0     F0 61 6E 61 
1cbf4     EB 60 68 60 
1cbf8     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1cbfc     D7 5E 4F 5E 
1cc00     C7 5D 3E 5D 
1cc04     B3 5C 28 5C 
1cc08     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1cc0c     82 5A F3 59 
1cc10     64 59 D3 58 
1cc14     42 58 B0 57 
1cc18     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1cc1c     F5 55 60 55 
1cc20     C9 54 32 54 
1cc24     9B 53 02 53 
1cc28     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1cc2c     33 51 97 50 
1cc30     FB 4F 5D 4F 
1cc34     BF 4E 20 4E 
1cc38     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1cc3c     3F 4C 9D 4B 
1cc40     FB 4A 58 4A 
1cc44     B4 49 0F 49 
1cc48     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1cc4c     1C 47 75 46 
1cc50     CD 45 24 45 
1cc54     7A 44 D0 43 
1cc58     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1cc5c     CE 41 21 41 
1cc60     73 40 C5 3F 
1cc64     17 3F 68 3E 
1cc68     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1cc6c     56 3C A5 3B 
1cc70     F2 3A 40 3A 
1cc74     8C 39 D9 38 
1cc78     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1cc7c     BA 36 04 36 
1cc80     4D 35 96 34 
1cc84     DF 33 26 33 
1cc88     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1cc8c     FB 30 41 30 
1cc90     87 2F CC 2E 
1cc94     11 2E 55 2D 
1cc98     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1cc9c     1F 2B 61 2A 
1cca0     A3 29 E5 28 
1cca4     26 28 67 27 
1cca8     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1ccac     28 25 67 24 
1ccb0     A6 23 E5 22 
1ccb4     23 22 61 21 
1ccb8     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1ccbc     1A 1F 57 1E 
1ccc0     93 1D CF 1C 
1ccc4     0B 1C 47 1B 
1ccc8     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1cccc     F9 18 33 18 
1ccd0     6E 17 A8 16 
1ccd4     E2 15 1C 15 
1ccd8     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1ccdc     C8 12 01 12 
1cce0     3A 11 72 10 
1cce4     AB 0F E3 0E 
1cce8     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1ccec     8C 0C C4 0B 
1ccf0     FB 0A 33 0A 
1ccf4     6A 09 A2 08 
1ccf8     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1ccfc     48 06 7F 05 
1cd00     B6 04 ED 03 
1cd04     24 03 5B 02 
1cd08     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1cd0c     00 00 37 FF 
1cd10     6E FE A5 FD 
1cd14     DC FC 13 FC 
1cd18     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1cd1c     B8 F9 EF F8 
1cd20     27 F8 5E F7 
1cd24     96 F6 CD F5 
1cd28     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1cd2c     74 F3 AC F2 
1cd30     E4 F1 1D F1 
1cd34     55 F0 8E EF 
1cd38     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1cd3c     38 ED 71 EC 
1cd40     AB EB E4 EA 
1cd44     1E EA 58 E9 
1cd48     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1cd4c     07 E7 42 E6 
1cd50     7E E5 B9 E4 
1cd54     F5 E3 31 E3 
1cd58     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1cd5c     E6 E0 23 E0 
1cd60     61 DF 9F DE 
1cd64     DD DD 1B DD 
1cd68     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1cd6c     D8 DA 18 DA 
1cd70     58 D9 99 D8 
1cd74     DA D7 1B D7 
1cd78     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1cd7c     E1 D4 24 D4 
1cd80     67 D3 AB D2 
1cd84     EF D1 34 D1 
1cd88     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1cd8c     05 CF 4B CE 
1cd90     92 CD DA CC 
1cd94     21 CC 6A CB 
1cd98     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1cd9c     46 C9 91 C8 
1cda0     DC C7 27 C7 
1cda4     74 C6 C0 C5 
1cda8     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1cdac     AA C3 F9 C2 
1cdb0     48 C2 98 C1 
1cdb4     E9 C0 3B C0 
1cdb8     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1cdbc     32 BE 86 BD 
1cdc0     DB BC 30 BC 
1cdc4     86 BB DC BA 
1cdc8     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1cdcc     E4 B8 3D B8 
1cdd0     97 B7 F1 B6 
1cdd4     4C B6 A8 B5 
1cdd8     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1cddc     C1 B3 20 B3 
1cde0     7F B2 E0 B1 
1cde4     41 B1 A3 B0 
1cde8     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1cdec     CD AE 32 AE 
1cdf0     98 AD FE AC 
1cdf4     65 AC CE AB 
1cdf8     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1cdfc     0B AA 76 A9 
1ce00     E3 A8 50 A8 
1ce04     BE A7 2D A7 
1ce08     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1ce0c     7E A5 F1 A4 
1ce10     64 A4 D8 A3 
1ce14     4D A3 C2 A2 
1ce18     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1ce1c     29 A1 A3 A0 
1ce20     1D A0 98 9F 
1ce24     15 9F 92 9E 
1ce28     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1ce2c     0F 9D 90 9C 
1ce30     12 9C 94 9B 
1ce34     18 9B 9D 9A 
1ce38     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1ce3c     31 99 BA 98 
1ce40     44 98 CE 97 
1ce44     5A 97 E7 96 
1ce48     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1ce4c     93 95 24 95 
1ce50     B6 94 49 94 
1ce54     DD 93 72 93 
1ce58     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1ce5c     37 92 D0 91 
1ce60     6A 91 05 91 
1ce64     A2 90 3F 90 
1ce68     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1ce6c     1E 8F C0 8E 
1ce70     63 8E 07 8E 
1ce74     AC 8D 52 8D 
1ce78     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1ce7c     4B 8C F6 8B 
1ce80     A1 8B 4E 8B 
1ce84     FC 8A AB 8A 
1ce88     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1ce8c     BF 89 73 89 
1ce90     28 89 DE 88 
1ce94     95 88 4D 88 
1ce98     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1ce9c     7C 87 39 87 
1cea0     F7 86 B6 86 
1cea4     77 86 38 86 
1cea8     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1ceac     84 85 4A 85 
1ceb0     12 85 DA 84 
1ceb4     A4 84 6F 84 
1ceb8     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1cebc     D7 83 A7 83 
1cec0     78 83 4A 83 
1cec4     1D 83 F2 82 
1cec8     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1cecc     77 82 50 82 
1ced0     2B 82 06 82 
1ced4     E3 81 C2 81 
1ced8     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1cedc     64 81 47 81 
1cee0     2B 81 11 81 
1cee4     F7 80 DF 80 
1cee8     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1ceec     9F 80 8C 80 
1cef0     7A 80 69 80 
1cef4     5A 80 4C 80 
1cef8     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1cefc     28 80 1F 80 
1cf00     17 80 10 80 
1cf04     0B 80 07 80 
1cf08     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1cf0c     01 80 02 80 
1cf10     03 80 07 80 
1cf14     0B 80 10 80 
1cf18     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1cf1c     28 80 33 80 
1cf20     3F 80 4C 80 
1cf24     5A 80 69 80 
1cf28     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1cf2c     9F 80 B3 80 
1cf30     C9 80 DF 80 
1cf34     F7 80 11 81 
1cf38     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1cf3c     64 81 82 81 
1cf40     A1 81 C2 81 
1cf44     E3 81 06 82 
1cf48     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1cf4c     77 82 9E 82 
1cf50     C7 82 F2 82 
1cf54     1D 83 4A 83 
1cf58     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1cf5c     D7 83 08 84 
1cf60     3B 84 6F 84 
1cf64     A4 84 DA 84 
1cf68     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1cf6c     84 85 BF 85 
1cf70     FB 85 38 86 
1cf74     77 86 B6 86 
1cf78     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1cf7c     7C 87 C1 87 
1cf80     06 88 4D 88 
1cf84     95 88 DE 88 
1cf88     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1cf8c     BF 89 0D 8A 
1cf90     5B 8A AB 8A 
1cf94     FC 8A 4E 8B 
1cf98     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1cf9c     4B 8C A2 8C 
1cfa0     F9 8C 52 8D 
1cfa4     AC 8D 07 8E 
1cfa8     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1cfac     1E 8F 7D 8F 
1cfb0     DE 8F 3F 90 
1cfb4     A2 90 05 91 
1cfb8     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1cfbc     37 92 9F 92 
1cfc0     08 93 72 93 
1cfc4     DD 93 49 94 
1cfc8     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1cfcc     93 95 03 96 
1cfd0     75 96 E7 96 
1cfd4     5A 97 CE 97 
1cfd8     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1cfdc     31 99 AA 99 
1cfe0     23 9A 9D 9A 
1cfe4     18 9B 94 9B 
1cfe8     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1cfec     0F 9D 8F 9D 
1cff0     10 9E 92 9E 
1cff4     15 9F 98 9F 
1cff8     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1cffc     29 A1 B1 A1 
1d000     39 A2 C2 A2 
1d004     4D A3 D8 A3 
1d008     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1d00c     7E A5 0D A6 
1d010     9C A6 2D A7 
1d014     BE A7 50 A8 
1d018     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1d01c     0B AA A0 AA 
1d020     37 AB CE AB 
1d024     65 AC FE AC 
1d028     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1d02c     CD AE 69 AF 
1d030     05 B0 A3 B0 
1d034     41 B1 E0 B1 
1d038     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1d03c     C1 B3 63 B4 
1d040     05 B5 A8 B5 
1d044     4C B6 F1 B6 
1d048     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1d04c     E4 B8 8B B9 
1d050     33 BA DC BA 
1d054     86 BB 30 BC 
1d058     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1d05c     32 BE DF BE 
1d060     8D BF 3B C0 
1d064     E9 C0 98 C1 
1d068     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1d06c     AA C3 5B C4 
1d070     0E C5 C0 C5 
1d074     74 C6 27 C7 
1d078     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1d07c     46 C9 FC C9 
1d080     B3 CA 6A CB 
1d084     21 CC DA CC 
1d088     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1d08c     05 CF BF CF 
1d090     79 D0 34 D1 
1d094     EF D1 AB D2 
1d098     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1d09c     E1 D4 9F D5 
1d0a0     5D D6 1B D7 
1d0a4     DA D7 99 D8 
1d0a8     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1d0ac     D8 DA 99 DB 
1d0b0     5A DC 1B DD 
1d0b4     DD DD 9F DE 
1d0b8     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1d0bc     E6 E0 A9 E1 
1d0c0     6D E2 31 E3 
1d0c4     F5 E3 B9 E4 
1d0c8     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1d0cc     07 E7 CD E7 
1d0d0     92 E8 58 E9 
1d0d4     1E EA E4 EA 
1d0d8     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1d0dc     38 ED FF ED 
1d0e0     C6 EE 8E EF 
1d0e4     55 F0 1D F1 
1d0e8     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1d0ec     74 F3 3C F4 
1d0f0     05 F5 CD F5 
1d0f4     96 F6 5E F7 
1d0f8     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1d0fc     B8 F9 81 FA 
1d100     4A FB 13 FC 
1d104     DC FC A5 FD 
1d108     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1d10c                 | 	alignl
1d10c                 | __system__dat_
1d10c     00 00 00 00 
1d110     00 00 00 00 | 	byte	$00[8]
1d114     03 00 00 00 
1d118     00 00 00 00 
1d11c     00 00 00 00 
1d120     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d124     00 00 00 00 
1d128     00 00 00 00 
1d12c     00 00 00 00 | 	byte	$00[12]
1d130     05 00 00 00 
1d134     00 00 00 00 
1d138     00 00 00 00 
1d13c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d140     08 D3 01 00 | 	long	@@@__system__dat_ + 508
1d144     10 D3 01 00 | 	long	@@@__system__dat_ + 516
1d148     00 00 00 00 | 	byte	$00, $00, $00, $00
1d14c     18 D3 01 00 | 	long	@@@__system__dat_ + 524
1d150     20 D3 01 00 | 	long	@@@__system__dat_ + 532
1d154     00 00 00 00 
1d158     00 00 00 00 | 	byte	$00[8]
1d15c     01 00 00 00 
1d160     06 00 00 00 
1d164     00 00 00 00 
1d168     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d16c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d170     28 D3 01 00 | 	long	@@@__system__dat_ + 540
1d174     30 D3 01 00 | 	long	@@@__system__dat_ + 548
1d178     00 00 00 00 | 	byte	$00, $00, $00, $00
1d17c     38 D3 01 00 | 	long	@@@__system__dat_ + 556
1d180     40 D3 01 00 | 	long	@@@__system__dat_ + 564
1d184     00 00 00 00 
1d188     00 00 00 00 | 	byte	$00[8]
1d18c     01 00 00 00 
1d190     06 00 00 00 
1d194     00 00 00 00 
1d198     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d19c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1a0     48 D3 01 00 | 	long	@@@__system__dat_ + 572
1d1a4     50 D3 01 00 | 	long	@@@__system__dat_ + 580
1d1a8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1ac     58 D3 01 00 | 	long	@@@__system__dat_ + 588
1d1b0     60 D3 01 00 | 	long	@@@__system__dat_ + 596
1d1b4     00 00 00 00 
      ...             
1d304     00 00 00 00 
1d308     00 00 00 00 | 	byte	$00[344]
1d30c     88 62 00 00 | 	long	@@@__system___tx
1d310     00 00 00 00 | 	byte	$00, $00, $00, $00
1d314     D0 62 00 00 | 	long	@@@__system___rx
1d318     00 00 00 00 | 	byte	$00, $00, $00, $00
1d31c     50 7D 00 00 | 	long	@@@__system___rxtxioctl_0174
1d320     00 00 00 00 | 	byte	$00, $00, $00, $00
1d324     C8 7D 00 00 | 	long	@@@__system____dummy_flush_0175
1d328     00 00 00 00 | 	byte	$00, $00, $00, $00
1d32c     88 62 00 00 | 	long	@@@__system___tx
1d330     00 00 00 00 | 	byte	$00, $00, $00, $00
1d334     D0 62 00 00 | 	long	@@@__system___rx
1d338     00 00 00 00 | 	byte	$00, $00, $00, $00
1d33c     50 7D 00 00 | 	long	@@@__system___rxtxioctl_0174
1d340     00 00 00 00 | 	byte	$00, $00, $00, $00
1d344     C8 7D 00 00 | 	long	@@@__system____dummy_flush_0175
1d348     00 00 00 00 | 	byte	$00, $00, $00, $00
1d34c     88 62 00 00 | 	long	@@@__system___tx
1d350     00 00 00 00 | 	byte	$00, $00, $00, $00
1d354     D0 62 00 00 | 	long	@@@__system___rx
1d358     00 00 00 00 | 	byte	$00, $00, $00, $00
1d35c     50 7D 00 00 | 	long	@@@__system___rxtxioctl_0174
1d360     00 00 00 00 | 	byte	$00, $00, $00, $00
1d364     C8 7D 00 00 | 	long	@@@__system____dummy_flush_0175
1d368     00 00 00 00 | 	byte	$00, $00, $00, $00
1d36c                 | __heap_base
1d36c     00 00 00 00 
      ...             
1e36c     00 00 00 00 
1e370     00 00 00 00 | 	long	0[1026]
1e374                 | objmem
1e374     00 00 00 00 
      ...             
1ec94     00 00 00 00 
1ec98     00 00 00 00 | 	long	0[586]
1ec9c                 | stackspace
1ec9c     00 00 00 00 | 	long	0[1]
1eca0 119             | 	org	COG_BSS_START
1eca0 119             | _var01
1eca0 119             | 	res	1
1eca0 11a             | _var02
1eca0 11a             | 	res	1
1eca0 11b             | _var03
1eca0 11b             | 	res	1
1eca0 11c             | _var04
1eca0 11c             | 	res	1
1eca0 11d             | _var05
1eca0 11d             | 	res	1
1eca0 11e             | _var06
1eca0 11e             | 	res	1
1eca0 11f             | _var07
1eca0 11f             | 	res	1
1eca0 120             | _var08
1eca0 120             | 	res	1
1eca0 121             | _var09
1eca0 121             | 	res	1
1eca0 122             | _var10
1eca0 122             | 	res	1
1eca0 123             | _var11
1eca0 123             | 	res	1
1eca0 124             | _var12
1eca0 124             | 	res	1
1eca0 125             | _var13
1eca0 125             | 	res	1
1eca0 126             | _var14
1eca0 126             | 	res	1
1eca0 127             | _var15
1eca0 127             | 	res	1
1eca0 128             | _var16
1eca0 128             | 	res	1
1eca0 129             | _var17
1eca0 129             | 	res	1
1eca0 12a             | _var18
1eca0 12a             | 	res	1
1eca0 12b             | _var19
1eca0 12b             | 	res	1
1eca0 12c             | _var20
1eca0 12c             | 	res	1
1eca0 12d             | _var21
1eca0 12d             | 	res	1
1eca0 12e             | _var22
1eca0 12e             | 	res	1
1eca0 12f             | _var23
1eca0 12f             | 	res	1
1eca0 130             | _var24
1eca0 130             | 	res	1
1eca0 131             | _var25
1eca0 131             | 	res	1
1eca0 132             | _var26
1eca0 132             | 	res	1
1eca0 133             | _var27
1eca0 133             | 	res	1
1eca0 134             | _var28
1eca0 134             | 	res	1
1eca0 135             | _var29
1eca0 135             | 	res	1
1eca0 136             | _var30
1eca0 136             | 	res	1
1eca0 137             | _var31
1eca0 137             | 	res	1
1eca0 138             | _var32
1eca0 138             | 	res	1
1eca0 139             | arg01
1eca0 139             | 	res	1
1eca0 13a             | arg02
1eca0 13a             | 	res	1
1eca0 13b             | arg03
1eca0 13b             | 	res	1
1eca0 13c             | arg04
1eca0 13c             | 	res	1
1eca0 13d             | arg05
1eca0 13d             | 	res	1
1eca0 13e             | arg06
1eca0 13e             | 	res	1
1eca0 13f             | arg07
1eca0 13f             | 	res	1
1eca0 140             | local01
1eca0 140             | 	res	1
1eca0 141             | local02
1eca0 141             | 	res	1
1eca0 142             | local03
1eca0 142             | 	res	1
1eca0 143             | local04
1eca0 143             | 	res	1
1eca0 144             | local05
1eca0 144             | 	res	1
1eca0 145             | local06
1eca0 145             | 	res	1
1eca0 146             | local07
1eca0 146             | 	res	1
1eca0 147             | local08
1eca0 147             | 	res	1
1eca0 148             | local09
1eca0 148             | 	res	1
1eca0 149             | local10
1eca0 149             | 	res	1
1eca0 14a             | local11
1eca0 14a             | 	res	1
1eca0 14b             | local12
1eca0 14b             | 	res	1
1eca0 14c             | local13
1eca0 14c             | 	res	1
1eca0 14d             | local14
1eca0 14d             | 	res	1
1eca0 14e             | local15
1eca0 14e             | 	res	1
1eca0 14f             | local16
1eca0 14f             | 	res	1
1eca0 150             | local17
1eca0 150             | 	res	1
1eca0 151             | local18
1eca0 151             | 	res	1
1eca0 152             | local19
1eca0 152             | 	res	1
1eca0 153             | local20
1eca0 153             | 	res	1
1eca0 154             | local21
1eca0 154             | 	res	1
1eca0 155             | local22
1eca0 155             | 	res	1
1eca0 156             | local23
1eca0 156             | 	res	1
1eca0 157             | muldiva_
1eca0 157             | 	res	1
1eca0 158             | muldivb_
1eca0 158             | 	res	1
1eca0 159             | 	fit	480
1eca0 159             | 
