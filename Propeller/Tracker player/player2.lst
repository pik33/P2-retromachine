00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/player2.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2C 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 15 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 D8 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 72 62 FD | 	cogid	arg01
00614 084 03 72 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2D 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 73 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 75 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 77 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 79 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2C 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 76 56 F0 |         shr	arg03, #1 wc
00688 0a1 39 75 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 72 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 74 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 76 56 F0 |         shr	arg03, #1 wc
00698 0a5 39 75 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 72 06 C1 |  if_c   add	arg01, #2
006a0 0a7 3A 75 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 39 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 76 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 3B 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 74 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 81 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 81 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 58 AF 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 B0 62 FD |        getqx   muldivb_
00740 0cf 19 AE 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 57 AF 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 58 B1 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 57 AF 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 58 B1 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2C 06 F6 |     mov result1, #0
00778 0dd 00 2E 06 F6 |     mov result2, #0
0077c 0de 39 07 02 F6 |     mov abortchain, arg01
00780 0df 39 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 72 06 F1 |     add arg01, #4
00788 0e1 39 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 72 06 F1 |     add arg01, #4
00790 0e3 39 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 72 06 F1 |     add arg01, #4
00798 0e5 39 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 3A 73 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 39 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 72 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 72 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 3A 2D 02 F6 |     mov result1, arg02
007d4 0f4 01 2E 06 F6 |     mov result2, #1
007d8 0f5 39 75 02 FB |     rdlong arg02, arg01
007dc 0f6 04 72 06 F1 |     add arg01, #4
007e0 0f7 39 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 72 06 F1 |     add arg01, #4
007e8 0f9 39 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 72 06 F1 |     add arg01, #4
007f0 0fb 39 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 72 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 76 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 3C C1 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 44 D1 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 E4 84 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 2C 84 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a DC BE 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio019_spin2_dat__
00830 10b CC B3 01 00 | 	long	@_audio019_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 08 86 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 44 7E 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e C4 23 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f D0 1D 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 BC 1E 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 A8 1F 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 94 20 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 20 35 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 A8 A2 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | ptr_stackspace_
00858 115 74 DA 01 00 | 	long	@stackspace
0085c 116             | result1
0085c 116 00 00 00 00 | 	long	0
00860 117             | result2
00860 117 00 00 00 00 | 	long	0
00864 118             | result3
00864 118 00 00 00 00 | 	long	0
00868 119             | COG_BSS_START
00868 119             | 	fit	480
00868                 | 	orgh
00868                 | hubentry
00868                 | 
00868                 | ' 
00868                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00868                 | _startvideo
00868     A8 2A B0 FD | 	call	#_hng030rm_spin2_start
0086c     00 72 06 F6 | 	mov	arg01, #0
00870     00 74 06 F6 | 	mov	arg02, #0
00874     00 76 06 F6 | 	mov	arg03, #0
00878     10 19 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
0087c                 | ' v030.start(mode,pin)
0087c                 | ' v030.setbordercolor(0,0,0)
0087c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
0087c     07 73 02 F6 | 	mov	arg01, objptr
00880     0E 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00884     88 59 B0 FD | 	call	#__system___make_methodptr
00888     00 30 06 F6 | 	mov	result3, #0
0088c     00 2E 06 F6 | 	mov	result2, #0
00890     16 75 02 F6 | 	mov	arg02, result1
00894     00 76 06 F6 | 	mov	arg03, #0
00898     00 78 06 F6 | 	mov	arg04, #0
0089c     00 72 06 F6 | 	mov	arg01, #0
008a0     44 5C B0 FD | 	call	#__system___basic_open
008a4     00 2C 06 F6 | 	mov	result1, #0
008a8                 | _startvideo_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' function addr(byref v as any)
008ac                 | _addr
008ac     00 5A 05 F6 | 	mov	COUNT_, #0
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     08 F0 07 F1 | 	add	ptra, #8
008b8     04 5E 05 F1 | 	add	fp, #4
008bc     AF 72 62 FC | 	wrlong	arg01, fp
008c0                 | ' 
008c0                 | ' return(cast(ulong,@v))
008c0     39 2D 02 F6 | 	mov	result1, arg01
008c4     04 5E 85 F1 | 	sub	fp, #4
008c8     AF F0 03 F6 | 	mov	ptra, fp
008cc     BF 00 A0 FD | 	call	#popregs_
008d0                 | _addr_ret
008d0     2D 00 64 FD | 	ret
008d4                 | 
008d4                 | ' 
008d4                 | ' '0 - samplestart   - a pointer to the sample start
008d4                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008d4                 | ' '2 - loopstart     - loop start
008d4                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008d4                 | ' '4 - volume        - sample volume, 16384=1
008d4                 | ' '5 - pan           - 0..16384
008d4                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008d4                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008d4                 | ' '8 - cmd 
008d4                 | ' 
008d4                 | ' 
008d4                 | ' sub test 
008d4                 | _test
008d4     01 5A 05 F6 | 	mov	COUNT_, #1
008d8     B0 00 A0 FD | 	call	#pushregs_
008dc     1D 74 06 F6 | 	mov	arg02, #29
008e0                 | ' 
008e0                 | ' ''---------- Set the (x,y) position of cursor
008e0                 | ' 
008e0                 | ' cursor_x:=x
008e0     34 0E 06 F1 | 	add	objptr, #52
008e4     07 0B 48 FC | 	wrbyte	#5, objptr
008e8                 | ' cursor_y:=y
008e8     01 0E 06 F1 | 	add	objptr, #1
008ec     07 3B 48 FC | 	wrbyte	#29, objptr
008f0     02 00 00 FF 
008f4     CA 0F 06 F1 | 	add	objptr, ##1482
008f8     07 81 C2 FA | 	rdbyte	local01, objptr
008fc     02 80 66 F0 | 	shl	local01, #2
00900     01 00 00 FF 
00904     65 0E 06 F1 | 	add	objptr, ##613
00908     07 81 02 F1 | 	add	local01, objptr
0090c     40 73 02 FB | 	rdlong	arg01, local01
00910     04 00 00 FF 
00914     64 0E 86 F1 | 	sub	objptr, ##2148
00918     34 1C B0 FD | 	call	#_hng030rm_spin2_write
0091c     04 00 00 FF 
00920     F0 0E 06 F1 | 	add	objptr, ##2288
00924     07 73 02 FB | 	rdlong	arg01, objptr
00928     04 00 00 FF 
0092c     F0 0E 86 F1 | 	sub	objptr, ##2288
00930     1C 1C B0 FD | 	call	#_hng030rm_spin2_write
00934                 | ' 
00934                 | ' ''---------- Set the (x,y) position of cursor
00934                 | ' 
00934                 | ' cursor_x:=x
00934     34 0E 06 F1 | 	add	objptr, #52
00938     07 03 48 FC | 	wrbyte	#1, objptr
0093c                 | ' cursor_y:=y
0093c     01 0E 06 F1 | 	add	objptr, #1
00940     07 3B 48 FC | 	wrbyte	#29, objptr
00944     02 00 00 FF 
00948     F2 0F 06 F1 | 	add	objptr, ##1522
0094c     07 73 02 FB | 	rdlong	arg01, objptr
00950     10 0E 06 F1 | 	add	objptr, #16
00954     07 81 02 FB | 	rdlong	local01, objptr
00958     03 00 00 FF 
0095c     37 0E 86 F1 | 	sub	objptr, ##1591
00960     40 73 02 F1 | 	add	arg01, local01
00964     03 74 06 F6 | 	mov	arg02, #3
00968     0C 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
0096c     16 73 02 F6 | 	mov	arg01, result1
00970     DC 1B B0 FD | 	call	#_hng030rm_spin2_write
00974     1D 74 06 F6 | 	mov	arg02, #29
00978                 | ' 
00978                 | ' ''---------- Set the (x,y) position of cursor
00978                 | ' 
00978                 | ' cursor_x:=x
00978     34 0E 06 F1 | 	add	objptr, #52
0097c     07 41 48 FC | 	wrbyte	#32, objptr
00980                 | ' cursor_y:=y
00980     01 0E 06 F1 | 	add	objptr, #1
00984     07 3B 48 FC | 	wrbyte	#29, objptr
00988     02 00 00 FF 
0098c     CB 0F 06 F1 | 	add	objptr, ##1483
00990     07 81 C2 FA | 	rdbyte	local01, objptr
00994     02 80 66 F0 | 	shl	local01, #2
00998     01 00 00 FF 
0099c     64 0E 06 F1 | 	add	objptr, ##612
009a0     07 81 02 F1 | 	add	local01, objptr
009a4     40 73 02 FB | 	rdlong	arg01, local01
009a8     04 00 00 FF 
009ac     64 0E 86 F1 | 	sub	objptr, ##2148
009b0     9C 1B B0 FD | 	call	#_hng030rm_spin2_write
009b4     04 00 00 FF 
009b8     F0 0E 06 F1 | 	add	objptr, ##2288
009bc     07 73 02 FB | 	rdlong	arg01, objptr
009c0     04 00 00 FF 
009c4     F0 0E 86 F1 | 	sub	objptr, ##2288
009c8     84 1B B0 FD | 	call	#_hng030rm_spin2_write
009cc                 | ' 
009cc                 | ' ''---------- Set the (x,y) position of cursor
009cc                 | ' 
009cc                 | ' cursor_x:=x
009cc     34 0E 06 F1 | 	add	objptr, #52
009d0     07 39 48 FC | 	wrbyte	#28, objptr
009d4                 | ' cursor_y:=y
009d4     01 0E 06 F1 | 	add	objptr, #1
009d8     07 3B 48 FC | 	wrbyte	#29, objptr
009dc     02 00 00 FF 
009e0     F6 0F 06 F1 | 	add	objptr, ##1526
009e4     07 73 02 FB | 	rdlong	arg01, objptr
009e8     10 0E 06 F1 | 	add	objptr, #16
009ec     07 81 02 FB | 	rdlong	local01, objptr
009f0     03 00 00 FF 
009f4     3B 0E 86 F1 | 	sub	objptr, ##1595
009f8     40 73 02 F1 | 	add	arg01, local01
009fc     03 74 06 F6 | 	mov	arg02, #3
00a00     74 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a04     16 73 02 F6 | 	mov	arg01, result1
00a08     44 1B B0 FD | 	call	#_hng030rm_spin2_write
00a0c     1D 74 06 F6 | 	mov	arg02, #29
00a10                 | ' 
00a10                 | ' ''---------- Set the (x,y) position of cursor
00a10                 | ' 
00a10                 | ' cursor_x:=x
00a10     34 0E 06 F1 | 	add	objptr, #52
00a14     07 79 48 FC | 	wrbyte	#60, objptr
00a18                 | ' cursor_y:=y
00a18     01 0E 06 F1 | 	add	objptr, #1
00a1c     07 3B 48 FC | 	wrbyte	#29, objptr
00a20     02 00 00 FF 
00a24     CC 0F 06 F1 | 	add	objptr, ##1484
00a28     07 81 C2 FA | 	rdbyte	local01, objptr
00a2c     02 80 66 F0 | 	shl	local01, #2
00a30     01 00 00 FF 
00a34     63 0E 06 F1 | 	add	objptr, ##611
00a38     07 81 02 F1 | 	add	local01, objptr
00a3c     40 73 02 FB | 	rdlong	arg01, local01
00a40     04 00 00 FF 
00a44     64 0E 86 F1 | 	sub	objptr, ##2148
00a48     04 1B B0 FD | 	call	#_hng030rm_spin2_write
00a4c     04 00 00 FF 
00a50     F0 0E 06 F1 | 	add	objptr, ##2288
00a54     07 73 02 FB | 	rdlong	arg01, objptr
00a58     04 00 00 FF 
00a5c     F0 0E 86 F1 | 	sub	objptr, ##2288
00a60     EC 1A B0 FD | 	call	#_hng030rm_spin2_write
00a64                 | ' 
00a64                 | ' ''---------- Set the (x,y) position of cursor
00a64                 | ' 
00a64                 | ' cursor_x:=x
00a64     34 0E 06 F1 | 	add	objptr, #52
00a68     07 71 48 FC | 	wrbyte	#56, objptr
00a6c                 | ' cursor_y:=y
00a6c     01 0E 06 F1 | 	add	objptr, #1
00a70     07 3B 48 FC | 	wrbyte	#29, objptr
00a74     02 00 00 FF 
00a78     FA 0F 06 F1 | 	add	objptr, ##1530
00a7c     07 73 02 FB | 	rdlong	arg01, objptr
00a80     10 0E 06 F1 | 	add	objptr, #16
00a84     07 81 02 FB | 	rdlong	local01, objptr
00a88     03 00 00 FF 
00a8c     3F 0E 86 F1 | 	sub	objptr, ##1599
00a90     40 73 02 F1 | 	add	arg01, local01
00a94     03 74 06 F6 | 	mov	arg02, #3
00a98     DC 1D B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a9c     16 73 02 F6 | 	mov	arg01, result1
00aa0     AC 1A B0 FD | 	call	#_hng030rm_spin2_write
00aa4                 | ' 
00aa4                 | ' ''---------- Set the (x,y) position of cursor
00aa4                 | ' 
00aa4                 | ' cursor_x:=x
00aa4     34 0E 06 F1 | 	add	objptr, #52
00aa8     07 A9 48 FC | 	wrbyte	#84, objptr
00aac                 | ' cursor_y:=y
00aac     01 0E 06 F1 | 	add	objptr, #1
00ab0     07 3B 48 FC | 	wrbyte	#29, objptr
00ab4     02 00 00 FF 
00ab8     FE 0F 06 F1 | 	add	objptr, ##1534
00abc     07 73 02 FB | 	rdlong	arg01, objptr
00ac0     10 0E 06 F1 | 	add	objptr, #16
00ac4     07 81 02 FB | 	rdlong	local01, objptr
00ac8     03 00 00 FF 
00acc     43 0E 86 F1 | 	sub	objptr, ##1603
00ad0     40 73 02 F1 | 	add	arg01, local01
00ad4     03 74 06 F6 | 	mov	arg02, #3
00ad8     9C 1D B0 FD | 	call	#_hng030rm_spin2_inttostr2
00adc     16 73 02 F6 | 	mov	arg01, result1
00ae0     6C 1A B0 FD | 	call	#_hng030rm_spin2_write
00ae4     1D 74 06 F6 | 	mov	arg02, #29
00ae8                 | ' 
00ae8                 | ' ''---------- Set the (x,y) position of cursor
00ae8                 | ' 
00ae8                 | ' cursor_x:=x
00ae8     34 0E 06 F1 | 	add	objptr, #52
00aec     07 B1 48 FC | 	wrbyte	#88, objptr
00af0                 | ' cursor_y:=y
00af0     01 0E 06 F1 | 	add	objptr, #1
00af4     07 3B 48 FC | 	wrbyte	#29, objptr
00af8     02 00 00 FF 
00afc     CD 0F 06 F1 | 	add	objptr, ##1485
00b00     07 81 C2 FA | 	rdbyte	local01, objptr
00b04     02 80 66 F0 | 	shl	local01, #2
00b08     01 00 00 FF 
00b0c     62 0E 06 F1 | 	add	objptr, ##610
00b10     07 81 02 F1 | 	add	local01, objptr
00b14     40 73 02 FB | 	rdlong	arg01, local01
00b18     04 00 00 FF 
00b1c     64 0E 86 F1 | 	sub	objptr, ##2148
00b20     2C 1A B0 FD | 	call	#_hng030rm_spin2_write
00b24     04 00 00 FF 
00b28     F0 0E 06 F1 | 	add	objptr, ##2288
00b2c     07 73 02 FB | 	rdlong	arg01, objptr
00b30     04 00 00 FF 
00b34     F0 0E 86 F1 | 	sub	objptr, ##2288
00b38     14 1A B0 FD | 	call	#_hng030rm_spin2_write
00b3c     AF F0 03 F6 | 	mov	ptra, fp
00b40     BF 00 A0 FD | 	call	#popregs_
00b44                 | _test_ret
00b44     2D 00 64 FD | 	ret
00b48                 | 
00b48                 | ' 
00b48                 | ' 
00b48                 | ' sub getinfo(ma,num)
00b48                 | _getinfo
00b48     0F 5A 05 F6 | 	mov	COUNT_, #15
00b4c     B0 00 A0 FD | 	call	#pushregs_
00b50     39 81 02 F6 | 	mov	local01, arg01
00b54     3A 83 02 F6 | 	mov	local02, arg02
00b58     04 74 06 F6 | 	mov	arg02, #4
00b5c                 | ' 
00b5c                 | ' ''---------- Set the (x,y) position of cursor
00b5c                 | ' 
00b5c                 | ' cursor_x:=x
00b5c     34 0E 06 F1 | 	add	objptr, #52
00b60     07 03 48 FC | 	wrbyte	#1, objptr
00b64                 | ' cursor_y:=y
00b64     01 0E 06 F1 | 	add	objptr, #1
00b68     07 09 48 FC | 	wrbyte	#4, objptr
00b6c     35 0E 86 F1 | 	sub	objptr, #53
00b70                 | ' 'v030. setwritecolors(170,147):
00b70                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b70     00 72 06 F6 | 	mov	arg01, #0
00b74     24 6E B0 FD | 	call	#__system___getiolock_0145
00b78     16 73 02 F6 | 	mov	arg01, result1
00b7c     D0 56 B0 FD | 	call	#__system___lockmem
00b80     00 2C 06 F6 | 	mov	result1, #0
00b84     42 00 00 FF 
00b88     72 75 06 F6 | 	mov	arg02, ##@LR__0455
00b8c     00 72 06 F6 | 	mov	arg01, #0
00b90     00 76 06 F6 | 	mov	arg03, #0
00b94     50 5A B0 FD | 	call	#__system___basic_print_string
00b98     00 72 06 F6 | 	mov	arg01, #0
00b9c     0A 74 06 F6 | 	mov	arg02, #10
00ba0     00 76 06 F6 | 	mov	arg03, #0
00ba4     F4 59 B0 FD | 	call	#__system___basic_print_char
00ba8     01 2C 06 F6 | 	mov	result1, #1
00bac     00 72 06 F6 | 	mov	arg01, #0
00bb0     E8 6D B0 FD | 	call	#__system___getiolock_0145
00bb4     16 01 68 FC | 	wrlong	#0, result1
00bb8     00 2C 06 F6 | 	mov	result1, #0
00bbc                 | ' ': v030. setwritecolors(154,147)
00bbc                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00bbc     00 84 06 F6 | 	mov	local03, #0
00bc0                 | LR__0001
00bc0     42 87 02 F6 | 	mov	local04, local03
00bc4     02 86 66 F0 | 	shl	local04, #2
00bc8     04 00 00 FF 
00bcc     64 0E 06 F1 | 	add	objptr, ##2148
00bd0     07 87 02 F1 | 	add	local04, objptr
00bd4     42 00 00 FF 
00bd8     DB 89 06 F6 | 	mov	local05, ##@LR__0456
00bdc     42 73 02 F6 | 	mov	arg01, local03
00be0     02 74 06 F6 | 	mov	arg02, #2
00be4     04 00 00 FF 
00be8     64 0E 86 F1 | 	sub	objptr, ##2148
00bec     0A 76 06 F6 | 	mov	arg03, #10
00bf0     04 5F B0 FD | 	call	#__system__Number_S
00bf4     16 75 02 F6 | 	mov	arg02, result1
00bf8     44 73 02 F6 | 	mov	arg01, local05
00bfc     88 56 B0 FD | 	call	#__system___string_concat
00c00     16 8B 02 F6 | 	mov	local06, result1
00c04     13 72 06 F6 | 	mov	arg01, #19
00c08     42 00 00 FF 
00c0c     1C 75 06 F6 | 	mov	arg02, ##@LR__0449
00c10     B0 5F B0 FD | 	call	#__system__String_S
00c14     16 75 02 F6 | 	mov	arg02, result1
00c18     45 73 02 F6 | 	mov	arg01, local06
00c1c     68 56 B0 FD | 	call	#__system___string_concat
00c20     43 2D 62 FC | 	wrlong	result1, local04
00c24     01 84 06 F1 | 	add	local03, #1
00c28     20 84 5E F2 | 	cmps	local03, #32 wcz
00c2c     90 FF 9F CD |  if_b	jmp	#LR__0001
00c30                 | ' for i=1 to num
00c30     01 84 06 F6 | 	mov	local03, #1
00c34     01 82 06 F1 | 	add	local02, #1
00c38                 | LR__0002
00c38     41 85 5A F2 | 	cmps	local03, local02 wcz
00c3c     54 08 90 3D |  if_ae	jmp	#LR__0007
00c40                 | '   for j=0 to 21
00c40     00 8C 06 F6 | 	mov	local07, #0
00c44                 | LR__0003
00c44     42 73 02 F6 | 	mov	arg01, local03
00c48     02 72 66 F0 | 	shl	arg01, #2
00c4c     04 00 00 FF 
00c50     64 0E 06 F1 | 	add	objptr, ##2148
00c54     07 73 02 F1 | 	add	arg01, objptr
00c58     04 00 00 FF 
00c5c     64 0E 86 F1 | 	sub	objptr, ##2148
00c60     48 FC BF FD | 	call	#_addr
00c64                 | ' asm
00c64     16 8F 02 FB | 	rdlong	local08, result1
00c68                 | ' return r
00c68     04 00 00 FF 
00c6c     14 0F 06 F1 | 	add	objptr, ##2324
00c70     07 8F 62 FC | 	wrlong	local08, objptr
00c74     40 73 02 F6 | 	mov	arg01, local01
00c78     14 72 06 F1 | 	add	arg01, #20
00c7c     42 91 02 F6 | 	mov	local09, local03
00c80     01 90 86 F1 | 	sub	local09, #1
00c84     48 93 02 F6 | 	mov	local10, local09
00c88     04 92 66 F0 | 	shl	local10, #4
00c8c     48 93 82 F1 | 	sub	local10, local09
00c90     01 92 66 F0 | 	shl	local10, #1
00c94     49 73 02 F1 | 	add	arg01, local10
00c98     46 73 02 F1 | 	add	arg01, local07
00c9c                 | ' asm
00c9c     39 2D C2 FA | 	rdbyte	result1, arg01
00ca0                 | ' return r
00ca0     16 95 02 F6 | 	mov	local11, result1
00ca4     07 94 46 F7 | 	zerox	local11, #7
00ca8     04 0E 06 F1 | 	add	objptr, #4
00cac     07 95 62 FC | 	wrlong	local11, objptr
00cb0                 | '     a=lpeek(addr(sn$(i)))
00cb0                 | '     b=(peek(ma+20+30*(i-1)+j))
00cb0                 | '     if b>=32 then poke a+j,b
00cb0     04 00 00 FF 
00cb4     18 0F 86 F1 | 	sub	objptr, ##2328
00cb8     20 94 5E F2 | 	cmps	local11, #32 wcz
00cbc     24 00 90 CD |  if_b	jmp	#LR__0004
00cc0     04 00 00 FF 
00cc4     14 0F 06 F1 | 	add	objptr, ##2324
00cc8     07 73 02 FB | 	rdlong	arg01, objptr
00ccc     46 73 02 F1 | 	add	arg01, local07
00cd0     04 0E 06 F1 | 	add	objptr, #4
00cd4     07 75 02 FB | 	rdlong	arg02, objptr
00cd8     04 00 00 FF 
00cdc     18 0F 86 F1 | 	sub	objptr, ##2328
00ce0                 | ' asm
00ce0     39 75 42 FC | 	wrbyte	arg02, arg01
00ce4                 | LR__0004
00ce4     01 8C 06 F1 | 	add	local07, #1
00ce8     16 8C 5E F2 | 	cmps	local07, #22 wcz
00cec     54 FF 9F CD |  if_b	jmp	#LR__0003
00cf0     40 73 02 F6 | 	mov	arg01, local01
00cf4     14 72 06 F1 | 	add	arg01, #20
00cf8     42 93 02 F6 | 	mov	local10, local03
00cfc     01 92 86 F1 | 	sub	local10, #1
00d00     49 89 02 F6 | 	mov	local05, local10
00d04     04 88 66 F0 | 	shl	local05, #4
00d08     49 89 82 F1 | 	sub	local05, local10
00d0c     01 88 66 F0 | 	shl	local05, #1
00d10     44 73 02 F1 | 	add	arg01, local05
00d14     16 72 06 F1 | 	add	arg01, #22
00d18                 | ' asm
00d18     39 97 C2 FA | 	rdbyte	local12, arg01
00d1c                 | ' return r
00d1c     07 96 46 F7 | 	zerox	local12, #7
00d20     08 96 66 F0 | 	shl	local12, #8
00d24     40 73 02 F6 | 	mov	arg01, local01
00d28     14 72 06 F1 | 	add	arg01, #20
00d2c     42 99 02 F6 | 	mov	local13, local03
00d30     01 98 86 F1 | 	sub	local13, #1
00d34     4C 9B 02 F6 | 	mov	local14, local13
00d38     04 9A 66 F0 | 	shl	local14, #4
00d3c     4C 9B 82 F1 | 	sub	local14, local13
00d40     01 9A 66 F0 | 	shl	local14, #1
00d44     4D 73 02 F1 | 	add	arg01, local14
00d48     17 72 06 F1 | 	add	arg01, #23
00d4c                 | ' asm
00d4c     39 8B C2 FA | 	rdbyte	local06, arg01
00d50                 | ' return r
00d50     07 8A 46 F7 | 	zerox	local06, #7
00d54     45 97 02 F1 | 	add	local12, local06
00d58     01 96 66 F0 | 	shl	local12, #1
00d5c     04 00 00 FF 
00d60     1C 0F 06 F1 | 	add	objptr, ##2332
00d64     07 97 62 FC | 	wrlong	local12, objptr
00d68     40 73 02 F6 | 	mov	arg01, local01
00d6c     14 72 06 F1 | 	add	arg01, #20
00d70     42 93 02 F6 | 	mov	local10, local03
00d74     01 92 86 F1 | 	sub	local10, #1
00d78     49 89 02 F6 | 	mov	local05, local10
00d7c     04 88 66 F0 | 	shl	local05, #4
00d80     49 89 82 F1 | 	sub	local05, local10
00d84     01 88 66 F0 | 	shl	local05, #1
00d88     44 73 02 F1 | 	add	arg01, local05
00d8c     1A 72 06 F1 | 	add	arg01, #26
00d90                 | ' asm
00d90     39 97 C2 FA | 	rdbyte	local12, arg01
00d94                 | ' return r
00d94     07 96 46 F7 | 	zerox	local12, #7
00d98     08 96 66 F0 | 	shl	local12, #8
00d9c     40 73 02 F6 | 	mov	arg01, local01
00da0     14 72 06 F1 | 	add	arg01, #20
00da4     42 99 02 F6 | 	mov	local13, local03
00da8     01 98 86 F1 | 	sub	local13, #1
00dac     4C 9B 02 F6 | 	mov	local14, local13
00db0     04 9A 66 F0 | 	shl	local14, #4
00db4     4C 9B 82 F1 | 	sub	local14, local13
00db8     01 9A 66 F0 | 	shl	local14, #1
00dbc     4D 73 02 F1 | 	add	arg01, local14
00dc0     1B 72 06 F1 | 	add	arg01, #27
00dc4                 | ' asm
00dc4     39 8B C2 FA | 	rdbyte	local06, arg01
00dc8                 | ' return r
00dc8     07 8A 46 F7 | 	zerox	local06, #7
00dcc     45 97 02 F1 | 	add	local12, local06
00dd0     01 96 66 F0 | 	shl	local12, #1
00dd4     04 0E 06 F1 | 	add	objptr, #4
00dd8     07 97 62 FC | 	wrlong	local12, objptr
00ddc     40 73 02 F6 | 	mov	arg01, local01
00de0     14 72 06 F1 | 	add	arg01, #20
00de4     42 93 02 F6 | 	mov	local10, local03
00de8     01 92 86 F1 | 	sub	local10, #1
00dec     49 89 02 F6 | 	mov	local05, local10
00df0     04 88 66 F0 | 	shl	local05, #4
00df4     49 89 82 F1 | 	sub	local05, local10
00df8     01 88 66 F0 | 	shl	local05, #1
00dfc     44 73 02 F1 | 	add	arg01, local05
00e00     1C 72 06 F1 | 	add	arg01, #28
00e04                 | ' asm
00e04     39 97 C2 FA | 	rdbyte	local12, arg01
00e08                 | ' return r
00e08     07 96 46 F7 | 	zerox	local12, #7
00e0c     08 96 66 F0 | 	shl	local12, #8
00e10     40 73 02 F6 | 	mov	arg01, local01
00e14     14 72 06 F1 | 	add	arg01, #20
00e18     42 99 02 F6 | 	mov	local13, local03
00e1c     01 98 86 F1 | 	sub	local13, #1
00e20     4C 9B 02 F6 | 	mov	local14, local13
00e24     04 9A 66 F0 | 	shl	local14, #4
00e28     4C 9B 82 F1 | 	sub	local14, local13
00e2c     01 9A 66 F0 | 	shl	local14, #1
00e30     4D 73 02 F1 | 	add	arg01, local14
00e34     1D 72 06 F1 | 	add	arg01, #29
00e38                 | ' asm
00e38     39 8B C2 FA | 	rdbyte	local06, arg01
00e3c                 | ' return r
00e3c     07 8A 46 F7 | 	zerox	local06, #7
00e40     45 97 02 F1 | 	add	local12, local06
00e44     01 96 66 F0 | 	shl	local12, #1
00e48     04 0E 06 F1 | 	add	objptr, #4
00e4c     07 97 62 FC | 	wrlong	local12, objptr
00e50     40 73 02 F6 | 	mov	arg01, local01
00e54     14 72 06 F1 | 	add	arg01, #20
00e58     42 91 02 F6 | 	mov	local09, local03
00e5c     01 90 86 F1 | 	sub	local09, #1
00e60     48 93 02 F6 | 	mov	local10, local09
00e64     04 92 66 F0 | 	shl	local10, #4
00e68     48 93 82 F1 | 	sub	local10, local09
00e6c     01 92 66 F0 | 	shl	local10, #1
00e70     49 73 02 F1 | 	add	arg01, local10
00e74     18 72 06 F1 | 	add	arg01, #24
00e78                 | ' asm
00e78     39 95 C2 FA | 	rdbyte	local11, arg01
00e7c                 | ' return r
00e7c     07 94 46 F7 | 	zerox	local11, #7
00e80     04 0E 06 F1 | 	add	objptr, #4
00e84     07 95 62 FC | 	wrlong	local11, objptr
00e88     40 73 02 F6 | 	mov	arg01, local01
00e8c     14 72 06 F1 | 	add	arg01, #20
00e90     42 91 02 F6 | 	mov	local09, local03
00e94     01 90 86 F1 | 	sub	local09, #1
00e98     48 93 02 F6 | 	mov	local10, local09
00e9c     04 92 66 F0 | 	shl	local10, #4
00ea0     48 93 82 F1 | 	sub	local10, local09
00ea4     01 92 66 F0 | 	shl	local10, #1
00ea8     49 73 02 F1 | 	add	arg01, local10
00eac     19 72 06 F1 | 	add	arg01, #25
00eb0                 | ' asm
00eb0     39 2D C2 FA | 	rdbyte	result1, arg01
00eb4                 | ' return r
00eb4     16 95 02 F6 | 	mov	local11, result1
00eb8     07 94 46 F7 | 	zerox	local11, #7
00ebc     04 0E 06 F1 | 	add	objptr, #4
00ec0     07 95 62 FC | 	wrlong	local11, objptr
00ec4     04 00 00 FF 
00ec8     2C 0F 86 F1 | 	sub	objptr, ##2348
00ecc                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ecc                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ecc                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ecc                 | ' ft=peek(ma+20+30*(i-1)+24)
00ecc                 | ' vl=peek(ma+20+30*(i-1)+25)
00ecc                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ecc     10 84 5E F2 | 	cmps	local03, #16 wcz
00ed0     D8 02 90 3D |  if_ae	jmp	#LR__0005
00ed4     05 74 06 F6 | 	mov	arg02, #5
00ed8     42 75 02 F1 | 	add	arg02, local03
00edc                 | ' 
00edc                 | ' ''---------- Set the (x,y) position of cursor
00edc                 | ' 
00edc                 | ' cursor_x:=x
00edc     34 0E 06 F1 | 	add	objptr, #52
00ee0     07 03 48 FC | 	wrbyte	#1, objptr
00ee4                 | ' cursor_y:=y
00ee4     01 0E 06 F1 | 	add	objptr, #1
00ee8     07 75 42 FC | 	wrbyte	arg02, objptr
00eec     35 0E 86 F1 | 	sub	objptr, #53
00ef0     00 72 06 F6 | 	mov	arg01, #0
00ef4     A4 6A B0 FD | 	call	#__system___getiolock_0145
00ef8     16 73 02 F6 | 	mov	arg01, result1
00efc     50 53 B0 FD | 	call	#__system___lockmem
00f00     00 2C 06 F6 | 	mov	result1, #0
00f04     42 9D 02 F6 | 	mov	local15, local03
00f08     02 9C 66 F0 | 	shl	local15, #2
00f0c     04 00 00 FF 
00f10     64 0E 06 F1 | 	add	objptr, ##2148
00f14     07 9D 02 F1 | 	add	local15, objptr
00f18     4E 75 02 FB | 	rdlong	arg02, local15
00f1c     00 72 06 F6 | 	mov	arg01, #0
00f20     00 76 06 F6 | 	mov	arg03, #0
00f24     04 00 00 FF 
00f28     64 0E 86 F1 | 	sub	objptr, ##2148
00f2c     B8 56 B0 FD | 	call	#__system___basic_print_string
00f30     00 72 06 F6 | 	mov	arg01, #0
00f34     0A 74 06 F6 | 	mov	arg02, #10
00f38     00 76 06 F6 | 	mov	arg03, #0
00f3c     5C 56 B0 FD | 	call	#__system___basic_print_char
00f40     01 2C 06 F6 | 	mov	result1, #1
00f44     00 72 06 F6 | 	mov	arg01, #0
00f48     50 6A B0 FD | 	call	#__system___getiolock_0145
00f4c     16 01 68 FC | 	wrlong	#0, result1
00f50     00 2C 06 F6 | 	mov	result1, #0
00f54     05 74 06 F6 | 	mov	arg02, #5
00f58     42 75 02 F1 | 	add	arg02, local03
00f5c                 | ' 
00f5c                 | ' ''---------- Set the (x,y) position of cursor
00f5c                 | ' 
00f5c                 | ' cursor_x:=x
00f5c     34 0E 06 F1 | 	add	objptr, #52
00f60     07 31 48 FC | 	wrbyte	#24, objptr
00f64                 | ' cursor_y:=y
00f64     01 0E 06 F1 | 	add	objptr, #1
00f68     07 75 42 FC | 	wrbyte	arg02, objptr
00f6c     35 0E 86 F1 | 	sub	objptr, #53
00f70     00 72 06 F6 | 	mov	arg01, #0
00f74     24 6A B0 FD | 	call	#__system___getiolock_0145
00f78     16 73 02 F6 | 	mov	arg01, result1
00f7c     D0 52 B0 FD | 	call	#__system___lockmem
00f80     00 2C 06 F6 | 	mov	result1, #0
00f84     04 00 00 FF 
00f88     1C 0F 06 F1 | 	add	objptr, ##2332
00f8c     07 75 02 FB | 	rdlong	arg02, objptr
00f90     04 00 00 FF 
00f94     1C 0F 86 F1 | 	sub	objptr, ##2332
00f98     00 72 06 F6 | 	mov	arg01, #0
00f9c     00 76 06 F6 | 	mov	arg03, #0
00fa0     0A 78 06 F6 | 	mov	arg04, #10
00fa4     88 56 B0 FD | 	call	#__system___basic_print_integer
00fa8     00 72 06 F6 | 	mov	arg01, #0
00fac     0A 74 06 F6 | 	mov	arg02, #10
00fb0     00 76 06 F6 | 	mov	arg03, #0
00fb4     E4 55 B0 FD | 	call	#__system___basic_print_char
00fb8     01 2C 06 F6 | 	mov	result1, #1
00fbc     00 72 06 F6 | 	mov	arg01, #0
00fc0     D8 69 B0 FD | 	call	#__system___getiolock_0145
00fc4     16 01 68 FC | 	wrlong	#0, result1
00fc8     00 2C 06 F6 | 	mov	result1, #0
00fcc     05 74 06 F6 | 	mov	arg02, #5
00fd0     42 75 02 F1 | 	add	arg02, local03
00fd4                 | ' 
00fd4                 | ' ''---------- Set the (x,y) position of cursor
00fd4                 | ' 
00fd4                 | ' cursor_x:=x
00fd4     34 0E 06 F1 | 	add	objptr, #52
00fd8     07 3F 48 FC | 	wrbyte	#31, objptr
00fdc                 | ' cursor_y:=y
00fdc     01 0E 06 F1 | 	add	objptr, #1
00fe0     07 75 42 FC | 	wrbyte	arg02, objptr
00fe4     35 0E 86 F1 | 	sub	objptr, #53
00fe8     00 72 06 F6 | 	mov	arg01, #0
00fec     AC 69 B0 FD | 	call	#__system___getiolock_0145
00ff0     16 73 02 F6 | 	mov	arg01, result1
00ff4     58 52 B0 FD | 	call	#__system___lockmem
00ff8     00 2C 06 F6 | 	mov	result1, #0
00ffc     04 00 00 FF 
01000     28 0F 06 F1 | 	add	objptr, ##2344
01004     07 75 02 FB | 	rdlong	arg02, objptr
01008     04 00 00 FF 
0100c     28 0F 86 F1 | 	sub	objptr, ##2344
01010     00 72 06 F6 | 	mov	arg01, #0
01014     00 76 06 F6 | 	mov	arg03, #0
01018     0A 78 06 F6 | 	mov	arg04, #10
0101c     10 56 B0 FD | 	call	#__system___basic_print_integer
01020     00 72 06 F6 | 	mov	arg01, #0
01024     0A 74 06 F6 | 	mov	arg02, #10
01028     00 76 06 F6 | 	mov	arg03, #0
0102c     6C 55 B0 FD | 	call	#__system___basic_print_char
01030     01 2C 06 F6 | 	mov	result1, #1
01034     00 72 06 F6 | 	mov	arg01, #0
01038     60 69 B0 FD | 	call	#__system___getiolock_0145
0103c     16 01 68 FC | 	wrlong	#0, result1
01040     00 2C 06 F6 | 	mov	result1, #0
01044     05 74 06 F6 | 	mov	arg02, #5
01048     42 75 02 F1 | 	add	arg02, local03
0104c                 | ' 
0104c                 | ' ''---------- Set the (x,y) position of cursor
0104c                 | ' 
0104c                 | ' cursor_x:=x
0104c     34 0E 06 F1 | 	add	objptr, #52
01050     07 45 48 FC | 	wrbyte	#34, objptr
01054                 | ' cursor_y:=y
01054     01 0E 06 F1 | 	add	objptr, #1
01058     07 75 42 FC | 	wrbyte	arg02, objptr
0105c     35 0E 86 F1 | 	sub	objptr, #53
01060     00 72 06 F6 | 	mov	arg01, #0
01064     34 69 B0 FD | 	call	#__system___getiolock_0145
01068     16 73 02 F6 | 	mov	arg01, result1
0106c     E0 51 B0 FD | 	call	#__system___lockmem
01070     00 2C 06 F6 | 	mov	result1, #0
01074     04 00 00 FF 
01078     2C 0F 06 F1 | 	add	objptr, ##2348
0107c     07 75 02 FB | 	rdlong	arg02, objptr
01080     04 00 00 FF 
01084     2C 0F 86 F1 | 	sub	objptr, ##2348
01088     00 72 06 F6 | 	mov	arg01, #0
0108c     00 76 06 F6 | 	mov	arg03, #0
01090     0A 78 06 F6 | 	mov	arg04, #10
01094     98 55 B0 FD | 	call	#__system___basic_print_integer
01098     00 72 06 F6 | 	mov	arg01, #0
0109c     0A 74 06 F6 | 	mov	arg02, #10
010a0     00 76 06 F6 | 	mov	arg03, #0
010a4     F4 54 B0 FD | 	call	#__system___basic_print_char
010a8     01 2C 06 F6 | 	mov	result1, #1
010ac     00 72 06 F6 | 	mov	arg01, #0
010b0     E8 68 B0 FD | 	call	#__system___getiolock_0145
010b4     16 01 68 FC | 	wrlong	#0, result1
010b8     00 2C 06 F6 | 	mov	result1, #0
010bc     05 74 06 F6 | 	mov	arg02, #5
010c0     42 75 02 F1 | 	add	arg02, local03
010c4                 | ' 
010c4                 | ' ''---------- Set the (x,y) position of cursor
010c4                 | ' 
010c4                 | ' cursor_x:=x
010c4     34 0E 06 F1 | 	add	objptr, #52
010c8     07 4B 48 FC | 	wrbyte	#37, objptr
010cc                 | ' cursor_y:=y
010cc     01 0E 06 F1 | 	add	objptr, #1
010d0     07 75 42 FC | 	wrbyte	arg02, objptr
010d4     35 0E 86 F1 | 	sub	objptr, #53
010d8     00 72 06 F6 | 	mov	arg01, #0
010dc     BC 68 B0 FD | 	call	#__system___getiolock_0145
010e0     16 73 02 F6 | 	mov	arg01, result1
010e4     68 51 B0 FD | 	call	#__system___lockmem
010e8     00 2C 06 F6 | 	mov	result1, #0
010ec     04 00 00 FF 
010f0     20 0F 06 F1 | 	add	objptr, ##2336
010f4     07 75 02 FB | 	rdlong	arg02, objptr
010f8     04 00 00 FF 
010fc     20 0F 86 F1 | 	sub	objptr, ##2336
01100     00 72 06 F6 | 	mov	arg01, #0
01104     00 76 06 F6 | 	mov	arg03, #0
01108     0A 78 06 F6 | 	mov	arg04, #10
0110c     20 55 B0 FD | 	call	#__system___basic_print_integer
01110     00 72 06 F6 | 	mov	arg01, #0
01114     0A 74 06 F6 | 	mov	arg02, #10
01118     00 76 06 F6 | 	mov	arg03, #0
0111c     7C 54 B0 FD | 	call	#__system___basic_print_char
01120     01 2C 06 F6 | 	mov	result1, #1
01124     00 72 06 F6 | 	mov	arg01, #0
01128     70 68 B0 FD | 	call	#__system___getiolock_0145
0112c     16 01 68 FC | 	wrlong	#0, result1
01130     00 2C 06 F6 | 	mov	result1, #0
01134     05 74 06 F6 | 	mov	arg02, #5
01138     42 75 02 F1 | 	add	arg02, local03
0113c                 | ' 
0113c                 | ' ''---------- Set the (x,y) position of cursor
0113c                 | ' 
0113c                 | ' cursor_x:=x
0113c     34 0E 06 F1 | 	add	objptr, #52
01140     07 57 48 FC | 	wrbyte	#43, objptr
01144                 | ' cursor_y:=y
01144     01 0E 06 F1 | 	add	objptr, #1
01148     07 75 42 FC | 	wrbyte	arg02, objptr
0114c     35 0E 86 F1 | 	sub	objptr, #53
01150     00 72 06 F6 | 	mov	arg01, #0
01154     44 68 B0 FD | 	call	#__system___getiolock_0145
01158     16 73 02 F6 | 	mov	arg01, result1
0115c     F0 50 B0 FD | 	call	#__system___lockmem
01160     00 2C 06 F6 | 	mov	result1, #0
01164     04 00 00 FF 
01168     24 0F 06 F1 | 	add	objptr, ##2340
0116c     07 75 02 FB | 	rdlong	arg02, objptr
01170     04 00 00 FF 
01174     24 0F 86 F1 | 	sub	objptr, ##2340
01178     00 72 06 F6 | 	mov	arg01, #0
0117c     00 76 06 F6 | 	mov	arg03, #0
01180     0A 78 06 F6 | 	mov	arg04, #10
01184     A8 54 B0 FD | 	call	#__system___basic_print_integer
01188     00 72 06 F6 | 	mov	arg01, #0
0118c     0A 74 06 F6 | 	mov	arg02, #10
01190     00 76 06 F6 | 	mov	arg03, #0
01194     04 54 B0 FD | 	call	#__system___basic_print_char
01198     01 2C 06 F6 | 	mov	result1, #1
0119c     00 72 06 F6 | 	mov	arg01, #0
011a0     F8 67 B0 FD | 	call	#__system___getiolock_0145
011a4     16 01 68 FC | 	wrlong	#0, result1
011a8     00 2C 06 F6 | 	mov	result1, #0
011ac                 | LR__0005
011ac                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
011ac     10 84 5E F2 | 	cmps	local03, #16 wcz
011b0     D8 02 90 CD |  if_b	jmp	#LR__0006
011b4     42 75 02 F6 | 	mov	arg02, local03
011b8     0B 74 86 F1 | 	sub	arg02, #11
011bc                 | ' 
011bc                 | ' ''---------- Set the (x,y) position of cursor
011bc                 | ' 
011bc                 | ' cursor_x:=x
011bc     34 0E 06 F1 | 	add	objptr, #52
011c0     07 73 48 FC | 	wrbyte	#57, objptr
011c4                 | ' cursor_y:=y
011c4     01 0E 06 F1 | 	add	objptr, #1
011c8     07 75 42 FC | 	wrbyte	arg02, objptr
011cc     35 0E 86 F1 | 	sub	objptr, #53
011d0     00 72 06 F6 | 	mov	arg01, #0
011d4     C4 67 B0 FD | 	call	#__system___getiolock_0145
011d8     16 73 02 F6 | 	mov	arg01, result1
011dc     70 50 B0 FD | 	call	#__system___lockmem
011e0     00 2C 06 F6 | 	mov	result1, #0
011e4     42 9D 02 F6 | 	mov	local15, local03
011e8     02 9C 66 F0 | 	shl	local15, #2
011ec     04 00 00 FF 
011f0     64 0E 06 F1 | 	add	objptr, ##2148
011f4     07 9D 02 F1 | 	add	local15, objptr
011f8     4E 75 02 FB | 	rdlong	arg02, local15
011fc     00 72 06 F6 | 	mov	arg01, #0
01200     00 76 06 F6 | 	mov	arg03, #0
01204     04 00 00 FF 
01208     64 0E 86 F1 | 	sub	objptr, ##2148
0120c     D8 53 B0 FD | 	call	#__system___basic_print_string
01210     00 72 06 F6 | 	mov	arg01, #0
01214     0A 74 06 F6 | 	mov	arg02, #10
01218     00 76 06 F6 | 	mov	arg03, #0
0121c     7C 53 B0 FD | 	call	#__system___basic_print_char
01220     01 2C 06 F6 | 	mov	result1, #1
01224     00 72 06 F6 | 	mov	arg01, #0
01228     70 67 B0 FD | 	call	#__system___getiolock_0145
0122c     16 01 68 FC | 	wrlong	#0, result1
01230     00 2C 06 F6 | 	mov	result1, #0
01234     42 75 02 F6 | 	mov	arg02, local03
01238     0B 74 86 F1 | 	sub	arg02, #11
0123c                 | ' 
0123c                 | ' ''---------- Set the (x,y) position of cursor
0123c                 | ' 
0123c                 | ' cursor_x:=x
0123c     34 0E 06 F1 | 	add	objptr, #52
01240     07 A1 48 FC | 	wrbyte	#80, objptr
01244                 | ' cursor_y:=y
01244     01 0E 06 F1 | 	add	objptr, #1
01248     07 75 42 FC | 	wrbyte	arg02, objptr
0124c     35 0E 86 F1 | 	sub	objptr, #53
01250     00 72 06 F6 | 	mov	arg01, #0
01254     44 67 B0 FD | 	call	#__system___getiolock_0145
01258     16 73 02 F6 | 	mov	arg01, result1
0125c     F0 4F B0 FD | 	call	#__system___lockmem
01260     00 2C 06 F6 | 	mov	result1, #0
01264     04 00 00 FF 
01268     1C 0F 06 F1 | 	add	objptr, ##2332
0126c     07 75 02 FB | 	rdlong	arg02, objptr
01270     04 00 00 FF 
01274     1C 0F 86 F1 | 	sub	objptr, ##2332
01278     00 72 06 F6 | 	mov	arg01, #0
0127c     00 76 06 F6 | 	mov	arg03, #0
01280     0A 78 06 F6 | 	mov	arg04, #10
01284     A8 53 B0 FD | 	call	#__system___basic_print_integer
01288     00 72 06 F6 | 	mov	arg01, #0
0128c     0A 74 06 F6 | 	mov	arg02, #10
01290     00 76 06 F6 | 	mov	arg03, #0
01294     04 53 B0 FD | 	call	#__system___basic_print_char
01298     01 2C 06 F6 | 	mov	result1, #1
0129c     00 72 06 F6 | 	mov	arg01, #0
012a0     F8 66 B0 FD | 	call	#__system___getiolock_0145
012a4     16 01 68 FC | 	wrlong	#0, result1
012a8     00 2C 06 F6 | 	mov	result1, #0
012ac     42 75 02 F6 | 	mov	arg02, local03
012b0     0B 74 86 F1 | 	sub	arg02, #11
012b4                 | ' 
012b4                 | ' ''---------- Set the (x,y) position of cursor
012b4                 | ' 
012b4                 | ' cursor_x:=x
012b4     34 0E 06 F1 | 	add	objptr, #52
012b8     07 AF 48 FC | 	wrbyte	#87, objptr
012bc                 | ' cursor_y:=y
012bc     01 0E 06 F1 | 	add	objptr, #1
012c0     07 75 42 FC | 	wrbyte	arg02, objptr
012c4     35 0E 86 F1 | 	sub	objptr, #53
012c8     00 72 06 F6 | 	mov	arg01, #0
012cc     CC 66 B0 FD | 	call	#__system___getiolock_0145
012d0     16 73 02 F6 | 	mov	arg01, result1
012d4     78 4F B0 FD | 	call	#__system___lockmem
012d8     00 2C 06 F6 | 	mov	result1, #0
012dc     04 00 00 FF 
012e0     28 0F 06 F1 | 	add	objptr, ##2344
012e4     07 75 02 FB | 	rdlong	arg02, objptr
012e8     04 00 00 FF 
012ec     28 0F 86 F1 | 	sub	objptr, ##2344
012f0     00 72 06 F6 | 	mov	arg01, #0
012f4     00 76 06 F6 | 	mov	arg03, #0
012f8     0A 78 06 F6 | 	mov	arg04, #10
012fc     30 53 B0 FD | 	call	#__system___basic_print_integer
01300     00 72 06 F6 | 	mov	arg01, #0
01304     0A 74 06 F6 | 	mov	arg02, #10
01308     00 76 06 F6 | 	mov	arg03, #0
0130c     8C 52 B0 FD | 	call	#__system___basic_print_char
01310     01 2C 06 F6 | 	mov	result1, #1
01314     00 72 06 F6 | 	mov	arg01, #0
01318     80 66 B0 FD | 	call	#__system___getiolock_0145
0131c     16 01 68 FC | 	wrlong	#0, result1
01320     00 2C 06 F6 | 	mov	result1, #0
01324     42 75 02 F6 | 	mov	arg02, local03
01328     0B 74 86 F1 | 	sub	arg02, #11
0132c                 | ' 
0132c                 | ' ''---------- Set the (x,y) position of cursor
0132c                 | ' 
0132c                 | ' cursor_x:=x
0132c     34 0E 06 F1 | 	add	objptr, #52
01330     07 B5 48 FC | 	wrbyte	#90, objptr
01334                 | ' cursor_y:=y
01334     01 0E 06 F1 | 	add	objptr, #1
01338     07 75 42 FC | 	wrbyte	arg02, objptr
0133c     35 0E 86 F1 | 	sub	objptr, #53
01340     00 72 06 F6 | 	mov	arg01, #0
01344     54 66 B0 FD | 	call	#__system___getiolock_0145
01348     16 73 02 F6 | 	mov	arg01, result1
0134c     00 4F B0 FD | 	call	#__system___lockmem
01350     00 2C 06 F6 | 	mov	result1, #0
01354     04 00 00 FF 
01358     2C 0F 06 F1 | 	add	objptr, ##2348
0135c     07 75 02 FB | 	rdlong	arg02, objptr
01360     04 00 00 FF 
01364     2C 0F 86 F1 | 	sub	objptr, ##2348
01368     00 72 06 F6 | 	mov	arg01, #0
0136c     00 76 06 F6 | 	mov	arg03, #0
01370     0A 78 06 F6 | 	mov	arg04, #10
01374     B8 52 B0 FD | 	call	#__system___basic_print_integer
01378     00 72 06 F6 | 	mov	arg01, #0
0137c     0A 74 06 F6 | 	mov	arg02, #10
01380     00 76 06 F6 | 	mov	arg03, #0
01384     14 52 B0 FD | 	call	#__system___basic_print_char
01388     01 2C 06 F6 | 	mov	result1, #1
0138c     00 72 06 F6 | 	mov	arg01, #0
01390     08 66 B0 FD | 	call	#__system___getiolock_0145
01394     16 01 68 FC | 	wrlong	#0, result1
01398     00 2C 06 F6 | 	mov	result1, #0
0139c     42 75 02 F6 | 	mov	arg02, local03
013a0     0B 74 86 F1 | 	sub	arg02, #11
013a4                 | ' 
013a4                 | ' ''---------- Set the (x,y) position of cursor
013a4                 | ' 
013a4                 | ' cursor_x:=x
013a4     34 0E 06 F1 | 	add	objptr, #52
013a8     07 BB 48 FC | 	wrbyte	#93, objptr
013ac                 | ' cursor_y:=y
013ac     01 0E 06 F1 | 	add	objptr, #1
013b0     07 75 42 FC | 	wrbyte	arg02, objptr
013b4     35 0E 86 F1 | 	sub	objptr, #53
013b8     00 72 06 F6 | 	mov	arg01, #0
013bc     DC 65 B0 FD | 	call	#__system___getiolock_0145
013c0     16 73 02 F6 | 	mov	arg01, result1
013c4     88 4E B0 FD | 	call	#__system___lockmem
013c8     00 2C 06 F6 | 	mov	result1, #0
013cc     04 00 00 FF 
013d0     20 0F 06 F1 | 	add	objptr, ##2336
013d4     07 75 02 FB | 	rdlong	arg02, objptr
013d8     04 00 00 FF 
013dc     20 0F 86 F1 | 	sub	objptr, ##2336
013e0     00 72 06 F6 | 	mov	arg01, #0
013e4     00 76 06 F6 | 	mov	arg03, #0
013e8     0A 78 06 F6 | 	mov	arg04, #10
013ec     40 52 B0 FD | 	call	#__system___basic_print_integer
013f0     00 72 06 F6 | 	mov	arg01, #0
013f4     0A 74 06 F6 | 	mov	arg02, #10
013f8     00 76 06 F6 | 	mov	arg03, #0
013fc     9C 51 B0 FD | 	call	#__system___basic_print_char
01400     01 2C 06 F6 | 	mov	result1, #1
01404     00 72 06 F6 | 	mov	arg01, #0
01408     90 65 B0 FD | 	call	#__system___getiolock_0145
0140c     16 01 68 FC | 	wrlong	#0, result1
01410     00 2C 06 F6 | 	mov	result1, #0
01414     42 75 02 F6 | 	mov	arg02, local03
01418     0B 74 86 F1 | 	sub	arg02, #11
0141c                 | ' 
0141c                 | ' ''---------- Set the (x,y) position of cursor
0141c                 | ' 
0141c                 | ' cursor_x:=x
0141c     34 0E 06 F1 | 	add	objptr, #52
01420     07 C7 48 FC | 	wrbyte	#99, objptr
01424                 | ' cursor_y:=y
01424     01 0E 06 F1 | 	add	objptr, #1
01428     07 75 42 FC | 	wrbyte	arg02, objptr
0142c     35 0E 86 F1 | 	sub	objptr, #53
01430     00 72 06 F6 | 	mov	arg01, #0
01434     64 65 B0 FD | 	call	#__system___getiolock_0145
01438     16 73 02 F6 | 	mov	arg01, result1
0143c     10 4E B0 FD | 	call	#__system___lockmem
01440     00 2C 06 F6 | 	mov	result1, #0
01444     04 00 00 FF 
01448     24 0F 06 F1 | 	add	objptr, ##2340
0144c     07 75 02 FB | 	rdlong	arg02, objptr
01450     04 00 00 FF 
01454     24 0F 86 F1 | 	sub	objptr, ##2340
01458     00 72 06 F6 | 	mov	arg01, #0
0145c     00 76 06 F6 | 	mov	arg03, #0
01460     0A 78 06 F6 | 	mov	arg04, #10
01464     C8 51 B0 FD | 	call	#__system___basic_print_integer
01468     00 72 06 F6 | 	mov	arg01, #0
0146c     0A 74 06 F6 | 	mov	arg02, #10
01470     00 76 06 F6 | 	mov	arg03, #0
01474     24 51 B0 FD | 	call	#__system___basic_print_char
01478     01 2C 06 F6 | 	mov	result1, #1
0147c     00 72 06 F6 | 	mov	arg01, #0
01480     18 65 B0 FD | 	call	#__system___getiolock_0145
01484     16 01 68 FC | 	wrlong	#0, result1
01488     00 2C 06 F6 | 	mov	result1, #0
0148c                 | LR__0006
0148c     01 84 06 F1 | 	add	local03, #1
01490     A4 F7 9F FD | 	jmp	#LR__0002
01494                 | LR__0007
01494                 | ' print
01494     00 72 06 F6 | 	mov	arg01, #0
01498     00 65 B0 FD | 	call	#__system___getiolock_0145
0149c     16 73 02 F6 | 	mov	arg01, result1
014a0     AC 4D B0 FD | 	call	#__system___lockmem
014a4     00 2C 06 F6 | 	mov	result1, #0
014a8     00 72 06 F6 | 	mov	arg01, #0
014ac     0A 74 06 F6 | 	mov	arg02, #10
014b0     00 76 06 F6 | 	mov	arg03, #0
014b4     E4 50 B0 FD | 	call	#__system___basic_print_char
014b8     01 2C 06 F6 | 	mov	result1, #1
014bc     00 72 06 F6 | 	mov	arg01, #0
014c0     D8 64 B0 FD | 	call	#__system___getiolock_0145
014c4     16 01 68 FC | 	wrlong	#0, result1
014c8     00 2C 06 F6 | 	mov	result1, #0
014cc     AF F0 03 F6 | 	mov	ptra, fp
014d0     BF 00 A0 FD | 	call	#popregs_
014d4                 | _getinfo_ret
014d4     2D 00 64 FD | 	ret
014d8                 | 
014d8                 | _program
014d8     0C 5A 05 F6 | 	mov	COUNT_, #12
014dc     B0 00 A0 FD | 	call	#pushregs_
014e0     EC 0E 06 F1 | 	add	objptr, #236
014e4     E8 1F B0 FD | 	call	#_retrocog_spin2_start
014e8     02 00 00 FF 
014ec     40 0E 06 F1 | 	add	objptr, ##1088
014f0     07 2D 62 FC | 	wrlong	result1, objptr
014f4                 | ' c=rm.start()
014f4                 | ' return c
014f4     02 00 00 FF 
014f8     2C 0F 86 F1 | 	sub	objptr, ##1324
014fc     40 72 06 F6 | 	mov	arg01, #64
01500     00 74 06 F6 | 	mov	arg02, #0
01504     60 F3 BF FD | 	call	#_startvideo
01508     9A 72 06 F6 | 	mov	arg01, #154
0150c     93 74 06 F6 | 	mov	arg02, #147
01510     9C 0C B0 FD | 	call	#_hng030rm_spin2_cls
01514     02 00 00 FF 
01518     30 0F 06 F1 | 	add	objptr, ##1328
0151c     07 01 69 FC | 	wrlong	#128, objptr
01520     04 0E 06 F1 | 	add	objptr, #4
01524     07 7B 68 FC | 	wrlong	#61, objptr
01528     04 0E 06 F1 | 	add	objptr, #4
0152c     07 79 68 FC | 	wrlong	#60, objptr
01530     04 0E 06 F1 | 	add	objptr, #4
01534     07 77 68 FC | 	wrlong	#59, objptr
01538     04 0E 06 F1 | 	add	objptr, #4
0153c     07 75 68 FC | 	wrlong	#58, objptr
01540     04 0E 06 F1 | 	add	objptr, #4
01544     07 07 68 FC | 	wrlong	#3, objptr
01548     42 00 00 FF 
0154c     DD 81 06 F6 | 	mov	local01, ##@LR__0457
01550     01 00 00 FF 
01554     AC 0F 06 F1 | 	add	objptr, ##940
01558     07 81 62 FC | 	wrlong	local01, objptr
0155c     04 00 00 FF 
01560     F0 0E 86 F1 | 	sub	objptr, ##2288
01564     0C 73 02 F6 | 	mov	arg01, ptr__dat__
01568     40 F3 BF FD | 	call	#_addr
0156c     04 00 00 FF 
01570     F4 0E 06 F1 | 	add	objptr, ##2292
01574     07 2D 62 FC | 	wrlong	result1, objptr
01578     16 73 02 F6 | 	mov	arg01, result1
0157c     00 74 06 F6 | 	mov	arg02, #0
01580     01 00 00 FF 
01584     AC 0F 86 F1 | 	sub	objptr, ##940
01588     10 26 B0 FD | 	call	#_trackerplayer_spin2_initModule
0158c     01 74 06 F6 | 	mov	arg02, #1
01590                 | ' 
01590                 | ' ''---------- Set the (x,y) position of cursor
01590                 | ' 
01590                 | ' cursor_x:=x
01590     02 00 00 FF 
01594     14 0F 86 F1 | 	sub	objptr, ##1300
01598     07 03 48 FC | 	wrbyte	#1, objptr
0159c                 | ' cursor_y:=y
0159c     01 0E 06 F1 | 	add	objptr, #1
015a0     07 03 48 FC | 	wrbyte	#1, objptr
015a4                 | ' 
015a4                 | ' emptystr$="                      "
015a4                 | ' 
015a4                 | ' ma=addr(module)
015a4                 | ' tracker.initmodule(ma,0)
015a4                 | ' 
015a4                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
015a4     04 00 00 FF 
015a8     BF 0E 06 F1 | 	add	objptr, ##2239
015ac     07 83 02 FB | 	rdlong	local02, objptr
015b0     41 85 02 F6 | 	mov	local03, local02
015b4     04 00 00 FF 
015b8     F4 0E 86 F1 | 	sub	objptr, ##2292
015bc     14 84 06 F1 | 	add	local03, #20
015c0                 | LR__0008
015c0     42 83 5A F2 | 	cmps	local02, local03 wcz
015c4     40 00 90 3D |  if_ae	jmp	#LR__0009
015c8     00 72 06 F6 | 	mov	arg01, #0
015cc     CC 63 B0 FD | 	call	#__system___getiolock_0145
015d0     16 73 02 F6 | 	mov	arg01, result1
015d4     78 4C B0 FD | 	call	#__system___lockmem
015d8                 | ' asm
015d8     41 2D C2 FA | 	rdbyte	result1, local02
015dc                 | ' return r
015dc     16 75 02 F6 | 	mov	arg02, result1
015e0     07 74 46 F7 | 	zerox	arg02, #7
015e4     00 72 06 F6 | 	mov	arg01, #0
015e8     00 76 06 F6 | 	mov	arg03, #0
015ec     AC 4F B0 FD | 	call	#__system___basic_print_char
015f0     00 72 06 F6 | 	mov	arg01, #0
015f4     A4 63 B0 FD | 	call	#__system___getiolock_0145
015f8     16 01 68 FC | 	wrlong	#0, result1
015fc     00 2C 06 F6 | 	mov	result1, #0
01600     01 82 06 F1 | 	add	local02, #1
01604     B8 FF 9F FD | 	jmp	#LR__0008
01608                 | LR__0009
01608     04 00 00 FF 
0160c     F8 0E 06 F1 | 	add	objptr, ##2296
01610     07 1F 68 FC | 	wrlong	#15, objptr
01614                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
01614     00 80 06 F6 | 	mov	local01, #0
01618     04 0E 86 F1 | 	sub	objptr, #4
0161c     07 73 02 FB | 	rdlong	arg01, objptr
01620     02 00 00 FF 
01624     38 72 06 F1 | 	add	arg01, ##1080
01628                 | ' asm
01628     39 87 C2 FA | 	rdbyte	local04, arg01
0162c                 | ' return r
0162c     07 86 46 F7 | 	zerox	local04, #7
01630     4D 86 0E F2 | 	cmp	local04, #77 wz
01634     01 80 66 A6 |  if_e	neg	local01, #1
01638     00 88 06 F6 | 	mov	local05, #0
0163c     07 73 02 FB | 	rdlong	arg01, objptr
01640     04 00 00 FF 
01644     F4 0E 86 F1 | 	sub	objptr, ##2292
01648     02 00 00 FF 
0164c     3A 72 06 F1 | 	add	arg01, ##1082
01650                 | ' asm
01650     39 2D C2 FA | 	rdbyte	result1, arg01
01654                 | ' return r
01654     16 8B 02 F6 | 	mov	local06, result1
01658     07 8A 46 F7 | 	zerox	local06, #7
0165c     4B 8A 0E F2 | 	cmp	local06, #75 wz
01660     01 88 66 A6 |  if_e	neg	local05, #1
01664     44 81 CA F7 | 	test	local01, local05 wz
01668     04 00 00 5F 
0166c     F8 0E 06 51 |  if_ne	add	objptr, ##2296
01670     07 3F 68 5C |  if_ne	wrlong	#31, objptr
01674     04 00 00 5F 
01678     F8 0E 86 51 |  if_ne	sub	objptr, ##2296
0167c     02 74 06 F6 | 	mov	arg02, #2
01680                 | ' 
01680                 | ' ''---------- Set the (x,y) position of cursor
01680                 | ' 
01680                 | ' cursor_x:=x
01680     34 0E 06 F1 | 	add	objptr, #52
01684     07 03 48 FC | 	wrbyte	#1, objptr
01688                 | ' cursor_y:=y
01688     01 0E 06 F1 | 	add	objptr, #1
0168c     07 05 48 FC | 	wrbyte	#2, objptr
01690     35 0E 86 F1 | 	sub	objptr, #53
01694                 | ' position 1,2 : print samples;" ";"samples module"
01694     00 72 06 F6 | 	mov	arg01, #0
01698     00 63 B0 FD | 	call	#__system___getiolock_0145
0169c     16 73 02 F6 | 	mov	arg01, result1
016a0     AC 4B B0 FD | 	call	#__system___lockmem
016a4     00 2C 06 F6 | 	mov	result1, #0
016a8     04 00 00 FF 
016ac     F8 0E 06 F1 | 	add	objptr, ##2296
016b0     07 75 02 FB | 	rdlong	arg02, objptr
016b4     04 00 00 FF 
016b8     F8 0E 86 F1 | 	sub	objptr, ##2296
016bc     00 72 06 F6 | 	mov	arg01, #0
016c0     00 76 06 F6 | 	mov	arg03, #0
016c4     0A 78 06 F6 | 	mov	arg04, #10
016c8     64 4F B0 FD | 	call	#__system___basic_print_integer
016cc     42 00 00 FF 
016d0     F4 75 06 F6 | 	mov	arg02, ##@LR__0458
016d4     00 72 06 F6 | 	mov	arg01, #0
016d8     00 76 06 F6 | 	mov	arg03, #0
016dc     08 4F B0 FD | 	call	#__system___basic_print_string
016e0     42 00 00 FF 
016e4     F6 75 06 F6 | 	mov	arg02, ##@LR__0459
016e8     00 72 06 F6 | 	mov	arg01, #0
016ec     00 76 06 F6 | 	mov	arg03, #0
016f0     F4 4E B0 FD | 	call	#__system___basic_print_string
016f4     00 72 06 F6 | 	mov	arg01, #0
016f8     0A 74 06 F6 | 	mov	arg02, #10
016fc     00 76 06 F6 | 	mov	arg03, #0
01700     98 4E B0 FD | 	call	#__system___basic_print_char
01704     01 2C 06 F6 | 	mov	result1, #1
01708     00 72 06 F6 | 	mov	arg01, #0
0170c     8C 62 B0 FD | 	call	#__system___getiolock_0145
01710     16 01 68 FC | 	wrlong	#0, result1
01714     00 2C 06 F6 | 	mov	result1, #0
01718     04 00 00 FF 
0171c     F4 0E 06 F1 | 	add	objptr, ##2292
01720     07 73 02 FB | 	rdlong	arg01, objptr
01724     04 0E 06 F1 | 	add	objptr, #4
01728     07 75 02 FB | 	rdlong	arg02, objptr
0172c     04 00 00 FF 
01730     F8 0E 86 F1 | 	sub	objptr, ##2296
01734     10 F4 BF FD | 	call	#_getinfo
01738     03 00 00 FF 
0173c     44 0F 06 F1 | 	add	objptr, ##1860
01740     C0 46 B0 FD | 	call	#_audio019_spin2_start
01744     17 87 02 F6 | 	mov	local04, result2
01748     A4 0F 06 F1 | 	add	objptr, #420
0174c     07 2D 62 FC | 	wrlong	result1, objptr
01750     04 0E 06 F1 | 	add	objptr, #4
01754     07 87 62 FC | 	wrlong	local04, objptr
01758     10 0E 06 F1 | 	add	objptr, #16
0175c     07 01 68 FC | 	wrlong	#0, objptr
01760     04 0E 06 F1 | 	add	objptr, #4
01764     07 01 68 FC | 	wrlong	#0, objptr
01768     04 0E 06 F1 | 	add	objptr, #4
0176c     07 01 68 FC | 	wrlong	#0, objptr
01770     04 0E 06 F1 | 	add	objptr, #4
01774     07 01 68 FC | 	wrlong	#0, objptr
01778     04 00 00 FF 
0177c     08 0F 86 F1 | 	sub	objptr, ##2312
01780                 | ' getinfo(ma,samples)
01780                 | ' 
01780                 | ' cog,base=paula.start()
01780                 | ' 
01780                 | ' old1=0 : old2=0 :old3=0 : old4=0
01780                 | ' 
01780                 | ' do
01780                 | LR__0010
01780     01 72 06 F6 | 	mov	arg01, #1
01784     90 09 B0 FD | 	call	#_hng030rm_spin2_waitvbl
01788     02 00 00 FF 
0178c     48 0F 06 F1 | 	add	objptr, ##1352
01790     E8 2A B0 FD | 	call	#_trackerplayer_spin2_tick
01794     02 00 00 FF 
01798     2C 0F 86 F1 | 	sub	objptr, ##1324
0179c     07 73 02 FB | 	rdlong	arg01, objptr
017a0     04 00 00 FF 
017a4     F0 0E 06 F1 | 	add	objptr, ##2288
017a8     07 73 62 FC | 	wrlong	arg01, objptr
017ac                 | ' asm
017ac     39 8D 02 FB | 	rdlong	local07, arg01
017b0                 | ' return r
017b0     04 0E 06 F1 | 	add	objptr, #4
017b4     07 8D 62 FC | 	wrlong	local07, objptr
017b8     04 00 00 FF 
017bc     10 0F 86 F1 | 	sub	objptr, ##2320
017c0                 | ' 'channel+0  long current spl pointer 
017c0                 | ' 'channel+4  long sample
017c0                 | ' 'channel+8  long sample start - bit31=1 when 16 bit spl
017c0                 | ' 'channel+12 long loop start
017c0                 | ' 'channel+16 long loop end
017c0                 | ' 'channel+20 word volume
017c0                 | ' 'channel+22 word pan
017c0                 | ' 'channel+24 word synthfreq
017c0                 | ' 'channel+26 word skip
017c0                 | ' 'channel+28 long reserved
017c0                 | ' 
017c0                 | '     waitvbl
017c0                 | '     tracker.tick
017c0                 | '     
017c0                 | '     dltest=v030.dl_ptr
017c0                 | '     dlentry=lpeek(dltest)
017c0                 | '     for i=0 to 539: lpoke dltest+4*i, lpeek(dltest+4*i+4) :next i
017c0     00 82 06 F6 | 	mov	local02, #0
017c4     8C E8 9F FE | 	loc	pa,	#(@LR__0012-@LR__0011)
017c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
017cc                 | LR__0011
017cc     04 00 00 FF 
017d0     0C 0F 06 F1 | 	add	objptr, ##2316
017d4     07 8F 02 FB | 	rdlong	local08, objptr
017d8     41 8D 02 F6 | 	mov	local07, local02
017dc     02 8C 66 F0 | 	shl	local07, #2
017e0     46 8F 02 F1 | 	add	local08, local07
017e4     07 73 02 FB | 	rdlong	arg01, objptr
017e8     04 00 00 FF 
017ec     0C 0F 86 F1 | 	sub	objptr, ##2316
017f0     41 89 02 F6 | 	mov	local05, local02
017f4     02 88 66 F0 | 	shl	local05, #2
017f8     44 73 02 F1 | 	add	arg01, local05
017fc     04 72 06 F1 | 	add	arg01, #4
01800                 | ' asm
01800     39 2D 02 FB | 	rdlong	result1, arg01
01804                 | ' return r
01804     16 75 02 F6 | 	mov	arg02, result1
01808     47 73 02 F6 | 	mov	arg01, local08
0180c                 | ' asm
0180c     39 75 62 FC | 	wrlong	arg02, arg01
01810     01 82 06 F1 | 	add	local02, #1
01814     01 00 00 FF 
01818     1C 82 5E F2 | 	cmps	local02, ##540 wcz
0181c     AC FF 9F CD |  if_b	jmp	#LR__0011
01820                 | LR__0012
01820     04 00 00 FF 
01824     0C 0F 06 F1 | 	add	objptr, ##2316
01828     07 73 02 FB | 	rdlong	arg01, objptr
0182c     04 00 00 FF 
01830     6C 72 06 F1 | 	add	arg01, ##2156
01834     04 0E 06 F1 | 	add	objptr, #4
01838     07 75 02 FB | 	rdlong	arg02, objptr
0183c                 | ' asm
0183c     39 75 62 FC | 	wrlong	arg02, arg01
01840                 | '     lpoke dltest+4*539,dlentry 
01840                 | '      
01840                 | '     if tracker.trigger(0)<>old1 then 
01840     D2 0F 86 F1 | 	sub	objptr, #466
01844     07 81 C2 FA | 	rdbyte	local01, objptr
01848     BE 0F 06 F1 | 	add	objptr, #446
0184c     07 8D 02 FB | 	rdlong	local07, objptr
01850     04 00 00 FF 
01854     FC 0E 86 F1 | 	sub	objptr, ##2300
01858     46 81 0A F2 | 	cmp	local01, local07 wz
0185c     8C 00 90 AD |  if_e	jmp	#LR__0013
01860     03 00 00 FF 
01864     3E 0F 06 F1 | 	add	objptr, ##1854
01868     07 81 C2 FA | 	rdbyte	local01, objptr
0186c     BE 0F 06 F1 | 	add	objptr, #446
01870     07 81 62 FC | 	wrlong	local01, objptr
01874     10 0E 86 F1 | 	sub	objptr, #16
01878     07 73 02 FB | 	rdlong	arg01, objptr
0187c     08 72 06 F1 | 	add	arg01, #8
01880     01 00 00 FF 
01884     FD 0E 86 F1 | 	sub	objptr, ##765
01888     07 75 02 FB | 	rdlong	arg02, objptr
0188c     1E 74 26 F4 | 	bith	arg02, #30
01890                 | ' asm
01890     39 75 62 FC | 	wrlong	arg02, arg01
01894     01 00 00 FF 
01898     FD 0E 06 F1 | 	add	objptr, ##765
0189c     07 73 02 FB | 	rdlong	arg01, objptr
018a0     0C 72 06 F1 | 	add	arg01, #12
018a4     01 00 00 FF 
018a8     E9 0E 86 F1 | 	sub	objptr, ##745
018ac     07 75 E2 FA | 	rdword	arg02, objptr
018b0     08 0E 06 F1 | 	add	objptr, #8
018b4     07 91 02 FB | 	rdlong	local09, objptr
018b8     48 75 82 F1 | 	sub	arg02, local09
018bc                 | ' asm
018bc     39 75 62 FC | 	wrlong	arg02, arg01
018c0     01 00 00 FF 
018c4     E1 0E 06 F1 | 	add	objptr, ##737
018c8     07 73 02 FB | 	rdlong	arg01, objptr
018cc     10 72 06 F1 | 	add	arg01, #16
018d0     01 00 00 FF 
018d4     E9 0E 86 F1 | 	sub	objptr, ##745
018d8     07 75 E2 FA | 	rdword	arg02, objptr
018dc     03 00 00 FF 
018e0     03 0E 86 F1 | 	sub	objptr, ##1539
018e4     0F 74 46 F7 | 	zerox	arg02, #15
018e8                 | ' asm
018e8     39 75 62 FC | 	wrlong	arg02, arg01
018ec                 | LR__0013
018ec     04 00 00 FF 
018f0     EC 0E 06 F1 | 	add	objptr, ##2284
018f4     07 73 02 FB | 	rdlong	arg01, objptr
018f8     14 72 06 F1 | 	add	arg01, #20
018fc     01 00 00 FF 
01900     A5 0E 86 F1 | 	sub	objptr, ##677
01904     07 8F 02 FB | 	rdlong	local08, objptr
01908     10 0E 06 F1 | 	add	objptr, #16
0190c     07 91 02 FB | 	rdlong	local09, objptr
01910     48 8F 02 F1 | 	add	local08, local09
01914     27 0F 86 F1 | 	sub	objptr, #295
01918     07 93 02 FB | 	rdlong	local10, objptr
0191c     49 8F 02 FD | 	qmul	local08, local10
01920     18 74 62 FD | 	getqx	arg02
01924                 | ' asm
01924     39 75 52 FC | 	wrword	arg02, arg01
01928     01 00 00 FF 
0192c     BC 0F 06 F1 | 	add	objptr, ##956
01930     07 73 02 FB | 	rdlong	arg01, objptr
01934     16 72 06 F1 | 	add	arg01, #22
01938                 | ' asm
01938     0C 00 80 FF 
0193c     39 01 58 FC | 	wrword	##6144, arg01
01940     07 73 02 FB | 	rdlong	arg01, objptr
01944     18 72 06 F1 | 	add	arg01, #24
01948     01 00 00 FF 
0194c     C5 0E 86 F1 | 	sub	objptr, ##709
01950     07 75 02 FB | 	rdlong	arg02, objptr
01954     10 0E 06 F1 | 	add	objptr, #16
01958     07 91 02 FB | 	rdlong	local09, objptr
0195c     48 75 02 F1 | 	add	arg02, local09
01960                 | ' asm
01960     39 75 52 FC | 	wrword	arg02, arg01
01964     01 00 00 FF 
01968     B5 0E 06 F1 | 	add	objptr, ##693
0196c     07 73 02 FB | 	rdlong	arg01, objptr
01970     1A 72 06 F1 | 	add	arg01, #26
01974                 | ' asm
01974     39 03 58 FC | 	wrword	#1, arg01
01978                 | '   
01978                 | '   
01978                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01978                 | '     dpoke base+22, 8192-2048
01978                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
01978                 | '     dpoke base+26, 1
01978                 | ' 
01978                 | '  
01978                 | '     if tracker.trigger(1) <> old2  then
01978     AD 0F 86 F1 | 	sub	objptr, #429
0197c     07 81 C2 FA | 	rdbyte	local01, objptr
01980     C1 0F 06 F1 | 	add	objptr, #449
01984     07 8D 02 FB | 	rdlong	local07, objptr
01988     04 00 00 FF 
0198c     00 0F 86 F1 | 	sub	objptr, ##2304
01990     46 81 0A F2 | 	cmp	local01, local07 wz
01994     9C 00 90 AD |  if_e	jmp	#LR__0014
01998     03 00 00 FF 
0199c     3F 0F 06 F1 | 	add	objptr, ##1855
019a0     07 81 C2 FA | 	rdbyte	local01, objptr
019a4     C1 0F 06 F1 | 	add	objptr, #449
019a8     07 81 62 FC | 	wrlong	local01, objptr
019ac     14 0E 86 F1 | 	sub	objptr, #20
019b0     07 73 02 FB | 	rdlong	arg01, objptr
019b4     28 72 06 F1 | 	add	arg01, #40
019b8     01 00 00 FF 
019bc     F9 0E 86 F1 | 	sub	objptr, ##761
019c0     07 75 02 FB | 	rdlong	arg02, objptr
019c4     1E 74 26 F4 | 	bith	arg02, #30
019c8                 | ' asm
019c8     39 75 62 FC | 	wrlong	arg02, arg01
019cc     20 72 06 F6 | 	mov	arg01, #32
019d0     01 00 00 FF 
019d4     F9 0E 06 F1 | 	add	objptr, ##761
019d8     07 87 02 FB | 	rdlong	local04, objptr
019dc     43 73 02 F1 | 	add	arg01, local04
019e0     0C 72 06 F1 | 	add	arg01, #12
019e4     01 00 00 FF 
019e8     E7 0E 86 F1 | 	sub	objptr, ##743
019ec     07 75 E2 FA | 	rdword	arg02, objptr
019f0     0A 0E 06 F1 | 	add	objptr, #10
019f4     07 89 02 FB | 	rdlong	local05, objptr
019f8     44 75 82 F1 | 	sub	arg02, local05
019fc                 | ' asm
019fc     39 75 62 FC | 	wrlong	arg02, arg01
01a00     20 72 06 F6 | 	mov	arg01, #32
01a04     01 00 00 FF 
01a08     DD 0E 06 F1 | 	add	objptr, ##733
01a0c     07 87 02 FB | 	rdlong	local04, objptr
01a10     43 73 02 F1 | 	add	arg01, local04
01a14     10 72 06 F1 | 	add	arg01, #16
01a18     01 00 00 FF 
01a1c     E7 0E 86 F1 | 	sub	objptr, ##743
01a20     07 75 E2 FA | 	rdword	arg02, objptr
01a24     03 00 00 FF 
01a28     05 0E 86 F1 | 	sub	objptr, ##1541
01a2c     0F 74 46 F7 | 	zerox	arg02, #15
01a30                 | ' asm
01a30     39 75 62 FC | 	wrlong	arg02, arg01
01a34                 | LR__0014
01a34     20 72 06 F6 | 	mov	arg01, #32
01a38     04 00 00 FF 
01a3c     EC 0E 06 F1 | 	add	objptr, ##2284
01a40     07 87 02 FB | 	rdlong	local04, objptr
01a44     43 73 02 F1 | 	add	arg01, local04
01a48     14 72 06 F1 | 	add	arg01, #20
01a4c     01 00 00 FF 
01a50     A1 0E 86 F1 | 	sub	objptr, ##673
01a54     07 95 02 FB | 	rdlong	local11, objptr
01a58     10 0E 06 F1 | 	add	objptr, #16
01a5c     07 89 02 FB | 	rdlong	local05, objptr
01a60     44 95 02 F1 | 	add	local11, local05
01a64     2B 0F 86 F1 | 	sub	objptr, #299
01a68     07 97 02 FB | 	rdlong	local12, objptr
01a6c     4B 95 02 FD | 	qmul	local11, local12
01a70     18 74 62 FD | 	getqx	arg02
01a74                 | ' asm
01a74     39 75 52 FC | 	wrword	arg02, arg01
01a78     20 72 06 F6 | 	mov	arg01, #32
01a7c     01 00 00 FF 
01a80     BC 0F 06 F1 | 	add	objptr, ##956
01a84     07 87 02 FB | 	rdlong	local04, objptr
01a88     43 73 02 F1 | 	add	arg01, local04
01a8c     16 72 06 F1 | 	add	arg01, #22
01a90                 | ' asm
01a90     14 00 80 FF 
01a94     39 01 58 FC | 	wrword	##10240, arg01
01a98     20 72 06 F6 | 	mov	arg01, #32
01a9c     07 87 02 FB | 	rdlong	local04, objptr
01aa0     43 73 02 F1 | 	add	arg01, local04
01aa4     18 72 06 F1 | 	add	arg01, #24
01aa8     01 00 00 FF 
01aac     C1 0E 86 F1 | 	sub	objptr, ##705
01ab0     07 75 02 FB | 	rdlong	arg02, objptr
01ab4     10 0E 06 F1 | 	add	objptr, #16
01ab8     07 89 02 FB | 	rdlong	local05, objptr
01abc     44 75 02 F1 | 	add	arg02, local05
01ac0                 | ' asm
01ac0     39 75 52 FC | 	wrword	arg02, arg01
01ac4     20 72 06 F6 | 	mov	arg01, #32
01ac8     01 00 00 FF 
01acc     B1 0E 06 F1 | 	add	objptr, ##689
01ad0     07 87 02 FB | 	rdlong	local04, objptr
01ad4     43 73 02 F1 | 	add	arg01, local04
01ad8     1A 72 06 F1 | 	add	arg01, #26
01adc                 | ' asm
01adc     39 03 58 FC | 	wrword	#1, arg01
01ae0                 | '       
01ae0                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01ae0                 | '     dpoke 32+base+22, 8192+2048
01ae0                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
01ae0                 | '     dpoke 32+base+26, 1
01ae0                 | ' 
01ae0                 | '    if tracker.trigger(2) <> old3  then
01ae0     AC 0F 86 F1 | 	sub	objptr, #428
01ae4     07 81 C2 FA | 	rdbyte	local01, objptr
01ae8     C4 0F 06 F1 | 	add	objptr, #452
01aec     07 8D 02 FB | 	rdlong	local07, objptr
01af0     04 00 00 FF 
01af4     04 0F 86 F1 | 	sub	objptr, ##2308
01af8     46 81 0A F2 | 	cmp	local01, local07 wz
01afc     9C 00 90 AD |  if_e	jmp	#LR__0015
01b00     03 00 00 FF 
01b04     40 0F 06 F1 | 	add	objptr, ##1856
01b08     07 81 C2 FA | 	rdbyte	local01, objptr
01b0c     C4 0F 06 F1 | 	add	objptr, #452
01b10     07 81 62 FC | 	wrlong	local01, objptr
01b14     18 0E 86 F1 | 	sub	objptr, #24
01b18     07 73 02 FB | 	rdlong	arg01, objptr
01b1c     48 72 06 F1 | 	add	arg01, #72
01b20     01 00 00 FF 
01b24     F5 0E 86 F1 | 	sub	objptr, ##757
01b28     07 75 02 FB | 	rdlong	arg02, objptr
01b2c     1E 74 26 F4 | 	bith	arg02, #30
01b30                 | ' asm
01b30     39 75 62 FC | 	wrlong	arg02, arg01
01b34     40 72 06 F6 | 	mov	arg01, #64
01b38     01 00 00 FF 
01b3c     F5 0E 06 F1 | 	add	objptr, ##757
01b40     07 87 02 FB | 	rdlong	local04, objptr
01b44     43 73 02 F1 | 	add	arg01, local04
01b48     0C 72 06 F1 | 	add	arg01, #12
01b4c     01 00 00 FF 
01b50     E5 0E 86 F1 | 	sub	objptr, ##741
01b54     07 75 E2 FA | 	rdword	arg02, objptr
01b58     0C 0E 06 F1 | 	add	objptr, #12
01b5c     07 89 02 FB | 	rdlong	local05, objptr
01b60     44 75 82 F1 | 	sub	arg02, local05
01b64                 | ' asm
01b64     39 75 62 FC | 	wrlong	arg02, arg01
01b68     40 72 06 F6 | 	mov	arg01, #64
01b6c     01 00 00 FF 
01b70     D9 0E 06 F1 | 	add	objptr, ##729
01b74     07 87 02 FB | 	rdlong	local04, objptr
01b78     43 73 02 F1 | 	add	arg01, local04
01b7c     10 72 06 F1 | 	add	arg01, #16
01b80     01 00 00 FF 
01b84     E5 0E 86 F1 | 	sub	objptr, ##741
01b88     07 75 E2 FA | 	rdword	arg02, objptr
01b8c     03 00 00 FF 
01b90     07 0E 86 F1 | 	sub	objptr, ##1543
01b94     0F 74 46 F7 | 	zerox	arg02, #15
01b98                 | ' asm
01b98     39 75 62 FC | 	wrlong	arg02, arg01
01b9c                 | LR__0015
01b9c     40 72 06 F6 | 	mov	arg01, #64
01ba0     04 00 00 FF 
01ba4     EC 0E 06 F1 | 	add	objptr, ##2284
01ba8     07 87 02 FB | 	rdlong	local04, objptr
01bac     43 73 02 F1 | 	add	arg01, local04
01bb0     14 72 06 F1 | 	add	arg01, #20
01bb4     01 00 00 FF 
01bb8     9D 0E 86 F1 | 	sub	objptr, ##669
01bbc     07 95 02 FB | 	rdlong	local11, objptr
01bc0     10 0E 06 F1 | 	add	objptr, #16
01bc4     07 89 02 FB | 	rdlong	local05, objptr
01bc8     44 95 02 F1 | 	add	local11, local05
01bcc     2F 0F 86 F1 | 	sub	objptr, #303
01bd0     07 97 02 FB | 	rdlong	local12, objptr
01bd4     4B 95 02 FD | 	qmul	local11, local12
01bd8     18 74 62 FD | 	getqx	arg02
01bdc                 | ' asm
01bdc     39 75 52 FC | 	wrword	arg02, arg01
01be0     40 72 06 F6 | 	mov	arg01, #64
01be4     01 00 00 FF 
01be8     BC 0F 06 F1 | 	add	objptr, ##956
01bec     07 87 02 FB | 	rdlong	local04, objptr
01bf0     43 73 02 F1 | 	add	arg01, local04
01bf4     16 72 06 F1 | 	add	arg01, #22
01bf8                 | ' asm
01bf8     14 00 80 FF 
01bfc     39 01 58 FC | 	wrword	##10240, arg01
01c00     40 72 06 F6 | 	mov	arg01, #64
01c04     07 87 02 FB | 	rdlong	local04, objptr
01c08     43 73 02 F1 | 	add	arg01, local04
01c0c     18 72 06 F1 | 	add	arg01, #24
01c10     01 00 00 FF 
01c14     BD 0E 86 F1 | 	sub	objptr, ##701
01c18     07 75 02 FB | 	rdlong	arg02, objptr
01c1c     10 0E 06 F1 | 	add	objptr, #16
01c20     07 89 02 FB | 	rdlong	local05, objptr
01c24     44 75 02 F1 | 	add	arg02, local05
01c28                 | ' asm
01c28     39 75 52 FC | 	wrword	arg02, arg01
01c2c     40 72 06 F6 | 	mov	arg01, #64
01c30     01 00 00 FF 
01c34     AD 0E 06 F1 | 	add	objptr, ##685
01c38     07 87 02 FB | 	rdlong	local04, objptr
01c3c     43 73 02 F1 | 	add	arg01, local04
01c40     1A 72 06 F1 | 	add	arg01, #26
01c44                 | ' asm
01c44     39 03 58 FC | 	wrword	#1, arg01
01c48                 | '     
01c48                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01c48                 | '     dpoke 64+base+22, 8192+2048
01c48                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
01c48                 | '     dpoke 64+base+26, 1
01c48                 | ' 
01c48                 | '     if tracker.trigger(3) <> old4 then
01c48     AB 0F 86 F1 | 	sub	objptr, #427
01c4c     07 81 C2 FA | 	rdbyte	local01, objptr
01c50     C7 0F 06 F1 | 	add	objptr, #455
01c54     07 8D 02 FB | 	rdlong	local07, objptr
01c58     04 00 00 FF 
01c5c     08 0F 86 F1 | 	sub	objptr, ##2312
01c60     46 81 0A F2 | 	cmp	local01, local07 wz
01c64     9C 00 90 AD |  if_e	jmp	#LR__0016
01c68     03 00 00 FF 
01c6c     41 0F 06 F1 | 	add	objptr, ##1857
01c70     07 81 C2 FA | 	rdbyte	local01, objptr
01c74     C7 0F 06 F1 | 	add	objptr, #455
01c78     07 81 62 FC | 	wrlong	local01, objptr
01c7c     1C 0E 86 F1 | 	sub	objptr, #28
01c80     07 73 02 FB | 	rdlong	arg01, objptr
01c84     68 72 06 F1 | 	add	arg01, #104
01c88     01 00 00 FF 
01c8c     F1 0E 86 F1 | 	sub	objptr, ##753
01c90     07 75 02 FB | 	rdlong	arg02, objptr
01c94     1E 74 26 F4 | 	bith	arg02, #30
01c98                 | ' asm
01c98     39 75 62 FC | 	wrlong	arg02, arg01
01c9c     60 72 06 F6 | 	mov	arg01, #96
01ca0     01 00 00 FF 
01ca4     F1 0E 06 F1 | 	add	objptr, ##753
01ca8     07 87 02 FB | 	rdlong	local04, objptr
01cac     43 73 02 F1 | 	add	arg01, local04
01cb0     0C 72 06 F1 | 	add	arg01, #12
01cb4     01 00 00 FF 
01cb8     E3 0E 86 F1 | 	sub	objptr, ##739
01cbc     07 75 E2 FA | 	rdword	arg02, objptr
01cc0     0E 0E 06 F1 | 	add	objptr, #14
01cc4     07 89 02 FB | 	rdlong	local05, objptr
01cc8     44 75 82 F1 | 	sub	arg02, local05
01ccc                 | ' asm
01ccc     39 75 62 FC | 	wrlong	arg02, arg01
01cd0     60 72 06 F6 | 	mov	arg01, #96
01cd4     01 00 00 FF 
01cd8     D5 0E 06 F1 | 	add	objptr, ##725
01cdc     07 87 02 FB | 	rdlong	local04, objptr
01ce0     43 73 02 F1 | 	add	arg01, local04
01ce4     10 72 06 F1 | 	add	arg01, #16
01ce8     01 00 00 FF 
01cec     E3 0E 86 F1 | 	sub	objptr, ##739
01cf0     07 75 E2 FA | 	rdword	arg02, objptr
01cf4     03 00 00 FF 
01cf8     09 0E 86 F1 | 	sub	objptr, ##1545
01cfc     0F 74 46 F7 | 	zerox	arg02, #15
01d00                 | ' asm
01d00     39 75 62 FC | 	wrlong	arg02, arg01
01d04                 | LR__0016
01d04     60 72 06 F6 | 	mov	arg01, #96
01d08     04 00 00 FF 
01d0c     EC 0E 06 F1 | 	add	objptr, ##2284
01d10     07 87 02 FB | 	rdlong	local04, objptr
01d14     43 73 02 F1 | 	add	arg01, local04
01d18     14 72 06 F1 | 	add	arg01, #20
01d1c     01 00 00 FF 
01d20     99 0E 86 F1 | 	sub	objptr, ##665
01d24     07 95 02 FB | 	rdlong	local11, objptr
01d28     10 0E 06 F1 | 	add	objptr, #16
01d2c     07 89 02 FB | 	rdlong	local05, objptr
01d30     44 95 02 F1 | 	add	local11, local05
01d34     33 0F 86 F1 | 	sub	objptr, #307
01d38     07 97 02 FB | 	rdlong	local12, objptr
01d3c     4B 95 02 FD | 	qmul	local11, local12
01d40     18 74 62 FD | 	getqx	arg02
01d44                 | ' asm
01d44     39 75 52 FC | 	wrword	arg02, arg01
01d48     60 72 06 F6 | 	mov	arg01, #96
01d4c     01 00 00 FF 
01d50     BC 0F 06 F1 | 	add	objptr, ##956
01d54     07 87 02 FB | 	rdlong	local04, objptr
01d58     43 73 02 F1 | 	add	arg01, local04
01d5c     16 72 06 F1 | 	add	arg01, #22
01d60                 | ' asm
01d60     0C 00 80 FF 
01d64     39 01 58 FC | 	wrword	##6144, arg01
01d68     60 72 06 F6 | 	mov	arg01, #96
01d6c     07 87 02 FB | 	rdlong	local04, objptr
01d70     43 73 02 F1 | 	add	arg01, local04
01d74     18 72 06 F1 | 	add	arg01, #24
01d78     01 00 00 FF 
01d7c     B9 0E 86 F1 | 	sub	objptr, ##697
01d80     07 75 02 FB | 	rdlong	arg02, objptr
01d84     10 0E 06 F1 | 	add	objptr, #16
01d88     07 89 02 FB | 	rdlong	local05, objptr
01d8c     44 75 02 F1 | 	add	arg02, local05
01d90                 | ' asm
01d90     39 75 52 FC | 	wrword	arg02, arg01
01d94     60 72 06 F6 | 	mov	arg01, #96
01d98     01 00 00 FF 
01d9c     A9 0E 06 F1 | 	add	objptr, ##681
01da0     07 87 02 FB | 	rdlong	local04, objptr
01da4     04 00 00 FF 
01da8     EC 0E 86 F1 | 	sub	objptr, ##2284
01dac     43 73 02 F1 | 	add	arg01, local04
01db0     1A 72 06 F1 | 	add	arg01, #26
01db4     01 74 06 F6 | 	mov	arg02, #1
01db8                 | ' asm
01db8     39 03 58 FC | 	wrword	#1, arg01
01dbc     14 EB BF FD | 	call	#_test
01dc0     BC F9 9F FD | 	jmp	#LR__0010
01dc4     AF F0 03 F6 | 	mov	ptra, fp
01dc8     BF 00 A0 FD | 	call	#popregs_
01dcc                 | _program_ret
01dcc     2D 00 64 FD | 	ret
01dd0                 | 
01dd0                 | ' 
01dd0                 | ' 
01dd0                 | ' ''---------- putpixel - put a pixel on the screen
01dd0                 | ' 
01dd0                 | ' pub putpixel1(x,y,c) |byte b
01dd0                 | _hng030rm_spin2_putpixel1
01dd0                 | ' 
01dd0                 | ' 
01dd0                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01dd0     00 32 06 F6 | 	mov	_var01, #0
01dd4     00 72 5E F2 | 	cmps	arg01, #0 wcz
01dd8     01 32 66 36 |  if_ae	neg	_var01, #1
01ddc     00 34 06 F6 | 	mov	_var02, #0
01de0     90 0E 06 F1 | 	add	objptr, #144
01de4     07 37 02 FB | 	rdlong	_var03, objptr
01de8     05 36 66 F0 | 	shl	_var03, #5
01dec     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
01df0     01 34 66 C6 |  if_b	neg	_var02, #1
01df4     1A 33 02 F5 | 	and	_var01, _var02
01df8     00 38 06 F6 | 	mov	_var04, #0
01dfc     00 74 5E F2 | 	cmps	arg02, #0 wcz
01e00     01 38 66 36 |  if_ae	neg	_var04, #1
01e04     1C 33 02 F5 | 	and	_var01, _var04
01e08     00 3A 06 F6 | 	mov	_var05, #0
01e0c     04 0E 06 F1 | 	add	objptr, #4
01e10     07 3D 02 FB | 	rdlong	_var06, objptr
01e14     94 0E 86 F1 | 	sub	objptr, #148
01e18     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
01e1c     01 3A 66 C6 |  if_b	neg	_var05, #1
01e20     1D 33 CA F7 | 	test	_var01, _var05 wz
01e24     90 00 90 AD |  if_e	jmp	#LR__0019
01e28                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01e28     07 33 02 FB | 	rdlong	_var01, objptr
01e2c     90 0E 06 F1 | 	add	objptr, #144
01e30     07 35 02 FB | 	rdlong	_var02, objptr
01e34     90 0E 86 F1 | 	sub	objptr, #144
01e38     02 34 66 F0 | 	shl	_var02, #2
01e3c     3A 35 02 FD | 	qmul	_var02, arg02
01e40     18 3E 62 FD | 	getqx	_var07
01e44     1F 33 02 F1 | 	add	_var01, _var07
01e48     39 39 02 F6 | 	mov	_var04, arg01
01e4c     03 38 46 F0 | 	shr	_var04, #3
01e50     1C 33 02 F1 | 	add	_var01, _var04
01e54     19 41 C2 FA | 	rdbyte	_var08, _var01
01e58                 | '     if (c==0)
01e58     00 76 0E F2 | 	cmp	arg03, #0 wz
01e5c     18 00 90 5D |  if_ne	jmp	#LR__0017
01e60                 | '       b:=b & !(1<<(x//8))
01e60     39 37 52 F6 | 	abs	_var03, arg01 wc
01e64     07 36 06 F5 | 	and	_var03, #7
01e68     1B 37 62 C6 |  if_b	neg	_var03, _var03
01e6c     1B 35 C2 F9 | 	decod	_var02, _var03
01e70     1A 41 22 F5 | 	andn	_var08, _var02
01e74                 | '     else
01e74     14 00 90 FD | 	jmp	#LR__0018
01e78                 | LR__0017
01e78                 | '       b:=b |(1<<(x//8))
01e78     39 37 52 F6 | 	abs	_var03, arg01 wc
01e7c     07 36 06 F5 | 	and	_var03, #7
01e80     1B 37 62 C6 |  if_b	neg	_var03, _var03
01e84     1B 35 C2 F9 | 	decod	_var02, _var03
01e88     1A 41 42 F5 | 	or	_var08, _var02
01e8c                 | LR__0018
01e8c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01e8c     07 33 02 FB | 	rdlong	_var01, objptr
01e90     90 0E 06 F1 | 	add	objptr, #144
01e94     07 35 02 FB | 	rdlong	_var02, objptr
01e98     90 0E 86 F1 | 	sub	objptr, #144
01e9c     02 34 66 F0 | 	shl	_var02, #2
01ea0     3A 35 02 FD | 	qmul	_var02, arg02
01ea4     18 3E 62 FD | 	getqx	_var07
01ea8     1F 33 02 F1 | 	add	_var01, _var07
01eac     03 72 46 F0 | 	shr	arg01, #3
01eb0     39 33 02 F1 | 	add	_var01, arg01
01eb4     19 41 42 FC | 	wrbyte	_var08, _var01
01eb8                 | LR__0019
01eb8                 | _hng030rm_spin2_putpixel1_ret
01eb8     2D 00 64 FD | 	ret
01ebc                 | 
01ebc                 | ' 
01ebc                 | ' 
01ebc                 | ' pub putpixel2(x,y,c) |byte b
01ebc                 | _hng030rm_spin2_putpixel2
01ebc                 | ' 
01ebc                 | ' 
01ebc                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01ebc     00 32 06 F6 | 	mov	_var01, #0
01ec0     00 72 5E F2 | 	cmps	arg01, #0 wcz
01ec4     01 32 66 36 |  if_ae	neg	_var01, #1
01ec8     00 34 06 F6 | 	mov	_var02, #0
01ecc     90 0E 06 F1 | 	add	objptr, #144
01ed0     07 37 02 FB | 	rdlong	_var03, objptr
01ed4     04 36 66 F0 | 	shl	_var03, #4
01ed8     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
01edc     01 34 66 C6 |  if_b	neg	_var02, #1
01ee0     1A 33 02 F5 | 	and	_var01, _var02
01ee4     00 38 06 F6 | 	mov	_var04, #0
01ee8     00 74 5E F2 | 	cmps	arg02, #0 wcz
01eec     01 38 66 36 |  if_ae	neg	_var04, #1
01ef0     1C 33 02 F5 | 	and	_var01, _var04
01ef4     00 3A 06 F6 | 	mov	_var05, #0
01ef8     04 0E 06 F1 | 	add	objptr, #4
01efc     07 3D 02 FB | 	rdlong	_var06, objptr
01f00     94 0E 86 F1 | 	sub	objptr, #148
01f04     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
01f08     01 3A 66 C6 |  if_b	neg	_var05, #1
01f0c     1D 33 CA F7 | 	test	_var01, _var05 wz
01f10     90 00 90 AD |  if_e	jmp	#LR__0020
01f14                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01f14     07 33 02 FB | 	rdlong	_var01, objptr
01f18     90 0E 06 F1 | 	add	objptr, #144
01f1c     07 35 02 FB | 	rdlong	_var02, objptr
01f20     90 0E 86 F1 | 	sub	objptr, #144
01f24     02 34 66 F0 | 	shl	_var02, #2
01f28     3A 35 02 FD | 	qmul	_var02, arg02
01f2c     18 3E 62 FD | 	getqx	_var07
01f30     1F 33 02 F1 | 	add	_var01, _var07
01f34     39 39 02 F6 | 	mov	_var04, arg01
01f38     02 38 46 F0 | 	shr	_var04, #2
01f3c     1C 33 02 F1 | 	add	_var01, _var04
01f40     19 41 C2 FA | 	rdbyte	_var08, _var01
01f44                 | '     b:=b & !(%11<<((x//4)<<1))
01f44     39 37 52 F6 | 	abs	_var03, arg01 wc
01f48     03 36 06 F5 | 	and	_var03, #3
01f4c     1B 37 62 C6 |  if_b	neg	_var03, _var03
01f50     01 36 66 F0 | 	shl	_var03, #1
01f54     03 34 06 F6 | 	mov	_var02, #3
01f58     1B 35 62 F0 | 	shl	_var02, _var03
01f5c     1A 41 22 F5 | 	andn	_var08, _var02
01f60                 | '     b:=b |(c<<((x//4)<<1))
01f60     39 37 52 F6 | 	abs	_var03, arg01 wc
01f64     03 36 06 F5 | 	and	_var03, #3
01f68     1B 37 62 C6 |  if_b	neg	_var03, _var03
01f6c     01 36 66 F0 | 	shl	_var03, #1
01f70     1B 77 62 F0 | 	shl	arg03, _var03
01f74     3B 41 42 F5 | 	or	_var08, arg03
01f78                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01f78     07 33 02 FB | 	rdlong	_var01, objptr
01f7c     90 0E 06 F1 | 	add	objptr, #144
01f80     07 35 02 FB | 	rdlong	_var02, objptr
01f84     90 0E 86 F1 | 	sub	objptr, #144
01f88     02 34 66 F0 | 	shl	_var02, #2
01f8c     3A 35 02 FD | 	qmul	_var02, arg02
01f90     18 3E 62 FD | 	getqx	_var07
01f94     1F 33 02 F1 | 	add	_var01, _var07
01f98     02 72 46 F0 | 	shr	arg01, #2
01f9c     39 33 02 F1 | 	add	_var01, arg01
01fa0     19 41 42 FC | 	wrbyte	_var08, _var01
01fa4                 | LR__0020
01fa4                 | _hng030rm_spin2_putpixel2_ret
01fa4     2D 00 64 FD | 	ret
01fa8                 | 
01fa8                 | ' 
01fa8                 | ' 
01fa8                 | ' pub putpixel4(x,y,c) |byte b
01fa8                 | _hng030rm_spin2_putpixel4
01fa8                 | ' 
01fa8                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01fa8     00 32 06 F6 | 	mov	_var01, #0
01fac     00 72 5E F2 | 	cmps	arg01, #0 wcz
01fb0     01 32 66 36 |  if_ae	neg	_var01, #1
01fb4     00 34 06 F6 | 	mov	_var02, #0
01fb8     90 0E 06 F1 | 	add	objptr, #144
01fbc     07 37 02 FB | 	rdlong	_var03, objptr
01fc0     04 36 66 F0 | 	shl	_var03, #4
01fc4     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
01fc8     01 34 66 C6 |  if_b	neg	_var02, #1
01fcc     1A 33 02 F5 | 	and	_var01, _var02
01fd0     00 38 06 F6 | 	mov	_var04, #0
01fd4     00 74 5E F2 | 	cmps	arg02, #0 wcz
01fd8     01 38 66 36 |  if_ae	neg	_var04, #1
01fdc     1C 33 02 F5 | 	and	_var01, _var04
01fe0     00 3A 06 F6 | 	mov	_var05, #0
01fe4     04 0E 06 F1 | 	add	objptr, #4
01fe8     07 3D 02 FB | 	rdlong	_var06, objptr
01fec     94 0E 86 F1 | 	sub	objptr, #148
01ff0     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
01ff4     01 3A 66 C6 |  if_b	neg	_var05, #1
01ff8     1D 33 CA F7 | 	test	_var01, _var05 wz
01ffc     90 00 90 AD |  if_e	jmp	#LR__0021
02000                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02000     07 33 02 FB | 	rdlong	_var01, objptr
02004     90 0E 06 F1 | 	add	objptr, #144
02008     07 35 02 FB | 	rdlong	_var02, objptr
0200c     90 0E 86 F1 | 	sub	objptr, #144
02010     02 34 66 F0 | 	shl	_var02, #2
02014     3A 35 02 FD | 	qmul	_var02, arg02
02018     18 3E 62 FD | 	getqx	_var07
0201c     1F 33 02 F1 | 	add	_var01, _var07
02020     39 39 02 F6 | 	mov	_var04, arg01
02024     01 38 46 F0 | 	shr	_var04, #1
02028     1C 33 02 F1 | 	add	_var01, _var04
0202c     19 41 C2 FA | 	rdbyte	_var08, _var01
02030                 | '     b:=b & !(%1111<<((x//2)<<2))
02030     39 37 52 F6 | 	abs	_var03, arg01 wc
02034     01 36 06 F5 | 	and	_var03, #1
02038     1B 37 62 C6 |  if_b	neg	_var03, _var03
0203c     02 36 66 F0 | 	shl	_var03, #2
02040     0F 34 06 F6 | 	mov	_var02, #15
02044     1B 35 62 F0 | 	shl	_var02, _var03
02048     1A 41 22 F5 | 	andn	_var08, _var02
0204c                 | '     b:=b |(c<<((x//2)<<2))
0204c     39 37 52 F6 | 	abs	_var03, arg01 wc
02050     01 36 06 F5 | 	and	_var03, #1
02054     1B 37 62 C6 |  if_b	neg	_var03, _var03
02058     02 36 66 F0 | 	shl	_var03, #2
0205c     1B 77 62 F0 | 	shl	arg03, _var03
02060     3B 41 42 F5 | 	or	_var08, arg03
02064                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02064     07 33 02 FB | 	rdlong	_var01, objptr
02068     90 0E 06 F1 | 	add	objptr, #144
0206c     07 35 02 FB | 	rdlong	_var02, objptr
02070     90 0E 86 F1 | 	sub	objptr, #144
02074     02 34 66 F0 | 	shl	_var02, #2
02078     3A 35 02 FD | 	qmul	_var02, arg02
0207c     18 3E 62 FD | 	getqx	_var07
02080     1F 33 02 F1 | 	add	_var01, _var07
02084     01 72 46 F0 | 	shr	arg01, #1
02088     39 33 02 F1 | 	add	_var01, arg01
0208c     19 41 42 FC | 	wrbyte	_var08, _var01
02090                 | LR__0021
02090                 | _hng030rm_spin2_putpixel4_ret
02090     2D 00 64 FD | 	ret
02094                 | 
02094                 | ' 
02094                 | ' 
02094                 | ' pub putpixel8(x,y,c)
02094                 | _hng030rm_spin2_putpixel8
02094                 | ' 
02094                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02094     00 32 06 F6 | 	mov	_var01, #0
02098     00 72 5E F2 | 	cmps	arg01, #0 wcz
0209c     01 32 66 36 |  if_ae	neg	_var01, #1
020a0     00 34 06 F6 | 	mov	_var02, #0
020a4     90 0E 06 F1 | 	add	objptr, #144
020a8     07 37 02 FB | 	rdlong	_var03, objptr
020ac     02 36 66 F0 | 	shl	_var03, #2
020b0     1B 73 5A F2 | 	cmps	arg01, _var03 wcz
020b4     01 34 66 C6 |  if_b	neg	_var02, #1
020b8     1A 33 02 F5 | 	and	_var01, _var02
020bc     00 38 06 F6 | 	mov	_var04, #0
020c0     00 74 5E F2 | 	cmps	arg02, #0 wcz
020c4     01 38 66 36 |  if_ae	neg	_var04, #1
020c8     1C 33 02 F5 | 	and	_var01, _var04
020cc     00 3A 06 F6 | 	mov	_var05, #0
020d0     04 0E 06 F1 | 	add	objptr, #4
020d4     07 3D 02 FB | 	rdlong	_var06, objptr
020d8     94 0E 86 F1 | 	sub	objptr, #148
020dc     1E 75 5A F2 | 	cmps	arg02, _var06 wcz
020e0     01 3A 66 C6 |  if_b	neg	_var05, #1
020e4     1D 33 CA F7 | 	test	_var01, _var05 wz
020e8     28 00 90 AD |  if_e	jmp	#LR__0022
020ec                 | '     byte[buf_ptr+4*cpl*y+x]:=c
020ec     07 33 02 FB | 	rdlong	_var01, objptr
020f0     90 0E 06 F1 | 	add	objptr, #144
020f4     07 35 02 FB | 	rdlong	_var02, objptr
020f8     90 0E 86 F1 | 	sub	objptr, #144
020fc     02 34 66 F0 | 	shl	_var02, #2
02100     3A 35 02 FD | 	qmul	_var02, arg02
02104     18 3E 62 FD | 	getqx	_var07
02108     1F 33 02 F1 | 	add	_var01, _var07
0210c     39 33 02 F1 | 	add	_var01, arg01
02110     19 77 42 FC | 	wrbyte	arg03, _var01
02114                 | LR__0022
02114                 | _hng030rm_spin2_putpixel8_ret
02114     2D 00 64 FD | 	ret
02118                 | 
02118                 | ' 
02118                 | ' '*************************************************************************
02118                 | ' '                                                                        *
02118                 | ' '  VBlank functions                                                      *
02118                 | ' '                                                                        *
02118                 | ' '*************************************************************************
02118                 | ' 
02118                 | ' pub waitvbl(amount) | i
02118                 | _hng030rm_spin2_waitvbl
02118     04 5A 05 F6 | 	mov	COUNT_, #4
0211c     B0 00 A0 FD | 	call	#pushregs_
02120     39 81 02 F6 | 	mov	local01, arg01
02124                 | ' 
02124                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02124                 | ' 
02124                 | ' repeat i from 1 to amount
02124     01 82 06 F6 | 	mov	local02, #1
02128     01 80 5E F2 | 	cmps	local01, #1 wcz
0212c     01 84 06 16 |  if_a	mov	local03, #1
02130     01 84 66 E6 |  if_be	neg	local03, #1
02134     42 81 02 F1 | 	add	local01, local03
02138                 | LR__0023
02138                 | '   repeat until vblank==0
02138                 | LR__0024
02138     40 0E 06 F1 | 	add	objptr, #64
0213c     07 87 0A FB | 	rdlong	local04, objptr wz
02140     40 0E 86 F1 | 	sub	objptr, #64
02144     0C 00 90 AD |  if_e	jmp	#LR__0025
02148                 | '     waitus(100)
02148     64 72 06 F6 | 	mov	arg01, #100
0214c     44 43 B0 FD | 	call	#__system___waitus
02150     E4 FF 9F FD | 	jmp	#LR__0024
02154                 | LR__0025
02154                 | '   repeat until vblank==1
02154                 | LR__0026
02154     40 0E 06 F1 | 	add	objptr, #64
02158     07 87 02 FB | 	rdlong	local04, objptr
0215c     40 0E 86 F1 | 	sub	objptr, #64
02160     01 86 0E F2 | 	cmp	local04, #1 wz
02164     0C 00 90 AD |  if_e	jmp	#LR__0027
02168                 | '     waitus(100)
02168     64 72 06 F6 | 	mov	arg01, #100
0216c     24 43 B0 FD | 	call	#__system___waitus
02170     E0 FF 9F FD | 	jmp	#LR__0026
02174                 | LR__0027
02174     42 83 02 F1 | 	add	local02, local03
02178     40 83 0A F2 | 	cmp	local02, local01 wz
0217c     B8 FF 9F 5D |  if_ne	jmp	#LR__0023
02180     AF F0 03 F6 | 	mov	ptra, fp
02184     BF 00 A0 FD | 	call	#popregs_
02188                 | _hng030rm_spin2_waitvbl_ret
02188     2D 00 64 FD | 	ret
0218c                 | 
0218c                 | ' 
0218c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
0218c                 | ' 
0218c                 | ' pub setbordercolor(r,g,b) | color
0218c                 | _hng030rm_spin2_setbordercolor
0218c                 | ' 
0218c                 | ' color:=r<<24+g<<16+b<<8
0218c     18 72 66 F0 | 	shl	arg01, #24
02190     10 74 66 F0 | 	shl	arg02, #16
02194     3A 73 02 F1 | 	add	arg01, arg02
02198     08 76 66 F0 | 	shl	arg03, #8
0219c     3B 73 02 F1 | 	add	arg01, arg03
021a0                 | ' bordercolor:=color
021a0     2C 0E 06 F1 | 	add	objptr, #44
021a4     07 73 62 FC | 	wrlong	arg01, objptr
021a8     2C 0E 86 F1 | 	sub	objptr, #44
021ac                 | _hng030rm_spin2_setbordercolor_ret
021ac     2D 00 64 FD | 	ret
021b0                 | 
021b0                 | ' 
021b0                 | ' 
021b0                 | ' '*************************************************************************
021b0                 | ' '                                                                        *
021b0                 | ' '  Text functions                                                        *
021b0                 | ' '                                                                        *
021b0                 | ' '*************************************************************************
021b0                 | ' 
021b0                 | ' ''---------- Clear the screen, set its foreground/background color
021b0                 | ' 
021b0                 | ' pub cls(fc,bc)   :c
021b0                 | _hng030rm_spin2_cls
021b0     06 5A 05 F6 | 	mov	COUNT_, #6
021b4     B0 00 A0 FD | 	call	#pushregs_
021b8     39 81 02 F6 | 	mov	local01, arg01
021bc     3A 83 02 F6 | 	mov	local02, arg02
021c0                 | ' 
021c0                 | ' if (graphmode<512)
021c0     C4 0E 06 F1 | 	add	objptr, #196
021c4     07 85 02 FB | 	rdlong	local03, objptr
021c8     C4 0E 86 F1 | 	sub	objptr, #196
021cc     01 00 00 FF 
021d0     00 84 5E F2 | 	cmps	local03, ##512 wcz
021d4     34 00 90 3D |  if_ae	jmp	#LR__0028
021d8                 | '   c:=fc<<24+bc<<16+$20
021d8     40 87 02 F6 | 	mov	local04, local01
021dc     18 86 66 F0 | 	shl	local04, #24
021e0     41 89 02 F6 | 	mov	local05, local02
021e4     10 88 66 F0 | 	shl	local05, #16
021e8     44 87 02 F1 | 	add	local04, local05
021ec     20 86 06 F1 | 	add	local04, #32
021f0                 | '   longfill(buf_ptr,c,buflen)
021f0     07 73 02 FB | 	rdlong	arg01, objptr
021f4     30 0E 06 F1 | 	add	objptr, #48
021f8     07 77 02 FB | 	rdlong	arg03, objptr
021fc     30 0E 86 F1 | 	sub	objptr, #48
02200     43 75 02 F6 | 	mov	arg02, local04
02204     A8 00 A0 FD | 	call	#\builtin_longfill_
02208                 | ' else
02208     AC 00 90 FD | 	jmp	#LR__0034
0220c                 | LR__0028
0220c                 | '   if (graphmode & 48) ==48
0220c     C4 0E 06 F1 | 	add	objptr, #196
02210     07 85 02 FB | 	rdlong	local03, objptr
02214     C4 0E 86 F1 | 	sub	objptr, #196
02218     30 84 06 F5 | 	and	local03, #48
0221c     30 84 0E F2 | 	cmp	local03, #48 wz
02220                 | '     c:=bc
02220     41 87 02 A6 |  if_e	mov	local04, local02
02224     74 00 90 AD |  if_e	jmp	#LR__0033
02228                 | '   elseif (graphmode & 48) ==32
02228     C4 0E 06 F1 | 	add	objptr, #196
0222c     07 85 02 FB | 	rdlong	local03, objptr
02230     C4 0E 86 F1 | 	sub	objptr, #196
02234     30 84 06 F5 | 	and	local03, #48
02238     20 84 0E F2 | 	cmp	local03, #32 wz
0223c     10 00 90 5D |  if_ne	jmp	#LR__0029
02240                 | '     c:=bc<<4+bc
02240     41 87 02 F6 | 	mov	local04, local02
02244     04 86 66 F0 | 	shl	local04, #4
02248     41 87 02 F1 | 	add	local04, local02
0224c     4C 00 90 FD | 	jmp	#LR__0032
02250                 | LR__0029
02250                 | '   elseif (graphmode & 48) ==16
02250     C4 0E 06 F1 | 	add	objptr, #196
02254     07 85 02 FB | 	rdlong	local03, objptr
02258     C4 0E 86 F1 | 	sub	objptr, #196
0225c     30 84 06 F5 | 	and	local03, #48
02260     10 84 0E F2 | 	cmp	local03, #16 wz
02264     28 00 90 5D |  if_ne	jmp	#LR__0030
02268                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02268     41 87 02 F6 | 	mov	local04, local02
0226c     06 86 66 F0 | 	shl	local04, #6
02270     41 89 02 F6 | 	mov	local05, local02
02274     04 88 66 F0 | 	shl	local05, #4
02278     44 87 02 F1 | 	add	local04, local05
0227c     41 8B 02 F6 | 	mov	local06, local02
02280     02 8A 66 F0 | 	shl	local06, #2
02284     45 87 02 F1 | 	add	local04, local06
02288     41 87 02 F1 | 	add	local04, local02
0228c                 | '   else
0228c     0C 00 90 FD | 	jmp	#LR__0031
02290                 | LR__0030
02290                 | '     if bc==1
02290     01 82 0E F2 | 	cmp	local02, #1 wz
02294                 | '       c:=255
02294     FF 86 06 A6 |  if_e	mov	local04, #255
02298                 | '     else
02298                 | '       c:=0
02298     00 86 06 56 |  if_ne	mov	local04, #0
0229c                 | LR__0031
0229c                 | LR__0032
0229c                 | LR__0033
0229c                 | '   bytefill(buf_ptr,c,buflen*4)
0229c     07 73 02 FB | 	rdlong	arg01, objptr
022a0     30 0E 06 F1 | 	add	objptr, #48
022a4     07 77 02 FB | 	rdlong	arg03, objptr
022a8     30 0E 86 F1 | 	sub	objptr, #48
022ac     02 76 66 F0 | 	shl	arg03, #2
022b0     43 75 02 F6 | 	mov	arg02, local04
022b4     A0 00 A0 FD | 	call	#\builtin_bytefill_
022b8                 | LR__0034
022b8                 | ' setwritecolors(fc,bc)
022b8                 | ' 
022b8                 | ' 
022b8                 | ' write_color:=ff
022b8     38 0E 06 F1 | 	add	objptr, #56
022bc     07 81 62 FC | 	wrlong	local01, objptr
022c0                 | ' write_background:=bb
022c0     04 0E 06 F1 | 	add	objptr, #4
022c4     07 83 62 FC | 	wrlong	local02, objptr
022c8                 | ' cursor_x:=0
022c8     08 0E 86 F1 | 	sub	objptr, #8
022cc     07 01 48 FC | 	wrbyte	#0, objptr
022d0                 | ' cursor_y:=0
022d0     01 0E 06 F1 | 	add	objptr, #1
022d4     07 01 48 FC | 	wrbyte	#0, objptr
022d8     35 0E 86 F1 | 	sub	objptr, #53
022dc     43 2D 02 F6 | 	mov	result1, local04
022e0     AF F0 03 F6 | 	mov	ptra, fp
022e4     BF 00 A0 FD | 	call	#popregs_
022e8                 | _hng030rm_spin2_cls_ret
022e8     2D 00 64 FD | 	ret
022ec                 | 
022ec                 | ' 
022ec                 | ' ''--------- Output a string at position x,y without changing colors
022ec                 | ' 
022ec                 | ' pub outtextxy(x,y,text) | iii
022ec                 | _hng030rm_spin2_outtextxy
022ec     0F 5A 05 F6 | 	mov	COUNT_, #15
022f0     B0 00 A0 FD | 	call	#pushregs_
022f4     39 81 02 F6 | 	mov	local01, arg01
022f8                 | ' 
022f8                 | ' repeat iii from 0 to strsize(text)-1
022f8     00 82 06 F6 | 	mov	local02, #0
022fc     3B 73 02 F6 | 	mov	arg01, arg03
02300     00 84 06 F6 | 	mov	local03, #0
02304     08 DD 9F FE | 	loc	pa,	#(@LR__0036-@LR__0035)
02308     93 00 A0 FD | 	call	#FCACHE_LOAD_
0230c                 | LR__0035
0230c     39 87 CA FA | 	rdbyte	local04, arg01 wz
02310     01 84 06 51 |  if_ne	add	local03, #1
02314     01 72 06 51 |  if_ne	add	arg01, #1
02318     F0 FF 9F 5D |  if_ne	jmp	#LR__0035
0231c                 | LR__0036
0231c     42 2D 02 F6 | 	mov	result1, local03
02320     16 89 02 F6 | 	mov	local05, result1
02324     01 88 86 F1 | 	sub	local05, #1
02328     00 88 5E F2 | 	cmps	local05, #0 wcz
0232c     01 8A 06 16 |  if_a	mov	local06, #1
02330     01 8A 66 E6 |  if_be	neg	local06, #1
02334     45 89 02 F1 | 	add	local05, local06
02338     3C DD 9F FE | 	loc	pa,	#(@LR__0038-@LR__0037)
0233c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02340                 | LR__0037
02340                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02340     07 8D 02 FB | 	rdlong	local07, objptr
02344     90 0E 06 F1 | 	add	objptr, #144
02348     07 8F 02 FB | 	rdlong	local08, objptr
0234c     90 0E 86 F1 | 	sub	objptr, #144
02350     3A 8F 02 FD | 	qmul	local08, arg02
02354     18 90 62 FD | 	getqx	local09
02358     40 91 02 F1 | 	add	local09, local01
0235c     41 91 02 F1 | 	add	local09, local02
02360     02 90 66 F0 | 	shl	local09, #2
02364     48 8D 02 F1 | 	add	local07, local09
02368     46 93 02 FB | 	rdlong	local10, local07
0236c     FF 92 26 F5 | 	andn	local10, #255
02370     3B 95 02 F6 | 	mov	local11, arg03
02374     41 95 02 F1 | 	add	local11, local02
02378     4A 97 C2 FA | 	rdbyte	local12, local11
0237c     4B 93 42 F5 | 	or	local10, local12
02380     07 99 02 FB | 	rdlong	local13, objptr
02384     90 0E 06 F1 | 	add	objptr, #144
02388     07 9B 02 FB | 	rdlong	local14, objptr
0238c     90 0E 86 F1 | 	sub	objptr, #144
02390     3A 9B 02 FD | 	qmul	local14, arg02
02394     18 9C 62 FD | 	getqx	local15
02398     40 9D 02 F1 | 	add	local15, local01
0239c     41 9D 02 F1 | 	add	local15, local02
023a0     02 9C 66 F0 | 	shl	local15, #2
023a4     4E 99 02 F1 | 	add	local13, local15
023a8     4C 93 62 FC | 	wrlong	local10, local13
023ac     45 83 02 F1 | 	add	local02, local06
023b0     44 83 0A F2 | 	cmp	local02, local05 wz
023b4     88 FF 9F 5D |  if_ne	jmp	#LR__0037
023b8                 | LR__0038
023b8     AF F0 03 F6 | 	mov	ptra, fp
023bc     BF 00 A0 FD | 	call	#popregs_
023c0                 | _hng030rm_spin2_outtextxy_ret
023c0     2D 00 64 FD | 	ret
023c4                 | 
023c4                 | ' 
023c4                 | ' ''---------- Output a char at the cursor position, move the cursor
023c4                 | ' 
023c4                 | ' pub putchar(achar) | c,x,y
023c4                 | _hng030rm_spin2_putchar
023c4     0F 5A 05 F6 | 	mov	COUNT_, #15
023c8     B0 00 A0 FD | 	call	#pushregs_
023cc     39 81 02 F6 | 	mov	local01, arg01
023d0                 | ' 
023d0                 | ' if achar==10
023d0     0A 80 0E F2 | 	cmp	local01, #10 wz
023d4     08 00 90 5D |  if_ne	jmp	#LR__0039
023d8                 | '   crlf()
023d8     34 04 B0 FD | 	call	#_hng030rm_spin2_crlf
023dc                 | ' else  
023dc     64 01 90 FD | 	jmp	#LR__0042
023e0                 | LR__0039
023e0                 | '   x:=cursor_x
023e0     34 0E 06 F1 | 	add	objptr, #52
023e4     07 83 C2 FA | 	rdbyte	local02, objptr
023e8                 | '   y:=cursor_y
023e8     01 0E 06 F1 | 	add	objptr, #1
023ec     07 85 C2 FA | 	rdbyte	local03, objptr
023f0                 | '   c:=write_color<<24+write_background<<16
023f0     03 0E 06 F1 | 	add	objptr, #3
023f4     07 87 02 FB | 	rdlong	local04, objptr
023f8     18 86 66 F0 | 	shl	local04, #24
023fc     04 0E 06 F1 | 	add	objptr, #4
02400     07 89 02 FB | 	rdlong	local05, objptr
02404     3C 0E 86 F1 | 	sub	objptr, #60
02408     10 88 66 F0 | 	shl	local05, #16
0240c     44 87 02 F1 | 	add	local04, local05
02410                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02410     07 8B 02 FB | 	rdlong	local06, objptr
02414     90 0E 06 F1 | 	add	objptr, #144
02418     07 8D 02 FB | 	rdlong	local07, objptr
0241c     90 0E 86 F1 | 	sub	objptr, #144
02420     42 8D 02 FD | 	qmul	local07, local03
02424     18 8E 62 FD | 	getqx	local08
02428     41 8F 02 F1 | 	add	local08, local02
0242c     02 8E 66 F0 | 	shl	local08, #2
02430     47 8B 02 F1 | 	add	local06, local08
02434     45 91 02 FB | 	rdlong	local09, local06
02438     7F 00 00 FF 
0243c     FF 91 06 F5 | 	and	local09, ##65535
02440     43 91 42 F5 | 	or	local09, local04
02444     07 93 02 FB | 	rdlong	local10, objptr
02448     90 0E 06 F1 | 	add	objptr, #144
0244c     07 95 02 FB | 	rdlong	local11, objptr
02450     90 0E 86 F1 | 	sub	objptr, #144
02454     42 95 02 FD | 	qmul	local11, local03
02458     18 96 62 FD | 	getqx	local12
0245c     41 97 02 F1 | 	add	local12, local02
02460     02 96 66 F0 | 	shl	local12, #2
02464     4B 93 02 F1 | 	add	local10, local12
02468     49 91 62 FC | 	wrlong	local09, local10
0246c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
0246c     07 8B 02 FB | 	rdlong	local06, objptr
02470     90 0E 06 F1 | 	add	objptr, #144
02474     07 8D 02 FB | 	rdlong	local07, objptr
02478     90 0E 86 F1 | 	sub	objptr, #144
0247c     42 8D 02 FD | 	qmul	local07, local03
02480     18 8E 62 FD | 	getqx	local08
02484     41 8F 02 F1 | 	add	local08, local02
02488     02 8E 66 F0 | 	shl	local08, #2
0248c     47 8B 02 F1 | 	add	local06, local08
02490     45 91 02 FB | 	rdlong	local09, local06
02494     FF 90 26 F5 | 	andn	local09, #255
02498     40 93 02 F6 | 	mov	local10, local01
0249c     FF 92 06 F5 | 	and	local10, #255
024a0     49 91 42 F5 | 	or	local09, local10
024a4     07 99 02 FB | 	rdlong	local13, objptr
024a8     90 0E 06 F1 | 	add	objptr, #144
024ac     07 9B 02 FB | 	rdlong	local14, objptr
024b0     42 9B 02 FD | 	qmul	local14, local03
024b4     18 9C 62 FD | 	getqx	local15
024b8     41 9D 02 F1 | 	add	local15, local02
024bc     02 9C 66 F0 | 	shl	local15, #2
024c0     4E 99 02 F1 | 	add	local13, local15
024c4     4C 91 62 FC | 	wrlong	local09, local13
024c8                 | '   cursor_x+=1
024c8     5C 0E 86 F1 | 	sub	objptr, #92
024cc     07 91 C2 FA | 	rdbyte	local09, objptr
024d0     01 90 06 F1 | 	add	local09, #1
024d4     07 91 42 FC | 	wrbyte	local09, objptr
024d8                 | '   if cursor_x==cpl
024d8     07 91 C2 FA | 	rdbyte	local09, objptr
024dc     5C 0E 06 F1 | 	add	objptr, #92
024e0     07 89 02 FB | 	rdlong	local05, objptr
024e4     90 0E 86 F1 | 	sub	objptr, #144
024e8     44 91 0A F2 | 	cmp	local09, local05 wz
024ec     54 00 90 5D |  if_ne	jmp	#LR__0041
024f0                 | '     cursor_x:=0
024f0     34 0E 06 F1 | 	add	objptr, #52
024f4     07 01 48 FC | 	wrbyte	#0, objptr
024f8                 | '     cursor_y+=1
024f8     01 0E 06 F1 | 	add	objptr, #1
024fc     07 91 C2 FA | 	rdbyte	local09, objptr
02500     01 90 06 F1 | 	add	local09, #1
02504     07 91 42 FC | 	wrbyte	local09, objptr
02508                 | '     if cursor_y>lines-1
02508     5F 0E 06 F1 | 	add	objptr, #95
0250c     07 91 02 FB | 	rdlong	local09, objptr
02510     01 90 86 F1 | 	sub	local09, #1
02514     5F 0E 86 F1 | 	sub	objptr, #95
02518     07 89 C2 FA | 	rdbyte	local05, objptr
0251c     35 0E 86 F1 | 	sub	objptr, #53
02520     48 89 5A F2 | 	cmps	local05, local09 wcz
02524     1C 00 90 ED |  if_be	jmp	#LR__0040
02528                 | '       scrollup()
02528     10 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
0252c                 | '       cursor_y:=lines-1
0252c     94 0E 06 F1 | 	add	objptr, #148
02530     07 91 02 FB | 	rdlong	local09, objptr
02534     01 90 86 F1 | 	sub	local09, #1
02538     5F 0E 86 F1 | 	sub	objptr, #95
0253c     07 91 42 FC | 	wrbyte	local09, objptr
02540     35 0E 86 F1 | 	sub	objptr, #53
02544                 | LR__0040
02544                 | LR__0041
02544                 | LR__0042
02544     AF F0 03 F6 | 	mov	ptra, fp
02548     BF 00 A0 FD | 	call	#popregs_
0254c                 | _hng030rm_spin2_putchar_ret
0254c     2D 00 64 FD | 	ret
02550                 | 
02550                 | ' 
02550                 | ' ''--------- Output a string at the cursor position, move the cursor
02550                 | ' 
02550                 | ' pub write(text) | iii,c,ncx,ncy
02550                 | _hng030rm_spin2_write
02550     17 5A 05 F6 | 	mov	COUNT_, #23
02554     B0 00 A0 FD | 	call	#pushregs_
02558     39 81 02 F6 | 	mov	local01, arg01
0255c                 | ' 
0255c                 | ' c:=write_color<<24+write_background<<16
0255c     38 0E 06 F1 | 	add	objptr, #56
02560     07 83 02 FB | 	rdlong	local02, objptr
02564     18 82 66 F0 | 	shl	local02, #24
02568     04 0E 06 F1 | 	add	objptr, #4
0256c     07 85 02 FB | 	rdlong	local03, objptr
02570     10 84 66 F0 | 	shl	local03, #16
02574     42 83 02 F1 | 	add	local02, local03
02578                 | ' 'debug(uhex_long(write_color))
02578                 | ' ncy:=cursor_y
02578     07 0E 86 F1 | 	sub	objptr, #7
0257c     07 87 C2 FA | 	rdbyte	local04, objptr
02580                 | ' ncx:=cursor_x+strsize(text)
02580     01 0E 86 F1 | 	sub	objptr, #1
02584     07 89 C2 FA | 	rdbyte	local05, objptr
02588     34 0E 86 F1 | 	sub	objptr, #52
0258c     40 73 02 F6 | 	mov	arg01, local01
02590     00 8A 06 F6 | 	mov	local06, #0
02594     78 DA 9F FE | 	loc	pa,	#(@LR__0044-@LR__0043)
02598     93 00 A0 FD | 	call	#FCACHE_LOAD_
0259c                 | LR__0043
0259c     39 8D CA FA | 	rdbyte	local07, arg01 wz
025a0     01 8A 06 51 |  if_ne	add	local06, #1
025a4     01 72 06 51 |  if_ne	add	arg01, #1
025a8     F0 FF 9F 5D |  if_ne	jmp	#LR__0043
025ac                 | LR__0044
025ac     45 2D 02 F6 | 	mov	result1, local06
025b0     45 89 02 F1 | 	add	local05, local06
025b4     44 8F 02 F6 | 	mov	local08, local05
025b8     74 DA 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
025bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
025c0                 | ' repeat while ncx>cpl-1
025c0                 | LR__0045
025c0     90 0E 06 F1 | 	add	objptr, #144
025c4     07 89 02 FB | 	rdlong	local05, objptr
025c8     90 0E 86 F1 | 	sub	objptr, #144
025cc     01 88 86 F1 | 	sub	local05, #1
025d0     44 8F 5A F2 | 	cmps	local08, local05 wcz
025d4     18 00 90 ED |  if_be	jmp	#LR__0047
025d8                 | '   ncx-=cpl
025d8     90 0E 06 F1 | 	add	objptr, #144
025dc     07 91 02 FB | 	rdlong	local09, objptr
025e0     90 0E 86 F1 | 	sub	objptr, #144
025e4     48 8F 82 F1 | 	sub	local08, local09
025e8                 | '   ncy+=1
025e8     01 86 06 F1 | 	add	local04, #1
025ec     D0 FF 9F FD | 	jmp	#LR__0045
025f0                 | LR__0046
025f0                 | LR__0047
025f0                 | ' repeat while ncy>lines-1
025f0                 | LR__0048
025f0     94 0E 06 F1 | 	add	objptr, #148
025f4     07 89 02 FB | 	rdlong	local05, objptr
025f8     94 0E 86 F1 | 	sub	objptr, #148
025fc     01 88 86 F1 | 	sub	local05, #1
02600     44 87 5A F2 | 	cmps	local04, local05 wcz
02604     20 00 90 ED |  if_be	jmp	#LR__0049
02608                 | '   ncy-=1
02608     01 86 86 F1 | 	sub	local04, #1
0260c                 | '   scrollup()
0260c     2C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02610                 | '   cursor_y-=1
02610     35 0E 06 F1 | 	add	objptr, #53
02614     07 89 C2 FA | 	rdbyte	local05, objptr
02618     01 88 86 F1 | 	sub	local05, #1
0261c     07 89 42 FC | 	wrbyte	local05, objptr
02620     35 0E 86 F1 | 	sub	objptr, #53
02624     C8 FF 9F FD | 	jmp	#LR__0048
02628                 | LR__0049
02628                 | ' 
02628                 | ' repeat iii from 0 to strsize(text)-1
02628     00 92 06 F6 | 	mov	local10, #0
0262c     40 73 02 F6 | 	mov	arg01, local01
02630     00 8A 06 F6 | 	mov	local06, #0
02634     D8 D9 9F FE | 	loc	pa,	#(@LR__0051-@LR__0050)
02638     93 00 A0 FD | 	call	#FCACHE_LOAD_
0263c                 | LR__0050
0263c     39 8D CA FA | 	rdbyte	local07, arg01 wz
02640     01 8A 06 51 |  if_ne	add	local06, #1
02644     01 72 06 51 |  if_ne	add	arg01, #1
02648     F0 FF 9F 5D |  if_ne	jmp	#LR__0050
0264c                 | LR__0051
0264c     45 2D 02 F6 | 	mov	result1, local06
02650     16 95 02 F6 | 	mov	local11, result1
02654     01 94 86 F1 | 	sub	local11, #1
02658     00 94 5E F2 | 	cmps	local11, #0 wcz
0265c     01 96 06 16 |  if_a	mov	local12, #1
02660     01 96 66 E6 |  if_be	neg	local12, #1
02664     4B 95 02 F1 | 	add	local11, local12
02668     24 DA 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
0266c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02670                 | LR__0052
02670                 | ' 
02670                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02670     07 99 02 FB | 	rdlong	local13, objptr
02674     90 0E 06 F1 | 	add	objptr, #144
02678     07 9B 02 FB | 	rdlong	local14, objptr
0267c     5B 0E 86 F1 | 	sub	objptr, #91
02680     07 9D C2 FA | 	rdbyte	local15, objptr
02684     4E 9B 02 FD | 	qmul	local14, local15
02688     18 9E 62 FD | 	getqx	local16
0268c     01 0E 86 F1 | 	sub	objptr, #1
02690     07 A1 C2 FA | 	rdbyte	local17, objptr
02694     34 0E 86 F1 | 	sub	objptr, #52
02698     50 9F 02 F1 | 	add	local16, local17
0269c     49 9F 02 F1 | 	add	local16, local10
026a0     02 9E 66 F0 | 	shl	local16, #2
026a4     4F 99 02 F1 | 	add	local13, local16
026a8     4C A3 02 FB | 	rdlong	local18, local13
026ac     7F 00 00 FF 
026b0     FF A3 06 F5 | 	and	local18, ##65535
026b4     41 A3 42 F5 | 	or	local18, local02
026b8     07 A5 02 FB | 	rdlong	local19, objptr
026bc     90 0E 06 F1 | 	add	objptr, #144
026c0     07 A7 02 FB | 	rdlong	local20, objptr
026c4     5B 0E 86 F1 | 	sub	objptr, #91
026c8     07 A9 C2 FA | 	rdbyte	local21, objptr
026cc     54 A7 02 FD | 	qmul	local20, local21
026d0     18 AA 62 FD | 	getqx	local22
026d4     01 0E 86 F1 | 	sub	objptr, #1
026d8     07 AD C2 FA | 	rdbyte	local23, objptr
026dc     34 0E 86 F1 | 	sub	objptr, #52
026e0     56 AB 02 F1 | 	add	local22, local23
026e4     49 AB 02 F1 | 	add	local22, local10
026e8     02 AA 66 F0 | 	shl	local22, #2
026ec     55 A5 02 F1 | 	add	local19, local22
026f0     52 A3 62 FC | 	wrlong	local18, local19
026f4     4B 93 02 F1 | 	add	local10, local12
026f8     4A 93 0A F2 | 	cmp	local10, local11 wz
026fc     70 FF 9F 5D |  if_ne	jmp	#LR__0052
02700                 | LR__0053
02700                 | ' 
02700                 | ' outtextxy(cursor_x,cursor_y,text)
02700     34 0E 06 F1 | 	add	objptr, #52
02704     07 73 C2 FA | 	rdbyte	arg01, objptr
02708     01 0E 06 F1 | 	add	objptr, #1
0270c     07 75 C2 FA | 	rdbyte	arg02, objptr
02710     35 0E 86 F1 | 	sub	objptr, #53
02714     40 77 02 F6 | 	mov	arg03, local01
02718     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
0271c                 | ' 
0271c                 | ' cursor_x:=ncx
0271c     34 0E 06 F1 | 	add	objptr, #52
02720     07 8F 42 FC | 	wrbyte	local08, objptr
02724                 | ' cursor_y:=ncy
02724     01 0E 06 F1 | 	add	objptr, #1
02728     07 87 42 FC | 	wrbyte	local04, objptr
0272c     35 0E 86 F1 | 	sub	objptr, #53
02730     AF F0 03 F6 | 	mov	ptra, fp
02734     BF 00 A0 FD | 	call	#popregs_
02738                 | _hng030rm_spin2_write_ret
02738     2D 00 64 FD | 	ret
0273c                 | 
0273c                 | ' 
0273c                 | ' ''-----------  Scroll the screen one line up
0273c                 | ' 
0273c                 | ' pub scrollup() | i
0273c                 | _hng030rm_spin2_scrollup
0273c     0C 5A 05 F6 | 	mov	COUNT_, #12
02740     B0 00 A0 FD | 	call	#pushregs_
02744                 | ' 
02744                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02744     07 73 02 FB | 	rdlong	arg01, objptr
02748     39 75 02 F6 | 	mov	arg02, arg01
0274c     90 0E 06 F1 | 	add	objptr, #144
02750     07 81 02 FB | 	rdlong	local01, objptr
02754     02 80 66 F0 | 	shl	local01, #2
02758     40 75 02 F1 | 	add	arg02, local01
0275c     60 0E 86 F1 | 	sub	objptr, #96
02760     07 77 02 FB | 	rdlong	arg03, objptr
02764     60 0E 06 F1 | 	add	objptr, #96
02768     07 83 02 FB | 	rdlong	local02, objptr
0276c     90 0E 86 F1 | 	sub	objptr, #144
02770     41 77 82 F1 | 	sub	arg03, local02
02774     F8 39 B0 FD | 	call	#__system__longmove
02778                 | ' repeat i from buflen-cpl to buflen-1
02778     30 0E 06 F1 | 	add	objptr, #48
0277c     07 85 02 FB | 	rdlong	local03, objptr
02780     60 0E 06 F1 | 	add	objptr, #96
02784     07 81 02 FB | 	rdlong	local01, objptr
02788     40 85 82 F1 | 	sub	local03, local01
0278c     60 0E 86 F1 | 	sub	objptr, #96
02790     07 87 02 FB | 	rdlong	local04, objptr
02794     01 86 86 F1 | 	sub	local04, #1
02798     07 89 02 FB | 	rdlong	local05, objptr
0279c     60 0E 06 F1 | 	add	objptr, #96
027a0     07 8B 02 FB | 	rdlong	local06, objptr
027a4     90 0E 86 F1 | 	sub	objptr, #144
027a8     45 89 82 F1 | 	sub	local05, local06
027ac     44 87 5A F2 | 	cmps	local04, local05 wcz
027b0     01 8C 06 16 |  if_a	mov	local07, #1
027b4     01 8C 66 E6 |  if_be	neg	local07, #1
027b8     46 87 02 F1 | 	add	local04, local07
027bc     80 D8 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
027c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
027c4                 | LR__0054
027c4                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
027c4     07 8F 02 FB | 	rdlong	local08, objptr
027c8     42 91 02 F6 | 	mov	local09, local03
027cc     02 90 66 F0 | 	shl	local09, #2
027d0     48 8F 02 F1 | 	add	local08, local09
027d4     47 93 02 FB | 	rdlong	local10, local08
027d8     80 FF 7F FF 
027dc     00 92 06 F5 | 	and	local10, ##-65536
027e0     20 92 46 F5 | 	or	local10, #32
027e4     07 95 02 FB | 	rdlong	local11, objptr
027e8     42 97 02 F6 | 	mov	local12, local03
027ec     02 96 66 F0 | 	shl	local12, #2
027f0     4B 95 02 F1 | 	add	local11, local12
027f4     4A 93 62 FC | 	wrlong	local10, local11
027f8     46 85 02 F1 | 	add	local03, local07
027fc     43 85 0A F2 | 	cmp	local03, local04 wz
02800     C0 FF 9F 5D |  if_ne	jmp	#LR__0054
02804                 | LR__0055
02804     AF F0 03 F6 | 	mov	ptra, fp
02808     BF 00 A0 FD | 	call	#popregs_
0280c                 | _hng030rm_spin2_scrollup_ret
0280c     2D 00 64 FD | 	ret
02810                 | 
02810                 | ' 
02810                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
02810                 | ' 
02810                 | ' pub crlf()
02810                 | _hng030rm_spin2_crlf
02810     02 5A 05 F6 | 	mov	COUNT_, #2
02814     B0 00 A0 FD | 	call	#pushregs_
02818                 | ' 
02818                 | ' cursor_x:=0
02818     34 0E 06 F1 | 	add	objptr, #52
0281c     07 01 48 FC | 	wrbyte	#0, objptr
02820                 | ' cursor_y+=1
02820     01 0E 06 F1 | 	add	objptr, #1
02824     07 81 C2 FA | 	rdbyte	local01, objptr
02828     01 80 06 F1 | 	add	local01, #1
0282c     07 81 42 FC | 	wrbyte	local01, objptr
02830                 | ' if cursor_y>lines-1
02830     5F 0E 06 F1 | 	add	objptr, #95
02834     07 81 02 FB | 	rdlong	local01, objptr
02838     01 80 86 F1 | 	sub	local01, #1
0283c     5F 0E 86 F1 | 	sub	objptr, #95
02840     07 83 C2 FA | 	rdbyte	local02, objptr
02844     35 0E 86 F1 | 	sub	objptr, #53
02848     40 83 5A F2 | 	cmps	local02, local01 wcz
0284c     1C 00 90 ED |  if_be	jmp	#LR__0056
02850                 | '   scrollup()
02850     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
02854                 | '   cursor_y:=lines-1
02854     94 0E 06 F1 | 	add	objptr, #148
02858     07 81 02 FB | 	rdlong	local01, objptr
0285c     01 80 86 F1 | 	sub	local01, #1
02860     5F 0E 86 F1 | 	sub	objptr, #95
02864     07 81 42 FC | 	wrbyte	local01, objptr
02868     35 0E 86 F1 | 	sub	objptr, #53
0286c                 | LR__0056
0286c     AF F0 03 F6 | 	mov	ptra, fp
02870     BF 00 A0 FD | 	call	#popregs_
02874                 | _hng030rm_spin2_crlf_ret
02874     2D 00 64 FD | 	ret
02878                 | 
02878                 | ' 
02878                 | ' 
02878                 | ' 
02878                 | ' pub inttostr2(i,d):result |q,pos,k,j
02878                 | _hng030rm_spin2_inttostr2
02878                 | ' 
02878                 | ' j:=i
02878                 | ' pos:=d-1
02878     3A 33 02 F6 | 	mov	_var01, arg02
0287c     01 32 86 F1 | 	sub	_var01, #1
02880                 | ' k:=0
02880                 | ' 
02880                 | ' n_string[d]:=0
02880     3A 35 02 F6 | 	mov	_var02, arg02
02884     44 0E 06 F1 | 	add	objptr, #68
02888     07 37 02 F6 | 	mov	_var03, objptr
0288c     07 35 02 F1 | 	add	_var02, objptr
02890     1A 01 48 FC | 	wrbyte	#0, _var02
02894                 | ' repeat k from 0 to d-1
02894     00 38 06 F6 | 	mov	_var04, #0
02898     01 74 86 F1 | 	sub	arg02, #1
0289c     3A 3B 02 F6 | 	mov	_var05, arg02
028a0     00 3A 5E F2 | 	cmps	_var05, #0 wcz
028a4     44 0E 86 F1 | 	sub	objptr, #68
028a8     01 36 06 16 |  if_a	mov	_var03, #1
028ac     01 36 66 E6 |  if_be	neg	_var03, #1
028b0     1B 3B 02 F1 | 	add	_var05, _var03
028b4     68 D7 9F FE | 	loc	pa,	#(@LR__0058-@LR__0057)
028b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
028bc                 | LR__0057
028bc                 | '   n_string[k]:=48
028bc     1C 3D 02 F6 | 	mov	_var06, _var04
028c0     44 0E 06 F1 | 	add	objptr, #68
028c4     07 3D 02 F1 | 	add	_var06, objptr
028c8     1E 61 48 FC | 	wrbyte	#48, _var06
028cc     1B 39 02 F1 | 	add	_var04, _var03
028d0     1D 39 0A F2 | 	cmp	_var04, _var05 wz
028d4     44 0E 86 F1 | 	sub	objptr, #68
028d8     E0 FF 9F 5D |  if_ne	jmp	#LR__0057
028dc                 | LR__0058
028dc                 | ' 
028dc                 | ' if (j<>0)
028dc     00 72 0E F2 | 	cmp	arg01, #0 wz
028e0     40 00 90 AD |  if_e	jmp	#LR__0061
028e4                 | ' 
028e4                 | '   repeat while (pos>-1)
028e4                 | LR__0059
028e4     FF FF 7F FF 
028e8     FF 33 5E F2 | 	cmps	_var01, ##-1 wcz
028ec     34 00 90 ED |  if_be	jmp	#LR__0060
028f0                 | '     q:=j+//10
028f0     39 AF 02 F6 | 	mov	muldiva_, arg01
028f4     0A B0 06 F6 | 	mov	muldivb_, #10
028f8     CC 00 A0 FD | 	call	#unsdivide_
028fc                 | '     q:=48+q
028fc     30 3E 06 F6 | 	mov	_var07, #48
02900     57 3F 02 F1 | 	add	_var07, muldiva_
02904                 | '     n_string[pos]:=q
02904     19 75 02 F6 | 	mov	arg02, _var01
02908     44 0E 06 F1 | 	add	objptr, #68
0290c     07 75 02 F1 | 	add	arg02, objptr
02910     3A 3F 42 FC | 	wrbyte	_var07, arg02
02914                 | '     j:=j+/10
02914     58 73 02 F6 | 	mov	arg01, muldivb_
02918                 | '     pos-=1
02918     01 32 86 F1 | 	sub	_var01, #1
0291c     44 0E 86 F1 | 	sub	objptr, #68
02920     C0 FF 9F FD | 	jmp	#LR__0059
02924                 | LR__0060
02924                 | LR__0061
02924                 | ' 
02924                 | ' 
02924                 | ' q:=@n_string
02924     44 0E 06 F1 | 	add	objptr, #68
02928     07 2D 02 F6 | 	mov	result1, objptr
0292c     44 0E 86 F1 | 	sub	objptr, #68
02930                 | ' return q
02930                 | _hng030rm_spin2_inttostr2_ret
02930     2D 00 64 FD | 	ret
02934                 | 
02934                 | ' 
02934                 | ' 
02934                 | ' 
02934                 | ' '*************************************************************************
02934                 | ' '                                                                        *
02934                 | ' '  Mode setting and driver start                                                          *
02934                 | ' '                                                                        *
02934                 | ' '*************************************************************************
02934                 | ' 
02934                 | ' ''---------  Set the graphics mode
02934                 | ' 
02934                 | ' 
02934                 | ' 
02934                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02934                 | _hng030rm_spin2_setmode
02934     0A 5A 05 F6 | 	mov	COUNT_, #10
02938     B0 00 A0 FD | 	call	#pushregs_
0293c     39 81 02 F6 | 	mov	local01, arg01
02940                 | ' 
02940                 | ' '' mode:tn_bb_cc_vv_hh
02940                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02940                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02940                 | ' 
02940                 | ' if mode==(512+192+48)
02940     01 00 00 FF 
02944     F0 80 0E F2 | 	cmp	local01, ##752 wz
02948                 | '   return 'no RAM
02948     C8 05 90 AD |  if_e	jmp	#LR__0084
0294c                 | ' 
0294c                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
0294c     40 83 02 F6 | 	mov	local02, local01
02950     06 82 46 F0 | 	shr	local02, #6
02954     07 82 06 F5 | 	and	local02, #7
02958     08 82 26 F3 | 	fle	local02, #8
0295c     41 85 02 F6 | 	mov	local03, local02
02960     30 84 62 FD | 	jmprel	local03
02964                 | LR__0062
02964     20 00 90 FD | 	jmp	#LR__0063
02968     48 00 90 FD | 	jmp	#LR__0064
0296c     70 00 90 FD | 	jmp	#LR__0065
02970     98 00 90 FD | 	jmp	#LR__0066
02974     C0 00 90 FD | 	jmp	#LR__0067
02978     E8 00 90 FD | 	jmp	#LR__0068
0297c     10 01 90 FD | 	jmp	#LR__0069
02980     38 01 90 FD | 	jmp	#LR__0070
02984     70 01 90 FD | 	jmp	#LR__0071
02988                 | LR__0063
02988                 | ' 
02988                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02988     50 0E 06 F1 | 	add	objptr, #80
0298c     07 73 02 F6 | 	mov	arg01, objptr
02990     50 0E 86 F1 | 	sub	objptr, #80
02994     0E 00 00 FF 
02998     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
0299c     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029a0     0E 00 00 FF 
029a4     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029a8     10 76 06 F6 | 	mov	arg03, #16
029ac     C0 37 B0 FD | 	call	#__system__longmove
029b0     44 01 90 FD | 	jmp	#LR__0071
029b4                 | LR__0064
029b4                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
029b4     50 0E 06 F1 | 	add	objptr, #80
029b8     07 73 02 F6 | 	mov	arg01, objptr
029bc     50 0E 86 F1 | 	sub	objptr, #80
029c0     0E 00 00 FF 
029c4     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
029c8     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029cc     0E 00 00 FF 
029d0     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
029d4     10 76 06 F6 | 	mov	arg03, #16
029d8     94 37 B0 FD | 	call	#__system__longmove
029dc     18 01 90 FD | 	jmp	#LR__0071
029e0                 | LR__0065
029e0                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
029e0     50 0E 06 F1 | 	add	objptr, #80
029e4     07 73 02 F6 | 	mov	arg01, objptr
029e8     50 0E 86 F1 | 	sub	objptr, #80
029ec     0E 00 00 FF 
029f0     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
029f4     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029f8     0E 00 00 FF 
029fc     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a00     10 76 06 F6 | 	mov	arg03, #16
02a04     68 37 B0 FD | 	call	#__system__longmove
02a08     EC 00 90 FD | 	jmp	#LR__0071
02a0c                 | LR__0066
02a0c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a0c     50 0E 06 F1 | 	add	objptr, #80
02a10     07 73 02 F6 | 	mov	arg01, objptr
02a14     50 0E 86 F1 | 	sub	objptr, #80
02a18     0E 00 00 FF 
02a1c     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a20     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02a24     0E 00 00 FF 
02a28     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02a2c     10 76 06 F6 | 	mov	arg03, #16
02a30     3C 37 B0 FD | 	call	#__system__longmove
02a34     C0 00 90 FD | 	jmp	#LR__0071
02a38                 | LR__0067
02a38                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02a38     50 0E 06 F1 | 	add	objptr, #80
02a3c     07 73 02 F6 | 	mov	arg01, objptr
02a40     50 0E 86 F1 | 	sub	objptr, #80
02a44     0E 00 00 FF 
02a48     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02a4c     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02a50     0E 00 00 FF 
02a54     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02a58     10 76 06 F6 | 	mov	arg03, #16
02a5c     10 37 B0 FD | 	call	#__system__longmove
02a60     94 00 90 FD | 	jmp	#LR__0071
02a64                 | LR__0068
02a64                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02a64     50 0E 06 F1 | 	add	objptr, #80
02a68     07 73 02 F6 | 	mov	arg01, objptr
02a6c     50 0E 86 F1 | 	sub	objptr, #80
02a70     0E 00 00 FF 
02a74     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02a78     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02a7c     0E 00 00 FF 
02a80     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02a84     10 76 06 F6 | 	mov	arg03, #16
02a88     E4 36 B0 FD | 	call	#__system__longmove
02a8c     68 00 90 FD | 	jmp	#LR__0071
02a90                 | LR__0069
02a90                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02a90     50 0E 06 F1 | 	add	objptr, #80
02a94     07 73 02 F6 | 	mov	arg01, objptr
02a98     50 0E 86 F1 | 	sub	objptr, #80
02a9c     0E 00 00 FF 
02aa0     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02aa4     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02aa8     0E 00 00 FF 
02aac     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02ab0     10 76 06 F6 | 	mov	arg03, #16
02ab4     B8 36 B0 FD | 	call	#__system__longmove
02ab8     3C 00 90 FD | 	jmp	#LR__0071
02abc                 | LR__0070
02abc                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02abc     50 0E 06 F1 | 	add	objptr, #80
02ac0     07 87 02 F6 | 	mov	local04, objptr
02ac4     43 89 02 F6 | 	mov	local05, local04
02ac8     0F 00 00 FF 
02acc     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02ad0     0D 8B 02 F6 | 	mov	local06, ptr__hng030rm_spin2_dat__
02ad4     45 8D 02 F6 | 	mov	local07, local06
02ad8     10 8E 06 F6 | 	mov	local08, #16
02adc     44 73 02 F6 | 	mov	arg01, local05
02ae0     46 75 02 F6 | 	mov	arg02, local07
02ae4     10 76 06 F6 | 	mov	arg03, #16
02ae8     50 0E 86 F1 | 	sub	objptr, #80
02aec     0F 00 00 FF 
02af0     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02af4     78 36 B0 FD | 	call	#__system__longmove
02af8                 | LR__0071
02af8                 | ' 
02af8                 | ' ' 4-bit graphics: do nothing with timings :)
02af8                 | ' if mode<512
02af8     01 00 00 FF 
02afc     00 80 5E F2 | 	cmps	local01, ##512 wcz
02b00     1C 00 90 3D |  if_ae	jmp	#LR__0072
02b04                 | '   palette_ptr:=@ataripalette
02b04     0C 00 00 FF 
02b08     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02b0c     18 0E 06 F1 | 	add	objptr, #24
02b10     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02b14     18 0E 86 F1 | 	sub	objptr, #24
02b18     0C 00 00 FF 
02b1c     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02b20                 | LR__0072
02b20                 | ' 
02b20                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02b20     40 83 02 F6 | 	mov	local02, local01
02b24     01 00 00 FF 
02b28     30 82 06 F5 | 	and	local02, ##560
02b2c     01 00 00 FF 
02b30     30 82 0E F2 | 	cmp	local02, ##560 wz
02b34     44 00 90 5D |  if_ne	jmp	#LR__0073
02b38                 | '   timings[5]:=4
02b38     64 0E 06 F1 | 	add	objptr, #100
02b3c     07 09 68 FC | 	wrlong	#4, objptr
02b40                 | '   timings[11]:=timings[11]<<1
02b40     18 0E 06 F1 | 	add	objptr, #24
02b44     07 83 02 FB | 	rdlong	local02, objptr
02b48     01 82 66 F0 | 	shl	local02, #1
02b4c     07 83 62 FC | 	wrlong	local02, objptr
02b50                 | '   putpixel:=p8
02b50     6C 0E 06 F1 | 	add	objptr, #108
02b54     07 83 02 FB | 	rdlong	local02, objptr
02b58     10 0E 86 F1 | 	sub	objptr, #16
02b5c     07 83 62 FC | 	wrlong	local02, objptr
02b60                 | '   palette_ptr:=@ataripalette
02b60     0C 00 00 FF 
02b64     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02b68     C0 0E 86 F1 | 	sub	objptr, #192
02b6c     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02b70     18 0E 86 F1 | 	sub	objptr, #24
02b74     0C 00 00 FF 
02b78     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02b7c                 | LR__0073
02b7c                 | ' 
02b7c                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02b7c     40 83 02 F6 | 	mov	local02, local01
02b80     01 00 00 FF 
02b84     30 82 06 F5 | 	and	local02, ##560
02b88     01 00 00 FF 
02b8c     10 82 0E F2 | 	cmp	local02, ##528 wz
02b90     44 00 90 5D |  if_ne	jmp	#LR__0074
02b94                 | '   timings[5]:=16
02b94     64 0E 06 F1 | 	add	objptr, #100
02b98     07 21 68 FC | 	wrlong	#16, objptr
02b9c                 | '   timings[11]:=timings[11]>>1
02b9c     18 0E 06 F1 | 	add	objptr, #24
02ba0     07 83 02 FB | 	rdlong	local02, objptr
02ba4     01 82 46 F0 | 	shr	local02, #1
02ba8     07 83 62 FC | 	wrlong	local02, objptr
02bac                 | '   putpixel:=p2
02bac     64 0E 06 F1 | 	add	objptr, #100
02bb0     07 83 02 FB | 	rdlong	local02, objptr
02bb4     08 0E 86 F1 | 	sub	objptr, #8
02bb8     07 83 62 FC | 	wrlong	local02, objptr
02bbc                 | '   palette_ptr:=@fourcolors
02bbc     0C 00 00 FF 
02bc0     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02bc4     C0 0E 86 F1 | 	sub	objptr, #192
02bc8     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02bcc     18 0E 86 F1 | 	sub	objptr, #24
02bd0     0C 00 00 FF 
02bd4     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02bd8                 | LR__0074
02bd8                 | ' 
02bd8                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02bd8     40 83 02 F6 | 	mov	local02, local01
02bdc     01 00 00 FF 
02be0     30 82 06 F5 | 	and	local02, ##560
02be4     01 00 00 FF 
02be8     00 82 0E F2 | 	cmp	local02, ##512 wz
02bec     44 00 90 5D |  if_ne	jmp	#LR__0075
02bf0                 | '   timings[5]:=32
02bf0     64 0E 06 F1 | 	add	objptr, #100
02bf4     07 41 68 FC | 	wrlong	#32, objptr
02bf8                 | '   timings[11]:=timings[11]>>2
02bf8     18 0E 06 F1 | 	add	objptr, #24
02bfc     07 83 02 FB | 	rdlong	local02, objptr
02c00     02 82 46 F0 | 	shr	local02, #2
02c04     07 83 62 FC | 	wrlong	local02, objptr
02c08                 | '   putpixel:=p1
02c08     60 0E 06 F1 | 	add	objptr, #96
02c0c     07 83 02 FB | 	rdlong	local02, objptr
02c10     04 0E 86 F1 | 	sub	objptr, #4
02c14     07 83 62 FC | 	wrlong	local02, objptr
02c18                 | '   palette_ptr:=@twocolors
02c18     0C 00 00 FF 
02c1c     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02c20     C0 0E 86 F1 | 	sub	objptr, #192
02c24     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c28     18 0E 86 F1 | 	sub	objptr, #24
02c2c     0C 00 00 FF 
02c30     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02c34                 | LR__0075
02c34                 | ' 
02c34                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02c34     40 83 02 F6 | 	mov	local02, local01
02c38     01 00 00 FF 
02c3c     30 82 06 F5 | 	and	local02, ##560
02c40     01 00 00 FF 
02c44     20 82 0E F2 | 	cmp	local02, ##544 wz
02c48     2C 00 90 5D |  if_ne	jmp	#LR__0076
02c4c                 | '   putpixel:=p4
02c4c     E4 0E 06 F1 | 	add	objptr, #228
02c50     07 83 02 FB | 	rdlong	local02, objptr
02c54     0C 0E 86 F1 | 	sub	objptr, #12
02c58     07 83 62 FC | 	wrlong	local02, objptr
02c5c                 | '   palette_ptr:=@vga16
02c5c     0C 00 00 FF 
02c60     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02c64     C0 0E 86 F1 | 	sub	objptr, #192
02c68     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c6c     18 0E 86 F1 | 	sub	objptr, #24
02c70     0C 00 00 FF 
02c74     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02c78                 | LR__0076
02c78                 | ' 
02c78                 | ' repeat i from 0 to 4
02c78     00 90 06 F6 | 	mov	local09, #0
02c7c     DC D3 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
02c80     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c84                 | LR__0077
02c84                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02c84     48 87 02 F6 | 	mov	local04, local09
02c88     02 86 66 F0 | 	shl	local04, #2
02c8c     50 0E 06 F1 | 	add	objptr, #80
02c90     07 89 02 F6 | 	mov	local05, objptr
02c94     07 87 02 F1 | 	add	local04, objptr
02c98     2C 0E 86 F1 | 	sub	objptr, #44
02c9c     07 8D 02 FB | 	rdlong	local07, objptr
02ca0     46 8B 02 F6 | 	mov	local06, local07
02ca4     11 8A 66 F0 | 	shl	local06, #17
02ca8     43 83 02 FB | 	rdlong	local02, local04
02cac     45 83 02 F1 | 	add	local02, local06
02cb0     80 40 38 FF 
02cb4     00 82 06 F1 | 	add	local02, ##1887502336
02cb8     48 8F 02 F6 | 	mov	local08, local09
02cbc     02 8E 66 F0 | 	shl	local08, #2
02cc0     2C 0E 06 F1 | 	add	objptr, #44
02cc4     07 93 02 F6 | 	mov	local10, objptr
02cc8     07 8F 02 F1 | 	add	local08, objptr
02ccc     47 83 62 FC | 	wrlong	local02, local08
02cd0     01 90 06 F1 | 	add	local09, #1
02cd4     05 90 5E F2 | 	cmps	local09, #5 wcz
02cd8     50 0E 86 F1 | 	sub	objptr, #80
02cdc     A4 FF 9F CD |  if_b	jmp	#LR__0077
02ce0                 | LR__0078
02ce0                 | ' timings[5]:=timings[5]+hdmibase<<17
02ce0     24 0E 06 F1 | 	add	objptr, #36
02ce4     07 87 02 FB | 	rdlong	local04, objptr
02ce8     11 86 66 F0 | 	shl	local04, #17
02cec     40 0E 06 F1 | 	add	objptr, #64
02cf0     07 8B 02 FB | 	rdlong	local06, objptr
02cf4     45 83 02 F6 | 	mov	local02, local06
02cf8     43 83 02 F1 | 	add	local02, local04
02cfc     07 83 62 FC | 	wrlong	local02, objptr
02d00                 | ' clkfreq:=timings[13]
02d00     20 0E 06 F1 | 	add	objptr, #32
02d04     07 83 02 FB | 	rdlong	local02, objptr
02d08     14 82 66 FC | 	wrlong	local02, #20
02d0c                 | ' hubset(timings[14])
02d0c     04 0E 06 F1 | 	add	objptr, #4
02d10     07 73 02 FB | 	rdlong	arg01, objptr
02d14     88 0E 86 F1 | 	sub	objptr, #136
02d18     00 72 62 FD | 	hubset	arg01
02d1c                 | ' waitms(1)
02d1c     01 72 06 F6 | 	mov	arg01, #1
02d20     F4 36 B0 FD | 	call	#__system___waitms
02d24                 | ' 
02d24                 | ' 
02d24                 | ' xzoom:=1<<(mode & 3)
02d24     40 87 02 F6 | 	mov	local04, local01
02d28     03 86 06 F5 | 	and	local04, #3
02d2c     43 83 C2 F9 | 	decod	local02, local04
02d30     CC 0E 06 F1 | 	add	objptr, #204
02d34     07 83 62 FC | 	wrlong	local02, objptr
02d38                 | ' 
02d38                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02d38     41 87 02 F6 | 	mov	local04, local02
02d3c     CC 0E 86 F1 | 	sub	objptr, #204
02d40     08 86 0E F2 | 	cmp	local04, #8 wz
02d44     24 00 90 5D |  if_ne	jmp	#LR__0079
02d48     40 89 02 F6 | 	mov	local05, local01
02d4c     04 88 46 F0 | 	shr	local05, #4
02d50     03 88 06 F5 | 	and	local05, #3
02d54     03 88 0E F2 | 	cmp	local05, #3 wz
02d58     10 00 90 AD |  if_e	jmp	#LR__0079
02d5c                 | '   xzoom:=4
02d5c     04 82 06 F6 | 	mov	local02, #4
02d60     CC 0E 06 F1 | 	add	objptr, #204
02d64     07 09 68 FC | 	wrlong	#4, objptr
02d68     CC 0E 86 F1 | 	sub	objptr, #204
02d6c                 | LR__0079
02d6c                 | ' 
02d6c                 | ' yzoom:=1<<((mode>>2) & 3)
02d6c     40 87 02 F6 | 	mov	local04, local01
02d70     02 86 46 F0 | 	shr	local04, #2
02d74     03 86 06 F5 | 	and	local04, #3
02d78     43 83 C2 F9 | 	decod	local02, local04
02d7c     D0 0E 06 F1 | 	add	objptr, #208
02d80     07 83 62 FC | 	wrlong	local02, objptr
02d84                 | ' azoom:=xzoom*yzoom
02d84     04 0E 86 F1 | 	sub	objptr, #4
02d88     07 87 02 FB | 	rdlong	local04, objptr
02d8c     04 0E 06 F1 | 	add	objptr, #4
02d90     07 8B 02 FB | 	rdlong	local06, objptr
02d94     45 87 02 FD | 	qmul	local04, local06
02d98     18 82 62 FD | 	getqx	local02
02d9c     04 0E 06 F1 | 	add	objptr, #4
02da0     07 83 62 FC | 	wrlong	local02, objptr
02da4                 | ' 
02da4                 | ' cpl:=timings[11]
02da4     58 0E 86 F1 | 	sub	objptr, #88
02da8     07 83 02 FB | 	rdlong	local02, objptr
02dac     14 0E 06 F1 | 	add	objptr, #20
02db0     07 83 62 FC | 	wrlong	local02, objptr
02db4     90 0E 86 F1 | 	sub	objptr, #144
02db8                 | ' if (mode<512)
02db8     01 00 00 FF 
02dbc     00 80 5E F2 | 	cmps	local01, ##512 wcz
02dc0     60 00 90 3D |  if_ae	jmp	#LR__0080
02dc4                 | '   lines:=(timings[12]>>4)+/yzoom
02dc4     80 0E 06 F1 | 	add	objptr, #128
02dc8     07 AF 02 FB | 	rdlong	muldiva_, objptr
02dcc     04 AE 46 F0 | 	shr	muldiva_, #4
02dd0     50 0E 06 F1 | 	add	objptr, #80
02dd4     07 B1 02 FB | 	rdlong	muldivb_, objptr
02dd8     D0 0E 86 F1 | 	sub	objptr, #208
02ddc     CC 00 A0 FD | 	call	#unsdivide_
02de0     94 0E 06 F1 | 	add	objptr, #148
02de4     07 B1 62 FC | 	wrlong	muldivb_, objptr
02de8                 | '   if ((timings[12]>>4)+//yzoom) <>0
02de8     14 0E 86 F1 | 	sub	objptr, #20
02dec     07 AF 02 FB | 	rdlong	muldiva_, objptr
02df0     04 AE 46 F0 | 	shr	muldiva_, #4
02df4     50 0E 06 F1 | 	add	objptr, #80
02df8     07 B1 02 FB | 	rdlong	muldivb_, objptr
02dfc     D0 0E 86 F1 | 	sub	objptr, #208
02e00     CC 00 A0 FD | 	call	#unsdivide_
02e04     00 AE 0E F2 | 	cmp	muldiva_, #0 wz
02e08     AC 00 90 AD |  if_e	jmp	#LR__0083
02e0c                 | '     lines +=1
02e0c     94 0E 06 F1 | 	add	objptr, #148
02e10     07 83 02 FB | 	rdlong	local02, objptr
02e14     01 82 06 F1 | 	add	local02, #1
02e18     07 83 62 FC | 	wrlong	local02, objptr
02e1c     94 0E 86 F1 | 	sub	objptr, #148
02e20                 | ' 
02e20                 | ' else
02e20     94 00 90 FD | 	jmp	#LR__0083
02e24                 | LR__0080
02e24                 | '   lines:=timings[12]/yzoom
02e24     80 0E 06 F1 | 	add	objptr, #128
02e28     07 AF 02 FB | 	rdlong	muldiva_, objptr
02e2c     50 0E 06 F1 | 	add	objptr, #80
02e30     07 B1 02 FB | 	rdlong	muldivb_, objptr
02e34     D0 0E 86 F1 | 	sub	objptr, #208
02e38     D0 00 A0 FD | 	call	#divide_
02e3c     94 0E 06 F1 | 	add	objptr, #148
02e40     07 B1 62 FC | 	wrlong	muldivb_, objptr
02e44                 | '   if cpl//xzoom==0
02e44     04 0E 86 F1 | 	sub	objptr, #4
02e48     07 AF 02 FB | 	rdlong	muldiva_, objptr
02e4c     3C 0E 06 F1 | 	add	objptr, #60
02e50     07 B1 02 FB | 	rdlong	muldivb_, objptr
02e54     CC 0E 86 F1 | 	sub	objptr, #204
02e58     D0 00 A0 FD | 	call	#divide_
02e5c     00 AE 0E F2 | 	cmp	muldiva_, #0 wz
02e60     28 00 90 5D |  if_ne	jmp	#LR__0081
02e64                 | '     cpl:=cpl/xzoom
02e64     90 0E 06 F1 | 	add	objptr, #144
02e68     07 AF 02 FB | 	rdlong	muldiva_, objptr
02e6c     3C 0E 06 F1 | 	add	objptr, #60
02e70     07 B1 02 FB | 	rdlong	muldivb_, objptr
02e74     CC 0E 86 F1 | 	sub	objptr, #204
02e78     D0 00 A0 FD | 	call	#divide_
02e7c     90 0E 06 F1 | 	add	objptr, #144
02e80     07 B1 62 FC | 	wrlong	muldivb_, objptr
02e84     90 0E 86 F1 | 	sub	objptr, #144
02e88                 | '   else
02e88     2C 00 90 FD | 	jmp	#LR__0082
02e8c                 | LR__0081
02e8c                 | '     cpl:=cpl/xzoom+1
02e8c     90 0E 06 F1 | 	add	objptr, #144
02e90     07 AF 02 FB | 	rdlong	muldiva_, objptr
02e94     3C 0E 06 F1 | 	add	objptr, #60
02e98     07 B1 02 FB | 	rdlong	muldivb_, objptr
02e9c     CC 0E 86 F1 | 	sub	objptr, #204
02ea0     D0 00 A0 FD | 	call	#divide_
02ea4     58 83 02 F6 | 	mov	local02, muldivb_
02ea8     01 82 06 F1 | 	add	local02, #1
02eac     90 0E 06 F1 | 	add	objptr, #144
02eb0     07 83 62 FC | 	wrlong	local02, objptr
02eb4     90 0E 86 F1 | 	sub	objptr, #144
02eb8                 | LR__0082
02eb8                 | LR__0083
02eb8                 | ' 
02eb8                 | ' buflen:=(cpl*lines)
02eb8     90 0E 06 F1 | 	add	objptr, #144
02ebc     07 87 02 FB | 	rdlong	local04, objptr
02ec0     04 0E 06 F1 | 	add	objptr, #4
02ec4     07 8B 02 FB | 	rdlong	local06, objptr
02ec8     45 87 02 FD | 	qmul	local04, local06
02ecc     18 82 62 FD | 	getqx	local02
02ed0     64 0E 86 F1 | 	sub	objptr, #100
02ed4     07 83 62 FC | 	wrlong	local02, objptr
02ed8                 | ' buf_ptr:=$80000-4*buflen
02ed8     41 87 02 F6 | 	mov	local04, local02
02edc     30 0E 86 F1 | 	sub	objptr, #48
02ee0     02 86 66 F0 | 	shl	local04, #2
02ee4     13 82 C6 F9 | 	decod	local02, #19
02ee8     43 83 82 F1 | 	sub	local02, local04
02eec     07 83 62 FC | 	wrlong	local02, objptr
02ef0                 | ' mode_ptr:=@timings
02ef0     50 0E 06 F1 | 	add	objptr, #80
02ef4     07 83 02 F6 | 	mov	local02, objptr
02ef8     3C 0E 86 F1 | 	sub	objptr, #60
02efc     07 83 62 FC | 	wrlong	local02, objptr
02f00                 | ' graphmode:=mode
02f00     B0 0E 06 F1 | 	add	objptr, #176
02f04     07 81 62 FC | 	wrlong	local01, objptr
02f08     C4 0E 86 F1 | 	sub	objptr, #196
02f0c                 | ' makedl(mode)
02f0c     40 73 02 F6 | 	mov	arg01, local01
02f10     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
02f14                 | LR__0084
02f14     AF F0 03 F6 | 	mov	ptra, fp
02f18     BF 00 A0 FD | 	call	#popregs_
02f1c                 | _hng030rm_spin2_setmode_ret
02f1c     2D 00 64 FD | 	ret
02f20                 | 
02f20                 | ' 
02f20                 | ' 
02f20                 | ' 
02f20                 | ' 
02f20                 | ' '---------- Make a display list
02f20                 | ' 
02f20                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
02f20                 | _hng030rm_spin2_makedl
02f20                 | ' 
02f20                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02f20                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02f20                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02f20                 | ' 
02f20                 | ' '   0 - display a up/down border line
02f20                 | ' 
02f20                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02f20                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02f20                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02f20                 | ' '    nnnn - font line to display, 0..15
02f20                 | ' '    llllll - character line, determines the cursor Y position
02f20                 | ' 
02f20                 | ' 
02f20                 | ' if (mode &256==0)
02f20     00 73 CE F7 | 	test	arg01, #256 wz
02f24     1C 00 90 5D |  if_ne	jmp	#LR__0085
02f28                 | '   dl_ptr:=buf_ptr-4*576
02f28     07 33 02 FB | 	rdlong	_var01, objptr
02f2c     04 00 00 FF 
02f30     00 33 86 F1 | 	sub	_var01, ##2304
02f34     1C 0E 06 F1 | 	add	objptr, #28
02f38     07 33 62 FC | 	wrlong	_var01, objptr
02f3c     1C 0E 86 F1 | 	sub	objptr, #28
02f40                 | ' else
02f40     18 00 90 FD | 	jmp	#LR__0086
02f44                 | LR__0085
02f44                 | '   dl_ptr:=buf_ptr-4*496
02f44     07 33 02 FB | 	rdlong	_var01, objptr
02f48     03 00 00 FF 
02f4c     C0 33 86 F1 | 	sub	_var01, ##1984
02f50     1C 0E 06 F1 | 	add	objptr, #28
02f54     07 33 62 FC | 	wrlong	_var01, objptr
02f58     1C 0E 86 F1 | 	sub	objptr, #28
02f5c                 | LR__0086
02f5c                 | '  ' dl_ptr:=buf_ptr-4*540
02f5c                 | ' 
02f5c                 | ' vzoom:=((mode>>2) & 3)
02f5c     39 35 02 F6 | 	mov	_var02, arg01
02f60     02 34 46 F0 | 	shr	_var02, #2
02f64     03 34 06 F5 | 	and	_var02, #3
02f68                 | ' 
02f68                 | ' 
02f68                 | ' if mode<512 '' text modes
02f68     01 00 00 FF 
02f6c     00 72 5E F2 | 	cmps	arg01, ##512 wcz
02f70     E8 01 90 3D |  if_ae	jmp	#LR__0094
02f74                 | ' 
02f74                 | '   if timings[6]>0 'borders
02f74     68 0E 06 F1 | 	add	objptr, #104
02f78     07 33 02 FB | 	rdlong	_var01, objptr
02f7c     68 0E 86 F1 | 	sub	objptr, #104
02f80     00 32 5E F2 | 	cmps	_var01, #0 wcz
02f84     D4 00 90 ED |  if_be	jmp	#LR__0091
02f88                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02f88     00 36 06 F6 | 	mov	_var03, #0
02f8c     68 0E 06 F1 | 	add	objptr, #104
02f90     07 39 02 FB | 	rdlong	_var04, objptr
02f94     68 0E 86 F1 | 	sub	objptr, #104
02f98     01 38 86 F1 | 	sub	_var04, #1
02f9c     00 38 5E F2 | 	cmps	_var04, #0 wcz
02fa0     01 3A 06 16 |  if_a	mov	_var05, #1
02fa4     01 3A 66 E6 |  if_be	neg	_var05, #1
02fa8     1D 3D 02 F6 | 	mov	_var06, _var05
02fac     1D 39 02 F1 | 	add	_var04, _var05
02fb0     74 D0 9F FE | 	loc	pa,	#(@LR__0088-@LR__0087)
02fb4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fb8                 | LR__0087
02fb8                 | '       long[dl_ptr+4*i]:=$0
02fb8     1C 0E 06 F1 | 	add	objptr, #28
02fbc     07 3F 02 FB | 	rdlong	_var07, objptr
02fc0     1C 0E 86 F1 | 	sub	objptr, #28
02fc4     1B 41 02 F6 | 	mov	_var08, _var03
02fc8     02 40 66 F0 | 	shl	_var08, #2
02fcc     20 3F 02 F1 | 	add	_var07, _var08
02fd0     1F 01 68 FC | 	wrlong	#0, _var07
02fd4     1E 37 02 F1 | 	add	_var03, _var06
02fd8     1C 37 0A F2 | 	cmp	_var03, _var04 wz
02fdc     D8 FF 9F 5D |  if_ne	jmp	#LR__0087
02fe0                 | LR__0088
02fe0                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02fe0     68 0E 06 F1 | 	add	objptr, #104
02fe4     07 37 02 FB | 	rdlong	_var03, objptr
02fe8     18 0E 06 F1 | 	add	objptr, #24
02fec     07 3B 02 FB | 	rdlong	_var05, objptr
02ff0     1D 37 02 F1 | 	add	_var03, _var05
02ff4     0C 0E 06 F1 | 	add	objptr, #12
02ff8     07 43 02 FB | 	rdlong	_var09, objptr
02ffc     01 42 86 F1 | 	sub	_var09, #1
03000     24 0E 86 F1 | 	sub	objptr, #36
03004     07 45 02 FB | 	rdlong	_var10, objptr
03008     18 0E 06 F1 | 	add	objptr, #24
0300c     07 47 02 FB | 	rdlong	_var11, objptr
03010     80 0E 86 F1 | 	sub	objptr, #128
03014     23 45 02 F1 | 	add	_var10, _var11
03018     22 43 5A F2 | 	cmps	_var09, _var10 wcz
0301c     01 40 06 16 |  if_a	mov	_var08, #1
03020     01 40 66 E6 |  if_be	neg	_var08, #1
03024     20 49 02 F6 | 	mov	_var12, _var08
03028     20 43 02 F1 | 	add	_var09, _var08
0302c     F8 CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
03030     93 00 A0 FD | 	call	#FCACHE_LOAD_
03034                 | LR__0089
03034                 | '       long[dl_ptr+4*i]:=$0
03034     1C 0E 06 F1 | 	add	objptr, #28
03038     07 4B 02 FB | 	rdlong	_var13, objptr
0303c     1C 0E 86 F1 | 	sub	objptr, #28
03040     1B 4D 02 F6 | 	mov	_var14, _var03
03044     02 4C 66 F0 | 	shl	_var14, #2
03048     26 4B 02 F1 | 	add	_var13, _var14
0304c     25 01 68 FC | 	wrlong	#0, _var13
03050     24 37 02 F1 | 	add	_var03, _var12
03054     21 37 0A F2 | 	cmp	_var03, _var09 wz
03058     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
0305c                 | LR__0090
0305c                 | LR__0091
0305c                 | '   lpc:=16<<vzoom
0305c     10 4E 06 F6 | 	mov	_var15, #16
03060     1A 4F 62 F0 | 	shl	_var15, _var02
03064                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03064     68 0E 06 F1 | 	add	objptr, #104
03068     07 37 02 FB | 	rdlong	_var03, objptr
0306c     1B 51 02 F6 | 	mov	_var16, _var03
03070     18 0E 06 F1 | 	add	objptr, #24
03074     07 53 02 FB | 	rdlong	_var17, objptr
03078     29 51 02 F1 | 	add	_var16, _var17
0307c     01 50 86 F1 | 	sub	_var16, #1
03080     18 0E 86 F1 | 	sub	objptr, #24
03084     07 41 02 FB | 	rdlong	_var08, objptr
03088     68 0E 86 F1 | 	sub	objptr, #104
0308c     20 51 5A F2 | 	cmps	_var16, _var08 wcz
03090     01 54 06 16 |  if_a	mov	_var18, #1
03094     01 54 66 E6 |  if_be	neg	_var18, #1
03098     2A 57 02 F6 | 	mov	_var19, _var18
0309c     2A 51 02 F1 | 	add	_var16, _var18
030a0     10 D0 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
030a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030a8                 | LR__0092
030a8                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
030a8     1B AF 02 F6 | 	mov	muldiva_, _var03
030ac     68 0E 06 F1 | 	add	objptr, #104
030b0     07 59 02 FB | 	rdlong	_var20, objptr
030b4     68 0E 86 F1 | 	sub	objptr, #104
030b8     2C AF 82 F1 | 	sub	muldiva_, _var20
030bc     27 B1 02 F6 | 	mov	muldivb_, _var15
030c0     CC 00 A0 FD | 	call	#unsdivide_
030c4     1A AF 42 F0 | 	shr	muldiva_, _var02
030c8     57 5B 02 F6 | 	mov	_var21, muldiva_
030cc                 | '     charline:=(i-timings[6])+/lpc
030cc     1B AF 02 F6 | 	mov	muldiva_, _var03
030d0     68 0E 06 F1 | 	add	objptr, #104
030d4     07 5D 02 FB | 	rdlong	_var22, objptr
030d8     68 0E 86 F1 | 	sub	objptr, #104
030dc     2E AF 82 F1 | 	sub	muldiva_, _var22
030e0     27 B1 02 F6 | 	mov	muldivb_, _var15
030e4     CC 00 A0 FD | 	call	#unsdivide_
030e8     58 5F 02 F6 | 	mov	_var23, muldivb_
030ec                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
030ec     07 47 02 FB | 	rdlong	_var11, objptr
030f0     90 0E 06 F1 | 	add	objptr, #144
030f4     07 59 02 FB | 	rdlong	_var20, objptr
030f8     2F 59 02 FD | 	qmul	_var20, _var23
030fc     18 60 62 FD | 	getqx	_var24
03100     02 60 66 F0 | 	shl	_var24, #2
03104     30 47 02 F1 | 	add	_var11, _var24
03108     39 4D 02 F6 | 	mov	_var14, arg01
0310c     03 4C 06 F5 | 	and	_var14, #3
03110     26 47 02 F1 | 	add	_var11, _var14
03114                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03114     0C 46 66 F0 | 	shl	_var11, #12
03118     2D 5D 02 F6 | 	mov	_var22, _var21
0311c     08 5C 66 F0 | 	shl	_var22, #8
03120     2E 47 02 F1 | 	add	_var11, _var22
03124     2F 59 02 F6 | 	mov	_var20, _var23
03128     02 58 66 F0 | 	shl	_var20, #2
0312c     2C 47 02 F1 | 	add	_var11, _var20
03130     01 46 06 F1 | 	add	_var11, #1
03134     74 0E 86 F1 | 	sub	objptr, #116
03138     07 4B 02 FB | 	rdlong	_var13, objptr
0313c     1C 0E 86 F1 | 	sub	objptr, #28
03140     1B 4D 02 F6 | 	mov	_var14, _var03
03144     02 4C 66 F0 | 	shl	_var14, #2
03148     26 4B 02 F1 | 	add	_var13, _var14
0314c     25 47 62 FC | 	wrlong	_var11, _var13
03150     2B 37 02 F1 | 	add	_var03, _var19
03154     28 37 0A F2 | 	cmp	_var03, _var16 wz
03158     4C FF 9F 5D |  if_ne	jmp	#LR__0092
0315c                 | LR__0093
0315c                 | LR__0094
0315c                 | ' 
0315c                 | ' 
0315c                 | ' 
0315c                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
0315c     01 00 00 FF 
03160     00 72 5E F2 | 	cmps	arg01, ##512 wcz
03164     A8 01 90 CD |  if_b	jmp	#LR__0102
03168                 | ' 
03168                 | '   if timings[6]>0 'borders
03168     68 0E 06 F1 | 	add	objptr, #104
0316c     07 33 02 FB | 	rdlong	_var01, objptr
03170     68 0E 86 F1 | 	sub	objptr, #104
03174     00 32 5E F2 | 	cmps	_var01, #0 wcz
03178     D4 00 90 ED |  if_be	jmp	#LR__0099
0317c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0317c     00 36 06 F6 | 	mov	_var03, #0
03180     68 0E 06 F1 | 	add	objptr, #104
03184     07 63 02 FB | 	rdlong	_var25, objptr
03188     68 0E 86 F1 | 	sub	objptr, #104
0318c     01 62 86 F1 | 	sub	_var25, #1
03190     00 62 5E F2 | 	cmps	_var25, #0 wcz
03194     01 3A 06 16 |  if_a	mov	_var05, #1
03198     01 3A 66 E6 |  if_be	neg	_var05, #1
0319c     1D 65 02 F6 | 	mov	_var26, _var05
031a0     1D 63 02 F1 | 	add	_var25, _var05
031a4     80 CE 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
031a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
031ac                 | LR__0095
031ac                 | '       long[dl_ptr+4*i]:=$0
031ac     1C 0E 06 F1 | 	add	objptr, #28
031b0     07 3F 02 FB | 	rdlong	_var07, objptr
031b4     1C 0E 86 F1 | 	sub	objptr, #28
031b8     1B 41 02 F6 | 	mov	_var08, _var03
031bc     02 40 66 F0 | 	shl	_var08, #2
031c0     20 3F 02 F1 | 	add	_var07, _var08
031c4     1F 01 68 FC | 	wrlong	#0, _var07
031c8     32 37 02 F1 | 	add	_var03, _var26
031cc     31 37 0A F2 | 	cmp	_var03, _var25 wz
031d0     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
031d4                 | LR__0096
031d4                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
031d4     68 0E 06 F1 | 	add	objptr, #104
031d8     07 37 02 FB | 	rdlong	_var03, objptr
031dc     18 0E 06 F1 | 	add	objptr, #24
031e0     07 3B 02 FB | 	rdlong	_var05, objptr
031e4     1D 37 02 F1 | 	add	_var03, _var05
031e8     0C 0E 06 F1 | 	add	objptr, #12
031ec     07 67 02 FB | 	rdlong	_var27, objptr
031f0     01 66 86 F1 | 	sub	_var27, #1
031f4     24 0E 86 F1 | 	sub	objptr, #36
031f8     07 45 02 FB | 	rdlong	_var10, objptr
031fc     18 0E 06 F1 | 	add	objptr, #24
03200     07 47 02 FB | 	rdlong	_var11, objptr
03204     80 0E 86 F1 | 	sub	objptr, #128
03208     23 45 02 F1 | 	add	_var10, _var11
0320c     22 67 5A F2 | 	cmps	_var27, _var10 wcz
03210     01 40 06 16 |  if_a	mov	_var08, #1
03214     01 40 66 E6 |  if_be	neg	_var08, #1
03218     20 69 02 F6 | 	mov	_var28, _var08
0321c     20 67 02 F1 | 	add	_var27, _var08
03220     04 CE 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03224     93 00 A0 FD | 	call	#FCACHE_LOAD_
03228                 | LR__0097
03228                 | '       long[dl_ptr+4*i]:=$0
03228     1C 0E 06 F1 | 	add	objptr, #28
0322c     07 4B 02 FB | 	rdlong	_var13, objptr
03230     1C 0E 86 F1 | 	sub	objptr, #28
03234     1B 4D 02 F6 | 	mov	_var14, _var03
03238     02 4C 66 F0 | 	shl	_var14, #2
0323c     26 4B 02 F1 | 	add	_var13, _var14
03240     25 01 68 FC | 	wrlong	#0, _var13
03244     34 37 02 F1 | 	add	_var03, _var28
03248     33 37 0A F2 | 	cmp	_var03, _var27 wz
0324c     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
03250                 | LR__0098
03250                 | LR__0099
03250                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03250     68 0E 06 F1 | 	add	objptr, #104
03254     07 37 02 FB | 	rdlong	_var03, objptr
03258     1B 6B 02 F6 | 	mov	_var29, _var03
0325c     18 0E 06 F1 | 	add	objptr, #24
03260     07 53 02 FB | 	rdlong	_var17, objptr
03264     29 6B 02 F1 | 	add	_var29, _var17
03268     01 6A 86 F1 | 	sub	_var29, #1
0326c     18 0E 86 F1 | 	sub	objptr, #24
03270     07 41 02 FB | 	rdlong	_var08, objptr
03274     68 0E 86 F1 | 	sub	objptr, #104
03278     20 6B 5A F2 | 	cmps	_var29, _var08 wcz
0327c     01 54 06 16 |  if_a	mov	_var18, #1
03280     01 54 66 E6 |  if_be	neg	_var18, #1
03284     2A 6D 02 F6 | 	mov	_var30, _var18
03288     2A 6B 02 F1 | 	add	_var29, _var18
0328c     EC CD 9F FE | 	loc	pa,	#(@LR__0101-@LR__0100)
03290     93 00 A0 FD | 	call	#FCACHE_LOAD_
03294                 | LR__0100
03294                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03294     07 47 02 FB | 	rdlong	_var11, objptr
03298     1B 5D 02 F6 | 	mov	_var22, _var03
0329c     68 0E 06 F1 | 	add	objptr, #104
032a0     07 59 02 FB | 	rdlong	_var20, objptr
032a4     2C 5D 82 F1 | 	sub	_var22, _var20
032a8     1A 5D 42 F0 | 	shr	_var22, _var02
032ac     28 0E 06 F1 | 	add	objptr, #40
032b0     07 4D 02 FB | 	rdlong	_var14, objptr
032b4     2E 4D 02 FD | 	qmul	_var14, _var22
032b8     18 6E 62 FD | 	getqx	_var31
032bc     02 6E 66 F0 | 	shl	_var31, #2
032c0     37 47 02 F1 | 	add	_var11, _var31
032c4     39 71 02 F6 | 	mov	_var32, arg01
032c8     03 70 06 F5 | 	and	_var32, #3
032cc     38 47 02 F1 | 	add	_var11, _var32
032d0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
032d0     0C 46 66 F0 | 	shl	_var11, #12
032d4     02 46 06 F1 | 	add	_var11, #2
032d8     39 5D 02 F6 | 	mov	_var22, arg01
032dc     30 5C 06 F5 | 	and	_var22, #48
032e0     02 5C 46 F0 | 	shr	_var22, #2
032e4     2E 47 02 F1 | 	add	_var11, _var22
032e8     74 0E 86 F1 | 	sub	objptr, #116
032ec     07 59 02 FB | 	rdlong	_var20, objptr
032f0     1C 0E 86 F1 | 	sub	objptr, #28
032f4     1B 61 02 F6 | 	mov	_var24, _var03
032f8     02 60 66 F0 | 	shl	_var24, #2
032fc     30 59 02 F1 | 	add	_var20, _var24
03300     2C 47 62 FC | 	wrlong	_var11, _var20
03304     36 37 02 F1 | 	add	_var03, _var30
03308     35 37 0A F2 | 	cmp	_var03, _var29 wz
0330c     84 FF 9F 5D |  if_ne	jmp	#LR__0100
03310                 | LR__0101
03310                 | LR__0102
03310                 | _hng030rm_spin2_makedl_ret
03310     2D 00 64 FD | 	ret
03314                 | 
03314                 | '       
03314                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03314                 | ' 
03314                 | ' pub start(mode,base):result
03314                 | _hng030rm_spin2_start
03314     04 5A 05 F6 | 	mov	COUNT_, #4
03318     B0 00 A0 FD | 	call	#pushregs_
0331c     39 81 02 F6 | 	mov	local01, arg01
03320                 | ' 
03320                 | ' ' initialize pointers and variables
03320                 | ' 
03320                 | ' border_ptr:=@bordercolor
03320     2C 0E 06 F1 | 	add	objptr, #44
03324     07 83 02 F6 | 	mov	local02, objptr
03328     24 0E 86 F1 | 	sub	objptr, #36
0332c     07 83 62 FC | 	wrlong	local02, objptr
03330                 | ' font_ptr:=@st_font
03330     08 00 00 FF 
03334     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
03338     04 0E 86 F1 | 	sub	objptr, #4
0333c     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03340                 | ' hdmibase:=base
03340     20 0E 06 F1 | 	add	objptr, #32
03344     07 75 62 FC | 	wrlong	arg02, objptr
03348     24 0E 86 F1 | 	sub	objptr, #36
0334c                 | ' p1:=@putpixel1
0334c     07 73 02 F6 | 	mov	arg01, objptr
03350     0F 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
03354     08 00 00 FF 
03358     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
0335c     B0 2E B0 FD | 	call	#__system___make_methodptr
03360     16 85 02 F6 | 	mov	local03, result1
03364     DC 0E 06 F1 | 	add	objptr, #220
03368     07 85 62 FC | 	wrlong	local03, objptr
0336c     DC 0E 86 F1 | 	sub	objptr, #220
03370                 | ' p2:=@putpixel2
03370     07 73 02 F6 | 	mov	arg01, objptr
03374     10 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
03378     94 2E B0 FD | 	call	#__system___make_methodptr
0337c     16 85 02 F6 | 	mov	local03, result1
03380     E0 0E 06 F1 | 	add	objptr, #224
03384     07 85 62 FC | 	wrlong	local03, objptr
03388     E0 0E 86 F1 | 	sub	objptr, #224
0338c                 | ' p4:=@putpixel4
0338c     07 73 02 F6 | 	mov	arg01, objptr
03390     11 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
03394     78 2E B0 FD | 	call	#__system___make_methodptr
03398     16 85 02 F6 | 	mov	local03, result1
0339c     E4 0E 06 F1 | 	add	objptr, #228
033a0     07 85 62 FC | 	wrlong	local03, objptr
033a4     E4 0E 86 F1 | 	sub	objptr, #228
033a8                 | ' p8:=@putpixel8
033a8     07 73 02 F6 | 	mov	arg01, objptr
033ac     12 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
033b0     5C 2E B0 FD | 	call	#__system___make_methodptr
033b4     16 85 02 F6 | 	mov	local03, result1
033b8     E8 0E 06 F1 | 	add	objptr, #232
033bc     07 85 62 FC | 	wrlong	local03, objptr
033c0     E8 0E 86 F1 | 	sub	objptr, #232
033c4                 | ' 
033c4                 | ' 
033c4                 | ' ' the mode has to be set here to enable computing the buffer length
033c4                 | ' 
033c4                 | ' setmode(mode)
033c4     40 73 02 F6 | 	mov	arg01, local01
033c8     68 F5 BF FD | 	call	#_hng030rm_spin2_setmode
033cc                 | ' 
033cc                 | ' vblank_ptr:=@vblank
033cc     40 0E 06 F1 | 	add	objptr, #64
033d0     07 83 02 F6 | 	mov	local02, objptr
033d4     34 0E 86 F1 | 	sub	objptr, #52
033d8     07 83 62 FC | 	wrlong	local02, objptr
033dc                 | ' cursor_ptr:=@cursor_x
033dc     28 0E 06 F1 | 	add	objptr, #40
033e0     07 83 02 F6 | 	mov	local02, objptr
033e4     24 0E 86 F1 | 	sub	objptr, #36
033e8     07 83 62 FC | 	wrlong	local02, objptr
033ec                 | ' 
033ec                 | ' fontnum_ptr:=@fontnum
033ec     88 0E 06 F1 | 	add	objptr, #136
033f0     07 83 02 F6 | 	mov	local02, objptr
033f4     78 0E 86 F1 | 	sub	objptr, #120
033f8     07 83 62 FC | 	wrlong	local02, objptr
033fc                 | ' 
033fc                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
033fc     78 0E 06 F1 | 	add	objptr, #120
03400     07 01 68 FC | 	wrlong	#0, objptr
03404                 | ' bytemove(@colors,@vgacolors,16)
03404     1C 0E 06 F1 | 	add	objptr, #28
03408     07 73 02 F6 | 	mov	arg01, objptr
0340c     B4 0E 86 F1 | 	sub	objptr, #180
03410     0F 00 00 FF 
03414     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
03418     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0341c     0F 00 00 FF 
03420     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03424     10 76 06 F6 | 	mov	arg03, #16
03428     B4 2C B0 FD | 	call	#__system____builtin_memmove
0342c                 | ' 
0342c                 | ' ' initialize a cursor
0342c                 | ' 
0342c                 | ' cursor_x:=0
0342c     34 0E 06 F1 | 	add	objptr, #52
03430     07 01 48 FC | 	wrbyte	#0, objptr
03434                 | ' cursor_y:=0
03434     01 0E 06 F1 | 	add	objptr, #1
03438     07 01 48 FC | 	wrbyte	#0, objptr
0343c                 | ' cursor_sh:=14
0343c     01 0E 06 F1 | 	add	objptr, #1
03440     07 1D 48 FC | 	wrbyte	#14, objptr
03444     36 0E 86 F1 | 	sub	objptr, #54
03448                 | ' 
03448                 | ' 
03448                 | ' ' start the cog
03448                 | ' 
03448                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
03448     0F 00 00 FF 
0344c     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
03450     0D 75 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03454     0F 00 00 FF 
03458     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
0345c     07 77 02 F6 | 	mov	arg03, objptr
03460     10 72 06 F6 | 	mov	arg01, #16
03464     28 76 62 FD | 	setq	arg03
03468     3A 73 F2 FC | 	coginit	arg01, arg02 wc
0346c     01 72 66 C6 |  if_b	neg	arg01, #1
03470     39 2D 02 F6 | 	mov	result1, arg01
03474     16 87 02 F6 | 	mov	local04, result1
03478     28 0E 06 F1 | 	add	objptr, #40
0347c     07 87 62 FC | 	wrlong	local04, objptr
03480     28 0E 86 F1 | 	sub	objptr, #40
03484                 | ' waitms(20)
03484     14 72 06 F6 | 	mov	arg01, #20
03488     8C 2F B0 FD | 	call	#__system___waitms
0348c                 | ' 
0348c                 | ' ' clear the screen and set the colors to green on black
0348c                 | ' 
0348c                 | ' cls(c_green,c_black)
0348c     C7 72 06 F6 | 	mov	arg01, #199
03490     00 74 06 F6 | 	mov	arg02, #0
03494     18 ED BF FD | 	call	#_hng030rm_spin2_cls
03498                 | ' setbordercolor(0,0,128)
03498     00 72 06 F6 | 	mov	arg01, #0
0349c     00 74 06 F6 | 	mov	arg02, #0
034a0     80 76 06 F6 | 	mov	arg03, #128
034a4     E4 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
034a8                 | ' setwritecolors(c_green,c_black)
034a8                 | ' 
034a8                 | ' 
034a8                 | ' write_color:=ff
034a8     38 0E 06 F1 | 	add	objptr, #56
034ac     07 8F 69 FC | 	wrlong	#199, objptr
034b0                 | ' write_background:=bb
034b0     04 0E 06 F1 | 	add	objptr, #4
034b4     07 01 68 FC | 	wrlong	#0, objptr
034b8                 | ' 
034b8                 | ' return cog
034b8     14 0E 86 F1 | 	sub	objptr, #20
034bc     07 2D 02 FB | 	rdlong	result1, objptr
034c0     28 0E 86 F1 | 	sub	objptr, #40
034c4     AF F0 03 F6 | 	mov	ptra, fp
034c8     BF 00 A0 FD | 	call	#popregs_
034cc                 | _hng030rm_spin2_start_ret
034cc     2D 00 64 FD | 	ret
034d0                 | 
034d0                 | ' 'this is the object and not a program
034d0                 | ' 
034d0                 | ' pub start() :cog
034d0                 | _retrocog_spin2_start
034d0     02 5A 05 F6 | 	mov	COUNT_, #2
034d4     B0 00 A0 FD | 	call	#pushregs_
034d8                 | ' 
034d8                 | ' cog:=cogspin(16,serialcog(),@serialstack)
034d8     07 81 02 F6 | 	mov	local01, objptr
034dc     01 00 00 FF 
034e0     40 0F 06 F1 | 	add	objptr, ##832
034e4     07 83 02 F6 | 	mov	local02, objptr
034e8     41 81 62 FC | 	wrlong	local01, local02
034ec     04 82 06 F1 | 	add	local02, #4
034f0     41 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
034f4     07 77 02 F6 | 	mov	arg03, objptr
034f8     01 00 00 FF 
034fc     40 0F 86 F1 | 	sub	objptr, ##832
03500     10 72 06 F6 | 	mov	arg01, #16
03504     28 76 62 FD | 	setq	arg03
03508     04 73 F2 FC | 	coginit	arg01, entryptr__ wc
0350c     01 72 66 C6 |  if_b	neg	arg01, #1
03510     39 2D 02 F6 | 	mov	result1, arg01
03514                 | ' return cog
03514     AF F0 03 F6 | 	mov	ptra, fp
03518     BF 00 A0 FD | 	call	#popregs_
0351c                 | _retrocog_spin2_start_ret
0351c     2D 00 64 FD | 	ret
03520                 | 
03520                 | ' 
03520                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03520                 | _retrocog_spin2_serialcog
03520     0C 5A 05 F6 | 	mov	COUNT_, #12
03524     B0 00 A0 FD | 	call	#pushregs_
03528                 | ' 
03528                 | ' 'start serial and midi
03528                 | ' 
03528                 | ' serial_start(rxpin, txpin, baudrate)
03528     20 72 06 F6 | 	mov	arg01, #32
0352c     21 74 06 F6 | 	mov	arg02, #33
03530     A6 0E 00 FF 
03534     00 76 06 F6 | 	mov	arg03, ##1920000
03538     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0353c                 | ' serial_start(midiin,midiout,mbaudrate)
0353c     1D 72 06 F6 | 	mov	arg01, #29
03540     1E 74 06 F6 | 	mov	arg02, #30
03544     3D 00 00 FF 
03548     12 76 06 F6 | 	mov	arg03, ##31250
0354c     98 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03550                 | ' serial_start(srxpin,stxpin,sbaudrate)
03550     42 0F 00 FF 
03554     80 80 06 F6 | 	mov	local01, ##2000000
03558     3F 72 06 F6 | 	mov	arg01, #63
0355c     3E 74 06 F6 | 	mov	arg02, #62
03560     42 0F 00 FF 
03564     80 76 06 F6 | 	mov	arg03, ##2000000
03568     7C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0356c                 | ' 
0356c                 | ' mb:=(-1)
0356c     01 82 66 F6 | 	neg	local02, #1
03570                 | ' b:=(-1)
03570     01 84 66 F6 | 	neg	local03, #1
03574                 | ' 
03574                 | ' mousefront:=0
03574     00 86 06 F6 | 	mov	local04, #0
03578     08 0E 06 F1 | 	add	objptr, #8
0357c     07 01 68 FC | 	wrlong	#0, objptr
03580                 | ' mousetail:=0
03580     04 0E 06 F1 | 	add	objptr, #4
03584     07 01 68 FC | 	wrlong	#0, objptr
03588     0C 0E 86 F1 | 	sub	objptr, #12
0358c                 | ' kbdfront:=0
0358c     07 01 68 FC | 	wrlong	#0, objptr
03590                 | ' kbdtail:=0
03590     04 0E 06 F1 | 	add	objptr, #4
03594     07 01 68 FC | 	wrlong	#0, objptr
03598                 | ' midifront:=0
03598     0C 0E 06 F1 | 	add	objptr, #12
0359c     07 01 68 FC | 	wrlong	#0, objptr
035a0                 | ' miditail:=0
035a0     04 0E 06 F1 | 	add	objptr, #4
035a4     07 01 68 FC | 	wrlong	#0, objptr
035a8                 | ' serialfront:=0
035a8     04 0E 06 F1 | 	add	objptr, #4
035ac     07 01 68 FC | 	wrlong	#0, objptr
035b0                 | ' serialtail:=0
035b0     04 0E 06 F1 | 	add	objptr, #4
035b4     07 01 68 FC | 	wrlong	#0, objptr
035b8                 | ' long[$30]:=0
035b8     30 00 6C FC | 	wrlong	#0, #48
035bc                 | ' long[$34]:=0
035bc     34 00 6C FC | 	wrlong	#0, #52
035c0                 | ' long[$38]:=0
035c0     38 00 6C FC | 	wrlong	#0, #56
035c4     1C 0E 86 F1 | 	sub	objptr, #28
035c8                 | ' long[$3C]:=0
035c8     3C 00 6C FC | 	wrlong	#0, #60
035cc                 | ' 
035cc                 | ' repeat
035cc                 | LR__0103
035cc                 | ' 
035cc                 | ' '  repeat 
035cc                 | '   rr:=rxcheck(rxpin)
035cc     20 72 06 F6 | 	mov	arg01, #32
035d0     90 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
035d4     16 89 02 F6 | 	mov	local05, result1
035d8                 | '   mrr:=rxcheck(midiin)
035d8     1D 72 06 F6 | 	mov	arg01, #29
035dc     84 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
035e0     16 8B 02 F6 | 	mov	local06, result1
035e4                 | '   srr:=rxcheck(srxpin)
035e4     3F 86 06 F6 | 	mov	local04, #63
035e8     3F 72 06 F6 | 	mov	arg01, #63
035ec     74 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
035f0     16 8D 02 F6 | 	mov	local07, result1
035f4     46 8F 02 F6 | 	mov	local08, local07
035f8                 | ' 
035f8                 | ' '  until rr>=0 || mrr>=0  || srr>=0
035f8                 | ' 
035f8                 | '   
035f8                 | ' ' midi. Must be >= $80 for a command
035f8                 | ' '$80-$8F - 3 bytes note off. note, velocity
035f8                 | ' '$90-$9F - 3 bytes note on, note, velocity
035f8                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
035f8                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
035f8                 | ' '$C0-$CF - 2 bytes program change
035f8                 | ' '$D0-$DF - 2 bytes mono aftertouch
035f8                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
035f8                 | ' '$F0-$FF - 1 byte
035f8                 | '   
035f8                 | '   if srr>=0
035f8     00 8E 5E F2 | 	cmps	local08, #0 wcz
035fc     78 00 90 CD |  if_b	jmp	#LR__0105
03600                 | '   
03600                 | '     if serialfront<>((serialtail-1) //32)
03600     1C 0E 06 F1 | 	add	objptr, #28
03604     07 8D 02 FB | 	rdlong	local07, objptr
03608     46 87 02 F6 | 	mov	local04, local07
0360c     01 86 86 F1 | 	sub	local04, #1
03610     43 81 52 F6 | 	abs	local01, local04 wc
03614     1F 80 06 F5 | 	and	local01, #31
03618     40 81 62 C6 |  if_b	neg	local01, local01
0361c     04 0E 86 F1 | 	sub	objptr, #4
03620     07 91 02 FB | 	rdlong	local09, objptr
03624     18 0E 86 F1 | 	sub	objptr, #24
03628     48 93 02 F6 | 	mov	local10, local09
0362c     40 93 0A F2 | 	cmp	local10, local01 wz
03630     44 00 90 AD |  if_e	jmp	#LR__0104
03634                 | '       serialbuf[serialfront]:=srr
03634     18 0E 06 F1 | 	add	objptr, #24
03638     07 87 02 FB | 	rdlong	local04, objptr
0363c     01 00 00 FF 
03640     08 0F 06 F1 | 	add	objptr, ##776
03644     07 87 02 F1 | 	add	local04, objptr
03648     43 8F 42 FC | 	wrbyte	local08, local04
0364c                 | '       serialfront+=1
0364c     01 00 00 FF 
03650     08 0F 86 F1 | 	sub	objptr, ##776
03654     07 81 02 FB | 	rdlong	local01, objptr
03658     01 80 06 F1 | 	add	local01, #1
0365c     07 81 62 FC | 	wrlong	local01, objptr
03660                 | '       serialfront:=serialfront // 32
03660     40 8D 02 F6 | 	mov	local07, local01
03664     46 87 52 F6 | 	abs	local04, local07 wc
03668     1F 86 06 F5 | 	and	local04, #31
0366c     43 87 62 C6 |  if_b	neg	local04, local04
03670     07 87 62 FC | 	wrlong	local04, objptr
03674     18 0E 86 F1 | 	sub	objptr, #24
03678                 | LR__0104
03678                 | LR__0105
03678                 | '     
03678                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03678     80 8A 5E F2 | 	cmps	local06, #128 wcz
0367c     08 00 90 CD |  if_b	jmp	#LR__0106
03680     BF 8A 5E F2 | 	cmps	local06, #191 wcz
03684     10 00 90 ED |  if_be	jmp	#LR__0107
03688                 | LR__0106
03688     E0 8A 5E F2 | 	cmps	local06, #224 wcz
0368c     18 00 90 CD |  if_b	jmp	#LR__0108
03690     EF 8A 5E F2 | 	cmps	local06, #239 wcz
03694     10 00 90 1D |  if_a	jmp	#LR__0108
03698                 | LR__0107
03698                 | '     mb:=2
03698     02 82 06 F6 | 	mov	local02, #2
0369c                 | '     midireport:=mrr<<24
0369c     45 87 02 F6 | 	mov	local04, local06
036a0     18 86 66 F0 | 	shl	local04, #24
036a4     43 95 02 F6 | 	mov	local11, local04
036a8                 | LR__0108
036a8                 | ' 
036a8                 | '   if (mrr>=$C0) && (mrr<=$DF)
036a8     C0 8A 5E F2 | 	cmps	local06, #192 wcz
036ac     18 00 90 CD |  if_b	jmp	#LR__0109
036b0     DF 8A 5E F2 | 	cmps	local06, #223 wcz
036b4     10 00 90 1D |  if_a	jmp	#LR__0109
036b8                 | '     mb:=1
036b8     01 82 06 F6 | 	mov	local02, #1
036bc                 | '     midireport:=mrr<<24
036bc     45 87 02 F6 | 	mov	local04, local06
036c0     18 86 66 F0 | 	shl	local04, #24
036c4     43 95 02 F6 | 	mov	local11, local04
036c8                 | LR__0109
036c8                 | '   
036c8                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
036c8     F0 8A 5E F2 | 	cmps	local06, #240 wcz
036cc                 | '     mb:=4
036cc     04 82 06 36 |  if_ae	mov	local02, #4
036d0                 | '     midireport:=mrr<<24  
036d0     45 95 02 36 |  if_ae	mov	local11, local06
036d4     18 94 66 30 |  if_ae	shl	local11, #24
036d8                 | '   
036d8                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
036d8     80 8A 5E F2 | 	cmps	local06, #128 wcz
036dc     44 00 90 3D |  if_ae	jmp	#LR__0111
036e0     00 82 5E F2 | 	cmps	local02, #0 wcz
036e4     3C 00 90 ED |  if_be	jmp	#LR__0111
036e8     00 8A 5E F2 | 	cmps	local06, #0 wcz
036ec     34 00 90 CD |  if_b	jmp	#LR__0111
036f0                 | '     
036f0                 | '     mb--
036f0     41 87 02 F6 | 	mov	local04, local02
036f4     41 8D 02 F6 | 	mov	local07, local02
036f8     01 8C 86 F1 | 	sub	local07, #1
036fc     46 83 02 F6 | 	mov	local02, local07
03700                 | '     if mb<3
03700     03 82 5E F2 | 	cmps	local02, #3 wcz
03704     1C 00 90 3D |  if_ae	jmp	#LR__0110
03708                 | '       midireport+=mrr<<(mb<<3)
03708     4A 87 02 F6 | 	mov	local04, local11
0370c     45 8D 02 F6 | 	mov	local07, local06
03710     41 81 02 F6 | 	mov	local01, local02
03714     03 80 66 F0 | 	shl	local01, #3
03718     40 8D 62 F0 | 	shl	local07, local01
0371c     46 87 02 F1 | 	add	local04, local07
03720     43 95 02 F6 | 	mov	local11, local04
03724                 | LR__0110
03724                 | LR__0111
03724                 | '   
03724                 | '   if mb==0
03724     00 82 0E F2 | 	cmp	local02, #0 wz
03728     80 00 90 5D |  if_ne	jmp	#LR__0113
0372c                 | '     
0372c                 | '     if midifront<>((miditail-1) //32)
0372c     14 0E 06 F1 | 	add	objptr, #20
03730     07 8D 02 FB | 	rdlong	local07, objptr
03734     46 87 02 F6 | 	mov	local04, local07
03738     01 86 86 F1 | 	sub	local04, #1
0373c     43 81 52 F6 | 	abs	local01, local04 wc
03740     1F 80 06 F5 | 	and	local01, #31
03744     40 81 62 C6 |  if_b	neg	local01, local01
03748     04 0E 86 F1 | 	sub	objptr, #4
0374c     07 91 02 FB | 	rdlong	local09, objptr
03750     10 0E 86 F1 | 	sub	objptr, #16
03754     48 93 02 F6 | 	mov	local10, local09
03758     40 93 0A F2 | 	cmp	local10, local01 wz
0375c     48 00 90 AD |  if_e	jmp	#LR__0112
03760                 | '       midibuf[midifront]:=midireport
03760     10 0E 06 F1 | 	add	objptr, #16
03764     07 87 02 FB | 	rdlong	local04, objptr
03768     02 86 66 F0 | 	shl	local04, #2
0376c     01 00 00 FF 
03770     90 0E 06 F1 | 	add	objptr, ##656
03774     07 87 02 F1 | 	add	local04, objptr
03778     43 95 62 FC | 	wrlong	local11, local04
0377c                 | '       midifront+=1
0377c     01 00 00 FF 
03780     90 0E 86 F1 | 	sub	objptr, ##656
03784     07 81 02 FB | 	rdlong	local01, objptr
03788     01 80 06 F1 | 	add	local01, #1
0378c     07 81 62 FC | 	wrlong	local01, objptr
03790                 | '       midifront:=midifront // 32
03790     40 8D 02 F6 | 	mov	local07, local01
03794     46 87 52 F6 | 	abs	local04, local07 wc
03798     1F 86 06 F5 | 	and	local04, #31
0379c     43 87 62 C6 |  if_b	neg	local04, local04
037a0     07 87 62 FC | 	wrlong	local04, objptr
037a4     10 0E 86 F1 | 	sub	objptr, #16
037a8                 | LR__0112
037a8                 | '     mb:=(-1)
037a8     01 82 66 F6 | 	neg	local02, #1
037ac                 | LR__0113
037ac                 | ' 
037ac                 | ' 'Keyboard and mouse
037ac                 | ' 
037ac                 | '   if (rr>=$80) && (rr<>$FF)
037ac     80 88 5E F2 | 	cmps	local05, #128 wcz
037b0     18 00 90 CD |  if_b	jmp	#LR__0114
037b4     FF 88 0E F2 | 	cmp	local05, #255 wz
037b8     10 00 90 AD |  if_e	jmp	#LR__0114
037bc                 | '     b:=3
037bc     03 84 06 F6 | 	mov	local03, #3
037c0                 | '     kbmreport:=rr<<24
037c0     44 87 02 F6 | 	mov	local04, local05
037c4     18 86 66 F0 | 	shl	local04, #24
037c8     43 97 02 F6 | 	mov	local12, local04
037cc                 | LR__0114
037cc                 | '   
037cc                 | '   if (rr<$80) && (b>0) && (rr>=0)
037cc     80 88 5E F2 | 	cmps	local05, #128 wcz
037d0     30 00 90 3D |  if_ae	jmp	#LR__0115
037d4     00 84 5E F2 | 	cmps	local03, #0 wcz
037d8     28 00 90 ED |  if_be	jmp	#LR__0115
037dc     00 88 5E F2 | 	cmps	local05, #0 wcz
037e0     20 00 90 CD |  if_b	jmp	#LR__0115
037e4                 | '     b--
037e4     01 84 86 F1 | 	sub	local03, #1
037e8                 | '     kbmreport+=rr<<(b<<3)  
037e8     4B 87 02 F6 | 	mov	local04, local12
037ec     44 8D 02 F6 | 	mov	local07, local05
037f0     42 81 02 F6 | 	mov	local01, local03
037f4     03 80 66 F0 | 	shl	local01, #3
037f8     40 8D 62 F0 | 	shl	local07, local01
037fc     46 87 02 F1 | 	add	local04, local07
03800     43 97 02 F6 | 	mov	local12, local04
03804                 | LR__0115
03804                 | '   
03804                 | '   if (rr==$FF)
03804     FF 88 0E F2 | 	cmp	local05, #255 wz
03808                 | '     b:=0   
03808     00 84 06 A6 |  if_e	mov	local03, #0
0380c                 | ' 
0380c                 | '   if b==0  
0380c     00 84 0E F2 | 	cmp	local03, #0 wz
03810     0C 01 90 5D |  if_ne	jmp	#LR__0120
03814                 | '  
03814                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03814     00 00 40 FF 
03818     00 96 1E F2 | 	cmp	local12, ##-2147483648 wcz
0381c     80 00 90 CD |  if_b	jmp	#LR__0117
03820     00 80 43 FF 
03824     00 96 1E F2 | 	cmp	local12, ##-2030043136 wcz
03828     74 00 90 3D |  if_ae	jmp	#LR__0117
0382c                 | '       if mousefront<>((mousetail-1) //128)
0382c     0C 0E 06 F1 | 	add	objptr, #12
03830     07 8D 02 FB | 	rdlong	local07, objptr
03834     46 87 02 F6 | 	mov	local04, local07
03838     01 86 86 F1 | 	sub	local04, #1
0383c     43 81 52 F6 | 	abs	local01, local04 wc
03840     7F 80 06 F5 | 	and	local01, #127
03844     40 81 62 C6 |  if_b	neg	local01, local01
03848     04 0E 86 F1 | 	sub	objptr, #4
0384c     07 91 02 FB | 	rdlong	local09, objptr
03850     08 0E 86 F1 | 	sub	objptr, #8
03854     48 93 02 F6 | 	mov	local10, local09
03858     40 93 0A F2 | 	cmp	local10, local01 wz
0385c     40 00 90 AD |  if_e	jmp	#LR__0116
03860                 | '         mousebuf[mousefront]:=kbmreport
03860     08 0E 06 F1 | 	add	objptr, #8
03864     07 87 02 FB | 	rdlong	local04, objptr
03868     02 86 66 F0 | 	shl	local04, #2
0386c     98 0E 06 F1 | 	add	objptr, #152
03870     07 87 02 F1 | 	add	local04, objptr
03874     43 97 62 FC | 	wrlong	local12, local04
03878                 | '         mousefront+=1
03878     98 0E 86 F1 | 	sub	objptr, #152
0387c     07 81 02 FB | 	rdlong	local01, objptr
03880     01 80 06 F1 | 	add	local01, #1
03884     07 81 62 FC | 	wrlong	local01, objptr
03888                 | '         mousefront:=mousefront // 128
03888     40 8D 02 F6 | 	mov	local07, local01
0388c     46 87 52 F6 | 	abs	local04, local07 wc
03890     7F 86 06 F5 | 	and	local04, #127
03894     43 87 62 C6 |  if_b	neg	local04, local04
03898     07 87 62 FC | 	wrlong	local04, objptr
0389c     08 0E 86 F1 | 	sub	objptr, #8
038a0                 | LR__0116
038a0                 | LR__0117
038a0                 | '     b:=(-1)
038a0     01 84 66 F6 | 	neg	local03, #1
038a4                 | ' 
038a4                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
038a4     00 80 43 FF 
038a8     00 96 1E F2 | 	cmp	local12, ##-2030043136 wcz
038ac     6C 00 90 CD |  if_b	jmp	#LR__0119
038b0     00 00 45 FF 
038b4     00 96 1E F2 | 	cmp	local12, ##-1979711488 wcz
038b8     60 00 90 3D |  if_ae	jmp	#LR__0119
038bc                 | '       if kbdfront<>((kbdtail-1) //32)
038bc     04 0E 06 F1 | 	add	objptr, #4
038c0     07 8D 02 FB | 	rdlong	local07, objptr
038c4     04 0E 86 F1 | 	sub	objptr, #4
038c8     46 87 02 F6 | 	mov	local04, local07
038cc     01 86 86 F1 | 	sub	local04, #1
038d0     43 81 52 F6 | 	abs	local01, local04 wc
038d4     1F 80 06 F5 | 	and	local01, #31
038d8     40 81 62 C6 |  if_b	neg	local01, local01
038dc     07 93 02 FB | 	rdlong	local10, objptr
038e0     40 93 0A F2 | 	cmp	local10, local01 wz
038e4     34 00 90 AD |  if_e	jmp	#LR__0118
038e8                 | '         kbdbuf[kbdfront]:=kbmreport
038e8     07 87 02 FB | 	rdlong	local04, objptr
038ec     02 86 66 F0 | 	shl	local04, #2
038f0     20 0E 06 F1 | 	add	objptr, #32
038f4     07 87 02 F1 | 	add	local04, objptr
038f8     43 97 62 FC | 	wrlong	local12, local04
038fc                 | '         kbdfront+=1
038fc     20 0E 86 F1 | 	sub	objptr, #32
03900     07 8D 02 FB | 	rdlong	local07, objptr
03904     01 8C 06 F1 | 	add	local07, #1
03908     07 8D 62 FC | 	wrlong	local07, objptr
0390c                 | '         kbdfront:=kbdfront // 32
0390c     46 87 52 F6 | 	abs	local04, local07 wc
03910     1F 86 06 F5 | 	and	local04, #31
03914     43 87 62 C6 |  if_b	neg	local04, local04
03918     07 87 62 FC | 	wrlong	local04, objptr
0391c                 | LR__0118
0391c                 | LR__0119
0391c                 | '     b:=(-1)
0391c     01 84 66 F6 | 	neg	local03, #1
03920                 | LR__0120
03920                 | ' 
03920                 | ' 
03920                 | '   if long[$30]==0
03920     30 86 0E FB | 	rdlong	local04, #48 wz
03924     5C 00 90 5D |  if_ne	jmp	#LR__0122
03928                 | '     if kbdfront<>kbdtail
03928     07 87 02 FB | 	rdlong	local04, objptr
0392c     04 0E 06 F1 | 	add	objptr, #4
03930     07 81 02 FB | 	rdlong	local01, objptr
03934     04 0E 86 F1 | 	sub	objptr, #4
03938     40 87 0A F2 | 	cmp	local04, local01 wz
0393c     44 00 90 AD |  if_e	jmp	#LR__0121
03940                 | '       long[$30]:=kbdbuf[kbdtail]
03940     04 0E 06 F1 | 	add	objptr, #4
03944     07 87 02 FB | 	rdlong	local04, objptr
03948     02 86 66 F0 | 	shl	local04, #2
0394c     1C 0E 06 F1 | 	add	objptr, #28
03950     07 87 02 F1 | 	add	local04, objptr
03954     43 93 02 FB | 	rdlong	local10, local04
03958     30 92 66 FC | 	wrlong	local10, #48
0395c                 | '       kbdtail++
0395c     1C 0E 86 F1 | 	sub	objptr, #28
03960     07 93 02 FB | 	rdlong	local10, objptr
03964     49 81 02 F6 | 	mov	local01, local10
03968     01 80 06 F1 | 	add	local01, #1
0396c     07 81 62 FC | 	wrlong	local01, objptr
03970                 | '       kbdtail:= kbdtail // 32
03970     40 87 52 F6 | 	abs	local04, local01 wc
03974     1F 86 06 F5 | 	and	local04, #31
03978     43 87 62 C6 |  if_b	neg	local04, local04
0397c     07 87 62 FC | 	wrlong	local04, objptr
03980     04 0E 86 F1 | 	sub	objptr, #4
03984                 | LR__0121
03984                 | LR__0122
03984                 | '       
03984                 | '   if long[$34]==0
03984     34 86 0E FB | 	rdlong	local04, #52 wz
03988     64 00 90 5D |  if_ne	jmp	#LR__0124
0398c                 | '     if mousefront<>mousetail
0398c     08 0E 06 F1 | 	add	objptr, #8
03990     07 87 02 FB | 	rdlong	local04, objptr
03994     04 0E 06 F1 | 	add	objptr, #4
03998     07 93 02 FB | 	rdlong	local10, objptr
0399c     0C 0E 86 F1 | 	sub	objptr, #12
039a0     49 81 02 F6 | 	mov	local01, local10
039a4     40 87 0A F2 | 	cmp	local04, local01 wz
039a8     44 00 90 AD |  if_e	jmp	#LR__0123
039ac                 | '       long[$34]:=mousebuf[mousetail]
039ac     0C 0E 06 F1 | 	add	objptr, #12
039b0     07 87 02 FB | 	rdlong	local04, objptr
039b4     02 86 66 F0 | 	shl	local04, #2
039b8     94 0E 06 F1 | 	add	objptr, #148
039bc     07 87 02 F1 | 	add	local04, objptr
039c0     43 93 02 FB | 	rdlong	local10, local04
039c4     34 92 66 FC | 	wrlong	local10, #52
039c8                 | '       mousetail++
039c8     94 0E 86 F1 | 	sub	objptr, #148
039cc     07 93 02 FB | 	rdlong	local10, objptr
039d0     49 81 02 F6 | 	mov	local01, local10
039d4     01 80 06 F1 | 	add	local01, #1
039d8     07 81 62 FC | 	wrlong	local01, objptr
039dc                 | '       mousetail:= mousetail // 128
039dc     40 87 52 F6 | 	abs	local04, local01 wc
039e0     7F 86 06 F5 | 	and	local04, #127
039e4     43 87 62 C6 |  if_b	neg	local04, local04
039e8     07 87 62 FC | 	wrlong	local04, objptr
039ec     0C 0E 86 F1 | 	sub	objptr, #12
039f0                 | LR__0123
039f0                 | LR__0124
039f0                 | ' 
039f0                 | '       
039f0                 | '   if long[$38]==0
039f0     38 86 0E FB | 	rdlong	local04, #56 wz
039f4     6C 00 90 5D |  if_ne	jmp	#LR__0126
039f8                 | '     if midifront<>miditail
039f8     10 0E 06 F1 | 	add	objptr, #16
039fc     07 87 02 FB | 	rdlong	local04, objptr
03a00     04 0E 06 F1 | 	add	objptr, #4
03a04     07 93 02 FB | 	rdlong	local10, objptr
03a08     14 0E 86 F1 | 	sub	objptr, #20
03a0c     49 81 02 F6 | 	mov	local01, local10
03a10     40 87 0A F2 | 	cmp	local04, local01 wz
03a14     4C 00 90 AD |  if_e	jmp	#LR__0125
03a18                 | '       long[$38]:=midibuf[miditail]
03a18     14 0E 06 F1 | 	add	objptr, #20
03a1c     07 87 02 FB | 	rdlong	local04, objptr
03a20     02 86 66 F0 | 	shl	local04, #2
03a24     01 00 00 FF 
03a28     8C 0E 06 F1 | 	add	objptr, ##652
03a2c     07 87 02 F1 | 	add	local04, objptr
03a30     43 93 02 FB | 	rdlong	local10, local04
03a34     38 92 66 FC | 	wrlong	local10, #56
03a38                 | '       miditail++
03a38     01 00 00 FF 
03a3c     8C 0E 86 F1 | 	sub	objptr, ##652
03a40     07 93 02 FB | 	rdlong	local10, objptr
03a44     49 81 02 F6 | 	mov	local01, local10
03a48     01 80 06 F1 | 	add	local01, #1
03a4c     07 81 62 FC | 	wrlong	local01, objptr
03a50                 | '       miditail:= miditail // 32
03a50     40 87 52 F6 | 	abs	local04, local01 wc
03a54     1F 86 06 F5 | 	and	local04, #31
03a58     43 87 62 C6 |  if_b	neg	local04, local04
03a5c     07 87 62 FC | 	wrlong	local04, objptr
03a60     14 0E 86 F1 | 	sub	objptr, #20
03a64                 | LR__0125
03a64                 | LR__0126
03a64                 | '       
03a64                 | '   if long[$3c]==0
03a64     3C 86 0E FB | 	rdlong	local04, #60 wz
03a68     60 FB 9F 5D |  if_ne	jmp	#LR__0103
03a6c                 | '     if serialfront<>serialtail
03a6c     18 0E 06 F1 | 	add	objptr, #24
03a70     07 87 02 FB | 	rdlong	local04, objptr
03a74     04 0E 06 F1 | 	add	objptr, #4
03a78     07 93 02 FB | 	rdlong	local10, objptr
03a7c     1C 0E 86 F1 | 	sub	objptr, #28
03a80     49 81 02 F6 | 	mov	local01, local10
03a84     40 87 0A F2 | 	cmp	local04, local01 wz
03a88     40 FB 9F AD |  if_e	jmp	#LR__0103
03a8c                 | '       byte[$3c]:=255
03a8c     3C FE 4D FC | 	wrbyte	#255, #60
03a90                 | '       byte[$3D]:=serialbuf[serialtail]
03a90     1C 0E 06 F1 | 	add	objptr, #28
03a94     07 87 02 FB | 	rdlong	local04, objptr
03a98     01 00 00 FF 
03a9c     04 0F 06 F1 | 	add	objptr, ##772
03aa0     07 87 02 F1 | 	add	local04, objptr
03aa4     43 93 C2 FA | 	rdbyte	local10, local04
03aa8     3D 92 46 FC | 	wrbyte	local10, #61
03aac                 | '       serialtail++
03aac     01 00 00 FF 
03ab0     04 0F 86 F1 | 	sub	objptr, ##772
03ab4     07 93 02 FB | 	rdlong	local10, objptr
03ab8     49 81 02 F6 | 	mov	local01, local10
03abc     01 80 06 F1 | 	add	local01, #1
03ac0     07 81 62 FC | 	wrlong	local01, objptr
03ac4                 | '       serialtail:= serialtail // 32
03ac4     40 87 52 F6 | 	abs	local04, local01 wc
03ac8     1F 86 06 F5 | 	and	local04, #31
03acc     43 87 62 C6 |  if_b	neg	local04, local04
03ad0     07 87 62 FC | 	wrlong	local04, objptr
03ad4     1C 0E 86 F1 | 	sub	objptr, #28
03ad8     F0 FA 9F FD | 	jmp	#LR__0103
03adc     AF F0 03 F6 | 	mov	ptra, fp
03ae0     BF 00 A0 FD | 	call	#popregs_
03ae4                 | _retrocog_spin2_serialcog_ret
03ae4     2D 00 64 FD | 	ret
03ae8                 | 
03ae8                 | '       
03ae8                 | ' 
03ae8                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03ae8                 | ' 
03ae8                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03ae8                 | _retrocog_spin2_serial_start
03ae8     04 5A 05 F6 | 	mov	COUNT_, #4
03aec     B0 00 A0 FD | 	call	#pushregs_
03af0     39 81 02 F6 | 	mov	local01, arg01
03af4     3A 83 02 F6 | 	mov	local02, arg02
03af8                 | ' 
03af8                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03af8     14 72 06 FB | 	rdlong	arg01, #20
03afc     10 74 C6 F9 | 	decod	arg02, #16
03b00     3A 73 02 FD | 	qmul	arg01, arg02
03b04     19 84 62 FD | 	getqy	local03
03b08     18 86 62 FD | 	getqx	local04
03b0c     28 84 62 FD | 	setq	local03
03b10     3B 87 12 FD | 	qdiv	local04, arg03
03b14     18 2C 62 FD | 	getqx	result1
03b18     16 77 02 F6 | 	mov	arg03, result1
03b1c     FE FF 7F FF 
03b20     00 76 06 F5 | 	and	arg03, ##-1024
03b24                 | ' bitmode |= 7                                                  ' set bits (8)
03b24     07 76 46 F5 | 	or	arg03, #7
03b28                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03b28     40 80 62 FD | 	dirl	local01
03b2c     08 00 80 FF 
03b30     40 7D 08 FC | 	wrpin	##4158, local01
03b34     40 77 12 FC | 	wxpin	arg03, local01
03b38     40 01 28 FC | 	wypin	#0, local01
03b3c     41 80 62 FD | 	dirh	local01
03b40                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03b40     40 82 62 FD | 	dirl	local02
03b44     41 F9 08 FC | 	wrpin	#124, local02
03b48     41 77 12 FC | 	wxpin	arg03, local02
03b4c     41 01 28 FC | 	wypin	#0, local02
03b50     41 82 62 FD | 	dirh	local02
03b54                 | ' pinhigh(rxpin)
03b54     59 80 62 FD | 	drvh	local01
03b58     AF F0 03 F6 | 	mov	ptra, fp
03b5c     BF 00 A0 FD | 	call	#popregs_
03b60                 | _retrocog_spin2_serial_start_ret
03b60     2D 00 64 FD | 	ret
03b64                 | 
03b64                 | ' 
03b64                 | ' pub rxcheck(pin) : rxbyte | check
03b64                 | _retrocog_spin2_rxcheck
03b64     03 5A 05 F6 | 	mov	COUNT_, #3
03b68     B0 00 A0 FD | 	call	#pushregs_
03b6c     39 81 02 F6 | 	mov	local01, arg01
03b70                 | ' 
03b70                 | ' '' Check for serial input
03b70                 | ' '' -- returns -1 if nothing available
03b70                 | ' 
03b70                 | '   rxbyte := -1
03b70     01 82 66 F6 | 	neg	local02, #1
03b74                 | '   check := pinr(pin)
03b74     40 73 02 F6 | 	mov	arg01, local01
03b78     7C 28 B0 FD | 	call	#__system___pinread
03b7c     16 85 0A F6 | 	mov	local03, result1 wz
03b80                 | '   if (check)
03b80                 | '     rxbyte := rdpin(pin) >> 24
03b80     00 82 06 56 |  if_ne	mov	local02, #0
03b84     40 83 8A 5A |  if_ne	rdpin	local02, local01
03b88     18 82 46 50 |  if_ne	shr	local02, #24
03b8c     41 2D 02 F6 | 	mov	result1, local02
03b90     AF F0 03 F6 | 	mov	ptra, fp
03b94     BF 00 A0 FD | 	call	#popregs_
03b98                 | _retrocog_spin2_rxcheck_ret
03b98     2D 00 64 FD | 	ret
03b9c                 | 
03b9c                 | _trackerplayer_spin2_initModule
03b9c     0B 5A 05 F6 | 	mov	COUNT_, #11
03ba0     B0 00 A0 FD | 	call	#pushregs_
03ba4     30 F0 07 F1 | 	add	ptra, #48
03ba8     AF 72 62 FC | 	wrlong	arg01, fp
03bac     04 5E 05 F1 | 	add	fp, #4
03bb0     AF 74 62 FC | 	wrlong	arg02, fp
03bb4     04 5E 85 F1 | 	sub	fp, #4
03bb8                 | ' 
03bb8                 | '   ' Set some data pointers
03bb8                 | '   magicFour      := hubPtr + 1080
03bb8     AF 80 02 FB | 	rdlong	local01, fp
03bbc     02 00 00 FF 
03bc0     38 80 06 F1 | 	add	local01, ##1080
03bc4     9D 0E 06 F1 | 	add	objptr, #157
03bc8     07 81 62 FC | 	wrlong	local01, objptr
03bcc                 | '   nameStr        := hubPtr
03bcc     AF 80 02 FB | 	rdlong	local01, fp
03bd0     97 0E 86 F1 | 	sub	objptr, #151
03bd4     07 81 62 FC | 	wrlong	local01, objptr
03bd8                 | '   samplesInfoLut := hubPtr + 20
03bd8     AF 80 02 FB | 	rdlong	local01, fp
03bdc     14 80 06 F1 | 	add	local01, #20
03be0     04 0E 06 F1 | 	add	objptr, #4
03be4     07 81 62 FC | 	wrlong	local01, objptr
03be8                 | ' 
03be8                 | '   ' Is this a 31 sample module?
03be8                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03be8     93 0E 06 F1 | 	add	objptr, #147
03bec     07 81 02 FB | 	rdlong	local01, objptr
03bf0     9D 0E 86 F1 | 	sub	objptr, #157
03bf4     40 83 C2 FA | 	rdbyte	local02, local01
03bf8     4D 82 0E F2 | 	cmp	local02, #77 wz
03bfc     4C 01 90 5D |  if_ne	jmp	#LR__0130
03c00     9D 0E 06 F1 | 	add	objptr, #157
03c04     07 85 02 FB | 	rdlong	local03, objptr
03c08     9D 0E 86 F1 | 	sub	objptr, #157
03c0c     02 84 06 F1 | 	add	local03, #2
03c10     42 87 C2 FA | 	rdbyte	local04, local03
03c14     4B 86 0E F2 | 	cmp	local04, #75 wz
03c18     30 01 90 5D |  if_ne	jmp	#LR__0130
03c1c                 | '     songLength          := byte[hubPtr + 950]
03c1c     AF 80 02 FB | 	rdlong	local01, fp
03c20     01 00 00 FF 
03c24     B6 81 06 F1 | 	add	local01, ##950
03c28     40 89 C2 FA | 	rdbyte	local05, local01
03c2c     9A 0E 06 F1 | 	add	objptr, #154
03c30     07 89 42 FC | 	wrbyte	local05, objptr
03c34                 | '     unknown1            := byte[hubPtr + 951]
03c34     AF 80 02 FB | 	rdlong	local01, fp
03c38     01 00 00 FF 
03c3c     B7 81 06 F1 | 	add	local01, ##951
03c40     40 89 C2 FA | 	rdbyte	local05, local01
03c44     02 0E 06 F1 | 	add	objptr, #2
03c48     07 89 42 FC | 	wrbyte	local05, objptr
03c4c                 | '     songPositionsLut    :=      hubPtr + 952
03c4c     AF 80 02 FB | 	rdlong	local01, fp
03c50     01 00 00 FF 
03c54     B8 81 06 F1 | 	add	local01, ##952
03c58     06 0E 86 F1 | 	sub	objptr, #6
03c5c     07 81 62 FC | 	wrlong	local01, objptr
03c60                 | '     patternsData        :=      hubPtr + 1084
03c60     AF 80 02 FB | 	rdlong	local01, fp
03c64     02 00 00 FF 
03c68     3C 80 06 F1 | 	add	local01, ##1084
03c6c     04 0E 86 F1 | 	sub	objptr, #4
03c70     07 81 62 FC | 	wrlong	local01, objptr
03c74                 | '     numberOfInstruments := 31
03c74     14 0E 06 F1 | 	add	objptr, #20
03c78     07 3F 48 FC | 	wrbyte	#31, objptr
03c7c                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c7c     0B 0E 86 F1 | 	sub	objptr, #11
03c80     07 01 48 FC | 	wrbyte	#0, objptr
03c84     9B 0E 86 F1 | 	sub	objptr, #155
03c88                 | '     repeat i from 952 to 1079
03c88     08 5E 05 F1 | 	add	fp, #8
03c8c     01 00 80 FF 
03c90     AF 70 6B FC | 	wrlong	##952, fp
03c94     08 5E 85 F1 | 	sub	fp, #8
03c98     D4 C3 9F FE | 	loc	pa,	#(@LR__0129-@LR__0127)
03c9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ca0                 | LR__0127
03ca0                 | '       if byte[hubPtr][i] > numberOfPatterns
03ca0     AF 8A 02 FB | 	rdlong	local06, fp
03ca4     08 5E 05 F1 | 	add	fp, #8
03ca8     AF 82 02 FB | 	rdlong	local02, fp
03cac     08 5E 85 F1 | 	sub	fp, #8
03cb0     45 83 02 F1 | 	add	local02, local06
03cb4     41 87 C2 FA | 	rdbyte	local04, local02
03cb8     9B 0E 06 F1 | 	add	objptr, #155
03cbc     07 8D C2 FA | 	rdbyte	local07, objptr
03cc0     9B 0E 86 F1 | 	sub	objptr, #155
03cc4     46 87 5A F2 | 	cmps	local04, local07 wcz
03cc8     24 00 90 ED |  if_be	jmp	#LR__0128
03ccc                 | '         numberOfPatterns := byte[hubPtr][i]
03ccc     AF 8A 02 FB | 	rdlong	local06, fp
03cd0     08 5E 05 F1 | 	add	fp, #8
03cd4     AF 82 02 FB | 	rdlong	local02, fp
03cd8     08 5E 85 F1 | 	sub	fp, #8
03cdc     45 83 02 F1 | 	add	local02, local06
03ce0     41 87 C2 FA | 	rdbyte	local04, local02
03ce4     9B 0E 06 F1 | 	add	objptr, #155
03ce8     07 87 42 FC | 	wrbyte	local04, objptr
03cec     9B 0E 86 F1 | 	sub	objptr, #155
03cf0                 | LR__0128
03cf0     08 5E 05 F1 | 	add	fp, #8
03cf4     AF 88 02 FB | 	rdlong	local05, fp
03cf8     01 88 06 F1 | 	add	local05, #1
03cfc     AF 88 62 FC | 	wrlong	local05, fp
03d00     08 5E 85 F1 | 	sub	fp, #8
03d04     02 00 00 FF 
03d08     38 88 5E F2 | 	cmps	local05, ##1080 wcz
03d0c     90 FF 9F CD |  if_b	jmp	#LR__0127
03d10                 | LR__0129
03d10                 | '     numberOfPatterns++
03d10     9B 0E 06 F1 | 	add	objptr, #155
03d14     07 89 C2 FA | 	rdbyte	local05, objptr
03d18     07 83 C2 FA | 	rdbyte	local02, objptr
03d1c     01 82 06 F1 | 	add	local02, #1
03d20     07 83 42 FC | 	wrbyte	local02, objptr
03d24                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d24     09 0E 86 F1 | 	sub	objptr, #9
03d28     07 81 02 FB | 	rdlong	local01, objptr
03d2c     09 0E 06 F1 | 	add	objptr, #9
03d30     07 83 C2 FA | 	rdbyte	local02, objptr
03d34     0A 82 66 F0 | 	shl	local02, #10
03d38     41 81 02 F1 | 	add	local01, local02
03d3c     8D 0E 86 F1 | 	sub	objptr, #141
03d40     07 81 62 FC | 	wrlong	local01, objptr
03d44     0E 0E 86 F1 | 	sub	objptr, #14
03d48                 | ' 
03d48                 | '   ' This must be an oldschool 15 sample soundtracker module
03d48                 | '   else
03d48     1C 01 90 FD | 	jmp	#LR__0134
03d4c                 | LR__0130
03d4c                 | '     songLength          := byte[hubPtr + 470]
03d4c     AF 80 02 FB | 	rdlong	local01, fp
03d50     D6 81 06 F1 | 	add	local01, #470
03d54     40 89 C2 FA | 	rdbyte	local05, local01
03d58     9A 0E 06 F1 | 	add	objptr, #154
03d5c     07 89 42 FC | 	wrbyte	local05, objptr
03d60                 | '     unknown1            := byte[hubPtr + 471]
03d60     AF 80 02 FB | 	rdlong	local01, fp
03d64     D7 81 06 F1 | 	add	local01, #471
03d68     40 89 C2 FA | 	rdbyte	local05, local01
03d6c     02 0E 06 F1 | 	add	objptr, #2
03d70     07 89 42 FC | 	wrbyte	local05, objptr
03d74                 | '     songPositionsLut    :=      hubPtr + 472
03d74     AF 80 02 FB | 	rdlong	local01, fp
03d78     D8 81 06 F1 | 	add	local01, #472
03d7c     06 0E 86 F1 | 	sub	objptr, #6
03d80     07 81 62 FC | 	wrlong	local01, objptr
03d84                 | '     patternsData        :=      hubPtr + 600
03d84     AF 80 02 FB | 	rdlong	local01, fp
03d88     01 00 00 FF 
03d8c     58 80 06 F1 | 	add	local01, ##600
03d90     04 0E 86 F1 | 	sub	objptr, #4
03d94     07 81 62 FC | 	wrlong	local01, objptr
03d98                 | '     numberOfInstruments := 15
03d98     14 0E 06 F1 | 	add	objptr, #20
03d9c     07 1F 48 FC | 	wrbyte	#15, objptr
03da0                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03da0     0B 0E 86 F1 | 	sub	objptr, #11
03da4     07 01 48 FC | 	wrbyte	#0, objptr
03da8     9B 0E 86 F1 | 	sub	objptr, #155
03dac                 | '     repeat i from 472 to 599
03dac     08 5E 05 F1 | 	add	fp, #8
03db0     AF B0 6B FC | 	wrlong	#472, fp
03db4     08 5E 85 F1 | 	sub	fp, #8
03db8     B4 C2 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
03dbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03dc0                 | LR__0131
03dc0                 | '       if byte[hubPtr][i] > numberOfPatterns
03dc0     AF 8A 02 FB | 	rdlong	local06, fp
03dc4     08 5E 05 F1 | 	add	fp, #8
03dc8     AF 82 02 FB | 	rdlong	local02, fp
03dcc     08 5E 85 F1 | 	sub	fp, #8
03dd0     45 83 02 F1 | 	add	local02, local06
03dd4     41 87 C2 FA | 	rdbyte	local04, local02
03dd8     9B 0E 06 F1 | 	add	objptr, #155
03ddc     07 8D C2 FA | 	rdbyte	local07, objptr
03de0     9B 0E 86 F1 | 	sub	objptr, #155
03de4     46 87 5A F2 | 	cmps	local04, local07 wcz
03de8     24 00 90 ED |  if_be	jmp	#LR__0132
03dec                 | '         numberOfPatterns := byte[hubPtr][i]
03dec     AF 8A 02 FB | 	rdlong	local06, fp
03df0     08 5E 05 F1 | 	add	fp, #8
03df4     AF 82 02 FB | 	rdlong	local02, fp
03df8     08 5E 85 F1 | 	sub	fp, #8
03dfc     45 83 02 F1 | 	add	local02, local06
03e00     41 87 C2 FA | 	rdbyte	local04, local02
03e04     9B 0E 06 F1 | 	add	objptr, #155
03e08     07 87 42 FC | 	wrbyte	local04, objptr
03e0c     9B 0E 86 F1 | 	sub	objptr, #155
03e10                 | LR__0132
03e10     08 5E 05 F1 | 	add	fp, #8
03e14     AF 88 02 FB | 	rdlong	local05, fp
03e18     01 88 06 F1 | 	add	local05, #1
03e1c     AF 88 62 FC | 	wrlong	local05, fp
03e20     08 5E 85 F1 | 	sub	fp, #8
03e24     01 00 00 FF 
03e28     58 88 5E F2 | 	cmps	local05, ##600 wcz
03e2c     90 FF 9F CD |  if_b	jmp	#LR__0131
03e30                 | LR__0133
03e30                 | '     numberOfPatterns++
03e30     9B 0E 06 F1 | 	add	objptr, #155
03e34     07 89 C2 FA | 	rdbyte	local05, objptr
03e38     07 83 C2 FA | 	rdbyte	local02, objptr
03e3c     01 82 06 F1 | 	add	local02, #1
03e40     07 83 42 FC | 	wrbyte	local02, objptr
03e44                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03e44     09 0E 86 F1 | 	sub	objptr, #9
03e48     07 81 02 FB | 	rdlong	local01, objptr
03e4c     09 0E 06 F1 | 	add	objptr, #9
03e50     07 83 C2 FA | 	rdbyte	local02, objptr
03e54     0A 82 66 F0 | 	shl	local02, #10
03e58     41 81 02 F1 | 	add	local01, local02
03e5c     8D 0E 86 F1 | 	sub	objptr, #141
03e60     07 81 62 FC | 	wrlong	local01, objptr
03e64     0E 0E 86 F1 | 	sub	objptr, #14
03e68                 | LR__0134
03e68                 | ' 
03e68                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03e68                 | '   tmpPtr := sampleDataPtr
03e68     0E 0E 06 F1 | 	add	objptr, #14
03e6c     07 81 02 FB | 	rdlong	local01, objptr
03e70     0C 5E 05 F1 | 	add	fp, #12
03e74     AF 80 62 FC | 	wrlong	local01, fp
03e78                 | '   repeat i from 1 to numberOfInstruments
03e78     04 5E 85 F1 | 	sub	fp, #4
03e7c     AF 02 68 FC | 	wrlong	#1, fp
03e80     08 5E 85 F1 | 	sub	fp, #8
03e84     98 0E 06 F1 | 	add	objptr, #152
03e88     07 83 C2 FA | 	rdbyte	local02, objptr
03e8c     01 82 5E F2 | 	cmps	local02, #1 wcz
03e90     01 88 06 16 |  if_a	mov	local05, #1
03e94     01 88 66 E6 |  if_be	neg	local05, #1
03e98     44 8F 02 F6 | 	mov	local08, local05
03e9c     07 91 C2 FA | 	rdbyte	local09, objptr
03ea0     A6 0E 86 F1 | 	sub	objptr, #166
03ea4     47 91 02 F1 | 	add	local09, local08
03ea8                 | LR__0135
03ea8                 | '     samplesPtrLut[i-1] := tmpPtr
03ea8     08 5E 05 F1 | 	add	fp, #8
03eac     AF 92 02 FB | 	rdlong	local10, fp
03eb0     01 92 86 F1 | 	sub	local10, #1
03eb4     02 92 66 F0 | 	shl	local10, #2
03eb8     12 0E 06 F1 | 	add	objptr, #18
03ebc     07 93 02 F1 | 	add	local10, objptr
03ec0     04 5E 05 F1 | 	add	fp, #4
03ec4     AF 94 02 FB | 	rdlong	local11, fp
03ec8     49 95 62 FC | 	wrlong	local11, local10
03ecc                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03ecc     04 5E 85 F1 | 	sub	fp, #4
03ed0     AF 72 02 FB | 	rdlong	arg01, fp
03ed4     1C 5E 05 F1 | 	add	fp, #28
03ed8     AF 74 02 F6 | 	mov	arg02, fp
03edc     14 5E 85 F1 | 	sub	fp, #20
03ee0     AF 76 02 F6 | 	mov	arg03, fp
03ee4     04 5E 05 F1 | 	add	fp, #4
03ee8     AF 78 02 F6 | 	mov	arg04, fp
03eec     04 5E 05 F1 | 	add	fp, #4
03ef0     AF 7A 02 F6 | 	mov	arg05, fp
03ef4     04 5E 05 F1 | 	add	fp, #4
03ef8     AF 7C 02 F6 | 	mov	arg06, fp
03efc     04 5E 05 F1 | 	add	fp, #4
03f00     AF 7E 02 F6 | 	mov	arg07, fp
03f04     20 5E 85 F1 | 	sub	fp, #32
03f08     12 0E 86 F1 | 	sub	objptr, #18
03f0c     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03f10                 | '     tmpPtr += samLength
03f10     0C 5E 05 F1 | 	add	fp, #12
03f14     AF 8C 02 FB | 	rdlong	local07, fp
03f18     04 5E 05 F1 | 	add	fp, #4
03f1c     AF 92 02 FB | 	rdlong	local10, fp
03f20     49 8D 02 F1 | 	add	local07, local10
03f24     04 5E 85 F1 | 	sub	fp, #4
03f28     AF 8C 62 FC | 	wrlong	local07, fp
03f2c     04 5E 85 F1 | 	sub	fp, #4
03f30     AF 8C 02 FB | 	rdlong	local07, fp
03f34     47 8D 02 F1 | 	add	local07, local08
03f38     AF 8C 62 FC | 	wrlong	local07, fp
03f3c     08 5E 85 F1 | 	sub	fp, #8
03f40     48 8D 0A F2 | 	cmp	local07, local09 wz
03f44     60 FF 9F 5D |  if_ne	jmp	#LR__0135
03f48                 | ' 
03f48                 | '   ' Below this point, all play routine variables are resest to their default values
03f48                 | '   tickCounter                 := 0
03f48     A1 0E 06 F1 | 	add	objptr, #161
03f4c     07 01 48 FC | 	wrbyte	#0, objptr
03f50                 | '   patternRow                  := 0
03f50     01 0E 06 F1 | 	add	objptr, #1
03f54     07 01 48 FC | 	wrbyte	#0, objptr
03f58                 | '   songPosition                := startPattern
03f58     04 5E 05 F1 | 	add	fp, #4
03f5c     AF 80 02 FB | 	rdlong	local01, fp
03f60     04 5E 85 F1 | 	sub	fp, #4
03f64     01 0E 06 F1 | 	add	objptr, #1
03f68     07 81 42 FC | 	wrbyte	local01, objptr
03f6c                 | '   currentSongSpeed            := 6
03f6c     01 0E 06 F1 | 	add	objptr, #1
03f70     07 0D 48 FC | 	wrbyte	#6, objptr
03f74                 | '   patternDelay                := 0
03f74     01 0E 06 F1 | 	add	objptr, #1
03f78     07 01 48 FC | 	wrbyte	#0, objptr
03f7c                 | '   ticksPerMinute              := 50 * 60
03f7c     02 0F 06 F1 | 	add	objptr, #258
03f80     05 00 80 FF 
03f84     07 71 6B FC | 	wrlong	##3000, objptr
03f88     A7 0F 86 F1 | 	sub	objptr, #423
03f8c                 | '   cyclesToWait                := systemClock / 50
03f8c     07 AF 02 FB | 	rdlong	muldiva_, objptr
03f90     32 B0 06 F6 | 	mov	muldivb_, #50
03f94     D0 00 A0 FD | 	call	#divide_
03f98     AB 0F 06 F1 | 	add	objptr, #427
03f9c     07 B1 62 FC | 	wrlong	muldivb_, objptr
03fa0                 | '   sampleNumber_memory         := 0
03fa0     35 0E 06 F1 | 	add	objptr, #53
03fa4     07 01 48 FC | 	wrbyte	#0, objptr
03fa8                 | '   lpFilter                    := 0
03fa8     25 0E 86 F1 | 	sub	objptr, #37
03fac     07 01 48 FC | 	wrbyte	#0, objptr
03fb0                 | '   cmdD_memoryX                := 0
03fb0     29 0E 06 F1 | 	add	objptr, #41
03fb4     07 01 48 FC | 	wrbyte	#0, objptr
03fb8                 | '   cmdD_memoryY                := 0
03fb8     01 0E 06 F1 | 	add	objptr, #1
03fbc     07 01 48 FC | 	wrbyte	#0, objptr
03fc0                 | '   cmdD_updatePosition         := false
03fc0     01 0E 06 F1 | 	add	objptr, #1
03fc4     07 01 48 FC | 	wrbyte	#0, objptr
03fc8                 | '   cmdB_memoryZ                := 0
03fc8     01 0E 06 F1 | 	add	objptr, #1
03fcc     07 01 48 FC | 	wrbyte	#0, objptr
03fd0                 | '   cmdB_updatePosition         := false
03fd0     01 0E 06 F1 | 	add	objptr, #1
03fd4     07 01 48 FC | 	wrbyte	#0, objptr
03fd8                 | '   cmdE6_updatePositionCommon  := false
03fd8     0D 0E 06 F1 | 	add	objptr, #13
03fdc     07 01 48 FC | 	wrbyte	#0, objptr
03fe0     F5 0F 86 F1 | 	sub	objptr, #501
03fe4                 | ' 
03fe4                 | '   repeat i from 0 to LAST_CHANNEL
03fe4     08 5E 05 F1 | 	add	fp, #8
03fe8     AF 00 68 FC | 	wrlong	#0, fp
03fec     08 5E 85 F1 | 	sub	fp, #8
03ff0                 | LR__0136
03ff0                 | ' 
03ff0                 | '     currRepeatPoint[i]        := 0
03ff0     08 5E 05 F1 | 	add	fp, #8
03ff4     AF 84 02 FB | 	rdlong	local03, fp
03ff8     01 84 66 F0 | 	shl	local03, #1
03ffc     D7 0E 06 F1 | 	add	objptr, #215
04000     07 85 02 F1 | 	add	local03, objptr
04004     42 01 58 FC | 	wrword	#0, local03
04008                 | '     currSampleLength[i]       := 4
04008     AF 84 02 FB | 	rdlong	local03, fp
0400c     01 84 66 F0 | 	shl	local03, #1
04010     1C 0E 86 F1 | 	sub	objptr, #28
04014     07 85 02 F1 | 	add	local03, objptr
04018     42 09 58 FC | 	wrword	#4, local03
0401c                 | '     currSamplePtr[i]          := @null
0401c     AF 82 02 FB | 	rdlong	local02, fp
04020     02 82 66 F0 | 	shl	local02, #2
04024     14 0E 86 F1 | 	sub	objptr, #20
04028     07 83 02 F1 | 	add	local02, objptr
0402c     41 29 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04030                 | '     currSampleNr[i]           := 0
04030     AF 88 02 FB | 	rdlong	local05, fp
04034     10 0E 06 F1 | 	add	objptr, #16
04038     07 89 02 F1 | 	add	local05, objptr
0403c     44 01 48 FC | 	wrbyte	#0, local05
04040                 | '     currRepeatLength[i]       := 1
04040     AF 88 02 FB | 	rdlong	local05, fp
04044     02 88 66 F0 | 	shl	local05, #2
04048     0C 0E 06 F1 | 	add	objptr, #12
0404c     07 89 02 F1 | 	add	local05, objptr
04050     44 03 68 FC | 	wrlong	#1, local05
04054                 | '     currPeriod[i]             := 400
04054     AF 88 02 FB | 	rdlong	local05, fp
04058     02 88 66 F0 | 	shl	local05, #2
0405c     1C 0E 06 F1 | 	add	objptr, #28
04060     07 89 02 F1 | 	add	local05, objptr
04064     44 21 6B FC | 	wrlong	#400, local05
04068                 | '     lastSetPeriod[i]          := 400
04068     AF 88 02 FB | 	rdlong	local05, fp
0406c     02 88 66 F0 | 	shl	local05, #2
04070     48 0E 06 F1 | 	add	objptr, #72
04074     07 89 02 F1 | 	add	local05, objptr
04078     44 21 6B FC | 	wrlong	#400, local05
0407c                 | '     lastSetSamplePtr[i]       := 0
0407c     AF 88 02 FB | 	rdlong	local05, fp
04080     02 88 66 F0 | 	shl	local05, #2
04084     10 0E 06 F1 | 	add	objptr, #16
04088     07 89 02 F1 | 	add	local05, objptr
0408c     44 01 68 FC | 	wrlong	#0, local05
04090                 | '     lastSetSampleNr[i]        := 0
04090     AF 88 02 FB | 	rdlong	local05, fp
04094     02 88 66 F0 | 	shl	local05, #2
04098     10 0E 06 F1 | 	add	objptr, #16
0409c     07 89 02 F1 | 	add	local05, objptr
040a0     44 01 68 FC | 	wrlong	#0, local05
040a4                 | '     lastSetSampleLength[i]    := 0
040a4     AF 88 02 FB | 	rdlong	local05, fp
040a8     02 88 66 F0 | 	shl	local05, #2
040ac     10 0E 06 F1 | 	add	objptr, #16
040b0     07 89 02 F1 | 	add	local05, objptr
040b4     44 01 68 FC | 	wrlong	#0, local05
040b8                 | '     lastSetRepeatLength[i]    := 0
040b8     AF 88 02 FB | 	rdlong	local05, fp
040bc     02 88 66 F0 | 	shl	local05, #2
040c0     10 0E 06 F1 | 	add	objptr, #16
040c4     07 89 02 F1 | 	add	local05, objptr
040c8     44 01 68 FC | 	wrlong	#0, local05
040cc                 | '     lastSetRepeatPoint[i]     := 0
040cc     AF 88 02 FB | 	rdlong	local05, fp
040d0     02 88 66 F0 | 	shl	local05, #2
040d4     10 0E 06 F1 | 	add	objptr, #16
040d8     07 89 02 F1 | 	add	local05, objptr
040dc     44 01 68 FC | 	wrlong	#0, local05
040e0                 | '     currVolume[i]             := 0
040e0     AF 88 02 FB | 	rdlong	local05, fp
040e4     02 88 66 F0 | 	shl	local05, #2
040e8     78 0E 86 F1 | 	sub	objptr, #120
040ec     07 89 02 F1 | 	add	local05, objptr
040f0     44 01 68 FC | 	wrlong	#0, local05
040f4                 | '     currPanning[i]            := 0
040f4     AF 84 02 FB | 	rdlong	local03, fp
040f8     01 84 66 F0 | 	shl	local03, #1
040fc     20 0E 06 F1 | 	add	objptr, #32
04100     07 85 02 F1 | 	add	local03, objptr
04104     42 01 58 FC | 	wrword	#0, local03
04108                 | '     cmd3_memoryZ[i]           := 0
04108     AF 88 02 FB | 	rdlong	local05, fp
0410c     A9 0E 06 F1 | 	add	objptr, #169
04110     07 89 02 F1 | 	add	local05, objptr
04114     44 01 48 FC | 	wrbyte	#0, local05
04118                 | '     cmd4_memoryY[i]           := 0
04118     AF 88 02 FB | 	rdlong	local05, fp
0411c     04 0E 06 F1 | 	add	objptr, #4
04120     07 89 02 F1 | 	add	local05, objptr
04124     44 01 48 FC | 	wrbyte	#0, local05
04128                 | '     cmd4_memoryX[i]           := 0
04128     AF 88 02 FB | 	rdlong	local05, fp
0412c     04 0E 06 F1 | 	add	objptr, #4
04130     07 89 02 F1 | 	add	local05, objptr
04134     44 01 48 FC | 	wrbyte	#0, local05
04138                 | '     cmd7_memoryY[i]           := 0
04138     AF 88 02 FB | 	rdlong	local05, fp
0413c     04 0E 06 F1 | 	add	objptr, #4
04140     07 89 02 F1 | 	add	local05, objptr
04144     44 01 48 FC | 	wrbyte	#0, local05
04148                 | '     cmd7_memoryX[i]           := 0
04148     AF 88 02 FB | 	rdlong	local05, fp
0414c     04 0E 06 F1 | 	add	objptr, #4
04150     07 89 02 F1 | 	add	local05, objptr
04154     44 01 48 FC | 	wrbyte	#0, local05
04158                 | '     cmd9_memoryZ[i]           := 0
04158     AF 88 02 FB | 	rdlong	local05, fp
0415c     04 0E 06 F1 | 	add	objptr, #4
04160     07 89 02 F1 | 	add	local05, objptr
04164     44 01 48 FC | 	wrbyte	#0, local05
04168                 | '     cmdE6_memory[i]           := 0
04168     AF 88 02 FB | 	rdlong	local05, fp
0416c     0D 0E 06 F1 | 	add	objptr, #13
04170     07 89 02 F1 | 	add	local05, objptr
04174     44 01 48 FC | 	wrbyte	#0, local05
04178                 | '     cmdE6_counter[i]          := 0
04178     AF 88 02 FB | 	rdlong	local05, fp
0417c     04 0E 06 F1 | 	add	objptr, #4
04180     07 89 02 F1 | 	add	local05, objptr
04184     44 01 48 FC | 	wrbyte	#0, local05
04188                 | '     cmdE6_updatePosition[i]   := false
04188     AF 88 02 FB | 	rdlong	local05, fp
0418c     04 0E 06 F1 | 	add	objptr, #4
04190     07 89 02 F1 | 	add	local05, objptr
04194     44 01 48 FC | 	wrbyte	#0, local05
04198                 | '     sampleNumber_memory[i]    := 0
04198     AF 88 02 FB | 	rdlong	local05, fp
0419c     11 0E 86 F1 | 	sub	objptr, #17
041a0     07 89 02 F1 | 	add	local05, objptr
041a4     44 01 48 FC | 	wrbyte	#0, local05
041a8                 | '     vibratoPos[i]             := 0
041a8     AF 88 02 FB | 	rdlong	local05, fp
041ac     59 0E 86 F1 | 	sub	objptr, #89
041b0     07 89 02 F1 | 	add	local05, objptr
041b4     44 01 48 FC | 	wrbyte	#0, local05
041b8                 | '     portamentoPeriodMemory[i] := 0
041b8     AF 88 02 FB | 	rdlong	local05, fp
041bc     02 88 66 F0 | 	shl	local05, #2
041c0     10 0E 06 F1 | 	add	objptr, #16
041c4     07 89 02 F1 | 	add	local05, objptr
041c8     44 01 68 FC | 	wrlong	#0, local05
041cc                 | '     portaGlissando[i]         := 0
041cc     AF 88 02 FB | 	rdlong	local05, fp
041d0     25 0E 06 F1 | 	add	objptr, #37
041d4     07 89 02 F1 | 	add	local05, objptr
041d8     44 01 48 FC | 	wrbyte	#0, local05
041dc                 | '     vibratoType[i]            := 0
041dc     AF 88 02 FB | 	rdlong	local05, fp
041e0     04 0E 06 F1 | 	add	objptr, #4
041e4     07 89 02 F1 | 	add	local05, objptr
041e8     44 01 48 FC | 	wrbyte	#0, local05
041ec                 | '     tremoloType[i]            := 0
041ec     AF 88 02 FB | 	rdlong	local05, fp
041f0     04 0E 06 F1 | 	add	objptr, #4
041f4     07 89 02 F1 | 	add	local05, objptr
041f8     44 01 48 FC | 	wrbyte	#0, local05
041fc                 | '     tremoloPos[i]             := 0
041fc     AF 88 02 FB | 	rdlong	local05, fp
04200     39 0E 86 F1 | 	sub	objptr, #57
04204     07 89 02 F1 | 	add	local05, objptr
04208     44 01 48 FC | 	wrbyte	#0, local05
0420c                 | '     deltaVolume[i]            := 0
0420c     AF 88 02 FB | 	rdlong	local05, fp
04210     02 88 66 F0 | 	shl	local05, #2
04214     7C 0E 86 F1 | 	sub	objptr, #124
04218     07 89 02 F1 | 	add	local05, objptr
0421c     44 01 68 FC | 	wrlong	#0, local05
04220                 | '     deltaPeriod[i]            := 0
04220     AF 88 02 FB | 	rdlong	local05, fp
04224     02 88 66 F0 | 	shl	local05, #2
04228     20 0E 86 F1 | 	sub	objptr, #32
0422c     07 89 02 F1 | 	add	local05, objptr
04230     44 01 68 FC | 	wrlong	#0, local05
04234                 | '     resetTremolo[i]           := 0
04234     AF 88 02 FB | 	rdlong	local05, fp
04238     A0 0E 06 F1 | 	add	objptr, #160
0423c     07 89 02 F1 | 	add	local05, objptr
04240     44 01 48 FC | 	wrbyte	#0, local05
04244                 | '     resetVibrato[i]           := 0
04244     AF 88 02 FB | 	rdlong	local05, fp
04248     04 0E 06 F1 | 	add	objptr, #4
0424c     07 89 02 F1 | 	add	local05, objptr
04250     44 01 48 FC | 	wrbyte	#0, local05
04254     AF 88 02 FB | 	rdlong	local05, fp
04258     01 88 06 F1 | 	add	local05, #1
0425c     AF 88 62 FC | 	wrlong	local05, fp
04260     08 5E 85 F1 | 	sub	fp, #8
04264     04 88 5E F2 | 	cmps	local05, #4 wcz
04268     93 0F 86 F1 | 	sub	objptr, #403
0426c     80 FD 9F CD |  if_b	jmp	#LR__0136
04270     AF F0 03 F6 | 	mov	ptra, fp
04274     BF 00 A0 FD | 	call	#popregs_
04278                 | _trackerplayer_spin2_initModule_ret
04278     2D 00 64 FD | 	ret
0427c                 | 
0427c                 | ' 
0427c                 | ' 
0427c                 | ' ' This routine needs to be ticked X number of times per second
0427c                 | ' ' in order to advance the tracker play routine
0427c                 | ' '
0427c                 | ' PUB tick() | channel, sampleNumber, period, effect, i
0427c                 | _trackerplayer_spin2_tick
0427c     05 5A 05 F6 | 	mov	COUNT_, #5
04280     B0 00 A0 FD | 	call	#pushregs_
04284     14 F0 07 F1 | 	add	ptra, #20
04288                 | ' 
04288                 | '   if currentSongSpeed == 0
04288     A4 0E 06 F1 | 	add	objptr, #164
0428c     07 81 CA FA | 	rdbyte	local01, objptr wz
04290     A4 0E 86 F1 | 	sub	objptr, #164
04294                 | '     return
04294     88 02 90 AD |  if_e	jmp	#LR__0148
04298                 | ' 
04298                 | '   ' Iterate over the channels and process everything
04298                 | '   repeat channel from 0 to LAST_CHANNEL
04298     AF 00 68 FC | 	wrlong	#0, fp
0429c                 | LR__0137
0429c                 | ' 
0429c                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
0429c     AF 72 02 FB | 	rdlong	arg01, fp
042a0     A3 0E 06 F1 | 	add	objptr, #163
042a4     07 75 C2 FA | 	rdbyte	arg02, objptr
042a8     01 0E 86 F1 | 	sub	objptr, #1
042ac     07 77 C2 FA | 	rdbyte	arg03, objptr
042b0     A2 0E 86 F1 | 	sub	objptr, #162
042b4     04 5E 05 F1 | 	add	fp, #4
042b8     AF 78 02 F6 | 	mov	arg04, fp
042bc     04 5E 05 F1 | 	add	fp, #4
042c0     AF 7A 02 F6 | 	mov	arg05, fp
042c4     04 5E 05 F1 | 	add	fp, #4
042c8     AF 7C 02 F6 | 	mov	arg06, fp
042cc     0C 5E 85 F1 | 	sub	fp, #12
042d0     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
042d4                 | '     processChannel(channel, sampleNumber, period, effect)
042d4     AF 72 02 FB | 	rdlong	arg01, fp
042d8     04 5E 05 F1 | 	add	fp, #4
042dc     AF 74 02 FB | 	rdlong	arg02, fp
042e0     04 5E 05 F1 | 	add	fp, #4
042e4     AF 76 02 FB | 	rdlong	arg03, fp
042e8     04 5E 05 F1 | 	add	fp, #4
042ec     AF 78 02 FB | 	rdlong	arg04, fp
042f0     0C 5E 85 F1 | 	sub	fp, #12
042f4     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
042f8     AF 82 02 FB | 	rdlong	local02, fp
042fc     01 82 06 F1 | 	add	local02, #1
04300     AF 82 62 FC | 	wrlong	local02, fp
04304     04 82 5E F2 | 	cmps	local02, #4 wcz
04308     90 FF 9F CD |  if_b	jmp	#LR__0137
0430c                 | ' 
0430c                 | '   ' Incrementation the main counter that drives the whole play routine
0430c                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
0430c     A1 0E 06 F1 | 	add	objptr, #161
04310     07 81 C2 FA | 	rdbyte	local01, objptr
04314     01 80 06 F1 | 	add	local01, #1
04318     07 81 42 FC | 	wrbyte	local01, objptr
0431c     03 0E 06 F1 | 	add	objptr, #3
04320     07 85 C2 FA | 	rdbyte	local03, objptr
04324     01 0E 06 F1 | 	add	objptr, #1
04328     07 87 C2 FA | 	rdbyte	local04, objptr
0432c     43 85 02 F1 | 	add	local03, local04
04330     04 0E 86 F1 | 	sub	objptr, #4
04334     07 89 C2 FA | 	rdbyte	local05, objptr
04338     A1 0E 86 F1 | 	sub	objptr, #161
0433c     42 89 5A F2 | 	cmps	local05, local03 wcz
04340                 | '     tickCounter := 0
04340     A1 0E 06 31 |  if_ae	add	objptr, #161
04344     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04348     A1 0E 86 31 |  if_ae	sub	objptr, #161
0434c                 | ' 
0434c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0434c                 | '   if tickCounter == 0
0434c     A1 0E 06 F1 | 	add	objptr, #161
04350     07 81 CA FA | 	rdbyte	local01, objptr wz
04354     A1 0E 86 F1 | 	sub	objptr, #161
04358     C4 01 90 5D |  if_ne	jmp	#LR__0147
0435c                 | ' 
0435c                 | '     ' Handle the "pattern repeat" command, "E6"
0435c                 | '     if cmdE6_updatePositionCommon
0435c     F5 0F 06 F1 | 	add	objptr, #501
04360     07 81 CA FA | 	rdbyte	local01, objptr wz
04364     F5 0F 86 F1 | 	sub	objptr, #501
04368     8C 00 90 AD |  if_e	jmp	#LR__0141
0436c                 | '       repeat i from 0 to LAST_CHANNEL
0436c     10 5E 05 F1 | 	add	fp, #16
04370     AF 00 68 FC | 	wrlong	#0, fp
04374     10 5E 85 F1 | 	sub	fp, #16
04378     F8 BC 9F FE | 	loc	pa,	#(@LR__0140-@LR__0138)
0437c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04380                 | LR__0138
04380                 | '         if cmdE6_updatePosition[i]
04380     10 5E 05 F1 | 	add	fp, #16
04384     AF 82 02 FB | 	rdlong	local02, fp
04388     10 5E 85 F1 | 	sub	fp, #16
0438c     F1 0F 06 F1 | 	add	objptr, #497
04390     07 83 02 F1 | 	add	local02, objptr
04394     41 87 CA FA | 	rdbyte	local04, local02 wz
04398     F1 0F 86 F1 | 	sub	objptr, #497
0439c     24 00 90 AD |  if_e	jmp	#LR__0139
043a0                 | '           patternRow := cmdE6_memory[i]
043a0     10 5E 05 F1 | 	add	fp, #16
043a4     AF 82 02 FB | 	rdlong	local02, fp
043a8     10 5E 85 F1 | 	sub	fp, #16
043ac     E9 0F 06 F1 | 	add	objptr, #489
043b0     07 83 02 F1 | 	add	local02, objptr
043b4     41 87 C2 FA | 	rdbyte	local04, local02
043b8     47 0F 86 F1 | 	sub	objptr, #327
043bc     07 87 42 FC | 	wrbyte	local04, objptr
043c0     A2 0E 86 F1 | 	sub	objptr, #162
043c4                 | LR__0139
043c4                 | '         cmdE6_updatePosition[i] := false
043c4     10 5E 05 F1 | 	add	fp, #16
043c8     AF 82 02 FB | 	rdlong	local02, fp
043cc     F1 0F 06 F1 | 	add	objptr, #497
043d0     07 83 02 F1 | 	add	local02, objptr
043d4     41 01 48 FC | 	wrbyte	#0, local02
043d8     AF 82 02 FB | 	rdlong	local02, fp
043dc     01 82 06 F1 | 	add	local02, #1
043e0     AF 82 62 FC | 	wrlong	local02, fp
043e4     10 5E 85 F1 | 	sub	fp, #16
043e8     04 82 5E F2 | 	cmps	local02, #4 wcz
043ec     F1 0F 86 F1 | 	sub	objptr, #497
043f0     8C FF 9F CD |  if_b	jmp	#LR__0138
043f4                 | LR__0140
043f4     CC 00 90 FD | 	jmp	#LR__0145
043f8                 | LR__0141
043f8                 | ' 
043f8                 | '     ' Handle the "skip to next pattern with offset command", "D"
043f8                 | '     elseif cmdD_updatePosition
043f8     E6 0F 06 F1 | 	add	objptr, #486
043fc     07 81 CA FA | 	rdbyte	local01, objptr wz
04400     E6 0F 86 F1 | 	sub	objptr, #486
04404     64 00 90 AD |  if_e	jmp	#LR__0142
04408                 | '       if ++songPosition >= songLength
04408     A3 0E 06 F1 | 	add	objptr, #163
0440c     07 81 C2 FA | 	rdbyte	local01, objptr
04410     01 80 06 F1 | 	add	local01, #1
04414     07 81 42 FC | 	wrbyte	local01, objptr
04418     07 85 C2 FA | 	rdbyte	local03, objptr
0441c     09 0E 86 F1 | 	sub	objptr, #9
04420     07 87 C2 FA | 	rdbyte	local04, objptr
04424     9A 0E 86 F1 | 	sub	objptr, #154
04428     43 85 5A F2 | 	cmps	local03, local04 wcz
0442c                 | '         songPosition := 0
0442c     A3 0E 06 31 |  if_ae	add	objptr, #163
04430     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04434     A3 0E 86 31 |  if_ae	sub	objptr, #163
04438                 | ' 
04438                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04438     E4 0F 06 F1 | 	add	objptr, #484
0443c     07 85 C2 FA | 	rdbyte	local03, objptr
04440     42 81 02 F6 | 	mov	local01, local03
04444     02 80 66 F0 | 	shl	local01, #2
04448     42 81 02 F1 | 	add	local01, local03
0444c     01 80 66 F0 | 	shl	local01, #1
04450     01 0E 06 F1 | 	add	objptr, #1
04454     07 87 C2 FA | 	rdbyte	local04, objptr
04458     43 81 02 F1 | 	add	local01, local04
0445c     43 0F 86 F1 | 	sub	objptr, #323
04460     07 81 42 FC | 	wrbyte	local01, objptr
04464     A2 0E 86 F1 | 	sub	objptr, #162
04468                 | ' 
04468                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04468                 | '     else
04468     58 00 90 FD | 	jmp	#LR__0144
0446c                 | LR__0142
0446c                 | '       if ++patternRow >= PATTERN_LENGTH
0446c     A2 0E 06 F1 | 	add	objptr, #162
04470     07 81 C2 FA | 	rdbyte	local01, objptr
04474     01 80 06 F1 | 	add	local01, #1
04478     07 81 42 FC | 	wrbyte	local01, objptr
0447c     07 85 C2 FA | 	rdbyte	local03, objptr
04480     A2 0E 86 F1 | 	sub	objptr, #162
04484     40 84 5E F2 | 	cmps	local03, #64 wcz
04488     38 00 90 CD |  if_b	jmp	#LR__0143
0448c                 | '         patternRow := 0
0448c     A2 0E 06 F1 | 	add	objptr, #162
04490     07 01 48 FC | 	wrbyte	#0, objptr
04494                 | ' 
04494                 | '         if ++songPosition >= songLength
04494     01 0E 06 F1 | 	add	objptr, #1
04498     07 81 C2 FA | 	rdbyte	local01, objptr
0449c     01 80 06 F1 | 	add	local01, #1
044a0     07 81 42 FC | 	wrbyte	local01, objptr
044a4     07 85 C2 FA | 	rdbyte	local03, objptr
044a8     09 0E 86 F1 | 	sub	objptr, #9
044ac     07 87 C2 FA | 	rdbyte	local04, objptr
044b0     9A 0E 86 F1 | 	sub	objptr, #154
044b4     43 85 5A F2 | 	cmps	local03, local04 wcz
044b8                 | '           songPosition := 0
044b8     A3 0E 06 31 |  if_ae	add	objptr, #163
044bc     07 01 48 3C |  if_ae	wrbyte	#0, objptr
044c0     A3 0E 86 31 |  if_ae	sub	objptr, #163
044c4                 | LR__0143
044c4                 | LR__0144
044c4                 | LR__0145
044c4                 | ' 
044c4                 | '     ' Handle "jump to song position" command, "B"
044c4                 | '     if cmdB_updatePosition
044c4     E8 0F 06 F1 | 	add	objptr, #488
044c8     07 81 CA FA | 	rdbyte	local01, objptr wz
044cc     E8 0F 86 F1 | 	sub	objptr, #488
044d0     28 00 90 AD |  if_e	jmp	#LR__0146
044d4                 | ' 
044d4                 | '       songPosition := cmdB_memoryZ
044d4     E7 0F 06 F1 | 	add	objptr, #487
044d8     07 81 C2 FA | 	rdbyte	local01, objptr
044dc     44 0F 86 F1 | 	sub	objptr, #324
044e0     07 81 42 FC | 	wrbyte	local01, objptr
044e4                 | ' 
044e4                 | '       ifnot cmdD_updatePosition
044e4     43 0F 06 F1 | 	add	objptr, #323
044e8     07 81 CA FA | 	rdbyte	local01, objptr wz
044ec     E6 0F 86 F1 | 	sub	objptr, #486
044f0                 | '         patternRow := 0
044f0     A2 0E 06 A1 |  if_e	add	objptr, #162
044f4     07 01 48 AC |  if_e	wrbyte	#0, objptr
044f8     A2 0E 86 A1 |  if_e	sub	objptr, #162
044fc                 | LR__0146
044fc                 | ' 
044fc                 | '     ' We need to be sure that all positioning commands are reset for the next tick
044fc                 | '     cmdE6_updatePositionCommon := false
044fc     F5 0F 06 F1 | 	add	objptr, #501
04500     07 01 48 FC | 	wrbyte	#0, objptr
04504                 | '     cmdB_updatePosition := false
04504     0D 0E 86 F1 | 	sub	objptr, #13
04508     07 01 48 FC | 	wrbyte	#0, objptr
0450c                 | '     cmdD_updatePosition := false
0450c     02 0E 86 F1 | 	sub	objptr, #2
04510     07 01 48 FC | 	wrbyte	#0, objptr
04514                 | '     patternDelay := 0
04514     41 0F 86 F1 | 	sub	objptr, #321
04518     07 01 48 FC | 	wrbyte	#0, objptr
0451c     A5 0E 86 F1 | 	sub	objptr, #165
04520                 | LR__0147
04520                 | LR__0148
04520     AF F0 03 F6 | 	mov	ptra, fp
04524     BF 00 A0 FD | 	call	#popregs_
04528                 | _trackerplayer_spin2_tick_ret
04528     2D 00 64 FD | 	ret
0452c                 | 
0452c                 | ' 
0452c                 | ' 
0452c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0452c                 | _trackerplayer_spin2_amigaPeriodToNote
0452c                 | ' 
0452c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0452c     00 32 06 F6 | 	mov	_var01, #0
04530     18 BB 9F FE | 	loc	pa,	#(@LR__0150-@LR__0149)
04534     93 00 A0 FD | 	call	#FCACHE_LOAD_
04538                 | LR__0149
04538                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04538     06 00 00 FF 
0453c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04540     14 35 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04544     3A 37 02 F6 | 	mov	_var03, arg02
04548     03 36 66 F0 | 	shl	_var03, #3
0454c     3A 37 02 F1 | 	add	_var03, arg02
04550     03 36 66 F0 | 	shl	_var03, #3
04554     1B 35 02 F1 | 	add	_var02, _var03
04558     19 39 02 F6 | 	mov	_var04, _var01
0455c     01 38 66 F0 | 	shl	_var04, #1
04560     1A 39 02 F1 | 	add	_var04, _var02
04564     1C 3B E2 FA | 	rdword	_var05, _var04
04568     39 3B 5A F2 | 	cmps	_var05, arg01 wcz
0456c                 | '       quit
0456c     06 00 00 FF 
04570     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04574     0C 00 90 ED |  if_be	jmp	#LR__0151
04578     01 32 06 F1 | 	add	_var01, #1
0457c     24 32 5E F2 | 	cmps	_var01, #36 wcz
04580     B4 FF 9F CD |  if_b	jmp	#LR__0149
04584                 | LR__0150
04584                 | LR__0151
04584                 | ' 
04584                 | '   return i
04584     19 2D 02 F6 | 	mov	result1, _var01
04588                 | _trackerplayer_spin2_amigaPeriodToNote_ret
04588     2D 00 64 FD | 	ret
0458c                 | 
0458c                 | ' 
0458c                 | ' 
0458c                 | ' PRI retunePeriod(period, fTune) | noteNumber
0458c                 | _trackerplayer_spin2_retunePeriod
0458c     06 5A 05 F6 | 	mov	COUNT_, #6
04590     B0 00 A0 FD | 	call	#pushregs_
04594     39 81 02 F6 | 	mov	local01, arg01
04598     3A 83 02 F6 | 	mov	local02, arg02
0459c                 | ' 
0459c                 | '   if period > 0 and fTune < 16
0459c     00 80 5E F2 | 	cmps	local01, #0 wcz
045a0     50 00 90 ED |  if_be	jmp	#LR__0152
045a4     10 82 5E F2 | 	cmps	local02, #16 wcz
045a8     48 00 90 3D |  if_ae	jmp	#LR__0152
045ac                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
045ac     40 73 E2 FA | 	rdword	arg01, local01
045b0     00 74 06 F6 | 	mov	arg02, #0
045b4     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
045b8     16 85 02 F6 | 	mov	local03, result1
045bc                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
045bc     06 00 00 FF 
045c0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
045c4     14 87 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
045c8     41 89 02 F6 | 	mov	local05, local02
045cc     03 88 66 F0 | 	shl	local05, #3
045d0     41 89 02 F1 | 	add	local05, local02
045d4     03 88 66 F0 | 	shl	local05, #3
045d8     44 87 02 F1 | 	add	local04, local05
045dc     01 84 66 F0 | 	shl	local03, #1
045e0     43 85 02 F1 | 	add	local03, local04
045e4     42 8B E2 FA | 	rdword	local06, local03
045e8     40 8B 52 FC | 	wrword	local06, local01
045ec     06 00 00 FF 
045f0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
045f4                 | LR__0152
045f4     AF F0 03 F6 | 	mov	ptra, fp
045f8     BF 00 A0 FD | 	call	#popregs_
045fc                 | _trackerplayer_spin2_retunePeriod_ret
045fc     2D 00 64 FD | 	ret
04600                 | 
04600                 | ' 
04600                 | ' 
04600                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04600                 | _trackerplayer_spin2_getSampleInfo
04600     39 33 0A F6 | 	mov	_var01, arg01 wz
04604                 | ' 
04604                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04604     08 00 90 AD |  if_e	jmp	#LR__0153
04608     1F 32 5E F2 | 	cmps	_var01, #31 wcz
0460c     08 00 90 ED |  if_be	jmp	#LR__0154
04610                 | LR__0153
04610                 | '     long[samplePtr] := 0
04610     3A 01 68 FC | 	wrlong	#0, arg02
04614                 | '     return
04614     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04618                 | LR__0154
04618                 | ' 
04618                 | '   sampleNumber--
04618     01 32 86 F1 | 	sub	_var01, #1
0461c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0461c     0A 0E 06 F1 | 	add	objptr, #10
04620     07 35 02 FB | 	rdlong	_var02, objptr
04624     19 37 02 F6 | 	mov	_var03, _var01
04628     04 36 66 F0 | 	shl	_var03, #4
0462c     19 37 82 F1 | 	sub	_var03, _var01
04630     01 36 66 F0 | 	shl	_var03, #1
04634     1B 35 02 F1 | 	add	_var02, _var03
04638                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04638     1A 39 02 F6 | 	mov	_var04, _var02
0463c     16 38 06 F1 | 	add	_var04, #22
04640     1C 3B C2 FA | 	rdbyte	_var05, _var04
04644     08 3A 66 F0 | 	shl	_var05, #8
04648     1A 37 02 F6 | 	mov	_var03, _var02
0464c     17 36 06 F1 | 	add	_var03, #23
04650     1B 3D C2 FA | 	rdbyte	_var06, _var03
04654     1E 3B 42 F5 | 	or	_var05, _var06
04658     01 3A 66 F0 | 	shl	_var05, #1
0465c     3B 3B 62 FC | 	wrlong	_var05, arg03
04660                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04660     1A 3B 02 F6 | 	mov	_var05, _var02
04664     18 3A 06 F1 | 	add	_var05, #24
04668     1D 39 C2 FA | 	rdbyte	_var04, _var05
0466c     3C 39 62 FC | 	wrlong	_var04, arg04
04670                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04670     1A 3B 02 F6 | 	mov	_var05, _var02
04674     19 3A 06 F1 | 	add	_var05, #25
04678     1D 39 C2 FA | 	rdbyte	_var04, _var05
0467c     3D 39 62 FC | 	wrlong	_var04, arg05
04680                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04680     1A 39 02 F6 | 	mov	_var04, _var02
04684     1A 38 06 F1 | 	add	_var04, #26
04688     1C 3B C2 FA | 	rdbyte	_var05, _var04
0468c     08 3A 66 F0 | 	shl	_var05, #8
04690     1A 37 02 F6 | 	mov	_var03, _var02
04694     1B 36 06 F1 | 	add	_var03, #27
04698     1B 3D C2 FA | 	rdbyte	_var06, _var03
0469c     1E 3B 42 F5 | 	or	_var05, _var06
046a0     01 3A 66 F0 | 	shl	_var05, #1
046a4     3E 3B 62 FC | 	wrlong	_var05, arg06
046a8                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
046a8     1A 39 02 F6 | 	mov	_var04, _var02
046ac     1C 38 06 F1 | 	add	_var04, #28
046b0     1C 3B C2 FA | 	rdbyte	_var05, _var04
046b4     08 3A 66 F0 | 	shl	_var05, #8
046b8     1D 34 06 F1 | 	add	_var02, #29
046bc     1A 3D C2 FA | 	rdbyte	_var06, _var02
046c0     1E 3B 42 F5 | 	or	_var05, _var06
046c4     01 3A 66 F0 | 	shl	_var05, #1
046c8     3F 3B 62 FC | 	wrlong	_var05, arg07
046cc                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
046cc     02 32 66 F0 | 	shl	_var01, #2
046d0     08 0E 06 F1 | 	add	objptr, #8
046d4     07 33 02 F1 | 	add	_var01, objptr
046d8     19 37 02 FB | 	rdlong	_var03, _var01
046dc     3A 37 62 FC | 	wrlong	_var03, arg02
046e0                 | ' 
046e0                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
046e0     3F 3B 02 FB | 	rdlong	_var05, arg07
046e4     02 3A 0E F2 | 	cmp	_var05, #2 wz
046e8     12 0E 86 F1 | 	sub	objptr, #18
046ec     08 00 90 5D |  if_ne	jmp	#LR__0155
046f0     3E 39 0A FB | 	rdlong	_var04, arg06 wz
046f4                 | '     long[repeatLength] := 1
046f4     3F 03 68 AC |  if_e	wrlong	#1, arg07
046f8                 | LR__0155
046f8                 | _trackerplayer_spin2_getSampleInfo_ret
046f8     2D 00 64 FD | 	ret
046fc                 | 
046fc                 | ' 
046fc                 | ' 
046fc                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
046fc                 | _trackerplayer_spin2_getNoteData
046fc                 | ' 
046fc                 | '   ' Get the note data for a specific channel/song position/pattern row
046fc                 | '   patternNumber := byte[songPositionsLut][position & 127]
046fc     96 0E 06 F1 | 	add	objptr, #150
04700     07 33 02 FB | 	rdlong	_var01, objptr
04704     7F 74 06 F5 | 	and	arg02, #127
04708     19 75 02 F1 | 	add	arg02, _var01
0470c     3A 35 C2 FA | 	rdbyte	_var02, arg02
04710                 | '   patternPtr    := patternsData + (patternNumber << 10)
04710     04 0E 86 F1 | 	sub	objptr, #4
04714     07 37 02 FB | 	rdlong	_var03, objptr
04718     92 0E 86 F1 | 	sub	objptr, #146
0471c     0A 34 66 F0 | 	shl	_var02, #10
04720     1A 37 02 F1 | 	add	_var03, _var02
04724                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04724     3F 76 06 F5 | 	and	arg03, #63
04728     04 76 66 F0 | 	shl	arg03, #4
0472c     3B 37 02 F1 | 	add	_var03, arg03
04730     03 72 06 F5 | 	and	arg01, #3
04734     02 72 66 F0 | 	shl	arg01, #2
04738     39 37 02 F1 | 	add	_var03, arg01
0473c                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
0473c     1B 39 C2 FA | 	rdbyte	_var04, _var03
04740     18 38 66 F0 | 	shl	_var04, #24
04744     01 36 06 F1 | 	add	_var03, #1
04748     1B 3B C2 FA | 	rdbyte	_var05, _var03
0474c     10 3A 66 F0 | 	shl	_var05, #16
04750     1D 39 42 F5 | 	or	_var04, _var05
04754     01 36 06 F1 | 	add	_var03, #1
04758     1B 3D C2 FA | 	rdbyte	_var06, _var03
0475c     08 3C 66 F0 | 	shl	_var06, #8
04760     1E 39 42 F5 | 	or	_var04, _var06
04764     01 36 06 F1 | 	add	_var03, #1
04768     1B 3F C2 FA | 	rdbyte	_var07, _var03
0476c     1F 39 42 F5 | 	or	_var04, _var07
04770                 | ' 
04770                 | '   ' Extract the different sub parts from the data
04770                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04770     1C 41 02 F6 | 	mov	_var08, _var04
04774     0C 40 46 F0 | 	shr	_var08, #12
04778     0F 40 06 F5 | 	and	_var08, #15
0477c     1C 3B 02 F6 | 	mov	_var05, _var04
04780     18 3A 46 F0 | 	shr	_var05, #24
04784     F0 3A 06 F5 | 	and	_var05, #240
04788     1D 41 42 F5 | 	or	_var08, _var05
0478c     3C 41 62 FC | 	wrlong	_var08, arg04
04790                 | '   long[period]       :=  (data >> 16) & $FFF
04790     1C 41 02 F6 | 	mov	_var08, _var04
04794     10 40 46 F0 | 	shr	_var08, #16
04798     07 00 00 FF 
0479c     FF 41 06 F5 | 	and	_var08, ##4095
047a0     3D 41 62 FC | 	wrlong	_var08, arg05
047a4                 | '   long[effect]       :=   data & $FFF
047a4     07 00 00 FF 
047a8     FF 39 06 F5 | 	and	_var04, ##4095
047ac     3E 39 62 FC | 	wrlong	_var04, arg06
047b0                 | _trackerplayer_spin2_getNoteData_ret
047b0     2D 00 64 FD | 	ret
047b4                 | 
047b4                 | ' 
047b4                 | ' 
047b4                 | ' PRI triggerNote(channel)
047b4                 | _trackerplayer_spin2_triggerNote
047b4                 | ' 
047b4                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
047b4     39 33 02 F6 | 	mov	_var01, arg01
047b8     02 32 66 F0 | 	shl	_var01, #2
047bc     47 0F 06 F1 | 	add	objptr, #327
047c0     07 33 02 F1 | 	add	_var01, objptr
047c4     39 35 02 F6 | 	mov	_var02, arg01
047c8     90 0E 86 F1 | 	sub	objptr, #144
047cc     19 37 02 FB | 	rdlong	_var03, _var01
047d0     07 35 02 F1 | 	add	_var02, objptr
047d4     1A 37 42 FC | 	wrbyte	_var03, _var02
047d8                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
047d8     39 33 02 F6 | 	mov	_var01, arg01
047dc     02 32 66 F0 | 	shl	_var01, #2
047e0     80 0E 06 F1 | 	add	objptr, #128
047e4     07 33 02 F1 | 	add	_var01, objptr
047e8     39 35 02 F6 | 	mov	_var02, arg01
047ec     02 34 66 F0 | 	shl	_var02, #2
047f0     90 0E 86 F1 | 	sub	objptr, #144
047f4     19 37 02 FB | 	rdlong	_var03, _var01
047f8     07 35 02 F1 | 	add	_var02, objptr
047fc     1A 37 62 FC | 	wrlong	_var03, _var02
04800                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04800     39 33 02 F6 | 	mov	_var01, arg01
04804     02 32 66 F0 | 	shl	_var01, #2
04808     80 0E 06 F1 | 	add	objptr, #128
0480c     07 33 02 F1 | 	add	_var01, objptr
04810     39 35 02 F6 | 	mov	_var02, arg01
04814     02 34 66 F0 | 	shl	_var02, #2
04818     48 0E 86 F1 | 	sub	objptr, #72
0481c     19 37 02 FB | 	rdlong	_var03, _var01
04820     07 35 02 F1 | 	add	_var02, objptr
04824     1A 37 62 FC | 	wrlong	_var03, _var02
04828                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04828     39 33 02 F6 | 	mov	_var01, arg01
0482c     02 32 66 F0 | 	shl	_var01, #2
04830     78 0E 06 F1 | 	add	objptr, #120
04834     07 33 02 F1 | 	add	_var01, objptr
04838     39 39 02 F6 | 	mov	_var04, arg01
0483c     01 38 66 F0 | 	shl	_var04, #1
04840     9C 0E 86 F1 | 	sub	objptr, #156
04844     19 3B 02 FB | 	rdlong	_var05, _var01
04848     07 39 02 F1 | 	add	_var04, objptr
0484c     1C 3B 52 FC | 	wrword	_var05, _var04
04850                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04850     39 33 02 F6 | 	mov	_var01, arg01
04854     02 32 66 F0 | 	shl	_var01, #2
04858     AC 0E 06 F1 | 	add	objptr, #172
0485c     07 33 02 F1 | 	add	_var01, objptr
04860     39 35 02 F6 | 	mov	_var02, arg01
04864     02 34 66 F0 | 	shl	_var02, #2
04868     A4 0E 86 F1 | 	sub	objptr, #164
0486c     19 37 02 FB | 	rdlong	_var03, _var01
04870     07 35 02 F1 | 	add	_var02, objptr
04874     1A 37 62 FC | 	wrlong	_var03, _var02
04878                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04878     39 33 02 F6 | 	mov	_var01, arg01
0487c     02 32 66 F0 | 	shl	_var01, #2
04880     B4 0E 06 F1 | 	add	objptr, #180
04884     07 33 02 F1 | 	add	_var01, objptr
04888     39 39 02 F6 | 	mov	_var04, arg01
0488c     01 38 66 F0 | 	shl	_var04, #1
04890     A0 0E 86 F1 | 	sub	objptr, #160
04894     19 3B 02 FB | 	rdlong	_var05, _var01
04898     07 39 02 F1 | 	add	_var04, objptr
0489c     1C 3B 52 FC | 	wrword	_var05, _var04
048a0                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
048a0     39 3D 02 F6 | 	mov	_var06, arg01
048a4     1F 0F 06 F1 | 	add	objptr, #287
048a8     07 3D 02 F1 | 	add	_var06, objptr
048ac     1E 33 C2 FA | 	rdbyte	_var01, _var06
048b0     01 32 06 F1 | 	add	_var01, #1
048b4     07 73 02 F1 | 	add	arg01, objptr
048b8     39 33 42 FC | 	wrbyte	_var01, arg01
048bc     F6 0F 86 F1 | 	sub	objptr, #502
048c0                 | _trackerplayer_spin2_triggerNote_ret
048c0     2D 00 64 FD | 	ret
048c4                 | 
048c4                 | ' 
048c4                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
048c4                 | _trackerplayer_spin2_processChannel
048c4     0F 5A 05 F6 | 	mov	COUNT_, #15
048c8     B0 00 A0 FD | 	call	#pushregs_
048cc     24 F0 07 F1 | 	add	ptra, #36
048d0     AF 72 62 FC | 	wrlong	arg01, fp
048d4     04 5E 05 F1 | 	add	fp, #4
048d8     AF 74 62 FC | 	wrlong	arg02, fp
048dc     04 5E 05 F1 | 	add	fp, #4
048e0     AF 76 62 FC | 	wrlong	arg03, fp
048e4     04 5E 05 F1 | 	add	fp, #4
048e8     AF 78 62 FC | 	wrlong	arg04, fp
048ec     0C 5E 85 F1 | 	sub	fp, #12
048f0                 | ' 
048f0                 | '   channel := channel & 3
048f0     AF 80 02 FB | 	rdlong	local01, fp
048f4     03 80 06 F5 | 	and	local01, #3
048f8     AF 80 62 FC | 	wrlong	local01, fp
048fc                 | '   cmd     := (effect >> 8) & $F
048fc     0C 5E 05 F1 | 	add	fp, #12
04900     AF 80 02 FB | 	rdlong	local01, fp
04904     08 80 46 F0 | 	shr	local01, #8
04908     0F 80 06 F5 | 	and	local01, #15
0490c     BA 0F 06 F1 | 	add	objptr, #442
04910     07 81 42 FC | 	wrbyte	local01, objptr
04914                 | '   x       := (effect >> 4) & $F
04914     AF 80 02 FB | 	rdlong	local01, fp
04918     04 80 46 F0 | 	shr	local01, #4
0491c     0F 80 06 F5 | 	and	local01, #15
04920     03 0E 86 F1 | 	sub	objptr, #3
04924     07 81 42 FC | 	wrbyte	local01, objptr
04928                 | '   y       := (effect     ) & $F
04928     AF 80 02 FB | 	rdlong	local01, fp
0492c     0F 80 06 F5 | 	and	local01, #15
04930     01 0E 06 F1 | 	add	objptr, #1
04934     07 81 42 FC | 	wrbyte	local01, objptr
04938                 | '   z       := (effect     ) & $FF
04938     AF 80 02 FB | 	rdlong	local01, fp
0493c     0C 5E 85 F1 | 	sub	fp, #12
04940     FF 80 06 F5 | 	and	local01, #255
04944     01 0E 06 F1 | 	add	objptr, #1
04948     07 81 42 FC | 	wrbyte	local01, objptr
0494c                 | ' 
0494c                 | '   ' Handle everything that executes on "tick zero"
0494c                 | '   if tickCounter == 0
0494c     18 0F 86 F1 | 	sub	objptr, #280
04950     07 81 CA FA | 	rdbyte	local01, objptr wz
04954     A1 0E 86 F1 | 	sub	objptr, #161
04958     F8 03 90 5D |  if_ne	jmp	#LR__0166
0495c                 | ' 
0495c                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
0495c                 | '     deltaPeriod[channel] := 0
0495c     AF 80 02 FB | 	rdlong	local01, fp
04960     02 80 66 F0 | 	shl	local01, #2
04964     EF 0E 06 F1 | 	add	objptr, #239
04968     07 81 02 F1 | 	add	local01, objptr
0496c     40 01 68 FC | 	wrlong	#0, local01
04970                 | '     deltaVolume[channel] := 0
04970     AF 80 02 FB | 	rdlong	local01, fp
04974     02 80 66 F0 | 	shl	local01, #2
04978     20 0E 06 F1 | 	add	objptr, #32
0497c     07 81 02 F1 | 	add	local01, objptr
04980     40 01 68 FC | 	wrlong	#0, local01
04984                 | ' 
04984                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04984                 | '     if sampleNumber > 0
04984     04 5E 05 F1 | 	add	fp, #4
04988     AF 80 02 FB | 	rdlong	local01, fp
0498c     04 5E 85 F1 | 	sub	fp, #4
04990     00 80 5E F2 | 	cmps	local01, #0 wcz
04994     0F 0F 86 F1 | 	sub	objptr, #271
04998     20 00 90 ED |  if_be	jmp	#LR__0156
0499c                 | '       sampleNumber_memory[channel] := sampleNumber
0499c     AF 80 02 FB | 	rdlong	local01, fp
049a0     E0 0F 06 F1 | 	add	objptr, #480
049a4     07 81 02 F1 | 	add	local01, objptr
049a8     04 5E 05 F1 | 	add	fp, #4
049ac     AF 82 02 FB | 	rdlong	local02, fp
049b0     04 5E 85 F1 | 	sub	fp, #4
049b4     40 83 42 FC | 	wrbyte	local02, local01
049b8     E0 0F 86 F1 | 	sub	objptr, #480
049bc                 | LR__0156
049bc                 | ' 
049bc                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
049bc                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
049bc     AF 80 02 FB | 	rdlong	local01, fp
049c0     E0 0F 06 F1 | 	add	objptr, #480
049c4     07 81 02 F1 | 	add	local01, objptr
049c8     40 73 C2 FA | 	rdbyte	arg01, local01
049cc     20 5E 05 F1 | 	add	fp, #32
049d0     AF 74 02 F6 | 	mov	arg02, fp
049d4     10 5E 85 F1 | 	sub	fp, #16
049d8     AF 84 02 F6 | 	mov	local03, fp
049dc     31 0E 86 F1 | 	sub	objptr, #49
049e0     07 87 02 F6 | 	mov	local04, objptr
049e4     43 89 02 F6 | 	mov	local05, local04
049e8     04 5E 05 F1 | 	add	fp, #4
049ec     AF 8A 02 F6 | 	mov	local06, fp
049f0     45 8D 02 F6 | 	mov	local07, local06
049f4     04 5E 05 F1 | 	add	fp, #4
049f8     AF 8E 02 F6 | 	mov	local08, fp
049fc     47 91 02 F6 | 	mov	local09, local08
04a00     04 5E 05 F1 | 	add	fp, #4
04a04     AF 92 02 F6 | 	mov	local10, fp
04a08     49 95 02 F6 | 	mov	local11, local10
04a0c     42 77 02 F6 | 	mov	arg03, local03
04a10     44 79 02 F6 | 	mov	arg04, local05
04a14     46 7B 02 F6 | 	mov	arg05, local07
04a18     48 7D 02 F6 | 	mov	arg06, local09
04a1c     4A 7F 02 F6 | 	mov	arg07, local11
04a20     AF 0F 86 F1 | 	sub	objptr, #431
04a24     1C 5E 85 F1 | 	sub	fp, #28
04a28     D4 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04a2c                 | ' 
04a2c                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04a2c                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04a2c                 | '     if sampleNumber > 0
04a2c     04 5E 05 F1 | 	add	fp, #4
04a30     AF 80 02 FB | 	rdlong	local01, fp
04a34     04 5E 85 F1 | 	sub	fp, #4
04a38     00 80 5E F2 | 	cmps	local01, #0 wcz
04a3c     24 00 90 ED |  if_be	jmp	#LR__0157
04a40                 | '       currVolume[channel] := volume
04a40     AF 80 02 FB | 	rdlong	local01, fp
04a44     02 80 66 F0 | 	shl	local01, #2
04a48     FF 0E 06 F1 | 	add	objptr, #255
04a4c     07 81 02 F1 | 	add	local01, objptr
04a50     14 5E 05 F1 | 	add	fp, #20
04a54     AF 82 02 FB | 	rdlong	local02, fp
04a58     14 5E 85 F1 | 	sub	fp, #20
04a5c     40 83 62 FC | 	wrlong	local02, local01
04a60     FF 0E 86 F1 | 	sub	objptr, #255
04a64                 | LR__0157
04a64                 | ' 
04a64                 | '     ' Handle all commands that executes on "zero tick"
04a64                 | '     sampleOffset := 0
04a64     B3 0F 06 F1 | 	add	objptr, #435
04a68     07 01 68 FC | 	wrlong	#0, objptr
04a6c     B3 0F 86 F1 | 	sub	objptr, #435
04a70                 | '     handleZeroTickCommands(channel)
04a70     AF 72 02 FB | 	rdlong	arg01, fp
04a74     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04a78                 | ' 
04a78                 | '     ' Prepare sample data for triggering (now or later)
04a78                 | '     if period > 0
04a78     08 5E 05 F1 | 	add	fp, #8
04a7c     AF 80 02 FB | 	rdlong	local01, fp
04a80     08 5E 85 F1 | 	sub	fp, #8
04a84     00 80 5E F2 | 	cmps	local01, #0 wcz
04a88     D0 02 90 ED |  if_be	jmp	#LR__0167
04a8c                 | ' 
04a8c                 | '       retunePeriod(@period, fineTune)
04a8c     08 5E 05 F1 | 	add	fp, #8
04a90     AF 72 02 F6 | 	mov	arg01, fp
04a94     08 5E 85 F1 | 	sub	fp, #8
04a98     AF 0F 06 F1 | 	add	objptr, #431
04a9c     07 75 02 FB | 	rdlong	arg02, objptr
04aa0     AF 0F 86 F1 | 	sub	objptr, #431
04aa4     E4 FA BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04aa8                 | '       currFineTune[channel]        := fineTune
04aa8     AF 80 02 FB | 	rdlong	local01, fp
04aac     D3 0E 06 F1 | 	add	objptr, #211
04ab0     07 81 02 F1 | 	add	local01, objptr
04ab4     DC 0E 06 F1 | 	add	objptr, #220
04ab8     07 83 02 FB | 	rdlong	local02, objptr
04abc     40 83 42 FC | 	wrbyte	local02, local01
04ac0                 | '       lastSetPeriod[channel]       := period
04ac0     AF 80 02 FB | 	rdlong	local01, fp
04ac4     02 80 66 F0 | 	shl	local01, #2
04ac8     88 0E 86 F1 | 	sub	objptr, #136
04acc     07 81 02 F1 | 	add	local01, objptr
04ad0     08 5E 05 F1 | 	add	fp, #8
04ad4     AF 82 02 FB | 	rdlong	local02, fp
04ad8     40 83 62 FC | 	wrlong	local02, local01
04adc     08 5E 85 F1 | 	sub	fp, #8
04ae0                 | '       lastSetRepeatLength[channel] := repeatLength
04ae0     AF 80 02 FB | 	rdlong	local01, fp
04ae4     02 80 66 F0 | 	shl	local01, #2
04ae8     40 0E 06 F1 | 	add	objptr, #64
04aec     07 81 02 F1 | 	add	local01, objptr
04af0     1C 5E 05 F1 | 	add	fp, #28
04af4     AF 82 02 FB | 	rdlong	local02, fp
04af8     40 83 62 FC | 	wrlong	local02, local01
04afc     1C 5E 85 F1 | 	sub	fp, #28
04b00                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04b00     AF 80 02 FB | 	rdlong	local01, fp
04b04     02 80 66 F0 | 	shl	local01, #2
04b08     10 0E 06 F1 | 	add	objptr, #16
04b0c     07 81 02 F1 | 	add	local01, objptr
04b10     18 5E 05 F1 | 	add	fp, #24
04b14     AF 82 02 FB | 	rdlong	local02, fp
04b18     40 83 62 FC | 	wrlong	local02, local01
04b1c                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04b1c     08 5E 05 F1 | 	add	fp, #8
04b20     AF 80 02 FB | 	rdlong	local01, fp
04b24     20 5E 85 F1 | 	sub	fp, #32
04b28     3C 0E 06 F1 | 	add	objptr, #60
04b2c     07 83 02 FB | 	rdlong	local02, objptr
04b30     41 81 02 F1 | 	add	local01, local02
04b34     AF 96 02 FB | 	rdlong	local12, fp
04b38     02 96 66 F0 | 	shl	local12, #2
04b3c     7C 0E 86 F1 | 	sub	objptr, #124
04b40     07 99 02 F6 | 	mov	local13, objptr
04b44     07 97 02 F1 | 	add	local12, objptr
04b48     4B 81 62 FC | 	wrlong	local01, local12
04b4c                 | '       lastSetSampleNr[channel]     := sampleNumber
04b4c     AF 80 02 FB | 	rdlong	local01, fp
04b50     02 80 66 F0 | 	shl	local01, #2
04b54     10 0E 06 F1 | 	add	objptr, #16
04b58     07 81 02 F1 | 	add	local01, objptr
04b5c     04 5E 05 F1 | 	add	fp, #4
04b60     AF 82 02 FB | 	rdlong	local02, fp
04b64     40 83 62 FC | 	wrlong	local02, local01
04b68                 | ' 
04b68                 | '       ' This calculates the correct sample length in all situations
04b68                 | '       if repeatLength > 2
04b68     18 5E 05 F1 | 	add	fp, #24
04b6c     AF 80 02 FB | 	rdlong	local01, fp
04b70     1C 5E 85 F1 | 	sub	fp, #28
04b74     02 80 5E F2 | 	cmps	local01, #2 wcz
04b78     47 0F 86 F1 | 	sub	objptr, #327
04b7c     20 00 90 ED |  if_be	jmp	#LR__0158
04b80                 | '         sampleLength := repeatPoint + repeatLength
04b80     18 5E 05 F1 | 	add	fp, #24
04b84     AF 80 02 FB | 	rdlong	local01, fp
04b88     04 5E 05 F1 | 	add	fp, #4
04b8c     AF 82 02 FB | 	rdlong	local02, fp
04b90     41 81 02 F1 | 	add	local01, local02
04b94     0C 5E 85 F1 | 	sub	fp, #12
04b98     AF 80 62 FC | 	wrlong	local01, fp
04b9c     10 5E 85 F1 | 	sub	fp, #16
04ba0                 | LR__0158
04ba0                 | ' 
04ba0                 | '       if sampleLength - sampleOffset < 1
04ba0     10 5E 05 F1 | 	add	fp, #16
04ba4     AF 80 02 FB | 	rdlong	local01, fp
04ba8     10 5E 85 F1 | 	sub	fp, #16
04bac     B3 0F 06 F1 | 	add	objptr, #435
04bb0     07 83 02 FB | 	rdlong	local02, objptr
04bb4     B3 0F 86 F1 | 	sub	objptr, #435
04bb8     41 81 82 F1 | 	sub	local01, local02
04bbc     01 80 5E F2 | 	cmps	local01, #1 wcz
04bc0     1C 00 90 3D |  if_ae	jmp	#LR__0159
04bc4                 | '         lastSetSampleLength[channel] := 1
04bc4     AF 80 02 FB | 	rdlong	local01, fp
04bc8     02 80 66 F0 | 	shl	local01, #2
04bcc     57 0F 06 F1 | 	add	objptr, #343
04bd0     07 81 02 F1 | 	add	local01, objptr
04bd4     40 03 68 FC | 	wrlong	#1, local01
04bd8                 | '       else
04bd8     57 0F 86 F1 | 	sub	objptr, #343
04bdc     34 00 90 FD | 	jmp	#LR__0160
04be0                 | LR__0159
04be0                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04be0     10 5E 05 F1 | 	add	fp, #16
04be4     AF 80 02 FB | 	rdlong	local01, fp
04be8     10 5E 85 F1 | 	sub	fp, #16
04bec     B3 0F 06 F1 | 	add	objptr, #435
04bf0     07 83 02 FB | 	rdlong	local02, objptr
04bf4     41 81 82 F1 | 	sub	local01, local02
04bf8     AF 96 02 FB | 	rdlong	local12, fp
04bfc     02 96 66 F0 | 	shl	local12, #2
04c00     5C 0E 86 F1 | 	sub	objptr, #92
04c04     07 99 02 F6 | 	mov	local13, objptr
04c08     07 97 02 F1 | 	add	local12, objptr
04c0c     4B 81 62 FC | 	wrlong	local01, local12
04c10     57 0F 86 F1 | 	sub	objptr, #343
04c14                 | LR__0160
04c14                 | ' 
04c14                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04c14                 | '       if sampleOffset > sampleLength
04c14     B3 0F 06 F1 | 	add	objptr, #435
04c18     07 81 02 FB | 	rdlong	local01, objptr
04c1c     B3 0F 86 F1 | 	sub	objptr, #435
04c20     10 5E 05 F1 | 	add	fp, #16
04c24     AF 82 02 FB | 	rdlong	local02, fp
04c28     10 5E 85 F1 | 	sub	fp, #16
04c2c     41 81 5A F2 | 	cmps	local01, local02 wcz
04c30     54 00 90 ED |  if_be	jmp	#LR__0161
04c34                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04c34     20 5E 05 F1 | 	add	fp, #32
04c38     AF 80 02 FB | 	rdlong	local01, fp
04c3c     08 5E 85 F1 | 	sub	fp, #8
04c40     AF 82 02 FB | 	rdlong	local02, fp
04c44     18 5E 85 F1 | 	sub	fp, #24
04c48     41 81 02 F1 | 	add	local01, local02
04c4c     AF 96 02 FB | 	rdlong	local12, fp
04c50     02 96 66 F0 | 	shl	local12, #2
04c54     37 0F 06 F1 | 	add	objptr, #311
04c58     07 99 02 F6 | 	mov	local13, objptr
04c5c     07 97 02 F1 | 	add	local12, objptr
04c60     4B 81 62 FC | 	wrlong	local01, local12
04c64                 | '         lastSetSampleLength[channel] := repeatLength
04c64     AF 80 02 FB | 	rdlong	local01, fp
04c68     02 80 66 F0 | 	shl	local01, #2
04c6c     20 0E 06 F1 | 	add	objptr, #32
04c70     07 81 02 F1 | 	add	local01, objptr
04c74     1C 5E 05 F1 | 	add	fp, #28
04c78     AF 82 02 FB | 	rdlong	local02, fp
04c7c     1C 5E 85 F1 | 	sub	fp, #28
04c80     40 83 62 FC | 	wrlong	local02, local01
04c84     57 0F 86 F1 | 	sub	objptr, #343
04c88                 | LR__0161
04c88                 | ' 
04c88                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04c88                 | '       ifnot cmd == $3 || cmd == $5
04c88     BA 0F 06 F1 | 	add	objptr, #442
04c8c     07 81 C2 FA | 	rdbyte	local01, objptr
04c90     BA 0F 86 F1 | 	sub	objptr, #442
04c94     03 80 0E F2 | 	cmp	local01, #3 wz
04c98     54 00 90 AD |  if_e	jmp	#LR__0164
04c9c     BA 0F 06 F1 | 	add	objptr, #442
04ca0     07 9B C2 FA | 	rdbyte	local14, objptr
04ca4     BA 0F 86 F1 | 	sub	objptr, #442
04ca8     4D 83 02 F6 | 	mov	local02, local14
04cac     05 82 0E F2 | 	cmp	local02, #5 wz
04cb0     3C 00 90 AD |  if_e	jmp	#LR__0164
04cb4                 | '         ifnot cmd == $E && x == $D
04cb4     BA 0F 06 F1 | 	add	objptr, #442
04cb8     07 9D C2 FA | 	rdbyte	local15, objptr
04cbc     BA 0F 86 F1 | 	sub	objptr, #442
04cc0     4E 81 02 F6 | 	mov	local01, local15
04cc4     0E 80 0E F2 | 	cmp	local01, #14 wz
04cc8     18 00 90 5D |  if_ne	jmp	#LR__0162
04ccc     B7 0F 06 F1 | 	add	objptr, #439
04cd0     07 9B C2 FA | 	rdbyte	local14, objptr
04cd4     B7 0F 86 F1 | 	sub	objptr, #439
04cd8     4D 83 02 F6 | 	mov	local02, local14
04cdc     0D 82 0E F2 | 	cmp	local02, #13 wz
04ce0     0C 00 90 AD |  if_e	jmp	#LR__0163
04ce4                 | LR__0162
04ce4                 | '           triggerNote(channel)
04ce4     AF 80 02 FB | 	rdlong	local01, fp
04ce8     40 73 02 F6 | 	mov	arg01, local01
04cec     C4 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04cf0                 | LR__0163
04cf0                 | LR__0164
04cf0                 | ' 
04cf0                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04cf0                 | '       if resetTremolo[channel] > 0
04cf0     AF 80 02 FB | 	rdlong	local01, fp
04cf4     8F 0F 06 F1 | 	add	objptr, #399
04cf8     07 81 02 F1 | 	add	local01, objptr
04cfc     40 83 C2 FA | 	rdbyte	local02, local01
04d00     00 82 5E F2 | 	cmps	local02, #0 wcz
04d04     8F 0F 86 F1 | 	sub	objptr, #399
04d08     14 00 90 ED |  if_be	jmp	#LR__0165
04d0c                 | '         tremoloPos[channel] := 0
04d0c     AF 80 02 FB | 	rdlong	local01, fp
04d10     8B 0F 06 F1 | 	add	objptr, #395
04d14     07 81 02 F1 | 	add	local01, objptr
04d18     40 01 48 FC | 	wrbyte	#0, local01
04d1c     8B 0F 86 F1 | 	sub	objptr, #395
04d20                 | LR__0165
04d20                 | ' 
04d20                 | '       if resetVibrato[channel] > 0
04d20     AF 80 02 FB | 	rdlong	local01, fp
04d24     93 0F 06 F1 | 	add	objptr, #403
04d28     07 81 02 F1 | 	add	local01, objptr
04d2c     40 83 C2 FA | 	rdbyte	local02, local01
04d30     00 82 5E F2 | 	cmps	local02, #0 wcz
04d34     93 0F 86 F1 | 	sub	objptr, #403
04d38     20 00 90 ED |  if_be	jmp	#LR__0167
04d3c                 | '         vibratoPos[channel] := 0
04d3c     AF 80 02 FB | 	rdlong	local01, fp
04d40     87 0F 06 F1 | 	add	objptr, #391
04d44     07 81 02 F1 | 	add	local01, objptr
04d48     40 01 48 FC | 	wrbyte	#0, local01
04d4c     87 0F 86 F1 | 	sub	objptr, #391
04d50                 | ' 
04d50                 | '   else
04d50     08 00 90 FD | 	jmp	#LR__0167
04d54                 | LR__0166
04d54                 | '     ' Handle commands that executes on all "non zero ticks"
04d54                 | '     handleNonZeroTickCommands(channel)
04d54     AF 72 02 FB | 	rdlong	arg01, fp
04d58     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04d5c                 | LR__0167
04d5c                 | ' 
04d5c                 | '   ' Handle commands that executes on every tick
04d5c                 | '   handleEveryTickCommands(channel)
04d5c     AF 72 02 FB | 	rdlong	arg01, fp
04d60     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04d64                 | ' 
04d64                 | '   ' Handle boundaries that should be kept
04d64                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04d64     AF 9C 02 FB | 	rdlong	local15, fp
04d68     02 9C 66 F0 | 	shl	local15, #2
04d6c     DF 0E 06 F1 | 	add	objptr, #223
04d70     07 9D 02 F1 | 	add	local15, objptr
04d74     4E 81 02 FB | 	rdlong	local01, local15
04d78     01 00 00 FF 
04d7c     58 81 66 F3 | 	fles	local01, ##856
04d80     AF 9A 02 FB | 	rdlong	local14, fp
04d84     02 9A 66 F0 | 	shl	local14, #2
04d88     07 9B 02 F1 | 	add	local14, objptr
04d8c     4D 81 62 FC | 	wrlong	local01, local14
04d90                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04d90     AF 9C 02 FB | 	rdlong	local15, fp
04d94     02 9C 66 F0 | 	shl	local15, #2
04d98     07 9D 02 F1 | 	add	local15, objptr
04d9c     4E 81 02 FB | 	rdlong	local01, local15
04da0     71 80 46 F3 | 	fges	local01, #113
04da4     AF 9A 02 FB | 	rdlong	local14, fp
04da8     02 9A 66 F0 | 	shl	local14, #2
04dac     07 9B 02 F1 | 	add	local14, objptr
04db0     4D 81 62 FC | 	wrlong	local01, local14
04db4                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04db4     AF 9C 02 FB | 	rdlong	local15, fp
04db8     02 9C 66 F0 | 	shl	local15, #2
04dbc     20 0E 06 F1 | 	add	objptr, #32
04dc0     07 9D 02 F1 | 	add	local15, objptr
04dc4     4E 81 02 FB | 	rdlong	local01, local15
04dc8     40 80 66 F3 | 	fles	local01, #64
04dcc     AF 9A 02 FB | 	rdlong	local14, fp
04dd0     02 9A 66 F0 | 	shl	local14, #2
04dd4     07 9B 02 F1 | 	add	local14, objptr
04dd8     4D 81 62 FC | 	wrlong	local01, local14
04ddc                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04ddc     AF 9C 02 FB | 	rdlong	local15, fp
04de0     02 9C 66 F0 | 	shl	local15, #2
04de4     07 9D 02 F1 | 	add	local15, objptr
04de8     4E 81 02 FB | 	rdlong	local01, local15
04dec     00 80 46 F3 | 	fges	local01, #0
04df0     AF 9A 02 FB | 	rdlong	local14, fp
04df4     02 9A 66 F0 | 	shl	local14, #2
04df8     07 9B 02 F1 | 	add	local14, objptr
04dfc     4D 81 62 FC | 	wrlong	local01, local14
04e00     FF 0E 86 F1 | 	sub	objptr, #255
04e04     AF F0 03 F6 | 	mov	ptra, fp
04e08     BF 00 A0 FD | 	call	#popregs_
04e0c                 | _trackerplayer_spin2_processChannel_ret
04e0c     2D 00 64 FD | 	ret
04e10                 | 
04e10                 | ' 
04e10                 | ' 
04e10                 | ' ' Handle all commands that executes on tick zero
04e10                 | ' '
04e10                 | ' PRI handleZeroTickCommands(channel)
04e10                 | _trackerplayer_spin2_handleZeroTickCommands
04e10     39 33 02 F6 | 	mov	_var01, arg01
04e14                 | ' 
04e14                 | '   CASE_FAST cmd
04e14     BA 0F 06 F1 | 	add	objptr, #442
04e18     07 35 C2 FA | 	rdbyte	_var02, objptr
04e1c     BA 0F 86 F1 | 	sub	objptr, #442
04e20     1A 37 02 F6 | 	mov	_var03, _var02
04e24     09 36 86 F1 | 	sub	_var03, #9
04e28     07 36 26 F3 | 	fle	_var03, #7
04e2c     1B 39 02 F6 | 	mov	_var04, _var03
04e30     30 38 62 FD | 	jmprel	_var04
04e34                 | LR__0168
04e34     1C 00 90 FD | 	jmp	#LR__0169
04e38     30 04 90 FD | 	jmp	#LR__0192
04e3c     64 00 90 FD | 	jmp	#LR__0171
04e40     84 00 90 FD | 	jmp	#LR__0172
04e44     A0 00 90 FD | 	jmp	#LR__0173
04e48     D0 00 90 FD | 	jmp	#LR__0174
04e4c     9C 03 90 FD | 	jmp	#LR__0189
04e50     18 04 90 FD | 	jmp	#LR__0192
04e54                 | LR__0169
04e54                 | ' 
04e54                 | '     $9:                          ' Set sample offset
04e54                 | '       if z > 0
04e54     B9 0F 06 F1 | 	add	objptr, #441
04e58     07 3B C2 FA | 	rdbyte	_var05, objptr
04e5c     B9 0F 86 F1 | 	sub	objptr, #441
04e60     00 3A 5E F2 | 	cmps	_var05, #0 wcz
04e64     1C 00 90 ED |  if_be	jmp	#LR__0170
04e68                 | '         cmd9_memoryZ[channel] := z
04e68     19 3B 02 F6 | 	mov	_var05, _var01
04e6c     DC 0F 06 F1 | 	add	objptr, #476
04e70     07 3B 02 F1 | 	add	_var05, objptr
04e74     23 0E 86 F1 | 	sub	objptr, #35
04e78     07 3D C2 FA | 	rdbyte	_var06, objptr
04e7c     B9 0F 86 F1 | 	sub	objptr, #441
04e80     1D 3D 42 FC | 	wrbyte	_var06, _var05
04e84                 | LR__0170
04e84                 | ' 
04e84                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04e84     DC 0F 06 F1 | 	add	objptr, #476
04e88     07 33 02 F1 | 	add	_var01, objptr
04e8c     19 3B C2 FA | 	rdbyte	_var05, _var01
04e90     08 3A 66 F0 | 	shl	_var05, #8
04e94     29 0E 86 F1 | 	sub	objptr, #41
04e98     07 3B 62 FC | 	wrlong	_var05, objptr
04e9c     B3 0F 86 F1 | 	sub	objptr, #435
04ea0     C8 03 90 FD | 	jmp	#LR__0192
04ea4                 | LR__0171
04ea4                 | ' 
04ea4                 | '     $B:                          ' Jump position
04ea4                 | '       cmdB_memoryZ := z
04ea4     B9 0F 06 F1 | 	add	objptr, #441
04ea8     07 3B C2 FA | 	rdbyte	_var05, objptr
04eac     2E 0E 06 F1 | 	add	objptr, #46
04eb0     07 3B 42 FC | 	wrbyte	_var05, objptr
04eb4                 | '       cmdB_updatePosition := true
04eb4     01 0E 06 F1 | 	add	objptr, #1
04eb8     FF FF FF FF 
04ebc     07 FF 4B FC | 	wrbyte	##-1, objptr
04ec0     E8 0F 86 F1 | 	sub	objptr, #488
04ec4     A4 03 90 FD | 	jmp	#LR__0192
04ec8                 | LR__0172
04ec8                 | ' 
04ec8                 | '     $C:                          ' Set volume
04ec8                 | '       currVolume[channel] := z
04ec8     02 32 66 F0 | 	shl	_var01, #2
04ecc     FF 0E 06 F1 | 	add	objptr, #255
04ed0     07 33 02 F1 | 	add	_var01, objptr
04ed4     BA 0E 06 F1 | 	add	objptr, #186
04ed8     07 3D C2 FA | 	rdbyte	_var06, objptr
04edc     B9 0F 86 F1 | 	sub	objptr, #441
04ee0     19 3D 62 FC | 	wrlong	_var06, _var01
04ee4     84 03 90 FD | 	jmp	#LR__0192
04ee8                 | LR__0173
04ee8                 | ' 
04ee8                 | '     $D:                          ' Pattern break
04ee8                 | '       cmdD_memoryX := x
04ee8     B7 0F 06 F1 | 	add	objptr, #439
04eec     07 3B C2 FA | 	rdbyte	_var05, objptr
04ef0     2D 0E 06 F1 | 	add	objptr, #45
04ef4     07 3B 42 FC | 	wrbyte	_var05, objptr
04ef8                 | '       cmdD_memoryY := y
04ef8     2C 0E 86 F1 | 	sub	objptr, #44
04efc     07 3B C2 FA | 	rdbyte	_var05, objptr
04f00     2D 0E 06 F1 | 	add	objptr, #45
04f04     07 3B 42 FC | 	wrbyte	_var05, objptr
04f08                 | '       cmdD_updatePosition := true
04f08     01 0E 06 F1 | 	add	objptr, #1
04f0c     FF FF FF FF 
04f10     07 FF 4B FC | 	wrbyte	##-1, objptr
04f14     E6 0F 86 F1 | 	sub	objptr, #486
04f18     50 03 90 FD | 	jmp	#LR__0192
04f1c                 | LR__0174
04f1c                 | ' 
04f1c                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04f1c                 | ' 
04f1c                 | '       CASE_FAST x
04f1c     B7 0F 06 F1 | 	add	objptr, #439
04f20     07 3F C2 FA | 	rdbyte	_var07, objptr
04f24     B7 0F 86 F1 | 	sub	objptr, #439
04f28     1F 3B 02 F6 | 	mov	_var05, _var07
04f2c     0F 3A 26 F3 | 	fle	_var05, #15
04f30     1D 41 02 F6 | 	mov	_var08, _var05
04f34     30 40 62 FD | 	jmprel	_var08
04f38                 | LR__0175
04f38     3C 00 90 FD | 	jmp	#LR__0176
04f3c     58 00 90 FD | 	jmp	#LR__0177
04f40     8C 00 90 FD | 	jmp	#LR__0178
04f44     C0 00 90 FD | 	jmp	#LR__0179
04f48     DC 00 90 FD | 	jmp	#LR__0180
04f4c     14 01 90 FD | 	jmp	#LR__0181
04f50     28 01 90 FD | 	jmp	#LR__0182
04f54     C0 01 90 FD | 	jmp	#LR__0185
04f58     10 03 90 FD | 	jmp	#LR__0192
04f5c     0C 03 90 FD | 	jmp	#LR__0192
04f60     F0 01 90 FD | 	jmp	#LR__0186
04f64     24 02 90 FD | 	jmp	#LR__0187
04f68     00 03 90 FD | 	jmp	#LR__0192
04f6c     FC 02 90 FD | 	jmp	#LR__0192
04f70     50 02 90 FD | 	jmp	#LR__0188
04f74     F4 02 90 FD | 	jmp	#LR__0192
04f78                 | LR__0176
04f78                 | ' 
04f78                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04f78     B8 0F 06 F1 | 	add	objptr, #440
04f7c     07 3D C2 FA | 	rdbyte	_var06, objptr
04f80     1E 3D 22 F6 | 	not	_var06, _var06
04f84     01 3C 06 F5 | 	and	_var06, #1
04f88     03 0E 06 F1 | 	add	objptr, #3
04f8c     07 3D 42 FC | 	wrbyte	_var06, objptr
04f90     BB 0F 86 F1 | 	sub	objptr, #443
04f94     D4 02 90 FD | 	jmp	#LR__0192
04f98                 | LR__0177
04f98                 | ' 
04f98                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04f98     19 43 02 F6 | 	mov	_var09, _var01
04f9c     02 42 66 F0 | 	shl	_var09, #2
04fa0     DF 0E 06 F1 | 	add	objptr, #223
04fa4     07 43 02 F1 | 	add	_var09, objptr
04fa8     21 3D 02 FB | 	rdlong	_var06, _var09
04fac     D9 0E 06 F1 | 	add	objptr, #217
04fb0     07 45 C2 FA | 	rdbyte	_var10, objptr
04fb4     22 3D 82 F1 | 	sub	_var06, _var10
04fb8     02 32 66 F0 | 	shl	_var01, #2
04fbc     D9 0E 86 F1 | 	sub	objptr, #217
04fc0     07 33 02 F1 | 	add	_var01, objptr
04fc4     19 3D 62 FC | 	wrlong	_var06, _var01
04fc8     DF 0E 86 F1 | 	sub	objptr, #223
04fcc     9C 02 90 FD | 	jmp	#LR__0192
04fd0                 | LR__0178
04fd0                 | ' 
04fd0                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04fd0     19 43 02 F6 | 	mov	_var09, _var01
04fd4     02 42 66 F0 | 	shl	_var09, #2
04fd8     DF 0E 06 F1 | 	add	objptr, #223
04fdc     07 43 02 F1 | 	add	_var09, objptr
04fe0     21 3D 02 FB | 	rdlong	_var06, _var09
04fe4     D9 0E 06 F1 | 	add	objptr, #217
04fe8     07 45 C2 FA | 	rdbyte	_var10, objptr
04fec     22 3D 02 F1 | 	add	_var06, _var10
04ff0     02 32 66 F0 | 	shl	_var01, #2
04ff4     D9 0E 86 F1 | 	sub	objptr, #217
04ff8     07 33 02 F1 | 	add	_var01, objptr
04ffc     19 3D 62 FC | 	wrlong	_var06, _var01
05000     DF 0E 86 F1 | 	sub	objptr, #223
05004     64 02 90 FD | 	jmp	#LR__0192
05008                 | LR__0179
05008                 | ' 
05008                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
05008     B8 0F 06 F1 | 	add	objptr, #440
0500c     07 3D C2 FA | 	rdbyte	_var06, objptr
05010     01 3C 06 F5 | 	and	_var06, #1
05014     04 0E 06 F1 | 	add	objptr, #4
05018     07 33 02 F1 | 	add	_var01, objptr
0501c     19 3D 42 FC | 	wrbyte	_var06, _var01
05020     BC 0F 86 F1 | 	sub	objptr, #444
05024     44 02 90 FD | 	jmp	#LR__0192
05028                 | LR__0180
05028                 | ' 
05028                 | '         $4:                                      ' Set vibrato waveform type
05028                 | '           vibratoType[channel]  := y & 3
05028     B8 0F 06 F1 | 	add	objptr, #440
0502c     07 3D C2 FA | 	rdbyte	_var06, objptr
05030     03 3C 06 F5 | 	and	_var06, #3
05034     19 47 02 F6 | 	mov	_var11, _var01
05038     08 0E 06 F1 | 	add	objptr, #8
0503c     07 47 02 F1 | 	add	_var11, objptr
05040     23 3D 42 FC | 	wrbyte	_var06, _var11
05044                 | '           resetVibrato[channel] := y & 4
05044     08 0E 86 F1 | 	sub	objptr, #8
05048     07 3D C2 FA | 	rdbyte	_var06, objptr
0504c     04 3C 06 F5 | 	and	_var06, #4
05050     25 0E 86 F1 | 	sub	objptr, #37
05054     07 33 02 F1 | 	add	_var01, objptr
05058     19 3D 42 FC | 	wrbyte	_var06, _var01
0505c     93 0F 86 F1 | 	sub	objptr, #403
05060     08 02 90 FD | 	jmp	#LR__0192
05064                 | LR__0181
05064                 | ' 
05064                 | '         $5: fineTune := y                        ' Set finetune
05064     B8 0F 06 F1 | 	add	objptr, #440
05068     07 3D C2 FA | 	rdbyte	_var06, objptr
0506c     09 0E 86 F1 | 	sub	objptr, #9
05070     07 3D 62 FC | 	wrlong	_var06, objptr
05074     AF 0F 86 F1 | 	sub	objptr, #431
05078     F0 01 90 FD | 	jmp	#LR__0192
0507c                 | LR__0182
0507c                 | ' 
0507c                 | '         $6:                                      ' Pattern looping
0507c                 | '           if y == 0
0507c     B8 0F 06 F1 | 	add	objptr, #440
05080     07 3D CA FA | 	rdbyte	_var06, objptr wz
05084     B8 0F 86 F1 | 	sub	objptr, #440
05088     1C 00 90 5D |  if_ne	jmp	#LR__0183
0508c                 | '             cmdE6_memory[channel] := patternRow
0508c     E9 0F 06 F1 | 	add	objptr, #489
05090     07 33 02 F1 | 	add	_var01, objptr
05094     47 0F 86 F1 | 	sub	objptr, #327
05098     07 47 C2 FA | 	rdbyte	_var11, objptr
0509c     A2 0E 86 F1 | 	sub	objptr, #162
050a0     19 47 42 FC | 	wrbyte	_var11, _var01
050a4                 | '           else
050a4     C4 01 90 FD | 	jmp	#LR__0192
050a8                 | LR__0183
050a8                 | '             if ++cmdE6_counter[channel] <= y
050a8     19 43 02 F6 | 	mov	_var09, _var01
050ac     ED 0F 06 F1 | 	add	objptr, #493
050b0     07 43 02 F1 | 	add	_var09, objptr
050b4     21 3D C2 FA | 	rdbyte	_var06, _var09
050b8     01 3C 06 F1 | 	add	_var06, #1
050bc     19 45 02 F6 | 	mov	_var10, _var01
050c0     07 45 02 F1 | 	add	_var10, objptr
050c4     22 3D 42 FC | 	wrbyte	_var06, _var10
050c8     22 49 C2 FA | 	rdbyte	_var12, _var10
050cc     35 0E 86 F1 | 	sub	objptr, #53
050d0     07 4B C2 FA | 	rdbyte	_var13, objptr
050d4     B8 0F 86 F1 | 	sub	objptr, #440
050d8     25 49 5A F2 | 	cmps	_var12, _var13 wcz
050dc     24 00 90 1D |  if_a	jmp	#LR__0184
050e0                 | '               cmdE6_updatePosition[channel] := true
050e0     F1 0F 06 F1 | 	add	objptr, #497
050e4     07 33 02 F1 | 	add	_var01, objptr
050e8     FF FF FF FF 
050ec     19 FF 4B FC | 	wrbyte	##-1, _var01
050f0                 | '               cmdE6_updatePositionCommon    := true
050f0     04 0E 06 F1 | 	add	objptr, #4
050f4     FF FF FF FF 
050f8     07 FF 4B FC | 	wrbyte	##-1, objptr
050fc     F5 0F 86 F1 | 	sub	objptr, #501
05100                 | '             else
05100     68 01 90 FD | 	jmp	#LR__0192
05104                 | LR__0184
05104                 | '               cmdE6_counter[channel] := 0
05104     ED 0F 06 F1 | 	add	objptr, #493
05108     07 33 02 F1 | 	add	_var01, objptr
0510c     19 01 48 FC | 	wrbyte	#0, _var01
05110     ED 0F 86 F1 | 	sub	objptr, #493
05114     54 01 90 FD | 	jmp	#LR__0192
05118                 | LR__0185
05118                 | ' 
05118                 | '         $7:                                      ' Set tremolo waveform type
05118                 | '           tremoloType[channel] := y & 3
05118     B8 0F 06 F1 | 	add	objptr, #440
0511c     07 3D C2 FA | 	rdbyte	_var06, objptr
05120     03 3C 06 F5 | 	and	_var06, #3
05124     19 47 02 F6 | 	mov	_var11, _var01
05128     0C 0E 06 F1 | 	add	objptr, #12
0512c     07 47 02 F1 | 	add	_var11, objptr
05130     23 3D 42 FC | 	wrbyte	_var06, _var11
05134                 | '           resetTremolo[channel] := y & 4
05134     0C 0E 86 F1 | 	sub	objptr, #12
05138     07 3D C2 FA | 	rdbyte	_var06, objptr
0513c     04 3C 06 F5 | 	and	_var06, #4
05140     29 0E 86 F1 | 	sub	objptr, #41
05144     07 33 02 F1 | 	add	_var01, objptr
05148     19 3D 42 FC | 	wrbyte	_var06, _var01
0514c     8F 0F 86 F1 | 	sub	objptr, #399
05150     18 01 90 FD | 	jmp	#LR__0192
05154                 | LR__0186
05154                 | ' 
05154                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05154     19 43 02 F6 | 	mov	_var09, _var01
05158     02 42 66 F0 | 	shl	_var09, #2
0515c     FF 0E 06 F1 | 	add	objptr, #255
05160     07 43 02 F1 | 	add	_var09, objptr
05164     21 3D 02 FB | 	rdlong	_var06, _var09
05168     B9 0E 06 F1 | 	add	objptr, #185
0516c     07 45 C2 FA | 	rdbyte	_var10, objptr
05170     22 3D 02 F1 | 	add	_var06, _var10
05174     02 32 66 F0 | 	shl	_var01, #2
05178     B9 0E 86 F1 | 	sub	objptr, #185
0517c     07 33 02 F1 | 	add	_var01, objptr
05180     19 3D 62 FC | 	wrlong	_var06, _var01
05184     FF 0E 86 F1 | 	sub	objptr, #255
05188     E0 00 90 FD | 	jmp	#LR__0192
0518c                 | LR__0187
0518c                 | ' 
0518c                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
0518c     19 43 02 F6 | 	mov	_var09, _var01
05190     02 42 66 F0 | 	shl	_var09, #2
05194     FF 0E 06 F1 | 	add	objptr, #255
05198     07 43 02 F1 | 	add	_var09, objptr
0519c     21 3D 02 FB | 	rdlong	_var06, _var09
051a0     B9 0E 06 F1 | 	add	objptr, #185
051a4     07 45 C2 FA | 	rdbyte	_var10, objptr
051a8     22 3D 82 F1 | 	sub	_var06, _var10
051ac     02 32 66 F0 | 	shl	_var01, #2
051b0     B9 0E 86 F1 | 	sub	objptr, #185
051b4     07 33 02 F1 | 	add	_var01, objptr
051b8     19 3D 62 FC | 	wrlong	_var06, _var01
051bc     FF 0E 86 F1 | 	sub	objptr, #255
051c0     A8 00 90 FD | 	jmp	#LR__0192
051c4                 | LR__0188
051c4                 | ' 
051c4                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
051c4     B8 0F 06 F1 | 	add	objptr, #440
051c8     07 43 C2 FA | 	rdbyte	_var09, objptr
051cc     14 0F 86 F1 | 	sub	objptr, #276
051d0     07 45 C2 FA | 	rdbyte	_var10, objptr
051d4     22 43 02 FD | 	qmul	_var09, _var10
051d8     18 3C 62 FD | 	getqx	_var06
051dc     01 0E 06 F1 | 	add	objptr, #1
051e0     07 3D 42 FC | 	wrbyte	_var06, objptr
051e4     A5 0E 86 F1 | 	sub	objptr, #165
051e8     80 00 90 FD | 	jmp	#LR__0192
051ec                 | LR__0189
051ec                 | ' 
051ec                 | '     $F:                          ' Set speed
051ec                 | '       if z < 32
051ec     B9 0F 06 F1 | 	add	objptr, #441
051f0     07 3B C2 FA | 	rdbyte	_var05, objptr
051f4     B9 0F 86 F1 | 	sub	objptr, #441
051f8     20 3A 5E F2 | 	cmps	_var05, #32 wcz
051fc     18 00 90 3D |  if_ae	jmp	#LR__0190
05200                 | '         currentSongSpeed := z
05200     B9 0F 06 F1 | 	add	objptr, #441
05204     07 3B C2 FA | 	rdbyte	_var05, objptr
05208     15 0F 86 F1 | 	sub	objptr, #277
0520c     07 3B 42 FC | 	wrbyte	_var05, objptr
05210     A4 0E 86 F1 | 	sub	objptr, #164
05214                 | '       else
05214     54 00 90 FD | 	jmp	#LR__0191
05218                 | LR__0190
05218                 | '         ticksPerMinute := z * 24
05218     B9 0F 06 F1 | 	add	objptr, #441
0521c     07 3F C2 FA | 	rdbyte	_var07, objptr
05220     1F 3B 02 F6 | 	mov	_var05, _var07
05224     01 3A 66 F0 | 	shl	_var05, #1
05228     1F 3B 02 F1 | 	add	_var05, _var07
0522c     03 3A 66 F0 | 	shl	_var05, #3
05230     12 0E 86 F1 | 	sub	objptr, #18
05234     07 3B 62 FC | 	wrlong	_var05, objptr
05238     A7 0F 86 F1 | 	sub	objptr, #423
0523c                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
0523c     07 AF 02 FB | 	rdlong	muldiva_, objptr
05240     A7 0F 06 F1 | 	add	objptr, #423
05244     07 B1 02 FB | 	rdlong	muldivb_, objptr
05248     A7 0F 86 F1 | 	sub	objptr, #423
0524c     D0 00 A0 FD | 	call	#divide_
05250     58 3D 02 F6 | 	mov	_var06, muldivb_
05254     04 3C 66 F0 | 	shl	_var06, #4
05258     58 3D 82 F1 | 	sub	_var06, muldivb_
0525c     02 3C 66 F0 | 	shl	_var06, #2
05260     AB 0F 06 F1 | 	add	objptr, #427
05264     07 3D 62 FC | 	wrlong	_var06, objptr
05268     AB 0F 86 F1 | 	sub	objptr, #427
0526c                 | LR__0191
0526c                 | LR__0192
0526c                 | _trackerplayer_spin2_handleZeroTickCommands_ret
0526c     2D 00 64 FD | 	ret
05270                 | 
05270                 | ' 
05270                 | ' 
05270                 | ' ' Handle all commands that executes on "non zero ticks"
05270                 | ' '
05270                 | ' PRI handleNonZeroTickCommands(channel)
05270                 | _trackerplayer_spin2_handleNonZeroTickCommands
05270     0A 5A 05 F6 | 	mov	COUNT_, #10
05274     B0 00 A0 FD | 	call	#pushregs_
05278     39 81 02 F6 | 	mov	local01, arg01
0527c                 | ' 
0527c                 | '   CASE_FAST cmd
0527c     BA 0F 06 F1 | 	add	objptr, #442
05280     07 83 C2 FA | 	rdbyte	local02, objptr
05284     BA 0F 86 F1 | 	sub	objptr, #442
05288     41 85 02 F6 | 	mov	local03, local02
0528c     01 84 86 F1 | 	sub	local03, #1
05290     0E 84 26 F3 | 	fle	local03, #14
05294     42 87 02 F6 | 	mov	local04, local03
05298     30 86 62 FD | 	jmprel	local04
0529c                 | LR__0193
0529c     38 00 90 FD | 	jmp	#LR__0194
052a0     A0 00 90 FD | 	jmp	#LR__0195
052a4     D4 00 90 FD | 	jmp	#LR__0196
052a8     1C 02 90 FD | 	jmp	#LR__0206
052ac     20 01 90 FD | 	jmp	#LR__0198
052b0     48 01 90 FD | 	jmp	#LR__0199
052b4     50 01 90 FD | 	jmp	#LR__0200
052b8     0C 02 90 FD | 	jmp	#LR__0206
052bc     08 02 90 FD | 	jmp	#LR__0206
052c0     B0 01 90 FD | 	jmp	#LR__0203
052c4     00 02 90 FD | 	jmp	#LR__0206
052c8     FC 01 90 FD | 	jmp	#LR__0206
052cc     F8 01 90 FD | 	jmp	#LR__0206
052d0     AC 01 90 FD | 	jmp	#LR__0204
052d4     F0 01 90 FD | 	jmp	#LR__0206
052d8                 | LR__0194
052d8                 | ' 
052d8                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
052d8     40 89 02 F6 | 	mov	local05, local01
052dc     02 88 66 F0 | 	shl	local05, #2
052e0     DF 0E 06 F1 | 	add	objptr, #223
052e4     07 89 02 F1 | 	add	local05, objptr
052e8     44 8B 02 FB | 	rdlong	local06, local05
052ec     DA 0E 06 F1 | 	add	objptr, #218
052f0     07 8D C2 FA | 	rdbyte	local07, objptr
052f4     46 8B 82 F1 | 	sub	local06, local07
052f8     40 8F 02 F6 | 	mov	local08, local01
052fc     02 8E 66 F0 | 	shl	local08, #2
05300     DA 0E 86 F1 | 	sub	objptr, #218
05304     07 8F 02 F1 | 	add	local08, objptr
05308     47 8B 62 FC | 	wrlong	local06, local08
0530c                 | ' 
0530c                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
0530c                 | '       if currPeriod[channel] < 0
0530c     40 8B 02 F6 | 	mov	local06, local01
05310     02 8A 66 F0 | 	shl	local06, #2
05314     07 8B 02 F1 | 	add	local06, objptr
05318     45 91 02 FB | 	rdlong	local09, local06
0531c     00 90 5E F2 | 	cmps	local09, #0 wcz
05320     DF 0E 86 F1 | 	sub	objptr, #223
05324     A0 01 90 3D |  if_ae	jmp	#LR__0206
05328                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05328     02 80 66 F0 | 	shl	local01, #2
0532c     DF 0E 06 F1 | 	add	objptr, #223
05330     07 81 02 F1 | 	add	local01, objptr
05334     01 00 80 FF 
05338     40 B1 6A FC | 	wrlong	##856, local01
0533c     DF 0E 86 F1 | 	sub	objptr, #223
05340     84 01 90 FD | 	jmp	#LR__0206
05344                 | LR__0195
05344                 | ' 
05344                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05344     40 89 02 F6 | 	mov	local05, local01
05348     02 88 66 F0 | 	shl	local05, #2
0534c     DF 0E 06 F1 | 	add	objptr, #223
05350     07 89 02 F1 | 	add	local05, objptr
05354     44 8B 02 FB | 	rdlong	local06, local05
05358     DA 0E 06 F1 | 	add	objptr, #218
0535c     07 8D C2 FA | 	rdbyte	local07, objptr
05360     46 8B 02 F1 | 	add	local06, local07
05364     02 80 66 F0 | 	shl	local01, #2
05368     DA 0E 86 F1 | 	sub	objptr, #218
0536c     07 81 02 F1 | 	add	local01, objptr
05370     40 8B 62 FC | 	wrlong	local06, local01
05374     DF 0E 86 F1 | 	sub	objptr, #223
05378     4C 01 90 FD | 	jmp	#LR__0206
0537c                 | LR__0196
0537c                 | ' 
0537c                 | '     $3:                                 ' Slide to note (portamento)
0537c                 | '       if z > 0
0537c     B9 0F 06 F1 | 	add	objptr, #441
05380     07 8B C2 FA | 	rdbyte	local06, objptr
05384     B9 0F 86 F1 | 	sub	objptr, #441
05388     00 8A 5E F2 | 	cmps	local06, #0 wcz
0538c     1C 00 90 ED |  if_be	jmp	#LR__0197
05390                 | '         cmd3_memoryZ[channel] := z
05390     40 8B 02 F6 | 	mov	local06, local01
05394     C8 0F 06 F1 | 	add	objptr, #456
05398     07 8B 02 F1 | 	add	local06, objptr
0539c     0F 0E 86 F1 | 	sub	objptr, #15
053a0     07 91 C2 FA | 	rdbyte	local09, objptr
053a4     B9 0F 86 F1 | 	sub	objptr, #441
053a8     45 91 42 FC | 	wrbyte	local09, local06
053ac                 | LR__0197
053ac                 | ' 
053ac                 | '       doPortamento(channel, lastSetPeriod[channel])
053ac     40 89 02 F6 | 	mov	local05, local01
053b0     02 88 66 F0 | 	shl	local05, #2
053b4     27 0F 06 F1 | 	add	objptr, #295
053b8     07 89 02 F1 | 	add	local05, objptr
053bc     44 75 02 FB | 	rdlong	arg02, local05
053c0     40 73 02 F6 | 	mov	arg01, local01
053c4     27 0F 86 F1 | 	sub	objptr, #295
053c8     74 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
053cc     F8 00 90 FD | 	jmp	#LR__0206
053d0                 | LR__0198
053d0                 | ' 
053d0                 | '     $5:                                 ' Volume slide + portamento
053d0                 | '       doVolumeSlide(channel)
053d0     40 73 02 F6 | 	mov	arg01, local01
053d4     94 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
053d8                 | '       doPortamento(channel, lastSetPeriod[channel])
053d8     40 89 02 F6 | 	mov	local05, local01
053dc     02 88 66 F0 | 	shl	local05, #2
053e0     27 0F 06 F1 | 	add	objptr, #295
053e4     07 89 02 F1 | 	add	local05, objptr
053e8     44 75 02 FB | 	rdlong	arg02, local05
053ec     40 73 02 F6 | 	mov	arg01, local01
053f0     27 0F 86 F1 | 	sub	objptr, #295
053f4     48 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
053f8     CC 00 90 FD | 	jmp	#LR__0206
053fc                 | LR__0199
053fc                 | ' 
053fc                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
053fc     40 73 02 F6 | 	mov	arg01, local01
05400     68 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05404     C0 00 90 FD | 	jmp	#LR__0206
05408                 | LR__0200
05408                 | ' 
05408                 | '     $7:                                 ' Tremolo
05408                 | '       if x > 0
05408     B7 0F 06 F1 | 	add	objptr, #439
0540c     07 8B C2 FA | 	rdbyte	local06, objptr
05410     B7 0F 86 F1 | 	sub	objptr, #439
05414     00 8A 5E F2 | 	cmps	local06, #0 wcz
05418     1C 00 90 ED |  if_be	jmp	#LR__0201
0541c                 | '         cmd7_memoryX[channel] := x
0541c     40 8B 02 F6 | 	mov	local06, local01
05420     D8 0F 06 F1 | 	add	objptr, #472
05424     07 8B 02 F1 | 	add	local06, objptr
05428     21 0E 86 F1 | 	sub	objptr, #33
0542c     07 91 C2 FA | 	rdbyte	local09, objptr
05430     B7 0F 86 F1 | 	sub	objptr, #439
05434     45 91 42 FC | 	wrbyte	local09, local06
05438                 | LR__0201
05438                 | '       if y > 0
05438     B8 0F 06 F1 | 	add	objptr, #440
0543c     07 8B C2 FA | 	rdbyte	local06, objptr
05440     B8 0F 86 F1 | 	sub	objptr, #440
05444     00 8A 5E F2 | 	cmps	local06, #0 wcz
05448     1C 00 90 ED |  if_be	jmp	#LR__0202
0544c                 | '         cmd7_memoryY[channel] := y
0544c     40 8B 02 F6 | 	mov	local06, local01
05450     D4 0F 06 F1 | 	add	objptr, #468
05454     07 8B 02 F1 | 	add	local06, objptr
05458     1C 0E 86 F1 | 	sub	objptr, #28
0545c     07 91 C2 FA | 	rdbyte	local09, objptr
05460     B8 0F 86 F1 | 	sub	objptr, #440
05464     45 91 42 FC | 	wrbyte	local09, local06
05468                 | LR__0202
05468                 | ' 
05468                 | '       doTremolo(channel)
05468     40 73 02 F6 | 	mov	arg01, local01
0546c     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05470     54 00 90 FD | 	jmp	#LR__0206
05474                 | LR__0203
05474                 | ' 
05474                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05474     40 73 02 F6 | 	mov	arg01, local01
05478     F0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0547c     48 00 90 FD | 	jmp	#LR__0206
05480                 | LR__0204
05480                 | ' 
05480                 | '     $E:                                 ' Retrig every Y ticks
05480                 | '       if (x == $9) && ((tickcounter // y) == 0)
05480     B7 0F 06 F1 | 	add	objptr, #439
05484     07 89 C2 FA | 	rdbyte	local05, objptr
05488     B7 0F 86 F1 | 	sub	objptr, #439
0548c     09 88 0E F2 | 	cmp	local05, #9 wz
05490     34 00 90 5D |  if_ne	jmp	#LR__0205
05494     A1 0E 06 F1 | 	add	objptr, #161
05498     07 8D C2 FA | 	rdbyte	local07, objptr
0549c     46 AF 02 F6 | 	mov	muldiva_, local07
054a0     17 0F 06 F1 | 	add	objptr, #279
054a4     07 93 C2 FA | 	rdbyte	local10, objptr
054a8     B8 0F 86 F1 | 	sub	objptr, #440
054ac     49 B1 02 F6 | 	mov	muldivb_, local10
054b0     D0 00 A0 FD | 	call	#divide_
054b4     57 91 0A F6 | 	mov	local09, muldiva_ wz
054b8     0C 00 90 5D |  if_ne	jmp	#LR__0205
054bc                 | '         triggerNote(channel)
054bc     40 8B 02 F6 | 	mov	local06, local01
054c0     45 73 02 F6 | 	mov	arg01, local06
054c4     EC F2 BF FD | 	call	#_trackerplayer_spin2_triggerNote
054c8                 | LR__0205
054c8                 | LR__0206
054c8     AF F0 03 F6 | 	mov	ptra, fp
054cc     BF 00 A0 FD | 	call	#popregs_
054d0                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
054d0     2D 00 64 FD | 	ret
054d4                 | 
054d4                 | ' 
054d4                 | ' 
054d4                 | ' ' Handle all commands that executes on every tick
054d4                 | ' '
054d4                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
054d4                 | _trackerplayer_spin2_handleEveryTickCommands
054d4     12 5A 05 F6 | 	mov	COUNT_, #18
054d8     B0 00 A0 FD | 	call	#pushregs_
054dc     39 81 02 F6 | 	mov	local01, arg01
054e0                 | ' 
054e0                 | '   CASE_FAST cmd
054e0     BA 0F 06 F1 | 	add	objptr, #442
054e4     07 83 C2 FA | 	rdbyte	local02, objptr
054e8     BA 0F 86 F1 | 	sub	objptr, #442
054ec     41 85 02 F6 | 	mov	local03, local02
054f0     0F 84 26 F3 | 	fle	local03, #15
054f4     42 87 02 F6 | 	mov	local04, local03
054f8     30 86 62 FD | 	jmprel	local04
054fc                 | LR__0207
054fc     3C 00 90 FD | 	jmp	#LR__0208
05500     68 03 90 FD | 	jmp	#LR__0222
05504     64 03 90 FD | 	jmp	#LR__0222
05508     60 03 90 FD | 	jmp	#LR__0222
0550c     E8 01 90 FD | 	jmp	#LR__0211
05510     58 03 90 FD | 	jmp	#LR__0222
05514     4C 02 90 FD | 	jmp	#LR__0214
05518     50 03 90 FD | 	jmp	#LR__0222
0551c     4C 03 90 FD | 	jmp	#LR__0222
05520     48 03 90 FD | 	jmp	#LR__0222
05524     44 03 90 FD | 	jmp	#LR__0222
05528     40 03 90 FD | 	jmp	#LR__0222
0552c     3C 03 90 FD | 	jmp	#LR__0222
05530     38 03 90 FD | 	jmp	#LR__0222
05534     38 02 90 FD | 	jmp	#LR__0215
05538     30 03 90 FD | 	jmp	#LR__0222
0553c                 | LR__0208
0553c                 | ' 
0553c                 | '     $0:                                 ' Arpeggio
0553c                 | '       arpCounter := tickCounter // 3
0553c     A1 0E 06 F1 | 	add	objptr, #161
05540     07 AF C2 FA | 	rdbyte	muldiva_, objptr
05544     A1 0E 86 F1 | 	sub	objptr, #161
05548     03 B0 06 F6 | 	mov	muldivb_, #3
0554c     D0 00 A0 FD | 	call	#divide_
05550     57 89 02 F6 | 	mov	local05, muldiva_
05554                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
05554     40 8B 02 F6 | 	mov	local06, local01
05558     02 8A 66 F0 | 	shl	local06, #2
0555c     DF 0E 06 F1 | 	add	objptr, #223
05560     07 8B 02 F1 | 	add	local06, objptr
05564     45 73 02 FB | 	rdlong	arg01, local06
05568     40 8D 02 F6 | 	mov	local07, local01
0556c     0C 0E 86 F1 | 	sub	objptr, #12
05570     07 8D 02 F1 | 	add	local07, objptr
05574     46 75 C2 FA | 	rdbyte	arg02, local07
05578     D3 0E 86 F1 | 	sub	objptr, #211
0557c     AC EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05580     16 8F 02 F6 | 	mov	local08, result1
05584     47 91 02 F6 | 	mov	local09, local08
05588     24 8E 5E F2 | 	cmps	local08, #36 wcz
0558c     DC 02 90 3D |  if_ae	jmp	#LR__0222
05590                 | '         if arpCounter == 1 and x > 0
05590     01 88 0E F2 | 	cmp	local05, #1 wz
05594     8C 00 90 5D |  if_ne	jmp	#LR__0209
05598     B7 0F 06 F1 | 	add	objptr, #439
0559c     07 8B C2 FA | 	rdbyte	local06, objptr
055a0     B7 0F 86 F1 | 	sub	objptr, #439
055a4     00 8A 5E F2 | 	cmps	local06, #0 wcz
055a8     78 00 90 ED |  if_be	jmp	#LR__0209
055ac                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
055ac     48 93 02 F6 | 	mov	local10, local09
055b0     B7 0F 06 F1 | 	add	objptr, #439
055b4     07 8D C2 FA | 	rdbyte	local07, objptr
055b8     46 95 02 F6 | 	mov	local11, local07
055bc     46 93 02 F1 | 	add	local10, local07
055c0     49 97 02 F6 | 	mov	local12, local10
055c4     4B 73 02 F6 | 	mov	arg01, local12
055c8                 | ' 
055c8                 | '   return word[@periodTable][noteNumber]
055c8     06 00 00 FF 
055cc     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
055d0     01 72 66 F0 | 	shl	arg01, #1
055d4     14 73 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
055d8     39 2D E2 FA | 	rdword	result1, arg01
055dc     06 00 00 FF 
055e0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
055e4     16 99 02 F6 | 	mov	local13, result1
055e8     40 9B 02 F6 | 	mov	local14, local01
055ec     02 9A 66 F0 | 	shl	local14, #2
055f0     D8 0E 86 F1 | 	sub	objptr, #216
055f4     07 9D 02 F6 | 	mov	local15, objptr
055f8     07 9B 02 F1 | 	add	local14, objptr
055fc     4C 8B 02 F6 | 	mov	local06, local13
05600     4D 9F 02 FB | 	rdlong	local16, local14
05604     4F 8B 82 F1 | 	sub	local06, local16
05608     40 A1 02 F6 | 	mov	local17, local01
0560c     02 A0 66 F0 | 	shl	local17, #2
05610     10 0E 06 F1 | 	add	objptr, #16
05614     07 A3 02 F6 | 	mov	local18, objptr
05618     07 A1 02 F1 | 	add	local17, objptr
0561c     50 8B 62 FC | 	wrlong	local06, local17
05620     EF 0E 86 F1 | 	sub	objptr, #239
05624                 | LR__0209
05624                 | '         if arpCounter == 2 and y > 0
05624     02 88 0E F2 | 	cmp	local05, #2 wz
05628     8C 00 90 5D |  if_ne	jmp	#LR__0210
0562c     B8 0F 06 F1 | 	add	objptr, #440
05630     07 8B C2 FA | 	rdbyte	local06, objptr
05634     B8 0F 86 F1 | 	sub	objptr, #440
05638     00 8A 5E F2 | 	cmps	local06, #0 wcz
0563c     78 00 90 ED |  if_be	jmp	#LR__0210
05640                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05640     48 93 02 F6 | 	mov	local10, local09
05644     B8 0F 06 F1 | 	add	objptr, #440
05648     07 8D C2 FA | 	rdbyte	local07, objptr
0564c     46 95 02 F6 | 	mov	local11, local07
05650     46 93 02 F1 | 	add	local10, local07
05654     49 97 02 F6 | 	mov	local12, local10
05658     4B 73 02 F6 | 	mov	arg01, local12
0565c                 | ' 
0565c                 | '   return word[@periodTable][noteNumber]
0565c     06 00 00 FF 
05660     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05664     01 72 66 F0 | 	shl	arg01, #1
05668     14 73 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0566c     39 2D E2 FA | 	rdword	result1, arg01
05670     06 00 00 FF 
05674     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05678     16 99 02 F6 | 	mov	local13, result1
0567c     40 9B 02 F6 | 	mov	local14, local01
05680     02 9A 66 F0 | 	shl	local14, #2
05684     D9 0E 86 F1 | 	sub	objptr, #217
05688     07 9D 02 F6 | 	mov	local15, objptr
0568c     07 9B 02 F1 | 	add	local14, objptr
05690     4C 8B 02 F6 | 	mov	local06, local13
05694     4D 9F 02 FB | 	rdlong	local16, local14
05698     4F 8B 82 F1 | 	sub	local06, local16
0569c     40 A1 02 F6 | 	mov	local17, local01
056a0     02 A0 66 F0 | 	shl	local17, #2
056a4     10 0E 06 F1 | 	add	objptr, #16
056a8     07 A3 02 F6 | 	mov	local18, objptr
056ac     07 A1 02 F1 | 	add	local17, objptr
056b0     50 8B 62 FC | 	wrlong	local06, local17
056b4     EF 0E 86 F1 | 	sub	objptr, #239
056b8                 | LR__0210
056b8                 | '         if arpCounter == 0 and (x + y) > 0
056b8     00 88 0E F2 | 	cmp	local05, #0 wz
056bc     AC 01 90 5D |  if_ne	jmp	#LR__0222
056c0     B7 0F 06 F1 | 	add	objptr, #439
056c4     07 8B C2 FA | 	rdbyte	local06, objptr
056c8     01 0E 06 F1 | 	add	objptr, #1
056cc     07 8D C2 FA | 	rdbyte	local07, objptr
056d0     B8 0F 86 F1 | 	sub	objptr, #440
056d4     46 8B 02 F1 | 	add	local06, local07
056d8     00 8A 5E F2 | 	cmps	local06, #0 wcz
056dc     8C 01 90 ED |  if_be	jmp	#LR__0222
056e0                 | '           deltaPeriod[channel] := 0
056e0     02 80 66 F0 | 	shl	local01, #2
056e4     EF 0E 06 F1 | 	add	objptr, #239
056e8     07 81 02 F1 | 	add	local01, objptr
056ec     40 01 68 FC | 	wrlong	#0, local01
056f0     EF 0E 86 F1 | 	sub	objptr, #239
056f4     74 01 90 FD | 	jmp	#LR__0222
056f8                 | LR__0211
056f8                 | ' 
056f8                 | '     $4:                                 ' Vibrato
056f8                 | '       if x > 0
056f8     B7 0F 06 F1 | 	add	objptr, #439
056fc     07 8B C2 FA | 	rdbyte	local06, objptr
05700     B7 0F 86 F1 | 	sub	objptr, #439
05704     00 8A 5E F2 | 	cmps	local06, #0 wcz
05708     1C 00 90 ED |  if_be	jmp	#LR__0212
0570c                 | '         cmd4_memoryX[channel] := x
0570c     40 8B 02 F6 | 	mov	local06, local01
05710     D0 0F 06 F1 | 	add	objptr, #464
05714     07 8B 02 F1 | 	add	local06, objptr
05718     19 0E 86 F1 | 	sub	objptr, #25
0571c     07 95 C2 FA | 	rdbyte	local11, objptr
05720     B7 0F 86 F1 | 	sub	objptr, #439
05724     45 95 42 FC | 	wrbyte	local11, local06
05728                 | LR__0212
05728                 | '       if y > 0
05728     B8 0F 06 F1 | 	add	objptr, #440
0572c     07 8B C2 FA | 	rdbyte	local06, objptr
05730     B8 0F 86 F1 | 	sub	objptr, #440
05734     00 8A 5E F2 | 	cmps	local06, #0 wcz
05738     1C 00 90 ED |  if_be	jmp	#LR__0213
0573c                 | '         cmd4_memoryY[channel] := y
0573c     40 8B 02 F6 | 	mov	local06, local01
05740     CC 0F 06 F1 | 	add	objptr, #460
05744     07 8B 02 F1 | 	add	local06, objptr
05748     14 0E 86 F1 | 	sub	objptr, #20
0574c     07 95 C2 FA | 	rdbyte	local11, objptr
05750     B8 0F 86 F1 | 	sub	objptr, #440
05754     45 95 42 FC | 	wrbyte	local11, local06
05758                 | LR__0213
05758                 | ' 
05758                 | '       doVibrato(channel)
05758     40 73 02 F6 | 	mov	arg01, local01
0575c     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05760     08 01 90 FD | 	jmp	#LR__0222
05764                 | LR__0214
05764                 | ' 
05764                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05764     40 73 02 F6 | 	mov	arg01, local01
05768     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0576c     FC 00 90 FD | 	jmp	#LR__0222
05770                 | LR__0215
05770                 | ' 
05770                 | '     $E:
05770                 | '       if x == $C                        ' Cut note after Y ticks
05770     B7 0F 06 F1 | 	add	objptr, #439
05774     07 8B C2 FA | 	rdbyte	local06, objptr
05778     B7 0F 86 F1 | 	sub	objptr, #439
0577c     0C 8A 0E F2 | 	cmp	local06, #12 wz
05780     34 00 90 5D |  if_ne	jmp	#LR__0216
05784                 | '         if tickcounter == y
05784     A1 0E 06 F1 | 	add	objptr, #161
05788     07 8B C2 FA | 	rdbyte	local06, objptr
0578c     17 0F 06 F1 | 	add	objptr, #279
05790     07 95 C2 FA | 	rdbyte	local11, objptr
05794     B8 0F 86 F1 | 	sub	objptr, #440
05798     4A 8B 0A F2 | 	cmp	local06, local11 wz
0579c     CC 00 90 5D |  if_ne	jmp	#LR__0221
057a0                 | '           currVolume[channel] := 0
057a0     02 80 66 F0 | 	shl	local01, #2
057a4     FF 0E 06 F1 | 	add	objptr, #255
057a8     07 81 02 F1 | 	add	local01, objptr
057ac     40 01 68 FC | 	wrlong	#0, local01
057b0     FF 0E 86 F1 | 	sub	objptr, #255
057b4     B4 00 90 FD | 	jmp	#LR__0221
057b8                 | LR__0216
057b8                 | ' 
057b8                 | '       elseif x == $D                    ' Delay note Y ticks
057b8     B7 0F 06 F1 | 	add	objptr, #439
057bc     07 8B C2 FA | 	rdbyte	local06, objptr
057c0     B7 0F 86 F1 | 	sub	objptr, #439
057c4     0D 8A 0E F2 | 	cmp	local06, #13 wz
057c8     A0 00 90 5D |  if_ne	jmp	#LR__0220
057cc                 | '         if tickcounter == y
057cc     A1 0E 06 F1 | 	add	objptr, #161
057d0     07 8B C2 FA | 	rdbyte	local06, objptr
057d4     17 0F 06 F1 | 	add	objptr, #279
057d8     07 95 C2 FA | 	rdbyte	local11, objptr
057dc     B8 0F 86 F1 | 	sub	objptr, #440
057e0     4A 8B 0A F2 | 	cmp	local06, local11 wz
057e4     0C 00 90 5D |  if_ne	jmp	#LR__0217
057e8                 | '           triggerNote(channel)
057e8     40 73 02 F6 | 	mov	arg01, local01
057ec     C4 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
057f0     78 00 90 FD | 	jmp	#LR__0219
057f4                 | LR__0217
057f4                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
057f4                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
057f4     B8 0F 06 F1 | 	add	objptr, #440
057f8     07 8B C2 FA | 	rdbyte	local06, objptr
057fc     14 0F 86 F1 | 	sub	objptr, #276
05800     07 95 C2 FA | 	rdbyte	local11, objptr
05804     A4 0E 86 F1 | 	sub	objptr, #164
05808     4A 8B 5A F2 | 	cmps	local06, local11 wcz
0580c     5C 00 90 CD |  if_b	jmp	#LR__0218
05810     A4 0E 06 F1 | 	add	objptr, #164
05814     07 99 C2 FA | 	rdbyte	local13, objptr
05818     4C 97 02 F6 | 	mov	local12, local13
0581c     01 96 86 F1 | 	sub	local12, #1
05820     03 0E 86 F1 | 	sub	objptr, #3
05824     07 9D C2 FA | 	rdbyte	local15, objptr
05828     A1 0E 86 F1 | 	sub	objptr, #161
0582c     4E 9B 02 F6 | 	mov	local14, local15
05830     4B 9B 0A F2 | 	cmp	local14, local12 wz
05834     34 00 90 5D |  if_ne	jmp	#LR__0218
05838                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05838     40 8B 02 F6 | 	mov	local06, local01
0583c     02 8A 66 F0 | 	shl	local06, #2
05840     27 0F 06 F1 | 	add	objptr, #295
05844     07 93 02 F6 | 	mov	local10, objptr
05848     07 8B 02 F1 | 	add	local06, objptr
0584c     40 95 02 F6 | 	mov	local11, local01
05850     02 94 66 F0 | 	shl	local11, #2
05854     48 0E 86 F1 | 	sub	objptr, #72
05858     07 8D 02 F6 | 	mov	local07, objptr
0585c     45 97 02 FB | 	rdlong	local12, local06
05860     46 95 02 F1 | 	add	local11, local07
05864     4A 97 62 FC | 	wrlong	local12, local11
05868     DF 0E 86 F1 | 	sub	objptr, #223
0586c                 | LR__0218
0586c                 | LR__0219
0586c                 | LR__0220
0586c                 | LR__0221
0586c                 | LR__0222
0586c     AF F0 03 F6 | 	mov	ptra, fp
05870     BF 00 A0 FD | 	call	#popregs_
05874                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05874     2D 00 64 FD | 	ret
05878                 | 
05878                 | ' 
05878                 | ' 
05878                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05878                 | _trackerplayer_spin2_doTremolo
05878     39 33 02 F6 | 	mov	_var01, arg01
0587c                 | ' 
0587c                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
0587c     05 00 00 FF 
05880     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05884     14 35 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05888     19 37 02 F6 | 	mov	_var03, _var01
0588c     8B 0F 06 F1 | 	add	objptr, #395
05890     07 37 02 F1 | 	add	_var03, objptr
05894     1B 39 C2 FA | 	rdbyte	_var04, _var03
05898     02 38 66 F0 | 	shl	_var04, #2
0589c     1A 39 02 F1 | 	add	_var04, _var02
058a0     1C 3B 02 FB | 	rdlong	_var05, _var04
058a4                 | '   depth    := cmd7_memoryY[channel]
058a4     19 3D 02 F6 | 	mov	_var06, _var01
058a8     49 0E 06 F1 | 	add	objptr, #73
058ac     07 3D 02 F1 | 	add	_var06, objptr
058b0     1E 3F C2 FA | 	rdbyte	_var07, _var06
058b4                 | '   speed    := cmd7_memoryX[channel]
058b4     19 3D 02 F6 | 	mov	_var06, _var01
058b8     04 0E 06 F1 | 	add	objptr, #4
058bc     07 3D 02 F1 | 	add	_var06, objptr
058c0     1E 41 C2 FA | 	rdbyte	_var08, _var06
058c4                 | ' 
058c4                 | '   CASE_FAST vibratoType[channel]
058c4     19 37 02 F6 | 	mov	_var03, _var01
058c8     18 0E 86 F1 | 	sub	objptr, #24
058cc     07 43 02 F6 | 	mov	_var09, objptr
058d0     07 37 02 F1 | 	add	_var03, objptr
058d4     1B 3D C2 FA | 	rdbyte	_var06, _var03
058d8     03 3C 26 F3 | 	fle	_var06, #3
058dc     1E 45 02 F6 | 	mov	_var10, _var06
058e0     05 00 00 FF 
058e4     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
058e8     C0 0F 86 F1 | 	sub	objptr, #448
058ec     30 44 62 FD | 	jmprel	_var10
058f0                 | LR__0223
058f0     0C 00 90 FD | 	jmp	#LR__0224
058f4     30 00 90 FD | 	jmp	#LR__0225
058f8     6C 00 90 FD | 	jmp	#LR__0226
058fc     B4 00 90 FD | 	jmp	#LR__0227
05900                 | LR__0224
05900                 | ' 
05900                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05900     1D 3F 02 FD | 	qmul	_var07, _var05
05904     18 38 62 FD | 	getqx	_var04
05908     06 38 C6 F0 | 	sar	_var04, #6
0590c     19 47 02 F6 | 	mov	_var11, _var01
05910     02 46 66 F0 | 	shl	_var11, #2
05914     0F 0F 06 F1 | 	add	objptr, #271
05918     07 47 02 F1 | 	add	_var11, objptr
0591c     23 39 62 FC | 	wrlong	_var04, _var11
05920     0F 0F 86 F1 | 	sub	objptr, #271
05924     8C 00 90 FD | 	jmp	#LR__0227
05928                 | LR__0225
05928                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05928     19 47 02 F6 | 	mov	_var11, _var01
0592c     8B 0F 06 F1 | 	add	objptr, #395
05930     07 47 02 F1 | 	add	_var11, objptr
05934     23 35 C2 FA | 	rdbyte	_var02, _var11
05938     03 34 66 F0 | 	shl	_var02, #3
0593c     1A 3F 02 FD | 	qmul	_var07, _var02
05940     18 38 62 FD | 	getqx	_var04
05944     00 39 86 F1 | 	sub	_var04, #256
05948     06 38 C6 F0 | 	sar	_var04, #6
0594c     19 49 02 F6 | 	mov	_var12, _var01
05950     02 48 66 F0 | 	shl	_var12, #2
05954     7C 0E 86 F1 | 	sub	objptr, #124
05958     07 49 02 F1 | 	add	_var12, objptr
0595c     24 39 62 FC | 	wrlong	_var04, _var12
05960     0F 0F 86 F1 | 	sub	objptr, #271
05964     4C 00 90 FD | 	jmp	#LR__0227
05968                 | LR__0226
05968                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05968     19 47 02 F6 | 	mov	_var11, _var01
0596c     8B 0F 06 F1 | 	add	objptr, #395
05970     07 4B 02 F6 | 	mov	_var13, objptr
05974     07 47 02 F1 | 	add	_var11, objptr
05978     23 35 C2 FA | 	rdbyte	_var02, _var11
0597c     20 34 06 F5 | 	and	_var02, #32
05980     04 34 66 F0 | 	shl	_var02, #4
05984     1A 3F 02 FD | 	qmul	_var07, _var02
05988     18 4C 62 FD | 	getqx	_var14
0598c     26 39 02 F6 | 	mov	_var04, _var14
05990     00 39 86 F1 | 	sub	_var04, #256
05994     06 38 C6 F0 | 	sar	_var04, #6
05998     19 49 02 F6 | 	mov	_var12, _var01
0599c     02 48 66 F0 | 	shl	_var12, #2
059a0     7C 0E 86 F1 | 	sub	objptr, #124
059a4     07 4F 02 F6 | 	mov	_var15, objptr
059a8     07 49 02 F1 | 	add	_var12, objptr
059ac     24 39 62 FC | 	wrlong	_var04, _var12
059b0     0F 0F 86 F1 | 	sub	objptr, #271
059b4                 | LR__0227
059b4                 | ' 
059b4                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
059b4     19 37 02 F6 | 	mov	_var03, _var01
059b8     8B 0F 06 F1 | 	add	objptr, #395
059bc     07 37 02 F1 | 	add	_var03, objptr
059c0     1B 3D C2 FA | 	rdbyte	_var06, _var03
059c4     20 3D 02 F1 | 	add	_var06, _var08
059c8     3F 3C 06 F5 | 	and	_var06, #63
059cc     07 33 02 F1 | 	add	_var01, objptr
059d0     19 3D 42 FC | 	wrbyte	_var06, _var01
059d4     8B 0F 86 F1 | 	sub	objptr, #395
059d8                 | _trackerplayer_spin2_doTremolo_ret
059d8     2D 00 64 FD | 	ret
059dc                 | 
059dc                 | ' 
059dc                 | ' 
059dc                 | ' PRI doVibrato(channel) | depth, sineWave, speed
059dc                 | _trackerplayer_spin2_doVibrato
059dc     39 33 02 F6 | 	mov	_var01, arg01
059e0                 | ' 
059e0                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
059e0     05 00 00 FF 
059e4     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
059e8     14 35 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
059ec     19 37 02 F6 | 	mov	_var03, _var01
059f0     87 0F 06 F1 | 	add	objptr, #391
059f4     07 37 02 F1 | 	add	_var03, objptr
059f8     1B 39 C2 FA | 	rdbyte	_var04, _var03
059fc     02 38 66 F0 | 	shl	_var04, #2
05a00     1A 39 02 F1 | 	add	_var04, _var02
05a04     1C 3B 02 FB | 	rdlong	_var05, _var04
05a08                 | '   depth    := cmd4_memoryY[channel]
05a08     19 3D 02 F6 | 	mov	_var06, _var01
05a0c     45 0E 06 F1 | 	add	objptr, #69
05a10     07 3D 02 F1 | 	add	_var06, objptr
05a14     1E 3F C2 FA | 	rdbyte	_var07, _var06
05a18                 | '   speed    := cmd4_memoryX[channel]
05a18     19 3D 02 F6 | 	mov	_var06, _var01
05a1c     04 0E 06 F1 | 	add	objptr, #4
05a20     07 3D 02 F1 | 	add	_var06, objptr
05a24     1E 41 C2 FA | 	rdbyte	_var08, _var06
05a28                 | ' 
05a28                 | '   CASE_FAST vibratoType[channel]
05a28     19 37 02 F6 | 	mov	_var03, _var01
05a2c     10 0E 86 F1 | 	sub	objptr, #16
05a30     07 43 02 F6 | 	mov	_var09, objptr
05a34     07 37 02 F1 | 	add	_var03, objptr
05a38     1B 3D C2 FA | 	rdbyte	_var06, _var03
05a3c     03 3C 26 F3 | 	fle	_var06, #3
05a40     1E 45 02 F6 | 	mov	_var10, _var06
05a44     05 00 00 FF 
05a48     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05a4c     C0 0F 86 F1 | 	sub	objptr, #448
05a50     30 44 62 FD | 	jmprel	_var10
05a54                 | LR__0228
05a54     0C 00 90 FD | 	jmp	#LR__0229
05a58     30 00 90 FD | 	jmp	#LR__0230
05a5c     6C 00 90 FD | 	jmp	#LR__0231
05a60     B4 00 90 FD | 	jmp	#LR__0232
05a64                 | LR__0229
05a64                 | ' 
05a64                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05a64     1D 3F 02 FD | 	qmul	_var07, _var05
05a68     18 38 62 FD | 	getqx	_var04
05a6c     07 38 C6 F0 | 	sar	_var04, #7
05a70     19 47 02 F6 | 	mov	_var11, _var01
05a74     02 46 66 F0 | 	shl	_var11, #2
05a78     EF 0E 06 F1 | 	add	objptr, #239
05a7c     07 47 02 F1 | 	add	_var11, objptr
05a80     23 39 62 FC | 	wrlong	_var04, _var11
05a84     EF 0E 86 F1 | 	sub	objptr, #239
05a88     8C 00 90 FD | 	jmp	#LR__0232
05a8c                 | LR__0230
05a8c                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05a8c     19 47 02 F6 | 	mov	_var11, _var01
05a90     87 0F 06 F1 | 	add	objptr, #391
05a94     07 47 02 F1 | 	add	_var11, objptr
05a98     23 35 C2 FA | 	rdbyte	_var02, _var11
05a9c     03 34 66 F0 | 	shl	_var02, #3
05aa0     1A 3F 02 FD | 	qmul	_var07, _var02
05aa4     18 38 62 FD | 	getqx	_var04
05aa8     00 39 86 F1 | 	sub	_var04, #256
05aac     07 38 C6 F0 | 	sar	_var04, #7
05ab0     19 49 02 F6 | 	mov	_var12, _var01
05ab4     02 48 66 F0 | 	shl	_var12, #2
05ab8     98 0E 86 F1 | 	sub	objptr, #152
05abc     07 49 02 F1 | 	add	_var12, objptr
05ac0     24 39 62 FC | 	wrlong	_var04, _var12
05ac4     EF 0E 86 F1 | 	sub	objptr, #239
05ac8     4C 00 90 FD | 	jmp	#LR__0232
05acc                 | LR__0231
05acc                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05acc     19 47 02 F6 | 	mov	_var11, _var01
05ad0     87 0F 06 F1 | 	add	objptr, #391
05ad4     07 4B 02 F6 | 	mov	_var13, objptr
05ad8     07 47 02 F1 | 	add	_var11, objptr
05adc     23 35 C2 FA | 	rdbyte	_var02, _var11
05ae0     20 34 06 F5 | 	and	_var02, #32
05ae4     04 34 66 F0 | 	shl	_var02, #4
05ae8     1A 3F 02 FD | 	qmul	_var07, _var02
05aec     18 4C 62 FD | 	getqx	_var14
05af0     26 39 02 F6 | 	mov	_var04, _var14
05af4     00 39 86 F1 | 	sub	_var04, #256
05af8     07 38 C6 F0 | 	sar	_var04, #7
05afc     19 49 02 F6 | 	mov	_var12, _var01
05b00     02 48 66 F0 | 	shl	_var12, #2
05b04     98 0E 86 F1 | 	sub	objptr, #152
05b08     07 4F 02 F6 | 	mov	_var15, objptr
05b0c     07 49 02 F1 | 	add	_var12, objptr
05b10     24 39 62 FC | 	wrlong	_var04, _var12
05b14     EF 0E 86 F1 | 	sub	objptr, #239
05b18                 | LR__0232
05b18                 | ' 
05b18                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05b18     19 37 02 F6 | 	mov	_var03, _var01
05b1c     87 0F 06 F1 | 	add	objptr, #391
05b20     07 37 02 F1 | 	add	_var03, objptr
05b24     1B 3D C2 FA | 	rdbyte	_var06, _var03
05b28     20 3D 02 F1 | 	add	_var06, _var08
05b2c     3F 3C 06 F5 | 	and	_var06, #63
05b30     07 33 02 F1 | 	add	_var01, objptr
05b34     19 3D 42 FC | 	wrbyte	_var06, _var01
05b38     87 0F 86 F1 | 	sub	objptr, #391
05b3c                 | _trackerplayer_spin2_doVibrato_ret
05b3c     2D 00 64 FD | 	ret
05b40                 | 
05b40                 | ' 
05b40                 | ' 
05b40                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05b40                 | _trackerplayer_spin2_doPortamento
05b40                 | ' 
05b40                 | '   if period == currPeriod[channel]
05b40     39 33 02 F6 | 	mov	_var01, arg01
05b44     02 32 66 F0 | 	shl	_var01, #2
05b48     DF 0E 06 F1 | 	add	objptr, #223
05b4c     07 35 02 F6 | 	mov	_var02, objptr
05b50     07 33 02 F1 | 	add	_var01, objptr
05b54     19 37 02 FB | 	rdlong	_var03, _var01
05b58     1B 75 0A F2 | 	cmp	arg02, _var03 wz
05b5c                 | '     return
05b5c     DF 0E 86 F1 | 	sub	objptr, #223
05b60     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05b64                 | ' 
05b64                 | '   if period > 0
05b64     00 74 5E F2 | 	cmps	arg02, #0 wcz
05b68     1C 00 90 ED |  if_be	jmp	#LR__0233
05b6c                 | '     portamentoPeriodMemory[channel] := period
05b6c     39 33 02 F6 | 	mov	_var01, arg01
05b70     02 32 66 F0 | 	shl	_var01, #2
05b74     97 0F 06 F1 | 	add	objptr, #407
05b78     07 33 02 F1 | 	add	_var01, objptr
05b7c     19 75 62 FC | 	wrlong	arg02, _var01
05b80                 | '   else
05b80     97 0F 86 F1 | 	sub	objptr, #407
05b84     18 00 90 FD | 	jmp	#LR__0234
05b88                 | LR__0233
05b88                 | '     period := portamentoPeriodMemory[channel]
05b88     39 33 02 F6 | 	mov	_var01, arg01
05b8c     02 32 66 F0 | 	shl	_var01, #2
05b90     97 0F 06 F1 | 	add	objptr, #407
05b94     07 33 02 F1 | 	add	_var01, objptr
05b98     19 75 02 FB | 	rdlong	arg02, _var01
05b9c     97 0F 86 F1 | 	sub	objptr, #407
05ba0                 | LR__0234
05ba0                 | ' 
05ba0                 | '   if period > currPeriod[channel]
05ba0     39 33 02 F6 | 	mov	_var01, arg01
05ba4     02 32 66 F0 | 	shl	_var01, #2
05ba8     DF 0E 06 F1 | 	add	objptr, #223
05bac     07 33 02 F1 | 	add	_var01, objptr
05bb0     19 37 02 FB | 	rdlong	_var03, _var01
05bb4     1B 75 5A F2 | 	cmps	arg02, _var03 wcz
05bb8     DF 0E 86 F1 | 	sub	objptr, #223
05bbc     68 00 90 ED |  if_be	jmp	#LR__0235
05bc0                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05bc0     39 35 02 F6 | 	mov	_var02, arg01
05bc4     02 34 66 F0 | 	shl	_var02, #2
05bc8     DF 0E 06 F1 | 	add	objptr, #223
05bcc     07 35 02 F1 | 	add	_var02, objptr
05bd0     39 39 02 F6 | 	mov	_var04, arg01
05bd4     E9 0E 06 F1 | 	add	objptr, #233
05bd8     1A 33 02 FB | 	rdlong	_var01, _var02
05bdc     07 39 02 F1 | 	add	_var04, objptr
05be0     1C 3B C2 FA | 	rdbyte	_var05, _var04
05be4     1D 33 02 F1 | 	add	_var01, _var05
05be8     39 3D 02 F6 | 	mov	_var06, arg01
05bec     02 3C 66 F0 | 	shl	_var06, #2
05bf0     E9 0E 86 F1 | 	sub	objptr, #233
05bf4     07 3D 02 F1 | 	add	_var06, objptr
05bf8     1E 33 62 FC | 	wrlong	_var01, _var06
05bfc                 | '     currPeriod[channel] <#= period
05bfc     39 35 02 F6 | 	mov	_var02, arg01
05c00     02 34 66 F0 | 	shl	_var02, #2
05c04     07 35 02 F1 | 	add	_var02, objptr
05c08     1A 33 02 FB | 	rdlong	_var01, _var02
05c0c     3A 33 62 F3 | 	fles	_var01, arg02
05c10     39 39 02 F6 | 	mov	_var04, arg01
05c14     02 38 66 F0 | 	shl	_var04, #2
05c18     07 39 02 F1 | 	add	_var04, objptr
05c1c     1C 33 62 FC | 	wrlong	_var01, _var04
05c20     DF 0E 86 F1 | 	sub	objptr, #223
05c24     84 00 90 FD | 	jmp	#LR__0237
05c28                 | LR__0235
05c28                 | ' 
05c28                 | '   elseif period < currPeriod[channel]
05c28     39 33 02 F6 | 	mov	_var01, arg01
05c2c     02 32 66 F0 | 	shl	_var01, #2
05c30     DF 0E 06 F1 | 	add	objptr, #223
05c34     07 33 02 F1 | 	add	_var01, objptr
05c38     19 37 02 FB | 	rdlong	_var03, _var01
05c3c     1B 75 5A F2 | 	cmps	arg02, _var03 wcz
05c40     DF 0E 86 F1 | 	sub	objptr, #223
05c44     64 00 90 3D |  if_ae	jmp	#LR__0236
05c48                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05c48     39 35 02 F6 | 	mov	_var02, arg01
05c4c     02 34 66 F0 | 	shl	_var02, #2
05c50     DF 0E 06 F1 | 	add	objptr, #223
05c54     07 35 02 F1 | 	add	_var02, objptr
05c58     39 39 02 F6 | 	mov	_var04, arg01
05c5c     E9 0E 06 F1 | 	add	objptr, #233
05c60     1A 33 02 FB | 	rdlong	_var01, _var02
05c64     07 39 02 F1 | 	add	_var04, objptr
05c68     1C 3B C2 FA | 	rdbyte	_var05, _var04
05c6c     1D 33 82 F1 | 	sub	_var01, _var05
05c70     39 3D 02 F6 | 	mov	_var06, arg01
05c74     02 3C 66 F0 | 	shl	_var06, #2
05c78     E9 0E 86 F1 | 	sub	objptr, #233
05c7c     07 3D 02 F1 | 	add	_var06, objptr
05c80     1E 33 62 FC | 	wrlong	_var01, _var06
05c84                 | '     currPeriod[channel] #>= period
05c84     39 35 02 F6 | 	mov	_var02, arg01
05c88     02 34 66 F0 | 	shl	_var02, #2
05c8c     07 35 02 F1 | 	add	_var02, objptr
05c90     1A 33 02 FB | 	rdlong	_var01, _var02
05c94     3A 33 42 F3 | 	fges	_var01, arg02
05c98     39 39 02 F6 | 	mov	_var04, arg01
05c9c     02 38 66 F0 | 	shl	_var04, #2
05ca0     07 39 02 F1 | 	add	_var04, objptr
05ca4     1C 33 62 FC | 	wrlong	_var01, _var04
05ca8     DF 0E 86 F1 | 	sub	objptr, #223
05cac                 | LR__0236
05cac                 | LR__0237
05cac                 | ' 
05cac                 | '   ' Handle glissando if activated
05cac                 | '   if portaGlissando[channel] > 0
05cac     39 33 02 F6 | 	mov	_var01, arg01
05cb0     BC 0F 06 F1 | 	add	objptr, #444
05cb4     07 33 02 F1 | 	add	_var01, objptr
05cb8     19 37 C2 FA | 	rdbyte	_var03, _var01
05cbc     00 36 5E F2 | 	cmps	_var03, #0 wcz
05cc0     BC 0F 86 F1 | 	sub	objptr, #444
05cc4     A0 00 90 ED |  if_be	jmp	#LR__0240
05cc8                 | ' 
05cc8                 | '     tempPeriod := currPeriod[channel]
05cc8     39 33 02 F6 | 	mov	_var01, arg01
05ccc     02 32 66 F0 | 	shl	_var01, #2
05cd0     DF 0E 06 F1 | 	add	objptr, #223
05cd4     07 33 02 F1 | 	add	_var01, objptr
05cd8     19 3F 02 FB | 	rdlong	_var07, _var01
05cdc                 | ' 
05cdc                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05cdc     00 40 06 F6 | 	mov	_var08, #0
05ce0     DF 0E 86 F1 | 	sub	objptr, #223
05ce4     7C A3 9F FE | 	loc	pa,	#(@LR__0239-@LR__0238)
05ce8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05cec                 | LR__0238
05cec                 | ' 
05cec                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05cec     06 00 00 FF 
05cf0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05cf4     14 43 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05cf8     39 37 02 F6 | 	mov	_var03, arg01
05cfc     D3 0E 06 F1 | 	add	objptr, #211
05d00     07 37 02 F1 | 	add	_var03, objptr
05d04     1B 3B C2 FA | 	rdbyte	_var05, _var03
05d08     1D 45 02 F6 | 	mov	_var10, _var05
05d0c     03 44 66 F0 | 	shl	_var10, #3
05d10     1D 45 02 F1 | 	add	_var10, _var05
05d14     03 44 66 F0 | 	shl	_var10, #3
05d18     22 43 02 F1 | 	add	_var09, _var10
05d1c     20 47 02 F6 | 	mov	_var11, _var08
05d20     01 46 66 F0 | 	shl	_var11, #1
05d24     21 47 02 F1 | 	add	_var11, _var09
05d28     23 49 E2 FA | 	rdword	_var12, _var11
05d2c                 | '       if tempPeriod >= periodStep
05d2c     24 3F 5A F2 | 	cmps	_var07, _var12 wcz
05d30                 | '         i += 1000
05d30     06 00 00 FF 
05d34     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05d38     D3 0E 86 F1 | 	sub	objptr, #211
05d3c     01 00 00 3F 
05d40     E8 41 06 31 |  if_ae	add	_var08, ##1000
05d44     01 40 06 F1 | 	add	_var08, #1
05d48     24 40 5E F2 | 	cmps	_var08, #36 wcz
05d4c     9C FF 9F CD |  if_b	jmp	#LR__0238
05d50                 | LR__0239
05d50                 | ' 
05d50                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05d50     1F 49 82 F1 | 	sub	_var12, _var07
05d54     02 72 66 F0 | 	shl	arg01, #2
05d58     EF 0E 06 F1 | 	add	objptr, #239
05d5c     07 73 02 F1 | 	add	arg01, objptr
05d60     39 49 62 FC | 	wrlong	_var12, arg01
05d64     EF 0E 86 F1 | 	sub	objptr, #239
05d68                 | LR__0240
05d68                 | _trackerplayer_spin2_doPortamento_ret
05d68     2D 00 64 FD | 	ret
05d6c                 | 
05d6c                 | ' 
05d6c                 | ' 
05d6c                 | ' PRI doVolumeSlide(channel)
05d6c                 | _trackerplayer_spin2_doVolumeSlide
05d6c                 | ' 
05d6c                 | '   if x > 0
05d6c     B7 0F 06 F1 | 	add	objptr, #439
05d70     07 33 C2 FA | 	rdbyte	_var01, objptr
05d74     B7 0F 86 F1 | 	sub	objptr, #439
05d78     00 32 5E F2 | 	cmps	_var01, #0 wcz
05d7c     38 00 90 ED |  if_be	jmp	#LR__0241
05d80                 | '     currVolume[channel] += x
05d80     39 35 02 F6 | 	mov	_var02, arg01
05d84     02 34 66 F0 | 	shl	_var02, #2
05d88     FF 0E 06 F1 | 	add	objptr, #255
05d8c     07 35 02 F1 | 	add	_var02, objptr
05d90     1A 33 02 FB | 	rdlong	_var01, _var02
05d94     B8 0E 06 F1 | 	add	objptr, #184
05d98     07 37 C2 FA | 	rdbyte	_var03, objptr
05d9c     1B 33 02 F1 | 	add	_var01, _var03
05da0     39 39 02 F6 | 	mov	_var04, arg01
05da4     02 38 66 F0 | 	shl	_var04, #2
05da8     B8 0E 86 F1 | 	sub	objptr, #184
05dac     07 39 02 F1 | 	add	_var04, objptr
05db0     1C 33 62 FC | 	wrlong	_var01, _var04
05db4     FF 0E 86 F1 | 	sub	objptr, #255
05db8                 | LR__0241
05db8                 | '   if y > 0
05db8     B8 0F 06 F1 | 	add	objptr, #440
05dbc     07 33 C2 FA | 	rdbyte	_var01, objptr
05dc0     B8 0F 86 F1 | 	sub	objptr, #440
05dc4     00 32 5E F2 | 	cmps	_var01, #0 wcz
05dc8     34 00 90 ED |  if_be	jmp	#LR__0242
05dcc                 | '     currVolume[channel] -= y
05dcc     39 35 02 F6 | 	mov	_var02, arg01
05dd0     02 34 66 F0 | 	shl	_var02, #2
05dd4     FF 0E 06 F1 | 	add	objptr, #255
05dd8     07 35 02 F1 | 	add	_var02, objptr
05ddc     1A 33 02 FB | 	rdlong	_var01, _var02
05de0     B9 0E 06 F1 | 	add	objptr, #185
05de4     07 37 C2 FA | 	rdbyte	_var03, objptr
05de8     1B 33 82 F1 | 	sub	_var01, _var03
05dec     02 72 66 F0 | 	shl	arg01, #2
05df0     B9 0E 86 F1 | 	sub	objptr, #185
05df4     07 73 02 F1 | 	add	arg01, objptr
05df8     39 33 62 FC | 	wrlong	_var01, arg01
05dfc     FF 0E 86 F1 | 	sub	objptr, #255
05e00                 | LR__0242
05e00                 | _trackerplayer_spin2_doVolumeSlide_ret
05e00     2D 00 64 FD | 	ret
05e04                 | 
05e04                 | ' 
05e04                 | ' 
05e04                 | ' '--------------------------------------------------------------
05e04                 | ' '---------- Init the variables, start the cog. ----------------
05e04                 | ' '--------------------------------------------------------------
05e04                 | ' 
05e04                 | ' pub start() :cog,base | iii
05e04                 | _audio019_spin2_start
05e04     07 5A 05 F6 | 	mov	COUNT_, #7
05e08     B0 00 A0 FD | 	call	#pushregs_
05e0c                 | ' 
05e0c                 | ' base:=@channel1[0]
05e0c     07 81 02 F6 | 	mov	local01, objptr
05e10                 | ' 
05e10                 | ' repeat iii from 0 to 7
05e10     00 82 06 F6 | 	mov	local02, #0
05e14     F4 A2 9F FE | 	loc	pa,	#(@LR__0244-@LR__0243)
05e18     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e1c                 | LR__0243
05e1c                 | '   long [base+32*iii]:=0
05e1c     40 85 02 F6 | 	mov	local03, local01
05e20     41 87 02 F6 | 	mov	local04, local02
05e24     05 86 66 F0 | 	shl	local04, #5
05e28     43 85 02 F1 | 	add	local03, local04
05e2c     42 01 68 FC | 	wrlong	#0, local03
05e30                 | '   long [base+32*iii+4]:=0
05e30     40 85 02 F6 | 	mov	local03, local01
05e34     41 87 02 F6 | 	mov	local04, local02
05e38     05 86 66 F0 | 	shl	local04, #5
05e3c     43 85 02 F1 | 	add	local03, local04
05e40     04 84 06 F1 | 	add	local03, #4
05e44     42 01 68 FC | 	wrlong	#0, local03
05e48                 | '   long[base+32*iii+12]:=0
05e48     40 85 02 F6 | 	mov	local03, local01
05e4c     41 87 02 F6 | 	mov	local04, local02
05e50     05 86 66 F0 | 	shl	local04, #5
05e54     43 85 02 F1 | 	add	local03, local04
05e58     0C 84 06 F1 | 	add	local03, #12
05e5c     42 01 68 FC | 	wrlong	#0, local03
05e60                 | '   long[base+32*iii+16]:=2 
05e60     40 85 02 F6 | 	mov	local03, local01
05e64     41 87 02 F6 | 	mov	local04, local02
05e68     05 86 66 F0 | 	shl	local04, #5
05e6c     43 85 02 F1 | 	add	local03, local04
05e70     10 84 06 F1 | 	add	local03, #16
05e74     42 05 68 FC | 	wrlong	#2, local03
05e78                 | '   word[base+32*iii+20]:=0
05e78     40 85 02 F6 | 	mov	local03, local01
05e7c     41 87 02 F6 | 	mov	local04, local02
05e80     05 86 66 F0 | 	shl	local04, #5
05e84     43 85 02 F1 | 	add	local03, local04
05e88     14 84 06 F1 | 	add	local03, #20
05e8c     42 01 58 FC | 	wrword	#0, local03
05e90                 | '   word[base+32*iii+22]:=8192
05e90     40 85 02 F6 | 	mov	local03, local01
05e94     41 87 02 F6 | 	mov	local04, local02
05e98     05 86 66 F0 | 	shl	local04, #5
05e9c     43 85 02 F1 | 	add	local03, local04
05ea0     16 84 06 F1 | 	add	local03, #22
05ea4     10 00 80 FF 
05ea8     42 01 58 FC | 	wrword	##8192, local03
05eac                 | '   word[base+32*iii+24]:=100+2*iii
05eac     41 87 02 F6 | 	mov	local04, local02
05eb0     01 86 66 F0 | 	shl	local04, #1
05eb4     64 84 06 F6 | 	mov	local03, #100
05eb8     43 85 02 F1 | 	add	local03, local04
05ebc     40 89 02 F6 | 	mov	local05, local01
05ec0     41 8B 02 F6 | 	mov	local06, local02
05ec4     05 8A 66 F0 | 	shl	local06, #5
05ec8     45 89 02 F1 | 	add	local05, local06
05ecc     18 88 06 F1 | 	add	local05, #24
05ed0     44 85 52 FC | 	wrword	local03, local05
05ed4                 | '   word[base+32*iii+26]:=2
05ed4     40 85 02 F6 | 	mov	local03, local01
05ed8     41 87 02 F6 | 	mov	local04, local02
05edc     05 86 66 F0 | 	shl	local04, #5
05ee0     43 85 02 F1 | 	add	local03, local04
05ee4     1A 84 06 F1 | 	add	local03, #26
05ee8     42 05 58 FC | 	wrword	#2, local03
05eec                 | '   long [base+32*iii+8]:=@null | $C0000000
05eec     01 00 00 FF 
05ef0     F8 16 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
05ef4     0B 85 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
05ef8     3E 84 26 F4 | 	bith	local03, #62
05efc     40 89 02 F6 | 	mov	local05, local01
05f00     41 8B 02 F6 | 	mov	local06, local02
05f04     05 8A 66 F0 | 	shl	local06, #5
05f08     45 89 02 F1 | 	add	local05, local06
05f0c     08 88 06 F1 | 	add	local05, #8
05f10     44 85 62 FC | 	wrlong	local03, local05
05f14     01 82 06 F1 | 	add	local02, #1
05f18     08 82 5E F2 | 	cmps	local02, #8 wcz
05f1c     01 00 00 FF 
05f20     F8 16 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
05f24     F4 FE 9F CD |  if_b	jmp	#LR__0243
05f28                 | LR__0244
05f28                 | '   
05f28                 | ' cog:=coginit(16,@audio,@channel1)
05f28     0B 75 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
05f2c     07 77 02 F6 | 	mov	arg03, objptr
05f30     10 72 06 F6 | 	mov	arg01, #16
05f34     28 76 62 FD | 	setq	arg03
05f38     3A 73 F2 FC | 	coginit	arg01, arg02 wc
05f3c     01 72 66 C6 |  if_b	neg	arg01, #1
05f40     39 2D 02 F6 | 	mov	result1, arg01
05f44     16 8D 02 F6 | 	mov	local07, result1
05f48                 | ' waitms(100)
05f48     64 72 06 F6 | 	mov	arg01, #100
05f4c     C8 04 B0 FD | 	call	#__system___waitms
05f50                 | ' return cog,base
05f50     40 2F 02 F6 | 	mov	result2, local01
05f54     46 2D 02 F6 | 	mov	result1, local07
05f58     AF F0 03 F6 | 	mov	ptra, fp
05f5c     BF 00 A0 FD | 	call	#popregs_
05f60                 | _audio019_spin2_start_ret
05f60     2D 00 64 FD | 	ret
05f64                 | hubexit
05f64     81 00 80 FD | 	jmp	#cogexit
05f68                 | 
05f68                 | __system___setbaud
05f68     14 AE 06 FB | 	rdlong	muldiva_, #20
05f6c     39 B1 02 F6 | 	mov	muldivb_, arg01
05f70     D0 00 A0 FD | 	call	#divide_
05f74     40 7C 64 FD | 	dirl	#62
05f78     40 7E 64 FD | 	dirl	#63
05f7c     0A B1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
05f80     10 B0 66 F0 | 	shl	muldivb_, #16
05f84     07 74 06 F6 | 	mov	arg02, #7
05f88     58 75 02 F1 | 	add	arg02, muldivb_
05f8c     3E F8 0C FC | 	wrpin	#124, #62
05f90     3E 74 16 FC | 	wxpin	arg02, #62
05f94     3F 7C 0C FC | 	wrpin	#62, #63
05f98     14 74 06 F1 | 	add	arg02, #20
05f9c     3F 74 16 FC | 	wxpin	arg02, #63
05fa0     41 7C 64 FD | 	dirh	#62
05fa4     41 7E 64 FD | 	dirh	#63
05fa8                 | __system___setbaud_ret
05fa8     2D 00 64 FD | 	ret
05fac                 | 
05fac                 | __system___txraw
05fac     02 5A 05 F6 | 	mov	COUNT_, #2
05fb0     B0 00 A0 FD | 	call	#pushregs_
05fb4     39 81 02 F6 | 	mov	local01, arg01
05fb8     0A 83 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05fbc     0C 00 90 5D |  if_ne	jmp	#LR__0245
05fc0     42 0F 00 FF 
05fc4     80 72 06 F6 | 	mov	arg01, ##2000000
05fc8     9C FF BF FD | 	call	#__system___setbaud
05fcc                 | LR__0245
05fcc     3E 80 26 FC | 	wypin	local01, #62
05fd0     1F 02 64 FD | 	waitx	#1
05fd4     30 A0 9F FE | 	loc	pa,	#(@LR__0247-@LR__0246)
05fd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05fdc                 | LR__0246
05fdc     40 7C 74 FD | 	testp	#62 wc
05fe0     F8 FF 9F 3D |  if_nc	jmp	#LR__0246
05fe4                 | LR__0247
05fe4     01 2C 06 F6 | 	mov	result1, #1
05fe8     AF F0 03 F6 | 	mov	ptra, fp
05fec     BF 00 A0 FD | 	call	#popregs_
05ff0                 | __system___txraw_ret
05ff0     2D 00 64 FD | 	ret
05ff4                 | 
05ff4                 | __system___rxraw
05ff4     0B 5A 05 F6 | 	mov	COUNT_, #11
05ff8     B0 00 A0 FD | 	call	#pushregs_
05ffc     39 81 02 F6 | 	mov	local01, arg01
06000     0A 83 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06004     0C 00 90 5D |  if_ne	jmp	#LR__0248
06008     42 0F 00 FF 
0600c     80 72 06 F6 | 	mov	arg01, ##2000000
06010     54 FF BF FD | 	call	#__system___setbaud
06014                 | LR__0248
06014     00 80 0E F2 | 	cmp	local01, #0 wz
06018     18 00 90 AD |  if_e	jmp	#LR__0249
0601c     1A 84 62 FD | 	getct	local03
06020     14 86 06 FB | 	rdlong	local04, #20
06024     0A 86 46 F0 | 	shr	local04, #10
06028     43 81 02 FD | 	qmul	local01, local04
0602c     18 88 62 FD | 	getqx	local05
06030     44 85 02 F1 | 	add	local03, local05
06034                 | LR__0249
06034     01 8A 66 F6 | 	neg	local06, #1
06038     00 8C 06 F6 | 	mov	local07, #0
0603c     04 14 06 F1 | 	add	ptr___system__dat__, #4
06040     0A 8F 02 FB | 	rdlong	local08, ptr___system__dat__
06044     04 14 86 F1 | 	sub	ptr___system__dat__, #4
06048                 | LR__0250
06048     08 8E 16 F4 | 	testb	local08, #8 wc
0604c     09 8E 76 F4 | 	testbn	local08, #9 andc
06050     0A 8E 46 F0 | 	shr	local08, #10
06054     01 8C 06 C6 |  if_b	mov	local07, #1
06058     10 00 90 CD |  if_b	jmp	#LR__0251
0605c     40 7E 6C FD | 	testp	#63 wz
06060     01 8C 06 A6 |  if_e	mov	local07, #1
06064     3F 8E 8E AA |  if_e	rdpin	local08, #63
06068     04 8E 46 A0 |  if_e	shr	local08, #4
0606c                 | LR__0251
0606c     00 82 06 F6 | 	mov	local02, #0
06070     00 8C 0E F2 | 	cmp	local07, #0 wz
06074     01 82 66 56 |  if_ne	neg	local02, #1
06078     00 90 06 F6 | 	mov	local09, #0
0607c     00 86 06 F6 | 	mov	local04, #0
06080     00 80 0E F2 | 	cmp	local01, #0 wz
06084     01 86 66 56 |  if_ne	neg	local04, #1
06088     00 88 06 F6 | 	mov	local05, #0
0608c     00 92 06 F6 | 	mov	local10, #0
06090     1A 94 62 FD | 	getct	local11
06094     42 95 82 F1 | 	sub	local11, local03
06098     00 94 5E F2 | 	cmps	local11, #0 wcz
0609c     01 92 66 C6 |  if_b	neg	local10, #1
060a0     00 92 0E F2 | 	cmp	local10, #0 wz
060a4     01 88 66 56 |  if_ne	neg	local05, #1
060a8     44 87 CA F7 | 	test	local04, local05 wz
060ac     01 90 66 56 |  if_ne	neg	local09, #1
060b0     48 83 4A F5 | 	or	local02, local09 wz
060b4     90 FF 9F AD |  if_e	jmp	#LR__0250
060b8     00 8C 0E F2 | 	cmp	local07, #0 wz
060bc     47 8B 02 56 |  if_ne	mov	local06, local08
060c0     FF 8A 06 55 |  if_ne	and	local06, #255
060c4     04 14 06 F1 | 	add	ptr___system__dat__, #4
060c8     0A 8F 62 FC | 	wrlong	local08, ptr___system__dat__
060cc     04 14 86 F1 | 	sub	ptr___system__dat__, #4
060d0     45 2D 02 F6 | 	mov	result1, local06
060d4     AF F0 03 F6 | 	mov	ptra, fp
060d8     BF 00 A0 FD | 	call	#popregs_
060dc                 | __system___rxraw_ret
060dc     2D 00 64 FD | 	ret
060e0                 | 
060e0                 | __system____builtin_memmove
060e0     39 33 02 F6 | 	mov	_var01, arg01
060e4     3A 73 5A F2 | 	cmps	arg01, arg02 wcz
060e8     50 00 90 3D |  if_ae	jmp	#LR__0259
060ec     30 9F 9F FE | 	loc	pa,	#(@LR__0253-@LR__0252)
060f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
060f4                 | LR__0252
060f4     03 76 5E F2 | 	cmps	arg03, #3 wcz
060f8     18 00 90 ED |  if_be	jmp	#LR__0254
060fc     3A 35 02 FB | 	rdlong	_var02, arg02
06100     39 35 62 FC | 	wrlong	_var02, arg01
06104     04 72 06 F1 | 	add	arg01, #4
06108     04 74 06 F1 | 	add	arg02, #4
0610c     04 76 86 F1 | 	sub	arg03, #4
06110     E0 FF 9F FD | 	jmp	#LR__0252
06114                 | LR__0253
06114                 | LR__0254
06114     3B 37 0A F6 | 	mov	_var03, arg03 wz
06118     4C 00 90 AD |  if_e	jmp	#LR__0265
0611c     F4 9E 9F FE | 	loc	pa,	#(@LR__0257-@LR__0255)
06120     93 00 A0 FD | 	call	#FCACHE_LOAD_
06124                 | LR__0255
06124     1B 09 D8 FC | 	rep	@LR__0258, _var03
06128                 | LR__0256
06128     3A 35 C2 FA | 	rdbyte	_var02, arg02
0612c     39 35 42 FC | 	wrbyte	_var02, arg01
06130     01 72 06 F1 | 	add	arg01, #1
06134     01 74 06 F1 | 	add	arg02, #1
06138                 | LR__0257
06138                 | LR__0258
06138     2C 00 90 FD | 	jmp	#LR__0265
0613c                 | LR__0259
0613c     3B 73 02 F1 | 	add	arg01, arg03
06140     3B 75 02 F1 | 	add	arg02, arg03
06144     3B 39 0A F6 | 	mov	_var04, arg03 wz
06148     1C 00 90 AD |  if_e	jmp	#LR__0264
0614c     C4 9E 9F FE | 	loc	pa,	#(@LR__0262-@LR__0260)
06150     93 00 A0 FD | 	call	#FCACHE_LOAD_
06154                 | LR__0260
06154     1C 09 D8 FC | 	rep	@LR__0263, _var04
06158                 | LR__0261
06158     01 72 86 F1 | 	sub	arg01, #1
0615c     01 74 86 F1 | 	sub	arg02, #1
06160     3A 35 C2 FA | 	rdbyte	_var02, arg02
06164     39 35 42 FC | 	wrbyte	_var02, arg01
06168                 | LR__0262
06168                 | LR__0263
06168                 | LR__0264
06168                 | LR__0265
06168     19 2D 02 F6 | 	mov	result1, _var01
0616c                 | __system____builtin_memmove_ret
0616c     2D 00 64 FD | 	ret
06170                 | 
06170                 | __system__longmove
06170     39 33 02 F6 | 	mov	_var01, arg01
06174     3A 73 5A F2 | 	cmps	arg01, arg02 wcz
06178     28 00 90 3D |  if_ae	jmp	#LR__0270
0617c     3B 35 0A F6 | 	mov	_var02, arg03 wz
06180     5C 00 90 AD |  if_e	jmp	#LR__0276
06184     8C 9E 9F FE | 	loc	pa,	#(@LR__0268-@LR__0266)
06188     93 00 A0 FD | 	call	#FCACHE_LOAD_
0618c                 | LR__0266
0618c     1A 09 D8 FC | 	rep	@LR__0269, _var02
06190                 | LR__0267
06190     3A 37 02 FB | 	rdlong	_var03, arg02
06194     39 37 62 FC | 	wrlong	_var03, arg01
06198     04 72 06 F1 | 	add	arg01, #4
0619c     04 74 06 F1 | 	add	arg02, #4
061a0                 | LR__0268
061a0                 | LR__0269
061a0     3C 00 90 FD | 	jmp	#LR__0276
061a4                 | LR__0270
061a4     3B 39 02 F6 | 	mov	_var04, arg03
061a8     02 38 66 F0 | 	shl	_var04, #2
061ac     1C 73 02 F1 | 	add	arg01, _var04
061b0     3B 39 02 F6 | 	mov	_var04, arg03
061b4     02 38 66 F0 | 	shl	_var04, #2
061b8     1C 75 02 F1 | 	add	arg02, _var04
061bc     3B 3B 0A F6 | 	mov	_var05, arg03 wz
061c0     1C 00 90 AD |  if_e	jmp	#LR__0275
061c4     4C 9E 9F FE | 	loc	pa,	#(@LR__0273-@LR__0271)
061c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
061cc                 | LR__0271
061cc     1D 09 D8 FC | 	rep	@LR__0274, _var05
061d0                 | LR__0272
061d0     04 72 86 F1 | 	sub	arg01, #4
061d4     04 74 86 F1 | 	sub	arg02, #4
061d8     3A 37 02 FB | 	rdlong	_var03, arg02
061dc     39 37 62 FC | 	wrlong	_var03, arg01
061e0                 | LR__0273
061e0                 | LR__0274
061e0                 | LR__0275
061e0                 | LR__0276
061e0     19 2D 02 F6 | 	mov	result1, _var01
061e4                 | __system__longmove_ret
061e4     2D 00 64 FD | 	ret
061e8                 | 
061e8                 | __system____topofstack
061e8     00 5A 05 F6 | 	mov	COUNT_, #0
061ec     B0 00 A0 FD | 	call	#pushregs_
061f0     08 F0 07 F1 | 	add	ptra, #8
061f4     04 5E 05 F1 | 	add	fp, #4
061f8     AF 72 62 FC | 	wrlong	arg01, fp
061fc     AF 2C 02 F6 | 	mov	result1, fp
06200     04 5E 85 F1 | 	sub	fp, #4
06204     AF F0 03 F6 | 	mov	ptra, fp
06208     BF 00 A0 FD | 	call	#popregs_
0620c                 | __system____topofstack_ret
0620c     2D 00 64 FD | 	ret
06210                 | 
06210                 | __system___make_methodptr
06210     04 5A 05 F6 | 	mov	COUNT_, #4
06214     B0 00 A0 FD | 	call	#pushregs_
06218     39 81 02 F6 | 	mov	local01, arg01
0621c     3A 83 02 F6 | 	mov	local02, arg02
06220     08 72 06 F6 | 	mov	arg01, #8
06224     2C 0D B0 FD | 	call	#__system___gc_alloc_managed
06228     16 85 0A F6 | 	mov	local03, result1 wz
0622c     10 00 90 AD |  if_e	jmp	#LR__0277
06230     42 81 62 FC | 	wrlong	local01, local03
06234     42 87 02 F6 | 	mov	local04, local03
06238     04 86 06 F1 | 	add	local04, #4
0623c     43 83 62 FC | 	wrlong	local02, local04
06240                 | LR__0277
06240     42 2D 02 F6 | 	mov	result1, local03
06244     AF F0 03 F6 | 	mov	ptra, fp
06248     BF 00 A0 FD | 	call	#popregs_
0624c                 | __system___make_methodptr_ret
0624c     2D 00 64 FD | 	ret
06250                 | 
06250                 | __system___lockmem
06250     02 5A 05 F6 | 	mov	COUNT_, #2
06254     B0 00 A0 FD | 	call	#pushregs_
06258     01 2C 62 FD | 	cogid	result1
0625c     16 81 02 F6 | 	mov	local01, result1
06260     00 81 06 F1 | 	add	local01, #256
06264                 | LR__0278
06264     39 83 0A FB | 	rdlong	local02, arg01 wz
06268     39 81 62 AC |  if_e	wrlong	local01, arg01
0626c     39 83 02 AB |  if_e	rdlong	local02, arg01
06270     39 83 02 AB |  if_e	rdlong	local02, arg01
06274     40 83 0A F2 | 	cmp	local02, local01 wz
06278     E8 FF 9F 5D |  if_ne	jmp	#LR__0278
0627c     AF F0 03 F6 | 	mov	ptra, fp
06280     BF 00 A0 FD | 	call	#popregs_
06284                 | __system___lockmem_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | __system___string_concat
06288     07 5A 05 F6 | 	mov	COUNT_, #7
0628c     B0 00 A0 FD | 	call	#pushregs_
06290     39 81 02 F6 | 	mov	local01, arg01
06294     3A 83 02 F6 | 	mov	local02, arg02
06298     40 73 02 F6 | 	mov	arg01, local01
0629c     00 84 06 F6 | 	mov	local03, #0
062a0     6C 9D 9F FE | 	loc	pa,	#(@LR__0280-@LR__0279)
062a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
062a8                 | LR__0279
062a8     39 87 CA FA | 	rdbyte	local04, arg01 wz
062ac     01 84 06 51 |  if_ne	add	local03, #1
062b0     01 72 06 51 |  if_ne	add	arg01, #1
062b4     F0 FF 9F 5D |  if_ne	jmp	#LR__0279
062b8                 | LR__0280
062b8     42 89 02 F6 | 	mov	local05, local03
062bc     41 73 02 F6 | 	mov	arg01, local02
062c0     00 84 06 F6 | 	mov	local03, #0
062c4     48 9D 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
062c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
062cc                 | LR__0281
062cc     39 87 CA FA | 	rdbyte	local04, arg01 wz
062d0     01 84 06 51 |  if_ne	add	local03, #1
062d4     01 72 06 51 |  if_ne	add	arg01, #1
062d8     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
062dc                 | LR__0282
062dc     42 2D 02 F6 | 	mov	result1, local03
062e0     16 8B 02 F6 | 	mov	local06, result1
062e4     44 73 02 F6 | 	mov	arg01, local05
062e8     45 73 02 F1 | 	add	arg01, local06
062ec     01 72 06 F1 | 	add	arg01, #1
062f0     60 0C B0 FD | 	call	#__system___gc_alloc_managed
062f4     16 8D 0A F6 | 	mov	local07, result1 wz
062f8     28 00 90 AD |  if_e	jmp	#LR__0283
062fc     46 73 02 F6 | 	mov	arg01, local07
06300     40 75 02 F6 | 	mov	arg02, local01
06304     44 77 02 F6 | 	mov	arg03, local05
06308     D4 FD BF FD | 	call	#__system____builtin_memmove
0630c     46 73 02 F6 | 	mov	arg01, local07
06310     44 73 02 F1 | 	add	arg01, local05
06314     01 8A 06 F1 | 	add	local06, #1
06318     41 75 02 F6 | 	mov	arg02, local02
0631c     45 77 02 F6 | 	mov	arg03, local06
06320     BC FD BF FD | 	call	#__system____builtin_memmove
06324                 | LR__0283
06324     46 2D 02 F6 | 	mov	result1, local07
06328     AF F0 03 F6 | 	mov	ptra, fp
0632c     BF 00 A0 FD | 	call	#popregs_
06330                 | __system___string_concat_ret
06330     2D 00 64 FD | 	ret
06334                 | 
06334                 | __system___tx
06334     02 5A 05 F6 | 	mov	COUNT_, #2
06338     B0 00 A0 FD | 	call	#pushregs_
0633c     39 81 02 F6 | 	mov	local01, arg01
06340     0A 80 0E F2 | 	cmp	local01, #10 wz
06344     20 00 90 5D |  if_ne	jmp	#LR__0284
06348     08 14 06 F1 | 	add	ptr___system__dat__, #8
0634c     0A 83 02 FB | 	rdlong	local02, ptr___system__dat__
06350     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06354     02 82 CE F7 | 	test	local02, #2 wz
06358     0C 00 90 AD |  if_e	jmp	#LR__0284
0635c     0D 82 06 F6 | 	mov	local02, #13
06360     0D 72 06 F6 | 	mov	arg01, #13
06364     44 FC BF FD | 	call	#__system___txraw
06368                 | LR__0284
06368     40 73 02 F6 | 	mov	arg01, local01
0636c     3C FC BF FD | 	call	#__system___txraw
06370     AF F0 03 F6 | 	mov	ptra, fp
06374     BF 00 A0 FD | 	call	#popregs_
06378                 | __system___tx_ret
06378     2D 00 64 FD | 	ret
0637c                 | 
0637c                 | __system___rx
0637c     02 5A 05 F6 | 	mov	COUNT_, #2
06380     B0 00 A0 FD | 	call	#pushregs_
06384                 | LR__0285
06384     00 72 06 F6 | 	mov	arg01, #0
06388     68 FC BF FD | 	call	#__system___rxraw
0638c     16 81 02 F6 | 	mov	local01, result1
06390     FF FF 7F FF 
06394     FF 81 0E F2 | 	cmp	local01, ##-1 wz
06398     E8 FF 9F AD |  if_e	jmp	#LR__0285
0639c     0D 80 0E F2 | 	cmp	local01, #13 wz
063a0     14 00 90 5D |  if_ne	jmp	#LR__0286
063a4     08 14 06 F1 | 	add	ptr___system__dat__, #8
063a8     0A 83 02 FB | 	rdlong	local02, ptr___system__dat__
063ac     08 14 86 F1 | 	sub	ptr___system__dat__, #8
063b0     02 82 CE F7 | 	test	local02, #2 wz
063b4     0A 80 06 56 |  if_ne	mov	local01, #10
063b8                 | LR__0286
063b8     08 14 06 F1 | 	add	ptr___system__dat__, #8
063bc     0A 83 02 FB | 	rdlong	local02, ptr___system__dat__
063c0     08 14 86 F1 | 	sub	ptr___system__dat__, #8
063c4     01 82 CE F7 | 	test	local02, #1 wz
063c8     1C 00 90 AD |  if_e	jmp	#LR__0289
063cc     7F 80 0E F2 | 	cmp	local01, #127 wz
063d0     0C 00 90 5D |  if_ne	jmp	#LR__0287
063d4     08 72 06 F6 | 	mov	arg01, #8
063d8     58 FF BF FD | 	call	#__system___tx
063dc     08 00 90 FD | 	jmp	#LR__0288
063e0                 | LR__0287
063e0     40 73 02 F6 | 	mov	arg01, local01
063e4     4C FF BF FD | 	call	#__system___tx
063e8                 | LR__0288
063e8                 | LR__0289
063e8     40 2D 02 F6 | 	mov	result1, local01
063ec     AF F0 03 F6 | 	mov	ptra, fp
063f0     BF 00 A0 FD | 	call	#popregs_
063f4                 | __system___rx_ret
063f4     2D 00 64 FD | 	ret
063f8                 | 
063f8                 | __system___pinread
063f8     20 72 CE F7 | 	test	arg01, #32 wz
063fc     FF 33 02 56 |  if_ne	mov	_var01, inb
06400     FE 33 02 A6 |  if_e	mov	_var01, ina
06404     39 33 42 F0 | 	shr	_var01, arg01
06408     06 72 46 F0 | 	shr	arg01, #6
0640c     39 33 42 F7 | 	zerox	_var01, arg01
06410     19 2D 02 F6 | 	mov	result1, _var01
06414                 | __system___pinread_ret
06414     2D 00 64 FD | 	ret
06418                 | 
06418                 | __system___waitms
06418     03 5A 05 F6 | 	mov	COUNT_, #3
0641c     B0 00 A0 FD | 	call	#pushregs_
06420     39 81 02 F6 | 	mov	local01, arg01
06424     14 82 06 FB | 	rdlong	local02, #20
06428     EC 9B 9F FE | 	loc	pa,	#(@LR__0291-@LR__0290)
0642c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06430                 | LR__0290
06430     01 00 00 FF 
06434     E8 81 5E F2 | 	cmps	local01, ##1000 wcz
06438     1F 82 62 1D |  if_a	waitx	local02
0643c     01 00 00 1F 
06440     E8 81 86 11 |  if_a	sub	local01, ##1000
06444     E8 FF 9F 1D |  if_a	jmp	#LR__0290
06448                 | LR__0291
06448     0C 14 06 F1 | 	add	ptr___system__dat__, #12
0644c     0A 85 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06450     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06454     20 00 90 5D |  if_ne	jmp	#LR__0292
06458     41 AF 02 F6 | 	mov	muldiva_, local02
0645c     01 00 00 FF 
06460     E8 B1 06 F6 | 	mov	muldivb_, ##1000
06464     CC 00 A0 FD | 	call	#unsdivide_
06468     58 85 02 F6 | 	mov	local03, muldivb_
0646c     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06470     0A B1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06474     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06478                 | LR__0292
06478     00 80 5E F2 | 	cmps	local01, #0 wcz
0647c     42 81 02 1D |  if_a	qmul	local01, local03
06480     18 72 62 1D |  if_a	getqx	arg01
06484     1F 72 62 1D |  if_a	waitx	arg01
06488     AF F0 03 F6 | 	mov	ptra, fp
0648c     BF 00 A0 FD | 	call	#popregs_
06490                 | __system___waitms_ret
06490     2D 00 64 FD | 	ret
06494                 | 
06494                 | __system___waitus
06494     02 5A 05 F6 | 	mov	COUNT_, #2
06498     B0 00 A0 FD | 	call	#pushregs_
0649c     39 81 02 F6 | 	mov	local01, arg01
064a0     10 14 06 F1 | 	add	ptr___system__dat__, #16
064a4     0A 83 0A FB | 	rdlong	local02, ptr___system__dat__ wz
064a8     10 14 86 F1 | 	sub	ptr___system__dat__, #16
064ac     20 00 90 5D |  if_ne	jmp	#LR__0293
064b0     14 AE 06 FB | 	rdlong	muldiva_, #20
064b4     A1 07 00 FF 
064b8     40 B0 06 F6 | 	mov	muldivb_, ##1000000
064bc     CC 00 A0 FD | 	call	#unsdivide_
064c0     58 83 02 F6 | 	mov	local02, muldivb_
064c4     10 14 06 F1 | 	add	ptr___system__dat__, #16
064c8     0A B1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
064cc     10 14 86 F1 | 	sub	ptr___system__dat__, #16
064d0                 | LR__0293
064d0     41 81 02 FD | 	qmul	local01, local02
064d4     18 72 62 FD | 	getqx	arg01
064d8     1F 72 62 FD | 	waitx	arg01
064dc     AF F0 03 F6 | 	mov	ptra, fp
064e0     BF 00 A0 FD | 	call	#popregs_
064e4                 | __system___waitus_ret
064e4     2D 00 64 FD | 	ret
064e8                 | 
064e8                 | __system___basic_open
064e8     05 5A 05 F6 | 	mov	COUNT_, #5
064ec     B0 00 A0 FD | 	call	#pushregs_
064f0     3A 81 02 F6 | 	mov	local01, arg02
064f4     3B 83 02 F6 | 	mov	local02, arg03
064f8     3C 85 02 F6 | 	mov	local03, arg04
064fc     8C 12 B0 FD | 	call	#__system____getftab
06500     16 87 0A F6 | 	mov	local04, result1 wz
06504     18 00 90 5D |  if_ne	jmp	#LR__0294
06508     03 73 02 F6 | 	mov	arg01, abortchain
0650c     0C 74 06 F6 | 	mov	arg02, #12
06510     01 76 06 F6 | 	mov	arg03, #1
06514     F0 00 A0 FD | 	call	#__longjmp
06518     01 2C 66 F6 | 	neg	result1, #1
0651c     70 00 90 FD | 	jmp	#LR__0298
06520                 | LR__0294
06520     00 80 0E F2 | 	cmp	local01, #0 wz
06524     48 00 90 AD |  if_e	jmp	#LR__0296
06528     04 72 06 F6 | 	mov	arg01, #4
0652c     24 0A B0 FD | 	call	#__system___gc_alloc_managed
06530     16 89 0A F6 | 	mov	local05, result1 wz
06534     18 00 90 5D |  if_ne	jmp	#LR__0295
06538     03 73 02 F6 | 	mov	arg01, abortchain
0653c     07 74 06 F6 | 	mov	arg02, #7
06540     01 76 06 F6 | 	mov	arg03, #1
06544     F0 00 A0 FD | 	call	#__longjmp
06548     01 2C 66 F6 | 	neg	result1, #1
0654c     40 00 90 FD | 	jmp	#LR__0298
06550                 | LR__0295
06550     44 81 62 FC | 	wrlong	local01, local05
06554     08 75 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06558     44 73 02 F6 | 	mov	arg01, local05
0655c     B0 FC BF FD | 	call	#__system___make_methodptr
06560     18 86 06 F1 | 	add	local04, #24
06564     43 2D 62 FC | 	wrlong	result1, local04
06568     18 86 86 F1 | 	sub	local04, #24
0656c     0C 00 90 FD | 	jmp	#LR__0297
06570                 | LR__0296
06570     18 86 06 F1 | 	add	local04, #24
06574     43 81 62 FC | 	wrlong	local01, local04
06578     18 86 86 F1 | 	sub	local04, #24
0657c                 | LR__0297
0657c     1C 86 06 F1 | 	add	local04, #28
06580     43 83 62 FC | 	wrlong	local02, local04
06584     04 86 06 F1 | 	add	local04, #4
06588     43 85 62 FC | 	wrlong	local03, local04
0658c     00 2C 06 F6 | 	mov	result1, #0
06590                 | LR__0298
06590     AF F0 03 F6 | 	mov	ptra, fp
06594     BF 00 A0 FD | 	call	#popregs_
06598                 | __system___basic_open_ret
06598     2D 00 64 FD | 	ret
0659c                 | 
0659c                 | __system___basic_print_char
0659c     05 5A 05 F6 | 	mov	COUNT_, #5
065a0     B0 00 A0 FD | 	call	#pushregs_
065a4     3A 81 02 F6 | 	mov	local01, arg02
065a8     A8 13 B0 FD | 	call	#__system___gettxfunc
065ac     16 83 0A F6 | 	mov	local02, result1 wz
065b0     00 2C 06 A6 |  if_e	mov	result1, #0
065b4     24 00 90 AD |  if_e	jmp	#LR__0299
065b8     41 85 02 FB | 	rdlong	local03, local02
065bc     04 82 06 F1 | 	add	local02, #4
065c0     41 87 02 FB | 	rdlong	local04, local02
065c4     40 73 02 F6 | 	mov	arg01, local01
065c8     07 89 02 F6 | 	mov	local05, objptr
065cc     42 0F 02 F6 | 	mov	objptr, local03
065d0     2D 86 62 FD | 	call	local04
065d4     44 0F 02 F6 | 	mov	objptr, local05
065d8     01 2C 06 F6 | 	mov	result1, #1
065dc                 | LR__0299
065dc     AF F0 03 F6 | 	mov	ptra, fp
065e0     BF 00 A0 FD | 	call	#popregs_
065e4                 | __system___basic_print_char_ret
065e4     2D 00 64 FD | 	ret
065e8                 | 
065e8                 | __system___basic_print_string
065e8     03 5A 05 F6 | 	mov	COUNT_, #3
065ec     B0 00 A0 FD | 	call	#pushregs_
065f0     3A 81 02 F6 | 	mov	local01, arg02
065f4     3B 83 02 F6 | 	mov	local02, arg03
065f8     58 13 B0 FD | 	call	#__system___gettxfunc
065fc     16 85 0A F6 | 	mov	local03, result1 wz
06600     00 2C 06 A6 |  if_e	mov	result1, #0
06604     1C 00 90 AD |  if_e	jmp	#LR__0300
06608     00 80 0E F2 | 	cmp	local01, #0 wz
0660c     00 2C 06 A6 |  if_e	mov	result1, #0
06610     10 00 90 AD |  if_e	jmp	#LR__0300
06614     42 73 02 F6 | 	mov	arg01, local03
06618     41 75 02 F6 | 	mov	arg02, local02
0661c     40 77 02 F6 | 	mov	arg03, local01
06620     B0 00 B0 FD | 	call	#__system___fmtstr
06624                 | LR__0300
06624     AF F0 03 F6 | 	mov	ptra, fp
06628     BF 00 A0 FD | 	call	#popregs_
0662c                 | __system___basic_print_string_ret
0662c     2D 00 64 FD | 	ret
06630                 | 
06630                 | __system___basic_print_integer
06630     04 5A 05 F6 | 	mov	COUNT_, #4
06634     B0 00 A0 FD | 	call	#pushregs_
06638     3A 81 02 F6 | 	mov	local01, arg02
0663c     3B 83 02 F6 | 	mov	local02, arg03
06640     3C 85 02 F6 | 	mov	local03, arg04
06644     0C 13 B0 FD | 	call	#__system___gettxfunc
06648     16 87 0A F6 | 	mov	local04, result1 wz
0664c     00 2C 06 A6 |  if_e	mov	result1, #0
06650     14 00 90 AD |  if_e	jmp	#LR__0301
06654     43 73 02 F6 | 	mov	arg01, local04
06658     41 75 02 F6 | 	mov	arg02, local02
0665c     40 77 02 F6 | 	mov	arg03, local01
06660     42 79 02 F6 | 	mov	arg04, local03
06664     64 01 B0 FD | 	call	#__system___fmtnum
06668                 | LR__0301
06668     AF F0 03 F6 | 	mov	ptra, fp
0666c     BF 00 A0 FD | 	call	#popregs_
06670                 | __system___basic_print_integer_ret
06670     2D 00 64 FD | 	ret
06674                 | 
06674                 | __system___fmtchar
06674     00 5A 05 F6 | 	mov	COUNT_, #0
06678     B0 00 A0 FD | 	call	#pushregs_
0667c     14 F0 07 F1 | 	add	ptra, #20
06680     04 5E 05 F1 | 	add	fp, #4
06684     AF 72 62 FC | 	wrlong	arg01, fp
06688     04 5E 05 F1 | 	add	fp, #4
0668c     AF 74 62 FC | 	wrlong	arg02, fp
06690     04 5E 05 F1 | 	add	fp, #4
06694     AF 76 62 FC | 	wrlong	arg03, fp
06698     04 5E 05 F1 | 	add	fp, #4
0669c     AF 76 42 FC | 	wrbyte	arg03, fp
066a0     01 5E 05 F1 | 	add	fp, #1
066a4     AF 00 48 FC | 	wrbyte	#0, fp
066a8     0D 5E 85 F1 | 	sub	fp, #13
066ac     AF 72 02 FB | 	rdlong	arg01, fp
066b0     04 5E 05 F1 | 	add	fp, #4
066b4     AF 74 02 FB | 	rdlong	arg02, fp
066b8     08 5E 05 F1 | 	add	fp, #8
066bc     AF 76 02 F6 | 	mov	arg03, fp
066c0     10 5E 85 F1 | 	sub	fp, #16
066c4     0C 00 B0 FD | 	call	#__system___fmtstr
066c8     AF F0 03 F6 | 	mov	ptra, fp
066cc     BF 00 A0 FD | 	call	#popregs_
066d0                 | __system___fmtchar_ret
066d0     2D 00 64 FD | 	ret
066d4                 | 
066d4                 | __system___fmtstr
066d4     0E 5A 05 F6 | 	mov	COUNT_, #14
066d8     B0 00 A0 FD | 	call	#pushregs_
066dc     39 81 02 F6 | 	mov	local01, arg01
066e0     3A 83 02 F6 | 	mov	local02, arg02
066e4     3B 85 02 F6 | 	mov	local03, arg03
066e8     41 87 02 F6 | 	mov	local04, local02
066ec     FF 86 06 F5 | 	and	local04, #255
066f0     42 73 02 F6 | 	mov	arg01, local03
066f4     00 88 06 F6 | 	mov	local05, #0
066f8     14 99 9F FE | 	loc	pa,	#(@LR__0303-@LR__0302)
066fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
06700                 | LR__0302
06700     39 8B CA FA | 	rdbyte	local06, arg01 wz
06704     01 88 06 51 |  if_ne	add	local05, #1
06708     01 72 06 51 |  if_ne	add	arg01, #1
0670c     F0 FF 9F 5D |  if_ne	jmp	#LR__0302
06710                 | LR__0303
06710     44 2D 02 F6 | 	mov	result1, local05
06714     16 8D 02 F6 | 	mov	local07, result1
06718     00 86 0E F2 | 	cmp	local04, #0 wz
0671c     04 00 90 AD |  if_e	jmp	#LR__0304
06720     43 8D 7A F3 | 	fles	local07, local04 wcz
06724                 | LR__0304
06724     40 73 02 F6 | 	mov	arg01, local01
06728     41 75 02 F6 | 	mov	arg02, local02
0672c     46 77 02 F6 | 	mov	arg03, local07
06730     02 78 06 F6 | 	mov	arg04, #2
06734     CC 10 B0 FD | 	call	#__system___fmtpad
06738     16 8F 02 F6 | 	mov	local08, result1
0673c     00 8E 5E F2 | 	cmps	local08, #0 wcz
06740     47 2D 02 C6 |  if_b	mov	result1, local08
06744     78 00 90 CD |  if_b	jmp	#LR__0307
06748     00 90 06 F6 | 	mov	local09, #0
0674c                 | LR__0305
0674c     46 91 5A F2 | 	cmps	local09, local07 wcz
06750     44 00 90 3D |  if_ae	jmp	#LR__0306
06754     40 93 02 F6 | 	mov	local10, local01
06758     49 95 02 FB | 	rdlong	local11, local10
0675c     04 92 06 F1 | 	add	local10, #4
06760     49 97 02 FB | 	rdlong	local12, local10
06764     42 73 C2 FA | 	rdbyte	arg01, local03
06768     07 99 02 F6 | 	mov	local13, objptr
0676c     4A 0F 02 F6 | 	mov	objptr, local11
06770     01 84 06 F1 | 	add	local03, #1
06774     2D 96 62 FD | 	call	local12
06778     4C 0F 02 F6 | 	mov	objptr, local13
0677c     16 9B 02 F6 | 	mov	local14, result1
06780     00 9A 5E F2 | 	cmps	local14, #0 wcz
06784     4D 2D 02 C6 |  if_b	mov	result1, local14
06788     34 00 90 CD |  if_b	jmp	#LR__0307
0678c     4D 8F 02 F1 | 	add	local08, local14
06790     01 90 06 F1 | 	add	local09, #1
06794     B4 FF 9F FD | 	jmp	#LR__0305
06798                 | LR__0306
06798     40 73 02 F6 | 	mov	arg01, local01
0679c     41 75 02 F6 | 	mov	arg02, local02
067a0     46 77 02 F6 | 	mov	arg03, local07
067a4     01 78 06 F6 | 	mov	arg04, #1
067a8     58 10 B0 FD | 	call	#__system___fmtpad
067ac     16 9B 02 F6 | 	mov	local14, result1
067b0     00 9A 5E F2 | 	cmps	local14, #0 wcz
067b4     4D 2D 02 C6 |  if_b	mov	result1, local14
067b8     4D 8F 02 31 |  if_ae	add	local08, local14
067bc     47 2D 02 36 |  if_ae	mov	result1, local08
067c0                 | LR__0307
067c0     AF F0 03 F6 | 	mov	ptra, fp
067c4     BF 00 A0 FD | 	call	#popregs_
067c8                 | __system___fmtstr_ret
067c8     2D 00 64 FD | 	ret
067cc                 | 
067cc                 | __system___fmtnum
067cc     07 5A 05 F6 | 	mov	COUNT_, #7
067d0     B0 00 A0 FD | 	call	#pushregs_
067d4     70 F0 07 F1 | 	add	ptra, #112
067d8     04 5E 05 F1 | 	add	fp, #4
067dc     AF 72 62 FC | 	wrlong	arg01, fp
067e0     04 5E 05 F1 | 	add	fp, #4
067e4     AF 74 62 FC | 	wrlong	arg02, fp
067e8     04 5E 05 F1 | 	add	fp, #4
067ec     AF 76 62 FC | 	wrlong	arg03, fp
067f0     04 5E 05 F1 | 	add	fp, #4
067f4     AF 78 62 FC | 	wrlong	arg04, fp
067f8     04 5E 05 F1 | 	add	fp, #4
067fc     AF 80 02 F6 | 	mov	local01, fp
06800     44 5E 05 F1 | 	add	fp, #68
06804     AF 80 62 FC | 	wrlong	local01, fp
06808     04 5E 05 F1 | 	add	fp, #4
0680c     AF 00 68 FC | 	wrlong	#0, fp
06810     54 5E 85 F1 | 	sub	fp, #84
06814     AF 80 02 FB | 	rdlong	local01, fp
06818     10 80 46 F0 | 	shr	local01, #16
0681c     3F 80 06 F5 | 	and	local01, #63
06820     58 5E 05 F1 | 	add	fp, #88
06824     AF 80 62 FC | 	wrlong	local01, fp
06828     58 5E 85 F1 | 	sub	fp, #88
0682c     AF 80 02 FB | 	rdlong	local01, fp
06830     FF 80 06 F5 | 	and	local01, #255
06834     5C 5E 05 F1 | 	add	fp, #92
06838     AF 80 62 FC | 	wrlong	local01, fp
0683c     5C 5E 85 F1 | 	sub	fp, #92
06840     AF 80 02 FB | 	rdlong	local01, fp
06844     1A 80 46 F0 | 	shr	local01, #26
06848     03 80 06 F5 | 	and	local01, #3
0684c     60 5E 05 F1 | 	add	fp, #96
06850     AF 80 62 FC | 	wrlong	local01, fp
06854     08 5E 85 F1 | 	sub	fp, #8
06858     AF 80 02 FB | 	rdlong	local01, fp
0685c     60 5E 85 F1 | 	sub	fp, #96
06860     00 80 5E F2 | 	cmps	local01, #0 wcz
06864     14 00 90 ED |  if_be	jmp	#LR__0308
06868     60 5E 05 F1 | 	add	fp, #96
0686c     AF 80 02 FB | 	rdlong	local01, fp
06870     01 80 86 F1 | 	sub	local01, #1
06874     AF 80 62 FC | 	wrlong	local01, fp
06878     60 5E 85 F1 | 	sub	fp, #96
0687c                 | LR__0308
0687c     64 5E 05 F1 | 	add	fp, #100
06880     AF 82 02 FB | 	rdlong	local02, fp
06884     64 5E 85 F1 | 	sub	fp, #100
06888     40 82 5E F2 | 	cmps	local02, #64 wcz
0688c     14 00 90 1D |  if_a	jmp	#LR__0309
06890     64 5E 05 F1 | 	add	fp, #100
06894     AF 84 02 FB | 	rdlong	local03, fp
06898     64 5E 85 F1 | 	sub	fp, #100
0689c     42 87 0A F6 | 	mov	local04, local03 wz
068a0     0C 00 90 5D |  if_ne	jmp	#LR__0310
068a4                 | LR__0309
068a4     64 5E 05 F1 | 	add	fp, #100
068a8     AF 80 68 FC | 	wrlong	#64, fp
068ac     64 5E 85 F1 | 	sub	fp, #100
068b0                 | LR__0310
068b0     68 5E 05 F1 | 	add	fp, #104
068b4     AF 80 02 FB | 	rdlong	local01, fp
068b8     68 5E 85 F1 | 	sub	fp, #104
068bc     03 80 0E F2 | 	cmp	local01, #3 wz
068c0     10 00 90 5D |  if_ne	jmp	#LR__0311
068c4     68 5E 05 F1 | 	add	fp, #104
068c8     AF 00 68 FC | 	wrlong	#0, fp
068cc     68 5E 85 F1 | 	sub	fp, #104
068d0     30 00 90 FD | 	jmp	#LR__0313
068d4                 | LR__0311
068d4     0C 5E 05 F1 | 	add	fp, #12
068d8     AF 80 02 FB | 	rdlong	local01, fp
068dc     0C 5E 85 F1 | 	sub	fp, #12
068e0     00 80 5E F2 | 	cmps	local01, #0 wcz
068e4     1C 00 90 3D |  if_ae	jmp	#LR__0312
068e8     68 5E 05 F1 | 	add	fp, #104
068ec     AF 08 68 FC | 	wrlong	#4, fp
068f0     5C 5E 85 F1 | 	sub	fp, #92
068f4     AF 80 02 FB | 	rdlong	local01, fp
068f8     40 81 62 F6 | 	neg	local01, local01
068fc     AF 80 62 FC | 	wrlong	local01, fp
06900     0C 5E 85 F1 | 	sub	fp, #12
06904                 | LR__0312
06904                 | LR__0313
06904     68 5E 05 F1 | 	add	fp, #104
06908     AF 80 0A FB | 	rdlong	local01, fp wz
0690c     68 5E 85 F1 | 	sub	fp, #104
06910     EC 00 90 AD |  if_e	jmp	#LR__0320
06914     5C 5E 05 F1 | 	add	fp, #92
06918     AF 86 02 FB | 	rdlong	local04, fp
0691c     01 86 06 F1 | 	add	local04, #1
06920     AF 86 62 FC | 	wrlong	local04, fp
06924     04 5E 05 F1 | 	add	fp, #4
06928     AF 80 02 FB | 	rdlong	local01, fp
0692c     04 5E 05 F1 | 	add	fp, #4
06930     AF 86 02 FB | 	rdlong	local04, fp
06934     64 5E 85 F1 | 	sub	fp, #100
06938     43 81 0A F2 | 	cmp	local01, local04 wz
0693c     3C 00 90 5D |  if_ne	jmp	#LR__0315
06940     60 5E 05 F1 | 	add	fp, #96
06944     AF 86 02 FB | 	rdlong	local04, fp
06948     01 86 86 F1 | 	sub	local04, #1
0694c     AF 86 62 FC | 	wrlong	local04, fp
06950     AF 80 0A FB | 	rdlong	local01, fp wz
06954     60 5E 85 F1 | 	sub	fp, #96
06958     20 00 90 5D |  if_ne	jmp	#LR__0314
0695c     04 5E 05 F1 | 	add	fp, #4
06960     AF 72 02 FB | 	rdlong	arg01, fp
06964     04 5E 05 F1 | 	add	fp, #4
06968     AF 74 02 FB | 	rdlong	arg02, fp
0696c     08 5E 85 F1 | 	sub	fp, #8
06970     23 76 06 F6 | 	mov	arg03, #35
06974     FC FC BF FD | 	call	#__system___fmtchar
06978     70 01 90 FD | 	jmp	#LR__0325
0697c                 | LR__0314
0697c                 | LR__0315
0697c     68 5E 05 F1 | 	add	fp, #104
06980     AF 80 02 FB | 	rdlong	local01, fp
06984     68 5E 85 F1 | 	sub	fp, #104
06988     02 80 0E F2 | 	cmp	local01, #2 wz
0698c     20 00 90 5D |  if_ne	jmp	#LR__0316
06990     58 5E 05 F1 | 	add	fp, #88
06994     AF 80 02 FB | 	rdlong	local01, fp
06998     40 87 02 F6 | 	mov	local04, local01
0699c     01 86 06 F1 | 	add	local04, #1
069a0     AF 86 62 FC | 	wrlong	local04, fp
069a4     58 5E 85 F1 | 	sub	fp, #88
069a8     40 41 48 FC | 	wrbyte	#32, local01
069ac     50 00 90 FD | 	jmp	#LR__0319
069b0                 | LR__0316
069b0     68 5E 05 F1 | 	add	fp, #104
069b4     AF 80 02 FB | 	rdlong	local01, fp
069b8     68 5E 85 F1 | 	sub	fp, #104
069bc     04 80 0E F2 | 	cmp	local01, #4 wz
069c0     20 00 90 5D |  if_ne	jmp	#LR__0317
069c4     58 5E 05 F1 | 	add	fp, #88
069c8     AF 80 02 FB | 	rdlong	local01, fp
069cc     40 87 02 F6 | 	mov	local04, local01
069d0     01 86 06 F1 | 	add	local04, #1
069d4     AF 86 62 FC | 	wrlong	local04, fp
069d8     58 5E 85 F1 | 	sub	fp, #88
069dc     40 5B 48 FC | 	wrbyte	#45, local01
069e0     1C 00 90 FD | 	jmp	#LR__0318
069e4                 | LR__0317
069e4     58 5E 05 F1 | 	add	fp, #88
069e8     AF 80 02 FB | 	rdlong	local01, fp
069ec     40 87 02 F6 | 	mov	local04, local01
069f0     01 86 06 F1 | 	add	local04, #1
069f4     AF 86 62 FC | 	wrlong	local04, fp
069f8     58 5E 85 F1 | 	sub	fp, #88
069fc     40 57 48 FC | 	wrbyte	#43, local01
06a00                 | LR__0318
06a00                 | LR__0319
06a00                 | LR__0320
06a00     58 5E 05 F1 | 	add	fp, #88
06a04     AF 72 02 FB | 	rdlong	arg01, fp
06a08     4C 5E 85 F1 | 	sub	fp, #76
06a0c     AF 74 02 FB | 	rdlong	arg02, fp
06a10     04 5E 05 F1 | 	add	fp, #4
06a14     AF 76 02 FB | 	rdlong	arg03, fp
06a18     50 5E 05 F1 | 	add	fp, #80
06a1c     AF 78 02 FB | 	rdlong	arg04, fp
06a20     00 88 06 F6 | 	mov	local05, #0
06a24     58 5E 85 F1 | 	sub	fp, #88
06a28     AF 8A 02 FB | 	rdlong	local06, fp
06a2c     08 5E 85 F1 | 	sub	fp, #8
06a30     1D 8A 2E F4 | 	testbn	local06, #29 wz
06a34     01 88 06 56 |  if_ne	mov	local05, #1
06a38     44 7B 02 F6 | 	mov	arg05, local05
06a3c     88 0E B0 FD | 	call	#__system___uitoa
06a40     16 8D 02 F6 | 	mov	local07, result1
06a44     5C 5E 05 F1 | 	add	fp, #92
06a48     AF 80 02 FB | 	rdlong	local01, fp
06a4c     46 81 02 F1 | 	add	local01, local07
06a50     AF 80 62 FC | 	wrlong	local01, fp
06a54     08 5E 05 F1 | 	add	fp, #8
06a58     AF 86 02 FB | 	rdlong	local04, fp
06a5c     64 5E 85 F1 | 	sub	fp, #100
06a60     43 81 5A F2 | 	cmps	local01, local04 wcz
06a64     64 00 90 ED |  if_be	jmp	#LR__0324
06a68     D4 95 9F FE | 	loc	pa,	#(@LR__0322-@LR__0321)
06a6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06a70                 | LR__0321
06a70     64 5E 05 F1 | 	add	fp, #100
06a74     AF 80 02 FB | 	rdlong	local01, fp
06a78     40 87 02 F6 | 	mov	local04, local01
06a7c     01 86 86 F1 | 	sub	local04, #1
06a80     AF 86 62 FC | 	wrlong	local04, fp
06a84     64 5E 85 F1 | 	sub	fp, #100
06a88     00 80 5E F2 | 	cmps	local01, #0 wcz
06a8c     20 00 90 ED |  if_be	jmp	#LR__0323
06a90     58 5E 05 F1 | 	add	fp, #88
06a94     AF 80 02 FB | 	rdlong	local01, fp
06a98     40 87 02 F6 | 	mov	local04, local01
06a9c     01 86 06 F1 | 	add	local04, #1
06aa0     AF 86 62 FC | 	wrlong	local04, fp
06aa4     58 5E 85 F1 | 	sub	fp, #88
06aa8     40 47 48 FC | 	wrbyte	#35, local01
06aac     C0 FF 9F FD | 	jmp	#LR__0321
06ab0                 | LR__0322
06ab0                 | LR__0323
06ab0     58 5E 05 F1 | 	add	fp, #88
06ab4     AF 80 02 FB | 	rdlong	local01, fp
06ab8     40 87 02 F6 | 	mov	local04, local01
06abc     01 86 06 F1 | 	add	local04, #1
06ac0     AF 86 62 FC | 	wrlong	local04, fp
06ac4     58 5E 85 F1 | 	sub	fp, #88
06ac8     40 01 48 FC | 	wrbyte	#0, local01
06acc                 | LR__0324
06acc     04 5E 05 F1 | 	add	fp, #4
06ad0     AF 72 02 FB | 	rdlong	arg01, fp
06ad4     04 5E 05 F1 | 	add	fp, #4
06ad8     AF 74 02 FB | 	rdlong	arg02, fp
06adc     0C 5E 05 F1 | 	add	fp, #12
06ae0     AF 76 02 F6 | 	mov	arg03, fp
06ae4     14 5E 85 F1 | 	sub	fp, #20
06ae8     E8 FB BF FD | 	call	#__system___fmtstr
06aec                 | LR__0325
06aec     AF F0 03 F6 | 	mov	ptra, fp
06af0     BF 00 A0 FD | 	call	#popregs_
06af4                 | __system___fmtnum_ret
06af4     2D 00 64 FD | 	ret
06af8                 | 
06af8                 | __system__Number_S
06af8     09 5A 05 F6 | 	mov	COUNT_, #9
06afc     B0 00 A0 FD | 	call	#pushregs_
06b00     39 81 02 F6 | 	mov	local01, arg01
06b04     3A 83 0A F6 | 	mov	local02, arg02 wz
06b08     3B 85 02 F6 | 	mov	local03, arg03
06b0c     40 00 90 5D |  if_ne	jmp	#LR__0328
06b10     01 82 06 F6 | 	mov	local02, #1
06b14     42 87 02 F6 | 	mov	local04, local03
06b18     01 88 06 F6 | 	mov	local05, #1
06b1c                 | LR__0326
06b1c     00 8A 06 F6 | 	mov	local06, #0
06b20     40 87 1A F2 | 	cmp	local04, local01 wcz
06b24     01 8A 66 E6 |  if_be	neg	local06, #1
06b28     00 8C 06 F6 | 	mov	local07, #0
06b2c     43 89 1A F2 | 	cmp	local05, local04 wcz
06b30     01 8C 66 C6 |  if_b	neg	local07, #1
06b34     46 8B CA F7 | 	test	local06, local07 wz
06b38     14 00 90 AD |  if_e	jmp	#LR__0327
06b3c     43 89 02 F6 | 	mov	local05, local04
06b40     42 87 02 FD | 	qmul	local04, local03
06b44     18 86 62 FD | 	getqx	local04
06b48     01 82 06 F1 | 	add	local02, #1
06b4c     CC FF 9F FD | 	jmp	#LR__0326
06b50                 | LR__0327
06b50                 | LR__0328
06b50     20 82 3E F3 | 	fle	local02, #32 wcz
06b54     41 73 02 F6 | 	mov	arg01, local02
06b58     02 72 06 F1 | 	add	arg01, #2
06b5c     F4 03 B0 FD | 	call	#__system___gc_alloc_managed
06b60     16 8F 02 F6 | 	mov	local08, result1
06b64     41 8D 02 F6 | 	mov	local07, local02
06b68     47 8D 02 F1 | 	add	local07, local08
06b6c     46 01 48 FC | 	wrbyte	#0, local07
06b70     C8 94 9F FE | 	loc	pa,	#(@LR__0330-@LR__0329)
06b74     93 00 A0 FD | 	call	#FCACHE_LOAD_
06b78                 | LR__0329
06b78     00 82 1E F2 | 	cmp	local02, #0 wcz
06b7c     34 00 90 ED |  if_be	jmp	#LR__0331
06b80     01 82 86 F1 | 	sub	local02, #1
06b84     40 AF 02 F6 | 	mov	muldiva_, local01
06b88     42 B1 02 F6 | 	mov	muldivb_, local03
06b8c     CC 00 A0 FD | 	call	#unsdivide_
06b90     57 91 02 F6 | 	mov	local09, muldiva_
06b94     58 81 02 F6 | 	mov	local01, muldivb_
06b98     0A 90 1E F2 | 	cmp	local09, #10 wcz
06b9c     30 90 06 C1 |  if_b	add	local09, #48
06ba0     37 90 06 31 |  if_ae	add	local09, #55
06ba4     41 8D 02 F6 | 	mov	local07, local02
06ba8     47 8D 02 F1 | 	add	local07, local08
06bac     46 91 42 FC | 	wrbyte	local09, local07
06bb0     C4 FF 9F FD | 	jmp	#LR__0329
06bb4                 | LR__0330
06bb4                 | LR__0331
06bb4     47 2D 02 F6 | 	mov	result1, local08
06bb8     AF F0 03 F6 | 	mov	ptra, fp
06bbc     BF 00 A0 FD | 	call	#popregs_
06bc0                 | __system__Number_S_ret
06bc0     2D 00 64 FD | 	ret
06bc4                 | 
06bc4                 | __system__String_S
06bc4     05 5A 05 F6 | 	mov	COUNT_, #5
06bc8     B0 00 A0 FD | 	call	#pushregs_
06bcc     39 81 02 F6 | 	mov	local01, arg01
06bd0     3A 83 02 F6 | 	mov	local02, arg02
06bd4     41 73 02 F6 | 	mov	arg01, local02
06bd8     00 84 06 F6 | 	mov	local03, #0
06bdc     30 94 9F FE | 	loc	pa,	#(@LR__0333-@LR__0332)
06be0     93 00 A0 FD | 	call	#FCACHE_LOAD_
06be4                 | LR__0332
06be4     39 87 CA FA | 	rdbyte	local04, arg01 wz
06be8     01 84 06 51 |  if_ne	add	local03, #1
06bec     01 72 06 51 |  if_ne	add	arg01, #1
06bf0     F0 FF 9F 5D |  if_ne	jmp	#LR__0332
06bf4                 | LR__0333
06bf4     42 2D 0A F6 | 	mov	result1, local03 wz
06bf8     42 00 00 AF 
06bfc     1E 2D 06 A6 |  if_e	mov	result1, ##@LR__0450
06c00     4C 00 90 AD |  if_e	jmp	#LR__0335
06c04     00 80 5E F2 | 	cmps	local01, #0 wcz
06c08     42 00 00 EF 
06c0c     1F 2D 06 E6 |  if_be	mov	result1, ##@LR__0451
06c10     3C 00 90 ED |  if_be	jmp	#LR__0335
06c14     40 73 02 F6 | 	mov	arg01, local01
06c18     02 72 06 F1 | 	add	arg01, #2
06c1c     34 03 B0 FD | 	call	#__system___gc_alloc_managed
06c20     16 89 0A F6 | 	mov	local05, result1 wz
06c24     24 00 90 AD |  if_e	jmp	#LR__0334
06c28     41 75 C2 FA | 	rdbyte	arg02, local02
06c2c     44 73 02 F6 | 	mov	arg01, local05
06c30     40 77 02 F6 | 	mov	arg03, local01
06c34     A0 00 A0 FD | 	call	#\builtin_bytefill_
06c38     01 80 06 F1 | 	add	local01, #1
06c3c     44 81 02 F1 | 	add	local01, local05
06c40     40 01 48 FC | 	wrbyte	#0, local01
06c44     44 2D 02 F6 | 	mov	result1, local05
06c48     04 00 90 FD | 	jmp	#LR__0335
06c4c                 | LR__0334
06c4c     44 2D 02 F6 | 	mov	result1, local05
06c50                 | LR__0335
06c50     AF F0 03 F6 | 	mov	ptra, fp
06c54     BF 00 A0 FD | 	call	#popregs_
06c58                 | __system__String_S_ret
06c58     2D 00 64 FD | 	ret
06c5c                 | 
06c5c                 | __system___gc_ptrs
06c5c     04 5A 05 F6 | 	mov	COUNT_, #4
06c60     B0 00 A0 FD | 	call	#pushregs_
06c64     02 81 02 F6 | 	mov	local01, __heap_ptr
06c68     40 83 02 F6 | 	mov	local02, local01
06c6c     07 00 00 FF 
06c70     F8 83 06 F1 | 	add	local02, ##4088
06c74     40 85 0A FB | 	rdlong	local03, local01 wz
06c78     74 00 90 5D |  if_ne	jmp	#LR__0336
06c7c     41 87 02 F6 | 	mov	local04, local02
06c80     40 87 82 F1 | 	sub	local04, local01
06c84     40 03 58 FC | 	wrword	#1, local01
06c88     40 85 02 F6 | 	mov	local03, local01
06c8c     02 84 06 F1 | 	add	local03, #2
06c90     36 00 80 FF 
06c94     42 21 59 FC | 	wrword	##27792, local03
06c98     40 85 02 F6 | 	mov	local03, local01
06c9c     04 84 06 F1 | 	add	local03, #4
06ca0     42 01 58 FC | 	wrword	#0, local03
06ca4     40 85 02 F6 | 	mov	local03, local01
06ca8     06 84 06 F1 | 	add	local03, #6
06cac     42 03 58 FC | 	wrword	#1, local03
06cb0     10 80 06 F1 | 	add	local01, #16
06cb4     43 85 52 F6 | 	abs	local03, local04 wc
06cb8     04 84 46 F0 | 	shr	local03, #4
06cbc     42 85 62 C6 |  if_b	neg	local03, local03
06cc0     40 85 52 FC | 	wrword	local03, local01
06cc4     40 85 02 F6 | 	mov	local03, local01
06cc8     02 84 06 F1 | 	add	local03, #2
06ccc     36 00 80 FF 
06cd0     42 1F 59 FC | 	wrword	##27791, local03
06cd4     40 85 02 F6 | 	mov	local03, local01
06cd8     04 84 06 F1 | 	add	local03, #4
06cdc     42 01 58 FC | 	wrword	#0, local03
06ce0     40 85 02 F6 | 	mov	local03, local01
06ce4     06 84 06 F1 | 	add	local03, #6
06ce8     42 01 58 FC | 	wrword	#0, local03
06cec     10 80 86 F1 | 	sub	local01, #16
06cf0                 | LR__0336
06cf0     41 2F 02 F6 | 	mov	result2, local02
06cf4     40 2D 02 F6 | 	mov	result1, local01
06cf8     AF F0 03 F6 | 	mov	ptra, fp
06cfc     BF 00 A0 FD | 	call	#popregs_
06d00                 | __system___gc_ptrs_ret
06d00     2D 00 64 FD | 	ret
06d04                 | 
06d04                 | __system___gc_nextBlockPtr
06d04     02 5A 05 F6 | 	mov	COUNT_, #2
06d08     B0 00 A0 FD | 	call	#pushregs_
06d0c     39 81 02 F6 | 	mov	local01, arg01
06d10     40 83 EA FA | 	rdword	local02, local01 wz
06d14     10 00 90 5D |  if_ne	jmp	#LR__0337
06d18     42 00 00 FF 
06d1c     20 73 06 F6 | 	mov	arg01, ##@LR__0452
06d20     FC 01 B0 FD | 	call	#__system___gc_errmsg
06d24     0C 00 90 FD | 	jmp	#LR__0338
06d28                 | LR__0337
06d28     40 2D 02 F6 | 	mov	result1, local01
06d2c     04 82 66 F0 | 	shl	local02, #4
06d30     41 2D 02 F1 | 	add	result1, local02
06d34                 | LR__0338
06d34     AF F0 03 F6 | 	mov	ptra, fp
06d38     BF 00 A0 FD | 	call	#popregs_
06d3c                 | __system___gc_nextBlockPtr_ret
06d3c     2D 00 64 FD | 	ret
06d40                 | 
06d40                 | __system___gc_tryalloc
06d40     0E 5A 05 F6 | 	mov	COUNT_, #14
06d44     B0 00 A0 FD | 	call	#pushregs_
06d48     39 81 02 F6 | 	mov	local01, arg01
06d4c     3A 83 02 F6 | 	mov	local02, arg02
06d50     08 FF BF FD | 	call	#__system___gc_ptrs
06d54     16 85 02 F6 | 	mov	local03, result1
06d58     17 87 02 F6 | 	mov	local04, result2
06d5c     42 89 02 F6 | 	mov	local05, local03
06d60     00 8A 06 F6 | 	mov	local06, #0
06d64     EC 92 9F FE | 	loc	pa,	#(@LR__0340-@LR__0339)
06d68     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d6c                 | LR__0339
06d6c     44 8D 02 F6 | 	mov	local07, local05
06d70     42 8F 02 F6 | 	mov	local08, local03
06d74     44 91 02 F6 | 	mov	local09, local05
06d78     06 90 06 F1 | 	add	local09, #6
06d7c     48 93 E2 FA | 	rdword	local10, local09
06d80     47 73 02 F6 | 	mov	arg01, local08
06d84     49 75 0A F6 | 	mov	arg02, local10 wz
06d88     00 2C 06 A6 |  if_e	mov	result1, #0
06d8c     04 74 66 50 |  if_ne	shl	arg02, #4
06d90     3A 73 02 51 |  if_ne	add	arg01, arg02
06d94     39 2D 02 56 |  if_ne	mov	result1, arg01
06d98     16 95 02 F6 | 	mov	local11, result1
06d9c     4A 89 0A F6 | 	mov	local05, local11 wz
06da0     44 8F 02 56 |  if_ne	mov	local08, local05
06da4     47 8B E2 5A |  if_ne	rdword	local06, local08
06da8     00 88 0E F2 | 	cmp	local05, #0 wz
06dac     10 00 90 AD |  if_e	jmp	#LR__0341
06db0     43 89 5A F2 | 	cmps	local05, local04 wcz
06db4     08 00 90 3D |  if_ae	jmp	#LR__0341
06db8     45 81 5A F2 | 	cmps	local01, local06 wcz
06dbc     AC FF 9F 1D |  if_a	jmp	#LR__0339
06dc0                 | LR__0340
06dc0                 | LR__0341
06dc0     00 88 0E F2 | 	cmp	local05, #0 wz
06dc4     44 2D 02 A6 |  if_e	mov	result1, local05
06dc8     48 01 90 AD |  if_e	jmp	#LR__0344
06dcc     44 8F 02 F6 | 	mov	local08, local05
06dd0     06 8E 06 F1 | 	add	local08, #6
06dd4     47 97 E2 FA | 	rdword	local12, local08
06dd8     45 81 5A F2 | 	cmps	local01, local06 wcz
06ddc     C8 00 90 3D |  if_ae	jmp	#LR__0343
06de0     44 81 52 FC | 	wrword	local01, local05
06de4     44 73 02 F6 | 	mov	arg01, local05
06de8     40 91 02 F6 | 	mov	local09, local01
06dec     04 90 66 F0 | 	shl	local09, #4
06df0     48 73 02 F1 | 	add	arg01, local09
06df4     45 8F 02 F6 | 	mov	local08, local06
06df8     40 8F 82 F1 | 	sub	local08, local01
06dfc     39 8F 52 FC | 	wrword	local08, arg01
06e00     39 8F 02 F6 | 	mov	local08, arg01
06e04     02 8E 06 F1 | 	add	local08, #2
06e08     36 00 80 FF 
06e0c     47 1F 59 FC | 	wrword	##27791, local08
06e10     44 75 0A F6 | 	mov	arg02, local05 wz
06e14     00 2C 06 A6 |  if_e	mov	result1, #0
06e18     42 75 82 51 |  if_ne	sub	arg02, local03
06e1c     04 74 46 50 |  if_ne	shr	arg02, #4
06e20     3A 2D 02 56 |  if_ne	mov	result1, arg02
06e24     39 95 02 F6 | 	mov	local11, arg01
06e28     04 94 06 F1 | 	add	local11, #4
06e2c     4A 2D 52 FC | 	wrword	result1, local11
06e30     44 8F 02 F6 | 	mov	local08, local05
06e34     06 8E 06 F1 | 	add	local08, #6
06e38     39 91 02 F6 | 	mov	local09, arg01
06e3c     47 93 E2 FA | 	rdword	local10, local08
06e40     06 90 06 F1 | 	add	local09, #6
06e44     48 93 52 FC | 	wrword	local10, local09
06e48     39 99 02 F6 | 	mov	local13, arg01
06e4c     4C 75 0A F6 | 	mov	arg02, local13 wz
06e50     00 2C 06 A6 |  if_e	mov	result1, #0
06e54     42 75 82 51 |  if_ne	sub	arg02, local03
06e58     04 74 46 50 |  if_ne	shr	arg02, #4
06e5c     3A 2D 02 56 |  if_ne	mov	result1, arg02
06e60     16 97 02 F6 | 	mov	local12, result1
06e64     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
06e68     16 9B 0A F6 | 	mov	local14, result1 wz
06e6c     38 00 90 AD |  if_e	jmp	#LR__0342
06e70     43 9B 5A F2 | 	cmps	local14, local04 wcz
06e74     30 00 90 3D |  if_ae	jmp	#LR__0342
06e78     42 8F 02 F6 | 	mov	local08, local03
06e7c     4C 91 02 F6 | 	mov	local09, local13
06e80     47 73 02 F6 | 	mov	arg01, local08
06e84     48 75 0A F6 | 	mov	arg02, local09 wz
06e88     00 2C 06 A6 |  if_e	mov	result1, #0
06e8c     39 75 82 51 |  if_ne	sub	arg02, arg01
06e90     04 74 46 50 |  if_ne	shr	arg02, #4
06e94     3A 2D 02 56 |  if_ne	mov	result1, arg02
06e98     16 93 02 F6 | 	mov	local10, result1
06e9c     4D 95 02 F6 | 	mov	local11, local14
06ea0     04 94 06 F1 | 	add	local11, #4
06ea4     4A 93 52 FC | 	wrword	local10, local11
06ea8                 | LR__0342
06ea8                 | LR__0343
06ea8     06 8C 06 F1 | 	add	local07, #6
06eac     46 97 52 FC | 	wrword	local12, local07
06eb0     36 00 00 FF 
06eb4     80 8E 06 F6 | 	mov	local08, ##27776
06eb8     41 8F 42 F5 | 	or	local08, local02
06ebc     01 2C 62 FD | 	cogid	result1
06ec0     16 8F 42 F5 | 	or	local08, result1
06ec4     44 93 02 F6 | 	mov	local10, local05
06ec8     02 92 06 F1 | 	add	local10, #2
06ecc     49 8F 52 FC | 	wrword	local08, local10
06ed0     42 8F 02 F6 | 	mov	local08, local03
06ed4     08 8E 06 F1 | 	add	local08, #8
06ed8     44 91 02 F6 | 	mov	local09, local05
06edc     47 93 E2 FA | 	rdword	local10, local08
06ee0     06 90 06 F1 | 	add	local09, #6
06ee4     48 93 52 FC | 	wrword	local10, local09
06ee8     44 75 0A F6 | 	mov	arg02, local05 wz
06eec     00 2C 06 A6 |  if_e	mov	result1, #0
06ef0     42 75 82 51 |  if_ne	sub	arg02, local03
06ef4     04 74 46 50 |  if_ne	shr	arg02, #4
06ef8     3A 2D 02 56 |  if_ne	mov	result1, arg02
06efc     08 84 06 F1 | 	add	local03, #8
06f00     42 2D 52 FC | 	wrword	result1, local03
06f04     44 2D 02 F6 | 	mov	result1, local05
06f08     08 2C 06 F1 | 	add	result1, #8
06f0c     00 C0 31 FF 
06f10     00 2C 46 F5 | 	or	result1, ##1669332992
06f14                 | LR__0344
06f14     AF F0 03 F6 | 	mov	ptra, fp
06f18     BF 00 A0 FD | 	call	#popregs_
06f1c                 | __system___gc_tryalloc_ret
06f1c     2D 00 64 FD | 	ret
06f20                 | 
06f20                 | __system___gc_errmsg
06f20     02 5A 05 F6 | 	mov	COUNT_, #2
06f24     B0 00 A0 FD | 	call	#pushregs_
06f28     39 81 02 F6 | 	mov	local01, arg01
06f2c                 | LR__0345
06f2c     40 83 CA FA | 	rdbyte	local02, local01 wz
06f30     01 80 06 F1 | 	add	local01, #1
06f34     0C 00 90 AD |  if_e	jmp	#LR__0346
06f38     41 73 02 F6 | 	mov	arg01, local02
06f3c     F4 F3 BF FD | 	call	#__system___tx
06f40     E8 FF 9F FD | 	jmp	#LR__0345
06f44                 | LR__0346
06f44     00 2C 06 F6 | 	mov	result1, #0
06f48     AF F0 03 F6 | 	mov	ptra, fp
06f4c     BF 00 A0 FD | 	call	#popregs_
06f50                 | __system___gc_errmsg_ret
06f50     2D 00 64 FD | 	ret
06f54                 | 
06f54                 | __system___gc_alloc_managed
06f54     02 5A 05 F6 | 	mov	COUNT_, #2
06f58     B0 00 A0 FD | 	call	#pushregs_
06f5c     39 81 02 F6 | 	mov	local01, arg01
06f60     00 74 06 F6 | 	mov	arg02, #0
06f64     30 00 B0 FD | 	call	#__system___gc_doalloc
06f68     16 83 0A F6 | 	mov	local02, result1 wz
06f6c     18 00 90 5D |  if_ne	jmp	#LR__0347
06f70     00 80 5E F2 | 	cmps	local01, #0 wcz
06f74     10 00 90 ED |  if_be	jmp	#LR__0347
06f78     42 00 00 FF 
06f7c     3C 73 06 F6 | 	mov	arg01, ##@LR__0453
06f80     9C FF BF FD | 	call	#__system___gc_errmsg
06f84     04 00 90 FD | 	jmp	#LR__0348
06f88                 | LR__0347
06f88     41 2D 02 F6 | 	mov	result1, local02
06f8c                 | LR__0348
06f8c     AF F0 03 F6 | 	mov	ptra, fp
06f90     BF 00 A0 FD | 	call	#popregs_
06f94                 | __system___gc_alloc_managed_ret
06f94     2D 00 64 FD | 	ret
06f98                 | 
06f98                 | __system___gc_doalloc
06f98     06 5A 05 F6 | 	mov	COUNT_, #6
06f9c     B0 00 A0 FD | 	call	#pushregs_
06fa0     39 81 0A F6 | 	mov	local01, arg01 wz
06fa4     3A 83 02 F6 | 	mov	local02, arg02
06fa8     00 2C 06 A6 |  if_e	mov	result1, #0
06fac     94 00 90 AD |  if_e	jmp	#LR__0356
06fb0     17 80 06 F1 | 	add	local01, #23
06fb4     0F 80 26 F5 | 	andn	local01, #15
06fb8     04 80 46 F0 | 	shr	local01, #4
06fbc     14 14 06 F1 | 	add	ptr___system__dat__, #20
06fc0     0A 73 02 F6 | 	mov	arg01, ptr___system__dat__
06fc4     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06fc8     84 F2 BF FD | 	call	#__system___lockmem
06fcc     40 73 02 F6 | 	mov	arg01, local01
06fd0     41 75 02 F6 | 	mov	arg02, local02
06fd4     68 FD BF FD | 	call	#__system___gc_tryalloc
06fd8     16 85 0A F6 | 	mov	local03, result1 wz
06fdc     14 00 90 5D |  if_ne	jmp	#LR__0349
06fe0     30 03 B0 FD | 	call	#__system___gc_docollect
06fe4     40 73 02 F6 | 	mov	arg01, local01
06fe8     41 75 02 F6 | 	mov	arg02, local02
06fec     50 FD BF FD | 	call	#__system___gc_tryalloc
06ff0     16 85 02 F6 | 	mov	local03, result1
06ff4                 | LR__0349
06ff4     14 14 06 F1 | 	add	ptr___system__dat__, #20
06ff8     0A 73 02 F6 | 	mov	arg01, ptr___system__dat__
06ffc     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07000     39 01 68 FC | 	wrlong	#0, arg01
07004     00 84 0E F2 | 	cmp	local03, #0 wz
07008     34 00 90 AD |  if_e	jmp	#LR__0355
0700c     04 80 66 F0 | 	shl	local01, #4
07010     08 80 86 F1 | 	sub	local01, #8
07014     40 87 52 F6 | 	abs	local04, local01 wc
07018     02 86 46 F0 | 	shr	local04, #2
0701c     43 87 62 C6 |  if_b	neg	local04, local04
07020     43 89 0A F6 | 	mov	local05, local04 wz
07024     42 8B 02 F6 | 	mov	local06, local03
07028     14 00 90 AD |  if_e	jmp	#LR__0354
0702c     DC 8F 9F FE | 	loc	pa,	#(@LR__0352-@LR__0350)
07030     93 00 A0 FD | 	call	#FCACHE_LOAD_
07034                 | LR__0350
07034     44 05 D8 FC | 	rep	@LR__0353, local05
07038                 | LR__0351
07038     45 01 68 FC | 	wrlong	#0, local06
0703c     04 8A 06 F1 | 	add	local06, #4
07040                 | LR__0352
07040                 | LR__0353
07040                 | LR__0354
07040                 | LR__0355
07040     42 2D 02 F6 | 	mov	result1, local03
07044                 | LR__0356
07044     AF F0 03 F6 | 	mov	ptra, fp
07048     BF 00 A0 FD | 	call	#popregs_
0704c                 | __system___gc_doalloc_ret
0704c     2D 00 64 FD | 	ret
07050                 | 
07050                 | __system___gc_isvalidptr
07050     3B 33 02 F6 | 	mov	_var01, arg03
07054     19 35 02 F6 | 	mov	_var02, _var01
07058     00 F8 7F FF 
0705c     00 34 06 F5 | 	and	_var02, ##-1048576
07060     00 C0 31 FF 
07064     00 34 0E F2 | 	cmp	_var02, ##1669332992 wz
07068     00 2C 06 56 |  if_ne	mov	result1, #0
0706c     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07070     08 32 86 F1 | 	sub	_var01, #8
07074     00 F8 7F FF 
07078     00 32 26 F5 | 	andn	_var01, ##-1048576
0707c     39 33 5A F2 | 	cmps	_var01, arg01 wcz
07080     08 00 90 CD |  if_b	jmp	#LR__0357
07084     3A 33 5A F2 | 	cmps	_var01, arg02 wcz
07088     08 00 90 CD |  if_b	jmp	#LR__0358
0708c                 | LR__0357
0708c     00 2C 06 F6 | 	mov	result1, #0
07090     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
07094                 | LR__0358
07094     19 35 02 F6 | 	mov	_var02, _var01
07098     39 35 62 F5 | 	xor	_var02, arg01
0709c     0F 34 0E F5 | 	and	_var02, #15 wz
070a0     00 2C 06 56 |  if_ne	mov	result1, #0
070a4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
070a8     19 35 02 F6 | 	mov	_var02, _var01
070ac     02 34 06 F1 | 	add	_var02, #2
070b0     1A 35 E2 FA | 	rdword	_var02, _var02
070b4     7F 00 00 FF 
070b8     C0 35 06 F5 | 	and	_var02, ##65472
070bc     36 00 00 FF 
070c0     80 34 0E F2 | 	cmp	_var02, ##27776 wz
070c4     00 2C 06 56 |  if_ne	mov	result1, #0
070c8     19 2D 02 A6 |  if_e	mov	result1, _var01
070cc                 | __system___gc_isvalidptr_ret
070cc     2D 00 64 FD | 	ret
070d0                 | 
070d0                 | __system___gc_dofree
070d0     0D 5A 05 F6 | 	mov	COUNT_, #13
070d4     B0 00 A0 FD | 	call	#pushregs_
070d8     39 81 02 F6 | 	mov	local01, arg01
070dc     7C FB BF FD | 	call	#__system___gc_ptrs
070e0     16 83 02 F6 | 	mov	local02, result1
070e4     17 85 02 F6 | 	mov	local03, result2
070e8     40 87 02 F6 | 	mov	local04, local01
070ec     02 86 06 F1 | 	add	local04, #2
070f0     36 00 80 FF 
070f4     43 1F 59 FC | 	wrword	##27791, local04
070f8     40 89 02 F6 | 	mov	local05, local01
070fc     40 73 02 F6 | 	mov	arg01, local01
07100     00 FC BF FD | 	call	#__system___gc_nextBlockPtr
07104     16 8B 02 F6 | 	mov	local06, result1
07108     40 8F 9F FE | 	loc	pa,	#(@LR__0360-@LR__0359)
0710c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07110                 | LR__0359
07110     04 88 06 F1 | 	add	local05, #4
07114     44 75 EA FA | 	rdword	arg02, local05 wz
07118     41 73 02 F6 | 	mov	arg01, local02
0711c     00 2C 06 A6 |  if_e	mov	result1, #0
07120     04 74 66 50 |  if_ne	shl	arg02, #4
07124     3A 73 02 51 |  if_ne	add	arg01, arg02
07128     39 2D 02 56 |  if_ne	mov	result1, arg01
0712c     16 89 0A F6 | 	mov	local05, result1 wz
07130     28 00 90 AD |  if_e	jmp	#LR__0361
07134     44 73 02 F6 | 	mov	arg01, local05
07138     00 8C 06 F6 | 	mov	local07, #0
0713c     02 72 06 F1 | 	add	arg01, #2
07140     39 8F E2 FA | 	rdword	local08, arg01
07144     36 00 00 FF 
07148     8F 8E 0E F2 | 	cmp	local08, ##27791 wz
0714c     01 8C 66 A6 |  if_e	neg	local07, #1
07150     46 2D 02 F6 | 	mov	result1, local07
07154     16 91 0A F6 | 	mov	local09, result1 wz
07158     B4 FF 9F AD |  if_e	jmp	#LR__0359
0715c                 | LR__0360
0715c                 | LR__0361
0715c     00 88 0E F2 | 	cmp	local05, #0 wz
07160     41 89 02 A6 |  if_e	mov	local05, local02
07164     44 87 02 F6 | 	mov	local04, local05
07168     06 86 06 F1 | 	add	local04, #6
0716c     40 91 02 F6 | 	mov	local09, local01
07170     43 93 E2 FA | 	rdword	local10, local04
07174     06 90 06 F1 | 	add	local09, #6
07178     48 93 52 FC | 	wrword	local10, local09
0717c     40 75 0A F6 | 	mov	arg02, local01 wz
07180     00 2C 06 A6 |  if_e	mov	result1, #0
07184     41 75 82 51 |  if_ne	sub	arg02, local02
07188     04 74 46 50 |  if_ne	shr	arg02, #4
0718c     3A 2D 02 56 |  if_ne	mov	result1, arg02
07190     16 93 02 F6 | 	mov	local10, result1
07194     44 95 02 F6 | 	mov	local11, local05
07198     06 94 06 F1 | 	add	local11, #6
0719c     4A 93 52 FC | 	wrword	local10, local11
071a0     41 89 0A F2 | 	cmp	local05, local02 wz
071a4     84 00 90 AD |  if_e	jmp	#LR__0364
071a8     44 73 02 F6 | 	mov	arg01, local05
071ac     54 FB BF FD | 	call	#__system___gc_nextBlockPtr
071b0     40 2D 0A F2 | 	cmp	result1, local01 wz
071b4     74 00 90 5D |  if_ne	jmp	#LR__0363
071b8     44 87 E2 FA | 	rdword	local04, local05
071bc     40 95 E2 FA | 	rdword	local11, local01
071c0     4A 87 02 F1 | 	add	local04, local11
071c4     44 87 52 FC | 	wrword	local04, local05
071c8     40 87 02 F6 | 	mov	local04, local01
071cc     02 86 06 F1 | 	add	local04, #2
071d0     43 01 58 FC | 	wrword	#0, local04
071d4     40 73 02 F6 | 	mov	arg01, local01
071d8     28 FB BF FD | 	call	#__system___gc_nextBlockPtr
071dc     16 8B 02 F6 | 	mov	local06, result1
071e0     42 8B 5A F2 | 	cmps	local06, local03 wcz
071e4     20 00 90 3D |  if_ae	jmp	#LR__0362
071e8     44 75 0A F6 | 	mov	arg02, local05 wz
071ec     00 2C 06 A6 |  if_e	mov	result1, #0
071f0     41 75 82 51 |  if_ne	sub	arg02, local02
071f4     04 74 46 50 |  if_ne	shr	arg02, #4
071f8     3A 2D 02 56 |  if_ne	mov	result1, arg02
071fc     45 95 02 F6 | 	mov	local11, local06
07200     04 94 06 F1 | 	add	local11, #4
07204     4A 2D 52 FC | 	wrword	result1, local11
07208                 | LR__0362
07208     40 87 02 F6 | 	mov	local04, local01
0720c     06 86 06 F1 | 	add	local04, #6
07210     44 91 02 F6 | 	mov	local09, local05
07214     43 93 E2 FA | 	rdword	local10, local04
07218     06 90 06 F1 | 	add	local09, #6
0721c     48 93 52 FC | 	wrword	local10, local09
07220     06 80 06 F1 | 	add	local01, #6
07224     40 01 58 FC | 	wrword	#0, local01
07228     44 81 02 F6 | 	mov	local01, local05
0722c                 | LR__0363
0722c                 | LR__0364
0722c     40 73 02 F6 | 	mov	arg01, local01
07230     D0 FA BF FD | 	call	#__system___gc_nextBlockPtr
07234     16 97 0A F6 | 	mov	local12, result1 wz
07238     C8 00 90 AD |  if_e	jmp	#LR__0366
0723c     42 97 5A F2 | 	cmps	local12, local03 wcz
07240     C0 00 90 3D |  if_ae	jmp	#LR__0366
07244     4B 73 02 F6 | 	mov	arg01, local12
07248     00 8C 06 F6 | 	mov	local07, #0
0724c     02 72 06 F1 | 	add	arg01, #2
07250     39 8F E2 FA | 	rdword	local08, arg01
07254     36 00 00 FF 
07258     8F 8E 0E F2 | 	cmp	local08, ##27791 wz
0725c     01 8C 66 A6 |  if_e	neg	local07, #1
07260     46 2D 0A F6 | 	mov	result1, local07 wz
07264     9C 00 90 AD |  if_e	jmp	#LR__0366
07268     40 89 02 F6 | 	mov	local05, local01
0726c     44 87 E2 FA | 	rdword	local04, local05
07270     4B 81 02 F6 | 	mov	local01, local12
07274     40 95 E2 FA | 	rdword	local11, local01
07278     4A 87 02 F1 | 	add	local04, local11
0727c     44 99 02 F6 | 	mov	local13, local05
07280     4C 87 52 FC | 	wrword	local04, local13
07284     40 87 02 F6 | 	mov	local04, local01
07288     06 86 06 F1 | 	add	local04, #6
0728c     44 91 02 F6 | 	mov	local09, local05
07290     43 93 E2 FA | 	rdword	local10, local04
07294     06 90 06 F1 | 	add	local09, #6
07298     48 93 52 FC | 	wrword	local10, local09
0729c     40 87 02 F6 | 	mov	local04, local01
072a0     02 86 06 F1 | 	add	local04, #2
072a4     43 55 59 FC | 	wrword	#170, local04
072a8     40 87 02 F6 | 	mov	local04, local01
072ac     06 86 06 F1 | 	add	local04, #6
072b0     43 01 58 FC | 	wrword	#0, local04
072b4     40 87 02 F6 | 	mov	local04, local01
072b8     43 73 02 F6 | 	mov	arg01, local04
072bc     44 FA BF FD | 	call	#__system___gc_nextBlockPtr
072c0     16 91 02 F6 | 	mov	local09, result1
072c4     48 8B 0A F6 | 	mov	local06, local09 wz
072c8     38 00 90 AD |  if_e	jmp	#LR__0365
072cc     42 8B 5A F2 | 	cmps	local06, local03 wcz
072d0     30 00 90 3D |  if_ae	jmp	#LR__0365
072d4     41 87 02 F6 | 	mov	local04, local02
072d8     44 91 02 F6 | 	mov	local09, local05
072dc     43 73 02 F6 | 	mov	arg01, local04
072e0     48 75 0A F6 | 	mov	arg02, local09 wz
072e4     00 2C 06 A6 |  if_e	mov	result1, #0
072e8     39 75 82 51 |  if_ne	sub	arg02, arg01
072ec     04 74 46 50 |  if_ne	shr	arg02, #4
072f0     3A 2D 02 56 |  if_ne	mov	result1, arg02
072f4     16 93 02 F6 | 	mov	local10, result1
072f8     45 95 02 F6 | 	mov	local11, local06
072fc     04 94 06 F1 | 	add	local11, #4
07300     4A 93 52 FC | 	wrword	local10, local11
07304                 | LR__0365
07304                 | LR__0366
07304     45 2D 02 F6 | 	mov	result1, local06
07308     AF F0 03 F6 | 	mov	ptra, fp
0730c     BF 00 A0 FD | 	call	#popregs_
07310                 | __system___gc_dofree_ret
07310     2D 00 64 FD | 	ret
07314                 | 
07314                 | __system___gc_docollect
07314     09 5A 05 F6 | 	mov	COUNT_, #9
07318     B0 00 A0 FD | 	call	#pushregs_
0731c     3C F9 BF FD | 	call	#__system___gc_ptrs
07320     17 81 02 F6 | 	mov	local01, result2
07324     16 83 02 F6 | 	mov	local02, result1
07328     41 73 02 F6 | 	mov	arg01, local02
0732c     D4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07330     16 85 0A F6 | 	mov	local03, result1 wz
07334     01 2C 62 FD | 	cogid	result1
07338     16 87 02 F6 | 	mov	local04, result1
0733c     34 00 90 AD |  if_e	jmp	#LR__0368
07340                 | LR__0367
07340     40 85 5A F2 | 	cmps	local03, local01 wcz
07344     2C 00 90 3D |  if_ae	jmp	#LR__0368
07348     42 89 02 F6 | 	mov	local05, local03
0734c     02 88 06 F1 | 	add	local05, #2
07350     44 8B E2 FA | 	rdword	local06, local05
07354     20 8A 26 F5 | 	andn	local06, #32
07358     42 8D 02 F6 | 	mov	local07, local03
0735c     02 8C 06 F1 | 	add	local07, #2
07360     46 8B 52 FC | 	wrword	local06, local07
07364     42 73 02 F6 | 	mov	arg01, local03
07368     98 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0736c     16 85 0A F6 | 	mov	local03, result1 wz
07370     CC FF 9F 5D |  if_ne	jmp	#LR__0367
07374                 | LR__0368
07374     00 8A 06 F6 | 	mov	local06, #0
07378     00 72 06 F6 | 	mov	arg01, #0
0737c     68 EE BF FD | 	call	#__system____topofstack
07380     16 8D 02 F6 | 	mov	local07, result1
07384     45 73 02 F6 | 	mov	arg01, local06
07388     46 75 02 F6 | 	mov	arg02, local07
0738c     A0 00 B0 FD | 	call	#__system___gc_markhub
07390     34 01 B0 FD | 	call	#__system___gc_markcog
07394     41 73 02 F6 | 	mov	arg01, local02
07398     68 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0739c     16 8F 0A F6 | 	mov	local08, result1 wz
073a0     10 00 90 5D |  if_ne	jmp	#LR__0369
073a4     42 00 00 FF 
073a8     59 73 06 F6 | 	mov	arg01, ##@LR__0454
073ac     70 FB BF FD | 	call	#__system___gc_errmsg
073b0     70 00 90 FD | 	jmp	#LR__0375
073b4                 | LR__0369
073b4                 | LR__0370
073b4     47 85 02 F6 | 	mov	local03, local08
073b8     42 73 02 F6 | 	mov	arg01, local03
073bc     44 F9 BF FD | 	call	#__system___gc_nextBlockPtr
073c0     16 8F 02 F6 | 	mov	local08, result1
073c4     42 8B 02 F6 | 	mov	local06, local03
073c8     02 8A 06 F1 | 	add	local06, #2
073cc     45 91 E2 FA | 	rdword	local09, local06
073d0     20 90 CE F7 | 	test	local09, #32 wz
073d4     3C 00 90 5D |  if_ne	jmp	#LR__0373
073d8     48 89 02 F6 | 	mov	local05, local09
073dc     10 88 0E F5 | 	and	local05, #16 wz
073e0     30 00 90 5D |  if_ne	jmp	#LR__0373
073e4     48 8B 02 F6 | 	mov	local06, local09
073e8     0F 8A 06 F5 | 	and	local06, #15
073ec     45 91 02 F6 | 	mov	local09, local06
073f0     43 91 0A F2 | 	cmp	local09, local04 wz
073f4     08 00 90 AD |  if_e	jmp	#LR__0371
073f8     0E 90 0E F2 | 	cmp	local09, #14 wz
073fc     14 00 90 5D |  if_ne	jmp	#LR__0372
07400                 | LR__0371
07400     42 8B 02 F6 | 	mov	local06, local03
07404     45 73 02 F6 | 	mov	arg01, local06
07408     C4 FC BF FD | 	call	#__system___gc_dofree
0740c     16 89 02 F6 | 	mov	local05, result1
07410     44 8F 02 F6 | 	mov	local08, local05
07414                 | LR__0372
07414                 | LR__0373
07414     00 8E 0E F2 | 	cmp	local08, #0 wz
07418     08 00 90 AD |  if_e	jmp	#LR__0374
0741c     40 8F 5A F2 | 	cmps	local08, local01 wcz
07420     90 FF 9F CD |  if_b	jmp	#LR__0370
07424                 | LR__0374
07424                 | LR__0375
07424     AF F0 03 F6 | 	mov	ptra, fp
07428     BF 00 A0 FD | 	call	#popregs_
0742c                 | __system___gc_docollect_ret
0742c     2D 00 64 FD | 	ret
07430                 | 
07430                 | __system___gc_markhub
07430     0A 5A 05 F6 | 	mov	COUNT_, #10
07434     B0 00 A0 FD | 	call	#pushregs_
07438     39 81 02 F6 | 	mov	local01, arg01
0743c     3A 83 02 F6 | 	mov	local02, arg02
07440     18 F8 BF FD | 	call	#__system___gc_ptrs
07444     16 85 02 F6 | 	mov	local03, result1
07448     17 87 02 F6 | 	mov	local04, result2
0744c                 | LR__0376
0744c     41 81 5A F2 | 	cmps	local01, local02 wcz
07450     68 00 90 3D |  if_ae	jmp	#LR__0377
07454     40 77 02 FB | 	rdlong	arg03, local01
07458     04 80 06 F1 | 	add	local01, #4
0745c     42 73 02 F6 | 	mov	arg01, local03
07460     43 75 02 F6 | 	mov	arg02, local04
07464     E8 FB BF FD | 	call	#__system___gc_isvalidptr
07468     16 89 0A F6 | 	mov	local05, result1 wz
0746c     DC FF 9F AD |  if_e	jmp	#LR__0376
07470     44 73 02 F6 | 	mov	arg01, local05
07474     00 8A 06 F6 | 	mov	local06, #0
07478     02 72 06 F1 | 	add	arg01, #2
0747c     39 8D E2 FA | 	rdword	local07, arg01
07480     36 00 00 FF 
07484     8F 8C 0E F2 | 	cmp	local07, ##27791 wz
07488     01 8A 66 A6 |  if_e	neg	local06, #1
0748c     45 2D 02 F6 | 	mov	result1, local06
07490     16 8F 0A F6 | 	mov	local08, result1 wz
07494     B4 FF 9F 5D |  if_ne	jmp	#LR__0376
07498     44 91 02 F6 | 	mov	local09, local05
0749c     02 90 06 F1 | 	add	local09, #2
074a0     48 93 E2 FA | 	rdword	local10, local09
074a4     0F 92 26 F5 | 	andn	local10, #15
074a8     2E 92 46 F5 | 	or	local10, #46
074ac     44 91 02 F6 | 	mov	local09, local05
074b0     02 90 06 F1 | 	add	local09, #2
074b4     48 93 52 FC | 	wrword	local10, local09
074b8     90 FF 9F FD | 	jmp	#LR__0376
074bc                 | LR__0377
074bc     AF F0 03 F6 | 	mov	ptra, fp
074c0     BF 00 A0 FD | 	call	#popregs_
074c4                 | __system___gc_markhub_ret
074c4     2D 00 64 FD | 	ret
074c8                 | 
074c8                 | __system___gc_markcog
074c8     06 5A 05 F6 | 	mov	COUNT_, #6
074cc     B0 00 A0 FD | 	call	#pushregs_
074d0     88 F7 BF FD | 	call	#__system___gc_ptrs
074d4     16 81 02 F6 | 	mov	local01, result1
074d8     17 83 02 F6 | 	mov	local02, result2
074dc     00 84 06 F6 | 	mov	local03, #0
074e0                 | LR__0378
074e0     F0 87 06 F6 | 	mov	local04, #496
074e4     42 87 82 F1 | 	sub	local04, local03
074e8     F0 87 06 F1 | 	add	local04, #496
074ec                 | 	'.live	local04
074ec     00 86 96 F9 | 	alts	local04, #0
074f0     43 89 02 F6 | 	mov	local05, local04
074f4     40 73 02 F6 | 	mov	arg01, local01
074f8     41 75 02 F6 | 	mov	arg02, local02
074fc     44 77 02 F6 | 	mov	arg03, local05
07500     4C FB BF FD | 	call	#__system___gc_isvalidptr
07504     16 89 0A F6 | 	mov	local05, result1 wz
07508     18 00 90 AD |  if_e	jmp	#LR__0379
0750c     44 8B 02 F6 | 	mov	local06, local05
07510     02 8A 06 F1 | 	add	local06, #2
07514     45 87 E2 FA | 	rdword	local04, local06
07518     20 86 46 F5 | 	or	local04, #32
0751c     02 88 06 F1 | 	add	local05, #2
07520     44 87 52 FC | 	wrword	local04, local05
07524                 | LR__0379
07524     01 84 06 F1 | 	add	local03, #1
07528     F0 85 5E F2 | 	cmps	local03, #496 wcz
0752c     B0 FF 9F CD |  if_b	jmp	#LR__0378
07530     AF F0 03 F6 | 	mov	ptra, fp
07534     BF 00 A0 FD | 	call	#popregs_
07538                 | __system___gc_markcog_ret
07538     2D 00 64 FD | 	ret
0753c                 | 
0753c                 | __system__write
0753c     03 5A 05 F6 | 	mov	COUNT_, #3
07540     B0 00 A0 FD | 	call	#pushregs_
07544     39 81 02 F6 | 	mov	local01, arg01
07548     3A 83 02 F6 | 	mov	local02, arg02
0754c     3B 85 02 F6 | 	mov	local03, arg03
07550     0A 80 1E F2 | 	cmp	local01, #10 wcz
07554     1C 00 90 CD |  if_b	jmp	#LR__0380
07558     01 00 00 FF 
0755c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07560     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07564     01 00 00 FF 
07568     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0756c     01 2C 66 F6 | 	neg	result1, #1
07570     28 00 90 FD | 	jmp	#LR__0381
07574                 | LR__0380
07574     40 73 02 F6 | 	mov	arg01, local01
07578     01 72 66 F0 | 	shl	arg01, #1
0757c     40 73 02 F1 | 	add	arg01, local01
07580     04 72 66 F0 | 	shl	arg01, #4
07584     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07588     0A 73 02 F1 | 	add	arg01, ptr___system__dat__
0758c     41 75 02 F6 | 	mov	arg02, local02
07590     42 77 02 F6 | 	mov	arg03, local03
07594     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07598     E0 08 B0 FD | 	call	#__system___vfswrite
0759c                 | LR__0381
0759c     AF F0 03 F6 | 	mov	ptra, fp
075a0     BF 00 A0 FD | 	call	#popregs_
075a4                 | __system__write_ret
075a4     2D 00 64 FD | 	ret
075a8                 | 
075a8                 | __system__read
075a8     03 5A 05 F6 | 	mov	COUNT_, #3
075ac     B0 00 A0 FD | 	call	#pushregs_
075b0     39 81 02 F6 | 	mov	local01, arg01
075b4     3A 83 02 F6 | 	mov	local02, arg02
075b8     3B 85 02 F6 | 	mov	local03, arg03
075bc     0A 80 1E F2 | 	cmp	local01, #10 wcz
075c0     1C 00 90 CD |  if_b	jmp	#LR__0382
075c4     01 00 00 FF 
075c8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
075cc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075d0     01 00 00 FF 
075d4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
075d8     01 2C 66 F6 | 	neg	result1, #1
075dc     28 00 90 FD | 	jmp	#LR__0383
075e0                 | LR__0382
075e0     40 73 02 F6 | 	mov	arg01, local01
075e4     01 72 66 F0 | 	shl	arg01, #1
075e8     40 73 02 F1 | 	add	arg01, local01
075ec     04 72 66 F0 | 	shl	arg01, #4
075f0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
075f4     0A 73 02 F1 | 	add	arg01, ptr___system__dat__
075f8     41 75 02 F6 | 	mov	arg02, local02
075fc     42 77 02 F6 | 	mov	arg03, local03
07600     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07604     38 0A B0 FD | 	call	#__system___vfsread
07608                 | LR__0383
07608     AF F0 03 F6 | 	mov	ptra, fp
0760c     BF 00 A0 FD | 	call	#popregs_
07610                 | __system__read_ret
07610     2D 00 64 FD | 	ret
07614                 | 
07614                 | __system__close
07614     01 5A 05 F6 | 	mov	COUNT_, #1
07618     B0 00 A0 FD | 	call	#pushregs_
0761c     39 81 02 F6 | 	mov	local01, arg01
07620     0A 80 1E F2 | 	cmp	local01, #10 wcz
07624     1C 00 90 CD |  if_b	jmp	#LR__0384
07628     01 00 00 FF 
0762c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07630     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07634     01 00 00 FF 
07638     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0763c     01 2C 66 F6 | 	neg	result1, #1
07640     20 00 90 FD | 	jmp	#LR__0385
07644                 | LR__0384
07644     40 73 02 F6 | 	mov	arg01, local01
07648     01 72 66 F0 | 	shl	arg01, #1
0764c     40 73 02 F1 | 	add	arg01, local01
07650     04 72 66 F0 | 	shl	arg01, #4
07654     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07658     0A 73 02 F1 | 	add	arg01, ptr___system__dat__
0765c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07660     84 03 B0 FD | 	call	#__system___closeraw
07664                 | LR__0385
07664     AF F0 03 F6 | 	mov	ptra, fp
07668     BF 00 A0 FD | 	call	#popregs_
0766c                 | __system__close_ret
0766c     2D 00 64 FD | 	ret
07670                 | 
07670                 | __system__lseek
07670     09 5A 05 F6 | 	mov	COUNT_, #9
07674     B0 00 A0 FD | 	call	#pushregs_
07678     39 81 02 F6 | 	mov	local01, arg01
0767c     3A 83 02 F6 | 	mov	local02, arg02
07680     3B 85 02 F6 | 	mov	local03, arg03
07684     0A 80 1E F2 | 	cmp	local01, #10 wcz
07688     1C 00 90 CD |  if_b	jmp	#LR__0386
0768c     01 00 00 FF 
07690     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07694     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07698     01 00 00 FF 
0769c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
076a0     01 2C 66 F6 | 	neg	result1, #1
076a4     D8 00 90 FD | 	jmp	#LR__0390
076a8                 | LR__0386
076a8     40 87 02 F6 | 	mov	local04, local01
076ac     01 86 66 F0 | 	shl	local04, #1
076b0     40 87 02 F1 | 	add	local04, local01
076b4     04 86 66 F0 | 	shl	local04, #4
076b8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
076bc     0A 87 02 F1 | 	add	local04, ptr___system__dat__
076c0     2C 86 06 F1 | 	add	local04, #44
076c4     43 89 0A FB | 	rdlong	local05, local04 wz
076c8     2C 86 86 F1 | 	sub	local04, #44
076cc     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
076d0     1C 00 90 5D |  if_ne	jmp	#LR__0387
076d4     01 00 00 FF 
076d8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
076dc     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
076e0     01 00 00 FF 
076e4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
076e8     01 2C 66 F6 | 	neg	result1, #1
076ec     90 00 90 FD | 	jmp	#LR__0390
076f0                 | LR__0387
076f0     08 86 06 F1 | 	add	local04, #8
076f4     43 89 02 FB | 	rdlong	local05, local04
076f8     08 86 86 F1 | 	sub	local04, #8
076fc     40 88 CE F7 | 	test	local05, #64 wz
07700     14 00 90 AD |  if_e	jmp	#LR__0388
07704     08 86 06 F1 | 	add	local04, #8
07708     43 89 02 FB | 	rdlong	local05, local04
0770c     80 88 46 F5 | 	or	local05, #128
07710     43 89 62 FC | 	wrlong	local05, local04
07714     08 86 86 F1 | 	sub	local04, #8
07718                 | LR__0388
07718     2C 86 06 F1 | 	add	local04, #44
0771c     43 89 02 FB | 	rdlong	local05, local04
07720     2C 86 86 F1 | 	sub	local04, #44
07724     44 8B 02 FB | 	rdlong	local06, local05
07728     04 88 06 F1 | 	add	local05, #4
0772c     44 8D 02 FB | 	rdlong	local07, local05
07730     43 73 02 F6 | 	mov	arg01, local04
07734     41 75 02 F6 | 	mov	arg02, local02
07738     42 77 02 F6 | 	mov	arg03, local03
0773c     07 8F 02 F6 | 	mov	local08, objptr
07740     45 0F 02 F6 | 	mov	objptr, local06
07744     2D 8C 62 FD | 	call	local07
07748     47 0F 02 F6 | 	mov	objptr, local08
0774c     16 91 02 F6 | 	mov	local09, result1
07750     00 90 5E F2 | 	cmps	local09, #0 wcz
07754     24 00 90 3D |  if_ae	jmp	#LR__0389
07758     48 73 6A F6 | 	neg	arg01, local09 wz
0775c     01 00 00 FF 
07760     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07764     0A 73 62 FC | 	wrlong	arg01, ptr___system__dat__
07768     01 00 00 FF 
0776c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07770     01 2C 66 56 |  if_ne	neg	result1, #1
07774     00 2C 06 A6 |  if_e	mov	result1, #0
07778     04 00 90 FD | 	jmp	#LR__0390
0777c                 | LR__0389
0777c     48 2D 02 F6 | 	mov	result1, local09
07780                 | LR__0390
07780     AF F0 03 F6 | 	mov	ptra, fp
07784     BF 00 A0 FD | 	call	#popregs_
07788                 | __system__lseek_ret
07788     2D 00 64 FD | 	ret
0778c                 | 
0778c                 | __system____getftab
0778c     0A 72 1E F2 | 	cmp	arg01, #10 wcz
07790     00 2C 06 36 |  if_ae	mov	result1, #0
07794     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07798     39 2D 02 F6 | 	mov	result1, arg01
0779c     01 2C 66 F0 | 	shl	result1, #1
077a0     39 2D 02 F1 | 	add	result1, arg01
077a4     04 2C 66 F0 | 	shl	result1, #4
077a8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
077ac     0A 2D 02 F1 | 	add	result1, ptr___system__dat__
077b0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
077b4                 | __system____getftab_ret
077b4     2D 00 64 FD | 	ret
077b8                 | 
077b8                 | __system___strrev
077b8     39 33 CA FA | 	rdbyte	_var01, arg01 wz
077bc     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
077c0     39 35 02 F6 | 	mov	_var02, arg01
077c4     44 88 9F FE | 	loc	pa,	#(@LR__0392-@LR__0391)
077c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
077cc                 | LR__0391
077cc     1A 33 CA FA | 	rdbyte	_var01, _var02 wz
077d0     01 34 06 51 |  if_ne	add	_var02, #1
077d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0391
077d8                 | LR__0392
077d8     01 34 86 F1 | 	sub	_var02, #1
077dc                 | LR__0393
077dc     39 35 5A F2 | 	cmps	_var02, arg01 wcz
077e0     1C 00 90 ED |  if_be	jmp	#LR__0394
077e4     39 37 C2 FA | 	rdbyte	_var03, arg01
077e8     1A 39 C2 FA | 	rdbyte	_var04, _var02
077ec     39 39 42 FC | 	wrbyte	_var04, arg01
077f0     1A 37 42 FC | 	wrbyte	_var03, _var02
077f4     01 72 06 F1 | 	add	arg01, #1
077f8     01 34 86 F1 | 	sub	_var02, #1
077fc     DC FF 9F FD | 	jmp	#LR__0393
07800                 | LR__0394
07800                 | __system___strrev_ret
07800     2D 00 64 FD | 	ret
07804                 | 
07804                 | __system___fmtpad
07804     0C 5A 05 F6 | 	mov	COUNT_, #12
07808     B0 00 A0 FD | 	call	#pushregs_
0780c     39 81 02 F6 | 	mov	local01, arg01
07810     3A 83 02 F6 | 	mov	local02, arg02
07814     3C 85 02 F6 | 	mov	local03, arg04
07818     41 87 EA F8 | 	getbyte	local04, local02, #1
0781c     16 82 46 F0 | 	shr	local02, #22
07820     03 82 0E F5 | 	and	local02, #3 wz
07824     00 88 06 F6 | 	mov	local05, #0
07828     01 82 06 A6 |  if_e	mov	local02, #1
0782c     42 83 CA F7 | 	test	local02, local03 wz
07830     00 2C 06 A6 |  if_e	mov	result1, #0
07834     84 00 90 AD |  if_e	jmp	#LR__0398
07838     3B 87 82 F1 | 	sub	local04, arg03
0783c     43 8B 02 F6 | 	mov	local06, local04
07840     00 8A 5E F2 | 	cmps	local06, #0 wcz
07844     00 2C 06 E6 |  if_be	mov	result1, #0
07848     70 00 90 ED |  if_be	jmp	#LR__0398
0784c     03 82 0E F2 | 	cmp	local02, #3 wz
07850     18 00 90 5D |  if_ne	jmp	#LR__0395
07854     01 84 0E F2 | 	cmp	local03, #1 wz
07858     6E 8C 62 FD | 	wrz	local07
0785c     46 8B 02 F1 | 	add	local06, local07
07860     45 8B 52 F6 | 	abs	local06, local06 wc
07864     01 8A 46 F0 | 	shr	local06, #1
07868     45 8B 62 C6 |  if_b	neg	local06, local06
0786c                 | LR__0395
0786c     00 8E 06 F6 | 	mov	local08, #0
07870                 | LR__0396
07870     45 8F 5A F2 | 	cmps	local08, local06 wcz
07874     40 00 90 3D |  if_ae	jmp	#LR__0397
07878     40 91 02 F6 | 	mov	local09, local01
0787c     48 8D 02 FB | 	rdlong	local07, local09
07880     04 90 06 F1 | 	add	local09, #4
07884     48 93 02 FB | 	rdlong	local10, local09
07888     20 72 06 F6 | 	mov	arg01, #32
0788c     07 95 02 F6 | 	mov	local11, objptr
07890     46 0F 02 F6 | 	mov	objptr, local07
07894     2D 92 62 FD | 	call	local10
07898     4A 0F 02 F6 | 	mov	objptr, local11
0789c     16 97 02 F6 | 	mov	local12, result1
078a0     00 96 5E F2 | 	cmps	local12, #0 wcz
078a4     4B 2D 02 C6 |  if_b	mov	result1, local12
078a8     10 00 90 CD |  if_b	jmp	#LR__0398
078ac     4B 89 02 F1 | 	add	local05, local12
078b0     01 8E 06 F1 | 	add	local08, #1
078b4     B8 FF 9F FD | 	jmp	#LR__0396
078b8                 | LR__0397
078b8     44 2D 02 F6 | 	mov	result1, local05
078bc                 | LR__0398
078bc     AF F0 03 F6 | 	mov	ptra, fp
078c0     BF 00 A0 FD | 	call	#popregs_
078c4                 | __system___fmtpad_ret
078c4     2D 00 64 FD | 	ret
078c8                 | 
078c8                 | __system___uitoa
078c8     09 5A 05 F6 | 	mov	COUNT_, #9
078cc     B0 00 A0 FD | 	call	#pushregs_
078d0     39 81 02 F6 | 	mov	local01, arg01
078d4     3A 83 02 F6 | 	mov	local02, arg02
078d8     3B 85 02 F6 | 	mov	local03, arg03
078dc     3C 87 02 F6 | 	mov	local04, arg04
078e0     3D 89 0A F6 | 	mov	local05, arg05 wz
078e4     40 8B 02 F6 | 	mov	local06, local01
078e8     00 8C 06 F6 | 	mov	local07, #0
078ec     37 8E 06 56 |  if_ne	mov	local08, #55
078f0     57 8E 06 A6 |  if_e	mov	local08, #87
078f4                 | LR__0399
078f4     41 AF 02 F6 | 	mov	muldiva_, local02
078f8     42 B1 02 F6 | 	mov	muldivb_, local03
078fc     CC 00 A0 FD | 	call	#unsdivide_
07900     57 91 02 F6 | 	mov	local09, muldiva_
07904     0A 90 1E F2 | 	cmp	local09, #10 wcz
07908     30 90 06 C1 |  if_b	add	local09, #48
0790c     47 91 02 31 |  if_ae	add	local09, local08
07910     45 91 42 FC | 	wrbyte	local09, local06
07914     41 AF 02 F6 | 	mov	muldiva_, local02
07918     42 B1 02 F6 | 	mov	muldivb_, local03
0791c     01 8A 06 F1 | 	add	local06, #1
07920     CC 00 A0 FD | 	call	#unsdivide_
07924     58 83 0A F6 | 	mov	local02, muldivb_ wz
07928     01 8C 06 F1 | 	add	local07, #1
0792c     C4 FF 9F 5D |  if_ne	jmp	#LR__0399
07930     43 8D 1A F2 | 	cmp	local07, local04 wcz
07934     BC FF 9F CD |  if_b	jmp	#LR__0399
07938     45 01 48 FC | 	wrbyte	#0, local06
0793c     40 73 02 F6 | 	mov	arg01, local01
07940     74 FE BF FD | 	call	#__system___strrev
07944     46 2D 02 F6 | 	mov	result1, local07
07948     AF F0 03 F6 | 	mov	ptra, fp
0794c     BF 00 A0 FD | 	call	#popregs_
07950                 | __system___uitoa_ret
07950     2D 00 64 FD | 	ret
07954                 | 
07954                 | __system___gettxfunc
07954     03 5A 05 F6 | 	mov	COUNT_, #3
07958     B0 00 A0 FD | 	call	#pushregs_
0795c     2C FE BF FD | 	call	#__system____getftab
07960     16 81 0A F6 | 	mov	local01, result1 wz
07964     14 00 90 AD |  if_e	jmp	#LR__0400
07968     08 80 06 F1 | 	add	local01, #8
0796c     40 83 02 FB | 	rdlong	local02, local01
07970     08 80 86 F1 | 	sub	local01, #8
07974     41 85 0A F6 | 	mov	local03, local02 wz
07978     08 00 90 5D |  if_ne	jmp	#LR__0401
0797c                 | LR__0400
0797c     00 2C 06 F6 | 	mov	result1, #0
07980     0C 00 90 FD | 	jmp	#LR__0402
07984                 | LR__0401
07984     40 73 02 F6 | 	mov	arg01, local01
07988     09 75 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
0798c     80 E8 BF FD | 	call	#__system___make_methodptr
07990                 | LR__0402
07990     AF F0 03 F6 | 	mov	ptra, fp
07994     BF 00 A0 FD | 	call	#popregs_
07998                 | __system___gettxfunc_ret
07998     2D 00 64 FD | 	ret
0799c                 | 
0799c                 | __system___getiolock_0145
0799c     03 5A 05 F6 | 	mov	COUNT_, #3
079a0     B0 00 A0 FD | 	call	#pushregs_
079a4     E4 FD BF FD | 	call	#__system____getftab
079a8     16 81 0A F6 | 	mov	local01, result1 wz
079ac     14 00 90 AD |  if_e	jmp	#LR__0403
079b0     08 80 06 F1 | 	add	local01, #8
079b4     40 83 02 FB | 	rdlong	local02, local01
079b8     08 80 86 F1 | 	sub	local01, #8
079bc     41 85 0A F6 | 	mov	local03, local02 wz
079c0     10 00 90 5D |  if_ne	jmp	#LR__0404
079c4                 | LR__0403
079c4     18 14 06 F1 | 	add	ptr___system__dat__, #24
079c8     0A 2D 02 F6 | 	mov	result1, ptr___system__dat__
079cc     18 14 86 F1 | 	sub	ptr___system__dat__, #24
079d0     08 00 90 FD | 	jmp	#LR__0405
079d4                 | LR__0404
079d4     0C 80 06 F1 | 	add	local01, #12
079d8     40 2D 02 F6 | 	mov	result1, local01
079dc                 | LR__0405
079dc     AF F0 03 F6 | 	mov	ptra, fp
079e0     BF 00 A0 FD | 	call	#popregs_
079e4                 | __system___getiolock_0145_ret
079e4     2D 00 64 FD | 	ret
079e8                 | 
079e8                 | __system___closeraw
079e8     06 5A 05 F6 | 	mov	COUNT_, #6
079ec     B0 00 A0 FD | 	call	#pushregs_
079f0     39 81 02 F6 | 	mov	local01, arg01
079f4     00 82 06 F6 | 	mov	local02, #0
079f8     08 80 06 F1 | 	add	local01, #8
079fc     40 85 0A FB | 	rdlong	local03, local01 wz
07a00     08 80 86 F1 | 	sub	local01, #8
07a04     1C 00 90 5D |  if_ne	jmp	#LR__0406
07a08     01 00 00 FF 
07a0c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a10     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07a14     01 00 00 FF 
07a18     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a1c     01 2C 66 F6 | 	neg	result1, #1
07a20     90 00 90 FD | 	jmp	#LR__0409
07a24                 | LR__0406
07a24     28 80 06 F1 | 	add	local01, #40
07a28     40 85 0A FB | 	rdlong	local03, local01 wz
07a2c     28 80 86 F1 | 	sub	local01, #40
07a30     2C 00 90 AD |  if_e	jmp	#LR__0407
07a34     28 80 06 F1 | 	add	local01, #40
07a38     40 85 02 FB | 	rdlong	local03, local01
07a3c     28 80 86 F1 | 	sub	local01, #40
07a40     42 87 02 FB | 	rdlong	local04, local03
07a44     04 84 06 F1 | 	add	local03, #4
07a48     42 89 02 FB | 	rdlong	local05, local03
07a4c     40 73 02 F6 | 	mov	arg01, local01
07a50     07 8B 02 F6 | 	mov	local06, objptr
07a54     43 0F 02 F6 | 	mov	objptr, local04
07a58     2D 88 62 FD | 	call	local05
07a5c     45 0F 02 F6 | 	mov	objptr, local06
07a60                 | LR__0407
07a60     20 80 06 F1 | 	add	local01, #32
07a64     40 85 0A FB | 	rdlong	local03, local01 wz
07a68     20 80 86 F1 | 	sub	local01, #32
07a6c     30 00 90 AD |  if_e	jmp	#LR__0408
07a70     20 80 06 F1 | 	add	local01, #32
07a74     40 85 02 FB | 	rdlong	local03, local01
07a78     20 80 86 F1 | 	sub	local01, #32
07a7c     42 87 02 FB | 	rdlong	local04, local03
07a80     04 84 06 F1 | 	add	local03, #4
07a84     42 89 02 FB | 	rdlong	local05, local03
07a88     40 73 02 F6 | 	mov	arg01, local01
07a8c     07 8B 02 F6 | 	mov	local06, objptr
07a90     43 0F 02 F6 | 	mov	objptr, local04
07a94     2D 88 62 FD | 	call	local05
07a98     45 0F 02 F6 | 	mov	objptr, local06
07a9c     16 83 02 F6 | 	mov	local02, result1
07aa0                 | LR__0408
07aa0     40 73 02 F6 | 	mov	arg01, local01
07aa4     00 74 06 F6 | 	mov	arg02, #0
07aa8     30 76 06 F6 | 	mov	arg03, #48
07aac     A0 00 A0 FD | 	call	#\builtin_bytefill_
07ab0     41 2D 02 F6 | 	mov	result1, local02
07ab4                 | LR__0409
07ab4     AF F0 03 F6 | 	mov	ptra, fp
07ab8     BF 00 A0 FD | 	call	#popregs_
07abc                 | __system___closeraw_ret
07abc     2D 00 64 FD | 	ret
07ac0                 | 
07ac0                 | __system____default_getc
07ac0     05 5A 05 F6 | 	mov	COUNT_, #5
07ac4     B0 00 A0 FD | 	call	#pushregs_
07ac8     39 81 02 F6 | 	mov	local01, arg01
07acc     40 83 02 FB | 	rdlong	local02, local01
07ad0     08 82 06 F1 | 	add	local02, #8
07ad4     41 85 02 FB | 	rdlong	local03, local02
07ad8     08 82 86 F1 | 	sub	local02, #8
07adc     02 84 CE F7 | 	test	local03, #2 wz
07ae0     08 00 90 AD |  if_e	jmp	#LR__0410
07ae4     40 73 02 F6 | 	mov	arg01, local01
07ae8     8C 01 B0 FD | 	call	#__system____default_flush
07aec                 | LR__0410
07aec     08 82 06 F1 | 	add	local02, #8
07af0     41 85 02 FB | 	rdlong	local03, local02
07af4     01 84 46 F5 | 	or	local03, #1
07af8     41 85 62 FC | 	wrlong	local03, local02
07afc     08 82 86 F1 | 	sub	local02, #8
07b00     41 87 0A FB | 	rdlong	local04, local02 wz
07b04     0C 00 90 5D |  if_ne	jmp	#LR__0411
07b08     40 73 02 F6 | 	mov	arg01, local01
07b0c     4C 08 B0 FD | 	call	#__system____default_filbuf
07b10     16 87 02 F6 | 	mov	local04, result1
07b14                 | LR__0411
07b14     00 86 5E F2 | 	cmps	local04, #0 wcz
07b18     01 2C 66 E6 |  if_be	neg	result1, #1
07b1c     1C 00 90 ED |  if_be	jmp	#LR__0412
07b20     01 86 86 F1 | 	sub	local04, #1
07b24     41 87 62 FC | 	wrlong	local04, local02
07b28     04 82 06 F1 | 	add	local02, #4
07b2c     41 89 02 FB | 	rdlong	local05, local02
07b30     44 2D C2 FA | 	rdbyte	result1, local05
07b34     01 88 06 F1 | 	add	local05, #1
07b38     41 89 62 FC | 	wrlong	local05, local02
07b3c                 | LR__0412
07b3c     AF F0 03 F6 | 	mov	ptra, fp
07b40     BF 00 A0 FD | 	call	#popregs_
07b44                 | __system____default_getc_ret
07b44     2D 00 64 FD | 	ret
07b48                 | 
07b48                 | __system____default_putc
07b48     06 5A 05 F6 | 	mov	COUNT_, #6
07b4c     B0 00 A0 FD | 	call	#pushregs_
07b50     39 81 02 F6 | 	mov	local01, arg01
07b54     3A 83 02 F6 | 	mov	local02, arg02
07b58     41 85 02 FB | 	rdlong	local03, local02
07b5c     08 84 06 F1 | 	add	local03, #8
07b60     42 87 02 FB | 	rdlong	local04, local03
07b64     08 84 86 F1 | 	sub	local03, #8
07b68     01 86 CE F7 | 	test	local04, #1 wz
07b6c     08 00 90 AD |  if_e	jmp	#LR__0413
07b70     41 73 02 F6 | 	mov	arg01, local02
07b74     00 01 B0 FD | 	call	#__system____default_flush
07b78                 | LR__0413
07b78     08 84 06 F1 | 	add	local03, #8
07b7c     42 87 02 FB | 	rdlong	local04, local03
07b80     02 86 46 F5 | 	or	local04, #2
07b84     42 87 62 FC | 	wrlong	local04, local03
07b88     08 84 86 F1 | 	sub	local03, #8
07b8c     42 89 02 FB | 	rdlong	local05, local03
07b90     44 8B 02 F6 | 	mov	local06, local05
07b94     0C 84 06 F1 | 	add	local03, #12
07b98     42 8B 02 F1 | 	add	local06, local03
07b9c     45 81 42 FC | 	wrbyte	local01, local06
07ba0     FF 80 06 F5 | 	and	local01, #255
07ba4     01 88 06 F1 | 	add	local05, #1
07ba8     0C 84 86 F1 | 	sub	local03, #12
07bac     42 89 62 FC | 	wrlong	local05, local03
07bb0     02 00 00 FF 
07bb4     00 88 0E F2 | 	cmp	local05, ##1024 wz
07bb8     10 00 90 5D |  if_ne	jmp	#LR__0414
07bbc     41 73 02 F6 | 	mov	arg01, local02
07bc0     B4 00 B0 FD | 	call	#__system____default_flush
07bc4     00 2C 0E F2 | 	cmp	result1, #0 wz
07bc8     01 80 66 56 |  if_ne	neg	local01, #1
07bcc                 | LR__0414
07bcc     40 2D 02 F6 | 	mov	result1, local01
07bd0     AF F0 03 F6 | 	mov	ptra, fp
07bd4     BF 00 A0 FD | 	call	#popregs_
07bd8                 | __system____default_putc_ret
07bd8     2D 00 64 FD | 	ret
07bdc                 | 
07bdc                 | __system____default_putc_terminal
07bdc     06 5A 05 F6 | 	mov	COUNT_, #6
07be0     B0 00 A0 FD | 	call	#pushregs_
07be4     39 81 02 F6 | 	mov	local01, arg01
07be8     3A 83 02 F6 | 	mov	local02, arg02
07bec     41 85 02 FB | 	rdlong	local03, local02
07bf0     08 84 06 F1 | 	add	local03, #8
07bf4     42 87 02 FB | 	rdlong	local04, local03
07bf8     08 84 86 F1 | 	sub	local03, #8
07bfc     01 86 CE F7 | 	test	local04, #1 wz
07c00     08 00 90 AD |  if_e	jmp	#LR__0415
07c04     41 73 02 F6 | 	mov	arg01, local02
07c08     6C 00 B0 FD | 	call	#__system____default_flush
07c0c                 | LR__0415
07c0c     08 84 06 F1 | 	add	local03, #8
07c10     42 87 02 FB | 	rdlong	local04, local03
07c14     02 86 46 F5 | 	or	local04, #2
07c18     42 87 62 FC | 	wrlong	local04, local03
07c1c     08 84 86 F1 | 	sub	local03, #8
07c20     42 89 02 FB | 	rdlong	local05, local03
07c24     44 8B 02 F6 | 	mov	local06, local05
07c28     0C 84 06 F1 | 	add	local03, #12
07c2c     42 8B 02 F1 | 	add	local06, local03
07c30     45 81 42 FC | 	wrbyte	local01, local06
07c34     FF 80 06 F5 | 	and	local01, #255
07c38     0C 84 86 F1 | 	sub	local03, #12
07c3c     01 88 06 F1 | 	add	local05, #1
07c40     42 89 62 FC | 	wrlong	local05, local03
07c44     0A 80 0E F2 | 	cmp	local01, #10 wz
07c48     0C 00 90 AD |  if_e	jmp	#LR__0416
07c4c     02 00 00 FF 
07c50     00 88 0E F2 | 	cmp	local05, ##1024 wz
07c54     10 00 90 5D |  if_ne	jmp	#LR__0417
07c58                 | LR__0416
07c58     41 73 02 F6 | 	mov	arg01, local02
07c5c     18 00 B0 FD | 	call	#__system____default_flush
07c60     00 2C 0E F2 | 	cmp	result1, #0 wz
07c64     01 80 66 56 |  if_ne	neg	local01, #1
07c68                 | LR__0417
07c68     40 2D 02 F6 | 	mov	result1, local01
07c6c     AF F0 03 F6 | 	mov	ptra, fp
07c70     BF 00 A0 FD | 	call	#popregs_
07c74                 | __system____default_putc_terminal_ret
07c74     2D 00 64 FD | 	ret
07c78                 | 
07c78                 | __system____default_flush
07c78     0F 5A 05 F6 | 	mov	COUNT_, #15
07c7c     B0 00 A0 FD | 	call	#pushregs_
07c80     39 81 02 F6 | 	mov	local01, arg01
07c84     40 83 02 FB | 	rdlong	local02, local01
07c88     41 85 02 FB | 	rdlong	local03, local02
07c8c     08 82 06 F1 | 	add	local02, #8
07c90     41 87 02 FB | 	rdlong	local04, local02
07c94     08 82 86 F1 | 	sub	local02, #8
07c98     02 86 CE F7 | 	test	local04, #2 wz
07c9c     B8 00 90 AD |  if_e	jmp	#LR__0420
07ca0     00 84 5E F2 | 	cmps	local03, #0 wcz
07ca4     30 01 90 ED |  if_be	jmp	#LR__0422
07ca8     08 80 06 F1 | 	add	local01, #8
07cac     40 87 02 FB | 	rdlong	local04, local01
07cb0     08 80 86 F1 | 	sub	local01, #8
07cb4     40 86 CE F7 | 	test	local04, #64 wz
07cb8     5C 00 90 AD |  if_e	jmp	#LR__0419
07cbc     08 80 06 F1 | 	add	local01, #8
07cc0     40 87 02 FB | 	rdlong	local04, local01
07cc4     08 80 86 F1 | 	sub	local01, #8
07cc8     80 86 CE F7 | 	test	local04, #128 wz
07ccc     48 00 90 AD |  if_e	jmp	#LR__0418
07cd0     2C 80 06 F1 | 	add	local01, #44
07cd4     40 87 02 FB | 	rdlong	local04, local01
07cd8     2C 80 86 F1 | 	sub	local01, #44
07cdc     43 89 02 FB | 	rdlong	local05, local04
07ce0     04 86 06 F1 | 	add	local04, #4
07ce4     43 8B 02 FB | 	rdlong	local06, local04
07ce8     40 73 02 F6 | 	mov	arg01, local01
07cec     00 74 06 F6 | 	mov	arg02, #0
07cf0     02 76 06 F6 | 	mov	arg03, #2
07cf4     07 8D 02 F6 | 	mov	local07, objptr
07cf8     44 0F 02 F6 | 	mov	objptr, local05
07cfc     2D 8A 62 FD | 	call	local06
07d00     46 0F 02 F6 | 	mov	objptr, local07
07d04     08 80 06 F1 | 	add	local01, #8
07d08     40 87 02 FB | 	rdlong	local04, local01
07d0c     80 86 26 F5 | 	andn	local04, #128
07d10     40 87 62 FC | 	wrlong	local04, local01
07d14     08 80 86 F1 | 	sub	local01, #8
07d18                 | LR__0418
07d18                 | LR__0419
07d18     14 80 06 F1 | 	add	local01, #20
07d1c     40 87 02 FB | 	rdlong	local04, local01
07d20     14 80 86 F1 | 	sub	local01, #20
07d24     43 89 02 FB | 	rdlong	local05, local04
07d28     04 86 06 F1 | 	add	local04, #4
07d2c     43 8B 02 FB | 	rdlong	local06, local04
07d30     0C 82 06 F1 | 	add	local02, #12
07d34     41 75 02 F6 | 	mov	arg02, local02
07d38     0C 82 86 F1 | 	sub	local02, #12
07d3c     40 73 02 F6 | 	mov	arg01, local01
07d40     42 77 02 F6 | 	mov	arg03, local03
07d44     07 8F 02 F6 | 	mov	local08, objptr
07d48     44 0F 02 F6 | 	mov	objptr, local05
07d4c     2D 8A 62 FD | 	call	local06
07d50     47 0F 02 F6 | 	mov	objptr, local08
07d54     80 00 90 FD | 	jmp	#LR__0422
07d58                 | LR__0420
07d58     08 82 06 F1 | 	add	local02, #8
07d5c     41 87 02 FB | 	rdlong	local04, local02
07d60     08 82 86 F1 | 	sub	local02, #8
07d64     01 86 CE F7 | 	test	local04, #1 wz
07d68     6C 00 90 AD |  if_e	jmp	#LR__0421
07d6c     00 84 0E F2 | 	cmp	local03, #0 wz
07d70     64 00 90 AD |  if_e	jmp	#LR__0421
07d74     2C 80 06 F1 | 	add	local01, #44
07d78     40 91 02 FB | 	rdlong	local09, local01
07d7c     2C 80 86 F1 | 	sub	local01, #44
07d80     48 87 02 F6 | 	mov	local04, local09
07d84     43 89 02 FB | 	rdlong	local05, local04
07d88     04 86 06 F1 | 	add	local04, #4
07d8c     43 93 02 FB | 	rdlong	local10, local04
07d90     04 86 86 F1 | 	sub	local04, #4
07d94     49 8B 02 F6 | 	mov	local06, local10
07d98     40 95 02 F6 | 	mov	local11, local01
07d9c     42 97 02 F6 | 	mov	local12, local03
07da0     4B 97 62 F6 | 	neg	local12, local12
07da4     4B 99 02 F6 | 	mov	local13, local12
07da8     01 8C 06 F6 | 	mov	local07, #1
07dac     4A 73 02 F6 | 	mov	arg01, local11
07db0     4C 75 02 F6 | 	mov	arg02, local13
07db4     01 76 06 F6 | 	mov	arg03, #1
07db8     07 8F 02 F6 | 	mov	local08, objptr
07dbc     44 0F 02 F6 | 	mov	objptr, local05
07dc0     2D 8A 62 FD | 	call	local06
07dc4     47 0F 02 F6 | 	mov	objptr, local08
07dc8     16 9B 02 F6 | 	mov	local14, result1
07dcc     4D 9D 02 F6 | 	mov	local15, local14
07dd0     00 9C 5E F2 | 	cmps	local15, #0 wcz
07dd4     42 9D 02 36 |  if_ae	mov	local15, local03
07dd8                 | LR__0421
07dd8                 | LR__0422
07dd8     41 01 68 FC | 	wrlong	#0, local02
07ddc     04 82 06 F1 | 	add	local02, #4
07de0     41 01 68 FC | 	wrlong	#0, local02
07de4     04 82 06 F1 | 	add	local02, #4
07de8     41 01 68 FC | 	wrlong	#0, local02
07dec     00 2C 06 F6 | 	mov	result1, #0
07df0     AF F0 03 F6 | 	mov	ptra, fp
07df4     BF 00 A0 FD | 	call	#popregs_
07df8                 | __system____default_flush_ret
07df8     2D 00 64 FD | 	ret
07dfc                 | 
07dfc                 | __system___rxtxioctl_0174
07dfc     02 5A 05 F6 | 	mov	COUNT_, #2
07e00     B0 00 A0 FD | 	call	#pushregs_
07e04     3A 81 02 F6 | 	mov	local01, arg02
07e08     3B 83 02 F6 | 	mov	local02, arg03
07e0c     00 81 0E F2 | 	cmp	local01, #256 wz
07e10     0C 00 90 AD |  if_e	jmp	#LR__0423
07e14     01 81 0E F2 | 	cmp	local01, #257 wz
07e18     1C 00 90 AD |  if_e	jmp	#LR__0424
07e1c     30 00 90 FD | 	jmp	#LR__0425
07e20                 | LR__0423
07e20     08 14 06 F1 | 	add	ptr___system__dat__, #8
07e24     0A 2D 02 FB | 	rdlong	result1, ptr___system__dat__
07e28     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07e2c     41 2D 62 FC | 	wrlong	result1, local02
07e30     00 2C 06 F6 | 	mov	result1, #0
07e34     30 00 90 FD | 	jmp	#LR__0426
07e38                 | LR__0424
07e38     41 73 02 FB | 	rdlong	arg01, local02
07e3c     08 14 06 F1 | 	add	ptr___system__dat__, #8
07e40     0A 73 62 FC | 	wrlong	arg01, ptr___system__dat__
07e44     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07e48     00 2C 06 F6 | 	mov	result1, #0
07e4c     18 00 90 FD | 	jmp	#LR__0426
07e50                 | LR__0425
07e50     01 00 00 FF 
07e54     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07e58     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07e5c     01 00 00 FF 
07e60     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07e64     01 2C 66 F6 | 	neg	result1, #1
07e68                 | LR__0426
07e68     AF F0 03 F6 | 	mov	ptra, fp
07e6c     BF 00 A0 FD | 	call	#popregs_
07e70                 | __system___rxtxioctl_0174_ret
07e70     2D 00 64 FD | 	ret
07e74                 | 
07e74                 | __system____dummy_flush_0175
07e74     00 2C 06 F6 | 	mov	result1, #0
07e78                 | __system____dummy_flush_0175_ret
07e78     2D 00 64 FD | 	ret
07e7c                 | 
07e7c                 | __system___vfswrite
07e7c     0B 5A 05 F6 | 	mov	COUNT_, #11
07e80     B0 00 A0 FD | 	call	#pushregs_
07e84     39 81 02 F6 | 	mov	local01, arg01
07e88     3A 83 02 F6 | 	mov	local02, arg02
07e8c     3B 85 02 F6 | 	mov	local03, arg03
07e90     41 87 02 F6 | 	mov	local04, local02
07e94     08 80 06 F1 | 	add	local01, #8
07e98     40 89 02 FB | 	rdlong	local05, local01
07e9c     08 80 86 F1 | 	sub	local01, #8
07ea0     02 88 CE F7 | 	test	local05, #2 wz
07ea4     1C 00 90 5D |  if_ne	jmp	#LR__0427
07ea8     01 00 00 FF 
07eac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07eb0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07eb4     01 00 00 FF 
07eb8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07ebc     01 2C 66 F6 | 	neg	result1, #1
07ec0     70 01 90 FD | 	jmp	#LR__0435
07ec4                 | LR__0427
07ec4     08 80 06 F1 | 	add	local01, #8
07ec8     40 89 02 FB | 	rdlong	local05, local01
07ecc     08 80 86 F1 | 	sub	local01, #8
07ed0     40 88 CE F7 | 	test	local05, #64 wz
07ed4     5C 00 90 AD |  if_e	jmp	#LR__0429
07ed8     08 80 06 F1 | 	add	local01, #8
07edc     40 89 02 FB | 	rdlong	local05, local01
07ee0     08 80 86 F1 | 	sub	local01, #8
07ee4     80 88 CE F7 | 	test	local05, #128 wz
07ee8     48 00 90 AD |  if_e	jmp	#LR__0428
07eec     2C 80 06 F1 | 	add	local01, #44
07ef0     40 89 02 FB | 	rdlong	local05, local01
07ef4     2C 80 86 F1 | 	sub	local01, #44
07ef8     44 8B 02 FB | 	rdlong	local06, local05
07efc     04 88 06 F1 | 	add	local05, #4
07f00     44 8D 02 FB | 	rdlong	local07, local05
07f04     40 73 02 F6 | 	mov	arg01, local01
07f08     00 74 06 F6 | 	mov	arg02, #0
07f0c     02 76 06 F6 | 	mov	arg03, #2
07f10     07 8F 02 F6 | 	mov	local08, objptr
07f14     45 0F 02 F6 | 	mov	objptr, local06
07f18     2D 8C 62 FD | 	call	local07
07f1c     47 0F 02 F6 | 	mov	objptr, local08
07f20     08 80 06 F1 | 	add	local01, #8
07f24     40 89 02 FB | 	rdlong	local05, local01
07f28     80 88 26 F5 | 	andn	local05, #128
07f2c     40 89 62 FC | 	wrlong	local05, local01
07f30     08 80 86 F1 | 	sub	local01, #8
07f34                 | LR__0428
07f34                 | LR__0429
07f34     14 80 06 F1 | 	add	local01, #20
07f38     40 89 0A FB | 	rdlong	local05, local01 wz
07f3c     14 80 86 F1 | 	sub	local01, #20
07f40     7C 00 90 AD |  if_e	jmp	#LR__0431
07f44     14 80 06 F1 | 	add	local01, #20
07f48     40 89 02 FB | 	rdlong	local05, local01
07f4c     14 80 86 F1 | 	sub	local01, #20
07f50     44 8B 02 FB | 	rdlong	local06, local05
07f54     04 88 06 F1 | 	add	local05, #4
07f58     44 8D 02 FB | 	rdlong	local07, local05
07f5c     41 75 02 F6 | 	mov	arg02, local02
07f60     42 77 02 F6 | 	mov	arg03, local03
07f64     40 73 02 F6 | 	mov	arg01, local01
07f68     07 8F 02 F6 | 	mov	local08, objptr
07f6c     45 0F 02 F6 | 	mov	objptr, local06
07f70     2D 8C 62 FD | 	call	local07
07f74     47 0F 02 F6 | 	mov	objptr, local08
07f78     16 91 02 F6 | 	mov	local09, result1
07f7c     00 90 5E F2 | 	cmps	local09, #0 wcz
07f80     34 00 90 3D |  if_ae	jmp	#LR__0430
07f84     08 80 06 F1 | 	add	local01, #8
07f88     40 89 02 FB | 	rdlong	local05, local01
07f8c     20 88 46 F5 | 	or	local05, #32
07f90     40 89 62 FC | 	wrlong	local05, local01
07f94     01 00 00 FF 
07f98     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07f9c     0A 91 62 FC | 	wrlong	local09, ptr___system__dat__
07fa0     01 00 00 FF 
07fa4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07fa8     00 90 0E F2 | 	cmp	local09, #0 wz
07fac     01 2C 66 56 |  if_ne	neg	result1, #1
07fb0     00 2C 06 A6 |  if_e	mov	result1, #0
07fb4     7C 00 90 FD | 	jmp	#LR__0435
07fb8                 | LR__0430
07fb8     48 2D 02 F6 | 	mov	result1, local09
07fbc     74 00 90 FD | 	jmp	#LR__0435
07fc0                 | LR__0431
07fc0     18 80 06 F1 | 	add	local01, #24
07fc4     40 93 0A FB | 	rdlong	local10, local01 wz
07fc8     18 80 86 F1 | 	sub	local01, #24
07fcc     1C 00 90 5D |  if_ne	jmp	#LR__0432
07fd0     01 00 00 FF 
07fd4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07fd8     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07fdc     01 00 00 FF 
07fe0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07fe4     01 2C 66 F6 | 	neg	result1, #1
07fe8     48 00 90 FD | 	jmp	#LR__0435
07fec                 | LR__0432
07fec     00 90 06 F6 | 	mov	local09, #0
07ff0                 | LR__0433
07ff0     00 84 1E F2 | 	cmp	local03, #0 wcz
07ff4     38 00 90 ED |  if_be	jmp	#LR__0434
07ff8     49 89 02 F6 | 	mov	local05, local10
07ffc     44 8B 02 FB | 	rdlong	local06, local05
08000     04 88 06 F1 | 	add	local05, #4
08004     44 8D 02 FB | 	rdlong	local07, local05
08008     43 73 C2 FA | 	rdbyte	arg01, local04
0800c     40 75 02 F6 | 	mov	arg02, local01
08010     07 95 02 F6 | 	mov	local11, objptr
08014     45 0F 02 F6 | 	mov	objptr, local06
08018     01 86 06 F1 | 	add	local04, #1
0801c     2D 8C 62 FD | 	call	local07
08020     4A 0F 02 F6 | 	mov	objptr, local11
08024     16 91 02 F1 | 	add	local09, result1
08028     01 84 86 F1 | 	sub	local03, #1
0802c     C0 FF 9F FD | 	jmp	#LR__0433
08030                 | LR__0434
08030     48 2D 02 F6 | 	mov	result1, local09
08034                 | LR__0435
08034     AF F0 03 F6 | 	mov	ptra, fp
08038     BF 00 A0 FD | 	call	#popregs_
0803c                 | __system___vfswrite_ret
0803c     2D 00 64 FD | 	ret
08040                 | 
08040                 | __system___vfsread
08040     0E 5A 05 F6 | 	mov	COUNT_, #14
08044     B0 00 A0 FD | 	call	#pushregs_
08048     28 F0 07 F1 | 	add	ptra, #40
0804c     04 5E 05 F1 | 	add	fp, #4
08050     AF 72 62 FC | 	wrlong	arg01, fp
08054     04 5E 05 F1 | 	add	fp, #4
08058     AF 74 62 FC | 	wrlong	arg02, fp
0805c     04 5E 05 F1 | 	add	fp, #4
08060     AF 76 62 FC | 	wrlong	arg03, fp
08064     04 5E 85 F1 | 	sub	fp, #4
08068     AF 80 02 FB | 	rdlong	local01, fp
0806c     14 5E 05 F1 | 	add	fp, #20
08070     AF 80 62 FC | 	wrlong	local01, fp
08074     04 5E 05 F1 | 	add	fp, #4
08078     AF 00 68 FC | 	wrlong	#0, fp
0807c     1C 5E 85 F1 | 	sub	fp, #28
08080     AF 82 02 FB | 	rdlong	local02, fp
08084     04 5E 85 F1 | 	sub	fp, #4
08088     08 82 06 F1 | 	add	local02, #8
0808c     41 81 02 FB | 	rdlong	local01, local02
08090     01 80 CE F7 | 	test	local01, #1 wz
08094     1C 00 90 5D |  if_ne	jmp	#LR__0436
08098     01 00 00 FF 
0809c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
080a0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
080a4     01 00 00 FF 
080a8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
080ac     01 2C 66 F6 | 	neg	result1, #1
080b0     9C 02 90 FD | 	jmp	#LR__0444
080b4                 | LR__0436
080b4     04 5E 05 F1 | 	add	fp, #4
080b8     AF 80 02 FB | 	rdlong	local01, fp
080bc     04 5E 85 F1 | 	sub	fp, #4
080c0     10 80 06 F1 | 	add	local01, #16
080c4     40 85 0A FB | 	rdlong	local03, local01 wz
080c8     B4 00 90 AD |  if_e	jmp	#LR__0438
080cc     04 5E 05 F1 | 	add	fp, #4
080d0     AF 86 02 FB | 	rdlong	local04, fp
080d4     10 86 06 F1 | 	add	local04, #16
080d8     43 81 02 FB | 	rdlong	local01, local04
080dc     40 83 02 FB | 	rdlong	local02, local01
080e0     04 80 06 F1 | 	add	local01, #4
080e4     40 85 02 FB | 	rdlong	local03, local01
080e8     AF 72 02 FB | 	rdlong	arg01, fp
080ec     04 5E 05 F1 | 	add	fp, #4
080f0     AF 74 02 FB | 	rdlong	arg02, fp
080f4     04 5E 05 F1 | 	add	fp, #4
080f8     AF 76 02 FB | 	rdlong	arg03, fp
080fc     0C 5E 85 F1 | 	sub	fp, #12
08100     07 89 02 F6 | 	mov	local05, objptr
08104     41 0F 02 F6 | 	mov	objptr, local02
08108     2D 84 62 FD | 	call	local03
0810c     44 0F 02 F6 | 	mov	objptr, local05
08110     10 5E 05 F1 | 	add	fp, #16
08114     AF 2C 62 FC | 	wrlong	result1, fp
08118     10 5E 85 F1 | 	sub	fp, #16
0811c     00 2C 5E F2 | 	cmps	result1, #0 wcz
08120     4C 00 90 3D |  if_ae	jmp	#LR__0437
08124     04 5E 05 F1 | 	add	fp, #4
08128     AF 80 02 FB | 	rdlong	local01, fp
0812c     40 87 02 F6 | 	mov	local04, local01
08130     08 86 06 F1 | 	add	local04, #8
08134     43 85 02 FB | 	rdlong	local03, local04
08138     20 84 46 F5 | 	or	local03, #32
0813c     08 80 06 F1 | 	add	local01, #8
08140     40 85 62 FC | 	wrlong	local03, local01
08144     0C 5E 05 F1 | 	add	fp, #12
08148     AF 72 0A FB | 	rdlong	arg01, fp wz
0814c     10 5E 85 F1 | 	sub	fp, #16
08150     01 00 00 FF 
08154     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
08158     0A 73 62 FC | 	wrlong	arg01, ptr___system__dat__
0815c     01 00 00 FF 
08160     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
08164     01 2C 66 56 |  if_ne	neg	result1, #1
08168     00 2C 06 A6 |  if_e	mov	result1, #0
0816c     E0 01 90 FD | 	jmp	#LR__0444
08170                 | LR__0437
08170     10 5E 05 F1 | 	add	fp, #16
08174     AF 2C 02 FB | 	rdlong	result1, fp
08178     10 5E 85 F1 | 	sub	fp, #16
0817c     D0 01 90 FD | 	jmp	#LR__0444
08180                 | LR__0438
08180     04 5E 05 F1 | 	add	fp, #4
08184     AF 80 02 FB | 	rdlong	local01, fp
08188     1C 80 06 F1 | 	add	local01, #28
0818c     40 85 02 FB | 	rdlong	local03, local01
08190     14 5E 05 F1 | 	add	fp, #20
08194     AF 84 62 FC | 	wrlong	local03, fp
08198     AF 80 0A FB | 	rdlong	local01, fp wz
0819c     18 5E 85 F1 | 	sub	fp, #24
081a0     1C 00 90 5D |  if_ne	jmp	#LR__0439
081a4     01 00 00 FF 
081a8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
081ac     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
081b0     01 00 00 FF 
081b4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
081b8     01 2C 66 F6 | 	neg	result1, #1
081bc     90 01 90 FD | 	jmp	#LR__0444
081c0                 | LR__0439
081c0     04 5E 05 F1 | 	add	fp, #4
081c4     AF 80 02 FB | 	rdlong	local01, fp
081c8     04 5E 85 F1 | 	sub	fp, #4
081cc     24 80 06 F1 | 	add	local01, #36
081d0     40 85 0A FB | 	rdlong	local03, local01 wz
081d4     A0 00 90 AD |  if_e	jmp	#LR__0441
081d8     04 5E 05 F1 | 	add	fp, #4
081dc     AF 8A 02 FB | 	rdlong	local06, fp
081e0     45 87 02 F6 | 	mov	local04, local06
081e4     24 86 06 F1 | 	add	local04, #36
081e8     43 8D 02 FB | 	rdlong	local07, local04
081ec     46 81 02 F6 | 	mov	local01, local07
081f0     40 83 02 FB | 	rdlong	local02, local01
081f4     04 80 06 F1 | 	add	local01, #4
081f8     40 8F 02 FB | 	rdlong	local08, local01
081fc     47 85 02 F6 | 	mov	local03, local08
08200     45 91 02 F6 | 	mov	local09, local06
08204     48 93 02 F6 | 	mov	local10, local09
08208     00 95 06 F6 | 	mov	local11, #256
0820c     20 5E 05 F1 | 	add	fp, #32
08210     AF 96 02 F6 | 	mov	local12, fp
08214     4B 99 02 F6 | 	mov	local13, local12
08218     49 73 02 F6 | 	mov	arg01, local10
0821c     00 75 06 F6 | 	mov	arg02, #256
08220     4C 77 02 F6 | 	mov	arg03, local13
08224     07 9B 02 F6 | 	mov	local14, objptr
08228     41 0F 02 F6 | 	mov	objptr, local02
0822c     24 5E 85 F1 | 	sub	fp, #36
08230     2D 84 62 FD | 	call	local03
08234     4D 0F 02 F6 | 	mov	objptr, local14
08238     16 89 02 F6 | 	mov	local05, result1
0823c     10 5E 05 F1 | 	add	fp, #16
08240     AF 88 62 FC | 	wrlong	local05, fp
08244     AF 82 0A FB | 	rdlong	local02, fp wz
08248     10 5E 85 F1 | 	sub	fp, #16
0824c     28 00 90 5D |  if_ne	jmp	#LR__0440
08250     24 5E 05 F1 | 	add	fp, #36
08254     AF 86 02 FB | 	rdlong	local04, fp
08258     24 5E 85 F1 | 	sub	fp, #36
0825c     43 85 02 F6 | 	mov	local03, local04
08260     02 84 0E F5 | 	and	local03, #2 wz
08264     10 00 90 AD |  if_e	jmp	#LR__0440
08268     01 80 06 F6 | 	mov	local01, #1
0826c     20 5E 05 F1 | 	add	fp, #32
08270     AF 02 68 FC | 	wrlong	#1, fp
08274     20 5E 85 F1 | 	sub	fp, #32
08278                 | LR__0440
08278                 | LR__0441
08278     10 5E 05 F1 | 	add	fp, #16
0827c     AF 00 68 FC | 	wrlong	#0, fp
08280     10 5E 85 F1 | 	sub	fp, #16
08284                 | LR__0442
08284     0C 5E 05 F1 | 	add	fp, #12
08288     AF 80 02 FB | 	rdlong	local01, fp
0828c     0C 5E 85 F1 | 	sub	fp, #12
08290     00 80 1E F2 | 	cmp	local01, #0 wcz
08294     AC 00 90 ED |  if_be	jmp	#LR__0443
08298     18 5E 05 F1 | 	add	fp, #24
0829c     AF 80 02 FB | 	rdlong	local01, fp
082a0     40 83 02 FB | 	rdlong	local02, local01
082a4     04 80 06 F1 | 	add	local01, #4
082a8     40 85 02 FB | 	rdlong	local03, local01
082ac     14 5E 85 F1 | 	sub	fp, #20
082b0     AF 72 02 FB | 	rdlong	arg01, fp
082b4     04 5E 85 F1 | 	sub	fp, #4
082b8     07 93 02 F6 | 	mov	local10, objptr
082bc     41 0F 02 F6 | 	mov	objptr, local02
082c0     2D 84 62 FD | 	call	local03
082c4     49 0F 02 F6 | 	mov	objptr, local10
082c8     16 91 02 F6 | 	mov	local09, result1
082cc     14 5E 05 F1 | 	add	fp, #20
082d0     AF 90 62 FC | 	wrlong	local09, fp
082d4     14 5E 85 F1 | 	sub	fp, #20
082d8     00 90 5E F2 | 	cmps	local09, #0 wcz
082dc     64 00 90 CD |  if_b	jmp	#LR__0443
082e0     1C 5E 05 F1 | 	add	fp, #28
082e4     AF 80 02 FB | 	rdlong	local01, fp
082e8     40 85 02 F6 | 	mov	local03, local01
082ec     01 84 06 F1 | 	add	local03, #1
082f0     AF 84 62 FC | 	wrlong	local03, fp
082f4     08 5E 85 F1 | 	sub	fp, #8
082f8     AF 8A 02 FB | 	rdlong	local06, fp
082fc     40 8B 42 FC | 	wrbyte	local06, local01
08300     04 5E 85 F1 | 	sub	fp, #4
08304     AF 80 02 FB | 	rdlong	local01, fp
08308     01 80 06 F1 | 	add	local01, #1
0830c     AF 80 62 FC | 	wrlong	local01, fp
08310     04 5E 85 F1 | 	sub	fp, #4
08314     AF 80 02 FB | 	rdlong	local01, fp
08318     01 80 86 F1 | 	sub	local01, #1
0831c     AF 80 62 FC | 	wrlong	local01, fp
08320     14 5E 05 F1 | 	add	fp, #20
08324     AF 80 0A FB | 	rdlong	local01, fp wz
08328     20 5E 85 F1 | 	sub	fp, #32
0832c     54 FF 9F AD |  if_e	jmp	#LR__0442
08330     14 5E 05 F1 | 	add	fp, #20
08334     AF 84 02 FB | 	rdlong	local03, fp
08338     14 5E 85 F1 | 	sub	fp, #20
0833c     0A 84 0E F2 | 	cmp	local03, #10 wz
08340     40 FF 9F 5D |  if_ne	jmp	#LR__0442
08344                 | LR__0443
08344     10 5E 05 F1 | 	add	fp, #16
08348     AF 2C 02 FB | 	rdlong	result1, fp
0834c     10 5E 85 F1 | 	sub	fp, #16
08350                 | LR__0444
08350     AF F0 03 F6 | 	mov	ptra, fp
08354     BF 00 A0 FD | 	call	#popregs_
08358                 | __system___vfsread_ret
08358     2D 00 64 FD | 	ret
0835c                 | 
0835c                 | __system____default_filbuf
0835c     06 5A 05 F6 | 	mov	COUNT_, #6
08360     B0 00 A0 FD | 	call	#pushregs_
08364     39 81 02 FB | 	rdlong	local01, arg01
08368     10 72 06 F1 | 	add	arg01, #16
0836c     39 83 02 FB | 	rdlong	local02, arg01
08370     10 72 86 F1 | 	sub	arg01, #16
08374     41 85 02 FB | 	rdlong	local03, local02
08378     04 82 06 F1 | 	add	local02, #4
0837c     41 87 02 FB | 	rdlong	local04, local02
08380     0C 80 06 F1 | 	add	local01, #12
08384     40 75 02 F6 | 	mov	arg02, local01
08388     0C 80 86 F1 | 	sub	local01, #12
0838c     0A 76 C6 F9 | 	decod	arg03, #10
08390     07 89 02 F6 | 	mov	local05, objptr
08394     42 0F 02 F6 | 	mov	objptr, local03
08398     2D 86 62 FD | 	call	local04
0839c     44 0F 02 F6 | 	mov	objptr, local05
083a0     16 8B 02 F6 | 	mov	local06, result1
083a4     00 8A 5E F2 | 	cmps	local06, #0 wcz
083a8     01 2C 66 C6 |  if_b	neg	result1, #1
083ac     28 00 90 CD |  if_b	jmp	#LR__0445
083b0     40 8B 62 FC | 	wrlong	local06, local01
083b4     0C 80 06 F1 | 	add	local01, #12
083b8     40 83 02 F6 | 	mov	local02, local01
083bc     08 80 86 F1 | 	sub	local01, #8
083c0     40 83 62 FC | 	wrlong	local02, local01
083c4     04 80 06 F1 | 	add	local01, #4
083c8     40 83 02 FB | 	rdlong	local02, local01
083cc     01 82 46 F5 | 	or	local02, #1
083d0     40 83 62 FC | 	wrlong	local02, local01
083d4     45 2D 02 F6 | 	mov	result1, local06
083d8                 | LR__0445
083d8     AF F0 03 F6 | 	mov	ptra, fp
083dc     BF 00 A0 FD | 	call	#popregs_
083e0                 | __system____default_filbuf_ret
083e0     2D 00 64 FD | 	ret
083e4                 | 
083e4                 | ' 	
083e4                 | ' 	FUNCTION pfunc(c as integer) as integer
083e4                 | ___strs_cl_pfunc
083e4                 | ' 		if (i < 16) then
083e4     04 0E 06 F1 | 	add	objptr, #4
083e8     07 33 02 FB | 	rdlong	_var01, objptr
083ec     04 0E 86 F1 | 	sub	objptr, #4
083f0     10 32 5E F2 | 	cmps	_var01, #16 wcz
083f4     2C 00 90 3D |  if_ae	jmp	#LR__0446
083f8     07 35 02 FB | 	rdlong	_var02, objptr
083fc     04 0E 06 F1 | 	add	objptr, #4
08400     07 37 02 FB | 	rdlong	_var03, objptr
08404     1A 37 02 F1 | 	add	_var03, _var02
08408     1B 73 42 FC | 	wrbyte	arg01, _var03
0840c     07 33 02 FB | 	rdlong	_var01, objptr
08410     01 32 06 F1 | 	add	_var01, #1
08414     07 33 62 FC | 	wrlong	_var01, objptr
08418     04 0E 86 F1 | 	sub	objptr, #4
0841c                 | ' 			p(i) = c
0841c                 | ' 			i = i+1
0841c                 | ' 			return 1
0841c     01 2C 06 F6 | 	mov	result1, #1
08420     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
08424                 | LR__0446
08424                 | ' 			return -1
08424     01 2C 66 F6 | 	neg	result1, #1
08428                 | ___strs_cl_pfunc_ret
08428     2D 00 64 FD | 	ret
0842c                 | 
0842c                 | __struct__s_vfs_file_t_putchar
0842c     04 5A 05 F6 | 	mov	COUNT_, #4
08430     B0 00 A0 FD | 	call	#pushregs_
08434     18 0E 06 F1 | 	add	objptr, #24
08438     07 81 0A FB | 	rdlong	local01, objptr wz
0843c     18 0E 86 F1 | 	sub	objptr, #24
08440     00 2C 06 A6 |  if_e	mov	result1, #0
08444     3C 00 90 AD |  if_e	jmp	#LR__0447
08448     18 0E 06 F1 | 	add	objptr, #24
0844c     07 81 02 FB | 	rdlong	local01, objptr
08450     18 0E 86 F1 | 	sub	objptr, #24
08454     40 83 02 FB | 	rdlong	local02, local01
08458     04 80 06 F1 | 	add	local01, #4
0845c     40 85 02 FB | 	rdlong	local03, local01
08460     07 75 02 F6 | 	mov	arg02, objptr
08464     07 87 02 F6 | 	mov	local04, objptr
08468     41 0F 02 F6 | 	mov	objptr, local02
0846c     2D 84 62 FD | 	call	local03
08470     43 0F 02 F6 | 	mov	objptr, local04
08474     00 2C 5E F2 | 	cmps	result1, #0 wcz
08478     00 80 06 C6 |  if_b	mov	local01, #0
0847c     01 80 06 36 |  if_ae	mov	local01, #1
08480     40 2D 02 F6 | 	mov	result1, local01
08484                 | LR__0447
08484     AF F0 03 F6 | 	mov	ptra, fp
08488     BF 00 A0 FD | 	call	#popregs_
0848c                 | __struct__s_vfs_file_t_putchar_ret
0848c     2D 00 64 FD | 	ret
08490                 | 
08490                 | __struct__s_vfs_file_t_getchar
08490     04 5A 05 F6 | 	mov	COUNT_, #4
08494     B0 00 A0 FD | 	call	#pushregs_
08498     1C 0E 06 F1 | 	add	objptr, #28
0849c     07 81 0A FB | 	rdlong	local01, objptr wz
084a0     1C 0E 86 F1 | 	sub	objptr, #28
084a4     01 2C 66 A6 |  if_e	neg	result1, #1
084a8     2C 00 90 AD |  if_e	jmp	#LR__0448
084ac                 | '         return getcf(__this);
084ac     1C 0E 06 F1 | 	add	objptr, #28
084b0     07 81 02 FB | 	rdlong	local01, objptr
084b4     1C 0E 86 F1 | 	sub	objptr, #28
084b8     40 83 02 FB | 	rdlong	local02, local01
084bc     04 80 06 F1 | 	add	local01, #4
084c0     40 85 02 FB | 	rdlong	local03, local01
084c4     07 73 02 F6 | 	mov	arg01, objptr
084c8     07 87 02 F6 | 	mov	local04, objptr
084cc     41 0F 02 F6 | 	mov	objptr, local02
084d0     2D 84 62 FD | 	call	local03
084d4     43 0F 02 F6 | 	mov	objptr, local04
084d8                 | LR__0448
084d8     AF F0 03 F6 | 	mov	ptra, fp
084dc     BF 00 A0 FD | 	call	#popregs_
084e0                 | __struct__s_vfs_file_t_getchar_ret
084e0     2D 00 64 FD | 	ret
084e4                 | 
084e4                 | __struct___bas_wrap_sender_tx
084e4     04 5A 05 F6 | 	mov	COUNT_, #4
084e8     B0 00 A0 FD | 	call	#pushregs_
084ec     07 81 02 FB | 	rdlong	local01, objptr
084f0     40 83 02 FB | 	rdlong	local02, local01
084f4     04 80 06 F1 | 	add	local01, #4
084f8     40 85 02 FB | 	rdlong	local03, local01
084fc     07 87 02 F6 | 	mov	local04, objptr
08500     41 0F 02 F6 | 	mov	objptr, local02
08504     2D 84 62 FD | 	call	local03
08508     43 0F 02 F6 | 	mov	objptr, local04
0850c     01 2C 06 F6 | 	mov	result1, #1
08510     AF F0 03 F6 | 	mov	ptra, fp
08514     BF 00 A0 FD | 	call	#popregs_
08518                 | __struct___bas_wrap_sender_tx_ret
08518     2D 00 64 FD | 	ret
0851c                 | 
0851c                 | LR__0449
0851c     20          | 	byte	" "
0851d     00          | 	byte	0
0851e                 | LR__0450
0851e                 | 	byte	
0851e     00          | 	byte	0
0851f                 | LR__0451
0851f                 | 	byte	
0851f     00          | 	byte	0
08520                 | LR__0452
08520     20 21 21 21 
08524     20 63 6F 72 
08528     72 75 70 74 
0852c     65 64 20 68 
08530     65 61 70 3F 
08534     3F 3F 20 21 
08538     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0853b     00          | 	byte	0
0853c                 | LR__0453
0853c     20 21 21 21 
08540     20 6F 75 74 
08544     20 6F 66 20 
08548     68 65 61 70 
0854c     20 6D 65 6D 
08550     6F 72 79 20 
08554     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
08558     00          | 	byte	0
08559                 | LR__0454
08559     20 21 21 21 
0855d     20 63 6F 72 
08561     72 75 70 74 
08565     65 64 20 68 
08569     65 61 70 20 
0856d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
08571     00          | 	byte	0
08572                 | LR__0455
08572     4E 61 6D 65 
08576     20 20 20 20 
0857a     20 20 20 20 
0857e     20 20 20 20 
08582     20 20 20 20 
08586     20 20 20 6C 
0858a     65 6E 20 20 
0858e     20 66 74 20 
08592     76 6F 6C 20 
08596     72 65 70 20 
0859a     20 20 72 2E 
0859e     6C 65 6E 20 
085a2     20 20 20 20 
085a6     20 20 20 20 
085aa     4E 61 6D 65 
085ae     20 20 20 20 
085b2     20 20 20 20 
085b6     20 20 20 20 
085ba     20 20 20 20 
085be     20 20 20 6C 
085c2     65 6E 20 20 
085c6     20 66 74 20 
085ca     76 6F 6C 20 
085ce     72 65 70 20 
085d2     20 20 72 2E 
085d6     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
085da     00          | 	byte	0
085db                 | LR__0456
085db     53          | 	byte	"S"
085dc     00          | 	byte	0
085dd                 | LR__0457
085dd     20 20 20 20 
085e1     20 20 20 20 
085e5     20 20 20 20 
085e9     20 20 20 20 
085ed     20 20 20 20 
085f1     20 20       | 	byte	"                      "
085f3     00          | 	byte	0
085f4                 | LR__0458
085f4     20          | 	byte	" "
085f5     00          | 	byte	0
085f6                 | LR__0459
085f6     73 61 6D 70 
085fa     6C 65 73 20 
085fe     6D 6F 64 75 
08602     6C 65       | 	byte	"samples module"
08604     00          | 	byte	0
08605     00 00 00    | 	alignl
08608                 | _dat_
08608     23 23 20 62 
0860c     61 6C 6C 61 
08610     64 61 20 23 
08614     23 00 00 00 | module file "../../../mod/ballada.mod"
08618     00 00 00 00 
0861c     78 74 64 20 
08620     2F 20 75 6E 
08624     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
08628     28 63 69 61 
0862c     29 00 00 00 
08630     00 00 0A ED 
08634     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
08638     00 87 2A 2A 
0863c     20 31 38 2E 
08640     30 31 2E 31 
08644     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
08648     2A 2A 00 00 
0864c     00 00 00 00 
08650     09 FE 00 40 
08654     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
08658     00 00 00 00 
0865c     00 00 00 00 
08660     00 00 00 00 
08664     00 00 00 00 
08668     00 00 00 00 
0866c     00 00       | 	byte	$00[22]
0866e     05 07 00 40 
08672     00 00 00 01 
08676     00 00 00 00 
0867a     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0867e     00 00 00 00 
08682     00 00 00 00 
08686     00 00 00 00 
0868a     00 00       | 	byte	$00[14]
0868c     03 2A 00 40 
08690     02 C5 00 65 
08694     00 00 00 00 
08698     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
0869c     00 00 00 00 
086a0     00 00 00 00 
086a4     00 00 00 00 
086a8     00 00       | 	byte	$00[14]
086aa     0A 01 00 30 
086ae     03 55 06 AC 
086b2     00 00 00 00 
086b6     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
086ba     00 00 00 00 
086be     00 00 00 00 
086c2     00 00 00 00 
086c6     00 00       | 	byte	$00[14]
086c8     09 AA 00 30 
086cc     03 F4 05 B6 
086d0     00 00 00 00 
086d4     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
086d8     00 00 00 00 
086dc     00 00 00 00 
086e0     00 00 00 00 
086e4     00 00       | 	byte	$00[14]
086e6     01 E6 00 40 
086ea     01 97 00 4F 
086ee     00 00 00 00 
086f2     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
086f6     00 00 00 00 
086fa     00 00 00 00 
086fe     00 00 00 00 
08702     00 00 00 00 
08706     00 00 00 00 
0870a     00          | 	byte	$00[21]
0870b     01 00 00 00 
0870f     00 00 00 00 
08713     00 00 00 00 
08717     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0871b     00 00 00 00 
0871f     00 00 00    | 	byte	$00[7]
08722     08 FB 00 40 
08726     01 EA 07 11 
0872a     00 00 00 00 
0872e     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
08732     00 00 00 00 
08736     00 00 00 00 
0873a     00 00 00 00 
0873e     00 00       | 	byte	$00[14]
08740     04 5E 00 40 
08744     00 00 00 01 
08748     00 00 00 00 
0874c     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08750     00 00 00 00 
08754     00 00 00 00 
08758     00 00 00 00 
0875c     00 00       | 	byte	$00[14]
0875e     08 EC 00 40 
08762     03 5C 05 90 
08766     00 00 00 00 
0876a     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
0876e     00 00 00 00 
08772     00 00 00 00 
08776     00 00 00 00 
0877a     00 00 00 00 
0877e     00 00 00 00 
08782     00          | 	byte	$00[21]
08783     01 00 00 00 
08787     00 00 00 00 
0878b     00 00 00 00 
0878f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08793     00 00 00 00 
08797     00 00 00    | 	byte	$00[7]
0879a     07 0E 00 30 
0879e     00 00 00 01 
087a2     00 00 00 00 
087a6     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
087aa     00 00 00 00 
087ae     00 00 00 00 
087b2     00 00 00 00 
087b6     00 00 00 00 
087ba     00 00 00 00 
087be     00          | 	byte	$00[21]
087bf     01 00 00 00 
087c3     00 00 00 00 
087c7     00 00 00 00 
087cb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087cf     00 00 00 00 
087d3     00 00 00 00 
087d7     00 00 00 00 
087db     00 00       | 	byte	$00[14]
087dd     01 00 00 00 
087e1     00 00 00 00 
087e5     00 00 00 00 
087e9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087ed     00 00 00 00 
087f1     00 00 00 00 
087f5     00 00 00 00 
087f9     00 00       | 	byte	$00[14]
087fb     01 00 00 00 
087ff     00 00 00 00 
08803     00 00 00 00 
08807     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0880b     00 00 00 00 
0880f     00 00 00 00 
08813     00 00 00 00 
08817     00 00       | 	byte	$00[14]
08819     01 00 00 00 
0881d     00 00 00 00 
08821     00 00 00 00 
08825     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08829     00 00 00 00 
0882d     00 00 00 00 
08831     00 00 00 00 
08835     00 00       | 	byte	$00[14]
08837     01 00 00 00 
0883b     00 00 00 00 
0883f     00 00 00 00 
08843     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08847     00 00 00 00 
0884b     00 00 00 00 
0884f     00 00 00 00 
08853     00 00       | 	byte	$00[14]
08855     01 00 00 00 
08859     00 00 00 00 
0885d     00 00 00 00 
08861     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08865     00 00 00 00 
08869     00 00 00 00 
0886d     00 00 00 00 
08871     00 00       | 	byte	$00[14]
08873     01 00 00 00 
08877     00 00 00 00 
0887b     00 00 00 00 
0887f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08883     00 00 00 00 
08887     00 00 00 00 
0888b     00 00 00 00 
0888f     00 00       | 	byte	$00[14]
08891     01 00 00 00 
08895     00 00 00 00 
08899     00 00 00 00 
0889d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088a1     00 00 00 00 
088a5     00 00 00 00 
088a9     00 00 00 00 
088ad     00 00       | 	byte	$00[14]
088af     01 00 00 00 
088b3     00 00 00 00 
088b7     00 00 00 00 
088bb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088bf     00 00 00 00 
088c3     00 00 00 00 
088c7     00 00 00 00 
088cb     00 00       | 	byte	$00[14]
088cd     01 00 00 00 
088d1     00 00 00 00 
088d5     00 00 00 00 
088d9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088dd     00 00 00 00 
088e1     00 00 00 00 
088e5     00 00 00 00 
088e9     00 00       | 	byte	$00[14]
088eb     01 00 00 00 
088ef     00 00 00 00 
088f3     00 00 00 00 
088f7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088fb     00 00 00 00 
088ff     00 00 00 00 
08903     00 00 00 00 
08907     00 00       | 	byte	$00[14]
08909     01 00 00 00 
0890d     00 00 00 00 
08911     00 00 00 00 
08915     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08919     00 00 00 00 
0891d     00 00 00 00 
08921     00 00 00 00 
08925     00 00       | 	byte	$00[14]
08927     01 00 00 00 
0892b     00 00 00 00 
0892f     00 00 00 00 
08933     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08937     00 00 00 00 
0893b     00 00 00 00 
0893f     00 00 00 00 
08943     00 00       | 	byte	$00[14]
08945     01 00 00 00 
08949     00 00 00 00 
0894d     00 00 00 00 
08951     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08955     00 00 00 00 
08959     00 00 00 00 
0895d     00 00 00 00 
08961     00 00       | 	byte	$00[14]
08963     01 00 00 00 
08967     00 00 00 00 
0896b     00 00 00 00 
0896f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08973     00 00 00 00 
08977     00 00 00 00 
0897b     00 00 00 00 
0897f     00 00       | 	byte	$00[14]
08981     01 00 00 00 
08985     00 00 00 00 
08989     00 00 00 00 
0898d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08991     00 00 00 00 
08995     00 00 00 00 
08999     00 00 00 00 
0899d     00 00       | 	byte	$00[14]
0899f     01 00 00 00 
089a3     00 00 00 00 
089a7     00 00 00 00 
089ab     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089af     00 00 00 00 
089b3     00 00 00 00 
089b7     00 00 00 00 
089bb     00 00       | 	byte	$00[14]
089bd     01 19 7F 00 
089c1     01 02 04 03 
089c5     05 06 07 03 
089c9     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
089cd     0C 0D 0E 0F 
089d1     0C 0D 10 11 
089d5     12 14 12 13 
089d9     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
089dd     00 00 00 00 
      ...             
08a39     00 00 00 00 
08a3d     00 00 00    | 	byte	$00[99]
08a40     4D 2E 4B 2E 
08a44     01 7D 1C 10 
08a48     00 00 0F 05 
08a4c     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
08a50     00 00 0C 00 
08a54     00 00 00 00 
08a58     00 00 0C 00 
08a5c     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
08a60     00 00 00 00 
      ...             
08a88     00 00 00 00 
08a8c     00 00 00 00 | 	byte	$00[48]
08a90     01 7D 1C 10 
08a94     01 53 1C 18 
08a98     00 00 00 00 
08a9c     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
08aa0     00 00 00 00 
08aa4     00 00       | 	byte	$00[6]
08aa6     0C 10 00 00 
08aaa     00 00 00 00 
08aae     00 00 01 40 
08ab2     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
08ab6     00 00 00 00 
08aba     00 00 00 00 
08abe     00 00 00 00 
08ac2     00 00 00    | 	byte	$00[15]
08ac5     FE 1C 30 00 
08ac9     00 00 00 00 
08acd     00 00 00 00 
08ad1     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
08ad5     00 00 00 00 
08ad9     00 00 00 00 
08add     00 00 00 00 
08ae1     00 00 00 00 
08ae5     00          | 	byte	$00[17]
08ae6     0C 20 00 00 
08aea     00 00 00 00 
08aee     00 00 01 1D 
08af2     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
08af6     00 00 00 00 
08afa     00 00 00 00 
08afe     00 00 00 00 
08b02     00 00 00    | 	byte	$00[15]
08b05     BE 10 00 00 
08b09     00 00 00 00 
08b0d     00 00 00 01 
08b11     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
08b15     00 00 00 00 
08b19     00 00 00 00 
08b1d     00 00 00 00 
08b21     00 00 00 00 | 	byte	$00[16]
08b25     BE 1A 06 00 
08b29     00 00 00 00 
08b2d     00 00 00 00 
08b31     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b35     A0 0E 93 00 
08b39     00 00 00 00 
08b3d     00 00 00 00 
08b41     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b45     7F 10 00 00 
08b49     00 00 00 00 
08b4d     00 00 00 00 
08b51     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b55     00 00 00 00 
08b59     00 00 00 00 
08b5d     00 00 00 00 | 	byte	$00[12]
08b61     BE 1C 20 00 
08b65     8F 10 00 00 
08b69     00 00 00 00 
08b6d     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08b71     AC 1C 30 00 
08b75     00 00 00 00 
08b79     00 00 00 00 
08b7d     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b81     00 00 00 00 
08b85     A0 0E 93 00 
08b89     00 00 00 00 
08b8d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b91     00 00 00 00 
08b95     A0 10 00 00 
08b99     00 00 00 00 
08b9d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ba1     00 00 00 00 
08ba5     AA 10 00 00 
08ba9     00 00 00 00 
08bad     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bb1     00 00 00 00 
08bb5     00          | 	byte	$00[5]
08bb6     0A 06 00 00 
08bba     00 00 00 00 
08bbe     00 00 00 00 
08bc2     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08bc6     10 00 00 00 
08bca     00 00 00 00 
08bce     00 00 01 7D 
08bd2     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08bd6     00 00 00 00 
08bda     00 00 00 00 
08bde     00 00 00 00 
08be2     00 00 00    | 	byte	$00[15]
08be5     FE 10 00 00 
08be9     00 00 00 00 
08bed     00 00 00 00 
08bf1     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf5     00 00 00 00 
08bf9     00 00 00 00 
08bfd     00 00 00 00 
08c01     00 00 00 00 
08c05     00 00 00 00 
08c09     00 00 00 00 
08c0d     00 00 00 00 | 	byte	$00[28]
08c11     BE 10 00 00 
08c15     FE 1C 20 00 
08c19     00 00 00 00 
08c1d     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c21     00 00 00 00 
08c25     AA 10 00 00 
08c29     00 00 00 00 
08c2d     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c31     AC 10 00 00 
08c35     00 00 00 00 
08c39     00 00 00 00 
08c3d     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c41     00 00 00 00 
08c45     D6 10 00 00 
08c49     00 00 00 00 
08c4d     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c51     00 00 00 00 
      ...             
08c69     00 00 00 00 
08c6d     00 00 00 00 | 	byte	$00[32]
08c71     AA 10 00 00 
08c75     00 00 00 00 
08c79     00 00 00 00 
08c7d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c81     00 00 00 00 
08c85     A0 10 00 00 
08c89     00 00 00 00 
08c8d     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c91     E0 1C 30 00 
08c95     00 00 00 00 
08c99     00 00 00 00 
08c9d     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ca1     00 00 00 00 
08ca5     AA 10 00 00 
08ca9     00 00 00 00 
08cad     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cb1     00 00 00 00 
08cb5     00 00 00 00 
08cb9     00 00 00 00 
08cbd     00 00 00 00 | 	byte	$00[16]
08cc1     BE 10 00 00 
08cc5     AA 10 00 00 
08cc9     00 00 00 00 
08ccd     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08cd1     AC 10 00 00 
08cd5     00 00 00 00 
08cd9     00 00 00 00 
08cdd     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ce1     00 00 00 00 
08ce5     BE 14 C1 00 
08ce9     00 00 00 00 
08ced     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
08cf1     7D 10 00 00 
08cf5     00 06 02 00 
08cf9     00 00 00 00 
08cfd     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d01     00 0A 02 00 
08d05     00 06 02 00 
08d09     00 00 00 00 
08d0d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d11     00 0A 02 00 
08d15     00 06 02 00 
08d19     00 00 00 00 
08d1d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d21     00 0A 02 00 
08d25     A0 10 00 00 
08d29     00 00 00 00 
08d2d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d31     00 0A 02 00 
08d35     8F 1D 01 00 
08d39     00 00 00 00 
08d3d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d41     00 0A 02 00 
08d45     00 00 00 00 
08d49     00 00 00 00 
08d4d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d51     00 00 00 00 
      ...             
08e41     00 00 00 00 
08e45     00          | 	byte	$00[245]
08e46     0B 01 00 00 
08e4a     00 00 00 00 
08e4e     00 00 00 00 
08e52     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08e56     1F 05 00 BE 
08e5a     2A 02 00 00 
08e5e     00 00 01 7D 
08e62     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08e66     00 00 00 00 
08e6a     0A 02 00 00 
08e6e     00 00 00 00 
08e72     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08e76     10 00 00 00 
08e7a     0A 02 00 00 
08e7e     00 00 00 00 
08e82     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08e86     1C 20 00 00 
08e8a     0A 02 00 00 
08e8e     00 00 00 00 
08e92     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08e96     10 00 00 BE 
08e9a     0A 02 00 00 
08e9e     00 00 00 00 
08ea2     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08ea6     00 00 00 00 
08eaa     0A 02 00 00 
08eae     00 00 00 00 
08eb2     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
08eb6     40 00 00 F0 
08eba     2A 02 00 00 
08ebe     00 00 01 E0 
08ec2     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
08ec6     00 00 00 00 
08eca     0A 02 00 00 
08ece     00 00 00 00 
08ed2     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
08ed6     4A 06 00 00 
08eda     0A 02 00 00 
08ede     00 00 00 00 
08ee2     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08ee6     0E 93 00 00 
08eea     0A 02 00 00 
08eee     00 00 00 00 
08ef2     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08ef6     40 00 00 00 
08efa     0A 02 00 00 
08efe     00 00 00 00 
08f02     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08f06     00 00 00 00 
08f0a     0A 02 00 00 
08f0e     00 00 00 F0 
08f12     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
08f16     10 00 00 BE 
08f1a     2A 02 00 00 
08f1e     00 00 01 7D 
08f22     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08f26     00 00 00 00 
08f2a     0A 02 00 00 
08f2e     00 00 00 00 
08f32     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08f36     10 00 00 00 
08f3a     0A 02 00 00 
08f3e     00 00 00 00 
08f42     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08f46     1C 20 00 00 
08f4a     0A 02 00 00 
08f4e     00 00 00 00 
08f52     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08f56     10 00 00 BE 
08f5a     00 00 00 00 
08f5e     00 00 01 7D 
08f62     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
08f66     1C 30 00 BE 
08f6a     0E 93 00 00 
08f6e     00 00 00 00 
08f72     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08f76     10 00 00 D6 
08f7a     2A 02 00 00 
08f7e     00 00 01 AC 
08f82     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
08f86     1C 30 00 00 
08f8a     0A 02 00 00 
08f8e     00 00 00 00 
08f92     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
08f96     10 00 00 00 
08f9a     0A 02 00 00 
08f9e     00 00 00 00 
08fa2     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08fa6     10 00 00 D6 
08faa     2C 20 00 00 
08fae     00 00 00 00 
08fb2     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
08fb6     10 00 00 D6 
08fba     2A 04 00 00 
08fbe     00 00 00 00 
08fc2     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08fc6     00 00 00 00 
08fca     0A 04 00 00 
08fce     00 00 00 00 
08fd2     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
08fd6     10 00 00 F0 
08fda     2A 02 00 00 
08fde     00 00 01 E0 
08fe2     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
08fe6     0C 20 00 00 
08fea     0A 02 00 00 
08fee     00 00 00 00 
08ff2     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08ff6     0E 93 00 00 
08ffa     0A 02 00 00 
08ffe     00 00 00 00 
09002     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09006     1C 20 00 00 
0900a     0A 02 00 00 
0900e     00 00 00 F0 
09012     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
09016     10 00 00 F0 
0901a     2A 02 00 00 
0901e     00 00 00 00 
09022     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09026     00 00 00 00 
0902a     0A 02 00 00 
0902e     00 00 00 00 
09032     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09036     10 00 00 D6 
0903a     2A 01 00 00 
0903e     00 00 01 AC 
09042     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
09046     0C 20 00 00 
0904a     0A 01 00 00 
0904e     00 00 00 00 
09052     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09056     0E 93 00 00 
0905a     0A 01 00 00 
0905e     00 00 00 00 
09062     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09066     10 00 00 00 
0906a     0A 01 00 00 
0906e     00 00 00 00 
09072     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09076     10 00 00 00 
0907a     0A 01 00 00 
0907e     00 00 01 AC 
09082     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
09086     1C 20 00 00 
0908a     0A 01 00 00 
0908e     00 00 00 00 
09092     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09096     10 00 00 BE 
0909a     2A 01 00 00 
0909e     00 00 01 7D 
090a2     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
090a6     00 00 00 00 
090aa     0A 01 00 00 
090ae     00 00 00 00 
090b2     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
090b6     10 00 01 7D 
090ba     2A 01 00 00 
090be     00 00 00 00 
090c2     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090c6     00 00 00 D6 
090ca     2C 38 00 00 
090ce     00 00 01 AC 
090d2     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
090d6     10 00 00 00 
090da     0A 06 00 00 
090de     00 00 00 00 
090e2     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090e6     00 00 00 D6 
090ea     0E 93 00 00 
090ee     00 00 00 00 
090f2     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
090f6     10 00 00 BE 
090fa     2C 30 00 00 
090fe     00 00 01 7D 
09102     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
09106     00 00 00 00 
0910a     0A 02 00 00 
0910e     00 00 00 00 
09112     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09116     00 00 00 00 
0911a     0A 02 00 00 
0911e     00 00 00 00 
09122     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09126     00 00 00 00 
0912a     0A 02 00 00 
0912e     00 00 00 00 
09132     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09136     10 00 00 00 
0913a     0A 02 00 00 
0913e     00 00 00 00 
09142     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
09146     1D 00 00 00 
0914a     0A 02 00 00 
0914e     00 00 00 00 
09152     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09156     00 00 00 00 
      ...             
0923e     00 00 00 00 
09242     00 00 00    | 	byte	$00[239]
09245     7F 1F 05 00 
09249     BE 2A 02 00 
0924d     00 00 00 01 
09251     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
09255     00 00 00 00 
09259     00          | 	byte	$00[5]
0925a     0A 02 00 00 
0925e     00 00 00 00 
09262     00 00 00 A0 
09266     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0926a     0A 02 00 00 
0926e     00 00 00 00 
09272     00 00 00 7F 
09276     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0927a     0A 02 00 00 
0927e     00 00 00 00 
09282     00 00 00 BE 
09286     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0928a     0A 02 00 00 
0928e     00 00 00 00 
09292     0A 02 00 00 
09296     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0929a     0A 02 00 00 
0929e     00 00 00 00 
092a2     0A 02 00 F0 
092a6     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
092aa     2A 02 00 00 
092ae     00 00 01 E0 
092b2     10 00 00 00 
092b6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
092ba     0A 02 00 00 
092be     00 00 00 00 
092c2     00 00 00 D6 
092c6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
092ca     0A 02 00 00 
092ce     00 00 00 00 
092d2     00 00 00 F0 
092d6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
092da     0A 02 00 00 
092de     00 00 00 00 
092e2     00 00 00 F0 
092e6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
092ea     0A 02 00 00 
092ee     00 00 00 00 
092f2     0A 02 00 00 
092f6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
092fa     0A 02 00 00 
092fe     00 00 00 F0 
09302     1A 02 00 7F 
09306     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0930a     2A 02 00 00 
0930e     00 00 01 7D 
09312     10 00 00 00 
09316     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0931a     0A 02 00 00 
0931e     00 00 00 00 
09322     00 00 00 A0 
09326     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0932a     0A 02 00 00 
0932e     00 00 00 00 
09332     00 00 00 7F 
09336     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0933a     0A 02 00 00 
0933e     00 00 00 00 
09342     00 00 00 BE 
09346     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0934a     00 00 00 00 
0934e     00 00       | 	byte	$00[6]
09350     01 7D 10 00 
09354     00 AA 1C 30 
09358     00 BE 0E 93 
0935c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09360     00 00 00 00 
09364     00          | 	byte	$00[5]
09365     A0 10 00 00 
09369     D6 2A 02 00 
0936d     00 00 00 01 
09371     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
09375     A0 1C 30 00 
09379     00 0A 02 00 
0937d     00 00 00 00 
09381     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09385     AA 10 00 00 
09389     00 0A 02 00 
0938d     00 00 00 00 
09391     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09395     BE 10 00 00 
09399     D6 2C 20 00 
0939d     00 00 00 00 
093a1     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
093a5     AA 10 00 00 
093a9     D6 2A 04 00 
093ad     00 00 00 00 
093b1     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
093b5     00 00 00 00 
093b9     00          | 	byte	$00[5]
093ba     0A 04 00 00 
093be     00 00 00 00 
093c2     0A 02 00 A0 
093c6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
093ca     2A 02 00 00 
093ce     00 00 01 E0 
093d2     10 00 00 00 
093d6     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
093da     0A 02 00 00 
093de     00 00 00 00 
093e2     00 00 00 A0 
093e6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
093ea     0A 02 00 00 
093ee     00 00 00 00 
093f2     00 00 00 A0 
093f6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
093fa     0A 02 00 00 
093fe     00 00 00 F0 
09402     10 00 00 A0 
09406     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0940a     2A 02 00 00 
0940e     00 00 00 00 
09412     00 00 00 00 
09416     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0941a     0A 02 00 00 
0941e     00 00 00 00 
09422     00 00 00 8F 
09426     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0942a     2A 01 00 00 
0942e     00 00 01 AC 
09432     10 00 00 00 
09436     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0943a     0A 01 00 00 
0943e     00 00 00 00 
09442     00 00 00 8F 
09446     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0944a     0A 01 00 00 
0944e     00 00 00 00 
09452     00 00 00 A0 
09456     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0945a     0A 01 00 00 
0945e     00 00 00 00 
09462     00 00 00 8F 
09466     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0946a     0A 01 00 00 
0946e     00 00 01 AC 
09472     10 00 00 00 
09476     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0947a     0A 01 00 00 
0947e     00 00 00 00 
09482     00 00 00 BE 
09486     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0948a     2A 01 00 00 
0948e     00 00 01 7D 
09492     10 00 00 00 
09496     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0949a     0A 01 00 00 
0949e     00 00 00 00 
094a2     00 00 00 A0 
094a6     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
094aa     2A 01 00 00 
094ae     00 00 00 00 
094b2     00 00 00 00 
094b6     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
094ba     2C 38 00 00 
094be     00 00 01 AC 
094c2     10 00 00 AA 
094c6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
094ca     0A 06 00 00 
094ce     00 00 00 00 
094d2     00 00 00 00 
094d6     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
094da     0E 93 00 00 
094de     00 00 00 00 
094e2     00 00 00 BE 
094e6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
094ea     2C 30 01 7D 
094ee     2A 02 01 7D 
094f2     10 00 00 00 
094f6     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
094fa     0A 02 00 00 
094fe     0A 02 00 00 
09502     00 00 00 00 
09506     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0950a     0A 02 00 00 
0950e     0A 02 00 00 
09512     00 00 00 BE 
09516     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
0951a     0A 02 00 00 
0951e     0A 02 00 00 
09522     00 00 00 A0 
09526     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0952a     0A 02 00 00 
0952e     0A 02 00 00 
09532     00 00 00 8F 
09536     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0953a     0A 02 00 00 
0953e     0A 02 00 00 
09542     0D 00 00 00 
09546     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0954a     00 00 00 00 
      ...             
0963e     00 00 00 00 
09642     00 00 00    | 	byte	$00[251]
09645     7F 1F 05 00 
09649     BE 2A 02 00 
0964d     CA 50 00 01 
09651     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
09655     7F 1C 30 00 
09659     00 0A 02 00 
0965d     00 00 00 00 
09661     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09665     A0 10 00 00 
09669     00 0A 02 00 
0966d     00 00 00 00 
09671     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09675     7F 1C 30 00 
09679     00 0A 02 00 
0967d     00 00 00 00 
09681     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09685     BE 10 00 00 
09689     BE 0A 02 00 
0968d     00 00 00 00 
09691     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09695     A0 1C 30 00 
09699     00 0A 02 00 
0969d     00 00 00 00 
096a1     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
096a5     F0 40 00 00 
096a9     F0 2A 02 00 
096ad     FE 60 00 01 
096b1     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
096b5     00 00 00 00 
096b9     00          | 	byte	$00[5]
096ba     0A 02 00 00 
096be     00 00 00 00 
096c2     00 00 00 D6 
096c6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
096ca     0A 02 00 00 
096ce     00 00 00 00 
096d2     00 00 00 D6 
096d6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
096da     0A 02 00 00 
096de     00 00 00 00 
096e2     00 00 00 F0 
096e6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
096ea     0A 02 00 00 
096ee     00 00 00 00 
096f2     0A 02 00 00 
096f6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
096fa     0A 02 00 00 
096fe     00 00 00 F0 
09702     1A 02 00 7F 
09706     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0970a     2A 02 00 CA 
0970e     50 00 01 7D 
09712     10 00 00 00 
09716     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0971a     0A 02 00 00 
0971e     00 00 00 00 
09722     00 00 00 A0 
09726     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0972a     0A 02 00 00 
0972e     00 00 00 00 
09732     00 00 00 7F 
09736     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0973a     0A 02 00 00 
0973e     00 00 00 00 
09742     00 00 00 BE 
09746     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0974a     00 00 00 00 
0974e     00 00       | 	byte	$00[6]
09750     01 7D 10 00 
09754     00 AA 1C 30 
09758     00 BE 0E 93 
0975c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09760     00 00 00 00 
09764     00          | 	byte	$00[5]
09765     A0 10 00 00 
09769     D6 2A 02 00 
0976d     E2 60 00 01 
09771     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09775     A0 1C 30 00 
09779     00 0A 02 00 
0977d     00 00 00 00 
09781     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09785     AA 10 00 00 
09789     00 0A 02 00 
0978d     00 00 00 00 
09791     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09795     BE 10 00 00 
09799     D6 2C 20 00 
0979d     00 00 00 00 
097a1     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
097a5     AA 10 00 00 
097a9     D6 2A 04 00 
097ad     00 00 00 00 
097b1     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
097b5     00 00 00 00 
097b9     00          | 	byte	$00[5]
097ba     0A 04 00 00 
097be     00 00 00 00 
097c2     0A 02 00 A0 
097c6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
097ca     2A 02 00 FE 
097ce     60 00 01 E0 
097d2     10 00 00 00 
097d6     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
097da     0A 02 00 00 
097de     00 00 00 00 
097e2     00 00 00 A0 
097e6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
097ea     0A 02 00 00 
097ee     00 00 00 00 
097f2     00 00 00 A0 
097f6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
097fa     0A 02 00 00 
097fe     00 00 00 F0 
09802     10 00 00 A0 
09806     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0980a     2A 02 00 00 
0980e     00 00 00 00 
09812     00 00 00 00 
09816     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0981a     0A 02 00 00 
0981e     00 00 00 00 
09822     00 00 00 AA 
09826     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
0982a     2A 01 00 E2 
0982e     60 00 01 AC 
09832     10 00 00 00 
09836     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0983a     0A 01 00 00 
0983e     00 00 00 00 
09842     00 00 00 AA 
09846     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0984a     0A 01 00 00 
0984e     00 00 00 00 
09852     00 00 00 BE 
09856     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0985a     0A 01 00 00 
0985e     00 00 00 00 
09862     00 00 00 AA 
09866     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0986a     0A 01 00 00 
0986e     00 00 01 AC 
09872     10 00 00 00 
09876     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0987a     0A 01 00 00 
0987e     00 00 00 00 
09882     00 00 00 BE 
09886     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0988a     2A 01 00 CA 
0988e     50 00 01 7D 
09892     10 00 00 00 
09896     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0989a     0A 01 00 00 
0989e     00 00 00 00 
098a2     00 00 00 A0 
098a6     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
098aa     2A 01 00 00 
098ae     00 00 00 00 
098b2     00 00 00 00 
098b6     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
098ba     2C 38 00 00 
098be     00 00 01 AC 
098c2     10 00 00 AA 
098c6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
098ca     0A 06 00 00 
098ce     00 00 00 00 
098d2     00 00 00 AA 
098d6     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
098da     0E 93 00 00 
098de     00 00 00 00 
098e2     00 00 00 BE 
098e6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
098ea     2C 30 00 00 
098ee     00 00 01 7D 
098f2     10 00 00 00 
098f6     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
098fa     0A 02 00 00 
098fe     00 00 00 00 
09902     00 00 00 00 
09906     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0990a     0A 02 00 00 
0990e     00 00 00 00 
09912     00 00 00 00 
09916     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0991a     0A 02 00 00 
0991e     00 00 00 00 
09922     00 00 00 00 
09926     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0992a     0A 02 00 00 
0992e     00 00 00 00 
09932     00 00 00 00 
09936     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0993a     0A 02 00 00 
0993e     00 00 00 00 
09942     0D 00 00 00 
09946     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0994a     00 00 00 00 
      ...             
09a3e     00 00 00 00 
09a42     00 00 00    | 	byte	$00[251]
09a45     7F 1F 05 00 
09a49     BE 2A 02 00 
09a4d     CA 5C 10 01 
09a51     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
09a55     00 00 00 00 
09a59     00          | 	byte	$00[5]
09a5a     0A 02 00 00 
09a5e     0A 10 00 00 
09a62     00 00 00 A0 
09a66     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09a6a     0A 02 00 00 
09a6e     0A 10 00 00 
09a72     00 00 00 7F 
09a76     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09a7a     0A 02 00 00 
09a7e     0A 10 00 00 
09a82     00 00 00 BE 
09a86     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09a8a     0A 02 00 00 
09a8e     0A 10 00 00 
09a92     0A 02 00 00 
09a96     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09a9a     0A 02 00 00 
09a9e     0A 10 00 00 
09aa2     0A 02 00 F0 
09aa6     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09aaa     2A 02 00 FE 
09aae     6C 20 01 E0 
09ab2     10 00 00 00 
09ab6     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09aba     0A 02 00 00 
09abe     0A 10 00 00 
09ac2     00 00 00 D6 
09ac6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09aca     0A 02 00 00 
09ace     0A 10 00 00 
09ad2     00 00 00 F0 
09ad6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09ada     0A 02 00 00 
09ade     0A 10 00 00 
09ae2     00 00 00 F0 
09ae6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09aea     0A 02 00 00 
09aee     0A 10 00 00 
09af2     0A 02 00 00 
09af6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09afa     0A 02 00 00 
09afe     0A 10 00 F0 
09b02     1A 02 00 7F 
09b06     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
09b0a     2A 02 00 CA 
09b0e     50 00 01 7D 
09b12     10 00 00 00 
09b16     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09b1a     0A 02 00 00 
09b1e     00 00 00 00 
09b22     00 00 00 A0 
09b26     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09b2a     0A 02 00 00 
09b2e     00 00 00 00 
09b32     00 00 00 7F 
09b36     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09b3a     0A 02 00 00 
09b3e     00 00 00 00 
09b42     00 00 00 BE 
09b46     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09b4a     00 00 00 00 
09b4e     00 00       | 	byte	$00[6]
09b50     01 7D 10 00 
09b54     00 AA 1C 30 
09b58     00 BE 0E 93 
09b5c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09b60     00 00 00 00 
09b64     00          | 	byte	$00[5]
09b65     A0 10 00 00 
09b69     D6 2A 02 00 
09b6d     E2 60 00 01 
09b71     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09b75     A0 1C 30 00 
09b79     00 0A 02 00 
09b7d     00 00 00 00 
09b81     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b85     AA 10 00 00 
09b89     00 0A 02 00 
09b8d     00 00 00 00 
09b91     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b95     BE 10 00 00 
09b99     D6 2C 20 00 
09b9d     00 00 00 00 
09ba1     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ba5     AA 10 00 00 
09ba9     D6 2A 04 00 
09bad     00 00 00 00 
09bb1     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09bb5     00 00 00 00 
09bb9     00          | 	byte	$00[5]
09bba     0A 04 00 00 
09bbe     00 00 00 00 
09bc2     0A 02 00 A0 
09bc6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09bca     2A 02 00 FE 
09bce     60 00 01 E0 
09bd2     10 00 00 00 
09bd6     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09bda     0A 02 00 00 
09bde     00 00 00 00 
09be2     00 00 00 A0 
09be6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09bea     0A 02 00 00 
09bee     00 00 00 00 
09bf2     00 00 00 A0 
09bf6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09bfa     0A 02 00 00 
09bfe     00 00 00 F0 
09c02     10 00 00 A0 
09c06     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
09c0a     2A 02 00 00 
09c0e     00 00 00 00 
09c12     00 00 00 00 
09c16     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c1a     0A 02 00 00 
09c1e     00 00 00 00 
09c22     00 00 00 8F 
09c26     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
09c2a     2A 01 00 E2 
09c2e     60 00 01 AC 
09c32     10 00 00 00 
09c36     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
09c3a     0A 01 00 00 
09c3e     00 00 00 00 
09c42     00 00 00 8F 
09c46     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
09c4a     0A 01 00 00 
09c4e     00 00 00 00 
09c52     00 00 00 A0 
09c56     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09c5a     0A 01 00 00 
09c5e     00 00 00 00 
09c62     00 00 00 8F 
09c66     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09c6a     0A 01 00 00 
09c6e     00 00 01 AC 
09c72     10 00 00 00 
09c76     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09c7a     0A 01 00 00 
09c7e     00 00 00 00 
09c82     00 00 00 BE 
09c86     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09c8a     2A 01 00 CA 
09c8e     50 00 01 7D 
09c92     10 00 00 00 
09c96     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09c9a     0A 01 00 00 
09c9e     00 00 00 00 
09ca2     00 00 00 A0 
09ca6     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09caa     2A 01 00 00 
09cae     00 00 00 00 
09cb2     00 00 00 00 
09cb6     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09cba     2C 38 00 00 
09cbe     00 00 01 AC 
09cc2     10 00 00 8F 
09cc6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
09cca     0A 06 00 00 
09cce     00 00 00 00 
09cd2     00 00 00 00 
09cd6     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09cda     0E 93 00 00 
09cde     00 00 00 00 
09ce2     00 00 00 7F 
09ce6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
09cea     2C 30 00 00 
09cee     00 00 01 7D 
09cf2     10 00 00 00 
09cf6     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09cfa     0A 02 00 00 
09cfe     00 00 00 00 
09d02     00 00 00 00 
09d06     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d0a     0A 02 00 00 
09d0e     00 00 00 00 
09d12     00 00 00 00 
09d16     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d1a     0A 02 00 00 
09d1e     00 00 00 00 
09d22     00 00 00 A0 
09d26     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09d2a     0A 02 00 00 
09d2e     00 00 00 00 
09d32     00 00 00 8F 
09d36     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
09d3a     0A 02 00 00 
09d3e     00 00 00 00 
09d42     0D 00 00 00 
09d46     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
09d4a     00 00 00 00 
      ...             
09e3e     00 00 00 00 
09e42     00 00 00    | 	byte	$00[251]
09e45     7F 1F 05 00 
09e49     BE 2A 02 00 
09e4d     CA 50 00 01 
09e51     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
09e55     00 0A 06 00 
09e59     00 0A 02 00 
09e5d     00 00 00 00 
09e61     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e65     7F 0E 93 00 
09e69     00 0A 02 00 
09e6d     00 00 00 00 
09e71     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e75     8F 1C 30 00 
09e79     00 0A 02 00 
09e7d     00 00 00 00 
09e81     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e85     BE 10 00 00 
09e89     BE 2A 02 00 
09e8d     00 00 00 00 
09e91     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e95     00 00 00 00 
09e99     00          | 	byte	$00[5]
09e9a     0A 02 00 00 
09e9e     00 00 00 00 
09ea2     00 00 00 7F 
09ea6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
09eaa     0A 02 00 00 
09eae     00 00 01 40 
09eb2     10 00 00 00 
09eb6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
09eba     0A 02 00 00 
09ebe     00 00 00 00 
09ec2     00 00 00 F0 
09ec6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
09eca     2A 02 00 00 
09ece     00 00 00 00 
09ed2     00 00 00 F0 
09ed6     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
09eda     2C 20 00 00 
09ede     00 00 01 40 
09ee2     1A 08 00 FE 
09ee6     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
09eea     2A 02 00 00 
09eee     00 00 01 40 
09ef2     10 00 00 FE 
09ef6     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
09efa     0A 02 00 00 
09efe     00 00 01 1D 
09f02     1C 20 00 8F 
09f06     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
09f0a     2A 02 00 E2 
09f0e     60 00 01 1D 
09f12     10 00 00 8F 
09f16     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
09f1a     0A 02 00 00 
09f1e     00 00 00 00 
09f22     0A 06 00 A0 
09f26     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
09f2a     0A 02 00 00 
09f2e     00 00 01 1D 
09f32     0E 93 00 8F 
09f36     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
09f3a     0A 02 00 00 
09f3e     00 00 01 1D 
09f42     10 00 00 AA 
09f46     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
09f4a     2A 08 00 00 
09f4e     00 00 01 40 
09f52     1A 08 00 A0 
09f56     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
09f5a     2C 30 00 00 
09f5e     00 00 00 00 
09f62     0A 08 00 BE 
09f66     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
09f6a     2A 02 00 CA 
09f6e     50 00 01 7D 
09f72     10 00 00 BE 
09f76     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
09f7a     0A 02 00 00 
09f7e     00 00 00 00 
09f82     00 00 00 A0 
09f86     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
09f8a     0A 02 00 00 
09f8e     00 00 00 00 
09f92     00 00 00 A0 
09f96     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09f9a     0A 02 00 00 
09f9e     00 00 00 00 
09fa2     00 00 00 8F 
09fa6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09faa     0A 02 00 00 
09fae     00 00 00 00 
09fb2     00 00 00 A0 
09fb6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09fba     0A 02 00 00 
09fbe     00 00 00 00 
09fc2     00 00 00 7F 
09fc6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
09fca     2A 02 00 00 
09fce     00 00 01 7D 
09fd2     10 00 00 7F 
09fd6     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
09fda     0A 02 00 00 
09fde     00 00 00 00 
09fe2     00 00 00 8F 
09fe6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09fea     0A 02 00 00 
09fee     00 00 00 00 
09ff2     00 00 00 8F 
09ff6     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
09ffa     0A 02 00 00 
09ffe     00 00 00 00 
0a002     00 00 00 A0 
0a006     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a00a     2A 02 00 00 
0a00e     00 00 00 00 
0a012     00 00 00 A0 
0a016     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a01a     0A 02 00 00 
0a01e     00 00 00 00 
0a022     00 00 00 F0 
0a026     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
0a02a     2A 02 00 FE 
0a02e     60 00 01 E0 
0a032     10 00 00 F0 
0a036     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0a03a     0A 02 00 00 
0a03e     00 00 00 00 
0a042     00 00 00 7F 
0a046     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a04a     0A 02 00 00 
0a04e     00 00 00 00 
0a052     00 00 00 7F 
0a056     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0a05a     0A 02 00 00 
0a05e     00 00 00 00 
0a062     00 00 00 8F 
0a066     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
0a06a     2A 02 00 00 
0a06e     00 00 00 00 
0a072     00 00 00 7F 
0a076     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0a07a     0A 02 00 00 
0a07e     00 00 00 00 
0a082     00 00 00 7F 
0a086     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
0a08a     2A 02 00 CA 
0a08e     50 00 01 7D 
0a092     10 00 00 00 
0a096     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
0a09a     0A 02 00 00 
0a09e     00 00 00 00 
0a0a2     00 00 00 00 
0a0a6     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
0a0aa     0A 02 00 00 
0a0ae     00 00 01 40 
0a0b2     10 00 00 00 
0a0b6     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
0a0ba     0A 02 00 00 
0a0be     00 00 00 00 
0a0c2     00 00 00 00 
0a0c6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0ca     0A 02 00 00 
0a0ce     00 00 01 53 
0a0d2     19 02 00 00 
0a0d6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
0a0da     0A 02 00 00 
0a0de     00 00 00 00 
0a0e2     00 00 00 7F 
0a0e6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a0ea     2A 02 00 00 
0a0ee     00 00 01 7D 
0a0f2     10 00 00 00 
0a0f6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a0fa     0A 02 00 00 
0a0fe     00 00 00 00 
0a102     00 00 00 A0 
0a106     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a10a     0A 02 00 00 
0a10e     00 00 00 00 
0a112     00 00 00 A0 
0a116     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a11a     0A 02 00 00 
0a11e     00 00 00 00 
0a122     00 00 00 8F 
0a126     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a12a     0A 02 00 00 
0a12e     00 00 00 00 
0a132     00 00 00 A0 
0a136     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a13a     0A 02 00 00 
0a13e     00 00 00 00 
0a142     0D 00 00 00 
0a146     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a14a     00 00 00 00 
      ...             
0a23e     00 00 00 00 
0a242     00 00 00    | 	byte	$00[251]
0a245     7F 1F 05 00 
0a249     BE 2A 02 00 
0a24d     CA 50 00 01 
0a251     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a255     00 0A 06 00 
0a259     00 0A 02 00 
0a25d     00 00 00 00 
0a261     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a265     7F 0E 93 00 
0a269     00 0A 02 00 
0a26d     00 00 00 00 
0a271     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a275     8F 1C 30 00 
0a279     00 0A 02 00 
0a27d     00 00 00 00 
0a281     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a285     BE 10 00 00 
0a289     BE 2A 02 00 
0a28d     00 00 00 00 
0a291     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a295     00 00 00 00 
0a299     00          | 	byte	$00[5]
0a29a     0A 02 00 00 
0a29e     00 00 00 00 
0a2a2     00 00 00 7F 
0a2a6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a2aa     0A 02 00 00 
0a2ae     00 00 01 40 
0a2b2     10 00 00 00 
0a2b6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0a2ba     0A 02 00 00 
0a2be     00 00 00 00 
0a2c2     00 00 00 F0 
0a2c6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
0a2ca     2A 02 00 00 
0a2ce     00 00 00 00 
0a2d2     00 00 00 F0 
0a2d6     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
0a2da     2C 20 00 00 
0a2de     00 00 01 40 
0a2e2     1A 08 00 FE 
0a2e6     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
0a2ea     2A 02 00 00 
0a2ee     00 00 01 40 
0a2f2     10 00 00 FE 
0a2f6     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0a2fa     0A 02 00 00 
0a2fe     00 00 01 1D 
0a302     1C 20 00 8F 
0a306     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
0a30a     2A 02 00 E2 
0a30e     60 00 01 1D 
0a312     10 00 00 8F 
0a316     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0a31a     0A 02 00 00 
0a31e     00 00 00 00 
0a322     0A 06 00 A0 
0a326     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0a32a     0A 02 00 00 
0a32e     00 00 01 1D 
0a332     0E 93 00 8F 
0a336     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
0a33a     0A 02 00 00 
0a33e     00 00 01 1D 
0a342     10 00 00 AA 
0a346     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
0a34a     2A 08 00 00 
0a34e     00 00 01 40 
0a352     1A 08 00 A0 
0a356     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0a35a     2C 30 00 00 
0a35e     00 00 00 00 
0a362     0A 08 00 BE 
0a366     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0a36a     2A 02 00 CA 
0a36e     50 00 01 7D 
0a372     10 00 00 BE 
0a376     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0a37a     0A 02 00 00 
0a37e     00 00 00 00 
0a382     00 00 00 7F 
0a386     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
0a38a     0A 02 00 00 
0a38e     00 00 00 00 
0a392     00 00 00 7F 
0a396     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a39a     0A 02 00 00 
0a39e     00 00 00 00 
0a3a2     00 00 00 8F 
0a3a6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a3aa     0A 02 00 00 
0a3ae     00 00 00 00 
0a3b2     00 00 00 7F 
0a3b6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a3ba     0A 02 00 00 
0a3be     00 00 00 00 
0a3c2     00 00 00 A0 
0a3c6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a3ca     2A 02 00 00 
0a3ce     00 00 01 7D 
0a3d2     10 00 00 A0 
0a3d6     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0a3da     0A 02 00 00 
0a3de     00 00 00 00 
0a3e2     00 00 00 AA 
0a3e6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0a3ea     0A 02 00 00 
0a3ee     00 00 00 00 
0a3f2     00 00 00 AA 
0a3f6     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
0a3fa     0A 02 00 00 
0a3fe     00 00 00 00 
0a402     00 00 00 BE 
0a406     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a40a     2A 02 00 00 
0a40e     00 00 00 00 
0a412     00 00 00 BE 
0a416     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
0a41a     0A 02 00 00 
0a41e     00 00 00 00 
0a422     00 00 00 D6 
0a426     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
0a42a     2A 02 00 E2 
0a42e     60 00 01 AC 
0a432     10 00 00 D6 
0a436     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
0a43a     0A 02 00 00 
0a43e     00 00 00 00 
0a442     00 00 00 FE 
0a446     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
0a44a     0A 02 00 00 
0a44e     00 00 00 00 
0a452     00 00 00 FE 
0a456     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
0a45a     0A 02 00 00 
0a45e     00 00 00 00 
0a462     00 00 00 A0 
0a466     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
0a46a     2A 02 00 00 
0a46e     00 00 01 AC 
0a472     1C 30 00 A0 
0a476     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
0a47a     0A 02 00 00 
0a47e     00 00 00 00 
0a482     00 00 00 BE 
0a486     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a48a     2A 02 00 CA 
0a48e     50 00 01 7D 
0a492     10 00 00 00 
0a496     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a49a     0A 02 00 00 
0a49e     00 00 00 00 
0a4a2     00 00 00 00 
0a4a6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4aa     0A 02 00 00 
0a4ae     00 00 00 00 
0a4b2     00 00 00 00 
0a4b6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4ba     0A 02 00 00 
0a4be     00 00 00 00 
0a4c2     00 00 00 BE 
0a4c6     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
0a4ca     0A 02 00 00 
0a4ce     00 00 01 AC 
0a4d2     19 02 00 00 
0a4d6     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
0a4da     0A 02 00 00 
0a4de     00 00 00 00 
0a4e2     00 00 00 00 
0a4e6     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
0a4ea     2A 02 00 00 
0a4ee     00 00 01 7D 
0a4f2     10 00 00 00 
0a4f6     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
0a4fa     0A 02 00 00 
0a4fe     00 00 00 00 
0a502     00 00 00 00 
0a506     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a50a     0A 02 00 00 
0a50e     00 00 00 00 
0a512     00 00 00 00 
0a516     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a51a     0A 02 00 00 
0a51e     00 00 00 00 
0a522     00 00 00 A0 
0a526     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a52a     0A 02 00 00 
0a52e     00 00 00 00 
0a532     00 00 00 8F 
0a536     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a53a     0A 02 00 00 
0a53e     00 00 00 00 
0a542     0D 00 00 00 
0a546     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a54a     00 00 00 00 
      ...             
0a63e     00 00 00 00 
0a642     00 00 00    | 	byte	$00[251]
0a645     7F 1F 05 00 
0a649     BE 2A 02 00 
0a64d     CA 50 00 01 
0a651     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a655     00 00 00 00 
0a659     00          | 	byte	$00[5]
0a65a     0A 02 00 00 
0a65e     00 00 00 00 
0a662     00 00 00 A0 
0a666     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a66a     0A 02 00 00 
0a66e     00 00 00 00 
0a672     00 00 00 7F 
0a676     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a67a     0A 02 00 00 
0a67e     00 00 00 00 
0a682     00 00 00 BE 
0a686     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a68a     0A 02 00 00 
0a68e     00 00 00 00 
0a692     0A 02 00 00 
0a696     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a69a     0A 02 00 00 
0a69e     00 00 00 00 
0a6a2     0A 02 00 F0 
0a6a6     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0a6aa     2A 02 00 FE 
0a6ae     60 00 01 E0 
0a6b2     10 00 00 00 
0a6b6     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0a6ba     0A 02 00 00 
0a6be     00 00 00 00 
0a6c2     00 00 00 D6 
0a6c6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0a6ca     0A 02 00 00 
0a6ce     00 00 00 00 
0a6d2     00 00 00 F0 
0a6d6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0a6da     0A 02 00 00 
0a6de     00 00 00 00 
0a6e2     00 00 00 F0 
0a6e6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0a6ea     0A 02 00 00 
0a6ee     00 00 00 00 
0a6f2     0A 02 00 00 
0a6f6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a6fa     0A 02 00 00 
0a6fe     00 00 00 F0 
0a702     1A 02 00 7F 
0a706     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0a70a     2A 02 00 CA 
0a70e     50 00 01 7D 
0a712     10 00 00 00 
0a716     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a71a     0A 02 00 00 
0a71e     00 00 00 00 
0a722     00 00 00 A0 
0a726     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a72a     0A 02 00 00 
0a72e     00 00 00 00 
0a732     00 00 00 7F 
0a736     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a73a     0A 02 00 00 
0a73e     00 00 00 00 
0a742     00 00 00 BE 
0a746     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a74a     00 00 00 00 
0a74e     00 00       | 	byte	$00[6]
0a750     01 7D 10 00 
0a754     00 AA 1C 30 
0a758     00 BE 0E 93 
0a75c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0a760     00 00 00 00 
0a764     00          | 	byte	$00[5]
0a765     A0 10 00 00 
0a769     D6 2A 02 00 
0a76d     E2 60 00 01 
0a771     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0a775     A0 1C 30 00 
0a779     00 0A 02 00 
0a77d     00 00 00 00 
0a781     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a785     AA 10 00 00 
0a789     00 0A 02 00 
0a78d     00 00 00 00 
0a791     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a795     BE 10 00 00 
0a799     D6 2C 20 00 
0a79d     00 00 00 00 
0a7a1     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7a5     AA 10 00 00 
0a7a9     D6 2A 04 00 
0a7ad     00 00 00 00 
0a7b1     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a7b5     00 00 00 00 
0a7b9     00          | 	byte	$00[5]
0a7ba     0A 04 00 00 
0a7be     00 00 00 00 
0a7c2     0A 02 00 A0 
0a7c6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0a7ca     2A 02 00 FE 
0a7ce     60 00 01 E0 
0a7d2     10 00 00 00 
0a7d6     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0a7da     0A 02 00 00 
0a7de     00 00 00 00 
0a7e2     00 00 00 A0 
0a7e6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0a7ea     0A 02 00 00 
0a7ee     00 00 00 00 
0a7f2     00 00 00 A0 
0a7f6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a7fa     0A 02 00 00 
0a7fe     00 00 00 F0 
0a802     10 00 00 A0 
0a806     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0a80a     2A 02 00 00 
0a80e     00 00 00 00 
0a812     00 00 00 00 
0a816     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a81a     0A 02 00 00 
0a81e     00 00 00 00 
0a822     00 00 00 8F 
0a826     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0a82a     2A 01 00 E2 
0a82e     60 00 01 AC 
0a832     10 00 00 00 
0a836     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0a83a     0A 01 00 00 
0a83e     00 00 00 00 
0a842     00 00 00 8F 
0a846     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0a84a     0A 01 00 00 
0a84e     00 00 00 00 
0a852     00 00 00 A0 
0a856     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a85a     0A 01 00 00 
0a85e     00 00 00 00 
0a862     00 00 00 8F 
0a866     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a86a     0A 01 00 00 
0a86e     00 00 01 AC 
0a872     10 00 00 00 
0a876     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0a87a     0A 01 00 00 
0a87e     00 00 00 00 
0a882     00 00 00 BE 
0a886     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a88a     2A 01 00 CA 
0a88e     50 00 01 7D 
0a892     10 00 00 00 
0a896     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a89a     0A 01 00 00 
0a89e     00 00 00 00 
0a8a2     00 00 00 A0 
0a8a6     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0a8aa     2A 01 00 00 
0a8ae     00 00 00 00 
0a8b2     00 00 00 00 
0a8b6     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a8ba     2C 38 00 00 
0a8be     00 00 01 AC 
0a8c2     10 00 00 8F 
0a8c6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
0a8ca     0A 06 00 00 
0a8ce     00 00 00 00 
0a8d2     00 00 00 00 
0a8d6     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a8da     0E 93 00 00 
0a8de     00 00 00 00 
0a8e2     00 00 00 7F 
0a8e6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a8ea     2C 30 00 00 
0a8ee     00 00 01 7D 
0a8f2     10 00 00 00 
0a8f6     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a8fa     0A 02 00 00 
0a8fe     00 00 00 00 
0a902     00 00 00 00 
0a906     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a90a     0A 02 00 00 
0a90e     00 00 00 00 
0a912     00 00 00 00 
0a916     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a91a     0A 02 00 00 
0a91e     00 00 00 00 
0a922     00 00 00 A0 
0a926     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a92a     0A 02 00 00 
0a92e     00 00 00 00 
0a932     00 00 00 8F 
0a936     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a93a     0A 02 00 00 
0a93e     00 00 00 00 
0a942     0D 00 00 00 
0a946     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a94a     00 00 00 00 
      ...             
0aa3e     00 00 00 00 
0aa42     00 00 00    | 	byte	$00[251]
0aa45     7F 1F 05 01 
0aa49     1D 71 08 00 
0aa4d     CA 50 00 01 
0aa51     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0aa55     00 0A 06 01 
0aa59     0D 73 F0 00 
0aa5d     00 00 00 00 
0aa61     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa65     7F 0E 93 00 
0aa69     00 04 A1 00 
0aa6d     00 00 00 00 
0aa71     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa75     8F 1C 30 00 
0aa79     00 04 A1 00 
0aa7d     00 00 00 00 
0aa81     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa85     BE 10 00 00 
0aa89     00 04 B2 00 
0aa8d     00 00 00 00 
0aa91     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa95     00 00 00 00 
0aa99     00          | 	byte	$00[5]
0aa9a     04 B2 00 00 
0aa9e     00 00 00 00 
0aaa2     00 00 00 7F 
0aaa6     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0aaaa     04 C2 00 00 
0aaae     00 00 01 40 
0aab2     10 00 00 00 
0aab6     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0aaba     04 C2 00 00 
0aabe     00 00 00 00 
0aac2     00 00 00 F0 
0aac6     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
0aaca     70 00 00 00 
0aace     00 00 00 00 
0aad2     00 00 00 F0 
0aad6     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
0aada     0C 18 00 00 
0aade     00 00 01 40 
0aae2     1A 08 00 FE 
0aae6     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
0aaea     70 00 00 00 
0aaee     00 00 01 40 
0aaf2     10 00 00 FE 
0aaf6     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0aafa     0C 18 00 00 
0aafe     00 00 01 1D 
0ab02     1C 20 00 8F 
0ab06     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
0ab0a     71 08 00 E2 
0ab0e     60 00 01 1D 
0ab12     10 00 00 8F 
0ab16     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
0ab1a     73 F0 00 00 
0ab1e     00 00 00 00 
0ab22     0A 06 00 A0 
0ab26     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0ab2a     04 C2 00 00 
0ab2e     00 00 01 1D 
0ab32     0E 93 00 8F 
0ab36     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
0ab3a     74 C4 00 00 
0ab3e     00 00 01 1D 
0ab42     10 00 00 AA 
0ab46     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
0ab4a     73 F0 00 00 
0ab4e     00 00 01 40 
0ab52     1A 08 00 A0 
0ab56     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
0ab5a     7C 18 00 00 
0ab5e     00 00 00 00 
0ab62     0A 08 00 BE 
0ab66     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0ab6a     71 04 00 CA 
0ab6e     50 00 01 7D 
0ab72     10 00 00 BE 
0ab76     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0ab7a     73 F0 00 00 
0ab7e     00 00 00 00 
0ab82     00 00 00 A0 
0ab86     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
0ab8a     74 C1 00 00 
0ab8e     00 00 00 00 
0ab92     00 00 00 A0 
0ab96     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0ab9a     04 C1 00 00 
0ab9e     00 00 00 00 
0aba2     00 00 00 8F 
0aba6     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
0abaa     71 04 00 00 
0abae     00 00 00 00 
0abb2     00 00 00 A0 
0abb6     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
0abba     73 F0 00 00 
0abbe     00 00 00 00 
0abc2     00 00 00 7F 
0abc6     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0abca     71 02 00 00 
0abce     00 00 01 7D 
0abd2     10 00 00 7F 
0abd6     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
0abda     73 F0 00 00 
0abde     00 00 00 00 
0abe2     00 00 00 8F 
0abe6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0abea     04 C1 00 00 
0abee     00 00 00 00 
0abf2     00 00 00 8F 
0abf6     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0abfa     04 C1 00 00 
0abfe     00 00 00 00 
0ac02     00 00 00 A0 
0ac06     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0ac0a     70 00 00 00 
0ac0e     00 00 00 00 
0ac12     00 00 00 A0 
0ac16     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
0ac1a     73 F0 00 00 
0ac1e     00 00 00 00 
0ac22     00 00 00 F0 
0ac26     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
0ac2a     73 F0 00 FE 
0ac2e     60 00 01 E0 
0ac32     10 00 00 F0 
0ac36     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0ac3a     04 C1 00 00 
0ac3e     00 00 00 00 
0ac42     00 00 00 7F 
0ac46     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0ac4a     73 F0 00 00 
0ac4e     00 00 00 00 
0ac52     00 00 00 7F 
0ac56     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0ac5a     04 C1 00 00 
0ac5e     00 00 00 00 
0ac62     00 00 00 8F 
0ac66     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
0ac6a     73 F0 00 00 
0ac6e     00 00 00 00 
0ac72     00 00 00 7F 
0ac76     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0ac7a     04 C1 00 00 
0ac7e     00 00 00 00 
0ac82     00 00 00 7F 
0ac86     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
0ac8a     71 04 00 CA 
0ac8e     50 00 01 7D 
0ac92     10 00 00 00 
0ac96     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
0ac9a     73 F0 00 00 
0ac9e     00 00 00 00 
0aca2     00 00 00 00 
0aca6     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
0acaa     73 F0 00 00 
0acae     00 00 01 40 
0acb2     10 00 00 00 
0acb6     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
0acba     7C 18 00 00 
0acbe     00 00 00 00 
0acc2     00 00 00 00 
0acc6     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
0acca     70 00 00 00 
0acce     00 00 01 53 
0acd2     19 02 00 00 
0acd6     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
0acda     7C 18 00 00 
0acde     00 00 00 00 
0ace2     00 00 00 7F 
0ace6     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0acea     71 04 00 00 
0acee     00 00 01 7D 
0acf2     10 00 00 00 
0acf6     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0acfa     73 F0 00 00 
0acfe     00 00 00 00 
0ad02     00 00 00 A0 
0ad06     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0ad0a     04 C2 00 00 
0ad0e     00 00 00 00 
0ad12     00 00 00 A0 
0ad16     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0ad1a     06 01 00 00 
0ad1e     00 00 00 00 
0ad22     00 00 00 8F 
0ad26     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0ad2a     06 01 00 00 
0ad2e     00 00 00 00 
0ad32     00 00 00 A0 
0ad36     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0ad3a     06 01 00 00 
0ad3e     00 00 00 00 
0ad42     0D 00 00 00 
0ad46     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0ad4a     00 00 00 00 
      ...             
0ae3e     00 00 00 00 
0ae42     00 00 00    | 	byte	$00[251]
0ae45     7F 1F 05 00 
0ae49     B4 71 03 00 
0ae4d     CA 50 00 01 
0ae51     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0ae55     00 0A 06 00 
0ae59     AA 73 F0 00 
0ae5d     00 00 00 00 
0ae61     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae65     7F 0E 93 00 
0ae69     00 04 C2 00 
0ae6d     00 00 00 00 
0ae71     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae75     8F 1C 30 00 
0ae79     00 04 C2 00 
0ae7d     00 00 00 00 
0ae81     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae85     BE 10 00 00 
0ae89     00 04 C2 00 
0ae8d     00 00 00 00 
0ae91     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae95     00 00 00 00 
0ae99     00          | 	byte	$00[5]
0ae9a     04 C2 00 00 
0ae9e     00 00 00 00 
0aea2     00 00 00 7F 
0aea6     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
0aeaa     74 C1 00 00 
0aeae     00 00 01 40 
0aeb2     10 00 00 00 
0aeb6     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0aeba     04 C2 00 00 
0aebe     00 00 00 00 
0aec2     00 00 00 F0 
0aec6     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0aeca     04 C2 00 00 
0aece     00 00 00 00 
0aed2     00 00 00 F0 
0aed6     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
0aeda     73 F0 00 00 
0aede     00 00 01 40 
0aee2     1A 08 00 FE 
0aee6     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
0aeea     73 F0 00 00 
0aeee     00 00 01 40 
0aef2     10 00 00 FE 
0aef6     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
0aefa     73 F0 00 00 
0aefe     00 00 01 1D 
0af02     1C 20 00 8F 
0af06     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
0af0a     73 F0 00 E2 
0af0e     60 00 01 1D 
0af12     10 00 00 8F 
0af16     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0af1a     04 C1 00 00 
0af1e     00 00 00 00 
0af22     0A 06 00 A0 
0af26     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0af2a     02 06 00 00 
0af2e     00 00 01 1D 
0af32     0E 93 00 8F 
0af36     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
0af3a     73 F0 00 00 
0af3e     00 00 01 1D 
0af42     10 00 00 AA 
0af46     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
0af4a     70 00 00 00 
0af4e     00 00 01 40 
0af52     1A 08 00 A0 
0af56     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
0af5a     7C 20 00 00 
0af5e     00 00 00 00 
0af62     0A 08 00 BE 
0af66     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0af6a     71 06 00 CA 
0af6e     50 00 01 7D 
0af72     10 00 00 BE 
0af76     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0af7a     73 F0 00 00 
0af7e     00 00 00 00 
0af82     00 00 00 7F 
0af86     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
0af8a     70 00 00 00 
0af8e     00 00 00 00 
0af92     00 00 00 7F 
0af96     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0af9a     7C 20 00 00 
0af9e     00 00 00 00 
0afa2     00 00 00 8F 
0afa6     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0afaa     70 00 00 00 
0afae     00 00 00 00 
0afb2     00 00 00 7F 
0afb6     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
0afba     7C 20 00 00 
0afbe     00 00 00 00 
0afc2     00 00 00 A0 
0afc6     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
0afca     70 00 00 00 
0afce     00 00 01 7D 
0afd2     10 00 00 A0 
0afd6     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0afda     00 00 00 00 
0afde     00 00 00 00 
0afe2     00 00 00    | 	byte	$00[11]
0afe5     AA 10 00 00 
0afe9     B4 70 00 00 
0afed     00 00 00 00 
0aff1     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aff5     AA 1C 30 00 
0aff9     AA 7C 20 00 
0affd     00 00 00 00 
0b001     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b005     BE 10 00 00 
0b009     AA 70 00 00 
0b00d     00 00 00 00 
0b011     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b015     BE 1C 30 00 
0b019     B4 7C 20 00 
0b01d     00 00 00 00 
0b021     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b025     D6 10 00 00 
0b029     97 70 00 00 
0b02d     E2 60 00 01 
0b031     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0b035     D6 1C 30 00 
0b039     AA 7C 20 00 
0b03d     00 00 00 00 
0b041     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b045     FE 1A 04 00 
0b049     AA 70 00 00 
0b04d     00 00 00 00 
0b051     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b055     FE 0E 93 00 
0b059     97 7C 20 00 
0b05d     00 00 00 00 
0b061     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b065     A0 10 00 00 
0b069     B4 70 00 00 
0b06d     00 00 00 01 
0b071     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
0b075     A0 1C 30 00 
0b079     AA 7C 20 00 
0b07d     00 00 00 00 
0b081     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b085     BE 10 00 00 
0b089     AA 70 00 00 
0b08d     CA 50 00 01 
0b091     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b095     00 00 00 00 
0b099     B4 73 F0 00 
0b09d     00 00 00 00 
0b0a1     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0a5     00 00 00 00 
0b0a9     CA 73 F0 00 
0b0ad     00 00 00 00 
0b0b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0b5     00 00 00 00 
0b0b9     00 00 00 00 
0b0bd     00 00 00 00 
0b0c1     00 00 00 00 | 	byte	$00[16]
0b0c5     BE 1A 02 00 
0b0c9     F0 71 0A 00 
0b0cd     00 0F 03 01 
0b0d1     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
0b0d5     00 0A 02 00 
0b0d9     E2 73 F0 00 
0b0dd     00 0F 02 00 
0b0e1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b0e5     00 0A 02 00 
0b0e9     00 0C 10 00 
0b0ed     00 0F 03 00 
0b0f1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b0f5     00 0A 02 00 
0b0f9     00 00 00 00 
0b0fd     00 0F 02 00 
0b101     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b105     00 0A 02 00 
0b109     D6 71 0A 00 
0b10d     00 0F 03 01 
0b111     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
0b115     00 0A 02 00 
0b119     CA 73 F0 00 
0b11d     00 0F 02 00 
0b121     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b125     00 0A 02 00 
0b129     00 04 C2 00 
0b12d     00 0F 03 00 
0b131     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b135     00 0A 02 00 
0b139     00 06 02 00 
0b13d     00 0F 02 00 
0b141     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b145     00 0A 02 00 
0b149     00 06 02 00 
0b14d     00 0F 03 00 
0b151     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b155     00 0A 02 00 
0b159     00 06 02 00 
0b15d     00 0F 02 00 
0b161     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b165     00 0A 02 00 
0b169     00 06 02 00 
0b16d     00 0F 03 00 
0b171     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b175     00 0A 02 00 
0b179     00 06 02 00 
0b17d     00 0F 02 00 
0b181     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b185     A0 10 00 00 
0b189     AA 70 00 00 
0b18d     00 0F 03 00 
0b191     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b195     A0 1C 30 00 
0b199     00 00 00 00 
0b19d     00 0F 02 00 
0b1a1     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1a5     8F 10 00 00 
0b1a9     97 70 00 00 
0b1ad     00 0F 03 00 
0b1b1     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b1b5     00 00 00 00 
0b1b9     00 00 00 00 
0b1bd     00          | 	byte	$00[9]
0b1be     0F 02 00 00 
0b1c2     0D 00 00 00 
0b1c6     00 00 00 00 
0b1ca     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1ce     00 00 00 00 
      ...             
0b23e     00 00 00 00 
0b242     00 00 00    | 	byte	$00[119]
0b245     7F 1F 05 00 
0b249     8F 71 02 00 
0b24d     CA 50 00 01 
0b251     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b255     00 00 00 00 
0b259     87 73 F0 00 
0b25d     00 00 00 00 
0b261     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b265     A0 10 00 00 
0b269     00 04 C1 00 
0b26d     00 00 00 00 
0b271     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b275     7F 1C 20 00 
0b279     00 04 C1 00 
0b27d     00 00 00 00 
0b281     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b285     BE 10 00 00 
0b289     00 04 C1 00 
0b28d     00 00 00 00 
0b291     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b295     00 00 00 00 
0b299     00          | 	byte	$00[5]
0b29a     04 C1 00 00 
0b29e     00 00 00 00 
0b2a2     0A 02 00 F0 
0b2a6     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
0b2aa     70 00 00 FE 
0b2ae     60 00 01 E0 
0b2b2     10 00 00 00 
0b2b6     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
0b2ba     73 F0 00 00 
0b2be     00 00 00 00 
0b2c2     00 00 00 D6 
0b2c6     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
0b2ca     73 F0 00 00 
0b2ce     00 00 00 00 
0b2d2     00 00 00 F0 
0b2d6     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0b2da     0C 10 00 00 
0b2de     00 00 00 00 
0b2e2     00 00 00 F0 
0b2e6     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
0b2ea     73 F0 00 00 
0b2ee     00 00 00 00 
0b2f2     0A 02 00 00 
0b2f6     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0b2fa     0C 10 00 00 
0b2fe     00 00 00 F0 
0b302     1A 02 00 7F 
0b306     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b30a     71 06 00 CA 
0b30e     50 00 01 7D 
0b312     10 00 00 00 
0b316     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b31a     73 F0 00 00 
0b31e     00 00 00 00 
0b322     00 00 00 A0 
0b326     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b32a     70 00 00 00 
0b32e     00 00 00 00 
0b332     00 00 00 7F 
0b336     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b33a     7C 20 00 00 
0b33e     00 00 00 00 
0b342     00 00 00 BE 
0b346     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b34a     70 00 00 00 
0b34e     00 00 01 7D 
0b352     10 00 00 AA 
0b356     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b35a     7C 20 00 00 
0b35e     00 00 00 00 
0b362     00 00 00 A0 
0b366     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b36a     70 00 00 E2 
0b36e     60 00 01 AC 
0b372     10 00 00 A0 
0b376     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b37a     0C 10 00 00 
0b37e     00 00 00 00 
0b382     00 00 00 AA 
0b386     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b38a     73 F0 00 00 
0b38e     00 00 00 00 
0b392     00 00 00 BE 
0b396     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b39a     0C 10 00 00 
0b39e     00 00 00 00 
0b3a2     00 00 00 AA 
0b3a6     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b3aa     70 00 00 00 
0b3ae     00 00 00 00 
0b3b2     0A 02 00 00 
0b3b6     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b3ba     7C 20 00 00 
0b3be     00 00 00 00 
0b3c2     0A 02 00 A0 
0b3c6     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b3ca     74 C1 00 FE 
0b3ce     60 00 01 E0 
0b3d2     10 00 00 00 
0b3d6     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b3da     04 C1 00 00 
0b3de     00 00 00 00 
0b3e2     00 00 00 A0 
0b3e6     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b3ea     04 C2 00 00 
0b3ee     00 00 00 00 
0b3f2     00 00 00 A0 
0b3f6     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b3fa     04 C2 00 00 
0b3fe     00 00 00 F0 
0b402     10 00 00 A0 
0b406     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b40a     73 F0 00 00 
0b40e     00 00 00 00 
0b412     00 00 00 00 
0b416     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b41a     70 00 00 00 
0b41e     00 00 00 00 
0b422     00 00 00 8F 
0b426     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
0b42a     71 04 00 E2 
0b42e     60 00 01 AC 
0b432     10 00 00 00 
0b436     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b43a     73 F0 00 00 
0b43e     00 00 00 00 
0b442     00 00 00 8F 
0b446     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0b44a     73 F0 00 00 
0b44e     00 00 00 00 
0b452     00 00 00 A0 
0b456     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
0b45a     7C 20 00 00 
0b45e     00 00 00 00 
0b462     00 00 00 8F 
0b466     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0b46a     70 00 00 00 
0b46e     00 00 01 AC 
0b472     10 00 00 00 
0b476     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b47a     7C 20 00 00 
0b47e     00 00 00 00 
0b482     00 00 00 BE 
0b486     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b48a     70 00 00 CA 
0b48e     50 00 01 7D 
0b492     10 00 00 00 
0b496     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b49a     7C 20 00 00 
0b49e     00 00 00 00 
0b4a2     00 00 00 A0 
0b4a6     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b4aa     70 00 00 00 
0b4ae     00 00 00 00 
0b4b2     00 00 00 00 
0b4b6     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b4ba     70 00 00 00 
0b4be     00 00 01 AC 
0b4c2     10 00 00 8F 
0b4c6     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
0b4ca     71 08 00 00 
0b4ce     00 00 00 00 
0b4d2     00 00 00 00 
0b4d6     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
0b4da     73 F0 00 00 
0b4de     00 00 00 00 
0b4e2     00 00 00 00 
0b4e6     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
0b4ea     0C 10 00 00 
0b4ee     00 00 00 00 
0b4f2     00 00 00 7F 
0b4f6     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0b4fa     71 06 00 00 
0b4fe     00 00 01 7D 
0b502     10 00 00 00 
0b506     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0b50a     73 F0 00 00 
0b50e     00 00 00 00 
0b512     00 00 00 00 
0b516     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b51a     04 C1 00 00 
0b51e     00 00 00 00 
0b522     00 00 00 00 
0b526     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b52a     06 02 00 00 
0b52e     00 00 00 00 
0b532     00 00 00 A0 
0b536     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b53a     06 02 00 00 
0b53e     00 00 00 00 
0b542     00 00 00 8F 
0b546     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0b54a     06 02 00 00 
0b54e     00 00 00 00 
0b552     0D 00 00 00 
0b556     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b55a     00 00 00 00 
      ...             
0b63e     00 00 00 00 
0b642     00 00 00    | 	byte	$00[235]
0b645     7F 1F 05 00 
0b649     8F 71 04 00 
0b64d     CA 50 00 01 
0b651     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b655     7F 1C 30 00 
0b659     87 73 F0 00 
0b65d     00 00 00 00 
0b661     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b665     A0 10 00 00 
0b669     00 04 C1 00 
0b66d     00 00 00 00 
0b671     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b675     7F 1C 30 00 
0b679     00 04 C1 00 
0b67d     00 00 00 00 
0b681     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b685     BE 10 00 00 
0b689     AA 70 00 00 
0b68d     00 00 00 00 
0b691     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b695     A0 1C 30 00 
0b699     87 7C 20 00 
0b69d     00 00 00 00 
0b6a1     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b6a5     F0 40 00 00 
0b6a9     97 70 00 00 
0b6ad     FE 60 00 01 
0b6b1     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0b6b5     00 00 00 00 
0b6b9     AA 73 F0 00 
0b6bd     00 00 00 00 
0b6c1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6c5     D6 4A 06 00 
0b6c9     97 73 F0 00 
0b6cd     00 00 00 00 
0b6d1     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6d5     D6 0E 93 00 
0b6d9     00 0C 10 00 
0b6dd     00 00 00 00 
0b6e1     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6e5     F0 40 00 00 
0b6e9     AA 73 F0 00 
0b6ed     00 00 00 00 
0b6f1     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b6f5     00 00 00 00 
0b6f9     00          | 	byte	$00[5]
0b6fa     0C 10 00 00 
0b6fe     00 00 00 F0 
0b702     1A 02 00 7F 
0b706     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b70a     71 06 00 CA 
0b70e     50 00 01 7D 
0b712     10 00 00 00 
0b716     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b71a     73 F0 00 00 
0b71e     00 00 00 00 
0b722     00 00 00 A0 
0b726     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b72a     70 00 00 00 
0b72e     00 00 00 00 
0b732     00 00 00 7F 
0b736     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b73a     7C 20 00 00 
0b73e     00 00 00 00 
0b742     00 00 00 BE 
0b746     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b74a     70 00 00 00 
0b74e     00 00 01 7D 
0b752     10 00 00 AA 
0b756     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b75a     7C 20 00 00 
0b75e     00 00 00 00 
0b762     00 00 00 A0 
0b766     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b76a     70 00 00 E2 
0b76e     60 00 01 AC 
0b772     10 00 00 A0 
0b776     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b77a     0C 10 00 00 
0b77e     00 00 00 00 
0b782     00 00 00 AA 
0b786     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b78a     73 F0 00 00 
0b78e     00 00 00 00 
0b792     00 00 00 BE 
0b796     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b79a     0C 10 00 00 
0b79e     00 00 00 00 
0b7a2     00 00 00 AA 
0b7a6     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b7aa     70 00 00 00 
0b7ae     00 00 00 00 
0b7b2     0A 02 00 00 
0b7b6     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b7ba     7C 20 00 00 
0b7be     00 00 00 00 
0b7c2     0A 02 00 A0 
0b7c6     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b7ca     74 C1 00 FE 
0b7ce     60 00 01 E0 
0b7d2     10 00 00 00 
0b7d6     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b7da     04 C1 00 00 
0b7de     00 00 00 00 
0b7e2     00 00 00 A0 
0b7e6     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b7ea     04 C2 00 00 
0b7ee     00 00 00 00 
0b7f2     00 00 00 A0 
0b7f6     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b7fa     04 C2 00 00 
0b7fe     00 00 00 F0 
0b802     10 00 00 A0 
0b806     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b80a     73 F0 00 00 
0b80e     00 00 00 00 
0b812     00 00 00 00 
0b816     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b81a     70 00 00 00 
0b81e     00 00 00 00 
0b822     00 00 00 AA 
0b826     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
0b82a     71 04 00 E2 
0b82e     60 00 01 AC 
0b832     10 00 00 00 
0b836     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b83a     73 F0 00 00 
0b83e     00 00 00 00 
0b842     00 00 00 AA 
0b846     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
0b84a     73 F0 00 00 
0b84e     00 00 00 00 
0b852     00 00 00 BE 
0b856     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0b85a     7C 20 00 00 
0b85e     00 00 00 00 
0b862     00 00 00 AA 
0b866     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0b86a     70 00 00 00 
0b86e     00 00 01 AC 
0b872     10 00 00 00 
0b876     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b87a     7C 20 00 00 
0b87e     00 00 00 00 
0b882     00 00 00 BE 
0b886     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b88a     70 00 00 CA 
0b88e     50 00 01 7D 
0b892     10 00 00 00 
0b896     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b89a     7C 20 00 00 
0b89e     00 00 00 00 
0b8a2     0F 06 00 A0 
0b8a6     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
0b8aa     70 00 00 00 
0b8ae     00 00 00 00 
0b8b2     00 00 00 00 
0b8b6     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b8ba     70 00 00 00 
0b8be     00 00 00 00 
0b8c2     00 00 00 00 
0b8c6     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
0b8ca     74 C2 00 00 
0b8ce     00 00 01 AC 
0b8d2     10 00 00 AA 
0b8d6     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0b8da     04 C2 00 00 
0b8de     00 00 00 00 
0b8e2     0F 07 00 AA 
0b8e6     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
0b8ea     0C 10 00 00 
0b8ee     00 00 00 00 
0b8f2     0F 08 00 BE 
0b8f6     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
0b8fa     71 02 00 00 
0b8fe     00 00 01 7D 
0b902     1F 0A 00 00 
0b906     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
0b90a     73 F0 00 00 
0b90e     00 00 00 00 
0b912     04 A2 00 00 
0b916     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
0b91a     04 C1 00 00 
0b91e     0F 02 00 00 
0b922     06 02 00 00 
0b926     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b92a     06 02 00 00 
0b92e     0E 60 00 00 
0b932     06 02 00 00 
0b936     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b93a     06 02 00 00 
0b93e     0A 02 00 00 
0b942     06 02 00 00 
0b946     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b94a     06 02 00 00 
0b94e     0E 6F 00 00 
0b952     06 02 00 BE 
0b956     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
0b95a     7F 05 00 00 
0b95e     00 00 00 00 
0b962     06 02 00 BE 
0b966     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
0b96a     73 F0 00 00 
0b96e     0D 00 00 00 
0b972     06 02 00 00 
0b976     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
0b97a     00 00 00 00 
      ...             
0ba3e     00 00 00 00 
0ba42     00 00 00    | 	byte	$00[203]
0ba45     7F 1F 05 00 
0ba49     8F 71 04 00 
0ba4d     CA 90 00 00 
0ba51     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0ba55     00 00 00 00 
0ba59     87 73 F0 00 
0ba5d     00 00 00 00 
0ba61     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba65     A0 10 00 00 
0ba69     00 04 C2 00 
0ba6d     00 00 00 00 
0ba71     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ba75     7F 1C 20 00 
0ba79     00 04 C2 00 
0ba7d     00 00 00 00 
0ba81     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ba85     BE 10 00 00 
0ba89     97 73 F0 00 
0ba8d     00 00 00 00 
0ba91     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0ba95     00 00 00 00 
0ba99     AA 73 F0 00 
0ba9d     00 00 00 00 
0baa1     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0baa5     F0 40 00 00 
0baa9     97 70 00 00 
0baad     FE B0 00 00 
0bab1     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0bab5     00 00 00 00 
0bab9     AA 7C 20 00 
0babd     00 00 00 00 
0bac1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bac5     D6 4A 06 00 
0bac9     AA 70 00 00 
0bacd     00 00 00 00 
0bad1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bad5     F0 0E 93 00 
0bad9     97 7C 20 00 
0badd     00 00 00 00 
0bae1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bae5     F0 40 00 00 
0bae9     B4 70 00 00 
0baed     00 00 00 00 
0baf1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0baf5     00 00 00 00 
0baf9     AA 7C 20 00 
0bafd     00 00 00 00 
0bb01     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb05     7F 10 00 00 
0bb09     CA 74 C1 00 
0bb0d     CA 90 00 00 
0bb11     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bb15     00 00 00 00 
0bb19     00          | 	byte	$00[5]
0bb1a     06 01 00 00 
0bb1e     00 00 00 00 
0bb22     00 00 00 A0 
0bb26     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0bb2a     06 01 00 00 
0bb2e     00 00 00 BE 
0bb32     A0 00 00 7F 
0bb36     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0bb3a     06 01 00 00 
0bb3e     00 00 00 BE 
0bb42     A0 00 00 BE 
0bb46     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bb4a     06 01 00 00 
0bb4e     00 00 00 BE 
0bb52     3C 20 00 AA 
0bb56     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
0bb5a     06 01 00 00 
0bb5e     00 00 00 BE 
0bb62     A0 00 00 A0 
0bb66     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bb6a     06 01 00 E2 
0bb6e     B0 00 00 BE 
0bb72     D0 00 00 A0 
0bb76     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0bb7a     06 01 00 00 
0bb7e     00 00 00 00 
0bb82     00 00 00 AA 
0bb86     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0bb8a     06 01 00 00 
0bb8e     00 00 00 BE 
0bb92     A0 00 00 BE 
0bb96     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bb9a     06 01 00 00 
0bb9e     00 00 00 00 
0bba2     00 00 00 AA 
0bba6     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0bbaa     70 00 00 00 
0bbae     00 00 00 BE 
0bbb2     30 00 00 00 
0bbb6     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
0bbba     7C 20 00 00 
0bbbe     00 00 00 BE 
0bbc2     A0 00 00 A0 
0bbc6     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bbca     71 04 00 FE 
0bbce     B0 00 00 BE 
0bbd2     30 00 00 00 
0bbd6     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
0bbda     73 F0 00 00 
0bbde     00 00 00 00 
0bbe2     00 00 00 A0 
0bbe6     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0bbea     04 C1 00 00 
0bbee     00 00 00 BE 
0bbf2     A0 00 00 A0 
0bbf6     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
0bbfa     04 C1 00 00 
0bbfe     00 00 00 BE 
0bc02     A0 00 00 A0 
0bc06     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bc0a     70 00 00 00 
0bc0e     00 00 00 BE 
0bc12     3C 20 00 00 
0bc16     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
0bc1a     73 F0 00 00 
0bc1e     00 00 00 BE 
0bc22     A0 00 00 8F 
0bc26     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
0bc2a     73 F0 00 E2 
0bc2e     B0 00 00 BE 
0bc32     D0 00 00 00 
0bc36     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
0bc3a     0C 10 00 00 
0bc3e     00 00 00 00 
0bc42     00 00 00 8F 
0bc46     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0bc4a     73 F0 00 00 
0bc4e     00 00 00 BE 
0bc52     A0 00 00 A0 
0bc56     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bc5a     0C 10 00 00 
0bc5e     00 00 00 00 
0bc62     00 00 00 8F 
0bc66     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0bc6a     74 C1 00 00 
0bc6e     00 00 00 BE 
0bc72     30 00 00 00 
0bc76     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0bc7a     04 C1 00 00 
0bc7e     00 00 00 BE 
0bc82     A0 00 00 BE 
0bc86     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
0bc8a     70 00 00 CA 
0bc8e     90 00 00 BE 
0bc92     30 00 00 00 
0bc96     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
0bc9a     73 F0 00 00 
0bc9e     00 00 00 00 
0bca2     00 00 00 A0 
0bca6     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
0bcaa     73 F0 00 00 
0bcae     00 00 00 BE 
0bcb2     A0 00 00 00 
0bcb6     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bcba     04 C1 00 00 
0bcbe     00 00 00 BE 
0bcc2     A0 00 00 8F 
0bcc6     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0bcca     06 01 00 00 
0bcce     00 00 00 BE 
0bcd2     3C 20 00 00 
0bcd6     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0bcda     06 01 00 00 
0bcde     00 00 00 BE 
0bce2     A0 00 00 7F 
0bce6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
0bcea     06 01 00 00 
0bcee     00 00 00 BE 
0bcf2     D0 00 00 00 
0bcf6     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0bcfa     04 C2 00 00 
0bcfe     00 00 00 00 
0bd02     00 00 00 00 
0bd06     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd0a     06 01 00 00 
0bd0e     00 00 00 BE 
0bd12     A0 00 00 00 
0bd16     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bd1a     06 01 00 00 
0bd1e     00 00 00 00 
0bd22     00 00 00 A0 
0bd26     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
0bd2a     70 00 00 00 
0bd2e     00 00 00 BE 
0bd32     30 00 00 8F 
0bd36     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
0bd3a     73 F0 00 00 
0bd3e     0D 00 00 BE 
0bd42     A0 00 00 00 
0bd46     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bd4a     00 00 00 00 
      ...             
0be3e     00 00 00 00 
0be42     00 00 00    | 	byte	$00[251]
0be45     7F 1F 05 00 
0be49     87 74 C2 00 
0be4d     CA 90 00 00 
0be51     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0be55     7F 1C 30 00 
0be59     00 04 C2 00 
0be5d     00 00 00 00 
0be61     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be65     A0 10 00 00 
0be69     00 04 C2 00 
0be6d     00 00 00 00 
0be71     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0be75     7F 1C 30 00 
0be79     00 04 C2 00 
0be7d     00 00 00 00 
0be81     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0be85     BE 10 00 00 
0be89     97 73 F0 00 
0be8d     00 00 00 00 
0be91     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0be95     A0 1C 30 00 
0be99     87 73 F0 00 
0be9d     00 00 00 00 
0bea1     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bea5     F0 40 00 00 
0bea9     7F 70 00 00 
0bead     FE B0 00 00 
0beb1     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0beb5     00 00 00 00 
0beb9     87 7C 20 00 
0bebd     00 00 00 00 
0bec1     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bec5     D6 4A 06 00 
0bec9     87 70 00 00 
0becd     00 00 00 00 
0bed1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bed5     D6 0E 93 00 
0bed9     7F 7C 20 00 
0bedd     00 00 00 00 
0bee1     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bee5     F0 40 00 00 
0bee9     97 70 00 00 
0beed     00 00 00 00 
0bef1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bef5     00 00 00 00 
0bef9     87 7C 20 00 
0befd     00 00 00 00 
0bf01     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf05     7F 10 00 00 
0bf09     8F 71 04 00 
0bf0d     CA 90 00 00 
0bf11     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bf15     00 00 00 00 
0bf19     87 73 F0 00 
0bf1d     00 00 00 00 
0bf21     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf25     A0 10 00 00 
0bf29     00 04 C2 00 
0bf2d     00 00 00 00 
0bf31     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf35     7F 1C 20 00 
0bf39     00 06 01 00 
0bf3d     00 00 00 00 
0bf41     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf45     BE 10 00 00 
0bf49     00 06 01 00 
0bf4d     00 00 00 00 
0bf51     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bf55     AA 1C 30 00 
0bf59     00 06 01 00 
0bf5d     00 00 00 00 
0bf61     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf65     A0 10 00 00 
0bf69     00 06 01 00 
0bf6d     E2 B0 00 00 
0bf71     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
0bf75     A0 1C 30 00 
0bf79     00 06 01 00 
0bf7d     00 00 00 00 
0bf81     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf85     AA 10 00 00 
0bf89     B4 71 03 00 
0bf8d     00 00 00 00 
0bf91     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf95     BE 10 00 00 
0bf99     AA 73 F0 00 
0bf9d     00 00 00 00 
0bfa1     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bfa5     AA 10 00 00 
0bfa9     B4 73 F0 00 
0bfad     00 00 00 00 
0bfb1     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bfb5     00 00 00 00 
0bfb9     00 00 00 00 
0bfbd     00 00 00 00 | 	byte	$00[12]
0bfc1     BE A0 00 00 
0bfc5     A0 10 00 00 
0bfc9     D6 71 06 00 
0bfcd     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
0bfd1     BE 30 00 00 
0bfd5     00 0C 20 00 
0bfd9     CA 73 F0 00 
0bfdd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0bfe1     00 00 00 00 
0bfe5     A0 0E 93 00 
0bfe9     00 04 C2 00 
0bfed     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0bff1     BE A0 00 00 
0bff5     A0 1C 20 00 
0bff9     00 04 C2 00 
0bffd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c001     BE A0 00 00 
0c005     A0 10 00 00 
0c009     B4 73 F0 00 
0c00d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
0c011     BE 3C 20 00 
0c015     00 00 00 00 
0c019     CA 73 F0 00 
0c01d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c021     BE A0 00 00 
0c025     AA 10 00 00 
0c029     E2 74 C2 00 
0c02d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
0c031     BE D0 00 00 
0c035     00 0C 20 00 
0c039     00 06 01 00 
0c03d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c041     00 00 00 00 
0c045     AA 1E 93 01 
0c049     0D 74 C2 00 
0c04d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
0c051     BE A0 00 00 
0c055     BE 10 00 00 
0c059     00 0C 10 00 
0c05d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c061     00 00 00 00 
0c065     AA 10 00 00 
0c069     E2 74 C2 00 
0c06d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
0c071     BE 30 00 00 
0c075     00 00 00 00 
0c079     00 0C 10 00 
0c07d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c081     BE A0 00 00 
0c085     BE 10 00 00 
0c089     D6 71 08 00 
0c08d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
0c091     BE 30 00 00 
0c095     00 00 00 00 
0c099     CA 73 F0 00 
0c09d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c0a1     00 00 00 00 
0c0a5     A0 10 00 00 
0c0a9     00 04 C2 00 
0c0ad     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c0b1     BE A0 00 00 
0c0b5     00 00 00 00 
0c0b9     00 06 01 00 
0c0bd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0c1     BE A0 00 00 
0c0c5     AA 10 00 00 
0c0c9     00 06 01 00 
0c0cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0d1     BE 3C 20 00 
0c0d5     AA 1E 93 00 
0c0d9     00 06 01 00 
0c0dd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0e1     BE A0 00 00 
0c0e5     BE 10 00 00 
0c0e9     00 06 01 00 
0c0ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0f1     BE D0 00 00 
0c0f5     00 04 A1 00 
0c0f9     00 06 01 00 
0c0fd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c101     BE A0 00 00 
0c105     00 06 01 00 
0c109     00 06 01 00 
0c10d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c111     BE AC 20 00 
0c115     00 06 01 00 
0c119     00 06 01 00 
0c11d     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c121     BE 3C 20 00 
0c125     00 06 01 00 
0c129     00 06 01 00 
0c12d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c131     BE D0 00 00 
0c135     00 06 01 00 
0c139     00 06 01 00 
0c13d     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
0c141     00 00 00 00 
      ...             
0c23d     00 00 00 00 
0c241     00 00 00 00 | 	byte	$00[260]
0c245     BE 10 00 00 
0c249     00 06 01 00 
0c24d     CA 90 00 00 
0c251     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c255     00 00 00 00 
0c259     00          | 	byte	$00[5]
0c25a     06 01 00 00 
0c25e     00 00 00 00 
0c262     00 00 00 A0 
0c266     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0c26a     06 01 00 00 
0c26e     00 00 00 BE 
0c272     A0 00 00 8F 
0c276     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0c27a     06 01 00 00 
0c27e     00 00 00 BE 
0c282     A0 00 00 A0 
0c286     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c28a     06 01 00 00 
0c28e     00 00 00 BE 
0c292     3C 20 00 AA 
0c296     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0c29a     06 01 00 00 
0c29e     00 00 00 BE 
0c2a2     A0 00 00 A0 
0c2a6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c2aa     06 01 00 00 
0c2ae     00 00 00 BE 
0c2b2     D0 00 00 A0 
0c2b6     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0c2ba     06 01 00 00 
0c2be     00 00 00 00 
0c2c2     00 00 00 AA 
0c2c6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0c2ca     06 01 00 00 
0c2ce     00 00 00 BE 
0c2d2     A0 00 00 AA 
0c2d6     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0c2da     06 01 00 00 
0c2de     00 00 00 00 
0c2e2     00 00 00 BE 
0c2e6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0c2ea     06 01 00 00 
0c2ee     00 00 00 BE 
0c2f2     30 00 00 BE 
0c2f6     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0c2fa     0C 00 00 00 
0c2fe     00 00 00 BE 
0c302     A0 00 00 AA 
0c306     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0c30a     00 00 01 0D 
0c30e     B0 00 00 BE 
0c312     30 00 00 00 
0c316     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0c31a     00 00 00 00 
0c31e     00 00 00 00 
0c322     00 00 00    | 	byte	$00[11]
0c325     AA 1E 93 00 
0c329     00 00 00 00 
0c32d     00 00 00 00 
0c331     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c335     A0 10 00 00 
0c339     00 00 00 00 
0c33d     00 00 00 00 
0c341     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c345     AA 10 00 00 
0c349     00 00 00 00 
0c34d     00 00 00 00 
0c351     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c355     BE 10 00 00 
0c359     00 00 00 00 
0c35d     00 00 00 00 
0c361     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c365     AA 10 00 00 
0c369     00 00 00 00 
0c36d     00 00 00 00 
0c371     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c375     00 04 82 00 
0c379     00 00 00 00 
0c37d     00 00 00 00 
0c381     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c385     00 06 01 00 
0c389     00 00 00 00 
0c38d     00 00 00 00 
0c391     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c395     00 06 01 00 
0c399     00 00 00 00 
0c39d     00 00 00 00 
0c3a1     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c3a5     00 06 01 00 
0c3a9     00 00 00 00 
0c3ad     00 00 00 00 
0c3b1     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c3b5     00 06 01 00 
0c3b9     00 00 00 00 
0c3bd     00 00 00 00 
0c3c1     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3c5     A0 10 00 00 
0c3c9     00 00 00 00 
0c3cd     CA 90 00 00 
0c3d1     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c3d5     00 00 00 00 
0c3d9     00 00 00 00 
0c3dd     00 00 00 00 
0c3e1     00 00 00 00 | 	byte	$00[16]
0c3e5     BE 1E 93 00 
0c3e9     00 00 00 00 
0c3ed     00 00 00 00 
0c3f1     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3f5     A0 10 00 00 
0c3f9     00 00 00 00 
0c3fd     00 00 00 00 
0c401     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c405     8F 10 00 00 
0c409     00 00 00 00 
0c40d     00 00 00 00 
0c411     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c415     A0 10 00 00 
0c419     00 00 00 00 
0c41d     00 00 00 00 
0c421     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c425     7F 10 00 00 
0c429     00 00 00 00 
0c42d     00 00 00 00 
0c431     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c435     7F 1C 30 00 
0c439     00 00 00 00 
0c43d     00 00 00 00 
0c441     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c445     BE 40 00 00 
0c449     00 00 00 00 
0c44d     00 00 00 00 
0c451     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c455     BE 4A 08 00 
0c459     00 00 00 00 
0c45d     00 00 00 00 
0c461     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c465     D6 40 00 00 
0c469     00 00 00 00 
0c46d     00 00 00 00 
0c471     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c475     BE 40 00 00 
0c479     00 00 00 00 
0c47d     00 00 00 00 
0c481     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c485     7F 10 00 00 
0c489     00 00 00 01 
0c48d     0D B0 00 00 
0c491     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c495     7F 1C 30 00 
0c499     00 00 00 00 
0c49d     00 00 00 00 
0c4a1     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4a5     7F 1E 93 00 
0c4a9     00 00 00 00 
0c4ad     00 00 00 00 
0c4b1     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4b5     F0 40 00 00 
0c4b9     00 00 00 00 
0c4bd     00 00 00 00 
0c4c1     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4c5     7F 10 00 00 
0c4c9     00 00 00 00 
0c4cd     00 00 00 00 
0c4d1     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c4d5     8F 10 00 00 
0c4d9     00 00 00 00 
0c4dd     00 00 00 00 
0c4e1     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4e5     7F 10 00 00 
0c4e9     00 00 00 00 
0c4ed     00 00 00 00 
0c4f1     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c4f5     00 04 81 00 
0c4f9     00 00 00 00 
0c4fd     00 00 00 00 
0c501     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c505     00 06 01 00 
0c509     00 00 00 00 
0c50d     00 00 00 00 
0c511     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c515     00 06 01 00 
0c519     00 00 00 00 
0c51d     00 00 00 00 
0c521     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c525     00 06 01 00 
0c529     00 00 00 00 
0c52d     00 00 00 00 
0c531     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c535     00 06 01 00 
0c539     00 0D 00 00 
0c53d     00 00 00 00 
0c541     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c545     00 00 00 00 
      ...             
0c63d     00 00 00 00 
0c641     00 00 00 00 | 	byte	$00[256]
0c645     BE 10 00 00 
0c649     00 00 00 00 
0c64d     CA 90 00 00 
0c651     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c655     00 00 00 00 
0c659     00 00 00 00 
0c65d     00 00 00 00 
0c661     00 00 00 00 | 	byte	$00[16]
0c665     A0 1E 93 00 
0c669     00 00 00 00 
0c66d     00 00 00 00 
0c671     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c675     8F 10 00 00 
0c679     00 00 00 00 
0c67d     00 00 00 00 
0c681     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c685     A0 10 00 00 
0c689     00 00 00 00 
0c68d     00 00 00 00 
0c691     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c695     AA 10 00 00 
0c699     00 00 00 00 
0c69d     00 00 00 00 
0c6a1     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c6a5     A0 10 00 00 
0c6a9     00 00 00 00 
0c6ad     00 00 00 00 
0c6b1     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c6b5     A0 1C 30 00 
0c6b9     00 00 00 00 
0c6bd     00 00 00 00 
0c6c1     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6c5     AA 10 00 00 
0c6c9     00 00 00 00 
0c6cd     00 00 00 00 
0c6d1     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c6d5     AA 1C 30 00 
0c6d9     00 00 00 00 
0c6dd     00 00 00 00 
0c6e1     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6e5     BE 10 00 00 
0c6e9     00 00 00 00 
0c6ed     00 00 00 00 
0c6f1     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c6f5     BE 1C 30 00 
0c6f9     00 00 00 00 
0c6fd     00 00 00 00 
0c701     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c705     AA 10 00 00 
0c709     00 00 00 01 
0c70d     0D B0 00 00 
0c711     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c715     00 00 00 00 
0c719     00 00 00 00 
0c71d     00 00 00 00 
0c721     00 00 00 00 | 	byte	$00[16]
0c725     AA 1E 93 00 
0c729     00 00 00 00 
0c72d     00 00 00 00 
0c731     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c735     A0 10 00 00 
0c739     00 00 00 00 
0c73d     00 00 00 00 
0c741     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c745     AA 10 00 00 
0c749     00 00 00 00 
0c74d     00 00 00 00 
0c751     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c755     BE 10 00 00 
0c759     00 00 00 00 
0c75d     00 00 00 00 
0c761     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c765     AA 10 00 00 
0c769     00 00 00 00 
0c76d     00 00 00 00 
0c771     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c775     00 04 82 00 
0c779     00 00 00 00 
0c77d     00 00 00 00 
0c781     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c785     00 06 01 00 
0c789     00 00 00 00 
0c78d     00 00 00 00 
0c791     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c795     00 06 01 00 
0c799     00 00 00 00 
0c79d     00 00 00 00 
0c7a1     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7a5     00 06 01 00 
0c7a9     00 00 00 00 
0c7ad     00 00 00 00 
0c7b1     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c7b5     00 06 01 00 
0c7b9     00 00 00 00 
0c7bd     00 00 00 00 
0c7c1     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7c5     A0 10 00 00 
0c7c9     00 00 00 00 
0c7cd     FE B0 00 00 
0c7d1     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0c7d5     00 0C 20 00 
0c7d9     00 00 00 00 
0c7dd     00 00 00 00 
0c7e1     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7e5     A0 0E 93 00 
0c7e9     00 00 00 00 
0c7ed     00 00 00 00 
0c7f1     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7f5     A0 1C 20 00 
0c7f9     00 00 00 00 
0c7fd     00 00 00 00 
0c801     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c805     A0 10 00 00 
0c809     00 00 00 00 
0c80d     00 00 00 00 
0c811     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c815     00 00 00 00 
0c819     00 00 00 00 
0c81d     00 00 00 00 | 	byte	$00[12]
0c821     BE A0 00 00 
0c825     AA 10 00 00 
0c829     00 00 00 00 
0c82d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
0c831     BE D0 00 00 
0c835     00 0C 20 00 
0c839     00 00 00 00 
0c83d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c841     00 00 00 00 
0c845     AA 1E 93 00 
0c849     00 00 00 00 
0c84d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c851     BE A0 00 00 
0c855     BE 10 00 00 
0c859     00 00 00 00 
0c85d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c861     00 00 00 00 
0c865     AA 10 00 00 
0c869     00 00 00 00 
0c86d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c871     BE 30 00 00 
0c875     00 00 00 00 
0c879     00 00 00 00 
0c87d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c881     BE A0 00 00 
0c885     BE 10 00 00 
0c889     00 00 00 00 
0c88d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
0c891     BE 30 00 00 
0c895     00 00 00 00 
0c899     00 00 00 00 
0c89d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8a1     00 00 00 00 
0c8a5     A0 10 00 00 
0c8a9     00 00 00 00 
0c8ad     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8b1     BE A0 00 00 
0c8b5     00 00 00 00 
0c8b9     00 00 00 00 
0c8bd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8c1     BE A0 00 00 
0c8c5     AA 10 00 00 
0c8c9     00 00 00 00 
0c8cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8d1     BE 3C 20 00 
0c8d5     AA 1E 93 00 
0c8d9     00 00 00 00 
0c8dd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8e1     BE A0 00 00 
0c8e5     BE 10 00 00 
0c8e9     00 00 00 00 
0c8ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8f1     BE D0 00 00 
0c8f5     00 04 A1 00 
0c8f9     00 00 00 00 
0c8fd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c901     BE A0 00 00 
0c905     00 06 01 00 
0c909     00 00 00 00 
0c90d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c911     BE AC 20 00 
0c915     00 06 01 00 
0c919     00 00 00 00 
0c91d     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c921     BE 3C 20 00 
0c925     00 06 01 00 
0c929     AA 70 00 00 
0c92d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
0c931     BE D0 00 00 
0c935     00 06 01 00 
0c939     97 73 F0 00 
0c93d     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
0c941     00 00 00 00 
      ...             
0ca3d     00 00 00 00 
0ca41     00 00 00 00 | 	byte	$00[260]
0ca45     BE 10 00 00 
0ca49     CA 70 00 00 
0ca4d     CA 90 00 00 
0ca51     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0ca55     00 00 00 00 
0ca59     00          | 	byte	$00[5]
0ca5a     04 C2 00 00 
0ca5e     00 00 00 00 
0ca62     00 00 00 A0 
0ca66     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0ca6a     04 C2 00 00 
0ca6e     00 00 00 BE 
0ca72     A0 00 00 8F 
0ca76     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
0ca7a     70 00 00 00 
0ca7e     00 00 00 BE 
0ca82     A0 00 00 A0 
0ca86     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0ca8a     73 F0 00 00 
0ca8e     00 00 00 BE 
0ca92     3C 20 00 AA 
0ca96     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0ca9a     0C 10 00 00 
0ca9e     00 00 00 BE 
0caa2     A0 00 00 A0 
0caa6     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
0caaa     71 04 00 00 
0caae     00 00 00 BE 
0cab2     D0 00 00 A0 
0cab6     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
0caba     73 F0 00 00 
0cabe     00 00 00 00 
0cac2     00 00 00 AA 
0cac6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0caca     04 C2 00 00 
0cace     00 00 00 BE 
0cad2     A0 00 00 AA 
0cad6     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0cada     04 C2 00 00 
0cade     00 00 00 00 
0cae2     00 00 00 BE 
0cae6     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0caea     70 00 00 00 
0caee     00 00 00 BE 
0caf2     30 00 00 BE 
0caf6     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cafa     00 00 00 00 
0cafe     00 00 00    | 	byte	$00[7]
0cb01     BE A0 00 00 
0cb05     AA 10 00 00 
0cb09     8F 71 03 01 
0cb0d     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
0cb11     BE 30 00 00 
0cb15     00 00 00 00 
0cb19     87 73 F0 00 
0cb1d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
0cb21     00 00 00 00 
0cb25     AA 1E 93 00 
0cb29     00 04 C1 00 
0cb2d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
0cb31     BE A0 00 00 
0cb35     A0 10 00 00 
0cb39     00 06 01 00 
0cb3d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb41     BE A0 00 00 
0cb45     AA 10 00 00 
0cb49     00 06 01 00 
0cb4d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb51     BE 3C 20 00 
0cb55     BE 10 00 00 
0cb59     00 06 01 00 
0cb5d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb61     BE A0 00 00 
0cb65     AA 10 00 00 
0cb69     00 04 A2 00 
0cb6d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
0cb71     BE D0 00 00 
0cb75     00 04 82 00 
0cb79     00 06 01 00 
0cb7d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb81     00 00 00 00 
0cb85     00          | 	byte	$00[5]
0cb86     06 01 00 00 
0cb8a     06 01 00 00 
0cb8e     00 00 00 BE 
0cb92     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cb96     06 01 00 00 
0cb9a     06 01 00 00 
0cb9e     00 00 00 00 
0cba2     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cba6     06 01 00 00 
0cbaa     06 01 00 00 
0cbae     00 00 00 BE 
0cbb2     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cbb6     06 01 00 00 
0cbba     06 01 00 00 
0cbbe     00 00 00 BE 
0cbc2     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cbc6     10 00 00 AA 
0cbca     70 00 00 CA 
0cbce     90 00 00 BE 
0cbd2     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0cbd6     00 00 00 00 
0cbda     04 C2 00 00 
0cbde     00 00 00 00 
0cbe2     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cbe6     1E 93 00 00 
0cbea     04 C2 00 00 
0cbee     00 00 00 BE 
0cbf2     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cbf6     10 00 00 B4 
0cbfa     73 F0 00 00 
0cbfe     00 00 00 BE 
0cc02     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
0cc06     10 00 00 CA 
0cc0a     73 F0 00 00 
0cc0e     00 00 00 BE 
0cc12     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
0cc16     10 00 00 00 
0cc1a     0C 10 00 00 
0cc1e     00 00 00 BE 
0cc22     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cc26     10 00 00 BE 
0cc2a     71 06 00 00 
0cc2e     00 00 00 BE 
0cc32     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
0cc36     1C 30 00 B4 
0cc3a     73 F0 00 00 
0cc3e     00 00 00 00 
0cc42     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cc46     40 00 00 CA 
0cc4a     70 00 00 00 
0cc4e     00 00 00 BE 
0cc52     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cc56     4A 08 00 AA 
0cc5a     73 F0 00 00 
0cc5e     00 00 00 00 
0cc62     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0cc66     40 00 00 97 
0cc6a     73 F0 00 00 
0cc6e     00 00 00 BE 
0cc72     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
0cc76     40 00 00 00 
0cc7a     0C 10 00 00 
0cc7e     00 00 00 BE 
0cc82     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cc86     10 00 00 8F 
0cc8a     71 02 01 0D 
0cc8e     B0 00 00 BE 
0cc92     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
0cc96     1C 30 00 87 
0cc9a     73 F0 00 00 
0cc9e     00 00 00 00 
0cca2     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0cca6     1E 93 00 00 
0ccaa     04 C1 00 00 
0ccae     00 00 00 BE 
0ccb2     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
0ccb6     40 00 00 00 
0ccba     04 C1 00 00 
0ccbe     00 00 00 BE 
0ccc2     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0ccc6     10 00 00 7F 
0ccca     73 F0 00 00 
0ccce     00 00 00 BE 
0ccd2     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
0ccd6     10 00 00 00 
0ccda     0C 10 00 00 
0ccde     00 00 00 BE 
0cce2     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cce6     10 00 00 8F 
0ccea     71 03 00 00 
0ccee     00 00 00 BE 
0ccf2     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0ccf6     04 81 00 87 
0ccfa     73 F0 00 00 
0ccfe     00 00 00 00 
0cd02     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd06     06 01 00 00 
0cd0a     04 C1 00 00 
0cd0e     00 00 00 BE 
0cd12     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cd16     06 01 00 00 
0cd1a     06 01 00 00 
0cd1e     00 00 00 00 
0cd22     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd26     06 01 00 00 
0cd2a     04 C2 00 00 
0cd2e     00 00 00 BE 
0cd32     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cd36     06 01 00 00 
0cd3a     06 01 00 00 
0cd3e     0D 00 00 BE 
0cd42     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
0cd46     00 00 00 00 
      ...             
0ce3e     00 00 00 00 
0ce42     00 00 00    | 	byte	$00[255]
0ce45     A0 10 00 00 
0ce49     7F 74 C1 00 
0ce4d     FE B0 00 00 
0ce51     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0ce55     00 00 00 00 
0ce59     00          | 	byte	$00[5]
0ce5a     04 C2 00 00 
0ce5e     00 00 00 00 
0ce62     00 00 00 A0 
0ce66     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0ce6a     04 C2 00 00 
0ce6e     00 00 00 BE 
0ce72     A0 00 00 8F 
0ce76     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
0ce7a     70 00 00 00 
0ce7e     00 00 00 BE 
0ce82     A0 00 00 A0 
0ce86     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0ce8a     73 F0 00 00 
0ce8e     00 00 00 BE 
0ce92     3C 20 00 AA 
0ce96     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0ce9a     0C 10 00 00 
0ce9e     00 00 00 BE 
0cea2     A0 00 00 A0 
0cea6     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
0ceaa     71 03 00 00 
0ceae     00 00 00 BE 
0ceb2     D0 00 00 A0 
0ceb6     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
0ceba     73 F0 00 00 
0cebe     00 00 00 00 
0cec2     00 00 00 AA 
0cec6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0ceca     04 C1 00 00 
0cece     00 00 00 BE 
0ced2     A0 00 00 AA 
0ced6     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0ceda     04 C1 00 00 
0cede     00 00 00 00 
0cee2     00 00 00 BE 
0cee6     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
0ceea     73 F0 00 00 
0ceee     00 00 00 BE 
0cef2     30 00 00 BE 
0cef6     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cefa     0C 10 00 00 
0cefe     00 00 00 BE 
0cf02     A0 00 00 AA 
0cf06     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
0cf0a     71 02 01 0D 
0cf0e     B0 00 00 BE 
0cf12     30 00 00 00 
0cf16     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
0cf1a     73 F0 00 00 
0cf1e     00 00 00 00 
0cf22     00 00 00 AA 
0cf26     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0cf2a     04 C1 00 00 
0cf2e     00 00 00 BE 
0cf32     A0 00 00 A0 
0cf36     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0cf3a     04 C1 00 00 
0cf3e     00 00 00 BE 
0cf42     A0 00 00 AA 
0cf46     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
0cf4a     71 03 00 00 
0cf4e     00 00 00 BE 
0cf52     3C 20 00 BE 
0cf56     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
0cf5a     7C 10 00 00 
0cf5e     00 00 00 BE 
0cf62     A0 00 00 AA 
0cf66     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0cf6a     00 00 00 00 
0cf6e     00 00 00    | 	byte	$00[7]
0cf71     BE D0 00 00 
0cf75     00 04 82 00 
0cf79     00 00 00 00 
0cf7d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf81     00 00 00 00 
0cf85     00          | 	byte	$00[5]
0cf86     06 01 00 B4 
0cf8a     74 C2 00 00 
0cf8e     00 00 00 BE 
0cf92     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cf96     06 01 00 00 
0cf9a     04 C2 00 00 
0cf9e     00 00 00 00 
0cfa2     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfa6     06 01 00 00 
0cfaa     04 C2 00 00 
0cfae     00 00 00 BE 
0cfb2     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cfb6     06 01 00 00 
0cfba     04 C2 00 00 
0cfbe     00 00 00 BE 
0cfc2     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cfc6     10 00 00 D6 
0cfca     71 04 00 CA 
0cfce     90 00 00 BE 
0cfd2     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0cfd6     0C 20 00 CA 
0cfda     73 F0 00 00 
0cfde     00 00 00 00 
0cfe2     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cfe6     0E 93 00 00 
0cfea     04 C2 00 00 
0cfee     00 00 00 BE 
0cff2     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cff6     1C 20 00 00 
0cffa     06 01 00 00 
0cffe     00 00 00 BE 
0d002     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d006     10 00 00 00 
0d00a     06 01 00 00 
0d00e     00 00 00 BE 
0d012     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d016     00 00 00 00 
0d01a     06 01 00 00 
0d01e     00 00 00 BE 
0d022     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0d026     10 00 00 00 
0d02a     06 01 00 E2 
0d02e     B0 00 00 BE 
0d032     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
0d036     0C 20 00 00 
0d03a     06 01 00 00 
0d03e     00 00 00 00 
0d042     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d046     1E 93 00 00 
0d04a     06 01 00 00 
0d04e     00 00 00 BE 
0d052     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0d056     10 00 00 00 
0d05a     06 01 00 00 
0d05e     00 00 00 00 
0d062     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d066     10 00 00 00 
0d06a     06 01 00 00 
0d06e     00 00 00 BE 
0d072     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d076     00 00 00 00 
0d07a     06 01 00 00 
0d07e     00 00 00 BE 
0d082     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d086     10 00 00 00 
0d08a     06 01 00 CA 
0d08e     90 00 00 BE 
0d092     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d096     00 00 00 00 
0d09a     06 01 00 00 
0d09e     00 00 00 00 
0d0a2     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0d0a6     10 00 00 00 
0d0aa     06 01 00 00 
0d0ae     00 00 00 BE 
0d0b2     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d0b6     00 00 00 00 
0d0ba     06 01 00 00 
0d0be     00 00 00 BE 
0d0c2     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
0d0c6     10 00 00 00 
0d0ca     06 01 00 00 
0d0ce     00 00 00 BE 
0d0d2     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
0d0d6     1E 93 00 00 
0d0da     06 01 00 00 
0d0de     00 00 00 BE 
0d0e2     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d0e6     10 00 00 00 
0d0ea     06 01 00 00 
0d0ee     00 00 00 BE 
0d0f2     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d0f6     04 A1 00 00 
0d0fa     06 01 00 00 
0d0fe     00 00 00 BE 
0d102     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d106     06 01 00 00 
0d10a     06 01 00 00 
0d10e     00 00 00 BE 
0d112     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
0d116     06 01 00 00 
0d11a     06 01 00 00 
0d11e     00 00 00 BE 
0d122     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d126     06 01 00 00 
0d12a     06 01 00 00 
0d12e     00 00 00 BE 
0d132     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d136     06 01 00 00 
0d13a     06 01 00 00 
0d13e     0D 00 00 00 
0d142     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0d146     00 00 00 00 
      ...             
0d23e     00 00 00 00 
0d242     00 00 00    | 	byte	$00[255]
0d245     7F 1F 05 00 
0d249     BE 20 00 00 
0d24d     CA 90 00 00 
0d251     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d255     00 00 00 00 
0d259     00          | 	byte	$00[5]
0d25a     0A 02 00 00 
0d25e     00 00 00 00 
0d262     00 00 00 A0 
0d266     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d26a     0A 02 00 00 
0d26e     00 00 00 BE 
0d272     A0 00 00 7F 
0d276     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d27a     0A 02 00 00 
0d27e     00 00 00 BE 
0d282     A0 00 00 BE 
0d286     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d28a     0A 02 00 00 
0d28e     00 00 00 BE 
0d292     3C 20 00 00 
0d296     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d29a     0A 02 00 00 
0d29e     00 00 00 BE 
0d2a2     A0 00 00 F0 
0d2a6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d2aa     20 00 00 FE 
0d2ae     B0 00 00 BE 
0d2b2     D0 00 00 00 
0d2b6     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d2ba     00 00 00 00 
0d2be     00 00 00 00 
0d2c2     00 00 00    | 	byte	$00[11]
0d2c5     D6 4A 06 00 
0d2c9     BE 2E 93 00 
0d2cd     00 00 00 00 
0d2d1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d2d5     F0 0E 93 00 
0d2d9     BE 20 00 00 
0d2dd     00 00 00 00 
0d2e1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2e5     F0 40 00 00 
0d2e9     D6 20 00 00 
0d2ed     00 00 00 00 
0d2f1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d2f5     00 00 00 00 
0d2f9     00          | 	byte	$00[5]
0d2fa     0C 20 00 00 
0d2fe     00 00 00 BE 
0d302     A0 00 00 7F 
0d306     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d30a     20 00 00 CA 
0d30e     90 00 00 BE 
0d312     30 00 00 00 
0d316     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d31a     0A 02 00 00 
0d31e     00 00 00 00 
0d322     00 00 00 A0 
0d326     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d32a     0A 02 00 00 
0d32e     00 00 00 BE 
0d332     A0 00 00 7F 
0d336     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d33a     0A 02 00 00 
0d33e     00 00 00 BE 
0d342     A0 00 00 BE 
0d346     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d34a     00 00 00 00 
0d34e     00 00 00    | 	byte	$00[7]
0d351     BE 3C 20 00 
0d355     AA 1C 30 00 
0d359     BE 0E 93 00 
0d35d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d361     BE A0 00 00 
0d365     A0 10 00 00 
0d369     D6 20 00 00 
0d36d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d371     BE D0 00 00 
0d375     A0 1C 30 00 
0d379     00 0A 02 00 
0d37d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d381     00 00 00 00 
0d385     AA 10 00 00 
0d389     00 0A 02 00 
0d38d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d391     BE A0 00 00 
0d395     BE 10 00 00 
0d399     D6 2C 20 00 
0d39d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d3a1     00 00 00 00 
0d3a5     AA 10 00 00 
0d3a9     D6 2A 04 00 
0d3ad     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d3b1     BE 30 00 00 
0d3b5     00 00 00 00 
0d3b9     00 0A 04 00 
0d3bd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d3c1     BE A0 00 00 
0d3c5     A0 10 00 00 
0d3c9     F0 20 00 00 
0d3cd     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d3d1     BE 30 00 00 
0d3d5     00 0C 20 00 
0d3d9     00 00 00 00 
0d3dd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3e1     00 00 00 00 
0d3e5     A0 0E 93 00 
0d3e9     F0 20 00 00 
0d3ed     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d3f1     BE A0 00 00 
0d3f5     A0 1C 20 00 
0d3f9     F0 2C 30 00 
0d3fd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d401     BE A0 00 00 
0d405     A0 10 00 00 
0d409     F0 20 00 00 
0d40d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d411     BE 3C 20 00 
0d415     00 00 00 00 
0d419     00 00 00 00 
0d41d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d421     BE A0 00 00 
0d425     8F 10 00 00 
0d429     D6 20 00 00 
0d42d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d431     BE D0 00 00 
0d435     00 0C 20 00 
0d439     00 00 00 00 
0d43d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d441     00 00 00 00 
0d445     8F 1E 93 00 
0d449     D6 20 00 00 
0d44d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d451     BE A0 00 00 
0d455     A0 10 00 00 
0d459     BE 2C 30 00 
0d45d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d461     00 00 00 00 
0d465     8F 10 00 00 
0d469     D6 20 00 00 
0d46d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d471     BE 30 00 00 
0d475     00 00 00 00 
0d479     00 00 00 00 
0d47d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d481     BE A0 00 00 
0d485     BE 10 00 00 
0d489     BE 20 00 00 
0d48d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
0d491     BE 30 00 00 
0d495     00 00 00 00 
0d499     BE 2C 30 00 
0d49d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d4a1     00 00 00 00 
0d4a5     A0 10 00 01 
0d4a9     7D 20 00 00 
0d4ad     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0d4b1     BE A0 00 00 
0d4b5     00 00 00 00 
0d4b9     BE 2C 30 00 
0d4bd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d4c1     BE A0 00 00 
0d4c5     8F 10 00 00 
0d4c9     00 0A 06 00 
0d4cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
0d4d1     BE 3C 20 00 
0d4d5     00 00 00 00 
0d4d9     BE 0E 93 00 
0d4dd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d4e1     BE A0 00 00 
0d4e5     7F 10 00 00 
0d4e9     BE 2C 30 00 
0d4ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d4f1     BE D0 00 00 
0d4f5     00 00 00 00 
0d4f9     00 0A 02 00 
0d4fd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d501     00 00 00 00 
0d505     00 00 00 00 
0d509     00          | 	byte	$00[9]
0d50a     0A 02 00 00 
0d50e     00 00 00 BE 
0d512     A0 00 00 00 
0d516     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d51a     0A 02 00 00 
0d51e     00 00 00 00 
0d522     00 00 00 A0 
0d526     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0d52a     0A 02 00 00 
0d52e     00 00 00 BE 
0d532     30 00 00 8F 
0d536     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
0d53a     0A 02 00 00 
0d53e     0D 00 00 BE 
0d542     A0 00 00 00 
0d546     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d54a     00 00 00 00 
      ...             
0d63e     00 00 00 00 
0d642     00 00 00    | 	byte	$00[251]
0d645     7F 1F 05 00 
0d649     BE 20 00 00 
0d64d     CA 90 00 00 
0d651     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d655     00 00 00 00 
0d659     00          | 	byte	$00[5]
0d65a     0A 02 00 00 
0d65e     00 00 00 00 
0d662     00 00 00 A0 
0d666     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d66a     0A 02 00 00 
0d66e     00 00 00 BE 
0d672     A0 00 00 7F 
0d676     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d67a     0A 02 00 00 
0d67e     00 00 00 BE 
0d682     A0 00 00 BE 
0d686     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d68a     0A 02 00 00 
0d68e     00 00 00 BE 
0d692     3C 20 00 00 
0d696     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d69a     0A 02 00 00 
0d69e     00 00 00 BE 
0d6a2     A0 00 00 F0 
0d6a6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d6aa     20 00 00 FE 
0d6ae     B0 00 00 BE 
0d6b2     D0 00 00 00 
0d6b6     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d6ba     00 00 00 00 
0d6be     00 00 00 00 
0d6c2     00 00 00    | 	byte	$00[11]
0d6c5     D6 4A 06 00 
0d6c9     BE 2E 93 00 
0d6cd     00 00 00 00 
0d6d1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d6d5     F0 0E 93 00 
0d6d9     BE 20 00 00 
0d6dd     00 00 00 00 
0d6e1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d6e5     F0 40 00 00 
0d6e9     D6 20 00 00 
0d6ed     00 00 00 00 
0d6f1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d6f5     00 00 00 00 
0d6f9     00          | 	byte	$00[5]
0d6fa     0C 20 00 00 
0d6fe     00 00 00 BE 
0d702     A0 00 00 7F 
0d706     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d70a     20 00 00 CA 
0d70e     90 00 00 BE 
0d712     30 00 00 00 
0d716     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d71a     0A 02 00 00 
0d71e     00 00 00 00 
0d722     00 00 00 A0 
0d726     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d72a     0A 02 00 00 
0d72e     00 00 00 BE 
0d732     A0 00 00 7F 
0d736     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d73a     0A 02 00 00 
0d73e     00 00 00 BE 
0d742     A0 00 00 BE 
0d746     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d74a     00 00 00 00 
0d74e     00 00 00    | 	byte	$00[7]
0d751     BE 3C 20 00 
0d755     AA 1C 30 00 
0d759     BE 0E 93 00 
0d75d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d761     BE A0 00 00 
0d765     A0 10 00 00 
0d769     D6 20 00 00 
0d76d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d771     BE D0 00 00 
0d775     A0 1C 30 00 
0d779     00 0A 02 00 
0d77d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d781     00 00 00 00 
0d785     AA 10 00 00 
0d789     00 0A 02 00 
0d78d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d791     BE A0 00 00 
0d795     BE 10 00 00 
0d799     D6 2C 20 00 
0d79d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d7a1     00 00 00 00 
0d7a5     AA 10 00 00 
0d7a9     D6 2A 04 00 
0d7ad     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d7b1     BE 30 00 00 
0d7b5     00 00 00 00 
0d7b9     00 0A 04 00 
0d7bd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d7c1     BE A0 00 00 
0d7c5     A0 10 00 00 
0d7c9     F0 20 00 00 
0d7cd     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d7d1     BE 30 00 00 
0d7d5     00 0C 20 00 
0d7d9     00 00 00 00 
0d7dd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d7e1     00 00 00 00 
0d7e5     A0 0E 93 00 
0d7e9     F0 20 00 00 
0d7ed     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d7f1     BE A0 00 00 
0d7f5     A0 1C 20 00 
0d7f9     F0 2C 30 00 
0d7fd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d801     BE A0 00 00 
0d805     A0 10 00 00 
0d809     F0 20 00 00 
0d80d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d811     BE 3C 20 00 
0d815     00 00 00 00 
0d819     00 00 00 00 
0d81d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d821     BE A0 00 00 
0d825     8F 10 00 00 
0d829     D6 20 00 00 
0d82d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d831     BE D0 00 00 
0d835     00 0C 20 00 
0d839     00 00 00 00 
0d83d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d841     00 00 00 00 
0d845     8F 1E 93 00 
0d849     D6 20 00 00 
0d84d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d851     BE A0 00 00 
0d855     A0 10 00 00 
0d859     BE 2C 30 00 
0d85d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d861     00 00 00 00 
0d865     8F 10 00 00 
0d869     D6 20 00 00 
0d86d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d871     BE 30 00 00 
0d875     00 00 00 00 
0d879     00 00 00 00 
0d87d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d881     BE A0 00 00 
0d885     BE 10 00 01 
0d889     1D 20 00 00 
0d88d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0d891     BE 30 00 00 
0d895     BE 1C 30 00 
0d899     00 00 00 00 
0d89d     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d8a1     00 00 00 00 
0d8a5     BE 10 00 00 
0d8a9     00 00 00 00 
0d8ad     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
0d8b1     BE A0 00 00 
0d8b5     BE 1C 30 01 
0d8b9     1D 2C 30 00 
0d8bd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0d8c1     BE A0 00 00 
0d8c5     D6 10 00 00 
0d8c9     00 00 00 00 
0d8cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d8d1     BE 3C 20 00 
0d8d5     BE 1E D4 00 
0d8d9     00 00 00 00 
0d8dd     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
0d8e1     BE A0 00 00 
0d8e5     BE 10 00 01 
0d8e9     1D 0C 20 00 
0d8ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0d8f1     BE D0 00 00 
0d8f5     00 0A 01 00 
0d8f9     00 00 00 00 
0d8fd     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
0d901     00 00 00 00 
0d905     00          | 	byte	$00[5]
0d906     0A 01 00 00 
0d90a     00 00 00 00 
0d90e     0A 01 00 00 
0d912     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d916     0A 01 01 1D 
0d91a     0C 10 00 00 
0d91e     0A 01 00 00 
0d922     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d926     0A 01 00 00 
0d92a     00 00 00 00 
0d92e     0A 01 00 00 
0d932     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d936     0A 01 00 00 
0d93a     00 00 00 00 
0d93e     0A 01 00 00 
0d942     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d946     0A 01 00 00 
0d94a     0C 00 00 00 
0d94e     0A 01 00 00 
0d952     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d956     0A 01 00 00 
0d95a     0E 60 00 00 
0d95e     0A 01 00 00 
0d962     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
0d966     0A 01 00 00 
0d96a     0E 6F 00 00 
0d96e     0A 01 00 00 
0d972     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d976     0C 00 00 00 
0d97a     00 00 00 00 
0d97e     0C 00 00 00 
0d982     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
0d986     0F 1F 00 00 
0d98a     00 00 00 00 
0d98e     00 00 00 00 
0d992     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d996     00 00 00 00 
      ...             
0da3e     00 00 00 00 
0da42     00 00 00    | 	byte	$00[175]
0da45     7F 1F 05 00 
0da49     BE 20 00 00 
0da4d     CA 90 00 00 
0da51     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0da55     00 00 00 00 
0da59     00          | 	byte	$00[5]
0da5a     0A 02 00 00 
0da5e     00 00 00 00 
0da62     00 00 00 A0 
0da66     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0da6a     0A 02 00 00 
0da6e     00 00 00 BE 
0da72     A0 00 00 7F 
0da76     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0da7a     0A 02 00 00 
0da7e     00 00 00 BE 
0da82     A0 00 00 BE 
0da86     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0da8a     0A 02 00 00 
0da8e     00 00 00 BE 
0da92     3C 20 00 00 
0da96     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0da9a     0A 02 00 00 
0da9e     00 00 00 BE 
0daa2     A0 00 00 F0 
0daa6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0daaa     20 00 00 FE 
0daae     B0 00 00 BE 
0dab2     D0 00 00 00 
0dab6     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0daba     00 00 00 00 
0dabe     00 00 00 00 
0dac2     00 00 00    | 	byte	$00[11]
0dac5     D6 4A 06 00 
0dac9     BE 2E 93 00 
0dacd     00 00 00 00 
0dad1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0dad5     F0 0E 93 00 
0dad9     BE 20 00 00 
0dadd     00 00 00 00 
0dae1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dae5     F0 40 00 00 
0dae9     D6 20 00 00 
0daed     00 00 00 00 
0daf1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0daf5     00 00 00 00 
0daf9     00          | 	byte	$00[5]
0dafa     0C 20 00 00 
0dafe     00 00 00 BE 
0db02     A0 00 00 7F 
0db06     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0db0a     20 00 00 CA 
0db0e     90 00 00 BE 
0db12     30 00 00 00 
0db16     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0db1a     0A 02 00 00 
0db1e     00 00 00 00 
0db22     00 00 00 A0 
0db26     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0db2a     0A 02 00 00 
0db2e     00 00 00 BE 
0db32     A0 00 00 7F 
0db36     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0db3a     0A 02 00 00 
0db3e     00 00 00 BE 
0db42     A0 00 00 BE 
0db46     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0db4a     00 00 00 00 
0db4e     00 00 00    | 	byte	$00[7]
0db51     BE 3C 20 00 
0db55     AA 1C 30 00 
0db59     BE 0E 93 00 
0db5d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0db61     BE A0 00 00 
0db65     A0 10 00 00 
0db69     D6 20 00 00 
0db6d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0db71     BE D0 00 00 
0db75     A0 1C 30 00 
0db79     00 0A 02 00 
0db7d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0db81     00 00 00 00 
0db85     AA 10 00 00 
0db89     00 0A 02 00 
0db8d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0db91     BE A0 00 00 
0db95     BE 10 00 00 
0db99     D6 2C 20 00 
0db9d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0dba1     00 00 00 00 
0dba5     AA 10 00 00 
0dba9     D6 2A 04 00 
0dbad     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0dbb1     BE 30 00 00 
0dbb5     00 00 00 00 
0dbb9     00 0A 04 00 
0dbbd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0dbc1     BE A0 00 00 
0dbc5     A0 10 00 00 
0dbc9     F0 20 00 00 
0dbcd     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0dbd1     BE 30 00 00 
0dbd5     00 0C 20 00 
0dbd9     00 00 00 00 
0dbdd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dbe1     00 00 00 00 
0dbe5     A0 0E 93 00 
0dbe9     F0 20 00 00 
0dbed     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dbf1     BE A0 00 00 
0dbf5     A0 1C 20 00 
0dbf9     F0 2C 30 00 
0dbfd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0dc01     BE A0 00 00 
0dc05     A0 10 00 00 
0dc09     F0 20 00 00 
0dc0d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dc11     BE 3C 20 00 
0dc15     00 00 00 00 
0dc19     00 00 00 00 
0dc1d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc21     BE A0 00 00 
0dc25     8F 10 00 00 
0dc29     D6 20 00 00 
0dc2d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0dc31     BE D0 00 00 
0dc35     00 0C 20 00 
0dc39     00 00 00 00 
0dc3d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc41     00 00 00 00 
0dc45     8F 1E 93 00 
0dc49     D6 20 00 00 
0dc4d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dc51     BE A0 00 00 
0dc55     A0 10 00 00 
0dc59     BE 2C 30 00 
0dc5d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0dc61     00 00 00 00 
0dc65     8F 10 00 00 
0dc69     D6 20 00 00 
0dc6d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dc71     BE 30 00 00 
0dc75     00 00 00 00 
0dc79     00 00 00 00 
0dc7d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc81     BE A0 00 00 
0dc85     BE 10 00 01 
0dc89     1D 20 00 00 
0dc8d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0dc91     BE 30 00 00 
0dc95     00 00 00 00 
0dc99     00 00 00 00 
0dc9d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dca1     00 00 00 00 
0dca5     BE 10 00 00 
0dca9     00 00 00 00 
0dcad     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcb1     BE A0 00 00 
0dcb5     00 00 00 01 
0dcb9     1D 2C 30 00 
0dcbd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0dcc1     BE A0 00 00 
0dcc5     D6 10 00 00 
0dcc9     00 00 00 00 
0dccd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcd1     BE 3C 20 00 
0dcd5     00 00 00 00 
0dcd9     00 00 00 00 
0dcdd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dce1     BE A0 00 00 
0dce5     BE 10 00 01 
0dce9     1D 0C 20 00 
0dced     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0dcf1     BE D0 00 00 
0dcf5     00 00 00 00 
0dcf9     00 00 00 00 
0dcfd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd01     00 00 00 00 
0dd05     BE 10 00 00 
0dd09     00 00 00 00 
0dd0d     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd11     BE A0 00 00 
0dd15     BE 1E D3 01 
0dd19     1D 0C 10 00 
0dd1d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
0dd21     BE AC 20 00 
0dd25     A0 10 00 00 
0dd29     00 00 00 00 
0dd2d     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd31     BE 30 00 00 
0dd35     00 00 00 00 
0dd39     00 00 00 00 
0dd3d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd41     BE AD 00 00 
0dd45     00 00 00 00 
0dd49     00 00 00 00 
0dd4d     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd51     00 00 00 00 
      ...             
0de41     00 00 00 00 
0de45     00          | 	byte	$00[245]
0de46     08 09 06 07 
0de4a     06 08 09 08 
0de4e     09 0C 0A 09 
0de52     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
0de56     07 07 0A 0C 
0de5a     0A 09 0A 08 
0de5e     0A 09 0A 0C 
0de62     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
0de66     0D 0E 0C 0C 
0de6a     12 04 1B 08 
0de6e     04 08 13 21 
0de72     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
0de76     F7 FF F1 FD 
0de7a     09 FE 08 08 
0de7e     F3 FF FF 00 
0de82     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
0de86     22 12 2B 31 
0de8a     00 F7 FF 30 
0de8e     18 38 26 31 
0de92     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
0de96     13 25 26 1C 
0de9a     01 1B 13 FF 
0de9e     ED EC EB E0 
0dea2     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
0dea6     D0 D9 F6 E4 
0deaa     CF FF ED DE 
0deae     FF C7 C1 D9 
0deb2     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
0deb6     F0 F6 FF E4 
0deba     E7 F9 DF EC 
0debe     0C 09 12 2E 
0dec2     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
0dec6     1C 34 3C 18 
0deca     2E 26 1B 39 
0dece     25 4B 39 38 
0ded2     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
0ded6     2B 33 48 1C 
0deda     2E 39 2A 34 
0dede     34 32 1E 1C 
0dee2     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
0dee6     09 25 30 00 
0deea     E2 FA 00 CF 
0deee     EA C8 E2 FF 
0def2     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
0def6     FD F6 F2 D0 
0defa     CF E2 E4 B0 
0defe     D9 DA C6 E0 
0df02     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
0df06     CF F6 E8 F6 
0df0a     20 2A 46 4C 
0df0e     26 20 2C 18 
0df12     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
0df16     2E 48 39 3D 
0df1a     4C 36 42 4E 
0df1e     39 2A 42 46 
0df22     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
0df26     1E 00 DA C6 
0df2a     F3 EE EC F2 
0df2e     DB F1 FC 02 
0df32     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
0df36     DA C0 CF D5 
0df3a     C9 C4 BD B8 
0df3e     C1 C0 A6 C6 
0df42     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
0df46     EC EE FA 09 
0df4a     F9 12 33 13 
0df4e     FD FD 12 20 
0df52     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
0df56     49 4C 3E 4B 
0df5a     51 39 42 56 
0df5e     26 2E 3D 26 
0df62     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
0df66     43 26 28 38 
0df6a     45 39 2C 3A 
0df6e     3A 36 32 18 
0df72     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
0df76     00 FF 12 2C 
0df7a     20 33 43 2B 
0df7e     2A 26 09 00 
0df82     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
0df86     00 DA EC FE 
0df8a     F2 F0 F0 DA 
0df8e     F6 16 0C 08 
0df92     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
0df96     13 F7 EC F0 
0df9a     EA F1 F0 E6 
0df9e     F1 0D 0A 06 
0dfa2     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
0dfa6     13 12 25 2D 
0dfaa     21 09 ED F6 
0dfae     F2 DA D4 D0 
0dfb2     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
0dfb6     EB FD 00 ED 
0dfba     E4 EA DC CF 
0dfbe     D6 DA D0 CF 
0dfc2     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
0dfc6     CC B4 B2 CF 
0dfca     D6 D9 E4 DE 
0dfce     FF 10 04 19 
0dfd2     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
0dfd6     0F 19 28 26 
0dfda     36 44 3E 46 
0dfde     5E 58 49 4B 
0dfe2     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
0dfe6     20 38 40 30 
0dfea     32 26 21 2D 
0dfee     28 13 16 2B 
0dff2     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
0dff6     10 16 13 00 
0dffa     FF 00 E1 F1 
0dffe     06 01 0A 25 
0e002     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
0e006     0E 14 20 13 
0e00a     00 FD 02 02 
0e00e     00 01 F9 F8 
0e012     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
0e016     1B 33 3F 4A 
0e01a     3E 27 2E 32 
0e01e     1F 09 FE FF 
0e022     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
0e026     0D 21 1F 13 
0e02a     14 1B 2A 2B 
0e02e     26 1F 26 13 
0e032     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
0e036     DB D9 D0 CA 
0e03a     E1 E5 DF F1 
0e03e     F9 F8 F6 E4 
0e042     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
0e046     C4 CD C9 C3 
0e04a     BD B4 BA C2 
0e04e     C1 BE C1 C1 
0e052     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
0e056     FF 07 02 00 
0e05a     F2 F6 06 00 
0e05e     F3 FF 14 20 
0e062     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
0e066     58 4C 30 2C 
0e06a     2C 28 2D 26 
0e06e     13 25 38 2B 
0e072     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
0e076     25 24 26 26 
0e07a     26 27 26 1C 
0e07e     0E 04 02 FC 
0e082     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
0e086     18 18 1B 1C 
0e08a     12 20 1C 0E 
0e08e     0D 04 F7 FD 
0e092     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
0e096     04 00 FD FE 
0e09a     08 25 32 2D 
0e09e     36 4B 54 56 
0e0a2     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
0e0a6     21 13 09 12 
0e0aa     18 14 1F 1E 
0e0ae     20 24 20 24 
0e0b2     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
0e0b6     13 14 13 00 
0e0ba     F2 E4 E1 DC 
0e0be     C7 C6 CF E2 
0e0c2     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
0e0c6     F0 ED F1 EB 
0e0ca     E5 E5 E4 DA 
0e0ce     CD C4 C4 CF 
0e0d2     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
0e0d6     D4 CF D6 EA 
0e0da     F6 07 06 06 
0e0de     19 1F 10 0D 
0e0e2     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
0e0e6     04 0D 20 38 
0e0ea     42 40 40 45 
0e0ee     44 3C 2D 21 
0e0f2     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
0e0f6     1F 20 19 16 
0e0fa     25 1C 0D 19 
0e0fe     26 26 1A 13 
0e102     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
0e106     F7 E6 DA D4 
0e10a     E1 ED EE F7 
0e10e     FD FF 0F 13 
0e112     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
0e116     E8 E2 F3 FE 
0e11a     00 F6 E6 E4 
0e11e     F1 FC F7 FE 
0e122     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
0e126     42 48 46 43 
0e12a     36 2D 26 20 
0e12e     21 1A 1B 27 
0e132     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
0e136     3A 3A 31 2E 
0e13a     38 31 26 1B 
0e13e     18 16 0E 00 
0e142     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
0e146     DE DC D9 DB 
0e14a     EC ED E4 E7 
0e14e     F1 F0 F1 E8 
0e152     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
0e156     C6 CD CF CC 
0e15a     C8 CD D6 DE 
0e15e     E4 E6 F1 08 
0e162     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
0e166     22 28 27 26 
0e16a     16 19 20 21 
0e16e     20 2E 3C 44 
0e172     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
0e176     37 38 38 32 
0e17a     26 20 2D 30 
0e17e     26 1A 19 22 
0e182     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
0e186     18 20 2A 28 
0e18a     1E 0E 01 F7 
0e18e     ED E6 E6 EB 
0e192     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
0e196     08 16 15 04 
0e19a     F4 F2 F1 F1 
0e19e     EE EA E6 E6 
0e1a2     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
0e1a6     EB EC EE FD 
0e1aa     0F 1E 2D 33 
0e1ae     32 30 26 1C 
0e1b2     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
0e1b6     03 08 0E 18 
0e1ba     1F 20 20 27 
0e1be     2C 2D 26 1B 
0e1c2     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
0e1c6     00 ED ED EA 
0e1ca     DF DA D9 E6 
0e1ce     DE D8 D6 DE 
0e1d2     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
0e1d6     F1 ED DF D8 
0e1da     D9 DB D0 C8 
0e1de     CC CF D3 D5 
0e1e2     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
0e1e6     F8 FF 03 0A 
0e1ea     16 1F 20 20 
0e1ee     22 26 2B 28 
0e1f2     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
0e1f6     46 48 46 4F 
0e1fa     56 51 4C 3C 
0e1fe     34 36 34 30 
0e202     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
0e206     30 30 27 1C 
0e20a     18 1B 24 26 
0e20e     22 27 27 1C 
0e212     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
0e216     F4 EB EC F1 
0e21a     FD 0D 16 10 
0e21e     0A 0D 09 02 
0e222     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
0e226     F2 F1 F3 F3 
0e22a     ED EC F0 EE 
0e22e     F3 FF 0D 20 
0e232     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
0e236     2A 2D 26 18 
0e23a     06 02 07 07 
0e23e     08 09 10 1C 
0e242     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
0e246     20 1F 15 10 
0e24a     0A 04 FC ED 
0e24e     DE DF DF DA 
0e252     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
0e256     C4 C9 D6 DF 
0e25a     DC D8 D9 DE 
0e25e     E1 DA CD C7 
0e262     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
0e266     BD BC C6 CD 
0e26a     D5 DC E2 EC 
0e26e     FC 02 03 07 
0e272     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
0e276     18 16 1B 21 
0e27a     27 2A 31 3D 
0e27e     4B 50 51 50 
0e282     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
0e286     39 30 2A 32 
0e28a     3A 34 30 34 
0e28e     34 2D 28 2A 
0e292     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
0e296     27 22 1F 1C 
0e29a     13 00 F4 F4 
0e29e     F9 FD 03 0D 
0e2a2     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
0e2a6     14 0C 06 01 
0e2aa     FD F9 F7 F7 
0e2ae     F9 F9 F7 F2 
0e2b2     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
0e2b6     16 20 26 27 
0e2ba     33 3A 34 2B 
0e2be     26 22 18 0E 
0e2c2     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
0e2c6     18 19 20 24 
0e2ca     26 26 26 26 
0e2ce     24 1C 13 0A 
0e2d2     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
0e2d6     EB E8 DF D3 
0e2da     D0 D3 D6 D8 
0e2de     D9 DA DC E2 
0e2e2     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
0e2e6     D6 D8 D5 CC 
0e2ea     C3 C0 C4 C6 
0e2ee     C3 C4 CF E0 
0e2f2     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
0e2f6     F9 03 0E 10 
0e2fa     0F 13 13 0F 
0e2fe     0E 0F 0F 16 
0e302     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
0e306     3A 44 44 3E 
0e30a     34 2B 27 24 
0e30e     1F 1E 22 27 
0e312     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
0e316     20 2A 2B 26 
0e31a     26 28 27 27 
0e31e     1F 15 0A 02 
0e322     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
0e326     03 0E 14 1B 
0e32a     1F 1F 1C 18 
0e32e     13 0A 07 00 
0e332     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
0e336     F4 F0 F1 FA 
0e33a     03 0A 15 24 
0e33e     30 34 36 3C 
0e342     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
0e346     24 1E 18 18 
0e34a     19 1C 1F 20 
0e34e     24 2A 2E 30 
0e352     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
0e356     1C 0E 04 00 
0e35a     FD F7 EE E5 
0e35e     DF DA D9 D9 
0e362     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
0e366     E1 E0 E1 E2 
0e36a     E6 E6 E0 D8 
0e36e     D3 D0 CC C4 
0e372     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
0e376     D9 E2 E6 E7 
0e37a     EB F6 FF 01 
0e37e     06 0D 16 19 
0e382     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
0e386     18 19 1B 22 
0e38a     2E 38 43 44 
0e38e     44 44 3D 30 
0e392     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
0e396     26 22 1C 1B 
0e39a     1E 22 26 1F 
0e39e     1E 24 27 25 
0e3a2     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
0e3a6     0C 00 F4 F0 
0e3aa     F0 F1 FA FF 
0e3ae     07 0A 10 16 
0e3b2     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
0e3b6     FC FD FC F7 
0e3ba     F2 F0 EA E5 
0e3be     E6 EA F2 FA 
0e3c2     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
0e3c6     2B 33 37 34 
0e3ca     2D 22 1C 1C 
0e3ce     18 14 12 15 
0e3d2     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
0e3d6     27 30 34 36 
0e3da     34 27 1C 18 
0e3de     13 0F 04 FA 
0e3e2     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
0e3e6     E0 DE E0 E1 
0e3ea     E0 DF E7 EE 
0e3ee     F4 F2 F0 EE 
0e3f2     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
0e3f6     D3 C8 C6 CC 
0e3fa     D2 D6 D9 E0 
0e3fe     EC F1 F3 F7 
0e402     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
0e406     13 13 15 19 
0e40a     18 14 13 18 
0e40e     1B 20 2A 33 
0e412     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
0e416     32 2B 28 28 
0e41a     26 20 19 19 
0e41e     1B 1A 19 1A 
0e422     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
0e426     21 21 22 21 
0e42a     1C 15 09 00 
0e42e     F3 F2 F2 F1 
0e432     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
0e436     10 13 10 0E 
0e43a     09 04 00 00 
0e43e     FE F9 F2 E8 
0e442     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
0e446     F2 F6 FD 02 
0e44a     10 20 2C 30 
0e44e     32 31 2D 26 
0e452     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
0e456     0E 10 14 13 
0e45a     14 1B 27 2E 
0e45e     30 2B 26 22 
0e462     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
0e466     FE F9 F1 E7 
0e46a     E4 E1 DF DA 
0e46e     D3 D0 D2 D8 
0e472     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
0e476     E5 EC EE E8 
0e47a     DC D3 CC C7 
0e47e     C3 C3 C8 CF 
0e482     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
0e486     F1 FA FF 04 
0e48a     09 10 16 1A 
0e48e     1B 1C 1E 1E 
0e492     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
0e496     33 43 4F 4F 
0e49a     4C 49 48 45 
0e49e     3D 37 31 2B 
0e4a2     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
0e4a6     25 27 27 28 
0e4aa     27 28 2D 32 
0e4ae     31 2C 26 1A 
0e4b2     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
0e4b6     F2 F2 F4 F7 
0e4ba     FF 08 0F 10 
0e4be     0C 09 09 04 
0e4c2     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
0e4c6     ED E5 E4 E5 
0e4ca     E6 E6 E6 EA 
0e4ce     F3 FC 08 16 
0e4d2     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
0e4d6     2E 28 1F 18 
0e4da     16 18 13 0C 
0e4de     0A 0F 18 21 
0e4e2     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
0e4e6     2D 2B 21 1E 
0e4ea     16 0E 04 FA 
0e4ee     F3 EE EC E8 
0e4f2     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
0e4f6     D9 D8 D5 D8 
0e4fa     DE E2 EA EB 
0e4fe     EA EA E4 D5 
0e502     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
0e506     C6 C9 CE D4 
0e50a     DB E5 E8 ED 
0e50e     F4 FC 02 06 
0e512     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
0e516     18 13 0C 0C 
0e51a     16 20 2A 34 
0e51e     3C 3D 42 44 
0e522     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
0e526     31 2B 26 21 
0e52a     22 25 24 21 
0e52e     1F 20 25 2B 
0e532     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
0e536     2B 26 1C 13 
0e53a     0A 01 F9 F7 
0e53e     F9 FF 08 0F 
0e542     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
0e546     18 19 18 10 
0e54a     09 00 FC F6 
0e54e     F4 F3 F2 ED 
0e552     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
0e556     0D 1A 25 32 
0e55a     36 34 32 31 
0e55e     30 2B 26 1A 
0e562     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
0e566     18 20 26 2C 
0e56a     2E 2D 2C 2C 
0e56e     2C 26 18 0C 
0e572     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
0e576     E5 DF DA D6 
0e57a     D5 D0 CD CD 
0e57e     CD CE D0 D6 
0e582     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
0e586     DA CE C7 C2 
0e58a     BD BB BB C1 
0e58e     CA CE D2 D9 
0e592     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
0e596     F8 FD 08 12 
0e59a     18 14 13 0C 
0e59e     0C 13 1A 20 
0e5a2     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
0e5a6     43 42 40 42 
0e5aa     3E 39 30 2B 
0e5ae     28 27 26 1E 
0e5b2     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
0e5b6     21 25 2A 2D 
0e5ba     2E 2C 2A 26 
0e5be     1B 15 09 FD 
0e5c2     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
0e5c6     FF 02 06 09 
0e5ca     0C 12 14 15 
0e5ce     13 09 01 FD 
0e5d2     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
0e5d6     EA EC EB EB 
0e5da     EE F8 06 12 
0e5de     1E 26 2C 31 
0e5e2     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
0e5e6     26 21 18 14 
0e5ea     15 16 20 26 
0e5ee     2A 2C 33 3C 
0e5f2     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
0e5f6     26 20 19 0E 
0e5fa     04 00 F8 F0 
0e5fe     EA E6 E2 E1 
0e602     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
0e606     D9 E5 EC EC 
0e60a     ED EB E6 DA 
0e60e     D0 C9 C7 C8 
0e612     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
0e616     D4 DE E4 E8 
0e61a     EA EC F3 FE 
0e61e     07 0A 0C 09 
0e622     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
0e626     0A 14 1E 24 
0e62a     27 2E 36 39 
0e62e     3C 36 33 30 
0e632     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
0e636     15 14 13 12 
0e63a     0E 10 18 1A 
0e63e     21 24 25 27 
0e642     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
0e646     07 00 F9 F7 
0e64a     FA FC FE FF 
0e64e     03 09 12 16 
0e652     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
0e656     0F 07 02 FD 
0e65a     FA F7 F2 ED 
0e65e     E8 EC F4 FD 
0e662     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
0e666     2B 30 33 34 
0e66a     34 30 28 1E 
0e66e     18 14 18 13 
0e672     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
0e676     2D 32 36 36 
0e67a     32 30 26 1C 
0e67e     14 0D 06 FD 
0e682     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
0e686     E1 DB D6 D0 
0e68a     D0 D2 D6 DC 
0e68e     E7 EE F0 EA 
0e692     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
0e696     CE C9 C3 C7 
0e69a     CD D4 DC E1 
0e69e     E5 E7 F0 F6 
0e6a2     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
0e6a6     1A 18 13 12 
0e6aa     13 14 16 1E 
0e6ae     22 2A 31 3C 
0e6b2     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
0e6b6     3E 39 34 31 
0e6ba     2C 26 21 1C 
0e6be     18 13 14 19 
0e6c2     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
0e6c6     28 2A 2B 26 
0e6ca     1C 13 06 00 
0e6ce     FC F7 F4 F3 
0e6d2     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
0e6d6     08 0D 0F 13 
0e6da     10 0C 07 04 
0e6de     00 FC F7 EE 
0e6e2     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
0e6e6     E7 F0 F6 FF 
0e6ea     0A 14 1E 2A 
0e6ee     31 32 30 27 
0e6f2     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
0e6f6     13 10 13 15 
0e6fa     1E 22 28 31 
0e6fe     36 37 32 2E 
0e702     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
0e706     09 03 00 F7 
0e70a     F1 EA E4 DF 
0e70e     DA D0 CD D0 
0e712     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
0e716     EB E8 E8 E6 
0e71a     DB D5 CE C7 
0e71e     C6 C9 CF D3 
0e722     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
0e726     EA F1 FA 03 
0e72a     09 0F 13 0F 
0e72e     10 12 10 10 
0e732     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
0e736     2E 33 3A 3F 
0e73a     44 43 3E 3A 
0e73e     39 37 30 28 
0e742     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
0e746     16 19 1B 1C 
0e74a     20 28 2E 33 
0e74e     30 2A 24 1E 
0e752     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
0e756     FE FA FA FA 
0e75a     FF 06 0E 10 
0e75e     16 16 15 13 
0e762     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
0e766     01 F8 F2 ED 
0e76a     EC EB EE F1 
0e76e     F4 FD 06 12 
0e772     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
0e776     30 30 2B 26 
0e77a     1C 18 14 13 
0e77e     0E 0F 19 21 
0e782     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
0e786     32 32 2D 26 
0e78a     1C 14 0C 04 
0e78e     FD F4 F1 EE 
0e792     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
0e796     C4 CA CF D4 
0e79a     D9 DB DE E1 
0e79e     E0 DC D5 CC 
0e7a2     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
0e7a6     C3 C8 CA CE 
0e7aa     D0 D6 E0 EC 
0e7ae     F6 FD 02 07 
0e7b2     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
0e7b6     10 0D 12 15 
0e7ba     19 22 2E 36 
0e7be     3C 42 42 46 
0e7c2     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
0e7c6     34 2C 26 21 
0e7ca     20 1F 18 13 
0e7ce     16 1C 22 27 
0e7d2     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
0e7d6     28 21 1C 16 
0e7da     0F 09 00 FC 
0e7de     FC FF FF 06 
0e7e2     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
0e7e6     15 15 14 13 
0e7ea     0E 07 00 FA 
0e7ee     F3 F1 F0 ED 
0e7f2     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
0e7f6     FF 0A 14 1E 
0e7fa     26 2D 2C 2C 
0e7fe     2B 26 21 1C 
0e802     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
0e806     1B 1F 28 31 
0e80a     33 38 3D 32 
0e80e     32 30 28 21 
0e812     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
0e816     07 00 ED DF 
0e81a     D6 D2 D4 D4 
0e81e     D5 DB DF E2 
0e822     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
0e826     DA D2 C8 C4 
0e82a     C3 C9 C8 C9 
0e82e     C7 C9 CD D4 
0e832     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
0e836     FA 02 06 08 
0e83a     0C 0A 07 07 
0e83e     08 08 12 16 
0e842     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
0e846     36 36 37 38 
0e84a     34 2C 27 22 
0e84e     21 1C 13 0C 
0e852     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
0e856     16 18 1E 26 
0e85a     21 20 21 1F 
0e85e     1A 15 0C 07 
0e862     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
0e866     FF 09 10 16 
0e86a     19 1B 1F 20 
0e86e     22 1F 18 0F 
0e872     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
0e876     FC F9 F7 F4 
0e87a     FA FF 07 12 
0e87e     1E 26 2D 32 
0e882     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
0e886     26 1E 1A 13 
0e88a     14 12 15 1E 
0e88e     26 2C 31 32 
0e892     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
0e896     21 1C 16 15 
0e89a     13 09 00 F7 
0e89e     EB E1 D8 D0 
0e8a2     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
0e8a6     D8 DB E0 E7 
0e8aa     E4 DC DA CE 
0e8ae     CD CA C7 C6 
0e8b2     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
0e8b6     CC D4 D9 E2 
0e8ba     EB F3 FE 06 
0e8be     0C 0D 0E 0D 
0e8c2     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
0e8c6     18 22 26 2A 
0e8ca     2E 37 3C 42 
0e8ce     3F 39 3A 39 
0e8d2     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
0e8d6     19 13 0E 0D 
0e8da     0E 13 14 15 
0e8de     15 15 18 1C 
0e8e2     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
0e8e6     03 FC F2 EA 
0e8ea     E8 EB F1 F6 
0e8ee     F8 FA 01 08 
0e8f2     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
0e8f6     0E 0A 07 06 
0e8fa     00 F7 F4 F3 
0e8fe     F0 F0 F6 FF 
0e902     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
0e906     25 33 39 3E 
0e90a     3E 39 34 2E 
0e90e     26 1A 19 19 
0e912     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
0e916     37 3D 40 3E 
0e91a     36 31 2C 27 
0e91e     24 1F 1A 15 
0e922     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
0e926     E2 DC D5 D2 
0e92a     D0 D4 DE E2 
0e92e     E4 E7 E7 E1 
0e932     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
0e936     CE CC CC C8 
0e93a     C9 CA CF CF 
0e93e     D6 DE E7 EC 
0e942     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
0e946     0D 0C 08 09 
0e94a     0D 10 13 15 
0e94e     1A 24 2D 32 
0e952     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
0e956     3C 39 36 32 
0e95a     28 20 18 13 
0e95e     13 10 13 12 
0e962     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
0e966     18 1B 16 18 
0e96a     13 10 09 00 
0e96e     F9 F3 F2 F1 
0e972     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
0e976     03 0A 12 13 
0e97a     15 15 13 0E 
0e97e     0C 09 04 FC 
0e982     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
0e986     F4 F6 FD 03 
0e98a     0A 16 20 2A 
0e98e     33 3A 3C 3C 
0e992     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
0e996     18 13 13 1A 
0e99a     1F 2A 33 39 
0e99e     3A 3A 36 33 
0e9a2     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
0e9a6     1C 18 0C 02 
0e9aa     00 F0 E4 D5 
0e9ae     D2 CC CC D0 
0e9b2     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
0e9b6     E1 E4 DC DB 
0e9ba     DA D3 CD CE 
0e9be     CC CC C8 C9 
0e9c2     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
0e9c6     E6 EC F9 FF 
0e9ca     07 09 08 0E 
0e9ce     0F 0E 10 13 
0e9d2     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
0e9d6     2E 32 36 3D 
0e9da     3F 3F 42 40 
0e9de     3E 36 2B 26 
0e9e2     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
0e9e6     14 18 18 1A 
0e9ea     1E 1E 1F 22 
0e9ee     22 21 1A 14 
0e9f2     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
0e9f6     F8 F7 F7 F4 
0e9fa     F7 FC FF 07 
0e9fe     0C 0D 13 13 
0ea02     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
0ea06     00 F9 F3 EE 
0ea0a     ED EC F0 F0 
0ea0e     F4 F9 FF 07 
0ea12     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
0ea16     36 32 30 2C 
0ea1a     26 1C 13 0F 
0ea1e     0F 16 1C 25 
0ea22     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
0ea26     38 34 33 31 
0ea2a     2B 27 21 1C 
0ea2e     18 0E 01 F9 
0ea32     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
0ea36     D2 D8 DA DA 
0ea3a     E0 E1 E5 E2 
0ea3e     E0 DC DA D4 
0ea42     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
0ea46     C4 C8 CA CF 
0ea4a     D3 D8 DE E6 
0ea4e     EC F6 FE FE 
0ea52     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
0ea56     0D 0C 0F 16 
0ea5a     16 1B 25 2B 
0ea5e     2E 36 3C 40 
0ea62     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
0ea66     2D 26 1E 18 
0ea6a     0F 0C 0C 0F 
0ea6e     0E 0E 14 18 
0ea72     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
0ea76     18 13 0F 0E 
0ea7a     09 07 01 F9 
0ea7e     F7 F8 FA FF 
0ea82     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
0ea86     1B 21 26 20 
0ea8a     1E 14 13 09 
0ea8e     02 00 FE FA 
0ea92     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
0ea96     03 0F 1B 24 
0ea9a     2E 36 36 40 
0ea9e     39 32 2B 21 
0eaa2     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
0eaa6     15 20 28 2E 
0eaaa     34 39 37 36 
0eaae     31 27 26 27 
0eab2     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
0eab6     06 F9 ED E1 
0eaba     DA CF CF C8 
0eabe     CF D6 DB DC 
0eac2     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
0eac6     D2 CE CA C7 
0eaca     C1 C0 C1 C2 
0eace     C3 CA CC D8 
0ead2     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
0ead6     FA 08 09 09 
0eada     0F 14 14 19 
0eade     16 19 24 28 
0eae2     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
0eae6     49 4F 4C 48 
0eaea     4C 45 39 32 
0eaee     2B 1F 1C 13 
0eaf2     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
0eaf6     10 13 14 16 
0eafa     14 10 0C 0A 
0eafe     09 04 00 F9 
0eb02     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
0eb06     E8 E8 F1 F9 
0eb0a     FC 07 12 15 
0eb0e     18 19 13 0C 
0eb12     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
0eb16     FD F9 F9 F9 
0eb1a     F7 FA 03 09 
0eb1e     12 1B 27 31 
0eb22     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
0eb26     34 2B 1F 1A 
0eb2a     19 19 1C 22 
0eb2e     2A 2E 38 3F 
0eb32     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
0eb36     31 2E 2B 28 
0eb3a     26 18 0D 04 
0eb3e     F9 ED E2 DA 
0eb42     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
0eb46     DC DE DF E1 
0eb4a     DC D9 D8 D0 
0eb4e     C8 C8 C2 BB 
0eb52     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
0eb56     C4 C6 CE D9 
0eb5a     E2 EB F1 F8 
0eb5e     FD 06 04 FF 
0eb62     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
0eb66     13 15 1E 24 
0eb6a     2C 32 38 42 
0eb6e     49 4C 4C 48 
0eb72     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
0eb76     21 1E 19 14 
0eb7a     16 1B 1A 1F 
0eb7e     21 1C 1B 1E 
0eb82     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
0eb86     0C 07 00 F8 
0eb8a     F4 F2 F1 ED 
0eb8e     F0 F6 F9 FF 
0eb92     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
0eb96     15 0E 09 04 
0eb9a     00 FC F9 F7 
0eb9e     F2 F7 F6 F8 
0eba2     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
0eba6     1E 2A 37 3D 
0ebaa     3D 39 31 2D 
0ebae     26 19 19 16 
0ebb2     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
0ebb6     2E 33 37 2E 
0ebba     30 34 32 31 
0ebbe     31 26 21 1C 
0ebc2     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
0ebc6     E2 DB D4 D3 
0ebca     D4 D8 D8 DE 
0ebce     E2 E1 E0 E1 
0ebd2     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
0ebd6     C6 C4 C2 C1 
0ebda     C0 BE C3 C9 
0ebde     CF D5 D9 E7 
0ebe2     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
0ebe6     03 09 08 0D 
0ebea     0E 0F 15 18 
0ebee     1A 21 28 2C 
0ebf2     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
0ebf6     46 48 45 3F 
0ebfa     3A 32 26 1A 
0ebfe     15 10 14 16 
0ec02     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
0ec06     1A 18 18 13 
0ec0a     0D 09 03 00 
0ec0e     00 FA F2 EE 
0ec12     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
0ec16     F1 FC 03 0E 
0ec1a     0D 12 14 13 
0ec1e     0C 0A 06 04 
0ec22     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
0ec26     F8 F8 F9 FF 
0ec2a     08 12 20 27 
0ec2e     2E 3A 3E 39 
0ec32     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
0ec36     20 1A 18 1A 
0ec3a     24 28 2E 33 
0ec3e     36 39 3A 39 
0ec42     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
0ec46     2C 28 1F 13 
0ec4a     04 F7 EA E2 
0ec4e     DA D4 D3 D5 
0ec52     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
0ec56     DE DE DF D5 
0ec5a     CE CE C9 BD 
0ec5e     BA B7 B7 B7 
0ec62     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
0ec66     D6 DE E6 EE 
0ec6a     F2 F8 FF 01 
0ec6e     04 0A 0D 0E 
0ec72     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
0ec76     21 2A 33 3D 
0ec7a     42 46 49 4C 
0ec7e     4C 4A 40 34 
0ec82     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
0ec86     19 1A 1A 1A 
0ec8a     1B 1C 21 1F 
0ec8e     1C 15 13 12 
0ec92     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
0ec96     01 F8 F4 EE 
0ec9a     EE F2 F4 FA 
0ec9e     03 0E 10 14 
0eca2     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
0eca6     09 00 FD F9 
0ecaa     F3 F1 F2 F0 
0ecae     F1 F8 FA 03 
0ecb2     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
0ecb6     33 34 34 30 
0ecba     27 21 1B 19 
0ecbe     18 16 1B 21 
0ecc2     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
0ecc6     38 3A 39 37 
0ecca     38 37 30 2A 
0ecce     26 1C 10 01 
0ecd2     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
0ecd6     D6 D3 D2 D5 
0ecda     D9 DE DE DF 
0ecde     E1 DC D6 D2 
0ece2     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
0ece6     BB BA BA BE 
0ecea     C3 C9 D4 DE 
0ecee     E6 F1 F6 FA 
0ecf2     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
0ecf6     0E 13 13 15 
0ecfa     18 1C 21 2A 
0ecfe     2B 31 3C 42 
0ed02     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
0ed06     44 39 30 27 
0ed0a     22 1F 19 14 
0ed0e     15 15 19 1A 
0ed12     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
0ed16     0C 0D 0C 0A 
0ed1a     07 00 F9 F3 
0ed1e     F2 EB E6 EB 
0ed22     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
0ed26     08 12 14 14 
0ed2a     15 13 0F 0A 
0ed2e     04 00 FD FA 
0ed32     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
0ed36     FF 0A 14 1F 
0ed3a     2A 33 38 3C 
0ed3e     39 36 34 2B 
0ed42     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
0ed46     1C 20 26 2A 
0ed4a     2D 31 33 37 
0ed4e     3A 36 39 36 
0ed52     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
0ed56     13 04 F9 ED 
0ed5a     E0 DC DA D0 
0ed5e     D2 D4 D4 DC 
0ed62     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
0ed66     D8 D9 D3 CC 
0ed6a     C7 C0 BD B8 
0ed6e     B6 B8 BE C1 
0ed72     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
0ed76     F1 F8 FA FF 
0ed7a     07 07 0A 0D 
0ed7e     10 16 1A 1B 
0ed82     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
0ed86     36 3D 45 4B 
0ed8a     4C 49 45 3D 
0ed8e     36 30 26 21 
0ed92     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
0ed96     1A 18 18 13 
0ed9a     10 0F 0F 0C 
0ed9e     0D 0A 07 03 
0eda2     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
0eda6     EC EC EC F3 
0edaa     FA FF 09 0C 
0edae     14 1A 19 18 
0edb2     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
0edb6     02 FE FA F8 
0edba     F8 F9 FF 07 
0edbe     0F 1A 20 2C 
0edc2     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
0edc6     31 2B 26 1E 
0edca     1A 18 19 1A 
0edce     1B 1F 27 2B 
0edd2     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
0edd6     36 34 34 33 
0edda     2B 26 15 07 
0edde     FC F2 E8 E0 
0ede2     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
0ede6     D8 D9 DB E0 
0edea     DE DC DE DA 
0edee     D8 D4 CE C7 
0edf2     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
0edf6     BE C3 CE D5 
0edfa     DE E6 F0 F8 
0edfe     FD 01 07 0C 
0ee02     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
0ee06     1B 20 20 22 
0ee0a     27 2D 37 3E 
0ee0e     46 4A 4E 4E 
0ee12     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
0ee16     2B 26 1C 19 
0ee1a     1A 1A 18 13 
0ee1e     13 10 0E 0C 
0ee22     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
0ee26     04 00 FA F7 
0ee2a     F0 E8 E4 E4 
0ee2e     E6 EA EC F6 
0ee32     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
0ee36     10 12 13 0E 
0ee3a     0C 07 02 01 
0ee3e     FC FA F9 F8 
0ee42     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
0ee46     1B 25 2E 33 
0ee4a     3A 39 33 31 
0ee4e     2D 27 21 1A 
0ee52     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
0ee56     25 2A 2D 30 
0ee5a     34 36 37 3D 
0ee5e     3F 39 32 28 
0ee62     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
0ee66     F0 E6 DE D5 
0ee6a     D4 D3 D3 D9 
0ee6e     D9 D9 D9 DB 
0ee72     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
0ee76     CA C4 BD B8 
0ee7a     B6 B6 B6 BB 
0ee7e     C1 CC D4 DB 
0ee82     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
0ee86     FD 02 06 0C 
0ee8a     10 12 15 18 
0ee8e     19 1A 20 25 
0ee92     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
0ee96     4C 4E 50 4C 
0ee9a     40 36 32 2D 
0ee9e     26 22 21 20 
0eea2     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
0eea6     18 16 15 13 
0eeaa     10 0E 0E 09 
0eeae     02 FD FC F4 
0eeb2     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
0eeb6     F6 FA FF 0A 
0eeba     0F 15 18 1A 
0eebe     18 16 10 0C 
0eec2     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
0eec6     F8 FC FF 02 
0eeca     07 0E 19 22 
0eece     2A 31 33 37 
0eed2     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
0eed6     1C 19 18 14 
0eeda     16 1B 21 24 
0eede     22 25 28 31 
0eee2     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
0eee6     31 2B 26 15 
0eeea     09 01 F7 E8 
0eeee     DF D8 D8 D6 
0eef2     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
0eef6     DE DF DF DF 
0eefa     DB D8 D3 CC 
0eefe     C4 C0 BC B7 
0ef02     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
0ef06     D3 DB E2 EB 
0ef0a     F1 F6 FA FF 
0ef0e     06 09 0C 12 
0ef12     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
0ef16     20 26 2A 30 
0ef1a     3A 44 46 49 
0ef1e     4C 48 40 39 
0ef22     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
0ef26     1E 19 16 15 
0ef2a     14 14 10 0D 
0ef2e     0E 0C 09 07 
0ef32     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
0ef36     F4 EE EC E8 
0ef3a     E7 EB F1 F4 
0ef3e     FA 03 0D 14 
0ef42     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
0ef46     19 15 0F 09 
0ef4a     06 03 03 01 
0ef4e     01 07 0D 16 
0ef52     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
0ef56     39 3C 3A 39 
0ef5a     36 2D 26 1E 
0ef5e     1B 1E 1F 1F 
0ef62     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
0ef66     28 2C 31 34 
0ef6a     36 36 32 2E 
0ef6e     2B 21 13 04 
0ef72     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
0ef76     DB D6 D4 D5 
0ef7a     D5 D6 D9 DB 
0ef7e     DA DB DB DA 
0ef82     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
0ef86     B8 B6 B4 B5 
0ef8a     BC C3 C9 D2 
0ef8e     D9 E2 EA EC 
0ef92     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
0ef96     08 0D 10 12 
0ef9a     14 18 1A 1F 
0ef9e     26 2D 38 42 
0efa2     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
0efa6     44 3E 3A 34 
0efaa     30 26 21 1F 
0efae     19 18 16 18 
0efb2     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
0efb6     0C 0A 08 07 
0efba     02 FC F4 F1 
0efbe     ED EB E8 E5 
0efc2     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
0efc6     06 0D 10 1A 
0efca     1C 1C 16 16 
0efce     13 0E 07 02 
0efd2     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
0efd6     06 0D 16 1E 
0efda     26 2D 33 39 
0efde     3C 34 30 2A 
0efe2     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
0efe6     1E 19 19 18 
0efea     19 1E 25 2A 
0efee     30 34 37 39 
0eff2     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
0eff6     1C 0E 04 F9 
0effa     F2 ED E6 DF 
0effe     DB DA DB D9 
0f002     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
0f006     E4 DF DC DA 
0f00a     D0 C4 BE BA 
0f00e     B8 B5 BA BE 
0f012     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
0f016     E5 E7 EE F3 
0f01a     F9 FF 02 06 
0f01e     08 0A 0C 10 
0f022     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
0f026     2C 36 3F 43 
0f02a     44 46 43 3E 
0f02e     39 32 28 26 
0f032     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
0f036     16 18 13 0F 
0f03a     0D 0F 0E 0E 
0f03e     0A 06 03 FF 
0f042     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
0f046     E8 EA EA EC 
0f04a     F3 FA 03 0A 
0f04e     10 18 1C 20 
0f052     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
0f056     0D 09 09 04 
0f05a     04 07 09 0E 
0f05e     14 1A 24 2D 
0f062     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
0f066     34 31 30 28 
0f06a     26 24 1F 1A 
0f06e     18 16 19 1B 
0f072     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
0f076     33 36 38 38 
0f07a     32 27 21 15 
0f07e     09 00 F4 ED 
0f082     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
0f086     D9 DB DA DE 
0f08a     E2 E6 E7 E5 
0f08e     E0 DF D5 CE 
0f092     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
0f096     BE C2 C8 CE 
0f09a     D5 D9 E0 E6 
0f09e     EE F6 FA FF 
0f0a2     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
0f0a6     0F 0F 10 15 
0f0aa     19 24 2C 32 
0f0ae     38 3F 44 44 
0f0b2     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
0f0b6     32 2B 24 1F 
0f0ba     1C 19 16 15 
0f0be     13 10 10 10 
0f0c2     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
0f0c6     04 00 FC F7 
0f0ca     F0 E8 E4 E5 
0f0ce     E4 E6 ED F2 
0f0d2     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
0f0d6     14 1A 19 18 
0f0da     19 13 0E 0C 
0f0de     07 04 04 03 
0f0e2     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
0f0e6     20 27 2D 31 
0f0ea     34 36 32 32 
0f0ee     30 30 28 26 
0f0f2     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
0f0f6     18 19 1B 1E 
0f0fa     24 2A 31 36 
0f0fe     3A 3C 36 31 
0f102     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
0f106     00 F4 ED E6 
0f10a     E1 DE DC DC 
0f10e     DF E0 E2 E6 
0f112     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
0f116     DB D5 CD C7 
0f11a     C1 BE BC C1 
0f11e     C6 C9 D0 D6 
0f122     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
0f126     F6 FF 06 08 
0f12a     09 09 0A 0C 
0f12e     10 12 16 1E 
0f132     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
0f136     3F 42 45 44 
0f13a     40 3C 39 30 
0f13e     28 26 21 1B 
0f142     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
0f146     13 13 10 0E 
0f14a     0D 09 09 03 
0f14e     00 FC F3 ED 
0f152     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
0f156     EB F1 F7 FE 
0f15a     06 0C 12 16 
0f15e     1A 1B 18 15 
0f162     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
0f166     03 03 03 03 
0f16a     08 10 1B 24 
0f16e     28 2D 32 32 
0f172     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
0f176     2B 26 21 1C 
0f17a     18 15 14 13 
0f17e     14 19 1E 24 
0f182     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
0f186     30 2B 26 1A 
0f18a     13 06 00 F2 
0f18e     E8 E1 DC D8 
0f192     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
0f196     DC E0 E1 E2 
0f19a     E0 DE DA D3 
0f19e     CA C3 BE BC 
0f1a2     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
0f1a6     C9 CF D6 DA 
0f1aa     E2 EC F3 FA 
0f1ae     FF 04 08 08 
0f1b2     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
0f1b6     15 1B 25 2A 
0f1ba     31 37 3D 42 
0f1be     46 45 43 3F 
0f1c2     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
0f1c6     26 20 1C 1C 
0f1ca     18 18 19 18 
0f1ce     13 0F 10 10 
0f1d2     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
0f1d6     F9 F3 EE EA 
0f1da     E8 EA EB EE 
0f1de     F3 FA 03 0C 
0f1e2     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
0f1e6     19 16 15 14 
0f1ea     10 0C 04 03 
0f1ee     02 04 09 12 
0f1f2     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
0f1f6     30 33 36 36 
0f1fa     36 34 30 2D 
0f1fe     27 24 1F 1B 
0f202     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
0f206     1F 25 2C 34 
0f20a     38 39 39 34 
0f20e     2E 26 1C 13 
0f212     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
0f216     E5 DE DA D9 
0f21a     DA DB DE E1 
0f21e     E5 E8 E7 E5 
0f222     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
0f226     C7 C2 BE BE 
0f22a     C0 C2 C7 CD 
0f22e     D2 D8 DE E8 
0f232     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
0f236     03 06 04 06 
0f23a     08 0D 10 15 
0f23e     1A 21 2A 31 
0f242     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
0f246     3E 3C 39 36 
0f24a     32 2B 26 20 
0f24e     1C 1A 1A 16 
0f252     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
0f256     13 0F 0D 0C 
0f25a     09 00 FC F7 
0f25e     F2 F0 EC EA 
0f262     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
0f266     FF 09 0F 14 
0f26a     18 1A 1E 1B 
0f26e     1B 1A 15 13 
0f272     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
0f276     0C 10 15 1B 
0f27a     22 2B 2D 32 
0f27e     38 38 36 37 
0f282     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
0f286     20 1A 15 13 
0f28a     10 13 19 20 
0f28e     27 2D 31 32 
0f292     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
0f296     21 18 0F 04 
0f29a     FC F0 E6 E1 
0f29e     DB D6 D8 D9 
0f2a2     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
0f2a6     E6 E4 DF DB 
0f2aa     D5 CE CC C7 
0f2ae     C2 C0 C1 C1 
0f2b2     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
0f2b6     D9 E2 EC F3 
0f2ba     F8 FC FE FF 
0f2be     02 03 03 08 
0f2c2     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
0f2c6     22 2A 32 36 
0f2ca     3A 3C 3E 3D 
0f2ce     3C 37 31 2B 
0f2d2     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
0f2d6     16 14 14 13 
0f2da     0F 0F 12 13 
0f2de     0D 09 07 02 
0f2e2     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
0f2e6     EA E7 E7 EC 
0f2ea     F1 F6 FC 03 
0f2ee     0A 0D 13 16 
0f2f2     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
0f2f6     15 13 0C 0A 
0f2fa     09 07 09 0E 
0f2fe     14 19 1F 26 
0f302     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
0f306     36 34 37 34 
0f30a     30 2B 26 1E 
0f30e     18 13 13 14 
0f312     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
0f316     2E 31 33 31 
0f31a     30 2D 26 1E 
0f31e     13 0C 02 F8 
0f322     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
0f326     DB DE E2 E5 
0f32a     E7 E8 E7 E8 
0f32e     E5 DF DA D5 
0f332     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
0f336     C6 C8 C7 C8 
0f33a     CD D3 D9 E4 
0f33e     EC F1 F8 FD 
0f342     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
0f346     03 08 0A 0E 
0f34a     14 1B 24 27 
0f34e     2C 32 36 3C 
0f352     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
0f356     30 2B 26 20 
0f35a     1F 1C 18 13 
0f35e     12 0F 0F 0F 
0f362     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
0f366     06 02 FE F8 
0f36a     F1 ED E8 E6 
0f36e     E6 EA EE F3 
0f372     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
0f376     12 18 1A 1B 
0f37a     1E 1A 16 13 
0f37e     0E 0D 0D 0D 
0f382     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
0f386     20 26 2B 2E 
0f38a     34 36 36 37 
0f38e     39 38 33 2D 
0f392     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
0f396     13 14 19 1E 
0f39a     21 25 2A 2E 
0f39e     30 30 2D 28 
0f3a2     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
0f3a6     03 F9 F0 E6 
0f3aa     DF DB D9 DA 
0f3ae     D9 DC E1 E5 
0f3b2     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
0f3b6     DC D5 D3 CD 
0f3ba     CA C9 C7 C3 
0f3be     C4 C8 CE D3 
0f3c2     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
0f3c6     F6 FA FF 03 
0f3ca     03 06 06 04 
0f3ce     0C 12 14 18 
0f3d2     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
0f3d6     34 38 3C 3D 
0f3da     3A 39 33 2E 
0f3de     2D 26 1F 1C 
0f3e2     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
0f3e6     13 13 0F 0D 
0f3ea     0D 0A 07 01 
0f3ee     00 FA F4 F0 
0f3f2     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
0f3f6     E8 ED F3 F6 
0f3fa     FD 01 0C 0F 
0f3fe     15 19 1A 19 
0f402     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
0f406     0C 0A 0D 0D 
0f40a     10 15 19 21 
0f40e     28 2B 2D 32 
0f412     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
0f416     33 30 28 20 
0f41a     18 16 13 12 
0f41e     00 00 0D 08 
0f422     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
0f426     16 18 1E 18 
0f42a     1C 1A 1F 18 
0f42e     12 19 14 13 
0f432     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
0f436     15 13 0D 14 
0f43a     1C 1E 1B 18 
0f43e     18 1F 13 16 
0f442     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
0f446     F3 F2 EB F1 
0f44a     EA F7 F2 F6 
0f44e     F0 F7 F2 F7 
0f452     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
0f456     E8 D8 DC DF 
0f45a     DF D3 DB E6 
0f45e     E8 E4 DE EB 
0f462     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
0f466     F7 F7 F8 00 
0f46a     00 FE 07 01 
0f46e     01 06 15 1C 
0f472     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
0f476     1A 21 1E 1F 
0f47a     10 14 12 0E 
0f47e     08 13 18 0C 
0f482     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
0f486     09 08 0A 08 
0f48a     00 03 00 FA 
0f48e     F4 FC FA F8 
0f492     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
0f496     00 0C 0D 0D 
0f49a     0F 13 14 0E 
0f49e     10 18 12 0E 
0f4a2     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
0f4a6     19 15 0E 13 
0f4aa     14 1A 14 1C 
0f4ae     20 22 21 26 
0f4b2     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
0f4b6     14 10 07 06 
0f4ba     00 00 F3 1A 
0f4be     F7 2A EB 2A 
0f4c2     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
0f4c6     10 3E 30 2A 
0f4ca     00 13 1A 0E 
0f4ce     F3 E6 DB FC 
0f4d2     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
0f4d6     CE D5 F7 D6 
0f4da     C7 C9 CE D5 
0f4de     D6 C7 BB D8 
0f4e2     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
0f4e6     D0 D2 E4 D6 
0f4ea     CC FC CC C7 
0f4ee     B5 D5 00 EB 
0f4f2     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
0f4f6     1E 1E 2A 4A 
0f4fa     3E 4A 37 48 
0f4fe     54 2A 21 37 
0f502     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
0f506     2C 2A 0C 09 
0f50a     25 1A FE 0E 
0f50e     1A FC 00 09 
0f512     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
0f516     E1 EB EC DF 
0f51a     BD B0 00 EC 
0f51e     EC E6 00 2A 
0f522     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
0f526     10 2A 1F 0F 
0f52a     13 2A F7 EB 
0f52e     F7 EB 00 06 
0f532     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
0f536     0E 13 09 F8 
0f53a     13 12 F7 F2 
0f53e     F4 F7 EA FC 
0f542     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
0f546     E1 D8 CC 09 
0f54a     EB EC FC 00 
0f54e     25 1F 2A 00 
0f552     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
0f556     F7 2A 18 F2 
0f55a     F1 F7 FC 00 
0f55e     09 06 0D 09 
0f562     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
0f566     DE F3 F2 E2 
0f56a     ED F1 EC F3 
0f56e     00 EC F7 00 
0f572     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
0f576     EC E2 E0 E1 
0f57a     00 2A 2A 3F 
0f57e     1F 1C 39 3F 
0f582     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
0f586     00 0E 01 00 
0f58a     FE 07 1A 0E 
0f58e     00 F2 00 0E 
0f592     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
0f596     E2 EE FF E7 
0f59a     D9 F6 C8 F0 
0f59e     E4 C1 D5 B6 
0f5a2     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
0f5a6     EB 13 1A 46 
0f5aa     40 2E 24 3F 
0f5ae     44 20 34 39 
0f5b2     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
0f5b6     14 21 2A 34 
0f5ba     39 32 2A 3E 
0f5be     30 0D 19 2C 
0f5c2     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
0f5c6     1A 10 1A 09 
0f5ca     15 14 F8 00 
0f5ce     EB F7 00 F7 
0f5d2     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
0f5d6     2A 1F 09 0D 
0f5da     00 09 ED 09 
0f5de     04 DB DA D6 
0f5e2     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
0f5e6     00 FA DF C6 
0f5ea     E8 D9 B0 C8 
0f5ee     DB D5 CF ED 
0f5f2     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
0f5f6     F3 00 E1 E0 
0f5fa     C6 D4 E0 D5 
0f5fe     D6 D6 00 1C 
0f602     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
0f606     2D 3E 34 2A 
0f60a     3E 34 07 12 
0f60e     1E 13 14 1A 
0f612     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
0f616     00 18 00 EC 
0f61a     0E 08 00 09 
0f61e     13 1A 00 09 
0f622     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
0f626     EC DA E0 DE 
0f62a     DB E8 CC 00 
0f62e     1B 32 34 2A 
0f632     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
0f636     06 2A 14 FC 
0f63a     F7 00 06 09 
0f63e     0E 1C 2B 36 
0f642     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
0f646     FC 0D 0F FC 
0f64a     0D 1E 09 13 
0f64e     00 FD 13 14 
0f652     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
0f656     04 F7 F2 EB 
0f65a     1B 2A 2B 34 
0f65e     1C 1A 19 14 
0f662     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
0f666     D9 E8 F2 E6 
0f66a     EB F1 00 00 
0f66e     00 E4 F1 ED 
0f672     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
0f676     E0 E6 09 F7 
0f67a     04 EE E0 18 
0f67e     F4 EB E1 EB 
0f682     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
0f686     EB 0E 2B 3E 
0f68a     3F 3C 32 43 
0f68e     34 1A 2A 30 
0f692     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
0f696     00 03 0E 08 
0f69a     19 09 FE 03 
0f69e     00 E0 EB FE 
0f6a2     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
0f6a6     00 F2 E6 D5 
0f6aa     F2 E1 E1 CC 
0f6ae     D0 E6 E0 F2 
0f6b2     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
0f6b6     3E 34 30 2B 
0f6ba     3C 2A 03 31 
0f6be     30 0A 06 12 
0f6c2     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
0f6c6     2E 3E 2A 27 
0f6ca     3C 14 13 13 
0f6ce     14 14 01 27 
0f6d2     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
0f6d6     0E 14 09 F7 
0f6da     EC 00 04 0E 
0f6de     00 ED 00 1C 
0f6e2     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
0f6e6     19 18 00 FC 
0f6ea     0E 00 EC E4 
0f6ee     E6 E0 E4 EB 
0f6f2     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
0f6f6     E0 F2 CE C1 
0f6fa     D5 D0 D6 D5 
0f6fe     EC EB EB EC 
0f702     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
0f706     D9 D0 EB DE 
0f70a     F9 DB DB 00 
0f70e     0E 32 3C 3D 
0f712     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
0f716     2A 43 30 1A 
0f71a     13 0E 14 0E 
0f71e     19 18 2A 21 
0f722     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
0f726     FC 01 09 EE 
0f72a     10 00 00 0E 
0f72e     F2 E6 F2 F2 
0f732     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
0f736     EB F2 DE E0 
0f73a     00 13 31 37 
0f73e     2A 25 34 2A 
0f742     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
0f746     00 09 08 04 
0f74a     09 1F 24 2D 
0f74e     2C 13 30 21 
0f752     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
0f756     00 09 14 09 
0f75a     15 F2 06 03 
0f75e     00 FC E1 00 
0f762     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
0f766     F7 00 19 21 
0f76a     30 1A 0A 22 
0f76e     09 F3 09 09 
0f772     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
0f776     EC F7 F6 00 
0f77a     01 00 F1 F2 
0f77e     EC D2 D9 EB 
0f782     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
0f786     F7 00 E4 F1 
0f78a     F0 F0 EC D5 
0f78e     EC EB FD EE 
0f792     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
0f796     34 34 30 34 
0f79a     48 2A 1E 38 
0f79e     39 1A 14 18 
0f7a2     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
0f7a6     1B 2B 04 0F 
0f7aa     18 00 00 F3 
0f7ae     0E FC FC 00 
0f7b2     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
0f7b6     EC E8 EB D6 
0f7ba     D5 D9 E8 F7 
0f7be     E1 DB EE 09 
0f7c2     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
0f7c6     2A 34 0E 13 
0f7ca     27 2A 0D 09 
0f7ce     0E 09 0E 12 
0f7d2     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
0f7d6     26 30 0E 09 
0f7da     24 14 09 13 
0f7de     18 09 1F 00 
0f7e2     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
0f7e6     EC 00 FE 06 
0f7ea     0D EC F7 F7 
0f7ee     0D 22 28 1F 
0f7f2     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
0f7f6     FA 0E 00 ED 
0f7fa     E8 F7 E4 ED 
0f7fe     F3 F1 0A F3 
0f802     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
0f806     CC E2 E1 DB 
0f80a     EB E1 F7 00 
0f80e     E2 E6 EC F1 
0f812     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
0f816     F7 F7 DB E4 
0f81a     FC 0E 26 36 
0f81e     2A 24 44 2A 
0f822     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
0f826     14 13 14 0E 
0f82a     04 14 13 26 
0f82e     10 01 1F 09 
0f832     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
0f836     F7 09 F8 12 
0f83a     00 E7 F3 E4 
0f83e     FA DB D5 E1 
0f842     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
0f846     EB FE 13 2A 
0f84a     37 21 24 3F 
0f84e     21 10 26 2A 
0f852     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
0f856     14 19 18 2A 
0f85a     2A 2A 2A 2A 
0f85e     25 09 13 18 
0f862     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
0f866     1F 09 FE 04 
0f86a     00 09 F7 FA 
0f86e     FC FE 14 FC 
0f872     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
0f876     1E 1F 09 13 
0f87a     1A 00 F4 09 
0f87e     00 F7 EB F7 
0f882     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
0f886     00 00 DB F7 
0f88a     ED DF CC DF 
0f88e     E1 D2 EB E1 
0f892     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
0f896     DA F1 EC DE 
0f89a     E0 DB F7 F7 
0f89e     E6 E4 EB 00 
0f8a2     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
0f8a6     3E 39 1F 1E 
0f8aa     37 2B 14 22 
0f8ae     16 14 0E 0D 
0f8b2     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
0f8b6     13 13 00 FE 
0f8ba     09 01 FC 09 
0f8be     FD 09 0D ED 
0f8c2     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
0f8c6     D8 E6 DB FD 
0f8ca     F9 E8 EA F1 
0f8ce     02 1C 34 2A 
0f8d2     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
0f8d6     24 25 21 0C 
0f8da     0F 15 09 1C 
0f8de     0E 1B 3E 1F 
0f8e2     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
0f8e6     0E 1F 09 13 
0f8ea     14 0C 1E 14 
0f8ee     06 00 00 06 
0f8f2     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
0f8f6     10 04 F4 F2 
0f8fa     FC 00 10 25 
0f8fe     0D 10 1F 0E 
0f902     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
0f906     F7 F2 F9 EB 
0f90a     EC F7 00 04 
0f90e     ED F2 F7 EC 
0f912     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
0f916     F0 EA E8 06 
0f91a     ED F3 E1 F2 
0f91e     FA DF ED DE 
0f922     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
0f926     E8 F3 03 24 
0f92a     2C 1B 2E 3C 
0f92e     2A 1E 26 34 
0f932     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
0f936     14 0E 01 1C 
0f93a     14 06 03 0E 
0f93e     04 F2 00 00 
0f942     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
0f946     04 F6 EC E0 
0f94a     EA EC D5 D6 
0f94e     D3 EB FC ED 
0f952     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
0f956     26 2A 1C 2E 
0f95a     39 15 18 2A 
0f95e     2A 19 0C 1F 
0f962     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
0f966     3C 2B 25 2A 
0f96a     30 2A 0E 2A 
0f96e     14 1A 1C 0A 
0f972     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
0f976     00 13 00 00 
0f97a     FC FF 13 0D 
0f97e     00 F8 FC FD 
0f982     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
0f986     1E 14 00 FC 
0f98a     0F 00 F2 FC 
0f98e     EB EE F3 E7 
0f992     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
0f996     EB ED D6 D0 
0f99a     E1 D9 E0 E1 
0f99e     DB F8 ED EC 
0f9a2     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
0f9a6     E2 D8 DE F2 
0f9aa     F3 E6 E0 ED 
0f9ae     F3 0E 2A 1C 
0f9b2     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
0f9b6     24 30 2C 13 
0f9ba     1A 1A 10 14 
0f9be     01 1E 1E 14 
0f9c2     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
0f9c6     09 09 00 10 
0f9ca     00 00 09 0D 
0f9ce     FC E6 F7 F2 
0f9d2     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
0f9d6     00 F8 EE ED 
0f9da     F7 FE 1E 25 
0f9de     1F 2A 37 2A 
0f9e2     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
0f9e6     13 0F 10 0E 
0f9ea     0E 0E 27 2C 
0f9ee     1F 1E 26 2A 
0f9f2     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
0f9f6     1A 01 18 13 
0f9fa     0D 04 F3 09 
0f9fe     FE FD F7 F1 
0fa02     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
0fa06     F7 F6 FC 1A 
0fa0a     1A 04 1C 1A 
0fa0e     09 FC 01 0E 
0fa12     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
0fa16     FC EC F7 00 
0fa1a     01 F2 EE FE 
0fa1e     E1 DE EB E1 
0fa22     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
0fa26     FD 00 EC E8 
0fa2a     F8 F0 F2 E1 
0fa2e     E4 F7 FD F7 
0fa32     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
0fa36     24 21 1C 39 
0fa3a     3E 1A 22 34 
0fa3e     2A 1A 14 18 
0fa42     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
0fa46     19 14 08 03 
0fa4a     14 F9 FC 04 
0fa4e     F7 0E F3 FF 
0fa52     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
0fa56     E6 EB E0 DB 
0fa5a     D0 D5 F0 F7 
0fa5e     EC E2 F0 EB 
0fa62     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
0fa66     2A 30 1A 13 
0fa6a     2B 1A 14 13 
0fa6e     0D 13 14 13 
0fa72     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
0fa76     2A 2C 18 1E 
0fa7a     25 13 2A 15 
0fa7e     19 1F 1C 14 
0fa82     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
0fa86     01 F7 00 0E 
0fa8a     10 00 FC F7 
0fa8e     FC 0E 25 08 
0fa92     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
0fa96     00 09 00 F2 
0fa9a     FA ED F8 EC 
0fa9e     ED FC F7 F7 
0faa2     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
0faa6     E0 D6 E8 E4 
0faaa     E0 EB ED FD 
0faae     EC DC EC E6 
0fab2     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
0fab6     F3 F6 E1 E8 
0faba     E1 F7 13 14 
0fabe     1C 2A 34 2A 
0fac2     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
0fac6     18 14 13 14 
0faca     09 09 1B 18 
0face     14 09 1A 09 
0fad2     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
0fad6     06 01 0D 06 
0fada     09 F2 EB EE 
0fade     ED F0 DC E0 
0fae2     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
0fae6     F3 F1 FA 27 
0faea     1E 18 34 32 
0faee     25 13 27 27 
0faf2     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
0faf6     12 0D 19 21 
0fafa     2E 1A 24 2A 
0fafe     14 1E 14 13 
0fb02     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
0fb06     18 14 F9 00 
0fb0a     00 00 00 F2 
0fb0e     F1 00 0D 00 
0fb12     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
0fb16     0F 09 09 1C 
0fb1a     1A 00 00 04 
0fb1e     04 F4 F9 ED 
0fb22     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
0fb26     FC FC E8 F3 
0fb2a     F9 D9 F0 E1 
0fb2e     EB F3 E5 F6 
0fb32     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
0fb36     F1 ED F7 ED 
0fb3a     DE E8 F8 01 
0fb3e     F1 F2 F6 E6 
0fb42     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
0fb46     38 39 1C 24 
0fb4a     32 2A 1E 14 
0fb4e     13 13 09 09 
0fb52     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
0fb56     0E 09 FC 04 
0fb5a     FD 00 04 FE 
0fb5e     00 FE 07 EE 
0fb62     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
0fb66     DB D3 DB F1 
0fb6a     F2 F2 EB E6 
0fb6e     EB 09 1A 0E 
0fb72     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
0fb76     1E 2A 18 1C 
0fb7a     0E 13 1E 0D 
0fb7e     19 20 32 24 
0fb82     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
0fb86     21 1C 2A 1F 
0fb8a     1C 1C 22 2A 
0fb8e     0E 09 06 09 
0fb92     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
0fb96     1C 0E 04 07 
0fb9a     ED FE 13 14 
0fb9e     0C 18 26 09 
0fba2     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
0fba6     F9 F2 F3 F3 
0fbaa     E7 F0 F7 F7 
0fbae     EC EB F7 D9 
0fbb2     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
0fbb6     DF EA E6 FC 
0fbba     F7 E2 E5 E4 
0fbbe     EA EC D6 D9 
0fbc2     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
0fbc6     EC E0 F7 19 
0fbca     0D 15 2A 37 
0fbce     22 19 2D 21 
0fbd2     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
0fbd6     0D 0C 08 1A 
0fbda     18 04 13 0E 
0fbde     08 0D 01 0D 
0fbe2     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
0fbe6     13 00 F4 F1 
0fbea     EA F2 EC E4 
0fbee     D9 F7 FF F3 
0fbf2     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
0fbf6     1A 18 19 34 
0fbfa     30 1F 19 2A 
0fbfe     1E 18 14 0E 
0fc02     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
0fc06     24 25 13 32 
0fc0a     1B 19 1F 13 
0fc0e     1E 18 18 0D 
0fc12     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
0fc16     00 FF 09 FA 
0fc1a     F2 F7 01 09 
0fc1e     00 01 ED E8 
0fc22     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
0fc26     1C 14 00 00 
0fc2a     00 FF FC F0 
0fc2e     F3 F2 F0 E8 
0fc32     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
0fc36     FC E6 EB E4 
0fc3a     E8 F3 EB F2 
0fc3e     F0 00 00 F2 
0fc42     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
0fc46     F7 DE EB 00 
0fc4a     00 00 F9 EC 
0fc4e     F7 13 1B 14 
0fc52     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
0fc56     2C 27 22 20 
0fc5a     0D 1C 0D 04 
0fc5e     04 0D 1C 00 
0fc62     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
0fc66     FC 00 01 00 
0fc6a     00 F6 03 00 
0fc6e     EC E8 DB EB 
0fc72     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
0fc76     F7 ED F8 F2 
0fc7a     DE F7 09 12 
0fc7e     0C 2A 34 1F 
0fc82     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
0fc86     18 0E 14 15 
0fc8a     09 16 24 2A 
0fc8e     1C 33 2A 26 
0fc92     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
0fc96     21 1A 16 26 
0fc9a     18 09 09 09 
0fc9e     04 10 00 F9 
0fca2     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
0fca6     04 F0 00 13 
0fcaa     0A 09 1C 2A 
0fcae     04 03 04 00 
0fcb2     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
0fcb6     EE E8 E6 00 
0fcba     EC E6 FA E4 
0fcbe     E6 DF DB E6 
0fcc2     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
0fcc6     F8 EE EB E1 
0fcca     EC EB EC DE 
0fcce     D5 F4 F2 F6 
0fcd2     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
0fcd6     10 06 19 31 
0fcda     30 1C 22 2A 
0fcde     1E 25 10 14 
0fce2     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
0fce6     1F 07 09 14 
0fcea     07 0F 00 06 
0fcee     0E 0D 0D FD 
0fcf2     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
0fcf6     F1 ED F7 EC 
0fcfa     E1 E0 F8 FD 
0fcfe     FF 04 EC F3 
0fd02     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
0fd06     3C 30 21 26 
0fd0a     1F 24 1A 13 
0fd0e     10 14 0F 09 
0fd12     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
0fd16     2A 1E 21 14 
0fd1a     1E 1A 1C 14 
0fd1e     0D 13 14 0A 
0fd22     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
0fd26     00 EC FE 06 
0fd2a     06 0E 04 ED 
0fd2e     F1 09 01 00 
0fd32     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
0fd36     07 FD 06 F7 
0fd3a     EE F7 ED EE 
0fd3e     E4 FE F9 EB 
0fd42     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
0fd46     E0 EB EA F7 
0fd4a     EB EB 00 F8 
0fd4e     F2 F1 EE F8 
0fd52     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
0fd56     00 FD 07 F7 
0fd5a     ED F7 0E 0E 
0fd5e     12 2A 37 2A 
0fd62     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
0fd66     1C 10 14 0F 
0fd6a     04 00 1A 09 
0fd6e     03 0E 06 0E 
0fd72     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
0fd76     04 FC 00 04 
0fd7a     FD EC E8 E4 
0fd7e     E8 ED D9 DA 
0fd82     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
0fd86     EE E4 00 09 
0fd8a     0A 0E 2E 30 
0fd8e     1A 22 18 22 
0fd92     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
0fd96     15 09 13 26 
0fd9a     1A 24 2A 24 
0fd9e     2A 1A 1E 1C 
0fda2     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
0fda6     1A 14 08 00 
0fdaa     08 09 0E FC 
0fdae     FC 0C 0C 13 
0fdb2     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
0fdb6     09 01 09 1C 
0fdba     1A 04 09 03 
0fdbe     04 04 F4 F8 
0fdc2     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
0fdc6     00 EC F7 EC 
0fdca     F2 EC DA E5 
0fdce     EA ED EC E0 
0fdd2     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
0fdd6     E4 E8 F1 EC 
0fdda     DB E0 F2 F1 
0fdde     00 FC E4 EB 
0fde2     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
0fde6     31 2A 24 1F 
0fdea     22 24 1A 18 
0fdee     12 10 09 FE 
0fdf2     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
0fdf6     08 0E 04 00 
0fdfa     01 08 13 00 
0fdfe     00 03 04 F7 
0fe02     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
0fe06     E6 DE E8 EC 
0fe0a     F8 02 00 E6 
0fe0e     F7 09 0A 0C 
0fe12     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
0fe16     22 1E 25 15 
0fe1a     19 14 1A 09 
0fe1e     09 25 1C 24 
0fe22     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
0fe26     1B 1E 1E 2A 
0fe2a     0E 12 1C 14 
0fe2e     09 00 FC 00 
0fe32     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
0fe36     01 09 0E 04 
0fe3a     F1 F7 09 00 
0fe3e     FE 13 14 09 
0fe42     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
0fe46     F7 F8 F4 F9 
0fe4a     E1 EB FD ED 
0fe4e     F7 F2 F1 F2 
0fe52     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
0fe56     F2 EE F3 01 
0fe5a     FC F2 F1 EB 
0fe5e     F7 F7 EC E6 
0fe62     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
0fe66     F2 EB FE 09 
0fe6a     04 09 34 2A 
0fe6e     26 28 21 27 
0fe72     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
0fe76     0E FA 09 09 
0fe7a     03 0D 00 0D 
0fe7e     06 00 03 FF 
0fe82     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
0fe86     01 FC ED E7 
0fe8a     E2 F0 E8 D6 
0fe8e     E4 E6 EB F7 
0fe92     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
0fe96     04 01 13 2C 
0fe9a     27 20 1F 1E 
0fe9e     26 18 18 13 
0fea2     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
0fea6     1C 22 2A 26 
0feaa     2D 2A 25 25 
0feae     26 2A 21 1A 
0feb2     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
0feb6     02 08 0E 09 
0feba     FC 04 06 07 
0febe     18 0E 00 F8 
0fec2     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
0fec6     19 0E 09 04 
0feca     06 04 FA F7 
0fece     F4 FC E6 E6 
0fed2     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
0fed6     ED ED E4 E8 
0feda     DE F0 ED E8 
0fede     EB F8 F8 F0 
0fee2     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
0fee6     EC E4 EA ED 
0feea     F1 00 F9 E6 
0feee     F3 00 04 00 
0fef2     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
0fef6     21 2B 22 1F 
0fefa     14 1B 1C 00 
0fefe     0C 10 06 10 
0ff02     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
0ff06     09 06 0D 0E 
0ff0a     01 06 0A 04 
0ff0e     FA F2 EA F1 
0ff12     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
0ff16     E8 F7 00 F9 
0ff1a     E7 F7 09 00 
0ff1e     09 24 2A 21 
0ff22     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
0ff26     15 0E 19 14 
0ff2a     04 13 14 1C 
0ff2e     1F 20 26 1F 
0ff32     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
0ff36     1A 13 18 1C 
0ff3a     14 0A 00 FF 
0ff3e     09 09 F7 F8 
0ff42     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
0ff46     00 F8 FC 09 
0ff4a     F7 09 16 14 
0ff4e     0C 01 04 04 
0ff52     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
0ff56     F2 E7 F7 ED 
0ff5a     F6 F2 EE F7 
0ff5e     ED F2 E6 EB 
0ff62     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
0ff66     00 FC F7 EE 
0ff6a     ED FE F3 E8 
0ff6e     F0 ED F4 FF 
0ff72     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
0ff76     04 00 13 2A 
0ff7a     25 27 1C 27 
0ff7e     21 1F 14 0E 
0ff82     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
0ff86     02 04 01 03 
0ff8a     00 03 00 FD 
0ff8e     00 04 FD FC 
0ff92     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
0ff96     E7 E6 F7 E8 
0ff9a     DC EB E4 F6 
0ff9e     00 FC F2 F1 
0ffa2     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
0ffa6     2B 2D 2A 27 
0ffaa     25 27 21 0D 
0ffae     1C 1F 09 13 
0ffb2     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
0ffb6     2A 21 2A 1F 
0ffba     18 24 20 15 
0ffbe     16 21 1F 15 
0ffc2     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
0ffc6     00 FD 00 00 
0ffca     08 18 09 F9 
0ffce     00 0F 00 00 
0ffd2     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
0ffd6     09 06 03 00 
0ffda     F1 FE F7 E8 
0ffde     F6 F0 F1 EE 
0ffe2     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
0ffe6     DE DB ED EC 
0ffea     E1 EB F8 FC 
0ffee     F3 EE E0 F3 
0fff2     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
0fff6     E8 FC 00 F9 
0fffa     E8 FC 07 F9 
0fffe     00 21 24 25 
10002     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
10006     14 0E 1E 09 
1000a     09 0C 06 0D 
1000e     04 0D 04 08 
10012     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
10016     04 F9 00 09 
1001a     06 FE EC EA 
1001e     F7 F7 E0 EC 
10022     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
10026     00 F0 09 0A 
1002a     00 13 26 30 
1002e     2A 26 2A 24 
10032     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
10036     0A 12 18 13 
1003a     1F 1A 21 1E 
1003e     21 21 0F 1A 
10042     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
10046     1C 14 0E FC 
1004a     FD 09 00 FE 
1004e     F8 F7 FE 09 
10052     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
10056     01 F8 0D 10 
1005a     0E 09 09 01 
1005e     03 01 F0 00 
10062     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
10066     FA F3 F3 F2 
1006a     F0 F2 EC E0 
1006e     EB F3 E8 EB 
10072     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
10076     EA EB FF ED 
1007a     ED F2 E5 F3 
1007e     00 07 F2 F7 
10082     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
10086     26 28 20 2A 
1008a     20 26 1F 09 
1008e     1E 0E 03 0A 
10092     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
10096     04 04 09 00 
1009a     FF 00 06 F9 
1009e     FD 06 01 00 
100a2     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
100a6     E4 DF E1 DB 
100aa     EA FC 00 E8 
100ae     F7 07 F7 06 
100b2     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
100b6     21 1C 26 14 
100ba     0E 1C 10 0E 
100be     15 1C 21 1C 
100c2     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
100c6     1C 1C 25 1F 
100ca     18 19 21 1F 
100ce     1F 0E FF 12 
100d2     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
100d6     00 04 19 0D 
100da     FD 09 09 00 
100de     03 0F 15 09 
100e2     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
100e6     EC F7 F9 E8 
100ea     F1 EC F7 F2 
100ee     F0 F3 EC F0 
100f2     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
100f6     EA E6 F1 FC 
100fa     00 F8 EC EB 
100fe     F4 F2 E6 EE 
10102     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
10106     F7 F1 09 00 
1010a     FF 0E 1E 25 
1010e     21 21 1F 24 
10112     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
10116     04 09 08 0F 
1011a     09 09 0E 06 
1011e     09 04 00 00 
10122     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
10126     08 09 01 EC 
1012a     F4 FA F2 EA 
1012e     E8 E7 E8 FC 
10132     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
10136     01 00 0E 22 
1013a     20 1C 1F 14 
1013e     24 14 09 13 
10142     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
10146     1B 19 24 22 
1014a     21 22 21 19 
1014e     21 1F 14 13 
10152     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
10156     FE 07 0C 00 
1015a     00 FC FE 00 
1015e     10 12 00 09 
10162     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
10166     14 0E 0A 04 
1016a     FE 09 F9 F2 
1016e     FC EE F3 EB 
10172     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
10176     F3 F3 F0 EC 
1017a     EA F3 F3 E4 
1017e     F6 FC 00 01 
10182     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
10186     ED EC E8 EC 
1018a     F3 00 00 EB 
1018e     00 04 FF 01 
10192     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
10196     14 19 1F 0E 
1019a     0D 09 06 01 
1019e     02 04 04 04 
101a2     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
101a6     00 00 06 04 
101aa     FC FF 09 08 
101ae     07 F2 ED F8 
101b2     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
101b6     E7 F7 06 F7 
101ba     F7 09 04 03 
101be     09 21 27 24 
101c2     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
101c6     14 1C 0E 13 
101ca     0E 13 1C 1A 
101ce     22 22 25 26 
101d2     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
101d6     15 18 19 1C 
101da     22 18 04 02 
101de     09 01 00 FC 
101e2     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
101e6     00 00 0D 00 
101ea     FD 00 0E 0D 
101ee     0E 09 FF 06 
101f2     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
101f6     ED E8 ED F4 
101fa     F0 F3 EE F0 
101fe     F2 E6 E8 EB 
10202     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
10206     F8 04 F8 EC 
1020a     F3 F7 F2 ED 
1020e     F0 E8 EB 00 
10212     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
10216     02 00 0E 21 
1021a     1C 2B 1F 1E 
1021e     2B 1B 19 14 
10222     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
10226     0D 0E 0A 09 
1022a     09 10 03 00 
1022e     0D 04 FF FF 
10232     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
10236     EB F7 EE EE 
1023a     E7 E4 E4 E6 
1023e     FF FC EB FE 
10242     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
10246     1C 1E 27 1A 
1024a     1E 25 12 15 
1024e     0E 0D 09 08 
10252     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
10256     1F 26 1F 1F 
1025a     18 22 1B 0E 
1025e     16 15 21 1F 
10262     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
10266     00 00 FF F8 
1026a     00 16 09 00 
1026e     09 0A 00 00 
10272     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
10276     06 0E 09 00 
1027a     FE F7 F4 F2 
1027e     F1 F7 F8 FA 
10282     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
10286     EC F1 F3 EE 
1028a     E8 F3 F8 01 
1028e     01 EC F3 F3 
10292     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
10296     E4 F4 02 EE 
1029a     F4 FF FF FC 
1029e     FE 13 13 21 
102a2     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
102a6     10 0A 06 04 
102aa     FC 00 01 08 
102ae     04 04 06 07 
102b2     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
102b6     FC FD 00 08 
102ba     0D 04 F1 F8 
102be     FA F2 F2 ED 
102c2     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
102c6     F1 F8 03 04 
102ca     00 09 1B 21 
102ce     2B 25 24 2C 
102d2     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
102d6     14 0A 14 19 
102da     1F 26 1E 27 
102de     2A 1F 1A 21 
102e2     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
102e6     1C 22 14 08 
102ea     08 09 06 00 
102ee     00 F7 F7 10 
102f2     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
102f6     01 F7 03 07 
102fa     0D 12 00 08 
102fe     04 FD F9 F2 
10302     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
10306     F3 F7 F7 F2 
1030a     F3 F7 E6 E6 
1030e     F0 EC EA ED 
10312     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
10316     F2 FA F7 F7 
1031a     F1 F2 E6 EB 
1031e     03 00 F8 01 
10322     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
10326     19 24 2A 1C 
1032a     2B 22 1C 1A 
1032e     14 10 04 07 
10332     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
10336     0A 0E 0D 00 
1033a     FF 08 00 FF 
1033e     FF 01 09 09 
10342     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
10346     EC E8 E7 D6 
1034a     EB F7 EC F1 
1034e     FA 01 F8 00 
10352     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
10356     1C 26 1F 1A 
1035a     18 12 0E 0C 
1035e     09 13 19 21 
10362     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
10366     1A 1E 21 18 
1036a     15 19 15 26 
1036e     1F 09 09 07 
10372     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
10376     ED 00 0D 00 
1037a     03 08 09 FE 
1037e     02 09 0C 19 
10382     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
10386     01 FC FE F2 
1038a     F2 F3 F0 FE 
1038e     F8 F9 F7 FD 
10392     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
10396     F0 ED F7 FC 
1039a     07 00 F4 F7 
1039e     F9 F2 F2 F3 
103a2     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
103a6     F3 F7 00 00 
103aa     F8 06 0A 16 
103ae     1F 16 21 21 
103b2     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
103b6     08 00 01 00 
103ba     09 0C 04 09 
103be     09 01 FC 03 
103c2     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
103c6     03 0E 00 F4 
103ca     F3 F2 EE E7 
103ce     EE DB E0 F8 
103d2     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
103d6     00 FF 0E 13 
103da     2A 2A 21 2B 
103de     2A 25 1C 1E 
103e2     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
103e6     19 21 27 20 
103ea     28 2B 21 1E 
103ee     21 20 18 1B 
103f2     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
103f6     09 09 03 00 
103fa     FE 00 F2 FC 
103fe     08 00 00 03 
10402     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
10406     03 13 09 04 
1040a     0C 01 04 FC 
1040e     FC F7 ED F2 
10412     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
10416     F2 F4 F8 E8 
1041a     F0 F0 EC F0 
1041e     ED F3 00 01 
10422     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
10426     EC F1 EC E2 
1042a     F7 FA F8 F3 
1042e     00 01 F8 00 
10432     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
10436     1E 26 22 1A 
1043a     19 14 0E 08 
1043e     04 03 06 10 
10442     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
10446     00 02 07 00 
1044a     00 00 01 10 
1044e     09 F9 F7 F4 
10452     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
10456     DB F3 F7 F2 
1045a     F3 00 00 F7 
1045e     06 08 1C 21 
10462     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
10466     1C 1C 19 0F 
1046a     13 0D 0E 18 
1046e     20 1E 1E 2A 
10472     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
10476     16 15 14 19 
1047a     21 1A 09 06 
1047e     09 00 00 00 
10482     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
10486     00 00 0D 00 
1048a     FE 00 00 15 
1048e     14 08 0E 0C 
10492     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
10496     F8 F7 F1 F2 
1049a     FC FA F8 F7 
1049e     00 F3 EE F6 
104a2     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
104a6     FE 03 FC F2 
104aa     F0 F3 E8 ED 
104ae     EE DE EB F7 
104b2     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
104b6     F7 FC FD 09 
104ba     19 18 1C 1A 
104be     21 1A 14 13 
104c2     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
104c6     00 08 06 01 
104ca     09 06 00 00 
104ce     04 FF FD FC 
104d2     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
104d6     F4 F4 F2 EA 
104da     F0 EC DB E8 
104de     F7 F4 F2 FE 
104e2     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
104e6     13 28 21 2A 
104ea     2B 2C 2A 21 
104ee     25 1C 1C 15 
104f2     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
104f6     24 2C 2B 1F 
104fa     26 25 1C 1C 
104fe     14 16 21 1B 
10502     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
10506     FA 03 F2 F1 
1050a     FC 03 FF F8 
1050e     08 00 FC FA 
10512     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
10516     07 0A 09 00 
1051a     FF FA FA F3 
1051e     F0 E8 F4 F8 
10522     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
10526     EB F2 F2 EB 
1052a     EE EC F7 00 
1052e     FD F7 F0 F3 
10532     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
10536     E4 F4 F9 F3 
1053a     F7 04 FA FD 
1053e     00 01 1C 1B 
10542     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
10546     1A 1E 14 14 
1054a     0A 04 03 09 
1054e     12 09 0C 10 
10552     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
10556     00 00 F9 00 
1055a     08 04 F7 F4 
1055e     F6 E6 EB EC 
10562     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
10566     EC F7 00 F8 
1056a     FC FD 00 1A 
1056e     1E 1E 27 27 
10572     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
10576     1A 18 0E 13 
1057a     1C 1F 1E 24 
1057e     2A 1F 21 26 
10582     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
10586     1C 1E 1A 07 
1058a     07 04 FC 04 
1058e     FC F0 FA 00 
10592     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
10596     00 00 F7 09 
1059a     0E 0F 0F 0F 
1059e     15 0D 09 04 
105a2     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
105a6     F6 00 FC FC 
105aa     00 FD F3 FA 
105ae     F7 F2 F7 F2 
105b2     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
105b6     F1 F7 EE EB 
105ba     F3 EC E2 EB 
105be     F7 F7 F1 FF 
105c2     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
105c6     09 13 14 1C 
105ca     1E 22 1B 1A 
105ce     13 0E 0C 01 
105d2     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
105d6     06 0D 09 00 
105da     06 00 FE 00 
105de     F3 FE 03 06 
105e2     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
105e6     F0 F2 E6 E2 
105ea     EB F7 EE F7 
105ee     00 FD 00 FC 
105f2     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
105f6     25 2D 30 2B 
105fa     25 26 20 1C 
105fe     18 10 1C 21 
10602     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
10606     20 25 1F 1C 
1060a     1A 0E 15 1C 
1060e     1B 0A 04 06 
10612     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
10616     F7 FD 06 FA 
1061a     03 06 FE 01 
1061e     F6 FD 09 09 
10622     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
10626     0A 07 00 01 
1062a     FC F7 F1 FA 
1062e     FC F7 FD FF 
10632     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
10636     F7 EE ED F8 
1063a     00 00 F2 F7 
1063e     F2 EB F7 F0 
10642     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
10646     F2 FE FC FC 
1064a     FC F8 00 0F 
1064e     15 1A 1E 24 
10652     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
10656     0E 0D 00 00 
1065a     06 04 04 0C 
1065e     0D 00 03 03 
10662     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
10666     00 04 01 F3 
1066a     F8 EC EB F2 
1066e     EC E4 E0 F6 
10672     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
10676     00 FC FC 09 
1067a     19 21 21 2A 
1067e     2B 2C 2A 26 
10682     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
10686     16 20 1C 1E 
1068a     28 25 1F 25 
1068e     1F 1C 1C 10 
10692     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
10696     08 09 FD 00 
1069a     04 FC F7 F8 
1069e     00 FD 00 04 
106a2     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
106a6     00 08 0E 0D 
106aa     0F 10 09 09 
106ae     01 00 FF F7 
106b2     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
106b6     F7 FE F4 F1 
106ba     F7 ED F2 EE 
106be     E6 ED F8 00 
106c2     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
106c6     F1 F2 EC DF 
106ca     F0 F4 ED F8 
106ce     F8 FC FE F7 
106d2     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
106d6     1E 21 25 21 
106da     1E 19 14 12 
106de     06 00 06 09 
106e2     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
106e6     08 09 00 02 
106ea     FD F7 FC 06 
106ee     07 F9 FD F7 
106f2     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
106f6     E4 F1 F2 EB 
106fa     FC F8 FE 00 
106fe     F7 00 0E 1C 
10702     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
10706     28 26 21 20 
1070a     1B 14 10 1C 
1070e     1B 18 24 26 
10712     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
10716     1C 14 0E 0F 
1071a     1C 14 09 0D 
1071e     00 FE 01 01 
10722     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
10726     FE 00 00 01 
1072a     00 F4 FF 08 
1072e     0D 0F 10 18 
10732     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
10736     02 00 F4 F6 
1073a     FC F7 F7 00 
1073e     00 F7 FC F7 
10742     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
10746     F7 06 00 FA 
1074a     FD EE F6 F7 
1074e     F3 E7 E8 F8 
10752     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
10756     FD F7 F7 FF 
1075a     0E 13 18 1E 
1075e     21 1F 1C 18 
10762     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
10766     00 07 01 03 
1076a     0D 04 06 04 
1076e     00 02 FD F3 
10772     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
10776     F9 F7 EB EE 
1077a     F3 EE E4 EA 
1077e     F0 ED F7 F7 
10782     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
10786     08 14 1E 21 
1078a     2E 30 2B 2A 
1078e     25 24 22 1A 
10792     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
10796     24 2E 21 27 
1079a     26 20 25 1A 
1079e     14 0D 1C 1A 
107a2     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
107a6     01 06 00 F6 
107aa     00 00 FE 00 
107ae     00 00 00 FA 
107b2     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
107b6     12 16 14 0E 
107ba     0D 04 04 00 
107be     F7 EE F8 F7 
107c2     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
107c6     F8 F2 F3 F3 
107ca     EC E6 E6 FC 
107ce     FC F3 F9 EE 
107d2     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
107d6     E4 F2 EC F0 
107da     F8 F2 FE F7 
107de     F7 FC 06 13 
107e2     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
107e6     20 1B 15 15 
107ea     0E 04 00 09 
107ee     07 03 13 09 
107f2     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
107f6     01 FE F2 F7 
107fa     03 00 FE FC 
107fe     F2 ED F3 F3 
10802     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
10806     F2 F9 F7 00 
1080a     FE FA 03 0E 
1080e     1A 20 2A 30 
10812     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
10816     25 1F 14 EB 
1081a     00 00 34 39 
1081e     33 37 4C 5D 
10822     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
10826     A5 CF 2E 57 
1082a     36 18 0F 00 
1082e     AC 87 CF 5E 
10832     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
10836     FF 7F 60 DB 
1083a     3C 0C 16 30 
1083e     A0 CF 30 E7 
10842     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
10846     AB E7 D0 CF 
1084a     18 A0 9F BE 
1084e     B7 B8 B7 CF 
10852     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
10856     D0 FF 00 B7 
1085a     FF 30 0F 00 
1085e     06 D0 CF F4 
10862     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
10866     AC 81 CF 00 
1086a     C7 A0 9F 06 
1086e     A0 9F D0 87 
10872     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
10876     18 FF E8 AC 
1087a     B7 FF 00 BD 
1087e     DC CF F1 B8 
10882     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
10886     18 EE D2 F3 
1088a     09 E8 EB B8 
1088e     CF E8 FF 0A 
10892     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
10896     10 28 34 5E 
1089a     48 2E 5E 7F 
1089e     60 0A 52 30 
108a2     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
108a6     3C 2E 5E 6C 
108aa     30 46 3C 5E 
108ae     60 72 30 22 
108b2     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
108b6     7F 60 46 55 
108ba     48 5E 60 7F 
108be     7F 7F 4F 7F 
108c2     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
108c6     78 66 30 0A 
108ca     46 30 2E 7F 
108ce     60 5E 60 5E 
108d2     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
108d6     66 76 7F 7F 
108da     6F 49 7B 30 
108de     46 60 42 46 
108e2     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
108e6     46 46 69 48 
108ea     28 5E 3C 46 
108ee     60 30 3A 3C 
108f2     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
108f6     22 36 1E 37 
108fa     18 2E 18 10 
108fe     2E 48 2A 1E 
10902     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
10906     00 EE A0 CF 
1090a     00 DF E7 DC 
1090e     B7 FF 0C EE 
10912     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
10916     0C FD 12 E8 
1091a     FF 00 E8 BD 
1091e     E1 EE D0 AB 
10922     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
10926     C3 C4 A0 B7 
1092a     E8 A0 9F B8 
1092e     BE A0 AC A0 
10932     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
10936     A0 87 C0 A3 
1093a     C9 A0 9F B4 
1093e     AC 80 9F AC 
10942     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
10946     87 80 84 80 
1094a     84 80 80 9F 
1094e     80 80 80 80 
10952     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
10956     93 80 99 A0 
1095a     80 80 80 80 
1095e     93 80 80 80 
10962     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
10966     93 80 80 80 
1096a     9F 80 80 B8 
1096e     80 80 A0 80 
10972     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
10976     80 8E 80 80 
1097a     9D 80 9F 88 
1097e     88 80 99 80 
10982     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
10986     81 9F 80 93 
1098a     94 82 93 A6 
1098e     91 9F 91 97 
10992     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
10996     BD CA 93 CF 
1099a     A0 B7 B1 AC 
1099e     B1 D3 A0 CF 
109a2     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
109a6     F0 E4 DC C9 
109aa     E7 F4 D0 DB 
109ae     FF 00 D2 F3 
109b2     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
109b6     0A 16 18 E4 
109ba     2E 18 2E 2E 
109be     18 F3 52 00 
109c2     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
109c6     2E 1B 24 0A 
109ca     3C 28 76 30 
109ce     3F 36 2A 46 
109d2     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
109d6     24 2E 5E 60 
109da     6A 7C 6C 48 
109de     40 46 5E 6C 
109e2     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
109e6     48 76 6C 60 
109ea     5E 7F 60 7F 
109ee     60 6A 7F 73 
109f2     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
109f6     76 7F 7F 7F 
109fa     7C 7F 78 7F 
109fe     7F 7F 7F 7F 
10a02     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
10a06     7F 7F 7F 7F 
10a0a     7F 7F 7F 7F | 	byte	$7f[8]
10a0e     76 7F 7E 7F 
10a12     7F 7F 7F 7F 
10a16     7F 7F 64 7F 
10a1a     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
10a1e     7F 7F 7F 7F 
10a22     7F 7F       | 	byte	$7f[6]
10a24     79 7F 66 64 
10a28     6D 73 7F 7F 
10a2c     64 7F 60 6A 
10a30     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
10a34     76 7F 7F 78 
10a38     58 78 60 75 
10a3c     6C 46 66 48 
10a40     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
10a44     45 51 5E 60 
10a48     3A 5E 4E 40 
10a4c     5E 42 3F 3D 
10a50     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
10a54     42 0C 28 28 
10a58     3C 30 1F 40 
10a5c     48 43 42 22 
10a60     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
10a64     0C 18 0C 04 
10a68     24 DB 1E F3 
10a6c     00 FF 0C E7 
10a70     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
10a74     00 F3 18 D0 
10a78     EE F3 E8 DB 
10a7c     E1 D8 E7 E2 
10a80     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
10a84     E8 BD D3 D5 
10a88     CD DB DC C3 
10a8c     CA B7 D0 C3 
10a90     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
10a94     C0 B8 88 9F 
10a98     C1 A0 C3 D0 
10a9c     88 9F B8 A0 
10aa0     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
10aa4     A0 80 82 80 
10aa8     93 A0 87 94 
10aac     80 87 94 80 
10ab0     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
10ab4     88 8D 9F 97 
10ab8     90 9C 94 80 
10abc     8B 87 80 87 
10ac0     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
10ac4     8E 9A 94 84 
10ac8     9F A6 80 88 
10acc     80 81 8D 80 
10ad0     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
10ad4     82 80 8D 80 
10ad8     80 AC 80 9A 
10adc     9F 90 94 80 
10ae0     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
10ae4     9F 94 80 80 
10ae8     8E 80 80 80 
10aec     80 AC 8D 94 
10af0     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
10af4     9F A0 80 AC 
10af8     87 8E 9F AC 
10afc     94 9A 91 93 
10b00     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
10b04     A0 9C C3 AF 
10b08     A8 BB AF A3 
10b0c     AF AB B7 B8 
10b10     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
10b14     BE C3 D2 BE 
10b18     C3 D0 BD D9 
10b1c     DF BE C3 DC 
10b20     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
10b24     EE DF D9 E4 
10b28     E4 DE F3 EE 
10b2c     E7 00 FF 0C 
10b30     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
10b34     06 07 06 FF 
10b38     18 0C FF 1C 
10b3c     15 1B 27 1F 
10b40     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
10b44     2E 48 13 2A 
10b48     2E 3C 30 3A 
10b4c     48 3D 3F 40 
10b50     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
10b54     5A 48 3A 5B 
10b58     5A 5E 60 52 
10b5c     61 69 60 6A 
10b60     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
10b64     69 66 6A 6F 
10b68     76 7F 7F 78 
10b6c     6C 6A 78 64 
10b70     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
10b74     7F 7F 78 7B 
10b78     7F 7F 7F 7F 
10b7c     7F 7F 7F 7E 
10b80     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
10b84     7F 79 7F 7F 
10b88     7F 7F 7F 7F 
10b8c     7F 7F 7F 7F 
10b90     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
10b94     7F 7F 7F 7F 
10b98     7F 7F 7F 7F 
10b9c     7F 7F 7F 7F | 	byte	$7f[12]
10ba0     7E 7F 7F 7F 
10ba4     7E 7F 7F 76 
10ba8     78 76 6C 7F 
10bac     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
10bb0     6A 78 67 60 
10bb4     64 64 6C 7C 
10bb8     60 5E 78 60 
10bbc     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
10bc0     60 52 66 5A 
10bc4     4E 4B 48 3C 
10bc8     37 46 30 2E 
10bcc     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
10bd0     3F 30 2A 2D 
10bd4     24 22 3A 3C 
10bd8     28 2A 12 22 
10bdc     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
10be0     1B 1E 1F 1E 
10be4     0C 00 10 00 
10be8     FF 18 0A 06 
10bec     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
10bf0     F4 F3 EE DC 
10bf4     DE E5 E7 E7 
10bf8     F9 E8 D8 E1 
10bfc     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
10c00     E8 D2 CA DB 
10c04     D0 CF D0 C9 
10c08     C4 B8 B7 C9 
10c0c     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
10c10     BD BA B2 AE 
10c14     A9 AF AC AF 
10c18     A8 B7 AC 9F 
10c1c     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
10c20     9C 94 8D 94 
10c24     9F A0 A0 94 
10c28     93 9F 97 9C 
10c2c     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
10c30     87 91 80 80 
10c34     80 80 80 87 
10c38     88 87 80 81 
10c3c     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
10c40     80 80 87 80 
10c44     80 80 81 82 
10c48     80 80 80 81 
10c4c     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
10c50     84 87 80 80 
10c54     87 8E 93 88 
10c58     80 81 85 8D 
10c5c     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
10c60     8B 8E 93 8B 
10c64     93 96 8E 93 
10c68     9A 9F 99 97 
10c6c     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
10c70     A0 9F A8 A6 
10c74     A5 A8 A8 A8 
10c78     A0 9F A3 AB 
10c7c     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
10c80     B4 A6 B7 B8 
10c84     AB B1 B8 B1 
10c88     B7 B8 B7 BA 
10c8c     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
10c90     C7 C6 CA C4 
10c94     CF C4 CF D0 
10c98     DB D0 CF D0 
10c9c     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
10ca0     DF DE DC DE 
10ca4     E4 E2 F3 DC 
10ca8     E7 E8 ED E8 
10cac     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
10cb0     E8 FF 00 FF 
10cb4     00 FF 01 04 
10cb8     07 07 13 12 
10cbc     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
10cc0     07 16 18 18 
10cc4     13 19 19 22 
10cc8     27 34 30 22 
10ccc     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
10cd0     36 33 37 37 
10cd4     37 30 34 30 
10cd8     2E 40 36 46 
10cdc     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
10ce0     4C 4B 4C 5B 
10ce4     55 5E 60 52 
10ce8     57 4E 52 61 
10cec     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
10cf0     58 5E 60 5E 
10cf4     66 69 6A 6F 
10cf8     69 6A 66 67 
10cfc     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
10d00     73 73 76 78 
10d04     7C 7F 7B 79 
10d08     78 7B 6D 73 
10d0c     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
10d10     76 72 73 76 
10d14     72 6D 67 70 
10d18     72 7B 78 7C 
10d1c     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
10d20     72 75 78 6F 
10d24     70 6F 6F 67 
10d28     6A 79 72 67 
10d2c     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
10d30     70 6F 67 6A 
10d34     60 64 60 57 
10d38     57 5E 5A 5D 
10d3c     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
10d40     54 4F 58 54 
10d44     51 52 4F 52 
10d48     4F 4F 4F 51 
10d4c     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
10d50     3D 3F 3F 3C 
10d54     3F 36 37 30 
10d58     34 3C 36 33 
10d5c     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
10d60     27 2B 1E 22 
10d64     1E 1E 18 0F 
10d68     0D 0C 10 10 
10d6c     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
10d70     0F 06 0A 06 
10d74     0A 0A 00 F4 
10d78     F6 F0 F3 FD 
10d7c     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
10d80     EE EE EE E8 
10d84     E7 ED E8 E7 
10d88     E5 DF E1 DE 
10d8c     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
10d90     D8 DB D3 D8 
10d94     D0 C9 C7 C9 
10d98     CF D0 CF CF 
10d9c     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
10da0     BE C0 C1 C1 
10da4     C3 C1 C0 BE 
10da8     C1 BB BE BB 
10dac     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
10db0     B8 B7 B5 AE 
10db4     B1 AF B5 AC 
10db8     A8 AB AE B1 
10dbc     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
10dc0     9F 9D 9F A5 
10dc4     A8 AC A3 A5 
10dc8     A6 A6 A2 A3 
10dcc     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
10dd0     B1 AC A6 A6 
10dd4     A5 A6 A5 A8 
10dd8     A3 A8 A8 A3 
10ddc     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
10de0     A5 A3 9D 9F 
10de4     A9 A8 AB A0 
10de8     9F A8 A2 AB 
10dec     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
10df0     B2 AE B4 AF 
10df4     B1 AE B5 AF 
10df8     AE B7 B2 AF 
10dfc     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
10e00     AF B5 B7 B2 
10e04     B4 B8 BB BD 
10e08     C6 C4 C4 C6 
10e0c     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
10e10     C6 C7 CC CC 
10e14     C7 C9 D0 C7 
10e18     CF CC CD CF 
10e1c     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
10e20     DE DB DC DF 
10e24     DE DB E1 E4 
10e28     E7 ED EA E5 
10e2c     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
10e30     ED EE EB EB 
10e34     F0 F3 F7 F6 
10e38     FC FF 00 01 
10e3c     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
10e40     01 07 06 07 
10e44     04 07 06 09 
10e48     0C 0C 0C 0D 
10e4c     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
10e50     19 18 18 18 
10e54     10 19 18 1B 
10e58     19 1B 18 19 
10e5c     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
10e60     25 28 27 27 
10e64     2A 2E 30 30 
10e68     30 2A 28 2E 
10e6c     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
10e70     2B 28 2A 2D 
10e74     30 30 30 33 
10e78     36 37 36 37 
10e7c     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
10e80     3A 3C 36 3C 
10e84     3C 3C 3A 3C 
10e88     39 3D 3C 3C 
10e8c     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
10e90     40 46 43 40 
10e94     3F 40 40 3F 
10e98     42 3F 40 42 
10e9c     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
10ea0     4C 4B 4E 4B 
10ea4     49 4F 4B 4B 
10ea8     48 48 45 48 
10eac     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
10eb0     45 48 42 3F 
10eb4     43 43 46 48 
10eb8     49 49 49 4B 
10ebc     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
10ec0     43 45 43 42 
10ec4     3F 3F 3D 3F 
10ec8     45 43 43 3F 
10ecc     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
10ed0     3D 3D 40 3F 
10ed4     3F 39 3A 3A 
10ed8     39 3C 3D 3C 
10edc     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
10ee0     33 33 34 36 
10ee4     36 31 30 30 
10ee8     2D 2A 28 27 
10eec     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
10ef0     28 28 24 22 
10ef4     22 21 21 21 
10ef8     22 1F 1F 21 
10efc     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
10f00     21 1B 19 18 
10f04     12 10 0F 0C 
10f08     0C 0D 0C 0F 
10f0c     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
10f10     0C 0A 09 06 
10f14     07 06 03 03 
10f18     01 01 01 00 
10f1c     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
10f20     FA F7 F7 F7 
10f24     F6 F4 F1 F0 
10f28     F3 F3 F6 F1 
10f2c     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
10f30     E5 E7 E8 E7 
10f34     E5 E4 E4 E5 
10f38     E4 E7 E5 E4 
10f3c     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
10f40     DE DB DB D9 
10f44     D9 DB D9 D6 
10f48     D8 D8 D8 D9 
10f4c     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
10f50     DC DC DE DC 
10f54     D9 D6 D6 D5 
10f58     D5 D5 D6 D3 
10f5c     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
10f60     CF D0 D2 D2 
10f64     D2 D2 D3 D2 
10f68     D2 D2 D2 D0 
10f6c     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
10f70     D2 D3 D2 D2 
10f74     D2 D2 D3 D3 
10f78     D3 D5 D6 D8 
10f7c     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
10f80     D3 D5 D6 D6 
10f84     D5 D5 D5 D5 
10f88     D5 D3 D5 D5 
10f8c     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
10f90     D6 D6 D5 D5 
10f94     D3 D5 D6 D6 
10f98     D6 D8 D8 D9 
10f9c     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
10fa0     D8 DB DE DF 
10fa4     DF DF DF DF 
10fa8     DF DF E1 DF 
10fac     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
10fb0     E5 E4 E4 E4 
10fb4     E2 E2 DE DF 
10fb8     E1 E1 E4 E4 
10fbc     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
10fc0     E7 E8 EA EA 
10fc4     EA ED EE ED 
10fc8     ED EB ED F0 
10fcc     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
10fd0     F1 F1 F1 F0 
10fd4     EE F0 F0 F0 
10fd8     F1 F1 F1 F1 
10fdc     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
10fe0     F3 F4 F7 F9 
10fe4     FD FF FF FF 
10fe8     FF 00 00 00 
10fec     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
10ff0     FD FC FA FA 
10ff4     FA FC FD FD 
10ff8     FD FD FF 00 
10ffc     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
11000     04 04 07 09 
11004     09 0A 0C 0C 
11008     0A 0A 09 09 
1100c     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
11010     03 04 06 07 
11014     0A 0C 0C 0D 
11018     0D 0C 0A 0A 
1101c     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
11020     0F 0F 0D 0C 
11024     0D 0F 0D 0F 
11028     0F 0F 0F 10 
1102c     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
11030     0D 0C 0D 0D 
11034     0D 0F 0D 0C 
11038     0C 0C 0C 0F 
1103c     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
11040     12 12 10 10 
11044     10 12 13 13 
11048     13 15 16 18 
1104c     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
11050     19 19 18 13 
11054     13 12 10 10 
11058     0F 0F 0F 0F 
1105c     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
11060     0D 0C 0D 0D 
11064     0F 10 12 10 
11068     10 0F 0F 0F 
1106c     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
11070     10 10 12 12 
11074     10 12 12 10 
11078     12 12 10 0F 
1107c     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
11080     0A 0C 0D 0F 
11084     10 12 12 12 
11088     0F 0D 0C 0A 
1108c     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
11090     0C 09 09 09 
11094     09 09 09 09 
11098     09 0A 0A 0C 
1109c     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
110a0     0D 0D 0D 0C 
110a4     0C 0A 09 09 
110a8     09 09 09 09 
110ac     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
110b0     07 06 03 03 
110b4     03 06 06 07 
110b8     07 06 06 06 
110bc     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
110c0     03 01 01 00 
110c4     01 01 01 03 
110c8     03 06 09 09 
110cc     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
110d0     03 01 01 01 
110d4     03 03 03 01 
110d8     01 01 01 00 
110dc     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
110e0     01 03 01 00 
110e4     00 FD FD FC 
110e8     FC FC FC FA 
110ec     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
110f0     FF 01 03 03 
110f4     04 04 04 03 
110f8     00 FD FC FC 
110fc     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
11100     FD FD FD FC 
11104     FC FA FA F9 
11108     F7 F9 FA FC 
1110c     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
11110     FA FA F9 FA 
11114     FA FA FC FC 
11118     FC FD FD FD 
1111c     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
11120     F7 F6 F6 F6 
11124     F6 F7 F9 FA 
11128     FC FD FD FF 
1112c     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
11130     FF FF 00 00 
11134     00 00 00 FF 
11138     FC FA FA F9 
1113c     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
11140     F7 F7 F9 F9 
11144     F9 FA FA F9 
11148     F9 F9 F7 F7 
1114c     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
11150     FA FA FA FA 
11154     FA FA       | 	byte	$fa[6]
11156     F9 F9 F7 F7 
1115a     F7 F9 F9 FA 
1115e     FA FA F9 F9 
11162     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
11166     FC FC FC FD 
1116a     FC FD FD FC 
1116e     FC FC FD FD 
11172     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
11176     F7 F9 FA FC 
1117a     FC FC FC FC 
1117e     FC FC FC FC 
11182     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
11186     F9 F9 F9 F7 
1118a     F7 F7 F7 F6 
1118e     F7 F7 F7 F7 
11192     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
11196     F7 F9 F9 F9 
1119a     F9 F9 F9 F9 
1119e     F9 F9 F9 F7 
111a2     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
111a6     FA FC FC FA 
111aa     FC FC FA FA 
111ae     FA FA FA FA 
111b2     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
111b6     F7 F9 F9 F9 
111ba     F9 F7 F7 F6 
111be     F7 F9 FC 00 
111c2     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
111c6     FA FA F9 F9 
111ca     F9 FA FC FC 
111ce     FC FC FC FD 
111d2     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
111d6     FC FC FD FD 
111da     FC FA F9 F7 
111de     F7 F9 FA FC 
111e2     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
111e6     FC FC FC FC 
111ea     FA FA F9 F9 
111ee     F9 F9 F9 F7 
111f2     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
111f6     F7 F7 F7 F7 
111fa     F7 F7 F7 F7 
111fe     F7          | 	byte	$f7[9]
111ff     F9 F9 F9 F9 
11203     F9 F9 F9 F9 
11207     F9 F9       | 	byte	$f9[10]
11209     F7 F7 F7 F7 
1120d     F9 FA FC FC 
11211     FA FC FC FA 
11215     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
11219     FA F9 F7 F7 
1121d     F7 F7 F9 F9 
11221     F9 F9 F7 F7 
11225     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
11229     00 05 05 08 
1122d     08 09 0A 0B 
11231     06 09 09 09 
11235     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
11239     0B 0A 0F 17 
1123d     04 10 FF 08 
11241     F8 F3 08 07 
11245     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
11249     1D 24 00 FF 
1124d     14 20 0F 12 
11251     10 20 01 10 
11255     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
11259     D8 F7 D7 F0 
1125d     FF CB F7 F7 
11261     F2 FF EB E4 
11265     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
11269     18 32 27 17 
1126d     1F 30 40 4C 
11271     24 3C 27 23 
11275     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
11279     08 28 E7 00 
1127d     ED E7 F8 F0 
11281     FD F4 D7 E8 
11285     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
11289     D7 EC 1B 3B 
1128d     20 25 16 13 
11291     27 30 40 37 
11295     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
11299     19 E0 F5 EF 
1129d     E1 FC F0 F2 
112a1     E0 D7 D2 C8 
112a5     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
112a9     EF FB FA 2B 
112ad     FD 0F 1F 31 
112b1     3D 34 44 37 
112b5     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
112b9     38 22 3A 25 
112bd     31 2A 00 0C 
112c1     00 0F 1B 38 
112c5     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
112c9     00 EF F4 F2 
112cd     F7 0A 17 14 
112d1     10 EF ED F2 
112d5     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
112d9     10 1F 1C F0 
112dd     F4 DB DF D9 
112e1     EE 00 E8 E2 
112e5     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
112e9     D4 BF DD E8 
112ed     FF 04 18 0E 
112f1     0D 22 2D 34 
112f5     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
112f9     1B 36 2A 1C 
112fd     22 13 2B 28 
11301     0E 10 FF E6 
11305     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
11309     0C 1B 00 02 
1130d     00 FA FB 0B 
11311     17 35 34 27 
11315     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
11319     0B 1A 11 23 
1131d     20 20 02 FA 
11321     E1 D8 E6 E4 
11325     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
11329     CE D2 C8 C5 
1132d     CB CB CF EC 
11331     FF 02 F4 05 
11335     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
11339     4A 28 25 26 
1133d     10 2F 1D 14 
11341     1F 20 20 20 
11345     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
11349     14 17 0F 18 
1134d     0B F8 04 FC 
11351     04 FD 07 2A 
11355     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
11359     1C 08 14 1A 
1135d     1B 1B 20 1C 
11361     10 10 F4 E6 
11365     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
11369     F2 F3 E9 E8 
1136d     D5 CE D8 D7 
11371     DB DD F7 05 
11375     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
11379     04 1B 37 36 
1137d     39 26 19 23 
11381     1A 15 1F 0B 
11385     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
11389     F8 E0 E6 F1 
1138d     FD 0D 09 02 
11391     EC F5 00 EA 
11395     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
11399     37 3B 2D 20 
1139d     1C 17 20 27 
113a1     31 29 2F 20 
113a5     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
113a9     E3 DF EF E8 
113ad     F3 F3 E0 E0 
113b1     CF D7 D1 DD 
113b5     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
113b9     1D 21 13 1B 
113bd     1B 32 43 40 
113c1     2E 2F 20 26 
113c5     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
113c9     14 23 19 01 
113cd     F0 EA F3 F5 
113d1     07 12 F6 F3 
113d5     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
113d9     EE F1 0D 26 
113dd     2A 20 13 10 
113e1     03 0C 1A 1B 
113e5     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
113e9     00 F0 E4 DF 
113ed     E3 DD E9 F1 
113f1     F3 E4 DF D8 
113f5     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
113f9     F9 03 13 1B 
113fd     1D 24 1C 1F 
11401     3B 3B 48 40 
11405     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
11409     28 21 14 1E 
1140d     1D 21 0A F9 
11411     F6 EF FD 13 
11415     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
11419     F4 F5 F0 F2 
1141d     F5 0B 28 26 
11421     23 20 05 06 
11425     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
11429     1B 12 09 FC 
1142d     E3 E4 D9 D9 
11431     CE DD E2 DF 
11435     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
11439     C8 CF DC E7 
1143d     FC 03 0E 20 
11441     14 17 21 29 
11445     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
11449     30 23 31 28 
1144d     2C 22 29 30 
11451     21 1A 10 F6 
11455     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
11459     11 05 FD F8 
1145d     FA F8 EC F5 
11461     13 20 2B 2C 
11465     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
11469     14 1B 20 20 
1146d     1E 10 02 F0 
11471     EE E4 D8 DD 
11475     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
11479     DD DC CD CE 
1147d     CD D7 EE ED 
11481     FA 0C 0D 10 
11485     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
11489     31 39 2C 21 
1148d     1A 1D 20 18 
11491     1B 24 20 21 
11495     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
11499     03 11 1A 18 
1149d     10 06 FF 07 
114a1     F6 F3 03 12 
114a5     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
114a9     1E 14 15 1A 
114ad     1E 27 26 25 
114b1     18 04 FD F1 
114b5     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
114b9     E6 E6 EA E5 
114bd     DA D4 C7 CF 
114c1     DF EA EE FF 
114c5     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
114c9     14 17 27 38 
114cd     39 33 1E 1C 
114d1     20 18 19 20 
114d5     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
114d9     0A F6 F2 FB 
114dd     06 0E 14 04 
114e1     FC FC F4 ED 
114e5     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
114e9     24 2E 26 18 
114ed     14 0F 16 1B 
114f1     21 2C 2C 18 
114f5     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
114f9     E5 E5 E5 EB 
114fd     F6 F2 F0 EC 
11501     DA CF D9 DF 
11505     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
11509     10 12 14 10 
1150d     17 23 36 3E 
11511     2A 22 20 15 
11515     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
11519     1C 1D 18 08 
1151d     F5 F4 F3 FF 
11521     0E 0E 08 00 
11525     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
11529     F4 FD 0E 25 
1152d     2A 26 1B 10 
11531     0C 11 11 21 
11535     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
11539     FE F3 E8 E4 
1153d     DA D9 E2 E5 
11541     E9 F1 E2 D4 
11545     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
11549     F3 FF 08 13 
1154d     17 19 18 18 
11551     2B 42 40 3C 
11555     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
11559     1F 21 21 26 
1155d     29 20 10 00 
11561     F4 F6 FF 0D 
11565     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
11569     F0 E8 EA EA 
1156d     F5 07 1B 25 
11571     27 1A 13 10 
11575     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
11579     26 1C 13 04 
1157d     F5 EF E4 DF 
11581     DF DC E3 ED 
11585     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
11589     CF D6 E1 EC 
1158d     F6 02 09 13 
11591     14 0A 13 23 
11595     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
11599     29 20 1D 1E 
1159d     1A 1F 26 29 
115a1     24 18 09 FA 
115a5     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
115a9     14 14 08 FC 
115ad     F6 F4 F1 FD 
115b1     0B 1F 2D 2A 
115b5     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
115b9     14 20 27 25 
115bd     25 14 04 FA 
115c1     E9 E0 DC D5 
115c5     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
115c9     E0 D0 C8 C6 
115cd     D3 D9 E9 F2 
115d1     F9 07 14 10 
115d5     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
115d9     38 36 34 28 
115dd     22 20 18 1A 
115e1     1C 23 27 23 
115e5     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
115e9     FF 05 0A 11 
115ed     10 01 FC F5 
115f1     ED EE F1 05 
115f5     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
115f9     20 14 12 1B 
115fd     23 2B 33 2C 
11601     20 15 04 F9 
11605     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
11609     DF EF F0 EA 
1160d     D8 D0 CD D2 
11611     DB E8 ED F5 
11615     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
11619     09 19 21 2D 
1161d     32 2B 23 1B 
11621     12 10 0C 14 
11625     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
11629     06 FA FB FE 
1162d     03 0F 15 11 
11631     0D 02 FB F4 
11635     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
11639     24 2B 2C 22 
1163d     14 14 10 1A 
11641     26 2D 2A 20 
11645     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
11649     E6 DD D8 DD 
1164d     EB F2 E8 E0 
11651     D6 CD D5 E2 
11655     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
11659     16 10 10 13 
1165d     1D 29 35 38 
11661     34 2C 25 1C 
11665     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
11669     22 24 18 05 
1166d     FC F6 F4 FB 
11671     07 0D 0E 06 
11675     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
11679     EB F7 09 19 
1167d     29 28 1E 17 
11681     10 10 19 22 
11685     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
11689     08 00 F3 E8 
1168d     E0 D5 DF ED 
11691     EE EC E1 D6 
11695     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
11699     ED FB 08 10 
1169d     0E 0E 0D 1B 
116a1     27 31 39 34 
116a5     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
116a9     13 17 1B 27 
116ad     28 1E 14 06 
116b1     FE FB FF 0C 
116b5     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
116b9     01 F4 EF F1 
116bd     F6 05 1B 27 
116c1     28 24 18 11 
116c5     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
116c9     2A 26 18 0A 
116cd     FD F3 E8 D4 
116d1     CE D7 DF E3 
116d5     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
116d9     CD D3 D8 E5 
116dd     F7 02 0E 0E 
116e1     0E 0F 15 27 
116e5     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
116e9     2C 20 1B 14 
116ed     13 1D 25 26 
116f1     22 18 0D 00 
116f5     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
116f9     12 11 0C 00 
116fd     F5 F2 EC EF 
11701     FF 11 20 25 
11705     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
11709     17 22 2B 33 
1170d     2A 22 15 0C 
11711     06 F0 DD DB 
11715     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
11719     E0 D1 CD D1 
1171d     D0 D5 DF EB 
11721     FB 05 0A 06 
11725     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
11729     2D 2E 2C 21 
1172d     1C 10 07 0D 
11731     13 19 1C 1C 
11735     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
11739     FF 0E 15 1A 
1173d     1D 14 0D 05 
11741     FC F8 FB 06 
11745     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
11749     20 16 11 12 
1174d     20 29 2D 2A 
11751     1C 13 10 00 
11755     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
11759     DE E5 E8 E0 
1175d     D5 D0 D1 D4 
11761     D4 DF EE FE 
11765     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
11769     14 20 27 32 
1176d     35 31 2C 20 
11771     15 0C 0C 11 
11775     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
11779     03 F4 EC F3 
1177d     F9 01 0C 0F 
11781     0C 06 00 F6 
11785     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
11789     1F 30 34 2C 
1178d     20 15 1A 23 
11791     2E 36 2D 25 
11795     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
11799     E7 DC D8 E3 
1179d     E8 EB E3 DA 
117a1     D6 D4 D2 D7 
117a5     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
117a9     0B 07 0B 10 
117ad     16 26 2E 33 
117b1     32 2D 22 14 
117b5     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
117b9     14 13 10 08 
117bd     FA F4 F4 F7 
117c1     03 0F 12 10 
117c5     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
117c9     F6 FD 09 1B 
117cd     2B 32 2C 20 
117d1     14 10 1A 2B 
117d5     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
117d9     18 0A 00 E8 
117dd     D9 D4 DE E7 
117e1     E6 E2 E0 D5 
117e5     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
117e9     EA FA 06 07 
117ed     0D 0E 0E 19 
117f1     27 2D 35 37 
117f5     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
117f9     11 14 19 1A 
117fd     1D 16 0C 04 
11801     F9 F8 F8 FF 
11805     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
11809     00 F5 F0 F2 
1180d     F6 FF 0F 23 
11811     2D 28 20 10 
11815     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
11819     2F 2B 24 1C 
1181d     14 01 F2 E1 
11821     D9 E0 E5 E9 
11825     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
11829     CE D3 DA E3 
1182d     EF FE FF 0B 
11831     0B 0D 13 1F 
11835     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
11839     26 19 0D 0A 
1183d     0C 11 17 17 
11841     14 0D 08 01 
11845     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
11849     17 20 19 10 
1184d     02 FE FD FD 
11851     03 17 27 2D 
11855     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
11859     12 22 2C 2E 
1185d     29 20 19 16 
11861     05 F0 E0 D7 
11865     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
11869     D9 D3 CB CB 
1186d     CD D4 E3 EF 
11871     FB 08 0D 11 
11875     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
11879     3D 40 40 00 
1187d     00 FF FF FE 
11881     FF FF 00 00 
11885     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
11889     03 05 05 05 
1188d     06 09 09 07 
11891     05 02 03 06 
11895     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
11899     0E 06 FD F4 
1189d     F3 F0 F0 F2 
118a1     FA FF FF FE 
118a5     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
118a9     FE F6 F0 F0 
118ad     EB EC E4 DE 
118b1     DD D5 D4 C9 
118b5     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
118b9     E1 DD DC DD 
118bd     E0 F5 07 17 
118c1     19 18 16 FC 
118c5     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
118c9     EE F9 FC FE 
118cd     09 F6 F2 E1 
118d1     CE C3 BE BD 
118d5     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
118d9     FD 00 18 1E 
118dd     2B 25 1B 0C 
118e1     03 FF FE F4 
118e5     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
118e9     F2 01 12 14 
118ed     14 02 EC D1 
118f1     CC CC CA CA 
118f5     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
118f9     BD B7 B8 BD 
118fd     C8 D1 E3 EC 
11901     F7 02 08 07 
11905     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
11909     FB FE 09 17 
1190d     2B 32 38 39 
11911     36 35 36 34 
11915     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
11919     EC E2 D4 DC 
1191d     E0 E7 F0 F8 
11921     01 F9 F7 F2 
11925     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
11929     F1 FB FB 05 
1192d     00 F0 E2 D5 
11931     D7 CD CE C6 
11935     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
11939     D8 C7 BD B8 
1193d     BE D2 E8 FE 
11941     04 08 07 0C 
11945     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
11949     2E 29 23 0E 
1194d     FE E4 DF CB 
11951     BA B9 B4 B8 
11955     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
11959     ED F2 F8 01 
1195d     07 07 0F 14 
11961     1B 22 21 11 
11965     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
11969     0F 14 12 FD 
1196d     DC C9 AF 9F 
11971     9E 9E A5 B4 
11975     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
11979     D4 D9 E2 EF 
1197d     F4 FB 00 06 
11981     0B 0A 09 04 
11985     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
11989     F3 FD 05 17 
1198d     28 29 28 23 
11991     19 20 29 37 
11995     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
11999     FD 01 01 0D 
1199d     1D 1D 24 16 
119a1     0D FA F3 DC 
119a5     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
119a9     CD DF E8 ED 
119ad     E7 EA ED ED 
119b1     EE ED E3 DB 
119b5     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
119b9     D7 C7 C4 C5 
119bd     C7 DB E6 EA 
119c1     E6 E5 E4 EB 
119c5     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
119c9     2C 2F 2E 2D 
119cd     21 09 F9 E4 
119d1     DE DF E4 E6 
119d5     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
119d9     E4 E4 D9 D8 
119dd     D6 D4 DC F1 
119e1     FC 12 1D 27 
119e5     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
119e9     37 30 08 E6 
119ed     C3 B0 A0 9F 
119f1     A3 AA B8 C5 
119f5     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
119f9     C7 C6 C9 D4 
119fd     E3 01 15 27 
11a01     35 38 35 30 
11a05     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
11a09     00 03 05 0A 
11a0d     15 08 FD F3 
11a11     F3 F8 01 0C 
11a15     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
11a19     0C 24 3A 41 
11a1d     4C 4A 38 2A 
11a21     17 F8 E3 CE 
11a25     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
11a29     D5 D0 D0 CF 
11a2d     CC CB CE CB 
11a31     C4 C7 CC DF 
11a35     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
11a39     0A 04 FF FE 
11a3d     FE 01 00 EF 
11a41     EC E7 E6 E4 
11a45     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
11a49     FD FD F3 ED 
11a4d     E7 E2 DB E6 
11a51     F3 FC 11 19 
11a55     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
11a59     FB F3 DC CC 
11a5d     C4 C7 CA E1 
11a61     ED 03 08 0B 
11a65     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
11a69     18 0C FD F0 
11a6d     E6 E2 E4 EE 
11a71     F2 F8 EC E7 
11a75     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
11a79     A8 9E AD BD 
11a7d     D8 ED FA 0D 
11a81     15 1B 2A 27 
11a85     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
11a89     1A 21 23 20 
11a8d     1B 12 03 F2 
11a91     F1 E8 EA E3 
11a95     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
11a99     1E 33 4C 53 
11a9d     51 51 4A 41 
11aa1     3C 1D 09 FF 
11aa5     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
11aa9     DF CF C8 BB 
11aad     BF A6 A3 9D 
11ab1     94 9C A5 B5 
11ab5     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
11ab9     FC FE 08 0E 
11abd     18 0F 0F 08 
11ac1     01 03 03 08 
11ac5     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
11ac9     DD D4 C7 C2 
11acd     BC BF C9 D6 
11ad1     ED FA 0D 1B 
11ad5     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
11ad9     36 1F 0E FC 
11add     EE EC F3 FC 
11ae1     09 0B 04 F6 
11ae5     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
11ae9     CA B9 B7 B5 
11aed     C5 D2 EE FD 
11af1     14 08 09 09 
11af5     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
11af9     D7 D6 CE CF 
11afd     DA D3 D7 E3 
11b01     EB F3 02 04 
11b05     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
11b09     1F 32 47 49 
11b0d     4F 44 3C 2F 
11b11     21 14 FE F4 
11b15     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
11b19     0E 18 26 18 
11b1d     10 0A 04 FB 
11b21     F5 F5 F3 F6 
11b25     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
11b29     F5 EB E2 DA 
11b2d     D5 C7 C2 AA 
11b31     A0 96 98 9B 
11b35     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
11b39     F0 FC 0F 1A 
11b3d     17 1E 27 2D 
11b41     3C 3A 45 46 
11b45     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
11b49     F6 E9 E2 DA 
11b4d     D5 CA C6 CC 
11b51     CE CF D4 DA 
11b55     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
11b59     F2 F0 EE E9 
11b5d     F7 F7 06 18 
11b61     13 1F 1C 1B 
11b65     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
11b69     B1 9F A2 A5 
11b6d     B5 D7 EE F3 
11b71     FD FD 03 11 
11b75     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
11b79     1A 17 16 09 
11b7d     04 05 06 09 
11b81     0E 0F FD F4 
11b85     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
11b89     E7 ED FD 05 
11b8d     08 0A 1A 23 
11b91     21 21 1F 1C 
11b95     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
11b99     3B 33 22 07 
11b9d     F2 E2 D4 CC 
11ba1     CF D7 E6 FA 
11ba5     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
11ba9     05 0A 0B 06 
11bad     FF F3 E0 C9 
11bb1     B9 BA BA CA 
11bb5     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
11bb9     E6 F0 ED F4 
11bbd     ED ED EE F0 
11bc1     FB 00 07 17 
11bc5     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
11bc9     F4 F7 F6 F7 
11bcd     F9 FE FE 04 
11bd1     F8 EF E6 DD 
11bd5     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
11bd9     DD E5 E5 ED 
11bdd     FE 0A 1C 2E 
11be1     2A 2F 2D 2A 
11be5     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
11be9     E8 E4 EF F7 
11bed     EB F0 E6 D4 
11bf1     D2 D3 D3 D4 
11bf5     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
11bf9     F5 FF 02 01 
11bfd     00 03 05 07 
11c01     07 0A 05 FE 
11c05     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
11c09     EA E9 E9 EE 
11c0d     F7 0A 1A 28 
11c11     39 44 49 58 
11c15     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
11c19     32 16 02 FC 
11c1d     EF F5 F5 FF 
11c21     04 02 02 01 
11c25     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
11c29     D2 D4 D3 D0 
11c2d     CF CC C5 C6 
11c31     BB C3 CC D0 
11c35     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
11c39     FD 00 0C 0F 
11c3d     09 02 F9 F1 
11c41     EC F0 F0 F2 
11c45     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
11c49     31 32 30 2D 
11c4d     21 18 06 FD 
11c51     F9 F4 F5 FF 
11c55     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
11c59     DD D5 C8 C1 
11c5d     C6 C7 CF D8 
11c61     DD EB F4 F8 
11c65     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
11c69     F4 F2 E8 E9 
11c6d     E2 DB DB DD 
11c71     ED EF F9 F6 
11c75     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
11c79     03 0A 14 1D 
11c7d     25 2A 34 35 
11c81     25 23 15 03 
11c85     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
11c89     09 16 1D 1A 
11c8d     18 18 1A 25 
11c91     29 2A 29 28 
11c95     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
11c99     EC E5 E0 E7 
11c9d     E8 ED F1 F8 
11ca1     FF 04 00 F8 
11ca5     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
11ca9     D7 D3 C9 CA 
11cad     C7 C6 C9 D9 
11cb1     DE F1 FE 02 
11cb5     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
11cb9     07 0C 1B 1D 
11cbd     1F 20 1B 1B 
11cc1     06 EC E3 DE 
11cc5     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
11cc9     02 00 03 05 
11ccd     03 01 FE F4 
11cd1     F5 F2 F0 F0 
11cd5     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
11cd9     D2 D0 D3 D3 
11cdd     D8 D7 E2 E3 
11ce1     EE ED F4 03 
11ce5     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
11ce9     28 17 0A F4 
11ced     E2 E0 E0 EC 
11cf1     FA 08 15 13 
11cf5     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
11cf9     0D FF 01 FE 
11cfd     FB FA F7 F5 
11d01     E8 E9 E6 E3 
11d05     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
11d09     FB 00 06 0B 
11d0d     11 1C 31 46 
11d11     4C 48 3D 29 
11d15     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
11d19     E4 EE FE 0F 
11d1d     18 23 21 23 
11d21     24 10 0D 08 
11d25     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
11d29     00 00 F0 E6 
11d2d     D8 CB C4 C0 
11d31     C2 C7 CB CF 
11d35     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
11d39     FC 00 07 07 
11d3d     07 F7 F4 DB 
11d41     CB CF D7 E6 
11d45     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
11d49     25 20 1F 0D 
11d4d     08 01 03 06 
11d51     10 0D 0B 00 
11d55     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
11d59     D3 D3 D0 DA 
11d5d     E3 F5 0C 02 
11d61     02 03 0B 19 
11d65     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
11d69     FC E0 D0 CD 
11d6d     C8 CC D8 E3 
11d71     E9 F2 F8 F6 
11d75     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
11d79     F9 00 09 0F 
11d7d     18 18 18 16 
11d81     0C 06 01 03 
11d85     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
11d89     1B 1C 12 1E 
11d8d     2D 3A 4E 56 
11d91     53 43 3C 1F 
11d95     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
11d99     E0 F0 F4 03 
11d9d     08 12 0D 08 
11da1     FF F7 F2 E1 
11da5     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
11da9     CE CB C6 C0 
11dad     BB BD C2 D1 
11db1     D5 E4 EB F3 
11db5     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
11db9     1C 1E 27 25 
11dbd     1B F7 E5 D5 
11dc1     DB EC FE 15 
11dc5     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
11dc9     4A 38 2E 1E 
11dcd     11 04 00 F4 
11dd1     EC E8 E6 DA 
11dd5     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
11dd9     AA AF B1 C2 
11ddd     D1 DB D3 DC 
11de1     EB EF 04 12 
11de5     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
11de9     03 F9 F6 F7 
11ded     F7 06 0B 14 
11df1     19 18 0E FF 
11df5     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
11df9     0A 14 18 1A 
11dfd     21 1F 12 07 
11e01     02 01 FE 00 
11e05     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
11e09     21 20 20 2A 
11e0d     29 29 1E 10 
11e11     07 EB D6 CE 
11e15     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
11e19     E7 FE 14 2A 
11e1d     2F 2E 2E 2E 
11e21     26 1F 16 0E 
11e25     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
11e29     DE D5 CD CC 
11e2d     CF E0 E5 EF 
11e31     FD 02 FC F3 
11e35     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
11e39     05 06 05 F4 
11e3d     E6 E2 D7 DC 
11e41     E7 ED F7 02 
11e45     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
11e49     06 05 F9 FB 
11e4d     F1 ED ED ED 
11e51     EE F3 F3 F2 
11e55     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
11e59     D7 E8 F2 F6 
11e5d     E8 E4 E6 00 
11e61     0F 21 36 38 
11e65     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
11e69     04 FC FD FA 
11e6d     FF 06 05 15 
11e71     0C 05 06 01 
11e75     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
11e79     E0 DE DF DF 
11e7d     E0 E3 E5 E3 
11e81     E6 EB F7 0E 
11e85     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
11e89     37 47 4B 51 
11e8d     44 3E 2E 0C 
11e91     FA DE D0 C9 
11e95     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
11e99     2E 43 48 3E 
11e9d     34 24 1D 10 
11ea1     09 01 F9 F0 
11ea5     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
11ea9     E4 D6 D6 C4 
11ead     BB BD BE BD 
11eb1     BC B9 BC CD 
11eb5     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
11eb9     FE FB F9 F6 
11ebd     F9 FE 08 16 
11ec1     22 2C 39 37 
11ec5     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
11ec9     04 02 02 05 
11ecd     07 09 07 09 
11ed1     07 F8 EA D8 
11ed5     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
11ed9     ED EE EE EE 
11edd     F3 FC 07 0F 
11ee1     0F 0A 01 ED 
11ee5     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
11ee9     D9 E1 EA F2 
11eed     05 0D 13 14 
11ef1     16 17 1A 1C 
11ef5     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
11ef9     02 00 F2 E8 
11efd     E4 E5 EA F9 
11f01     0D 24 42 4D 
11f05     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
11f09     31 2C 2D 22 
11f0d     15 02 F1 E8 
11f11     E4 E4 E5 ED 
11f15     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
11f19     0A 00 FA F9 
11f1d     F9 F7 FF F8 
11f21     F9 FA F5 FB 
11f25     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
11f29     F6 EC EC EC 
11f2d     E9 E4 DB CD 
11f31     C3 BE CC E1 
11f35     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
11f39     18 17 12 02 
11f3d     05 02 05 0F 
11f41     1D 2A 2A 27 
11f45     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
11f49     FE F4 E5 CF 
11f4d     C4 B7 B4 AF 
11f51     AF AD AD B2 
11f55     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
11f59     FC 09 0E 15 
11f5d     1F 31 3D 44 
11f61     41 27 11 07 
11f65     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
11f69     E8 FD 12 29 
11f6d     33 36 35 2A 
11f71     1A 15 0E 09 
11f75     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
11f79     06 07 06 07 
11f7d     06 03 01 01 
11f81     02 02 00 FD 
11f85     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
11f89     FD 03 05 F9 
11f8d     F1 F3 F6 FB 
11f91     04 0A 19 23 
11f95     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
11f99     1D 0F 00 FC 
11f9d     FB FD 0C 11 
11fa1     1C 27 27 27 
11fa5     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
11fa9     D0 CB CC C9 
11fad     C9 D0 D0 D3 
11fb1     DD E8 F8 02 
11fb5     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
11fb9     D1 D3 D8 DE 
11fbd     EC F9 05 1C 
11fc1     2B 2D 33 34 
11fc5     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
11fc9     03 FB EE E4 
11fcd     E0 CF C8 C2 
11fd1     BC BE C9 DB 
11fd5     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
11fd9     24 16 16 14 
11fdd     1F 27 25 1B 
11fe1     15 0F 0A 0D 
11fe5     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
11fe9     FC FE F6 F1 
11fed     E8 E4 DB D7 
11ff1     DB DC E6 EE 
11ff5     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
11ff9     1F 2C 2F 30 
11ffd     2D 2D 2E 26 
12001     24 1F 0C 03 
12005     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
12009     08 0C 13 14 
1200d     1E 1F 15 17 
12011     0F 15 14 16 
12015     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
12019     21 1A 1A 12 
1201d     0D 04 FE F4 
12021     EB E5 E0 DF 
12025     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
12029     BF BD C2 D2 
1202d     D5 DC DD EA 
12031     FE 0C 09 0A 
12035     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
12039     F3 F8 F9 04 
1203d     11 24 39 4A 
12041     51 50 44 23 
12045     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
12049     D5 CE CE CC 
1204d     CE DA E0 E7 
12051     E5 DE D7 D6 
12055     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
12059     DB E2 F3 05 
1205d     07 10 18 17 
12061     22 26 28 33 
12065     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
12069     13 0F 09 00 
1206d     F3 EA E7 E9 
12071     EA F5 09 15 
12075     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
12079     37 30 27 1F 
1207d     19 17 14 16 
12081     16 11 FE FA 
12085     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
12089     E4 DA D6 D4 
1208d     DE E6 EE F9 
12091     F9 FE 07 16 
12095     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
12099     2D 32 2C 22 
1209d     1E 0F 05 00 
120a1     F2 E8 E4 DB 
120a5     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
120a9     DA E3 F6 FD 
120ad     EF EE EE FE 
120b1     FA FD FE 00 
120b5     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
120b9     1A 18 25 20 
120bd     1B 1B 13 0E 
120c1     00 EF DD D1 
120c5     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
120c9     C8 CD D8 E3 
120cd     FB FE 0C 01 
120d1     F3 EC E8 E9 
120d5     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
120d9     F3 07 0B 19 
120dd     2B 33 3D 48 
120e1     4B 3D 35 21 
120e5     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
120e9     00 00 02 01 
120ed     00 FE 06 06 
120f1     05 03 03 FC 
120f5     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
120f9     06 05 03 01 
120fd     02 07 0E 0D 
12101     05 03 03 0B 
12105     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
12109     FC FA F7 F9 
1210d     09 0C 0B 0D 
12111     0D 15 24 38 
12115     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
12119     2B 24 18 15 
1211d     0F 09 04 03 
12121     03 00 F8 F1 
12125     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
12129     AE A5 A1 9B 
1212d     9F BA C1 D1 
12131     E4 F6 FF 08 
12135     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
12139     38 37 35 25 
1213d     23 15 11 F9 
12141     E3 DE D4 D8 
12145     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
12149     ED FC 09 10 
1214d     14 04 FF EA 
12151     E7 E5 ED EE 
12155     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
12159     19 1C 22 24 
1215d     21 1F 15 0F 
12161     0F 05 05 F9 
12165     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
12169     F8 F9 FA F9 
1216d     03 08 0F 14 
12171     13 14 12 12 
12175     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
12179     27 1F 19 17 
1217d     17 14 13 08 
12181     FD FA F4 F3 
12185     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
12189     05 0F 1F 29 
1218d     27 28 1E 16 
12191     12 10 0F 08 
12195     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
12199     FB FE 04 06 
1219d     07 0C 0A 14 
121a1     12 07 FC E4 
121a5     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
121a9     AD A2 A7 B7 
121ad     C5 D8 F3 03 
121b1     09 17 1B 25 
121b5     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
121b9     30 2C 23 1F 
121bd     1A 10 0A F6 
121c1     EE EB E2 E3 
121c5     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
121c9     D7 E2 EB EA 
121cd     E5 D5 D1 CB 
121d1     DB DE EF F4 
121d5     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
121d9     24 23 24 23 
121dd     18 17 0D 0F 
121e1     0D 0F 0F 0A 
121e5     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
121e9     05 06 03 05 
121ed     07 0A 0D 14 
121f1     14 1E 24 2E 
121f5     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
121f9     19 0B FF FA 
121fd     F1 E6 DB D7 
12201     D2 D3 DD E8 
12205     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
12209     1F 2D 2F 2E 
1220d     22 19 10 07 
12211     01 00 00 FE 
12215     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
12219     27 2B 31 2E 
1221d     23 2A 2A 1E 
12221     0F F1 D9 BC 
12225     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
12229     BE C2 CC CC 
1222d     DE EC F1 FB 
12231     FA FF 00 08 
12235     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
12239     0A 0B 09 07 
1223d     00 FC FA F0 
12241     EC EE E7 E9 
12245     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
12249     EF F6 F3 EB 
1224d     E4 DE E0 EB 
12251     EF FD 0E 19 
12255     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
12259     30 33 31 2E 
1225d     2E 30 31 34 
12261     2A 18 0B F2 
12265     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
12269     DB DC E7 ED 
1226d     F7 06 18 21 
12271     30 39 41 45 
12275     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
12279     E8 DE D1 D4 
1227d     D4 D4 D3 CE 
12281     DF F5 0B 1B 
12285     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
12289     3A 39 31 22 
1228d     15 0C FE 00 
12291     F9 FF 04 0D 
12295     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
12299     21 21 20 20 
1229d     1F 1C 11 FD 
122a1     E3 C5 B5 B4 
122a5     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
122a9     D8 CC CE D0 
122ad     DD E8 E8 ED 
122b1     ED F8 FE 07 
122b5     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
122b9     1F 14 0C 04 
122bd     FF FE F4 F0 
122c1     F0 F2 F3 F8 
122c5     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
122c9     13 10 F9 E1 
122cd     D0 BF BE CB 
122d1     DB EE FE F7 
122d5     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
122d9     35 38 39 36 
122dd     3B 3A 37 2F 
122e1     17 FD EC DB 
122e5     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
122e9     CA D6 ED 03 
122ed     1C 32 48 4E 
122f1     5C 5E 60 50 
122f5     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
122f9     D3 D3 D8 E9 
122fd     EE EE ED F4 
12301     FF 0C 11 10 
12305     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
12309     28 28 23 19 
1230d     18 13 09 0B 
12311     06 07 07 06 
12315     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
12319     0D 0F 12 13 
1231d     09 01 ED D6 
12321     C6 C2 C2 CC 
12325     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
12329     E0 DA D9 DC 
1232d     E6 E4 EB EA 
12331     F2 00 11 14 
12335     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
12339     F4 E2 E0 DB 
1233d     DC E1 EC F9 
12341     06 12 28 2F 
12345     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
12349     0A E5 CC AF 
1234d     A6 AC BC D3 
12351     E9 EF E5 E9 
12355     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
12359     37 41 44 46 
1235d     52 4E 42 32 
12361     1C 0B F1 E5 
12365     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
12369     DE F4 05 17 
1236d     1F 2A 37 37 
12371     37 37 2C 17 
12375     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
12379     F9 01 0E 15 
1237d     07 F8 F6 F7 
12381     F6 F9 00 FD 
12385     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
12389     FE FD FE 01 
1238d     02 07 0E 0F 
12391     1A 22 1F 20 
12395     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
12399     27 1F 19 10 
1239d     02 F4 E2 D0 
123a1     CD C6 CA D4 
123a5     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
123a9     DA E7 EF FE 
123ad     0A 0E 0F 12 
123b1     10 0D 0B 01 
123b5     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
123b9     C9 CB CA CB 
123bd     C9 D0 DF ED 
123c1     08 1C 2B 3B 
123c5     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
123c9     F8 DC CA C3 
123cd     C5 CD DE E8 
123d1     EB E8 EA F7 
123d5     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
123d9     20 21 24 29 
123dd     29 2E 30 2E 
123e1     30 2E 2D 1D 
123e5     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
123e9     FB FD 03 0C 
123ed     11 18 1D 17 
123f1     16 FB E5 D5 
123f5     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
123f9     F6 10 24 24 
123fd     24 21 1F 26 
12401     27 27 24 18 
12405     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
12409     E7 ED F1 F2 
1240d     F2 F5 F7 FA 
12411     FB 05 0D 21 
12415     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
12419     53 4B 3B 28 
1241d     08 F6 DD CC 
12421     CA C9 CC DC 
12425     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
12429     BE C6 CC D6 
1242d     DE E6 EB F9 
12431     02 06 03 03 
12435     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
12439     F4 E3 DA DB 
1243d     D9 E6 F4 07 
12441     18 24 29 27 
12445     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
12449     EA E7 ED F4 
1244d     03 14 1D 18 
12451     0E 08 02 05 
12455     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
12459     0A 0A 0A 02 
1245d     FC FB F6 F7 
12461     F7 F9 FE 07 
12465     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
12469     1C 27 28 32 
1246d     2D 22 13 FD 
12471     E8 DE D0 CD 
12475     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
12479     0D 15 13 16 
1247d     18 22 30 47 
12481     4E 56 51 3D 
12485     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
12489     EE E4 E5 E3 
1248d     E4 E9 ED EE 
12491     F3 F0 F7 F9 
12495     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
12499     01 0B 0F 14 
1249d     12 0A 09 09 
124a1     14 14 19 11 
124a5     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
124a9     C4 CB DA DC 
124ad     DB E0 E0 DD 
124b1     DF EB EF 00 
124b5     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
124b9     24 19 18 17 
124bd     14 13 16 16 
124c1     16 14 04 00 
124c5     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
124c9     BC B9 BA BD 
124cd     CE E1 E5 EF 
124d1     03 06 0B 14 
124d5     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
124d9     23 1E 09 FE 
124dd     FA F4 F5 FC 
124e1     03 0C 19 1D 
124e5     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
124e9     37 3F 3D 33 
124ed     2B 1D 0A FE 
124f1     F5 F6 F7 F7 
124f5     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
124f9     13 0E 05 FD 
124fd     F9 FD FE 06 
12501     05 02 FA FA 
12505     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
12509     E8 E8 E9 FD 
1250d     05 0A 0B 0B 
12511     0B 06 00 F9 
12515     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
12519     F7 FE 09 16 
1251d     1F 2D 34 3D 
12521     43 41 2D 15 
12525     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
12529     E8 EA EF E7 
1252d     E6 DB CD C8 
12531     BD B9 BC BA 
12535     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
12539     FF 0C 1E 26 
1253d     24 19 1A 12 
12541     12 08 07 FD 
12545     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
12549     DE DC DB E2 
1254d     E9 E5 F0 F9 
12551     06 1A 2B 39 
12555     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
12559     26 18 07 05 
1255d     05 06 10 18 
12561     26 2B 31 31 
12565     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
12569     EA D2 C3 C0 
1256d     BF BE CE E5 
12571     F7 00 06 07 
12575     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
12579     1B 1A 15 0E 
1257d     12 14 1C 1C 
12581     12 0E 05 00 
12585     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
12589     03 0F 15 1C 
1258d     22 20 21 1F 
12591     1C 15 07 04 
12595     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
12599     00 06 05 07 
1259d     06 01 00 F9 
125a1     F4 E6 E2 DB 
125a5     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
125a9     DF E0 EA E3 
125ad     E4 DA D6 D6 
125b1     D4 CD D0 D8 
125b5     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
125b9     25 2C 37 3B 
125bd     3A 37 30 1B 
125c1     12 FF F9 F6 
125c5     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
125c9     FB FE 01 FE 
125cd     FD FA FA F5 
125d1     F1 F3 F2 F3 
125d5     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
125d9     EA F2 FC FB 
125dd     FE 08 10 1E 
125e1     2C 36 3A 40 
125e5     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
125e9     EF DC D4 D1 
125ed     D7 E8 FB 12 
125f1     21 31 3D 49 
125f5     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
125f9     18 13 14 17 
125fd     2B 33 31 31 
12601     27 1E 10 02 
12605     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
12609     C2 C6 C7 D1 
1260d     DA EC F4 01 
12611     F6 EB E7 E0 
12615     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
12619     14 1E 2B 32 
1261d     30 30 23 0A 
12621     FB F8 EF EE 
12625     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
12629     0B 0A 05 F4 
1262d     E6 DA D7 D7 
12631     D9 E9 F5 0B 
12635     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
12639     36 2B 1C 09 
1263d     F9 DD C4 BD 
12641     B8 BA CE DB 
12645     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
12649     EE E4 E0 E6 
1264d     EF F8 01 07 
12651     15 1F 25 24 
12655     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
12659     09 0E 15 24 
1265d     2B 3A 3F 3F 
12661     3E 2E 25 1F 
12665     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
12669     F1 EC F0 F8 
1266d     04 12 14 16 
12671     14 13 10 FA 
12675     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
12679     EA F2 F8 06 
1267d     0A 0B 0B 06 
12681     02 02 00 00 
12685     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
12689     07 06 05 06 
1268d     09 0A 0A 0B 
12691     0A 09 04 FE 
12695     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
12699     1B 28 37 3A 
1269d     3F 2F 21 18 
126a1     10 03 F9 E6 
126a5     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
126a9     D2 C3 BA B4 
126ad     AE B1 B6 B8 
126b1     C4 D6 E8 F6 
126b5     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
126b9     1C 22 23 1E 
126bd     12 FE ED E9 
126c1     EA F5 03 08 
126c5     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
126c9     FF FC FA FA 
126cd     FA F9 00 10 
126d1     21 31 30 31 
126d5     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
126d9     19 18 16 13 
126dd     10 0D 03 F6 
126e1     F1 E2 DE D8 
126e5     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
126e9     C8 CF E0 F4 
126ed     05 1C 2C 3A 
126f1     43 3F 2F 22 
126f5     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
126f9     16 1E 27 28 
126fd     25 1E 10 04 
12701     FF FA F9 FB 
12705     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
12709     1D 1B 1A 17 
1270d     0D 00 F8 F9 
12711     EF E1 D4 D2 
12715     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
12719     FF FD FE F3 
1271d     EB E2 DA DD 
12721     DB DD E7 ED 
12725     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
12729     08 FD F0 EB 
1272d     EA F2 F8 01 
12731     0C 11 18 14 
12735     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
12739     11 10 10 0D 
1273d     00 00 00 07 
12741     0E 14 13 0E 
12745     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
12749     D9 DB D6 D6 
1274d     D6 D6 DE EC 
12751     F1 F7 F5 F5 
12755     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
12759     2C 37 41 3F 
1275d     3E 2E 1B 0B 
12761     00 FC FE FE 
12765     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
12769     F6 FB 04 12 
1276d     20 2C 38 30 
12771     2E 2D 2D 32 
12775     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
12779     12 10 08 01 
1277d     FA E9 E2 D5 
12781     D7 D8 D3 CD 
12785     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
12789     DF DD E5 EB 
1278d     01 11 1F 27 
12791     23 19 1A 18 
12795     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
12799     2E 13 02 F4 
1279d     EA E7 E2 E3 
127a1     E0 E3 F4 05 
127a5     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
127a9     08 00 01 00 
127ad     F9 FA FA F9 
127b1     FA F9 F1 E8 
127b5     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
127b9     CB C1 BD BC 
127bd     BD C2 D1 E8 
127c1     03 12 1E 1A 
127c5     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
127c9     1A 18 17 14 
127cd     16 22 23 20 
127d1     1B 11 09 0A 
127d5     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
127d9     33 32 31 2C 
127dd     1D 10 09 01 
127e1     FE 01 01 F9 
127e5     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
127e9     F0 F7 FC 03 
127ed     F8 E4 DB DC 
127f1     DC E7 F0 F8 
127f5     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
127f9     30 33 34 2A 
127fd     1C 10 0E 10 
12801     10 0F 05 05 
12805     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
12809     E4 E6 F3 03 
1280d     17 1E 21 20 
12811     28 25 28 38 
12815     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
12819     F0 E0 D3 D3 
1281d     D3 CE CA C6 
12821     C0 C6 C6 D1 
12825     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
12829     CC E0 F6 10 
1282d     1F 32 36 35 
12831     30 25 1D 0F 
12835     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
12839     EA DF D7 D3 
1283d     DA F2 01 12 
12841     14 0E 08 06 
12845     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
12849     26 21 16 22 
1284d     1B 1B 1A 10 
12851     08 02 FE 00 
12855     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
12859     D4 CA C4 C2 
1285d     BB BF D1 EE 
12861     08 1D 2E 3F 
12865     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
12869     3A 45 37 27 
1286d     11 01 F8 FA 
12871     FB 07 0B 09 
12875     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
12879     26 24 19 18 
1287d     13 16 17 17 
12881     12 09 FC F0 
12885     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
12889     D9 DE D8 D6 
1288d     D3 D4 D6 D9 
12891     E3 F0 02 12 
12895     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
12899     0B 0B 0D 0D 
1289d     0B 0A 07 07 
128a1     07 09 07 F7 
128a5     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
128a9     FB 09 1B 26 
128ad     21 1F 1C 1B 
128b1     18 0E 00 FE 
128b5     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
128b9     DB DB DD E7 
128bd     EF FC EC D0 
128c1     C1 B6 AD B1 
128c5     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
128c9     F9 0E 25 3F 
128cd     57 5D 5B 58 
128d1     50 46 46 3C 
128d5     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
128d9     DB CB C9 CC 
128dd     D9 F2 03 13 
128e1     24 30 33 31 
128e5     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
128e9     32 24 12 06 
128ed     FD FA FE 04 
128f1     00 F8 EF E0 
128f5     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
128f9     CC CB CB D6 
128fd     E4 F1 03 0E 
12901     1B 1A 1B 1B 
12905     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
12909     1E 17 1A 15 
1290d     09 FE F9 F9 
12911     00 0E 0B 06 
12915     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
12919     F6 00 04 0A 
1291d     09 04 03 06 
12921     0E 0D 05 FE 
12925     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
12929     F4 E3 D9 CE 
1292d     C3 C0 C2 BF 
12931     C2 CD CE DF 
12935     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
12939     26 2B 34 35 
1293d     2B 17 05 F7 
12941     E1 D6 D6 D8 
12945     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
12949     19 2F 3F 4A 
1294d     51 4C 45 3E 
12951     38 2E 21 18 
12955     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
12959     D3 D6 D9 E3 
1295d     E7 DB DF E0 
12961     E3 E5 E6 EB 
12965     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
12969     0E 15 1E 2C 
1296d     3A 44 43 44 
12971     3D 2A 19 11 
12975     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
12979     E2 E4 E9 F3 
1297d     02 0C 11 0F 
12981     08 07 0A 0B 
12985     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
12989     0F 14 12 12 
1298d     12 0F 0F 0A 
12991     FB E5 C5 AC 
12995     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
12999     AE C2 D4 DF 
1299d     EB FF 17 30 
129a1     41 48 46 44 
129a5     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
129a9     20 09 F9 E1 
129ad     D2 C7 C5 CB 
129b1     D1 D7 E8 F2 
129b5     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
129b9     26 25 19 0C 
129bd     00 EF E7 E2 
129c1     E3 EB FA 06 
129c5     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
129c9     F6 F6 F7 FC 
129cd     FA F7 F7 F7 
129d1     FC FE FE 00 
129d5     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
129d9     22 2F 32 2C 
129dd     2D 26 24 1C 
129e1     15 04 00 FC 
129e5     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
129e9     0A 15 22 29 
129ed     2D 32 32 22 
129f1     10 04 06 06 
129f5     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
129f9     06 05 00 F5 
129fd     DC C3 AF A5 
12a01     A1 AA BB CD 
12a05     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
12a09     20 31 41 49 
12a0d     4F 4E 3A 2D 
12a11     1B 01 EC DC 
12a15     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
12a19     DB E1 E7 F5 
12a1d     03 17 29 3A 
12a21     3C 3A 39 37 
12a25     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
12a29     FE F5 F0 E1 
12a2d     E6 E9 E4 DB 
12a31     D2 C4 BD BE 
12a35     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
12a39     C5 CD D8 DD 
12a3d     DF E7 FA 0A 
12a41     22 39 4A 53 
12a45     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
12a49     3A 33 2A 18 
12a4d     05 FC F1 F2 
12a51     F0 EB EC EE 
12a55     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
12a59     1E 1C 1B 1A 
12a5d     1B 22 23 24 
12a61     24 23 0E 05 
12a65     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
12a69     CC C9 C7 CF 
12a6d     DB E0 E7 E9 
12a71     F9 06 1C 32 
12a75     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
12a79     3D 39 2E 17 
12a7d     05 F5 E9 E2 
12a81     DE E5 E5 E4 
12a85     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
12a89     19 1E 29 28 
12a8d     14 0C FF F3 
12a91     E5 D9 D2 D4 
12a95     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
12a99     0C 0D 0A FF 
12a9d     00 FD F3 EB 
12aa1     E3 D5 D7 DC 
12aa5     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
12aa9     03 05 0F 15 
12aad     1B 15 11 08 
12ab1     02 03 02 01 
12ab5     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
12ab9     DB DC DB DB 
12abd     E0 E7 FA 0F 
12ac1     21 39 37 36 
12ac5     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
12ac9     3A 33 2C 1D 
12acd     0A 06 FF EF 
12ad1     DC C5 BB B7 
12ad5     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
12ad9     E3 F5 05 18 
12add     29 3B 47 4C 
12ae1     3F 32 2B 23 
12ae5     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
12ae9     EE F2 F7 FB 
12aed     FB F9 F4 FA 
12af1     0A 1E 2A 2D 
12af5     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
12af9     15 0D 00 FE 
12afd     F5 F6 F6 00 
12b01     00 01 FE 01 
12b05     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
12b09     E0 D7 C3 B1 
12b0d     AF B2 BF CC 
12b11     D1 DF EB 02 
12b15     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
12b19     3F 3D 3E 3D 
12b1d     3D 38 29 1D 
12b21     0A FA F3 F0 
12b25     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
12b29     EE F6 F6 F3 
12b2d     F2 F0 EB F1 
12b31     F8 01 09 0F 
12b35     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
12b39     EB E5 D6 CC 
12b3d     C4 C0 CC D9 
12b41     DD ED F7 02 
12b45     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
12b49     46 3E 34 27 
12b4d     1E 14 0C FF 
12b51     FA F1 F3 F5 
12b55     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
12b59     05 07 0F 1D 
12b5d     27 2D 2D 19 
12b61     15 07 0A 07 
12b65     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
12b69     F6 00 03 05 
12b6d     06 09 0A 11 
12b71     12 12 07 F2 
12b75     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
12b79     E4 F1 00 0C 
12b7d     1A 1D 24 25 
12b81     20 1F 0F 03 
12b85     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
12b89     F6 EA E4 DE 
12b8d     DC D7 D8 D6 
12b91     D3 D6 E1 F6 
12b95     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
12b99     2A 37 44 47 
12b9d     44 3D 2A 10 
12ba1     02 FC FE 00 
12ba5     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
12ba9     C4 B2 AB A7 
12bad     A9 BB CE E9 
12bb1     07 19 1E 16 
12bb5     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
12bb9     01 F5 EB E7 
12bbd     EA FA 0D 1E 
12bc1     2A 2D 2A 2D 
12bc5     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
12bc9     15 03 FD F8 
12bcd     FA FA 02 03 
12bd1     08 0F 15 13 
12bd5     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
12bd9     07 06 06 09 
12bdd     06 EF DF CF 
12be1     CE D5 DE EC 
12be5     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
12be9     07 0C 16 1E 
12bed     1F 1F 21 26 
12bf1     25 23 19 11 
12bf5     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
12bf9     13 16 1B 18 
12bfd     17 12 03 FE 
12c01     F4 E6 E2 DB 
12c05     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
12c09     E9 E6 E4 E5 
12c0d     E8 E8 E0 D4 
12c11     D4 D6 D8 E3 
12c15     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
12c19     2B 3D 50 57 
12c1d     4E 3A 24 13 
12c21     0F 0A 0D 0B 
12c25     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
12c29     E3 DC DF DC 
12c2d     DD E7 EF FD 
12c31     00 FE F4 EB 
12c35     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
12c39     E3 D9 DC EC 
12c3d     FA 0B 1C 25 
12c41     29 2F 2D 23 
12c45     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
12c49     E8 DD DA DD 
12c4d     EF 02 13 24 
12c51     2F 33 27 1F 
12c55     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
12c59     01 06 0A 07 
12c5d     FD FD FE 08 
12c61     0E 1A 16 0C 
12c65     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
12c69     F6 F9 00 06 
12c6d     05 07 0F 19 
12c71     1D 1C 17 16 
12c75     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
12c79     1B 16 16 09 
12c7d     FC 00 00 E0 
12c81     F6 F5 04 0D 
12c85     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
12c89     0E 0F 12 17 
12c8d     17 0C FD F0 
12c91     EC EE F8 08 
12c95     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
12c99     0A 07 06 01 
12c9d     01 FF FF F8 
12ca1     F7 F2 E3 D9 
12ca5     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
12ca9     AB AC B8 C6 
12cad     DA ED FD 05 
12cb1     12 1C 2B 39 
12cb5     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
12cb9     35 16 F7 EE 
12cbd     E9 EA E9 DF 
12cc1     D1 CE CE CE 
12cc5     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
12cc9     0E 1F 20 29 
12ccd     2D 27 1B 16 
12cd1     0D 09 FF F9 
12cd5     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
12cd9     DF E3 E4 EE 
12cdd     F7 04 12 20 
12ce1     2A 2E 2A 2D 
12ce5     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
12ce9     3F 38 1A 06 
12ced     F1 E0 D7 DB 
12cf1     CE D3 DA DC 
12cf5     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
12cf9     E7 E2 D9 DD 
12cfd     D1 CD CE CB 
12d01     D0 D7 DE ED 
12d05     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
12d09     06 0E 06 05 
12d0d     05 0A 0E 15 
12d11     24 2E 33 38 
12d15     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
12d19     2C 2A 22 21 
12d1d     10 03 F9 EA 
12d21     E7 E2 C4 B9 
12d25     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
12d29     AF B1 BB C9 
12d2d     D6 EA E4 EF 
12d31     EE FE 01 11 
12d35     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
12d39     1C 12 0D 04 
12d3d     F7 E9 D5 D3 
12d41     C2 CC D3 DD 
12d45     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
12d49     41 5D 69 6E 
12d4d     62 4A 3A 1F 
12d51     07 F9 E8 DF 
12d55     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
12d59     E4 EB ED F2 
12d5d     F6 FA 01 08 
12d61     07 07 0C 10 
12d65     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
12d69     15 0C FF F5 
12d6d     F2 DA CF D3 
12d71     C9 D1 E5 F6 
12d75     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
12d79     07 05 07 0C 
12d7d     10 0F 0E FE 
12d81     F9 F2 E1 DE 
12d85     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
12d89     E7 F2 00 08 
12d8d     1B 2B 2D 32 
12d91     38 36 1F 0C 
12d95     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
12d99     D5 DC E2 F0 
12d9d     F4 FF 09 06 
12da1     F2 D7 C7 B5 
12da5     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
12da9     E0 E7 FB 12 
12dad     19 31 32 34 
12db1     2C 26 18 11 
12db5     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
12db9     03 FE FF FE 
12dbd     F6 EF DC D4 
12dc1     CF C5 CC DB 
12dc5     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
12dc9     20 2D 2F 21 
12dcd     21 16 1A 1A 
12dd1     17 14 0C F6 
12dd5     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
12dd9     E3 E4 EF EE 
12ddd     FB 08 15 2E 
12de1     48 58 63 60 
12de5     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
12de9     FB E7 E1 C5 
12ded     C5 C3 CB DB 
12df1     EE FA 0B 12 
12df5     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
12df9     BB B9 B9 BC 
12dfd     BF C7 D1 DE 
12e01     E8 F5 FF 03 
12e05     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
12e09     E0 F0 04 1E 
12e0d     36 4E 67 6D 
12e11     75 6E 64 4C 
12e15     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
12e19     D0 CD C8 D1 
12e1d     DF E4 E9 D6 
12e21     D1 CA CA CA 
12e25     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
12e29     E3 DC E8 ED 
12e2d     EE F3 F0 E3 
12e31     E4 E4 EB F2 
12e35     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
12e39     09 FE F8 E9 
12e3d     DC D2 CD CB 
12e41     D5 DA F8 0E 
12e45     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
12e49     6C 52 43 28 
12e4d     19 12 0D 0D 
12e51     01 FD FE F9 
12e55     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
12e59     E3 D4 C8 B5 
12e5d     B6 C5 D8 EF 
12e61     06 17 23 31 
12e65     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
12e69     1D 01 EE D7 
12e6d     D2 D3 D6 E8 
12e71     03 17 1E 1D 
12e75     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
12e79     FE F9 F4 EA 
12e7d     E4 DE DC D7 
12e81     D8 DB D6 CA 
12e85     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
12e89     F7 11 20 37 
12e8d     37 39 3E 38 
12e91     31 1C 09 ED 
12e95     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
12e99     C4 D6 DF F4 
12e9d     F7 EC DE D4 
12ea1     CC CB D0 DB 
12ea5     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
12ea9     32 36 3B 3A 
12ead     30 1B 0A F4 
12eb1     EE E1 DF EC 
12eb5     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
12eb9     EF FB FA F2 
12ebd     E8 DA C1 A7 
12ec1     A3 A4 B4 C7 
12ec5     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
12ec9     1D 1D 25 2B 
12ecd     31 3B 37 37 
12ed1     30 27 1A 07 
12ed5     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
12ed9     E0 DE DD E8 
12edd     F5 11 1F 2A 
12ee1     33 32 32 35 
12ee5     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
12ee9     EA D9 D6 D6 
12eed     E6 F3 00 13 
12ef1     0E FD DC CF 
12ef5     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
12ef9     B1 C1 C8 DC 
12efd     E5 EB FA FC 
12f01     F9 EF DD D1 
12f05     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
12f09     07 2B 3E 54 
12f0d     60 6C 78 75 
12f11     65 4F 20 FD 
12f15     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
12f19     C2 CC D0 D2 
12f1d     CF CF D0 D2 
12f21     D7 DD DB D6 
12f25     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
12f29     E9 EA E8 E9 
12f2d     E9 E4 E8 E0 
12f31     E7 EE F3 02 
12f35     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
12f39     F5 FC FD FD 
12f3d     EB E4 DB D7 
12f41     E3 F0 02 14 
12f45     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
12f49     26 25 1B 1D 
12f4d     1D 27 25 2A 
12f51     29 24 15 0B 
12f55     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
12f59     AB A7 AB BD 
12f5d     CC E2 F8 04 
12f61     0D 1D 2A 38 
12f65     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
12f69     F8 E9 EA EA 
12f6d     FA 06 10 0F 
12f71     04 FF F5 F0 
12f75     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
12f79     FF 01 00 FD 
12f7d     E8 DD D6 C9 
12f81     C4 C3 C3 C6 
12f85     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
12f89     F9 01 01 08 
12f8d     12 1C 21 1D 
12f91     04 ED D6 C9 
12f95     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
12f99     ED F1 ED ED 
12f9d     EC EA EF F1 
12fa1     FC 07 0F 18 
12fa5     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
12fa9     1A 1A 10 0F 
12fad     08 F2 E6 CF 
12fb1     D6 D3 D2 DD 
12fb5     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
12fb9     01 F5 E1 C6 
12fbd     B8 A8 A7 AB 
12fc1     B7 C6 DA ED 
12fc5     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
12fc9     1E 30 41 4D 
12fcd     51 56 4F 3F 
12fd1     28 18 06 EC 
12fd5     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
12fd9     DD E6 FE 0F 
12fdd     20 32 39 31 
12fe1     28 28 20 23 
12fe5     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
12fe9     E8 E9 F3 EC 
12fed     E5 D5 C2 B6 
12ff1     B1 AB AF B2 
12ff5     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
12ff9     FC 00 FD FE 
12ffd     FD FB F4 F2 
13001     E8 E3 E5 E8 
13005     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
13009     1D 2A 34 42 
1300d     58 5A 53 3D 
13011     1D 03 DE C5 
13015     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
13019     B9 BE C8 D7 
1301d     E1 DA DC E1 
13021     EB F1 F7 F3 
13025     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
13029     E5 EA EC E4 
1302d     DB DB E0 E1 
13031     E9 EE F0 F2 
13035     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
13039     05 F9 EB E2 
1303d     E3 E1 F5 05 
13041     18 28 21 26 
13045     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
13049     1D 26 35 3C 
1304d     44 3D 2A 09 
13051     EC D3 C5 B2 
13055     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
13059     B9 C6 DC F3 
1305d     03 0C 1B 27 
13061     3E 4B 50 40 
13065     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
13069     FE F9 F7 EB 
1306d     D7 CB CF D2 
13071     E3 EC FF 0F 
13075     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
13079     F9 E8 D1 CC 
1307d     C8 CC CE D8 
13081     D4 CA CC CC 
13085     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
13089     F5 02 10 1D 
1308d     21 1B 10 00 
13091     EF E6 DE E3 
13095     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
13099     D8 DB E2 E7 
1309d     EE FC 08 16 
130a1     28 30 2D 2C 
130a5     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
130a9     1A FD E2 CF 
130ad     BF B8 BC BF 
130b1     C7 D1 DA D3 
130b5     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
130b9     C8 C7 B7 B9 
130bd     BA C7 DB E9 
130c1     EB F9 02 16 
130c5     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
130c9     64 66 66 5A 
130cd     41 21 08 F4 
130d1     E5 E2 E0 EA 
130d5     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
130d9     0E 1A 12 12 
130dd     08 0A 0D 18 
130e1     1C 11 16 0B 
130e5     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
130e9     CB C6 A9 A8 
130ed     A1 A5 AF BD 
130f1     D4 E4 FB 0B 
130f5     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
130f9     12 FD FC EE 
130fd     F2 F0 DE E0 
13101     D6 DB E6 EF 
13105     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
13109     49 56 5A 4F 
1310d     3B 1C 03 E5 
13111     CE C7 C2 C1 
13115     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
13119     B6 B9 C4 CD 
1311d     DB ED FD 00 
13121     FF F4 F5 ED 
13125     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
13129     F5 F5 EB E7 
1312d     E9 E8 E9 E9 
13131     E2 E3 E4 F4 
13135     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
13139     FD FD FF 09 
1313d     0F 0F 04 FF 
13141     FF 01 08 11 
13145     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
13149     4C 40 27 0E 
1314d     F9 E0 CD C8 
13151     C9 C6 C5 C5 
13155     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
13159     F7 09 15 28 
1315d     34 46 42 44 
13161     33 25 17 FC 
13165     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
13169     BF BD C8 D7 
1316d     E9 FE 0A 16 
13171     1B 22 21 1F 
13175     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
13179     D9 DD D6 C8 
1317d     C6 BC B3 AB 
13181     B3 B4 C6 D5 
13185     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
13189     19 27 2A 29 
1318d     1F 1A 10 07 
13191     FA EB D4 C5 
13195     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
13199     E9 F9 0A 21 
1319d     36 42 3F 42 
131a1     35 2A 17 0B 
131a5     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
131a9     BE BB B0 B7 
131ad     B5 B4 B6 B6 
131b1     B6 C3 CB DA 
131b5     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
131b9     DC E6 E6 E8 
131bd     ED F4 05 1B 
131c1     2B 3B 3E 4A 
131c5     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
131c9     31 2A 1C 10 
131cd     07 02 06 09 
131d1     11 13 0E FF 
131d5     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
131d9     00 04 03 0D 
131dd     0D 15 0E 05 
131e1     FB EB D8 C5 
131e5     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
131e9     9A A6 BA CF 
131ed     DC F7 06 1B 
131f1     2D 38 36 36 
131f5     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
131f9     E7 E2 E5 E4 
131fd     E5 E6 E6 EE 
13201     FD 0F 21 2D 
13205     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
13209     1F 15 0D FD 
1320d     F0 E2 DE C0 
13211     B0 A4 A2 A4 
13215     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
13219     E8 F4 02 0B 
1321d     0E 0E 0F 0D 
13221     0F 0D 08 07 
13225     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
13229     C5 BC B9 BF 
1322d     CE D5 E2 E7 
13231     EE FD 0A 14 
13235     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
13239     0A F8 F5 F7 
1323d     01 07 17 21 
13241     2F 2A 2A 27 
13245     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
13249     F4 EF E8 DE 
1324d     E0 E0 EB E8 
13251     E9 E6 E6 F0 
13255     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
13259     35 27 1F 16 
1325d     17 17 12 0E 
13261     FD EF E2 CF 
13265     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
13269     F0 F4 03 07 
1326d     11 12 14 12 
13271     13 09 05 ED 
13275     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
13279     BC B9 BA B9 
1327d     B6 B9 CA D6 
13281     F3 FC 09 0E 
13285     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
13289     42 34 1F 03 
1328d     E5 C7 B3 B1 
13291     B4 BF D3 E5 
13295     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
13299     4A 43 42 3D 
1329d     32 2C 1D 0B 
132a1     FB F8 F1 E7 
132a5     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
132a9     91 93 A0 A5 
132ad     B3 B1 B9 C5 
132b1     DC E9 F6 FB 
132b5     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
132b9     F3 04 12 1F 
132bd     29 28 2A 2D 
132c1     32 36 36 31 
132c5     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
132c9     28 29 28 28 
132cd     1D 1C 0C FB 
132d1     E9 DD DF EF 
132d5     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
132d9     F4 EF F2 F5 
132dd     FA F7 E5 D6 
132e1     BD AD A6 A9 
132e5     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
132e9     FD 13 24 39 
132ed     37 35 2A 1A 
132f1     09 FB EF E3 
132f5     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
132f9     F0 ED E8 E9 
132fd     EE 01 00 11 
13301     15 0E 08 0A 
13305     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
13309     1E 01 E6 B9 
1330d     AA 9B 9A 9B 
13311     9E B3 BF D8 
13315     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
13319     10 15 24 2E 
1331d     31 2B 22 19 
13321     02 F8 E4 C9 
13325     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
13329     CD E4 EF EC 
1332d     E7 F3 00 11 
13331     1D 1A 1C 12 
13335     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
13339     F2 06 0F 0D 
1333d     10 13 13 13 
13341     0E 0A 06 05 
13345     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
13349     14 0F 0F 0E 
1334d     0E 0D 01 FD 
13351     F8 FF FE FF 
13355     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
13359     F7 0B 1E 26 
1335d     21 11 FF E7 
13361     DA DF DF E1 
13365     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
13369     16 1C 1A 1C 
1336d     15 FF F7 EF 
13371     E0 DB CC C8 
13375     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
13379     BF BE BE C6 
1337d     CD E8 F5 02 
13381     04 0A 19 2B 
13385     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
13389     FC E7 D7 D6 
1338d     DD DF EA F2 
13391     F8 0D 1B 2D 
13395     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
13399     23 21 21 11 
1339d     0D 08 FE E7 
133a1     D7 C7 B5 A3 
133a5     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
133a9     B7 BD BD C4 
133ad     CE DE F1 03 
133b1     11 13 14 02 
133b5     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
133b9     F5 FA 00 0E 
133bd     1B 2D 31 42 
133c1     3F 41 43 44 
133c5     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
133c9     3E 2E 27 13 
133cd     02 F2 EA E5 
133d1     E5 E8 E8 E0 
133d5     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
133d9     DE EC EF EE 
133dd     EE D7 D0 CB 
133e1     CE D8 E7 F3 
133e5     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
133e9     20 16 0D 04 
133ed     00 00 07 0E 
133f1     0E 15 14 0D 
133f5     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
133f9     DE DB DF E4 
133fd     EA EC E7 E6 
13401     EB F7 0B 12 
13405     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
13409     D1 C8 BC B9 
1340d     BA BD C9 D7 
13411     EA F3 FD 03 
13415     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
13419     2F 23 1E 0B 
1341d     FF F2 E5 DE 
13421     DD D8 D9 DB 
13425     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
13429     F0 EE E7 EE 
1342d     F8 05 0A 11 
13431     17 FB F9 F4 
13435     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
13439     F3 F2 F3 F2 
1343d     F3 F6 FE 0C 
13441     15 29 3E 40 
13445     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
13449     40 31 1F 05 
1344d     F1 D7 CC C4 
13451     CB D4 D8 DD 
13455     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
13459     20 21 21 0A 
1345d     FE F4 F6 F9 
13461     FB FB FE FE 
13465     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
13469     FF F8 F7 F5 
1346d     F5 F0 EC ED 
13471     E5 E8 E8 E8 
13475     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
13479     D4 D6 DE E4 
1347d     E1 E3 DE DF 
13481     E7 F6 03 16 
13485     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
13489     1D 20 1B 12 
1348d     09 FE F9 F0 
13491     F8 F5 F6 00 
13495     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
13499     16 0B 0A FF 
1349d     F7 EA E1 D4 
134a1     C8 BA B5 AF 
134a5     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
134a9     CF D4 DE ED 
134ad     F4 09 0A FF 
134b1     F4 E7 EA ED 
134b5     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
134b9     17 1C 2A 2D 
134bd     3C 43 42 4E 
134c1     4B 50 59 58 
134c5     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
134c9     33 25 12 F3 
134cd     DA C7 BF B9 
134d1     AF AF B0 AB 
134d5     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
134d9     F9 FB F7 F5 
134dd     FF 03 11 18 
134e1     16 11 02 FE 
134e5     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
134e9     04 0D 1A 1E 
134ed     2C 2F 2C 2C 
134f1     1F 11 04 FC 
134f5     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
134f9     C9 C9 C6 CD 
134fd     D3 D2 D3 DE 
13501     ED FF 08 0E 
13505     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
13509     FF 04 05 FB 
1350d     F1 EB E4 DF 
13511     E3 E5 ED F2 
13515     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
13519     00 02 01 08 
1351d     09 0E 18 13 
13521     12 07 FF F4 
13525     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
13529     D9 D8 E3 F3 
1352d     F8 01 F9 E9 
13531     E4 E5 EA F5 
13535     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
13539     F2 F3 FF 12 
1353d     24 35 41 4F 
13541     59 5D 5E 5E 
13545     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
13549     19 11 F8 E6 
1354d     D3 C8 BF C3 
13551     C6 CD DC E8 
13555     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
13559     FE F9 F2 F5 
1355d     00 08 10 14 
13561     0E 08 FA F6 
13565     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
13569     03 0B 0A 0D 
1356d     0F 10 0D 03 
13571     FF FE F4 F0 
13575     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
13579     AF AB B2 BE 
1357d     CD D9 E6 FF 
13581     14 30 32 37 
13585     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
13589     38 29 12 FE 
1358d     E9 DC D2 CD 
13591     CF D9 E7 EB 
13595     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
13599     FB FB F9 FB 
1359d     FD FE FD F8 
135a1     E9 E5 DE DC 
135a5     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
135a9     D4 D4 DF EC 
135ad     EF E9 E8 EA 
135b1     EC F7 00 0B 
135b5     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
135b9     21 31 36 35 
135bd     40 44 49 4F 
135c1     54 5A 58 57 
135c5     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
135c9     12 01 E9 D2 
135cd     C2 B1 AA AC 
135d1     B3 BA CA D1 
135d5     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
135d9     F2 F2 F3 F2 
135dd     F7 00 03 08 
135e1     0E 0E 13 13 
135e5     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
135e9     1B 26 33 30 
135ed     31 20 11 04 
135f1     F8 F4 EA E1 
135f5     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
135f9     A4 A1 AA B4 
135fd     C6 D8 EF 06 
13601     1D 22 25 25 
13605     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
13609     16 0B FE FA 
1360d     E5 DA D1 CD 
13611     CF D7 E3 E7 
13615     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
13619     FF 06 05 10 
1361d     19 1E 1D 0D 
13621     FF EE E6 E0 
13625     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
13629     E2 F0 F2 E2 
1362d     DB D5 D6 D1 
13631     DD E2 F0 04 
13635     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
13639     31 2E 36 34 
1363d     35 3A 3B 40 
13641     47 40 42 3D 
13645     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
13649     15 FC E3 D3 
1364d     BC B7 BC C7 
13651     D7 E3 E1 E4 
13655     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
13659     F3 EB ED EE 
1365d     ED EC ED F8 
13661     05 11 18 1E 
13665     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
13669     25 27 25 15 
1366d     08 FC EF E3 
13671     DE DC D5 CC 
13675     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
13679     C0 CE DC E6 
1367d     F5 FA 0F 20 
13681     1F 29 2D 21 
13685     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
13689     04 08 07 06 
1368d     FF F9 F0 DC 
13691     D4 CC CC D1 
13695     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
13699     06 0C 15 14 
1369d     14 08 F8 E6 
136a1     D5 CD CA CE 
136a5     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
136a9     FA 04 01 FE 
136ad     EE E1 D3 C7 
136b1     C5 D1 E5 00 
136b5     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
136b9     3B 3D 3F 47 
136bd     4C 51 51 53 
136c1     50 3E 28 19 
136c5     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
136c9     FF F3 E8 DA 
136cd     D8 DC E1 E7 
136d1     E8 E3 E6 E8 
136d5     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
136d9     DA D8 DD E7 
136dd     FE 0E 25 2B 
136e1     29 28 1E 15 
136e5     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
136e9     14 0D 08 FC 
136ed     FD F3 F5 F2 
136f1     ED E9 E2 C4 
136f5     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
136f9     B3 D5 EF 09 
136fd     21 3C 40 3F 
13701     35 1E FF E3 
13705     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
13709     F3 04 07 09 
1370d     10 12 10 12 
13711     02 F8 E9 DF 
13715     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
13719     F0 FD 01 0B 
1371d     07 FD F5 E6 
13721     E4 E8 EF F8 
13725     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
13729     ED E5 DF DF 
1372d     D4 D3 D8 DC 
13731     ED 03 12 23 
13735     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
13739     2D 30 37 37 
1373d     3F 41 41 42 
13741     43 3E 34 2B 
13745     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
13749     D7 C5 C1 C8 
1374d     D1 E3 F0 F7 
13751     F6 00 06 05 
13755     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
13759     C2 B7 BF D3 
1375d     EE 0C 21 37 
13761     46 4E 4B 48 
13765     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
13769     F3 EB E1 E3 
1376d     DE DF E1 E6 
13771     E6 E6 E8 DE 
13775     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
13779     DA E9 F5 03 
1377d     14 15 17 0D 
13781     F5 E4 CD CF 
13785     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
13789     1F 1B 11 08 
1378d     00 01 FA F1 
13791     F2 F3 F5 F7 
13795     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
13799     F0 F0 ED F0 
1379d     F1 E9 DF DB 
137a1     E1 EA F8 09 
137a5     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
137a9     0D F9 D8 C1 
137ad     A6 A4 AD C3 
137b1     E3 FC 0A 16 
137b5     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
137b9     52 56 5C 56 
137bd     3D 2C 1B 09 
137c1     FB FE FD 07 
137c5     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
137c9     01 F4 EB EE 
137cd     F3 02 06 0F 
137d1     0D 05 FC F3 
137d5     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
137d9     E0 F2 FE 12 
137dd     13 10 12 0F 
137e1     10 13 18 0C 
137e5     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
137e9     EC EE EE F1 
137ed     F6 FA E7 DD 
137f1     D5 C7 B9 B7 
137f5     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
137f9     23 36 42 33 
137fd     24 09 FB E0 
13801     CD C7 C4 D0 
13805     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
13809     1F 26 3A 3E 
1380d     3D 2B 15 FB 
13811     E5 CF C2 BA 
13815     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
13819     D2 E2 EF FC 
1381d     FF FF 06 07 
13821     05 02 03 08 
13825     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
13829     F9 F1 E8 E8 
1382d     E5 E6 EE F8 
13831     05 0C 1B 22 
13835     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
13839     44 46 46 46 
1383d     3C 2E 1C 04 
13841     F5 E9 DA D7 
13845     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
13849     D5 E1 F0 FE 
1384d     11 1F 30 31 
13851     26 1E FF E9 
13855     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
13859     DB F2 08 21 
1385d     2C 2E 33 34 
13861     2A 21 19 11 
13865     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
13869     EE E2 E0 DF 
1386d     E1 EE F9 FE 
13871     F8 EE E1 DC 
13875     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
13879     FF FA F2 E6 
1387d     E6 D4 CD C9 
13881     D4 E3 FA 0F 
13885     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
13889     13 18 21 1D 
1388d     1C 1B 18 0D 
13891     FF F3 DA C8 
13895     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
13899     E8 FA F9 F9 
1389d     F9 F7 FC 07 
138a1     17 29 2D 29 
138a5     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
138a9     C3 BB B8 BA 
138ad     CA D4 F0 FF 
138b1     0A 1E 30 42 
138b5     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
138b9     49 3B 28 17 
138bd     00 F1 EA E2 
138c1     E5 EF F7 04 
138c5     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
138c9     0D 24 2B 31 
138cd     38 34 1A 04 
138d1     F8 F0 EB ED 
138d5     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
138d9     F7 F7 F0 F0 
138dd     ED EA EA EF 
138e1     F1 F3 F8 FA 
138e5     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
138e9     F7 E9 E2 E1 
138ed     DF E4 E4 E5 
138f1     E5 F0 F6 00 
138f5     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
138f9     06 FA F3 E1 
138fd     E0 E0 DF E0 
13901     EB F1 00 0C 
13905     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
13909     3A 33 1F 0C 
1390d     FA EA D9 C6 
13911     B4 A8 A1 A0 
13915     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
13919     02 14 13 13 
1391d     13 16 1B 1D 
13921     20 1D 09 FC 
13925     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
13929     EA EC EE F9 
1392d     08 0F 1F 2C 
13931     2E 3D 3B 3D 
13935     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
13939     3E 33 1B 01 
1393d     EC CC B9 AF 
13941     B4 B2 B4 C5 
13945     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
13949     1F 3B 51 56 
1394d     3E 24 0F 02 
13951     F9 F1 E8 E9 
13955     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
13959     01 07 03 08 
1395d     0C 10 17 17 
13961     16 1B 18 16 
13965     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
13969     E2 E1 E4 F4 
1396d     F1 F2 F2 E8 
13971     E2 E3 E4 E4 
13975     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
13979     C3 CB CC DE 
1397d     F0 02 03 0A 
13981     11 10 12 14 
13985     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
13989     16 0E 0D 0B 
1398d     01 FC EE E9 
13991     D8 D3 C9 CE 
13995     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
13999     F6 F6 01 0C 
1399d     1A 28 2F 2A 
139a1     11 F8 DF D3 
139a5     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
139a9     C9 DA E7 F9 
139ad     09 1B 32 47 
139b1     47 4D 52 51 
139b5     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
139b9     0E FD E5 D9 
139bd     D5 CF D7 E2 
139c1     EF FD 0A 17 
139c5     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
139c9     48 43 28 16 
139cd     01 F7 FA FB 
139d1     FD FD F8 F1 
139d5     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
139d9     C2 C1 C3 D0 
139dd     DB F0 F9 03 
139e1     16 24 1A 18 
139e5     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
139e9     EC E7 E8 E8 
139ed     E9 EE F0 F8 
139f1     06 12 20 22 
139f5     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
139f9     E9 EC F3 FA 
139fd     F9 FA 01 FF 
13a01     09 0F 18 18 
13a05     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
13a09     EC D8 CD C3 
13a0d     BB BA B9 BA 
13a11     BD C7 DE F5 
13a15     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
13a19     1C 1B 1D 1F 
13a1d     20 16 FE EF 
13a21     E6 E0 EB F9 
13a25     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
13a29     1B 1B 20 24 
13a2d     2A 2A 29 2A 
13a31     2C 2A 2D 2D 
13a35     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
13a39     DB C6 B0 A4 
13a3d     9C A3 B2 C3 
13a41     E3 00 13 23 
13a45     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
13a49     4D 3C 29 19 
13a4d     11 0D 06 FD 
13a51     F8 F1 E8 E9 
13a55     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
13a59     06 07 0F 0F 
13a5d     12 12 10 0F 
13a61     05 FD F4 EB 
13a65     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
13a69     DF E6 E8 E9 
13a6d     DF D6 D1 D2 
13a71     DD DB DD DF 
13a75     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
13a79     10 1A 25 28 
13a7d     22 19 18 17 
13a81     14 09 FE F4 
13a85     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
13a89     08 07 07 FF 
13a8d     F8 EF E0 DB 
13a91     DB DD E2 EB 
13a95     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
13a99     08 0A 11 03 
13a9d     F6 E4 CD BB 
13aa1     BC C2 D1 E3 
13aa5     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
13aa9     21 2D 3F 46 
13aad     4B 4B 48 47 
13ab1     42 38 29 0E 
13ab5     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
13ab9     CF D5 DE EB 
13abd     F5 0A 21 36 
13ac1     3B 34 34 32 
13ac5     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
13ac9     07 FB FD FB 
13acd     00 FF FD EB 
13ad1     D7 C5 B2 B6 
13ad5     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
13ad9     E8 FA 0D 15 
13add     28 24 27 24 
13ae1     1A 0D FF ED 
13ae5     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
13ae9     E4 F0 02 09 
13aed     0F 19 1D 12 
13af1     0D 06 FD EF 
13af5     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
13af9     14 14 04 00 
13afd     FA FE 01 FA 
13b01     F1 E1 CF CB 
13b05     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
13b09     D5 DA E1 E6 
13b0d     EB EA F7 FC 
13b11     02 0C 1E 2A 
13b15     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
13b19     08 F5 EE E9 
13b1d     E9 F3 FC 0C 
13b21     20 2C 31 2D 
13b25     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
13b29     1B 1C 1F 1F 
13b2d     17 16 0E 0D 
13b31     05 FC EE D8 
13b35     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
13b39     AD B3 C2 E2 
13b3d     08 28 39 40 
13b41     45 50 4F 3F 
13b45     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
13b49     14 0C 0D 0F 
13b4d     0D 05 FF F8 
13b51     F1 FC 02 08 
13b55     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
13b59     01 06 07 06 
13b5d     06 FF F9 EF 
13b61     E2 D6 CD C3 
13b65     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
13b69     CD D4 D4 D9 
13b6d     D9 D7 DE E7 
13b71     EF FD 09 20 
13b75     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
13b79     33 1F 0C 05 
13b7d     00 FA EB E8 
13b81     EA ED F8 03 
13b85     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
13b89     01 F9 EA E5 
13b8d     E0 DF DA DD 
13b91     EF FD 07 0B 
13b95     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
13b99     C8 BF C2 C3 
13b9d     CD DC F3 08 
13ba1     1F 2E 27 28 
13ba5     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
13ba9     3F 3A 30 1C 
13bad     10 07 FF 00 
13bb1     F5 F5 F2 F2 
13bb5     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
13bb9     09 10 1E 2C 
13bbd     2E 35 31 29 
13bc1     1D 0A 0B 0B 
13bc5     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
13bc9     00 F8 F1 E8 
13bcd     D4 C3 B7 B9 
13bd1     BE D4 E0 EF 
13bd5     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
13bd9     26 2F 2D 2A 
13bdd     1A 0C FA EE 
13be1     E1 D5 C9 CE 
13be5     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
13be9     1F 22 0F FB 
13bed     F0 ED F1 FC 
13bf1     00 06 12 20 
13bf5     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
13bf9     FE F3 E7 D1 
13bfd     C2 BA B2 AE 
13c01     AF BA CA E1 
13c05     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
13c09     0A 0F 14 0D 
13c0d     06 06 05 06 
13c11     11 10 10 0E 
13c15     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
13c19     04 17 28 39 
13c1d     3B 40 47 43 
13c21     37 23 17 08 
13c25     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
13c29     FD F0 E7 DE 
13c2d     D5 CD C8 C7 
13c31     C0 C3 C5 C7 
13c35     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
13c39     0D 1E 38 46 
13c3d     51 51 38 26 
13c41     1D 17 1E 22 
13c45     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
13c49     28 2D 29 1D 
13c4d     14 06 FF FF 
13c51     FD F8 F7 F5 
13c55     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
13c59     02 01 01 FA 
13c5d     F0 E3 DA BD 
13c61     AD A6 A7 A9 
13c65     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
13c69     DF D5 C8 D6 
13c6d     EF 0E 27 3B 
13c71     43 4E 51 4E 
13c75     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
13c79     FD EF EC E7 
13c7d     E8 E9 EA F2 
13c81     F8 01 06 0C 
13c85     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
13c89     FD EE EB E2 
13c8d     E3 E5 EA F3 
13c91     F3 E7 D3 B3 
13c95     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
13c99     F8 11 24 3B 
13c9d     3C 43 49 47 
13ca1     42 32 2B 19 
13ca5     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
13ca9     F9 EA E5 E6 
13cad     EB F7 04 10 
13cb1     19 23 28 22 
13cb5     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
13cb9     1A 1D 25 1F 
13cbd     14 FC ED EE 
13cc1     F8 03 0D 0A 
13cc5     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
13cc9     F0 E9 DF D6 
13ccd     D8 DB D9 E1 
13cd1     EA F5 00 01 
13cd5     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
13cd9     19 18 1B 1A 
13cdd     17 06 FA F3 
13ce1     EB EE F6 00 
13ce5     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
13ce9     D4 D3 DE F2 
13ced     08 1D 2D 38 
13cf1     3C 3E 3B 2B 
13cf5     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
13cf9     AB A6 A2 A4 
13cfd     AC B1 BF D3 
13d01     DE EC FA 06 
13d05     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
13d09     11 07 01 FA 
13d0d     FA 04 0A 11 
13d11     0E FA F1 F5 
13d15     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
13d19     4E 52 51 54 
13d1d     4D 3F 31 16 
13d21     06 F8 EE E3 
13d25     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
13d29     AC 9F A0 A3 
13d2d     B5 C9 E3 FC 
13d31     10 21 1D 20 
13d35     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
13d39     22 29 25 0B 
13d3d     00 02 05 20 
13d41     36 45 53 53 
13d45     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
13d49     2D 16 FD EC 
13d4d     E3 DF DF DF 
13d51     E0 DF DF DF 
13d55     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
13d59     FC F6 F5 E5 
13d5d     D3 C2 BA B7 
13d61     B6 C1 D1 E4 
13d65     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
13d69     D1 EA 08 22 
13d6d     37 48 54 5E 
13d71     61 61 55 48 
13d75     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
13d79     EB EC E2 D9 
13d7d     D3 D2 D2 D9 
13d81     E0 F0 FC 05 
13d85     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
13d89     FC EE E0 CC 
13d8d     C5 C9 C4 B3 
13d91     AF B0 C1 E3 
13d95     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
13d99     55 5A 57 54 
13d9d     44 36 20 0E 
13da1     FE F8 FB FE 
13da5     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
13da9     F1 F0 F7 03 
13dad     0B 16 23 28 
13db1     2D 2E 2C 27 
13db5     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
13db9     01 F2 E6 DD 
13dbd     DA E1 EA F9 
13dc1     03 08 0F 15 
13dc5     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
13dc9     0A F7 E6 D5 
13dcd     CE D3 D4 DC 
13dd1     DD E2 EB F8 
13dd5     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
13dd9     3A 3E 38 31 
13ddd     22 10 FD EA 
13de1     DC D8 DC DB 
13de5     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
13de9     ED 05 1B 32 
13ded     41 3D 44 38 
13df1     2A 1D 01 E3 
13df5     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
13df9     C1 CF CC CC 
13dfd     CB CB CA D5 
13e01     E4 F7 09 1B 
13e05     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
13e09     1A 0D 09 09 
13e0d     0A 0A FF F9 
13e11     F4 F6 01 16 
13e15     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
13e19     54 4D 41 32 
13e1d     1F 04 F1 DB 
13e21     D1 C8 C4 C5 
13e25     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
13e29     B6 CB E5 08 
13e2d     19 29 32 2D 
13e31     2D 22 14 06 
13e35     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
13e39     00 00 FF 02 
13e3d     13 30 46 5C 
13e41     6C 6B 65 5A 
13e45     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
13e49     F8 E1 D5 D1 
13e4d     CA CE CB CB 
13e51     CA CC D1 D2 
13e55     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
13e59     ED EA E8 E6 
13e5d     E4 E4 E3 D9 
13e61     DC DD D1 C3 
13e65     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
13e69     12 35 53 62 
13e6d     6B 66 66 69 
13e71     68 56 3D 1C 
13e75     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
13e79     BE B9 B8 B8 
13e7d     BF C6 D5 DF 
13e81     F2 03 0B 0A 
13e85     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
13e89     E2 DB D6 D1 
13e8d     CA CA CB D8 
13e91     EC FA 0D 25 
13e95     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
13e99     34 35 34 2F 
13e9d     26 17 03 FC 
13ea1     FD FF 0B 0A 
13ea5     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
13ea9     FD FF 01 0B 
13ead     11 12 17 17 
13eb1     12 07 FA F0 
13eb5     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
13eb9     CC C3 C5 CA 
13ebd     DA F3 0C 20 
13ec1     35 3D 42 3E 
13ec5     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
13ec9     E4 D5 CC CF 
13ecd     DA E2 EA EE 
13ed1     F4 F6 02 10 
13ed5     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
13ed9     21 0E FC E9 
13edd     D7 D3 D2 D7 
13ee1     DE DC D9 CE 
13ee5     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
13ee9     10 30 34 38 
13eed     36 35 32 30 
13ef1     1E 03 EE DF 
13ef5     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
13ef9     B5 AE AC AC 
13efd     BC D0 EA 09 
13f01     17 23 26 20 
13f05     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
13f09     30 36 36 24 
13f0d     10 FA E9 D9 
13f11     D8 E5 F5 09 
13f15     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
13f19     0E 0F 0D 00 
13f1d     F0 DF D7 D6 
13f21     DC DC DB DB 
13f25     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
13f29     00 08 0E 0E 
13f2d     04 FF FF FD 
13f31     FE 01 0C 1A 
13f35     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
13f39     02 FD 03 13 
13f3d     25 36 46 48 
13f41     46 36 29 26 
13f45     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
13f49     E9 DC D2 D3 
13f4d     CE CF CA CA 
13f51     CC D8 E1 F0 
13f55     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
13f59     CD C5 B6 B9 
13f5d     BE CF E5 E7 
13f61     E9 EC F1 F1 
13f65     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
13f69     3D 4B 57 55 
13f6d     5A 63 62 52 
13f71     39 1D FF E3 
13f75     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
13f79     AA A8 AB B2 
13f7d     CA D5 E7 F5 
13f81     F0 EB E4 E8 
13f85     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
13f89     23 26 23 16 
13f8d     FA E4 D4 CD 
13f91     D4 DF EC FF 
13f95     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
13f99     30 32 27 1A 
13f9d     11 0D 0E 15 
13fa1     12 14 12 08 
13fa5     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
13fa9     06 05 F3 E7 
13fad     DD D2 CE C9 
13fb1     CC E0 F1 FC 
13fb5     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
13fb9     ED E8 E9 F1 
13fbd     00 09 0C 0A 
13fc1     05 07 12 1C 
13fc5     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
13fc9     20 20 1F 17 
13fcd     0E 03 FD FB 
13fd1     FE 00 00 29 
13fd5     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
13fd9     37 2A 25 2A 
13fdd     25 18 0F 00 
13fe1     EA EF F1 E2 
13fe5     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
13fe9     EA FE 1A 13 
13fed     00 05 16 29 
13ff1     49 46 2E 31 
13ff5     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
13ff9     3D 2E 31 2E 
13ffd     25 1A 05 E8 
14001     E2 E6 DF EF 
14005     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
14009     EA 00 1A 08 
1400d     00 07 1A 37 
14011     4F 38 2E 37 
14015     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
14019     35 2A 31 29 
1401d     1D 16 00 E3 
14021     E3 E3 E2 F2 
14025     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
14029     EF 0E 13 01 
1402d     00 0E 1E 3F 
14031     46 35 2E 38 
14035     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
14039     2A 29 2A 21 
1403d     18 0F F1 E2 
14041     E3 E3 EA F1 
14045     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
14049     FE 16 0F 00 
1404d     01 11 29 45 
14051     3D 2E 35 3C 
14055     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
14059     25 2A 25 21 
1405d     13 00 ED E3 
14061     E3 E2 EF EA 
14065     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
14069     00 11 05 00 
1406d     02 16 31 46 
14071     38 31 37 44 
14075     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
14079     25 2A 24 18 
1407d     0F 00 E8 E2 
14081     E3 E3 F1 E3 
14085     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
14089     08 08 00 00 
1408d     08 1E 3C 46 
14091     37 37 3C 46 
14095     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
14099     25 29 21 13 
1409d     05 F1 E8 E2 
140a1     E3 EA EA D6 
140a5     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
140a9     08 05 00 00 
140ad     11 29 44 3D 
140b1     37 3C 44 4D 
140b5     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
140b9     29 25 1A 0F 
140bd     00 F1 E3 DF 
140c1     E2 EF E2 CF 
140c5     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
140c9     05 01 00 02 
140cd     1A 31 44 3C 
140d1     38 3D 49 4F 
140d5     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
140d9     2A 21 18 0F 
140dd     FB EF E2 DF 
140e1     E3 EA D6 C8 
140e5     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
140e9     01 00 00 0E 
140ed     1E 3C 3F 3C 
140f1     3D 44 4F 54 
140f5     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
140f9     2A 21 13 05 
140fd     F8 ED DF DF 
14101     E8 E3 CF C8 
14105     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
14109     00 00 01 13 
1410d     2E 3F 3D 3D 
14111     3F 49 54 54 
14115     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
14119     25 1D 0F 00 
1411d     F2 E8 DC DF 
14121     E8 D7 C8 C9 
14125     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
14129     00 00 07 1D 
1412d     31 3F 3D 3F 
14131     45 4F 54 54 
14135     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
14139     24 18 05 FB 
1413d     F2 DF DB E3 
14141     E3 CB C4 CB 
14145     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
14149     00 00 0E 24 
1414d     3C 3D 3F 45 
14151     49 54 58 4F 
14155     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
14159     21 11 01 FB 
1415d     F1 DB DC E6 
14161     DF C4 C4 CF 
14165     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
14169     00 02 16 2E 
1416d     3C 3D 44 46 
14171     4F 58 5A 4F 
14175     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
14179     1D 08 00 F9 
1417d     E8 DB DC E3 
14181     D2 C1 C8 D2 
14185     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
14189     00 07 1E 31 
1418d     3C 3F 46 4D 
14191     54 5A 5A 4D 
14195     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
14199     18 05 FF F8 
1419d     E2 D7 E2 DF 
141a1     C8 C1 C9 DB 
141a5     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
141a9     01 11 29 38 
141ad     3C 44 49 4F 
141b1     58 5C 54 49 
141b5     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
141b9     0F 00 FE F1 
141bd     DF D7 E3 D6 
141c1     BC C1 D2 DC 
141c5     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
141c9     05 18 2E 38 
141cd     3D 46 4D 54 
141d1     5C 5C 54 46 
141d5     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
141d9     07 00 FE EA 
141dd     D7 DC DF CB 
141e1     BA C8 D2 E3 
141e5     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
141e9     0E 1E 31 38 
141ed     3F 49 4F 58 
141f1     5E 5A 4F 46 
141f5     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
141f9     01 00 F9 E3 
141fd     D6 DC DB C3 
14201     B7 C9 DB E6 
14205     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
14209     11 29 35 3C 
1420d     45 4F 54 5C 
14211     5E 5A 4D 38 
14215     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
14219     00 00 F1 DF 
1421d     D6 DF D2 BA 
14221     BC D2 DC E6 
14225     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
14229     1A 2E 37 3C 
1422d     49 4F 58 5E 
14231     5E 54 46 35 
14235     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
14239     00 FF ED D7 
1423d     D7 DB C8 B7 
14241     C4 D7 DF E6 
14245     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
14249     1E 2E 37 3F 
1424d     4D 54 5C 60 
14251     5E 54 46 2E 
14255     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
14259     00 FB E8 D6 
1425d     DC D6 BC B7 
14261     CF DB DF EA 
14265     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
14269     29 31 38 45 
1426d     4F 58 5E 64 
14271     5C 4F 3D 2E 
14275     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
14279     00 F2 DF D6 
1427d     DB CB BA BB 
14281     D2 DB E2 EF 
14285     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
14289     2E 31 3C 49 
1428d     54 5C 64 64 
14291     5A 4D 35 2E 
14295     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
14299     00 F1 DB D7 
1429d     D7 C3 B3 C4 
142a1     D6 DB E6 F9 
142a5     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
142a9     2E 35 3F 4F 
142ad     58 5E 65 5E 
142b1     54 46 35 2E 
142b5     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
142b9     FB E8 D6 D7 
142bd     D2 BB B7 C9 
142c1     D6 DC EA FE 
142c5     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
142c9     2E 37 45 54 
142cd     5C 64 65 5E 
142d1     4F 3D 2E 2A 
142d5     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
142d9     F8 E3 D6 D6 
142dd     CB BA BB D2 
142e1     D7 DC EF 00 
142e5     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
142e9     2E 3C 4D 58 
142ed     5E 65 64 5A 
142f1     4D 37 2E 25 
142f5     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
142f9     F1 DF D6 D2 
142fd     C3 B3 C4 D2 
14301     D7 E6 F9 00 
14305     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
14309     31 3F 4F 5A 
1430d     64 65 64 5A 
14311     46 35 2A 21 
14315     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
14319     EA D7 D2 CB 
1431d     BA B7 C9 D2 
14321     DB EA FE 02 
14325     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
14329     37 45 54 5E 
1432d     65 66 5E 54 
14331     3D 2E 2A 18 
14335     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
14339     E6 D6 D2 C8 
1433d     BA BC C9 D2 
14341     DC EF 00 07 
14345     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
14349     3C 4D 58 60 
1434d     66 65 5C 4D 
14351     37 2E 24 11 
14355     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
14359     DF D2 CF BC 
1435d     B3 C1 CB D6 
14361     E6 F9 01 0E 
14365     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
14369     3F 54 5C 65 
1436d     66 64 5A 46 
14371     35 2A 21 08 
14375     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
14379     DF D2 CB BA 
1437d     B7 C4 CF DB 
14381     EA FF 07 11 
14385     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
14389     45 58 60 66 
1438d     66 60 54 46 
14391     2E 25 18 05 
14395     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
14399     D7 CF C4 B3 
1439d     BB 00 00 F9 
143a1     FC FC FD FF 
143a5     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
143a9     04 07 09 0A 
143ad     0D 0D 0E 13 
143b1     13 13 10 0E 
143b5     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
143b9     21 20 1E 16 
143bd     0E 07 07 03 
143c1     03 03 FD EA 
143c5     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
143c9     B1 B1 B3 AD 
143cd     A7 A9 A6 A9 
143d1     A2 9D 9D 9A 
143d5     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
143d9     A0 A9 B1 AD 
143dd     AF B1 B5 CC 
143e1     E0 F2 F6 F6 
143e5     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
143e9     CC CF DA E6 
143ed     EC F0 FC EC 
143f1     EA DA CA C0 
143f5     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
143f9     E0 F3 04 09 
143fd     21 2A 37 34 
14401     2C 20 18 16 
14405     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
14409     01 09 16 26 
1440d     37 3B 3D 2D 
14411     18 01 FF 00 
14415     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
14419     09 00 FC F7 
1441d     F9 FF 07 10 
14421     24 2D 3A 44 
14425     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
14429     27 14 FF F2 
1442d     F6 01 14 1D 
14431     21 21 20 20 
14435     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
14439     04 ED DC D3 
1443d     C5 CC D3 D9 
14441     E2 EA F3 EC 
14445     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
14449     E0 E2 E8 F2 
1444d     F3 FD F9 EA 
14451     DF D0 D4 CA 
14455     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
14459     D6 DA DC CA 
1445d     C3 BF C6 DA 
14461     F0 04 0D 10 
14465     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
14469     36 3B 3D 3A 
1446d     34 20 13 FC 
14471     F7 E6 D6 D6 
14475     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
14479     FF 03 00 F6 
1447d     E6 DC D3 CA 
14481     D3 DA E2 EC 
14485     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
14489     D4 E0 E6 EC 
1448d     EC DA BC AC 
14491     92 84 86 89 
14495     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
14499     B9 BC C6 CC 
1449d     D9 E6 EC F3 
144a1     F9 00 04 04 
144a5     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
144a9     F9 F9 F9 03 
144ad     0A 1D 2D 30 
144b1     30 2C 24 2C 
144b5     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
144b9     30 1E 0D 13 
144bd     13 1E 2D 30 
144c1     36 27 20 07 
144c5     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
144c9     80 80 83 94 
144cd     9D A6 A0 A6 
144d1     A9 AC AD AD 
144d5     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
144d9     A2 A3 A3 96 
144dd     96 98 9C B1 
144e1     BD C3 C0 C0 
144e5     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
144e9     F0 01 10 16 
144ed     16 18 0E FC 
144f1     ED DA D6 DA 
144f5     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
144f9     F2 F3 EC ED 
144fd     E3 E6 E6 E6 
14501     F0 03 0E 27 
14505     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
14509     53 59 57 51 
1450d     2C 0D ED DC 
14511     CF CF D4 DF 
14515     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
14519     FF 00 01 01 
1451d     04 10 20 40 
14521     54 66 74 77 
14525     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
14529     4B 37 1E 0D 
1452d     FF F9 00 F6 
14531     EA E0 E0 E6 
14535     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
14539     F0 F6 FC 10 
1453d     26 2D 3A 37 
14541     26 18 07 EC 
14545     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
14549     B1 BC CC C9 
1454d     C9 C9 C6 C6 
14551     C9 C6 C0 C5 
14555     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
14559     0D 0E 09 04 
1455d     01 01 01 04 
14561     04 F7 F6 F2 
14565     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
14569     0A 10 0D 0D 
1456d     03 00 FD F9 
14571     F3 FF 0A 14 
14575     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
14579     27 20 18 04 
1457d     E0 BC A0 96 
14581     90 A6 B3 CA 
14585     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
14589     E3 ED ED E2 
1458d     D6 CA C3 C0 
14591     C5 D0 D6 DC 
14595     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
14599     B1 A6 9A 92 
1459d     A2 B3 CF E6 
145a1     F3 04 0E 14 
145a5     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
145a9     1A 1A 1D 24 
145ad     26 24 20 1A 
145b1     0A FD FD F6 
145b5     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
145b9     03 10 2D 43 
145bd     5A 63 60 63 
145c1     5A 53 4D 2D 
145c5     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
145c9     A6 9A 92 83 
145cd     80 80 80 80 
145d1     80 80 80 80 
145d5     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
145d9     B1 C5 C6 CA 
145dd     D6 DF EA E2 
145e1     E3 E0 DA DF 
145e5     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
145e9     E6 D3 C5 BF 
145ed     B3 B1 AC B1 
145f1     BD CA E3 F2 
145f5     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
145f9     37 3A 37 24 
145fd     14 04 FC FC 
14601     01 0D 1A 20 
14605     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
14609     10 00 ED DF 
1460d     DF DF F0 FD 
14611     18 27 40 36 
14615     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
14619     1D 10 0E 0E 
1461d     09 0D 18 10 
14621     16 21 2C 34 
14625     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
14629     49 4B 44 41 
1462d     41 37 3A 2D 
14631     26 1A 0A 00 
14635     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
14639     F0 F6 FD 04 
1463d     13 04 FF FC 
14641     F6 ED E8 E8 
14645     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
14649     FC F2 EC E2 
1464d     DA D3 CF C0 
14651     BD A6 9D 94 
14655     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
14659     CF E2 F2 FD 
1465d     10 1A 18 20 
14661     2A 31 41 40 
14665     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
14669     27 0D 04 FC 
1466d     F6 ED EA E0 
14671     DF E6 E8 EA 
14675     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
14679     0D 0E 10 0E 
1467d     04 F3 ED DA 
14681     D9 E0 D9 E6 
14685     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
14689     BD A0 86 80 
1468d     80 80 92 B5 
14691     CC D4 E0 E2 
14695     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
14699     04 04 07 04 
1469d     04 FD F9 FC 
146a1     FD 01 04 09 
146a5     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
146a9     DF E2 EC F3 
146ad     01 0A 0E 10 
146b1     21 2A 2A 2A 
146b5     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
146b9     37 41 49 41 
146bd     31 16 03 F6 
146c1     EA E2 E6 EA 
146c5     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
146c9     B9 B5 B5 BC 
146cd     BF BC B5 AC 
146d1     9C 86 80 80 
146d5     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
146d9     B5 B1 B1 BD 
146dd     BC C3 BF C0 
146e1     C3 C6 D4 DA 
146e5     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
146e9     E2 DF DC E0 
146ed     E2 E3 E8 F0 
146f1     F2 F9 ED E8 
146f5     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
146f9     DA E0 E3 ED 
146fd     F0 F9 09 16 
14701     2A 3D 3B 41 
14705     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
14709     14 0E 09 07 
1470d     13 1D 13 18 
14711     10 01 01 03 
14715     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
14719     16 24 2D 37 
1471d     3B 3D 3D 41 
14721     43 47 47 4B 
14725     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
14729     31 16 03 F0 
1472d     E0 DC E3 F7 
14731     04 13 21 2D 
14735     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
14739     3A 30 1D 03 
1473d     F2 EC E0 E6 
14741     E6 F0 F6 F6 
14745     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
14749     D0 CF C9 CC 
1474d     CC C9 C9 C6 
14751     C0 C3 B9 C0 
14755     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
14759     E3 F0 FF 01 
1475d     0D 10 0D 07 
14761     00 F9 F6 FC 
14765     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
14769     20 2D 40 41 
1476d     41 40 34 2C 
14771     1D 14 10 0D 
14775     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
14779     1A 10 00 F9 
1477d     ED E6 E2 D4 
14781     CA BF B5 B7 
14785     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
14789     CC CC C9 C9 
1478d     C0 C3 BD B9 
14791     BC BF CF D3 
14795     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
14799     E0 EC F0 F9 
1479d     03 0D 14 1D 
147a1     26 2A 1D 1A 
147a5     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
147a9     FC FF 09 16 
147ad     1E 1D 1D 1D 
147b1     20 2C 30 31 
147b5     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
147b9     0E FF FC F6 
147bd     F2 F9 F9 FF 
147c1     01 09 0A 01 
147c5     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
147c9     9C 8F 89 86 
147cd     80 80 80 80 
147d1     84 96 9C AF 
147d5     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
147d9     CF CF D0 D6 
147dd     E8 EC F0 F2 
147e1     F0 F2 DF C6 
147e5     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
147e9     DA E2 EA EA 
147ed     ED F2 F2 F2 
147f1     F2 EA EC EC 
147f5     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
147f9     E2 DF DA D9 
147fd     DF E0 E6 E8 
14801     F3 F6 01 01 
14805     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
14809     47 4B 47 3A 
1480d     2D 18 09 09 
14811     0A 18 26 36 
14815     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
14819     4D 49 43 37 
1481d     3B 3A 37 37 
14821     36 34 27 2A 
14825     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
14829     16 07 FF F6 
1482d     F3 F7 FD 07 
14831     1A 30 36 31 
14835     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
14839     D9 D0 D4 DF 
1483d     ED FF 04 10 
14841     0E 13 13 00 
14845     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
14849     F6 F6 F7 F7 
1484d     EA E0 D3 C6 
14851     C0 BD C0 C6 
14855     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
14859     E0 F2 FF 03 
1485d     0A 0A 0D FF 
14861     FD E6 D9 DF 
14865     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
14869     2C 36 36 31 
1486d     31 20 1E 18 
14871     1A 1E 2A 27 
14875     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
14879     03 F9 F7 F9 
1487d     F7 01 09 1A 
14881     2A 10 01 F2 
14885     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
14889     E6 D6 CF B5 
1488d     A7 A6 A2 A7 
14891     B5 C3 C9 D4 
14895     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
14899     E0 E2 E6 ED 
1489d     F9 FF 09 09 
148a1     0A 0A 01 FF 
148a5     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
148a9     14 20 18 1D 
148ad     13 1E 2D 3B 
148b1     51 59 57 47 
148b5     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
148b9     F2 F0 ED FF 
148bd     01 0E 14 1E 
148c1     1A 14 01 E8 
148c5     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
148c9     80 80 80 80 
148cd     80 80 80 80 
148d1     80          | 	byte	$80[9]
148d2     8C 92 A2 AC 
148d6     B3 B5 BC C6 
148da     CF E3 E8 F2 
148de     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
148e2     AC B3 C5 D9 
148e6     F2 0A 1A 24 
148ea     2C 2C 1D 14 
148ee     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
148f2     E8 E2 E0 E0 
148f6     D6 D4 C6 C5 
148fa     BD B1 B9 BC 
148fe     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
14902     F0 FF 03 18 
14906     27 30 37 3B 
1490a     2C 21 1A 18 
1490e     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
14912     3D 43 44 3D 
14916     30 2D 2D 31 
1491a     3A 40 4B 51 
1491e     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
14922     44 41 41 40 
14926     41 49 4B 44 
1492a     31 1D 0E 09 
1492e     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
14932     FC F3 D9 C5 
14936     BD AD AF B1 
1493a     C3 D6 ED 01 
1493e     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
14942     1D 14 0E 07 
14946     00 F9 F6 F0 
1494a     E3 D6 CC C6 
1494e     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
14952     EC F9 FF FC 
14956     F3 F3 FC 00 
1495a     07 07 09 09 
1495e     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
14962     E8 F3 F9 03 
14966     0E 14 1D 1D 
1496a     18 18 18 0E 
1496e     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
14972     07 09 0E 10 
14976     10 07 FC FC 
1497a     F7 FD 0D 18 
1497e     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
14982     2A 37 41 47 
14986     37 2C 0E F2 
1498a     E3 D3 CC D0 
1498e     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
14992     F2 EA E3 E6 
14996     E3 E3 E3 DA 
1499a     DC CA CA CC 
1499e     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
149a2     D9 DC E2 F0 
149a6     04 16 27 2C 
149aa     2D 31 43 47 
149ae     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
149b2     0E FF E6 D9 
149b6     D3 DA EC FF 
149ba     21 36 49 4F 
149be     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
149c2     1A 0D F3 D6 
149c6     B7 A7 98 98 
149ca     98 92 86 89 
149ce     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
149d2     80 80 80 80 
149d6     8C 9C AC B9 
149da     BF C5 C5 C5 
149de     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
149e2     EA F7 00 0E 
149e6     0E 0E 00 F6 
149ea     EA E8 E8 EA 
149ee     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
149f2     F9 FC ED E2 
149f6     D3 CC C9 D0 
149fa     DC F0 F3 F6 
149fe     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
14a02     1D 1E 1D 14 
14a06     03 FC F2 F6 
14a0a     F6 F9 01 0A 
14a0e     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
14a12     3D 40 43 47 
14a16     4B 51 4D 4B 
14a1a     43 37 36 2A 
14a1e     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
14a22     36 4B 63 7F 
14a26     7F 7F 7F 6A 
14a2a     4F 37 20 16 
14a2e     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
14a32     D4 D0 D0 D3 
14a36     DA E3 EC F6 
14a3a     FC F7 ED E8 
14a3e     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
14a42     EA EC EC E8 
14a46     ED F3 F2 F6 
14a4a     F3 EC E3 E3 
14a4e     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
14a52     CA C0 BD CA 
14a56     E0 F7 0D 1A 
14a5a     18 18 18 14 
14a5e     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
14a62     16 26 34 34 
14a66     31 2D 26 1E 
14a6a     20 10 07 FC 
14a6e     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
14a72     CC CF CC CF 
14a76     D4 E0 F6 04 
14a7a     13 20 2D 34 
14a7e     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
14a82     6C 6A 51 3D 
14a86     34 18 04 F0 
14a8a     DF D0 D6 E3 
14a8e     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
14a92     00 F3 F0 EC 
14a96     E8 EA E8 EA 
14a9a     EA ED F0 F0 
14a9e     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
14aa2     F2 F3 F6 F3 
14aa6     F2 F2 E8 EC 
14aaa     ED F7 FF 01 
14aae     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
14ab2     FD 04 0A 1A 
14ab6     24 30 3B 37 
14aba     31 21 14 07 
14abe     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
14ac2     1A 24 27 18 
14ac6     03 E0 C0 9A 
14aca     84 80 80 80 
14ace     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
14ad2     89 94 A0 B1 
14ad6     BD BC AD A6 
14ada     9C 96 9A A0 
14ade     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
14ae2     EC FC FF 04 
14ae6     09 03 FC F2 
14aea     EA E3 DF D4 
14aee     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
14af2     B1 AD B1 BD 
14af6     D0 E6 F9 07 
14afa     1A 20 14 16 
14afe     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
14b02     24 20 1D 1A 
14b06     1E 20 1D 1A 
14b0a     1A 16 1A 14 
14b0e     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
14b12     FF 03 04 10 
14b16     1A 20 30 3B 
14b1a     44 51 5E 63 
14b1e     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
14b22     60 5E 5A 49 
14b26     41 2D 27 2D 
14b2a     36 2D 1E 13 
14b2e     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
14b32     00 F9 00 FF 
14b36     00 04 04 0A 
14b3a     0A 0A 04 04 
14b3e     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
14b42     E3 DC D6 D3 
14b46     D3 C5 BF B1 
14b4a     B3 B5 B3 B9 
14b4e     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
14b52     E6 F9 04 04 
14b56     04 00 00 F7 
14b5a     F2 F6 FC FD 
14b5e     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
14b62     4F 57 54 4B 
14b66     2C 14 03 F6 
14b6a     EC E8 E2 E2 
14b6e     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
14b72     00 FF FC F3 
14b76     F6 F7 F9 FC 
14b7a     00 FF 04 16 
14b7e     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
14b82     40 4B 4F 53 
14b86     5E 5A 54 51 
14b8a     4D 34 20 09 
14b8e     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
14b92     BD BF CA E0 
14b96     ED 00 0E 13 
14b9a     14 16 10 09 
14b9e     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
14ba2     01 01 FF F0 
14ba6     EC EC F7 E6 
14baa     E2 DC D4 D0 
14bae     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
14bb2     F9 F9 FF 07 
14bb6     16 1E 2C 34 
14bba     34 30 36 30 
14bbe     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
14bc2     09 FD F3 F0 
14bc6     E2 CA AC 98 
14bca     84 86 8C 9D 
14bce     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
14bd2     AD AC B1 B3 
14bd6     B7 BC BC C0 
14bda     CC D9 D9 E6 
14bde     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
14be2     D9 CC BF AF 
14be6     A6 9D 9C 9A 
14bea     9C A6 AC B9 
14bee     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
14bf2     EA DF D9 D6 
14bf6     DA DC DA DA 
14bfa     DC ED 01 07 
14bfe     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
14c02     4B 51 43 3D 
14c06     2C 27 1D 10 
14c0a     14 14 16 1A 
14c0e     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
14c12     27 27 27 27 
14c16     24 24 24 2A 
14c1a     31 36 36 36 
14c1e     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
14c22     44 3D 3D 40 
14c26     47 47 47 47 
14c2a     41 3D 36 26 
14c2e     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
14c32     F7 F7 FF 0D 
14c36     20 27 2C 26 
14c3a     16 14 0E 03 
14c3e     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
14c42     F2 F2 F0 E8 
14c46     E2 CF B7 AD 
14c4a     A6 A3 9A 98 
14c4e     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
14c52     CA DF F0 F9 
14c56     01 0E 14 24 
14c5a     2D 34 34 31 
14c5e     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
14c62     FF EC E6 DF 
14c66     E2 E3 E3 E8 
14c6a     EA FC 0A 18 
14c6e     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
14c72     00 FF FD 04 
14c76     07 0A 14 1A 
14c7a     2A 37 3B 41 
14c7e     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
14c82     34 36 2C 2D 
14c86     21 1E 18 1A 
14c8a     1E 26 26 21 
14c8e     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
14c92     F2 E8 E6 E6 
14c96     E8 E8 F0 FF 
14c9a     03 03 FF F9 
14c9e     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
14ca2     F0 E8 E6 E0 
14ca6     E0 E6 E8 EA 
14caa     F0 F9 03 13 
14cae     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
14cb2     10 0D 0D 0D 
14cb6     04 00 FD FF 
14cba     FC FF 01 07 
14cbe     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
14cc2     1A 18 0E 04 
14cc6     F0 D4 CA B9 
14cca     A6 90 80 80 
14cce     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
14cd2     AF B7 C5 CA 
14cd6     D6 E8 E8 EC 
14cda     F2 EA E6 E0 
14cde     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
14ce2     BD B5 B5 AD 
14ce6     B1 AC A7 A7 
14cea     A9 AD BC C5 
14cee     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
14cf2     AF C0 C6 D9 
14cf6     E0 EA FC FF 
14cfa     04 16 16 1A 
14cfe     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
14d02     0E 0E 13 14 
14d06     13 13 10 10 
14d0a     10 16 16 16 
14d0e     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
14d12     30 31 3D 44 
14d16     51 60 64 64 
14d1a     54 43 37 2D 
14d1e     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
14d22     0D 09 0A 16 
14d26     21 30 3B 44 
14d2a     53 5D 6C 6E 
14d2e     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
14d32     0D F9 F0 EC 
14d36     EA E8 ED F7 
14d3a     03 0E 14 1A 
14d3e     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
14d42     09 FC E0 C9 
14d46     AD A2 A3 A2 
14d4a     A6 B1 B5 C0 
14d4e     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
14d52     F2 F2 F6 F7 
14d56     00 09 0A 0D 
14d5a     0A 04 07 04 
14d5e     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
14d62     F3 F2 F3 ED 
14d66     F2 EC EC F0 
14d6a     F6 FC 01 00 
14d6e     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
14d72     FF 03 10 21 
14d76     2D 2C 2C 31 
14d7a     3B 49 4F 4D 
14d7e     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
14d82     54 4D 3B 31 
14d86     18 0E 0D 04 
14d8a     07 07 09 14 
14d8e     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
14d92     21 1E 18 16 
14d96     14 13 01 EC 
14d9a     D3 C3 BC AF 
14d9e     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
14da2     B5 C6 DF F6 
14da6     03 16 13 16 
14daa     27 27 27 21 
14dae     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
14db2     FC F3 FC 00 
14db6     09 0E 16 1D 
14dba     1E 20 21 21 
14dbe     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
14dc2     03 EC CF C0 
14dc6     BF BC C9 D0 
14dca     DC DF C6 B5 
14dce     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
14dd2     96 98 A6 AC 
14dd6     B7 C5 CA CC 
14dda     D0 D6 CC C6 
14dde     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
14de2     B3 B5 B7 BC 
14de6     C0 CA D0 E0 
14dea     E3 E3 E3 CF 
14dee     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
14df2     AC BD D0 E2 
14df6     DF E3 ED 04 
14dfa     14 21 27 2A 
14dfe     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
14e02     2A 14 FF F2 
14e06     E2 D9 D0 D4 
14e0a     D6 DA E8 FF 
14e0e     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
14e12     66 76 77 7C 
14e16     6E 4D 34 18 
14e1a     07 FF FF 04 
14e1e     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
14e22     26 31 40 44 
14e26     47 4D 4F 54 
14e2a     5D 63 64 60 
14e2e     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
14e32     34 1D 0A FD 
14e36     F3 F3 F3 F6 
14e3a     F6 F7 F9 FD 
14e3e     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
14e42     C5 B5 B1 B3 
14e46     BD CA D6 E3 
14e4a     E6 D3 CC CC 
14e4e     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
14e52     E0 E8 F6 04 
14e56     09 14 13 09 
14e5a     FD F0 DF DF 
14e5e     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
14e62     FC 07 13 2A 
14e66     31 3B 3B 3A 
14e6a     26 13 F2 DA 
14e6e     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
14e72     E6 FC 01 FC 
14e76     FF 0A 1A 3A 
14e7a     47 4F 5A 5E 
14e7e     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
14e82     53 3D 2D 16 
14e86     0A 01 FC FC 
14e8a     03 09 20 31 
14e8e     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
14e92     51 43 31 18 
14e96     F7 D9 C6 BF 
14e9a     C3 D0 DA E8 
14e9e     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
14ea2     DA DA E0 E8 
14ea6     E6 EA F0 F0 
14eaa     EC F0 ED F2 
14eae     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
14eb2     04 10 1A 18 
14eb6     1A 20 21 26 
14eba     24 24 1E 1A 
14ebe     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
14ec2     D9 D4 CF D3 
14ec6     DF EC F6 F0 
14eca     F0 E6 F0 EC 
14ece     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
14ed2     BC B7 B7 B5 
14ed6     AD A6 9A 94 
14eda     89 80 83 84 
14ede     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
14ee2     AD CA E0 F0 
14ee6     00 01 01 FC 
14eea     E6 C9 AF A0 
14eee     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
14ef2     C5 CA C9 CC 
14ef6     DC F0 FD 04 
14efa     0A 0A 0E 13 
14efe     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
14f02     26 2A 2A 2C 
14f06     1E 18 10 04 
14f0a     04 07 09 13 
14f0e     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
14f12     2D 30 16 03 
14f16     F7 F2 ED F3 
14f1a     07 1D 37 4D 
14f1e     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
14f22     57 59 5A 59 
14f26     4D 40 34 27 
14f2a     26 21 2A 2D 
14f2e     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
14f32     30 21 1A 0E 
14f36     14 16 2A 34 
14f3a     37 3A 31 21 
14f3e     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
14f42     BC B9 B7 BC 
14f46     CA D0 C9 C0 
14f4a     B3 AF B9 BF 
14f4e     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
14f52     ED F7 FC F9 
14f56     F9 FC F3 F6 
14f5a     F3 F0 E0 D9 
14f5e     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
14f62     04 16 24 2A 
14f66     27 26 18 04 
14f6a     00 F6 F3 F9 
14f6e     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
14f72     26 1E 18 14 
14f76     18 1D 21 20 
14f7a     26 24 24 26 
14f7e     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
14f82     18 18 1D 21 
14f86     2C 2C 3A 43 
14f8a     43 44 51 53 
14f8e     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
14f92     27 0D F6 D9 
14f96     C5 B9 B7 BF 
14f9a     CF E2 EC EC 
14f9e     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
14fa2     24 2C 36 34 
14fa6     20 10 00 EC 
14faa     EA DC D4 D6 
14fae     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
14fb2     E6 EC EA F2 
14fb6     F6 F6 F9 F9 
14fba     FF 00 0A 0E 
14fbe     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
14fc2     0D 18 18 1E 
14fc6     16 00 EC DC 
14fca     D4 D0 D4 DA 
14fce     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
14fd2     8A 89 94 9A 
14fd6     AC B1 C0 C9 
14fda     CF D6 CC CF 
14fde     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
14fe2     D4 D6 D6 C9 
14fe6     C6 B7 AC 9C 
14fea     9A 8C 8C 8F 
14fee     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
14ff2     CA E2 E6 ED 
14ff6     F7 00 0A 14 
14ffa     16 0D 0A F9 
14ffe     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
15002     F6 FF 09 16 
15006     1D 24 27 3A 
1500a     3D 40 49 49 
1500e     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
15012     14 0D 10 13 
15016     14 1A 26 30 
1501a     3A 3A 36 2D 
1501e     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
15022     36 36 36 2D 
15026     30 27 2D 30 
1502a     26 24 24 27 
1502e     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
15032     3D 30 18 01 
15036     F0 E2 D9 D9 
1503a     DF E2 E8 F3 
1503e     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
15042     26 2C 2A 16 
15046     00 F3 E2 D6 
1504a     D9 D9 DC E0 
1504e     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
15052     BD B5 B1 B3 
15056     B3 B5 C5 D6 
1505a     E0 F9 04 18 
1505e     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
15062     10 13 09 09 
15066     01 FF FF F3 
1506a     EC E8 E8 E8 
1506e     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
15072     09 16 2A 3D 
15076     4B 5D 5A 5D 
1507a     51 40 31 21 
1507e     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
15082     3A 47 4D 54 
15086     54 54 47 3A 
1508a     27 14 00 F3 
1508e     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
15092     16 21 20 16 
15096     09 03 03 FD 
1509a     F6 F0 F0 ED 
1509e     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
150a2     FC F3 F2 EA 
150a6     E8 E2 E8 EA 
150aa     ED F2 FD 03 
150ae     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
150b2     13 10 0A 00 
150b6     FF F7 F3 F9 
150ba     F7 FF 04 04 
150be     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
150c2     FF F9 ED EA 
150c6     E2 E6 E6 E3 
150ca     E6 E8 E3 DF 
150ce     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
150d2     80 80 80 80 
150d6     84 8C A3 B1 
150da     BF D6 E0 EC 
150de     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
150e2     D9 D3 C0 BD 
150e6     BD BF C3 C5 
150ea     C6 CA CF D4 
150ee     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
150f2     D3 D0 D3 D4 
150f6     D6 D9 D6 D9 
150fa     D9 D9 E2 ED 
150fe     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
15102     16 26 31 37 
15106     40 36 30 1E 
1510a     09 FC EC E6 
1510e     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
15112     27 3A 4B 57 
15116     64 64 5A 4F 
1511a     47 3D 3A 3D 
1511e     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
15122     60 59 51 43 
15126     37 26 18 0E 
1512a     03 00 04 04 
1512e     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
15132     26 09 F0 DC 
15136     CC C5 CA D6 
1513a     E6 FD 04 13 
1513e     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
15142     F6 E8 E6 DC 
15146     DC DC DC ED 
1514a     F7 FC FC F6 
1514e     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
15152     CC D0 E0 EC 
15156     00 10 21 2D 
1515a     2C 2D 24 16 
1515e     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
15162     C0 BD C0 D4 
15166     E2 F2 F6 F3 
1516a     F7 F9 F2 ED 
1516e     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
15172     18 26 31 37 
15176     37 2D 27 21 
1517a     21 24 2A 31 
1517e     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
15182     60 60 53 4B 
15186     44 37 2D 2A 
1518a     21 1E 1A 1E 
1518e     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
15192     49 47 41 36 
15196     14 FD E6 D3 
1519a     CC C5 CA D0 
1519e     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
151a2     E6 E3 E6 E6 
151a6     E8 EA EC ED 
151aa     F3 F6 F6 F6 
151ae     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
151b2     00 00 00 FD 
151b6     F7 F0 F6 FD 
151ba     09 16 24 34 
151be     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
151c2     18 13 04 FD 
151c6     EC E3 E2 E0 
151ca     DF D0 B5 9A 
151ce     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
151d2     80 80 80 94 
151d6     A2 AD B7 C5 
151da     C9 CF D6 DA 
151de     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
151e2     A9 AC B9 C9 
151e6     CF DF E2 E2 
151ea     D9 CF CC CC 
151ee     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
151f2     EC FF 0E 10 
151f6     13 13 0E 10 
151fa     0A 04 04 04 
151fe     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
15202     F2 F0 E2 E0 
15206     DC DA D9 DA 
1520a     DC D6 E0 F2 
1520e     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
15212     51 5A 59 4B 
15216     40 40 37 3A 
1521a     3A 3B 44 4F 
1521e     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
15222     34 31 2C 2D 
15226     30 37 40 49 
1522a     51 57 57 57 
1522e     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
15232     0E F6 D9 C3 
15236     BD BC C5 D3 
1523a     DF E8 E8 E8 
1523e     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
15242     CA C9 CA D4 
15246     DA EC FF 04 
1524a     01 F7 ED E2 
1524e     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
15252     F6 00 04 0D 
15256     0A 09 01 01 
1525a     03 0A 0A 0D 
1525e     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
15262     07 10 16 16 
15266     13 0A F7 F2 
1526a     ED E6 EA E6 
1526e     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
15272     00 04 0D 0A 
15276     0D 0E 1A 26 
1527a     36 47 54 5E 
1527e     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
15282     30 26 21 24 
15286     26 2C 2C 21 
1528a     21 24 2A 34 
1528e     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
15292     63 63 60 60 
15296     60 54 41 27 
1529a     0E FD F2 E3 
1529e     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
152a2     B5 B9 BC B7 
152a6     B3 BD BF C9 
152aa     C9 CC CA D4 
152ae     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
152b2     18 16 0D 0E 
152b6     0E 13 1E 26 
152ba     27 27 0E 00 
152be     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
152c2     E6 E3 E6 F7 
152c6     07 13 1A 18 
152ca     13 00 EA D9 
152ce     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
152d2     9D A0 A2 9A 
152d6     94 8C 86 8C 
152da     80 80 80 80 
152de     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
152e2     A7 C3 D4 E0 
152e6     E0 DF E0 E3 
152ea     E3 E8 E8 E8 
152ee     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
152f2     FC F7 F0 EA 
152f6     ED F6 00 0D 
152fa     14 1D 1E 1E 
152fe     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
15302     FC FC FF 00 
15306     FC FF FC FC 
1530a     FD FC 03 0A 
1530e     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
15312     F6 F7 01 0D 
15316     14 1E 24 2D 
1531a     43 54 59 5A 
1531e     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
15322     40 40 41 37 
15326     3A 2D 27 20 
1532a     1D 1E 21 30 
1532e     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
15332     34 2C 1A 13 
15336     1D 1E 1D 10 
1533a     F6 DA CA BD 
1533e     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
15342     B3 AD B3 B5 
15346     BF C6 C3 BC 
1534a     BC BD D3 E8 
1534e     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
15352     26 21 18 10 
15356     04 FC FD F9 
1535a     F0 E6 DF D6 
1535e     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
15362     13 14 0E 0A 
15366     0A 0D 14 1E 
1536a     26 30 2A 21 
1536e     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
15372     21 1A 16 13 
15376     16 18 10 04 
1537a     FF F3 EC E6 
1537e     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
15382     13 2D 43 54 
15386     66 68 63 5E 
1538a     63 66 71 64 
1538e     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
15392     2D 30 3B 41 
15396     40 41 44 41 
1539a     3D 31 21 09 
1539e     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
153a2     F3 F0 EA DF 
153a6     D3 CA C9 C3 
153aa     C5 C5 CA C6 
153ae     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
153b2     CC D9 E6 F7 
153b6     07 09 0A 07 
153ba     04 04 04 07 
153be     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
153c2     04 04 09 07 
153c6     F9 E8 DF E0 
153ca     EA F9 FC FC 
153ce     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
153d2     BD BC B3 A7 
153d6     A6 A0 9C 94 
153da     94 8C 8F 92 
153de     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
153e2     8C 80 80 80 
153e6     80 89 96 A9 
153ea     BD C5 DC F3 
153ee     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
153f2     2D 27 20 21 
153f6     1A 0E 07 F0 
153fa     D9 C6 B9 B9 
153fe     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
15402     09 1A 27 2D 
15406     2D 30 34 3D 
1540a     43 37 2C 1D 
1540e     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
15412     18 16 0E 09 
15416     FD ED EC F2 
1541a     F2 F3 F3 F6 
1541e     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
15422     3B 49 49 4B 
15426     4D 54 54 54 
1542a     59 54 4F 54 
1542e     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
15432     1E 14 13 00 
15436     F3 EC E2 DC 
1543a     DF DF E8 ED 
1543e     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
15442     F0 F9 F7 F2 
15446     EA E6 E3 E3 
1544a     E8 E2 D3 CA 
1544e     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
15452     B3 B7 C3 C5 
15456     D6 E3 FD 09 
1545a     16 1E 24 2D 
1545e     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
15462     F7 E3 DA DC 
15466     DF EA FC 0A 
1546a     0E 20 37 47 
1546e     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
15472     4D 49 40 34 
15476     2C 1A 0A FC 
1547a     F2 F2 F6 F9 
1547e     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
15482     03 09 0A 0D 
15486     13 21 2C 2D 
1548a     31 3B 43 4D 
1548e     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
15492     76 70 5E 4F 
15496     47 41 41 36 
1549a     26 13 0A 03 
1549e     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
154a2     ED E3 E2 E8 
154a6     EA F6 FC F6 
154aa     F3 F6 FC FC 
154ae     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
154b2     F9 EC D9 B9 
154b6     A2 96 86 92 
154ba     9C A9 BD D0 
154be     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
154c2     2C 3D 43 43 
154c6     41 40 40 3A 
154ca     2C 20 07 F2 
154ce     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
154d2     80 80 80 8C 
154d6     98 AC BC C0 
154da     C9 D3 D3 C9 
154de     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
154e2     9C 9D A7 B7 
154e6     C5 CF CC C6 
154ea     BC BF C0 C3 
154ee     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
154f2     CC D3 D9 D9 
154f6     DF E0 E3 ED 
154fa     F9 07 14 18 
154fe     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
15502     0D 09 FD F9 
15506     F9 F3 F9 03 
1550a     0A 0E 1A 27 
1550e     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
15512     31 21 18 1A 
15516     1D 20 24 26 
1551a     26 26 26 21 
1551e     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
15522     D4 D0 DA EC 
15526     FF 0A 18 2D 
1552a     3B 54 66 77 
1552e     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
15532     64 4B 24 01 
15536     E2 C9 B7 B5 
1553a     B7 C3 C9 D0 
1553e     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
15542     20 21 20 20 
15546     1E 13 0A 00 
1554a     FC EC E3 E0 
1554e     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
15552     CF C6 B9 B3 
15556     B5 B3 B7 BC 
1555a     C6 BF C9 D4 
1555e     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
15562     07 20 37 49 
15566     53 4F 47 47 
1556a     40 40 3A 31 
1556e     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
15572     01 00 FF 00 
15576     01 04 10 20 
1557a     2D 36 34 36 
1557e     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
15582     43 44 44 31 
15586     2A 2D 24 0D 
1558a     00 F9 F7 F7 
1558e     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
15592     1A 2C 00 00 
15596     FC FF 02 04 
1559a     05 07 07 09 
1559e     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
155a2     08 07 06 06 
155a6     05 04 04 04 
155aa     03 00 F4 EC 
155ae     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
155b2     00 BF FF 00 
155b6     CF FF E0 FF 
155ba     20 C0 FF 20 
155be     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
155c2     10 FF 50 00 
155c6     0F 20 07 18 
155ca     10 17 10 FF 
155ce     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
155d2     28 F0 FF 10 
155d6     F3 F1 FF 00 
155da     DF F8 F0 F3 
155de     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
155e2     DF 10 F7 00 
155e6     DF 1B 00 DF 
155ea     20 EB FC 1F 
155ee     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
155f2     08 EF 0F 14 
155f6     01 FF 10 03 
155fa     17 00 FF 30 
155fe     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
15602     00 FB 0F 00 
15606     EF F0 EF 00 
1560a     FF 00 FF 00 
1560e     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
15612     E8 F7 00 EB 
15616     FB 02 F0 E0 
1561a     FF 10 FF 30 
1561e     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
15622     FF 1B 08 0F 
15626     20 FF 10 FF 
1562a     10 FF 17 20 
1562e     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
15632     F3 0E 00 EB 
15636     D0 DF 06 00 
1563a     E0 FF 00 DF 
1563e     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
15642     F0 EF FF 20 
15646     E1 FF 10 FF 
1564a     10 FF 00 FF 
1564e     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
15652     0B 08 F7 09 
15656     2E 00 EF 20 
1565a     F3 FF 00 EB 
1565e     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
15662     0D 00 E7 FF 
15666     10 FF 10 F7 
1566a     07 20 00 EF 
1566e     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
15672     E5 EF F0 F7 
15676     10 00 FB F8 
1567a     F5 FD 06 00 
1567e     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
15682     08 FF 18 08 
15686     07 18 00 F7 
1568a     00 FF 09 12 
1568e     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
15692     FF 00 FF 08 
15696     F9 E4 E5 F7 
1569a     F4 E0 EF F0 
1569e     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
156a2     00 FF 1F 00 
156a6     EF 20 07 00 
156aa     FE F0 FF 00 
156ae     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
156b2     FF 00 FF 00 
156b6     F7 0B 10 F0 
156ba     FF 10 FB 00 
156be     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
156c2     0F 10 0F 04 
156c6     E8 FF 00 DF 
156ca     FC F0 DF E4 
156ce     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
156d2     F7 06 00 EF 
156d6     FE F4 FF 10 
156da     FF 07 08 07 
156de     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
156e2     0F E0 FF 20 
156e6     D7 1F 10 DF 
156ea     20 FF 03 1F 
156ee     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
156f2     00 EF FF F0 
156f6     EF 00 FF F1 
156fa     FF 00 FF 0F 
156fe     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
15702     00 EF 00 F4 
15706     EF FF F8 FF 
1570a     00 FE F7 FF 
1570e     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
15712     00 FF 10 FF 
15716     00 06 03 17 
1571a     00 F7 08 05 
1571e     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
15722     FF F0 F7 0F 
15726     00 F7 0B 10 
1572a     F0 F7 08 FF 
1572e     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
15732     08 F0 FF 00 
15736     F7 FF 08 E5 
1573a     FF 00 EF 0F 
1573e     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
15742     FF 00 12 00 
15746     FF 00 FF 10 
1574a     04 FF 02 0D 
1574e     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
15752     FF 08 FB 05 
15756     10 08 F8 FB 
1575a     FD 0B 00 EF 
1575e     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
15762     10 00 EF 0F 
15766     00 FF 00 FF 
1576a     07 00 EF 00 
1576e     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
15772     00 FF 00 FF 
15776     00 EF 17 10 
1577a     FF 10 F0 FF 
1577e     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
15782     04 08 F0 FF 
15786     00 FD F0 FF 
1578a     00 EF FF 00 
1578e     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
15792     00 FF 08 F8 
15796     EB FF 00 FB 
1579a     FB 0D 00 FF 
1579e     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
157a2     07 04 03 0A 
157a6     F0 FF 08 F7 
157aa     0F 08 FF 09 
157ae     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
157b2     00 0F 00 FF 
157b6     00 F0 FF 00 
157ba     F5 FF 00 0B 
157be     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
157c2     F0 FF 08 F1 
157c6     FF 00 FD FB 
157ca     00 0B 00 F5 
157ce     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
157d2     0A 04 F8 FF 
157d6     08 FB 07 00 
157da     FF 08 FF 0F 
157de     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
157e2     0F 00 FF 00 
157e6     FC F7 0C F2 
157ea     FF 04 04 FF 
157ee     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
157f2     FF 03 08 FC 
157f6     FA F2 FB FF 
157fa     F8 EF FF F0 
157fe     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
15802     00 FB 07 02 
15806     0F 00 0F 09 
1580a     16 00 17 08 
1580e     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
15812     09 00 EF 0F 
15816     00 EF 0B 00 
1581a     FF 00 00 F7 
1581e     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
15822     FE FF F8 FF 
15826     00 F7 FF 00 
1582a     FB F9 FC FF 
1582e     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
15832     FF 03 0C F2 
15836     FF 09 08 FB 
1583a     15 00 FF 00 
1583e     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
15842     FD 15 00 FF 
15846     00 04 03 0A 
1584a     F4 FF 00 FF 
1584e     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
15852     E5 FF 00 F7 
15856     FF 00 FF 00 
1585a     FF 0E 00 FF 
1585e     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
15862     14 00 FF 00 
15866     F5 0F 00 FF 
1586a     F3 FF FB 04 
1586e     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
15872     00 FE F7 06 
15876     00 FF 09 00 
1587a     07 00 ED FF 
1587e     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
15882     F6 FF 05 00 
15886     FF 00 FD 04 
1588a     F4 F9 F7 FD 
1588e     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
15892     F7 08 F0 FD 
15896     FF 00 F3 0B 
1589a     00 FF 07 00 
1589e     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
158a2     08 04 FF 08 
158a6     F9 0C F7 12 
158aa     F1 0F 00 FF 
158ae     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
158b2     FF 02 F8 FF 
158b6     00 FD FF 00 
158ba     FC FD 01 F8 
158be     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
158c2     F9 02 FA F7 
158c6     06 00 02 FB 
158ca     04 07 04 FB 
158ce     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
158d2     04 00 FF F8 
158d6     FF 07 00 FB 
158da     0E F2 FF 00 
158de     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
158e2     F4 FA FF 00 
158e6     FC FB 08 00 
158ea     FF 03 00 FB 
158ee     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
158f2     01 00 00 FB 
158f6     04 FD 04 00 
158fa     FB 04 FA FF 
158fe     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
15902     00 FF 03 08 
15906     01 0A 00 08 
1590a     01 00 F7 0B 
1590e     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
15912     FF F5 FB FD 
15916     F8 FE FB FF 
1591a     FA F9 FF 05 
1591e     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
15922     06 01 04 FF 
15926     08 F8 FF 00 
1592a     F6 FF FB 02 
1592e     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
15932     00 EF 0D 00 
15936     F6 FF 00 FB 
1593a     0A F3 08 03 
1593e     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
15942     FB FF 00 F3 
15946     FF FA F4 F7 
1594a     FF 00 F6 F9 
1594e     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
15952     FA FF 00 FD 
15956     08 F9 05 03 
1595a     04 00 FF 04 
1595e     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
15962     F3 0E FB 08 
15966     01 03 06 06 
1596a     02 FD 04 F9 
1596e     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
15972     FE 00 F8 FB 
15976     04 00 F8 FF 
1597a     04 00 F9 FF 
1597e     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
15982     02 00 F9 FF 
15986     01 00 FD 05 
1598a     04 04 04 00 
1598e     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
15992     02 FF 0C FB 
15996     08 03 04 00 
1599a     FD FE F9 FA 
1599e     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
159a2     F9 FF 00 F8 
159a6     FE FD 00 FE 
159aa     FB FF 00 FA 
159ae     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
159b2     00 FB 04 03 
159b6     08 01 04 FF 
159ba     04 FC FF 02 
159be     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
159c2     02 00 00 03 
159c6     04 00 FF 08 
159ca     00 FF 06 00 
159ce     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
159d2     FD FF 00 01 
159d6     00 FB 00 F5 
159da     FD F7 F6 FA 
159de     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
159e2     04 02 04 00 
159e6     FF 03 00 FF 
159ea     08 F7 FF 02 
159ee     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
159f2     00 F9 FF FE 
159f6     00 FF 01 FE 
159fa     03 00 FB 06 
159fe     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
15a02     FF 05 01 00 
15a06     FF 00 FB FF 
15a0a     FF FC FF 00 
15a0e     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
15a12     FD 00 FB 00 
15a16     FF 00 FB 03 
15a1a     03 01 06 04 
15a1e     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
15a22     FB 08 01 00 
15a26     FF 00 FB FF 
15a2a     00 F7 08 F7 
15a2e     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
15a32     FB F9 FB FE 
15a36     FA FD FF 01 
15a3a     00 FF 02 00 
15a3e     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
15a42     00 FF 04 FD 
15a46     05 08 00 00 
15a4a     02 00 FF 00 
15a4e     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
15a52     FD 05 04 FD 
15a56     09 08 01 02 
15a5a     03 00 FD FE 
15a5e     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
15a62     FF 00 F7 FE 
15a66     FC F5 FA FD 
15a6a     F8 FB FF FD 
15a6e     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
15a72     04 05 08 03 
15a76     07 04 01 04 
15a7a     02 00 FE FC 
15a7e     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
15a82     00 FF 00 FF 
15a86     04 00 FF 02 
15a8a     FF 02 FF 03 
15a8e     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
15a92     02 00 00 FF 
15a96     00 FE FC FD 
15a9a     FE FC FD FC 
15a9e     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
15aa2     FA FF 02 FD 
15aa6     FE 03 04 00 
15aaa     04 05 02 05 
15aae     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
15ab2     01 03 01 01 
15ab6     01 FF 00 FF 
15aba     02 FA FD 00 
15abe     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
15ac2     00 FE FF 04 
15ac6     02 FF 01 02 
15aca     00 FD FE FC 
15ace     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
15ad2     FE 00 00 FD 
15ad6     FF 00 01 00 
15ada     FF 02 00 FF 
15ade     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
15ae2     01 00 FF 00 
15ae6     03 00 FD FE 
15aea     FF FD FF 00 
15aee     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
15af2     FF 02 FD FE 
15af6     FE FE FE FD 
15afa     FC FC FF 00 
15afe     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
15b02     04 02 01 00 
15b06     FE FF FC FC 
15b0a     FD FF FD FE 
15b0e     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
15b12     01 00 00 FF 
15b16     03 01 FF 03 
15b1a     02 FF 03 02 
15b1e     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
15b22     00 00 FD 00 
15b26     FF FC FA FC 
15b2a     FC FB FE FD 
15b2e     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
15b32     FE FF 00 03 
15b36     02 01 03 02 
15b3a     01 00 01 00 
15b3e     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
15b42     00 00 FD FF 
15b46     00 FF 00 FF 
15b4a     02 02 02 02 
15b4e     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
15b52     00 FD FE FE 
15b56     FF 00 FF 02 
15b5a     01 01 00 FD 
15b5e     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
15b62     FB FD F8 FB 
15b66     FD FD FF 00 
15b6a     03 01 03 02 
15b6e     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
15b72     00 FF 04 01 
15b76     03 04 00 FF 
15b7a     00 FF 01 00 
15b7e     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
15b82     FD FE FF 01 
15b86     02 00 FE FE 
15b8a     FF FE FF 00 
15b8e     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
15b92     FF 01 FF FF 
15b96     00 FE FF 01 
15b9a     01 01 01 01 
15b9e     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
15ba2     04 05 06 02 
15ba6     03 02 00 00 
15baa     00 FF 00 FE 
15bae     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
15bb2     FF 00 FE FD 
15bb6     FE FC FA FB 
15bba     FC FC FD FD 
15bbe     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
15bc2     FE FF FF 01 
15bc6     01 02 02 02 
15bca     02 02 01 01 
15bce     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
15bd2     00 FF 00 FE 
15bd6     FF 00 FE FF 
15bda     FF FF FF FF 
15bde     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
15be2     03 03 02 02 
15be6     00 FF 00 FD 
15bea     FD FD FC FB 
15bee     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
15bf2     FC FD FE FF 
15bf6     00 00 02 03 
15bfa     01 03 00 FF 
15bfe     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
15c02     FE FE FE FE 
15c06     FD FE FF 00 
15c0a     FE FF 00 FF 
15c0e     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
15c12     03 03 02 02 
15c16     02 02 01 01 
15c1a     02 00 FF 00 
15c1e     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
15c22     FF FE FD FD 
15c26     FC FB FB FC 
15c2a     FD FF 00 FE 
15c2e     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
15c32     01 02 01 01 
15c36     01 01 02 02 
15c3a     02 03 02 01 
15c3e     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
15c42     00 00 FF FE 
15c46     FF 00 01 01 
15c4a     02 00 01 00 
15c4e     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
15c52     00 FE FE FE 
15c56     FE FD FE FD 
15c5a     FD FD FD FD 
15c5e     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
15c62     FE FF FF 01 
15c66     02 02 03 02 
15c6a     03 04 02 02 
15c6e     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
15c72     FE FE FE FF 
15c76     00 FF 00 00 
15c7a     FF 00 FD FD 
15c7e     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
15c82     FE FF FE FE 
15c86     FD FD FD FF 
15c8a     FE FF 00 FE 
15c8e     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
15c92     00 FF FE FE 
15c96     FD FE FF FF 
15c9a     01 01 01 02 
15c9e     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
15ca2     06 04 03 02 
15ca6     00 FF FF FF 
15caa     FC FA FA F9 
15cae     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
15cb2     FA FB FB FB 
15cb6     FC FC FD FE 
15cba     FF 01 01 01 
15cbe     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
15cc2     01 02 03 04 
15cc6     02 01 00 FF 
15cca     00 00 FF FF 
15cce     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
15cd2     FF 00 00 00 
15cd6     00 00 00 00 
15cda     00 FF 00 FF 
15cde     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
15ce2     FA FB FC FB 
15ce6     FC FC FD FD 
15cea     FE FF FF 01 
15cee     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
15cf2     FF 01 02 02 
15cf6     02 04 03 02 
15cfa     02 02 02 02 
15cfe     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
15d02     00 00 FE FE 
15d06     FE FE FE FD 
15d0a     FD FE FE FF 
15d0e     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
15d12     00 00 00 00 
15d16     00 00 00 00 
15d1a     00          | 	byte	$00[9]
15d1b     FF FE FC FC 
15d1f     FC FC FD FE 
15d23     FF FF 00 00 
15d27     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
15d2b     01 01 01 00 
15d2f     00 00 01 01 
15d33     01 01 00 00 
15d37     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
15d3b     00 FF FF FF 
15d3f     FE FE FE FF 
15d43     FF FF 01 00 
15d47     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
15d4b     02 03 03 02 
15d4f     01 01 01 01 
15d53     01 01 01 00 
15d57     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
15d5b     FF FF 00 00 
15d5f     01 03 05 06 
15d63     06 05 05 04 
15d67     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
15d6b     00 FE FE FD 
15d6f     FC FC FB FA 
15d73     FA FA FB FB 
15d77     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
15d7b     FE FF 01 01 
15d7f     01 02 02 01 
15d83     02 02 03 04 
15d87     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
15d8b     02 01 00 01 
15d8f     01 01 00 00 
15d93     00 FF FF FF 
15d97     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
15d9b     02 03 03 02 
15d9f     02 00 00 FF 
15da3     FF FF FF FF 
15da7     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
15dab     FD FD FD FC 
15daf     FD FE FE FF 
15db3     FE FE FF 01 
15db7     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
15dbb     04 04 04 02 
15dbf     02 02 02 01 
15dc3     02 00 00 FE 
15dc7     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
15dcb     FD FC FC FD 
15dcf     FD FD FD FF 
15dd3     00 00 01 02 
15dd7     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
15ddb     00 00 00 00 
15ddf     00          | 	byte	$00[5]
15de0     01 00 00 FF 
15de4     FE FE FE FD 
15de8     FE FF FF 00 
15dec     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
15df0     05 06 05 04 
15df4     04 04 02 02 
15df8     00 00 00 FF 
15dfc     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
15e00     FD FE FE FE 
15e04     FE FE FF FF 
15e08     FE FD FD FD 
15e0c     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
15e10     FF FF FF FF 
15e14     FF          | 	byte	$ff[5]
15e15     00 00 FF FF 
15e19     FF FE FE FE 
15e1d     FE FD FD FE 
15e21     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
15e25     01 02 02 02 
15e29     02 02 03 02 
15e2d     02 01 01 00 
15e31     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
15e35     FC FD FE FD 
15e39     FE FD FD FE 
15e3d     FE FE FF FE 
15e41     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
15e45     01 01 01 02 
15e49     03 04 03 02 
15e4d     02 01 FE 00 
15e51     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
15e55     01 0A 10 13 
15e59     16 0E 10 13 
15e5d     16 1D 1E 14 
15e61     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
15e65     04 14 13 1D 
15e69     1E 1D 1A 18 
15e6d     16 13 13 13 
15e71     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
15e75     E8 C5 8F 80 
15e79     80 80 80 80 
15e7d     80 80 92 A7 
15e81     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
15e85     EA FC 0A 18 
15e89     1D 13 FD E2 
15e8d     C6 BF BC BD 
15e91     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
15e95     AC AD B5 C6 
15e99     CA E3 F6 04 
15e9d     09 13 18 14 
15ea1     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
15ea5     F9 F6 F6 ED 
15ea9     E6 ED E6 EC 
15ead     ED F9 03 10 
15eb1     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
15eb5     40 43 41 47 
15eb9     53 5D 5D 59 
15ebd     3D 2A 18 09 
15ec1     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
15ec5     0A 0E 24 31 
15ec9     34 30 20 1D 
15ecd     14 1A 0E 0D 
15ed1     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
15ed5     20 30 36 3D 
15ed9     47 44 34 26 
15edd     07 F9 F2 F7 
15ee1     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
15ee5     1E 21 1E 14 
15ee9     18 18 18 16 
15eed     0E 0E FF F3 
15ef1     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
15ef5     B7 AD A9 A2 
15ef9     A3 A6 A7 A9 
15efd     B3 C0 CF E3 
15f01     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
15f05     FD 0A 14 1A 
15f09     1A 1A 1A 10 
15f0d     0D 04 FC F0 
15f11     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
15f15     DF E8 FD 0E 
15f19     21 3A 4D 68 
15f1d     76 7C 70 5A 
15f21     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
15f25     01 FC FD FC 
15f29     F7 07 03 07 
15f2d     00 F6 E3 D4 
15f31     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
15f35     D4 DA E3 EA 
15f39     F2 ED E8 E2 
15f3d     D6 CF CC B7 
15f41     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
15f45     CA DF F3 FD 
15f49     FD F3 F6 F6 
15f4d     F9 FF 03 03 
15f51     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
15f55     DF DC D9 DA 
15f59     E2 E3 EC F7 
15f5d     03 0D 20 30 
15f61     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
15f65     2A 18 07 FD 
15f69     F2 ED E8 F0 
15f6d     F6 01 07 10 
15f71     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
15f75     DF C5 B1 A0 
15f79     89 89 92 9A 
15f7d     AF C6 CF E8 
15f81     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
15f85     D6 D0 C6 BF 
15f89     C3 BD CA C9 
15f8d     CA CC C6 C0 
15f91     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
15f95     A7 B7 C0 CF 
15f99     DF ED 03 10 
15f9d     14 09 0A 03 
15fa1     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
15fa5     01 F0 EC E6 
15fa9     E2 E2 E6 EA 
15fad     F6 F7 03 13 
15fb1     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
15fb5     74 74 71 63 
15fb9     44 31 18 07 
15fbd     03 EC EC EC 
15fc1     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
15fc5     37 41 36 2A 
15fc9     18 00 F6 F3 
15fcd     F6 F9 FD 04 
15fd1     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
15fd5     40 44 43 31 
15fd9     27 24 21 24 
15fdd     21 26 2C 3A 
15fe1     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
15fe5     4D 36 20 01 
15fe9     E2 D0 C0 BD 
15fed     B9 C3 D0 D4 
15ff1     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
15ff5     BD BF C0 C5 
15ff9     C5 D0 D9 D3 
15ffd     E0 E3 E6 EC 
16001     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
16005     E6 ED F9 04 
16009     0E 07 07 FF 
1600d     F9 EC E0 D9 
16011     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
16015     00 14 30 4D 
16019     64 71 76 5E 
1601d     51 36 27 24 
16021     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
16025     14 10 13 0D 
16029     0D 09 00 F6 
1602d     E8 CA BC B5 
16031     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
16035     E8 F7 00 07 
16039     FF F9 ED D4 
1603d     C5 AF AD AF 
16041     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
16045     00 00 FD F6 
16049     F0 F2 EC E8 
1604d     E3 DC D9 D4 
16051     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
16055     D3 C9 C0 C3 
16059     CF E8 FC 13 
1605d     21 3A 3A 3D 
16061     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
16065     13 FC E0 CC 
16069     C9 CA D6 E8 
1606d     F2 04 09 00 
16071     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
16075     E6 F0 F6 F6 
16079     ED E3 E8 E6 
1607d     EC EC E3 D0 
16081     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
16085     9D AC A9 AD 
16089     B1 B1 B7 C5 
1608d     C5 BF B7 AC 
16091     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
16095     90 A3 BF DA 
16099     F3 FC FF 00 
1609d     09 10 18 24 
160a1     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
160a5     0E FF F9 F0 
160a9     F0 F2 E2 E2 
160ad     E3 F0 FF 1A 
160b1     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
160b5     43 49 49 44 
160b9     2D 20 07 FC 
160bd     F9 FC 0A 18 
160c1     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
160c5     09 00 ED E3 
160c9     E2 E8 EA FC 
160cd     01 14 20 27 
160d1     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
160d5     1E 13 0D 0E 
160d9     20 3B 49 63 
160dd     63 63 5A 59 
160e1     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
160e5     0A EA CF BD 
160e9     B5 AF B1 BC 
160ed     C0 C3 C0 C0 
160f1     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
160f5     CF C9 CA CF 
160f9     D9 D6 DF E0 
160fd     DF E0 E0 DC 
16101     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
16105     ED FD FC F3 
16109     F6 F2 F6 FD 
1610d     FD FF F0 E8 
16111     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
16115     09 1A 36 3A 
16119     3D 3A 31 31 
1611d     27 2C 2D 37 
16121     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
16125     2C 21 16 F9 
16129     E2 D0 CC C9 
1612d     CF DF E6 EC 
16131     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
16135     F0 FD 00 01 
16139     EC DC C9 BC 
1613d     BF BF D3 E0 
16141     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
16145     D9 D4 D0 DA 
16149     DC EA EC ED 
1614d     F0 ED DA D3 
16151     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
16155     BF C3 D6 E2 
16159     F6 F7 FC 03 
1615d     03 0A 16 20 
16161     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
16165     E2 D6 D4 D4 
16169     E2 EC FD 01 
1616d     FF FF FF FD 
16171     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
16175     21 27 1E 07 
16179     F2 DA CC CA 
1617d     C0 C0 BC A7 
16181     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
16185     90 9C 9D A6 
16189     B1 BF C9 BD 
1618d     AC 94 89 80 
16191     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
16195     B3 C6 CC D6 
16199     F0 F2 00 13 
1619d     24 31 37 40 
161a1     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
161a5     FC E3 DF D3 
161a9     D0 D0 DF EA 
161ad     01 14 26 3A 
161b1     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
161b5     31 36 2C 1D 
161b9     0A 09 04 09 
161bd     14 0E 09 FD 
161c1     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
161c5     E0 E3 F2 04 
161c9     16 20 31 37 
161cd     36 37 37 37 
161d1     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
161d5     26 2A 36 40 
161d9     4D 54 5A 57 
161dd     4B 44 49 43 
161e1     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
161e5     CC B3 A7 A6 
161e9     A7 A9 A9 AD 
161ed     B7 C6 D3 CA 
161f1     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
161f5     EA E6 E6 DA 
161f9     DA DA DA E0 
161fd     E2 DC D4 D4 
16201     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
16205     EC F0 F0 F9 
16209     01 01 03 FC 
1620d     ED E6 E8 E6 
16211     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
16215     27 2D 26 1E 
16219     21 1E 2A 34 
1621d     43 4B 54 4F 
16221     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
16225     E0 CF CC C9 
16229     C9 CA DC EA 
1622d     FF 14 26 2D 
16231     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
16235     21 07 F7 ED 
16239     D4 D3 CF CA 
1623d     CA C0 AF A6 
16241     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
16245     E0 F2 FD 09 
16249     07 F6 E3 D4 
1624d     BF BD BC BF 
16251     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
16255     C6 C9 CC D6 
16259     E3 EA F6 01 
1625d     10 1E 21 1E 
16261     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
16265     EA ED F6 F6 
16269     EA EA E8 EC 
1626d     F2 F7 FF 0A 
16271     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
16275     37 27 10 F9 
16279     E2 D9 C9 AC 
1627d     94 83 80 80 
16281     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
16285     98 92 98 A0 
16289     A0 96 90 92 
1628d     83 86 8A 98 
16291     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
16295     DA F0 FF 16 
16299     26 36 43 47 
1629d     49 40 27 0A 
162a1     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
162a5     D9 E3 E2 E8 
162a9     F3 01 0E 1D 
162ad     16 16 0E 13 
162b1     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
162b5     27 1E 18 07 
162b9     FC F9 EC E8 
162bd     CC CF C9 CF 
162c1     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
162c5     27 3A 4B 51 
162c9     53 49 47 34 
162cd     34 27 2C 2C 
162d1     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
162d5     26 30 40 54 
162d9     64 6A 71 6A 
162dd     5A 40 24 04 
162e1     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
162e5     B1 AF A6 A6 
162e9     A7 A6 A6 A9 
162ed     B5 BD CC DF 
162f1     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
162f5     E8 E0 E3 E6 
162f9     F2 F0 EA EC 
162fd     E2 E0 E2 E2 
16301     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
16305     E2 F2 F9 F9 
16309     FD FD FF 00 
1630d     01 0A 13 13 
16311     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
16315     13 1D 2C 3D 
16319     47 5A 59 4D 
1631d     37 20 0D F7 
16321     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
16325     E2 E3 E2 ED 
16329     FD 03 16 2A 
1632d     36 4B 57 6A 
16331     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
16335     14 EA D0 BC 
16339     AC 98 8F 8F 
1633d     9C AC BF D6 
16341     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
16345     FF FF F6 EA 
16349     DF D4 C5 C9 
1634d     C5 B7 B7 AF 
16351     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
16355     BF CF DF F2 
16359     FC 14 14 24 
1635d     27 27 1E 1A 
16361     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
16365     DF CF D0 D0 
16369     D6 E2 F6 03 
1636d     14 2C 41 4D 
16371     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
16375     18 FC D3 B1 
16379     94 80 80 80 
1637d     80 80 80 80 
16381     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
16385     89 98 9D A2 
16389     A2 A2 A3 AD 
1638d     AF B3 B9 C3 
16391     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
16395     10 1E 1D 20 
16399     26 1D 10 0A 
1639d     00 F7 F2 ED 
163a1     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
163a5     01 F7 F7 F0 
163a9     F3 F9 00 04 
163ad     07 13 13 1D 
163b1     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
163b5     ED DC D4 BF 
163b9     B9 B7 BC C9 
163bd     DF F3 00 1D 
163c1     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
163c5     60 63 53 43 
163c9     30 21 1D 18 
163cd     1D 1D 1E 20 
163d1     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
163d5     60 6C 6C 6A 
163d9     60 53 43 24 
163dd     09 ED DC CF 
163e1     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
163e5     90 94 96 A2 
163e9     B3 C5 D6 E2 
163ed     F0 F9 FD FD 
163f1     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
163f5     F9 F9 FC F0 
163f9     E2 CC BC B3 
163fd     B1 B7 C6 CF 
16401     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
16405     04 0E 18 18 
16409     10 04 09 FC 
1640d     F9 FC 04 0D 
16411     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
16415     31 30 27 20 
16419     14 10 04 01 
1641d     FD F3 F7 F7 
16421     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
16425     01 0D 1A 2D 
16429     4B 51 54 49 
1642d     41 3A 3B 3B 
16431     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
16435     0A F3 E2 D0 
16439     CA C3 C5 C5 
1643d     D3 D9 E3 E6 
16441     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
16445     E2 CC BD AD 
16449     A0 A6 A6 A3 
1644d     A6 A6 A6 A9 
16451     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
16455     FD 03 0D 1D 
16459     26 36 3B 2D 
1645d     1A 01 E6 C9 
16461     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
16465     DA EC 03 18 
16469     2D 3D 4F 49 
1646d     49 43 3A 36 
16471     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
16475     F7 DA B5 80 
16479     80 80 80 80 
1647d     80 80 80 80 
16481     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
16485     AF B7 B7 B9 
16489     B3 B5 B7 CA 
1648d     D9 E8 F3 F3 
16491     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
16495     09 04 0D 0A 
16499     0D 0E 04 09 
1649d     09 0A 03 03 
164a1     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
164a5     D4 E6 F6 01 
164a9     09 FC F3 F0 
164ad     F6 F9 00 FF 
164b1     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
164b5     B9 BF C5 DA 
164b9     E8 FF 18 2D 
164bd     41 57 57 57 
164c1     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
164c5     1A 10 0E 10 
164c9     14 21 21 20 
164cd     1E 1E 26 3A 
164d1     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
164d5     44 49 4F 5E 
164d9     6A 68 4B 1D 
164dd     F0 B3 9A 89 
164e1     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
164e5     AD C5 DA F2 
164e9     F2 F7 FD 00 
164ed     0E 18 1D 16 
164f1     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
164f5     D6 BD AF A3 
164f9     A7 B3 C3 DA 
164fd     E6 E3 DF EC 
16501     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
16505     16 0D FF E8 
16509     E3 EC F3 07 
1650d     0E 0E 13 16 
16511     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
16515     0E 0E 13 18 
16519     21 24 21 20 
1651d     20 20 21 21 
16521     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
16525     18 1A 1E 14 
16529     09 10 18 2D 
1652d     41 49 44 36 
16531     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
16535     0A 0D 1A 27 
16539     27 26 1E 10 
1653d     00 F6 E6 D0 
16541     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
16545     A7 A3 A0 A2 
16549     A2 A2 A6 A6 
1654d     A7 AF B7 D4 
16551     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
16555     09 1A 1E 20 
16559     1D 0A F6 E2 
1655d     D3 D4 DC DF 
16561     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
16565     1D 2D 2A 30 
16569     27 2C 27 26 
1656d     26 16 14 0E 
16571     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
16575     C3 A9 92 80 
16579     80 80 80 80 
1657d     80 80 80 8F 
16581     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
16585     C9 B9 B9 B3 
16589     B7 B5 B5 BD 
1658d     C5 D3 E2 F6 
16591     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
16595     10 14 21 21 
16599     24 1A 18 0A 
1659d     04 F6 E8 DA 
165a1     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
165a5     D9 D3 CF C3 
165a9     C3 CF DA EA 
165ad     ED F0 F2 DC 
165b1     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
165b5     F6 01 14 21 
165b9     30 36 36 2D 
165bd     26 20 1E 20 
165c1     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
165c5     3B 36 2D 26 
165c9     21 16 0E 0D 
165cd     13 18 20 21 
165d1     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
165d5     47 4F 53 51 
165d9     49 2C 10 00 
165dd     E6 D0 BF B1 
165e1     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
165e5     E8 F0 F7 04 
165e9     07 14 18 0D 
165ed     09 F7 ED E0 
165f1     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
165f5     CA CC D6 DC 
165f9     E3 E3 E3 E3 
165fd     DC E3 ED FC 
16601     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
16605     F3 F0 F9 F3 
16609     F6 F3 F3 F3 
1660d     F6 F6 F7 FC 
16611     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
16615     43 44 4D 54 
16619     54 51 4B 3D 
1661d     2D 16 03 ED 
16621     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
16625     F3 F9 04 14 
16629     27 3B 40 40 
1662d     41 2C 21 18 
16631     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
16635     27 27 2C 30 
16639     34 2C 2D 21 
1663d     18 07 F7 E2 
16641     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
16645     BD BF C0 BC 
16649     B7 AF B5 B9 
1664d     C0 C9 C6 CA 
16651     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
16655     F0 03 0D 0A 
16659     0D 0D 10 14 
1665d     10 09 01 F9 
16661     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
16665     F7 00 FF 0E 
16669     10 16 18 0E 
1666d     0E 03 FF F3 
16671     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
16675     C0 BC C6 CA 
16679     C0 B3 9C 8F 
1667d     8A 96 9C B3 
16681     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
16685     9C A2 AD B5 
16689     BF C0 D3 D9 
1668d     E8 EC FD 03 
16691     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
16695     21 21 24 26 
16699     20 13 07 FD 
1669d     ED D0 BC A9 
166a1     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
166a5     9C 9A A7 B7 
166a9     C6 E3 F0 F3 
166ad     F2 F2 FD 01 
166b1     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
166b5     09 07 07 04 
166b9     09 0E 16 20 
166bd     2D 34 43 49 
166c1     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
166c5     27 20 14 0A 
166c9     01 FC F9 F9 
166cd     F9 00 07 07 
166d1     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
166d5     41 49 3B 3A 
166d9     3B 3A 40 44 
166dd     44 37 20 09 
166e1     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
166e5     D9 DF DF E6 
166e9     E3 EC EC ED 
166ed     ED F6 F6 FC 
166f1     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
166f5     ED E3 DA D4 
166f9     D0 CC CA CA 
166fd     D6 E6 EC F6 
16701     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
16705     E3 ED F2 F6 
16709     F6 EC F0 F2 
1670d     FF 10 21 34 
16711     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
16715     60 60 5A 51 
16719     43 34 24 1D 
1671d     04 F7 E6 DC 
16721     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
16725     F3 00 0D 18 
16729     1A 21 1A 16 
1672d     10 14 20 2A 
16731     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
16735     20 1E 1E 20 
16739     2A 2C 30 37 
1673d     37 3A 36 2C 
16741     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
16745     CA C3 B7 AC 
16749     9A 92 8C 8A 
1674d     92 A0 AF BD 
16751     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
16755     18 1E 21 24 
16759     30 30 26 18 
1675d     04 F3 E0 D6 
16761     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
16765     E3 EA EA ED 
16769     F6 F6 FD FD 
1676d     FD FF 01 03 
16771     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
16775     E8 E6 E2 E3 
16779     E2 DF D9 CA 
1677d     C0 B9 A9 96 
16781     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
16785     AD B9 BF C6 
16789     C9 D6 D6 E8 
1678d     F0 F0 FC 00 
16791     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
16795     1A 1D 18 0E 
16799     FD F6 E3 D6 
1679d     BF AC 9D 8F 
167a1     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
167a5     B1 B9 C9 DF 
167a9     E8 EA E3 E6 
167ad     E8 E8 F0 F9 
167b1     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
167b5     14 16 1A 1D 
167b9     20 21 27 34 
167bd     43 40 43 36 
167c1     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
167c5     09 01 F9 ED 
167c9     E2 DF D0 CF 
167cd     DA E3 F7 09 
167d1     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
167d5     5A 5A 5E 5D 
167d9     53 54 51 49 
167dd     3B 3A 26 1A 
167e1     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
167e5     DC D6 DC E3 
167e9     EC EA EA F2 
167ed     F0 FC 03 07 
167f1     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
167f5     D4 D0 CA CA 
167f9     CC CC D4 E2 
167fd     E3 D4 CF C9 
16801     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
16805     E8 FC 03 13 
16809     1E 21 2A 26 
1680d     30 2D 30 36 
16811     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
16815     43 40 3A 36 
16819     36 2A 1D 04 
1681d     F0 E2 CC C9 
16821     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
16825     F7 FC 0A 0E 
16829     0D 0E 0D 04 
1682d     09 0A 0A 0A 
16831     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
16835     3B 41 44 44 
16839     49 4B 4D 51 
1683d     4F 41 36 2A 
16841     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
16845     C9 B1 9D 98 
16849     8C 8F 98 A7 
1684d     B7 C3 D3 DA 
16851     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
16855     10 07 00 F2 
16859     F2 EC F3 F7 
1685d     F9 F9 F3 F0 
16861     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
16865     C9 CF E0 E6 
16869     F6 00 04 0A 
1686d     14 14 16 0A 
16871     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
16875     D4 D9 DA E6 
16879     EC F6 03 0D 
1687d     04 F7 D4 B1 
16881     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
16885     90 AD C6 E0 
16889     E6 ED ED F2 
1688d     F6 FD 03 09 
16891     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
16895     EC DF D4 D3 
16899     D6 D3 CC C3 
1689d     BC AF AF B5 
168a1     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
168a5     C9 CA CF D0 
168a9     CA CC C9 C9 
168ad     CF DA F3 01 
168b1     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
168b5     1D 14 13 13 
168b9     13 1E 1D 18 
168bd     14 0A 0D 04 
168c1     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
168c5     00 E3 CF BD 
168c9     BC C9 DC FF 
168cd     18 31 4B 66 
168d1     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
168d5     31 18 0E 09 
168d9     10 1D 2D 40 
168dd     43 44 4F 51 
168e1     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
168e5     01 E6 D3 C5 
168e9     C5 CF DC E8 
168ed     EC F6 F3 EA 
168f1     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
168f5     DC E6 EC EA 
168f9     E0 E0 DF D6 
168fd     D0 D0 C6 C6 
16901     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
16905     04 16 18 1D 
16909     1E 21 24 27 
1690d     2D 30 37 3B 
16911     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
16915     34 2C 1A 0A 
16919     01 F0 E0 D0 
1691d     CC D4 E0 F2 
16921     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
16925     16 16 13 13 
16929     00 ED DF D4 
1692d     DC F2 0A 2A 
16931     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
16935     6C 6A 5A 4F 
16939     37 2C 1D 14 
1693d     0D 0E 0A 0D 
16941     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
16945     F7 DF C0 B5 
16949     A7 A9 AF BF 
1694d     CC DC ED F2 
16951     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
16955     B3 B7 BF D6 
16959     ED FF 09 07 
1695d     00 F9 F3 F6 
16961     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
16965     F0 F3 F6 F6 
16969     F6 F2 F2 F2 
1696d     ED F2 F6 ED 
16971     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
16975     FF 0E 1A 24 
16979     30 24 14 01 
1697d     E3 CA A6 90 
16981     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
16985     B1 BF CC D9 
16989     EA F7 00 04 
1698d     0D 09 F3 E3 
16991     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
16995     BF CA D9 DF 
16999     E2 DF CC C3 
1699d     BC C0 C6 D9 
169a1     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
169a5     DA D4 C6 BC 
169a9     B5 B9 CA DF 
169ad     EC 00 03 01 
169b1     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
169b5     13 09 0A 03 
169b9     FD F7 F6 F9 
169bd     FC FF 04 0A 
169c1     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
169c5     D6 D6 DF F2 
169c9     0D 27 44 5A 
169cd     66 59 4D 34 
169d1     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
169d5     FC 04 16 31 
169d9     40 49 57 5E 
169dd     74 77 77 68 
169e1     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
169e5     EC D3 C3 AC 
169e9     AD B3 BD CC 
169ed     DA E6 EA EA 
169f1     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
169f5     F0 F6 F9 ED 
169f9     EC E6 E8 E2 
169fd     D9 DA D6 D9 
16a01     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
16a05     0D 14 26 2A 
16a09     34 37 3A 3D 
16a0d     3D 3D 36 27 
16a11     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
16a15     DC DA DC DF 
16a19     E0 D6 DF EA 
16a1d     FC 07 1A 2A 
16a21     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
16a25     10 FD E2 DA 
16a29     D9 DA F6 0A 
16a2d     21 3B 47 49 
16a31     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
16a35     3A 34 34 2D 
16a39     2A 21 16 0D 
16a3d     0A 0A 0E 1D 
16a41     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
16a45     04 F3 DF CC 
16a49     C6 C9 D4 CF 
16a4d     C6 BD BF AF 
16a51     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
16a55     DC F2 FC FF 
16a59     FD FD FD 03 
16a5d     0D 0A 0A 0A 
16a61     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
16a65     D3 C3 C0 BC 
16a69     C9 D9 E8 F9 
16a6d     F9 FC FC F9 
16a71     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
16a75     30 2C 18 00 
16a79     F0 D9 CC C6 
16a7d     C5 C5 CA C5 
16a81     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
16a85     D6 EA FC 07 
16a89     03 FF F7 EC 
16a8d     DA CA B7 A9 
16a91     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
16a95     B7 C6 C3 C0 
16a99     C6 CA D9 F0 
16a9d     F9 00 07 04 
16aa1     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
16aa5     CA CF CF CF 
16aa9     DA DA E2 E2 
16aad     DF E0 DF DF 
16ab1     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
16ab5     F6 F9 03 04 
16ab9     09 0A FF F3 
16abd     F0 F0 F0 F6 
16ac1     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
16ac5     0E 1A 26 37 
16ac9     3B 3B 27 1E 
16acd     1A 09 09 0A 
16ad1     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
16ad5     31 40 49 59 
16ad9     60 6E 71 6A 
16add     59 47 37 2A 
16ae1     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
16ae5     CA B7 B1 A9 
16ae9     BD D9 EC FD 
16aed     FD FD FD 00 
16af1     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
16af5     F6 EA DF D9 
16af9     DC DC DA DC 
16afd     DF EA F9 FF 
16b01     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
16b05     2D 30 34 36 
16b09     3A 37 34 2A 
16b0d     13 FD EA CA 
16b11     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
16b15     B9 CA D6 E6 
16b19     00 14 24 40 
16b1d     57 5D 44 2D 
16b21     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
16b25     FC FD FD 01 
16b29     09 10 18 1E 
16b2d     1D 21 27 2C 
16b31     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
16b35     3A 3A 30 21 
16b39     16 0E 0A 0D 
16b3d     0E 20 1E 20 
16b41     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
16b45     0E 04 FD EC 
16b49     C9 B9 A2 A3 
16b4d     A3 B5 C9 DC 
16b51     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
16b55     F3 F7 F7 FD 
16b59     03 FF 00 FC 
16b5d     FC F9 F2 ED 
16b61     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
16b65     C3 C9 D0 E0 
16b69     E6 F0 F6 F6 
16b6d     00 0A 18 27 
16b71     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
16b75     E6 DA D3 CF 
16b79     CF D0 D3 E3 
16b7d     F0 FC FD FD 
16b81     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
16b85     F7 F9 F7 ED 
16b89     E2 D0 BD AF 
16b8d     98 90 8C 89 
16b91     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
16b95     CA D9 E6 F2 
16b99     FD 04 10 0D 
16b9d     F6 E6 D4 CC 
16ba1     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
16ba5     D6 D0 CA BD 
16ba9     BD B1 AD AF 
16bad     B3 C0 CC E3 
16bb1     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
16bb5     14 14 0D 04 
16bb9     00 F6 F6 F3 
16bbd     F6 F7 F9 00 
16bc1     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
16bc5     37 3B 31 24 
16bc9     13 07 0D 10 
16bcd     1A 21 21 24 
16bd1     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
16bd5     49 4B 49 41 
16bd9     36 30 26 13 
16bdd     0A 01 FC FC 
16be1     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
16be5     F3 F9 ED F3 
16be9     FC FF 03 03 
16bed     04 07 07 00 
16bf1     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
16bf5     D9 E6 F0 FC 
16bf9     01 01 07 09 
16bfd     0D 13 18 18 
16c01     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
16c05     20 20 18 0D 
16c09     FD ED D6 C3 
16c0d     AD A3 9C A3 
16c11     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
16c15     13 24 3B 4D 
16c19     59 59 51 43 
16c1d     31 21 1D 18 
16c21     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
16c25     FD FF 00 07 
16c29     16 18 1E 20 
16c2d     2A 2A 2D 30 
16c31     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
16c35     18 10 04 04 
16c39     04 07 0A 13 
16c3d     14 16 0E 07 
16c41     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
16c45     10 0E 01 F9 
16c49     FF FF FD FD 
16c4d     FF FF F9 F3 
16c51     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
16c55     E0 D9 DA DA 
16c59     E3 EC F3 F3 
16c5d     F6 ED E8 E0 
16c61     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
16c65     DA E3 ED FD 
16c69     FD FF 03 04 
16c6d     0D 00 F6 E6 
16c71     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
16c75     D6 E8 F2 FF 
16c79     07 14 24 30 
16c7d     3A 31 24 10 
16c81     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
16c85     D0 B7 A9 9A 
16c89     90 84 80 89 
16c8d     92 A2 AD C3 
16c91     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
16c95     F3 F3 FC EA 
16c99     E6 E0 D3 C9 
16c9d     CC CC D3 D4 
16ca1     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
16ca5     94 9A A0 AC 
16ca9     B3 C5 D3 E6 
16cad     FC 03 16 14 
16cb1     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
16cb5     FD ED DF D6 
16cb9     D6 DC ED FC 
16cbd     0D 16 1D 2A 
16cc1     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
16cc5     16 0A 0E 16 
16cc9     26 2C 37 37 
16ccd     2A 27 24 27 
16cd1     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
16cd5     03 00 F9 FF 
16cd9     01 09 0E 14 
16cdd     1D 21 27 27 
16ce1     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
16ce5     20 1D 14 0D 
16ce9     01 F9 F2 DF 
16ced     D9 D4 D4 DF 
16cf1     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
16cf5     1A 16 0D 00 
16cf9     FF 00 07 09 
16cfd     0D 0D 07 04 
16d01     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
16d05     E3 CF C0 B1 
16d09     A7 A2 A9 B1 
16d0d     C0 E0 04 24 
16d11     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
16d15     4F 40 40 3B 
16d19     34 24 1D 14 
16d1d     16 1A 18 13 
16d21     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
16d25     14 1D 1E 1E 
16d29     1E 1D 1D 21 
16d2d     24 24 24 1E 
16d31     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
16d35     F7 ED E8 E3 
16d39     EA F6 FC 01 
16d3d     03 09 09 07 
16d41     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
16d45     3D 54 64 70 
16d49     6C 59 37 16 
16d4d     F7 E6 DC D4 
16d51     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
16d55     D9 E6 F3 F9 
16d59     FC F2 EC E3 
16d5d     D6 D3 CF D0 
16d61     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
16d65     FD 00 FD F9 
16d69     EA D3 C5 BD 
16d6d     C0 C3 CC DC 
16d71     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
16d75     26 27 27 31 
16d79     36 40 40 3A 
16d7d     26 03 E6 CA 
16d81     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
16d85     98 9A A0 A6 
16d89     B1 B5 B9 C0 
16d8d     D0 E0 E3 EC 
16d91     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
16d95     CA CC CC D0 
16d99     C9 CC CC C5 
16d9d     C0 B9 A7 9A 
16da1     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
16da5     BD CF D3 E3 
16da9     F0 FF 0D 16 
16dad     16 16 09 FF 
16db1     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
16db5     C6 CF DA F3 
16db9     09 1A 24 2A 
16dbd     18 07 00 FF 
16dc1     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
16dc5     2A 3A 44 44 
16dc9     3D 31 20 16 
16dcd     0D FC ED E8 
16dd1     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
16dd5     FD 14 26 31 
16dd9     31 3A 41 47 
16ddd     4D 47 43 43 
16de1     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
16de5     14 03 E8 D6 
16de9     D0 DC ED FF 
16ded     0E 1E 20 26 
16df1     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
16df5     01 F3 F2 F0 
16df9     F0 ED EC E0 
16dfd     D9 D0 C6 C0 
16e01     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
16e05     BC BF CF D4 
16e09     E6 F7 04 16 
16e0d     30 40 4B 4B 
16e11     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
16e15     1E 21 2C 2C 
16e19     2C 2D 2D 36 
16e1d     31 26 20 13 
16e21     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
16e25     0A 09 09 0A 
16e29     0D 14 1D 1D 
16e2d     1D 18 0E 03 
16e31     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
16e35     D0 D4 E6 F9 
16e39     03 0E 0A 03 
16e3d     F9 04 1E 3D 
16e41     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
16e45     7F 7F 77 68 
16e49     57 41 26 0D 
16e4d     FC E8 DA D0 
16e51     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
16e55     E3 EC EC EC 
16e59     EA EA E3 D6 
16e5d     D6 CF D0 D4 
16e61     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
16e65     C9 A9 A6 A9 
16e69     B7 D9 F2 09 
16e6d     1D 34 36 3D 
16e71     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
16e75     27 18 16 0E 
16e79     03 00 FC ED 
16e7d     E3 DA CC C5 
16e81     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
16e85     CA C6 C0 BD 
16e89     C3 C3 C6 CA 
16e8d     D4 D0 C6 B1 
16e91     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
16e95     CA CA C6 C0 
16e99     BF BC B9 B5 
16e9d     AC A6 A9 AD 
16ea1     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
16ea5     DC DF E6 EA 
16ea9     ED F9 FF 00 
16ead     03 04 03 F6 
16eb1     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
16eb5     F0 FC 03 04 
16eb9     FF ED DA DC 
16ebd     E8 FD 13 27 
16ec1     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
16ec5     4F 41 30 13 
16ec9     FC E0 CF CC 
16ecd     CA CC D6 DC 
16ed1     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
16ed5     2A 36 49 54 
16ed9     5A 54 47 3D 
16edd     3A 34 36 40 
16ee1     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
16ee5     04 FC F7 03 
16ee9     16 26 31 36 
16eed     36 37 31 24 
16ef1     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
16ef5     DA CF CC CC 
16ef9     BC A9 9C 90 
16efd     90 94 A7 BC 
16f01     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
16f05     0E 13 10 10 
16f09     0E 13 18 20 
16f0d     1D 04 FD FF 
16f11     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
16f15     51 53 54 57 
16f19     57 44 31 1D 
16f1d     04 F7 F0 ED 
16f21     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
16f25     F3 F6 F7 00 
16f29     04 10 14 10 
16f2d     10 03 F3 E3 
16f31     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
16f35     F9 0A 0E 03 
16f39     F9 F9 FF 16 
16f3d     36 4F 64 76 
16f41     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
16f45     7F 7C 66 4D 
16f49     3A 2C 24 24 
16f4d     13 00 F0 E0 
16f51     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
16f55     D9 E0 ED F3 
16f59     ED EA E0 D4 
16f5d     C9 B5 AF B5 
16f61     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
16f65     B3 D6 F9 1E 
16f69     36 43 47 4D 
16f6d     4B 49 3B 2D 
16f71     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
16f75     FC FD FF FF 
16f79     F6 F2 F3 F3 
16f7d     F9 01 01 FF 
16f81     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
16f85     CF C9 B7 AC 
16f89     A6 A7 AC 9D 
16f8d     94 8C 8A 94 
16f91     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
16f95     C9 D0 DA DF 
16f99     E3 E3 CF BF 
16f9d     AF A0 9A A2 
16fa1     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
16fa5     C3 D3 DC ED 
16fa9     FC 0A 18 20 
16fad     1D 16 09 FC 
16fb1     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
16fb5     D4 D4 CF CC 
16fb9     C9 DC F0 07 
16fbd     1E 36 47 43 
16fc1     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
16fc5     13 F9 DF D3 
16fc9     CC D4 E2 F0 
16fcd     F0 F0 F2 F2 
16fd1     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
16fd5     34 47 4F 57 
16fd9     5D 57 4D 41 
16fdd     40 40 41 43 
16fe1     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
16fe5     31 3A 3B 3D 
16fe9     40 37 37 30 
16fed     24 16 04 EC 
16ff1     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
16ff5     AF B1 A2 9D 
16ff9     98 9A A6 B9 
16ffd     D3 F7 04 16 
17001     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
17005     04 F9 F2 F0 
17009     F6 FC F7 F9 
1700d     F7 FC 0A 27 
17011     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
17015     60 57 47 36 
17019     26 10 FF EA 
1701d     DF DC D6 DC 
17021     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
17025     E3 E6 ED 00 
17029     00 F4 E0 C7 
1702d     F0 DF 5F 40 
17031     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
17035     1F 7F 00 DF 
17039     7F 20 E0 BF 
1703d     3F 40 0B 10 
17041     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
17045     E2 DA D5 D3 
17049     DF F9 E8 C8 
1704d     AF CA CB D5 
17051     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
17055     21 20 19 33 
17059     4B 7F 7F 60 
1705d     2A 3F 40 4F 
17061     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
17065     A0 DF 00 EA 
17069     D0 AF FF 00 
1706d     80 83 DF D8 
17071     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
17075     EF 1A 1C 08 
17079     0B 10 03 1B 
1707d     3F 70 40 28 
17081     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
17085     47 34 00 CD 
17089     EF 2A 08 C0 
1708d     97 BF C0 CF 
17091     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
17095     F8 C5 DF 17 
17099     04 07 F0 D7 
1709d     FF 0F 5F 7F 
170a1     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
170a5     F0 FF 6F 60 
170a9     E0 FF 40 1F 
170ad     3C 20 18 1A 
170b1     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
170b5     00 E0 B4 C5 
170b9     B0 AF EB D8 
170bd     E7 FC FA 07 
170c1     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
170c5     3C 43 54 40 
170c9     10 0F 00 E7 
170cd     13 00 FF 00 
170d1     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
170d5     14 00 E8 B0 
170d9     A9 B7 DB F7 
170dd     16 00 E0 C0 
170e1     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
170e5     29 35 20 E0 
170e9     D7 FF 4F 7C 
170ed     5A 60 40 00 
170f1     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
170f5     37 2F 28 00 
170f9     F0 D0 DF 0C 
170fd     E0 C4 CF E0 
17101     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
17105     E0 D7 FF 3F 
17109     38 4B 40 2D 
1710d     34 10 0F 04 
17111     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
17115     E0 80 81 BF 
17119     A0 BF 37 00 
1711d     95 BF EF 28 
17121     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
17125     2B 20 FB 02 
17129     E4 EB 1B 08 
1712d     FF 24 19 19 
17131     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
17135     F0 2F 60 A0 
17139     FF 20 A0 B7 
1713d     DF E8 A4 AF 
17141     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
17145     18 02 1F 20 
17149     00 EF 35 10 
1714d     09 E8 B4 B7 
17151     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
17155     40 DB 1F 30 
17159     3F 7D 70 20 
1715d     0F 20 F7 2F 
17161     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
17165     00 B7 FE D0 
17169     EF 0F 04 1F 
1716d     20 D3 F3 E0 
17171     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
17175     02 FF 3B 20 
17179     E0 C8 CF 17 
1717d     14 10 08 11 
17181     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
17185     C7 D8 A7 FF 
17189     E0 DF 20 E0 
1718d     EF 40 E0 BF 
17191     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
17195     1F 14 1F 7F 
17199     10 FF 7F 60 
1719d     2F 60 2B 47 
171a1     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
171a5     F0 E0 BC AE 
171a9     C7 DF E8 C4 
171ad     A0 9F F7 4F 
171b1     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
171b5     FF 7F 20 12 
171b9     D0 EF 30 E0 
171bd     BF 3F 20 80 
171c1     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
171c5     CC FF 10 C0 
171c9     CF 14 F0 CC 
171cd     C2 CF C0 9B 
171d1     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
171d5     20 D4 CB FF 
171d9     60 00 3F 60 
171dd     01 00 0D 00 
171e1     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
171e5     1F 20 0F 3F 
171e9     20 FF 10 BB 
171ed     EF 17 20 E8 
171f1     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
171f5     E8 E2 E7 EC 
171f9     C8 EF 1F 6F 
171fd     50 E0 C7 17 
17201     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
17205     1F 30 E4 FF 
17209     5F 50 00 2F 
1720d     7F 40 06 00 
17211     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
17215     3F 00 9F FF 
17219     08 0A F0 B7 
1721d     1F 00 FF 6E 
17221     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
17225     2C E0 BF 14 
17229     F0 F7 10 90 
1722d     9F 3F 40 10 
17231     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
17235     2A 2F 08 DE 
17239     D4 DF 17 3F 
1723d     00 BF FF 00 
17241     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
17245     FF 10 F3 E0 
17249     BF 00 80 BF 
1724d     18 D8 CC B4 
17251     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
17255     20 9F FF E0 
17259     BF FF 30 D4 
1725d     FF 50 00 EF 
17261     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
17265     08 F0 EB 00 
17269     C9 2F 20 9F 
1726d     3F 20 C7 FA 
17271     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
17275     B9 FF 58 00 
17279     B7 F7 33 3B 
1727d     54 10 EA EF 
17281     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
17285     20 0F 4F 08 
17289     FF 30 17 3F 
1728d     20 1F 40 E0 
17291     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
17295     00 B0 8B BF 
17299     10 00 E9 E0 
1729d     C4 D7 FF 54 
172a1     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
172a5     10 00 FF 2F 
172a9     6F 68 20 FF 
172ad     4F 60 13 3E 
172b1     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
172b5     F6 1B 28 D0 
172b9     B7 E4 C7 F7 
172bd     D0 BF F9 E2 
172c1     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
172c5     FF 24 20 27 
172c9     6C 20 1D 20 
172cd     10 F3 1F 28 
172d1     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
172d5     EB 1F 40 E0 
172d9     EF 14 D0 A0 
172dd     D7 00 C0 D7 
172e1     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
172e5     C0 DF 70 00 
172e9     B6 DF EF 1F 
172ed     00 FF 30 FF 
172f1     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
172f5     FF 3F 40 D0 
172f9     FF FB 2D 00 
172fd     CF 0D E8 C0 
17301     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
17305     00 FF E0 D7 
17309     FF 28 3F 20 
1730d     D5 FF 1F 10 
17311     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
17315     E0 BF 37 E0 
17319     EF F2 F9 0F 
1731d     14 EB 13 00 
17321     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
17325     EF 40 00 A0 
17329     BF DA C2 DF 
1732d     0F 10 FF 37 
17331     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
17335     35 48 10 DF 
17339     F7 FC E8 EF 
1733d     2F 20 E8 C0 
17341     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
17345     F7 E8 B8 D7 
17349     D0 C0 CF 13 
1734d     00 D1 FF F0 
17351     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
17355     30 04 FF 27 
17359     2F 04 0F 48 
1735d     25 40 00 B3 
17361     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
17365     1F 30 00 9F 
17369     1F 20 F8 FB 
1736d     0B E0 B7 D7 
17371     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
17375     20 E3 1F 00 
17379     C1 1F 74 20 
1737d     F0 FF 00 1F 
17381     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
17385     AF FF F7 08 
17389     D3 FF 00 CF 
1738d     FF 1F 1C 08 
17391     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
17395     14 00 FF 44 
17399     F0 1F 20 EF 
1739d     4D 10 E2 C0 
173a1     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
173a5     10 E4 C8 C0 
173a9     BB CF CB DB 
173ad     F7 0B 00 EF 
173b1     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
173b5     1B 57 10 FF 
173b9     20 1F 20 27 
173bd     30 1F 30 00 
173c1     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
173c5     34 E0 D7 0F 
173c9     08 1B 10 17 
173cd     20 3F 40 F0 
173d1     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
173d5     C7 FF 08 00 
173d9     FF 30 00 E9 
173dd     D4 FF 40 1B 
173e1     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
173e5     DF 3F 00 08 
173e9     E8 EF E8 E7 
173ed     08 D0 CF E2 
173f1     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
173f5     10 D0 C2 A8 
173f9     AF F7 0B 10 
173fd     E0 B0 AF 1F 
17401     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
17405     34 00 FF 3F 
17409     28 24 00 FF 
1740d     5F 40 DF F4 
17411     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
17415     10 C8 DF 0F 
17419     00 ED F0 FF 
1741d     00 FF E0 DF 
17421     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
17425     2F 44 20 CB 
17429     FF 14 1F 50 
1742d     00 DF F4 FF 
17431     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
17435     34 E0 CF F4 
17439     DC FF 00 EB 
1743d     12 0B F0 BF 
17441     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
17445     B7 FF 00 C7 
17449     FF F0 DF 02 
1744d     F8 FB 02 F7 
17451     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
17455     E7 0F 20 D0 
17459     DF 38 C0 9F 
1745d     0F 00 B7 C8 
17461     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
17465     00 C1 EE E5 
17469     0E 05 10 E8 
1746d     E8 E7 3F 40 
17471     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
17475     20 F0 FF 1E 
17479     F0 BF FF 38 
1747d     00 EF 20 08 
17481     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
17485     08 F7 3F 30 
17489     F7 37 38 2F 
1748d     3C 28 08 13 
17491     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
17495     1F 20 F0 F7 
17499     04 F0 EB FD 
1749d     04 D0 D7 DB 
174a1     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
174a5     00 D7 2A E8 
174a9     DF 1F 20 FF 
174ad     00 DD C0 AF 
174b1     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
174b5     D0 D7 FF 29 
174b9     14 2F 64 00 
174bd     BF 1F 61 40 
174c1     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
174c5     ED 0F 26 20 
174c9     F7 1F 40 08 
174cd     DF 0F 2C 02 
174d1     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
174d5     D1 EF F7 2A 
174d9     00 FF 10 0F 
174dd     20 E8 EF ED 
174e1     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
174e5     30 00 CF 35 
174e9     04 F9 FF 03 
174ed     27 E0 BF 17 
174f1     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
174f5     E8 FF 14 00 
174f9     ED FF 2C 00 
174fd     E0 EF 13 0C 
17501     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
17505     F7 E0 EF F0 
17509     EF C4 DF D0 
1750d     BF C8 D7 F4 
17511     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
17515     27 30 18 F8 
17519     FF 2F 40 08 
1751d     1B 08 CF FF 
17521     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
17525     F7 F0 FF 1B 
17529     2C 00 EF E0 
1752d     D7 0C EA E4 
17531     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
17535     D0 AB FF 18 
17539     0F 00 FF FB 
1753d     11 F0 FF 00 
17541     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
17545     E8 D5 E7 F8 
17549     B0 D7 F0 CF 
1754d     0F 07 2B 10 
17551     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
17555     08 E8 1F 60 
17559     20 FE 02 E8 
1755d     D1 F7 0C E0 
17561     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
17565     EB E1 FB 00 
17569     C0 DF 08 D0 
1756d     EF 08 F3 0D 
17571     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
17575     EB 0F 08 E0 
17579     DD EF F3 0F 
1757d     00 CD DF E3 
17581     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
17585     1F 20 00 04 
17589     E8 17 30 18 
1758d     00 BF F7 FD 
17591     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
17595     17 2A 10 E8 
17599     F7 10 E8 FF 
1759d     17 00 CA DF 
175a1     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
175a5     1D 10 0F 2A 
175a9     20 1B 2D 30 
175ad     22 22 24 04 
175b1     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
175b5     EC E4 DF DD 
175b9     FF 10 FF 00 
175bd     E1 FF 10 F1 
175c1     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
175c5     10 07 10 0A 
175c9     FD 17 10 F4 
175cd     D9 FF 00 FF 
175d1     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
175d5     FB 20 E8 E7 
175d9     1F 20 13 27 
175dd     28 0C 1F 4A 
175e1     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
175e5     1F 00 FF 20 
175e9     FE F8 FF 20 
175ed     F0 DF 0F 2B 
175f1     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
175f5     FB 00 F5 1F 
175f9     10 DF 17 00 
175fd     E7 FE F3 0F 
17601     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
17605     05 0D 0C F4 
17609     E7 FF 00 F7 
1760d     FC F5 F2 EA 
17611     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
17615     14 17 33 28 
17619     03 2F 20 1F 
1761d     2E 20 08 00 
17621     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
17625     00 17 12 1E 
17629     E8 DB 0F 1F 
1762d     10 EF 0B 00 
17631     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
17635     1F 20 F0 DF 
17639     17 10 F0 D3 
1763d     FF 07 04 E1 
17641     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
17645     DF FF EC FF 
17649     20 00 F8 D7 
1764d     FF 03 17 04 
17651     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
17655     04 0B 00 FB 
17659     F0 FB E0 EF 
1765d     08 00 F4 F3 
17661     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
17665     F7 16 00 EB 
17669     F0 E3 EB FF 
1766d     F0 C8 DB EF 
17671     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
17675     20 E4 DC BB 
17679     DF FA E9 E7 
1767d     FB 00 E0 EB 
17681     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
17685     08 0F 30 00 
17689     F8 E9 FE 0F 
1768d     08 DD FB E8 
17691     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
17695     CF EF F0 C4 
17699     CF ED FB 06 
1769d     E0 DF F3 1F 
176a1     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
176a5     03 F8 F7 00 
176a9     F8 FB 0F 08 
176ad     F3 F2 FF 16 
176b1     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
176b5     E8 EB F5 FF 
176b9     16 08 F8 E4 
176bd     FD E8 DB FF 
176c1     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
176c5     E3 F0 E0 D0 
176c9     F7 14 E8 F7 
176cd     00 EF 11 04 
176d1     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
176d5     12 00 F2 FD 
176d9     0B 00 E8 D7 
176dd     FF 10 F3 FF 
176e1     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
176e5     00 FB 12 00 
176e9     FF 14 E8 FF 
176ed     08 FF 12 00 
176f1     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
176f5     22 1B 28 1D 
176f9     12 0B 04 05 
176fd     0E 00 06 07 
17701     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
17705     EF 1C 00 F0 
17709     D7 FF 10 F5 
1770d     FF 1A 16 04 
17711     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
17715     27 28 F0 F7 
17719     2F 20 15 22 
1771d     10 00 F5 F7 
17721     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
17725     D7 F7 14 E8 
17729     DF FF 08 E8 
1772d     EF 14 E8 E7 
17731     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
17735     15 00 EF FF 
17739     17 12 12 1B 
1773d     20 F4 17 14 
17741     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
17745     2F 28 00 03 
17749     0D 13 21 08 
1774d     FB 0E 13 18 
17751     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
17755     1E 18 02 07 
17759     14 0B 0A 0B 
1775d     27 20 00 06 
17761     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
17765     00 F4 FF 20 
17769     F0 FF 10 F7 
1776d     12 F0 DF 08 
17771     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
17775     0F 24 00 F3 
17779     FF 07 10 00 
1777d     F3 02 FF 04 
17781     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
17785     FD 0A F0 E7 
17789     17 00 EF F4 
1778d     D9 FF 00 E8 
17791     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
17795     D3 FF F0 D7 
17799     FF 08 F8 DA 
1779d     EF 07 1E 00 
177a1     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
177a5     FB 17 10 13 
177a9     10 07 08 0E 
177ad     17 08 E8 E7 
177b1     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
177b5     00 F3 E8 DB 
177b9     FF E4 FF 18 
177bd     E8 DE DC E9 
177c1     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
177c5     FF F0 DF 17 
177c9     00 F8 FB 1F 
177cd     10 F0 FB 00 
177d1     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
177d5     F8 EB F0 DE 
177d9     ED EC EA E8 
177dd     EF EB F7 18 
177e1     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
177e5     13 00 FB 10 
177e9     F6 F9 FF 08 
177ed     E0 D3 FF 00 
177f1     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
177f5     14 E0 EF 0A 
177f9     F5 FF 04 E0 
177fd     F7 0D 07 25 
17801     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
17805     E7 FB 0E 0C 
17809     0F 22 00 F7 
1780d     08 02 05 08 
17811     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
17815     F7 0E F9 07 
17819     08 FC F8 0B 
1781d     00 F3 0D 0C 
17821     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
17825     FC F0 D7 EB 
17829     F7 0B F4 EF 
1782d     FE 00 EC F3 
17831     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
17835     02 FF F0 DB 
17839     FF 00 F8 FB 
1783d     04 F5 0F 04 
17841     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
17845     18 00 E8 EF 
17849     0A 00 03 F8 
1784d     EF 0F 24 00 
17851     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
17855     20 08 FF 0A 
17859     F8 EB FF 20 
1785d     00 EF 10 EC 
17861     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
17865     E8 FF 18 02 
17869     F4 F5 FB 12 
1786d     04 F8 F0 EF 
17871     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
17875     20 00 EF 1F 
17879     10 FB 00 FF 
1787d     10 00 FF 18 
17881     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
17885     FF 09 06 0F 
17889     20 01 0F 00 
1788d     0F 04 F2 ED 
17891     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
17895     19 00 D7 FF 
17899     17 1A 10 F0 
1789d     D7 1F 24 00 
178a1     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
178a5     04 0F 08 FD 
178a9     0B 10 02 1B 
178ad     10 0F 1C 00 
178b1     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
178b5     13 10 00 0B 
178b9     10 ED FF 0B 
178bd     15 00 EB FC 
178c1     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
178c5     00 FD 00 E5 
178c9     FF 00 E4 FF 
178cd     10 F6 F6 FF 
178d1     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
178d5     04 0C 04 FB 
178d9     0C FB 0F 14 
178dd     10 F4 F7 08 
178e1     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
178e5     FF 0A E8 F5 
178e9     F8 F7 F0 FF 
178ed     00 F7 04 F7 
178f1     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
178f5     FB 02 0B 11 
178f9     0C 06 0B 14 
178fd     F8 FF 10 00 
17901     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
17905     FF 03 0D 04 
17909     F6 FF FA FD 
1790d     00 E5 EF FF 
17911     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
17915     FD F0 EF FA 
17919     01 07 16 00 
1791d     F3 FE FF 04 
17921     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
17925     EF FF 00 F7 
17929     13 18 08 0D 
1792d     08 F5 07 10 
17931     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
17935     F0 FF 0C FA 
17939     F6 FF 0C 04 
1793d     07 21 10 0A 
17941     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
17945     0C F8 FF 08 
17949     FF 0C F0 F7 
1794d     FC FB 06 F4 
17951     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
17955     FD E8 F7 00 
17959     E5 E9 F7 F0 
1795d     E7 0A 00 F0 
17961     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
17965     FF 2B 10 03 
17969     17 08 FF 0D 
1796d     10 04 EE FF 
17971     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
17975     09 06 00 F3 
17979     FB 0F 10 E9 
1797d     F7 F0 ED F5 
17981     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
17985     00 FC F0 F7 
17989     15 16 08 EC 
1798d     FF 04 FE FF 
17991     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
17995     F5 F2 F3 F8 
17999     FD 04 EB EB 
1799d     FB 04 FC E8 
179a1     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
179a5     F0 FF 00 F7 
179a9     FA 06 02 07 
179ad     02 06 0E 0E 
179b1     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
179b5     0A 08 FC FA 
179b9     FF 00 E0 F7 
179bd     08 F6 FB F4 
179c1     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
179c5     F8 FA FB 07 
179c9     04 EA FD 08 
179cd     02 08 0D 08 
179d1     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
179d5     08 FF 04 0F 
179d9     18 00 0C F1 
179dd     FB F4 FF 0A 
179e1     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
179e5     F0 EF F0 D4 
179e9     E7 F2 F0 EF 
179ed     F4 ED F9 F8 
179f1     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
179f5     02 FF 04 06 
179f9     02 FF 1A 10 
179fd     09 1A 12 04 
17a01     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
17a05     1F 00 FF 08 
17a09     01 0F 04 F9 
17a0d     05 00 FB F2 
17a11     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
17a15     EA FF 10 04 
17a19     EC FF 18 15 
17a1d     1A 16 10 09 
17a21     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
17a25     FF 14 00 EE 
17a29     E7 FB FE F4 
17a2d     E5 FF 06 06 
17a31     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
17a35     08 F8 0F 10 
17a39     F0 FF 00 FF 
17a3d     1E 10 FF 13 
17a41     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
17a45     1A 00 13 10 
17a49     0C 02 02 00 
17a4d     F9 0A F0 EF 
17a51     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
17a55     FF 00 E4 F3 
17a59     00 F7 07 13 
17a5d     14 00 05 02 
17a61     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
17a65     0D 11 0D 04 
17a69     FF 08 F8 FF 
17a6d     0A 00 FB F8 
17a71     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
17a75     0F 04 FB 06 
17a79     00 F3 FF 0C 
17a7d     00 09 F2 EF 
17a81     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
17a85     14 00 02 00 
17a89     FD 07 12 10 
17a8d     0A 0C 04 0F 
17a91     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
17a95     00 FF 0F 10 
17a99     0C FC FF 00 
17a9d     F9 FF 08 00 
17aa1     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
17aa5     DD EF F0 EF 
17aa9     08 F0 F7 F0 
17aad     EF 06 09 05 
17ab1     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
17ab5     F8 F5 01 FF 
17ab9     14 00 ED ED 
17abd     EE F5 F4 EA 
17ac1     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
17ac5     F0 EB FC EF 
17ac9     F8 E0 FF 10 
17acd     F0 ED 0B 1C 
17ad1     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
17ad5     13 18 FD 0A 
17ad9     F8 0B 10 02 
17add     F4 F6 FB FA 
17ae1     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
17ae5     04 FA FF 04 
17ae9     F8 EF 0D 10 
17aed     04 F0 0F 08 
17af1     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
17af5     00 FF F0 F7 
17af9     F4 EF 17 0C 
17afd     07 16 00 FB 
17b01     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
17b05     0B 18 F0 EF 
17b09     ED EF FF F2 
17b0d     F1 F6 F0 EA 
17b11     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
17b15     F1 FE E4 EF 
17b19     10 00 F3 FF 
17b1d     08 FA FD FF 
17b21     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
17b25     00 F9 F0 FF 
17b29     18 00 FF 0C 
17b2d     E8 F5 F8 F7 
17b31     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
17b35     0E F0 F7 12 
17b39     02 03 0F 18 
17b3d     FD 23 10 05 
17b41     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
17b45     F2 FD 14 00 
17b49     F3 FD F7 F8 
17b4d     EB FF F8 FB 
17b51     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
17b55     FB 14 04 0F 
17b59     10 F9 17 20 
17b5d     10 12 09 27 
17b61     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
17b65     F7 05 15 08 
17b69     E9 F2 F7 01 
17b6d     F0 ED FF 04 
17b71     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
17b75     E7 FF 10 F0 
17b79     F5 03 F8 E9 
17b7d     FF 00 ED F3 
17b81     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
17b85     EF FF 10 00 
17b89     07 14 00 FB 
17b8d     00 07 10 00 
17b91     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
17b95     14 1A 00 FF 
17b99     0D 10 F8 FE 
17b9d     FE FF 08 00 
17ba1     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
17ba5     F9 0F 14 04 
17ba9     00 FF 26 08 
17bad     FF 2D 20 FC 
17bb1     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
17bb5     F8 F7 F0 EB 
17bb9     00 EA F9 E0 
17bbd     D7 F3 F8 F0 
17bc1     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
17bc5     FF 16 10 0D 
17bc9     14 0B 0A 01 
17bcd     11 10 0D 08 
17bd1     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
17bd5     F9 FB 00 ED 
17bd9     EF F3 07 08 
17bdd     02 07 08 F3 
17be1     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
17be5     04 FF 10 F0 
17be9     F5 06 0A F8 
17bed     EF 0D 08 FB 
17bf1     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
17bf5     03 08 F8 FF 
17bf9     04 F7 0B 14 
17bfd     08 EA F7 1C 
17c01     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
17c05     F8 F6 F7 FC 
17c09     F2 F5 F8 E0 
17c0d     DF EA E4 E0 
17c11     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
17c15     FD 08 F0 FB 
17c19     00 03 0F 16 
17c1d     08 07 1B 20 
17c21     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
17c25     12 04 0D 0C 
17c29     E8 EF 04 EA 
17c2d     EF FE F8 EF 
17c31     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
17c35     04 F7 0F 00 
17c39     FD 05 0D 13 
17c3d     06 00 F1 FF 
17c41     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
17c45     EF FF FC F3 
17c49     FE FC F6 FF 
17c4d     00 07 00 F9 
17c51     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
17c55     09 04 EE FF 
17c59     00 FB 07 03 
17c5d     00 F6 FD FA 
17c61     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
17c65     00 E9 F5 07 
17c69     00 EF 0F 00 
17c6d     FA 01 FD FF 
17c71     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
17c75     0D 0D 08 00 
17c79     F7 0B 10 F0 
17c7d     E7 FC F1 FF 
17c81     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
17c85     01 09 01 0F 
17c89     18 07 1D 18 
17c8d     08 0F 1A 14 
17c91     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
17c95     0C 00 F4 0F 
17c99     04 EB FD E4 
17c9d     DF F7 F8 EA 
17ca1     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
17ca5     FA FF F8 FF 
17ca9     0C 04 08 F0 
17cad     FF 0C 00 F6 
17cb1     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
17cb5     FC F6 F6 F7 
17cb9     05 0E 00 FB 
17cbd     12 10 0C 02 
17cc1     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
17cc5     08 04 00 F2 
17cc9     FF 08 02 00 
17ccd     FF 18 00 FE 
17cd1     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
17cd5     05 00 F0 F3 
17cd9     F6 F7 07 12 
17cdd     00 E5 FF 10 
17ce1     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
17ce5     01 FA FF 00 
17ce9     FB 09 04 04 
17ced     F8 EA EB EF 
17cf1     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
17cf5     08 F2 FF 16 
17cf9     0E 0C 02 0B 
17cfd     0C 08 06 08 
17d01     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
17d05     F9 F4 F1 F1 
17d09     FF EC E4 E2 
17d0d     EB F2 E9 EC 
17d11     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
17d15     F4 FF 1B 10 
17d19     00 0F 18 01 
17d1d     0F 04 05 12 
17d21     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
17d25     00 EC F3 F8 
17d29     EB F7 08 00 
17d2d     F7 F2 F3 02 
17d31     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
17d35     FF 06 00 FD 
17d39     00 FF 12 08 
17d3d     F9 15 0A FA 
17d41     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
17d45     FF 08 E9 F3 
17d49     FA F7 F6 F2 
17d4d     F2 FD 0C F0 
17d51     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
17d55     F6 FB FD 0B 
17d59     08 FD F9 F7 
17d5d     02 F0 F7 04 
17d61     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
17d65     FF 02 09 08 
17d69     0D 10 F0 FF 
17d6d     14 02 0F 10 
17d71     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
17d75     FF 00 F1 F6 
17d79     EF FF 00 E8 
17d7d     F7 04 ED FF 
17d81     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
17d85     14 02 02 09 
17d89     0C 08 0F 10 
17d8d     F4 F1 F7 0F 
17d91     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
17d95     F6 F6 FF 00 
17d99     F7 09 00 F9 
17d9d     FD 02 00 F6 
17da1     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
17da5     00 FF 06 00 
17da9     FF 11 00 FF 
17dad     0D 00 FF 15 
17db1     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
17db5     FD FA FF 00 
17db9     F9 FF FC 05 
17dbd     08 0A 00 FF 
17dc1     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
17dc5     0C 09 09 0C 
17dc9     04 FF 04 FB 
17dcd     08 00 F8 F2 
17dd1     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
17dd5     FD F0 E9 EB 
17dd9     FF 00 FB 00 
17ddd     FF 0E 00 FF 
17de1     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
17de5     08 F8 FF 00 
17de9     EA EF 05 00 
17ded     EF FB F6 FB 
17df1     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
17df5     08 07 02 FE 
17df9     05 04 00 FB 
17dfd     FC EC F5 F5 
17e01     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
17e05     F7 FF 08 FA 
17e09     F1 0B 0A 00 
17e0d     FC F1 FF 00 
17e11     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
17e15     F7 05 05 0B 
17e19     00 FF 16 08 
17e1d     01 06 00 F8 
17e21     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
17e25     00 F7 0B 08 
17e29     05 09 12 08 
17e2d     09 0C 05 04 
17e31     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
17e35     05 09 00 F5 
17e39     FB 05 F4 F5 
17e3d     04 00 F4 F4 
17e41     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
17e44                 | 	alignl
17e44                 | _hng030rm_spin2_dat_
17e44     00 00 00 00 
17e48     00 00 00 00 
17e4c     00 00 00 00 
17e50     00 00 00 00 
17e54     00 00 00    | vga_font       file "vgafont.def"
17e57     7E 81 A5 81 
17e5b     81 BD 99 81 
17e5f     81 7E 00 00 
17e63     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
17e67     7E FF DB FF 
17e6b     FF C3 E7 FF 
17e6f     FF 7E 00 00 
17e73     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
17e77     00 36 7F 7F 
17e7b     7F 7F 3E 1C 
17e7f     08 00 00 00 
17e83     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
17e87     00 08 1C 3E 
17e8b     7F 3E 1C 08 
17e8f     00 00 00 00 
17e93     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
17e97     18 3C 3C E7 
17e9b     E7 E7 18 18 
17e9f     3C 00 00 00 
17ea3     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17ea7     18 3C 7E FF 
17eab     FF 7E 18 18 
17eaf     3C 00 00 00 
17eb3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17eb7     00 00 00 18 
17ebb     3C 3C 18 00 
17ebf     00 00 00 00 
17ec3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
17ec7     FF FF FF E7 
17ecb     C3 C3 E7 FF 
17ecf     FF FF FF FF 
17ed3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17ed7     00 00 3C 66 
17edb     42 42 66 3C 
17edf     00 00 00 00 
17ee3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
17ee7     FF FF C3 99 
17eeb     BD BD 99 C3 
17eef     FF FF FF FF 
17ef3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17ef7     78 70 58 4C 
17efb     1E 33 33 33 
17eff     33 1E 00 00 
17f03     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
17f07     3C 66 66 66 
17f0b     66 3C 18 7E 
17f0f     18 18 00 00 
17f13     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
17f17     FC CC FC 0C 
17f1b     0C 0C 0C 0E 
17f1f     0F 07 00 00 
17f23     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
17f27     FE C6 FE C6 
17f2b     C6 C6 C6 E6 
17f2f     E7 67 03 00 
17f33     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
17f37     18 18 DB 3C 
17f3b     E7 3C DB 18 
17f3f     18 00 00 00 
17f43     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
17f47     03 07 0F 1F 
17f4b     7F 1F 0F 07 
17f4f     03 01 00 00 
17f53     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
17f57     60 70 78 7C 
17f5b     7F 7C 78 70 
17f5f     60 40 00 00 
17f63     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
17f67     18 3C 7E 18 
17f6b     18 18 7E 3C 
17f6f     18 00 00 00 
17f73     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
17f77     66 66 66 66 
17f7b     66 66 66    | 	byte	$66[7]
17f7e     00 66 66 00 
17f82     00 00 00 00 
17f86     00 FE DB DB 
17f8a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
17f8e     D8 D8 D8 00 
17f92     00 00 00 3E 
17f96     63 06 1C 36 
17f9a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
17f9e     30 63 3E 00 
17fa2     00 00 00 00 
17fa6     00 00 00 00 
17faa     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
17fae     7F 7F 7F 00 
17fb2     00 00 00 00 
17fb6     00 18 3C 7E 
17fba     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
17fbe     3C 18 7E 00 
17fc2     00 00 00 00 
17fc6     00 18 3C 7E 
17fca     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
17fce     18 18 18 00 
17fd2     00 00 00 00 
17fd6     00 18 18 18 
17fda     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
17fde     7E 3C 18 00 
17fe2     00 00 00 00 
17fe6     00 00 00 18 
17fea     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
17fee     00 00 00 00 
17ff2     00 00 00 00 
17ff6     00 00 00    | 	byte	$00[11]
17ff9     0C 06 7F 06 
17ffd     0C 00 00 00 
18001     00 00 00 00 
18005     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18009     00 03 03 03 
1800d     7F 00 00 00 
18011     00 00 00 00 
18015     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18019     14 36 7F 36 
1801d     14 00 00 00 
18021     00 00 00 00 
18025     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
18029     1C 1C 3E 3E 
1802d     7F 7F 00 00 
18031     00 00 00 00 
18035     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
18039     7F 3E 3E 1C 
1803d     1C 08 00 00 
18041     00 00 00 00 
18045     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18049     00 00 00 00 
1804d     00 00 00 00 
18051     00 00 00 00 
18055     00 00       | 	byte	$00[14]
18057     18 3C 3C 3C 
1805b     18 18 18 00 
1805f     18 18 00 00 
18063     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
18067     66 24 00 00 
1806b     00 00 00 00 
1806f     00 00 00 00 
18073     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18077     00 36 36 7F 
1807b     36 36 36 7F 
1807f     36 36 00 00 
18083     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
18087     3E 63 43 03 
1808b     3E 60 60 61 
1808f     63 3E 18 18 
18093     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
18097     00 00 43 63 
1809b     30 18 0C 06 
1809f     63 61 00 00 
180a3     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
180a7     1C 36 36 1C 
180ab     6E 3B 33 33 
180af     33 6E 00 00 
180b3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
180b7     0C 0C 0C 06 
180bb     00 00 00 00 
180bf     00 00 00 00 
180c3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180c7     30 18 0C 0C 
180cb     0C 0C 0C 0C 
180cf     18 30 00 00 
180d3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
180d7     0C 18 30 30 
180db     30 30 30 30 
180df     18 0C 00 00 
180e3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
180e7     00 00 00 66 
180eb     3C FF 3C 66 
180ef     00 00 00 00 
180f3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
180f7     00 00 00 18 
180fb     18 7E 18 18 
180ff     00 00 00 00 
18103     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
18107     00 00 00 00 
1810b     00 00 00 00 | 	byte	$00[8]
1810f     18 18 18 0C 
18113     00 00 00 00 
18117     00 00 00 00 
1811b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1811f     00 00 00 00 
18123     00 00 00 00 
18127     00 00 00 00 
1812b     00 00 00 00 | 	byte	$00[16]
1812f     18 18 00 00 
18133     00 00 00 00 
18137     00 00 40 60 
1813b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1813f     03 01 00 00 
18143     00 00 00 00 
18147     1C 36 63 63 
1814b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1814f     36 1C 00 00 
18153     00 00 00 00 
18157     18 1C 1E 18 
1815b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1815f     18 7E 00 00 
18163     00 00 00 00 
18167     3E 63 60 30 
1816b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1816f     63 7F 00 00 
18173     00 00 00 00 
18177     3E 63 60 60 
1817b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1817f     63 3E 00 00 
18183     00 00 00 00 
18187     30 38 3C 36 
1818b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1818f     30 78 00 00 
18193     00 00 00 00 
18197     7F 03 03 03 
1819b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1819f     63 3E 00 00 
181a3     00 00 00 00 
181a7     1C 06 03 03 
181ab     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
181af     63 3E 00 00 
181b3     00 00 00 00 
181b7     7F 63 60 60 
181bb     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
181bf     0C 0C 00 00 
181c3     00 00 00 00 
181c7     3E 63 63 63 
181cb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
181cf     63 3E 00 00 
181d3     00 00 00 00 
181d7     3E 63 63 63 
181db     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
181df     30 1E 00 00 
181e3     00 00 00 00 
181e7     00 00 00 18 
181eb     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
181ef     18 18 00 00 
181f3     00 00 00 00 
181f7     00 00 00 18 
181fb     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
181ff     18 18 0C 00 
18203     00 00 00 00 
18207     00 60 30 18 
1820b     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1820f     30 60 00 00 
18213     00 00 00 00 
18217     00 00 00 7E 
1821b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1821f     00 00 00 00 
18223     00 00 00 00 
18227     00          | 	byte	$00[9]
18228     06 0C 18 30 
1822c     60 30 18 0C 
18230     06 00 00 00 
18234     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
18238     63 63 30 18 
1823c     18 18 00 18 
18240     18 00 00 00 
18244     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
18248     3E 63 63 7B 
1824c     7B 7B 3B 03 
18250     3E 00 00 00 
18254     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
18258     1C 36 63 63 
1825c     7F 63 63 63 
18260     63 00 00 00 
18264     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
18268     66 66 66 3E 
1826c     66 66 66 66 
18270     3F 00 00 00 
18274     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
18278     66 43 03 03 
1827c     03 03 43 66 
18280     3C 00 00 00 
18284     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
18288     36 66 66 66 
1828c     66 66 66 36 
18290     1F 00 00 00 
18294     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
18298     66 46 16 1E 
1829c     16 06 46 66 
182a0     7F 00 00 00 
182a4     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
182a8     66 46 16 1E 
182ac     16 06 06 06 
182b0     0F 00 00 00 
182b4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
182b8     66 43 03 03 
182bc     7B 63 63 66 
182c0     5C 00 00 00 
182c4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
182c8     63 63 63 7F 
182cc     63 63 63 63 
182d0     63 00 00 00 
182d4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
182d8     18 18 18 18 
182dc     18 18 18 18 | 	byte	$18[8]
182e0     3C 00 00 00 
182e4     00 00 00 78 
182e8     30 30 30 30 
182ec     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
182f0     1E 00 00 00 
182f4     00 00 00 67 
182f8     66 66 36 1E 
182fc     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
18300     67 00 00 00 
18304     00 00 00 0F 
18308     06 06 06 06 
1830c     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
18310     7F 00 00 00 
18314     00 00 00 63 
18318     77 7F 7F 6B 
1831c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
18320     63 00 00 00 
18324     00 00 00 63 
18328     67 6F 7F 7B 
1832c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
18330     63 00 00 00 
18334     00 00 00 3E 
18338     63 63 63 63 
1833c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
18340     3E 00 00 00 
18344     00 00 00 3F 
18348     66 66 66 3E 
1834c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
18350     0F 00 00 00 
18354     00 00 00 3E 
18358     63 63 63 63 
1835c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
18360     3E 30 70 00 
18364     00 00 00 3F 
18368     66 66 66 3E 
1836c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
18370     67 00 00 00 
18374     00 00 00 3E 
18378     63 63 06 1C 
1837c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
18380     3E 00 00 00 
18384     00 00 00 7E 
18388     7E 5A 18 18 
1838c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
18390     3C 00 00 00 
18394     00 00 00 63 
18398     63 63 63 63 
1839c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
183a0     3E 00 00 00 
183a4     00 00 00 63 
183a8     63 63 63 63 
183ac     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
183b0     08 00 00 00 
183b4     00 00 00 63 
183b8     63 63 63 6B 
183bc     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
183c0     36 00 00 00 
183c4     00 00 00 63 
183c8     63 36 3E 1C 
183cc     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
183d0     63 00 00 00 
183d4     00 00 00 66 
183d8     66 66 66 3C 
183dc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
183e0     3C 00 00 00 
183e4     00 00 00 7F 
183e8     63 61 30 18 
183ec     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
183f0     7F 00 00 00 
183f4     00 00 00 3C 
183f8     0C 0C 0C 0C 
183fc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
18400     3C 00 00 00 
18404     00 00 00 00 
18408     01 03 07 0E 
1840c     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
18410     40 00 00 00 
18414     00 00 00 3C 
18418     30 30 30 30 
1841c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
18420     3C 00 00 00 
18424     1C 36 00 00 
18428     00 00 00 00 
1842c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18430     00 00 00 00 
18434     00 00 00 00 
18438     00 00 00 00 
1843c     00 00 00 00 
18440     00          | 	byte	$00[17]
18441     FF 00 00 0C 
18445     18 00 00 00 
18449     00 00 00 00 
1844d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18451     00 00 00 00 
18455     00 00 00 00 
18459     00          | 	byte	$00[9]
1845a     1E 30 3E 33 
1845e     33 33 6E 00 
18462     00 00 00 00 
18466     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1846a     1E 36 66 66 
1846e     66 66 3E 00 
18472     00 00 00 00 
18476     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1847a     3E 63 03 03 
1847e     03 63 3E 00 
18482     00 00 00 00 
18486     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1848a     3C 36 33 33 
1848e     33 33 6E 00 
18492     00 00 00 00 
18496     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1849a     3E 63 7F 03 
1849e     03 63 3E 00 
184a2     00 00 00 00 
184a6     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
184aa     0C 1E 0C 0C 
184ae     0C 0C 1E 00 
184b2     00 00 00 00 
184b6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
184ba     6E 33 33 33 
184be     33 33 3E 30 
184c2     33 1E 00 00 
184c6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
184ca     36 6E 66 66 
184ce     66 66 67 00 
184d2     00 00 00 00 
184d6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
184da     1C 18 18 18 
184de     18 18 3C 00 
184e2     00 00 00 00 
184e6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
184ea     70 60 60 60 
184ee     60 60 60 66 
184f2     66 3C 00 00 
184f6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
184fa     66 36 1E 1E 
184fe     36 66 67 00 
18502     00 00 00 00 
18506     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1850a     18 18 18 18 
1850e     18 18       | 	byte	$18[6]
18510     3C 00 00 00 
18514     00 00 00 00 
18518     00 00 37 7F 
1851c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
18520     63 00 00 00 
18524     00 00 00 00 
18528     00 00 3B 66 
1852c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
18530     66 00 00 00 
18534     00 00 00 00 
18538     00 00 3E 63 
1853c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
18540     3E 00 00 00 
18544     00 00 00 00 
18548     00 00 3B 66 
1854c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
18550     3E 06 06 0F 
18554     00 00 00 00 
18558     00 00 6E 33 
1855c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
18560     3E 30 30 78 
18564     00 00 00 00 
18568     00 00 3B 6E 
1856c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
18570     0F 00 00 00 
18574     00 00 00 00 
18578     00 00 3E 63 
1857c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
18580     3E 00 00 00 
18584     00 00 00 08 
18588     0C 0C 3F 0C 
1858c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
18590     38 00 00 00 
18594     00 00 00 00 
18598     00 00 33 33 
1859c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
185a0     6E 00 00 00 
185a4     00 00 00 00 
185a8     00 00 63 63 
185ac     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
185b0     1C 00 00 00 
185b4     00 00 00 00 
185b8     00 00 63 63 
185bc     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
185c0     36 00 00 00 
185c4     00 00 00 00 
185c8     00 00 63 36 
185cc     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
185d0     63 00 00 00 
185d4     00 00 00 00 
185d8     00 00 63 63 
185dc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
185e0     7E 60 30 1F 
185e4     00 00 00 00 
185e8     00 00 7F 33 
185ec     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
185f0     7F 00 00 00 
185f4     00 00 00 70 
185f8     18 18 18 0E 
185fc     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
18600     70 00 00 00 
18604     00 00 00 18 
18608     18 18 18 18 
1860c     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
18610     18 00 00 00 
18614     00 00 00 0E 
18618     18 18 18 70 
1861c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
18620     0E 00 00 00 
18624     6E 3B 00 00 
18628     00 00 00 00 
1862c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18630     00 00 00 00 
18634     00 00 00 00 
18638     00 00       | 	byte	$00[10]
1863a     08 1C 36 63 
1863e     63 63 7F 00 
18642     00 00 00 00 
18646     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1864a     03 03 03 03 
1864e     43 66 3C 18 
18652     30 1E 00 00 
18656     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1865a     33 33 33 33 
1865e     33 33       | 	byte	$33[6]
18660     6E 00 00 00 
18664     00 00 60 30 
18668     18 00 3E 63 
1866c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
18670     3E 00 00 00 
18674     00 00 08 1C 
18678     36 00 1E 30 
1867c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
18680     6E 00 00 00 
18684     00 00 00 00 
18688     33 00 1E 30 
1868c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
18690     6E 00 00 00 
18694     00 00 1C 36 
18698     1C 00 33 33 
1869c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
186a0     6E 00 00 00 
186a4     00 00 60 30 
186a8     18 00 3E 63 
186ac     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
186b0     3E 00 00 00 
186b4     00 00 00 00 
186b8     00 00 3E 63 
186bc     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
186c0     3E 18 30 1E 
186c4     00 00 00 1C 
186c8     58 78 38 18 
186cc     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
186d0     3C 00 00 00 
186d4     00 00 00 00 
186d8     63 00 3E 63 
186dc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
186e0     3E 00 00 00 
186e4     66 33 00 3E 
186e8     63 63 63 63 
186ec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
186f0     3E 00 00 00 
186f4     00 00 CC 66 
186f8     33 00 3E 63 
186fc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
18700     3E 00 00 00 
18704     00 00 18 3C 
18708     66 00 1C 18 
1870c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
18710     3C 00 00 00 
18714     30 18 00 7F 
18718     63 61 30 18 
1871c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
18720     7F 00 00 00 
18724     00 63 00 08 
18728     1C 36 63 63 
1872c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
18730     63 00 00 00 
18734     30 18 00 3C 
18738     66 43 03 03 
1873c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
18740     3C 00 00 00 
18744     30 18 00 7F 
18748     66 46 16 1E 
1874c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
18750     7F 00 00 00 
18754     0C 06 00 0F 
18758     06 06 06 06 
1875c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
18760     7F 00 00 00 
18764     30 18 00 1C 
18768     18 18 18 18 
1876c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
18770     3C 00 00 00 
18774     00 00 08 1C 
18778     36 00 3E 63 
1877c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
18780     3E 00 00 00 
18784     00 00 00 00 
18788     63 00 3E 63 
1878c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
18790     3E 00 00 00 
18794     00 00 00 6F 
18798     46 26 06 06 
1879c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
187a0     7F 00 00 00 
187a4     00 00 00 6E 
187a8     4C 2C 0C 0C 
187ac     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
187b0     1E 00 00 00 
187b4     30 18 00 3E 
187b8     63 63 06 1C 
187bc     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
187c0     3E 00 00 00 
187c4     00 00 60 30 
187c8     18 00 3E 63 
187cc     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
187d0     3E 00 00 00 
187d4     00 63 00 3E 
187d8     63 63 63 63 
187dc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
187e0     3E 00 00 00 
187e4     00 63 00 63 
187e8     63 63 63 63 
187ec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
187f0     3E 00 00 00 
187f4     6C 38 00 7E 
187f8     7E 5A 18 18 
187fc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
18800     3C 00 00 00 
18804     00 00 60 48 
18808     2C 0C 3F 0C 
1880c     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
18810     38 00 00 00 
18814     00 00 00 0F 
18818     26 36 1E 0E 
1881c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
18820     7F 00 00 00 
18824     00 00 00 00 
18828     00 63 36 1C 
1882c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
18830     00 00 00 00 
18834     00 00       | 	byte	$00[6]
18836     36 1C 08 00 
1883a     3E 63 03 03 
1883e     03 63 3E 00 
18842     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
18846     30 18 0C 00 
1884a     1E 30 3E 33 
1884e     33 33 6E 00 
18852     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
18856     60 30 18 00 
1885a     1C 18 18 18 
1885e     18 18 3C 00 
18862     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
18866     60 30 18 00 
1886a     3E 63 63 63 
1886e     63 63 3E 00 
18872     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
18876     30 18 0C 00 
1887a     33 33 33 33 
1887e     33 33 6E 00 
18882     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
18886     00 08 1C 36 
1888a     63 63 7F 63 
1888e     63 63 63 18 
18892     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
18896     00 00 00 00 
1889a     1E 30 3E 33 
1889e     33 33 6E 18 
188a2     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
188a6     00 7F 63 61 
188aa     30 18 0C 06 
188ae     43 63 7F 00 
188b2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
188b6     36 1C 08 00 
188ba     7F 33 18 0C 
188be     06 63 7F 00 
188c2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
188c6     00 7F 66 46 
188ca     16 1E 16 06 
188ce     46 66 7F 18 
188d2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
188d6     00 00 00 00 
188da     3E 63 7F 03 
188de     03 63 3E 18 
188e2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
188e6     00 3C 66 03 
188ea     1F 03 0F 03 
188ee     03 66 3C 00 
188f2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
188f6     60 30 18 00 
188fa     7F 33 18 0C 
188fe     06 63 7F 00 
18902     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
18906     00 3C 66 43 
1890a     03 03 03 03 
1890e     43 66 3C 00 
18912     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
18916     00 00 00 00 
1891a     3E 63 06 1C 
1891e     30 63 3E 18 
18922     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
18926     00 00 00 00 
1892a     00 00       | 	byte	$00[6]
1892c     6C 36 1B 36 
18930     6C 00 00 00 
18934     00 00 00 00 
18938     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1893c     1B 36 6C 36 
18940     1B 00 00 00 
18944     88 22 88 22 
18948     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1894c     88 22 88 22 
18950     88 22 88 22 
18954     AA 55 AA 55 
18958     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1895c     AA 55 AA 55 
18960     AA 55 AA 55 
18964     BB EE BB EE 
18968     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1896c     BB EE BB EE 
18970     BB EE BB EE 
18974     18 18 18 18 
18978     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1897c     18 18 18 18 
18980     18 18 18 18 
18984     18 18 18 18 
18988     18 18 18    | 	byte	$18[15]
1898b     1F 18 18 18 
1898f     18 18 18 18 
18993     18 30 18 00 
18997     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1899b     63 7F 63 63 
1899f     63 63 00 00 
189a3     00 1C 36 00 
189a7     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
189ab     63 7F 63 63 
189af     63 63 00 00 
189b3     00 36 1C 00 
189b7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
189bb     1E 16 06 46 
189bf     66 7F 00 00 
189c3     00 00 00 00 
189c7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
189cb     1C 30 60 63 
189cf     63 3E 18 30 
189d3     1E 6C 6C 6C 
189d7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
189db     6F 6C 6C 6C 
189df     6C 6C 6C 6C 
189e3     6C 6C 6C 6C 
189e7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
189eb     6C 6C 6C 6C 
189ef     6C 6C 6C 6C 
189f3     6C          | 	byte	$6c[9]
189f4     00 00 00 00 
189f8     00          | 	byte	$00[5]
189f9     7F 60 6F 6C 
189fd     6C 6C 6C 6C 
18a01     6C 6C 6C 6C 
18a05     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18a09     6F 60 7F 00 
18a0d     00 00 00 00 
18a11     00 00 00 18 
18a15     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
18a19     61 30 18 0C 
18a1d     06 43 63 7F 
18a21     00 00 00 00 
18a25     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
18a29     00 7F 33 18 
18a2d     0C 06 63 7F 
18a31     00 00 00 00 
18a35     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
18a39     00 00 1F 18 
18a3d     18 18 18 18 
18a41     18 18 18 18 
18a45     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18a49     18 18 F8 00 
18a4d     00 00 00 00 
18a51     00 00 00 18 
18a55     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18a59     18 18 FF 00 
18a5d     00 00 00 00 
18a61     00 00 00 00 
18a65     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18a69     00 00 FF 18 
18a6d     18 18 18 18 
18a71     18 18 18 18 
18a75     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18a79     18 18 F8 18 
18a7d     18 18 18 18 
18a81     18 18 18 00 
18a85     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
18a89     00 00 FF 00 
18a8d     00 00 00 00 
18a91     00 00 00 18 
18a95     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18a99     18 18 FF 18 
18a9d     18 18 18 18 
18aa1     18 18 18 63 
18aa5     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
18aa9     36 63 63 7F 
18aad     63 63 63 63 
18ab1     00 00 00 00 
18ab5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
18ab9     00 1E 30 3E 
18abd     33 33 33 6E 
18ac1     00 00 00 6C 
18ac5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18ac9     EC 0C FC 00 
18acd     00 00 00 00 
18ad1     00 00 00 00 
18ad5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ad9     FC 0C EC 6C 
18add     6C 6C 6C 6C 
18ae1     6C 6C 6C 6C 
18ae5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18ae9     EF 00 FF 00 
18aed     00 00 00 00 
18af1     00 00 00 00 
18af5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18af9     FF 00 EF 6C 
18afd     6C 6C 6C 6C 
18b01     6C 6C 6C 6C 
18b05     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18b09     EC 0C EC 6C 
18b0d     6C 6C 6C 6C 
18b11     6C 6C 6C 00 
18b15     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18b19     FF 00 FF 00 
18b1d     00 00 00 00 
18b21     00 00 00 6C 
18b25     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18b29     EF 00 EF 6C 
18b2d     6C 6C 6C 6C 
18b31     6C 6C 6C 00 
18b35     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18b39     63 3E 63 63 
18b3d     63 63 3E 63 
18b41     00 00 00 00 
18b45     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
18b49     30 3C 36 33 
18b4d     33 33 33 6E 
18b51     00 00 00 00 
18b55     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
18b59     66 66 6F 66 
18b5d     66 66 36 1F 
18b61     00 00 00 36 
18b65     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
18b69     66 66 66 66 
18b6d     66 66       | 	byte	$66[6]
18b6f     36 1F 00 00 
18b73     00 00 63 00 
18b77     7F 66 46 16 
18b7b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
18b7f     66 7F 00 00 
18b83     00 6C 38 00 
18b87     38 30 30 3C 
18b8b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
18b8f     33 6E 00 00 
18b93     00 36 1C 00 
18b97     63 67 6F 7F 
18b9b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
18b9f     63 63 00 00 
18ba3     00 30 18 00 
18ba7     3C 18 18 18 
18bab     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18baf     18 3C 00 00 
18bb3     00 3C 66 00 
18bb7     3C 18 18 18 
18bbb     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18bbf     18 3C 00 00 
18bc3     00 00 00 36 
18bc7     1C 08 00 3E 
18bcb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
18bcf     63 3E 00 00 
18bd3     00 18 18 18 
18bd7     18 18 18 18 
18bdb     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
18bdf     00 00 00 00 
18be3     00 00 00 00 
18be7     00 00 00 00 | 	byte	$00[12]
18beb     F8 18 18 18 
18bef     18 18 18 18 
18bf3     18 FF FF FF 
18bf7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
18bfb     FF FF FF FF 
18bff     FF FF FF FF 
18c03     FF          | 	byte	$ff[9]
18c04     00 00 00 00 
18c08     00 00 00    | 	byte	$00[7]
18c0b     FF FF FF FF 
18c0f     FF FF FF FF 
18c13     FF          | 	byte	$ff[9]
18c14     00 00 00 7E 
18c18     7E 5A 18 18 
18c1c     18 18 18 18 
18c20     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
18c24     1C 36 1C 63 
18c28     63 63 63 63 
18c2c     63 63 63 63 
18c30     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18c34     FF FF FF FF 
18c38     FF FF FF    | 	byte	$ff[7]
18c3b     00 00 00 00 
18c3f     00 00 00 00 
18c43     00          | 	byte	$00[9]
18c44     30 18 00 3E 
18c48     63 63 63 63 
18c4c     63 63 63 63 
18c50     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18c54     00 00 00 1E 
18c58     33 33 33 1B 
18c5c     33 63 63 63 
18c60     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
18c64     1C 36 00 3E 
18c68     63 63 63 63 
18c6c     63 63 63 63 
18c70     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18c74     30 18 00 63 
18c78     67 6F 7F 7B 
18c7c     73 63 63 63 
18c80     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
18c84     00 00 60 30 
18c88     18 00 3B 66 
18c8c     66 66 66 66 
18c90     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18c94     00 00 36 1C 
18c98     08 00 3B 66 
18c9c     66 66 66 66 
18ca0     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18ca4     36 1C 00 3E 
18ca8     63 63 06 1C 
18cac     30 60 63 63 
18cb0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
18cb4     00 00 36 1C 
18cb8     08 00 3E 63 
18cbc     06 1C 30 63 
18cc0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
18cc4     30 18 00 3F 
18cc8     66 66 66 3E 
18ccc     36 66 66 66 
18cd0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
18cd4     30 18 00 63 
18cd8     63 63 63 63 
18cdc     63 63 63 63 
18ce0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18ce4     00 00 60 30 
18ce8     18 00 3B 6E 
18cec     66 06 06 06 
18cf0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
18cf4     66 33 00 63 
18cf8     63 63 63 63 
18cfc     63 63 63 63 
18d00     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18d04     00 00 60 30 
18d08     18 00 63 63 
18d0c     63 63 63 63 
18d10     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
18d14     30 18 00 66 
18d18     66 66 66 3C 
18d1c     18 18 18 18 
18d20     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
18d24     00 00 00 08 
18d28     0C 0C 3F 0C 
18d2c     0C 0C 0C 6C 
18d30     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
18d34     30 18 00 00 
18d38     00 00 00 00 
18d3c     00 00 00 00 
18d40     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d44     00 00 00 00 
18d48     00 00 00 00 | 	byte	$00[8]
18d4c     7F 00 00 00 
18d50     00 00 00 00 
18d54     66 33 00 00 
18d58     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
18d5c     00 00 00 00 
18d60     00 00 00 00 
18d64     00 00 00 00 
18d68     00 00 00 00 
18d6c     00 00 00 00 
18d70     00          | 	byte	$00[21]
18d71     0C 06 3C 36 
18d75     1C 00 00 00 
18d79     00 00 00 00 
18d7d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d81     00 00 00 63 
18d85     3E 00 00 00 
18d89     00 00 00 00 
18d8d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d91     00 00 00 00 
18d95     3E 63 06 1C 
18d99     36 63 63 36 
18d9d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
18da1     00 00 00 00 
18da5     00 00 00 00 | 	byte	$00[8]
18da9     18 00 7E 00 
18dad     18 00 00 00 
18db1     00 00 00 00 
18db5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18db9     00 00 00 00 
18dbd     00 00 00 00 | 	byte	$00[8]
18dc1     18 30 1E 00 
18dc5     00 00 1C 36 
18dc9     36 1C 00 00 
18dcd     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
18dd1     00 00 00 00 
18dd5     63 00 00 00 
18dd9     00 00 00 00 
18ddd     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18de1     00 00 00 18 
18de5     18 00 00 00 
18de9     00 00 00 00 
18ded     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18df1     00 00 00 00 
18df5     00          | 	byte	$00[5]
18df6     CC 66 33 00 
18dfa     33 33 33 33 
18dfe     33 33 6E 00 
18e02     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
18e06     00 3F 66 66 
18e0a     66 3E 36 66 
18e0e     66 66 6F 00 
18e12     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
18e16     36 1C 08 00 
18e1a     3B 6E 66 06 
18e1e     06 06 0F 00 
18e22     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
18e26     00 00 00 7E 
18e2a     7E 7E 7E 7E 
18e2e     7E 7E 00 00 
18e32     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
18e36     00 00 00 00 
18e3a     00 00 00 00 
18e3e     00 00 00 00 
18e42     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e44     00 00 00 00 
      ...             
18e74     00 00 00 00 
18e78     00 00 00    | st_font        file "st4font.def"
18e7b     FF FF 00 00 
18e7f     00 00 00 00 
18e83     00 18 18 18 
18e87     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18e8b     18 18 18 18 
18e8f     18 18 18 18 
18e93     18          | 	byte	$18[9]
18e94     00 00 00 00 
18e98     00 00 00    | 	byte	$00[7]
18e9b     FF FF 18 18 
18e9f     18 18 18 18 
18ea3     18 18 18 18 
18ea7     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18eab     FF FF 00 00 
18eaf     00 00 00 00 
18eb3     00 18 18 18 
18eb7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18ebb     1F 1F 18 18 
18ebf     18 18 18 18 
18ec3     18 18 18 18 
18ec7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18ecb     F8 F8 18 18 
18ecf     18 18 18 18 
18ed3     18 00 00 00 
18ed7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18edb     1F 1F 18 18 
18edf     18 18 18 18 
18ee3     18 00 00 00 
18ee7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18eeb     F8 F8 18 18 
18eef     18 18 18 18 
18ef3     18 18 18 18 
18ef7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18efb     1F 1F 00 00 
18eff     00 00 00 00 
18f03     00 18 18 18 
18f07     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18f0b     F8 F8 00 00 
18f0f     00 00 00 00 
18f13     00 18 18 18 
18f17     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18f1b     FF FF 18 18 
18f1f     18 18 18 18 
18f23     18 00 00 18 
18f27     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
18f2b     66 7E 7E 66 
18f2f     66 66 66 30 
18f33     18 00 00 7E 
18f37     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
18f3b     3E 06 06 06 
18f3f     06 7E 7E 18 
18f43     0C 30 18 3C 
18f47     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
18f4b     06 06 06 66 
18f4f     66 7E 3C 00 
18f53     00 30 18 66 
18f57     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
18f5b     7E 7E 76 76 
18f5f     66 66 66 00 
18f63     00 30 18 7C 
18f67     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
18f6b     1C 38 70 60 
18f6f     60 7E 3E 00 
18f73     00 30 18 7E 
18f77     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
18f7b     18 0C 0C 06 
18f7f     06 7E 7E 00 
18f83     00 18 18 00 
18f87     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
18f8b     18 18 0C 0C 
18f8f     06 7E 7E 00 
18f93     00 30 18 3C 
18f97     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
18f9b     66 66 66 66 
18f9f     66          | 	byte	$66[5]
18fa0     7E 3C 00 00 
18fa4     00 00 06 06 
18fa8     06 06 16 1E 
18fac     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
18fb0     7E 7E 00 00 
18fb4     00 00 00 00 
18fb8     00 3C 7C 60 
18fbc     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
18fc0     7E 7C 30 18 
18fc4     00 00 00 00 
18fc8     00 3C 7E 66 
18fcc     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
18fd0     7E 7C 18 0C 
18fd4     00 00 30 18 
18fd8     00 3C 3E 06 
18fdc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
18fe0     7E 7C 00 00 
18fe4     00 00 30 18 
18fe8     00 3E 7E 66 
18fec     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
18ff0     66 66 00 00 
18ff4     00 00 30 18 
18ff8     00 7C 7E 06 
18ffc     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
19000     7E 3E 00 00 
19004     00 00 30 18 
19008     00 7E 7E 30 
1900c     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
19010     7E 7E 00 00 
19014     00 00 18 18 
19018     00 7E 7E 30 
1901c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
19020     7E 7E 00 00 
19024     00 00 30 18 
19028     00 3C 7E 66 
1902c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
19030     7E 3C 00 00 
19034     00 00 1C 1C 
19038     18 18 38 3C 
1903c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
19040     3C 3C 00 00 
19044     00 00 00 00 
19048     00 00 00 00 
1904c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19050     00 00 00 00 
19054     00 00       | 	byte	$00[6]
19056     18 18 18 18 
1905a     18 18 18 18 | 	byte	$18[8]
1905e     00 00 18 18 
19062     00 00 00 00 
19066     66 66 66 66 
1906a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1906e     00 00 00 00 
19072     00 00 00 00 
19076     00          | 	byte	$00[9]
19077     66 66 FF FF 
1907b     66 66 FF FF 
1907f     66 66 00 00 
19083     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
19087     7C 7E 06 06 
1908b     3E 7C 60 60 
1908f     7E 3E 18 18 
19093     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
19097     66 30 30 18 
1909b     18 0C 0C 66 
1909f     66 00 00 00 
190a3     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
190a7     66 66 3C 1C 
190ab     1C FC FE 66 
190af     66 FE FC 00 
190b3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
190b7     18 18 18 18 
190bb     00 00 00 00 
190bf     00 00 00 00 
190c3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
190c7     18 1C 0C 0C 
190cb     0C 0C 0C 0C 
190cf     1C 18 30 00 
190d3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
190d7     18 38 30 30 
190db     30 30 30 30 
190df     38 18 0C 00 
190e3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
190e7     66 66 3C 3C 
190eb     FF FF 3C 3C 
190ef     66 66 00 00 
190f3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
190f7     00 18 18 18 
190fb     7E 7E 18 18 
190ff     18 00 00 00 
19103     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19107     00 00 00 00 
1910b     00 00       | 	byte	$00[6]
1910d     18 18 18 18 
19111     18          | 	byte	$18[5]
19112     0C 04 00 00 
19116     00 00 00 00 
1911a     7E 7E 00 00 
1911e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
19122     00 00 00 00 
19126     00 00 00 00 
1912a     00 00 00 00 
1912e     00          | 	byte	$00[13]
1912f     18 18 18 00 
19133     00 00 00 60 
19137     60 60 30 30 
1913b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1913f     06 06 06 00 
19143     00 00 00 3C 
19147     7E 66 66 66 
1914b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1914f     66 7E 3C 00 
19153     00 00 00 18 
19157     18 1C 1C 18 
1915b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1915f     18 7E 7E 00 
19163     00 00 00 3C 
19167     7E 66 66 30 
1916b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1916f     0C 7E 7E 00 
19173     00 00 00 7E 
19177     7E 30 30 18 
1917b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1917f     66 7E 3C 00 
19183     00 00 00 30 
19187     30 38 38 3C 
1918b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1918f     7E 30 30 00 
19193     00 00 00 7E 
19197     7E 06 06 3E 
1919b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1919f     66 7E 3C 00 
191a3     00 00 00 38 
191a7     3C 0E 06 06 
191ab     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
191af     66 7E 3C 00 
191b3     00 00 00 7E 
191b7     7E 60 60 30 
191bb     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
191bf     0C 0C 0C 00 
191c3     00 00 00 3C 
191c7     7E 66 66 3C 
191cb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
191cf     66 7E 3C 00 
191d3     00 00 00 3C 
191d7     7E 66 66 7E 
191db     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
191df     70 3C 1C 00 
191e3     00 00 00 00 
191e7     00 00 18 18 
191eb     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
191ef     18 18 18 00 
191f3     00 00 00 00 
191f7     00 00 18 18 
191fb     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
191ff     18 18 18 0C 
19203     04 00 00 00 
19207     70 38 1C 0E 
1920b     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1920f     70 00 00 00 
19213     00 00 00 00 
19217     00 00 7E 7E 
1921b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1921f     00 00 00 00 
19223     00 00 00 00 | 	byte	$00[8]
19227     0E 1C 38 70 
1922b     E0 70 38 1C 
1922f     0E 00 00 00 
19233     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
19237     7E 66 66 30 
1923b     30 18 18 18 
1923f     00 18 18 00 
19243     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
19247     7E 66 66 66 
1924b     66 36 06 66 
1924f     66 7E 3C 00 
19253     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
19257     3C 7E 66 66 
1925b     66 7E 7E 66 
1925f     66 66 66 00 
19263     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
19267     7E 66 66 7E 
1926b     3E 66 66 66 
1926f     66 7E 3E 00 
19273     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
19277     7E 66 66 06 
1927b     06 06 06 66 
1927f     66 7E 3C 00 
19283     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
19287     7E 66 66 66 
1928b     66 66 66 66 
1928f     66 7E 3E 00 
19293     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
19297     7E 06 06 3E 
1929b     3E 06 06 06 
1929f     06 7E 7E 00 
192a3     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
192a7     7E 06 06 3E 
192ab     3E 06 06 06 
192af     06 06 06 00 
192b3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
192b7     7E 06 06 76 
192bb     76 66 66 66 
192bf     66 7E 3C 00 
192c3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
192c7     66 66 66 7E 
192cb     7E 66 66 66 
192cf     66 66 66 00 
192d3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
192d7     7E 18 18 18 
192db     18 18 18 18 
192df     18 7E 7E 00 
192e3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
192e7     60 60 60 60 
192eb     60 60 60    | 	byte	$60[7]
192ee     66 66 7E 3C 
192f2     00 00 00 00 
192f6     66 66 36 36 
192fa     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
192fe     66 66 C6 C6 
19302     00 00 00 00 
19306     06 06 06 06 
1930a     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1930e     06 06 7E 7E 
19312     00 00 00 00 
19316     C6 C6 EE EE 
1931a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1931e     C6 C6 C6 C6 
19322     00 00 00 00 
19326     66 66 66 6E 
1932a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1932e     76 66 66 66 
19332     00 00 00 00 
19336     3C 7E 66 66 
1933a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1933e     66 66 7E 3C 
19342     00 00 00 00 
19346     3E 7E 66 66 
1934a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1934e     06 06 06 06 
19352     00 00 00 00 
19356     3C 7E 66 66 
1935a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1935e     66 56 3E 6C 
19362     00 00 00 00 
19366     3E 7E 66 66 
1936a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1936e     66 66 C6 C6 
19372     00 00 00 00 
19376     7C 7E 06 06 
1937a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1937e     60 60 7E 3E 
19382     00 00 00 00 
19386     7E 7E 18 18 
1938a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1938e     18 18 18 18 
19392     00 00 00 00 
19396     66 66 66 66 
1939a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1939e     66 66 7E 3C 
193a2     00 00 00 00 
193a6     66 66 66 66 
193aa     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
193ae     3C 3C 18 18 
193b2     00 00 00 00 
193b6     C6 C6 C6 C6 
193ba     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
193be     FE EE C6 82 
193c2     00 00 00 00 
193c6     66 66 66 3C 
193ca     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
193ce     3C 66 66 66 
193d2     00 00 00 00 
193d6     66 66 66 66 
193da     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
193de     18 18 18 18 
193e2     00 00 00 00 
193e6     7E 7E 30 30 
193ea     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
193ee     06 06 7E 7E 
193f2     00 00 00 00 
193f6     3C 3C 0C 0C 
193fa     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
193fe     0C 0C 3C 3C 
19402     00 00 00 00 
19406     06 06 0C 0C 
1940a     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1940e     60 60 C0 C0 
19412     00 00 00 00 
19416     3C 3C 30 30 
1941a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1941e     30 30 3C 3C 
19422     00 00 00 00 
19426     18 18 3C 3C 
1942a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1942e     00 00 00 00 
19432     00 00 00 00 
19436     00 00 00 00 
1943a     00 00 00 00 
1943e     00 00       | 	byte	$00[18]
19440     FE FE 00 00 
19444     00 00 0C 0C 
19448     18 18 00 00 
1944c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
19450     00 00 00 00 
19454     00 00 00 00 
19458     00          | 	byte	$00[9]
19459     3C 7C 60 7C 
1945d     7E 66 66 7E 
19461     7C 00 00 00 
19465     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
19469     3E 7E 66 66 
1946d     66 66 66 7E 
19471     3E 00 00 00 
19475     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
19479     3C 3E 06 06 
1947d     06 06 06 7E 
19481     7C 00 00 00 
19485     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
19489     7C 7E 66 66 
1948d     66 66 66 7E 
19491     7C 00 00 00 
19495     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
19499     3C 7E 66 66 
1949d     7E 06 06 7E 
194a1     7C 00 00 00 
194a5     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
194a9     18 7E 7E 18 
194ad     18 18 18 18 
194b1     18 00 00 00 
194b5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
194b9     7C 7E 66 66 
194bd     66 66 7E 7C 
194c1     60 7E 3E 00 
194c5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
194c9     3E 7E 66 66 
194cd     66 66 66 66 
194d1     66 00 00 00 
194d5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
194d9     1C 1C 18 18 
194dd     18 18 18 3C 
194e1     3C 00 00 00 
194e5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
194e9     30 30 30 30 
194ed     30 30 30 30 
194f1     30          | 	byte	$30[9]
194f2     3E 1E 00 00 
194f6     06 06 06 36 
194fa     36 1E 1E 1E 
194fe     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
19502     00 00 00 00 
19506     1C 1C 18 18 
1950a     18 18 18 18 
1950e     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
19512     00 00 00 00 
19516     00 00 00    | 	byte	$00[7]
19519     6C FE FE D6 
1951d     D6 C6 C6 C6 
19521     C6 00 00 00 
19525     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
19529     3E 7E 66 66 
1952d     66 66 66 66 
19531     66 00 00 00 
19535     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
19539     3C 7E 66 66 
1953d     66 66 66 7E 
19541     3C 00 00 00 
19545     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
19549     3E 7E 66 66 
1954d     66 66 66 7E 
19551     3E 06 06 00 
19555     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
19559     7C 7E 66 66 
1955d     66 66 66 7E 
19561     7C 60 60 00 
19565     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
19569     3E 7E 66 06 
1956d     06 06 06 06 
19571     06 00 00 00 
19575     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
19579     7C 7E 06 0E 
1957d     3C 70 60 7E 
19581     3E 00 00 00 
19585     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
19589     7E 7E 18 18 
1958d     18 18 18 78 
19591     70 00 00 00 
19595     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
19599     66 66 66 66 
1959d     66 66 66    | 	byte	$66[7]
195a0     7E 7C 00 00 
195a4     00 00 00 00 
195a8     00 66 66 66 
195ac     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
195b0     18 18 00 00 
195b4     00 00 00 00 
195b8     00 C6 C6 D6 
195bc     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
195c0     C6 82 00 00 
195c4     00 00 00 00 
195c8     00 66 66 3C 
195cc     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
195d0     66 66 00 00 
195d4     00 00 00 00 
195d8     00 66 66 66 
195dc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
195e0     7C 60 7E 3E 
195e4     00 00 00 00 
195e8     00 7E 7E 30 
195ec     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
195f0     7E 7E 00 00 
195f4     00 00 30 18 
195f8     18 18 18 0C 
195fc     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
19600     18 30 00 00 
19604     00 00 18 18 
19608     18 18 18 18 
1960c     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19610     18 18 00 00 
19614     00 00 0C 18 
19618     18 18 18 30 
1961c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
19620     18 0C 00 00 
19624     00 00 6C 7E 
19628     36 00 00 00 
1962c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
19630     00 00 00 00 
19634     00 00 00 00 
19638     00          | 	byte	$00[9]
19639     18 18 18 18 
1963d     18 18 00 00 
19641     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19644     00 00 00 00 
19648     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1964c     00 00 00 00 
19650     00 80 80 80 
19654     00 00 00 FF 
19658     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1965c     00 00 00 00 
19660     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
19661     80 00 00 00 
19665     00 80 00 00 
19669     80 80 00 00 
1966d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
19671     80 00 80 00 
19675     00 40 80 00 
19679     AA AA AA 00 
1967d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
19681     FF 00 00 00 
19685     00 FF 00 00 
19689     FF FF 00 00 
1968d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
19691     FF 00 FF 00 
19695     00 FF FF 00 
19699     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1969c     00 00 00 00 
196a0     00          | ataripalette   file "ataripalettep2.def"
196a1     11 11 11 00 
196a5     22 22 22 00 
196a9     33 33 33 00 
196ad     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
196b1     55 55 55 00 
196b5     66 66 66 00 
196b9     77 77 77 00 
196bd     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
196c1     99 99 99 00 
196c5     AA AA AA 00 
196c9     BB BB BB 00 
196cd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
196d1     DD DD DD 00 
196d5     EE EE EE 00 
196d9     FF FF FF 00 
196dd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
196e1     00 14 40 00 
196e5     00 1E 60 00 
196e9     00 28 80 00 
196ed     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
196f1     00 3C BF 00 
196f5     00 46 DF 00 
196f9     00 50 FF 00 
196fd     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
19701     39 77 FF 00 
19705     55 8A FF 00 
19709     71 9E FF 00 
1970d     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
19711     AA C5 FF 00 
19715     C6 D8 FF 00 
19719     E3 EC FF 00 
1971d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
19721     00 00 40 00 
19725     00 00 60 00 
19729     00 00 80 00 
1972d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
19731     00 00 BF 00 
19735     00 00 DF 00 
19739     00 00 FF 00 
1973d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
19741     39 39 FF 00 
19745     55 55 FF 00 
19749     71 71 FF 00 
1974d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
19751     AA AA FF 00 
19755     C6 C6 FF 00 
19759     E3 E3 FF 00 
1975d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
19761     20 00 40 00 
19765     30 00 60 00 
19769     40 00 80 00 
1976d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
19771     60 00 BF 00 
19775     70 00 DF 00 
19779     80 00 FF 00 
1977d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
19781     9C 39 FF 00 
19785     AA 55 FF 00 
19789     B8 71 FF 00 
1978d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
19791     D5 AA FF 00 
19795     E3 C6 FF 00 
19799     F1 E3 FF 00 
1979d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
197a1     40 00 40 00 
197a5     60 00 60 00 
197a9     80 00 80 00 
197ad     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
197b1     BF 00 BF 00 
197b5     DF 00 DF 00 
197b9     FF 00 FF 00 
197bd     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
197c1     FF 39 FF 00 
197c5     FF 55 FF 00 
197c9     FF 71 FF 00 
197cd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
197d1     FF AA FF 00 
197d5     FF C6 FF 00 
197d9     FF E3 FF 00 
197dd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
197e1     40 00 20 00 
197e5     60 00 30 00 
197e9     80 00 40 00 
197ed     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
197f1     BF 00 60 00 
197f5     DF 00 70 00 
197f9     FF 00 80 00 
197fd     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
19801     FF 39 9C 00 
19805     FF 55 AA 00 
19809     FF 71 B8 00 
1980d     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
19811     FF AA D5 00 
19815     FF C6 E3 00 
19819     FF E3 F1 00 
1981d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
19821     40 00 00 00 
19825     60 00 00 00 
19829     80 00 00 00 
1982d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
19831     BF 00 00 00 
19835     DF 00 00 00 
19839     FF 00 00 00 
1983d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
19841     FF 39 39 00 
19845     FF 55 55 00 
19849     FF 71 71 00 
1984d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
19851     FF AA AA 00 
19855     FF C6 C6 00 
19859     FF E3 E3 00 
1985d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
19861     40 10 00 00 
19865     60 18 00 00 
19869     80 20 00 00 
1986d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
19871     BF 30 00 00 
19875     DF 38 00 00 
19879     FF 40 00 00 
1987d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
19881     FF 6A 39 00 
19885     FF 80 55 00 
19889     FF 95 71 00 
1988d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
19891     FF BF AA 00 
19895     FF D5 C6 00 
19899     FF EA E3 00 
1989d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
198a1     40 20 00 00 
198a5     60 30 00 00 
198a9     80 40 00 00 
198ad     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
198b1     BF 60 00 00 
198b5     DF 70 00 00 
198b9     FF 80 00 00 
198bd     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
198c1     FF 9C 39 00 
198c5     FF AA 55 00 
198c9     FF B8 71 00 
198cd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
198d1     FF D5 AA 00 
198d5     FF E3 C6 00 
198d9     FF F1 E3 00 
198dd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
198e1     40 30 00 00 
198e5     60 48 00 00 
198e9     80 60 00 00 
198ed     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
198f1     BF 90 00 00 
198f5     DF A8 00 00 
198f9     FF C0 00 00 
198fd     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
19901     FF CE 39 00 
19905     FF D5 55 00 
19909     FF DC 71 00 
1990d     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
19911     FF EA AA 00 
19915     FF F1 C6 00 
19919     FF F8 E3 00 
1991d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
19921     30 40 00 00 
19925     48 60 00 00 
19929     60 80 00 00 
1992d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
19931     90 BF 00 00 
19935     A8 DF 00 00 
19939     C0 FF 00 00 
1993d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
19941     CE FF 39 00 
19945     D5 FF 55 00 
19949     DC FF 71 00 
1994d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
19951     EA FF AA 00 
19955     F1 FF C6 00 
19959     F8 FF E3 00 
1995d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
19961     00 40 00 00 
19965     00 60 00 00 
19969     00 80 00 00 
1996d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
19971     00 BF 00 00 
19975     00 DF 00 00 
19979     00 FF 00 00 
1997d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
19981     39 FF 39 00 
19985     55 FF 55 00 
19989     71 FF 71 00 
1998d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
19991     AA FF AA 00 
19995     C6 FF C6 00 
19999     E3 FF E3 00 
1999d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
199a1     00 40 14 00 
199a5     00 60 1E 00 
199a9     00 80 28 00 
199ad     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
199b1     00 BF 3C 00 
199b5     00 DF 46 00 
199b9     00 FF 50 00 
199bd     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
199c1     39 FF 77 00 
199c5     55 FF 8A 00 
199c9     71 FF 9E 00 
199cd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
199d1     AA FF C5 00 
199d5     C6 FF D8 00 
199d9     E3 FF EC 00 
199dd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
199e1     00 40 28 00 
199e5     00 60 3C 00 
199e9     00 80 50 00 
199ed     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
199f1     00 BF 78 00 
199f5     00 DF 8C 00 
199f9     00 FF A0 00 
199fd     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
19a01     39 FF B5 00 
19a05     55 FF C0 00 
19a09     71 FF CA 00 
19a0d     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
19a11     AA FF DF 00 
19a15     C6 FF EA 00 
19a19     E3 FF F4 00 
19a1d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
19a21     00 40 40 00 
19a25     00 60 60 00 
19a29     00 80 80 00 
19a2d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
19a31     00 BF BF 00 
19a35     00 DF DF 00 
19a39     00 FF FF 00 
19a3d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
19a41     39 FF FF 00 
19a45     55 FF FF 00 
19a49     71 FF FF 00 
19a4d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
19a51     AA FF FF 00 
19a55     C6 FF FF 00 
19a59     E3 FF FF 00 
19a5d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
19a61     00 28 40 00 
19a65     00 3C 60 00 
19a69     00 50 80 00 
19a6d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
19a71     00 78 BF 00 
19a75     00 8C DF 00 
19a79     00 A0 FF 00 
19a7d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
19a81     39 B5 FF 00 
19a85     55 C0 FF 00 
19a89     71 CA FF 00 
19a8d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
19a91     AA DF FF 00 
19a95     C6 EA FF 00 
19a99     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
19a9c                 | '**********************************************************************************
19a9c                 | '
19a9c                 | '        Timings and colors definitions
19a9c                 | '
19a9c                 | '**********************************************************************************
19a9c                 | 
19a9c                 |    'streamer sets for text mode, to add to timings[0..5]
19a9c                 | ' todo for the retromachine: 768x576
19a9c                 | 
19a9c                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
19a9c     10 00 00 00 
19aa0     50 00 00 00 
19aa4     14 00 00 00 
19aa8     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19aac     70 00 00 00 
19ab0     08 00 00 00 
19ab4     30 00 00 00 
19ab8     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
19abc     10 00 00 00 
19ac0     10 00 00 00 
19ac4     00 00 00 00 
19ac8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
19acc     E0 01 00 00 
19ad0     F6 32 24 15 
19ad4     FB 6C C3 01 
19ad8     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19adc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
19adc                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
19adc     30 00 00 00 
19ae0     50 00 00 00 
19ae4     34 00 00 00 
19ae8     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
19aec     20 00 00 00 
19af0     08 00 00 00 
19af4     16 00 00 00 
19af8     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
19afc     24 00 00 00 
19b00     18 00 00 00 
19b04     40 00 00 00 
19b08     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
19b0c     F0 01 00 00 
19b10     F6 32 24 15 
19b14     FB 6C C3 01 
19b18     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
19b1c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
19b1c     10 00 00 00 
19b20     40 00 00 00 
19b24     10 00 00 00 
19b28     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
19b2c     08 00 00 00 
19b30     08 00 00 00 
19b34     08 00 00 00 
19b38     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
19b3c     40 00 00 00 
19b40     20 00 00 00 
19b44     80 00 00 00 
19b48     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
19b4c     E0 01 00 00 
19b50     70 AE E9 10 
19b54     FB 8B FF 01 
19b58     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
19b5c     10 00 00 00 
19b60     42 00 00 00 
19b64     14 00 00 00 
19b68     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19b6c     00 00 00 00 
19b70     08 00 00 00 
19b74     00 00 00 00 
19b78     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
19b7c     10 00 00 00 
19b80     10 00 00 00 
19b84     C0 00 00 00 
19b88     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
19b8c     40 02 00 00 
19b90     F6 32 24 15 
19b94     FB 6C C3 01 
19b98     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19b9c     50 00 00 00 
19ba0     A0 00 00 00 
19ba4     54 00 00 00 
19ba8     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
19bac     08 00 00 00 
19bb0     08 00 00 00 
19bb4     08 00 00 00 
19bb8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19bbc     0C 00 00 00 
19bc0     08 00 00 00 
19bc4     00 01 00 00 
19bc8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
19bcc     E0 01 00 00 
19bd0     10 06 56 15 
19bd4     FB 64 C3 01 
19bd8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
19bdc     50 00 00 00 
19be0     32 00 00 00 
19be4     50 00 00 00 
19be8     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19bec     08 00 00 00 
19bf0     08 00 00 00 
19bf4     08 00 00 00 
19bf8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19bfc     0C 00 00 00 
19c00     08 00 00 00 
19c04     40 01 00 00 
19c08     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
19c0c     E0 01 00 00 
19c10     F2 CD 33 13 
19c14     FB 53 92 01 
19c18     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19c1c     18 00 00 00 
19c20     30 00 00 00 
19c24     18 00 00 00 
19c28     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
19c2c     08 00 00 00 
19c30     08 00 00 00 
19c34     08 00 00 00 
19c38     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19c3c     0C 00 00 00 
19c40     08 00 00 00 
19c44     80 01 00 00 
19c48     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
19c4c     E0 01 00 00 
19c50     F4 8F 11 11 
19c54     FB 3A 55 01 
19c58     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
19c5c     20 00 00 00 
19c60     40 00 00 00 
19c64     22 00 00 00 
19c68     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19c6c     00 00 00 00 
19c70     08 00 00 00 
19c74     00 00 00 00 
19c78     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
19c7c     0C 00 00 00 
19c80     08 00 00 00 
19c84     C0 01 00 00 
19c88     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
19c8c     F0 01 00 00 
19c90     F2 CD 33 13 
19c94     FB 53 92 01 
19c98     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19c9c                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
19c9c     00 75 C7 97 
19ca0     27 47 F6 0A 
19ca4     05 79 CB 9B 
19ca8     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
19cac                 | 
19cac     28 12 64 FD | hdmi            setq    #9
19cb0     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
19cb4                 |            '     setq2   #255
19cb4                 |             '    rdlong  $100, paletteptr 
19cb4     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
19cb8     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
19cbc     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
19cc0     78 F9 02 F1 |                 add     ii,hbase
19cc4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
19cc8     7B 0B 80 FF 
19ccc     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
19cd0                 | 
19cd0     66 66 86 FF 
19cd4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
19cd8                 | 
19cd8                 | 
19cd8                 | ''--------  frame rendering main loop  ---------------------------------------------------
19cd8                 | 
19cd8                 | p101
19cd8     28 14 64 FD |                 setq    #10
19cdc     00 DF 06 FB |                 rdlong  framebuf,  ptra
19ce0     28 1E 64 FD |                 setq    #15
19ce4     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
19ce8     71 99 02 FB |                 rdlong  border,borderptr
19cec                 | 
19cec     01 C4 06 F1 |                 add     frames,#1
19cf0     76 F5 02 F6 |                 mov     dlptr2,dlptr
19cf4                 | 
19cf4     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
19cf8     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
19cfc     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
19d00     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
19d04                 |  '' up porch
19d04                 | 
19d04     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
19d08     49 FF 02 F6 |                 mov     hsync1,sync_001
19d0c     37 A8 46 FB |                 callpa  i_upporch ,#blank
19d10     72 01 68 FC |                 wrlong  #0,vblankptr
19d14                 |                 
19d14     1F EA 16 F4 |                 testb   paletteptr,#31 wc
19d18     29 FE 65 3D |          if_nc  setq2   #255
19d1c     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
19d20                 | 
19d20                 | '' cursor blinking
19d20                 | 
19d20     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
19d24     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
19d28                 | 
19d28                 | '' main screen
19d28                 | 
19d28     00 BE 06 F6 |                 mov linenum,#0
19d2c     00 18 07 F6 |                 mov rcnt,#0
19d30     00 1C 07 F6 |                 mov rcnt2a,#0
19d34                 | 
19d34                 | 
19d34     00 18 0F F2 | p301            cmp rcnt,#0 wz
19d38     18 00 90 AD |         if_z    jmp #p306
19d3c     01 18 87 F1 |                 sub rcnt,#1
19d40     90 F7 02 F6 |                 mov dl,rdl
19d44     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
19d48     8F F7 02 A1 |    if_z        add dl,roffset  
19d4c     7B 21 03 F6 |                 mov rdl,dl
19d50     04 00 90 FD |                 jmp #p307          
19d54                 |           
19d54                 |                 
19d54     7A F7 02 FB | p306            rdlong  dl,dlptr2
19d58     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
19d5c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
19d60     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
19d64                 | 
19d64                 | '' Special entry:
19d64                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
19d64                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
19d64                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
19d64                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
19d64                 | '' todo: set horizontal scroll (if needed)
19d64                 | 
19d64     02 FA 66 F0 |                 shl framebuf2,#2
19d68     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
19d6c     04 22 0F F2 |                 cmp dlc,#%100 wz
19d70                 |   
19d70                 |                 
19d70     04 F4 06 F1 |                 add dlptr2,#4
19d74     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
19d78     7A 21 03 FB |                  rdlong rdl,dlptr2
19d7c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
19d80     04 18 47 F0 |                  shr rcnt,#4
19d84                 |              
19d84     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
19d88     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
19d8c                 |                 
19d8c     04 1E 47 F0 |                  shr roffset,#4
19d90     0C 1E 67 F0 |                  shl roffset,#12
19d94                 |   
19d94     9C FF 9F FD |                  jmp #p301
19d98                 |                  
19d98                 |                  
19d98                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
19d98     0C FA 46 F0 |                 shr     framebuf2,#12
19d9c     02 FA 66 F0 |                 shl     framebuf2,#2
19da0                 | 
19da0     7B 03 E3 F8 |                 getbyte t1,dl,#0
19da4     00 02 0F F2 |                 cmp     t1,#0 wz
19da8     34 00 90 AD |     if_z        jmp     #borderline
19dac                 | 
19dac     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
19db0     50 00 90 CD |           if_c   jmp     #textline
19db4     50 02 90 3D |           if_nc  jmp     #graphline
19db8                 | '
19db8     01 BE 06 F1 | p302            add     linenum,#1
19dbc     04 F4 06 F1 |                 add     dlptr2,#4
19dc0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
19dc4     6C FF 9F 5D |          if_nz  jmp     #p301
19dc8                 | 
19dc8     72 03 68 FC | p112            wrlong  #1,vblankptr
19dcc     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
19dd0                 | 
19dd0     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
19dd4     4B FF 02 F6 |                 mov     hsync1,sync_223
19dd8     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
19ddc     F8 FE 9F FD |                 jmp     #p101
19de0                 | 
19de0                 | '' ---------------  END of frame rendering loop -------------------------------------------
19de0                 | 
19de0                 | 
19de0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
19de4     4C A1 C2 FC |                 xcont   m_vi,border
19de8     CC FF 9F FD |                 jmp     #p302
19dec                 | 
19dec                 | 
19dec     08 00 B0 FD | blank           call    #hsync                          'blank lines
19df0     7E A1 C2 FC |                 xcont   m_vi,hsync0
19df4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
19df8                 | 
19df8     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
19dfc     7F 9D B2 FC |                 xzero   m_sn,hsync1
19e00     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
19e04                 | 
19e04                 | 
19e04                 | 
19e04                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
19e04                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
19e04                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
19e04                 | 
19e04                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
19e04                 | 
19e04     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
19e08                 | 
19e08     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
19e0c     7B 17 5B F8 |                 getnib  zoom, dl,#3
19e10     03 16 07 F5 |                 and             zoom, #3
19e14                 | 
19e14                 | 
19e14                 | 
19e14     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
19e18     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
19e1c     3F BC 06 F5 |                 and     linestart,#63
19e20     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
19e24     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
19e28                 | 
19e28     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
19e2c                 | 
19e2c                 |                        ' if fontline =0, get a border color
19e2c                 | 
19e2c     51 03 33 F9 | p102            getword t1,m_border,#0
19e30     00 02 0F F2 |                 cmp     t1, #0 wz
19e34     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
19e38                 | 
19e38     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
19e3c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
19e40     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
19e44     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
19e48     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
19e4c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
19e50     52 BB 02 F6 |                 mov m_lut2, m_lut1
19e54     6A BB 02 F1 |                 add m_lut2, lutt1
19e58     58 0F 03 F6 |                 mov cpl2,i_cpl
19e5c                 | 
19e5c     02 16 0F F2 |                cmp zoom,#2 wz
19e60     E4 00 90 AD |           if_z jmp #p420
19e64     01 16 0F F2 |                cmp zoom,#1 wz
19e68     64 00 90 AD |           if_z jmp #p410
19e6c     00 16 0F F2 |                 cmp zoom,#0 wz
19e70     04 00 90 AD |           if_z jmp #p400
19e74     50 01 90 FD |                jmp #p430
19e78                 | 
19e78                 |                    '
19e78                 |  ''---------------------------------------------------------------------------------------------------------
19e78     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
19e7c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19e80     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19e84     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19e88     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19e8c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19e90     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19e94     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19e98     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19e9c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19ea0                 | 
19ea0     81 BB C2 FC |                         xcont m_lut2,t1
19ea4                 | 
19ea4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19ea8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19eac     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19eb0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19eb4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19eb8     01 C0 86 F1 |                         sub     lutaddr,#1
19ebc                 | 
19ebc     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19ec0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19ec4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19ec8                 | 
19ec8     EB 0F 6F FB |                         djnz   cpl2,#p400
19ecc     28 01 90 FD |  p401                   jmp    #p103
19ed0                 | 
19ed0                 | ''------------------------------------------------------------------------------------------------------------
19ed0                 | 
19ed0     01 0E 47 F0 |  p410                   shr cpl2,#1
19ed4                 | 
19ed4                 | ''---------------------------------------------------------------------------------------------------------
19ed4     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
19ed8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19edc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19ee0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19ee4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19ee8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19eec     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19ef0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19ef4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19ef8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19efc                 | 
19efc                 | 
19efc     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
19f00     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
19f04     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
19f08     03 02 07 FA |                         mul t1,#3
19f0c     81 BB C2 FC |                         xcont m_lut2,t1
19f10     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19f14     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19f18     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19f1c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19f20     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19f24     01 C0 86 F1 |                         sub     lutaddr,#1
19f28     63 06 63 FD |                         mergew t3
19f2c     03 06 07 FA |                         mul t3,#3
19f30     83 BB C2 FC |                         xcont m_lut2,t3
19f34                 | 
19f34     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19f38     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19f3c                 | 
19f3c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19f40                 | 
19f40     E4 0F 6F FB |                         djnz   cpl2,#p412
19f44     B0 00 90 FD |  p411                   jmp    #p103
19f48                 | 
19f48                 | ''------------------------------------------------------------------------------------------------------------
19f48                 | 
19f48     02 0E 47 F0 |  p420                   shr cpl2,#2
19f4c                 | 
19f4c                 | ''---------------------------------------------------------------------------------------
19f4c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
19f50     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19f54     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19f58     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19f5c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19f60     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19f64     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19f68     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19f6c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19f70     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19f74                 | 
19f74     61 02 63 FD |                         mergeb t1
19f78     81 07 3B F9 |                         getword t3,t1,#1
19f7c     0F 02 07 FA |                         mul t1,#15
19f80     81 BB C2 FC |                         xcont m_lut2,t1
19f84                 | 
19f84     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19f88     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19f8c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19f90     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19f94     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19f98     01 C0 86 F1 |                         sub     lutaddr,#1
19f9c                 | 
19f9c     81 09 EB F8 |                         getbyte t4,t1,#1        '
19fa0     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
19fa4                 | 
19fa4     0F 06 07 FA |                         mul t3,#15
19fa8     83 BB C2 FC |                         xcont m_lut2,t3
19fac                 | 
19fac     83 0B EB F8 |                         getbyte t5,t3,#1
19fb0     85 BB C2 FC |                         xcont m_lut2, t5
19fb4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19fb8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19fbc                 | 
19fbc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19fc0                 | 
19fc0     E2 0F 6F FB |                         djnz   cpl2,#p422
19fc4     30 00 90 FD |  p421                   jmp    #p103
19fc8                 | 
19fc8                 | '--------------------------------------------------------------------------------------------------------------
19fc8                 | 
19fc8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
19fcc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19fd0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19fd4                 | 
19fd4     00 BA C6 FC |                         xcont m_lut2,#0
19fd8                 | 
19fd8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19fdc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19fe0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19fe4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19fe8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19fec     01 C0 86 F1 |                         sub     lutaddr,#1
19ff0                 | 
19ff0     F5 0F 6F FB |                         djnz   cpl2,#p430
19ff4     00 00 90 FD |  p431                   jmp    #p103
19ff8                 | 
19ff8                 | ''------------------------------------------------------------------------------------------------------------
19ff8                 | 
19ff8                 | 
19ff8                 | 
19ff8     51 25 33 F9 | p103            getword  mb2,m_border,#0
19ffc     00 24 0F F2 |                 cmp      mb2, #0 wz
1a000     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a004                 | 
1a004     B0 FD 9F FD |                 jmp #p302
1a008                 | 
1a008                 | '' -------------------------------------- END of text line ---------------------------------
1a008                 | 
1a008                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1a008                 | 
1a008     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1a00c                 | 
1a00c                 | 
1a00c     51 25 33 F9 | p202            getword mb2,m_border,#0
1a010     00 24 0F F2 |                 cmp     mb2, #0 wz
1a014     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1a018                 | 
1a018                 | '----------------------------------------- display pixels
1a018                 | 
1a018     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1a01c     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1a020                 | 
1a020     7B 17 5B F8 |                 getnib  zoom, dl,#3
1a024     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1a028                 | 
1a028     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1a02c     0C BC 06 F5 |                 and     colordepth,#12
1a030                 | 
1a030     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1a034     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1a038     64 00 90 AD |           if_z  jmp     #p240
1a03c                 | 
1a03c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1a040     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1a044     98 00 90 AD |           if_z  jmp     #p250
1a048                 | 
1a048     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1a04c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1a050     FC 00 90 AD |           if_z  jmp     #p260
1a054                 | 
1a054     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1a058                 | 
1a058                 | '' --- 8 bit color modes
1a058                 | 
1a058     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1a05c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a060                 | 
1a060     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1a064     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1a068                 |        
1a068                 |  '  
1a068     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1a06c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1a070                 |     
1a070                 |  
1a070     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1a074     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1a078                 |         
1a078                 | 
1a078                 |         
1a078     7D 11 03 FB | p235               rdlong  char,framebuf2
1a07c     32 0C 63 FD |                    skipf skippattern
1a080     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1a084     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1a088     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1a08c     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1a090     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1a094     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1a098     F7 0F 6F FB |                    djnz    cpl2,#p235
1a09c                 | 
1a09c     20 01 90 FD |                jmp    #p203
1a0a0                 |                   
1a0a0                 | 
1a0a0                 | 
1a0a0                 | '' --- 1 bit color modes
1a0a0                 | 
1a0a0     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1a0a4     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a0a8                 | 
1a0a8     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1a0ac     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1a0b0     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1a0b4                 | 
1a0b4                 | 
1a0b4     7D 11 E3 FA | p241               rdword  char,framebuf2
1a0b8     44 10 FF F9 |                    movbyts char,#%01000100
1a0bc     63 10 63 FD |                    mergew  char
1a0c0     32 0C 63 FD |                    skipf skippattern
1a0c4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1a0c8     63 10 63 FD |                    mergew  char                    ' 1 0
1a0cc     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1a0d0     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1a0d4     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1a0d8     F6 0F 6F FB |                    djnz   cpl2,#p241
1a0dc                 | 
1a0dc                 | 
1a0dc     E0 00 90 FD |                jmp    #p203
1a0e0                 | 
1a0e0                 | '' --- 2 bit color modes
1a0e0                 | 
1a0e0     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1a0e4     C8 00 90 AD |        if_z   jmp #p251
1a0e8                 | 
1a0e8     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a0ec     30 00 90 AD |        if_z   jmp #p252
1a0f0                 | 
1a0f0                 | 
1a0f0     7D 11 C3 FA | p254               rdbyte char,framebuf2
1a0f4     04 0A 07 F6 |                    mov  t5,#4
1a0f8     02 10 67 F0 | p255               shl  char,#2
1a0fc     88 03 53 F8 |                    getnib  t1,char,#2
1a100     03 02 07 F5 |                    and     t1,#3
1a104     55 02 07 FA |                    mul     t1,#$55
1a108     81 05 03 F9 |                    rolbyte  t2,t1,#0
1a10c     FA 0B 6F FB |                    djnz    t5,#p255
1a110     82 BB C2 FC |                    xcont   m_lut2,t2
1a114     01 FA 06 F1 |                    add     framebuf2,#1
1a118     F5 0F 6F FB |                    djnz    cpl2,#p254
1a11c     A0 00 90 FD |                    jmp     #p203
1a120                 | 
1a120     7D 11 E3 FA | p252               rdword char,framebuf2
1a124     08 0A 07 F6 |                    mov  t5,#8
1a128     02 10 67 F0 | p253               shl  char,#2
1a12c     88 03 63 F8 |                    getnib  t1,char,#4
1a130     03 02 07 F5 |                    and     t1,#3
1a134     05 02 07 FA |                    mul     t1,#5
1a138     81 05 83 F8 |                    rolnib  t2,t1,#0
1a13c     FA 0B 6F FB |                    djnz    t5,#p253
1a140     82 BB C2 FC |                    xcont   m_lut2,t2
1a144     02 FA 06 F1 |                    add     framebuf2,#2
1a148     F5 0F 6F FB |                    djnz    cpl2,#p252
1a14c     70 00 90 FD |                    jmp     #p203
1a150                 | 
1a150                 | '' ------ 4 bit color modes
1a150                 | 
1a150     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1a154     58 00 90 AD |        if_z   jmp #p251
1a158                 | 
1a158     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a15c     2C 00 90 AD |        if_z   jmp #p262
1a160                 | 
1a160                 | 
1a160     7D 11 C3 FA | p263               rdbyte char,framebuf2
1a164     02 0A DC FC |                            rep #5,#2
1a168     88 05 8B F8 |                              rolnib t2,char,#1
1a16c     88 05 8B F8 |                                  rolnib t2,char,#1
1a170     88 05 8B F8 |                              rolnib t2,char,#1
1a174     88 05 8B F8 |                                  rolnib t2,char,#1
1a178     04 10 67 F0 |                              shl char,#4
1a17c     82 BB C2 FC |                    xcont   m_lut2,t2
1a180     01 FA 06 F1 |                    add     framebuf2,#1
1a184     F6 0F 6F FB |                    djnz    cpl2,#p263
1a188     34 00 90 FD |                    jmp     #p203
1a18c                 | 
1a18c     7D 11 E3 FA | p262               rdword  char,framebuf2
1a190     04 06 DC FC |                            rep #3,#4
1a194     88 05 9B F8 |                              rolnib t2,char,#3
1a198     88 05 9B F8 |                                  rolnib t2,char,#3
1a19c     04 10 67 F0 |                              shl char,#4
1a1a0     82 BB C2 FC |                    xcont   m_lut2,t2
1a1a4     02 FA 06 F1 |                    add     framebuf2,#2
1a1a8     F8 0F 6F FB |                    djnz    cpl2,#p262
1a1ac     10 00 90 FD |                    jmp     #p203
1a1b0                 | 
1a1b0                 | ''---------- all color modes without zoom
1a1b0                 | 
1a1b0     87 07 D8 FC | p251               rep  #3,cpl2
1a1b4     7D 11 03 FB |                    rdlong  char,framebuf2
1a1b8     04 FA 06 F1 |                    add     framebuf2,#4
1a1bc     88 BB C2 FC |                    xcont   m_lut2,char
1a1c0                 |           
1a1c0                 |  ''-----------------------------------------------------------------------------------------
1a1c0                 | p203           ' getword  mb2,m_border,#0
1a1c0     00 24 0F F2 |                 cmp      mb2, #0 wz
1a1c4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a1c8                 | 
1a1c8     EC FB 9F FD |                 jmp #p302
1a1cc                 | 
1a1cc                 | '' -------------------------------------- END of graph  line ---------------------------------
1a1cc                 | 
1a1cc                 | '' consts and vars
1a1cc                 | 
1a1cc     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1a1d0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1a1d4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1a1d8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1a1dc                 | 
1a1dc     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1a1e0                 | 
1a1e0                 | '------ these longs will be set by setmode function
1a1e0                 | 
1a1e0     00 00 00 00 | m_bs            long    0        'blanks before sync
1a1e4     00 00 00 00 | m_sn            long    0        'sync
1a1e8     00 00 00 00 | m_bv            long    0        'blanks before visible
1a1ec     00 00 00 00 | m_vi            long    0        'visible pixels #
1a1f0     00 00 00 00 | m_border        long    0        'left/right borders
1a1f4     00 00 00 00 | m_lut1          long    0        'characters
1a1f8     00 00 00 00 | i_vborder       long    0        'up/down borders
1a1fc     00 00 00 00 | i_upporch       long    0        'up porch lines
1a200     00 00 00 00 | i_vsync         long    0        'vsync lines
1a204     00 00 00 00 | i_downporch     long    0        'down porch lines
1a208     00 00 00 00 | i_modenum       long    0        'mode #
1a20c     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1a210     00 00 00 00 | i_lines         long    0        'scanlines #
1a214     00 00 00 00 | i_clock         long    0
1a218     00 00 00 00 | i_hubset        long    0
1a21c     00 00 00 00 | i_totalvis      long    0
1a220                 | 
1a220                 | '-------------------------------------
1a220                 | 
1a220     00 00 00 00 | m_lut2          long    0
1a224                 | 
1a224                 | colordepth
1a224     00 00 00 00 | linestart       long    0
1a228     00 00 00 00 | linenum         long    0
1a22c     00 01 00 00 | lutaddr         long    256
1a230                 | 
1a230     0E 00 00 00 | cursorsh        long    14
1a234     00 00 00 00 | frames          long    0
1a238     00 00 00 00 | cursorx         long    0
1a23c     00 00 00 00 | cursory         long    0
1a240     00 00 00 00 | cursorpos       long    0
1a244     00 00 00 00 | cursorpos2      long    0
1a248     00 00 00 00 | fontstart       long    0
1a24c     00 00 00 00 | border2         long 0
1a250     00 00 81 70 | lutiv           long $70810000
1a254     00 00 88 00 | lutt1           long $00880000
1a258     00 00 80 00 | lutg1           long $00800000
1a25c     00 00 80 10 | lutg2           long $10800000
1a260     00 00 80 20 | lutg4           long $20800000
1a264     00 00 80 30 | lutg8           long $30800000
1a268     00 00 00 00 | framebuf        long 0
1a26c     00 00 00 00 | fontbuf         long 0
1a270     00 00 00 00 | borderptr       long 0
1a274     00 00 00 00 | vblankptr       long 0
1a278     00 00 00 00 | cursorptr       long 0
1a27c     00 00 00 00 | modeptr         long 0
1a280     00 00 00 00 | paletteptr      long 0
1a284     00 00 00 00 | dlptr           long 0
1a288                 | fontnumptr      res     1
1a288                 | fontnumptr      res     1
1a288                 | hbase           res     1
1a288                 | hbase           res     1
1a288                 | borderptr2      res     1
1a288                 | borderptr2      res     1
1a288                 | dlptr2 res 1
1a288                 | dlptr2 res 1
1a288                 | dl              res 1
1a288                 | dl              res 1
1a288                 | ii              res     1
1a288                 | ii              res     1
1a288                 | framebuf2       res     1
1a288                 | framebuf2       res     1
1a288                 | hsync0          res     1
1a288                 | hsync0          res     1
1a288                 | hsync1          res     1
1a288                 | hsync1          res     1
1a288                 | fontline        res     1
1a288                 | fontline        res     1
1a288                 | t1              res     1
1a288                 | t1              res     1
1a288                 | t2              res     1
1a288                 | t2              res     1
1a288                 | t3 res 1
1a288                 | t3 res 1
1a288                 | t4 res 1
1a288                 | t4 res 1
1a288                 | t5 res 1
1a288                 | t5 res 1
1a288                 | skippattern res 1
1a288                 | skippattern res 1
1a288                 | cpl2 res 1
1a288                 | cpl2 res 1
1a288                 | char            res     1
1a288                 | char            res     1
1a288                 | backcolor       res     1
1a288                 | backcolor       res     1
1a288                 | charcolor       res     1
1a288                 | charcolor       res     1
1a288                 | zoom res 1
1a288                 | zoom res 1
1a288     00 00 00 00 | rcnt long 0 'dl repeat count
1a28c     00 00 00 00 | rcnt2 long 0
1a290     00 00 00 00 | rcnt2a long 0
1a294     00 00 00 00 | roffset long 0
1a298     00 00 00 00 | rdl long 0  'dl repeat line
1a29c     00 00 00 00 | dlc long 0 'dl command
1a2a0     00 00 00 00 | mb2 long 0
1a2a4     00 00 00 00 | aend             long 0
1a2a8                 |                 fit     496                     '
1a2a8                 | _trackerplayer_spin2_dat_
1a2a8                 | 
1a2a8     00 00 00 00 | null             long  0
1a2ac     46 52 45 51 
1a2b0     46 52 45 51 
1a2b4     46 52 45 51 
1a2b8     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1a2bc     46 52 45 51 
1a2c0     46 52 45 51 
1a2c4     46 52 45 51 
1a2c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2cc     46 52 45 51 
1a2d0     46 52 45 51 
1a2d4     46 52 45 51 
1a2d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2dc     46 52 45 51 
1a2e0     46 52 45 51 
1a2e4     46 52 45 51 
1a2e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2ec     46 52 45 51 
1a2f0     46 52 45 51 
1a2f4     46 52 45 51 
1a2f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2fc     46 52 45 51 
1a300     46 52 45 51 
1a304     46 52 45 51 
1a308     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a30c     46 52 45 51 
1a310     46 52 45 51 
1a314     46 52 45 51 
1a318     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a31c     46 52 45 51 
1a320     46 52 45 51 
1a324     46 52 45 51 
1a328     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a32c     46 52 45 51 
1a330     46 52 45 51 
1a334     46 52 45 51 
1a338     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a33c     46 52 45 51 
1a340     46 52 45 51 
1a344     46 52 45 51 
1a348     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a34c     46 52 45 51 
1a350     46 52 45 51 
1a354     46 52 45 51 
1a358     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a35c     46 52 45 51 
1a360     46 52 45 51 
1a364     46 52 45 51 
1a368     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a36c     46 52 45 51 
1a370     46 52 45 51 
1a374     46 52 45 51 
1a378     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a37c     46 52 45 51 
1a380     46 52 45 51 
1a384     46 52 45 51 
1a388     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a38c     46 52 45 51 
1a390     46 52 45 51 
1a394     46 52 45 51 
1a398     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a39c     46 52 45 51 
1a3a0     46 52 45 51 
1a3a4     46 52 45 51 
1a3a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3ac     46 52 45 51 
1a3b0     46 52 45 51 
1a3b4     46 52 45 51 
1a3b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3bc     46 52 45 51 
1a3c0     46 52 45 51 
1a3c4     46 52 45 51 
1a3c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3cc     46 52 45 51 
1a3d0     46 52 45 51 
1a3d4     46 52 45 51 
1a3d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3dc     46 52 45 51 
1a3e0     46 52 45 51 
1a3e4     46 52 45 51 
1a3e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3ec     46 52 45 51 
1a3f0     46 52 45 51 
1a3f4     46 52 45 51 
1a3f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3fc     46 52 45 51 
1a400     46 52 45 51 
1a404     46 52 45 51 
1a408     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a40c     46 52 45 51 
1a410     46 52 45 51 
1a414     46 52 45 51 
1a418     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a41c     46 52 45 51 
1a420     46 52 45 51 
1a424     46 52 45 51 
1a428     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a42c     46 52 45 51 
1a430     46 52 45 51 
1a434     46 52 45 51 
1a438     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a43c     46 52 45 51 
1a440     46 52 45 51 
1a444     46 52 45 51 
1a448     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a44c     46 52 45 51 
1a450     46 52 45 51 
1a454     46 52 45 51 
1a458     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a45c     46 52 45 51 
1a460     46 52 45 51 
1a464     46 52 45 51 
1a468     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a46c     46 52 45 51 
1a470     46 52 45 51 
1a474     46 52 45 51 
1a478     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a47c     46 52 45 51 
1a480     46 52 45 51 
1a484     46 52 45 51 
1a488     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a48c     46 52 45 51 
1a490     46 52 45 51 
1a494     46 52 45 51 
1a498     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a49c     46 52 45 51 
1a4a0     46 52 45 51 
1a4a4     46 52 45 51 
1a4a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4ac     46 52 45 51 
1a4b0     46 52 45 51 
1a4b4     46 52 45 51 
1a4b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4bc     46 52 45 51 
1a4c0     46 52 45 51 
1a4c4     46 52 45 51 
1a4c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4cc     46 52 45 51 
1a4d0     46 52 45 51 
1a4d4     46 52 45 51 
1a4d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4dc     46 52 45 51 
1a4e0     46 52 45 51 
1a4e4     46 52 45 51 
1a4e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4ec     46 52 45 51 
1a4f0     46 52 45 51 
1a4f4     46 52 45 51 
1a4f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4fc     46 52 45 51 
1a500     46 52 45 51 
1a504     46 52 45 51 
1a508     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a50c     46 52 45 51 
1a510     46 52 45 51 
1a514     46 52 45 51 
1a518     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a51c     46 52 45 51 
1a520     46 52 45 51 
1a524     46 52 45 51 
1a528     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a52c     46 52 45 51 
1a530     46 52 45 51 
1a534     46 52 45 51 
1a538     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a53c     46 52 45 51 
1a540     46 52 45 51 
1a544     46 52 45 51 
1a548     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a54c     46 52 45 51 
1a550     46 52 45 51 
1a554     46 52 45 51 
1a558     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a55c     46 52 45 51 
1a560     46 52 45 51 
1a564     46 52 45 51 
1a568     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a56c     46 52 45 51 
1a570     46 52 45 51 
1a574     46 52 45 51 
1a578     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a57c     46 52 45 51 
1a580     46 52 45 51 
1a584     46 52 45 51 
1a588     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a58c     46 52 45 51 
1a590     46 52 45 51 
1a594     46 52 45 51 
1a598     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a59c     46 52 45 51 
1a5a0     46 52 45 51 
1a5a4     46 52 45 51 
1a5a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5ac     46 52 45 51 
1a5b0     46 52 45 51 
1a5b4     46 52 45 51 
1a5b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5bc     46 52 45 51 
1a5c0     46 52 45 51 
1a5c4     46 52 45 51 
1a5c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5cc     46 52 45 51 
1a5d0     46 52 45 51 
1a5d4     46 52 45 51 
1a5d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5dc     46 52 45 51 
1a5e0     46 52 45 51 
1a5e4     46 52 45 51 
1a5e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5ec     46 52 45 51 
1a5f0     46 52 45 51 
1a5f4     46 52 45 51 
1a5f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5fc     46 52 45 51 
1a600     46 52 45 51 
1a604     46 52 45 51 
1a608     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a60c     46 52 45 51 
1a610     46 52 45 51 
1a614     46 52 45 51 
1a618     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a61c     46 52 45 51 
1a620     46 52 45 51 
1a624     46 52 45 51 
1a628     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a62c     46 52 45 51 
1a630     46 52 45 51 
1a634     46 52 45 51 
1a638     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a63c     46 52 45 51 
1a640     46 52 45 51 
1a644     46 52 45 51 
1a648     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a64c     46 52 45 51 
1a650     46 52 45 51 
1a654     46 52 45 51 
1a658     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a65c     46 52 45 51 
1a660     46 52 45 51 
1a664     46 52 45 51 
1a668     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a66c     46 52 45 51 
1a670     46 52 45 51 
1a674     46 52 45 51 
1a678     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a67c     46 52 45 51 
1a680     46 52 45 51 
1a684     46 52 45 51 
1a688     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a68c     46 52 45 51 
1a690     46 52 45 51 
1a694     46 52 45 51 
1a698     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a69c     46 52 45 51 
1a6a0     46 52 45 51 
1a6a4     46 52 45 51 
1a6a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6ac     46 52 45 51 
1a6b0     46 52 45 51 
1a6b4     46 52 45 51 
1a6b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6bc     46 52 45 51 
1a6c0     46 52 45 51 
1a6c4     46 52 45 51 
1a6c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6cc     46 52 45 51 
1a6d0     46 52 45 51 
1a6d4     46 52 45 51 
1a6d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6dc     46 52 45 51 
1a6e0     46 52 45 51 
1a6e4     46 52 45 51 
1a6e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6ec     46 52 45 51 
1a6f0     46 52 45 51 
1a6f4     46 52 45 51 
1a6f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6fc     46 52 45 51 
1a700     46 52 45 51 
1a704     46 52 45 51 
1a708     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a70c     46 52 45 51 
1a710     46 52 45 51 
1a714     46 52 45 51 
1a718     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a71c     46 52 45 51 
1a720     46 52 45 51 
1a724     46 52 45 51 
1a728     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a72c     46 52 45 51 
1a730     46 52 45 51 
1a734     46 52 45 51 
1a738     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a73c     46 52 45 51 
1a740     46 52 45 51 
1a744     46 52 45 51 
1a748     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a74c     46 52 45 51 
1a750     46 52 45 51 
1a754     46 52 45 51 
1a758     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a75c     46 52 45 51 
1a760     46 52 45 51 
1a764     46 52 45 51 
1a768     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a76c     46 52 45 51 
1a770     46 52 45 51 
1a774     46 52 45 51 
1a778     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a77c     46 52 45 51 
1a780     46 52 45 51 
1a784     46 52 45 51 
1a788     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a78c     46 52 45 51 
1a790     46 52 45 51 
1a794     46 52 45 51 
1a798     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a79c     46 52 45 51 
1a7a0     46 52 45 51 
1a7a4     46 52 45 51 
1a7a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7ac     46 52 45 51 
1a7b0     46 52 45 51 
1a7b4     46 52 45 51 
1a7b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7bc     46 52 45 51 
1a7c0     46 52 45 51 
1a7c4     46 52 45 51 
1a7c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7cc     46 52 45 51 
1a7d0     46 52 45 51 
1a7d4     46 52 45 51 
1a7d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7dc     46 52 45 51 
1a7e0     46 52 45 51 
1a7e4     46 52 45 51 
1a7e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7ec     46 52 45 51 
1a7f0     46 52 45 51 
1a7f4     46 52 45 51 
1a7f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7fc     46 52 45 51 
1a800     46 52 45 51 
1a804     46 52 45 51 
1a808     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a80c     46 52 45 51 
1a810     46 52 45 51 
1a814     46 52 45 51 
1a818     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a81c     46 52 45 51 
1a820     46 52 45 51 
1a824     46 52 45 51 
1a828     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a82c     46 52 45 51 
1a830     46 52 45 51 
1a834     46 52 45 51 
1a838     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a83c     46 52 45 51 
1a840     46 52 45 51 
1a844     46 52 45 51 
1a848     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a84c     46 52 45 51 
1a850     46 52 45 51 
1a854     46 52 45 51 
1a858     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a85c     46 52 45 51 
1a860     46 52 45 51 
1a864     46 52 45 51 
1a868     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a86c     46 52 45 51 
1a870     46 52 45 51 
1a874     46 52 45 51 
1a878     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a87c     46 52 45 51 
1a880     46 52 45 51 
1a884     46 52 45 51 
1a888     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a88c     46 52 45 51 
1a890     46 52 45 51 
1a894     46 52 45 51 
1a898     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a89c     46 52 45 51 
1a8a0     46 52 45 51 
1a8a4     46 52 45 51 
1a8a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8ac     46 52 45 51 
1a8b0     46 52 45 51 
1a8b4     46 52 45 51 
1a8b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8bc     46 52 45 51 
1a8c0     46 52 45 51 
1a8c4     46 52 45 51 
1a8c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8cc     46 52 45 51 
1a8d0     46 52 45 51 
1a8d4     46 52 45 51 
1a8d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8dc     46 52 45 51 
1a8e0     46 52 45 51 
1a8e4     46 52 45 51 
1a8e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8ec     46 52 45 51 
1a8f0     46 52 45 51 
1a8f4     46 52 45 51 
1a8f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8fc     46 52 45 51 
1a900     46 52 45 51 
1a904     46 52 45 51 
1a908     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a90c     46 52 45 51 
1a910     46 52 45 51 
1a914     46 52 45 51 
1a918     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a91c     46 52 45 51 
1a920     46 52 45 51 
1a924     46 52 45 51 
1a928     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a92c     46 52 45 51 
1a930     46 52 45 51 
1a934     46 52 45 51 
1a938     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a93c     46 52 45 51 
1a940     46 52 45 51 
1a944     46 52 45 51 
1a948     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a94c     46 52 45 51 
1a950     46 52 45 51 
1a954     46 52 45 51 
1a958     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a95c     46 52 45 51 
1a960     46 52 45 51 
1a964     46 52 45 51 
1a968     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a96c     46 52 45 51 
1a970     46 52 45 51 
1a974     46 52 45 51 
1a978     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a97c     46 52 45 51 
1a980     46 52 45 51 
1a984     46 52 45 51 
1a988     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a98c     46 52 45 51 
1a990     46 52 45 51 
1a994     46 52 45 51 
1a998     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a99c     46 52 45 51 
1a9a0     46 52 45 51 
1a9a4     46 52 45 51 
1a9a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9ac     46 52 45 51 
1a9b0     46 52 45 51 
1a9b4     46 52 45 51 
1a9b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9bc     46 52 45 51 
1a9c0     46 52 45 51 
1a9c4     46 52 45 51 
1a9c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9cc     46 52 45 51 
1a9d0     46 52 45 51 
1a9d4     46 52 45 51 
1a9d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9dc     46 52 45 51 
1a9e0     46 52 45 51 
1a9e4     46 52 45 51 
1a9e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9ec     46 52 45 51 
1a9f0     46 52 45 51 
1a9f4     46 52 45 51 
1a9f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9fc     46 52 45 51 
1aa00     46 52 45 51 
1aa04     46 52 45 51 
1aa08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa0c     46 52 45 51 
1aa10     46 52 45 51 
1aa14     46 52 45 51 
1aa18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa1c     46 52 45 51 
1aa20     46 52 45 51 
1aa24     46 52 45 51 
1aa28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa2c     46 52 45 51 
1aa30     46 52 45 51 
1aa34     46 52 45 51 
1aa38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa3c     46 52 45 51 
1aa40     46 52 45 51 
1aa44     46 52 45 51 
1aa48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa4c     46 52 45 51 
1aa50     46 52 45 51 
1aa54     46 52 45 51 
1aa58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa5c     46 52 45 51 
1aa60     46 52 45 51 
1aa64     46 52 45 51 
1aa68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa6c     46 52 45 51 
1aa70     46 52 45 51 
1aa74     46 52 45 51 
1aa78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa7c     46 52 45 51 
1aa80     46 52 45 51 
1aa84     46 52 45 51 
1aa88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa8c     46 52 45 51 
1aa90     46 52 45 51 
1aa94     46 52 45 51 
1aa98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa9c     46 52 45 51 
1aaa0     46 52 45 51 
1aaa4     46 52 45 51 
1aaa8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaac     46 52 45 51 
1aab0     46 52 45 51 
1aab4     46 52 45 51 
1aab8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aabc     46 52 45 51 
1aac0     46 52 45 51 
1aac4     46 52 45 51 
1aac8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aacc     46 52 45 51 
1aad0     46 52 45 51 
1aad4     46 52 45 51 
1aad8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aadc     46 52 45 51 
1aae0     46 52 45 51 
1aae4     46 52 45 51 
1aae8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaec     46 52 45 51 
1aaf0     46 52 45 51 
1aaf4     46 52 45 51 
1aaf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aafc     46 52 45 51 
1ab00     46 52 45 51 
1ab04     46 52 45 51 
1ab08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab0c     46 52 45 51 
1ab10     46 52 45 51 
1ab14     46 52 45 51 
1ab18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab1c     46 52 45 51 
1ab20     46 52 45 51 
1ab24     46 52 45 51 
1ab28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab2c     46 52 45 51 
1ab30     46 52 45 51 
1ab34     46 52 45 51 
1ab38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab3c     46 52 45 51 
1ab40     46 52 45 51 
1ab44     46 52 45 51 
1ab48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab4c     46 52 45 51 
1ab50     46 52 45 51 
1ab54     46 52 45 51 
1ab58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab5c     46 52 45 51 
1ab60     46 52 45 51 
1ab64     46 52 45 51 
1ab68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab6c     46 52 45 51 
1ab70     46 52 45 51 
1ab74     46 52 45 51 
1ab78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab7c     46 52 45 51 
1ab80     46 52 45 51 
1ab84     46 52 45 51 
1ab88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab8c     46 52 45 51 
1ab90     46 52 45 51 
1ab94     46 52 45 51 
1ab98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab9c     46 52 45 51 
1aba0     46 52 45 51 
1aba4     46 52 45 51 
1aba8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abac     46 52 45 51 
1abb0     46 52 45 51 
1abb4     46 52 45 51 
1abb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abbc     46 52 45 51 
1abc0     46 52 45 51 
1abc4     46 52 45 51 
1abc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abcc     46 52 45 51 
1abd0     46 52 45 51 
1abd4     46 52 45 51 
1abd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abdc     46 52 45 51 
1abe0     46 52 45 51 
1abe4     46 52 45 51 
1abe8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abec     46 52 45 51 
1abf0     46 52 45 51 
1abf4     46 52 45 51 
1abf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abfc     46 52 45 51 
1ac00     46 52 45 51 
1ac04     46 52 45 51 
1ac08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac0c     46 52 45 51 
1ac10     46 52 45 51 
1ac14     46 52 45 51 
1ac18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac1c     46 52 45 51 
1ac20     46 52 45 51 
1ac24     46 52 45 51 
1ac28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac2c     46 52 45 51 
1ac30     46 52 45 51 
1ac34     46 52 45 51 
1ac38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac3c     46 52 45 51 
1ac40     46 52 45 51 
1ac44     46 52 45 51 
1ac48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac4c     46 52 45 51 
1ac50     46 52 45 51 
1ac54     46 52 45 51 
1ac58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac5c     46 52 45 51 
1ac60     46 52 45 51 
1ac64     46 52 45 51 
1ac68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac6c     46 52 45 51 
1ac70     46 52 45 51 
1ac74     46 52 45 51 
1ac78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac7c     46 52 45 51 
1ac80     46 52 45 51 
1ac84     46 52 45 51 
1ac88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac8c     46 52 45 51 
1ac90     46 52 45 51 
1ac94     46 52 45 51 
1ac98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac9c     46 52 45 51 
1aca0     46 52 45 51 
1aca4     46 52 45 51 
1aca8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acac     46 52 45 51 
1acb0     46 52 45 51 
1acb4     46 52 45 51 
1acb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acbc     46 52 45 51 
1acc0     46 52 45 51 
1acc4     46 52 45 51 
1acc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1accc     46 52 45 51 
1acd0     46 52 45 51 
1acd4     46 52 45 51 
1acd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acdc     46 52 45 51 
1ace0     46 52 45 51 
1ace4     46 52 45 51 
1ace8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acec     46 52 45 51 
1acf0     46 52 45 51 
1acf4     46 52 45 51 
1acf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acfc     46 52 45 51 
1ad00     46 52 45 51 
1ad04     46 52 45 51 
1ad08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad0c     46 52 45 51 
1ad10     46 52 45 51 
1ad14     46 52 45 51 
1ad18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad1c     46 52 45 51 
1ad20     46 52 45 51 
1ad24     46 52 45 51 
1ad28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad2c     46 52 45 51 
1ad30     46 52 45 51 
1ad34     46 52 45 51 
1ad38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad3c     46 52 45 51 
1ad40     46 52 45 51 
1ad44     46 52 45 51 
1ad48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad4c     46 52 45 51 
1ad50     46 52 45 51 
1ad54     46 52 45 51 
1ad58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad5c     46 52 45 51 
1ad60     46 52 45 51 
1ad64     46 52 45 51 
1ad68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad6c     46 52 45 51 
1ad70     46 52 45 51 
1ad74     46 52 45 51 
1ad78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad7c     46 52 45 51 
1ad80     46 52 45 51 
1ad84     46 52 45 51 
1ad88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad8c     46 52 45 51 
1ad90     46 52 45 51 
1ad94     46 52 45 51 
1ad98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad9c     46 52 45 51 
1ada0     46 52 45 51 
1ada4     46 52 45 51 
1ada8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adac     46 52 45 51 
1adb0     46 52 45 51 
1adb4     46 52 45 51 
1adb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adbc     46 52 45 51 
1adc0     46 52 45 51 
1adc4     46 52 45 51 
1adc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adcc     46 52 45 51 
1add0     46 52 45 51 
1add4     46 52 45 51 
1add8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1addc     46 52 45 51 
1ade0     46 52 45 51 
1ade4     46 52 45 51 
1ade8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adec     46 52 45 51 
1adf0     46 52 45 51 
1adf4     46 52 45 51 
1adf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adfc     46 52 45 51 
1ae00     46 52 45 51 
1ae04     46 52 45 51 
1ae08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae0c     46 52 45 51 
1ae10     46 52 45 51 
1ae14     46 52 45 51 
1ae18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae1c     46 52 45 51 
1ae20     46 52 45 51 
1ae24     46 52 45 51 
1ae28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae2c     46 52 45 51 
1ae30     46 52 45 51 
1ae34     46 52 45 51 
1ae38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae3c     46 52 45 51 
1ae40     46 52 45 51 
1ae44     46 52 45 51 
1ae48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae4c                 | 
1ae4c     00 00 00 00 
1ae50     18 00 00 00 
1ae54     31 00 00 00 
1ae58     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1ae5c     61 00 00 00 
1ae60     78 00 00 00 
1ae64     8D 00 00 00 
1ae68     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1ae6c     B4 00 00 00 
1ae70     C5 00 00 00 
1ae74     D4 00 00 00 
1ae78     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1ae7c     EB 00 00 00 
1ae80     F4 00 00 00 
1ae84     FA 00 00 00 
1ae88     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1ae8c     FF 00 00 00 
1ae90     FD 00 00 00 
1ae94     FA 00 00 00 
1ae98     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1ae9c     EB 00 00 00 
1aea0     E0 00 00 00 
1aea4     D4 00 00 00 
1aea8     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1aeac     B4 00 00 00 
1aeb0     A1 00 00 00 
1aeb4     8D 00 00 00 
1aeb8     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1aebc     61 00 00 00 
1aec0     4A 00 00 00 
1aec4     31 00 00 00 
1aec8     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1aecc     00 00 00 00 
1aed0     E8 FF FF FF 
1aed4     CF FF FF FF 
1aed8     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1aedc     9F FF FF FF 
1aee0     88 FF FF FF 
1aee4     73 FF FF FF 
1aee8     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1aeec     4C FF FF FF 
1aef0     3B FF FF FF 
1aef4     2C FF FF FF 
1aef8     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1aefc     15 FF FF FF 
1af00     0C FF FF FF 
1af04     06 FF FF FF 
1af08     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1af0c     01 FF FF FF 
1af10     03 FF FF FF 
1af14     06 FF FF FF 
1af18     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1af1c     15 FF FF FF 
1af20     20 FF FF FF 
1af24     2C FF FF FF 
1af28     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1af2c     4C FF FF FF 
1af30     5F FF FF FF 
1af34     73 FF FF FF 
1af38     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1af3c     9F FF FF FF 
1af40     B6 FF FF FF 
1af44     CF FF FF FF 
1af48     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1af4c                 | 
1af4c     58 03 28 03 
1af50     FA 02 D0 02 
1af54     A6 02 80 02 
1af58     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1af5c     1A 02 FC 01 
1af60     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1af64     AC 01 94 01 
1af68     7D 01 68 01 
1af6c     53 01 40 01 
1af70     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1af74     0D 01 FE 00 
1af78     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1af7c     D6 00 CA 00 
1af80     BE 00 B4 00 
1af84     AA 00 A0 00 
1af88     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1af8c     87 00 7F 00 
1af90     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1af94     6B 00 22 03 
1af98     F5 02 CB 02 
1af9c     A2 02 7D 02 
1afa0     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1afa4     17 02 F9 01 
1afa8     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1afac     A9 01 91 01 
1afb0     7B 01 65 01 
1afb4     51 01 3E 01 
1afb8     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1afbc     0C 01 FD 00 
1afc0     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1afc4     D5 00 C9 00 
1afc8     BD 00 B3 00 
1afcc     A9 00 9F 00 
1afd0     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1afd4     86 00 7E 00 
1afd8     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1afdc     4C 03 1C 03 
1afe0     F0 02 C5 02 
1afe4     9E 02 78 02 
1afe8     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1afec     14 02 F6 01 
1aff0     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1aff4     A6 01 8E 01 
1aff8     78 01 63 01 
1affc     4F 01 3C 01 
1b000     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1b004     0A 01 FB 00 
1b008     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1b00c     D3 00 C7 00 
1b010     BC 00 B1 00 
1b014     A7 00 9E 00 
1b018     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1b01c     85 00 7D 00 
1b020     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1b024     46 03 17 03 
1b028     EA 02 C0 02 
1b02c     99 02 74 02 
1b030     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1b034     10 02 F2 01 
1b038     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1b03c     A3 01 8B 01 
1b040     75 01 60 01 
1b044     4C 01 3A 01 
1b048     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1b04c     08 01 F9 00 
1b050     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1b054     D1 00 C6 00 
1b058     BB 00 B0 00 
1b05c     A6 00 9D 00 
1b060     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1b064     84 00 7D 00 
1b068     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1b06c     40 03 11 03 
1b070     E5 02 BB 02 
1b074     94 02 6F 02 
1b078     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1b07c     0C 02 EF 01 
1b080     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1b084     A0 01 88 01 
1b088     72 01 5E 01 
1b08c     4A 01 38 01 
1b090     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1b094     06 01 F7 00 
1b098     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1b09c     D0 00 C4 00 
1b0a0     B9 00 AF 00 
1b0a4     A5 00 9C 00 
1b0a8     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1b0ac     83 00 7C 00 
1b0b0     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1b0b4     3A 03 0B 03 
1b0b8     E0 02 B6 02 
1b0bc     8F 02 6B 02 
1b0c0     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1b0c4     08 02 EB 01 
1b0c8     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1b0cc     9D 01 86 01 
1b0d0     70 01 5B 01 
1b0d4     48 01 35 01 
1b0d8     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1b0dc     04 01 F5 00 
1b0e0     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1b0e4     CE 00 C3 00 
1b0e8     B8 00 AE 00 
1b0ec     A4 00 9B 00 
1b0f0     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1b0f4     82 00 7B 00 
1b0f8     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1b0fc     34 03 06 03 
1b100     DA 02 B1 02 
1b104     8B 02 66 02 
1b108     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1b10c     04 02 E7 01 
1b110     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1b114     9A 01 83 01 
1b118     6D 01 59 01 
1b11c     45 01 33 01 
1b120     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1b124     02 01 F4 00 
1b128     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1b12c     CD 00 C1 00 
1b130     B7 00 AC 00 
1b134     A3 00 9A 00 
1b138     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1b13c     81 00 7A 00 
1b140     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1b144     2E 03 00 03 
1b148     D5 02 AC 02 
1b14c     86 02 62 02 
1b150     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1b154     01 02 E4 01 
1b158     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1b15c     97 01 80 01 
1b160     6B 01 56 01 
1b164     43 01 31 01 
1b168     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1b16c     00 01 F2 00 
1b170     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1b174     CC 00 C0 00 
1b178     B5 00 AB 00 
1b17c     A1 00 98 00 
1b180     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1b184     80 00 79 00 
1b188     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1b18c     8B 03 58 03 
1b190     28 03 FA 02 
1b194     D0 02 A6 02 
1b198     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1b19c     3A 02 1A 02 
1b1a0     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1b1a4     C5 01 AC 01 
1b1a8     94 01 7D 01 
1b1ac     68 01 53 01 
1b1b0     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1b1b4     1D 01 0D 01 
1b1b8     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1b1bc     E2 00 D6 00 
1b1c0     CA 00 BE 00 
1b1c4     B4 00 AA 00 
1b1c8     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1b1cc     8F 00 87 00 
1b1d0     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1b1d4     84 03 52 03 
1b1d8     22 03 F5 02 
1b1dc     CB 02 A3 02 
1b1e0     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1b1e4     37 02 17 02 
1b1e8     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1b1ec     C2 01 A9 01 
1b1f0     91 01 7B 01 
1b1f4     65 01 51 01 
1b1f8     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1b1fc     1C 01 0C 01 
1b200     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1b204     E1 00 D4 00 
1b208     C8 00 BD 00 
1b20c     B3 00 A9 00 
1b210     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1b214     8E 00 86 00 
1b218     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1b21c     7E 03 4C 03 
1b220     1C 03 F0 02 
1b224     C5 02 9E 02 
1b228     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1b22c     33 02 14 02 
1b230     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1b234     BF 01 A6 01 
1b238     8E 01 78 01 
1b23c     63 01 4F 01 
1b240     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1b244     1A 01 0A 01 
1b248     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1b24c     DF 00 D3 00 
1b250     C7 00 BC 00 
1b254     B1 00 A7 00 
1b258     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1b25c     8D 00 85 00 
1b260     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1b264     77 03 46 03 
1b268     17 03 EA 02 
1b26c     C0 02 99 02 
1b270     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1b274     2F 02 10 02 
1b278     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1b27c     BC 01 A3 01 
1b280     8B 01 75 01 
1b284     60 01 4C 01 
1b288     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1b28c     18 01 08 01 
1b290     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1b294     DE 00 D1 00 
1b298     C6 00 BB 00 
1b29c     B0 00 A6 00 
1b2a0     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1b2a4     8C 00 84 00 
1b2a8     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1b2ac     71 03 40 03 
1b2b0     11 03 E5 02 
1b2b4     BB 02 94 02 
1b2b8     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1b2bc     2B 02 0C 02 
1b2c0     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1b2c4     B9 01 A0 01 
1b2c8     88 01 72 01 
1b2cc     5E 01 4A 01 
1b2d0     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1b2d4     16 01 06 01 
1b2d8     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1b2dc     DC 00 D0 00 
1b2e0     C4 00 B9 00 
1b2e4     AF 00 A5 00 
1b2e8     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1b2ec     8B 00 83 00 
1b2f0     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1b2f4     6B 03 3A 03 
1b2f8     0B 03 E0 02 
1b2fc     B6 02 8F 02 
1b300     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1b304     27 02 08 02 
1b308     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1b30c     B5 01 9D 01 
1b310     86 01 70 01 
1b314     5B 01 48 01 
1b318     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1b31c     14 01 04 01 
1b320     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1b324     DB 00 CE 00 
1b328     C3 00 B8 00 
1b32c     AE 00 A4 00 
1b330     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1b334     8A 00 82 00 
1b338     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1b33c     64 03 34 03 
1b340     06 03 DA 02 
1b344     B1 02 8B 02 
1b348     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1b34c     23 02 04 02 
1b350     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1b354     B2 01 9A 01 
1b358     83 01 6D 01 
1b35c     59 01 45 01 
1b360     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1b364     12 01 02 01 
1b368     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1b36c     D9 00 CD 00 
1b370     C1 00 B7 00 
1b374     AC 00 A3 00 
1b378     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1b37c     89 00 81 00 
1b380     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1b384     5E 03 2E 03 
1b388     00 03 D5 02 
1b38c     AC 02 86 02 
1b390     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1b394     1F 02 01 02 
1b398     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1b39c     AF 01 97 01 
1b3a0     80 01 6B 01 
1b3a4     56 01 43 01 
1b3a8     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1b3ac     10 01 00 01 
1b3b0     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1b3b4     D8 00 CB 00 
1b3b8     C0 00 B5 00 
1b3bc     AB 00 A1 00 
1b3c0     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1b3c4     88 00 80 00 
1b3c8     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1b3cc                 | 	alignl
1b3cc                 | _audio019_spin2_dat_
1b3cc                 | 
1b3cc                 | audio       org     0
1b3cc     00 F2 07 F6 | 			mov     ptrb,#0
1b3d0     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1b3d4     0E C8 1C FC |             wxpin   #100,#left
1b3d8     0F 7A 05 FC |             wrpin   dac,#right
1b3dc     0F C8 1C FC |             wxpin   #100,#right
1b3e0     41 9C 64 FD |             dirh    #left addpins 1
1b3e4     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1b3e8     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1b3ec     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1b3f0                 |             
1b3f0                 | '---------------------------------------------------------------------------------        
1b3f0                 | '----------------- The main loop -------------------------------------------------
1b3f0                 | '---------------------------------------------------------------------------------
1b3f0                 | 
1b3f0     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1b3f4     10 00 90 CD |       if_c  jmp     #loop1
1b3f8                 |   
1b3f8     09 4A 05 F6 |             mov     cn,#9
1b3fc     81 4A 8D F9 | p402        altd    cn,#a21000000
1b400     80 00 80 F1 |             sub     0-0,a20000000
1b404     FD 4B 6D FB |             djnz    cn,#p402
1b408                 |     
1b408     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
1b40c     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
1b410     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
1b414     01 4A 05 C6 |     if_c    mov     cn,#1
1b418     85 4C 39 F3 |             fle     ct,time3 wcz
1b41c     02 4A 05 C6 |     if_c    mov     cn,#2     
1b420     86 4C 39 F3 |             fle     ct,time4 wcz
1b424     03 4A 05 C6 |     if_c    mov     cn,#3
1b428     87 4C 39 F3 |             fle     ct,time5 wcz
1b42c     04 4A 05 C6 |     if_c    mov     cn,#4
1b430     88 4C 39 F3 |             fle     ct,time6 wcz
1b434     05 4A 05 C6 |     if_c    mov     cn,#5
1b438     89 4C 39 F3 |             fle     ct,time7 wcz
1b43c     06 4A 05 C6 |     if_c    mov     cn,#6
1b440     8A 4C 39 F3 |             fle     ct,time8 wcz
1b444     07 4A 05 C6 |     if_c    mov     cn,#7
1b448                 | 
1b448                 | 
1b448                 | '----------------------------------------------------------------------------------
1b448                 | '------------- Compute channel samples --------------------------------------------
1b448                 | '----------------------------------------------------------------------------------
1b448                 | 
1b448                 | 
1b448     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1b44c     05 20 65 F0 |             shl     channeladd,#5
1b450     90 F0 03 F1 |             add     ptra,channeladd
1b454                 | 
1b454     28 0E 64 FD |             setq    #7               
1b458     00 31 05 FB |             rdlong  pointer0,ptra
1b45c                 |             
1b45c     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
1b460     9D 44 31 F9 |     	    getword avol0,volpan0,#0
1b464     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
1b468     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
1b46c                 | 
1b46c     83 4A 95 F9 |             alts    cn, #time1
1b470     00 4E 01 F6 |             mov     dt0,0-0   
1b474     82 4E 81 F1 |             sub     dt0,time0
1b478                 | 
1b478     83 4A 8D F9 |             altd    cn, #time1
1b47c     A0 00 00 F1 |             add     0-0,afreq0  	
1b480                 | 
1b480     A1 30 01 F1 |             add     pointer0,askip0
1b484     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
1b488     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
1b48c     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
1b490     98 24 01 F6 |             mov     qq,pointer0
1b494     9A 24 01 F1 |             add     qq,sstart0
1b498                 | 
1b498     1F 34 0D F4 |             testb   sstart0,#31 wz
1b49c                 | 
1b49c     92 26 C1 5A |     if_nz   rdbyte  spl,qq
1b4a0     08 26 65 50 |     if_nz   shl     spl,#8
1b4a4     92 26 E1 AA |     if_z    rdword  spl,qq
1b4a8                 | 
1b4a8     A2 26 31 FA |             scas    spl,avol0
1b4ac     00 26 01 F6 |             mov     spl,0-0
1b4b0                 |  
1b4b0     A3 26 31 FA |             scas    spl,apan0
1b4b4     00 50 01 F6 |             mov     ls0,0-0
1b4b8                 |  
1b4b8     AD 4A 8D F9 |             altd    cn,#ls1
1b4bc     A8 00 00 F6 |             mov     0-0,ls0
1b4c0                 |              
1b4c0     20 00 00 FF 
1b4c4     00 24 05 F6 |             mov     qq,##16384
1b4c8     A3 24 81 F1 |             sub     qq,apan0
1b4cc     92 26 31 FA |             scas    spl,qq
1b4d0     00 52 01 F6 |             mov     rs0, 0-0
1b4d4                 | 
1b4d4     B5 4A 8D F9 |             altd    cn,#rs1
1b4d8     A9 00 00 F6 |             mov     0-0,rs0
1b4dc                 | 
1b4dc     A9 32 29 F9 |             setword sample0,rs0,#1
1b4e0     A8 32 21 F9 |             setword sample0,ls0,#0
1b4e4                 |             
1b4e4                 | 
1b4e4     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
1b4e8     00 30 05 A6 |     if_z    mov    pointer0, #0  
1b4ec     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
1b4f0     28 02 64 FD | p403        setq #1
1b4f4                 |      
1b4f4     00 31 65 FC |             wrlong  pointer0,ptra
1b4f8     90 F0 83 F1 |             sub     ptra, channeladd
1b4fc     00 00 90 FD |             jmp     #p101
1b500                 |                        
1b500                 |             
1b500                 |           
1b500                 |             
1b500                 | '------------------------ Channels end here --------------------       
1b500                 | 
1b500                 | ' Now add all channels and put the sample to the buffer    
1b500                 | 
1b500                 | 
1b500     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1b504     01 22 85 A1 |     if_z    sub     front,#1         ' 
1b508     FF 23 05 A5 |     if_z    and     front,#511     
1b50c                 |            
1b50c                 |     
1b50c     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1b510     00 56 05 F6 |             mov     ls,#0
1b514     B5 58 01 F1 |             add     rs,rs1
1b518     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1b51c     B7 58 01 F1 |             add     rs,rs3
1b520     B8 58 01 F1 |             add     rs,rs4
1b524     B9 58 01 F1 |             add     rs,rs5
1b528     BA 58 01 F1 |             add     rs,rs6
1b52c     BB 58 01 F1 |             add     rs,rs7
1b530     BC 58 01 F1 |             add     rs,rs8
1b534                 | 
1b534                 |            
1b534     AD 56 01 F1 |             add     ls,ls1
1b538     AE 56 01 F1 |             add     ls,ls2
1b53c     AF 56 01 F1 |             add     ls,ls3
1b540     B0 56 01 F1 |             add     ls,ls4
1b544     B1 56 01 F1 |             add     ls,ls5
1b548     B2 56 01 F1 |             add     ls,ls6
1b54c     B3 56 01 F1 |             add     ls,ls7
1b550     B4 56 01 F1 |             add     ls,ls8
1b554                 | 
1b554                 |  		
1b554     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1b558     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1b55c                 | 		    
1b55c     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1b560     AC 16 01 F6 |             mov newsample, rs
1b564                 | 
1b564     82 48 01 F6 |             mov     oldt0,time0      ' update global time
1b568     A7 04 01 F1 |             add     time0,dt0    
1b56c                 | 
1b56c                 |             
1b56c                 |  
1b56c                 |                                      ' now push dt0 samples to the buffer
1b56c     00 4E 0D F2 |             cmp      dt0,#0 wz
1b570     94 FE 9F AD |     if_z    jmp      #loop1
1b574     A7 18 01 F6 |             mov      t1,dt0
1b578                 |   
1b578     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1b57c     01 1A 85 F1 |             sub     t2,#1
1b580     FF 1B 05 F5 |             and     t2,#511
1b584     91 1A 19 F2 |             cmp     t2,front wcz
1b588     EC FF 9F AD |     if_e    jmp     #p301    
1b58c                 |     
1b58c     91 16 31 FC |             wrlut   newsample, front
1b590     01 22 05 F1 |             add     front,#1
1b594     FF 23 05 F5 |             and     front,#511
1b598     F7 19 6D FB |             djnz    t1,#p301
1b59c                 |             
1b59c     50 FE 9F FD |             jmp     #loop            'loop
1b5a0                 | 
1b5a0                 | '-------------------------------------------------------------------------
1b5a0                 | '------------------ This is the end of the main loop ---------------------
1b5a0                 | '-------------------------------------------------------------------------
1b5a0                 | 
1b5a0                 | '--------------------------------------------------------------------------
1b5a0                 | '------ Interrupt service -------------------------------------------------
1b5a0                 | '------ Output the sample, get the next one if exists ---------------------
1b5a0                 | '--------------------------------------------------------------------------
1b5a0                 | 
1b5a0     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
1b5a4     0F 2A 25 FC |             wypin   rsample,#right       '4
1b5a8                 |            
1b5a8     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1b5ac     F5 FF 3B AB |     if_e    reti1                        '8/10
1b5b0                 | 
1b5b0     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1b5b4     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
1b5b8     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
1b5bc     F5 FF 3B FB |             reti1                        '17/19 
1b5c0                 |           
1b5c0                 | '---------------------------------------------------------------------------
1b5c0                 | '-------- End of interrupt -------------------------------------------------
1b5c0                 | '---------------------------------------------------------------------------    
1b5c0                 | 
1b5c0                 | 
1b5c0                 | '---------------------------------------------------------------------------
1b5c0                 | '------- Variables ---------------------------------------------------------
1b5c0                 | '---------------------------------------------------------------------------
1b5c0                 | 
1b5c0                 | ' constants
1b5c0                 | 
1b5c0     00 00 00 00 | hp long 0
1b5c4     00 00 00 00 | lp long 0
1b5c8     00 00 00 00 | bp long 0
1b5cc     00 00 00 10 | a20000000   long $10000000
1b5d0     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
1b5d4                 | 
1b5d4                 | ' Time variables
1b5d4                 | 
1b5d4     00 00 00 00 | time0       long 0    ' Global sample computing time
1b5d8     01 00 00 00 | time1       long 1    ' Local channels time
1b5dc     02 00 00 00 | time2       long 2
1b5e0     03 00 00 00 | time3       long 3
1b5e4     04 00 00 00 | time4       long 4
1b5e8     05 00 00 00 | time5       long 5
1b5ec     06 00 00 00 | time6       long 6
1b5f0     07 00 00 00 | time7       long 7
1b5f4     08 00 00 00 | time8       long 8
1b5f8                 | 
1b5f8                 | 
1b5f8                 | 
1b5f8     00 00 00 00 | newsample long 0
1b5fc                 | '
1b5fc     00 00 00 00 | t1 long 0
1b600     00 00 00 00 | t2 long 0
1b604                 | '
1b604     00 00 00 00 | nrsample long 0
1b608     00 00 00 00 | nlsample long 0
1b60c                 | '
1b60c     00 00 00 00 | channeladd long 0
1b610                 | 
1b610                 | 
1b610     00 00 00 00 | front       long 0
1b614                 | 
1b614                 | ' temporary variables 
1b614                 | '
1b614     00 00 00 00 | qq          long 0
1b618     00 00 00 00 | spl         long 0
1b61c                 | 
1b61c                 | ' circular buffer in LUT
1b61c                 | 
1b61c                 | 
1b61c                 | '
1b61c                 | 
1b61c                 | ' Interrupt ISR variables
1b61c                 | 
1b61c                 | 
1b61c     00 00 00 00 | lsample     long 0
1b620     00 00 00 00 | rsample     long 0
1b624     00 00 00 00 | lsnext      long 0
1b628     00 00 00 00 | rsnext      long 0 
1b62c                 | 
1b62c                 | 
1b62c     00 00 00 00 | pointer0    long 0
1b630     00 00 00 00 | sample0     long 0
1b634     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1b638     00 00 00 00 | lstart0     long 0
1b63c     00 00 00 00 | lend0       long 0
1b640     00 00 00 00 | volpan0     long 0
1b644     00 00 00 00 | freqskip0   long 0
1b648     00 00 00 00 | dummy0      long 0
1b64c                 | 
1b64c     00 00 00 00 | afreq0      long 0
1b650     00 00 00 00 | askip0      long 0
1b654     00 00 00 00 | avol0       long 0
1b658     00 00 00 00 | apan0       long 0
1b65c                 | 
1b65c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1b660     00 00 00 00 | cn          long 0
1b664     00 00 00 00 | ct          long 0
1b668     00 00 00 00 | dt0         long 0
1b66c                 | 
1b66c                 | ' Samples
1b66c     00 00 00 00 | ls0         long 0
1b670     00 00 00 00 | rs0         long 0
1b674     00 00 00 00 | channel     long 0
1b678     00 00 00 00 | ls          long 0    ' Global sample variable
1b67c     00 00 00 00 | rs          long 0
1b680                 | 
1b680     00 00 00 00 | ls1         long 0    ' Channel samples
1b684     00 00 00 00 | ls2         long 0
1b688     00 00 00 00 | ls3         long 0
1b68c     00 00 00 00 | ls4         long 0
1b690     00 00 00 00 | ls5         long 0
1b694     00 00 00 00 | ls6         long 0
1b698     00 00 00 00 | ls7         long 0
1b69c     00 00 00 00 | ls8         long 0
1b6a0     00 00 00 00 | rs1         long 0
1b6a4     00 00 00 00 | rs2         long 0
1b6a8     00 00 00 00 | rs3         long 0
1b6ac     00 00 00 00 | rs4         long 0
1b6b0     00 00 00 00 | rs5         long 0
1b6b4     00 00 00 00 | rs6         long 0
1b6b8     00 00 00 00 | rs7         long 0
1b6bc     00 00 00 00 | rs8         long 0
1b6c0                 | 
1b6c0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1b6c4                 | 
1b6c4     00 00 00 00 
1b6c8     00 00 00 00 | null  			long 	0,0           ' for channel reset
1b6cc     73 32 00 04 
1b6d0     00 00 10 00 
1b6d4     00 00 00 00 
1b6d8     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1b6dc     00 00 C9 00 
1b6e0     92 01 5B 02 
1b6e4     24 03 ED 03 
1b6e8     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1b6ec     48 06 11 07 
1b6f0     D9 07 A2 08 
1b6f4     6A 09 33 0A 
1b6f8     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1b6fc     8C 0C 54 0D 
1b700     1C 0E E3 0E 
1b704     AB 0F 72 10 
1b708     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1b70c     C8 12 8F 13 
1b710     55 14 1C 15 
1b714     E2 15 A8 16 
1b718     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1b71c     F9 18 BE 19 
1b720     82 1A 47 1B 
1b724     0B 1C CF 1C 
1b728     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1b72c     1A 1F DD 1F 
1b730     9F 20 61 21 
1b734     23 22 E5 22 
1b738     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1b73c     28 25 E8 25 
1b740     A8 26 67 27 
1b744     26 28 E5 28 
1b748     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1b74c     1F 2B DC 2B 
1b750     99 2C 55 2D 
1b754     11 2E CC 2E 
1b758     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1b75c     FB 30 B5 31 
1b760     6E 32 26 33 
1b764     DF 33 96 34 
1b768     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1b76c     BA 36 6F 37 
1b770     24 38 D9 38 
1b774     8C 39 40 3A 
1b778     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1b77c     56 3C 07 3D 
1b780     B8 3D 68 3E 
1b784     17 3F C5 3F 
1b788     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1b78c     CE 41 7A 42 
1b790     25 43 D0 43 
1b794     7A 44 24 45 
1b798     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1b79c     1C 47 C3 47 
1b7a0     69 48 0F 49 
1b7a4     B4 49 58 4A 
1b7a8     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1b7ac     3F 4C E0 4C 
1b7b0     81 4D 20 4E 
1b7b4     BF 4E 5D 4F 
1b7b8     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1b7bc     33 51 CE 51 
1b7c0     68 52 02 53 
1b7c4     9B 53 32 54 
1b7c8     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1b7cc     F5 55 8A 56 
1b7d0     1D 57 B0 57 
1b7d4     42 58 D3 58 
1b7d8     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1b7dc     82 5A 0F 5B 
1b7e0     9C 5B 28 5C 
1b7e4     B3 5C 3E 5D 
1b7e8     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1b7ec     D7 5E 5D 5F 
1b7f0     E3 5F 68 60 
1b7f4     EB 60 6E 61 
1b7f8     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1b7fc     F1 62 70 63 
1b800     EE 63 6C 64 
1b804     E8 64 63 65 
1b808     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1b80c     CF 66 46 67 
1b810     BC 67 32 68 
1b814     A6 68 19 69 
1b818     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1b81c     6D 6A DC 6A 
1b820     4A 6B B7 6B 
1b824     23 6C 8E 6C 
1b828     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1b82c     C9 6D 30 6E 
1b830     96 6E FB 6E 
1b834     5E 6F C1 6F 
1b838     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1b83c     E2 70 40 71 
1b840     9D 71 F9 71 
1b844     54 72 AE 72 
1b848     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1b84c     B5 73 0A 74 
1b850     5F 74 B2 74 
1b854     04 75 55 75 
1b858     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1b85c     41 76 8D 76 
1b860     D8 76 22 77 
1b864     6B 77 B3 77 
1b868     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1b86c     84 78 C7 78 
1b870     09 79 4A 79 
1b874     89 79 C8 79 
1b878     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1b87c     7C 7A B6 7A 
1b880     EE 7A 26 7B 
1b884     5C 7B 91 7B 
1b888     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1b88c     29 7C 59 7C 
1b890     88 7C B6 7C 
1b894     E3 7C 0E 7D 
1b898     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1b89c     89 7D B0 7D 
1b8a0     D5 7D FA 7D 
1b8a4     1D 7E 3E 7E 
1b8a8     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1b8ac     9C 7E B9 7E 
1b8b0     D5 7E EF 7E 
1b8b4     09 7F 21 7F 
1b8b8     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1b8bc     61 7F 74 7F 
1b8c0     86 7F 97 7F 
1b8c4     A6 7F B4 7F 
1b8c8     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1b8cc     D8 7F E1 7F 
1b8d0     E9 7F F0 7F 
1b8d4     F5 7F F9 7F 
1b8d8     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1b8dc     FF 7F FE 7F 
1b8e0     FD 7F F9 7F 
1b8e4     F5 7F F0 7F 
1b8e8     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1b8ec     D8 7F CD 7F 
1b8f0     C1 7F B4 7F 
1b8f4     A6 7F 97 7F 
1b8f8     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1b8fc     61 7F 4D 7F 
1b900     37 7F 21 7F 
1b904     09 7F EF 7E 
1b908     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1b90c     9C 7E 7E 7E 
1b910     5F 7E 3E 7E 
1b914     1D 7E FA 7D 
1b918     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1b91c     89 7D 62 7D 
1b920     39 7D 0E 7D 
1b924     E3 7C B6 7C 
1b928     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1b92c     29 7C F8 7B 
1b930     C5 7B 91 7B 
1b934     5C 7B 26 7B 
1b938     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1b93c     7C 7A 41 7A 
1b940     05 7A C8 79 
1b944     89 79 4A 79 
1b948     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1b94c     84 78 3F 78 
1b950     FA 77 B3 77 
1b954     6B 77 22 77 
1b958     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1b95c     41 76 F3 75 
1b960     A5 75 55 75 
1b964     04 75 B2 74 
1b968     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1b96c     B5 73 5E 73 
1b970     07 73 AE 72 
1b974     54 72 F9 71 
1b978     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1b97c     E2 70 83 70 
1b980     22 70 C1 6F 
1b984     5E 6F FB 6E 
1b988     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1b98c     C9 6D 61 6D 
1b990     F8 6C 8E 6C 
1b994     23 6C B7 6B 
1b998     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1b99c     6D 6A FD 69 
1b9a0     8B 69 19 69 
1b9a4     A6 68 32 68 
1b9a8     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1b9ac     CF 66 56 66 
1b9b0     DD 65 63 65 
1b9b4     E8 64 6C 64 
1b9b8     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1b9bc     F1 62 71 62 
1b9c0     F0 61 6E 61 
1b9c4     EB 60 68 60 
1b9c8     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1b9cc     D7 5E 4F 5E 
1b9d0     C7 5D 3E 5D 
1b9d4     B3 5C 28 5C 
1b9d8     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1b9dc     82 5A F3 59 
1b9e0     64 59 D3 58 
1b9e4     42 58 B0 57 
1b9e8     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1b9ec     F5 55 60 55 
1b9f0     C9 54 32 54 
1b9f4     9B 53 02 53 
1b9f8     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1b9fc     33 51 97 50 
1ba00     FB 4F 5D 4F 
1ba04     BF 4E 20 4E 
1ba08     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1ba0c     3F 4C 9D 4B 
1ba10     FB 4A 58 4A 
1ba14     B4 49 0F 49 
1ba18     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1ba1c     1C 47 75 46 
1ba20     CD 45 24 45 
1ba24     7A 44 D0 43 
1ba28     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1ba2c     CE 41 21 41 
1ba30     73 40 C5 3F 
1ba34     17 3F 68 3E 
1ba38     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1ba3c     56 3C A5 3B 
1ba40     F2 3A 40 3A 
1ba44     8C 39 D9 38 
1ba48     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1ba4c     BA 36 04 36 
1ba50     4D 35 96 34 
1ba54     DF 33 26 33 
1ba58     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1ba5c     FB 30 41 30 
1ba60     87 2F CC 2E 
1ba64     11 2E 55 2D 
1ba68     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1ba6c     1F 2B 61 2A 
1ba70     A3 29 E5 28 
1ba74     26 28 67 27 
1ba78     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1ba7c     28 25 67 24 
1ba80     A6 23 E5 22 
1ba84     23 22 61 21 
1ba88     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1ba8c     1A 1F 57 1E 
1ba90     93 1D CF 1C 
1ba94     0B 1C 47 1B 
1ba98     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1ba9c     F9 18 33 18 
1baa0     6E 17 A8 16 
1baa4     E2 15 1C 15 
1baa8     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1baac     C8 12 01 12 
1bab0     3A 11 72 10 
1bab4     AB 0F E3 0E 
1bab8     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1babc     8C 0C C4 0B 
1bac0     FB 0A 33 0A 
1bac4     6A 09 A2 08 
1bac8     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1bacc     48 06 7F 05 
1bad0     B6 04 ED 03 
1bad4     24 03 5B 02 
1bad8     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1badc     00 00 37 FF 
1bae0     6E FE A5 FD 
1bae4     DC FC 13 FC 
1bae8     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1baec     B8 F9 EF F8 
1baf0     27 F8 5E F7 
1baf4     96 F6 CD F5 
1baf8     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1bafc     74 F3 AC F2 
1bb00     E4 F1 1D F1 
1bb04     55 F0 8E EF 
1bb08     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1bb0c     38 ED 71 EC 
1bb10     AB EB E4 EA 
1bb14     1E EA 58 E9 
1bb18     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1bb1c     07 E7 42 E6 
1bb20     7E E5 B9 E4 
1bb24     F5 E3 31 E3 
1bb28     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1bb2c     E6 E0 23 E0 
1bb30     61 DF 9F DE 
1bb34     DD DD 1B DD 
1bb38     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1bb3c     D8 DA 18 DA 
1bb40     58 D9 99 D8 
1bb44     DA D7 1B D7 
1bb48     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1bb4c     E1 D4 24 D4 
1bb50     67 D3 AB D2 
1bb54     EF D1 34 D1 
1bb58     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1bb5c     05 CF 4B CE 
1bb60     92 CD DA CC 
1bb64     21 CC 6A CB 
1bb68     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1bb6c     46 C9 91 C8 
1bb70     DC C7 27 C7 
1bb74     74 C6 C0 C5 
1bb78     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1bb7c     AA C3 F9 C2 
1bb80     48 C2 98 C1 
1bb84     E9 C0 3B C0 
1bb88     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1bb8c     32 BE 86 BD 
1bb90     DB BC 30 BC 
1bb94     86 BB DC BA 
1bb98     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1bb9c     E4 B8 3D B8 
1bba0     97 B7 F1 B6 
1bba4     4C B6 A8 B5 
1bba8     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1bbac     C1 B3 20 B3 
1bbb0     7F B2 E0 B1 
1bbb4     41 B1 A3 B0 
1bbb8     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1bbbc     CD AE 32 AE 
1bbc0     98 AD FE AC 
1bbc4     65 AC CE AB 
1bbc8     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1bbcc     0B AA 76 A9 
1bbd0     E3 A8 50 A8 
1bbd4     BE A7 2D A7 
1bbd8     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1bbdc     7E A5 F1 A4 
1bbe0     64 A4 D8 A3 
1bbe4     4D A3 C2 A2 
1bbe8     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1bbec     29 A1 A3 A0 
1bbf0     1D A0 98 9F 
1bbf4     15 9F 92 9E 
1bbf8     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1bbfc     0F 9D 90 9C 
1bc00     12 9C 94 9B 
1bc04     18 9B 9D 9A 
1bc08     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1bc0c     31 99 BA 98 
1bc10     44 98 CE 97 
1bc14     5A 97 E7 96 
1bc18     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1bc1c     93 95 24 95 
1bc20     B6 94 49 94 
1bc24     DD 93 72 93 
1bc28     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1bc2c     37 92 D0 91 
1bc30     6A 91 05 91 
1bc34     A2 90 3F 90 
1bc38     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1bc3c     1E 8F C0 8E 
1bc40     63 8E 07 8E 
1bc44     AC 8D 52 8D 
1bc48     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1bc4c     4B 8C F6 8B 
1bc50     A1 8B 4E 8B 
1bc54     FC 8A AB 8A 
1bc58     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1bc5c     BF 89 73 89 
1bc60     28 89 DE 88 
1bc64     95 88 4D 88 
1bc68     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1bc6c     7C 87 39 87 
1bc70     F7 86 B6 86 
1bc74     77 86 38 86 
1bc78     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1bc7c     84 85 4A 85 
1bc80     12 85 DA 84 
1bc84     A4 84 6F 84 
1bc88     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1bc8c     D7 83 A7 83 
1bc90     78 83 4A 83 
1bc94     1D 83 F2 82 
1bc98     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1bc9c     77 82 50 82 
1bca0     2B 82 06 82 
1bca4     E3 81 C2 81 
1bca8     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1bcac     64 81 47 81 
1bcb0     2B 81 11 81 
1bcb4     F7 80 DF 80 
1bcb8     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1bcbc     9F 80 8C 80 
1bcc0     7A 80 69 80 
1bcc4     5A 80 4C 80 
1bcc8     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1bccc     28 80 1F 80 
1bcd0     17 80 10 80 
1bcd4     0B 80 07 80 
1bcd8     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1bcdc     01 80 02 80 
1bce0     03 80 07 80 
1bce4     0B 80 10 80 
1bce8     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1bcec     28 80 33 80 
1bcf0     3F 80 4C 80 
1bcf4     5A 80 69 80 
1bcf8     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1bcfc     9F 80 B3 80 
1bd00     C9 80 DF 80 
1bd04     F7 80 11 81 
1bd08     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1bd0c     64 81 82 81 
1bd10     A1 81 C2 81 
1bd14     E3 81 06 82 
1bd18     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1bd1c     77 82 9E 82 
1bd20     C7 82 F2 82 
1bd24     1D 83 4A 83 
1bd28     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1bd2c     D7 83 08 84 
1bd30     3B 84 6F 84 
1bd34     A4 84 DA 84 
1bd38     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1bd3c     84 85 BF 85 
1bd40     FB 85 38 86 
1bd44     77 86 B6 86 
1bd48     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1bd4c     7C 87 C1 87 
1bd50     06 88 4D 88 
1bd54     95 88 DE 88 
1bd58     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1bd5c     BF 89 0D 8A 
1bd60     5B 8A AB 8A 
1bd64     FC 8A 4E 8B 
1bd68     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1bd6c     4B 8C A2 8C 
1bd70     F9 8C 52 8D 
1bd74     AC 8D 07 8E 
1bd78     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1bd7c     1E 8F 7D 8F 
1bd80     DE 8F 3F 90 
1bd84     A2 90 05 91 
1bd88     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1bd8c     37 92 9F 92 
1bd90     08 93 72 93 
1bd94     DD 93 49 94 
1bd98     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1bd9c     93 95 03 96 
1bda0     75 96 E7 96 
1bda4     5A 97 CE 97 
1bda8     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1bdac     31 99 AA 99 
1bdb0     23 9A 9D 9A 
1bdb4     18 9B 94 9B 
1bdb8     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1bdbc     0F 9D 8F 9D 
1bdc0     10 9E 92 9E 
1bdc4     15 9F 98 9F 
1bdc8     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1bdcc     29 A1 B1 A1 
1bdd0     39 A2 C2 A2 
1bdd4     4D A3 D8 A3 
1bdd8     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1bddc     7E A5 0D A6 
1bde0     9C A6 2D A7 
1bde4     BE A7 50 A8 
1bde8     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1bdec     0B AA A0 AA 
1bdf0     37 AB CE AB 
1bdf4     65 AC FE AC 
1bdf8     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1bdfc     CD AE 69 AF 
1be00     05 B0 A3 B0 
1be04     41 B1 E0 B1 
1be08     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1be0c     C1 B3 63 B4 
1be10     05 B5 A8 B5 
1be14     4C B6 F1 B6 
1be18     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1be1c     E4 B8 8B B9 
1be20     33 BA DC BA 
1be24     86 BB 30 BC 
1be28     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1be2c     32 BE DF BE 
1be30     8D BF 3B C0 
1be34     E9 C0 98 C1 
1be38     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1be3c     AA C3 5B C4 
1be40     0E C5 C0 C5 
1be44     74 C6 27 C7 
1be48     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1be4c     46 C9 FC C9 
1be50     B3 CA 6A CB 
1be54     21 CC DA CC 
1be58     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1be5c     05 CF BF CF 
1be60     79 D0 34 D1 
1be64     EF D1 AB D2 
1be68     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1be6c     E1 D4 9F D5 
1be70     5D D6 1B D7 
1be74     DA D7 99 D8 
1be78     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1be7c     D8 DA 99 DB 
1be80     5A DC 1B DD 
1be84     DD DD 9F DE 
1be88     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1be8c     E6 E0 A9 E1 
1be90     6D E2 31 E3 
1be94     F5 E3 B9 E4 
1be98     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1be9c     07 E7 CD E7 
1bea0     92 E8 58 E9 
1bea4     1E EA E4 EA 
1bea8     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1beac     38 ED FF ED 
1beb0     C6 EE 8E EF 
1beb4     55 F0 1D F1 
1beb8     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1bebc     74 F3 3C F4 
1bec0     05 F5 CD F5 
1bec4     96 F6 5E F7 
1bec8     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1becc     B8 F9 81 FA 
1bed0     4A FB 13 FC 
1bed4     DC FC A5 FD 
1bed8     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1bedc                 | 	alignl
1bedc                 | __system__dat_
1bedc     00 00 00 00 
1bee0     00 00 00 00 | 	byte	$00[8]
1bee4     03 00 00 00 
1bee8     00 00 00 00 
1beec     00 00 00 00 
1bef0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bef4     00 00 00 00 
1bef8     00 00 00 00 
1befc     00 00 00 00 | 	byte	$00[12]
1bf00     05 00 00 00 
1bf04     00 00 00 00 
1bf08     00 00 00 00 
1bf0c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bf10     D8 C0 01 00 | 	long	@@@__system__dat_ + 508
1bf14     E0 C0 01 00 | 	long	@@@__system__dat_ + 516
1bf18     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf1c     E8 C0 01 00 | 	long	@@@__system__dat_ + 524
1bf20     F0 C0 01 00 | 	long	@@@__system__dat_ + 532
1bf24     00 00 00 00 
1bf28     00 00 00 00 | 	byte	$00[8]
1bf2c     01 00 00 00 
1bf30     06 00 00 00 
1bf34     00 00 00 00 
1bf38     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bf3c     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf40     F8 C0 01 00 | 	long	@@@__system__dat_ + 540
1bf44     00 C1 01 00 | 	long	@@@__system__dat_ + 548
1bf48     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf4c     08 C1 01 00 | 	long	@@@__system__dat_ + 556
1bf50     10 C1 01 00 | 	long	@@@__system__dat_ + 564
1bf54     00 00 00 00 
1bf58     00 00 00 00 | 	byte	$00[8]
1bf5c     01 00 00 00 
1bf60     06 00 00 00 
1bf64     00 00 00 00 
1bf68     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bf6c     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf70     18 C1 01 00 | 	long	@@@__system__dat_ + 572
1bf74     20 C1 01 00 | 	long	@@@__system__dat_ + 580
1bf78     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf7c     28 C1 01 00 | 	long	@@@__system__dat_ + 588
1bf80     30 C1 01 00 | 	long	@@@__system__dat_ + 596
1bf84     00 00 00 00 
      ...             
1c0d4     00 00 00 00 
1c0d8     00 00 00 00 | 	byte	$00[344]
1c0dc     34 63 00 00 | 	long	@@@__system___tx
1c0e0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0e4     7C 63 00 00 | 	long	@@@__system___rx
1c0e8     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0ec     FC 7D 00 00 | 	long	@@@__system___rxtxioctl_0174
1c0f0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0f4     74 7E 00 00 | 	long	@@@__system____dummy_flush_0175
1c0f8     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0fc     34 63 00 00 | 	long	@@@__system___tx
1c100     00 00 00 00 | 	byte	$00, $00, $00, $00
1c104     7C 63 00 00 | 	long	@@@__system___rx
1c108     00 00 00 00 | 	byte	$00, $00, $00, $00
1c10c     FC 7D 00 00 | 	long	@@@__system___rxtxioctl_0174
1c110     00 00 00 00 | 	byte	$00, $00, $00, $00
1c114     74 7E 00 00 | 	long	@@@__system____dummy_flush_0175
1c118     00 00 00 00 | 	byte	$00, $00, $00, $00
1c11c     34 63 00 00 | 	long	@@@__system___tx
1c120     00 00 00 00 | 	byte	$00, $00, $00, $00
1c124     7C 63 00 00 | 	long	@@@__system___rx
1c128     00 00 00 00 | 	byte	$00, $00, $00, $00
1c12c     FC 7D 00 00 | 	long	@@@__system___rxtxioctl_0174
1c130     00 00 00 00 | 	byte	$00, $00, $00, $00
1c134     74 7E 00 00 | 	long	@@@__system____dummy_flush_0175
1c138     00 00 00 00 | 	byte	$00, $00, $00, $00
1c13c                 | __heap_base
1c13c     00 00 00 00 
      ...             
1d13c     00 00 00 00 
1d140     00 00 00 00 | 	long	0[1026]
1d144                 | objmem
1d144     00 00 00 00 
      ...             
1da6c     00 00 00 00 
1da70     00 00 00 00 | 	long	0[588]
1da74                 | stackspace
1da74     00 00 00 00 | 	long	0[1]
1da78 119             | 	org	COG_BSS_START
1da78 119             | _var01
1da78 119             | 	res	1
1da78 11a             | _var02
1da78 11a             | 	res	1
1da78 11b             | _var03
1da78 11b             | 	res	1
1da78 11c             | _var04
1da78 11c             | 	res	1
1da78 11d             | _var05
1da78 11d             | 	res	1
1da78 11e             | _var06
1da78 11e             | 	res	1
1da78 11f             | _var07
1da78 11f             | 	res	1
1da78 120             | _var08
1da78 120             | 	res	1
1da78 121             | _var09
1da78 121             | 	res	1
1da78 122             | _var10
1da78 122             | 	res	1
1da78 123             | _var11
1da78 123             | 	res	1
1da78 124             | _var12
1da78 124             | 	res	1
1da78 125             | _var13
1da78 125             | 	res	1
1da78 126             | _var14
1da78 126             | 	res	1
1da78 127             | _var15
1da78 127             | 	res	1
1da78 128             | _var16
1da78 128             | 	res	1
1da78 129             | _var17
1da78 129             | 	res	1
1da78 12a             | _var18
1da78 12a             | 	res	1
1da78 12b             | _var19
1da78 12b             | 	res	1
1da78 12c             | _var20
1da78 12c             | 	res	1
1da78 12d             | _var21
1da78 12d             | 	res	1
1da78 12e             | _var22
1da78 12e             | 	res	1
1da78 12f             | _var23
1da78 12f             | 	res	1
1da78 130             | _var24
1da78 130             | 	res	1
1da78 131             | _var25
1da78 131             | 	res	1
1da78 132             | _var26
1da78 132             | 	res	1
1da78 133             | _var27
1da78 133             | 	res	1
1da78 134             | _var28
1da78 134             | 	res	1
1da78 135             | _var29
1da78 135             | 	res	1
1da78 136             | _var30
1da78 136             | 	res	1
1da78 137             | _var31
1da78 137             | 	res	1
1da78 138             | _var32
1da78 138             | 	res	1
1da78 139             | arg01
1da78 139             | 	res	1
1da78 13a             | arg02
1da78 13a             | 	res	1
1da78 13b             | arg03
1da78 13b             | 	res	1
1da78 13c             | arg04
1da78 13c             | 	res	1
1da78 13d             | arg05
1da78 13d             | 	res	1
1da78 13e             | arg06
1da78 13e             | 	res	1
1da78 13f             | arg07
1da78 13f             | 	res	1
1da78 140             | local01
1da78 140             | 	res	1
1da78 141             | local02
1da78 141             | 	res	1
1da78 142             | local03
1da78 142             | 	res	1
1da78 143             | local04
1da78 143             | 	res	1
1da78 144             | local05
1da78 144             | 	res	1
1da78 145             | local06
1da78 145             | 	res	1
1da78 146             | local07
1da78 146             | 	res	1
1da78 147             | local08
1da78 147             | 	res	1
1da78 148             | local09
1da78 148             | 	res	1
1da78 149             | local10
1da78 149             | 	res	1
1da78 14a             | local11
1da78 14a             | 	res	1
1da78 14b             | local12
1da78 14b             | 	res	1
1da78 14c             | local13
1da78 14c             | 	res	1
1da78 14d             | local14
1da78 14d             | 	res	1
1da78 14e             | local15
1da78 14e             | 	res	1
1da78 14f             | local16
1da78 14f             | 	res	1
1da78 150             | local17
1da78 150             | 	res	1
1da78 151             | local18
1da78 151             | 	res	1
1da78 152             | local19
1da78 152             | 	res	1
1da78 153             | local20
1da78 153             | 	res	1
1da78 154             | local21
1da78 154             | 	res	1
1da78 155             | local22
1da78 155             | 	res	1
1da78 156             | local23
1da78 156             | 	res	1
1da78 157             | muldiva_
1da78 157             | 	res	1
1da78 158             | muldivb_
1da78 158             | 	res	1
1da78 159             | 	fit	480
1da78 159             | 
