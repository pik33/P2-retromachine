00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/testrpi.p2asm"
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' '_clkfreq        = 354_689_500   '200x Atari 8-bit PAL,  50x Amiga PAL
00000                 | ' '_clkfreq       = 357_954_500   '200x Atari 8-bit NTSC, 50x Amiga NTSC
00000                 | ' _clkfreq		= 320_000_000    'will be set via video driver
00000                 | 	_clkfreq = 320000000
00000                 | ' rxpin           = 32
00000                 | 	rxpin = 32
00000                 | ' txpin           = 33
00000                 | 	txpin = 33
00000                 | ' baudrate        = 1920000
00000                 | 	baudrate = 1920000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 CC 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DE F0 03 F6 | 	mov	ptra, objptr
00410 003 01 00 00 FF 
00414 004 20 F1 07 F1 | 	add	ptra, ##800
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 07 80 80 FF 
00428 009 00 F0 67 FD | 	hubset	##16781304
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 07 80 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##16781307
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 68 89 89 FF 
00448 011 14 00 6C FC | 	wrlong	##320000000, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 A4 07 A0 FD | 	call	#_start
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 2E 62 FD | 	cogid	arg01
00614 084 03 2E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 BD 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 CD 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 2F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 31 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 33 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 35 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D CC 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 32 56 F0 |         shr	arg03, #1 wc
00688 0a1 17 31 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 2E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 30 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 32 56 F0 |         shr	arg03, #1 wc
00698 0a5 17 31 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 2E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 18 31 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 17 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 32 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 19 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 30 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 37 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 37 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 41 81 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 82 62 FD |        getqx   muldivb_
00740 0cf 19 80 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 40 81 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 BA 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 41 83 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 BA 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 BA D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 40 81 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 BA D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 41 83 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | __heap_ptr
0076c 0da 18 5E 00 00 | 	long	@__heap_base
00770 0db             | entryptr__
00770 0db 04 04 00 00 | 	long	@entry
00774 0dc             | itmp1_
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | itmp2_
00778 0dd 00 00 00 00 | 	long	0
0077c 0de             | objptr
0077c 0de 20 6E 00 00 | 	long	@objmem
00780 0df             | ptr___system__dat__
00780 0df 00 5E 00 00 | 	long	@__system__dat_
00784 0e0             | ptr__hng030rm_dat__
00784 0e0 9C 39 00 00 | 	long	@_hng030rm_dat_
00788 0e1             | ptr__hng030rm_putpixel1_
00788 0e1 F4 18 00 00 | 	long	@_hng030rm_putpixel1
0078c 0e2             | ptr__hng030rm_putpixel2_
0078c 0e2 DC 19 00 00 | 	long	@_hng030rm_putpixel2
00790 0e3             | ptr__hng030rm_putpixel4_
00790 0e3 B4 1A 00 00 | 	long	@_hng030rm_putpixel4
00794 0e4             | ptr__hng030rm_putpixel8_
00794 0e4 8C 1B 00 00 | 	long	@_hng030rm_putpixel8
00798 0e5             | ptr__serialcog_
00798 0e5 60 16 00 00 | 	long	@_serialcog
0079c 0e6             | result1
0079c 0e6 00 00 00 00 | 	long	0
007a0 0e7             | result2
007a0 0e7 00 00 00 00 | 	long	0
007a4 0e8             | COG_BSS_START
007a4 0e8             | 	fit	480
007a4                 | 	orgh
007a4                 | hubentry
007a4                 | 
007a4                 | ' 
007a4                 | ' pub start(mode)   |iii,caps
007a4                 | _start
007a4     25 5A 05 F6 | 	mov	COUNT_, #37
007a8     B0 00 A0 FD | 	call	#pushregs_
007ac                 | ' 
007ac                 | ' mode :=64+6
007ac     46 36 06 F6 | 	mov	local01, #70
007b0                 | ' caps:=0
007b0     00 38 06 F6 | 	mov	local02, #0
007b4                 | ' pinl(31)
007b4     58 3E 64 FD | 	drvl	#31
007b8                 | ' waitms(100)
007b8     64 2E 06 F6 | 	mov	arg01, #100
007bc     38 27 B0 FD | 	call	#__system___waitms
007c0                 | ' iii:=0
007c0                 | ' vgacog:=v.start(mode,hdmi_base)
007c0     46 3A 06 F6 | 	mov	local03, #70
007c4     01 00 00 FF 
007c8     60 BC 05 F1 | 	add	objptr, ##608
007cc     DE 3C 02 F6 | 	mov	local04, objptr
007d0                 | ' 
007d0                 | ' ' initialize pointers and variables
007d0                 | ' 
007d0                 | ' border_ptr:=@bordercolor
007d0     24 BC 85 F1 | 	sub	objptr, #36
007d4     DE 3C 62 FC | 	wrlong	local04, objptr
007d8     08 00 00 FF 
007dc     00 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##4096
007e0                 | ' font_ptr:=@st_font
007e0     04 BC 85 F1 | 	sub	objptr, #4
007e4     DE C0 61 FC | 	wrlong	ptr__hng030rm_dat__, objptr
007e8                 | ' hdmibase:=base
007e8     20 BC 05 F1 | 	add	objptr, #32
007ec     DE 00 68 FC | 	wrlong	#0, objptr
007f0     24 BC 85 F1 | 	sub	objptr, #36
007f4     E1 30 02 F6 | 	mov	arg02, ptr__hng030rm_putpixel1_
007f8                 | ' p1:=@putpixel1
007f8     DE 2E 02 F6 | 	mov	arg01, objptr
007fc     08 00 00 FF 
00800     00 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##4096
00804     10 26 B0 FD | 	call	#__system___make_methodptr
00808     E6 3E 02 F6 | 	mov	local05, result1
0080c     DC BC 05 F1 | 	add	objptr, #220
00810     DE 3E 62 FC | 	wrlong	local05, objptr
00814     DC BC 85 F1 | 	sub	objptr, #220
00818     E2 30 02 F6 | 	mov	arg02, ptr__hng030rm_putpixel2_
0081c                 | ' p2:=@putpixel2
0081c     DE 2E 02 F6 | 	mov	arg01, objptr
00820     F4 25 B0 FD | 	call	#__system___make_methodptr
00824     E6 3E 02 F6 | 	mov	local05, result1
00828     E0 BC 05 F1 | 	add	objptr, #224
0082c     DE 3E 62 FC | 	wrlong	local05, objptr
00830     E0 BC 85 F1 | 	sub	objptr, #224
00834     E3 30 02 F6 | 	mov	arg02, ptr__hng030rm_putpixel4_
00838                 | ' p4:=@putpixel4
00838     DE 2E 02 F6 | 	mov	arg01, objptr
0083c     D8 25 B0 FD | 	call	#__system___make_methodptr
00840     E6 3E 02 F6 | 	mov	local05, result1
00844     E4 BC 05 F1 | 	add	objptr, #228
00848     DE 3E 62 FC | 	wrlong	local05, objptr
0084c     E4 BC 85 F1 | 	sub	objptr, #228
00850     E4 30 02 F6 | 	mov	arg02, ptr__hng030rm_putpixel8_
00854                 | ' p8:=@putpixel8
00854     DE 2E 02 F6 | 	mov	arg01, objptr
00858     BC 25 B0 FD | 	call	#__system___make_methodptr
0085c     E6 3E 02 F6 | 	mov	local05, result1
00860     E8 BC 05 F1 | 	add	objptr, #232
00864     DE 3E 62 FC | 	wrlong	local05, objptr
00868     E8 BC 85 F1 | 	sub	objptr, #232
0086c                 | ' 
0086c                 | ' 
0086c                 | ' ' the mode has to be set here to enable computing the buffer length
0086c                 | ' 
0086c                 | ' setmode(mode)
0086c     46 2E 06 F6 | 	mov	arg01, #70
00870     A4 19 B0 FD | 	call	#_hng030rm_setmode
00874     40 BC 05 F1 | 	add	objptr, #64
00878     DE 40 02 F6 | 	mov	local06, objptr
0087c                 | ' 
0087c                 | ' vblank_ptr:=@vblank
0087c     34 BC 85 F1 | 	sub	objptr, #52
00880     DE 40 62 FC | 	wrlong	local06, objptr
00884     28 BC 05 F1 | 	add	objptr, #40
00888     DE 42 02 F6 | 	mov	local07, objptr
0088c                 | ' cursor_ptr:=@cursor_x
0088c     24 BC 85 F1 | 	sub	objptr, #36
00890     DE 42 62 FC | 	wrlong	local07, objptr
00894     88 BC 05 F1 | 	add	objptr, #136
00898     DE 44 02 F6 | 	mov	local08, objptr
0089c                 | ' 
0089c                 | ' fontnum_ptr:=@fontnum
0089c     78 BC 85 F1 | 	sub	objptr, #120
008a0     DE 44 62 FC | 	wrlong	local08, objptr
008a4                 | ' 
008a4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
008a4     78 BC 05 F1 | 	add	objptr, #120
008a8     DE 00 68 FC | 	wrlong	#0, objptr
008ac     1C BC 05 F1 | 	add	objptr, #28
008b0     DE 2E 02 F6 | 	mov	arg01, objptr
008b4     B4 BC 85 F1 | 	sub	objptr, #180
008b8     0F 00 00 FF 
008bc     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7768
008c0     E0 30 02 F6 | 	mov	arg02, ptr__hng030rm_dat__
008c4     0F 00 00 FF 
008c8     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7768
008cc                 | ' bytemove(@colors,@vgacolors,16)
008cc     10 32 06 F6 | 	mov	arg03, #16
008d0     1C 24 B0 FD | 	call	#__system____builtin_memmove
008d4                 | ' 
008d4                 | ' ' initialize a cursor
008d4                 | ' 
008d4                 | ' cursor_x:=0
008d4     34 BC 05 F1 | 	add	objptr, #52
008d8     DE 00 48 FC | 	wrbyte	#0, objptr
008dc                 | ' cursor_y:=0
008dc     01 BC 05 F1 | 	add	objptr, #1
008e0     DE 00 48 FC | 	wrbyte	#0, objptr
008e4                 | ' cursor_sh:=14
008e4     01 BC 05 F1 | 	add	objptr, #1
008e8     DE 1C 48 FC | 	wrbyte	#14, objptr
008ec     36 BC 85 F1 | 	sub	objptr, #54
008f0                 | ' 
008f0                 | ' 
008f0                 | ' ' start the cog
008f0                 | ' 
008f0                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
008f0     0F 00 00 FF 
008f4     68 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7784
008f8     E0 30 02 F6 | 	mov	arg02, ptr__hng030rm_dat__
008fc     0F 00 00 FF 
00900     68 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7784
00904     DE 32 02 F6 | 	mov	arg03, objptr
00908     10 2E 06 F6 | 	mov	arg01, #16
0090c     28 32 62 FD | 	setq	arg03
00910     18 2F F2 FC | 	coginit	arg01, arg02 wc
00914     01 2E 66 C6 |  if_b	neg	arg01, #1
00918     17 CD 01 F6 | 	mov	result1, arg01
0091c     E6 46 02 F6 | 	mov	local09, result1
00920     28 BC 05 F1 | 	add	objptr, #40
00924     DE 46 62 FC | 	wrlong	local09, objptr
00928     28 BC 85 F1 | 	sub	objptr, #40
0092c                 | ' waitms(20)
0092c     14 2E 06 F6 | 	mov	arg01, #20
00930     C4 25 B0 FD | 	call	#__system___waitms
00934                 | ' 
00934                 | ' ' clear the screen and set the colors to green on black
00934                 | ' 
00934                 | ' cls(c_green,c_black)
00934     C7 2E 06 F6 | 	mov	arg01, #199
00938     00 30 06 F6 | 	mov	arg02, #0
0093c     F4 12 B0 FD | 	call	#_hng030rm_cls
00940                 | ' setbordercolor(0,0,128)
00940     00 2E 06 F6 | 	mov	arg01, #0
00944     00 30 06 F6 | 	mov	arg02, #0
00948     80 32 06 F6 | 	mov	arg03, #128
0094c     C0 12 B0 FD | 	call	#_hng030rm_setbordercolor
00950                 | ' setwritecolors(c_green,c_black)
00950                 | ' 
00950                 | ' 
00950                 | ' write_color:=ff
00950     38 BC 05 F1 | 	add	objptr, #56
00954     DE 8E 69 FC | 	wrlong	#199, objptr
00958                 | ' write_background:=bb
00958     04 BC 05 F1 | 	add	objptr, #4
0095c     DE 00 68 FC | 	wrlong	#0, objptr
00960                 | ' 
00960                 | ' return cog
00960     14 BC 85 F1 | 	sub	objptr, #20
00964     DE CC 01 FB | 	rdlong	result1, objptr
00968     01 00 00 FF 
0096c     5C BC 85 F1 | 	sub	objptr, ##604
00970     DE CC 61 FC | 	wrlong	result1, objptr
00974                 | ' 'v.setmode(mode+64)
00974                 | ' v.setfontfamily(0)
00974                 | ' 
00974                 | ' font_family:=afontnum
00974     01 00 00 FF 
00978     FC BC 05 F1 | 	add	objptr, ##764
0097c     DE 00 68 FC | 	wrlong	#0, objptr
00980     C8 BC 85 F1 | 	sub	objptr, #200
00984                 | ' v.cls(154,147)
00984     9A 2E 06 F6 | 	mov	arg01, #154
00988     93 30 06 F6 | 	mov	arg02, #147
0098c     A4 12 B0 FD | 	call	#_hng030rm_cls
00990                 | ' v.setbordercolor(0,0,0)
00990     00 2E 06 F6 | 	mov	arg01, #0
00994     00 30 06 F6 | 	mov	arg02, #0
00998     00 32 06 F6 | 	mov	arg03, #0
0099c     70 12 B0 FD | 	call	#_hng030rm_setbordercolor
009a0     01 00 00 FF 
009a4     34 BC 85 F1 | 	sub	objptr, ##564
009a8                 | ' serial_start(rxpin, txpin, baudrate)
009a8     20 2E 06 F6 | 	mov	arg01, #32
009ac     21 30 06 F6 | 	mov	arg02, #33
009b0     A6 0E 00 FF 
009b4     00 32 06 F6 | 	mov	arg03, ##1920000
009b8     E4 0D B0 FD | 	call	#_serial_start
009bc                 | ' midi_start(29,30)
009bc     1D 2E 06 F6 | 	mov	arg01, #29
009c0     1E 30 06 F6 | 	mov	arg02, #30
009c4     60 0E B0 FD | 	call	#_midi_start
009c8                 | ' pinwrite(14,0)
009c8     00 30 06 F6 | 	mov	arg02, #0
009cc     01 30 D6 F7 | 	test	arg02, #1 wc
009d0     5A 1C 64 FD | 	drvc	#14
009d4                 | ' pinwrite(15,0)
009d4     01 30 D6 F7 | 	test	arg02, #1 wc
009d8     5A 1E 64 FD | 	drvc	#15
009dc                 | ' 
009dc                 | ' cogspin(16,serialcog(),@serialstack)
009dc     DE 48 02 F6 | 	mov	local10, objptr
009e0     20 BD 05 F1 | 	add	objptr, #288
009e4     DE 4A 02 F6 | 	mov	local11, objptr
009e8     25 49 62 FC | 	wrlong	local10, local11
009ec     04 4A 06 F1 | 	add	local11, #4
009f0     25 CB 61 FC | 	wrlong	ptr__serialcog_, local11
009f4     DB 4C 02 F6 | 	mov	local12, entryptr__
009f8     DE 4E 02 F6 | 	mov	local13, objptr
009fc     27 51 02 F6 | 	mov	local14, local13
00a00     10 2E 06 F6 | 	mov	arg01, #16
00a04     28 33 02 F6 | 	mov	arg03, local14
00a08     28 32 62 FD | 	setq	arg03
00a0c     26 2F F2 FC | 	coginit	arg01, local12 wc
00a10     01 2E 66 C6 |  if_b	neg	arg01, #1
00a14     17 CD 01 F6 | 	mov	result1, arg01
00a18     E6 52 02 F6 | 	mov	local15, result1
00a1c                 | ' v.setcursorshape(0)
00a1c                 | ' 
00a1c                 | ' ''---------- Define a cursor shape (0-full..15-line)
00a1c                 | ' 
00a1c                 | ' cursor_sh:=shape
00a1c     4A BD 05 F1 | 	add	objptr, #330
00a20     DE 00 48 FC | 	wrbyte	#0, objptr
00a24                 | ' v.setwritecolors(154,147)
00a24     93 30 06 F6 | 	mov	arg02, #147
00a28                 | ' 
00a28                 | ' 
00a28                 | ' write_color:=ff
00a28     02 BC 05 F1 | 	add	objptr, #2
00a2c     DE 34 69 FC | 	wrlong	#154, objptr
00a30                 | ' write_background:=bb
00a30     04 BC 05 F1 | 	add	objptr, #4
00a34     DE 26 69 FC | 	wrlong	#147, objptr
00a38     3C BC 85 F1 | 	sub	objptr, #60
00a3c                 | ' v.writeln(string(" "))
00a3c     1C 00 00 FF 
00a40     6E 2E 06 F6 | 	mov	arg01, ##@LR__0229
00a44     8C 15 B0 FD | 	call	#_hng030rm_writeln
00a48                 | ' v.writeln(string("  P2 Retromachine v. 0.00"))
00a48     1C 00 00 FF 
00a4c     70 2E 06 F6 | 	mov	arg01, ##@LR__0230
00a50     80 15 B0 FD | 	call	#_hng030rm_writeln
00a54                 | ' v.writeln(string(" "))
00a54     1C 00 00 FF 
00a58     8A 2E 06 F6 | 	mov	arg01, ##@LR__0231
00a5c     74 15 B0 FD | 	call	#_hng030rm_writeln
00a60                 | ' v.writeln(string("  Ready"))
00a60     1C 00 00 FF 
00a64     8C 2E 06 F6 | 	mov	arg01, ##@LR__0232
00a68     68 15 B0 FD | 	call	#_hng030rm_writeln
00a6c                 | ' v.writeln(string(" "))
00a6c     1C 00 00 FF 
00a70     94 2E 06 F6 | 	mov	arg01, ##@LR__0233
00a74     5C 15 B0 FD | 	call	#_hng030rm_writeln
00a78                 | ' v.write(string("  "))
00a78     1C 00 00 FF 
00a7c     96 2E 06 F6 | 	mov	arg01, ##@LR__0234
00a80     9C 13 B0 FD | 	call	#_hng030rm_write
00a84     01 00 00 FF 
00a88     34 BC 85 F1 | 	sub	objptr, ##564
00a8c                 | ' 
00a8c                 | ' iii:=fileopen(string("C:\kernel.img"))
00a8c     1C 00 00 FF 
00a90     99 2E 06 F6 | 	mov	arg01, ##@LR__0235
00a94                 | ' 
00a94                 | ' q:=strsize(filename)
00a94     17 55 02 F6 | 	mov	local16, arg01
00a98     00 56 06 F6 | 	mov	local17, #0
00a9c     70 F5 9F FE | 	loc	pa,	#(@LR__0002-@LR__0001)
00aa0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00aa4                 | LR__0001
00aa4     17 59 CA FA | 	rdbyte	local18, arg01 wz
00aa8     01 56 06 51 |  if_ne	add	local17, #1
00aac     01 2E 06 51 |  if_ne	add	arg01, #1
00ab0     F0 FF 9F 5D |  if_ne	jmp	#LR__0001
00ab4                 | LR__0002
00ab4     2B CD 01 F6 | 	mov	result1, local17
00ab8     E6 5A 02 F6 | 	mov	local19, result1
00abc                 | ' tx($40)
00abc     40 2E 06 F6 | 	mov	arg01, #64
00ac0     F0 0D B0 FD | 	call	#_tx
00ac4                 | ' repeat i from 0 to q-1
00ac4     00 5C 06 F6 | 	mov	local20, #0
00ac8     2D 5F 02 F6 | 	mov	local21, local19
00acc     01 5E 86 F1 | 	sub	local21, #1
00ad0     00 5E 5E F2 | 	cmps	local21, #0 wcz
00ad4     01 60 06 16 |  if_a	mov	local22, #1
00ad8     01 60 66 E6 |  if_be	neg	local22, #1
00adc     30 5F 02 F1 | 	add	local21, local22
00ae0                 | LR__0003
00ae0     2A 63 02 F6 | 	mov	local23, local16
00ae4     2E 63 02 F1 | 	add	local23, local20
00ae8                 | '   tx(byte[filename+i])
00ae8     31 2F C2 FA | 	rdbyte	arg01, local23
00aec     C4 0D B0 FD | 	call	#_tx
00af0     30 5D 02 F1 | 	add	local20, local22
00af4     2F 5D 0A F2 | 	cmp	local20, local21 wz
00af8     E4 FF 9F 5D |  if_ne	jmp	#LR__0003
00afc                 | ' tx(255)
00afc     FF 2E 06 F6 | 	mov	arg01, #255
00b00     B0 0D B0 FD | 	call	#_tx
00b04                 | ' return q
00b04     2D CD 01 F6 | 	mov	result1, local19
00b08     E6 64 02 F6 | 	mov	local24, result1
00b0c     32 67 02 F6 | 	mov	local25, local24
00b10                 | ' 
00b10                 | ' repeat
00b10                 | LR__0004
00b10                 | '  
00b10                 | '   repeat 
00b10                 | LR__0005
00b10                 | '     rr:=serialread()
00b10     28 0C B0 FD | 	call	#_serialread
00b14     E6 48 02 F6 | 	mov	local10, result1
00b18     01 00 00 FF 
00b1c     20 BC 05 F1 | 	add	objptr, ##544
00b20     DE 48 62 FC | 	wrlong	local10, objptr
00b24                 | '     mrr:=mrxcheck()
00b24                 | ' 
00b24                 | ' '' Check for serial input
00b24                 | ' '' -- returns -1 if nothing available
00b24                 | ' 
00b24                 | '   rxbyte := -1
00b24     01 68 66 F6 | 	neg	local26, #1
00b28                 | '   check := pinr(mrxp)
00b28     01 00 00 FF 
00b2c     10 BC 85 F1 | 	sub	objptr, ##528
00b30     DE 2E 02 FB | 	rdlong	arg01, objptr
00b34     10 BC 85 F1 | 	sub	objptr, #16
00b38     9C 23 B0 FD | 	call	#__system___pinread
00b3c     E6 6A 0A F6 | 	mov	local27, result1 wz
00b40                 | '   if (check)
00b40     18 00 90 AD |  if_e	jmp	#LR__0006
00b44                 | '     rxbyte := rdpin(mrxp) >> 24
00b44     10 BC 05 F1 | 	add	objptr, #16
00b48     DE 2E 02 FB | 	rdlong	arg01, objptr
00b4c     10 BC 85 F1 | 	sub	objptr, #16
00b50     00 68 06 F6 | 	mov	local26, #0
00b54     17 69 8A FA | 	rdpin	local26, arg01
00b58     18 68 46 F0 | 	shr	local26, #24
00b5c                 | LR__0006
00b5c     34 CD 01 F6 | 	mov	result1, local26
00b60     01 00 00 FF 
00b64     24 BC 05 F1 | 	add	objptr, ##548
00b68     DE CC 61 FC | 	wrlong	result1, objptr
00b6c     04 BC 85 F1 | 	sub	objptr, #4
00b70     DE 4A 02 FB | 	rdlong	local11, objptr
00b74     01 00 00 FF 
00b78     20 BC 85 F1 | 	sub	objptr, ##544
00b7c     00 4A 5E F2 | 	cmps	local11, #0 wcz
00b80     20 00 90 3D |  if_ae	jmp	#LR__0007
00b84     01 00 00 FF 
00b88     24 BC 05 F1 | 	add	objptr, ##548
00b8c     DE 4C 02 FB | 	rdlong	local12, objptr
00b90     01 00 00 FF 
00b94     24 BC 85 F1 | 	sub	objptr, ##548
00b98     26 65 02 F6 | 	mov	local24, local12
00b9c     00 64 5E F2 | 	cmps	local24, #0 wcz
00ba0     6C FF 9F CD |  if_b	jmp	#LR__0005
00ba4                 | LR__0007
00ba4                 | '  '   debug(udec(mrr))
00ba4                 | '   until rr>=0 || mrr>=0  
00ba4                 | '     
00ba4                 | ' '  rr:=serialblockingread()
00ba4                 | ' 
00ba4                 | ' {{
00ba4                 | ' }}   
00ba4                 | '   if mrr>=0
00ba4     01 00 00 FF 
00ba8     24 BC 05 F1 | 	add	objptr, ##548
00bac     DE 48 02 FB | 	rdlong	local10, objptr
00bb0     01 00 00 FF 
00bb4     24 BC 85 F1 | 	sub	objptr, ##548
00bb8     00 48 5E F2 | 	cmps	local10, #0 wcz
00bbc     D4 00 90 CD |  if_b	jmp	#LR__0013
00bc0                 | '     v.write(string(" Midi: "))
00bc0     1C 00 00 FF 
00bc4     A7 2E 06 F6 | 	mov	arg01, ##@LR__0236
00bc8     01 00 00 FF 
00bcc     34 BC 05 F1 | 	add	objptr, ##564
00bd0     4C 12 B0 FD | 	call	#_hng030rm_write
00bd4                 | '     v.writeln(v.inttohex(mrr,2))
00bd4     10 BC 85 F1 | 	sub	objptr, #16
00bd8     DE 2E 02 FB | 	rdlong	arg01, objptr
00bdc     02 64 06 F6 | 	mov	local24, #2
00be0     02 30 06 F6 | 	mov	arg02, #2
00be4                 | ' 
00be4                 | ' j:=i
00be4                 | ' pos:=d-1
00be4     01 6C 06 F6 | 	mov	local28, #1
00be8                 | ' k:=0
00be8     54 BC 05 F1 | 	add	objptr, #84
00bec     DE 30 02 F1 | 	add	arg02, objptr
00bf0                 | ' n_string[d]:=0
00bf0     18 01 48 FC | 	wrbyte	#0, arg02
00bf4                 | ' repeat k from 0 to d-1
00bf4     00 6E 06 F6 | 	mov	local29, #0
00bf8     44 BC 85 F1 | 	sub	objptr, #68
00bfc     01 58 06 F6 | 	mov	local18, #1
00c00     02 70 06 F6 | 	mov	local30, #2
00c04     18 F4 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00c08     93 00 A0 FD | 	call	#FCACHE_LOAD_
00c0c                 | LR__0008
00c0c     37 73 02 F6 | 	mov	local31, local29
00c10     44 BC 05 F1 | 	add	objptr, #68
00c14     DE 72 02 F1 | 	add	local31, objptr
00c18                 | '   n_string[k]:=48
00c18     39 61 48 FC | 	wrbyte	#48, local31
00c1c     01 6E 06 F1 | 	add	local29, #1
00c20     02 6E 0E F2 | 	cmp	local29, #2 wz
00c24     44 BC 85 F1 | 	sub	objptr, #68
00c28     E0 FF 9F 5D |  if_ne	jmp	#LR__0008
00c2c                 | LR__0009
00c2c                 | ' if (j<>0)
00c2c     00 2E 0E F2 | 	cmp	arg01, #0 wz
00c30     40 00 90 AD |  if_e	jmp	#LR__0012
00c34                 | ' 
00c34                 | '   repeat while (pos>-1)
00c34                 | LR__0010
00c34     FF FF 7F FF 
00c38     FF 6D 5E F2 | 	cmps	local28, ##-1 wcz
00c3c     34 00 90 ED |  if_be	jmp	#LR__0011
00c40     17 75 02 F6 | 	mov	local32, arg01
00c44     0F 74 06 F5 | 	and	local32, #15
00c48                 | '     q:=j+//16
00c48                 | '     if (q>9)
00c48     09 74 5E F2 | 	cmps	local32, #9 wcz
00c4c                 | '       q:=q+7
00c4c     07 74 06 11 |  if_a	add	local32, #7
00c50                 | '     q:=48+q
00c50     30 74 06 F1 | 	add	local32, #48
00c54     36 77 02 F6 | 	mov	local33, local28
00c58     44 BC 05 F1 | 	add	objptr, #68
00c5c     DE 76 02 F1 | 	add	local33, objptr
00c60                 | '     n_string[pos]:=q
00c60     3B 75 42 FC | 	wrbyte	local32, local33
00c64                 | '     j:=j+/16
00c64     04 2E 46 F0 | 	shr	arg01, #4
00c68                 | '     pos-=1
00c68     01 6C 86 F1 | 	sub	local28, #1
00c6c     44 BC 85 F1 | 	sub	objptr, #68
00c70     C0 FF 9F FD | 	jmp	#LR__0010
00c74                 | LR__0011
00c74                 | LR__0012
00c74     44 BC 05 F1 | 	add	objptr, #68
00c78     DE CC 01 F6 | 	mov	result1, objptr
00c7c     44 BC 85 F1 | 	sub	objptr, #68
00c80                 | ' 
00c80                 | ' q:=@n_string
00c80                 | ' return q
00c80     E6 4C 02 F6 | 	mov	local12, result1
00c84     26 2F 02 F6 | 	mov	arg01, local12
00c88     48 13 B0 FD | 	call	#_hng030rm_writeln
00c8c     01 00 00 FF 
00c90     34 BC 85 F1 | 	sub	objptr, ##564
00c94                 | LR__0013
00c94                 | '     
00c94                 | '  
00c94                 | '   if rr==$81    'mousex
00c94     01 00 00 FF 
00c98     20 BC 05 F1 | 	add	objptr, ##544
00c9c     DE 48 02 FB | 	rdlong	local10, objptr
00ca0     01 00 00 FF 
00ca4     20 BC 85 F1 | 	sub	objptr, ##544
00ca8     81 48 0E F2 | 	cmp	local10, #129 wz
00cac     04 01 90 5D |  if_ne	jmp	#LR__0018
00cb0                 | '     mousex:=serialblockingread()
00cb0                 | ' 
00cb0                 | ' repeat
00cb0                 | LR__0014
00cb0                 | '   r:=serialread()
00cb0     88 0A B0 FD | 	call	#_serialread
00cb4     E6 78 02 F6 | 	mov	local34, result1
00cb8     FF FF 7F FF 
00cbc     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00cc0     EC FF 9F AD |  if_e	jmp	#LR__0014
00cc4                 | ' until r<>-1
00cc4                 | ' return r
00cc4     3C CD 01 F6 | 	mov	result1, local34
00cc8     E6 48 02 F6 | 	mov	local10, result1
00ccc     01 00 00 FF 
00cd0     2C BC 05 F1 | 	add	objptr, ##556
00cd4     DE 48 52 FC | 	wrword	local10, objptr
00cd8     01 00 00 FF 
00cdc     2C BC 85 F1 | 	sub	objptr, ##556
00ce0                 | '     mousex+=serialblockingread()<<7
00ce0                 | ' 
00ce0                 | ' repeat
00ce0                 | LR__0015
00ce0                 | '   r:=serialread()
00ce0     58 0A B0 FD | 	call	#_serialread
00ce4     E6 78 02 F6 | 	mov	local34, result1
00ce8     FF FF 7F FF 
00cec     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00cf0     EC FF 9F AD |  if_e	jmp	#LR__0015
00cf4                 | ' until r<>-1
00cf4                 | ' return r
00cf4     3C CD 01 F6 | 	mov	result1, local34
00cf8     E6 7A 02 F6 | 	mov	local35, result1
00cfc     07 7A 66 F0 | 	shl	local35, #7
00d00     01 00 00 FF 
00d04     2C BC 05 F1 | 	add	objptr, ##556
00d08     DE 4C E2 FA | 	rdword	local12, objptr
00d0c     26 65 02 F6 | 	mov	local24, local12
00d10     3D 65 02 F1 | 	add	local24, local35
00d14     DE 64 52 FC | 	wrword	local24, objptr
00d18     01 00 00 FF 
00d1c     2C BC 85 F1 | 	sub	objptr, ##556
00d20                 | '     rr:=serialblockingread()
00d20                 | ' 
00d20                 | ' repeat
00d20                 | LR__0016
00d20                 | '   r:=serialread()
00d20     18 0A B0 FD | 	call	#_serialread
00d24     E6 78 02 F6 | 	mov	local34, result1
00d28     FF FF 7F FF 
00d2c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00d30     EC FF 9F AD |  if_e	jmp	#LR__0016
00d34                 | ' until r<>-1
00d34                 | ' return r
00d34     3C CD 01 F6 | 	mov	result1, local34
00d38     01 00 00 FF 
00d3c     20 BC 05 F1 | 	add	objptr, ##544
00d40     DE CC 61 FC | 	wrlong	result1, objptr
00d44                 | '     if rr==255
00d44     E6 48 02 F6 | 	mov	local10, result1
00d48     01 00 00 FF 
00d4c     20 BC 85 F1 | 	sub	objptr, ##544
00d50     FF 48 0E F2 | 	cmp	local10, #255 wz
00d54     5C 00 90 5D |  if_ne	jmp	#LR__0017
00d58                 | '      v.write(string("  Mouse moved, x= "))
00d58     1C 00 00 FF 
00d5c     AF 2E 06 F6 | 	mov	arg01, ##@LR__0237
00d60     01 00 00 FF 
00d64     34 BC 05 F1 | 	add	objptr, ##564
00d68     B4 10 B0 FD | 	call	#_hng030rm_write
00d6c                 | '      v.write(v.inttostr(mousex))
00d6c     08 BC 85 F1 | 	sub	objptr, #8
00d70     DE 2E E2 FA | 	rdword	arg01, objptr
00d74     08 BC 05 F1 | 	add	objptr, #8
00d78     8C 13 B0 FD | 	call	#_hng030rm_inttostr
00d7c     E6 2E 02 F6 | 	mov	arg01, result1
00d80     9C 10 B0 FD | 	call	#_hng030rm_write
00d84                 | '      v.write(string(", y= "))
00d84     1C 00 00 FF 
00d88     C2 2E 06 F6 | 	mov	arg01, ##@LR__0238
00d8c     90 10 B0 FD | 	call	#_hng030rm_write
00d90                 | '      v.writeln(v.inttostr(mousey))
00d90     06 BC 85 F1 | 	sub	objptr, #6
00d94     DE 2E E2 FA | 	rdword	arg01, objptr
00d98     06 BC 05 F1 | 	add	objptr, #6
00d9c     68 13 B0 FD | 	call	#_hng030rm_inttostr
00da0     E6 64 02 F6 | 	mov	local24, result1
00da4     32 2F 02 F6 | 	mov	arg01, local24
00da8     28 12 B0 FD | 	call	#_hng030rm_writeln
00dac     01 00 00 FF 
00db0     34 BC 85 F1 | 	sub	objptr, ##564
00db4                 | LR__0017
00db4                 | LR__0018
00db4                 | ' 
00db4                 | '   if rr==$82    'mousey
00db4     01 00 00 FF 
00db8     20 BC 05 F1 | 	add	objptr, ##544
00dbc     DE 48 02 FB | 	rdlong	local10, objptr
00dc0     01 00 00 FF 
00dc4     20 BC 85 F1 | 	sub	objptr, ##544
00dc8     82 48 0E F2 | 	cmp	local10, #130 wz
00dcc     04 01 90 5D |  if_ne	jmp	#LR__0023
00dd0                 | '     mousey:=serialblockingread()
00dd0                 | ' 
00dd0                 | ' repeat
00dd0                 | LR__0019
00dd0                 | '   r:=serialread()
00dd0     68 09 B0 FD | 	call	#_serialread
00dd4     E6 78 02 F6 | 	mov	local34, result1
00dd8     FF FF 7F FF 
00ddc     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00de0     EC FF 9F AD |  if_e	jmp	#LR__0019
00de4                 | ' until r<>-1
00de4                 | ' return r
00de4     3C CD 01 F6 | 	mov	result1, local34
00de8     E6 48 02 F6 | 	mov	local10, result1
00dec     01 00 00 FF 
00df0     2E BC 05 F1 | 	add	objptr, ##558
00df4     DE 48 52 FC | 	wrword	local10, objptr
00df8     01 00 00 FF 
00dfc     2E BC 85 F1 | 	sub	objptr, ##558
00e00                 | '     mousey+=serialblockingread()<<7
00e00                 | ' 
00e00                 | ' repeat
00e00                 | LR__0020
00e00                 | '   r:=serialread()
00e00     38 09 B0 FD | 	call	#_serialread
00e04     E6 78 02 F6 | 	mov	local34, result1
00e08     FF FF 7F FF 
00e0c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00e10     EC FF 9F AD |  if_e	jmp	#LR__0020
00e14                 | ' until r<>-1
00e14                 | ' return r
00e14     3C CD 01 F6 | 	mov	result1, local34
00e18     E6 7C 02 F6 | 	mov	local36, result1
00e1c     07 7C 66 F0 | 	shl	local36, #7
00e20     01 00 00 FF 
00e24     2E BC 05 F1 | 	add	objptr, ##558
00e28     DE 4C E2 FA | 	rdword	local12, objptr
00e2c     26 65 02 F6 | 	mov	local24, local12
00e30     3E 65 02 F1 | 	add	local24, local36
00e34     DE 64 52 FC | 	wrword	local24, objptr
00e38     01 00 00 FF 
00e3c     2E BC 85 F1 | 	sub	objptr, ##558
00e40                 | '     rr:=serialblockingread()
00e40                 | ' 
00e40                 | ' repeat
00e40                 | LR__0021
00e40                 | '   r:=serialread()
00e40     F8 08 B0 FD | 	call	#_serialread
00e44     E6 78 02 F6 | 	mov	local34, result1
00e48     FF FF 7F FF 
00e4c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00e50     EC FF 9F AD |  if_e	jmp	#LR__0021
00e54                 | ' until r<>-1
00e54                 | ' return r
00e54     3C CD 01 F6 | 	mov	result1, local34
00e58     01 00 00 FF 
00e5c     20 BC 05 F1 | 	add	objptr, ##544
00e60     DE CC 61 FC | 	wrlong	result1, objptr
00e64                 | '     if rr==255
00e64     E6 48 02 F6 | 	mov	local10, result1
00e68     01 00 00 FF 
00e6c     20 BC 85 F1 | 	sub	objptr, ##544
00e70     FF 48 0E F2 | 	cmp	local10, #255 wz
00e74     5C 00 90 5D |  if_ne	jmp	#LR__0022
00e78                 | '      v.write(string("  Mouse moved, x= "))
00e78     1C 00 00 FF 
00e7c     C8 2E 06 F6 | 	mov	arg01, ##@LR__0239
00e80     01 00 00 FF 
00e84     34 BC 05 F1 | 	add	objptr, ##564
00e88     94 0F B0 FD | 	call	#_hng030rm_write
00e8c                 | '      v.write(v.inttostr(mousex))
00e8c     08 BC 85 F1 | 	sub	objptr, #8
00e90     DE 2E E2 FA | 	rdword	arg01, objptr
00e94     08 BC 05 F1 | 	add	objptr, #8
00e98     6C 12 B0 FD | 	call	#_hng030rm_inttostr
00e9c     E6 2E 02 F6 | 	mov	arg01, result1
00ea0     7C 0F B0 FD | 	call	#_hng030rm_write
00ea4                 | '      v.write(string(", y= "))
00ea4     1C 00 00 FF 
00ea8     DB 2E 06 F6 | 	mov	arg01, ##@LR__0240
00eac     70 0F B0 FD | 	call	#_hng030rm_write
00eb0                 | '      v.writeln(v.inttostr(mousey))
00eb0     06 BC 85 F1 | 	sub	objptr, #6
00eb4     DE 2E E2 FA | 	rdword	arg01, objptr
00eb8     06 BC 05 F1 | 	add	objptr, #6
00ebc     48 12 B0 FD | 	call	#_hng030rm_inttostr
00ec0     E6 64 02 F6 | 	mov	local24, result1
00ec4     32 2F 02 F6 | 	mov	arg01, local24
00ec8     08 11 B0 FD | 	call	#_hng030rm_writeln
00ecc     01 00 00 FF 
00ed0     34 BC 85 F1 | 	sub	objptr, ##564
00ed4                 | LR__0022
00ed4                 | LR__0023
00ed4                 | ' 
00ed4                 | '   if rr==$83   'mousewheel
00ed4     01 00 00 FF 
00ed8     20 BC 05 F1 | 	add	objptr, ##544
00edc     DE 48 02 FB | 	rdlong	local10, objptr
00ee0     01 00 00 FF 
00ee4     20 BC 85 F1 | 	sub	objptr, ##544
00ee8     83 48 0E F2 | 	cmp	local10, #131 wz
00eec     D0 00 90 5D |  if_ne	jmp	#LR__0028
00ef0                 | '     mousewheel:=serialblockingread()
00ef0                 | ' 
00ef0                 | ' repeat
00ef0                 | LR__0024
00ef0                 | '   r:=serialread()
00ef0     48 08 B0 FD | 	call	#_serialread
00ef4     E6 78 02 F6 | 	mov	local34, result1
00ef8     FF FF 7F FF 
00efc     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00f00     EC FF 9F AD |  if_e	jmp	#LR__0024
00f04                 | ' until r<>-1
00f04                 | ' return r
00f04     3C CD 01 F6 | 	mov	result1, local34
00f08     E6 48 02 F6 | 	mov	local10, result1
00f0c     01 00 00 FF 
00f10     2A BC 05 F1 | 	add	objptr, ##554
00f14     DE 48 42 FC | 	wrbyte	local10, objptr
00f18     01 00 00 FF 
00f1c     2A BC 85 F1 | 	sub	objptr, ##554
00f20                 | '     dummy:=serialblockingread()
00f20                 | ' 
00f20                 | ' repeat
00f20                 | LR__0025
00f20                 | '   r:=serialread()
00f20     18 08 B0 FD | 	call	#_serialread
00f24     E6 78 02 F6 | 	mov	local34, result1
00f28     FF FF 7F FF 
00f2c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00f30     EC FF 9F AD |  if_e	jmp	#LR__0025
00f34                 | ' until r<>-1
00f34                 | ' return r
00f34     3C CD 01 F6 | 	mov	result1, local34
00f38     E6 48 02 F6 | 	mov	local10, result1
00f3c     01 00 00 FF 
00f40     30 BC 05 F1 | 	add	objptr, ##560
00f44     DE 48 42 FC | 	wrbyte	local10, objptr
00f48     01 00 00 FF 
00f4c     30 BC 85 F1 | 	sub	objptr, ##560
00f50                 | '     rr:=serialblockingread()
00f50                 | ' 
00f50                 | ' repeat
00f50                 | LR__0026
00f50                 | '   r:=serialread()
00f50     E8 07 B0 FD | 	call	#_serialread
00f54     E6 78 02 F6 | 	mov	local34, result1
00f58     FF FF 7F FF 
00f5c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00f60     EC FF 9F AD |  if_e	jmp	#LR__0026
00f64                 | ' until r<>-1
00f64                 | ' return r
00f64     3C CD 01 F6 | 	mov	result1, local34
00f68     01 00 00 FF 
00f6c     20 BC 05 F1 | 	add	objptr, ##544
00f70     DE CC 61 FC | 	wrlong	result1, objptr
00f74                 | '     if rr==255
00f74     E6 48 02 F6 | 	mov	local10, result1
00f78     01 00 00 FF 
00f7c     20 BC 85 F1 | 	sub	objptr, ##544
00f80     FF 48 0E F2 | 	cmp	local10, #255 wz
00f84     38 00 90 5D |  if_ne	jmp	#LR__0027
00f88                 | '      v.write(string("  Mouse wheel: "))
00f88     1C 00 00 FF 
00f8c     E1 2E 06 F6 | 	mov	arg01, ##@LR__0241
00f90     01 00 00 FF 
00f94     34 BC 05 F1 | 	add	objptr, ##564
00f98     84 0E B0 FD | 	call	#_hng030rm_write
00f9c                 | '      v.writeln(v.inttostr(mousewheel))
00f9c     0A BC 85 F1 | 	sub	objptr, #10
00fa0     DE 2E C2 FA | 	rdbyte	arg01, objptr
00fa4     0A BC 05 F1 | 	add	objptr, #10
00fa8     5C 11 B0 FD | 	call	#_hng030rm_inttostr
00fac     E6 64 02 F6 | 	mov	local24, result1
00fb0     32 2F 02 F6 | 	mov	arg01, local24
00fb4     1C 10 B0 FD | 	call	#_hng030rm_writeln
00fb8     01 00 00 FF 
00fbc     34 BC 85 F1 | 	sub	objptr, ##564
00fc0                 | LR__0027
00fc0                 | LR__0028
00fc0                 | ' 
00fc0                 | '   if rr==$84   'mousekey
00fc0     01 00 00 FF 
00fc4     20 BC 05 F1 | 	add	objptr, ##544
00fc8     DE 48 02 FB | 	rdlong	local10, objptr
00fcc     01 00 00 FF 
00fd0     20 BC 85 F1 | 	sub	objptr, ##544
00fd4     84 48 0E F2 | 	cmp	local10, #132 wz
00fd8     D0 00 90 5D |  if_ne	jmp	#LR__0033
00fdc                 | '     mousekey:=serialblockingread()
00fdc                 | ' 
00fdc                 | ' repeat
00fdc                 | LR__0029
00fdc                 | '   r:=serialread()
00fdc     5C 07 B0 FD | 	call	#_serialread
00fe0     E6 78 02 F6 | 	mov	local34, result1
00fe4     FF FF 7F FF 
00fe8     FF 79 0E F2 | 	cmp	local34, ##-1 wz
00fec     EC FF 9F AD |  if_e	jmp	#LR__0029
00ff0                 | ' until r<>-1
00ff0                 | ' return r
00ff0     3C CD 01 F6 | 	mov	result1, local34
00ff4     E6 48 02 F6 | 	mov	local10, result1
00ff8     01 00 00 FF 
00ffc     2B BC 05 F1 | 	add	objptr, ##555
01000     DE 48 42 FC | 	wrbyte	local10, objptr
01004     01 00 00 FF 
01008     2B BC 85 F1 | 	sub	objptr, ##555
0100c                 | '     dummy:=serialblockingread()
0100c                 | ' 
0100c                 | ' repeat
0100c                 | LR__0030
0100c                 | '   r:=serialread()
0100c     2C 07 B0 FD | 	call	#_serialread
01010     E6 78 02 F6 | 	mov	local34, result1
01014     FF FF 7F FF 
01018     FF 79 0E F2 | 	cmp	local34, ##-1 wz
0101c     EC FF 9F AD |  if_e	jmp	#LR__0030
01020                 | ' until r<>-1
01020                 | ' return r
01020     3C CD 01 F6 | 	mov	result1, local34
01024     E6 48 02 F6 | 	mov	local10, result1
01028     01 00 00 FF 
0102c     30 BC 05 F1 | 	add	objptr, ##560
01030     DE 48 42 FC | 	wrbyte	local10, objptr
01034     01 00 00 FF 
01038     30 BC 85 F1 | 	sub	objptr, ##560
0103c                 | '     rr:=serialblockingread()
0103c                 | ' 
0103c                 | ' repeat
0103c                 | LR__0031
0103c                 | '   r:=serialread()
0103c     FC 06 B0 FD | 	call	#_serialread
01040     E6 78 02 F6 | 	mov	local34, result1
01044     FF FF 7F FF 
01048     FF 79 0E F2 | 	cmp	local34, ##-1 wz
0104c     EC FF 9F AD |  if_e	jmp	#LR__0031
01050                 | ' until r<>-1
01050                 | ' return r
01050     3C CD 01 F6 | 	mov	result1, local34
01054     01 00 00 FF 
01058     20 BC 05 F1 | 	add	objptr, ##544
0105c     DE CC 61 FC | 	wrlong	result1, objptr
01060                 | '     if rr==255
01060     E6 48 02 F6 | 	mov	local10, result1
01064     01 00 00 FF 
01068     20 BC 85 F1 | 	sub	objptr, ##544
0106c     FF 48 0E F2 | 	cmp	local10, #255 wz
01070     38 00 90 5D |  if_ne	jmp	#LR__0032
01074                 | '      v.write(string("  Mouse key pressed: "))
01074     1C 00 00 FF 
01078     F1 2E 06 F6 | 	mov	arg01, ##@LR__0242
0107c     01 00 00 FF 
01080     34 BC 05 F1 | 	add	objptr, ##564
01084     98 0D B0 FD | 	call	#_hng030rm_write
01088                 | '      v.writeln(v.inttostr(mousekey))
01088     09 BC 85 F1 | 	sub	objptr, #9
0108c     DE 2E C2 FA | 	rdbyte	arg01, objptr
01090     09 BC 05 F1 | 	add	objptr, #9
01094     70 10 B0 FD | 	call	#_hng030rm_inttostr
01098     E6 64 02 F6 | 	mov	local24, result1
0109c     32 2F 02 F6 | 	mov	arg01, local24
010a0     30 0F B0 FD | 	call	#_hng030rm_writeln
010a4     01 00 00 FF 
010a8     34 BC 85 F1 | 	sub	objptr, ##564
010ac                 | LR__0032
010ac                 | LR__0033
010ac                 | ' 
010ac                 | '   if rr==$85   'mouseclick
010ac     01 00 00 FF 
010b0     20 BC 05 F1 | 	add	objptr, ##544
010b4     DE 48 02 FB | 	rdlong	local10, objptr
010b8     01 00 00 FF 
010bc     20 BC 85 F1 | 	sub	objptr, ##544
010c0     85 48 0E F2 | 	cmp	local10, #133 wz
010c4     B4 00 90 5D |  if_ne	jmp	#LR__0038
010c8                 | '     dummy:=serialblockingread()
010c8                 | ' 
010c8                 | ' repeat
010c8                 | LR__0034
010c8                 | '   r:=serialread()
010c8     70 06 B0 FD | 	call	#_serialread
010cc     E6 78 02 F6 | 	mov	local34, result1
010d0     FF FF 7F FF 
010d4     FF 79 0E F2 | 	cmp	local34, ##-1 wz
010d8     EC FF 9F AD |  if_e	jmp	#LR__0034
010dc                 | ' until r<>-1
010dc                 | ' return r
010dc     3C CD 01 F6 | 	mov	result1, local34
010e0     E6 48 02 F6 | 	mov	local10, result1
010e4     01 00 00 FF 
010e8     30 BC 05 F1 | 	add	objptr, ##560
010ec     DE 48 42 FC | 	wrbyte	local10, objptr
010f0     01 00 00 FF 
010f4     30 BC 85 F1 | 	sub	objptr, ##560
010f8                 | '     dummy:=serialblockingread()
010f8                 | ' 
010f8                 | ' repeat
010f8                 | LR__0035
010f8                 | '   r:=serialread()
010f8     40 06 B0 FD | 	call	#_serialread
010fc     E6 78 02 F6 | 	mov	local34, result1
01100     FF FF 7F FF 
01104     FF 79 0E F2 | 	cmp	local34, ##-1 wz
01108     EC FF 9F AD |  if_e	jmp	#LR__0035
0110c                 | ' until r<>-1
0110c                 | ' return r
0110c     3C CD 01 F6 | 	mov	result1, local34
01110     E6 48 02 F6 | 	mov	local10, result1
01114     01 00 00 FF 
01118     30 BC 05 F1 | 	add	objptr, ##560
0111c     DE 48 42 FC | 	wrbyte	local10, objptr
01120     01 00 00 FF 
01124     30 BC 85 F1 | 	sub	objptr, ##560
01128                 | '     rr:=serialblockingread()
01128                 | ' 
01128                 | ' repeat
01128                 | LR__0036
01128                 | '   r:=serialread()
01128     10 06 B0 FD | 	call	#_serialread
0112c     E6 78 02 F6 | 	mov	local34, result1
01130     FF FF 7F FF 
01134     FF 79 0E F2 | 	cmp	local34, ##-1 wz
01138     EC FF 9F AD |  if_e	jmp	#LR__0036
0113c                 | ' until r<>-1
0113c                 | ' return r
0113c     3C CD 01 F6 | 	mov	result1, local34
01140     01 00 00 FF 
01144     20 BC 05 F1 | 	add	objptr, ##544
01148     DE CC 61 FC | 	wrlong	result1, objptr
0114c                 | '     if rr==255
0114c     E6 48 02 F6 | 	mov	local10, result1
01150     01 00 00 FF 
01154     20 BC 85 F1 | 	sub	objptr, ##544
01158     FF 48 0E F2 | 	cmp	local10, #255 wz
0115c     1C 00 90 5D |  if_ne	jmp	#LR__0037
01160                 | '      v.writeln(string("  Mouse clicked"))
01160     1C 00 00 FF 
01164     07 2F 06 F6 | 	mov	arg01, ##@LR__0243
01168     01 00 00 FF 
0116c     34 BC 05 F1 | 	add	objptr, ##564
01170     60 0E B0 FD | 	call	#_hng030rm_writeln
01174     01 00 00 FF 
01178     34 BC 85 F1 | 	sub	objptr, ##564
0117c                 | LR__0037
0117c                 | LR__0038
0117c                 | ' 
0117c                 | '   if rr==$86   'mouseclick
0117c     01 00 00 FF 
01180     20 BC 05 F1 | 	add	objptr, ##544
01184     DE 48 02 FB | 	rdlong	local10, objptr
01188     01 00 00 FF 
0118c     20 BC 85 F1 | 	sub	objptr, ##544
01190     86 48 0E F2 | 	cmp	local10, #134 wz
01194     B4 00 90 5D |  if_ne	jmp	#LR__0043
01198                 | '     dummy:=serialblockingread()
01198                 | ' 
01198                 | ' repeat
01198                 | LR__0039
01198                 | '   r:=serialread()
01198     A0 05 B0 FD | 	call	#_serialread
0119c     E6 78 02 F6 | 	mov	local34, result1
011a0     FF FF 7F FF 
011a4     FF 79 0E F2 | 	cmp	local34, ##-1 wz
011a8     EC FF 9F AD |  if_e	jmp	#LR__0039
011ac                 | ' until r<>-1
011ac                 | ' return r
011ac     3C CD 01 F6 | 	mov	result1, local34
011b0     E6 48 02 F6 | 	mov	local10, result1
011b4     01 00 00 FF 
011b8     30 BC 05 F1 | 	add	objptr, ##560
011bc     DE 48 42 FC | 	wrbyte	local10, objptr
011c0     01 00 00 FF 
011c4     30 BC 85 F1 | 	sub	objptr, ##560
011c8                 | '     dummy:=serialblockingread()
011c8                 | ' 
011c8                 | ' repeat
011c8                 | LR__0040
011c8                 | '   r:=serialread()
011c8     70 05 B0 FD | 	call	#_serialread
011cc     E6 78 02 F6 | 	mov	local34, result1
011d0     FF FF 7F FF 
011d4     FF 79 0E F2 | 	cmp	local34, ##-1 wz
011d8     EC FF 9F AD |  if_e	jmp	#LR__0040
011dc                 | ' until r<>-1
011dc                 | ' return r
011dc     3C CD 01 F6 | 	mov	result1, local34
011e0     E6 48 02 F6 | 	mov	local10, result1
011e4     01 00 00 FF 
011e8     30 BC 05 F1 | 	add	objptr, ##560
011ec     DE 48 42 FC | 	wrbyte	local10, objptr
011f0     01 00 00 FF 
011f4     30 BC 85 F1 | 	sub	objptr, ##560
011f8                 | '     rr:=serialblockingread()
011f8                 | ' 
011f8                 | ' repeat
011f8                 | LR__0041
011f8                 | '   r:=serialread()
011f8     40 05 B0 FD | 	call	#_serialread
011fc     E6 78 02 F6 | 	mov	local34, result1
01200     FF FF 7F FF 
01204     FF 79 0E F2 | 	cmp	local34, ##-1 wz
01208     EC FF 9F AD |  if_e	jmp	#LR__0041
0120c                 | ' until r<>-1
0120c                 | ' return r
0120c     3C CD 01 F6 | 	mov	result1, local34
01210     01 00 00 FF 
01214     20 BC 05 F1 | 	add	objptr, ##544
01218     DE CC 61 FC | 	wrlong	result1, objptr
0121c                 | '     if rr==255
0121c     E6 48 02 F6 | 	mov	local10, result1
01220     01 00 00 FF 
01224     20 BC 85 F1 | 	sub	objptr, ##544
01228     FF 48 0E F2 | 	cmp	local10, #255 wz
0122c     1C 00 90 5D |  if_ne	jmp	#LR__0042
01230                 | '      v.writeln(string("  Mouse double clicked"))
01230     1C 00 00 FF 
01234     17 2F 06 F6 | 	mov	arg01, ##@LR__0244
01238     01 00 00 FF 
0123c     34 BC 05 F1 | 	add	objptr, ##564
01240     90 0D B0 FD | 	call	#_hng030rm_writeln
01244     01 00 00 FF 
01248     34 BC 85 F1 | 	sub	objptr, ##564
0124c                 | LR__0042
0124c                 | LR__0043
0124c                 | ' 
0124c                 | '   if rr==$87   'key released
0124c     01 00 00 FF 
01250     20 BC 05 F1 | 	add	objptr, ##544
01254     DE 48 02 FB | 	rdlong	local10, objptr
01258     01 00 00 FF 
0125c     20 BC 85 F1 | 	sub	objptr, ##544
01260     87 48 0E F2 | 	cmp	local10, #135 wz
01264     DC 00 90 5D |  if_ne	jmp	#LR__0048
01268                 | '     scancode:=serialblockingread()
01268                 | ' 
01268                 | ' repeat
01268                 | LR__0044
01268                 | '   r:=serialread()
01268     D0 04 B0 FD | 	call	#_serialread
0126c     E6 78 02 F6 | 	mov	local34, result1
01270     FF FF 7F FF 
01274     FF 79 0E F2 | 	cmp	local34, ##-1 wz
01278     EC FF 9F AD |  if_e	jmp	#LR__0044
0127c                 | ' until r<>-1
0127c                 | ' return r
0127c     3C CD 01 F6 | 	mov	result1, local34
01280     E6 48 02 F6 | 	mov	local10, result1
01284     01 00 00 FF 
01288     29 BC 05 F1 | 	add	objptr, ##553
0128c     DE 48 42 FC | 	wrbyte	local10, objptr
01290     01 00 00 FF 
01294     29 BC 85 F1 | 	sub	objptr, ##553
01298                 | '     dummy:=serialblockingread()
01298                 | ' 
01298                 | ' repeat
01298                 | LR__0045
01298                 | '   r:=serialread()
01298     A0 04 B0 FD | 	call	#_serialread
0129c     E6 78 02 F6 | 	mov	local34, result1
012a0     FF FF 7F FF 
012a4     FF 79 0E F2 | 	cmp	local34, ##-1 wz
012a8     EC FF 9F AD |  if_e	jmp	#LR__0045
012ac                 | ' until r<>-1
012ac                 | ' return r
012ac     3C CD 01 F6 | 	mov	result1, local34
012b0     E6 48 02 F6 | 	mov	local10, result1
012b4     01 00 00 FF 
012b8     30 BC 05 F1 | 	add	objptr, ##560
012bc     DE 48 42 FC | 	wrbyte	local10, objptr
012c0     01 00 00 FF 
012c4     30 BC 85 F1 | 	sub	objptr, ##560
012c8                 | '     rr:=serialblockingread()
012c8                 | ' 
012c8                 | ' repeat
012c8                 | LR__0046
012c8                 | '   r:=serialread()
012c8     70 04 B0 FD | 	call	#_serialread
012cc     E6 78 02 F6 | 	mov	local34, result1
012d0     FF FF 7F FF 
012d4     FF 79 0E F2 | 	cmp	local34, ##-1 wz
012d8     EC FF 9F AD |  if_e	jmp	#LR__0046
012dc                 | ' until r<>-1
012dc                 | ' return r
012dc     3C CD 01 F6 | 	mov	result1, local34
012e0     01 00 00 FF 
012e4     20 BC 05 F1 | 	add	objptr, ##544
012e8     DE CC 61 FC | 	wrlong	result1, objptr
012ec                 | '     if rr==255
012ec     E6 48 02 F6 | 	mov	local10, result1
012f0     01 00 00 FF 
012f4     20 BC 85 F1 | 	sub	objptr, ##544
012f8     FF 48 0E F2 | 	cmp	local10, #255 wz
012fc     44 00 90 5D |  if_ne	jmp	#LR__0047
01300                 | '      v.write(string("  Key scancode "))
01300     1C 00 00 FF 
01304     2E 2F 06 F6 | 	mov	arg01, ##@LR__0245
01308     01 00 00 FF 
0130c     34 BC 05 F1 | 	add	objptr, ##564
01310     0C 0B B0 FD | 	call	#_hng030rm_write
01314                 | '      v.write(v.inttostr(scancode))
01314     0B BC 85 F1 | 	sub	objptr, #11
01318     DE 2E C2 FA | 	rdbyte	arg01, objptr
0131c     0B BC 05 F1 | 	add	objptr, #11
01320     E4 0D B0 FD | 	call	#_hng030rm_inttostr
01324     E6 64 02 F6 | 	mov	local24, result1
01328     32 2F 02 F6 | 	mov	arg01, local24
0132c     F0 0A B0 FD | 	call	#_hng030rm_write
01330                 | '      v.writeln(string(" released"))
01330     1C 00 00 FF 
01334     3E 2F 06 F6 | 	mov	arg01, ##@LR__0246
01338     98 0C B0 FD | 	call	#_hng030rm_writeln
0133c     01 00 00 FF 
01340     34 BC 85 F1 | 	sub	objptr, ##564
01344                 | LR__0047
01344                 | LR__0048
01344                 | ' 
01344                 | '   if rr==$88   'key pressed
01344     01 00 00 FF 
01348     20 BC 05 F1 | 	add	objptr, ##544
0134c     DE 48 02 FB | 	rdlong	local10, objptr
01350     01 00 00 FF 
01354     20 BC 85 F1 | 	sub	objptr, ##544
01358     88 48 0E F2 | 	cmp	local10, #136 wz
0135c     00 01 90 5D |  if_ne	jmp	#LR__0053
01360                 | '     scancode:=serialblockingread()
01360                 | ' 
01360                 | ' repeat
01360                 | LR__0049
01360                 | '   r:=serialread()
01360     D8 03 B0 FD | 	call	#_serialread
01364     E6 78 02 F6 | 	mov	local34, result1
01368     FF FF 7F FF 
0136c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
01370     EC FF 9F AD |  if_e	jmp	#LR__0049
01374                 | ' until r<>-1
01374                 | ' return r
01374     3C CD 01 F6 | 	mov	result1, local34
01378     E6 48 02 F6 | 	mov	local10, result1
0137c     01 00 00 FF 
01380     29 BC 05 F1 | 	add	objptr, ##553
01384     DE 48 42 FC | 	wrbyte	local10, objptr
01388     01 00 00 FF 
0138c     29 BC 85 F1 | 	sub	objptr, ##553
01390                 | '     charcode:=serialblockingread()
01390                 | ' 
01390                 | ' repeat
01390                 | LR__0050
01390                 | '   r:=serialread()
01390     A8 03 B0 FD | 	call	#_serialread
01394     E6 78 02 F6 | 	mov	local34, result1
01398     FF FF 7F FF 
0139c     FF 79 0E F2 | 	cmp	local34, ##-1 wz
013a0     EC FF 9F AD |  if_e	jmp	#LR__0050
013a4                 | ' until r<>-1
013a4                 | ' return r
013a4     3C CD 01 F6 | 	mov	result1, local34
013a8     E6 48 02 F6 | 	mov	local10, result1
013ac     01 00 00 FF 
013b0     28 BC 05 F1 | 	add	objptr, ##552
013b4     DE 48 42 FC | 	wrbyte	local10, objptr
013b8     01 00 00 FF 
013bc     28 BC 85 F1 | 	sub	objptr, ##552
013c0                 | '     rr:=serialblockingread()
013c0                 | ' 
013c0                 | ' repeat
013c0                 | LR__0051
013c0                 | '   r:=serialread()
013c0     78 03 B0 FD | 	call	#_serialread
013c4     E6 78 02 F6 | 	mov	local34, result1
013c8     FF FF 7F FF 
013cc     FF 79 0E F2 | 	cmp	local34, ##-1 wz
013d0     EC FF 9F AD |  if_e	jmp	#LR__0051
013d4                 | ' until r<>-1
013d4                 | ' return r
013d4     3C CD 01 F6 | 	mov	result1, local34
013d8     01 00 00 FF 
013dc     20 BC 05 F1 | 	add	objptr, ##544
013e0     DE CC 61 FC | 	wrlong	result1, objptr
013e4                 | '     if rr==255
013e4     E6 48 02 F6 | 	mov	local10, result1
013e8     01 00 00 FF 
013ec     20 BC 85 F1 | 	sub	objptr, ##544
013f0     FF 48 0E F2 | 	cmp	local10, #255 wz
013f4     68 00 90 5D |  if_ne	jmp	#LR__0052
013f8                 | '      v.write(string("  Key scancode "))
013f8     1C 00 00 FF 
013fc     48 2F 06 F6 | 	mov	arg01, ##@LR__0247
01400     01 00 00 FF 
01404     34 BC 05 F1 | 	add	objptr, ##564
01408     14 0A B0 FD | 	call	#_hng030rm_write
0140c                 | '      v.write(v.inttostr(scancode))
0140c     0B BC 85 F1 | 	sub	objptr, #11
01410     DE 2E C2 FA | 	rdbyte	arg01, objptr
01414     0B BC 05 F1 | 	add	objptr, #11
01418     EC 0C B0 FD | 	call	#_hng030rm_inttostr
0141c     E6 2E 02 F6 | 	mov	arg01, result1
01420     FC 09 B0 FD | 	call	#_hng030rm_write
01424                 | '      v.write(string(", charcode "))
01424     1C 00 00 FF 
01428     58 2F 06 F6 | 	mov	arg01, ##@LR__0248
0142c     F0 09 B0 FD | 	call	#_hng030rm_write
01430                 | '      v.write(v.inttostr(charcode))
01430     0C BC 85 F1 | 	sub	objptr, #12
01434     DE 2E C2 FA | 	rdbyte	arg01, objptr
01438     0C BC 05 F1 | 	add	objptr, #12
0143c     C8 0C B0 FD | 	call	#_hng030rm_inttostr
01440     E6 64 02 F6 | 	mov	local24, result1
01444     32 2F 02 F6 | 	mov	arg01, local24
01448     D4 09 B0 FD | 	call	#_hng030rm_write
0144c                 | '      v.writeln(string(" pressed"))
0144c     1C 00 00 FF 
01450     64 2F 06 F6 | 	mov	arg01, ##@LR__0249
01454     7C 0B B0 FD | 	call	#_hng030rm_writeln
01458     01 00 00 FF 
0145c     34 BC 85 F1 | 	sub	objptr, ##564
01460                 | LR__0052
01460                 | LR__0053
01460                 | ' 
01460                 | '   if rr==$89   'modifier pressed
01460     01 00 00 FF 
01464     20 BC 05 F1 | 	add	objptr, ##544
01468     DE 48 02 FB | 	rdlong	local10, objptr
0146c     01 00 00 FF 
01470     20 BC 85 F1 | 	sub	objptr, ##544
01474     89 48 0E F2 | 	cmp	local10, #137 wz
01478     94 F6 9F 5D |  if_ne	jmp	#LR__0004
0147c                 | '     scancode:=serialblockingread()
0147c                 | ' 
0147c                 | ' repeat
0147c                 | LR__0054
0147c                 | '   r:=serialread()
0147c     BC 02 B0 FD | 	call	#_serialread
01480     E6 78 02 F6 | 	mov	local34, result1
01484     FF FF 7F FF 
01488     FF 79 0E F2 | 	cmp	local34, ##-1 wz
0148c     EC FF 9F AD |  if_e	jmp	#LR__0054
01490                 | ' until r<>-1
01490                 | ' return r
01490     3C CD 01 F6 | 	mov	result1, local34
01494     E6 48 02 F6 | 	mov	local10, result1
01498     01 00 00 FF 
0149c     29 BC 05 F1 | 	add	objptr, ##553
014a0     DE 48 42 FC | 	wrbyte	local10, objptr
014a4     01 00 00 FF 
014a8     29 BC 85 F1 | 	sub	objptr, ##553
014ac                 | '     scancode+=serialblockingread()<<7
014ac                 | ' 
014ac                 | ' repeat
014ac                 | LR__0055
014ac                 | '   r:=serialread()
014ac     8C 02 B0 FD | 	call	#_serialread
014b0     E6 78 02 F6 | 	mov	local34, result1
014b4     FF FF 7F FF 
014b8     FF 79 0E F2 | 	cmp	local34, ##-1 wz
014bc     EC FF 9F AD |  if_e	jmp	#LR__0055
014c0                 | ' until r<>-1
014c0                 | ' return r
014c0     3C CD 01 F6 | 	mov	result1, local34
014c4     E6 7E 02 F6 | 	mov	local37, result1
014c8     07 7E 66 F0 | 	shl	local37, #7
014cc     01 00 00 FF 
014d0     29 BC 05 F1 | 	add	objptr, ##553
014d4     DE 4C C2 FA | 	rdbyte	local12, objptr
014d8     26 65 02 F6 | 	mov	local24, local12
014dc     3F 65 02 F1 | 	add	local24, local37
014e0     DE 64 42 FC | 	wrbyte	local24, objptr
014e4     01 00 00 FF 
014e8     29 BC 85 F1 | 	sub	objptr, ##553
014ec                 | '     rr:=serialblockingread()
014ec                 | ' 
014ec                 | ' repeat
014ec                 | LR__0056
014ec                 | '   r:=serialread()
014ec     4C 02 B0 FD | 	call	#_serialread
014f0     E6 78 02 F6 | 	mov	local34, result1
014f4     FF FF 7F FF 
014f8     FF 79 0E F2 | 	cmp	local34, ##-1 wz
014fc     EC FF 9F AD |  if_e	jmp	#LR__0056
01500                 | ' until r<>-1
01500                 | ' return r
01500     3C CD 01 F6 | 	mov	result1, local34
01504     01 00 00 FF 
01508     20 BC 05 F1 | 	add	objptr, ##544
0150c     DE CC 61 FC | 	wrlong	result1, objptr
01510                 | '     if rr==255
01510     E6 48 02 F6 | 	mov	local10, result1
01514     01 00 00 FF 
01518     20 BC 85 F1 | 	sub	objptr, ##544
0151c     FF 48 0E F2 | 	cmp	local10, #255 wz
01520     EC F5 9F 5D |  if_ne	jmp	#LR__0004
01524                 | '       if scancode>0
01524     01 00 00 FF 
01528     29 BC 05 F1 | 	add	objptr, ##553
0152c     DE 48 C2 FA | 	rdbyte	local10, objptr
01530     01 00 00 FF 
01534     29 BC 85 F1 | 	sub	objptr, ##553
01538     00 48 5E F2 | 	cmps	local10, #0 wcz
0153c     F4 00 90 ED |  if_be	jmp	#LR__0058
01540                 | '         v.write(string("  Key modifier "))
01540     1C 00 00 FF 
01544     6D 2F 06 F6 | 	mov	arg01, ##@LR__0250
01548     01 00 00 FF 
0154c     34 BC 05 F1 | 	add	objptr, ##564
01550     CC 08 B0 FD | 	call	#_hng030rm_write
01554                 | '         v.write(v.inttostr(scancode))
01554     0B BC 85 F1 | 	sub	objptr, #11
01558     DE 2E C2 FA | 	rdbyte	arg01, objptr
0155c     0B BC 05 F1 | 	add	objptr, #11
01560     A4 0B B0 FD | 	call	#_hng030rm_inttostr
01564     E6 64 02 F6 | 	mov	local24, result1
01568     32 2F 02 F6 | 	mov	arg01, local24
0156c     B0 08 B0 FD | 	call	#_hng030rm_write
01570                 | '         v.writeln(string(" pressed"))
01570     1C 00 00 FF 
01574     7D 2F 06 F6 | 	mov	arg01, ##@LR__0251
01578     58 0A B0 FD | 	call	#_hng030rm_writeln
0157c                 | '         if scancode==1
0157c     0B BC 85 F1 | 	sub	objptr, #11
01580     DE 48 C2 FA | 	rdbyte	local10, objptr
01584     01 00 00 FF 
01588     29 BC 85 F1 | 	sub	objptr, ##553
0158c     01 48 0E F2 | 	cmp	local10, #1 wz
01590     40 00 90 5D |  if_ne	jmp	#LR__0057
01594                 | '           v.setmode (0)
01594     00 2E 06 F6 | 	mov	arg01, #0
01598     01 00 00 FF 
0159c     34 BC 05 F1 | 	add	objptr, ##564
015a0     74 0C B0 FD | 	call	#_hng030rm_setmode
015a4     01 00 00 FF 
015a8     34 BC 85 F1 | 	sub	objptr, ##564
015ac                 | '           serial_start(rxpin, txpin, baudrate)
015ac     A6 0E 00 FF 
015b0     00 64 06 F6 | 	mov	local24, ##1920000
015b4     20 2E 06 F6 | 	mov	arg01, #32
015b8     21 30 06 F6 | 	mov	arg02, #33
015bc     A6 0E 00 FF 
015c0     00 32 06 F6 | 	mov	arg03, ##1920000
015c4     D8 01 B0 FD | 	call	#_serial_start
015c8                 | '           midi_start(29,30)
015c8     1D 2E 06 F6 | 	mov	arg01, #29
015cc     1E 30 06 F6 | 	mov	arg02, #30
015d0     54 02 B0 FD | 	call	#_midi_start
015d4                 | LR__0057
015d4                 | '         if scancode==8
015d4     01 00 00 FF 
015d8     29 BC 05 F1 | 	add	objptr, ##553
015dc     DE 48 C2 FA | 	rdbyte	local10, objptr
015e0     01 00 00 FF 
015e4     29 BC 85 F1 | 	sub	objptr, ##553
015e8     08 48 0E F2 | 	cmp	local10, #8 wz
015ec     20 F5 9F 5D |  if_ne	jmp	#LR__0004
015f0                 | '           v.setmode(64)  
015f0     40 2E 06 F6 | 	mov	arg01, #64
015f4     01 00 00 FF 
015f8     34 BC 05 F1 | 	add	objptr, ##564
015fc     18 0C B0 FD | 	call	#_hng030rm_setmode
01600     01 00 00 FF 
01604     34 BC 85 F1 | 	sub	objptr, ##564
01608                 | '           serial_start(rxpin, txpin, baudrate)
01608     A6 0E 00 FF 
0160c     00 64 06 F6 | 	mov	local24, ##1920000
01610     20 2E 06 F6 | 	mov	arg01, #32
01614     21 30 06 F6 | 	mov	arg02, #33
01618     A6 0E 00 FF 
0161c     00 32 06 F6 | 	mov	arg03, ##1920000
01620     7C 01 B0 FD | 	call	#_serial_start
01624                 | '           midi_start(29,30)
01624     1D 2E 06 F6 | 	mov	arg01, #29
01628     1E 30 06 F6 | 	mov	arg02, #30
0162c     F8 01 B0 FD | 	call	#_midi_start
01630                 | '       else
01630     DC F4 9F FD | 	jmp	#LR__0004
01634                 | LR__0058
01634                 | '         v.writeln(string("  Modifiers released"))
01634     1C 00 00 FF 
01638     86 2F 06 F6 | 	mov	arg01, ##@LR__0252
0163c     01 00 00 FF 
01640     34 BC 05 F1 | 	add	objptr, ##564
01644     8C 09 B0 FD | 	call	#_hng030rm_writeln
01648     01 00 00 FF 
0164c     34 BC 85 F1 | 	sub	objptr, ##564
01650     BC F4 9F FD | 	jmp	#LR__0004
01654     AF F0 03 F6 | 	mov	ptra, fp
01658     BF 00 A0 FD | 	call	#popregs_
0165c                 | _start_ret
0165c     2D 00 64 FD | 	ret
01660                 | 
01660                 | ' 
01660                 | ' 
01660                 | ' pub serialcog()|q
01660                 | _serialcog
01660     08 5A 05 F6 | 	mov	COUNT_, #8
01664     B0 00 A0 FD | 	call	#pushregs_
01668                 | ' 
01668                 | ' serialfront:=0
01668     00 36 06 F6 | 	mov	local01, #0
0166c     1C BD 05 F1 | 	add	objptr, #284
01670     DE 00 68 FC | 	wrlong	#0, objptr
01674                 | ' serialtail:=0
01674     04 BC 85 F1 | 	sub	objptr, #4
01678     DE 00 68 FC | 	wrlong	#0, objptr
0167c     18 BD 85 F1 | 	sub	objptr, #280
01680                 | ' 
01680                 | ' repeat
01680                 | LR__0059
01680                 | '   if serialfront<>((serialtail-1) //32)
01680     18 BD 05 F1 | 	add	objptr, #280
01684     DE 36 02 FB | 	rdlong	local01, objptr
01688     01 36 86 F1 | 	sub	local01, #1
0168c     1B 39 52 F6 | 	abs	local02, local01 wc
01690     1F 38 06 F5 | 	and	local02, #31
01694     1C 39 62 C6 |  if_b	neg	local02, local02
01698     04 BC 05 F1 | 	add	objptr, #4
0169c     DE 3A 02 FB | 	rdlong	local03, objptr
016a0     1C BD 85 F1 | 	sub	objptr, #284
016a4     1C 3B 0A F2 | 	cmp	local03, local02 wz
016a8     D4 FF 9F AD |  if_e	jmp	#LR__0059
016ac                 | '     q:=rxcheck()
016ac                 | ' 
016ac                 | ' '' Check for serial input
016ac                 | ' '' -- returns -1 if nothing available
016ac                 | ' 
016ac                 | '   rxbyte := -1
016ac     01 3C 66 F6 | 	neg	local04, #1
016b0                 | '   check := pinr(rxp)
016b0     08 BC 05 F1 | 	add	objptr, #8
016b4     DE 2E 02 FB | 	rdlong	arg01, objptr
016b8     08 BC 85 F1 | 	sub	objptr, #8
016bc     18 18 B0 FD | 	call	#__system___pinread
016c0     E6 3E 0A F6 | 	mov	local05, result1 wz
016c4                 | '   if (check)
016c4     18 00 90 AD |  if_e	jmp	#LR__0060
016c8                 | '     rxbyte := rdpin(rxp) >> 24
016c8     08 BC 05 F1 | 	add	objptr, #8
016cc     DE 2E 02 FB | 	rdlong	arg01, objptr
016d0     08 BC 85 F1 | 	sub	objptr, #8
016d4     00 3C 06 F6 | 	mov	local04, #0
016d8     17 3D 8A FA | 	rdpin	local04, arg01
016dc     18 3C 46 F0 | 	shr	local04, #24
016e0                 | LR__0060
016e0     1E CD 01 F6 | 	mov	result1, local04
016e4     E6 40 02 F6 | 	mov	local06, result1
016e8                 | '     if q>=0
016e8     00 40 5E F2 | 	cmps	local06, #0 wcz
016ec     90 FF 9F CD |  if_b	jmp	#LR__0059
016f0     1C BD 05 F1 | 	add	objptr, #284
016f4     DE 42 02 FB | 	rdlong	local07, objptr
016f8     02 42 66 F0 | 	shl	local07, #2
016fc     04 BD 85 F1 | 	sub	objptr, #260
01700     DE 42 02 F1 | 	add	local07, objptr
01704                 | '      serialbuf[serialfront]:=q
01704     21 41 62 FC | 	wrlong	local06, local07
01708                 | '      serialfront+=1
01708     04 BD 05 F1 | 	add	objptr, #260
0170c     DE 44 02 FB | 	rdlong	local08, objptr
01710     01 44 06 F1 | 	add	local08, #1
01714     DE 44 62 FC | 	wrlong	local08, objptr
01718                 | '      serialfront:=serialfront // 32
01718     22 37 52 F6 | 	abs	local01, local08 wc
0171c     1F 36 06 F5 | 	and	local01, #31
01720     1B 37 62 C6 |  if_b	neg	local01, local01
01724     DE 36 62 FC | 	wrlong	local01, objptr
01728     1C BD 85 F1 | 	sub	objptr, #284
0172c     50 FF 9F FD | 	jmp	#LR__0059
01730     AF F0 03 F6 | 	mov	ptra, fp
01734     BF 00 A0 FD | 	call	#popregs_
01738                 | _serialcog_ret
01738     2D 00 64 FD | 	ret
0173c                 | 
0173c                 | ' 
0173c                 | ' pub serialread():r
0173c                 | _serialread
0173c                 | ' 
0173c                 | ' if serialfront<>serialtail
0173c     1C BD 05 F1 | 	add	objptr, #284
01740     DE D0 01 FB | 	rdlong	_var01, objptr
01744     04 BC 85 F1 | 	sub	objptr, #4
01748     DE D2 01 FB | 	rdlong	_var02, objptr
0174c     18 BD 85 F1 | 	sub	objptr, #280
01750     E9 D0 09 F2 | 	cmp	_var01, _var02 wz
01754     3C 00 90 AD |  if_e	jmp	#LR__0061
01758     18 BD 05 F1 | 	add	objptr, #280
0175c     DE D4 01 FB | 	rdlong	_var03, objptr
01760     02 D4 65 F0 | 	shl	_var03, #2
01764     00 BD 85 F1 | 	sub	objptr, #256
01768     DE D4 01 F1 | 	add	_var03, objptr
0176c                 | '   r:=serialbuf[serialtail]
0176c     EA D6 01 FB | 	rdlong	_var04, _var03
01770     00 BD 05 F1 | 	add	objptr, #256
01774     DE D8 01 FB | 	rdlong	_var05, objptr
01778     01 D8 05 F1 | 	add	_var05, #1
0177c     EC D0 51 F6 | 	abs	_var01, _var05 wc
01780     1F D0 05 F5 | 	and	_var01, #31
01784     E8 D0 61 C6 |  if_b	neg	_var01, _var01
01788                 | '   serialtail:=(serialtail+1)//32
01788     DE D0 61 FC | 	wrlong	_var01, objptr
0178c     18 BD 85 F1 | 	sub	objptr, #280
01790                 | ' else
01790     04 00 90 FD | 	jmp	#LR__0062
01794                 | LR__0061
01794                 | '   r:=-1
01794     01 D6 65 F6 | 	neg	_var04, #1
01798                 | LR__0062
01798                 | ' return r
01798     EB CC 01 F6 | 	mov	result1, _var04
0179c                 | _serialread_ret
0179c     2D 00 64 FD | 	ret
017a0                 | 
017a0                 | ' 
017a0                 | ' 
017a0                 | ' 
017a0                 | ' ''---------------------- Serial functions from jm_serial.spin2
017a0                 | ' 
017a0                 | ' pub serial_start(rxpin2, txpin2, baud) | bitmode
017a0                 | _serial_start
017a0     05 5A 05 F6 | 	mov	COUNT_, #5
017a4     B0 00 A0 FD | 	call	#pushregs_
017a8     17 37 02 F6 | 	mov	local01, arg01
017ac     18 39 02 F6 | 	mov	local02, arg02
017b0                 | ' 
017b0                 | ' '' Start simple serial coms on rxpin and txpin at baud
017b0                 | ' 
017b0                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
017b0                 | ' 
017b0                 | '   rxp:=rxpin2
017b0     08 BC 05 F1 | 	add	objptr, #8
017b4     DE 36 62 FC | 	wrlong	local01, objptr
017b8                 | '   txp:=txpin2
017b8     04 BC 05 F1 | 	add	objptr, #4
017bc     DE 38 62 FC | 	wrlong	local02, objptr
017c0     0C BC 85 F1 | 	sub	objptr, #12
017c4                 | ' 
017c4                 | '   bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
017c4     14 2E 06 FB | 	rdlong	arg01, #20
017c8     10 30 C6 F9 | 	decod	arg02, #16
017cc     18 2F 02 FD | 	qmul	arg01, arg02
017d0     19 3A 62 FD | 	getqy	local03
017d4     18 3C 62 FD | 	getqx	local04
017d8     28 3A 62 FD | 	setq	local03
017dc     19 3D 12 FD | 	qdiv	local04, arg03
017e0     18 CC 61 FD | 	getqx	result1
017e4     E6 3E 02 F6 | 	mov	local05, result1
017e8     FE FF 7F FF 
017ec     00 3E 06 F5 | 	and	local05, ##-1024
017f0                 | '   bitmode |= 7                                                  ' set bits (8)
017f0     07 3E 46 F5 | 	or	local05, #7
017f4                 | ' 
017f4                 | '   org
017f4     28 E8 9F FE | 	loc	pa,	#(@LR__0064-@LR__0063)
017f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
017fc                 | LR__0063
017fc 000             | 	org	0
017fc 000 50 36 62 FD | 	fltl	local01
01800 001 1B 7D 08 FC | 	wrpin	#62, local01
01804 002 1B 3F 12 FC | 	wxpin	local05, local01
01808 003 58 36 62 FD | 	drvl	local01
0180c 004 50 38 62 FD | 	fltl	local02
01810 005 1C F9 08 FC | 	wrpin	#124, local02
01814 006 1C 3F 12 FC | 	wxpin	local05, local02
01818 007 58 38 62 FD | 	drvl	local02
0181c 008             | LR__0064
0181c                 | 	orgh
0181c     AF F0 03 F6 | 	mov	ptra, fp
01820     BF 00 A0 FD | 	call	#popregs_
01824                 | _serial_start_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' pub midi_start(mrxpin2, mtxpin2) | bitmode
01828                 | _midi_start
01828     05 5A 05 F6 | 	mov	COUNT_, #5
0182c     B0 00 A0 FD | 	call	#pushregs_
01830     17 37 02 F6 | 	mov	local01, arg01
01834     18 39 02 F6 | 	mov	local02, arg02
01838                 | ' 
01838                 | ' '' Start simple serial coms on rxpin and txpin at baud
01838                 | ' 
01838                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
01838                 | ' 
01838                 | '   mrxp:=mrxpin2
01838     10 BC 05 F1 | 	add	objptr, #16
0183c     DE 36 62 FC | 	wrlong	local01, objptr
01840                 | '   mtxp:=mtxpin2
01840     04 BC 05 F1 | 	add	objptr, #4
01844     DE 38 62 FC | 	wrlong	local02, objptr
01848     14 BC 85 F1 | 	sub	objptr, #20
0184c                 | ' 
0184c                 | '   bitmode := muldiv64(clkfreq, $1_0000, 31250) & $FFFFFC00       ' set bit timing
0184c     14 2E 06 FB | 	rdlong	arg01, #20
01850     10 30 C6 F9 | 	decod	arg02, #16
01854     18 2F 02 FD | 	qmul	arg01, arg02
01858     19 3A 62 FD | 	getqy	local03
0185c     18 3C 62 FD | 	getqx	local04
01860     28 3A 62 FD | 	setq	local03
01864     3D 00 00 FF 
01868     12 3C 16 FD | 	qdiv	local04, ##31250
0186c     18 CC 61 FD | 	getqx	result1
01870     E6 3E 02 F6 | 	mov	local05, result1
01874     FE FF 7F FF 
01878     00 3E 06 F5 | 	and	local05, ##-1024
0187c                 | '   bitmode |= 7                                                  ' set bits (8)
0187c     07 3E 46 F5 | 	or	local05, #7
01880                 | ' 
01880                 | '   org
01880     9C E7 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
01884     93 00 A0 FD | 	call	#FCACHE_LOAD_
01888                 | LR__0065
01888 000             | 	org	0
01888 000 50 36 62 FD | 	fltl	local01
0188c 001 1B 7D 08 FC | 	wrpin	#62, local01
01890 002 1B 3F 12 FC | 	wxpin	local05, local01
01894 003 58 36 62 FD | 	drvl	local01
01898 004 50 38 62 FD | 	fltl	local02
0189c 005 1C F9 08 FC | 	wrpin	#124, local02
018a0 006 1C 3F 12 FC | 	wxpin	local05, local02
018a4 007 58 38 62 FD | 	drvl	local02
018a8 008             | LR__0066
018a8                 | 	orgh
018a8     AF F0 03 F6 | 	mov	ptra, fp
018ac     BF 00 A0 FD | 	call	#popregs_
018b0                 | _midi_start_ret
018b0     2D 00 64 FD | 	ret
018b4                 | 
018b4                 | '   until (rxbyte >= 0)
018b4                 | ' 
018b4                 | ' 
018b4                 | ' pub tx(b)
018b4                 | _tx
018b4     01 5A 05 F6 | 	mov	COUNT_, #1
018b8     B0 00 A0 FD | 	call	#pushregs_
018bc                 | ' 
018bc                 | ' '' Emit byte
018bc                 | ' 
018bc                 | '   wypin(txp, b)
018bc     0C BC 05 F1 | 	add	objptr, #12
018c0     DE 36 02 FB | 	rdlong	local01, objptr
018c4     0C BC 85 F1 | 	sub	objptr, #12
018c8     17 31 02 F6 | 	mov	arg02, arg01
018cc     1B 31 22 FC | 	wypin	arg02, local01
018d0                 | '   txflush()
018d0                 | ' 
018d0                 | ' '' Wait until last byte has finished
018d0                 | ' 
018d0                 | '   repeat
018d0                 | LR__0067
018d0                 | '     check := pinr(txp)
018d0     0C BC 05 F1 | 	add	objptr, #12
018d4     DE 2E 02 FB | 	rdlong	arg01, objptr
018d8     0C BC 85 F1 | 	sub	objptr, #12
018dc     F8 15 B0 FD | 	call	#__system___pinread
018e0     00 CC 0D F2 | 	cmp	result1, #0 wz
018e4     E8 FF 9F AD |  if_e	jmp	#LR__0067
018e8     AF F0 03 F6 | 	mov	ptra, fp
018ec     BF 00 A0 FD | 	call	#popregs_
018f0                 | _tx_ret
018f0     2D 00 64 FD | 	ret
018f4                 | 
018f4                 | ' 
018f4                 | ' 
018f4                 | ' ''---------- putpixel - put a pixel on the screen
018f4                 | ' 
018f4                 | ' pub putpixel1(x,y,c) |byte b
018f4                 | _hng030rm_putpixel1
018f4                 | ' 
018f4                 | ' 
018f4                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
018f4     00 D0 05 F6 | 	mov	_var01, #0
018f8     00 2E 5E F2 | 	cmps	arg01, #0 wcz
018fc     01 D0 65 36 |  if_ae	neg	_var01, #1
01900     00 D2 05 F6 | 	mov	_var02, #0
01904     90 BC 05 F1 | 	add	objptr, #144
01908     DE D4 01 FB | 	rdlong	_var03, objptr
0190c     05 D4 65 F0 | 	shl	_var03, #5
01910     EA 2E 5A F2 | 	cmps	arg01, _var03 wcz
01914     01 D2 65 C6 |  if_b	neg	_var02, #1
01918     E9 D0 01 F5 | 	and	_var01, _var02
0191c     00 D6 05 F6 | 	mov	_var04, #0
01920     00 30 5E F2 | 	cmps	arg02, #0 wcz
01924     01 D6 65 36 |  if_ae	neg	_var04, #1
01928     EB D0 01 F5 | 	and	_var01, _var04
0192c     00 D8 05 F6 | 	mov	_var05, #0
01930     04 BC 05 F1 | 	add	objptr, #4
01934     DE DA 01 FB | 	rdlong	_var06, objptr
01938     94 BC 85 F1 | 	sub	objptr, #148
0193c     ED 30 5A F2 | 	cmps	arg02, _var06 wcz
01940     01 D8 65 C6 |  if_b	neg	_var05, #1
01944     EC D0 C9 F7 | 	test	_var01, _var05 wz
01948     8C 00 90 AD |  if_e	jmp	#LR__0070
0194c     90 BC 05 F1 | 	add	objptr, #144
01950     DE DC 01 FB | 	rdlong	_var07, objptr
01954     90 BC 85 F1 | 	sub	objptr, #144
01958     02 DC 65 F0 | 	shl	_var07, #2
0195c     18 DD 01 FD | 	qmul	_var07, arg02
01960     18 DE 61 FD | 	getqx	_var08
01964     DE E0 01 FB | 	rdlong	_var09, objptr
01968     EF E0 01 F1 | 	add	_var09, _var08
0196c     17 E3 01 F6 | 	mov	_var10, arg01
01970     03 E2 45 F0 | 	shr	_var10, #3
01974     F1 E0 01 F1 | 	add	_var09, _var10
01978                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01978     F0 E4 C1 FA | 	rdbyte	_var11, _var09
0197c                 | '     if (c==0)
0197c     00 32 0E F2 | 	cmp	arg03, #0 wz
01980     18 00 90 5D |  if_ne	jmp	#LR__0068
01984     17 D1 51 F6 | 	abs	_var01, arg01 wc
01988     07 D0 05 F5 | 	and	_var01, #7
0198c     E8 D0 61 C6 |  if_b	neg	_var01, _var01
01990     E8 E6 C1 F9 | 	decod	_var12, _var01
01994                 | '       b:=b & !(1<<(x//8))
01994     F3 E4 21 F5 | 	andn	_var11, _var12
01998                 | '     else
01998     14 00 90 FD | 	jmp	#LR__0069
0199c                 | LR__0068
0199c     17 D1 51 F6 | 	abs	_var01, arg01 wc
019a0     07 D0 05 F5 | 	and	_var01, #7
019a4     E8 D0 61 C6 |  if_b	neg	_var01, _var01
019a8     E8 E8 C1 F9 | 	decod	_var13, _var01
019ac                 | '       b:=b |(1<<(x//8))
019ac     F4 E4 41 F5 | 	or	_var11, _var13
019b0                 | LR__0069
019b0     90 BC 05 F1 | 	add	objptr, #144
019b4     DE EA 01 FB | 	rdlong	_var14, objptr
019b8     90 BC 85 F1 | 	sub	objptr, #144
019bc     02 EA 65 F0 | 	shl	_var14, #2
019c0     18 EB 01 FD | 	qmul	_var14, arg02
019c4     18 EC 61 FD | 	getqx	_var15
019c8     DE EE 01 FB | 	rdlong	_var16, objptr
019cc     F6 EE 01 F1 | 	add	_var16, _var15
019d0     F1 EE 01 F1 | 	add	_var16, _var10
019d4                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
019d4     F7 E4 41 FC | 	wrbyte	_var11, _var16
019d8                 | LR__0070
019d8                 | _hng030rm_putpixel1_ret
019d8     2D 00 64 FD | 	ret
019dc                 | 
019dc                 | ' 
019dc                 | ' 
019dc                 | ' pub putpixel2(x,y,c) |byte b
019dc                 | _hng030rm_putpixel2
019dc                 | ' 
019dc                 | ' 
019dc                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
019dc     00 D0 05 F6 | 	mov	_var01, #0
019e0     00 2E 5E F2 | 	cmps	arg01, #0 wcz
019e4     01 D0 65 36 |  if_ae	neg	_var01, #1
019e8     00 D2 05 F6 | 	mov	_var02, #0
019ec     90 BC 05 F1 | 	add	objptr, #144
019f0     DE D4 01 FB | 	rdlong	_var03, objptr
019f4     04 D4 65 F0 | 	shl	_var03, #4
019f8     EA 2E 5A F2 | 	cmps	arg01, _var03 wcz
019fc     01 D2 65 C6 |  if_b	neg	_var02, #1
01a00     E9 D0 01 F5 | 	and	_var01, _var02
01a04     00 D6 05 F6 | 	mov	_var04, #0
01a08     00 30 5E F2 | 	cmps	arg02, #0 wcz
01a0c     01 D6 65 36 |  if_ae	neg	_var04, #1
01a10     EB D0 01 F5 | 	and	_var01, _var04
01a14     00 D8 05 F6 | 	mov	_var05, #0
01a18     04 BC 05 F1 | 	add	objptr, #4
01a1c     DE DA 01 FB | 	rdlong	_var06, objptr
01a20     94 BC 85 F1 | 	sub	objptr, #148
01a24     ED 30 5A F2 | 	cmps	arg02, _var06 wcz
01a28     01 D8 65 C6 |  if_b	neg	_var05, #1
01a2c     EC D0 C9 F7 | 	test	_var01, _var05 wz
01a30     7C 00 90 AD |  if_e	jmp	#LR__0071
01a34     90 BC 05 F1 | 	add	objptr, #144
01a38     DE DC 01 FB | 	rdlong	_var07, objptr
01a3c     90 BC 85 F1 | 	sub	objptr, #144
01a40     02 DC 65 F0 | 	shl	_var07, #2
01a44     18 DD 01 FD | 	qmul	_var07, arg02
01a48     18 DE 61 FD | 	getqx	_var08
01a4c     DE E0 01 FB | 	rdlong	_var09, objptr
01a50     EF E0 01 F1 | 	add	_var09, _var08
01a54     17 E3 01 F6 | 	mov	_var10, arg01
01a58     02 E2 45 F0 | 	shr	_var10, #2
01a5c     F1 E0 01 F1 | 	add	_var09, _var10
01a60                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01a60     F0 E4 C1 FA | 	rdbyte	_var11, _var09
01a64     17 D1 51 F6 | 	abs	_var01, arg01 wc
01a68     03 D0 05 F5 | 	and	_var01, #3
01a6c     E8 D0 61 C6 |  if_b	neg	_var01, _var01
01a70     01 D0 65 F0 | 	shl	_var01, #1
01a74     03 E6 05 F6 | 	mov	_var12, #3
01a78     E8 E6 61 F0 | 	shl	_var12, _var01
01a7c                 | '     b:=b & !(%11<<((x//4)<<1))
01a7c     F3 E4 21 F5 | 	andn	_var11, _var12
01a80     E8 32 62 F0 | 	shl	arg03, _var01
01a84                 | '     b:=b |(c<<((x//4)<<1))
01a84     19 E5 41 F5 | 	or	_var11, arg03
01a88     90 BC 05 F1 | 	add	objptr, #144
01a8c     DE E8 01 FB | 	rdlong	_var13, objptr
01a90     90 BC 85 F1 | 	sub	objptr, #144
01a94     02 E8 65 F0 | 	shl	_var13, #2
01a98     18 E9 01 FD | 	qmul	_var13, arg02
01a9c     18 EA 61 FD | 	getqx	_var14
01aa0     DE EC 01 FB | 	rdlong	_var15, objptr
01aa4     F5 EC 01 F1 | 	add	_var15, _var14
01aa8     F1 EC 01 F1 | 	add	_var15, _var10
01aac                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01aac     F6 E4 41 FC | 	wrbyte	_var11, _var15
01ab0                 | LR__0071
01ab0                 | _hng030rm_putpixel2_ret
01ab0     2D 00 64 FD | 	ret
01ab4                 | 
01ab4                 | ' 
01ab4                 | ' 
01ab4                 | ' pub putpixel4(x,y,c) |byte b
01ab4                 | _hng030rm_putpixel4
01ab4                 | ' 
01ab4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01ab4     00 D0 05 F6 | 	mov	_var01, #0
01ab8     00 2E 5E F2 | 	cmps	arg01, #0 wcz
01abc     01 D0 65 36 |  if_ae	neg	_var01, #1
01ac0     00 D2 05 F6 | 	mov	_var02, #0
01ac4     90 BC 05 F1 | 	add	objptr, #144
01ac8     DE D4 01 FB | 	rdlong	_var03, objptr
01acc     04 D4 65 F0 | 	shl	_var03, #4
01ad0     EA 2E 5A F2 | 	cmps	arg01, _var03 wcz
01ad4     01 D2 65 C6 |  if_b	neg	_var02, #1
01ad8     E9 D0 01 F5 | 	and	_var01, _var02
01adc     00 D6 05 F6 | 	mov	_var04, #0
01ae0     00 30 5E F2 | 	cmps	arg02, #0 wcz
01ae4     01 D6 65 36 |  if_ae	neg	_var04, #1
01ae8     EB D0 01 F5 | 	and	_var01, _var04
01aec     00 D8 05 F6 | 	mov	_var05, #0
01af0     04 BC 05 F1 | 	add	objptr, #4
01af4     DE DA 01 FB | 	rdlong	_var06, objptr
01af8     94 BC 85 F1 | 	sub	objptr, #148
01afc     ED 30 5A F2 | 	cmps	arg02, _var06 wcz
01b00     01 D8 65 C6 |  if_b	neg	_var05, #1
01b04     EC D0 C9 F7 | 	test	_var01, _var05 wz
01b08     7C 00 90 AD |  if_e	jmp	#LR__0072
01b0c     90 BC 05 F1 | 	add	objptr, #144
01b10     DE DC 01 FB | 	rdlong	_var07, objptr
01b14     90 BC 85 F1 | 	sub	objptr, #144
01b18     02 DC 65 F0 | 	shl	_var07, #2
01b1c     18 DD 01 FD | 	qmul	_var07, arg02
01b20     18 DE 61 FD | 	getqx	_var08
01b24     DE E0 01 FB | 	rdlong	_var09, objptr
01b28     EF E0 01 F1 | 	add	_var09, _var08
01b2c     17 E3 01 F6 | 	mov	_var10, arg01
01b30     01 E2 45 F0 | 	shr	_var10, #1
01b34     F1 E0 01 F1 | 	add	_var09, _var10
01b38                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01b38     F0 E4 C1 FA | 	rdbyte	_var11, _var09
01b3c     17 D1 51 F6 | 	abs	_var01, arg01 wc
01b40     01 D0 05 F5 | 	and	_var01, #1
01b44     E8 D0 61 C6 |  if_b	neg	_var01, _var01
01b48     02 D0 65 F0 | 	shl	_var01, #2
01b4c     0F E6 05 F6 | 	mov	_var12, #15
01b50     E8 E6 61 F0 | 	shl	_var12, _var01
01b54                 | '     b:=b & !(%1111<<((x//2)<<2))
01b54     F3 E4 21 F5 | 	andn	_var11, _var12
01b58     E8 32 62 F0 | 	shl	arg03, _var01
01b5c                 | '     b:=b |(c<<((x//2)<<2))
01b5c     19 E5 41 F5 | 	or	_var11, arg03
01b60     90 BC 05 F1 | 	add	objptr, #144
01b64     DE E8 01 FB | 	rdlong	_var13, objptr
01b68     90 BC 85 F1 | 	sub	objptr, #144
01b6c     02 E8 65 F0 | 	shl	_var13, #2
01b70     18 E9 01 FD | 	qmul	_var13, arg02
01b74     18 EA 61 FD | 	getqx	_var14
01b78     DE EC 01 FB | 	rdlong	_var15, objptr
01b7c     F5 EC 01 F1 | 	add	_var15, _var14
01b80     F1 EC 01 F1 | 	add	_var15, _var10
01b84                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01b84     F6 E4 41 FC | 	wrbyte	_var11, _var15
01b88                 | LR__0072
01b88                 | _hng030rm_putpixel4_ret
01b88     2D 00 64 FD | 	ret
01b8c                 | 
01b8c                 | ' 
01b8c                 | ' 
01b8c                 | ' pub putpixel8(x,y,c)
01b8c                 | _hng030rm_putpixel8
01b8c                 | ' 
01b8c                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01b8c     00 D0 05 F6 | 	mov	_var01, #0
01b90     00 2E 5E F2 | 	cmps	arg01, #0 wcz
01b94     01 D0 65 36 |  if_ae	neg	_var01, #1
01b98     00 D2 05 F6 | 	mov	_var02, #0
01b9c     90 BC 05 F1 | 	add	objptr, #144
01ba0     DE D4 01 FB | 	rdlong	_var03, objptr
01ba4     02 D4 65 F0 | 	shl	_var03, #2
01ba8     EA 2E 5A F2 | 	cmps	arg01, _var03 wcz
01bac     01 D2 65 C6 |  if_b	neg	_var02, #1
01bb0     E9 D0 01 F5 | 	and	_var01, _var02
01bb4     00 D6 05 F6 | 	mov	_var04, #0
01bb8     00 30 5E F2 | 	cmps	arg02, #0 wcz
01bbc     01 D6 65 36 |  if_ae	neg	_var04, #1
01bc0     EB D0 01 F5 | 	and	_var01, _var04
01bc4     00 D8 05 F6 | 	mov	_var05, #0
01bc8     04 BC 05 F1 | 	add	objptr, #4
01bcc     DE DA 01 FB | 	rdlong	_var06, objptr
01bd0     94 BC 85 F1 | 	sub	objptr, #148
01bd4     ED 30 5A F2 | 	cmps	arg02, _var06 wcz
01bd8     01 D8 65 C6 |  if_b	neg	_var05, #1
01bdc     EC D0 C9 F7 | 	test	_var01, _var05 wz
01be0     28 00 90 AD |  if_e	jmp	#LR__0073
01be4     90 BC 05 F1 | 	add	objptr, #144
01be8     DE DC 01 FB | 	rdlong	_var07, objptr
01bec     90 BC 85 F1 | 	sub	objptr, #144
01bf0     02 DC 65 F0 | 	shl	_var07, #2
01bf4     18 DD 01 FD | 	qmul	_var07, arg02
01bf8     18 DE 61 FD | 	getqx	_var08
01bfc     DE E0 01 FB | 	rdlong	_var09, objptr
01c00     EF E0 01 F1 | 	add	_var09, _var08
01c04     17 E1 01 F1 | 	add	_var09, arg01
01c08                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01c08     F0 32 42 FC | 	wrbyte	arg03, _var09
01c0c                 | LR__0073
01c0c                 | _hng030rm_putpixel8_ret
01c0c     2D 00 64 FD | 	ret
01c10                 | 
01c10                 | ' 
01c10                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
01c10                 | ' 
01c10                 | ' pub setbordercolor(r,g,b) | color
01c10                 | _hng030rm_setbordercolor
01c10     18 2E 66 F0 | 	shl	arg01, #24
01c14     10 30 66 F0 | 	shl	arg02, #16
01c18     18 2F 02 F1 | 	add	arg01, arg02
01c1c     08 32 66 F0 | 	shl	arg03, #8
01c20     19 2F 02 F1 | 	add	arg01, arg03
01c24                 | ' 
01c24                 | ' color:=r<<24+g<<16+b<<8
01c24                 | ' bordercolor:=color
01c24     2C BC 05 F1 | 	add	objptr, #44
01c28     DE 2E 62 FC | 	wrlong	arg01, objptr
01c2c     2C BC 85 F1 | 	sub	objptr, #44
01c30                 | _hng030rm_setbordercolor_ret
01c30     2D 00 64 FD | 	ret
01c34                 | 
01c34                 | ' 
01c34                 | ' 
01c34                 | ' '*************************************************************************
01c34                 | ' '                                                                        *
01c34                 | ' '  Text functions                                                        *
01c34                 | ' '                                                                        *
01c34                 | ' '*************************************************************************
01c34                 | ' 
01c34                 | ' ''---------- Clear the screen, set its foreground/background color
01c34                 | ' 
01c34                 | ' pub cls(fc,bc)   :c
01c34                 | _hng030rm_cls
01c34     07 5A 05 F6 | 	mov	COUNT_, #7
01c38     B0 00 A0 FD | 	call	#pushregs_
01c3c     17 37 02 F6 | 	mov	local01, arg01
01c40     18 39 02 F6 | 	mov	local02, arg02
01c44                 | ' 
01c44                 | ' if (graphmode<512)
01c44     C4 BC 05 F1 | 	add	objptr, #196
01c48     DE 3A 02 FB | 	rdlong	local03, objptr
01c4c     C4 BC 85 F1 | 	sub	objptr, #196
01c50     01 00 00 FF 
01c54     00 3A 5E F2 | 	cmps	local03, ##512 wcz
01c58     34 00 90 3D |  if_ae	jmp	#LR__0074
01c5c     1B 3D 02 F6 | 	mov	local04, local01
01c60     18 3C 66 F0 | 	shl	local04, #24
01c64     1C 3F 02 F6 | 	mov	local05, local02
01c68     10 3E 66 F0 | 	shl	local05, #16
01c6c     1F 3D 02 F1 | 	add	local04, local05
01c70     20 3C 06 F1 | 	add	local04, #32
01c74                 | '   c:=fc<<24+bc<<16+$20
01c74                 | '   longfill(buf_ptr,c,buflen)
01c74     DE 2E 02 FB | 	rdlong	arg01, objptr
01c78     30 BC 05 F1 | 	add	objptr, #48
01c7c     DE 32 02 FB | 	rdlong	arg03, objptr
01c80     30 BC 85 F1 | 	sub	objptr, #48
01c84     1E 31 02 F6 | 	mov	arg02, local04
01c88     A8 00 A0 FD | 	call	#\builtin_longfill_
01c8c                 | ' else
01c8c     AC 00 90 FD | 	jmp	#LR__0080
01c90                 | LR__0074
01c90                 | '   if (graphmode & 48) ==48
01c90     C4 BC 05 F1 | 	add	objptr, #196
01c94     DE 3A 02 FB | 	rdlong	local03, objptr
01c98     C4 BC 85 F1 | 	sub	objptr, #196
01c9c     30 3A 06 F5 | 	and	local03, #48
01ca0     30 3A 0E F2 | 	cmp	local03, #48 wz
01ca4                 | '     c:=bc
01ca4     1C 3D 02 A6 |  if_e	mov	local04, local02
01ca8     74 00 90 AD |  if_e	jmp	#LR__0079
01cac                 | '   elseif (graphmode & 48) ==32
01cac     C4 BC 05 F1 | 	add	objptr, #196
01cb0     DE 3A 02 FB | 	rdlong	local03, objptr
01cb4     C4 BC 85 F1 | 	sub	objptr, #196
01cb8     30 3A 06 F5 | 	and	local03, #48
01cbc     20 3A 0E F2 | 	cmp	local03, #32 wz
01cc0     10 00 90 5D |  if_ne	jmp	#LR__0075
01cc4     1C 3D 02 F6 | 	mov	local04, local02
01cc8     04 3C 66 F0 | 	shl	local04, #4
01ccc     1C 3D 02 F1 | 	add	local04, local02
01cd0                 | '     c:=bc<<4+bc
01cd0     4C 00 90 FD | 	jmp	#LR__0078
01cd4                 | LR__0075
01cd4                 | '   elseif (graphmode & 48) ==16
01cd4     C4 BC 05 F1 | 	add	objptr, #196
01cd8     DE 3A 02 FB | 	rdlong	local03, objptr
01cdc     C4 BC 85 F1 | 	sub	objptr, #196
01ce0     30 3A 06 F5 | 	and	local03, #48
01ce4     10 3A 0E F2 | 	cmp	local03, #16 wz
01ce8     28 00 90 5D |  if_ne	jmp	#LR__0076
01cec     1C 3D 02 F6 | 	mov	local04, local02
01cf0     06 3C 66 F0 | 	shl	local04, #6
01cf4     1C 41 02 F6 | 	mov	local06, local02
01cf8     04 40 66 F0 | 	shl	local06, #4
01cfc     20 3D 02 F1 | 	add	local04, local06
01d00     1C 43 02 F6 | 	mov	local07, local02
01d04     02 42 66 F0 | 	shl	local07, #2
01d08     21 3D 02 F1 | 	add	local04, local07
01d0c     1C 3D 02 F1 | 	add	local04, local02
01d10                 | '     c:=bc<<6+bc<<4+bc<<2+bc
01d10                 | '   else
01d10     0C 00 90 FD | 	jmp	#LR__0077
01d14                 | LR__0076
01d14                 | '     if bc==1
01d14     01 38 0E F2 | 	cmp	local02, #1 wz
01d18                 | '       c:=255
01d18     FF 3C 06 A6 |  if_e	mov	local04, #255
01d1c                 | '     else
01d1c                 | '       c:=0
01d1c     00 3C 06 56 |  if_ne	mov	local04, #0
01d20                 | LR__0077
01d20                 | LR__0078
01d20                 | LR__0079
01d20     30 BC 05 F1 | 	add	objptr, #48
01d24     DE 32 02 FB | 	rdlong	arg03, objptr
01d28     30 BC 85 F1 | 	sub	objptr, #48
01d2c     02 32 66 F0 | 	shl	arg03, #2
01d30                 | '   bytefill(buf_ptr,c,buflen*4)
01d30     DE 2E 02 FB | 	rdlong	arg01, objptr
01d34     1E 31 02 F6 | 	mov	arg02, local04
01d38     A0 00 A0 FD | 	call	#\builtin_bytefill_
01d3c                 | LR__0080
01d3c                 | ' setwritecolors(fc,bc)
01d3c                 | ' 
01d3c                 | ' 
01d3c                 | ' write_color:=ff
01d3c     38 BC 05 F1 | 	add	objptr, #56
01d40     DE 36 62 FC | 	wrlong	local01, objptr
01d44                 | ' write_background:=bb
01d44     04 BC 05 F1 | 	add	objptr, #4
01d48     DE 38 62 FC | 	wrlong	local02, objptr
01d4c                 | ' cursor_x:=0
01d4c     08 BC 85 F1 | 	sub	objptr, #8
01d50     DE 00 48 FC | 	wrbyte	#0, objptr
01d54                 | ' cursor_y:=0
01d54     01 BC 05 F1 | 	add	objptr, #1
01d58     DE 00 48 FC | 	wrbyte	#0, objptr
01d5c     35 BC 85 F1 | 	sub	objptr, #53
01d60     1E CD 01 F6 | 	mov	result1, local04
01d64     AF F0 03 F6 | 	mov	ptra, fp
01d68     BF 00 A0 FD | 	call	#popregs_
01d6c                 | _hng030rm_cls_ret
01d6c     2D 00 64 FD | 	ret
01d70                 | 
01d70                 | ' 
01d70                 | ' ''--------- Output a string at position x,y without changing colors
01d70                 | ' 
01d70                 | ' pub outtextxy(x,y,text) | iii
01d70                 | _hng030rm_outtextxy
01d70     0B 5A 05 F6 | 	mov	COUNT_, #11
01d74     B0 00 A0 FD | 	call	#pushregs_
01d78     17 37 02 F6 | 	mov	local01, arg01
01d7c                 | ' 
01d7c                 | ' repeat iii from 0 to strsize(text)-1
01d7c     00 38 06 F6 | 	mov	local02, #0
01d80     19 2F 02 F6 | 	mov	arg01, arg03
01d84     00 3A 06 F6 | 	mov	local03, #0
01d88     84 E2 9F FE | 	loc	pa,	#(@LR__0082-@LR__0081)
01d8c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d90                 | LR__0081
01d90     17 3D CA FA | 	rdbyte	local04, arg01 wz
01d94     01 3A 06 51 |  if_ne	add	local03, #1
01d98     01 2E 06 51 |  if_ne	add	arg01, #1
01d9c     F0 FF 9F 5D |  if_ne	jmp	#LR__0081
01da0                 | LR__0082
01da0     1D CD 01 F6 | 	mov	result1, local03
01da4     E6 3E 02 F6 | 	mov	local05, result1
01da8     01 3E 86 F1 | 	sub	local05, #1
01dac     00 3E 5E F2 | 	cmps	local05, #0 wcz
01db0     01 40 06 16 |  if_a	mov	local06, #1
01db4     01 40 66 E6 |  if_be	neg	local06, #1
01db8     20 3F 02 F1 | 	add	local05, local06
01dbc     90 E2 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
01dc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
01dc4                 | LR__0083
01dc4     90 BC 05 F1 | 	add	objptr, #144
01dc8     DE 42 02 FB | 	rdlong	local07, objptr
01dcc     90 BC 85 F1 | 	sub	objptr, #144
01dd0     18 43 02 FD | 	qmul	local07, arg02
01dd4     18 44 62 FD | 	getqx	local08
01dd8     1B 45 02 F1 | 	add	local08, local01
01ddc     1C 45 02 F1 | 	add	local08, local02
01de0     02 44 66 F0 | 	shl	local08, #2
01de4     DE 46 02 FB | 	rdlong	local09, objptr
01de8     22 47 02 F1 | 	add	local09, local08
01dec     23 49 02 FB | 	rdlong	local10, local09
01df0     FF 48 26 F5 | 	andn	local10, #255
01df4     19 4B 02 F6 | 	mov	local11, arg03
01df8     1C 4B 02 F1 | 	add	local11, local02
01dfc     25 43 C2 FA | 	rdbyte	local07, local11
01e00     21 49 42 F5 | 	or	local10, local07
01e04                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
01e04     23 49 62 FC | 	wrlong	local10, local09
01e08     20 39 02 F1 | 	add	local02, local06
01e0c     1F 39 0A F2 | 	cmp	local02, local05 wz
01e10     B0 FF 9F 5D |  if_ne	jmp	#LR__0083
01e14                 | LR__0084
01e14     AF F0 03 F6 | 	mov	ptra, fp
01e18     BF 00 A0 FD | 	call	#popregs_
01e1c                 | _hng030rm_outtextxy_ret
01e1c     2D 00 64 FD | 	ret
01e20                 | 
01e20                 | ' 
01e20                 | ' ''--------- Output a string at the cursor position, move the cursor
01e20                 | ' 
01e20                 | ' pub write(text) | iii,c,ncx,ncy
01e20                 | _hng030rm_write
01e20     11 5A 05 F6 | 	mov	COUNT_, #17
01e24     B0 00 A0 FD | 	call	#pushregs_
01e28     17 37 02 F6 | 	mov	local01, arg01
01e2c     38 BC 05 F1 | 	add	objptr, #56
01e30     DE 38 02 FB | 	rdlong	local02, objptr
01e34     18 38 66 F0 | 	shl	local02, #24
01e38     04 BC 05 F1 | 	add	objptr, #4
01e3c     DE 3A 02 FB | 	rdlong	local03, objptr
01e40     10 3A 66 F0 | 	shl	local03, #16
01e44     1D 39 02 F1 | 	add	local02, local03
01e48                 | ' 
01e48                 | ' c:=write_color<<24+write_background<<16
01e48                 | ' 'debug(uhex_long(write_color))
01e48                 | ' ncy:=cursor_y
01e48     07 BC 85 F1 | 	sub	objptr, #7
01e4c     DE 3C C2 FA | 	rdbyte	local04, objptr
01e50                 | ' ncx:=cursor_x+strsize(text)
01e50     01 BC 85 F1 | 	sub	objptr, #1
01e54     DE 3E C2 FA | 	rdbyte	local05, objptr
01e58     34 BC 85 F1 | 	sub	objptr, #52
01e5c     1B 2F 02 F6 | 	mov	arg01, local01
01e60     00 40 06 F6 | 	mov	local06, #0
01e64     A8 E1 9F FE | 	loc	pa,	#(@LR__0086-@LR__0085)
01e68     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e6c                 | LR__0085
01e6c     17 43 CA FA | 	rdbyte	local07, arg01 wz
01e70     01 40 06 51 |  if_ne	add	local06, #1
01e74     01 2E 06 51 |  if_ne	add	arg01, #1
01e78     F0 FF 9F 5D |  if_ne	jmp	#LR__0085
01e7c                 | LR__0086
01e7c     20 CD 01 F6 | 	mov	result1, local06
01e80     20 3F 02 F1 | 	add	local05, local06
01e84     1F 45 02 F6 | 	mov	local08, local05
01e88     A4 E1 9F FE | 	loc	pa,	#(@LR__0088-@LR__0087)
01e8c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e90                 | ' repeat while ncx>cpl-1
01e90                 | LR__0087
01e90     90 BC 05 F1 | 	add	objptr, #144
01e94     DE 3E 02 FB | 	rdlong	local05, objptr
01e98     90 BC 85 F1 | 	sub	objptr, #144
01e9c     01 3E 86 F1 | 	sub	local05, #1
01ea0     1F 45 5A F2 | 	cmps	local08, local05 wcz
01ea4     18 00 90 ED |  if_be	jmp	#LR__0089
01ea8                 | '   ncx-=cpl
01ea8     90 BC 05 F1 | 	add	objptr, #144
01eac     DE 46 02 FB | 	rdlong	local09, objptr
01eb0     90 BC 85 F1 | 	sub	objptr, #144
01eb4     23 45 82 F1 | 	sub	local08, local09
01eb8                 | '   ncy+=1
01eb8     01 3C 06 F1 | 	add	local04, #1
01ebc     D0 FF 9F FD | 	jmp	#LR__0087
01ec0                 | LR__0088
01ec0                 | LR__0089
01ec0                 | ' repeat while ncy>lines-1
01ec0                 | LR__0090
01ec0     94 BC 05 F1 | 	add	objptr, #148
01ec4     DE 3E 02 FB | 	rdlong	local05, objptr
01ec8     94 BC 85 F1 | 	sub	objptr, #148
01ecc     01 3E 86 F1 | 	sub	local05, #1
01ed0     1F 3D 5A F2 | 	cmps	local04, local05 wcz
01ed4     20 00 90 ED |  if_be	jmp	#LR__0091
01ed8                 | '   ncy-=1
01ed8     01 3C 86 F1 | 	sub	local04, #1
01edc                 | '   scrollup()
01edc     60 01 B0 FD | 	call	#_hng030rm_scrollup
01ee0                 | '   cursor_y-=1
01ee0     35 BC 05 F1 | 	add	objptr, #53
01ee4     DE 3E C2 FA | 	rdbyte	local05, objptr
01ee8     01 3E 86 F1 | 	sub	local05, #1
01eec     DE 3E 42 FC | 	wrbyte	local05, objptr
01ef0     35 BC 85 F1 | 	sub	objptr, #53
01ef4     C8 FF 9F FD | 	jmp	#LR__0090
01ef8                 | LR__0091
01ef8                 | ' 
01ef8                 | ' repeat iii from 0 to strsize(text)-1
01ef8     00 48 06 F6 | 	mov	local10, #0
01efc     1B 2F 02 F6 | 	mov	arg01, local01
01f00     00 40 06 F6 | 	mov	local06, #0
01f04     08 E1 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
01f08     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f0c                 | LR__0092
01f0c     17 43 CA FA | 	rdbyte	local07, arg01 wz
01f10     01 40 06 51 |  if_ne	add	local06, #1
01f14     01 2E 06 51 |  if_ne	add	arg01, #1
01f18     F0 FF 9F 5D |  if_ne	jmp	#LR__0092
01f1c                 | LR__0093
01f1c     20 CD 01 F6 | 	mov	result1, local06
01f20     E6 4A 02 F6 | 	mov	local11, result1
01f24     01 4A 86 F1 | 	sub	local11, #1
01f28     00 4A 5E F2 | 	cmps	local11, #0 wcz
01f2c     01 4C 06 16 |  if_a	mov	local12, #1
01f30     01 4C 66 E6 |  if_be	neg	local12, #1
01f34     26 4B 02 F1 | 	add	local11, local12
01f38     1C E1 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
01f3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f40                 | LR__0094
01f40     90 BC 05 F1 | 	add	objptr, #144
01f44     DE 4E 02 FB | 	rdlong	local13, objptr
01f48     5B BC 85 F1 | 	sub	objptr, #91
01f4c     DE 50 C2 FA | 	rdbyte	local14, objptr
01f50     28 4F 02 FD | 	qmul	local13, local14
01f54     18 52 62 FD | 	getqx	local15
01f58     01 BC 85 F1 | 	sub	objptr, #1
01f5c     DE 4E C2 FA | 	rdbyte	local13, objptr
01f60     34 BC 85 F1 | 	sub	objptr, #52
01f64     27 53 02 F1 | 	add	local15, local13
01f68     24 53 02 F1 | 	add	local15, local10
01f6c     02 52 66 F0 | 	shl	local15, #2
01f70     DE 54 02 FB | 	rdlong	local16, objptr
01f74     29 55 02 F1 | 	add	local16, local15
01f78     2A 57 02 FB | 	rdlong	local17, local16
01f7c     7F 00 00 FF 
01f80     FF 57 06 F5 | 	and	local17, ##65535
01f84     1C 57 42 F5 | 	or	local17, local02
01f88                 | ' 
01f88                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
01f88     2A 57 62 FC | 	wrlong	local17, local16
01f8c     26 49 02 F1 | 	add	local10, local12
01f90     25 49 0A F2 | 	cmp	local10, local11 wz
01f94     A8 FF 9F 5D |  if_ne	jmp	#LR__0094
01f98                 | LR__0095
01f98                 | ' 
01f98                 | ' outtextxy(cursor_x,cursor_y,text)
01f98     34 BC 05 F1 | 	add	objptr, #52
01f9c     DE 2E C2 FA | 	rdbyte	arg01, objptr
01fa0     01 BC 05 F1 | 	add	objptr, #1
01fa4     DE 30 C2 FA | 	rdbyte	arg02, objptr
01fa8     35 BC 85 F1 | 	sub	objptr, #53
01fac     1B 33 02 F6 | 	mov	arg03, local01
01fb0     BC FD BF FD | 	call	#_hng030rm_outtextxy
01fb4                 | ' 
01fb4                 | ' cursor_x:=ncx
01fb4     34 BC 05 F1 | 	add	objptr, #52
01fb8     DE 44 42 FC | 	wrbyte	local08, objptr
01fbc                 | ' cursor_y:=ncy
01fbc     01 BC 05 F1 | 	add	objptr, #1
01fc0     DE 3C 42 FC | 	wrbyte	local04, objptr
01fc4     35 BC 85 F1 | 	sub	objptr, #53
01fc8     AF F0 03 F6 | 	mov	ptra, fp
01fcc     BF 00 A0 FD | 	call	#popregs_
01fd0                 | _hng030rm_write_ret
01fd0     2D 00 64 FD | 	ret
01fd4                 | 
01fd4                 | ' 
01fd4                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
01fd4                 | ' 
01fd4                 | ' pub writeln(text)
01fd4                 | _hng030rm_writeln
01fd4     03 5A 05 F6 | 	mov	COUNT_, #3
01fd8     B0 00 A0 FD | 	call	#pushregs_
01fdc                 | ' 
01fdc                 | ' write(text)
01fdc     40 FE BF FD | 	call	#_hng030rm_write
01fe0                 | ' cursor_x:=0
01fe0     34 BC 05 F1 | 	add	objptr, #52
01fe4     DE 00 48 FC | 	wrbyte	#0, objptr
01fe8                 | ' cursor_y+=1
01fe8     01 BC 05 F1 | 	add	objptr, #1
01fec     DE 36 C2 FA | 	rdbyte	local01, objptr
01ff0     01 36 06 F1 | 	add	local01, #1
01ff4     DE 36 42 FC | 	wrbyte	local01, objptr
01ff8                 | ' if (cursor_y>lines-1)
01ff8     5F BC 05 F1 | 	add	objptr, #95
01ffc     DE 36 02 FB | 	rdlong	local01, objptr
02000     01 36 86 F1 | 	sub	local01, #1
02004     5F BC 85 F1 | 	sub	objptr, #95
02008     DE 38 C2 FA | 	rdbyte	local02, objptr
0200c     35 BC 85 F1 | 	sub	objptr, #53
02010     1B 39 5A F2 | 	cmps	local02, local01 wcz
02014     1C 00 90 ED |  if_be	jmp	#LR__0096
02018                 | '   scrollup()
02018     24 00 B0 FD | 	call	#_hng030rm_scrollup
0201c     94 BC 05 F1 | 	add	objptr, #148
02020     DE 3A 02 FB | 	rdlong	local03, objptr
02024     01 3A 86 F1 | 	sub	local03, #1
02028                 | '   cursor_y:=lines-1
02028     5F BC 85 F1 | 	sub	objptr, #95
0202c     DE 3A 42 FC | 	wrbyte	local03, objptr
02030     35 BC 85 F1 | 	sub	objptr, #53
02034                 | LR__0096
02034     AF F0 03 F6 | 	mov	ptra, fp
02038     BF 00 A0 FD | 	call	#popregs_
0203c                 | _hng030rm_writeln_ret
0203c     2D 00 64 FD | 	ret
02040                 | 
02040                 | ' 
02040                 | ' ''-----------  Scroll the screen one line up
02040                 | ' 
02040                 | ' pub scrollup() | i
02040                 | _hng030rm_scrollup
02040     0A 5A 05 F6 | 	mov	COUNT_, #10
02044     B0 00 A0 FD | 	call	#pushregs_
02048     90 BC 05 F1 | 	add	objptr, #144
0204c     DE 36 02 FB | 	rdlong	local01, objptr
02050     90 BC 85 F1 | 	sub	objptr, #144
02054     02 36 66 F0 | 	shl	local01, #2
02058     DE 30 02 FB | 	rdlong	arg02, objptr
0205c     1B 31 02 F1 | 	add	arg02, local01
02060     30 BC 05 F1 | 	add	objptr, #48
02064     DE 32 02 FB | 	rdlong	arg03, objptr
02068     60 BC 05 F1 | 	add	objptr, #96
0206c     DE 38 02 FB | 	rdlong	local02, objptr
02070     90 BC 85 F1 | 	sub	objptr, #144
02074     1C 33 82 F1 | 	sub	arg03, local02
02078                 | ' 
02078                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02078     DE 2E 02 FB | 	rdlong	arg01, objptr
0207c     00 0D B0 FD | 	call	#__system__longmove
02080                 | ' repeat i from buflen-cpl to buflen-1
02080     30 BC 05 F1 | 	add	objptr, #48
02084     DE 3A 02 FB | 	rdlong	local03, objptr
02088     60 BC 05 F1 | 	add	objptr, #96
0208c     DE 38 02 FB | 	rdlong	local02, objptr
02090     1C 3B 82 F1 | 	sub	local03, local02
02094     60 BC 85 F1 | 	sub	objptr, #96
02098     DE 3C 02 FB | 	rdlong	local04, objptr
0209c     01 3C 86 F1 | 	sub	local04, #1
020a0     DE 3E 02 FB | 	rdlong	local05, objptr
020a4     60 BC 05 F1 | 	add	objptr, #96
020a8     DE 40 02 FB | 	rdlong	local06, objptr
020ac     90 BC 85 F1 | 	sub	objptr, #144
020b0     20 3F 82 F1 | 	sub	local05, local06
020b4     1F 3D 5A F2 | 	cmps	local04, local05 wcz
020b8     01 42 06 16 |  if_a	mov	local07, #1
020bc     01 42 66 E6 |  if_be	neg	local07, #1
020c0     21 3D 02 F1 | 	add	local04, local07
020c4     68 DF 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
020c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
020cc                 | LR__0097
020cc     1D 45 02 F6 | 	mov	local08, local03
020d0     02 44 66 F0 | 	shl	local08, #2
020d4     DE 46 02 FB | 	rdlong	local09, objptr
020d8     22 47 02 F1 | 	add	local09, local08
020dc     23 49 02 FB | 	rdlong	local10, local09
020e0     80 FF 7F FF 
020e4     00 48 06 F5 | 	and	local10, ##-65536
020e8     20 48 46 F5 | 	or	local10, #32
020ec                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
020ec     23 49 62 FC | 	wrlong	local10, local09
020f0     21 3B 02 F1 | 	add	local03, local07
020f4     1E 3B 0A F2 | 	cmp	local03, local04 wz
020f8     D0 FF 9F 5D |  if_ne	jmp	#LR__0097
020fc                 | LR__0098
020fc     AF F0 03 F6 | 	mov	ptra, fp
02100     BF 00 A0 FD | 	call	#popregs_
02104                 | _hng030rm_scrollup_ret
02104     2D 00 64 FD | 	ret
02108                 | 
02108                 | ' 
02108                 | ' 
02108                 | ' '*************************************************************************
02108                 | ' '                                                                        *
02108                 | ' '  Conversions                                                           *
02108                 | ' '                                                                        *
02108                 | ' '*************************************************************************
02108                 | ' 
02108                 | ' ''---------- Convert a integer to dec string, return a pointer
02108                 | ' 
02108                 | ' pub inttostr(i):result |q,pos,k,j
02108                 | _hng030rm_inttostr
02108     07 5A 05 F6 | 	mov	COUNT_, #7
0210c     B0 00 A0 FD | 	call	#pushregs_
02110     17 37 02 F6 | 	mov	local01, arg01
02114                 | ' 
02114                 | ' j:=i
02114     1B 39 0A F6 | 	mov	local02, local01 wz
02118                 | ' pos:=10
02118     0A 3A 06 F6 | 	mov	local03, #10
0211c                 | ' k:=0
0211c     00 3C 06 F6 | 	mov	local04, #0
02120                 | ' 
02120                 | ' if (j==0)
02120     18 00 90 5D |  if_ne	jmp	#LR__0099
02124                 | '   n_string[0]:=48
02124     44 BC 05 F1 | 	add	objptr, #68
02128     DE 60 48 FC | 	wrbyte	#48, objptr
0212c                 | '   n_string[1]:=0
0212c     01 BC 05 F1 | 	add	objptr, #1
02130     DE 00 48 FC | 	wrbyte	#0, objptr
02134     45 BC 85 F1 | 	sub	objptr, #69
02138                 | ' 
02138                 | ' else
02138     C4 00 90 FD | 	jmp	#LR__0106
0213c                 | LR__0099
0213c                 | '   if (j<0)
0213c     00 38 5E F2 | 	cmps	local02, #0 wcz
02140                 | '     j:=0-j
02140     1C 39 62 C6 |  if_b	neg	local02, local02
02144                 | '     k:=45
02144     2D 3C 06 C6 |  if_b	mov	local04, #45
02148                 | ' 
02148                 | '   n_string[11]:=0
02148     4F BC 05 F1 | 	add	objptr, #79
0214c     DE 00 48 FC | 	wrbyte	#0, objptr
02150     4F BC 85 F1 | 	sub	objptr, #79
02154     E8 DE 9F FE | 	loc	pa,	#(@LR__0101-@LR__0100)
02158     93 00 A0 FD | 	call	#FCACHE_LOAD_
0215c                 | '   repeat while (pos>-1)
0215c                 | LR__0100
0215c     FF FF 7F FF 
02160     FF 3B 5E F2 | 	cmps	local03, ##-1 wcz
02164     34 00 90 ED |  if_be	jmp	#LR__0102
02168     1C 81 02 F6 | 	mov	muldiva_, local02
0216c     0A 82 06 F6 | 	mov	muldivb_, #10
02170     D0 00 A0 FD | 	call	#divide_
02174     40 3F 02 F6 | 	mov	local05, muldiva_
02178                 | '     q:=j//10
02178                 | '     q:=48+q
02178     30 3E 06 F1 | 	add	local05, #48
0217c     1D 41 02 F6 | 	mov	local06, local03
02180     44 BC 05 F1 | 	add	objptr, #68
02184     DE 40 02 F1 | 	add	local06, objptr
02188                 | '     n_string[pos]:=q
02188     20 3F 42 FC | 	wrbyte	local05, local06
0218c                 | '     j:=j/10
0218c     41 39 02 F6 | 	mov	local02, muldivb_
02190                 | '     pos-=1
02190     01 3A 86 F1 | 	sub	local03, #1
02194     44 BC 85 F1 | 	sub	objptr, #68
02198     C0 FF 9F FD | 	jmp	#LR__0100
0219c                 | LR__0101
0219c                 | LR__0102
0219c                 | '   repeat while n_string[0]==48
0219c                 | LR__0103
0219c     44 BC 05 F1 | 	add	objptr, #68
021a0     DE 42 C2 FA | 	rdbyte	local07, objptr
021a4     44 BC 85 F1 | 	sub	objptr, #68
021a8     30 42 0E F2 | 	cmp	local07, #48 wz
021ac     20 00 90 5D |  if_ne	jmp	#LR__0104
021b0     44 BC 05 F1 | 	add	objptr, #68
021b4     DE 2E 02 F6 | 	mov	arg01, objptr
021b8     44 BC 85 F1 | 	sub	objptr, #68
021bc     17 31 02 F6 | 	mov	arg02, arg01
021c0     01 30 06 F1 | 	add	arg02, #1
021c4                 | '     bytemove(@n_string,@n_string+1,12)
021c4     0C 32 06 F6 | 	mov	arg03, #12
021c8     24 0B B0 FD | 	call	#__system____builtin_memmove
021cc     CC FF 9F FD | 	jmp	#LR__0103
021d0                 | LR__0104
021d0                 | ' 
021d0                 | '   if k==45
021d0     2D 3C 0E F2 | 	cmp	local04, #45 wz
021d4     28 00 90 5D |  if_ne	jmp	#LR__0105
021d8     44 BC 05 F1 | 	add	objptr, #68
021dc     DE 30 02 F6 | 	mov	arg02, objptr
021e0     44 BC 85 F1 | 	sub	objptr, #68
021e4     18 2F 02 F6 | 	mov	arg01, arg02
021e8     01 2E 06 F1 | 	add	arg01, #1
021ec                 | '      bytemove(@n_string+1,@n_string,12)
021ec     0C 32 06 F6 | 	mov	arg03, #12
021f0     FC 0A B0 FD | 	call	#__system____builtin_memmove
021f4                 | '      n_string[0]:=k
021f4     44 BC 05 F1 | 	add	objptr, #68
021f8     DE 3C 42 FC | 	wrbyte	local04, objptr
021fc     44 BC 85 F1 | 	sub	objptr, #68
02200                 | LR__0105
02200                 | LR__0106
02200     44 BC 05 F1 | 	add	objptr, #68
02204     DE CC 01 F6 | 	mov	result1, objptr
02208     44 BC 85 F1 | 	sub	objptr, #68
0220c                 | ' 
0220c                 | ' q:=@n_string
0220c                 | ' return q
0220c     AF F0 03 F6 | 	mov	ptra, fp
02210     BF 00 A0 FD | 	call	#popregs_
02214                 | _hng030rm_inttostr_ret
02214     2D 00 64 FD | 	ret
02218                 | 
02218                 | ' 
02218                 | ' 
02218                 | ' 
02218                 | ' '*************************************************************************
02218                 | ' '                                                                        *
02218                 | ' '  Mode setting and driver start                                                          *
02218                 | ' '                                                                        *
02218                 | ' '*************************************************************************
02218                 | ' 
02218                 | ' ''---------  Set the graphics mode
02218                 | ' 
02218                 | ' 
02218                 | ' 
02218                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02218                 | _hng030rm_setmode
02218     21 5A 05 F6 | 	mov	COUNT_, #33
0221c     B0 00 A0 FD | 	call	#pushregs_
02220     17 37 02 F6 | 	mov	local01, arg01
02224                 | ' 
02224                 | ' '' mode:tn_bb_cc_vv_hh
02224                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02224                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02224                 | ' 
02224                 | ' if mode==(512+192+48)
02224     01 00 00 FF 
02228     F0 36 0E F2 | 	cmp	local01, ##752 wz
0222c                 | '   return 'no RAM
0222c     30 06 90 AD |  if_e	jmp	#LR__0129
02230                 | ' 
02230                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02230     1B 39 02 F6 | 	mov	local02, local01
02234     06 38 46 F0 | 	shr	local02, #6
02238     07 38 06 F5 | 	and	local02, #7
0223c     08 38 26 F3 | 	fle	local02, #8
02240     1C 3B 02 F6 | 	mov	local03, local02
02244     30 3A 62 FD | 	jmprel	local03
02248                 | LR__0107
02248     20 00 90 FD | 	jmp	#LR__0108
0224c     58 00 90 FD | 	jmp	#LR__0109
02250     90 00 90 FD | 	jmp	#LR__0110
02254     C8 00 90 FD | 	jmp	#LR__0111
02258     00 01 90 FD | 	jmp	#LR__0112
0225c     38 01 90 FD | 	jmp	#LR__0113
02260     70 01 90 FD | 	jmp	#LR__0114
02264     A8 01 90 FD | 	jmp	#LR__0115
02268     E4 01 90 FD | 	jmp	#LR__0116
0226c                 | LR__0108
0226c                 | ' 
0226c                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
0226c     50 BC 05 F1 | 	add	objptr, #80
02270     DE 2E 02 F6 | 	mov	arg01, objptr
02274     50 BC 85 F1 | 	sub	objptr, #80
02278     0E 00 00 FF 
0227c     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7256
02280     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
02284     1E 3F 02 F6 | 	mov	local05, local04
02288     10 40 06 F6 | 	mov	local06, #16
0228c     1F 31 02 F6 | 	mov	arg02, local05
02290     10 32 06 F6 | 	mov	arg03, #16
02294     0E 00 00 FF 
02298     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7256
0229c     E0 0A B0 FD | 	call	#__system__longmove
022a0     E6 42 02 F6 | 	mov	local07, result1
022a4     A8 01 90 FD | 	jmp	#LR__0116
022a8                 | LR__0109
022a8                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
022a8     50 BC 05 F1 | 	add	objptr, #80
022ac     DE 2E 02 F6 | 	mov	arg01, objptr
022b0     50 BC 85 F1 | 	sub	objptr, #80
022b4     0E 00 00 FF 
022b8     98 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7320
022bc     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
022c0     1E 3F 02 F6 | 	mov	local05, local04
022c4     10 40 06 F6 | 	mov	local06, #16
022c8     1F 31 02 F6 | 	mov	arg02, local05
022cc     10 32 06 F6 | 	mov	arg03, #16
022d0     0E 00 00 FF 
022d4     98 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7320
022d8     A4 0A B0 FD | 	call	#__system__longmove
022dc     E6 42 02 F6 | 	mov	local07, result1
022e0     6C 01 90 FD | 	jmp	#LR__0116
022e4                 | LR__0110
022e4                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
022e4     50 BC 05 F1 | 	add	objptr, #80
022e8     DE 2E 02 F6 | 	mov	arg01, objptr
022ec     50 BC 85 F1 | 	sub	objptr, #80
022f0     0E 00 00 FF 
022f4     D8 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7384
022f8     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
022fc     1E 3F 02 F6 | 	mov	local05, local04
02300     10 40 06 F6 | 	mov	local06, #16
02304     1F 31 02 F6 | 	mov	arg02, local05
02308     10 32 06 F6 | 	mov	arg03, #16
0230c     0E 00 00 FF 
02310     D8 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7384
02314     68 0A B0 FD | 	call	#__system__longmove
02318     E6 42 02 F6 | 	mov	local07, result1
0231c     30 01 90 FD | 	jmp	#LR__0116
02320                 | LR__0111
02320                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02320     50 BC 05 F1 | 	add	objptr, #80
02324     DE 2E 02 F6 | 	mov	arg01, objptr
02328     50 BC 85 F1 | 	sub	objptr, #80
0232c     0E 00 00 FF 
02330     18 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7448
02334     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
02338     1E 3F 02 F6 | 	mov	local05, local04
0233c     10 40 06 F6 | 	mov	local06, #16
02340     1F 31 02 F6 | 	mov	arg02, local05
02344     10 32 06 F6 | 	mov	arg03, #16
02348     0E 00 00 FF 
0234c     18 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7448
02350     2C 0A B0 FD | 	call	#__system__longmove
02354     E6 42 02 F6 | 	mov	local07, result1
02358     F4 00 90 FD | 	jmp	#LR__0116
0235c                 | LR__0112
0235c                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
0235c     50 BC 05 F1 | 	add	objptr, #80
02360     DE 2E 02 F6 | 	mov	arg01, objptr
02364     50 BC 85 F1 | 	sub	objptr, #80
02368     0E 00 00 FF 
0236c     58 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7512
02370     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
02374     1E 3F 02 F6 | 	mov	local05, local04
02378     10 40 06 F6 | 	mov	local06, #16
0237c     1F 31 02 F6 | 	mov	arg02, local05
02380     10 32 06 F6 | 	mov	arg03, #16
02384     0E 00 00 FF 
02388     58 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7512
0238c     F0 09 B0 FD | 	call	#__system__longmove
02390     E6 42 02 F6 | 	mov	local07, result1
02394     B8 00 90 FD | 	jmp	#LR__0116
02398                 | LR__0113
02398                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02398     50 BC 05 F1 | 	add	objptr, #80
0239c     DE 2E 02 F6 | 	mov	arg01, objptr
023a0     50 BC 85 F1 | 	sub	objptr, #80
023a4     0E 00 00 FF 
023a8     98 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7576
023ac     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
023b0     1E 3F 02 F6 | 	mov	local05, local04
023b4     10 40 06 F6 | 	mov	local06, #16
023b8     1F 31 02 F6 | 	mov	arg02, local05
023bc     10 32 06 F6 | 	mov	arg03, #16
023c0     0E 00 00 FF 
023c4     98 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7576
023c8     B4 09 B0 FD | 	call	#__system__longmove
023cc     E6 42 02 F6 | 	mov	local07, result1
023d0     7C 00 90 FD | 	jmp	#LR__0116
023d4                 | LR__0114
023d4                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
023d4     50 BC 05 F1 | 	add	objptr, #80
023d8     DE 2E 02 F6 | 	mov	arg01, objptr
023dc     50 BC 85 F1 | 	sub	objptr, #80
023e0     0E 00 00 FF 
023e4     D8 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7640
023e8     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
023ec     1E 3F 02 F6 | 	mov	local05, local04
023f0     10 40 06 F6 | 	mov	local06, #16
023f4     1F 31 02 F6 | 	mov	arg02, local05
023f8     10 32 06 F6 | 	mov	arg03, #16
023fc     0E 00 00 FF 
02400     D8 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7640
02404     78 09 B0 FD | 	call	#__system__longmove
02408     E6 42 02 F6 | 	mov	local07, result1
0240c     40 00 90 FD | 	jmp	#LR__0116
02410                 | LR__0115
02410                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02410     50 BC 05 F1 | 	add	objptr, #80
02414     DE 44 02 F6 | 	mov	local08, objptr
02418     22 47 02 F6 | 	mov	local09, local08
0241c     0F 00 00 FF 
02420     18 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7704
02424     E0 3C 02 F6 | 	mov	local04, ptr__hng030rm_dat__
02428     1E 3F 02 F6 | 	mov	local05, local04
0242c     10 40 06 F6 | 	mov	local06, #16
02430     23 2F 02 F6 | 	mov	arg01, local09
02434     1F 31 02 F6 | 	mov	arg02, local05
02438     10 32 06 F6 | 	mov	arg03, #16
0243c     50 BC 85 F1 | 	sub	objptr, #80
02440     0F 00 00 FF 
02444     18 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7704
02448     34 09 B0 FD | 	call	#__system__longmove
0244c     E6 42 02 F6 | 	mov	local07, result1
02450                 | LR__0116
02450                 | ' 
02450                 | ' ' 4-bit graphics: do nothing with timings :)
02450                 | ' if mode<512
02450     01 00 00 FF 
02454     00 36 5E F2 | 	cmps	local01, ##512 wcz
02458     20 00 90 3D |  if_ae	jmp	#LR__0117
0245c     0C 00 00 FF 
02460     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6232
02464     E0 48 02 F6 | 	mov	local10, ptr__hng030rm_dat__
02468                 | '   palette_ptr:=@ataripalette
02468     18 BC 05 F1 | 	add	objptr, #24
0246c     DE 48 62 FC | 	wrlong	local10, objptr
02470     18 BC 85 F1 | 	sub	objptr, #24
02474     0C 00 00 FF 
02478     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6232
0247c                 | LR__0117
0247c                 | ' 
0247c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
0247c     1B 39 02 F6 | 	mov	local02, local01
02480     01 00 00 FF 
02484     30 38 06 F5 | 	and	local02, ##560
02488     01 00 00 FF 
0248c     30 38 0E F2 | 	cmp	local02, ##560 wz
02490     48 00 90 5D |  if_ne	jmp	#LR__0118
02494                 | '   timings[5]:=4
02494     64 BC 05 F1 | 	add	objptr, #100
02498     DE 08 68 FC | 	wrlong	#4, objptr
0249c     18 BC 05 F1 | 	add	objptr, #24
024a0     DE 4A 02 FB | 	rdlong	local11, objptr
024a4     01 4A 66 F0 | 	shl	local11, #1
024a8                 | '   timings[11]:=timings[11]<<1
024a8     DE 4A 62 FC | 	wrlong	local11, objptr
024ac                 | '   putpixel:=p8
024ac     6C BC 05 F1 | 	add	objptr, #108
024b0     DE 38 02 FB | 	rdlong	local02, objptr
024b4     10 BC 85 F1 | 	sub	objptr, #16
024b8     DE 38 62 FC | 	wrlong	local02, objptr
024bc     0C 00 00 FF 
024c0     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6232
024c4     E0 4C 02 F6 | 	mov	local12, ptr__hng030rm_dat__
024c8                 | '   palette_ptr:=@ataripalette
024c8     C0 BC 85 F1 | 	sub	objptr, #192
024cc     DE 4C 62 FC | 	wrlong	local12, objptr
024d0     18 BC 85 F1 | 	sub	objptr, #24
024d4     0C 00 00 FF 
024d8     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6232
024dc                 | LR__0118
024dc                 | ' 
024dc                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
024dc     1B 39 02 F6 | 	mov	local02, local01
024e0     01 00 00 FF 
024e4     30 38 06 F5 | 	and	local02, ##560
024e8     01 00 00 FF 
024ec     10 38 0E F2 | 	cmp	local02, ##528 wz
024f0     48 00 90 5D |  if_ne	jmp	#LR__0119
024f4                 | '   timings[5]:=16
024f4     64 BC 05 F1 | 	add	objptr, #100
024f8     DE 20 68 FC | 	wrlong	#16, objptr
024fc     18 BC 05 F1 | 	add	objptr, #24
02500     DE 4E 02 FB | 	rdlong	local13, objptr
02504     01 4E 46 F0 | 	shr	local13, #1
02508                 | '   timings[11]:=timings[11]>>1
02508     DE 4E 62 FC | 	wrlong	local13, objptr
0250c                 | '   putpixel:=p2
0250c     64 BC 05 F1 | 	add	objptr, #100
02510     DE 38 02 FB | 	rdlong	local02, objptr
02514     08 BC 85 F1 | 	sub	objptr, #8
02518     DE 38 62 FC | 	wrlong	local02, objptr
0251c     0C 00 00 FF 
02520     08 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6152
02524     E0 50 02 F6 | 	mov	local14, ptr__hng030rm_dat__
02528                 | '   palette_ptr:=@fourcolors
02528     C0 BC 85 F1 | 	sub	objptr, #192
0252c     DE 50 62 FC | 	wrlong	local14, objptr
02530     18 BC 85 F1 | 	sub	objptr, #24
02534     0C 00 00 FF 
02538     08 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6152
0253c                 | LR__0119
0253c                 | ' 
0253c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0253c     1B 39 02 F6 | 	mov	local02, local01
02540     01 00 00 FF 
02544     30 38 06 F5 | 	and	local02, ##560
02548     01 00 00 FF 
0254c     00 38 0E F2 | 	cmp	local02, ##512 wz
02550     48 00 90 5D |  if_ne	jmp	#LR__0120
02554                 | '   timings[5]:=32
02554     64 BC 05 F1 | 	add	objptr, #100
02558     DE 40 68 FC | 	wrlong	#32, objptr
0255c     18 BC 05 F1 | 	add	objptr, #24
02560     DE 52 02 FB | 	rdlong	local15, objptr
02564     02 52 46 F0 | 	shr	local15, #2
02568                 | '   timings[11]:=timings[11]>>2
02568     DE 52 62 FC | 	wrlong	local15, objptr
0256c                 | '   putpixel:=p1
0256c     60 BC 05 F1 | 	add	objptr, #96
02570     DE 38 02 FB | 	rdlong	local02, objptr
02574     04 BC 85 F1 | 	sub	objptr, #4
02578     DE 38 62 FC | 	wrlong	local02, objptr
0257c     0C 00 00 FF 
02580     00 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6144
02584     E0 54 02 F6 | 	mov	local16, ptr__hng030rm_dat__
02588                 | '   palette_ptr:=@twocolors
02588     C0 BC 85 F1 | 	sub	objptr, #192
0258c     DE 54 62 FC | 	wrlong	local16, objptr
02590     18 BC 85 F1 | 	sub	objptr, #24
02594     0C 00 00 FF 
02598     00 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6144
0259c                 | LR__0120
0259c                 | ' 
0259c                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
0259c     1B 39 02 F6 | 	mov	local02, local01
025a0     01 00 00 FF 
025a4     30 38 06 F5 | 	and	local02, ##560
025a8     01 00 00 FF 
025ac     20 38 0E F2 | 	cmp	local02, ##544 wz
025b0     30 00 90 5D |  if_ne	jmp	#LR__0121
025b4                 | '   putpixel:=p4
025b4     E4 BC 05 F1 | 	add	objptr, #228
025b8     DE 38 02 FB | 	rdlong	local02, objptr
025bc     0C BC 85 F1 | 	sub	objptr, #12
025c0     DE 38 62 FC | 	wrlong	local02, objptr
025c4     0C 00 00 FF 
025c8     18 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6168
025cc     E0 56 02 F6 | 	mov	local17, ptr__hng030rm_dat__
025d0                 | '   palette_ptr:=@vga16
025d0     C0 BC 85 F1 | 	sub	objptr, #192
025d4     DE 56 62 FC | 	wrlong	local17, objptr
025d8     18 BC 85 F1 | 	sub	objptr, #24
025dc     0C 00 00 FF 
025e0     18 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6168
025e4                 | LR__0121
025e4                 | ' 
025e4                 | ' repeat i from 0 to 4
025e4     00 58 06 F6 | 	mov	local18, #0
025e8     58 DA 9F FE | 	loc	pa,	#(@LR__0123-@LR__0122)
025ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
025f0                 | LR__0122
025f0     2C 5B 02 F6 | 	mov	local19, local18
025f4     02 5A 66 F0 | 	shl	local19, #2
025f8     50 BC 05 F1 | 	add	objptr, #80
025fc     DE 5A 02 F1 | 	add	local19, objptr
02600     2C BC 85 F1 | 	sub	objptr, #44
02604     DE 5C 02 FB | 	rdlong	local20, objptr
02608     24 BC 85 F1 | 	sub	objptr, #36
0260c     11 5C 66 F0 | 	shl	local20, #17
02610     2D 5F 02 FB | 	rdlong	local21, local19
02614     2E 5F 02 F1 | 	add	local21, local20
02618     2F 61 02 F6 | 	mov	local22, local21
0261c     80 40 38 FF 
02620     00 60 06 F1 | 	add	local22, ##1887502336
02624                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02624     2D 61 62 FC | 	wrlong	local22, local19
02628     01 58 06 F1 | 	add	local18, #1
0262c     05 58 5E F2 | 	cmps	local18, #5 wcz
02630     BC FF 9F CD |  if_b	jmp	#LR__0122
02634                 | LR__0123
02634     24 BC 05 F1 | 	add	objptr, #36
02638     DE 62 02 FB | 	rdlong	local23, objptr
0263c     11 62 66 F0 | 	shl	local23, #17
02640     40 BC 05 F1 | 	add	objptr, #64
02644     DE 64 02 FB | 	rdlong	local24, objptr
02648     31 65 02 F1 | 	add	local24, local23
0264c                 | ' timings[5]:=timings[5]+hdmibase<<17
0264c     DE 64 62 FC | 	wrlong	local24, objptr
02650                 | ' clkfreq:=timings[13]
02650     20 BC 05 F1 | 	add	objptr, #32
02654     DE 38 02 FB | 	rdlong	local02, objptr
02658     14 38 66 FC | 	wrlong	local02, #20
0265c                 | ' hubset(timings[14])
0265c     04 BC 05 F1 | 	add	objptr, #4
02660     DE 2E 02 FB | 	rdlong	arg01, objptr
02664     88 BC 85 F1 | 	sub	objptr, #136
02668     00 2E 62 FD | 	hubset	arg01
0266c                 | ' waitms(1)
0266c     01 2E 06 F6 | 	mov	arg01, #1
02670     84 08 B0 FD | 	call	#__system___waitms
02674     1B 67 02 F6 | 	mov	local25, local01
02678     03 66 06 F5 | 	and	local25, #3
0267c     33 69 C2 F9 | 	decod	local26, local25
02680                 | ' 
02680                 | ' 
02680                 | ' xzoom:=1<<(mode & 3)
02680     CC BC 05 F1 | 	add	objptr, #204
02684     DE 68 62 FC | 	wrlong	local26, objptr
02688                 | ' 
02688                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02688     34 45 02 F6 | 	mov	local08, local26
0268c     CC BC 85 F1 | 	sub	objptr, #204
02690     08 44 0E F2 | 	cmp	local08, #8 wz
02694     24 00 90 5D |  if_ne	jmp	#LR__0124
02698     1B 47 02 F6 | 	mov	local09, local01
0269c     04 46 46 F0 | 	shr	local09, #4
026a0     03 46 06 F5 | 	and	local09, #3
026a4     03 46 0E F2 | 	cmp	local09, #3 wz
026a8     10 00 90 AD |  if_e	jmp	#LR__0124
026ac                 | '   xzoom:=4
026ac     04 38 06 F6 | 	mov	local02, #4
026b0     CC BC 05 F1 | 	add	objptr, #204
026b4     DE 08 68 FC | 	wrlong	#4, objptr
026b8     CC BC 85 F1 | 	sub	objptr, #204
026bc                 | LR__0124
026bc     1B 6B 02 F6 | 	mov	local27, local01
026c0     02 6A 46 F0 | 	shr	local27, #2
026c4     03 6A 06 F5 | 	and	local27, #3
026c8     35 6D C2 F9 | 	decod	local28, local27
026cc                 | ' 
026cc                 | ' yzoom:=1<<((mode>>2) & 3)
026cc     D0 BC 05 F1 | 	add	objptr, #208
026d0     DE 6C 62 FC | 	wrlong	local28, objptr
026d4     04 BC 85 F1 | 	sub	objptr, #4
026d8     DE 44 02 FB | 	rdlong	local08, objptr
026dc     04 BC 05 F1 | 	add	objptr, #4
026e0     DE 3C 02 FB | 	rdlong	local04, objptr
026e4     1E 45 02 FD | 	qmul	local08, local04
026e8     18 6E 62 FD | 	getqx	local29
026ec                 | ' azoom:=xzoom*yzoom
026ec     04 BC 05 F1 | 	add	objptr, #4
026f0     DE 6E 62 FC | 	wrlong	local29, objptr
026f4                 | ' 
026f4                 | ' cpl:=timings[11]
026f4     58 BC 85 F1 | 	sub	objptr, #88
026f8     DE 38 02 FB | 	rdlong	local02, objptr
026fc     14 BC 05 F1 | 	add	objptr, #20
02700     DE 38 62 FC | 	wrlong	local02, objptr
02704     90 BC 85 F1 | 	sub	objptr, #144
02708                 | ' if (mode<512)
02708     01 00 00 FF 
0270c     00 36 5E F2 | 	cmps	local01, ##512 wcz
02710     60 00 90 3D |  if_ae	jmp	#LR__0125
02714     80 BC 05 F1 | 	add	objptr, #128
02718     DE 80 02 FB | 	rdlong	muldiva_, objptr
0271c     04 80 46 F0 | 	shr	muldiva_, #4
02720     50 BC 05 F1 | 	add	objptr, #80
02724     DE 82 02 FB | 	rdlong	muldivb_, objptr
02728     D0 BC 85 F1 | 	sub	objptr, #208
0272c     CC 00 A0 FD | 	call	#unsdivide_
02730                 | '   lines:=(timings[12]>>4)+/yzoom
02730     94 BC 05 F1 | 	add	objptr, #148
02734     DE 82 62 FC | 	wrlong	muldivb_, objptr
02738                 | '   if ((timings[12]>>4)+//yzoom) <>0
02738     14 BC 85 F1 | 	sub	objptr, #20
0273c     DE 80 02 FB | 	rdlong	muldiva_, objptr
02740     04 80 46 F0 | 	shr	muldiva_, #4
02744     50 BC 05 F1 | 	add	objptr, #80
02748     DE 82 02 FB | 	rdlong	muldivb_, objptr
0274c     D0 BC 85 F1 | 	sub	objptr, #208
02750     CC 00 A0 FD | 	call	#unsdivide_
02754     00 80 0E F2 | 	cmp	muldiva_, #0 wz
02758     AC 00 90 AD |  if_e	jmp	#LR__0128
0275c                 | '     lines +=1
0275c     94 BC 05 F1 | 	add	objptr, #148
02760     DE 38 02 FB | 	rdlong	local02, objptr
02764     01 38 06 F1 | 	add	local02, #1
02768     DE 38 62 FC | 	wrlong	local02, objptr
0276c     94 BC 85 F1 | 	sub	objptr, #148
02770                 | ' 
02770                 | ' else
02770     94 00 90 FD | 	jmp	#LR__0128
02774                 | LR__0125
02774     80 BC 05 F1 | 	add	objptr, #128
02778     DE 80 02 FB | 	rdlong	muldiva_, objptr
0277c     50 BC 05 F1 | 	add	objptr, #80
02780     DE 82 02 FB | 	rdlong	muldivb_, objptr
02784     D0 BC 85 F1 | 	sub	objptr, #208
02788     D0 00 A0 FD | 	call	#divide_
0278c                 | '   lines:=timings[12]/yzoom
0278c     94 BC 05 F1 | 	add	objptr, #148
02790     DE 82 62 FC | 	wrlong	muldivb_, objptr
02794                 | '   if cpl//xzoom==0
02794     04 BC 85 F1 | 	sub	objptr, #4
02798     DE 80 02 FB | 	rdlong	muldiva_, objptr
0279c     3C BC 05 F1 | 	add	objptr, #60
027a0     DE 82 02 FB | 	rdlong	muldivb_, objptr
027a4     CC BC 85 F1 | 	sub	objptr, #204
027a8     D0 00 A0 FD | 	call	#divide_
027ac     00 80 0E F2 | 	cmp	muldiva_, #0 wz
027b0     28 00 90 5D |  if_ne	jmp	#LR__0126
027b4                 | '     cpl:=cpl/xzoom
027b4     90 BC 05 F1 | 	add	objptr, #144
027b8     DE 80 02 FB | 	rdlong	muldiva_, objptr
027bc     3C BC 05 F1 | 	add	objptr, #60
027c0     DE 82 02 FB | 	rdlong	muldivb_, objptr
027c4     CC BC 85 F1 | 	sub	objptr, #204
027c8     D0 00 A0 FD | 	call	#divide_
027cc     90 BC 05 F1 | 	add	objptr, #144
027d0     DE 82 62 FC | 	wrlong	muldivb_, objptr
027d4     90 BC 85 F1 | 	sub	objptr, #144
027d8                 | '   else
027d8     2C 00 90 FD | 	jmp	#LR__0127
027dc                 | LR__0126
027dc     90 BC 05 F1 | 	add	objptr, #144
027e0     DE 80 02 FB | 	rdlong	muldiva_, objptr
027e4     3C BC 05 F1 | 	add	objptr, #60
027e8     DE 82 02 FB | 	rdlong	muldivb_, objptr
027ec     CC BC 85 F1 | 	sub	objptr, #204
027f0     D0 00 A0 FD | 	call	#divide_
027f4     41 71 02 F6 | 	mov	local30, muldivb_
027f8     01 70 06 F1 | 	add	local30, #1
027fc                 | '     cpl:=cpl/xzoom+1
027fc     90 BC 05 F1 | 	add	objptr, #144
02800     DE 70 62 FC | 	wrlong	local30, objptr
02804     90 BC 85 F1 | 	sub	objptr, #144
02808                 | LR__0127
02808                 | LR__0128
02808     90 BC 05 F1 | 	add	objptr, #144
0280c     DE 44 02 FB | 	rdlong	local08, objptr
02810     04 BC 05 F1 | 	add	objptr, #4
02814     DE 3C 02 FB | 	rdlong	local04, objptr
02818     1E 45 02 FD | 	qmul	local08, local04
0281c     18 72 62 FD | 	getqx	local31
02820                 | ' 
02820                 | ' buflen:=(cpl*lines)
02820     64 BC 85 F1 | 	sub	objptr, #100
02824     DE 72 62 FC | 	wrlong	local31, objptr
02828     30 BC 85 F1 | 	sub	objptr, #48
0282c     02 72 66 F0 | 	shl	local31, #2
02830     13 74 C6 F9 | 	decod	local32, #19
02834     39 75 82 F1 | 	sub	local32, local31
02838                 | ' buf_ptr:=$80000-4*buflen
02838     DE 74 62 FC | 	wrlong	local32, objptr
0283c     50 BC 05 F1 | 	add	objptr, #80
02840     DE 76 02 F6 | 	mov	local33, objptr
02844                 | ' mode_ptr:=@timings
02844     3C BC 85 F1 | 	sub	objptr, #60
02848     DE 76 62 FC | 	wrlong	local33, objptr
0284c                 | ' graphmode:=mode
0284c     B0 BC 05 F1 | 	add	objptr, #176
02850     DE 36 62 FC | 	wrlong	local01, objptr
02854     C4 BC 85 F1 | 	sub	objptr, #196
02858                 | ' makedl(mode)
02858     1B 2F 02 F6 | 	mov	arg01, local01
0285c     0C 00 B0 FD | 	call	#_hng030rm_makedl
02860                 | LR__0129
02860     AF F0 03 F6 | 	mov	ptra, fp
02864     BF 00 A0 FD | 	call	#popregs_
02868                 | _hng030rm_setmode_ret
02868     2D 00 64 FD | 	ret
0286c                 | 
0286c                 | ' 
0286c                 | ' 
0286c                 | ' 
0286c                 | ' 
0286c                 | ' '---------- Make a display list
0286c                 | ' 
0286c                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
0286c                 | _hng030rm_makedl
0286c                 | ' 
0286c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0286c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0286c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0286c                 | ' 
0286c                 | ' '   0 - display a up/down border line
0286c                 | ' 
0286c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
0286c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
0286c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
0286c                 | ' '    nnnn - font line to display, 0..15
0286c                 | ' '    llllll - character line, determines the cursor Y position
0286c                 | ' 
0286c                 | ' 
0286c                 | ' if (mode &256==0)
0286c     00 2F CE F7 | 	test	arg01, #256 wz
02870     1C 00 90 5D |  if_ne	jmp	#LR__0130
02874     DE D0 01 FB | 	rdlong	_var01, objptr
02878     04 00 00 FF 
0287c     00 D1 85 F1 | 	sub	_var01, ##2304
02880                 | '   dl_ptr:=buf_ptr-4*576
02880     1C BC 05 F1 | 	add	objptr, #28
02884     DE D0 61 FC | 	wrlong	_var01, objptr
02888     1C BC 85 F1 | 	sub	objptr, #28
0288c                 | ' else
0288c     18 00 90 FD | 	jmp	#LR__0131
02890                 | LR__0130
02890     DE D2 01 FB | 	rdlong	_var02, objptr
02894     03 00 00 FF 
02898     C0 D3 85 F1 | 	sub	_var02, ##1984
0289c                 | '   dl_ptr:=buf_ptr-4*496
0289c     1C BC 05 F1 | 	add	objptr, #28
028a0     DE D2 61 FC | 	wrlong	_var02, objptr
028a4     1C BC 85 F1 | 	sub	objptr, #28
028a8                 | LR__0131
028a8     17 D5 01 F6 | 	mov	_var03, arg01
028ac     02 D4 45 F0 | 	shr	_var03, #2
028b0     03 D4 05 F5 | 	and	_var03, #3
028b4                 | '  ' dl_ptr:=buf_ptr-4*540
028b4                 | ' 
028b4                 | ' vzoom:=((mode>>2) & 3)
028b4                 | ' 
028b4                 | ' 
028b4                 | ' if mode<512 '' text modes
028b4     01 00 00 FF 
028b8     00 2E 5E F2 | 	cmps	arg01, ##512 wcz
028bc     E4 01 90 3D |  if_ae	jmp	#LR__0139
028c0                 | ' 
028c0                 | '   if timings[6]>0 'borders
028c0     68 BC 05 F1 | 	add	objptr, #104
028c4     DE D6 01 FB | 	rdlong	_var04, objptr
028c8     68 BC 85 F1 | 	sub	objptr, #104
028cc     00 D6 5D F2 | 	cmps	_var04, #0 wcz
028d0     D4 00 90 ED |  if_be	jmp	#LR__0136
028d4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
028d4     00 D8 05 F6 | 	mov	_var05, #0
028d8     68 BC 05 F1 | 	add	objptr, #104
028dc     DE DA 01 FB | 	rdlong	_var06, objptr
028e0     68 BC 85 F1 | 	sub	objptr, #104
028e4     01 DA 85 F1 | 	sub	_var06, #1
028e8     00 DA 5D F2 | 	cmps	_var06, #0 wcz
028ec     01 DC 05 16 |  if_a	mov	_var07, #1
028f0     01 DC 65 E6 |  if_be	neg	_var07, #1
028f4     EE DE 01 F6 | 	mov	_var08, _var07
028f8     EE DA 01 F1 | 	add	_var06, _var07
028fc     28 D7 9F FE | 	loc	pa,	#(@LR__0133-@LR__0132)
02900     93 00 A0 FD | 	call	#FCACHE_LOAD_
02904                 | LR__0132
02904     EC E0 01 F6 | 	mov	_var09, _var05
02908     02 E0 65 F0 | 	shl	_var09, #2
0290c     1C BC 05 F1 | 	add	objptr, #28
02910     DE E2 01 FB | 	rdlong	_var10, objptr
02914     1C BC 85 F1 | 	sub	objptr, #28
02918     F0 E2 01 F1 | 	add	_var10, _var09
0291c                 | '       long[dl_ptr+4*i]:=$0
0291c     F1 00 68 FC | 	wrlong	#0, _var10
02920     EF D8 01 F1 | 	add	_var05, _var08
02924     ED D8 09 F2 | 	cmp	_var05, _var06 wz
02928     D8 FF 9F 5D |  if_ne	jmp	#LR__0132
0292c                 | LR__0133
0292c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0292c     68 BC 05 F1 | 	add	objptr, #104
02930     DE D8 01 FB | 	rdlong	_var05, objptr
02934     18 BC 05 F1 | 	add	objptr, #24
02938     DE DC 01 FB | 	rdlong	_var07, objptr
0293c     EE D8 01 F1 | 	add	_var05, _var07
02940     0C BC 05 F1 | 	add	objptr, #12
02944     DE E4 01 FB | 	rdlong	_var11, objptr
02948     01 E4 85 F1 | 	sub	_var11, #1
0294c     24 BC 85 F1 | 	sub	objptr, #36
02950     DE E6 01 FB | 	rdlong	_var12, objptr
02954     18 BC 05 F1 | 	add	objptr, #24
02958     DE E8 01 FB | 	rdlong	_var13, objptr
0295c     80 BC 85 F1 | 	sub	objptr, #128
02960     F4 E6 01 F1 | 	add	_var12, _var13
02964     F3 E4 59 F2 | 	cmps	_var11, _var12 wcz
02968     01 EA 05 16 |  if_a	mov	_var14, #1
0296c     01 EA 65 E6 |  if_be	neg	_var14, #1
02970     F5 EC 01 F6 | 	mov	_var15, _var14
02974     F5 E4 01 F1 | 	add	_var11, _var14
02978     AC D6 9F FE | 	loc	pa,	#(@LR__0135-@LR__0134)
0297c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02980                 | LR__0134
02980     EC EE 01 F6 | 	mov	_var16, _var05
02984     02 EE 65 F0 | 	shl	_var16, #2
02988     1C BC 05 F1 | 	add	objptr, #28
0298c     DE F0 01 FB | 	rdlong	_var17, objptr
02990     1C BC 85 F1 | 	sub	objptr, #28
02994     F7 F0 01 F1 | 	add	_var17, _var16
02998                 | '       long[dl_ptr+4*i]:=$0
02998     F8 00 68 FC | 	wrlong	#0, _var17
0299c     F6 D8 01 F1 | 	add	_var05, _var15
029a0     F2 D8 09 F2 | 	cmp	_var05, _var11 wz
029a4     D8 FF 9F 5D |  if_ne	jmp	#LR__0134
029a8                 | LR__0135
029a8                 | LR__0136
029a8     10 F2 05 F6 | 	mov	_var18, #16
029ac     EA F2 61 F0 | 	shl	_var18, _var03
029b0                 | '   lpc:=16<<vzoom
029b0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
029b0     68 BC 05 F1 | 	add	objptr, #104
029b4     DE D8 01 FB | 	rdlong	_var05, objptr
029b8     EC F4 01 F6 | 	mov	_var19, _var05
029bc     18 BC 05 F1 | 	add	objptr, #24
029c0     DE F6 01 FB | 	rdlong	_var20, objptr
029c4     FB F4 01 F1 | 	add	_var19, _var20
029c8     01 F4 85 F1 | 	sub	_var19, #1
029cc     18 BC 85 F1 | 	sub	objptr, #24
029d0     DE EA 01 FB | 	rdlong	_var14, objptr
029d4     68 BC 85 F1 | 	sub	objptr, #104
029d8     F5 F4 59 F2 | 	cmps	_var19, _var14 wcz
029dc     01 F8 05 16 |  if_a	mov	_var21, #1
029e0     01 F8 65 E6 |  if_be	neg	_var21, #1
029e4     FC FA 01 F6 | 	mov	_var22, _var21
029e8     FC F4 01 F1 | 	add	_var19, _var21
029ec     C0 D6 9F FE | 	loc	pa,	#(@LR__0138-@LR__0137)
029f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
029f4                 | LR__0137
029f4     EC 80 02 F6 | 	mov	muldiva_, _var05
029f8     68 BC 05 F1 | 	add	objptr, #104
029fc     DE FC 01 FB | 	rdlong	_var23, objptr
02a00     68 BC 85 F1 | 	sub	objptr, #104
02a04     FE 80 82 F1 | 	sub	muldiva_, _var23
02a08     F9 82 02 F6 | 	mov	muldivb_, _var18
02a0c     CC 00 A0 FD | 	call	#unsdivide_
02a10     EA 80 42 F0 | 	shr	muldiva_, _var03
02a14                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02a14     40 FF 01 F6 | 	mov	_var24, muldiva_
02a18     EC 80 02 F6 | 	mov	muldiva_, _var05
02a1c     68 BC 05 F1 | 	add	objptr, #104
02a20     DE FC 01 FB | 	rdlong	_var23, objptr
02a24     68 BC 85 F1 | 	sub	objptr, #104
02a28     FE 80 82 F1 | 	sub	muldiva_, _var23
02a2c     F9 82 02 F6 | 	mov	muldivb_, _var18
02a30     CC 00 A0 FD | 	call	#unsdivide_
02a34     41 01 02 F6 | 	mov	_var25, muldivb_
02a38                 | '     charline:=(i-timings[6])+/lpc
02a38     90 BC 05 F1 | 	add	objptr, #144
02a3c     DE FC 01 FB | 	rdlong	_var23, objptr
02a40     90 BC 85 F1 | 	sub	objptr, #144
02a44     00 FD 01 FD | 	qmul	_var23, _var25
02a48     18 02 62 FD | 	getqx	_var26
02a4c     02 02 66 F0 | 	shl	_var26, #2
02a50     DE 04 02 FB | 	rdlong	_var27, objptr
02a54     01 05 02 F1 | 	add	_var27, _var26
02a58     17 07 02 F6 | 	mov	_var28, arg01
02a5c     03 06 06 F5 | 	and	_var28, #3
02a60     03 05 02 F1 | 	add	_var27, _var28
02a64                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02a64     0C 04 66 F0 | 	shl	_var27, #12
02a68     08 FE 65 F0 | 	shl	_var24, #8
02a6c     FF 04 02 F1 | 	add	_var27, _var24
02a70     02 00 66 F0 | 	shl	_var25, #2
02a74     00 05 02 F1 | 	add	_var27, _var25
02a78     01 04 06 F1 | 	add	_var27, #1
02a7c     EC 08 02 F6 | 	mov	_var29, _var05
02a80     02 08 66 F0 | 	shl	_var29, #2
02a84     1C BC 05 F1 | 	add	objptr, #28
02a88     DE 0A 02 FB | 	rdlong	_var30, objptr
02a8c     1C BC 85 F1 | 	sub	objptr, #28
02a90     04 0B 02 F1 | 	add	_var30, _var29
02a94                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02a94     05 05 62 FC | 	wrlong	_var27, _var30
02a98     FD D8 01 F1 | 	add	_var05, _var22
02a9c     FA D8 09 F2 | 	cmp	_var05, _var19 wz
02aa0     50 FF 9F 5D |  if_ne	jmp	#LR__0137
02aa4                 | LR__0138
02aa4                 | LR__0139
02aa4                 | ' 
02aa4                 | ' 
02aa4                 | ' 
02aa4                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02aa4     01 00 00 FF 
02aa8     00 2E 5E F2 | 	cmps	arg01, ##512 wcz
02aac     AC 01 90 CD |  if_b	jmp	#LR__0147
02ab0                 | ' 
02ab0                 | '   if timings[6]>0 'borders
02ab0     68 BC 05 F1 | 	add	objptr, #104
02ab4     DE D6 01 FB | 	rdlong	_var04, objptr
02ab8     68 BC 85 F1 | 	sub	objptr, #104
02abc     00 D6 5D F2 | 	cmps	_var04, #0 wcz
02ac0     D4 00 90 ED |  if_be	jmp	#LR__0144
02ac4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02ac4     00 D8 05 F6 | 	mov	_var05, #0
02ac8     68 BC 05 F1 | 	add	objptr, #104
02acc     DE 0C 02 FB | 	rdlong	_var31, objptr
02ad0     68 BC 85 F1 | 	sub	objptr, #104
02ad4     01 0C 86 F1 | 	sub	_var31, #1
02ad8     00 0C 5E F2 | 	cmps	_var31, #0 wcz
02adc     01 DC 05 16 |  if_a	mov	_var07, #1
02ae0     01 DC 65 E6 |  if_be	neg	_var07, #1
02ae4     EE 0E 02 F6 | 	mov	_var32, _var07
02ae8     EE 0C 02 F1 | 	add	_var31, _var07
02aec     38 D5 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
02af0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02af4                 | LR__0140
02af4     EC 10 02 F6 | 	mov	_var33, _var05
02af8     02 10 66 F0 | 	shl	_var33, #2
02afc     1C BC 05 F1 | 	add	objptr, #28
02b00     DE 12 02 FB | 	rdlong	_var34, objptr
02b04     1C BC 85 F1 | 	sub	objptr, #28
02b08     08 13 02 F1 | 	add	_var34, _var33
02b0c                 | '       long[dl_ptr+4*i]:=$0
02b0c     09 01 68 FC | 	wrlong	#0, _var34
02b10     07 D9 01 F1 | 	add	_var05, _var32
02b14     06 D9 09 F2 | 	cmp	_var05, _var31 wz
02b18     D8 FF 9F 5D |  if_ne	jmp	#LR__0140
02b1c                 | LR__0141
02b1c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02b1c     68 BC 05 F1 | 	add	objptr, #104
02b20     DE D8 01 FB | 	rdlong	_var05, objptr
02b24     18 BC 05 F1 | 	add	objptr, #24
02b28     DE DC 01 FB | 	rdlong	_var07, objptr
02b2c     EE D8 01 F1 | 	add	_var05, _var07
02b30     0C BC 05 F1 | 	add	objptr, #12
02b34     DE 14 02 FB | 	rdlong	_var35, objptr
02b38     01 14 86 F1 | 	sub	_var35, #1
02b3c     24 BC 85 F1 | 	sub	objptr, #36
02b40     DE E6 01 FB | 	rdlong	_var12, objptr
02b44     18 BC 05 F1 | 	add	objptr, #24
02b48     DE E8 01 FB | 	rdlong	_var13, objptr
02b4c     80 BC 85 F1 | 	sub	objptr, #128
02b50     F4 E6 01 F1 | 	add	_var12, _var13
02b54     F3 14 5A F2 | 	cmps	_var35, _var12 wcz
02b58     01 EA 05 16 |  if_a	mov	_var14, #1
02b5c     01 EA 65 E6 |  if_be	neg	_var14, #1
02b60     F5 16 02 F6 | 	mov	_var36, _var14
02b64     F5 14 02 F1 | 	add	_var35, _var14
02b68     BC D4 9F FE | 	loc	pa,	#(@LR__0143-@LR__0142)
02b6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b70                 | LR__0142
02b70     EC 18 02 F6 | 	mov	_var37, _var05
02b74     02 18 66 F0 | 	shl	_var37, #2
02b78     1C BC 05 F1 | 	add	objptr, #28
02b7c     DE 1A 02 FB | 	rdlong	_var38, objptr
02b80     1C BC 85 F1 | 	sub	objptr, #28
02b84     0C 1B 02 F1 | 	add	_var38, _var37
02b88                 | '       long[dl_ptr+4*i]:=$0
02b88     0D 01 68 FC | 	wrlong	#0, _var38
02b8c     0B D9 01 F1 | 	add	_var05, _var36
02b90     0A D9 09 F2 | 	cmp	_var05, _var35 wz
02b94     D8 FF 9F 5D |  if_ne	jmp	#LR__0142
02b98                 | LR__0143
02b98                 | LR__0144
02b98                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02b98     68 BC 05 F1 | 	add	objptr, #104
02b9c     DE D8 01 FB | 	rdlong	_var05, objptr
02ba0     EC 1C 02 F6 | 	mov	_var39, _var05
02ba4     18 BC 05 F1 | 	add	objptr, #24
02ba8     DE F6 01 FB | 	rdlong	_var20, objptr
02bac     FB 1C 02 F1 | 	add	_var39, _var20
02bb0     01 1C 86 F1 | 	sub	_var39, #1
02bb4     18 BC 85 F1 | 	sub	objptr, #24
02bb8     DE EA 01 FB | 	rdlong	_var14, objptr
02bbc     68 BC 85 F1 | 	sub	objptr, #104
02bc0     F5 1C 5A F2 | 	cmps	_var39, _var14 wcz
02bc4     01 F8 05 16 |  if_a	mov	_var21, #1
02bc8     01 F8 65 E6 |  if_be	neg	_var21, #1
02bcc     FC 1E 02 F6 | 	mov	_var40, _var21
02bd0     FC 1C 02 F1 | 	add	_var39, _var21
02bd4     A8 D4 9F FE | 	loc	pa,	#(@LR__0146-@LR__0145)
02bd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02bdc                 | LR__0145
02bdc     EC 20 02 F6 | 	mov	_var41, _var05
02be0     68 BC 05 F1 | 	add	objptr, #104
02be4     DE FC 01 FB | 	rdlong	_var23, objptr
02be8     FE 20 82 F1 | 	sub	_var41, _var23
02bec     EA 20 42 F0 | 	shr	_var41, _var03
02bf0     28 BC 05 F1 | 	add	objptr, #40
02bf4     DE FC 01 FB | 	rdlong	_var23, objptr
02bf8     90 BC 85 F1 | 	sub	objptr, #144
02bfc     10 FD 01 FD | 	qmul	_var23, _var41
02c00     18 22 62 FD | 	getqx	_var42
02c04     02 22 66 F0 | 	shl	_var42, #2
02c08     DE 24 02 FB | 	rdlong	_var43, objptr
02c0c     11 25 02 F1 | 	add	_var43, _var42
02c10     17 27 02 F6 | 	mov	_var44, arg01
02c14     03 26 06 F5 | 	and	_var44, #3
02c18     13 25 02 F1 | 	add	_var43, _var44
02c1c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02c1c     0C 24 66 F0 | 	shl	_var43, #12
02c20     02 24 06 F1 | 	add	_var43, #2
02c24     17 29 02 F6 | 	mov	_var45, arg01
02c28     30 28 06 F5 | 	and	_var45, #48
02c2c     02 28 46 F0 | 	shr	_var45, #2
02c30     14 25 02 F1 | 	add	_var43, _var45
02c34     EC 2A 02 F6 | 	mov	_var46, _var05
02c38     02 2A 66 F0 | 	shl	_var46, #2
02c3c     1C BC 05 F1 | 	add	objptr, #28
02c40     DE 2C 02 FB | 	rdlong	_var47, objptr
02c44     1C BC 85 F1 | 	sub	objptr, #28
02c48     15 2D 02 F1 | 	add	_var47, _var46
02c4c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
02c4c     16 25 62 FC | 	wrlong	_var43, _var47
02c50     0F D9 01 F1 | 	add	_var05, _var40
02c54     0E D9 09 F2 | 	cmp	_var05, _var39 wz
02c58     80 FF 9F 5D |  if_ne	jmp	#LR__0145
02c5c                 | LR__0146
02c5c                 | LR__0147
02c5c                 | _hng030rm_makedl_ret
02c5c     2D 00 64 FD | 	ret
02c60                 | hubexit
02c60     81 00 80 FD | 	jmp	#cogexit
02c64                 | 
02c64                 | __system___setbaud
02c64     14 80 06 FB | 	rdlong	muldiva_, #20
02c68     17 83 02 F6 | 	mov	muldivb_, arg01
02c6c     D0 00 A0 FD | 	call	#divide_
02c70     40 7C 64 FD | 	dirl	#62
02c74     40 7E 64 FD | 	dirl	#63
02c78     DF 82 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02c7c     10 82 66 F0 | 	shl	muldivb_, #16
02c80     07 30 06 F6 | 	mov	arg02, #7
02c84     41 31 02 F1 | 	add	arg02, muldivb_
02c88     3E F8 0C FC | 	wrpin	#124, #62
02c8c     3E 30 16 FC | 	wxpin	arg02, #62
02c90     3F 7C 0C FC | 	wrpin	#62, #63
02c94     14 30 06 F1 | 	add	arg02, #20
02c98     3F 30 16 FC | 	wxpin	arg02, #63
02c9c     41 7C 64 FD | 	dirh	#62
02ca0     41 7E 64 FD | 	dirh	#63
02ca4                 | __system___setbaud_ret
02ca4     2D 00 64 FD | 	ret
02ca8                 | 
02ca8                 | __system___txraw
02ca8     02 5A 05 F6 | 	mov	COUNT_, #2
02cac     B0 00 A0 FD | 	call	#pushregs_
02cb0     17 37 02 F6 | 	mov	local01, arg01
02cb4     DF 38 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02cb8     0C 00 90 5D |  if_ne	jmp	#LR__0148
02cbc     C2 01 00 FF 
02cc0     00 2E 06 F6 | 	mov	arg01, ##230400
02cc4     9C FF BF FD | 	call	#__system___setbaud
02cc8                 | LR__0148
02cc8     3E 36 26 FC | 	wypin	local01, #62
02ccc     1F 02 64 FD | 	waitx	#1
02cd0     34 D3 9F FE | 	loc	pa,	#(@LR__0150-@LR__0149)
02cd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cd8                 | LR__0149
02cd8     40 7C 74 FD | 	testp	#62 wc
02cdc     F8 FF 9F 3D |  if_nc	jmp	#LR__0149
02ce0                 | LR__0150
02ce0     01 CC 05 F6 | 	mov	result1, #1
02ce4     AF F0 03 F6 | 	mov	ptra, fp
02ce8     BF 00 A0 FD | 	call	#popregs_
02cec                 | __system___txraw_ret
02cec     2D 00 64 FD | 	ret
02cf0                 | 
02cf0                 | __system____builtin_memmove
02cf0     17 D1 01 F6 | 	mov	_var01, arg01
02cf4     18 2F 5A F2 | 	cmps	arg01, arg02 wcz
02cf8     50 00 90 3D |  if_ae	jmp	#LR__0158
02cfc     20 D3 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
02d00     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d04                 | LR__0151
02d04     03 32 5E F2 | 	cmps	arg03, #3 wcz
02d08     18 00 90 ED |  if_be	jmp	#LR__0153
02d0c     18 D3 01 FB | 	rdlong	_var02, arg02
02d10     17 D3 61 FC | 	wrlong	_var02, arg01
02d14     04 2E 06 F1 | 	add	arg01, #4
02d18     04 30 06 F1 | 	add	arg02, #4
02d1c     04 32 86 F1 | 	sub	arg03, #4
02d20     E0 FF 9F FD | 	jmp	#LR__0151
02d24                 | LR__0152
02d24                 | LR__0153
02d24     19 D5 09 F6 | 	mov	_var03, arg03 wz
02d28     4C 00 90 AD |  if_e	jmp	#LR__0164
02d2c     E4 D2 9F FE | 	loc	pa,	#(@LR__0156-@LR__0154)
02d30     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d34                 | LR__0154
02d34     EA 08 D8 FC | 	rep	@LR__0157, _var03
02d38                 | LR__0155
02d38     18 D3 C1 FA | 	rdbyte	_var02, arg02
02d3c     17 D3 41 FC | 	wrbyte	_var02, arg01
02d40     01 2E 06 F1 | 	add	arg01, #1
02d44     01 30 06 F1 | 	add	arg02, #1
02d48                 | LR__0156
02d48                 | LR__0157
02d48     2C 00 90 FD | 	jmp	#LR__0164
02d4c                 | LR__0158
02d4c     19 2F 02 F1 | 	add	arg01, arg03
02d50     19 31 02 F1 | 	add	arg02, arg03
02d54     19 D7 09 F6 | 	mov	_var04, arg03 wz
02d58     1C 00 90 AD |  if_e	jmp	#LR__0163
02d5c     B4 D2 9F FE | 	loc	pa,	#(@LR__0161-@LR__0159)
02d60     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d64                 | LR__0159
02d64     EB 08 D8 FC | 	rep	@LR__0162, _var04
02d68                 | LR__0160
02d68     01 2E 86 F1 | 	sub	arg01, #1
02d6c     01 30 86 F1 | 	sub	arg02, #1
02d70     18 D3 C1 FA | 	rdbyte	_var02, arg02
02d74     17 D3 41 FC | 	wrbyte	_var02, arg01
02d78                 | LR__0161
02d78                 | LR__0162
02d78                 | LR__0163
02d78                 | LR__0164
02d78     E8 CC 01 F6 | 	mov	result1, _var01
02d7c                 | __system____builtin_memmove_ret
02d7c     2D 00 64 FD | 	ret
02d80                 | 
02d80                 | __system__longmove
02d80     17 D1 01 F6 | 	mov	_var01, arg01
02d84     18 2F 5A F2 | 	cmps	arg01, arg02 wcz
02d88     28 00 90 3D |  if_ae	jmp	#LR__0169
02d8c     19 D3 09 F6 | 	mov	_var02, arg03 wz
02d90     54 00 90 AD |  if_e	jmp	#LR__0175
02d94     7C D2 9F FE | 	loc	pa,	#(@LR__0167-@LR__0165)
02d98     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d9c                 | LR__0165
02d9c     E9 08 D8 FC | 	rep	@LR__0168, _var02
02da0                 | LR__0166
02da0     18 D5 01 FB | 	rdlong	_var03, arg02
02da4     17 D5 61 FC | 	wrlong	_var03, arg01
02da8     04 2E 06 F1 | 	add	arg01, #4
02dac     04 30 06 F1 | 	add	arg02, #4
02db0                 | LR__0167
02db0                 | LR__0168
02db0     34 00 90 FD | 	jmp	#LR__0175
02db4                 | LR__0169
02db4     19 D7 01 F6 | 	mov	_var04, arg03
02db8     02 D6 65 F0 | 	shl	_var04, #2
02dbc     EB 2E 02 F1 | 	add	arg01, _var04
02dc0     EB 30 02 F1 | 	add	arg02, _var04
02dc4     19 D9 09 F6 | 	mov	_var05, arg03 wz
02dc8     1C 00 90 AD |  if_e	jmp	#LR__0174
02dcc     44 D2 9F FE | 	loc	pa,	#(@LR__0172-@LR__0170)
02dd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dd4                 | LR__0170
02dd4     EC 08 D8 FC | 	rep	@LR__0173, _var05
02dd8                 | LR__0171
02dd8     04 2E 86 F1 | 	sub	arg01, #4
02ddc     04 30 86 F1 | 	sub	arg02, #4
02de0     18 D5 01 FB | 	rdlong	_var03, arg02
02de4     17 D5 61 FC | 	wrlong	_var03, arg01
02de8                 | LR__0172
02de8                 | LR__0173
02de8                 | LR__0174
02de8                 | LR__0175
02de8     E8 CC 01 F6 | 	mov	result1, _var01
02dec                 | __system__longmove_ret
02dec     2D 00 64 FD | 	ret
02df0                 | 
02df0                 | __system____topofstack
02df0     00 5A 05 F6 | 	mov	COUNT_, #0
02df4     B0 00 A0 FD | 	call	#pushregs_
02df8     0C F0 07 F1 | 	add	ptra, #12
02dfc     04 5E 05 F1 | 	add	fp, #4
02e00     AF 2E 62 FC | 	wrlong	arg01, fp
02e04     AF CC 01 F6 | 	mov	result1, fp
02e08     04 5E 85 F1 | 	sub	fp, #4
02e0c     AF F0 03 F6 | 	mov	ptra, fp
02e10     BF 00 A0 FD | 	call	#popregs_
02e14                 | __system____topofstack_ret
02e14     2D 00 64 FD | 	ret
02e18                 | 
02e18                 | __system___make_methodptr
02e18     04 5A 05 F6 | 	mov	COUNT_, #4
02e1c     B0 00 A0 FD | 	call	#pushregs_
02e20     17 37 02 F6 | 	mov	local01, arg01
02e24     18 39 02 F6 | 	mov	local02, arg02
02e28     08 2E 06 F6 | 	mov	arg01, #8
02e2c     38 04 B0 FD | 	call	#__system___gc_alloc_managed
02e30     E6 3A 0A F6 | 	mov	local03, result1 wz
02e34     10 00 90 AD |  if_e	jmp	#LR__0176
02e38     1D 37 62 FC | 	wrlong	local01, local03
02e3c     1D 3D 02 F6 | 	mov	local04, local03
02e40     04 3C 06 F1 | 	add	local04, #4
02e44     1E 39 62 FC | 	wrlong	local02, local04
02e48                 | LR__0176
02e48     1D CD 01 F6 | 	mov	result1, local03
02e4c     AF F0 03 F6 | 	mov	ptra, fp
02e50     BF 00 A0 FD | 	call	#popregs_
02e54                 | __system___make_methodptr_ret
02e54     2D 00 64 FD | 	ret
02e58                 | 
02e58                 | __system___lockmem
02e58     02 5A 05 F6 | 	mov	COUNT_, #2
02e5c     B0 00 A0 FD | 	call	#pushregs_
02e60     01 CC 61 FD | 	cogid	result1
02e64     E6 36 02 F6 | 	mov	local01, result1
02e68     00 37 06 F1 | 	add	local01, #256
02e6c                 | LR__0177
02e6c     17 39 0A FB | 	rdlong	local02, arg01 wz
02e70     17 37 62 AC |  if_e	wrlong	local01, arg01
02e74     17 39 02 AB |  if_e	rdlong	local02, arg01
02e78     17 39 02 AB |  if_e	rdlong	local02, arg01
02e7c     1B 39 0A F2 | 	cmp	local02, local01 wz
02e80     E8 FF 9F 5D |  if_ne	jmp	#LR__0177
02e84     AF F0 03 F6 | 	mov	ptra, fp
02e88     BF 00 A0 FD | 	call	#popregs_
02e8c                 | __system___lockmem_ret
02e8c     2D 00 64 FD | 	ret
02e90                 | 
02e90                 | __system___tx
02e90     02 5A 05 F6 | 	mov	COUNT_, #2
02e94     B0 00 A0 FD | 	call	#pushregs_
02e98     17 37 02 F6 | 	mov	local01, arg01
02e9c     0A 36 0E F2 | 	cmp	local01, #10 wz
02ea0     20 00 90 5D |  if_ne	jmp	#LR__0178
02ea4     08 BE 05 F1 | 	add	ptr___system__dat__, #8
02ea8     DF 38 02 FB | 	rdlong	local02, ptr___system__dat__
02eac     08 BE 85 F1 | 	sub	ptr___system__dat__, #8
02eb0     02 38 CE F7 | 	test	local02, #2 wz
02eb4     0C 00 90 AD |  if_e	jmp	#LR__0178
02eb8     0D 38 06 F6 | 	mov	local02, #13
02ebc     0D 2E 06 F6 | 	mov	arg01, #13
02ec0     E4 FD BF FD | 	call	#__system___txraw
02ec4                 | LR__0178
02ec4     1B 2F 02 F6 | 	mov	arg01, local01
02ec8     DC FD BF FD | 	call	#__system___txraw
02ecc     AF F0 03 F6 | 	mov	ptra, fp
02ed0     BF 00 A0 FD | 	call	#popregs_
02ed4                 | __system___tx_ret
02ed4     2D 00 64 FD | 	ret
02ed8                 | 
02ed8                 | __system___pinread
02ed8     20 2E CE F7 | 	test	arg01, #32 wz
02edc     FF D1 01 56 |  if_ne	mov	_var01, inb
02ee0     FE D1 01 A6 |  if_e	mov	_var01, ina
02ee4     E8 CC 01 F6 | 	mov	result1, _var01
02ee8     17 CD 41 F0 | 	shr	result1, arg01
02eec     06 2E 46 F0 | 	shr	arg01, #6
02ef0     17 CD 41 F7 | 	zerox	result1, arg01
02ef4                 | __system___pinread_ret
02ef4     2D 00 64 FD | 	ret
02ef8                 | 
02ef8                 | __system___waitms
02ef8     03 5A 05 F6 | 	mov	COUNT_, #3
02efc     B0 00 A0 FD | 	call	#pushregs_
02f00     17 37 02 F6 | 	mov	local01, arg01
02f04     14 38 06 FB | 	rdlong	local02, #20
02f08     0C D1 9F FE | 	loc	pa,	#(@LR__0180-@LR__0179)
02f0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f10                 | LR__0179
02f10     01 00 00 FF 
02f14     E8 37 5E F2 | 	cmps	local01, ##1000 wcz
02f18     1F 38 62 1D |  if_a	waitx	local02
02f1c     01 00 00 1F 
02f20     E8 37 86 11 |  if_a	sub	local01, ##1000
02f24     E8 FF 9F 1D |  if_a	jmp	#LR__0179
02f28                 | LR__0180
02f28     0C BE 05 F1 | 	add	ptr___system__dat__, #12
02f2c     DF 3A 0A FB | 	rdlong	local03, ptr___system__dat__ wz
02f30     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
02f34     20 00 90 5D |  if_ne	jmp	#LR__0181
02f38     1C 81 02 F6 | 	mov	muldiva_, local02
02f3c     01 00 00 FF 
02f40     E8 83 06 F6 | 	mov	muldivb_, ##1000
02f44     CC 00 A0 FD | 	call	#unsdivide_
02f48     41 3B 02 F6 | 	mov	local03, muldivb_
02f4c     0C BE 05 F1 | 	add	ptr___system__dat__, #12
02f50     DF 82 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02f54     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
02f58                 | LR__0181
02f58     00 36 5E F2 | 	cmps	local01, #0 wcz
02f5c     1D 37 02 1D |  if_a	qmul	local01, local03
02f60     18 2E 62 1D |  if_a	getqx	arg01
02f64     1F 2E 62 1D |  if_a	waitx	arg01
02f68     AF F0 03 F6 | 	mov	ptra, fp
02f6c     BF 00 A0 FD | 	call	#popregs_
02f70                 | __system___waitms_ret
02f70     2D 00 64 FD | 	ret
02f74                 | 
02f74                 | __system___gc_ptrs
02f74     0A 5A 05 F6 | 	mov	COUNT_, #10
02f78     B0 00 A0 FD | 	call	#pushregs_
02f7c     DA 36 02 F6 | 	mov	local01, __heap_ptr
02f80     1B 39 02 F6 | 	mov	local02, local01
02f84     07 00 00 FF 
02f88     F8 39 06 F1 | 	add	local02, ##4088
02f8c     1B 3B 0A FB | 	rdlong	local03, local01 wz
02f90     74 00 90 5D |  if_ne	jmp	#LR__0182
02f94     1C 3D 02 F6 | 	mov	local04, local02
02f98     1B 3D 82 F1 | 	sub	local04, local01
02f9c     1B 03 58 FC | 	wrword	#1, local01
02fa0     1B 3F 02 F6 | 	mov	local05, local01
02fa4     02 3E 06 F1 | 	add	local05, #2
02fa8     36 00 80 FF 
02fac     1F 21 59 FC | 	wrword	##27792, local05
02fb0     1B 41 02 F6 | 	mov	local06, local01
02fb4     04 40 06 F1 | 	add	local06, #4
02fb8     20 01 58 FC | 	wrword	#0, local06
02fbc     1B 43 02 F6 | 	mov	local07, local01
02fc0     06 42 06 F1 | 	add	local07, #6
02fc4     21 03 58 FC | 	wrword	#1, local07
02fc8     10 36 06 F1 | 	add	local01, #16
02fcc     1E 3B 52 F6 | 	abs	local03, local04 wc
02fd0     04 3A 46 F0 | 	shr	local03, #4
02fd4     1D 3B 62 C6 |  if_b	neg	local03, local03
02fd8     1B 3B 52 FC | 	wrword	local03, local01
02fdc     1B 45 02 F6 | 	mov	local08, local01
02fe0     02 44 06 F1 | 	add	local08, #2
02fe4     36 00 80 FF 
02fe8     22 1F 59 FC | 	wrword	##27791, local08
02fec     1B 47 02 F6 | 	mov	local09, local01
02ff0     04 46 06 F1 | 	add	local09, #4
02ff4     23 01 58 FC | 	wrword	#0, local09
02ff8     1B 49 02 F6 | 	mov	local10, local01
02ffc     06 48 06 F1 | 	add	local10, #6
03000     24 01 58 FC | 	wrword	#0, local10
03004     10 36 86 F1 | 	sub	local01, #16
03008                 | LR__0182
03008     1C CF 01 F6 | 	mov	result2, local02
0300c     1B CD 01 F6 | 	mov	result1, local01
03010     AF F0 03 F6 | 	mov	ptra, fp
03014     BF 00 A0 FD | 	call	#popregs_
03018                 | __system___gc_ptrs_ret
03018     2D 00 64 FD | 	ret
0301c                 | 
0301c                 | __system___gc_nextBlockPtr
0301c     02 5A 05 F6 | 	mov	COUNT_, #2
03020     B0 00 A0 FD | 	call	#pushregs_
03024     17 37 02 F6 | 	mov	local01, arg01
03028     1B 39 EA FA | 	rdword	local02, local01 wz
0302c     10 00 90 5D |  if_ne	jmp	#LR__0183
03030     1C 00 00 FF 
03034     1C 2E 06 F6 | 	mov	arg01, ##@LR__0226
03038     F8 01 B0 FD | 	call	#__system___gc_errmsg
0303c     0C 00 90 FD | 	jmp	#LR__0184
03040                 | LR__0183
03040     04 38 66 F0 | 	shl	local02, #4
03044     1B CD 01 F6 | 	mov	result1, local01
03048     1C CD 01 F1 | 	add	result1, local02
0304c                 | LR__0184
0304c     AF F0 03 F6 | 	mov	ptra, fp
03050     BF 00 A0 FD | 	call	#popregs_
03054                 | __system___gc_nextBlockPtr_ret
03054     2D 00 64 FD | 	ret
03058                 | 
03058                 | __system___gc_tryalloc
03058     1B 5A 05 F6 | 	mov	COUNT_, #27
0305c     B0 00 A0 FD | 	call	#pushregs_
03060     17 37 02 F6 | 	mov	local01, arg01
03064     18 39 02 F6 | 	mov	local02, arg02
03068     08 FF BF FD | 	call	#__system___gc_ptrs
0306c     E6 3A 02 F6 | 	mov	local03, result1
03070     E7 3C 02 F6 | 	mov	local04, result2
03074     1D 3F 02 F6 | 	mov	local05, local03
03078     00 40 06 F6 | 	mov	local06, #0
0307c     D8 CF 9F FE | 	loc	pa,	#(@LR__0186-@LR__0185)
03080     93 00 A0 FD | 	call	#FCACHE_LOAD_
03084                 | LR__0185
03084     1F 43 02 F6 | 	mov	local07, local05
03088     06 3E 06 F1 | 	add	local05, #6
0308c     1F 45 02 F6 | 	mov	local08, local05
03090     1D 47 02 F6 | 	mov	local09, local03
03094     22 49 E2 FA | 	rdword	local10, local08
03098     23 2F 02 F6 | 	mov	arg01, local09
0309c     24 31 0A F6 | 	mov	arg02, local10 wz
030a0     00 CC 05 A6 |  if_e	mov	result1, #0
030a4     04 30 66 50 |  if_ne	shl	arg02, #4
030a8     18 2F 02 51 |  if_ne	add	arg01, arg02
030ac     17 CD 01 56 |  if_ne	mov	result1, arg01
030b0     E6 4A 02 F6 | 	mov	local11, result1
030b4     25 3F 0A F6 | 	mov	local05, local11 wz
030b8     1F 47 02 56 |  if_ne	mov	local09, local05
030bc     23 4D 02 56 |  if_ne	mov	local12, local09
030c0     26 41 E2 5A |  if_ne	rdword	local06, local12
030c4     00 3E 0E F2 | 	cmp	local05, #0 wz
030c8     10 00 90 AD |  if_e	jmp	#LR__0187
030cc     1E 3F 5A F2 | 	cmps	local05, local04 wcz
030d0     08 00 90 3D |  if_ae	jmp	#LR__0187
030d4     20 37 5A F2 | 	cmps	local01, local06 wcz
030d8     A8 FF 9F 1D |  if_a	jmp	#LR__0185
030dc                 | LR__0186
030dc                 | LR__0187
030dc     00 3E 0E F2 | 	cmp	local05, #0 wz
030e0     1F CD 01 A6 |  if_e	mov	result1, local05
030e4     40 01 90 AD |  if_e	jmp	#LR__0190
030e8     1F 4F 02 F6 | 	mov	local13, local05
030ec     06 4E 06 F1 | 	add	local13, #6
030f0     27 51 E2 FA | 	rdword	local14, local13
030f4     20 37 5A F2 | 	cmps	local01, local06 wcz
030f8     CC 00 90 3D |  if_ae	jmp	#LR__0189
030fc     1F 53 02 F6 | 	mov	local15, local05
03100     29 37 52 FC | 	wrword	local01, local15
03104     1B 55 02 F6 | 	mov	local16, local01
03108     04 54 66 F0 | 	shl	local16, #4
0310c     1F 57 02 F6 | 	mov	local17, local05
03110     2A 57 02 F1 | 	add	local17, local16
03114     20 59 02 F6 | 	mov	local18, local06
03118     1B 59 82 F1 | 	sub	local18, local01
0311c     2B 5B 02 F6 | 	mov	local19, local17
03120     2D 59 52 FC | 	wrword	local18, local19
03124     2B 5D 02 F6 | 	mov	local20, local17
03128     02 5C 06 F1 | 	add	local20, #2
0312c     36 00 80 FF 
03130     2E 1F 59 FC | 	wrword	##27791, local20
03134     2B 5F 02 F6 | 	mov	local21, local17
03138     04 5E 06 F1 | 	add	local21, #4
0313c     1F 31 0A F6 | 	mov	arg02, local05 wz
03140     00 CC 05 A6 |  if_e	mov	result1, #0
03144     1D 31 82 51 |  if_ne	sub	arg02, local03
03148     04 30 46 50 |  if_ne	shr	arg02, #4
0314c     18 CD 01 56 |  if_ne	mov	result1, arg02
03150     2F CD 51 FC | 	wrword	result1, local21
03154     2B 61 02 F6 | 	mov	local22, local17
03158     27 47 E2 FA | 	rdword	local09, local13
0315c     06 60 06 F1 | 	add	local22, #6
03160     30 47 52 FC | 	wrword	local09, local22
03164     2B 63 02 F6 | 	mov	local23, local17
03168     31 31 0A F6 | 	mov	arg02, local23 wz
0316c     00 CC 05 A6 |  if_e	mov	result1, #0
03170     1D 31 82 51 |  if_ne	sub	arg02, local03
03174     04 30 46 50 |  if_ne	shr	arg02, #4
03178     18 CD 01 56 |  if_ne	mov	result1, arg02
0317c     E6 50 02 F6 | 	mov	local14, result1
03180     2B 2F 02 F6 | 	mov	arg01, local17
03184     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
03188     E6 64 0A F6 | 	mov	local24, result1 wz
0318c     38 00 90 AD |  if_e	jmp	#LR__0188
03190     1E 65 5A F2 | 	cmps	local24, local04 wcz
03194     30 00 90 3D |  if_ae	jmp	#LR__0188
03198     32 67 02 F6 | 	mov	local25, local24
0319c     04 66 06 F1 | 	add	local25, #4
031a0     1D 47 02 F6 | 	mov	local09, local03
031a4     31 49 02 F6 | 	mov	local10, local23
031a8     23 2F 02 F6 | 	mov	arg01, local09
031ac     24 31 0A F6 | 	mov	arg02, local10 wz
031b0     00 CC 05 A6 |  if_e	mov	result1, #0
031b4     17 31 82 51 |  if_ne	sub	arg02, arg01
031b8     04 30 46 50 |  if_ne	shr	arg02, #4
031bc     18 CD 01 56 |  if_ne	mov	result1, arg02
031c0     E6 4A 02 F6 | 	mov	local11, result1
031c4     33 4B 52 FC | 	wrword	local11, local25
031c8                 | LR__0188
031c8                 | LR__0189
031c8     06 42 06 F1 | 	add	local07, #6
031cc     21 51 52 FC | 	wrword	local14, local07
031d0     36 00 00 FF 
031d4     80 46 06 F6 | 	mov	local09, ##27776
031d8     1C 47 42 F5 | 	or	local09, local02
031dc     1F 69 02 F6 | 	mov	local26, local05
031e0     02 68 06 F1 | 	add	local26, #2
031e4     01 CC 61 FD | 	cogid	result1
031e8     E6 46 42 F5 | 	or	local09, result1
031ec     34 47 52 FC | 	wrword	local09, local26
031f0     1D 6B 02 F6 | 	mov	local27, local03
031f4     08 6A 06 F1 | 	add	local27, #8
031f8     35 47 E2 FA | 	rdword	local09, local27
031fc     27 47 52 FC | 	wrword	local09, local13
03200     1F 31 0A F6 | 	mov	arg02, local05 wz
03204     00 CC 05 A6 |  if_e	mov	result1, #0
03208     1D 31 82 51 |  if_ne	sub	arg02, local03
0320c     04 30 46 50 |  if_ne	shr	arg02, #4
03210     18 CD 01 56 |  if_ne	mov	result1, arg02
03214     35 CD 51 FC | 	wrword	result1, local27
03218     08 3E 06 F1 | 	add	local05, #8
0321c     1F CD 01 F6 | 	mov	result1, local05
03220     00 C0 31 FF 
03224     00 CC 45 F5 | 	or	result1, ##1669332992
03228                 | LR__0190
03228     AF F0 03 F6 | 	mov	ptra, fp
0322c     BF 00 A0 FD | 	call	#popregs_
03230                 | __system___gc_tryalloc_ret
03230     2D 00 64 FD | 	ret
03234                 | 
03234                 | __system___gc_errmsg
03234     02 5A 05 F6 | 	mov	COUNT_, #2
03238     B0 00 A0 FD | 	call	#pushregs_
0323c     17 37 02 F6 | 	mov	local01, arg01
03240                 | LR__0191
03240     1B 39 CA FA | 	rdbyte	local02, local01 wz
03244     01 36 06 F1 | 	add	local01, #1
03248     0C 00 90 AD |  if_e	jmp	#LR__0192
0324c     1C 2F 02 F6 | 	mov	arg01, local02
03250     3C FC BF FD | 	call	#__system___tx
03254     E8 FF 9F FD | 	jmp	#LR__0191
03258                 | LR__0192
03258     00 CC 05 F6 | 	mov	result1, #0
0325c     AF F0 03 F6 | 	mov	ptra, fp
03260     BF 00 A0 FD | 	call	#popregs_
03264                 | __system___gc_errmsg_ret
03264     2D 00 64 FD | 	ret
03268                 | 
03268                 | __system___gc_alloc_managed
03268     02 5A 05 F6 | 	mov	COUNT_, #2
0326c     B0 00 A0 FD | 	call	#pushregs_
03270     17 37 02 F6 | 	mov	local01, arg01
03274     00 30 06 F6 | 	mov	arg02, #0
03278     30 00 B0 FD | 	call	#__system___gc_doalloc
0327c     E6 38 0A F6 | 	mov	local02, result1 wz
03280     18 00 90 5D |  if_ne	jmp	#LR__0193
03284     00 36 5E F2 | 	cmps	local01, #0 wcz
03288     10 00 90 ED |  if_be	jmp	#LR__0193
0328c     1C 00 00 FF 
03290     38 2E 06 F6 | 	mov	arg01, ##@LR__0227
03294     9C FF BF FD | 	call	#__system___gc_errmsg
03298     04 00 90 FD | 	jmp	#LR__0194
0329c                 | LR__0193
0329c     1C CD 01 F6 | 	mov	result1, local02
032a0                 | LR__0194
032a0     AF F0 03 F6 | 	mov	ptra, fp
032a4     BF 00 A0 FD | 	call	#popregs_
032a8                 | __system___gc_alloc_managed_ret
032a8     2D 00 64 FD | 	ret
032ac                 | 
032ac                 | __system___gc_doalloc
032ac     07 5A 05 F6 | 	mov	COUNT_, #7
032b0     B0 00 A0 FD | 	call	#pushregs_
032b4     17 37 0A F6 | 	mov	local01, arg01 wz
032b8     18 39 02 F6 | 	mov	local02, arg02
032bc     00 CC 05 A6 |  if_e	mov	result1, #0
032c0     8C 00 90 AD |  if_e	jmp	#LR__0202
032c4     17 36 06 F1 | 	add	local01, #23
032c8     0F 36 26 F5 | 	andn	local01, #15
032cc     04 36 46 F0 | 	shr	local01, #4
032d0     14 BE 05 F1 | 	add	ptr___system__dat__, #20
032d4     DF 3A 02 F6 | 	mov	local03, ptr___system__dat__
032d8     1D 2F 02 F6 | 	mov	arg01, local03
032dc     14 BE 85 F1 | 	sub	ptr___system__dat__, #20
032e0     74 FB BF FD | 	call	#__system___lockmem
032e4     1B 2F 02 F6 | 	mov	arg01, local01
032e8     1C 31 02 F6 | 	mov	arg02, local02
032ec     68 FD BF FD | 	call	#__system___gc_tryalloc
032f0     E6 3C 0A F6 | 	mov	local04, result1 wz
032f4     14 00 90 5D |  if_ne	jmp	#LR__0195
032f8     10 03 B0 FD | 	call	#__system___gc_docollect
032fc     1B 2F 02 F6 | 	mov	arg01, local01
03300     1C 31 02 F6 | 	mov	arg02, local02
03304     50 FD BF FD | 	call	#__system___gc_tryalloc
03308     E6 3C 02 F6 | 	mov	local04, result1
0330c                 | LR__0195
0330c     1D 01 68 FC | 	wrlong	#0, local03
03310     00 3C 0E F2 | 	cmp	local04, #0 wz
03314     34 00 90 AD |  if_e	jmp	#LR__0201
03318     04 36 66 F0 | 	shl	local01, #4
0331c     08 36 86 F1 | 	sub	local01, #8
03320     1B 3F 52 F6 | 	abs	local05, local01 wc
03324     02 3E 46 F0 | 	shr	local05, #2
03328     1F 3F 62 C6 |  if_b	neg	local05, local05
0332c     1F 41 0A F6 | 	mov	local06, local05 wz
03330     1E 43 02 F6 | 	mov	local07, local04
03334     14 00 90 AD |  if_e	jmp	#LR__0200
03338     D0 CC 9F FE | 	loc	pa,	#(@LR__0198-@LR__0196)
0333c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03340                 | LR__0196
03340     20 05 D8 FC | 	rep	@LR__0199, local06
03344                 | LR__0197
03344     21 01 68 FC | 	wrlong	#0, local07
03348     04 42 06 F1 | 	add	local07, #4
0334c                 | LR__0198
0334c                 | LR__0199
0334c                 | LR__0200
0334c                 | LR__0201
0334c     1E CD 01 F6 | 	mov	result1, local04
03350                 | LR__0202
03350     AF F0 03 F6 | 	mov	ptra, fp
03354     BF 00 A0 FD | 	call	#popregs_
03358                 | __system___gc_doalloc_ret
03358     2D 00 64 FD | 	ret
0335c                 | 
0335c                 | __system___gc_isvalidptr
0335c     19 D1 01 F6 | 	mov	_var01, arg03
03360     E8 D2 01 F6 | 	mov	_var02, _var01
03364     00 F8 7F FF 
03368     00 D2 05 F5 | 	and	_var02, ##-1048576
0336c     00 C0 31 FF 
03370     00 D2 0D F2 | 	cmp	_var02, ##1669332992 wz
03374     00 CC 05 56 |  if_ne	mov	result1, #0
03378     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
0337c     08 D0 85 F1 | 	sub	_var01, #8
03380     E8 D4 01 F6 | 	mov	_var03, _var01
03384     00 F8 7F FF 
03388     00 D4 25 F5 | 	andn	_var03, ##-1048576
0338c     17 D5 59 F2 | 	cmps	_var03, arg01 wcz
03390     08 00 90 CD |  if_b	jmp	#LR__0203
03394     18 D5 59 F2 | 	cmps	_var03, arg02 wcz
03398     08 00 90 CD |  if_b	jmp	#LR__0204
0339c                 | LR__0203
0339c     00 CC 05 F6 | 	mov	result1, #0
033a0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
033a4                 | LR__0204
033a4     EA D2 01 F6 | 	mov	_var02, _var03
033a8     17 D3 61 F5 | 	xor	_var02, arg01
033ac     0F D2 0D F5 | 	and	_var02, #15 wz
033b0     00 CC 05 56 |  if_ne	mov	result1, #0
033b4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
033b8     EA D6 01 F6 | 	mov	_var04, _var03
033bc     02 D6 05 F1 | 	add	_var04, #2
033c0     EB D2 E1 FA | 	rdword	_var02, _var04
033c4     7F 00 00 FF 
033c8     C0 D3 05 F5 | 	and	_var02, ##65472
033cc     36 00 00 FF 
033d0     80 D2 0D F2 | 	cmp	_var02, ##27776 wz
033d4     00 CC 05 56 |  if_ne	mov	result1, #0
033d8     EA CC 01 A6 |  if_e	mov	result1, _var03
033dc                 | __system___gc_isvalidptr_ret
033dc     2D 00 64 FD | 	ret
033e0                 | 
033e0                 | __system___gc_dofree
033e0     1A 5A 05 F6 | 	mov	COUNT_, #26
033e4     B0 00 A0 FD | 	call	#pushregs_
033e8     17 37 02 F6 | 	mov	local01, arg01
033ec     84 FB BF FD | 	call	#__system___gc_ptrs
033f0     E7 38 02 F6 | 	mov	local02, result2
033f4     E6 3A 02 F6 | 	mov	local03, result1
033f8     1B 3D 02 F6 | 	mov	local04, local01
033fc     02 3C 06 F1 | 	add	local04, #2
03400     36 00 80 FF 
03404     1E 1F 59 FC | 	wrword	##27791, local04
03408     1B 3F 02 F6 | 	mov	local05, local01
0340c     1B 2F 02 F6 | 	mov	arg01, local01
03410     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
03414     E6 40 02 F6 | 	mov	local06, result1
03418     34 CC 9F FE | 	loc	pa,	#(@LR__0206-@LR__0205)
0341c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03420                 | LR__0205
03420     04 3E 06 F1 | 	add	local05, #4
03424     1F 43 02 F6 | 	mov	local07, local05
03428     21 31 EA FA | 	rdword	arg02, local07 wz
0342c     1D 2F 02 F6 | 	mov	arg01, local03
03430     00 CC 05 A6 |  if_e	mov	result1, #0
03434     04 30 66 50 |  if_ne	shl	arg02, #4
03438     18 2F 02 51 |  if_ne	add	arg01, arg02
0343c     17 CD 01 56 |  if_ne	mov	result1, arg01
03440     E6 3E 0A F6 | 	mov	local05, result1 wz
03444     28 00 90 AD |  if_e	jmp	#LR__0207
03448     1F 2F 02 F6 | 	mov	arg01, local05
0344c     00 44 06 F6 | 	mov	local08, #0
03450     02 2E 06 F1 | 	add	arg01, #2
03454     17 47 E2 FA | 	rdword	local09, arg01
03458     36 00 00 FF 
0345c     8F 46 0E F2 | 	cmp	local09, ##27791 wz
03460     01 44 66 A6 |  if_e	neg	local08, #1
03464     22 CD 01 F6 | 	mov	result1, local08
03468     E6 48 0A F6 | 	mov	local10, result1 wz
0346c     B0 FF 9F AD |  if_e	jmp	#LR__0205
03470                 | LR__0206
03470                 | LR__0207
03470     00 3E 0E F2 | 	cmp	local05, #0 wz
03474     1D 3F 02 A6 |  if_e	mov	local05, local03
03478     1F 4B 02 F6 | 	mov	local11, local05
0347c     06 4A 06 F1 | 	add	local11, #6
03480     1B 4D 02 F6 | 	mov	local12, local01
03484     25 4F E2 FA | 	rdword	local13, local11
03488     06 4C 06 F1 | 	add	local12, #6
0348c     26 4F 52 FC | 	wrword	local13, local12
03490     1B 31 0A F6 | 	mov	arg02, local01 wz
03494     00 CC 05 A6 |  if_e	mov	result1, #0
03498     1D 31 82 51 |  if_ne	sub	arg02, local03
0349c     04 30 46 50 |  if_ne	shr	arg02, #4
034a0     18 CD 01 56 |  if_ne	mov	result1, arg02
034a4     E6 50 02 F6 | 	mov	local14, result1
034a8     25 51 52 FC | 	wrword	local14, local11
034ac     1D 3F 0A F2 | 	cmp	local05, local03 wz
034b0     74 00 90 AD |  if_e	jmp	#LR__0210
034b4     1F 2F 02 F6 | 	mov	arg01, local05
034b8     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
034bc     1B CD 09 F2 | 	cmp	result1, local01 wz
034c0     64 00 90 5D |  if_ne	jmp	#LR__0209
034c4     1F 53 02 F6 | 	mov	local15, local05
034c8     29 55 E2 FA | 	rdword	local16, local15
034cc     1B 57 02 F6 | 	mov	local17, local01
034d0     2B 49 E2 FA | 	rdword	local10, local17
034d4     24 55 02 F1 | 	add	local16, local10
034d8     29 55 52 FC | 	wrword	local16, local15
034dc     1E 01 58 FC | 	wrword	#0, local04
034e0     1B 2F 02 F6 | 	mov	arg01, local01
034e4     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
034e8     E6 40 02 F6 | 	mov	local06, result1
034ec     1C 41 5A F2 | 	cmps	local06, local02 wcz
034f0     24 00 90 3D |  if_ae	jmp	#LR__0208
034f4     20 59 02 F6 | 	mov	local18, local06
034f8     04 58 06 F1 | 	add	local18, #4
034fc     1F 31 0A F6 | 	mov	arg02, local05 wz
03500     00 CC 05 A6 |  if_e	mov	result1, #0
03504     1D 31 82 51 |  if_ne	sub	arg02, local03
03508     04 30 46 50 |  if_ne	shr	arg02, #4
0350c     18 CD 01 56 |  if_ne	mov	result1, arg02
03510     E6 50 02 F6 | 	mov	local14, result1
03514     2C 51 52 FC | 	wrword	local14, local18
03518                 | LR__0208
03518     26 4F E2 FA | 	rdword	local13, local12
0351c     25 4F 52 FC | 	wrword	local13, local11
03520     26 01 58 FC | 	wrword	#0, local12
03524     1F 37 02 F6 | 	mov	local01, local05
03528                 | LR__0209
03528                 | LR__0210
03528     1B 2F 02 F6 | 	mov	arg01, local01
0352c     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
03530     E6 5A 0A F6 | 	mov	local19, result1 wz
03534     C4 00 90 AD |  if_e	jmp	#LR__0212
03538     1C 5B 5A F2 | 	cmps	local19, local02 wcz
0353c     BC 00 90 3D |  if_ae	jmp	#LR__0212
03540     2D 2F 02 F6 | 	mov	arg01, local19
03544     00 44 06 F6 | 	mov	local08, #0
03548     02 2E 06 F1 | 	add	arg01, #2
0354c     17 47 E2 FA | 	rdword	local09, arg01
03550     36 00 00 FF 
03554     8F 46 0E F2 | 	cmp	local09, ##27791 wz
03558     01 44 66 A6 |  if_e	neg	local08, #1
0355c     22 CD 09 F6 | 	mov	result1, local08 wz
03560     98 00 90 AD |  if_e	jmp	#LR__0212
03564     1B 3F 02 F6 | 	mov	local05, local01
03568     2D 37 02 F6 | 	mov	local01, local19
0356c     1F 5D 02 F6 | 	mov	local20, local05
03570     2E 5F E2 FA | 	rdword	local21, local20
03574     1B 61 02 F6 | 	mov	local22, local01
03578     30 49 E2 FA | 	rdword	local10, local22
0357c     24 5F 02 F1 | 	add	local21, local10
03580     2E 5F 52 FC | 	wrword	local21, local20
03584     1B 63 02 F6 | 	mov	local23, local01
03588     06 62 06 F1 | 	add	local23, #6
0358c     1F 65 02 F6 | 	mov	local24, local05
03590     31 4F E2 FA | 	rdword	local13, local23
03594     06 64 06 F1 | 	add	local24, #6
03598     32 4F 52 FC | 	wrword	local13, local24
0359c     1B 67 02 F6 | 	mov	local25, local01
035a0     02 66 06 F1 | 	add	local25, #2
035a4     33 55 59 FC | 	wrword	#170, local25
035a8     31 01 58 FC | 	wrword	#0, local23
035ac     1B 4F 02 F6 | 	mov	local13, local01
035b0     27 2F 02 F6 | 	mov	arg01, local13
035b4     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
035b8     E6 48 02 F6 | 	mov	local10, result1
035bc     24 41 0A F6 | 	mov	local06, local10 wz
035c0     38 00 90 AD |  if_e	jmp	#LR__0211
035c4     1C 41 5A F2 | 	cmps	local06, local02 wcz
035c8     30 00 90 3D |  if_ae	jmp	#LR__0211
035cc     20 69 02 F6 | 	mov	local26, local06
035d0     04 68 06 F1 | 	add	local26, #4
035d4     1D 4F 02 F6 | 	mov	local13, local03
035d8     1F 49 02 F6 | 	mov	local10, local05
035dc     27 2F 02 F6 | 	mov	arg01, local13
035e0     24 31 0A F6 | 	mov	arg02, local10 wz
035e4     00 CC 05 A6 |  if_e	mov	result1, #0
035e8     17 31 82 51 |  if_ne	sub	arg02, arg01
035ec     04 30 46 50 |  if_ne	shr	arg02, #4
035f0     18 CD 01 56 |  if_ne	mov	result1, arg02
035f4     E6 50 02 F6 | 	mov	local14, result1
035f8     34 51 52 FC | 	wrword	local14, local26
035fc                 | LR__0211
035fc                 | LR__0212
035fc     20 CD 01 F6 | 	mov	result1, local06
03600     AF F0 03 F6 | 	mov	ptra, fp
03604     BF 00 A0 FD | 	call	#popregs_
03608                 | __system___gc_dofree_ret
03608     2D 00 64 FD | 	ret
0360c                 | 
0360c                 | __system___gc_docollect
0360c     0C 5A 05 F6 | 	mov	COUNT_, #12
03610     B0 00 A0 FD | 	call	#pushregs_
03614     5C F9 BF FD | 	call	#__system___gc_ptrs
03618     E7 36 02 F6 | 	mov	local01, result2
0361c     E6 38 02 F6 | 	mov	local02, result1
03620     1C 2F 02 F6 | 	mov	arg01, local02
03624     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03628     E6 3A 0A F6 | 	mov	local03, result1 wz
0362c     01 CC 61 FD | 	cogid	result1
03630     E6 3C 02 F6 | 	mov	local04, result1
03634     2C 00 90 AD |  if_e	jmp	#LR__0214
03638                 | LR__0213
03638     1B 3B 5A F2 | 	cmps	local03, local01 wcz
0363c     24 00 90 3D |  if_ae	jmp	#LR__0214
03640     1D 3F 02 F6 | 	mov	local05, local03
03644     02 3E 06 F1 | 	add	local05, #2
03648     1F 41 E2 FA | 	rdword	local06, local05
0364c     20 40 26 F5 | 	andn	local06, #32
03650     1F 41 52 FC | 	wrword	local06, local05
03654     1D 2F 02 F6 | 	mov	arg01, local03
03658     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0365c     E6 3A 0A F6 | 	mov	local03, result1 wz
03660     D4 FF 9F 5D |  if_ne	jmp	#LR__0213
03664                 | LR__0214
03664     00 42 06 F6 | 	mov	local07, #0
03668     00 2E 06 F6 | 	mov	arg01, #0
0366c     80 F7 BF FD | 	call	#__system____topofstack
03670     E6 44 02 F6 | 	mov	local08, result1
03674     21 2F 02 F6 | 	mov	arg01, local07
03678     22 31 02 F6 | 	mov	arg02, local08
0367c     A0 00 B0 FD | 	call	#__system___gc_markhub
03680     2C 01 B0 FD | 	call	#__system___gc_markcog
03684     1C 2F 02 F6 | 	mov	arg01, local02
03688     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0368c     E6 46 0A F6 | 	mov	local09, result1 wz
03690     10 00 90 5D |  if_ne	jmp	#LR__0215
03694     1C 00 00 FF 
03698     55 2E 06 F6 | 	mov	arg01, ##@LR__0228
0369c     94 FB BF FD | 	call	#__system___gc_errmsg
036a0     70 00 90 FD | 	jmp	#LR__0221
036a4                 | LR__0215
036a4                 | LR__0216
036a4     23 3B 02 F6 | 	mov	local03, local09
036a8     1D 2F 02 F6 | 	mov	arg01, local03
036ac     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
036b0     E6 46 02 F6 | 	mov	local09, result1
036b4     1D 49 02 F6 | 	mov	local10, local03
036b8     02 48 06 F1 | 	add	local10, #2
036bc     24 4B E2 FA | 	rdword	local11, local10
036c0     20 4A CE F7 | 	test	local11, #32 wz
036c4     3C 00 90 5D |  if_ne	jmp	#LR__0219
036c8     25 4D 02 F6 | 	mov	local12, local11
036cc     10 4C 0E F5 | 	and	local12, #16 wz
036d0     30 00 90 5D |  if_ne	jmp	#LR__0219
036d4     25 43 02 F6 | 	mov	local07, local11
036d8     0F 42 06 F5 | 	and	local07, #15
036dc     21 4B 02 F6 | 	mov	local11, local07
036e0     1E 4B 0A F2 | 	cmp	local11, local04 wz
036e4     08 00 90 AD |  if_e	jmp	#LR__0217
036e8     0E 4A 0E F2 | 	cmp	local11, #14 wz
036ec     14 00 90 5D |  if_ne	jmp	#LR__0218
036f0                 | LR__0217
036f0     1D 43 02 F6 | 	mov	local07, local03
036f4     21 2F 02 F6 | 	mov	arg01, local07
036f8     E4 FC BF FD | 	call	#__system___gc_dofree
036fc     E6 4C 02 F6 | 	mov	local12, result1
03700     26 47 02 F6 | 	mov	local09, local12
03704                 | LR__0218
03704                 | LR__0219
03704     00 46 0E F2 | 	cmp	local09, #0 wz
03708     08 00 90 AD |  if_e	jmp	#LR__0220
0370c     1B 47 5A F2 | 	cmps	local09, local01 wcz
03710     90 FF 9F CD |  if_b	jmp	#LR__0216
03714                 | LR__0220
03714                 | LR__0221
03714     AF F0 03 F6 | 	mov	ptra, fp
03718     BF 00 A0 FD | 	call	#popregs_
0371c                 | __system___gc_docollect_ret
0371c     2D 00 64 FD | 	ret
03720                 | 
03720                 | __system___gc_markhub
03720     0A 5A 05 F6 | 	mov	COUNT_, #10
03724     B0 00 A0 FD | 	call	#pushregs_
03728     17 37 02 F6 | 	mov	local01, arg01
0372c     18 39 02 F6 | 	mov	local02, arg02
03730     40 F8 BF FD | 	call	#__system___gc_ptrs
03734     E6 3A 02 F6 | 	mov	local03, result1
03738     E7 3C 02 F6 | 	mov	local04, result2
0373c                 | LR__0222
0373c     1C 37 5A F2 | 	cmps	local01, local02 wcz
03740     60 00 90 3D |  if_ae	jmp	#LR__0223
03744     1B 33 02 FB | 	rdlong	arg03, local01
03748     04 36 06 F1 | 	add	local01, #4
0374c     1D 2F 02 F6 | 	mov	arg01, local03
03750     1E 31 02 F6 | 	mov	arg02, local04
03754     04 FC BF FD | 	call	#__system___gc_isvalidptr
03758     E6 3E 0A F6 | 	mov	local05, result1 wz
0375c     DC FF 9F AD |  if_e	jmp	#LR__0222
03760     1F 2F 02 F6 | 	mov	arg01, local05
03764     00 40 06 F6 | 	mov	local06, #0
03768     02 2E 06 F1 | 	add	arg01, #2
0376c     17 43 E2 FA | 	rdword	local07, arg01
03770     36 00 00 FF 
03774     8F 42 0E F2 | 	cmp	local07, ##27791 wz
03778     01 40 66 A6 |  if_e	neg	local06, #1
0377c     20 CD 01 F6 | 	mov	result1, local06
03780     E6 44 0A F6 | 	mov	local08, result1 wz
03784     B4 FF 9F 5D |  if_ne	jmp	#LR__0222
03788     1F 47 02 F6 | 	mov	local09, local05
0378c     02 46 06 F1 | 	add	local09, #2
03790     23 49 E2 FA | 	rdword	local10, local09
03794     0F 48 26 F5 | 	andn	local10, #15
03798     2E 48 46 F5 | 	or	local10, #46
0379c     23 49 52 FC | 	wrword	local10, local09
037a0     98 FF 9F FD | 	jmp	#LR__0222
037a4                 | LR__0223
037a4     AF F0 03 F6 | 	mov	ptra, fp
037a8     BF 00 A0 FD | 	call	#popregs_
037ac                 | __system___gc_markhub_ret
037ac     2D 00 64 FD | 	ret
037b0                 | 
037b0                 | __system___gc_markcog
037b0     06 5A 05 F6 | 	mov	COUNT_, #6
037b4     B0 00 A0 FD | 	call	#pushregs_
037b8     B8 F7 BF FD | 	call	#__system___gc_ptrs
037bc     E6 36 02 F6 | 	mov	local01, result1
037c0     E7 38 02 F6 | 	mov	local02, result2
037c4     00 3A 06 F6 | 	mov	local03, #0
037c8                 | LR__0224
037c8     F0 3D 06 F6 | 	mov	local04, #496
037cc     1D 3D 82 F1 | 	sub	local04, local03
037d0     F0 3D 06 F1 | 	add	local04, #496
037d4                 | 	'.live	local04
037d4     00 3C 96 F9 | 	alts	local04, #0
037d8     1E 3F 02 F6 | 	mov	local05, local04
037dc     1C 31 02 F6 | 	mov	arg02, local02
037e0     1B 2F 02 F6 | 	mov	arg01, local01
037e4     1F 33 02 F6 | 	mov	arg03, local05
037e8     70 FB BF FD | 	call	#__system___gc_isvalidptr
037ec     E6 3E 0A F6 | 	mov	local05, result1 wz
037f0     10 00 90 AD |  if_e	jmp	#LR__0225
037f4     02 3E 06 F1 | 	add	local05, #2
037f8     1F 41 E2 FA | 	rdword	local06, local05
037fc     20 40 46 F5 | 	or	local06, #32
03800     1F 41 52 FC | 	wrword	local06, local05
03804                 | LR__0225
03804     01 3A 06 F1 | 	add	local03, #1
03808     F0 3B 5E F2 | 	cmps	local03, #496 wcz
0380c     B8 FF 9F CD |  if_b	jmp	#LR__0224
03810     AF F0 03 F6 | 	mov	ptra, fp
03814     BF 00 A0 FD | 	call	#popregs_
03818                 | __system___gc_markcog_ret
03818     2D 00 64 FD | 	ret
0381c                 | 
0381c                 | LR__0226
0381c     20 21 21 21 
03820     20 63 6F 72 
03824     72 75 70 74 
03828     65 64 20 68 
0382c     65 61 70 3F 
03830     3F 3F 20 21 
03834     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03837     00          | 	byte	0
03838                 | LR__0227
03838     20 21 21 21 
0383c     20 6F 75 74 
03840     20 6F 66 20 
03844     68 65 61 70 
03848     20 6D 65 6D 
0384c     6F 72 79 20 
03850     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03854     00          | 	byte	0
03855                 | LR__0228
03855     20 21 21 21 
03859     20 63 6F 72 
0385d     72 75 70 74 
03861     65 64 20 68 
03865     65 61 70 20 
03869     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0386d     00          | 	byte	0
0386e                 | LR__0229
0386e     20          | 	byte	" "
0386f     00          | 	byte	0
03870                 | LR__0230
03870     20 20 50 32 
03874     20 52 65 74 
03878     72 6F 6D 61 
0387c     63 68 69 6E 
03880     65 20 76 2E 
03884     20 30 2E 30 
03888     30          | 	byte	"  P2 Retromachine v. 0.00"
03889     00          | 	byte	0
0388a                 | LR__0231
0388a     20          | 	byte	" "
0388b     00          | 	byte	0
0388c                 | LR__0232
0388c     20 20 52 65 
03890     61 64 79    | 	byte	"  Ready"
03893     00          | 	byte	0
03894                 | LR__0233
03894     20          | 	byte	" "
03895     00          | 	byte	0
03896                 | LR__0234
03896     20 20       | 	byte	"  "
03898     00          | 	byte	0
03899                 | LR__0235
03899     43 3A 5C 6B 
0389d     65 72 6E 65 
038a1     6C 2E 69 6D 
038a5     67          | 	byte	"C:\kernel.img"
038a6     00          | 	byte	0
038a7                 | LR__0236
038a7     20 4D 69 64 
038ab     69 3A 20    | 	byte	" Midi: "
038ae     00          | 	byte	0
038af                 | LR__0237
038af     20 20 4D 6F 
038b3     75 73 65 20 
038b7     6D 6F 76 65 
038bb     64 2C 20 78 
038bf     3D 20       | 	byte	"  Mouse moved, x= "
038c1     00          | 	byte	0
038c2                 | LR__0238
038c2     2C 20 79 3D 
038c6     20          | 	byte	", y= "
038c7     00          | 	byte	0
038c8                 | LR__0239
038c8     20 20 4D 6F 
038cc     75 73 65 20 
038d0     6D 6F 76 65 
038d4     64 2C 20 78 
038d8     3D 20       | 	byte	"  Mouse moved, x= "
038da     00          | 	byte	0
038db                 | LR__0240
038db     2C 20 79 3D 
038df     20          | 	byte	", y= "
038e0     00          | 	byte	0
038e1                 | LR__0241
038e1     20 20 4D 6F 
038e5     75 73 65 20 
038e9     77 68 65 65 
038ed     6C 3A 20    | 	byte	"  Mouse wheel: "
038f0     00          | 	byte	0
038f1                 | LR__0242
038f1     20 20 4D 6F 
038f5     75 73 65 20 
038f9     6B 65 79 20 
038fd     70 72 65 73 
03901     73 65 64 3A 
03905     20          | 	byte	"  Mouse key pressed: "
03906     00          | 	byte	0
03907                 | LR__0243
03907     20 20 4D 6F 
0390b     75 73 65 20 
0390f     63 6C 69 63 
03913     6B 65 64    | 	byte	"  Mouse clicked"
03916     00          | 	byte	0
03917                 | LR__0244
03917     20 20 4D 6F 
0391b     75 73 65 20 
0391f     64 6F 75 62 
03923     6C 65 20 63 
03927     6C 69 63 6B 
0392b     65 64       | 	byte	"  Mouse double clicked"
0392d     00          | 	byte	0
0392e                 | LR__0245
0392e     20 20 4B 65 
03932     79 20 73 63 
03936     61 6E 63 6F 
0393a     64 65 20    | 	byte	"  Key scancode "
0393d     00          | 	byte	0
0393e                 | LR__0246
0393e     20 72 65 6C 
03942     65 61 73 65 
03946     64          | 	byte	" released"
03947     00          | 	byte	0
03948                 | LR__0247
03948     20 20 4B 65 
0394c     79 20 73 63 
03950     61 6E 63 6F 
03954     64 65 20    | 	byte	"  Key scancode "
03957     00          | 	byte	0
03958                 | LR__0248
03958     2C 20 63 68 
0395c     61 72 63 6F 
03960     64 65 20    | 	byte	", charcode "
03963     00          | 	byte	0
03964                 | LR__0249
03964     20 70 72 65 
03968     73 73 65 64 | 	byte	" pressed"
0396c     00          | 	byte	0
0396d                 | LR__0250
0396d     20 20 4B 65 
03971     79 20 6D 6F 
03975     64 69 66 69 
03979     65 72 20    | 	byte	"  Key modifier "
0397c     00          | 	byte	0
0397d                 | LR__0251
0397d     20 70 72 65 
03981     73 73 65 64 | 	byte	" pressed"
03985     00          | 	byte	0
03986                 | LR__0252
03986     20 20 4D 6F 
0398a     64 69 66 69 
0398e     65 72 73 20 
03992     72 65 6C 65 
03996     61 73 65 64 | 	byte	"  Modifiers released"
0399a     00          | 	byte	0
0399b     00          | 	alignl
0399c                 | _hng030rm_dat_
0399c     00 00 00 00 
039a0     00 00 00 00 
039a4     00 00 00 00 
039a8     00 00 00 00 
039ac     00 00 00    | vga_font       file "vgafont.def"
039af     7E 81 A5 81 
039b3     81 BD 99 81 
039b7     81 7E 00 00 
039bb     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
039bf     7E FF DB FF 
039c3     FF C3 E7 FF 
039c7     FF 7E 00 00 
039cb     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
039cf     00 36 7F 7F 
039d3     7F 7F 3E 1C 
039d7     08 00 00 00 
039db     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
039df     00 08 1C 3E 
039e3     7F 3E 1C 08 
039e7     00 00 00 00 
039eb     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
039ef     18 3C 3C E7 
039f3     E7 E7 18 18 
039f7     3C 00 00 00 
039fb     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
039ff     18 3C 7E FF 
03a03     FF 7E 18 18 
03a07     3C 00 00 00 
03a0b     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03a0f     00 00 00 18 
03a13     3C 3C 18 00 
03a17     00 00 00 00 
03a1b     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
03a1f     FF FF FF E7 
03a23     C3 C3 E7 FF 
03a27     FF FF FF FF 
03a2b     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03a2f     00 00 3C 66 
03a33     42 42 66 3C 
03a37     00 00 00 00 
03a3b     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
03a3f     FF FF C3 99 
03a43     BD BD 99 C3 
03a47     FF FF FF FF 
03a4b     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03a4f     78 70 58 4C 
03a53     1E 33 33 33 
03a57     33 1E 00 00 
03a5b     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
03a5f     3C 66 66 66 
03a63     66 3C 18 7E 
03a67     18 18 00 00 
03a6b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
03a6f     FC CC FC 0C 
03a73     0C 0C 0C 0E 
03a77     0F 07 00 00 
03a7b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
03a7f     FE C6 FE C6 
03a83     C6 C6 C6 E6 
03a87     E7 67 03 00 
03a8b     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
03a8f     18 18 DB 3C 
03a93     E7 3C DB 18 
03a97     18 00 00 00 
03a9b     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
03a9f     03 07 0F 1F 
03aa3     7F 1F 0F 07 
03aa7     03 01 00 00 
03aab     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
03aaf     60 70 78 7C 
03ab3     7F 7C 78 70 
03ab7     60 40 00 00 
03abb     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
03abf     18 3C 7E 18 
03ac3     18 18 7E 3C 
03ac7     18 00 00 00 
03acb     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03acf     66 66 66 66 
03ad3     66 66 66    | 	byte	$66[7]
03ad6     00 66 66 00 
03ada     00 00 00 00 
03ade     00 FE DB DB 
03ae2     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03ae6     D8 D8 D8 00 
03aea     00 00 00 3E 
03aee     63 06 1C 36 
03af2     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03af6     30 63 3E 00 
03afa     00 00 00 00 
03afe     00 00 00 00 
03b02     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03b06     7F 7F 7F 00 
03b0a     00 00 00 00 
03b0e     00 18 3C 7E 
03b12     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03b16     3C 18 7E 00 
03b1a     00 00 00 00 
03b1e     00 18 3C 7E 
03b22     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03b26     18 18 18 00 
03b2a     00 00 00 00 
03b2e     00 18 18 18 
03b32     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03b36     7E 3C 18 00 
03b3a     00 00 00 00 
03b3e     00 00 00 18 
03b42     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03b46     00 00 00 00 
03b4a     00 00 00 00 
03b4e     00 00 00    | 	byte	$00[11]
03b51     0C 06 7F 06 
03b55     0C 00 00 00 
03b59     00 00 00 00 
03b5d     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b61     00 03 03 03 
03b65     7F 00 00 00 
03b69     00 00 00 00 
03b6d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b71     14 36 7F 36 
03b75     14 00 00 00 
03b79     00 00 00 00 
03b7d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03b81     1C 1C 3E 3E 
03b85     7F 7F 00 00 
03b89     00 00 00 00 
03b8d     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03b91     7F 3E 3E 1C 
03b95     1C 08 00 00 
03b99     00 00 00 00 
03b9d     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03ba1     00 00 00 00 
03ba5     00 00 00 00 
03ba9     00 00 00 00 
03bad     00 00       | 	byte	$00[14]
03baf     18 3C 3C 3C 
03bb3     18 18 18 00 
03bb7     18 18 00 00 
03bbb     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03bbf     66 24 00 00 
03bc3     00 00 00 00 
03bc7     00 00 00 00 
03bcb     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03bcf     00 36 36 7F 
03bd3     36 36 36 7F 
03bd7     36 36 00 00 
03bdb     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03bdf     3E 63 43 03 
03be3     3E 60 60 61 
03be7     63 3E 18 18 
03beb     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03bef     00 00 43 63 
03bf3     30 18 0C 06 
03bf7     63 61 00 00 
03bfb     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
03bff     1C 36 36 1C 
03c03     6E 3B 33 33 
03c07     33 6E 00 00 
03c0b     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
03c0f     0C 0C 0C 06 
03c13     00 00 00 00 
03c17     00 00 00 00 
03c1b     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c1f     30 18 0C 0C 
03c23     0C 0C 0C 0C 
03c27     18 30 00 00 
03c2b     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
03c2f     0C 18 30 30 
03c33     30 30 30 30 
03c37     18 0C 00 00 
03c3b     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
03c3f     00 00 00 66 
03c43     3C FF 3C 66 
03c47     00 00 00 00 
03c4b     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
03c4f     00 00 00 18 
03c53     18 7E 18 18 
03c57     00 00 00 00 
03c5b     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
03c5f     00 00 00 00 
03c63     00 00 00 00 | 	byte	$00[8]
03c67     18 18 18 0C 
03c6b     00 00 00 00 
03c6f     00 00 00 00 
03c73     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03c77     00 00 00 00 
03c7b     00 00 00 00 
03c7f     00 00 00 00 
03c83     00 00 00 00 | 	byte	$00[16]
03c87     18 18 00 00 
03c8b     00 00 00 00 
03c8f     00 00 40 60 
03c93     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03c97     03 01 00 00 
03c9b     00 00 00 00 
03c9f     1C 36 63 63 
03ca3     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03ca7     36 1C 00 00 
03cab     00 00 00 00 
03caf     18 1C 1E 18 
03cb3     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03cb7     18 7E 00 00 
03cbb     00 00 00 00 
03cbf     3E 63 60 30 
03cc3     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03cc7     63 7F 00 00 
03ccb     00 00 00 00 
03ccf     3E 63 60 60 
03cd3     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03cd7     63 3E 00 00 
03cdb     00 00 00 00 
03cdf     30 38 3C 36 
03ce3     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03ce7     30 78 00 00 
03ceb     00 00 00 00 
03cef     7F 03 03 03 
03cf3     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03cf7     63 3E 00 00 
03cfb     00 00 00 00 
03cff     1C 06 03 03 
03d03     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03d07     63 3E 00 00 
03d0b     00 00 00 00 
03d0f     7F 63 60 60 
03d13     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03d17     0C 0C 00 00 
03d1b     00 00 00 00 
03d1f     3E 63 63 63 
03d23     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03d27     63 3E 00 00 
03d2b     00 00 00 00 
03d2f     3E 63 63 63 
03d33     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03d37     30 1E 00 00 
03d3b     00 00 00 00 
03d3f     00 00 00 18 
03d43     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03d47     18 18 00 00 
03d4b     00 00 00 00 
03d4f     00 00 00 18 
03d53     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03d57     18 18 0C 00 
03d5b     00 00 00 00 
03d5f     00 60 30 18 
03d63     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03d67     30 60 00 00 
03d6b     00 00 00 00 
03d6f     00 00 00 7E 
03d73     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03d77     00 00 00 00 
03d7b     00 00 00 00 
03d7f     00          | 	byte	$00[9]
03d80     06 0C 18 30 
03d84     60 30 18 0C 
03d88     06 00 00 00 
03d8c     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03d90     63 63 30 18 
03d94     18 18 00 18 
03d98     18 00 00 00 
03d9c     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03da0     3E 63 63 7B 
03da4     7B 7B 3B 03 
03da8     3E 00 00 00 
03dac     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03db0     1C 36 63 63 
03db4     7F 63 63 63 
03db8     63 00 00 00 
03dbc     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03dc0     66 66 66 3E 
03dc4     66 66 66 66 
03dc8     3F 00 00 00 
03dcc     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03dd0     66 43 03 03 
03dd4     03 03 43 66 
03dd8     3C 00 00 00 
03ddc     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03de0     36 66 66 66 
03de4     66 66 66 36 
03de8     1F 00 00 00 
03dec     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03df0     66 46 16 1E 
03df4     16 06 46 66 
03df8     7F 00 00 00 
03dfc     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03e00     66 46 16 1E 
03e04     16 06 06 06 
03e08     0F 00 00 00 
03e0c     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03e10     66 43 03 03 
03e14     7B 63 63 66 
03e18     5C 00 00 00 
03e1c     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03e20     63 63 63 7F 
03e24     63 63 63 63 
03e28     63 00 00 00 
03e2c     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03e30     18 18 18 18 
03e34     18 18 18 18 | 	byte	$18[8]
03e38     3C 00 00 00 
03e3c     00 00 00 78 
03e40     30 30 30 30 
03e44     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03e48     1E 00 00 00 
03e4c     00 00 00 67 
03e50     66 66 36 1E 
03e54     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03e58     67 00 00 00 
03e5c     00 00 00 0F 
03e60     06 06 06 06 
03e64     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03e68     7F 00 00 00 
03e6c     00 00 00 63 
03e70     77 7F 7F 6B 
03e74     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
03e78     63 00 00 00 
03e7c     00 00 00 63 
03e80     67 6F 7F 7B 
03e84     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
03e88     63 00 00 00 
03e8c     00 00 00 3E 
03e90     63 63 63 63 
03e94     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03e98     3E 00 00 00 
03e9c     00 00 00 3F 
03ea0     66 66 66 3E 
03ea4     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
03ea8     0F 00 00 00 
03eac     00 00 00 3E 
03eb0     63 63 63 63 
03eb4     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
03eb8     3E 30 70 00 
03ebc     00 00 00 3F 
03ec0     66 66 66 3E 
03ec4     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
03ec8     67 00 00 00 
03ecc     00 00 00 3E 
03ed0     63 63 06 1C 
03ed4     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03ed8     3E 00 00 00 
03edc     00 00 00 7E 
03ee0     7E 5A 18 18 
03ee4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03ee8     3C 00 00 00 
03eec     00 00 00 63 
03ef0     63 63 63 63 
03ef4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03ef8     3E 00 00 00 
03efc     00 00 00 63 
03f00     63 63 63 63 
03f04     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
03f08     08 00 00 00 
03f0c     00 00 00 63 
03f10     63 63 63 6B 
03f14     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
03f18     36 00 00 00 
03f1c     00 00 00 63 
03f20     63 36 3E 1C 
03f24     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
03f28     63 00 00 00 
03f2c     00 00 00 66 
03f30     66 66 66 3C 
03f34     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
03f38     3C 00 00 00 
03f3c     00 00 00 7F 
03f40     63 61 30 18 
03f44     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03f48     7F 00 00 00 
03f4c     00 00 00 3C 
03f50     0C 0C 0C 0C 
03f54     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
03f58     3C 00 00 00 
03f5c     00 00 00 00 
03f60     01 03 07 0E 
03f64     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
03f68     40 00 00 00 
03f6c     00 00 00 3C 
03f70     30 30 30 30 
03f74     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
03f78     3C 00 00 00 
03f7c     1C 36 00 00 
03f80     00 00 00 00 
03f84     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f88     00 00 00 00 
03f8c     00 00 00 00 
03f90     00 00 00 00 
03f94     00 00 00 00 
03f98     00          | 	byte	$00[17]
03f99     FF 00 00 0C 
03f9d     18 00 00 00 
03fa1     00 00 00 00 
03fa5     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03fa9     00 00 00 00 
03fad     00 00 00 00 
03fb1     00          | 	byte	$00[9]
03fb2     1E 30 3E 33 
03fb6     33 33 6E 00 
03fba     00 00 00 00 
03fbe     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03fc2     1E 36 66 66 
03fc6     66 66 3E 00 
03fca     00 00 00 00 
03fce     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03fd2     3E 63 03 03 
03fd6     03 63 3E 00 
03fda     00 00 00 00 
03fde     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03fe2     3C 36 33 33 
03fe6     33 33 6E 00 
03fea     00 00 00 00 
03fee     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03ff2     3E 63 7F 03 
03ff6     03 63 3E 00 
03ffa     00 00 00 00 
03ffe     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
04002     0C 1E 0C 0C 
04006     0C 0C 1E 00 
0400a     00 00 00 00 
0400e     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04012     6E 33 33 33 
04016     33 33 3E 30 
0401a     33 1E 00 00 
0401e     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
04022     36 6E 66 66 
04026     66 66 67 00 
0402a     00 00 00 00 
0402e     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
04032     1C 18 18 18 
04036     18 18 3C 00 
0403a     00 00 00 00 
0403e     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
04042     70 60 60 60 
04046     60 60 60 66 
0404a     66 3C 00 00 
0404e     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
04052     66 36 1E 1E 
04056     36 66 67 00 
0405a     00 00 00 00 
0405e     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
04062     18 18 18 18 
04066     18 18       | 	byte	$18[6]
04068     3C 00 00 00 
0406c     00 00 00 00 
04070     00 00 37 7F 
04074     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
04078     63 00 00 00 
0407c     00 00 00 00 
04080     00 00 3B 66 
04084     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
04088     66 00 00 00 
0408c     00 00 00 00 
04090     00 00 3E 63 
04094     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
04098     3E 00 00 00 
0409c     00 00 00 00 
040a0     00 00 3B 66 
040a4     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
040a8     3E 06 06 0F 
040ac     00 00 00 00 
040b0     00 00 6E 33 
040b4     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
040b8     3E 30 30 78 
040bc     00 00 00 00 
040c0     00 00 3B 6E 
040c4     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
040c8     0F 00 00 00 
040cc     00 00 00 00 
040d0     00 00 3E 63 
040d4     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
040d8     3E 00 00 00 
040dc     00 00 00 08 
040e0     0C 0C 3F 0C 
040e4     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
040e8     38 00 00 00 
040ec     00 00 00 00 
040f0     00 00 33 33 
040f4     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
040f8     6E 00 00 00 
040fc     00 00 00 00 
04100     00 00 63 63 
04104     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
04108     1C 00 00 00 
0410c     00 00 00 00 
04110     00 00 63 63 
04114     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
04118     36 00 00 00 
0411c     00 00 00 00 
04120     00 00 63 36 
04124     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
04128     63 00 00 00 
0412c     00 00 00 00 
04130     00 00 63 63 
04134     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
04138     7E 60 30 1F 
0413c     00 00 00 00 
04140     00 00 7F 33 
04144     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
04148     7F 00 00 00 
0414c     00 00 00 70 
04150     18 18 18 0E 
04154     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
04158     70 00 00 00 
0415c     00 00 00 18 
04160     18 18 18 18 
04164     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
04168     18 00 00 00 
0416c     00 00 00 0E 
04170     18 18 18 70 
04174     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
04178     0E 00 00 00 
0417c     6E 3B 00 00 
04180     00 00 00 00 
04184     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04188     00 00 00 00 
0418c     00 00 00 00 
04190     00 00       | 	byte	$00[10]
04192     08 1C 36 63 
04196     63 63 7F 00 
0419a     00 00 00 00 
0419e     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
041a2     03 03 03 03 
041a6     43 66 3C 18 
041aa     30 1E 00 00 
041ae     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
041b2     33 33 33 33 
041b6     33 33       | 	byte	$33[6]
041b8     6E 00 00 00 
041bc     00 00 60 30 
041c0     18 00 3E 63 
041c4     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
041c8     3E 00 00 00 
041cc     00 00 08 1C 
041d0     36 00 1E 30 
041d4     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
041d8     6E 00 00 00 
041dc     00 00 00 00 
041e0     33 00 1E 30 
041e4     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
041e8     6E 00 00 00 
041ec     00 00 1C 36 
041f0     1C 00 33 33 
041f4     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
041f8     6E 00 00 00 
041fc     00 00 60 30 
04200     18 00 3E 63 
04204     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
04208     3E 00 00 00 
0420c     00 00 00 00 
04210     00 00 3E 63 
04214     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
04218     3E 18 30 1E 
0421c     00 00 00 1C 
04220     58 78 38 18 
04224     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
04228     3C 00 00 00 
0422c     00 00 00 00 
04230     63 00 3E 63 
04234     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
04238     3E 00 00 00 
0423c     66 33 00 3E 
04240     63 63 63 63 
04244     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04248     3E 00 00 00 
0424c     00 00 CC 66 
04250     33 00 3E 63 
04254     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
04258     3E 00 00 00 
0425c     00 00 18 3C 
04260     66 00 1C 18 
04264     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
04268     3C 00 00 00 
0426c     30 18 00 7F 
04270     63 61 30 18 
04274     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04278     7F 00 00 00 
0427c     00 63 00 08 
04280     1C 36 63 63 
04284     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
04288     63 00 00 00 
0428c     30 18 00 3C 
04290     66 43 03 03 
04294     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
04298     3C 00 00 00 
0429c     30 18 00 7F 
042a0     66 46 16 1E 
042a4     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
042a8     7F 00 00 00 
042ac     0C 06 00 0F 
042b0     06 06 06 06 
042b4     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
042b8     7F 00 00 00 
042bc     30 18 00 1C 
042c0     18 18 18 18 
042c4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
042c8     3C 00 00 00 
042cc     00 00 08 1C 
042d0     36 00 3E 63 
042d4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
042d8     3E 00 00 00 
042dc     00 00 00 00 
042e0     63 00 3E 63 
042e4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
042e8     3E 00 00 00 
042ec     00 00 00 6F 
042f0     46 26 06 06 
042f4     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
042f8     7F 00 00 00 
042fc     00 00 00 6E 
04300     4C 2C 0C 0C 
04304     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04308     1E 00 00 00 
0430c     30 18 00 3E 
04310     63 63 06 1C 
04314     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04318     3E 00 00 00 
0431c     00 00 60 30 
04320     18 00 3E 63 
04324     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
04328     3E 00 00 00 
0432c     00 63 00 3E 
04330     63 63 63 63 
04334     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04338     3E 00 00 00 
0433c     00 63 00 63 
04340     63 63 63 63 
04344     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04348     3E 00 00 00 
0434c     6C 38 00 7E 
04350     7E 5A 18 18 
04354     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04358     3C 00 00 00 
0435c     00 00 60 48 
04360     2C 0C 3F 0C 
04364     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04368     38 00 00 00 
0436c     00 00 00 0F 
04370     26 36 1E 0E 
04374     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04378     7F 00 00 00 
0437c     00 00 00 00 
04380     00 63 36 1C 
04384     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04388     00 00 00 00 
0438c     00 00       | 	byte	$00[6]
0438e     36 1C 08 00 
04392     3E 63 03 03 
04396     03 63 3E 00 
0439a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0439e     30 18 0C 00 
043a2     1E 30 3E 33 
043a6     33 33 6E 00 
043aa     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
043ae     60 30 18 00 
043b2     1C 18 18 18 
043b6     18 18 3C 00 
043ba     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
043be     60 30 18 00 
043c2     3E 63 63 63 
043c6     63 63 3E 00 
043ca     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
043ce     30 18 0C 00 
043d2     33 33 33 33 
043d6     33 33 6E 00 
043da     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
043de     00 08 1C 36 
043e2     63 63 7F 63 
043e6     63 63 63 18 
043ea     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
043ee     00 00 00 00 
043f2     1E 30 3E 33 
043f6     33 33 6E 18 
043fa     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
043fe     00 7F 63 61 
04402     30 18 0C 06 
04406     43 63 7F 00 
0440a     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0440e     36 1C 08 00 
04412     7F 33 18 0C 
04416     06 63 7F 00 
0441a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
0441e     00 7F 66 46 
04422     16 1E 16 06 
04426     46 66 7F 18 
0442a     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0442e     00 00 00 00 
04432     3E 63 7F 03 
04436     03 63 3E 18 
0443a     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0443e     00 3C 66 03 
04442     1F 03 0F 03 
04446     03 66 3C 00 
0444a     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0444e     60 30 18 00 
04452     7F 33 18 0C 
04456     06 63 7F 00 
0445a     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0445e     00 3C 66 43 
04462     03 03 03 03 
04466     43 66 3C 00 
0446a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0446e     00 00 00 00 
04472     3E 63 06 1C 
04476     30 63 3E 18 
0447a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0447e     00 00 00 00 
04482     00 00       | 	byte	$00[6]
04484     6C 36 1B 36 
04488     6C 00 00 00 
0448c     00 00 00 00 
04490     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04494     1B 36 6C 36 
04498     1B 00 00 00 
0449c     88 22 88 22 
044a0     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
044a4     88 22 88 22 
044a8     88 22 88 22 
044ac     AA 55 AA 55 
044b0     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
044b4     AA 55 AA 55 
044b8     AA 55 AA 55 
044bc     BB EE BB EE 
044c0     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
044c4     BB EE BB EE 
044c8     BB EE BB EE 
044cc     18 18 18 18 
044d0     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
044d4     18 18 18 18 
044d8     18 18 18 18 
044dc     18 18 18 18 
044e0     18 18 18    | 	byte	$18[15]
044e3     1F 18 18 18 
044e7     18 18 18 18 
044eb     18 30 18 00 
044ef     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
044f3     63 7F 63 63 
044f7     63 63 00 00 
044fb     00 1C 36 00 
044ff     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
04503     63 7F 63 63 
04507     63 63 00 00 
0450b     00 36 1C 00 
0450f     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
04513     1E 16 06 46 
04517     66 7F 00 00 
0451b     00 00 00 00 
0451f     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
04523     1C 30 60 63 
04527     63 3E 18 30 
0452b     1E 6C 6C 6C 
0452f     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
04533     6F 6C 6C 6C 
04537     6C 6C 6C 6C 
0453b     6C 6C 6C 6C 
0453f     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04543     6C 6C 6C 6C 
04547     6C 6C 6C 6C 
0454b     6C          | 	byte	$6c[9]
0454c     00 00 00 00 
04550     00          | 	byte	$00[5]
04551     7F 60 6F 6C 
04555     6C 6C 6C 6C 
04559     6C 6C 6C 6C 
0455d     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04561     6F 60 7F 00 
04565     00 00 00 00 
04569     00 00 00 18 
0456d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04571     61 30 18 0C 
04575     06 43 63 7F 
04579     00 00 00 00 
0457d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04581     00 7F 33 18 
04585     0C 06 63 7F 
04589     00 00 00 00 
0458d     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04591     00 00 1F 18 
04595     18 18 18 18 
04599     18 18 18 18 
0459d     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
045a1     18 18 F8 00 
045a5     00 00 00 00 
045a9     00 00 00 18 
045ad     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
045b1     18 18 FF 00 
045b5     00 00 00 00 
045b9     00 00 00 00 
045bd     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045c1     00 00 FF 18 
045c5     18 18 18 18 
045c9     18 18 18 18 
045cd     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
045d1     18 18 F8 18 
045d5     18 18 18 18 
045d9     18 18 18 00 
045dd     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
045e1     00 00 FF 00 
045e5     00 00 00 00 
045e9     00 00 00 18 
045ed     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
045f1     18 18 FF 18 
045f5     18 18 18 18 
045f9     18 18 18 63 
045fd     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
04601     36 63 63 7F 
04605     63 63 63 63 
04609     00 00 00 00 
0460d     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
04611     00 1E 30 3E 
04615     33 33 33 6E 
04619     00 00 00 6C 
0461d     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04621     EC 0C FC 00 
04625     00 00 00 00 
04629     00 00 00 00 
0462d     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04631     FC 0C EC 6C 
04635     6C 6C 6C 6C 
04639     6C 6C 6C 6C 
0463d     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04641     EF 00 FF 00 
04645     00 00 00 00 
04649     00 00 00 00 
0464d     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04651     FF 00 EF 6C 
04655     6C 6C 6C 6C 
04659     6C 6C 6C 6C 
0465d     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04661     EC 0C EC 6C 
04665     6C 6C 6C 6C 
04669     6C 6C 6C 00 
0466d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04671     FF 00 FF 00 
04675     00 00 00 00 
04679     00 00 00 6C 
0467d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04681     EF 00 EF 6C 
04685     6C 6C 6C 6C 
04689     6C 6C 6C 00 
0468d     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04691     63 3E 63 63 
04695     63 63 3E 63 
04699     00 00 00 00 
0469d     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
046a1     30 3C 36 33 
046a5     33 33 33 6E 
046a9     00 00 00 00 
046ad     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
046b1     66 66 6F 66 
046b5     66 66 36 1F 
046b9     00 00 00 36 
046bd     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
046c1     66 66 66 66 
046c5     66 66       | 	byte	$66[6]
046c7     36 1F 00 00 
046cb     00 00 63 00 
046cf     7F 66 46 16 
046d3     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
046d7     66 7F 00 00 
046db     00 6C 38 00 
046df     38 30 30 3C 
046e3     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
046e7     33 6E 00 00 
046eb     00 36 1C 00 
046ef     63 67 6F 7F 
046f3     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
046f7     63 63 00 00 
046fb     00 30 18 00 
046ff     3C 18 18 18 
04703     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04707     18 3C 00 00 
0470b     00 3C 66 00 
0470f     3C 18 18 18 
04713     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04717     18 3C 00 00 
0471b     00 00 00 36 
0471f     1C 08 00 3E 
04723     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
04727     63 3E 00 00 
0472b     00 18 18 18 
0472f     18 18 18 18 
04733     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
04737     00 00 00 00 
0473b     00 00 00 00 
0473f     00 00 00 00 | 	byte	$00[12]
04743     F8 18 18 18 
04747     18 18 18 18 
0474b     18 FF FF FF 
0474f     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
04753     FF FF FF FF 
04757     FF FF FF FF 
0475b     FF          | 	byte	$ff[9]
0475c     00 00 00 00 
04760     00 00 00    | 	byte	$00[7]
04763     FF FF FF FF 
04767     FF FF FF FF 
0476b     FF          | 	byte	$ff[9]
0476c     00 00 00 7E 
04770     7E 5A 18 18 
04774     18 18 18 18 
04778     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0477c     1C 36 1C 63 
04780     63 63 63 63 
04784     63 63 63 63 
04788     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0478c     FF FF FF FF 
04790     FF FF FF    | 	byte	$ff[7]
04793     00 00 00 00 
04797     00 00 00 00 
0479b     00          | 	byte	$00[9]
0479c     30 18 00 3E 
047a0     63 63 63 63 
047a4     63 63 63 63 
047a8     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
047ac     00 00 00 1E 
047b0     33 33 33 1B 
047b4     33 63 63 63 
047b8     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
047bc     1C 36 00 3E 
047c0     63 63 63 63 
047c4     63 63 63 63 
047c8     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
047cc     30 18 00 63 
047d0     67 6F 7F 7B 
047d4     73 63 63 63 
047d8     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
047dc     00 00 60 30 
047e0     18 00 3B 66 
047e4     66 66 66 66 
047e8     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
047ec     00 00 36 1C 
047f0     08 00 3B 66 
047f4     66 66 66 66 
047f8     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
047fc     36 1C 00 3E 
04800     63 63 06 1C 
04804     30 60 63 63 
04808     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
0480c     00 00 36 1C 
04810     08 00 3E 63 
04814     06 1C 30 63 
04818     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
0481c     30 18 00 3F 
04820     66 66 66 3E 
04824     36 66 66 66 
04828     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
0482c     30 18 00 63 
04830     63 63 63 63 
04834     63 63 63 63 
04838     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0483c     00 00 60 30 
04840     18 00 3B 6E 
04844     66 06 06 06 
04848     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
0484c     66 33 00 63 
04850     63 63 63 63 
04854     63 63 63 63 
04858     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0485c     00 00 60 30 
04860     18 00 63 63 
04864     63 63 63 63 
04868     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
0486c     30 18 00 66 
04870     66 66 66 3C 
04874     18 18 18 18 
04878     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
0487c     00 00 00 08 
04880     0C 0C 3F 0C 
04884     0C 0C 0C 6C 
04888     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
0488c     30 18 00 00 
04890     00 00 00 00 
04894     00 00 00 00 
04898     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0489c     00 00 00 00 
048a0     00 00 00 00 | 	byte	$00[8]
048a4     7F 00 00 00 
048a8     00 00 00 00 
048ac     66 33 00 00 
048b0     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
048b4     00 00 00 00 
048b8     00 00 00 00 
048bc     00 00 00 00 
048c0     00 00 00 00 
048c4     00 00 00 00 
048c8     00          | 	byte	$00[21]
048c9     0C 06 3C 36 
048cd     1C 00 00 00 
048d1     00 00 00 00 
048d5     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
048d9     00 00 00 63 
048dd     3E 00 00 00 
048e1     00 00 00 00 
048e5     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
048e9     00 00 00 00 
048ed     3E 63 06 1C 
048f1     36 63 63 36 
048f5     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
048f9     00 00 00 00 
048fd     00 00 00 00 | 	byte	$00[8]
04901     18 00 7E 00 
04905     18 00 00 00 
04909     00 00 00 00 
0490d     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04911     00 00 00 00 
04915     00 00 00 00 | 	byte	$00[8]
04919     18 30 1E 00 
0491d     00 00 1C 36 
04921     36 1C 00 00 
04925     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04929     00 00 00 00 
0492d     63 00 00 00 
04931     00 00 00 00 
04935     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04939     00 00 00 18 
0493d     18 00 00 00 
04941     00 00 00 00 
04945     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04949     00 00 00 00 
0494d     00          | 	byte	$00[5]
0494e     CC 66 33 00 
04952     33 33 33 33 
04956     33 33 6E 00 
0495a     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
0495e     00 3F 66 66 
04962     66 3E 36 66 
04966     66 66 6F 00 
0496a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
0496e     36 1C 08 00 
04972     3B 6E 66 06 
04976     06 06 0F 00 
0497a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0497e     00 00 00 7E 
04982     7E 7E 7E 7E 
04986     7E 7E 00 00 
0498a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0498e     00 00 00 00 
04992     00 00 00 00 
04996     00 00 00 00 
0499a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0499c     00 00 00 00 
      ...             
049cc     00 00 00 00 
049d0     00 00 00    | st_font        file "st4font.def"
049d3     FF FF 00 00 
049d7     00 00 00 00 
049db     00 18 18 18 
049df     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
049e3     18 18 18 18 
049e7     18 18 18 18 
049eb     18          | 	byte	$18[9]
049ec     00 00 00 00 
049f0     00 00 00    | 	byte	$00[7]
049f3     FF FF 18 18 
049f7     18 18 18 18 
049fb     18 18 18 18 
049ff     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04a03     FF FF 00 00 
04a07     00 00 00 00 
04a0b     00 18 18 18 
04a0f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04a13     1F 1F 18 18 
04a17     18 18 18 18 
04a1b     18 18 18 18 
04a1f     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04a23     F8 F8 18 18 
04a27     18 18 18 18 
04a2b     18 00 00 00 
04a2f     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04a33     1F 1F 18 18 
04a37     18 18 18 18 
04a3b     18 00 00 00 
04a3f     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04a43     F8 F8 18 18 
04a47     18 18 18 18 
04a4b     18 18 18 18 
04a4f     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04a53     1F 1F 00 00 
04a57     00 00 00 00 
04a5b     00 18 18 18 
04a5f     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04a63     F8 F8 00 00 
04a67     00 00 00 00 
04a6b     00 18 18 18 
04a6f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04a73     FF FF 18 18 
04a77     18 18 18 18 
04a7b     18 00 00 18 
04a7f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
04a83     66 7E 7E 66 
04a87     66 66 66 30 
04a8b     18 00 00 7E 
04a8f     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
04a93     3E 06 06 06 
04a97     06 7E 7E 18 
04a9b     0C 30 18 3C 
04a9f     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
04aa3     06 06 06 66 
04aa7     66 7E 3C 00 
04aab     00 30 18 66 
04aaf     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
04ab3     7E 7E 76 76 
04ab7     66 66 66 00 
04abb     00 30 18 7C 
04abf     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
04ac3     1C 38 70 60 
04ac7     60 7E 3E 00 
04acb     00 30 18 7E 
04acf     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
04ad3     18 0C 0C 06 
04ad7     06 7E 7E 00 
04adb     00 18 18 00 
04adf     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
04ae3     18 18 0C 0C 
04ae7     06 7E 7E 00 
04aeb     00 30 18 3C 
04aef     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
04af3     66 66 66 66 
04af7     66          | 	byte	$66[5]
04af8     7E 3C 00 00 
04afc     00 00 06 06 
04b00     06 06 16 1E 
04b04     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04b08     7E 7E 00 00 
04b0c     00 00 00 00 
04b10     00 3C 7C 60 
04b14     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
04b18     7E 7C 30 18 
04b1c     00 00 00 00 
04b20     00 3C 7E 66 
04b24     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
04b28     7E 7C 18 0C 
04b2c     00 00 30 18 
04b30     00 3C 3E 06 
04b34     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
04b38     7E 7C 00 00 
04b3c     00 00 30 18 
04b40     00 3E 7E 66 
04b44     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
04b48     66 66 00 00 
04b4c     00 00 30 18 
04b50     00 7C 7E 06 
04b54     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04b58     7E 3E 00 00 
04b5c     00 00 30 18 
04b60     00 7E 7E 30 
04b64     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04b68     7E 7E 00 00 
04b6c     00 00 18 18 
04b70     00 7E 7E 30 
04b74     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04b78     7E 7E 00 00 
04b7c     00 00 30 18 
04b80     00 3C 7E 66 
04b84     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04b88     7E 3C 00 00 
04b8c     00 00 1C 1C 
04b90     18 18 38 3C 
04b94     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04b98     3C 3C 00 00 
04b9c     00 00 00 00 
04ba0     00 00 00 00 
04ba4     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ba8     00 00 00 00 
04bac     00 00       | 	byte	$00[6]
04bae     18 18 18 18 
04bb2     18 18 18 18 | 	byte	$18[8]
04bb6     00 00 18 18 
04bba     00 00 00 00 
04bbe     66 66 66 66 
04bc2     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04bc6     00 00 00 00 
04bca     00 00 00 00 
04bce     00          | 	byte	$00[9]
04bcf     66 66 FF FF 
04bd3     66 66 FF FF 
04bd7     66 66 00 00 
04bdb     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
04bdf     7C 7E 06 06 
04be3     3E 7C 60 60 
04be7     7E 3E 18 18 
04beb     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
04bef     66 30 30 18 
04bf3     18 0C 0C 66 
04bf7     66 00 00 00 
04bfb     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
04bff     66 66 3C 1C 
04c03     1C FC FE 66 
04c07     66 FE FC 00 
04c0b     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
04c0f     18 18 18 18 
04c13     00 00 00 00 
04c17     00 00 00 00 
04c1b     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
04c1f     18 1C 0C 0C 
04c23     0C 0C 0C 0C 
04c27     1C 18 30 00 
04c2b     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
04c2f     18 38 30 30 
04c33     30 30 30 30 
04c37     38 18 0C 00 
04c3b     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
04c3f     66 66 3C 3C 
04c43     FF FF 3C 3C 
04c47     66 66 00 00 
04c4b     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
04c4f     00 18 18 18 
04c53     7E 7E 18 18 
04c57     18 00 00 00 
04c5b     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04c5f     00 00 00 00 
04c63     00 00       | 	byte	$00[6]
04c65     18 18 18 18 
04c69     18          | 	byte	$18[5]
04c6a     0C 04 00 00 
04c6e     00 00 00 00 
04c72     7E 7E 00 00 
04c76     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04c7a     00 00 00 00 
04c7e     00 00 00 00 
04c82     00 00 00 00 
04c86     00          | 	byte	$00[13]
04c87     18 18 18 00 
04c8b     00 00 00 60 
04c8f     60 60 30 30 
04c93     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04c97     06 06 06 00 
04c9b     00 00 00 3C 
04c9f     7E 66 66 66 
04ca3     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04ca7     66 7E 3C 00 
04cab     00 00 00 18 
04caf     18 1C 1C 18 
04cb3     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04cb7     18 7E 7E 00 
04cbb     00 00 00 3C 
04cbf     7E 66 66 30 
04cc3     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04cc7     0C 7E 7E 00 
04ccb     00 00 00 7E 
04ccf     7E 30 30 18 
04cd3     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04cd7     66 7E 3C 00 
04cdb     00 00 00 30 
04cdf     30 38 38 3C 
04ce3     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04ce7     7E 30 30 00 
04ceb     00 00 00 7E 
04cef     7E 06 06 3E 
04cf3     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04cf7     66 7E 3C 00 
04cfb     00 00 00 38 
04cff     3C 0E 06 06 
04d03     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04d07     66 7E 3C 00 
04d0b     00 00 00 7E 
04d0f     7E 60 60 30 
04d13     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04d17     0C 0C 0C 00 
04d1b     00 00 00 3C 
04d1f     7E 66 66 3C 
04d23     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04d27     66 7E 3C 00 
04d2b     00 00 00 3C 
04d2f     7E 66 66 7E 
04d33     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04d37     70 3C 1C 00 
04d3b     00 00 00 00 
04d3f     00 00 18 18 
04d43     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04d47     18 18 18 00 
04d4b     00 00 00 00 
04d4f     00 00 18 18 
04d53     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04d57     18 18 18 0C 
04d5b     04 00 00 00 
04d5f     70 38 1C 0E 
04d63     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04d67     70 00 00 00 
04d6b     00 00 00 00 
04d6f     00 00 7E 7E 
04d73     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04d77     00 00 00 00 
04d7b     00 00 00 00 | 	byte	$00[8]
04d7f     0E 1C 38 70 
04d83     E0 70 38 1C 
04d87     0E 00 00 00 
04d8b     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04d8f     7E 66 66 30 
04d93     30 18 18 18 
04d97     00 18 18 00 
04d9b     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04d9f     7E 66 66 66 
04da3     66 36 06 66 
04da7     66 7E 3C 00 
04dab     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04daf     3C 7E 66 66 
04db3     66 7E 7E 66 
04db7     66 66 66 00 
04dbb     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04dbf     7E 66 66 7E 
04dc3     3E 66 66 66 
04dc7     66 7E 3E 00 
04dcb     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04dcf     7E 66 66 06 
04dd3     06 06 06 66 
04dd7     66 7E 3C 00 
04ddb     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04ddf     7E 66 66 66 
04de3     66 66 66 66 
04de7     66 7E 3E 00 
04deb     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04def     7E 06 06 3E 
04df3     3E 06 06 06 
04df7     06 7E 7E 00 
04dfb     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04dff     7E 06 06 3E 
04e03     3E 06 06 06 
04e07     06 06 06 00 
04e0b     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04e0f     7E 06 06 76 
04e13     76 66 66 66 
04e17     66 7E 3C 00 
04e1b     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04e1f     66 66 66 7E 
04e23     7E 66 66 66 
04e27     66 66 66 00 
04e2b     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04e2f     7E 18 18 18 
04e33     18 18 18 18 
04e37     18 7E 7E 00 
04e3b     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04e3f     60 60 60 60 
04e43     60 60 60    | 	byte	$60[7]
04e46     66 66 7E 3C 
04e4a     00 00 00 00 
04e4e     66 66 36 36 
04e52     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04e56     66 66 C6 C6 
04e5a     00 00 00 00 
04e5e     06 06 06 06 
04e62     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
04e66     06 06 7E 7E 
04e6a     00 00 00 00 
04e6e     C6 C6 EE EE 
04e72     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
04e76     C6 C6 C6 C6 
04e7a     00 00 00 00 
04e7e     66 66 66 6E 
04e82     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
04e86     76 66 66 66 
04e8a     00 00 00 00 
04e8e     3C 7E 66 66 
04e92     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04e96     66 66 7E 3C 
04e9a     00 00 00 00 
04e9e     3E 7E 66 66 
04ea2     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
04ea6     06 06 06 06 
04eaa     00 00 00 00 
04eae     3C 7E 66 66 
04eb2     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04eb6     66 56 3E 6C 
04eba     00 00 00 00 
04ebe     3E 7E 66 66 
04ec2     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
04ec6     66 66 C6 C6 
04eca     00 00 00 00 
04ece     7C 7E 06 06 
04ed2     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
04ed6     60 60 7E 3E 
04eda     00 00 00 00 
04ede     7E 7E 18 18 
04ee2     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
04ee6     18 18 18 18 
04eea     00 00 00 00 
04eee     66 66 66 66 
04ef2     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04ef6     66 66 7E 3C 
04efa     00 00 00 00 
04efe     66 66 66 66 
04f02     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04f06     3C 3C 18 18 
04f0a     00 00 00 00 
04f0e     C6 C6 C6 C6 
04f12     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
04f16     FE EE C6 82 
04f1a     00 00 00 00 
04f1e     66 66 66 3C 
04f22     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
04f26     3C 66 66 66 
04f2a     00 00 00 00 
04f2e     66 66 66 66 
04f32     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
04f36     18 18 18 18 
04f3a     00 00 00 00 
04f3e     7E 7E 30 30 
04f42     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
04f46     06 06 7E 7E 
04f4a     00 00 00 00 
04f4e     3C 3C 0C 0C 
04f52     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
04f56     0C 0C 3C 3C 
04f5a     00 00 00 00 
04f5e     06 06 0C 0C 
04f62     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
04f66     60 60 C0 C0 
04f6a     00 00 00 00 
04f6e     3C 3C 30 30 
04f72     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
04f76     30 30 3C 3C 
04f7a     00 00 00 00 
04f7e     18 18 3C 3C 
04f82     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
04f86     00 00 00 00 
04f8a     00 00 00 00 
04f8e     00 00 00 00 
04f92     00 00 00 00 
04f96     00 00       | 	byte	$00[18]
04f98     FE FE 00 00 
04f9c     00 00 0C 0C 
04fa0     18 18 00 00 
04fa4     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
04fa8     00 00 00 00 
04fac     00 00 00 00 
04fb0     00          | 	byte	$00[9]
04fb1     3C 7C 60 7C 
04fb5     7E 66 66 7E 
04fb9     7C 00 00 00 
04fbd     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
04fc1     3E 7E 66 66 
04fc5     66 66 66 7E 
04fc9     3E 00 00 00 
04fcd     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
04fd1     3C 3E 06 06 
04fd5     06 06 06 7E 
04fd9     7C 00 00 00 
04fdd     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
04fe1     7C 7E 66 66 
04fe5     66 66 66 7E 
04fe9     7C 00 00 00 
04fed     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
04ff1     3C 7E 66 66 
04ff5     7E 06 06 7E 
04ff9     7C 00 00 00 
04ffd     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
05001     18 7E 7E 18 
05005     18 18 18 18 
05009     18 00 00 00 
0500d     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
05011     7C 7E 66 66 
05015     66 66 7E 7C 
05019     60 7E 3E 00 
0501d     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
05021     3E 7E 66 66 
05025     66 66 66 66 
05029     66 00 00 00 
0502d     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
05031     1C 1C 18 18 
05035     18 18 18 3C 
05039     3C 00 00 00 
0503d     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
05041     30 30 30 30 
05045     30 30 30 30 
05049     30          | 	byte	$30[9]
0504a     3E 1E 00 00 
0504e     06 06 06 36 
05052     36 1E 1E 1E 
05056     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
0505a     00 00 00 00 
0505e     1C 1C 18 18 
05062     18 18 18 18 
05066     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0506a     00 00 00 00 
0506e     00 00 00    | 	byte	$00[7]
05071     6C FE FE D6 
05075     D6 C6 C6 C6 
05079     C6 00 00 00 
0507d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
05081     3E 7E 66 66 
05085     66 66 66 66 
05089     66 00 00 00 
0508d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
05091     3C 7E 66 66 
05095     66 66 66 7E 
05099     3C 00 00 00 
0509d     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
050a1     3E 7E 66 66 
050a5     66 66 66 7E 
050a9     3E 06 06 00 
050ad     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
050b1     7C 7E 66 66 
050b5     66 66 66 7E 
050b9     7C 60 60 00 
050bd     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
050c1     3E 7E 66 06 
050c5     06 06 06 06 
050c9     06 00 00 00 
050cd     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
050d1     7C 7E 06 0E 
050d5     3C 70 60 7E 
050d9     3E 00 00 00 
050dd     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
050e1     7E 7E 18 18 
050e5     18 18 18 78 
050e9     70 00 00 00 
050ed     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
050f1     66 66 66 66 
050f5     66 66 66    | 	byte	$66[7]
050f8     7E 7C 00 00 
050fc     00 00 00 00 
05100     00 66 66 66 
05104     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
05108     18 18 00 00 
0510c     00 00 00 00 
05110     00 C6 C6 D6 
05114     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
05118     C6 82 00 00 
0511c     00 00 00 00 
05120     00 66 66 3C 
05124     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
05128     66 66 00 00 
0512c     00 00 00 00 
05130     00 66 66 66 
05134     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
05138     7C 60 7E 3E 
0513c     00 00 00 00 
05140     00 7E 7E 30 
05144     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
05148     7E 7E 00 00 
0514c     00 00 30 18 
05150     18 18 18 0C 
05154     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
05158     18 30 00 00 
0515c     00 00 18 18 
05160     18 18 18 18 
05164     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
05168     18 18 00 00 
0516c     00 00 0C 18 
05170     18 18 18 30 
05174     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
05178     18 0C 00 00 
0517c     00 00 6C 7E 
05180     36 00 00 00 
05184     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
05188     00 00 00 00 
0518c     00 00 00 00 
05190     00          | 	byte	$00[9]
05191     18 18 18 18 
05195     18 18 00 00 
05199     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0519c     00 00 00 00 
051a0     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
051a4     00 00 00 00 
051a8     00 80 80 80 
051ac     00 00 00 FF 
051b0     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
051b4     00 00 00 00 
051b8     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
051b9     80 00 00 00 
051bd     00 80 00 00 
051c1     80 80 00 00 
051c5     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
051c9     80 00 80 00 
051cd     00 40 80 00 
051d1     AA AA AA 00 
051d5     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
051d9     FF 00 00 00 
051dd     00 FF 00 00 
051e1     FF FF 00 00 
051e5     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
051e9     FF 00 FF 00 
051ed     00 FF FF 00 
051f1     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
051f4     00 00 00 00 
051f8     00          | ataripalette   file "ataripalettep2.def"
051f9     11 11 11 00 
051fd     22 22 22 00 
05201     33 33 33 00 
05205     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
05209     55 55 55 00 
0520d     66 66 66 00 
05211     77 77 77 00 
05215     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
05219     99 99 99 00 
0521d     AA AA AA 00 
05221     BB BB BB 00 
05225     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
05229     DD DD DD 00 
0522d     EE EE EE 00 
05231     FF FF FF 00 
05235     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
05239     00 14 40 00 
0523d     00 1E 60 00 
05241     00 28 80 00 
05245     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
05249     00 3C BF 00 
0524d     00 46 DF 00 
05251     00 50 FF 00 
05255     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
05259     39 77 FF 00 
0525d     55 8A FF 00 
05261     71 9E FF 00 
05265     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
05269     AA C5 FF 00 
0526d     C6 D8 FF 00 
05271     E3 EC FF 00 
05275     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
05279     00 00 40 00 
0527d     00 00 60 00 
05281     00 00 80 00 
05285     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
05289     00 00 BF 00 
0528d     00 00 DF 00 
05291     00 00 FF 00 
05295     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
05299     39 39 FF 00 
0529d     55 55 FF 00 
052a1     71 71 FF 00 
052a5     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
052a9     AA AA FF 00 
052ad     C6 C6 FF 00 
052b1     E3 E3 FF 00 
052b5     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
052b9     20 00 40 00 
052bd     30 00 60 00 
052c1     40 00 80 00 
052c5     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
052c9     60 00 BF 00 
052cd     70 00 DF 00 
052d1     80 00 FF 00 
052d5     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
052d9     9C 39 FF 00 
052dd     AA 55 FF 00 
052e1     B8 71 FF 00 
052e5     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
052e9     D5 AA FF 00 
052ed     E3 C6 FF 00 
052f1     F1 E3 FF 00 
052f5     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
052f9     40 00 40 00 
052fd     60 00 60 00 
05301     80 00 80 00 
05305     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05309     BF 00 BF 00 
0530d     DF 00 DF 00 
05311     FF 00 FF 00 
05315     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
05319     FF 39 FF 00 
0531d     FF 55 FF 00 
05321     FF 71 FF 00 
05325     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
05329     FF AA FF 00 
0532d     FF C6 FF 00 
05331     FF E3 FF 00 
05335     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
05339     40 00 20 00 
0533d     60 00 30 00 
05341     80 00 40 00 
05345     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
05349     BF 00 60 00 
0534d     DF 00 70 00 
05351     FF 00 80 00 
05355     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05359     FF 39 9C 00 
0535d     FF 55 AA 00 
05361     FF 71 B8 00 
05365     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05369     FF AA D5 00 
0536d     FF C6 E3 00 
05371     FF E3 F1 00 
05375     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05379     40 00 00 00 
0537d     60 00 00 00 
05381     80 00 00 00 
05385     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05389     BF 00 00 00 
0538d     DF 00 00 00 
05391     FF 00 00 00 
05395     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05399     FF 39 39 00 
0539d     FF 55 55 00 
053a1     FF 71 71 00 
053a5     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
053a9     FF AA AA 00 
053ad     FF C6 C6 00 
053b1     FF E3 E3 00 
053b5     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
053b9     40 10 00 00 
053bd     60 18 00 00 
053c1     80 20 00 00 
053c5     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
053c9     BF 30 00 00 
053cd     DF 38 00 00 
053d1     FF 40 00 00 
053d5     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
053d9     FF 6A 39 00 
053dd     FF 80 55 00 
053e1     FF 95 71 00 
053e5     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
053e9     FF BF AA 00 
053ed     FF D5 C6 00 
053f1     FF EA E3 00 
053f5     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
053f9     40 20 00 00 
053fd     60 30 00 00 
05401     80 40 00 00 
05405     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05409     BF 60 00 00 
0540d     DF 70 00 00 
05411     FF 80 00 00 
05415     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
05419     FF 9C 39 00 
0541d     FF AA 55 00 
05421     FF B8 71 00 
05425     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
05429     FF D5 AA 00 
0542d     FF E3 C6 00 
05431     FF F1 E3 00 
05435     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
05439     40 30 00 00 
0543d     60 48 00 00 
05441     80 60 00 00 
05445     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
05449     BF 90 00 00 
0544d     DF A8 00 00 
05451     FF C0 00 00 
05455     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05459     FF CE 39 00 
0545d     FF D5 55 00 
05461     FF DC 71 00 
05465     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05469     FF EA AA 00 
0546d     FF F1 C6 00 
05471     FF F8 E3 00 
05475     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05479     30 40 00 00 
0547d     48 60 00 00 
05481     60 80 00 00 
05485     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05489     90 BF 00 00 
0548d     A8 DF 00 00 
05491     C0 FF 00 00 
05495     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05499     CE FF 39 00 
0549d     D5 FF 55 00 
054a1     DC FF 71 00 
054a5     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
054a9     EA FF AA 00 
054ad     F1 FF C6 00 
054b1     F8 FF E3 00 
054b5     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
054b9     00 40 00 00 
054bd     00 60 00 00 
054c1     00 80 00 00 
054c5     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
054c9     00 BF 00 00 
054cd     00 DF 00 00 
054d1     00 FF 00 00 
054d5     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
054d9     39 FF 39 00 
054dd     55 FF 55 00 
054e1     71 FF 71 00 
054e5     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
054e9     AA FF AA 00 
054ed     C6 FF C6 00 
054f1     E3 FF E3 00 
054f5     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
054f9     00 40 14 00 
054fd     00 60 1E 00 
05501     00 80 28 00 
05505     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
05509     00 BF 3C 00 
0550d     00 DF 46 00 
05511     00 FF 50 00 
05515     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
05519     39 FF 77 00 
0551d     55 FF 8A 00 
05521     71 FF 9E 00 
05525     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
05529     AA FF C5 00 
0552d     C6 FF D8 00 
05531     E3 FF EC 00 
05535     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
05539     00 40 28 00 
0553d     00 60 3C 00 
05541     00 80 50 00 
05545     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
05549     00 BF 78 00 
0554d     00 DF 8C 00 
05551     00 FF A0 00 
05555     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
05559     39 FF B5 00 
0555d     55 FF C0 00 
05561     71 FF CA 00 
05565     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05569     AA FF DF 00 
0556d     C6 FF EA 00 
05571     E3 FF F4 00 
05575     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05579     00 40 40 00 
0557d     00 60 60 00 
05581     00 80 80 00 
05585     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05589     00 BF BF 00 
0558d     00 DF DF 00 
05591     00 FF FF 00 
05595     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05599     39 FF FF 00 
0559d     55 FF FF 00 
055a1     71 FF FF 00 
055a5     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
055a9     AA FF FF 00 
055ad     C6 FF FF 00 
055b1     E3 FF FF 00 
055b5     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
055b9     00 28 40 00 
055bd     00 3C 60 00 
055c1     00 50 80 00 
055c5     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
055c9     00 78 BF 00 
055cd     00 8C DF 00 
055d1     00 A0 FF 00 
055d5     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
055d9     39 B5 FF 00 
055dd     55 C0 FF 00 
055e1     71 CA FF 00 
055e5     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
055e9     AA DF FF 00 
055ed     C6 EA FF 00 
055f1     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
055f4                 | '**********************************************************************************
055f4                 | '
055f4                 | '        Timings and colors definitions
055f4                 | '
055f4                 | '**********************************************************************************
055f4                 | 
055f4                 |    'streamer sets for text mode, to add to timings[0..5]
055f4                 | 
055f4                 | 
055f4                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
055f4     10 00 00 00 
055f8     50 00 00 00 
055fc     14 00 00 00 
05600     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05604     70 00 00 00 
05608     08 00 00 00 
0560c     30 00 00 00 
05610     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
05614     10 00 00 00 
05618     10 00 00 00 
0561c     00 00 00 00 
05620     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
05624     E0 01 00 00 
05628     F6 32 24 15 
0562c     FB 6C C3 01 
05630     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05634                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
05634     12 00 00 00 
05638     30 00 00 00 
0563c     10 00 00 00 
05640     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
05644     18 00 00 00 
05648     08 00 00 00 
0564c     18 00 00 00 
05650     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
05654     20 00 00 00 
05658     18 00 00 00 
0565c     40 00 00 00 
05660     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
05664     F0 01 00 00 
05668     00 D0 12 13 
0566c     FB 0F 00 01 
05670     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
05674     10 00 00 00 
05678     40 00 00 00 
0567c     10 00 00 00 
05680     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
05684     08 00 00 00 
05688     08 00 00 00 
0568c     08 00 00 00 
05690     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
05694     40 00 00 00 
05698     20 00 00 00 
0569c     80 00 00 00 
056a0     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
056a4     E0 01 00 00 
056a8     70 AE E9 10 
056ac     FB 8B FF 01 
056b0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
056b4     10 00 00 00 
056b8     50 00 00 00 
056bc     14 00 00 00 
056c0     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
056c4     00 00 00 00 
056c8     08 00 00 00 
056cc     00 00 00 00 
056d0     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
056d4     10 00 00 00 
056d8     10 00 00 00 
056dc     C0 00 00 00 
056e0     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
056e4     40 02 00 00 
056e8     F6 32 24 15 
056ec     FB 6C C3 01 
056f0     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
056f4     50 00 00 00 
056f8     A0 00 00 00 
056fc     54 00 00 00 
05700     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
05704     08 00 00 00 
05708     08 00 00 00 
0570c     08 00 00 00 
05710     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05714     0C 00 00 00 
05718     08 00 00 00 
0571c     00 01 00 00 
05720     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
05724     E0 01 00 00 
05728     10 06 56 15 
0572c     FB 64 C3 01 
05730     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
05734     50 00 00 00 
05738     32 00 00 00 
0573c     50 00 00 00 
05740     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05744     08 00 00 00 
05748     08 00 00 00 
0574c     08 00 00 00 
05750     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05754     0C 00 00 00 
05758     08 00 00 00 
0575c     40 01 00 00 
05760     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
05764     E0 01 00 00 
05768     F2 CD 33 13 
0576c     FB 53 92 01 
05770     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05774     18 00 00 00 
05778     30 00 00 00 
0577c     18 00 00 00 
05780     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
05784     08 00 00 00 
05788     08 00 00 00 
0578c     08 00 00 00 
05790     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05794     0C 00 00 00 
05798     08 00 00 00 
0579c     80 01 00 00 
057a0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
057a4     E0 01 00 00 
057a8     F4 8F 11 11 
057ac     FB 3A 55 01 
057b0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
057b4     20 00 00 00 
057b8     40 00 00 00 
057bc     22 00 00 00 
057c0     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
057c4     00 00 00 00 
057c8     08 00 00 00 
057cc     00 00 00 00 
057d0     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
057d4     0C 00 00 00 
057d8     08 00 00 00 
057dc     C0 01 00 00 
057e0     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
057e4     F0 01 00 00 
057e8     F2 CD 33 13 
057ec     FB 53 92 01 
057f0     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
057f4                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
057f4     00 75 C7 97 
057f8     27 47 F6 0A 
057fc     05 79 CB 9B 
05800     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
05804                 | 
05804     28 12 64 FD | hdmi            setq    #9
05808     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
0580c                 |            '     setq2   #255
0580c                 |             '    rdlong  $100, paletteptr 
0580c     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
05810     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
05814     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
05818     78 F9 02 F1 |                 add     ii,hbase
0581c     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
05820     7B 0B 80 FF 
05824     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
05828                 | 
05828     66 66 86 FF 
0582c     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
05830                 | 
05830                 | 
05830                 | ''--------  frame rendering main loop  ---------------------------------------------------
05830                 | 
05830                 | p101
05830     28 14 64 FD |                 setq    #10
05834     00 DF 06 FB |                 rdlong  framebuf,  ptra
05838     28 1E 64 FD |                 setq    #15
0583c     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
05840     71 99 02 FB |                 rdlong  border,borderptr
05844                 | 
05844     01 C4 06 F1 |                 add     frames,#1
05848     76 F5 02 F6 |                 mov     dlptr2,dlptr
0584c                 | 
0584c     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
05850     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
05854     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
05858     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
0585c                 |  '' up porch
0585c                 | 
0585c     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
05860     49 FF 02 F6 |                 mov     hsync1,sync_001
05864     37 A8 46 FB |                 callpa  i_upporch ,#blank
05868     72 01 68 FC |                 wrlong  #0,vblankptr
0586c                 |                 
0586c     1F EA 16 F4 |                 testb   paletteptr,#31 wc
05870     29 FE 65 3D |          if_nc  setq2   #255
05874     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
05878                 | 
05878                 | '' cursor blinking
05878                 | 
05878     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
0587c     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
05880                 | 
05880                 | '' main screen
05880                 | 
05880     00 BE 06 F6 |                 mov linenum,#0
05884     00 18 07 F6 |                 mov rcnt,#0
05888     00 1C 07 F6 |                 mov rcnt2a,#0
0588c                 | 
0588c                 | 
0588c     00 18 0F F2 | p301            cmp rcnt,#0 wz
05890     18 00 90 AD |         if_z    jmp #p306
05894     01 18 87 F1 |                 sub rcnt,#1
05898     90 F7 02 F6 |                 mov dl,rdl
0589c     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
058a0     8F F7 02 A1 |    if_z        add dl,roffset  
058a4     7B 21 03 F6 |                 mov rdl,dl
058a8     04 00 90 FD |                 jmp #p307          
058ac                 |           
058ac                 |                 
058ac     7A F7 02 FB | p306            rdlong  dl,dlptr2
058b0     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
058b4     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
058b8     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
058bc                 | 
058bc                 | '' Special entry:
058bc                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
058bc                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
058bc                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
058bc                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
058bc                 | '' todo: set horizontal scroll (if needed)
058bc                 | 
058bc     02 FA 66 F0 |                 shl framebuf2,#2
058c0     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
058c4     04 22 0F F2 |                 cmp dlc,#%100 wz
058c8                 |   
058c8                 |                 
058c8     04 F4 06 F1 |                 add dlptr2,#4
058cc     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
058d0     7A 21 03 FB |                  rdlong rdl,dlptr2
058d4     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
058d8     04 18 47 F0 |                  shr rcnt,#4
058dc                 |              
058dc     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
058e0     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
058e4                 |                 
058e4     04 1E 47 F0 |                  shr roffset,#4
058e8     0C 1E 67 F0 |                  shl roffset,#12
058ec                 |   
058ec     9C FF 9F FD |                  jmp #p301
058f0                 |                  
058f0                 |                  
058f0                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
058f0     0C FA 46 F0 |                 shr     framebuf2,#12
058f4     02 FA 66 F0 |                 shl     framebuf2,#2
058f8                 | 
058f8     7B 03 E3 F8 |                 getbyte t1,dl,#0
058fc     00 02 0F F2 |                 cmp     t1,#0 wz
05900     34 00 90 AD |     if_z        jmp     #borderline
05904                 | 
05904     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
05908     50 00 90 CD |           if_c   jmp     #textline
0590c     50 02 90 3D |           if_nc  jmp     #graphline
05910                 | '
05910     01 BE 06 F1 | p302            add     linenum,#1
05914     04 F4 06 F1 |                 add     dlptr2,#4
05918     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
0591c     6C FF 9F 5D |          if_nz  jmp     #p301
05920                 | 
05920     72 03 68 FC | p112            wrlong  #1,vblankptr
05924     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
05928                 | 
05928     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
0592c     4B FF 02 F6 |                 mov     hsync1,sync_223
05930     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
05934     F8 FE 9F FD |                 jmp     #p101
05938                 | 
05938                 | '' ---------------  END of frame rendering loop -------------------------------------------
05938                 | 
05938                 | 
05938     14 00 B0 FD | borderline      call    #hsync                      ' make a border
0593c     4C A1 C2 FC |                 xcont   m_vi,border
05940     CC FF 9F FD |                 jmp     #p302
05944                 | 
05944                 | 
05944     08 00 B0 FD | blank           call    #hsync                          'blank lines
05948     7E A1 C2 FC |                 xcont   m_vi,hsync0
0594c     FD ED 6F 0B |         _ret_   djnz    pa,#blank
05950                 | 
05950     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
05954     7F 9D B2 FC |                 xzero   m_sn,hsync1
05958     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
0595c                 | 
0595c                 | 
0595c                 | 
0595c                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0595c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0595c                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0595c                 | 
0595c                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
0595c                 | 
0595c     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
05960                 | 
05960     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
05964     7B 17 5B F8 |                 getnib  zoom, dl,#3
05968     03 16 07 F5 |                 and             zoom, #3
0596c                 | 
0596c                 | 
0596c                 | 
0596c     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
05970     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
05974     3F BC 06 F5 |                 and     linestart,#63
05978     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
0597c     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
05980                 | 
05980     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
05984                 | 
05984                 |                        ' if fontline =0, get a border color
05984                 | 
05984     51 03 33 F9 | p102            getword t1,m_border,#0
05988     00 02 0F F2 |                 cmp     t1, #0 wz
0598c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05990                 | 
05990     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
05994     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
05998     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
0599c     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
059a0     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
059a4     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
059a8     52 BB 02 F6 |                 mov m_lut2, m_lut1
059ac     6A BB 02 F1 |                 add m_lut2, lutt1
059b0     58 0F 03 F6 |                 mov cpl2,i_cpl
059b4                 | 
059b4     02 16 0F F2 |                cmp zoom,#2 wz
059b8     E4 00 90 AD |           if_z jmp #p420
059bc     01 16 0F F2 |                cmp zoom,#1 wz
059c0     64 00 90 AD |           if_z jmp #p410
059c4     00 16 0F F2 |                 cmp zoom,#0 wz
059c8     04 00 90 AD |           if_z jmp #p400
059cc     50 01 90 FD |                jmp #p430
059d0                 | 
059d0                 |                    '
059d0                 |  ''---------------------------------------------------------------------------------------------------------
059d0     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
059d4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
059d8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
059dc     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
059e0     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
059e4     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
059e8     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
059ec     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
059f0     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
059f4     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
059f8                 | 
059f8     81 BB C2 FC |                         xcont m_lut2,t1
059fc                 | 
059fc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05a00     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05a04     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05a08     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05a0c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05a10     01 C0 86 F1 |                         sub     lutaddr,#1
05a14                 | 
05a14     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05a18     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05a1c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05a20                 | 
05a20     EB 0F 6F FB |                         djnz   cpl2,#p400
05a24     28 01 90 FD |  p401                   jmp    #p103
05a28                 | 
05a28                 | ''------------------------------------------------------------------------------------------------------------
05a28                 | 
05a28     01 0E 47 F0 |  p410                   shr cpl2,#1
05a2c                 | 
05a2c                 | ''---------------------------------------------------------------------------------------------------------
05a2c     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
05a30     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05a34     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05a38     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05a3c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05a40     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05a44     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05a48     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05a4c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05a50     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05a54                 | 
05a54                 | 
05a54     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
05a58     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
05a5c     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
05a60     03 02 07 FA |                         mul t1,#3
05a64     81 BB C2 FC |                         xcont m_lut2,t1
05a68     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05a6c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05a70     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05a74     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05a78     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05a7c     01 C0 86 F1 |                         sub     lutaddr,#1
05a80     63 06 63 FD |                         mergew t3
05a84     03 06 07 FA |                         mul t3,#3
05a88     83 BB C2 FC |                         xcont m_lut2,t3
05a8c                 | 
05a8c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05a90     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05a94                 | 
05a94     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05a98                 | 
05a98     E4 0F 6F FB |                         djnz   cpl2,#p412
05a9c     B0 00 90 FD |  p411                   jmp    #p103
05aa0                 | 
05aa0                 | ''------------------------------------------------------------------------------------------------------------
05aa0                 | 
05aa0     02 0E 47 F0 |  p420                   shr cpl2,#2
05aa4                 | 
05aa4                 | ''---------------------------------------------------------------------------------------
05aa4     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
05aa8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05aac     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05ab0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05ab4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05ab8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05abc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05ac0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05ac4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05ac8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05acc                 | 
05acc     61 02 63 FD |                         mergeb t1
05ad0     81 07 3B F9 |                         getword t3,t1,#1
05ad4     0F 02 07 FA |                         mul t1,#15
05ad8     81 BB C2 FC |                         xcont m_lut2,t1
05adc                 | 
05adc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05ae0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05ae4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05ae8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05aec     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05af0     01 C0 86 F1 |                         sub     lutaddr,#1
05af4                 | 
05af4     81 09 EB F8 |                         getbyte t4,t1,#1        '
05af8     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
05afc                 | 
05afc     0F 06 07 FA |                         mul t3,#15
05b00     83 BB C2 FC |                         xcont m_lut2,t3
05b04                 | 
05b04     83 0B EB F8 |                         getbyte t5,t3,#1
05b08     85 BB C2 FC |                         xcont m_lut2, t5
05b0c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05b10     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05b14                 | 
05b14     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05b18                 | 
05b18     E2 0F 6F FB |                         djnz   cpl2,#p422
05b1c     30 00 90 FD |  p421                   jmp    #p103
05b20                 | 
05b20                 | '--------------------------------------------------------------------------------------------------------------
05b20                 | 
05b20     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
05b24     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05b28     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05b2c                 | 
05b2c     00 BA C6 FC |                         xcont m_lut2,#0
05b30                 | 
05b30     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05b34     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05b38     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05b3c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05b40     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05b44     01 C0 86 F1 |                         sub     lutaddr,#1
05b48                 | 
05b48     F5 0F 6F FB |                         djnz   cpl2,#p430
05b4c     00 00 90 FD |  p431                   jmp    #p103
05b50                 | 
05b50                 | ''------------------------------------------------------------------------------------------------------------
05b50                 | 
05b50                 | 
05b50                 | 
05b50     51 25 33 F9 | p103            getword  mb2,m_border,#0
05b54     00 24 0F F2 |                 cmp      mb2, #0 wz
05b58     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05b5c                 | 
05b5c     B0 FD 9F FD |                 jmp #p302
05b60                 | 
05b60                 | '' -------------------------------------- END of text line ---------------------------------
05b60                 | 
05b60                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
05b60                 | 
05b60     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
05b64                 | 
05b64                 | 
05b64     51 25 33 F9 | p202            getword mb2,m_border,#0
05b68     00 24 0F F2 |                 cmp     mb2, #0 wz
05b6c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05b70                 | 
05b70                 | '----------------------------------------- display pixels
05b70                 | 
05b70     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
05b74     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05b78                 | 
05b78     7B 17 5B F8 |                 getnib  zoom, dl,#3
05b7c     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
05b80                 | 
05b80     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
05b84     0C BC 06 F5 |                 and     colordepth,#12
05b88                 | 
05b88     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
05b8c     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
05b90     64 00 90 AD |           if_z  jmp     #p240
05b94                 | 
05b94     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05b98     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
05b9c     98 00 90 AD |           if_z  jmp     #p250
05ba0                 | 
05ba0     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
05ba4     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
05ba8     FC 00 90 AD |           if_z  jmp     #p260
05bac                 | 
05bac     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
05bb0                 | 
05bb0                 | '' --- 8 bit color modes
05bb0                 | 
05bb0     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
05bb4     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05bb8                 | 
05bb8     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
05bbc     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
05bc0                 |        
05bc0                 |  '  
05bc0     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
05bc4     25 0C 07 A6 |                 if_z mov skippattern,#%100101
05bc8                 |     
05bc8                 |  
05bc8     05 0C 07 56 |                 if_nz mov skippattern,#%000101
05bcc     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
05bd0                 |         
05bd0                 | 
05bd0                 |         
05bd0     7D 11 03 FB | p235               rdlong  char,framebuf2
05bd4     32 0C 63 FD |                    skipf skippattern
05bd8     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
05bdc     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
05be0     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
05be4     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
05be8     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
05bec     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
05bf0     F7 0F 6F FB |                    djnz    cpl2,#p235
05bf4                 | 
05bf4     20 01 90 FD |                jmp    #p203
05bf8                 |                   
05bf8                 | 
05bf8                 | 
05bf8                 | '' --- 1 bit color modes
05bf8                 | 
05bf8     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
05bfc     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05c00                 | 
05c00     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
05c04     13 0C 07 A6 |        if_z   mov skippattern,#%10011
05c08     08 0C 07 56 |        if_nz  mov skippattern,#%01000
05c0c                 | 
05c0c                 | 
05c0c     7D 11 E3 FA | p241               rdword  char,framebuf2
05c10     44 10 FF F9 |                    movbyts char,#%01000100
05c14     63 10 63 FD |                    mergew  char
05c18     32 0C 63 FD |                    skipf skippattern
05c1c     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
05c20     63 10 63 FD |                    mergew  char                    ' 1 0
05c24     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
05c28     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
05c2c     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
05c30     F6 0F 6F FB |                    djnz   cpl2,#p241
05c34                 | 
05c34                 | 
05c34     E0 00 90 FD |                jmp    #p203
05c38                 | 
05c38                 | '' --- 2 bit color modes
05c38                 | 
05c38     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
05c3c     C8 00 90 AD |        if_z   jmp #p251
05c40                 | 
05c40     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05c44     30 00 90 AD |        if_z   jmp #p252
05c48                 | 
05c48                 | 
05c48     7D 11 C3 FA | p254               rdbyte char,framebuf2
05c4c     04 0A 07 F6 |                    mov  t5,#4
05c50     02 10 67 F0 | p255               shl  char,#2
05c54     88 03 53 F8 |                    getnib  t1,char,#2
05c58     03 02 07 F5 |                    and     t1,#3
05c5c     55 02 07 FA |                    mul     t1,#$55
05c60     81 05 03 F9 |                    rolbyte  t2,t1,#0
05c64     FA 0B 6F FB |                    djnz    t5,#p255
05c68     82 BB C2 FC |                    xcont   m_lut2,t2
05c6c     01 FA 06 F1 |                    add     framebuf2,#1
05c70     F5 0F 6F FB |                    djnz    cpl2,#p254
05c74     A0 00 90 FD |                    jmp     #p203
05c78                 | 
05c78     7D 11 E3 FA | p252               rdword char,framebuf2
05c7c     08 0A 07 F6 |                    mov  t5,#8
05c80     02 10 67 F0 | p253               shl  char,#2
05c84     88 03 63 F8 |                    getnib  t1,char,#4
05c88     03 02 07 F5 |                    and     t1,#3
05c8c     05 02 07 FA |                    mul     t1,#5
05c90     81 05 83 F8 |                    rolnib  t2,t1,#0
05c94     FA 0B 6F FB |                    djnz    t5,#p253
05c98     82 BB C2 FC |                    xcont   m_lut2,t2
05c9c     02 FA 06 F1 |                    add     framebuf2,#2
05ca0     F5 0F 6F FB |                    djnz    cpl2,#p252
05ca4     70 00 90 FD |                    jmp     #p203
05ca8                 | 
05ca8                 | '' ------ 4 bit color modes
05ca8                 | 
05ca8     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
05cac     58 00 90 AD |        if_z   jmp #p251
05cb0                 | 
05cb0     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05cb4     2C 00 90 AD |        if_z   jmp #p262
05cb8                 | 
05cb8                 | 
05cb8     7D 11 C3 FA | p263               rdbyte char,framebuf2
05cbc     02 0A DC FC |                            rep #5,#2
05cc0     88 05 8B F8 |                              rolnib t2,char,#1
05cc4     88 05 8B F8 |                                  rolnib t2,char,#1
05cc8     88 05 8B F8 |                              rolnib t2,char,#1
05ccc     88 05 8B F8 |                                  rolnib t2,char,#1
05cd0     04 10 67 F0 |                              shl char,#4
05cd4     82 BB C2 FC |                    xcont   m_lut2,t2
05cd8     01 FA 06 F1 |                    add     framebuf2,#1
05cdc     F6 0F 6F FB |                    djnz    cpl2,#p263
05ce0     34 00 90 FD |                    jmp     #p203
05ce4                 | 
05ce4     7D 11 E3 FA | p262               rdword  char,framebuf2
05ce8     04 06 DC FC |                            rep #3,#4
05cec     88 05 9B F8 |                              rolnib t2,char,#3
05cf0     88 05 9B F8 |                                  rolnib t2,char,#3
05cf4     04 10 67 F0 |                              shl char,#4
05cf8     82 BB C2 FC |                    xcont   m_lut2,t2
05cfc     02 FA 06 F1 |                    add     framebuf2,#2
05d00     F8 0F 6F FB |                    djnz    cpl2,#p262
05d04     10 00 90 FD |                    jmp     #p203
05d08                 | 
05d08                 | ''---------- all color modes without zoom
05d08                 | 
05d08     87 07 D8 FC | p251               rep  #3,cpl2
05d0c     7D 11 03 FB |                    rdlong  char,framebuf2
05d10     04 FA 06 F1 |                    add     framebuf2,#4
05d14     88 BB C2 FC |                    xcont   m_lut2,char
05d18                 |           
05d18                 |  ''-----------------------------------------------------------------------------------------
05d18                 | p203           ' getword  mb2,m_border,#0
05d18     00 24 0F F2 |                 cmp      mb2, #0 wz
05d1c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05d20                 | 
05d20     EC FB 9F FD |                 jmp #p302
05d24                 | 
05d24                 | '' -------------------------------------- END of graph  line ---------------------------------
05d24                 | 
05d24                 | '' consts and vars
05d24                 | 
05d24     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
05d28     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
05d2c     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
05d30     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
05d34                 | 
05d34     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
05d38                 | 
05d38                 | '------ these longs will be set by setmode function
05d38                 | 
05d38     00 00 00 00 | m_bs            long    0        'blanks before sync
05d3c     00 00 00 00 | m_sn            long    0        'sync
05d40     00 00 00 00 | m_bv            long    0        'blanks before visible
05d44     00 00 00 00 | m_vi            long    0        'visible pixels #
05d48     00 00 00 00 | m_border        long    0        'left/right borders
05d4c     00 00 00 00 | m_lut1          long    0        'characters
05d50     00 00 00 00 | i_vborder       long    0        'up/down borders
05d54     00 00 00 00 | i_upporch       long    0        'up porch lines
05d58     00 00 00 00 | i_vsync         long    0        'vsync lines
05d5c     00 00 00 00 | i_downporch     long    0        'down porch lines
05d60     00 00 00 00 | i_modenum       long    0        'mode #
05d64     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05d68     00 00 00 00 | i_lines         long    0        'scanlines #
05d6c     00 00 00 00 | i_clock         long    0
05d70     00 00 00 00 | i_hubset        long    0
05d74     00 00 00 00 | i_totalvis      long    0
05d78                 | 
05d78                 | '-------------------------------------
05d78                 | 
05d78     00 00 00 00 | m_lut2          long    0
05d7c                 | 
05d7c                 | colordepth
05d7c     00 00 00 00 | linestart       long    0
05d80     00 00 00 00 | linenum         long    0
05d84     00 01 00 00 | lutaddr         long    256
05d88                 | 
05d88     0E 00 00 00 | cursorsh        long    14
05d8c     00 00 00 00 | frames          long    0
05d90     00 00 00 00 | cursorx         long    0
05d94     00 00 00 00 | cursory         long    0
05d98     00 00 00 00 | cursorpos       long    0
05d9c     00 00 00 00 | cursorpos2      long    0
05da0     00 00 00 00 | fontstart       long    0
05da4     00 00 00 00 | border2         long 0
05da8     00 00 81 70 | lutiv           long $70810000
05dac     00 00 88 00 | lutt1           long $00880000
05db0     00 00 80 00 | lutg1           long $00800000
05db4     00 00 80 10 | lutg2           long $10800000
05db8     00 00 80 20 | lutg4           long $20800000
05dbc     00 00 80 30 | lutg8           long $30800000
05dc0     00 00 00 00 | framebuf        long 0
05dc4     00 00 00 00 | fontbuf         long 0
05dc8     00 00 00 00 | borderptr       long 0
05dcc     00 00 00 00 | vblankptr       long 0
05dd0     00 00 00 00 | cursorptr       long 0
05dd4     00 00 00 00 | modeptr         long 0
05dd8     00 00 00 00 | paletteptr      long 0
05ddc     00 00 00 00 | dlptr           long 0
05de0                 | fontnumptr      res     1
05de0                 | fontnumptr      res     1
05de0                 | hbase           res     1
05de0                 | hbase           res     1
05de0                 | borderptr2      res     1
05de0                 | borderptr2      res     1
05de0                 | dlptr2 res 1
05de0                 | dlptr2 res 1
05de0                 | dl              res 1
05de0                 | dl              res 1
05de0                 | ii              res     1
05de0                 | ii              res     1
05de0                 | framebuf2       res     1
05de0                 | framebuf2       res     1
05de0                 | hsync0          res     1
05de0                 | hsync0          res     1
05de0                 | hsync1          res     1
05de0                 | hsync1          res     1
05de0                 | fontline        res     1
05de0                 | fontline        res     1
05de0                 | t1              res     1
05de0                 | t1              res     1
05de0                 | t2              res     1
05de0                 | t2              res     1
05de0                 | t3 res 1
05de0                 | t3 res 1
05de0                 | t4 res 1
05de0                 | t4 res 1
05de0                 | t5 res 1
05de0                 | t5 res 1
05de0                 | skippattern res 1
05de0                 | skippattern res 1
05de0                 | cpl2 res 1
05de0                 | cpl2 res 1
05de0                 | char            res     1
05de0                 | char            res     1
05de0                 | backcolor       res     1
05de0                 | backcolor       res     1
05de0                 | charcolor       res     1
05de0                 | charcolor       res     1
05de0                 | zoom res 1
05de0                 | zoom res 1
05de0     00 00 00 00 | rcnt long 0 'dl repeat count
05de4     00 00 00 00 | rcnt2 long 0
05de8     00 00 00 00 | rcnt2a long 0
05dec     00 00 00 00 | roffset long 0
05df0     00 00 00 00 | rdl long 0  'dl repeat line
05df4     00 00 00 00 | dlc long 0 'dl command
05df8     00 00 00 00 | mb2 long 0
05dfc     00 00 00 00 | aend             long 0
05e00                 |                 fit     496                     '
05e00                 | __system__dat_
05e00     00 00 00 00 
05e04     00 00 00 00 | 	byte	$00[8]
05e08     03 00 00 00 
05e0c     00 00 00 00 
05e10     00 00 00 00 
05e14     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05e18                 | __heap_base
05e18     00 00 00 00 
      ...             
06e18     00 00 00 00 
06e1c     00 00 00 00 | 	long	0[1026]
06e20                 | objmem
06e20     00 00 00 00 | 	long	0[1]
06e24 0e8             | 	org	COG_BSS_START
06e24 0e8             | _var01
06e24 0e8             | 	res	1
06e24 0e9             | _var02
06e24 0e9             | 	res	1
06e24 0ea             | _var03
06e24 0ea             | 	res	1
06e24 0eb             | _var04
06e24 0eb             | 	res	1
06e24 0ec             | _var05
06e24 0ec             | 	res	1
06e24 0ed             | _var06
06e24 0ed             | 	res	1
06e24 0ee             | _var07
06e24 0ee             | 	res	1
06e24 0ef             | _var08
06e24 0ef             | 	res	1
06e24 0f0             | _var09
06e24 0f0             | 	res	1
06e24 0f1             | _var10
06e24 0f1             | 	res	1
06e24 0f2             | _var11
06e24 0f2             | 	res	1
06e24 0f3             | _var12
06e24 0f3             | 	res	1
06e24 0f4             | _var13
06e24 0f4             | 	res	1
06e24 0f5             | _var14
06e24 0f5             | 	res	1
06e24 0f6             | _var15
06e24 0f6             | 	res	1
06e24 0f7             | _var16
06e24 0f7             | 	res	1
06e24 0f8             | _var17
06e24 0f8             | 	res	1
06e24 0f9             | _var18
06e24 0f9             | 	res	1
06e24 0fa             | _var19
06e24 0fa             | 	res	1
06e24 0fb             | _var20
06e24 0fb             | 	res	1
06e24 0fc             | _var21
06e24 0fc             | 	res	1
06e24 0fd             | _var22
06e24 0fd             | 	res	1
06e24 0fe             | _var23
06e24 0fe             | 	res	1
06e24 0ff             | _var24
06e24 0ff             | 	res	1
06e24 100             | _var25
06e24 100             | 	res	1
06e24 101             | _var26
06e24 101             | 	res	1
06e24 102             | _var27
06e24 102             | 	res	1
06e24 103             | _var28
06e24 103             | 	res	1
06e24 104             | _var29
06e24 104             | 	res	1
06e24 105             | _var30
06e24 105             | 	res	1
06e24 106             | _var31
06e24 106             | 	res	1
06e24 107             | _var32
06e24 107             | 	res	1
06e24 108             | _var33
06e24 108             | 	res	1
06e24 109             | _var34
06e24 109             | 	res	1
06e24 10a             | _var35
06e24 10a             | 	res	1
06e24 10b             | _var36
06e24 10b             | 	res	1
06e24 10c             | _var37
06e24 10c             | 	res	1
06e24 10d             | _var38
06e24 10d             | 	res	1
06e24 10e             | _var39
06e24 10e             | 	res	1
06e24 10f             | _var40
06e24 10f             | 	res	1
06e24 110             | _var41
06e24 110             | 	res	1
06e24 111             | _var42
06e24 111             | 	res	1
06e24 112             | _var43
06e24 112             | 	res	1
06e24 113             | _var44
06e24 113             | 	res	1
06e24 114             | _var45
06e24 114             | 	res	1
06e24 115             | _var46
06e24 115             | 	res	1
06e24 116             | _var47
06e24 116             | 	res	1
06e24 117             | arg01
06e24 117             | 	res	1
06e24 118             | arg02
06e24 118             | 	res	1
06e24 119             | arg03
06e24 119             | 	res	1
06e24 11a             | arg04
06e24 11a             | 	res	1
06e24 11b             | local01
06e24 11b             | 	res	1
06e24 11c             | local02
06e24 11c             | 	res	1
06e24 11d             | local03
06e24 11d             | 	res	1
06e24 11e             | local04
06e24 11e             | 	res	1
06e24 11f             | local05
06e24 11f             | 	res	1
06e24 120             | local06
06e24 120             | 	res	1
06e24 121             | local07
06e24 121             | 	res	1
06e24 122             | local08
06e24 122             | 	res	1
06e24 123             | local09
06e24 123             | 	res	1
06e24 124             | local10
06e24 124             | 	res	1
06e24 125             | local11
06e24 125             | 	res	1
06e24 126             | local12
06e24 126             | 	res	1
06e24 127             | local13
06e24 127             | 	res	1
06e24 128             | local14
06e24 128             | 	res	1
06e24 129             | local15
06e24 129             | 	res	1
06e24 12a             | local16
06e24 12a             | 	res	1
06e24 12b             | local17
06e24 12b             | 	res	1
06e24 12c             | local18
06e24 12c             | 	res	1
06e24 12d             | local19
06e24 12d             | 	res	1
06e24 12e             | local20
06e24 12e             | 	res	1
06e24 12f             | local21
06e24 12f             | 	res	1
06e24 130             | local22
06e24 130             | 	res	1
06e24 131             | local23
06e24 131             | 	res	1
06e24 132             | local24
06e24 132             | 	res	1
06e24 133             | local25
06e24 133             | 	res	1
06e24 134             | local26
06e24 134             | 	res	1
06e24 135             | local27
06e24 135             | 	res	1
06e24 136             | local28
06e24 136             | 	res	1
06e24 137             | local29
06e24 137             | 	res	1
06e24 138             | local30
06e24 138             | 	res	1
06e24 139             | local31
06e24 139             | 	res	1
06e24 13a             | local32
06e24 13a             | 	res	1
06e24 13b             | local33
06e24 13b             | 	res	1
06e24 13c             | local34
06e24 13c             | 	res	1
06e24 13d             | local35
06e24 13d             | 	res	1
06e24 13e             | local36
06e24 13e             | 	res	1
06e24 13f             | local37
06e24 13f             | 	res	1
06e24 140             | muldiva_
06e24 140             | 	res	1
06e24 141             | muldivb_
06e24 141             | 	res	1
06e24 142             | 	fit	480
06e24 142             | 
